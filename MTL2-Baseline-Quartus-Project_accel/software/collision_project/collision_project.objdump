
collision_project.elf:     file format elf32-littlenios2
collision_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000244

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001ccb4 memsz 0x0001ccb4 flags r-x
    LOAD off    0x0001dcd4 vaddr 0x0201ccd4 paddr 0x0201e85c align 2**12
         filesz 0x00001b88 memsz 0x00001b88 flags rw-
    LOAD off    0x000203e4 vaddr 0x020203e4 paddr 0x020203e4 align 2**12
         filesz 0x00000000 memsz 0x00007404 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c574  02000244  02000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000051c  0201c7b8  0201c7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b88  0201ccd4  0201e85c  0001dcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007404  020203e4  020203e4  000203e4  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  0001f85c  2**0
                  CONTENTS
  7 .sdram_controller 00000000  020277e8  020277e8  0001f85c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001f85c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001100  00000000  00000000  0001f880  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002c061  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a37e  00000000  00000000  0004c9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000da0c  00000000  00000000  00056d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003630  00000000  00000000  0006476c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005433  00000000  00000000  00067d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008a9b  00000000  00000000  0006d1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00075c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001348  00000000  00000000  00075ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0007bcee  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007bcf4  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007bcf7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007bcf8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007bcf9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007bcfd  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007bd01  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007bd05  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007bd0e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007bd17  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0007bd20  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0007bd29  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d7f  00000000  00000000  0007bd68  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000575f4  00000000  00000000  0007fae7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000244 l    d  .text	00000000 .text
0201c7b8 l    d  .rodata	00000000 .rodata
0201ccd4 l    d  .rwdata	00000000 .rwdata
020203e4 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
020277e8 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../collision_project_bsp//obj/HAL/src/crt0.o
0200028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
0201e78c l     O .rwdata	00000008 one
0201e794 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0201ccd4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02004270 l     F .text	000000f0 __sbprintf
02006480 l     F .text	0000020c cvt
0200668c l     F .text	00000140 exponent
0201c9aa l     O .rodata	00000010 blanks.4403
0201c9ba l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200696c l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02008c78 l     F .text	000000f4 std
020203f0 l     O .bss	00000004 __sfp_lock
020203f4 l     O .bss	00000004 __sinit_lock
02009174 l     F .text	00000024 __fp_lock
02009198 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0201d0f8 l     O .rwdata	00000038 lconv
0201d130 l     O .rwdata	00000020 lc_ctype_charset
0201d150 l     O .rwdata	00000020 lc_message_charset
02020404 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0200a4c8 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0201cb0c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200e6c0 l     F .text	000000f0 __sbprintf
0201cb62 l     O .rodata	00000010 blanks.4348
0201cb72 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
02011270 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0201137c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
020113a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02011494 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02011574 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02011660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0201182c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201e7d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02011a78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0201e7d4 l     O .rwdata	00000004 lockid
02020428 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0201e7d8 l     O .rwdata	00000004 lockid
02020430 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
020134a8 l     F .text	00000048 OS_InitMisc
020134f0 l     F .text	0000006c OS_InitRdyList
0201365c l     F .text	000000e4 OS_InitTCBList
020133c8 l     F .text	000000e0 OS_InitEventList
0201355c l     F .text	00000080 OS_InitTaskIdle
020135dc l     F .text	00000080 OS_InitTaskStat
020138cc l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
020155dc l     F .text	000000f4 OS_FlagTaskRdy
0201539c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201a148 l     F .text	00000034 alt_dev_reg
0201d720 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201a4c0 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0201a764 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0201af40 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201b1a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201b61c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0201b75c l     F .text	0000003c alt_get_errno
0201b798 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02020498 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
02020494 g     O .bss	00000004 alt_instruction_exception_handler
0200d2cc g     F .text	000000b0 _mprec_log10
0201e826 g     O .rwdata	00000002 OSTaskNameSize
0200d44c g     F .text	00000134 __any_on
020101a8 g     F .text	00000060 _isatty_r
0201cae4 g     O .rodata	00000028 __mprec_tinytens
02011770 g     F .text	000000bc alt_main
0200402c g     F .text	00000118 _puts_r
020276e8 g     O .bss	00000100 alt_irq
02010208 g     F .text	00000070 _lseek_r
020168c4 g     F .text	000000cc OS_MemInit
02000ea4 g     F .text	00000174 sqrt
0201e85c g       *ABS*	00000000 __flash_rwdata_start
0201a0e8 g     F .text	00000060 OSTimeSet
02002960 g     F .text	00000088 .hidden __eqdf2
0201211c g     F .text	00000610 OSEventPendMulti
020277e8 g       *ABS*	00000000 __alt_heap_start
0201bda4 g     F .text	00000024 OSTaskCreateHook
020204c4 g     O .bss	00002000 task1_stk
02003fc4 g     F .text	00000068 printf
0201e7fe g     O .rwdata	00000002 OSMboxEn
02012784 g     F .text	0000004c OSIntEnter
02010490 g     F .text	000000d4 _wcrtomb_r
0200e350 g     F .text	000000a0 __sseek
0200901c g     F .text	000000d8 __sinit
020102e8 g     F .text	00000168 __swbuf_r
0201e80e g     O .rwdata	00000002 OSQEn
0200a0f8 g     F .text	00000084 _setlocale_r
02008d6c g     F .text	000000a4 __sfmoreglue
02011df0 g     F .text	000000cc __malloc_unlock
0201be0c g     F .text	00000020 OSTaskStatHook
02020438 g     O .bss	00000001 OSLockNesting
0201e84c g     O .rwdata	00000002 OSDataSize
02020439 g     O .bss	00000001 OSRunning
0200b73c g     F .text	00000208 memmove
0201be4c g     F .text	00000020 OSInitHookBegin
0201e844 g     O .rwdata	00000002 OSTmrSize
02008fe8 g     F .text	00000034 _cleanup
0200bb08 g     F .text	00000130 _Balloc
0202043c g     O .bss	00000004 OSIdleCtr
020029e8 g     F .text	000000dc .hidden __gtdf2
0201bb54 g     F .text	00000024 altera_nios2_gen2_irq_init
0201bc24 g       .text	00000000 OSStartTsk
02003f40 g     F .text	00000020 __errno
02013bfc g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000001c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
0201e84a g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
0201e7ea g     O .rwdata	00000002 OSEventSize
02020440 g     O .bss	00000001 OSPrioHighRdy
02010140 g     F .text	00000068 _fstat_r
0201bdc8 g     F .text	00000024 OSTaskDelHook
02020414 g     O .bss	00000004 errno
0200e26c g     F .text	00000030 __seofread
0201bc04 g       .text	00000000 OSStartHighRdy
02018b90 g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02014ee4 g     F .text	00000060 OSFlagPendGetFlagsRdy
0201e82a g     O .rwdata	00000002 OSTaskStatStkSize
02014060 g     F .text	00000308 OSFlagAccept
02016efc g     F .text	000000b8 OSQFlush
02016990 g     F .text	00000140 OSQAccept
02020420 g     O .bss	00000004 alt_argv
0202678c g       *ABS*	00000000 _gp
020189e4 g     F .text	000001ac OSTaskCreate
020184f4 g     F .text	000004f0 OSTaskChangePrio
02020434 g     O .bss	00000004 alt_heapsem
02013ed0 g     F .text	00000190 OSDebugInit
02018d74 g     F .text	00000344 OSTaskDel
0201d5a0 g     O .rwdata	00000180 alt_fd_list
020244c4 g     O .bss	00000370 OSFlagTbl
020131a8 g     F .text	000000b8 OS_EventTaskRemove
0201bed0 g     F .text	00000090 alt_find_dev
0200b5b4 g     F .text	00000188 memcpy
0201e814 g     O .rwdata	00000002 OSRdyTblSize
020203e4 g     O .bss	00000004 MailBox3
02008fa4 g     F .text	00000044 _cleanup_r
02003c4c g     F .text	000000dc .hidden __floatsidf
0201b6e0 g     F .text	0000007c alt_io_redirect
02002ac4 g     F .text	000000f4 .hidden __ltdf2
0201c7b8 g       *ABS*	00000000 __DTOR_END__
02004144 g     F .text	00000038 puts
0201c1d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02011ebc g     F .text	00000120 OSEventNameGet
0201e7f8 g     O .rwdata	00000002 OSFlagMax
02001660 g     F .text	00000104 __fpclassifyd
0200d1b0 g     F .text	0000011c __ratio
020127d0 g     F .text	000000f8 OSIntExit
0200e7b0 g     F .text	00000050 __vfiprintf_internal
0201e832 g     O .rwdata	00000002 OSTCBSize
02020441 g     O .bss	00000001 OSPrioCur
0201a9c0 g     F .text	000002bc altera_avalon_jtag_uart_read
02003f60 g     F .text	00000064 _printf_r
02003e84 g     F .text	00000064 .hidden __udivsi3
020114d0 g     F .text	000000a4 isatty
0201e818 g     O .rwdata	00000002 OSStkWidth
0201c9f4 g     O .rodata	000000c8 __mprec_tens
0201e80c g     O .rwdata	00000002 OSPtrSize
0200a17c g     F .text	00000024 __locale_charset
0201e7ec g     O .rwdata	00000002 OSEventTblSize
0201bb78 g       .text	00000000 OSCtxSw
0201c144 g     F .text	00000090 alt_icache_flush
02020408 g     O .bss	00000004 __malloc_top_pad
02020444 g     O .bss	00000004 OSTCBList
02020418 g     O .bss	00000004 alt_fd_list_lock
0201e7a8 g     O .rwdata	00000004 __mb_cur_max
0200a204 g     F .text	00000028 _localeconv_r
0200c150 g     F .text	00000058 __i2b
02009968 g     F .text	000005dc __sfvwrite_r
02024834 g     O .bss	00000c30 OSMemTbl
02020448 g     O .bss	00000001 OSTickStepState
0200e170 g     F .text	00000060 _sbrk_r
0201e810 g     O .rwdata	00000002 OSQMax
02025464 g     O .bss	00000800 OSTaskStatStk
02016500 g     F .text	000000f0 OSMemNameGet
0201e7f0 g     O .rwdata	00000002 OSFlagEn
02010278 g     F .text	00000070 _read_r
0201e836 g     O .rwdata	00000002 OSTimeTickHookEn
020173ac g     F .text	00000168 OSQPost
020156d0 g     F .text	000000a4 OS_FlagUnlink
0201e7c8 g     O .rwdata	00000004 alt_max_fd
02013794 g     F .text	00000068 OS_MemCopy
020137fc g     F .text	000000d0 OS_Sched
0200fcf8 g     F .text	0000012c _fclose_r
02016410 g     F .text	000000f0 OSMemGet
0201612c g     F .text	00000110 OSMboxQuery
020193a0 g     F .text	000001b4 OSTaskNameSet
02008c24 g     F .text	00000054 fflush
0202040c g     O .bss	00000004 __malloc_max_sbrked_mem
0202044c g     O .bss	00000004 OSCtxSwCtr
0201be2c g     F .text	00000020 OSTimeTickHook
0201e7fa g     O .rwdata	00000002 OSFlagNameSize
02013260 g     F .text	00000100 OS_EventTaskRemoveMulti
020017cc g     F .text	000008ac .hidden __adddf3
02013058 g     F .text	00000150 OS_EventTaskWaitMulti
0200cd6c g     F .text	00000204 __b2d
0201e812 g     O .rwdata	00000002 OSQSize
02010c90 g     F .text	00000538 .hidden __umoddi3
0201169c g     F .text	000000d4 lseek
02017e5c g     F .text	0000020c OSSemPend
0201e79c g     O .rwdata	00000004 __fdlib_version
0201e7a4 g     O .rwdata	00000004 _global_impure_ptr
0200d580 g     F .text	00000bf0 _realloc_r
0201e7fc g     O .rwdata	00000002 OSLowestPrio
020277e8 g       *ABS*	00000000 __bss_end
0201b52c g     F .text	000000f0 alt_iic_isr_register
0201beac g     F .text	00000024 OSTCBInitHook
0201e842 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0201ba4c g     F .text	00000108 alt_tick
02015ec0 g     F .text	00000110 OSMboxPost
02010718 g     F .text	00000578 .hidden __udivdi3
02010050 g     F .text	00000088 _fputwc_r
0201e7e4 g     O .rwdata	00000002 OSEventEn
0201cabc g     O .rodata	00000028 __mprec_bigtens
0200be48 g     F .text	0000018c __s2b
0201e83e g     O .rwdata	00000002 OSTmrCfgNameSize
020111c8 g     F .text	000000a8 .hidden __floatunsidf
0200c8e8 g     F .text	00000114 __mcmp
020091bc g     F .text	00000040 __fp_lock_all
0201b4e0 g     F .text	0000004c alt_ic_irq_enabled
020154fc g     F .text	000000e0 OS_FlagInit
0201b9b0 g     F .text	0000009c alt_alarm_stop
0201e820 g     O .rwdata	00000002 OSTaskIdleStkSize
02020488 g     O .bss	00000004 alt_irq_active
02017a94 g     F .text	000000b0 OSSemAccept
02016704 g     F .text	000000d8 OSMemPut
0201623c g     F .text	000001d4 OSMemCreate
02020450 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d4 alt_irq_handler
0201d578 g     O .rwdata	00000028 alt_dev_null
0201e834 g     O .rwdata	00000002 OSTicksPerSec
0201bb78 g       .text	00000000 OSIntCtxSw
0201b160 g     F .text	00000048 alt_dcache_flush_all
0200bfd4 g     F .text	00000090 __hi0bits
02003bcc g     F .text	00000080 .hidden __fixdfsi
02020454 g     O .bss	00000004 OSTCBFreeList
0201e85c g       *ABS*	00000000 __ram_rwdata_end
02018068 g     F .text	0000016c OSSemPendAbort
0201e7c0 g     O .rwdata	00000008 alt_dev_list
02011ab4 g     F .text	000000f8 write
0201e838 g     O .rwdata	00000002 OSVersionNbr
0201ccd4 g       *ABS*	00000000 __ram_rodata_end
020113e4 g     F .text	000000b0 fstat
02002ac4 g     F .text	000000f4 .hidden __ledf2
0201e7e0 g     O .rwdata	00000004 OSEndiannessTest
0200c578 g     F .text	00000178 __pow5mult
0200e800 g     F .text	000012c4 ___vfiprintf_internal_r
020203f8 g     O .bss	00000004 __nlocale_changed
02003ee8 g     F .text	00000058 .hidden __umodsi3
0201e7f2 g     O .rwdata	00000002 OSFlagGrpSize
020277e8 g       *ABS*	00000000 end
0201a378 g     F .text	00000148 altera_avalon_jtag_uart_init
02013a64 g     F .text	000000cc OS_TaskStat
020001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0201c7b8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0201afb8 g     F .text	0000007c alt_avalon_timer_sc_init
02003d28 g     F .text	00000064 .hidden __clzsi2
0201ac7c g     F .text	000002c4 altera_avalon_jtag_uart_write
020090f4 g     F .text	00000020 __sfp_lock_acquire
0200b3f8 g     F .text	000001bc memchr
02013740 g     F .text	00000054 OS_MemClr
020043b0 g     F .text	000020d0 ___vfprintf_internal_r
0201bc48 g     F .text	0000015c OSTaskStkInit
02000290 g     F .text	00000310 task1
0200923c g     F .text	00000560 _free_r
0200a1a0 g     F .text	00000020 __locale_mb_cur_max
02012db0 g     F .text	00000198 OS_EventTaskRdy
0201c598 g     F .text	000001ec __call_exitprocs
02020458 g     O .bss	00000001 OSCPUUsage
020203fc g     O .bss	00000004 __mlocale_changed
0201e7b0 g     O .rwdata	00000004 __malloc_sbrk_base
02000244 g     F .text	0000004c _start
020005a0 g     F .text	000006f8 task2
0202048c g     O .bss	00000004 _alt_tick_rate
02016fb4 g     F .text	0000028c OSQPend
02019c60 g     F .text	00000104 OSTimeDly
0200c6f0 g     F .text	000001f8 __lshift
02020490 g     O .bss	00000004 _alt_nticks
02011868 g     F .text	000000fc read
0201a1b4 g     F .text	00000060 alt_sys_init
0201c428 g     F .text	00000170 __register_exitproc
02020459 g     O .bss	00000001 OSTaskCtr
020203e8 g     O .bss	00000004 MailBox2
02019d64 g     F .text	00000154 OSTimeDlyHMSM
0200c1a8 g     F .text	000003d0 __multiply
0201a868 g     F .text	00000068 altera_avalon_jtag_uart_close
0201ccd4 g       *ABS*	00000000 __ram_rwdata_start
0201c7b8 g       *ABS*	00000000 __ram_rodata_start
0202049c g     O .bss	00000028 __malloc_current_mallinfo
0201e7e6 g     O .rwdata	00000002 OSEventMax
0200cf70 g     F .text	00000240 __d2b
020181d4 g     F .text	00000110 OSSemPost
02012954 g     F .text	000000dc OSSchedUnlock
0201a214 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0201c068 g     F .text	000000dc alt_get_fd
0202045c g     O .bss	00000004 OSMemFreeList
02012aa0 g     F .text	000000b0 OSStatInit
020152d8 g     F .text	000000c4 OSFlagQuery
0201e81c g     O .rwdata	00000002 OSTaskCreateExtEn
0200fb34 g     F .text	00000060 _close_r
0201c2f4 g     F .text	00000134 memcmp
02012d90 g     F .text	00000020 OS_Dummy
0201a2d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
020277e8 g       *ABS*	00000000 __alt_stack_base
0201a324 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020067cc g     F .text	000001a0 __swsetup_r
02025c64 g     O .bss	000001e0 OSQTbl
02002078 g     F .text	000008e8 .hidden __divdf3
02008e10 g     F .text	00000194 __sfp
0200d37c g     F .text	000000d0 __copybits
0201d170 g     O .rwdata	00000408 __malloc_av_
02009154 g     F .text	00000020 __sinit_lock_release
02020460 g     O .bss	00000004 OSTCBHighRdy
02002bb8 g     F .text	00000718 .hidden __muldf3
0200e1d0 g     F .text	0000009c __sread
02020464 g     O .bss	00000004 OSQFreeList
0201bf60 g     F .text	00000108 alt_find_file
0201b1e4 g     F .text	000000a4 alt_dev_llist_insert
02011cd0 g     F .text	00000120 __malloc_lock
020119c8 g     F .text	000000b0 sbrk
02011fdc g     F .text	00000140 OSEventNameSet
02008b9c g     F .text	00000088 _fflush_r
0200fb94 g     F .text	00000164 _calloc_r
02020468 g     O .bss	00000001 OSRdyGrp
020203e4 g       *ABS*	00000000 __bss_start
0200b944 g     F .text	000001c4 memset
02000dd0 g     F .text	000000d4 main
02020424 g     O .bss	00000004 alt_envp
02020410 g     O .bss	00000004 __malloc_max_total_mem
0201a274 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02010450 g     F .text	00000040 __swbuf
0201cba0 g     O .rodata	00000100 OSUnMapTbl
0201e816 g     O .rwdata	00000002 OSSemEn
02014f44 g     F .text	00000394 OSFlagPost
0200e3f0 g     F .text	00000054 __sclose
02001764 g     F .text	00000068 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
0200fe24 g     F .text	00000038 fclose
02012f48 g     F .text	00000110 OS_EventTaskWait
020224c4 g     O .bss	00002000 task2_stk
02013b30 g     F .text	000000cc OS_TaskStatStkChk
020190b8 g     F .text	00000150 OSTaskDelReq
02006d20 g     F .text	00001b78 _dtoa_r
0200a87c g     F .text	00000b7c _malloc_r
020106a0 g     F .text	00000078 __ascii_wctomb
0201e7cc g     O .rwdata	00000004 alt_errno
02012a30 g     F .text	00000070 OSStart
02011c70 g     F .text	00000060 __env_unlock
02009f44 g     F .text	000000d8 _fwalk
02019554 g     F .text	000001d4 OSTaskResume
020167dc g     F .text	000000e8 OSMemQuery
0201e828 g     O .rwdata	00000002 OSTaskStatEn
0201e802 g     O .rwdata	00000002 OSMemMax
02017514 g     F .text	00000170 OSQPostFront
02003d8c g     F .text	00000084 .hidden __divsi3
02020469 g     O .bss	00000003 OSRdyTbl
0201e7dc g     O .rwdata	00000002 OSDebugEn
0200979c g     F .text	000001cc _malloc_trim_r
0201c7b8 g       *ABS*	00000000 __CTOR_END__
0201e7f4 g     O .rwdata	00000002 OSFlagNodeSize
0201e83c g     O .rwdata	00000002 OSTmrCfgMax
0200e444 g     F .text	00000140 strcmp
02016ad0 g     F .text	000001ac OSQCreate
02019208 g     F .text	00000198 OSTaskNameGet
0201c7b8 g       *ABS*	00000000 __flash_rodata_start
02017684 g     F .text	0000020c OSQPostOpt
02012b50 g     F .text	00000220 OSTimeTick
0201e824 g     O .rwdata	00000002 OSTaskMax
0201c7b8 g       *ABS*	00000000 __DTOR_LIST__
02017b44 g     F .text	000000d8 OSSemCreate
0201e848 g     O .rwdata	00000002 OSTmrWheelSize
02002960 g     F .text	00000088 .hidden __nedf2
0201e81e g     O .rwdata	00000002 OSTaskDelEn
020182e4 g     F .text	00000110 OSSemQuery
02016c7c g     F .text	00000280 OSQDel
02017240 g     F .text	0000016c OSQPendAbort
0201a17c g     F .text	00000038 alt_irq_init
02011964 g     F .text	00000064 alt_release_fd
0201c841 g     O .rodata	00000100 .hidden __clz_tab
02020400 g     O .bss	00000004 _PathLocale
0201c270 g     F .text	0000003c atexit
0200fac4 g     F .text	00000070 _write_r
020128c8 g     F .text	0000008c OSSchedLock
0200a22c g     F .text	00000040 setlocale
02014368 g     F .text	00000108 OSFlagCreate
0201e7a0 g     O .rwdata	00000004 _impure_ptr
0202041c g     O .bss	00000004 alt_argc
02008898 g     F .text	00000304 __sflush_r
0201b2e8 g     F .text	00000060 _do_dtors
0200a1e4 g     F .text	00000020 __locale_cjk_lang
0201e7ee g     O .rwdata	00000002 OSEventMultiEn
02014470 g     F .text	00000248 OSFlagDel
0202046c g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
02015d54 g     F .text	0000016c OSMboxPendAbort
0200cca0 g     F .text	000000cc __ulp
0201492c g     F .text	000005b8 OSFlagPend
0201e83a g     O .rwdata	00000002 OSTmrEn
020091fc g     F .text	00000040 __fp_unlock_all
0201e7b8 g     O .rwdata	00000008 alt_fs_list
02013940 g     F .text	00000074 OS_StrCopy
0201e804 g     O .rwdata	00000002 OSMemNameSize
0201be6c g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
0201e830 g     O .rwdata	00000002 OSTCBPrioTblMax
0200a26c g     F .text	00000030 localeconv
02001018 g     F .text	00000648 __ieee754_sqrt
0201e82c g     O .rwdata	00000002 OSTaskStatStkChkEn
0201580c g     F .text	000000d4 OSMboxCreate
0201b37c g     F .text	00000050 alt_ic_isr_register
0201e800 g     O .rwdata	00000002 OSMemEn
0201e80a g     O .rwdata	00000002 OSMutexEn
0201e85c g       *ABS*	00000000 _edata
020277e8 g       *ABS*	00000000 _end
02020470 g     O .bss	00000001 OSIntNesting
0200fe5c g     F .text	000001f4 __fputwc
02000244 g       *ABS*	00000000 __ram_exceptions_end
0201a8d0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02019eb8 g     F .text	000001d4 OSTimeDlyResume
020147e0 g     F .text	0000014c OSFlagNameSet
02015b20 g     F .text	00000234 OSMboxPend
02019728 g     F .text	000001c0 OSTaskStkChk
0201b454 g     F .text	0000008c alt_ic_irq_disable
0201e806 g     O .rwdata	00000002 OSMemSize
0200e29c g     F .text	000000b4 __swrite
0201e7ac g     O .rwdata	00000004 __malloc_trim_threshold
0200a1c0 g     F .text	00000024 __locale_msgcharset
02020474 g     O .bss	00000004 OSTCBCur
0201c2ac g     F .text	00000048 exit
0201e808 g     O .rwdata	00000002 OSMemTblSize
0200a01c g     F .text	000000dc _fwalk_reent
020203ec g     O .bss	00000004 MailBox1
0200c9fc g     F .text	000002a4 __mdiff
02003e10 g     F .text	00000074 .hidden __modsi3
02015774 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02009114 g     F .text	00000020 __sfp_lock_release
0201272c g     F .text	00000058 OSInit
02019acc g     F .text	00000124 OSTaskQuery
020179ec g     F .text	000000a8 OS_QInit
020139b4 g     F .text	00000054 OS_StrLen
020165f0 g     F .text	00000114 OSMemNameSet
0201e822 g     O .rwdata	00000002 OSTaskProfileEn
02020478 g     O .bss	00000004 OSTime
02025e44 g     O .bss	00000800 OSTaskIdleStk
0201c784 g     F .text	00000034 _exit
02015fd0 g     F .text	0000015c OSMboxPostOpt
0201b034 g     F .text	0000012c alt_alarm_start
020146b8 g     F .text	00000128 OSFlagNameGet
02000c98 g     F .text	00000138 detect_collide
0201a08c g     F .text	0000005c OSTimeGet
0200a29c g     F .text	0000022c __smakebuf_r
0200417c g     F .text	000000f4 strlen
0201bdec g     F .text	00000020 OSTaskSwHook
0201b85c g     F .text	00000154 open
02026644 g     O .bss	00000b40 OSEventTbl
020029e8 g     F .text	000000dc .hidden __gedf2
02027184 g     O .bss	00000510 OSTCBTbl
020183f4 g     F .text	00000100 OSSemSet
0201e7b4 g     O .rwdata	00000004 __wctomb
0200e584 g     F .text	0000013c __sprint_r
0201b348 g     F .text	00000034 alt_icache_flush_all
0201e850 g     O .rwdata	00000004 alt_priority_mask
02017c1c g     F .text	00000240 OSSemDel
0202047c g     O .bss	00000004 OSFlagFreeList
0201b3cc g     F .text	00000088 alt_ic_irq_enable
0201e7e8 g     O .rwdata	00000002 OSEventNameSize
020158e0 g     F .text	00000240 OSMboxDel
02004360 g     F .text	00000050 __vfprintf_internal
02020480 g     O .bss	00000001 OSStatRdy
02027694 g     O .bss	00000054 OSTCBPrioTbl
0201063c g     F .text	00000064 _wctomb_r
02011bac g     F .text	000000c4 __env_lock
0201e82e g     O .rwdata	00000002 OSTaskSwHookEn
020032d0 g     F .text	000008fc .hidden __subdf3
0200c064 g     F .text	000000ec __lo0bits
0201e854 g     O .rwdata	00000008 alt_alarm_list
0201e7f6 g     O .rwdata	00000002 OSFlagWidth
0201b288 g     F .text	00000060 _do_ctors
02010564 g     F .text	000000d8 wcrtomb
020112ac g     F .text	000000d0 close
0202042c g     O .bss	00000004 alt_envsem
02020484 g     O .bss	00000004 OSIdleCtrRun
02012d70 g     F .text	00000020 OSVersion
0201e840 g     O .rwdata	00000002 OSTmrCfgWheelSize
020115dc g     F .text	00000084 alt_load
02019bf0 g     F .text	00000070 OS_TaskStkClr
0201e81a g     O .rwdata	00000002 OSTaskCreateEn
02013360 g     F .text	00000068 OS_EventWaitListInit
020100d8 g     F .text	00000068 fputwc
0201be8c g     F .text	00000020 OSTaskIdleHook
02009134 g     F .text	00000020 __sinit_lock_acquire
0200bcb4 g     F .text	00000194 __multadd
020198e8 g     F .text	000001e4 OSTaskSuspend
0200bc38 g     F .text	0000007c _Bfree
02013a08 g     F .text	0000005c OS_TaskIdle
0201e846 g     O .rwdata	00000002 OSTmrTblSize
02017890 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409114 	ori	at,at,580
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	20127840 	call	2012784 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080b4 	movhi	r2,514
 2000140:	109dba04 	addi	r2,r2,30440
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080b4 	movhi	r2,514
 2000158:	109dba04 	addi	r2,r2,30440
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	20127d00 	call	20127d0 <OSIntExit>
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e4:	000531fa 	rdctl	r2,exception
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001ec:	e0bffd17 	ldw	r2,-12(fp)
 20001f0:	10801f0c 	andi	r2,r2,124
 20001f4:	1004d0ba 	srli	r2,r2,2
 20001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20001fc:	0005333a 	rdctl	r2,badaddr
 2000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000204:	d0a74217 	ldw	r2,-25336(gp)
 2000208:	10000726 	beq	r2,zero,2000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200020c:	d0a74217 	ldw	r2,-25336(gp)
 2000210:	e0fffd17 	ldw	r3,-12(fp)
 2000214:	e1bffe17 	ldw	r6,-8(fp)
 2000218:	e17fff17 	ldw	r5,-4(fp)
 200021c:	1809883a 	mov	r4,r3
 2000220:	103ee83a 	callr	r2
 2000224:	00000206 	br	2000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 200022c:	0005883a 	mov	r2,zero
}
 2000230:	e037883a 	mov	sp,fp
 2000234:	dfc00117 	ldw	ra,4(sp)
 2000238:	df000017 	ldw	fp,0(sp)
 200023c:	dec00204 	addi	sp,sp,8
 2000240:	f800283a 	ret

Disassembly of section .text:

02000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 2000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 200024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000250:	00bffd16 	blt	zero,r2,2000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 200025c:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000260:	d699e314 	ori	gp,gp,26508
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000264:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 2000268:	1080f914 	ori	r2,r2,996

    movhi r3, %hi(__bss_end)
 200026c:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 2000270:	18ddfa14 	ori	r3,r3,30696

    beq r2, r3, 1f
 2000274:	10c00326 	beq	r2,r3,2000284 <_start+0x40>

0:
    stw zero, (r2)
 2000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 200027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000280:	10fffd36 	bltu	r2,r3,2000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000284:	20115dc0 	call	20115dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000288:	20117700 	call	2011770 <alt_main>

0200028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 200028c:	003fff06 	br	200028c <alt_after_alt_main>

02000290 <task1>:
OS_EVENT *MailBox2;
OS_EVENT *MailBox3;

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
 2000290:	deffe404 	addi	sp,sp,-112
 2000294:	dfc01b15 	stw	ra,108(sp)
 2000298:	df001a15 	stw	fp,104(sp)
 200029c:	df001a04 	addi	fp,sp,104
 20002a0:	e13fff15 	stw	r4,-4(fp)
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 20002a4:	008000b4 	movhi	r2,2
 20002a8:	e0bfef15 	stw	r2,-68(fp)
	int count_old = 0;
 20002ac:	e03ff015 	stw	zero,-64(fp)
	int count = 0;
 20002b0:	e03fe715 	stw	zero,-100(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 20002b4:	e03fee15 	stw	zero,-72(fp)

	while (1){
			count_old = count;
 20002b8:	e0bfe717 	ldw	r2,-100(fp)
 20002bc:	e0bff015 	stw	r2,-64(fp)
			count = *(MTL_controller + 10); // récupère le nombre de doigts présent sur l'écran
 20002c0:	e0bfef17 	ldw	r2,-68(fp)
 20002c4:	10800a17 	ldw	r2,40(r2)
 20002c8:	e0bfe715 	stw	r2,-100(fp)
			//printf("count : %d\n", count);
			//OSTimeDlyHMSM(0,0,0,75);
			int pos1 = *(MTL_controller + 11);
 20002cc:	e0bfef17 	ldw	r2,-68(fp)
 20002d0:	10800b17 	ldw	r2,44(r2)
 20002d4:	e0bff115 	stw	r2,-60(fp)
			//printf("pos1 : (%d, %d)\n", pos1 & 0x0003FF, pos1 >> 10);
			//OSTimeDlyHMSM(0,0,0,100);
			int pos2 = *(MTL_controller + 12);
 20002d8:	e0bfef17 	ldw	r2,-68(fp)
 20002dc:	10800c17 	ldw	r2,48(r2)
 20002e0:	e0bff215 	stw	r2,-56(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 20002e4:	e0bff017 	ldw	r2,-64(fp)
 20002e8:	10800058 	cmpnei	r2,r2,1
 20002ec:	1000121e 	bne	r2,zero,2000338 <task1+0xa8>
 20002f0:	e0bfe717 	ldw	r2,-100(fp)
 20002f4:	10800098 	cmpnei	r2,r2,2
 20002f8:	10000f1e 	bne	r2,zero,2000338 <task1+0xa8>
			{
				printf("start gesture\n");
 20002fc:	010080b4 	movhi	r4,514
 2000300:	2131ee04 	addi	r4,r4,-14408
 2000304:	20041440 	call	2004144 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000308:	e0bff117 	ldw	r2,-60(fp)
 200030c:	1080ffcc 	andi	r2,r2,1023
 2000310:	e0bfe815 	stw	r2,-96(fp)
				y1_gesture_start = pos1 >> 10;
 2000314:	e0bff117 	ldw	r2,-60(fp)
 2000318:	1005d2ba 	srai	r2,r2,10
 200031c:	e0bfeb15 	stw	r2,-84(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 2000320:	e0bff217 	ldw	r2,-56(fp)
 2000324:	1080ffcc 	andi	r2,r2,1023
 2000328:	e0bfe915 	stw	r2,-92(fp)
				y2_gesture_start = pos2 >> 10;
 200032c:	e0bff217 	ldw	r2,-56(fp)
 2000330:	1005d2ba 	srai	r2,r2,10
 2000334:	e0bfec15 	stw	r2,-80(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000338:	e0bff017 	ldw	r2,-64(fp)
 200033c:	10800098 	cmpnei	r2,r2,2
 2000340:	1000261e 	bne	r2,zero,20003dc <task1+0x14c>
 2000344:	e0bfe717 	ldw	r2,-100(fp)
 2000348:	10800058 	cmpnei	r2,r2,1
 200034c:	1000231e 	bne	r2,zero,20003dc <task1+0x14c>
			{
				printf("stop gesture\n");
 2000350:	010080b4 	movhi	r4,514
 2000354:	2131f204 	addi	r4,r4,-14392
 2000358:	20041440 	call	2004144 <puts>
				x1_gesture_stop = pos1 & 0x0003FF;
 200035c:	e0bff117 	ldw	r2,-60(fp)
 2000360:	1080ffcc 	andi	r2,r2,1023
 2000364:	e0bff315 	stw	r2,-52(fp)
				y1_gesture_stop = pos1 >> 10;
 2000368:	e0bff117 	ldw	r2,-60(fp)
 200036c:	1005d2ba 	srai	r2,r2,10
 2000370:	e0bff415 	stw	r2,-48(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 2000374:	e0bff217 	ldw	r2,-56(fp)
 2000378:	1080ffcc 	andi	r2,r2,1023
 200037c:	e0bfea15 	stw	r2,-88(fp)
				y2_gesture_stop = pos2 >> 10;
 2000380:	e0bff217 	ldw	r2,-56(fp)
 2000384:	1005d2ba 	srai	r2,r2,10
 2000388:	e0bfed15 	stw	r2,-76(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 200038c:	e0bfe817 	ldw	r2,-96(fp)
 2000390:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 2000394:	e0fff317 	ldw	r3,-52(fp)
 2000398:	18800e16 	blt	r3,r2,20003d4 <task1+0x144>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 200039c:	e0bfe817 	ldw	r2,-96(fp)
 20003a0:	10c00784 	addi	r3,r2,30
 20003a4:	e0bff317 	ldw	r2,-52(fp)
 20003a8:	18800a16 	blt	r3,r2,20003d4 <task1+0x144>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003ac:	e0bfeb17 	ldw	r2,-84(fp)
 20003b0:	10bff884 	addi	r2,r2,-30
 20003b4:	e0fff417 	ldw	r3,-48(fp)
 20003b8:	18800616 	blt	r3,r2,20003d4 <task1+0x144>
 20003bc:	e0bfeb17 	ldw	r2,-84(fp)
 20003c0:	10c00784 	addi	r3,r2,30
 20003c4:	e0bff417 	ldw	r2,-48(fp)
 20003c8:	18800216 	blt	r3,r2,20003d4 <task1+0x144>
 20003cc:	00800044 	movi	r2,1
 20003d0:	00000106 	br	20003d8 <task1+0x148>
 20003d4:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003d8:	e0bfee15 	stw	r2,-72(fp)
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
			}

			//m =(y2_gesture_stop-y1_geture_start)/(x2_gesture_stop-x1_gesture_start);
	        //p = (y1_geture_start-(m*x1_gesture_start));
			*(MTL_controller + 1) = (y1_gesture_start << 10) + x1_gesture_start;
 20003dc:	e0bfef17 	ldw	r2,-68(fp)
 20003e0:	10800104 	addi	r2,r2,4
 20003e4:	e0ffeb17 	ldw	r3,-84(fp)
 20003e8:	180892ba 	slli	r4,r3,10
 20003ec:	e0ffe817 	ldw	r3,-96(fp)
 20003f0:	20c7883a 	add	r3,r4,r3
 20003f4:	10c00015 	stw	r3,0(r2)
			*(MTL_controller + 2) = (y2_gesture_start << 10) + x2_gesture_start;
 20003f8:	e0bfef17 	ldw	r2,-68(fp)
 20003fc:	10800204 	addi	r2,r2,8
 2000400:	e0ffec17 	ldw	r3,-80(fp)
 2000404:	180892ba 	slli	r4,r3,10
 2000408:	e0ffe917 	ldw	r3,-92(fp)
 200040c:	20c7883a 	add	r3,r4,r3
 2000410:	10c00015 	stw	r3,0(r2)
			*(MTL_controller + 3) = (y2_gesture_stop << 10) + x2_gesture_stop;
 2000414:	e0bfef17 	ldw	r2,-68(fp)
 2000418:	10800304 	addi	r2,r2,12
 200041c:	e0ffed17 	ldw	r3,-76(fp)
 2000420:	180892ba 	slli	r4,r3,10
 2000424:	e0ffea17 	ldw	r3,-88(fp)
 2000428:	20c7883a 	add	r3,r4,r3
 200042c:	10c00015 	stw	r3,0(r2)

			if(gesture_detected){
 2000430:	e0bfee17 	ldw	r2,-72(fp)
 2000434:	10005426 	beq	r2,zero,2000588 <task1+0x2f8>
				int x_dir = (x2_gesture_stop - x1_gesture_start);
 2000438:	e0ffea17 	ldw	r3,-88(fp)
 200043c:	e0bfe817 	ldw	r2,-96(fp)
 2000440:	1885c83a 	sub	r2,r3,r2
 2000444:	e0bff515 	stw	r2,-44(fp)
				int y_dir = (y2_gesture_stop - y1_gesture_start);
 2000448:	e0ffed17 	ldw	r3,-76(fp)
 200044c:	e0bfeb17 	ldw	r2,-84(fp)
 2000450:	1885c83a 	sub	r2,r3,r2
 2000454:	e0bff615 	stw	r2,-40(fp)

				double l = sqrt(x_dir*x_dir + y_dir*y_dir);
 2000458:	e0fff517 	ldw	r3,-44(fp)
 200045c:	e0bff517 	ldw	r2,-44(fp)
 2000460:	1887383a 	mul	r3,r3,r2
 2000464:	e13ff617 	ldw	r4,-40(fp)
 2000468:	e0bff617 	ldw	r2,-40(fp)
 200046c:	2085383a 	mul	r2,r4,r2
 2000470:	1885883a 	add	r2,r3,r2
 2000474:	1009883a 	mov	r4,r2
 2000478:	2003c4c0 	call	2003c4c <__floatsidf>
 200047c:	100b883a 	mov	r5,r2
 2000480:	180d883a 	mov	r6,r3
 2000484:	2809883a 	mov	r4,r5
 2000488:	300b883a 	mov	r5,r6
 200048c:	2000ea40 	call	2000ea4 <sqrt>
 2000490:	e0bff715 	stw	r2,-36(fp)
 2000494:	e0fff815 	stw	r3,-32(fp)

				double vector_x = x_dir/l;
 2000498:	e13ff517 	ldw	r4,-44(fp)
 200049c:	2003c4c0 	call	2003c4c <__floatsidf>
 20004a0:	1011883a 	mov	r8,r2
 20004a4:	1813883a 	mov	r9,r3
 20004a8:	e1bff717 	ldw	r6,-36(fp)
 20004ac:	e1fff817 	ldw	r7,-32(fp)
 20004b0:	4009883a 	mov	r4,r8
 20004b4:	480b883a 	mov	r5,r9
 20004b8:	20020780 	call	2002078 <__divdf3>
 20004bc:	1009883a 	mov	r4,r2
 20004c0:	180b883a 	mov	r5,r3
 20004c4:	2005883a 	mov	r2,r4
 20004c8:	2807883a 	mov	r3,r5
 20004cc:	e0bff915 	stw	r2,-28(fp)
 20004d0:	e0fffa15 	stw	r3,-24(fp)
				double vector_y = y_dir/l;
 20004d4:	e13ff617 	ldw	r4,-40(fp)
 20004d8:	2003c4c0 	call	2003c4c <__floatsidf>
 20004dc:	1011883a 	mov	r8,r2
 20004e0:	1813883a 	mov	r9,r3
 20004e4:	e1bff717 	ldw	r6,-36(fp)
 20004e8:	e1fff817 	ldw	r7,-32(fp)
 20004ec:	4009883a 	mov	r4,r8
 20004f0:	480b883a 	mov	r5,r9
 20004f4:	20020780 	call	2002078 <__divdf3>
 20004f8:	1009883a 	mov	r4,r2
 20004fc:	180b883a 	mov	r5,r3
 2000500:	2005883a 	mov	r2,r4
 2000504:	2807883a 	mov	r3,r5
 2000508:	e0bffb15 	stw	r2,-20(fp)
 200050c:	e0fffc15 	stw	r3,-16(fp)

				double speed = 200;
 2000510:	e03ffd15 	stw	zero,-12(fp)
 2000514:	00901a74 	movhi	r2,16489
 2000518:	e0bffe15 	stw	r2,-8(fp)

				printf("tir : (%.2f, %.2f)\n", vector_x, vector_y);
 200051c:	e23ff917 	ldw	r8,-28(fp)
 2000520:	e27ffa17 	ldw	r9,-24(fp)
 2000524:	e0bffb17 	ldw	r2,-20(fp)
 2000528:	e0fffc17 	ldw	r3,-16(fp)
 200052c:	d8c00015 	stw	r3,0(sp)
 2000530:	100f883a 	mov	r7,r2
 2000534:	400b883a 	mov	r5,r8
 2000538:	480d883a 	mov	r6,r9
 200053c:	010080b4 	movhi	r4,514
 2000540:	2131f604 	addi	r4,r4,-14376
 2000544:	2003fc40 	call	2003fc4 <printf>

				OSMboxPost(MailBox1, &vector_x);
 2000548:	d0a71817 	ldw	r2,-25504(gp)
 200054c:	e0fff904 	addi	r3,fp,-28
 2000550:	180b883a 	mov	r5,r3
 2000554:	1009883a 	mov	r4,r2
 2000558:	2015ec00 	call	2015ec0 <OSMboxPost>
				OSMboxPost(MailBox2, &vector_y);
 200055c:	d0a71717 	ldw	r2,-25508(gp)
 2000560:	e0fffb04 	addi	r3,fp,-20
 2000564:	180b883a 	mov	r5,r3
 2000568:	1009883a 	mov	r4,r2
 200056c:	2015ec00 	call	2015ec0 <OSMboxPost>
				OSMboxPost(MailBox3, &speed);
 2000570:	d0a71617 	ldw	r2,-25512(gp)
 2000574:	e0fffd04 	addi	r3,fp,-12
 2000578:	180b883a 	mov	r5,r3
 200057c:	1009883a 	mov	r4,r2
 2000580:	2015ec00 	call	2015ec0 <OSMboxPost>
				gesture_detected = 0;
 2000584:	e03fee15 	stw	zero,-72(fp)
			}

		OSTimeDlyHMSM(0,0,0,10);
 2000588:	01c00284 	movi	r7,10
 200058c:	000d883a 	mov	r6,zero
 2000590:	000b883a 	mov	r5,zero
 2000594:	0009883a 	mov	r4,zero
 2000598:	2019d640 	call	2019d64 <OSTimeDlyHMSM>
	}
 200059c:	003f4606 	br	20002b8 <task1+0x28>

020005a0 <task2>:
}

void task2 (void *pdata)
{
 20005a0:	deffc604 	addi	sp,sp,-232
 20005a4:	dfc03915 	stw	ra,228(sp)
 20005a8:	df003815 	stw	fp,224(sp)
 20005ac:	dd403715 	stw	r21,220(sp)
 20005b0:	dd003615 	stw	r20,216(sp)
 20005b4:	dcc03515 	stw	r19,212(sp)
 20005b8:	dc803415 	stw	r18,208(sp)
 20005bc:	dc403315 	stw	r17,204(sp)
 20005c0:	dc003215 	stw	r16,200(sp)
 20005c4:	df003804 	addi	fp,sp,224
 20005c8:	e13ff915 	stw	r4,-28(fp)
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 20005cc:	008000b4 	movhi	r2,2
 20005d0:	e0bfd315 	stw	r2,-180(fp)
	int ball1 [2];
	int ball2 [2];

	int x4 = 250;
 20005d4:	00803e84 	movi	r2,250
 20005d8:	e0bfd415 	stw	r2,-176(fp)
	int y4 = 250;
 20005dc:	00803e84 	movi	r2,250
 20005e0:	e0bfd515 	stw	r2,-172(fp)
	int x5 = 600;//128;
 20005e4:	00809604 	movi	r2,600
 20005e8:	e0bfd615 	stw	r2,-168(fp)
	int y5 = 250;//64;
 20005ec:	00803e84 	movi	r2,250
 20005f0:	e0bfd715 	stw	r2,-164(fp)
	ball1[0]=x4;
 20005f4:	e0bfd417 	ldw	r2,-176(fp)
 20005f8:	e0bfee15 	stw	r2,-72(fp)
	ball1[1]=y4;
 20005fc:	e0bfd517 	ldw	r2,-172(fp)
 2000600:	e0bfef15 	stw	r2,-68(fp)
	ball2[0]=x5;
 2000604:	e0bfd617 	ldw	r2,-168(fp)
 2000608:	e0bff015 	stw	r2,-64(fp)
	ball2[1]=y5;
 200060c:	e0bfd717 	ldw	r2,-164(fp)
 2000610:	e0bff115 	stw	r2,-60(fp)

	int x6 = 0;//196;
 2000614:	e03fd815 	stw	zero,-160(fp)
	int y6 = 0;//64;
 2000618:	e03fd915 	stw	zero,-156(fp)
	int x7 = 0;//256;
 200061c:	e03fda15 	stw	zero,-152(fp)
	int y7 = 0;//64;
 2000620:	e03fdb15 	stw	zero,-148(fp)
	int x8 = 0;//320;
 2000624:	e03fdc15 	stw	zero,-144(fp)
	int y8 = 0;//64;
 2000628:	e03fdd15 	stw	zero,-140(fp)
	int x9 = 0;//384;
 200062c:	e03fde15 	stw	zero,-136(fp)
	int y9 = 0;//64;
 2000630:	e03fdf15 	stw	zero,-132(fp)
	int x10 = 0;//64;
 2000634:	e03fe015 	stw	zero,-128(fp)
	int y10 = 0;//128;
 2000638:	e03fe115 	stw	zero,-124(fp)

	*(MTL_controller + 4) = (y4 << 10) + x4;
 200063c:	e0bfd317 	ldw	r2,-180(fp)
 2000640:	10800404 	addi	r2,r2,16
 2000644:	e0ffd517 	ldw	r3,-172(fp)
 2000648:	180892ba 	slli	r4,r3,10
 200064c:	e0ffd417 	ldw	r3,-176(fp)
 2000650:	20c7883a 	add	r3,r4,r3
 2000654:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 5) = (y5 << 10) + x5;
 2000658:	e0bfd317 	ldw	r2,-180(fp)
 200065c:	10800504 	addi	r2,r2,20
 2000660:	e0ffd717 	ldw	r3,-164(fp)
 2000664:	180892ba 	slli	r4,r3,10
 2000668:	e0ffd617 	ldw	r3,-168(fp)
 200066c:	20c7883a 	add	r3,r4,r3
 2000670:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 6) = (y6 << 10) + x6;
 2000674:	e0bfd317 	ldw	r2,-180(fp)
 2000678:	10800604 	addi	r2,r2,24
 200067c:	e0ffd917 	ldw	r3,-156(fp)
 2000680:	180892ba 	slli	r4,r3,10
 2000684:	e0ffd817 	ldw	r3,-160(fp)
 2000688:	20c7883a 	add	r3,r4,r3
 200068c:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 7) = (y7 << 10) + x7;
 2000690:	e0bfd317 	ldw	r2,-180(fp)
 2000694:	10800704 	addi	r2,r2,28
 2000698:	e0ffdb17 	ldw	r3,-148(fp)
 200069c:	180892ba 	slli	r4,r3,10
 20006a0:	e0ffda17 	ldw	r3,-152(fp)
 20006a4:	20c7883a 	add	r3,r4,r3
 20006a8:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 8) = (y8 << 10) + x8;
 20006ac:	e0bfd317 	ldw	r2,-180(fp)
 20006b0:	10800804 	addi	r2,r2,32
 20006b4:	e0ffdd17 	ldw	r3,-140(fp)
 20006b8:	180892ba 	slli	r4,r3,10
 20006bc:	e0ffdc17 	ldw	r3,-144(fp)
 20006c0:	20c7883a 	add	r3,r4,r3
 20006c4:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 9) = (y9 << 10) + x9;
 20006c8:	e0bfd317 	ldw	r2,-180(fp)
 20006cc:	10800904 	addi	r2,r2,36
 20006d0:	e0ffdf17 	ldw	r3,-132(fp)
 20006d4:	180892ba 	slli	r4,r3,10
 20006d8:	e0ffde17 	ldw	r3,-136(fp)
 20006dc:	20c7883a 	add	r3,r4,r3
 20006e0:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 10) = (y10 << 10) + x10;
 20006e4:	e0bfd317 	ldw	r2,-180(fp)
 20006e8:	10800a04 	addi	r2,r2,40
 20006ec:	e0ffe117 	ldw	r3,-124(fp)
 20006f0:	180892ba 	slli	r4,r3,10
 20006f4:	e0ffe017 	ldw	r3,-128(fp)
 20006f8:	20c7883a 	add	r3,r4,r3
 20006fc:	10c00015 	stw	r3,0(r2)

	INT8U err;

	int hBorder = 0;
 2000700:	e03fe215 	stw	zero,-120(fp)
	int vBorder = 0;
 2000704:	e03fe315 	stw	zero,-116(fp)

	int backX = 0;
 2000708:	e03fe415 	stw	zero,-112(fp)
	int backY = 0;
 200070c:	e03fe515 	stw	zero,-108(fp)

	int maxX = 800;
 2000710:	0080c804 	movi	r2,800
 2000714:	e0bfe615 	stw	r2,-104(fp)
	int maxY = 480;
 2000718:	00807804 	movi	r2,480
 200071c:	e0bfe715 	stw	r2,-100(fp)

	int size = 32;
 2000720:	00800804 	movi	r2,32
 2000724:	e0bfe815 	stw	r2,-96(fp)
	int border = 0;
 2000728:	e03fe915 	stw	zero,-92(fp)

	double vector [2];
	int velocity2 [2];
	velocity2[0]=0;
 200072c:	e03ff715 	stw	zero,-36(fp)
	velocity2[1]=0;
 2000730:	e03ff815 	stw	zero,-32(fp)
	double speed;

	double ball_x = 64, ball_y = 64;
 2000734:	e03fcd15 	stw	zero,-204(fp)
 2000738:	00901434 	movhi	r2,16464
 200073c:	e0bfce15 	stw	r2,-200(fp)
 2000740:	e03fcf15 	stw	zero,-196(fp)
 2000744:	00901434 	movhi	r2,16464
 2000748:	e0bfd015 	stw	r2,-192(fp)

	while(1){

		double *vector_x = OSMboxPend(MailBox1,0,&err);
 200074c:	d0a71817 	ldw	r2,-25504(gp)
 2000750:	e0fff204 	addi	r3,fp,-56
 2000754:	180d883a 	mov	r6,r3
 2000758:	000b883a 	mov	r5,zero
 200075c:	1009883a 	mov	r4,r2
 2000760:	2015b200 	call	2015b20 <OSMboxPend>
 2000764:	e0bfea15 	stw	r2,-88(fp)
		double *vector_y = OSMboxPend(MailBox2,0,&err);
 2000768:	d0a71717 	ldw	r2,-25508(gp)
 200076c:	e0fff204 	addi	r3,fp,-56
 2000770:	180d883a 	mov	r6,r3
 2000774:	000b883a 	mov	r5,zero
 2000778:	1009883a 	mov	r4,r2
 200077c:	2015b200 	call	2015b20 <OSMboxPend>
 2000780:	e0bfeb15 	stw	r2,-84(fp)
		double *speed_msg = OSMboxPend(MailBox3,0,&err);
 2000784:	d0a71617 	ldw	r2,-25512(gp)
 2000788:	e0fff204 	addi	r3,fp,-56
 200078c:	180d883a 	mov	r6,r3
 2000790:	000b883a 	mov	r5,zero
 2000794:	1009883a 	mov	r4,r2
 2000798:	2015b200 	call	2015b20 <OSMboxPend>
 200079c:	e0bfec15 	stw	r2,-80(fp)
		vector[0] = *vector_x;
 20007a0:	e13fea17 	ldw	r4,-88(fp)
 20007a4:	20800017 	ldw	r2,0(r4)
 20007a8:	20c00117 	ldw	r3,4(r4)
 20007ac:	e0bff315 	stw	r2,-52(fp)
 20007b0:	e0fff415 	stw	r3,-48(fp)
		vector[1] = *vector_y;
 20007b4:	e13feb17 	ldw	r4,-84(fp)
 20007b8:	20800017 	ldw	r2,0(r4)
 20007bc:	20c00117 	ldw	r3,4(r4)
 20007c0:	e0bff515 	stw	r2,-44(fp)
 20007c4:	e0fff615 	stw	r3,-40(fp)
		speed = *speed_msg;
 20007c8:	e0bfec17 	ldw	r2,-80(fp)
 20007cc:	10c00017 	ldw	r3,0(r2)
 20007d0:	e0ffcb15 	stw	r3,-212(fp)
 20007d4:	10800117 	ldw	r2,4(r2)
 20007d8:	e0bfcc15 	stw	r2,-208(fp)
		int backX = vector[0] <0;
 20007dc:	e0bff317 	ldw	r2,-52(fp)
 20007e0:	e0fff417 	ldw	r3,-48(fp)
 20007e4:	05000044 	movi	r20,1
 20007e8:	000d883a 	mov	r6,zero
 20007ec:	000f883a 	mov	r7,zero
 20007f0:	1009883a 	mov	r4,r2
 20007f4:	180b883a 	mov	r5,r3
 20007f8:	2002ac40 	call	2002ac4 <__ledf2>
 20007fc:	10000116 	blt	r2,zero,2000804 <task2+0x264>
 2000800:	0029883a 	mov	r20,zero
 2000804:	a0803fcc 	andi	r2,r20,255
 2000808:	e0bfd115 	stw	r2,-188(fp)
		int backY = vector[1] <0;
 200080c:	e0bff517 	ldw	r2,-44(fp)
 2000810:	e0fff617 	ldw	r3,-40(fp)
 2000814:	05000044 	movi	r20,1
 2000818:	000d883a 	mov	r6,zero
 200081c:	000f883a 	mov	r7,zero
 2000820:	1009883a 	mov	r4,r2
 2000824:	180b883a 	mov	r5,r3
 2000828:	2002ac40 	call	2002ac4 <__ledf2>
 200082c:	10000116 	blt	r2,zero,2000834 <task2+0x294>
 2000830:	0029883a 	mov	r20,zero
 2000834:	a0803fcc 	andi	r2,r20,255
 2000838:	e0bfd215 	stw	r2,-184(fp)
		int collision;
		vector[0] = fabs(vector[0]);
 200083c:	e0bff317 	ldw	r2,-52(fp)
 2000840:	e0fff417 	ldw	r3,-48(fp)
 2000844:	1021883a 	mov	r16,r2
 2000848:	01200034 	movhi	r4,32768
 200084c:	213fffc4 	addi	r4,r4,-1
 2000850:	1922703a 	and	r17,r3,r4
 2000854:	e43ff315 	stw	r16,-52(fp)
 2000858:	e47ff415 	stw	r17,-48(fp)
		vector[1] = fabs(vector[1]);
 200085c:	e0bff517 	ldw	r2,-44(fp)
 2000860:	e0fff617 	ldw	r3,-40(fp)
 2000864:	1025883a 	mov	r18,r2
 2000868:	01200034 	movhi	r4,32768
 200086c:	213fffc4 	addi	r4,r4,-1
 2000870:	1926703a 	and	r19,r3,r4
 2000874:	e4bff515 	stw	r18,-44(fp)
 2000878:	e4fff615 	stw	r19,-40(fp)

		printf("task 3 -> shoot ball 4 (%.2f, %.2f) %.2f\n", vector[0], vector[1], speed);
 200087c:	e23ff317 	ldw	r8,-52(fp)
 2000880:	e27ff417 	ldw	r9,-48(fp)
 2000884:	e0bff517 	ldw	r2,-44(fp)
 2000888:	e0fff617 	ldw	r3,-40(fp)
 200088c:	e13fcb17 	ldw	r4,-212(fp)
 2000890:	d9000115 	stw	r4,4(sp)
 2000894:	e13fcc17 	ldw	r4,-208(fp)
 2000898:	d9000215 	stw	r4,8(sp)
 200089c:	d8c00015 	stw	r3,0(sp)
 20008a0:	100f883a 	mov	r7,r2
 20008a4:	400b883a 	mov	r5,r8
 20008a8:	480d883a 	mov	r6,r9
 20008ac:	010080b4 	movhi	r4,514
 20008b0:	2131fb04 	addi	r4,r4,-14356
 20008b4:	2003fc40 	call	2003fc4 <printf>

		while (speed >= 0){
 20008b8:	0000f006 	br	2000c7c <task2+0x6dc>
			//printf("task 3 -> shoot ball 4 (%.2f, %.2f) %.2f\n", vector[0], vector[1], speed);

			if(ball_x < border+size+hBorder + 1)
 20008bc:	e0ffe917 	ldw	r3,-92(fp)
 20008c0:	e0bfe817 	ldw	r2,-96(fp)
 20008c4:	1887883a 	add	r3,r3,r2
 20008c8:	e0bfe217 	ldw	r2,-120(fp)
 20008cc:	1885883a 	add	r2,r3,r2
 20008d0:	10800044 	addi	r2,r2,1
 20008d4:	1009883a 	mov	r4,r2
 20008d8:	2003c4c0 	call	2003c4c <__floatsidf>
 20008dc:	1011883a 	mov	r8,r2
 20008e0:	1813883a 	mov	r9,r3
 20008e4:	e1bfcd17 	ldw	r6,-204(fp)
 20008e8:	e1ffce17 	ldw	r7,-200(fp)
 20008ec:	4009883a 	mov	r4,r8
 20008f0:	480b883a 	mov	r5,r9
 20008f4:	20029e80 	call	20029e8 <__gedf2>
 20008f8:	0080010e 	bge	zero,r2,2000900 <task2+0x360>
				backX = 0; // avance
 20008fc:	e03fd115 	stw	zero,-188(fp)
			if(ball_x > (maxX+hBorder)-(border+size))
 2000900:	e0ffe617 	ldw	r3,-104(fp)
 2000904:	e0bfe217 	ldw	r2,-120(fp)
 2000908:	1887883a 	add	r3,r3,r2
 200090c:	e13fe917 	ldw	r4,-92(fp)
 2000910:	e0bfe817 	ldw	r2,-96(fp)
 2000914:	2085883a 	add	r2,r4,r2
 2000918:	1885c83a 	sub	r2,r3,r2
 200091c:	1009883a 	mov	r4,r2
 2000920:	2003c4c0 	call	2003c4c <__floatsidf>
 2000924:	1011883a 	mov	r8,r2
 2000928:	1813883a 	mov	r9,r3
 200092c:	e1bfcd17 	ldw	r6,-204(fp)
 2000930:	e1ffce17 	ldw	r7,-200(fp)
 2000934:	4009883a 	mov	r4,r8
 2000938:	480b883a 	mov	r5,r9
 200093c:	2002ac40 	call	2002ac4 <__ledf2>
 2000940:	1000020e 	bge	r2,zero,200094c <task2+0x3ac>
				backX = 1; // recule
 2000944:	00800044 	movi	r2,1
 2000948:	e0bfd115 	stw	r2,-188(fp)
			if(ball_y < border + size+vBorder+1)
 200094c:	e0ffe917 	ldw	r3,-92(fp)
 2000950:	e0bfe817 	ldw	r2,-96(fp)
 2000954:	1887883a 	add	r3,r3,r2
 2000958:	e0bfe317 	ldw	r2,-116(fp)
 200095c:	1885883a 	add	r2,r3,r2
 2000960:	10800044 	addi	r2,r2,1
 2000964:	1009883a 	mov	r4,r2
 2000968:	2003c4c0 	call	2003c4c <__floatsidf>
 200096c:	1011883a 	mov	r8,r2
 2000970:	1813883a 	mov	r9,r3
 2000974:	e1bfcf17 	ldw	r6,-196(fp)
 2000978:	e1ffd017 	ldw	r7,-192(fp)
 200097c:	4009883a 	mov	r4,r8
 2000980:	480b883a 	mov	r5,r9
 2000984:	20029e80 	call	20029e8 <__gedf2>
 2000988:	0080010e 	bge	zero,r2,2000990 <task2+0x3f0>
				backY = 0;
 200098c:	e03fd215 	stw	zero,-184(fp)
			if(ball_y>(maxY+vBorder)-(border+size))
 2000990:	e0ffe717 	ldw	r3,-100(fp)
 2000994:	e0bfe317 	ldw	r2,-116(fp)
 2000998:	1887883a 	add	r3,r3,r2
 200099c:	e13fe917 	ldw	r4,-92(fp)
 20009a0:	e0bfe817 	ldw	r2,-96(fp)
 20009a4:	2085883a 	add	r2,r4,r2
 20009a8:	1885c83a 	sub	r2,r3,r2
 20009ac:	1009883a 	mov	r4,r2
 20009b0:	2003c4c0 	call	2003c4c <__floatsidf>
 20009b4:	1011883a 	mov	r8,r2
 20009b8:	1813883a 	mov	r9,r3
 20009bc:	e1bfcf17 	ldw	r6,-196(fp)
 20009c0:	e1ffd017 	ldw	r7,-192(fp)
 20009c4:	4009883a 	mov	r4,r8
 20009c8:	480b883a 	mov	r5,r9
 20009cc:	2002ac40 	call	2002ac4 <__ledf2>
 20009d0:	1000020e 	bge	r2,zero,20009dc <task2+0x43c>
				backY = 1;
 20009d4:	00800044 	movi	r2,1
 20009d8:	e0bfd215 	stw	r2,-184(fp)

			OSTimeDlyHMSM(0,0,0,40);
 20009dc:	01c00a04 	movi	r7,40
 20009e0:	000d883a 	mov	r6,zero
 20009e4:	000b883a 	mov	r5,zero
 20009e8:	0009883a 	mov	r4,zero
 20009ec:	2019d640 	call	2019d64 <OSTimeDlyHMSM>

			if(!backX) ball_x+=vector[0]*(speed/10.0);
 20009f0:	e0bfd117 	ldw	r2,-188(fp)
 20009f4:	10001e1e 	bne	r2,zero,2000a70 <task2+0x4d0>
 20009f8:	e53ff317 	ldw	r20,-52(fp)
 20009fc:	e57ff417 	ldw	r21,-48(fp)
 2000a00:	000d883a 	mov	r6,zero
 2000a04:	01d00934 	movhi	r7,16420
 2000a08:	e13fcb17 	ldw	r4,-212(fp)
 2000a0c:	e17fcc17 	ldw	r5,-208(fp)
 2000a10:	20020780 	call	2002078 <__divdf3>
 2000a14:	1009883a 	mov	r4,r2
 2000a18:	180b883a 	mov	r5,r3
 2000a1c:	2005883a 	mov	r2,r4
 2000a20:	2807883a 	mov	r3,r5
 2000a24:	100d883a 	mov	r6,r2
 2000a28:	180f883a 	mov	r7,r3
 2000a2c:	a009883a 	mov	r4,r20
 2000a30:	a80b883a 	mov	r5,r21
 2000a34:	2002bb80 	call	2002bb8 <__muldf3>
 2000a38:	1009883a 	mov	r4,r2
 2000a3c:	180b883a 	mov	r5,r3
 2000a40:	2005883a 	mov	r2,r4
 2000a44:	2807883a 	mov	r3,r5
 2000a48:	100d883a 	mov	r6,r2
 2000a4c:	180f883a 	mov	r7,r3
 2000a50:	e13fcd17 	ldw	r4,-204(fp)
 2000a54:	e17fce17 	ldw	r5,-200(fp)
 2000a58:	20017cc0 	call	20017cc <__adddf3>
 2000a5c:	1009883a 	mov	r4,r2
 2000a60:	180b883a 	mov	r5,r3
 2000a64:	e13fcd15 	stw	r4,-204(fp)
 2000a68:	e17fce15 	stw	r5,-200(fp)
 2000a6c:	00001d06 	br	2000ae4 <task2+0x544>
			else ball_x-=vector[0]*(speed/10.0);
 2000a70:	e53ff317 	ldw	r20,-52(fp)
 2000a74:	e57ff417 	ldw	r21,-48(fp)
 2000a78:	000d883a 	mov	r6,zero
 2000a7c:	01d00934 	movhi	r7,16420
 2000a80:	e13fcb17 	ldw	r4,-212(fp)
 2000a84:	e17fcc17 	ldw	r5,-208(fp)
 2000a88:	20020780 	call	2002078 <__divdf3>
 2000a8c:	1009883a 	mov	r4,r2
 2000a90:	180b883a 	mov	r5,r3
 2000a94:	2005883a 	mov	r2,r4
 2000a98:	2807883a 	mov	r3,r5
 2000a9c:	100d883a 	mov	r6,r2
 2000aa0:	180f883a 	mov	r7,r3
 2000aa4:	a009883a 	mov	r4,r20
 2000aa8:	a80b883a 	mov	r5,r21
 2000aac:	2002bb80 	call	2002bb8 <__muldf3>
 2000ab0:	1009883a 	mov	r4,r2
 2000ab4:	180b883a 	mov	r5,r3
 2000ab8:	2005883a 	mov	r2,r4
 2000abc:	2807883a 	mov	r3,r5
 2000ac0:	100d883a 	mov	r6,r2
 2000ac4:	180f883a 	mov	r7,r3
 2000ac8:	e13fcd17 	ldw	r4,-204(fp)
 2000acc:	e17fce17 	ldw	r5,-200(fp)
 2000ad0:	20032d00 	call	20032d0 <__subdf3>
 2000ad4:	1009883a 	mov	r4,r2
 2000ad8:	180b883a 	mov	r5,r3
 2000adc:	e13fcd15 	stw	r4,-204(fp)
 2000ae0:	e17fce15 	stw	r5,-200(fp)

			if(!backY) ball_y+=vector[1]*(speed/10.0);
 2000ae4:	e0bfd217 	ldw	r2,-184(fp)
 2000ae8:	10001e1e 	bne	r2,zero,2000b64 <task2+0x5c4>
 2000aec:	e53ff517 	ldw	r20,-44(fp)
 2000af0:	e57ff617 	ldw	r21,-40(fp)
 2000af4:	000d883a 	mov	r6,zero
 2000af8:	01d00934 	movhi	r7,16420
 2000afc:	e13fcb17 	ldw	r4,-212(fp)
 2000b00:	e17fcc17 	ldw	r5,-208(fp)
 2000b04:	20020780 	call	2002078 <__divdf3>
 2000b08:	1009883a 	mov	r4,r2
 2000b0c:	180b883a 	mov	r5,r3
 2000b10:	2005883a 	mov	r2,r4
 2000b14:	2807883a 	mov	r3,r5
 2000b18:	100d883a 	mov	r6,r2
 2000b1c:	180f883a 	mov	r7,r3
 2000b20:	a009883a 	mov	r4,r20
 2000b24:	a80b883a 	mov	r5,r21
 2000b28:	2002bb80 	call	2002bb8 <__muldf3>
 2000b2c:	1009883a 	mov	r4,r2
 2000b30:	180b883a 	mov	r5,r3
 2000b34:	2005883a 	mov	r2,r4
 2000b38:	2807883a 	mov	r3,r5
 2000b3c:	100d883a 	mov	r6,r2
 2000b40:	180f883a 	mov	r7,r3
 2000b44:	e13fcf17 	ldw	r4,-196(fp)
 2000b48:	e17fd017 	ldw	r5,-192(fp)
 2000b4c:	20017cc0 	call	20017cc <__adddf3>
 2000b50:	1009883a 	mov	r4,r2
 2000b54:	180b883a 	mov	r5,r3
 2000b58:	e13fcf15 	stw	r4,-196(fp)
 2000b5c:	e17fd015 	stw	r5,-192(fp)
 2000b60:	00001d06 	br	2000bd8 <task2+0x638>
			else ball_y-=vector[1]*(speed/10.0);
 2000b64:	e53ff517 	ldw	r20,-44(fp)
 2000b68:	e57ff617 	ldw	r21,-40(fp)
 2000b6c:	000d883a 	mov	r6,zero
 2000b70:	01d00934 	movhi	r7,16420
 2000b74:	e13fcb17 	ldw	r4,-212(fp)
 2000b78:	e17fcc17 	ldw	r5,-208(fp)
 2000b7c:	20020780 	call	2002078 <__divdf3>
 2000b80:	1009883a 	mov	r4,r2
 2000b84:	180b883a 	mov	r5,r3
 2000b88:	2005883a 	mov	r2,r4
 2000b8c:	2807883a 	mov	r3,r5
 2000b90:	100d883a 	mov	r6,r2
 2000b94:	180f883a 	mov	r7,r3
 2000b98:	a009883a 	mov	r4,r20
 2000b9c:	a80b883a 	mov	r5,r21
 2000ba0:	2002bb80 	call	2002bb8 <__muldf3>
 2000ba4:	1009883a 	mov	r4,r2
 2000ba8:	180b883a 	mov	r5,r3
 2000bac:	2005883a 	mov	r2,r4
 2000bb0:	2807883a 	mov	r3,r5
 2000bb4:	100d883a 	mov	r6,r2
 2000bb8:	180f883a 	mov	r7,r3
 2000bbc:	e13fcf17 	ldw	r4,-196(fp)
 2000bc0:	e17fd017 	ldw	r5,-192(fp)
 2000bc4:	20032d00 	call	20032d0 <__subdf3>
 2000bc8:	1009883a 	mov	r4,r2
 2000bcc:	180b883a 	mov	r5,r3
 2000bd0:	e13fcf15 	stw	r4,-196(fp)
 2000bd4:	e17fd015 	stw	r5,-192(fp)

			//ball_x += vector[0] * (speed/10.0);
			//ball_y += vector[1] * (speed/10.0);

			*(MTL_controller + 4) = ((int)(ball_y) << 10) + (int)(ball_x);
 2000bd8:	e0bfd317 	ldw	r2,-180(fp)
 2000bdc:	15000404 	addi	r20,r2,16
 2000be0:	e13fcf17 	ldw	r4,-196(fp)
 2000be4:	e17fd017 	ldw	r5,-192(fp)
 2000be8:	2003bcc0 	call	2003bcc <__fixdfsi>
 2000bec:	102a92ba 	slli	r21,r2,10
 2000bf0:	e13fcd17 	ldw	r4,-204(fp)
 2000bf4:	e17fce17 	ldw	r5,-200(fp)
 2000bf8:	2003bcc0 	call	2003bcc <__fixdfsi>
 2000bfc:	a885883a 	add	r2,r21,r2
 2000c00:	a0800015 	stw	r2,0(r20)

			speed = speed - 1;
 2000c04:	000d883a 	mov	r6,zero
 2000c08:	01cffc34 	movhi	r7,16368
 2000c0c:	e13fcb17 	ldw	r4,-212(fp)
 2000c10:	e17fcc17 	ldw	r5,-208(fp)
 2000c14:	20032d00 	call	20032d0 <__subdf3>
 2000c18:	1009883a 	mov	r4,r2
 2000c1c:	180b883a 	mov	r5,r3
 2000c20:	e13fcb15 	stw	r4,-212(fp)
 2000c24:	e17fcc15 	stw	r5,-208(fp)

			collision=detect_collide(ball1,ball2,vector,velocity2,size);
 2000c28:	e1bff704 	addi	r6,fp,-36
 2000c2c:	e17ff304 	addi	r5,fp,-52
 2000c30:	e13ff004 	addi	r4,fp,-64
 2000c34:	e0ffee04 	addi	r3,fp,-72
 2000c38:	e0bfe817 	ldw	r2,-96(fp)
 2000c3c:	d8800015 	stw	r2,0(sp)
 2000c40:	300f883a 	mov	r7,r6
 2000c44:	280d883a 	mov	r6,r5
 2000c48:	200b883a 	mov	r5,r4
 2000c4c:	1809883a 	mov	r4,r3
 2000c50:	2000c980 	call	2000c98 <detect_collide>
 2000c54:	e0bfed15 	stw	r2,-76(fp)
			printf("collision value: %d\n",collision);
 2000c58:	e17fed17 	ldw	r5,-76(fp)
 2000c5c:	010080b4 	movhi	r4,514
 2000c60:	21320604 	addi	r4,r4,-14312
 2000c64:	2003fc40 	call	2003fc4 <printf>
			if (collision) printf("collision");
 2000c68:	e0bfed17 	ldw	r2,-76(fp)
 2000c6c:	10000326 	beq	r2,zero,2000c7c <task2+0x6dc>
 2000c70:	010080b4 	movhi	r4,514
 2000c74:	21320c04 	addi	r4,r4,-14288
 2000c78:	2003fc40 	call	2003fc4 <printf>
		vector[0] = fabs(vector[0]);
		vector[1] = fabs(vector[1]);

		printf("task 3 -> shoot ball 4 (%.2f, %.2f) %.2f\n", vector[0], vector[1], speed);

		while (speed >= 0){
 2000c7c:	000d883a 	mov	r6,zero
 2000c80:	000f883a 	mov	r7,zero
 2000c84:	e13fcb17 	ldw	r4,-212(fp)
 2000c88:	e17fcc17 	ldw	r5,-208(fp)
 2000c8c:	20029e80 	call	20029e8 <__gedf2>
 2000c90:	103f0a0e 	bge	r2,zero,20008bc <task2+0x31c>
			collision=detect_collide(ball1,ball2,vector,velocity2,size);
			printf("collision value: %d\n",collision);
			if (collision) printf("collision");

		}
	}
 2000c94:	003ead06 	br	200074c <task2+0x1ac>

02000c98 <detect_collide>:
}

int detect_collide(int ball1 [2], int ball2 [2], double velocity1 [2], int velocity2 [2], int size){
 2000c98:	defff204 	addi	sp,sp,-56
 2000c9c:	dfc00d15 	stw	ra,52(sp)
 2000ca0:	df000c15 	stw	fp,48(sp)
 2000ca4:	dc000b15 	stw	r16,44(sp)
 2000ca8:	df000c04 	addi	fp,sp,48
 2000cac:	e13ffb15 	stw	r4,-20(fp)
 2000cb0:	e17ffc15 	stw	r5,-16(fp)
 2000cb4:	e1bffd15 	stw	r6,-12(fp)
 2000cb8:	e1fffe15 	stw	r7,-8(fp)
	int x1,x2,y1,y2,dx,dy;
	int collision;
	x1=ball1[0]+(int) velocity1[0];
 2000cbc:	e0bffb17 	ldw	r2,-20(fp)
 2000cc0:	14000017 	ldw	r16,0(r2)
 2000cc4:	e13ffd17 	ldw	r4,-12(fp)
 2000cc8:	20800017 	ldw	r2,0(r4)
 2000ccc:	20c00117 	ldw	r3,4(r4)
 2000cd0:	1009883a 	mov	r4,r2
 2000cd4:	180b883a 	mov	r5,r3
 2000cd8:	2003bcc0 	call	2003bcc <__fixdfsi>
 2000cdc:	8085883a 	add	r2,r16,r2
 2000ce0:	e0bff515 	stw	r2,-44(fp)
	x2=ball2[0]+(int) velocity2[0];
 2000ce4:	e0bffc17 	ldw	r2,-16(fp)
 2000ce8:	10c00017 	ldw	r3,0(r2)
 2000cec:	e0bffe17 	ldw	r2,-8(fp)
 2000cf0:	10800017 	ldw	r2,0(r2)
 2000cf4:	1885883a 	add	r2,r3,r2
 2000cf8:	e0bff615 	stw	r2,-40(fp)

	y1=ball1[1]+(int) velocity1[1];
 2000cfc:	e0bffb17 	ldw	r2,-20(fp)
 2000d00:	10800104 	addi	r2,r2,4
 2000d04:	14000017 	ldw	r16,0(r2)
 2000d08:	e0bffd17 	ldw	r2,-12(fp)
 2000d0c:	11000204 	addi	r4,r2,8
 2000d10:	20800017 	ldw	r2,0(r4)
 2000d14:	20c00117 	ldw	r3,4(r4)
 2000d18:	1009883a 	mov	r4,r2
 2000d1c:	180b883a 	mov	r5,r3
 2000d20:	2003bcc0 	call	2003bcc <__fixdfsi>
 2000d24:	8085883a 	add	r2,r16,r2
 2000d28:	e0bff715 	stw	r2,-36(fp)
	y2=ball2[1]+(int) velocity2[1];
 2000d2c:	e0bffc17 	ldw	r2,-16(fp)
 2000d30:	10800104 	addi	r2,r2,4
 2000d34:	10c00017 	ldw	r3,0(r2)
 2000d38:	e0bffe17 	ldw	r2,-8(fp)
 2000d3c:	10800104 	addi	r2,r2,4
 2000d40:	10800017 	ldw	r2,0(r2)
 2000d44:	1885883a 	add	r2,r3,r2
 2000d48:	e0bff815 	stw	r2,-32(fp)

	dx=x2-x1;
 2000d4c:	e0fff617 	ldw	r3,-40(fp)
 2000d50:	e0bff517 	ldw	r2,-44(fp)
 2000d54:	1885c83a 	sub	r2,r3,r2
 2000d58:	e0bff915 	stw	r2,-28(fp)
	dy=y2-y1;
 2000d5c:	e0fff817 	ldw	r3,-32(fp)
 2000d60:	e0bff717 	ldw	r2,-36(fp)
 2000d64:	1885c83a 	sub	r2,r3,r2
 2000d68:	e0bffa15 	stw	r2,-24(fp)
	if(dx*dx + dy*dy <= 4*size*size) collision=1;
 2000d6c:	e0fff917 	ldw	r3,-28(fp)
 2000d70:	e0bff917 	ldw	r2,-28(fp)
 2000d74:	1887383a 	mul	r3,r3,r2
 2000d78:	e13ffa17 	ldw	r4,-24(fp)
 2000d7c:	e0bffa17 	ldw	r2,-24(fp)
 2000d80:	2085383a 	mul	r2,r4,r2
 2000d84:	1887883a 	add	r3,r3,r2
 2000d88:	e0800217 	ldw	r2,8(fp)
 2000d8c:	1085883a 	add	r2,r2,r2
 2000d90:	1085883a 	add	r2,r2,r2
 2000d94:	1009883a 	mov	r4,r2
 2000d98:	e0800217 	ldw	r2,8(fp)
 2000d9c:	2085383a 	mul	r2,r4,r2
 2000da0:	10c00316 	blt	r2,r3,2000db0 <detect_collide+0x118>
 2000da4:	00800044 	movi	r2,1
 2000da8:	e0bff415 	stw	r2,-48(fp)
 2000dac:	00000106 	br	2000db4 <detect_collide+0x11c>
	else collision=0;
 2000db0:	e03ff415 	stw	zero,-48(fp)

	return collision;
 2000db4:	e0bff417 	ldw	r2,-48(fp)

}
 2000db8:	e6ffff04 	addi	sp,fp,-4
 2000dbc:	dfc00217 	ldw	ra,8(sp)
 2000dc0:	df000117 	ldw	fp,4(sp)
 2000dc4:	dc000017 	ldw	r16,0(sp)
 2000dc8:	dec00304 	addi	sp,sp,12
 2000dcc:	f800283a 	ret

02000dd0 <main>:



/* The main function creates two task and starts multi-tasking */
int main(void)
{
 2000dd0:	defff904 	addi	sp,sp,-28
 2000dd4:	dfc00615 	stw	ra,24(sp)
 2000dd8:	df000515 	stw	fp,20(sp)
 2000ddc:	df000504 	addi	fp,sp,20
  OSInit();
 2000de0:	201272c0 	call	201272c <OSInit>


	MailBox1 = OSMboxCreate(NULL);
 2000de4:	0009883a 	mov	r4,zero
 2000de8:	201580c0 	call	201580c <OSMboxCreate>
 2000dec:	d0a71815 	stw	r2,-25504(gp)
	MailBox2 = OSMboxCreate(NULL);
 2000df0:	0009883a 	mov	r4,zero
 2000df4:	201580c0 	call	201580c <OSMboxCreate>
 2000df8:	d0a71715 	stw	r2,-25508(gp)
	MailBox3 = OSMboxCreate(NULL);
 2000dfc:	0009883a 	mov	r4,zero
 2000e00:	201580c0 	call	201580c <OSMboxCreate>
 2000e04:	d0a71615 	stw	r2,-25512(gp)

  OSTaskCreateExt(task1,
 2000e08:	d8000415 	stw	zero,16(sp)
 2000e0c:	d8000315 	stw	zero,12(sp)
 2000e10:	00820004 	movi	r2,2048
 2000e14:	d8800215 	stw	r2,8(sp)
 2000e18:	008080b4 	movhi	r2,514
 2000e1c:	10813104 	addi	r2,r2,1220
 2000e20:	d8800115 	stw	r2,4(sp)
 2000e24:	00800044 	movi	r2,1
 2000e28:	d8800015 	stw	r2,0(sp)
 2000e2c:	01c00044 	movi	r7,1
 2000e30:	018080b4 	movhi	r6,514
 2000e34:	31893004 	addi	r6,r6,9408
 2000e38:	000b883a 	mov	r5,zero
 2000e3c:	01008034 	movhi	r4,512
 2000e40:	2100a404 	addi	r4,r4,656
 2000e44:	2018b900 	call	2018b90 <OSTaskCreateExt>
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(task2,
 2000e48:	d8000415 	stw	zero,16(sp)
 2000e4c:	d8000315 	stw	zero,12(sp)
 2000e50:	00820004 	movi	r2,2048
 2000e54:	d8800215 	stw	r2,8(sp)
 2000e58:	008080b4 	movhi	r2,514
 2000e5c:	10893104 	addi	r2,r2,9412
 2000e60:	d8800115 	stw	r2,4(sp)
 2000e64:	00800084 	movi	r2,2
 2000e68:	d8800015 	stw	r2,0(sp)
 2000e6c:	01c00084 	movi	r7,2
 2000e70:	018080b4 	movhi	r6,514
 2000e74:	31913004 	addi	r6,r6,17600
 2000e78:	000b883a 	mov	r5,zero
 2000e7c:	01008034 	movhi	r4,512
 2000e80:	21016804 	addi	r4,r4,1440
 2000e84:	2018b900 	call	2018b90 <OSTaskCreateExt>
                    task2_stk,
                    TASK_STACKSIZE,
                    NULL,
                    0);

	OSStart();
 2000e88:	2012a300 	call	2012a30 <OSStart>
  return 0;
 2000e8c:	0005883a 	mov	r2,zero
}
 2000e90:	e037883a 	mov	sp,fp
 2000e94:	dfc00117 	ldw	ra,4(sp)
 2000e98:	df000017 	ldw	fp,0(sp)
 2000e9c:	dec00204 	addi	sp,sp,8
 2000ea0:	f800283a 	ret

02000ea4 <sqrt>:
	double sqrt(double x)		/* wrapper sqrt */
#else
	double sqrt(x)			/* wrapper sqrt */
	double x;
#endif
{
 2000ea4:	defff104 	addi	sp,sp,-60
 2000ea8:	dfc00e15 	stw	ra,56(sp)
 2000eac:	df000d15 	stw	fp,52(sp)
 2000eb0:	df000d04 	addi	fp,sp,52
 2000eb4:	e13ffe15 	stw	r4,-8(fp)
 2000eb8:	e17fff15 	stw	r5,-4(fp)
#ifdef _IEEE_LIBM
	return __ieee754_sqrt(x);
#else
	struct exception exc;
	double z;
	z = __ieee754_sqrt(x);
 2000ebc:	e13ffe17 	ldw	r4,-8(fp)
 2000ec0:	e17fff17 	ldw	r5,-4(fp)
 2000ec4:	20010180 	call	2001018 <__ieee754_sqrt>
 2000ec8:	e0bff315 	stw	r2,-52(fp)
 2000ecc:	e0fff415 	stw	r3,-48(fp)
	if(_LIB_VERSION == _IEEE_ || isnan(x)) return z;
 2000ed0:	d0a00417 	ldw	r2,-32752(gp)
 2000ed4:	10bfffe0 	cmpeqi	r2,r2,-1
 2000ed8:	1000041e 	bne	r2,zero,2000eec <sqrt+0x48>
 2000edc:	e13ffe17 	ldw	r4,-8(fp)
 2000ee0:	e17fff17 	ldw	r5,-4(fp)
 2000ee4:	20016600 	call	2001660 <__fpclassifyd>
 2000ee8:	1000031e 	bne	r2,zero,2000ef8 <sqrt+0x54>
 2000eec:	e0bff317 	ldw	r2,-52(fp)
 2000ef0:	e0fff417 	ldw	r3,-48(fp)
 2000ef4:	00003f06 	br	2000ff4 <sqrt+0x150>
	if(x<0.0) {
 2000ef8:	000d883a 	mov	r6,zero
 2000efc:	000f883a 	mov	r7,zero
 2000f00:	e13ffe17 	ldw	r4,-8(fp)
 2000f04:	e17fff17 	ldw	r5,-4(fp)
 2000f08:	2002ac40 	call	2002ac4 <__ledf2>
 2000f0c:	1000370e 	bge	r2,zero,2000fec <sqrt+0x148>
	  exc.type = DOMAIN;
 2000f10:	00800044 	movi	r2,1
 2000f14:	e0bff515 	stw	r2,-44(fp)
	  exc.name = "sqrt";
 2000f18:	008080b4 	movhi	r2,514
 2000f1c:	10b20f04 	addi	r2,r2,-14276
 2000f20:	e0bff615 	stw	r2,-40(fp)
	  exc.err = 0;
 2000f24:	e03ffd15 	stw	zero,-12(fp)
	  exc.arg1 = exc.arg2 = x;
 2000f28:	e0bffe17 	ldw	r2,-8(fp)
 2000f2c:	e0bff915 	stw	r2,-28(fp)
 2000f30:	e0bfff17 	ldw	r2,-4(fp)
 2000f34:	e0bffa15 	stw	r2,-24(fp)
 2000f38:	e0bff917 	ldw	r2,-28(fp)
 2000f3c:	e0fffa17 	ldw	r3,-24(fp)
 2000f40:	e0bff715 	stw	r2,-36(fp)
 2000f44:	e0fff815 	stw	r3,-32(fp)
	  if (_LIB_VERSION == _SVID_)
 2000f48:	d0a00417 	ldw	r2,-32752(gp)
 2000f4c:	1000031e 	bne	r2,zero,2000f5c <sqrt+0xb8>
	    exc.retval = 0.0;
 2000f50:	e03ffb15 	stw	zero,-20(fp)
 2000f54:	e03ffc15 	stw	zero,-16(fp)
 2000f58:	00000b06 	br	2000f88 <sqrt+0xe4>
          else
            exc.retval = 0.0/0.0;
 2000f5c:	000d883a 	mov	r6,zero
 2000f60:	000f883a 	mov	r7,zero
 2000f64:	0009883a 	mov	r4,zero
 2000f68:	000b883a 	mov	r5,zero
 2000f6c:	20020780 	call	2002078 <__divdf3>
 2000f70:	1009883a 	mov	r4,r2
 2000f74:	180b883a 	mov	r5,r3
 2000f78:	2005883a 	mov	r2,r4
 2000f7c:	2807883a 	mov	r3,r5
 2000f80:	e0bffb15 	stw	r2,-20(fp)
 2000f84:	e0fffc15 	stw	r3,-16(fp)
          if (_LIB_VERSION == _POSIX_)
 2000f88:	d0a00417 	ldw	r2,-32752(gp)
 2000f8c:	10800098 	cmpnei	r2,r2,2
 2000f90:	1000051e 	bne	r2,zero,2000fa8 <sqrt+0x104>
            errno = EDOM;
 2000f94:	2003f400 	call	2003f40 <__errno>
 2000f98:	1007883a 	mov	r3,r2
 2000f9c:	00800844 	movi	r2,33
 2000fa0:	18800015 	stw	r2,0(r3)
 2000fa4:	00000806 	br	2000fc8 <sqrt+0x124>
          else if (!matherr(&exc)) {
 2000fa8:	e0bff504 	addi	r2,fp,-44
 2000fac:	1009883a 	mov	r4,r2
 2000fb0:	20017640 	call	2001764 <matherr>
 2000fb4:	1000041e 	bne	r2,zero,2000fc8 <sqrt+0x124>
            errno = EDOM;
 2000fb8:	2003f400 	call	2003f40 <__errno>
 2000fbc:	1007883a 	mov	r3,r2
 2000fc0:	00800844 	movi	r2,33
 2000fc4:	18800015 	stw	r2,0(r3)
          }
          if (exc.err != 0)
 2000fc8:	e0bffd17 	ldw	r2,-12(fp)
 2000fcc:	10000426 	beq	r2,zero,2000fe0 <sqrt+0x13c>
	    errno = exc.err;
 2000fd0:	2003f400 	call	2003f40 <__errno>
 2000fd4:	1007883a 	mov	r3,r2
 2000fd8:	e0bffd17 	ldw	r2,-12(fp)
 2000fdc:	18800015 	stw	r2,0(r3)
	  return exc.retval; 
 2000fe0:	e0bffb17 	ldw	r2,-20(fp)
 2000fe4:	e0fffc17 	ldw	r3,-16(fp)
 2000fe8:	00000206 	br	2000ff4 <sqrt+0x150>
	} else
	    return z;
 2000fec:	e0bff317 	ldw	r2,-52(fp)
 2000ff0:	e0fff417 	ldw	r3,-48(fp)
 2000ff4:	1009883a 	mov	r4,r2
 2000ff8:	180b883a 	mov	r5,r3
#endif
}
 2000ffc:	2005883a 	mov	r2,r4
 2001000:	2807883a 	mov	r3,r5
 2001004:	e037883a 	mov	sp,fp
 2001008:	dfc00117 	ldw	ra,4(sp)
 200100c:	df000017 	ldw	fp,0(sp)
 2001010:	dec00204 	addi	sp,sp,8
 2001014:	f800283a 	ret

02001018 <__ieee754_sqrt>:
	double __ieee754_sqrt(double x)
#else
	double __ieee754_sqrt(x)
	double x;
#endif
{
 2001018:	deffe804 	addi	sp,sp,-96
 200101c:	dfc01715 	stw	ra,92(sp)
 2001020:	df001615 	stw	fp,88(sp)
 2001024:	dc401515 	stw	r17,84(sp)
 2001028:	dc001415 	stw	r16,80(sp)
 200102c:	df001604 	addi	fp,sp,88
 2001030:	e13ffc15 	stw	r4,-16(fp)
 2001034:	e17ffd15 	stw	r5,-12(fp)
	double z;
	__int32_t sign = (int)0x80000000; 
 2001038:	00a00034 	movhi	r2,32768
 200103c:	e0bff315 	stw	r2,-52(fp)
	__uint32_t r,t1,s1,ix1,q1;
	__int32_t ix0,s0,q,m,t,i;

	EXTRACT_WORDS(ix0,ix1,x);
 2001040:	e0bffc17 	ldw	r2,-16(fp)
 2001044:	e0bff815 	stw	r2,-32(fp)
 2001048:	e0bffd17 	ldw	r2,-12(fp)
 200104c:	e0bff915 	stw	r2,-28(fp)
 2001050:	e0bff917 	ldw	r2,-28(fp)
 2001054:	e0bfee15 	stw	r2,-72(fp)
 2001058:	e0bff817 	ldw	r2,-32(fp)
 200105c:	e0bfec15 	stw	r2,-80(fp)

    /* take care of Inf and NaN */
	if((ix0&0x7ff00000)==0x7ff00000) {			
 2001060:	e0bfee17 	ldw	r2,-72(fp)
 2001064:	10dffc2c 	andhi	r3,r2,32752
 2001068:	009ffc34 	movhi	r2,32752
 200106c:	1880131e 	bne	r3,r2,20010bc <__ieee754_sqrt+0xa4>
	    return x*x+x;		/* sqrt(NaN)=NaN, sqrt(+inf)=+inf
 2001070:	e1bffc17 	ldw	r6,-16(fp)
 2001074:	e1fffd17 	ldw	r7,-12(fp)
 2001078:	e13ffc17 	ldw	r4,-16(fp)
 200107c:	e17ffd17 	ldw	r5,-12(fp)
 2001080:	2002bb80 	call	2002bb8 <__muldf3>
 2001084:	1009883a 	mov	r4,r2
 2001088:	180b883a 	mov	r5,r3
 200108c:	2005883a 	mov	r2,r4
 2001090:	2807883a 	mov	r3,r5
 2001094:	e1bffc17 	ldw	r6,-16(fp)
 2001098:	e1fffd17 	ldw	r7,-12(fp)
 200109c:	1009883a 	mov	r4,r2
 20010a0:	180b883a 	mov	r5,r3
 20010a4:	20017cc0 	call	20017cc <__adddf3>
 20010a8:	1009883a 	mov	r4,r2
 20010ac:	180b883a 	mov	r5,r3
 20010b0:	2005883a 	mov	r2,r4
 20010b4:	2807883a 	mov	r3,r5
 20010b8:	00015e06 	br	2001634 <__ieee754_sqrt+0x61c>
					   sqrt(-inf)=sNaN */
	} 
    /* take care of zero */
	if(ix0<=0) {
 20010bc:	e0bfee17 	ldw	r2,-72(fp)
 20010c0:	00802916 	blt	zero,r2,2001168 <__ieee754_sqrt+0x150>
	    if(((ix0&(~sign))|ix1)==0) return x;/* sqrt(+-0) = +-0 */
 20010c4:	e0bff317 	ldw	r2,-52(fp)
 20010c8:	0086303a 	nor	r3,zero,r2
 20010cc:	e0bfee17 	ldw	r2,-72(fp)
 20010d0:	1884703a 	and	r2,r3,r2
 20010d4:	1007883a 	mov	r3,r2
 20010d8:	e0bfec17 	ldw	r2,-80(fp)
 20010dc:	1884b03a 	or	r2,r3,r2
 20010e0:	1000031e 	bne	r2,zero,20010f0 <__ieee754_sqrt+0xd8>
 20010e4:	e0bffc17 	ldw	r2,-16(fp)
 20010e8:	e0fffd17 	ldw	r3,-12(fp)
 20010ec:	00015106 	br	2001634 <__ieee754_sqrt+0x61c>
	    else if(ix0<0)
 20010f0:	e0bfee17 	ldw	r2,-72(fp)
 20010f4:	10001c0e 	bge	r2,zero,2001168 <__ieee754_sqrt+0x150>
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
 20010f8:	e1bffc17 	ldw	r6,-16(fp)
 20010fc:	e1fffd17 	ldw	r7,-12(fp)
 2001100:	e13ffc17 	ldw	r4,-16(fp)
 2001104:	e17ffd17 	ldw	r5,-12(fp)
 2001108:	20032d00 	call	20032d0 <__subdf3>
 200110c:	1009883a 	mov	r4,r2
 2001110:	180b883a 	mov	r5,r3
 2001114:	2021883a 	mov	r16,r4
 2001118:	2823883a 	mov	r17,r5
 200111c:	e1bffc17 	ldw	r6,-16(fp)
 2001120:	e1fffd17 	ldw	r7,-12(fp)
 2001124:	e13ffc17 	ldw	r4,-16(fp)
 2001128:	e17ffd17 	ldw	r5,-12(fp)
 200112c:	20032d00 	call	20032d0 <__subdf3>
 2001130:	1009883a 	mov	r4,r2
 2001134:	180b883a 	mov	r5,r3
 2001138:	2005883a 	mov	r2,r4
 200113c:	2807883a 	mov	r3,r5
 2001140:	100d883a 	mov	r6,r2
 2001144:	180f883a 	mov	r7,r3
 2001148:	8009883a 	mov	r4,r16
 200114c:	880b883a 	mov	r5,r17
 2001150:	20020780 	call	2002078 <__divdf3>
 2001154:	1009883a 	mov	r4,r2
 2001158:	180b883a 	mov	r5,r3
 200115c:	2005883a 	mov	r2,r4
 2001160:	2807883a 	mov	r3,r5
 2001164:	00013306 	br	2001634 <__ieee754_sqrt+0x61c>
	}
    /* normalize x */
	m = (ix0>>20);
 2001168:	e0bfee17 	ldw	r2,-72(fp)
 200116c:	1005d53a 	srai	r2,r2,20
 2001170:	e0bff115 	stw	r2,-60(fp)
	if(m==0) {				/* subnormal x */
 2001174:	e0bff117 	ldw	r2,-60(fp)
 2001178:	10002a1e 	bne	r2,zero,2001224 <__ieee754_sqrt+0x20c>
	    while(ix0==0) {
 200117c:	00000b06 	br	20011ac <__ieee754_sqrt+0x194>
		m -= 21;
 2001180:	e0bff117 	ldw	r2,-60(fp)
 2001184:	10bffac4 	addi	r2,r2,-21
 2001188:	e0bff115 	stw	r2,-60(fp)
		ix0 |= (ix1>>11); ix1 <<= 21;
 200118c:	e0bfec17 	ldw	r2,-80(fp)
 2001190:	1006d2fa 	srli	r3,r2,11
 2001194:	e0bfee17 	ldw	r2,-72(fp)
 2001198:	1884b03a 	or	r2,r3,r2
 200119c:	e0bfee15 	stw	r2,-72(fp)
 20011a0:	e0bfec17 	ldw	r2,-80(fp)
 20011a4:	1004957a 	slli	r2,r2,21
 20011a8:	e0bfec15 	stw	r2,-80(fp)
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
	}
    /* normalize x */
	m = (ix0>>20);
	if(m==0) {				/* subnormal x */
	    while(ix0==0) {
 20011ac:	e0bfee17 	ldw	r2,-72(fp)
 20011b0:	103ff326 	beq	r2,zero,2001180 <__ieee754_sqrt+0x168>
		m -= 21;
		ix0 |= (ix1>>11); ix1 <<= 21;
	    }
	    for(i=0;(ix0&0x00100000)==0;i++) ix0<<=1;
 20011b4:	e03ff215 	stw	zero,-56(fp)
 20011b8:	00000606 	br	20011d4 <__ieee754_sqrt+0x1bc>
 20011bc:	e0bfee17 	ldw	r2,-72(fp)
 20011c0:	1085883a 	add	r2,r2,r2
 20011c4:	e0bfee15 	stw	r2,-72(fp)
 20011c8:	e0bff217 	ldw	r2,-56(fp)
 20011cc:	10800044 	addi	r2,r2,1
 20011d0:	e0bff215 	stw	r2,-56(fp)
 20011d4:	e0bfee17 	ldw	r2,-72(fp)
 20011d8:	1080042c 	andhi	r2,r2,16
 20011dc:	103ff726 	beq	r2,zero,20011bc <__ieee754_sqrt+0x1a4>
	    m -= i-1;
 20011e0:	e0bff217 	ldw	r2,-56(fp)
 20011e4:	10bfffc4 	addi	r2,r2,-1
 20011e8:	e0fff117 	ldw	r3,-60(fp)
 20011ec:	1885c83a 	sub	r2,r3,r2
 20011f0:	e0bff115 	stw	r2,-60(fp)
	    ix0 |= (ix1>>(32-i));
 20011f4:	00c00804 	movi	r3,32
 20011f8:	e0bff217 	ldw	r2,-56(fp)
 20011fc:	1885c83a 	sub	r2,r3,r2
 2001200:	e0ffec17 	ldw	r3,-80(fp)
 2001204:	1886d83a 	srl	r3,r3,r2
 2001208:	e0bfee17 	ldw	r2,-72(fp)
 200120c:	1884b03a 	or	r2,r3,r2
 2001210:	e0bfee15 	stw	r2,-72(fp)
	    ix1 <<= i;
 2001214:	e0ffec17 	ldw	r3,-80(fp)
 2001218:	e0bff217 	ldw	r2,-56(fp)
 200121c:	1884983a 	sll	r2,r3,r2
 2001220:	e0bfec15 	stw	r2,-80(fp)
	}
	m -= 1023;	/* unbias exponent */
 2001224:	e0bff117 	ldw	r2,-60(fp)
 2001228:	10bf0044 	addi	r2,r2,-1023
 200122c:	e0bff115 	stw	r2,-60(fp)
	ix0 = (ix0&0x000fffff)|0x00100000;
 2001230:	e0ffee17 	ldw	r3,-72(fp)
 2001234:	00800434 	movhi	r2,16
 2001238:	10bfffc4 	addi	r2,r2,-1
 200123c:	1884703a 	and	r2,r3,r2
 2001240:	10800434 	orhi	r2,r2,16
 2001244:	e0bfee15 	stw	r2,-72(fp)
	if(m&1){	/* odd m, double x to make it even */
 2001248:	e0bff117 	ldw	r2,-60(fp)
 200124c:	1080004c 	andi	r2,r2,1
 2001250:	10000d26 	beq	r2,zero,2001288 <__ieee754_sqrt+0x270>
	    ix0 += ix0 + ((ix1&sign)>>31);
 2001254:	e0fff317 	ldw	r3,-52(fp)
 2001258:	e0bfec17 	ldw	r2,-80(fp)
 200125c:	1884703a 	and	r2,r3,r2
 2001260:	1006d7fa 	srli	r3,r2,31
 2001264:	e0bfee17 	ldw	r2,-72(fp)
 2001268:	1887883a 	add	r3,r3,r2
 200126c:	e0bfee17 	ldw	r2,-72(fp)
 2001270:	1885883a 	add	r2,r3,r2
 2001274:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2001278:	e0ffec17 	ldw	r3,-80(fp)
 200127c:	e0bfec17 	ldw	r2,-80(fp)
 2001280:	1885883a 	add	r2,r3,r2
 2001284:	e0bfec15 	stw	r2,-80(fp)
	}
	m >>= 1;	/* m = [m/2] */
 2001288:	e0bff117 	ldw	r2,-60(fp)
 200128c:	1005d07a 	srai	r2,r2,1
 2001290:	e0bff115 	stw	r2,-60(fp)

    /* generate sqrt(x) bit by bit */
	ix0 += ix0 + ((ix1&sign)>>31);
 2001294:	e0fff317 	ldw	r3,-52(fp)
 2001298:	e0bfec17 	ldw	r2,-80(fp)
 200129c:	1884703a 	and	r2,r3,r2
 20012a0:	1006d7fa 	srli	r3,r2,31
 20012a4:	e0bfee17 	ldw	r2,-72(fp)
 20012a8:	1887883a 	add	r3,r3,r2
 20012ac:	e0bfee17 	ldw	r2,-72(fp)
 20012b0:	1885883a 	add	r2,r3,r2
 20012b4:	e0bfee15 	stw	r2,-72(fp)
	ix1 += ix1;
 20012b8:	e0ffec17 	ldw	r3,-80(fp)
 20012bc:	e0bfec17 	ldw	r2,-80(fp)
 20012c0:	1885883a 	add	r2,r3,r2
 20012c4:	e0bfec15 	stw	r2,-80(fp)
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
 20012c8:	e03feb15 	stw	zero,-84(fp)
 20012cc:	e03fef15 	stw	zero,-68(fp)
 20012d0:	e0bfef17 	ldw	r2,-68(fp)
 20012d4:	e0bfed15 	stw	r2,-76(fp)
 20012d8:	e0bfed17 	ldw	r2,-76(fp)
 20012dc:	e0bff015 	stw	r2,-64(fp)
	r = 0x00200000;		/* r = moving bit from right to left */
 20012e0:	00800834 	movhi	r2,32
 20012e4:	e0bfea15 	stw	r2,-88(fp)

	while(r!=0) {
 20012e8:	00002306 	br	2001378 <__ieee754_sqrt+0x360>
	    t = s0+r; 
 20012ec:	e0ffef17 	ldw	r3,-68(fp)
 20012f0:	e0bfea17 	ldw	r2,-88(fp)
 20012f4:	1885883a 	add	r2,r3,r2
 20012f8:	e0bff415 	stw	r2,-48(fp)
	    if(t<=ix0) { 
 20012fc:	e0bff417 	ldw	r2,-48(fp)
 2001300:	e0ffee17 	ldw	r3,-72(fp)
 2001304:	18800c16 	blt	r3,r2,2001338 <__ieee754_sqrt+0x320>
		s0   = t+r; 
 2001308:	e0fff417 	ldw	r3,-48(fp)
 200130c:	e0bfea17 	ldw	r2,-88(fp)
 2001310:	1885883a 	add	r2,r3,r2
 2001314:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t; 
 2001318:	e0ffee17 	ldw	r3,-72(fp)
 200131c:	e0bff417 	ldw	r2,-48(fp)
 2001320:	1885c83a 	sub	r2,r3,r2
 2001324:	e0bfee15 	stw	r2,-72(fp)
		q   += r; 
 2001328:	e0fff017 	ldw	r3,-64(fp)
 200132c:	e0bfea17 	ldw	r2,-88(fp)
 2001330:	1885883a 	add	r2,r3,r2
 2001334:	e0bff015 	stw	r2,-64(fp)
	    } 
	    ix0 += ix0 + ((ix1&sign)>>31);
 2001338:	e0fff317 	ldw	r3,-52(fp)
 200133c:	e0bfec17 	ldw	r2,-80(fp)
 2001340:	1884703a 	and	r2,r3,r2
 2001344:	1006d7fa 	srli	r3,r2,31
 2001348:	e0bfee17 	ldw	r2,-72(fp)
 200134c:	1887883a 	add	r3,r3,r2
 2001350:	e0bfee17 	ldw	r2,-72(fp)
 2001354:	1885883a 	add	r2,r3,r2
 2001358:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 200135c:	e0ffec17 	ldw	r3,-80(fp)
 2001360:	e0bfec17 	ldw	r2,-80(fp)
 2001364:	1885883a 	add	r2,r3,r2
 2001368:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 200136c:	e0bfea17 	ldw	r2,-88(fp)
 2001370:	1004d07a 	srli	r2,r2,1
 2001374:	e0bfea15 	stw	r2,-88(fp)
	ix0 += ix0 + ((ix1&sign)>>31);
	ix1 += ix1;
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
	r = 0x00200000;		/* r = moving bit from right to left */

	while(r!=0) {
 2001378:	e0bfea17 	ldw	r2,-88(fp)
 200137c:	103fdb1e 	bne	r2,zero,20012ec <__ieee754_sqrt+0x2d4>
	    ix0 += ix0 + ((ix1&sign)>>31);
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
 2001380:	e0bff317 	ldw	r2,-52(fp)
 2001384:	e0bfea15 	stw	r2,-88(fp)
	while(r!=0) {
 2001388:	00004106 	br	2001490 <__ieee754_sqrt+0x478>
	    t1 = s1+r; 
 200138c:	e0ffeb17 	ldw	r3,-84(fp)
 2001390:	e0bfea17 	ldw	r2,-88(fp)
 2001394:	1885883a 	add	r2,r3,r2
 2001398:	e0bff515 	stw	r2,-44(fp)
	    t  = s0;
 200139c:	e0bfef17 	ldw	r2,-68(fp)
 20013a0:	e0bff415 	stw	r2,-48(fp)
	    if((t<ix0)||((t==ix0)&&(t1<=ix1))) { 
 20013a4:	e0fff417 	ldw	r3,-48(fp)
 20013a8:	e0bfee17 	ldw	r2,-72(fp)
 20013ac:	18800616 	blt	r3,r2,20013c8 <__ieee754_sqrt+0x3b0>
 20013b0:	e0fff417 	ldw	r3,-48(fp)
 20013b4:	e0bfee17 	ldw	r2,-72(fp)
 20013b8:	1880251e 	bne	r3,r2,2001450 <__ieee754_sqrt+0x438>
 20013bc:	e0bff517 	ldw	r2,-44(fp)
 20013c0:	e0ffec17 	ldw	r3,-80(fp)
 20013c4:	18802236 	bltu	r3,r2,2001450 <__ieee754_sqrt+0x438>
		s1  = t1+r;
 20013c8:	e0fff517 	ldw	r3,-44(fp)
 20013cc:	e0bfea17 	ldw	r2,-88(fp)
 20013d0:	1885883a 	add	r2,r3,r2
 20013d4:	e0bfeb15 	stw	r2,-84(fp)
		if(((t1&sign)==sign)&&(s1&sign)==0) s0 += 1;
 20013d8:	e0fff317 	ldw	r3,-52(fp)
 20013dc:	e0bff517 	ldw	r2,-44(fp)
 20013e0:	1886703a 	and	r3,r3,r2
 20013e4:	e0bff317 	ldw	r2,-52(fp)
 20013e8:	1880071e 	bne	r3,r2,2001408 <__ieee754_sqrt+0x3f0>
 20013ec:	e0fff317 	ldw	r3,-52(fp)
 20013f0:	e0bfeb17 	ldw	r2,-84(fp)
 20013f4:	1884703a 	and	r2,r3,r2
 20013f8:	1000031e 	bne	r2,zero,2001408 <__ieee754_sqrt+0x3f0>
 20013fc:	e0bfef17 	ldw	r2,-68(fp)
 2001400:	10800044 	addi	r2,r2,1
 2001404:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t;
 2001408:	e0ffee17 	ldw	r3,-72(fp)
 200140c:	e0bff417 	ldw	r2,-48(fp)
 2001410:	1885c83a 	sub	r2,r3,r2
 2001414:	e0bfee15 	stw	r2,-72(fp)
		if (ix1 < t1) ix0 -= 1;
 2001418:	e0ffec17 	ldw	r3,-80(fp)
 200141c:	e0bff517 	ldw	r2,-44(fp)
 2001420:	1880032e 	bgeu	r3,r2,2001430 <__ieee754_sqrt+0x418>
 2001424:	e0bfee17 	ldw	r2,-72(fp)
 2001428:	10bfffc4 	addi	r2,r2,-1
 200142c:	e0bfee15 	stw	r2,-72(fp)
		ix1 -= t1;
 2001430:	e0ffec17 	ldw	r3,-80(fp)
 2001434:	e0bff517 	ldw	r2,-44(fp)
 2001438:	1885c83a 	sub	r2,r3,r2
 200143c:	e0bfec15 	stw	r2,-80(fp)
		q1  += r;
 2001440:	e0ffed17 	ldw	r3,-76(fp)
 2001444:	e0bfea17 	ldw	r2,-88(fp)
 2001448:	1885883a 	add	r2,r3,r2
 200144c:	e0bfed15 	stw	r2,-76(fp)
	    }
	    ix0 += ix0 + ((ix1&sign)>>31);
 2001450:	e0fff317 	ldw	r3,-52(fp)
 2001454:	e0bfec17 	ldw	r2,-80(fp)
 2001458:	1884703a 	and	r2,r3,r2
 200145c:	1006d7fa 	srli	r3,r2,31
 2001460:	e0bfee17 	ldw	r2,-72(fp)
 2001464:	1887883a 	add	r3,r3,r2
 2001468:	e0bfee17 	ldw	r2,-72(fp)
 200146c:	1885883a 	add	r2,r3,r2
 2001470:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2001474:	e0ffec17 	ldw	r3,-80(fp)
 2001478:	e0bfec17 	ldw	r2,-80(fp)
 200147c:	1885883a 	add	r2,r3,r2
 2001480:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 2001484:	e0bfea17 	ldw	r2,-88(fp)
 2001488:	1004d07a 	srli	r2,r2,1
 200148c:	e0bfea15 	stw	r2,-88(fp)
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
	while(r!=0) {
 2001490:	e0bfea17 	ldw	r2,-88(fp)
 2001494:	103fbd1e 	bne	r2,zero,200138c <__ieee754_sqrt+0x374>
	    ix1 += ix1;
	    r>>=1;
	}

    /* use floating add to find out rounding direction */
	if((ix0|ix1)!=0) {
 2001498:	e0ffee17 	ldw	r3,-72(fp)
 200149c:	e0bfec17 	ldw	r2,-80(fp)
 20014a0:	1884b03a 	or	r2,r3,r2
 20014a4:	10004526 	beq	r2,zero,20015bc <__ieee754_sqrt+0x5a4>
	    z = one-tiny; /* trigger inexact flag */
 20014a8:	0011883a 	mov	r8,zero
 20014ac:	024ffc34 	movhi	r9,16368
 20014b0:	00b0be74 	movhi	r2,49913
 20014b4:	10bcd644 	addi	r2,r2,-3239
 20014b8:	00c06974 	movhi	r3,421
 20014bc:	18db87c4 	addi	r3,r3,28191
 20014c0:	100d883a 	mov	r6,r2
 20014c4:	180f883a 	mov	r7,r3
 20014c8:	4009883a 	mov	r4,r8
 20014cc:	480b883a 	mov	r5,r9
 20014d0:	20032d00 	call	20032d0 <__subdf3>
 20014d4:	1009883a 	mov	r4,r2
 20014d8:	180b883a 	mov	r5,r3
 20014dc:	e13ff615 	stw	r4,-40(fp)
 20014e0:	e17ff715 	stw	r5,-36(fp)
	    if (z>=one) {
 20014e4:	0005883a 	mov	r2,zero
 20014e8:	00cffc34 	movhi	r3,16368
 20014ec:	100d883a 	mov	r6,r2
 20014f0:	180f883a 	mov	r7,r3
 20014f4:	e13ff617 	ldw	r4,-40(fp)
 20014f8:	e17ff717 	ldw	r5,-36(fp)
 20014fc:	20029e80 	call	20029e8 <__gedf2>
 2001500:	10002e16 	blt	r2,zero,20015bc <__ieee754_sqrt+0x5a4>
	        z = one+tiny;
 2001504:	0011883a 	mov	r8,zero
 2001508:	024ffc34 	movhi	r9,16368
 200150c:	00b0be74 	movhi	r2,49913
 2001510:	10bcd644 	addi	r2,r2,-3239
 2001514:	00c06974 	movhi	r3,421
 2001518:	18db87c4 	addi	r3,r3,28191
 200151c:	100d883a 	mov	r6,r2
 2001520:	180f883a 	mov	r7,r3
 2001524:	4009883a 	mov	r4,r8
 2001528:	480b883a 	mov	r5,r9
 200152c:	20017cc0 	call	20017cc <__adddf3>
 2001530:	1009883a 	mov	r4,r2
 2001534:	180b883a 	mov	r5,r3
 2001538:	e13ff615 	stw	r4,-40(fp)
 200153c:	e17ff715 	stw	r5,-36(fp)
	        if (q1==(__uint32_t)0xffffffff) { q1=0; q += 1;}
 2001540:	e0bfed17 	ldw	r2,-76(fp)
 2001544:	10bfffd8 	cmpnei	r2,r2,-1
 2001548:	1000051e 	bne	r2,zero,2001560 <__ieee754_sqrt+0x548>
 200154c:	e03fed15 	stw	zero,-76(fp)
 2001550:	e0bff017 	ldw	r2,-64(fp)
 2001554:	10800044 	addi	r2,r2,1
 2001558:	e0bff015 	stw	r2,-64(fp)
 200155c:	00001706 	br	20015bc <__ieee754_sqrt+0x5a4>
		else if (z>one) {
 2001560:	0005883a 	mov	r2,zero
 2001564:	00cffc34 	movhi	r3,16368
 2001568:	100d883a 	mov	r6,r2
 200156c:	180f883a 	mov	r7,r3
 2001570:	e13ff617 	ldw	r4,-40(fp)
 2001574:	e17ff717 	ldw	r5,-36(fp)
 2001578:	20029e80 	call	20029e8 <__gedf2>
 200157c:	00800a0e 	bge	zero,r2,20015a8 <__ieee754_sqrt+0x590>
		    if (q1==(__uint32_t)0xfffffffe) q+=1;
 2001580:	e0bfed17 	ldw	r2,-76(fp)
 2001584:	10bfff98 	cmpnei	r2,r2,-2
 2001588:	1000031e 	bne	r2,zero,2001598 <__ieee754_sqrt+0x580>
 200158c:	e0bff017 	ldw	r2,-64(fp)
 2001590:	10800044 	addi	r2,r2,1
 2001594:	e0bff015 	stw	r2,-64(fp)
		    q1+=2; 
 2001598:	e0bfed17 	ldw	r2,-76(fp)
 200159c:	10800084 	addi	r2,r2,2
 20015a0:	e0bfed15 	stw	r2,-76(fp)
 20015a4:	00000506 	br	20015bc <__ieee754_sqrt+0x5a4>
		} else
	            q1 += (q1&1);
 20015a8:	e0bfed17 	ldw	r2,-76(fp)
 20015ac:	1080004c 	andi	r2,r2,1
 20015b0:	e0ffed17 	ldw	r3,-76(fp)
 20015b4:	1885883a 	add	r2,r3,r2
 20015b8:	e0bfed15 	stw	r2,-76(fp)
	    }
	}
	ix0 = (q>>1)+0x3fe00000;
 20015bc:	e0bff017 	ldw	r2,-64(fp)
 20015c0:	1007d07a 	srai	r3,r2,1
 20015c4:	008ff834 	movhi	r2,16352
 20015c8:	1885883a 	add	r2,r3,r2
 20015cc:	e0bfee15 	stw	r2,-72(fp)
	ix1 =  q1>>1;
 20015d0:	e0bfed17 	ldw	r2,-76(fp)
 20015d4:	1004d07a 	srli	r2,r2,1
 20015d8:	e0bfec15 	stw	r2,-80(fp)
	if ((q&1)==1) ix1 |= sign;
 20015dc:	e0bff017 	ldw	r2,-64(fp)
 20015e0:	1080004c 	andi	r2,r2,1
 20015e4:	10000426 	beq	r2,zero,20015f8 <__ieee754_sqrt+0x5e0>
 20015e8:	e0bff317 	ldw	r2,-52(fp)
 20015ec:	e0ffec17 	ldw	r3,-80(fp)
 20015f0:	1884b03a 	or	r2,r3,r2
 20015f4:	e0bfec15 	stw	r2,-80(fp)
	ix0 += (m <<20);
 20015f8:	e0bff117 	ldw	r2,-60(fp)
 20015fc:	1004953a 	slli	r2,r2,20
 2001600:	e0ffee17 	ldw	r3,-72(fp)
 2001604:	1885883a 	add	r2,r3,r2
 2001608:	e0bfee15 	stw	r2,-72(fp)
	INSERT_WORDS(z,ix0,ix1);
 200160c:	e0bfee17 	ldw	r2,-72(fp)
 2001610:	e0bffb15 	stw	r2,-20(fp)
 2001614:	e0bfec17 	ldw	r2,-80(fp)
 2001618:	e0bffa15 	stw	r2,-24(fp)
 200161c:	e0bffa17 	ldw	r2,-24(fp)
 2001620:	e0bff615 	stw	r2,-40(fp)
 2001624:	e0bffb17 	ldw	r2,-20(fp)
 2001628:	e0bff715 	stw	r2,-36(fp)
	return z;
 200162c:	e0bff617 	ldw	r2,-40(fp)
 2001630:	e0fff717 	ldw	r3,-36(fp)
 2001634:	1009883a 	mov	r4,r2
 2001638:	180b883a 	mov	r5,r3
}
 200163c:	2005883a 	mov	r2,r4
 2001640:	2807883a 	mov	r3,r5
 2001644:	e6fffe04 	addi	sp,fp,-8
 2001648:	dfc00317 	ldw	ra,12(sp)
 200164c:	df000217 	ldw	fp,8(sp)
 2001650:	dc400117 	ldw	r17,4(sp)
 2001654:	dc000017 	ldw	r16,0(sp)
 2001658:	dec00404 	addi	sp,sp,16
 200165c:	f800283a 	ret

02001660 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 2001660:	defff904 	addi	sp,sp,-28
 2001664:	df000615 	stw	fp,24(sp)
 2001668:	df000604 	addi	fp,sp,24
 200166c:	e13ffe15 	stw	r4,-8(fp)
 2001670:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 2001674:	e0bffe17 	ldw	r2,-8(fp)
 2001678:	e0bffc15 	stw	r2,-16(fp)
 200167c:	e0bfff17 	ldw	r2,-4(fp)
 2001680:	e0bffd15 	stw	r2,-12(fp)
 2001684:	e0bffd17 	ldw	r2,-12(fp)
 2001688:	e0bffa15 	stw	r2,-24(fp)
 200168c:	e0bffc17 	ldw	r2,-16(fp)
 2001690:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 2001694:	e0bffa17 	ldw	r2,-24(fp)
 2001698:	1000021e 	bne	r2,zero,20016a4 <__fpclassifyd+0x44>
 200169c:	e0bffb17 	ldw	r2,-20(fp)
 20016a0:	10000526 	beq	r2,zero,20016b8 <__fpclassifyd+0x58>
 20016a4:	e0fffa17 	ldw	r3,-24(fp)
 20016a8:	00a00034 	movhi	r2,32768
 20016ac:	1880041e 	bne	r3,r2,20016c0 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 20016b0:	e0bffb17 	ldw	r2,-20(fp)
 20016b4:	1000021e 	bne	r2,zero,20016c0 <__fpclassifyd+0x60>
    return FP_ZERO;
 20016b8:	00800084 	movi	r2,2
 20016bc:	00002506 	br	2001754 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 20016c0:	e0fffa17 	ldw	r3,-24(fp)
 20016c4:	00800434 	movhi	r2,16
 20016c8:	18800336 	bltu	r3,r2,20016d8 <__fpclassifyd+0x78>
 20016cc:	e0fffa17 	ldw	r3,-24(fp)
 20016d0:	009ffc34 	movhi	r2,32752
 20016d4:	18800636 	bltu	r3,r2,20016f0 <__fpclassifyd+0x90>
 20016d8:	e0fffa17 	ldw	r3,-24(fp)
 20016dc:	00a00434 	movhi	r2,32784
 20016e0:	18800536 	bltu	r3,r2,20016f8 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 20016e4:	e0fffa17 	ldw	r3,-24(fp)
 20016e8:	00bffc34 	movhi	r2,65520
 20016ec:	1880022e 	bgeu	r3,r2,20016f8 <__fpclassifyd+0x98>
    return FP_NORMAL;
 20016f0:	00800104 	movi	r2,4
 20016f4:	00001706 	br	2001754 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 20016f8:	e0fffa17 	ldw	r3,-24(fp)
 20016fc:	00800434 	movhi	r2,16
 2001700:	18800536 	bltu	r3,r2,2001718 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2001704:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2001708:	1000050e 	bge	r2,zero,2001720 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 200170c:	e0fffa17 	ldw	r3,-24(fp)
 2001710:	00a00434 	movhi	r2,32784
 2001714:	1880022e 	bgeu	r3,r2,2001720 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 2001718:	008000c4 	movi	r2,3
 200171c:	00000d06 	br	2001754 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 2001720:	e0fffa17 	ldw	r3,-24(fp)
 2001724:	009ffc34 	movhi	r2,32752
 2001728:	1880021e 	bne	r3,r2,2001734 <__fpclassifyd+0xd4>
 200172c:	e0bffb17 	ldw	r2,-20(fp)
 2001730:	10000526 	beq	r2,zero,2001748 <__fpclassifyd+0xe8>
 2001734:	e0fffa17 	ldw	r3,-24(fp)
 2001738:	00bffc34 	movhi	r2,65520
 200173c:	1880041e 	bne	r3,r2,2001750 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 2001740:	e0bffb17 	ldw	r2,-20(fp)
 2001744:	1000021e 	bne	r2,zero,2001750 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 2001748:	00800044 	movi	r2,1
 200174c:	00000106 	br	2001754 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 2001750:	0005883a 	mov	r2,zero
}
 2001754:	e037883a 	mov	sp,fp
 2001758:	df000017 	ldw	fp,0(sp)
 200175c:	dec00104 	addi	sp,sp,4
 2001760:	f800283a 	ret

02001764 <matherr>:
	int matherr(struct exception *x)
#else
	int matherr(x)
	struct exception *x;
#endif
{
 2001764:	defffc04 	addi	sp,sp,-16
 2001768:	dfc00315 	stw	ra,12(sp)
 200176c:	df000215 	stw	fp,8(sp)
 2001770:	df000204 	addi	fp,sp,8
 2001774:	e13fff15 	stw	r4,-4(fp)
	int n=0;
 2001778:	e03ffe15 	stw	zero,-8(fp)
	if(x->arg1!=x->arg1) return 0;
 200177c:	e13fff17 	ldw	r4,-4(fp)
 2001780:	20800217 	ldw	r2,8(r4)
 2001784:	20c00317 	ldw	r3,12(r4)
 2001788:	e1bfff17 	ldw	r6,-4(fp)
 200178c:	31000217 	ldw	r4,8(r6)
 2001790:	31400317 	ldw	r5,12(r6)
 2001794:	200d883a 	mov	r6,r4
 2001798:	280f883a 	mov	r7,r5
 200179c:	1009883a 	mov	r4,r2
 20017a0:	180b883a 	mov	r5,r3
 20017a4:	20029600 	call	2002960 <__eqdf2>
 20017a8:	10000226 	beq	r2,zero,20017b4 <matherr+0x50>
 20017ac:	0005883a 	mov	r2,zero
 20017b0:	00000106 	br	20017b8 <matherr+0x54>
	return n;
 20017b4:	e0bffe17 	ldw	r2,-8(fp)
}
 20017b8:	e037883a 	mov	sp,fp
 20017bc:	dfc00117 	ldw	ra,4(sp)
 20017c0:	df000017 	ldw	fp,0(sp)
 20017c4:	dec00204 	addi	sp,sp,8
 20017c8:	f800283a 	ret

020017cc <__adddf3>:
 20017cc:	02c00434 	movhi	r11,16
 20017d0:	5affffc4 	addi	r11,r11,-1
 20017d4:	2806d7fa 	srli	r3,r5,31
 20017d8:	2ad4703a 	and	r10,r5,r11
 20017dc:	3ad2703a 	and	r9,r7,r11
 20017e0:	3804d53a 	srli	r2,r7,20
 20017e4:	3018d77a 	srli	r12,r6,29
 20017e8:	280ad53a 	srli	r5,r5,20
 20017ec:	501490fa 	slli	r10,r10,3
 20017f0:	2010d77a 	srli	r8,r4,29
 20017f4:	481290fa 	slli	r9,r9,3
 20017f8:	380ed7fa 	srli	r7,r7,31
 20017fc:	defffb04 	addi	sp,sp,-20
 2001800:	dc800215 	stw	r18,8(sp)
 2001804:	dc400115 	stw	r17,4(sp)
 2001808:	dc000015 	stw	r16,0(sp)
 200180c:	dfc00415 	stw	ra,16(sp)
 2001810:	dcc00315 	stw	r19,12(sp)
 2001814:	1c803fcc 	andi	r18,r3,255
 2001818:	2c01ffcc 	andi	r16,r5,2047
 200181c:	5210b03a 	or	r8,r10,r8
 2001820:	202290fa 	slli	r17,r4,3
 2001824:	1081ffcc 	andi	r2,r2,2047
 2001828:	4b12b03a 	or	r9,r9,r12
 200182c:	300c90fa 	slli	r6,r6,3
 2001830:	91c07526 	beq	r18,r7,2001a08 <__adddf3+0x23c>
 2001834:	8087c83a 	sub	r3,r16,r2
 2001838:	00c0ab0e 	bge	zero,r3,2001ae8 <__adddf3+0x31c>
 200183c:	10002a1e 	bne	r2,zero,20018e8 <__adddf3+0x11c>
 2001840:	4984b03a 	or	r2,r9,r6
 2001844:	1000961e 	bne	r2,zero,2001aa0 <__adddf3+0x2d4>
 2001848:	888001cc 	andi	r2,r17,7
 200184c:	10000726 	beq	r2,zero,200186c <__adddf3+0xa0>
 2001850:	888003cc 	andi	r2,r17,15
 2001854:	00c00104 	movi	r3,4
 2001858:	10c00426 	beq	r2,r3,200186c <__adddf3+0xa0>
 200185c:	88c7883a 	add	r3,r17,r3
 2001860:	1c63803a 	cmpltu	r17,r3,r17
 2001864:	4451883a 	add	r8,r8,r17
 2001868:	1823883a 	mov	r17,r3
 200186c:	4080202c 	andhi	r2,r8,128
 2001870:	10005926 	beq	r2,zero,20019d8 <__adddf3+0x20c>
 2001874:	84000044 	addi	r16,r16,1
 2001878:	0081ffc4 	movi	r2,2047
 200187c:	8080ba26 	beq	r16,r2,2001b68 <__adddf3+0x39c>
 2001880:	00bfe034 	movhi	r2,65408
 2001884:	10bfffc4 	addi	r2,r2,-1
 2001888:	4090703a 	and	r8,r8,r2
 200188c:	4004977a 	slli	r2,r8,29
 2001890:	4010927a 	slli	r8,r8,9
 2001894:	8822d0fa 	srli	r17,r17,3
 2001898:	8401ffcc 	andi	r16,r16,2047
 200189c:	4010d33a 	srli	r8,r8,12
 20018a0:	9007883a 	mov	r3,r18
 20018a4:	1444b03a 	or	r2,r2,r17
 20018a8:	8401ffcc 	andi	r16,r16,2047
 20018ac:	8020953a 	slli	r16,r16,20
 20018b0:	18c03fcc 	andi	r3,r3,255
 20018b4:	01000434 	movhi	r4,16
 20018b8:	213fffc4 	addi	r4,r4,-1
 20018bc:	180697fa 	slli	r3,r3,31
 20018c0:	4110703a 	and	r8,r8,r4
 20018c4:	4410b03a 	or	r8,r8,r16
 20018c8:	40c6b03a 	or	r3,r8,r3
 20018cc:	dfc00417 	ldw	ra,16(sp)
 20018d0:	dcc00317 	ldw	r19,12(sp)
 20018d4:	dc800217 	ldw	r18,8(sp)
 20018d8:	dc400117 	ldw	r17,4(sp)
 20018dc:	dc000017 	ldw	r16,0(sp)
 20018e0:	dec00504 	addi	sp,sp,20
 20018e4:	f800283a 	ret
 20018e8:	0081ffc4 	movi	r2,2047
 20018ec:	80bfd626 	beq	r16,r2,2001848 <__adddf3+0x7c>
 20018f0:	4a402034 	orhi	r9,r9,128
 20018f4:	00800e04 	movi	r2,56
 20018f8:	10c09f16 	blt	r2,r3,2001b78 <__adddf3+0x3ac>
 20018fc:	008007c4 	movi	r2,31
 2001900:	10c0c216 	blt	r2,r3,2001c0c <__adddf3+0x440>
 2001904:	00800804 	movi	r2,32
 2001908:	10c5c83a 	sub	r2,r2,r3
 200190c:	488a983a 	sll	r5,r9,r2
 2001910:	30c8d83a 	srl	r4,r6,r3
 2001914:	3084983a 	sll	r2,r6,r2
 2001918:	48c6d83a 	srl	r3,r9,r3
 200191c:	290cb03a 	or	r6,r5,r4
 2001920:	1004c03a 	cmpne	r2,r2,zero
 2001924:	308cb03a 	or	r6,r6,r2
 2001928:	898dc83a 	sub	r6,r17,r6
 200192c:	89a3803a 	cmpltu	r17,r17,r6
 2001930:	40d1c83a 	sub	r8,r8,r3
 2001934:	4451c83a 	sub	r8,r8,r17
 2001938:	3023883a 	mov	r17,r6
 200193c:	4080202c 	andhi	r2,r8,128
 2001940:	10002326 	beq	r2,zero,20019d0 <__adddf3+0x204>
 2001944:	04c02034 	movhi	r19,128
 2001948:	9cffffc4 	addi	r19,r19,-1
 200194c:	44e6703a 	and	r19,r8,r19
 2001950:	98007626 	beq	r19,zero,2001b2c <__adddf3+0x360>
 2001954:	9809883a 	mov	r4,r19
 2001958:	2003d280 	call	2003d28 <__clzsi2>
 200195c:	10fffe04 	addi	r3,r2,-8
 2001960:	010007c4 	movi	r4,31
 2001964:	20c07716 	blt	r4,r3,2001b44 <__adddf3+0x378>
 2001968:	00800804 	movi	r2,32
 200196c:	10c5c83a 	sub	r2,r2,r3
 2001970:	8884d83a 	srl	r2,r17,r2
 2001974:	98d0983a 	sll	r8,r19,r3
 2001978:	88e2983a 	sll	r17,r17,r3
 200197c:	1204b03a 	or	r2,r2,r8
 2001980:	1c007416 	blt	r3,r16,2001b54 <__adddf3+0x388>
 2001984:	1c21c83a 	sub	r16,r3,r16
 2001988:	82000044 	addi	r8,r16,1
 200198c:	00c007c4 	movi	r3,31
 2001990:	1a009116 	blt	r3,r8,2001bd8 <__adddf3+0x40c>
 2001994:	00c00804 	movi	r3,32
 2001998:	1a07c83a 	sub	r3,r3,r8
 200199c:	8a08d83a 	srl	r4,r17,r8
 20019a0:	88e2983a 	sll	r17,r17,r3
 20019a4:	10c6983a 	sll	r3,r2,r3
 20019a8:	1210d83a 	srl	r8,r2,r8
 20019ac:	8804c03a 	cmpne	r2,r17,zero
 20019b0:	1906b03a 	or	r3,r3,r4
 20019b4:	18a2b03a 	or	r17,r3,r2
 20019b8:	0021883a 	mov	r16,zero
 20019bc:	003fa206 	br	2001848 <__adddf3+0x7c>
 20019c0:	1890b03a 	or	r8,r3,r2
 20019c4:	40017d26 	beq	r8,zero,2001fbc <__adddf3+0x7f0>
 20019c8:	1011883a 	mov	r8,r2
 20019cc:	1823883a 	mov	r17,r3
 20019d0:	888001cc 	andi	r2,r17,7
 20019d4:	103f9e1e 	bne	r2,zero,2001850 <__adddf3+0x84>
 20019d8:	4004977a 	slli	r2,r8,29
 20019dc:	8822d0fa 	srli	r17,r17,3
 20019e0:	4010d0fa 	srli	r8,r8,3
 20019e4:	9007883a 	mov	r3,r18
 20019e8:	1444b03a 	or	r2,r2,r17
 20019ec:	0101ffc4 	movi	r4,2047
 20019f0:	81002426 	beq	r16,r4,2001a84 <__adddf3+0x2b8>
 20019f4:	8120703a 	and	r16,r16,r4
 20019f8:	01000434 	movhi	r4,16
 20019fc:	213fffc4 	addi	r4,r4,-1
 2001a00:	4110703a 	and	r8,r8,r4
 2001a04:	003fa806 	br	20018a8 <__adddf3+0xdc>
 2001a08:	8089c83a 	sub	r4,r16,r2
 2001a0c:	01005e0e 	bge	zero,r4,2001b88 <__adddf3+0x3bc>
 2001a10:	10002b26 	beq	r2,zero,2001ac0 <__adddf3+0x2f4>
 2001a14:	0081ffc4 	movi	r2,2047
 2001a18:	80bf8b26 	beq	r16,r2,2001848 <__adddf3+0x7c>
 2001a1c:	4a402034 	orhi	r9,r9,128
 2001a20:	00800e04 	movi	r2,56
 2001a24:	1100a40e 	bge	r2,r4,2001cb8 <__adddf3+0x4ec>
 2001a28:	498cb03a 	or	r6,r9,r6
 2001a2c:	300ac03a 	cmpne	r5,r6,zero
 2001a30:	0013883a 	mov	r9,zero
 2001a34:	2c4b883a 	add	r5,r5,r17
 2001a38:	2c63803a 	cmpltu	r17,r5,r17
 2001a3c:	4a11883a 	add	r8,r9,r8
 2001a40:	8a11883a 	add	r8,r17,r8
 2001a44:	2823883a 	mov	r17,r5
 2001a48:	4080202c 	andhi	r2,r8,128
 2001a4c:	103fe026 	beq	r2,zero,20019d0 <__adddf3+0x204>
 2001a50:	84000044 	addi	r16,r16,1
 2001a54:	0081ffc4 	movi	r2,2047
 2001a58:	8080d226 	beq	r16,r2,2001da4 <__adddf3+0x5d8>
 2001a5c:	00bfe034 	movhi	r2,65408
 2001a60:	10bfffc4 	addi	r2,r2,-1
 2001a64:	4090703a 	and	r8,r8,r2
 2001a68:	880ad07a 	srli	r5,r17,1
 2001a6c:	400897fa 	slli	r4,r8,31
 2001a70:	88c0004c 	andi	r3,r17,1
 2001a74:	28e2b03a 	or	r17,r5,r3
 2001a78:	4010d07a 	srli	r8,r8,1
 2001a7c:	2462b03a 	or	r17,r4,r17
 2001a80:	003f7106 	br	2001848 <__adddf3+0x7c>
 2001a84:	4088b03a 	or	r4,r8,r2
 2001a88:	20014526 	beq	r4,zero,2001fa0 <__adddf3+0x7d4>
 2001a8c:	01000434 	movhi	r4,16
 2001a90:	42000234 	orhi	r8,r8,8
 2001a94:	213fffc4 	addi	r4,r4,-1
 2001a98:	4110703a 	and	r8,r8,r4
 2001a9c:	003f8206 	br	20018a8 <__adddf3+0xdc>
 2001aa0:	18ffffc4 	addi	r3,r3,-1
 2001aa4:	1800491e 	bne	r3,zero,2001bcc <__adddf3+0x400>
 2001aa8:	898bc83a 	sub	r5,r17,r6
 2001aac:	8963803a 	cmpltu	r17,r17,r5
 2001ab0:	4251c83a 	sub	r8,r8,r9
 2001ab4:	4451c83a 	sub	r8,r8,r17
 2001ab8:	2823883a 	mov	r17,r5
 2001abc:	003f9f06 	br	200193c <__adddf3+0x170>
 2001ac0:	4984b03a 	or	r2,r9,r6
 2001ac4:	103f6026 	beq	r2,zero,2001848 <__adddf3+0x7c>
 2001ac8:	213fffc4 	addi	r4,r4,-1
 2001acc:	2000931e 	bne	r4,zero,2001d1c <__adddf3+0x550>
 2001ad0:	898d883a 	add	r6,r17,r6
 2001ad4:	3463803a 	cmpltu	r17,r6,r17
 2001ad8:	4251883a 	add	r8,r8,r9
 2001adc:	8a11883a 	add	r8,r17,r8
 2001ae0:	3023883a 	mov	r17,r6
 2001ae4:	003fd806 	br	2001a48 <__adddf3+0x27c>
 2001ae8:	1800541e 	bne	r3,zero,2001c3c <__adddf3+0x470>
 2001aec:	80800044 	addi	r2,r16,1
 2001af0:	1081ffcc 	andi	r2,r2,2047
 2001af4:	00c00044 	movi	r3,1
 2001af8:	1880a00e 	bge	r3,r2,2001d7c <__adddf3+0x5b0>
 2001afc:	8989c83a 	sub	r4,r17,r6
 2001b00:	8905803a 	cmpltu	r2,r17,r4
 2001b04:	4267c83a 	sub	r19,r8,r9
 2001b08:	98a7c83a 	sub	r19,r19,r2
 2001b0c:	9880202c 	andhi	r2,r19,128
 2001b10:	10006326 	beq	r2,zero,2001ca0 <__adddf3+0x4d4>
 2001b14:	3463c83a 	sub	r17,r6,r17
 2001b18:	4a07c83a 	sub	r3,r9,r8
 2001b1c:	344d803a 	cmpltu	r6,r6,r17
 2001b20:	19a7c83a 	sub	r19,r3,r6
 2001b24:	3825883a 	mov	r18,r7
 2001b28:	983f8a1e 	bne	r19,zero,2001954 <__adddf3+0x188>
 2001b2c:	8809883a 	mov	r4,r17
 2001b30:	2003d280 	call	2003d28 <__clzsi2>
 2001b34:	10800804 	addi	r2,r2,32
 2001b38:	10fffe04 	addi	r3,r2,-8
 2001b3c:	010007c4 	movi	r4,31
 2001b40:	20ff890e 	bge	r4,r3,2001968 <__adddf3+0x19c>
 2001b44:	10bff604 	addi	r2,r2,-40
 2001b48:	8884983a 	sll	r2,r17,r2
 2001b4c:	0023883a 	mov	r17,zero
 2001b50:	1c3f8c0e 	bge	r3,r16,2001984 <__adddf3+0x1b8>
 2001b54:	023fe034 	movhi	r8,65408
 2001b58:	423fffc4 	addi	r8,r8,-1
 2001b5c:	80e1c83a 	sub	r16,r16,r3
 2001b60:	1210703a 	and	r8,r2,r8
 2001b64:	003f3806 	br	2001848 <__adddf3+0x7c>
 2001b68:	9007883a 	mov	r3,r18
 2001b6c:	0011883a 	mov	r8,zero
 2001b70:	0005883a 	mov	r2,zero
 2001b74:	003f4c06 	br	20018a8 <__adddf3+0xdc>
 2001b78:	498cb03a 	or	r6,r9,r6
 2001b7c:	300cc03a 	cmpne	r6,r6,zero
 2001b80:	0007883a 	mov	r3,zero
 2001b84:	003f6806 	br	2001928 <__adddf3+0x15c>
 2001b88:	20009c1e 	bne	r4,zero,2001dfc <__adddf3+0x630>
 2001b8c:	80800044 	addi	r2,r16,1
 2001b90:	1141ffcc 	andi	r5,r2,2047
 2001b94:	01000044 	movi	r4,1
 2001b98:	2140670e 	bge	r4,r5,2001d38 <__adddf3+0x56c>
 2001b9c:	0101ffc4 	movi	r4,2047
 2001ba0:	11007f26 	beq	r2,r4,2001da0 <__adddf3+0x5d4>
 2001ba4:	898d883a 	add	r6,r17,r6
 2001ba8:	4247883a 	add	r3,r8,r9
 2001bac:	3451803a 	cmpltu	r8,r6,r17
 2001bb0:	40d1883a 	add	r8,r8,r3
 2001bb4:	402297fa 	slli	r17,r8,31
 2001bb8:	300cd07a 	srli	r6,r6,1
 2001bbc:	4010d07a 	srli	r8,r8,1
 2001bc0:	1021883a 	mov	r16,r2
 2001bc4:	89a2b03a 	or	r17,r17,r6
 2001bc8:	003f1f06 	br	2001848 <__adddf3+0x7c>
 2001bcc:	0081ffc4 	movi	r2,2047
 2001bd0:	80bf481e 	bne	r16,r2,20018f4 <__adddf3+0x128>
 2001bd4:	003f1c06 	br	2001848 <__adddf3+0x7c>
 2001bd8:	843ff844 	addi	r16,r16,-31
 2001bdc:	01000804 	movi	r4,32
 2001be0:	1406d83a 	srl	r3,r2,r16
 2001be4:	41005026 	beq	r8,r4,2001d28 <__adddf3+0x55c>
 2001be8:	01001004 	movi	r4,64
 2001bec:	2211c83a 	sub	r8,r4,r8
 2001bf0:	1204983a 	sll	r2,r2,r8
 2001bf4:	88a2b03a 	or	r17,r17,r2
 2001bf8:	8822c03a 	cmpne	r17,r17,zero
 2001bfc:	1c62b03a 	or	r17,r3,r17
 2001c00:	0011883a 	mov	r8,zero
 2001c04:	0021883a 	mov	r16,zero
 2001c08:	003f7106 	br	20019d0 <__adddf3+0x204>
 2001c0c:	193ff804 	addi	r4,r3,-32
 2001c10:	00800804 	movi	r2,32
 2001c14:	4908d83a 	srl	r4,r9,r4
 2001c18:	18804526 	beq	r3,r2,2001d30 <__adddf3+0x564>
 2001c1c:	00801004 	movi	r2,64
 2001c20:	10c5c83a 	sub	r2,r2,r3
 2001c24:	4886983a 	sll	r3,r9,r2
 2001c28:	198cb03a 	or	r6,r3,r6
 2001c2c:	300cc03a 	cmpne	r6,r6,zero
 2001c30:	218cb03a 	or	r6,r4,r6
 2001c34:	0007883a 	mov	r3,zero
 2001c38:	003f3b06 	br	2001928 <__adddf3+0x15c>
 2001c3c:	80002a26 	beq	r16,zero,2001ce8 <__adddf3+0x51c>
 2001c40:	0101ffc4 	movi	r4,2047
 2001c44:	11006826 	beq	r2,r4,2001de8 <__adddf3+0x61c>
 2001c48:	00c7c83a 	sub	r3,zero,r3
 2001c4c:	42002034 	orhi	r8,r8,128
 2001c50:	01000e04 	movi	r4,56
 2001c54:	20c07c16 	blt	r4,r3,2001e48 <__adddf3+0x67c>
 2001c58:	010007c4 	movi	r4,31
 2001c5c:	20c0da16 	blt	r4,r3,2001fc8 <__adddf3+0x7fc>
 2001c60:	01000804 	movi	r4,32
 2001c64:	20c9c83a 	sub	r4,r4,r3
 2001c68:	4114983a 	sll	r10,r8,r4
 2001c6c:	88cad83a 	srl	r5,r17,r3
 2001c70:	8908983a 	sll	r4,r17,r4
 2001c74:	40c6d83a 	srl	r3,r8,r3
 2001c78:	5162b03a 	or	r17,r10,r5
 2001c7c:	2008c03a 	cmpne	r4,r4,zero
 2001c80:	8922b03a 	or	r17,r17,r4
 2001c84:	3463c83a 	sub	r17,r6,r17
 2001c88:	48c7c83a 	sub	r3,r9,r3
 2001c8c:	344d803a 	cmpltu	r6,r6,r17
 2001c90:	1991c83a 	sub	r8,r3,r6
 2001c94:	1021883a 	mov	r16,r2
 2001c98:	3825883a 	mov	r18,r7
 2001c9c:	003f2706 	br	200193c <__adddf3+0x170>
 2001ca0:	24d0b03a 	or	r8,r4,r19
 2001ca4:	40001b1e 	bne	r8,zero,2001d14 <__adddf3+0x548>
 2001ca8:	0005883a 	mov	r2,zero
 2001cac:	0007883a 	mov	r3,zero
 2001cb0:	0021883a 	mov	r16,zero
 2001cb4:	003f4d06 	br	20019ec <__adddf3+0x220>
 2001cb8:	008007c4 	movi	r2,31
 2001cbc:	11003c16 	blt	r2,r4,2001db0 <__adddf3+0x5e4>
 2001cc0:	00800804 	movi	r2,32
 2001cc4:	1105c83a 	sub	r2,r2,r4
 2001cc8:	488e983a 	sll	r7,r9,r2
 2001ccc:	310ad83a 	srl	r5,r6,r4
 2001cd0:	3084983a 	sll	r2,r6,r2
 2001cd4:	4912d83a 	srl	r9,r9,r4
 2001cd8:	394ab03a 	or	r5,r7,r5
 2001cdc:	1004c03a 	cmpne	r2,r2,zero
 2001ce0:	288ab03a 	or	r5,r5,r2
 2001ce4:	003f5306 	br	2001a34 <__adddf3+0x268>
 2001ce8:	4448b03a 	or	r4,r8,r17
 2001cec:	20003e26 	beq	r4,zero,2001de8 <__adddf3+0x61c>
 2001cf0:	00c6303a 	nor	r3,zero,r3
 2001cf4:	18003a1e 	bne	r3,zero,2001de0 <__adddf3+0x614>
 2001cf8:	3463c83a 	sub	r17,r6,r17
 2001cfc:	4a07c83a 	sub	r3,r9,r8
 2001d00:	344d803a 	cmpltu	r6,r6,r17
 2001d04:	1991c83a 	sub	r8,r3,r6
 2001d08:	1021883a 	mov	r16,r2
 2001d0c:	3825883a 	mov	r18,r7
 2001d10:	003f0a06 	br	200193c <__adddf3+0x170>
 2001d14:	2023883a 	mov	r17,r4
 2001d18:	003f0d06 	br	2001950 <__adddf3+0x184>
 2001d1c:	0081ffc4 	movi	r2,2047
 2001d20:	80bf3f1e 	bne	r16,r2,2001a20 <__adddf3+0x254>
 2001d24:	003ec806 	br	2001848 <__adddf3+0x7c>
 2001d28:	0005883a 	mov	r2,zero
 2001d2c:	003fb106 	br	2001bf4 <__adddf3+0x428>
 2001d30:	0007883a 	mov	r3,zero
 2001d34:	003fbc06 	br	2001c28 <__adddf3+0x45c>
 2001d38:	4444b03a 	or	r2,r8,r17
 2001d3c:	8000871e 	bne	r16,zero,2001f5c <__adddf3+0x790>
 2001d40:	1000ba26 	beq	r2,zero,200202c <__adddf3+0x860>
 2001d44:	4984b03a 	or	r2,r9,r6
 2001d48:	103ebf26 	beq	r2,zero,2001848 <__adddf3+0x7c>
 2001d4c:	8985883a 	add	r2,r17,r6
 2001d50:	4247883a 	add	r3,r8,r9
 2001d54:	1451803a 	cmpltu	r8,r2,r17
 2001d58:	40d1883a 	add	r8,r8,r3
 2001d5c:	40c0202c 	andhi	r3,r8,128
 2001d60:	1023883a 	mov	r17,r2
 2001d64:	183f1a26 	beq	r3,zero,20019d0 <__adddf3+0x204>
 2001d68:	00bfe034 	movhi	r2,65408
 2001d6c:	10bfffc4 	addi	r2,r2,-1
 2001d70:	2021883a 	mov	r16,r4
 2001d74:	4090703a 	and	r8,r8,r2
 2001d78:	003eb306 	br	2001848 <__adddf3+0x7c>
 2001d7c:	4444b03a 	or	r2,r8,r17
 2001d80:	8000291e 	bne	r16,zero,2001e28 <__adddf3+0x65c>
 2001d84:	10004b1e 	bne	r2,zero,2001eb4 <__adddf3+0x6e8>
 2001d88:	4990b03a 	or	r8,r9,r6
 2001d8c:	40008b26 	beq	r8,zero,2001fbc <__adddf3+0x7f0>
 2001d90:	4811883a 	mov	r8,r9
 2001d94:	3023883a 	mov	r17,r6
 2001d98:	3825883a 	mov	r18,r7
 2001d9c:	003eaa06 	br	2001848 <__adddf3+0x7c>
 2001da0:	1021883a 	mov	r16,r2
 2001da4:	0011883a 	mov	r8,zero
 2001da8:	0005883a 	mov	r2,zero
 2001dac:	003f0f06 	br	20019ec <__adddf3+0x220>
 2001db0:	217ff804 	addi	r5,r4,-32
 2001db4:	00800804 	movi	r2,32
 2001db8:	494ad83a 	srl	r5,r9,r5
 2001dbc:	20807d26 	beq	r4,r2,2001fb4 <__adddf3+0x7e8>
 2001dc0:	00801004 	movi	r2,64
 2001dc4:	1109c83a 	sub	r4,r2,r4
 2001dc8:	4912983a 	sll	r9,r9,r4
 2001dcc:	498cb03a 	or	r6,r9,r6
 2001dd0:	300cc03a 	cmpne	r6,r6,zero
 2001dd4:	298ab03a 	or	r5,r5,r6
 2001dd8:	0013883a 	mov	r9,zero
 2001ddc:	003f1506 	br	2001a34 <__adddf3+0x268>
 2001de0:	0101ffc4 	movi	r4,2047
 2001de4:	113f9a1e 	bne	r2,r4,2001c50 <__adddf3+0x484>
 2001de8:	4811883a 	mov	r8,r9
 2001dec:	3023883a 	mov	r17,r6
 2001df0:	1021883a 	mov	r16,r2
 2001df4:	3825883a 	mov	r18,r7
 2001df8:	003e9306 	br	2001848 <__adddf3+0x7c>
 2001dfc:	8000161e 	bne	r16,zero,2001e58 <__adddf3+0x68c>
 2001e00:	444ab03a 	or	r5,r8,r17
 2001e04:	28005126 	beq	r5,zero,2001f4c <__adddf3+0x780>
 2001e08:	0108303a 	nor	r4,zero,r4
 2001e0c:	20004d1e 	bne	r4,zero,2001f44 <__adddf3+0x778>
 2001e10:	89a3883a 	add	r17,r17,r6
 2001e14:	4253883a 	add	r9,r8,r9
 2001e18:	898d803a 	cmpltu	r6,r17,r6
 2001e1c:	3251883a 	add	r8,r6,r9
 2001e20:	1021883a 	mov	r16,r2
 2001e24:	003f0806 	br	2001a48 <__adddf3+0x27c>
 2001e28:	1000301e 	bne	r2,zero,2001eec <__adddf3+0x720>
 2001e2c:	4984b03a 	or	r2,r9,r6
 2001e30:	10007126 	beq	r2,zero,2001ff8 <__adddf3+0x82c>
 2001e34:	4811883a 	mov	r8,r9
 2001e38:	3023883a 	mov	r17,r6
 2001e3c:	3825883a 	mov	r18,r7
 2001e40:	0401ffc4 	movi	r16,2047
 2001e44:	003e8006 	br	2001848 <__adddf3+0x7c>
 2001e48:	4462b03a 	or	r17,r8,r17
 2001e4c:	8822c03a 	cmpne	r17,r17,zero
 2001e50:	0007883a 	mov	r3,zero
 2001e54:	003f8b06 	br	2001c84 <__adddf3+0x4b8>
 2001e58:	0141ffc4 	movi	r5,2047
 2001e5c:	11403b26 	beq	r2,r5,2001f4c <__adddf3+0x780>
 2001e60:	0109c83a 	sub	r4,zero,r4
 2001e64:	42002034 	orhi	r8,r8,128
 2001e68:	01400e04 	movi	r5,56
 2001e6c:	29006716 	blt	r5,r4,200200c <__adddf3+0x840>
 2001e70:	014007c4 	movi	r5,31
 2001e74:	29007016 	blt	r5,r4,2002038 <__adddf3+0x86c>
 2001e78:	01400804 	movi	r5,32
 2001e7c:	290bc83a 	sub	r5,r5,r4
 2001e80:	4154983a 	sll	r10,r8,r5
 2001e84:	890ed83a 	srl	r7,r17,r4
 2001e88:	894a983a 	sll	r5,r17,r5
 2001e8c:	4108d83a 	srl	r4,r8,r4
 2001e90:	51e2b03a 	or	r17,r10,r7
 2001e94:	280ac03a 	cmpne	r5,r5,zero
 2001e98:	8962b03a 	or	r17,r17,r5
 2001e9c:	89a3883a 	add	r17,r17,r6
 2001ea0:	2253883a 	add	r9,r4,r9
 2001ea4:	898d803a 	cmpltu	r6,r17,r6
 2001ea8:	3251883a 	add	r8,r6,r9
 2001eac:	1021883a 	mov	r16,r2
 2001eb0:	003ee506 	br	2001a48 <__adddf3+0x27c>
 2001eb4:	4984b03a 	or	r2,r9,r6
 2001eb8:	103e6326 	beq	r2,zero,2001848 <__adddf3+0x7c>
 2001ebc:	8987c83a 	sub	r3,r17,r6
 2001ec0:	88c9803a 	cmpltu	r4,r17,r3
 2001ec4:	4245c83a 	sub	r2,r8,r9
 2001ec8:	1105c83a 	sub	r2,r2,r4
 2001ecc:	1100202c 	andhi	r4,r2,128
 2001ed0:	203ebb26 	beq	r4,zero,20019c0 <__adddf3+0x1f4>
 2001ed4:	3463c83a 	sub	r17,r6,r17
 2001ed8:	4a07c83a 	sub	r3,r9,r8
 2001edc:	344d803a 	cmpltu	r6,r6,r17
 2001ee0:	1991c83a 	sub	r8,r3,r6
 2001ee4:	3825883a 	mov	r18,r7
 2001ee8:	003e5706 	br	2001848 <__adddf3+0x7c>
 2001eec:	4984b03a 	or	r2,r9,r6
 2001ef0:	10002e26 	beq	r2,zero,2001fac <__adddf3+0x7e0>
 2001ef4:	4004d0fa 	srli	r2,r8,3
 2001ef8:	8822d0fa 	srli	r17,r17,3
 2001efc:	4010977a 	slli	r8,r8,29
 2001f00:	10c0022c 	andhi	r3,r2,8
 2001f04:	4462b03a 	or	r17,r8,r17
 2001f08:	18000826 	beq	r3,zero,2001f2c <__adddf3+0x760>
 2001f0c:	4808d0fa 	srli	r4,r9,3
 2001f10:	20c0022c 	andhi	r3,r4,8
 2001f14:	1800051e 	bne	r3,zero,2001f2c <__adddf3+0x760>
 2001f18:	300cd0fa 	srli	r6,r6,3
 2001f1c:	4806977a 	slli	r3,r9,29
 2001f20:	2005883a 	mov	r2,r4
 2001f24:	3825883a 	mov	r18,r7
 2001f28:	19a2b03a 	or	r17,r3,r6
 2001f2c:	8810d77a 	srli	r8,r17,29
 2001f30:	100490fa 	slli	r2,r2,3
 2001f34:	882290fa 	slli	r17,r17,3
 2001f38:	0401ffc4 	movi	r16,2047
 2001f3c:	4090b03a 	or	r8,r8,r2
 2001f40:	003e4106 	br	2001848 <__adddf3+0x7c>
 2001f44:	0141ffc4 	movi	r5,2047
 2001f48:	117fc71e 	bne	r2,r5,2001e68 <__adddf3+0x69c>
 2001f4c:	4811883a 	mov	r8,r9
 2001f50:	3023883a 	mov	r17,r6
 2001f54:	1021883a 	mov	r16,r2
 2001f58:	003e3b06 	br	2001848 <__adddf3+0x7c>
 2001f5c:	10002f26 	beq	r2,zero,200201c <__adddf3+0x850>
 2001f60:	4984b03a 	or	r2,r9,r6
 2001f64:	10001126 	beq	r2,zero,2001fac <__adddf3+0x7e0>
 2001f68:	4004d0fa 	srli	r2,r8,3
 2001f6c:	8822d0fa 	srli	r17,r17,3
 2001f70:	4010977a 	slli	r8,r8,29
 2001f74:	10c0022c 	andhi	r3,r2,8
 2001f78:	4462b03a 	or	r17,r8,r17
 2001f7c:	183feb26 	beq	r3,zero,2001f2c <__adddf3+0x760>
 2001f80:	4808d0fa 	srli	r4,r9,3
 2001f84:	20c0022c 	andhi	r3,r4,8
 2001f88:	183fe81e 	bne	r3,zero,2001f2c <__adddf3+0x760>
 2001f8c:	300cd0fa 	srli	r6,r6,3
 2001f90:	4806977a 	slli	r3,r9,29
 2001f94:	2005883a 	mov	r2,r4
 2001f98:	19a2b03a 	or	r17,r3,r6
 2001f9c:	003fe306 	br	2001f2c <__adddf3+0x760>
 2001fa0:	0011883a 	mov	r8,zero
 2001fa4:	0005883a 	mov	r2,zero
 2001fa8:	003e3f06 	br	20018a8 <__adddf3+0xdc>
 2001fac:	0401ffc4 	movi	r16,2047
 2001fb0:	003e2506 	br	2001848 <__adddf3+0x7c>
 2001fb4:	0013883a 	mov	r9,zero
 2001fb8:	003f8406 	br	2001dcc <__adddf3+0x600>
 2001fbc:	0005883a 	mov	r2,zero
 2001fc0:	0007883a 	mov	r3,zero
 2001fc4:	003e8906 	br	20019ec <__adddf3+0x220>
 2001fc8:	197ff804 	addi	r5,r3,-32
 2001fcc:	01000804 	movi	r4,32
 2001fd0:	414ad83a 	srl	r5,r8,r5
 2001fd4:	19002426 	beq	r3,r4,2002068 <__adddf3+0x89c>
 2001fd8:	01001004 	movi	r4,64
 2001fdc:	20c7c83a 	sub	r3,r4,r3
 2001fe0:	40c6983a 	sll	r3,r8,r3
 2001fe4:	1c46b03a 	or	r3,r3,r17
 2001fe8:	1806c03a 	cmpne	r3,r3,zero
 2001fec:	28e2b03a 	or	r17,r5,r3
 2001ff0:	0007883a 	mov	r3,zero
 2001ff4:	003f2306 	br	2001c84 <__adddf3+0x4b8>
 2001ff8:	0007883a 	mov	r3,zero
 2001ffc:	5811883a 	mov	r8,r11
 2002000:	00bfffc4 	movi	r2,-1
 2002004:	0401ffc4 	movi	r16,2047
 2002008:	003e7806 	br	20019ec <__adddf3+0x220>
 200200c:	4462b03a 	or	r17,r8,r17
 2002010:	8822c03a 	cmpne	r17,r17,zero
 2002014:	0009883a 	mov	r4,zero
 2002018:	003fa006 	br	2001e9c <__adddf3+0x6d0>
 200201c:	4811883a 	mov	r8,r9
 2002020:	3023883a 	mov	r17,r6
 2002024:	0401ffc4 	movi	r16,2047
 2002028:	003e0706 	br	2001848 <__adddf3+0x7c>
 200202c:	4811883a 	mov	r8,r9
 2002030:	3023883a 	mov	r17,r6
 2002034:	003e0406 	br	2001848 <__adddf3+0x7c>
 2002038:	21fff804 	addi	r7,r4,-32
 200203c:	01400804 	movi	r5,32
 2002040:	41ced83a 	srl	r7,r8,r7
 2002044:	21400a26 	beq	r4,r5,2002070 <__adddf3+0x8a4>
 2002048:	01401004 	movi	r5,64
 200204c:	2909c83a 	sub	r4,r5,r4
 2002050:	4108983a 	sll	r4,r8,r4
 2002054:	2448b03a 	or	r4,r4,r17
 2002058:	2008c03a 	cmpne	r4,r4,zero
 200205c:	3922b03a 	or	r17,r7,r4
 2002060:	0009883a 	mov	r4,zero
 2002064:	003f8d06 	br	2001e9c <__adddf3+0x6d0>
 2002068:	0007883a 	mov	r3,zero
 200206c:	003fdd06 	br	2001fe4 <__adddf3+0x818>
 2002070:	0009883a 	mov	r4,zero
 2002074:	003ff706 	br	2002054 <__adddf3+0x888>

02002078 <__divdf3>:
 2002078:	defff204 	addi	sp,sp,-56
 200207c:	dd400915 	stw	r21,36(sp)
 2002080:	282ad53a 	srli	r21,r5,20
 2002084:	dd000815 	stw	r20,32(sp)
 2002088:	2828d7fa 	srli	r20,r5,31
 200208c:	dc000415 	stw	r16,16(sp)
 2002090:	04000434 	movhi	r16,16
 2002094:	df000c15 	stw	fp,48(sp)
 2002098:	843fffc4 	addi	r16,r16,-1
 200209c:	dfc00d15 	stw	ra,52(sp)
 20020a0:	ddc00b15 	stw	r23,44(sp)
 20020a4:	dd800a15 	stw	r22,40(sp)
 20020a8:	dcc00715 	stw	r19,28(sp)
 20020ac:	dc800615 	stw	r18,24(sp)
 20020b0:	dc400515 	stw	r17,20(sp)
 20020b4:	ad41ffcc 	andi	r21,r21,2047
 20020b8:	2c20703a 	and	r16,r5,r16
 20020bc:	a7003fcc 	andi	fp,r20,255
 20020c0:	a8006126 	beq	r21,zero,2002248 <__divdf3+0x1d0>
 20020c4:	0081ffc4 	movi	r2,2047
 20020c8:	2025883a 	mov	r18,r4
 20020cc:	a8803726 	beq	r21,r2,20021ac <__divdf3+0x134>
 20020d0:	80800434 	orhi	r2,r16,16
 20020d4:	100490fa 	slli	r2,r2,3
 20020d8:	2020d77a 	srli	r16,r4,29
 20020dc:	202490fa 	slli	r18,r4,3
 20020e0:	ad7f0044 	addi	r21,r21,-1023
 20020e4:	80a0b03a 	or	r16,r16,r2
 20020e8:	0027883a 	mov	r19,zero
 20020ec:	0013883a 	mov	r9,zero
 20020f0:	3804d53a 	srli	r2,r7,20
 20020f4:	382cd7fa 	srli	r22,r7,31
 20020f8:	04400434 	movhi	r17,16
 20020fc:	8c7fffc4 	addi	r17,r17,-1
 2002100:	1081ffcc 	andi	r2,r2,2047
 2002104:	3011883a 	mov	r8,r6
 2002108:	3c62703a 	and	r17,r7,r17
 200210c:	b5c03fcc 	andi	r23,r22,255
 2002110:	10006c26 	beq	r2,zero,20022c4 <__divdf3+0x24c>
 2002114:	00c1ffc4 	movi	r3,2047
 2002118:	10c06426 	beq	r2,r3,20022ac <__divdf3+0x234>
 200211c:	88c00434 	orhi	r3,r17,16
 2002120:	180690fa 	slli	r3,r3,3
 2002124:	3022d77a 	srli	r17,r6,29
 2002128:	301090fa 	slli	r8,r6,3
 200212c:	10bf0044 	addi	r2,r2,-1023
 2002130:	88e2b03a 	or	r17,r17,r3
 2002134:	000f883a 	mov	r7,zero
 2002138:	a58cf03a 	xor	r6,r20,r22
 200213c:	3cc8b03a 	or	r4,r7,r19
 2002140:	a8abc83a 	sub	r21,r21,r2
 2002144:	008003c4 	movi	r2,15
 2002148:	3007883a 	mov	r3,r6
 200214c:	34c03fcc 	andi	r19,r6,255
 2002150:	11009036 	bltu	r2,r4,2002394 <__divdf3+0x31c>
 2002154:	200890ba 	slli	r4,r4,2
 2002158:	00808034 	movhi	r2,512
 200215c:	10885b04 	addi	r2,r2,8556
 2002160:	2089883a 	add	r4,r4,r2
 2002164:	20800017 	ldw	r2,0(r4)
 2002168:	1000683a 	jmp	r2
 200216c:	02002394 	movui	r8,142
 2002170:	020021e4 	muli	r8,zero,135
 2002174:	02002384 	movi	r8,142
 2002178:	020021d8 	cmpnei	r8,zero,135
 200217c:	02002384 	movi	r8,142
 2002180:	02002358 	cmpnei	r8,zero,141
 2002184:	02002384 	movi	r8,142
 2002188:	020021d8 	cmpnei	r8,zero,135
 200218c:	020021e4 	muli	r8,zero,135
 2002190:	020021e4 	muli	r8,zero,135
 2002194:	02002358 	cmpnei	r8,zero,141
 2002198:	020021d8 	cmpnei	r8,zero,135
 200219c:	020021c8 	cmpgei	r8,zero,135
 20021a0:	020021c8 	cmpgei	r8,zero,135
 20021a4:	020021c8 	cmpgei	r8,zero,135
 20021a8:	02002678 	rdprs	r8,zero,153
 20021ac:	2404b03a 	or	r2,r4,r16
 20021b0:	1000661e 	bne	r2,zero,200234c <__divdf3+0x2d4>
 20021b4:	04c00204 	movi	r19,8
 20021b8:	0021883a 	mov	r16,zero
 20021bc:	0025883a 	mov	r18,zero
 20021c0:	02400084 	movi	r9,2
 20021c4:	003fca06 	br	20020f0 <__divdf3+0x78>
 20021c8:	8023883a 	mov	r17,r16
 20021cc:	9011883a 	mov	r8,r18
 20021d0:	e02f883a 	mov	r23,fp
 20021d4:	480f883a 	mov	r7,r9
 20021d8:	00800084 	movi	r2,2
 20021dc:	3881311e 	bne	r7,r2,20026a4 <__divdf3+0x62c>
 20021e0:	b827883a 	mov	r19,r23
 20021e4:	98c0004c 	andi	r3,r19,1
 20021e8:	0081ffc4 	movi	r2,2047
 20021ec:	000b883a 	mov	r5,zero
 20021f0:	0025883a 	mov	r18,zero
 20021f4:	1004953a 	slli	r2,r2,20
 20021f8:	18c03fcc 	andi	r3,r3,255
 20021fc:	04400434 	movhi	r17,16
 2002200:	8c7fffc4 	addi	r17,r17,-1
 2002204:	180697fa 	slli	r3,r3,31
 2002208:	2c4a703a 	and	r5,r5,r17
 200220c:	288ab03a 	or	r5,r5,r2
 2002210:	28c6b03a 	or	r3,r5,r3
 2002214:	9005883a 	mov	r2,r18
 2002218:	dfc00d17 	ldw	ra,52(sp)
 200221c:	df000c17 	ldw	fp,48(sp)
 2002220:	ddc00b17 	ldw	r23,44(sp)
 2002224:	dd800a17 	ldw	r22,40(sp)
 2002228:	dd400917 	ldw	r21,36(sp)
 200222c:	dd000817 	ldw	r20,32(sp)
 2002230:	dcc00717 	ldw	r19,28(sp)
 2002234:	dc800617 	ldw	r18,24(sp)
 2002238:	dc400517 	ldw	r17,20(sp)
 200223c:	dc000417 	ldw	r16,16(sp)
 2002240:	dec00e04 	addi	sp,sp,56
 2002244:	f800283a 	ret
 2002248:	2404b03a 	or	r2,r4,r16
 200224c:	2027883a 	mov	r19,r4
 2002250:	10003926 	beq	r2,zero,2002338 <__divdf3+0x2c0>
 2002254:	80012e26 	beq	r16,zero,2002710 <__divdf3+0x698>
 2002258:	8009883a 	mov	r4,r16
 200225c:	d9800315 	stw	r6,12(sp)
 2002260:	d9c00215 	stw	r7,8(sp)
 2002264:	2003d280 	call	2003d28 <__clzsi2>
 2002268:	d9800317 	ldw	r6,12(sp)
 200226c:	d9c00217 	ldw	r7,8(sp)
 2002270:	113ffd44 	addi	r4,r2,-11
 2002274:	00c00704 	movi	r3,28
 2002278:	19012116 	blt	r3,r4,2002700 <__divdf3+0x688>
 200227c:	00c00744 	movi	r3,29
 2002280:	147ffe04 	addi	r17,r2,-8
 2002284:	1907c83a 	sub	r3,r3,r4
 2002288:	8460983a 	sll	r16,r16,r17
 200228c:	98c6d83a 	srl	r3,r19,r3
 2002290:	9c64983a 	sll	r18,r19,r17
 2002294:	1c20b03a 	or	r16,r3,r16
 2002298:	1080fcc4 	addi	r2,r2,1011
 200229c:	00abc83a 	sub	r21,zero,r2
 20022a0:	0027883a 	mov	r19,zero
 20022a4:	0013883a 	mov	r9,zero
 20022a8:	003f9106 	br	20020f0 <__divdf3+0x78>
 20022ac:	3446b03a 	or	r3,r6,r17
 20022b0:	18001f1e 	bne	r3,zero,2002330 <__divdf3+0x2b8>
 20022b4:	0023883a 	mov	r17,zero
 20022b8:	0011883a 	mov	r8,zero
 20022bc:	01c00084 	movi	r7,2
 20022c0:	003f9d06 	br	2002138 <__divdf3+0xc0>
 20022c4:	3446b03a 	or	r3,r6,r17
 20022c8:	18001526 	beq	r3,zero,2002320 <__divdf3+0x2a8>
 20022cc:	88011b26 	beq	r17,zero,200273c <__divdf3+0x6c4>
 20022d0:	8809883a 	mov	r4,r17
 20022d4:	d9800315 	stw	r6,12(sp)
 20022d8:	da400115 	stw	r9,4(sp)
 20022dc:	2003d280 	call	2003d28 <__clzsi2>
 20022e0:	d9800317 	ldw	r6,12(sp)
 20022e4:	da400117 	ldw	r9,4(sp)
 20022e8:	113ffd44 	addi	r4,r2,-11
 20022ec:	00c00704 	movi	r3,28
 20022f0:	19010e16 	blt	r3,r4,200272c <__divdf3+0x6b4>
 20022f4:	00c00744 	movi	r3,29
 20022f8:	123ffe04 	addi	r8,r2,-8
 20022fc:	1907c83a 	sub	r3,r3,r4
 2002300:	8a22983a 	sll	r17,r17,r8
 2002304:	30c6d83a 	srl	r3,r6,r3
 2002308:	3210983a 	sll	r8,r6,r8
 200230c:	1c62b03a 	or	r17,r3,r17
 2002310:	1080fcc4 	addi	r2,r2,1011
 2002314:	0085c83a 	sub	r2,zero,r2
 2002318:	000f883a 	mov	r7,zero
 200231c:	003f8606 	br	2002138 <__divdf3+0xc0>
 2002320:	0023883a 	mov	r17,zero
 2002324:	0011883a 	mov	r8,zero
 2002328:	01c00044 	movi	r7,1
 200232c:	003f8206 	br	2002138 <__divdf3+0xc0>
 2002330:	01c000c4 	movi	r7,3
 2002334:	003f8006 	br	2002138 <__divdf3+0xc0>
 2002338:	04c00104 	movi	r19,4
 200233c:	0021883a 	mov	r16,zero
 2002340:	0025883a 	mov	r18,zero
 2002344:	02400044 	movi	r9,1
 2002348:	003f6906 	br	20020f0 <__divdf3+0x78>
 200234c:	04c00304 	movi	r19,12
 2002350:	024000c4 	movi	r9,3
 2002354:	003f6606 	br	20020f0 <__divdf3+0x78>
 2002358:	01400434 	movhi	r5,16
 200235c:	0007883a 	mov	r3,zero
 2002360:	297fffc4 	addi	r5,r5,-1
 2002364:	04bfffc4 	movi	r18,-1
 2002368:	0081ffc4 	movi	r2,2047
 200236c:	003fa106 	br	20021f4 <__divdf3+0x17c>
 2002370:	00c00044 	movi	r3,1
 2002374:	1887c83a 	sub	r3,r3,r2
 2002378:	01000e04 	movi	r4,56
 200237c:	20c1210e 	bge	r4,r3,2002804 <__divdf3+0x78c>
 2002380:	98c0004c 	andi	r3,r19,1
 2002384:	0005883a 	mov	r2,zero
 2002388:	000b883a 	mov	r5,zero
 200238c:	0025883a 	mov	r18,zero
 2002390:	003f9806 	br	20021f4 <__divdf3+0x17c>
 2002394:	8c00fd36 	bltu	r17,r16,200278c <__divdf3+0x714>
 2002398:	8440fb26 	beq	r16,r17,2002788 <__divdf3+0x710>
 200239c:	8007883a 	mov	r3,r16
 20023a0:	ad7fffc4 	addi	r21,r21,-1
 20023a4:	0021883a 	mov	r16,zero
 20023a8:	4004d63a 	srli	r2,r8,24
 20023ac:	8822923a 	slli	r17,r17,8
 20023b0:	1809883a 	mov	r4,r3
 20023b4:	402c923a 	slli	r22,r8,8
 20023b8:	88b8b03a 	or	fp,r17,r2
 20023bc:	e028d43a 	srli	r20,fp,16
 20023c0:	d8c00015 	stw	r3,0(sp)
 20023c4:	e5ffffcc 	andi	r23,fp,65535
 20023c8:	a00b883a 	mov	r5,r20
 20023cc:	2003e840 	call	2003e84 <__udivsi3>
 20023d0:	d8c00017 	ldw	r3,0(sp)
 20023d4:	a00b883a 	mov	r5,r20
 20023d8:	d8800315 	stw	r2,12(sp)
 20023dc:	1809883a 	mov	r4,r3
 20023e0:	2003ee80 	call	2003ee8 <__umodsi3>
 20023e4:	d9800317 	ldw	r6,12(sp)
 20023e8:	1006943a 	slli	r3,r2,16
 20023ec:	9004d43a 	srli	r2,r18,16
 20023f0:	b9a3383a 	mul	r17,r23,r6
 20023f4:	10c4b03a 	or	r2,r2,r3
 20023f8:	1440062e 	bgeu	r2,r17,2002414 <__divdf3+0x39c>
 20023fc:	1705883a 	add	r2,r2,fp
 2002400:	30ffffc4 	addi	r3,r6,-1
 2002404:	1700ee36 	bltu	r2,fp,20027c0 <__divdf3+0x748>
 2002408:	1440ed2e 	bgeu	r2,r17,20027c0 <__divdf3+0x748>
 200240c:	31bfff84 	addi	r6,r6,-2
 2002410:	1705883a 	add	r2,r2,fp
 2002414:	1463c83a 	sub	r17,r2,r17
 2002418:	a00b883a 	mov	r5,r20
 200241c:	8809883a 	mov	r4,r17
 2002420:	d9800315 	stw	r6,12(sp)
 2002424:	2003e840 	call	2003e84 <__udivsi3>
 2002428:	a00b883a 	mov	r5,r20
 200242c:	8809883a 	mov	r4,r17
 2002430:	d8800215 	stw	r2,8(sp)
 2002434:	2003ee80 	call	2003ee8 <__umodsi3>
 2002438:	d9c00217 	ldw	r7,8(sp)
 200243c:	1004943a 	slli	r2,r2,16
 2002440:	94bfffcc 	andi	r18,r18,65535
 2002444:	b9d1383a 	mul	r8,r23,r7
 2002448:	90a4b03a 	or	r18,r18,r2
 200244c:	d9800317 	ldw	r6,12(sp)
 2002450:	9200062e 	bgeu	r18,r8,200246c <__divdf3+0x3f4>
 2002454:	9725883a 	add	r18,r18,fp
 2002458:	38bfffc4 	addi	r2,r7,-1
 200245c:	9700d636 	bltu	r18,fp,20027b8 <__divdf3+0x740>
 2002460:	9200d52e 	bgeu	r18,r8,20027b8 <__divdf3+0x740>
 2002464:	39ffff84 	addi	r7,r7,-2
 2002468:	9725883a 	add	r18,r18,fp
 200246c:	3004943a 	slli	r2,r6,16
 2002470:	b012d43a 	srli	r9,r22,16
 2002474:	b1bfffcc 	andi	r6,r22,65535
 2002478:	11e2b03a 	or	r17,r2,r7
 200247c:	8806d43a 	srli	r3,r17,16
 2002480:	893fffcc 	andi	r4,r17,65535
 2002484:	218b383a 	mul	r5,r4,r6
 2002488:	30c5383a 	mul	r2,r6,r3
 200248c:	2249383a 	mul	r4,r4,r9
 2002490:	280ed43a 	srli	r7,r5,16
 2002494:	9225c83a 	sub	r18,r18,r8
 2002498:	2089883a 	add	r4,r4,r2
 200249c:	3909883a 	add	r4,r7,r4
 20024a0:	1a47383a 	mul	r3,r3,r9
 20024a4:	2080022e 	bgeu	r4,r2,20024b0 <__divdf3+0x438>
 20024a8:	00800074 	movhi	r2,1
 20024ac:	1887883a 	add	r3,r3,r2
 20024b0:	2004d43a 	srli	r2,r4,16
 20024b4:	2008943a 	slli	r4,r4,16
 20024b8:	297fffcc 	andi	r5,r5,65535
 20024bc:	10c7883a 	add	r3,r2,r3
 20024c0:	2149883a 	add	r4,r4,r5
 20024c4:	90c0a536 	bltu	r18,r3,200275c <__divdf3+0x6e4>
 20024c8:	90c0bf26 	beq	r18,r3,20027c8 <__divdf3+0x750>
 20024cc:	90c7c83a 	sub	r3,r18,r3
 20024d0:	810fc83a 	sub	r7,r16,r4
 20024d4:	81e5803a 	cmpltu	r18,r16,r7
 20024d8:	1ca5c83a 	sub	r18,r3,r18
 20024dc:	e480c126 	beq	fp,r18,20027e4 <__divdf3+0x76c>
 20024e0:	a00b883a 	mov	r5,r20
 20024e4:	9009883a 	mov	r4,r18
 20024e8:	d9800315 	stw	r6,12(sp)
 20024ec:	d9c00215 	stw	r7,8(sp)
 20024f0:	da400115 	stw	r9,4(sp)
 20024f4:	2003e840 	call	2003e84 <__udivsi3>
 20024f8:	a00b883a 	mov	r5,r20
 20024fc:	9009883a 	mov	r4,r18
 2002500:	d8800015 	stw	r2,0(sp)
 2002504:	2003ee80 	call	2003ee8 <__umodsi3>
 2002508:	d9c00217 	ldw	r7,8(sp)
 200250c:	da000017 	ldw	r8,0(sp)
 2002510:	1006943a 	slli	r3,r2,16
 2002514:	3804d43a 	srli	r2,r7,16
 2002518:	ba21383a 	mul	r16,r23,r8
 200251c:	d9800317 	ldw	r6,12(sp)
 2002520:	10c4b03a 	or	r2,r2,r3
 2002524:	da400117 	ldw	r9,4(sp)
 2002528:	1400062e 	bgeu	r2,r16,2002544 <__divdf3+0x4cc>
 200252c:	1705883a 	add	r2,r2,fp
 2002530:	40ffffc4 	addi	r3,r8,-1
 2002534:	1700ad36 	bltu	r2,fp,20027ec <__divdf3+0x774>
 2002538:	1400ac2e 	bgeu	r2,r16,20027ec <__divdf3+0x774>
 200253c:	423fff84 	addi	r8,r8,-2
 2002540:	1705883a 	add	r2,r2,fp
 2002544:	1421c83a 	sub	r16,r2,r16
 2002548:	a00b883a 	mov	r5,r20
 200254c:	8009883a 	mov	r4,r16
 2002550:	d9800315 	stw	r6,12(sp)
 2002554:	d9c00215 	stw	r7,8(sp)
 2002558:	da000015 	stw	r8,0(sp)
 200255c:	da400115 	stw	r9,4(sp)
 2002560:	2003e840 	call	2003e84 <__udivsi3>
 2002564:	8009883a 	mov	r4,r16
 2002568:	a00b883a 	mov	r5,r20
 200256c:	1025883a 	mov	r18,r2
 2002570:	2003ee80 	call	2003ee8 <__umodsi3>
 2002574:	d9c00217 	ldw	r7,8(sp)
 2002578:	1004943a 	slli	r2,r2,16
 200257c:	bcaf383a 	mul	r23,r23,r18
 2002580:	393fffcc 	andi	r4,r7,65535
 2002584:	2088b03a 	or	r4,r4,r2
 2002588:	d9800317 	ldw	r6,12(sp)
 200258c:	da000017 	ldw	r8,0(sp)
 2002590:	da400117 	ldw	r9,4(sp)
 2002594:	25c0062e 	bgeu	r4,r23,20025b0 <__divdf3+0x538>
 2002598:	2709883a 	add	r4,r4,fp
 200259c:	90bfffc4 	addi	r2,r18,-1
 20025a0:	27009436 	bltu	r4,fp,20027f4 <__divdf3+0x77c>
 20025a4:	25c0932e 	bgeu	r4,r23,20027f4 <__divdf3+0x77c>
 20025a8:	94bfff84 	addi	r18,r18,-2
 20025ac:	2709883a 	add	r4,r4,fp
 20025b0:	4004943a 	slli	r2,r8,16
 20025b4:	25efc83a 	sub	r23,r4,r23
 20025b8:	1490b03a 	or	r8,r2,r18
 20025bc:	4008d43a 	srli	r4,r8,16
 20025c0:	40ffffcc 	andi	r3,r8,65535
 20025c4:	30c5383a 	mul	r2,r6,r3
 20025c8:	1a47383a 	mul	r3,r3,r9
 20025cc:	310d383a 	mul	r6,r6,r4
 20025d0:	100ad43a 	srli	r5,r2,16
 20025d4:	4913383a 	mul	r9,r9,r4
 20025d8:	1987883a 	add	r3,r3,r6
 20025dc:	28c7883a 	add	r3,r5,r3
 20025e0:	1980022e 	bgeu	r3,r6,20025ec <__divdf3+0x574>
 20025e4:	01000074 	movhi	r4,1
 20025e8:	4913883a 	add	r9,r9,r4
 20025ec:	1808d43a 	srli	r4,r3,16
 20025f0:	1806943a 	slli	r3,r3,16
 20025f4:	10bfffcc 	andi	r2,r2,65535
 20025f8:	2253883a 	add	r9,r4,r9
 20025fc:	1887883a 	add	r3,r3,r2
 2002600:	ba403836 	bltu	r23,r9,20026e4 <__divdf3+0x66c>
 2002604:	ba403626 	beq	r23,r9,20026e0 <__divdf3+0x668>
 2002608:	42000054 	ori	r8,r8,1
 200260c:	a880ffc4 	addi	r2,r21,1023
 2002610:	00bf570e 	bge	zero,r2,2002370 <__divdf3+0x2f8>
 2002614:	40c001cc 	andi	r3,r8,7
 2002618:	18000726 	beq	r3,zero,2002638 <__divdf3+0x5c0>
 200261c:	40c003cc 	andi	r3,r8,15
 2002620:	01000104 	movi	r4,4
 2002624:	19000426 	beq	r3,r4,2002638 <__divdf3+0x5c0>
 2002628:	4107883a 	add	r3,r8,r4
 200262c:	1a11803a 	cmpltu	r8,r3,r8
 2002630:	8a23883a 	add	r17,r17,r8
 2002634:	1811883a 	mov	r8,r3
 2002638:	88c0402c 	andhi	r3,r17,256
 200263c:	18000426 	beq	r3,zero,2002650 <__divdf3+0x5d8>
 2002640:	00ffc034 	movhi	r3,65280
 2002644:	18ffffc4 	addi	r3,r3,-1
 2002648:	a8810004 	addi	r2,r21,1024
 200264c:	88e2703a 	and	r17,r17,r3
 2002650:	00c1ff84 	movi	r3,2046
 2002654:	18bee316 	blt	r3,r2,20021e4 <__divdf3+0x16c>
 2002658:	8824977a 	slli	r18,r17,29
 200265c:	4010d0fa 	srli	r8,r8,3
 2002660:	8822927a 	slli	r17,r17,9
 2002664:	1081ffcc 	andi	r2,r2,2047
 2002668:	9224b03a 	or	r18,r18,r8
 200266c:	880ad33a 	srli	r5,r17,12
 2002670:	98c0004c 	andi	r3,r19,1
 2002674:	003edf06 	br	20021f4 <__divdf3+0x17c>
 2002678:	8080022c 	andhi	r2,r16,8
 200267c:	10001226 	beq	r2,zero,20026c8 <__divdf3+0x650>
 2002680:	8880022c 	andhi	r2,r17,8
 2002684:	1000101e 	bne	r2,zero,20026c8 <__divdf3+0x650>
 2002688:	00800434 	movhi	r2,16
 200268c:	89400234 	orhi	r5,r17,8
 2002690:	10bfffc4 	addi	r2,r2,-1
 2002694:	b007883a 	mov	r3,r22
 2002698:	288a703a 	and	r5,r5,r2
 200269c:	4025883a 	mov	r18,r8
 20026a0:	003f3106 	br	2002368 <__divdf3+0x2f0>
 20026a4:	008000c4 	movi	r2,3
 20026a8:	3880a626 	beq	r7,r2,2002944 <__divdf3+0x8cc>
 20026ac:	00800044 	movi	r2,1
 20026b0:	3880521e 	bne	r7,r2,20027fc <__divdf3+0x784>
 20026b4:	b807883a 	mov	r3,r23
 20026b8:	0005883a 	mov	r2,zero
 20026bc:	000b883a 	mov	r5,zero
 20026c0:	0025883a 	mov	r18,zero
 20026c4:	003ecb06 	br	20021f4 <__divdf3+0x17c>
 20026c8:	00800434 	movhi	r2,16
 20026cc:	81400234 	orhi	r5,r16,8
 20026d0:	10bfffc4 	addi	r2,r2,-1
 20026d4:	a007883a 	mov	r3,r20
 20026d8:	288a703a 	and	r5,r5,r2
 20026dc:	003f2206 	br	2002368 <__divdf3+0x2f0>
 20026e0:	183fca26 	beq	r3,zero,200260c <__divdf3+0x594>
 20026e4:	e5ef883a 	add	r23,fp,r23
 20026e8:	40bfffc4 	addi	r2,r8,-1
 20026ec:	bf00392e 	bgeu	r23,fp,20027d4 <__divdf3+0x75c>
 20026f0:	1011883a 	mov	r8,r2
 20026f4:	ba7fc41e 	bne	r23,r9,2002608 <__divdf3+0x590>
 20026f8:	b0ffc31e 	bne	r22,r3,2002608 <__divdf3+0x590>
 20026fc:	003fc306 	br	200260c <__divdf3+0x594>
 2002700:	143ff604 	addi	r16,r2,-40
 2002704:	9c20983a 	sll	r16,r19,r16
 2002708:	0025883a 	mov	r18,zero
 200270c:	003ee206 	br	2002298 <__divdf3+0x220>
 2002710:	d9800315 	stw	r6,12(sp)
 2002714:	d9c00215 	stw	r7,8(sp)
 2002718:	2003d280 	call	2003d28 <__clzsi2>
 200271c:	10800804 	addi	r2,r2,32
 2002720:	d9c00217 	ldw	r7,8(sp)
 2002724:	d9800317 	ldw	r6,12(sp)
 2002728:	003ed106 	br	2002270 <__divdf3+0x1f8>
 200272c:	147ff604 	addi	r17,r2,-40
 2002730:	3462983a 	sll	r17,r6,r17
 2002734:	0011883a 	mov	r8,zero
 2002738:	003ef506 	br	2002310 <__divdf3+0x298>
 200273c:	3009883a 	mov	r4,r6
 2002740:	d9800315 	stw	r6,12(sp)
 2002744:	da400115 	stw	r9,4(sp)
 2002748:	2003d280 	call	2003d28 <__clzsi2>
 200274c:	10800804 	addi	r2,r2,32
 2002750:	da400117 	ldw	r9,4(sp)
 2002754:	d9800317 	ldw	r6,12(sp)
 2002758:	003ee306 	br	20022e8 <__divdf3+0x270>
 200275c:	85a1883a 	add	r16,r16,r22
 2002760:	8585803a 	cmpltu	r2,r16,r22
 2002764:	1705883a 	add	r2,r2,fp
 2002768:	14a5883a 	add	r18,r2,r18
 200276c:	88bfffc4 	addi	r2,r17,-1
 2002770:	e4800c2e 	bgeu	fp,r18,20027a4 <__divdf3+0x72c>
 2002774:	90c03e36 	bltu	r18,r3,2002870 <__divdf3+0x7f8>
 2002778:	1c806926 	beq	r3,r18,2002920 <__divdf3+0x8a8>
 200277c:	90c7c83a 	sub	r3,r18,r3
 2002780:	1023883a 	mov	r17,r2
 2002784:	003f5206 	br	20024d0 <__divdf3+0x458>
 2002788:	923f0436 	bltu	r18,r8,200239c <__divdf3+0x324>
 200278c:	800897fa 	slli	r4,r16,31
 2002790:	9004d07a 	srli	r2,r18,1
 2002794:	8006d07a 	srli	r3,r16,1
 2002798:	902097fa 	slli	r16,r18,31
 200279c:	20a4b03a 	or	r18,r4,r2
 20027a0:	003f0106 	br	20023a8 <__divdf3+0x330>
 20027a4:	e4bff51e 	bne	fp,r18,200277c <__divdf3+0x704>
 20027a8:	85bff22e 	bgeu	r16,r22,2002774 <__divdf3+0x6fc>
 20027ac:	e0c7c83a 	sub	r3,fp,r3
 20027b0:	1023883a 	mov	r17,r2
 20027b4:	003f4606 	br	20024d0 <__divdf3+0x458>
 20027b8:	100f883a 	mov	r7,r2
 20027bc:	003f2b06 	br	200246c <__divdf3+0x3f4>
 20027c0:	180d883a 	mov	r6,r3
 20027c4:	003f1306 	br	2002414 <__divdf3+0x39c>
 20027c8:	813fe436 	bltu	r16,r4,200275c <__divdf3+0x6e4>
 20027cc:	0007883a 	mov	r3,zero
 20027d0:	003f3f06 	br	20024d0 <__divdf3+0x458>
 20027d4:	ba402c36 	bltu	r23,r9,2002888 <__divdf3+0x810>
 20027d8:	4dc05426 	beq	r9,r23,200292c <__divdf3+0x8b4>
 20027dc:	1011883a 	mov	r8,r2
 20027e0:	003f8906 	br	2002608 <__divdf3+0x590>
 20027e4:	023fffc4 	movi	r8,-1
 20027e8:	003f8806 	br	200260c <__divdf3+0x594>
 20027ec:	1811883a 	mov	r8,r3
 20027f0:	003f5406 	br	2002544 <__divdf3+0x4cc>
 20027f4:	1025883a 	mov	r18,r2
 20027f8:	003f6d06 	br	20025b0 <__divdf3+0x538>
 20027fc:	b827883a 	mov	r19,r23
 2002800:	003f8206 	br	200260c <__divdf3+0x594>
 2002804:	010007c4 	movi	r4,31
 2002808:	20c02616 	blt	r4,r3,20028a4 <__divdf3+0x82c>
 200280c:	00800804 	movi	r2,32
 2002810:	10c5c83a 	sub	r2,r2,r3
 2002814:	888a983a 	sll	r5,r17,r2
 2002818:	40c8d83a 	srl	r4,r8,r3
 200281c:	4084983a 	sll	r2,r8,r2
 2002820:	88e2d83a 	srl	r17,r17,r3
 2002824:	2906b03a 	or	r3,r5,r4
 2002828:	1004c03a 	cmpne	r2,r2,zero
 200282c:	1886b03a 	or	r3,r3,r2
 2002830:	188001cc 	andi	r2,r3,7
 2002834:	10000726 	beq	r2,zero,2002854 <__divdf3+0x7dc>
 2002838:	188003cc 	andi	r2,r3,15
 200283c:	01000104 	movi	r4,4
 2002840:	11000426 	beq	r2,r4,2002854 <__divdf3+0x7dc>
 2002844:	1805883a 	mov	r2,r3
 2002848:	10c00104 	addi	r3,r2,4
 200284c:	1885803a 	cmpltu	r2,r3,r2
 2002850:	88a3883a 	add	r17,r17,r2
 2002854:	8880202c 	andhi	r2,r17,128
 2002858:	10002726 	beq	r2,zero,20028f8 <__divdf3+0x880>
 200285c:	98c0004c 	andi	r3,r19,1
 2002860:	00800044 	movi	r2,1
 2002864:	000b883a 	mov	r5,zero
 2002868:	0025883a 	mov	r18,zero
 200286c:	003e6106 	br	20021f4 <__divdf3+0x17c>
 2002870:	85a1883a 	add	r16,r16,r22
 2002874:	8585803a 	cmpltu	r2,r16,r22
 2002878:	1705883a 	add	r2,r2,fp
 200287c:	14a5883a 	add	r18,r2,r18
 2002880:	8c7fff84 	addi	r17,r17,-2
 2002884:	003f1106 	br	20024cc <__divdf3+0x454>
 2002888:	b589883a 	add	r4,r22,r22
 200288c:	25ad803a 	cmpltu	r22,r4,r22
 2002890:	b739883a 	add	fp,r22,fp
 2002894:	40bfff84 	addi	r2,r8,-2
 2002898:	bf2f883a 	add	r23,r23,fp
 200289c:	202d883a 	mov	r22,r4
 20028a0:	003f9306 	br	20026f0 <__divdf3+0x678>
 20028a4:	013ff844 	movi	r4,-31
 20028a8:	2085c83a 	sub	r2,r4,r2
 20028ac:	8888d83a 	srl	r4,r17,r2
 20028b0:	00800804 	movi	r2,32
 20028b4:	18802126 	beq	r3,r2,200293c <__divdf3+0x8c4>
 20028b8:	00801004 	movi	r2,64
 20028bc:	10c5c83a 	sub	r2,r2,r3
 20028c0:	8884983a 	sll	r2,r17,r2
 20028c4:	1204b03a 	or	r2,r2,r8
 20028c8:	1004c03a 	cmpne	r2,r2,zero
 20028cc:	2084b03a 	or	r2,r4,r2
 20028d0:	144001cc 	andi	r17,r2,7
 20028d4:	88000d1e 	bne	r17,zero,200290c <__divdf3+0x894>
 20028d8:	000b883a 	mov	r5,zero
 20028dc:	1024d0fa 	srli	r18,r2,3
 20028e0:	98c0004c 	andi	r3,r19,1
 20028e4:	0005883a 	mov	r2,zero
 20028e8:	9464b03a 	or	r18,r18,r17
 20028ec:	003e4106 	br	20021f4 <__divdf3+0x17c>
 20028f0:	1007883a 	mov	r3,r2
 20028f4:	0023883a 	mov	r17,zero
 20028f8:	880a927a 	slli	r5,r17,9
 20028fc:	1805883a 	mov	r2,r3
 2002900:	8822977a 	slli	r17,r17,29
 2002904:	280ad33a 	srli	r5,r5,12
 2002908:	003ff406 	br	20028dc <__divdf3+0x864>
 200290c:	10c003cc 	andi	r3,r2,15
 2002910:	01000104 	movi	r4,4
 2002914:	193ff626 	beq	r3,r4,20028f0 <__divdf3+0x878>
 2002918:	0023883a 	mov	r17,zero
 200291c:	003fca06 	br	2002848 <__divdf3+0x7d0>
 2002920:	813fd336 	bltu	r16,r4,2002870 <__divdf3+0x7f8>
 2002924:	1023883a 	mov	r17,r2
 2002928:	003fa806 	br	20027cc <__divdf3+0x754>
 200292c:	b0ffd636 	bltu	r22,r3,2002888 <__divdf3+0x810>
 2002930:	1011883a 	mov	r8,r2
 2002934:	b0ff341e 	bne	r22,r3,2002608 <__divdf3+0x590>
 2002938:	003f3406 	br	200260c <__divdf3+0x594>
 200293c:	0005883a 	mov	r2,zero
 2002940:	003fe006 	br	20028c4 <__divdf3+0x84c>
 2002944:	00800434 	movhi	r2,16
 2002948:	89400234 	orhi	r5,r17,8
 200294c:	10bfffc4 	addi	r2,r2,-1
 2002950:	b807883a 	mov	r3,r23
 2002954:	288a703a 	and	r5,r5,r2
 2002958:	4025883a 	mov	r18,r8
 200295c:	003e8206 	br	2002368 <__divdf3+0x2f0>

02002960 <__eqdf2>:
 2002960:	2804d53a 	srli	r2,r5,20
 2002964:	3806d53a 	srli	r3,r7,20
 2002968:	02000434 	movhi	r8,16
 200296c:	423fffc4 	addi	r8,r8,-1
 2002970:	1081ffcc 	andi	r2,r2,2047
 2002974:	0281ffc4 	movi	r10,2047
 2002978:	2a12703a 	and	r9,r5,r8
 200297c:	18c1ffcc 	andi	r3,r3,2047
 2002980:	3a10703a 	and	r8,r7,r8
 2002984:	280ad7fa 	srli	r5,r5,31
 2002988:	380ed7fa 	srli	r7,r7,31
 200298c:	12801026 	beq	r2,r10,20029d0 <__eqdf2+0x70>
 2002990:	0281ffc4 	movi	r10,2047
 2002994:	1a800a26 	beq	r3,r10,20029c0 <__eqdf2+0x60>
 2002998:	10c00226 	beq	r2,r3,20029a4 <__eqdf2+0x44>
 200299c:	00800044 	movi	r2,1
 20029a0:	f800283a 	ret
 20029a4:	4a3ffd1e 	bne	r9,r8,200299c <__eqdf2+0x3c>
 20029a8:	21bffc1e 	bne	r4,r6,200299c <__eqdf2+0x3c>
 20029ac:	29c00c26 	beq	r5,r7,20029e0 <__eqdf2+0x80>
 20029b0:	103ffa1e 	bne	r2,zero,200299c <__eqdf2+0x3c>
 20029b4:	2244b03a 	or	r2,r4,r9
 20029b8:	1004c03a 	cmpne	r2,r2,zero
 20029bc:	f800283a 	ret
 20029c0:	3214b03a 	or	r10,r6,r8
 20029c4:	503ff426 	beq	r10,zero,2002998 <__eqdf2+0x38>
 20029c8:	00800044 	movi	r2,1
 20029cc:	f800283a 	ret
 20029d0:	2254b03a 	or	r10,r4,r9
 20029d4:	503fee26 	beq	r10,zero,2002990 <__eqdf2+0x30>
 20029d8:	00800044 	movi	r2,1
 20029dc:	f800283a 	ret
 20029e0:	0005883a 	mov	r2,zero
 20029e4:	f800283a 	ret

020029e8 <__gedf2>:
 20029e8:	2804d53a 	srli	r2,r5,20
 20029ec:	3806d53a 	srli	r3,r7,20
 20029f0:	02000434 	movhi	r8,16
 20029f4:	423fffc4 	addi	r8,r8,-1
 20029f8:	1081ffcc 	andi	r2,r2,2047
 20029fc:	0241ffc4 	movi	r9,2047
 2002a00:	2a14703a 	and	r10,r5,r8
 2002a04:	18c1ffcc 	andi	r3,r3,2047
 2002a08:	3a10703a 	and	r8,r7,r8
 2002a0c:	280ad7fa 	srli	r5,r5,31
 2002a10:	380ed7fa 	srli	r7,r7,31
 2002a14:	12401d26 	beq	r2,r9,2002a8c <__gedf2+0xa4>
 2002a18:	0241ffc4 	movi	r9,2047
 2002a1c:	1a401226 	beq	r3,r9,2002a68 <__gedf2+0x80>
 2002a20:	1000081e 	bne	r2,zero,2002a44 <__gedf2+0x5c>
 2002a24:	2296b03a 	or	r11,r4,r10
 2002a28:	5813003a 	cmpeq	r9,r11,zero
 2002a2c:	1800091e 	bne	r3,zero,2002a54 <__gedf2+0x6c>
 2002a30:	3218b03a 	or	r12,r6,r8
 2002a34:	6000071e 	bne	r12,zero,2002a54 <__gedf2+0x6c>
 2002a38:	0005883a 	mov	r2,zero
 2002a3c:	5800101e 	bne	r11,zero,2002a80 <__gedf2+0x98>
 2002a40:	f800283a 	ret
 2002a44:	18000c1e 	bne	r3,zero,2002a78 <__gedf2+0x90>
 2002a48:	3212b03a 	or	r9,r6,r8
 2002a4c:	48000c26 	beq	r9,zero,2002a80 <__gedf2+0x98>
 2002a50:	0013883a 	mov	r9,zero
 2002a54:	39c03fcc 	andi	r7,r7,255
 2002a58:	48000826 	beq	r9,zero,2002a7c <__gedf2+0x94>
 2002a5c:	38000926 	beq	r7,zero,2002a84 <__gedf2+0x9c>
 2002a60:	00800044 	movi	r2,1
 2002a64:	f800283a 	ret
 2002a68:	3212b03a 	or	r9,r6,r8
 2002a6c:	483fec26 	beq	r9,zero,2002a20 <__gedf2+0x38>
 2002a70:	00bfff84 	movi	r2,-2
 2002a74:	f800283a 	ret
 2002a78:	39c03fcc 	andi	r7,r7,255
 2002a7c:	29c00626 	beq	r5,r7,2002a98 <__gedf2+0xb0>
 2002a80:	283ff726 	beq	r5,zero,2002a60 <__gedf2+0x78>
 2002a84:	00bfffc4 	movi	r2,-1
 2002a88:	f800283a 	ret
 2002a8c:	2292b03a 	or	r9,r4,r10
 2002a90:	483fe126 	beq	r9,zero,2002a18 <__gedf2+0x30>
 2002a94:	003ff606 	br	2002a70 <__gedf2+0x88>
 2002a98:	18bff916 	blt	r3,r2,2002a80 <__gedf2+0x98>
 2002a9c:	10c00316 	blt	r2,r3,2002aac <__gedf2+0xc4>
 2002aa0:	42bff736 	bltu	r8,r10,2002a80 <__gedf2+0x98>
 2002aa4:	52000326 	beq	r10,r8,2002ab4 <__gedf2+0xcc>
 2002aa8:	5200042e 	bgeu	r10,r8,2002abc <__gedf2+0xd4>
 2002aac:	283fec1e 	bne	r5,zero,2002a60 <__gedf2+0x78>
 2002ab0:	003ff406 	br	2002a84 <__gedf2+0x9c>
 2002ab4:	313ff236 	bltu	r6,r4,2002a80 <__gedf2+0x98>
 2002ab8:	21bffc36 	bltu	r4,r6,2002aac <__gedf2+0xc4>
 2002abc:	0005883a 	mov	r2,zero
 2002ac0:	f800283a 	ret

02002ac4 <__ledf2>:
 2002ac4:	2804d53a 	srli	r2,r5,20
 2002ac8:	3810d53a 	srli	r8,r7,20
 2002acc:	00c00434 	movhi	r3,16
 2002ad0:	18ffffc4 	addi	r3,r3,-1
 2002ad4:	1081ffcc 	andi	r2,r2,2047
 2002ad8:	0241ffc4 	movi	r9,2047
 2002adc:	28d4703a 	and	r10,r5,r3
 2002ae0:	4201ffcc 	andi	r8,r8,2047
 2002ae4:	38c6703a 	and	r3,r7,r3
 2002ae8:	280ad7fa 	srli	r5,r5,31
 2002aec:	380ed7fa 	srli	r7,r7,31
 2002af0:	12401f26 	beq	r2,r9,2002b70 <__ledf2+0xac>
 2002af4:	0241ffc4 	movi	r9,2047
 2002af8:	42401426 	beq	r8,r9,2002b4c <__ledf2+0x88>
 2002afc:	1000091e 	bne	r2,zero,2002b24 <__ledf2+0x60>
 2002b00:	2296b03a 	or	r11,r4,r10
 2002b04:	5813003a 	cmpeq	r9,r11,zero
 2002b08:	29403fcc 	andi	r5,r5,255
 2002b0c:	40000a1e 	bne	r8,zero,2002b38 <__ledf2+0x74>
 2002b10:	30d8b03a 	or	r12,r6,r3
 2002b14:	6000081e 	bne	r12,zero,2002b38 <__ledf2+0x74>
 2002b18:	0005883a 	mov	r2,zero
 2002b1c:	5800111e 	bne	r11,zero,2002b64 <__ledf2+0xa0>
 2002b20:	f800283a 	ret
 2002b24:	29403fcc 	andi	r5,r5,255
 2002b28:	40000c1e 	bne	r8,zero,2002b5c <__ledf2+0x98>
 2002b2c:	30d2b03a 	or	r9,r6,r3
 2002b30:	48000c26 	beq	r9,zero,2002b64 <__ledf2+0xa0>
 2002b34:	0013883a 	mov	r9,zero
 2002b38:	39c03fcc 	andi	r7,r7,255
 2002b3c:	48000826 	beq	r9,zero,2002b60 <__ledf2+0x9c>
 2002b40:	38001126 	beq	r7,zero,2002b88 <__ledf2+0xc4>
 2002b44:	00800044 	movi	r2,1
 2002b48:	f800283a 	ret
 2002b4c:	30d2b03a 	or	r9,r6,r3
 2002b50:	483fea26 	beq	r9,zero,2002afc <__ledf2+0x38>
 2002b54:	00800084 	movi	r2,2
 2002b58:	f800283a 	ret
 2002b5c:	39c03fcc 	andi	r7,r7,255
 2002b60:	39400726 	beq	r7,r5,2002b80 <__ledf2+0xbc>
 2002b64:	2800081e 	bne	r5,zero,2002b88 <__ledf2+0xc4>
 2002b68:	00800044 	movi	r2,1
 2002b6c:	f800283a 	ret
 2002b70:	2292b03a 	or	r9,r4,r10
 2002b74:	483fdf26 	beq	r9,zero,2002af4 <__ledf2+0x30>
 2002b78:	00800084 	movi	r2,2
 2002b7c:	f800283a 	ret
 2002b80:	4080030e 	bge	r8,r2,2002b90 <__ledf2+0xcc>
 2002b84:	383fef26 	beq	r7,zero,2002b44 <__ledf2+0x80>
 2002b88:	00bfffc4 	movi	r2,-1
 2002b8c:	f800283a 	ret
 2002b90:	123feb16 	blt	r2,r8,2002b40 <__ledf2+0x7c>
 2002b94:	1abff336 	bltu	r3,r10,2002b64 <__ledf2+0xa0>
 2002b98:	50c00326 	beq	r10,r3,2002ba8 <__ledf2+0xe4>
 2002b9c:	50c0042e 	bgeu	r10,r3,2002bb0 <__ledf2+0xec>
 2002ba0:	283fe81e 	bne	r5,zero,2002b44 <__ledf2+0x80>
 2002ba4:	003ff806 	br	2002b88 <__ledf2+0xc4>
 2002ba8:	313fee36 	bltu	r6,r4,2002b64 <__ledf2+0xa0>
 2002bac:	21bffc36 	bltu	r4,r6,2002ba0 <__ledf2+0xdc>
 2002bb0:	0005883a 	mov	r2,zero
 2002bb4:	f800283a 	ret

02002bb8 <__muldf3>:
 2002bb8:	defff304 	addi	sp,sp,-52
 2002bbc:	2804d53a 	srli	r2,r5,20
 2002bc0:	dd800915 	stw	r22,36(sp)
 2002bc4:	282cd7fa 	srli	r22,r5,31
 2002bc8:	dc000315 	stw	r16,12(sp)
 2002bcc:	04000434 	movhi	r16,16
 2002bd0:	dd400815 	stw	r21,32(sp)
 2002bd4:	dc800515 	stw	r18,20(sp)
 2002bd8:	843fffc4 	addi	r16,r16,-1
 2002bdc:	dfc00c15 	stw	ra,48(sp)
 2002be0:	df000b15 	stw	fp,44(sp)
 2002be4:	ddc00a15 	stw	r23,40(sp)
 2002be8:	dd000715 	stw	r20,28(sp)
 2002bec:	dcc00615 	stw	r19,24(sp)
 2002bf0:	dc400415 	stw	r17,16(sp)
 2002bf4:	1481ffcc 	andi	r18,r2,2047
 2002bf8:	2c20703a 	and	r16,r5,r16
 2002bfc:	b02b883a 	mov	r21,r22
 2002c00:	b2403fcc 	andi	r9,r22,255
 2002c04:	90006026 	beq	r18,zero,2002d88 <__muldf3+0x1d0>
 2002c08:	0081ffc4 	movi	r2,2047
 2002c0c:	2029883a 	mov	r20,r4
 2002c10:	90803626 	beq	r18,r2,2002cec <__muldf3+0x134>
 2002c14:	80800434 	orhi	r2,r16,16
 2002c18:	100490fa 	slli	r2,r2,3
 2002c1c:	2020d77a 	srli	r16,r4,29
 2002c20:	202890fa 	slli	r20,r4,3
 2002c24:	94bf0044 	addi	r18,r18,-1023
 2002c28:	80a0b03a 	or	r16,r16,r2
 2002c2c:	0027883a 	mov	r19,zero
 2002c30:	0039883a 	mov	fp,zero
 2002c34:	3804d53a 	srli	r2,r7,20
 2002c38:	382ed7fa 	srli	r23,r7,31
 2002c3c:	04400434 	movhi	r17,16
 2002c40:	8c7fffc4 	addi	r17,r17,-1
 2002c44:	1081ffcc 	andi	r2,r2,2047
 2002c48:	3011883a 	mov	r8,r6
 2002c4c:	3c62703a 	and	r17,r7,r17
 2002c50:	ba803fcc 	andi	r10,r23,255
 2002c54:	10006d26 	beq	r2,zero,2002e0c <__muldf3+0x254>
 2002c58:	00c1ffc4 	movi	r3,2047
 2002c5c:	10c06526 	beq	r2,r3,2002df4 <__muldf3+0x23c>
 2002c60:	88c00434 	orhi	r3,r17,16
 2002c64:	180690fa 	slli	r3,r3,3
 2002c68:	3022d77a 	srli	r17,r6,29
 2002c6c:	301090fa 	slli	r8,r6,3
 2002c70:	10bf0044 	addi	r2,r2,-1023
 2002c74:	88e2b03a 	or	r17,r17,r3
 2002c78:	000b883a 	mov	r5,zero
 2002c7c:	9085883a 	add	r2,r18,r2
 2002c80:	2cc8b03a 	or	r4,r5,r19
 2002c84:	00c003c4 	movi	r3,15
 2002c88:	bdacf03a 	xor	r22,r23,r22
 2002c8c:	12c00044 	addi	r11,r2,1
 2002c90:	19009936 	bltu	r3,r4,2002ef8 <__muldf3+0x340>
 2002c94:	200890ba 	slli	r4,r4,2
 2002c98:	00c08034 	movhi	r3,512
 2002c9c:	18cb2b04 	addi	r3,r3,11436
 2002ca0:	20c9883a 	add	r4,r4,r3
 2002ca4:	20c00017 	ldw	r3,0(r4)
 2002ca8:	1800683a 	jmp	r3
 2002cac:	02002ef8 	rdprs	r8,zero,187
 2002cb0:	02002d0c 	andi	r8,zero,180
 2002cb4:	02002d0c 	andi	r8,zero,180
 2002cb8:	02002d08 	cmpgei	r8,zero,180
 2002cbc:	02002ed4 	movui	r8,187
 2002cc0:	02002ed4 	movui	r8,187
 2002cc4:	02002ebc 	xorhi	r8,zero,186
 2002cc8:	02002d08 	cmpgei	r8,zero,180
 2002ccc:	02002ed4 	movui	r8,187
 2002cd0:	02002ebc 	xorhi	r8,zero,186
 2002cd4:	02002ed4 	movui	r8,187
 2002cd8:	02002d08 	cmpgei	r8,zero,180
 2002cdc:	02002ee4 	muli	r8,zero,187
 2002ce0:	02002ee4 	muli	r8,zero,187
 2002ce4:	02002ee4 	muli	r8,zero,187
 2002ce8:	02003100 	call	200310 <__alt_mem_mem_Nios_PI+0x310>
 2002cec:	2404b03a 	or	r2,r4,r16
 2002cf0:	10006f1e 	bne	r2,zero,2002eb0 <__muldf3+0x2f8>
 2002cf4:	04c00204 	movi	r19,8
 2002cf8:	0021883a 	mov	r16,zero
 2002cfc:	0029883a 	mov	r20,zero
 2002d00:	07000084 	movi	fp,2
 2002d04:	003fcb06 	br	2002c34 <__muldf3+0x7c>
 2002d08:	502d883a 	mov	r22,r10
 2002d0c:	00800084 	movi	r2,2
 2002d10:	28805726 	beq	r5,r2,2002e70 <__muldf3+0x2b8>
 2002d14:	008000c4 	movi	r2,3
 2002d18:	28816626 	beq	r5,r2,20032b4 <__muldf3+0x6fc>
 2002d1c:	00800044 	movi	r2,1
 2002d20:	2881411e 	bne	r5,r2,2003228 <__muldf3+0x670>
 2002d24:	b02b883a 	mov	r21,r22
 2002d28:	0005883a 	mov	r2,zero
 2002d2c:	000b883a 	mov	r5,zero
 2002d30:	0029883a 	mov	r20,zero
 2002d34:	1004953a 	slli	r2,r2,20
 2002d38:	a8c03fcc 	andi	r3,r21,255
 2002d3c:	04400434 	movhi	r17,16
 2002d40:	8c7fffc4 	addi	r17,r17,-1
 2002d44:	180697fa 	slli	r3,r3,31
 2002d48:	2c4a703a 	and	r5,r5,r17
 2002d4c:	288ab03a 	or	r5,r5,r2
 2002d50:	28c6b03a 	or	r3,r5,r3
 2002d54:	a005883a 	mov	r2,r20
 2002d58:	dfc00c17 	ldw	ra,48(sp)
 2002d5c:	df000b17 	ldw	fp,44(sp)
 2002d60:	ddc00a17 	ldw	r23,40(sp)
 2002d64:	dd800917 	ldw	r22,36(sp)
 2002d68:	dd400817 	ldw	r21,32(sp)
 2002d6c:	dd000717 	ldw	r20,28(sp)
 2002d70:	dcc00617 	ldw	r19,24(sp)
 2002d74:	dc800517 	ldw	r18,20(sp)
 2002d78:	dc400417 	ldw	r17,16(sp)
 2002d7c:	dc000317 	ldw	r16,12(sp)
 2002d80:	dec00d04 	addi	sp,sp,52
 2002d84:	f800283a 	ret
 2002d88:	2404b03a 	or	r2,r4,r16
 2002d8c:	2027883a 	mov	r19,r4
 2002d90:	10004226 	beq	r2,zero,2002e9c <__muldf3+0x2e4>
 2002d94:	8000fc26 	beq	r16,zero,2003188 <__muldf3+0x5d0>
 2002d98:	8009883a 	mov	r4,r16
 2002d9c:	d9800215 	stw	r6,8(sp)
 2002da0:	d9c00015 	stw	r7,0(sp)
 2002da4:	da400115 	stw	r9,4(sp)
 2002da8:	2003d280 	call	2003d28 <__clzsi2>
 2002dac:	d9800217 	ldw	r6,8(sp)
 2002db0:	d9c00017 	ldw	r7,0(sp)
 2002db4:	da400117 	ldw	r9,4(sp)
 2002db8:	113ffd44 	addi	r4,r2,-11
 2002dbc:	00c00704 	movi	r3,28
 2002dc0:	1900ed16 	blt	r3,r4,2003178 <__muldf3+0x5c0>
 2002dc4:	00c00744 	movi	r3,29
 2002dc8:	147ffe04 	addi	r17,r2,-8
 2002dcc:	1907c83a 	sub	r3,r3,r4
 2002dd0:	8460983a 	sll	r16,r16,r17
 2002dd4:	98c6d83a 	srl	r3,r19,r3
 2002dd8:	9c68983a 	sll	r20,r19,r17
 2002ddc:	1c20b03a 	or	r16,r3,r16
 2002de0:	1080fcc4 	addi	r2,r2,1011
 2002de4:	00a5c83a 	sub	r18,zero,r2
 2002de8:	0027883a 	mov	r19,zero
 2002dec:	0039883a 	mov	fp,zero
 2002df0:	003f9006 	br	2002c34 <__muldf3+0x7c>
 2002df4:	3446b03a 	or	r3,r6,r17
 2002df8:	1800261e 	bne	r3,zero,2002e94 <__muldf3+0x2dc>
 2002dfc:	0023883a 	mov	r17,zero
 2002e00:	0011883a 	mov	r8,zero
 2002e04:	01400084 	movi	r5,2
 2002e08:	003f9c06 	br	2002c7c <__muldf3+0xc4>
 2002e0c:	3446b03a 	or	r3,r6,r17
 2002e10:	18001c26 	beq	r3,zero,2002e84 <__muldf3+0x2cc>
 2002e14:	8800ce26 	beq	r17,zero,2003150 <__muldf3+0x598>
 2002e18:	8809883a 	mov	r4,r17
 2002e1c:	d9800215 	stw	r6,8(sp)
 2002e20:	da400115 	stw	r9,4(sp)
 2002e24:	da800015 	stw	r10,0(sp)
 2002e28:	2003d280 	call	2003d28 <__clzsi2>
 2002e2c:	d9800217 	ldw	r6,8(sp)
 2002e30:	da400117 	ldw	r9,4(sp)
 2002e34:	da800017 	ldw	r10,0(sp)
 2002e38:	113ffd44 	addi	r4,r2,-11
 2002e3c:	00c00704 	movi	r3,28
 2002e40:	1900bf16 	blt	r3,r4,2003140 <__muldf3+0x588>
 2002e44:	00c00744 	movi	r3,29
 2002e48:	123ffe04 	addi	r8,r2,-8
 2002e4c:	1907c83a 	sub	r3,r3,r4
 2002e50:	8a22983a 	sll	r17,r17,r8
 2002e54:	30c6d83a 	srl	r3,r6,r3
 2002e58:	3210983a 	sll	r8,r6,r8
 2002e5c:	1c62b03a 	or	r17,r3,r17
 2002e60:	1080fcc4 	addi	r2,r2,1011
 2002e64:	0085c83a 	sub	r2,zero,r2
 2002e68:	000b883a 	mov	r5,zero
 2002e6c:	003f8306 	br	2002c7c <__muldf3+0xc4>
 2002e70:	b02b883a 	mov	r21,r22
 2002e74:	0081ffc4 	movi	r2,2047
 2002e78:	000b883a 	mov	r5,zero
 2002e7c:	0029883a 	mov	r20,zero
 2002e80:	003fac06 	br	2002d34 <__muldf3+0x17c>
 2002e84:	0023883a 	mov	r17,zero
 2002e88:	0011883a 	mov	r8,zero
 2002e8c:	01400044 	movi	r5,1
 2002e90:	003f7a06 	br	2002c7c <__muldf3+0xc4>
 2002e94:	014000c4 	movi	r5,3
 2002e98:	003f7806 	br	2002c7c <__muldf3+0xc4>
 2002e9c:	04c00104 	movi	r19,4
 2002ea0:	0021883a 	mov	r16,zero
 2002ea4:	0029883a 	mov	r20,zero
 2002ea8:	07000044 	movi	fp,1
 2002eac:	003f6106 	br	2002c34 <__muldf3+0x7c>
 2002eb0:	04c00304 	movi	r19,12
 2002eb4:	070000c4 	movi	fp,3
 2002eb8:	003f5e06 	br	2002c34 <__muldf3+0x7c>
 2002ebc:	01400434 	movhi	r5,16
 2002ec0:	002b883a 	mov	r21,zero
 2002ec4:	297fffc4 	addi	r5,r5,-1
 2002ec8:	053fffc4 	movi	r20,-1
 2002ecc:	0081ffc4 	movi	r2,2047
 2002ed0:	003f9806 	br	2002d34 <__muldf3+0x17c>
 2002ed4:	8023883a 	mov	r17,r16
 2002ed8:	a011883a 	mov	r8,r20
 2002edc:	e00b883a 	mov	r5,fp
 2002ee0:	003f8a06 	br	2002d0c <__muldf3+0x154>
 2002ee4:	8023883a 	mov	r17,r16
 2002ee8:	a011883a 	mov	r8,r20
 2002eec:	482d883a 	mov	r22,r9
 2002ef0:	e00b883a 	mov	r5,fp
 2002ef4:	003f8506 	br	2002d0c <__muldf3+0x154>
 2002ef8:	a00ad43a 	srli	r5,r20,16
 2002efc:	401ad43a 	srli	r13,r8,16
 2002f00:	a53fffcc 	andi	r20,r20,65535
 2002f04:	423fffcc 	andi	r8,r8,65535
 2002f08:	4519383a 	mul	r12,r8,r20
 2002f0c:	4147383a 	mul	r3,r8,r5
 2002f10:	6d09383a 	mul	r4,r13,r20
 2002f14:	600cd43a 	srli	r6,r12,16
 2002f18:	2b5d383a 	mul	r14,r5,r13
 2002f1c:	20c9883a 	add	r4,r4,r3
 2002f20:	310d883a 	add	r6,r6,r4
 2002f24:	30c0022e 	bgeu	r6,r3,2002f30 <__muldf3+0x378>
 2002f28:	00c00074 	movhi	r3,1
 2002f2c:	70dd883a 	add	r14,r14,r3
 2002f30:	8826d43a 	srli	r19,r17,16
 2002f34:	8bffffcc 	andi	r15,r17,65535
 2002f38:	7d23383a 	mul	r17,r15,r20
 2002f3c:	7949383a 	mul	r4,r15,r5
 2002f40:	9d29383a 	mul	r20,r19,r20
 2002f44:	8814d43a 	srli	r10,r17,16
 2002f48:	3012943a 	slli	r9,r6,16
 2002f4c:	a129883a 	add	r20,r20,r4
 2002f50:	633fffcc 	andi	r12,r12,65535
 2002f54:	5515883a 	add	r10,r10,r20
 2002f58:	3006d43a 	srli	r3,r6,16
 2002f5c:	4b13883a 	add	r9,r9,r12
 2002f60:	2ccb383a 	mul	r5,r5,r19
 2002f64:	5100022e 	bgeu	r10,r4,2002f70 <__muldf3+0x3b8>
 2002f68:	01000074 	movhi	r4,1
 2002f6c:	290b883a 	add	r5,r5,r4
 2002f70:	802ad43a 	srli	r21,r16,16
 2002f74:	843fffcc 	andi	r16,r16,65535
 2002f78:	440d383a 	mul	r6,r8,r16
 2002f7c:	4565383a 	mul	r18,r8,r21
 2002f80:	8349383a 	mul	r4,r16,r13
 2002f84:	500e943a 	slli	r7,r10,16
 2002f88:	3010d43a 	srli	r8,r6,16
 2002f8c:	5028d43a 	srli	r20,r10,16
 2002f90:	2489883a 	add	r4,r4,r18
 2002f94:	8abfffcc 	andi	r10,r17,65535
 2002f98:	3a95883a 	add	r10,r7,r10
 2002f9c:	4119883a 	add	r12,r8,r4
 2002fa0:	a169883a 	add	r20,r20,r5
 2002fa4:	1a87883a 	add	r3,r3,r10
 2002fa8:	6d5b383a 	mul	r13,r13,r21
 2002fac:	6480022e 	bgeu	r12,r18,2002fb8 <__muldf3+0x400>
 2002fb0:	01000074 	movhi	r4,1
 2002fb4:	691b883a 	add	r13,r13,r4
 2002fb8:	7c25383a 	mul	r18,r15,r16
 2002fbc:	7d4b383a 	mul	r5,r15,r21
 2002fc0:	84cf383a 	mul	r7,r16,r19
 2002fc4:	901ed43a 	srli	r15,r18,16
 2002fc8:	6008d43a 	srli	r4,r12,16
 2002fcc:	6010943a 	slli	r8,r12,16
 2002fd0:	394f883a 	add	r7,r7,r5
 2002fd4:	333fffcc 	andi	r12,r6,65535
 2002fd8:	79df883a 	add	r15,r15,r7
 2002fdc:	235b883a 	add	r13,r4,r13
 2002fe0:	9d63383a 	mul	r17,r19,r21
 2002fe4:	4309883a 	add	r4,r8,r12
 2002fe8:	7940022e 	bgeu	r15,r5,2002ff4 <__muldf3+0x43c>
 2002fec:	01400074 	movhi	r5,1
 2002ff0:	8963883a 	add	r17,r17,r5
 2002ff4:	780a943a 	slli	r5,r15,16
 2002ff8:	91bfffcc 	andi	r6,r18,65535
 2002ffc:	70c7883a 	add	r3,r14,r3
 2003000:	298d883a 	add	r6,r5,r6
 2003004:	1a8f803a 	cmpltu	r7,r3,r10
 2003008:	350b883a 	add	r5,r6,r20
 200300c:	20c7883a 	add	r3,r4,r3
 2003010:	3955883a 	add	r10,r7,r5
 2003014:	1909803a 	cmpltu	r4,r3,r4
 2003018:	6a91883a 	add	r8,r13,r10
 200301c:	780cd43a 	srli	r6,r15,16
 2003020:	2219883a 	add	r12,r4,r8
 2003024:	2d0b803a 	cmpltu	r5,r5,r20
 2003028:	51cf803a 	cmpltu	r7,r10,r7
 200302c:	29ceb03a 	or	r7,r5,r7
 2003030:	4351803a 	cmpltu	r8,r8,r13
 2003034:	610b803a 	cmpltu	r5,r12,r4
 2003038:	4148b03a 	or	r4,r8,r5
 200303c:	398f883a 	add	r7,r7,r6
 2003040:	3909883a 	add	r4,r7,r4
 2003044:	1810927a 	slli	r8,r3,9
 2003048:	2449883a 	add	r4,r4,r17
 200304c:	2008927a 	slli	r4,r4,9
 2003050:	6022d5fa 	srli	r17,r12,23
 2003054:	1806d5fa 	srli	r3,r3,23
 2003058:	4252b03a 	or	r9,r8,r9
 200305c:	600a927a 	slli	r5,r12,9
 2003060:	4810c03a 	cmpne	r8,r9,zero
 2003064:	2462b03a 	or	r17,r4,r17
 2003068:	40c6b03a 	or	r3,r8,r3
 200306c:	8900402c 	andhi	r4,r17,256
 2003070:	1950b03a 	or	r8,r3,r5
 2003074:	20000726 	beq	r4,zero,2003094 <__muldf3+0x4dc>
 2003078:	4006d07a 	srli	r3,r8,1
 200307c:	880497fa 	slli	r2,r17,31
 2003080:	4200004c 	andi	r8,r8,1
 2003084:	8822d07a 	srli	r17,r17,1
 2003088:	1a10b03a 	or	r8,r3,r8
 200308c:	1210b03a 	or	r8,r2,r8
 2003090:	5805883a 	mov	r2,r11
 2003094:	1140ffc4 	addi	r5,r2,1023
 2003098:	0140440e 	bge	zero,r5,20031ac <__muldf3+0x5f4>
 200309c:	40c001cc 	andi	r3,r8,7
 20030a0:	18000726 	beq	r3,zero,20030c0 <__muldf3+0x508>
 20030a4:	40c003cc 	andi	r3,r8,15
 20030a8:	01000104 	movi	r4,4
 20030ac:	19000426 	beq	r3,r4,20030c0 <__muldf3+0x508>
 20030b0:	4107883a 	add	r3,r8,r4
 20030b4:	1a11803a 	cmpltu	r8,r3,r8
 20030b8:	8a23883a 	add	r17,r17,r8
 20030bc:	1811883a 	mov	r8,r3
 20030c0:	88c0402c 	andhi	r3,r17,256
 20030c4:	18000426 	beq	r3,zero,20030d8 <__muldf3+0x520>
 20030c8:	11410004 	addi	r5,r2,1024
 20030cc:	00bfc034 	movhi	r2,65280
 20030d0:	10bfffc4 	addi	r2,r2,-1
 20030d4:	88a2703a 	and	r17,r17,r2
 20030d8:	0081ff84 	movi	r2,2046
 20030dc:	117f6416 	blt	r2,r5,2002e70 <__muldf3+0x2b8>
 20030e0:	8828977a 	slli	r20,r17,29
 20030e4:	4010d0fa 	srli	r8,r8,3
 20030e8:	8822927a 	slli	r17,r17,9
 20030ec:	2881ffcc 	andi	r2,r5,2047
 20030f0:	a228b03a 	or	r20,r20,r8
 20030f4:	880ad33a 	srli	r5,r17,12
 20030f8:	b02b883a 	mov	r21,r22
 20030fc:	003f0d06 	br	2002d34 <__muldf3+0x17c>
 2003100:	8080022c 	andhi	r2,r16,8
 2003104:	10000926 	beq	r2,zero,200312c <__muldf3+0x574>
 2003108:	8880022c 	andhi	r2,r17,8
 200310c:	1000071e 	bne	r2,zero,200312c <__muldf3+0x574>
 2003110:	00800434 	movhi	r2,16
 2003114:	89400234 	orhi	r5,r17,8
 2003118:	10bfffc4 	addi	r2,r2,-1
 200311c:	b82b883a 	mov	r21,r23
 2003120:	288a703a 	and	r5,r5,r2
 2003124:	4029883a 	mov	r20,r8
 2003128:	003f6806 	br	2002ecc <__muldf3+0x314>
 200312c:	00800434 	movhi	r2,16
 2003130:	81400234 	orhi	r5,r16,8
 2003134:	10bfffc4 	addi	r2,r2,-1
 2003138:	288a703a 	and	r5,r5,r2
 200313c:	003f6306 	br	2002ecc <__muldf3+0x314>
 2003140:	147ff604 	addi	r17,r2,-40
 2003144:	3462983a 	sll	r17,r6,r17
 2003148:	0011883a 	mov	r8,zero
 200314c:	003f4406 	br	2002e60 <__muldf3+0x2a8>
 2003150:	3009883a 	mov	r4,r6
 2003154:	d9800215 	stw	r6,8(sp)
 2003158:	da400115 	stw	r9,4(sp)
 200315c:	da800015 	stw	r10,0(sp)
 2003160:	2003d280 	call	2003d28 <__clzsi2>
 2003164:	10800804 	addi	r2,r2,32
 2003168:	da800017 	ldw	r10,0(sp)
 200316c:	da400117 	ldw	r9,4(sp)
 2003170:	d9800217 	ldw	r6,8(sp)
 2003174:	003f3006 	br	2002e38 <__muldf3+0x280>
 2003178:	143ff604 	addi	r16,r2,-40
 200317c:	9c20983a 	sll	r16,r19,r16
 2003180:	0029883a 	mov	r20,zero
 2003184:	003f1606 	br	2002de0 <__muldf3+0x228>
 2003188:	d9800215 	stw	r6,8(sp)
 200318c:	d9c00015 	stw	r7,0(sp)
 2003190:	da400115 	stw	r9,4(sp)
 2003194:	2003d280 	call	2003d28 <__clzsi2>
 2003198:	10800804 	addi	r2,r2,32
 200319c:	da400117 	ldw	r9,4(sp)
 20031a0:	d9c00017 	ldw	r7,0(sp)
 20031a4:	d9800217 	ldw	r6,8(sp)
 20031a8:	003f0306 	br	2002db8 <__muldf3+0x200>
 20031ac:	00c00044 	movi	r3,1
 20031b0:	1947c83a 	sub	r3,r3,r5
 20031b4:	00800e04 	movi	r2,56
 20031b8:	10feda16 	blt	r2,r3,2002d24 <__muldf3+0x16c>
 20031bc:	008007c4 	movi	r2,31
 20031c0:	10c01b16 	blt	r2,r3,2003230 <__muldf3+0x678>
 20031c4:	00800804 	movi	r2,32
 20031c8:	10c5c83a 	sub	r2,r2,r3
 20031cc:	888a983a 	sll	r5,r17,r2
 20031d0:	40c8d83a 	srl	r4,r8,r3
 20031d4:	4084983a 	sll	r2,r8,r2
 20031d8:	88e2d83a 	srl	r17,r17,r3
 20031dc:	2906b03a 	or	r3,r5,r4
 20031e0:	1004c03a 	cmpne	r2,r2,zero
 20031e4:	1886b03a 	or	r3,r3,r2
 20031e8:	188001cc 	andi	r2,r3,7
 20031ec:	10000726 	beq	r2,zero,200320c <__muldf3+0x654>
 20031f0:	188003cc 	andi	r2,r3,15
 20031f4:	01000104 	movi	r4,4
 20031f8:	11000426 	beq	r2,r4,200320c <__muldf3+0x654>
 20031fc:	1805883a 	mov	r2,r3
 2003200:	10c00104 	addi	r3,r2,4
 2003204:	1885803a 	cmpltu	r2,r3,r2
 2003208:	88a3883a 	add	r17,r17,r2
 200320c:	8880202c 	andhi	r2,r17,128
 2003210:	10001c26 	beq	r2,zero,2003284 <__muldf3+0x6cc>
 2003214:	b02b883a 	mov	r21,r22
 2003218:	00800044 	movi	r2,1
 200321c:	000b883a 	mov	r5,zero
 2003220:	0029883a 	mov	r20,zero
 2003224:	003ec306 	br	2002d34 <__muldf3+0x17c>
 2003228:	5805883a 	mov	r2,r11
 200322c:	003f9906 	br	2003094 <__muldf3+0x4dc>
 2003230:	00bff844 	movi	r2,-31
 2003234:	1145c83a 	sub	r2,r2,r5
 2003238:	8888d83a 	srl	r4,r17,r2
 200323c:	00800804 	movi	r2,32
 2003240:	18801a26 	beq	r3,r2,20032ac <__muldf3+0x6f4>
 2003244:	00801004 	movi	r2,64
 2003248:	10c5c83a 	sub	r2,r2,r3
 200324c:	8884983a 	sll	r2,r17,r2
 2003250:	1204b03a 	or	r2,r2,r8
 2003254:	1004c03a 	cmpne	r2,r2,zero
 2003258:	2084b03a 	or	r2,r4,r2
 200325c:	144001cc 	andi	r17,r2,7
 2003260:	88000d1e 	bne	r17,zero,2003298 <__muldf3+0x6e0>
 2003264:	000b883a 	mov	r5,zero
 2003268:	1028d0fa 	srli	r20,r2,3
 200326c:	b02b883a 	mov	r21,r22
 2003270:	0005883a 	mov	r2,zero
 2003274:	a468b03a 	or	r20,r20,r17
 2003278:	003eae06 	br	2002d34 <__muldf3+0x17c>
 200327c:	1007883a 	mov	r3,r2
 2003280:	0023883a 	mov	r17,zero
 2003284:	880a927a 	slli	r5,r17,9
 2003288:	1805883a 	mov	r2,r3
 200328c:	8822977a 	slli	r17,r17,29
 2003290:	280ad33a 	srli	r5,r5,12
 2003294:	003ff406 	br	2003268 <__muldf3+0x6b0>
 2003298:	10c003cc 	andi	r3,r2,15
 200329c:	01000104 	movi	r4,4
 20032a0:	193ff626 	beq	r3,r4,200327c <__muldf3+0x6c4>
 20032a4:	0023883a 	mov	r17,zero
 20032a8:	003fd506 	br	2003200 <__muldf3+0x648>
 20032ac:	0005883a 	mov	r2,zero
 20032b0:	003fe706 	br	2003250 <__muldf3+0x698>
 20032b4:	00800434 	movhi	r2,16
 20032b8:	89400234 	orhi	r5,r17,8
 20032bc:	10bfffc4 	addi	r2,r2,-1
 20032c0:	b02b883a 	mov	r21,r22
 20032c4:	288a703a 	and	r5,r5,r2
 20032c8:	4029883a 	mov	r20,r8
 20032cc:	003eff06 	br	2002ecc <__muldf3+0x314>

020032d0 <__subdf3>:
 20032d0:	02000434 	movhi	r8,16
 20032d4:	423fffc4 	addi	r8,r8,-1
 20032d8:	defffb04 	addi	sp,sp,-20
 20032dc:	2a14703a 	and	r10,r5,r8
 20032e0:	3812d53a 	srli	r9,r7,20
 20032e4:	3a10703a 	and	r8,r7,r8
 20032e8:	2006d77a 	srli	r3,r4,29
 20032ec:	3004d77a 	srli	r2,r6,29
 20032f0:	dc000015 	stw	r16,0(sp)
 20032f4:	501490fa 	slli	r10,r10,3
 20032f8:	2820d53a 	srli	r16,r5,20
 20032fc:	401090fa 	slli	r8,r8,3
 2003300:	dc800215 	stw	r18,8(sp)
 2003304:	dc400115 	stw	r17,4(sp)
 2003308:	dfc00415 	stw	ra,16(sp)
 200330c:	202290fa 	slli	r17,r4,3
 2003310:	dcc00315 	stw	r19,12(sp)
 2003314:	4a41ffcc 	andi	r9,r9,2047
 2003318:	0101ffc4 	movi	r4,2047
 200331c:	2824d7fa 	srli	r18,r5,31
 2003320:	8401ffcc 	andi	r16,r16,2047
 2003324:	50c6b03a 	or	r3,r10,r3
 2003328:	380ed7fa 	srli	r7,r7,31
 200332c:	408ab03a 	or	r5,r8,r2
 2003330:	300c90fa 	slli	r6,r6,3
 2003334:	49009626 	beq	r9,r4,2003590 <__subdf3+0x2c0>
 2003338:	39c0005c 	xori	r7,r7,1
 200333c:	8245c83a 	sub	r2,r16,r9
 2003340:	3c807426 	beq	r7,r18,2003514 <__subdf3+0x244>
 2003344:	0080af0e 	bge	zero,r2,2003604 <__subdf3+0x334>
 2003348:	48002a1e 	bne	r9,zero,20033f4 <__subdf3+0x124>
 200334c:	2988b03a 	or	r4,r5,r6
 2003350:	20009a1e 	bne	r4,zero,20035bc <__subdf3+0x2ec>
 2003354:	888001cc 	andi	r2,r17,7
 2003358:	10000726 	beq	r2,zero,2003378 <__subdf3+0xa8>
 200335c:	888003cc 	andi	r2,r17,15
 2003360:	01000104 	movi	r4,4
 2003364:	11000426 	beq	r2,r4,2003378 <__subdf3+0xa8>
 2003368:	890b883a 	add	r5,r17,r4
 200336c:	2c63803a 	cmpltu	r17,r5,r17
 2003370:	1c47883a 	add	r3,r3,r17
 2003374:	2823883a 	mov	r17,r5
 2003378:	1880202c 	andhi	r2,r3,128
 200337c:	10005926 	beq	r2,zero,20034e4 <__subdf3+0x214>
 2003380:	84000044 	addi	r16,r16,1
 2003384:	0081ffc4 	movi	r2,2047
 2003388:	8080be26 	beq	r16,r2,2003684 <__subdf3+0x3b4>
 200338c:	017fe034 	movhi	r5,65408
 2003390:	297fffc4 	addi	r5,r5,-1
 2003394:	1946703a 	and	r3,r3,r5
 2003398:	1804977a 	slli	r2,r3,29
 200339c:	1806927a 	slli	r3,r3,9
 20033a0:	8822d0fa 	srli	r17,r17,3
 20033a4:	8401ffcc 	andi	r16,r16,2047
 20033a8:	180ad33a 	srli	r5,r3,12
 20033ac:	9100004c 	andi	r4,r18,1
 20033b0:	1444b03a 	or	r2,r2,r17
 20033b4:	80c1ffcc 	andi	r3,r16,2047
 20033b8:	1820953a 	slli	r16,r3,20
 20033bc:	20c03fcc 	andi	r3,r4,255
 20033c0:	180897fa 	slli	r4,r3,31
 20033c4:	00c00434 	movhi	r3,16
 20033c8:	18ffffc4 	addi	r3,r3,-1
 20033cc:	28c6703a 	and	r3,r5,r3
 20033d0:	1c06b03a 	or	r3,r3,r16
 20033d4:	1906b03a 	or	r3,r3,r4
 20033d8:	dfc00417 	ldw	ra,16(sp)
 20033dc:	dcc00317 	ldw	r19,12(sp)
 20033e0:	dc800217 	ldw	r18,8(sp)
 20033e4:	dc400117 	ldw	r17,4(sp)
 20033e8:	dc000017 	ldw	r16,0(sp)
 20033ec:	dec00504 	addi	sp,sp,20
 20033f0:	f800283a 	ret
 20033f4:	0101ffc4 	movi	r4,2047
 20033f8:	813fd626 	beq	r16,r4,2003354 <__subdf3+0x84>
 20033fc:	29402034 	orhi	r5,r5,128
 2003400:	01000e04 	movi	r4,56
 2003404:	2080a316 	blt	r4,r2,2003694 <__subdf3+0x3c4>
 2003408:	010007c4 	movi	r4,31
 200340c:	2080c616 	blt	r4,r2,2003728 <__subdf3+0x458>
 2003410:	01000804 	movi	r4,32
 2003414:	2089c83a 	sub	r4,r4,r2
 2003418:	2910983a 	sll	r8,r5,r4
 200341c:	308ed83a 	srl	r7,r6,r2
 2003420:	3108983a 	sll	r4,r6,r4
 2003424:	2884d83a 	srl	r2,r5,r2
 2003428:	41ccb03a 	or	r6,r8,r7
 200342c:	2008c03a 	cmpne	r4,r4,zero
 2003430:	310cb03a 	or	r6,r6,r4
 2003434:	898dc83a 	sub	r6,r17,r6
 2003438:	89a3803a 	cmpltu	r17,r17,r6
 200343c:	1887c83a 	sub	r3,r3,r2
 2003440:	1c47c83a 	sub	r3,r3,r17
 2003444:	3023883a 	mov	r17,r6
 2003448:	1880202c 	andhi	r2,r3,128
 200344c:	10002326 	beq	r2,zero,20034dc <__subdf3+0x20c>
 2003450:	04c02034 	movhi	r19,128
 2003454:	9cffffc4 	addi	r19,r19,-1
 2003458:	1ce6703a 	and	r19,r3,r19
 200345c:	98007a26 	beq	r19,zero,2003648 <__subdf3+0x378>
 2003460:	9809883a 	mov	r4,r19
 2003464:	2003d280 	call	2003d28 <__clzsi2>
 2003468:	113ffe04 	addi	r4,r2,-8
 200346c:	00c007c4 	movi	r3,31
 2003470:	19007b16 	blt	r3,r4,2003660 <__subdf3+0x390>
 2003474:	00800804 	movi	r2,32
 2003478:	1105c83a 	sub	r2,r2,r4
 200347c:	8884d83a 	srl	r2,r17,r2
 2003480:	9906983a 	sll	r3,r19,r4
 2003484:	8922983a 	sll	r17,r17,r4
 2003488:	10c4b03a 	or	r2,r2,r3
 200348c:	24007816 	blt	r4,r16,2003670 <__subdf3+0x3a0>
 2003490:	2421c83a 	sub	r16,r4,r16
 2003494:	80c00044 	addi	r3,r16,1
 2003498:	010007c4 	movi	r4,31
 200349c:	20c09516 	blt	r4,r3,20036f4 <__subdf3+0x424>
 20034a0:	01400804 	movi	r5,32
 20034a4:	28cbc83a 	sub	r5,r5,r3
 20034a8:	88c8d83a 	srl	r4,r17,r3
 20034ac:	8962983a 	sll	r17,r17,r5
 20034b0:	114a983a 	sll	r5,r2,r5
 20034b4:	10c6d83a 	srl	r3,r2,r3
 20034b8:	8804c03a 	cmpne	r2,r17,zero
 20034bc:	290ab03a 	or	r5,r5,r4
 20034c0:	28a2b03a 	or	r17,r5,r2
 20034c4:	0021883a 	mov	r16,zero
 20034c8:	003fa206 	br	2003354 <__subdf3+0x84>
 20034cc:	2090b03a 	or	r8,r4,r2
 20034d0:	40018e26 	beq	r8,zero,2003b0c <__subdf3+0x83c>
 20034d4:	1007883a 	mov	r3,r2
 20034d8:	2023883a 	mov	r17,r4
 20034dc:	888001cc 	andi	r2,r17,7
 20034e0:	103f9e1e 	bne	r2,zero,200335c <__subdf3+0x8c>
 20034e4:	1804977a 	slli	r2,r3,29
 20034e8:	8822d0fa 	srli	r17,r17,3
 20034ec:	1810d0fa 	srli	r8,r3,3
 20034f0:	9100004c 	andi	r4,r18,1
 20034f4:	1444b03a 	or	r2,r2,r17
 20034f8:	00c1ffc4 	movi	r3,2047
 20034fc:	80c02826 	beq	r16,r3,20035a0 <__subdf3+0x2d0>
 2003500:	01400434 	movhi	r5,16
 2003504:	297fffc4 	addi	r5,r5,-1
 2003508:	80e0703a 	and	r16,r16,r3
 200350c:	414a703a 	and	r5,r8,r5
 2003510:	003fa806 	br	20033b4 <__subdf3+0xe4>
 2003514:	0080630e 	bge	zero,r2,20036a4 <__subdf3+0x3d4>
 2003518:	48003026 	beq	r9,zero,20035dc <__subdf3+0x30c>
 200351c:	0101ffc4 	movi	r4,2047
 2003520:	813f8c26 	beq	r16,r4,2003354 <__subdf3+0x84>
 2003524:	29402034 	orhi	r5,r5,128
 2003528:	01000e04 	movi	r4,56
 200352c:	2080a90e 	bge	r4,r2,20037d4 <__subdf3+0x504>
 2003530:	298cb03a 	or	r6,r5,r6
 2003534:	3012c03a 	cmpne	r9,r6,zero
 2003538:	0005883a 	mov	r2,zero
 200353c:	4c53883a 	add	r9,r9,r17
 2003540:	4c63803a 	cmpltu	r17,r9,r17
 2003544:	10c7883a 	add	r3,r2,r3
 2003548:	88c7883a 	add	r3,r17,r3
 200354c:	4823883a 	mov	r17,r9
 2003550:	1880202c 	andhi	r2,r3,128
 2003554:	1000d026 	beq	r2,zero,2003898 <__subdf3+0x5c8>
 2003558:	84000044 	addi	r16,r16,1
 200355c:	0081ffc4 	movi	r2,2047
 2003560:	8080fe26 	beq	r16,r2,200395c <__subdf3+0x68c>
 2003564:	00bfe034 	movhi	r2,65408
 2003568:	10bfffc4 	addi	r2,r2,-1
 200356c:	1886703a 	and	r3,r3,r2
 2003570:	880ad07a 	srli	r5,r17,1
 2003574:	180497fa 	slli	r2,r3,31
 2003578:	8900004c 	andi	r4,r17,1
 200357c:	2922b03a 	or	r17,r5,r4
 2003580:	1806d07a 	srli	r3,r3,1
 2003584:	1462b03a 	or	r17,r2,r17
 2003588:	3825883a 	mov	r18,r7
 200358c:	003f7106 	br	2003354 <__subdf3+0x84>
 2003590:	2984b03a 	or	r2,r5,r6
 2003594:	103f6826 	beq	r2,zero,2003338 <__subdf3+0x68>
 2003598:	39c03fcc 	andi	r7,r7,255
 200359c:	003f6706 	br	200333c <__subdf3+0x6c>
 20035a0:	4086b03a 	or	r3,r8,r2
 20035a4:	18015226 	beq	r3,zero,2003af0 <__subdf3+0x820>
 20035a8:	00c00434 	movhi	r3,16
 20035ac:	41400234 	orhi	r5,r8,8
 20035b0:	18ffffc4 	addi	r3,r3,-1
 20035b4:	28ca703a 	and	r5,r5,r3
 20035b8:	003f7e06 	br	20033b4 <__subdf3+0xe4>
 20035bc:	10bfffc4 	addi	r2,r2,-1
 20035c0:	1000491e 	bne	r2,zero,20036e8 <__subdf3+0x418>
 20035c4:	898fc83a 	sub	r7,r17,r6
 20035c8:	89e3803a 	cmpltu	r17,r17,r7
 20035cc:	1947c83a 	sub	r3,r3,r5
 20035d0:	1c47c83a 	sub	r3,r3,r17
 20035d4:	3823883a 	mov	r17,r7
 20035d8:	003f9b06 	br	2003448 <__subdf3+0x178>
 20035dc:	2988b03a 	or	r4,r5,r6
 20035e0:	203f5c26 	beq	r4,zero,2003354 <__subdf3+0x84>
 20035e4:	10bfffc4 	addi	r2,r2,-1
 20035e8:	1000931e 	bne	r2,zero,2003838 <__subdf3+0x568>
 20035ec:	898d883a 	add	r6,r17,r6
 20035f0:	3463803a 	cmpltu	r17,r6,r17
 20035f4:	1947883a 	add	r3,r3,r5
 20035f8:	88c7883a 	add	r3,r17,r3
 20035fc:	3023883a 	mov	r17,r6
 2003600:	003fd306 	br	2003550 <__subdf3+0x280>
 2003604:	1000541e 	bne	r2,zero,2003758 <__subdf3+0x488>
 2003608:	80800044 	addi	r2,r16,1
 200360c:	1081ffcc 	andi	r2,r2,2047
 2003610:	01000044 	movi	r4,1
 2003614:	2080a20e 	bge	r4,r2,20038a0 <__subdf3+0x5d0>
 2003618:	8989c83a 	sub	r4,r17,r6
 200361c:	8905803a 	cmpltu	r2,r17,r4
 2003620:	1967c83a 	sub	r19,r3,r5
 2003624:	98a7c83a 	sub	r19,r19,r2
 2003628:	9880202c 	andhi	r2,r19,128
 200362c:	10006326 	beq	r2,zero,20037bc <__subdf3+0x4ec>
 2003630:	3463c83a 	sub	r17,r6,r17
 2003634:	28c7c83a 	sub	r3,r5,r3
 2003638:	344d803a 	cmpltu	r6,r6,r17
 200363c:	19a7c83a 	sub	r19,r3,r6
 2003640:	3825883a 	mov	r18,r7
 2003644:	983f861e 	bne	r19,zero,2003460 <__subdf3+0x190>
 2003648:	8809883a 	mov	r4,r17
 200364c:	2003d280 	call	2003d28 <__clzsi2>
 2003650:	10800804 	addi	r2,r2,32
 2003654:	113ffe04 	addi	r4,r2,-8
 2003658:	00c007c4 	movi	r3,31
 200365c:	193f850e 	bge	r3,r4,2003474 <__subdf3+0x1a4>
 2003660:	10bff604 	addi	r2,r2,-40
 2003664:	8884983a 	sll	r2,r17,r2
 2003668:	0023883a 	mov	r17,zero
 200366c:	243f880e 	bge	r4,r16,2003490 <__subdf3+0x1c0>
 2003670:	00ffe034 	movhi	r3,65408
 2003674:	18ffffc4 	addi	r3,r3,-1
 2003678:	8121c83a 	sub	r16,r16,r4
 200367c:	10c6703a 	and	r3,r2,r3
 2003680:	003f3406 	br	2003354 <__subdf3+0x84>
 2003684:	9100004c 	andi	r4,r18,1
 2003688:	000b883a 	mov	r5,zero
 200368c:	0005883a 	mov	r2,zero
 2003690:	003f4806 	br	20033b4 <__subdf3+0xe4>
 2003694:	298cb03a 	or	r6,r5,r6
 2003698:	300cc03a 	cmpne	r6,r6,zero
 200369c:	0005883a 	mov	r2,zero
 20036a0:	003f6406 	br	2003434 <__subdf3+0x164>
 20036a4:	10009a1e 	bne	r2,zero,2003910 <__subdf3+0x640>
 20036a8:	82400044 	addi	r9,r16,1
 20036ac:	4881ffcc 	andi	r2,r9,2047
 20036b0:	02800044 	movi	r10,1
 20036b4:	5080670e 	bge	r10,r2,2003854 <__subdf3+0x584>
 20036b8:	0081ffc4 	movi	r2,2047
 20036bc:	4880af26 	beq	r9,r2,200397c <__subdf3+0x6ac>
 20036c0:	898d883a 	add	r6,r17,r6
 20036c4:	1945883a 	add	r2,r3,r5
 20036c8:	3447803a 	cmpltu	r3,r6,r17
 20036cc:	1887883a 	add	r3,r3,r2
 20036d0:	182297fa 	slli	r17,r3,31
 20036d4:	300cd07a 	srli	r6,r6,1
 20036d8:	1806d07a 	srli	r3,r3,1
 20036dc:	4821883a 	mov	r16,r9
 20036e0:	89a2b03a 	or	r17,r17,r6
 20036e4:	003f1b06 	br	2003354 <__subdf3+0x84>
 20036e8:	0101ffc4 	movi	r4,2047
 20036ec:	813f441e 	bne	r16,r4,2003400 <__subdf3+0x130>
 20036f0:	003f1806 	br	2003354 <__subdf3+0x84>
 20036f4:	843ff844 	addi	r16,r16,-31
 20036f8:	01400804 	movi	r5,32
 20036fc:	1408d83a 	srl	r4,r2,r16
 2003700:	19405026 	beq	r3,r5,2003844 <__subdf3+0x574>
 2003704:	01401004 	movi	r5,64
 2003708:	28c7c83a 	sub	r3,r5,r3
 200370c:	10c4983a 	sll	r2,r2,r3
 2003710:	88a2b03a 	or	r17,r17,r2
 2003714:	8822c03a 	cmpne	r17,r17,zero
 2003718:	2462b03a 	or	r17,r4,r17
 200371c:	0007883a 	mov	r3,zero
 2003720:	0021883a 	mov	r16,zero
 2003724:	003f6d06 	br	20034dc <__subdf3+0x20c>
 2003728:	11fff804 	addi	r7,r2,-32
 200372c:	01000804 	movi	r4,32
 2003730:	29ced83a 	srl	r7,r5,r7
 2003734:	11004526 	beq	r2,r4,200384c <__subdf3+0x57c>
 2003738:	01001004 	movi	r4,64
 200373c:	2089c83a 	sub	r4,r4,r2
 2003740:	2904983a 	sll	r2,r5,r4
 2003744:	118cb03a 	or	r6,r2,r6
 2003748:	300cc03a 	cmpne	r6,r6,zero
 200374c:	398cb03a 	or	r6,r7,r6
 2003750:	0005883a 	mov	r2,zero
 2003754:	003f3706 	br	2003434 <__subdf3+0x164>
 2003758:	80002a26 	beq	r16,zero,2003804 <__subdf3+0x534>
 200375c:	0101ffc4 	movi	r4,2047
 2003760:	49006626 	beq	r9,r4,20038fc <__subdf3+0x62c>
 2003764:	0085c83a 	sub	r2,zero,r2
 2003768:	18c02034 	orhi	r3,r3,128
 200376c:	01000e04 	movi	r4,56
 2003770:	20807e16 	blt	r4,r2,200396c <__subdf3+0x69c>
 2003774:	010007c4 	movi	r4,31
 2003778:	2080e716 	blt	r4,r2,2003b18 <__subdf3+0x848>
 200377c:	01000804 	movi	r4,32
 2003780:	2089c83a 	sub	r4,r4,r2
 2003784:	1914983a 	sll	r10,r3,r4
 2003788:	8890d83a 	srl	r8,r17,r2
 200378c:	8908983a 	sll	r4,r17,r4
 2003790:	1884d83a 	srl	r2,r3,r2
 2003794:	5222b03a 	or	r17,r10,r8
 2003798:	2006c03a 	cmpne	r3,r4,zero
 200379c:	88e2b03a 	or	r17,r17,r3
 20037a0:	3463c83a 	sub	r17,r6,r17
 20037a4:	2885c83a 	sub	r2,r5,r2
 20037a8:	344d803a 	cmpltu	r6,r6,r17
 20037ac:	1187c83a 	sub	r3,r2,r6
 20037b0:	4821883a 	mov	r16,r9
 20037b4:	3825883a 	mov	r18,r7
 20037b8:	003f2306 	br	2003448 <__subdf3+0x178>
 20037bc:	24d0b03a 	or	r8,r4,r19
 20037c0:	40001b1e 	bne	r8,zero,2003830 <__subdf3+0x560>
 20037c4:	0005883a 	mov	r2,zero
 20037c8:	0009883a 	mov	r4,zero
 20037cc:	0021883a 	mov	r16,zero
 20037d0:	003f4906 	br	20034f8 <__subdf3+0x228>
 20037d4:	010007c4 	movi	r4,31
 20037d8:	20803a16 	blt	r4,r2,20038c4 <__subdf3+0x5f4>
 20037dc:	01000804 	movi	r4,32
 20037e0:	2089c83a 	sub	r4,r4,r2
 20037e4:	2912983a 	sll	r9,r5,r4
 20037e8:	3090d83a 	srl	r8,r6,r2
 20037ec:	3108983a 	sll	r4,r6,r4
 20037f0:	2884d83a 	srl	r2,r5,r2
 20037f4:	4a12b03a 	or	r9,r9,r8
 20037f8:	2008c03a 	cmpne	r4,r4,zero
 20037fc:	4912b03a 	or	r9,r9,r4
 2003800:	003f4e06 	br	200353c <__subdf3+0x26c>
 2003804:	1c48b03a 	or	r4,r3,r17
 2003808:	20003c26 	beq	r4,zero,20038fc <__subdf3+0x62c>
 200380c:	0084303a 	nor	r2,zero,r2
 2003810:	1000381e 	bne	r2,zero,20038f4 <__subdf3+0x624>
 2003814:	3463c83a 	sub	r17,r6,r17
 2003818:	28c5c83a 	sub	r2,r5,r3
 200381c:	344d803a 	cmpltu	r6,r6,r17
 2003820:	1187c83a 	sub	r3,r2,r6
 2003824:	4821883a 	mov	r16,r9
 2003828:	3825883a 	mov	r18,r7
 200382c:	003f0606 	br	2003448 <__subdf3+0x178>
 2003830:	2023883a 	mov	r17,r4
 2003834:	003f0906 	br	200345c <__subdf3+0x18c>
 2003838:	0101ffc4 	movi	r4,2047
 200383c:	813f3a1e 	bne	r16,r4,2003528 <__subdf3+0x258>
 2003840:	003ec406 	br	2003354 <__subdf3+0x84>
 2003844:	0005883a 	mov	r2,zero
 2003848:	003fb106 	br	2003710 <__subdf3+0x440>
 200384c:	0005883a 	mov	r2,zero
 2003850:	003fbc06 	br	2003744 <__subdf3+0x474>
 2003854:	1c44b03a 	or	r2,r3,r17
 2003858:	80008e1e 	bne	r16,zero,2003a94 <__subdf3+0x7c4>
 200385c:	1000c826 	beq	r2,zero,2003b80 <__subdf3+0x8b0>
 2003860:	2984b03a 	or	r2,r5,r6
 2003864:	103ebb26 	beq	r2,zero,2003354 <__subdf3+0x84>
 2003868:	8989883a 	add	r4,r17,r6
 200386c:	1945883a 	add	r2,r3,r5
 2003870:	2447803a 	cmpltu	r3,r4,r17
 2003874:	1887883a 	add	r3,r3,r2
 2003878:	1880202c 	andhi	r2,r3,128
 200387c:	2023883a 	mov	r17,r4
 2003880:	103f1626 	beq	r2,zero,20034dc <__subdf3+0x20c>
 2003884:	00bfe034 	movhi	r2,65408
 2003888:	10bfffc4 	addi	r2,r2,-1
 200388c:	5021883a 	mov	r16,r10
 2003890:	1886703a 	and	r3,r3,r2
 2003894:	003eaf06 	br	2003354 <__subdf3+0x84>
 2003898:	3825883a 	mov	r18,r7
 200389c:	003f0f06 	br	20034dc <__subdf3+0x20c>
 20038a0:	1c44b03a 	or	r2,r3,r17
 20038a4:	8000251e 	bne	r16,zero,200393c <__subdf3+0x66c>
 20038a8:	1000661e 	bne	r2,zero,2003a44 <__subdf3+0x774>
 20038ac:	2990b03a 	or	r8,r5,r6
 20038b0:	40009626 	beq	r8,zero,2003b0c <__subdf3+0x83c>
 20038b4:	2807883a 	mov	r3,r5
 20038b8:	3023883a 	mov	r17,r6
 20038bc:	3825883a 	mov	r18,r7
 20038c0:	003ea406 	br	2003354 <__subdf3+0x84>
 20038c4:	127ff804 	addi	r9,r2,-32
 20038c8:	01000804 	movi	r4,32
 20038cc:	2a52d83a 	srl	r9,r5,r9
 20038d0:	11008c26 	beq	r2,r4,2003b04 <__subdf3+0x834>
 20038d4:	01001004 	movi	r4,64
 20038d8:	2085c83a 	sub	r2,r4,r2
 20038dc:	2884983a 	sll	r2,r5,r2
 20038e0:	118cb03a 	or	r6,r2,r6
 20038e4:	300cc03a 	cmpne	r6,r6,zero
 20038e8:	4992b03a 	or	r9,r9,r6
 20038ec:	0005883a 	mov	r2,zero
 20038f0:	003f1206 	br	200353c <__subdf3+0x26c>
 20038f4:	0101ffc4 	movi	r4,2047
 20038f8:	493f9c1e 	bne	r9,r4,200376c <__subdf3+0x49c>
 20038fc:	2807883a 	mov	r3,r5
 2003900:	3023883a 	mov	r17,r6
 2003904:	4821883a 	mov	r16,r9
 2003908:	3825883a 	mov	r18,r7
 200390c:	003e9106 	br	2003354 <__subdf3+0x84>
 2003910:	80001f1e 	bne	r16,zero,2003990 <__subdf3+0x6c0>
 2003914:	1c48b03a 	or	r4,r3,r17
 2003918:	20005a26 	beq	r4,zero,2003a84 <__subdf3+0x7b4>
 200391c:	0084303a 	nor	r2,zero,r2
 2003920:	1000561e 	bne	r2,zero,2003a7c <__subdf3+0x7ac>
 2003924:	89a3883a 	add	r17,r17,r6
 2003928:	1945883a 	add	r2,r3,r5
 200392c:	898d803a 	cmpltu	r6,r17,r6
 2003930:	3087883a 	add	r3,r6,r2
 2003934:	4821883a 	mov	r16,r9
 2003938:	003f0506 	br	2003550 <__subdf3+0x280>
 200393c:	10002b1e 	bne	r2,zero,20039ec <__subdf3+0x71c>
 2003940:	2984b03a 	or	r2,r5,r6
 2003944:	10008026 	beq	r2,zero,2003b48 <__subdf3+0x878>
 2003948:	2807883a 	mov	r3,r5
 200394c:	3023883a 	mov	r17,r6
 2003950:	3825883a 	mov	r18,r7
 2003954:	0401ffc4 	movi	r16,2047
 2003958:	003e7e06 	br	2003354 <__subdf3+0x84>
 200395c:	3809883a 	mov	r4,r7
 2003960:	0011883a 	mov	r8,zero
 2003964:	0005883a 	mov	r2,zero
 2003968:	003ee306 	br	20034f8 <__subdf3+0x228>
 200396c:	1c62b03a 	or	r17,r3,r17
 2003970:	8822c03a 	cmpne	r17,r17,zero
 2003974:	0005883a 	mov	r2,zero
 2003978:	003f8906 	br	20037a0 <__subdf3+0x4d0>
 200397c:	3809883a 	mov	r4,r7
 2003980:	4821883a 	mov	r16,r9
 2003984:	0011883a 	mov	r8,zero
 2003988:	0005883a 	mov	r2,zero
 200398c:	003eda06 	br	20034f8 <__subdf3+0x228>
 2003990:	0101ffc4 	movi	r4,2047
 2003994:	49003b26 	beq	r9,r4,2003a84 <__subdf3+0x7b4>
 2003998:	0085c83a 	sub	r2,zero,r2
 200399c:	18c02034 	orhi	r3,r3,128
 20039a0:	01000e04 	movi	r4,56
 20039a4:	20806e16 	blt	r4,r2,2003b60 <__subdf3+0x890>
 20039a8:	010007c4 	movi	r4,31
 20039ac:	20807716 	blt	r4,r2,2003b8c <__subdf3+0x8bc>
 20039b0:	01000804 	movi	r4,32
 20039b4:	2089c83a 	sub	r4,r4,r2
 20039b8:	1914983a 	sll	r10,r3,r4
 20039bc:	8890d83a 	srl	r8,r17,r2
 20039c0:	8908983a 	sll	r4,r17,r4
 20039c4:	1884d83a 	srl	r2,r3,r2
 20039c8:	5222b03a 	or	r17,r10,r8
 20039cc:	2006c03a 	cmpne	r3,r4,zero
 20039d0:	88e2b03a 	or	r17,r17,r3
 20039d4:	89a3883a 	add	r17,r17,r6
 20039d8:	1145883a 	add	r2,r2,r5
 20039dc:	898d803a 	cmpltu	r6,r17,r6
 20039e0:	3087883a 	add	r3,r6,r2
 20039e4:	4821883a 	mov	r16,r9
 20039e8:	003ed906 	br	2003550 <__subdf3+0x280>
 20039ec:	2984b03a 	or	r2,r5,r6
 20039f0:	10004226 	beq	r2,zero,2003afc <__subdf3+0x82c>
 20039f4:	1808d0fa 	srli	r4,r3,3
 20039f8:	8822d0fa 	srli	r17,r17,3
 20039fc:	1806977a 	slli	r3,r3,29
 2003a00:	2080022c 	andhi	r2,r4,8
 2003a04:	1c62b03a 	or	r17,r3,r17
 2003a08:	10000826 	beq	r2,zero,2003a2c <__subdf3+0x75c>
 2003a0c:	2812d0fa 	srli	r9,r5,3
 2003a10:	4880022c 	andhi	r2,r9,8
 2003a14:	1000051e 	bne	r2,zero,2003a2c <__subdf3+0x75c>
 2003a18:	300cd0fa 	srli	r6,r6,3
 2003a1c:	2804977a 	slli	r2,r5,29
 2003a20:	4809883a 	mov	r4,r9
 2003a24:	3825883a 	mov	r18,r7
 2003a28:	11a2b03a 	or	r17,r2,r6
 2003a2c:	8806d77a 	srli	r3,r17,29
 2003a30:	200890fa 	slli	r4,r4,3
 2003a34:	882290fa 	slli	r17,r17,3
 2003a38:	0401ffc4 	movi	r16,2047
 2003a3c:	1906b03a 	or	r3,r3,r4
 2003a40:	003e4406 	br	2003354 <__subdf3+0x84>
 2003a44:	2984b03a 	or	r2,r5,r6
 2003a48:	103e4226 	beq	r2,zero,2003354 <__subdf3+0x84>
 2003a4c:	8989c83a 	sub	r4,r17,r6
 2003a50:	8911803a 	cmpltu	r8,r17,r4
 2003a54:	1945c83a 	sub	r2,r3,r5
 2003a58:	1205c83a 	sub	r2,r2,r8
 2003a5c:	1200202c 	andhi	r8,r2,128
 2003a60:	403e9a26 	beq	r8,zero,20034cc <__subdf3+0x1fc>
 2003a64:	3463c83a 	sub	r17,r6,r17
 2003a68:	28c5c83a 	sub	r2,r5,r3
 2003a6c:	344d803a 	cmpltu	r6,r6,r17
 2003a70:	1187c83a 	sub	r3,r2,r6
 2003a74:	3825883a 	mov	r18,r7
 2003a78:	003e3606 	br	2003354 <__subdf3+0x84>
 2003a7c:	0101ffc4 	movi	r4,2047
 2003a80:	493fc71e 	bne	r9,r4,20039a0 <__subdf3+0x6d0>
 2003a84:	2807883a 	mov	r3,r5
 2003a88:	3023883a 	mov	r17,r6
 2003a8c:	4821883a 	mov	r16,r9
 2003a90:	003e3006 	br	2003354 <__subdf3+0x84>
 2003a94:	10003626 	beq	r2,zero,2003b70 <__subdf3+0x8a0>
 2003a98:	2984b03a 	or	r2,r5,r6
 2003a9c:	10001726 	beq	r2,zero,2003afc <__subdf3+0x82c>
 2003aa0:	1808d0fa 	srli	r4,r3,3
 2003aa4:	8822d0fa 	srli	r17,r17,3
 2003aa8:	1806977a 	slli	r3,r3,29
 2003aac:	2080022c 	andhi	r2,r4,8
 2003ab0:	1c62b03a 	or	r17,r3,r17
 2003ab4:	10000726 	beq	r2,zero,2003ad4 <__subdf3+0x804>
 2003ab8:	2812d0fa 	srli	r9,r5,3
 2003abc:	4880022c 	andhi	r2,r9,8
 2003ac0:	1000041e 	bne	r2,zero,2003ad4 <__subdf3+0x804>
 2003ac4:	300cd0fa 	srli	r6,r6,3
 2003ac8:	2804977a 	slli	r2,r5,29
 2003acc:	4809883a 	mov	r4,r9
 2003ad0:	11a2b03a 	or	r17,r2,r6
 2003ad4:	8806d77a 	srli	r3,r17,29
 2003ad8:	200890fa 	slli	r4,r4,3
 2003adc:	882290fa 	slli	r17,r17,3
 2003ae0:	3825883a 	mov	r18,r7
 2003ae4:	1906b03a 	or	r3,r3,r4
 2003ae8:	0401ffc4 	movi	r16,2047
 2003aec:	003e1906 	br	2003354 <__subdf3+0x84>
 2003af0:	000b883a 	mov	r5,zero
 2003af4:	0005883a 	mov	r2,zero
 2003af8:	003e2e06 	br	20033b4 <__subdf3+0xe4>
 2003afc:	0401ffc4 	movi	r16,2047
 2003b00:	003e1406 	br	2003354 <__subdf3+0x84>
 2003b04:	0005883a 	mov	r2,zero
 2003b08:	003f7506 	br	20038e0 <__subdf3+0x610>
 2003b0c:	0005883a 	mov	r2,zero
 2003b10:	0009883a 	mov	r4,zero
 2003b14:	003e7806 	br	20034f8 <__subdf3+0x228>
 2003b18:	123ff804 	addi	r8,r2,-32
 2003b1c:	01000804 	movi	r4,32
 2003b20:	1a10d83a 	srl	r8,r3,r8
 2003b24:	11002526 	beq	r2,r4,2003bbc <__subdf3+0x8ec>
 2003b28:	01001004 	movi	r4,64
 2003b2c:	2085c83a 	sub	r2,r4,r2
 2003b30:	1884983a 	sll	r2,r3,r2
 2003b34:	1444b03a 	or	r2,r2,r17
 2003b38:	1004c03a 	cmpne	r2,r2,zero
 2003b3c:	40a2b03a 	or	r17,r8,r2
 2003b40:	0005883a 	mov	r2,zero
 2003b44:	003f1606 	br	20037a0 <__subdf3+0x4d0>
 2003b48:	02000434 	movhi	r8,16
 2003b4c:	0009883a 	mov	r4,zero
 2003b50:	423fffc4 	addi	r8,r8,-1
 2003b54:	00bfffc4 	movi	r2,-1
 2003b58:	0401ffc4 	movi	r16,2047
 2003b5c:	003e6606 	br	20034f8 <__subdf3+0x228>
 2003b60:	1c62b03a 	or	r17,r3,r17
 2003b64:	8822c03a 	cmpne	r17,r17,zero
 2003b68:	0005883a 	mov	r2,zero
 2003b6c:	003f9906 	br	20039d4 <__subdf3+0x704>
 2003b70:	2807883a 	mov	r3,r5
 2003b74:	3023883a 	mov	r17,r6
 2003b78:	0401ffc4 	movi	r16,2047
 2003b7c:	003df506 	br	2003354 <__subdf3+0x84>
 2003b80:	2807883a 	mov	r3,r5
 2003b84:	3023883a 	mov	r17,r6
 2003b88:	003df206 	br	2003354 <__subdf3+0x84>
 2003b8c:	123ff804 	addi	r8,r2,-32
 2003b90:	01000804 	movi	r4,32
 2003b94:	1a10d83a 	srl	r8,r3,r8
 2003b98:	11000a26 	beq	r2,r4,2003bc4 <__subdf3+0x8f4>
 2003b9c:	01001004 	movi	r4,64
 2003ba0:	2085c83a 	sub	r2,r4,r2
 2003ba4:	1884983a 	sll	r2,r3,r2
 2003ba8:	1444b03a 	or	r2,r2,r17
 2003bac:	1004c03a 	cmpne	r2,r2,zero
 2003bb0:	40a2b03a 	or	r17,r8,r2
 2003bb4:	0005883a 	mov	r2,zero
 2003bb8:	003f8606 	br	20039d4 <__subdf3+0x704>
 2003bbc:	0005883a 	mov	r2,zero
 2003bc0:	003fdc06 	br	2003b34 <__subdf3+0x864>
 2003bc4:	0005883a 	mov	r2,zero
 2003bc8:	003ff706 	br	2003ba8 <__subdf3+0x8d8>

02003bcc <__fixdfsi>:
 2003bcc:	280cd53a 	srli	r6,r5,20
 2003bd0:	00c00434 	movhi	r3,16
 2003bd4:	18ffffc4 	addi	r3,r3,-1
 2003bd8:	3181ffcc 	andi	r6,r6,2047
 2003bdc:	01c0ff84 	movi	r7,1022
 2003be0:	28c6703a 	and	r3,r5,r3
 2003be4:	280ad7fa 	srli	r5,r5,31
 2003be8:	3980120e 	bge	r7,r6,2003c34 <__fixdfsi+0x68>
 2003bec:	00810744 	movi	r2,1053
 2003bf0:	11800c16 	blt	r2,r6,2003c24 <__fixdfsi+0x58>
 2003bf4:	00810cc4 	movi	r2,1075
 2003bf8:	1185c83a 	sub	r2,r2,r6
 2003bfc:	01c007c4 	movi	r7,31
 2003c00:	18c00434 	orhi	r3,r3,16
 2003c04:	38800d16 	blt	r7,r2,2003c3c <__fixdfsi+0x70>
 2003c08:	31befb44 	addi	r6,r6,-1043
 2003c0c:	2084d83a 	srl	r2,r4,r2
 2003c10:	1986983a 	sll	r3,r3,r6
 2003c14:	1884b03a 	or	r2,r3,r2
 2003c18:	28000726 	beq	r5,zero,2003c38 <__fixdfsi+0x6c>
 2003c1c:	0085c83a 	sub	r2,zero,r2
 2003c20:	f800283a 	ret
 2003c24:	00a00034 	movhi	r2,32768
 2003c28:	10bfffc4 	addi	r2,r2,-1
 2003c2c:	2885883a 	add	r2,r5,r2
 2003c30:	f800283a 	ret
 2003c34:	0005883a 	mov	r2,zero
 2003c38:	f800283a 	ret
 2003c3c:	008104c4 	movi	r2,1043
 2003c40:	1185c83a 	sub	r2,r2,r6
 2003c44:	1884d83a 	srl	r2,r3,r2
 2003c48:	003ff306 	br	2003c18 <__fixdfsi+0x4c>

02003c4c <__floatsidf>:
 2003c4c:	defffd04 	addi	sp,sp,-12
 2003c50:	dfc00215 	stw	ra,8(sp)
 2003c54:	dc400115 	stw	r17,4(sp)
 2003c58:	dc000015 	stw	r16,0(sp)
 2003c5c:	20002b26 	beq	r4,zero,2003d0c <__floatsidf+0xc0>
 2003c60:	2023883a 	mov	r17,r4
 2003c64:	2020d7fa 	srli	r16,r4,31
 2003c68:	20002d16 	blt	r4,zero,2003d20 <__floatsidf+0xd4>
 2003c6c:	8809883a 	mov	r4,r17
 2003c70:	2003d280 	call	2003d28 <__clzsi2>
 2003c74:	01410784 	movi	r5,1054
 2003c78:	288bc83a 	sub	r5,r5,r2
 2003c7c:	01010cc4 	movi	r4,1075
 2003c80:	2149c83a 	sub	r4,r4,r5
 2003c84:	00c007c4 	movi	r3,31
 2003c88:	1900160e 	bge	r3,r4,2003ce4 <__floatsidf+0x98>
 2003c8c:	00c104c4 	movi	r3,1043
 2003c90:	1947c83a 	sub	r3,r3,r5
 2003c94:	88c6983a 	sll	r3,r17,r3
 2003c98:	00800434 	movhi	r2,16
 2003c9c:	10bfffc4 	addi	r2,r2,-1
 2003ca0:	1886703a 	and	r3,r3,r2
 2003ca4:	2941ffcc 	andi	r5,r5,2047
 2003ca8:	800d883a 	mov	r6,r16
 2003cac:	0005883a 	mov	r2,zero
 2003cb0:	280a953a 	slli	r5,r5,20
 2003cb4:	31803fcc 	andi	r6,r6,255
 2003cb8:	01000434 	movhi	r4,16
 2003cbc:	300c97fa 	slli	r6,r6,31
 2003cc0:	213fffc4 	addi	r4,r4,-1
 2003cc4:	1906703a 	and	r3,r3,r4
 2003cc8:	1946b03a 	or	r3,r3,r5
 2003ccc:	1986b03a 	or	r3,r3,r6
 2003cd0:	dfc00217 	ldw	ra,8(sp)
 2003cd4:	dc400117 	ldw	r17,4(sp)
 2003cd8:	dc000017 	ldw	r16,0(sp)
 2003cdc:	dec00304 	addi	sp,sp,12
 2003ce0:	f800283a 	ret
 2003ce4:	00c002c4 	movi	r3,11
 2003ce8:	1887c83a 	sub	r3,r3,r2
 2003cec:	88c6d83a 	srl	r3,r17,r3
 2003cf0:	8904983a 	sll	r2,r17,r4
 2003cf4:	01000434 	movhi	r4,16
 2003cf8:	213fffc4 	addi	r4,r4,-1
 2003cfc:	2941ffcc 	andi	r5,r5,2047
 2003d00:	1906703a 	and	r3,r3,r4
 2003d04:	800d883a 	mov	r6,r16
 2003d08:	003fe906 	br	2003cb0 <__floatsidf+0x64>
 2003d0c:	000d883a 	mov	r6,zero
 2003d10:	000b883a 	mov	r5,zero
 2003d14:	0007883a 	mov	r3,zero
 2003d18:	0005883a 	mov	r2,zero
 2003d1c:	003fe406 	br	2003cb0 <__floatsidf+0x64>
 2003d20:	0123c83a 	sub	r17,zero,r4
 2003d24:	003fd106 	br	2003c6c <__floatsidf+0x20>

02003d28 <__clzsi2>:
 2003d28:	00bfffd4 	movui	r2,65535
 2003d2c:	11000536 	bltu	r2,r4,2003d44 <__clzsi2+0x1c>
 2003d30:	00803fc4 	movi	r2,255
 2003d34:	11000f36 	bltu	r2,r4,2003d74 <__clzsi2+0x4c>
 2003d38:	00800804 	movi	r2,32
 2003d3c:	0007883a 	mov	r3,zero
 2003d40:	00000506 	br	2003d58 <__clzsi2+0x30>
 2003d44:	00804034 	movhi	r2,256
 2003d48:	10bfffc4 	addi	r2,r2,-1
 2003d4c:	11000c2e 	bgeu	r2,r4,2003d80 <__clzsi2+0x58>
 2003d50:	00800204 	movi	r2,8
 2003d54:	00c00604 	movi	r3,24
 2003d58:	20c8d83a 	srl	r4,r4,r3
 2003d5c:	00c080b4 	movhi	r3,514
 2003d60:	18f21044 	addi	r3,r3,-14271
 2003d64:	1909883a 	add	r4,r3,r4
 2003d68:	20c00003 	ldbu	r3,0(r4)
 2003d6c:	10c5c83a 	sub	r2,r2,r3
 2003d70:	f800283a 	ret
 2003d74:	00800604 	movi	r2,24
 2003d78:	00c00204 	movi	r3,8
 2003d7c:	003ff606 	br	2003d58 <__clzsi2+0x30>
 2003d80:	00800404 	movi	r2,16
 2003d84:	1007883a 	mov	r3,r2
 2003d88:	003ff306 	br	2003d58 <__clzsi2+0x30>

02003d8c <__divsi3>:
 2003d8c:	20001b16 	blt	r4,zero,2003dfc <__divsi3+0x70>
 2003d90:	000f883a 	mov	r7,zero
 2003d94:	28001616 	blt	r5,zero,2003df0 <__divsi3+0x64>
 2003d98:	200d883a 	mov	r6,r4
 2003d9c:	29001a2e 	bgeu	r5,r4,2003e08 <__divsi3+0x7c>
 2003da0:	00800804 	movi	r2,32
 2003da4:	00c00044 	movi	r3,1
 2003da8:	00000106 	br	2003db0 <__divsi3+0x24>
 2003dac:	10000d26 	beq	r2,zero,2003de4 <__divsi3+0x58>
 2003db0:	294b883a 	add	r5,r5,r5
 2003db4:	10bfffc4 	addi	r2,r2,-1
 2003db8:	18c7883a 	add	r3,r3,r3
 2003dbc:	293ffb36 	bltu	r5,r4,2003dac <__divsi3+0x20>
 2003dc0:	0005883a 	mov	r2,zero
 2003dc4:	18000726 	beq	r3,zero,2003de4 <__divsi3+0x58>
 2003dc8:	0005883a 	mov	r2,zero
 2003dcc:	31400236 	bltu	r6,r5,2003dd8 <__divsi3+0x4c>
 2003dd0:	314dc83a 	sub	r6,r6,r5
 2003dd4:	10c4b03a 	or	r2,r2,r3
 2003dd8:	1806d07a 	srli	r3,r3,1
 2003ddc:	280ad07a 	srli	r5,r5,1
 2003de0:	183ffa1e 	bne	r3,zero,2003dcc <__divsi3+0x40>
 2003de4:	38000126 	beq	r7,zero,2003dec <__divsi3+0x60>
 2003de8:	0085c83a 	sub	r2,zero,r2
 2003dec:	f800283a 	ret
 2003df0:	014bc83a 	sub	r5,zero,r5
 2003df4:	39c0005c 	xori	r7,r7,1
 2003df8:	003fe706 	br	2003d98 <__divsi3+0xc>
 2003dfc:	0109c83a 	sub	r4,zero,r4
 2003e00:	01c00044 	movi	r7,1
 2003e04:	003fe306 	br	2003d94 <__divsi3+0x8>
 2003e08:	00c00044 	movi	r3,1
 2003e0c:	003fee06 	br	2003dc8 <__divsi3+0x3c>

02003e10 <__modsi3>:
 2003e10:	20001716 	blt	r4,zero,2003e70 <__modsi3+0x60>
 2003e14:	000f883a 	mov	r7,zero
 2003e18:	2005883a 	mov	r2,r4
 2003e1c:	28001216 	blt	r5,zero,2003e68 <__modsi3+0x58>
 2003e20:	2900162e 	bgeu	r5,r4,2003e7c <__modsi3+0x6c>
 2003e24:	01800804 	movi	r6,32
 2003e28:	00c00044 	movi	r3,1
 2003e2c:	00000106 	br	2003e34 <__modsi3+0x24>
 2003e30:	30000a26 	beq	r6,zero,2003e5c <__modsi3+0x4c>
 2003e34:	294b883a 	add	r5,r5,r5
 2003e38:	31bfffc4 	addi	r6,r6,-1
 2003e3c:	18c7883a 	add	r3,r3,r3
 2003e40:	293ffb36 	bltu	r5,r4,2003e30 <__modsi3+0x20>
 2003e44:	18000526 	beq	r3,zero,2003e5c <__modsi3+0x4c>
 2003e48:	1806d07a 	srli	r3,r3,1
 2003e4c:	11400136 	bltu	r2,r5,2003e54 <__modsi3+0x44>
 2003e50:	1145c83a 	sub	r2,r2,r5
 2003e54:	280ad07a 	srli	r5,r5,1
 2003e58:	183ffb1e 	bne	r3,zero,2003e48 <__modsi3+0x38>
 2003e5c:	38000126 	beq	r7,zero,2003e64 <__modsi3+0x54>
 2003e60:	0085c83a 	sub	r2,zero,r2
 2003e64:	f800283a 	ret
 2003e68:	014bc83a 	sub	r5,zero,r5
 2003e6c:	003fec06 	br	2003e20 <__modsi3+0x10>
 2003e70:	0109c83a 	sub	r4,zero,r4
 2003e74:	01c00044 	movi	r7,1
 2003e78:	003fe706 	br	2003e18 <__modsi3+0x8>
 2003e7c:	00c00044 	movi	r3,1
 2003e80:	003ff106 	br	2003e48 <__modsi3+0x38>

02003e84 <__udivsi3>:
 2003e84:	200d883a 	mov	r6,r4
 2003e88:	2900152e 	bgeu	r5,r4,2003ee0 <__udivsi3+0x5c>
 2003e8c:	28001416 	blt	r5,zero,2003ee0 <__udivsi3+0x5c>
 2003e90:	00800804 	movi	r2,32
 2003e94:	00c00044 	movi	r3,1
 2003e98:	00000206 	br	2003ea4 <__udivsi3+0x20>
 2003e9c:	10000e26 	beq	r2,zero,2003ed8 <__udivsi3+0x54>
 2003ea0:	28000516 	blt	r5,zero,2003eb8 <__udivsi3+0x34>
 2003ea4:	294b883a 	add	r5,r5,r5
 2003ea8:	10bfffc4 	addi	r2,r2,-1
 2003eac:	18c7883a 	add	r3,r3,r3
 2003eb0:	293ffa36 	bltu	r5,r4,2003e9c <__udivsi3+0x18>
 2003eb4:	18000826 	beq	r3,zero,2003ed8 <__udivsi3+0x54>
 2003eb8:	0005883a 	mov	r2,zero
 2003ebc:	31400236 	bltu	r6,r5,2003ec8 <__udivsi3+0x44>
 2003ec0:	314dc83a 	sub	r6,r6,r5
 2003ec4:	10c4b03a 	or	r2,r2,r3
 2003ec8:	1806d07a 	srli	r3,r3,1
 2003ecc:	280ad07a 	srli	r5,r5,1
 2003ed0:	183ffa1e 	bne	r3,zero,2003ebc <__udivsi3+0x38>
 2003ed4:	f800283a 	ret
 2003ed8:	0005883a 	mov	r2,zero
 2003edc:	f800283a 	ret
 2003ee0:	00c00044 	movi	r3,1
 2003ee4:	003ff406 	br	2003eb8 <__udivsi3+0x34>

02003ee8 <__umodsi3>:
 2003ee8:	2005883a 	mov	r2,r4
 2003eec:	2900122e 	bgeu	r5,r4,2003f38 <__umodsi3+0x50>
 2003ef0:	28001116 	blt	r5,zero,2003f38 <__umodsi3+0x50>
 2003ef4:	01800804 	movi	r6,32
 2003ef8:	00c00044 	movi	r3,1
 2003efc:	00000206 	br	2003f08 <__umodsi3+0x20>
 2003f00:	30000c26 	beq	r6,zero,2003f34 <__umodsi3+0x4c>
 2003f04:	28000516 	blt	r5,zero,2003f1c <__umodsi3+0x34>
 2003f08:	294b883a 	add	r5,r5,r5
 2003f0c:	31bfffc4 	addi	r6,r6,-1
 2003f10:	18c7883a 	add	r3,r3,r3
 2003f14:	293ffa36 	bltu	r5,r4,2003f00 <__umodsi3+0x18>
 2003f18:	18000626 	beq	r3,zero,2003f34 <__umodsi3+0x4c>
 2003f1c:	1806d07a 	srli	r3,r3,1
 2003f20:	11400136 	bltu	r2,r5,2003f28 <__umodsi3+0x40>
 2003f24:	1145c83a 	sub	r2,r2,r5
 2003f28:	280ad07a 	srli	r5,r5,1
 2003f2c:	183ffb1e 	bne	r3,zero,2003f1c <__umodsi3+0x34>
 2003f30:	f800283a 	ret
 2003f34:	f800283a 	ret
 2003f38:	00c00044 	movi	r3,1
 2003f3c:	003ff706 	br	2003f1c <__umodsi3+0x34>

02003f40 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
 2003f40:	deffff04 	addi	sp,sp,-4
 2003f44:	df000015 	stw	fp,0(sp)
 2003f48:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
 2003f4c:	d0a00517 	ldw	r2,-32748(gp)
}
 2003f50:	e037883a 	mov	sp,fp
 2003f54:	df000017 	ldw	fp,0(sp)
 2003f58:	dec00104 	addi	sp,sp,4
 2003f5c:	f800283a 	ret

02003f60 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 2003f60:	defff804 	addi	sp,sp,-32
 2003f64:	dfc00515 	stw	ra,20(sp)
 2003f68:	df000415 	stw	fp,16(sp)
 2003f6c:	df000404 	addi	fp,sp,16
 2003f70:	e13ffe15 	stw	r4,-8(fp)
 2003f74:	e17fff15 	stw	r5,-4(fp)
 2003f78:	e1800215 	stw	r6,8(fp)
 2003f7c:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 2003f80:	e0800204 	addi	r2,fp,8
 2003f84:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2003f88:	e0bffe17 	ldw	r2,-8(fp)
 2003f8c:	10800217 	ldw	r2,8(r2)
 2003f90:	e0fffd17 	ldw	r3,-12(fp)
 2003f94:	180f883a 	mov	r7,r3
 2003f98:	e1bfff17 	ldw	r6,-4(fp)
 2003f9c:	100b883a 	mov	r5,r2
 2003fa0:	e13ffe17 	ldw	r4,-8(fp)
 2003fa4:	20043b00 	call	20043b0 <___vfprintf_internal_r>
 2003fa8:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 2003fac:	e0bffc17 	ldw	r2,-16(fp)
}
 2003fb0:	e037883a 	mov	sp,fp
 2003fb4:	dfc00117 	ldw	ra,4(sp)
 2003fb8:	df000017 	ldw	fp,0(sp)
 2003fbc:	dec00404 	addi	sp,sp,16
 2003fc0:	f800283a 	ret

02003fc4 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 2003fc4:	defff704 	addi	sp,sp,-36
 2003fc8:	dfc00515 	stw	ra,20(sp)
 2003fcc:	df000415 	stw	fp,16(sp)
 2003fd0:	df000404 	addi	fp,sp,16
 2003fd4:	e13fff15 	stw	r4,-4(fp)
 2003fd8:	e1400215 	stw	r5,8(fp)
 2003fdc:	e1800315 	stw	r6,12(fp)
 2003fe0:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 2003fe4:	d0a00517 	ldw	r2,-32748(gp)
 2003fe8:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 2003fec:	e0800204 	addi	r2,fp,8
 2003ff0:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 2003ff4:	d0a00517 	ldw	r2,-32748(gp)
 2003ff8:	10800217 	ldw	r2,8(r2)
 2003ffc:	e0fffe17 	ldw	r3,-8(fp)
 2004000:	180d883a 	mov	r6,r3
 2004004:	e17fff17 	ldw	r5,-4(fp)
 2004008:	1009883a 	mov	r4,r2
 200400c:	20043600 	call	2004360 <__vfprintf_internal>
 2004010:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 2004014:	e0bffd17 	ldw	r2,-12(fp)
}
 2004018:	e037883a 	mov	sp,fp
 200401c:	dfc00117 	ldw	ra,4(sp)
 2004020:	df000017 	ldw	fp,0(sp)
 2004024:	dec00504 	addi	sp,sp,20
 2004028:	f800283a 	ret

0200402c <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 200402c:	defff104 	addi	sp,sp,-60
 2004030:	dfc00e15 	stw	ra,56(sp)
 2004034:	df000d15 	stw	fp,52(sp)
 2004038:	df000d04 	addi	fp,sp,52
 200403c:	e13ffe15 	stw	r4,-8(fp)
 2004040:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 2004044:	e13fff17 	ldw	r4,-4(fp)
 2004048:	200417c0 	call	200417c <strlen>
 200404c:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 2004050:	e0bfff17 	ldw	r2,-4(fp)
 2004054:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 2004058:	e0bff317 	ldw	r2,-52(fp)
 200405c:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 2004060:	008080b4 	movhi	r2,514
 2004064:	10b25204 	addi	r2,r2,-14008
 2004068:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 200406c:	00800044 	movi	r2,1
 2004070:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 2004074:	e0bff317 	ldw	r2,-52(fp)
 2004078:	10800044 	addi	r2,r2,1
 200407c:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 2004080:	e0bffa04 	addi	r2,fp,-24
 2004084:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 2004088:	00800084 	movi	r2,2
 200408c:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 2004090:	e0bffe17 	ldw	r2,-8(fp)
 2004094:	e0bff415 	stw	r2,-48(fp)
 2004098:	e0bff417 	ldw	r2,-48(fp)
 200409c:	10000526 	beq	r2,zero,20040b4 <_puts_r+0x88>
 20040a0:	e0bff417 	ldw	r2,-48(fp)
 20040a4:	10800e17 	ldw	r2,56(r2)
 20040a8:	1000021e 	bne	r2,zero,20040b4 <_puts_r+0x88>
 20040ac:	e13ff417 	ldw	r4,-48(fp)
 20040b0:	200901c0 	call	200901c <__sinit>
  fp = _stdout_r (ptr);
 20040b4:	e0bffe17 	ldw	r2,-8(fp)
 20040b8:	10800217 	ldw	r2,8(r2)
 20040bc:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 20040c0:	e0bff517 	ldw	r2,-44(fp)
 20040c4:	1080030b 	ldhu	r2,12(r2)
 20040c8:	10bfffcc 	andi	r2,r2,65535
 20040cc:	1088000c 	andi	r2,r2,8192
 20040d0:	10000c1e 	bne	r2,zero,2004104 <_puts_r+0xd8>
 20040d4:	e0bff517 	ldw	r2,-44(fp)
 20040d8:	1080030b 	ldhu	r2,12(r2)
 20040dc:	10880014 	ori	r2,r2,8192
 20040e0:	1007883a 	mov	r3,r2
 20040e4:	e0bff517 	ldw	r2,-44(fp)
 20040e8:	10c0030d 	sth	r3,12(r2)
 20040ec:	e0bff517 	ldw	r2,-44(fp)
 20040f0:	10c01917 	ldw	r3,100(r2)
 20040f4:	00b7ffc4 	movi	r2,-8193
 20040f8:	1886703a 	and	r3,r3,r2
 20040fc:	e0bff517 	ldw	r2,-44(fp)
 2004100:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 2004104:	e0bff704 	addi	r2,fp,-36
 2004108:	100d883a 	mov	r6,r2
 200410c:	e17ff517 	ldw	r5,-44(fp)
 2004110:	e13ffe17 	ldw	r4,-8(fp)
 2004114:	20099680 	call	2009968 <__sfvwrite_r>
 2004118:	10000226 	beq	r2,zero,2004124 <_puts_r+0xf8>
 200411c:	00bfffc4 	movi	r2,-1
 2004120:	00000106 	br	2004128 <_puts_r+0xfc>
 2004124:	00800284 	movi	r2,10
 2004128:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 200412c:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 2004130:	e037883a 	mov	sp,fp
 2004134:	dfc00117 	ldw	ra,4(sp)
 2004138:	df000017 	ldw	fp,0(sp)
 200413c:	dec00204 	addi	sp,sp,8
 2004140:	f800283a 	ret

02004144 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 2004144:	defffd04 	addi	sp,sp,-12
 2004148:	dfc00215 	stw	ra,8(sp)
 200414c:	df000115 	stw	fp,4(sp)
 2004150:	df000104 	addi	fp,sp,4
 2004154:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 2004158:	d0a00517 	ldw	r2,-32748(gp)
 200415c:	e17fff17 	ldw	r5,-4(fp)
 2004160:	1009883a 	mov	r4,r2
 2004164:	200402c0 	call	200402c <_puts_r>
}
 2004168:	e037883a 	mov	sp,fp
 200416c:	dfc00117 	ldw	ra,4(sp)
 2004170:	df000017 	ldw	fp,0(sp)
 2004174:	dec00204 	addi	sp,sp,8
 2004178:	f800283a 	ret

0200417c <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 200417c:	defffc04 	addi	sp,sp,-16
 2004180:	df000315 	stw	fp,12(sp)
 2004184:	df000304 	addi	fp,sp,12
 2004188:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 200418c:	e0bfff17 	ldw	r2,-4(fp)
 2004190:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2004194:	00000d06 	br	20041cc <strlen+0x50>
    {
      if (!*str)
 2004198:	e0bfff17 	ldw	r2,-4(fp)
 200419c:	10800003 	ldbu	r2,0(r2)
 20041a0:	10803fcc 	andi	r2,r2,255
 20041a4:	1080201c 	xori	r2,r2,128
 20041a8:	10bfe004 	addi	r2,r2,-128
 20041ac:	1000041e 	bne	r2,zero,20041c0 <strlen+0x44>
	return str - start;
 20041b0:	e0ffff17 	ldw	r3,-4(fp)
 20041b4:	e0bffe17 	ldw	r2,-8(fp)
 20041b8:	1885c83a 	sub	r2,r3,r2
 20041bc:	00002806 	br	2004260 <strlen+0xe4>
      str++;
 20041c0:	e0bfff17 	ldw	r2,-4(fp)
 20041c4:	10800044 	addi	r2,r2,1
 20041c8:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 20041cc:	e0bfff17 	ldw	r2,-4(fp)
 20041d0:	108000cc 	andi	r2,r2,3
 20041d4:	103ff01e 	bne	r2,zero,2004198 <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 20041d8:	e0bfff17 	ldw	r2,-4(fp)
 20041dc:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 20041e0:	00000306 	br	20041f0 <strlen+0x74>
    aligned_addr++;
 20041e4:	e0bffd17 	ldw	r2,-12(fp)
 20041e8:	10800104 	addi	r2,r2,4
 20041ec:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 20041f0:	e0bffd17 	ldw	r2,-12(fp)
 20041f4:	10c00017 	ldw	r3,0(r2)
 20041f8:	00bfbff4 	movhi	r2,65279
 20041fc:	10bfbfc4 	addi	r2,r2,-257
 2004200:	1887883a 	add	r3,r3,r2
 2004204:	e0bffd17 	ldw	r2,-12(fp)
 2004208:	10800017 	ldw	r2,0(r2)
 200420c:	0084303a 	nor	r2,zero,r2
 2004210:	1886703a 	and	r3,r3,r2
 2004214:	00a02074 	movhi	r2,32897
 2004218:	10a02004 	addi	r2,r2,-32640
 200421c:	1884703a 	and	r2,r3,r2
 2004220:	103ff026 	beq	r2,zero,20041e4 <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 2004224:	e0bffd17 	ldw	r2,-12(fp)
 2004228:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 200422c:	00000306 	br	200423c <strlen+0xc0>
    str++;
 2004230:	e0bfff17 	ldw	r2,-4(fp)
 2004234:	10800044 	addi	r2,r2,1
 2004238:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 200423c:	e0bfff17 	ldw	r2,-4(fp)
 2004240:	10800003 	ldbu	r2,0(r2)
 2004244:	10803fcc 	andi	r2,r2,255
 2004248:	1080201c 	xori	r2,r2,128
 200424c:	10bfe004 	addi	r2,r2,-128
 2004250:	103ff71e 	bne	r2,zero,2004230 <strlen+0xb4>
    str++;
  return str - start;
 2004254:	e0ffff17 	ldw	r3,-4(fp)
 2004258:	e0bffe17 	ldw	r2,-8(fp)
 200425c:	1885c83a 	sub	r2,r3,r2
}
 2004260:	e037883a 	mov	sp,fp
 2004264:	df000017 	ldw	fp,0(sp)
 2004268:	dec00104 	addi	sp,sp,4
 200426c:	f800283a 	ret

02004270 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 2004270:	defedf04 	addi	sp,sp,-1156
 2004274:	dfc12015 	stw	ra,1152(sp)
 2004278:	df011f15 	stw	fp,1148(sp)
 200427c:	dc011e15 	stw	r16,1144(sp)
 2004280:	df011f04 	addi	fp,sp,1148
 2004284:	e13ffc15 	stw	r4,-16(fp)
 2004288:	2821883a 	mov	r16,r5
 200428c:	e1bffd15 	stw	r6,-12(fp)
 2004290:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2004294:	80c0030b 	ldhu	r3,12(r16)
 2004298:	00bfff44 	movi	r2,-3
 200429c:	1884703a 	and	r2,r3,r2
 20042a0:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 20042a4:	80801917 	ldw	r2,100(r16)
 20042a8:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 20042ac:	8080038b 	ldhu	r2,14(r16)
 20042b0:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 20042b4:	80800717 	ldw	r2,28(r16)
 20042b8:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 20042bc:	80800917 	ldw	r2,36(r16)
 20042c0:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 20042c4:	e0befc04 	addi	r2,fp,-1040
 20042c8:	e0bee215 	stw	r2,-1144(fp)
 20042cc:	e0bee217 	ldw	r2,-1144(fp)
 20042d0:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 20042d4:	00810004 	movi	r2,1024
 20042d8:	e0bee415 	stw	r2,-1136(fp)
 20042dc:	e0bee417 	ldw	r2,-1136(fp)
 20042e0:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 20042e4:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 20042e8:	e0bee204 	addi	r2,fp,-1144
 20042ec:	e1fffe17 	ldw	r7,-8(fp)
 20042f0:	e1bffd17 	ldw	r6,-12(fp)
 20042f4:	100b883a 	mov	r5,r2
 20042f8:	e13ffc17 	ldw	r4,-16(fp)
 20042fc:	20043b00 	call	20043b0 <___vfprintf_internal_r>
 2004300:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2004304:	e0bee117 	ldw	r2,-1148(fp)
 2004308:	10000716 	blt	r2,zero,2004328 <__sbprintf+0xb8>
 200430c:	e0bee204 	addi	r2,fp,-1144
 2004310:	100b883a 	mov	r5,r2
 2004314:	e13ffc17 	ldw	r4,-16(fp)
 2004318:	2008b9c0 	call	2008b9c <_fflush_r>
 200431c:	10000226 	beq	r2,zero,2004328 <__sbprintf+0xb8>
		ret = EOF;
 2004320:	00bfffc4 	movi	r2,-1
 2004324:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2004328:	e0bee50b 	ldhu	r2,-1132(fp)
 200432c:	10bfffcc 	andi	r2,r2,65535
 2004330:	1080100c 	andi	r2,r2,64
 2004334:	10000326 	beq	r2,zero,2004344 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 2004338:	8080030b 	ldhu	r2,12(r16)
 200433c:	10801014 	ori	r2,r2,64
 2004340:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 2004344:	e0bee117 	ldw	r2,-1148(fp)
}
 2004348:	e6ffff04 	addi	sp,fp,-4
 200434c:	dfc00217 	ldw	ra,8(sp)
 2004350:	df000117 	ldw	fp,4(sp)
 2004354:	dc000017 	ldw	r16,0(sp)
 2004358:	dec00304 	addi	sp,sp,12
 200435c:	f800283a 	ret

02004360 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 2004360:	defffa04 	addi	sp,sp,-24
 2004364:	dfc00515 	stw	ra,20(sp)
 2004368:	df000415 	stw	fp,16(sp)
 200436c:	df000404 	addi	fp,sp,16
 2004370:	e13ffd15 	stw	r4,-12(fp)
 2004374:	e17ffe15 	stw	r5,-8(fp)
 2004378:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 200437c:	d0a00517 	ldw	r2,-32748(gp)
 2004380:	e1ffff17 	ldw	r7,-4(fp)
 2004384:	e1bffe17 	ldw	r6,-8(fp)
 2004388:	e17ffd17 	ldw	r5,-12(fp)
 200438c:	1009883a 	mov	r4,r2
 2004390:	20043b00 	call	20043b0 <___vfprintf_internal_r>
 2004394:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2004398:	e0bffc17 	ldw	r2,-16(fp)
}
 200439c:	e037883a 	mov	sp,fp
 20043a0:	dfc00117 	ldw	ra,4(sp)
 20043a4:	df000017 	ldw	fp,0(sp)
 20043a8:	dec00204 	addi	sp,sp,8
 20043ac:	f800283a 	ret

020043b0 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 20043b0:	deffa404 	addi	sp,sp,-368
 20043b4:	dfc05b15 	stw	ra,364(sp)
 20043b8:	df005a15 	stw	fp,360(sp)
 20043bc:	ddc05915 	stw	r23,356(sp)
 20043c0:	dd805815 	stw	r22,352(sp)
 20043c4:	dd405715 	stw	r21,348(sp)
 20043c8:	dd005615 	stw	r20,344(sp)
 20043cc:	dcc05515 	stw	r19,340(sp)
 20043d0:	dc805415 	stw	r18,336(sp)
 20043d4:	dc405315 	stw	r17,332(sp)
 20043d8:	dc005215 	stw	r16,328(sp)
 20043dc:	df005a04 	addi	fp,sp,360
 20043e0:	e13fe615 	stw	r4,-104(fp)
 20043e4:	e17fe715 	stw	r5,-100(fp)
 20043e8:	e1bfe815 	stw	r6,-96(fp)
 20043ec:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 20043f0:	e13fe617 	ldw	r4,-104(fp)
 20043f4:	200a2040 	call	200a204 <_localeconv_r>
 20043f8:	10800017 	ldw	r2,0(r2)
 20043fc:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 2004400:	e13fbb17 	ldw	r4,-276(fp)
 2004404:	200417c0 	call	200417c <strlen>
 2004408:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 200440c:	e03fc215 	stw	zero,-248(fp)
 2004410:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 2004414:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 2004418:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 200441c:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2004420:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 2004424:	e0bfe617 	ldw	r2,-104(fp)
 2004428:	e0bfbd15 	stw	r2,-268(fp)
 200442c:	e0bfbd17 	ldw	r2,-268(fp)
 2004430:	10000526 	beq	r2,zero,2004448 <___vfprintf_internal_r+0x98>
 2004434:	e0bfbd17 	ldw	r2,-268(fp)
 2004438:	10800e17 	ldw	r2,56(r2)
 200443c:	1000021e 	bne	r2,zero,2004448 <___vfprintf_internal_r+0x98>
 2004440:	e13fbd17 	ldw	r4,-268(fp)
 2004444:	200901c0 	call	200901c <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2004448:	e0bfe717 	ldw	r2,-100(fp)
 200444c:	1080030b 	ldhu	r2,12(r2)
 2004450:	10bfffcc 	andi	r2,r2,65535
 2004454:	1088000c 	andi	r2,r2,8192
 2004458:	10000c1e 	bne	r2,zero,200448c <___vfprintf_internal_r+0xdc>
 200445c:	e0bfe717 	ldw	r2,-100(fp)
 2004460:	1080030b 	ldhu	r2,12(r2)
 2004464:	10880014 	ori	r2,r2,8192
 2004468:	1007883a 	mov	r3,r2
 200446c:	e0bfe717 	ldw	r2,-100(fp)
 2004470:	10c0030d 	sth	r3,12(r2)
 2004474:	e0bfe717 	ldw	r2,-100(fp)
 2004478:	10c01917 	ldw	r3,100(r2)
 200447c:	00b7ffc4 	movi	r2,-8193
 2004480:	1886703a 	and	r3,r3,r2
 2004484:	e0bfe717 	ldw	r2,-100(fp)
 2004488:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 200448c:	e0bfe717 	ldw	r2,-100(fp)
 2004490:	1080030b 	ldhu	r2,12(r2)
 2004494:	10bfffcc 	andi	r2,r2,65535
 2004498:	1080020c 	andi	r2,r2,8
 200449c:	10000326 	beq	r2,zero,20044ac <___vfprintf_internal_r+0xfc>
 20044a0:	e0bfe717 	ldw	r2,-100(fp)
 20044a4:	10800417 	ldw	r2,16(r2)
 20044a8:	1000061e 	bne	r2,zero,20044c4 <___vfprintf_internal_r+0x114>
 20044ac:	e17fe717 	ldw	r5,-100(fp)
 20044b0:	e13fe617 	ldw	r4,-104(fp)
 20044b4:	20067cc0 	call	20067cc <__swsetup_r>
 20044b8:	10000226 	beq	r2,zero,20044c4 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 20044bc:	00bfffc4 	movi	r2,-1
 20044c0:	0007e206 	br	200644c <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 20044c4:	e0bfe717 	ldw	r2,-100(fp)
 20044c8:	1080030b 	ldhu	r2,12(r2)
 20044cc:	10bfffcc 	andi	r2,r2,65535
 20044d0:	1080068c 	andi	r2,r2,26
 20044d4:	10800298 	cmpnei	r2,r2,10
 20044d8:	10000c1e 	bne	r2,zero,200450c <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 20044dc:	e0bfe717 	ldw	r2,-100(fp)
 20044e0:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 20044e4:	10bfffcc 	andi	r2,r2,65535
 20044e8:	10a0001c 	xori	r2,r2,32768
 20044ec:	10a00004 	addi	r2,r2,-32768
 20044f0:	10000616 	blt	r2,zero,200450c <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 20044f4:	e1ffe917 	ldw	r7,-92(fp)
 20044f8:	e1bfe817 	ldw	r6,-96(fp)
 20044fc:	e17fe717 	ldw	r5,-100(fp)
 2004500:	e13fe617 	ldw	r4,-104(fp)
 2004504:	20042700 	call	2004270 <__sbprintf>
 2004508:	0007d006 	br	200644c <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 200450c:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2004510:	e47fcb04 	addi	r17,fp,-212
 2004514:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 2004518:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 200451c:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2004520:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 2004524:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2004528:	00000106 	br	2004530 <___vfprintf_internal_r+0x180>
                    fmt += 1;
 200452c:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2004530:	a8800003 	ldbu	r2,0(r21)
 2004534:	10803fcc 	andi	r2,r2,255
 2004538:	1080201c 	xori	r2,r2,128
 200453c:	10bfe004 	addi	r2,r2,-128
 2004540:	10000626 	beq	r2,zero,200455c <___vfprintf_internal_r+0x1ac>
 2004544:	a8800003 	ldbu	r2,0(r21)
 2004548:	10803fcc 	andi	r2,r2,255
 200454c:	1080201c 	xori	r2,r2,128
 2004550:	10bfe004 	addi	r2,r2,-128
 2004554:	10800958 	cmpnei	r2,r2,37
 2004558:	103ff41e 	bne	r2,zero,200452c <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 200455c:	a807883a 	mov	r3,r21
 2004560:	9005883a 	mov	r2,r18
 2004564:	18a1c83a 	sub	r16,r3,r2
 2004568:	80001826 	beq	r16,zero,20045cc <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 200456c:	8c800015 	stw	r18,0(r17)
 2004570:	8005883a 	mov	r2,r16
 2004574:	88800115 	stw	r2,4(r17)
 2004578:	e0bfca17 	ldw	r2,-216(fp)
 200457c:	8007883a 	mov	r3,r16
 2004580:	10c5883a 	add	r2,r2,r3
 2004584:	e0bfca15 	stw	r2,-216(fp)
 2004588:	8c400204 	addi	r17,r17,8
 200458c:	e0bfc917 	ldw	r2,-220(fp)
 2004590:	10800044 	addi	r2,r2,1
 2004594:	e0bfc915 	stw	r2,-220(fp)
 2004598:	e0bfc917 	ldw	r2,-220(fp)
 200459c:	10800210 	cmplti	r2,r2,8
 20045a0:	1000071e 	bne	r2,zero,20045c0 <___vfprintf_internal_r+0x210>
 20045a4:	e0bfc804 	addi	r2,fp,-224
 20045a8:	100d883a 	mov	r6,r2
 20045ac:	e17fe717 	ldw	r5,-100(fp)
 20045b0:	e13fe617 	ldw	r4,-104(fp)
 20045b4:	200e5840 	call	200e584 <__sprint_r>
 20045b8:	10074d1e 	bne	r2,zero,20062f0 <___vfprintf_internal_r+0x1f40>
 20045bc:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 20045c0:	e0bfac17 	ldw	r2,-336(fp)
 20045c4:	1405883a 	add	r2,r2,r16
 20045c8:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 20045cc:	a8800003 	ldbu	r2,0(r21)
 20045d0:	10803fcc 	andi	r2,r2,255
 20045d4:	1080201c 	xori	r2,r2,128
 20045d8:	10bfe004 	addi	r2,r2,-128
 20045dc:	10073626 	beq	r2,zero,20062b8 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 20045e0:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 20045e4:	ad400044 	addi	r21,r21,1

		flags = 0;
 20045e8:	0027883a 	mov	r19,zero
		dprec = 0;
 20045ec:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 20045f0:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 20045f4:	00bfffc4 	movi	r2,-1
 20045f8:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 20045fc:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 2004600:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 2004604:	a805883a 	mov	r2,r21
 2004608:	15400044 	addi	r21,r2,1
 200460c:	10800003 	ldbu	r2,0(r2)
 2004610:	15003fcc 	andi	r20,r2,255
 2004614:	a500201c 	xori	r20,r20,128
 2004618:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 200461c:	a0bff804 	addi	r2,r20,-32
 2004620:	10c01668 	cmpgeui	r3,r2,89
 2004624:	1803491e 	bne	r3,zero,200534c <___vfprintf_internal_r+0xf9c>
 2004628:	100690ba 	slli	r3,r2,2
 200462c:	00808034 	movhi	r2,512
 2004630:	10919004 	addi	r2,r2,17984
 2004634:	1885883a 	add	r2,r3,r2
 2004638:	10800017 	ldw	r2,0(r2)
 200463c:	1000683a 	jmp	r2
 2004640:	020047a4 	muli	r8,zero,286
 2004644:	0200534c 	andi	r8,zero,333
 2004648:	0200534c 	andi	r8,zero,333
 200464c:	020047c4 	movi	r8,287
 2004650:	0200534c 	andi	r8,zero,333
 2004654:	0200534c 	andi	r8,zero,333
 2004658:	0200534c 	andi	r8,zero,333
 200465c:	0200534c 	andi	r8,zero,333
 2004660:	0200534c 	andi	r8,zero,333
 2004664:	0200534c 	andi	r8,zero,333
 2004668:	020047cc 	andi	r8,zero,287
 200466c:	02004800 	call	200480 <__alt_mem_mem_Nios_PI+0x480>
 2004670:	0200534c 	andi	r8,zero,333
 2004674:	020047f8 	rdprs	r8,zero,287
 2004678:	0200480c 	andi	r8,zero,288
 200467c:	0200534c 	andi	r8,zero,333
 2004680:	020048a0 	cmpeqi	r8,zero,290
 2004684:	020048a8 	cmpgeui	r8,zero,290
 2004688:	020048a8 	cmpgeui	r8,zero,290
 200468c:	020048a8 	cmpgeui	r8,zero,290
 2004690:	020048a8 	cmpgeui	r8,zero,290
 2004694:	020048a8 	cmpgeui	r8,zero,290
 2004698:	020048a8 	cmpgeui	r8,zero,290
 200469c:	020048a8 	cmpgeui	r8,zero,290
 20046a0:	020048a8 	cmpgeui	r8,zero,290
 20046a4:	020048a8 	cmpgeui	r8,zero,290
 20046a8:	0200534c 	andi	r8,zero,333
 20046ac:	0200534c 	andi	r8,zero,333
 20046b0:	0200534c 	andi	r8,zero,333
 20046b4:	0200534c 	andi	r8,zero,333
 20046b8:	0200534c 	andi	r8,zero,333
 20046bc:	0200534c 	andi	r8,zero,333
 20046c0:	0200534c 	andi	r8,zero,333
 20046c4:	0200534c 	andi	r8,zero,333
 20046c8:	0200534c 	andi	r8,zero,333
 20046cc:	0200534c 	andi	r8,zero,333
 20046d0:	02004950 	cmplti	r8,zero,293
 20046d4:	02004a50 	cmplti	r8,zero,297
 20046d8:	0200534c 	andi	r8,zero,333
 20046dc:	02004a50 	cmplti	r8,zero,297
 20046e0:	0200534c 	andi	r8,zero,333
 20046e4:	0200534c 	andi	r8,zero,333
 20046e8:	0200534c 	andi	r8,zero,333
 20046ec:	0200534c 	andi	r8,zero,333
 20046f0:	020048e4 	muli	r8,zero,291
 20046f4:	0200534c 	andi	r8,zero,333
 20046f8:	0200534c 	andi	r8,zero,333
 20046fc:	02004dec 	andhi	r8,zero,311
 2004700:	0200534c 	andi	r8,zero,333
 2004704:	0200534c 	andi	r8,zero,333
 2004708:	0200534c 	andi	r8,zero,333
 200470c:	0200534c 	andi	r8,zero,333
 2004710:	0200534c 	andi	r8,zero,333
 2004714:	02004f68 	cmpgeui	r8,zero,317
 2004718:	0200534c 	andi	r8,zero,333
 200471c:	0200534c 	andi	r8,zero,333
 2004720:	02005028 	cmpgeui	r8,zero,320
 2004724:	0200534c 	andi	r8,zero,333
 2004728:	0200534c 	andi	r8,zero,333
 200472c:	0200534c 	andi	r8,zero,333
 2004730:	0200534c 	andi	r8,zero,333
 2004734:	0200534c 	andi	r8,zero,333
 2004738:	0200534c 	andi	r8,zero,333
 200473c:	0200534c 	andi	r8,zero,333
 2004740:	0200534c 	andi	r8,zero,333
 2004744:	0200534c 	andi	r8,zero,333
 2004748:	0200534c 	andi	r8,zero,333
 200474c:	02004928 	cmpgeui	r8,zero,292
 2004750:	02004954 	movui	r8,293
 2004754:	02004a50 	cmplti	r8,zero,297
 2004758:	02004a50 	cmplti	r8,zero,297
 200475c:	02004a50 	cmplti	r8,zero,297
 2004760:	020048ec 	andhi	r8,zero,291
 2004764:	02004954 	movui	r8,293
 2004768:	0200534c 	andi	r8,zero,333
 200476c:	0200534c 	andi	r8,zero,333
 2004770:	020048f4 	movhi	r8,291
 2004774:	0200534c 	andi	r8,zero,333
 2004778:	02004d4c 	andi	r8,zero,309
 200477c:	02004df0 	cmpltui	r8,zero,311
 2004780:	02004e90 	cmplti	r8,zero,314
 2004784:	02004920 	cmpeqi	r8,zero,292
 2004788:	0200534c 	andi	r8,zero,333
 200478c:	02004ed8 	cmpnei	r8,zero,315
 2004790:	0200534c 	andi	r8,zero,333
 2004794:	02004f6c 	andhi	r8,zero,317
 2004798:	0200534c 	andi	r8,zero,333
 200479c:	0200534c 	andi	r8,zero,333
 20047a0:	02005038 	rdprs	r8,zero,320
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 20047a4:	e0bfc103 	ldbu	r2,-252(fp)
 20047a8:	10803fcc 	andi	r2,r2,255
 20047ac:	1080201c 	xori	r2,r2,128
 20047b0:	10bfe004 	addi	r2,r2,-128
 20047b4:	103f931e 	bne	r2,zero,2004604 <___vfprintf_internal_r+0x254>
				sign = ' ';
 20047b8:	00800804 	movi	r2,32
 20047bc:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 20047c0:	003f9006 	br	2004604 <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 20047c4:	9cc00054 	ori	r19,r19,1
			goto rflag;
 20047c8:	003f8e06 	br	2004604 <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 20047cc:	e0bfe917 	ldw	r2,-92(fp)
 20047d0:	10c00104 	addi	r3,r2,4
 20047d4:	e0ffe915 	stw	r3,-92(fp)
 20047d8:	10800017 	ldw	r2,0(r2)
 20047dc:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 20047e0:	e0bfad17 	ldw	r2,-332(fp)
 20047e4:	10000116 	blt	r2,zero,20047ec <___vfprintf_internal_r+0x43c>
				goto rflag;
 20047e8:	003f8606 	br	2004604 <___vfprintf_internal_r+0x254>
			width = -width;
 20047ec:	e0bfad17 	ldw	r2,-332(fp)
 20047f0:	0085c83a 	sub	r2,zero,r2
 20047f4:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 20047f8:	9cc00114 	ori	r19,r19,4
			goto rflag;
 20047fc:	003f8106 	br	2004604 <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 2004800:	00800ac4 	movi	r2,43
 2004804:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2004808:	003f7e06 	br	2004604 <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 200480c:	a805883a 	mov	r2,r21
 2004810:	15400044 	addi	r21,r2,1
 2004814:	10800003 	ldbu	r2,0(r2)
 2004818:	15003fcc 	andi	r20,r2,255
 200481c:	a500201c 	xori	r20,r20,128
 2004820:	a53fe004 	addi	r20,r20,-128
 2004824:	a0800a98 	cmpnei	r2,r20,42
 2004828:	10000a1e 	bne	r2,zero,2004854 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 200482c:	e0bfe917 	ldw	r2,-92(fp)
 2004830:	10c00104 	addi	r3,r2,4
 2004834:	e0ffe915 	stw	r3,-92(fp)
 2004838:	10800017 	ldw	r2,0(r2)
 200483c:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 2004840:	e0bfae17 	ldw	r2,-328(fp)
 2004844:	103f6f0e 	bge	r2,zero,2004604 <___vfprintf_internal_r+0x254>
					prec = -1;
 2004848:	00bfffc4 	movi	r2,-1
 200484c:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 2004850:	003f6c06 	br	2004604 <___vfprintf_internal_r+0x254>
			}
			n = 0;
 2004854:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 2004858:	00000906 	br	2004880 <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 200485c:	80c002a4 	muli	r3,r16,10
 2004860:	a0bff404 	addi	r2,r20,-48
 2004864:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2004868:	a805883a 	mov	r2,r21
 200486c:	15400044 	addi	r21,r2,1
 2004870:	10800003 	ldbu	r2,0(r2)
 2004874:	15003fcc 	andi	r20,r2,255
 2004878:	a500201c 	xori	r20,r20,128
 200487c:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 2004880:	a0bff404 	addi	r2,r20,-48
 2004884:	108002b0 	cmpltui	r2,r2,10
 2004888:	103ff41e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200488c:	8005883a 	mov	r2,r16
 2004890:	1000010e 	bge	r2,zero,2004898 <___vfprintf_internal_r+0x4e8>
 2004894:	00bfffc4 	movi	r2,-1
 2004898:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 200489c:	003f5f06 	br	200461c <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 20048a0:	9cc02014 	ori	r19,r19,128
			goto rflag;
 20048a4:	003f5706 	br	2004604 <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 20048a8:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 20048ac:	80c002a4 	muli	r3,r16,10
 20048b0:	a0bff404 	addi	r2,r20,-48
 20048b4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 20048b8:	a805883a 	mov	r2,r21
 20048bc:	15400044 	addi	r21,r2,1
 20048c0:	10800003 	ldbu	r2,0(r2)
 20048c4:	15003fcc 	andi	r20,r2,255
 20048c8:	a500201c 	xori	r20,r20,128
 20048cc:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 20048d0:	a0bff404 	addi	r2,r20,-48
 20048d4:	108002b0 	cmpltui	r2,r2,10
 20048d8:	103ff41e 	bne	r2,zero,20048ac <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 20048dc:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 20048e0:	003f4e06 	br	200461c <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 20048e4:	9cc00214 	ori	r19,r19,8
			goto rflag;
 20048e8:	003f4606 	br	2004604 <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 20048ec:	9cc01014 	ori	r19,r19,64
			goto rflag;
 20048f0:	003f4406 	br	2004604 <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 20048f4:	a8800003 	ldbu	r2,0(r21)
 20048f8:	10803fcc 	andi	r2,r2,255
 20048fc:	1080201c 	xori	r2,r2,128
 2004900:	10bfe004 	addi	r2,r2,-128
 2004904:	10801b18 	cmpnei	r2,r2,108
 2004908:	1000031e 	bne	r2,zero,2004918 <___vfprintf_internal_r+0x568>
				fmt++;
 200490c:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 2004910:	9cc00814 	ori	r19,r19,32
 2004914:	003f3b06 	br	2004604 <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 2004918:	9cc00414 	ori	r19,r19,16
			goto rflag;
 200491c:	003f3906 	br	2004604 <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 2004920:	9cc00814 	ori	r19,r19,32
			goto rflag;
 2004924:	003f3706 	br	2004604 <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 2004928:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 200492c:	e0bfe917 	ldw	r2,-92(fp)
 2004930:	10c00104 	addi	r3,r2,4
 2004934:	e0ffe915 	stw	r3,-92(fp)
 2004938:	10800017 	ldw	r2,0(r2)
 200493c:	90800005 	stb	r2,0(r18)
				size = 1;
 2004940:	00800044 	movi	r2,1
 2004944:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 2004948:	e03fc105 	stb	zero,-252(fp)
			break;
 200494c:	00028806 	br	2005370 <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 2004950:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 2004954:	9880080c 	andi	r2,r19,32
 2004958:	10000826 	beq	r2,zero,200497c <___vfprintf_internal_r+0x5cc>
 200495c:	e13fe917 	ldw	r4,-92(fp)
 2004960:	20800204 	addi	r2,r4,8
 2004964:	e0bfe915 	stw	r2,-92(fp)
 2004968:	20800017 	ldw	r2,0(r4)
 200496c:	20c00117 	ldw	r3,4(r4)
 2004970:	e0bfea15 	stw	r2,-88(fp)
 2004974:	e0ffeb15 	stw	r3,-84(fp)
 2004978:	00001e06 	br	20049f4 <___vfprintf_internal_r+0x644>
 200497c:	9880040c 	andi	r2,r19,16
 2004980:	10000826 	beq	r2,zero,20049a4 <___vfprintf_internal_r+0x5f4>
 2004984:	e0bfe917 	ldw	r2,-92(fp)
 2004988:	10c00104 	addi	r3,r2,4
 200498c:	e0ffe915 	stw	r3,-92(fp)
 2004990:	10800017 	ldw	r2,0(r2)
 2004994:	e0bfea15 	stw	r2,-88(fp)
 2004998:	1005d7fa 	srai	r2,r2,31
 200499c:	e0bfeb15 	stw	r2,-84(fp)
 20049a0:	00001406 	br	20049f4 <___vfprintf_internal_r+0x644>
 20049a4:	9880100c 	andi	r2,r19,64
 20049a8:	10000b26 	beq	r2,zero,20049d8 <___vfprintf_internal_r+0x628>
 20049ac:	e0bfe917 	ldw	r2,-92(fp)
 20049b0:	10c00104 	addi	r3,r2,4
 20049b4:	e0ffe915 	stw	r3,-92(fp)
 20049b8:	10800017 	ldw	r2,0(r2)
 20049bc:	10bfffcc 	andi	r2,r2,65535
 20049c0:	10a0001c 	xori	r2,r2,32768
 20049c4:	10a00004 	addi	r2,r2,-32768
 20049c8:	e0bfea15 	stw	r2,-88(fp)
 20049cc:	1005d7fa 	srai	r2,r2,31
 20049d0:	e0bfeb15 	stw	r2,-84(fp)
 20049d4:	00000706 	br	20049f4 <___vfprintf_internal_r+0x644>
 20049d8:	e0bfe917 	ldw	r2,-92(fp)
 20049dc:	10c00104 	addi	r3,r2,4
 20049e0:	e0ffe915 	stw	r3,-92(fp)
 20049e4:	10800017 	ldw	r2,0(r2)
 20049e8:	e0bfea15 	stw	r2,-88(fp)
 20049ec:	1005d7fa 	srai	r2,r2,31
 20049f0:	e0bfeb15 	stw	r2,-84(fp)
 20049f4:	e0bfea17 	ldw	r2,-88(fp)
 20049f8:	e0bfb115 	stw	r2,-316(fp)
 20049fc:	e0ffeb17 	ldw	r3,-84(fp)
 2004a00:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 2004a04:	e0bfb117 	ldw	r2,-316(fp)
 2004a08:	e0ffb217 	ldw	r3,-312(fp)
 2004a0c:	18000d0e 	bge	r3,zero,2004a44 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 2004a10:	000f883a 	mov	r7,zero
 2004a14:	0011883a 	mov	r8,zero
 2004a18:	e13fb117 	ldw	r4,-316(fp)
 2004a1c:	e17fb217 	ldw	r5,-312(fp)
 2004a20:	3905c83a 	sub	r2,r7,r4
 2004a24:	388d803a 	cmpltu	r6,r7,r2
 2004a28:	4147c83a 	sub	r3,r8,r5
 2004a2c:	1989c83a 	sub	r4,r3,r6
 2004a30:	2007883a 	mov	r3,r4
 2004a34:	e0bfb115 	stw	r2,-316(fp)
 2004a38:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 2004a3c:	00800b44 	movi	r2,45
 2004a40:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 2004a44:	00800044 	movi	r2,1
 2004a48:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 2004a4c:	0001b706 	br	200512c <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 2004a50:	9880020c 	andi	r2,r19,8
 2004a54:	10000826 	beq	r2,zero,2004a78 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 2004a58:	e13fe917 	ldw	r4,-92(fp)
 2004a5c:	20800204 	addi	r2,r4,8
 2004a60:	e0bfe915 	stw	r2,-92(fp)
 2004a64:	20800017 	ldw	r2,0(r4)
 2004a68:	20c00117 	ldw	r3,4(r4)
 2004a6c:	e0bfc215 	stw	r2,-248(fp)
 2004a70:	e0ffc315 	stw	r3,-244(fp)
 2004a74:	00000706 	br	2004a94 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 2004a78:	e13fe917 	ldw	r4,-92(fp)
 2004a7c:	20800204 	addi	r2,r4,8
 2004a80:	e0bfe915 	stw	r2,-92(fp)
 2004a84:	20800017 	ldw	r2,0(r4)
 2004a88:	20c00117 	ldw	r3,4(r4)
 2004a8c:	e0bfc215 	stw	r2,-248(fp)
 2004a90:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 2004a94:	e0bfc217 	ldw	r2,-248(fp)
 2004a98:	e0ffc317 	ldw	r3,-244(fp)
 2004a9c:	1009883a 	mov	r4,r2
 2004aa0:	180b883a 	mov	r5,r3
 2004aa4:	20016600 	call	2001660 <__fpclassifyd>
 2004aa8:	10800058 	cmpnei	r2,r2,1
 2004aac:	1000161e 	bne	r2,zero,2004b08 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 2004ab0:	e0bfc217 	ldw	r2,-248(fp)
 2004ab4:	e0ffc317 	ldw	r3,-244(fp)
 2004ab8:	000d883a 	mov	r6,zero
 2004abc:	000f883a 	mov	r7,zero
 2004ac0:	1009883a 	mov	r4,r2
 2004ac4:	180b883a 	mov	r5,r3
 2004ac8:	2002ac40 	call	2002ac4 <__ledf2>
 2004acc:	1000020e 	bge	r2,zero,2004ad8 <___vfprintf_internal_r+0x728>
					sign = '-';
 2004ad0:	00800b44 	movi	r2,45
 2004ad4:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 2004ad8:	a0801208 	cmpgei	r2,r20,72
 2004adc:	1000031e 	bne	r2,zero,2004aec <___vfprintf_internal_r+0x73c>
					cp = "INF";
 2004ae0:	048080b4 	movhi	r18,514
 2004ae4:	94b25304 	addi	r18,r18,-14004
 2004ae8:	00000206 	br	2004af4 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 2004aec:	048080b4 	movhi	r18,514
 2004af0:	94b25404 	addi	r18,r18,-14000
				size = 3;
 2004af4:	008000c4 	movi	r2,3
 2004af8:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 2004afc:	00bfdfc4 	movi	r2,-129
 2004b00:	98a6703a 	and	r19,r19,r2
				break;
 2004b04:	00021a06 	br	2005370 <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 2004b08:	e0bfc217 	ldw	r2,-248(fp)
 2004b0c:	e0ffc317 	ldw	r3,-244(fp)
 2004b10:	1009883a 	mov	r4,r2
 2004b14:	180b883a 	mov	r5,r3
 2004b18:	20016600 	call	2001660 <__fpclassifyd>
 2004b1c:	10000c1e 	bne	r2,zero,2004b50 <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 2004b20:	a0801208 	cmpgei	r2,r20,72
 2004b24:	1000031e 	bne	r2,zero,2004b34 <___vfprintf_internal_r+0x784>
					cp = "NAN";
 2004b28:	048080b4 	movhi	r18,514
 2004b2c:	94b25504 	addi	r18,r18,-13996
 2004b30:	00000206 	br	2004b3c <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 2004b34:	048080b4 	movhi	r18,514
 2004b38:	94b25604 	addi	r18,r18,-13992
				size = 3;
 2004b3c:	008000c4 	movi	r2,3
 2004b40:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 2004b44:	00bfdfc4 	movi	r2,-129
 2004b48:	98a6703a 	and	r19,r19,r2
				break;
 2004b4c:	00020806 	br	2005370 <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 2004b50:	e0bfae17 	ldw	r2,-328(fp)
 2004b54:	10bfffd8 	cmpnei	r2,r2,-1
 2004b58:	1000031e 	bne	r2,zero,2004b68 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 2004b5c:	00800184 	movi	r2,6
 2004b60:	e0bfae15 	stw	r2,-328(fp)
 2004b64:	00000806 	br	2004b88 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 2004b68:	a08019e0 	cmpeqi	r2,r20,103
 2004b6c:	1000021e 	bne	r2,zero,2004b78 <___vfprintf_internal_r+0x7c8>
 2004b70:	a08011d8 	cmpnei	r2,r20,71
 2004b74:	1000041e 	bne	r2,zero,2004b88 <___vfprintf_internal_r+0x7d8>
 2004b78:	e0bfae17 	ldw	r2,-328(fp)
 2004b7c:	1000021e 	bne	r2,zero,2004b88 <___vfprintf_internal_r+0x7d8>
				prec = 1;
 2004b80:	00800044 	movi	r2,1
 2004b84:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 2004b88:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 2004b8c:	e0bfc217 	ldw	r2,-248(fp)
 2004b90:	e0ffc317 	ldw	r3,-244(fp)
 2004b94:	dc800515 	stw	r18,20(sp)
 2004b98:	e13fc704 	addi	r4,fp,-228
 2004b9c:	d9000415 	stw	r4,16(sp)
 2004ba0:	dd000315 	stw	r20,12(sp)
 2004ba4:	e13fc404 	addi	r4,fp,-240
 2004ba8:	d9000215 	stw	r4,8(sp)
 2004bac:	e13fc144 	addi	r4,fp,-251
 2004bb0:	d9000115 	stw	r4,4(sp)
 2004bb4:	dcc00015 	stw	r19,0(sp)
 2004bb8:	e1ffae17 	ldw	r7,-328(fp)
 2004bbc:	100b883a 	mov	r5,r2
 2004bc0:	180d883a 	mov	r6,r3
 2004bc4:	e13fe617 	ldw	r4,-104(fp)
 2004bc8:	20064800 	call	2006480 <cvt>
 2004bcc:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 2004bd0:	a08019e0 	cmpeqi	r2,r20,103
 2004bd4:	1000021e 	bne	r2,zero,2004be0 <___vfprintf_internal_r+0x830>
 2004bd8:	a08011d8 	cmpnei	r2,r20,71
 2004bdc:	1000091e 	bne	r2,zero,2004c04 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 2004be0:	e0bfc417 	ldw	r2,-240(fp)
 2004be4:	10bfff50 	cmplti	r2,r2,-3
 2004be8:	1000031e 	bne	r2,zero,2004bf8 <___vfprintf_internal_r+0x848>
 2004bec:	e0bfc417 	ldw	r2,-240(fp)
 2004bf0:	e0ffae17 	ldw	r3,-328(fp)
 2004bf4:	1880020e 	bge	r3,r2,2004c00 <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 2004bf8:	a53fff84 	addi	r20,r20,-2
 2004bfc:	00000106 	br	2004c04 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 2004c00:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 2004c04:	a0801988 	cmpgei	r2,r20,102
 2004c08:	1000171e 	bne	r2,zero,2004c68 <___vfprintf_internal_r+0x8b8>
				--expt;
 2004c0c:	e0bfc417 	ldw	r2,-240(fp)
 2004c10:	10bfffc4 	addi	r2,r2,-1
 2004c14:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 2004c18:	e0bfc417 	ldw	r2,-240(fp)
 2004c1c:	e0ffc504 	addi	r3,fp,-236
 2004c20:	a00d883a 	mov	r6,r20
 2004c24:	100b883a 	mov	r5,r2
 2004c28:	1809883a 	mov	r4,r3
 2004c2c:	200668c0 	call	200668c <exponent>
 2004c30:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 2004c34:	e0bfc717 	ldw	r2,-228(fp)
 2004c38:	e0ffaf17 	ldw	r3,-324(fp)
 2004c3c:	1885883a 	add	r2,r3,r2
 2004c40:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 2004c44:	e0bfc717 	ldw	r2,-228(fp)
 2004c48:	10800088 	cmpgei	r2,r2,2
 2004c4c:	1000021e 	bne	r2,zero,2004c58 <___vfprintf_internal_r+0x8a8>
 2004c50:	9880004c 	andi	r2,r19,1
 2004c54:	10003526 	beq	r2,zero,2004d2c <___vfprintf_internal_r+0x97c>
					++size;
 2004c58:	e0bfb617 	ldw	r2,-296(fp)
 2004c5c:	10800044 	addi	r2,r2,1
 2004c60:	e0bfb615 	stw	r2,-296(fp)
 2004c64:	00003106 	br	2004d2c <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 2004c68:	a0801998 	cmpnei	r2,r20,102
 2004c6c:	1000181e 	bne	r2,zero,2004cd0 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 2004c70:	e0bfc417 	ldw	r2,-240(fp)
 2004c74:	00800c0e 	bge	zero,r2,2004ca8 <___vfprintf_internal_r+0x8f8>
						size = expt;
 2004c78:	e0bfc417 	ldw	r2,-240(fp)
 2004c7c:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 2004c80:	e0bfae17 	ldw	r2,-328(fp)
 2004c84:	1000021e 	bne	r2,zero,2004c90 <___vfprintf_internal_r+0x8e0>
 2004c88:	9880004c 	andi	r2,r19,1
 2004c8c:	10002526 	beq	r2,zero,2004d24 <___vfprintf_internal_r+0x974>
							size += prec + 1;
 2004c90:	e0bfae17 	ldw	r2,-328(fp)
 2004c94:	10800044 	addi	r2,r2,1
 2004c98:	e0ffb617 	ldw	r3,-296(fp)
 2004c9c:	1885883a 	add	r2,r3,r2
 2004ca0:	e0bfb615 	stw	r2,-296(fp)
 2004ca4:	00001f06 	br	2004d24 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 2004ca8:	e0bfae17 	ldw	r2,-328(fp)
 2004cac:	1000021e 	bne	r2,zero,2004cb8 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2004cb0:	9880004c 	andi	r2,r19,1
 2004cb4:	10000326 	beq	r2,zero,2004cc4 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 2004cb8:	e0bfae17 	ldw	r2,-328(fp)
 2004cbc:	10800084 	addi	r2,r2,2
 2004cc0:	00000106 	br	2004cc8 <___vfprintf_internal_r+0x918>
 2004cc4:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2004cc8:	e0bfb615 	stw	r2,-296(fp)
 2004ccc:	00001506 	br	2004d24 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 2004cd0:	e0ffc417 	ldw	r3,-240(fp)
 2004cd4:	e0bfc717 	ldw	r2,-228(fp)
 2004cd8:	18800816 	blt	r3,r2,2004cfc <___vfprintf_internal_r+0x94c>
					size = expt;
 2004cdc:	e0bfc417 	ldw	r2,-240(fp)
 2004ce0:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 2004ce4:	9880004c 	andi	r2,r19,1
 2004ce8:	10000e26 	beq	r2,zero,2004d24 <___vfprintf_internal_r+0x974>
						++size;
 2004cec:	e0bfb617 	ldw	r2,-296(fp)
 2004cf0:	10800044 	addi	r2,r2,1
 2004cf4:	e0bfb615 	stw	r2,-296(fp)
 2004cf8:	00000a06 	br	2004d24 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 2004cfc:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 2004d00:	00800416 	blt	zero,r2,2004d14 <___vfprintf_internal_r+0x964>
 2004d04:	e0bfc417 	ldw	r2,-240(fp)
 2004d08:	00c00084 	movi	r3,2
 2004d0c:	1885c83a 	sub	r2,r3,r2
 2004d10:	00000106 	br	2004d18 <___vfprintf_internal_r+0x968>
 2004d14:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 2004d18:	e0ffc717 	ldw	r3,-228(fp)
 2004d1c:	10c5883a 	add	r2,r2,r3
 2004d20:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 2004d24:	e0bfc417 	ldw	r2,-240(fp)
 2004d28:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 2004d2c:	e0bfc143 	ldbu	r2,-251(fp)
 2004d30:	10803fcc 	andi	r2,r2,255
 2004d34:	1080201c 	xori	r2,r2,128
 2004d38:	10bfe004 	addi	r2,r2,-128
 2004d3c:	10018b26 	beq	r2,zero,200536c <___vfprintf_internal_r+0xfbc>
				sign = '-';
 2004d40:	00800b44 	movi	r2,45
 2004d44:	e0bfc105 	stb	r2,-252(fp)
			break;
 2004d48:	00018806 	br	200536c <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 2004d4c:	9880080c 	andi	r2,r19,32
 2004d50:	10000d26 	beq	r2,zero,2004d88 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 2004d54:	e0bfe917 	ldw	r2,-92(fp)
 2004d58:	10c00104 	addi	r3,r2,4
 2004d5c:	e0ffe915 	stw	r3,-92(fp)
 2004d60:	10800017 	ldw	r2,0(r2)
 2004d64:	e0ffac17 	ldw	r3,-336(fp)
 2004d68:	e0fff015 	stw	r3,-64(fp)
 2004d6c:	1807d7fa 	srai	r3,r3,31
 2004d70:	e0fff115 	stw	r3,-60(fp)
 2004d74:	e0fff017 	ldw	r3,-64(fp)
 2004d78:	10c00015 	stw	r3,0(r2)
 2004d7c:	e0fff117 	ldw	r3,-60(fp)
 2004d80:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2004d84:	00054b06 	br	20062b4 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 2004d88:	9880040c 	andi	r2,r19,16
 2004d8c:	10000726 	beq	r2,zero,2004dac <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 2004d90:	e0bfe917 	ldw	r2,-92(fp)
 2004d94:	10c00104 	addi	r3,r2,4
 2004d98:	e0ffe915 	stw	r3,-92(fp)
 2004d9c:	10800017 	ldw	r2,0(r2)
 2004da0:	e0ffac17 	ldw	r3,-336(fp)
 2004da4:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2004da8:	00054206 	br	20062b4 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 2004dac:	9880100c 	andi	r2,r19,64
 2004db0:	10000726 	beq	r2,zero,2004dd0 <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2004db4:	e0bfe917 	ldw	r2,-92(fp)
 2004db8:	10c00104 	addi	r3,r2,4
 2004dbc:	e0ffe915 	stw	r3,-92(fp)
 2004dc0:	10800017 	ldw	r2,0(r2)
 2004dc4:	e0ffac17 	ldw	r3,-336(fp)
 2004dc8:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2004dcc:	00053906 	br	20062b4 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 2004dd0:	e0bfe917 	ldw	r2,-92(fp)
 2004dd4:	10c00104 	addi	r3,r2,4
 2004dd8:	e0ffe915 	stw	r3,-92(fp)
 2004ddc:	10800017 	ldw	r2,0(r2)
 2004de0:	e0ffac17 	ldw	r3,-336(fp)
 2004de4:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 2004de8:	00053206 	br	20062b4 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 2004dec:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 2004df0:	9880080c 	andi	r2,r19,32
 2004df4:	10000626 	beq	r2,zero,2004e10 <___vfprintf_internal_r+0xa60>
 2004df8:	e0bfe917 	ldw	r2,-92(fp)
 2004dfc:	10c00204 	addi	r3,r2,8
 2004e00:	e0ffe915 	stw	r3,-92(fp)
 2004e04:	15800017 	ldw	r22,0(r2)
 2004e08:	15c00117 	ldw	r23,4(r2)
 2004e0c:	00001c06 	br	2004e80 <___vfprintf_internal_r+0xad0>
 2004e10:	9880040c 	andi	r2,r19,16
 2004e14:	10000726 	beq	r2,zero,2004e34 <___vfprintf_internal_r+0xa84>
 2004e18:	e0bfe917 	ldw	r2,-92(fp)
 2004e1c:	10c00104 	addi	r3,r2,4
 2004e20:	e0ffe915 	stw	r3,-92(fp)
 2004e24:	10800017 	ldw	r2,0(r2)
 2004e28:	102d883a 	mov	r22,r2
 2004e2c:	002f883a 	mov	r23,zero
 2004e30:	00001306 	br	2004e80 <___vfprintf_internal_r+0xad0>
 2004e34:	9880100c 	andi	r2,r19,64
 2004e38:	10000b26 	beq	r2,zero,2004e68 <___vfprintf_internal_r+0xab8>
 2004e3c:	e0bfe917 	ldw	r2,-92(fp)
 2004e40:	10c00104 	addi	r3,r2,4
 2004e44:	e0ffe915 	stw	r3,-92(fp)
 2004e48:	10800017 	ldw	r2,0(r2)
 2004e4c:	e0bff215 	stw	r2,-56(fp)
 2004e50:	e03ff315 	stw	zero,-52(fp)
 2004e54:	e0bff217 	ldw	r2,-56(fp)
 2004e58:	15bfffcc 	andi	r22,r2,65535
 2004e5c:	e0fff317 	ldw	r3,-52(fp)
 2004e60:	182e703a 	and	r23,r3,zero
 2004e64:	00000606 	br	2004e80 <___vfprintf_internal_r+0xad0>
 2004e68:	e0bfe917 	ldw	r2,-92(fp)
 2004e6c:	10c00104 	addi	r3,r2,4
 2004e70:	e0ffe915 	stw	r3,-92(fp)
 2004e74:	10800017 	ldw	r2,0(r2)
 2004e78:	102d883a 	mov	r22,r2
 2004e7c:	002f883a 	mov	r23,zero
 2004e80:	e5bfb115 	stw	r22,-316(fp)
 2004e84:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 2004e88:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 2004e8c:	0000a606 	br	2005128 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 2004e90:	e0bfe917 	ldw	r2,-92(fp)
 2004e94:	10c00104 	addi	r3,r2,4
 2004e98:	e0ffe915 	stw	r3,-92(fp)
 2004e9c:	10800017 	ldw	r2,0(r2)
 2004ea0:	e0bfb115 	stw	r2,-316(fp)
 2004ea4:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 2004ea8:	00800084 	movi	r2,2
 2004eac:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 2004eb0:	008080b4 	movhi	r2,514
 2004eb4:	10b25704 	addi	r2,r2,-13988
 2004eb8:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 2004ebc:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 2004ec0:	00800c04 	movi	r2,48
 2004ec4:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 2004ec8:	05001e04 	movi	r20,120
 2004ecc:	00801e04 	movi	r2,120
 2004ed0:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2004ed4:	00009406 	br	2005128 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 2004ed8:	e0bfe917 	ldw	r2,-92(fp)
 2004edc:	10c00104 	addi	r3,r2,4
 2004ee0:	e0ffe915 	stw	r3,-92(fp)
 2004ee4:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 2004ee8:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 2004eec:	9000081e 	bne	r18,zero,2004f10 <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 2004ef0:	048080b4 	movhi	r18,514
 2004ef4:	94b25c04 	addi	r18,r18,-13968
				size = ((unsigned) prec > 6U) ? 6 : prec;
 2004ef8:	e0bfae17 	ldw	r2,-328(fp)
 2004efc:	10c001f0 	cmpltui	r3,r2,7
 2004f00:	1800011e 	bne	r3,zero,2004f08 <___vfprintf_internal_r+0xb58>
 2004f04:	00800184 	movi	r2,6
 2004f08:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2004f0c:	00011806 	br	2005370 <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 2004f10:	e0bfae17 	ldw	r2,-328(fp)
 2004f14:	10001016 	blt	r2,zero,2004f58 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 2004f18:	e0bfae17 	ldw	r2,-328(fp)
 2004f1c:	100d883a 	mov	r6,r2
 2004f20:	000b883a 	mov	r5,zero
 2004f24:	9009883a 	mov	r4,r18
 2004f28:	200b3f80 	call	200b3f8 <memchr>
 2004f2c:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 2004f30:	e0bfbf17 	ldw	r2,-260(fp)
 2004f34:	10000526 	beq	r2,zero,2004f4c <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 2004f38:	e0bfbf17 	ldw	r2,-260(fp)
 2004f3c:	9007883a 	mov	r3,r18
 2004f40:	10c5c83a 	sub	r2,r2,r3
 2004f44:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2004f48:	00010906 	br	2005370 <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 2004f4c:	e0bfae17 	ldw	r2,-328(fp)
 2004f50:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 2004f54:	00010606 	br	2005370 <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 2004f58:	9009883a 	mov	r4,r18
 2004f5c:	200417c0 	call	200417c <strlen>
 2004f60:	e0bfb615 	stw	r2,-296(fp)

			break;
 2004f64:	00010206 	br	2005370 <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 2004f68:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 2004f6c:	9880080c 	andi	r2,r19,32
 2004f70:	10000826 	beq	r2,zero,2004f94 <___vfprintf_internal_r+0xbe4>
 2004f74:	e0bfe917 	ldw	r2,-92(fp)
 2004f78:	10c00204 	addi	r3,r2,8
 2004f7c:	e0ffe915 	stw	r3,-92(fp)
 2004f80:	10c00017 	ldw	r3,0(r2)
 2004f84:	e0ffec15 	stw	r3,-80(fp)
 2004f88:	10c00117 	ldw	r3,4(r2)
 2004f8c:	e0ffed15 	stw	r3,-76(fp)
 2004f90:	00001e06 	br	200500c <___vfprintf_internal_r+0xc5c>
 2004f94:	9880040c 	andi	r2,r19,16
 2004f98:	10000726 	beq	r2,zero,2004fb8 <___vfprintf_internal_r+0xc08>
 2004f9c:	e0bfe917 	ldw	r2,-92(fp)
 2004fa0:	10c00104 	addi	r3,r2,4
 2004fa4:	e0ffe915 	stw	r3,-92(fp)
 2004fa8:	10800017 	ldw	r2,0(r2)
 2004fac:	e0bfec15 	stw	r2,-80(fp)
 2004fb0:	e03fed15 	stw	zero,-76(fp)
 2004fb4:	00001506 	br	200500c <___vfprintf_internal_r+0xc5c>
 2004fb8:	9880100c 	andi	r2,r19,64
 2004fbc:	10000d26 	beq	r2,zero,2004ff4 <___vfprintf_internal_r+0xc44>
 2004fc0:	e0bfe917 	ldw	r2,-92(fp)
 2004fc4:	10c00104 	addi	r3,r2,4
 2004fc8:	e0ffe915 	stw	r3,-92(fp)
 2004fcc:	10800017 	ldw	r2,0(r2)
 2004fd0:	e0bff415 	stw	r2,-48(fp)
 2004fd4:	e03ff515 	stw	zero,-44(fp)
 2004fd8:	e0bff417 	ldw	r2,-48(fp)
 2004fdc:	10bfffcc 	andi	r2,r2,65535
 2004fe0:	e0bfec15 	stw	r2,-80(fp)
 2004fe4:	e0fff517 	ldw	r3,-44(fp)
 2004fe8:	1806703a 	and	r3,r3,zero
 2004fec:	e0ffed15 	stw	r3,-76(fp)
 2004ff0:	00000606 	br	200500c <___vfprintf_internal_r+0xc5c>
 2004ff4:	e0bfe917 	ldw	r2,-92(fp)
 2004ff8:	10c00104 	addi	r3,r2,4
 2004ffc:	e0ffe915 	stw	r3,-92(fp)
 2005000:	10800017 	ldw	r2,0(r2)
 2005004:	e0bfec15 	stw	r2,-80(fp)
 2005008:	e03fed15 	stw	zero,-76(fp)
 200500c:	e0bfec17 	ldw	r2,-80(fp)
 2005010:	e0bfb115 	stw	r2,-316(fp)
 2005014:	e0ffed17 	ldw	r3,-76(fp)
 2005018:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 200501c:	00800044 	movi	r2,1
 2005020:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 2005024:	00004006 	br	2005128 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 2005028:	008080b4 	movhi	r2,514
 200502c:	10b25e04 	addi	r2,r2,-13960
 2005030:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 2005034:	00000306 	br	2005044 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 2005038:	008080b4 	movhi	r2,514
 200503c:	10b25704 	addi	r2,r2,-13988
 2005040:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 2005044:	9880080c 	andi	r2,r19,32
 2005048:	10000826 	beq	r2,zero,200506c <___vfprintf_internal_r+0xcbc>
 200504c:	e0bfe917 	ldw	r2,-92(fp)
 2005050:	10c00204 	addi	r3,r2,8
 2005054:	e0ffe915 	stw	r3,-92(fp)
 2005058:	10c00017 	ldw	r3,0(r2)
 200505c:	e0ffee15 	stw	r3,-72(fp)
 2005060:	10c00117 	ldw	r3,4(r2)
 2005064:	e0ffef15 	stw	r3,-68(fp)
 2005068:	00001e06 	br	20050e4 <___vfprintf_internal_r+0xd34>
 200506c:	9880040c 	andi	r2,r19,16
 2005070:	10000726 	beq	r2,zero,2005090 <___vfprintf_internal_r+0xce0>
 2005074:	e0bfe917 	ldw	r2,-92(fp)
 2005078:	10c00104 	addi	r3,r2,4
 200507c:	e0ffe915 	stw	r3,-92(fp)
 2005080:	10800017 	ldw	r2,0(r2)
 2005084:	e0bfee15 	stw	r2,-72(fp)
 2005088:	e03fef15 	stw	zero,-68(fp)
 200508c:	00001506 	br	20050e4 <___vfprintf_internal_r+0xd34>
 2005090:	9880100c 	andi	r2,r19,64
 2005094:	10000d26 	beq	r2,zero,20050cc <___vfprintf_internal_r+0xd1c>
 2005098:	e0bfe917 	ldw	r2,-92(fp)
 200509c:	10c00104 	addi	r3,r2,4
 20050a0:	e0ffe915 	stw	r3,-92(fp)
 20050a4:	10800017 	ldw	r2,0(r2)
 20050a8:	e0bff615 	stw	r2,-40(fp)
 20050ac:	e03ff715 	stw	zero,-36(fp)
 20050b0:	e0bff617 	ldw	r2,-40(fp)
 20050b4:	10bfffcc 	andi	r2,r2,65535
 20050b8:	e0bfee15 	stw	r2,-72(fp)
 20050bc:	e0fff717 	ldw	r3,-36(fp)
 20050c0:	1806703a 	and	r3,r3,zero
 20050c4:	e0ffef15 	stw	r3,-68(fp)
 20050c8:	00000606 	br	20050e4 <___vfprintf_internal_r+0xd34>
 20050cc:	e0bfe917 	ldw	r2,-92(fp)
 20050d0:	10c00104 	addi	r3,r2,4
 20050d4:	e0ffe915 	stw	r3,-92(fp)
 20050d8:	10800017 	ldw	r2,0(r2)
 20050dc:	e0bfee15 	stw	r2,-72(fp)
 20050e0:	e03fef15 	stw	zero,-68(fp)
 20050e4:	e0bfee17 	ldw	r2,-72(fp)
 20050e8:	e0bfb115 	stw	r2,-316(fp)
 20050ec:	e0ffef17 	ldw	r3,-68(fp)
 20050f0:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 20050f4:	00800084 	movi	r2,2
 20050f8:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 20050fc:	9880004c 	andi	r2,r19,1
 2005100:	10000926 	beq	r2,zero,2005128 <___vfprintf_internal_r+0xd78>
 2005104:	e0bfb117 	ldw	r2,-316(fp)
 2005108:	e0ffb217 	ldw	r3,-312(fp)
 200510c:	10c4b03a 	or	r2,r2,r3
 2005110:	10000526 	beq	r2,zero,2005128 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 2005114:	00800c04 	movi	r2,48
 2005118:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200511c:	a005883a 	mov	r2,r20
 2005120:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 2005124:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 2005128:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200512c:	e0bfae17 	ldw	r2,-328(fp)
 2005130:	e0bfb415 	stw	r2,-304(fp)
 2005134:	e0bfb417 	ldw	r2,-304(fp)
 2005138:	10000216 	blt	r2,zero,2005144 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 200513c:	00bfdfc4 	movi	r2,-129
 2005140:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 2005144:	e4bfdb04 	addi	r18,fp,-148
 2005148:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 200514c:	e0bfb117 	ldw	r2,-316(fp)
 2005150:	e0ffb217 	ldw	r3,-312(fp)
 2005154:	10c4b03a 	or	r2,r2,r3
 2005158:	1000021e 	bne	r2,zero,2005164 <___vfprintf_internal_r+0xdb4>
 200515c:	e0bfae17 	ldw	r2,-328(fp)
 2005160:	10006c26 	beq	r2,zero,2005314 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 2005164:	e0bfb303 	ldbu	r2,-308(fp)
 2005168:	10c00060 	cmpeqi	r3,r2,1
 200516c:	1800211e 	bne	r3,zero,20051f4 <___vfprintf_internal_r+0xe44>
 2005170:	10c000a0 	cmpeqi	r3,r2,2
 2005174:	1800491e 	bne	r3,zero,200529c <___vfprintf_internal_r+0xeec>
 2005178:	10005d1e 	bne	r2,zero,20052f0 <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200517c:	94bfffc4 	addi	r18,r18,-1
 2005180:	e0bfb117 	ldw	r2,-316(fp)
 2005184:	108001cc 	andi	r2,r2,7
 2005188:	10800c04 	addi	r2,r2,48
 200518c:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 2005190:	e0bfb217 	ldw	r2,-312(fp)
 2005194:	1004977a 	slli	r2,r2,29
 2005198:	e0ffb117 	ldw	r3,-316(fp)
 200519c:	1806d0fa 	srli	r3,r3,3
 20051a0:	1884b03a 	or	r2,r3,r2
 20051a4:	e0bfb115 	stw	r2,-316(fp)
 20051a8:	e0bfb217 	ldw	r2,-312(fp)
 20051ac:	1004d0fa 	srli	r2,r2,3
 20051b0:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 20051b4:	e0bfb117 	ldw	r2,-316(fp)
 20051b8:	e0ffb217 	ldw	r3,-312(fp)
 20051bc:	10c4b03a 	or	r2,r2,r3
 20051c0:	103fee1e 	bne	r2,zero,200517c <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 20051c4:	9880004c 	andi	r2,r19,1
 20051c8:	10005026 	beq	r2,zero,200530c <___vfprintf_internal_r+0xf5c>
 20051cc:	90800003 	ldbu	r2,0(r18)
 20051d0:	10803fcc 	andi	r2,r2,255
 20051d4:	1080201c 	xori	r2,r2,128
 20051d8:	10bfe004 	addi	r2,r2,-128
 20051dc:	10800c20 	cmpeqi	r2,r2,48
 20051e0:	10004a1e 	bne	r2,zero,200530c <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 20051e4:	94bfffc4 	addi	r18,r18,-1
 20051e8:	00800c04 	movi	r2,48
 20051ec:	90800005 	stb	r2,0(r18)
					break;
 20051f0:	00004606 	br	200530c <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 20051f4:	e0bfb217 	ldw	r2,-312(fp)
 20051f8:	10000a1e 	bne	r2,zero,2005224 <___vfprintf_internal_r+0xe74>
 20051fc:	e0bfb217 	ldw	r2,-312(fp)
 2005200:	1000031e 	bne	r2,zero,2005210 <___vfprintf_internal_r+0xe60>
 2005204:	e0bfb117 	ldw	r2,-316(fp)
 2005208:	108002a8 	cmpgeui	r2,r2,10
 200520c:	1000051e 	bne	r2,zero,2005224 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 2005210:	94bfffc4 	addi	r18,r18,-1
 2005214:	e0bfb117 	ldw	r2,-316(fp)
 2005218:	10800c04 	addi	r2,r2,48
 200521c:	90800005 	stb	r2,0(r18)
						break;
 2005220:	00003b06 	br	2005310 <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 2005224:	94bfffc4 	addi	r18,r18,-1
 2005228:	e0bfb117 	ldw	r2,-316(fp)
 200522c:	e0ffb217 	ldw	r3,-312(fp)
 2005230:	01800284 	movi	r6,10
 2005234:	000f883a 	mov	r7,zero
 2005238:	1009883a 	mov	r4,r2
 200523c:	180b883a 	mov	r5,r3
 2005240:	2010c900 	call	2010c90 <__umoddi3>
 2005244:	1009883a 	mov	r4,r2
 2005248:	180b883a 	mov	r5,r3
 200524c:	2005883a 	mov	r2,r4
 2005250:	2807883a 	mov	r3,r5
 2005254:	10800c04 	addi	r2,r2,48
 2005258:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200525c:	e0bfb117 	ldw	r2,-316(fp)
 2005260:	e0ffb217 	ldw	r3,-312(fp)
 2005264:	01800284 	movi	r6,10
 2005268:	000f883a 	mov	r7,zero
 200526c:	1009883a 	mov	r4,r2
 2005270:	180b883a 	mov	r5,r3
 2005274:	20107180 	call	2010718 <__udivdi3>
 2005278:	1009883a 	mov	r4,r2
 200527c:	180b883a 	mov	r5,r3
 2005280:	e13fb115 	stw	r4,-316(fp)
 2005284:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 2005288:	e0bfb117 	ldw	r2,-316(fp)
 200528c:	e0ffb217 	ldw	r3,-312(fp)
 2005290:	10c4b03a 	or	r2,r2,r3
 2005294:	103fe31e 	bne	r2,zero,2005224 <___vfprintf_internal_r+0xe74>
					break;
 2005298:	00001d06 	br	2005310 <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200529c:	94bfffc4 	addi	r18,r18,-1
 20052a0:	e0bfb117 	ldw	r2,-316(fp)
 20052a4:	108003cc 	andi	r2,r2,15
 20052a8:	e0ffb717 	ldw	r3,-292(fp)
 20052ac:	1885883a 	add	r2,r3,r2
 20052b0:	10800003 	ldbu	r2,0(r2)
 20052b4:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 20052b8:	e0bfb217 	ldw	r2,-312(fp)
 20052bc:	1004973a 	slli	r2,r2,28
 20052c0:	e0ffb117 	ldw	r3,-316(fp)
 20052c4:	1806d13a 	srli	r3,r3,4
 20052c8:	1884b03a 	or	r2,r3,r2
 20052cc:	e0bfb115 	stw	r2,-316(fp)
 20052d0:	e0bfb217 	ldw	r2,-312(fp)
 20052d4:	1004d13a 	srli	r2,r2,4
 20052d8:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 20052dc:	e0bfb117 	ldw	r2,-316(fp)
 20052e0:	e0ffb217 	ldw	r3,-312(fp)
 20052e4:	10c4b03a 	or	r2,r2,r3
 20052e8:	103fec1e 	bne	r2,zero,200529c <___vfprintf_internal_r+0xeec>
					break;
 20052ec:	00000806 	br	2005310 <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 20052f0:	048080b4 	movhi	r18,514
 20052f4:	94b26304 	addi	r18,r18,-13940
					size = strlen (cp);
 20052f8:	9009883a 	mov	r4,r18
 20052fc:	200417c0 	call	200417c <strlen>
 2005300:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 2005304:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2005308:	00001906 	br	2005370 <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 200530c:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 2005310:	00000706 	br	2005330 <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 2005314:	e0bfb303 	ldbu	r2,-308(fp)
 2005318:	1000051e 	bne	r2,zero,2005330 <___vfprintf_internal_r+0xf80>
 200531c:	9880004c 	andi	r2,r19,1
 2005320:	10000326 	beq	r2,zero,2005330 <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 2005324:	94bfffc4 	addi	r18,r18,-1
 2005328:	00800c04 	movi	r2,48
 200532c:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 2005330:	e0bfdb04 	addi	r2,fp,-148
 2005334:	10800a04 	addi	r2,r2,40
 2005338:	1007883a 	mov	r3,r2
 200533c:	9005883a 	mov	r2,r18
 2005340:	1885c83a 	sub	r2,r3,r2
 2005344:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 2005348:	00000906 	br	2005370 <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 200534c:	a003dc26 	beq	r20,zero,20062c0 <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 2005350:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 2005354:	a005883a 	mov	r2,r20
 2005358:	90800005 	stb	r2,0(r18)
			size = 1;
 200535c:	00800044 	movi	r2,1
 2005360:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 2005364:	e03fc105 	stb	zero,-252(fp)
			break;
 2005368:	00000106 	br	2005370 <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 200536c:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 2005370:	e0ffb417 	ldw	r3,-304(fp)
 2005374:	e0bfb617 	ldw	r2,-296(fp)
 2005378:	10c0010e 	bge	r2,r3,2005380 <___vfprintf_internal_r+0xfd0>
 200537c:	1805883a 	mov	r2,r3
 2005380:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 2005384:	e0bfc103 	ldbu	r2,-252(fp)
 2005388:	10803fcc 	andi	r2,r2,255
 200538c:	1080201c 	xori	r2,r2,128
 2005390:	10bfe004 	addi	r2,r2,-128
 2005394:	10000326 	beq	r2,zero,20053a4 <___vfprintf_internal_r+0xff4>
			realsz++;
 2005398:	e0bfb517 	ldw	r2,-300(fp)
 200539c:	10800044 	addi	r2,r2,1
 20053a0:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 20053a4:	9880008c 	andi	r2,r19,2
 20053a8:	10000326 	beq	r2,zero,20053b8 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 20053ac:	e0bfb517 	ldw	r2,-300(fp)
 20053b0:	10800084 	addi	r2,r2,2
 20053b4:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 20053b8:	9880210c 	andi	r2,r19,132
 20053bc:	1000351e 	bne	r2,zero,2005494 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 20053c0:	e0ffad17 	ldw	r3,-332(fp)
 20053c4:	e0bfb517 	ldw	r2,-300(fp)
 20053c8:	18a1c83a 	sub	r16,r3,r2
 20053cc:	0400310e 	bge	zero,r16,2005494 <___vfprintf_internal_r+0x10e4>
 20053d0:	00001706 	br	2005430 <___vfprintf_internal_r+0x1080>
 20053d4:	008080b4 	movhi	r2,514
 20053d8:	10b26a84 	addi	r2,r2,-13910
 20053dc:	88800015 	stw	r2,0(r17)
 20053e0:	00800404 	movi	r2,16
 20053e4:	88800115 	stw	r2,4(r17)
 20053e8:	e0bfca17 	ldw	r2,-216(fp)
 20053ec:	10800404 	addi	r2,r2,16
 20053f0:	e0bfca15 	stw	r2,-216(fp)
 20053f4:	8c400204 	addi	r17,r17,8
 20053f8:	e0bfc917 	ldw	r2,-220(fp)
 20053fc:	10800044 	addi	r2,r2,1
 2005400:	e0bfc915 	stw	r2,-220(fp)
 2005404:	e0bfc917 	ldw	r2,-220(fp)
 2005408:	10800210 	cmplti	r2,r2,8
 200540c:	1000071e 	bne	r2,zero,200542c <___vfprintf_internal_r+0x107c>
 2005410:	e0bfc804 	addi	r2,fp,-224
 2005414:	100d883a 	mov	r6,r2
 2005418:	e17fe717 	ldw	r5,-100(fp)
 200541c:	e13fe617 	ldw	r4,-104(fp)
 2005420:	200e5840 	call	200e584 <__sprint_r>
 2005424:	1003b41e 	bne	r2,zero,20062f8 <___vfprintf_internal_r+0x1f48>
 2005428:	e47fcb04 	addi	r17,fp,-212
 200542c:	843ffc04 	addi	r16,r16,-16
 2005430:	80800448 	cmpgei	r2,r16,17
 2005434:	103fe71e 	bne	r2,zero,20053d4 <___vfprintf_internal_r+0x1024>
 2005438:	008080b4 	movhi	r2,514
 200543c:	10b26a84 	addi	r2,r2,-13910
 2005440:	88800015 	stw	r2,0(r17)
 2005444:	8005883a 	mov	r2,r16
 2005448:	88800115 	stw	r2,4(r17)
 200544c:	e0bfca17 	ldw	r2,-216(fp)
 2005450:	8007883a 	mov	r3,r16
 2005454:	10c5883a 	add	r2,r2,r3
 2005458:	e0bfca15 	stw	r2,-216(fp)
 200545c:	8c400204 	addi	r17,r17,8
 2005460:	e0bfc917 	ldw	r2,-220(fp)
 2005464:	10800044 	addi	r2,r2,1
 2005468:	e0bfc915 	stw	r2,-220(fp)
 200546c:	e0bfc917 	ldw	r2,-220(fp)
 2005470:	10800210 	cmplti	r2,r2,8
 2005474:	1000071e 	bne	r2,zero,2005494 <___vfprintf_internal_r+0x10e4>
 2005478:	e0bfc804 	addi	r2,fp,-224
 200547c:	100d883a 	mov	r6,r2
 2005480:	e17fe717 	ldw	r5,-100(fp)
 2005484:	e13fe617 	ldw	r4,-104(fp)
 2005488:	200e5840 	call	200e584 <__sprint_r>
 200548c:	10039c1e 	bne	r2,zero,2006300 <___vfprintf_internal_r+0x1f50>
 2005490:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 2005494:	e0bfc103 	ldbu	r2,-252(fp)
 2005498:	10803fcc 	andi	r2,r2,255
 200549c:	1080201c 	xori	r2,r2,128
 20054a0:	10bfe004 	addi	r2,r2,-128
 20054a4:	10001526 	beq	r2,zero,20054fc <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 20054a8:	e0bfc104 	addi	r2,fp,-252
 20054ac:	88800015 	stw	r2,0(r17)
 20054b0:	00800044 	movi	r2,1
 20054b4:	88800115 	stw	r2,4(r17)
 20054b8:	e0bfca17 	ldw	r2,-216(fp)
 20054bc:	10800044 	addi	r2,r2,1
 20054c0:	e0bfca15 	stw	r2,-216(fp)
 20054c4:	8c400204 	addi	r17,r17,8
 20054c8:	e0bfc917 	ldw	r2,-220(fp)
 20054cc:	10800044 	addi	r2,r2,1
 20054d0:	e0bfc915 	stw	r2,-220(fp)
 20054d4:	e0bfc917 	ldw	r2,-220(fp)
 20054d8:	10800210 	cmplti	r2,r2,8
 20054dc:	1000071e 	bne	r2,zero,20054fc <___vfprintf_internal_r+0x114c>
 20054e0:	e0bfc804 	addi	r2,fp,-224
 20054e4:	100d883a 	mov	r6,r2
 20054e8:	e17fe717 	ldw	r5,-100(fp)
 20054ec:	e13fe617 	ldw	r4,-104(fp)
 20054f0:	200e5840 	call	200e584 <__sprint_r>
 20054f4:	1003841e 	bne	r2,zero,2006308 <___vfprintf_internal_r+0x1f58>
 20054f8:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 20054fc:	9880008c 	andi	r2,r19,2
 2005500:	10001526 	beq	r2,zero,2005558 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 2005504:	e0bfe504 	addi	r2,fp,-108
 2005508:	88800015 	stw	r2,0(r17)
 200550c:	00800084 	movi	r2,2
 2005510:	88800115 	stw	r2,4(r17)
 2005514:	e0bfca17 	ldw	r2,-216(fp)
 2005518:	10800084 	addi	r2,r2,2
 200551c:	e0bfca15 	stw	r2,-216(fp)
 2005520:	8c400204 	addi	r17,r17,8
 2005524:	e0bfc917 	ldw	r2,-220(fp)
 2005528:	10800044 	addi	r2,r2,1
 200552c:	e0bfc915 	stw	r2,-220(fp)
 2005530:	e0bfc917 	ldw	r2,-220(fp)
 2005534:	10800210 	cmplti	r2,r2,8
 2005538:	1000071e 	bne	r2,zero,2005558 <___vfprintf_internal_r+0x11a8>
 200553c:	e0bfc804 	addi	r2,fp,-224
 2005540:	100d883a 	mov	r6,r2
 2005544:	e17fe717 	ldw	r5,-100(fp)
 2005548:	e13fe617 	ldw	r4,-104(fp)
 200554c:	200e5840 	call	200e584 <__sprint_r>
 2005550:	10036f1e 	bne	r2,zero,2006310 <___vfprintf_internal_r+0x1f60>
 2005554:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 2005558:	9880210c 	andi	r2,r19,132
 200555c:	10802018 	cmpnei	r2,r2,128
 2005560:	1000351e 	bne	r2,zero,2005638 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 2005564:	e0ffad17 	ldw	r3,-332(fp)
 2005568:	e0bfb517 	ldw	r2,-300(fp)
 200556c:	18a1c83a 	sub	r16,r3,r2
 2005570:	0400310e 	bge	zero,r16,2005638 <___vfprintf_internal_r+0x1288>
 2005574:	00001706 	br	20055d4 <___vfprintf_internal_r+0x1224>
 2005578:	008080b4 	movhi	r2,514
 200557c:	10b26e84 	addi	r2,r2,-13894
 2005580:	88800015 	stw	r2,0(r17)
 2005584:	00800404 	movi	r2,16
 2005588:	88800115 	stw	r2,4(r17)
 200558c:	e0bfca17 	ldw	r2,-216(fp)
 2005590:	10800404 	addi	r2,r2,16
 2005594:	e0bfca15 	stw	r2,-216(fp)
 2005598:	8c400204 	addi	r17,r17,8
 200559c:	e0bfc917 	ldw	r2,-220(fp)
 20055a0:	10800044 	addi	r2,r2,1
 20055a4:	e0bfc915 	stw	r2,-220(fp)
 20055a8:	e0bfc917 	ldw	r2,-220(fp)
 20055ac:	10800210 	cmplti	r2,r2,8
 20055b0:	1000071e 	bne	r2,zero,20055d0 <___vfprintf_internal_r+0x1220>
 20055b4:	e0bfc804 	addi	r2,fp,-224
 20055b8:	100d883a 	mov	r6,r2
 20055bc:	e17fe717 	ldw	r5,-100(fp)
 20055c0:	e13fe617 	ldw	r4,-104(fp)
 20055c4:	200e5840 	call	200e584 <__sprint_r>
 20055c8:	1003531e 	bne	r2,zero,2006318 <___vfprintf_internal_r+0x1f68>
 20055cc:	e47fcb04 	addi	r17,fp,-212
 20055d0:	843ffc04 	addi	r16,r16,-16
 20055d4:	80800448 	cmpgei	r2,r16,17
 20055d8:	103fe71e 	bne	r2,zero,2005578 <___vfprintf_internal_r+0x11c8>
 20055dc:	008080b4 	movhi	r2,514
 20055e0:	10b26e84 	addi	r2,r2,-13894
 20055e4:	88800015 	stw	r2,0(r17)
 20055e8:	8005883a 	mov	r2,r16
 20055ec:	88800115 	stw	r2,4(r17)
 20055f0:	e0bfca17 	ldw	r2,-216(fp)
 20055f4:	8007883a 	mov	r3,r16
 20055f8:	10c5883a 	add	r2,r2,r3
 20055fc:	e0bfca15 	stw	r2,-216(fp)
 2005600:	8c400204 	addi	r17,r17,8
 2005604:	e0bfc917 	ldw	r2,-220(fp)
 2005608:	10800044 	addi	r2,r2,1
 200560c:	e0bfc915 	stw	r2,-220(fp)
 2005610:	e0bfc917 	ldw	r2,-220(fp)
 2005614:	10800210 	cmplti	r2,r2,8
 2005618:	1000071e 	bne	r2,zero,2005638 <___vfprintf_internal_r+0x1288>
 200561c:	e0bfc804 	addi	r2,fp,-224
 2005620:	100d883a 	mov	r6,r2
 2005624:	e17fe717 	ldw	r5,-100(fp)
 2005628:	e13fe617 	ldw	r4,-104(fp)
 200562c:	200e5840 	call	200e584 <__sprint_r>
 2005630:	10033b1e 	bne	r2,zero,2006320 <___vfprintf_internal_r+0x1f70>
 2005634:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2005638:	e0ffb417 	ldw	r3,-304(fp)
 200563c:	e0bfb617 	ldw	r2,-296(fp)
 2005640:	18a1c83a 	sub	r16,r3,r2
 2005644:	0400310e 	bge	zero,r16,200570c <___vfprintf_internal_r+0x135c>
 2005648:	00001706 	br	20056a8 <___vfprintf_internal_r+0x12f8>
 200564c:	008080b4 	movhi	r2,514
 2005650:	10b26e84 	addi	r2,r2,-13894
 2005654:	88800015 	stw	r2,0(r17)
 2005658:	00800404 	movi	r2,16
 200565c:	88800115 	stw	r2,4(r17)
 2005660:	e0bfca17 	ldw	r2,-216(fp)
 2005664:	10800404 	addi	r2,r2,16
 2005668:	e0bfca15 	stw	r2,-216(fp)
 200566c:	8c400204 	addi	r17,r17,8
 2005670:	e0bfc917 	ldw	r2,-220(fp)
 2005674:	10800044 	addi	r2,r2,1
 2005678:	e0bfc915 	stw	r2,-220(fp)
 200567c:	e0bfc917 	ldw	r2,-220(fp)
 2005680:	10800210 	cmplti	r2,r2,8
 2005684:	1000071e 	bne	r2,zero,20056a4 <___vfprintf_internal_r+0x12f4>
 2005688:	e0bfc804 	addi	r2,fp,-224
 200568c:	100d883a 	mov	r6,r2
 2005690:	e17fe717 	ldw	r5,-100(fp)
 2005694:	e13fe617 	ldw	r4,-104(fp)
 2005698:	200e5840 	call	200e584 <__sprint_r>
 200569c:	1003221e 	bne	r2,zero,2006328 <___vfprintf_internal_r+0x1f78>
 20056a0:	e47fcb04 	addi	r17,fp,-212
 20056a4:	843ffc04 	addi	r16,r16,-16
 20056a8:	80800448 	cmpgei	r2,r16,17
 20056ac:	103fe71e 	bne	r2,zero,200564c <___vfprintf_internal_r+0x129c>
 20056b0:	008080b4 	movhi	r2,514
 20056b4:	10b26e84 	addi	r2,r2,-13894
 20056b8:	88800015 	stw	r2,0(r17)
 20056bc:	8005883a 	mov	r2,r16
 20056c0:	88800115 	stw	r2,4(r17)
 20056c4:	e0bfca17 	ldw	r2,-216(fp)
 20056c8:	8007883a 	mov	r3,r16
 20056cc:	10c5883a 	add	r2,r2,r3
 20056d0:	e0bfca15 	stw	r2,-216(fp)
 20056d4:	8c400204 	addi	r17,r17,8
 20056d8:	e0bfc917 	ldw	r2,-220(fp)
 20056dc:	10800044 	addi	r2,r2,1
 20056e0:	e0bfc915 	stw	r2,-220(fp)
 20056e4:	e0bfc917 	ldw	r2,-220(fp)
 20056e8:	10800210 	cmplti	r2,r2,8
 20056ec:	1000071e 	bne	r2,zero,200570c <___vfprintf_internal_r+0x135c>
 20056f0:	e0bfc804 	addi	r2,fp,-224
 20056f4:	100d883a 	mov	r6,r2
 20056f8:	e17fe717 	ldw	r5,-100(fp)
 20056fc:	e13fe617 	ldw	r4,-104(fp)
 2005700:	200e5840 	call	200e584 <__sprint_r>
 2005704:	10030a1e 	bne	r2,zero,2006330 <___vfprintf_internal_r+0x1f80>
 2005708:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 200570c:	9880400c 	andi	r2,r19,256
 2005710:	1000161e 	bne	r2,zero,200576c <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 2005714:	8c800015 	stw	r18,0(r17)
 2005718:	e0bfb617 	ldw	r2,-296(fp)
 200571c:	88800115 	stw	r2,4(r17)
 2005720:	e0ffca17 	ldw	r3,-216(fp)
 2005724:	e0bfb617 	ldw	r2,-296(fp)
 2005728:	1885883a 	add	r2,r3,r2
 200572c:	e0bfca15 	stw	r2,-216(fp)
 2005730:	8c400204 	addi	r17,r17,8
 2005734:	e0bfc917 	ldw	r2,-220(fp)
 2005738:	10800044 	addi	r2,r2,1
 200573c:	e0bfc915 	stw	r2,-220(fp)
 2005740:	e0bfc917 	ldw	r2,-220(fp)
 2005744:	10800210 	cmplti	r2,r2,8
 2005748:	10028c1e 	bne	r2,zero,200617c <___vfprintf_internal_r+0x1dcc>
 200574c:	e0bfc804 	addi	r2,fp,-224
 2005750:	100d883a 	mov	r6,r2
 2005754:	e17fe717 	ldw	r5,-100(fp)
 2005758:	e13fe617 	ldw	r4,-104(fp)
 200575c:	200e5840 	call	200e584 <__sprint_r>
 2005760:	1002f51e 	bne	r2,zero,2006338 <___vfprintf_internal_r+0x1f88>
 2005764:	e47fcb04 	addi	r17,fp,-212
 2005768:	00028406 	br	200617c <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 200576c:	a0801990 	cmplti	r2,r20,102
 2005770:	1001d11e 	bne	r2,zero,2005eb8 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 2005774:	e0bfc217 	ldw	r2,-248(fp)
 2005778:	e0ffc317 	ldw	r3,-244(fp)
 200577c:	000d883a 	mov	r6,zero
 2005780:	000f883a 	mov	r7,zero
 2005784:	1009883a 	mov	r4,r2
 2005788:	180b883a 	mov	r5,r3
 200578c:	20029600 	call	2002960 <__eqdf2>
 2005790:	1000661e 	bne	r2,zero,200592c <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2005794:	008080b4 	movhi	r2,514
 2005798:	10b26a04 	addi	r2,r2,-13912
 200579c:	88800015 	stw	r2,0(r17)
 20057a0:	00800044 	movi	r2,1
 20057a4:	88800115 	stw	r2,4(r17)
 20057a8:	e0bfca17 	ldw	r2,-216(fp)
 20057ac:	10800044 	addi	r2,r2,1
 20057b0:	e0bfca15 	stw	r2,-216(fp)
 20057b4:	8c400204 	addi	r17,r17,8
 20057b8:	e0bfc917 	ldw	r2,-220(fp)
 20057bc:	10800044 	addi	r2,r2,1
 20057c0:	e0bfc915 	stw	r2,-220(fp)
 20057c4:	e0bfc917 	ldw	r2,-220(fp)
 20057c8:	10800210 	cmplti	r2,r2,8
 20057cc:	1000071e 	bne	r2,zero,20057ec <___vfprintf_internal_r+0x143c>
 20057d0:	e0bfc804 	addi	r2,fp,-224
 20057d4:	100d883a 	mov	r6,r2
 20057d8:	e17fe717 	ldw	r5,-100(fp)
 20057dc:	e13fe617 	ldw	r4,-104(fp)
 20057e0:	200e5840 	call	200e584 <__sprint_r>
 20057e4:	1002d61e 	bne	r2,zero,2006340 <___vfprintf_internal_r+0x1f90>
 20057e8:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 20057ec:	e0ffc417 	ldw	r3,-240(fp)
 20057f0:	e0bfc717 	ldw	r2,-228(fp)
 20057f4:	18800216 	blt	r3,r2,2005800 <___vfprintf_internal_r+0x1450>
 20057f8:	9880004c 	andi	r2,r19,1
 20057fc:	10025f26 	beq	r2,zero,200617c <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 2005800:	e0bfbb17 	ldw	r2,-276(fp)
 2005804:	88800015 	stw	r2,0(r17)
 2005808:	e0bfbc17 	ldw	r2,-272(fp)
 200580c:	88800115 	stw	r2,4(r17)
 2005810:	e0ffca17 	ldw	r3,-216(fp)
 2005814:	e0bfbc17 	ldw	r2,-272(fp)
 2005818:	1885883a 	add	r2,r3,r2
 200581c:	e0bfca15 	stw	r2,-216(fp)
 2005820:	8c400204 	addi	r17,r17,8
 2005824:	e0bfc917 	ldw	r2,-220(fp)
 2005828:	10800044 	addi	r2,r2,1
 200582c:	e0bfc915 	stw	r2,-220(fp)
 2005830:	e0bfc917 	ldw	r2,-220(fp)
 2005834:	10800210 	cmplti	r2,r2,8
 2005838:	1000071e 	bne	r2,zero,2005858 <___vfprintf_internal_r+0x14a8>
 200583c:	e0bfc804 	addi	r2,fp,-224
 2005840:	100d883a 	mov	r6,r2
 2005844:	e17fe717 	ldw	r5,-100(fp)
 2005848:	e13fe617 	ldw	r4,-104(fp)
 200584c:	200e5840 	call	200e584 <__sprint_r>
 2005850:	1002bd1e 	bne	r2,zero,2006348 <___vfprintf_internal_r+0x1f98>
 2005854:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 2005858:	e0bfc717 	ldw	r2,-228(fp)
 200585c:	143fffc4 	addi	r16,r2,-1
 2005860:	0402460e 	bge	zero,r16,200617c <___vfprintf_internal_r+0x1dcc>
 2005864:	00001706 	br	20058c4 <___vfprintf_internal_r+0x1514>
 2005868:	008080b4 	movhi	r2,514
 200586c:	10b26e84 	addi	r2,r2,-13894
 2005870:	88800015 	stw	r2,0(r17)
 2005874:	00800404 	movi	r2,16
 2005878:	88800115 	stw	r2,4(r17)
 200587c:	e0bfca17 	ldw	r2,-216(fp)
 2005880:	10800404 	addi	r2,r2,16
 2005884:	e0bfca15 	stw	r2,-216(fp)
 2005888:	8c400204 	addi	r17,r17,8
 200588c:	e0bfc917 	ldw	r2,-220(fp)
 2005890:	10800044 	addi	r2,r2,1
 2005894:	e0bfc915 	stw	r2,-220(fp)
 2005898:	e0bfc917 	ldw	r2,-220(fp)
 200589c:	10800210 	cmplti	r2,r2,8
 20058a0:	1000071e 	bne	r2,zero,20058c0 <___vfprintf_internal_r+0x1510>
 20058a4:	e0bfc804 	addi	r2,fp,-224
 20058a8:	100d883a 	mov	r6,r2
 20058ac:	e17fe717 	ldw	r5,-100(fp)
 20058b0:	e13fe617 	ldw	r4,-104(fp)
 20058b4:	200e5840 	call	200e584 <__sprint_r>
 20058b8:	1002a51e 	bne	r2,zero,2006350 <___vfprintf_internal_r+0x1fa0>
 20058bc:	e47fcb04 	addi	r17,fp,-212
 20058c0:	843ffc04 	addi	r16,r16,-16
 20058c4:	80800448 	cmpgei	r2,r16,17
 20058c8:	103fe71e 	bne	r2,zero,2005868 <___vfprintf_internal_r+0x14b8>
 20058cc:	008080b4 	movhi	r2,514
 20058d0:	10b26e84 	addi	r2,r2,-13894
 20058d4:	88800015 	stw	r2,0(r17)
 20058d8:	8005883a 	mov	r2,r16
 20058dc:	88800115 	stw	r2,4(r17)
 20058e0:	e0bfca17 	ldw	r2,-216(fp)
 20058e4:	8007883a 	mov	r3,r16
 20058e8:	10c5883a 	add	r2,r2,r3
 20058ec:	e0bfca15 	stw	r2,-216(fp)
 20058f0:	8c400204 	addi	r17,r17,8
 20058f4:	e0bfc917 	ldw	r2,-220(fp)
 20058f8:	10800044 	addi	r2,r2,1
 20058fc:	e0bfc915 	stw	r2,-220(fp)
 2005900:	e0bfc917 	ldw	r2,-220(fp)
 2005904:	10800210 	cmplti	r2,r2,8
 2005908:	10021c1e 	bne	r2,zero,200617c <___vfprintf_internal_r+0x1dcc>
 200590c:	e0bfc804 	addi	r2,fp,-224
 2005910:	100d883a 	mov	r6,r2
 2005914:	e17fe717 	ldw	r5,-100(fp)
 2005918:	e13fe617 	ldw	r4,-104(fp)
 200591c:	200e5840 	call	200e584 <__sprint_r>
 2005920:	10028d1e 	bne	r2,zero,2006358 <___vfprintf_internal_r+0x1fa8>
 2005924:	e47fcb04 	addi	r17,fp,-212
 2005928:	00021406 	br	200617c <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 200592c:	e0bfc417 	ldw	r2,-240(fp)
 2005930:	00807c16 	blt	zero,r2,2005b24 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 2005934:	008080b4 	movhi	r2,514
 2005938:	10b26a04 	addi	r2,r2,-13912
 200593c:	88800015 	stw	r2,0(r17)
 2005940:	00800044 	movi	r2,1
 2005944:	88800115 	stw	r2,4(r17)
 2005948:	e0bfca17 	ldw	r2,-216(fp)
 200594c:	10800044 	addi	r2,r2,1
 2005950:	e0bfca15 	stw	r2,-216(fp)
 2005954:	8c400204 	addi	r17,r17,8
 2005958:	e0bfc917 	ldw	r2,-220(fp)
 200595c:	10800044 	addi	r2,r2,1
 2005960:	e0bfc915 	stw	r2,-220(fp)
 2005964:	e0bfc917 	ldw	r2,-220(fp)
 2005968:	10800210 	cmplti	r2,r2,8
 200596c:	1000071e 	bne	r2,zero,200598c <___vfprintf_internal_r+0x15dc>
 2005970:	e0bfc804 	addi	r2,fp,-224
 2005974:	100d883a 	mov	r6,r2
 2005978:	e17fe717 	ldw	r5,-100(fp)
 200597c:	e13fe617 	ldw	r4,-104(fp)
 2005980:	200e5840 	call	200e584 <__sprint_r>
 2005984:	1002761e 	bne	r2,zero,2006360 <___vfprintf_internal_r+0x1fb0>
 2005988:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 200598c:	e0bfc417 	ldw	r2,-240(fp)
 2005990:	1000041e 	bne	r2,zero,20059a4 <___vfprintf_internal_r+0x15f4>
 2005994:	e0bfc717 	ldw	r2,-228(fp)
 2005998:	1000021e 	bne	r2,zero,20059a4 <___vfprintf_internal_r+0x15f4>
 200599c:	9880004c 	andi	r2,r19,1
 20059a0:	1001f626 	beq	r2,zero,200617c <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 20059a4:	e0bfbb17 	ldw	r2,-276(fp)
 20059a8:	88800015 	stw	r2,0(r17)
 20059ac:	e0bfbc17 	ldw	r2,-272(fp)
 20059b0:	88800115 	stw	r2,4(r17)
 20059b4:	e0ffca17 	ldw	r3,-216(fp)
 20059b8:	e0bfbc17 	ldw	r2,-272(fp)
 20059bc:	1885883a 	add	r2,r3,r2
 20059c0:	e0bfca15 	stw	r2,-216(fp)
 20059c4:	8c400204 	addi	r17,r17,8
 20059c8:	e0bfc917 	ldw	r2,-220(fp)
 20059cc:	10800044 	addi	r2,r2,1
 20059d0:	e0bfc915 	stw	r2,-220(fp)
 20059d4:	e0bfc917 	ldw	r2,-220(fp)
 20059d8:	10800210 	cmplti	r2,r2,8
 20059dc:	1000071e 	bne	r2,zero,20059fc <___vfprintf_internal_r+0x164c>
 20059e0:	e0bfc804 	addi	r2,fp,-224
 20059e4:	100d883a 	mov	r6,r2
 20059e8:	e17fe717 	ldw	r5,-100(fp)
 20059ec:	e13fe617 	ldw	r4,-104(fp)
 20059f0:	200e5840 	call	200e584 <__sprint_r>
 20059f4:	10025c1e 	bne	r2,zero,2006368 <___vfprintf_internal_r+0x1fb8>
 20059f8:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 20059fc:	e0bfc417 	ldw	r2,-240(fp)
 2005a00:	00a1c83a 	sub	r16,zero,r2
 2005a04:	0400310e 	bge	zero,r16,2005acc <___vfprintf_internal_r+0x171c>
 2005a08:	00001706 	br	2005a68 <___vfprintf_internal_r+0x16b8>
 2005a0c:	008080b4 	movhi	r2,514
 2005a10:	10b26e84 	addi	r2,r2,-13894
 2005a14:	88800015 	stw	r2,0(r17)
 2005a18:	00800404 	movi	r2,16
 2005a1c:	88800115 	stw	r2,4(r17)
 2005a20:	e0bfca17 	ldw	r2,-216(fp)
 2005a24:	10800404 	addi	r2,r2,16
 2005a28:	e0bfca15 	stw	r2,-216(fp)
 2005a2c:	8c400204 	addi	r17,r17,8
 2005a30:	e0bfc917 	ldw	r2,-220(fp)
 2005a34:	10800044 	addi	r2,r2,1
 2005a38:	e0bfc915 	stw	r2,-220(fp)
 2005a3c:	e0bfc917 	ldw	r2,-220(fp)
 2005a40:	10800210 	cmplti	r2,r2,8
 2005a44:	1000071e 	bne	r2,zero,2005a64 <___vfprintf_internal_r+0x16b4>
 2005a48:	e0bfc804 	addi	r2,fp,-224
 2005a4c:	100d883a 	mov	r6,r2
 2005a50:	e17fe717 	ldw	r5,-100(fp)
 2005a54:	e13fe617 	ldw	r4,-104(fp)
 2005a58:	200e5840 	call	200e584 <__sprint_r>
 2005a5c:	1002441e 	bne	r2,zero,2006370 <___vfprintf_internal_r+0x1fc0>
 2005a60:	e47fcb04 	addi	r17,fp,-212
 2005a64:	843ffc04 	addi	r16,r16,-16
 2005a68:	80800448 	cmpgei	r2,r16,17
 2005a6c:	103fe71e 	bne	r2,zero,2005a0c <___vfprintf_internal_r+0x165c>
 2005a70:	008080b4 	movhi	r2,514
 2005a74:	10b26e84 	addi	r2,r2,-13894
 2005a78:	88800015 	stw	r2,0(r17)
 2005a7c:	8005883a 	mov	r2,r16
 2005a80:	88800115 	stw	r2,4(r17)
 2005a84:	e0bfca17 	ldw	r2,-216(fp)
 2005a88:	8007883a 	mov	r3,r16
 2005a8c:	10c5883a 	add	r2,r2,r3
 2005a90:	e0bfca15 	stw	r2,-216(fp)
 2005a94:	8c400204 	addi	r17,r17,8
 2005a98:	e0bfc917 	ldw	r2,-220(fp)
 2005a9c:	10800044 	addi	r2,r2,1
 2005aa0:	e0bfc915 	stw	r2,-220(fp)
 2005aa4:	e0bfc917 	ldw	r2,-220(fp)
 2005aa8:	10800210 	cmplti	r2,r2,8
 2005aac:	1000071e 	bne	r2,zero,2005acc <___vfprintf_internal_r+0x171c>
 2005ab0:	e0bfc804 	addi	r2,fp,-224
 2005ab4:	100d883a 	mov	r6,r2
 2005ab8:	e17fe717 	ldw	r5,-100(fp)
 2005abc:	e13fe617 	ldw	r4,-104(fp)
 2005ac0:	200e5840 	call	200e584 <__sprint_r>
 2005ac4:	10022c1e 	bne	r2,zero,2006378 <___vfprintf_internal_r+0x1fc8>
 2005ac8:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 2005acc:	8c800015 	stw	r18,0(r17)
 2005ad0:	e0bfc717 	ldw	r2,-228(fp)
 2005ad4:	88800115 	stw	r2,4(r17)
 2005ad8:	e0bfca17 	ldw	r2,-216(fp)
 2005adc:	e0ffc717 	ldw	r3,-228(fp)
 2005ae0:	10c5883a 	add	r2,r2,r3
 2005ae4:	e0bfca15 	stw	r2,-216(fp)
 2005ae8:	8c400204 	addi	r17,r17,8
 2005aec:	e0bfc917 	ldw	r2,-220(fp)
 2005af0:	10800044 	addi	r2,r2,1
 2005af4:	e0bfc915 	stw	r2,-220(fp)
 2005af8:	e0bfc917 	ldw	r2,-220(fp)
 2005afc:	10800210 	cmplti	r2,r2,8
 2005b00:	10019e1e 	bne	r2,zero,200617c <___vfprintf_internal_r+0x1dcc>
 2005b04:	e0bfc804 	addi	r2,fp,-224
 2005b08:	100d883a 	mov	r6,r2
 2005b0c:	e17fe717 	ldw	r5,-100(fp)
 2005b10:	e13fe617 	ldw	r4,-104(fp)
 2005b14:	200e5840 	call	200e584 <__sprint_r>
 2005b18:	1002191e 	bne	r2,zero,2006380 <___vfprintf_internal_r+0x1fd0>
 2005b1c:	e47fcb04 	addi	r17,fp,-212
 2005b20:	00019606 	br	200617c <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 2005b24:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 2005b28:	e0bfc717 	ldw	r2,-228(fp)
 2005b2c:	1007883a 	mov	r3,r2
 2005b30:	e0bfc017 	ldw	r2,-256(fp)
 2005b34:	10c5883a 	add	r2,r2,r3
 2005b38:	1007883a 	mov	r3,r2
 2005b3c:	9005883a 	mov	r2,r18
 2005b40:	1885c83a 	sub	r2,r3,r2
 2005b44:	e0bfb915 	stw	r2,-284(fp)
 2005b48:	e0bfb917 	ldw	r2,-284(fp)
 2005b4c:	e0ffb017 	ldw	r3,-320(fp)
 2005b50:	1880020e 	bge	r3,r2,2005b5c <___vfprintf_internal_r+0x17ac>
 2005b54:	e0bfb017 	ldw	r2,-320(fp)
 2005b58:	e0bfb915 	stw	r2,-284(fp)
 2005b5c:	e0bfb917 	ldw	r2,-284(fp)
 2005b60:	0080150e 	bge	zero,r2,2005bb8 <___vfprintf_internal_r+0x1808>
 2005b64:	8c800015 	stw	r18,0(r17)
 2005b68:	e0bfb917 	ldw	r2,-284(fp)
 2005b6c:	88800115 	stw	r2,4(r17)
 2005b70:	e0ffca17 	ldw	r3,-216(fp)
 2005b74:	e0bfb917 	ldw	r2,-284(fp)
 2005b78:	1885883a 	add	r2,r3,r2
 2005b7c:	e0bfca15 	stw	r2,-216(fp)
 2005b80:	8c400204 	addi	r17,r17,8
 2005b84:	e0bfc917 	ldw	r2,-220(fp)
 2005b88:	10800044 	addi	r2,r2,1
 2005b8c:	e0bfc915 	stw	r2,-220(fp)
 2005b90:	e0bfc917 	ldw	r2,-220(fp)
 2005b94:	10800210 	cmplti	r2,r2,8
 2005b98:	1000071e 	bne	r2,zero,2005bb8 <___vfprintf_internal_r+0x1808>
 2005b9c:	e0bfc804 	addi	r2,fp,-224
 2005ba0:	100d883a 	mov	r6,r2
 2005ba4:	e17fe717 	ldw	r5,-100(fp)
 2005ba8:	e13fe617 	ldw	r4,-104(fp)
 2005bac:	200e5840 	call	200e584 <__sprint_r>
 2005bb0:	1001f51e 	bne	r2,zero,2006388 <___vfprintf_internal_r+0x1fd8>
 2005bb4:	e47fcb04 	addi	r17,fp,-212
 2005bb8:	e0bfb917 	ldw	r2,-284(fp)
 2005bbc:	1000010e 	bge	r2,zero,2005bc4 <___vfprintf_internal_r+0x1814>
 2005bc0:	0005883a 	mov	r2,zero
 2005bc4:	e0ffb017 	ldw	r3,-320(fp)
 2005bc8:	1885c83a 	sub	r2,r3,r2
 2005bcc:	e0bfb915 	stw	r2,-284(fp)
 2005bd0:	e0bfb917 	ldw	r2,-284(fp)
 2005bd4:	0080340e 	bge	zero,r2,2005ca8 <___vfprintf_internal_r+0x18f8>
 2005bd8:	00001906 	br	2005c40 <___vfprintf_internal_r+0x1890>
 2005bdc:	008080b4 	movhi	r2,514
 2005be0:	10b26e84 	addi	r2,r2,-13894
 2005be4:	88800015 	stw	r2,0(r17)
 2005be8:	00800404 	movi	r2,16
 2005bec:	88800115 	stw	r2,4(r17)
 2005bf0:	e0bfca17 	ldw	r2,-216(fp)
 2005bf4:	10800404 	addi	r2,r2,16
 2005bf8:	e0bfca15 	stw	r2,-216(fp)
 2005bfc:	8c400204 	addi	r17,r17,8
 2005c00:	e0bfc917 	ldw	r2,-220(fp)
 2005c04:	10800044 	addi	r2,r2,1
 2005c08:	e0bfc915 	stw	r2,-220(fp)
 2005c0c:	e0bfc917 	ldw	r2,-220(fp)
 2005c10:	10800210 	cmplti	r2,r2,8
 2005c14:	1000071e 	bne	r2,zero,2005c34 <___vfprintf_internal_r+0x1884>
 2005c18:	e0bfc804 	addi	r2,fp,-224
 2005c1c:	100d883a 	mov	r6,r2
 2005c20:	e17fe717 	ldw	r5,-100(fp)
 2005c24:	e13fe617 	ldw	r4,-104(fp)
 2005c28:	200e5840 	call	200e584 <__sprint_r>
 2005c2c:	1001d81e 	bne	r2,zero,2006390 <___vfprintf_internal_r+0x1fe0>
 2005c30:	e47fcb04 	addi	r17,fp,-212
 2005c34:	e0bfb917 	ldw	r2,-284(fp)
 2005c38:	10bffc04 	addi	r2,r2,-16
 2005c3c:	e0bfb915 	stw	r2,-284(fp)
 2005c40:	e0bfb917 	ldw	r2,-284(fp)
 2005c44:	10800448 	cmpgei	r2,r2,17
 2005c48:	103fe41e 	bne	r2,zero,2005bdc <___vfprintf_internal_r+0x182c>
 2005c4c:	008080b4 	movhi	r2,514
 2005c50:	10b26e84 	addi	r2,r2,-13894
 2005c54:	88800015 	stw	r2,0(r17)
 2005c58:	e0bfb917 	ldw	r2,-284(fp)
 2005c5c:	88800115 	stw	r2,4(r17)
 2005c60:	e0ffca17 	ldw	r3,-216(fp)
 2005c64:	e0bfb917 	ldw	r2,-284(fp)
 2005c68:	1885883a 	add	r2,r3,r2
 2005c6c:	e0bfca15 	stw	r2,-216(fp)
 2005c70:	8c400204 	addi	r17,r17,8
 2005c74:	e0bfc917 	ldw	r2,-220(fp)
 2005c78:	10800044 	addi	r2,r2,1
 2005c7c:	e0bfc915 	stw	r2,-220(fp)
 2005c80:	e0bfc917 	ldw	r2,-220(fp)
 2005c84:	10800210 	cmplti	r2,r2,8
 2005c88:	1000071e 	bne	r2,zero,2005ca8 <___vfprintf_internal_r+0x18f8>
 2005c8c:	e0bfc804 	addi	r2,fp,-224
 2005c90:	100d883a 	mov	r6,r2
 2005c94:	e17fe717 	ldw	r5,-100(fp)
 2005c98:	e13fe617 	ldw	r4,-104(fp)
 2005c9c:	200e5840 	call	200e584 <__sprint_r>
 2005ca0:	1001bd1e 	bne	r2,zero,2006398 <___vfprintf_internal_r+0x1fe8>
 2005ca4:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 2005ca8:	e0bfb017 	ldw	r2,-320(fp)
 2005cac:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 2005cb0:	e0ffc417 	ldw	r3,-240(fp)
 2005cb4:	e0bfc717 	ldw	r2,-228(fp)
 2005cb8:	18800216 	blt	r3,r2,2005cc4 <___vfprintf_internal_r+0x1914>
 2005cbc:	9880004c 	andi	r2,r19,1
 2005cc0:	10001626 	beq	r2,zero,2005d1c <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 2005cc4:	e0bfbb17 	ldw	r2,-276(fp)
 2005cc8:	88800015 	stw	r2,0(r17)
 2005ccc:	e0bfbc17 	ldw	r2,-272(fp)
 2005cd0:	88800115 	stw	r2,4(r17)
 2005cd4:	e0ffca17 	ldw	r3,-216(fp)
 2005cd8:	e0bfbc17 	ldw	r2,-272(fp)
 2005cdc:	1885883a 	add	r2,r3,r2
 2005ce0:	e0bfca15 	stw	r2,-216(fp)
 2005ce4:	8c400204 	addi	r17,r17,8
 2005ce8:	e0bfc917 	ldw	r2,-220(fp)
 2005cec:	10800044 	addi	r2,r2,1
 2005cf0:	e0bfc915 	stw	r2,-220(fp)
 2005cf4:	e0bfc917 	ldw	r2,-220(fp)
 2005cf8:	10800210 	cmplti	r2,r2,8
 2005cfc:	1000071e 	bne	r2,zero,2005d1c <___vfprintf_internal_r+0x196c>
 2005d00:	e0bfc804 	addi	r2,fp,-224
 2005d04:	100d883a 	mov	r6,r2
 2005d08:	e17fe717 	ldw	r5,-100(fp)
 2005d0c:	e13fe617 	ldw	r4,-104(fp)
 2005d10:	200e5840 	call	200e584 <__sprint_r>
 2005d14:	1001a21e 	bne	r2,zero,20063a0 <___vfprintf_internal_r+0x1ff0>
 2005d18:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 2005d1c:	e0bfc717 	ldw	r2,-228(fp)
 2005d20:	1007883a 	mov	r3,r2
 2005d24:	e0bfc017 	ldw	r2,-256(fp)
 2005d28:	10c5883a 	add	r2,r2,r3
 2005d2c:	1007883a 	mov	r3,r2
 2005d30:	9005883a 	mov	r2,r18
 2005d34:	1885c83a 	sub	r2,r3,r2
 2005d38:	e0bfba15 	stw	r2,-280(fp)
 2005d3c:	e0ffc717 	ldw	r3,-228(fp)
 2005d40:	e0bfc417 	ldw	r2,-240(fp)
 2005d44:	1887c83a 	sub	r3,r3,r2
 2005d48:	e0bfba17 	ldw	r2,-280(fp)
 2005d4c:	1880040e 	bge	r3,r2,2005d60 <___vfprintf_internal_r+0x19b0>
 2005d50:	e0ffc717 	ldw	r3,-228(fp)
 2005d54:	e0bfc417 	ldw	r2,-240(fp)
 2005d58:	1885c83a 	sub	r2,r3,r2
 2005d5c:	e0bfba15 	stw	r2,-280(fp)
 2005d60:	e0bfba17 	ldw	r2,-280(fp)
 2005d64:	0080150e 	bge	zero,r2,2005dbc <___vfprintf_internal_r+0x1a0c>
 2005d68:	8c800015 	stw	r18,0(r17)
 2005d6c:	e0bfba17 	ldw	r2,-280(fp)
 2005d70:	88800115 	stw	r2,4(r17)
 2005d74:	e0ffca17 	ldw	r3,-216(fp)
 2005d78:	e0bfba17 	ldw	r2,-280(fp)
 2005d7c:	1885883a 	add	r2,r3,r2
 2005d80:	e0bfca15 	stw	r2,-216(fp)
 2005d84:	8c400204 	addi	r17,r17,8
 2005d88:	e0bfc917 	ldw	r2,-220(fp)
 2005d8c:	10800044 	addi	r2,r2,1
 2005d90:	e0bfc915 	stw	r2,-220(fp)
 2005d94:	e0bfc917 	ldw	r2,-220(fp)
 2005d98:	10800210 	cmplti	r2,r2,8
 2005d9c:	1000071e 	bne	r2,zero,2005dbc <___vfprintf_internal_r+0x1a0c>
 2005da0:	e0bfc804 	addi	r2,fp,-224
 2005da4:	100d883a 	mov	r6,r2
 2005da8:	e17fe717 	ldw	r5,-100(fp)
 2005dac:	e13fe617 	ldw	r4,-104(fp)
 2005db0:	200e5840 	call	200e584 <__sprint_r>
 2005db4:	10017c1e 	bne	r2,zero,20063a8 <___vfprintf_internal_r+0x1ff8>
 2005db8:	e47fcb04 	addi	r17,fp,-212
 2005dbc:	e0ffc717 	ldw	r3,-228(fp)
 2005dc0:	e0bfc417 	ldw	r2,-240(fp)
 2005dc4:	1887c83a 	sub	r3,r3,r2
 2005dc8:	e0bfba17 	ldw	r2,-280(fp)
 2005dcc:	1000010e 	bge	r2,zero,2005dd4 <___vfprintf_internal_r+0x1a24>
 2005dd0:	0005883a 	mov	r2,zero
 2005dd4:	1885c83a 	sub	r2,r3,r2
 2005dd8:	e0bfba15 	stw	r2,-280(fp)
 2005ddc:	e0bfba17 	ldw	r2,-280(fp)
 2005de0:	0080e60e 	bge	zero,r2,200617c <___vfprintf_internal_r+0x1dcc>
 2005de4:	00001906 	br	2005e4c <___vfprintf_internal_r+0x1a9c>
 2005de8:	008080b4 	movhi	r2,514
 2005dec:	10b26e84 	addi	r2,r2,-13894
 2005df0:	88800015 	stw	r2,0(r17)
 2005df4:	00800404 	movi	r2,16
 2005df8:	88800115 	stw	r2,4(r17)
 2005dfc:	e0bfca17 	ldw	r2,-216(fp)
 2005e00:	10800404 	addi	r2,r2,16
 2005e04:	e0bfca15 	stw	r2,-216(fp)
 2005e08:	8c400204 	addi	r17,r17,8
 2005e0c:	e0bfc917 	ldw	r2,-220(fp)
 2005e10:	10800044 	addi	r2,r2,1
 2005e14:	e0bfc915 	stw	r2,-220(fp)
 2005e18:	e0bfc917 	ldw	r2,-220(fp)
 2005e1c:	10800210 	cmplti	r2,r2,8
 2005e20:	1000071e 	bne	r2,zero,2005e40 <___vfprintf_internal_r+0x1a90>
 2005e24:	e0bfc804 	addi	r2,fp,-224
 2005e28:	100d883a 	mov	r6,r2
 2005e2c:	e17fe717 	ldw	r5,-100(fp)
 2005e30:	e13fe617 	ldw	r4,-104(fp)
 2005e34:	200e5840 	call	200e584 <__sprint_r>
 2005e38:	10015d1e 	bne	r2,zero,20063b0 <___vfprintf_internal_r+0x2000>
 2005e3c:	e47fcb04 	addi	r17,fp,-212
 2005e40:	e0bfba17 	ldw	r2,-280(fp)
 2005e44:	10bffc04 	addi	r2,r2,-16
 2005e48:	e0bfba15 	stw	r2,-280(fp)
 2005e4c:	e0bfba17 	ldw	r2,-280(fp)
 2005e50:	10800448 	cmpgei	r2,r2,17
 2005e54:	103fe41e 	bne	r2,zero,2005de8 <___vfprintf_internal_r+0x1a38>
 2005e58:	008080b4 	movhi	r2,514
 2005e5c:	10b26e84 	addi	r2,r2,-13894
 2005e60:	88800015 	stw	r2,0(r17)
 2005e64:	e0bfba17 	ldw	r2,-280(fp)
 2005e68:	88800115 	stw	r2,4(r17)
 2005e6c:	e0ffca17 	ldw	r3,-216(fp)
 2005e70:	e0bfba17 	ldw	r2,-280(fp)
 2005e74:	1885883a 	add	r2,r3,r2
 2005e78:	e0bfca15 	stw	r2,-216(fp)
 2005e7c:	8c400204 	addi	r17,r17,8
 2005e80:	e0bfc917 	ldw	r2,-220(fp)
 2005e84:	10800044 	addi	r2,r2,1
 2005e88:	e0bfc915 	stw	r2,-220(fp)
 2005e8c:	e0bfc917 	ldw	r2,-220(fp)
 2005e90:	10800210 	cmplti	r2,r2,8
 2005e94:	1000b91e 	bne	r2,zero,200617c <___vfprintf_internal_r+0x1dcc>
 2005e98:	e0bfc804 	addi	r2,fp,-224
 2005e9c:	100d883a 	mov	r6,r2
 2005ea0:	e17fe717 	ldw	r5,-100(fp)
 2005ea4:	e13fe617 	ldw	r4,-104(fp)
 2005ea8:	200e5840 	call	200e584 <__sprint_r>
 2005eac:	1001421e 	bne	r2,zero,20063b8 <___vfprintf_internal_r+0x2008>
 2005eb0:	e47fcb04 	addi	r17,fp,-212
 2005eb4:	0000b106 	br	200617c <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 2005eb8:	e0bfc717 	ldw	r2,-228(fp)
 2005ebc:	10800088 	cmpgei	r2,r2,2
 2005ec0:	1000021e 	bne	r2,zero,2005ecc <___vfprintf_internal_r+0x1b1c>
 2005ec4:	9880004c 	andi	r2,r19,1
 2005ec8:	10008026 	beq	r2,zero,20060cc <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 2005ecc:	8c800015 	stw	r18,0(r17)
 2005ed0:	00800044 	movi	r2,1
 2005ed4:	88800115 	stw	r2,4(r17)
 2005ed8:	e0bfca17 	ldw	r2,-216(fp)
 2005edc:	10800044 	addi	r2,r2,1
 2005ee0:	e0bfca15 	stw	r2,-216(fp)
 2005ee4:	8c400204 	addi	r17,r17,8
 2005ee8:	e0bfc917 	ldw	r2,-220(fp)
 2005eec:	10800044 	addi	r2,r2,1
 2005ef0:	e0bfc915 	stw	r2,-220(fp)
 2005ef4:	e0bfc917 	ldw	r2,-220(fp)
 2005ef8:	10800210 	cmplti	r2,r2,8
 2005efc:	1000071e 	bne	r2,zero,2005f1c <___vfprintf_internal_r+0x1b6c>
 2005f00:	e0bfc804 	addi	r2,fp,-224
 2005f04:	100d883a 	mov	r6,r2
 2005f08:	e17fe717 	ldw	r5,-100(fp)
 2005f0c:	e13fe617 	ldw	r4,-104(fp)
 2005f10:	200e5840 	call	200e584 <__sprint_r>
 2005f14:	10012a1e 	bne	r2,zero,20063c0 <___vfprintf_internal_r+0x2010>
 2005f18:	e47fcb04 	addi	r17,fp,-212
					cp++;
 2005f1c:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 2005f20:	e0bfbb17 	ldw	r2,-276(fp)
 2005f24:	88800015 	stw	r2,0(r17)
 2005f28:	e0bfbc17 	ldw	r2,-272(fp)
 2005f2c:	88800115 	stw	r2,4(r17)
 2005f30:	e0ffca17 	ldw	r3,-216(fp)
 2005f34:	e0bfbc17 	ldw	r2,-272(fp)
 2005f38:	1885883a 	add	r2,r3,r2
 2005f3c:	e0bfca15 	stw	r2,-216(fp)
 2005f40:	8c400204 	addi	r17,r17,8
 2005f44:	e0bfc917 	ldw	r2,-220(fp)
 2005f48:	10800044 	addi	r2,r2,1
 2005f4c:	e0bfc915 	stw	r2,-220(fp)
 2005f50:	e0bfc917 	ldw	r2,-220(fp)
 2005f54:	10800210 	cmplti	r2,r2,8
 2005f58:	1000071e 	bne	r2,zero,2005f78 <___vfprintf_internal_r+0x1bc8>
 2005f5c:	e0bfc804 	addi	r2,fp,-224
 2005f60:	100d883a 	mov	r6,r2
 2005f64:	e17fe717 	ldw	r5,-100(fp)
 2005f68:	e13fe617 	ldw	r4,-104(fp)
 2005f6c:	200e5840 	call	200e584 <__sprint_r>
 2005f70:	1001151e 	bne	r2,zero,20063c8 <___vfprintf_internal_r+0x2018>
 2005f74:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 2005f78:	e0bfc217 	ldw	r2,-248(fp)
 2005f7c:	e0ffc317 	ldw	r3,-244(fp)
 2005f80:	000d883a 	mov	r6,zero
 2005f84:	000f883a 	mov	r7,zero
 2005f88:	1009883a 	mov	r4,r2
 2005f8c:	180b883a 	mov	r5,r3
 2005f90:	20029600 	call	2002960 <__eqdf2>
 2005f94:	10001826 	beq	r2,zero,2005ff8 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 2005f98:	8c800015 	stw	r18,0(r17)
 2005f9c:	e0bfc717 	ldw	r2,-228(fp)
 2005fa0:	10bfffc4 	addi	r2,r2,-1
 2005fa4:	88800115 	stw	r2,4(r17)
 2005fa8:	e0bfca17 	ldw	r2,-216(fp)
 2005fac:	e0ffc717 	ldw	r3,-228(fp)
 2005fb0:	10c5883a 	add	r2,r2,r3
 2005fb4:	10bfffc4 	addi	r2,r2,-1
 2005fb8:	e0bfca15 	stw	r2,-216(fp)
 2005fbc:	8c400204 	addi	r17,r17,8
 2005fc0:	e0bfc917 	ldw	r2,-220(fp)
 2005fc4:	10800044 	addi	r2,r2,1
 2005fc8:	e0bfc915 	stw	r2,-220(fp)
 2005fcc:	e0bfc917 	ldw	r2,-220(fp)
 2005fd0:	10800210 	cmplti	r2,r2,8
 2005fd4:	1000521e 	bne	r2,zero,2006120 <___vfprintf_internal_r+0x1d70>
 2005fd8:	e0bfc804 	addi	r2,fp,-224
 2005fdc:	100d883a 	mov	r6,r2
 2005fe0:	e17fe717 	ldw	r5,-100(fp)
 2005fe4:	e13fe617 	ldw	r4,-104(fp)
 2005fe8:	200e5840 	call	200e584 <__sprint_r>
 2005fec:	1000f81e 	bne	r2,zero,20063d0 <___vfprintf_internal_r+0x2020>
 2005ff0:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2005ff4:	00004a06 	br	2006120 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2005ff8:	e0bfc717 	ldw	r2,-228(fp)
 2005ffc:	143fffc4 	addi	r16,r2,-1
 2006000:	0400470e 	bge	zero,r16,2006120 <___vfprintf_internal_r+0x1d70>
 2006004:	00001706 	br	2006064 <___vfprintf_internal_r+0x1cb4>
 2006008:	008080b4 	movhi	r2,514
 200600c:	10b26e84 	addi	r2,r2,-13894
 2006010:	88800015 	stw	r2,0(r17)
 2006014:	00800404 	movi	r2,16
 2006018:	88800115 	stw	r2,4(r17)
 200601c:	e0bfca17 	ldw	r2,-216(fp)
 2006020:	10800404 	addi	r2,r2,16
 2006024:	e0bfca15 	stw	r2,-216(fp)
 2006028:	8c400204 	addi	r17,r17,8
 200602c:	e0bfc917 	ldw	r2,-220(fp)
 2006030:	10800044 	addi	r2,r2,1
 2006034:	e0bfc915 	stw	r2,-220(fp)
 2006038:	e0bfc917 	ldw	r2,-220(fp)
 200603c:	10800210 	cmplti	r2,r2,8
 2006040:	1000071e 	bne	r2,zero,2006060 <___vfprintf_internal_r+0x1cb0>
 2006044:	e0bfc804 	addi	r2,fp,-224
 2006048:	100d883a 	mov	r6,r2
 200604c:	e17fe717 	ldw	r5,-100(fp)
 2006050:	e13fe617 	ldw	r4,-104(fp)
 2006054:	200e5840 	call	200e584 <__sprint_r>
 2006058:	1000df1e 	bne	r2,zero,20063d8 <___vfprintf_internal_r+0x2028>
 200605c:	e47fcb04 	addi	r17,fp,-212
 2006060:	843ffc04 	addi	r16,r16,-16
 2006064:	80800448 	cmpgei	r2,r16,17
 2006068:	103fe71e 	bne	r2,zero,2006008 <___vfprintf_internal_r+0x1c58>
 200606c:	008080b4 	movhi	r2,514
 2006070:	10b26e84 	addi	r2,r2,-13894
 2006074:	88800015 	stw	r2,0(r17)
 2006078:	8005883a 	mov	r2,r16
 200607c:	88800115 	stw	r2,4(r17)
 2006080:	e0bfca17 	ldw	r2,-216(fp)
 2006084:	8007883a 	mov	r3,r16
 2006088:	10c5883a 	add	r2,r2,r3
 200608c:	e0bfca15 	stw	r2,-216(fp)
 2006090:	8c400204 	addi	r17,r17,8
 2006094:	e0bfc917 	ldw	r2,-220(fp)
 2006098:	10800044 	addi	r2,r2,1
 200609c:	e0bfc915 	stw	r2,-220(fp)
 20060a0:	e0bfc917 	ldw	r2,-220(fp)
 20060a4:	10800210 	cmplti	r2,r2,8
 20060a8:	10001d1e 	bne	r2,zero,2006120 <___vfprintf_internal_r+0x1d70>
 20060ac:	e0bfc804 	addi	r2,fp,-224
 20060b0:	100d883a 	mov	r6,r2
 20060b4:	e17fe717 	ldw	r5,-100(fp)
 20060b8:	e13fe617 	ldw	r4,-104(fp)
 20060bc:	200e5840 	call	200e584 <__sprint_r>
 20060c0:	1000c71e 	bne	r2,zero,20063e0 <___vfprintf_internal_r+0x2030>
 20060c4:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 20060c8:	00001506 	br	2006120 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 20060cc:	8c800015 	stw	r18,0(r17)
 20060d0:	00800044 	movi	r2,1
 20060d4:	88800115 	stw	r2,4(r17)
 20060d8:	e0bfca17 	ldw	r2,-216(fp)
 20060dc:	10800044 	addi	r2,r2,1
 20060e0:	e0bfca15 	stw	r2,-216(fp)
 20060e4:	8c400204 	addi	r17,r17,8
 20060e8:	e0bfc917 	ldw	r2,-220(fp)
 20060ec:	10800044 	addi	r2,r2,1
 20060f0:	e0bfc915 	stw	r2,-220(fp)
 20060f4:	e0bfc917 	ldw	r2,-220(fp)
 20060f8:	10800210 	cmplti	r2,r2,8
 20060fc:	1000091e 	bne	r2,zero,2006124 <___vfprintf_internal_r+0x1d74>
 2006100:	e0bfc804 	addi	r2,fp,-224
 2006104:	100d883a 	mov	r6,r2
 2006108:	e17fe717 	ldw	r5,-100(fp)
 200610c:	e13fe617 	ldw	r4,-104(fp)
 2006110:	200e5840 	call	200e584 <__sprint_r>
 2006114:	1000b41e 	bne	r2,zero,20063e8 <___vfprintf_internal_r+0x2038>
 2006118:	e47fcb04 	addi	r17,fp,-212
 200611c:	00000106 	br	2006124 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2006120:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 2006124:	e0bfc504 	addi	r2,fp,-236
 2006128:	88800015 	stw	r2,0(r17)
 200612c:	e0bfaf17 	ldw	r2,-324(fp)
 2006130:	88800115 	stw	r2,4(r17)
 2006134:	e0ffca17 	ldw	r3,-216(fp)
 2006138:	e0bfaf17 	ldw	r2,-324(fp)
 200613c:	1885883a 	add	r2,r3,r2
 2006140:	e0bfca15 	stw	r2,-216(fp)
 2006144:	8c400204 	addi	r17,r17,8
 2006148:	e0bfc917 	ldw	r2,-220(fp)
 200614c:	10800044 	addi	r2,r2,1
 2006150:	e0bfc915 	stw	r2,-220(fp)
 2006154:	e0bfc917 	ldw	r2,-220(fp)
 2006158:	10800210 	cmplti	r2,r2,8
 200615c:	1000071e 	bne	r2,zero,200617c <___vfprintf_internal_r+0x1dcc>
 2006160:	e0bfc804 	addi	r2,fp,-224
 2006164:	100d883a 	mov	r6,r2
 2006168:	e17fe717 	ldw	r5,-100(fp)
 200616c:	e13fe617 	ldw	r4,-104(fp)
 2006170:	200e5840 	call	200e584 <__sprint_r>
 2006174:	10009e1e 	bne	r2,zero,20063f0 <___vfprintf_internal_r+0x2040>
 2006178:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 200617c:	9880010c 	andi	r2,r19,4
 2006180:	10003526 	beq	r2,zero,2006258 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 2006184:	e0ffad17 	ldw	r3,-332(fp)
 2006188:	e0bfb517 	ldw	r2,-300(fp)
 200618c:	18a1c83a 	sub	r16,r3,r2
 2006190:	0400310e 	bge	zero,r16,2006258 <___vfprintf_internal_r+0x1ea8>
 2006194:	00001706 	br	20061f4 <___vfprintf_internal_r+0x1e44>
 2006198:	008080b4 	movhi	r2,514
 200619c:	10b26a84 	addi	r2,r2,-13910
 20061a0:	88800015 	stw	r2,0(r17)
 20061a4:	00800404 	movi	r2,16
 20061a8:	88800115 	stw	r2,4(r17)
 20061ac:	e0bfca17 	ldw	r2,-216(fp)
 20061b0:	10800404 	addi	r2,r2,16
 20061b4:	e0bfca15 	stw	r2,-216(fp)
 20061b8:	8c400204 	addi	r17,r17,8
 20061bc:	e0bfc917 	ldw	r2,-220(fp)
 20061c0:	10800044 	addi	r2,r2,1
 20061c4:	e0bfc915 	stw	r2,-220(fp)
 20061c8:	e0bfc917 	ldw	r2,-220(fp)
 20061cc:	10800210 	cmplti	r2,r2,8
 20061d0:	1000071e 	bne	r2,zero,20061f0 <___vfprintf_internal_r+0x1e40>
 20061d4:	e0bfc804 	addi	r2,fp,-224
 20061d8:	100d883a 	mov	r6,r2
 20061dc:	e17fe717 	ldw	r5,-100(fp)
 20061e0:	e13fe617 	ldw	r4,-104(fp)
 20061e4:	200e5840 	call	200e584 <__sprint_r>
 20061e8:	1000831e 	bne	r2,zero,20063f8 <___vfprintf_internal_r+0x2048>
 20061ec:	e47fcb04 	addi	r17,fp,-212
 20061f0:	843ffc04 	addi	r16,r16,-16
 20061f4:	80800448 	cmpgei	r2,r16,17
 20061f8:	103fe71e 	bne	r2,zero,2006198 <___vfprintf_internal_r+0x1de8>
 20061fc:	008080b4 	movhi	r2,514
 2006200:	10b26a84 	addi	r2,r2,-13910
 2006204:	88800015 	stw	r2,0(r17)
 2006208:	8005883a 	mov	r2,r16
 200620c:	88800115 	stw	r2,4(r17)
 2006210:	e0bfca17 	ldw	r2,-216(fp)
 2006214:	8007883a 	mov	r3,r16
 2006218:	10c5883a 	add	r2,r2,r3
 200621c:	e0bfca15 	stw	r2,-216(fp)
 2006220:	8c400204 	addi	r17,r17,8
 2006224:	e0bfc917 	ldw	r2,-220(fp)
 2006228:	10800044 	addi	r2,r2,1
 200622c:	e0bfc915 	stw	r2,-220(fp)
 2006230:	e0bfc917 	ldw	r2,-220(fp)
 2006234:	10800210 	cmplti	r2,r2,8
 2006238:	1000071e 	bne	r2,zero,2006258 <___vfprintf_internal_r+0x1ea8>
 200623c:	e0bfc804 	addi	r2,fp,-224
 2006240:	100d883a 	mov	r6,r2
 2006244:	e17fe717 	ldw	r5,-100(fp)
 2006248:	e13fe617 	ldw	r4,-104(fp)
 200624c:	200e5840 	call	200e584 <__sprint_r>
 2006250:	10006b1e 	bne	r2,zero,2006400 <___vfprintf_internal_r+0x2050>
 2006254:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2006258:	e0ffad17 	ldw	r3,-332(fp)
 200625c:	e0bfb517 	ldw	r2,-300(fp)
 2006260:	10c0010e 	bge	r2,r3,2006268 <___vfprintf_internal_r+0x1eb8>
 2006264:	1805883a 	mov	r2,r3
 2006268:	e0ffac17 	ldw	r3,-336(fp)
 200626c:	1885883a 	add	r2,r3,r2
 2006270:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 2006274:	e0bfca17 	ldw	r2,-216(fp)
 2006278:	10000626 	beq	r2,zero,2006294 <___vfprintf_internal_r+0x1ee4>
 200627c:	e0bfc804 	addi	r2,fp,-224
 2006280:	100d883a 	mov	r6,r2
 2006284:	e17fe717 	ldw	r5,-100(fp)
 2006288:	e13fe617 	ldw	r4,-104(fp)
 200628c:	200e5840 	call	200e584 <__sprint_r>
 2006290:	10005d1e 	bne	r2,zero,2006408 <___vfprintf_internal_r+0x2058>
 2006294:	e03fc915 	stw	zero,-220(fp)
 2006298:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 200629c:	e0bfb817 	ldw	r2,-288(fp)
 20062a0:	1038a026 	beq	r2,zero,2004524 <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 20062a4:	e17fb817 	ldw	r5,-288(fp)
 20062a8:	e13fe617 	ldw	r4,-104(fp)
 20062ac:	200923c0 	call	200923c <_free_r>
			malloc_buf = NULL;
 20062b0:	e03fb815 	stw	zero,-288(fp)
		}
	}
 20062b4:	00389b06 	br	2004524 <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 20062b8:	0001883a 	nop
 20062bc:	00000106 	br	20062c4 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 20062c0:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 20062c4:	e0bfca17 	ldw	r2,-216(fp)
 20062c8:	10000626 	beq	r2,zero,20062e4 <___vfprintf_internal_r+0x1f34>
 20062cc:	e0bfc804 	addi	r2,fp,-224
 20062d0:	100d883a 	mov	r6,r2
 20062d4:	e17fe717 	ldw	r5,-100(fp)
 20062d8:	e13fe617 	ldw	r4,-104(fp)
 20062dc:	200e5840 	call	200e584 <__sprint_r>
 20062e0:	10004b1e 	bne	r2,zero,2006410 <___vfprintf_internal_r+0x2060>
 20062e4:	e03fc915 	stw	zero,-220(fp)
 20062e8:	e47fcb04 	addi	r17,fp,-212
 20062ec:	00004906 	br	2006414 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 20062f0:	0001883a 	nop
 20062f4:	00004706 	br	2006414 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 20062f8:	0001883a 	nop
 20062fc:	00004506 	br	2006414 <___vfprintf_internal_r+0x2064>
 2006300:	0001883a 	nop
 2006304:	00004306 	br	2006414 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2006308:	0001883a 	nop
 200630c:	00004106 	br	2006414 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2006310:	0001883a 	nop
 2006314:	00003f06 	br	2006414 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2006318:	0001883a 	nop
 200631c:	00003d06 	br	2006414 <___vfprintf_internal_r+0x2064>
 2006320:	0001883a 	nop
 2006324:	00003b06 	br	2006414 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2006328:	0001883a 	nop
 200632c:	00003906 	br	2006414 <___vfprintf_internal_r+0x2064>
 2006330:	0001883a 	nop
 2006334:	00003706 	br	2006414 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 2006338:	0001883a 	nop
 200633c:	00003506 	br	2006414 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2006340:	0001883a 	nop
 2006344:	00003306 	br	2006414 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2006348:	0001883a 	nop
 200634c:	00003106 	br	2006414 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 2006350:	0001883a 	nop
 2006354:	00002f06 	br	2006414 <___vfprintf_internal_r+0x2064>
 2006358:	0001883a 	nop
 200635c:	00002d06 	br	2006414 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 2006360:	0001883a 	nop
 2006364:	00002b06 	br	2006414 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2006368:	0001883a 	nop
 200636c:	00002906 	br	2006414 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 2006370:	0001883a 	nop
 2006374:	00002706 	br	2006414 <___vfprintf_internal_r+0x2064>
 2006378:	0001883a 	nop
 200637c:	00002506 	br	2006414 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 2006380:	0001883a 	nop
 2006384:	00002306 	br	2006414 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 2006388:	0001883a 	nop
 200638c:	00002106 	br	2006414 <___vfprintf_internal_r+0x2064>
 2006390:	0001883a 	nop
 2006394:	00001f06 	br	2006414 <___vfprintf_internal_r+0x2064>
 2006398:	0001883a 	nop
 200639c:	00001d06 	br	2006414 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 20063a0:	0001883a 	nop
 20063a4:	00001b06 	br	2006414 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 20063a8:	0001883a 	nop
 20063ac:	00001906 	br	2006414 <___vfprintf_internal_r+0x2064>
 20063b0:	0001883a 	nop
 20063b4:	00001706 	br	2006414 <___vfprintf_internal_r+0x2064>
 20063b8:	0001883a 	nop
 20063bc:	00001506 	br	2006414 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 20063c0:	0001883a 	nop
 20063c4:	00001306 	br	2006414 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 20063c8:	0001883a 	nop
 20063cc:	00001106 	br	2006414 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 20063d0:	0001883a 	nop
 20063d4:	00000f06 	br	2006414 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 20063d8:	0001883a 	nop
 20063dc:	00000d06 	br	2006414 <___vfprintf_internal_r+0x2064>
 20063e0:	0001883a 	nop
 20063e4:	00000b06 	br	2006414 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 20063e8:	0001883a 	nop
 20063ec:	00000906 	br	2006414 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 20063f0:	0001883a 	nop
 20063f4:	00000706 	br	2006414 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 20063f8:	0001883a 	nop
 20063fc:	00000506 	br	2006414 <___vfprintf_internal_r+0x2064>
 2006400:	0001883a 	nop
 2006404:	00000306 	br	2006414 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2006408:	0001883a 	nop
 200640c:	00000106 	br	2006414 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2006410:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 2006414:	e0bfb817 	ldw	r2,-288(fp)
 2006418:	10000326 	beq	r2,zero,2006428 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 200641c:	e17fb817 	ldw	r5,-288(fp)
 2006420:	e13fe617 	ldw	r4,-104(fp)
 2006424:	200923c0 	call	200923c <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2006428:	e0bfe717 	ldw	r2,-100(fp)
 200642c:	1080030b 	ldhu	r2,12(r2)
 2006430:	10bfffcc 	andi	r2,r2,65535
 2006434:	1080100c 	andi	r2,r2,64
 2006438:	1000021e 	bne	r2,zero,2006444 <___vfprintf_internal_r+0x2094>
 200643c:	e0bfac17 	ldw	r2,-336(fp)
 2006440:	00000206 	br	200644c <___vfprintf_internal_r+0x209c>
 2006444:	00bfffc4 	movi	r2,-1
 2006448:	0001883a 	nop
	/* NOTREACHED */
}
 200644c:	e6fff804 	addi	sp,fp,-32
 2006450:	dfc00917 	ldw	ra,36(sp)
 2006454:	df000817 	ldw	fp,32(sp)
 2006458:	ddc00717 	ldw	r23,28(sp)
 200645c:	dd800617 	ldw	r22,24(sp)
 2006460:	dd400517 	ldw	r21,20(sp)
 2006464:	dd000417 	ldw	r20,16(sp)
 2006468:	dcc00317 	ldw	r19,12(sp)
 200646c:	dc800217 	ldw	r18,8(sp)
 2006470:	dc400117 	ldw	r17,4(sp)
 2006474:	dc000017 	ldw	r16,0(sp)
 2006478:	dec00a04 	addi	sp,sp,40
 200647c:	f800283a 	ret

02006480 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 2006480:	deffef04 	addi	sp,sp,-68
 2006484:	dfc01015 	stw	ra,64(sp)
 2006488:	df000f15 	stw	fp,60(sp)
 200648c:	df000f04 	addi	fp,sp,60
 2006490:	e13ffc15 	stw	r4,-16(fp)
 2006494:	e17ffd15 	stw	r5,-12(fp)
 2006498:	e1bffe15 	stw	r6,-8(fp)
 200649c:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 20064a0:	e0bffd17 	ldw	r2,-12(fp)
 20064a4:	e0bffa15 	stw	r2,-24(fp)
 20064a8:	e0bffe17 	ldw	r2,-8(fp)
 20064ac:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 20064b0:	e0bffb17 	ldw	r2,-20(fp)
 20064b4:	1000090e 	bge	r2,zero,20064dc <cvt+0x5c>
		value = -value;
 20064b8:	e0bffd17 	ldw	r2,-12(fp)
 20064bc:	e0bffd15 	stw	r2,-12(fp)
 20064c0:	e0bffe17 	ldw	r2,-8(fp)
 20064c4:	10a0003c 	xorhi	r2,r2,32768
 20064c8:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 20064cc:	e0800317 	ldw	r2,12(fp)
 20064d0:	00c00b44 	movi	r3,45
 20064d4:	10c00005 	stb	r3,0(r2)
 20064d8:	00000206 	br	20064e4 <cvt+0x64>
	} else
		*sign = '\000';
 20064dc:	e0800317 	ldw	r2,12(fp)
 20064e0:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 20064e4:	e0800517 	ldw	r2,20(fp)
 20064e8:	108019a0 	cmpeqi	r2,r2,102
 20064ec:	1000031e 	bne	r2,zero,20064fc <cvt+0x7c>
 20064f0:	e0800517 	ldw	r2,20(fp)
 20064f4:	10801198 	cmpnei	r2,r2,70
 20064f8:	1000031e 	bne	r2,zero,2006508 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 20064fc:	008000c4 	movi	r2,3
 2006500:	e0bff515 	stw	r2,-44(fp)
 2006504:	00000b06 	br	2006534 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 2006508:	e0800517 	ldw	r2,20(fp)
 200650c:	10801960 	cmpeqi	r2,r2,101
 2006510:	1000031e 	bne	r2,zero,2006520 <cvt+0xa0>
 2006514:	e0800517 	ldw	r2,20(fp)
 2006518:	10801158 	cmpnei	r2,r2,69
 200651c:	1000031e 	bne	r2,zero,200652c <cvt+0xac>
			ndigits++;
 2006520:	e0bfff17 	ldw	r2,-4(fp)
 2006524:	10800044 	addi	r2,r2,1
 2006528:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 200652c:	00800084 	movi	r2,2
 2006530:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 2006534:	e0bff904 	addi	r2,fp,-28
 2006538:	d8800315 	stw	r2,12(sp)
 200653c:	e0bff804 	addi	r2,fp,-32
 2006540:	d8800215 	stw	r2,8(sp)
 2006544:	e0800417 	ldw	r2,16(fp)
 2006548:	d8800115 	stw	r2,4(sp)
 200654c:	e0bfff17 	ldw	r2,-4(fp)
 2006550:	d8800015 	stw	r2,0(sp)
 2006554:	e1fff517 	ldw	r7,-44(fp)
 2006558:	e17ffd17 	ldw	r5,-12(fp)
 200655c:	e1bffe17 	ldw	r6,-8(fp)
 2006560:	e13ffc17 	ldw	r4,-16(fp)
 2006564:	2006d200 	call	2006d20 <_dtoa_r>
 2006568:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 200656c:	e0800517 	ldw	r2,20(fp)
 2006570:	108019e0 	cmpeqi	r2,r2,103
 2006574:	1000031e 	bne	r2,zero,2006584 <cvt+0x104>
 2006578:	e0800517 	ldw	r2,20(fp)
 200657c:	108011d8 	cmpnei	r2,r2,71
 2006580:	1000031e 	bne	r2,zero,2006590 <cvt+0x110>
 2006584:	e0800217 	ldw	r2,8(fp)
 2006588:	1080004c 	andi	r2,r2,1
 200658c:	10003326 	beq	r2,zero,200665c <cvt+0x1dc>
		bp = digits + ndigits;
 2006590:	e0bfff17 	ldw	r2,-4(fp)
 2006594:	e0fff717 	ldw	r3,-36(fp)
 2006598:	1885883a 	add	r2,r3,r2
 200659c:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 20065a0:	e0800517 	ldw	r2,20(fp)
 20065a4:	108019a0 	cmpeqi	r2,r2,102
 20065a8:	1000031e 	bne	r2,zero,20065b8 <cvt+0x138>
 20065ac:	e0800517 	ldw	r2,20(fp)
 20065b0:	10801198 	cmpnei	r2,r2,70
 20065b4:	1000181e 	bne	r2,zero,2006618 <cvt+0x198>
			if (*digits == '0' && value)
 20065b8:	e0bff717 	ldw	r2,-36(fp)
 20065bc:	10800003 	ldbu	r2,0(r2)
 20065c0:	10803fcc 	andi	r2,r2,255
 20065c4:	1080201c 	xori	r2,r2,128
 20065c8:	10bfe004 	addi	r2,r2,-128
 20065cc:	10800c18 	cmpnei	r2,r2,48
 20065d0:	10000b1e 	bne	r2,zero,2006600 <cvt+0x180>
 20065d4:	000d883a 	mov	r6,zero
 20065d8:	000f883a 	mov	r7,zero
 20065dc:	e13ffd17 	ldw	r4,-12(fp)
 20065e0:	e17ffe17 	ldw	r5,-8(fp)
 20065e4:	20029600 	call	2002960 <__eqdf2>
 20065e8:	10000526 	beq	r2,zero,2006600 <cvt+0x180>
				*decpt = -ndigits + 1;
 20065ec:	00c00044 	movi	r3,1
 20065f0:	e0bfff17 	ldw	r2,-4(fp)
 20065f4:	1887c83a 	sub	r3,r3,r2
 20065f8:	e0800417 	ldw	r2,16(fp)
 20065fc:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 2006600:	e0800417 	ldw	r2,16(fp)
 2006604:	10800017 	ldw	r2,0(r2)
 2006608:	1007883a 	mov	r3,r2
 200660c:	e0bff617 	ldw	r2,-40(fp)
 2006610:	10c5883a 	add	r2,r2,r3
 2006614:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 2006618:	000d883a 	mov	r6,zero
 200661c:	000f883a 	mov	r7,zero
 2006620:	e13ffd17 	ldw	r4,-12(fp)
 2006624:	e17ffe17 	ldw	r5,-8(fp)
 2006628:	20029600 	call	2002960 <__eqdf2>
 200662c:	1000081e 	bne	r2,zero,2006650 <cvt+0x1d0>
			rve = bp;
 2006630:	e0bff617 	ldw	r2,-40(fp)
 2006634:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 2006638:	00000506 	br	2006650 <cvt+0x1d0>
			*rve++ = '0';
 200663c:	e0bff917 	ldw	r2,-28(fp)
 2006640:	10c00044 	addi	r3,r2,1
 2006644:	e0fff915 	stw	r3,-28(fp)
 2006648:	00c00c04 	movi	r3,48
 200664c:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 2006650:	e0fff917 	ldw	r3,-28(fp)
 2006654:	e0bff617 	ldw	r2,-40(fp)
 2006658:	18bff836 	bltu	r3,r2,200663c <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 200665c:	e0bff917 	ldw	r2,-28(fp)
 2006660:	1007883a 	mov	r3,r2
 2006664:	e0bff717 	ldw	r2,-36(fp)
 2006668:	1887c83a 	sub	r3,r3,r2
 200666c:	e0800617 	ldw	r2,24(fp)
 2006670:	10c00015 	stw	r3,0(r2)
	return (digits);
 2006674:	e0bff717 	ldw	r2,-36(fp)
}
 2006678:	e037883a 	mov	sp,fp
 200667c:	dfc00117 	ldw	ra,4(sp)
 2006680:	df000017 	ldw	fp,0(sp)
 2006684:	dec00204 	addi	sp,sp,8
 2006688:	f800283a 	ret

0200668c <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 200668c:	defff704 	addi	sp,sp,-36
 2006690:	dfc00815 	stw	ra,32(sp)
 2006694:	df000715 	stw	fp,28(sp)
 2006698:	dc400615 	stw	r17,24(sp)
 200669c:	dc000515 	stw	r16,20(sp)
 20066a0:	df000704 	addi	fp,sp,28
 20066a4:	e13ffb15 	stw	r4,-20(fp)
 20066a8:	e17ffc15 	stw	r5,-16(fp)
 20066ac:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 20066b0:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 20066b4:	8805883a 	mov	r2,r17
 20066b8:	14400044 	addi	r17,r2,1
 20066bc:	e0fffd17 	ldw	r3,-12(fp)
 20066c0:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 20066c4:	e0bffc17 	ldw	r2,-16(fp)
 20066c8:	1000080e 	bge	r2,zero,20066ec <exponent+0x60>
		exp = -exp;
 20066cc:	e0bffc17 	ldw	r2,-16(fp)
 20066d0:	0085c83a 	sub	r2,zero,r2
 20066d4:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 20066d8:	8805883a 	mov	r2,r17
 20066dc:	14400044 	addi	r17,r2,1
 20066e0:	00c00b44 	movi	r3,45
 20066e4:	10c00005 	stb	r3,0(r2)
 20066e8:	00000406 	br	20066fc <exponent+0x70>
	}
	else
		*p++ = '+';
 20066ec:	8805883a 	mov	r2,r17
 20066f0:	14400044 	addi	r17,r2,1
 20066f4:	00c00ac4 	movi	r3,43
 20066f8:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 20066fc:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 2006700:	e0bffc17 	ldw	r2,-16(fp)
 2006704:	10800290 	cmplti	r2,r2,10
 2006708:	10001d1e 	bne	r2,zero,2006780 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 200670c:	843fffc4 	addi	r16,r16,-1
 2006710:	e0bffc17 	ldw	r2,-16(fp)
 2006714:	01400284 	movi	r5,10
 2006718:	1009883a 	mov	r4,r2
 200671c:	2003e100 	call	2003e10 <__modsi3>
 2006720:	10800c04 	addi	r2,r2,48
 2006724:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 2006728:	e0bffc17 	ldw	r2,-16(fp)
 200672c:	01400284 	movi	r5,10
 2006730:	1009883a 	mov	r4,r2
 2006734:	2003d8c0 	call	2003d8c <__divsi3>
 2006738:	e0bffc15 	stw	r2,-16(fp)
 200673c:	e0bffc17 	ldw	r2,-16(fp)
 2006740:	10800288 	cmpgei	r2,r2,10
 2006744:	103ff11e 	bne	r2,zero,200670c <exponent+0x80>
		*--t = to_char (exp);
 2006748:	843fffc4 	addi	r16,r16,-1
 200674c:	e0bffc17 	ldw	r2,-16(fp)
 2006750:	10800c04 	addi	r2,r2,48
 2006754:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 2006758:	00000606 	br	2006774 <exponent+0xe8>
 200675c:	8805883a 	mov	r2,r17
 2006760:	14400044 	addi	r17,r2,1
 2006764:	8007883a 	mov	r3,r16
 2006768:	1c000044 	addi	r16,r3,1
 200676c:	18c00003 	ldbu	r3,0(r3)
 2006770:	10c00005 	stb	r3,0(r2)
 2006774:	e0bffac4 	addi	r2,fp,-21
 2006778:	80bff836 	bltu	r16,r2,200675c <exponent+0xd0>
 200677c:	00000906 	br	20067a4 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 2006780:	8805883a 	mov	r2,r17
 2006784:	14400044 	addi	r17,r2,1
 2006788:	00c00c04 	movi	r3,48
 200678c:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 2006790:	8805883a 	mov	r2,r17
 2006794:	14400044 	addi	r17,r2,1
 2006798:	e0fffc17 	ldw	r3,-16(fp)
 200679c:	18c00c04 	addi	r3,r3,48
 20067a0:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 20067a4:	8807883a 	mov	r3,r17
 20067a8:	e0bffb17 	ldw	r2,-20(fp)
 20067ac:	1885c83a 	sub	r2,r3,r2
}
 20067b0:	e6fffe04 	addi	sp,fp,-8
 20067b4:	dfc00317 	ldw	ra,12(sp)
 20067b8:	df000217 	ldw	fp,8(sp)
 20067bc:	dc400117 	ldw	r17,4(sp)
 20067c0:	dc000017 	ldw	r16,0(sp)
 20067c4:	dec00404 	addi	sp,sp,16
 20067c8:	f800283a 	ret

020067cc <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 20067cc:	defffb04 	addi	sp,sp,-20
 20067d0:	dfc00415 	stw	ra,16(sp)
 20067d4:	df000315 	stw	fp,12(sp)
 20067d8:	dc000215 	stw	r16,8(sp)
 20067dc:	df000304 	addi	fp,sp,12
 20067e0:	e13ffe15 	stw	r4,-8(fp)
 20067e4:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 20067e8:	d0a00517 	ldw	r2,-32748(gp)
 20067ec:	e0bffd15 	stw	r2,-12(fp)
 20067f0:	e0bffd17 	ldw	r2,-12(fp)
 20067f4:	10000526 	beq	r2,zero,200680c <__swsetup_r+0x40>
 20067f8:	e0bffd17 	ldw	r2,-12(fp)
 20067fc:	10800e17 	ldw	r2,56(r2)
 2006800:	1000021e 	bne	r2,zero,200680c <__swsetup_r+0x40>
 2006804:	e13ffd17 	ldw	r4,-12(fp)
 2006808:	200901c0 	call	200901c <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 200680c:	8080030b 	ldhu	r2,12(r16)
 2006810:	10bfffcc 	andi	r2,r2,65535
 2006814:	1080020c 	andi	r2,r2,8
 2006818:	1000241e 	bne	r2,zero,20068ac <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 200681c:	8080030b 	ldhu	r2,12(r16)
 2006820:	10bfffcc 	andi	r2,r2,65535
 2006824:	1080040c 	andi	r2,r2,16
 2006828:	1000081e 	bne	r2,zero,200684c <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 200682c:	e0bffe17 	ldw	r2,-8(fp)
 2006830:	00c00244 	movi	r3,9
 2006834:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 2006838:	8080030b 	ldhu	r2,12(r16)
 200683c:	10801014 	ori	r2,r2,64
 2006840:	8080030d 	sth	r2,12(r16)
	  return EOF;
 2006844:	00bfffc4 	movi	r2,-1
 2006848:	00004206 	br	2006954 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 200684c:	8080030b 	ldhu	r2,12(r16)
 2006850:	10bfffcc 	andi	r2,r2,65535
 2006854:	1080010c 	andi	r2,r2,4
 2006858:	10001126 	beq	r2,zero,20068a0 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 200685c:	80800c17 	ldw	r2,48(r16)
 2006860:	10000826 	beq	r2,zero,2006884 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 2006864:	80c00c17 	ldw	r3,48(r16)
 2006868:	80801004 	addi	r2,r16,64
 200686c:	18800426 	beq	r3,r2,2006880 <__swsetup_r+0xb4>
 2006870:	80800c17 	ldw	r2,48(r16)
 2006874:	100b883a 	mov	r5,r2
 2006878:	e13ffe17 	ldw	r4,-8(fp)
 200687c:	200923c0 	call	200923c <_free_r>
 2006880:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 2006884:	80c0030b 	ldhu	r3,12(r16)
 2006888:	00bff6c4 	movi	r2,-37
 200688c:	1884703a 	and	r2,r3,r2
 2006890:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 2006894:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 2006898:	80800417 	ldw	r2,16(r16)
 200689c:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 20068a0:	8080030b 	ldhu	r2,12(r16)
 20068a4:	10800214 	ori	r2,r2,8
 20068a8:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 20068ac:	80800417 	ldw	r2,16(r16)
 20068b0:	10000b1e 	bne	r2,zero,20068e0 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 20068b4:	8080030b 	ldhu	r2,12(r16)
 20068b8:	10bfffcc 	andi	r2,r2,65535
 20068bc:	1080800c 	andi	r2,r2,512
 20068c0:	10000426 	beq	r2,zero,20068d4 <__swsetup_r+0x108>
 20068c4:	8080030b 	ldhu	r2,12(r16)
 20068c8:	10bfffcc 	andi	r2,r2,65535
 20068cc:	1080200c 	andi	r2,r2,128
 20068d0:	10000326 	beq	r2,zero,20068e0 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 20068d4:	800b883a 	mov	r5,r16
 20068d8:	e13ffe17 	ldw	r4,-8(fp)
 20068dc:	200a29c0 	call	200a29c <__smakebuf_r>

  if (fp->_flags & __SLBF)
 20068e0:	8080030b 	ldhu	r2,12(r16)
 20068e4:	10bfffcc 	andi	r2,r2,65535
 20068e8:	1080004c 	andi	r2,r2,1
 20068ec:	10000526 	beq	r2,zero,2006904 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 20068f0:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 20068f4:	80800517 	ldw	r2,20(r16)
 20068f8:	0085c83a 	sub	r2,zero,r2
 20068fc:	80800615 	stw	r2,24(r16)
 2006900:	00000806 	br	2006924 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 2006904:	8080030b 	ldhu	r2,12(r16)
 2006908:	10bfffcc 	andi	r2,r2,65535
 200690c:	1080008c 	andi	r2,r2,2
 2006910:	1000021e 	bne	r2,zero,200691c <__swsetup_r+0x150>
 2006914:	80800517 	ldw	r2,20(r16)
 2006918:	00000106 	br	2006920 <__swsetup_r+0x154>
 200691c:	0005883a 	mov	r2,zero
 2006920:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 2006924:	80800417 	ldw	r2,16(r16)
 2006928:	1000091e 	bne	r2,zero,2006950 <__swsetup_r+0x184>
 200692c:	8080030b 	ldhu	r2,12(r16)
 2006930:	10bfffcc 	andi	r2,r2,65535
 2006934:	1080200c 	andi	r2,r2,128
 2006938:	10000526 	beq	r2,zero,2006950 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 200693c:	8080030b 	ldhu	r2,12(r16)
 2006940:	10801014 	ori	r2,r2,64
 2006944:	8080030d 	sth	r2,12(r16)
      return EOF;
 2006948:	00bfffc4 	movi	r2,-1
 200694c:	00000106 	br	2006954 <__swsetup_r+0x188>
    }
  return 0;
 2006950:	0005883a 	mov	r2,zero
}
 2006954:	e6ffff04 	addi	sp,fp,-4
 2006958:	dfc00217 	ldw	ra,8(sp)
 200695c:	df000117 	ldw	fp,4(sp)
 2006960:	dc000017 	ldw	r16,0(sp)
 2006964:	dec00304 	addi	sp,sp,12
 2006968:	f800283a 	ret

0200696c <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 200696c:	deffef04 	addi	sp,sp,-68
 2006970:	dfc01015 	stw	ra,64(sp)
 2006974:	df000f15 	stw	fp,60(sp)
 2006978:	df000f04 	addi	fp,sp,60
 200697c:	e13ffe15 	stw	r4,-8(fp)
 2006980:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 2006984:	e0bfff17 	ldw	r2,-4(fp)
 2006988:	10800417 	ldw	r2,16(r2)
 200698c:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 2006990:	e0bffe17 	ldw	r2,-8(fp)
 2006994:	10c00417 	ldw	r3,16(r2)
 2006998:	e0bff117 	ldw	r2,-60(fp)
 200699c:	1880020e 	bge	r3,r2,20069a8 <quorem+0x3c>
    return 0;
 20069a0:	0005883a 	mov	r2,zero
 20069a4:	0000d906 	br	2006d0c <quorem+0x3a0>
  sx = S->_x;
 20069a8:	e0bfff17 	ldw	r2,-4(fp)
 20069ac:	10800504 	addi	r2,r2,20
 20069b0:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 20069b4:	e0bff117 	ldw	r2,-60(fp)
 20069b8:	10bfffc4 	addi	r2,r2,-1
 20069bc:	e0bff115 	stw	r2,-60(fp)
 20069c0:	e0bff117 	ldw	r2,-60(fp)
 20069c4:	1085883a 	add	r2,r2,r2
 20069c8:	1085883a 	add	r2,r2,r2
 20069cc:	1007883a 	mov	r3,r2
 20069d0:	e0bff717 	ldw	r2,-36(fp)
 20069d4:	10c5883a 	add	r2,r2,r3
 20069d8:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 20069dc:	e0bffe17 	ldw	r2,-8(fp)
 20069e0:	10800504 	addi	r2,r2,20
 20069e4:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 20069e8:	e0bff117 	ldw	r2,-60(fp)
 20069ec:	1085883a 	add	r2,r2,r2
 20069f0:	1085883a 	add	r2,r2,r2
 20069f4:	1007883a 	mov	r3,r2
 20069f8:	e0bff517 	ldw	r2,-44(fp)
 20069fc:	10c5883a 	add	r2,r2,r3
 2006a00:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 2006a04:	e0bff617 	ldw	r2,-40(fp)
 2006a08:	10c00017 	ldw	r3,0(r2)
 2006a0c:	e0bff817 	ldw	r2,-32(fp)
 2006a10:	10800017 	ldw	r2,0(r2)
 2006a14:	10800044 	addi	r2,r2,1
 2006a18:	100b883a 	mov	r5,r2
 2006a1c:	1809883a 	mov	r4,r3
 2006a20:	2003e840 	call	2003e84 <__udivsi3>
 2006a24:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 2006a28:	e0bff417 	ldw	r2,-48(fp)
 2006a2c:	10005326 	beq	r2,zero,2006b7c <quorem+0x210>
    {
      borrow = 0;
 2006a30:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 2006a34:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 2006a38:	e0bff717 	ldw	r2,-36(fp)
 2006a3c:	10c00104 	addi	r3,r2,4
 2006a40:	e0fff715 	stw	r3,-36(fp)
 2006a44:	10800017 	ldw	r2,0(r2)
 2006a48:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 2006a4c:	e0bff917 	ldw	r2,-28(fp)
 2006a50:	10ffffcc 	andi	r3,r2,65535
 2006a54:	e0bff417 	ldw	r2,-48(fp)
 2006a58:	1887383a 	mul	r3,r3,r2
 2006a5c:	e0bff317 	ldw	r2,-52(fp)
 2006a60:	1885883a 	add	r2,r3,r2
 2006a64:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 2006a68:	e0bff917 	ldw	r2,-28(fp)
 2006a6c:	1006d43a 	srli	r3,r2,16
 2006a70:	e0bff417 	ldw	r2,-48(fp)
 2006a74:	1887383a 	mul	r3,r3,r2
 2006a78:	e0bffa17 	ldw	r2,-24(fp)
 2006a7c:	1004d43a 	srli	r2,r2,16
 2006a80:	1885883a 	add	r2,r3,r2
 2006a84:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 2006a88:	e0bffb17 	ldw	r2,-20(fp)
 2006a8c:	1004d43a 	srli	r2,r2,16
 2006a90:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 2006a94:	e0bff517 	ldw	r2,-44(fp)
 2006a98:	10800017 	ldw	r2,0(r2)
 2006a9c:	10ffffcc 	andi	r3,r2,65535
 2006aa0:	e0bffa17 	ldw	r2,-24(fp)
 2006aa4:	10bfffcc 	andi	r2,r2,65535
 2006aa8:	1887c83a 	sub	r3,r3,r2
 2006aac:	e0bff217 	ldw	r2,-56(fp)
 2006ab0:	1885883a 	add	r2,r3,r2
 2006ab4:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 2006ab8:	e0bffc17 	ldw	r2,-16(fp)
 2006abc:	1005d43a 	srai	r2,r2,16
 2006ac0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 2006ac4:	e0bff517 	ldw	r2,-44(fp)
 2006ac8:	10800017 	ldw	r2,0(r2)
 2006acc:	1006d43a 	srli	r3,r2,16
 2006ad0:	e0bffb17 	ldw	r2,-20(fp)
 2006ad4:	10bfffcc 	andi	r2,r2,65535
 2006ad8:	1887c83a 	sub	r3,r3,r2
 2006adc:	e0bff217 	ldw	r2,-56(fp)
 2006ae0:	1885883a 	add	r2,r3,r2
 2006ae4:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2006ae8:	e0bffd17 	ldw	r2,-12(fp)
 2006aec:	1005d43a 	srai	r2,r2,16
 2006af0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 2006af4:	e0bff517 	ldw	r2,-44(fp)
 2006af8:	10c00104 	addi	r3,r2,4
 2006afc:	e0fff515 	stw	r3,-44(fp)
 2006b00:	e0fffd17 	ldw	r3,-12(fp)
 2006b04:	1808943a 	slli	r4,r3,16
 2006b08:	e0fffc17 	ldw	r3,-16(fp)
 2006b0c:	18ffffcc 	andi	r3,r3,65535
 2006b10:	20c6b03a 	or	r3,r4,r3
 2006b14:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 2006b18:	e0bff717 	ldw	r2,-36(fp)
 2006b1c:	e0fff817 	ldw	r3,-32(fp)
 2006b20:	18bfc52e 	bgeu	r3,r2,2006a38 <quorem+0xcc>
      if (!*bxe)
 2006b24:	e0bff617 	ldw	r2,-40(fp)
 2006b28:	10800017 	ldw	r2,0(r2)
 2006b2c:	1000131e 	bne	r2,zero,2006b7c <quorem+0x210>
	{
	  bx = b->_x;
 2006b30:	e0bffe17 	ldw	r2,-8(fp)
 2006b34:	10800504 	addi	r2,r2,20
 2006b38:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 2006b3c:	00000306 	br	2006b4c <quorem+0x1e0>
	    --n;
 2006b40:	e0bff117 	ldw	r2,-60(fp)
 2006b44:	10bfffc4 	addi	r2,r2,-1
 2006b48:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 2006b4c:	e0bff617 	ldw	r2,-40(fp)
 2006b50:	10bfff04 	addi	r2,r2,-4
 2006b54:	e0bff615 	stw	r2,-40(fp)
 2006b58:	e0bff617 	ldw	r2,-40(fp)
 2006b5c:	e0fff517 	ldw	r3,-44(fp)
 2006b60:	1880032e 	bgeu	r3,r2,2006b70 <quorem+0x204>
 2006b64:	e0bff617 	ldw	r2,-40(fp)
 2006b68:	10800017 	ldw	r2,0(r2)
 2006b6c:	103ff426 	beq	r2,zero,2006b40 <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 2006b70:	e0bffe17 	ldw	r2,-8(fp)
 2006b74:	e0fff117 	ldw	r3,-60(fp)
 2006b78:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 2006b7c:	e17fff17 	ldw	r5,-4(fp)
 2006b80:	e13ffe17 	ldw	r4,-8(fp)
 2006b84:	200c8e80 	call	200c8e8 <__mcmp>
 2006b88:	10005f16 	blt	r2,zero,2006d08 <quorem+0x39c>
    {
      q++;
 2006b8c:	e0bff417 	ldw	r2,-48(fp)
 2006b90:	10800044 	addi	r2,r2,1
 2006b94:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 2006b98:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 2006b9c:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 2006ba0:	e0bffe17 	ldw	r2,-8(fp)
 2006ba4:	10800504 	addi	r2,r2,20
 2006ba8:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 2006bac:	e0bfff17 	ldw	r2,-4(fp)
 2006bb0:	10800504 	addi	r2,r2,20
 2006bb4:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 2006bb8:	e0bff717 	ldw	r2,-36(fp)
 2006bbc:	10c00104 	addi	r3,r2,4
 2006bc0:	e0fff715 	stw	r3,-36(fp)
 2006bc4:	10800017 	ldw	r2,0(r2)
 2006bc8:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 2006bcc:	e0bff917 	ldw	r2,-28(fp)
 2006bd0:	10ffffcc 	andi	r3,r2,65535
 2006bd4:	e0bff317 	ldw	r2,-52(fp)
 2006bd8:	1885883a 	add	r2,r3,r2
 2006bdc:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 2006be0:	e0bff917 	ldw	r2,-28(fp)
 2006be4:	1006d43a 	srli	r3,r2,16
 2006be8:	e0bffa17 	ldw	r2,-24(fp)
 2006bec:	1004d43a 	srli	r2,r2,16
 2006bf0:	1885883a 	add	r2,r3,r2
 2006bf4:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 2006bf8:	e0bffb17 	ldw	r2,-20(fp)
 2006bfc:	1004d43a 	srli	r2,r2,16
 2006c00:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 2006c04:	e0bff517 	ldw	r2,-44(fp)
 2006c08:	10800017 	ldw	r2,0(r2)
 2006c0c:	10ffffcc 	andi	r3,r2,65535
 2006c10:	e0bffa17 	ldw	r2,-24(fp)
 2006c14:	10bfffcc 	andi	r2,r2,65535
 2006c18:	1887c83a 	sub	r3,r3,r2
 2006c1c:	e0bff217 	ldw	r2,-56(fp)
 2006c20:	1885883a 	add	r2,r3,r2
 2006c24:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 2006c28:	e0bffc17 	ldw	r2,-16(fp)
 2006c2c:	1005d43a 	srai	r2,r2,16
 2006c30:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 2006c34:	e0bff517 	ldw	r2,-44(fp)
 2006c38:	10800017 	ldw	r2,0(r2)
 2006c3c:	1006d43a 	srli	r3,r2,16
 2006c40:	e0bffb17 	ldw	r2,-20(fp)
 2006c44:	10bfffcc 	andi	r2,r2,65535
 2006c48:	1887c83a 	sub	r3,r3,r2
 2006c4c:	e0bff217 	ldw	r2,-56(fp)
 2006c50:	1885883a 	add	r2,r3,r2
 2006c54:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2006c58:	e0bffd17 	ldw	r2,-12(fp)
 2006c5c:	1005d43a 	srai	r2,r2,16
 2006c60:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 2006c64:	e0bff517 	ldw	r2,-44(fp)
 2006c68:	10c00104 	addi	r3,r2,4
 2006c6c:	e0fff515 	stw	r3,-44(fp)
 2006c70:	e0fffd17 	ldw	r3,-12(fp)
 2006c74:	1808943a 	slli	r4,r3,16
 2006c78:	e0fffc17 	ldw	r3,-16(fp)
 2006c7c:	18ffffcc 	andi	r3,r3,65535
 2006c80:	20c6b03a 	or	r3,r4,r3
 2006c84:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 2006c88:	e0bff717 	ldw	r2,-36(fp)
 2006c8c:	e0fff817 	ldw	r3,-32(fp)
 2006c90:	18bfc92e 	bgeu	r3,r2,2006bb8 <quorem+0x24c>
      bx = b->_x;
 2006c94:	e0bffe17 	ldw	r2,-8(fp)
 2006c98:	10800504 	addi	r2,r2,20
 2006c9c:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 2006ca0:	e0bff117 	ldw	r2,-60(fp)
 2006ca4:	1085883a 	add	r2,r2,r2
 2006ca8:	1085883a 	add	r2,r2,r2
 2006cac:	1007883a 	mov	r3,r2
 2006cb0:	e0bff517 	ldw	r2,-44(fp)
 2006cb4:	10c5883a 	add	r2,r2,r3
 2006cb8:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 2006cbc:	e0bff617 	ldw	r2,-40(fp)
 2006cc0:	10800017 	ldw	r2,0(r2)
 2006cc4:	1000101e 	bne	r2,zero,2006d08 <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 2006cc8:	00000306 	br	2006cd8 <quorem+0x36c>
	    --n;
 2006ccc:	e0bff117 	ldw	r2,-60(fp)
 2006cd0:	10bfffc4 	addi	r2,r2,-1
 2006cd4:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 2006cd8:	e0bff617 	ldw	r2,-40(fp)
 2006cdc:	10bfff04 	addi	r2,r2,-4
 2006ce0:	e0bff615 	stw	r2,-40(fp)
 2006ce4:	e0bff617 	ldw	r2,-40(fp)
 2006ce8:	e0fff517 	ldw	r3,-44(fp)
 2006cec:	1880032e 	bgeu	r3,r2,2006cfc <quorem+0x390>
 2006cf0:	e0bff617 	ldw	r2,-40(fp)
 2006cf4:	10800017 	ldw	r2,0(r2)
 2006cf8:	103ff426 	beq	r2,zero,2006ccc <quorem+0x360>
	    --n;
	  b->_wds = n;
 2006cfc:	e0bffe17 	ldw	r2,-8(fp)
 2006d00:	e0fff117 	ldw	r3,-60(fp)
 2006d04:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 2006d08:	e0bff417 	ldw	r2,-48(fp)
}
 2006d0c:	e037883a 	mov	sp,fp
 2006d10:	dfc00117 	ldw	ra,4(sp)
 2006d14:	df000017 	ldw	fp,0(sp)
 2006d18:	dec00204 	addi	sp,sp,8
 2006d1c:	f800283a 	ret

02006d20 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 2006d20:	deffcc04 	addi	sp,sp,-208
 2006d24:	dfc03315 	stw	ra,204(sp)
 2006d28:	df003215 	stw	fp,200(sp)
 2006d2c:	dcc03115 	stw	r19,196(sp)
 2006d30:	dc803015 	stw	r18,192(sp)
 2006d34:	dc402f15 	stw	r17,188(sp)
 2006d38:	dc002e15 	stw	r16,184(sp)
 2006d3c:	df003204 	addi	fp,sp,200
 2006d40:	e13ff815 	stw	r4,-32(fp)
 2006d44:	e17ff915 	stw	r5,-28(fp)
 2006d48:	e1bffa15 	stw	r6,-24(fp)
 2006d4c:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 2006d50:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 2006d54:	e0bff917 	ldw	r2,-28(fp)
 2006d58:	e0bff215 	stw	r2,-56(fp)
 2006d5c:	e0bffa17 	ldw	r2,-24(fp)
 2006d60:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 2006d64:	e0bff817 	ldw	r2,-32(fp)
 2006d68:	10801017 	ldw	r2,64(r2)
 2006d6c:	10001326 	beq	r2,zero,2006dbc <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 2006d70:	e0bff817 	ldw	r2,-32(fp)
 2006d74:	10801017 	ldw	r2,64(r2)
 2006d78:	e0fff817 	ldw	r3,-32(fp)
 2006d7c:	18c01117 	ldw	r3,68(r3)
 2006d80:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 2006d84:	e0bff817 	ldw	r2,-32(fp)
 2006d88:	10801017 	ldw	r2,64(r2)
 2006d8c:	e0fff817 	ldw	r3,-32(fp)
 2006d90:	18c01117 	ldw	r3,68(r3)
 2006d94:	01000044 	movi	r4,1
 2006d98:	20c6983a 	sll	r3,r4,r3
 2006d9c:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 2006da0:	e0bff817 	ldw	r2,-32(fp)
 2006da4:	10801017 	ldw	r2,64(r2)
 2006da8:	100b883a 	mov	r5,r2
 2006dac:	e13ff817 	ldw	r4,-32(fp)
 2006db0:	200bc380 	call	200bc38 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 2006db4:	e0bff817 	ldw	r2,-32(fp)
 2006db8:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 2006dbc:	e0bff317 	ldw	r2,-52(fp)
 2006dc0:	1000090e 	bge	r2,zero,2006de8 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 2006dc4:	e0800417 	ldw	r2,16(fp)
 2006dc8:	00c00044 	movi	r3,1
 2006dcc:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 2006dd0:	e0fff317 	ldw	r3,-52(fp)
 2006dd4:	00a00034 	movhi	r2,32768
 2006dd8:	10bfffc4 	addi	r2,r2,-1
 2006ddc:	1884703a 	and	r2,r3,r2
 2006de0:	e0bff315 	stw	r2,-52(fp)
 2006de4:	00000206 	br	2006df0 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 2006de8:	e0800417 	ldw	r2,16(fp)
 2006dec:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 2006df0:	e0bff317 	ldw	r2,-52(fp)
 2006df4:	10dffc2c 	andhi	r3,r2,32752
 2006df8:	009ffc34 	movhi	r2,32752
 2006dfc:	1880221e 	bne	r3,r2,2006e88 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 2006e00:	e0800317 	ldw	r2,12(fp)
 2006e04:	00c9c3c4 	movi	r3,9999
 2006e08:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 2006e0c:	e0bff217 	ldw	r2,-56(fp)
 2006e10:	1000081e 	bne	r2,zero,2006e34 <_dtoa_r+0x114>
 2006e14:	e0fff317 	ldw	r3,-52(fp)
 2006e18:	00800434 	movhi	r2,16
 2006e1c:	10bfffc4 	addi	r2,r2,-1
 2006e20:	1884703a 	and	r2,r3,r2
 2006e24:	1000031e 	bne	r2,zero,2006e34 <_dtoa_r+0x114>
 2006e28:	008080b4 	movhi	r2,514
 2006e2c:	10b27304 	addi	r2,r2,-13876
 2006e30:	00000206 	br	2006e3c <_dtoa_r+0x11c>
 2006e34:	008080b4 	movhi	r2,514
 2006e38:	10b27604 	addi	r2,r2,-13864
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 2006e3c:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 2006e40:	e0800517 	ldw	r2,20(fp)
 2006e44:	10000e26 	beq	r2,zero,2006e80 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 2006e48:	e0bfe717 	ldw	r2,-100(fp)
 2006e4c:	108000c4 	addi	r2,r2,3
 2006e50:	10800003 	ldbu	r2,0(r2)
 2006e54:	10803fcc 	andi	r2,r2,255
 2006e58:	1080201c 	xori	r2,r2,128
 2006e5c:	10bfe004 	addi	r2,r2,-128
 2006e60:	10000326 	beq	r2,zero,2006e70 <_dtoa_r+0x150>
 2006e64:	e0bfe717 	ldw	r2,-100(fp)
 2006e68:	10800204 	addi	r2,r2,8
 2006e6c:	00000206 	br	2006e78 <_dtoa_r+0x158>
 2006e70:	e0bfe717 	ldw	r2,-100(fp)
 2006e74:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 2006e78:	e0c00517 	ldw	r3,20(fp)
 2006e7c:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 2006e80:	e0bfe717 	ldw	r2,-100(fp)
 2006e84:	00067b06 	br	2008874 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 2006e88:	e0bff217 	ldw	r2,-56(fp)
 2006e8c:	e0fff317 	ldw	r3,-52(fp)
 2006e90:	000d883a 	mov	r6,zero
 2006e94:	000f883a 	mov	r7,zero
 2006e98:	1009883a 	mov	r4,r2
 2006e9c:	180b883a 	mov	r5,r3
 2006ea0:	20029600 	call	2002960 <__eqdf2>
 2006ea4:	10000e1e 	bne	r2,zero,2006ee0 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 2006ea8:	e0800317 	ldw	r2,12(fp)
 2006eac:	00c00044 	movi	r3,1
 2006eb0:	10c00015 	stw	r3,0(r2)
      s = "0";
 2006eb4:	008080b4 	movhi	r2,514
 2006eb8:	10b27704 	addi	r2,r2,-13860
 2006ebc:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 2006ec0:	e0800517 	ldw	r2,20(fp)
 2006ec4:	10000426 	beq	r2,zero,2006ed8 <_dtoa_r+0x1b8>
	*rve = s + 1;
 2006ec8:	e0bfe717 	ldw	r2,-100(fp)
 2006ecc:	10c00044 	addi	r3,r2,1
 2006ed0:	e0800517 	ldw	r2,20(fp)
 2006ed4:	10c00015 	stw	r3,0(r2)
      return s;
 2006ed8:	e0bfe717 	ldw	r2,-100(fp)
 2006edc:	00066506 	br	2008874 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 2006ee0:	e0bff217 	ldw	r2,-56(fp)
 2006ee4:	e0fff317 	ldw	r3,-52(fp)
 2006ee8:	e17ff104 	addi	r5,fp,-60
 2006eec:	e13ff004 	addi	r4,fp,-64
 2006ef0:	d9000015 	stw	r4,0(sp)
 2006ef4:	280f883a 	mov	r7,r5
 2006ef8:	100b883a 	mov	r5,r2
 2006efc:	180d883a 	mov	r6,r3
 2006f00:	e13ff817 	ldw	r4,-32(fp)
 2006f04:	200cf700 	call	200cf70 <__d2b>
 2006f08:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 2006f0c:	e0bff317 	ldw	r2,-52(fp)
 2006f10:	1004d53a 	srli	r2,r2,20
 2006f14:	1081ffcc 	andi	r2,r2,2047
 2006f18:	e0bfd215 	stw	r2,-184(fp)
 2006f1c:	e0bfd217 	ldw	r2,-184(fp)
 2006f20:	10001126 	beq	r2,zero,2006f68 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 2006f24:	e0bff217 	ldw	r2,-56(fp)
 2006f28:	e0fff317 	ldw	r3,-52(fp)
 2006f2c:	e0bff415 	stw	r2,-48(fp)
 2006f30:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 2006f34:	e0fff517 	ldw	r3,-44(fp)
 2006f38:	00800434 	movhi	r2,16
 2006f3c:	10bfffc4 	addi	r2,r2,-1
 2006f40:	1884703a 	and	r2,r3,r2
 2006f44:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 2006f48:	e0bff517 	ldw	r2,-44(fp)
 2006f4c:	108ffc34 	orhi	r2,r2,16368
 2006f50:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 2006f54:	e0bfd217 	ldw	r2,-184(fp)
 2006f58:	10bf0044 	addi	r2,r2,-1023
 2006f5c:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 2006f60:	e03fe015 	stw	zero,-128(fp)
 2006f64:	00002806 	br	2007008 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 2006f68:	e0fff017 	ldw	r3,-64(fp)
 2006f6c:	e0bff117 	ldw	r2,-60(fp)
 2006f70:	1885883a 	add	r2,r3,r2
 2006f74:	10810c84 	addi	r2,r2,1074
 2006f78:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 2006f7c:	e0bfd217 	ldw	r2,-184(fp)
 2006f80:	10800850 	cmplti	r2,r2,33
 2006f84:	10000b1e 	bne	r2,zero,2006fb4 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2006f88:	e0fff317 	ldw	r3,-52(fp)
 2006f8c:	01001004 	movi	r4,64
 2006f90:	e0bfd217 	ldw	r2,-184(fp)
 2006f94:	2085c83a 	sub	r2,r4,r2
 2006f98:	1886983a 	sll	r3,r3,r2
 2006f9c:	e13ff217 	ldw	r4,-56(fp)
 2006fa0:	e0bfd217 	ldw	r2,-184(fp)
 2006fa4:	10bff804 	addi	r2,r2,-32
 2006fa8:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 2006fac:	1884b03a 	or	r2,r3,r2
 2006fb0:	00000506 	br	2006fc8 <_dtoa_r+0x2a8>
 2006fb4:	e0fff217 	ldw	r3,-56(fp)
 2006fb8:	01000804 	movi	r4,32
 2006fbc:	e0bfd217 	ldw	r2,-184(fp)
 2006fc0:	2085c83a 	sub	r2,r4,r2
 2006fc4:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2006fc8:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 2006fcc:	e13fe817 	ldw	r4,-96(fp)
 2006fd0:	20111c80 	call	20111c8 <__floatunsidf>
 2006fd4:	1009883a 	mov	r4,r2
 2006fd8:	180b883a 	mov	r5,r3
 2006fdc:	e13ff415 	stw	r4,-48(fp)
 2006fe0:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 2006fe4:	e0fff517 	ldw	r3,-44(fp)
 2006fe8:	00bf8434 	movhi	r2,65040
 2006fec:	1885883a 	add	r2,r3,r2
 2006ff0:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 2006ff4:	e0bfd217 	ldw	r2,-184(fp)
 2006ff8:	10bef344 	addi	r2,r2,-1075
 2006ffc:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 2007000:	00800044 	movi	r2,1
 2007004:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 2007008:	e0bff417 	ldw	r2,-48(fp)
 200700c:	e0fff517 	ldw	r3,-44(fp)
 2007010:	000d883a 	mov	r6,zero
 2007014:	01cffe34 	movhi	r7,16376
 2007018:	1009883a 	mov	r4,r2
 200701c:	180b883a 	mov	r5,r3
 2007020:	20032d00 	call	20032d0 <__subdf3>
 2007024:	1009883a 	mov	r4,r2
 2007028:	180b883a 	mov	r5,r3
 200702c:	2005883a 	mov	r2,r4
 2007030:	2807883a 	mov	r3,r5
 2007034:	0198dbf4 	movhi	r6,25455
 2007038:	3190d844 	addi	r6,r6,17249
 200703c:	01cff4f4 	movhi	r7,16339
 2007040:	39e1e9c4 	addi	r7,r7,-30809
 2007044:	1009883a 	mov	r4,r2
 2007048:	180b883a 	mov	r5,r3
 200704c:	2002bb80 	call	2002bb8 <__muldf3>
 2007050:	1009883a 	mov	r4,r2
 2007054:	180b883a 	mov	r5,r3
 2007058:	2005883a 	mov	r2,r4
 200705c:	2807883a 	mov	r3,r5
 2007060:	01a2d874 	movhi	r6,35681
 2007064:	31b22cc4 	addi	r6,r6,-14157
 2007068:	01cff1f4 	movhi	r7,16327
 200706c:	39e28a04 	addi	r7,r7,-30168
 2007070:	1009883a 	mov	r4,r2
 2007074:	180b883a 	mov	r5,r3
 2007078:	20017cc0 	call	20017cc <__adddf3>
 200707c:	1009883a 	mov	r4,r2
 2007080:	180b883a 	mov	r5,r3
 2007084:	2025883a 	mov	r18,r4
 2007088:	2827883a 	mov	r19,r5
 200708c:	e13fd217 	ldw	r4,-184(fp)
 2007090:	2003c4c0 	call	2003c4c <__floatsidf>
 2007094:	1011883a 	mov	r8,r2
 2007098:	1813883a 	mov	r9,r3
 200709c:	019427f4 	movhi	r6,20639
 20070a0:	319e7ec4 	addi	r6,r6,31227
 20070a4:	01cff4f4 	movhi	r7,16339
 20070a8:	39d104c4 	addi	r7,r7,17427
 20070ac:	4009883a 	mov	r4,r8
 20070b0:	480b883a 	mov	r5,r9
 20070b4:	2002bb80 	call	2002bb8 <__muldf3>
 20070b8:	1009883a 	mov	r4,r2
 20070bc:	180b883a 	mov	r5,r3
 20070c0:	2005883a 	mov	r2,r4
 20070c4:	2807883a 	mov	r3,r5
 20070c8:	100d883a 	mov	r6,r2
 20070cc:	180f883a 	mov	r7,r3
 20070d0:	9009883a 	mov	r4,r18
 20070d4:	980b883a 	mov	r5,r19
 20070d8:	20017cc0 	call	20017cc <__adddf3>
 20070dc:	1009883a 	mov	r4,r2
 20070e0:	180b883a 	mov	r5,r3
 20070e4:	e13fe515 	stw	r4,-108(fp)
 20070e8:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 20070ec:	e13fe517 	ldw	r4,-108(fp)
 20070f0:	e17fe617 	ldw	r5,-104(fp)
 20070f4:	2003bcc0 	call	2003bcc <__fixdfsi>
 20070f8:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 20070fc:	000d883a 	mov	r6,zero
 2007100:	000f883a 	mov	r7,zero
 2007104:	e13fe517 	ldw	r4,-108(fp)
 2007108:	e17fe617 	ldw	r5,-104(fp)
 200710c:	2002ac40 	call	2002ac4 <__ledf2>
 2007110:	10000d0e 	bge	r2,zero,2007148 <_dtoa_r+0x428>
 2007114:	e13fd717 	ldw	r4,-164(fp)
 2007118:	2003c4c0 	call	2003c4c <__floatsidf>
 200711c:	1011883a 	mov	r8,r2
 2007120:	1813883a 	mov	r9,r3
 2007124:	e1bfe517 	ldw	r6,-108(fp)
 2007128:	e1ffe617 	ldw	r7,-104(fp)
 200712c:	4009883a 	mov	r4,r8
 2007130:	480b883a 	mov	r5,r9
 2007134:	20029600 	call	2002960 <__eqdf2>
 2007138:	10000326 	beq	r2,zero,2007148 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 200713c:	e0bfd717 	ldw	r2,-164(fp)
 2007140:	10bfffc4 	addi	r2,r2,-1
 2007144:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 2007148:	00800044 	movi	r2,1
 200714c:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 2007150:	e0bfd717 	ldw	r2,-164(fp)
 2007154:	10001616 	blt	r2,zero,20071b0 <_dtoa_r+0x490>
 2007158:	e0bfd717 	ldw	r2,-164(fp)
 200715c:	108005c8 	cmpgei	r2,r2,23
 2007160:	1000131e 	bne	r2,zero,20071b0 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 2007164:	e0bff217 	ldw	r2,-56(fp)
 2007168:	e0fff317 	ldw	r3,-52(fp)
 200716c:	010080b4 	movhi	r4,514
 2007170:	21327d04 	addi	r4,r4,-13836
 2007174:	e17fd717 	ldw	r5,-164(fp)
 2007178:	280a90fa 	slli	r5,r5,3
 200717c:	214d883a 	add	r6,r4,r5
 2007180:	31000017 	ldw	r4,0(r6)
 2007184:	31400117 	ldw	r5,4(r6)
 2007188:	200d883a 	mov	r6,r4
 200718c:	280f883a 	mov	r7,r5
 2007190:	1009883a 	mov	r4,r2
 2007194:	180b883a 	mov	r5,r3
 2007198:	2002ac40 	call	2002ac4 <__ledf2>
 200719c:	1000030e 	bge	r2,zero,20071ac <_dtoa_r+0x48c>
	k--;
 20071a0:	e0bfd717 	ldw	r2,-164(fp)
 20071a4:	10bfffc4 	addi	r2,r2,-1
 20071a8:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 20071ac:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 20071b0:	e0fff017 	ldw	r3,-64(fp)
 20071b4:	e0bfd217 	ldw	r2,-184(fp)
 20071b8:	1885c83a 	sub	r2,r3,r2
 20071bc:	10bfffc4 	addi	r2,r2,-1
 20071c0:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 20071c4:	e0bfd617 	ldw	r2,-168(fp)
 20071c8:	10000416 	blt	r2,zero,20071dc <_dtoa_r+0x4bc>
    {
      b2 = 0;
 20071cc:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 20071d0:	e0bfd617 	ldw	r2,-168(fp)
 20071d4:	e0bfdc15 	stw	r2,-144(fp)
 20071d8:	00000406 	br	20071ec <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 20071dc:	e0bfd617 	ldw	r2,-168(fp)
 20071e0:	0085c83a 	sub	r2,zero,r2
 20071e4:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 20071e8:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 20071ec:	e0bfd717 	ldw	r2,-164(fp)
 20071f0:	10000816 	blt	r2,zero,2007214 <_dtoa_r+0x4f4>
    {
      b5 = 0;
 20071f4:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 20071f8:	e0bfd717 	ldw	r2,-164(fp)
 20071fc:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 2007200:	e0ffdc17 	ldw	r3,-144(fp)
 2007204:	e0bfd717 	ldw	r2,-164(fp)
 2007208:	1885883a 	add	r2,r3,r2
 200720c:	e0bfdc15 	stw	r2,-144(fp)
 2007210:	00000806 	br	2007234 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 2007214:	e0ffcf17 	ldw	r3,-196(fp)
 2007218:	e0bfd717 	ldw	r2,-164(fp)
 200721c:	1885c83a 	sub	r2,r3,r2
 2007220:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 2007224:	e0bfd717 	ldw	r2,-164(fp)
 2007228:	0085c83a 	sub	r2,zero,r2
 200722c:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 2007230:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 2007234:	e0bffb17 	ldw	r2,-20(fp)
 2007238:	10000316 	blt	r2,zero,2007248 <_dtoa_r+0x528>
 200723c:	e0bffb17 	ldw	r2,-20(fp)
 2007240:	10800290 	cmplti	r2,r2,10
 2007244:	1000011e 	bne	r2,zero,200724c <_dtoa_r+0x52c>
    mode = 0;
 2007248:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 200724c:	00800044 	movi	r2,1
 2007250:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 2007254:	e0bffb17 	ldw	r2,-20(fp)
 2007258:	10800190 	cmplti	r2,r2,6
 200725c:	1000041e 	bne	r2,zero,2007270 <_dtoa_r+0x550>
    {
      mode -= 4;
 2007260:	e0bffb17 	ldw	r2,-20(fp)
 2007264:	10bfff04 	addi	r2,r2,-4
 2007268:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 200726c:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 2007270:	00800044 	movi	r2,1
 2007274:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 2007278:	00bfffc4 	movi	r2,-1
 200727c:	e0bfd515 	stw	r2,-172(fp)
 2007280:	e0bfd517 	ldw	r2,-172(fp)
 2007284:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 2007288:	e0bffb17 	ldw	r2,-20(fp)
 200728c:	108001a8 	cmpgeui	r2,r2,6
 2007290:	10002c1e 	bne	r2,zero,2007344 <_dtoa_r+0x624>
 2007294:	e0bffb17 	ldw	r2,-20(fp)
 2007298:	100690ba 	slli	r3,r2,2
 200729c:	00808034 	movhi	r2,512
 20072a0:	109cac04 	addi	r2,r2,29360
 20072a4:	1885883a 	add	r2,r3,r2
 20072a8:	10800017 	ldw	r2,0(r2)
 20072ac:	1000683a 	jmp	r2
 20072b0:	020072c8 	cmpgei	r8,zero,459
 20072b4:	020072c8 	cmpgei	r8,zero,459
 20072b8:	020072d8 	cmpnei	r8,zero,459
 20072bc:	02007308 	cmpgei	r8,zero,460
 20072c0:	020072dc 	xori	r8,zero,459
 20072c4:	0200730c 	andi	r8,zero,460
    {
    case 0:
    case 1:
      i = 18;
 20072c8:	00800484 	movi	r2,18
 20072cc:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 20072d0:	e0000215 	stw	zero,8(fp)
      break;
 20072d4:	00001b06 	br	2007344 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 20072d8:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 20072dc:	e0800217 	ldw	r2,8(fp)
 20072e0:	00800216 	blt	zero,r2,20072ec <_dtoa_r+0x5cc>
	ndigits = 1;
 20072e4:	00800044 	movi	r2,1
 20072e8:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 20072ec:	e0800217 	ldw	r2,8(fp)
 20072f0:	e0bfd215 	stw	r2,-184(fp)
 20072f4:	e0bfd217 	ldw	r2,-184(fp)
 20072f8:	e0bfd515 	stw	r2,-172(fp)
 20072fc:	e0bfd517 	ldw	r2,-172(fp)
 2007300:	e0bfd415 	stw	r2,-176(fp)
      break;
 2007304:	00000f06 	br	2007344 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 2007308:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 200730c:	e0c00217 	ldw	r3,8(fp)
 2007310:	e0bfd717 	ldw	r2,-164(fp)
 2007314:	1885883a 	add	r2,r3,r2
 2007318:	10800044 	addi	r2,r2,1
 200731c:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 2007320:	e0bfd217 	ldw	r2,-184(fp)
 2007324:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 2007328:	e0bfd217 	ldw	r2,-184(fp)
 200732c:	10bfffc4 	addi	r2,r2,-1
 2007330:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 2007334:	e0bfd217 	ldw	r2,-184(fp)
 2007338:	00800216 	blt	zero,r2,2007344 <_dtoa_r+0x624>
	i = 1;
 200733c:	00800044 	movi	r2,1
 2007340:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 2007344:	00800104 	movi	r2,4
 2007348:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200734c:	e0bff817 	ldw	r2,-32(fp)
 2007350:	10001115 	stw	zero,68(r2)
 2007354:	00000806 	br	2007378 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 2007358:	e0bff817 	ldw	r2,-32(fp)
 200735c:	10801117 	ldw	r2,68(r2)
 2007360:	10c00044 	addi	r3,r2,1
 2007364:	e0bff817 	ldw	r2,-32(fp)
 2007368:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 200736c:	e0bfd617 	ldw	r2,-168(fp)
 2007370:	1085883a 	add	r2,r2,r2
 2007374:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 2007378:	e0bfd617 	ldw	r2,-168(fp)
 200737c:	10800504 	addi	r2,r2,20
 2007380:	e0ffd217 	ldw	r3,-184(fp)
 2007384:	18bff42e 	bgeu	r3,r2,2007358 <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 2007388:	e0bff817 	ldw	r2,-32(fp)
 200738c:	10801117 	ldw	r2,68(r2)
 2007390:	100b883a 	mov	r5,r2
 2007394:	e13ff817 	ldw	r4,-32(fp)
 2007398:	200bb080 	call	200bb08 <_Balloc>
 200739c:	1007883a 	mov	r3,r2
 20073a0:	e0bff817 	ldw	r2,-32(fp)
 20073a4:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 20073a8:	e0bff817 	ldw	r2,-32(fp)
 20073ac:	10801017 	ldw	r2,64(r2)
 20073b0:	e0bfe915 	stw	r2,-92(fp)
 20073b4:	e0bfe917 	ldw	r2,-92(fp)
 20073b8:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 20073bc:	e0bfd417 	ldw	r2,-176(fp)
 20073c0:	10021616 	blt	r2,zero,2007c1c <_dtoa_r+0xefc>
 20073c4:	e0bfd417 	ldw	r2,-176(fp)
 20073c8:	108003c8 	cmpgei	r2,r2,15
 20073cc:	1002131e 	bne	r2,zero,2007c1c <_dtoa_r+0xefc>
 20073d0:	e0bfdf17 	ldw	r2,-132(fp)
 20073d4:	10021126 	beq	r2,zero,2007c1c <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 20073d8:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 20073dc:	e0bff217 	ldw	r2,-56(fp)
 20073e0:	e0fff317 	ldw	r3,-52(fp)
 20073e4:	e0bff415 	stw	r2,-48(fp)
 20073e8:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 20073ec:	e0bfd717 	ldw	r2,-164(fp)
 20073f0:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 20073f4:	e0bfd417 	ldw	r2,-176(fp)
 20073f8:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 20073fc:	00800084 	movi	r2,2
 2007400:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 2007404:	e0bfd717 	ldw	r2,-164(fp)
 2007408:	0080540e 	bge	zero,r2,200755c <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 200740c:	e0bfd717 	ldw	r2,-164(fp)
 2007410:	10c003cc 	andi	r3,r2,15
 2007414:	008080b4 	movhi	r2,514
 2007418:	10b27d04 	addi	r2,r2,-13836
 200741c:	180690fa 	slli	r3,r3,3
 2007420:	10c5883a 	add	r2,r2,r3
 2007424:	10c00017 	ldw	r3,0(r2)
 2007428:	e0ffe515 	stw	r3,-108(fp)
 200742c:	10800117 	ldw	r2,4(r2)
 2007430:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 2007434:	e0bfd717 	ldw	r2,-164(fp)
 2007438:	1005d13a 	srai	r2,r2,4
 200743c:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 2007440:	e0bfd617 	ldw	r2,-168(fp)
 2007444:	1080040c 	andi	r2,r2,16
 2007448:	10003426 	beq	r2,zero,200751c <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 200744c:	e0bfd617 	ldw	r2,-168(fp)
 2007450:	108003cc 	andi	r2,r2,15
 2007454:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 2007458:	e0bff217 	ldw	r2,-56(fp)
 200745c:	e0fff317 	ldw	r3,-52(fp)
 2007460:	018080b4 	movhi	r6,514
 2007464:	31b2af04 	addi	r6,r6,-13636
 2007468:	31000817 	ldw	r4,32(r6)
 200746c:	31400917 	ldw	r5,36(r6)
 2007470:	200d883a 	mov	r6,r4
 2007474:	280f883a 	mov	r7,r5
 2007478:	1009883a 	mov	r4,r2
 200747c:	180b883a 	mov	r5,r3
 2007480:	20020780 	call	2002078 <__divdf3>
 2007484:	1009883a 	mov	r4,r2
 2007488:	180b883a 	mov	r5,r3
 200748c:	2005883a 	mov	r2,r4
 2007490:	2807883a 	mov	r3,r5
 2007494:	e0bff215 	stw	r2,-56(fp)
 2007498:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 200749c:	e0bfd317 	ldw	r2,-180(fp)
 20074a0:	10800044 	addi	r2,r2,1
 20074a4:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 20074a8:	00001c06 	br	200751c <_dtoa_r+0x7fc>
	    if (j & 1)
 20074ac:	e0bfd617 	ldw	r2,-168(fp)
 20074b0:	1080004c 	andi	r2,r2,1
 20074b4:	10001326 	beq	r2,zero,2007504 <_dtoa_r+0x7e4>
	      {
		ieps++;
 20074b8:	e0bfd317 	ldw	r2,-180(fp)
 20074bc:	10800044 	addi	r2,r2,1
 20074c0:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 20074c4:	008080b4 	movhi	r2,514
 20074c8:	10b2af04 	addi	r2,r2,-13636
 20074cc:	e0ffd217 	ldw	r3,-184(fp)
 20074d0:	180690fa 	slli	r3,r3,3
 20074d4:	10c9883a 	add	r4,r2,r3
 20074d8:	20800017 	ldw	r2,0(r4)
 20074dc:	20c00117 	ldw	r3,4(r4)
 20074e0:	100d883a 	mov	r6,r2
 20074e4:	180f883a 	mov	r7,r3
 20074e8:	e13fe517 	ldw	r4,-108(fp)
 20074ec:	e17fe617 	ldw	r5,-104(fp)
 20074f0:	2002bb80 	call	2002bb8 <__muldf3>
 20074f4:	1009883a 	mov	r4,r2
 20074f8:	180b883a 	mov	r5,r3
 20074fc:	e13fe515 	stw	r4,-108(fp)
 2007500:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 2007504:	e0bfd617 	ldw	r2,-168(fp)
 2007508:	1005d07a 	srai	r2,r2,1
 200750c:	e0bfd615 	stw	r2,-168(fp)
 2007510:	e0bfd217 	ldw	r2,-184(fp)
 2007514:	10800044 	addi	r2,r2,1
 2007518:	e0bfd215 	stw	r2,-184(fp)
 200751c:	e0bfd617 	ldw	r2,-168(fp)
 2007520:	103fe21e 	bne	r2,zero,20074ac <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 2007524:	e0bff217 	ldw	r2,-56(fp)
 2007528:	e0fff317 	ldw	r3,-52(fp)
 200752c:	e1bfe517 	ldw	r6,-108(fp)
 2007530:	e1ffe617 	ldw	r7,-104(fp)
 2007534:	1009883a 	mov	r4,r2
 2007538:	180b883a 	mov	r5,r3
 200753c:	20020780 	call	2002078 <__divdf3>
 2007540:	1009883a 	mov	r4,r2
 2007544:	180b883a 	mov	r5,r3
 2007548:	2005883a 	mov	r2,r4
 200754c:	2807883a 	mov	r3,r5
 2007550:	e0bff215 	stw	r2,-56(fp)
 2007554:	e0fff315 	stw	r3,-52(fp)
 2007558:	00004006 	br	200765c <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 200755c:	e0bfd717 	ldw	r2,-164(fp)
 2007560:	0085c83a 	sub	r2,zero,r2
 2007564:	e0bfec15 	stw	r2,-80(fp)
 2007568:	e0bfec17 	ldw	r2,-80(fp)
 200756c:	10003b26 	beq	r2,zero,200765c <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 2007570:	e0bff217 	ldw	r2,-56(fp)
 2007574:	e0fff317 	ldw	r3,-52(fp)
 2007578:	e13fec17 	ldw	r4,-80(fp)
 200757c:	214003cc 	andi	r5,r4,15
 2007580:	010080b4 	movhi	r4,514
 2007584:	21327d04 	addi	r4,r4,-13836
 2007588:	280a90fa 	slli	r5,r5,3
 200758c:	214d883a 	add	r6,r4,r5
 2007590:	31000017 	ldw	r4,0(r6)
 2007594:	31400117 	ldw	r5,4(r6)
 2007598:	200d883a 	mov	r6,r4
 200759c:	280f883a 	mov	r7,r5
 20075a0:	1009883a 	mov	r4,r2
 20075a4:	180b883a 	mov	r5,r3
 20075a8:	2002bb80 	call	2002bb8 <__muldf3>
 20075ac:	1009883a 	mov	r4,r2
 20075b0:	180b883a 	mov	r5,r3
 20075b4:	2005883a 	mov	r2,r4
 20075b8:	2807883a 	mov	r3,r5
 20075bc:	e0bff215 	stw	r2,-56(fp)
 20075c0:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 20075c4:	e0bfec17 	ldw	r2,-80(fp)
 20075c8:	1005d13a 	srai	r2,r2,4
 20075cc:	e0bfd615 	stw	r2,-168(fp)
 20075d0:	00002006 	br	2007654 <_dtoa_r+0x934>
	    if (j & 1)
 20075d4:	e0bfd617 	ldw	r2,-168(fp)
 20075d8:	1080004c 	andi	r2,r2,1
 20075dc:	10001726 	beq	r2,zero,200763c <_dtoa_r+0x91c>
	      {
		ieps++;
 20075e0:	e0bfd317 	ldw	r2,-180(fp)
 20075e4:	10800044 	addi	r2,r2,1
 20075e8:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 20075ec:	e0bff217 	ldw	r2,-56(fp)
 20075f0:	e0fff317 	ldw	r3,-52(fp)
 20075f4:	010080b4 	movhi	r4,514
 20075f8:	2132af04 	addi	r4,r4,-13636
 20075fc:	e17fd217 	ldw	r5,-184(fp)
 2007600:	280a90fa 	slli	r5,r5,3
 2007604:	214d883a 	add	r6,r4,r5
 2007608:	31000017 	ldw	r4,0(r6)
 200760c:	31400117 	ldw	r5,4(r6)
 2007610:	200d883a 	mov	r6,r4
 2007614:	280f883a 	mov	r7,r5
 2007618:	1009883a 	mov	r4,r2
 200761c:	180b883a 	mov	r5,r3
 2007620:	2002bb80 	call	2002bb8 <__muldf3>
 2007624:	1009883a 	mov	r4,r2
 2007628:	180b883a 	mov	r5,r3
 200762c:	2005883a 	mov	r2,r4
 2007630:	2807883a 	mov	r3,r5
 2007634:	e0bff215 	stw	r2,-56(fp)
 2007638:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200763c:	e0bfd617 	ldw	r2,-168(fp)
 2007640:	1005d07a 	srai	r2,r2,1
 2007644:	e0bfd615 	stw	r2,-168(fp)
 2007648:	e0bfd217 	ldw	r2,-184(fp)
 200764c:	10800044 	addi	r2,r2,1
 2007650:	e0bfd215 	stw	r2,-184(fp)
 2007654:	e0bfd617 	ldw	r2,-168(fp)
 2007658:	103fde1e 	bne	r2,zero,20075d4 <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 200765c:	e0bfd817 	ldw	r2,-160(fp)
 2007660:	10002126 	beq	r2,zero,20076e8 <_dtoa_r+0x9c8>
 2007664:	e0bff217 	ldw	r2,-56(fp)
 2007668:	e0fff317 	ldw	r3,-52(fp)
 200766c:	000d883a 	mov	r6,zero
 2007670:	01cffc34 	movhi	r7,16368
 2007674:	1009883a 	mov	r4,r2
 2007678:	180b883a 	mov	r5,r3
 200767c:	2002ac40 	call	2002ac4 <__ledf2>
 2007680:	1000190e 	bge	r2,zero,20076e8 <_dtoa_r+0x9c8>
 2007684:	e0bfd417 	ldw	r2,-176(fp)
 2007688:	0080170e 	bge	zero,r2,20076e8 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 200768c:	e0bfd517 	ldw	r2,-172(fp)
 2007690:	0081550e 	bge	zero,r2,2007be8 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 2007694:	e0bfd517 	ldw	r2,-172(fp)
 2007698:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 200769c:	e0bfd717 	ldw	r2,-164(fp)
 20076a0:	10bfffc4 	addi	r2,r2,-1
 20076a4:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 20076a8:	e0bff217 	ldw	r2,-56(fp)
 20076ac:	e0fff317 	ldw	r3,-52(fp)
 20076b0:	000d883a 	mov	r6,zero
 20076b4:	01d00934 	movhi	r7,16420
 20076b8:	1009883a 	mov	r4,r2
 20076bc:	180b883a 	mov	r5,r3
 20076c0:	2002bb80 	call	2002bb8 <__muldf3>
 20076c4:	1009883a 	mov	r4,r2
 20076c8:	180b883a 	mov	r5,r3
 20076cc:	2005883a 	mov	r2,r4
 20076d0:	2807883a 	mov	r3,r5
 20076d4:	e0bff215 	stw	r2,-56(fp)
 20076d8:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 20076dc:	e0bfd317 	ldw	r2,-180(fp)
 20076e0:	10800044 	addi	r2,r2,1
 20076e4:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 20076e8:	e13fd317 	ldw	r4,-180(fp)
 20076ec:	2003c4c0 	call	2003c4c <__floatsidf>
 20076f0:	1011883a 	mov	r8,r2
 20076f4:	1813883a 	mov	r9,r3
 20076f8:	e0bff217 	ldw	r2,-56(fp)
 20076fc:	e0fff317 	ldw	r3,-52(fp)
 2007700:	100d883a 	mov	r6,r2
 2007704:	180f883a 	mov	r7,r3
 2007708:	4009883a 	mov	r4,r8
 200770c:	480b883a 	mov	r5,r9
 2007710:	2002bb80 	call	2002bb8 <__muldf3>
 2007714:	1009883a 	mov	r4,r2
 2007718:	180b883a 	mov	r5,r3
 200771c:	2005883a 	mov	r2,r4
 2007720:	2807883a 	mov	r3,r5
 2007724:	000d883a 	mov	r6,zero
 2007728:	01d00734 	movhi	r7,16412
 200772c:	1009883a 	mov	r4,r2
 2007730:	180b883a 	mov	r5,r3
 2007734:	20017cc0 	call	20017cc <__adddf3>
 2007738:	1009883a 	mov	r4,r2
 200773c:	180b883a 	mov	r5,r3
 2007740:	2005883a 	mov	r2,r4
 2007744:	2807883a 	mov	r3,r5
 2007748:	e0bff615 	stw	r2,-40(fp)
 200774c:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 2007750:	e0fff717 	ldw	r3,-36(fp)
 2007754:	00bf3034 	movhi	r2,64704
 2007758:	1885883a 	add	r2,r3,r2
 200775c:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 2007760:	e0bfd417 	ldw	r2,-176(fp)
 2007764:	1000271e 	bne	r2,zero,2007804 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 2007768:	e03fe315 	stw	zero,-116(fp)
 200776c:	e0bfe317 	ldw	r2,-116(fp)
 2007770:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 2007774:	e0bff217 	ldw	r2,-56(fp)
 2007778:	e0fff317 	ldw	r3,-52(fp)
 200777c:	000d883a 	mov	r6,zero
 2007780:	01d00534 	movhi	r7,16404
 2007784:	1009883a 	mov	r4,r2
 2007788:	180b883a 	mov	r5,r3
 200778c:	20032d00 	call	20032d0 <__subdf3>
 2007790:	1009883a 	mov	r4,r2
 2007794:	180b883a 	mov	r5,r3
 2007798:	2005883a 	mov	r2,r4
 200779c:	2807883a 	mov	r3,r5
 20077a0:	e0bff215 	stw	r2,-56(fp)
 20077a4:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 20077a8:	e0bff217 	ldw	r2,-56(fp)
 20077ac:	e0fff317 	ldw	r3,-52(fp)
 20077b0:	e13ff617 	ldw	r4,-40(fp)
 20077b4:	e17ff717 	ldw	r5,-36(fp)
 20077b8:	200d883a 	mov	r6,r4
 20077bc:	280f883a 	mov	r7,r5
 20077c0:	1009883a 	mov	r4,r2
 20077c4:	180b883a 	mov	r5,r3
 20077c8:	20029e80 	call	20029e8 <__gedf2>
 20077cc:	0082eb16 	blt	zero,r2,200837c <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 20077d0:	e23ff217 	ldw	r8,-56(fp)
 20077d4:	e27ff317 	ldw	r9,-52(fp)
 20077d8:	e0bff617 	ldw	r2,-40(fp)
 20077dc:	e0fff717 	ldw	r3,-36(fp)
 20077e0:	1021883a 	mov	r16,r2
 20077e4:	1c60003c 	xorhi	r17,r3,32768
 20077e8:	800d883a 	mov	r6,r16
 20077ec:	880f883a 	mov	r7,r17
 20077f0:	4009883a 	mov	r4,r8
 20077f4:	480b883a 	mov	r5,r9
 20077f8:	2002ac40 	call	2002ac4 <__ledf2>
 20077fc:	1002da16 	blt	r2,zero,2008368 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 2007800:	0000fc06 	br	2007bf4 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 2007804:	e0bfd917 	ldw	r2,-156(fp)
 2007808:	10007a26 	beq	r2,zero,20079f4 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 200780c:	e0bfd417 	ldw	r2,-176(fp)
 2007810:	10ffffc4 	addi	r3,r2,-1
 2007814:	008080b4 	movhi	r2,514
 2007818:	10b27d04 	addi	r2,r2,-13836
 200781c:	180690fa 	slli	r3,r3,3
 2007820:	10c9883a 	add	r4,r2,r3
 2007824:	20800017 	ldw	r2,0(r4)
 2007828:	20c00117 	ldw	r3,4(r4)
 200782c:	100d883a 	mov	r6,r2
 2007830:	180f883a 	mov	r7,r3
 2007834:	0009883a 	mov	r4,zero
 2007838:	014ff834 	movhi	r5,16352
 200783c:	20020780 	call	2002078 <__divdf3>
 2007840:	1009883a 	mov	r4,r2
 2007844:	180b883a 	mov	r5,r3
 2007848:	2011883a 	mov	r8,r4
 200784c:	2813883a 	mov	r9,r5
 2007850:	e0bff617 	ldw	r2,-40(fp)
 2007854:	e0fff717 	ldw	r3,-36(fp)
 2007858:	100d883a 	mov	r6,r2
 200785c:	180f883a 	mov	r7,r3
 2007860:	4009883a 	mov	r4,r8
 2007864:	480b883a 	mov	r5,r9
 2007868:	20032d00 	call	20032d0 <__subdf3>
 200786c:	1009883a 	mov	r4,r2
 2007870:	180b883a 	mov	r5,r3
 2007874:	2005883a 	mov	r2,r4
 2007878:	2807883a 	mov	r3,r5
 200787c:	e0bff615 	stw	r2,-40(fp)
 2007880:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 2007884:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 2007888:	e0bff217 	ldw	r2,-56(fp)
 200788c:	e0fff317 	ldw	r3,-52(fp)
 2007890:	1009883a 	mov	r4,r2
 2007894:	180b883a 	mov	r5,r3
 2007898:	2003bcc0 	call	2003bcc <__fixdfsi>
 200789c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 20078a0:	e43ff217 	ldw	r16,-56(fp)
 20078a4:	e47ff317 	ldw	r17,-52(fp)
 20078a8:	e13fed17 	ldw	r4,-76(fp)
 20078ac:	2003c4c0 	call	2003c4c <__floatsidf>
 20078b0:	1009883a 	mov	r4,r2
 20078b4:	180b883a 	mov	r5,r3
 20078b8:	200d883a 	mov	r6,r4
 20078bc:	280f883a 	mov	r7,r5
 20078c0:	8009883a 	mov	r4,r16
 20078c4:	880b883a 	mov	r5,r17
 20078c8:	20032d00 	call	20032d0 <__subdf3>
 20078cc:	1009883a 	mov	r4,r2
 20078d0:	180b883a 	mov	r5,r3
 20078d4:	2005883a 	mov	r2,r4
 20078d8:	2807883a 	mov	r3,r5
 20078dc:	e0bff215 	stw	r2,-56(fp)
 20078e0:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 20078e4:	e0bfe717 	ldw	r2,-100(fp)
 20078e8:	10c00044 	addi	r3,r2,1
 20078ec:	e0ffe715 	stw	r3,-100(fp)
 20078f0:	e0ffed17 	ldw	r3,-76(fp)
 20078f4:	18c00c04 	addi	r3,r3,48
 20078f8:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 20078fc:	e0bff217 	ldw	r2,-56(fp)
 2007900:	e0fff317 	ldw	r3,-52(fp)
 2007904:	e13ff617 	ldw	r4,-40(fp)
 2007908:	e17ff717 	ldw	r5,-36(fp)
 200790c:	200d883a 	mov	r6,r4
 2007910:	280f883a 	mov	r7,r5
 2007914:	1009883a 	mov	r4,r2
 2007918:	180b883a 	mov	r5,r3
 200791c:	2002ac40 	call	2002ac4 <__ledf2>
 2007920:	1003c416 	blt	r2,zero,2008834 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 2007924:	e0bff217 	ldw	r2,-56(fp)
 2007928:	e0fff317 	ldw	r3,-52(fp)
 200792c:	100d883a 	mov	r6,r2
 2007930:	180f883a 	mov	r7,r3
 2007934:	0009883a 	mov	r4,zero
 2007938:	014ffc34 	movhi	r5,16368
 200793c:	20032d00 	call	20032d0 <__subdf3>
 2007940:	1009883a 	mov	r4,r2
 2007944:	180b883a 	mov	r5,r3
 2007948:	2011883a 	mov	r8,r4
 200794c:	2813883a 	mov	r9,r5
 2007950:	e0bff617 	ldw	r2,-40(fp)
 2007954:	e0fff717 	ldw	r3,-36(fp)
 2007958:	100d883a 	mov	r6,r2
 200795c:	180f883a 	mov	r7,r3
 2007960:	4009883a 	mov	r4,r8
 2007964:	480b883a 	mov	r5,r9
 2007968:	2002ac40 	call	2002ac4 <__ledf2>
 200796c:	10012916 	blt	r2,zero,2007e14 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 2007970:	e0bfd217 	ldw	r2,-184(fp)
 2007974:	10800044 	addi	r2,r2,1
 2007978:	e0bfd215 	stw	r2,-184(fp)
 200797c:	e0ffd217 	ldw	r3,-184(fp)
 2007980:	e0bfd417 	ldw	r2,-176(fp)
 2007984:	18809a0e 	bge	r3,r2,2007bf0 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 2007988:	e0bff617 	ldw	r2,-40(fp)
 200798c:	e0fff717 	ldw	r3,-36(fp)
 2007990:	000d883a 	mov	r6,zero
 2007994:	01d00934 	movhi	r7,16420
 2007998:	1009883a 	mov	r4,r2
 200799c:	180b883a 	mov	r5,r3
 20079a0:	2002bb80 	call	2002bb8 <__muldf3>
 20079a4:	1009883a 	mov	r4,r2
 20079a8:	180b883a 	mov	r5,r3
 20079ac:	2005883a 	mov	r2,r4
 20079b0:	2807883a 	mov	r3,r5
 20079b4:	e0bff615 	stw	r2,-40(fp)
 20079b8:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 20079bc:	e0bff217 	ldw	r2,-56(fp)
 20079c0:	e0fff317 	ldw	r3,-52(fp)
 20079c4:	000d883a 	mov	r6,zero
 20079c8:	01d00934 	movhi	r7,16420
 20079cc:	1009883a 	mov	r4,r2
 20079d0:	180b883a 	mov	r5,r3
 20079d4:	2002bb80 	call	2002bb8 <__muldf3>
 20079d8:	1009883a 	mov	r4,r2
 20079dc:	180b883a 	mov	r5,r3
 20079e0:	2005883a 	mov	r2,r4
 20079e4:	2807883a 	mov	r3,r5
 20079e8:	e0bff215 	stw	r2,-56(fp)
 20079ec:	e0fff315 	stw	r3,-52(fp)
	    }
 20079f0:	003fa506 	br	2007888 <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 20079f4:	e0bff617 	ldw	r2,-40(fp)
 20079f8:	e0fff717 	ldw	r3,-36(fp)
 20079fc:	e13fd417 	ldw	r4,-176(fp)
 2007a00:	217fffc4 	addi	r5,r4,-1
 2007a04:	010080b4 	movhi	r4,514
 2007a08:	21327d04 	addi	r4,r4,-13836
 2007a0c:	280a90fa 	slli	r5,r5,3
 2007a10:	214d883a 	add	r6,r4,r5
 2007a14:	31000017 	ldw	r4,0(r6)
 2007a18:	31400117 	ldw	r5,4(r6)
 2007a1c:	200d883a 	mov	r6,r4
 2007a20:	280f883a 	mov	r7,r5
 2007a24:	1009883a 	mov	r4,r2
 2007a28:	180b883a 	mov	r5,r3
 2007a2c:	2002bb80 	call	2002bb8 <__muldf3>
 2007a30:	1009883a 	mov	r4,r2
 2007a34:	180b883a 	mov	r5,r3
 2007a38:	2005883a 	mov	r2,r4
 2007a3c:	2807883a 	mov	r3,r5
 2007a40:	e0bff615 	stw	r2,-40(fp)
 2007a44:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 2007a48:	00800044 	movi	r2,1
 2007a4c:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 2007a50:	e0bff217 	ldw	r2,-56(fp)
 2007a54:	e0fff317 	ldw	r3,-52(fp)
 2007a58:	1009883a 	mov	r4,r2
 2007a5c:	180b883a 	mov	r5,r3
 2007a60:	2003bcc0 	call	2003bcc <__fixdfsi>
 2007a64:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 2007a68:	e43ff217 	ldw	r16,-56(fp)
 2007a6c:	e47ff317 	ldw	r17,-52(fp)
 2007a70:	e13fed17 	ldw	r4,-76(fp)
 2007a74:	2003c4c0 	call	2003c4c <__floatsidf>
 2007a78:	1009883a 	mov	r4,r2
 2007a7c:	180b883a 	mov	r5,r3
 2007a80:	200d883a 	mov	r6,r4
 2007a84:	280f883a 	mov	r7,r5
 2007a88:	8009883a 	mov	r4,r16
 2007a8c:	880b883a 	mov	r5,r17
 2007a90:	20032d00 	call	20032d0 <__subdf3>
 2007a94:	1009883a 	mov	r4,r2
 2007a98:	180b883a 	mov	r5,r3
 2007a9c:	2005883a 	mov	r2,r4
 2007aa0:	2807883a 	mov	r3,r5
 2007aa4:	e0bff215 	stw	r2,-56(fp)
 2007aa8:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 2007aac:	e0bfe717 	ldw	r2,-100(fp)
 2007ab0:	10c00044 	addi	r3,r2,1
 2007ab4:	e0ffe715 	stw	r3,-100(fp)
 2007ab8:	e0ffed17 	ldw	r3,-76(fp)
 2007abc:	18c00c04 	addi	r3,r3,48
 2007ac0:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 2007ac4:	e0ffd217 	ldw	r3,-184(fp)
 2007ac8:	e0bfd417 	ldw	r2,-176(fp)
 2007acc:	1880351e 	bne	r3,r2,2007ba4 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 2007ad0:	e43ff217 	ldw	r16,-56(fp)
 2007ad4:	e47ff317 	ldw	r17,-52(fp)
 2007ad8:	e0bff617 	ldw	r2,-40(fp)
 2007adc:	e0fff717 	ldw	r3,-36(fp)
 2007ae0:	000d883a 	mov	r6,zero
 2007ae4:	01cff834 	movhi	r7,16352
 2007ae8:	1009883a 	mov	r4,r2
 2007aec:	180b883a 	mov	r5,r3
 2007af0:	20017cc0 	call	20017cc <__adddf3>
 2007af4:	1009883a 	mov	r4,r2
 2007af8:	180b883a 	mov	r5,r3
 2007afc:	2005883a 	mov	r2,r4
 2007b00:	2807883a 	mov	r3,r5
 2007b04:	100d883a 	mov	r6,r2
 2007b08:	180f883a 	mov	r7,r3
 2007b0c:	8009883a 	mov	r4,r16
 2007b10:	880b883a 	mov	r5,r17
 2007b14:	20029e80 	call	20029e8 <__gedf2>
 2007b18:	0080c016 	blt	zero,r2,2007e1c <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 2007b1c:	e43ff217 	ldw	r16,-56(fp)
 2007b20:	e47ff317 	ldw	r17,-52(fp)
 2007b24:	e0bff617 	ldw	r2,-40(fp)
 2007b28:	e0fff717 	ldw	r3,-36(fp)
 2007b2c:	100d883a 	mov	r6,r2
 2007b30:	180f883a 	mov	r7,r3
 2007b34:	0009883a 	mov	r4,zero
 2007b38:	014ff834 	movhi	r5,16352
 2007b3c:	20032d00 	call	20032d0 <__subdf3>
 2007b40:	1009883a 	mov	r4,r2
 2007b44:	180b883a 	mov	r5,r3
 2007b48:	2005883a 	mov	r2,r4
 2007b4c:	2807883a 	mov	r3,r5
 2007b50:	100d883a 	mov	r6,r2
 2007b54:	180f883a 	mov	r7,r3
 2007b58:	8009883a 	mov	r4,r16
 2007b5c:	880b883a 	mov	r5,r17
 2007b60:	2002ac40 	call	2002ac4 <__ledf2>
 2007b64:	10000116 	blt	r2,zero,2007b6c <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 2007b68:	00002206 	br	2007bf4 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 2007b6c:	e0bfe717 	ldw	r2,-100(fp)
 2007b70:	10bfffc4 	addi	r2,r2,-1
 2007b74:	e0bfe715 	stw	r2,-100(fp)
 2007b78:	e0bfe717 	ldw	r2,-100(fp)
 2007b7c:	10800003 	ldbu	r2,0(r2)
 2007b80:	10803fcc 	andi	r2,r2,255
 2007b84:	1080201c 	xori	r2,r2,128
 2007b88:	10bfe004 	addi	r2,r2,-128
 2007b8c:	10800c20 	cmpeqi	r2,r2,48
 2007b90:	103ff61e 	bne	r2,zero,2007b6c <_dtoa_r+0xe4c>
		      s++;
 2007b94:	e0bfe717 	ldw	r2,-100(fp)
 2007b98:	10800044 	addi	r2,r2,1
 2007b9c:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 2007ba0:	00032506 	br	2008838 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 2007ba4:	e0bfd217 	ldw	r2,-184(fp)
 2007ba8:	10800044 	addi	r2,r2,1
 2007bac:	e0bfd215 	stw	r2,-184(fp)
 2007bb0:	e0bff217 	ldw	r2,-56(fp)
 2007bb4:	e0fff317 	ldw	r3,-52(fp)
 2007bb8:	000d883a 	mov	r6,zero
 2007bbc:	01d00934 	movhi	r7,16420
 2007bc0:	1009883a 	mov	r4,r2
 2007bc4:	180b883a 	mov	r5,r3
 2007bc8:	2002bb80 	call	2002bb8 <__muldf3>
 2007bcc:	1009883a 	mov	r4,r2
 2007bd0:	180b883a 	mov	r5,r3
 2007bd4:	2005883a 	mov	r2,r4
 2007bd8:	2807883a 	mov	r3,r5
 2007bdc:	e0bff215 	stw	r2,-56(fp)
 2007be0:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 2007be4:	003f9a06 	br	2007a50 <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 2007be8:	0001883a 	nop
 2007bec:	00000106 	br	2007bf4 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 2007bf0:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 2007bf4:	e0bfe917 	ldw	r2,-92(fp)
 2007bf8:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 2007bfc:	e0bff417 	ldw	r2,-48(fp)
 2007c00:	e0fff517 	ldw	r3,-44(fp)
 2007c04:	e0bff215 	stw	r2,-56(fp)
 2007c08:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 2007c0c:	e0bfea17 	ldw	r2,-88(fp)
 2007c10:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 2007c14:	e0bfeb17 	ldw	r2,-84(fp)
 2007c18:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 2007c1c:	e0bff117 	ldw	r2,-60(fp)
 2007c20:	1000b816 	blt	r2,zero,2007f04 <_dtoa_r+0x11e4>
 2007c24:	e0bfd717 	ldw	r2,-164(fp)
 2007c28:	108003c8 	cmpgei	r2,r2,15
 2007c2c:	1000b51e 	bne	r2,zero,2007f04 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 2007c30:	008080b4 	movhi	r2,514
 2007c34:	10b27d04 	addi	r2,r2,-13836
 2007c38:	e0ffd717 	ldw	r3,-164(fp)
 2007c3c:	180690fa 	slli	r3,r3,3
 2007c40:	10c5883a 	add	r2,r2,r3
 2007c44:	10c00017 	ldw	r3,0(r2)
 2007c48:	e0ffe515 	stw	r3,-108(fp)
 2007c4c:	10800117 	ldw	r2,4(r2)
 2007c50:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 2007c54:	e0800217 	ldw	r2,8(fp)
 2007c58:	1000190e 	bge	r2,zero,2007cc0 <_dtoa_r+0xfa0>
 2007c5c:	e0bfd417 	ldw	r2,-176(fp)
 2007c60:	00801716 	blt	zero,r2,2007cc0 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 2007c64:	e03fe315 	stw	zero,-116(fp)
 2007c68:	e0bfe317 	ldw	r2,-116(fp)
 2007c6c:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 2007c70:	e0bfd417 	ldw	r2,-176(fp)
 2007c74:	1001bd16 	blt	r2,zero,200836c <_dtoa_r+0x164c>
 2007c78:	e43ff217 	ldw	r16,-56(fp)
 2007c7c:	e47ff317 	ldw	r17,-52(fp)
 2007c80:	000d883a 	mov	r6,zero
 2007c84:	01d00534 	movhi	r7,16404
 2007c88:	e13fe517 	ldw	r4,-108(fp)
 2007c8c:	e17fe617 	ldw	r5,-104(fp)
 2007c90:	2002bb80 	call	2002bb8 <__muldf3>
 2007c94:	1009883a 	mov	r4,r2
 2007c98:	180b883a 	mov	r5,r3
 2007c9c:	2005883a 	mov	r2,r4
 2007ca0:	2807883a 	mov	r3,r5
 2007ca4:	100d883a 	mov	r6,r2
 2007ca8:	180f883a 	mov	r7,r3
 2007cac:	8009883a 	mov	r4,r16
 2007cb0:	880b883a 	mov	r5,r17
 2007cb4:	2002ac40 	call	2002ac4 <__ledf2>
 2007cb8:	0081ac0e 	bge	zero,r2,200836c <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 2007cbc:	0001b006 	br	2008380 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 2007cc0:	00800044 	movi	r2,1
 2007cc4:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 2007cc8:	e0bff217 	ldw	r2,-56(fp)
 2007ccc:	e0fff317 	ldw	r3,-52(fp)
 2007cd0:	e1bfe517 	ldw	r6,-108(fp)
 2007cd4:	e1ffe617 	ldw	r7,-104(fp)
 2007cd8:	1009883a 	mov	r4,r2
 2007cdc:	180b883a 	mov	r5,r3
 2007ce0:	20020780 	call	2002078 <__divdf3>
 2007ce4:	1009883a 	mov	r4,r2
 2007ce8:	180b883a 	mov	r5,r3
 2007cec:	2005883a 	mov	r2,r4
 2007cf0:	2807883a 	mov	r3,r5
 2007cf4:	1009883a 	mov	r4,r2
 2007cf8:	180b883a 	mov	r5,r3
 2007cfc:	2003bcc0 	call	2003bcc <__fixdfsi>
 2007d00:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 2007d04:	e43ff217 	ldw	r16,-56(fp)
 2007d08:	e47ff317 	ldw	r17,-52(fp)
 2007d0c:	e13fed17 	ldw	r4,-76(fp)
 2007d10:	2003c4c0 	call	2003c4c <__floatsidf>
 2007d14:	1011883a 	mov	r8,r2
 2007d18:	1813883a 	mov	r9,r3
 2007d1c:	e1bfe517 	ldw	r6,-108(fp)
 2007d20:	e1ffe617 	ldw	r7,-104(fp)
 2007d24:	4009883a 	mov	r4,r8
 2007d28:	480b883a 	mov	r5,r9
 2007d2c:	2002bb80 	call	2002bb8 <__muldf3>
 2007d30:	1009883a 	mov	r4,r2
 2007d34:	180b883a 	mov	r5,r3
 2007d38:	2005883a 	mov	r2,r4
 2007d3c:	2807883a 	mov	r3,r5
 2007d40:	100d883a 	mov	r6,r2
 2007d44:	180f883a 	mov	r7,r3
 2007d48:	8009883a 	mov	r4,r16
 2007d4c:	880b883a 	mov	r5,r17
 2007d50:	20032d00 	call	20032d0 <__subdf3>
 2007d54:	1009883a 	mov	r4,r2
 2007d58:	180b883a 	mov	r5,r3
 2007d5c:	2005883a 	mov	r2,r4
 2007d60:	2807883a 	mov	r3,r5
 2007d64:	e0bff215 	stw	r2,-56(fp)
 2007d68:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 2007d6c:	e0bfe717 	ldw	r2,-100(fp)
 2007d70:	10c00044 	addi	r3,r2,1
 2007d74:	e0ffe715 	stw	r3,-100(fp)
 2007d78:	e0ffed17 	ldw	r3,-76(fp)
 2007d7c:	18c00c04 	addi	r3,r3,48
 2007d80:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2007d84:	e0ffd217 	ldw	r3,-184(fp)
 2007d88:	e0bfd417 	ldw	r2,-176(fp)
 2007d8c:	1880401e 	bne	r3,r2,2007e90 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 2007d90:	e0bff217 	ldw	r2,-56(fp)
 2007d94:	e0fff317 	ldw	r3,-52(fp)
 2007d98:	100d883a 	mov	r6,r2
 2007d9c:	180f883a 	mov	r7,r3
 2007da0:	1009883a 	mov	r4,r2
 2007da4:	180b883a 	mov	r5,r3
 2007da8:	20017cc0 	call	20017cc <__adddf3>
 2007dac:	1009883a 	mov	r4,r2
 2007db0:	180b883a 	mov	r5,r3
 2007db4:	2005883a 	mov	r2,r4
 2007db8:	2807883a 	mov	r3,r5
 2007dbc:	e0bff215 	stw	r2,-56(fp)
 2007dc0:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 2007dc4:	e0bff217 	ldw	r2,-56(fp)
 2007dc8:	e0fff317 	ldw	r3,-52(fp)
 2007dcc:	e1bfe517 	ldw	r6,-108(fp)
 2007dd0:	e1ffe617 	ldw	r7,-104(fp)
 2007dd4:	1009883a 	mov	r4,r2
 2007dd8:	180b883a 	mov	r5,r3
 2007ddc:	20029e80 	call	20029e8 <__gedf2>
 2007de0:	00801a16 	blt	zero,r2,2007e4c <_dtoa_r+0x112c>
 2007de4:	e0bff217 	ldw	r2,-56(fp)
 2007de8:	e0fff317 	ldw	r3,-52(fp)
 2007dec:	e1bfe517 	ldw	r6,-108(fp)
 2007df0:	e1ffe617 	ldw	r7,-104(fp)
 2007df4:	1009883a 	mov	r4,r2
 2007df8:	180b883a 	mov	r5,r3
 2007dfc:	20029600 	call	2002960 <__eqdf2>
 2007e00:	10003c1e 	bne	r2,zero,2007ef4 <_dtoa_r+0x11d4>
 2007e04:	e0bfed17 	ldw	r2,-76(fp)
 2007e08:	1080004c 	andi	r2,r2,1
 2007e0c:	10003926 	beq	r2,zero,2007ef4 <_dtoa_r+0x11d4>
 2007e10:	00000e06 	br	2007e4c <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 2007e14:	0001883a 	nop
 2007e18:	00000c06 	br	2007e4c <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 2007e1c:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2007e20:	00000a06 	br	2007e4c <_dtoa_r+0x112c>
		    if (s == s0)
 2007e24:	e0ffe717 	ldw	r3,-100(fp)
 2007e28:	e0bfe917 	ldw	r2,-92(fp)
 2007e2c:	1880071e 	bne	r3,r2,2007e4c <_dtoa_r+0x112c>
		      {
			k++;
 2007e30:	e0bfd717 	ldw	r2,-164(fp)
 2007e34:	10800044 	addi	r2,r2,1
 2007e38:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 2007e3c:	e0bfe717 	ldw	r2,-100(fp)
 2007e40:	00c00c04 	movi	r3,48
 2007e44:	10c00005 	stb	r3,0(r2)
			break;
 2007e48:	00000a06 	br	2007e74 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2007e4c:	e0bfe717 	ldw	r2,-100(fp)
 2007e50:	10bfffc4 	addi	r2,r2,-1
 2007e54:	e0bfe715 	stw	r2,-100(fp)
 2007e58:	e0bfe717 	ldw	r2,-100(fp)
 2007e5c:	10800003 	ldbu	r2,0(r2)
 2007e60:	10803fcc 	andi	r2,r2,255
 2007e64:	1080201c 	xori	r2,r2,128
 2007e68:	10bfe004 	addi	r2,r2,-128
 2007e6c:	10800e60 	cmpeqi	r2,r2,57
 2007e70:	103fec1e 	bne	r2,zero,2007e24 <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 2007e74:	e0bfe717 	ldw	r2,-100(fp)
 2007e78:	10c00044 	addi	r3,r2,1
 2007e7c:	e0ffe715 	stw	r3,-100(fp)
 2007e80:	10c00003 	ldbu	r3,0(r2)
 2007e84:	18c00044 	addi	r3,r3,1
 2007e88:	10c00005 	stb	r3,0(r2)
		}
	      break;
 2007e8c:	00001906 	br	2007ef4 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 2007e90:	e0bff217 	ldw	r2,-56(fp)
 2007e94:	e0fff317 	ldw	r3,-52(fp)
 2007e98:	000d883a 	mov	r6,zero
 2007e9c:	01d00934 	movhi	r7,16420
 2007ea0:	1009883a 	mov	r4,r2
 2007ea4:	180b883a 	mov	r5,r3
 2007ea8:	2002bb80 	call	2002bb8 <__muldf3>
 2007eac:	1009883a 	mov	r4,r2
 2007eb0:	180b883a 	mov	r5,r3
 2007eb4:	2005883a 	mov	r2,r4
 2007eb8:	2807883a 	mov	r3,r5
 2007ebc:	e0bff215 	stw	r2,-56(fp)
 2007ec0:	e0fff315 	stw	r3,-52(fp)
 2007ec4:	e0bff217 	ldw	r2,-56(fp)
 2007ec8:	e0fff317 	ldw	r3,-52(fp)
 2007ecc:	000d883a 	mov	r6,zero
 2007ed0:	000f883a 	mov	r7,zero
 2007ed4:	1009883a 	mov	r4,r2
 2007ed8:	180b883a 	mov	r5,r3
 2007edc:	20029600 	call	2002960 <__eqdf2>
 2007ee0:	10000626 	beq	r2,zero,2007efc <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 2007ee4:	e0bfd217 	ldw	r2,-184(fp)
 2007ee8:	10800044 	addi	r2,r2,1
 2007eec:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 2007ef0:	003f7506 	br	2007cc8 <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 2007ef4:	0001883a 	nop
 2007ef8:	00024f06 	br	2008838 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 2007efc:	0001883a 	nop
	}
      goto ret1;
 2007f00:	00024d06 	br	2008838 <_dtoa_r+0x1b18>
    }

  m2 = b2;
 2007f04:	e0bfcf17 	ldw	r2,-196(fp)
 2007f08:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 2007f0c:	e0bfd017 	ldw	r2,-192(fp)
 2007f10:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 2007f14:	e03fe215 	stw	zero,-120(fp)
 2007f18:	e0bfe217 	ldw	r2,-120(fp)
 2007f1c:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 2007f20:	e0bfd917 	ldw	r2,-156(fp)
 2007f24:	10003a26 	beq	r2,zero,2008010 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 2007f28:	e0bffb17 	ldw	r2,-20(fp)
 2007f2c:	10800088 	cmpgei	r2,r2,2
 2007f30:	10000a1e 	bne	r2,zero,2007f5c <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2007f34:	e0bfe017 	ldw	r2,-128(fp)
 2007f38:	10000326 	beq	r2,zero,2007f48 <_dtoa_r+0x1228>
 2007f3c:	e0bff117 	ldw	r2,-60(fp)
 2007f40:	10810cc4 	addi	r2,r2,1075
 2007f44:	00000306 	br	2007f54 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 2007f48:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2007f4c:	00c00d84 	movi	r3,54
 2007f50:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 2007f54:	e0bfd215 	stw	r2,-184(fp)
 2007f58:	00002106 	br	2007fe0 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 2007f5c:	e0bfd417 	ldw	r2,-176(fp)
 2007f60:	10bfffc4 	addi	r2,r2,-1
 2007f64:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 2007f68:	e0ffdb17 	ldw	r3,-148(fp)
 2007f6c:	e0bfd617 	ldw	r2,-168(fp)
 2007f70:	18800516 	blt	r3,r2,2007f88 <_dtoa_r+0x1268>
	    m5 -= j;
 2007f74:	e0ffdb17 	ldw	r3,-148(fp)
 2007f78:	e0bfd617 	ldw	r2,-168(fp)
 2007f7c:	1885c83a 	sub	r2,r3,r2
 2007f80:	e0bfdb15 	stw	r2,-148(fp)
 2007f84:	00000d06 	br	2007fbc <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 2007f88:	e0ffd617 	ldw	r3,-168(fp)
 2007f8c:	e0bfdb17 	ldw	r2,-148(fp)
 2007f90:	1885c83a 	sub	r2,r3,r2
 2007f94:	e0bfd615 	stw	r2,-168(fp)
 2007f98:	e0bfd617 	ldw	r2,-168(fp)
 2007f9c:	e0ffdd17 	ldw	r3,-140(fp)
 2007fa0:	1885883a 	add	r2,r3,r2
 2007fa4:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 2007fa8:	e0ffd017 	ldw	r3,-192(fp)
 2007fac:	e0bfd617 	ldw	r2,-168(fp)
 2007fb0:	1885883a 	add	r2,r3,r2
 2007fb4:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 2007fb8:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 2007fbc:	e0bfd417 	ldw	r2,-176(fp)
 2007fc0:	e0bfd215 	stw	r2,-184(fp)
 2007fc4:	e0bfd217 	ldw	r2,-184(fp)
 2007fc8:	1000050e 	bge	r2,zero,2007fe0 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 2007fcc:	e0ffda17 	ldw	r3,-152(fp)
 2007fd0:	e0bfd217 	ldw	r2,-184(fp)
 2007fd4:	1885c83a 	sub	r2,r3,r2
 2007fd8:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 2007fdc:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 2007fe0:	e0ffcf17 	ldw	r3,-196(fp)
 2007fe4:	e0bfd217 	ldw	r2,-184(fp)
 2007fe8:	1885883a 	add	r2,r3,r2
 2007fec:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 2007ff0:	e0ffdc17 	ldw	r3,-144(fp)
 2007ff4:	e0bfd217 	ldw	r2,-184(fp)
 2007ff8:	1885883a 	add	r2,r3,r2
 2007ffc:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 2008000:	01400044 	movi	r5,1
 2008004:	e13ff817 	ldw	r4,-32(fp)
 2008008:	200c1500 	call	200c150 <__i2b>
 200800c:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 2008010:	e0bfda17 	ldw	r2,-152(fp)
 2008014:	0080130e 	bge	zero,r2,2008064 <_dtoa_r+0x1344>
 2008018:	e0bfdc17 	ldw	r2,-144(fp)
 200801c:	0080110e 	bge	zero,r2,2008064 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 2008020:	e0ffda17 	ldw	r3,-152(fp)
 2008024:	e0bfdc17 	ldw	r2,-144(fp)
 2008028:	1880010e 	bge	r3,r2,2008030 <_dtoa_r+0x1310>
 200802c:	1805883a 	mov	r2,r3
 2008030:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 2008034:	e0ffcf17 	ldw	r3,-196(fp)
 2008038:	e0bfd217 	ldw	r2,-184(fp)
 200803c:	1885c83a 	sub	r2,r3,r2
 2008040:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 2008044:	e0ffda17 	ldw	r3,-152(fp)
 2008048:	e0bfd217 	ldw	r2,-184(fp)
 200804c:	1885c83a 	sub	r2,r3,r2
 2008050:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 2008054:	e0ffdc17 	ldw	r3,-144(fp)
 2008058:	e0bfd217 	ldw	r2,-184(fp)
 200805c:	1885c83a 	sub	r2,r3,r2
 2008060:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 2008064:	e0bfd017 	ldw	r2,-192(fp)
 2008068:	0080240e 	bge	zero,r2,20080fc <_dtoa_r+0x13dc>
    {
      if (leftright)
 200806c:	e0bfd917 	ldw	r2,-156(fp)
 2008070:	10001d26 	beq	r2,zero,20080e8 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 2008074:	e0bfdb17 	ldw	r2,-148(fp)
 2008078:	00800f0e 	bge	zero,r2,20080b8 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 200807c:	e1bfdb17 	ldw	r6,-148(fp)
 2008080:	e17fe317 	ldw	r5,-116(fp)
 2008084:	e13ff817 	ldw	r4,-32(fp)
 2008088:	200c5780 	call	200c578 <__pow5mult>
 200808c:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 2008090:	e1bfe117 	ldw	r6,-124(fp)
 2008094:	e17fe317 	ldw	r5,-116(fp)
 2008098:	e13ff817 	ldw	r4,-32(fp)
 200809c:	200c1a80 	call	200c1a8 <__multiply>
 20080a0:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 20080a4:	e17fe117 	ldw	r5,-124(fp)
 20080a8:	e13ff817 	ldw	r4,-32(fp)
 20080ac:	200bc380 	call	200bc38 <_Bfree>
	      b = b1;
 20080b0:	e0bfee17 	ldw	r2,-72(fp)
 20080b4:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 20080b8:	e0ffd017 	ldw	r3,-192(fp)
 20080bc:	e0bfdb17 	ldw	r2,-148(fp)
 20080c0:	1885c83a 	sub	r2,r3,r2
 20080c4:	e0bfd615 	stw	r2,-168(fp)
 20080c8:	e0bfd617 	ldw	r2,-168(fp)
 20080cc:	10000b26 	beq	r2,zero,20080fc <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 20080d0:	e1bfd617 	ldw	r6,-168(fp)
 20080d4:	e17fe117 	ldw	r5,-124(fp)
 20080d8:	e13ff817 	ldw	r4,-32(fp)
 20080dc:	200c5780 	call	200c578 <__pow5mult>
 20080e0:	e0bfe115 	stw	r2,-124(fp)
 20080e4:	00000506 	br	20080fc <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 20080e8:	e1bfd017 	ldw	r6,-192(fp)
 20080ec:	e17fe117 	ldw	r5,-124(fp)
 20080f0:	e13ff817 	ldw	r4,-32(fp)
 20080f4:	200c5780 	call	200c578 <__pow5mult>
 20080f8:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 20080fc:	01400044 	movi	r5,1
 2008100:	e13ff817 	ldw	r4,-32(fp)
 2008104:	200c1500 	call	200c150 <__i2b>
 2008108:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 200810c:	e0bfdd17 	ldw	r2,-140(fp)
 2008110:	0080050e 	bge	zero,r2,2008128 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 2008114:	e1bfdd17 	ldw	r6,-140(fp)
 2008118:	e17fe417 	ldw	r5,-112(fp)
 200811c:	e13ff817 	ldw	r4,-32(fp)
 2008120:	200c5780 	call	200c578 <__pow5mult>
 2008124:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 2008128:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 200812c:	e0bffb17 	ldw	r2,-20(fp)
 2008130:	10800088 	cmpgei	r2,r2,2
 2008134:	1000121e 	bne	r2,zero,2008180 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 2008138:	e0bff217 	ldw	r2,-56(fp)
 200813c:	1000101e 	bne	r2,zero,2008180 <_dtoa_r+0x1460>
 2008140:	e0fff317 	ldw	r3,-52(fp)
 2008144:	00800434 	movhi	r2,16
 2008148:	10bfffc4 	addi	r2,r2,-1
 200814c:	1884703a 	and	r2,r3,r2
 2008150:	10000b1e 	bne	r2,zero,2008180 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 2008154:	e0bff317 	ldw	r2,-52(fp)
 2008158:	109ffc2c 	andhi	r2,r2,32752
 200815c:	10000826 	beq	r2,zero,2008180 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 2008160:	e0bfcf17 	ldw	r2,-196(fp)
 2008164:	10800044 	addi	r2,r2,1
 2008168:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 200816c:	e0bfdc17 	ldw	r2,-144(fp)
 2008170:	10800044 	addi	r2,r2,1
 2008174:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 2008178:	00800044 	movi	r2,1
 200817c:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 2008180:	e0bfdd17 	ldw	r2,-140(fp)
 2008184:	10000f26 	beq	r2,zero,20081c4 <_dtoa_r+0x14a4>
 2008188:	e0bfe417 	ldw	r2,-112(fp)
 200818c:	10800417 	ldw	r2,16(r2)
 2008190:	10bfffc4 	addi	r2,r2,-1
 2008194:	e0ffe417 	ldw	r3,-112(fp)
 2008198:	10800144 	addi	r2,r2,5
 200819c:	1085883a 	add	r2,r2,r2
 20081a0:	1085883a 	add	r2,r2,r2
 20081a4:	1885883a 	add	r2,r3,r2
 20081a8:	10800017 	ldw	r2,0(r2)
 20081ac:	1009883a 	mov	r4,r2
 20081b0:	200bfd40 	call	200bfd4 <__hi0bits>
 20081b4:	1007883a 	mov	r3,r2
 20081b8:	00800804 	movi	r2,32
 20081bc:	10c5c83a 	sub	r2,r2,r3
 20081c0:	00000106 	br	20081c8 <_dtoa_r+0x14a8>
 20081c4:	00800044 	movi	r2,1
 20081c8:	e0ffdc17 	ldw	r3,-144(fp)
 20081cc:	10c5883a 	add	r2,r2,r3
 20081d0:	108007cc 	andi	r2,r2,31
 20081d4:	e0bfd215 	stw	r2,-184(fp)
 20081d8:	e0bfd217 	ldw	r2,-184(fp)
 20081dc:	10000426 	beq	r2,zero,20081f0 <_dtoa_r+0x14d0>
    i = 32 - i;
 20081e0:	00c00804 	movi	r3,32
 20081e4:	e0bfd217 	ldw	r2,-184(fp)
 20081e8:	1885c83a 	sub	r2,r3,r2
 20081ec:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 20081f0:	e0bfd217 	ldw	r2,-184(fp)
 20081f4:	10800150 	cmplti	r2,r2,5
 20081f8:	1000101e 	bne	r2,zero,200823c <_dtoa_r+0x151c>
    {
      i -= 4;
 20081fc:	e0bfd217 	ldw	r2,-184(fp)
 2008200:	10bfff04 	addi	r2,r2,-4
 2008204:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 2008208:	e0ffcf17 	ldw	r3,-196(fp)
 200820c:	e0bfd217 	ldw	r2,-184(fp)
 2008210:	1885883a 	add	r2,r3,r2
 2008214:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 2008218:	e0ffda17 	ldw	r3,-152(fp)
 200821c:	e0bfd217 	ldw	r2,-184(fp)
 2008220:	1885883a 	add	r2,r3,r2
 2008224:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 2008228:	e0ffdc17 	ldw	r3,-144(fp)
 200822c:	e0bfd217 	ldw	r2,-184(fp)
 2008230:	1885883a 	add	r2,r3,r2
 2008234:	e0bfdc15 	stw	r2,-144(fp)
 2008238:	00001206 	br	2008284 <_dtoa_r+0x1564>
    }
  else if (i < 4)
 200823c:	e0bfd217 	ldw	r2,-184(fp)
 2008240:	10800108 	cmpgei	r2,r2,4
 2008244:	10000f1e 	bne	r2,zero,2008284 <_dtoa_r+0x1564>
    {
      i += 28;
 2008248:	e0bfd217 	ldw	r2,-184(fp)
 200824c:	10800704 	addi	r2,r2,28
 2008250:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 2008254:	e0ffcf17 	ldw	r3,-196(fp)
 2008258:	e0bfd217 	ldw	r2,-184(fp)
 200825c:	1885883a 	add	r2,r3,r2
 2008260:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 2008264:	e0ffda17 	ldw	r3,-152(fp)
 2008268:	e0bfd217 	ldw	r2,-184(fp)
 200826c:	1885883a 	add	r2,r3,r2
 2008270:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 2008274:	e0ffdc17 	ldw	r3,-144(fp)
 2008278:	e0bfd217 	ldw	r2,-184(fp)
 200827c:	1885883a 	add	r2,r3,r2
 2008280:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 2008284:	e0bfcf17 	ldw	r2,-196(fp)
 2008288:	0080050e 	bge	zero,r2,20082a0 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 200828c:	e1bfcf17 	ldw	r6,-196(fp)
 2008290:	e17fe117 	ldw	r5,-124(fp)
 2008294:	e13ff817 	ldw	r4,-32(fp)
 2008298:	200c6f00 	call	200c6f0 <__lshift>
 200829c:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 20082a0:	e0bfdc17 	ldw	r2,-144(fp)
 20082a4:	0080050e 	bge	zero,r2,20082bc <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 20082a8:	e1bfdc17 	ldw	r6,-144(fp)
 20082ac:	e17fe417 	ldw	r5,-112(fp)
 20082b0:	e13ff817 	ldw	r4,-32(fp)
 20082b4:	200c6f00 	call	200c6f0 <__lshift>
 20082b8:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 20082bc:	e0bfd817 	ldw	r2,-160(fp)
 20082c0:	10001726 	beq	r2,zero,2008320 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 20082c4:	e17fe417 	ldw	r5,-112(fp)
 20082c8:	e13fe117 	ldw	r4,-124(fp)
 20082cc:	200c8e80 	call	200c8e8 <__mcmp>
 20082d0:	1000130e 	bge	r2,zero,2008320 <_dtoa_r+0x1600>
	{
	  k--;
 20082d4:	e0bfd717 	ldw	r2,-164(fp)
 20082d8:	10bfffc4 	addi	r2,r2,-1
 20082dc:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 20082e0:	000f883a 	mov	r7,zero
 20082e4:	01800284 	movi	r6,10
 20082e8:	e17fe117 	ldw	r5,-124(fp)
 20082ec:	e13ff817 	ldw	r4,-32(fp)
 20082f0:	200bcb40 	call	200bcb4 <__multadd>
 20082f4:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 20082f8:	e0bfd917 	ldw	r2,-156(fp)
 20082fc:	10000626 	beq	r2,zero,2008318 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 2008300:	000f883a 	mov	r7,zero
 2008304:	01800284 	movi	r6,10
 2008308:	e17fe317 	ldw	r5,-116(fp)
 200830c:	e13ff817 	ldw	r4,-32(fp)
 2008310:	200bcb40 	call	200bcb4 <__multadd>
 2008314:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 2008318:	e0bfd517 	ldw	r2,-172(fp)
 200831c:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 2008320:	e0bfd417 	ldw	r2,-176(fp)
 2008324:	00801f16 	blt	zero,r2,20083a4 <_dtoa_r+0x1684>
 2008328:	e0bffb17 	ldw	r2,-20(fp)
 200832c:	108000d0 	cmplti	r2,r2,3
 2008330:	10001c1e 	bne	r2,zero,20083a4 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 2008334:	e0bfd417 	ldw	r2,-176(fp)
 2008338:	10000c16 	blt	r2,zero,200836c <_dtoa_r+0x164c>
 200833c:	000f883a 	mov	r7,zero
 2008340:	01800144 	movi	r6,5
 2008344:	e17fe417 	ldw	r5,-112(fp)
 2008348:	e13ff817 	ldw	r4,-32(fp)
 200834c:	200bcb40 	call	200bcb4 <__multadd>
 2008350:	e0bfe415 	stw	r2,-112(fp)
 2008354:	e17fe417 	ldw	r5,-112(fp)
 2008358:	e13fe117 	ldw	r4,-124(fp)
 200835c:	200c8e80 	call	200c8e8 <__mcmp>
 2008360:	00800716 	blt	zero,r2,2008380 <_dtoa_r+0x1660>
 2008364:	00000106 	br	200836c <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 2008368:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 200836c:	e0800217 	ldw	r2,8(fp)
 2008370:	0084303a 	nor	r2,zero,r2
 2008374:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 2008378:	00011d06 	br	20087f0 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 200837c:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 2008380:	e0bfe717 	ldw	r2,-100(fp)
 2008384:	10c00044 	addi	r3,r2,1
 2008388:	e0ffe715 	stw	r3,-100(fp)
 200838c:	00c00c44 	movi	r3,49
 2008390:	10c00005 	stb	r3,0(r2)
      k++;
 2008394:	e0bfd717 	ldw	r2,-164(fp)
 2008398:	10800044 	addi	r2,r2,1
 200839c:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 20083a0:	00011306 	br	20087f0 <_dtoa_r+0x1ad0>
    }
  if (leftright)
 20083a4:	e0bfd917 	ldw	r2,-156(fp)
 20083a8:	1000ba26 	beq	r2,zero,2008694 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 20083ac:	e0bfda17 	ldw	r2,-152(fp)
 20083b0:	0080050e 	bge	zero,r2,20083c8 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 20083b4:	e1bfda17 	ldw	r6,-152(fp)
 20083b8:	e17fe317 	ldw	r5,-116(fp)
 20083bc:	e13ff817 	ldw	r4,-32(fp)
 20083c0:	200c6f00 	call	200c6f0 <__lshift>
 20083c4:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 20083c8:	e0bfe317 	ldw	r2,-116(fp)
 20083cc:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 20083d0:	e0bfde17 	ldw	r2,-136(fp)
 20083d4:	10001826 	beq	r2,zero,2008438 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 20083d8:	e0bfe317 	ldw	r2,-116(fp)
 20083dc:	10800117 	ldw	r2,4(r2)
 20083e0:	100b883a 	mov	r5,r2
 20083e4:	e13ff817 	ldw	r4,-32(fp)
 20083e8:	200bb080 	call	200bb08 <_Balloc>
 20083ec:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 20083f0:	e0bfe317 	ldw	r2,-116(fp)
 20083f4:	10c00304 	addi	r3,r2,12
 20083f8:	e0bfe217 	ldw	r2,-120(fp)
 20083fc:	11000304 	addi	r4,r2,12
 2008400:	e0bfe217 	ldw	r2,-120(fp)
 2008404:	10800417 	ldw	r2,16(r2)
 2008408:	10800084 	addi	r2,r2,2
 200840c:	1085883a 	add	r2,r2,r2
 2008410:	1085883a 	add	r2,r2,r2
 2008414:	100d883a 	mov	r6,r2
 2008418:	200b883a 	mov	r5,r4
 200841c:	1809883a 	mov	r4,r3
 2008420:	200b5b40 	call	200b5b4 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 2008424:	01800044 	movi	r6,1
 2008428:	e17fe317 	ldw	r5,-116(fp)
 200842c:	e13ff817 	ldw	r4,-32(fp)
 2008430:	200c6f00 	call	200c6f0 <__lshift>
 2008434:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 2008438:	00800044 	movi	r2,1
 200843c:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 2008440:	e17fe417 	ldw	r5,-112(fp)
 2008444:	e13fe117 	ldw	r4,-124(fp)
 2008448:	200696c0 	call	200696c <quorem>
 200844c:	10800c04 	addi	r2,r2,48
 2008450:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 2008454:	e17fe217 	ldw	r5,-120(fp)
 2008458:	e13fe117 	ldw	r4,-124(fp)
 200845c:	200c8e80 	call	200c8e8 <__mcmp>
 2008460:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 2008464:	e1bfe317 	ldw	r6,-116(fp)
 2008468:	e17fe417 	ldw	r5,-112(fp)
 200846c:	e13ff817 	ldw	r4,-32(fp)
 2008470:	200c9fc0 	call	200c9fc <__mdiff>
 2008474:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 2008478:	e0bfef17 	ldw	r2,-68(fp)
 200847c:	10800317 	ldw	r2,12(r2)
 2008480:	1000041e 	bne	r2,zero,2008494 <_dtoa_r+0x1774>
 2008484:	e17fef17 	ldw	r5,-68(fp)
 2008488:	e13fe117 	ldw	r4,-124(fp)
 200848c:	200c8e80 	call	200c8e8 <__mcmp>
 2008490:	00000106 	br	2008498 <_dtoa_r+0x1778>
 2008494:	00800044 	movi	r2,1
 2008498:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 200849c:	e17fef17 	ldw	r5,-68(fp)
 20084a0:	e13ff817 	ldw	r4,-32(fp)
 20084a4:	200bc380 	call	200bc38 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 20084a8:	e0bfec17 	ldw	r2,-80(fp)
 20084ac:	1000131e 	bne	r2,zero,20084fc <_dtoa_r+0x17dc>
 20084b0:	e0bffb17 	ldw	r2,-20(fp)
 20084b4:	1000111e 	bne	r2,zero,20084fc <_dtoa_r+0x17dc>
 20084b8:	e0bff217 	ldw	r2,-56(fp)
 20084bc:	1080004c 	andi	r2,r2,1
 20084c0:	10000e1e 	bne	r2,zero,20084fc <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 20084c4:	e0bfd117 	ldw	r2,-188(fp)
 20084c8:	10800e58 	cmpnei	r2,r2,57
 20084cc:	10003726 	beq	r2,zero,20085ac <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 20084d0:	e0bfd617 	ldw	r2,-168(fp)
 20084d4:	0080030e 	bge	zero,r2,20084e4 <_dtoa_r+0x17c4>
		dig++;
 20084d8:	e0bfd117 	ldw	r2,-188(fp)
 20084dc:	10800044 	addi	r2,r2,1
 20084e0:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 20084e4:	e0bfe717 	ldw	r2,-100(fp)
 20084e8:	10c00044 	addi	r3,r2,1
 20084ec:	e0ffe715 	stw	r3,-100(fp)
 20084f0:	e0ffd117 	ldw	r3,-188(fp)
 20084f4:	10c00005 	stb	r3,0(r2)
	      goto ret;
 20084f8:	0000bd06 	br	20087f0 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 20084fc:	e0bfd617 	ldw	r2,-168(fp)
 2008500:	10000716 	blt	r2,zero,2008520 <_dtoa_r+0x1800>
 2008504:	e0bfd617 	ldw	r2,-168(fp)
 2008508:	1000221e 	bne	r2,zero,2008594 <_dtoa_r+0x1874>
 200850c:	e0bffb17 	ldw	r2,-20(fp)
 2008510:	1000201e 	bne	r2,zero,2008594 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 2008514:	e0bff217 	ldw	r2,-56(fp)
 2008518:	1080004c 	andi	r2,r2,1
 200851c:	10001d1e 	bne	r2,zero,2008594 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 2008520:	e0bfec17 	ldw	r2,-80(fp)
 2008524:	0080150e 	bge	zero,r2,200857c <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 2008528:	01800044 	movi	r6,1
 200852c:	e17fe117 	ldw	r5,-124(fp)
 2008530:	e13ff817 	ldw	r4,-32(fp)
 2008534:	200c6f00 	call	200c6f0 <__lshift>
 2008538:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 200853c:	e17fe417 	ldw	r5,-112(fp)
 2008540:	e13fe117 	ldw	r4,-124(fp)
 2008544:	200c8e80 	call	200c8e8 <__mcmp>
 2008548:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 200854c:	e0bfec17 	ldw	r2,-80(fp)
 2008550:	00800516 	blt	zero,r2,2008568 <_dtoa_r+0x1848>
 2008554:	e0bfec17 	ldw	r2,-80(fp)
 2008558:	1000081e 	bne	r2,zero,200857c <_dtoa_r+0x185c>
 200855c:	e0bfd117 	ldw	r2,-188(fp)
 2008560:	1080004c 	andi	r2,r2,1
 2008564:	10000526 	beq	r2,zero,200857c <_dtoa_r+0x185c>
		      && dig++ == '9')
 2008568:	e0bfd117 	ldw	r2,-188(fp)
 200856c:	10c00044 	addi	r3,r2,1
 2008570:	e0ffd115 	stw	r3,-188(fp)
 2008574:	10800e58 	cmpnei	r2,r2,57
 2008578:	10000e26 	beq	r2,zero,20085b4 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 200857c:	e0bfe717 	ldw	r2,-100(fp)
 2008580:	10c00044 	addi	r3,r2,1
 2008584:	e0ffe715 	stw	r3,-100(fp)
 2008588:	e0ffd117 	ldw	r3,-188(fp)
 200858c:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2008590:	00009706 	br	20087f0 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 2008594:	e0bfec17 	ldw	r2,-80(fp)
 2008598:	0080140e 	bge	zero,r2,20085ec <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 200859c:	e0bfd117 	ldw	r2,-188(fp)
 20085a0:	10800e58 	cmpnei	r2,r2,57
 20085a4:	10000a1e 	bne	r2,zero,20085d0 <_dtoa_r+0x18b0>
 20085a8:	00000306 	br	20085b8 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 20085ac:	0001883a 	nop
 20085b0:	00000106 	br	20085b8 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 20085b4:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 20085b8:	e0bfe717 	ldw	r2,-100(fp)
 20085bc:	10c00044 	addi	r3,r2,1
 20085c0:	e0ffe715 	stw	r3,-100(fp)
 20085c4:	00c00e44 	movi	r3,57
 20085c8:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 20085cc:	00005d06 	br	2008744 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 20085d0:	e0bfe717 	ldw	r2,-100(fp)
 20085d4:	10c00044 	addi	r3,r2,1
 20085d8:	e0ffe715 	stw	r3,-100(fp)
 20085dc:	e0ffd117 	ldw	r3,-188(fp)
 20085e0:	18c00044 	addi	r3,r3,1
 20085e4:	10c00005 	stb	r3,0(r2)
	      goto ret;
 20085e8:	00008106 	br	20087f0 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 20085ec:	e0bfe717 	ldw	r2,-100(fp)
 20085f0:	10c00044 	addi	r3,r2,1
 20085f4:	e0ffe715 	stw	r3,-100(fp)
 20085f8:	e0ffd117 	ldw	r3,-188(fp)
 20085fc:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2008600:	e0ffd217 	ldw	r3,-184(fp)
 2008604:	e0bfd417 	ldw	r2,-176(fp)
 2008608:	18803b26 	beq	r3,r2,20086f8 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 200860c:	000f883a 	mov	r7,zero
 2008610:	01800284 	movi	r6,10
 2008614:	e17fe117 	ldw	r5,-124(fp)
 2008618:	e13ff817 	ldw	r4,-32(fp)
 200861c:	200bcb40 	call	200bcb4 <__multadd>
 2008620:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 2008624:	e0ffe217 	ldw	r3,-120(fp)
 2008628:	e0bfe317 	ldw	r2,-116(fp)
 200862c:	1880091e 	bne	r3,r2,2008654 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 2008630:	000f883a 	mov	r7,zero
 2008634:	01800284 	movi	r6,10
 2008638:	e17fe317 	ldw	r5,-116(fp)
 200863c:	e13ff817 	ldw	r4,-32(fp)
 2008640:	200bcb40 	call	200bcb4 <__multadd>
 2008644:	e0bfe315 	stw	r2,-116(fp)
 2008648:	e0bfe317 	ldw	r2,-116(fp)
 200864c:	e0bfe215 	stw	r2,-120(fp)
 2008650:	00000c06 	br	2008684 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 2008654:	000f883a 	mov	r7,zero
 2008658:	01800284 	movi	r6,10
 200865c:	e17fe217 	ldw	r5,-120(fp)
 2008660:	e13ff817 	ldw	r4,-32(fp)
 2008664:	200bcb40 	call	200bcb4 <__multadd>
 2008668:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 200866c:	000f883a 	mov	r7,zero
 2008670:	01800284 	movi	r6,10
 2008674:	e17fe317 	ldw	r5,-116(fp)
 2008678:	e13ff817 	ldw	r4,-32(fp)
 200867c:	200bcb40 	call	200bcb4 <__multadd>
 2008680:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 2008684:	e0bfd217 	ldw	r2,-184(fp)
 2008688:	10800044 	addi	r2,r2,1
 200868c:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 2008690:	003f6b06 	br	2008440 <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 2008694:	00800044 	movi	r2,1
 2008698:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 200869c:	e43fe717 	ldw	r16,-100(fp)
 20086a0:	80800044 	addi	r2,r16,1
 20086a4:	e0bfe715 	stw	r2,-100(fp)
 20086a8:	e17fe417 	ldw	r5,-112(fp)
 20086ac:	e13fe117 	ldw	r4,-124(fp)
 20086b0:	200696c0 	call	200696c <quorem>
 20086b4:	10800c04 	addi	r2,r2,48
 20086b8:	e0bfd115 	stw	r2,-188(fp)
 20086bc:	e0bfd117 	ldw	r2,-188(fp)
 20086c0:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 20086c4:	e0ffd217 	ldw	r3,-184(fp)
 20086c8:	e0bfd417 	ldw	r2,-176(fp)
 20086cc:	18800c0e 	bge	r3,r2,2008700 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 20086d0:	000f883a 	mov	r7,zero
 20086d4:	01800284 	movi	r6,10
 20086d8:	e17fe117 	ldw	r5,-124(fp)
 20086dc:	e13ff817 	ldw	r4,-32(fp)
 20086e0:	200bcb40 	call	200bcb4 <__multadd>
 20086e4:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 20086e8:	e0bfd217 	ldw	r2,-184(fp)
 20086ec:	10800044 	addi	r2,r2,1
 20086f0:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 20086f4:	003fe906 	br	200869c <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 20086f8:	0001883a 	nop
 20086fc:	00000106 	br	2008704 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 2008700:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 2008704:	01800044 	movi	r6,1
 2008708:	e17fe117 	ldw	r5,-124(fp)
 200870c:	e13ff817 	ldw	r4,-32(fp)
 2008710:	200c6f00 	call	200c6f0 <__lshift>
 2008714:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 2008718:	e17fe417 	ldw	r5,-112(fp)
 200871c:	e13fe117 	ldw	r4,-124(fp)
 2008720:	200c8e80 	call	200c8e8 <__mcmp>
 2008724:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 2008728:	e0bfd617 	ldw	r2,-168(fp)
 200872c:	00801216 	blt	zero,r2,2008778 <_dtoa_r+0x1a58>
 2008730:	e0bfd617 	ldw	r2,-168(fp)
 2008734:	1000211e 	bne	r2,zero,20087bc <_dtoa_r+0x1a9c>
 2008738:	e0bfd117 	ldw	r2,-188(fp)
 200873c:	1080004c 	andi	r2,r2,1
 2008740:	10001e26 	beq	r2,zero,20087bc <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 2008744:	00000c06 	br	2008778 <_dtoa_r+0x1a58>
	if (s == s0)
 2008748:	e0ffe717 	ldw	r3,-100(fp)
 200874c:	e0bfe917 	ldw	r2,-92(fp)
 2008750:	1880091e 	bne	r3,r2,2008778 <_dtoa_r+0x1a58>
	  {
	    k++;
 2008754:	e0bfd717 	ldw	r2,-164(fp)
 2008758:	10800044 	addi	r2,r2,1
 200875c:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 2008760:	e0bfe717 	ldw	r2,-100(fp)
 2008764:	10c00044 	addi	r3,r2,1
 2008768:	e0ffe715 	stw	r3,-100(fp)
 200876c:	00c00c44 	movi	r3,49
 2008770:	10c00005 	stb	r3,0(r2)
	    goto ret;
 2008774:	00001e06 	br	20087f0 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 2008778:	e0bfe717 	ldw	r2,-100(fp)
 200877c:	10bfffc4 	addi	r2,r2,-1
 2008780:	e0bfe715 	stw	r2,-100(fp)
 2008784:	e0bfe717 	ldw	r2,-100(fp)
 2008788:	10800003 	ldbu	r2,0(r2)
 200878c:	10803fcc 	andi	r2,r2,255
 2008790:	1080201c 	xori	r2,r2,128
 2008794:	10bfe004 	addi	r2,r2,-128
 2008798:	10800e60 	cmpeqi	r2,r2,57
 200879c:	103fea1e 	bne	r2,zero,2008748 <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 20087a0:	e0bfe717 	ldw	r2,-100(fp)
 20087a4:	10c00044 	addi	r3,r2,1
 20087a8:	e0ffe715 	stw	r3,-100(fp)
 20087ac:	10c00003 	ldbu	r3,0(r2)
 20087b0:	18c00044 	addi	r3,r3,1
 20087b4:	10c00005 	stb	r3,0(r2)
 20087b8:	00000d06 	br	20087f0 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 20087bc:	e0bfe717 	ldw	r2,-100(fp)
 20087c0:	10bfffc4 	addi	r2,r2,-1
 20087c4:	e0bfe715 	stw	r2,-100(fp)
 20087c8:	e0bfe717 	ldw	r2,-100(fp)
 20087cc:	10800003 	ldbu	r2,0(r2)
 20087d0:	10803fcc 	andi	r2,r2,255
 20087d4:	1080201c 	xori	r2,r2,128
 20087d8:	10bfe004 	addi	r2,r2,-128
 20087dc:	10800c20 	cmpeqi	r2,r2,48
 20087e0:	103ff61e 	bne	r2,zero,20087bc <_dtoa_r+0x1a9c>
      s++;
 20087e4:	e0bfe717 	ldw	r2,-100(fp)
 20087e8:	10800044 	addi	r2,r2,1
 20087ec:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 20087f0:	e17fe417 	ldw	r5,-112(fp)
 20087f4:	e13ff817 	ldw	r4,-32(fp)
 20087f8:	200bc380 	call	200bc38 <_Bfree>
  if (mhi)
 20087fc:	e0bfe317 	ldw	r2,-116(fp)
 2008800:	10000d26 	beq	r2,zero,2008838 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 2008804:	e0bfe217 	ldw	r2,-120(fp)
 2008808:	10000626 	beq	r2,zero,2008824 <_dtoa_r+0x1b04>
 200880c:	e0ffe217 	ldw	r3,-120(fp)
 2008810:	e0bfe317 	ldw	r2,-116(fp)
 2008814:	18800326 	beq	r3,r2,2008824 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 2008818:	e17fe217 	ldw	r5,-120(fp)
 200881c:	e13ff817 	ldw	r4,-32(fp)
 2008820:	200bc380 	call	200bc38 <_Bfree>
      Bfree (ptr, mhi);
 2008824:	e17fe317 	ldw	r5,-116(fp)
 2008828:	e13ff817 	ldw	r4,-32(fp)
 200882c:	200bc380 	call	200bc38 <_Bfree>
 2008830:	00000106 	br	2008838 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 2008834:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 2008838:	e17fe117 	ldw	r5,-124(fp)
 200883c:	e13ff817 	ldw	r4,-32(fp)
 2008840:	200bc380 	call	200bc38 <_Bfree>
  *s = 0;
 2008844:	e0bfe717 	ldw	r2,-100(fp)
 2008848:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 200884c:	e0bfd717 	ldw	r2,-164(fp)
 2008850:	10c00044 	addi	r3,r2,1
 2008854:	e0800317 	ldw	r2,12(fp)
 2008858:	10c00015 	stw	r3,0(r2)
  if (rve)
 200885c:	e0800517 	ldw	r2,20(fp)
 2008860:	10000326 	beq	r2,zero,2008870 <_dtoa_r+0x1b50>
    *rve = s;
 2008864:	e0800517 	ldw	r2,20(fp)
 2008868:	e0ffe717 	ldw	r3,-100(fp)
 200886c:	10c00015 	stw	r3,0(r2)
  return s0;
 2008870:	e0bfe917 	ldw	r2,-92(fp)
}
 2008874:	e6fffc04 	addi	sp,fp,-16
 2008878:	dfc00517 	ldw	ra,20(sp)
 200887c:	df000417 	ldw	fp,16(sp)
 2008880:	dcc00317 	ldw	r19,12(sp)
 2008884:	dc800217 	ldw	r18,8(sp)
 2008888:	dc400117 	ldw	r17,4(sp)
 200888c:	dc000017 	ldw	r16,0(sp)
 2008890:	dec00604 	addi	sp,sp,24
 2008894:	f800283a 	ret

02008898 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2008898:	defff504 	addi	sp,sp,-44
 200889c:	dfc00a15 	stw	ra,40(sp)
 20088a0:	df000915 	stw	fp,36(sp)
 20088a4:	dcc00815 	stw	r19,32(sp)
 20088a8:	dc800715 	stw	r18,28(sp)
 20088ac:	dc400615 	stw	r17,24(sp)
 20088b0:	dc000515 	stw	r16,20(sp)
 20088b4:	df000904 	addi	fp,sp,36
 20088b8:	e13ffb15 	stw	r4,-20(fp)
 20088bc:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 20088c0:	8080030b 	ldhu	r2,12(r16)
 20088c4:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 20088c8:	e0bff90b 	ldhu	r2,-28(fp)
 20088cc:	10bfffcc 	andi	r2,r2,65535
 20088d0:	1080020c 	andi	r2,r2,8
 20088d4:	1000831e 	bne	r2,zero,2008ae4 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 20088d8:	8080030b 	ldhu	r2,12(r16)
 20088dc:	10820014 	ori	r2,r2,2048
 20088e0:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 20088e4:	80800117 	ldw	r2,4(r16)
 20088e8:	00800216 	blt	zero,r2,20088f4 <__sflush_r+0x5c>
 20088ec:	80800f17 	ldw	r2,60(r16)
 20088f0:	00807a0e 	bge	zero,r2,2008adc <__sflush_r+0x244>
 20088f4:	80800a17 	ldw	r2,40(r16)
 20088f8:	10007826 	beq	r2,zero,2008adc <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 20088fc:	e0bffb17 	ldw	r2,-20(fp)
 2008900:	10800017 	ldw	r2,0(r2)
 2008904:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 2008908:	e0bffb17 	ldw	r2,-20(fp)
 200890c:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 2008910:	8080030b 	ldhu	r2,12(r16)
 2008914:	10bfffcc 	andi	r2,r2,65535
 2008918:	1084000c 	andi	r2,r2,4096
 200891c:	10000326 	beq	r2,zero,200892c <__sflush_r+0x94>
	    curoff = fp->_offset;
 2008920:	80801417 	ldw	r2,80(r16)
 2008924:	e0bff715 	stw	r2,-36(fp)
 2008928:	00002206 	br	20089b4 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 200892c:	80800a17 	ldw	r2,40(r16)
 2008930:	80c00717 	ldw	r3,28(r16)
 2008934:	01c00044 	movi	r7,1
 2008938:	000d883a 	mov	r6,zero
 200893c:	180b883a 	mov	r5,r3
 2008940:	e13ffb17 	ldw	r4,-20(fp)
 2008944:	103ee83a 	callr	r2
 2008948:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 200894c:	e0bff717 	ldw	r2,-36(fp)
 2008950:	10bfffd8 	cmpnei	r2,r2,-1
 2008954:	1000171e 	bne	r2,zero,20089b4 <__sflush_r+0x11c>
 2008958:	e0bffb17 	ldw	r2,-20(fp)
 200895c:	10800017 	ldw	r2,0(r2)
 2008960:	10001426 	beq	r2,zero,20089b4 <__sflush_r+0x11c>
		{
		  int result = EOF;
 2008964:	00bfffc4 	movi	r2,-1
 2008968:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200896c:	e0bffb17 	ldw	r2,-20(fp)
 2008970:	10800017 	ldw	r2,0(r2)
 2008974:	10800760 	cmpeqi	r2,r2,29
 2008978:	1000041e 	bne	r2,zero,200898c <__sflush_r+0xf4>
 200897c:	e0bffb17 	ldw	r2,-20(fp)
 2008980:	10800017 	ldw	r2,0(r2)
 2008984:	10800598 	cmpnei	r2,r2,22
 2008988:	1000051e 	bne	r2,zero,20089a0 <__sflush_r+0x108>
		    {
		      result = 0;
 200898c:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 2008990:	e0bffb17 	ldw	r2,-20(fp)
 2008994:	e0fffa17 	ldw	r3,-24(fp)
 2008998:	10c00015 	stw	r3,0(r2)
 200899c:	00000306 	br	20089ac <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 20089a0:	8080030b 	ldhu	r2,12(r16)
 20089a4:	10801014 	ori	r2,r2,64
 20089a8:	8080030d 	sth	r2,12(r16)
		  return result;
 20089ac:	e0bff817 	ldw	r2,-32(fp)
 20089b0:	00007106 	br	2008b78 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 20089b4:	8080030b 	ldhu	r2,12(r16)
 20089b8:	10bfffcc 	andi	r2,r2,65535
 20089bc:	1080010c 	andi	r2,r2,4
 20089c0:	10000a26 	beq	r2,zero,20089ec <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 20089c4:	80800117 	ldw	r2,4(r16)
 20089c8:	e0fff717 	ldw	r3,-36(fp)
 20089cc:	1885c83a 	sub	r2,r3,r2
 20089d0:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 20089d4:	80800c17 	ldw	r2,48(r16)
 20089d8:	10000426 	beq	r2,zero,20089ec <__sflush_r+0x154>
                curoff -= fp->_ur;
 20089dc:	80800f17 	ldw	r2,60(r16)
 20089e0:	e0fff717 	ldw	r3,-36(fp)
 20089e4:	1885c83a 	sub	r2,r3,r2
 20089e8:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 20089ec:	80800a17 	ldw	r2,40(r16)
 20089f0:	80c00717 	ldw	r3,28(r16)
 20089f4:	000f883a 	mov	r7,zero
 20089f8:	e1bff717 	ldw	r6,-36(fp)
 20089fc:	180b883a 	mov	r5,r3
 2008a00:	e13ffb17 	ldw	r4,-20(fp)
 2008a04:	103ee83a 	callr	r2
 2008a08:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 2008a0c:	e0bff717 	ldw	r2,-36(fp)
 2008a10:	10bfffd8 	cmpnei	r2,r2,-1
 2008a14:	10000b1e 	bne	r2,zero,2008a44 <__sflush_r+0x1ac>
 2008a18:	e0bffb17 	ldw	r2,-20(fp)
 2008a1c:	10800017 	ldw	r2,0(r2)
 2008a20:	10000826 	beq	r2,zero,2008a44 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 2008a24:	e0bffb17 	ldw	r2,-20(fp)
 2008a28:	10800017 	ldw	r2,0(r2)
 2008a2c:	10800760 	cmpeqi	r2,r2,29
 2008a30:	1000041e 	bne	r2,zero,2008a44 <__sflush_r+0x1ac>
 2008a34:	e0bffb17 	ldw	r2,-20(fp)
 2008a38:	10800017 	ldw	r2,0(r2)
 2008a3c:	10800598 	cmpnei	r2,r2,22
 2008a40:	1000211e 	bne	r2,zero,2008ac8 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 2008a44:	80c0030b 	ldhu	r3,12(r16)
 2008a48:	00bdffc4 	movi	r2,-2049
 2008a4c:	1884703a 	and	r2,r3,r2
 2008a50:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 2008a54:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 2008a58:	80800417 	ldw	r2,16(r16)
 2008a5c:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 2008a60:	8080030b 	ldhu	r2,12(r16)
 2008a64:	10bfffcc 	andi	r2,r2,65535
 2008a68:	1084000c 	andi	r2,r2,4096
 2008a6c:	10000826 	beq	r2,zero,2008a90 <__sflush_r+0x1f8>
 2008a70:	e0bff717 	ldw	r2,-36(fp)
 2008a74:	10bfffd8 	cmpnei	r2,r2,-1
 2008a78:	1000031e 	bne	r2,zero,2008a88 <__sflush_r+0x1f0>
 2008a7c:	e0bffb17 	ldw	r2,-20(fp)
 2008a80:	10800017 	ldw	r2,0(r2)
 2008a84:	1000021e 	bne	r2,zero,2008a90 <__sflush_r+0x1f8>
		fp->_offset = curoff;
 2008a88:	e0bff717 	ldw	r2,-36(fp)
 2008a8c:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 2008a90:	e0bffb17 	ldw	r2,-20(fp)
 2008a94:	e0fffa17 	ldw	r3,-24(fp)
 2008a98:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 2008a9c:	80800c17 	ldw	r2,48(r16)
 2008aa0:	10000e26 	beq	r2,zero,2008adc <__sflush_r+0x244>
		FREEUB (ptr, fp);
 2008aa4:	80c00c17 	ldw	r3,48(r16)
 2008aa8:	80801004 	addi	r2,r16,64
 2008aac:	18800426 	beq	r3,r2,2008ac0 <__sflush_r+0x228>
 2008ab0:	80800c17 	ldw	r2,48(r16)
 2008ab4:	100b883a 	mov	r5,r2
 2008ab8:	e13ffb17 	ldw	r4,-20(fp)
 2008abc:	200923c0 	call	200923c <_free_r>
 2008ac0:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 2008ac4:	00000506 	br	2008adc <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 2008ac8:	8080030b 	ldhu	r2,12(r16)
 2008acc:	10801014 	ori	r2,r2,64
 2008ad0:	8080030d 	sth	r2,12(r16)
	      return EOF;
 2008ad4:	00bfffc4 	movi	r2,-1
 2008ad8:	00002706 	br	2008b78 <__sflush_r+0x2e0>
	    }
	}
      return 0;
 2008adc:	0005883a 	mov	r2,zero
 2008ae0:	00002506 	br	2008b78 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 2008ae4:	84400417 	ldw	r17,16(r16)
 2008ae8:	8800021e 	bne	r17,zero,2008af4 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 2008aec:	0005883a 	mov	r2,zero
 2008af0:	00002106 	br	2008b78 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 2008af4:	80800017 	ldw	r2,0(r16)
 2008af8:	1007883a 	mov	r3,r2
 2008afc:	8805883a 	mov	r2,r17
 2008b00:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 2008b04:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 2008b08:	e0bff90b 	ldhu	r2,-28(fp)
 2008b0c:	10bfffcc 	andi	r2,r2,65535
 2008b10:	108000cc 	andi	r2,r2,3
 2008b14:	1000021e 	bne	r2,zero,2008b20 <__sflush_r+0x288>
 2008b18:	80800517 	ldw	r2,20(r16)
 2008b1c:	00000106 	br	2008b24 <__sflush_r+0x28c>
 2008b20:	0005883a 	mov	r2,zero
 2008b24:	80800215 	stw	r2,8(r16)

  while (n > 0)
 2008b28:	00001106 	br	2008b70 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 2008b2c:	80800917 	ldw	r2,36(r16)
 2008b30:	80c00717 	ldw	r3,28(r16)
 2008b34:	900f883a 	mov	r7,r18
 2008b38:	880d883a 	mov	r6,r17
 2008b3c:	180b883a 	mov	r5,r3
 2008b40:	e13ffb17 	ldw	r4,-20(fp)
 2008b44:	103ee83a 	callr	r2
 2008b48:	1027883a 	mov	r19,r2
      if (t <= 0)
 2008b4c:	04c00516 	blt	zero,r19,2008b64 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 2008b50:	8080030b 	ldhu	r2,12(r16)
 2008b54:	10801014 	ori	r2,r2,64
 2008b58:	8080030d 	sth	r2,12(r16)
          return EOF;
 2008b5c:	00bfffc4 	movi	r2,-1
 2008b60:	00000506 	br	2008b78 <__sflush_r+0x2e0>
	}
      p += t;
 2008b64:	9805883a 	mov	r2,r19
 2008b68:	88a3883a 	add	r17,r17,r2
      n -= t;
 2008b6c:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 2008b70:	04bfee16 	blt	zero,r18,2008b2c <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 2008b74:	0005883a 	mov	r2,zero
}
 2008b78:	e6fffc04 	addi	sp,fp,-16
 2008b7c:	dfc00517 	ldw	ra,20(sp)
 2008b80:	df000417 	ldw	fp,16(sp)
 2008b84:	dcc00317 	ldw	r19,12(sp)
 2008b88:	dc800217 	ldw	r18,8(sp)
 2008b8c:	dc400117 	ldw	r17,4(sp)
 2008b90:	dc000017 	ldw	r16,0(sp)
 2008b94:	dec00604 	addi	sp,sp,24
 2008b98:	f800283a 	ret

02008b9c <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2008b9c:	defffa04 	addi	sp,sp,-24
 2008ba0:	dfc00515 	stw	ra,20(sp)
 2008ba4:	df000415 	stw	fp,16(sp)
 2008ba8:	dc000315 	stw	r16,12(sp)
 2008bac:	df000404 	addi	fp,sp,16
 2008bb0:	e13ffe15 	stw	r4,-8(fp)
 2008bb4:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 2008bb8:	e0bffe17 	ldw	r2,-8(fp)
 2008bbc:	e0bffc15 	stw	r2,-16(fp)
 2008bc0:	e0bffc17 	ldw	r2,-16(fp)
 2008bc4:	10000526 	beq	r2,zero,2008bdc <_fflush_r+0x40>
 2008bc8:	e0bffc17 	ldw	r2,-16(fp)
 2008bcc:	10800e17 	ldw	r2,56(r2)
 2008bd0:	1000021e 	bne	r2,zero,2008bdc <_fflush_r+0x40>
 2008bd4:	e13ffc17 	ldw	r4,-16(fp)
 2008bd8:	200901c0 	call	200901c <__sinit>

  if (!fp->_flags)
 2008bdc:	8080030b 	ldhu	r2,12(r16)
 2008be0:	10bfffcc 	andi	r2,r2,65535
 2008be4:	10a0001c 	xori	r2,r2,32768
 2008be8:	10a00004 	addi	r2,r2,-32768
 2008bec:	1000021e 	bne	r2,zero,2008bf8 <_fflush_r+0x5c>
    return 0;
 2008bf0:	0005883a 	mov	r2,zero
 2008bf4:	00000506 	br	2008c0c <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 2008bf8:	800b883a 	mov	r5,r16
 2008bfc:	e13ffe17 	ldw	r4,-8(fp)
 2008c00:	20088980 	call	2008898 <__sflush_r>
 2008c04:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 2008c08:	e0bffd17 	ldw	r2,-12(fp)
}
 2008c0c:	e6ffff04 	addi	sp,fp,-4
 2008c10:	dfc00217 	ldw	ra,8(sp)
 2008c14:	df000117 	ldw	fp,4(sp)
 2008c18:	dc000017 	ldw	r16,0(sp)
 2008c1c:	dec00304 	addi	sp,sp,12
 2008c20:	f800283a 	ret

02008c24 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 2008c24:	defffe04 	addi	sp,sp,-8
 2008c28:	dfc00115 	stw	ra,4(sp)
 2008c2c:	df000015 	stw	fp,0(sp)
 2008c30:	d839883a 	mov	fp,sp
 2008c34:	2005883a 	mov	r2,r4
  if (fp == NULL)
 2008c38:	1000061e 	bne	r2,zero,2008c54 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 2008c3c:	d0a00617 	ldw	r2,-32744(gp)
 2008c40:	01408074 	movhi	r5,513
 2008c44:	2962e704 	addi	r5,r5,-29796
 2008c48:	1009883a 	mov	r4,r2
 2008c4c:	200a01c0 	call	200a01c <_fwalk_reent>
 2008c50:	00000406 	br	2008c64 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 2008c54:	d0e00517 	ldw	r3,-32748(gp)
 2008c58:	100b883a 	mov	r5,r2
 2008c5c:	1809883a 	mov	r4,r3
 2008c60:	2008b9c0 	call	2008b9c <_fflush_r>
}
 2008c64:	e037883a 	mov	sp,fp
 2008c68:	dfc00117 	ldw	ra,4(sp)
 2008c6c:	df000017 	ldw	fp,0(sp)
 2008c70:	dec00204 	addi	sp,sp,8
 2008c74:	f800283a 	ret

02008c78 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 2008c78:	defffa04 	addi	sp,sp,-24
 2008c7c:	dfc00515 	stw	ra,20(sp)
 2008c80:	df000415 	stw	fp,16(sp)
 2008c84:	df000404 	addi	fp,sp,16
 2008c88:	e13ffc15 	stw	r4,-16(fp)
 2008c8c:	e17ffd15 	stw	r5,-12(fp)
 2008c90:	e1bffe15 	stw	r6,-8(fp)
 2008c94:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 2008c98:	e0bffc17 	ldw	r2,-16(fp)
 2008c9c:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 2008ca0:	e0bffc17 	ldw	r2,-16(fp)
 2008ca4:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 2008ca8:	e0bffc17 	ldw	r2,-16(fp)
 2008cac:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 2008cb0:	e0bffd17 	ldw	r2,-12(fp)
 2008cb4:	1007883a 	mov	r3,r2
 2008cb8:	e0bffc17 	ldw	r2,-16(fp)
 2008cbc:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 2008cc0:	e0bffc17 	ldw	r2,-16(fp)
 2008cc4:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 2008cc8:	e0bffe17 	ldw	r2,-8(fp)
 2008ccc:	1007883a 	mov	r3,r2
 2008cd0:	e0bffc17 	ldw	r2,-16(fp)
 2008cd4:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 2008cd8:	e0bffc17 	ldw	r2,-16(fp)
 2008cdc:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 2008ce0:	e0bffc17 	ldw	r2,-16(fp)
 2008ce4:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 2008ce8:	e0bffc17 	ldw	r2,-16(fp)
 2008cec:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 2008cf0:	e0bffc17 	ldw	r2,-16(fp)
 2008cf4:	10801704 	addi	r2,r2,92
 2008cf8:	01800204 	movi	r6,8
 2008cfc:	000b883a 	mov	r5,zero
 2008d00:	1009883a 	mov	r4,r2
 2008d04:	200b9440 	call	200b944 <memset>
  ptr->_cookie = ptr;
 2008d08:	e0bffc17 	ldw	r2,-16(fp)
 2008d0c:	e0fffc17 	ldw	r3,-16(fp)
 2008d10:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 2008d14:	e0fffc17 	ldw	r3,-16(fp)
 2008d18:	00808074 	movhi	r2,513
 2008d1c:	10b87404 	addi	r2,r2,-7728
 2008d20:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 2008d24:	e0fffc17 	ldw	r3,-16(fp)
 2008d28:	00808074 	movhi	r2,513
 2008d2c:	10b8a704 	addi	r2,r2,-7524
 2008d30:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 2008d34:	e0fffc17 	ldw	r3,-16(fp)
 2008d38:	00808074 	movhi	r2,513
 2008d3c:	10b8d404 	addi	r2,r2,-7344
 2008d40:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 2008d44:	e0fffc17 	ldw	r3,-16(fp)
 2008d48:	00808074 	movhi	r2,513
 2008d4c:	10b8fc04 	addi	r2,r2,-7184
 2008d50:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 2008d54:	0001883a 	nop
 2008d58:	e037883a 	mov	sp,fp
 2008d5c:	dfc00117 	ldw	ra,4(sp)
 2008d60:	df000017 	ldw	fp,0(sp)
 2008d64:	dec00204 	addi	sp,sp,8
 2008d68:	f800283a 	ret

02008d6c <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 2008d6c:	defffb04 	addi	sp,sp,-20
 2008d70:	dfc00415 	stw	ra,16(sp)
 2008d74:	df000315 	stw	fp,12(sp)
 2008d78:	dc000215 	stw	r16,8(sp)
 2008d7c:	df000304 	addi	fp,sp,12
 2008d80:	e13ffe15 	stw	r4,-8(fp)
 2008d84:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 2008d88:	80bfffc4 	addi	r2,r16,-1
 2008d8c:	10801a24 	muli	r2,r2,104
 2008d90:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 2008d94:	100b883a 	mov	r5,r2
 2008d98:	e13ffe17 	ldw	r4,-8(fp)
 2008d9c:	200a87c0 	call	200a87c <_malloc_r>
 2008da0:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 2008da4:	e0bffd17 	ldw	r2,-12(fp)
 2008da8:	1000021e 	bne	r2,zero,2008db4 <__sfmoreglue+0x48>
    return NULL;
 2008dac:	0005883a 	mov	r2,zero
 2008db0:	00001106 	br	2008df8 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 2008db4:	e0bffd17 	ldw	r2,-12(fp)
 2008db8:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 2008dbc:	e0bffd17 	ldw	r2,-12(fp)
 2008dc0:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 2008dc4:	e0bffd17 	ldw	r2,-12(fp)
 2008dc8:	10c00304 	addi	r3,r2,12
 2008dcc:	e0bffd17 	ldw	r2,-12(fp)
 2008dd0:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 2008dd4:	e0bffd17 	ldw	r2,-12(fp)
 2008dd8:	10800304 	addi	r2,r2,12
 2008ddc:	8007883a 	mov	r3,r16
 2008de0:	18c01a24 	muli	r3,r3,104
 2008de4:	180d883a 	mov	r6,r3
 2008de8:	000b883a 	mov	r5,zero
 2008dec:	1009883a 	mov	r4,r2
 2008df0:	200b9440 	call	200b944 <memset>
  return &g->glue;
 2008df4:	e0bffd17 	ldw	r2,-12(fp)
}
 2008df8:	e6ffff04 	addi	sp,fp,-4
 2008dfc:	dfc00217 	ldw	ra,8(sp)
 2008e00:	df000117 	ldw	fp,4(sp)
 2008e04:	dc000017 	ldw	r16,0(sp)
 2008e08:	dec00304 	addi	sp,sp,12
 2008e0c:	f800283a 	ret

02008e10 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 2008e10:	defffa04 	addi	sp,sp,-24
 2008e14:	dfc00515 	stw	ra,20(sp)
 2008e18:	df000415 	stw	fp,16(sp)
 2008e1c:	df000404 	addi	fp,sp,16
 2008e20:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 2008e24:	20090f40 	call	20090f4 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 2008e28:	d0a00617 	ldw	r2,-32744(gp)
 2008e2c:	10800e17 	ldw	r2,56(r2)
 2008e30:	1000031e 	bne	r2,zero,2008e40 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 2008e34:	d0a00617 	ldw	r2,-32744(gp)
 2008e38:	1009883a 	mov	r4,r2
 2008e3c:	200901c0 	call	200901c <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 2008e40:	d0a00617 	ldw	r2,-32744(gp)
 2008e44:	1080b804 	addi	r2,r2,736
 2008e48:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2008e4c:	e0bffe17 	ldw	r2,-8(fp)
 2008e50:	10800217 	ldw	r2,8(r2)
 2008e54:	e0bffc15 	stw	r2,-16(fp)
 2008e58:	e0bffe17 	ldw	r2,-8(fp)
 2008e5c:	10800117 	ldw	r2,4(r2)
 2008e60:	e0bffd15 	stw	r2,-12(fp)
 2008e64:	00000906 	br	2008e8c <__sfp+0x7c>
	if (fp->_flags == 0)
 2008e68:	e0bffc17 	ldw	r2,-16(fp)
 2008e6c:	1080030b 	ldhu	r2,12(r2)
 2008e70:	10bfffcc 	andi	r2,r2,65535
 2008e74:	10a0001c 	xori	r2,r2,32768
 2008e78:	10a00004 	addi	r2,r2,-32768
 2008e7c:	10001f26 	beq	r2,zero,2008efc <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2008e80:	e0bffc17 	ldw	r2,-16(fp)
 2008e84:	10801a04 	addi	r2,r2,104
 2008e88:	e0bffc15 	stw	r2,-16(fp)
 2008e8c:	e0bffd17 	ldw	r2,-12(fp)
 2008e90:	10bfffc4 	addi	r2,r2,-1
 2008e94:	e0bffd15 	stw	r2,-12(fp)
 2008e98:	e0bffd17 	ldw	r2,-12(fp)
 2008e9c:	103ff20e 	bge	r2,zero,2008e68 <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2008ea0:	e0bffe17 	ldw	r2,-8(fp)
 2008ea4:	10800017 	ldw	r2,0(r2)
 2008ea8:	1000091e 	bne	r2,zero,2008ed0 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 2008eac:	01400104 	movi	r5,4
 2008eb0:	e13fff17 	ldw	r4,-4(fp)
 2008eb4:	2008d6c0 	call	2008d6c <__sfmoreglue>
 2008eb8:	1007883a 	mov	r3,r2
 2008ebc:	e0bffe17 	ldw	r2,-8(fp)
 2008ec0:	10c00015 	stw	r3,0(r2)
 2008ec4:	e0bffe17 	ldw	r2,-8(fp)
 2008ec8:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2008ecc:	10000426 	beq	r2,zero,2008ee0 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 2008ed0:	e0bffe17 	ldw	r2,-8(fp)
 2008ed4:	10800017 	ldw	r2,0(r2)
 2008ed8:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 2008edc:	003fdb06 	br	2008e4c <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 2008ee0:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 2008ee4:	20091140 	call	2009114 <__sfp_lock_release>
  d->_errno = ENOMEM;
 2008ee8:	e0bfff17 	ldw	r2,-4(fp)
 2008eec:	00c00304 	movi	r3,12
 2008ef0:	10c00015 	stw	r3,0(r2)
  return NULL;
 2008ef4:	0005883a 	mov	r2,zero
 2008ef8:	00002506 	br	2008f90 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 2008efc:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 2008f00:	e0bffc17 	ldw	r2,-16(fp)
 2008f04:	00ffffc4 	movi	r3,-1
 2008f08:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 2008f0c:	e0bffc17 	ldw	r2,-16(fp)
 2008f10:	00c00044 	movi	r3,1
 2008f14:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 2008f18:	e0bffc17 	ldw	r2,-16(fp)
 2008f1c:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 2008f20:	20091140 	call	2009114 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 2008f24:	e0bffc17 	ldw	r2,-16(fp)
 2008f28:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 2008f2c:	e0bffc17 	ldw	r2,-16(fp)
 2008f30:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 2008f34:	e0bffc17 	ldw	r2,-16(fp)
 2008f38:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 2008f3c:	e0bffc17 	ldw	r2,-16(fp)
 2008f40:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 2008f44:	e0bffc17 	ldw	r2,-16(fp)
 2008f48:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 2008f4c:	e0bffc17 	ldw	r2,-16(fp)
 2008f50:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 2008f54:	e0bffc17 	ldw	r2,-16(fp)
 2008f58:	10801704 	addi	r2,r2,92
 2008f5c:	01800204 	movi	r6,8
 2008f60:	000b883a 	mov	r5,zero
 2008f64:	1009883a 	mov	r4,r2
 2008f68:	200b9440 	call	200b944 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 2008f6c:	e0bffc17 	ldw	r2,-16(fp)
 2008f70:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 2008f74:	e0bffc17 	ldw	r2,-16(fp)
 2008f78:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 2008f7c:	e0bffc17 	ldw	r2,-16(fp)
 2008f80:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 2008f84:	e0bffc17 	ldw	r2,-16(fp)
 2008f88:	10001215 	stw	zero,72(r2)

  return fp;
 2008f8c:	e0bffc17 	ldw	r2,-16(fp)
}
 2008f90:	e037883a 	mov	sp,fp
 2008f94:	dfc00117 	ldw	ra,4(sp)
 2008f98:	df000017 	ldw	fp,0(sp)
 2008f9c:	dec00204 	addi	sp,sp,8
 2008fa0:	f800283a 	ret

02008fa4 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 2008fa4:	defffc04 	addi	sp,sp,-16
 2008fa8:	dfc00315 	stw	ra,12(sp)
 2008fac:	df000215 	stw	fp,8(sp)
 2008fb0:	df000204 	addi	fp,sp,8
 2008fb4:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 2008fb8:	00808074 	movhi	r2,513
 2008fbc:	10bf3e04 	addi	r2,r2,-776
 2008fc0:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 2008fc4:	e17ffe17 	ldw	r5,-8(fp)
 2008fc8:	e13fff17 	ldw	r4,-4(fp)
 2008fcc:	200a01c0 	call	200a01c <_fwalk_reent>
}
 2008fd0:	0001883a 	nop
 2008fd4:	e037883a 	mov	sp,fp
 2008fd8:	dfc00117 	ldw	ra,4(sp)
 2008fdc:	df000017 	ldw	fp,0(sp)
 2008fe0:	dec00204 	addi	sp,sp,8
 2008fe4:	f800283a 	ret

02008fe8 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 2008fe8:	defffe04 	addi	sp,sp,-8
 2008fec:	dfc00115 	stw	ra,4(sp)
 2008ff0:	df000015 	stw	fp,0(sp)
 2008ff4:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 2008ff8:	d0a00617 	ldw	r2,-32744(gp)
 2008ffc:	1009883a 	mov	r4,r2
 2009000:	2008fa40 	call	2008fa4 <_cleanup_r>
}
 2009004:	0001883a 	nop
 2009008:	e037883a 	mov	sp,fp
 200900c:	dfc00117 	ldw	ra,4(sp)
 2009010:	df000017 	ldw	fp,0(sp)
 2009014:	dec00204 	addi	sp,sp,8
 2009018:	f800283a 	ret

0200901c <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 200901c:	defffd04 	addi	sp,sp,-12
 2009020:	dfc00215 	stw	ra,8(sp)
 2009024:	df000115 	stw	fp,4(sp)
 2009028:	df000104 	addi	fp,sp,4
 200902c:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 2009030:	20091340 	call	2009134 <__sinit_lock_acquire>

  if (s->__sdidinit)
 2009034:	e0bfff17 	ldw	r2,-4(fp)
 2009038:	10800e17 	ldw	r2,56(r2)
 200903c:	10000226 	beq	r2,zero,2009048 <__sinit+0x2c>
    {
      __sinit_lock_release ();
 2009040:	20091540 	call	2009154 <__sinit_lock_release>
      return;
 2009044:	00002606 	br	20090e0 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 2009048:	e0ffff17 	ldw	r3,-4(fp)
 200904c:	00808074 	movhi	r2,513
 2009050:	10a3e904 	addi	r2,r2,-28764
 2009054:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 2009058:	e0bfff17 	ldw	r2,-4(fp)
 200905c:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 2009060:	e0bfff17 	ldw	r2,-4(fp)
 2009064:	00c000c4 	movi	r3,3
 2009068:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 200906c:	e0bfff17 	ldw	r2,-4(fp)
 2009070:	10c0bb04 	addi	r3,r2,748
 2009074:	e0bfff17 	ldw	r2,-4(fp)
 2009078:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 200907c:	e0bfff17 	ldw	r2,-4(fp)
 2009080:	10800117 	ldw	r2,4(r2)
 2009084:	e1ffff17 	ldw	r7,-4(fp)
 2009088:	000d883a 	mov	r6,zero
 200908c:	01400104 	movi	r5,4
 2009090:	1009883a 	mov	r4,r2
 2009094:	2008c780 	call	2008c78 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 2009098:	e0bfff17 	ldw	r2,-4(fp)
 200909c:	10800217 	ldw	r2,8(r2)
 20090a0:	e1ffff17 	ldw	r7,-4(fp)
 20090a4:	01800044 	movi	r6,1
 20090a8:	01400284 	movi	r5,10
 20090ac:	1009883a 	mov	r4,r2
 20090b0:	2008c780 	call	2008c78 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 20090b4:	e0bfff17 	ldw	r2,-4(fp)
 20090b8:	10800317 	ldw	r2,12(r2)
 20090bc:	e1ffff17 	ldw	r7,-4(fp)
 20090c0:	01800084 	movi	r6,2
 20090c4:	01400484 	movi	r5,18
 20090c8:	1009883a 	mov	r4,r2
 20090cc:	2008c780 	call	2008c78 <std>

  s->__sdidinit = 1;
 20090d0:	e0bfff17 	ldw	r2,-4(fp)
 20090d4:	00c00044 	movi	r3,1
 20090d8:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 20090dc:	20091540 	call	2009154 <__sinit_lock_release>
}
 20090e0:	e037883a 	mov	sp,fp
 20090e4:	dfc00117 	ldw	ra,4(sp)
 20090e8:	df000017 	ldw	fp,0(sp)
 20090ec:	dec00204 	addi	sp,sp,8
 20090f0:	f800283a 	ret

020090f4 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 20090f4:	deffff04 	addi	sp,sp,-4
 20090f8:	df000015 	stw	fp,0(sp)
 20090fc:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 2009100:	0001883a 	nop
 2009104:	e037883a 	mov	sp,fp
 2009108:	df000017 	ldw	fp,0(sp)
 200910c:	dec00104 	addi	sp,sp,4
 2009110:	f800283a 	ret

02009114 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 2009114:	deffff04 	addi	sp,sp,-4
 2009118:	df000015 	stw	fp,0(sp)
 200911c:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 2009120:	0001883a 	nop
 2009124:	e037883a 	mov	sp,fp
 2009128:	df000017 	ldw	fp,0(sp)
 200912c:	dec00104 	addi	sp,sp,4
 2009130:	f800283a 	ret

02009134 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 2009134:	deffff04 	addi	sp,sp,-4
 2009138:	df000015 	stw	fp,0(sp)
 200913c:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 2009140:	0001883a 	nop
 2009144:	e037883a 	mov	sp,fp
 2009148:	df000017 	ldw	fp,0(sp)
 200914c:	dec00104 	addi	sp,sp,4
 2009150:	f800283a 	ret

02009154 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 2009154:	deffff04 	addi	sp,sp,-4
 2009158:	df000015 	stw	fp,0(sp)
 200915c:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 2009160:	0001883a 	nop
 2009164:	e037883a 	mov	sp,fp
 2009168:	df000017 	ldw	fp,0(sp)
 200916c:	dec00104 	addi	sp,sp,4
 2009170:	f800283a 	ret

02009174 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 2009174:	defffe04 	addi	sp,sp,-8
 2009178:	df000115 	stw	fp,4(sp)
 200917c:	df000104 	addi	fp,sp,4
 2009180:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 2009184:	0005883a 	mov	r2,zero
}
 2009188:	e037883a 	mov	sp,fp
 200918c:	df000017 	ldw	fp,0(sp)
 2009190:	dec00104 	addi	sp,sp,4
 2009194:	f800283a 	ret

02009198 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 2009198:	defffe04 	addi	sp,sp,-8
 200919c:	df000115 	stw	fp,4(sp)
 20091a0:	df000104 	addi	fp,sp,4
 20091a4:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 20091a8:	0005883a 	mov	r2,zero
}
 20091ac:	e037883a 	mov	sp,fp
 20091b0:	df000017 	ldw	fp,0(sp)
 20091b4:	dec00104 	addi	sp,sp,4
 20091b8:	f800283a 	ret

020091bc <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 20091bc:	defffe04 	addi	sp,sp,-8
 20091c0:	dfc00115 	stw	ra,4(sp)
 20091c4:	df000015 	stw	fp,0(sp)
 20091c8:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 20091cc:	20090f40 	call	20090f4 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 20091d0:	d0a00517 	ldw	r2,-32748(gp)
 20091d4:	01408074 	movhi	r5,513
 20091d8:	29645d04 	addi	r5,r5,-28300
 20091dc:	1009883a 	mov	r4,r2
 20091e0:	2009f440 	call	2009f44 <_fwalk>
}
 20091e4:	0001883a 	nop
 20091e8:	e037883a 	mov	sp,fp
 20091ec:	dfc00117 	ldw	ra,4(sp)
 20091f0:	df000017 	ldw	fp,0(sp)
 20091f4:	dec00204 	addi	sp,sp,8
 20091f8:	f800283a 	ret

020091fc <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 20091fc:	defffe04 	addi	sp,sp,-8
 2009200:	dfc00115 	stw	ra,4(sp)
 2009204:	df000015 	stw	fp,0(sp)
 2009208:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 200920c:	d0a00517 	ldw	r2,-32748(gp)
 2009210:	01408074 	movhi	r5,513
 2009214:	29646604 	addi	r5,r5,-28264
 2009218:	1009883a 	mov	r4,r2
 200921c:	2009f440 	call	2009f44 <_fwalk>

  __sfp_lock_release ();
 2009220:	20091140 	call	2009114 <__sfp_lock_release>
}
 2009224:	0001883a 	nop
 2009228:	e037883a 	mov	sp,fp
 200922c:	dfc00117 	ldw	ra,4(sp)
 2009230:	df000017 	ldw	fp,0(sp)
 2009234:	dec00204 	addi	sp,sp,8
 2009238:	f800283a 	ret

0200923c <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 200923c:	defff204 	addi	sp,sp,-56
 2009240:	dfc00d15 	stw	ra,52(sp)
 2009244:	df000c15 	stw	fp,48(sp)
 2009248:	df000c04 	addi	fp,sp,48
 200924c:	e13ffe15 	stw	r4,-8(fp)
 2009250:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 2009254:	e0bfff17 	ldw	r2,-4(fp)
 2009258:	10014a26 	beq	r2,zero,2009784 <_free_r+0x548>
    return;

  MALLOC_LOCK;
 200925c:	e13ffe17 	ldw	r4,-8(fp)
 2009260:	2011cd00 	call	2011cd0 <__malloc_lock>

  p = mem2chunk(mem);
 2009264:	e0bfff17 	ldw	r2,-4(fp)
 2009268:	10bffe04 	addi	r2,r2,-8
 200926c:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 2009270:	e0bff417 	ldw	r2,-48(fp)
 2009274:	10800117 	ldw	r2,4(r2)
 2009278:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 200927c:	e0fff917 	ldw	r3,-28(fp)
 2009280:	00bfff84 	movi	r2,-2
 2009284:	1884703a 	and	r2,r3,r2
 2009288:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 200928c:	e0fff417 	ldw	r3,-48(fp)
 2009290:	e0bff517 	ldw	r2,-44(fp)
 2009294:	1885883a 	add	r2,r3,r2
 2009298:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 200929c:	e0bffa17 	ldw	r2,-24(fp)
 20092a0:	10c00117 	ldw	r3,4(r2)
 20092a4:	00bfff04 	movi	r2,-4
 20092a8:	1884703a 	and	r2,r3,r2
 20092ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 20092b0:	008080b4 	movhi	r2,514
 20092b4:	10b45c04 	addi	r2,r2,-11920
 20092b8:	10c00217 	ldw	r3,8(r2)
 20092bc:	e0bffa17 	ldw	r2,-24(fp)
 20092c0:	1880311e 	bne	r3,r2,2009388 <_free_r+0x14c>
  {
    sz += nextsz;
 20092c4:	e0fff517 	ldw	r3,-44(fp)
 20092c8:	e0bffb17 	ldw	r2,-20(fp)
 20092cc:	1885883a 	add	r2,r3,r2
 20092d0:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 20092d4:	e0bff917 	ldw	r2,-28(fp)
 20092d8:	1080004c 	andi	r2,r2,1
 20092dc:	1000181e 	bne	r2,zero,2009340 <_free_r+0x104>
    {
      prevsz = p->prev_size;
 20092e0:	e0bff417 	ldw	r2,-48(fp)
 20092e4:	10800017 	ldw	r2,0(r2)
 20092e8:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 20092ec:	e0bffc17 	ldw	r2,-16(fp)
 20092f0:	0085c83a 	sub	r2,zero,r2
 20092f4:	e0fff417 	ldw	r3,-48(fp)
 20092f8:	1885883a 	add	r2,r3,r2
 20092fc:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 2009300:	e0fff517 	ldw	r3,-44(fp)
 2009304:	e0bffc17 	ldw	r2,-16(fp)
 2009308:	1885883a 	add	r2,r3,r2
 200930c:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 2009310:	e0bff417 	ldw	r2,-48(fp)
 2009314:	10800317 	ldw	r2,12(r2)
 2009318:	e0bff615 	stw	r2,-40(fp)
 200931c:	e0bff417 	ldw	r2,-48(fp)
 2009320:	10800217 	ldw	r2,8(r2)
 2009324:	e0bff715 	stw	r2,-36(fp)
 2009328:	e0bff717 	ldw	r2,-36(fp)
 200932c:	e0fff617 	ldw	r3,-40(fp)
 2009330:	10c00315 	stw	r3,12(r2)
 2009334:	e0bff617 	ldw	r2,-40(fp)
 2009338:	e0fff717 	ldw	r3,-36(fp)
 200933c:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 2009340:	e0bff517 	ldw	r2,-44(fp)
 2009344:	10c00054 	ori	r3,r2,1
 2009348:	e0bff417 	ldw	r2,-48(fp)
 200934c:	10c00115 	stw	r3,4(r2)
    top = p;
 2009350:	008080b4 	movhi	r2,514
 2009354:	10b45c04 	addi	r2,r2,-11920
 2009358:	e0fff417 	ldw	r3,-48(fp)
 200935c:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 2009360:	d0a00817 	ldw	r2,-32736(gp)
 2009364:	e0fff517 	ldw	r3,-44(fp)
 2009368:	18800436 	bltu	r3,r2,200937c <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 200936c:	d0a71f17 	ldw	r2,-25476(gp)
 2009370:	100b883a 	mov	r5,r2
 2009374:	e13ffe17 	ldw	r4,-8(fp)
 2009378:	200979c0 	call	200979c <_malloc_trim_r>
    MALLOC_UNLOCK;
 200937c:	e13ffe17 	ldw	r4,-8(fp)
 2009380:	2011df00 	call	2011df0 <__malloc_unlock>
    return;
 2009384:	00010006 	br	2009788 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 2009388:	e0bffa17 	ldw	r2,-24(fp)
 200938c:	e0fffb17 	ldw	r3,-20(fp)
 2009390:	10c00115 	stw	r3,4(r2)

  islr = 0;
 2009394:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 2009398:	e0bff917 	ldw	r2,-28(fp)
 200939c:	1080004c 	andi	r2,r2,1
 20093a0:	1000201e 	bne	r2,zero,2009424 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 20093a4:	e0bff417 	ldw	r2,-48(fp)
 20093a8:	10800017 	ldw	r2,0(r2)
 20093ac:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 20093b0:	e0bffc17 	ldw	r2,-16(fp)
 20093b4:	0085c83a 	sub	r2,zero,r2
 20093b8:	e0fff417 	ldw	r3,-48(fp)
 20093bc:	1885883a 	add	r2,r3,r2
 20093c0:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 20093c4:	e0fff517 	ldw	r3,-44(fp)
 20093c8:	e0bffc17 	ldw	r2,-16(fp)
 20093cc:	1885883a 	add	r2,r3,r2
 20093d0:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 20093d4:	e0bff417 	ldw	r2,-48(fp)
 20093d8:	10c00217 	ldw	r3,8(r2)
 20093dc:	008080b4 	movhi	r2,514
 20093e0:	10b45e04 	addi	r2,r2,-11912
 20093e4:	1880031e 	bne	r3,r2,20093f4 <_free_r+0x1b8>
      islr = 1;
 20093e8:	00800044 	movi	r2,1
 20093ec:	e0bff815 	stw	r2,-32(fp)
 20093f0:	00000c06 	br	2009424 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 20093f4:	e0bff417 	ldw	r2,-48(fp)
 20093f8:	10800317 	ldw	r2,12(r2)
 20093fc:	e0bff615 	stw	r2,-40(fp)
 2009400:	e0bff417 	ldw	r2,-48(fp)
 2009404:	10800217 	ldw	r2,8(r2)
 2009408:	e0bff715 	stw	r2,-36(fp)
 200940c:	e0bff717 	ldw	r2,-36(fp)
 2009410:	e0fff617 	ldw	r3,-40(fp)
 2009414:	10c00315 	stw	r3,12(r2)
 2009418:	e0bff617 	ldw	r2,-40(fp)
 200941c:	e0fff717 	ldw	r3,-36(fp)
 2009420:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 2009424:	e0fffa17 	ldw	r3,-24(fp)
 2009428:	e0bffb17 	ldw	r2,-20(fp)
 200942c:	1885883a 	add	r2,r3,r2
 2009430:	10800117 	ldw	r2,4(r2)
 2009434:	1080004c 	andi	r2,r2,1
 2009438:	10002a1e 	bne	r2,zero,20094e4 <_free_r+0x2a8>
  {
    sz += nextsz;
 200943c:	e0fff517 	ldw	r3,-44(fp)
 2009440:	e0bffb17 	ldw	r2,-20(fp)
 2009444:	1885883a 	add	r2,r3,r2
 2009448:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 200944c:	e0bff817 	ldw	r2,-32(fp)
 2009450:	1000181e 	bne	r2,zero,20094b4 <_free_r+0x278>
 2009454:	e0bffa17 	ldw	r2,-24(fp)
 2009458:	10c00217 	ldw	r3,8(r2)
 200945c:	008080b4 	movhi	r2,514
 2009460:	10b45e04 	addi	r2,r2,-11912
 2009464:	1880131e 	bne	r3,r2,20094b4 <_free_r+0x278>
    {
      islr = 1;
 2009468:	00800044 	movi	r2,1
 200946c:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 2009470:	00c080b4 	movhi	r3,514
 2009474:	18f45e04 	addi	r3,r3,-11912
 2009478:	008080b4 	movhi	r2,514
 200947c:	10b45e04 	addi	r2,r2,-11912
 2009480:	e13ff417 	ldw	r4,-48(fp)
 2009484:	11000315 	stw	r4,12(r2)
 2009488:	10800317 	ldw	r2,12(r2)
 200948c:	18800215 	stw	r2,8(r3)
 2009490:	008080b4 	movhi	r2,514
 2009494:	10b45e04 	addi	r2,r2,-11912
 2009498:	e0fff417 	ldw	r3,-48(fp)
 200949c:	18800315 	stw	r2,12(r3)
 20094a0:	e0bff417 	ldw	r2,-48(fp)
 20094a4:	10c00317 	ldw	r3,12(r2)
 20094a8:	e0bff417 	ldw	r2,-48(fp)
 20094ac:	10c00215 	stw	r3,8(r2)
 20094b0:	00000c06 	br	20094e4 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 20094b4:	e0bffa17 	ldw	r2,-24(fp)
 20094b8:	10800317 	ldw	r2,12(r2)
 20094bc:	e0bff615 	stw	r2,-40(fp)
 20094c0:	e0bffa17 	ldw	r2,-24(fp)
 20094c4:	10800217 	ldw	r2,8(r2)
 20094c8:	e0bff715 	stw	r2,-36(fp)
 20094cc:	e0bff717 	ldw	r2,-36(fp)
 20094d0:	e0fff617 	ldw	r3,-40(fp)
 20094d4:	10c00315 	stw	r3,12(r2)
 20094d8:	e0bff617 	ldw	r2,-40(fp)
 20094dc:	e0fff717 	ldw	r3,-36(fp)
 20094e0:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 20094e4:	e0bff517 	ldw	r2,-44(fp)
 20094e8:	10c00054 	ori	r3,r2,1
 20094ec:	e0bff417 	ldw	r2,-48(fp)
 20094f0:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 20094f4:	e0fff417 	ldw	r3,-48(fp)
 20094f8:	e0bff517 	ldw	r2,-44(fp)
 20094fc:	1885883a 	add	r2,r3,r2
 2009500:	e0fff517 	ldw	r3,-44(fp)
 2009504:	10c00015 	stw	r3,0(r2)
  if (!islr)
 2009508:	e0bff817 	ldw	r2,-32(fp)
 200950c:	10009a1e 	bne	r2,zero,2009778 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 2009510:	e0bff517 	ldw	r2,-44(fp)
 2009514:	10808028 	cmpgeui	r2,r2,512
 2009518:	10002c1e 	bne	r2,zero,20095cc <_free_r+0x390>
 200951c:	e0bff517 	ldw	r2,-44(fp)
 2009520:	1004d0fa 	srli	r2,r2,3
 2009524:	e0bffd15 	stw	r2,-12(fp)
 2009528:	00c080b4 	movhi	r3,514
 200952c:	18f45c04 	addi	r3,r3,-11920
 2009530:	008080b4 	movhi	r2,514
 2009534:	10b45c04 	addi	r2,r2,-11920
 2009538:	11000117 	ldw	r4,4(r2)
 200953c:	e0bffd17 	ldw	r2,-12(fp)
 2009540:	1000010e 	bge	r2,zero,2009548 <_free_r+0x30c>
 2009544:	108000c4 	addi	r2,r2,3
 2009548:	1005d0ba 	srai	r2,r2,2
 200954c:	100b883a 	mov	r5,r2
 2009550:	00800044 	movi	r2,1
 2009554:	1144983a 	sll	r2,r2,r5
 2009558:	2084b03a 	or	r2,r4,r2
 200955c:	18800115 	stw	r2,4(r3)
 2009560:	e0bffd17 	ldw	r2,-12(fp)
 2009564:	10800044 	addi	r2,r2,1
 2009568:	1085883a 	add	r2,r2,r2
 200956c:	1085883a 	add	r2,r2,r2
 2009570:	1087883a 	add	r3,r2,r2
 2009574:	008080b4 	movhi	r2,514
 2009578:	10b45c04 	addi	r2,r2,-11920
 200957c:	1885883a 	add	r2,r3,r2
 2009580:	10bffe04 	addi	r2,r2,-8
 2009584:	e0bff615 	stw	r2,-40(fp)
 2009588:	e0bff617 	ldw	r2,-40(fp)
 200958c:	10800217 	ldw	r2,8(r2)
 2009590:	e0bff715 	stw	r2,-36(fp)
 2009594:	e0bff417 	ldw	r2,-48(fp)
 2009598:	e0fff617 	ldw	r3,-40(fp)
 200959c:	10c00315 	stw	r3,12(r2)
 20095a0:	e0bff417 	ldw	r2,-48(fp)
 20095a4:	e0fff717 	ldw	r3,-36(fp)
 20095a8:	10c00215 	stw	r3,8(r2)
 20095ac:	e0bff617 	ldw	r2,-40(fp)
 20095b0:	e0fff417 	ldw	r3,-48(fp)
 20095b4:	10c00215 	stw	r3,8(r2)
 20095b8:	e0bff617 	ldw	r2,-40(fp)
 20095bc:	10c00217 	ldw	r3,8(r2)
 20095c0:	e0bff717 	ldw	r2,-36(fp)
 20095c4:	10c00315 	stw	r3,12(r2)
 20095c8:	00006b06 	br	2009778 <_free_r+0x53c>
 20095cc:	e0bff517 	ldw	r2,-44(fp)
 20095d0:	1004d27a 	srli	r2,r2,9
 20095d4:	1000031e 	bne	r2,zero,20095e4 <_free_r+0x3a8>
 20095d8:	e0bff517 	ldw	r2,-44(fp)
 20095dc:	1004d0fa 	srli	r2,r2,3
 20095e0:	00002906 	br	2009688 <_free_r+0x44c>
 20095e4:	e0bff517 	ldw	r2,-44(fp)
 20095e8:	1004d27a 	srli	r2,r2,9
 20095ec:	10800168 	cmpgeui	r2,r2,5
 20095f0:	1000041e 	bne	r2,zero,2009604 <_free_r+0x3c8>
 20095f4:	e0bff517 	ldw	r2,-44(fp)
 20095f8:	1004d1ba 	srli	r2,r2,6
 20095fc:	10800e04 	addi	r2,r2,56
 2009600:	00002106 	br	2009688 <_free_r+0x44c>
 2009604:	e0bff517 	ldw	r2,-44(fp)
 2009608:	1004d27a 	srli	r2,r2,9
 200960c:	10800568 	cmpgeui	r2,r2,21
 2009610:	1000041e 	bne	r2,zero,2009624 <_free_r+0x3e8>
 2009614:	e0bff517 	ldw	r2,-44(fp)
 2009618:	1004d27a 	srli	r2,r2,9
 200961c:	108016c4 	addi	r2,r2,91
 2009620:	00001906 	br	2009688 <_free_r+0x44c>
 2009624:	e0bff517 	ldw	r2,-44(fp)
 2009628:	1004d27a 	srli	r2,r2,9
 200962c:	10801568 	cmpgeui	r2,r2,85
 2009630:	1000041e 	bne	r2,zero,2009644 <_free_r+0x408>
 2009634:	e0bff517 	ldw	r2,-44(fp)
 2009638:	1004d33a 	srli	r2,r2,12
 200963c:	10801b84 	addi	r2,r2,110
 2009640:	00001106 	br	2009688 <_free_r+0x44c>
 2009644:	e0bff517 	ldw	r2,-44(fp)
 2009648:	1004d27a 	srli	r2,r2,9
 200964c:	10805568 	cmpgeui	r2,r2,341
 2009650:	1000041e 	bne	r2,zero,2009664 <_free_r+0x428>
 2009654:	e0bff517 	ldw	r2,-44(fp)
 2009658:	1004d3fa 	srli	r2,r2,15
 200965c:	10801dc4 	addi	r2,r2,119
 2009660:	00000906 	br	2009688 <_free_r+0x44c>
 2009664:	e0bff517 	ldw	r2,-44(fp)
 2009668:	1004d27a 	srli	r2,r2,9
 200966c:	10815568 	cmpgeui	r2,r2,1365
 2009670:	1000041e 	bne	r2,zero,2009684 <_free_r+0x448>
 2009674:	e0bff517 	ldw	r2,-44(fp)
 2009678:	1004d4ba 	srli	r2,r2,18
 200967c:	10801f04 	addi	r2,r2,124
 2009680:	00000106 	br	2009688 <_free_r+0x44c>
 2009684:	00801f84 	movi	r2,126
 2009688:	e0bffd15 	stw	r2,-12(fp)
 200968c:	e0bffd17 	ldw	r2,-12(fp)
 2009690:	10800044 	addi	r2,r2,1
 2009694:	1085883a 	add	r2,r2,r2
 2009698:	1085883a 	add	r2,r2,r2
 200969c:	1087883a 	add	r3,r2,r2
 20096a0:	008080b4 	movhi	r2,514
 20096a4:	10b45c04 	addi	r2,r2,-11920
 20096a8:	1885883a 	add	r2,r3,r2
 20096ac:	10bffe04 	addi	r2,r2,-8
 20096b0:	e0bff615 	stw	r2,-40(fp)
 20096b4:	e0bff617 	ldw	r2,-40(fp)
 20096b8:	10800217 	ldw	r2,8(r2)
 20096bc:	e0bff715 	stw	r2,-36(fp)
 20096c0:	e0fff717 	ldw	r3,-36(fp)
 20096c4:	e0bff617 	ldw	r2,-40(fp)
 20096c8:	1880121e 	bne	r3,r2,2009714 <_free_r+0x4d8>
 20096cc:	00c080b4 	movhi	r3,514
 20096d0:	18f45c04 	addi	r3,r3,-11920
 20096d4:	008080b4 	movhi	r2,514
 20096d8:	10b45c04 	addi	r2,r2,-11920
 20096dc:	11000117 	ldw	r4,4(r2)
 20096e0:	e0bffd17 	ldw	r2,-12(fp)
 20096e4:	1000010e 	bge	r2,zero,20096ec <_free_r+0x4b0>
 20096e8:	108000c4 	addi	r2,r2,3
 20096ec:	1005d0ba 	srai	r2,r2,2
 20096f0:	100b883a 	mov	r5,r2
 20096f4:	00800044 	movi	r2,1
 20096f8:	1144983a 	sll	r2,r2,r5
 20096fc:	2084b03a 	or	r2,r4,r2
 2009700:	18800115 	stw	r2,4(r3)
 2009704:	00000f06 	br	2009744 <_free_r+0x508>
 2009708:	e0bff717 	ldw	r2,-36(fp)
 200970c:	10800217 	ldw	r2,8(r2)
 2009710:	e0bff715 	stw	r2,-36(fp)
 2009714:	e0fff717 	ldw	r3,-36(fp)
 2009718:	e0bff617 	ldw	r2,-40(fp)
 200971c:	18800626 	beq	r3,r2,2009738 <_free_r+0x4fc>
 2009720:	e0bff717 	ldw	r2,-36(fp)
 2009724:	10c00117 	ldw	r3,4(r2)
 2009728:	00bfff04 	movi	r2,-4
 200972c:	1884703a 	and	r2,r3,r2
 2009730:	e0fff517 	ldw	r3,-44(fp)
 2009734:	18bff436 	bltu	r3,r2,2009708 <_free_r+0x4cc>
 2009738:	e0bff717 	ldw	r2,-36(fp)
 200973c:	10800317 	ldw	r2,12(r2)
 2009740:	e0bff615 	stw	r2,-40(fp)
 2009744:	e0bff417 	ldw	r2,-48(fp)
 2009748:	e0fff617 	ldw	r3,-40(fp)
 200974c:	10c00315 	stw	r3,12(r2)
 2009750:	e0bff417 	ldw	r2,-48(fp)
 2009754:	e0fff717 	ldw	r3,-36(fp)
 2009758:	10c00215 	stw	r3,8(r2)
 200975c:	e0bff617 	ldw	r2,-40(fp)
 2009760:	e0fff417 	ldw	r3,-48(fp)
 2009764:	10c00215 	stw	r3,8(r2)
 2009768:	e0bff617 	ldw	r2,-40(fp)
 200976c:	10c00217 	ldw	r3,8(r2)
 2009770:	e0bff717 	ldw	r2,-36(fp)
 2009774:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 2009778:	e13ffe17 	ldw	r4,-8(fp)
 200977c:	2011df00 	call	2011df0 <__malloc_unlock>
 2009780:	00000106 	br	2009788 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 2009784:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 2009788:	e037883a 	mov	sp,fp
 200978c:	dfc00117 	ldw	ra,4(sp)
 2009790:	df000017 	ldw	fp,0(sp)
 2009794:	dec00204 	addi	sp,sp,8
 2009798:	f800283a 	ret

0200979c <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 200979c:	defff704 	addi	sp,sp,-36
 20097a0:	dfc00815 	stw	ra,32(sp)
 20097a4:	df000715 	stw	fp,28(sp)
 20097a8:	df000704 	addi	fp,sp,28
 20097ac:	e13ffe15 	stw	r4,-8(fp)
 20097b0:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 20097b4:	00840004 	movi	r2,4096
 20097b8:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 20097bc:	e13ffe17 	ldw	r4,-8(fp)
 20097c0:	2011cd00 	call	2011cd0 <__malloc_lock>

  top_size = chunksize(top);
 20097c4:	008080b4 	movhi	r2,514
 20097c8:	10b45c04 	addi	r2,r2,-11920
 20097cc:	10800217 	ldw	r2,8(r2)
 20097d0:	10800117 	ldw	r2,4(r2)
 20097d4:	1007883a 	mov	r3,r2
 20097d8:	00bfff04 	movi	r2,-4
 20097dc:	1884703a 	and	r2,r3,r2
 20097e0:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 20097e4:	e0fffa17 	ldw	r3,-24(fp)
 20097e8:	e0bfff17 	ldw	r2,-4(fp)
 20097ec:	1887c83a 	sub	r3,r3,r2
 20097f0:	e0bff917 	ldw	r2,-28(fp)
 20097f4:	1885883a 	add	r2,r3,r2
 20097f8:	10bffbc4 	addi	r2,r2,-17
 20097fc:	e17ff917 	ldw	r5,-28(fp)
 2009800:	1009883a 	mov	r4,r2
 2009804:	2003e840 	call	2003e84 <__udivsi3>
 2009808:	10ffffc4 	addi	r3,r2,-1
 200980c:	e0bff917 	ldw	r2,-28(fp)
 2009810:	1885383a 	mul	r2,r3,r2
 2009814:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 2009818:	e0bff917 	ldw	r2,-28(fp)
 200981c:	e0fffb17 	ldw	r3,-20(fp)
 2009820:	1880040e 	bge	r3,r2,2009834 <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 2009824:	e13ffe17 	ldw	r4,-8(fp)
 2009828:	2011df00 	call	2011df0 <__malloc_unlock>
    return 0;
 200982c:	0005883a 	mov	r2,zero
 2009830:	00004806 	br	2009954 <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 2009834:	000b883a 	mov	r5,zero
 2009838:	e13ffe17 	ldw	r4,-8(fp)
 200983c:	200e1700 	call	200e170 <_sbrk_r>
 2009840:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 2009844:	008080b4 	movhi	r2,514
 2009848:	10b45c04 	addi	r2,r2,-11920
 200984c:	10c00217 	ldw	r3,8(r2)
 2009850:	e0bffa17 	ldw	r2,-24(fp)
 2009854:	1887883a 	add	r3,r3,r2
 2009858:	e0bffc17 	ldw	r2,-16(fp)
 200985c:	18800426 	beq	r3,r2,2009870 <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 2009860:	e13ffe17 	ldw	r4,-8(fp)
 2009864:	2011df00 	call	2011df0 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 2009868:	0005883a 	mov	r2,zero
 200986c:	00003906 	br	2009954 <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 2009870:	e0bffb17 	ldw	r2,-20(fp)
 2009874:	0085c83a 	sub	r2,zero,r2
 2009878:	100b883a 	mov	r5,r2
 200987c:	e13ffe17 	ldw	r4,-8(fp)
 2009880:	200e1700 	call	200e170 <_sbrk_r>
 2009884:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 2009888:	e0bffd17 	ldw	r2,-12(fp)
 200988c:	10bfffd8 	cmpnei	r2,r2,-1
 2009890:	10001d1e 	bne	r2,zero,2009908 <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 2009894:	000b883a 	mov	r5,zero
 2009898:	e13ffe17 	ldw	r4,-8(fp)
 200989c:	200e1700 	call	200e170 <_sbrk_r>
 20098a0:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 20098a4:	e0fffc17 	ldw	r3,-16(fp)
 20098a8:	008080b4 	movhi	r2,514
 20098ac:	10b45c04 	addi	r2,r2,-11920
 20098b0:	10800217 	ldw	r2,8(r2)
 20098b4:	1885c83a 	sub	r2,r3,r2
 20098b8:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 20098bc:	e0bffa17 	ldw	r2,-24(fp)
 20098c0:	10800410 	cmplti	r2,r2,16
 20098c4:	10000c1e 	bne	r2,zero,20098f8 <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 20098c8:	e0bffc17 	ldw	r2,-16(fp)
 20098cc:	d0e00917 	ldw	r3,-32732(gp)
 20098d0:	10c7c83a 	sub	r3,r2,r3
 20098d4:	008080b4 	movhi	r2,514
 20098d8:	10812704 	addi	r2,r2,1180
 20098dc:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 20098e0:	008080b4 	movhi	r2,514
 20098e4:	10b45c04 	addi	r2,r2,-11920
 20098e8:	10800217 	ldw	r2,8(r2)
 20098ec:	e0fffa17 	ldw	r3,-24(fp)
 20098f0:	18c00054 	ori	r3,r3,1
 20098f4:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 20098f8:	e13ffe17 	ldw	r4,-8(fp)
 20098fc:	2011df00 	call	2011df0 <__malloc_unlock>
        return 0; 
 2009900:	0005883a 	mov	r2,zero
 2009904:	00001306 	br	2009954 <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 2009908:	008080b4 	movhi	r2,514
 200990c:	10b45c04 	addi	r2,r2,-11920
 2009910:	10800217 	ldw	r2,8(r2)
 2009914:	e13ffa17 	ldw	r4,-24(fp)
 2009918:	e0fffb17 	ldw	r3,-20(fp)
 200991c:	20c7c83a 	sub	r3,r4,r3
 2009920:	18c00054 	ori	r3,r3,1
 2009924:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 2009928:	008080b4 	movhi	r2,514
 200992c:	10812704 	addi	r2,r2,1180
 2009930:	10c00017 	ldw	r3,0(r2)
 2009934:	e0bffb17 	ldw	r2,-20(fp)
 2009938:	1887c83a 	sub	r3,r3,r2
 200993c:	008080b4 	movhi	r2,514
 2009940:	10812704 	addi	r2,r2,1180
 2009944:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 2009948:	e13ffe17 	ldw	r4,-8(fp)
 200994c:	2011df00 	call	2011df0 <__malloc_unlock>
        return 1;
 2009950:	00800044 	movi	r2,1
      }
    }
  }
}
 2009954:	e037883a 	mov	sp,fp
 2009958:	dfc00117 	ldw	ra,4(sp)
 200995c:	df000017 	ldw	fp,0(sp)
 2009960:	dec00204 	addi	sp,sp,8
 2009964:	f800283a 	ret

02009968 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 2009968:	defff004 	addi	sp,sp,-64
 200996c:	dfc00f15 	stw	ra,60(sp)
 2009970:	df000e15 	stw	fp,56(sp)
 2009974:	dd800d15 	stw	r22,52(sp)
 2009978:	dd400c15 	stw	r21,48(sp)
 200997c:	dd000b15 	stw	r20,44(sp)
 2009980:	dcc00a15 	stw	r19,40(sp)
 2009984:	dc800915 	stw	r18,36(sp)
 2009988:	dc400815 	stw	r17,32(sp)
 200998c:	dc000715 	stw	r16,28(sp)
 2009990:	df000e04 	addi	fp,sp,56
 2009994:	e13ff815 	stw	r4,-32(fp)
 2009998:	2821883a 	mov	r16,r5
 200999c:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 20099a0:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 20099a4:	ac800217 	ldw	r18,8(r21)
 20099a8:	9000021e 	bne	r18,zero,20099b4 <__sfvwrite_r+0x4c>
    return 0;
 20099ac:	0005883a 	mov	r2,zero
 20099b0:	00015806 	br	2009f14 <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 20099b4:	8080030b 	ldhu	r2,12(r16)
 20099b8:	10bfffcc 	andi	r2,r2,65535
 20099bc:	1080020c 	andi	r2,r2,8
 20099c0:	10000226 	beq	r2,zero,20099cc <__sfvwrite_r+0x64>
 20099c4:	80800417 	ldw	r2,16(r16)
 20099c8:	1000061e 	bne	r2,zero,20099e4 <__sfvwrite_r+0x7c>
 20099cc:	800b883a 	mov	r5,r16
 20099d0:	e13ff817 	ldw	r4,-32(fp)
 20099d4:	20067cc0 	call	20067cc <__swsetup_r>
 20099d8:	10000226 	beq	r2,zero,20099e4 <__sfvwrite_r+0x7c>
    return EOF;
 20099dc:	00bfffc4 	movi	r2,-1
 20099e0:	00014c06 	br	2009f14 <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 20099e4:	ad000017 	ldw	r20,0(r21)
  len = 0;
 20099e8:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 20099ec:	8080030b 	ldhu	r2,12(r16)
 20099f0:	10bfffcc 	andi	r2,r2,65535
 20099f4:	1080008c 	andi	r2,r2,2
 20099f8:	10001f26 	beq	r2,zero,2009a78 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 20099fc:	00000306 	br	2009a0c <__sfvwrite_r+0xa4>
 2009a00:	a4c00017 	ldw	r19,0(r20)
 2009a04:	a4800117 	ldw	r18,4(r20)
 2009a08:	a5000204 	addi	r20,r20,8
 2009a0c:	903ffc26 	beq	r18,zero,2009a00 <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 2009a10:	82000917 	ldw	r8,36(r16)
 2009a14:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 2009a18:	9005883a 	mov	r2,r18
 2009a1c:	00e00034 	movhi	r3,32768
 2009a20:	18ff0004 	addi	r3,r3,-1024
 2009a24:	1880022e 	bgeu	r3,r2,2009a30 <__sfvwrite_r+0xc8>
 2009a28:	00a00034 	movhi	r2,32768
 2009a2c:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 2009a30:	100f883a 	mov	r7,r2
 2009a34:	980d883a 	mov	r6,r19
 2009a38:	200b883a 	mov	r5,r4
 2009a3c:	e13ff817 	ldw	r4,-32(fp)
 2009a40:	403ee83a 	callr	r8
 2009a44:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 2009a48:	0441290e 	bge	zero,r17,2009ef0 <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 2009a4c:	8805883a 	mov	r2,r17
 2009a50:	98a7883a 	add	r19,r19,r2
	  len -= w;
 2009a54:	8805883a 	mov	r2,r17
 2009a58:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 2009a5c:	a8800217 	ldw	r2,8(r21)
 2009a60:	8807883a 	mov	r3,r17
 2009a64:	10c5c83a 	sub	r2,r2,r3
 2009a68:	a8800215 	stw	r2,8(r21)
 2009a6c:	a8800217 	ldw	r2,8(r21)
 2009a70:	103fe61e 	bne	r2,zero,2009a0c <__sfvwrite_r+0xa4>
 2009a74:	00011c06 	br	2009ee8 <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 2009a78:	8080030b 	ldhu	r2,12(r16)
 2009a7c:	10bfffcc 	andi	r2,r2,65535
 2009a80:	1080004c 	andi	r2,r2,1
 2009a84:	1000b51e 	bne	r2,zero,2009d5c <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 2009a88:	00000306 	br	2009a98 <__sfvwrite_r+0x130>
 2009a8c:	a4c00017 	ldw	r19,0(r20)
 2009a90:	a4800117 	ldw	r18,4(r20)
 2009a94:	a5000204 	addi	r20,r20,8
 2009a98:	903ffc26 	beq	r18,zero,2009a8c <__sfvwrite_r+0x124>
	  w = fp->_w;
 2009a9c:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 2009aa0:	8080030b 	ldhu	r2,12(r16)
 2009aa4:	10bfffcc 	andi	r2,r2,65535
 2009aa8:	1080800c 	andi	r2,r2,512
 2009aac:	10006b26 	beq	r2,zero,2009c5c <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 2009ab0:	8805883a 	mov	r2,r17
 2009ab4:	90805736 	bltu	r18,r2,2009c14 <__sfvwrite_r+0x2ac>
 2009ab8:	8080030b 	ldhu	r2,12(r16)
 2009abc:	10bfffcc 	andi	r2,r2,65535
 2009ac0:	1081200c 	andi	r2,r2,1152
 2009ac4:	10005326 	beq	r2,zero,2009c14 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 2009ac8:	80800017 	ldw	r2,0(r16)
 2009acc:	1007883a 	mov	r3,r2
 2009ad0:	80800417 	ldw	r2,16(r16)
 2009ad4:	1885c83a 	sub	r2,r3,r2
 2009ad8:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 2009adc:	80c00517 	ldw	r3,20(r16)
 2009ae0:	1805883a 	mov	r2,r3
 2009ae4:	1085883a 	add	r2,r2,r2
 2009ae8:	10c5883a 	add	r2,r2,r3
 2009aec:	1006d7fa 	srli	r3,r2,31
 2009af0:	1885883a 	add	r2,r3,r2
 2009af4:	1005d07a 	srai	r2,r2,1
 2009af8:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 2009afc:	e0bff617 	ldw	r2,-40(fp)
 2009b00:	1485883a 	add	r2,r2,r18
 2009b04:	10800044 	addi	r2,r2,1
 2009b08:	e0fff517 	ldw	r3,-44(fp)
 2009b0c:	1880042e 	bgeu	r3,r2,2009b20 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 2009b10:	e0bff617 	ldw	r2,-40(fp)
 2009b14:	1485883a 	add	r2,r2,r18
 2009b18:	10800044 	addi	r2,r2,1
 2009b1c:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 2009b20:	8080030b 	ldhu	r2,12(r16)
 2009b24:	10bfffcc 	andi	r2,r2,65535
 2009b28:	1081000c 	andi	r2,r2,1024
 2009b2c:	10001726 	beq	r2,zero,2009b8c <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 2009b30:	e0bff517 	ldw	r2,-44(fp)
 2009b34:	100b883a 	mov	r5,r2
 2009b38:	e13ff817 	ldw	r4,-32(fp)
 2009b3c:	200a87c0 	call	200a87c <_malloc_r>
 2009b40:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 2009b44:	e0bff417 	ldw	r2,-48(fp)
 2009b48:	1000041e 	bne	r2,zero,2009b5c <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 2009b4c:	e0bff817 	ldw	r2,-32(fp)
 2009b50:	00c00304 	movi	r3,12
 2009b54:	10c00015 	stw	r3,0(r2)
			  goto err;
 2009b58:	0000ea06 	br	2009f04 <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 2009b5c:	80800417 	ldw	r2,16(r16)
 2009b60:	e0fff617 	ldw	r3,-40(fp)
 2009b64:	180d883a 	mov	r6,r3
 2009b68:	100b883a 	mov	r5,r2
 2009b6c:	e13ff417 	ldw	r4,-48(fp)
 2009b70:	200b5b40 	call	200b5b4 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 2009b74:	80c0030b 	ldhu	r3,12(r16)
 2009b78:	00bedfc4 	movi	r2,-1153
 2009b7c:	1884703a 	and	r2,r3,r2
 2009b80:	10802014 	ori	r2,r2,128
 2009b84:	8080030d 	sth	r2,12(r16)
 2009b88:	00001506 	br	2009be0 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 2009b8c:	80800417 	ldw	r2,16(r16)
 2009b90:	e0fff517 	ldw	r3,-44(fp)
 2009b94:	180d883a 	mov	r6,r3
 2009b98:	100b883a 	mov	r5,r2
 2009b9c:	e13ff817 	ldw	r4,-32(fp)
 2009ba0:	200d5800 	call	200d580 <_realloc_r>
 2009ba4:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 2009ba8:	e0bff417 	ldw	r2,-48(fp)
 2009bac:	10000c1e 	bne	r2,zero,2009be0 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 2009bb0:	80800417 	ldw	r2,16(r16)
 2009bb4:	100b883a 	mov	r5,r2
 2009bb8:	e13ff817 	ldw	r4,-32(fp)
 2009bbc:	200923c0 	call	200923c <_free_r>
			  fp->_flags &=  ~__SMBF;
 2009bc0:	80c0030b 	ldhu	r3,12(r16)
 2009bc4:	00bfdfc4 	movi	r2,-129
 2009bc8:	1884703a 	and	r2,r3,r2
 2009bcc:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 2009bd0:	e0bff817 	ldw	r2,-32(fp)
 2009bd4:	00c00304 	movi	r3,12
 2009bd8:	10c00015 	stw	r3,0(r2)
			  goto err;
 2009bdc:	0000c906 	br	2009f04 <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 2009be0:	e0bff417 	ldw	r2,-48(fp)
 2009be4:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 2009be8:	e0bff617 	ldw	r2,-40(fp)
 2009bec:	e0fff417 	ldw	r3,-48(fp)
 2009bf0:	1885883a 	add	r2,r3,r2
 2009bf4:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 2009bf8:	e0bff517 	ldw	r2,-44(fp)
 2009bfc:	80800515 	stw	r2,20(r16)
		  w = len;
 2009c00:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 2009c04:	e0fff517 	ldw	r3,-44(fp)
 2009c08:	e0bff617 	ldw	r2,-40(fp)
 2009c0c:	1885c83a 	sub	r2,r3,r2
 2009c10:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 2009c14:	8805883a 	mov	r2,r17
 2009c18:	9080012e 	bgeu	r18,r2,2009c20 <__sfvwrite_r+0x2b8>
		w = len;
 2009c1c:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 2009c20:	80800017 	ldw	r2,0(r16)
 2009c24:	8807883a 	mov	r3,r17
 2009c28:	180d883a 	mov	r6,r3
 2009c2c:	980b883a 	mov	r5,r19
 2009c30:	1009883a 	mov	r4,r2
 2009c34:	200b73c0 	call	200b73c <memmove>
	      fp->_w -= w;
 2009c38:	80800217 	ldw	r2,8(r16)
 2009c3c:	1445c83a 	sub	r2,r2,r17
 2009c40:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 2009c44:	80800017 	ldw	r2,0(r16)
 2009c48:	8807883a 	mov	r3,r17
 2009c4c:	10c5883a 	add	r2,r2,r3
 2009c50:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 2009c54:	9023883a 	mov	r17,r18
 2009c58:	00003506 	br	2009d30 <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 2009c5c:	80800017 	ldw	r2,0(r16)
 2009c60:	80c00417 	ldw	r3,16(r16)
 2009c64:	18800236 	bltu	r3,r2,2009c70 <__sfvwrite_r+0x308>
 2009c68:	80800517 	ldw	r2,20(r16)
 2009c6c:	9080182e 	bgeu	r18,r2,2009cd0 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 2009c70:	8805883a 	mov	r2,r17
 2009c74:	9080012e 	bgeu	r18,r2,2009c7c <__sfvwrite_r+0x314>
 2009c78:	9005883a 	mov	r2,r18
 2009c7c:	1023883a 	mov	r17,r2
	      COPY (w);
 2009c80:	80800017 	ldw	r2,0(r16)
 2009c84:	8807883a 	mov	r3,r17
 2009c88:	180d883a 	mov	r6,r3
 2009c8c:	980b883a 	mov	r5,r19
 2009c90:	1009883a 	mov	r4,r2
 2009c94:	200b73c0 	call	200b73c <memmove>
	      fp->_w -= w;
 2009c98:	80800217 	ldw	r2,8(r16)
 2009c9c:	1445c83a 	sub	r2,r2,r17
 2009ca0:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 2009ca4:	80800017 	ldw	r2,0(r16)
 2009ca8:	8807883a 	mov	r3,r17
 2009cac:	10c5883a 	add	r2,r2,r3
 2009cb0:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 2009cb4:	80800217 	ldw	r2,8(r16)
 2009cb8:	10001c1e 	bne	r2,zero,2009d2c <__sfvwrite_r+0x3c4>
 2009cbc:	800b883a 	mov	r5,r16
 2009cc0:	e13ff817 	ldw	r4,-32(fp)
 2009cc4:	2008b9c0 	call	2008b9c <_fflush_r>
 2009cc8:	10001826 	beq	r2,zero,2009d2c <__sfvwrite_r+0x3c4>
		goto err;
 2009ccc:	00008d06 	br	2009f04 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 2009cd0:	9005883a 	mov	r2,r18
 2009cd4:	00e00034 	movhi	r3,32768
 2009cd8:	10c00236 	bltu	r2,r3,2009ce4 <__sfvwrite_r+0x37c>
 2009cdc:	00a00034 	movhi	r2,32768
 2009ce0:	10bfffc4 	addi	r2,r2,-1
 2009ce4:	1007883a 	mov	r3,r2
 2009ce8:	80800517 	ldw	r2,20(r16)
 2009cec:	100b883a 	mov	r5,r2
 2009cf0:	1809883a 	mov	r4,r3
 2009cf4:	2003d8c0 	call	2003d8c <__divsi3>
 2009cf8:	1007883a 	mov	r3,r2
 2009cfc:	80800517 	ldw	r2,20(r16)
 2009d00:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 2009d04:	80800917 	ldw	r2,36(r16)
 2009d08:	80c00717 	ldw	r3,28(r16)
 2009d0c:	880f883a 	mov	r7,r17
 2009d10:	980d883a 	mov	r6,r19
 2009d14:	180b883a 	mov	r5,r3
 2009d18:	e13ff817 	ldw	r4,-32(fp)
 2009d1c:	103ee83a 	callr	r2
 2009d20:	1023883a 	mov	r17,r2
	      if (w <= 0)
 2009d24:	0440740e 	bge	zero,r17,2009ef8 <__sfvwrite_r+0x590>
 2009d28:	00000106 	br	2009d30 <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 2009d2c:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 2009d30:	8805883a 	mov	r2,r17
 2009d34:	98a7883a 	add	r19,r19,r2
	  len -= w;
 2009d38:	8805883a 	mov	r2,r17
 2009d3c:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 2009d40:	a8800217 	ldw	r2,8(r21)
 2009d44:	8807883a 	mov	r3,r17
 2009d48:	10c5c83a 	sub	r2,r2,r3
 2009d4c:	a8800215 	stw	r2,8(r21)
 2009d50:	a8800217 	ldw	r2,8(r21)
 2009d54:	103f501e 	bne	r2,zero,2009a98 <__sfvwrite_r+0x130>
 2009d58:	00006306 	br	2009ee8 <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 2009d5c:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 2009d60:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 2009d64:	00000406 	br	2009d78 <__sfvwrite_r+0x410>
 2009d68:	e03ff215 	stw	zero,-56(fp)
 2009d6c:	a4c00017 	ldw	r19,0(r20)
 2009d70:	a4800117 	ldw	r18,4(r20)
 2009d74:	a5000204 	addi	r20,r20,8
 2009d78:	903ffb26 	beq	r18,zero,2009d68 <__sfvwrite_r+0x400>
	  if (!nlknown)
 2009d7c:	e0bff217 	ldw	r2,-56(fp)
 2009d80:	1000111e 	bne	r2,zero,2009dc8 <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 2009d84:	900d883a 	mov	r6,r18
 2009d88:	01400284 	movi	r5,10
 2009d8c:	9809883a 	mov	r4,r19
 2009d90:	200b3f80 	call	200b3f8 <memchr>
 2009d94:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 2009d98:	e0bff717 	ldw	r2,-36(fp)
 2009d9c:	10000626 	beq	r2,zero,2009db8 <__sfvwrite_r+0x450>
 2009da0:	e0bff717 	ldw	r2,-36(fp)
 2009da4:	10800044 	addi	r2,r2,1
 2009da8:	1007883a 	mov	r3,r2
 2009dac:	9805883a 	mov	r2,r19
 2009db0:	1885c83a 	sub	r2,r3,r2
 2009db4:	00000106 	br	2009dbc <__sfvwrite_r+0x454>
 2009db8:	90800044 	addi	r2,r18,1
 2009dbc:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 2009dc0:	00800044 	movi	r2,1
 2009dc4:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 2009dc8:	e0bff317 	ldw	r2,-52(fp)
 2009dcc:	9080012e 	bgeu	r18,r2,2009dd4 <__sfvwrite_r+0x46c>
 2009dd0:	9005883a 	mov	r2,r18
 2009dd4:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 2009dd8:	80c00217 	ldw	r3,8(r16)
 2009ddc:	80800517 	ldw	r2,20(r16)
 2009de0:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 2009de4:	80800017 	ldw	r2,0(r16)
 2009de8:	80c00417 	ldw	r3,16(r16)
 2009dec:	1880102e 	bgeu	r3,r2,2009e30 <__sfvwrite_r+0x4c8>
 2009df0:	8d800f0e 	bge	r17,r22,2009e30 <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 2009df4:	80800017 	ldw	r2,0(r16)
 2009df8:	8807883a 	mov	r3,r17
 2009dfc:	180d883a 	mov	r6,r3
 2009e00:	980b883a 	mov	r5,r19
 2009e04:	1009883a 	mov	r4,r2
 2009e08:	200b73c0 	call	200b73c <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 2009e0c:	80800017 	ldw	r2,0(r16)
 2009e10:	8807883a 	mov	r3,r17
 2009e14:	10c5883a 	add	r2,r2,r3
 2009e18:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 2009e1c:	800b883a 	mov	r5,r16
 2009e20:	e13ff817 	ldw	r4,-32(fp)
 2009e24:	2008b9c0 	call	2008b9c <_fflush_r>
 2009e28:	10001b26 	beq	r2,zero,2009e98 <__sfvwrite_r+0x530>
		goto err;
 2009e2c:	00003506 	br	2009f04 <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 2009e30:	84400517 	ldw	r17,20(r16)
 2009e34:	b4400a16 	blt	r22,r17,2009e60 <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 2009e38:	80800917 	ldw	r2,36(r16)
 2009e3c:	80c00717 	ldw	r3,28(r16)
 2009e40:	880f883a 	mov	r7,r17
 2009e44:	980d883a 	mov	r6,r19
 2009e48:	180b883a 	mov	r5,r3
 2009e4c:	e13ff817 	ldw	r4,-32(fp)
 2009e50:	103ee83a 	callr	r2
 2009e54:	1023883a 	mov	r17,r2
	      if (w <= 0)
 2009e58:	04400f16 	blt	zero,r17,2009e98 <__sfvwrite_r+0x530>
		goto err;
 2009e5c:	00002906 	br	2009f04 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 2009e60:	b023883a 	mov	r17,r22
	      COPY (w);
 2009e64:	80800017 	ldw	r2,0(r16)
 2009e68:	8807883a 	mov	r3,r17
 2009e6c:	180d883a 	mov	r6,r3
 2009e70:	980b883a 	mov	r5,r19
 2009e74:	1009883a 	mov	r4,r2
 2009e78:	200b73c0 	call	200b73c <memmove>
	      fp->_w -= w;
 2009e7c:	80800217 	ldw	r2,8(r16)
 2009e80:	1445c83a 	sub	r2,r2,r17
 2009e84:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 2009e88:	80800017 	ldw	r2,0(r16)
 2009e8c:	8807883a 	mov	r3,r17
 2009e90:	10c5883a 	add	r2,r2,r3
 2009e94:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 2009e98:	e0bff317 	ldw	r2,-52(fp)
 2009e9c:	1445c83a 	sub	r2,r2,r17
 2009ea0:	e0bff315 	stw	r2,-52(fp)
 2009ea4:	e0bff317 	ldw	r2,-52(fp)
 2009ea8:	1000051e 	bne	r2,zero,2009ec0 <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 2009eac:	800b883a 	mov	r5,r16
 2009eb0:	e13ff817 	ldw	r4,-32(fp)
 2009eb4:	2008b9c0 	call	2008b9c <_fflush_r>
 2009eb8:	1000111e 	bne	r2,zero,2009f00 <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 2009ebc:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 2009ec0:	8805883a 	mov	r2,r17
 2009ec4:	98a7883a 	add	r19,r19,r2
	  len -= w;
 2009ec8:	8805883a 	mov	r2,r17
 2009ecc:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 2009ed0:	a8800217 	ldw	r2,8(r21)
 2009ed4:	8807883a 	mov	r3,r17
 2009ed8:	10c5c83a 	sub	r2,r2,r3
 2009edc:	a8800215 	stw	r2,8(r21)
 2009ee0:	a8800217 	ldw	r2,8(r21)
 2009ee4:	103fa41e 	bne	r2,zero,2009d78 <__sfvwrite_r+0x410>
    }
  return 0;
 2009ee8:	0005883a 	mov	r2,zero
 2009eec:	00000906 	br	2009f14 <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 2009ef0:	0001883a 	nop
 2009ef4:	00000306 	br	2009f04 <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 2009ef8:	0001883a 	nop
 2009efc:	00000106 	br	2009f04 <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 2009f00:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 2009f04:	8080030b 	ldhu	r2,12(r16)
 2009f08:	10801014 	ori	r2,r2,64
 2009f0c:	8080030d 	sth	r2,12(r16)
  return EOF;
 2009f10:	00bfffc4 	movi	r2,-1
}
 2009f14:	e6fff904 	addi	sp,fp,-28
 2009f18:	dfc00817 	ldw	ra,32(sp)
 2009f1c:	df000717 	ldw	fp,28(sp)
 2009f20:	dd800617 	ldw	r22,24(sp)
 2009f24:	dd400517 	ldw	r21,20(sp)
 2009f28:	dd000417 	ldw	r20,16(sp)
 2009f2c:	dcc00317 	ldw	r19,12(sp)
 2009f30:	dc800217 	ldw	r18,8(sp)
 2009f34:	dc400117 	ldw	r17,4(sp)
 2009f38:	dc000017 	ldw	r16,0(sp)
 2009f3c:	dec00904 	addi	sp,sp,36
 2009f40:	f800283a 	ret

02009f44 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 2009f44:	defff804 	addi	sp,sp,-32
 2009f48:	dfc00715 	stw	ra,28(sp)
 2009f4c:	df000615 	stw	fp,24(sp)
 2009f50:	dd000515 	stw	r20,20(sp)
 2009f54:	dcc00415 	stw	r19,16(sp)
 2009f58:	dc800315 	stw	r18,12(sp)
 2009f5c:	dc400215 	stw	r17,8(sp)
 2009f60:	dc000115 	stw	r16,4(sp)
 2009f64:	df000604 	addi	fp,sp,24
 2009f68:	e13ffa15 	stw	r4,-24(fp)
 2009f6c:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 2009f70:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 2009f74:	e0bffa17 	ldw	r2,-24(fp)
 2009f78:	1440b804 	addi	r17,r2,736
 2009f7c:	00001b06 	br	2009fec <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2009f80:	8c000217 	ldw	r16,8(r17)
 2009f84:	8c800117 	ldw	r18,4(r17)
 2009f88:	00001506 	br	2009fe0 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 2009f8c:	8080030b 	ldhu	r2,12(r16)
 2009f90:	10bfffcc 	andi	r2,r2,65535
 2009f94:	10a0001c 	xori	r2,r2,32768
 2009f98:	10a00004 	addi	r2,r2,-32768
 2009f9c:	10000f26 	beq	r2,zero,2009fdc <_fwalk+0x98>
 2009fa0:	8080030b 	ldhu	r2,12(r16)
 2009fa4:	10bfffcc 	andi	r2,r2,65535
 2009fa8:	10a0001c 	xori	r2,r2,32768
 2009fac:	10a00004 	addi	r2,r2,-32768
 2009fb0:	10800060 	cmpeqi	r2,r2,1
 2009fb4:	1000091e 	bne	r2,zero,2009fdc <_fwalk+0x98>
 2009fb8:	8080038b 	ldhu	r2,14(r16)
 2009fbc:	10bfffcc 	andi	r2,r2,65535
 2009fc0:	10a0001c 	xori	r2,r2,32768
 2009fc4:	10a00004 	addi	r2,r2,-32768
 2009fc8:	10bfffe0 	cmpeqi	r2,r2,-1
 2009fcc:	1000031e 	bne	r2,zero,2009fdc <_fwalk+0x98>
	ret |= (*function) (fp);
 2009fd0:	8009883a 	mov	r4,r16
 2009fd4:	a03ee83a 	callr	r20
 2009fd8:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2009fdc:	84001a04 	addi	r16,r16,104
 2009fe0:	94bfffc4 	addi	r18,r18,-1
 2009fe4:	903fe90e 	bge	r18,zero,2009f8c <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 2009fe8:	8c400017 	ldw	r17,0(r17)
 2009fec:	883fe41e 	bne	r17,zero,2009f80 <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 2009ff0:	9805883a 	mov	r2,r19
}
 2009ff4:	e6fffb04 	addi	sp,fp,-20
 2009ff8:	dfc00617 	ldw	ra,24(sp)
 2009ffc:	df000517 	ldw	fp,20(sp)
 200a000:	dd000417 	ldw	r20,16(sp)
 200a004:	dcc00317 	ldw	r19,12(sp)
 200a008:	dc800217 	ldw	r18,8(sp)
 200a00c:	dc400117 	ldw	r17,4(sp)
 200a010:	dc000017 	ldw	r16,0(sp)
 200a014:	dec00704 	addi	sp,sp,28
 200a018:	f800283a 	ret

0200a01c <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 200a01c:	defff804 	addi	sp,sp,-32
 200a020:	dfc00715 	stw	ra,28(sp)
 200a024:	df000615 	stw	fp,24(sp)
 200a028:	dd000515 	stw	r20,20(sp)
 200a02c:	dcc00415 	stw	r19,16(sp)
 200a030:	dc800315 	stw	r18,12(sp)
 200a034:	dc400215 	stw	r17,8(sp)
 200a038:	dc000115 	stw	r16,4(sp)
 200a03c:	df000604 	addi	fp,sp,24
 200a040:	e13ffa15 	stw	r4,-24(fp)
 200a044:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200a048:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200a04c:	e0bffa17 	ldw	r2,-24(fp)
 200a050:	1440b804 	addi	r17,r2,736
 200a054:	00001c06 	br	200a0c8 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200a058:	8c000217 	ldw	r16,8(r17)
 200a05c:	8c800117 	ldw	r18,4(r17)
 200a060:	00001606 	br	200a0bc <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200a064:	8080030b 	ldhu	r2,12(r16)
 200a068:	10bfffcc 	andi	r2,r2,65535
 200a06c:	10a0001c 	xori	r2,r2,32768
 200a070:	10a00004 	addi	r2,r2,-32768
 200a074:	10001026 	beq	r2,zero,200a0b8 <_fwalk_reent+0x9c>
 200a078:	8080030b 	ldhu	r2,12(r16)
 200a07c:	10bfffcc 	andi	r2,r2,65535
 200a080:	10a0001c 	xori	r2,r2,32768
 200a084:	10a00004 	addi	r2,r2,-32768
 200a088:	10800060 	cmpeqi	r2,r2,1
 200a08c:	10000a1e 	bne	r2,zero,200a0b8 <_fwalk_reent+0x9c>
 200a090:	8080038b 	ldhu	r2,14(r16)
 200a094:	10bfffcc 	andi	r2,r2,65535
 200a098:	10a0001c 	xori	r2,r2,32768
 200a09c:	10a00004 	addi	r2,r2,-32768
 200a0a0:	10bfffe0 	cmpeqi	r2,r2,-1
 200a0a4:	1000041e 	bne	r2,zero,200a0b8 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 200a0a8:	800b883a 	mov	r5,r16
 200a0ac:	e13ffa17 	ldw	r4,-24(fp)
 200a0b0:	a03ee83a 	callr	r20
 200a0b4:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200a0b8:	84001a04 	addi	r16,r16,104
 200a0bc:	94bfffc4 	addi	r18,r18,-1
 200a0c0:	903fe80e 	bge	r18,zero,200a064 <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200a0c4:	8c400017 	ldw	r17,0(r17)
 200a0c8:	883fe31e 	bne	r17,zero,200a058 <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 200a0cc:	9805883a 	mov	r2,r19
}
 200a0d0:	e6fffb04 	addi	sp,fp,-20
 200a0d4:	dfc00617 	ldw	ra,24(sp)
 200a0d8:	df000517 	ldw	fp,20(sp)
 200a0dc:	dd000417 	ldw	r20,16(sp)
 200a0e0:	dcc00317 	ldw	r19,12(sp)
 200a0e4:	dc800217 	ldw	r18,8(sp)
 200a0e8:	dc400117 	ldw	r17,4(sp)
 200a0ec:	dc000017 	ldw	r16,0(sp)
 200a0f0:	dec00704 	addi	sp,sp,28
 200a0f4:	f800283a 	ret

0200a0f8 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 200a0f8:	defffb04 	addi	sp,sp,-20
 200a0fc:	dfc00415 	stw	ra,16(sp)
 200a100:	df000315 	stw	fp,12(sp)
 200a104:	df000304 	addi	fp,sp,12
 200a108:	e13ffd15 	stw	r4,-12(fp)
 200a10c:	e17ffe15 	stw	r5,-8(fp)
 200a110:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 200a114:	e0bfff17 	ldw	r2,-4(fp)
 200a118:	10001126 	beq	r2,zero,200a160 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 200a11c:	014080b4 	movhi	r5,514
 200a120:	29727a04 	addi	r5,r5,-13848
 200a124:	e13fff17 	ldw	r4,-4(fp)
 200a128:	200e4440 	call	200e444 <strcmp>
 200a12c:	10000c26 	beq	r2,zero,200a160 <_setlocale_r+0x68>
 200a130:	014080b4 	movhi	r5,514
 200a134:	29727c04 	addi	r5,r5,-13840
 200a138:	e13fff17 	ldw	r4,-4(fp)
 200a13c:	200e4440 	call	200e444 <strcmp>
 200a140:	10000726 	beq	r2,zero,200a160 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 200a144:	014080b4 	movhi	r5,514
 200a148:	29727904 	addi	r5,r5,-13852
 200a14c:	e13fff17 	ldw	r4,-4(fp)
 200a150:	200e4440 	call	200e444 <strcmp>
 200a154:	10000226 	beq	r2,zero,200a160 <_setlocale_r+0x68>
        return NULL;
 200a158:	0005883a 	mov	r2,zero
 200a15c:	00000206 	br	200a168 <_setlocale_r+0x70>
    }
  return "C";
 200a160:	008080b4 	movhi	r2,514
 200a164:	10b27c04 	addi	r2,r2,-13840
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 200a168:	e037883a 	mov	sp,fp
 200a16c:	dfc00117 	ldw	ra,4(sp)
 200a170:	df000017 	ldw	fp,0(sp)
 200a174:	dec00204 	addi	sp,sp,8
 200a178:	f800283a 	ret

0200a17c <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 200a17c:	deffff04 	addi	sp,sp,-4
 200a180:	df000015 	stw	fp,0(sp)
 200a184:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 200a188:	008080b4 	movhi	r2,514
 200a18c:	10b44c04 	addi	r2,r2,-11984
#endif
}
 200a190:	e037883a 	mov	sp,fp
 200a194:	df000017 	ldw	fp,0(sp)
 200a198:	dec00104 	addi	sp,sp,4
 200a19c:	f800283a 	ret

0200a1a0 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 200a1a0:	deffff04 	addi	sp,sp,-4
 200a1a4:	df000015 	stw	fp,0(sp)
 200a1a8:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 200a1ac:	d0a00717 	ldw	r2,-32740(gp)
#endif
}
 200a1b0:	e037883a 	mov	sp,fp
 200a1b4:	df000017 	ldw	fp,0(sp)
 200a1b8:	dec00104 	addi	sp,sp,4
 200a1bc:	f800283a 	ret

0200a1c0 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 200a1c0:	deffff04 	addi	sp,sp,-4
 200a1c4:	df000015 	stw	fp,0(sp)
 200a1c8:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 200a1cc:	008080b4 	movhi	r2,514
 200a1d0:	10b45404 	addi	r2,r2,-11952
#endif
}
 200a1d4:	e037883a 	mov	sp,fp
 200a1d8:	df000017 	ldw	fp,0(sp)
 200a1dc:	dec00104 	addi	sp,sp,4
 200a1e0:	f800283a 	ret

0200a1e4 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 200a1e4:	deffff04 	addi	sp,sp,-4
 200a1e8:	df000015 	stw	fp,0(sp)
 200a1ec:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 200a1f0:	d0a71e17 	ldw	r2,-25480(gp)
}
 200a1f4:	e037883a 	mov	sp,fp
 200a1f8:	df000017 	ldw	fp,0(sp)
 200a1fc:	dec00104 	addi	sp,sp,4
 200a200:	f800283a 	ret

0200a204 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 200a204:	defffe04 	addi	sp,sp,-8
 200a208:	df000115 	stw	fp,4(sp)
 200a20c:	df000104 	addi	fp,sp,4
 200a210:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 200a214:	008080b4 	movhi	r2,514
 200a218:	10b43e04 	addi	r2,r2,-12040
}
 200a21c:	e037883a 	mov	sp,fp
 200a220:	df000017 	ldw	fp,0(sp)
 200a224:	dec00104 	addi	sp,sp,4
 200a228:	f800283a 	ret

0200a22c <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 200a22c:	defffc04 	addi	sp,sp,-16
 200a230:	dfc00315 	stw	ra,12(sp)
 200a234:	df000215 	stw	fp,8(sp)
 200a238:	df000204 	addi	fp,sp,8
 200a23c:	e13ffe15 	stw	r4,-8(fp)
 200a240:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 200a244:	d0a00517 	ldw	r2,-32748(gp)
 200a248:	e1bfff17 	ldw	r6,-4(fp)
 200a24c:	e17ffe17 	ldw	r5,-8(fp)
 200a250:	1009883a 	mov	r4,r2
 200a254:	200a0f80 	call	200a0f8 <_setlocale_r>
}
 200a258:	e037883a 	mov	sp,fp
 200a25c:	dfc00117 	ldw	ra,4(sp)
 200a260:	df000017 	ldw	fp,0(sp)
 200a264:	dec00204 	addi	sp,sp,8
 200a268:	f800283a 	ret

0200a26c <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 200a26c:	defffe04 	addi	sp,sp,-8
 200a270:	dfc00115 	stw	ra,4(sp)
 200a274:	df000015 	stw	fp,0(sp)
 200a278:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 200a27c:	d0a00517 	ldw	r2,-32748(gp)
 200a280:	1009883a 	mov	r4,r2
 200a284:	200a2040 	call	200a204 <_localeconv_r>
}
 200a288:	e037883a 	mov	sp,fp
 200a28c:	dfc00117 	ldw	ra,4(sp)
 200a290:	df000017 	ldw	fp,0(sp)
 200a294:	dec00204 	addi	sp,sp,8
 200a298:	f800283a 	ret

0200a29c <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 200a29c:	deffea04 	addi	sp,sp,-88
 200a2a0:	dfc01515 	stw	ra,84(sp)
 200a2a4:	df001415 	stw	fp,80(sp)
 200a2a8:	dcc01315 	stw	r19,76(sp)
 200a2ac:	dc801215 	stw	r18,72(sp)
 200a2b0:	dc401115 	stw	r17,68(sp)
 200a2b4:	dc001015 	stw	r16,64(sp)
 200a2b8:	df001404 	addi	fp,sp,80
 200a2bc:	e13ffb15 	stw	r4,-20(fp)
 200a2c0:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 200a2c4:	8080030b 	ldhu	r2,12(r16)
 200a2c8:	10bfffcc 	andi	r2,r2,65535
 200a2cc:	1080008c 	andi	r2,r2,2
 200a2d0:	10000726 	beq	r2,zero,200a2f0 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 200a2d4:	808010c4 	addi	r2,r16,67
 200a2d8:	80800015 	stw	r2,0(r16)
 200a2dc:	80800017 	ldw	r2,0(r16)
 200a2e0:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 200a2e4:	00800044 	movi	r2,1
 200a2e8:	80800515 	stw	r2,20(r16)
 200a2ec:	00006d06 	br	200a4a4 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 200a2f0:	8080038b 	ldhu	r2,14(r16)
 200a2f4:	10bfffcc 	andi	r2,r2,65535
 200a2f8:	10a0001c 	xori	r2,r2,32768
 200a2fc:	10a00004 	addi	r2,r2,-32768
 200a300:	10000916 	blt	r2,zero,200a328 <__smakebuf_r+0x8c>
 200a304:	8080038b 	ldhu	r2,14(r16)
 200a308:	10bfffcc 	andi	r2,r2,65535
 200a30c:	10a0001c 	xori	r2,r2,32768
 200a310:	10a00004 	addi	r2,r2,-32768
 200a314:	e1bfec04 	addi	r6,fp,-80
 200a318:	100b883a 	mov	r5,r2
 200a31c:	e13ffb17 	ldw	r4,-20(fp)
 200a320:	20101400 	call	2010140 <_fstat_r>
 200a324:	10000c0e 	bge	r2,zero,200a358 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 200a328:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 200a32c:	8080030b 	ldhu	r2,12(r16)
 200a330:	10bfffcc 	andi	r2,r2,65535
 200a334:	1080200c 	andi	r2,r2,128
 200a338:	10000226 	beq	r2,zero,200a344 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 200a33c:	04401004 	movi	r17,64
 200a340:	00000106 	br	200a348 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 200a344:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 200a348:	8080030b 	ldhu	r2,12(r16)
 200a34c:	10820014 	ori	r2,r2,2048
 200a350:	8080030d 	sth	r2,12(r16)
 200a354:	00001606 	br	200a3b0 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 200a358:	e0bfed17 	ldw	r2,-76(fp)
 200a35c:	10bc000c 	andi	r2,r2,61440
 200a360:	10880020 	cmpeqi	r2,r2,8192
 200a364:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 200a368:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 200a36c:	e0bfed17 	ldw	r2,-76(fp)
 200a370:	10fc000c 	andi	r3,r2,61440
 200a374:	00a00014 	movui	r2,32768
 200a378:	18800a1e 	bne	r3,r2,200a3a4 <__smakebuf_r+0x108>
 200a37c:	80c00a17 	ldw	r3,40(r16)
 200a380:	00808074 	movhi	r2,513
 200a384:	10b8d404 	addi	r2,r2,-7344
 200a388:	1880061e 	bne	r3,r2,200a3a4 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 200a38c:	8080030b 	ldhu	r2,12(r16)
 200a390:	10810014 	ori	r2,r2,1024
 200a394:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 200a398:	00810004 	movi	r2,1024
 200a39c:	80801315 	stw	r2,76(r16)
 200a3a0:	00000306 	br	200a3b0 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 200a3a4:	8080030b 	ldhu	r2,12(r16)
 200a3a8:	10820014 	ori	r2,r2,2048
 200a3ac:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 200a3b0:	90001126 	beq	r18,zero,200a3f8 <__smakebuf_r+0x15c>
 200a3b4:	8080038b 	ldhu	r2,14(r16)
 200a3b8:	10bfffcc 	andi	r2,r2,65535
 200a3bc:	10a0001c 	xori	r2,r2,32768
 200a3c0:	10a00004 	addi	r2,r2,-32768
 200a3c4:	100b883a 	mov	r5,r2
 200a3c8:	e13ffb17 	ldw	r4,-20(fp)
 200a3cc:	20101a80 	call	20101a8 <_isatty_r>
 200a3d0:	10000926 	beq	r2,zero,200a3f8 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 200a3d4:	8080030b 	ldhu	r2,12(r16)
 200a3d8:	10800054 	ori	r2,r2,1
 200a3dc:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 200a3e0:	808010c4 	addi	r2,r16,67
 200a3e4:	80800015 	stw	r2,0(r16)
 200a3e8:	80800017 	ldw	r2,0(r16)
 200a3ec:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 200a3f0:	00800044 	movi	r2,1
 200a3f4:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 200a3f8:	880b883a 	mov	r5,r17
 200a3fc:	e13ffb17 	ldw	r4,-20(fp)
 200a400:	200a87c0 	call	200a87c <_malloc_r>
 200a404:	1027883a 	mov	r19,r2
 200a408:	98000e1e 	bne	r19,zero,200a444 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 200a40c:	8080030b 	ldhu	r2,12(r16)
 200a410:	10bfffcc 	andi	r2,r2,65535
 200a414:	1080800c 	andi	r2,r2,512
 200a418:	1000221e 	bne	r2,zero,200a4a4 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 200a41c:	8080030b 	ldhu	r2,12(r16)
 200a420:	10800094 	ori	r2,r2,2
 200a424:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 200a428:	808010c4 	addi	r2,r16,67
 200a42c:	80800015 	stw	r2,0(r16)
 200a430:	80800017 	ldw	r2,0(r16)
 200a434:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 200a438:	00800044 	movi	r2,1
 200a43c:	80800515 	stw	r2,20(r16)
 200a440:	00001806 	br	200a4a4 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 200a444:	e0fffb17 	ldw	r3,-20(fp)
 200a448:	00808074 	movhi	r2,513
 200a44c:	10a3e904 	addi	r2,r2,-28764
 200a450:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 200a454:	8080030b 	ldhu	r2,12(r16)
 200a458:	10802014 	ori	r2,r2,128
 200a45c:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 200a460:	84c00015 	stw	r19,0(r16)
 200a464:	80800017 	ldw	r2,0(r16)
 200a468:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 200a46c:	8805883a 	mov	r2,r17
 200a470:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 200a474:	90000b26 	beq	r18,zero,200a4a4 <__smakebuf_r+0x208>
 200a478:	8080038b 	ldhu	r2,14(r16)
 200a47c:	10bfffcc 	andi	r2,r2,65535
 200a480:	10a0001c 	xori	r2,r2,32768
 200a484:	10a00004 	addi	r2,r2,-32768
 200a488:	100b883a 	mov	r5,r2
 200a48c:	e13ffb17 	ldw	r4,-20(fp)
 200a490:	20101a80 	call	20101a8 <_isatty_r>
 200a494:	10000326 	beq	r2,zero,200a4a4 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 200a498:	8080030b 	ldhu	r2,12(r16)
 200a49c:	10800054 	ori	r2,r2,1
 200a4a0:	8080030d 	sth	r2,12(r16)
    }
}
 200a4a4:	e6fffc04 	addi	sp,fp,-16
 200a4a8:	dfc00517 	ldw	ra,20(sp)
 200a4ac:	df000417 	ldw	fp,16(sp)
 200a4b0:	dcc00317 	ldw	r19,12(sp)
 200a4b4:	dc800217 	ldw	r18,8(sp)
 200a4b8:	dc400117 	ldw	r17,4(sp)
 200a4bc:	dc000017 	ldw	r16,0(sp)
 200a4c0:	dec00604 	addi	sp,sp,24
 200a4c4:	f800283a 	ret

0200a4c8 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 200a4c8:	defff104 	addi	sp,sp,-60
 200a4cc:	dfc00e15 	stw	ra,56(sp)
 200a4d0:	df000d15 	stw	fp,52(sp)
 200a4d4:	df000d04 	addi	fp,sp,52
 200a4d8:	e13ffe15 	stw	r4,-8(fp)
 200a4dc:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 200a4e0:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 200a4e4:	008080b4 	movhi	r2,514
 200a4e8:	10b45c04 	addi	r2,r2,-11920
 200a4ec:	10800217 	ldw	r2,8(r2)
 200a4f0:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 200a4f4:	e0bff817 	ldw	r2,-32(fp)
 200a4f8:	10c00117 	ldw	r3,4(r2)
 200a4fc:	00bfff04 	movi	r2,-4
 200a500:	1884703a 	and	r2,r3,r2
 200a504:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 200a508:	e0fff817 	ldw	r3,-32(fp)
 200a50c:	e0bff917 	ldw	r2,-28(fp)
 200a510:	1885883a 	add	r2,r3,r2
 200a514:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 200a518:	d0e71f17 	ldw	r3,-25476(gp)
 200a51c:	e0bfff17 	ldw	r2,-4(fp)
 200a520:	1885883a 	add	r2,r3,r2
 200a524:	10800404 	addi	r2,r2,16
 200a528:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 200a52c:	00840004 	movi	r2,4096
 200a530:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 200a534:	d0a00917 	ldw	r2,-32732(gp)
 200a538:	10bfffe0 	cmpeqi	r2,r2,-1
 200a53c:	1000081e 	bne	r2,zero,200a560 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 200a540:	e0fffb17 	ldw	r3,-20(fp)
 200a544:	e0bff617 	ldw	r2,-40(fp)
 200a548:	1885883a 	add	r2,r3,r2
 200a54c:	10ffffc4 	addi	r3,r2,-1
 200a550:	e0bffb17 	ldw	r2,-20(fp)
 200a554:	0085c83a 	sub	r2,zero,r2
 200a558:	1884703a 	and	r2,r3,r2
 200a55c:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 200a560:	e0bff617 	ldw	r2,-40(fp)
 200a564:	100b883a 	mov	r5,r2
 200a568:	e13ffe17 	ldw	r4,-8(fp)
 200a56c:	200e1700 	call	200e170 <_sbrk_r>
 200a570:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 200a574:	e0bff317 	ldw	r2,-52(fp)
 200a578:	10bfffe0 	cmpeqi	r2,r2,-1
 200a57c:	1000b91e 	bne	r2,zero,200a864 <malloc_extend_top+0x39c>
 200a580:	e0fff317 	ldw	r3,-52(fp)
 200a584:	e0bffa17 	ldw	r2,-24(fp)
 200a588:	1880042e 	bgeu	r3,r2,200a59c <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 200a58c:	008080b4 	movhi	r2,514
 200a590:	10b45c04 	addi	r2,r2,-11920
 200a594:	e0fff817 	ldw	r3,-32(fp)
 200a598:	1880b21e 	bne	r3,r2,200a864 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 200a59c:	008080b4 	movhi	r2,514
 200a5a0:	10812704 	addi	r2,r2,1180
 200a5a4:	10800017 	ldw	r2,0(r2)
 200a5a8:	1007883a 	mov	r3,r2
 200a5ac:	e0bff617 	ldw	r2,-40(fp)
 200a5b0:	1885883a 	add	r2,r3,r2
 200a5b4:	1007883a 	mov	r3,r2
 200a5b8:	008080b4 	movhi	r2,514
 200a5bc:	10812704 	addi	r2,r2,1180
 200a5c0:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 200a5c4:	e0fff317 	ldw	r3,-52(fp)
 200a5c8:	e0bffa17 	ldw	r2,-24(fp)
 200a5cc:	1880101e 	bne	r3,r2,200a610 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 200a5d0:	e0bffb17 	ldw	r2,-20(fp)
 200a5d4:	10ffffc4 	addi	r3,r2,-1
 200a5d8:	e0bffa17 	ldw	r2,-24(fp)
 200a5dc:	1884703a 	and	r2,r3,r2
 200a5e0:	10000b1e 	bne	r2,zero,200a610 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 200a5e4:	e0fff617 	ldw	r3,-40(fp)
 200a5e8:	e0bff917 	ldw	r2,-28(fp)
 200a5ec:	1885883a 	add	r2,r3,r2
 200a5f0:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200a5f4:	008080b4 	movhi	r2,514
 200a5f8:	10b45c04 	addi	r2,r2,-11920
 200a5fc:	10800217 	ldw	r2,8(r2)
 200a600:	e0fffc17 	ldw	r3,-16(fp)
 200a604:	18c00054 	ori	r3,r3,1
 200a608:	10c00115 	stw	r3,4(r2)
 200a60c:	00008006 	br	200a810 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 200a610:	d0a00917 	ldw	r2,-32732(gp)
 200a614:	10bfffd8 	cmpnei	r2,r2,-1
 200a618:	1000031e 	bne	r2,zero,200a628 <malloc_extend_top+0x160>
      sbrk_base = brk;
 200a61c:	e0bff317 	ldw	r2,-52(fp)
 200a620:	d0a00915 	stw	r2,-32732(gp)
 200a624:	00000a06 	br	200a650 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 200a628:	008080b4 	movhi	r2,514
 200a62c:	10812704 	addi	r2,r2,1180
 200a630:	10c00017 	ldw	r3,0(r2)
 200a634:	e13ff317 	ldw	r4,-52(fp)
 200a638:	e0bffa17 	ldw	r2,-24(fp)
 200a63c:	2085c83a 	sub	r2,r4,r2
 200a640:	1887883a 	add	r3,r3,r2
 200a644:	008080b4 	movhi	r2,514
 200a648:	10812704 	addi	r2,r2,1180
 200a64c:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 200a650:	e0bff317 	ldw	r2,-52(fp)
 200a654:	10800204 	addi	r2,r2,8
 200a658:	108001cc 	andi	r2,r2,7
 200a65c:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 200a660:	e0bffd17 	ldw	r2,-12(fp)
 200a664:	10000926 	beq	r2,zero,200a68c <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 200a668:	00c00204 	movi	r3,8
 200a66c:	e0bffd17 	ldw	r2,-12(fp)
 200a670:	1885c83a 	sub	r2,r3,r2
 200a674:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 200a678:	e0fff317 	ldw	r3,-52(fp)
 200a67c:	e0bff417 	ldw	r2,-48(fp)
 200a680:	1885883a 	add	r2,r3,r2
 200a684:	e0bff315 	stw	r2,-52(fp)
 200a688:	00000106 	br	200a690 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 200a68c:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 200a690:	e0fff317 	ldw	r3,-52(fp)
 200a694:	e0bff617 	ldw	r2,-40(fp)
 200a698:	1885883a 	add	r2,r3,r2
 200a69c:	1007883a 	mov	r3,r2
 200a6a0:	e0bffb17 	ldw	r2,-20(fp)
 200a6a4:	10bfffc4 	addi	r2,r2,-1
 200a6a8:	1884703a 	and	r2,r3,r2
 200a6ac:	e0fffb17 	ldw	r3,-20(fp)
 200a6b0:	1885c83a 	sub	r2,r3,r2
 200a6b4:	e0fff417 	ldw	r3,-48(fp)
 200a6b8:	1885883a 	add	r2,r3,r2
 200a6bc:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 200a6c0:	e0bff417 	ldw	r2,-48(fp)
 200a6c4:	100b883a 	mov	r5,r2
 200a6c8:	e13ffe17 	ldw	r4,-8(fp)
 200a6cc:	200e1700 	call	200e170 <_sbrk_r>
 200a6d0:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 200a6d4:	e0bff517 	ldw	r2,-44(fp)
 200a6d8:	10bfffd8 	cmpnei	r2,r2,-1
 200a6dc:	1000051e 	bne	r2,zero,200a6f4 <malloc_extend_top+0x22c>
      {
	correction = 0;
 200a6e0:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 200a6e4:	00800044 	movi	r2,1
 200a6e8:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 200a6ec:	e0bff317 	ldw	r2,-52(fp)
 200a6f0:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 200a6f4:	008080b4 	movhi	r2,514
 200a6f8:	10812704 	addi	r2,r2,1180
 200a6fc:	10800017 	ldw	r2,0(r2)
 200a700:	1007883a 	mov	r3,r2
 200a704:	e0bff417 	ldw	r2,-48(fp)
 200a708:	1885883a 	add	r2,r3,r2
 200a70c:	1007883a 	mov	r3,r2
 200a710:	008080b4 	movhi	r2,514
 200a714:	10812704 	addi	r2,r2,1180
 200a718:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 200a71c:	008080b4 	movhi	r2,514
 200a720:	10b45c04 	addi	r2,r2,-11920
 200a724:	e0fff317 	ldw	r3,-52(fp)
 200a728:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 200a72c:	e0fff517 	ldw	r3,-44(fp)
 200a730:	e0bff317 	ldw	r2,-52(fp)
 200a734:	1885c83a 	sub	r2,r3,r2
 200a738:	1007883a 	mov	r3,r2
 200a73c:	e0bff417 	ldw	r2,-48(fp)
 200a740:	1885883a 	add	r2,r3,r2
 200a744:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200a748:	008080b4 	movhi	r2,514
 200a74c:	10b45c04 	addi	r2,r2,-11920
 200a750:	10800217 	ldw	r2,8(r2)
 200a754:	e0fffc17 	ldw	r3,-16(fp)
 200a758:	18c00054 	ori	r3,r3,1
 200a75c:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 200a760:	008080b4 	movhi	r2,514
 200a764:	10b45c04 	addi	r2,r2,-11920
 200a768:	e0fff817 	ldw	r3,-32(fp)
 200a76c:	18802826 	beq	r3,r2,200a810 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 200a770:	e0bff917 	ldw	r2,-28(fp)
 200a774:	10800428 	cmpgeui	r2,r2,16
 200a778:	1000061e 	bne	r2,zero,200a794 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 200a77c:	008080b4 	movhi	r2,514
 200a780:	10b45c04 	addi	r2,r2,-11920
 200a784:	10800217 	ldw	r2,8(r2)
 200a788:	00c00044 	movi	r3,1
 200a78c:	10c00115 	stw	r3,4(r2)
        return;
 200a790:	00003506 	br	200a868 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 200a794:	e0bff917 	ldw	r2,-28(fp)
 200a798:	10fffd04 	addi	r3,r2,-12
 200a79c:	00bffe04 	movi	r2,-8
 200a7a0:	1884703a 	and	r2,r3,r2
 200a7a4:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 200a7a8:	e0bff817 	ldw	r2,-32(fp)
 200a7ac:	10800117 	ldw	r2,4(r2)
 200a7b0:	10c0004c 	andi	r3,r2,1
 200a7b4:	e0bff917 	ldw	r2,-28(fp)
 200a7b8:	1886b03a 	or	r3,r3,r2
 200a7bc:	e0bff817 	ldw	r2,-32(fp)
 200a7c0:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 200a7c4:	e0fff817 	ldw	r3,-32(fp)
 200a7c8:	e0bff917 	ldw	r2,-28(fp)
 200a7cc:	1885883a 	add	r2,r3,r2
 200a7d0:	00c00144 	movi	r3,5
 200a7d4:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 200a7d8:	e0bff917 	ldw	r2,-28(fp)
 200a7dc:	10800104 	addi	r2,r2,4
 200a7e0:	e0fff817 	ldw	r3,-32(fp)
 200a7e4:	1885883a 	add	r2,r3,r2
 200a7e8:	00c00144 	movi	r3,5
 200a7ec:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 200a7f0:	e0bff917 	ldw	r2,-28(fp)
 200a7f4:	10800430 	cmpltui	r2,r2,16
 200a7f8:	1000051e 	bne	r2,zero,200a810 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 200a7fc:	e0bff817 	ldw	r2,-32(fp)
 200a800:	10800204 	addi	r2,r2,8
 200a804:	100b883a 	mov	r5,r2
 200a808:	e13ffe17 	ldw	r4,-8(fp)
 200a80c:	200923c0 	call	200923c <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 200a810:	008080b4 	movhi	r2,514
 200a814:	10812704 	addi	r2,r2,1180
 200a818:	10800017 	ldw	r2,0(r2)
 200a81c:	1007883a 	mov	r3,r2
 200a820:	d0a72017 	ldw	r2,-25472(gp)
 200a824:	10c0042e 	bgeu	r2,r3,200a838 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 200a828:	008080b4 	movhi	r2,514
 200a82c:	10812704 	addi	r2,r2,1180
 200a830:	10800017 	ldw	r2,0(r2)
 200a834:	d0a72015 	stw	r2,-25472(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 200a838:	008080b4 	movhi	r2,514
 200a83c:	10812704 	addi	r2,r2,1180
 200a840:	10800017 	ldw	r2,0(r2)
 200a844:	1007883a 	mov	r3,r2
 200a848:	d0a72117 	ldw	r2,-25468(gp)
 200a84c:	10c0062e 	bgeu	r2,r3,200a868 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 200a850:	008080b4 	movhi	r2,514
 200a854:	10812704 	addi	r2,r2,1180
 200a858:	10800017 	ldw	r2,0(r2)
 200a85c:	d0a72115 	stw	r2,-25468(gp)
 200a860:	00000106 	br	200a868 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 200a864:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 200a868:	e037883a 	mov	sp,fp
 200a86c:	dfc00117 	ldw	ra,4(sp)
 200a870:	df000017 	ldw	fp,0(sp)
 200a874:	dec00204 	addi	sp,sp,8
 200a878:	f800283a 	ret

0200a87c <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 200a87c:	deffef04 	addi	sp,sp,-68
 200a880:	dfc01015 	stw	ra,64(sp)
 200a884:	df000f15 	stw	fp,60(sp)
 200a888:	df000f04 	addi	fp,sp,60
 200a88c:	e13ffe15 	stw	r4,-8(fp)
 200a890:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 200a894:	e0bfff17 	ldw	r2,-4(fp)
 200a898:	108002c4 	addi	r2,r2,11
 200a89c:	108005f0 	cmpltui	r2,r2,23
 200a8a0:	1000051e 	bne	r2,zero,200a8b8 <_malloc_r+0x3c>
 200a8a4:	e0bfff17 	ldw	r2,-4(fp)
 200a8a8:	10c002c4 	addi	r3,r2,11
 200a8ac:	00bffe04 	movi	r2,-8
 200a8b0:	1884703a 	and	r2,r3,r2
 200a8b4:	00000106 	br	200a8bc <_malloc_r+0x40>
 200a8b8:	00800404 	movi	r2,16
 200a8bc:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200a8c0:	e0bffa17 	ldw	r2,-24(fp)
 200a8c4:	10000316 	blt	r2,zero,200a8d4 <_malloc_r+0x58>
 200a8c8:	e0fffa17 	ldw	r3,-24(fp)
 200a8cc:	e0bfff17 	ldw	r2,-4(fp)
 200a8d0:	1880052e 	bgeu	r3,r2,200a8e8 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 200a8d4:	e0bffe17 	ldw	r2,-8(fp)
 200a8d8:	00c00304 	movi	r3,12
 200a8dc:	10c00015 	stw	r3,0(r2)
    return 0;
 200a8e0:	0005883a 	mov	r2,zero
 200a8e4:	0002bf06 	br	200b3e4 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 200a8e8:	e13ffe17 	ldw	r4,-8(fp)
 200a8ec:	2011cd00 	call	2011cd0 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 200a8f0:	e0bffa17 	ldw	r2,-24(fp)
 200a8f4:	10807e28 	cmpgeui	r2,r2,504
 200a8f8:	10003f1e 	bne	r2,zero,200a9f8 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 200a8fc:	e0bffa17 	ldw	r2,-24(fp)
 200a900:	1004d0fa 	srli	r2,r2,3
 200a904:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 200a908:	e0bff217 	ldw	r2,-56(fp)
 200a90c:	10800044 	addi	r2,r2,1
 200a910:	1085883a 	add	r2,r2,r2
 200a914:	1085883a 	add	r2,r2,r2
 200a918:	1087883a 	add	r3,r2,r2
 200a91c:	008080b4 	movhi	r2,514
 200a920:	10b45c04 	addi	r2,r2,-11920
 200a924:	1885883a 	add	r2,r3,r2
 200a928:	10bffe04 	addi	r2,r2,-8
 200a92c:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 200a930:	e0bff917 	ldw	r2,-28(fp)
 200a934:	10800317 	ldw	r2,12(r2)
 200a938:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 200a93c:	e0fff117 	ldw	r3,-60(fp)
 200a940:	e0bff917 	ldw	r2,-28(fp)
 200a944:	1880061e 	bne	r3,r2,200a960 <_malloc_r+0xe4>
    {
      q = next_bin(q);
 200a948:	e0bff917 	ldw	r2,-28(fp)
 200a94c:	10800204 	addi	r2,r2,8
 200a950:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 200a954:	e0bff917 	ldw	r2,-28(fp)
 200a958:	10800317 	ldw	r2,12(r2)
 200a95c:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 200a960:	e0fff117 	ldw	r3,-60(fp)
 200a964:	e0bff917 	ldw	r2,-28(fp)
 200a968:	18801f26 	beq	r3,r2,200a9e8 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 200a96c:	e0bff117 	ldw	r2,-60(fp)
 200a970:	10c00117 	ldw	r3,4(r2)
 200a974:	00bfff04 	movi	r2,-4
 200a978:	1884703a 	and	r2,r3,r2
 200a97c:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 200a980:	e0bff117 	ldw	r2,-60(fp)
 200a984:	10800317 	ldw	r2,12(r2)
 200a988:	e0bff815 	stw	r2,-32(fp)
 200a98c:	e0bff117 	ldw	r2,-60(fp)
 200a990:	10800217 	ldw	r2,8(r2)
 200a994:	e0bff715 	stw	r2,-36(fp)
 200a998:	e0bff717 	ldw	r2,-36(fp)
 200a99c:	e0fff817 	ldw	r3,-32(fp)
 200a9a0:	10c00315 	stw	r3,12(r2)
 200a9a4:	e0bff817 	ldw	r2,-32(fp)
 200a9a8:	e0fff717 	ldw	r3,-36(fp)
 200a9ac:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 200a9b0:	e0fff117 	ldw	r3,-60(fp)
 200a9b4:	e0bffb17 	ldw	r2,-20(fp)
 200a9b8:	1885883a 	add	r2,r3,r2
 200a9bc:	e13ff117 	ldw	r4,-60(fp)
 200a9c0:	e0fffb17 	ldw	r3,-20(fp)
 200a9c4:	20c7883a 	add	r3,r4,r3
 200a9c8:	18c00117 	ldw	r3,4(r3)
 200a9cc:	18c00054 	ori	r3,r3,1
 200a9d0:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200a9d4:	e13ffe17 	ldw	r4,-8(fp)
 200a9d8:	2011df00 	call	2011df0 <__malloc_unlock>
      return chunk2mem(victim);
 200a9dc:	e0bff117 	ldw	r2,-60(fp)
 200a9e0:	10800204 	addi	r2,r2,8
 200a9e4:	00027f06 	br	200b3e4 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 200a9e8:	e0bff217 	ldw	r2,-56(fp)
 200a9ec:	10800084 	addi	r2,r2,2
 200a9f0:	e0bff215 	stw	r2,-56(fp)
 200a9f4:	00007306 	br	200abc4 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 200a9f8:	e0bffa17 	ldw	r2,-24(fp)
 200a9fc:	1004d27a 	srli	r2,r2,9
 200aa00:	1000031e 	bne	r2,zero,200aa10 <_malloc_r+0x194>
 200aa04:	e0bffa17 	ldw	r2,-24(fp)
 200aa08:	1004d0fa 	srli	r2,r2,3
 200aa0c:	00002906 	br	200aab4 <_malloc_r+0x238>
 200aa10:	e0bffa17 	ldw	r2,-24(fp)
 200aa14:	1004d27a 	srli	r2,r2,9
 200aa18:	10800168 	cmpgeui	r2,r2,5
 200aa1c:	1000041e 	bne	r2,zero,200aa30 <_malloc_r+0x1b4>
 200aa20:	e0bffa17 	ldw	r2,-24(fp)
 200aa24:	1004d1ba 	srli	r2,r2,6
 200aa28:	10800e04 	addi	r2,r2,56
 200aa2c:	00002106 	br	200aab4 <_malloc_r+0x238>
 200aa30:	e0bffa17 	ldw	r2,-24(fp)
 200aa34:	1004d27a 	srli	r2,r2,9
 200aa38:	10800568 	cmpgeui	r2,r2,21
 200aa3c:	1000041e 	bne	r2,zero,200aa50 <_malloc_r+0x1d4>
 200aa40:	e0bffa17 	ldw	r2,-24(fp)
 200aa44:	1004d27a 	srli	r2,r2,9
 200aa48:	108016c4 	addi	r2,r2,91
 200aa4c:	00001906 	br	200aab4 <_malloc_r+0x238>
 200aa50:	e0bffa17 	ldw	r2,-24(fp)
 200aa54:	1004d27a 	srli	r2,r2,9
 200aa58:	10801568 	cmpgeui	r2,r2,85
 200aa5c:	1000041e 	bne	r2,zero,200aa70 <_malloc_r+0x1f4>
 200aa60:	e0bffa17 	ldw	r2,-24(fp)
 200aa64:	1004d33a 	srli	r2,r2,12
 200aa68:	10801b84 	addi	r2,r2,110
 200aa6c:	00001106 	br	200aab4 <_malloc_r+0x238>
 200aa70:	e0bffa17 	ldw	r2,-24(fp)
 200aa74:	1004d27a 	srli	r2,r2,9
 200aa78:	10805568 	cmpgeui	r2,r2,341
 200aa7c:	1000041e 	bne	r2,zero,200aa90 <_malloc_r+0x214>
 200aa80:	e0bffa17 	ldw	r2,-24(fp)
 200aa84:	1004d3fa 	srli	r2,r2,15
 200aa88:	10801dc4 	addi	r2,r2,119
 200aa8c:	00000906 	br	200aab4 <_malloc_r+0x238>
 200aa90:	e0bffa17 	ldw	r2,-24(fp)
 200aa94:	1004d27a 	srli	r2,r2,9
 200aa98:	10815568 	cmpgeui	r2,r2,1365
 200aa9c:	1000041e 	bne	r2,zero,200aab0 <_malloc_r+0x234>
 200aaa0:	e0bffa17 	ldw	r2,-24(fp)
 200aaa4:	1004d4ba 	srli	r2,r2,18
 200aaa8:	10801f04 	addi	r2,r2,124
 200aaac:	00000106 	br	200aab4 <_malloc_r+0x238>
 200aab0:	00801f84 	movi	r2,126
 200aab4:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 200aab8:	e0bff217 	ldw	r2,-56(fp)
 200aabc:	10800044 	addi	r2,r2,1
 200aac0:	1085883a 	add	r2,r2,r2
 200aac4:	1085883a 	add	r2,r2,r2
 200aac8:	1087883a 	add	r3,r2,r2
 200aacc:	008080b4 	movhi	r2,514
 200aad0:	10b45c04 	addi	r2,r2,-11920
 200aad4:	1885883a 	add	r2,r3,r2
 200aad8:	10bffe04 	addi	r2,r2,-8
 200aadc:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200aae0:	e0bff317 	ldw	r2,-52(fp)
 200aae4:	10800317 	ldw	r2,12(r2)
 200aae8:	e0bff115 	stw	r2,-60(fp)
 200aaec:	00002f06 	br	200abac <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 200aaf0:	e0bff117 	ldw	r2,-60(fp)
 200aaf4:	10c00117 	ldw	r3,4(r2)
 200aaf8:	00bfff04 	movi	r2,-4
 200aafc:	1884703a 	and	r2,r3,r2
 200ab00:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 200ab04:	e0fffb17 	ldw	r3,-20(fp)
 200ab08:	e0bffa17 	ldw	r2,-24(fp)
 200ab0c:	1885c83a 	sub	r2,r3,r2
 200ab10:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 200ab14:	e0bff417 	ldw	r2,-48(fp)
 200ab18:	10800410 	cmplti	r2,r2,16
 200ab1c:	1000041e 	bne	r2,zero,200ab30 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 200ab20:	e0bff217 	ldw	r2,-56(fp)
 200ab24:	10bfffc4 	addi	r2,r2,-1
 200ab28:	e0bff215 	stw	r2,-56(fp)
        break;   
 200ab2c:	00002206 	br	200abb8 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 200ab30:	e0bff417 	ldw	r2,-48(fp)
 200ab34:	10001a16 	blt	r2,zero,200aba0 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 200ab38:	e0bff117 	ldw	r2,-60(fp)
 200ab3c:	10800317 	ldw	r2,12(r2)
 200ab40:	e0bff815 	stw	r2,-32(fp)
 200ab44:	e0bff117 	ldw	r2,-60(fp)
 200ab48:	10800217 	ldw	r2,8(r2)
 200ab4c:	e0bff715 	stw	r2,-36(fp)
 200ab50:	e0bff717 	ldw	r2,-36(fp)
 200ab54:	e0fff817 	ldw	r3,-32(fp)
 200ab58:	10c00315 	stw	r3,12(r2)
 200ab5c:	e0bff817 	ldw	r2,-32(fp)
 200ab60:	e0fff717 	ldw	r3,-36(fp)
 200ab64:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 200ab68:	e0fff117 	ldw	r3,-60(fp)
 200ab6c:	e0bffb17 	ldw	r2,-20(fp)
 200ab70:	1885883a 	add	r2,r3,r2
 200ab74:	e13ff117 	ldw	r4,-60(fp)
 200ab78:	e0fffb17 	ldw	r3,-20(fp)
 200ab7c:	20c7883a 	add	r3,r4,r3
 200ab80:	18c00117 	ldw	r3,4(r3)
 200ab84:	18c00054 	ori	r3,r3,1
 200ab88:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 200ab8c:	e13ffe17 	ldw	r4,-8(fp)
 200ab90:	2011df00 	call	2011df0 <__malloc_unlock>
        return chunk2mem(victim);
 200ab94:	e0bff117 	ldw	r2,-60(fp)
 200ab98:	10800204 	addi	r2,r2,8
 200ab9c:	00021106 	br	200b3e4 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200aba0:	e0bff117 	ldw	r2,-60(fp)
 200aba4:	10800317 	ldw	r2,12(r2)
 200aba8:	e0bff115 	stw	r2,-60(fp)
 200abac:	e0fff117 	ldw	r3,-60(fp)
 200abb0:	e0bff317 	ldw	r2,-52(fp)
 200abb4:	18bfce1e 	bne	r3,r2,200aaf0 <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 200abb8:	e0bff217 	ldw	r2,-56(fp)
 200abbc:	10800044 	addi	r2,r2,1
 200abc0:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 200abc4:	008080b4 	movhi	r2,514
 200abc8:	10b45e04 	addi	r2,r2,-11912
 200abcc:	10800217 	ldw	r2,8(r2)
 200abd0:	e0bff115 	stw	r2,-60(fp)
 200abd4:	008080b4 	movhi	r2,514
 200abd8:	10b45e04 	addi	r2,r2,-11912
 200abdc:	e0fff117 	ldw	r3,-60(fp)
 200abe0:	1880e626 	beq	r3,r2,200af7c <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 200abe4:	e0bff117 	ldw	r2,-60(fp)
 200abe8:	10c00117 	ldw	r3,4(r2)
 200abec:	00bfff04 	movi	r2,-4
 200abf0:	1884703a 	and	r2,r3,r2
 200abf4:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 200abf8:	e0fffb17 	ldw	r3,-20(fp)
 200abfc:	e0bffa17 	ldw	r2,-24(fp)
 200ac00:	1885c83a 	sub	r2,r3,r2
 200ac04:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 200ac08:	e0bff417 	ldw	r2,-48(fp)
 200ac0c:	10800410 	cmplti	r2,r2,16
 200ac10:	1000271e 	bne	r2,zero,200acb0 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 200ac14:	e0fff117 	ldw	r3,-60(fp)
 200ac18:	e0bffa17 	ldw	r2,-24(fp)
 200ac1c:	1885883a 	add	r2,r3,r2
 200ac20:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 200ac24:	e0bffa17 	ldw	r2,-24(fp)
 200ac28:	10c00054 	ori	r3,r2,1
 200ac2c:	e0bff117 	ldw	r2,-60(fp)
 200ac30:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 200ac34:	00c080b4 	movhi	r3,514
 200ac38:	18f45e04 	addi	r3,r3,-11912
 200ac3c:	008080b4 	movhi	r2,514
 200ac40:	10b45e04 	addi	r2,r2,-11912
 200ac44:	e13ffc17 	ldw	r4,-16(fp)
 200ac48:	11000315 	stw	r4,12(r2)
 200ac4c:	10800317 	ldw	r2,12(r2)
 200ac50:	18800215 	stw	r2,8(r3)
 200ac54:	008080b4 	movhi	r2,514
 200ac58:	10b45e04 	addi	r2,r2,-11912
 200ac5c:	e0fffc17 	ldw	r3,-16(fp)
 200ac60:	18800315 	stw	r2,12(r3)
 200ac64:	e0bffc17 	ldw	r2,-16(fp)
 200ac68:	10c00317 	ldw	r3,12(r2)
 200ac6c:	e0bffc17 	ldw	r2,-16(fp)
 200ac70:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 200ac74:	e0bff417 	ldw	r2,-48(fp)
 200ac78:	10800054 	ori	r2,r2,1
 200ac7c:	1007883a 	mov	r3,r2
 200ac80:	e0bffc17 	ldw	r2,-16(fp)
 200ac84:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 200ac88:	e0bff417 	ldw	r2,-48(fp)
 200ac8c:	e0fffc17 	ldw	r3,-16(fp)
 200ac90:	1885883a 	add	r2,r3,r2
 200ac94:	e0fff417 	ldw	r3,-48(fp)
 200ac98:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200ac9c:	e13ffe17 	ldw	r4,-8(fp)
 200aca0:	2011df00 	call	2011df0 <__malloc_unlock>
      return chunk2mem(victim);
 200aca4:	e0bff117 	ldw	r2,-60(fp)
 200aca8:	10800204 	addi	r2,r2,8
 200acac:	0001cd06 	br	200b3e4 <_malloc_r+0xb68>
    }

    clear_last_remainder;
 200acb0:	00c080b4 	movhi	r3,514
 200acb4:	18f45e04 	addi	r3,r3,-11912
 200acb8:	008080b4 	movhi	r2,514
 200acbc:	10b45e04 	addi	r2,r2,-11912
 200acc0:	010080b4 	movhi	r4,514
 200acc4:	21345e04 	addi	r4,r4,-11912
 200acc8:	11000315 	stw	r4,12(r2)
 200accc:	10800317 	ldw	r2,12(r2)
 200acd0:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 200acd4:	e0bff417 	ldw	r2,-48(fp)
 200acd8:	10000e16 	blt	r2,zero,200ad14 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 200acdc:	e0fff117 	ldw	r3,-60(fp)
 200ace0:	e0bffb17 	ldw	r2,-20(fp)
 200ace4:	1885883a 	add	r2,r3,r2
 200ace8:	e13ff117 	ldw	r4,-60(fp)
 200acec:	e0fffb17 	ldw	r3,-20(fp)
 200acf0:	20c7883a 	add	r3,r4,r3
 200acf4:	18c00117 	ldw	r3,4(r3)
 200acf8:	18c00054 	ori	r3,r3,1
 200acfc:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200ad00:	e13ffe17 	ldw	r4,-8(fp)
 200ad04:	2011df00 	call	2011df0 <__malloc_unlock>
      return chunk2mem(victim);
 200ad08:	e0bff117 	ldw	r2,-60(fp)
 200ad0c:	10800204 	addi	r2,r2,8
 200ad10:	0001b406 	br	200b3e4 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 200ad14:	e0bffb17 	ldw	r2,-20(fp)
 200ad18:	10808028 	cmpgeui	r2,r2,512
 200ad1c:	10002c1e 	bne	r2,zero,200add0 <_malloc_r+0x554>
 200ad20:	e0bffb17 	ldw	r2,-20(fp)
 200ad24:	1004d0fa 	srli	r2,r2,3
 200ad28:	e0bffd15 	stw	r2,-12(fp)
 200ad2c:	00c080b4 	movhi	r3,514
 200ad30:	18f45c04 	addi	r3,r3,-11920
 200ad34:	008080b4 	movhi	r2,514
 200ad38:	10b45c04 	addi	r2,r2,-11920
 200ad3c:	11000117 	ldw	r4,4(r2)
 200ad40:	e0bffd17 	ldw	r2,-12(fp)
 200ad44:	1000010e 	bge	r2,zero,200ad4c <_malloc_r+0x4d0>
 200ad48:	108000c4 	addi	r2,r2,3
 200ad4c:	1005d0ba 	srai	r2,r2,2
 200ad50:	100b883a 	mov	r5,r2
 200ad54:	00800044 	movi	r2,1
 200ad58:	1144983a 	sll	r2,r2,r5
 200ad5c:	2084b03a 	or	r2,r4,r2
 200ad60:	18800115 	stw	r2,4(r3)
 200ad64:	e0bffd17 	ldw	r2,-12(fp)
 200ad68:	10800044 	addi	r2,r2,1
 200ad6c:	1085883a 	add	r2,r2,r2
 200ad70:	1085883a 	add	r2,r2,r2
 200ad74:	1087883a 	add	r3,r2,r2
 200ad78:	008080b4 	movhi	r2,514
 200ad7c:	10b45c04 	addi	r2,r2,-11920
 200ad80:	1885883a 	add	r2,r3,r2
 200ad84:	10bffe04 	addi	r2,r2,-8
 200ad88:	e0bff815 	stw	r2,-32(fp)
 200ad8c:	e0bff817 	ldw	r2,-32(fp)
 200ad90:	10800217 	ldw	r2,8(r2)
 200ad94:	e0bff715 	stw	r2,-36(fp)
 200ad98:	e0bff117 	ldw	r2,-60(fp)
 200ad9c:	e0fff817 	ldw	r3,-32(fp)
 200ada0:	10c00315 	stw	r3,12(r2)
 200ada4:	e0bff117 	ldw	r2,-60(fp)
 200ada8:	e0fff717 	ldw	r3,-36(fp)
 200adac:	10c00215 	stw	r3,8(r2)
 200adb0:	e0bff817 	ldw	r2,-32(fp)
 200adb4:	e0fff117 	ldw	r3,-60(fp)
 200adb8:	10c00215 	stw	r3,8(r2)
 200adbc:	e0bff817 	ldw	r2,-32(fp)
 200adc0:	10c00217 	ldw	r3,8(r2)
 200adc4:	e0bff717 	ldw	r2,-36(fp)
 200adc8:	10c00315 	stw	r3,12(r2)
 200adcc:	00006b06 	br	200af7c <_malloc_r+0x700>
 200add0:	e0bffb17 	ldw	r2,-20(fp)
 200add4:	1004d27a 	srli	r2,r2,9
 200add8:	1000031e 	bne	r2,zero,200ade8 <_malloc_r+0x56c>
 200addc:	e0bffb17 	ldw	r2,-20(fp)
 200ade0:	1004d0fa 	srli	r2,r2,3
 200ade4:	00002906 	br	200ae8c <_malloc_r+0x610>
 200ade8:	e0bffb17 	ldw	r2,-20(fp)
 200adec:	1004d27a 	srli	r2,r2,9
 200adf0:	10800168 	cmpgeui	r2,r2,5
 200adf4:	1000041e 	bne	r2,zero,200ae08 <_malloc_r+0x58c>
 200adf8:	e0bffb17 	ldw	r2,-20(fp)
 200adfc:	1004d1ba 	srli	r2,r2,6
 200ae00:	10800e04 	addi	r2,r2,56
 200ae04:	00002106 	br	200ae8c <_malloc_r+0x610>
 200ae08:	e0bffb17 	ldw	r2,-20(fp)
 200ae0c:	1004d27a 	srli	r2,r2,9
 200ae10:	10800568 	cmpgeui	r2,r2,21
 200ae14:	1000041e 	bne	r2,zero,200ae28 <_malloc_r+0x5ac>
 200ae18:	e0bffb17 	ldw	r2,-20(fp)
 200ae1c:	1004d27a 	srli	r2,r2,9
 200ae20:	108016c4 	addi	r2,r2,91
 200ae24:	00001906 	br	200ae8c <_malloc_r+0x610>
 200ae28:	e0bffb17 	ldw	r2,-20(fp)
 200ae2c:	1004d27a 	srli	r2,r2,9
 200ae30:	10801568 	cmpgeui	r2,r2,85
 200ae34:	1000041e 	bne	r2,zero,200ae48 <_malloc_r+0x5cc>
 200ae38:	e0bffb17 	ldw	r2,-20(fp)
 200ae3c:	1004d33a 	srli	r2,r2,12
 200ae40:	10801b84 	addi	r2,r2,110
 200ae44:	00001106 	br	200ae8c <_malloc_r+0x610>
 200ae48:	e0bffb17 	ldw	r2,-20(fp)
 200ae4c:	1004d27a 	srli	r2,r2,9
 200ae50:	10805568 	cmpgeui	r2,r2,341
 200ae54:	1000041e 	bne	r2,zero,200ae68 <_malloc_r+0x5ec>
 200ae58:	e0bffb17 	ldw	r2,-20(fp)
 200ae5c:	1004d3fa 	srli	r2,r2,15
 200ae60:	10801dc4 	addi	r2,r2,119
 200ae64:	00000906 	br	200ae8c <_malloc_r+0x610>
 200ae68:	e0bffb17 	ldw	r2,-20(fp)
 200ae6c:	1004d27a 	srli	r2,r2,9
 200ae70:	10815568 	cmpgeui	r2,r2,1365
 200ae74:	1000041e 	bne	r2,zero,200ae88 <_malloc_r+0x60c>
 200ae78:	e0bffb17 	ldw	r2,-20(fp)
 200ae7c:	1004d4ba 	srli	r2,r2,18
 200ae80:	10801f04 	addi	r2,r2,124
 200ae84:	00000106 	br	200ae8c <_malloc_r+0x610>
 200ae88:	00801f84 	movi	r2,126
 200ae8c:	e0bffd15 	stw	r2,-12(fp)
 200ae90:	e0bffd17 	ldw	r2,-12(fp)
 200ae94:	10800044 	addi	r2,r2,1
 200ae98:	1085883a 	add	r2,r2,r2
 200ae9c:	1085883a 	add	r2,r2,r2
 200aea0:	1087883a 	add	r3,r2,r2
 200aea4:	008080b4 	movhi	r2,514
 200aea8:	10b45c04 	addi	r2,r2,-11920
 200aeac:	1885883a 	add	r2,r3,r2
 200aeb0:	10bffe04 	addi	r2,r2,-8
 200aeb4:	e0bff815 	stw	r2,-32(fp)
 200aeb8:	e0bff817 	ldw	r2,-32(fp)
 200aebc:	10800217 	ldw	r2,8(r2)
 200aec0:	e0bff715 	stw	r2,-36(fp)
 200aec4:	e0fff717 	ldw	r3,-36(fp)
 200aec8:	e0bff817 	ldw	r2,-32(fp)
 200aecc:	1880121e 	bne	r3,r2,200af18 <_malloc_r+0x69c>
 200aed0:	00c080b4 	movhi	r3,514
 200aed4:	18f45c04 	addi	r3,r3,-11920
 200aed8:	008080b4 	movhi	r2,514
 200aedc:	10b45c04 	addi	r2,r2,-11920
 200aee0:	11000117 	ldw	r4,4(r2)
 200aee4:	e0bffd17 	ldw	r2,-12(fp)
 200aee8:	1000010e 	bge	r2,zero,200aef0 <_malloc_r+0x674>
 200aeec:	108000c4 	addi	r2,r2,3
 200aef0:	1005d0ba 	srai	r2,r2,2
 200aef4:	100b883a 	mov	r5,r2
 200aef8:	00800044 	movi	r2,1
 200aefc:	1144983a 	sll	r2,r2,r5
 200af00:	2084b03a 	or	r2,r4,r2
 200af04:	18800115 	stw	r2,4(r3)
 200af08:	00000f06 	br	200af48 <_malloc_r+0x6cc>
 200af0c:	e0bff717 	ldw	r2,-36(fp)
 200af10:	10800217 	ldw	r2,8(r2)
 200af14:	e0bff715 	stw	r2,-36(fp)
 200af18:	e0fff717 	ldw	r3,-36(fp)
 200af1c:	e0bff817 	ldw	r2,-32(fp)
 200af20:	18800626 	beq	r3,r2,200af3c <_malloc_r+0x6c0>
 200af24:	e0bff717 	ldw	r2,-36(fp)
 200af28:	10c00117 	ldw	r3,4(r2)
 200af2c:	00bfff04 	movi	r2,-4
 200af30:	1884703a 	and	r2,r3,r2
 200af34:	e0fffb17 	ldw	r3,-20(fp)
 200af38:	18bff436 	bltu	r3,r2,200af0c <_malloc_r+0x690>
 200af3c:	e0bff717 	ldw	r2,-36(fp)
 200af40:	10800317 	ldw	r2,12(r2)
 200af44:	e0bff815 	stw	r2,-32(fp)
 200af48:	e0bff117 	ldw	r2,-60(fp)
 200af4c:	e0fff817 	ldw	r3,-32(fp)
 200af50:	10c00315 	stw	r3,12(r2)
 200af54:	e0bff117 	ldw	r2,-60(fp)
 200af58:	e0fff717 	ldw	r3,-36(fp)
 200af5c:	10c00215 	stw	r3,8(r2)
 200af60:	e0bff817 	ldw	r2,-32(fp)
 200af64:	e0fff117 	ldw	r3,-60(fp)
 200af68:	10c00215 	stw	r3,8(r2)
 200af6c:	e0bff817 	ldw	r2,-32(fp)
 200af70:	10c00217 	ldw	r3,8(r2)
 200af74:	e0bff717 	ldw	r2,-36(fp)
 200af78:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 200af7c:	e0bff217 	ldw	r2,-56(fp)
 200af80:	1000010e 	bge	r2,zero,200af88 <_malloc_r+0x70c>
 200af84:	108000c4 	addi	r2,r2,3
 200af88:	1005d0ba 	srai	r2,r2,2
 200af8c:	1007883a 	mov	r3,r2
 200af90:	00800044 	movi	r2,1
 200af94:	10c4983a 	sll	r2,r2,r3
 200af98:	e0bff515 	stw	r2,-44(fp)
 200af9c:	008080b4 	movhi	r2,514
 200afa0:	10b45c04 	addi	r2,r2,-11920
 200afa4:	10c00117 	ldw	r3,4(r2)
 200afa8:	e0bff517 	ldw	r2,-44(fp)
 200afac:	1880c636 	bltu	r3,r2,200b2c8 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 200afb0:	008080b4 	movhi	r2,514
 200afb4:	10b45c04 	addi	r2,r2,-11920
 200afb8:	10c00117 	ldw	r3,4(r2)
 200afbc:	e0bff517 	ldw	r2,-44(fp)
 200afc0:	1884703a 	and	r2,r3,r2
 200afc4:	1000151e 	bne	r2,zero,200b01c <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 200afc8:	e0fff217 	ldw	r3,-56(fp)
 200afcc:	00bfff04 	movi	r2,-4
 200afd0:	1884703a 	and	r2,r3,r2
 200afd4:	10800104 	addi	r2,r2,4
 200afd8:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 200afdc:	e0bff517 	ldw	r2,-44(fp)
 200afe0:	1085883a 	add	r2,r2,r2
 200afe4:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 200afe8:	00000606 	br	200b004 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 200afec:	e0bff217 	ldw	r2,-56(fp)
 200aff0:	10800104 	addi	r2,r2,4
 200aff4:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 200aff8:	e0bff517 	ldw	r2,-44(fp)
 200affc:	1085883a 	add	r2,r2,r2
 200b000:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 200b004:	008080b4 	movhi	r2,514
 200b008:	10b45c04 	addi	r2,r2,-11920
 200b00c:	10c00117 	ldw	r3,4(r2)
 200b010:	e0bff517 	ldw	r2,-44(fp)
 200b014:	1884703a 	and	r2,r3,r2
 200b018:	103ff426 	beq	r2,zero,200afec <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 200b01c:	e0bff217 	ldw	r2,-56(fp)
 200b020:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 200b024:	e0bff217 	ldw	r2,-56(fp)
 200b028:	10800044 	addi	r2,r2,1
 200b02c:	1085883a 	add	r2,r2,r2
 200b030:	1085883a 	add	r2,r2,r2
 200b034:	1087883a 	add	r3,r2,r2
 200b038:	008080b4 	movhi	r2,514
 200b03c:	10b45c04 	addi	r2,r2,-11920
 200b040:	1885883a 	add	r2,r3,r2
 200b044:	10bffe04 	addi	r2,r2,-8
 200b048:	e0bff315 	stw	r2,-52(fp)
 200b04c:	e0bff317 	ldw	r2,-52(fp)
 200b050:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200b054:	e0bff317 	ldw	r2,-52(fp)
 200b058:	10800317 	ldw	r2,12(r2)
 200b05c:	e0bff115 	stw	r2,-60(fp)
 200b060:	00005e06 	br	200b1dc <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 200b064:	e0bff117 	ldw	r2,-60(fp)
 200b068:	10c00117 	ldw	r3,4(r2)
 200b06c:	00bfff04 	movi	r2,-4
 200b070:	1884703a 	and	r2,r3,r2
 200b074:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 200b078:	e0fffb17 	ldw	r3,-20(fp)
 200b07c:	e0bffa17 	ldw	r2,-24(fp)
 200b080:	1885c83a 	sub	r2,r3,r2
 200b084:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 200b088:	e0bff417 	ldw	r2,-48(fp)
 200b08c:	10800410 	cmplti	r2,r2,16
 200b090:	1000331e 	bne	r2,zero,200b160 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 200b094:	e0fff117 	ldw	r3,-60(fp)
 200b098:	e0bffa17 	ldw	r2,-24(fp)
 200b09c:	1885883a 	add	r2,r3,r2
 200b0a0:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 200b0a4:	e0bffa17 	ldw	r2,-24(fp)
 200b0a8:	10c00054 	ori	r3,r2,1
 200b0ac:	e0bff117 	ldw	r2,-60(fp)
 200b0b0:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200b0b4:	e0bff117 	ldw	r2,-60(fp)
 200b0b8:	10800317 	ldw	r2,12(r2)
 200b0bc:	e0bff815 	stw	r2,-32(fp)
 200b0c0:	e0bff117 	ldw	r2,-60(fp)
 200b0c4:	10800217 	ldw	r2,8(r2)
 200b0c8:	e0bff715 	stw	r2,-36(fp)
 200b0cc:	e0bff717 	ldw	r2,-36(fp)
 200b0d0:	e0fff817 	ldw	r3,-32(fp)
 200b0d4:	10c00315 	stw	r3,12(r2)
 200b0d8:	e0bff817 	ldw	r2,-32(fp)
 200b0dc:	e0fff717 	ldw	r3,-36(fp)
 200b0e0:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 200b0e4:	00c080b4 	movhi	r3,514
 200b0e8:	18f45e04 	addi	r3,r3,-11912
 200b0ec:	008080b4 	movhi	r2,514
 200b0f0:	10b45e04 	addi	r2,r2,-11912
 200b0f4:	e13ffc17 	ldw	r4,-16(fp)
 200b0f8:	11000315 	stw	r4,12(r2)
 200b0fc:	10800317 	ldw	r2,12(r2)
 200b100:	18800215 	stw	r2,8(r3)
 200b104:	008080b4 	movhi	r2,514
 200b108:	10b45e04 	addi	r2,r2,-11912
 200b10c:	e0fffc17 	ldw	r3,-16(fp)
 200b110:	18800315 	stw	r2,12(r3)
 200b114:	e0bffc17 	ldw	r2,-16(fp)
 200b118:	10c00317 	ldw	r3,12(r2)
 200b11c:	e0bffc17 	ldw	r2,-16(fp)
 200b120:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 200b124:	e0bff417 	ldw	r2,-48(fp)
 200b128:	10800054 	ori	r2,r2,1
 200b12c:	1007883a 	mov	r3,r2
 200b130:	e0bffc17 	ldw	r2,-16(fp)
 200b134:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 200b138:	e0bff417 	ldw	r2,-48(fp)
 200b13c:	e0fffc17 	ldw	r3,-16(fp)
 200b140:	1885883a 	add	r2,r3,r2
 200b144:	e0fff417 	ldw	r3,-48(fp)
 200b148:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200b14c:	e13ffe17 	ldw	r4,-8(fp)
 200b150:	2011df00 	call	2011df0 <__malloc_unlock>
            return chunk2mem(victim);
 200b154:	e0bff117 	ldw	r2,-60(fp)
 200b158:	10800204 	addi	r2,r2,8
 200b15c:	0000a106 	br	200b3e4 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 200b160:	e0bff417 	ldw	r2,-48(fp)
 200b164:	10001a16 	blt	r2,zero,200b1d0 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 200b168:	e0fff117 	ldw	r3,-60(fp)
 200b16c:	e0bffb17 	ldw	r2,-20(fp)
 200b170:	1885883a 	add	r2,r3,r2
 200b174:	e13ff117 	ldw	r4,-60(fp)
 200b178:	e0fffb17 	ldw	r3,-20(fp)
 200b17c:	20c7883a 	add	r3,r4,r3
 200b180:	18c00117 	ldw	r3,4(r3)
 200b184:	18c00054 	ori	r3,r3,1
 200b188:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200b18c:	e0bff117 	ldw	r2,-60(fp)
 200b190:	10800317 	ldw	r2,12(r2)
 200b194:	e0bff815 	stw	r2,-32(fp)
 200b198:	e0bff117 	ldw	r2,-60(fp)
 200b19c:	10800217 	ldw	r2,8(r2)
 200b1a0:	e0bff715 	stw	r2,-36(fp)
 200b1a4:	e0bff717 	ldw	r2,-36(fp)
 200b1a8:	e0fff817 	ldw	r3,-32(fp)
 200b1ac:	10c00315 	stw	r3,12(r2)
 200b1b0:	e0bff817 	ldw	r2,-32(fp)
 200b1b4:	e0fff717 	ldw	r3,-36(fp)
 200b1b8:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200b1bc:	e13ffe17 	ldw	r4,-8(fp)
 200b1c0:	2011df00 	call	2011df0 <__malloc_unlock>
            return chunk2mem(victim);
 200b1c4:	e0bff117 	ldw	r2,-60(fp)
 200b1c8:	10800204 	addi	r2,r2,8
 200b1cc:	00008506 	br	200b3e4 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200b1d0:	e0bff117 	ldw	r2,-60(fp)
 200b1d4:	10800317 	ldw	r2,12(r2)
 200b1d8:	e0bff115 	stw	r2,-60(fp)
 200b1dc:	e0fff117 	ldw	r3,-60(fp)
 200b1e0:	e0bff317 	ldw	r2,-52(fp)
 200b1e4:	18bf9f1e 	bne	r3,r2,200b064 <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 200b1e8:	e0bff317 	ldw	r2,-52(fp)
 200b1ec:	10800204 	addi	r2,r2,8
 200b1f0:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 200b1f4:	e0bff217 	ldw	r2,-56(fp)
 200b1f8:	10800044 	addi	r2,r2,1
 200b1fc:	e0bff215 	stw	r2,-56(fp)
 200b200:	e0bff217 	ldw	r2,-56(fp)
 200b204:	108000cc 	andi	r2,r2,3
 200b208:	103f921e 	bne	r2,zero,200b054 <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 200b20c:	e0bff617 	ldw	r2,-40(fp)
 200b210:	108000cc 	andi	r2,r2,3
 200b214:	10000a1e 	bne	r2,zero,200b240 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 200b218:	008080b4 	movhi	r2,514
 200b21c:	10b45c04 	addi	r2,r2,-11920
 200b220:	00c080b4 	movhi	r3,514
 200b224:	18f45c04 	addi	r3,r3,-11920
 200b228:	19000117 	ldw	r4,4(r3)
 200b22c:	e0fff517 	ldw	r3,-44(fp)
 200b230:	00c6303a 	nor	r3,zero,r3
 200b234:	20c6703a 	and	r3,r4,r3
 200b238:	10c00115 	stw	r3,4(r2)
          break;
 200b23c:	00000a06 	br	200b268 <_malloc_r+0x9ec>
        }
        --startidx;
 200b240:	e0bff617 	ldw	r2,-40(fp)
 200b244:	10bfffc4 	addi	r2,r2,-1
 200b248:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 200b24c:	e0bff917 	ldw	r2,-28(fp)
 200b250:	10bffe04 	addi	r2,r2,-8
 200b254:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 200b258:	e0bff917 	ldw	r2,-28(fp)
 200b25c:	10c00217 	ldw	r3,8(r2)
 200b260:	e0bff917 	ldw	r2,-28(fp)
 200b264:	18bfe926 	beq	r3,r2,200b20c <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 200b268:	e0bff517 	ldw	r2,-44(fp)
 200b26c:	1085883a 	add	r2,r2,r2
 200b270:	e0bff515 	stw	r2,-44(fp)
 200b274:	008080b4 	movhi	r2,514
 200b278:	10b45c04 	addi	r2,r2,-11920
 200b27c:	10c00117 	ldw	r3,4(r2)
 200b280:	e0bff517 	ldw	r2,-44(fp)
 200b284:	18801036 	bltu	r3,r2,200b2c8 <_malloc_r+0xa4c>
 200b288:	e0bff517 	ldw	r2,-44(fp)
 200b28c:	10000e26 	beq	r2,zero,200b2c8 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 200b290:	00000606 	br	200b2ac <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 200b294:	e0bff217 	ldw	r2,-56(fp)
 200b298:	10800104 	addi	r2,r2,4
 200b29c:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 200b2a0:	e0bff517 	ldw	r2,-44(fp)
 200b2a4:	1085883a 	add	r2,r2,r2
 200b2a8:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 200b2ac:	008080b4 	movhi	r2,514
 200b2b0:	10b45c04 	addi	r2,r2,-11920
 200b2b4:	10c00117 	ldw	r3,4(r2)
 200b2b8:	e0bff517 	ldw	r2,-44(fp)
 200b2bc:	1884703a 	and	r2,r3,r2
 200b2c0:	103ff426 	beq	r2,zero,200b294 <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 200b2c4:	003f5506 	br	200b01c <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 200b2c8:	008080b4 	movhi	r2,514
 200b2cc:	10b45c04 	addi	r2,r2,-11920
 200b2d0:	10800217 	ldw	r2,8(r2)
 200b2d4:	10c00117 	ldw	r3,4(r2)
 200b2d8:	00bfff04 	movi	r2,-4
 200b2dc:	1886703a 	and	r3,r3,r2
 200b2e0:	e0bffa17 	ldw	r2,-24(fp)
 200b2e4:	1885c83a 	sub	r2,r3,r2
 200b2e8:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200b2ec:	008080b4 	movhi	r2,514
 200b2f0:	10b45c04 	addi	r2,r2,-11920
 200b2f4:	10800217 	ldw	r2,8(r2)
 200b2f8:	10c00117 	ldw	r3,4(r2)
 200b2fc:	00bfff04 	movi	r2,-4
 200b300:	1886703a 	and	r3,r3,r2
 200b304:	e0bffa17 	ldw	r2,-24(fp)
 200b308:	18800336 	bltu	r3,r2,200b318 <_malloc_r+0xa9c>
 200b30c:	e0bff417 	ldw	r2,-48(fp)
 200b310:	10800408 	cmpgei	r2,r2,16
 200b314:	10001b1e 	bne	r2,zero,200b384 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 200b318:	e17ffa17 	ldw	r5,-24(fp)
 200b31c:	e13ffe17 	ldw	r4,-8(fp)
 200b320:	200a4c80 	call	200a4c8 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 200b324:	008080b4 	movhi	r2,514
 200b328:	10b45c04 	addi	r2,r2,-11920
 200b32c:	10800217 	ldw	r2,8(r2)
 200b330:	10c00117 	ldw	r3,4(r2)
 200b334:	00bfff04 	movi	r2,-4
 200b338:	1886703a 	and	r3,r3,r2
 200b33c:	e0bffa17 	ldw	r2,-24(fp)
 200b340:	1885c83a 	sub	r2,r3,r2
 200b344:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200b348:	008080b4 	movhi	r2,514
 200b34c:	10b45c04 	addi	r2,r2,-11920
 200b350:	10800217 	ldw	r2,8(r2)
 200b354:	10c00117 	ldw	r3,4(r2)
 200b358:	00bfff04 	movi	r2,-4
 200b35c:	1886703a 	and	r3,r3,r2
 200b360:	e0bffa17 	ldw	r2,-24(fp)
 200b364:	18800336 	bltu	r3,r2,200b374 <_malloc_r+0xaf8>
 200b368:	e0bff417 	ldw	r2,-48(fp)
 200b36c:	10800408 	cmpgei	r2,r2,16
 200b370:	1000041e 	bne	r2,zero,200b384 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 200b374:	e13ffe17 	ldw	r4,-8(fp)
 200b378:	2011df00 	call	2011df0 <__malloc_unlock>
      return 0; /* propagate failure */
 200b37c:	0005883a 	mov	r2,zero
 200b380:	00001806 	br	200b3e4 <_malloc_r+0xb68>
    }
  }

  victim = top;
 200b384:	008080b4 	movhi	r2,514
 200b388:	10b45c04 	addi	r2,r2,-11920
 200b38c:	10800217 	ldw	r2,8(r2)
 200b390:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 200b394:	e0bffa17 	ldw	r2,-24(fp)
 200b398:	10c00054 	ori	r3,r2,1
 200b39c:	e0bff117 	ldw	r2,-60(fp)
 200b3a0:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 200b3a4:	008080b4 	movhi	r2,514
 200b3a8:	10b45c04 	addi	r2,r2,-11920
 200b3ac:	e13ff117 	ldw	r4,-60(fp)
 200b3b0:	e0fffa17 	ldw	r3,-24(fp)
 200b3b4:	20c7883a 	add	r3,r4,r3
 200b3b8:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 200b3bc:	008080b4 	movhi	r2,514
 200b3c0:	10b45c04 	addi	r2,r2,-11920
 200b3c4:	10800217 	ldw	r2,8(r2)
 200b3c8:	e0fff417 	ldw	r3,-48(fp)
 200b3cc:	18c00054 	ori	r3,r3,1
 200b3d0:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 200b3d4:	e13ffe17 	ldw	r4,-8(fp)
 200b3d8:	2011df00 	call	2011df0 <__malloc_unlock>
  return chunk2mem(victim);
 200b3dc:	e0bff117 	ldw	r2,-60(fp)
 200b3e0:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200b3e4:	e037883a 	mov	sp,fp
 200b3e8:	dfc00117 	ldw	ra,4(sp)
 200b3ec:	df000017 	ldw	fp,0(sp)
 200b3f0:	dec00204 	addi	sp,sp,8
 200b3f4:	f800283a 	ret

0200b3f8 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 200b3f8:	defff704 	addi	sp,sp,-36
 200b3fc:	df000815 	stw	fp,32(sp)
 200b400:	df000804 	addi	fp,sp,32
 200b404:	e13ffd15 	stw	r4,-12(fp)
 200b408:	e17ffe15 	stw	r5,-8(fp)
 200b40c:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 200b410:	e0bffd17 	ldw	r2,-12(fp)
 200b414:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 200b418:	e0bffe17 	ldw	r2,-8(fp)
 200b41c:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200b420:	00001006 	br	200b464 <memchr+0x6c>
    {
      if (!length--)
 200b424:	e0bfff17 	ldw	r2,-4(fp)
 200b428:	10ffffc4 	addi	r3,r2,-1
 200b42c:	e0ffff15 	stw	r3,-4(fp)
 200b430:	1000021e 	bne	r2,zero,200b43c <memchr+0x44>
        return NULL;
 200b434:	0005883a 	mov	r2,zero
 200b438:	00005a06 	br	200b5a4 <memchr+0x1ac>
      if (*src == d)
 200b43c:	e0bff817 	ldw	r2,-32(fp)
 200b440:	10800003 	ldbu	r2,0(r2)
 200b444:	10c03fcc 	andi	r3,r2,255
 200b448:	e0bffc03 	ldbu	r2,-16(fp)
 200b44c:	1880021e 	bne	r3,r2,200b458 <memchr+0x60>
        return (void *) src;
 200b450:	e0bff817 	ldw	r2,-32(fp)
 200b454:	00005306 	br	200b5a4 <memchr+0x1ac>
      src++;
 200b458:	e0bff817 	ldw	r2,-32(fp)
 200b45c:	10800044 	addi	r2,r2,1
 200b460:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200b464:	e0bff817 	ldw	r2,-32(fp)
 200b468:	108000cc 	andi	r2,r2,3
 200b46c:	103fed1e 	bne	r2,zero,200b424 <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 200b470:	e0bfff17 	ldw	r2,-4(fp)
 200b474:	10800130 	cmpltui	r2,r2,4
 200b478:	1000451e 	bne	r2,zero,200b590 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 200b47c:	e0bff817 	ldw	r2,-32(fp)
 200b480:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 200b484:	e0bffc03 	ldbu	r2,-16(fp)
 200b488:	1006923a 	slli	r3,r2,8
 200b48c:	e0bffc03 	ldbu	r2,-16(fp)
 200b490:	1884b03a 	or	r2,r3,r2
 200b494:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 200b498:	e0bffa17 	ldw	r2,-24(fp)
 200b49c:	1004943a 	slli	r2,r2,16
 200b4a0:	e0fffa17 	ldw	r3,-24(fp)
 200b4a4:	1884b03a 	or	r2,r3,r2
 200b4a8:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200b4ac:	00800804 	movi	r2,32
 200b4b0:	e0bffb15 	stw	r2,-20(fp)
 200b4b4:	00000906 	br	200b4dc <memchr+0xe4>
        mask = (mask << i) | mask;
 200b4b8:	e0fffa17 	ldw	r3,-24(fp)
 200b4bc:	e0bffb17 	ldw	r2,-20(fp)
 200b4c0:	1884983a 	sll	r2,r3,r2
 200b4c4:	e0fffa17 	ldw	r3,-24(fp)
 200b4c8:	1884b03a 	or	r2,r3,r2
 200b4cc:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200b4d0:	e0bffb17 	ldw	r2,-20(fp)
 200b4d4:	1085883a 	add	r2,r2,r2
 200b4d8:	e0bffb15 	stw	r2,-20(fp)
 200b4dc:	e0bffb17 	ldw	r2,-20(fp)
 200b4e0:	10800830 	cmpltui	r2,r2,32
 200b4e4:	103ff41e 	bne	r2,zero,200b4b8 <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200b4e8:	00001706 	br	200b548 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 200b4ec:	e0bff917 	ldw	r2,-28(fp)
 200b4f0:	10c00017 	ldw	r3,0(r2)
 200b4f4:	e0bffa17 	ldw	r2,-24(fp)
 200b4f8:	1886f03a 	xor	r3,r3,r2
 200b4fc:	00bfbff4 	movhi	r2,65279
 200b500:	10bfbfc4 	addi	r2,r2,-257
 200b504:	1887883a 	add	r3,r3,r2
 200b508:	e0bff917 	ldw	r2,-28(fp)
 200b50c:	11000017 	ldw	r4,0(r2)
 200b510:	e0bffa17 	ldw	r2,-24(fp)
 200b514:	2084f03a 	xor	r2,r4,r2
 200b518:	0084303a 	nor	r2,zero,r2
 200b51c:	1886703a 	and	r3,r3,r2
 200b520:	00a02074 	movhi	r2,32897
 200b524:	10a02004 	addi	r2,r2,-32640
 200b528:	1884703a 	and	r2,r3,r2
 200b52c:	10000a1e 	bne	r2,zero,200b558 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 200b530:	e0bfff17 	ldw	r2,-4(fp)
 200b534:	10bfff04 	addi	r2,r2,-4
 200b538:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 200b53c:	e0bff917 	ldw	r2,-28(fp)
 200b540:	10800104 	addi	r2,r2,4
 200b544:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200b548:	e0bfff17 	ldw	r2,-4(fp)
 200b54c:	10800128 	cmpgeui	r2,r2,4
 200b550:	103fe61e 	bne	r2,zero,200b4ec <memchr+0xf4>
 200b554:	00000106 	br	200b55c <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 200b558:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 200b55c:	e0bff917 	ldw	r2,-28(fp)
 200b560:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200b564:	00000a06 	br	200b590 <memchr+0x198>
    {
      if (*src == d)
 200b568:	e0bff817 	ldw	r2,-32(fp)
 200b56c:	10800003 	ldbu	r2,0(r2)
 200b570:	10c03fcc 	andi	r3,r2,255
 200b574:	e0bffc03 	ldbu	r2,-16(fp)
 200b578:	1880021e 	bne	r3,r2,200b584 <memchr+0x18c>
        return (void *) src;
 200b57c:	e0bff817 	ldw	r2,-32(fp)
 200b580:	00000806 	br	200b5a4 <memchr+0x1ac>
      src++;
 200b584:	e0bff817 	ldw	r2,-32(fp)
 200b588:	10800044 	addi	r2,r2,1
 200b58c:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200b590:	e0bfff17 	ldw	r2,-4(fp)
 200b594:	10ffffc4 	addi	r3,r2,-1
 200b598:	e0ffff15 	stw	r3,-4(fp)
 200b59c:	103ff21e 	bne	r2,zero,200b568 <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 200b5a0:	0005883a 	mov	r2,zero
}
 200b5a4:	e037883a 	mov	sp,fp
 200b5a8:	df000017 	ldw	fp,0(sp)
 200b5ac:	dec00104 	addi	sp,sp,4
 200b5b0:	f800283a 	ret

0200b5b4 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 200b5b4:	defff804 	addi	sp,sp,-32
 200b5b8:	df000715 	stw	fp,28(sp)
 200b5bc:	df000704 	addi	fp,sp,28
 200b5c0:	e13ffd15 	stw	r4,-12(fp)
 200b5c4:	e17ffe15 	stw	r5,-8(fp)
 200b5c8:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 200b5cc:	e0bffd17 	ldw	r2,-12(fp)
 200b5d0:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 200b5d4:	e0bffe17 	ldw	r2,-8(fp)
 200b5d8:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 200b5dc:	e0bfff17 	ldw	r2,-4(fp)
 200b5e0:	10800430 	cmpltui	r2,r2,16
 200b5e4:	10004c1e 	bne	r2,zero,200b718 <memcpy+0x164>
 200b5e8:	e0fffa17 	ldw	r3,-24(fp)
 200b5ec:	e0bff917 	ldw	r2,-28(fp)
 200b5f0:	1884b03a 	or	r2,r3,r2
 200b5f4:	108000cc 	andi	r2,r2,3
 200b5f8:	1000471e 	bne	r2,zero,200b718 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 200b5fc:	e0bff917 	ldw	r2,-28(fp)
 200b600:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 200b604:	e0bffa17 	ldw	r2,-24(fp)
 200b608:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 200b60c:	00002306 	br	200b69c <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 200b610:	e0bffb17 	ldw	r2,-20(fp)
 200b614:	10c00104 	addi	r3,r2,4
 200b618:	e0fffb15 	stw	r3,-20(fp)
 200b61c:	e0fffc17 	ldw	r3,-16(fp)
 200b620:	19000104 	addi	r4,r3,4
 200b624:	e13ffc15 	stw	r4,-16(fp)
 200b628:	18c00017 	ldw	r3,0(r3)
 200b62c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 200b630:	e0bffb17 	ldw	r2,-20(fp)
 200b634:	10c00104 	addi	r3,r2,4
 200b638:	e0fffb15 	stw	r3,-20(fp)
 200b63c:	e0fffc17 	ldw	r3,-16(fp)
 200b640:	19000104 	addi	r4,r3,4
 200b644:	e13ffc15 	stw	r4,-16(fp)
 200b648:	18c00017 	ldw	r3,0(r3)
 200b64c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 200b650:	e0bffb17 	ldw	r2,-20(fp)
 200b654:	10c00104 	addi	r3,r2,4
 200b658:	e0fffb15 	stw	r3,-20(fp)
 200b65c:	e0fffc17 	ldw	r3,-16(fp)
 200b660:	19000104 	addi	r4,r3,4
 200b664:	e13ffc15 	stw	r4,-16(fp)
 200b668:	18c00017 	ldw	r3,0(r3)
 200b66c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 200b670:	e0bffb17 	ldw	r2,-20(fp)
 200b674:	10c00104 	addi	r3,r2,4
 200b678:	e0fffb15 	stw	r3,-20(fp)
 200b67c:	e0fffc17 	ldw	r3,-16(fp)
 200b680:	19000104 	addi	r4,r3,4
 200b684:	e13ffc15 	stw	r4,-16(fp)
 200b688:	18c00017 	ldw	r3,0(r3)
 200b68c:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 200b690:	e0bfff17 	ldw	r2,-4(fp)
 200b694:	10bffc04 	addi	r2,r2,-16
 200b698:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 200b69c:	e0bfff17 	ldw	r2,-4(fp)
 200b6a0:	10800428 	cmpgeui	r2,r2,16
 200b6a4:	103fda1e 	bne	r2,zero,200b610 <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 200b6a8:	00000b06 	br	200b6d8 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 200b6ac:	e0bffb17 	ldw	r2,-20(fp)
 200b6b0:	10c00104 	addi	r3,r2,4
 200b6b4:	e0fffb15 	stw	r3,-20(fp)
 200b6b8:	e0fffc17 	ldw	r3,-16(fp)
 200b6bc:	19000104 	addi	r4,r3,4
 200b6c0:	e13ffc15 	stw	r4,-16(fp)
 200b6c4:	18c00017 	ldw	r3,0(r3)
 200b6c8:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 200b6cc:	e0bfff17 	ldw	r2,-4(fp)
 200b6d0:	10bfff04 	addi	r2,r2,-4
 200b6d4:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 200b6d8:	e0bfff17 	ldw	r2,-4(fp)
 200b6dc:	10800128 	cmpgeui	r2,r2,4
 200b6e0:	103ff21e 	bne	r2,zero,200b6ac <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 200b6e4:	e0bffb17 	ldw	r2,-20(fp)
 200b6e8:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 200b6ec:	e0bffc17 	ldw	r2,-16(fp)
 200b6f0:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 200b6f4:	00000806 	br	200b718 <memcpy+0x164>
    *dst++ = *src++;
 200b6f8:	e0bff917 	ldw	r2,-28(fp)
 200b6fc:	10c00044 	addi	r3,r2,1
 200b700:	e0fff915 	stw	r3,-28(fp)
 200b704:	e0fffa17 	ldw	r3,-24(fp)
 200b708:	19000044 	addi	r4,r3,1
 200b70c:	e13ffa15 	stw	r4,-24(fp)
 200b710:	18c00003 	ldbu	r3,0(r3)
 200b714:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 200b718:	e0bfff17 	ldw	r2,-4(fp)
 200b71c:	10ffffc4 	addi	r3,r2,-1
 200b720:	e0ffff15 	stw	r3,-4(fp)
 200b724:	103ff41e 	bne	r2,zero,200b6f8 <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 200b728:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200b72c:	e037883a 	mov	sp,fp
 200b730:	df000017 	ldw	fp,0(sp)
 200b734:	dec00104 	addi	sp,sp,4
 200b738:	f800283a 	ret

0200b73c <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 200b73c:	defff804 	addi	sp,sp,-32
 200b740:	df000715 	stw	fp,28(sp)
 200b744:	df000704 	addi	fp,sp,28
 200b748:	e13ffd15 	stw	r4,-12(fp)
 200b74c:	e17ffe15 	stw	r5,-8(fp)
 200b750:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 200b754:	e0bffd17 	ldw	r2,-12(fp)
 200b758:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 200b75c:	e0bffe17 	ldw	r2,-8(fp)
 200b760:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200b764:	e0fffa17 	ldw	r3,-24(fp)
 200b768:	e0bff917 	ldw	r2,-28(fp)
 200b76c:	18801d2e 	bgeu	r3,r2,200b7e4 <memmove+0xa8>
 200b770:	e0fffa17 	ldw	r3,-24(fp)
 200b774:	e0bfff17 	ldw	r2,-4(fp)
 200b778:	1885883a 	add	r2,r3,r2
 200b77c:	e0fff917 	ldw	r3,-28(fp)
 200b780:	1880182e 	bgeu	r3,r2,200b7e4 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 200b784:	e0fffa17 	ldw	r3,-24(fp)
 200b788:	e0bfff17 	ldw	r2,-4(fp)
 200b78c:	1885883a 	add	r2,r3,r2
 200b790:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 200b794:	e0fff917 	ldw	r3,-28(fp)
 200b798:	e0bfff17 	ldw	r2,-4(fp)
 200b79c:	1885883a 	add	r2,r3,r2
 200b7a0:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 200b7a4:	00000a06 	br	200b7d0 <memmove+0x94>
	{
	  *--dst = *--src;
 200b7a8:	e0bff917 	ldw	r2,-28(fp)
 200b7ac:	10bfffc4 	addi	r2,r2,-1
 200b7b0:	e0bff915 	stw	r2,-28(fp)
 200b7b4:	e0bffa17 	ldw	r2,-24(fp)
 200b7b8:	10bfffc4 	addi	r2,r2,-1
 200b7bc:	e0bffa15 	stw	r2,-24(fp)
 200b7c0:	e0bffa17 	ldw	r2,-24(fp)
 200b7c4:	10c00003 	ldbu	r3,0(r2)
 200b7c8:	e0bff917 	ldw	r2,-28(fp)
 200b7cc:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 200b7d0:	e0bfff17 	ldw	r2,-4(fp)
 200b7d4:	10ffffc4 	addi	r3,r2,-1
 200b7d8:	e0ffff15 	stw	r3,-4(fp)
 200b7dc:	103ff21e 	bne	r2,zero,200b7a8 <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200b7e0:	00005306 	br	200b930 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 200b7e4:	e0bfff17 	ldw	r2,-4(fp)
 200b7e8:	10800430 	cmpltui	r2,r2,16
 200b7ec:	10004c1e 	bne	r2,zero,200b920 <memmove+0x1e4>
 200b7f0:	e0fffa17 	ldw	r3,-24(fp)
 200b7f4:	e0bff917 	ldw	r2,-28(fp)
 200b7f8:	1884b03a 	or	r2,r3,r2
 200b7fc:	108000cc 	andi	r2,r2,3
 200b800:	1000471e 	bne	r2,zero,200b920 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 200b804:	e0bff917 	ldw	r2,-28(fp)
 200b808:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 200b80c:	e0bffa17 	ldw	r2,-24(fp)
 200b810:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200b814:	00002306 	br	200b8a4 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 200b818:	e0bffb17 	ldw	r2,-20(fp)
 200b81c:	10c00104 	addi	r3,r2,4
 200b820:	e0fffb15 	stw	r3,-20(fp)
 200b824:	e0fffc17 	ldw	r3,-16(fp)
 200b828:	19000104 	addi	r4,r3,4
 200b82c:	e13ffc15 	stw	r4,-16(fp)
 200b830:	18c00017 	ldw	r3,0(r3)
 200b834:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200b838:	e0bffb17 	ldw	r2,-20(fp)
 200b83c:	10c00104 	addi	r3,r2,4
 200b840:	e0fffb15 	stw	r3,-20(fp)
 200b844:	e0fffc17 	ldw	r3,-16(fp)
 200b848:	19000104 	addi	r4,r3,4
 200b84c:	e13ffc15 	stw	r4,-16(fp)
 200b850:	18c00017 	ldw	r3,0(r3)
 200b854:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200b858:	e0bffb17 	ldw	r2,-20(fp)
 200b85c:	10c00104 	addi	r3,r2,4
 200b860:	e0fffb15 	stw	r3,-20(fp)
 200b864:	e0fffc17 	ldw	r3,-16(fp)
 200b868:	19000104 	addi	r4,r3,4
 200b86c:	e13ffc15 	stw	r4,-16(fp)
 200b870:	18c00017 	ldw	r3,0(r3)
 200b874:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200b878:	e0bffb17 	ldw	r2,-20(fp)
 200b87c:	10c00104 	addi	r3,r2,4
 200b880:	e0fffb15 	stw	r3,-20(fp)
 200b884:	e0fffc17 	ldw	r3,-16(fp)
 200b888:	19000104 	addi	r4,r3,4
 200b88c:	e13ffc15 	stw	r4,-16(fp)
 200b890:	18c00017 	ldw	r3,0(r3)
 200b894:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 200b898:	e0bfff17 	ldw	r2,-4(fp)
 200b89c:	10bffc04 	addi	r2,r2,-16
 200b8a0:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200b8a4:	e0bfff17 	ldw	r2,-4(fp)
 200b8a8:	10800428 	cmpgeui	r2,r2,16
 200b8ac:	103fda1e 	bne	r2,zero,200b818 <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200b8b0:	00000b06 	br	200b8e0 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 200b8b4:	e0bffb17 	ldw	r2,-20(fp)
 200b8b8:	10c00104 	addi	r3,r2,4
 200b8bc:	e0fffb15 	stw	r3,-20(fp)
 200b8c0:	e0fffc17 	ldw	r3,-16(fp)
 200b8c4:	19000104 	addi	r4,r3,4
 200b8c8:	e13ffc15 	stw	r4,-16(fp)
 200b8cc:	18c00017 	ldw	r3,0(r3)
 200b8d0:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 200b8d4:	e0bfff17 	ldw	r2,-4(fp)
 200b8d8:	10bfff04 	addi	r2,r2,-4
 200b8dc:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200b8e0:	e0bfff17 	ldw	r2,-4(fp)
 200b8e4:	10800128 	cmpgeui	r2,r2,4
 200b8e8:	103ff21e 	bne	r2,zero,200b8b4 <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 200b8ec:	e0bffb17 	ldw	r2,-20(fp)
 200b8f0:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 200b8f4:	e0bffc17 	ldw	r2,-16(fp)
 200b8f8:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 200b8fc:	00000806 	br	200b920 <memmove+0x1e4>
        {
          *dst++ = *src++;
 200b900:	e0bff917 	ldw	r2,-28(fp)
 200b904:	10c00044 	addi	r3,r2,1
 200b908:	e0fff915 	stw	r3,-28(fp)
 200b90c:	e0fffa17 	ldw	r3,-24(fp)
 200b910:	19000044 	addi	r4,r3,1
 200b914:	e13ffa15 	stw	r4,-24(fp)
 200b918:	18c00003 	ldbu	r3,0(r3)
 200b91c:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 200b920:	e0bfff17 	ldw	r2,-4(fp)
 200b924:	10ffffc4 	addi	r3,r2,-1
 200b928:	e0ffff15 	stw	r3,-4(fp)
 200b92c:	103ff41e 	bne	r2,zero,200b900 <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 200b930:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200b934:	e037883a 	mov	sp,fp
 200b938:	df000017 	ldw	fp,0(sp)
 200b93c:	dec00104 	addi	sp,sp,4
 200b940:	f800283a 	ret

0200b944 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 200b944:	defff704 	addi	sp,sp,-36
 200b948:	df000815 	stw	fp,32(sp)
 200b94c:	df000804 	addi	fp,sp,32
 200b950:	e13ffd15 	stw	r4,-12(fp)
 200b954:	e17ffe15 	stw	r5,-8(fp)
 200b958:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 200b95c:	e0bffd17 	ldw	r2,-12(fp)
 200b960:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 200b964:	e0bffe17 	ldw	r2,-8(fp)
 200b968:	10803fcc 	andi	r2,r2,255
 200b96c:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 200b970:	00000c06 	br	200b9a4 <memset+0x60>
    {
      if (n--)
 200b974:	e0bfff17 	ldw	r2,-4(fp)
 200b978:	10ffffc4 	addi	r3,r2,-1
 200b97c:	e0ffff15 	stw	r3,-4(fp)
 200b980:	10000626 	beq	r2,zero,200b99c <memset+0x58>
        *s++ = (char) c;
 200b984:	e0bff817 	ldw	r2,-32(fp)
 200b988:	10c00044 	addi	r3,r2,1
 200b98c:	e0fff815 	stw	r3,-32(fp)
 200b990:	e0fffe17 	ldw	r3,-8(fp)
 200b994:	10c00005 	stb	r3,0(r2)
 200b998:	00000206 	br	200b9a4 <memset+0x60>
      else
        return m;
 200b99c:	e0bffd17 	ldw	r2,-12(fp)
 200b9a0:	00005506 	br	200baf8 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 200b9a4:	e0bff817 	ldw	r2,-32(fp)
 200b9a8:	108000cc 	andi	r2,r2,3
 200b9ac:	103ff11e 	bne	r2,zero,200b974 <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 200b9b0:	e0bfff17 	ldw	r2,-4(fp)
 200b9b4:	10800130 	cmpltui	r2,r2,4
 200b9b8:	10004a1e 	bne	r2,zero,200bae4 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 200b9bc:	e0bff817 	ldw	r2,-32(fp)
 200b9c0:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 200b9c4:	e0bffc17 	ldw	r2,-16(fp)
 200b9c8:	1006923a 	slli	r3,r2,8
 200b9cc:	e0bffc17 	ldw	r2,-16(fp)
 200b9d0:	1884b03a 	or	r2,r3,r2
 200b9d4:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 200b9d8:	e0bffa17 	ldw	r2,-24(fp)
 200b9dc:	1004943a 	slli	r2,r2,16
 200b9e0:	e0fffa17 	ldw	r3,-24(fp)
 200b9e4:	1884b03a 	or	r2,r3,r2
 200b9e8:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200b9ec:	00800804 	movi	r2,32
 200b9f0:	e0bff915 	stw	r2,-28(fp)
 200b9f4:	00000906 	br	200ba1c <memset+0xd8>
        buffer = (buffer << i) | buffer;
 200b9f8:	e0fffa17 	ldw	r3,-24(fp)
 200b9fc:	e0bff917 	ldw	r2,-28(fp)
 200ba00:	1884983a 	sll	r2,r3,r2
 200ba04:	e0fffa17 	ldw	r3,-24(fp)
 200ba08:	1884b03a 	or	r2,r3,r2
 200ba0c:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200ba10:	e0bff917 	ldw	r2,-28(fp)
 200ba14:	1085883a 	add	r2,r2,r2
 200ba18:	e0bff915 	stw	r2,-28(fp)
 200ba1c:	e0bff917 	ldw	r2,-28(fp)
 200ba20:	10800830 	cmpltui	r2,r2,32
 200ba24:	103ff41e 	bne	r2,zero,200b9f8 <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 200ba28:	00001706 	br	200ba88 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 200ba2c:	e0bffb17 	ldw	r2,-20(fp)
 200ba30:	10c00104 	addi	r3,r2,4
 200ba34:	e0fffb15 	stw	r3,-20(fp)
 200ba38:	e0fffa17 	ldw	r3,-24(fp)
 200ba3c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 200ba40:	e0bffb17 	ldw	r2,-20(fp)
 200ba44:	10c00104 	addi	r3,r2,4
 200ba48:	e0fffb15 	stw	r3,-20(fp)
 200ba4c:	e0fffa17 	ldw	r3,-24(fp)
 200ba50:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 200ba54:	e0bffb17 	ldw	r2,-20(fp)
 200ba58:	10c00104 	addi	r3,r2,4
 200ba5c:	e0fffb15 	stw	r3,-20(fp)
 200ba60:	e0fffa17 	ldw	r3,-24(fp)
 200ba64:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 200ba68:	e0bffb17 	ldw	r2,-20(fp)
 200ba6c:	10c00104 	addi	r3,r2,4
 200ba70:	e0fffb15 	stw	r3,-20(fp)
 200ba74:	e0fffa17 	ldw	r3,-24(fp)
 200ba78:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 200ba7c:	e0bfff17 	ldw	r2,-4(fp)
 200ba80:	10bffc04 	addi	r2,r2,-16
 200ba84:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 200ba88:	e0bfff17 	ldw	r2,-4(fp)
 200ba8c:	10800428 	cmpgeui	r2,r2,16
 200ba90:	103fe61e 	bne	r2,zero,200ba2c <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 200ba94:	00000806 	br	200bab8 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 200ba98:	e0bffb17 	ldw	r2,-20(fp)
 200ba9c:	10c00104 	addi	r3,r2,4
 200baa0:	e0fffb15 	stw	r3,-20(fp)
 200baa4:	e0fffa17 	ldw	r3,-24(fp)
 200baa8:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 200baac:	e0bfff17 	ldw	r2,-4(fp)
 200bab0:	10bfff04 	addi	r2,r2,-4
 200bab4:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 200bab8:	e0bfff17 	ldw	r2,-4(fp)
 200babc:	10800128 	cmpgeui	r2,r2,4
 200bac0:	103ff51e 	bne	r2,zero,200ba98 <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 200bac4:	e0bffb17 	ldw	r2,-20(fp)
 200bac8:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 200bacc:	00000506 	br	200bae4 <memset+0x1a0>
    *s++ = (char) c;
 200bad0:	e0bff817 	ldw	r2,-32(fp)
 200bad4:	10c00044 	addi	r3,r2,1
 200bad8:	e0fff815 	stw	r3,-32(fp)
 200badc:	e0fffe17 	ldw	r3,-8(fp)
 200bae0:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 200bae4:	e0bfff17 	ldw	r2,-4(fp)
 200bae8:	10ffffc4 	addi	r3,r2,-1
 200baec:	e0ffff15 	stw	r3,-4(fp)
 200baf0:	103ff71e 	bne	r2,zero,200bad0 <memset+0x18c>
    *s++ = (char) c;

  return m;
 200baf4:	e0bffd17 	ldw	r2,-12(fp)
}
 200baf8:	e037883a 	mov	sp,fp
 200bafc:	df000017 	ldw	fp,0(sp)
 200bb00:	dec00104 	addi	sp,sp,4
 200bb04:	f800283a 	ret

0200bb08 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 200bb08:	defffa04 	addi	sp,sp,-24
 200bb0c:	dfc00515 	stw	ra,20(sp)
 200bb10:	df000415 	stw	fp,16(sp)
 200bb14:	df000404 	addi	fp,sp,16
 200bb18:	e13ffe15 	stw	r4,-8(fp)
 200bb1c:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 200bb20:	e0bffe17 	ldw	r2,-8(fp)
 200bb24:	10801317 	ldw	r2,76(r2)
 200bb28:	10000c1e 	bne	r2,zero,200bb5c <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 200bb2c:	01800844 	movi	r6,33
 200bb30:	01400104 	movi	r5,4
 200bb34:	e13ffe17 	ldw	r4,-8(fp)
 200bb38:	200fb940 	call	200fb94 <_calloc_r>
 200bb3c:	1007883a 	mov	r3,r2
 200bb40:	e0bffe17 	ldw	r2,-8(fp)
 200bb44:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 200bb48:	e0bffe17 	ldw	r2,-8(fp)
 200bb4c:	10801317 	ldw	r2,76(r2)
 200bb50:	1000021e 	bne	r2,zero,200bb5c <_Balloc+0x54>
	{
	  return NULL;
 200bb54:	0005883a 	mov	r2,zero
 200bb58:	00003206 	br	200bc24 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 200bb5c:	e0bffe17 	ldw	r2,-8(fp)
 200bb60:	10c01317 	ldw	r3,76(r2)
 200bb64:	e0bfff17 	ldw	r2,-4(fp)
 200bb68:	1085883a 	add	r2,r2,r2
 200bb6c:	1085883a 	add	r2,r2,r2
 200bb70:	1885883a 	add	r2,r3,r2
 200bb74:	10800017 	ldw	r2,0(r2)
 200bb78:	e0bffc15 	stw	r2,-16(fp)
 200bb7c:	e0bffc17 	ldw	r2,-16(fp)
 200bb80:	10000a26 	beq	r2,zero,200bbac <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 200bb84:	e0bffe17 	ldw	r2,-8(fp)
 200bb88:	10c01317 	ldw	r3,76(r2)
 200bb8c:	e0bfff17 	ldw	r2,-4(fp)
 200bb90:	1085883a 	add	r2,r2,r2
 200bb94:	1085883a 	add	r2,r2,r2
 200bb98:	1885883a 	add	r2,r3,r2
 200bb9c:	e0fffc17 	ldw	r3,-16(fp)
 200bba0:	18c00017 	ldw	r3,0(r3)
 200bba4:	10c00015 	stw	r3,0(r2)
 200bba8:	00001706 	br	200bc08 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 200bbac:	00c00044 	movi	r3,1
 200bbb0:	e0bfff17 	ldw	r2,-4(fp)
 200bbb4:	1884983a 	sll	r2,r3,r2
 200bbb8:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 200bbbc:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 200bbc0:	10800144 	addi	r2,r2,5
 200bbc4:	1085883a 	add	r2,r2,r2
 200bbc8:	1085883a 	add	r2,r2,r2
 200bbcc:	100d883a 	mov	r6,r2
 200bbd0:	01400044 	movi	r5,1
 200bbd4:	e13ffe17 	ldw	r4,-8(fp)
 200bbd8:	200fb940 	call	200fb94 <_calloc_r>
 200bbdc:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 200bbe0:	e0bffc17 	ldw	r2,-16(fp)
 200bbe4:	1000021e 	bne	r2,zero,200bbf0 <_Balloc+0xe8>
 200bbe8:	0005883a 	mov	r2,zero
 200bbec:	00000d06 	br	200bc24 <_Balloc+0x11c>
      rv->_k = k;
 200bbf0:	e0bffc17 	ldw	r2,-16(fp)
 200bbf4:	e0ffff17 	ldw	r3,-4(fp)
 200bbf8:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 200bbfc:	e0bffc17 	ldw	r2,-16(fp)
 200bc00:	e0fffd17 	ldw	r3,-12(fp)
 200bc04:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 200bc08:	e0bffc17 	ldw	r2,-16(fp)
 200bc0c:	10000415 	stw	zero,16(r2)
 200bc10:	e0bffc17 	ldw	r2,-16(fp)
 200bc14:	10c00417 	ldw	r3,16(r2)
 200bc18:	e0bffc17 	ldw	r2,-16(fp)
 200bc1c:	10c00315 	stw	r3,12(r2)
  return rv;
 200bc20:	e0bffc17 	ldw	r2,-16(fp)
}
 200bc24:	e037883a 	mov	sp,fp
 200bc28:	dfc00117 	ldw	ra,4(sp)
 200bc2c:	df000017 	ldw	fp,0(sp)
 200bc30:	dec00204 	addi	sp,sp,8
 200bc34:	f800283a 	ret

0200bc38 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 200bc38:	defffd04 	addi	sp,sp,-12
 200bc3c:	df000215 	stw	fp,8(sp)
 200bc40:	df000204 	addi	fp,sp,8
 200bc44:	e13ffe15 	stw	r4,-8(fp)
 200bc48:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 200bc4c:	e0bfff17 	ldw	r2,-4(fp)
 200bc50:	10001326 	beq	r2,zero,200bca0 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 200bc54:	e0bffe17 	ldw	r2,-8(fp)
 200bc58:	10c01317 	ldw	r3,76(r2)
 200bc5c:	e0bfff17 	ldw	r2,-4(fp)
 200bc60:	10800117 	ldw	r2,4(r2)
 200bc64:	1085883a 	add	r2,r2,r2
 200bc68:	1085883a 	add	r2,r2,r2
 200bc6c:	1885883a 	add	r2,r3,r2
 200bc70:	10c00017 	ldw	r3,0(r2)
 200bc74:	e0bfff17 	ldw	r2,-4(fp)
 200bc78:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 200bc7c:	e0bffe17 	ldw	r2,-8(fp)
 200bc80:	10c01317 	ldw	r3,76(r2)
 200bc84:	e0bfff17 	ldw	r2,-4(fp)
 200bc88:	10800117 	ldw	r2,4(r2)
 200bc8c:	1085883a 	add	r2,r2,r2
 200bc90:	1085883a 	add	r2,r2,r2
 200bc94:	1885883a 	add	r2,r3,r2
 200bc98:	e0ffff17 	ldw	r3,-4(fp)
 200bc9c:	10c00015 	stw	r3,0(r2)
    }
}
 200bca0:	0001883a 	nop
 200bca4:	e037883a 	mov	sp,fp
 200bca8:	df000017 	ldw	fp,0(sp)
 200bcac:	dec00104 	addi	sp,sp,4
 200bcb0:	f800283a 	ret

0200bcb4 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 200bcb4:	defff304 	addi	sp,sp,-52
 200bcb8:	dfc00c15 	stw	ra,48(sp)
 200bcbc:	df000b15 	stw	fp,44(sp)
 200bcc0:	df000b04 	addi	fp,sp,44
 200bcc4:	e13ffc15 	stw	r4,-16(fp)
 200bcc8:	e17ffd15 	stw	r5,-12(fp)
 200bccc:	e1bffe15 	stw	r6,-8(fp)
 200bcd0:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 200bcd4:	e0bffd17 	ldw	r2,-12(fp)
 200bcd8:	10800417 	ldw	r2,16(r2)
 200bcdc:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 200bce0:	e0bffd17 	ldw	r2,-12(fp)
 200bce4:	10800504 	addi	r2,r2,20
 200bce8:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 200bcec:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 200bcf0:	e0bff617 	ldw	r2,-40(fp)
 200bcf4:	10800017 	ldw	r2,0(r2)
 200bcf8:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 200bcfc:	e0bff817 	ldw	r2,-32(fp)
 200bd00:	10ffffcc 	andi	r3,r2,65535
 200bd04:	e0bffe17 	ldw	r2,-8(fp)
 200bd08:	1887383a 	mul	r3,r3,r2
 200bd0c:	e0bfff17 	ldw	r2,-4(fp)
 200bd10:	1885883a 	add	r2,r3,r2
 200bd14:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 200bd18:	e0bff817 	ldw	r2,-32(fp)
 200bd1c:	1006d43a 	srli	r3,r2,16
 200bd20:	e0bffe17 	ldw	r2,-8(fp)
 200bd24:	1887383a 	mul	r3,r3,r2
 200bd28:	e0bff917 	ldw	r2,-28(fp)
 200bd2c:	1004d43a 	srli	r2,r2,16
 200bd30:	1885883a 	add	r2,r3,r2
 200bd34:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 200bd38:	e0bffa17 	ldw	r2,-24(fp)
 200bd3c:	1004d43a 	srli	r2,r2,16
 200bd40:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 200bd44:	e0bff617 	ldw	r2,-40(fp)
 200bd48:	10c00104 	addi	r3,r2,4
 200bd4c:	e0fff615 	stw	r3,-40(fp)
 200bd50:	e0fffa17 	ldw	r3,-24(fp)
 200bd54:	1808943a 	slli	r4,r3,16
 200bd58:	e0fff917 	ldw	r3,-28(fp)
 200bd5c:	18ffffcc 	andi	r3,r3,65535
 200bd60:	20c7883a 	add	r3,r4,r3
 200bd64:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 200bd68:	e0bff517 	ldw	r2,-44(fp)
 200bd6c:	10800044 	addi	r2,r2,1
 200bd70:	e0bff515 	stw	r2,-44(fp)
 200bd74:	e0fff517 	ldw	r3,-44(fp)
 200bd78:	e0bff717 	ldw	r2,-36(fp)
 200bd7c:	18bfdc16 	blt	r3,r2,200bcf0 <__multadd+0x3c>
  if (a)
 200bd80:	e0bfff17 	ldw	r2,-4(fp)
 200bd84:	10002a26 	beq	r2,zero,200be30 <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 200bd88:	e0bffd17 	ldw	r2,-12(fp)
 200bd8c:	10800217 	ldw	r2,8(r2)
 200bd90:	e0fff717 	ldw	r3,-36(fp)
 200bd94:	18801916 	blt	r3,r2,200bdfc <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 200bd98:	e0bffd17 	ldw	r2,-12(fp)
 200bd9c:	10800117 	ldw	r2,4(r2)
 200bda0:	10800044 	addi	r2,r2,1
 200bda4:	100b883a 	mov	r5,r2
 200bda8:	e13ffc17 	ldw	r4,-16(fp)
 200bdac:	200bb080 	call	200bb08 <_Balloc>
 200bdb0:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 200bdb4:	e0bffb17 	ldw	r2,-20(fp)
 200bdb8:	10c00304 	addi	r3,r2,12
 200bdbc:	e0bffd17 	ldw	r2,-12(fp)
 200bdc0:	11000304 	addi	r4,r2,12
 200bdc4:	e0bffd17 	ldw	r2,-12(fp)
 200bdc8:	10800417 	ldw	r2,16(r2)
 200bdcc:	10800084 	addi	r2,r2,2
 200bdd0:	1085883a 	add	r2,r2,r2
 200bdd4:	1085883a 	add	r2,r2,r2
 200bdd8:	100d883a 	mov	r6,r2
 200bddc:	200b883a 	mov	r5,r4
 200bde0:	1809883a 	mov	r4,r3
 200bde4:	200b5b40 	call	200b5b4 <memcpy>
	  Bfree (ptr, b);
 200bde8:	e17ffd17 	ldw	r5,-12(fp)
 200bdec:	e13ffc17 	ldw	r4,-16(fp)
 200bdf0:	200bc380 	call	200bc38 <_Bfree>
	  b = b1;
 200bdf4:	e0bffb17 	ldw	r2,-20(fp)
 200bdf8:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 200bdfc:	e0bff717 	ldw	r2,-36(fp)
 200be00:	10c00044 	addi	r3,r2,1
 200be04:	e0fff715 	stw	r3,-36(fp)
 200be08:	e0ffff17 	ldw	r3,-4(fp)
 200be0c:	e13ffd17 	ldw	r4,-12(fp)
 200be10:	10800144 	addi	r2,r2,5
 200be14:	1085883a 	add	r2,r2,r2
 200be18:	1085883a 	add	r2,r2,r2
 200be1c:	2085883a 	add	r2,r4,r2
 200be20:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 200be24:	e0bffd17 	ldw	r2,-12(fp)
 200be28:	e0fff717 	ldw	r3,-36(fp)
 200be2c:	10c00415 	stw	r3,16(r2)
    }
  return b;
 200be30:	e0bffd17 	ldw	r2,-12(fp)
}
 200be34:	e037883a 	mov	sp,fp
 200be38:	dfc00117 	ldw	ra,4(sp)
 200be3c:	df000017 	ldw	fp,0(sp)
 200be40:	dec00204 	addi	sp,sp,8
 200be44:	f800283a 	ret

0200be48 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 200be48:	defff504 	addi	sp,sp,-44
 200be4c:	dfc00a15 	stw	ra,40(sp)
 200be50:	df000915 	stw	fp,36(sp)
 200be54:	df000904 	addi	fp,sp,36
 200be58:	e13ffc15 	stw	r4,-16(fp)
 200be5c:	e17ffd15 	stw	r5,-12(fp)
 200be60:	e1bffe15 	stw	r6,-8(fp)
 200be64:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 200be68:	e0bfff17 	ldw	r2,-4(fp)
 200be6c:	10800204 	addi	r2,r2,8
 200be70:	01400244 	movi	r5,9
 200be74:	1009883a 	mov	r4,r2
 200be78:	2003d8c0 	call	2003d8c <__divsi3>
 200be7c:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 200be80:	e03ff915 	stw	zero,-28(fp)
 200be84:	00800044 	movi	r2,1
 200be88:	e0bffa15 	stw	r2,-24(fp)
 200be8c:	00000606 	br	200bea8 <__s2b+0x60>
 200be90:	e0bffa17 	ldw	r2,-24(fp)
 200be94:	1085883a 	add	r2,r2,r2
 200be98:	e0bffa15 	stw	r2,-24(fp)
 200be9c:	e0bff917 	ldw	r2,-28(fp)
 200bea0:	10800044 	addi	r2,r2,1
 200bea4:	e0bff915 	stw	r2,-28(fp)
 200bea8:	e0bffb17 	ldw	r2,-20(fp)
 200beac:	e0fffa17 	ldw	r3,-24(fp)
 200beb0:	18bff716 	blt	r3,r2,200be90 <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 200beb4:	e17ff917 	ldw	r5,-28(fp)
 200beb8:	e13ffc17 	ldw	r4,-16(fp)
 200bebc:	200bb080 	call	200bb08 <_Balloc>
 200bec0:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 200bec4:	e0bff717 	ldw	r2,-36(fp)
 200bec8:	e0c00217 	ldw	r3,8(fp)
 200becc:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200bed0:	e0bff717 	ldw	r2,-36(fp)
 200bed4:	00c00044 	movi	r3,1
 200bed8:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 200bedc:	00800244 	movi	r2,9
 200bee0:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 200bee4:	e0bffe17 	ldw	r2,-8(fp)
 200bee8:	10800290 	cmplti	r2,r2,10
 200beec:	10001b1e 	bne	r2,zero,200bf5c <__s2b+0x114>
    {
      s += 9;
 200bef0:	e0bffd17 	ldw	r2,-12(fp)
 200bef4:	10800244 	addi	r2,r2,9
 200bef8:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 200befc:	e0bffd17 	ldw	r2,-12(fp)
 200bf00:	10c00044 	addi	r3,r2,1
 200bf04:	e0fffd15 	stw	r3,-12(fp)
 200bf08:	10800003 	ldbu	r2,0(r2)
 200bf0c:	10803fcc 	andi	r2,r2,255
 200bf10:	1080201c 	xori	r2,r2,128
 200bf14:	10bfe004 	addi	r2,r2,-128
 200bf18:	10bff404 	addi	r2,r2,-48
 200bf1c:	100f883a 	mov	r7,r2
 200bf20:	01800284 	movi	r6,10
 200bf24:	e17ff717 	ldw	r5,-36(fp)
 200bf28:	e13ffc17 	ldw	r4,-16(fp)
 200bf2c:	200bcb40 	call	200bcb4 <__multadd>
 200bf30:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 200bf34:	e0bff817 	ldw	r2,-32(fp)
 200bf38:	10800044 	addi	r2,r2,1
 200bf3c:	e0bff815 	stw	r2,-32(fp)
 200bf40:	e0fff817 	ldw	r3,-32(fp)
 200bf44:	e0bffe17 	ldw	r2,-8(fp)
 200bf48:	18bfec16 	blt	r3,r2,200befc <__s2b+0xb4>
      s++;
 200bf4c:	e0bffd17 	ldw	r2,-12(fp)
 200bf50:	10800044 	addi	r2,r2,1
 200bf54:	e0bffd15 	stw	r2,-12(fp)
 200bf58:	00001506 	br	200bfb0 <__s2b+0x168>
    }
  else
    s += 10;
 200bf5c:	e0bffd17 	ldw	r2,-12(fp)
 200bf60:	10800284 	addi	r2,r2,10
 200bf64:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 200bf68:	00001106 	br	200bfb0 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 200bf6c:	e0bffd17 	ldw	r2,-12(fp)
 200bf70:	10c00044 	addi	r3,r2,1
 200bf74:	e0fffd15 	stw	r3,-12(fp)
 200bf78:	10800003 	ldbu	r2,0(r2)
 200bf7c:	10803fcc 	andi	r2,r2,255
 200bf80:	1080201c 	xori	r2,r2,128
 200bf84:	10bfe004 	addi	r2,r2,-128
 200bf88:	10bff404 	addi	r2,r2,-48
 200bf8c:	100f883a 	mov	r7,r2
 200bf90:	01800284 	movi	r6,10
 200bf94:	e17ff717 	ldw	r5,-36(fp)
 200bf98:	e13ffc17 	ldw	r4,-16(fp)
 200bf9c:	200bcb40 	call	200bcb4 <__multadd>
 200bfa0:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 200bfa4:	e0bff817 	ldw	r2,-32(fp)
 200bfa8:	10800044 	addi	r2,r2,1
 200bfac:	e0bff815 	stw	r2,-32(fp)
 200bfb0:	e0fff817 	ldw	r3,-32(fp)
 200bfb4:	e0bfff17 	ldw	r2,-4(fp)
 200bfb8:	18bfec16 	blt	r3,r2,200bf6c <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 200bfbc:	e0bff717 	ldw	r2,-36(fp)
}
 200bfc0:	e037883a 	mov	sp,fp
 200bfc4:	dfc00117 	ldw	ra,4(sp)
 200bfc8:	df000017 	ldw	fp,0(sp)
 200bfcc:	dec00204 	addi	sp,sp,8
 200bfd0:	f800283a 	ret

0200bfd4 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 200bfd4:	defffe04 	addi	sp,sp,-8
 200bfd8:	df000115 	stw	fp,4(sp)
 200bfdc:	dc000015 	stw	r16,0(sp)
 200bfe0:	df000104 	addi	fp,sp,4
 200bfe4:	2005883a 	mov	r2,r4
  register int k = 0;
 200bfe8:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 200bfec:	10ffffec 	andhi	r3,r2,65535
 200bff0:	1800021e 	bne	r3,zero,200bffc <__hi0bits+0x28>
    {
      k = 16;
 200bff4:	04000404 	movi	r16,16
      x <<= 16;
 200bff8:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 200bffc:	10ffc02c 	andhi	r3,r2,65280
 200c000:	1800021e 	bne	r3,zero,200c00c <__hi0bits+0x38>
    {
      k += 8;
 200c004:	84000204 	addi	r16,r16,8
      x <<= 8;
 200c008:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 200c00c:	10fc002c 	andhi	r3,r2,61440
 200c010:	1800021e 	bne	r3,zero,200c01c <__hi0bits+0x48>
    {
      k += 4;
 200c014:	84000104 	addi	r16,r16,4
      x <<= 4;
 200c018:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 200c01c:	10f0002c 	andhi	r3,r2,49152
 200c020:	1800031e 	bne	r3,zero,200c030 <__hi0bits+0x5c>
    {
      k += 2;
 200c024:	84000084 	addi	r16,r16,2
      x <<= 2;
 200c028:	1085883a 	add	r2,r2,r2
 200c02c:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 200c030:	1007883a 	mov	r3,r2
 200c034:	18000516 	blt	r3,zero,200c04c <__hi0bits+0x78>
    {
      k++;
 200c038:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 200c03c:	1090002c 	andhi	r2,r2,16384
 200c040:	1000021e 	bne	r2,zero,200c04c <__hi0bits+0x78>
	return 32;
 200c044:	00800804 	movi	r2,32
 200c048:	00000106 	br	200c050 <__hi0bits+0x7c>
    }
  return k;
 200c04c:	8005883a 	mov	r2,r16
}
 200c050:	e6ffff04 	addi	sp,fp,-4
 200c054:	df000117 	ldw	fp,4(sp)
 200c058:	dc000017 	ldw	r16,0(sp)
 200c05c:	dec00204 	addi	sp,sp,8
 200c060:	f800283a 	ret

0200c064 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 200c064:	defffc04 	addi	sp,sp,-16
 200c068:	df000315 	stw	fp,12(sp)
 200c06c:	dc400215 	stw	r17,8(sp)
 200c070:	dc000115 	stw	r16,4(sp)
 200c074:	df000304 	addi	fp,sp,12
 200c078:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 200c07c:	e0bffd17 	ldw	r2,-12(fp)
 200c080:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 200c084:	808001cc 	andi	r2,r16,7
 200c088:	10001026 	beq	r2,zero,200c0cc <__lo0bits+0x68>
    {
      if (x & 1)
 200c08c:	8080004c 	andi	r2,r16,1
 200c090:	10000226 	beq	r2,zero,200c09c <__lo0bits+0x38>
	return 0;
 200c094:	0005883a 	mov	r2,zero
 200c098:	00002706 	br	200c138 <__lo0bits+0xd4>
      if (x & 2)
 200c09c:	8080008c 	andi	r2,r16,2
 200c0a0:	10000526 	beq	r2,zero,200c0b8 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 200c0a4:	8006d07a 	srli	r3,r16,1
 200c0a8:	e0bffd17 	ldw	r2,-12(fp)
 200c0ac:	10c00015 	stw	r3,0(r2)
	  return 1;
 200c0b0:	00800044 	movi	r2,1
 200c0b4:	00002006 	br	200c138 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 200c0b8:	8006d0ba 	srli	r3,r16,2
 200c0bc:	e0bffd17 	ldw	r2,-12(fp)
 200c0c0:	10c00015 	stw	r3,0(r2)
      return 2;
 200c0c4:	00800084 	movi	r2,2
 200c0c8:	00001b06 	br	200c138 <__lo0bits+0xd4>
    }
  k = 0;
 200c0cc:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 200c0d0:	80bfffcc 	andi	r2,r16,65535
 200c0d4:	1000021e 	bne	r2,zero,200c0e0 <__lo0bits+0x7c>
    {
      k = 16;
 200c0d8:	04400404 	movi	r17,16
      x >>= 16;
 200c0dc:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 200c0e0:	80803fcc 	andi	r2,r16,255
 200c0e4:	1000021e 	bne	r2,zero,200c0f0 <__lo0bits+0x8c>
    {
      k += 8;
 200c0e8:	8c400204 	addi	r17,r17,8
      x >>= 8;
 200c0ec:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 200c0f0:	808003cc 	andi	r2,r16,15
 200c0f4:	1000021e 	bne	r2,zero,200c100 <__lo0bits+0x9c>
    {
      k += 4;
 200c0f8:	8c400104 	addi	r17,r17,4
      x >>= 4;
 200c0fc:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 200c100:	808000cc 	andi	r2,r16,3
 200c104:	1000021e 	bne	r2,zero,200c110 <__lo0bits+0xac>
    {
      k += 2;
 200c108:	8c400084 	addi	r17,r17,2
      x >>= 2;
 200c10c:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 200c110:	8080004c 	andi	r2,r16,1
 200c114:	1000051e 	bne	r2,zero,200c12c <__lo0bits+0xc8>
    {
      k++;
 200c118:	8c400044 	addi	r17,r17,1
      x >>= 1;
 200c11c:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 200c120:	8000021e 	bne	r16,zero,200c12c <__lo0bits+0xc8>
	return 32;
 200c124:	00800804 	movi	r2,32
 200c128:	00000306 	br	200c138 <__lo0bits+0xd4>
    }
  *y = x;
 200c12c:	e0bffd17 	ldw	r2,-12(fp)
 200c130:	14000015 	stw	r16,0(r2)
  return k;
 200c134:	8805883a 	mov	r2,r17
}
 200c138:	e6fffe04 	addi	sp,fp,-8
 200c13c:	df000217 	ldw	fp,8(sp)
 200c140:	dc400117 	ldw	r17,4(sp)
 200c144:	dc000017 	ldw	r16,0(sp)
 200c148:	dec00304 	addi	sp,sp,12
 200c14c:	f800283a 	ret

0200c150 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 200c150:	defffb04 	addi	sp,sp,-20
 200c154:	dfc00415 	stw	ra,16(sp)
 200c158:	df000315 	stw	fp,12(sp)
 200c15c:	df000304 	addi	fp,sp,12
 200c160:	e13ffe15 	stw	r4,-8(fp)
 200c164:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 200c168:	01400044 	movi	r5,1
 200c16c:	e13ffe17 	ldw	r4,-8(fp)
 200c170:	200bb080 	call	200bb08 <_Balloc>
 200c174:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 200c178:	e0ffff17 	ldw	r3,-4(fp)
 200c17c:	e0bffd17 	ldw	r2,-12(fp)
 200c180:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200c184:	e0bffd17 	ldw	r2,-12(fp)
 200c188:	00c00044 	movi	r3,1
 200c18c:	10c00415 	stw	r3,16(r2)
  return b;
 200c190:	e0bffd17 	ldw	r2,-12(fp)
}
 200c194:	e037883a 	mov	sp,fp
 200c198:	dfc00117 	ldw	ra,4(sp)
 200c19c:	df000017 	ldw	fp,0(sp)
 200c1a0:	dec00204 	addi	sp,sp,8
 200c1a4:	f800283a 	ret

0200c1a8 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 200c1a8:	deffeb04 	addi	sp,sp,-84
 200c1ac:	dfc01415 	stw	ra,80(sp)
 200c1b0:	df001315 	stw	fp,76(sp)
 200c1b4:	df001304 	addi	fp,sp,76
 200c1b8:	e13ffd15 	stw	r4,-12(fp)
 200c1bc:	e17ffe15 	stw	r5,-8(fp)
 200c1c0:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 200c1c4:	e0bffe17 	ldw	r2,-8(fp)
 200c1c8:	10c00417 	ldw	r3,16(r2)
 200c1cc:	e0bfff17 	ldw	r2,-4(fp)
 200c1d0:	10800417 	ldw	r2,16(r2)
 200c1d4:	1880060e 	bge	r3,r2,200c1f0 <__multiply+0x48>
    {
      c = a;
 200c1d8:	e0bffe17 	ldw	r2,-8(fp)
 200c1dc:	e0bff515 	stw	r2,-44(fp)
      a = b;
 200c1e0:	e0bfff17 	ldw	r2,-4(fp)
 200c1e4:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200c1e8:	e0bff517 	ldw	r2,-44(fp)
 200c1ec:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 200c1f0:	e0bffe17 	ldw	r2,-8(fp)
 200c1f4:	10800117 	ldw	r2,4(r2)
 200c1f8:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 200c1fc:	e0bffe17 	ldw	r2,-8(fp)
 200c200:	10800417 	ldw	r2,16(r2)
 200c204:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 200c208:	e0bfff17 	ldw	r2,-4(fp)
 200c20c:	10800417 	ldw	r2,16(r2)
 200c210:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 200c214:	e0fff617 	ldw	r3,-40(fp)
 200c218:	e0bff717 	ldw	r2,-36(fp)
 200c21c:	1885883a 	add	r2,r3,r2
 200c220:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 200c224:	e0bffe17 	ldw	r2,-8(fp)
 200c228:	10c00217 	ldw	r3,8(r2)
 200c22c:	e0bfee17 	ldw	r2,-72(fp)
 200c230:	1880030e 	bge	r3,r2,200c240 <__multiply+0x98>
    k++;
 200c234:	e0bfed17 	ldw	r2,-76(fp)
 200c238:	10800044 	addi	r2,r2,1
 200c23c:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 200c240:	e17fed17 	ldw	r5,-76(fp)
 200c244:	e13ffd17 	ldw	r4,-12(fp)
 200c248:	200bb080 	call	200bb08 <_Balloc>
 200c24c:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200c250:	e0bff517 	ldw	r2,-44(fp)
 200c254:	10800504 	addi	r2,r2,20
 200c258:	e0bff015 	stw	r2,-64(fp)
 200c25c:	e0bfee17 	ldw	r2,-72(fp)
 200c260:	1085883a 	add	r2,r2,r2
 200c264:	1085883a 	add	r2,r2,r2
 200c268:	1007883a 	mov	r3,r2
 200c26c:	e0bff017 	ldw	r2,-64(fp)
 200c270:	10c5883a 	add	r2,r2,r3
 200c274:	e0bff815 	stw	r2,-32(fp)
 200c278:	00000506 	br	200c290 <__multiply+0xe8>
    *x = 0;
 200c27c:	e0bff017 	ldw	r2,-64(fp)
 200c280:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200c284:	e0bff017 	ldw	r2,-64(fp)
 200c288:	10800104 	addi	r2,r2,4
 200c28c:	e0bff015 	stw	r2,-64(fp)
 200c290:	e0fff017 	ldw	r3,-64(fp)
 200c294:	e0bff817 	ldw	r2,-32(fp)
 200c298:	18bff836 	bltu	r3,r2,200c27c <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 200c29c:	e0bffe17 	ldw	r2,-8(fp)
 200c2a0:	10800504 	addi	r2,r2,20
 200c2a4:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 200c2a8:	e0bff617 	ldw	r2,-40(fp)
 200c2ac:	1085883a 	add	r2,r2,r2
 200c2b0:	1085883a 	add	r2,r2,r2
 200c2b4:	1007883a 	mov	r3,r2
 200c2b8:	e0bff817 	ldw	r2,-32(fp)
 200c2bc:	10c5883a 	add	r2,r2,r3
 200c2c0:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200c2c4:	e0bfff17 	ldw	r2,-4(fp)
 200c2c8:	10800504 	addi	r2,r2,20
 200c2cc:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 200c2d0:	e0bff717 	ldw	r2,-36(fp)
 200c2d4:	1085883a 	add	r2,r2,r2
 200c2d8:	1085883a 	add	r2,r2,r2
 200c2dc:	1007883a 	mov	r3,r2
 200c2e0:	e0bff117 	ldw	r2,-60(fp)
 200c2e4:	10c5883a 	add	r2,r2,r3
 200c2e8:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 200c2ec:	e0bff517 	ldw	r2,-44(fp)
 200c2f0:	10800504 	addi	r2,r2,20
 200c2f4:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200c2f8:	00007d06 	br	200c4f0 <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 200c2fc:	e0bff117 	ldw	r2,-60(fp)
 200c300:	10800017 	ldw	r2,0(r2)
 200c304:	10bfffcc 	andi	r2,r2,65535
 200c308:	e0bffb15 	stw	r2,-20(fp)
 200c30c:	e0bffb17 	ldw	r2,-20(fp)
 200c310:	10003426 	beq	r2,zero,200c3e4 <__multiply+0x23c>
	{
	  x = xa;
 200c314:	e0bff817 	ldw	r2,-32(fp)
 200c318:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200c31c:	e0bff317 	ldw	r2,-52(fp)
 200c320:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200c324:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 200c328:	e0bff017 	ldw	r2,-64(fp)
 200c32c:	10800017 	ldw	r2,0(r2)
 200c330:	10ffffcc 	andi	r3,r2,65535
 200c334:	e0bffb17 	ldw	r2,-20(fp)
 200c338:	1887383a 	mul	r3,r3,r2
 200c33c:	e0bff217 	ldw	r2,-56(fp)
 200c340:	10800017 	ldw	r2,0(r2)
 200c344:	10bfffcc 	andi	r2,r2,65535
 200c348:	1887883a 	add	r3,r3,r2
 200c34c:	e0bfef17 	ldw	r2,-68(fp)
 200c350:	1885883a 	add	r2,r3,r2
 200c354:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200c358:	e0bffc17 	ldw	r2,-16(fp)
 200c35c:	1004d43a 	srli	r2,r2,16
 200c360:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 200c364:	e0bff017 	ldw	r2,-64(fp)
 200c368:	10c00104 	addi	r3,r2,4
 200c36c:	e0fff015 	stw	r3,-64(fp)
 200c370:	10800017 	ldw	r2,0(r2)
 200c374:	1006d43a 	srli	r3,r2,16
 200c378:	e0bffb17 	ldw	r2,-20(fp)
 200c37c:	1887383a 	mul	r3,r3,r2
 200c380:	e0bff217 	ldw	r2,-56(fp)
 200c384:	10800017 	ldw	r2,0(r2)
 200c388:	1004d43a 	srli	r2,r2,16
 200c38c:	1887883a 	add	r3,r3,r2
 200c390:	e0bfef17 	ldw	r2,-68(fp)
 200c394:	1885883a 	add	r2,r3,r2
 200c398:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200c39c:	e0bff417 	ldw	r2,-48(fp)
 200c3a0:	1004d43a 	srli	r2,r2,16
 200c3a4:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 200c3a8:	e0bff217 	ldw	r2,-56(fp)
 200c3ac:	10c00104 	addi	r3,r2,4
 200c3b0:	e0fff215 	stw	r3,-56(fp)
 200c3b4:	e0fff417 	ldw	r3,-48(fp)
 200c3b8:	1808943a 	slli	r4,r3,16
 200c3bc:	e0fffc17 	ldw	r3,-16(fp)
 200c3c0:	18ffffcc 	andi	r3,r3,65535
 200c3c4:	20c6b03a 	or	r3,r4,r3
 200c3c8:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 200c3cc:	e0fff017 	ldw	r3,-64(fp)
 200c3d0:	e0bff917 	ldw	r2,-28(fp)
 200c3d4:	18bfd436 	bltu	r3,r2,200c328 <__multiply+0x180>
	  *xc = carry;
 200c3d8:	e0bff217 	ldw	r2,-56(fp)
 200c3dc:	e0ffef17 	ldw	r3,-68(fp)
 200c3e0:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 200c3e4:	e0bff117 	ldw	r2,-60(fp)
 200c3e8:	10800017 	ldw	r2,0(r2)
 200c3ec:	1004d43a 	srli	r2,r2,16
 200c3f0:	e0bffb15 	stw	r2,-20(fp)
 200c3f4:	e0bffb17 	ldw	r2,-20(fp)
 200c3f8:	10003726 	beq	r2,zero,200c4d8 <__multiply+0x330>
	{
	  x = xa;
 200c3fc:	e0bff817 	ldw	r2,-32(fp)
 200c400:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200c404:	e0bff317 	ldw	r2,-52(fp)
 200c408:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200c40c:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 200c410:	e0bff217 	ldw	r2,-56(fp)
 200c414:	10800017 	ldw	r2,0(r2)
 200c418:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 200c41c:	e0bff017 	ldw	r2,-64(fp)
 200c420:	10800017 	ldw	r2,0(r2)
 200c424:	10ffffcc 	andi	r3,r2,65535
 200c428:	e0bffb17 	ldw	r2,-20(fp)
 200c42c:	1887383a 	mul	r3,r3,r2
 200c430:	e0bff217 	ldw	r2,-56(fp)
 200c434:	10800017 	ldw	r2,0(r2)
 200c438:	1004d43a 	srli	r2,r2,16
 200c43c:	1887883a 	add	r3,r3,r2
 200c440:	e0bfef17 	ldw	r2,-68(fp)
 200c444:	1885883a 	add	r2,r3,r2
 200c448:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200c44c:	e0bffc17 	ldw	r2,-16(fp)
 200c450:	1004d43a 	srli	r2,r2,16
 200c454:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 200c458:	e0bff217 	ldw	r2,-56(fp)
 200c45c:	10c00104 	addi	r3,r2,4
 200c460:	e0fff215 	stw	r3,-56(fp)
 200c464:	e0fffc17 	ldw	r3,-16(fp)
 200c468:	1808943a 	slli	r4,r3,16
 200c46c:	e0fff417 	ldw	r3,-48(fp)
 200c470:	18ffffcc 	andi	r3,r3,65535
 200c474:	20c6b03a 	or	r3,r4,r3
 200c478:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 200c47c:	e0bff017 	ldw	r2,-64(fp)
 200c480:	10c00104 	addi	r3,r2,4
 200c484:	e0fff015 	stw	r3,-64(fp)
 200c488:	10800017 	ldw	r2,0(r2)
 200c48c:	1006d43a 	srli	r3,r2,16
 200c490:	e0bffb17 	ldw	r2,-20(fp)
 200c494:	1887383a 	mul	r3,r3,r2
 200c498:	e0bff217 	ldw	r2,-56(fp)
 200c49c:	10800017 	ldw	r2,0(r2)
 200c4a0:	10bfffcc 	andi	r2,r2,65535
 200c4a4:	1887883a 	add	r3,r3,r2
 200c4a8:	e0bfef17 	ldw	r2,-68(fp)
 200c4ac:	1885883a 	add	r2,r3,r2
 200c4b0:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200c4b4:	e0bff417 	ldw	r2,-48(fp)
 200c4b8:	1004d43a 	srli	r2,r2,16
 200c4bc:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 200c4c0:	e0fff017 	ldw	r3,-64(fp)
 200c4c4:	e0bff917 	ldw	r2,-28(fp)
 200c4c8:	18bfd436 	bltu	r3,r2,200c41c <__multiply+0x274>
	  *xc = z2;
 200c4cc:	e0bff217 	ldw	r2,-56(fp)
 200c4d0:	e0fff417 	ldw	r3,-48(fp)
 200c4d4:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200c4d8:	e0bff117 	ldw	r2,-60(fp)
 200c4dc:	10800104 	addi	r2,r2,4
 200c4e0:	e0bff115 	stw	r2,-60(fp)
 200c4e4:	e0bff317 	ldw	r2,-52(fp)
 200c4e8:	10800104 	addi	r2,r2,4
 200c4ec:	e0bff315 	stw	r2,-52(fp)
 200c4f0:	e0fff117 	ldw	r3,-60(fp)
 200c4f4:	e0bffa17 	ldw	r2,-24(fp)
 200c4f8:	18bf8036 	bltu	r3,r2,200c2fc <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 200c4fc:	e0bff517 	ldw	r2,-44(fp)
 200c500:	10800504 	addi	r2,r2,20
 200c504:	e0bff315 	stw	r2,-52(fp)
 200c508:	e0bfee17 	ldw	r2,-72(fp)
 200c50c:	1085883a 	add	r2,r2,r2
 200c510:	1085883a 	add	r2,r2,r2
 200c514:	1007883a 	mov	r3,r2
 200c518:	e0bff317 	ldw	r2,-52(fp)
 200c51c:	10c5883a 	add	r2,r2,r3
 200c520:	e0bff215 	stw	r2,-56(fp)
 200c524:	00000306 	br	200c534 <__multiply+0x38c>
 200c528:	e0bfee17 	ldw	r2,-72(fp)
 200c52c:	10bfffc4 	addi	r2,r2,-1
 200c530:	e0bfee15 	stw	r2,-72(fp)
 200c534:	e0bfee17 	ldw	r2,-72(fp)
 200c538:	0080060e 	bge	zero,r2,200c554 <__multiply+0x3ac>
 200c53c:	e0bff217 	ldw	r2,-56(fp)
 200c540:	10bfff04 	addi	r2,r2,-4
 200c544:	e0bff215 	stw	r2,-56(fp)
 200c548:	e0bff217 	ldw	r2,-56(fp)
 200c54c:	10800017 	ldw	r2,0(r2)
 200c550:	103ff526 	beq	r2,zero,200c528 <__multiply+0x380>
  c->_wds = wc;
 200c554:	e0bff517 	ldw	r2,-44(fp)
 200c558:	e0ffee17 	ldw	r3,-72(fp)
 200c55c:	10c00415 	stw	r3,16(r2)
  return c;
 200c560:	e0bff517 	ldw	r2,-44(fp)
}
 200c564:	e037883a 	mov	sp,fp
 200c568:	dfc00117 	ldw	ra,4(sp)
 200c56c:	df000017 	ldw	fp,0(sp)
 200c570:	dec00204 	addi	sp,sp,8
 200c574:	f800283a 	ret

0200c578 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200c578:	defff704 	addi	sp,sp,-36
 200c57c:	dfc00815 	stw	ra,32(sp)
 200c580:	df000715 	stw	fp,28(sp)
 200c584:	df000704 	addi	fp,sp,28
 200c588:	e13ffd15 	stw	r4,-12(fp)
 200c58c:	e17ffe15 	stw	r5,-8(fp)
 200c590:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 200c594:	e0bfff17 	ldw	r2,-4(fp)
 200c598:	108000cc 	andi	r2,r2,3
 200c59c:	e0bffb15 	stw	r2,-20(fp)
 200c5a0:	e0bffb17 	ldw	r2,-20(fp)
 200c5a4:	10000e26 	beq	r2,zero,200c5e0 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 200c5a8:	e0bffb17 	ldw	r2,-20(fp)
 200c5ac:	10ffffc4 	addi	r3,r2,-1
 200c5b0:	008080b4 	movhi	r2,514
 200c5b4:	10b2c304 	addi	r2,r2,-13556
 200c5b8:	18c7883a 	add	r3,r3,r3
 200c5bc:	18c7883a 	add	r3,r3,r3
 200c5c0:	10c5883a 	add	r2,r2,r3
 200c5c4:	10800017 	ldw	r2,0(r2)
 200c5c8:	000f883a 	mov	r7,zero
 200c5cc:	100d883a 	mov	r6,r2
 200c5d0:	e17ffe17 	ldw	r5,-8(fp)
 200c5d4:	e13ffd17 	ldw	r4,-12(fp)
 200c5d8:	200bcb40 	call	200bcb4 <__multadd>
 200c5dc:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 200c5e0:	e0bfff17 	ldw	r2,-4(fp)
 200c5e4:	1005d0ba 	srai	r2,r2,2
 200c5e8:	e0bfff15 	stw	r2,-4(fp)
 200c5ec:	e0bfff17 	ldw	r2,-4(fp)
 200c5f0:	1000021e 	bne	r2,zero,200c5fc <__pow5mult+0x84>
    return b;
 200c5f4:	e0bffe17 	ldw	r2,-8(fp)
 200c5f8:	00003806 	br	200c6dc <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 200c5fc:	e0bffd17 	ldw	r2,-12(fp)
 200c600:	10801217 	ldw	r2,72(r2)
 200c604:	e0bff915 	stw	r2,-28(fp)
 200c608:	e0bff917 	ldw	r2,-28(fp)
 200c60c:	10000b1e 	bne	r2,zero,200c63c <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 200c610:	01409c44 	movi	r5,625
 200c614:	e13ffd17 	ldw	r4,-12(fp)
 200c618:	200c1500 	call	200c150 <__i2b>
 200c61c:	1007883a 	mov	r3,r2
 200c620:	e0bffd17 	ldw	r2,-12(fp)
 200c624:	10c01215 	stw	r3,72(r2)
 200c628:	e0bffd17 	ldw	r2,-12(fp)
 200c62c:	10801217 	ldw	r2,72(r2)
 200c630:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 200c634:	e0bff917 	ldw	r2,-28(fp)
 200c638:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 200c63c:	e0bfff17 	ldw	r2,-4(fp)
 200c640:	1080004c 	andi	r2,r2,1
 200c644:	10000a26 	beq	r2,zero,200c670 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 200c648:	e1bff917 	ldw	r6,-28(fp)
 200c64c:	e17ffe17 	ldw	r5,-8(fp)
 200c650:	e13ffd17 	ldw	r4,-12(fp)
 200c654:	200c1a80 	call	200c1a8 <__multiply>
 200c658:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 200c65c:	e17ffe17 	ldw	r5,-8(fp)
 200c660:	e13ffd17 	ldw	r4,-12(fp)
 200c664:	200bc380 	call	200bc38 <_Bfree>
	  b = b1;
 200c668:	e0bffc17 	ldw	r2,-16(fp)
 200c66c:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 200c670:	e0bfff17 	ldw	r2,-4(fp)
 200c674:	1005d07a 	srai	r2,r2,1
 200c678:	e0bfff15 	stw	r2,-4(fp)
 200c67c:	e0bfff17 	ldw	r2,-4(fp)
 200c680:	10001426 	beq	r2,zero,200c6d4 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 200c684:	e0bff917 	ldw	r2,-28(fp)
 200c688:	10800017 	ldw	r2,0(r2)
 200c68c:	e0bffa15 	stw	r2,-24(fp)
 200c690:	e0bffa17 	ldw	r2,-24(fp)
 200c694:	10000c1e 	bne	r2,zero,200c6c8 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 200c698:	e1bff917 	ldw	r6,-28(fp)
 200c69c:	e17ff917 	ldw	r5,-28(fp)
 200c6a0:	e13ffd17 	ldw	r4,-12(fp)
 200c6a4:	200c1a80 	call	200c1a8 <__multiply>
 200c6a8:	1007883a 	mov	r3,r2
 200c6ac:	e0bff917 	ldw	r2,-28(fp)
 200c6b0:	10c00015 	stw	r3,0(r2)
 200c6b4:	e0bff917 	ldw	r2,-28(fp)
 200c6b8:	10800017 	ldw	r2,0(r2)
 200c6bc:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 200c6c0:	e0bffa17 	ldw	r2,-24(fp)
 200c6c4:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 200c6c8:	e0bffa17 	ldw	r2,-24(fp)
 200c6cc:	e0bff915 	stw	r2,-28(fp)
    }
 200c6d0:	003fda06 	br	200c63c <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 200c6d4:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 200c6d8:	e0bffe17 	ldw	r2,-8(fp)
}
 200c6dc:	e037883a 	mov	sp,fp
 200c6e0:	dfc00117 	ldw	ra,4(sp)
 200c6e4:	df000017 	ldw	fp,0(sp)
 200c6e8:	dec00204 	addi	sp,sp,8
 200c6ec:	f800283a 	ret

0200c6f0 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200c6f0:	defff204 	addi	sp,sp,-56
 200c6f4:	dfc00d15 	stw	ra,52(sp)
 200c6f8:	df000c15 	stw	fp,48(sp)
 200c6fc:	df000c04 	addi	fp,sp,48
 200c700:	e13ffd15 	stw	r4,-12(fp)
 200c704:	e17ffe15 	stw	r5,-8(fp)
 200c708:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 200c70c:	e0bfff17 	ldw	r2,-4(fp)
 200c710:	1005d17a 	srai	r2,r2,5
 200c714:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 200c718:	e0bffe17 	ldw	r2,-8(fp)
 200c71c:	10800117 	ldw	r2,4(r2)
 200c720:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 200c724:	e0bffe17 	ldw	r2,-8(fp)
 200c728:	10c00417 	ldw	r3,16(r2)
 200c72c:	e0bffa17 	ldw	r2,-24(fp)
 200c730:	1885883a 	add	r2,r3,r2
 200c734:	10800044 	addi	r2,r2,1
 200c738:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200c73c:	e0bffe17 	ldw	r2,-8(fp)
 200c740:	10800217 	ldw	r2,8(r2)
 200c744:	e0bff415 	stw	r2,-48(fp)
 200c748:	00000606 	br	200c764 <__lshift+0x74>
    k1++;
 200c74c:	e0bff517 	ldw	r2,-44(fp)
 200c750:	10800044 	addi	r2,r2,1
 200c754:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200c758:	e0bff417 	ldw	r2,-48(fp)
 200c75c:	1085883a 	add	r2,r2,r2
 200c760:	e0bff415 	stw	r2,-48(fp)
 200c764:	e0bff617 	ldw	r2,-40(fp)
 200c768:	e0fff417 	ldw	r3,-48(fp)
 200c76c:	18bff716 	blt	r3,r2,200c74c <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 200c770:	e17ff517 	ldw	r5,-44(fp)
 200c774:	e13ffd17 	ldw	r4,-12(fp)
 200c778:	200bb080 	call	200bb08 <_Balloc>
 200c77c:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 200c780:	e0bffb17 	ldw	r2,-20(fp)
 200c784:	10800504 	addi	r2,r2,20
 200c788:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 200c78c:	e03ff415 	stw	zero,-48(fp)
 200c790:	00000706 	br	200c7b0 <__lshift+0xc0>
    *x1++ = 0;
 200c794:	e0bff817 	ldw	r2,-32(fp)
 200c798:	10c00104 	addi	r3,r2,4
 200c79c:	e0fff815 	stw	r3,-32(fp)
 200c7a0:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 200c7a4:	e0bff417 	ldw	r2,-48(fp)
 200c7a8:	10800044 	addi	r2,r2,1
 200c7ac:	e0bff415 	stw	r2,-48(fp)
 200c7b0:	e0fff417 	ldw	r3,-48(fp)
 200c7b4:	e0bffa17 	ldw	r2,-24(fp)
 200c7b8:	18bff616 	blt	r3,r2,200c794 <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 200c7bc:	e0bffe17 	ldw	r2,-8(fp)
 200c7c0:	10800504 	addi	r2,r2,20
 200c7c4:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 200c7c8:	e0bffe17 	ldw	r2,-8(fp)
 200c7cc:	10800417 	ldw	r2,16(r2)
 200c7d0:	1085883a 	add	r2,r2,r2
 200c7d4:	1085883a 	add	r2,r2,r2
 200c7d8:	1007883a 	mov	r3,r2
 200c7dc:	e0bff717 	ldw	r2,-36(fp)
 200c7e0:	10c5883a 	add	r2,r2,r3
 200c7e4:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 200c7e8:	e0bfff17 	ldw	r2,-4(fp)
 200c7ec:	108007cc 	andi	r2,r2,31
 200c7f0:	e0bfff15 	stw	r2,-4(fp)
 200c7f4:	e0bfff17 	ldw	r2,-4(fp)
 200c7f8:	10002326 	beq	r2,zero,200c888 <__lshift+0x198>
    {
      k1 = 32 - k;
 200c7fc:	00c00804 	movi	r3,32
 200c800:	e0bfff17 	ldw	r2,-4(fp)
 200c804:	1885c83a 	sub	r2,r3,r2
 200c808:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 200c80c:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 200c810:	e0bff817 	ldw	r2,-32(fp)
 200c814:	10c00104 	addi	r3,r2,4
 200c818:	e0fff815 	stw	r3,-32(fp)
 200c81c:	e0fff717 	ldw	r3,-36(fp)
 200c820:	19000017 	ldw	r4,0(r3)
 200c824:	e0ffff17 	ldw	r3,-4(fp)
 200c828:	20c8983a 	sll	r4,r4,r3
 200c82c:	e0fff917 	ldw	r3,-28(fp)
 200c830:	20c6b03a 	or	r3,r4,r3
 200c834:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 200c838:	e0bff717 	ldw	r2,-36(fp)
 200c83c:	10c00104 	addi	r3,r2,4
 200c840:	e0fff715 	stw	r3,-36(fp)
 200c844:	10c00017 	ldw	r3,0(r2)
 200c848:	e0bff517 	ldw	r2,-44(fp)
 200c84c:	1884d83a 	srl	r2,r3,r2
 200c850:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 200c854:	e0fff717 	ldw	r3,-36(fp)
 200c858:	e0bffc17 	ldw	r2,-16(fp)
 200c85c:	18bfec36 	bltu	r3,r2,200c810 <__lshift+0x120>
      if ((*x1 = z) != 0)
 200c860:	e0bff817 	ldw	r2,-32(fp)
 200c864:	e0fff917 	ldw	r3,-28(fp)
 200c868:	10c00015 	stw	r3,0(r2)
 200c86c:	e0bff817 	ldw	r2,-32(fp)
 200c870:	10800017 	ldw	r2,0(r2)
 200c874:	10000f26 	beq	r2,zero,200c8b4 <__lshift+0x1c4>
	++n1;
 200c878:	e0bff617 	ldw	r2,-40(fp)
 200c87c:	10800044 	addi	r2,r2,1
 200c880:	e0bff615 	stw	r2,-40(fp)
 200c884:	00000b06 	br	200c8b4 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 200c888:	e0bff817 	ldw	r2,-32(fp)
 200c88c:	10c00104 	addi	r3,r2,4
 200c890:	e0fff815 	stw	r3,-32(fp)
 200c894:	e0fff717 	ldw	r3,-36(fp)
 200c898:	19000104 	addi	r4,r3,4
 200c89c:	e13ff715 	stw	r4,-36(fp)
 200c8a0:	18c00017 	ldw	r3,0(r3)
 200c8a4:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 200c8a8:	e0fff717 	ldw	r3,-36(fp)
 200c8ac:	e0bffc17 	ldw	r2,-16(fp)
 200c8b0:	18bff536 	bltu	r3,r2,200c888 <__lshift+0x198>
  b1->_wds = n1 - 1;
 200c8b4:	e0bff617 	ldw	r2,-40(fp)
 200c8b8:	10ffffc4 	addi	r3,r2,-1
 200c8bc:	e0bffb17 	ldw	r2,-20(fp)
 200c8c0:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 200c8c4:	e17ffe17 	ldw	r5,-8(fp)
 200c8c8:	e13ffd17 	ldw	r4,-12(fp)
 200c8cc:	200bc380 	call	200bc38 <_Bfree>
  return b1;
 200c8d0:	e0bffb17 	ldw	r2,-20(fp)
}
 200c8d4:	e037883a 	mov	sp,fp
 200c8d8:	dfc00117 	ldw	ra,4(sp)
 200c8dc:	df000017 	ldw	fp,0(sp)
 200c8e0:	dec00204 	addi	sp,sp,8
 200c8e4:	f800283a 	ret

0200c8e8 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 200c8e8:	defff704 	addi	sp,sp,-36
 200c8ec:	df000815 	stw	fp,32(sp)
 200c8f0:	df000804 	addi	fp,sp,32
 200c8f4:	e13ffe15 	stw	r4,-8(fp)
 200c8f8:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 200c8fc:	e0bffe17 	ldw	r2,-8(fp)
 200c900:	10800417 	ldw	r2,16(r2)
 200c904:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 200c908:	e0bfff17 	ldw	r2,-4(fp)
 200c90c:	10800417 	ldw	r2,16(r2)
 200c910:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 200c914:	e0fffa17 	ldw	r3,-24(fp)
 200c918:	e0bffb17 	ldw	r2,-20(fp)
 200c91c:	1885c83a 	sub	r2,r3,r2
 200c920:	e0bffa15 	stw	r2,-24(fp)
 200c924:	e0bffa17 	ldw	r2,-24(fp)
 200c928:	10000226 	beq	r2,zero,200c934 <__mcmp+0x4c>
    return i;
 200c92c:	e0bffa17 	ldw	r2,-24(fp)
 200c930:	00002e06 	br	200c9ec <__mcmp+0x104>
  xa0 = a->_x;
 200c934:	e0bffe17 	ldw	r2,-8(fp)
 200c938:	10800504 	addi	r2,r2,20
 200c93c:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 200c940:	e0bffb17 	ldw	r2,-20(fp)
 200c944:	1085883a 	add	r2,r2,r2
 200c948:	1085883a 	add	r2,r2,r2
 200c94c:	1007883a 	mov	r3,r2
 200c950:	e0bffc17 	ldw	r2,-16(fp)
 200c954:	10c5883a 	add	r2,r2,r3
 200c958:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 200c95c:	e0bfff17 	ldw	r2,-4(fp)
 200c960:	10800504 	addi	r2,r2,20
 200c964:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 200c968:	e0bffb17 	ldw	r2,-20(fp)
 200c96c:	1085883a 	add	r2,r2,r2
 200c970:	1085883a 	add	r2,r2,r2
 200c974:	1007883a 	mov	r3,r2
 200c978:	e0bffd17 	ldw	r2,-12(fp)
 200c97c:	10c5883a 	add	r2,r2,r3
 200c980:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 200c984:	e0bff817 	ldw	r2,-32(fp)
 200c988:	10bfff04 	addi	r2,r2,-4
 200c98c:	e0bff815 	stw	r2,-32(fp)
 200c990:	e0bff817 	ldw	r2,-32(fp)
 200c994:	10c00017 	ldw	r3,0(r2)
 200c998:	e0bff917 	ldw	r2,-28(fp)
 200c99c:	10bfff04 	addi	r2,r2,-4
 200c9a0:	e0bff915 	stw	r2,-28(fp)
 200c9a4:	e0bff917 	ldw	r2,-28(fp)
 200c9a8:	10800017 	ldw	r2,0(r2)
 200c9ac:	18800926 	beq	r3,r2,200c9d4 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 200c9b0:	e0bff817 	ldw	r2,-32(fp)
 200c9b4:	10c00017 	ldw	r3,0(r2)
 200c9b8:	e0bff917 	ldw	r2,-28(fp)
 200c9bc:	10800017 	ldw	r2,0(r2)
 200c9c0:	1880022e 	bgeu	r3,r2,200c9cc <__mcmp+0xe4>
 200c9c4:	00bfffc4 	movi	r2,-1
 200c9c8:	00000806 	br	200c9ec <__mcmp+0x104>
 200c9cc:	00800044 	movi	r2,1
 200c9d0:	00000606 	br	200c9ec <__mcmp+0x104>
      if (xa <= xa0)
 200c9d4:	e0bff817 	ldw	r2,-32(fp)
 200c9d8:	e0fffc17 	ldw	r3,-16(fp)
 200c9dc:	1880012e 	bgeu	r3,r2,200c9e4 <__mcmp+0xfc>
	break;
    }
 200c9e0:	003fe806 	br	200c984 <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 200c9e4:	0001883a 	nop
    }
  return 0;
 200c9e8:	0005883a 	mov	r2,zero
}
 200c9ec:	e037883a 	mov	sp,fp
 200c9f0:	df000017 	ldw	fp,0(sp)
 200c9f4:	dec00104 	addi	sp,sp,4
 200c9f8:	f800283a 	ret

0200c9fc <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 200c9fc:	deffef04 	addi	sp,sp,-68
 200ca00:	dfc01015 	stw	ra,64(sp)
 200ca04:	df000f15 	stw	fp,60(sp)
 200ca08:	df000f04 	addi	fp,sp,60
 200ca0c:	e13ffd15 	stw	r4,-12(fp)
 200ca10:	e17ffe15 	stw	r5,-8(fp)
 200ca14:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 200ca18:	e17fff17 	ldw	r5,-4(fp)
 200ca1c:	e13ffe17 	ldw	r4,-8(fp)
 200ca20:	200c8e80 	call	200c8e8 <__mcmp>
 200ca24:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 200ca28:	e0bff117 	ldw	r2,-60(fp)
 200ca2c:	10000b1e 	bne	r2,zero,200ca5c <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 200ca30:	000b883a 	mov	r5,zero
 200ca34:	e13ffd17 	ldw	r4,-12(fp)
 200ca38:	200bb080 	call	200bb08 <_Balloc>
 200ca3c:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 200ca40:	e0bff717 	ldw	r2,-36(fp)
 200ca44:	00c00044 	movi	r3,1
 200ca48:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 200ca4c:	e0bff717 	ldw	r2,-36(fp)
 200ca50:	10000515 	stw	zero,20(r2)
      return c;
 200ca54:	e0bff717 	ldw	r2,-36(fp)
 200ca58:	00008c06 	br	200cc8c <__mdiff+0x290>
    }
  if (i < 0)
 200ca5c:	e0bff117 	ldw	r2,-60(fp)
 200ca60:	1000090e 	bge	r2,zero,200ca88 <__mdiff+0x8c>
    {
      c = a;
 200ca64:	e0bffe17 	ldw	r2,-8(fp)
 200ca68:	e0bff715 	stw	r2,-36(fp)
      a = b;
 200ca6c:	e0bfff17 	ldw	r2,-4(fp)
 200ca70:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200ca74:	e0bff717 	ldw	r2,-36(fp)
 200ca78:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 200ca7c:	00800044 	movi	r2,1
 200ca80:	e0bff115 	stw	r2,-60(fp)
 200ca84:	00000106 	br	200ca8c <__mdiff+0x90>
    }
  else
    i = 0;
 200ca88:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 200ca8c:	e0bffe17 	ldw	r2,-8(fp)
 200ca90:	10800117 	ldw	r2,4(r2)
 200ca94:	100b883a 	mov	r5,r2
 200ca98:	e13ffd17 	ldw	r4,-12(fp)
 200ca9c:	200bb080 	call	200bb08 <_Balloc>
 200caa0:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 200caa4:	e0bff717 	ldw	r2,-36(fp)
 200caa8:	e0fff117 	ldw	r3,-60(fp)
 200caac:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 200cab0:	e0bffe17 	ldw	r2,-8(fp)
 200cab4:	10800417 	ldw	r2,16(r2)
 200cab8:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 200cabc:	e0bffe17 	ldw	r2,-8(fp)
 200cac0:	10800504 	addi	r2,r2,20
 200cac4:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 200cac8:	e0bff217 	ldw	r2,-56(fp)
 200cacc:	1085883a 	add	r2,r2,r2
 200cad0:	1085883a 	add	r2,r2,r2
 200cad4:	1007883a 	mov	r3,r2
 200cad8:	e0bff417 	ldw	r2,-48(fp)
 200cadc:	10c5883a 	add	r2,r2,r3
 200cae0:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 200cae4:	e0bfff17 	ldw	r2,-4(fp)
 200cae8:	10800417 	ldw	r2,16(r2)
 200caec:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200caf0:	e0bfff17 	ldw	r2,-4(fp)
 200caf4:	10800504 	addi	r2,r2,20
 200caf8:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 200cafc:	e0bff917 	ldw	r2,-28(fp)
 200cb00:	1085883a 	add	r2,r2,r2
 200cb04:	1085883a 	add	r2,r2,r2
 200cb08:	1007883a 	mov	r3,r2
 200cb0c:	e0bff517 	ldw	r2,-44(fp)
 200cb10:	10c5883a 	add	r2,r2,r3
 200cb14:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 200cb18:	e0bff717 	ldw	r2,-36(fp)
 200cb1c:	10800504 	addi	r2,r2,20
 200cb20:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 200cb24:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 200cb28:	e0bff417 	ldw	r2,-48(fp)
 200cb2c:	10800017 	ldw	r2,0(r2)
 200cb30:	10ffffcc 	andi	r3,r2,65535
 200cb34:	e0bff517 	ldw	r2,-44(fp)
 200cb38:	10800017 	ldw	r2,0(r2)
 200cb3c:	10bfffcc 	andi	r2,r2,65535
 200cb40:	1887c83a 	sub	r3,r3,r2
 200cb44:	e0bff317 	ldw	r2,-52(fp)
 200cb48:	1885883a 	add	r2,r3,r2
 200cb4c:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200cb50:	e0bffb17 	ldw	r2,-20(fp)
 200cb54:	1005d43a 	srai	r2,r2,16
 200cb58:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 200cb5c:	e0bff417 	ldw	r2,-48(fp)
 200cb60:	10c00104 	addi	r3,r2,4
 200cb64:	e0fff415 	stw	r3,-48(fp)
 200cb68:	10800017 	ldw	r2,0(r2)
 200cb6c:	1006d43a 	srli	r3,r2,16
 200cb70:	e0bff517 	ldw	r2,-44(fp)
 200cb74:	11000104 	addi	r4,r2,4
 200cb78:	e13ff515 	stw	r4,-44(fp)
 200cb7c:	10800017 	ldw	r2,0(r2)
 200cb80:	1004d43a 	srli	r2,r2,16
 200cb84:	1887c83a 	sub	r3,r3,r2
 200cb88:	e0bff317 	ldw	r2,-52(fp)
 200cb8c:	1885883a 	add	r2,r3,r2
 200cb90:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 200cb94:	e0bffc17 	ldw	r2,-16(fp)
 200cb98:	1005d43a 	srai	r2,r2,16
 200cb9c:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200cba0:	e0bff617 	ldw	r2,-40(fp)
 200cba4:	10c00104 	addi	r3,r2,4
 200cba8:	e0fff615 	stw	r3,-40(fp)
 200cbac:	e0fffc17 	ldw	r3,-16(fp)
 200cbb0:	1808943a 	slli	r4,r3,16
 200cbb4:	e0fffb17 	ldw	r3,-20(fp)
 200cbb8:	18ffffcc 	andi	r3,r3,65535
 200cbbc:	20c6b03a 	or	r3,r4,r3
 200cbc0:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 200cbc4:	e0fff517 	ldw	r3,-44(fp)
 200cbc8:	e0bffa17 	ldw	r2,-24(fp)
 200cbcc:	18bfd636 	bltu	r3,r2,200cb28 <__mdiff+0x12c>
  while (xa < xae)
 200cbd0:	00001d06 	br	200cc48 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 200cbd4:	e0bff417 	ldw	r2,-48(fp)
 200cbd8:	10800017 	ldw	r2,0(r2)
 200cbdc:	10ffffcc 	andi	r3,r2,65535
 200cbe0:	e0bff317 	ldw	r2,-52(fp)
 200cbe4:	1885883a 	add	r2,r3,r2
 200cbe8:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200cbec:	e0bffb17 	ldw	r2,-20(fp)
 200cbf0:	1005d43a 	srai	r2,r2,16
 200cbf4:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 200cbf8:	e0bff417 	ldw	r2,-48(fp)
 200cbfc:	10c00104 	addi	r3,r2,4
 200cc00:	e0fff415 	stw	r3,-48(fp)
 200cc04:	10800017 	ldw	r2,0(r2)
 200cc08:	1006d43a 	srli	r3,r2,16
 200cc0c:	e0bff317 	ldw	r2,-52(fp)
 200cc10:	1885883a 	add	r2,r3,r2
 200cc14:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 200cc18:	e0bffc17 	ldw	r2,-16(fp)
 200cc1c:	1005d43a 	srai	r2,r2,16
 200cc20:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200cc24:	e0bff617 	ldw	r2,-40(fp)
 200cc28:	10c00104 	addi	r3,r2,4
 200cc2c:	e0fff615 	stw	r3,-40(fp)
 200cc30:	e0fffc17 	ldw	r3,-16(fp)
 200cc34:	1808943a 	slli	r4,r3,16
 200cc38:	e0fffb17 	ldw	r3,-20(fp)
 200cc3c:	18ffffcc 	andi	r3,r3,65535
 200cc40:	20c6b03a 	or	r3,r4,r3
 200cc44:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 200cc48:	e0fff417 	ldw	r3,-48(fp)
 200cc4c:	e0bff817 	ldw	r2,-32(fp)
 200cc50:	18bfe036 	bltu	r3,r2,200cbd4 <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 200cc54:	00000306 	br	200cc64 <__mdiff+0x268>
    wa--;
 200cc58:	e0bff217 	ldw	r2,-56(fp)
 200cc5c:	10bfffc4 	addi	r2,r2,-1
 200cc60:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 200cc64:	e0bff617 	ldw	r2,-40(fp)
 200cc68:	10bfff04 	addi	r2,r2,-4
 200cc6c:	e0bff615 	stw	r2,-40(fp)
 200cc70:	e0bff617 	ldw	r2,-40(fp)
 200cc74:	10800017 	ldw	r2,0(r2)
 200cc78:	103ff726 	beq	r2,zero,200cc58 <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 200cc7c:	e0bff717 	ldw	r2,-36(fp)
 200cc80:	e0fff217 	ldw	r3,-56(fp)
 200cc84:	10c00415 	stw	r3,16(r2)
  return c;
 200cc88:	e0bff717 	ldw	r2,-36(fp)
}
 200cc8c:	e037883a 	mov	sp,fp
 200cc90:	dfc00117 	ldw	ra,4(sp)
 200cc94:	df000017 	ldw	fp,0(sp)
 200cc98:	dec00204 	addi	sp,sp,8
 200cc9c:	f800283a 	ret

0200cca0 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 200cca0:	defff804 	addi	sp,sp,-32
 200cca4:	df000715 	stw	fp,28(sp)
 200cca8:	dc000615 	stw	r16,24(sp)
 200ccac:	df000704 	addi	fp,sp,28
 200ccb0:	e13ffd15 	stw	r4,-12(fp)
 200ccb4:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 200ccb8:	e0bffd17 	ldw	r2,-12(fp)
 200ccbc:	e0bff915 	stw	r2,-28(fp)
 200ccc0:	e0bffe17 	ldw	r2,-8(fp)
 200ccc4:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 200ccc8:	e0bffa17 	ldw	r2,-24(fp)
 200cccc:	10dffc2c 	andhi	r3,r2,32752
 200ccd0:	00bf3034 	movhi	r2,64704
 200ccd4:	1885883a 	add	r2,r3,r2
 200ccd8:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 200ccdc:	0400040e 	bge	zero,r16,200ccf0 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 200cce0:	8005883a 	mov	r2,r16
 200cce4:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 200cce8:	e03ffb15 	stw	zero,-20(fp)
 200ccec:	00001406 	br	200cd40 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 200ccf0:	0405c83a 	sub	r2,zero,r16
 200ccf4:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 200ccf8:	80800508 	cmpgei	r2,r16,20
 200ccfc:	1000051e 	bne	r2,zero,200cd14 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 200cd00:	00800234 	movhi	r2,8
 200cd04:	1405d83a 	sra	r2,r2,r16
 200cd08:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 200cd0c:	e03ffb15 	stw	zero,-20(fp)
 200cd10:	00000b06 	br	200cd40 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 200cd14:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 200cd18:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 200cd1c:	808007c8 	cmpgei	r2,r16,31
 200cd20:	1000051e 	bne	r2,zero,200cd38 <__ulp+0x98>
 200cd24:	008007c4 	movi	r2,31
 200cd28:	1405c83a 	sub	r2,r2,r16
 200cd2c:	00c00044 	movi	r3,1
 200cd30:	1884983a 	sll	r2,r3,r2
 200cd34:	00000106 	br	200cd3c <__ulp+0x9c>
 200cd38:	00800044 	movi	r2,1
 200cd3c:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 200cd40:	e0bffb17 	ldw	r2,-20(fp)
 200cd44:	e0fffc17 	ldw	r3,-16(fp)
 200cd48:	1009883a 	mov	r4,r2
 200cd4c:	180b883a 	mov	r5,r3
}
 200cd50:	2005883a 	mov	r2,r4
 200cd54:	2807883a 	mov	r3,r5
 200cd58:	e6ffff04 	addi	sp,fp,-4
 200cd5c:	df000117 	ldw	fp,4(sp)
 200cd60:	dc000017 	ldw	r16,0(sp)
 200cd64:	dec00204 	addi	sp,sp,8
 200cd68:	f800283a 	ret

0200cd6c <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 200cd6c:	defff404 	addi	sp,sp,-48
 200cd70:	dfc00b15 	stw	ra,44(sp)
 200cd74:	df000a15 	stw	fp,40(sp)
 200cd78:	df000a04 	addi	fp,sp,40
 200cd7c:	e13ffe15 	stw	r4,-8(fp)
 200cd80:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 200cd84:	e0bffe17 	ldw	r2,-8(fp)
 200cd88:	10800504 	addi	r2,r2,20
 200cd8c:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 200cd90:	e0bffe17 	ldw	r2,-8(fp)
 200cd94:	10800417 	ldw	r2,16(r2)
 200cd98:	1085883a 	add	r2,r2,r2
 200cd9c:	1085883a 	add	r2,r2,r2
 200cda0:	1007883a 	mov	r3,r2
 200cda4:	e0bff717 	ldw	r2,-36(fp)
 200cda8:	10c5883a 	add	r2,r2,r3
 200cdac:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 200cdb0:	e0bff617 	ldw	r2,-40(fp)
 200cdb4:	10bfff04 	addi	r2,r2,-4
 200cdb8:	e0bff615 	stw	r2,-40(fp)
 200cdbc:	e0bff617 	ldw	r2,-40(fp)
 200cdc0:	10800017 	ldw	r2,0(r2)
 200cdc4:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 200cdc8:	e13ff817 	ldw	r4,-32(fp)
 200cdcc:	200bfd40 	call	200bfd4 <__hi0bits>
 200cdd0:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 200cdd4:	00c00804 	movi	r3,32
 200cdd8:	e0bff917 	ldw	r2,-28(fp)
 200cddc:	1887c83a 	sub	r3,r3,r2
 200cde0:	e0bfff17 	ldw	r2,-4(fp)
 200cde4:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 200cde8:	e0bff917 	ldw	r2,-28(fp)
 200cdec:	108002c8 	cmpgei	r2,r2,11
 200cdf0:	10001e1e 	bne	r2,zero,200ce6c <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 200cdf4:	00c002c4 	movi	r3,11
 200cdf8:	e0bff917 	ldw	r2,-28(fp)
 200cdfc:	1885c83a 	sub	r2,r3,r2
 200ce00:	e0fff817 	ldw	r3,-32(fp)
 200ce04:	1884d83a 	srl	r2,r3,r2
 200ce08:	108ffc34 	orhi	r2,r2,16368
 200ce0c:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 200ce10:	e0bff617 	ldw	r2,-40(fp)
 200ce14:	e0fff717 	ldw	r3,-36(fp)
 200ce18:	1880062e 	bgeu	r3,r2,200ce34 <__b2d+0xc8>
 200ce1c:	e0bff617 	ldw	r2,-40(fp)
 200ce20:	10bfff04 	addi	r2,r2,-4
 200ce24:	e0bff615 	stw	r2,-40(fp)
 200ce28:	e0bff617 	ldw	r2,-40(fp)
 200ce2c:	10800017 	ldw	r2,0(r2)
 200ce30:	00000106 	br	200ce38 <__b2d+0xcc>
 200ce34:	0005883a 	mov	r2,zero
 200ce38:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 200ce3c:	e0bff917 	ldw	r2,-28(fp)
 200ce40:	10800544 	addi	r2,r2,21
 200ce44:	e0fff817 	ldw	r3,-32(fp)
 200ce48:	1886983a 	sll	r3,r3,r2
 200ce4c:	010002c4 	movi	r4,11
 200ce50:	e0bff917 	ldw	r2,-28(fp)
 200ce54:	2085c83a 	sub	r2,r4,r2
 200ce58:	e13ffa17 	ldw	r4,-24(fp)
 200ce5c:	2084d83a 	srl	r2,r4,r2
 200ce60:	1884b03a 	or	r2,r3,r2
 200ce64:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 200ce68:	00003606 	br	200cf44 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 200ce6c:	e0bff617 	ldw	r2,-40(fp)
 200ce70:	e0fff717 	ldw	r3,-36(fp)
 200ce74:	1880062e 	bgeu	r3,r2,200ce90 <__b2d+0x124>
 200ce78:	e0bff617 	ldw	r2,-40(fp)
 200ce7c:	10bfff04 	addi	r2,r2,-4
 200ce80:	e0bff615 	stw	r2,-40(fp)
 200ce84:	e0bff617 	ldw	r2,-40(fp)
 200ce88:	10800017 	ldw	r2,0(r2)
 200ce8c:	00000106 	br	200ce94 <__b2d+0x128>
 200ce90:	0005883a 	mov	r2,zero
 200ce94:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 200ce98:	e0bff917 	ldw	r2,-28(fp)
 200ce9c:	10bffd44 	addi	r2,r2,-11
 200cea0:	e0bff915 	stw	r2,-28(fp)
 200cea4:	e0bff917 	ldw	r2,-28(fp)
 200cea8:	10002126 	beq	r2,zero,200cf30 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 200ceac:	e0fff817 	ldw	r3,-32(fp)
 200ceb0:	e0bff917 	ldw	r2,-28(fp)
 200ceb4:	1886983a 	sll	r3,r3,r2
 200ceb8:	01000804 	movi	r4,32
 200cebc:	e0bff917 	ldw	r2,-28(fp)
 200cec0:	2085c83a 	sub	r2,r4,r2
 200cec4:	e13ffb17 	ldw	r4,-20(fp)
 200cec8:	2084d83a 	srl	r2,r4,r2
 200cecc:	1884b03a 	or	r2,r3,r2
 200ced0:	108ffc34 	orhi	r2,r2,16368
 200ced4:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 200ced8:	e0bff617 	ldw	r2,-40(fp)
 200cedc:	e0fff717 	ldw	r3,-36(fp)
 200cee0:	1880062e 	bgeu	r3,r2,200cefc <__b2d+0x190>
 200cee4:	e0bff617 	ldw	r2,-40(fp)
 200cee8:	10bfff04 	addi	r2,r2,-4
 200ceec:	e0bff615 	stw	r2,-40(fp)
 200cef0:	e0bff617 	ldw	r2,-40(fp)
 200cef4:	10800017 	ldw	r2,0(r2)
 200cef8:	00000106 	br	200cf00 <__b2d+0x194>
 200cefc:	0005883a 	mov	r2,zero
 200cf00:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 200cf04:	e0fffb17 	ldw	r3,-20(fp)
 200cf08:	e0bff917 	ldw	r2,-28(fp)
 200cf0c:	1886983a 	sll	r3,r3,r2
 200cf10:	01000804 	movi	r4,32
 200cf14:	e0bff917 	ldw	r2,-28(fp)
 200cf18:	2085c83a 	sub	r2,r4,r2
 200cf1c:	e13ff817 	ldw	r4,-32(fp)
 200cf20:	2084d83a 	srl	r2,r4,r2
 200cf24:	1884b03a 	or	r2,r3,r2
 200cf28:	e0bffc15 	stw	r2,-16(fp)
 200cf2c:	00000506 	br	200cf44 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 200cf30:	e0bff817 	ldw	r2,-32(fp)
 200cf34:	108ffc34 	orhi	r2,r2,16368
 200cf38:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 200cf3c:	e0bffb17 	ldw	r2,-20(fp)
 200cf40:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 200cf44:	e0bffc17 	ldw	r2,-16(fp)
 200cf48:	e0fffd17 	ldw	r3,-12(fp)
 200cf4c:	1009883a 	mov	r4,r2
 200cf50:	180b883a 	mov	r5,r3
}
 200cf54:	2005883a 	mov	r2,r4
 200cf58:	2807883a 	mov	r3,r5
 200cf5c:	e037883a 	mov	sp,fp
 200cf60:	dfc00117 	ldw	ra,4(sp)
 200cf64:	df000017 	ldw	fp,0(sp)
 200cf68:	dec00204 	addi	sp,sp,8
 200cf6c:	f800283a 	ret

0200cf70 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 200cf70:	defff004 	addi	sp,sp,-64
 200cf74:	dfc00f15 	stw	ra,60(sp)
 200cf78:	df000e15 	stw	fp,56(sp)
 200cf7c:	dc000d15 	stw	r16,52(sp)
 200cf80:	df000e04 	addi	fp,sp,56
 200cf84:	e13ffb15 	stw	r4,-20(fp)
 200cf88:	e17ffc15 	stw	r5,-16(fp)
 200cf8c:	e1bffd15 	stw	r6,-12(fp)
 200cf90:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 200cf94:	e0bffc17 	ldw	r2,-16(fp)
 200cf98:	e0bff715 	stw	r2,-36(fp)
 200cf9c:	e0bffd17 	ldw	r2,-12(fp)
 200cfa0:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 200cfa4:	e0bffc17 	ldw	r2,-16(fp)
 200cfa8:	e0bff715 	stw	r2,-36(fp)
 200cfac:	e0bffd17 	ldw	r2,-12(fp)
 200cfb0:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 200cfb4:	01400044 	movi	r5,1
 200cfb8:	e13ffb17 	ldw	r4,-20(fp)
 200cfbc:	200bb080 	call	200bb08 <_Balloc>
 200cfc0:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 200cfc4:	e0bff417 	ldw	r2,-48(fp)
 200cfc8:	10800504 	addi	r2,r2,20
 200cfcc:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 200cfd0:	e0fff817 	ldw	r3,-32(fp)
 200cfd4:	00800434 	movhi	r2,16
 200cfd8:	10bfffc4 	addi	r2,r2,-1
 200cfdc:	1884703a 	and	r2,r3,r2
 200cfe0:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 200cfe4:	e0fff817 	ldw	r3,-32(fp)
 200cfe8:	00a00034 	movhi	r2,32768
 200cfec:	10bfffc4 	addi	r2,r2,-1
 200cff0:	1884703a 	and	r2,r3,r2
 200cff4:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 200cff8:	e0bff817 	ldw	r2,-32(fp)
 200cffc:	1004d53a 	srli	r2,r2,20
 200d000:	e0bff615 	stw	r2,-40(fp)
 200d004:	e0bff617 	ldw	r2,-40(fp)
 200d008:	10000326 	beq	r2,zero,200d018 <__d2b+0xa8>
    z |= Exp_msk1;
 200d00c:	e0bffa17 	ldw	r2,-24(fp)
 200d010:	10800434 	orhi	r2,r2,16
 200d014:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 200d018:	e0bff717 	ldw	r2,-36(fp)
 200d01c:	10002826 	beq	r2,zero,200d0c0 <__d2b+0x150>
    {
      y = d1;
 200d020:	e0bff717 	ldw	r2,-36(fp)
 200d024:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 200d028:	e0bff904 	addi	r2,fp,-28
 200d02c:	1009883a 	mov	r4,r2
 200d030:	200c0640 	call	200c064 <__lo0bits>
 200d034:	e0bff315 	stw	r2,-52(fp)
      if (k)
 200d038:	e0bff317 	ldw	r2,-52(fp)
 200d03c:	10000e26 	beq	r2,zero,200d078 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 200d040:	e0fffa17 	ldw	r3,-24(fp)
 200d044:	01000804 	movi	r4,32
 200d048:	e0bff317 	ldw	r2,-52(fp)
 200d04c:	2085c83a 	sub	r2,r4,r2
 200d050:	1886983a 	sll	r3,r3,r2
 200d054:	e0bff917 	ldw	r2,-28(fp)
 200d058:	1886b03a 	or	r3,r3,r2
 200d05c:	e0bff517 	ldw	r2,-44(fp)
 200d060:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 200d064:	e0fffa17 	ldw	r3,-24(fp)
 200d068:	e0bff317 	ldw	r2,-52(fp)
 200d06c:	1884d83a 	srl	r2,r3,r2
 200d070:	e0bffa15 	stw	r2,-24(fp)
 200d074:	00000306 	br	200d084 <__d2b+0x114>
	}
      else
	x[0] = y;
 200d078:	e0fff917 	ldw	r3,-28(fp)
 200d07c:	e0bff517 	ldw	r2,-44(fp)
 200d080:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 200d084:	e0bff517 	ldw	r2,-44(fp)
 200d088:	10800104 	addi	r2,r2,4
 200d08c:	e0fffa17 	ldw	r3,-24(fp)
 200d090:	10c00015 	stw	r3,0(r2)
 200d094:	10800017 	ldw	r2,0(r2)
 200d098:	10000226 	beq	r2,zero,200d0a4 <__d2b+0x134>
 200d09c:	00800084 	movi	r2,2
 200d0a0:	00000106 	br	200d0a8 <__d2b+0x138>
 200d0a4:	00800044 	movi	r2,1
 200d0a8:	e0fff417 	ldw	r3,-48(fp)
 200d0ac:	18800415 	stw	r2,16(r3)
 200d0b0:	e0bff417 	ldw	r2,-48(fp)
 200d0b4:	10800417 	ldw	r2,16(r2)
 200d0b8:	e0bff215 	stw	r2,-56(fp)
 200d0bc:	00001006 	br	200d100 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 200d0c0:	e0bffa04 	addi	r2,fp,-24
 200d0c4:	1009883a 	mov	r4,r2
 200d0c8:	200c0640 	call	200c064 <__lo0bits>
 200d0cc:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 200d0d0:	e0fffa17 	ldw	r3,-24(fp)
 200d0d4:	e0bff517 	ldw	r2,-44(fp)
 200d0d8:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 200d0dc:	e0bff417 	ldw	r2,-48(fp)
 200d0e0:	00c00044 	movi	r3,1
 200d0e4:	10c00415 	stw	r3,16(r2)
 200d0e8:	e0bff417 	ldw	r2,-48(fp)
 200d0ec:	10800417 	ldw	r2,16(r2)
 200d0f0:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 200d0f4:	e0bff317 	ldw	r2,-52(fp)
 200d0f8:	10800804 	addi	r2,r2,32
 200d0fc:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 200d100:	e0bff617 	ldw	r2,-40(fp)
 200d104:	10000c26 	beq	r2,zero,200d138 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 200d108:	e0bff617 	ldw	r2,-40(fp)
 200d10c:	10fef344 	addi	r3,r2,-1075
 200d110:	e0bff317 	ldw	r2,-52(fp)
 200d114:	1887883a 	add	r3,r3,r2
 200d118:	e0bffe17 	ldw	r2,-8(fp)
 200d11c:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 200d120:	00c00d44 	movi	r3,53
 200d124:	e0bff317 	ldw	r2,-52(fp)
 200d128:	1887c83a 	sub	r3,r3,r2
 200d12c:	e0800217 	ldw	r2,8(fp)
 200d130:	10c00015 	stw	r3,0(r2)
 200d134:	00001706 	br	200d194 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 200d138:	e0bff617 	ldw	r2,-40(fp)
 200d13c:	10fef384 	addi	r3,r2,-1074
 200d140:	e0bff317 	ldw	r2,-52(fp)
 200d144:	1887883a 	add	r3,r3,r2
 200d148:	e0bffe17 	ldw	r2,-8(fp)
 200d14c:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 200d150:	e0bff217 	ldw	r2,-56(fp)
 200d154:	1020917a 	slli	r16,r2,5
 200d158:	e0fff217 	ldw	r3,-56(fp)
 200d15c:	00900034 	movhi	r2,16384
 200d160:	10bfffc4 	addi	r2,r2,-1
 200d164:	1885883a 	add	r2,r3,r2
 200d168:	1085883a 	add	r2,r2,r2
 200d16c:	1085883a 	add	r2,r2,r2
 200d170:	1007883a 	mov	r3,r2
 200d174:	e0bff517 	ldw	r2,-44(fp)
 200d178:	10c5883a 	add	r2,r2,r3
 200d17c:	10800017 	ldw	r2,0(r2)
 200d180:	1009883a 	mov	r4,r2
 200d184:	200bfd40 	call	200bfd4 <__hi0bits>
 200d188:	8087c83a 	sub	r3,r16,r2
 200d18c:	e0800217 	ldw	r2,8(fp)
 200d190:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 200d194:	e0bff417 	ldw	r2,-48(fp)
}
 200d198:	e6ffff04 	addi	sp,fp,-4
 200d19c:	dfc00217 	ldw	ra,8(sp)
 200d1a0:	df000117 	ldw	fp,4(sp)
 200d1a4:	dc000017 	ldw	r16,0(sp)
 200d1a8:	dec00304 	addi	sp,sp,12
 200d1ac:	f800283a 	ret

0200d1b0 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 200d1b0:	defff504 	addi	sp,sp,-44
 200d1b4:	dfc00a15 	stw	ra,40(sp)
 200d1b8:	df000915 	stw	fp,36(sp)
 200d1bc:	df000904 	addi	fp,sp,36
 200d1c0:	e13ffe15 	stw	r4,-8(fp)
 200d1c4:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 200d1c8:	e0bffc04 	addi	r2,fp,-16
 200d1cc:	100b883a 	mov	r5,r2
 200d1d0:	e13ffe17 	ldw	r4,-8(fp)
 200d1d4:	200cd6c0 	call	200cd6c <__b2d>
 200d1d8:	1009883a 	mov	r4,r2
 200d1dc:	180b883a 	mov	r5,r3
 200d1e0:	e13ff815 	stw	r4,-32(fp)
 200d1e4:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 200d1e8:	e0bffd04 	addi	r2,fp,-12
 200d1ec:	100b883a 	mov	r5,r2
 200d1f0:	e13fff17 	ldw	r4,-4(fp)
 200d1f4:	200cd6c0 	call	200cd6c <__b2d>
 200d1f8:	1009883a 	mov	r4,r2
 200d1fc:	180b883a 	mov	r5,r3
 200d200:	e13ffa15 	stw	r4,-24(fp)
 200d204:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 200d208:	e0fffc17 	ldw	r3,-16(fp)
 200d20c:	e0bffd17 	ldw	r2,-12(fp)
 200d210:	1887c83a 	sub	r3,r3,r2
 200d214:	e0bffe17 	ldw	r2,-8(fp)
 200d218:	11000417 	ldw	r4,16(r2)
 200d21c:	e0bfff17 	ldw	r2,-4(fp)
 200d220:	10800417 	ldw	r2,16(r2)
 200d224:	2085c83a 	sub	r2,r4,r2
 200d228:	1004917a 	slli	r2,r2,5
 200d22c:	1885883a 	add	r2,r3,r2
 200d230:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 200d234:	e0bff717 	ldw	r2,-36(fp)
 200d238:	0080060e 	bge	zero,r2,200d254 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 200d23c:	e0fff917 	ldw	r3,-28(fp)
 200d240:	e0bff717 	ldw	r2,-36(fp)
 200d244:	1004953a 	slli	r2,r2,20
 200d248:	1885883a 	add	r2,r3,r2
 200d24c:	e0bff915 	stw	r2,-28(fp)
 200d250:	00000806 	br	200d274 <__ratio+0xc4>
  else
    {
      k = -k;
 200d254:	e0bff717 	ldw	r2,-36(fp)
 200d258:	0085c83a 	sub	r2,zero,r2
 200d25c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 200d260:	e0fffb17 	ldw	r3,-20(fp)
 200d264:	e0bff717 	ldw	r2,-36(fp)
 200d268:	1004953a 	slli	r2,r2,20
 200d26c:	1885883a 	add	r2,r3,r2
 200d270:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 200d274:	e0bff817 	ldw	r2,-32(fp)
 200d278:	e0fff917 	ldw	r3,-28(fp)
 200d27c:	e13ffa17 	ldw	r4,-24(fp)
 200d280:	e17ffb17 	ldw	r5,-20(fp)
 200d284:	200d883a 	mov	r6,r4
 200d288:	280f883a 	mov	r7,r5
 200d28c:	1009883a 	mov	r4,r2
 200d290:	180b883a 	mov	r5,r3
 200d294:	20020780 	call	2002078 <__divdf3>
 200d298:	100f883a 	mov	r7,r2
 200d29c:	1811883a 	mov	r8,r3
 200d2a0:	380b883a 	mov	r5,r7
 200d2a4:	400d883a 	mov	r6,r8
 200d2a8:	2807883a 	mov	r3,r5
 200d2ac:	3009883a 	mov	r4,r6
}
 200d2b0:	1805883a 	mov	r2,r3
 200d2b4:	2007883a 	mov	r3,r4
 200d2b8:	e037883a 	mov	sp,fp
 200d2bc:	dfc00117 	ldw	ra,4(sp)
 200d2c0:	df000017 	ldw	fp,0(sp)
 200d2c4:	dec00204 	addi	sp,sp,8
 200d2c8:	f800283a 	ret

0200d2cc <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 200d2cc:	defffb04 	addi	sp,sp,-20
 200d2d0:	dfc00415 	stw	ra,16(sp)
 200d2d4:	df000315 	stw	fp,12(sp)
 200d2d8:	df000304 	addi	fp,sp,12
 200d2dc:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 200d2e0:	e03ffd15 	stw	zero,-12(fp)
 200d2e4:	008ffc34 	movhi	r2,16368
 200d2e8:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 200d2ec:	e0bfff17 	ldw	r2,-4(fp)
 200d2f0:	10800608 	cmpgei	r2,r2,24
 200d2f4:	1000141e 	bne	r2,zero,200d348 <_mprec_log10+0x7c>
    return tens[dig];
 200d2f8:	008080b4 	movhi	r2,514
 200d2fc:	10b27d04 	addi	r2,r2,-13836
 200d300:	e0ffff17 	ldw	r3,-4(fp)
 200d304:	180690fa 	slli	r3,r3,3
 200d308:	10c9883a 	add	r4,r2,r3
 200d30c:	20800017 	ldw	r2,0(r4)
 200d310:	20c00117 	ldw	r3,4(r4)
 200d314:	00001006 	br	200d358 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 200d318:	000d883a 	mov	r6,zero
 200d31c:	01d00934 	movhi	r7,16420
 200d320:	e13ffd17 	ldw	r4,-12(fp)
 200d324:	e17ffe17 	ldw	r5,-8(fp)
 200d328:	2002bb80 	call	2002bb8 <__muldf3>
 200d32c:	1009883a 	mov	r4,r2
 200d330:	180b883a 	mov	r5,r3
 200d334:	e13ffd15 	stw	r4,-12(fp)
 200d338:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 200d33c:	e0bfff17 	ldw	r2,-4(fp)
 200d340:	10bfffc4 	addi	r2,r2,-1
 200d344:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 200d348:	e0bfff17 	ldw	r2,-4(fp)
 200d34c:	00bff216 	blt	zero,r2,200d318 <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 200d350:	e0bffd17 	ldw	r2,-12(fp)
 200d354:	e0fffe17 	ldw	r3,-8(fp)
 200d358:	1009883a 	mov	r4,r2
 200d35c:	180b883a 	mov	r5,r3
}
 200d360:	2005883a 	mov	r2,r4
 200d364:	2807883a 	mov	r3,r5
 200d368:	e037883a 	mov	sp,fp
 200d36c:	dfc00117 	ldw	ra,4(sp)
 200d370:	df000017 	ldw	fp,0(sp)
 200d374:	dec00204 	addi	sp,sp,8
 200d378:	f800283a 	ret

0200d37c <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 200d37c:	defff904 	addi	sp,sp,-28
 200d380:	df000615 	stw	fp,24(sp)
 200d384:	df000604 	addi	fp,sp,24
 200d388:	e13ffd15 	stw	r4,-12(fp)
 200d38c:	e17ffe15 	stw	r5,-8(fp)
 200d390:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 200d394:	e0bffe17 	ldw	r2,-8(fp)
 200d398:	10bfffc4 	addi	r2,r2,-1
 200d39c:	1005d17a 	srai	r2,r2,5
 200d3a0:	10800044 	addi	r2,r2,1
 200d3a4:	1085883a 	add	r2,r2,r2
 200d3a8:	1085883a 	add	r2,r2,r2
 200d3ac:	1007883a 	mov	r3,r2
 200d3b0:	e0bffd17 	ldw	r2,-12(fp)
 200d3b4:	10c5883a 	add	r2,r2,r3
 200d3b8:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 200d3bc:	e0bfff17 	ldw	r2,-4(fp)
 200d3c0:	10800504 	addi	r2,r2,20
 200d3c4:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 200d3c8:	e0bfff17 	ldw	r2,-4(fp)
 200d3cc:	10800417 	ldw	r2,16(r2)
 200d3d0:	1085883a 	add	r2,r2,r2
 200d3d4:	1085883a 	add	r2,r2,r2
 200d3d8:	1007883a 	mov	r3,r2
 200d3dc:	e0bffa17 	ldw	r2,-24(fp)
 200d3e0:	10c5883a 	add	r2,r2,r3
 200d3e4:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 200d3e8:	00000806 	br	200d40c <__copybits+0x90>
		*c++ = *x++;
 200d3ec:	e0bffd17 	ldw	r2,-12(fp)
 200d3f0:	10c00104 	addi	r3,r2,4
 200d3f4:	e0fffd15 	stw	r3,-12(fp)
 200d3f8:	e0fffa17 	ldw	r3,-24(fp)
 200d3fc:	19000104 	addi	r4,r3,4
 200d400:	e13ffa15 	stw	r4,-24(fp)
 200d404:	18c00017 	ldw	r3,0(r3)
 200d408:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 200d40c:	e0fffa17 	ldw	r3,-24(fp)
 200d410:	e0bffc17 	ldw	r2,-16(fp)
 200d414:	18bff536 	bltu	r3,r2,200d3ec <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 200d418:	00000406 	br	200d42c <__copybits+0xb0>
		*c++ = 0;
 200d41c:	e0bffd17 	ldw	r2,-12(fp)
 200d420:	10c00104 	addi	r3,r2,4
 200d424:	e0fffd15 	stw	r3,-12(fp)
 200d428:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 200d42c:	e0fffd17 	ldw	r3,-12(fp)
 200d430:	e0bffb17 	ldw	r2,-20(fp)
 200d434:	18bff936 	bltu	r3,r2,200d41c <__copybits+0xa0>
		*c++ = 0;
}
 200d438:	0001883a 	nop
 200d43c:	e037883a 	mov	sp,fp
 200d440:	df000017 	ldw	fp,0(sp)
 200d444:	dec00104 	addi	sp,sp,4
 200d448:	f800283a 	ret

0200d44c <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 200d44c:	defff704 	addi	sp,sp,-36
 200d450:	df000815 	stw	fp,32(sp)
 200d454:	df000804 	addi	fp,sp,32
 200d458:	e13ffe15 	stw	r4,-8(fp)
 200d45c:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 200d460:	e0bffe17 	ldw	r2,-8(fp)
 200d464:	10800504 	addi	r2,r2,20
 200d468:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 200d46c:	e0bffe17 	ldw	r2,-8(fp)
 200d470:	10800417 	ldw	r2,16(r2)
 200d474:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 200d478:	e0bfff17 	ldw	r2,-4(fp)
 200d47c:	1005d17a 	srai	r2,r2,5
 200d480:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 200d484:	e0bff817 	ldw	r2,-32(fp)
 200d488:	e0fffa17 	ldw	r3,-24(fp)
 200d48c:	1880030e 	bge	r3,r2,200d49c <__any_on+0x50>
		n = nwds;
 200d490:	e0bffa17 	ldw	r2,-24(fp)
 200d494:	e0bff815 	stw	r2,-32(fp)
 200d498:	00001f06 	br	200d518 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 200d49c:	e0fff817 	ldw	r3,-32(fp)
 200d4a0:	e0bffa17 	ldw	r2,-24(fp)
 200d4a4:	18801c0e 	bge	r3,r2,200d518 <__any_on+0xcc>
 200d4a8:	e0bfff17 	ldw	r2,-4(fp)
 200d4ac:	108007cc 	andi	r2,r2,31
 200d4b0:	e0bfff15 	stw	r2,-4(fp)
 200d4b4:	e0bfff17 	ldw	r2,-4(fp)
 200d4b8:	10001726 	beq	r2,zero,200d518 <__any_on+0xcc>
		x1 = x2 = x[n];
 200d4bc:	e0bff817 	ldw	r2,-32(fp)
 200d4c0:	1085883a 	add	r2,r2,r2
 200d4c4:	1085883a 	add	r2,r2,r2
 200d4c8:	1007883a 	mov	r3,r2
 200d4cc:	e0bff917 	ldw	r2,-28(fp)
 200d4d0:	10c5883a 	add	r2,r2,r3
 200d4d4:	10800017 	ldw	r2,0(r2)
 200d4d8:	e0bffb15 	stw	r2,-20(fp)
 200d4dc:	e0bffb17 	ldw	r2,-20(fp)
 200d4e0:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 200d4e4:	e0fffc17 	ldw	r3,-16(fp)
 200d4e8:	e0bfff17 	ldw	r2,-4(fp)
 200d4ec:	1884d83a 	srl	r2,r3,r2
 200d4f0:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 200d4f4:	e0fffc17 	ldw	r3,-16(fp)
 200d4f8:	e0bfff17 	ldw	r2,-4(fp)
 200d4fc:	1884983a 	sll	r2,r3,r2
 200d500:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 200d504:	e0fffc17 	ldw	r3,-16(fp)
 200d508:	e0bffb17 	ldw	r2,-20(fp)
 200d50c:	18800226 	beq	r3,r2,200d518 <__any_on+0xcc>
			return 1;
 200d510:	00800044 	movi	r2,1
 200d514:	00001606 	br	200d570 <__any_on+0x124>
		}
	x0 = x;
 200d518:	e0bff917 	ldw	r2,-28(fp)
 200d51c:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 200d520:	e0bff817 	ldw	r2,-32(fp)
 200d524:	1085883a 	add	r2,r2,r2
 200d528:	1085883a 	add	r2,r2,r2
 200d52c:	1007883a 	mov	r3,r2
 200d530:	e0bff917 	ldw	r2,-28(fp)
 200d534:	10c5883a 	add	r2,r2,r3
 200d538:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 200d53c:	00000806 	br	200d560 <__any_on+0x114>
		if (*--x)
 200d540:	e0bff917 	ldw	r2,-28(fp)
 200d544:	10bfff04 	addi	r2,r2,-4
 200d548:	e0bff915 	stw	r2,-28(fp)
 200d54c:	e0bff917 	ldw	r2,-28(fp)
 200d550:	10800017 	ldw	r2,0(r2)
 200d554:	10000226 	beq	r2,zero,200d560 <__any_on+0x114>
			return 1;
 200d558:	00800044 	movi	r2,1
 200d55c:	00000406 	br	200d570 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 200d560:	e0bff917 	ldw	r2,-28(fp)
 200d564:	e0fffd17 	ldw	r3,-12(fp)
 200d568:	18bff536 	bltu	r3,r2,200d540 <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 200d56c:	0005883a 	mov	r2,zero
}
 200d570:	e037883a 	mov	sp,fp
 200d574:	df000017 	ldw	fp,0(sp)
 200d578:	dec00104 	addi	sp,sp,4
 200d57c:	f800283a 	ret

0200d580 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 200d580:	deffe104 	addi	sp,sp,-124
 200d584:	dfc01e15 	stw	ra,120(sp)
 200d588:	df001d15 	stw	fp,116(sp)
 200d58c:	df001d04 	addi	fp,sp,116
 200d590:	e13ffd15 	stw	r4,-12(fp)
 200d594:	e17ffe15 	stw	r5,-8(fp)
 200d598:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 200d59c:	e0bffe17 	ldw	r2,-8(fp)
 200d5a0:	1000041e 	bne	r2,zero,200d5b4 <_realloc_r+0x34>
 200d5a4:	e17fff17 	ldw	r5,-4(fp)
 200d5a8:	e13ffd17 	ldw	r4,-12(fp)
 200d5ac:	200a87c0 	call	200a87c <_malloc_r>
 200d5b0:	0002ea06 	br	200e15c <_realloc_r+0xbdc>

  MALLOC_LOCK;
 200d5b4:	e13ffd17 	ldw	r4,-12(fp)
 200d5b8:	2011cd00 	call	2011cd0 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 200d5bc:	e0bffe17 	ldw	r2,-8(fp)
 200d5c0:	10bffe04 	addi	r2,r2,-8
 200d5c4:	e0bfef15 	stw	r2,-68(fp)
 200d5c8:	e0bfef17 	ldw	r2,-68(fp)
 200d5cc:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 200d5d0:	e0bfef17 	ldw	r2,-68(fp)
 200d5d4:	10c00117 	ldw	r3,4(r2)
 200d5d8:	00bfff04 	movi	r2,-4
 200d5dc:	1884703a 	and	r2,r3,r2
 200d5e0:	e0bff015 	stw	r2,-64(fp)
 200d5e4:	e0bff017 	ldw	r2,-64(fp)
 200d5e8:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 200d5ec:	e0bfff17 	ldw	r2,-4(fp)
 200d5f0:	108002c4 	addi	r2,r2,11
 200d5f4:	108005f0 	cmpltui	r2,r2,23
 200d5f8:	1000051e 	bne	r2,zero,200d610 <_realloc_r+0x90>
 200d5fc:	e0bfff17 	ldw	r2,-4(fp)
 200d600:	10c002c4 	addi	r3,r2,11
 200d604:	00bffe04 	movi	r2,-8
 200d608:	1884703a 	and	r2,r3,r2
 200d60c:	00000106 	br	200d614 <_realloc_r+0x94>
 200d610:	00800404 	movi	r2,16
 200d614:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200d618:	e0bff117 	ldw	r2,-60(fp)
 200d61c:	10000316 	blt	r2,zero,200d62c <_realloc_r+0xac>
 200d620:	e0fff117 	ldw	r3,-60(fp)
 200d624:	e0bfff17 	ldw	r2,-4(fp)
 200d628:	1880052e 	bgeu	r3,r2,200d640 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 200d62c:	e0bffd17 	ldw	r2,-12(fp)
 200d630:	00c00304 	movi	r3,12
 200d634:	10c00015 	stw	r3,0(r2)
    return 0;
 200d638:	0005883a 	mov	r2,zero
 200d63c:	0002c706 	br	200e15c <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 200d640:	e0fff017 	ldw	r3,-64(fp)
 200d644:	e0bff117 	ldw	r2,-60(fp)
 200d648:	18828b0e 	bge	r3,r2,200e078 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 200d64c:	e0ffef17 	ldw	r3,-68(fp)
 200d650:	e0bff017 	ldw	r2,-64(fp)
 200d654:	1885883a 	add	r2,r3,r2
 200d658:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 200d65c:	008080b4 	movhi	r2,514
 200d660:	10b45c04 	addi	r2,r2,-11920
 200d664:	10c00217 	ldw	r3,8(r2)
 200d668:	e0bfe517 	ldw	r2,-108(fp)
 200d66c:	18800926 	beq	r3,r2,200d694 <_realloc_r+0x114>
 200d670:	e0bfe517 	ldw	r2,-108(fp)
 200d674:	10c00117 	ldw	r3,4(r2)
 200d678:	00bfff84 	movi	r2,-2
 200d67c:	1884703a 	and	r2,r3,r2
 200d680:	e0ffe517 	ldw	r3,-108(fp)
 200d684:	1885883a 	add	r2,r3,r2
 200d688:	10800117 	ldw	r2,4(r2)
 200d68c:	1080004c 	andi	r2,r2,1
 200d690:	1000461e 	bne	r2,zero,200d7ac <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 200d694:	e0bfe517 	ldw	r2,-108(fp)
 200d698:	10c00117 	ldw	r3,4(r2)
 200d69c:	00bfff04 	movi	r2,-4
 200d6a0:	1884703a 	and	r2,r3,r2
 200d6a4:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 200d6a8:	008080b4 	movhi	r2,514
 200d6ac:	10b45c04 	addi	r2,r2,-11920
 200d6b0:	10c00217 	ldw	r3,8(r2)
 200d6b4:	e0bfe517 	ldw	r2,-108(fp)
 200d6b8:	1880251e 	bne	r3,r2,200d750 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 200d6bc:	e0ffe617 	ldw	r3,-104(fp)
 200d6c0:	e0bfe417 	ldw	r2,-112(fp)
 200d6c4:	1885883a 	add	r2,r3,r2
 200d6c8:	1007883a 	mov	r3,r2
 200d6cc:	e0bff117 	ldw	r2,-60(fp)
 200d6d0:	10800404 	addi	r2,r2,16
 200d6d4:	18803816 	blt	r3,r2,200d7b8 <_realloc_r+0x238>
        {
          newsize += nextsize;
 200d6d8:	e0ffe417 	ldw	r3,-112(fp)
 200d6dc:	e0bfe617 	ldw	r2,-104(fp)
 200d6e0:	1885883a 	add	r2,r3,r2
 200d6e4:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 200d6e8:	008080b4 	movhi	r2,514
 200d6ec:	10b45c04 	addi	r2,r2,-11920
 200d6f0:	e13fef17 	ldw	r4,-68(fp)
 200d6f4:	e0fff117 	ldw	r3,-60(fp)
 200d6f8:	20c7883a 	add	r3,r4,r3
 200d6fc:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 200d700:	008080b4 	movhi	r2,514
 200d704:	10b45c04 	addi	r2,r2,-11920
 200d708:	10800217 	ldw	r2,8(r2)
 200d70c:	e13fe417 	ldw	r4,-112(fp)
 200d710:	e0fff117 	ldw	r3,-60(fp)
 200d714:	20c7c83a 	sub	r3,r4,r3
 200d718:	18c00054 	ori	r3,r3,1
 200d71c:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 200d720:	e0bfef17 	ldw	r2,-68(fp)
 200d724:	10800117 	ldw	r2,4(r2)
 200d728:	10c0004c 	andi	r3,r2,1
 200d72c:	e0bff117 	ldw	r2,-60(fp)
 200d730:	1886b03a 	or	r3,r3,r2
 200d734:	e0bfef17 	ldw	r2,-68(fp)
 200d738:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 200d73c:	e13ffd17 	ldw	r4,-12(fp)
 200d740:	2011df00 	call	2011df0 <__malloc_unlock>
          return chunk2mem(oldp);
 200d744:	e0bfef17 	ldw	r2,-68(fp)
 200d748:	10800204 	addi	r2,r2,8
 200d74c:	00028306 	br	200e15c <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 200d750:	e0ffe617 	ldw	r3,-104(fp)
 200d754:	e0bfe417 	ldw	r2,-112(fp)
 200d758:	1885883a 	add	r2,r3,r2
 200d75c:	1007883a 	mov	r3,r2
 200d760:	e0bff117 	ldw	r2,-60(fp)
 200d764:	18801416 	blt	r3,r2,200d7b8 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 200d768:	e0bfe517 	ldw	r2,-108(fp)
 200d76c:	10800317 	ldw	r2,12(r2)
 200d770:	e0bff215 	stw	r2,-56(fp)
 200d774:	e0bfe517 	ldw	r2,-108(fp)
 200d778:	10800217 	ldw	r2,8(r2)
 200d77c:	e0bff315 	stw	r2,-52(fp)
 200d780:	e0bff317 	ldw	r2,-52(fp)
 200d784:	e0fff217 	ldw	r3,-56(fp)
 200d788:	10c00315 	stw	r3,12(r2)
 200d78c:	e0bff217 	ldw	r2,-56(fp)
 200d790:	e0fff317 	ldw	r3,-52(fp)
 200d794:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 200d798:	e0ffe417 	ldw	r3,-112(fp)
 200d79c:	e0bfe617 	ldw	r2,-104(fp)
 200d7a0:	1885883a 	add	r2,r3,r2
 200d7a4:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 200d7a8:	00023306 	br	200e078 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 200d7ac:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 200d7b0:	e03fe615 	stw	zero,-104(fp)
 200d7b4:	00000106 	br	200d7bc <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 200d7b8:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 200d7bc:	e0bfef17 	ldw	r2,-68(fp)
 200d7c0:	10800117 	ldw	r2,4(r2)
 200d7c4:	1080004c 	andi	r2,r2,1
 200d7c8:	1001a91e 	bne	r2,zero,200de70 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 200d7cc:	e0bfef17 	ldw	r2,-68(fp)
 200d7d0:	10800017 	ldw	r2,0(r2)
 200d7d4:	0085c83a 	sub	r2,zero,r2
 200d7d8:	e0ffef17 	ldw	r3,-68(fp)
 200d7dc:	1885883a 	add	r2,r3,r2
 200d7e0:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 200d7e4:	e0bff417 	ldw	r2,-48(fp)
 200d7e8:	10c00117 	ldw	r3,4(r2)
 200d7ec:	00bfff04 	movi	r2,-4
 200d7f0:	1884703a 	and	r2,r3,r2
 200d7f4:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 200d7f8:	e0bfe517 	ldw	r2,-108(fp)
 200d7fc:	10012226 	beq	r2,zero,200dc88 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 200d800:	008080b4 	movhi	r2,514
 200d804:	10b45c04 	addi	r2,r2,-11920
 200d808:	10c00217 	ldw	r3,8(r2)
 200d80c:	e0bfe517 	ldw	r2,-108(fp)
 200d810:	1880951e 	bne	r3,r2,200da68 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 200d814:	e0ffe617 	ldw	r3,-104(fp)
 200d818:	e0bff517 	ldw	r2,-44(fp)
 200d81c:	1887883a 	add	r3,r3,r2
 200d820:	e0bfe417 	ldw	r2,-112(fp)
 200d824:	1885883a 	add	r2,r3,r2
 200d828:	1007883a 	mov	r3,r2
 200d82c:	e0bff117 	ldw	r2,-60(fp)
 200d830:	10800404 	addi	r2,r2,16
 200d834:	18811416 	blt	r3,r2,200dc88 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 200d838:	e0bff417 	ldw	r2,-48(fp)
 200d83c:	10800317 	ldw	r2,12(r2)
 200d840:	e0bff215 	stw	r2,-56(fp)
 200d844:	e0bff417 	ldw	r2,-48(fp)
 200d848:	10800217 	ldw	r2,8(r2)
 200d84c:	e0bff315 	stw	r2,-52(fp)
 200d850:	e0bff317 	ldw	r2,-52(fp)
 200d854:	e0fff217 	ldw	r3,-56(fp)
 200d858:	10c00315 	stw	r3,12(r2)
 200d85c:	e0bff217 	ldw	r2,-56(fp)
 200d860:	e0fff317 	ldw	r3,-52(fp)
 200d864:	10c00215 	stw	r3,8(r2)
            newp = prev;
 200d868:	e0bff417 	ldw	r2,-48(fp)
 200d86c:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 200d870:	e0fff517 	ldw	r3,-44(fp)
 200d874:	e0bfe617 	ldw	r2,-104(fp)
 200d878:	1885883a 	add	r2,r3,r2
 200d87c:	e0ffe417 	ldw	r3,-112(fp)
 200d880:	1885883a 	add	r2,r3,r2
 200d884:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 200d888:	e0bfe317 	ldw	r2,-116(fp)
 200d88c:	10800204 	addi	r2,r2,8
 200d890:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200d894:	e0bff017 	ldw	r2,-64(fp)
 200d898:	10bfff04 	addi	r2,r2,-4
 200d89c:	e0bff715 	stw	r2,-36(fp)
 200d8a0:	e0bff717 	ldw	r2,-36(fp)
 200d8a4:	10800968 	cmpgeui	r2,r2,37
 200d8a8:	1000521e 	bne	r2,zero,200d9f4 <_realloc_r+0x474>
 200d8ac:	e0bffe17 	ldw	r2,-8(fp)
 200d8b0:	e0bfe715 	stw	r2,-100(fp)
 200d8b4:	e0bff617 	ldw	r2,-40(fp)
 200d8b8:	e0bfe815 	stw	r2,-96(fp)
 200d8bc:	e0bff717 	ldw	r2,-36(fp)
 200d8c0:	10800530 	cmpltui	r2,r2,20
 200d8c4:	1000361e 	bne	r2,zero,200d9a0 <_realloc_r+0x420>
 200d8c8:	e0bfe817 	ldw	r2,-96(fp)
 200d8cc:	10c00104 	addi	r3,r2,4
 200d8d0:	e0ffe815 	stw	r3,-96(fp)
 200d8d4:	e0ffe717 	ldw	r3,-100(fp)
 200d8d8:	19000104 	addi	r4,r3,4
 200d8dc:	e13fe715 	stw	r4,-100(fp)
 200d8e0:	18c00017 	ldw	r3,0(r3)
 200d8e4:	10c00015 	stw	r3,0(r2)
 200d8e8:	e0bfe817 	ldw	r2,-96(fp)
 200d8ec:	10c00104 	addi	r3,r2,4
 200d8f0:	e0ffe815 	stw	r3,-96(fp)
 200d8f4:	e0ffe717 	ldw	r3,-100(fp)
 200d8f8:	19000104 	addi	r4,r3,4
 200d8fc:	e13fe715 	stw	r4,-100(fp)
 200d900:	18c00017 	ldw	r3,0(r3)
 200d904:	10c00015 	stw	r3,0(r2)
 200d908:	e0bff717 	ldw	r2,-36(fp)
 200d90c:	10800730 	cmpltui	r2,r2,28
 200d910:	1000231e 	bne	r2,zero,200d9a0 <_realloc_r+0x420>
 200d914:	e0bfe817 	ldw	r2,-96(fp)
 200d918:	10c00104 	addi	r3,r2,4
 200d91c:	e0ffe815 	stw	r3,-96(fp)
 200d920:	e0ffe717 	ldw	r3,-100(fp)
 200d924:	19000104 	addi	r4,r3,4
 200d928:	e13fe715 	stw	r4,-100(fp)
 200d92c:	18c00017 	ldw	r3,0(r3)
 200d930:	10c00015 	stw	r3,0(r2)
 200d934:	e0bfe817 	ldw	r2,-96(fp)
 200d938:	10c00104 	addi	r3,r2,4
 200d93c:	e0ffe815 	stw	r3,-96(fp)
 200d940:	e0ffe717 	ldw	r3,-100(fp)
 200d944:	19000104 	addi	r4,r3,4
 200d948:	e13fe715 	stw	r4,-100(fp)
 200d94c:	18c00017 	ldw	r3,0(r3)
 200d950:	10c00015 	stw	r3,0(r2)
 200d954:	e0bff717 	ldw	r2,-36(fp)
 200d958:	10800930 	cmpltui	r2,r2,36
 200d95c:	1000101e 	bne	r2,zero,200d9a0 <_realloc_r+0x420>
 200d960:	e0bfe817 	ldw	r2,-96(fp)
 200d964:	10c00104 	addi	r3,r2,4
 200d968:	e0ffe815 	stw	r3,-96(fp)
 200d96c:	e0ffe717 	ldw	r3,-100(fp)
 200d970:	19000104 	addi	r4,r3,4
 200d974:	e13fe715 	stw	r4,-100(fp)
 200d978:	18c00017 	ldw	r3,0(r3)
 200d97c:	10c00015 	stw	r3,0(r2)
 200d980:	e0bfe817 	ldw	r2,-96(fp)
 200d984:	10c00104 	addi	r3,r2,4
 200d988:	e0ffe815 	stw	r3,-96(fp)
 200d98c:	e0ffe717 	ldw	r3,-100(fp)
 200d990:	19000104 	addi	r4,r3,4
 200d994:	e13fe715 	stw	r4,-100(fp)
 200d998:	18c00017 	ldw	r3,0(r3)
 200d99c:	10c00015 	stw	r3,0(r2)
 200d9a0:	e0bfe817 	ldw	r2,-96(fp)
 200d9a4:	10c00104 	addi	r3,r2,4
 200d9a8:	e0ffe815 	stw	r3,-96(fp)
 200d9ac:	e0ffe717 	ldw	r3,-100(fp)
 200d9b0:	19000104 	addi	r4,r3,4
 200d9b4:	e13fe715 	stw	r4,-100(fp)
 200d9b8:	18c00017 	ldw	r3,0(r3)
 200d9bc:	10c00015 	stw	r3,0(r2)
 200d9c0:	e0bfe817 	ldw	r2,-96(fp)
 200d9c4:	10c00104 	addi	r3,r2,4
 200d9c8:	e0ffe815 	stw	r3,-96(fp)
 200d9cc:	e0ffe717 	ldw	r3,-100(fp)
 200d9d0:	19000104 	addi	r4,r3,4
 200d9d4:	e13fe715 	stw	r4,-100(fp)
 200d9d8:	18c00017 	ldw	r3,0(r3)
 200d9dc:	10c00015 	stw	r3,0(r2)
 200d9e0:	e0bfe717 	ldw	r2,-100(fp)
 200d9e4:	10c00017 	ldw	r3,0(r2)
 200d9e8:	e0bfe817 	ldw	r2,-96(fp)
 200d9ec:	10c00015 	stw	r3,0(r2)
 200d9f0:	00000406 	br	200da04 <_realloc_r+0x484>
 200d9f4:	e1bff717 	ldw	r6,-36(fp)
 200d9f8:	e17ffe17 	ldw	r5,-8(fp)
 200d9fc:	e13ff617 	ldw	r4,-40(fp)
 200da00:	200b73c0 	call	200b73c <memmove>
            top = chunk_at_offset(newp, nb);
 200da04:	008080b4 	movhi	r2,514
 200da08:	10b45c04 	addi	r2,r2,-11920
 200da0c:	e13fe317 	ldw	r4,-116(fp)
 200da10:	e0fff117 	ldw	r3,-60(fp)
 200da14:	20c7883a 	add	r3,r4,r3
 200da18:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 200da1c:	008080b4 	movhi	r2,514
 200da20:	10b45c04 	addi	r2,r2,-11920
 200da24:	10800217 	ldw	r2,8(r2)
 200da28:	e13fe417 	ldw	r4,-112(fp)
 200da2c:	e0fff117 	ldw	r3,-60(fp)
 200da30:	20c7c83a 	sub	r3,r4,r3
 200da34:	18c00054 	ori	r3,r3,1
 200da38:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 200da3c:	e0bfe317 	ldw	r2,-116(fp)
 200da40:	10800117 	ldw	r2,4(r2)
 200da44:	10c0004c 	andi	r3,r2,1
 200da48:	e0bff117 	ldw	r2,-60(fp)
 200da4c:	1886b03a 	or	r3,r3,r2
 200da50:	e0bfe317 	ldw	r2,-116(fp)
 200da54:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 200da58:	e13ffd17 	ldw	r4,-12(fp)
 200da5c:	2011df00 	call	2011df0 <__malloc_unlock>
            return newmem;
 200da60:	e0bff617 	ldw	r2,-40(fp)
 200da64:	0001bd06 	br	200e15c <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 200da68:	e0ffe617 	ldw	r3,-104(fp)
 200da6c:	e0bff517 	ldw	r2,-44(fp)
 200da70:	1887883a 	add	r3,r3,r2
 200da74:	e0bfe417 	ldw	r2,-112(fp)
 200da78:	1885883a 	add	r2,r3,r2
 200da7c:	1007883a 	mov	r3,r2
 200da80:	e0bff117 	ldw	r2,-60(fp)
 200da84:	18808016 	blt	r3,r2,200dc88 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 200da88:	e0bfe517 	ldw	r2,-108(fp)
 200da8c:	10800317 	ldw	r2,12(r2)
 200da90:	e0bff215 	stw	r2,-56(fp)
 200da94:	e0bfe517 	ldw	r2,-108(fp)
 200da98:	10800217 	ldw	r2,8(r2)
 200da9c:	e0bff315 	stw	r2,-52(fp)
 200daa0:	e0bff317 	ldw	r2,-52(fp)
 200daa4:	e0fff217 	ldw	r3,-56(fp)
 200daa8:	10c00315 	stw	r3,12(r2)
 200daac:	e0bff217 	ldw	r2,-56(fp)
 200dab0:	e0fff317 	ldw	r3,-52(fp)
 200dab4:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 200dab8:	e0bff417 	ldw	r2,-48(fp)
 200dabc:	10800317 	ldw	r2,12(r2)
 200dac0:	e0bff215 	stw	r2,-56(fp)
 200dac4:	e0bff417 	ldw	r2,-48(fp)
 200dac8:	10800217 	ldw	r2,8(r2)
 200dacc:	e0bff315 	stw	r2,-52(fp)
 200dad0:	e0bff317 	ldw	r2,-52(fp)
 200dad4:	e0fff217 	ldw	r3,-56(fp)
 200dad8:	10c00315 	stw	r3,12(r2)
 200dadc:	e0bff217 	ldw	r2,-56(fp)
 200dae0:	e0fff317 	ldw	r3,-52(fp)
 200dae4:	10c00215 	stw	r3,8(r2)
          newp = prev;
 200dae8:	e0bff417 	ldw	r2,-48(fp)
 200daec:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 200daf0:	e0ffe617 	ldw	r3,-104(fp)
 200daf4:	e0bff517 	ldw	r2,-44(fp)
 200daf8:	1885883a 	add	r2,r3,r2
 200dafc:	e0ffe417 	ldw	r3,-112(fp)
 200db00:	1885883a 	add	r2,r3,r2
 200db04:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 200db08:	e0bfe317 	ldw	r2,-116(fp)
 200db0c:	10800204 	addi	r2,r2,8
 200db10:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200db14:	e0bff017 	ldw	r2,-64(fp)
 200db18:	10bfff04 	addi	r2,r2,-4
 200db1c:	e0bff815 	stw	r2,-32(fp)
 200db20:	e0bff817 	ldw	r2,-32(fp)
 200db24:	10800968 	cmpgeui	r2,r2,37
 200db28:	1000521e 	bne	r2,zero,200dc74 <_realloc_r+0x6f4>
 200db2c:	e0bffe17 	ldw	r2,-8(fp)
 200db30:	e0bfe915 	stw	r2,-92(fp)
 200db34:	e0bff617 	ldw	r2,-40(fp)
 200db38:	e0bfea15 	stw	r2,-88(fp)
 200db3c:	e0bff817 	ldw	r2,-32(fp)
 200db40:	10800530 	cmpltui	r2,r2,20
 200db44:	1000361e 	bne	r2,zero,200dc20 <_realloc_r+0x6a0>
 200db48:	e0bfea17 	ldw	r2,-88(fp)
 200db4c:	10c00104 	addi	r3,r2,4
 200db50:	e0ffea15 	stw	r3,-88(fp)
 200db54:	e0ffe917 	ldw	r3,-92(fp)
 200db58:	19000104 	addi	r4,r3,4
 200db5c:	e13fe915 	stw	r4,-92(fp)
 200db60:	18c00017 	ldw	r3,0(r3)
 200db64:	10c00015 	stw	r3,0(r2)
 200db68:	e0bfea17 	ldw	r2,-88(fp)
 200db6c:	10c00104 	addi	r3,r2,4
 200db70:	e0ffea15 	stw	r3,-88(fp)
 200db74:	e0ffe917 	ldw	r3,-92(fp)
 200db78:	19000104 	addi	r4,r3,4
 200db7c:	e13fe915 	stw	r4,-92(fp)
 200db80:	18c00017 	ldw	r3,0(r3)
 200db84:	10c00015 	stw	r3,0(r2)
 200db88:	e0bff817 	ldw	r2,-32(fp)
 200db8c:	10800730 	cmpltui	r2,r2,28
 200db90:	1000231e 	bne	r2,zero,200dc20 <_realloc_r+0x6a0>
 200db94:	e0bfea17 	ldw	r2,-88(fp)
 200db98:	10c00104 	addi	r3,r2,4
 200db9c:	e0ffea15 	stw	r3,-88(fp)
 200dba0:	e0ffe917 	ldw	r3,-92(fp)
 200dba4:	19000104 	addi	r4,r3,4
 200dba8:	e13fe915 	stw	r4,-92(fp)
 200dbac:	18c00017 	ldw	r3,0(r3)
 200dbb0:	10c00015 	stw	r3,0(r2)
 200dbb4:	e0bfea17 	ldw	r2,-88(fp)
 200dbb8:	10c00104 	addi	r3,r2,4
 200dbbc:	e0ffea15 	stw	r3,-88(fp)
 200dbc0:	e0ffe917 	ldw	r3,-92(fp)
 200dbc4:	19000104 	addi	r4,r3,4
 200dbc8:	e13fe915 	stw	r4,-92(fp)
 200dbcc:	18c00017 	ldw	r3,0(r3)
 200dbd0:	10c00015 	stw	r3,0(r2)
 200dbd4:	e0bff817 	ldw	r2,-32(fp)
 200dbd8:	10800930 	cmpltui	r2,r2,36
 200dbdc:	1000101e 	bne	r2,zero,200dc20 <_realloc_r+0x6a0>
 200dbe0:	e0bfea17 	ldw	r2,-88(fp)
 200dbe4:	10c00104 	addi	r3,r2,4
 200dbe8:	e0ffea15 	stw	r3,-88(fp)
 200dbec:	e0ffe917 	ldw	r3,-92(fp)
 200dbf0:	19000104 	addi	r4,r3,4
 200dbf4:	e13fe915 	stw	r4,-92(fp)
 200dbf8:	18c00017 	ldw	r3,0(r3)
 200dbfc:	10c00015 	stw	r3,0(r2)
 200dc00:	e0bfea17 	ldw	r2,-88(fp)
 200dc04:	10c00104 	addi	r3,r2,4
 200dc08:	e0ffea15 	stw	r3,-88(fp)
 200dc0c:	e0ffe917 	ldw	r3,-92(fp)
 200dc10:	19000104 	addi	r4,r3,4
 200dc14:	e13fe915 	stw	r4,-92(fp)
 200dc18:	18c00017 	ldw	r3,0(r3)
 200dc1c:	10c00015 	stw	r3,0(r2)
 200dc20:	e0bfea17 	ldw	r2,-88(fp)
 200dc24:	10c00104 	addi	r3,r2,4
 200dc28:	e0ffea15 	stw	r3,-88(fp)
 200dc2c:	e0ffe917 	ldw	r3,-92(fp)
 200dc30:	19000104 	addi	r4,r3,4
 200dc34:	e13fe915 	stw	r4,-92(fp)
 200dc38:	18c00017 	ldw	r3,0(r3)
 200dc3c:	10c00015 	stw	r3,0(r2)
 200dc40:	e0bfea17 	ldw	r2,-88(fp)
 200dc44:	10c00104 	addi	r3,r2,4
 200dc48:	e0ffea15 	stw	r3,-88(fp)
 200dc4c:	e0ffe917 	ldw	r3,-92(fp)
 200dc50:	19000104 	addi	r4,r3,4
 200dc54:	e13fe915 	stw	r4,-92(fp)
 200dc58:	18c00017 	ldw	r3,0(r3)
 200dc5c:	10c00015 	stw	r3,0(r2)
 200dc60:	e0bfe917 	ldw	r2,-92(fp)
 200dc64:	10c00017 	ldw	r3,0(r2)
 200dc68:	e0bfea17 	ldw	r2,-88(fp)
 200dc6c:	10c00015 	stw	r3,0(r2)
          goto split;
 200dc70:	00010106 	br	200e078 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200dc74:	e1bff817 	ldw	r6,-32(fp)
 200dc78:	e17ffe17 	ldw	r5,-8(fp)
 200dc7c:	e13ff617 	ldw	r4,-40(fp)
 200dc80:	200b73c0 	call	200b73c <memmove>
          goto split;
 200dc84:	0000fc06 	br	200e078 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 200dc88:	e0bff417 	ldw	r2,-48(fp)
 200dc8c:	10007826 	beq	r2,zero,200de70 <_realloc_r+0x8f0>
 200dc90:	e0fff517 	ldw	r3,-44(fp)
 200dc94:	e0bfe417 	ldw	r2,-112(fp)
 200dc98:	1885883a 	add	r2,r3,r2
 200dc9c:	1007883a 	mov	r3,r2
 200dca0:	e0bff117 	ldw	r2,-60(fp)
 200dca4:	18807216 	blt	r3,r2,200de70 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 200dca8:	e0bff417 	ldw	r2,-48(fp)
 200dcac:	10800317 	ldw	r2,12(r2)
 200dcb0:	e0bff215 	stw	r2,-56(fp)
 200dcb4:	e0bff417 	ldw	r2,-48(fp)
 200dcb8:	10800217 	ldw	r2,8(r2)
 200dcbc:	e0bff315 	stw	r2,-52(fp)
 200dcc0:	e0bff317 	ldw	r2,-52(fp)
 200dcc4:	e0fff217 	ldw	r3,-56(fp)
 200dcc8:	10c00315 	stw	r3,12(r2)
 200dccc:	e0bff217 	ldw	r2,-56(fp)
 200dcd0:	e0fff317 	ldw	r3,-52(fp)
 200dcd4:	10c00215 	stw	r3,8(r2)
        newp = prev;
 200dcd8:	e0bff417 	ldw	r2,-48(fp)
 200dcdc:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 200dce0:	e0ffe417 	ldw	r3,-112(fp)
 200dce4:	e0bff517 	ldw	r2,-44(fp)
 200dce8:	1885883a 	add	r2,r3,r2
 200dcec:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 200dcf0:	e0bfe317 	ldw	r2,-116(fp)
 200dcf4:	10800204 	addi	r2,r2,8
 200dcf8:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200dcfc:	e0bff017 	ldw	r2,-64(fp)
 200dd00:	10bfff04 	addi	r2,r2,-4
 200dd04:	e0bff915 	stw	r2,-28(fp)
 200dd08:	e0bff917 	ldw	r2,-28(fp)
 200dd0c:	10800968 	cmpgeui	r2,r2,37
 200dd10:	1000521e 	bne	r2,zero,200de5c <_realloc_r+0x8dc>
 200dd14:	e0bffe17 	ldw	r2,-8(fp)
 200dd18:	e0bfeb15 	stw	r2,-84(fp)
 200dd1c:	e0bff617 	ldw	r2,-40(fp)
 200dd20:	e0bfec15 	stw	r2,-80(fp)
 200dd24:	e0bff917 	ldw	r2,-28(fp)
 200dd28:	10800530 	cmpltui	r2,r2,20
 200dd2c:	1000361e 	bne	r2,zero,200de08 <_realloc_r+0x888>
 200dd30:	e0bfec17 	ldw	r2,-80(fp)
 200dd34:	10c00104 	addi	r3,r2,4
 200dd38:	e0ffec15 	stw	r3,-80(fp)
 200dd3c:	e0ffeb17 	ldw	r3,-84(fp)
 200dd40:	19000104 	addi	r4,r3,4
 200dd44:	e13feb15 	stw	r4,-84(fp)
 200dd48:	18c00017 	ldw	r3,0(r3)
 200dd4c:	10c00015 	stw	r3,0(r2)
 200dd50:	e0bfec17 	ldw	r2,-80(fp)
 200dd54:	10c00104 	addi	r3,r2,4
 200dd58:	e0ffec15 	stw	r3,-80(fp)
 200dd5c:	e0ffeb17 	ldw	r3,-84(fp)
 200dd60:	19000104 	addi	r4,r3,4
 200dd64:	e13feb15 	stw	r4,-84(fp)
 200dd68:	18c00017 	ldw	r3,0(r3)
 200dd6c:	10c00015 	stw	r3,0(r2)
 200dd70:	e0bff917 	ldw	r2,-28(fp)
 200dd74:	10800730 	cmpltui	r2,r2,28
 200dd78:	1000231e 	bne	r2,zero,200de08 <_realloc_r+0x888>
 200dd7c:	e0bfec17 	ldw	r2,-80(fp)
 200dd80:	10c00104 	addi	r3,r2,4
 200dd84:	e0ffec15 	stw	r3,-80(fp)
 200dd88:	e0ffeb17 	ldw	r3,-84(fp)
 200dd8c:	19000104 	addi	r4,r3,4
 200dd90:	e13feb15 	stw	r4,-84(fp)
 200dd94:	18c00017 	ldw	r3,0(r3)
 200dd98:	10c00015 	stw	r3,0(r2)
 200dd9c:	e0bfec17 	ldw	r2,-80(fp)
 200dda0:	10c00104 	addi	r3,r2,4
 200dda4:	e0ffec15 	stw	r3,-80(fp)
 200dda8:	e0ffeb17 	ldw	r3,-84(fp)
 200ddac:	19000104 	addi	r4,r3,4
 200ddb0:	e13feb15 	stw	r4,-84(fp)
 200ddb4:	18c00017 	ldw	r3,0(r3)
 200ddb8:	10c00015 	stw	r3,0(r2)
 200ddbc:	e0bff917 	ldw	r2,-28(fp)
 200ddc0:	10800930 	cmpltui	r2,r2,36
 200ddc4:	1000101e 	bne	r2,zero,200de08 <_realloc_r+0x888>
 200ddc8:	e0bfec17 	ldw	r2,-80(fp)
 200ddcc:	10c00104 	addi	r3,r2,4
 200ddd0:	e0ffec15 	stw	r3,-80(fp)
 200ddd4:	e0ffeb17 	ldw	r3,-84(fp)
 200ddd8:	19000104 	addi	r4,r3,4
 200dddc:	e13feb15 	stw	r4,-84(fp)
 200dde0:	18c00017 	ldw	r3,0(r3)
 200dde4:	10c00015 	stw	r3,0(r2)
 200dde8:	e0bfec17 	ldw	r2,-80(fp)
 200ddec:	10c00104 	addi	r3,r2,4
 200ddf0:	e0ffec15 	stw	r3,-80(fp)
 200ddf4:	e0ffeb17 	ldw	r3,-84(fp)
 200ddf8:	19000104 	addi	r4,r3,4
 200ddfc:	e13feb15 	stw	r4,-84(fp)
 200de00:	18c00017 	ldw	r3,0(r3)
 200de04:	10c00015 	stw	r3,0(r2)
 200de08:	e0bfec17 	ldw	r2,-80(fp)
 200de0c:	10c00104 	addi	r3,r2,4
 200de10:	e0ffec15 	stw	r3,-80(fp)
 200de14:	e0ffeb17 	ldw	r3,-84(fp)
 200de18:	19000104 	addi	r4,r3,4
 200de1c:	e13feb15 	stw	r4,-84(fp)
 200de20:	18c00017 	ldw	r3,0(r3)
 200de24:	10c00015 	stw	r3,0(r2)
 200de28:	e0bfec17 	ldw	r2,-80(fp)
 200de2c:	10c00104 	addi	r3,r2,4
 200de30:	e0ffec15 	stw	r3,-80(fp)
 200de34:	e0ffeb17 	ldw	r3,-84(fp)
 200de38:	19000104 	addi	r4,r3,4
 200de3c:	e13feb15 	stw	r4,-84(fp)
 200de40:	18c00017 	ldw	r3,0(r3)
 200de44:	10c00015 	stw	r3,0(r2)
 200de48:	e0bfeb17 	ldw	r2,-84(fp)
 200de4c:	10c00017 	ldw	r3,0(r2)
 200de50:	e0bfec17 	ldw	r2,-80(fp)
 200de54:	10c00015 	stw	r3,0(r2)
        goto split;
 200de58:	00008706 	br	200e078 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200de5c:	e1bff917 	ldw	r6,-28(fp)
 200de60:	e17ffe17 	ldw	r5,-8(fp)
 200de64:	e13ff617 	ldw	r4,-40(fp)
 200de68:	200b73c0 	call	200b73c <memmove>
        goto split;
 200de6c:	00008206 	br	200e078 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 200de70:	e17fff17 	ldw	r5,-4(fp)
 200de74:	e13ffd17 	ldw	r4,-12(fp)
 200de78:	200a87c0 	call	200a87c <_malloc_r>
 200de7c:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 200de80:	e0bff617 	ldw	r2,-40(fp)
 200de84:	1000041e 	bne	r2,zero,200de98 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 200de88:	e13ffd17 	ldw	r4,-12(fp)
 200de8c:	2011df00 	call	2011df0 <__malloc_unlock>
      return 0;
 200de90:	0005883a 	mov	r2,zero
 200de94:	0000b106 	br	200e15c <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 200de98:	e0bff617 	ldw	r2,-40(fp)
 200de9c:	10bffe04 	addi	r2,r2,-8
 200dea0:	e0bfe315 	stw	r2,-116(fp)
 200dea4:	e0bfef17 	ldw	r2,-68(fp)
 200dea8:	10c00117 	ldw	r3,4(r2)
 200deac:	00bfff84 	movi	r2,-2
 200deb0:	1884703a 	and	r2,r3,r2
 200deb4:	e0ffef17 	ldw	r3,-68(fp)
 200deb8:	1885883a 	add	r2,r3,r2
 200debc:	e0ffe317 	ldw	r3,-116(fp)
 200dec0:	18800a1e 	bne	r3,r2,200deec <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 200dec4:	e0bfe317 	ldw	r2,-116(fp)
 200dec8:	10c00117 	ldw	r3,4(r2)
 200decc:	00bfff04 	movi	r2,-4
 200ded0:	1884703a 	and	r2,r3,r2
 200ded4:	e0ffe417 	ldw	r3,-112(fp)
 200ded8:	1885883a 	add	r2,r3,r2
 200dedc:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 200dee0:	e0bfef17 	ldw	r2,-68(fp)
 200dee4:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 200dee8:	00006306 	br	200e078 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200deec:	e0bff017 	ldw	r2,-64(fp)
 200def0:	10bfff04 	addi	r2,r2,-4
 200def4:	e0bffa15 	stw	r2,-24(fp)
 200def8:	e0bffa17 	ldw	r2,-24(fp)
 200defc:	10800968 	cmpgeui	r2,r2,37
 200df00:	1000521e 	bne	r2,zero,200e04c <_realloc_r+0xacc>
 200df04:	e0bffe17 	ldw	r2,-8(fp)
 200df08:	e0bfed15 	stw	r2,-76(fp)
 200df0c:	e0bff617 	ldw	r2,-40(fp)
 200df10:	e0bfee15 	stw	r2,-72(fp)
 200df14:	e0bffa17 	ldw	r2,-24(fp)
 200df18:	10800530 	cmpltui	r2,r2,20
 200df1c:	1000361e 	bne	r2,zero,200dff8 <_realloc_r+0xa78>
 200df20:	e0bfee17 	ldw	r2,-72(fp)
 200df24:	10c00104 	addi	r3,r2,4
 200df28:	e0ffee15 	stw	r3,-72(fp)
 200df2c:	e0ffed17 	ldw	r3,-76(fp)
 200df30:	19000104 	addi	r4,r3,4
 200df34:	e13fed15 	stw	r4,-76(fp)
 200df38:	18c00017 	ldw	r3,0(r3)
 200df3c:	10c00015 	stw	r3,0(r2)
 200df40:	e0bfee17 	ldw	r2,-72(fp)
 200df44:	10c00104 	addi	r3,r2,4
 200df48:	e0ffee15 	stw	r3,-72(fp)
 200df4c:	e0ffed17 	ldw	r3,-76(fp)
 200df50:	19000104 	addi	r4,r3,4
 200df54:	e13fed15 	stw	r4,-76(fp)
 200df58:	18c00017 	ldw	r3,0(r3)
 200df5c:	10c00015 	stw	r3,0(r2)
 200df60:	e0bffa17 	ldw	r2,-24(fp)
 200df64:	10800730 	cmpltui	r2,r2,28
 200df68:	1000231e 	bne	r2,zero,200dff8 <_realloc_r+0xa78>
 200df6c:	e0bfee17 	ldw	r2,-72(fp)
 200df70:	10c00104 	addi	r3,r2,4
 200df74:	e0ffee15 	stw	r3,-72(fp)
 200df78:	e0ffed17 	ldw	r3,-76(fp)
 200df7c:	19000104 	addi	r4,r3,4
 200df80:	e13fed15 	stw	r4,-76(fp)
 200df84:	18c00017 	ldw	r3,0(r3)
 200df88:	10c00015 	stw	r3,0(r2)
 200df8c:	e0bfee17 	ldw	r2,-72(fp)
 200df90:	10c00104 	addi	r3,r2,4
 200df94:	e0ffee15 	stw	r3,-72(fp)
 200df98:	e0ffed17 	ldw	r3,-76(fp)
 200df9c:	19000104 	addi	r4,r3,4
 200dfa0:	e13fed15 	stw	r4,-76(fp)
 200dfa4:	18c00017 	ldw	r3,0(r3)
 200dfa8:	10c00015 	stw	r3,0(r2)
 200dfac:	e0bffa17 	ldw	r2,-24(fp)
 200dfb0:	10800930 	cmpltui	r2,r2,36
 200dfb4:	1000101e 	bne	r2,zero,200dff8 <_realloc_r+0xa78>
 200dfb8:	e0bfee17 	ldw	r2,-72(fp)
 200dfbc:	10c00104 	addi	r3,r2,4
 200dfc0:	e0ffee15 	stw	r3,-72(fp)
 200dfc4:	e0ffed17 	ldw	r3,-76(fp)
 200dfc8:	19000104 	addi	r4,r3,4
 200dfcc:	e13fed15 	stw	r4,-76(fp)
 200dfd0:	18c00017 	ldw	r3,0(r3)
 200dfd4:	10c00015 	stw	r3,0(r2)
 200dfd8:	e0bfee17 	ldw	r2,-72(fp)
 200dfdc:	10c00104 	addi	r3,r2,4
 200dfe0:	e0ffee15 	stw	r3,-72(fp)
 200dfe4:	e0ffed17 	ldw	r3,-76(fp)
 200dfe8:	19000104 	addi	r4,r3,4
 200dfec:	e13fed15 	stw	r4,-76(fp)
 200dff0:	18c00017 	ldw	r3,0(r3)
 200dff4:	10c00015 	stw	r3,0(r2)
 200dff8:	e0bfee17 	ldw	r2,-72(fp)
 200dffc:	10c00104 	addi	r3,r2,4
 200e000:	e0ffee15 	stw	r3,-72(fp)
 200e004:	e0ffed17 	ldw	r3,-76(fp)
 200e008:	19000104 	addi	r4,r3,4
 200e00c:	e13fed15 	stw	r4,-76(fp)
 200e010:	18c00017 	ldw	r3,0(r3)
 200e014:	10c00015 	stw	r3,0(r2)
 200e018:	e0bfee17 	ldw	r2,-72(fp)
 200e01c:	10c00104 	addi	r3,r2,4
 200e020:	e0ffee15 	stw	r3,-72(fp)
 200e024:	e0ffed17 	ldw	r3,-76(fp)
 200e028:	19000104 	addi	r4,r3,4
 200e02c:	e13fed15 	stw	r4,-76(fp)
 200e030:	18c00017 	ldw	r3,0(r3)
 200e034:	10c00015 	stw	r3,0(r2)
 200e038:	e0bfed17 	ldw	r2,-76(fp)
 200e03c:	10c00017 	ldw	r3,0(r2)
 200e040:	e0bfee17 	ldw	r2,-72(fp)
 200e044:	10c00015 	stw	r3,0(r2)
 200e048:	00000406 	br	200e05c <_realloc_r+0xadc>
 200e04c:	e1bffa17 	ldw	r6,-24(fp)
 200e050:	e17ffe17 	ldw	r5,-8(fp)
 200e054:	e13ff617 	ldw	r4,-40(fp)
 200e058:	200b73c0 	call	200b73c <memmove>
    fREe(RCALL oldmem);
 200e05c:	e17ffe17 	ldw	r5,-8(fp)
 200e060:	e13ffd17 	ldw	r4,-12(fp)
 200e064:	200923c0 	call	200923c <_free_r>
    MALLOC_UNLOCK;
 200e068:	e13ffd17 	ldw	r4,-12(fp)
 200e06c:	2011df00 	call	2011df0 <__malloc_unlock>
    return newmem;
 200e070:	e0bff617 	ldw	r2,-40(fp)
 200e074:	00003906 	br	200e15c <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 200e078:	e0ffe417 	ldw	r3,-112(fp)
 200e07c:	e0bff117 	ldw	r2,-60(fp)
 200e080:	1885c83a 	sub	r2,r3,r2
 200e084:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 200e088:	e0bffb17 	ldw	r2,-20(fp)
 200e08c:	10800430 	cmpltui	r2,r2,16
 200e090:	10001e1e 	bne	r2,zero,200e10c <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 200e094:	e0ffe317 	ldw	r3,-116(fp)
 200e098:	e0bff117 	ldw	r2,-60(fp)
 200e09c:	1885883a 	add	r2,r3,r2
 200e0a0:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 200e0a4:	e0bfe317 	ldw	r2,-116(fp)
 200e0a8:	10800117 	ldw	r2,4(r2)
 200e0ac:	10c0004c 	andi	r3,r2,1
 200e0b0:	e0bff117 	ldw	r2,-60(fp)
 200e0b4:	1886b03a 	or	r3,r3,r2
 200e0b8:	e0bfe317 	ldw	r2,-116(fp)
 200e0bc:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 200e0c0:	e0bffb17 	ldw	r2,-20(fp)
 200e0c4:	10c00054 	ori	r3,r2,1
 200e0c8:	e0bffc17 	ldw	r2,-16(fp)
 200e0cc:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 200e0d0:	e0fffc17 	ldw	r3,-16(fp)
 200e0d4:	e0bffb17 	ldw	r2,-20(fp)
 200e0d8:	1885883a 	add	r2,r3,r2
 200e0dc:	e13ffc17 	ldw	r4,-16(fp)
 200e0e0:	e0fffb17 	ldw	r3,-20(fp)
 200e0e4:	20c7883a 	add	r3,r4,r3
 200e0e8:	18c00117 	ldw	r3,4(r3)
 200e0ec:	18c00054 	ori	r3,r3,1
 200e0f0:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 200e0f4:	e0bffc17 	ldw	r2,-16(fp)
 200e0f8:	10800204 	addi	r2,r2,8
 200e0fc:	100b883a 	mov	r5,r2
 200e100:	e13ffd17 	ldw	r4,-12(fp)
 200e104:	200923c0 	call	200923c <_free_r>
 200e108:	00001006 	br	200e14c <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 200e10c:	e0bfe317 	ldw	r2,-116(fp)
 200e110:	10800117 	ldw	r2,4(r2)
 200e114:	10c0004c 	andi	r3,r2,1
 200e118:	e0bfe417 	ldw	r2,-112(fp)
 200e11c:	1886b03a 	or	r3,r3,r2
 200e120:	e0bfe317 	ldw	r2,-116(fp)
 200e124:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 200e128:	e0ffe317 	ldw	r3,-116(fp)
 200e12c:	e0bfe417 	ldw	r2,-112(fp)
 200e130:	1885883a 	add	r2,r3,r2
 200e134:	e13fe317 	ldw	r4,-116(fp)
 200e138:	e0ffe417 	ldw	r3,-112(fp)
 200e13c:	20c7883a 	add	r3,r4,r3
 200e140:	18c00117 	ldw	r3,4(r3)
 200e144:	18c00054 	ori	r3,r3,1
 200e148:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 200e14c:	e13ffd17 	ldw	r4,-12(fp)
 200e150:	2011df00 	call	2011df0 <__malloc_unlock>
  return chunk2mem(newp);
 200e154:	e0bfe317 	ldw	r2,-116(fp)
 200e158:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200e15c:	e037883a 	mov	sp,fp
 200e160:	dfc00117 	ldw	ra,4(sp)
 200e164:	df000017 	ldw	fp,0(sp)
 200e168:	dec00204 	addi	sp,sp,8
 200e16c:	f800283a 	ret

0200e170 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 200e170:	defffb04 	addi	sp,sp,-20
 200e174:	dfc00415 	stw	ra,16(sp)
 200e178:	df000315 	stw	fp,12(sp)
 200e17c:	df000304 	addi	fp,sp,12
 200e180:	e13ffe15 	stw	r4,-8(fp)
 200e184:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 200e188:	d0272215 	stw	zero,-25464(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 200e18c:	e13fff17 	ldw	r4,-4(fp)
 200e190:	20119c80 	call	20119c8 <sbrk>
 200e194:	e0bffd15 	stw	r2,-12(fp)
 200e198:	e0bffd17 	ldw	r2,-12(fp)
 200e19c:	10bfffd8 	cmpnei	r2,r2,-1
 200e1a0:	1000051e 	bne	r2,zero,200e1b8 <_sbrk_r+0x48>
 200e1a4:	d0a72217 	ldw	r2,-25464(gp)
 200e1a8:	10000326 	beq	r2,zero,200e1b8 <_sbrk_r+0x48>
    ptr->_errno = errno;
 200e1ac:	d0e72217 	ldw	r3,-25464(gp)
 200e1b0:	e0bffe17 	ldw	r2,-8(fp)
 200e1b4:	10c00015 	stw	r3,0(r2)
  return ret;
 200e1b8:	e0bffd17 	ldw	r2,-12(fp)
}
 200e1bc:	e037883a 	mov	sp,fp
 200e1c0:	dfc00117 	ldw	ra,4(sp)
 200e1c4:	df000017 	ldw	fp,0(sp)
 200e1c8:	dec00204 	addi	sp,sp,8
 200e1cc:	f800283a 	ret

0200e1d0 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200e1d0:	defff804 	addi	sp,sp,-32
 200e1d4:	dfc00715 	stw	ra,28(sp)
 200e1d8:	df000615 	stw	fp,24(sp)
 200e1dc:	dc400515 	stw	r17,20(sp)
 200e1e0:	dc000415 	stw	r16,16(sp)
 200e1e4:	df000604 	addi	fp,sp,24
 200e1e8:	e13ffa15 	stw	r4,-24(fp)
 200e1ec:	e17ffb15 	stw	r5,-20(fp)
 200e1f0:	e1bffc15 	stw	r6,-16(fp)
 200e1f4:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200e1f8:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 200e1fc:	8080038b 	ldhu	r2,14(r16)
 200e200:	10bfffcc 	andi	r2,r2,65535
 200e204:	10a0001c 	xori	r2,r2,32768
 200e208:	10a00004 	addi	r2,r2,-32768
 200e20c:	e0fffd17 	ldw	r3,-12(fp)
 200e210:	180f883a 	mov	r7,r3
 200e214:	e1bffc17 	ldw	r6,-16(fp)
 200e218:	100b883a 	mov	r5,r2
 200e21c:	e13ffa17 	ldw	r4,-24(fp)
 200e220:	20102780 	call	2010278 <_read_r>
 200e224:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 200e228:	88000416 	blt	r17,zero,200e23c <__sread+0x6c>
    fp->_offset += ret;
 200e22c:	80801417 	ldw	r2,80(r16)
 200e230:	1445883a 	add	r2,r2,r17
 200e234:	80801415 	stw	r2,80(r16)
 200e238:	00000406 	br	200e24c <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 200e23c:	80c0030b 	ldhu	r3,12(r16)
 200e240:	00bbffc4 	movi	r2,-4097
 200e244:	1884703a 	and	r2,r3,r2
 200e248:	8080030d 	sth	r2,12(r16)
  return ret;
 200e24c:	8805883a 	mov	r2,r17
}
 200e250:	e6fffe04 	addi	sp,fp,-8
 200e254:	dfc00317 	ldw	ra,12(sp)
 200e258:	df000217 	ldw	fp,8(sp)
 200e25c:	dc400117 	ldw	r17,4(sp)
 200e260:	dc000017 	ldw	r16,0(sp)
 200e264:	dec00404 	addi	sp,sp,16
 200e268:	f800283a 	ret

0200e26c <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 200e26c:	defffb04 	addi	sp,sp,-20
 200e270:	df000415 	stw	fp,16(sp)
 200e274:	df000404 	addi	fp,sp,16
 200e278:	e13ffc15 	stw	r4,-16(fp)
 200e27c:	e17ffd15 	stw	r5,-12(fp)
 200e280:	e1bffe15 	stw	r6,-8(fp)
 200e284:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 200e288:	0005883a 	mov	r2,zero
}
 200e28c:	e037883a 	mov	sp,fp
 200e290:	df000017 	ldw	fp,0(sp)
 200e294:	dec00104 	addi	sp,sp,4
 200e298:	f800283a 	ret

0200e29c <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200e29c:	defff804 	addi	sp,sp,-32
 200e2a0:	dfc00715 	stw	ra,28(sp)
 200e2a4:	df000615 	stw	fp,24(sp)
 200e2a8:	dc000515 	stw	r16,20(sp)
 200e2ac:	df000604 	addi	fp,sp,24
 200e2b0:	e13ffb15 	stw	r4,-20(fp)
 200e2b4:	e17ffc15 	stw	r5,-16(fp)
 200e2b8:	e1bffd15 	stw	r6,-12(fp)
 200e2bc:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 200e2c0:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 200e2c4:	8080030b 	ldhu	r2,12(r16)
 200e2c8:	10bfffcc 	andi	r2,r2,65535
 200e2cc:	1080400c 	andi	r2,r2,256
 200e2d0:	10000926 	beq	r2,zero,200e2f8 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 200e2d4:	8080038b 	ldhu	r2,14(r16)
 200e2d8:	10bfffcc 	andi	r2,r2,65535
 200e2dc:	10a0001c 	xori	r2,r2,32768
 200e2e0:	10a00004 	addi	r2,r2,-32768
 200e2e4:	01c00084 	movi	r7,2
 200e2e8:	000d883a 	mov	r6,zero
 200e2ec:	100b883a 	mov	r5,r2
 200e2f0:	e13ffb17 	ldw	r4,-20(fp)
 200e2f4:	20102080 	call	2010208 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 200e2f8:	80c0030b 	ldhu	r3,12(r16)
 200e2fc:	00bbffc4 	movi	r2,-4097
 200e300:	1884703a 	and	r2,r3,r2
 200e304:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 200e308:	8080038b 	ldhu	r2,14(r16)
 200e30c:	10bfffcc 	andi	r2,r2,65535
 200e310:	10a0001c 	xori	r2,r2,32768
 200e314:	10a00004 	addi	r2,r2,-32768
 200e318:	e0fffe17 	ldw	r3,-8(fp)
 200e31c:	180f883a 	mov	r7,r3
 200e320:	e1bffd17 	ldw	r6,-12(fp)
 200e324:	100b883a 	mov	r5,r2
 200e328:	e13ffb17 	ldw	r4,-20(fp)
 200e32c:	200fac40 	call	200fac4 <_write_r>
 200e330:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 200e334:	e0bffa17 	ldw	r2,-24(fp)
}
 200e338:	e6ffff04 	addi	sp,fp,-4
 200e33c:	dfc00217 	ldw	ra,8(sp)
 200e340:	df000117 	ldw	fp,4(sp)
 200e344:	dc000017 	ldw	r16,0(sp)
 200e348:	dec00304 	addi	sp,sp,12
 200e34c:	f800283a 	ret

0200e350 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 200e350:	defff804 	addi	sp,sp,-32
 200e354:	dfc00715 	stw	ra,28(sp)
 200e358:	df000615 	stw	fp,24(sp)
 200e35c:	dc400515 	stw	r17,20(sp)
 200e360:	dc000415 	stw	r16,16(sp)
 200e364:	df000604 	addi	fp,sp,24
 200e368:	e13ffa15 	stw	r4,-24(fp)
 200e36c:	e17ffb15 	stw	r5,-20(fp)
 200e370:	e1bffc15 	stw	r6,-16(fp)
 200e374:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200e378:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 200e37c:	8080038b 	ldhu	r2,14(r16)
 200e380:	10bfffcc 	andi	r2,r2,65535
 200e384:	10a0001c 	xori	r2,r2,32768
 200e388:	10a00004 	addi	r2,r2,-32768
 200e38c:	e1fffd17 	ldw	r7,-12(fp)
 200e390:	e1bffc17 	ldw	r6,-16(fp)
 200e394:	100b883a 	mov	r5,r2
 200e398:	e13ffa17 	ldw	r4,-24(fp)
 200e39c:	20102080 	call	2010208 <_lseek_r>
 200e3a0:	1023883a 	mov	r17,r2
  if (ret == -1L)
 200e3a4:	88bfffd8 	cmpnei	r2,r17,-1
 200e3a8:	1000051e 	bne	r2,zero,200e3c0 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 200e3ac:	80c0030b 	ldhu	r3,12(r16)
 200e3b0:	00bbffc4 	movi	r2,-4097
 200e3b4:	1884703a 	and	r2,r3,r2
 200e3b8:	8080030d 	sth	r2,12(r16)
 200e3bc:	00000406 	br	200e3d0 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 200e3c0:	8080030b 	ldhu	r2,12(r16)
 200e3c4:	10840014 	ori	r2,r2,4096
 200e3c8:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 200e3cc:	84401415 	stw	r17,80(r16)
    }
  return ret;
 200e3d0:	8805883a 	mov	r2,r17
}
 200e3d4:	e6fffe04 	addi	sp,fp,-8
 200e3d8:	dfc00317 	ldw	ra,12(sp)
 200e3dc:	df000217 	ldw	fp,8(sp)
 200e3e0:	dc400117 	ldw	r17,4(sp)
 200e3e4:	dc000017 	ldw	r16,0(sp)
 200e3e8:	dec00404 	addi	sp,sp,16
 200e3ec:	f800283a 	ret

0200e3f0 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 200e3f0:	defffb04 	addi	sp,sp,-20
 200e3f4:	dfc00415 	stw	ra,16(sp)
 200e3f8:	df000315 	stw	fp,12(sp)
 200e3fc:	df000304 	addi	fp,sp,12
 200e400:	e13ffe15 	stw	r4,-8(fp)
 200e404:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 200e408:	e0bfff17 	ldw	r2,-4(fp)
 200e40c:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 200e410:	e0bffd17 	ldw	r2,-12(fp)
 200e414:	1080038b 	ldhu	r2,14(r2)
 200e418:	10bfffcc 	andi	r2,r2,65535
 200e41c:	10a0001c 	xori	r2,r2,32768
 200e420:	10a00004 	addi	r2,r2,-32768
 200e424:	100b883a 	mov	r5,r2
 200e428:	e13ffe17 	ldw	r4,-8(fp)
 200e42c:	200fb340 	call	200fb34 <_close_r>
}
 200e430:	e037883a 	mov	sp,fp
 200e434:	dfc00117 	ldw	ra,4(sp)
 200e438:	df000017 	ldw	fp,0(sp)
 200e43c:	dec00204 	addi	sp,sp,8
 200e440:	f800283a 	ret

0200e444 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 200e444:	defffb04 	addi	sp,sp,-20
 200e448:	df000415 	stw	fp,16(sp)
 200e44c:	df000404 	addi	fp,sp,16
 200e450:	e13ffe15 	stw	r4,-8(fp)
 200e454:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 200e458:	e0fffe17 	ldw	r3,-8(fp)
 200e45c:	e0bfff17 	ldw	r2,-4(fp)
 200e460:	1884b03a 	or	r2,r3,r2
 200e464:	108000cc 	andi	r2,r2,3
 200e468:	10002a1e 	bne	r2,zero,200e514 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 200e46c:	e0bffe17 	ldw	r2,-8(fp)
 200e470:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 200e474:	e0bfff17 	ldw	r2,-4(fp)
 200e478:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 200e47c:	00001506 	br	200e4d4 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 200e480:	e0bffc17 	ldw	r2,-16(fp)
 200e484:	10c00017 	ldw	r3,0(r2)
 200e488:	00bfbff4 	movhi	r2,65279
 200e48c:	10bfbfc4 	addi	r2,r2,-257
 200e490:	1887883a 	add	r3,r3,r2
 200e494:	e0bffc17 	ldw	r2,-16(fp)
 200e498:	10800017 	ldw	r2,0(r2)
 200e49c:	0084303a 	nor	r2,zero,r2
 200e4a0:	1886703a 	and	r3,r3,r2
 200e4a4:	00a02074 	movhi	r2,32897
 200e4a8:	10a02004 	addi	r2,r2,-32640
 200e4ac:	1884703a 	and	r2,r3,r2
 200e4b0:	10000226 	beq	r2,zero,200e4bc <strcmp+0x78>
	    return 0;
 200e4b4:	0005883a 	mov	r2,zero
 200e4b8:	00002e06 	br	200e574 <strcmp+0x130>

          a1++;
 200e4bc:	e0bffc17 	ldw	r2,-16(fp)
 200e4c0:	10800104 	addi	r2,r2,4
 200e4c4:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 200e4c8:	e0bffd17 	ldw	r2,-12(fp)
 200e4cc:	10800104 	addi	r2,r2,4
 200e4d0:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 200e4d4:	e0bffc17 	ldw	r2,-16(fp)
 200e4d8:	10c00017 	ldw	r3,0(r2)
 200e4dc:	e0bffd17 	ldw	r2,-12(fp)
 200e4e0:	10800017 	ldw	r2,0(r2)
 200e4e4:	18bfe626 	beq	r3,r2,200e480 <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 200e4e8:	e0bffc17 	ldw	r2,-16(fp)
 200e4ec:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 200e4f0:	e0bffd17 	ldw	r2,-12(fp)
 200e4f4:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 200e4f8:	00000606 	br	200e514 <strcmp+0xd0>
    {
      s1++;
 200e4fc:	e0bffe17 	ldw	r2,-8(fp)
 200e500:	10800044 	addi	r2,r2,1
 200e504:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 200e508:	e0bfff17 	ldw	r2,-4(fp)
 200e50c:	10800044 	addi	r2,r2,1
 200e510:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 200e514:	e0bffe17 	ldw	r2,-8(fp)
 200e518:	10800003 	ldbu	r2,0(r2)
 200e51c:	10803fcc 	andi	r2,r2,255
 200e520:	1080201c 	xori	r2,r2,128
 200e524:	10bfe004 	addi	r2,r2,-128
 200e528:	10000b26 	beq	r2,zero,200e558 <strcmp+0x114>
 200e52c:	e0bffe17 	ldw	r2,-8(fp)
 200e530:	10c00003 	ldbu	r3,0(r2)
 200e534:	e0bfff17 	ldw	r2,-4(fp)
 200e538:	10800003 	ldbu	r2,0(r2)
 200e53c:	18c03fcc 	andi	r3,r3,255
 200e540:	18c0201c 	xori	r3,r3,128
 200e544:	18ffe004 	addi	r3,r3,-128
 200e548:	10803fcc 	andi	r2,r2,255
 200e54c:	1080201c 	xori	r2,r2,128
 200e550:	10bfe004 	addi	r2,r2,-128
 200e554:	18bfe926 	beq	r3,r2,200e4fc <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 200e558:	e0bffe17 	ldw	r2,-8(fp)
 200e55c:	10800003 	ldbu	r2,0(r2)
 200e560:	10c03fcc 	andi	r3,r2,255
 200e564:	e0bfff17 	ldw	r2,-4(fp)
 200e568:	10800003 	ldbu	r2,0(r2)
 200e56c:	10803fcc 	andi	r2,r2,255
 200e570:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200e574:	e037883a 	mov	sp,fp
 200e578:	df000017 	ldw	fp,0(sp)
 200e57c:	dec00104 	addi	sp,sp,4
 200e580:	f800283a 	ret

0200e584 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 200e584:	defff604 	addi	sp,sp,-40
 200e588:	dfc00915 	stw	ra,36(sp)
 200e58c:	df000815 	stw	fp,32(sp)
 200e590:	dc400715 	stw	r17,28(sp)
 200e594:	dc000615 	stw	r16,24(sp)
 200e598:	df000804 	addi	fp,sp,32
 200e59c:	e13ffc15 	stw	r4,-16(fp)
 200e5a0:	e17ffd15 	stw	r5,-12(fp)
 200e5a4:	3021883a 	mov	r16,r6
	register int err = 0;
 200e5a8:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 200e5ac:	80800217 	ldw	r2,8(r16)
 200e5b0:	1000031e 	bne	r2,zero,200e5c0 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 200e5b4:	80000115 	stw	zero,4(r16)
		return (0);
 200e5b8:	0005883a 	mov	r2,zero
 200e5bc:	00003906 	br	200e6a4 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 200e5c0:	e0bffd17 	ldw	r2,-12(fp)
 200e5c4:	10801917 	ldw	r2,100(r2)
 200e5c8:	1088000c 	andi	r2,r2,8192
 200e5cc:	10002d26 	beq	r2,zero,200e684 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 200e5d0:	80800017 	ldw	r2,0(r16)
 200e5d4:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 200e5d8:	00002706 	br	200e678 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 200e5dc:	e0bff817 	ldw	r2,-32(fp)
 200e5e0:	10800017 	ldw	r2,0(r2)
 200e5e4:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 200e5e8:	e0bff817 	ldw	r2,-32(fp)
 200e5ec:	10800117 	ldw	r2,4(r2)
 200e5f0:	1004d0ba 	srli	r2,r2,2
 200e5f4:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 200e5f8:	e03ff915 	stw	zero,-28(fp)
 200e5fc:	00001206 	br	200e648 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 200e600:	e0bff917 	ldw	r2,-28(fp)
 200e604:	1085883a 	add	r2,r2,r2
 200e608:	1085883a 	add	r2,r2,r2
 200e60c:	1007883a 	mov	r3,r2
 200e610:	e0bffa17 	ldw	r2,-24(fp)
 200e614:	10c5883a 	add	r2,r2,r3
 200e618:	10800017 	ldw	r2,0(r2)
 200e61c:	e1bffd17 	ldw	r6,-12(fp)
 200e620:	100b883a 	mov	r5,r2
 200e624:	e13ffc17 	ldw	r4,-16(fp)
 200e628:	20100500 	call	2010050 <_fputwc_r>
 200e62c:	10bfffd8 	cmpnei	r2,r2,-1
 200e630:	1000021e 	bne	r2,zero,200e63c <__sprint_r+0xb8>
					err = -1;
 200e634:	047fffc4 	movi	r17,-1
					goto out;
 200e638:	00001706 	br	200e698 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 200e63c:	e0bff917 	ldw	r2,-28(fp)
 200e640:	10800044 	addi	r2,r2,1
 200e644:	e0bff915 	stw	r2,-28(fp)
 200e648:	e0fff917 	ldw	r3,-28(fp)
 200e64c:	e0bffb17 	ldw	r2,-20(fp)
 200e650:	18bfeb16 	blt	r3,r2,200e600 <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 200e654:	80c00217 	ldw	r3,8(r16)
 200e658:	e0bffb17 	ldw	r2,-20(fp)
 200e65c:	1085883a 	add	r2,r2,r2
 200e660:	1085883a 	add	r2,r2,r2
 200e664:	1885c83a 	sub	r2,r3,r2
 200e668:	80800215 	stw	r2,8(r16)
 200e66c:	e0bff817 	ldw	r2,-32(fp)
 200e670:	10800204 	addi	r2,r2,8
 200e674:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 200e678:	80800217 	ldw	r2,8(r16)
 200e67c:	103fd71e 	bne	r2,zero,200e5dc <__sprint_r+0x58>
 200e680:	00000506 	br	200e698 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 200e684:	800d883a 	mov	r6,r16
 200e688:	e17ffd17 	ldw	r5,-12(fp)
 200e68c:	e13ffc17 	ldw	r4,-16(fp)
 200e690:	20099680 	call	2009968 <__sfvwrite_r>
 200e694:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 200e698:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 200e69c:	80000115 	stw	zero,4(r16)
	return (err);
 200e6a0:	8805883a 	mov	r2,r17
}
 200e6a4:	e6fffe04 	addi	sp,fp,-8
 200e6a8:	dfc00317 	ldw	ra,12(sp)
 200e6ac:	df000217 	ldw	fp,8(sp)
 200e6b0:	dc400117 	ldw	r17,4(sp)
 200e6b4:	dc000017 	ldw	r16,0(sp)
 200e6b8:	dec00404 	addi	sp,sp,16
 200e6bc:	f800283a 	ret

0200e6c0 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 200e6c0:	defedf04 	addi	sp,sp,-1156
 200e6c4:	dfc12015 	stw	ra,1152(sp)
 200e6c8:	df011f15 	stw	fp,1148(sp)
 200e6cc:	dc011e15 	stw	r16,1144(sp)
 200e6d0:	df011f04 	addi	fp,sp,1148
 200e6d4:	e13ffc15 	stw	r4,-16(fp)
 200e6d8:	2821883a 	mov	r16,r5
 200e6dc:	e1bffd15 	stw	r6,-12(fp)
 200e6e0:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 200e6e4:	80c0030b 	ldhu	r3,12(r16)
 200e6e8:	00bfff44 	movi	r2,-3
 200e6ec:	1884703a 	and	r2,r3,r2
 200e6f0:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 200e6f4:	80801917 	ldw	r2,100(r16)
 200e6f8:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 200e6fc:	8080038b 	ldhu	r2,14(r16)
 200e700:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 200e704:	80800717 	ldw	r2,28(r16)
 200e708:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 200e70c:	80800917 	ldw	r2,36(r16)
 200e710:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 200e714:	e0befc04 	addi	r2,fp,-1040
 200e718:	e0bee215 	stw	r2,-1144(fp)
 200e71c:	e0bee217 	ldw	r2,-1144(fp)
 200e720:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 200e724:	00810004 	movi	r2,1024
 200e728:	e0bee415 	stw	r2,-1136(fp)
 200e72c:	e0bee417 	ldw	r2,-1136(fp)
 200e730:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 200e734:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 200e738:	e0bee204 	addi	r2,fp,-1144
 200e73c:	e1fffe17 	ldw	r7,-8(fp)
 200e740:	e1bffd17 	ldw	r6,-12(fp)
 200e744:	100b883a 	mov	r5,r2
 200e748:	e13ffc17 	ldw	r4,-16(fp)
 200e74c:	200e8000 	call	200e800 <___vfiprintf_internal_r>
 200e750:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 200e754:	e0bee117 	ldw	r2,-1148(fp)
 200e758:	10000716 	blt	r2,zero,200e778 <__sbprintf+0xb8>
 200e75c:	e0bee204 	addi	r2,fp,-1144
 200e760:	100b883a 	mov	r5,r2
 200e764:	e13ffc17 	ldw	r4,-16(fp)
 200e768:	2008b9c0 	call	2008b9c <_fflush_r>
 200e76c:	10000226 	beq	r2,zero,200e778 <__sbprintf+0xb8>
		ret = EOF;
 200e770:	00bfffc4 	movi	r2,-1
 200e774:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 200e778:	e0bee50b 	ldhu	r2,-1132(fp)
 200e77c:	10bfffcc 	andi	r2,r2,65535
 200e780:	1080100c 	andi	r2,r2,64
 200e784:	10000326 	beq	r2,zero,200e794 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 200e788:	8080030b 	ldhu	r2,12(r16)
 200e78c:	10801014 	ori	r2,r2,64
 200e790:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 200e794:	e0bee117 	ldw	r2,-1148(fp)
}
 200e798:	e6ffff04 	addi	sp,fp,-4
 200e79c:	dfc00217 	ldw	ra,8(sp)
 200e7a0:	df000117 	ldw	fp,4(sp)
 200e7a4:	dc000017 	ldw	r16,0(sp)
 200e7a8:	dec00304 	addi	sp,sp,12
 200e7ac:	f800283a 	ret

0200e7b0 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 200e7b0:	defffa04 	addi	sp,sp,-24
 200e7b4:	dfc00515 	stw	ra,20(sp)
 200e7b8:	df000415 	stw	fp,16(sp)
 200e7bc:	df000404 	addi	fp,sp,16
 200e7c0:	e13ffd15 	stw	r4,-12(fp)
 200e7c4:	e17ffe15 	stw	r5,-8(fp)
 200e7c8:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 200e7cc:	d0a00517 	ldw	r2,-32748(gp)
 200e7d0:	e1ffff17 	ldw	r7,-4(fp)
 200e7d4:	e1bffe17 	ldw	r6,-8(fp)
 200e7d8:	e17ffd17 	ldw	r5,-12(fp)
 200e7dc:	1009883a 	mov	r4,r2
 200e7e0:	200e8000 	call	200e800 <___vfiprintf_internal_r>
 200e7e4:	e0bffc15 	stw	r2,-16(fp)
  return result;
 200e7e8:	e0bffc17 	ldw	r2,-16(fp)
}
 200e7ec:	e037883a 	mov	sp,fp
 200e7f0:	dfc00117 	ldw	ra,4(sp)
 200e7f4:	df000017 	ldw	fp,0(sp)
 200e7f8:	dec00204 	addi	sp,sp,8
 200e7fc:	f800283a 	ret

0200e800 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 200e800:	deffb704 	addi	sp,sp,-292
 200e804:	dfc04815 	stw	ra,288(sp)
 200e808:	df004715 	stw	fp,284(sp)
 200e80c:	ddc04615 	stw	r23,280(sp)
 200e810:	dd804515 	stw	r22,276(sp)
 200e814:	dd404415 	stw	r21,272(sp)
 200e818:	dd004315 	stw	r20,268(sp)
 200e81c:	dcc04215 	stw	r19,264(sp)
 200e820:	dc804115 	stw	r18,260(sp)
 200e824:	dc404015 	stw	r17,256(sp)
 200e828:	dc003f15 	stw	r16,252(sp)
 200e82c:	df004704 	addi	fp,sp,284
 200e830:	e13fe615 	stw	r4,-104(fp)
 200e834:	e17fe715 	stw	r5,-100(fp)
 200e838:	e1bfe815 	stw	r6,-96(fp)
 200e83c:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 200e840:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 200e844:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 200e848:	e0bfe617 	ldw	r2,-104(fp)
 200e84c:	e0bfc415 	stw	r2,-240(fp)
 200e850:	e0bfc417 	ldw	r2,-240(fp)
 200e854:	10000526 	beq	r2,zero,200e86c <___vfiprintf_internal_r+0x6c>
 200e858:	e0bfc417 	ldw	r2,-240(fp)
 200e85c:	10800e17 	ldw	r2,56(r2)
 200e860:	1000021e 	bne	r2,zero,200e86c <___vfiprintf_internal_r+0x6c>
 200e864:	e13fc417 	ldw	r4,-240(fp)
 200e868:	200901c0 	call	200901c <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 200e86c:	e0bfe717 	ldw	r2,-100(fp)
 200e870:	1080030b 	ldhu	r2,12(r2)
 200e874:	10bfffcc 	andi	r2,r2,65535
 200e878:	1088000c 	andi	r2,r2,8192
 200e87c:	10000c1e 	bne	r2,zero,200e8b0 <___vfiprintf_internal_r+0xb0>
 200e880:	e0bfe717 	ldw	r2,-100(fp)
 200e884:	1080030b 	ldhu	r2,12(r2)
 200e888:	10880014 	ori	r2,r2,8192
 200e88c:	1007883a 	mov	r3,r2
 200e890:	e0bfe717 	ldw	r2,-100(fp)
 200e894:	10c0030d 	sth	r3,12(r2)
 200e898:	e0bfe717 	ldw	r2,-100(fp)
 200e89c:	10c01917 	ldw	r3,100(r2)
 200e8a0:	00b7ffc4 	movi	r2,-8193
 200e8a4:	1886703a 	and	r3,r3,r2
 200e8a8:	e0bfe717 	ldw	r2,-100(fp)
 200e8ac:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 200e8b0:	e0bfe717 	ldw	r2,-100(fp)
 200e8b4:	1080030b 	ldhu	r2,12(r2)
 200e8b8:	10bfffcc 	andi	r2,r2,65535
 200e8bc:	1080020c 	andi	r2,r2,8
 200e8c0:	10000326 	beq	r2,zero,200e8d0 <___vfiprintf_internal_r+0xd0>
 200e8c4:	e0bfe717 	ldw	r2,-100(fp)
 200e8c8:	10800417 	ldw	r2,16(r2)
 200e8cc:	1000061e 	bne	r2,zero,200e8e8 <___vfiprintf_internal_r+0xe8>
 200e8d0:	e17fe717 	ldw	r5,-100(fp)
 200e8d4:	e13fe617 	ldw	r4,-104(fp)
 200e8d8:	20067cc0 	call	20067cc <__swsetup_r>
 200e8dc:	10000226 	beq	r2,zero,200e8e8 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 200e8e0:	00bfffc4 	movi	r2,-1
 200e8e4:	00046a06 	br	200fa90 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200e8e8:	e0bfe717 	ldw	r2,-100(fp)
 200e8ec:	1080030b 	ldhu	r2,12(r2)
 200e8f0:	10bfffcc 	andi	r2,r2,65535
 200e8f4:	1080068c 	andi	r2,r2,26
 200e8f8:	10800298 	cmpnei	r2,r2,10
 200e8fc:	10000c1e 	bne	r2,zero,200e930 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 200e900:	e0bfe717 	ldw	r2,-100(fp)
 200e904:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200e908:	10bfffcc 	andi	r2,r2,65535
 200e90c:	10a0001c 	xori	r2,r2,32768
 200e910:	10a00004 	addi	r2,r2,-32768
 200e914:	10000616 	blt	r2,zero,200e930 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 200e918:	e1ffe917 	ldw	r7,-92(fp)
 200e91c:	e1bfe817 	ldw	r6,-96(fp)
 200e920:	e17fe717 	ldw	r5,-100(fp)
 200e924:	e13fe617 	ldw	r4,-104(fp)
 200e928:	200e6c00 	call	200e6c0 <__sbprintf>
 200e92c:	00045806 	br	200fa90 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 200e930:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 200e934:	e4bfcb04 	addi	r18,fp,-212
 200e938:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 200e93c:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 200e940:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 200e944:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 200e948:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200e94c:	00000106 	br	200e954 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 200e950:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200e954:	a8800003 	ldbu	r2,0(r21)
 200e958:	10803fcc 	andi	r2,r2,255
 200e95c:	1080201c 	xori	r2,r2,128
 200e960:	10bfe004 	addi	r2,r2,-128
 200e964:	10000626 	beq	r2,zero,200e980 <___vfiprintf_internal_r+0x180>
 200e968:	a8800003 	ldbu	r2,0(r21)
 200e96c:	10803fcc 	andi	r2,r2,255
 200e970:	1080201c 	xori	r2,r2,128
 200e974:	10bfe004 	addi	r2,r2,-128
 200e978:	10800958 	cmpnei	r2,r2,37
 200e97c:	103ff41e 	bne	r2,zero,200e950 <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 200e980:	a807883a 	mov	r3,r21
 200e984:	a005883a 	mov	r2,r20
 200e988:	18a1c83a 	sub	r16,r3,r2
 200e98c:	80001826 	beq	r16,zero,200e9f0 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 200e990:	95000015 	stw	r20,0(r18)
 200e994:	8005883a 	mov	r2,r16
 200e998:	90800115 	stw	r2,4(r18)
 200e99c:	e0bfca17 	ldw	r2,-216(fp)
 200e9a0:	8007883a 	mov	r3,r16
 200e9a4:	10c5883a 	add	r2,r2,r3
 200e9a8:	e0bfca15 	stw	r2,-216(fp)
 200e9ac:	94800204 	addi	r18,r18,8
 200e9b0:	e0bfc917 	ldw	r2,-220(fp)
 200e9b4:	10800044 	addi	r2,r2,1
 200e9b8:	e0bfc915 	stw	r2,-220(fp)
 200e9bc:	e0bfc917 	ldw	r2,-220(fp)
 200e9c0:	10800210 	cmplti	r2,r2,8
 200e9c4:	1000071e 	bne	r2,zero,200e9e4 <___vfiprintf_internal_r+0x1e4>
 200e9c8:	e0bfc804 	addi	r2,fp,-224
 200e9cc:	100d883a 	mov	r6,r2
 200e9d0:	e17fe717 	ldw	r5,-100(fp)
 200e9d4:	e13fe617 	ldw	r4,-104(fp)
 200e9d8:	200e5840 	call	200e584 <__sprint_r>
 200e9dc:	1004031e 	bne	r2,zero,200f9ec <___vfiprintf_internal_r+0x11ec>
 200e9e0:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 200e9e4:	e0bfb917 	ldw	r2,-284(fp)
 200e9e8:	1405883a 	add	r2,r2,r16
 200e9ec:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 200e9f0:	a8800003 	ldbu	r2,0(r21)
 200e9f4:	10803fcc 	andi	r2,r2,255
 200e9f8:	1080201c 	xori	r2,r2,128
 200e9fc:	10bfe004 	addi	r2,r2,-128
 200ea00:	1003ec26 	beq	r2,zero,200f9b4 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 200ea04:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 200ea08:	ad400044 	addi	r21,r21,1

		flags = 0;
 200ea0c:	0027883a 	mov	r19,zero
		dprec = 0;
 200ea10:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 200ea14:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 200ea18:	00bfffc4 	movi	r2,-1
 200ea1c:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 200ea20:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 200ea24:	a805883a 	mov	r2,r21
 200ea28:	15400044 	addi	r21,r2,1
 200ea2c:	10800003 	ldbu	r2,0(r2)
 200ea30:	14403fcc 	andi	r17,r2,255
 200ea34:	8c40201c 	xori	r17,r17,128
 200ea38:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 200ea3c:	88bff804 	addi	r2,r17,-32
 200ea40:	10c01668 	cmpgeui	r3,r2,89
 200ea44:	1802881e 	bne	r3,zero,200f468 <___vfiprintf_internal_r+0xc68>
 200ea48:	100690ba 	slli	r3,r2,2
 200ea4c:	00808074 	movhi	r2,513
 200ea50:	10ba9804 	addi	r2,r2,-5536
 200ea54:	1885883a 	add	r2,r3,r2
 200ea58:	10800017 	ldw	r2,0(r2)
 200ea5c:	1000683a 	jmp	r2
 200ea60:	0200ebc4 	movi	r8,943
 200ea64:	0200f468 	cmpgeui	r8,zero,977
 200ea68:	0200f468 	cmpgeui	r8,zero,977
 200ea6c:	0200ebe4 	muli	r8,zero,943
 200ea70:	0200f468 	cmpgeui	r8,zero,977
 200ea74:	0200f468 	cmpgeui	r8,zero,977
 200ea78:	0200f468 	cmpgeui	r8,zero,977
 200ea7c:	0200f468 	cmpgeui	r8,zero,977
 200ea80:	0200f468 	cmpgeui	r8,zero,977
 200ea84:	0200f468 	cmpgeui	r8,zero,977
 200ea88:	0200ebec 	andhi	r8,zero,943
 200ea8c:	0200ec20 	cmpeqi	r8,zero,944
 200ea90:	0200f468 	cmpgeui	r8,zero,977
 200ea94:	0200ec18 	cmpnei	r8,zero,944
 200ea98:	0200ec2c 	andhi	r8,zero,944
 200ea9c:	0200f468 	cmpgeui	r8,zero,977
 200eaa0:	0200ecc0 	call	200ecc <__alt_mem_mem_Nios_PI+0xecc>
 200eaa4:	0200ecc8 	cmpgei	r8,zero,947
 200eaa8:	0200ecc8 	cmpgei	r8,zero,947
 200eaac:	0200ecc8 	cmpgei	r8,zero,947
 200eab0:	0200ecc8 	cmpgei	r8,zero,947
 200eab4:	0200ecc8 	cmpgei	r8,zero,947
 200eab8:	0200ecc8 	cmpgei	r8,zero,947
 200eabc:	0200ecc8 	cmpgei	r8,zero,947
 200eac0:	0200ecc8 	cmpgei	r8,zero,947
 200eac4:	0200ecc8 	cmpgei	r8,zero,947
 200eac8:	0200f468 	cmpgeui	r8,zero,977
 200eacc:	0200f468 	cmpgeui	r8,zero,977
 200ead0:	0200f468 	cmpgeui	r8,zero,977
 200ead4:	0200f468 	cmpgeui	r8,zero,977
 200ead8:	0200f468 	cmpgeui	r8,zero,977
 200eadc:	0200f468 	cmpgeui	r8,zero,977
 200eae0:	0200f468 	cmpgeui	r8,zero,977
 200eae4:	0200f468 	cmpgeui	r8,zero,977
 200eae8:	0200f468 	cmpgeui	r8,zero,977
 200eaec:	0200f468 	cmpgeui	r8,zero,977
 200eaf0:	0200ed68 	cmpgeui	r8,zero,949
 200eaf4:	0200f468 	cmpgeui	r8,zero,977
 200eaf8:	0200f468 	cmpgeui	r8,zero,977
 200eafc:	0200f468 	cmpgeui	r8,zero,977
 200eb00:	0200f468 	cmpgeui	r8,zero,977
 200eb04:	0200f468 	cmpgeui	r8,zero,977
 200eb08:	0200f468 	cmpgeui	r8,zero,977
 200eb0c:	0200f468 	cmpgeui	r8,zero,977
 200eb10:	0200f468 	cmpgeui	r8,zero,977
 200eb14:	0200f468 	cmpgeui	r8,zero,977
 200eb18:	0200f468 	cmpgeui	r8,zero,977
 200eb1c:	0200ef08 	cmpgei	r8,zero,956
 200eb20:	0200f468 	cmpgeui	r8,zero,977
 200eb24:	0200f468 	cmpgeui	r8,zero,977
 200eb28:	0200f468 	cmpgeui	r8,zero,977
 200eb2c:	0200f468 	cmpgeui	r8,zero,977
 200eb30:	0200f468 	cmpgeui	r8,zero,977
 200eb34:	0200f084 	movi	r8,962
 200eb38:	0200f468 	cmpgeui	r8,zero,977
 200eb3c:	0200f468 	cmpgeui	r8,zero,977
 200eb40:	0200f144 	movi	r8,965
 200eb44:	0200f468 	cmpgeui	r8,zero,977
 200eb48:	0200f468 	cmpgeui	r8,zero,977
 200eb4c:	0200f468 	cmpgeui	r8,zero,977
 200eb50:	0200f468 	cmpgeui	r8,zero,977
 200eb54:	0200f468 	cmpgeui	r8,zero,977
 200eb58:	0200f468 	cmpgeui	r8,zero,977
 200eb5c:	0200f468 	cmpgeui	r8,zero,977
 200eb60:	0200f468 	cmpgeui	r8,zero,977
 200eb64:	0200f468 	cmpgeui	r8,zero,977
 200eb68:	0200f468 	cmpgeui	r8,zero,977
 200eb6c:	0200ed40 	call	200ed4 <__alt_mem_mem_Nios_PI+0xed4>
 200eb70:	0200ed6c 	andhi	r8,zero,949
 200eb74:	0200f468 	cmpgeui	r8,zero,977
 200eb78:	0200f468 	cmpgeui	r8,zero,977
 200eb7c:	0200f468 	cmpgeui	r8,zero,977
 200eb80:	0200ed04 	movi	r8,948
 200eb84:	0200ed6c 	andhi	r8,zero,949
 200eb88:	0200f468 	cmpgeui	r8,zero,977
 200eb8c:	0200f468 	cmpgeui	r8,zero,977
 200eb90:	0200ed0c 	andi	r8,zero,948
 200eb94:	0200f468 	cmpgeui	r8,zero,977
 200eb98:	0200ee68 	cmpgeui	r8,zero,953
 200eb9c:	0200ef0c 	andi	r8,zero,956
 200eba0:	0200efac 	andhi	r8,zero,958
 200eba4:	0200ed38 	rdprs	r8,zero,948
 200eba8:	0200f468 	cmpgeui	r8,zero,977
 200ebac:	0200eff4 	movhi	r8,959
 200ebb0:	0200f468 	cmpgeui	r8,zero,977
 200ebb4:	0200f088 	cmpgei	r8,zero,962
 200ebb8:	0200f468 	cmpgeui	r8,zero,977
 200ebbc:	0200f468 	cmpgeui	r8,zero,977
 200ebc0:	0200f154 	movui	r8,965
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 200ebc4:	e0bfc703 	ldbu	r2,-228(fp)
 200ebc8:	10803fcc 	andi	r2,r2,255
 200ebcc:	1080201c 	xori	r2,r2,128
 200ebd0:	10bfe004 	addi	r2,r2,-128
 200ebd4:	103f931e 	bne	r2,zero,200ea24 <___vfiprintf_internal_r+0x224>
				sign = ' ';
 200ebd8:	00800804 	movi	r2,32
 200ebdc:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200ebe0:	003f9006 	br	200ea24 <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 200ebe4:	9cc00054 	ori	r19,r19,1
			goto rflag;
 200ebe8:	003f8e06 	br	200ea24 <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 200ebec:	e0bfe917 	ldw	r2,-92(fp)
 200ebf0:	10c00104 	addi	r3,r2,4
 200ebf4:	e0ffe915 	stw	r3,-92(fp)
 200ebf8:	10800017 	ldw	r2,0(r2)
 200ebfc:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 200ec00:	e0bfba17 	ldw	r2,-280(fp)
 200ec04:	10000116 	blt	r2,zero,200ec0c <___vfiprintf_internal_r+0x40c>
				goto rflag;
 200ec08:	003f8606 	br	200ea24 <___vfiprintf_internal_r+0x224>
			width = -width;
 200ec0c:	e0bfba17 	ldw	r2,-280(fp)
 200ec10:	0085c83a 	sub	r2,zero,r2
 200ec14:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 200ec18:	9cc00114 	ori	r19,r19,4
			goto rflag;
 200ec1c:	003f8106 	br	200ea24 <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 200ec20:	00800ac4 	movi	r2,43
 200ec24:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200ec28:	003f7e06 	br	200ea24 <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 200ec2c:	a805883a 	mov	r2,r21
 200ec30:	15400044 	addi	r21,r2,1
 200ec34:	10800003 	ldbu	r2,0(r2)
 200ec38:	14403fcc 	andi	r17,r2,255
 200ec3c:	8c40201c 	xori	r17,r17,128
 200ec40:	8c7fe004 	addi	r17,r17,-128
 200ec44:	88800a98 	cmpnei	r2,r17,42
 200ec48:	10000a1e 	bne	r2,zero,200ec74 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 200ec4c:	e0bfe917 	ldw	r2,-92(fp)
 200ec50:	10c00104 	addi	r3,r2,4
 200ec54:	e0ffe915 	stw	r3,-92(fp)
 200ec58:	10800017 	ldw	r2,0(r2)
 200ec5c:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 200ec60:	e0bfbb17 	ldw	r2,-276(fp)
 200ec64:	103f6f0e 	bge	r2,zero,200ea24 <___vfiprintf_internal_r+0x224>
					prec = -1;
 200ec68:	00bfffc4 	movi	r2,-1
 200ec6c:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 200ec70:	003f6c06 	br	200ea24 <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 200ec74:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 200ec78:	00000906 	br	200eca0 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 200ec7c:	80c002a4 	muli	r3,r16,10
 200ec80:	88bff404 	addi	r2,r17,-48
 200ec84:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200ec88:	a805883a 	mov	r2,r21
 200ec8c:	15400044 	addi	r21,r2,1
 200ec90:	10800003 	ldbu	r2,0(r2)
 200ec94:	14403fcc 	andi	r17,r2,255
 200ec98:	8c40201c 	xori	r17,r17,128
 200ec9c:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 200eca0:	88bff404 	addi	r2,r17,-48
 200eca4:	108002b0 	cmpltui	r2,r2,10
 200eca8:	103ff41e 	bne	r2,zero,200ec7c <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200ecac:	8005883a 	mov	r2,r16
 200ecb0:	1000010e 	bge	r2,zero,200ecb8 <___vfiprintf_internal_r+0x4b8>
 200ecb4:	00bfffc4 	movi	r2,-1
 200ecb8:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 200ecbc:	003f5f06 	br	200ea3c <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 200ecc0:	9cc02014 	ori	r19,r19,128
			goto rflag;
 200ecc4:	003f5706 	br	200ea24 <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 200ecc8:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 200eccc:	80c002a4 	muli	r3,r16,10
 200ecd0:	88bff404 	addi	r2,r17,-48
 200ecd4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200ecd8:	a805883a 	mov	r2,r21
 200ecdc:	15400044 	addi	r21,r2,1
 200ece0:	10800003 	ldbu	r2,0(r2)
 200ece4:	14403fcc 	andi	r17,r2,255
 200ece8:	8c40201c 	xori	r17,r17,128
 200ecec:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 200ecf0:	88bff404 	addi	r2,r17,-48
 200ecf4:	108002b0 	cmpltui	r2,r2,10
 200ecf8:	103ff41e 	bne	r2,zero,200eccc <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 200ecfc:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 200ed00:	003f4e06 	br	200ea3c <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 200ed04:	9cc01014 	ori	r19,r19,64
			goto rflag;
 200ed08:	003f4606 	br	200ea24 <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200ed0c:	a8800003 	ldbu	r2,0(r21)
 200ed10:	10803fcc 	andi	r2,r2,255
 200ed14:	1080201c 	xori	r2,r2,128
 200ed18:	10bfe004 	addi	r2,r2,-128
 200ed1c:	10801b18 	cmpnei	r2,r2,108
 200ed20:	1000031e 	bne	r2,zero,200ed30 <___vfiprintf_internal_r+0x530>
				fmt++;
 200ed24:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 200ed28:	9cc00814 	ori	r19,r19,32
 200ed2c:	003f3d06 	br	200ea24 <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 200ed30:	9cc00414 	ori	r19,r19,16
			goto rflag;
 200ed34:	003f3b06 	br	200ea24 <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 200ed38:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200ed3c:	003f3906 	br	200ea24 <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 200ed40:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 200ed44:	e0bfe917 	ldw	r2,-92(fp)
 200ed48:	10c00104 	addi	r3,r2,4
 200ed4c:	e0ffe915 	stw	r3,-92(fp)
 200ed50:	10800017 	ldw	r2,0(r2)
 200ed54:	a0800005 	stb	r2,0(r20)
				size = 1;
 200ed58:	00800044 	movi	r2,1
 200ed5c:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 200ed60:	e03fc705 	stb	zero,-228(fp)
			break;
 200ed64:	0001c806 	br	200f488 <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 200ed68:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200ed6c:	9880080c 	andi	r2,r19,32
 200ed70:	10000826 	beq	r2,zero,200ed94 <___vfiprintf_internal_r+0x594>
 200ed74:	e13fe917 	ldw	r4,-92(fp)
 200ed78:	20800204 	addi	r2,r4,8
 200ed7c:	e0bfe915 	stw	r2,-92(fp)
 200ed80:	20800017 	ldw	r2,0(r4)
 200ed84:	20c00117 	ldw	r3,4(r4)
 200ed88:	e0bfea15 	stw	r2,-88(fp)
 200ed8c:	e0ffeb15 	stw	r3,-84(fp)
 200ed90:	00001e06 	br	200ee0c <___vfiprintf_internal_r+0x60c>
 200ed94:	9880040c 	andi	r2,r19,16
 200ed98:	10000826 	beq	r2,zero,200edbc <___vfiprintf_internal_r+0x5bc>
 200ed9c:	e0bfe917 	ldw	r2,-92(fp)
 200eda0:	10c00104 	addi	r3,r2,4
 200eda4:	e0ffe915 	stw	r3,-92(fp)
 200eda8:	10800017 	ldw	r2,0(r2)
 200edac:	e0bfea15 	stw	r2,-88(fp)
 200edb0:	1005d7fa 	srai	r2,r2,31
 200edb4:	e0bfeb15 	stw	r2,-84(fp)
 200edb8:	00001406 	br	200ee0c <___vfiprintf_internal_r+0x60c>
 200edbc:	9880100c 	andi	r2,r19,64
 200edc0:	10000b26 	beq	r2,zero,200edf0 <___vfiprintf_internal_r+0x5f0>
 200edc4:	e0bfe917 	ldw	r2,-92(fp)
 200edc8:	10c00104 	addi	r3,r2,4
 200edcc:	e0ffe915 	stw	r3,-92(fp)
 200edd0:	10800017 	ldw	r2,0(r2)
 200edd4:	10bfffcc 	andi	r2,r2,65535
 200edd8:	10a0001c 	xori	r2,r2,32768
 200eddc:	10a00004 	addi	r2,r2,-32768
 200ede0:	e0bfea15 	stw	r2,-88(fp)
 200ede4:	1005d7fa 	srai	r2,r2,31
 200ede8:	e0bfeb15 	stw	r2,-84(fp)
 200edec:	00000706 	br	200ee0c <___vfiprintf_internal_r+0x60c>
 200edf0:	e0bfe917 	ldw	r2,-92(fp)
 200edf4:	10c00104 	addi	r3,r2,4
 200edf8:	e0ffe915 	stw	r3,-92(fp)
 200edfc:	10800017 	ldw	r2,0(r2)
 200ee00:	e0bfea15 	stw	r2,-88(fp)
 200ee04:	1005d7fa 	srai	r2,r2,31
 200ee08:	e0bfeb15 	stw	r2,-84(fp)
 200ee0c:	e0bfea17 	ldw	r2,-88(fp)
 200ee10:	e0bfbc15 	stw	r2,-272(fp)
 200ee14:	e0ffeb17 	ldw	r3,-84(fp)
 200ee18:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 200ee1c:	e0bfbc17 	ldw	r2,-272(fp)
 200ee20:	e0ffbd17 	ldw	r3,-268(fp)
 200ee24:	18000d0e 	bge	r3,zero,200ee5c <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 200ee28:	000d883a 	mov	r6,zero
 200ee2c:	000f883a 	mov	r7,zero
 200ee30:	e13fbc17 	ldw	r4,-272(fp)
 200ee34:	e17fbd17 	ldw	r5,-268(fp)
 200ee38:	3105c83a 	sub	r2,r6,r4
 200ee3c:	3091803a 	cmpltu	r8,r6,r2
 200ee40:	3947c83a 	sub	r3,r7,r5
 200ee44:	1a09c83a 	sub	r4,r3,r8
 200ee48:	2007883a 	mov	r3,r4
 200ee4c:	e0bfbc15 	stw	r2,-272(fp)
 200ee50:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 200ee54:	00800b44 	movi	r2,45
 200ee58:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 200ee5c:	00800044 	movi	r2,1
 200ee60:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 200ee64:	0000f806 	br	200f248 <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 200ee68:	9880080c 	andi	r2,r19,32
 200ee6c:	10000d26 	beq	r2,zero,200eea4 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 200ee70:	e0bfe917 	ldw	r2,-92(fp)
 200ee74:	10c00104 	addi	r3,r2,4
 200ee78:	e0ffe915 	stw	r3,-92(fp)
 200ee7c:	10800017 	ldw	r2,0(r2)
 200ee80:	e0ffb917 	ldw	r3,-284(fp)
 200ee84:	e0fff015 	stw	r3,-64(fp)
 200ee88:	1807d7fa 	srai	r3,r3,31
 200ee8c:	e0fff115 	stw	r3,-60(fp)
 200ee90:	e0fff017 	ldw	r3,-64(fp)
 200ee94:	10c00015 	stw	r3,0(r2)
 200ee98:	e0fff117 	ldw	r3,-60(fp)
 200ee9c:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200eea0:	0002c306 	br	200f9b0 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200eea4:	9880040c 	andi	r2,r19,16
 200eea8:	10000726 	beq	r2,zero,200eec8 <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200eeac:	e0bfe917 	ldw	r2,-92(fp)
 200eeb0:	10c00104 	addi	r3,r2,4
 200eeb4:	e0ffe915 	stw	r3,-92(fp)
 200eeb8:	10800017 	ldw	r2,0(r2)
 200eebc:	e0ffb917 	ldw	r3,-284(fp)
 200eec0:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200eec4:	0002ba06 	br	200f9b0 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 200eec8:	9880100c 	andi	r2,r19,64
 200eecc:	10000726 	beq	r2,zero,200eeec <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 200eed0:	e0bfe917 	ldw	r2,-92(fp)
 200eed4:	10c00104 	addi	r3,r2,4
 200eed8:	e0ffe915 	stw	r3,-92(fp)
 200eedc:	10800017 	ldw	r2,0(r2)
 200eee0:	e0ffb917 	ldw	r3,-284(fp)
 200eee4:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200eee8:	0002b106 	br	200f9b0 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200eeec:	e0bfe917 	ldw	r2,-92(fp)
 200eef0:	10c00104 	addi	r3,r2,4
 200eef4:	e0ffe915 	stw	r3,-92(fp)
 200eef8:	10800017 	ldw	r2,0(r2)
 200eefc:	e0ffb917 	ldw	r3,-284(fp)
 200ef00:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200ef04:	0002aa06 	br	200f9b0 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 200ef08:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 200ef0c:	9880080c 	andi	r2,r19,32
 200ef10:	10000626 	beq	r2,zero,200ef2c <___vfiprintf_internal_r+0x72c>
 200ef14:	e0bfe917 	ldw	r2,-92(fp)
 200ef18:	10c00204 	addi	r3,r2,8
 200ef1c:	e0ffe915 	stw	r3,-92(fp)
 200ef20:	15800017 	ldw	r22,0(r2)
 200ef24:	15c00117 	ldw	r23,4(r2)
 200ef28:	00001c06 	br	200ef9c <___vfiprintf_internal_r+0x79c>
 200ef2c:	9880040c 	andi	r2,r19,16
 200ef30:	10000726 	beq	r2,zero,200ef50 <___vfiprintf_internal_r+0x750>
 200ef34:	e0bfe917 	ldw	r2,-92(fp)
 200ef38:	10c00104 	addi	r3,r2,4
 200ef3c:	e0ffe915 	stw	r3,-92(fp)
 200ef40:	10800017 	ldw	r2,0(r2)
 200ef44:	102d883a 	mov	r22,r2
 200ef48:	002f883a 	mov	r23,zero
 200ef4c:	00001306 	br	200ef9c <___vfiprintf_internal_r+0x79c>
 200ef50:	9880100c 	andi	r2,r19,64
 200ef54:	10000b26 	beq	r2,zero,200ef84 <___vfiprintf_internal_r+0x784>
 200ef58:	e0bfe917 	ldw	r2,-92(fp)
 200ef5c:	10c00104 	addi	r3,r2,4
 200ef60:	e0ffe915 	stw	r3,-92(fp)
 200ef64:	10800017 	ldw	r2,0(r2)
 200ef68:	e0bff215 	stw	r2,-56(fp)
 200ef6c:	e03ff315 	stw	zero,-52(fp)
 200ef70:	e0bff217 	ldw	r2,-56(fp)
 200ef74:	15bfffcc 	andi	r22,r2,65535
 200ef78:	e0fff317 	ldw	r3,-52(fp)
 200ef7c:	182e703a 	and	r23,r3,zero
 200ef80:	00000606 	br	200ef9c <___vfiprintf_internal_r+0x79c>
 200ef84:	e0bfe917 	ldw	r2,-92(fp)
 200ef88:	10c00104 	addi	r3,r2,4
 200ef8c:	e0ffe915 	stw	r3,-92(fp)
 200ef90:	10800017 	ldw	r2,0(r2)
 200ef94:	102d883a 	mov	r22,r2
 200ef98:	002f883a 	mov	r23,zero
 200ef9c:	e5bfbc15 	stw	r22,-272(fp)
 200efa0:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 200efa4:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 200efa8:	0000a606 	br	200f244 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200efac:	e0bfe917 	ldw	r2,-92(fp)
 200efb0:	10c00104 	addi	r3,r2,4
 200efb4:	e0ffe915 	stw	r3,-92(fp)
 200efb8:	10800017 	ldw	r2,0(r2)
 200efbc:	e0bfbc15 	stw	r2,-272(fp)
 200efc0:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 200efc4:	00800084 	movi	r2,2
 200efc8:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 200efcc:	008080b4 	movhi	r2,514
 200efd0:	10b2c604 	addi	r2,r2,-13544
 200efd4:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 200efd8:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200efdc:	00800c04 	movi	r2,48
 200efe0:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200efe4:	04401e04 	movi	r17,120
 200efe8:	00801e04 	movi	r2,120
 200efec:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 200eff0:	00009406 	br	200f244 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200eff4:	e0bfe917 	ldw	r2,-92(fp)
 200eff8:	10c00104 	addi	r3,r2,4
 200effc:	e0ffe915 	stw	r3,-92(fp)
 200f000:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200f004:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 200f008:	a000081e 	bne	r20,zero,200f02c <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 200f00c:	050080b4 	movhi	r20,514
 200f010:	a532cb04 	addi	r20,r20,-13524
				size = ((unsigned) prec > 6U) ? 6 : prec;
 200f014:	e0bfbb17 	ldw	r2,-276(fp)
 200f018:	10c001f0 	cmpltui	r3,r2,7
 200f01c:	1800011e 	bne	r3,zero,200f024 <___vfiprintf_internal_r+0x824>
 200f020:	00800184 	movi	r2,6
 200f024:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200f028:	00011706 	br	200f488 <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 200f02c:	e0bfbb17 	ldw	r2,-276(fp)
 200f030:	10001016 	blt	r2,zero,200f074 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 200f034:	e0bfbb17 	ldw	r2,-276(fp)
 200f038:	100d883a 	mov	r6,r2
 200f03c:	000b883a 	mov	r5,zero
 200f040:	a009883a 	mov	r4,r20
 200f044:	200b3f80 	call	200b3f8 <memchr>
 200f048:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 200f04c:	e0bfc617 	ldw	r2,-232(fp)
 200f050:	10000526 	beq	r2,zero,200f068 <___vfiprintf_internal_r+0x868>
					size = p - cp;
 200f054:	e0bfc617 	ldw	r2,-232(fp)
 200f058:	a007883a 	mov	r3,r20
 200f05c:	10c5c83a 	sub	r2,r2,r3
 200f060:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200f064:	00010806 	br	200f488 <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 200f068:	e0bfbb17 	ldw	r2,-276(fp)
 200f06c:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 200f070:	00010506 	br	200f488 <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 200f074:	a009883a 	mov	r4,r20
 200f078:	200417c0 	call	200417c <strlen>
 200f07c:	e0bfc115 	stw	r2,-252(fp)

			break;
 200f080:	00010106 	br	200f488 <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 200f084:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 200f088:	9880080c 	andi	r2,r19,32
 200f08c:	10000826 	beq	r2,zero,200f0b0 <___vfiprintf_internal_r+0x8b0>
 200f090:	e0bfe917 	ldw	r2,-92(fp)
 200f094:	10c00204 	addi	r3,r2,8
 200f098:	e0ffe915 	stw	r3,-92(fp)
 200f09c:	10c00017 	ldw	r3,0(r2)
 200f0a0:	e0ffec15 	stw	r3,-80(fp)
 200f0a4:	10c00117 	ldw	r3,4(r2)
 200f0a8:	e0ffed15 	stw	r3,-76(fp)
 200f0ac:	00001e06 	br	200f128 <___vfiprintf_internal_r+0x928>
 200f0b0:	9880040c 	andi	r2,r19,16
 200f0b4:	10000726 	beq	r2,zero,200f0d4 <___vfiprintf_internal_r+0x8d4>
 200f0b8:	e0bfe917 	ldw	r2,-92(fp)
 200f0bc:	10c00104 	addi	r3,r2,4
 200f0c0:	e0ffe915 	stw	r3,-92(fp)
 200f0c4:	10800017 	ldw	r2,0(r2)
 200f0c8:	e0bfec15 	stw	r2,-80(fp)
 200f0cc:	e03fed15 	stw	zero,-76(fp)
 200f0d0:	00001506 	br	200f128 <___vfiprintf_internal_r+0x928>
 200f0d4:	9880100c 	andi	r2,r19,64
 200f0d8:	10000d26 	beq	r2,zero,200f110 <___vfiprintf_internal_r+0x910>
 200f0dc:	e0bfe917 	ldw	r2,-92(fp)
 200f0e0:	10c00104 	addi	r3,r2,4
 200f0e4:	e0ffe915 	stw	r3,-92(fp)
 200f0e8:	10800017 	ldw	r2,0(r2)
 200f0ec:	e0bff415 	stw	r2,-48(fp)
 200f0f0:	e03ff515 	stw	zero,-44(fp)
 200f0f4:	e0bff417 	ldw	r2,-48(fp)
 200f0f8:	10bfffcc 	andi	r2,r2,65535
 200f0fc:	e0bfec15 	stw	r2,-80(fp)
 200f100:	e0fff517 	ldw	r3,-44(fp)
 200f104:	1806703a 	and	r3,r3,zero
 200f108:	e0ffed15 	stw	r3,-76(fp)
 200f10c:	00000606 	br	200f128 <___vfiprintf_internal_r+0x928>
 200f110:	e0bfe917 	ldw	r2,-92(fp)
 200f114:	10c00104 	addi	r3,r2,4
 200f118:	e0ffe915 	stw	r3,-92(fp)
 200f11c:	10800017 	ldw	r2,0(r2)
 200f120:	e0bfec15 	stw	r2,-80(fp)
 200f124:	e03fed15 	stw	zero,-76(fp)
 200f128:	e0bfec17 	ldw	r2,-80(fp)
 200f12c:	e0bfbc15 	stw	r2,-272(fp)
 200f130:	e0ffed17 	ldw	r3,-76(fp)
 200f134:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 200f138:	00800044 	movi	r2,1
 200f13c:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 200f140:	00004006 	br	200f244 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 200f144:	008080b4 	movhi	r2,514
 200f148:	10b2cd04 	addi	r2,r2,-13516
 200f14c:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 200f150:	00000306 	br	200f160 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 200f154:	008080b4 	movhi	r2,514
 200f158:	10b2c604 	addi	r2,r2,-13544
 200f15c:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 200f160:	9880080c 	andi	r2,r19,32
 200f164:	10000826 	beq	r2,zero,200f188 <___vfiprintf_internal_r+0x988>
 200f168:	e0bfe917 	ldw	r2,-92(fp)
 200f16c:	10c00204 	addi	r3,r2,8
 200f170:	e0ffe915 	stw	r3,-92(fp)
 200f174:	10c00017 	ldw	r3,0(r2)
 200f178:	e0ffee15 	stw	r3,-72(fp)
 200f17c:	10c00117 	ldw	r3,4(r2)
 200f180:	e0ffef15 	stw	r3,-68(fp)
 200f184:	00001e06 	br	200f200 <___vfiprintf_internal_r+0xa00>
 200f188:	9880040c 	andi	r2,r19,16
 200f18c:	10000726 	beq	r2,zero,200f1ac <___vfiprintf_internal_r+0x9ac>
 200f190:	e0bfe917 	ldw	r2,-92(fp)
 200f194:	10c00104 	addi	r3,r2,4
 200f198:	e0ffe915 	stw	r3,-92(fp)
 200f19c:	10800017 	ldw	r2,0(r2)
 200f1a0:	e0bfee15 	stw	r2,-72(fp)
 200f1a4:	e03fef15 	stw	zero,-68(fp)
 200f1a8:	00001506 	br	200f200 <___vfiprintf_internal_r+0xa00>
 200f1ac:	9880100c 	andi	r2,r19,64
 200f1b0:	10000d26 	beq	r2,zero,200f1e8 <___vfiprintf_internal_r+0x9e8>
 200f1b4:	e0bfe917 	ldw	r2,-92(fp)
 200f1b8:	10c00104 	addi	r3,r2,4
 200f1bc:	e0ffe915 	stw	r3,-92(fp)
 200f1c0:	10800017 	ldw	r2,0(r2)
 200f1c4:	e0bff615 	stw	r2,-40(fp)
 200f1c8:	e03ff715 	stw	zero,-36(fp)
 200f1cc:	e0bff617 	ldw	r2,-40(fp)
 200f1d0:	10bfffcc 	andi	r2,r2,65535
 200f1d4:	e0bfee15 	stw	r2,-72(fp)
 200f1d8:	e0fff717 	ldw	r3,-36(fp)
 200f1dc:	1806703a 	and	r3,r3,zero
 200f1e0:	e0ffef15 	stw	r3,-68(fp)
 200f1e4:	00000606 	br	200f200 <___vfiprintf_internal_r+0xa00>
 200f1e8:	e0bfe917 	ldw	r2,-92(fp)
 200f1ec:	10c00104 	addi	r3,r2,4
 200f1f0:	e0ffe915 	stw	r3,-92(fp)
 200f1f4:	10800017 	ldw	r2,0(r2)
 200f1f8:	e0bfee15 	stw	r2,-72(fp)
 200f1fc:	e03fef15 	stw	zero,-68(fp)
 200f200:	e0bfee17 	ldw	r2,-72(fp)
 200f204:	e0bfbc15 	stw	r2,-272(fp)
 200f208:	e0ffef17 	ldw	r3,-68(fp)
 200f20c:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 200f210:	00800084 	movi	r2,2
 200f214:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 200f218:	9880004c 	andi	r2,r19,1
 200f21c:	10000926 	beq	r2,zero,200f244 <___vfiprintf_internal_r+0xa44>
 200f220:	e0bfbc17 	ldw	r2,-272(fp)
 200f224:	e0ffbd17 	ldw	r3,-268(fp)
 200f228:	10c4b03a 	or	r2,r2,r3
 200f22c:	10000526 	beq	r2,zero,200f244 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 200f230:	00800c04 	movi	r2,48
 200f234:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200f238:	8805883a 	mov	r2,r17
 200f23c:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200f240:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 200f244:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200f248:	e0bfbb17 	ldw	r2,-276(fp)
 200f24c:	e0bfbf15 	stw	r2,-260(fp)
 200f250:	e0bfbf17 	ldw	r2,-260(fp)
 200f254:	10000216 	blt	r2,zero,200f260 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 200f258:	00bfdfc4 	movi	r2,-129
 200f25c:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200f260:	e53fdb04 	addi	r20,fp,-148
 200f264:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 200f268:	e0bfbc17 	ldw	r2,-272(fp)
 200f26c:	e0ffbd17 	ldw	r3,-268(fp)
 200f270:	10c4b03a 	or	r2,r2,r3
 200f274:	1000021e 	bne	r2,zero,200f280 <___vfiprintf_internal_r+0xa80>
 200f278:	e0bfbb17 	ldw	r2,-276(fp)
 200f27c:	10006c26 	beq	r2,zero,200f430 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 200f280:	e0bfbe03 	ldbu	r2,-264(fp)
 200f284:	10c00060 	cmpeqi	r3,r2,1
 200f288:	1800211e 	bne	r3,zero,200f310 <___vfiprintf_internal_r+0xb10>
 200f28c:	10c000a0 	cmpeqi	r3,r2,2
 200f290:	1800491e 	bne	r3,zero,200f3b8 <___vfiprintf_internal_r+0xbb8>
 200f294:	10005d1e 	bne	r2,zero,200f40c <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200f298:	a53fffc4 	addi	r20,r20,-1
 200f29c:	e0bfbc17 	ldw	r2,-272(fp)
 200f2a0:	108001cc 	andi	r2,r2,7
 200f2a4:	10800c04 	addi	r2,r2,48
 200f2a8:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 200f2ac:	e0bfbd17 	ldw	r2,-268(fp)
 200f2b0:	1004977a 	slli	r2,r2,29
 200f2b4:	e0ffbc17 	ldw	r3,-272(fp)
 200f2b8:	1806d0fa 	srli	r3,r3,3
 200f2bc:	1884b03a 	or	r2,r3,r2
 200f2c0:	e0bfbc15 	stw	r2,-272(fp)
 200f2c4:	e0bfbd17 	ldw	r2,-268(fp)
 200f2c8:	1004d0fa 	srli	r2,r2,3
 200f2cc:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200f2d0:	e0bfbc17 	ldw	r2,-272(fp)
 200f2d4:	e0ffbd17 	ldw	r3,-268(fp)
 200f2d8:	10c4b03a 	or	r2,r2,r3
 200f2dc:	103fee1e 	bne	r2,zero,200f298 <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200f2e0:	9880004c 	andi	r2,r19,1
 200f2e4:	10005026 	beq	r2,zero,200f428 <___vfiprintf_internal_r+0xc28>
 200f2e8:	a0800003 	ldbu	r2,0(r20)
 200f2ec:	10803fcc 	andi	r2,r2,255
 200f2f0:	1080201c 	xori	r2,r2,128
 200f2f4:	10bfe004 	addi	r2,r2,-128
 200f2f8:	10800c20 	cmpeqi	r2,r2,48
 200f2fc:	10004a1e 	bne	r2,zero,200f428 <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 200f300:	a53fffc4 	addi	r20,r20,-1
 200f304:	00800c04 	movi	r2,48
 200f308:	a0800005 	stb	r2,0(r20)
					break;
 200f30c:	00004606 	br	200f428 <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 200f310:	e0bfbd17 	ldw	r2,-268(fp)
 200f314:	10000a1e 	bne	r2,zero,200f340 <___vfiprintf_internal_r+0xb40>
 200f318:	e0bfbd17 	ldw	r2,-268(fp)
 200f31c:	1000031e 	bne	r2,zero,200f32c <___vfiprintf_internal_r+0xb2c>
 200f320:	e0bfbc17 	ldw	r2,-272(fp)
 200f324:	108002a8 	cmpgeui	r2,r2,10
 200f328:	1000051e 	bne	r2,zero,200f340 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 200f32c:	a53fffc4 	addi	r20,r20,-1
 200f330:	e0bfbc17 	ldw	r2,-272(fp)
 200f334:	10800c04 	addi	r2,r2,48
 200f338:	a0800005 	stb	r2,0(r20)
						break;
 200f33c:	00003b06 	br	200f42c <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 200f340:	a53fffc4 	addi	r20,r20,-1
 200f344:	e0bfbc17 	ldw	r2,-272(fp)
 200f348:	e0ffbd17 	ldw	r3,-268(fp)
 200f34c:	01800284 	movi	r6,10
 200f350:	000f883a 	mov	r7,zero
 200f354:	1009883a 	mov	r4,r2
 200f358:	180b883a 	mov	r5,r3
 200f35c:	2010c900 	call	2010c90 <__umoddi3>
 200f360:	1009883a 	mov	r4,r2
 200f364:	180b883a 	mov	r5,r3
 200f368:	2005883a 	mov	r2,r4
 200f36c:	2807883a 	mov	r3,r5
 200f370:	10800c04 	addi	r2,r2,48
 200f374:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200f378:	e0bfbc17 	ldw	r2,-272(fp)
 200f37c:	e0ffbd17 	ldw	r3,-268(fp)
 200f380:	01800284 	movi	r6,10
 200f384:	000f883a 	mov	r7,zero
 200f388:	1009883a 	mov	r4,r2
 200f38c:	180b883a 	mov	r5,r3
 200f390:	20107180 	call	2010718 <__udivdi3>
 200f394:	1009883a 	mov	r4,r2
 200f398:	180b883a 	mov	r5,r3
 200f39c:	e13fbc15 	stw	r4,-272(fp)
 200f3a0:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 200f3a4:	e0bfbc17 	ldw	r2,-272(fp)
 200f3a8:	e0ffbd17 	ldw	r3,-268(fp)
 200f3ac:	10c4b03a 	or	r2,r2,r3
 200f3b0:	103fe31e 	bne	r2,zero,200f340 <___vfiprintf_internal_r+0xb40>
					break;
 200f3b4:	00001d06 	br	200f42c <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200f3b8:	a53fffc4 	addi	r20,r20,-1
 200f3bc:	e0bfbc17 	ldw	r2,-272(fp)
 200f3c0:	108003cc 	andi	r2,r2,15
 200f3c4:	e0ffc217 	ldw	r3,-248(fp)
 200f3c8:	1885883a 	add	r2,r3,r2
 200f3cc:	10800003 	ldbu	r2,0(r2)
 200f3d0:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 200f3d4:	e0bfbd17 	ldw	r2,-268(fp)
 200f3d8:	1004973a 	slli	r2,r2,28
 200f3dc:	e0ffbc17 	ldw	r3,-272(fp)
 200f3e0:	1806d13a 	srli	r3,r3,4
 200f3e4:	1884b03a 	or	r2,r3,r2
 200f3e8:	e0bfbc15 	stw	r2,-272(fp)
 200f3ec:	e0bfbd17 	ldw	r2,-268(fp)
 200f3f0:	1004d13a 	srli	r2,r2,4
 200f3f4:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200f3f8:	e0bfbc17 	ldw	r2,-272(fp)
 200f3fc:	e0ffbd17 	ldw	r3,-268(fp)
 200f400:	10c4b03a 	or	r2,r2,r3
 200f404:	103fec1e 	bne	r2,zero,200f3b8 <___vfiprintf_internal_r+0xbb8>
					break;
 200f408:	00000806 	br	200f42c <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 200f40c:	050080b4 	movhi	r20,514
 200f410:	a532d204 	addi	r20,r20,-13496
					size = strlen (cp);
 200f414:	a009883a 	mov	r4,r20
 200f418:	200417c0 	call	200417c <strlen>
 200f41c:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 200f420:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 200f424:	00001806 	br	200f488 <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 200f428:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 200f42c:	00000706 	br	200f44c <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200f430:	e0bfbe03 	ldbu	r2,-264(fp)
 200f434:	1000051e 	bne	r2,zero,200f44c <___vfiprintf_internal_r+0xc4c>
 200f438:	9880004c 	andi	r2,r19,1
 200f43c:	10000326 	beq	r2,zero,200f44c <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 200f440:	a53fffc4 	addi	r20,r20,-1
 200f444:	00800c04 	movi	r2,48
 200f448:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 200f44c:	e0bfdb04 	addi	r2,fp,-148
 200f450:	10800a04 	addi	r2,r2,40
 200f454:	1007883a 	mov	r3,r2
 200f458:	a005883a 	mov	r2,r20
 200f45c:	1885c83a 	sub	r2,r3,r2
 200f460:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 200f464:	00000806 	br	200f488 <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 200f468:	88015426 	beq	r17,zero,200f9bc <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 200f46c:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 200f470:	8805883a 	mov	r2,r17
 200f474:	a0800005 	stb	r2,0(r20)
			size = 1;
 200f478:	00800044 	movi	r2,1
 200f47c:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 200f480:	e03fc705 	stb	zero,-228(fp)
			break;
 200f484:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 200f488:	e0ffbf17 	ldw	r3,-260(fp)
 200f48c:	e0bfc117 	ldw	r2,-252(fp)
 200f490:	10c0010e 	bge	r2,r3,200f498 <___vfiprintf_internal_r+0xc98>
 200f494:	1805883a 	mov	r2,r3
 200f498:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 200f49c:	e0bfc703 	ldbu	r2,-228(fp)
 200f4a0:	10803fcc 	andi	r2,r2,255
 200f4a4:	1080201c 	xori	r2,r2,128
 200f4a8:	10bfe004 	addi	r2,r2,-128
 200f4ac:	10000326 	beq	r2,zero,200f4bc <___vfiprintf_internal_r+0xcbc>
			realsz++;
 200f4b0:	e0bfc017 	ldw	r2,-256(fp)
 200f4b4:	10800044 	addi	r2,r2,1
 200f4b8:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 200f4bc:	9880008c 	andi	r2,r19,2
 200f4c0:	10000326 	beq	r2,zero,200f4d0 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 200f4c4:	e0bfc017 	ldw	r2,-256(fp)
 200f4c8:	10800084 	addi	r2,r2,2
 200f4cc:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 200f4d0:	9880210c 	andi	r2,r19,132
 200f4d4:	1000351e 	bne	r2,zero,200f5ac <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 200f4d8:	e0ffba17 	ldw	r3,-280(fp)
 200f4dc:	e0bfc017 	ldw	r2,-256(fp)
 200f4e0:	18a1c83a 	sub	r16,r3,r2
 200f4e4:	0400310e 	bge	zero,r16,200f5ac <___vfiprintf_internal_r+0xdac>
 200f4e8:	00001706 	br	200f548 <___vfiprintf_internal_r+0xd48>
 200f4ec:	008080b4 	movhi	r2,514
 200f4f0:	10b2d884 	addi	r2,r2,-13470
 200f4f4:	90800015 	stw	r2,0(r18)
 200f4f8:	00800404 	movi	r2,16
 200f4fc:	90800115 	stw	r2,4(r18)
 200f500:	e0bfca17 	ldw	r2,-216(fp)
 200f504:	10800404 	addi	r2,r2,16
 200f508:	e0bfca15 	stw	r2,-216(fp)
 200f50c:	94800204 	addi	r18,r18,8
 200f510:	e0bfc917 	ldw	r2,-220(fp)
 200f514:	10800044 	addi	r2,r2,1
 200f518:	e0bfc915 	stw	r2,-220(fp)
 200f51c:	e0bfc917 	ldw	r2,-220(fp)
 200f520:	10800210 	cmplti	r2,r2,8
 200f524:	1000071e 	bne	r2,zero,200f544 <___vfiprintf_internal_r+0xd44>
 200f528:	e0bfc804 	addi	r2,fp,-224
 200f52c:	100d883a 	mov	r6,r2
 200f530:	e17fe717 	ldw	r5,-100(fp)
 200f534:	e13fe617 	ldw	r4,-104(fp)
 200f538:	200e5840 	call	200e584 <__sprint_r>
 200f53c:	10012d1e 	bne	r2,zero,200f9f4 <___vfiprintf_internal_r+0x11f4>
 200f540:	e4bfcb04 	addi	r18,fp,-212
 200f544:	843ffc04 	addi	r16,r16,-16
 200f548:	80800448 	cmpgei	r2,r16,17
 200f54c:	103fe71e 	bne	r2,zero,200f4ec <___vfiprintf_internal_r+0xcec>
 200f550:	008080b4 	movhi	r2,514
 200f554:	10b2d884 	addi	r2,r2,-13470
 200f558:	90800015 	stw	r2,0(r18)
 200f55c:	8005883a 	mov	r2,r16
 200f560:	90800115 	stw	r2,4(r18)
 200f564:	e0bfca17 	ldw	r2,-216(fp)
 200f568:	8007883a 	mov	r3,r16
 200f56c:	10c5883a 	add	r2,r2,r3
 200f570:	e0bfca15 	stw	r2,-216(fp)
 200f574:	94800204 	addi	r18,r18,8
 200f578:	e0bfc917 	ldw	r2,-220(fp)
 200f57c:	10800044 	addi	r2,r2,1
 200f580:	e0bfc915 	stw	r2,-220(fp)
 200f584:	e0bfc917 	ldw	r2,-220(fp)
 200f588:	10800210 	cmplti	r2,r2,8
 200f58c:	1000071e 	bne	r2,zero,200f5ac <___vfiprintf_internal_r+0xdac>
 200f590:	e0bfc804 	addi	r2,fp,-224
 200f594:	100d883a 	mov	r6,r2
 200f598:	e17fe717 	ldw	r5,-100(fp)
 200f59c:	e13fe617 	ldw	r4,-104(fp)
 200f5a0:	200e5840 	call	200e584 <__sprint_r>
 200f5a4:	1001151e 	bne	r2,zero,200f9fc <___vfiprintf_internal_r+0x11fc>
 200f5a8:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 200f5ac:	e0bfc703 	ldbu	r2,-228(fp)
 200f5b0:	10803fcc 	andi	r2,r2,255
 200f5b4:	1080201c 	xori	r2,r2,128
 200f5b8:	10bfe004 	addi	r2,r2,-128
 200f5bc:	10001526 	beq	r2,zero,200f614 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 200f5c0:	e0bfc704 	addi	r2,fp,-228
 200f5c4:	90800015 	stw	r2,0(r18)
 200f5c8:	00800044 	movi	r2,1
 200f5cc:	90800115 	stw	r2,4(r18)
 200f5d0:	e0bfca17 	ldw	r2,-216(fp)
 200f5d4:	10800044 	addi	r2,r2,1
 200f5d8:	e0bfca15 	stw	r2,-216(fp)
 200f5dc:	94800204 	addi	r18,r18,8
 200f5e0:	e0bfc917 	ldw	r2,-220(fp)
 200f5e4:	10800044 	addi	r2,r2,1
 200f5e8:	e0bfc915 	stw	r2,-220(fp)
 200f5ec:	e0bfc917 	ldw	r2,-220(fp)
 200f5f0:	10800210 	cmplti	r2,r2,8
 200f5f4:	1000071e 	bne	r2,zero,200f614 <___vfiprintf_internal_r+0xe14>
 200f5f8:	e0bfc804 	addi	r2,fp,-224
 200f5fc:	100d883a 	mov	r6,r2
 200f600:	e17fe717 	ldw	r5,-100(fp)
 200f604:	e13fe617 	ldw	r4,-104(fp)
 200f608:	200e5840 	call	200e584 <__sprint_r>
 200f60c:	1000fd1e 	bne	r2,zero,200fa04 <___vfiprintf_internal_r+0x1204>
 200f610:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 200f614:	9880008c 	andi	r2,r19,2
 200f618:	10001526 	beq	r2,zero,200f670 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 200f61c:	e0bfe504 	addi	r2,fp,-108
 200f620:	90800015 	stw	r2,0(r18)
 200f624:	00800084 	movi	r2,2
 200f628:	90800115 	stw	r2,4(r18)
 200f62c:	e0bfca17 	ldw	r2,-216(fp)
 200f630:	10800084 	addi	r2,r2,2
 200f634:	e0bfca15 	stw	r2,-216(fp)
 200f638:	94800204 	addi	r18,r18,8
 200f63c:	e0bfc917 	ldw	r2,-220(fp)
 200f640:	10800044 	addi	r2,r2,1
 200f644:	e0bfc915 	stw	r2,-220(fp)
 200f648:	e0bfc917 	ldw	r2,-220(fp)
 200f64c:	10800210 	cmplti	r2,r2,8
 200f650:	1000071e 	bne	r2,zero,200f670 <___vfiprintf_internal_r+0xe70>
 200f654:	e0bfc804 	addi	r2,fp,-224
 200f658:	100d883a 	mov	r6,r2
 200f65c:	e17fe717 	ldw	r5,-100(fp)
 200f660:	e13fe617 	ldw	r4,-104(fp)
 200f664:	200e5840 	call	200e584 <__sprint_r>
 200f668:	1000e81e 	bne	r2,zero,200fa0c <___vfiprintf_internal_r+0x120c>
 200f66c:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 200f670:	9880210c 	andi	r2,r19,132
 200f674:	10802018 	cmpnei	r2,r2,128
 200f678:	1000351e 	bne	r2,zero,200f750 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 200f67c:	e0ffba17 	ldw	r3,-280(fp)
 200f680:	e0bfc017 	ldw	r2,-256(fp)
 200f684:	18a1c83a 	sub	r16,r3,r2
 200f688:	0400310e 	bge	zero,r16,200f750 <___vfiprintf_internal_r+0xf50>
 200f68c:	00001706 	br	200f6ec <___vfiprintf_internal_r+0xeec>
 200f690:	008080b4 	movhi	r2,514
 200f694:	10b2dc84 	addi	r2,r2,-13454
 200f698:	90800015 	stw	r2,0(r18)
 200f69c:	00800404 	movi	r2,16
 200f6a0:	90800115 	stw	r2,4(r18)
 200f6a4:	e0bfca17 	ldw	r2,-216(fp)
 200f6a8:	10800404 	addi	r2,r2,16
 200f6ac:	e0bfca15 	stw	r2,-216(fp)
 200f6b0:	94800204 	addi	r18,r18,8
 200f6b4:	e0bfc917 	ldw	r2,-220(fp)
 200f6b8:	10800044 	addi	r2,r2,1
 200f6bc:	e0bfc915 	stw	r2,-220(fp)
 200f6c0:	e0bfc917 	ldw	r2,-220(fp)
 200f6c4:	10800210 	cmplti	r2,r2,8
 200f6c8:	1000071e 	bne	r2,zero,200f6e8 <___vfiprintf_internal_r+0xee8>
 200f6cc:	e0bfc804 	addi	r2,fp,-224
 200f6d0:	100d883a 	mov	r6,r2
 200f6d4:	e17fe717 	ldw	r5,-100(fp)
 200f6d8:	e13fe617 	ldw	r4,-104(fp)
 200f6dc:	200e5840 	call	200e584 <__sprint_r>
 200f6e0:	1000cc1e 	bne	r2,zero,200fa14 <___vfiprintf_internal_r+0x1214>
 200f6e4:	e4bfcb04 	addi	r18,fp,-212
 200f6e8:	843ffc04 	addi	r16,r16,-16
 200f6ec:	80800448 	cmpgei	r2,r16,17
 200f6f0:	103fe71e 	bne	r2,zero,200f690 <___vfiprintf_internal_r+0xe90>
 200f6f4:	008080b4 	movhi	r2,514
 200f6f8:	10b2dc84 	addi	r2,r2,-13454
 200f6fc:	90800015 	stw	r2,0(r18)
 200f700:	8005883a 	mov	r2,r16
 200f704:	90800115 	stw	r2,4(r18)
 200f708:	e0bfca17 	ldw	r2,-216(fp)
 200f70c:	8007883a 	mov	r3,r16
 200f710:	10c5883a 	add	r2,r2,r3
 200f714:	e0bfca15 	stw	r2,-216(fp)
 200f718:	94800204 	addi	r18,r18,8
 200f71c:	e0bfc917 	ldw	r2,-220(fp)
 200f720:	10800044 	addi	r2,r2,1
 200f724:	e0bfc915 	stw	r2,-220(fp)
 200f728:	e0bfc917 	ldw	r2,-220(fp)
 200f72c:	10800210 	cmplti	r2,r2,8
 200f730:	1000071e 	bne	r2,zero,200f750 <___vfiprintf_internal_r+0xf50>
 200f734:	e0bfc804 	addi	r2,fp,-224
 200f738:	100d883a 	mov	r6,r2
 200f73c:	e17fe717 	ldw	r5,-100(fp)
 200f740:	e13fe617 	ldw	r4,-104(fp)
 200f744:	200e5840 	call	200e584 <__sprint_r>
 200f748:	1000b41e 	bne	r2,zero,200fa1c <___vfiprintf_internal_r+0x121c>
 200f74c:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200f750:	e0ffbf17 	ldw	r3,-260(fp)
 200f754:	e0bfc117 	ldw	r2,-252(fp)
 200f758:	18a1c83a 	sub	r16,r3,r2
 200f75c:	0400310e 	bge	zero,r16,200f824 <___vfiprintf_internal_r+0x1024>
 200f760:	00001706 	br	200f7c0 <___vfiprintf_internal_r+0xfc0>
 200f764:	008080b4 	movhi	r2,514
 200f768:	10b2dc84 	addi	r2,r2,-13454
 200f76c:	90800015 	stw	r2,0(r18)
 200f770:	00800404 	movi	r2,16
 200f774:	90800115 	stw	r2,4(r18)
 200f778:	e0bfca17 	ldw	r2,-216(fp)
 200f77c:	10800404 	addi	r2,r2,16
 200f780:	e0bfca15 	stw	r2,-216(fp)
 200f784:	94800204 	addi	r18,r18,8
 200f788:	e0bfc917 	ldw	r2,-220(fp)
 200f78c:	10800044 	addi	r2,r2,1
 200f790:	e0bfc915 	stw	r2,-220(fp)
 200f794:	e0bfc917 	ldw	r2,-220(fp)
 200f798:	10800210 	cmplti	r2,r2,8
 200f79c:	1000071e 	bne	r2,zero,200f7bc <___vfiprintf_internal_r+0xfbc>
 200f7a0:	e0bfc804 	addi	r2,fp,-224
 200f7a4:	100d883a 	mov	r6,r2
 200f7a8:	e17fe717 	ldw	r5,-100(fp)
 200f7ac:	e13fe617 	ldw	r4,-104(fp)
 200f7b0:	200e5840 	call	200e584 <__sprint_r>
 200f7b4:	10009b1e 	bne	r2,zero,200fa24 <___vfiprintf_internal_r+0x1224>
 200f7b8:	e4bfcb04 	addi	r18,fp,-212
 200f7bc:	843ffc04 	addi	r16,r16,-16
 200f7c0:	80800448 	cmpgei	r2,r16,17
 200f7c4:	103fe71e 	bne	r2,zero,200f764 <___vfiprintf_internal_r+0xf64>
 200f7c8:	008080b4 	movhi	r2,514
 200f7cc:	10b2dc84 	addi	r2,r2,-13454
 200f7d0:	90800015 	stw	r2,0(r18)
 200f7d4:	8005883a 	mov	r2,r16
 200f7d8:	90800115 	stw	r2,4(r18)
 200f7dc:	e0bfca17 	ldw	r2,-216(fp)
 200f7e0:	8007883a 	mov	r3,r16
 200f7e4:	10c5883a 	add	r2,r2,r3
 200f7e8:	e0bfca15 	stw	r2,-216(fp)
 200f7ec:	94800204 	addi	r18,r18,8
 200f7f0:	e0bfc917 	ldw	r2,-220(fp)
 200f7f4:	10800044 	addi	r2,r2,1
 200f7f8:	e0bfc915 	stw	r2,-220(fp)
 200f7fc:	e0bfc917 	ldw	r2,-220(fp)
 200f800:	10800210 	cmplti	r2,r2,8
 200f804:	1000071e 	bne	r2,zero,200f824 <___vfiprintf_internal_r+0x1024>
 200f808:	e0bfc804 	addi	r2,fp,-224
 200f80c:	100d883a 	mov	r6,r2
 200f810:	e17fe717 	ldw	r5,-100(fp)
 200f814:	e13fe617 	ldw	r4,-104(fp)
 200f818:	200e5840 	call	200e584 <__sprint_r>
 200f81c:	1000831e 	bne	r2,zero,200fa2c <___vfiprintf_internal_r+0x122c>
 200f820:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 200f824:	95000015 	stw	r20,0(r18)
 200f828:	e0bfc117 	ldw	r2,-252(fp)
 200f82c:	90800115 	stw	r2,4(r18)
 200f830:	e0ffca17 	ldw	r3,-216(fp)
 200f834:	e0bfc117 	ldw	r2,-252(fp)
 200f838:	1885883a 	add	r2,r3,r2
 200f83c:	e0bfca15 	stw	r2,-216(fp)
 200f840:	94800204 	addi	r18,r18,8
 200f844:	e0bfc917 	ldw	r2,-220(fp)
 200f848:	10800044 	addi	r2,r2,1
 200f84c:	e0bfc915 	stw	r2,-220(fp)
 200f850:	e0bfc917 	ldw	r2,-220(fp)
 200f854:	10800210 	cmplti	r2,r2,8
 200f858:	1000071e 	bne	r2,zero,200f878 <___vfiprintf_internal_r+0x1078>
 200f85c:	e0bfc804 	addi	r2,fp,-224
 200f860:	100d883a 	mov	r6,r2
 200f864:	e17fe717 	ldw	r5,-100(fp)
 200f868:	e13fe617 	ldw	r4,-104(fp)
 200f86c:	200e5840 	call	200e584 <__sprint_r>
 200f870:	1000701e 	bne	r2,zero,200fa34 <___vfiprintf_internal_r+0x1234>
 200f874:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 200f878:	9880010c 	andi	r2,r19,4
 200f87c:	10003526 	beq	r2,zero,200f954 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 200f880:	e0ffba17 	ldw	r3,-280(fp)
 200f884:	e0bfc017 	ldw	r2,-256(fp)
 200f888:	18a1c83a 	sub	r16,r3,r2
 200f88c:	0400310e 	bge	zero,r16,200f954 <___vfiprintf_internal_r+0x1154>
 200f890:	00001706 	br	200f8f0 <___vfiprintf_internal_r+0x10f0>
 200f894:	008080b4 	movhi	r2,514
 200f898:	10b2d884 	addi	r2,r2,-13470
 200f89c:	90800015 	stw	r2,0(r18)
 200f8a0:	00800404 	movi	r2,16
 200f8a4:	90800115 	stw	r2,4(r18)
 200f8a8:	e0bfca17 	ldw	r2,-216(fp)
 200f8ac:	10800404 	addi	r2,r2,16
 200f8b0:	e0bfca15 	stw	r2,-216(fp)
 200f8b4:	94800204 	addi	r18,r18,8
 200f8b8:	e0bfc917 	ldw	r2,-220(fp)
 200f8bc:	10800044 	addi	r2,r2,1
 200f8c0:	e0bfc915 	stw	r2,-220(fp)
 200f8c4:	e0bfc917 	ldw	r2,-220(fp)
 200f8c8:	10800210 	cmplti	r2,r2,8
 200f8cc:	1000071e 	bne	r2,zero,200f8ec <___vfiprintf_internal_r+0x10ec>
 200f8d0:	e0bfc804 	addi	r2,fp,-224
 200f8d4:	100d883a 	mov	r6,r2
 200f8d8:	e17fe717 	ldw	r5,-100(fp)
 200f8dc:	e13fe617 	ldw	r4,-104(fp)
 200f8e0:	200e5840 	call	200e584 <__sprint_r>
 200f8e4:	1000551e 	bne	r2,zero,200fa3c <___vfiprintf_internal_r+0x123c>
 200f8e8:	e4bfcb04 	addi	r18,fp,-212
 200f8ec:	843ffc04 	addi	r16,r16,-16
 200f8f0:	80800448 	cmpgei	r2,r16,17
 200f8f4:	103fe71e 	bne	r2,zero,200f894 <___vfiprintf_internal_r+0x1094>
 200f8f8:	008080b4 	movhi	r2,514
 200f8fc:	10b2d884 	addi	r2,r2,-13470
 200f900:	90800015 	stw	r2,0(r18)
 200f904:	8005883a 	mov	r2,r16
 200f908:	90800115 	stw	r2,4(r18)
 200f90c:	e0bfca17 	ldw	r2,-216(fp)
 200f910:	8007883a 	mov	r3,r16
 200f914:	10c5883a 	add	r2,r2,r3
 200f918:	e0bfca15 	stw	r2,-216(fp)
 200f91c:	94800204 	addi	r18,r18,8
 200f920:	e0bfc917 	ldw	r2,-220(fp)
 200f924:	10800044 	addi	r2,r2,1
 200f928:	e0bfc915 	stw	r2,-220(fp)
 200f92c:	e0bfc917 	ldw	r2,-220(fp)
 200f930:	10800210 	cmplti	r2,r2,8
 200f934:	1000071e 	bne	r2,zero,200f954 <___vfiprintf_internal_r+0x1154>
 200f938:	e0bfc804 	addi	r2,fp,-224
 200f93c:	100d883a 	mov	r6,r2
 200f940:	e17fe717 	ldw	r5,-100(fp)
 200f944:	e13fe617 	ldw	r4,-104(fp)
 200f948:	200e5840 	call	200e584 <__sprint_r>
 200f94c:	10003d1e 	bne	r2,zero,200fa44 <___vfiprintf_internal_r+0x1244>
 200f950:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 200f954:	e0ffba17 	ldw	r3,-280(fp)
 200f958:	e0bfc017 	ldw	r2,-256(fp)
 200f95c:	10c0010e 	bge	r2,r3,200f964 <___vfiprintf_internal_r+0x1164>
 200f960:	1805883a 	mov	r2,r3
 200f964:	e0ffb917 	ldw	r3,-284(fp)
 200f968:	1885883a 	add	r2,r3,r2
 200f96c:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 200f970:	e0bfca17 	ldw	r2,-216(fp)
 200f974:	10000626 	beq	r2,zero,200f990 <___vfiprintf_internal_r+0x1190>
 200f978:	e0bfc804 	addi	r2,fp,-224
 200f97c:	100d883a 	mov	r6,r2
 200f980:	e17fe717 	ldw	r5,-100(fp)
 200f984:	e13fe617 	ldw	r4,-104(fp)
 200f988:	200e5840 	call	200e584 <__sprint_r>
 200f98c:	10002f1e 	bne	r2,zero,200fa4c <___vfiprintf_internal_r+0x124c>
 200f990:	e03fc915 	stw	zero,-220(fp)
 200f994:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 200f998:	e0bfc317 	ldw	r2,-244(fp)
 200f99c:	103bea26 	beq	r2,zero,200e948 <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 200f9a0:	e17fc317 	ldw	r5,-244(fp)
 200f9a4:	e13fe617 	ldw	r4,-104(fp)
 200f9a8:	200923c0 	call	200923c <_free_r>
			malloc_buf = NULL;
 200f9ac:	e03fc315 	stw	zero,-244(fp)
		}
	}
 200f9b0:	003be506 	br	200e948 <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 200f9b4:	0001883a 	nop
 200f9b8:	00000106 	br	200f9c0 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 200f9bc:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200f9c0:	e0bfca17 	ldw	r2,-216(fp)
 200f9c4:	10000626 	beq	r2,zero,200f9e0 <___vfiprintf_internal_r+0x11e0>
 200f9c8:	e0bfc804 	addi	r2,fp,-224
 200f9cc:	100d883a 	mov	r6,r2
 200f9d0:	e17fe717 	ldw	r5,-100(fp)
 200f9d4:	e13fe617 	ldw	r4,-104(fp)
 200f9d8:	200e5840 	call	200e584 <__sprint_r>
 200f9dc:	10001d1e 	bne	r2,zero,200fa54 <___vfiprintf_internal_r+0x1254>
 200f9e0:	e03fc915 	stw	zero,-220(fp)
 200f9e4:	e4bfcb04 	addi	r18,fp,-212
 200f9e8:	00001b06 	br	200fa58 <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 200f9ec:	0001883a 	nop
 200f9f0:	00001906 	br	200fa58 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 200f9f4:	0001883a 	nop
 200f9f8:	00001706 	br	200fa58 <___vfiprintf_internal_r+0x1258>
 200f9fc:	0001883a 	nop
 200fa00:	00001506 	br	200fa58 <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 200fa04:	0001883a 	nop
 200fa08:	00001306 	br	200fa58 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 200fa0c:	0001883a 	nop
 200fa10:	00001106 	br	200fa58 <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 200fa14:	0001883a 	nop
 200fa18:	00000f06 	br	200fa58 <___vfiprintf_internal_r+0x1258>
 200fa1c:	0001883a 	nop
 200fa20:	00000d06 	br	200fa58 <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200fa24:	0001883a 	nop
 200fa28:	00000b06 	br	200fa58 <___vfiprintf_internal_r+0x1258>
 200fa2c:	0001883a 	nop
 200fa30:	00000906 	br	200fa58 <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 200fa34:	0001883a 	nop
 200fa38:	00000706 	br	200fa58 <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 200fa3c:	0001883a 	nop
 200fa40:	00000506 	br	200fa58 <___vfiprintf_internal_r+0x1258>
 200fa44:	0001883a 	nop
 200fa48:	00000306 	br	200fa58 <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 200fa4c:	0001883a 	nop
 200fa50:	00000106 	br	200fa58 <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200fa54:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 200fa58:	e0bfc317 	ldw	r2,-244(fp)
 200fa5c:	10000326 	beq	r2,zero,200fa6c <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 200fa60:	e17fc317 	ldw	r5,-244(fp)
 200fa64:	e13fe617 	ldw	r4,-104(fp)
 200fa68:	200923c0 	call	200923c <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 200fa6c:	e0bfe717 	ldw	r2,-100(fp)
 200fa70:	1080030b 	ldhu	r2,12(r2)
 200fa74:	10bfffcc 	andi	r2,r2,65535
 200fa78:	1080100c 	andi	r2,r2,64
 200fa7c:	1000021e 	bne	r2,zero,200fa88 <___vfiprintf_internal_r+0x1288>
 200fa80:	e0bfb917 	ldw	r2,-284(fp)
 200fa84:	00000206 	br	200fa90 <___vfiprintf_internal_r+0x1290>
 200fa88:	00bfffc4 	movi	r2,-1
 200fa8c:	0001883a 	nop
	/* NOTREACHED */
}
 200fa90:	e6fff804 	addi	sp,fp,-32
 200fa94:	dfc00917 	ldw	ra,36(sp)
 200fa98:	df000817 	ldw	fp,32(sp)
 200fa9c:	ddc00717 	ldw	r23,28(sp)
 200faa0:	dd800617 	ldw	r22,24(sp)
 200faa4:	dd400517 	ldw	r21,20(sp)
 200faa8:	dd000417 	ldw	r20,16(sp)
 200faac:	dcc00317 	ldw	r19,12(sp)
 200fab0:	dc800217 	ldw	r18,8(sp)
 200fab4:	dc400117 	ldw	r17,4(sp)
 200fab8:	dc000017 	ldw	r16,0(sp)
 200fabc:	dec00a04 	addi	sp,sp,40
 200fac0:	f800283a 	ret

0200fac4 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 200fac4:	defff904 	addi	sp,sp,-28
 200fac8:	dfc00615 	stw	ra,24(sp)
 200facc:	df000515 	stw	fp,20(sp)
 200fad0:	df000504 	addi	fp,sp,20
 200fad4:	e13ffc15 	stw	r4,-16(fp)
 200fad8:	e17ffd15 	stw	r5,-12(fp)
 200fadc:	e1bffe15 	stw	r6,-8(fp)
 200fae0:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 200fae4:	d0272215 	stw	zero,-25464(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 200fae8:	e1bfff17 	ldw	r6,-4(fp)
 200faec:	e17ffe17 	ldw	r5,-8(fp)
 200faf0:	e13ffd17 	ldw	r4,-12(fp)
 200faf4:	2011ab40 	call	2011ab4 <write>
 200faf8:	e0bffb15 	stw	r2,-20(fp)
 200fafc:	e0bffb17 	ldw	r2,-20(fp)
 200fb00:	10bfffd8 	cmpnei	r2,r2,-1
 200fb04:	1000051e 	bne	r2,zero,200fb1c <_write_r+0x58>
 200fb08:	d0a72217 	ldw	r2,-25464(gp)
 200fb0c:	10000326 	beq	r2,zero,200fb1c <_write_r+0x58>
    ptr->_errno = errno;
 200fb10:	d0e72217 	ldw	r3,-25464(gp)
 200fb14:	e0bffc17 	ldw	r2,-16(fp)
 200fb18:	10c00015 	stw	r3,0(r2)
  return ret;
 200fb1c:	e0bffb17 	ldw	r2,-20(fp)
}
 200fb20:	e037883a 	mov	sp,fp
 200fb24:	dfc00117 	ldw	ra,4(sp)
 200fb28:	df000017 	ldw	fp,0(sp)
 200fb2c:	dec00204 	addi	sp,sp,8
 200fb30:	f800283a 	ret

0200fb34 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 200fb34:	defffb04 	addi	sp,sp,-20
 200fb38:	dfc00415 	stw	ra,16(sp)
 200fb3c:	df000315 	stw	fp,12(sp)
 200fb40:	df000304 	addi	fp,sp,12
 200fb44:	e13ffe15 	stw	r4,-8(fp)
 200fb48:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 200fb4c:	d0272215 	stw	zero,-25464(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 200fb50:	e13fff17 	ldw	r4,-4(fp)
 200fb54:	20112ac0 	call	20112ac <close>
 200fb58:	e0bffd15 	stw	r2,-12(fp)
 200fb5c:	e0bffd17 	ldw	r2,-12(fp)
 200fb60:	10bfffd8 	cmpnei	r2,r2,-1
 200fb64:	1000051e 	bne	r2,zero,200fb7c <_close_r+0x48>
 200fb68:	d0a72217 	ldw	r2,-25464(gp)
 200fb6c:	10000326 	beq	r2,zero,200fb7c <_close_r+0x48>
    ptr->_errno = errno;
 200fb70:	d0e72217 	ldw	r3,-25464(gp)
 200fb74:	e0bffe17 	ldw	r2,-8(fp)
 200fb78:	10c00015 	stw	r3,0(r2)
  return ret;
 200fb7c:	e0bffd17 	ldw	r2,-12(fp)
}
 200fb80:	e037883a 	mov	sp,fp
 200fb84:	dfc00117 	ldw	ra,4(sp)
 200fb88:	df000017 	ldw	fp,0(sp)
 200fb8c:	dec00204 	addi	sp,sp,8
 200fb90:	f800283a 	ret

0200fb94 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 200fb94:	defff504 	addi	sp,sp,-44
 200fb98:	dfc00a15 	stw	ra,40(sp)
 200fb9c:	df000915 	stw	fp,36(sp)
 200fba0:	df000904 	addi	fp,sp,36
 200fba4:	e13ffd15 	stw	r4,-12(fp)
 200fba8:	e17ffe15 	stw	r5,-8(fp)
 200fbac:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 200fbb0:	e0fffe17 	ldw	r3,-8(fp)
 200fbb4:	e0bfff17 	ldw	r2,-4(fp)
 200fbb8:	1885383a 	mul	r2,r3,r2
 200fbbc:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 200fbc0:	e17ff817 	ldw	r5,-32(fp)
 200fbc4:	e13ffd17 	ldw	r4,-12(fp)
 200fbc8:	200a87c0 	call	200a87c <_malloc_r>
 200fbcc:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 200fbd0:	e0bff917 	ldw	r2,-28(fp)
 200fbd4:	1000021e 	bne	r2,zero,200fbe0 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 200fbd8:	0005883a 	mov	r2,zero
 200fbdc:	00004106 	br	200fce4 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 200fbe0:	e0bff917 	ldw	r2,-28(fp)
 200fbe4:	10bffe04 	addi	r2,r2,-8
 200fbe8:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 200fbec:	e0bffa17 	ldw	r2,-24(fp)
 200fbf0:	10c00117 	ldw	r3,4(r2)
 200fbf4:	00bfff04 	movi	r2,-4
 200fbf8:	1884703a 	and	r2,r3,r2
 200fbfc:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 200fc00:	e0bffb17 	ldw	r2,-20(fp)
 200fc04:	10bfff04 	addi	r2,r2,-4
 200fc08:	e0bffc15 	stw	r2,-16(fp)
 200fc0c:	e0bffc17 	ldw	r2,-16(fp)
 200fc10:	10800968 	cmpgeui	r2,r2,37
 200fc14:	10002e1e 	bne	r2,zero,200fcd0 <_calloc_r+0x13c>
 200fc18:	e0bff917 	ldw	r2,-28(fp)
 200fc1c:	e0bff715 	stw	r2,-36(fp)
 200fc20:	e0bffc17 	ldw	r2,-16(fp)
 200fc24:	10800530 	cmpltui	r2,r2,20
 200fc28:	10001e1e 	bne	r2,zero,200fca4 <_calloc_r+0x110>
 200fc2c:	e0bff717 	ldw	r2,-36(fp)
 200fc30:	10c00104 	addi	r3,r2,4
 200fc34:	e0fff715 	stw	r3,-36(fp)
 200fc38:	10000015 	stw	zero,0(r2)
 200fc3c:	e0bff717 	ldw	r2,-36(fp)
 200fc40:	10c00104 	addi	r3,r2,4
 200fc44:	e0fff715 	stw	r3,-36(fp)
 200fc48:	10000015 	stw	zero,0(r2)
 200fc4c:	e0bffc17 	ldw	r2,-16(fp)
 200fc50:	10800730 	cmpltui	r2,r2,28
 200fc54:	1000131e 	bne	r2,zero,200fca4 <_calloc_r+0x110>
 200fc58:	e0bff717 	ldw	r2,-36(fp)
 200fc5c:	10c00104 	addi	r3,r2,4
 200fc60:	e0fff715 	stw	r3,-36(fp)
 200fc64:	10000015 	stw	zero,0(r2)
 200fc68:	e0bff717 	ldw	r2,-36(fp)
 200fc6c:	10c00104 	addi	r3,r2,4
 200fc70:	e0fff715 	stw	r3,-36(fp)
 200fc74:	10000015 	stw	zero,0(r2)
 200fc78:	e0bffc17 	ldw	r2,-16(fp)
 200fc7c:	10800930 	cmpltui	r2,r2,36
 200fc80:	1000081e 	bne	r2,zero,200fca4 <_calloc_r+0x110>
 200fc84:	e0bff717 	ldw	r2,-36(fp)
 200fc88:	10c00104 	addi	r3,r2,4
 200fc8c:	e0fff715 	stw	r3,-36(fp)
 200fc90:	10000015 	stw	zero,0(r2)
 200fc94:	e0bff717 	ldw	r2,-36(fp)
 200fc98:	10c00104 	addi	r3,r2,4
 200fc9c:	e0fff715 	stw	r3,-36(fp)
 200fca0:	10000015 	stw	zero,0(r2)
 200fca4:	e0bff717 	ldw	r2,-36(fp)
 200fca8:	10c00104 	addi	r3,r2,4
 200fcac:	e0fff715 	stw	r3,-36(fp)
 200fcb0:	10000015 	stw	zero,0(r2)
 200fcb4:	e0bff717 	ldw	r2,-36(fp)
 200fcb8:	10c00104 	addi	r3,r2,4
 200fcbc:	e0fff715 	stw	r3,-36(fp)
 200fcc0:	10000015 	stw	zero,0(r2)
 200fcc4:	e0bff717 	ldw	r2,-36(fp)
 200fcc8:	10000015 	stw	zero,0(r2)
 200fccc:	00000406 	br	200fce0 <_calloc_r+0x14c>
 200fcd0:	e1bffc17 	ldw	r6,-16(fp)
 200fcd4:	000b883a 	mov	r5,zero
 200fcd8:	e13ff917 	ldw	r4,-28(fp)
 200fcdc:	200b9440 	call	200b944 <memset>
    return mem;
 200fce0:	e0bff917 	ldw	r2,-28(fp)
  }
}
 200fce4:	e037883a 	mov	sp,fp
 200fce8:	dfc00117 	ldw	ra,4(sp)
 200fcec:	df000017 	ldw	fp,0(sp)
 200fcf0:	dec00204 	addi	sp,sp,8
 200fcf4:	f800283a 	ret

0200fcf8 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 200fcf8:	defffa04 	addi	sp,sp,-24
 200fcfc:	dfc00515 	stw	ra,20(sp)
 200fd00:	df000415 	stw	fp,16(sp)
 200fd04:	dc000315 	stw	r16,12(sp)
 200fd08:	df000404 	addi	fp,sp,16
 200fd0c:	e13ffe15 	stw	r4,-8(fp)
 200fd10:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 200fd14:	8000021e 	bne	r16,zero,200fd20 <_fclose_r+0x28>
    return (0);			/* on NULL */
 200fd18:	0005883a 	mov	r2,zero
 200fd1c:	00003b06 	br	200fe0c <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 200fd20:	e0bffe17 	ldw	r2,-8(fp)
 200fd24:	e0bffd15 	stw	r2,-12(fp)
 200fd28:	e0bffd17 	ldw	r2,-12(fp)
 200fd2c:	10000526 	beq	r2,zero,200fd44 <_fclose_r+0x4c>
 200fd30:	e0bffd17 	ldw	r2,-12(fp)
 200fd34:	10800e17 	ldw	r2,56(r2)
 200fd38:	1000021e 	bne	r2,zero,200fd44 <_fclose_r+0x4c>
 200fd3c:	e13ffd17 	ldw	r4,-12(fp)
 200fd40:	200901c0 	call	200901c <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 200fd44:	8080030b 	ldhu	r2,12(r16)
 200fd48:	10bfffcc 	andi	r2,r2,65535
 200fd4c:	10a0001c 	xori	r2,r2,32768
 200fd50:	10a00004 	addi	r2,r2,-32768
 200fd54:	1000021e 	bne	r2,zero,200fd60 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 200fd58:	0005883a 	mov	r2,zero
 200fd5c:	00002b06 	br	200fe0c <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 200fd60:	800b883a 	mov	r5,r16
 200fd64:	e13ffe17 	ldw	r4,-8(fp)
 200fd68:	20088980 	call	2008898 <__sflush_r>
 200fd6c:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 200fd70:	80800b17 	ldw	r2,44(r16)
 200fd74:	10000826 	beq	r2,zero,200fd98 <_fclose_r+0xa0>
 200fd78:	80800b17 	ldw	r2,44(r16)
 200fd7c:	80c00717 	ldw	r3,28(r16)
 200fd80:	180b883a 	mov	r5,r3
 200fd84:	e13ffe17 	ldw	r4,-8(fp)
 200fd88:	103ee83a 	callr	r2
 200fd8c:	1000020e 	bge	r2,zero,200fd98 <_fclose_r+0xa0>
    r = EOF;
 200fd90:	00bfffc4 	movi	r2,-1
 200fd94:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 200fd98:	8080030b 	ldhu	r2,12(r16)
 200fd9c:	10bfffcc 	andi	r2,r2,65535
 200fda0:	1080200c 	andi	r2,r2,128
 200fda4:	10000426 	beq	r2,zero,200fdb8 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 200fda8:	80800417 	ldw	r2,16(r16)
 200fdac:	100b883a 	mov	r5,r2
 200fdb0:	e13ffe17 	ldw	r4,-8(fp)
 200fdb4:	200923c0 	call	200923c <_free_r>
  if (HASUB (fp))
 200fdb8:	80800c17 	ldw	r2,48(r16)
 200fdbc:	10000826 	beq	r2,zero,200fde0 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 200fdc0:	80c00c17 	ldw	r3,48(r16)
 200fdc4:	80801004 	addi	r2,r16,64
 200fdc8:	18800426 	beq	r3,r2,200fddc <_fclose_r+0xe4>
 200fdcc:	80800c17 	ldw	r2,48(r16)
 200fdd0:	100b883a 	mov	r5,r2
 200fdd4:	e13ffe17 	ldw	r4,-8(fp)
 200fdd8:	200923c0 	call	200923c <_free_r>
 200fddc:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 200fde0:	80801117 	ldw	r2,68(r16)
 200fde4:	10000526 	beq	r2,zero,200fdfc <_fclose_r+0x104>
    FREELB (rptr, fp);
 200fde8:	80801117 	ldw	r2,68(r16)
 200fdec:	100b883a 	mov	r5,r2
 200fdf0:	e13ffe17 	ldw	r4,-8(fp)
 200fdf4:	200923c0 	call	200923c <_free_r>
 200fdf8:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 200fdfc:	20090f40 	call	20090f4 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 200fe00:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 200fe04:	20091140 	call	2009114 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 200fe08:	e0bffc17 	ldw	r2,-16(fp)
}
 200fe0c:	e6ffff04 	addi	sp,fp,-4
 200fe10:	dfc00217 	ldw	ra,8(sp)
 200fe14:	df000117 	ldw	fp,4(sp)
 200fe18:	dc000017 	ldw	r16,0(sp)
 200fe1c:	dec00304 	addi	sp,sp,12
 200fe20:	f800283a 	ret

0200fe24 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 200fe24:	defffe04 	addi	sp,sp,-8
 200fe28:	dfc00115 	stw	ra,4(sp)
 200fe2c:	df000015 	stw	fp,0(sp)
 200fe30:	d839883a 	mov	fp,sp
 200fe34:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 200fe38:	d0a00517 	ldw	r2,-32748(gp)
 200fe3c:	180b883a 	mov	r5,r3
 200fe40:	1009883a 	mov	r4,r2
 200fe44:	200fcf80 	call	200fcf8 <_fclose_r>
}
 200fe48:	e037883a 	mov	sp,fp
 200fe4c:	dfc00117 	ldw	ra,4(sp)
 200fe50:	df000017 	ldw	fp,0(sp)
 200fe54:	dec00204 	addi	sp,sp,8
 200fe58:	f800283a 	ret

0200fe5c <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 200fe5c:	defff804 	addi	sp,sp,-32
 200fe60:	dfc00715 	stw	ra,28(sp)
 200fe64:	df000615 	stw	fp,24(sp)
 200fe68:	df000604 	addi	fp,sp,24
 200fe6c:	e13ffd15 	stw	r4,-12(fp)
 200fe70:	e17ffe15 	stw	r5,-8(fp)
 200fe74:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 200fe78:	200a1a00 	call	200a1a0 <__locale_mb_cur_max>
 200fe7c:	10800058 	cmpnei	r2,r2,1
 200fe80:	10000a1e 	bne	r2,zero,200feac <__fputwc+0x50>
 200fe84:	e0bffe17 	ldw	r2,-8(fp)
 200fe88:	0080080e 	bge	zero,r2,200feac <__fputwc+0x50>
 200fe8c:	e0bffe17 	ldw	r2,-8(fp)
 200fe90:	10804008 	cmpgei	r2,r2,256
 200fe94:	1000051e 	bne	r2,zero,200feac <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 200fe98:	e0bffe17 	ldw	r2,-8(fp)
 200fe9c:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 200fea0:	00800044 	movi	r2,1
 200fea4:	e0bffb15 	stw	r2,-20(fp)
 200fea8:	00001406 	br	200fefc <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 200feac:	e0bfff17 	ldw	r2,-4(fp)
 200feb0:	10c01704 	addi	r3,r2,92
 200feb4:	e0bffc04 	addi	r2,fp,-16
 200feb8:	180f883a 	mov	r7,r3
 200febc:	e1bffe17 	ldw	r6,-8(fp)
 200fec0:	100b883a 	mov	r5,r2
 200fec4:	e13ffd17 	ldw	r4,-12(fp)
 200fec8:	20104900 	call	2010490 <_wcrtomb_r>
 200fecc:	e0bffb15 	stw	r2,-20(fp)
 200fed0:	e0bffb17 	ldw	r2,-20(fp)
 200fed4:	10bfffd8 	cmpnei	r2,r2,-1
 200fed8:	1000081e 	bne	r2,zero,200fefc <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 200fedc:	e0bfff17 	ldw	r2,-4(fp)
 200fee0:	1080030b 	ldhu	r2,12(r2)
 200fee4:	10801014 	ori	r2,r2,64
 200fee8:	1007883a 	mov	r3,r2
 200feec:	e0bfff17 	ldw	r2,-4(fp)
 200fef0:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 200fef4:	00bfffc4 	movi	r2,-1
 200fef8:	00005006 	br	201003c <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 200fefc:	e03ffa15 	stw	zero,-24(fp)
 200ff00:	00004a06 	br	201002c <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 200ff04:	e0bfff17 	ldw	r2,-4(fp)
 200ff08:	10800217 	ldw	r2,8(r2)
 200ff0c:	10ffffc4 	addi	r3,r2,-1
 200ff10:	e0bfff17 	ldw	r2,-4(fp)
 200ff14:	10c00215 	stw	r3,8(r2)
 200ff18:	e0bfff17 	ldw	r2,-4(fp)
 200ff1c:	10800217 	ldw	r2,8(r2)
 200ff20:	10002c0e 	bge	r2,zero,200ffd4 <__fputwc+0x178>
 200ff24:	e0bfff17 	ldw	r2,-4(fp)
 200ff28:	10c00217 	ldw	r3,8(r2)
 200ff2c:	e0bfff17 	ldw	r2,-4(fp)
 200ff30:	10800617 	ldw	r2,24(r2)
 200ff34:	18801c16 	blt	r3,r2,200ffa8 <__fputwc+0x14c>
 200ff38:	e0bfff17 	ldw	r2,-4(fp)
 200ff3c:	10800017 	ldw	r2,0(r2)
 200ff40:	e13ffc04 	addi	r4,fp,-16
 200ff44:	e0fffa17 	ldw	r3,-24(fp)
 200ff48:	20c7883a 	add	r3,r4,r3
 200ff4c:	18c00003 	ldbu	r3,0(r3)
 200ff50:	10c00005 	stb	r3,0(r2)
 200ff54:	e0bfff17 	ldw	r2,-4(fp)
 200ff58:	10800017 	ldw	r2,0(r2)
 200ff5c:	10800003 	ldbu	r2,0(r2)
 200ff60:	10803fcc 	andi	r2,r2,255
 200ff64:	108002a0 	cmpeqi	r2,r2,10
 200ff68:	1000091e 	bne	r2,zero,200ff90 <__fputwc+0x134>
 200ff6c:	e0bfff17 	ldw	r2,-4(fp)
 200ff70:	10800017 	ldw	r2,0(r2)
 200ff74:	11000044 	addi	r4,r2,1
 200ff78:	e0ffff17 	ldw	r3,-4(fp)
 200ff7c:	19000015 	stw	r4,0(r3)
 200ff80:	10800003 	ldbu	r2,0(r2)
 200ff84:	10803fcc 	andi	r2,r2,255
 200ff88:	10bfffe0 	cmpeqi	r2,r2,-1
 200ff8c:	00002006 	br	2010010 <__fputwc+0x1b4>
 200ff90:	e1bfff17 	ldw	r6,-4(fp)
 200ff94:	01400284 	movi	r5,10
 200ff98:	e13ffd17 	ldw	r4,-12(fp)
 200ff9c:	20102e80 	call	20102e8 <__swbuf_r>
 200ffa0:	10bfffe0 	cmpeqi	r2,r2,-1
 200ffa4:	00001a06 	br	2010010 <__fputwc+0x1b4>
 200ffa8:	e0fffc04 	addi	r3,fp,-16
 200ffac:	e0bffa17 	ldw	r2,-24(fp)
 200ffb0:	1885883a 	add	r2,r3,r2
 200ffb4:	10800003 	ldbu	r2,0(r2)
 200ffb8:	10803fcc 	andi	r2,r2,255
 200ffbc:	e1bfff17 	ldw	r6,-4(fp)
 200ffc0:	100b883a 	mov	r5,r2
 200ffc4:	e13ffd17 	ldw	r4,-12(fp)
 200ffc8:	20102e80 	call	20102e8 <__swbuf_r>
 200ffcc:	10bfffe0 	cmpeqi	r2,r2,-1
 200ffd0:	00000f06 	br	2010010 <__fputwc+0x1b4>
 200ffd4:	e0bfff17 	ldw	r2,-4(fp)
 200ffd8:	10800017 	ldw	r2,0(r2)
 200ffdc:	e13ffc04 	addi	r4,fp,-16
 200ffe0:	e0fffa17 	ldw	r3,-24(fp)
 200ffe4:	20c7883a 	add	r3,r4,r3
 200ffe8:	18c00003 	ldbu	r3,0(r3)
 200ffec:	10c00005 	stb	r3,0(r2)
 200fff0:	e0bfff17 	ldw	r2,-4(fp)
 200fff4:	10800017 	ldw	r2,0(r2)
 200fff8:	11000044 	addi	r4,r2,1
 200fffc:	e0ffff17 	ldw	r3,-4(fp)
 2010000:	19000015 	stw	r4,0(r3)
 2010004:	10800003 	ldbu	r2,0(r2)
 2010008:	10803fcc 	andi	r2,r2,255
 201000c:	10bfffe0 	cmpeqi	r2,r2,-1
 2010010:	10803fcc 	andi	r2,r2,255
 2010014:	10000226 	beq	r2,zero,2010020 <__fputwc+0x1c4>
      return WEOF;
 2010018:	00bfffc4 	movi	r2,-1
 201001c:	00000706 	br	201003c <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 2010020:	e0bffa17 	ldw	r2,-24(fp)
 2010024:	10800044 	addi	r2,r2,1
 2010028:	e0bffa15 	stw	r2,-24(fp)
 201002c:	e0fffa17 	ldw	r3,-24(fp)
 2010030:	e0bffb17 	ldw	r2,-20(fp)
 2010034:	18bfb336 	bltu	r3,r2,200ff04 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 2010038:	e0bffe17 	ldw	r2,-8(fp)
}
 201003c:	e037883a 	mov	sp,fp
 2010040:	dfc00117 	ldw	ra,4(sp)
 2010044:	df000017 	ldw	fp,0(sp)
 2010048:	dec00204 	addi	sp,sp,8
 201004c:	f800283a 	ret

02010050 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2010050:	defffa04 	addi	sp,sp,-24
 2010054:	dfc00515 	stw	ra,20(sp)
 2010058:	df000415 	stw	fp,16(sp)
 201005c:	df000404 	addi	fp,sp,16
 2010060:	e13ffd15 	stw	r4,-12(fp)
 2010064:	e17ffe15 	stw	r5,-8(fp)
 2010068:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 201006c:	e0bfff17 	ldw	r2,-4(fp)
 2010070:	1080030b 	ldhu	r2,12(r2)
 2010074:	10bfffcc 	andi	r2,r2,65535
 2010078:	1088000c 	andi	r2,r2,8192
 201007c:	10000b1e 	bne	r2,zero,20100ac <_fputwc_r+0x5c>
 2010080:	e0bfff17 	ldw	r2,-4(fp)
 2010084:	1080030b 	ldhu	r2,12(r2)
 2010088:	10880014 	ori	r2,r2,8192
 201008c:	1007883a 	mov	r3,r2
 2010090:	e0bfff17 	ldw	r2,-4(fp)
 2010094:	10c0030d 	sth	r3,12(r2)
 2010098:	e0bfff17 	ldw	r2,-4(fp)
 201009c:	10801917 	ldw	r2,100(r2)
 20100a0:	10c80014 	ori	r3,r2,8192
 20100a4:	e0bfff17 	ldw	r2,-4(fp)
 20100a8:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 20100ac:	e1bfff17 	ldw	r6,-4(fp)
 20100b0:	e17ffe17 	ldw	r5,-8(fp)
 20100b4:	e13ffd17 	ldw	r4,-12(fp)
 20100b8:	200fe5c0 	call	200fe5c <__fputwc>
 20100bc:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 20100c0:	e0bffc17 	ldw	r2,-16(fp)
}
 20100c4:	e037883a 	mov	sp,fp
 20100c8:	dfc00117 	ldw	ra,4(sp)
 20100cc:	df000017 	ldw	fp,0(sp)
 20100d0:	dec00204 	addi	sp,sp,8
 20100d4:	f800283a 	ret

020100d8 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 20100d8:	defffa04 	addi	sp,sp,-24
 20100dc:	dfc00515 	stw	ra,20(sp)
 20100e0:	df000415 	stw	fp,16(sp)
 20100e4:	df000404 	addi	fp,sp,16
 20100e8:	e13ffe15 	stw	r4,-8(fp)
 20100ec:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 20100f0:	d0a00517 	ldw	r2,-32748(gp)
 20100f4:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 20100f8:	e0bffc17 	ldw	r2,-16(fp)
 20100fc:	e0bffd15 	stw	r2,-12(fp)
 2010100:	e0bffd17 	ldw	r2,-12(fp)
 2010104:	10000526 	beq	r2,zero,201011c <fputwc+0x44>
 2010108:	e0bffd17 	ldw	r2,-12(fp)
 201010c:	10800e17 	ldw	r2,56(r2)
 2010110:	1000021e 	bne	r2,zero,201011c <fputwc+0x44>
 2010114:	e13ffd17 	ldw	r4,-12(fp)
 2010118:	200901c0 	call	200901c <__sinit>
  return _fputwc_r (reent, wc, fp);
 201011c:	e1bfff17 	ldw	r6,-4(fp)
 2010120:	e17ffe17 	ldw	r5,-8(fp)
 2010124:	e13ffc17 	ldw	r4,-16(fp)
 2010128:	20100500 	call	2010050 <_fputwc_r>
}
 201012c:	e037883a 	mov	sp,fp
 2010130:	dfc00117 	ldw	ra,4(sp)
 2010134:	df000017 	ldw	fp,0(sp)
 2010138:	dec00204 	addi	sp,sp,8
 201013c:	f800283a 	ret

02010140 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 2010140:	defffa04 	addi	sp,sp,-24
 2010144:	dfc00515 	stw	ra,20(sp)
 2010148:	df000415 	stw	fp,16(sp)
 201014c:	df000404 	addi	fp,sp,16
 2010150:	e13ffd15 	stw	r4,-12(fp)
 2010154:	e17ffe15 	stw	r5,-8(fp)
 2010158:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 201015c:	d0272215 	stw	zero,-25464(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 2010160:	e17fff17 	ldw	r5,-4(fp)
 2010164:	e13ffe17 	ldw	r4,-8(fp)
 2010168:	20113e40 	call	20113e4 <fstat>
 201016c:	e0bffc15 	stw	r2,-16(fp)
 2010170:	e0bffc17 	ldw	r2,-16(fp)
 2010174:	10bfffd8 	cmpnei	r2,r2,-1
 2010178:	1000051e 	bne	r2,zero,2010190 <_fstat_r+0x50>
 201017c:	d0a72217 	ldw	r2,-25464(gp)
 2010180:	10000326 	beq	r2,zero,2010190 <_fstat_r+0x50>
    ptr->_errno = errno;
 2010184:	d0e72217 	ldw	r3,-25464(gp)
 2010188:	e0bffd17 	ldw	r2,-12(fp)
 201018c:	10c00015 	stw	r3,0(r2)
  return ret;
 2010190:	e0bffc17 	ldw	r2,-16(fp)
}
 2010194:	e037883a 	mov	sp,fp
 2010198:	dfc00117 	ldw	ra,4(sp)
 201019c:	df000017 	ldw	fp,0(sp)
 20101a0:	dec00204 	addi	sp,sp,8
 20101a4:	f800283a 	ret

020101a8 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 20101a8:	defffb04 	addi	sp,sp,-20
 20101ac:	dfc00415 	stw	ra,16(sp)
 20101b0:	df000315 	stw	fp,12(sp)
 20101b4:	df000304 	addi	fp,sp,12
 20101b8:	e13ffe15 	stw	r4,-8(fp)
 20101bc:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 20101c0:	d0272215 	stw	zero,-25464(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 20101c4:	e13fff17 	ldw	r4,-4(fp)
 20101c8:	20114d00 	call	20114d0 <isatty>
 20101cc:	e0bffd15 	stw	r2,-12(fp)
 20101d0:	e0bffd17 	ldw	r2,-12(fp)
 20101d4:	10bfffd8 	cmpnei	r2,r2,-1
 20101d8:	1000051e 	bne	r2,zero,20101f0 <_isatty_r+0x48>
 20101dc:	d0a72217 	ldw	r2,-25464(gp)
 20101e0:	10000326 	beq	r2,zero,20101f0 <_isatty_r+0x48>
    ptr->_errno = errno;
 20101e4:	d0e72217 	ldw	r3,-25464(gp)
 20101e8:	e0bffe17 	ldw	r2,-8(fp)
 20101ec:	10c00015 	stw	r3,0(r2)
  return ret;
 20101f0:	e0bffd17 	ldw	r2,-12(fp)
}
 20101f4:	e037883a 	mov	sp,fp
 20101f8:	dfc00117 	ldw	ra,4(sp)
 20101fc:	df000017 	ldw	fp,0(sp)
 2010200:	dec00204 	addi	sp,sp,8
 2010204:	f800283a 	ret

02010208 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 2010208:	defff904 	addi	sp,sp,-28
 201020c:	dfc00615 	stw	ra,24(sp)
 2010210:	df000515 	stw	fp,20(sp)
 2010214:	df000504 	addi	fp,sp,20
 2010218:	e13ffc15 	stw	r4,-16(fp)
 201021c:	e17ffd15 	stw	r5,-12(fp)
 2010220:	e1bffe15 	stw	r6,-8(fp)
 2010224:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 2010228:	d0272215 	stw	zero,-25464(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 201022c:	e1bfff17 	ldw	r6,-4(fp)
 2010230:	e17ffe17 	ldw	r5,-8(fp)
 2010234:	e13ffd17 	ldw	r4,-12(fp)
 2010238:	201169c0 	call	201169c <lseek>
 201023c:	e0bffb15 	stw	r2,-20(fp)
 2010240:	e0bffb17 	ldw	r2,-20(fp)
 2010244:	10bfffd8 	cmpnei	r2,r2,-1
 2010248:	1000051e 	bne	r2,zero,2010260 <_lseek_r+0x58>
 201024c:	d0a72217 	ldw	r2,-25464(gp)
 2010250:	10000326 	beq	r2,zero,2010260 <_lseek_r+0x58>
    ptr->_errno = errno;
 2010254:	d0e72217 	ldw	r3,-25464(gp)
 2010258:	e0bffc17 	ldw	r2,-16(fp)
 201025c:	10c00015 	stw	r3,0(r2)
  return ret;
 2010260:	e0bffb17 	ldw	r2,-20(fp)
}
 2010264:	e037883a 	mov	sp,fp
 2010268:	dfc00117 	ldw	ra,4(sp)
 201026c:	df000017 	ldw	fp,0(sp)
 2010270:	dec00204 	addi	sp,sp,8
 2010274:	f800283a 	ret

02010278 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 2010278:	defff904 	addi	sp,sp,-28
 201027c:	dfc00615 	stw	ra,24(sp)
 2010280:	df000515 	stw	fp,20(sp)
 2010284:	df000504 	addi	fp,sp,20
 2010288:	e13ffc15 	stw	r4,-16(fp)
 201028c:	e17ffd15 	stw	r5,-12(fp)
 2010290:	e1bffe15 	stw	r6,-8(fp)
 2010294:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2010298:	d0272215 	stw	zero,-25464(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 201029c:	e1bfff17 	ldw	r6,-4(fp)
 20102a0:	e17ffe17 	ldw	r5,-8(fp)
 20102a4:	e13ffd17 	ldw	r4,-12(fp)
 20102a8:	20118680 	call	2011868 <read>
 20102ac:	e0bffb15 	stw	r2,-20(fp)
 20102b0:	e0bffb17 	ldw	r2,-20(fp)
 20102b4:	10bfffd8 	cmpnei	r2,r2,-1
 20102b8:	1000051e 	bne	r2,zero,20102d0 <_read_r+0x58>
 20102bc:	d0a72217 	ldw	r2,-25464(gp)
 20102c0:	10000326 	beq	r2,zero,20102d0 <_read_r+0x58>
    ptr->_errno = errno;
 20102c4:	d0e72217 	ldw	r3,-25464(gp)
 20102c8:	e0bffc17 	ldw	r2,-16(fp)
 20102cc:	10c00015 	stw	r3,0(r2)
  return ret;
 20102d0:	e0bffb17 	ldw	r2,-20(fp)
}
 20102d4:	e037883a 	mov	sp,fp
 20102d8:	dfc00117 	ldw	ra,4(sp)
 20102dc:	df000017 	ldw	fp,0(sp)
 20102e0:	dec00204 	addi	sp,sp,8
 20102e4:	f800283a 	ret

020102e8 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 20102e8:	defff904 	addi	sp,sp,-28
 20102ec:	dfc00615 	stw	ra,24(sp)
 20102f0:	df000515 	stw	fp,20(sp)
 20102f4:	dc800415 	stw	r18,16(sp)
 20102f8:	dc400315 	stw	r17,12(sp)
 20102fc:	dc000215 	stw	r16,8(sp)
 2010300:	df000504 	addi	fp,sp,20
 2010304:	e13ffc15 	stw	r4,-16(fp)
 2010308:	2825883a 	mov	r18,r5
 201030c:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 2010310:	e0bffc17 	ldw	r2,-16(fp)
 2010314:	e0bffb15 	stw	r2,-20(fp)
 2010318:	e0bffb17 	ldw	r2,-20(fp)
 201031c:	10000526 	beq	r2,zero,2010334 <__swbuf_r+0x4c>
 2010320:	e0bffb17 	ldw	r2,-20(fp)
 2010324:	10800e17 	ldw	r2,56(r2)
 2010328:	1000021e 	bne	r2,zero,2010334 <__swbuf_r+0x4c>
 201032c:	e13ffb17 	ldw	r4,-20(fp)
 2010330:	200901c0 	call	200901c <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 2010334:	80800617 	ldw	r2,24(r16)
 2010338:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 201033c:	8080030b 	ldhu	r2,12(r16)
 2010340:	10bfffcc 	andi	r2,r2,65535
 2010344:	1080020c 	andi	r2,r2,8
 2010348:	10000226 	beq	r2,zero,2010354 <__swbuf_r+0x6c>
 201034c:	80800417 	ldw	r2,16(r16)
 2010350:	1000061e 	bne	r2,zero,201036c <__swbuf_r+0x84>
 2010354:	800b883a 	mov	r5,r16
 2010358:	e13ffc17 	ldw	r4,-16(fp)
 201035c:	20067cc0 	call	20067cc <__swsetup_r>
 2010360:	10000226 	beq	r2,zero,201036c <__swbuf_r+0x84>
    return EOF;
 2010364:	00bfffc4 	movi	r2,-1
 2010368:	00003106 	br	2010430 <__swbuf_r+0x148>
  c = (unsigned char) c;
 201036c:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 2010370:	8080030b 	ldhu	r2,12(r16)
 2010374:	10bfffcc 	andi	r2,r2,65535
 2010378:	1088000c 	andi	r2,r2,8192
 201037c:	1000071e 	bne	r2,zero,201039c <__swbuf_r+0xb4>
 2010380:	8080030b 	ldhu	r2,12(r16)
 2010384:	10880014 	ori	r2,r2,8192
 2010388:	8080030d 	sth	r2,12(r16)
 201038c:	80c01917 	ldw	r3,100(r16)
 2010390:	00b7ffc4 	movi	r2,-8193
 2010394:	1884703a 	and	r2,r3,r2
 2010398:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 201039c:	80800017 	ldw	r2,0(r16)
 20103a0:	1007883a 	mov	r3,r2
 20103a4:	80800417 	ldw	r2,16(r16)
 20103a8:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 20103ac:	80800517 	ldw	r2,20(r16)
 20103b0:	88800716 	blt	r17,r2,20103d0 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 20103b4:	800b883a 	mov	r5,r16
 20103b8:	e13ffc17 	ldw	r4,-16(fp)
 20103bc:	2008b9c0 	call	2008b9c <_fflush_r>
 20103c0:	10000226 	beq	r2,zero,20103cc <__swbuf_r+0xe4>
	return EOF;
 20103c4:	00bfffc4 	movi	r2,-1
 20103c8:	00001906 	br	2010430 <__swbuf_r+0x148>
      n = 0;
 20103cc:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 20103d0:	80800217 	ldw	r2,8(r16)
 20103d4:	10bfffc4 	addi	r2,r2,-1
 20103d8:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 20103dc:	80800017 	ldw	r2,0(r16)
 20103e0:	10c00044 	addi	r3,r2,1
 20103e4:	80c00015 	stw	r3,0(r16)
 20103e8:	9007883a 	mov	r3,r18
 20103ec:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 20103f0:	8c400044 	addi	r17,r17,1
 20103f4:	80800517 	ldw	r2,20(r16)
 20103f8:	88800626 	beq	r17,r2,2010414 <__swbuf_r+0x12c>
 20103fc:	8080030b 	ldhu	r2,12(r16)
 2010400:	10bfffcc 	andi	r2,r2,65535
 2010404:	1080004c 	andi	r2,r2,1
 2010408:	10000826 	beq	r2,zero,201042c <__swbuf_r+0x144>
 201040c:	90800298 	cmpnei	r2,r18,10
 2010410:	1000061e 	bne	r2,zero,201042c <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 2010414:	800b883a 	mov	r5,r16
 2010418:	e13ffc17 	ldw	r4,-16(fp)
 201041c:	2008b9c0 	call	2008b9c <_fflush_r>
 2010420:	10000226 	beq	r2,zero,201042c <__swbuf_r+0x144>
      return EOF;
 2010424:	00bfffc4 	movi	r2,-1
 2010428:	00000106 	br	2010430 <__swbuf_r+0x148>
  return c;
 201042c:	9005883a 	mov	r2,r18
}
 2010430:	e6fffd04 	addi	sp,fp,-12
 2010434:	dfc00417 	ldw	ra,16(sp)
 2010438:	df000317 	ldw	fp,12(sp)
 201043c:	dc800217 	ldw	r18,8(sp)
 2010440:	dc400117 	ldw	r17,4(sp)
 2010444:	dc000017 	ldw	r16,0(sp)
 2010448:	dec00504 	addi	sp,sp,20
 201044c:	f800283a 	ret

02010450 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 2010450:	defffe04 	addi	sp,sp,-8
 2010454:	dfc00115 	stw	ra,4(sp)
 2010458:	df000015 	stw	fp,0(sp)
 201045c:	d839883a 	mov	fp,sp
 2010460:	2007883a 	mov	r3,r4
 2010464:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 2010468:	d0a00517 	ldw	r2,-32748(gp)
 201046c:	200d883a 	mov	r6,r4
 2010470:	180b883a 	mov	r5,r3
 2010474:	1009883a 	mov	r4,r2
 2010478:	20102e80 	call	20102e8 <__swbuf_r>
}
 201047c:	e037883a 	mov	sp,fp
 2010480:	dfc00117 	ldw	ra,4(sp)
 2010484:	df000017 	ldw	fp,0(sp)
 2010488:	dec00204 	addi	sp,sp,8
 201048c:	f800283a 	ret

02010490 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 2010490:	defff404 	addi	sp,sp,-48
 2010494:	dfc00b15 	stw	ra,44(sp)
 2010498:	df000a15 	stw	fp,40(sp)
 201049c:	dc000915 	stw	r16,36(sp)
 20104a0:	df000a04 	addi	fp,sp,40
 20104a4:	e13ffb15 	stw	r4,-20(fp)
 20104a8:	e17ffc15 	stw	r5,-16(fp)
 20104ac:	e1bffd15 	stw	r6,-12(fp)
 20104b0:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 20104b4:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 20104b8:	e0bffc17 	ldw	r2,-16(fp)
 20104bc:	10000d1e 	bne	r2,zero,20104f4 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 20104c0:	d4200a17 	ldw	r16,-32728(gp)
 20104c4:	200a17c0 	call	200a17c <__locale_charset>
 20104c8:	1009883a 	mov	r4,r2
 20104cc:	e0fff804 	addi	r3,fp,-32
 20104d0:	e0bffe17 	ldw	r2,-8(fp)
 20104d4:	d8800015 	stw	r2,0(sp)
 20104d8:	200f883a 	mov	r7,r4
 20104dc:	000d883a 	mov	r6,zero
 20104e0:	180b883a 	mov	r5,r3
 20104e4:	e13ffb17 	ldw	r4,-20(fp)
 20104e8:	803ee83a 	callr	r16
 20104ec:	e0bff715 	stw	r2,-36(fp)
 20104f0:	00000b06 	br	2010520 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 20104f4:	d4200a17 	ldw	r16,-32728(gp)
 20104f8:	200a17c0 	call	200a17c <__locale_charset>
 20104fc:	1007883a 	mov	r3,r2
 2010500:	e0bffe17 	ldw	r2,-8(fp)
 2010504:	d8800015 	stw	r2,0(sp)
 2010508:	180f883a 	mov	r7,r3
 201050c:	e1bffd17 	ldw	r6,-12(fp)
 2010510:	e17ffc17 	ldw	r5,-16(fp)
 2010514:	e13ffb17 	ldw	r4,-20(fp)
 2010518:	803ee83a 	callr	r16
 201051c:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2010520:	e0bff717 	ldw	r2,-36(fp)
 2010524:	10bfffd8 	cmpnei	r2,r2,-1
 2010528:	1000071e 	bne	r2,zero,2010548 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 201052c:	e0bffe17 	ldw	r2,-8(fp)
 2010530:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 2010534:	e0bffb17 	ldw	r2,-20(fp)
 2010538:	00c02284 	movi	r3,138
 201053c:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2010540:	00bfffc4 	movi	r2,-1
 2010544:	00000106 	br	201054c <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 2010548:	e0bff717 	ldw	r2,-36(fp)
}
 201054c:	e6ffff04 	addi	sp,fp,-4
 2010550:	dfc00217 	ldw	ra,8(sp)
 2010554:	df000117 	ldw	fp,4(sp)
 2010558:	dc000017 	ldw	r16,0(sp)
 201055c:	dec00304 	addi	sp,sp,12
 2010560:	f800283a 	ret

02010564 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 2010564:	defff404 	addi	sp,sp,-48
 2010568:	dfc00b15 	stw	ra,44(sp)
 201056c:	df000a15 	stw	fp,40(sp)
 2010570:	dc000915 	stw	r16,36(sp)
 2010574:	df000a04 	addi	fp,sp,40
 2010578:	e13ffc15 	stw	r4,-16(fp)
 201057c:	e17ffd15 	stw	r5,-12(fp)
 2010580:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 2010584:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 2010588:	d0a00517 	ldw	r2,-32748(gp)
 201058c:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 2010590:	e0bffc17 	ldw	r2,-16(fp)
 2010594:	10000d1e 	bne	r2,zero,20105cc <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 2010598:	d4200a17 	ldw	r16,-32728(gp)
 201059c:	200a17c0 	call	200a17c <__locale_charset>
 20105a0:	1009883a 	mov	r4,r2
 20105a4:	e0fff904 	addi	r3,fp,-28
 20105a8:	e0bffe17 	ldw	r2,-8(fp)
 20105ac:	d8800015 	stw	r2,0(sp)
 20105b0:	200f883a 	mov	r7,r4
 20105b4:	000d883a 	mov	r6,zero
 20105b8:	180b883a 	mov	r5,r3
 20105bc:	e13ff817 	ldw	r4,-32(fp)
 20105c0:	803ee83a 	callr	r16
 20105c4:	e0bff715 	stw	r2,-36(fp)
 20105c8:	00000b06 	br	20105f8 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 20105cc:	d4200a17 	ldw	r16,-32728(gp)
 20105d0:	200a17c0 	call	200a17c <__locale_charset>
 20105d4:	1007883a 	mov	r3,r2
 20105d8:	e0bffe17 	ldw	r2,-8(fp)
 20105dc:	d8800015 	stw	r2,0(sp)
 20105e0:	180f883a 	mov	r7,r3
 20105e4:	e1bffd17 	ldw	r6,-12(fp)
 20105e8:	e17ffc17 	ldw	r5,-16(fp)
 20105ec:	e13ff817 	ldw	r4,-32(fp)
 20105f0:	803ee83a 	callr	r16
 20105f4:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 20105f8:	e0bff717 	ldw	r2,-36(fp)
 20105fc:	10bfffd8 	cmpnei	r2,r2,-1
 2010600:	1000071e 	bne	r2,zero,2010620 <wcrtomb+0xbc>
    {
      ps->__count = 0;
 2010604:	e0bffe17 	ldw	r2,-8(fp)
 2010608:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 201060c:	e0bff817 	ldw	r2,-32(fp)
 2010610:	00c02284 	movi	r3,138
 2010614:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2010618:	00bfffc4 	movi	r2,-1
 201061c:	00000106 	br	2010624 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 2010620:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2010624:	e6ffff04 	addi	sp,fp,-4
 2010628:	dfc00217 	ldw	ra,8(sp)
 201062c:	df000117 	ldw	fp,4(sp)
 2010630:	dc000017 	ldw	r16,0(sp)
 2010634:	dec00304 	addi	sp,sp,12
 2010638:	f800283a 	ret

0201063c <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 201063c:	defff804 	addi	sp,sp,-32
 2010640:	dfc00715 	stw	ra,28(sp)
 2010644:	df000615 	stw	fp,24(sp)
 2010648:	dc000515 	stw	r16,20(sp)
 201064c:	df000604 	addi	fp,sp,24
 2010650:	e13ffb15 	stw	r4,-20(fp)
 2010654:	e17ffc15 	stw	r5,-16(fp)
 2010658:	e1bffd15 	stw	r6,-12(fp)
 201065c:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 2010660:	d4200a17 	ldw	r16,-32728(gp)
 2010664:	200a17c0 	call	200a17c <__locale_charset>
 2010668:	1007883a 	mov	r3,r2
 201066c:	e0bffe17 	ldw	r2,-8(fp)
 2010670:	d8800015 	stw	r2,0(sp)
 2010674:	180f883a 	mov	r7,r3
 2010678:	e1bffd17 	ldw	r6,-12(fp)
 201067c:	e17ffc17 	ldw	r5,-16(fp)
 2010680:	e13ffb17 	ldw	r4,-20(fp)
 2010684:	803ee83a 	callr	r16
}
 2010688:	e6ffff04 	addi	sp,fp,-4
 201068c:	dfc00217 	ldw	ra,8(sp)
 2010690:	df000117 	ldw	fp,4(sp)
 2010694:	dc000017 	ldw	r16,0(sp)
 2010698:	dec00304 	addi	sp,sp,12
 201069c:	f800283a 	ret

020106a0 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 20106a0:	defffa04 	addi	sp,sp,-24
 20106a4:	df000515 	stw	fp,20(sp)
 20106a8:	df000504 	addi	fp,sp,20
 20106ac:	e13ffc15 	stw	r4,-16(fp)
 20106b0:	e17ffd15 	stw	r5,-12(fp)
 20106b4:	e1bffe15 	stw	r6,-8(fp)
 20106b8:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 20106bc:	e0bffe17 	ldw	r2,-8(fp)
 20106c0:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 20106c4:	e0bffd17 	ldw	r2,-12(fp)
 20106c8:	1000021e 	bne	r2,zero,20106d4 <__ascii_wctomb+0x34>
    return 0;
 20106cc:	0005883a 	mov	r2,zero
 20106d0:	00000d06 	br	2010708 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 20106d4:	e0bffb17 	ldw	r2,-20(fp)
 20106d8:	10804030 	cmpltui	r2,r2,256
 20106dc:	1000051e 	bne	r2,zero,20106f4 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 20106e0:	e0bffc17 	ldw	r2,-16(fp)
 20106e4:	00c02284 	movi	r3,138
 20106e8:	10c00015 	stw	r3,0(r2)
      return -1;
 20106ec:	00bfffc4 	movi	r2,-1
 20106f0:	00000506 	br	2010708 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 20106f4:	e0bffb17 	ldw	r2,-20(fp)
 20106f8:	1007883a 	mov	r3,r2
 20106fc:	e0bffd17 	ldw	r2,-12(fp)
 2010700:	10c00005 	stb	r3,0(r2)
  return 1;
 2010704:	00800044 	movi	r2,1
}
 2010708:	e037883a 	mov	sp,fp
 201070c:	df000017 	ldw	fp,0(sp)
 2010710:	dec00104 	addi	sp,sp,4
 2010714:	f800283a 	ret

02010718 <__udivdi3>:
 2010718:	defff504 	addi	sp,sp,-44
 201071c:	dcc00415 	stw	r19,16(sp)
 2010720:	dc000115 	stw	r16,4(sp)
 2010724:	dfc00a15 	stw	ra,40(sp)
 2010728:	df000915 	stw	fp,36(sp)
 201072c:	ddc00815 	stw	r23,32(sp)
 2010730:	dd800715 	stw	r22,28(sp)
 2010734:	dd400615 	stw	r21,24(sp)
 2010738:	dd000515 	stw	r20,20(sp)
 201073c:	dc800315 	stw	r18,12(sp)
 2010740:	dc400215 	stw	r17,8(sp)
 2010744:	2027883a 	mov	r19,r4
 2010748:	2821883a 	mov	r16,r5
 201074c:	3800411e 	bne	r7,zero,2010854 <__udivdi3+0x13c>
 2010750:	3023883a 	mov	r17,r6
 2010754:	2025883a 	mov	r18,r4
 2010758:	2980522e 	bgeu	r5,r6,20108a4 <__udivdi3+0x18c>
 201075c:	00bfffd4 	movui	r2,65535
 2010760:	282d883a 	mov	r22,r5
 2010764:	1180a836 	bltu	r2,r6,2010a08 <__udivdi3+0x2f0>
 2010768:	00803fc4 	movi	r2,255
 201076c:	1185803a 	cmpltu	r2,r2,r6
 2010770:	100490fa 	slli	r2,r2,3
 2010774:	3086d83a 	srl	r3,r6,r2
 2010778:	010080b4 	movhi	r4,514
 201077c:	21321044 	addi	r4,r4,-14271
 2010780:	20c7883a 	add	r3,r4,r3
 2010784:	18c00003 	ldbu	r3,0(r3)
 2010788:	1885883a 	add	r2,r3,r2
 201078c:	00c00804 	movi	r3,32
 2010790:	1887c83a 	sub	r3,r3,r2
 2010794:	18000526 	beq	r3,zero,20107ac <__udivdi3+0x94>
 2010798:	80e0983a 	sll	r16,r16,r3
 201079c:	9884d83a 	srl	r2,r19,r2
 20107a0:	30e2983a 	sll	r17,r6,r3
 20107a4:	98e4983a 	sll	r18,r19,r3
 20107a8:	142cb03a 	or	r22,r2,r16
 20107ac:	882ad43a 	srli	r21,r17,16
 20107b0:	b009883a 	mov	r4,r22
 20107b4:	8d3fffcc 	andi	r20,r17,65535
 20107b8:	a80b883a 	mov	r5,r21
 20107bc:	2003ee80 	call	2003ee8 <__umodsi3>
 20107c0:	b009883a 	mov	r4,r22
 20107c4:	a80b883a 	mov	r5,r21
 20107c8:	1027883a 	mov	r19,r2
 20107cc:	2003e840 	call	2003e84 <__udivsi3>
 20107d0:	102d883a 	mov	r22,r2
 20107d4:	9826943a 	slli	r19,r19,16
 20107d8:	9004d43a 	srli	r2,r18,16
 20107dc:	a5a1383a 	mul	r16,r20,r22
 20107e0:	14c4b03a 	or	r2,r2,r19
 20107e4:	1400052e 	bgeu	r2,r16,20107fc <__udivdi3+0xe4>
 20107e8:	1445883a 	add	r2,r2,r17
 20107ec:	b0ffffc4 	addi	r3,r22,-1
 20107f0:	14400136 	bltu	r2,r17,20107f8 <__udivdi3+0xe0>
 20107f4:	14012336 	bltu	r2,r16,2010c84 <__udivdi3+0x56c>
 20107f8:	182d883a 	mov	r22,r3
 20107fc:	1421c83a 	sub	r16,r2,r16
 2010800:	a80b883a 	mov	r5,r21
 2010804:	8009883a 	mov	r4,r16
 2010808:	2003ee80 	call	2003ee8 <__umodsi3>
 201080c:	1027883a 	mov	r19,r2
 2010810:	a80b883a 	mov	r5,r21
 2010814:	8009883a 	mov	r4,r16
 2010818:	2003e840 	call	2003e84 <__udivsi3>
 201081c:	9826943a 	slli	r19,r19,16
 2010820:	a0a9383a 	mul	r20,r20,r2
 2010824:	94bfffcc 	andi	r18,r18,65535
 2010828:	94e4b03a 	or	r18,r18,r19
 201082c:	9500052e 	bgeu	r18,r20,2010844 <__udivdi3+0x12c>
 2010830:	8ca5883a 	add	r18,r17,r18
 2010834:	10ffffc4 	addi	r3,r2,-1
 2010838:	9440f136 	bltu	r18,r17,2010c00 <__udivdi3+0x4e8>
 201083c:	9500f02e 	bgeu	r18,r20,2010c00 <__udivdi3+0x4e8>
 2010840:	10bfff84 	addi	r2,r2,-2
 2010844:	b00c943a 	slli	r6,r22,16
 2010848:	0007883a 	mov	r3,zero
 201084c:	3084b03a 	or	r2,r6,r2
 2010850:	00005906 	br	20109b8 <__udivdi3+0x2a0>
 2010854:	29c05636 	bltu	r5,r7,20109b0 <__udivdi3+0x298>
 2010858:	00bfffd4 	movui	r2,65535
 201085c:	11c0622e 	bgeu	r2,r7,20109e8 <__udivdi3+0x2d0>
 2010860:	00804034 	movhi	r2,256
 2010864:	10bfffc4 	addi	r2,r2,-1
 2010868:	11c0ee36 	bltu	r2,r7,2010c24 <__udivdi3+0x50c>
 201086c:	00800404 	movi	r2,16
 2010870:	3886d83a 	srl	r3,r7,r2
 2010874:	010080b4 	movhi	r4,514
 2010878:	21321044 	addi	r4,r4,-14271
 201087c:	20c7883a 	add	r3,r4,r3
 2010880:	18c00003 	ldbu	r3,0(r3)
 2010884:	05400804 	movi	r21,32
 2010888:	1885883a 	add	r2,r3,r2
 201088c:	a8abc83a 	sub	r21,r21,r2
 2010890:	a800621e 	bne	r21,zero,2010a1c <__udivdi3+0x304>
 2010894:	3c00e936 	bltu	r7,r16,2010c3c <__udivdi3+0x524>
 2010898:	9985403a 	cmpgeu	r2,r19,r6
 201089c:	0007883a 	mov	r3,zero
 20108a0:	00004506 	br	20109b8 <__udivdi3+0x2a0>
 20108a4:	3000041e 	bne	r6,zero,20108b8 <__udivdi3+0x1a0>
 20108a8:	000b883a 	mov	r5,zero
 20108ac:	01000044 	movi	r4,1
 20108b0:	2003e840 	call	2003e84 <__udivsi3>
 20108b4:	1023883a 	mov	r17,r2
 20108b8:	00bfffd4 	movui	r2,65535
 20108bc:	14404e2e 	bgeu	r2,r17,20109f8 <__udivdi3+0x2e0>
 20108c0:	00804034 	movhi	r2,256
 20108c4:	10bfffc4 	addi	r2,r2,-1
 20108c8:	1440d836 	bltu	r2,r17,2010c2c <__udivdi3+0x514>
 20108cc:	00800404 	movi	r2,16
 20108d0:	8886d83a 	srl	r3,r17,r2
 20108d4:	010080b4 	movhi	r4,514
 20108d8:	21321044 	addi	r4,r4,-14271
 20108dc:	20c7883a 	add	r3,r4,r3
 20108e0:	18c00003 	ldbu	r3,0(r3)
 20108e4:	1885883a 	add	r2,r3,r2
 20108e8:	00c00804 	movi	r3,32
 20108ec:	1887c83a 	sub	r3,r3,r2
 20108f0:	18008f1e 	bne	r3,zero,2010b30 <__udivdi3+0x418>
 20108f4:	882ad43a 	srli	r21,r17,16
 20108f8:	8461c83a 	sub	r16,r16,r17
 20108fc:	8d3fffcc 	andi	r20,r17,65535
 2010900:	00c00044 	movi	r3,1
 2010904:	8009883a 	mov	r4,r16
 2010908:	a80b883a 	mov	r5,r21
 201090c:	d8c00015 	stw	r3,0(sp)
 2010910:	2003ee80 	call	2003ee8 <__umodsi3>
 2010914:	8009883a 	mov	r4,r16
 2010918:	a80b883a 	mov	r5,r21
 201091c:	1027883a 	mov	r19,r2
 2010920:	2003e840 	call	2003e84 <__udivsi3>
 2010924:	9826943a 	slli	r19,r19,16
 2010928:	9008d43a 	srli	r4,r18,16
 201092c:	1521383a 	mul	r16,r2,r20
 2010930:	102d883a 	mov	r22,r2
 2010934:	24c8b03a 	or	r4,r4,r19
 2010938:	d8c00017 	ldw	r3,0(sp)
 201093c:	2400052e 	bgeu	r4,r16,2010954 <__udivdi3+0x23c>
 2010940:	2449883a 	add	r4,r4,r17
 2010944:	b0bfffc4 	addi	r2,r22,-1
 2010948:	24400136 	bltu	r4,r17,2010950 <__udivdi3+0x238>
 201094c:	2400ca36 	bltu	r4,r16,2010c78 <__udivdi3+0x560>
 2010950:	102d883a 	mov	r22,r2
 2010954:	2421c83a 	sub	r16,r4,r16
 2010958:	a80b883a 	mov	r5,r21
 201095c:	8009883a 	mov	r4,r16
 2010960:	d8c00015 	stw	r3,0(sp)
 2010964:	2003ee80 	call	2003ee8 <__umodsi3>
 2010968:	1027883a 	mov	r19,r2
 201096c:	a80b883a 	mov	r5,r21
 2010970:	8009883a 	mov	r4,r16
 2010974:	2003e840 	call	2003e84 <__udivsi3>
 2010978:	9826943a 	slli	r19,r19,16
 201097c:	1529383a 	mul	r20,r2,r20
 2010980:	94bfffcc 	andi	r18,r18,65535
 2010984:	94e4b03a 	or	r18,r18,r19
 2010988:	d8c00017 	ldw	r3,0(sp)
 201098c:	9500052e 	bgeu	r18,r20,20109a4 <__udivdi3+0x28c>
 2010990:	8ca5883a 	add	r18,r17,r18
 2010994:	113fffc4 	addi	r4,r2,-1
 2010998:	94409736 	bltu	r18,r17,2010bf8 <__udivdi3+0x4e0>
 201099c:	9500962e 	bgeu	r18,r20,2010bf8 <__udivdi3+0x4e0>
 20109a0:	10bfff84 	addi	r2,r2,-2
 20109a4:	b00c943a 	slli	r6,r22,16
 20109a8:	3084b03a 	or	r2,r6,r2
 20109ac:	00000206 	br	20109b8 <__udivdi3+0x2a0>
 20109b0:	0007883a 	mov	r3,zero
 20109b4:	0005883a 	mov	r2,zero
 20109b8:	dfc00a17 	ldw	ra,40(sp)
 20109bc:	df000917 	ldw	fp,36(sp)
 20109c0:	ddc00817 	ldw	r23,32(sp)
 20109c4:	dd800717 	ldw	r22,28(sp)
 20109c8:	dd400617 	ldw	r21,24(sp)
 20109cc:	dd000517 	ldw	r20,20(sp)
 20109d0:	dcc00417 	ldw	r19,16(sp)
 20109d4:	dc800317 	ldw	r18,12(sp)
 20109d8:	dc400217 	ldw	r17,8(sp)
 20109dc:	dc000117 	ldw	r16,4(sp)
 20109e0:	dec00b04 	addi	sp,sp,44
 20109e4:	f800283a 	ret
 20109e8:	00803fc4 	movi	r2,255
 20109ec:	11c5803a 	cmpltu	r2,r2,r7
 20109f0:	100490fa 	slli	r2,r2,3
 20109f4:	003f9e06 	br	2010870 <__udivdi3+0x158>
 20109f8:	00803fc4 	movi	r2,255
 20109fc:	1445803a 	cmpltu	r2,r2,r17
 2010a00:	100490fa 	slli	r2,r2,3
 2010a04:	003fb206 	br	20108d0 <__udivdi3+0x1b8>
 2010a08:	00804034 	movhi	r2,256
 2010a0c:	10bfffc4 	addi	r2,r2,-1
 2010a10:	11808836 	bltu	r2,r6,2010c34 <__udivdi3+0x51c>
 2010a14:	00800404 	movi	r2,16
 2010a18:	003f5606 	br	2010774 <__udivdi3+0x5c>
 2010a1c:	30aed83a 	srl	r23,r6,r2
 2010a20:	3d4e983a 	sll	r7,r7,r21
 2010a24:	80acd83a 	srl	r22,r16,r2
 2010a28:	9884d83a 	srl	r2,r19,r2
 2010a2c:	3deeb03a 	or	r23,r7,r23
 2010a30:	b824d43a 	srli	r18,r23,16
 2010a34:	8560983a 	sll	r16,r16,r21
 2010a38:	b009883a 	mov	r4,r22
 2010a3c:	900b883a 	mov	r5,r18
 2010a40:	3568983a 	sll	r20,r6,r21
 2010a44:	1420b03a 	or	r16,r2,r16
 2010a48:	2003ee80 	call	2003ee8 <__umodsi3>
 2010a4c:	b009883a 	mov	r4,r22
 2010a50:	900b883a 	mov	r5,r18
 2010a54:	1023883a 	mov	r17,r2
 2010a58:	2003e840 	call	2003e84 <__udivsi3>
 2010a5c:	8808943a 	slli	r4,r17,16
 2010a60:	bf3fffcc 	andi	fp,r23,65535
 2010a64:	8006d43a 	srli	r3,r16,16
 2010a68:	e0a3383a 	mul	r17,fp,r2
 2010a6c:	100d883a 	mov	r6,r2
 2010a70:	1906b03a 	or	r3,r3,r4
 2010a74:	1c40042e 	bgeu	r3,r17,2010a88 <__udivdi3+0x370>
 2010a78:	1dc7883a 	add	r3,r3,r23
 2010a7c:	10bfffc4 	addi	r2,r2,-1
 2010a80:	1dc0752e 	bgeu	r3,r23,2010c58 <__udivdi3+0x540>
 2010a84:	100d883a 	mov	r6,r2
 2010a88:	1c63c83a 	sub	r17,r3,r17
 2010a8c:	900b883a 	mov	r5,r18
 2010a90:	8809883a 	mov	r4,r17
 2010a94:	d9800015 	stw	r6,0(sp)
 2010a98:	2003ee80 	call	2003ee8 <__umodsi3>
 2010a9c:	102d883a 	mov	r22,r2
 2010aa0:	8809883a 	mov	r4,r17
 2010aa4:	900b883a 	mov	r5,r18
 2010aa8:	2003e840 	call	2003e84 <__udivsi3>
 2010aac:	b02c943a 	slli	r22,r22,16
 2010ab0:	e089383a 	mul	r4,fp,r2
 2010ab4:	843fffcc 	andi	r16,r16,65535
 2010ab8:	85a0b03a 	or	r16,r16,r22
 2010abc:	d9800017 	ldw	r6,0(sp)
 2010ac0:	8100042e 	bgeu	r16,r4,2010ad4 <__udivdi3+0x3bc>
 2010ac4:	85e1883a 	add	r16,r16,r23
 2010ac8:	10ffffc4 	addi	r3,r2,-1
 2010acc:	85c05e2e 	bgeu	r16,r23,2010c48 <__udivdi3+0x530>
 2010ad0:	1805883a 	mov	r2,r3
 2010ad4:	300c943a 	slli	r6,r6,16
 2010ad8:	a17fffcc 	andi	r5,r20,65535
 2010adc:	a028d43a 	srli	r20,r20,16
 2010ae0:	3084b03a 	or	r2,r6,r2
 2010ae4:	10ffffcc 	andi	r3,r2,65535
 2010ae8:	100cd43a 	srli	r6,r2,16
 2010aec:	194f383a 	mul	r7,r3,r5
 2010af0:	1d07383a 	mul	r3,r3,r20
 2010af4:	314b383a 	mul	r5,r6,r5
 2010af8:	3810d43a 	srli	r8,r7,16
 2010afc:	8121c83a 	sub	r16,r16,r4
 2010b00:	1947883a 	add	r3,r3,r5
 2010b04:	40c7883a 	add	r3,r8,r3
 2010b08:	350d383a 	mul	r6,r6,r20
 2010b0c:	1940022e 	bgeu	r3,r5,2010b18 <__udivdi3+0x400>
 2010b10:	01000074 	movhi	r4,1
 2010b14:	310d883a 	add	r6,r6,r4
 2010b18:	1828d43a 	srli	r20,r3,16
 2010b1c:	a18d883a 	add	r6,r20,r6
 2010b20:	81803e36 	bltu	r16,r6,2010c1c <__udivdi3+0x504>
 2010b24:	81803826 	beq	r16,r6,2010c08 <__udivdi3+0x4f0>
 2010b28:	0007883a 	mov	r3,zero
 2010b2c:	003fa206 	br	20109b8 <__udivdi3+0x2a0>
 2010b30:	88e2983a 	sll	r17,r17,r3
 2010b34:	80a8d83a 	srl	r20,r16,r2
 2010b38:	80e0983a 	sll	r16,r16,r3
 2010b3c:	882ad43a 	srli	r21,r17,16
 2010b40:	9884d83a 	srl	r2,r19,r2
 2010b44:	a009883a 	mov	r4,r20
 2010b48:	a80b883a 	mov	r5,r21
 2010b4c:	142eb03a 	or	r23,r2,r16
 2010b50:	98e4983a 	sll	r18,r19,r3
 2010b54:	2003ee80 	call	2003ee8 <__umodsi3>
 2010b58:	a009883a 	mov	r4,r20
 2010b5c:	a80b883a 	mov	r5,r21
 2010b60:	1021883a 	mov	r16,r2
 2010b64:	2003e840 	call	2003e84 <__udivsi3>
 2010b68:	1039883a 	mov	fp,r2
 2010b6c:	8d3fffcc 	andi	r20,r17,65535
 2010b70:	8020943a 	slli	r16,r16,16
 2010b74:	b804d43a 	srli	r2,r23,16
 2010b78:	a72d383a 	mul	r22,r20,fp
 2010b7c:	1404b03a 	or	r2,r2,r16
 2010b80:	1580062e 	bgeu	r2,r22,2010b9c <__udivdi3+0x484>
 2010b84:	1445883a 	add	r2,r2,r17
 2010b88:	e0ffffc4 	addi	r3,fp,-1
 2010b8c:	14403836 	bltu	r2,r17,2010c70 <__udivdi3+0x558>
 2010b90:	1580372e 	bgeu	r2,r22,2010c70 <__udivdi3+0x558>
 2010b94:	e73fff84 	addi	fp,fp,-2
 2010b98:	1445883a 	add	r2,r2,r17
 2010b9c:	15adc83a 	sub	r22,r2,r22
 2010ba0:	a80b883a 	mov	r5,r21
 2010ba4:	b009883a 	mov	r4,r22
 2010ba8:	2003ee80 	call	2003ee8 <__umodsi3>
 2010bac:	1027883a 	mov	r19,r2
 2010bb0:	b009883a 	mov	r4,r22
 2010bb4:	a80b883a 	mov	r5,r21
 2010bb8:	2003e840 	call	2003e84 <__udivsi3>
 2010bbc:	9826943a 	slli	r19,r19,16
 2010bc0:	a0a1383a 	mul	r16,r20,r2
 2010bc4:	b93fffcc 	andi	r4,r23,65535
 2010bc8:	24c8b03a 	or	r4,r4,r19
 2010bcc:	2400062e 	bgeu	r4,r16,2010be8 <__udivdi3+0x4d0>
 2010bd0:	2449883a 	add	r4,r4,r17
 2010bd4:	10ffffc4 	addi	r3,r2,-1
 2010bd8:	24402336 	bltu	r4,r17,2010c68 <__udivdi3+0x550>
 2010bdc:	2400222e 	bgeu	r4,r16,2010c68 <__udivdi3+0x550>
 2010be0:	10bfff84 	addi	r2,r2,-2
 2010be4:	2449883a 	add	r4,r4,r17
 2010be8:	e038943a 	slli	fp,fp,16
 2010bec:	2421c83a 	sub	r16,r4,r16
 2010bf0:	e086b03a 	or	r3,fp,r2
 2010bf4:	003f4306 	br	2010904 <__udivdi3+0x1ec>
 2010bf8:	2005883a 	mov	r2,r4
 2010bfc:	003f6906 	br	20109a4 <__udivdi3+0x28c>
 2010c00:	1805883a 	mov	r2,r3
 2010c04:	003f0f06 	br	2010844 <__udivdi3+0x12c>
 2010c08:	1806943a 	slli	r3,r3,16
 2010c0c:	9d66983a 	sll	r19,r19,r21
 2010c10:	39ffffcc 	andi	r7,r7,65535
 2010c14:	19c7883a 	add	r3,r3,r7
 2010c18:	98ffc32e 	bgeu	r19,r3,2010b28 <__udivdi3+0x410>
 2010c1c:	10bfffc4 	addi	r2,r2,-1
 2010c20:	003fc106 	br	2010b28 <__udivdi3+0x410>
 2010c24:	00800604 	movi	r2,24
 2010c28:	003f1106 	br	2010870 <__udivdi3+0x158>
 2010c2c:	00800604 	movi	r2,24
 2010c30:	003f2706 	br	20108d0 <__udivdi3+0x1b8>
 2010c34:	00800604 	movi	r2,24
 2010c38:	003ece06 	br	2010774 <__udivdi3+0x5c>
 2010c3c:	0007883a 	mov	r3,zero
 2010c40:	00800044 	movi	r2,1
 2010c44:	003f5c06 	br	20109b8 <__udivdi3+0x2a0>
 2010c48:	813fa12e 	bgeu	r16,r4,2010ad0 <__udivdi3+0x3b8>
 2010c4c:	10bfff84 	addi	r2,r2,-2
 2010c50:	85e1883a 	add	r16,r16,r23
 2010c54:	003f9f06 	br	2010ad4 <__udivdi3+0x3bc>
 2010c58:	1c7f8a2e 	bgeu	r3,r17,2010a84 <__udivdi3+0x36c>
 2010c5c:	31bfff84 	addi	r6,r6,-2
 2010c60:	1dc7883a 	add	r3,r3,r23
 2010c64:	003f8806 	br	2010a88 <__udivdi3+0x370>
 2010c68:	1805883a 	mov	r2,r3
 2010c6c:	003fde06 	br	2010be8 <__udivdi3+0x4d0>
 2010c70:	1839883a 	mov	fp,r3
 2010c74:	003fc906 	br	2010b9c <__udivdi3+0x484>
 2010c78:	b5bfff84 	addi	r22,r22,-2
 2010c7c:	2449883a 	add	r4,r4,r17
 2010c80:	003f3406 	br	2010954 <__udivdi3+0x23c>
 2010c84:	b5bfff84 	addi	r22,r22,-2
 2010c88:	1445883a 	add	r2,r2,r17
 2010c8c:	003edb06 	br	20107fc <__udivdi3+0xe4>

02010c90 <__umoddi3>:
 2010c90:	defff404 	addi	sp,sp,-48
 2010c94:	df000a15 	stw	fp,40(sp)
 2010c98:	dc400315 	stw	r17,12(sp)
 2010c9c:	dc000215 	stw	r16,8(sp)
 2010ca0:	dfc00b15 	stw	ra,44(sp)
 2010ca4:	ddc00915 	stw	r23,36(sp)
 2010ca8:	dd800815 	stw	r22,32(sp)
 2010cac:	dd400715 	stw	r21,28(sp)
 2010cb0:	dd000615 	stw	r20,24(sp)
 2010cb4:	dcc00515 	stw	r19,20(sp)
 2010cb8:	dc800415 	stw	r18,16(sp)
 2010cbc:	2021883a 	mov	r16,r4
 2010cc0:	2823883a 	mov	r17,r5
 2010cc4:	2839883a 	mov	fp,r5
 2010cc8:	38003c1e 	bne	r7,zero,2010dbc <__umoddi3+0x12c>
 2010ccc:	3027883a 	mov	r19,r6
 2010cd0:	2029883a 	mov	r20,r4
 2010cd4:	2980512e 	bgeu	r5,r6,2010e1c <__umoddi3+0x18c>
 2010cd8:	00bfffd4 	movui	r2,65535
 2010cdc:	11809a36 	bltu	r2,r6,2010f48 <__umoddi3+0x2b8>
 2010ce0:	01003fc4 	movi	r4,255
 2010ce4:	2189803a 	cmpltu	r4,r4,r6
 2010ce8:	200890fa 	slli	r4,r4,3
 2010cec:	3104d83a 	srl	r2,r6,r4
 2010cf0:	00c080b4 	movhi	r3,514
 2010cf4:	18f21044 	addi	r3,r3,-14271
 2010cf8:	1885883a 	add	r2,r3,r2
 2010cfc:	10c00003 	ldbu	r3,0(r2)
 2010d00:	00800804 	movi	r2,32
 2010d04:	1909883a 	add	r4,r3,r4
 2010d08:	1125c83a 	sub	r18,r2,r4
 2010d0c:	90000526 	beq	r18,zero,2010d24 <__umoddi3+0x94>
 2010d10:	8ca2983a 	sll	r17,r17,r18
 2010d14:	8108d83a 	srl	r4,r16,r4
 2010d18:	34a6983a 	sll	r19,r6,r18
 2010d1c:	84a8983a 	sll	r20,r16,r18
 2010d20:	2478b03a 	or	fp,r4,r17
 2010d24:	982ed43a 	srli	r23,r19,16
 2010d28:	e009883a 	mov	r4,fp
 2010d2c:	9dbfffcc 	andi	r22,r19,65535
 2010d30:	b80b883a 	mov	r5,r23
 2010d34:	2003ee80 	call	2003ee8 <__umodsi3>
 2010d38:	e009883a 	mov	r4,fp
 2010d3c:	b80b883a 	mov	r5,r23
 2010d40:	102b883a 	mov	r21,r2
 2010d44:	2003e840 	call	2003e84 <__udivsi3>
 2010d48:	a806943a 	slli	r3,r21,16
 2010d4c:	a008d43a 	srli	r4,r20,16
 2010d50:	b085383a 	mul	r2,r22,r2
 2010d54:	20c8b03a 	or	r4,r4,r3
 2010d58:	2080032e 	bgeu	r4,r2,2010d68 <__umoddi3+0xd8>
 2010d5c:	24c9883a 	add	r4,r4,r19
 2010d60:	24c00136 	bltu	r4,r19,2010d68 <__umoddi3+0xd8>
 2010d64:	20811036 	bltu	r4,r2,20111a8 <__umoddi3+0x518>
 2010d68:	20abc83a 	sub	r21,r4,r2
 2010d6c:	b80b883a 	mov	r5,r23
 2010d70:	a809883a 	mov	r4,r21
 2010d74:	2003ee80 	call	2003ee8 <__umodsi3>
 2010d78:	1023883a 	mov	r17,r2
 2010d7c:	b80b883a 	mov	r5,r23
 2010d80:	a809883a 	mov	r4,r21
 2010d84:	2003e840 	call	2003e84 <__udivsi3>
 2010d88:	8822943a 	slli	r17,r17,16
 2010d8c:	b085383a 	mul	r2,r22,r2
 2010d90:	a0ffffcc 	andi	r3,r20,65535
 2010d94:	1c46b03a 	or	r3,r3,r17
 2010d98:	1880042e 	bgeu	r3,r2,2010dac <__umoddi3+0x11c>
 2010d9c:	1cc7883a 	add	r3,r3,r19
 2010da0:	1cc00236 	bltu	r3,r19,2010dac <__umoddi3+0x11c>
 2010da4:	1880012e 	bgeu	r3,r2,2010dac <__umoddi3+0x11c>
 2010da8:	1cc7883a 	add	r3,r3,r19
 2010dac:	1885c83a 	sub	r2,r3,r2
 2010db0:	1484d83a 	srl	r2,r2,r18
 2010db4:	0007883a 	mov	r3,zero
 2010db8:	00004f06 	br	2010ef8 <__umoddi3+0x268>
 2010dbc:	29c04c36 	bltu	r5,r7,2010ef0 <__umoddi3+0x260>
 2010dc0:	00bfffd4 	movui	r2,65535
 2010dc4:	11c0582e 	bgeu	r2,r7,2010f28 <__umoddi3+0x298>
 2010dc8:	00804034 	movhi	r2,256
 2010dcc:	10bfffc4 	addi	r2,r2,-1
 2010dd0:	11c0e736 	bltu	r2,r7,2011170 <__umoddi3+0x4e0>
 2010dd4:	01000404 	movi	r4,16
 2010dd8:	3904d83a 	srl	r2,r7,r4
 2010ddc:	00c080b4 	movhi	r3,514
 2010de0:	18f21044 	addi	r3,r3,-14271
 2010de4:	1885883a 	add	r2,r3,r2
 2010de8:	14c00003 	ldbu	r19,0(r2)
 2010dec:	00c00804 	movi	r3,32
 2010df0:	9927883a 	add	r19,r19,r4
 2010df4:	1ce9c83a 	sub	r20,r3,r19
 2010df8:	a000581e 	bne	r20,zero,2010f5c <__umoddi3+0x2cc>
 2010dfc:	3c400136 	bltu	r7,r17,2010e04 <__umoddi3+0x174>
 2010e00:	8180eb36 	bltu	r16,r6,20111b0 <__umoddi3+0x520>
 2010e04:	8185c83a 	sub	r2,r16,r6
 2010e08:	89e3c83a 	sub	r17,r17,r7
 2010e0c:	8089803a 	cmpltu	r4,r16,r2
 2010e10:	8939c83a 	sub	fp,r17,r4
 2010e14:	e007883a 	mov	r3,fp
 2010e18:	00003706 	br	2010ef8 <__umoddi3+0x268>
 2010e1c:	3000041e 	bne	r6,zero,2010e30 <__umoddi3+0x1a0>
 2010e20:	000b883a 	mov	r5,zero
 2010e24:	01000044 	movi	r4,1
 2010e28:	2003e840 	call	2003e84 <__udivsi3>
 2010e2c:	1027883a 	mov	r19,r2
 2010e30:	00bfffd4 	movui	r2,65535
 2010e34:	14c0402e 	bgeu	r2,r19,2010f38 <__umoddi3+0x2a8>
 2010e38:	00804034 	movhi	r2,256
 2010e3c:	10bfffc4 	addi	r2,r2,-1
 2010e40:	14c0cd36 	bltu	r2,r19,2011178 <__umoddi3+0x4e8>
 2010e44:	00800404 	movi	r2,16
 2010e48:	9886d83a 	srl	r3,r19,r2
 2010e4c:	010080b4 	movhi	r4,514
 2010e50:	21321044 	addi	r4,r4,-14271
 2010e54:	20c7883a 	add	r3,r4,r3
 2010e58:	18c00003 	ldbu	r3,0(r3)
 2010e5c:	1887883a 	add	r3,r3,r2
 2010e60:	00800804 	movi	r2,32
 2010e64:	10e5c83a 	sub	r18,r2,r3
 2010e68:	9000901e 	bne	r18,zero,20110ac <__umoddi3+0x41c>
 2010e6c:	982cd43a 	srli	r22,r19,16
 2010e70:	8ce3c83a 	sub	r17,r17,r19
 2010e74:	9d7fffcc 	andi	r21,r19,65535
 2010e78:	b00b883a 	mov	r5,r22
 2010e7c:	8809883a 	mov	r4,r17
 2010e80:	2003ee80 	call	2003ee8 <__umodsi3>
 2010e84:	8809883a 	mov	r4,r17
 2010e88:	b00b883a 	mov	r5,r22
 2010e8c:	1021883a 	mov	r16,r2
 2010e90:	2003e840 	call	2003e84 <__udivsi3>
 2010e94:	8006943a 	slli	r3,r16,16
 2010e98:	a008d43a 	srli	r4,r20,16
 2010e9c:	1545383a 	mul	r2,r2,r21
 2010ea0:	20c8b03a 	or	r4,r4,r3
 2010ea4:	2080042e 	bgeu	r4,r2,2010eb8 <__umoddi3+0x228>
 2010ea8:	24c9883a 	add	r4,r4,r19
 2010eac:	24c00236 	bltu	r4,r19,2010eb8 <__umoddi3+0x228>
 2010eb0:	2080012e 	bgeu	r4,r2,2010eb8 <__umoddi3+0x228>
 2010eb4:	24c9883a 	add	r4,r4,r19
 2010eb8:	20a1c83a 	sub	r16,r4,r2
 2010ebc:	b00b883a 	mov	r5,r22
 2010ec0:	8009883a 	mov	r4,r16
 2010ec4:	2003ee80 	call	2003ee8 <__umodsi3>
 2010ec8:	1023883a 	mov	r17,r2
 2010ecc:	b00b883a 	mov	r5,r22
 2010ed0:	8009883a 	mov	r4,r16
 2010ed4:	2003e840 	call	2003e84 <__udivsi3>
 2010ed8:	8822943a 	slli	r17,r17,16
 2010edc:	1545383a 	mul	r2,r2,r21
 2010ee0:	a53fffcc 	andi	r20,r20,65535
 2010ee4:	a446b03a 	or	r3,r20,r17
 2010ee8:	18bfb02e 	bgeu	r3,r2,2010dac <__umoddi3+0x11c>
 2010eec:	003fab06 	br	2010d9c <__umoddi3+0x10c>
 2010ef0:	2005883a 	mov	r2,r4
 2010ef4:	2807883a 	mov	r3,r5
 2010ef8:	dfc00b17 	ldw	ra,44(sp)
 2010efc:	df000a17 	ldw	fp,40(sp)
 2010f00:	ddc00917 	ldw	r23,36(sp)
 2010f04:	dd800817 	ldw	r22,32(sp)
 2010f08:	dd400717 	ldw	r21,28(sp)
 2010f0c:	dd000617 	ldw	r20,24(sp)
 2010f10:	dcc00517 	ldw	r19,20(sp)
 2010f14:	dc800417 	ldw	r18,16(sp)
 2010f18:	dc400317 	ldw	r17,12(sp)
 2010f1c:	dc000217 	ldw	r16,8(sp)
 2010f20:	dec00c04 	addi	sp,sp,48
 2010f24:	f800283a 	ret
 2010f28:	04c03fc4 	movi	r19,255
 2010f2c:	99c9803a 	cmpltu	r4,r19,r7
 2010f30:	200890fa 	slli	r4,r4,3
 2010f34:	003fa806 	br	2010dd8 <__umoddi3+0x148>
 2010f38:	00803fc4 	movi	r2,255
 2010f3c:	14c5803a 	cmpltu	r2,r2,r19
 2010f40:	100490fa 	slli	r2,r2,3
 2010f44:	003fc006 	br	2010e48 <__umoddi3+0x1b8>
 2010f48:	00804034 	movhi	r2,256
 2010f4c:	10bfffc4 	addi	r2,r2,-1
 2010f50:	11808b36 	bltu	r2,r6,2011180 <__umoddi3+0x4f0>
 2010f54:	01000404 	movi	r4,16
 2010f58:	003f6406 	br	2010cec <__umoddi3+0x5c>
 2010f5c:	34c4d83a 	srl	r2,r6,r19
 2010f60:	3d0e983a 	sll	r7,r7,r20
 2010f64:	8cf8d83a 	srl	fp,r17,r19
 2010f68:	8d10983a 	sll	r8,r17,r20
 2010f6c:	38aab03a 	or	r21,r7,r2
 2010f70:	a82cd43a 	srli	r22,r21,16
 2010f74:	84e2d83a 	srl	r17,r16,r19
 2010f78:	e009883a 	mov	r4,fp
 2010f7c:	b00b883a 	mov	r5,r22
 2010f80:	8a22b03a 	or	r17,r17,r8
 2010f84:	3524983a 	sll	r18,r6,r20
 2010f88:	2003ee80 	call	2003ee8 <__umodsi3>
 2010f8c:	e009883a 	mov	r4,fp
 2010f90:	b00b883a 	mov	r5,r22
 2010f94:	102f883a 	mov	r23,r2
 2010f98:	2003e840 	call	2003e84 <__udivsi3>
 2010f9c:	100d883a 	mov	r6,r2
 2010fa0:	b808943a 	slli	r4,r23,16
 2010fa4:	aa3fffcc 	andi	r8,r21,65535
 2010fa8:	8804d43a 	srli	r2,r17,16
 2010fac:	41af383a 	mul	r23,r8,r6
 2010fb0:	8520983a 	sll	r16,r16,r20
 2010fb4:	1104b03a 	or	r2,r2,r4
 2010fb8:	15c0042e 	bgeu	r2,r23,2010fcc <__umoddi3+0x33c>
 2010fbc:	1545883a 	add	r2,r2,r21
 2010fc0:	30ffffc4 	addi	r3,r6,-1
 2010fc4:	1540742e 	bgeu	r2,r21,2011198 <__umoddi3+0x508>
 2010fc8:	180d883a 	mov	r6,r3
 2010fcc:	15efc83a 	sub	r23,r2,r23
 2010fd0:	b00b883a 	mov	r5,r22
 2010fd4:	b809883a 	mov	r4,r23
 2010fd8:	d9800115 	stw	r6,4(sp)
 2010fdc:	da000015 	stw	r8,0(sp)
 2010fe0:	2003ee80 	call	2003ee8 <__umodsi3>
 2010fe4:	b00b883a 	mov	r5,r22
 2010fe8:	b809883a 	mov	r4,r23
 2010fec:	1039883a 	mov	fp,r2
 2010ff0:	2003e840 	call	2003e84 <__udivsi3>
 2010ff4:	da000017 	ldw	r8,0(sp)
 2010ff8:	e038943a 	slli	fp,fp,16
 2010ffc:	100b883a 	mov	r5,r2
 2011000:	4089383a 	mul	r4,r8,r2
 2011004:	8a3fffcc 	andi	r8,r17,65535
 2011008:	4710b03a 	or	r8,r8,fp
 201100c:	d9800117 	ldw	r6,4(sp)
 2011010:	4100042e 	bgeu	r8,r4,2011024 <__umoddi3+0x394>
 2011014:	4551883a 	add	r8,r8,r21
 2011018:	10bfffc4 	addi	r2,r2,-1
 201101c:	45405a2e 	bgeu	r8,r21,2011188 <__umoddi3+0x4f8>
 2011020:	100b883a 	mov	r5,r2
 2011024:	300c943a 	slli	r6,r6,16
 2011028:	91ffffcc 	andi	r7,r18,65535
 201102c:	9004d43a 	srli	r2,r18,16
 2011030:	314cb03a 	or	r6,r6,r5
 2011034:	317fffcc 	andi	r5,r6,65535
 2011038:	300cd43a 	srli	r6,r6,16
 201103c:	29d3383a 	mul	r9,r5,r7
 2011040:	288b383a 	mul	r5,r5,r2
 2011044:	31cf383a 	mul	r7,r6,r7
 2011048:	4806d43a 	srli	r3,r9,16
 201104c:	4111c83a 	sub	r8,r8,r4
 2011050:	29cb883a 	add	r5,r5,r7
 2011054:	194b883a 	add	r5,r3,r5
 2011058:	3085383a 	mul	r2,r6,r2
 201105c:	29c0022e 	bgeu	r5,r7,2011068 <__umoddi3+0x3d8>
 2011060:	00c00074 	movhi	r3,1
 2011064:	10c5883a 	add	r2,r2,r3
 2011068:	2808d43a 	srli	r4,r5,16
 201106c:	280a943a 	slli	r5,r5,16
 2011070:	4a7fffcc 	andi	r9,r9,65535
 2011074:	2085883a 	add	r2,r4,r2
 2011078:	2a4b883a 	add	r5,r5,r9
 201107c:	40803636 	bltu	r8,r2,2011158 <__umoddi3+0x4c8>
 2011080:	40804d26 	beq	r8,r2,20111b8 <__umoddi3+0x528>
 2011084:	4089c83a 	sub	r4,r8,r2
 2011088:	280f883a 	mov	r7,r5
 201108c:	81cfc83a 	sub	r7,r16,r7
 2011090:	81c7803a 	cmpltu	r3,r16,r7
 2011094:	20c7c83a 	sub	r3,r4,r3
 2011098:	1cc4983a 	sll	r2,r3,r19
 201109c:	3d0ed83a 	srl	r7,r7,r20
 20110a0:	1d06d83a 	srl	r3,r3,r20
 20110a4:	11c4b03a 	or	r2,r2,r7
 20110a8:	003f9306 	br	2010ef8 <__umoddi3+0x268>
 20110ac:	9ca6983a 	sll	r19,r19,r18
 20110b0:	88e8d83a 	srl	r20,r17,r3
 20110b4:	80c4d83a 	srl	r2,r16,r3
 20110b8:	982cd43a 	srli	r22,r19,16
 20110bc:	8ca2983a 	sll	r17,r17,r18
 20110c0:	a009883a 	mov	r4,r20
 20110c4:	b00b883a 	mov	r5,r22
 20110c8:	1478b03a 	or	fp,r2,r17
 20110cc:	2003ee80 	call	2003ee8 <__umodsi3>
 20110d0:	a009883a 	mov	r4,r20
 20110d4:	b00b883a 	mov	r5,r22
 20110d8:	1023883a 	mov	r17,r2
 20110dc:	2003e840 	call	2003e84 <__udivsi3>
 20110e0:	9d7fffcc 	andi	r21,r19,65535
 20110e4:	880a943a 	slli	r5,r17,16
 20110e8:	e008d43a 	srli	r4,fp,16
 20110ec:	a885383a 	mul	r2,r21,r2
 20110f0:	84a8983a 	sll	r20,r16,r18
 20110f4:	2148b03a 	or	r4,r4,r5
 20110f8:	2080042e 	bgeu	r4,r2,201110c <__umoddi3+0x47c>
 20110fc:	24c9883a 	add	r4,r4,r19
 2011100:	24c00236 	bltu	r4,r19,201110c <__umoddi3+0x47c>
 2011104:	2080012e 	bgeu	r4,r2,201110c <__umoddi3+0x47c>
 2011108:	24c9883a 	add	r4,r4,r19
 201110c:	20a3c83a 	sub	r17,r4,r2
 2011110:	b00b883a 	mov	r5,r22
 2011114:	8809883a 	mov	r4,r17
 2011118:	2003ee80 	call	2003ee8 <__umodsi3>
 201111c:	102f883a 	mov	r23,r2
 2011120:	8809883a 	mov	r4,r17
 2011124:	b00b883a 	mov	r5,r22
 2011128:	2003e840 	call	2003e84 <__udivsi3>
 201112c:	b82e943a 	slli	r23,r23,16
 2011130:	a885383a 	mul	r2,r21,r2
 2011134:	e13fffcc 	andi	r4,fp,65535
 2011138:	25c8b03a 	or	r4,r4,r23
 201113c:	2080042e 	bgeu	r4,r2,2011150 <__umoddi3+0x4c0>
 2011140:	24c9883a 	add	r4,r4,r19
 2011144:	24c00236 	bltu	r4,r19,2011150 <__umoddi3+0x4c0>
 2011148:	2080012e 	bgeu	r4,r2,2011150 <__umoddi3+0x4c0>
 201114c:	24c9883a 	add	r4,r4,r19
 2011150:	20a3c83a 	sub	r17,r4,r2
 2011154:	003f4806 	br	2010e78 <__umoddi3+0x1e8>
 2011158:	2c8fc83a 	sub	r7,r5,r18
 201115c:	1545c83a 	sub	r2,r2,r21
 2011160:	29cb803a 	cmpltu	r5,r5,r7
 2011164:	1145c83a 	sub	r2,r2,r5
 2011168:	4089c83a 	sub	r4,r8,r2
 201116c:	003fc706 	br	201108c <__umoddi3+0x3fc>
 2011170:	01000604 	movi	r4,24
 2011174:	003f1806 	br	2010dd8 <__umoddi3+0x148>
 2011178:	00800604 	movi	r2,24
 201117c:	003f3206 	br	2010e48 <__umoddi3+0x1b8>
 2011180:	01000604 	movi	r4,24
 2011184:	003ed906 	br	2010cec <__umoddi3+0x5c>
 2011188:	413fa52e 	bgeu	r8,r4,2011020 <__umoddi3+0x390>
 201118c:	297fff84 	addi	r5,r5,-2
 2011190:	4551883a 	add	r8,r8,r21
 2011194:	003fa306 	br	2011024 <__umoddi3+0x394>
 2011198:	15ff8b2e 	bgeu	r2,r23,2010fc8 <__umoddi3+0x338>
 201119c:	31bfff84 	addi	r6,r6,-2
 20111a0:	1545883a 	add	r2,r2,r21
 20111a4:	003f8906 	br	2010fcc <__umoddi3+0x33c>
 20111a8:	24c9883a 	add	r4,r4,r19
 20111ac:	003eee06 	br	2010d68 <__umoddi3+0xd8>
 20111b0:	8005883a 	mov	r2,r16
 20111b4:	003f1706 	br	2010e14 <__umoddi3+0x184>
 20111b8:	817fe736 	bltu	r16,r5,2011158 <__umoddi3+0x4c8>
 20111bc:	280f883a 	mov	r7,r5
 20111c0:	0009883a 	mov	r4,zero
 20111c4:	003fb106 	br	201108c <__umoddi3+0x3fc>

020111c8 <__floatunsidf>:
 20111c8:	defffe04 	addi	sp,sp,-8
 20111cc:	dc000015 	stw	r16,0(sp)
 20111d0:	dfc00115 	stw	ra,4(sp)
 20111d4:	2021883a 	mov	r16,r4
 20111d8:	20002226 	beq	r4,zero,2011264 <__floatunsidf+0x9c>
 20111dc:	2003d280 	call	2003d28 <__clzsi2>
 20111e0:	01010784 	movi	r4,1054
 20111e4:	2089c83a 	sub	r4,r4,r2
 20111e8:	01810cc4 	movi	r6,1075
 20111ec:	310dc83a 	sub	r6,r6,r4
 20111f0:	00c007c4 	movi	r3,31
 20111f4:	1980120e 	bge	r3,r6,2011240 <__floatunsidf+0x78>
 20111f8:	00c104c4 	movi	r3,1043
 20111fc:	1907c83a 	sub	r3,r3,r4
 2011200:	80ca983a 	sll	r5,r16,r3
 2011204:	00800434 	movhi	r2,16
 2011208:	10bfffc4 	addi	r2,r2,-1
 201120c:	2101ffcc 	andi	r4,r4,2047
 2011210:	0021883a 	mov	r16,zero
 2011214:	288a703a 	and	r5,r5,r2
 2011218:	2008953a 	slli	r4,r4,20
 201121c:	00c00434 	movhi	r3,16
 2011220:	18ffffc4 	addi	r3,r3,-1
 2011224:	28c6703a 	and	r3,r5,r3
 2011228:	8005883a 	mov	r2,r16
 201122c:	1906b03a 	or	r3,r3,r4
 2011230:	dfc00117 	ldw	ra,4(sp)
 2011234:	dc000017 	ldw	r16,0(sp)
 2011238:	dec00204 	addi	sp,sp,8
 201123c:	f800283a 	ret
 2011240:	00c002c4 	movi	r3,11
 2011244:	188bc83a 	sub	r5,r3,r2
 2011248:	814ad83a 	srl	r5,r16,r5
 201124c:	00c00434 	movhi	r3,16
 2011250:	18ffffc4 	addi	r3,r3,-1
 2011254:	81a0983a 	sll	r16,r16,r6
 2011258:	2101ffcc 	andi	r4,r4,2047
 201125c:	28ca703a 	and	r5,r5,r3
 2011260:	003fed06 	br	2011218 <__floatunsidf+0x50>
 2011264:	0009883a 	mov	r4,zero
 2011268:	000b883a 	mov	r5,zero
 201126c:	003fea06 	br	2011218 <__floatunsidf+0x50>

02011270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011270:	defffe04 	addi	sp,sp,-8
 2011274:	dfc00115 	stw	ra,4(sp)
 2011278:	df000015 	stw	fp,0(sp)
 201127c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2011280:	d0a01017 	ldw	r2,-32704(gp)
 2011284:	10000326 	beq	r2,zero,2011294 <alt_get_errno+0x24>
 2011288:	d0a01017 	ldw	r2,-32704(gp)
 201128c:	103ee83a 	callr	r2
 2011290:	00000106 	br	2011298 <alt_get_errno+0x28>
 2011294:	d0a72204 	addi	r2,gp,-25464
}
 2011298:	e037883a 	mov	sp,fp
 201129c:	dfc00117 	ldw	ra,4(sp)
 20112a0:	df000017 	ldw	fp,0(sp)
 20112a4:	dec00204 	addi	sp,sp,8
 20112a8:	f800283a 	ret

020112ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20112ac:	defffb04 	addi	sp,sp,-20
 20112b0:	dfc00415 	stw	ra,16(sp)
 20112b4:	df000315 	stw	fp,12(sp)
 20112b8:	df000304 	addi	fp,sp,12
 20112bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 20112c0:	e0bfff17 	ldw	r2,-4(fp)
 20112c4:	10000616 	blt	r2,zero,20112e0 <close+0x34>
 20112c8:	e0bfff17 	ldw	r2,-4(fp)
 20112cc:	10c00324 	muli	r3,r2,12
 20112d0:	008080b4 	movhi	r2,514
 20112d4:	10b56804 	addi	r2,r2,-10848
 20112d8:	1885883a 	add	r2,r3,r2
 20112dc:	00000106 	br	20112e4 <close+0x38>
 20112e0:	0005883a 	mov	r2,zero
 20112e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 20112e8:	e0bffd17 	ldw	r2,-12(fp)
 20112ec:	10001926 	beq	r2,zero,2011354 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 20112f0:	e0bffd17 	ldw	r2,-12(fp)
 20112f4:	10800017 	ldw	r2,0(r2)
 20112f8:	10800417 	ldw	r2,16(r2)
 20112fc:	10000626 	beq	r2,zero,2011318 <close+0x6c>
 2011300:	e0bffd17 	ldw	r2,-12(fp)
 2011304:	10800017 	ldw	r2,0(r2)
 2011308:	10800417 	ldw	r2,16(r2)
 201130c:	e13ffd17 	ldw	r4,-12(fp)
 2011310:	103ee83a 	callr	r2
 2011314:	00000106 	br	201131c <close+0x70>
 2011318:	0005883a 	mov	r2,zero
 201131c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2011320:	e13fff17 	ldw	r4,-4(fp)
 2011324:	20119640 	call	2011964 <alt_release_fd>
    if (rval < 0)
 2011328:	e0bffe17 	ldw	r2,-8(fp)
 201132c:	1000070e 	bge	r2,zero,201134c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 2011330:	20112700 	call	2011270 <alt_get_errno>
 2011334:	1007883a 	mov	r3,r2
 2011338:	e0bffe17 	ldw	r2,-8(fp)
 201133c:	0085c83a 	sub	r2,zero,r2
 2011340:	18800015 	stw	r2,0(r3)
      return -1;
 2011344:	00bfffc4 	movi	r2,-1
 2011348:	00000706 	br	2011368 <close+0xbc>
    }
    return 0;
 201134c:	0005883a 	mov	r2,zero
 2011350:	00000506 	br	2011368 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2011354:	20112700 	call	2011270 <alt_get_errno>
 2011358:	1007883a 	mov	r3,r2
 201135c:	00801444 	movi	r2,81
 2011360:	18800015 	stw	r2,0(r3)
    return -1;
 2011364:	00bfffc4 	movi	r2,-1
  }
}
 2011368:	e037883a 	mov	sp,fp
 201136c:	dfc00117 	ldw	ra,4(sp)
 2011370:	df000017 	ldw	fp,0(sp)
 2011374:	dec00204 	addi	sp,sp,8
 2011378:	f800283a 	ret

0201137c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 201137c:	defffc04 	addi	sp,sp,-16
 2011380:	df000315 	stw	fp,12(sp)
 2011384:	df000304 	addi	fp,sp,12
 2011388:	e13ffd15 	stw	r4,-12(fp)
 201138c:	e17ffe15 	stw	r5,-8(fp)
 2011390:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2011394:	e0bfff17 	ldw	r2,-4(fp)
}
 2011398:	e037883a 	mov	sp,fp
 201139c:	df000017 	ldw	fp,0(sp)
 20113a0:	dec00104 	addi	sp,sp,4
 20113a4:	f800283a 	ret

020113a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20113a8:	defffe04 	addi	sp,sp,-8
 20113ac:	dfc00115 	stw	ra,4(sp)
 20113b0:	df000015 	stw	fp,0(sp)
 20113b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20113b8:	d0a01017 	ldw	r2,-32704(gp)
 20113bc:	10000326 	beq	r2,zero,20113cc <alt_get_errno+0x24>
 20113c0:	d0a01017 	ldw	r2,-32704(gp)
 20113c4:	103ee83a 	callr	r2
 20113c8:	00000106 	br	20113d0 <alt_get_errno+0x28>
 20113cc:	d0a72204 	addi	r2,gp,-25464
}
 20113d0:	e037883a 	mov	sp,fp
 20113d4:	dfc00117 	ldw	ra,4(sp)
 20113d8:	df000017 	ldw	fp,0(sp)
 20113dc:	dec00204 	addi	sp,sp,8
 20113e0:	f800283a 	ret

020113e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 20113e4:	defffb04 	addi	sp,sp,-20
 20113e8:	dfc00415 	stw	ra,16(sp)
 20113ec:	df000315 	stw	fp,12(sp)
 20113f0:	df000304 	addi	fp,sp,12
 20113f4:	e13ffe15 	stw	r4,-8(fp)
 20113f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20113fc:	e0bffe17 	ldw	r2,-8(fp)
 2011400:	10000616 	blt	r2,zero,201141c <fstat+0x38>
 2011404:	e0bffe17 	ldw	r2,-8(fp)
 2011408:	10c00324 	muli	r3,r2,12
 201140c:	008080b4 	movhi	r2,514
 2011410:	10b56804 	addi	r2,r2,-10848
 2011414:	1885883a 	add	r2,r3,r2
 2011418:	00000106 	br	2011420 <fstat+0x3c>
 201141c:	0005883a 	mov	r2,zero
 2011420:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2011424:	e0bffd17 	ldw	r2,-12(fp)
 2011428:	10001026 	beq	r2,zero,201146c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 201142c:	e0bffd17 	ldw	r2,-12(fp)
 2011430:	10800017 	ldw	r2,0(r2)
 2011434:	10800817 	ldw	r2,32(r2)
 2011438:	10000726 	beq	r2,zero,2011458 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 201143c:	e0bffd17 	ldw	r2,-12(fp)
 2011440:	10800017 	ldw	r2,0(r2)
 2011444:	10800817 	ldw	r2,32(r2)
 2011448:	e17fff17 	ldw	r5,-4(fp)
 201144c:	e13ffd17 	ldw	r4,-12(fp)
 2011450:	103ee83a 	callr	r2
 2011454:	00000a06 	br	2011480 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2011458:	e0bfff17 	ldw	r2,-4(fp)
 201145c:	00c80004 	movi	r3,8192
 2011460:	10c00115 	stw	r3,4(r2)
      return 0;
 2011464:	0005883a 	mov	r2,zero
 2011468:	00000506 	br	2011480 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201146c:	20113a80 	call	20113a8 <alt_get_errno>
 2011470:	1007883a 	mov	r3,r2
 2011474:	00801444 	movi	r2,81
 2011478:	18800015 	stw	r2,0(r3)
    return -1;
 201147c:	00bfffc4 	movi	r2,-1
  }
}
 2011480:	e037883a 	mov	sp,fp
 2011484:	dfc00117 	ldw	ra,4(sp)
 2011488:	df000017 	ldw	fp,0(sp)
 201148c:	dec00204 	addi	sp,sp,8
 2011490:	f800283a 	ret

02011494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011494:	defffe04 	addi	sp,sp,-8
 2011498:	dfc00115 	stw	ra,4(sp)
 201149c:	df000015 	stw	fp,0(sp)
 20114a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20114a4:	d0a01017 	ldw	r2,-32704(gp)
 20114a8:	10000326 	beq	r2,zero,20114b8 <alt_get_errno+0x24>
 20114ac:	d0a01017 	ldw	r2,-32704(gp)
 20114b0:	103ee83a 	callr	r2
 20114b4:	00000106 	br	20114bc <alt_get_errno+0x28>
 20114b8:	d0a72204 	addi	r2,gp,-25464
}
 20114bc:	e037883a 	mov	sp,fp
 20114c0:	dfc00117 	ldw	ra,4(sp)
 20114c4:	df000017 	ldw	fp,0(sp)
 20114c8:	dec00204 	addi	sp,sp,8
 20114cc:	f800283a 	ret

020114d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 20114d0:	deffed04 	addi	sp,sp,-76
 20114d4:	dfc01215 	stw	ra,72(sp)
 20114d8:	df001115 	stw	fp,68(sp)
 20114dc:	df001104 	addi	fp,sp,68
 20114e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20114e4:	e0bfff17 	ldw	r2,-4(fp)
 20114e8:	10000616 	blt	r2,zero,2011504 <isatty+0x34>
 20114ec:	e0bfff17 	ldw	r2,-4(fp)
 20114f0:	10c00324 	muli	r3,r2,12
 20114f4:	008080b4 	movhi	r2,514
 20114f8:	10b56804 	addi	r2,r2,-10848
 20114fc:	1885883a 	add	r2,r3,r2
 2011500:	00000106 	br	2011508 <isatty+0x38>
 2011504:	0005883a 	mov	r2,zero
 2011508:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 201150c:	e0bfef17 	ldw	r2,-68(fp)
 2011510:	10000e26 	beq	r2,zero,201154c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2011514:	e0bfef17 	ldw	r2,-68(fp)
 2011518:	10800017 	ldw	r2,0(r2)
 201151c:	10800817 	ldw	r2,32(r2)
 2011520:	1000021e 	bne	r2,zero,201152c <isatty+0x5c>
    {
      return 1;
 2011524:	00800044 	movi	r2,1
 2011528:	00000d06 	br	2011560 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 201152c:	e0bff004 	addi	r2,fp,-64
 2011530:	100b883a 	mov	r5,r2
 2011534:	e13fff17 	ldw	r4,-4(fp)
 2011538:	20113e40 	call	20113e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 201153c:	e0bff117 	ldw	r2,-60(fp)
 2011540:	10880020 	cmpeqi	r2,r2,8192
 2011544:	10803fcc 	andi	r2,r2,255
 2011548:	00000506 	br	2011560 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201154c:	20114940 	call	2011494 <alt_get_errno>
 2011550:	1007883a 	mov	r3,r2
 2011554:	00801444 	movi	r2,81
 2011558:	18800015 	stw	r2,0(r3)
    return 0;
 201155c:	0005883a 	mov	r2,zero
  }
}
 2011560:	e037883a 	mov	sp,fp
 2011564:	dfc00117 	ldw	ra,4(sp)
 2011568:	df000017 	ldw	fp,0(sp)
 201156c:	dec00204 	addi	sp,sp,8
 2011570:	f800283a 	ret

02011574 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2011574:	defffc04 	addi	sp,sp,-16
 2011578:	df000315 	stw	fp,12(sp)
 201157c:	df000304 	addi	fp,sp,12
 2011580:	e13ffd15 	stw	r4,-12(fp)
 2011584:	e17ffe15 	stw	r5,-8(fp)
 2011588:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 201158c:	e0fffe17 	ldw	r3,-8(fp)
 2011590:	e0bffd17 	ldw	r2,-12(fp)
 2011594:	18800c26 	beq	r3,r2,20115c8 <alt_load_section+0x54>
  {
    while( to != end )
 2011598:	00000806 	br	20115bc <alt_load_section+0x48>
    {
      *to++ = *from++;
 201159c:	e0bffe17 	ldw	r2,-8(fp)
 20115a0:	10c00104 	addi	r3,r2,4
 20115a4:	e0fffe15 	stw	r3,-8(fp)
 20115a8:	e0fffd17 	ldw	r3,-12(fp)
 20115ac:	19000104 	addi	r4,r3,4
 20115b0:	e13ffd15 	stw	r4,-12(fp)
 20115b4:	18c00017 	ldw	r3,0(r3)
 20115b8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 20115bc:	e0fffe17 	ldw	r3,-8(fp)
 20115c0:	e0bfff17 	ldw	r2,-4(fp)
 20115c4:	18bff51e 	bne	r3,r2,201159c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 20115c8:	0001883a 	nop
 20115cc:	e037883a 	mov	sp,fp
 20115d0:	df000017 	ldw	fp,0(sp)
 20115d4:	dec00104 	addi	sp,sp,4
 20115d8:	f800283a 	ret

020115dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 20115dc:	defffe04 	addi	sp,sp,-8
 20115e0:	dfc00115 	stw	ra,4(sp)
 20115e4:	df000015 	stw	fp,0(sp)
 20115e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20115ec:	018080b4 	movhi	r6,514
 20115f0:	31ba1704 	addi	r6,r6,-6052
 20115f4:	014080b4 	movhi	r5,514
 20115f8:	29733504 	addi	r5,r5,-13100
 20115fc:	010080b4 	movhi	r4,514
 2011600:	213a1704 	addi	r4,r4,-6052
 2011604:	20115740 	call	2011574 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2011608:	01808034 	movhi	r6,512
 201160c:	31809104 	addi	r6,r6,580
 2011610:	01408034 	movhi	r5,512
 2011614:	29400804 	addi	r5,r5,32
 2011618:	01008034 	movhi	r4,512
 201161c:	21000804 	addi	r4,r4,32
 2011620:	20115740 	call	2011574 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2011624:	018080b4 	movhi	r6,514
 2011628:	31b33504 	addi	r6,r6,-13100
 201162c:	014080b4 	movhi	r5,514
 2011630:	2971ee04 	addi	r5,r5,-14408
 2011634:	010080b4 	movhi	r4,514
 2011638:	2131ee04 	addi	r4,r4,-14408
 201163c:	20115740 	call	2011574 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2011640:	201b1600 	call	201b160 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2011644:	201b3480 	call	201b348 <alt_icache_flush_all>
}
 2011648:	0001883a 	nop
 201164c:	e037883a 	mov	sp,fp
 2011650:	dfc00117 	ldw	ra,4(sp)
 2011654:	df000017 	ldw	fp,0(sp)
 2011658:	dec00204 	addi	sp,sp,8
 201165c:	f800283a 	ret

02011660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011660:	defffe04 	addi	sp,sp,-8
 2011664:	dfc00115 	stw	ra,4(sp)
 2011668:	df000015 	stw	fp,0(sp)
 201166c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2011670:	d0a01017 	ldw	r2,-32704(gp)
 2011674:	10000326 	beq	r2,zero,2011684 <alt_get_errno+0x24>
 2011678:	d0a01017 	ldw	r2,-32704(gp)
 201167c:	103ee83a 	callr	r2
 2011680:	00000106 	br	2011688 <alt_get_errno+0x28>
 2011684:	d0a72204 	addi	r2,gp,-25464
}
 2011688:	e037883a 	mov	sp,fp
 201168c:	dfc00117 	ldw	ra,4(sp)
 2011690:	df000017 	ldw	fp,0(sp)
 2011694:	dec00204 	addi	sp,sp,8
 2011698:	f800283a 	ret

0201169c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 201169c:	defff904 	addi	sp,sp,-28
 20116a0:	dfc00615 	stw	ra,24(sp)
 20116a4:	df000515 	stw	fp,20(sp)
 20116a8:	df000504 	addi	fp,sp,20
 20116ac:	e13ffd15 	stw	r4,-12(fp)
 20116b0:	e17ffe15 	stw	r5,-8(fp)
 20116b4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 20116b8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20116bc:	e0bffd17 	ldw	r2,-12(fp)
 20116c0:	10000616 	blt	r2,zero,20116dc <lseek+0x40>
 20116c4:	e0bffd17 	ldw	r2,-12(fp)
 20116c8:	10c00324 	muli	r3,r2,12
 20116cc:	008080b4 	movhi	r2,514
 20116d0:	10b56804 	addi	r2,r2,-10848
 20116d4:	1885883a 	add	r2,r3,r2
 20116d8:	00000106 	br	20116e0 <lseek+0x44>
 20116dc:	0005883a 	mov	r2,zero
 20116e0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 20116e4:	e0bffc17 	ldw	r2,-16(fp)
 20116e8:	10001026 	beq	r2,zero,201172c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 20116ec:	e0bffc17 	ldw	r2,-16(fp)
 20116f0:	10800017 	ldw	r2,0(r2)
 20116f4:	10800717 	ldw	r2,28(r2)
 20116f8:	10000926 	beq	r2,zero,2011720 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 20116fc:	e0bffc17 	ldw	r2,-16(fp)
 2011700:	10800017 	ldw	r2,0(r2)
 2011704:	10800717 	ldw	r2,28(r2)
 2011708:	e1bfff17 	ldw	r6,-4(fp)
 201170c:	e17ffe17 	ldw	r5,-8(fp)
 2011710:	e13ffc17 	ldw	r4,-16(fp)
 2011714:	103ee83a 	callr	r2
 2011718:	e0bffb15 	stw	r2,-20(fp)
 201171c:	00000506 	br	2011734 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2011720:	00bfde84 	movi	r2,-134
 2011724:	e0bffb15 	stw	r2,-20(fp)
 2011728:	00000206 	br	2011734 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 201172c:	00bfebc4 	movi	r2,-81
 2011730:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2011734:	e0bffb17 	ldw	r2,-20(fp)
 2011738:	1000070e 	bge	r2,zero,2011758 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 201173c:	20116600 	call	2011660 <alt_get_errno>
 2011740:	1007883a 	mov	r3,r2
 2011744:	e0bffb17 	ldw	r2,-20(fp)
 2011748:	0085c83a 	sub	r2,zero,r2
 201174c:	18800015 	stw	r2,0(r3)
    rc = -1;
 2011750:	00bfffc4 	movi	r2,-1
 2011754:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2011758:	e0bffb17 	ldw	r2,-20(fp)
}
 201175c:	e037883a 	mov	sp,fp
 2011760:	dfc00117 	ldw	ra,4(sp)
 2011764:	df000017 	ldw	fp,0(sp)
 2011768:	dec00204 	addi	sp,sp,8
 201176c:	f800283a 	ret

02011770 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2011770:	defff904 	addi	sp,sp,-28
 2011774:	dfc00615 	stw	ra,24(sp)
 2011778:	df000515 	stw	fp,20(sp)
 201177c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2011780:	0009883a 	mov	r4,zero
 2011784:	201a17c0 	call	201a17c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2011788:	201272c0 	call	201272c <OSInit>
 201178c:	01000044 	movi	r4,1
 2011790:	2017b440 	call	2017b44 <OSSemCreate>
 2011794:	d0a72815 	stw	r2,-25440(gp)
 2011798:	01000044 	movi	r4,1
 201179c:	2017b440 	call	2017b44 <OSSemCreate>
 20117a0:	d0a72a15 	stw	r2,-25432(gp)
 20117a4:	d0a72304 	addi	r2,gp,-25460
 20117a8:	e0bffc15 	stw	r2,-16(fp)
 20117ac:	00800044 	movi	r2,1
 20117b0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 20117b4:	e0bffd0b 	ldhu	r2,-12(fp)
 20117b8:	1009883a 	mov	r4,r2
 20117bc:	2017b440 	call	2017b44 <OSSemCreate>
 20117c0:	1007883a 	mov	r3,r2
 20117c4:	e0bffc17 	ldw	r2,-16(fp)
 20117c8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20117cc:	201a1b40 	call	201a1b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20117d0:	018080b4 	movhi	r6,514
 20117d4:	31b2e404 	addi	r6,r6,-13424
 20117d8:	014080b4 	movhi	r5,514
 20117dc:	2972e404 	addi	r5,r5,-13424
 20117e0:	010080b4 	movhi	r4,514
 20117e4:	2132e404 	addi	r4,r4,-13424
 20117e8:	201b6e00 	call	201b6e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 20117ec:	201b2880 	call	201b288 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 20117f0:	010080b4 	movhi	r4,514
 20117f4:	212cba04 	addi	r4,r4,-19736
 20117f8:	201c2700 	call	201c270 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 20117fc:	d0a72417 	ldw	r2,-25456(gp)
 2011800:	d0e72517 	ldw	r3,-25452(gp)
 2011804:	d1272617 	ldw	r4,-25448(gp)
 2011808:	200d883a 	mov	r6,r4
 201180c:	180b883a 	mov	r5,r3
 2011810:	1009883a 	mov	r4,r2
 2011814:	2000dd00 	call	2000dd0 <main>
 2011818:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 201181c:	01000044 	movi	r4,1
 2011820:	20112ac0 	call	20112ac <close>
  exit (result);
 2011824:	e13ffb17 	ldw	r4,-20(fp)
 2011828:	201c2ac0 	call	201c2ac <exit>

0201182c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201182c:	defffe04 	addi	sp,sp,-8
 2011830:	dfc00115 	stw	ra,4(sp)
 2011834:	df000015 	stw	fp,0(sp)
 2011838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201183c:	d0a01017 	ldw	r2,-32704(gp)
 2011840:	10000326 	beq	r2,zero,2011850 <alt_get_errno+0x24>
 2011844:	d0a01017 	ldw	r2,-32704(gp)
 2011848:	103ee83a 	callr	r2
 201184c:	00000106 	br	2011854 <alt_get_errno+0x28>
 2011850:	d0a72204 	addi	r2,gp,-25464
}
 2011854:	e037883a 	mov	sp,fp
 2011858:	dfc00117 	ldw	ra,4(sp)
 201185c:	df000017 	ldw	fp,0(sp)
 2011860:	dec00204 	addi	sp,sp,8
 2011864:	f800283a 	ret

02011868 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2011868:	defff904 	addi	sp,sp,-28
 201186c:	dfc00615 	stw	ra,24(sp)
 2011870:	df000515 	stw	fp,20(sp)
 2011874:	df000504 	addi	fp,sp,20
 2011878:	e13ffd15 	stw	r4,-12(fp)
 201187c:	e17ffe15 	stw	r5,-8(fp)
 2011880:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011884:	e0bffd17 	ldw	r2,-12(fp)
 2011888:	10000616 	blt	r2,zero,20118a4 <read+0x3c>
 201188c:	e0bffd17 	ldw	r2,-12(fp)
 2011890:	10c00324 	muli	r3,r2,12
 2011894:	008080b4 	movhi	r2,514
 2011898:	10b56804 	addi	r2,r2,-10848
 201189c:	1885883a 	add	r2,r3,r2
 20118a0:	00000106 	br	20118a8 <read+0x40>
 20118a4:	0005883a 	mov	r2,zero
 20118a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20118ac:	e0bffb17 	ldw	r2,-20(fp)
 20118b0:	10002226 	beq	r2,zero,201193c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20118b4:	e0bffb17 	ldw	r2,-20(fp)
 20118b8:	10800217 	ldw	r2,8(r2)
 20118bc:	108000cc 	andi	r2,r2,3
 20118c0:	10800060 	cmpeqi	r2,r2,1
 20118c4:	1000181e 	bne	r2,zero,2011928 <read+0xc0>
        (fd->dev->read))
 20118c8:	e0bffb17 	ldw	r2,-20(fp)
 20118cc:	10800017 	ldw	r2,0(r2)
 20118d0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20118d4:	10001426 	beq	r2,zero,2011928 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 20118d8:	e0bffb17 	ldw	r2,-20(fp)
 20118dc:	10800017 	ldw	r2,0(r2)
 20118e0:	10800517 	ldw	r2,20(r2)
 20118e4:	e0ffff17 	ldw	r3,-4(fp)
 20118e8:	180d883a 	mov	r6,r3
 20118ec:	e17ffe17 	ldw	r5,-8(fp)
 20118f0:	e13ffb17 	ldw	r4,-20(fp)
 20118f4:	103ee83a 	callr	r2
 20118f8:	e0bffc15 	stw	r2,-16(fp)
 20118fc:	e0bffc17 	ldw	r2,-16(fp)
 2011900:	1000070e 	bge	r2,zero,2011920 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 2011904:	201182c0 	call	201182c <alt_get_errno>
 2011908:	1007883a 	mov	r3,r2
 201190c:	e0bffc17 	ldw	r2,-16(fp)
 2011910:	0085c83a 	sub	r2,zero,r2
 2011914:	18800015 	stw	r2,0(r3)
          return -1;
 2011918:	00bfffc4 	movi	r2,-1
 201191c:	00000c06 	br	2011950 <read+0xe8>
        }
        return rval;
 2011920:	e0bffc17 	ldw	r2,-16(fp)
 2011924:	00000a06 	br	2011950 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2011928:	201182c0 	call	201182c <alt_get_errno>
 201192c:	1007883a 	mov	r3,r2
 2011930:	00800344 	movi	r2,13
 2011934:	18800015 	stw	r2,0(r3)
 2011938:	00000406 	br	201194c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 201193c:	201182c0 	call	201182c <alt_get_errno>
 2011940:	1007883a 	mov	r3,r2
 2011944:	00801444 	movi	r2,81
 2011948:	18800015 	stw	r2,0(r3)
  }
  return -1;
 201194c:	00bfffc4 	movi	r2,-1
}
 2011950:	e037883a 	mov	sp,fp
 2011954:	dfc00117 	ldw	ra,4(sp)
 2011958:	df000017 	ldw	fp,0(sp)
 201195c:	dec00204 	addi	sp,sp,8
 2011960:	f800283a 	ret

02011964 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2011964:	defffe04 	addi	sp,sp,-8
 2011968:	df000115 	stw	fp,4(sp)
 201196c:	df000104 	addi	fp,sp,4
 2011970:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2011974:	e0bfff17 	ldw	r2,-4(fp)
 2011978:	108000d0 	cmplti	r2,r2,3
 201197c:	10000d1e 	bne	r2,zero,20119b4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2011980:	008080b4 	movhi	r2,514
 2011984:	10b56804 	addi	r2,r2,-10848
 2011988:	e0ffff17 	ldw	r3,-4(fp)
 201198c:	18c00324 	muli	r3,r3,12
 2011990:	10c5883a 	add	r2,r2,r3
 2011994:	10800204 	addi	r2,r2,8
 2011998:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 201199c:	008080b4 	movhi	r2,514
 20119a0:	10b56804 	addi	r2,r2,-10848
 20119a4:	e0ffff17 	ldw	r3,-4(fp)
 20119a8:	18c00324 	muli	r3,r3,12
 20119ac:	10c5883a 	add	r2,r2,r3
 20119b0:	10000015 	stw	zero,0(r2)
  }
}
 20119b4:	0001883a 	nop
 20119b8:	e037883a 	mov	sp,fp
 20119bc:	df000017 	ldw	fp,0(sp)
 20119c0:	dec00104 	addi	sp,sp,4
 20119c4:	f800283a 	ret

020119c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 20119c8:	defff904 	addi	sp,sp,-28
 20119cc:	df000615 	stw	fp,24(sp)
 20119d0:	df000604 	addi	fp,sp,24
 20119d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20119d8:	0005303a 	rdctl	r2,status
 20119dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20119e0:	e0fffe17 	ldw	r3,-8(fp)
 20119e4:	00bfff84 	movi	r2,-2
 20119e8:	1884703a 	and	r2,r3,r2
 20119ec:	1001703a 	wrctl	status,r2
  
  return context;
 20119f0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 20119f4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 20119f8:	d0a01117 	ldw	r2,-32700(gp)
 20119fc:	10c000c4 	addi	r3,r2,3
 2011a00:	00bfff04 	movi	r2,-4
 2011a04:	1884703a 	and	r2,r3,r2
 2011a08:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2011a0c:	d0e01117 	ldw	r3,-32700(gp)
 2011a10:	e0bfff17 	ldw	r2,-4(fp)
 2011a14:	1887883a 	add	r3,r3,r2
 2011a18:	00810034 	movhi	r2,1024
 2011a1c:	10800004 	addi	r2,r2,0
 2011a20:	10c0062e 	bgeu	r2,r3,2011a3c <sbrk+0x74>
 2011a24:	e0bffb17 	ldw	r2,-20(fp)
 2011a28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011a2c:	e0bffa17 	ldw	r2,-24(fp)
 2011a30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2011a34:	00bfffc4 	movi	r2,-1
 2011a38:	00000b06 	br	2011a68 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2011a3c:	d0a01117 	ldw	r2,-32700(gp)
 2011a40:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 2011a44:	d0e01117 	ldw	r3,-32700(gp)
 2011a48:	e0bfff17 	ldw	r2,-4(fp)
 2011a4c:	1885883a 	add	r2,r3,r2
 2011a50:	d0a01115 	stw	r2,-32700(gp)
 2011a54:	e0bffb17 	ldw	r2,-20(fp)
 2011a58:	e0bffc15 	stw	r2,-16(fp)
 2011a5c:	e0bffc17 	ldw	r2,-16(fp)
 2011a60:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2011a64:	e0bffd17 	ldw	r2,-12(fp)
} 
 2011a68:	e037883a 	mov	sp,fp
 2011a6c:	df000017 	ldw	fp,0(sp)
 2011a70:	dec00104 	addi	sp,sp,4
 2011a74:	f800283a 	ret

02011a78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011a78:	defffe04 	addi	sp,sp,-8
 2011a7c:	dfc00115 	stw	ra,4(sp)
 2011a80:	df000015 	stw	fp,0(sp)
 2011a84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2011a88:	d0a01017 	ldw	r2,-32704(gp)
 2011a8c:	10000326 	beq	r2,zero,2011a9c <alt_get_errno+0x24>
 2011a90:	d0a01017 	ldw	r2,-32704(gp)
 2011a94:	103ee83a 	callr	r2
 2011a98:	00000106 	br	2011aa0 <alt_get_errno+0x28>
 2011a9c:	d0a72204 	addi	r2,gp,-25464
}
 2011aa0:	e037883a 	mov	sp,fp
 2011aa4:	dfc00117 	ldw	ra,4(sp)
 2011aa8:	df000017 	ldw	fp,0(sp)
 2011aac:	dec00204 	addi	sp,sp,8
 2011ab0:	f800283a 	ret

02011ab4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2011ab4:	defff904 	addi	sp,sp,-28
 2011ab8:	dfc00615 	stw	ra,24(sp)
 2011abc:	df000515 	stw	fp,20(sp)
 2011ac0:	df000504 	addi	fp,sp,20
 2011ac4:	e13ffd15 	stw	r4,-12(fp)
 2011ac8:	e17ffe15 	stw	r5,-8(fp)
 2011acc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011ad0:	e0bffd17 	ldw	r2,-12(fp)
 2011ad4:	10000616 	blt	r2,zero,2011af0 <write+0x3c>
 2011ad8:	e0bffd17 	ldw	r2,-12(fp)
 2011adc:	10c00324 	muli	r3,r2,12
 2011ae0:	008080b4 	movhi	r2,514
 2011ae4:	10b56804 	addi	r2,r2,-10848
 2011ae8:	1885883a 	add	r2,r3,r2
 2011aec:	00000106 	br	2011af4 <write+0x40>
 2011af0:	0005883a 	mov	r2,zero
 2011af4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2011af8:	e0bffb17 	ldw	r2,-20(fp)
 2011afc:	10002126 	beq	r2,zero,2011b84 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2011b00:	e0bffb17 	ldw	r2,-20(fp)
 2011b04:	10800217 	ldw	r2,8(r2)
 2011b08:	108000cc 	andi	r2,r2,3
 2011b0c:	10001826 	beq	r2,zero,2011b70 <write+0xbc>
 2011b10:	e0bffb17 	ldw	r2,-20(fp)
 2011b14:	10800017 	ldw	r2,0(r2)
 2011b18:	10800617 	ldw	r2,24(r2)
 2011b1c:	10001426 	beq	r2,zero,2011b70 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2011b20:	e0bffb17 	ldw	r2,-20(fp)
 2011b24:	10800017 	ldw	r2,0(r2)
 2011b28:	10800617 	ldw	r2,24(r2)
 2011b2c:	e0ffff17 	ldw	r3,-4(fp)
 2011b30:	180d883a 	mov	r6,r3
 2011b34:	e17ffe17 	ldw	r5,-8(fp)
 2011b38:	e13ffb17 	ldw	r4,-20(fp)
 2011b3c:	103ee83a 	callr	r2
 2011b40:	e0bffc15 	stw	r2,-16(fp)
 2011b44:	e0bffc17 	ldw	r2,-16(fp)
 2011b48:	1000070e 	bge	r2,zero,2011b68 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 2011b4c:	2011a780 	call	2011a78 <alt_get_errno>
 2011b50:	1007883a 	mov	r3,r2
 2011b54:	e0bffc17 	ldw	r2,-16(fp)
 2011b58:	0085c83a 	sub	r2,zero,r2
 2011b5c:	18800015 	stw	r2,0(r3)
        return -1;
 2011b60:	00bfffc4 	movi	r2,-1
 2011b64:	00000c06 	br	2011b98 <write+0xe4>
      }
      return rval;
 2011b68:	e0bffc17 	ldw	r2,-16(fp)
 2011b6c:	00000a06 	br	2011b98 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2011b70:	2011a780 	call	2011a78 <alt_get_errno>
 2011b74:	1007883a 	mov	r3,r2
 2011b78:	00800344 	movi	r2,13
 2011b7c:	18800015 	stw	r2,0(r3)
 2011b80:	00000406 	br	2011b94 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2011b84:	2011a780 	call	2011a78 <alt_get_errno>
 2011b88:	1007883a 	mov	r3,r2
 2011b8c:	00801444 	movi	r2,81
 2011b90:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2011b94:	00bfffc4 	movi	r2,-1
}
 2011b98:	e037883a 	mov	sp,fp
 2011b9c:	dfc00117 	ldw	ra,4(sp)
 2011ba0:	df000017 	ldw	fp,0(sp)
 2011ba4:	dec00204 	addi	sp,sp,8
 2011ba8:	f800283a 	ret

02011bac <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2011bac:	deffdf04 	addi	sp,sp,-132
 2011bb0:	dfc02015 	stw	ra,128(sp)
 2011bb4:	df001f15 	stw	fp,124(sp)
 2011bb8:	df001f04 	addi	fp,sp,124
 2011bbc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2011bc0:	e0bfe204 	addi	r2,fp,-120
 2011bc4:	100b883a 	mov	r5,r2
 2011bc8:	01003fc4 	movi	r4,255
 2011bcc:	2019acc0 	call	2019acc <OSTaskQuery>
 2011bd0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2011bd4:	e0bffe83 	ldbu	r2,-6(fp)
 2011bd8:	10803fcc 	andi	r2,r2,255
 2011bdc:	10001e1e 	bne	r2,zero,2011c58 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2011be0:	e0bfee83 	ldbu	r2,-70(fp)
 2011be4:	10803fcc 	andi	r2,r2,255
 2011be8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2011bec:	d0a72817 	ldw	r2,-25440(gp)
 2011bf0:	e0fffd04 	addi	r3,fp,-12
 2011bf4:	180b883a 	mov	r5,r3
 2011bf8:	1009883a 	mov	r4,r2
 2011bfc:	20182e40 	call	20182e4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2011c00:	e0bffe43 	ldbu	r2,-7(fp)
 2011c04:	10803fcc 	andi	r2,r2,255
 2011c08:	10000726 	beq	r2,zero,2011c28 <__env_lock+0x7c>
 2011c0c:	d0a01217 	ldw	r2,-32696(gp)
 2011c10:	e0ffe117 	ldw	r3,-124(fp)
 2011c14:	1880041e 	bne	r3,r2,2011c28 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2011c18:	d0a72717 	ldw	r2,-25444(gp)
 2011c1c:	10800044 	addi	r2,r2,1
 2011c20:	d0a72715 	stw	r2,-25444(gp)
 2011c24:	00000a06 	br	2011c50 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2011c28:	d0a72817 	ldw	r2,-25440(gp)
 2011c2c:	e0fffe84 	addi	r3,fp,-6
 2011c30:	180d883a 	mov	r6,r3
 2011c34:	000b883a 	mov	r5,zero
 2011c38:	1009883a 	mov	r4,r2
 2011c3c:	2017e5c0 	call	2017e5c <OSSemPend>
    locks  = 1;
 2011c40:	00800044 	movi	r2,1
 2011c44:	d0a72715 	stw	r2,-25444(gp)
    lockid = id;
 2011c48:	e0bfe117 	ldw	r2,-124(fp)
 2011c4c:	d0a01215 	stw	r2,-32696(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2011c50:	0001883a 	nop
 2011c54:	00000106 	br	2011c5c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2011c58:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2011c5c:	e037883a 	mov	sp,fp
 2011c60:	dfc00117 	ldw	ra,4(sp)
 2011c64:	df000017 	ldw	fp,0(sp)
 2011c68:	dec00204 	addi	sp,sp,8
 2011c6c:	f800283a 	ret

02011c70 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2011c70:	defffd04 	addi	sp,sp,-12
 2011c74:	dfc00215 	stw	ra,8(sp)
 2011c78:	df000115 	stw	fp,4(sp)
 2011c7c:	df000104 	addi	fp,sp,4
 2011c80:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2011c84:	d0a72717 	ldw	r2,-25444(gp)
 2011c88:	10000b26 	beq	r2,zero,2011cb8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2011c8c:	d0a72717 	ldw	r2,-25444(gp)
 2011c90:	10bfffc4 	addi	r2,r2,-1
 2011c94:	d0a72715 	stw	r2,-25444(gp)
 2011c98:	d0a72717 	ldw	r2,-25444(gp)
 2011c9c:	1000071e 	bne	r2,zero,2011cbc <__env_unlock+0x4c>
  {
    lockid = -1;
 2011ca0:	00bfffc4 	movi	r2,-1
 2011ca4:	d0a01215 	stw	r2,-32696(gp)
    OSSemPost( alt_envsem );
 2011ca8:	d0a72817 	ldw	r2,-25440(gp)
 2011cac:	1009883a 	mov	r4,r2
 2011cb0:	20181d40 	call	20181d4 <OSSemPost>
 2011cb4:	00000106 	br	2011cbc <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2011cb8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2011cbc:	e037883a 	mov	sp,fp
 2011cc0:	dfc00117 	ldw	ra,4(sp)
 2011cc4:	df000017 	ldw	fp,0(sp)
 2011cc8:	dec00204 	addi	sp,sp,8
 2011ccc:	f800283a 	ret

02011cd0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2011cd0:	deffdb04 	addi	sp,sp,-148
 2011cd4:	dfc02415 	stw	ra,144(sp)
 2011cd8:	df002315 	stw	fp,140(sp)
 2011cdc:	df002304 	addi	fp,sp,140
 2011ce0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011ce4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2011ce8:	d0a72b43 	ldbu	r2,-25427(gp)
 2011cec:	10803fcc 	andi	r2,r2,255
 2011cf0:	10800060 	cmpeqi	r2,r2,1
 2011cf4:	10003626 	beq	r2,zero,2011dd0 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2011cf8:	e0bfe204 	addi	r2,fp,-120
 2011cfc:	100b883a 	mov	r5,r2
 2011d00:	01003fc4 	movi	r4,255
 2011d04:	2019acc0 	call	2019acc <OSTaskQuery>
 2011d08:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2011d0c:	e0bffe83 	ldbu	r2,-6(fp)
 2011d10:	10803fcc 	andi	r2,r2,255
 2011d14:	1000301e 	bne	r2,zero,2011dd8 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 2011d18:	e0bfee83 	ldbu	r2,-70(fp)
 2011d1c:	10803fcc 	andi	r2,r2,255
 2011d20:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 2011d24:	d0a72a17 	ldw	r2,-25432(gp)
 2011d28:	e0fffd04 	addi	r3,fp,-12
 2011d2c:	180b883a 	mov	r5,r3
 2011d30:	1009883a 	mov	r4,r2
 2011d34:	20182e40 	call	20182e4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011d38:	0005303a 	rdctl	r2,status
 2011d3c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011d40:	e0ffe117 	ldw	r3,-124(fp)
 2011d44:	00bfff84 	movi	r2,-2
 2011d48:	1884703a 	and	r2,r3,r2
 2011d4c:	1001703a 	wrctl	status,r2
  
  return context;
 2011d50:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 2011d54:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2011d58:	e0bffd0b 	ldhu	r2,-12(fp)
 2011d5c:	10bfffcc 	andi	r2,r2,65535
 2011d60:	10000b1e 	bne	r2,zero,2011d90 <__malloc_lock+0xc0>
 2011d64:	d0a01317 	ldw	r2,-32692(gp)
 2011d68:	e0ffde17 	ldw	r3,-136(fp)
 2011d6c:	1880081e 	bne	r3,r2,2011d90 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 2011d70:	d0a72917 	ldw	r2,-25436(gp)
 2011d74:	10800044 	addi	r2,r2,1
 2011d78:	d0a72915 	stw	r2,-25436(gp)
 2011d7c:	e0bfdd17 	ldw	r2,-140(fp)
 2011d80:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011d84:	e0bfdf17 	ldw	r2,-132(fp)
 2011d88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2011d8c:	00000e06 	br	2011dc8 <__malloc_lock+0xf8>
 2011d90:	e0bfdd17 	ldw	r2,-140(fp)
 2011d94:	e0bfe015 	stw	r2,-128(fp)
 2011d98:	e0bfe017 	ldw	r2,-128(fp)
 2011d9c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2011da0:	d0a72a17 	ldw	r2,-25432(gp)
 2011da4:	e0fffe84 	addi	r3,fp,-6
 2011da8:	180d883a 	mov	r6,r3
 2011dac:	000b883a 	mov	r5,zero
 2011db0:	1009883a 	mov	r4,r2
 2011db4:	2017e5c0 	call	2017e5c <OSSemPend>
    locks  = 1;
 2011db8:	00800044 	movi	r2,1
 2011dbc:	d0a72915 	stw	r2,-25436(gp)
    lockid = id;
 2011dc0:	e0bfde17 	ldw	r2,-136(fp)
 2011dc4:	d0a01315 	stw	r2,-32692(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2011dc8:	0001883a 	nop
 2011dcc:	00000306 	br	2011ddc <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 2011dd0:	0001883a 	nop
 2011dd4:	00000106 	br	2011ddc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2011dd8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2011ddc:	e037883a 	mov	sp,fp
 2011de0:	dfc00117 	ldw	ra,4(sp)
 2011de4:	df000017 	ldw	fp,0(sp)
 2011de8:	dec00204 	addi	sp,sp,8
 2011dec:	f800283a 	ret

02011df0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2011df0:	defff804 	addi	sp,sp,-32
 2011df4:	dfc00715 	stw	ra,28(sp)
 2011df8:	df000615 	stw	fp,24(sp)
 2011dfc:	df000604 	addi	fp,sp,24
 2011e00:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011e04:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2011e08:	d0a72b43 	ldbu	r2,-25427(gp)
 2011e0c:	10803fcc 	andi	r2,r2,255
 2011e10:	10800060 	cmpeqi	r2,r2,1
 2011e14:	10002326 	beq	r2,zero,2011ea4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011e18:	0005303a 	rdctl	r2,status
 2011e1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011e20:	e0fffe17 	ldw	r3,-8(fp)
 2011e24:	00bfff84 	movi	r2,-2
 2011e28:	1884703a 	and	r2,r3,r2
 2011e2c:	1001703a 	wrctl	status,r2
  
  return context;
 2011e30:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 2011e34:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 2011e38:	d0a72917 	ldw	r2,-25436(gp)
 2011e3c:	1000051e 	bne	r2,zero,2011e54 <__malloc_unlock+0x64>
 2011e40:	e0bffa17 	ldw	r2,-24(fp)
 2011e44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011e48:	e0bffb17 	ldw	r2,-20(fp)
 2011e4c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 2011e50:	00001506 	br	2011ea8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 2011e54:	d0a72917 	ldw	r2,-25436(gp)
 2011e58:	10bfffc4 	addi	r2,r2,-1
 2011e5c:	d0a72915 	stw	r2,-25436(gp)
 2011e60:	d0a72917 	ldw	r2,-25436(gp)
 2011e64:	10000a1e 	bne	r2,zero,2011e90 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 2011e68:	00bfffc4 	movi	r2,-1
 2011e6c:	d0a01315 	stw	r2,-32692(gp)
 2011e70:	e0bffa17 	ldw	r2,-24(fp)
 2011e74:	e0bffc15 	stw	r2,-16(fp)
 2011e78:	e0bffc17 	ldw	r2,-16(fp)
 2011e7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2011e80:	d0a72a17 	ldw	r2,-25432(gp)
 2011e84:	1009883a 	mov	r4,r2
 2011e88:	20181d40 	call	20181d4 <OSSemPost>
 2011e8c:	00000606 	br	2011ea8 <__malloc_unlock+0xb8>
 2011e90:	e0bffa17 	ldw	r2,-24(fp)
 2011e94:	e0bffd15 	stw	r2,-12(fp)
 2011e98:	e0bffd17 	ldw	r2,-12(fp)
 2011e9c:	1001703a 	wrctl	status,r2
 2011ea0:	00000106 	br	2011ea8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2011ea4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2011ea8:	e037883a 	mov	sp,fp
 2011eac:	dfc00117 	ldw	ra,4(sp)
 2011eb0:	df000017 	ldw	fp,0(sp)
 2011eb4:	dec00204 	addi	sp,sp,8
 2011eb8:	f800283a 	ret

02011ebc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2011ebc:	defff704 	addi	sp,sp,-36
 2011ec0:	dfc00815 	stw	ra,32(sp)
 2011ec4:	df000715 	stw	fp,28(sp)
 2011ec8:	df000704 	addi	fp,sp,28
 2011ecc:	e13ffd15 	stw	r4,-12(fp)
 2011ed0:	e17ffe15 	stw	r5,-8(fp)
 2011ed4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011ed8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2011edc:	e0bfff17 	ldw	r2,-4(fp)
 2011ee0:	1000021e 	bne	r2,zero,2011eec <OSEventNameGet+0x30>
        return (0);
 2011ee4:	0005883a 	mov	r2,zero
 2011ee8:	00003706 	br	2011fc8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2011eec:	e0bffd17 	ldw	r2,-12(fp)
 2011ef0:	1000051e 	bne	r2,zero,2011f08 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2011ef4:	e0bfff17 	ldw	r2,-4(fp)
 2011ef8:	00c00104 	movi	r3,4
 2011efc:	10c00005 	stb	r3,0(r2)
        return (0);
 2011f00:	0005883a 	mov	r2,zero
 2011f04:	00003006 	br	2011fc8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2011f08:	e0bffe17 	ldw	r2,-8(fp)
 2011f0c:	1000051e 	bne	r2,zero,2011f24 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2011f10:	e0bfff17 	ldw	r2,-4(fp)
 2011f14:	00c00304 	movi	r3,12
 2011f18:	10c00005 	stb	r3,0(r2)
        return (0);
 2011f1c:	0005883a 	mov	r2,zero
 2011f20:	00002906 	br	2011fc8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2011f24:	d0a73903 	ldbu	r2,-25372(gp)
 2011f28:	10803fcc 	andi	r2,r2,255
 2011f2c:	10000526 	beq	r2,zero,2011f44 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 2011f30:	e0bfff17 	ldw	r2,-4(fp)
 2011f34:	00c00444 	movi	r3,17
 2011f38:	10c00005 	stb	r3,0(r2)
        return (0);
 2011f3c:	0005883a 	mov	r2,zero
 2011f40:	00002106 	br	2011fc8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 2011f44:	e0bffd17 	ldw	r2,-12(fp)
 2011f48:	10800003 	ldbu	r2,0(r2)
 2011f4c:	10803fcc 	andi	r2,r2,255
 2011f50:	10bfffc4 	addi	r2,r2,-1
 2011f54:	10800128 	cmpgeui	r2,r2,4
 2011f58:	10000526 	beq	r2,zero,2011f70 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2011f5c:	e0bfff17 	ldw	r2,-4(fp)
 2011f60:	00c00044 	movi	r3,1
 2011f64:	10c00005 	stb	r3,0(r2)
             return (0);
 2011f68:	0005883a 	mov	r2,zero
 2011f6c:	00001606 	br	2011fc8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2011f70:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011f74:	0005303a 	rdctl	r2,status
 2011f78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011f7c:	e0fffb17 	ldw	r3,-20(fp)
 2011f80:	00bfff84 	movi	r2,-2
 2011f84:	1884703a 	and	r2,r3,r2
 2011f88:	1001703a 	wrctl	status,r2
  
  return context;
 2011f8c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2011f90:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2011f94:	e0bffd17 	ldw	r2,-12(fp)
 2011f98:	10800384 	addi	r2,r2,14
 2011f9c:	100b883a 	mov	r5,r2
 2011fa0:	e13ffe17 	ldw	r4,-8(fp)
 2011fa4:	20139400 	call	2013940 <OS_StrCopy>
 2011fa8:	e0bffa05 	stb	r2,-24(fp)
 2011fac:	e0bff917 	ldw	r2,-28(fp)
 2011fb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011fb4:	e0bffc17 	ldw	r2,-16(fp)
 2011fb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2011fbc:	e0bfff17 	ldw	r2,-4(fp)
 2011fc0:	10000005 	stb	zero,0(r2)
    return (len);
 2011fc4:	e0bffa03 	ldbu	r2,-24(fp)
}
 2011fc8:	e037883a 	mov	sp,fp
 2011fcc:	dfc00117 	ldw	ra,4(sp)
 2011fd0:	df000017 	ldw	fp,0(sp)
 2011fd4:	dec00204 	addi	sp,sp,8
 2011fd8:	f800283a 	ret

02011fdc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2011fdc:	defff604 	addi	sp,sp,-40
 2011fe0:	dfc00915 	stw	ra,36(sp)
 2011fe4:	df000815 	stw	fp,32(sp)
 2011fe8:	df000804 	addi	fp,sp,32
 2011fec:	e13ffd15 	stw	r4,-12(fp)
 2011ff0:	e17ffe15 	stw	r5,-8(fp)
 2011ff4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011ff8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2011ffc:	e0bfff17 	ldw	r2,-4(fp)
 2012000:	10004026 	beq	r2,zero,2012104 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2012004:	e0bffd17 	ldw	r2,-12(fp)
 2012008:	1000041e 	bne	r2,zero,201201c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 201200c:	e0bfff17 	ldw	r2,-4(fp)
 2012010:	00c00104 	movi	r3,4
 2012014:	10c00005 	stb	r3,0(r2)
        return;
 2012018:	00003b06 	br	2012108 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201201c:	e0bffe17 	ldw	r2,-8(fp)
 2012020:	1000041e 	bne	r2,zero,2012034 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2012024:	e0bfff17 	ldw	r2,-4(fp)
 2012028:	00c00304 	movi	r3,12
 201202c:	10c00005 	stb	r3,0(r2)
        return;
 2012030:	00003506 	br	2012108 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2012034:	d0a73903 	ldbu	r2,-25372(gp)
 2012038:	10803fcc 	andi	r2,r2,255
 201203c:	10000426 	beq	r2,zero,2012050 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2012040:	e0bfff17 	ldw	r2,-4(fp)
 2012044:	00c00484 	movi	r3,18
 2012048:	10c00005 	stb	r3,0(r2)
        return;
 201204c:	00002e06 	br	2012108 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 2012050:	e0bffd17 	ldw	r2,-12(fp)
 2012054:	10800003 	ldbu	r2,0(r2)
 2012058:	10803fcc 	andi	r2,r2,255
 201205c:	10bfffc4 	addi	r2,r2,-1
 2012060:	10800128 	cmpgeui	r2,r2,4
 2012064:	10000426 	beq	r2,zero,2012078 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2012068:	e0bfff17 	ldw	r2,-4(fp)
 201206c:	00c00044 	movi	r3,1
 2012070:	10c00005 	stb	r3,0(r2)
             return;
 2012074:	00002406 	br	2012108 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2012078:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201207c:	0005303a 	rdctl	r2,status
 2012080:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012084:	e0fffc17 	ldw	r3,-16(fp)
 2012088:	00bfff84 	movi	r2,-2
 201208c:	1884703a 	and	r2,r3,r2
 2012090:	1001703a 	wrctl	status,r2
  
  return context;
 2012094:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2012098:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 201209c:	e13ffe17 	ldw	r4,-8(fp)
 20120a0:	20139b40 	call	20139b4 <OS_StrLen>
 20120a4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 20120a8:	e0bffa03 	ldbu	r2,-24(fp)
 20120ac:	10800830 	cmpltui	r2,r2,32
 20120b0:	1000081e 	bne	r2,zero,20120d4 <OSEventNameSet+0xf8>
 20120b4:	e0bff817 	ldw	r2,-32(fp)
 20120b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20120bc:	e0bff917 	ldw	r2,-28(fp)
 20120c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 20120c4:	e0bfff17 	ldw	r2,-4(fp)
 20120c8:	00c002c4 	movi	r3,11
 20120cc:	10c00005 	stb	r3,0(r2)
        return;
 20120d0:	00000d06 	br	2012108 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 20120d4:	e0bffd17 	ldw	r2,-12(fp)
 20120d8:	10800384 	addi	r2,r2,14
 20120dc:	e17ffe17 	ldw	r5,-8(fp)
 20120e0:	1009883a 	mov	r4,r2
 20120e4:	20139400 	call	2013940 <OS_StrCopy>
 20120e8:	e0bff817 	ldw	r2,-32(fp)
 20120ec:	e0bffb15 	stw	r2,-20(fp)
 20120f0:	e0bffb17 	ldw	r2,-20(fp)
 20120f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20120f8:	e0bfff17 	ldw	r2,-4(fp)
 20120fc:	10000005 	stb	zero,0(r2)
 2012100:	00000106 	br	2012108 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2012104:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2012108:	e037883a 	mov	sp,fp
 201210c:	dfc00117 	ldw	ra,4(sp)
 2012110:	df000017 	ldw	fp,0(sp)
 2012114:	dec00204 	addi	sp,sp,8
 2012118:	f800283a 	ret

0201211c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 201211c:	deffed04 	addi	sp,sp,-76
 2012120:	dfc01215 	stw	ra,72(sp)
 2012124:	df001115 	stw	fp,68(sp)
 2012128:	df001104 	addi	fp,sp,68
 201212c:	e13ffc15 	stw	r4,-16(fp)
 2012130:	e17ffd15 	stw	r5,-12(fp)
 2012134:	e1bffe15 	stw	r6,-8(fp)
 2012138:	3805883a 	mov	r2,r7
 201213c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 2012140:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 2012144:	e0800217 	ldw	r2,8(fp)
 2012148:	1000021e 	bne	r2,zero,2012154 <OSEventPendMulti+0x38>
        return (0);
 201214c:	0005883a 	mov	r2,zero
 2012150:	00017106 	br	2012718 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 2012154:	e0bffc17 	ldw	r2,-16(fp)
 2012158:	1000051e 	bne	r2,zero,2012170 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 201215c:	e0800217 	ldw	r2,8(fp)
 2012160:	00c00104 	movi	r3,4
 2012164:	10c00005 	stb	r3,0(r2)
        return (0);
 2012168:	0005883a 	mov	r2,zero
 201216c:	00016a06 	br	2012718 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2012170:	e0bffd17 	ldw	r2,-12(fp)
 2012174:	1000051e 	bne	r2,zero,201218c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2012178:	e0800217 	ldw	r2,8(fp)
 201217c:	00c00104 	movi	r3,4
 2012180:	10c00005 	stb	r3,0(r2)
        return (0);
 2012184:	0005883a 	mov	r2,zero
 2012188:	00016306 	br	2012718 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 201218c:	e0bffe17 	ldw	r2,-8(fp)
 2012190:	1000051e 	bne	r2,zero,20121a8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2012194:	e0800217 	ldw	r2,8(fp)
 2012198:	00c00104 	movi	r3,4
 201219c:	10c00005 	stb	r3,0(r2)
        return (0);
 20121a0:	0005883a 	mov	r2,zero
 20121a4:	00015c06 	br	2012718 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 20121a8:	e0bffd17 	ldw	r2,-12(fp)
 20121ac:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 20121b0:	e0bffc17 	ldw	r2,-16(fp)
 20121b4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 20121b8:	e0bfef17 	ldw	r2,-68(fp)
 20121bc:	10800017 	ldw	r2,0(r2)
 20121c0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 20121c4:	00001906 	br	201222c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 20121c8:	e0bff017 	ldw	r2,-64(fp)
 20121cc:	10800003 	ldbu	r2,0(r2)
 20121d0:	10803fcc 	andi	r2,r2,255
 20121d4:	10c000a0 	cmpeqi	r3,r2,2
 20121d8:	1800091e 	bne	r3,zero,2012200 <OSEventPendMulti+0xe4>
 20121dc:	10c000e0 	cmpeqi	r3,r2,3
 20121e0:	1800091e 	bne	r3,zero,2012208 <OSEventPendMulti+0xec>
 20121e4:	10800060 	cmpeqi	r2,r2,1
 20121e8:	1000091e 	bne	r2,zero,2012210 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 20121ec:	e0800217 	ldw	r2,8(fp)
 20121f0:	00c00044 	movi	r3,1
 20121f4:	10c00005 	stb	r3,0(r2)
                 return (0);
 20121f8:	0005883a 	mov	r2,zero
 20121fc:	00014606 	br	2012718 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 2012200:	0001883a 	nop
 2012204:	00000306 	br	2012214 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 2012208:	0001883a 	nop
 201220c:	00000106 	br	2012214 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 2012210:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 2012214:	e0bfef17 	ldw	r2,-68(fp)
 2012218:	10800104 	addi	r2,r2,4
 201221c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2012220:	e0bfef17 	ldw	r2,-68(fp)
 2012224:	10800017 	ldw	r2,0(r2)
 2012228:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 201222c:	e0bff017 	ldw	r2,-64(fp)
 2012230:	103fe51e 	bne	r2,zero,20121c8 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 2012234:	d0a73903 	ldbu	r2,-25372(gp)
 2012238:	10803fcc 	andi	r2,r2,255
 201223c:	10000526 	beq	r2,zero,2012254 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 2012240:	e0800217 	ldw	r2,8(fp)
 2012244:	00c00084 	movi	r3,2
 2012248:	10c00005 	stb	r3,0(r2)
        return (0);
 201224c:	0005883a 	mov	r2,zero
 2012250:	00013106 	br	2012718 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 2012254:	d0a72b03 	ldbu	r2,-25428(gp)
 2012258:	10803fcc 	andi	r2,r2,255
 201225c:	10000526 	beq	r2,zero,2012274 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 2012260:	e0800217 	ldw	r2,8(fp)
 2012264:	00c00344 	movi	r3,13
 2012268:	10c00005 	stb	r3,0(r2)
        return (0);
 201226c:	0005883a 	mov	r2,zero
 2012270:	00012906 	br	2012718 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012274:	0005303a 	rdctl	r2,status
 2012278:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201227c:	e0fffb17 	ldw	r3,-20(fp)
 2012280:	00bfff84 	movi	r2,-2
 2012284:	1884703a 	and	r2,r3,r2
 2012288:	1001703a 	wrctl	status,r2
  
  return context;
 201228c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2012290:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 2012294:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2012298:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 201229c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 20122a0:	e0bffc17 	ldw	r2,-16(fp)
 20122a4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 20122a8:	e0bfef17 	ldw	r2,-68(fp)
 20122ac:	10800017 	ldw	r2,0(r2)
 20122b0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 20122b4:	00008106 	br	20124bc <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 20122b8:	e0bff017 	ldw	r2,-64(fp)
 20122bc:	10800003 	ldbu	r2,0(r2)
 20122c0:	10803fcc 	andi	r2,r2,255
 20122c4:	10c000a0 	cmpeqi	r3,r2,2
 20122c8:	18003c1e 	bne	r3,zero,20123bc <OSEventPendMulti+0x2a0>
 20122cc:	10c000e0 	cmpeqi	r3,r2,3
 20122d0:	1800031e 	bne	r3,zero,20122e0 <OSEventPendMulti+0x1c4>
 20122d4:	10800060 	cmpeqi	r2,r2,1
 20122d8:	10001e1e 	bne	r2,zero,2012354 <OSEventPendMulti+0x238>
 20122dc:	00006606 	br	2012478 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 20122e0:	e0bff017 	ldw	r2,-64(fp)
 20122e4:	1080020b 	ldhu	r2,8(r2)
 20122e8:	10bfffcc 	andi	r2,r2,65535
 20122ec:	10001526 	beq	r2,zero,2012344 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 20122f0:	e0bff017 	ldw	r2,-64(fp)
 20122f4:	1080020b 	ldhu	r2,8(r2)
 20122f8:	10bfffc4 	addi	r2,r2,-1
 20122fc:	1007883a 	mov	r3,r2
 2012300:	e0bff017 	ldw	r2,-64(fp)
 2012304:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2012308:	e0bffd17 	ldw	r2,-12(fp)
 201230c:	10c00104 	addi	r3,r2,4
 2012310:	e0fffd15 	stw	r3,-12(fp)
 2012314:	e0fff017 	ldw	r3,-64(fp)
 2012318:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 201231c:	00800044 	movi	r2,1
 2012320:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 2012324:	e0bffe17 	ldw	r2,-8(fp)
 2012328:	10c00104 	addi	r3,r2,4
 201232c:	e0fffe15 	stw	r3,-8(fp)
 2012330:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 2012334:	e0bff18b 	ldhu	r2,-58(fp)
 2012338:	10800044 	addi	r2,r2,1
 201233c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 2012340:	00005806 	br	20124a4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 2012344:	e0bff203 	ldbu	r2,-56(fp)
 2012348:	10800054 	ori	r2,r2,1
 201234c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2012350:	00005406 	br	20124a4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 2012354:	e0bff017 	ldw	r2,-64(fp)
 2012358:	10800117 	ldw	r2,4(r2)
 201235c:	10001326 	beq	r2,zero,20123ac <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 2012360:	e0bffe17 	ldw	r2,-8(fp)
 2012364:	10c00104 	addi	r3,r2,4
 2012368:	e0fffe15 	stw	r3,-8(fp)
 201236c:	e0fff017 	ldw	r3,-64(fp)
 2012370:	18c00117 	ldw	r3,4(r3)
 2012374:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 2012378:	e0bff017 	ldw	r2,-64(fp)
 201237c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 2012380:	e0bffd17 	ldw	r2,-12(fp)
 2012384:	10c00104 	addi	r3,r2,4
 2012388:	e0fffd15 	stw	r3,-12(fp)
 201238c:	e0fff017 	ldw	r3,-64(fp)
 2012390:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 2012394:	00800044 	movi	r2,1
 2012398:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 201239c:	e0bff18b 	ldhu	r2,-58(fp)
 20123a0:	10800044 	addi	r2,r2,1
 20123a4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 20123a8:	00003e06 	br	20124a4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 20123ac:	e0bff203 	ldbu	r2,-56(fp)
 20123b0:	10800094 	ori	r2,r2,2
 20123b4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20123b8:	00003a06 	br	20124a4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 20123bc:	e0bff017 	ldw	r2,-64(fp)
 20123c0:	10800117 	ldw	r2,4(r2)
 20123c4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 20123c8:	e0bff517 	ldw	r2,-44(fp)
 20123cc:	1080058b 	ldhu	r2,22(r2)
 20123d0:	10bfffcc 	andi	r2,r2,65535
 20123d4:	10002426 	beq	r2,zero,2012468 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 20123d8:	e0bffe17 	ldw	r2,-8(fp)
 20123dc:	10c00104 	addi	r3,r2,4
 20123e0:	e0fffe15 	stw	r3,-8(fp)
 20123e4:	e0fff517 	ldw	r3,-44(fp)
 20123e8:	18c00417 	ldw	r3,16(r3)
 20123ec:	19400104 	addi	r5,r3,4
 20123f0:	e13ff517 	ldw	r4,-44(fp)
 20123f4:	21400415 	stw	r5,16(r4)
 20123f8:	18c00017 	ldw	r3,0(r3)
 20123fc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2012400:	e0bff517 	ldw	r2,-44(fp)
 2012404:	10c00417 	ldw	r3,16(r2)
 2012408:	e0bff517 	ldw	r2,-44(fp)
 201240c:	10800217 	ldw	r2,8(r2)
 2012410:	1880041e 	bne	r3,r2,2012424 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 2012414:	e0bff517 	ldw	r2,-44(fp)
 2012418:	10c00117 	ldw	r3,4(r2)
 201241c:	e0bff517 	ldw	r2,-44(fp)
 2012420:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 2012424:	e0bff517 	ldw	r2,-44(fp)
 2012428:	1080058b 	ldhu	r2,22(r2)
 201242c:	10bfffc4 	addi	r2,r2,-1
 2012430:	1007883a 	mov	r3,r2
 2012434:	e0bff517 	ldw	r2,-44(fp)
 2012438:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 201243c:	e0bffd17 	ldw	r2,-12(fp)
 2012440:	10c00104 	addi	r3,r2,4
 2012444:	e0fffd15 	stw	r3,-12(fp)
 2012448:	e0fff017 	ldw	r3,-64(fp)
 201244c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 2012450:	00800044 	movi	r2,1
 2012454:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2012458:	e0bff18b 	ldhu	r2,-58(fp)
 201245c:	10800044 	addi	r2,r2,1
 2012460:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 2012464:	00000f06 	br	20124a4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 2012468:	e0bff203 	ldbu	r2,-56(fp)
 201246c:	10800114 	ori	r2,r2,4
 2012470:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2012474:	00000b06 	br	20124a4 <OSEventPendMulti+0x388>
 2012478:	e0bff317 	ldw	r2,-52(fp)
 201247c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012480:	e0bff417 	ldw	r2,-48(fp)
 2012484:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2012488:	e0bffd17 	ldw	r2,-12(fp)
 201248c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2012490:	e0800217 	ldw	r2,8(fp)
 2012494:	00c00044 	movi	r3,1
 2012498:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 201249c:	e0bff18b 	ldhu	r2,-58(fp)
 20124a0:	00009d06 	br	2012718 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 20124a4:	e0bfef17 	ldw	r2,-68(fp)
 20124a8:	10800104 	addi	r2,r2,4
 20124ac:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 20124b0:	e0bfef17 	ldw	r2,-68(fp)
 20124b4:	10800017 	ldw	r2,0(r2)
 20124b8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 20124bc:	e0bff017 	ldw	r2,-64(fp)
 20124c0:	103f7d1e 	bne	r2,zero,20122b8 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 20124c4:	e0bff103 	ldbu	r2,-60(fp)
 20124c8:	10800058 	cmpnei	r2,r2,1
 20124cc:	10000a1e 	bne	r2,zero,20124f8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 20124d0:	e0bffd17 	ldw	r2,-12(fp)
 20124d4:	10000015 	stw	zero,0(r2)
 20124d8:	e0bff317 	ldw	r2,-52(fp)
 20124dc:	e0bff615 	stw	r2,-40(fp)
 20124e0:	e0bff617 	ldw	r2,-40(fp)
 20124e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 20124e8:	e0800217 	ldw	r2,8(fp)
 20124ec:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 20124f0:	e0bff18b 	ldhu	r2,-58(fp)
 20124f4:	00008806 	br	2012718 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 20124f8:	d0a73a17 	ldw	r2,-25368(gp)
 20124fc:	d0e73a17 	ldw	r3,-25368(gp)
 2012500:	19000c03 	ldbu	r4,48(r3)
 2012504:	e0fff203 	ldbu	r3,-56(fp)
 2012508:	20c6b03a 	or	r3,r4,r3
 201250c:	1809883a 	mov	r4,r3
 2012510:	00ffe004 	movi	r3,-128
 2012514:	20c6b03a 	or	r3,r4,r3
 2012518:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201251c:	d0a73a17 	ldw	r2,-25368(gp)
 2012520:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 2012524:	d0a73a17 	ldw	r2,-25368(gp)
 2012528:	e0ffff0b 	ldhu	r3,-4(fp)
 201252c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 2012530:	e13ffc17 	ldw	r4,-16(fp)
 2012534:	20130580 	call	2013058 <OS_EventTaskWaitMulti>
 2012538:	e0bff317 	ldw	r2,-52(fp)
 201253c:	e0bff915 	stw	r2,-28(fp)
 2012540:	e0bff917 	ldw	r2,-28(fp)
 2012544:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 2012548:	20137fc0 	call	20137fc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201254c:	0005303a 	rdctl	r2,status
 2012550:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012554:	e0fff717 	ldw	r3,-36(fp)
 2012558:	00bfff84 	movi	r2,-2
 201255c:	1884703a 	and	r2,r3,r2
 2012560:	1001703a 	wrctl	status,r2
  
  return context;
 2012564:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 2012568:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 201256c:	d0a73a17 	ldw	r2,-25368(gp)
 2012570:	10800c43 	ldbu	r2,49(r2)
 2012574:	10803fcc 	andi	r2,r2,255
 2012578:	10000226 	beq	r2,zero,2012584 <OSEventPendMulti+0x468>
 201257c:	108000a0 	cmpeqi	r2,r2,2
 2012580:	10001826 	beq	r2,zero,20125e4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 2012584:	d0a73a17 	ldw	r2,-25368(gp)
 2012588:	10800717 	ldw	r2,28(r2)
 201258c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2012590:	e0bff017 	ldw	r2,-64(fp)
 2012594:	10000b26 	beq	r2,zero,20125c4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2012598:	e0bffd17 	ldw	r2,-12(fp)
 201259c:	10c00104 	addi	r3,r2,4
 20125a0:	e0fffd15 	stw	r3,-12(fp)
 20125a4:	e0fff017 	ldw	r3,-64(fp)
 20125a8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 20125ac:	e0bffd17 	ldw	r2,-12(fp)
 20125b0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 20125b4:	e0bff18b 	ldhu	r2,-58(fp)
 20125b8:	10800044 	addi	r2,r2,1
 20125bc:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 20125c0:	00000d06 	br	20125f8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 20125c4:	d0a73a17 	ldw	r2,-25368(gp)
 20125c8:	00c00044 	movi	r3,1
 20125cc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 20125d0:	d0a73a17 	ldw	r2,-25368(gp)
 20125d4:	e17ffc17 	ldw	r5,-16(fp)
 20125d8:	1009883a 	mov	r4,r2
 20125dc:	20132600 	call	2013260 <OS_EventTaskRemoveMulti>
             }
			 break;
 20125e0:	00000506 	br	20125f8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 20125e4:	d0a73a17 	ldw	r2,-25368(gp)
 20125e8:	e17ffc17 	ldw	r5,-16(fp)
 20125ec:	1009883a 	mov	r4,r2
 20125f0:	20132600 	call	2013260 <OS_EventTaskRemoveMulti>
             break;
 20125f4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 20125f8:	d0a73a17 	ldw	r2,-25368(gp)
 20125fc:	10800c43 	ldbu	r2,49(r2)
 2012600:	10803fcc 	andi	r2,r2,255
 2012604:	10000326 	beq	r2,zero,2012614 <OSEventPendMulti+0x4f8>
 2012608:	108000a0 	cmpeqi	r2,r2,2
 201260c:	1000231e 	bne	r2,zero,201269c <OSEventPendMulti+0x580>
 2012610:	00002a06 	br	20126bc <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 2012614:	e0bff017 	ldw	r2,-64(fp)
 2012618:	10800003 	ldbu	r2,0(r2)
 201261c:	10803fcc 	andi	r2,r2,255
 2012620:	0080100e 	bge	zero,r2,2012664 <OSEventPendMulti+0x548>
 2012624:	10c000d0 	cmplti	r3,r2,3
 2012628:	1800071e 	bne	r3,zero,2012648 <OSEventPendMulti+0x52c>
 201262c:	108000e0 	cmpeqi	r2,r2,3
 2012630:	10000c26 	beq	r2,zero,2012664 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 2012634:	e0bffe17 	ldw	r2,-8(fp)
 2012638:	10c00104 	addi	r3,r2,4
 201263c:	e0fffe15 	stw	r3,-8(fp)
 2012640:	10000015 	stw	zero,0(r2)
                      break;
 2012644:	00001206 	br	2012690 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 2012648:	e0bffe17 	ldw	r2,-8(fp)
 201264c:	10c00104 	addi	r3,r2,4
 2012650:	e0fffe15 	stw	r3,-8(fp)
 2012654:	d0e73a17 	ldw	r3,-25368(gp)
 2012658:	18c00917 	ldw	r3,36(r3)
 201265c:	10c00015 	stw	r3,0(r2)
                      break;
 2012660:	00000b06 	br	2012690 <OSEventPendMulti+0x574>
 2012664:	e0bff317 	ldw	r2,-52(fp)
 2012668:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201266c:	e0bff817 	ldw	r2,-32(fp)
 2012670:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 2012674:	e0bffd17 	ldw	r2,-12(fp)
 2012678:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 201267c:	e0800217 	ldw	r2,8(fp)
 2012680:	00c00044 	movi	r3,1
 2012684:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 2012688:	e0bff18b 	ldhu	r2,-58(fp)
 201268c:	00002206 	br	2012718 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 2012690:	e0800217 	ldw	r2,8(fp)
 2012694:	10000005 	stb	zero,0(r2)
             break;
 2012698:	00001006 	br	20126dc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 201269c:	e0bffe17 	ldw	r2,-8(fp)
 20126a0:	10c00104 	addi	r3,r2,4
 20126a4:	e0fffe15 	stw	r3,-8(fp)
 20126a8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 20126ac:	e0800217 	ldw	r2,8(fp)
 20126b0:	00c00384 	movi	r3,14
 20126b4:	10c00005 	stb	r3,0(r2)
             break;
 20126b8:	00000806 	br	20126dc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 20126bc:	e0bffe17 	ldw	r2,-8(fp)
 20126c0:	10c00104 	addi	r3,r2,4
 20126c4:	e0fffe15 	stw	r3,-8(fp)
 20126c8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 20126cc:	e0800217 	ldw	r2,8(fp)
 20126d0:	00c00284 	movi	r3,10
 20126d4:	10c00005 	stb	r3,0(r2)
             break;
 20126d8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 20126dc:	d0a73a17 	ldw	r2,-25368(gp)
 20126e0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 20126e4:	d0a73a17 	ldw	r2,-25368(gp)
 20126e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 20126ec:	d0a73a17 	ldw	r2,-25368(gp)
 20126f0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 20126f4:	d0a73a17 	ldw	r2,-25368(gp)
 20126f8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 20126fc:	d0a73a17 	ldw	r2,-25368(gp)
 2012700:	10000915 	stw	zero,36(r2)
 2012704:	e0bff317 	ldw	r2,-52(fp)
 2012708:	e0bffa15 	stw	r2,-24(fp)
 201270c:	e0bffa17 	ldw	r2,-24(fp)
 2012710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2012714:	e0bff18b 	ldhu	r2,-58(fp)
}
 2012718:	e037883a 	mov	sp,fp
 201271c:	dfc00117 	ldw	ra,4(sp)
 2012720:	df000017 	ldw	fp,0(sp)
 2012724:	dec00204 	addi	sp,sp,8
 2012728:	f800283a 	ret

0201272c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 201272c:	defffe04 	addi	sp,sp,-8
 2012730:	dfc00115 	stw	ra,4(sp)
 2012734:	df000015 	stw	fp,0(sp)
 2012738:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 201273c:	201be4c0 	call	201be4c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 2012740:	20134a80 	call	20134a8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 2012744:	20134f00 	call	20134f0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 2012748:	201365c0 	call	201365c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 201274c:	20133c80 	call	20133c8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 2012750:	20154fc0 	call	20154fc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 2012754:	20168c40 	call	20168c4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 2012758:	20179ec0 	call	20179ec <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 201275c:	201355c0 	call	201355c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 2012760:	20135dc0 	call	20135dc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 2012764:	201be6c0 	call	201be6c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 2012768:	2013ed00 	call	2013ed0 <OSDebugInit>
#endif
}
 201276c:	0001883a 	nop
 2012770:	e037883a 	mov	sp,fp
 2012774:	dfc00117 	ldw	ra,4(sp)
 2012778:	df000017 	ldw	fp,0(sp)
 201277c:	dec00204 	addi	sp,sp,8
 2012780:	f800283a 	ret

02012784 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 2012784:	deffff04 	addi	sp,sp,-4
 2012788:	df000015 	stw	fp,0(sp)
 201278c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 2012790:	d0a72b43 	ldbu	r2,-25427(gp)
 2012794:	10803fcc 	andi	r2,r2,255
 2012798:	10800058 	cmpnei	r2,r2,1
 201279c:	1000071e 	bne	r2,zero,20127bc <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 20127a0:	d0a73903 	ldbu	r2,-25372(gp)
 20127a4:	10803fcc 	andi	r2,r2,255
 20127a8:	10803fe0 	cmpeqi	r2,r2,255
 20127ac:	1000031e 	bne	r2,zero,20127bc <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 20127b0:	d0a73903 	ldbu	r2,-25372(gp)
 20127b4:	10800044 	addi	r2,r2,1
 20127b8:	d0a73905 	stb	r2,-25372(gp)
        }
    }
}
 20127bc:	0001883a 	nop
 20127c0:	e037883a 	mov	sp,fp
 20127c4:	df000017 	ldw	fp,0(sp)
 20127c8:	dec00104 	addi	sp,sp,4
 20127cc:	f800283a 	ret

020127d0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 20127d0:	defffb04 	addi	sp,sp,-20
 20127d4:	dfc00415 	stw	ra,16(sp)
 20127d8:	df000315 	stw	fp,12(sp)
 20127dc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20127e0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 20127e4:	d0a72b43 	ldbu	r2,-25427(gp)
 20127e8:	10803fcc 	andi	r2,r2,255
 20127ec:	10800058 	cmpnei	r2,r2,1
 20127f0:	10002f1e 	bne	r2,zero,20128b0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20127f4:	0005303a 	rdctl	r2,status
 20127f8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20127fc:	e0ffff17 	ldw	r3,-4(fp)
 2012800:	00bfff84 	movi	r2,-2
 2012804:	1884703a 	and	r2,r3,r2
 2012808:	1001703a 	wrctl	status,r2
  
  return context;
 201280c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2012810:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2012814:	d0a73903 	ldbu	r2,-25372(gp)
 2012818:	10803fcc 	andi	r2,r2,255
 201281c:	10000326 	beq	r2,zero,201282c <OSIntExit+0x5c>
            OSIntNesting--;
 2012820:	d0a73903 	ldbu	r2,-25372(gp)
 2012824:	10bfffc4 	addi	r2,r2,-1
 2012828:	d0a73905 	stb	r2,-25372(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 201282c:	d0a73903 	ldbu	r2,-25372(gp)
 2012830:	10803fcc 	andi	r2,r2,255
 2012834:	10001a1e 	bne	r2,zero,20128a0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 2012838:	d0a72b03 	ldbu	r2,-25428(gp)
 201283c:	10803fcc 	andi	r2,r2,255
 2012840:	1000171e 	bne	r2,zero,20128a0 <OSIntExit+0xd0>
                OS_SchedNew();
 2012844:	20138cc0 	call	20138cc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 2012848:	d0e72d03 	ldbu	r3,-25420(gp)
 201284c:	d0a72d43 	ldbu	r2,-25419(gp)
 2012850:	18c03fcc 	andi	r3,r3,255
 2012854:	10803fcc 	andi	r2,r2,255
 2012858:	18801126 	beq	r3,r2,20128a0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 201285c:	d0a72d03 	ldbu	r2,-25420(gp)
 2012860:	10c03fcc 	andi	r3,r2,255
 2012864:	008080b4 	movhi	r2,514
 2012868:	109da504 	addi	r2,r2,30356
 201286c:	18c7883a 	add	r3,r3,r3
 2012870:	18c7883a 	add	r3,r3,r3
 2012874:	10c5883a 	add	r2,r2,r3
 2012878:	10800017 	ldw	r2,0(r2)
 201287c:	d0a73515 	stw	r2,-25388(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 2012880:	d0a73517 	ldw	r2,-25388(gp)
 2012884:	10c00e17 	ldw	r3,56(r2)
 2012888:	18c00044 	addi	r3,r3,1
 201288c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2012890:	d0a73017 	ldw	r2,-25408(gp)
 2012894:	10800044 	addi	r2,r2,1
 2012898:	d0a73015 	stw	r2,-25408(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 201289c:	201bb780 	call	201bb78 <OSCtxSw>
 20128a0:	e0bffd17 	ldw	r2,-12(fp)
 20128a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20128a8:	e0bffe17 	ldw	r2,-8(fp)
 20128ac:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20128b0:	0001883a 	nop
 20128b4:	e037883a 	mov	sp,fp
 20128b8:	dfc00117 	ldw	ra,4(sp)
 20128bc:	df000017 	ldw	fp,0(sp)
 20128c0:	dec00204 	addi	sp,sp,8
 20128c4:	f800283a 	ret

020128c8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 20128c8:	defffc04 	addi	sp,sp,-16
 20128cc:	df000315 	stw	fp,12(sp)
 20128d0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20128d4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 20128d8:	d0a72b43 	ldbu	r2,-25427(gp)
 20128dc:	10803fcc 	andi	r2,r2,255
 20128e0:	10800058 	cmpnei	r2,r2,1
 20128e4:	1000161e 	bne	r2,zero,2012940 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20128e8:	0005303a 	rdctl	r2,status
 20128ec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20128f0:	e0ffff17 	ldw	r3,-4(fp)
 20128f4:	00bfff84 	movi	r2,-2
 20128f8:	1884703a 	and	r2,r3,r2
 20128fc:	1001703a 	wrctl	status,r2
  
  return context;
 2012900:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2012904:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2012908:	d0a73903 	ldbu	r2,-25372(gp)
 201290c:	10803fcc 	andi	r2,r2,255
 2012910:	1000071e 	bne	r2,zero,2012930 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2012914:	d0a72b03 	ldbu	r2,-25428(gp)
 2012918:	10803fcc 	andi	r2,r2,255
 201291c:	10803fe0 	cmpeqi	r2,r2,255
 2012920:	1000031e 	bne	r2,zero,2012930 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2012924:	d0a72b03 	ldbu	r2,-25428(gp)
 2012928:	10800044 	addi	r2,r2,1
 201292c:	d0a72b05 	stb	r2,-25428(gp)
 2012930:	e0bffd17 	ldw	r2,-12(fp)
 2012934:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012938:	e0bffe17 	ldw	r2,-8(fp)
 201293c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2012940:	0001883a 	nop
 2012944:	e037883a 	mov	sp,fp
 2012948:	df000017 	ldw	fp,0(sp)
 201294c:	dec00104 	addi	sp,sp,4
 2012950:	f800283a 	ret

02012954 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 2012954:	defff804 	addi	sp,sp,-32
 2012958:	dfc00715 	stw	ra,28(sp)
 201295c:	df000615 	stw	fp,24(sp)
 2012960:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2012964:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 2012968:	d0a72b43 	ldbu	r2,-25427(gp)
 201296c:	10803fcc 	andi	r2,r2,255
 2012970:	10800058 	cmpnei	r2,r2,1
 2012974:	1000281e 	bne	r2,zero,2012a18 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012978:	0005303a 	rdctl	r2,status
 201297c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012980:	e0ffff17 	ldw	r3,-4(fp)
 2012984:	00bfff84 	movi	r2,-2
 2012988:	1884703a 	and	r2,r3,r2
 201298c:	1001703a 	wrctl	status,r2
  
  return context;
 2012990:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2012994:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2012998:	d0a72b03 	ldbu	r2,-25428(gp)
 201299c:	10803fcc 	andi	r2,r2,255
 20129a0:	10001926 	beq	r2,zero,2012a08 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 20129a4:	d0a72b03 	ldbu	r2,-25428(gp)
 20129a8:	10bfffc4 	addi	r2,r2,-1
 20129ac:	d0a72b05 	stb	r2,-25428(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 20129b0:	d0a72b03 	ldbu	r2,-25428(gp)
 20129b4:	10803fcc 	andi	r2,r2,255
 20129b8:	10000e1e 	bne	r2,zero,20129f4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 20129bc:	d0a73903 	ldbu	r2,-25372(gp)
 20129c0:	10803fcc 	andi	r2,r2,255
 20129c4:	1000061e 	bne	r2,zero,20129e0 <OSSchedUnlock+0x8c>
 20129c8:	e0bffa17 	ldw	r2,-24(fp)
 20129cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20129d0:	e0bffb17 	ldw	r2,-20(fp)
 20129d4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 20129d8:	20137fc0 	call	20137fc <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 20129dc:	00000e06 	br	2012a18 <OSSchedUnlock+0xc4>
 20129e0:	e0bffa17 	ldw	r2,-24(fp)
 20129e4:	e0bffc15 	stw	r2,-16(fp)
 20129e8:	e0bffc17 	ldw	r2,-16(fp)
 20129ec:	1001703a 	wrctl	status,r2
 20129f0:	00000906 	br	2012a18 <OSSchedUnlock+0xc4>
 20129f4:	e0bffa17 	ldw	r2,-24(fp)
 20129f8:	e0bffd15 	stw	r2,-12(fp)
 20129fc:	e0bffd17 	ldw	r2,-12(fp)
 2012a00:	1001703a 	wrctl	status,r2
 2012a04:	00000406 	br	2012a18 <OSSchedUnlock+0xc4>
 2012a08:	e0bffa17 	ldw	r2,-24(fp)
 2012a0c:	e0bffe15 	stw	r2,-8(fp)
 2012a10:	e0bffe17 	ldw	r2,-8(fp)
 2012a14:	1001703a 	wrctl	status,r2
 2012a18:	0001883a 	nop
 2012a1c:	e037883a 	mov	sp,fp
 2012a20:	dfc00117 	ldw	ra,4(sp)
 2012a24:	df000017 	ldw	fp,0(sp)
 2012a28:	dec00204 	addi	sp,sp,8
 2012a2c:	f800283a 	ret

02012a30 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2012a30:	defffe04 	addi	sp,sp,-8
 2012a34:	dfc00115 	stw	ra,4(sp)
 2012a38:	df000015 	stw	fp,0(sp)
 2012a3c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 2012a40:	d0a72b43 	ldbu	r2,-25427(gp)
 2012a44:	10803fcc 	andi	r2,r2,255
 2012a48:	10000f1e 	bne	r2,zero,2012a88 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 2012a4c:	20138cc0 	call	20138cc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 2012a50:	d0a72d03 	ldbu	r2,-25420(gp)
 2012a54:	d0a72d45 	stb	r2,-25419(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 2012a58:	d0a72d03 	ldbu	r2,-25420(gp)
 2012a5c:	10c03fcc 	andi	r3,r2,255
 2012a60:	008080b4 	movhi	r2,514
 2012a64:	109da504 	addi	r2,r2,30356
 2012a68:	18c7883a 	add	r3,r3,r3
 2012a6c:	18c7883a 	add	r3,r3,r3
 2012a70:	10c5883a 	add	r2,r2,r3
 2012a74:	10800017 	ldw	r2,0(r2)
 2012a78:	d0a73515 	stw	r2,-25388(gp)
        OSTCBCur      = OSTCBHighRdy;
 2012a7c:	d0a73517 	ldw	r2,-25388(gp)
 2012a80:	d0a73a15 	stw	r2,-25368(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2012a84:	201bc040 	call	201bc04 <OSStartHighRdy>
    }
}
 2012a88:	0001883a 	nop
 2012a8c:	e037883a 	mov	sp,fp
 2012a90:	dfc00117 	ldw	ra,4(sp)
 2012a94:	df000017 	ldw	fp,0(sp)
 2012a98:	dec00204 	addi	sp,sp,8
 2012a9c:	f800283a 	ret

02012aa0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2012aa0:	defff904 	addi	sp,sp,-28
 2012aa4:	dfc00615 	stw	ra,24(sp)
 2012aa8:	df000515 	stw	fp,20(sp)
 2012aac:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2012ab0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2012ab4:	01000084 	movi	r4,2
 2012ab8:	2019c600 	call	2019c60 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012abc:	0005303a 	rdctl	r2,status
 2012ac0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012ac4:	e0fffc17 	ldw	r3,-16(fp)
 2012ac8:	00bfff84 	movi	r2,-2
 2012acc:	1884703a 	and	r2,r3,r2
 2012ad0:	1001703a 	wrctl	status,r2
  
  return context;
 2012ad4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2012ad8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2012adc:	d0272c15 	stw	zero,-25424(gp)
 2012ae0:	e0bffb17 	ldw	r2,-20(fp)
 2012ae4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012ae8:	e0bffd17 	ldw	r2,-12(fp)
 2012aec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2012af0:	01001904 	movi	r4,100
 2012af4:	2019c600 	call	2019c60 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012af8:	0005303a 	rdctl	r2,status
 2012afc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012b00:	e0fffe17 	ldw	r3,-8(fp)
 2012b04:	00bfff84 	movi	r2,-2
 2012b08:	1884703a 	and	r2,r3,r2
 2012b0c:	1001703a 	wrctl	status,r2
  
  return context;
 2012b10:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2012b14:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2012b18:	d0a72c17 	ldw	r2,-25424(gp)
 2012b1c:	d0a73115 	stw	r2,-25404(gp)
    OSStatRdy    = OS_TRUE;
 2012b20:	00800044 	movi	r2,1
 2012b24:	d0a73d05 	stb	r2,-25356(gp)
 2012b28:	e0bffb17 	ldw	r2,-20(fp)
 2012b2c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012b30:	e0bfff17 	ldw	r2,-4(fp)
 2012b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2012b38:	0001883a 	nop
 2012b3c:	e037883a 	mov	sp,fp
 2012b40:	dfc00117 	ldw	ra,4(sp)
 2012b44:	df000017 	ldw	fp,0(sp)
 2012b48:	dec00204 	addi	sp,sp,8
 2012b4c:	f800283a 	ret

02012b50 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 2012b50:	defff704 	addi	sp,sp,-36
 2012b54:	dfc00815 	stw	ra,32(sp)
 2012b58:	df000715 	stw	fp,28(sp)
 2012b5c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2012b60:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2012b64:	201be2c0 	call	201be2c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012b68:	0005303a 	rdctl	r2,status
 2012b6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012b70:	e0fffd17 	ldw	r3,-12(fp)
 2012b74:	00bfff84 	movi	r2,-2
 2012b78:	1884703a 	and	r2,r3,r2
 2012b7c:	1001703a 	wrctl	status,r2
  
  return context;
 2012b80:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2012b84:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2012b88:	d0a73b17 	ldw	r2,-25364(gp)
 2012b8c:	10800044 	addi	r2,r2,1
 2012b90:	d0a73b15 	stw	r2,-25364(gp)
 2012b94:	e0bffb17 	ldw	r2,-20(fp)
 2012b98:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012b9c:	e0bfff17 	ldw	r2,-4(fp)
 2012ba0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2012ba4:	d0a72b43 	ldbu	r2,-25427(gp)
 2012ba8:	10803fcc 	andi	r2,r2,255
 2012bac:	10800058 	cmpnei	r2,r2,1
 2012bb0:	10006a1e 	bne	r2,zero,2012d5c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2012bb4:	d0a72f03 	ldbu	r2,-25412(gp)
 2012bb8:	10803fcc 	andi	r2,r2,255
 2012bbc:	10c00060 	cmpeqi	r3,r2,1
 2012bc0:	1800061e 	bne	r3,zero,2012bdc <OSTimeTick+0x8c>
 2012bc4:	10c000a0 	cmpeqi	r3,r2,2
 2012bc8:	1800061e 	bne	r3,zero,2012be4 <OSTimeTick+0x94>
 2012bcc:	10000a1e 	bne	r2,zero,2012bf8 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2012bd0:	00800044 	movi	r2,1
 2012bd4:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2012bd8:	00000b06 	br	2012c08 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2012bdc:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2012be0:	00000906 	br	2012c08 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2012be4:	00800044 	movi	r2,1
 2012be8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2012bec:	00800044 	movi	r2,1
 2012bf0:	d0a72f05 	stb	r2,-25412(gp)
                 break;
 2012bf4:	00000406 	br	2012c08 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2012bf8:	00800044 	movi	r2,1
 2012bfc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2012c00:	d0272f05 	stb	zero,-25412(gp)
                 break;
 2012c04:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2012c08:	e0bffa03 	ldbu	r2,-24(fp)
 2012c0c:	10005226 	beq	r2,zero,2012d58 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2012c10:	d0a72e17 	ldw	r2,-25416(gp)
 2012c14:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2012c18:	00004906 	br	2012d40 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012c1c:	0005303a 	rdctl	r2,status
 2012c20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012c24:	e0fffc17 	ldw	r3,-16(fp)
 2012c28:	00bfff84 	movi	r2,-2
 2012c2c:	1884703a 	and	r2,r3,r2
 2012c30:	1001703a 	wrctl	status,r2
  
  return context;
 2012c34:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 2012c38:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2012c3c:	e0bff917 	ldw	r2,-28(fp)
 2012c40:	10800b8b 	ldhu	r2,46(r2)
 2012c44:	10bfffcc 	andi	r2,r2,65535
 2012c48:	10003626 	beq	r2,zero,2012d24 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2012c4c:	e0bff917 	ldw	r2,-28(fp)
 2012c50:	10800b8b 	ldhu	r2,46(r2)
 2012c54:	10bfffc4 	addi	r2,r2,-1
 2012c58:	1007883a 	mov	r3,r2
 2012c5c:	e0bff917 	ldw	r2,-28(fp)
 2012c60:	10c00b8d 	sth	r3,46(r2)
 2012c64:	e0bff917 	ldw	r2,-28(fp)
 2012c68:	10800b8b 	ldhu	r2,46(r2)
 2012c6c:	10bfffcc 	andi	r2,r2,65535
 2012c70:	10002c1e 	bne	r2,zero,2012d24 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2012c74:	e0bff917 	ldw	r2,-28(fp)
 2012c78:	10800c03 	ldbu	r2,48(r2)
 2012c7c:	10803fcc 	andi	r2,r2,255
 2012c80:	10800dcc 	andi	r2,r2,55
 2012c84:	10000b26 	beq	r2,zero,2012cb4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2012c88:	e0bff917 	ldw	r2,-28(fp)
 2012c8c:	10c00c03 	ldbu	r3,48(r2)
 2012c90:	00bff204 	movi	r2,-56
 2012c94:	1884703a 	and	r2,r3,r2
 2012c98:	1007883a 	mov	r3,r2
 2012c9c:	e0bff917 	ldw	r2,-28(fp)
 2012ca0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2012ca4:	e0bff917 	ldw	r2,-28(fp)
 2012ca8:	00c00044 	movi	r3,1
 2012cac:	10c00c45 	stb	r3,49(r2)
 2012cb0:	00000206 	br	2012cbc <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2012cb4:	e0bff917 	ldw	r2,-28(fp)
 2012cb8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2012cbc:	e0bff917 	ldw	r2,-28(fp)
 2012cc0:	10800c03 	ldbu	r2,48(r2)
 2012cc4:	10803fcc 	andi	r2,r2,255
 2012cc8:	1080020c 	andi	r2,r2,8
 2012ccc:	1000151e 	bne	r2,zero,2012d24 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2012cd0:	e0bff917 	ldw	r2,-28(fp)
 2012cd4:	10c00d83 	ldbu	r3,54(r2)
 2012cd8:	d0a73703 	ldbu	r2,-25380(gp)
 2012cdc:	1884b03a 	or	r2,r3,r2
 2012ce0:	d0a73705 	stb	r2,-25380(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2012ce4:	e0bff917 	ldw	r2,-28(fp)
 2012ce8:	10800d03 	ldbu	r2,52(r2)
 2012cec:	10c03fcc 	andi	r3,r2,255
 2012cf0:	e0bff917 	ldw	r2,-28(fp)
 2012cf4:	10800d03 	ldbu	r2,52(r2)
 2012cf8:	11003fcc 	andi	r4,r2,255
 2012cfc:	d0a73744 	addi	r2,gp,-25379
 2012d00:	2085883a 	add	r2,r4,r2
 2012d04:	11000003 	ldbu	r4,0(r2)
 2012d08:	e0bff917 	ldw	r2,-28(fp)
 2012d0c:	10800d43 	ldbu	r2,53(r2)
 2012d10:	2084b03a 	or	r2,r4,r2
 2012d14:	1009883a 	mov	r4,r2
 2012d18:	d0a73744 	addi	r2,gp,-25379
 2012d1c:	1885883a 	add	r2,r3,r2
 2012d20:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2012d24:	e0bff917 	ldw	r2,-28(fp)
 2012d28:	10800517 	ldw	r2,20(r2)
 2012d2c:	e0bff915 	stw	r2,-28(fp)
 2012d30:	e0bffb17 	ldw	r2,-20(fp)
 2012d34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012d38:	e0bffe17 	ldw	r2,-8(fp)
 2012d3c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2012d40:	e0bff917 	ldw	r2,-28(fp)
 2012d44:	10800c83 	ldbu	r2,50(r2)
 2012d48:	10803fcc 	andi	r2,r2,255
 2012d4c:	10800518 	cmpnei	r2,r2,20
 2012d50:	103fb21e 	bne	r2,zero,2012c1c <OSTimeTick+0xcc>
 2012d54:	00000106 	br	2012d5c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 2012d58:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2012d5c:	e037883a 	mov	sp,fp
 2012d60:	dfc00117 	ldw	ra,4(sp)
 2012d64:	df000017 	ldw	fp,0(sp)
 2012d68:	dec00204 	addi	sp,sp,8
 2012d6c:	f800283a 	ret

02012d70 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2012d70:	deffff04 	addi	sp,sp,-4
 2012d74:	df000015 	stw	fp,0(sp)
 2012d78:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2012d7c:	00804784 	movi	r2,286
}
 2012d80:	e037883a 	mov	sp,fp
 2012d84:	df000017 	ldw	fp,0(sp)
 2012d88:	dec00104 	addi	sp,sp,4
 2012d8c:	f800283a 	ret

02012d90 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2012d90:	deffff04 	addi	sp,sp,-4
 2012d94:	df000015 	stw	fp,0(sp)
 2012d98:	d839883a 	mov	fp,sp
}
 2012d9c:	0001883a 	nop
 2012da0:	e037883a 	mov	sp,fp
 2012da4:	df000017 	ldw	fp,0(sp)
 2012da8:	dec00104 	addi	sp,sp,4
 2012dac:	f800283a 	ret

02012db0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2012db0:	defff804 	addi	sp,sp,-32
 2012db4:	dfc00715 	stw	ra,28(sp)
 2012db8:	df000615 	stw	fp,24(sp)
 2012dbc:	df000604 	addi	fp,sp,24
 2012dc0:	e13ffc15 	stw	r4,-16(fp)
 2012dc4:	e17ffd15 	stw	r5,-12(fp)
 2012dc8:	3007883a 	mov	r3,r6
 2012dcc:	3805883a 	mov	r2,r7
 2012dd0:	e0fffe05 	stb	r3,-8(fp)
 2012dd4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2012dd8:	e0bffc17 	ldw	r2,-16(fp)
 2012ddc:	10800283 	ldbu	r2,10(r2)
 2012de0:	10c03fcc 	andi	r3,r2,255
 2012de4:	008080b4 	movhi	r2,514
 2012de8:	10b2e804 	addi	r2,r2,-13408
 2012dec:	10c5883a 	add	r2,r2,r3
 2012df0:	10800003 	ldbu	r2,0(r2)
 2012df4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2012df8:	e0bffa03 	ldbu	r2,-24(fp)
 2012dfc:	e0fffc17 	ldw	r3,-16(fp)
 2012e00:	1885883a 	add	r2,r3,r2
 2012e04:	108002c4 	addi	r2,r2,11
 2012e08:	10800003 	ldbu	r2,0(r2)
 2012e0c:	10c03fcc 	andi	r3,r2,255
 2012e10:	008080b4 	movhi	r2,514
 2012e14:	10b2e804 	addi	r2,r2,-13408
 2012e18:	10c5883a 	add	r2,r2,r3
 2012e1c:	10800003 	ldbu	r2,0(r2)
 2012e20:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2012e24:	e0bffa03 	ldbu	r2,-24(fp)
 2012e28:	100490fa 	slli	r2,r2,3
 2012e2c:	1007883a 	mov	r3,r2
 2012e30:	e0bffa43 	ldbu	r2,-23(fp)
 2012e34:	1885883a 	add	r2,r3,r2
 2012e38:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 2012e3c:	e0fffa83 	ldbu	r3,-22(fp)
 2012e40:	008080b4 	movhi	r2,514
 2012e44:	109da504 	addi	r2,r2,30356
 2012e48:	18c7883a 	add	r3,r3,r3
 2012e4c:	18c7883a 	add	r3,r3,r3
 2012e50:	10c5883a 	add	r2,r2,r3
 2012e54:	10800017 	ldw	r2,0(r2)
 2012e58:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 2012e5c:	e0bffb17 	ldw	r2,-20(fp)
 2012e60:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2012e64:	e0bffb17 	ldw	r2,-20(fp)
 2012e68:	e0fffd17 	ldw	r3,-12(fp)
 2012e6c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2012e70:	e0bffb17 	ldw	r2,-20(fp)
 2012e74:	10800c03 	ldbu	r2,48(r2)
 2012e78:	1007883a 	mov	r3,r2
 2012e7c:	e0bffe03 	ldbu	r2,-8(fp)
 2012e80:	0084303a 	nor	r2,zero,r2
 2012e84:	1884703a 	and	r2,r3,r2
 2012e88:	1007883a 	mov	r3,r2
 2012e8c:	e0bffb17 	ldw	r2,-20(fp)
 2012e90:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2012e94:	e0bffb17 	ldw	r2,-20(fp)
 2012e98:	e0ffff03 	ldbu	r3,-4(fp)
 2012e9c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2012ea0:	e0bffb17 	ldw	r2,-20(fp)
 2012ea4:	10800c03 	ldbu	r2,48(r2)
 2012ea8:	10803fcc 	andi	r2,r2,255
 2012eac:	1080020c 	andi	r2,r2,8
 2012eb0:	1000111e 	bne	r2,zero,2012ef8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2012eb4:	e0bffb17 	ldw	r2,-20(fp)
 2012eb8:	10c00d83 	ldbu	r3,54(r2)
 2012ebc:	d0a73703 	ldbu	r2,-25380(gp)
 2012ec0:	1884b03a 	or	r2,r3,r2
 2012ec4:	d0a73705 	stb	r2,-25380(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2012ec8:	e0fffa03 	ldbu	r3,-24(fp)
 2012ecc:	e13ffa03 	ldbu	r4,-24(fp)
 2012ed0:	d0a73744 	addi	r2,gp,-25379
 2012ed4:	2085883a 	add	r2,r4,r2
 2012ed8:	11000003 	ldbu	r4,0(r2)
 2012edc:	e0bffb17 	ldw	r2,-20(fp)
 2012ee0:	10800d43 	ldbu	r2,53(r2)
 2012ee4:	2084b03a 	or	r2,r4,r2
 2012ee8:	1009883a 	mov	r4,r2
 2012eec:	d0a73744 	addi	r2,gp,-25379
 2012ef0:	1885883a 	add	r2,r3,r2
 2012ef4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2012ef8:	e17ffc17 	ldw	r5,-16(fp)
 2012efc:	e13ffb17 	ldw	r4,-20(fp)
 2012f00:	20131a80 	call	20131a8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2012f04:	e0bffb17 	ldw	r2,-20(fp)
 2012f08:	10800817 	ldw	r2,32(r2)
 2012f0c:	10000826 	beq	r2,zero,2012f30 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2012f10:	e0bffb17 	ldw	r2,-20(fp)
 2012f14:	10800817 	ldw	r2,32(r2)
 2012f18:	100b883a 	mov	r5,r2
 2012f1c:	e13ffb17 	ldw	r4,-20(fp)
 2012f20:	20132600 	call	2013260 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2012f24:	e0bffb17 	ldw	r2,-20(fp)
 2012f28:	e0fffc17 	ldw	r3,-16(fp)
 2012f2c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 2012f30:	e0bffa83 	ldbu	r2,-22(fp)
}
 2012f34:	e037883a 	mov	sp,fp
 2012f38:	dfc00117 	ldw	ra,4(sp)
 2012f3c:	df000017 	ldw	fp,0(sp)
 2012f40:	dec00204 	addi	sp,sp,8
 2012f44:	f800283a 	ret

02012f48 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 2012f48:	defffd04 	addi	sp,sp,-12
 2012f4c:	df000215 	stw	fp,8(sp)
 2012f50:	df000204 	addi	fp,sp,8
 2012f54:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 2012f58:	d0a73a17 	ldw	r2,-25368(gp)
 2012f5c:	e0ffff17 	ldw	r3,-4(fp)
 2012f60:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2012f64:	d0a73a17 	ldw	r2,-25368(gp)
 2012f68:	10800d03 	ldbu	r2,52(r2)
 2012f6c:	10803fcc 	andi	r2,r2,255
 2012f70:	d0e73a17 	ldw	r3,-25368(gp)
 2012f74:	18c00d03 	ldbu	r3,52(r3)
 2012f78:	18c03fcc 	andi	r3,r3,255
 2012f7c:	e13fff17 	ldw	r4,-4(fp)
 2012f80:	20c7883a 	add	r3,r4,r3
 2012f84:	18c002c4 	addi	r3,r3,11
 2012f88:	19000003 	ldbu	r4,0(r3)
 2012f8c:	d0e73a17 	ldw	r3,-25368(gp)
 2012f90:	18c00d43 	ldbu	r3,53(r3)
 2012f94:	20c6b03a 	or	r3,r4,r3
 2012f98:	1809883a 	mov	r4,r3
 2012f9c:	e0ffff17 	ldw	r3,-4(fp)
 2012fa0:	1885883a 	add	r2,r3,r2
 2012fa4:	108002c4 	addi	r2,r2,11
 2012fa8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2012fac:	e0bfff17 	ldw	r2,-4(fp)
 2012fb0:	10c00283 	ldbu	r3,10(r2)
 2012fb4:	d0a73a17 	ldw	r2,-25368(gp)
 2012fb8:	10800d83 	ldbu	r2,54(r2)
 2012fbc:	1884b03a 	or	r2,r3,r2
 2012fc0:	1007883a 	mov	r3,r2
 2012fc4:	e0bfff17 	ldw	r2,-4(fp)
 2012fc8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2012fcc:	d0a73a17 	ldw	r2,-25368(gp)
 2012fd0:	10800d03 	ldbu	r2,52(r2)
 2012fd4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2012fd8:	e0fffe03 	ldbu	r3,-8(fp)
 2012fdc:	e13ffe03 	ldbu	r4,-8(fp)
 2012fe0:	d0a73744 	addi	r2,gp,-25379
 2012fe4:	2085883a 	add	r2,r4,r2
 2012fe8:	10800003 	ldbu	r2,0(r2)
 2012fec:	1009883a 	mov	r4,r2
 2012ff0:	d0a73a17 	ldw	r2,-25368(gp)
 2012ff4:	10800d43 	ldbu	r2,53(r2)
 2012ff8:	0084303a 	nor	r2,zero,r2
 2012ffc:	2084703a 	and	r2,r4,r2
 2013000:	1009883a 	mov	r4,r2
 2013004:	d0a73744 	addi	r2,gp,-25379
 2013008:	1885883a 	add	r2,r3,r2
 201300c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2013010:	e0fffe03 	ldbu	r3,-8(fp)
 2013014:	d0a73744 	addi	r2,gp,-25379
 2013018:	1885883a 	add	r2,r3,r2
 201301c:	10800003 	ldbu	r2,0(r2)
 2013020:	10803fcc 	andi	r2,r2,255
 2013024:	1000071e 	bne	r2,zero,2013044 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2013028:	d0a73a17 	ldw	r2,-25368(gp)
 201302c:	10800d83 	ldbu	r2,54(r2)
 2013030:	0084303a 	nor	r2,zero,r2
 2013034:	1007883a 	mov	r3,r2
 2013038:	d0a73703 	ldbu	r2,-25380(gp)
 201303c:	1884703a 	and	r2,r3,r2
 2013040:	d0a73705 	stb	r2,-25380(gp)
    }
}
 2013044:	0001883a 	nop
 2013048:	e037883a 	mov	sp,fp
 201304c:	df000017 	ldw	fp,0(sp)
 2013050:	dec00104 	addi	sp,sp,4
 2013054:	f800283a 	ret

02013058 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 2013058:	defffb04 	addi	sp,sp,-20
 201305c:	df000415 	stw	fp,16(sp)
 2013060:	df000404 	addi	fp,sp,16
 2013064:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2013068:	d0a73a17 	ldw	r2,-25368(gp)
 201306c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2013070:	d0a73a17 	ldw	r2,-25368(gp)
 2013074:	e0ffff17 	ldw	r3,-4(fp)
 2013078:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 201307c:	e0bfff17 	ldw	r2,-4(fp)
 2013080:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2013084:	e0bffc17 	ldw	r2,-16(fp)
 2013088:	10800017 	ldw	r2,0(r2)
 201308c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2013090:	00002006 	br	2013114 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2013094:	d0a73a17 	ldw	r2,-25368(gp)
 2013098:	10800d03 	ldbu	r2,52(r2)
 201309c:	10803fcc 	andi	r2,r2,255
 20130a0:	d0e73a17 	ldw	r3,-25368(gp)
 20130a4:	18c00d03 	ldbu	r3,52(r3)
 20130a8:	18c03fcc 	andi	r3,r3,255
 20130ac:	e13ffd17 	ldw	r4,-12(fp)
 20130b0:	20c7883a 	add	r3,r4,r3
 20130b4:	18c002c4 	addi	r3,r3,11
 20130b8:	19000003 	ldbu	r4,0(r3)
 20130bc:	d0e73a17 	ldw	r3,-25368(gp)
 20130c0:	18c00d43 	ldbu	r3,53(r3)
 20130c4:	20c6b03a 	or	r3,r4,r3
 20130c8:	1809883a 	mov	r4,r3
 20130cc:	e0fffd17 	ldw	r3,-12(fp)
 20130d0:	1885883a 	add	r2,r3,r2
 20130d4:	108002c4 	addi	r2,r2,11
 20130d8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 20130dc:	e0bffd17 	ldw	r2,-12(fp)
 20130e0:	10c00283 	ldbu	r3,10(r2)
 20130e4:	d0a73a17 	ldw	r2,-25368(gp)
 20130e8:	10800d83 	ldbu	r2,54(r2)
 20130ec:	1884b03a 	or	r2,r3,r2
 20130f0:	1007883a 	mov	r3,r2
 20130f4:	e0bffd17 	ldw	r2,-12(fp)
 20130f8:	10c00285 	stb	r3,10(r2)
        pevents++;
 20130fc:	e0bffc17 	ldw	r2,-16(fp)
 2013100:	10800104 	addi	r2,r2,4
 2013104:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 2013108:	e0bffc17 	ldw	r2,-16(fp)
 201310c:	10800017 	ldw	r2,0(r2)
 2013110:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2013114:	e0bffd17 	ldw	r2,-12(fp)
 2013118:	103fde1e 	bne	r2,zero,2013094 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 201311c:	d0a73a17 	ldw	r2,-25368(gp)
 2013120:	10800d03 	ldbu	r2,52(r2)
 2013124:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2013128:	e0fffe03 	ldbu	r3,-8(fp)
 201312c:	e13ffe03 	ldbu	r4,-8(fp)
 2013130:	d0a73744 	addi	r2,gp,-25379
 2013134:	2085883a 	add	r2,r4,r2
 2013138:	10800003 	ldbu	r2,0(r2)
 201313c:	1009883a 	mov	r4,r2
 2013140:	d0a73a17 	ldw	r2,-25368(gp)
 2013144:	10800d43 	ldbu	r2,53(r2)
 2013148:	0084303a 	nor	r2,zero,r2
 201314c:	2084703a 	and	r2,r4,r2
 2013150:	1009883a 	mov	r4,r2
 2013154:	d0a73744 	addi	r2,gp,-25379
 2013158:	1885883a 	add	r2,r3,r2
 201315c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2013160:	e0fffe03 	ldbu	r3,-8(fp)
 2013164:	d0a73744 	addi	r2,gp,-25379
 2013168:	1885883a 	add	r2,r3,r2
 201316c:	10800003 	ldbu	r2,0(r2)
 2013170:	10803fcc 	andi	r2,r2,255
 2013174:	1000071e 	bne	r2,zero,2013194 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2013178:	d0a73a17 	ldw	r2,-25368(gp)
 201317c:	10800d83 	ldbu	r2,54(r2)
 2013180:	0084303a 	nor	r2,zero,r2
 2013184:	1007883a 	mov	r3,r2
 2013188:	d0a73703 	ldbu	r2,-25380(gp)
 201318c:	1884703a 	and	r2,r3,r2
 2013190:	d0a73705 	stb	r2,-25380(gp)
    }
}
 2013194:	0001883a 	nop
 2013198:	e037883a 	mov	sp,fp
 201319c:	df000017 	ldw	fp,0(sp)
 20131a0:	dec00104 	addi	sp,sp,4
 20131a4:	f800283a 	ret

020131a8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 20131a8:	defffc04 	addi	sp,sp,-16
 20131ac:	df000315 	stw	fp,12(sp)
 20131b0:	df000304 	addi	fp,sp,12
 20131b4:	e13ffe15 	stw	r4,-8(fp)
 20131b8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 20131bc:	e0bffe17 	ldw	r2,-8(fp)
 20131c0:	10800d03 	ldbu	r2,52(r2)
 20131c4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 20131c8:	e0bffd03 	ldbu	r2,-12(fp)
 20131cc:	e0fffd03 	ldbu	r3,-12(fp)
 20131d0:	e13fff17 	ldw	r4,-4(fp)
 20131d4:	20c7883a 	add	r3,r4,r3
 20131d8:	18c002c4 	addi	r3,r3,11
 20131dc:	18c00003 	ldbu	r3,0(r3)
 20131e0:	1809883a 	mov	r4,r3
 20131e4:	e0fffe17 	ldw	r3,-8(fp)
 20131e8:	18c00d43 	ldbu	r3,53(r3)
 20131ec:	00c6303a 	nor	r3,zero,r3
 20131f0:	20c6703a 	and	r3,r4,r3
 20131f4:	1809883a 	mov	r4,r3
 20131f8:	e0ffff17 	ldw	r3,-4(fp)
 20131fc:	1885883a 	add	r2,r3,r2
 2013200:	108002c4 	addi	r2,r2,11
 2013204:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2013208:	e0bffd03 	ldbu	r2,-12(fp)
 201320c:	e0ffff17 	ldw	r3,-4(fp)
 2013210:	1885883a 	add	r2,r3,r2
 2013214:	108002c4 	addi	r2,r2,11
 2013218:	10800003 	ldbu	r2,0(r2)
 201321c:	10803fcc 	andi	r2,r2,255
 2013220:	10000a1e 	bne	r2,zero,201324c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 2013224:	e0bfff17 	ldw	r2,-4(fp)
 2013228:	10800283 	ldbu	r2,10(r2)
 201322c:	1007883a 	mov	r3,r2
 2013230:	e0bffe17 	ldw	r2,-8(fp)
 2013234:	10800d83 	ldbu	r2,54(r2)
 2013238:	0084303a 	nor	r2,zero,r2
 201323c:	1884703a 	and	r2,r3,r2
 2013240:	1007883a 	mov	r3,r2
 2013244:	e0bfff17 	ldw	r2,-4(fp)
 2013248:	10c00285 	stb	r3,10(r2)
    }
}
 201324c:	0001883a 	nop
 2013250:	e037883a 	mov	sp,fp
 2013254:	df000017 	ldw	fp,0(sp)
 2013258:	dec00104 	addi	sp,sp,4
 201325c:	f800283a 	ret

02013260 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2013260:	defffa04 	addi	sp,sp,-24
 2013264:	df000515 	stw	fp,20(sp)
 2013268:	df000504 	addi	fp,sp,20
 201326c:	e13ffe15 	stw	r4,-8(fp)
 2013270:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2013274:	e0bffe17 	ldw	r2,-8(fp)
 2013278:	10800d03 	ldbu	r2,52(r2)
 201327c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2013280:	e0bffe17 	ldw	r2,-8(fp)
 2013284:	10800d83 	ldbu	r2,54(r2)
 2013288:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 201328c:	e0bffe17 	ldw	r2,-8(fp)
 2013290:	10800d43 	ldbu	r2,53(r2)
 2013294:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2013298:	e0bfff17 	ldw	r2,-4(fp)
 201329c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 20132a0:	e0bffb17 	ldw	r2,-20(fp)
 20132a4:	10800017 	ldw	r2,0(r2)
 20132a8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20132ac:	00002506 	br	2013344 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 20132b0:	e0bffd03 	ldbu	r2,-12(fp)
 20132b4:	e0fffd03 	ldbu	r3,-12(fp)
 20132b8:	e13ffc17 	ldw	r4,-16(fp)
 20132bc:	20c7883a 	add	r3,r4,r3
 20132c0:	18c002c4 	addi	r3,r3,11
 20132c4:	18c00003 	ldbu	r3,0(r3)
 20132c8:	1809883a 	mov	r4,r3
 20132cc:	e0fffd83 	ldbu	r3,-10(fp)
 20132d0:	00c6303a 	nor	r3,zero,r3
 20132d4:	20c6703a 	and	r3,r4,r3
 20132d8:	1809883a 	mov	r4,r3
 20132dc:	e0fffc17 	ldw	r3,-16(fp)
 20132e0:	1885883a 	add	r2,r3,r2
 20132e4:	108002c4 	addi	r2,r2,11
 20132e8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 20132ec:	e0bffd03 	ldbu	r2,-12(fp)
 20132f0:	e0fffc17 	ldw	r3,-16(fp)
 20132f4:	1885883a 	add	r2,r3,r2
 20132f8:	108002c4 	addi	r2,r2,11
 20132fc:	10800003 	ldbu	r2,0(r2)
 2013300:	10803fcc 	andi	r2,r2,255
 2013304:	1000091e 	bne	r2,zero,201332c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 2013308:	e0bffc17 	ldw	r2,-16(fp)
 201330c:	10800283 	ldbu	r2,10(r2)
 2013310:	1007883a 	mov	r3,r2
 2013314:	e0bffd43 	ldbu	r2,-11(fp)
 2013318:	0084303a 	nor	r2,zero,r2
 201331c:	1884703a 	and	r2,r3,r2
 2013320:	1007883a 	mov	r3,r2
 2013324:	e0bffc17 	ldw	r2,-16(fp)
 2013328:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 201332c:	e0bffb17 	ldw	r2,-20(fp)
 2013330:	10800104 	addi	r2,r2,4
 2013334:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 2013338:	e0bffb17 	ldw	r2,-20(fp)
 201333c:	10800017 	ldw	r2,0(r2)
 2013340:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2013344:	e0bffc17 	ldw	r2,-16(fp)
 2013348:	103fd91e 	bne	r2,zero,20132b0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 201334c:	0001883a 	nop
 2013350:	e037883a 	mov	sp,fp
 2013354:	df000017 	ldw	fp,0(sp)
 2013358:	dec00104 	addi	sp,sp,4
 201335c:	f800283a 	ret

02013360 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 2013360:	defffc04 	addi	sp,sp,-16
 2013364:	df000315 	stw	fp,12(sp)
 2013368:	df000304 	addi	fp,sp,12
 201336c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2013370:	e0bfff17 	ldw	r2,-4(fp)
 2013374:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2013378:	e0bfff17 	ldw	r2,-4(fp)
 201337c:	108002c4 	addi	r2,r2,11
 2013380:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2013384:	e03ffe05 	stb	zero,-8(fp)
 2013388:	00000706 	br	20133a8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 201338c:	e0bffd17 	ldw	r2,-12(fp)
 2013390:	10c00044 	addi	r3,r2,1
 2013394:	e0fffd15 	stw	r3,-12(fp)
 2013398:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201339c:	e0bffe03 	ldbu	r2,-8(fp)
 20133a0:	10800044 	addi	r2,r2,1
 20133a4:	e0bffe05 	stb	r2,-8(fp)
 20133a8:	e0bffe03 	ldbu	r2,-8(fp)
 20133ac:	108000f0 	cmpltui	r2,r2,3
 20133b0:	103ff61e 	bne	r2,zero,201338c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 20133b4:	0001883a 	nop
 20133b8:	e037883a 	mov	sp,fp
 20133bc:	df000017 	ldw	fp,0(sp)
 20133c0:	dec00104 	addi	sp,sp,4
 20133c4:	f800283a 	ret

020133c8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 20133c8:	defffb04 	addi	sp,sp,-20
 20133cc:	dfc00415 	stw	ra,16(sp)
 20133d0:	df000315 	stw	fp,12(sp)
 20133d4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 20133d8:	0142d004 	movi	r5,2880
 20133dc:	010080b4 	movhi	r4,514
 20133e0:	21199104 	addi	r4,r4,26180
 20133e4:	20137400 	call	2013740 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 20133e8:	008080b4 	movhi	r2,514
 20133ec:	10999104 	addi	r2,r2,26180
 20133f0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 20133f4:	008080b4 	movhi	r2,514
 20133f8:	10999d04 	addi	r2,r2,26228
 20133fc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2013400:	e03ffd0d 	sth	zero,-12(fp)
 2013404:	00001306 	br	2013454 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2013408:	e0bffe17 	ldw	r2,-8(fp)
 201340c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 2013410:	e0bffe17 	ldw	r2,-8(fp)
 2013414:	e0ffff17 	ldw	r3,-4(fp)
 2013418:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 201341c:	e0bffe17 	ldw	r2,-8(fp)
 2013420:	00c00fc4 	movi	r3,63
 2013424:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 2013428:	e0bffe17 	ldw	r2,-8(fp)
 201342c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 2013430:	e0bffe17 	ldw	r2,-8(fp)
 2013434:	10800c04 	addi	r2,r2,48
 2013438:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 201343c:	e0bfff17 	ldw	r2,-4(fp)
 2013440:	10800c04 	addi	r2,r2,48
 2013444:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2013448:	e0bffd0b 	ldhu	r2,-12(fp)
 201344c:	10800044 	addi	r2,r2,1
 2013450:	e0bffd0d 	sth	r2,-12(fp)
 2013454:	e0bffd0b 	ldhu	r2,-12(fp)
 2013458:	10800ef0 	cmpltui	r2,r2,59
 201345c:	103fea1e 	bne	r2,zero,2013408 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 2013460:	e0bffe17 	ldw	r2,-8(fp)
 2013464:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 2013468:	e0bffe17 	ldw	r2,-8(fp)
 201346c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2013470:	e0bffe17 	ldw	r2,-8(fp)
 2013474:	00c00fc4 	movi	r3,63
 2013478:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 201347c:	e0bffe17 	ldw	r2,-8(fp)
 2013480:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2013484:	008080b4 	movhi	r2,514
 2013488:	10999104 	addi	r2,r2,26180
 201348c:	d0a73815 	stw	r2,-25376(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2013490:	0001883a 	nop
 2013494:	e037883a 	mov	sp,fp
 2013498:	dfc00117 	ldw	ra,4(sp)
 201349c:	df000017 	ldw	fp,0(sp)
 20134a0:	dec00204 	addi	sp,sp,8
 20134a4:	f800283a 	ret

020134a8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 20134a8:	deffff04 	addi	sp,sp,-4
 20134ac:	df000015 	stw	fp,0(sp)
 20134b0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 20134b4:	d0273b15 	stw	zero,-25364(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 20134b8:	d0273905 	stb	zero,-25372(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 20134bc:	d0272b05 	stb	zero,-25428(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 20134c0:	d0273345 	stb	zero,-25395(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 20134c4:	d0272b45 	stb	zero,-25427(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 20134c8:	d0273015 	stw	zero,-25408(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 20134cc:	d0272c15 	stw	zero,-25424(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 20134d0:	d0273e15 	stw	zero,-25352(gp)
    OSIdleCtrMax  = 0L;
 20134d4:	d0273115 	stw	zero,-25404(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 20134d8:	d0273d05 	stb	zero,-25356(gp)
#endif
}
 20134dc:	0001883a 	nop
 20134e0:	e037883a 	mov	sp,fp
 20134e4:	df000017 	ldw	fp,0(sp)
 20134e8:	dec00104 	addi	sp,sp,4
 20134ec:	f800283a 	ret

020134f0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 20134f0:	defffd04 	addi	sp,sp,-12
 20134f4:	df000215 	stw	fp,8(sp)
 20134f8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 20134fc:	d0273705 	stb	zero,-25380(gp)
    prdytbl       = &OSRdyTbl[0];
 2013500:	d0a73744 	addi	r2,gp,-25379
 2013504:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2013508:	e03ffe05 	stb	zero,-8(fp)
 201350c:	00000706 	br	201352c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 2013510:	e0bfff17 	ldw	r2,-4(fp)
 2013514:	10c00044 	addi	r3,r2,1
 2013518:	e0ffff15 	stw	r3,-4(fp)
 201351c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2013520:	e0bffe03 	ldbu	r2,-8(fp)
 2013524:	10800044 	addi	r2,r2,1
 2013528:	e0bffe05 	stb	r2,-8(fp)
 201352c:	e0bffe03 	ldbu	r2,-8(fp)
 2013530:	108000f0 	cmpltui	r2,r2,3
 2013534:	103ff61e 	bne	r2,zero,2013510 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 2013538:	d0272d45 	stb	zero,-25419(gp)
    OSPrioHighRdy = 0;
 201353c:	d0272d05 	stb	zero,-25420(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 2013540:	d0273515 	stw	zero,-25388(gp)
    OSTCBCur      = (OS_TCB *)0;
 2013544:	d0273a15 	stw	zero,-25368(gp)
}
 2013548:	0001883a 	nop
 201354c:	e037883a 	mov	sp,fp
 2013550:	df000017 	ldw	fp,0(sp)
 2013554:	dec00104 	addi	sp,sp,4
 2013558:	f800283a 	ret

0201355c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 201355c:	defff804 	addi	sp,sp,-32
 2013560:	dfc00715 	stw	ra,28(sp)
 2013564:	df000615 	stw	fp,24(sp)
 2013568:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 201356c:	008000c4 	movi	r2,3
 2013570:	d8800415 	stw	r2,16(sp)
 2013574:	d8000315 	stw	zero,12(sp)
 2013578:	00808004 	movi	r2,512
 201357c:	d8800215 	stw	r2,8(sp)
 2013580:	008080b4 	movhi	r2,514
 2013584:	10979104 	addi	r2,r2,24132
 2013588:	d8800115 	stw	r2,4(sp)
 201358c:	00bfffd4 	movui	r2,65535
 2013590:	d8800015 	stw	r2,0(sp)
 2013594:	01c00504 	movi	r7,20
 2013598:	018080b4 	movhi	r6,514
 201359c:	31999004 	addi	r6,r6,26176
 20135a0:	000b883a 	mov	r5,zero
 20135a4:	01008074 	movhi	r4,513
 20135a8:	210e8204 	addi	r4,r4,14856
 20135ac:	2018b900 	call	2018b90 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 20135b0:	e1bfff04 	addi	r6,fp,-4
 20135b4:	014080b4 	movhi	r5,514
 20135b8:	29732804 	addi	r5,r5,-13152
 20135bc:	01000504 	movi	r4,20
 20135c0:	20193a00 	call	20193a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 20135c4:	0001883a 	nop
 20135c8:	e037883a 	mov	sp,fp
 20135cc:	dfc00117 	ldw	ra,4(sp)
 20135d0:	df000017 	ldw	fp,0(sp)
 20135d4:	dec00204 	addi	sp,sp,8
 20135d8:	f800283a 	ret

020135dc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 20135dc:	defff804 	addi	sp,sp,-32
 20135e0:	dfc00715 	stw	ra,28(sp)
 20135e4:	df000615 	stw	fp,24(sp)
 20135e8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 20135ec:	008000c4 	movi	r2,3
 20135f0:	d8800415 	stw	r2,16(sp)
 20135f4:	d8000315 	stw	zero,12(sp)
 20135f8:	00808004 	movi	r2,512
 20135fc:	d8800215 	stw	r2,8(sp)
 2013600:	008080b4 	movhi	r2,514
 2013604:	10951904 	addi	r2,r2,21604
 2013608:	d8800115 	stw	r2,4(sp)
 201360c:	00bfff94 	movui	r2,65534
 2013610:	d8800015 	stw	r2,0(sp)
 2013614:	01c004c4 	movi	r7,19
 2013618:	018080b4 	movhi	r6,514
 201361c:	31971804 	addi	r6,r6,23648
 2013620:	000b883a 	mov	r5,zero
 2013624:	01008074 	movhi	r4,513
 2013628:	210e9904 	addi	r4,r4,14948
 201362c:	2018b900 	call	2018b90 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 2013630:	e1bfff04 	addi	r6,fp,-4
 2013634:	014080b4 	movhi	r5,514
 2013638:	29732c04 	addi	r5,r5,-13136
 201363c:	010004c4 	movi	r4,19
 2013640:	20193a00 	call	20193a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 2013644:	0001883a 	nop
 2013648:	e037883a 	mov	sp,fp
 201364c:	dfc00117 	ldw	ra,4(sp)
 2013650:	df000017 	ldw	fp,0(sp)
 2013654:	dec00204 	addi	sp,sp,8
 2013658:	f800283a 	ret

0201365c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 201365c:	defffb04 	addi	sp,sp,-20
 2013660:	dfc00415 	stw	ra,16(sp)
 2013664:	df000315 	stw	fp,12(sp)
 2013668:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 201366c:	01414404 	movi	r5,1296
 2013670:	010080b4 	movhi	r4,514
 2013674:	211c6104 	addi	r4,r4,29060
 2013678:	20137400 	call	2013740 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 201367c:	01401504 	movi	r5,84
 2013680:	010080b4 	movhi	r4,514
 2013684:	211da504 	addi	r4,r4,30356
 2013688:	20137400 	call	2013740 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 201368c:	008080b4 	movhi	r2,514
 2013690:	109c6104 	addi	r2,r2,29060
 2013694:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2013698:	008080b4 	movhi	r2,514
 201369c:	109c7c04 	addi	r2,r2,29168
 20136a0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 20136a4:	e03ffd05 	stb	zero,-12(fp)
 20136a8:	00001106 	br	20136f0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 20136ac:	e0bffe17 	ldw	r2,-8(fp)
 20136b0:	e0ffff17 	ldw	r3,-4(fp)
 20136b4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 20136b8:	e0bffe17 	ldw	r2,-8(fp)
 20136bc:	00c00fc4 	movi	r3,63
 20136c0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 20136c4:	e0bffe17 	ldw	r2,-8(fp)
 20136c8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 20136cc:	e0bffe17 	ldw	r2,-8(fp)
 20136d0:	10801b04 	addi	r2,r2,108
 20136d4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 20136d8:	e0bfff17 	ldw	r2,-4(fp)
 20136dc:	10801b04 	addi	r2,r2,108
 20136e0:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 20136e4:	e0bffd03 	ldbu	r2,-12(fp)
 20136e8:	10800044 	addi	r2,r2,1
 20136ec:	e0bffd05 	stb	r2,-12(fp)
 20136f0:	e0bffd03 	ldbu	r2,-12(fp)
 20136f4:	108002f0 	cmpltui	r2,r2,11
 20136f8:	103fec1e 	bne	r2,zero,20136ac <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 20136fc:	e0bffe17 	ldw	r2,-8(fp)
 2013700:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2013704:	e0bffe17 	ldw	r2,-8(fp)
 2013708:	00c00fc4 	movi	r3,63
 201370c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2013710:	e0bffe17 	ldw	r2,-8(fp)
 2013714:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2013718:	d0272e15 	stw	zero,-25416(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 201371c:	008080b4 	movhi	r2,514
 2013720:	109c6104 	addi	r2,r2,29060
 2013724:	d0a73215 	stw	r2,-25400(gp)
}
 2013728:	0001883a 	nop
 201372c:	e037883a 	mov	sp,fp
 2013730:	dfc00117 	ldw	ra,4(sp)
 2013734:	df000017 	ldw	fp,0(sp)
 2013738:	dec00204 	addi	sp,sp,8
 201373c:	f800283a 	ret

02013740 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 2013740:	defffd04 	addi	sp,sp,-12
 2013744:	df000215 	stw	fp,8(sp)
 2013748:	df000204 	addi	fp,sp,8
 201374c:	e13ffe15 	stw	r4,-8(fp)
 2013750:	2805883a 	mov	r2,r5
 2013754:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2013758:	00000706 	br	2013778 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 201375c:	e0bffe17 	ldw	r2,-8(fp)
 2013760:	10c00044 	addi	r3,r2,1
 2013764:	e0fffe15 	stw	r3,-8(fp)
 2013768:	10000005 	stb	zero,0(r2)
        size--;
 201376c:	e0bfff0b 	ldhu	r2,-4(fp)
 2013770:	10bfffc4 	addi	r2,r2,-1
 2013774:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2013778:	e0bfff0b 	ldhu	r2,-4(fp)
 201377c:	103ff71e 	bne	r2,zero,201375c <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2013780:	0001883a 	nop
 2013784:	e037883a 	mov	sp,fp
 2013788:	df000017 	ldw	fp,0(sp)
 201378c:	dec00104 	addi	sp,sp,4
 2013790:	f800283a 	ret

02013794 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2013794:	defffc04 	addi	sp,sp,-16
 2013798:	df000315 	stw	fp,12(sp)
 201379c:	df000304 	addi	fp,sp,12
 20137a0:	e13ffd15 	stw	r4,-12(fp)
 20137a4:	e17ffe15 	stw	r5,-8(fp)
 20137a8:	3005883a 	mov	r2,r6
 20137ac:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20137b0:	00000b06 	br	20137e0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 20137b4:	e0bffd17 	ldw	r2,-12(fp)
 20137b8:	10c00044 	addi	r3,r2,1
 20137bc:	e0fffd15 	stw	r3,-12(fp)
 20137c0:	e0fffe17 	ldw	r3,-8(fp)
 20137c4:	19000044 	addi	r4,r3,1
 20137c8:	e13ffe15 	stw	r4,-8(fp)
 20137cc:	18c00003 	ldbu	r3,0(r3)
 20137d0:	10c00005 	stb	r3,0(r2)
        size--;
 20137d4:	e0bfff0b 	ldhu	r2,-4(fp)
 20137d8:	10bfffc4 	addi	r2,r2,-1
 20137dc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 20137e0:	e0bfff0b 	ldhu	r2,-4(fp)
 20137e4:	103ff31e 	bne	r2,zero,20137b4 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 20137e8:	0001883a 	nop
 20137ec:	e037883a 	mov	sp,fp
 20137f0:	df000017 	ldw	fp,0(sp)
 20137f4:	dec00104 	addi	sp,sp,4
 20137f8:	f800283a 	ret

020137fc <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 20137fc:	defffb04 	addi	sp,sp,-20
 2013800:	dfc00415 	stw	ra,16(sp)
 2013804:	df000315 	stw	fp,12(sp)
 2013808:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201380c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013810:	0005303a 	rdctl	r2,status
 2013814:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013818:	e0ffff17 	ldw	r3,-4(fp)
 201381c:	00bfff84 	movi	r2,-2
 2013820:	1884703a 	and	r2,r3,r2
 2013824:	1001703a 	wrctl	status,r2
  
  return context;
 2013828:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 201382c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2013830:	d0a73903 	ldbu	r2,-25372(gp)
 2013834:	10803fcc 	andi	r2,r2,255
 2013838:	10001a1e 	bne	r2,zero,20138a4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 201383c:	d0a72b03 	ldbu	r2,-25428(gp)
 2013840:	10803fcc 	andi	r2,r2,255
 2013844:	1000171e 	bne	r2,zero,20138a4 <OS_Sched+0xa8>
            OS_SchedNew();
 2013848:	20138cc0 	call	20138cc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 201384c:	d0e72d03 	ldbu	r3,-25420(gp)
 2013850:	d0a72d43 	ldbu	r2,-25419(gp)
 2013854:	18c03fcc 	andi	r3,r3,255
 2013858:	10803fcc 	andi	r2,r2,255
 201385c:	18801126 	beq	r3,r2,20138a4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2013860:	d0a72d03 	ldbu	r2,-25420(gp)
 2013864:	10c03fcc 	andi	r3,r2,255
 2013868:	008080b4 	movhi	r2,514
 201386c:	109da504 	addi	r2,r2,30356
 2013870:	18c7883a 	add	r3,r3,r3
 2013874:	18c7883a 	add	r3,r3,r3
 2013878:	10c5883a 	add	r2,r2,r3
 201387c:	10800017 	ldw	r2,0(r2)
 2013880:	d0a73515 	stw	r2,-25388(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2013884:	d0a73517 	ldw	r2,-25388(gp)
 2013888:	10c00e17 	ldw	r3,56(r2)
 201388c:	18c00044 	addi	r3,r3,1
 2013890:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2013894:	d0a73017 	ldw	r2,-25408(gp)
 2013898:	10800044 	addi	r2,r2,1
 201389c:	d0a73015 	stw	r2,-25408(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 20138a0:	201bb780 	call	201bb78 <OSCtxSw>
 20138a4:	e0bffd17 	ldw	r2,-12(fp)
 20138a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20138ac:	e0bffe17 	ldw	r2,-8(fp)
 20138b0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 20138b4:	0001883a 	nop
 20138b8:	e037883a 	mov	sp,fp
 20138bc:	dfc00117 	ldw	ra,4(sp)
 20138c0:	df000017 	ldw	fp,0(sp)
 20138c4:	dec00204 	addi	sp,sp,8
 20138c8:	f800283a 	ret

020138cc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 20138cc:	defffe04 	addi	sp,sp,-8
 20138d0:	df000115 	stw	fp,4(sp)
 20138d4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 20138d8:	d0a73703 	ldbu	r2,-25380(gp)
 20138dc:	10c03fcc 	andi	r3,r2,255
 20138e0:	008080b4 	movhi	r2,514
 20138e4:	10b2e804 	addi	r2,r2,-13408
 20138e8:	10c5883a 	add	r2,r2,r3
 20138ec:	10800003 	ldbu	r2,0(r2)
 20138f0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 20138f4:	e0bfff03 	ldbu	r2,-4(fp)
 20138f8:	100490fa 	slli	r2,r2,3
 20138fc:	1009883a 	mov	r4,r2
 2013900:	e0ffff03 	ldbu	r3,-4(fp)
 2013904:	d0a73744 	addi	r2,gp,-25379
 2013908:	1885883a 	add	r2,r3,r2
 201390c:	10800003 	ldbu	r2,0(r2)
 2013910:	10c03fcc 	andi	r3,r2,255
 2013914:	008080b4 	movhi	r2,514
 2013918:	10b2e804 	addi	r2,r2,-13408
 201391c:	10c5883a 	add	r2,r2,r3
 2013920:	10800003 	ldbu	r2,0(r2)
 2013924:	2085883a 	add	r2,r4,r2
 2013928:	d0a72d05 	stb	r2,-25420(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 201392c:	0001883a 	nop
 2013930:	e037883a 	mov	sp,fp
 2013934:	df000017 	ldw	fp,0(sp)
 2013938:	dec00104 	addi	sp,sp,4
 201393c:	f800283a 	ret

02013940 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 2013940:	defffc04 	addi	sp,sp,-16
 2013944:	df000315 	stw	fp,12(sp)
 2013948:	df000304 	addi	fp,sp,12
 201394c:	e13ffe15 	stw	r4,-8(fp)
 2013950:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2013954:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 2013958:	00000b06 	br	2013988 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 201395c:	e0bffe17 	ldw	r2,-8(fp)
 2013960:	10c00044 	addi	r3,r2,1
 2013964:	e0fffe15 	stw	r3,-8(fp)
 2013968:	e0ffff17 	ldw	r3,-4(fp)
 201396c:	19000044 	addi	r4,r3,1
 2013970:	e13fff15 	stw	r4,-4(fp)
 2013974:	18c00003 	ldbu	r3,0(r3)
 2013978:	10c00005 	stb	r3,0(r2)
        len++;
 201397c:	e0bffd03 	ldbu	r2,-12(fp)
 2013980:	10800044 	addi	r2,r2,1
 2013984:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2013988:	e0bfff17 	ldw	r2,-4(fp)
 201398c:	10800003 	ldbu	r2,0(r2)
 2013990:	10803fcc 	andi	r2,r2,255
 2013994:	103ff11e 	bne	r2,zero,201395c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2013998:	e0bffe17 	ldw	r2,-8(fp)
 201399c:	10000005 	stb	zero,0(r2)
    return (len);
 20139a0:	e0bffd03 	ldbu	r2,-12(fp)
}
 20139a4:	e037883a 	mov	sp,fp
 20139a8:	df000017 	ldw	fp,0(sp)
 20139ac:	dec00104 	addi	sp,sp,4
 20139b0:	f800283a 	ret

020139b4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 20139b4:	defffd04 	addi	sp,sp,-12
 20139b8:	df000215 	stw	fp,8(sp)
 20139bc:	df000204 	addi	fp,sp,8
 20139c0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 20139c4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 20139c8:	00000606 	br	20139e4 <OS_StrLen+0x30>
        psrc++;
 20139cc:	e0bfff17 	ldw	r2,-4(fp)
 20139d0:	10800044 	addi	r2,r2,1
 20139d4:	e0bfff15 	stw	r2,-4(fp)
        len++;
 20139d8:	e0bffe03 	ldbu	r2,-8(fp)
 20139dc:	10800044 	addi	r2,r2,1
 20139e0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 20139e4:	e0bfff17 	ldw	r2,-4(fp)
 20139e8:	10800003 	ldbu	r2,0(r2)
 20139ec:	10803fcc 	andi	r2,r2,255
 20139f0:	103ff61e 	bne	r2,zero,20139cc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 20139f4:	e0bffe03 	ldbu	r2,-8(fp)
}
 20139f8:	e037883a 	mov	sp,fp
 20139fc:	df000017 	ldw	fp,0(sp)
 2013a00:	dec00104 	addi	sp,sp,4
 2013a04:	f800283a 	ret

02013a08 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2013a08:	defffa04 	addi	sp,sp,-24
 2013a0c:	dfc00515 	stw	ra,20(sp)
 2013a10:	df000415 	stw	fp,16(sp)
 2013a14:	df000404 	addi	fp,sp,16
 2013a18:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013a1c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013a20:	0005303a 	rdctl	r2,status
 2013a24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013a28:	e0fffd17 	ldw	r3,-12(fp)
 2013a2c:	00bfff84 	movi	r2,-2
 2013a30:	1884703a 	and	r2,r3,r2
 2013a34:	1001703a 	wrctl	status,r2
  
  return context;
 2013a38:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 2013a3c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 2013a40:	d0a72c17 	ldw	r2,-25424(gp)
 2013a44:	10800044 	addi	r2,r2,1
 2013a48:	d0a72c15 	stw	r2,-25424(gp)
 2013a4c:	e0bffc17 	ldw	r2,-16(fp)
 2013a50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013a54:	e0bffe17 	ldw	r2,-8(fp)
 2013a58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2013a5c:	201be8c0 	call	201be8c <OSTaskIdleHook>
    }
 2013a60:	003fef06 	br	2013a20 <OS_TaskIdle+0x18>

02013a64 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2013a64:	defffa04 	addi	sp,sp,-24
 2013a68:	dfc00515 	stw	ra,20(sp)
 2013a6c:	df000415 	stw	fp,16(sp)
 2013a70:	df000404 	addi	fp,sp,16
 2013a74:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013a78:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2013a7c:	00000206 	br	2013a88 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2013a80:	01003204 	movi	r4,200
 2013a84:	2019c600 	call	2019c60 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2013a88:	d0a73d03 	ldbu	r2,-25356(gp)
 2013a8c:	10803fcc 	andi	r2,r2,255
 2013a90:	103ffb26 	beq	r2,zero,2013a80 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2013a94:	d0a73117 	ldw	r2,-25404(gp)
 2013a98:	01401904 	movi	r5,100
 2013a9c:	1009883a 	mov	r4,r2
 2013aa0:	2003e840 	call	2003e84 <__udivsi3>
 2013aa4:	d0a73115 	stw	r2,-25404(gp)
    if (OSIdleCtrMax == 0L) {
 2013aa8:	d0a73117 	ldw	r2,-25404(gp)
 2013aac:	1000031e 	bne	r2,zero,2013abc <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2013ab0:	d0273305 	stb	zero,-25396(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2013ab4:	01003fc4 	movi	r4,255
 2013ab8:	20198e80 	call	20198e8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013abc:	0005303a 	rdctl	r2,status
 2013ac0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013ac4:	e0fffd17 	ldw	r3,-12(fp)
 2013ac8:	00bfff84 	movi	r2,-2
 2013acc:	1884703a 	and	r2,r3,r2
 2013ad0:	1001703a 	wrctl	status,r2
  
  return context;
 2013ad4:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2013ad8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2013adc:	d0a72c17 	ldw	r2,-25424(gp)
 2013ae0:	d0a73e15 	stw	r2,-25352(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2013ae4:	d0272c15 	stw	zero,-25424(gp)
 2013ae8:	e0bffc17 	ldw	r2,-16(fp)
 2013aec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013af0:	e0bffe17 	ldw	r2,-8(fp)
 2013af4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2013af8:	d0a73e17 	ldw	r2,-25352(gp)
 2013afc:	d0e73117 	ldw	r3,-25404(gp)
 2013b00:	180b883a 	mov	r5,r3
 2013b04:	1009883a 	mov	r4,r2
 2013b08:	2003e840 	call	2003e84 <__udivsi3>
 2013b0c:	1007883a 	mov	r3,r2
 2013b10:	00801904 	movi	r2,100
 2013b14:	10c5c83a 	sub	r2,r2,r3
 2013b18:	d0a73305 	stb	r2,-25396(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2013b1c:	201be0c0 	call	201be0c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2013b20:	2013b300 	call	2013b30 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 2013b24:	01001904 	movi	r4,100
 2013b28:	2019c600 	call	2019c60 <OSTimeDly>
    }
 2013b2c:	003fe306 	br	2013abc <OS_TaskStat+0x58>

02013b30 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2013b30:	defffa04 	addi	sp,sp,-24
 2013b34:	dfc00515 	stw	ra,20(sp)
 2013b38:	df000415 	stw	fp,16(sp)
 2013b3c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2013b40:	e03ffc05 	stb	zero,-16(fp)
 2013b44:	00002406 	br	2013bd8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 2013b48:	e0bffc03 	ldbu	r2,-16(fp)
 2013b4c:	e0fffe04 	addi	r3,fp,-8
 2013b50:	180b883a 	mov	r5,r3
 2013b54:	1009883a 	mov	r4,r2
 2013b58:	20197280 	call	2019728 <OSTaskStkChk>
 2013b5c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2013b60:	e0bffc43 	ldbu	r2,-15(fp)
 2013b64:	1000191e 	bne	r2,zero,2013bcc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 2013b68:	e0fffc03 	ldbu	r3,-16(fp)
 2013b6c:	008080b4 	movhi	r2,514
 2013b70:	109da504 	addi	r2,r2,30356
 2013b74:	18c7883a 	add	r3,r3,r3
 2013b78:	18c7883a 	add	r3,r3,r3
 2013b7c:	10c5883a 	add	r2,r2,r3
 2013b80:	10800017 	ldw	r2,0(r2)
 2013b84:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2013b88:	e0bffd17 	ldw	r2,-12(fp)
 2013b8c:	10000f26 	beq	r2,zero,2013bcc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2013b90:	e0bffd17 	ldw	r2,-12(fp)
 2013b94:	10800060 	cmpeqi	r2,r2,1
 2013b98:	10000c1e 	bne	r2,zero,2013bcc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2013b9c:	e0bffd17 	ldw	r2,-12(fp)
 2013ba0:	10c00217 	ldw	r3,8(r2)
 2013ba4:	e0bffd17 	ldw	r2,-12(fp)
 2013ba8:	10800317 	ldw	r2,12(r2)
 2013bac:	1085883a 	add	r2,r2,r2
 2013bb0:	1085883a 	add	r2,r2,r2
 2013bb4:	1887883a 	add	r3,r3,r2
 2013bb8:	e0bffd17 	ldw	r2,-12(fp)
 2013bbc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2013bc0:	e0ffff17 	ldw	r3,-4(fp)
 2013bc4:	e0bffd17 	ldw	r2,-12(fp)
 2013bc8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2013bcc:	e0bffc03 	ldbu	r2,-16(fp)
 2013bd0:	10800044 	addi	r2,r2,1
 2013bd4:	e0bffc05 	stb	r2,-16(fp)
 2013bd8:	e0bffc03 	ldbu	r2,-16(fp)
 2013bdc:	10800570 	cmpltui	r2,r2,21
 2013be0:	103fd91e 	bne	r2,zero,2013b48 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2013be4:	0001883a 	nop
 2013be8:	e037883a 	mov	sp,fp
 2013bec:	dfc00117 	ldw	ra,4(sp)
 2013bf0:	df000017 	ldw	fp,0(sp)
 2013bf4:	dec00204 	addi	sp,sp,8
 2013bf8:	f800283a 	ret

02013bfc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2013bfc:	defff204 	addi	sp,sp,-56
 2013c00:	dfc00d15 	stw	ra,52(sp)
 2013c04:	df000c15 	stw	fp,48(sp)
 2013c08:	df000c04 	addi	fp,sp,48
 2013c0c:	e17ffc15 	stw	r5,-16(fp)
 2013c10:	e1bffd15 	stw	r6,-12(fp)
 2013c14:	3807883a 	mov	r3,r7
 2013c18:	e0800417 	ldw	r2,16(fp)
 2013c1c:	e13ffb05 	stb	r4,-20(fp)
 2013c20:	e0fffe0d 	sth	r3,-8(fp)
 2013c24:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2013c28:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013c2c:	0005303a 	rdctl	r2,status
 2013c30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013c34:	e0fffa17 	ldw	r3,-24(fp)
 2013c38:	00bfff84 	movi	r2,-2
 2013c3c:	1884703a 	and	r2,r3,r2
 2013c40:	1001703a 	wrctl	status,r2
  
  return context;
 2013c44:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 2013c48:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2013c4c:	d0a73217 	ldw	r2,-25400(gp)
 2013c50:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 2013c54:	e0bff617 	ldw	r2,-40(fp)
 2013c58:	10009326 	beq	r2,zero,2013ea8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2013c5c:	e0bff617 	ldw	r2,-40(fp)
 2013c60:	10800517 	ldw	r2,20(r2)
 2013c64:	d0a73215 	stw	r2,-25400(gp)
 2013c68:	e0bff417 	ldw	r2,-48(fp)
 2013c6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013c70:	e0bff817 	ldw	r2,-32(fp)
 2013c74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2013c78:	e0bff617 	ldw	r2,-40(fp)
 2013c7c:	e0fffc17 	ldw	r3,-16(fp)
 2013c80:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2013c84:	e0bff617 	ldw	r2,-40(fp)
 2013c88:	e0fffb03 	ldbu	r3,-20(fp)
 2013c8c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2013c90:	e0bff617 	ldw	r2,-40(fp)
 2013c94:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2013c98:	e0bff617 	ldw	r2,-40(fp)
 2013c9c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2013ca0:	e0bff617 	ldw	r2,-40(fp)
 2013ca4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2013ca8:	e0bff617 	ldw	r2,-40(fp)
 2013cac:	e0c00317 	ldw	r3,12(fp)
 2013cb0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2013cb4:	e0bff617 	ldw	r2,-40(fp)
 2013cb8:	e0c00217 	ldw	r3,8(fp)
 2013cbc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2013cc0:	e0bff617 	ldw	r2,-40(fp)
 2013cc4:	e0fffd17 	ldw	r3,-12(fp)
 2013cc8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2013ccc:	e0bff617 	ldw	r2,-40(fp)
 2013cd0:	e0ffff0b 	ldhu	r3,-4(fp)
 2013cd4:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2013cd8:	e0bff617 	ldw	r2,-40(fp)
 2013cdc:	e0fffe0b 	ldhu	r3,-8(fp)
 2013ce0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2013ce4:	e0bff617 	ldw	r2,-40(fp)
 2013ce8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2013cec:	e0bffb03 	ldbu	r2,-20(fp)
 2013cf0:	1004d0fa 	srli	r2,r2,3
 2013cf4:	1007883a 	mov	r3,r2
 2013cf8:	e0bff617 	ldw	r2,-40(fp)
 2013cfc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2013d00:	e0bffb03 	ldbu	r2,-20(fp)
 2013d04:	108001cc 	andi	r2,r2,7
 2013d08:	1007883a 	mov	r3,r2
 2013d0c:	e0bff617 	ldw	r2,-40(fp)
 2013d10:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2013d14:	e0bff617 	ldw	r2,-40(fp)
 2013d18:	10800d03 	ldbu	r2,52(r2)
 2013d1c:	10803fcc 	andi	r2,r2,255
 2013d20:	00c00044 	movi	r3,1
 2013d24:	1884983a 	sll	r2,r3,r2
 2013d28:	1007883a 	mov	r3,r2
 2013d2c:	e0bff617 	ldw	r2,-40(fp)
 2013d30:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2013d34:	e0bff617 	ldw	r2,-40(fp)
 2013d38:	10800cc3 	ldbu	r2,51(r2)
 2013d3c:	10803fcc 	andi	r2,r2,255
 2013d40:	00c00044 	movi	r3,1
 2013d44:	1884983a 	sll	r2,r3,r2
 2013d48:	1007883a 	mov	r3,r2
 2013d4c:	e0bff617 	ldw	r2,-40(fp)
 2013d50:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2013d54:	e0bff617 	ldw	r2,-40(fp)
 2013d58:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2013d5c:	e0bff617 	ldw	r2,-40(fp)
 2013d60:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2013d64:	e0bff617 	ldw	r2,-40(fp)
 2013d68:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2013d6c:	e0bff617 	ldw	r2,-40(fp)
 2013d70:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2013d74:	e0bff617 	ldw	r2,-40(fp)
 2013d78:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2013d7c:	e0bff617 	ldw	r2,-40(fp)
 2013d80:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2013d84:	e0bff617 	ldw	r2,-40(fp)
 2013d88:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2013d8c:	e0bff617 	ldw	r2,-40(fp)
 2013d90:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2013d94:	e0bff617 	ldw	r2,-40(fp)
 2013d98:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2013d9c:	e0bff617 	ldw	r2,-40(fp)
 2013da0:	00c00fc4 	movi	r3,63
 2013da4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2013da8:	e0bff617 	ldw	r2,-40(fp)
 2013dac:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2013db0:	e13ff617 	ldw	r4,-40(fp)
 2013db4:	201beac0 	call	201beac <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2013db8:	e13ff617 	ldw	r4,-40(fp)
 2013dbc:	201bda40 	call	201bda4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013dc0:	0005303a 	rdctl	r2,status
 2013dc4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013dc8:	e0fff517 	ldw	r3,-44(fp)
 2013dcc:	00bfff84 	movi	r2,-2
 2013dd0:	1884703a 	and	r2,r3,r2
 2013dd4:	1001703a 	wrctl	status,r2
  
  return context;
 2013dd8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2013ddc:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2013de0:	e0fffb03 	ldbu	r3,-20(fp)
 2013de4:	008080b4 	movhi	r2,514
 2013de8:	109da504 	addi	r2,r2,30356
 2013dec:	18c7883a 	add	r3,r3,r3
 2013df0:	18c7883a 	add	r3,r3,r3
 2013df4:	10c5883a 	add	r2,r2,r3
 2013df8:	e0fff617 	ldw	r3,-40(fp)
 2013dfc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2013e00:	d0e72e17 	ldw	r3,-25416(gp)
 2013e04:	e0bff617 	ldw	r2,-40(fp)
 2013e08:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2013e0c:	e0bff617 	ldw	r2,-40(fp)
 2013e10:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2013e14:	d0a72e17 	ldw	r2,-25416(gp)
 2013e18:	10000326 	beq	r2,zero,2013e28 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2013e1c:	d0a72e17 	ldw	r2,-25416(gp)
 2013e20:	e0fff617 	ldw	r3,-40(fp)
 2013e24:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2013e28:	e0bff617 	ldw	r2,-40(fp)
 2013e2c:	d0a72e15 	stw	r2,-25416(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2013e30:	e0bff617 	ldw	r2,-40(fp)
 2013e34:	10c00d83 	ldbu	r3,54(r2)
 2013e38:	d0a73703 	ldbu	r2,-25380(gp)
 2013e3c:	1884b03a 	or	r2,r3,r2
 2013e40:	d0a73705 	stb	r2,-25380(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2013e44:	e0bff617 	ldw	r2,-40(fp)
 2013e48:	10800d03 	ldbu	r2,52(r2)
 2013e4c:	10c03fcc 	andi	r3,r2,255
 2013e50:	e0bff617 	ldw	r2,-40(fp)
 2013e54:	10800d03 	ldbu	r2,52(r2)
 2013e58:	11003fcc 	andi	r4,r2,255
 2013e5c:	d0a73744 	addi	r2,gp,-25379
 2013e60:	2085883a 	add	r2,r4,r2
 2013e64:	11000003 	ldbu	r4,0(r2)
 2013e68:	e0bff617 	ldw	r2,-40(fp)
 2013e6c:	10800d43 	ldbu	r2,53(r2)
 2013e70:	2084b03a 	or	r2,r4,r2
 2013e74:	1009883a 	mov	r4,r2
 2013e78:	d0a73744 	addi	r2,gp,-25379
 2013e7c:	1885883a 	add	r2,r3,r2
 2013e80:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2013e84:	d0a73343 	ldbu	r2,-25395(gp)
 2013e88:	10800044 	addi	r2,r2,1
 2013e8c:	d0a73345 	stb	r2,-25395(gp)
 2013e90:	e0bff417 	ldw	r2,-48(fp)
 2013e94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013e98:	e0bff717 	ldw	r2,-36(fp)
 2013e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2013ea0:	0005883a 	mov	r2,zero
 2013ea4:	00000506 	br	2013ebc <OS_TCBInit+0x2c0>
 2013ea8:	e0bff417 	ldw	r2,-48(fp)
 2013eac:	e0bff915 	stw	r2,-28(fp)
 2013eb0:	e0bff917 	ldw	r2,-28(fp)
 2013eb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2013eb8:	00801084 	movi	r2,66
}
 2013ebc:	e037883a 	mov	sp,fp
 2013ec0:	dfc00117 	ldw	ra,4(sp)
 2013ec4:	df000017 	ldw	fp,0(sp)
 2013ec8:	dec00204 	addi	sp,sp,8
 2013ecc:	f800283a 	ret

02013ed0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2013ed0:	defffe04 	addi	sp,sp,-8
 2013ed4:	df000115 	stw	fp,4(sp)
 2013ed8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2013edc:	d0a01404 	addi	r2,gp,-32688
 2013ee0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2013ee4:	d0a01504 	addi	r2,gp,-32684
 2013ee8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2013eec:	d0a01684 	addi	r2,gp,-32678
 2013ef0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2013ef4:	d0a01704 	addi	r2,gp,-32676
 2013ef8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2013efc:	d0a01604 	addi	r2,gp,-32680
 2013f00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2013f04:	d0a01784 	addi	r2,gp,-32674
 2013f08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2013f0c:	d0a01804 	addi	r2,gp,-32672
 2013f10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2013f14:	d0a01884 	addi	r2,gp,-32670
 2013f18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2013f1c:	d0a01904 	addi	r2,gp,-32668
 2013f20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2013f24:	d0a01984 	addi	r2,gp,-32666
 2013f28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2013f2c:	d0a01a04 	addi	r2,gp,-32664
 2013f30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2013f34:	d0a01a84 	addi	r2,gp,-32662
 2013f38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 2013f3c:	d0a01b04 	addi	r2,gp,-32660
 2013f40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2013f44:	d0a01b84 	addi	r2,gp,-32658
 2013f48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 2013f4c:	d0a01c04 	addi	r2,gp,-32656
 2013f50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2013f54:	d0a01c84 	addi	r2,gp,-32654
 2013f58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 2013f5c:	d0a01d04 	addi	r2,gp,-32652
 2013f60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2013f64:	d0a01d84 	addi	r2,gp,-32650
 2013f68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2013f6c:	d0a01e04 	addi	r2,gp,-32648
 2013f70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2013f74:	d0a01e84 	addi	r2,gp,-32646
 2013f78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2013f7c:	d0a01f04 	addi	r2,gp,-32644
 2013f80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2013f84:	d0a01f84 	addi	r2,gp,-32642
 2013f88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2013f8c:	d0a02004 	addi	r2,gp,-32640
 2013f90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2013f94:	d0a02084 	addi	r2,gp,-32638
 2013f98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2013f9c:	d0a02104 	addi	r2,gp,-32636
 2013fa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2013fa4:	d0a02184 	addi	r2,gp,-32634
 2013fa8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2013fac:	d0a02204 	addi	r2,gp,-32632
 2013fb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2013fb4:	d0a02284 	addi	r2,gp,-32630
 2013fb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2013fbc:	d0a02304 	addi	r2,gp,-32628
 2013fc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2013fc4:	d0a02384 	addi	r2,gp,-32626
 2013fc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2013fcc:	d0a02404 	addi	r2,gp,-32624
 2013fd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2013fd4:	d0a02484 	addi	r2,gp,-32622
 2013fd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2013fdc:	d0a02504 	addi	r2,gp,-32620
 2013fe0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2013fe4:	d0a02584 	addi	r2,gp,-32618
 2013fe8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2013fec:	d0a02604 	addi	r2,gp,-32616
 2013ff0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2013ff4:	d0a02684 	addi	r2,gp,-32614
 2013ff8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2013ffc:	d0a02704 	addi	r2,gp,-32612
 2014000:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2014004:	d0a02784 	addi	r2,gp,-32610
 2014008:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 201400c:	d0a02804 	addi	r2,gp,-32608
 2014010:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2014014:	d0a02884 	addi	r2,gp,-32606
 2014018:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 201401c:	d0a02904 	addi	r2,gp,-32604
 2014020:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2014024:	d0a02984 	addi	r2,gp,-32602
 2014028:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 201402c:	d0a02a04 	addi	r2,gp,-32600
 2014030:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2014034:	d0a02a84 	addi	r2,gp,-32598
 2014038:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 201403c:	d0a02b04 	addi	r2,gp,-32596
 2014040:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2014044:	d0a03004 	addi	r2,gp,-32576
 2014048:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 201404c:	0001883a 	nop
 2014050:	e037883a 	mov	sp,fp
 2014054:	df000017 	ldw	fp,0(sp)
 2014058:	dec00104 	addi	sp,sp,4
 201405c:	f800283a 	ret

02014060 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2014060:	defff204 	addi	sp,sp,-56
 2014064:	df000d15 	stw	fp,52(sp)
 2014068:	df000d04 	addi	fp,sp,52
 201406c:	e13ffc15 	stw	r4,-16(fp)
 2014070:	2807883a 	mov	r3,r5
 2014074:	3005883a 	mov	r2,r6
 2014078:	e1ffff15 	stw	r7,-4(fp)
 201407c:	e0fffd0d 	sth	r3,-12(fp)
 2014080:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2014084:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014088:	e0bfff17 	ldw	r2,-4(fp)
 201408c:	1000021e 	bne	r2,zero,2014098 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2014090:	0005883a 	mov	r2,zero
 2014094:	0000b006 	br	2014358 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2014098:	e0bffc17 	ldw	r2,-16(fp)
 201409c:	1000051e 	bne	r2,zero,20140b4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20140a0:	e0bfff17 	ldw	r2,-4(fp)
 20140a4:	00c01b84 	movi	r3,110
 20140a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20140ac:	0005883a 	mov	r2,zero
 20140b0:	0000a906 	br	2014358 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 20140b4:	e0bffc17 	ldw	r2,-16(fp)
 20140b8:	10800003 	ldbu	r2,0(r2)
 20140bc:	10803fcc 	andi	r2,r2,255
 20140c0:	10800160 	cmpeqi	r2,r2,5
 20140c4:	1000051e 	bne	r2,zero,20140dc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 20140c8:	e0bfff17 	ldw	r2,-4(fp)
 20140cc:	00c00044 	movi	r3,1
 20140d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20140d4:	0005883a 	mov	r2,zero
 20140d8:	00009f06 	br	2014358 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 20140dc:	e0fffe03 	ldbu	r3,-8(fp)
 20140e0:	00bfe004 	movi	r2,-128
 20140e4:	1884703a 	and	r2,r3,r2
 20140e8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 20140ec:	e0bff503 	ldbu	r2,-44(fp)
 20140f0:	10000626 	beq	r2,zero,201410c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 20140f4:	e0bffe03 	ldbu	r2,-8(fp)
 20140f8:	10801fcc 	andi	r2,r2,127
 20140fc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2014100:	00800044 	movi	r2,1
 2014104:	e0bff385 	stb	r2,-50(fp)
 2014108:	00000106 	br	2014110 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 201410c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2014110:	e0bfff17 	ldw	r2,-4(fp)
 2014114:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014118:	0005303a 	rdctl	r2,status
 201411c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014120:	e0fffb17 	ldw	r3,-20(fp)
 2014124:	00bfff84 	movi	r2,-2
 2014128:	1884703a 	and	r2,r3,r2
 201412c:	1001703a 	wrctl	status,r2
  
  return context;
 2014130:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2014134:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 2014138:	e0bffe03 	ldbu	r2,-8(fp)
 201413c:	10c00060 	cmpeqi	r3,r2,1
 2014140:	18005f1e 	bne	r3,zero,20142c0 <OSFlagAccept+0x260>
 2014144:	10c00088 	cmpgei	r3,r2,2
 2014148:	1800021e 	bne	r3,zero,2014154 <OSFlagAccept+0xf4>
 201414c:	10003f26 	beq	r2,zero,201424c <OSFlagAccept+0x1ec>
 2014150:	00007706 	br	2014330 <OSFlagAccept+0x2d0>
 2014154:	10c000a0 	cmpeqi	r3,r2,2
 2014158:	1800031e 	bne	r3,zero,2014168 <OSFlagAccept+0x108>
 201415c:	108000e0 	cmpeqi	r2,r2,3
 2014160:	10001e1e 	bne	r2,zero,20141dc <OSFlagAccept+0x17c>
 2014164:	00007206 	br	2014330 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2014168:	e0bffc17 	ldw	r2,-16(fp)
 201416c:	10c0020b 	ldhu	r3,8(r2)
 2014170:	e0bffd0b 	ldhu	r2,-12(fp)
 2014174:	1884703a 	and	r2,r3,r2
 2014178:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201417c:	e0fff30b 	ldhu	r3,-52(fp)
 2014180:	e0bffd0b 	ldhu	r2,-12(fp)
 2014184:	18800d1e 	bne	r3,r2,20141bc <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2014188:	e0bff383 	ldbu	r2,-50(fp)
 201418c:	10800058 	cmpnei	r2,r2,1
 2014190:	10000d1e 	bne	r2,zero,20141c8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2014194:	e0bffc17 	ldw	r2,-16(fp)
 2014198:	1080020b 	ldhu	r2,8(r2)
 201419c:	1007883a 	mov	r3,r2
 20141a0:	e0bff30b 	ldhu	r2,-52(fp)
 20141a4:	0084303a 	nor	r2,zero,r2
 20141a8:	1884703a 	and	r2,r3,r2
 20141ac:	1007883a 	mov	r3,r2
 20141b0:	e0bffc17 	ldw	r2,-16(fp)
 20141b4:	10c0020d 	sth	r3,8(r2)
 20141b8:	00000306 	br	20141c8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20141bc:	e0bfff17 	ldw	r2,-4(fp)
 20141c0:	00c01c04 	movi	r3,112
 20141c4:	10c00005 	stb	r3,0(r2)
 20141c8:	e0bff417 	ldw	r2,-48(fp)
 20141cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20141d0:	e0bff617 	ldw	r2,-40(fp)
 20141d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20141d8:	00005e06 	br	2014354 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 20141dc:	e0bffc17 	ldw	r2,-16(fp)
 20141e0:	10c0020b 	ldhu	r3,8(r2)
 20141e4:	e0bffd0b 	ldhu	r2,-12(fp)
 20141e8:	1884703a 	and	r2,r3,r2
 20141ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 20141f0:	e0bff30b 	ldhu	r2,-52(fp)
 20141f4:	10000d26 	beq	r2,zero,201422c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20141f8:	e0bff383 	ldbu	r2,-50(fp)
 20141fc:	10800058 	cmpnei	r2,r2,1
 2014200:	10000d1e 	bne	r2,zero,2014238 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2014204:	e0bffc17 	ldw	r2,-16(fp)
 2014208:	1080020b 	ldhu	r2,8(r2)
 201420c:	1007883a 	mov	r3,r2
 2014210:	e0bff30b 	ldhu	r2,-52(fp)
 2014214:	0084303a 	nor	r2,zero,r2
 2014218:	1884703a 	and	r2,r3,r2
 201421c:	1007883a 	mov	r3,r2
 2014220:	e0bffc17 	ldw	r2,-16(fp)
 2014224:	10c0020d 	sth	r3,8(r2)
 2014228:	00000306 	br	2014238 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201422c:	e0bfff17 	ldw	r2,-4(fp)
 2014230:	00c01c04 	movi	r3,112
 2014234:	10c00005 	stb	r3,0(r2)
 2014238:	e0bff417 	ldw	r2,-48(fp)
 201423c:	e0bff715 	stw	r2,-36(fp)
 2014240:	e0bff717 	ldw	r2,-36(fp)
 2014244:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2014248:	00004206 	br	2014354 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 201424c:	e0bffc17 	ldw	r2,-16(fp)
 2014250:	1080020b 	ldhu	r2,8(r2)
 2014254:	0084303a 	nor	r2,zero,r2
 2014258:	1007883a 	mov	r3,r2
 201425c:	e0bffd0b 	ldhu	r2,-12(fp)
 2014260:	1884703a 	and	r2,r3,r2
 2014264:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2014268:	e0fff30b 	ldhu	r3,-52(fp)
 201426c:	e0bffd0b 	ldhu	r2,-12(fp)
 2014270:	18800b1e 	bne	r3,r2,20142a0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2014274:	e0bff383 	ldbu	r2,-50(fp)
 2014278:	10800058 	cmpnei	r2,r2,1
 201427c:	10000b1e 	bne	r2,zero,20142ac <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2014280:	e0bffc17 	ldw	r2,-16(fp)
 2014284:	10c0020b 	ldhu	r3,8(r2)
 2014288:	e0bff30b 	ldhu	r2,-52(fp)
 201428c:	1884b03a 	or	r2,r3,r2
 2014290:	1007883a 	mov	r3,r2
 2014294:	e0bffc17 	ldw	r2,-16(fp)
 2014298:	10c0020d 	sth	r3,8(r2)
 201429c:	00000306 	br	20142ac <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20142a0:	e0bfff17 	ldw	r2,-4(fp)
 20142a4:	00c01c04 	movi	r3,112
 20142a8:	10c00005 	stb	r3,0(r2)
 20142ac:	e0bff417 	ldw	r2,-48(fp)
 20142b0:	e0bff815 	stw	r2,-32(fp)
 20142b4:	e0bff817 	ldw	r2,-32(fp)
 20142b8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20142bc:	00002506 	br	2014354 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 20142c0:	e0bffc17 	ldw	r2,-16(fp)
 20142c4:	1080020b 	ldhu	r2,8(r2)
 20142c8:	0084303a 	nor	r2,zero,r2
 20142cc:	1007883a 	mov	r3,r2
 20142d0:	e0bffd0b 	ldhu	r2,-12(fp)
 20142d4:	1884703a 	and	r2,r3,r2
 20142d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 20142dc:	e0bff30b 	ldhu	r2,-52(fp)
 20142e0:	10000b26 	beq	r2,zero,2014310 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20142e4:	e0bff383 	ldbu	r2,-50(fp)
 20142e8:	10800058 	cmpnei	r2,r2,1
 20142ec:	10000b1e 	bne	r2,zero,201431c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 20142f0:	e0bffc17 	ldw	r2,-16(fp)
 20142f4:	10c0020b 	ldhu	r3,8(r2)
 20142f8:	e0bff30b 	ldhu	r2,-52(fp)
 20142fc:	1884b03a 	or	r2,r3,r2
 2014300:	1007883a 	mov	r3,r2
 2014304:	e0bffc17 	ldw	r2,-16(fp)
 2014308:	10c0020d 	sth	r3,8(r2)
 201430c:	00000306 	br	201431c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2014310:	e0bfff17 	ldw	r2,-4(fp)
 2014314:	00c01c04 	movi	r3,112
 2014318:	10c00005 	stb	r3,0(r2)
 201431c:	e0bff417 	ldw	r2,-48(fp)
 2014320:	e0bff915 	stw	r2,-28(fp)
 2014324:	e0bff917 	ldw	r2,-28(fp)
 2014328:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201432c:	00000906 	br	2014354 <OSFlagAccept+0x2f4>
 2014330:	e0bff417 	ldw	r2,-48(fp)
 2014334:	e0bffa15 	stw	r2,-24(fp)
 2014338:	e0bffa17 	ldw	r2,-24(fp)
 201433c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2014340:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 2014344:	e0bfff17 	ldw	r2,-4(fp)
 2014348:	00c01bc4 	movi	r3,111
 201434c:	10c00005 	stb	r3,0(r2)
             break;
 2014350:	0001883a 	nop
    }
    return (flags_rdy);
 2014354:	e0bff30b 	ldhu	r2,-52(fp)
}
 2014358:	e037883a 	mov	sp,fp
 201435c:	df000017 	ldw	fp,0(sp)
 2014360:	dec00104 	addi	sp,sp,4
 2014364:	f800283a 	ret

02014368 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 2014368:	defff804 	addi	sp,sp,-32
 201436c:	df000715 	stw	fp,28(sp)
 2014370:	df000704 	addi	fp,sp,28
 2014374:	2005883a 	mov	r2,r4
 2014378:	e17fff15 	stw	r5,-4(fp)
 201437c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2014380:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2014384:	e0bfff17 	ldw	r2,-4(fp)
 2014388:	1000021e 	bne	r2,zero,2014394 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 201438c:	0005883a 	mov	r2,zero
 2014390:	00003306 	br	2014460 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2014394:	d0a73903 	ldbu	r2,-25372(gp)
 2014398:	10803fcc 	andi	r2,r2,255
 201439c:	10000526 	beq	r2,zero,20143b4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 20143a0:	e0bfff17 	ldw	r2,-4(fp)
 20143a4:	00c00404 	movi	r3,16
 20143a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 20143ac:	0005883a 	mov	r2,zero
 20143b0:	00002b06 	br	2014460 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20143b4:	0005303a 	rdctl	r2,status
 20143b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20143bc:	e0fffd17 	ldw	r3,-12(fp)
 20143c0:	00bfff84 	movi	r2,-2
 20143c4:	1884703a 	and	r2,r3,r2
 20143c8:	1001703a 	wrctl	status,r2
  
  return context;
 20143cc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20143d0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 20143d4:	d0a73c17 	ldw	r2,-25360(gp)
 20143d8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 20143dc:	e0bffb17 	ldw	r2,-20(fp)
 20143e0:	10001726 	beq	r2,zero,2014440 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 20143e4:	d0a73c17 	ldw	r2,-25360(gp)
 20143e8:	10800117 	ldw	r2,4(r2)
 20143ec:	d0a73c15 	stw	r2,-25360(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 20143f0:	e0bffb17 	ldw	r2,-20(fp)
 20143f4:	00c00144 	movi	r3,5
 20143f8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 20143fc:	e0bffb17 	ldw	r2,-20(fp)
 2014400:	e0fffe0b 	ldhu	r3,-8(fp)
 2014404:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2014408:	e0bffb17 	ldw	r2,-20(fp)
 201440c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2014410:	e0bffb17 	ldw	r2,-20(fp)
 2014414:	00c00fc4 	movi	r3,63
 2014418:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201441c:	e0bffb17 	ldw	r2,-20(fp)
 2014420:	100002c5 	stb	zero,11(r2)
 2014424:	e0bff917 	ldw	r2,-28(fp)
 2014428:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201442c:	e0bffa17 	ldw	r2,-24(fp)
 2014430:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2014434:	e0bfff17 	ldw	r2,-4(fp)
 2014438:	10000005 	stb	zero,0(r2)
 201443c:	00000706 	br	201445c <OSFlagCreate+0xf4>
 2014440:	e0bff917 	ldw	r2,-28(fp)
 2014444:	e0bffc15 	stw	r2,-16(fp)
 2014448:	e0bffc17 	ldw	r2,-16(fp)
 201444c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 2014450:	e0bfff17 	ldw	r2,-4(fp)
 2014454:	00c01c84 	movi	r3,114
 2014458:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 201445c:	e0bffb17 	ldw	r2,-20(fp)
}
 2014460:	e037883a 	mov	sp,fp
 2014464:	df000017 	ldw	fp,0(sp)
 2014468:	dec00104 	addi	sp,sp,4
 201446c:	f800283a 	ret

02014470 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2014470:	defff204 	addi	sp,sp,-56
 2014474:	dfc00d15 	stw	ra,52(sp)
 2014478:	df000c15 	stw	fp,48(sp)
 201447c:	df000c04 	addi	fp,sp,48
 2014480:	e13ffd15 	stw	r4,-12(fp)
 2014484:	2805883a 	mov	r2,r5
 2014488:	e1bfff15 	stw	r6,-4(fp)
 201448c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2014490:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014494:	e0bfff17 	ldw	r2,-4(fp)
 2014498:	1000021e 	bne	r2,zero,20144a4 <OSFlagDel+0x34>
        return (pgrp);
 201449c:	e0bffd17 	ldw	r2,-12(fp)
 20144a0:	00008006 	br	20146a4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 20144a4:	e0bffd17 	ldw	r2,-12(fp)
 20144a8:	1000051e 	bne	r2,zero,20144c0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20144ac:	e0bfff17 	ldw	r2,-4(fp)
 20144b0:	00c01b84 	movi	r3,110
 20144b4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 20144b8:	e0bffd17 	ldw	r2,-12(fp)
 20144bc:	00007906 	br	20146a4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20144c0:	d0a73903 	ldbu	r2,-25372(gp)
 20144c4:	10803fcc 	andi	r2,r2,255
 20144c8:	10000526 	beq	r2,zero,20144e0 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 20144cc:	e0bfff17 	ldw	r2,-4(fp)
 20144d0:	00c003c4 	movi	r3,15
 20144d4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 20144d8:	e0bffd17 	ldw	r2,-12(fp)
 20144dc:	00007106 	br	20146a4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 20144e0:	e0bffd17 	ldw	r2,-12(fp)
 20144e4:	10800003 	ldbu	r2,0(r2)
 20144e8:	10803fcc 	andi	r2,r2,255
 20144ec:	10800160 	cmpeqi	r2,r2,5
 20144f0:	1000051e 	bne	r2,zero,2014508 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 20144f4:	e0bfff17 	ldw	r2,-4(fp)
 20144f8:	00c00044 	movi	r3,1
 20144fc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2014500:	e0bffd17 	ldw	r2,-12(fp)
 2014504:	00006706 	br	20146a4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014508:	0005303a 	rdctl	r2,status
 201450c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014510:	e0fffc17 	ldw	r3,-16(fp)
 2014514:	00bfff84 	movi	r2,-2
 2014518:	1884703a 	and	r2,r3,r2
 201451c:	1001703a 	wrctl	status,r2
  
  return context;
 2014520:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014524:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2014528:	e0bffd17 	ldw	r2,-12(fp)
 201452c:	10800117 	ldw	r2,4(r2)
 2014530:	10000326 	beq	r2,zero,2014540 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2014534:	00800044 	movi	r2,1
 2014538:	e0bff405 	stb	r2,-48(fp)
 201453c:	00000106 	br	2014544 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2014540:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2014544:	e0bffe03 	ldbu	r2,-8(fp)
 2014548:	10000326 	beq	r2,zero,2014558 <OSFlagDel+0xe8>
 201454c:	10800060 	cmpeqi	r2,r2,1
 2014550:	1000231e 	bne	r2,zero,20145e0 <OSFlagDel+0x170>
 2014554:	00004806 	br	2014678 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 2014558:	e0bff403 	ldbu	r2,-48(fp)
 201455c:	1000161e 	bne	r2,zero,20145b8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2014560:	e0bffd17 	ldw	r2,-12(fp)
 2014564:	00c00fc4 	movi	r3,63
 2014568:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201456c:	e0bffd17 	ldw	r2,-12(fp)
 2014570:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2014574:	e0bffd17 	ldw	r2,-12(fp)
 2014578:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 201457c:	d0e73c17 	ldw	r3,-25360(gp)
 2014580:	e0bffd17 	ldw	r2,-12(fp)
 2014584:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2014588:	e0bffd17 	ldw	r2,-12(fp)
 201458c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2014590:	e0bffd17 	ldw	r2,-12(fp)
 2014594:	d0a73c15 	stw	r2,-25360(gp)
 2014598:	e0bff717 	ldw	r2,-36(fp)
 201459c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20145a0:	e0bff817 	ldw	r2,-32(fp)
 20145a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 20145a8:	e0bfff17 	ldw	r2,-4(fp)
 20145ac:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 20145b0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 20145b4:	00003a06 	br	20146a0 <OSFlagDel+0x230>
 20145b8:	e0bff717 	ldw	r2,-36(fp)
 20145bc:	e0bff915 	stw	r2,-28(fp)
 20145c0:	e0bff917 	ldw	r2,-28(fp)
 20145c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 20145c8:	e0bfff17 	ldw	r2,-4(fp)
 20145cc:	00c01244 	movi	r3,73
 20145d0:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 20145d4:	e0bffd17 	ldw	r2,-12(fp)
 20145d8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 20145dc:	00003006 	br	20146a0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20145e0:	e0bffd17 	ldw	r2,-12(fp)
 20145e4:	10800117 	ldw	r2,4(r2)
 20145e8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 20145ec:	00000606 	br	2014608 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 20145f0:	000b883a 	mov	r5,zero
 20145f4:	e13ff517 	ldw	r4,-44(fp)
 20145f8:	20155dc0 	call	20155dc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 20145fc:	e0bff517 	ldw	r2,-44(fp)
 2014600:	10800017 	ldw	r2,0(r2)
 2014604:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2014608:	e0bff517 	ldw	r2,-44(fp)
 201460c:	103ff81e 	bne	r2,zero,20145f0 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2014610:	e0bffd17 	ldw	r2,-12(fp)
 2014614:	00c00fc4 	movi	r3,63
 2014618:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201461c:	e0bffd17 	ldw	r2,-12(fp)
 2014620:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2014624:	e0bffd17 	ldw	r2,-12(fp)
 2014628:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 201462c:	d0e73c17 	ldw	r3,-25360(gp)
 2014630:	e0bffd17 	ldw	r2,-12(fp)
 2014634:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2014638:	e0bffd17 	ldw	r2,-12(fp)
 201463c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 2014640:	e0bffd17 	ldw	r2,-12(fp)
 2014644:	d0a73c15 	stw	r2,-25360(gp)
 2014648:	e0bff717 	ldw	r2,-36(fp)
 201464c:	e0bffa15 	stw	r2,-24(fp)
 2014650:	e0bffa17 	ldw	r2,-24(fp)
 2014654:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2014658:	e0bff403 	ldbu	r2,-48(fp)
 201465c:	10800058 	cmpnei	r2,r2,1
 2014660:	1000011e 	bne	r2,zero,2014668 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2014664:	20137fc0 	call	20137fc <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 2014668:	e0bfff17 	ldw	r2,-4(fp)
 201466c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2014670:	e03ff615 	stw	zero,-40(fp)
             break;
 2014674:	00000a06 	br	20146a0 <OSFlagDel+0x230>
 2014678:	e0bff717 	ldw	r2,-36(fp)
 201467c:	e0bffb15 	stw	r2,-20(fp)
 2014680:	e0bffb17 	ldw	r2,-20(fp)
 2014684:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2014688:	e0bfff17 	ldw	r2,-4(fp)
 201468c:	00c001c4 	movi	r3,7
 2014690:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2014694:	e0bffd17 	ldw	r2,-12(fp)
 2014698:	e0bff615 	stw	r2,-40(fp)
             break;
 201469c:	0001883a 	nop
    }
    return (pgrp_return);
 20146a0:	e0bff617 	ldw	r2,-40(fp)
}
 20146a4:	e037883a 	mov	sp,fp
 20146a8:	dfc00117 	ldw	ra,4(sp)
 20146ac:	df000017 	ldw	fp,0(sp)
 20146b0:	dec00204 	addi	sp,sp,8
 20146b4:	f800283a 	ret

020146b8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 20146b8:	defff604 	addi	sp,sp,-40
 20146bc:	dfc00915 	stw	ra,36(sp)
 20146c0:	df000815 	stw	fp,32(sp)
 20146c4:	df000804 	addi	fp,sp,32
 20146c8:	e13ffd15 	stw	r4,-12(fp)
 20146cc:	e17ffe15 	stw	r5,-8(fp)
 20146d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20146d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20146d8:	e0bfff17 	ldw	r2,-4(fp)
 20146dc:	1000021e 	bne	r2,zero,20146e8 <OSFlagNameGet+0x30>
        return (0);
 20146e0:	0005883a 	mov	r2,zero
 20146e4:	00003906 	br	20147cc <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 20146e8:	e0bffd17 	ldw	r2,-12(fp)
 20146ec:	1000051e 	bne	r2,zero,2014704 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20146f0:	e0bfff17 	ldw	r2,-4(fp)
 20146f4:	00c01b84 	movi	r3,110
 20146f8:	10c00005 	stb	r3,0(r2)
        return (0);
 20146fc:	0005883a 	mov	r2,zero
 2014700:	00003206 	br	20147cc <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2014704:	e0bffe17 	ldw	r2,-8(fp)
 2014708:	1000051e 	bne	r2,zero,2014720 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201470c:	e0bfff17 	ldw	r2,-4(fp)
 2014710:	00c00304 	movi	r3,12
 2014714:	10c00005 	stb	r3,0(r2)
        return (0);
 2014718:	0005883a 	mov	r2,zero
 201471c:	00002b06 	br	20147cc <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2014720:	d0a73903 	ldbu	r2,-25372(gp)
 2014724:	10803fcc 	andi	r2,r2,255
 2014728:	10000526 	beq	r2,zero,2014740 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 201472c:	e0bfff17 	ldw	r2,-4(fp)
 2014730:	00c00444 	movi	r3,17
 2014734:	10c00005 	stb	r3,0(r2)
        return (0);
 2014738:	0005883a 	mov	r2,zero
 201473c:	00002306 	br	20147cc <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014740:	0005303a 	rdctl	r2,status
 2014744:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014748:	e0fffc17 	ldw	r3,-16(fp)
 201474c:	00bfff84 	movi	r2,-2
 2014750:	1884703a 	and	r2,r3,r2
 2014754:	1001703a 	wrctl	status,r2
  
  return context;
 2014758:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201475c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2014760:	e0bffd17 	ldw	r2,-12(fp)
 2014764:	10800003 	ldbu	r2,0(r2)
 2014768:	10803fcc 	andi	r2,r2,255
 201476c:	10800160 	cmpeqi	r2,r2,5
 2014770:	1000091e 	bne	r2,zero,2014798 <OSFlagNameGet+0xe0>
 2014774:	e0bff817 	ldw	r2,-32(fp)
 2014778:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201477c:	e0bff917 	ldw	r2,-28(fp)
 2014780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2014784:	e0bfff17 	ldw	r2,-4(fp)
 2014788:	00c00044 	movi	r3,1
 201478c:	10c00005 	stb	r3,0(r2)
        return (0);
 2014790:	0005883a 	mov	r2,zero
 2014794:	00000d06 	br	20147cc <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2014798:	e0bffd17 	ldw	r2,-12(fp)
 201479c:	10800284 	addi	r2,r2,10
 20147a0:	100b883a 	mov	r5,r2
 20147a4:	e13ffe17 	ldw	r4,-8(fp)
 20147a8:	20139400 	call	2013940 <OS_StrCopy>
 20147ac:	e0bffb05 	stb	r2,-20(fp)
 20147b0:	e0bff817 	ldw	r2,-32(fp)
 20147b4:	e0bffa15 	stw	r2,-24(fp)
 20147b8:	e0bffa17 	ldw	r2,-24(fp)
 20147bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20147c0:	e0bfff17 	ldw	r2,-4(fp)
 20147c4:	10000005 	stb	zero,0(r2)
    return (len);
 20147c8:	e0bffb03 	ldbu	r2,-20(fp)
}
 20147cc:	e037883a 	mov	sp,fp
 20147d0:	dfc00117 	ldw	ra,4(sp)
 20147d4:	df000017 	ldw	fp,0(sp)
 20147d8:	dec00204 	addi	sp,sp,8
 20147dc:	f800283a 	ret

020147e0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 20147e0:	defff504 	addi	sp,sp,-44
 20147e4:	dfc00a15 	stw	ra,40(sp)
 20147e8:	df000915 	stw	fp,36(sp)
 20147ec:	df000904 	addi	fp,sp,36
 20147f0:	e13ffd15 	stw	r4,-12(fp)
 20147f4:	e17ffe15 	stw	r5,-8(fp)
 20147f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20147fc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2014800:	e0bfff17 	ldw	r2,-4(fp)
 2014804:	10004326 	beq	r2,zero,2014914 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2014808:	e0bffd17 	ldw	r2,-12(fp)
 201480c:	1000041e 	bne	r2,zero,2014820 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2014810:	e0bfff17 	ldw	r2,-4(fp)
 2014814:	00c01b84 	movi	r3,110
 2014818:	10c00005 	stb	r3,0(r2)
        return;
 201481c:	00003e06 	br	2014918 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2014820:	e0bffe17 	ldw	r2,-8(fp)
 2014824:	1000041e 	bne	r2,zero,2014838 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2014828:	e0bfff17 	ldw	r2,-4(fp)
 201482c:	00c00304 	movi	r3,12
 2014830:	10c00005 	stb	r3,0(r2)
        return;
 2014834:	00003806 	br	2014918 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2014838:	d0a73903 	ldbu	r2,-25372(gp)
 201483c:	10803fcc 	andi	r2,r2,255
 2014840:	10000426 	beq	r2,zero,2014854 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2014844:	e0bfff17 	ldw	r2,-4(fp)
 2014848:	00c00484 	movi	r3,18
 201484c:	10c00005 	stb	r3,0(r2)
        return;
 2014850:	00003106 	br	2014918 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014854:	0005303a 	rdctl	r2,status
 2014858:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201485c:	e0fffc17 	ldw	r3,-16(fp)
 2014860:	00bfff84 	movi	r2,-2
 2014864:	1884703a 	and	r2,r3,r2
 2014868:	1001703a 	wrctl	status,r2
  
  return context;
 201486c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014870:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2014874:	e0bffd17 	ldw	r2,-12(fp)
 2014878:	10800003 	ldbu	r2,0(r2)
 201487c:	10803fcc 	andi	r2,r2,255
 2014880:	10800160 	cmpeqi	r2,r2,5
 2014884:	1000081e 	bne	r2,zero,20148a8 <OSFlagNameSet+0xc8>
 2014888:	e0bff717 	ldw	r2,-36(fp)
 201488c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014890:	e0bff817 	ldw	r2,-32(fp)
 2014894:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2014898:	e0bfff17 	ldw	r2,-4(fp)
 201489c:	00c00044 	movi	r3,1
 20148a0:	10c00005 	stb	r3,0(r2)
        return;
 20148a4:	00001c06 	br	2014918 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 20148a8:	e13ffe17 	ldw	r4,-8(fp)
 20148ac:	20139b40 	call	20139b4 <OS_StrLen>
 20148b0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 20148b4:	e0bffa03 	ldbu	r2,-24(fp)
 20148b8:	10800830 	cmpltui	r2,r2,32
 20148bc:	1000081e 	bne	r2,zero,20148e0 <OSFlagNameSet+0x100>
 20148c0:	e0bff717 	ldw	r2,-36(fp)
 20148c4:	e0bff915 	stw	r2,-28(fp)
 20148c8:	e0bff917 	ldw	r2,-28(fp)
 20148cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 20148d0:	e0bfff17 	ldw	r2,-4(fp)
 20148d4:	00c01cc4 	movi	r3,115
 20148d8:	10c00005 	stb	r3,0(r2)
        return;
 20148dc:	00000e06 	br	2014918 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 20148e0:	e0bffd17 	ldw	r2,-12(fp)
 20148e4:	10800284 	addi	r2,r2,10
 20148e8:	e17ffe17 	ldw	r5,-8(fp)
 20148ec:	1009883a 	mov	r4,r2
 20148f0:	20139400 	call	2013940 <OS_StrCopy>
 20148f4:	e0bff717 	ldw	r2,-36(fp)
 20148f8:	e0bffb15 	stw	r2,-20(fp)
 20148fc:	e0bffb17 	ldw	r2,-20(fp)
 2014900:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014904:	e0bfff17 	ldw	r2,-4(fp)
 2014908:	10000005 	stb	zero,0(r2)
    return;
 201490c:	0001883a 	nop
 2014910:	00000106 	br	2014918 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2014914:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2014918:	e037883a 	mov	sp,fp
 201491c:	dfc00117 	ldw	ra,4(sp)
 2014920:	df000017 	ldw	fp,0(sp)
 2014924:	dec00204 	addi	sp,sp,8
 2014928:	f800283a 	ret

0201492c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 201492c:	deffe104 	addi	sp,sp,-124
 2014930:	dfc01e15 	stw	ra,120(sp)
 2014934:	df001d15 	stw	fp,116(sp)
 2014938:	df001d04 	addi	fp,sp,116
 201493c:	e13ffc15 	stw	r4,-16(fp)
 2014940:	2809883a 	mov	r4,r5
 2014944:	3007883a 	mov	r3,r6
 2014948:	3805883a 	mov	r2,r7
 201494c:	e13ffd0d 	sth	r4,-12(fp)
 2014950:	e0fffe05 	stb	r3,-8(fp)
 2014954:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2014958:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201495c:	e0800217 	ldw	r2,8(fp)
 2014960:	1000021e 	bne	r2,zero,201496c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 2014964:	0005883a 	mov	r2,zero
 2014968:	00015906 	br	2014ed0 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 201496c:	e0bffc17 	ldw	r2,-16(fp)
 2014970:	1000051e 	bne	r2,zero,2014988 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2014974:	e0800217 	ldw	r2,8(fp)
 2014978:	00c01b84 	movi	r3,110
 201497c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2014980:	0005883a 	mov	r2,zero
 2014984:	00015206 	br	2014ed0 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2014988:	d0a73903 	ldbu	r2,-25372(gp)
 201498c:	10803fcc 	andi	r2,r2,255
 2014990:	10000526 	beq	r2,zero,20149a8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2014994:	e0800217 	ldw	r2,8(fp)
 2014998:	00c00084 	movi	r3,2
 201499c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20149a0:	0005883a 	mov	r2,zero
 20149a4:	00014a06 	br	2014ed0 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 20149a8:	d0a72b03 	ldbu	r2,-25428(gp)
 20149ac:	10803fcc 	andi	r2,r2,255
 20149b0:	10000526 	beq	r2,zero,20149c8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 20149b4:	e0800217 	ldw	r2,8(fp)
 20149b8:	00c00344 	movi	r3,13
 20149bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20149c0:	0005883a 	mov	r2,zero
 20149c4:	00014206 	br	2014ed0 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 20149c8:	e0bffc17 	ldw	r2,-16(fp)
 20149cc:	10800003 	ldbu	r2,0(r2)
 20149d0:	10803fcc 	andi	r2,r2,255
 20149d4:	10800160 	cmpeqi	r2,r2,5
 20149d8:	1000051e 	bne	r2,zero,20149f0 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 20149dc:	e0800217 	ldw	r2,8(fp)
 20149e0:	00c00044 	movi	r3,1
 20149e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20149e8:	0005883a 	mov	r2,zero
 20149ec:	00013806 	br	2014ed0 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 20149f0:	e0fffe03 	ldbu	r3,-8(fp)
 20149f4:	00bfe004 	movi	r2,-128
 20149f8:	1884703a 	and	r2,r3,r2
 20149fc:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2014a00:	e0bfe603 	ldbu	r2,-104(fp)
 2014a04:	10000626 	beq	r2,zero,2014a20 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2014a08:	e0bffe03 	ldbu	r2,-8(fp)
 2014a0c:	10801fcc 	andi	r2,r2,127
 2014a10:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2014a14:	00800044 	movi	r2,1
 2014a18:	e0bfe405 	stb	r2,-112(fp)
 2014a1c:	00000106 	br	2014a24 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2014a20:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014a24:	0005303a 	rdctl	r2,status
 2014a28:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014a2c:	e0fff617 	ldw	r3,-40(fp)
 2014a30:	00bfff84 	movi	r2,-2
 2014a34:	1884703a 	and	r2,r3,r2
 2014a38:	1001703a 	wrctl	status,r2
  
  return context;
 2014a3c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2014a40:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 2014a44:	e0bffe03 	ldbu	r2,-8(fp)
 2014a48:	10c00060 	cmpeqi	r3,r2,1
 2014a4c:	1800921e 	bne	r3,zero,2014c98 <OSFlagPend+0x36c>
 2014a50:	10c00088 	cmpgei	r3,r2,2
 2014a54:	1800021e 	bne	r3,zero,2014a60 <OSFlagPend+0x134>
 2014a58:	10006126 	beq	r2,zero,2014be0 <OSFlagPend+0x2b4>
 2014a5c:	0000bb06 	br	2014d4c <OSFlagPend+0x420>
 2014a60:	10c000a0 	cmpeqi	r3,r2,2
 2014a64:	1800031e 	bne	r3,zero,2014a74 <OSFlagPend+0x148>
 2014a68:	108000e0 	cmpeqi	r2,r2,3
 2014a6c:	10002f1e 	bne	r2,zero,2014b2c <OSFlagPend+0x200>
 2014a70:	0000b606 	br	2014d4c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 2014a74:	e0bffc17 	ldw	r2,-16(fp)
 2014a78:	10c0020b 	ldhu	r3,8(r2)
 2014a7c:	e0bffd0b 	ldhu	r2,-12(fp)
 2014a80:	1884703a 	and	r2,r3,r2
 2014a84:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2014a88:	e0ffe80b 	ldhu	r3,-96(fp)
 2014a8c:	e0bffd0b 	ldhu	r2,-12(fp)
 2014a90:	1880171e 	bne	r3,r2,2014af0 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2014a94:	e0bfe403 	ldbu	r2,-112(fp)
 2014a98:	10800058 	cmpnei	r2,r2,1
 2014a9c:	1000091e 	bne	r2,zero,2014ac4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2014aa0:	e0bffc17 	ldw	r2,-16(fp)
 2014aa4:	1080020b 	ldhu	r2,8(r2)
 2014aa8:	1007883a 	mov	r3,r2
 2014aac:	e0bfe80b 	ldhu	r2,-96(fp)
 2014ab0:	0084303a 	nor	r2,zero,r2
 2014ab4:	1884703a 	and	r2,r3,r2
 2014ab8:	1007883a 	mov	r3,r2
 2014abc:	e0bffc17 	ldw	r2,-16(fp)
 2014ac0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2014ac4:	d0a73a17 	ldw	r2,-25368(gp)
 2014ac8:	e0ffe80b 	ldhu	r3,-96(fp)
 2014acc:	10c00b0d 	sth	r3,44(r2)
 2014ad0:	e0bfe517 	ldw	r2,-108(fp)
 2014ad4:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014ad8:	e0bfe717 	ldw	r2,-100(fp)
 2014adc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2014ae0:	e0800217 	ldw	r2,8(fp)
 2014ae4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2014ae8:	e0bfe80b 	ldhu	r2,-96(fp)
 2014aec:	0000f806 	br	2014ed0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2014af0:	e13ffd0b 	ldhu	r4,-12(fp)
 2014af4:	e17ffe03 	ldbu	r5,-8(fp)
 2014af8:	e0bfff0b 	ldhu	r2,-4(fp)
 2014afc:	e0fff704 	addi	r3,fp,-36
 2014b00:	d8800015 	stw	r2,0(sp)
 2014b04:	280f883a 	mov	r7,r5
 2014b08:	200d883a 	mov	r6,r4
 2014b0c:	180b883a 	mov	r5,r3
 2014b10:	e13ffc17 	ldw	r4,-16(fp)
 2014b14:	201539c0 	call	201539c <OS_FlagBlock>
 2014b18:	e0bfe517 	ldw	r2,-108(fp)
 2014b1c:	e0bfe915 	stw	r2,-92(fp)
 2014b20:	e0bfe917 	ldw	r2,-92(fp)
 2014b24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2014b28:	00009206 	br	2014d74 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2014b2c:	e0bffc17 	ldw	r2,-16(fp)
 2014b30:	10c0020b 	ldhu	r3,8(r2)
 2014b34:	e0bffd0b 	ldhu	r2,-12(fp)
 2014b38:	1884703a 	and	r2,r3,r2
 2014b3c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2014b40:	e0bfe80b 	ldhu	r2,-96(fp)
 2014b44:	10001726 	beq	r2,zero,2014ba4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2014b48:	e0bfe403 	ldbu	r2,-112(fp)
 2014b4c:	10800058 	cmpnei	r2,r2,1
 2014b50:	1000091e 	bne	r2,zero,2014b78 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2014b54:	e0bffc17 	ldw	r2,-16(fp)
 2014b58:	1080020b 	ldhu	r2,8(r2)
 2014b5c:	1007883a 	mov	r3,r2
 2014b60:	e0bfe80b 	ldhu	r2,-96(fp)
 2014b64:	0084303a 	nor	r2,zero,r2
 2014b68:	1884703a 	and	r2,r3,r2
 2014b6c:	1007883a 	mov	r3,r2
 2014b70:	e0bffc17 	ldw	r2,-16(fp)
 2014b74:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2014b78:	d0a73a17 	ldw	r2,-25368(gp)
 2014b7c:	e0ffe80b 	ldhu	r3,-96(fp)
 2014b80:	10c00b0d 	sth	r3,44(r2)
 2014b84:	e0bfe517 	ldw	r2,-108(fp)
 2014b88:	e0bfea15 	stw	r2,-88(fp)
 2014b8c:	e0bfea17 	ldw	r2,-88(fp)
 2014b90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2014b94:	e0800217 	ldw	r2,8(fp)
 2014b98:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2014b9c:	e0bfe80b 	ldhu	r2,-96(fp)
 2014ba0:	0000cb06 	br	2014ed0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2014ba4:	e13ffd0b 	ldhu	r4,-12(fp)
 2014ba8:	e17ffe03 	ldbu	r5,-8(fp)
 2014bac:	e0bfff0b 	ldhu	r2,-4(fp)
 2014bb0:	e0fff704 	addi	r3,fp,-36
 2014bb4:	d8800015 	stw	r2,0(sp)
 2014bb8:	280f883a 	mov	r7,r5
 2014bbc:	200d883a 	mov	r6,r4
 2014bc0:	180b883a 	mov	r5,r3
 2014bc4:	e13ffc17 	ldw	r4,-16(fp)
 2014bc8:	201539c0 	call	201539c <OS_FlagBlock>
 2014bcc:	e0bfe517 	ldw	r2,-108(fp)
 2014bd0:	e0bfeb15 	stw	r2,-84(fp)
 2014bd4:	e0bfeb17 	ldw	r2,-84(fp)
 2014bd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2014bdc:	00006506 	br	2014d74 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2014be0:	e0bffc17 	ldw	r2,-16(fp)
 2014be4:	1080020b 	ldhu	r2,8(r2)
 2014be8:	0084303a 	nor	r2,zero,r2
 2014bec:	1007883a 	mov	r3,r2
 2014bf0:	e0bffd0b 	ldhu	r2,-12(fp)
 2014bf4:	1884703a 	and	r2,r3,r2
 2014bf8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2014bfc:	e0ffe80b 	ldhu	r3,-96(fp)
 2014c00:	e0bffd0b 	ldhu	r2,-12(fp)
 2014c04:	1880151e 	bne	r3,r2,2014c5c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2014c08:	e0bfe403 	ldbu	r2,-112(fp)
 2014c0c:	10800058 	cmpnei	r2,r2,1
 2014c10:	1000071e 	bne	r2,zero,2014c30 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2014c14:	e0bffc17 	ldw	r2,-16(fp)
 2014c18:	10c0020b 	ldhu	r3,8(r2)
 2014c1c:	e0bfe80b 	ldhu	r2,-96(fp)
 2014c20:	1884b03a 	or	r2,r3,r2
 2014c24:	1007883a 	mov	r3,r2
 2014c28:	e0bffc17 	ldw	r2,-16(fp)
 2014c2c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2014c30:	d0a73a17 	ldw	r2,-25368(gp)
 2014c34:	e0ffe80b 	ldhu	r3,-96(fp)
 2014c38:	10c00b0d 	sth	r3,44(r2)
 2014c3c:	e0bfe517 	ldw	r2,-108(fp)
 2014c40:	e0bfec15 	stw	r2,-80(fp)
 2014c44:	e0bfec17 	ldw	r2,-80(fp)
 2014c48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2014c4c:	e0800217 	ldw	r2,8(fp)
 2014c50:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2014c54:	e0bfe80b 	ldhu	r2,-96(fp)
 2014c58:	00009d06 	br	2014ed0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2014c5c:	e13ffd0b 	ldhu	r4,-12(fp)
 2014c60:	e17ffe03 	ldbu	r5,-8(fp)
 2014c64:	e0bfff0b 	ldhu	r2,-4(fp)
 2014c68:	e0fff704 	addi	r3,fp,-36
 2014c6c:	d8800015 	stw	r2,0(sp)
 2014c70:	280f883a 	mov	r7,r5
 2014c74:	200d883a 	mov	r6,r4
 2014c78:	180b883a 	mov	r5,r3
 2014c7c:	e13ffc17 	ldw	r4,-16(fp)
 2014c80:	201539c0 	call	201539c <OS_FlagBlock>
 2014c84:	e0bfe517 	ldw	r2,-108(fp)
 2014c88:	e0bfed15 	stw	r2,-76(fp)
 2014c8c:	e0bfed17 	ldw	r2,-76(fp)
 2014c90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2014c94:	00003706 	br	2014d74 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2014c98:	e0bffc17 	ldw	r2,-16(fp)
 2014c9c:	1080020b 	ldhu	r2,8(r2)
 2014ca0:	0084303a 	nor	r2,zero,r2
 2014ca4:	1007883a 	mov	r3,r2
 2014ca8:	e0bffd0b 	ldhu	r2,-12(fp)
 2014cac:	1884703a 	and	r2,r3,r2
 2014cb0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2014cb4:	e0bfe80b 	ldhu	r2,-96(fp)
 2014cb8:	10001526 	beq	r2,zero,2014d10 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2014cbc:	e0bfe403 	ldbu	r2,-112(fp)
 2014cc0:	10800058 	cmpnei	r2,r2,1
 2014cc4:	1000071e 	bne	r2,zero,2014ce4 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2014cc8:	e0bffc17 	ldw	r2,-16(fp)
 2014ccc:	10c0020b 	ldhu	r3,8(r2)
 2014cd0:	e0bfe80b 	ldhu	r2,-96(fp)
 2014cd4:	1884b03a 	or	r2,r3,r2
 2014cd8:	1007883a 	mov	r3,r2
 2014cdc:	e0bffc17 	ldw	r2,-16(fp)
 2014ce0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2014ce4:	d0a73a17 	ldw	r2,-25368(gp)
 2014ce8:	e0ffe80b 	ldhu	r3,-96(fp)
 2014cec:	10c00b0d 	sth	r3,44(r2)
 2014cf0:	e0bfe517 	ldw	r2,-108(fp)
 2014cf4:	e0bfee15 	stw	r2,-72(fp)
 2014cf8:	e0bfee17 	ldw	r2,-72(fp)
 2014cfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2014d00:	e0800217 	ldw	r2,8(fp)
 2014d04:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2014d08:	e0bfe80b 	ldhu	r2,-96(fp)
 2014d0c:	00007006 	br	2014ed0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2014d10:	e13ffd0b 	ldhu	r4,-12(fp)
 2014d14:	e17ffe03 	ldbu	r5,-8(fp)
 2014d18:	e0bfff0b 	ldhu	r2,-4(fp)
 2014d1c:	e0fff704 	addi	r3,fp,-36
 2014d20:	d8800015 	stw	r2,0(sp)
 2014d24:	280f883a 	mov	r7,r5
 2014d28:	200d883a 	mov	r6,r4
 2014d2c:	180b883a 	mov	r5,r3
 2014d30:	e13ffc17 	ldw	r4,-16(fp)
 2014d34:	201539c0 	call	201539c <OS_FlagBlock>
 2014d38:	e0bfe517 	ldw	r2,-108(fp)
 2014d3c:	e0bfef15 	stw	r2,-68(fp)
 2014d40:	e0bfef17 	ldw	r2,-68(fp)
 2014d44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2014d48:	00000a06 	br	2014d74 <OSFlagPend+0x448>
 2014d4c:	e0bfe517 	ldw	r2,-108(fp)
 2014d50:	e0bff015 	stw	r2,-64(fp)
 2014d54:	e0bff017 	ldw	r2,-64(fp)
 2014d58:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2014d5c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2014d60:	e0800217 	ldw	r2,8(fp)
 2014d64:	00c01bc4 	movi	r3,111
 2014d68:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 2014d6c:	e0bfe80b 	ldhu	r2,-96(fp)
 2014d70:	00005706 	br	2014ed0 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2014d74:	20137fc0 	call	20137fc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014d78:	0005303a 	rdctl	r2,status
 2014d7c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014d80:	e0fff117 	ldw	r3,-60(fp)
 2014d84:	00bfff84 	movi	r2,-2
 2014d88:	1884703a 	and	r2,r3,r2
 2014d8c:	1001703a 	wrctl	status,r2
  
  return context;
 2014d90:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 2014d94:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2014d98:	d0a73a17 	ldw	r2,-25368(gp)
 2014d9c:	10800c43 	ldbu	r2,49(r2)
 2014da0:	10803fcc 	andi	r2,r2,255
 2014da4:	10001c26 	beq	r2,zero,2014e18 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2014da8:	d0a73a17 	ldw	r2,-25368(gp)
 2014dac:	10800c43 	ldbu	r2,49(r2)
 2014db0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2014db4:	d0a73a17 	ldw	r2,-25368(gp)
 2014db8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2014dbc:	e0bff704 	addi	r2,fp,-36
 2014dc0:	1009883a 	mov	r4,r2
 2014dc4:	20156d00 	call	20156d0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2014dc8:	d0a73a17 	ldw	r2,-25368(gp)
 2014dcc:	10000c05 	stb	zero,48(r2)
 2014dd0:	e0bfe517 	ldw	r2,-108(fp)
 2014dd4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014dd8:	e0bff217 	ldw	r2,-56(fp)
 2014ddc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2014de0:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 2014de4:	e0bff303 	ldbu	r2,-52(fp)
 2014de8:	108000a0 	cmpeqi	r2,r2,2
 2014dec:	10000426 	beq	r2,zero,2014e00 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2014df0:	e0800217 	ldw	r2,8(fp)
 2014df4:	00c00384 	movi	r3,14
 2014df8:	10c00005 	stb	r3,0(r2)
                 break;
 2014dfc:	00000406 	br	2014e10 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2014e00:	e0800217 	ldw	r2,8(fp)
 2014e04:	00c00284 	movi	r3,10
 2014e08:	10c00005 	stb	r3,0(r2)
                 break;
 2014e0c:	0001883a 	nop
        }
        return (flags_rdy);
 2014e10:	e0bfe80b 	ldhu	r2,-96(fp)
 2014e14:	00002e06 	br	2014ed0 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2014e18:	d0a73a17 	ldw	r2,-25368(gp)
 2014e1c:	10800b0b 	ldhu	r2,44(r2)
 2014e20:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2014e24:	e0bfe403 	ldbu	r2,-112(fp)
 2014e28:	10800058 	cmpnei	r2,r2,1
 2014e2c:	1000211e 	bne	r2,zero,2014eb4 <OSFlagPend+0x588>
        switch (wait_type) {
 2014e30:	e0bffe03 	ldbu	r2,-8(fp)
 2014e34:	10001616 	blt	r2,zero,2014e90 <OSFlagPend+0x564>
 2014e38:	10c00090 	cmplti	r3,r2,2
 2014e3c:	18000c1e 	bne	r3,zero,2014e70 <OSFlagPend+0x544>
 2014e40:	10800108 	cmpgei	r2,r2,4
 2014e44:	1000121e 	bne	r2,zero,2014e90 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2014e48:	e0bffc17 	ldw	r2,-16(fp)
 2014e4c:	1080020b 	ldhu	r2,8(r2)
 2014e50:	1007883a 	mov	r3,r2
 2014e54:	e0bfe80b 	ldhu	r2,-96(fp)
 2014e58:	0084303a 	nor	r2,zero,r2
 2014e5c:	1884703a 	and	r2,r3,r2
 2014e60:	1007883a 	mov	r3,r2
 2014e64:	e0bffc17 	ldw	r2,-16(fp)
 2014e68:	10c0020d 	sth	r3,8(r2)
                 break;
 2014e6c:	00001106 	br	2014eb4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2014e70:	e0bffc17 	ldw	r2,-16(fp)
 2014e74:	10c0020b 	ldhu	r3,8(r2)
 2014e78:	e0bfe80b 	ldhu	r2,-96(fp)
 2014e7c:	1884b03a 	or	r2,r3,r2
 2014e80:	1007883a 	mov	r3,r2
 2014e84:	e0bffc17 	ldw	r2,-16(fp)
 2014e88:	10c0020d 	sth	r3,8(r2)
                 break;
 2014e8c:	00000906 	br	2014eb4 <OSFlagPend+0x588>
 2014e90:	e0bfe517 	ldw	r2,-108(fp)
 2014e94:	e0bff415 	stw	r2,-48(fp)
 2014e98:	e0bff417 	ldw	r2,-48(fp)
 2014e9c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2014ea0:	e0800217 	ldw	r2,8(fp)
 2014ea4:	00c01bc4 	movi	r3,111
 2014ea8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2014eac:	0005883a 	mov	r2,zero
 2014eb0:	00000706 	br	2014ed0 <OSFlagPend+0x5a4>
 2014eb4:	e0bfe517 	ldw	r2,-108(fp)
 2014eb8:	e0bff515 	stw	r2,-44(fp)
 2014ebc:	e0bff517 	ldw	r2,-44(fp)
 2014ec0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2014ec4:	e0800217 	ldw	r2,8(fp)
 2014ec8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2014ecc:	e0bfe80b 	ldhu	r2,-96(fp)
}
 2014ed0:	e037883a 	mov	sp,fp
 2014ed4:	dfc00117 	ldw	ra,4(sp)
 2014ed8:	df000017 	ldw	fp,0(sp)
 2014edc:	dec00204 	addi	sp,sp,8
 2014ee0:	f800283a 	ret

02014ee4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2014ee4:	defffb04 	addi	sp,sp,-20
 2014ee8:	df000415 	stw	fp,16(sp)
 2014eec:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2014ef0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ef4:	0005303a 	rdctl	r2,status
 2014ef8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014efc:	e0fffe17 	ldw	r3,-8(fp)
 2014f00:	00bfff84 	movi	r2,-2
 2014f04:	1884703a 	and	r2,r3,r2
 2014f08:	1001703a 	wrctl	status,r2
  
  return context;
 2014f0c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2014f10:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2014f14:	d0a73a17 	ldw	r2,-25368(gp)
 2014f18:	10800b0b 	ldhu	r2,44(r2)
 2014f1c:	e0bffd0d 	sth	r2,-12(fp)
 2014f20:	e0bffc17 	ldw	r2,-16(fp)
 2014f24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014f28:	e0bfff17 	ldw	r2,-4(fp)
 2014f2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2014f30:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2014f34:	e037883a 	mov	sp,fp
 2014f38:	df000017 	ldw	fp,0(sp)
 2014f3c:	dec00104 	addi	sp,sp,4
 2014f40:	f800283a 	ret

02014f44 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 2014f44:	deffef04 	addi	sp,sp,-68
 2014f48:	dfc01015 	stw	ra,64(sp)
 2014f4c:	df000f15 	stw	fp,60(sp)
 2014f50:	df000f04 	addi	fp,sp,60
 2014f54:	e13ffc15 	stw	r4,-16(fp)
 2014f58:	2807883a 	mov	r3,r5
 2014f5c:	3005883a 	mov	r2,r6
 2014f60:	e1ffff15 	stw	r7,-4(fp)
 2014f64:	e0fffd0d 	sth	r3,-12(fp)
 2014f68:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 2014f6c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2014f70:	e0bfff17 	ldw	r2,-4(fp)
 2014f74:	1000021e 	bne	r2,zero,2014f80 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 2014f78:	0005883a 	mov	r2,zero
 2014f7c:	0000d106 	br	20152c4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2014f80:	e0bffc17 	ldw	r2,-16(fp)
 2014f84:	1000051e 	bne	r2,zero,2014f9c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2014f88:	e0bfff17 	ldw	r2,-4(fp)
 2014f8c:	00c01b84 	movi	r3,110
 2014f90:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2014f94:	0005883a 	mov	r2,zero
 2014f98:	0000ca06 	br	20152c4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2014f9c:	e0bffc17 	ldw	r2,-16(fp)
 2014fa0:	10800003 	ldbu	r2,0(r2)
 2014fa4:	10803fcc 	andi	r2,r2,255
 2014fa8:	10800160 	cmpeqi	r2,r2,5
 2014fac:	1000051e 	bne	r2,zero,2014fc4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2014fb0:	e0bfff17 	ldw	r2,-4(fp)
 2014fb4:	00c00044 	movi	r3,1
 2014fb8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2014fbc:	0005883a 	mov	r2,zero
 2014fc0:	0000c006 	br	20152c4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014fc4:	0005303a 	rdctl	r2,status
 2014fc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014fcc:	e0fffb17 	ldw	r3,-20(fp)
 2014fd0:	00bfff84 	movi	r2,-2
 2014fd4:	1884703a 	and	r2,r3,r2
 2014fd8:	1001703a 	wrctl	status,r2
  
  return context;
 2014fdc:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2014fe0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 2014fe4:	e0bffe03 	ldbu	r2,-8(fp)
 2014fe8:	10000326 	beq	r2,zero,2014ff8 <OSFlagPost+0xb4>
 2014fec:	10800060 	cmpeqi	r2,r2,1
 2014ff0:	10000b1e 	bne	r2,zero,2015020 <OSFlagPost+0xdc>
 2014ff4:	00001206 	br	2015040 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2014ff8:	e0bffc17 	ldw	r2,-16(fp)
 2014ffc:	1080020b 	ldhu	r2,8(r2)
 2015000:	1007883a 	mov	r3,r2
 2015004:	e0bffd0b 	ldhu	r2,-12(fp)
 2015008:	0084303a 	nor	r2,zero,r2
 201500c:	1884703a 	and	r2,r3,r2
 2015010:	1007883a 	mov	r3,r2
 2015014:	e0bffc17 	ldw	r2,-16(fp)
 2015018:	10c0020d 	sth	r3,8(r2)
             break;
 201501c:	00001106 	br	2015064 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2015020:	e0bffc17 	ldw	r2,-16(fp)
 2015024:	10c0020b 	ldhu	r3,8(r2)
 2015028:	e0bffd0b 	ldhu	r2,-12(fp)
 201502c:	1884b03a 	or	r2,r3,r2
 2015030:	1007883a 	mov	r3,r2
 2015034:	e0bffc17 	ldw	r2,-16(fp)
 2015038:	10c0020d 	sth	r3,8(r2)
             break;
 201503c:	00000906 	br	2015064 <OSFlagPost+0x120>
 2015040:	e0bff317 	ldw	r2,-52(fp)
 2015044:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015048:	e0bff417 	ldw	r2,-48(fp)
 201504c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2015050:	e0bfff17 	ldw	r2,-4(fp)
 2015054:	00c01c44 	movi	r3,113
 2015058:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 201505c:	0005883a 	mov	r2,zero
 2015060:	00009806 	br	20152c4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2015064:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2015068:	e0bffc17 	ldw	r2,-16(fp)
 201506c:	10800117 	ldw	r2,4(r2)
 2015070:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2015074:	00007706 	br	2015254 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 2015078:	e0bff117 	ldw	r2,-60(fp)
 201507c:	10800483 	ldbu	r2,18(r2)
 2015080:	10803fcc 	andi	r2,r2,255
 2015084:	10c00060 	cmpeqi	r3,r2,1
 2015088:	18004a1e 	bne	r3,zero,20151b4 <OSFlagPost+0x270>
 201508c:	10c00088 	cmpgei	r3,r2,2
 2015090:	1800021e 	bne	r3,zero,201509c <OSFlagPost+0x158>
 2015094:	10002f26 	beq	r2,zero,2015154 <OSFlagPost+0x210>
 2015098:	00005b06 	br	2015208 <OSFlagPost+0x2c4>
 201509c:	10c000a0 	cmpeqi	r3,r2,2
 20150a0:	1800031e 	bne	r3,zero,20150b0 <OSFlagPost+0x16c>
 20150a4:	108000e0 	cmpeqi	r2,r2,3
 20150a8:	1000171e 	bne	r2,zero,2015108 <OSFlagPost+0x1c4>
 20150ac:	00005606 	br	2015208 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20150b0:	e0bffc17 	ldw	r2,-16(fp)
 20150b4:	10c0020b 	ldhu	r3,8(r2)
 20150b8:	e0bff117 	ldw	r2,-60(fp)
 20150bc:	1080040b 	ldhu	r2,16(r2)
 20150c0:	1884703a 	and	r2,r3,r2
 20150c4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 20150c8:	e0bff117 	ldw	r2,-60(fp)
 20150cc:	1080040b 	ldhu	r2,16(r2)
 20150d0:	10ffffcc 	andi	r3,r2,65535
 20150d4:	e0bff60b 	ldhu	r2,-40(fp)
 20150d8:	1880541e 	bne	r3,r2,201522c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 20150dc:	e0bff60b 	ldhu	r2,-40(fp)
 20150e0:	100b883a 	mov	r5,r2
 20150e4:	e13ff117 	ldw	r4,-60(fp)
 20150e8:	20155dc0 	call	20155dc <OS_FlagTaskRdy>
 20150ec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 20150f0:	e0bff683 	ldbu	r2,-38(fp)
 20150f4:	10800058 	cmpnei	r2,r2,1
 20150f8:	10004c1e 	bne	r2,zero,201522c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20150fc:	00800044 	movi	r2,1
 2015100:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2015104:	00004906 	br	201522c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2015108:	e0bffc17 	ldw	r2,-16(fp)
 201510c:	10c0020b 	ldhu	r3,8(r2)
 2015110:	e0bff117 	ldw	r2,-60(fp)
 2015114:	1080040b 	ldhu	r2,16(r2)
 2015118:	1884703a 	and	r2,r3,r2
 201511c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2015120:	e0bff60b 	ldhu	r2,-40(fp)
 2015124:	10004326 	beq	r2,zero,2015234 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2015128:	e0bff60b 	ldhu	r2,-40(fp)
 201512c:	100b883a 	mov	r5,r2
 2015130:	e13ff117 	ldw	r4,-60(fp)
 2015134:	20155dc0 	call	20155dc <OS_FlagTaskRdy>
 2015138:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201513c:	e0bff683 	ldbu	r2,-38(fp)
 2015140:	10800058 	cmpnei	r2,r2,1
 2015144:	10003b1e 	bne	r2,zero,2015234 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2015148:	00800044 	movi	r2,1
 201514c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2015150:	00003806 	br	2015234 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2015154:	e0bffc17 	ldw	r2,-16(fp)
 2015158:	1080020b 	ldhu	r2,8(r2)
 201515c:	0084303a 	nor	r2,zero,r2
 2015160:	1007883a 	mov	r3,r2
 2015164:	e0bff117 	ldw	r2,-60(fp)
 2015168:	1080040b 	ldhu	r2,16(r2)
 201516c:	1884703a 	and	r2,r3,r2
 2015170:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2015174:	e0bff117 	ldw	r2,-60(fp)
 2015178:	1080040b 	ldhu	r2,16(r2)
 201517c:	10ffffcc 	andi	r3,r2,65535
 2015180:	e0bff60b 	ldhu	r2,-40(fp)
 2015184:	18802d1e 	bne	r3,r2,201523c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2015188:	e0bff60b 	ldhu	r2,-40(fp)
 201518c:	100b883a 	mov	r5,r2
 2015190:	e13ff117 	ldw	r4,-60(fp)
 2015194:	20155dc0 	call	20155dc <OS_FlagTaskRdy>
 2015198:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201519c:	e0bff683 	ldbu	r2,-38(fp)
 20151a0:	10800058 	cmpnei	r2,r2,1
 20151a4:	1000251e 	bne	r2,zero,201523c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20151a8:	00800044 	movi	r2,1
 20151ac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 20151b0:	00002206 	br	201523c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20151b4:	e0bffc17 	ldw	r2,-16(fp)
 20151b8:	1080020b 	ldhu	r2,8(r2)
 20151bc:	0084303a 	nor	r2,zero,r2
 20151c0:	1007883a 	mov	r3,r2
 20151c4:	e0bff117 	ldw	r2,-60(fp)
 20151c8:	1080040b 	ldhu	r2,16(r2)
 20151cc:	1884703a 	and	r2,r3,r2
 20151d0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 20151d4:	e0bff60b 	ldhu	r2,-40(fp)
 20151d8:	10001a26 	beq	r2,zero,2015244 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 20151dc:	e0bff60b 	ldhu	r2,-40(fp)
 20151e0:	100b883a 	mov	r5,r2
 20151e4:	e13ff117 	ldw	r4,-60(fp)
 20151e8:	20155dc0 	call	20155dc <OS_FlagTaskRdy>
 20151ec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 20151f0:	e0bff683 	ldbu	r2,-38(fp)
 20151f4:	10800058 	cmpnei	r2,r2,1
 20151f8:	1000121e 	bne	r2,zero,2015244 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20151fc:	00800044 	movi	r2,1
 2015200:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2015204:	00000f06 	br	2015244 <OSFlagPost+0x300>
 2015208:	e0bff317 	ldw	r2,-52(fp)
 201520c:	e0bff515 	stw	r2,-44(fp)
 2015210:	e0bff517 	ldw	r2,-44(fp)
 2015214:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2015218:	e0bfff17 	ldw	r2,-4(fp)
 201521c:	00c01bc4 	movi	r3,111
 2015220:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2015224:	0005883a 	mov	r2,zero
 2015228:	00002606 	br	20152c4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201522c:	0001883a 	nop
 2015230:	00000506 	br	2015248 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2015234:	0001883a 	nop
 2015238:	00000306 	br	2015248 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201523c:	0001883a 	nop
 2015240:	00000106 	br	2015248 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2015244:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 2015248:	e0bff117 	ldw	r2,-60(fp)
 201524c:	10800017 	ldw	r2,0(r2)
 2015250:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2015254:	e0bff117 	ldw	r2,-60(fp)
 2015258:	103f871e 	bne	r2,zero,2015078 <OSFlagPost+0x134>
 201525c:	e0bff317 	ldw	r2,-52(fp)
 2015260:	e0bff715 	stw	r2,-36(fp)
 2015264:	e0bff717 	ldw	r2,-36(fp)
 2015268:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 201526c:	e0bff203 	ldbu	r2,-56(fp)
 2015270:	10800058 	cmpnei	r2,r2,1
 2015274:	1000011e 	bne	r2,zero,201527c <OSFlagPost+0x338>
        OS_Sched();
 2015278:	20137fc0 	call	20137fc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201527c:	0005303a 	rdctl	r2,status
 2015280:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015284:	e0fffa17 	ldw	r3,-24(fp)
 2015288:	00bfff84 	movi	r2,-2
 201528c:	1884703a 	and	r2,r3,r2
 2015290:	1001703a 	wrctl	status,r2
  
  return context;
 2015294:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2015298:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 201529c:	e0bffc17 	ldw	r2,-16(fp)
 20152a0:	1080020b 	ldhu	r2,8(r2)
 20152a4:	e0bff90d 	sth	r2,-28(fp)
 20152a8:	e0bff317 	ldw	r2,-52(fp)
 20152ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20152b0:	e0bff817 	ldw	r2,-32(fp)
 20152b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 20152b8:	e0bfff17 	ldw	r2,-4(fp)
 20152bc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 20152c0:	e0bff90b 	ldhu	r2,-28(fp)
}
 20152c4:	e037883a 	mov	sp,fp
 20152c8:	dfc00117 	ldw	ra,4(sp)
 20152cc:	df000017 	ldw	fp,0(sp)
 20152d0:	dec00204 	addi	sp,sp,8
 20152d4:	f800283a 	ret

020152d8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 20152d8:	defff904 	addi	sp,sp,-28
 20152dc:	df000615 	stw	fp,24(sp)
 20152e0:	df000604 	addi	fp,sp,24
 20152e4:	e13ffe15 	stw	r4,-8(fp)
 20152e8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 20152ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 20152f0:	e0bfff17 	ldw	r2,-4(fp)
 20152f4:	1000021e 	bne	r2,zero,2015300 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 20152f8:	0005883a 	mov	r2,zero
 20152fc:	00002306 	br	201538c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2015300:	e0bffe17 	ldw	r2,-8(fp)
 2015304:	1000051e 	bne	r2,zero,201531c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2015308:	e0bfff17 	ldw	r2,-4(fp)
 201530c:	00c01b84 	movi	r3,110
 2015310:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2015314:	0005883a 	mov	r2,zero
 2015318:	00001c06 	br	201538c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 201531c:	e0bffe17 	ldw	r2,-8(fp)
 2015320:	10800003 	ldbu	r2,0(r2)
 2015324:	10803fcc 	andi	r2,r2,255
 2015328:	10800160 	cmpeqi	r2,r2,5
 201532c:	1000051e 	bne	r2,zero,2015344 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2015330:	e0bfff17 	ldw	r2,-4(fp)
 2015334:	00c00044 	movi	r3,1
 2015338:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201533c:	0005883a 	mov	r2,zero
 2015340:	00001206 	br	201538c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015344:	0005303a 	rdctl	r2,status
 2015348:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201534c:	e0fffc17 	ldw	r3,-16(fp)
 2015350:	00bfff84 	movi	r2,-2
 2015354:	1884703a 	and	r2,r3,r2
 2015358:	1001703a 	wrctl	status,r2
  
  return context;
 201535c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015360:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 2015364:	e0bffe17 	ldw	r2,-8(fp)
 2015368:	1080020b 	ldhu	r2,8(r2)
 201536c:	e0bffb0d 	sth	r2,-20(fp)
 2015370:	e0bffa17 	ldw	r2,-24(fp)
 2015374:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015378:	e0bffd17 	ldw	r2,-12(fp)
 201537c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2015380:	e0bfff17 	ldw	r2,-4(fp)
 2015384:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 2015388:	e0bffb0b 	ldhu	r2,-20(fp)
}
 201538c:	e037883a 	mov	sp,fp
 2015390:	df000017 	ldw	fp,0(sp)
 2015394:	dec00104 	addi	sp,sp,4
 2015398:	f800283a 	ret

0201539c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 201539c:	defff804 	addi	sp,sp,-32
 20153a0:	df000715 	stw	fp,28(sp)
 20153a4:	df000704 	addi	fp,sp,28
 20153a8:	e13ffb15 	stw	r4,-20(fp)
 20153ac:	e17ffc15 	stw	r5,-16(fp)
 20153b0:	3009883a 	mov	r4,r6
 20153b4:	3807883a 	mov	r3,r7
 20153b8:	e0800117 	ldw	r2,4(fp)
 20153bc:	e13ffd0d 	sth	r4,-12(fp)
 20153c0:	e0fffe05 	stb	r3,-8(fp)
 20153c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 20153c8:	d0a73a17 	ldw	r2,-25368(gp)
 20153cc:	d0e73a17 	ldw	r3,-25368(gp)
 20153d0:	18c00c03 	ldbu	r3,48(r3)
 20153d4:	18c00814 	ori	r3,r3,32
 20153d8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 20153dc:	d0a73a17 	ldw	r2,-25368(gp)
 20153e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 20153e4:	d0a73a17 	ldw	r2,-25368(gp)
 20153e8:	e0ffff0b 	ldhu	r3,-4(fp)
 20153ec:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 20153f0:	d0a73a17 	ldw	r2,-25368(gp)
 20153f4:	e0fffc17 	ldw	r3,-16(fp)
 20153f8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 20153fc:	e0bffc17 	ldw	r2,-16(fp)
 2015400:	e0fffd0b 	ldhu	r3,-12(fp)
 2015404:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2015408:	e0bffc17 	ldw	r2,-16(fp)
 201540c:	e0fffe03 	ldbu	r3,-8(fp)
 2015410:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 2015414:	d0e73a17 	ldw	r3,-25368(gp)
 2015418:	e0bffc17 	ldw	r2,-16(fp)
 201541c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2015420:	e0bffb17 	ldw	r2,-20(fp)
 2015424:	10c00117 	ldw	r3,4(r2)
 2015428:	e0bffc17 	ldw	r2,-16(fp)
 201542c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2015430:	e0bffc17 	ldw	r2,-16(fp)
 2015434:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 2015438:	e0bffc17 	ldw	r2,-16(fp)
 201543c:	e0fffb17 	ldw	r3,-20(fp)
 2015440:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2015444:	e0bffb17 	ldw	r2,-20(fp)
 2015448:	10800117 	ldw	r2,4(r2)
 201544c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 2015450:	e0bff917 	ldw	r2,-28(fp)
 2015454:	10000326 	beq	r2,zero,2015464 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 2015458:	e0bff917 	ldw	r2,-28(fp)
 201545c:	e0fffc17 	ldw	r3,-16(fp)
 2015460:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 2015464:	e0bffb17 	ldw	r2,-20(fp)
 2015468:	e0fffc17 	ldw	r3,-16(fp)
 201546c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 2015470:	d0a73a17 	ldw	r2,-25368(gp)
 2015474:	10800d03 	ldbu	r2,52(r2)
 2015478:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201547c:	e0fffa03 	ldbu	r3,-24(fp)
 2015480:	e13ffa03 	ldbu	r4,-24(fp)
 2015484:	d0a73744 	addi	r2,gp,-25379
 2015488:	2085883a 	add	r2,r4,r2
 201548c:	10800003 	ldbu	r2,0(r2)
 2015490:	1009883a 	mov	r4,r2
 2015494:	d0a73a17 	ldw	r2,-25368(gp)
 2015498:	10800d43 	ldbu	r2,53(r2)
 201549c:	0084303a 	nor	r2,zero,r2
 20154a0:	2084703a 	and	r2,r4,r2
 20154a4:	1009883a 	mov	r4,r2
 20154a8:	d0a73744 	addi	r2,gp,-25379
 20154ac:	1885883a 	add	r2,r3,r2
 20154b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 20154b4:	e0fffa03 	ldbu	r3,-24(fp)
 20154b8:	d0a73744 	addi	r2,gp,-25379
 20154bc:	1885883a 	add	r2,r3,r2
 20154c0:	10800003 	ldbu	r2,0(r2)
 20154c4:	10803fcc 	andi	r2,r2,255
 20154c8:	1000071e 	bne	r2,zero,20154e8 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 20154cc:	d0a73a17 	ldw	r2,-25368(gp)
 20154d0:	10800d83 	ldbu	r2,54(r2)
 20154d4:	0084303a 	nor	r2,zero,r2
 20154d8:	1007883a 	mov	r3,r2
 20154dc:	d0a73703 	ldbu	r2,-25380(gp)
 20154e0:	1884703a 	and	r2,r3,r2
 20154e4:	d0a73705 	stb	r2,-25380(gp)
    }
}
 20154e8:	0001883a 	nop
 20154ec:	e037883a 	mov	sp,fp
 20154f0:	df000017 	ldw	fp,0(sp)
 20154f4:	dec00104 	addi	sp,sp,4
 20154f8:	f800283a 	ret

020154fc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 20154fc:	defffb04 	addi	sp,sp,-20
 2015500:	dfc00415 	stw	ra,16(sp)
 2015504:	df000315 	stw	fp,12(sp)
 2015508:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 201550c:	0140dc04 	movi	r5,880
 2015510:	010080b4 	movhi	r4,514
 2015514:	21113104 	addi	r4,r4,17604
 2015518:	20137400 	call	2013740 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 201551c:	008080b4 	movhi	r2,514
 2015520:	10913104 	addi	r2,r2,17604
 2015524:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 2015528:	008080b4 	movhi	r2,514
 201552c:	10913c04 	addi	r2,r2,17648
 2015530:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2015534:	e03ffd0d 	sth	zero,-12(fp)
 2015538:	00001306 	br	2015588 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201553c:	e0bffe17 	ldw	r2,-8(fp)
 2015540:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 2015544:	e0bffe17 	ldw	r2,-8(fp)
 2015548:	e0ffff17 	ldw	r3,-4(fp)
 201554c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 2015550:	e0bffe17 	ldw	r2,-8(fp)
 2015554:	00c00fc4 	movi	r3,63
 2015558:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201555c:	e0bffe17 	ldw	r2,-8(fp)
 2015560:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 2015564:	e0bffe17 	ldw	r2,-8(fp)
 2015568:	10800b04 	addi	r2,r2,44
 201556c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2015570:	e0bfff17 	ldw	r2,-4(fp)
 2015574:	10800b04 	addi	r2,r2,44
 2015578:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201557c:	e0bffd0b 	ldhu	r2,-12(fp)
 2015580:	10800044 	addi	r2,r2,1
 2015584:	e0bffd0d 	sth	r2,-12(fp)
 2015588:	e0bffd0b 	ldhu	r2,-12(fp)
 201558c:	108004f0 	cmpltui	r2,r2,19
 2015590:	103fea1e 	bne	r2,zero,201553c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2015594:	e0bffe17 	ldw	r2,-8(fp)
 2015598:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 201559c:	e0bffe17 	ldw	r2,-8(fp)
 20155a0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 20155a4:	e0bffe17 	ldw	r2,-8(fp)
 20155a8:	00c00fc4 	movi	r3,63
 20155ac:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 20155b0:	e0bffe17 	ldw	r2,-8(fp)
 20155b4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 20155b8:	008080b4 	movhi	r2,514
 20155bc:	10913104 	addi	r2,r2,17604
 20155c0:	d0a73c15 	stw	r2,-25360(gp)
#endif
}
 20155c4:	0001883a 	nop
 20155c8:	e037883a 	mov	sp,fp
 20155cc:	dfc00117 	ldw	ra,4(sp)
 20155d0:	df000017 	ldw	fp,0(sp)
 20155d4:	dec00204 	addi	sp,sp,8
 20155d8:	f800283a 	ret

020155dc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 20155dc:	defffa04 	addi	sp,sp,-24
 20155e0:	dfc00515 	stw	ra,20(sp)
 20155e4:	df000415 	stw	fp,16(sp)
 20155e8:	df000404 	addi	fp,sp,16
 20155ec:	e13ffe15 	stw	r4,-8(fp)
 20155f0:	2805883a 	mov	r2,r5
 20155f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 20155f8:	e0bffe17 	ldw	r2,-8(fp)
 20155fc:	10800217 	ldw	r2,8(r2)
 2015600:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 2015604:	e0bffd17 	ldw	r2,-12(fp)
 2015608:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 201560c:	e0bffd17 	ldw	r2,-12(fp)
 2015610:	e0ffff0b 	ldhu	r3,-4(fp)
 2015614:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 2015618:	e0bffd17 	ldw	r2,-12(fp)
 201561c:	10c00c03 	ldbu	r3,48(r2)
 2015620:	00bff7c4 	movi	r2,-33
 2015624:	1884703a 	and	r2,r3,r2
 2015628:	1007883a 	mov	r3,r2
 201562c:	e0bffd17 	ldw	r2,-12(fp)
 2015630:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 2015634:	e0bffd17 	ldw	r2,-12(fp)
 2015638:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 201563c:	e0bffd17 	ldw	r2,-12(fp)
 2015640:	10800c03 	ldbu	r2,48(r2)
 2015644:	10803fcc 	andi	r2,r2,255
 2015648:	1000181e 	bne	r2,zero,20156ac <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 201564c:	e0bffd17 	ldw	r2,-12(fp)
 2015650:	10c00d83 	ldbu	r3,54(r2)
 2015654:	d0a73703 	ldbu	r2,-25380(gp)
 2015658:	1884b03a 	or	r2,r3,r2
 201565c:	d0a73705 	stb	r2,-25380(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2015660:	e0bffd17 	ldw	r2,-12(fp)
 2015664:	10800d03 	ldbu	r2,52(r2)
 2015668:	10c03fcc 	andi	r3,r2,255
 201566c:	e0bffd17 	ldw	r2,-12(fp)
 2015670:	10800d03 	ldbu	r2,52(r2)
 2015674:	11003fcc 	andi	r4,r2,255
 2015678:	d0a73744 	addi	r2,gp,-25379
 201567c:	2085883a 	add	r2,r4,r2
 2015680:	11000003 	ldbu	r4,0(r2)
 2015684:	e0bffd17 	ldw	r2,-12(fp)
 2015688:	10800d43 	ldbu	r2,53(r2)
 201568c:	2084b03a 	or	r2,r4,r2
 2015690:	1009883a 	mov	r4,r2
 2015694:	d0a73744 	addi	r2,gp,-25379
 2015698:	1885883a 	add	r2,r3,r2
 201569c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 20156a0:	00800044 	movi	r2,1
 20156a4:	e0bffc05 	stb	r2,-16(fp)
 20156a8:	00000106 	br	20156b0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 20156ac:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 20156b0:	e13ffe17 	ldw	r4,-8(fp)
 20156b4:	20156d00 	call	20156d0 <OS_FlagUnlink>
    return (sched);
 20156b8:	e0bffc03 	ldbu	r2,-16(fp)
}
 20156bc:	e037883a 	mov	sp,fp
 20156c0:	dfc00117 	ldw	ra,4(sp)
 20156c4:	df000017 	ldw	fp,0(sp)
 20156c8:	dec00204 	addi	sp,sp,8
 20156cc:	f800283a 	ret

020156d0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 20156d0:	defffa04 	addi	sp,sp,-24
 20156d4:	df000515 	stw	fp,20(sp)
 20156d8:	df000504 	addi	fp,sp,20
 20156dc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 20156e0:	e0bfff17 	ldw	r2,-4(fp)
 20156e4:	10800117 	ldw	r2,4(r2)
 20156e8:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 20156ec:	e0bfff17 	ldw	r2,-4(fp)
 20156f0:	10800017 	ldw	r2,0(r2)
 20156f4:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 20156f8:	e0bffb17 	ldw	r2,-20(fp)
 20156fc:	10000b1e 	bne	r2,zero,201572c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2015700:	e0bfff17 	ldw	r2,-4(fp)
 2015704:	10800317 	ldw	r2,12(r2)
 2015708:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 201570c:	e0bffd17 	ldw	r2,-12(fp)
 2015710:	e0fffc17 	ldw	r3,-16(fp)
 2015714:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 2015718:	e0bffc17 	ldw	r2,-16(fp)
 201571c:	10000b26 	beq	r2,zero,201574c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 2015720:	e0bffc17 	ldw	r2,-16(fp)
 2015724:	10000115 	stw	zero,4(r2)
 2015728:	00000806 	br	201574c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 201572c:	e0bffb17 	ldw	r2,-20(fp)
 2015730:	e0fffc17 	ldw	r3,-16(fp)
 2015734:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 2015738:	e0bffc17 	ldw	r2,-16(fp)
 201573c:	10000326 	beq	r2,zero,201574c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 2015740:	e0bffc17 	ldw	r2,-16(fp)
 2015744:	e0fffb17 	ldw	r3,-20(fp)
 2015748:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 201574c:	e0bfff17 	ldw	r2,-4(fp)
 2015750:	10800217 	ldw	r2,8(r2)
 2015754:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 2015758:	e0bffe17 	ldw	r2,-8(fp)
 201575c:	10000a15 	stw	zero,40(r2)
#endif
}
 2015760:	0001883a 	nop
 2015764:	e037883a 	mov	sp,fp
 2015768:	df000017 	ldw	fp,0(sp)
 201576c:	dec00104 	addi	sp,sp,4
 2015770:	f800283a 	ret

02015774 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 2015774:	defffa04 	addi	sp,sp,-24
 2015778:	df000515 	stw	fp,20(sp)
 201577c:	df000504 	addi	fp,sp,20
 2015780:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 2015784:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 2015788:	e0bfff17 	ldw	r2,-4(fp)
 201578c:	1000021e 	bne	r2,zero,2015798 <OSMboxAccept+0x24>
        return ((void *)0);
 2015790:	0005883a 	mov	r2,zero
 2015794:	00001906 	br	20157fc <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 2015798:	e0bfff17 	ldw	r2,-4(fp)
 201579c:	10800003 	ldbu	r2,0(r2)
 20157a0:	10803fcc 	andi	r2,r2,255
 20157a4:	10800060 	cmpeqi	r2,r2,1
 20157a8:	1000021e 	bne	r2,zero,20157b4 <OSMboxAccept+0x40>
        return ((void *)0);
 20157ac:	0005883a 	mov	r2,zero
 20157b0:	00001206 	br	20157fc <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20157b4:	0005303a 	rdctl	r2,status
 20157b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20157bc:	e0fffd17 	ldw	r3,-12(fp)
 20157c0:	00bfff84 	movi	r2,-2
 20157c4:	1884703a 	and	r2,r3,r2
 20157c8:	1001703a 	wrctl	status,r2
  
  return context;
 20157cc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20157d0:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 20157d4:	e0bfff17 	ldw	r2,-4(fp)
 20157d8:	10800117 	ldw	r2,4(r2)
 20157dc:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 20157e0:	e0bfff17 	ldw	r2,-4(fp)
 20157e4:	10000115 	stw	zero,4(r2)
 20157e8:	e0bffb17 	ldw	r2,-20(fp)
 20157ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20157f0:	e0bffe17 	ldw	r2,-8(fp)
 20157f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 20157f8:	e0bffc17 	ldw	r2,-16(fp)
}
 20157fc:	e037883a 	mov	sp,fp
 2015800:	df000017 	ldw	fp,0(sp)
 2015804:	dec00104 	addi	sp,sp,4
 2015808:	f800283a 	ret

0201580c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 201580c:	defff904 	addi	sp,sp,-28
 2015810:	dfc00615 	stw	ra,24(sp)
 2015814:	df000515 	stw	fp,20(sp)
 2015818:	df000504 	addi	fp,sp,20
 201581c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015820:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2015824:	d0a73903 	ldbu	r2,-25372(gp)
 2015828:	10803fcc 	andi	r2,r2,255
 201582c:	10000226 	beq	r2,zero,2015838 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2015830:	0005883a 	mov	r2,zero
 2015834:	00002506 	br	20158cc <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015838:	0005303a 	rdctl	r2,status
 201583c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015840:	e0fffe17 	ldw	r3,-8(fp)
 2015844:	00bfff84 	movi	r2,-2
 2015848:	1884703a 	and	r2,r3,r2
 201584c:	1001703a 	wrctl	status,r2
  
  return context;
 2015850:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2015854:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2015858:	d0a73817 	ldw	r2,-25376(gp)
 201585c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2015860:	d0a73817 	ldw	r2,-25376(gp)
 2015864:	10000326 	beq	r2,zero,2015874 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2015868:	d0a73817 	ldw	r2,-25376(gp)
 201586c:	10800117 	ldw	r2,4(r2)
 2015870:	d0a73815 	stw	r2,-25376(gp)
 2015874:	e0bffb17 	ldw	r2,-20(fp)
 2015878:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201587c:	e0bffc17 	ldw	r2,-16(fp)
 2015880:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 2015884:	e0bffd17 	ldw	r2,-12(fp)
 2015888:	10000f26 	beq	r2,zero,20158c8 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 201588c:	e0bffd17 	ldw	r2,-12(fp)
 2015890:	00c00044 	movi	r3,1
 2015894:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 2015898:	e0bffd17 	ldw	r2,-12(fp)
 201589c:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 20158a0:	e0bffd17 	ldw	r2,-12(fp)
 20158a4:	e0ffff17 	ldw	r3,-4(fp)
 20158a8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 20158ac:	e0bffd17 	ldw	r2,-12(fp)
 20158b0:	00c00fc4 	movi	r3,63
 20158b4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 20158b8:	e0bffd17 	ldw	r2,-12(fp)
 20158bc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 20158c0:	e13ffd17 	ldw	r4,-12(fp)
 20158c4:	20133600 	call	2013360 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 20158c8:	e0bffd17 	ldw	r2,-12(fp)
}
 20158cc:	e037883a 	mov	sp,fp
 20158d0:	dfc00117 	ldw	ra,4(sp)
 20158d4:	df000017 	ldw	fp,0(sp)
 20158d8:	dec00204 	addi	sp,sp,8
 20158dc:	f800283a 	ret

020158e0 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20158e0:	defff304 	addi	sp,sp,-52
 20158e4:	dfc00c15 	stw	ra,48(sp)
 20158e8:	df000b15 	stw	fp,44(sp)
 20158ec:	df000b04 	addi	fp,sp,44
 20158f0:	e13ffd15 	stw	r4,-12(fp)
 20158f4:	2805883a 	mov	r2,r5
 20158f8:	e1bfff15 	stw	r6,-4(fp)
 20158fc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015900:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2015904:	e0bfff17 	ldw	r2,-4(fp)
 2015908:	1000021e 	bne	r2,zero,2015914 <OSMboxDel+0x34>
        return (pevent);
 201590c:	e0bffd17 	ldw	r2,-12(fp)
 2015910:	00007e06 	br	2015b0c <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2015914:	e0bffd17 	ldw	r2,-12(fp)
 2015918:	1000051e 	bne	r2,zero,2015930 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201591c:	e0bfff17 	ldw	r2,-4(fp)
 2015920:	00c00104 	movi	r3,4
 2015924:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2015928:	e0bffd17 	ldw	r2,-12(fp)
 201592c:	00007706 	br	2015b0c <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2015930:	e0bffd17 	ldw	r2,-12(fp)
 2015934:	10800003 	ldbu	r2,0(r2)
 2015938:	10803fcc 	andi	r2,r2,255
 201593c:	10800060 	cmpeqi	r2,r2,1
 2015940:	1000051e 	bne	r2,zero,2015958 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2015944:	e0bfff17 	ldw	r2,-4(fp)
 2015948:	00c00044 	movi	r3,1
 201594c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2015950:	e0bffd17 	ldw	r2,-12(fp)
 2015954:	00006d06 	br	2015b0c <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2015958:	d0a73903 	ldbu	r2,-25372(gp)
 201595c:	10803fcc 	andi	r2,r2,255
 2015960:	10000526 	beq	r2,zero,2015978 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2015964:	e0bfff17 	ldw	r2,-4(fp)
 2015968:	00c003c4 	movi	r3,15
 201596c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2015970:	e0bffd17 	ldw	r2,-12(fp)
 2015974:	00006506 	br	2015b0c <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015978:	0005303a 	rdctl	r2,status
 201597c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015980:	e0fffc17 	ldw	r3,-16(fp)
 2015984:	00bfff84 	movi	r2,-2
 2015988:	1884703a 	and	r2,r3,r2
 201598c:	1001703a 	wrctl	status,r2
  
  return context;
 2015990:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015994:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 2015998:	e0bffd17 	ldw	r2,-12(fp)
 201599c:	10800283 	ldbu	r2,10(r2)
 20159a0:	10803fcc 	andi	r2,r2,255
 20159a4:	10000326 	beq	r2,zero,20159b4 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20159a8:	00800044 	movi	r2,1
 20159ac:	e0bff505 	stb	r2,-44(fp)
 20159b0:	00000106 	br	20159b8 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20159b4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 20159b8:	e0bffe03 	ldbu	r2,-8(fp)
 20159bc:	10000326 	beq	r2,zero,20159cc <OSMboxDel+0xec>
 20159c0:	10800060 	cmpeqi	r2,r2,1
 20159c4:	1000281e 	bne	r2,zero,2015a68 <OSMboxDel+0x188>
 20159c8:	00004506 	br	2015ae0 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 20159cc:	e0bff503 	ldbu	r2,-44(fp)
 20159d0:	1000161e 	bne	r2,zero,2015a2c <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 20159d4:	e0bffd17 	ldw	r2,-12(fp)
 20159d8:	00c00fc4 	movi	r3,63
 20159dc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 20159e0:	e0bffd17 	ldw	r2,-12(fp)
 20159e4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 20159e8:	e0bffd17 	ldw	r2,-12(fp)
 20159ec:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 20159f0:	d0e73817 	ldw	r3,-25376(gp)
 20159f4:	e0bffd17 	ldw	r2,-12(fp)
 20159f8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 20159fc:	e0bffd17 	ldw	r2,-12(fp)
 2015a00:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 2015a04:	e0bffd17 	ldw	r2,-12(fp)
 2015a08:	d0a73815 	stw	r2,-25376(gp)
 2015a0c:	e0bff717 	ldw	r2,-36(fp)
 2015a10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015a14:	e0bff817 	ldw	r2,-32(fp)
 2015a18:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 2015a1c:	e0bfff17 	ldw	r2,-4(fp)
 2015a20:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 2015a24:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 2015a28:	00003706 	br	2015b08 <OSMboxDel+0x228>
 2015a2c:	e0bff717 	ldw	r2,-36(fp)
 2015a30:	e0bff915 	stw	r2,-28(fp)
 2015a34:	e0bff917 	ldw	r2,-28(fp)
 2015a38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 2015a3c:	e0bfff17 	ldw	r2,-4(fp)
 2015a40:	00c01244 	movi	r3,73
 2015a44:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 2015a48:	e0bffd17 	ldw	r2,-12(fp)
 2015a4c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2015a50:	00002d06 	br	2015b08 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2015a54:	000f883a 	mov	r7,zero
 2015a58:	01800084 	movi	r6,2
 2015a5c:	000b883a 	mov	r5,zero
 2015a60:	e13ffd17 	ldw	r4,-12(fp)
 2015a64:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 2015a68:	e0bffd17 	ldw	r2,-12(fp)
 2015a6c:	10800283 	ldbu	r2,10(r2)
 2015a70:	10803fcc 	andi	r2,r2,255
 2015a74:	103ff71e 	bne	r2,zero,2015a54 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2015a78:	e0bffd17 	ldw	r2,-12(fp)
 2015a7c:	00c00fc4 	movi	r3,63
 2015a80:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2015a84:	e0bffd17 	ldw	r2,-12(fp)
 2015a88:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2015a8c:	e0bffd17 	ldw	r2,-12(fp)
 2015a90:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2015a94:	d0e73817 	ldw	r3,-25376(gp)
 2015a98:	e0bffd17 	ldw	r2,-12(fp)
 2015a9c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2015aa0:	e0bffd17 	ldw	r2,-12(fp)
 2015aa4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2015aa8:	e0bffd17 	ldw	r2,-12(fp)
 2015aac:	d0a73815 	stw	r2,-25376(gp)
 2015ab0:	e0bff717 	ldw	r2,-36(fp)
 2015ab4:	e0bffa15 	stw	r2,-24(fp)
 2015ab8:	e0bffa17 	ldw	r2,-24(fp)
 2015abc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2015ac0:	e0bff503 	ldbu	r2,-44(fp)
 2015ac4:	10800058 	cmpnei	r2,r2,1
 2015ac8:	1000011e 	bne	r2,zero,2015ad0 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2015acc:	20137fc0 	call	20137fc <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 2015ad0:	e0bfff17 	ldw	r2,-4(fp)
 2015ad4:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 2015ad8:	e03ff615 	stw	zero,-40(fp)
             break;
 2015adc:	00000a06 	br	2015b08 <OSMboxDel+0x228>
 2015ae0:	e0bff717 	ldw	r2,-36(fp)
 2015ae4:	e0bffb15 	stw	r2,-20(fp)
 2015ae8:	e0bffb17 	ldw	r2,-20(fp)
 2015aec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 2015af0:	e0bfff17 	ldw	r2,-4(fp)
 2015af4:	00c001c4 	movi	r3,7
 2015af8:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 2015afc:	e0bffd17 	ldw	r2,-12(fp)
 2015b00:	e0bff615 	stw	r2,-40(fp)
             break;
 2015b04:	0001883a 	nop
    }
    return (pevent_return);
 2015b08:	e0bff617 	ldw	r2,-40(fp)
}
 2015b0c:	e037883a 	mov	sp,fp
 2015b10:	dfc00117 	ldw	ra,4(sp)
 2015b14:	df000017 	ldw	fp,0(sp)
 2015b18:	dec00204 	addi	sp,sp,8
 2015b1c:	f800283a 	ret

02015b20 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2015b20:	defff404 	addi	sp,sp,-48
 2015b24:	dfc00b15 	stw	ra,44(sp)
 2015b28:	df000a15 	stw	fp,40(sp)
 2015b2c:	df000a04 	addi	fp,sp,40
 2015b30:	e13ffd15 	stw	r4,-12(fp)
 2015b34:	2805883a 	mov	r2,r5
 2015b38:	e1bfff15 	stw	r6,-4(fp)
 2015b3c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015b40:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2015b44:	e0bfff17 	ldw	r2,-4(fp)
 2015b48:	1000021e 	bne	r2,zero,2015b54 <OSMboxPend+0x34>
        return ((void *)0);
 2015b4c:	0005883a 	mov	r2,zero
 2015b50:	00007b06 	br	2015d40 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015b54:	e0bffd17 	ldw	r2,-12(fp)
 2015b58:	1000051e 	bne	r2,zero,2015b70 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2015b5c:	e0bfff17 	ldw	r2,-4(fp)
 2015b60:	00c00104 	movi	r3,4
 2015b64:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015b68:	0005883a 	mov	r2,zero
 2015b6c:	00007406 	br	2015d40 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2015b70:	e0bffd17 	ldw	r2,-12(fp)
 2015b74:	10800003 	ldbu	r2,0(r2)
 2015b78:	10803fcc 	andi	r2,r2,255
 2015b7c:	10800060 	cmpeqi	r2,r2,1
 2015b80:	1000051e 	bne	r2,zero,2015b98 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2015b84:	e0bfff17 	ldw	r2,-4(fp)
 2015b88:	00c00044 	movi	r3,1
 2015b8c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015b90:	0005883a 	mov	r2,zero
 2015b94:	00006a06 	br	2015d40 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2015b98:	d0a73903 	ldbu	r2,-25372(gp)
 2015b9c:	10803fcc 	andi	r2,r2,255
 2015ba0:	10000526 	beq	r2,zero,2015bb8 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2015ba4:	e0bfff17 	ldw	r2,-4(fp)
 2015ba8:	00c00084 	movi	r3,2
 2015bac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015bb0:	0005883a 	mov	r2,zero
 2015bb4:	00006206 	br	2015d40 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2015bb8:	d0a72b03 	ldbu	r2,-25428(gp)
 2015bbc:	10803fcc 	andi	r2,r2,255
 2015bc0:	10000526 	beq	r2,zero,2015bd8 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2015bc4:	e0bfff17 	ldw	r2,-4(fp)
 2015bc8:	00c00344 	movi	r3,13
 2015bcc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2015bd0:	0005883a 	mov	r2,zero
 2015bd4:	00005a06 	br	2015d40 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015bd8:	0005303a 	rdctl	r2,status
 2015bdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015be0:	e0fffc17 	ldw	r3,-16(fp)
 2015be4:	00bfff84 	movi	r2,-2
 2015be8:	1884703a 	and	r2,r3,r2
 2015bec:	1001703a 	wrctl	status,r2
  
  return context;
 2015bf0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015bf4:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 2015bf8:	e0bffd17 	ldw	r2,-12(fp)
 2015bfc:	10800117 	ldw	r2,4(r2)
 2015c00:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 2015c04:	e0bff617 	ldw	r2,-40(fp)
 2015c08:	10000a26 	beq	r2,zero,2015c34 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 2015c0c:	e0bffd17 	ldw	r2,-12(fp)
 2015c10:	10000115 	stw	zero,4(r2)
 2015c14:	e0bff717 	ldw	r2,-36(fp)
 2015c18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015c1c:	e0bff817 	ldw	r2,-32(fp)
 2015c20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2015c24:	e0bfff17 	ldw	r2,-4(fp)
 2015c28:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 2015c2c:	e0bff617 	ldw	r2,-40(fp)
 2015c30:	00004306 	br	2015d40 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 2015c34:	d0a73a17 	ldw	r2,-25368(gp)
 2015c38:	d0e73a17 	ldw	r3,-25368(gp)
 2015c3c:	18c00c03 	ldbu	r3,48(r3)
 2015c40:	18c00094 	ori	r3,r3,2
 2015c44:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2015c48:	d0a73a17 	ldw	r2,-25368(gp)
 2015c4c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 2015c50:	d0a73a17 	ldw	r2,-25368(gp)
 2015c54:	e0fffe0b 	ldhu	r3,-8(fp)
 2015c58:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2015c5c:	e13ffd17 	ldw	r4,-12(fp)
 2015c60:	2012f480 	call	2012f48 <OS_EventTaskWait>
 2015c64:	e0bff717 	ldw	r2,-36(fp)
 2015c68:	e0bffb15 	stw	r2,-20(fp)
 2015c6c:	e0bffb17 	ldw	r2,-20(fp)
 2015c70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 2015c74:	20137fc0 	call	20137fc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015c78:	0005303a 	rdctl	r2,status
 2015c7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015c80:	e0fff917 	ldw	r3,-28(fp)
 2015c84:	00bfff84 	movi	r2,-2
 2015c88:	1884703a 	and	r2,r3,r2
 2015c8c:	1001703a 	wrctl	status,r2
  
  return context;
 2015c90:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2015c94:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2015c98:	d0a73a17 	ldw	r2,-25368(gp)
 2015c9c:	10800c43 	ldbu	r2,49(r2)
 2015ca0:	10803fcc 	andi	r2,r2,255
 2015ca4:	10000326 	beq	r2,zero,2015cb4 <OSMboxPend+0x194>
 2015ca8:	108000a0 	cmpeqi	r2,r2,2
 2015cac:	1000071e 	bne	r2,zero,2015ccc <OSMboxPend+0x1ac>
 2015cb0:	00000b06 	br	2015ce0 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 2015cb4:	d0a73a17 	ldw	r2,-25368(gp)
 2015cb8:	10800917 	ldw	r2,36(r2)
 2015cbc:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 2015cc0:	e0bfff17 	ldw	r2,-4(fp)
 2015cc4:	10000005 	stb	zero,0(r2)
             break;
 2015cc8:	00000e06 	br	2015d04 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2015ccc:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2015cd0:	e0bfff17 	ldw	r2,-4(fp)
 2015cd4:	00c00384 	movi	r3,14
 2015cd8:	10c00005 	stb	r3,0(r2)
             break;
 2015cdc:	00000906 	br	2015d04 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2015ce0:	d0a73a17 	ldw	r2,-25368(gp)
 2015ce4:	e17ffd17 	ldw	r5,-12(fp)
 2015ce8:	1009883a 	mov	r4,r2
 2015cec:	20131a80 	call	20131a8 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2015cf0:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2015cf4:	e0bfff17 	ldw	r2,-4(fp)
 2015cf8:	00c00284 	movi	r3,10
 2015cfc:	10c00005 	stb	r3,0(r2)
             break;
 2015d00:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2015d04:	d0a73a17 	ldw	r2,-25368(gp)
 2015d08:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2015d0c:	d0a73a17 	ldw	r2,-25368(gp)
 2015d10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2015d14:	d0a73a17 	ldw	r2,-25368(gp)
 2015d18:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2015d1c:	d0a73a17 	ldw	r2,-25368(gp)
 2015d20:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2015d24:	d0a73a17 	ldw	r2,-25368(gp)
 2015d28:	10000915 	stw	zero,36(r2)
 2015d2c:	e0bff717 	ldw	r2,-36(fp)
 2015d30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015d34:	e0bffa17 	ldw	r2,-24(fp)
 2015d38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2015d3c:	e0bff617 	ldw	r2,-40(fp)
}
 2015d40:	e037883a 	mov	sp,fp
 2015d44:	dfc00117 	ldw	ra,4(sp)
 2015d48:	df000017 	ldw	fp,0(sp)
 2015d4c:	dec00204 	addi	sp,sp,8
 2015d50:	f800283a 	ret

02015d54 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2015d54:	defff604 	addi	sp,sp,-40
 2015d58:	dfc00915 	stw	ra,36(sp)
 2015d5c:	df000815 	stw	fp,32(sp)
 2015d60:	df000804 	addi	fp,sp,32
 2015d64:	e13ffd15 	stw	r4,-12(fp)
 2015d68:	2805883a 	mov	r2,r5
 2015d6c:	e1bfff15 	stw	r6,-4(fp)
 2015d70:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015d74:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2015d78:	e0bfff17 	ldw	r2,-4(fp)
 2015d7c:	1000021e 	bne	r2,zero,2015d88 <OSMboxPendAbort+0x34>
        return (0);
 2015d80:	0005883a 	mov	r2,zero
 2015d84:	00004906 	br	2015eac <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2015d88:	e0bffd17 	ldw	r2,-12(fp)
 2015d8c:	1000051e 	bne	r2,zero,2015da4 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2015d90:	e0bfff17 	ldw	r2,-4(fp)
 2015d94:	00c00104 	movi	r3,4
 2015d98:	10c00005 	stb	r3,0(r2)
        return (0);
 2015d9c:	0005883a 	mov	r2,zero
 2015da0:	00004206 	br	2015eac <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2015da4:	e0bffd17 	ldw	r2,-12(fp)
 2015da8:	10800003 	ldbu	r2,0(r2)
 2015dac:	10803fcc 	andi	r2,r2,255
 2015db0:	10800060 	cmpeqi	r2,r2,1
 2015db4:	1000051e 	bne	r2,zero,2015dcc <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2015db8:	e0bfff17 	ldw	r2,-4(fp)
 2015dbc:	00c00044 	movi	r3,1
 2015dc0:	10c00005 	stb	r3,0(r2)
        return (0);
 2015dc4:	0005883a 	mov	r2,zero
 2015dc8:	00003806 	br	2015eac <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015dcc:	0005303a 	rdctl	r2,status
 2015dd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015dd4:	e0fffc17 	ldw	r3,-16(fp)
 2015dd8:	00bfff84 	movi	r2,-2
 2015ddc:	1884703a 	and	r2,r3,r2
 2015de0:	1001703a 	wrctl	status,r2
  
  return context;
 2015de4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015de8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 2015dec:	e0bffd17 	ldw	r2,-12(fp)
 2015df0:	10800283 	ldbu	r2,10(r2)
 2015df4:	10803fcc 	andi	r2,r2,255
 2015df8:	10002526 	beq	r2,zero,2015e90 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 2015dfc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2015e00:	e0bffe03 	ldbu	r2,-8(fp)
 2015e04:	10800060 	cmpeqi	r2,r2,1
 2015e08:	10000e26 	beq	r2,zero,2015e44 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2015e0c:	00000806 	br	2015e30 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2015e10:	01c00084 	movi	r7,2
 2015e14:	01800084 	movi	r6,2
 2015e18:	000b883a 	mov	r5,zero
 2015e1c:	e13ffd17 	ldw	r4,-12(fp)
 2015e20:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                     nbr_tasks++;
 2015e24:	e0bff803 	ldbu	r2,-32(fp)
 2015e28:	10800044 	addi	r2,r2,1
 2015e2c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2015e30:	e0bffd17 	ldw	r2,-12(fp)
 2015e34:	10800283 	ldbu	r2,10(r2)
 2015e38:	10803fcc 	andi	r2,r2,255
 2015e3c:	103ff41e 	bne	r2,zero,2015e10 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2015e40:	00000906 	br	2015e68 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2015e44:	01c00084 	movi	r7,2
 2015e48:	01800084 	movi	r6,2
 2015e4c:	000b883a 	mov	r5,zero
 2015e50:	e13ffd17 	ldw	r4,-12(fp)
 2015e54:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                 nbr_tasks++;
 2015e58:	e0bff803 	ldbu	r2,-32(fp)
 2015e5c:	10800044 	addi	r2,r2,1
 2015e60:	e0bff805 	stb	r2,-32(fp)
                 break;
 2015e64:	0001883a 	nop
 2015e68:	e0bff917 	ldw	r2,-28(fp)
 2015e6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015e70:	e0bffa17 	ldw	r2,-24(fp)
 2015e74:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2015e78:	20137fc0 	call	20137fc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2015e7c:	e0bfff17 	ldw	r2,-4(fp)
 2015e80:	00c00384 	movi	r3,14
 2015e84:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2015e88:	e0bff803 	ldbu	r2,-32(fp)
 2015e8c:	00000706 	br	2015eac <OSMboxPendAbort+0x158>
 2015e90:	e0bff917 	ldw	r2,-28(fp)
 2015e94:	e0bffb15 	stw	r2,-20(fp)
 2015e98:	e0bffb17 	ldw	r2,-20(fp)
 2015e9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2015ea0:	e0bfff17 	ldw	r2,-4(fp)
 2015ea4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 2015ea8:	0005883a 	mov	r2,zero
}
 2015eac:	e037883a 	mov	sp,fp
 2015eb0:	dfc00117 	ldw	ra,4(sp)
 2015eb4:	df000017 	ldw	fp,0(sp)
 2015eb8:	dec00204 	addi	sp,sp,8
 2015ebc:	f800283a 	ret

02015ec0 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 2015ec0:	defff704 	addi	sp,sp,-36
 2015ec4:	dfc00815 	stw	ra,32(sp)
 2015ec8:	df000715 	stw	fp,28(sp)
 2015ecc:	df000704 	addi	fp,sp,28
 2015ed0:	e13ffe15 	stw	r4,-8(fp)
 2015ed4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015ed8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015edc:	e0bffe17 	ldw	r2,-8(fp)
 2015ee0:	1000021e 	bne	r2,zero,2015eec <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2015ee4:	00800104 	movi	r2,4
 2015ee8:	00003406 	br	2015fbc <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2015eec:	e0bfff17 	ldw	r2,-4(fp)
 2015ef0:	1000021e 	bne	r2,zero,2015efc <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 2015ef4:	008000c4 	movi	r2,3
 2015ef8:	00003006 	br	2015fbc <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2015efc:	e0bffe17 	ldw	r2,-8(fp)
 2015f00:	10800003 	ldbu	r2,0(r2)
 2015f04:	10803fcc 	andi	r2,r2,255
 2015f08:	10800060 	cmpeqi	r2,r2,1
 2015f0c:	1000021e 	bne	r2,zero,2015f18 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 2015f10:	00800044 	movi	r2,1
 2015f14:	00002906 	br	2015fbc <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015f18:	0005303a 	rdctl	r2,status
 2015f1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015f20:	e0fffd17 	ldw	r3,-12(fp)
 2015f24:	00bfff84 	movi	r2,-2
 2015f28:	1884703a 	and	r2,r3,r2
 2015f2c:	1001703a 	wrctl	status,r2
  
  return context;
 2015f30:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2015f34:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2015f38:	e0bffe17 	ldw	r2,-8(fp)
 2015f3c:	10800283 	ldbu	r2,10(r2)
 2015f40:	10803fcc 	andi	r2,r2,255
 2015f44:	10000c26 	beq	r2,zero,2015f78 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2015f48:	000f883a 	mov	r7,zero
 2015f4c:	01800084 	movi	r6,2
 2015f50:	e17fff17 	ldw	r5,-4(fp)
 2015f54:	e13ffe17 	ldw	r4,-8(fp)
 2015f58:	2012db00 	call	2012db0 <OS_EventTaskRdy>
 2015f5c:	e0bff917 	ldw	r2,-28(fp)
 2015f60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015f64:	e0bffa17 	ldw	r2,-24(fp)
 2015f68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2015f6c:	20137fc0 	call	20137fc <OS_Sched>
        return (OS_ERR_NONE);
 2015f70:	0005883a 	mov	r2,zero
 2015f74:	00001106 	br	2015fbc <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2015f78:	e0bffe17 	ldw	r2,-8(fp)
 2015f7c:	10800117 	ldw	r2,4(r2)
 2015f80:	10000626 	beq	r2,zero,2015f9c <OSMboxPost+0xdc>
 2015f84:	e0bff917 	ldw	r2,-28(fp)
 2015f88:	e0bffb15 	stw	r2,-20(fp)
 2015f8c:	e0bffb17 	ldw	r2,-20(fp)
 2015f90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2015f94:	00800504 	movi	r2,20
 2015f98:	00000806 	br	2015fbc <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2015f9c:	e0bffe17 	ldw	r2,-8(fp)
 2015fa0:	e0ffff17 	ldw	r3,-4(fp)
 2015fa4:	10c00115 	stw	r3,4(r2)
 2015fa8:	e0bff917 	ldw	r2,-28(fp)
 2015fac:	e0bffc15 	stw	r2,-16(fp)
 2015fb0:	e0bffc17 	ldw	r2,-16(fp)
 2015fb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2015fb8:	0005883a 	mov	r2,zero
}
 2015fbc:	e037883a 	mov	sp,fp
 2015fc0:	dfc00117 	ldw	ra,4(sp)
 2015fc4:	df000017 	ldw	fp,0(sp)
 2015fc8:	dec00204 	addi	sp,sp,8
 2015fcc:	f800283a 	ret

02015fd0 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2015fd0:	defff604 	addi	sp,sp,-40
 2015fd4:	dfc00915 	stw	ra,36(sp)
 2015fd8:	df000815 	stw	fp,32(sp)
 2015fdc:	df000804 	addi	fp,sp,32
 2015fe0:	e13ffd15 	stw	r4,-12(fp)
 2015fe4:	e17ffe15 	stw	r5,-8(fp)
 2015fe8:	3005883a 	mov	r2,r6
 2015fec:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015ff0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015ff4:	e0bffd17 	ldw	r2,-12(fp)
 2015ff8:	1000021e 	bne	r2,zero,2016004 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2015ffc:	00800104 	movi	r2,4
 2016000:	00004506 	br	2016118 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2016004:	e0bffe17 	ldw	r2,-8(fp)
 2016008:	1000021e 	bne	r2,zero,2016014 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 201600c:	008000c4 	movi	r2,3
 2016010:	00004106 	br	2016118 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2016014:	e0bffd17 	ldw	r2,-12(fp)
 2016018:	10800003 	ldbu	r2,0(r2)
 201601c:	10803fcc 	andi	r2,r2,255
 2016020:	10800060 	cmpeqi	r2,r2,1
 2016024:	1000021e 	bne	r2,zero,2016030 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 2016028:	00800044 	movi	r2,1
 201602c:	00003a06 	br	2016118 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016030:	0005303a 	rdctl	r2,status
 2016034:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016038:	e0fffc17 	ldw	r3,-16(fp)
 201603c:	00bfff84 	movi	r2,-2
 2016040:	1884703a 	and	r2,r3,r2
 2016044:	1001703a 	wrctl	status,r2
  
  return context;
 2016048:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201604c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2016050:	e0bffd17 	ldw	r2,-12(fp)
 2016054:	10800283 	ldbu	r2,10(r2)
 2016058:	10803fcc 	andi	r2,r2,255
 201605c:	10001d26 	beq	r2,zero,20160d4 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2016060:	e0bfff03 	ldbu	r2,-4(fp)
 2016064:	1080004c 	andi	r2,r2,1
 2016068:	10000b26 	beq	r2,zero,2016098 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201606c:	00000506 	br	2016084 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2016070:	000f883a 	mov	r7,zero
 2016074:	01800084 	movi	r6,2
 2016078:	e17ffe17 	ldw	r5,-8(fp)
 201607c:	e13ffd17 	ldw	r4,-12(fp)
 2016080:	2012db00 	call	2012db0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2016084:	e0bffd17 	ldw	r2,-12(fp)
 2016088:	10800283 	ldbu	r2,10(r2)
 201608c:	10803fcc 	andi	r2,r2,255
 2016090:	103ff71e 	bne	r2,zero,2016070 <OSMboxPostOpt+0xa0>
 2016094:	00000506 	br	20160ac <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2016098:	000f883a 	mov	r7,zero
 201609c:	01800084 	movi	r6,2
 20160a0:	e17ffe17 	ldw	r5,-8(fp)
 20160a4:	e13ffd17 	ldw	r4,-12(fp)
 20160a8:	2012db00 	call	2012db0 <OS_EventTaskRdy>
 20160ac:	e0bff817 	ldw	r2,-32(fp)
 20160b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20160b4:	e0bff917 	ldw	r2,-28(fp)
 20160b8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 20160bc:	e0bfff03 	ldbu	r2,-4(fp)
 20160c0:	1080010c 	andi	r2,r2,4
 20160c4:	1000011e 	bne	r2,zero,20160cc <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 20160c8:	20137fc0 	call	20137fc <OS_Sched>
        }
        return (OS_ERR_NONE);
 20160cc:	0005883a 	mov	r2,zero
 20160d0:	00001106 	br	2016118 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 20160d4:	e0bffd17 	ldw	r2,-12(fp)
 20160d8:	10800117 	ldw	r2,4(r2)
 20160dc:	10000626 	beq	r2,zero,20160f8 <OSMboxPostOpt+0x128>
 20160e0:	e0bff817 	ldw	r2,-32(fp)
 20160e4:	e0bffa15 	stw	r2,-24(fp)
 20160e8:	e0bffa17 	ldw	r2,-24(fp)
 20160ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 20160f0:	00800504 	movi	r2,20
 20160f4:	00000806 	br	2016118 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 20160f8:	e0bffd17 	ldw	r2,-12(fp)
 20160fc:	e0fffe17 	ldw	r3,-8(fp)
 2016100:	10c00115 	stw	r3,4(r2)
 2016104:	e0bff817 	ldw	r2,-32(fp)
 2016108:	e0bffb15 	stw	r2,-20(fp)
 201610c:	e0bffb17 	ldw	r2,-20(fp)
 2016110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2016114:	0005883a 	mov	r2,zero
}
 2016118:	e037883a 	mov	sp,fp
 201611c:	dfc00117 	ldw	ra,4(sp)
 2016120:	df000017 	ldw	fp,0(sp)
 2016124:	dec00204 	addi	sp,sp,8
 2016128:	f800283a 	ret

0201612c <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 201612c:	defff704 	addi	sp,sp,-36
 2016130:	df000815 	stw	fp,32(sp)
 2016134:	df000804 	addi	fp,sp,32
 2016138:	e13ffe15 	stw	r4,-8(fp)
 201613c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2016140:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2016144:	e0bffe17 	ldw	r2,-8(fp)
 2016148:	1000021e 	bne	r2,zero,2016154 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201614c:	00800104 	movi	r2,4
 2016150:	00003606 	br	201622c <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 2016154:	e0bfff17 	ldw	r2,-4(fp)
 2016158:	1000021e 	bne	r2,zero,2016164 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201615c:	00800244 	movi	r2,9
 2016160:	00003206 	br	201622c <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2016164:	e0bffe17 	ldw	r2,-8(fp)
 2016168:	10800003 	ldbu	r2,0(r2)
 201616c:	10803fcc 	andi	r2,r2,255
 2016170:	10800060 	cmpeqi	r2,r2,1
 2016174:	1000021e 	bne	r2,zero,2016180 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2016178:	00800044 	movi	r2,1
 201617c:	00002b06 	br	201622c <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016180:	0005303a 	rdctl	r2,status
 2016184:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016188:	e0fffd17 	ldw	r3,-12(fp)
 201618c:	00bfff84 	movi	r2,-2
 2016190:	1884703a 	and	r2,r3,r2
 2016194:	1001703a 	wrctl	status,r2
  
  return context;
 2016198:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201619c:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 20161a0:	e0bffe17 	ldw	r2,-8(fp)
 20161a4:	10c00283 	ldbu	r3,10(r2)
 20161a8:	e0bfff17 	ldw	r2,-4(fp)
 20161ac:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 20161b0:	e0bffe17 	ldw	r2,-8(fp)
 20161b4:	108002c4 	addi	r2,r2,11
 20161b8:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 20161bc:	e0bfff17 	ldw	r2,-4(fp)
 20161c0:	10800104 	addi	r2,r2,4
 20161c4:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20161c8:	e03ff805 	stb	zero,-32(fp)
 20161cc:	00000b06 	br	20161fc <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 20161d0:	e0bffa17 	ldw	r2,-24(fp)
 20161d4:	10c00044 	addi	r3,r2,1
 20161d8:	e0fffa15 	stw	r3,-24(fp)
 20161dc:	e0fff917 	ldw	r3,-28(fp)
 20161e0:	19000044 	addi	r4,r3,1
 20161e4:	e13ff915 	stw	r4,-28(fp)
 20161e8:	18c00003 	ldbu	r3,0(r3)
 20161ec:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20161f0:	e0bff803 	ldbu	r2,-32(fp)
 20161f4:	10800044 	addi	r2,r2,1
 20161f8:	e0bff805 	stb	r2,-32(fp)
 20161fc:	e0bff803 	ldbu	r2,-32(fp)
 2016200:	108000f0 	cmpltui	r2,r2,3
 2016204:	103ff21e 	bne	r2,zero,20161d0 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 2016208:	e0bffe17 	ldw	r2,-8(fp)
 201620c:	10c00117 	ldw	r3,4(r2)
 2016210:	e0bfff17 	ldw	r2,-4(fp)
 2016214:	10c00015 	stw	r3,0(r2)
 2016218:	e0bffb17 	ldw	r2,-20(fp)
 201621c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016220:	e0bffc17 	ldw	r2,-16(fp)
 2016224:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2016228:	0005883a 	mov	r2,zero
}
 201622c:	e037883a 	mov	sp,fp
 2016230:	df000017 	ldw	fp,0(sp)
 2016234:	dec00104 	addi	sp,sp,4
 2016238:	f800283a 	ret

0201623c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 201623c:	defff404 	addi	sp,sp,-48
 2016240:	df000b15 	stw	fp,44(sp)
 2016244:	df000b04 	addi	fp,sp,44
 2016248:	e13ffc15 	stw	r4,-16(fp)
 201624c:	e17ffd15 	stw	r5,-12(fp)
 2016250:	e1bffe15 	stw	r6,-8(fp)
 2016254:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016258:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201625c:	e0bfff17 	ldw	r2,-4(fp)
 2016260:	1000021e 	bne	r2,zero,201626c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 2016264:	0005883a 	mov	r2,zero
 2016268:	00006506 	br	2016400 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 201626c:	e0bffc17 	ldw	r2,-16(fp)
 2016270:	1000051e 	bne	r2,zero,2016288 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2016274:	e0bfff17 	ldw	r2,-4(fp)
 2016278:	00c01884 	movi	r3,98
 201627c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2016280:	0005883a 	mov	r2,zero
 2016284:	00005e06 	br	2016400 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 2016288:	e0bffc17 	ldw	r2,-16(fp)
 201628c:	108000cc 	andi	r2,r2,3
 2016290:	10000526 	beq	r2,zero,20162a8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2016294:	e0bfff17 	ldw	r2,-4(fp)
 2016298:	00c01884 	movi	r3,98
 201629c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20162a0:	0005883a 	mov	r2,zero
 20162a4:	00005606 	br	2016400 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 20162a8:	e0bffd17 	ldw	r2,-12(fp)
 20162ac:	108000a8 	cmpgeui	r2,r2,2
 20162b0:	1000051e 	bne	r2,zero,20162c8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 20162b4:	e0bfff17 	ldw	r2,-4(fp)
 20162b8:	00c016c4 	movi	r3,91
 20162bc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20162c0:	0005883a 	mov	r2,zero
 20162c4:	00004e06 	br	2016400 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 20162c8:	e0bffe17 	ldw	r2,-8(fp)
 20162cc:	10800128 	cmpgeui	r2,r2,4
 20162d0:	1000051e 	bne	r2,zero,20162e8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 20162d4:	e0bfff17 	ldw	r2,-4(fp)
 20162d8:	00c01704 	movi	r3,92
 20162dc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20162e0:	0005883a 	mov	r2,zero
 20162e4:	00004606 	br	2016400 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20162e8:	0005303a 	rdctl	r2,status
 20162ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20162f0:	e0fffb17 	ldw	r3,-20(fp)
 20162f4:	00bfff84 	movi	r2,-2
 20162f8:	1884703a 	and	r2,r3,r2
 20162fc:	1001703a 	wrctl	status,r2
  
  return context;
 2016300:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016304:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 2016308:	d0a73417 	ldw	r2,-25392(gp)
 201630c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2016310:	d0a73417 	ldw	r2,-25392(gp)
 2016314:	10000326 	beq	r2,zero,2016324 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 2016318:	d0a73417 	ldw	r2,-25392(gp)
 201631c:	10800117 	ldw	r2,4(r2)
 2016320:	d0a73415 	stw	r2,-25392(gp)
 2016324:	e0bff817 	ldw	r2,-32(fp)
 2016328:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201632c:	e0bff917 	ldw	r2,-28(fp)
 2016330:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 2016334:	e0bffa17 	ldw	r2,-24(fp)
 2016338:	1000051e 	bne	r2,zero,2016350 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 201633c:	e0bfff17 	ldw	r2,-4(fp)
 2016340:	00c01684 	movi	r3,90
 2016344:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2016348:	0005883a 	mov	r2,zero
 201634c:	00002c06 	br	2016400 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 2016350:	e0bffc17 	ldw	r2,-16(fp)
 2016354:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 2016358:	e0fffc17 	ldw	r3,-16(fp)
 201635c:	e0bffe17 	ldw	r2,-8(fp)
 2016360:	1885883a 	add	r2,r3,r2
 2016364:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 2016368:	e03ff715 	stw	zero,-36(fp)
 201636c:	00000c06 	br	20163a0 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 2016370:	e0bff617 	ldw	r2,-40(fp)
 2016374:	e0fff517 	ldw	r3,-44(fp)
 2016378:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 201637c:	e0bff517 	ldw	r2,-44(fp)
 2016380:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 2016384:	e0fff517 	ldw	r3,-44(fp)
 2016388:	e0bffe17 	ldw	r2,-8(fp)
 201638c:	1885883a 	add	r2,r3,r2
 2016390:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 2016394:	e0bff717 	ldw	r2,-36(fp)
 2016398:	10800044 	addi	r2,r2,1
 201639c:	e0bff715 	stw	r2,-36(fp)
 20163a0:	e0bffd17 	ldw	r2,-12(fp)
 20163a4:	10bfffc4 	addi	r2,r2,-1
 20163a8:	e0fff717 	ldw	r3,-36(fp)
 20163ac:	18bff036 	bltu	r3,r2,2016370 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 20163b0:	e0bff617 	ldw	r2,-40(fp)
 20163b4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 20163b8:	e0bffa17 	ldw	r2,-24(fp)
 20163bc:	e0fffc17 	ldw	r3,-16(fp)
 20163c0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 20163c4:	e0bffa17 	ldw	r2,-24(fp)
 20163c8:	e0fffc17 	ldw	r3,-16(fp)
 20163cc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 20163d0:	e0bffa17 	ldw	r2,-24(fp)
 20163d4:	e0fffd17 	ldw	r3,-12(fp)
 20163d8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 20163dc:	e0bffa17 	ldw	r2,-24(fp)
 20163e0:	e0fffd17 	ldw	r3,-12(fp)
 20163e4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 20163e8:	e0bffa17 	ldw	r2,-24(fp)
 20163ec:	e0fffe17 	ldw	r3,-8(fp)
 20163f0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 20163f4:	e0bfff17 	ldw	r2,-4(fp)
 20163f8:	10000005 	stb	zero,0(r2)
    return (pmem);
 20163fc:	e0bffa17 	ldw	r2,-24(fp)
}
 2016400:	e037883a 	mov	sp,fp
 2016404:	df000017 	ldw	fp,0(sp)
 2016408:	dec00104 	addi	sp,sp,4
 201640c:	f800283a 	ret

02016410 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2016410:	defff804 	addi	sp,sp,-32
 2016414:	df000715 	stw	fp,28(sp)
 2016418:	df000704 	addi	fp,sp,28
 201641c:	e13ffe15 	stw	r4,-8(fp)
 2016420:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016424:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2016428:	e0bfff17 	ldw	r2,-4(fp)
 201642c:	1000021e 	bne	r2,zero,2016438 <OSMemGet+0x28>
        return ((void *)0);
 2016430:	0005883a 	mov	r2,zero
 2016434:	00002e06 	br	20164f0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 2016438:	e0bffe17 	ldw	r2,-8(fp)
 201643c:	1000051e 	bne	r2,zero,2016454 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2016440:	e0bfff17 	ldw	r2,-4(fp)
 2016444:	00c01804 	movi	r3,96
 2016448:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201644c:	0005883a 	mov	r2,zero
 2016450:	00002706 	br	20164f0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016454:	0005303a 	rdctl	r2,status
 2016458:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201645c:	e0fffd17 	ldw	r3,-12(fp)
 2016460:	00bfff84 	movi	r2,-2
 2016464:	1884703a 	and	r2,r3,r2
 2016468:	1001703a 	wrctl	status,r2
  
  return context;
 201646c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016470:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 2016474:	e0bffe17 	ldw	r2,-8(fp)
 2016478:	10800417 	ldw	r2,16(r2)
 201647c:	10001426 	beq	r2,zero,20164d0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 2016480:	e0bffe17 	ldw	r2,-8(fp)
 2016484:	10800117 	ldw	r2,4(r2)
 2016488:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 201648c:	e0bffb17 	ldw	r2,-20(fp)
 2016490:	10c00017 	ldw	r3,0(r2)
 2016494:	e0bffe17 	ldw	r2,-8(fp)
 2016498:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 201649c:	e0bffe17 	ldw	r2,-8(fp)
 20164a0:	10800417 	ldw	r2,16(r2)
 20164a4:	10ffffc4 	addi	r3,r2,-1
 20164a8:	e0bffe17 	ldw	r2,-8(fp)
 20164ac:	10c00415 	stw	r3,16(r2)
 20164b0:	e0bff917 	ldw	r2,-28(fp)
 20164b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20164b8:	e0bffa17 	ldw	r2,-24(fp)
 20164bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 20164c0:	e0bfff17 	ldw	r2,-4(fp)
 20164c4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 20164c8:	e0bffb17 	ldw	r2,-20(fp)
 20164cc:	00000806 	br	20164f0 <OSMemGet+0xe0>
 20164d0:	e0bff917 	ldw	r2,-28(fp)
 20164d4:	e0bffc15 	stw	r2,-16(fp)
 20164d8:	e0bffc17 	ldw	r2,-16(fp)
 20164dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 20164e0:	e0bfff17 	ldw	r2,-4(fp)
 20164e4:	00c01744 	movi	r3,93
 20164e8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 20164ec:	0005883a 	mov	r2,zero
}
 20164f0:	e037883a 	mov	sp,fp
 20164f4:	df000017 	ldw	fp,0(sp)
 20164f8:	dec00104 	addi	sp,sp,4
 20164fc:	f800283a 	ret

02016500 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2016500:	defff704 	addi	sp,sp,-36
 2016504:	dfc00815 	stw	ra,32(sp)
 2016508:	df000715 	stw	fp,28(sp)
 201650c:	df000704 	addi	fp,sp,28
 2016510:	e13ffd15 	stw	r4,-12(fp)
 2016514:	e17ffe15 	stw	r5,-8(fp)
 2016518:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201651c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016520:	e0bfff17 	ldw	r2,-4(fp)
 2016524:	1000021e 	bne	r2,zero,2016530 <OSMemNameGet+0x30>
        return (0);
 2016528:	0005883a 	mov	r2,zero
 201652c:	00002b06 	br	20165dc <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2016530:	e0bffd17 	ldw	r2,-12(fp)
 2016534:	1000051e 	bne	r2,zero,201654c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2016538:	e0bfff17 	ldw	r2,-4(fp)
 201653c:	00c01804 	movi	r3,96
 2016540:	10c00005 	stb	r3,0(r2)
        return (0);
 2016544:	0005883a 	mov	r2,zero
 2016548:	00002406 	br	20165dc <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201654c:	e0bffe17 	ldw	r2,-8(fp)
 2016550:	1000051e 	bne	r2,zero,2016568 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2016554:	e0bfff17 	ldw	r2,-4(fp)
 2016558:	00c00304 	movi	r3,12
 201655c:	10c00005 	stb	r3,0(r2)
        return (0);
 2016560:	0005883a 	mov	r2,zero
 2016564:	00001d06 	br	20165dc <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016568:	d0a73903 	ldbu	r2,-25372(gp)
 201656c:	10803fcc 	andi	r2,r2,255
 2016570:	10000526 	beq	r2,zero,2016588 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2016574:	e0bfff17 	ldw	r2,-4(fp)
 2016578:	00c00444 	movi	r3,17
 201657c:	10c00005 	stb	r3,0(r2)
        return (0);
 2016580:	0005883a 	mov	r2,zero
 2016584:	00001506 	br	20165dc <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016588:	0005303a 	rdctl	r2,status
 201658c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016590:	e0fffb17 	ldw	r3,-20(fp)
 2016594:	00bfff84 	movi	r2,-2
 2016598:	1884703a 	and	r2,r3,r2
 201659c:	1001703a 	wrctl	status,r2
  
  return context;
 20165a0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 20165a4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 20165a8:	e0bffd17 	ldw	r2,-12(fp)
 20165ac:	10800504 	addi	r2,r2,20
 20165b0:	100b883a 	mov	r5,r2
 20165b4:	e13ffe17 	ldw	r4,-8(fp)
 20165b8:	20139400 	call	2013940 <OS_StrCopy>
 20165bc:	e0bffa05 	stb	r2,-24(fp)
 20165c0:	e0bff917 	ldw	r2,-28(fp)
 20165c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20165c8:	e0bffc17 	ldw	r2,-16(fp)
 20165cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20165d0:	e0bfff17 	ldw	r2,-4(fp)
 20165d4:	10000005 	stb	zero,0(r2)
    return (len);
 20165d8:	e0bffa03 	ldbu	r2,-24(fp)
}
 20165dc:	e037883a 	mov	sp,fp
 20165e0:	dfc00117 	ldw	ra,4(sp)
 20165e4:	df000017 	ldw	fp,0(sp)
 20165e8:	dec00204 	addi	sp,sp,8
 20165ec:	f800283a 	ret

020165f0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 20165f0:	defff604 	addi	sp,sp,-40
 20165f4:	dfc00915 	stw	ra,36(sp)
 20165f8:	df000815 	stw	fp,32(sp)
 20165fc:	df000804 	addi	fp,sp,32
 2016600:	e13ffd15 	stw	r4,-12(fp)
 2016604:	e17ffe15 	stw	r5,-8(fp)
 2016608:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201660c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016610:	e0bfff17 	ldw	r2,-4(fp)
 2016614:	10003526 	beq	r2,zero,20166ec <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2016618:	e0bffd17 	ldw	r2,-12(fp)
 201661c:	1000041e 	bne	r2,zero,2016630 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2016620:	e0bfff17 	ldw	r2,-4(fp)
 2016624:	00c01804 	movi	r3,96
 2016628:	10c00005 	stb	r3,0(r2)
        return;
 201662c:	00003006 	br	20166f0 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2016630:	e0bffe17 	ldw	r2,-8(fp)
 2016634:	1000041e 	bne	r2,zero,2016648 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2016638:	e0bfff17 	ldw	r2,-4(fp)
 201663c:	00c00304 	movi	r3,12
 2016640:	10c00005 	stb	r3,0(r2)
        return;
 2016644:	00002a06 	br	20166f0 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016648:	d0a73903 	ldbu	r2,-25372(gp)
 201664c:	10803fcc 	andi	r2,r2,255
 2016650:	10000426 	beq	r2,zero,2016664 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2016654:	e0bfff17 	ldw	r2,-4(fp)
 2016658:	00c00484 	movi	r3,18
 201665c:	10c00005 	stb	r3,0(r2)
        return;
 2016660:	00002306 	br	20166f0 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016664:	0005303a 	rdctl	r2,status
 2016668:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201666c:	e0fffc17 	ldw	r3,-16(fp)
 2016670:	00bfff84 	movi	r2,-2
 2016674:	1884703a 	and	r2,r3,r2
 2016678:	1001703a 	wrctl	status,r2
  
  return context;
 201667c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016680:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2016684:	e13ffe17 	ldw	r4,-8(fp)
 2016688:	20139b40 	call	20139b4 <OS_StrLen>
 201668c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2016690:	e0bffa03 	ldbu	r2,-24(fp)
 2016694:	10800830 	cmpltui	r2,r2,32
 2016698:	1000081e 	bne	r2,zero,20166bc <OSMemNameSet+0xcc>
 201669c:	e0bff817 	ldw	r2,-32(fp)
 20166a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20166a4:	e0bff917 	ldw	r2,-28(fp)
 20166a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 20166ac:	e0bfff17 	ldw	r2,-4(fp)
 20166b0:	00c018c4 	movi	r3,99
 20166b4:	10c00005 	stb	r3,0(r2)
        return;
 20166b8:	00000d06 	br	20166f0 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 20166bc:	e0bffd17 	ldw	r2,-12(fp)
 20166c0:	10800504 	addi	r2,r2,20
 20166c4:	e17ffe17 	ldw	r5,-8(fp)
 20166c8:	1009883a 	mov	r4,r2
 20166cc:	20139400 	call	2013940 <OS_StrCopy>
 20166d0:	e0bff817 	ldw	r2,-32(fp)
 20166d4:	e0bffb15 	stw	r2,-20(fp)
 20166d8:	e0bffb17 	ldw	r2,-20(fp)
 20166dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20166e0:	e0bfff17 	ldw	r2,-4(fp)
 20166e4:	10000005 	stb	zero,0(r2)
 20166e8:	00000106 	br	20166f0 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 20166ec:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 20166f0:	e037883a 	mov	sp,fp
 20166f4:	dfc00117 	ldw	ra,4(sp)
 20166f8:	df000017 	ldw	fp,0(sp)
 20166fc:	dec00204 	addi	sp,sp,8
 2016700:	f800283a 	ret

02016704 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 2016704:	defff904 	addi	sp,sp,-28
 2016708:	df000615 	stw	fp,24(sp)
 201670c:	df000604 	addi	fp,sp,24
 2016710:	e13ffe15 	stw	r4,-8(fp)
 2016714:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016718:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201671c:	e0bffe17 	ldw	r2,-8(fp)
 2016720:	1000021e 	bne	r2,zero,201672c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2016724:	00801804 	movi	r2,96
 2016728:	00002806 	br	20167cc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 201672c:	e0bfff17 	ldw	r2,-4(fp)
 2016730:	1000021e 	bne	r2,zero,201673c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 2016734:	008017c4 	movi	r2,95
 2016738:	00002406 	br	20167cc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201673c:	0005303a 	rdctl	r2,status
 2016740:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016744:	e0fffd17 	ldw	r3,-12(fp)
 2016748:	00bfff84 	movi	r2,-2
 201674c:	1884703a 	and	r2,r3,r2
 2016750:	1001703a 	wrctl	status,r2
  
  return context;
 2016754:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016758:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 201675c:	e0bffe17 	ldw	r2,-8(fp)
 2016760:	10c00417 	ldw	r3,16(r2)
 2016764:	e0bffe17 	ldw	r2,-8(fp)
 2016768:	10800317 	ldw	r2,12(r2)
 201676c:	18800636 	bltu	r3,r2,2016788 <OSMemPut+0x84>
 2016770:	e0bffa17 	ldw	r2,-24(fp)
 2016774:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016778:	e0bffb17 	ldw	r2,-20(fp)
 201677c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2016780:	00801784 	movi	r2,94
 2016784:	00001106 	br	20167cc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2016788:	e0bffe17 	ldw	r2,-8(fp)
 201678c:	10c00117 	ldw	r3,4(r2)
 2016790:	e0bfff17 	ldw	r2,-4(fp)
 2016794:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 2016798:	e0bffe17 	ldw	r2,-8(fp)
 201679c:	e0ffff17 	ldw	r3,-4(fp)
 20167a0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 20167a4:	e0bffe17 	ldw	r2,-8(fp)
 20167a8:	10800417 	ldw	r2,16(r2)
 20167ac:	10c00044 	addi	r3,r2,1
 20167b0:	e0bffe17 	ldw	r2,-8(fp)
 20167b4:	10c00415 	stw	r3,16(r2)
 20167b8:	e0bffa17 	ldw	r2,-24(fp)
 20167bc:	e0bffc15 	stw	r2,-16(fp)
 20167c0:	e0bffc17 	ldw	r2,-16(fp)
 20167c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 20167c8:	0005883a 	mov	r2,zero
}
 20167cc:	e037883a 	mov	sp,fp
 20167d0:	df000017 	ldw	fp,0(sp)
 20167d4:	dec00104 	addi	sp,sp,4
 20167d8:	f800283a 	ret

020167dc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 20167dc:	defffa04 	addi	sp,sp,-24
 20167e0:	df000515 	stw	fp,20(sp)
 20167e4:	df000504 	addi	fp,sp,20
 20167e8:	e13ffe15 	stw	r4,-8(fp)
 20167ec:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20167f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 20167f4:	e0bffe17 	ldw	r2,-8(fp)
 20167f8:	1000021e 	bne	r2,zero,2016804 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 20167fc:	00801804 	movi	r2,96
 2016800:	00002c06 	br	20168b4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 2016804:	e0bfff17 	ldw	r2,-4(fp)
 2016808:	1000021e 	bne	r2,zero,2016814 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 201680c:	00801844 	movi	r2,97
 2016810:	00002806 	br	20168b4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016814:	0005303a 	rdctl	r2,status
 2016818:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201681c:	e0fffc17 	ldw	r3,-16(fp)
 2016820:	00bfff84 	movi	r2,-2
 2016824:	1884703a 	and	r2,r3,r2
 2016828:	1001703a 	wrctl	status,r2
  
  return context;
 201682c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016830:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 2016834:	e0bffe17 	ldw	r2,-8(fp)
 2016838:	10c00017 	ldw	r3,0(r2)
 201683c:	e0bfff17 	ldw	r2,-4(fp)
 2016840:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 2016844:	e0bffe17 	ldw	r2,-8(fp)
 2016848:	10c00117 	ldw	r3,4(r2)
 201684c:	e0bfff17 	ldw	r2,-4(fp)
 2016850:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 2016854:	e0bffe17 	ldw	r2,-8(fp)
 2016858:	10c00217 	ldw	r3,8(r2)
 201685c:	e0bfff17 	ldw	r2,-4(fp)
 2016860:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 2016864:	e0bffe17 	ldw	r2,-8(fp)
 2016868:	10c00317 	ldw	r3,12(r2)
 201686c:	e0bfff17 	ldw	r2,-4(fp)
 2016870:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 2016874:	e0bffe17 	ldw	r2,-8(fp)
 2016878:	10c00417 	ldw	r3,16(r2)
 201687c:	e0bfff17 	ldw	r2,-4(fp)
 2016880:	10c00415 	stw	r3,16(r2)
 2016884:	e0bffb17 	ldw	r2,-20(fp)
 2016888:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201688c:	e0bffd17 	ldw	r2,-12(fp)
 2016890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 2016894:	e0bfff17 	ldw	r2,-4(fp)
 2016898:	10c00317 	ldw	r3,12(r2)
 201689c:	e0bfff17 	ldw	r2,-4(fp)
 20168a0:	10800417 	ldw	r2,16(r2)
 20168a4:	1887c83a 	sub	r3,r3,r2
 20168a8:	e0bfff17 	ldw	r2,-4(fp)
 20168ac:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 20168b0:	0005883a 	mov	r2,zero
}
 20168b4:	e037883a 	mov	sp,fp
 20168b8:	df000017 	ldw	fp,0(sp)
 20168bc:	dec00104 	addi	sp,sp,4
 20168c0:	f800283a 	ret

020168c4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 20168c4:	defffc04 	addi	sp,sp,-16
 20168c8:	dfc00315 	stw	ra,12(sp)
 20168cc:	df000215 	stw	fp,8(sp)
 20168d0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 20168d4:	01430c04 	movi	r5,3120
 20168d8:	010080b4 	movhi	r4,514
 20168dc:	21120d04 	addi	r4,r4,18484
 20168e0:	20137400 	call	2013740 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 20168e4:	008080b4 	movhi	r2,514
 20168e8:	10920d04 	addi	r2,r2,18484
 20168ec:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 20168f0:	e03fff0d 	sth	zero,-4(fp)
 20168f4:	00001306 	br	2016944 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 20168f8:	e0bfff0b 	ldhu	r2,-4(fp)
 20168fc:	10800044 	addi	r2,r2,1
 2016900:	10c00d24 	muli	r3,r2,52
 2016904:	008080b4 	movhi	r2,514
 2016908:	10920d04 	addi	r2,r2,18484
 201690c:	1887883a 	add	r3,r3,r2
 2016910:	e0bffe17 	ldw	r2,-8(fp)
 2016914:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2016918:	e0bffe17 	ldw	r2,-8(fp)
 201691c:	00c00fc4 	movi	r3,63
 2016920:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 2016924:	e0bffe17 	ldw	r2,-8(fp)
 2016928:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 201692c:	e0bffe17 	ldw	r2,-8(fp)
 2016930:	10800d04 	addi	r2,r2,52
 2016934:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2016938:	e0bfff0b 	ldhu	r2,-4(fp)
 201693c:	10800044 	addi	r2,r2,1
 2016940:	e0bfff0d 	sth	r2,-4(fp)
 2016944:	e0bfff0b 	ldhu	r2,-4(fp)
 2016948:	10800ef0 	cmpltui	r2,r2,59
 201694c:	103fea1e 	bne	r2,zero,20168f8 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 2016950:	e0bffe17 	ldw	r2,-8(fp)
 2016954:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 2016958:	e0bffe17 	ldw	r2,-8(fp)
 201695c:	00c00fc4 	movi	r3,63
 2016960:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 2016964:	e0bffe17 	ldw	r2,-8(fp)
 2016968:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 201696c:	008080b4 	movhi	r2,514
 2016970:	10920d04 	addi	r2,r2,18484
 2016974:	d0a73415 	stw	r2,-25392(gp)
#endif
}
 2016978:	0001883a 	nop
 201697c:	e037883a 	mov	sp,fp
 2016980:	dfc00117 	ldw	ra,4(sp)
 2016984:	df000017 	ldw	fp,0(sp)
 2016988:	dec00204 	addi	sp,sp,8
 201698c:	f800283a 	ret

02016990 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2016990:	defff804 	addi	sp,sp,-32
 2016994:	df000715 	stw	fp,28(sp)
 2016998:	df000704 	addi	fp,sp,28
 201699c:	e13ffe15 	stw	r4,-8(fp)
 20169a0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20169a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20169a8:	e0bfff17 	ldw	r2,-4(fp)
 20169ac:	1000021e 	bne	r2,zero,20169b8 <OSQAccept+0x28>
        return ((void *)0);
 20169b0:	0005883a 	mov	r2,zero
 20169b4:	00004206 	br	2016ac0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 20169b8:	e0bffe17 	ldw	r2,-8(fp)
 20169bc:	1000051e 	bne	r2,zero,20169d4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 20169c0:	e0bfff17 	ldw	r2,-4(fp)
 20169c4:	00c00104 	movi	r3,4
 20169c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20169cc:	0005883a 	mov	r2,zero
 20169d0:	00003b06 	br	2016ac0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 20169d4:	e0bffe17 	ldw	r2,-8(fp)
 20169d8:	10800003 	ldbu	r2,0(r2)
 20169dc:	10803fcc 	andi	r2,r2,255
 20169e0:	108000a0 	cmpeqi	r2,r2,2
 20169e4:	1000051e 	bne	r2,zero,20169fc <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 20169e8:	e0bfff17 	ldw	r2,-4(fp)
 20169ec:	00c00044 	movi	r3,1
 20169f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20169f4:	0005883a 	mov	r2,zero
 20169f8:	00003106 	br	2016ac0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20169fc:	0005303a 	rdctl	r2,status
 2016a00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016a04:	e0fffd17 	ldw	r3,-12(fp)
 2016a08:	00bfff84 	movi	r2,-2
 2016a0c:	1884703a 	and	r2,r3,r2
 2016a10:	1001703a 	wrctl	status,r2
  
  return context;
 2016a14:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2016a18:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2016a1c:	e0bffe17 	ldw	r2,-8(fp)
 2016a20:	10800117 	ldw	r2,4(r2)
 2016a24:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2016a28:	e0bffc17 	ldw	r2,-16(fp)
 2016a2c:	1080058b 	ldhu	r2,22(r2)
 2016a30:	10bfffcc 	andi	r2,r2,65535
 2016a34:	10001926 	beq	r2,zero,2016a9c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2016a38:	e0bffc17 	ldw	r2,-16(fp)
 2016a3c:	10800417 	ldw	r2,16(r2)
 2016a40:	11000104 	addi	r4,r2,4
 2016a44:	e0fffc17 	ldw	r3,-16(fp)
 2016a48:	19000415 	stw	r4,16(r3)
 2016a4c:	10800017 	ldw	r2,0(r2)
 2016a50:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2016a54:	e0bffc17 	ldw	r2,-16(fp)
 2016a58:	1080058b 	ldhu	r2,22(r2)
 2016a5c:	10bfffc4 	addi	r2,r2,-1
 2016a60:	1007883a 	mov	r3,r2
 2016a64:	e0bffc17 	ldw	r2,-16(fp)
 2016a68:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2016a6c:	e0bffc17 	ldw	r2,-16(fp)
 2016a70:	10c00417 	ldw	r3,16(r2)
 2016a74:	e0bffc17 	ldw	r2,-16(fp)
 2016a78:	10800217 	ldw	r2,8(r2)
 2016a7c:	1880041e 	bne	r3,r2,2016a90 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 2016a80:	e0bffc17 	ldw	r2,-16(fp)
 2016a84:	10c00117 	ldw	r3,4(r2)
 2016a88:	e0bffc17 	ldw	r2,-16(fp)
 2016a8c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2016a90:	e0bfff17 	ldw	r2,-4(fp)
 2016a94:	10000005 	stb	zero,0(r2)
 2016a98:	00000406 	br	2016aac <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 2016a9c:	e0bfff17 	ldw	r2,-4(fp)
 2016aa0:	00c007c4 	movi	r3,31
 2016aa4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2016aa8:	e03ff915 	stw	zero,-28(fp)
 2016aac:	e0bffa17 	ldw	r2,-24(fp)
 2016ab0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016ab4:	e0bffb17 	ldw	r2,-20(fp)
 2016ab8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 2016abc:	e0bff917 	ldw	r2,-28(fp)
}
 2016ac0:	e037883a 	mov	sp,fp
 2016ac4:	df000017 	ldw	fp,0(sp)
 2016ac8:	dec00104 	addi	sp,sp,4
 2016acc:	f800283a 	ret

02016ad0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 2016ad0:	defff404 	addi	sp,sp,-48
 2016ad4:	dfc00b15 	stw	ra,44(sp)
 2016ad8:	df000a15 	stw	fp,40(sp)
 2016adc:	df000a04 	addi	fp,sp,40
 2016ae0:	e13ffe15 	stw	r4,-8(fp)
 2016ae4:	2805883a 	mov	r2,r5
 2016ae8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016aec:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2016af0:	d0a73903 	ldbu	r2,-25372(gp)
 2016af4:	10803fcc 	andi	r2,r2,255
 2016af8:	10000226 	beq	r2,zero,2016b04 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2016afc:	0005883a 	mov	r2,zero
 2016b00:	00005906 	br	2016c68 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016b04:	0005303a 	rdctl	r2,status
 2016b08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016b0c:	e0fffd17 	ldw	r3,-12(fp)
 2016b10:	00bfff84 	movi	r2,-2
 2016b14:	1884703a 	and	r2,r3,r2
 2016b18:	1001703a 	wrctl	status,r2
  
  return context;
 2016b1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2016b20:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2016b24:	d0a73817 	ldw	r2,-25376(gp)
 2016b28:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2016b2c:	d0a73817 	ldw	r2,-25376(gp)
 2016b30:	10000326 	beq	r2,zero,2016b40 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2016b34:	d0a73817 	ldw	r2,-25376(gp)
 2016b38:	10800117 	ldw	r2,4(r2)
 2016b3c:	d0a73815 	stw	r2,-25376(gp)
 2016b40:	e0bff717 	ldw	r2,-36(fp)
 2016b44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016b48:	e0bff817 	ldw	r2,-32(fp)
 2016b4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2016b50:	e0bff617 	ldw	r2,-40(fp)
 2016b54:	10004326 	beq	r2,zero,2016c64 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016b58:	0005303a 	rdctl	r2,status
 2016b5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016b60:	e0fff917 	ldw	r3,-28(fp)
 2016b64:	00bfff84 	movi	r2,-2
 2016b68:	1884703a 	and	r2,r3,r2
 2016b6c:	1001703a 	wrctl	status,r2
  
  return context;
 2016b70:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 2016b74:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 2016b78:	d0a73617 	ldw	r2,-25384(gp)
 2016b7c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 2016b80:	e0bffb17 	ldw	r2,-20(fp)
 2016b84:	10002d26 	beq	r2,zero,2016c3c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 2016b88:	d0a73617 	ldw	r2,-25384(gp)
 2016b8c:	10800017 	ldw	r2,0(r2)
 2016b90:	d0a73615 	stw	r2,-25384(gp)
 2016b94:	e0bff717 	ldw	r2,-36(fp)
 2016b98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016b9c:	e0bffa17 	ldw	r2,-24(fp)
 2016ba0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2016ba4:	e0bffb17 	ldw	r2,-20(fp)
 2016ba8:	e0fffe17 	ldw	r3,-8(fp)
 2016bac:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 2016bb0:	e0bfff0b 	ldhu	r2,-4(fp)
 2016bb4:	1085883a 	add	r2,r2,r2
 2016bb8:	1085883a 	add	r2,r2,r2
 2016bbc:	1007883a 	mov	r3,r2
 2016bc0:	e0bffe17 	ldw	r2,-8(fp)
 2016bc4:	10c7883a 	add	r3,r2,r3
 2016bc8:	e0bffb17 	ldw	r2,-20(fp)
 2016bcc:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2016bd0:	e0bffb17 	ldw	r2,-20(fp)
 2016bd4:	e0fffe17 	ldw	r3,-8(fp)
 2016bd8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 2016bdc:	e0bffb17 	ldw	r2,-20(fp)
 2016be0:	e0fffe17 	ldw	r3,-8(fp)
 2016be4:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 2016be8:	e0bffb17 	ldw	r2,-20(fp)
 2016bec:	e0ffff0b 	ldhu	r3,-4(fp)
 2016bf0:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 2016bf4:	e0bffb17 	ldw	r2,-20(fp)
 2016bf8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2016bfc:	e0bff617 	ldw	r2,-40(fp)
 2016c00:	00c00084 	movi	r3,2
 2016c04:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 2016c08:	e0bff617 	ldw	r2,-40(fp)
 2016c0c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2016c10:	e0bff617 	ldw	r2,-40(fp)
 2016c14:	e0fffb17 	ldw	r3,-20(fp)
 2016c18:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2016c1c:	e0bff617 	ldw	r2,-40(fp)
 2016c20:	00c00fc4 	movi	r3,63
 2016c24:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2016c28:	e0bff617 	ldw	r2,-40(fp)
 2016c2c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2016c30:	e13ff617 	ldw	r4,-40(fp)
 2016c34:	20133600 	call	2013360 <OS_EventWaitListInit>
 2016c38:	00000a06 	br	2016c64 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2016c3c:	d0e73817 	ldw	r3,-25376(gp)
 2016c40:	e0bff617 	ldw	r2,-40(fp)
 2016c44:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2016c48:	e0bff617 	ldw	r2,-40(fp)
 2016c4c:	d0a73815 	stw	r2,-25376(gp)
 2016c50:	e0bff717 	ldw	r2,-36(fp)
 2016c54:	e0bffc15 	stw	r2,-16(fp)
 2016c58:	e0bffc17 	ldw	r2,-16(fp)
 2016c5c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 2016c60:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 2016c64:	e0bff617 	ldw	r2,-40(fp)
}
 2016c68:	e037883a 	mov	sp,fp
 2016c6c:	dfc00117 	ldw	ra,4(sp)
 2016c70:	df000017 	ldw	fp,0(sp)
 2016c74:	dec00204 	addi	sp,sp,8
 2016c78:	f800283a 	ret

02016c7c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2016c7c:	defff204 	addi	sp,sp,-56
 2016c80:	dfc00d15 	stw	ra,52(sp)
 2016c84:	df000c15 	stw	fp,48(sp)
 2016c88:	df000c04 	addi	fp,sp,48
 2016c8c:	e13ffd15 	stw	r4,-12(fp)
 2016c90:	2805883a 	mov	r2,r5
 2016c94:	e1bfff15 	stw	r6,-4(fp)
 2016c98:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2016c9c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2016ca0:	e0bfff17 	ldw	r2,-4(fp)
 2016ca4:	1000021e 	bne	r2,zero,2016cb0 <OSQDel+0x34>
        return (pevent);
 2016ca8:	e0bffd17 	ldw	r2,-12(fp)
 2016cac:	00008e06 	br	2016ee8 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2016cb0:	e0bffd17 	ldw	r2,-12(fp)
 2016cb4:	1000051e 	bne	r2,zero,2016ccc <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2016cb8:	e0bfff17 	ldw	r2,-4(fp)
 2016cbc:	00c00104 	movi	r3,4
 2016cc0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2016cc4:	e0bffd17 	ldw	r2,-12(fp)
 2016cc8:	00008706 	br	2016ee8 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2016ccc:	e0bffd17 	ldw	r2,-12(fp)
 2016cd0:	10800003 	ldbu	r2,0(r2)
 2016cd4:	10803fcc 	andi	r2,r2,255
 2016cd8:	108000a0 	cmpeqi	r2,r2,2
 2016cdc:	1000051e 	bne	r2,zero,2016cf4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2016ce0:	e0bfff17 	ldw	r2,-4(fp)
 2016ce4:	00c00044 	movi	r3,1
 2016ce8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2016cec:	e0bffd17 	ldw	r2,-12(fp)
 2016cf0:	00007d06 	br	2016ee8 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2016cf4:	d0a73903 	ldbu	r2,-25372(gp)
 2016cf8:	10803fcc 	andi	r2,r2,255
 2016cfc:	10000526 	beq	r2,zero,2016d14 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2016d00:	e0bfff17 	ldw	r2,-4(fp)
 2016d04:	00c003c4 	movi	r3,15
 2016d08:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2016d0c:	e0bffd17 	ldw	r2,-12(fp)
 2016d10:	00007506 	br	2016ee8 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016d14:	0005303a 	rdctl	r2,status
 2016d18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016d1c:	e0fffc17 	ldw	r3,-16(fp)
 2016d20:	00bfff84 	movi	r2,-2
 2016d24:	1884703a 	and	r2,r3,r2
 2016d28:	1001703a 	wrctl	status,r2
  
  return context;
 2016d2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016d30:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2016d34:	e0bffd17 	ldw	r2,-12(fp)
 2016d38:	10800283 	ldbu	r2,10(r2)
 2016d3c:	10803fcc 	andi	r2,r2,255
 2016d40:	10000326 	beq	r2,zero,2016d50 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2016d44:	00800044 	movi	r2,1
 2016d48:	e0bff405 	stb	r2,-48(fp)
 2016d4c:	00000106 	br	2016d54 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2016d50:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2016d54:	e0bffe03 	ldbu	r2,-8(fp)
 2016d58:	10000326 	beq	r2,zero,2016d68 <OSQDel+0xec>
 2016d5c:	10800060 	cmpeqi	r2,r2,1
 2016d60:	1000301e 	bne	r2,zero,2016e24 <OSQDel+0x1a8>
 2016d64:	00005506 	br	2016ebc <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2016d68:	e0bff403 	ldbu	r2,-48(fp)
 2016d6c:	10001e1e 	bne	r2,zero,2016de8 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2016d70:	e0bffd17 	ldw	r2,-12(fp)
 2016d74:	00c00fc4 	movi	r3,63
 2016d78:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2016d7c:	e0bffd17 	ldw	r2,-12(fp)
 2016d80:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2016d84:	e0bffd17 	ldw	r2,-12(fp)
 2016d88:	10800117 	ldw	r2,4(r2)
 2016d8c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2016d90:	d0e73617 	ldw	r3,-25384(gp)
 2016d94:	e0bff817 	ldw	r2,-32(fp)
 2016d98:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2016d9c:	e0bff817 	ldw	r2,-32(fp)
 2016da0:	d0a73615 	stw	r2,-25384(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2016da4:	e0bffd17 	ldw	r2,-12(fp)
 2016da8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2016dac:	d0e73817 	ldw	r3,-25376(gp)
 2016db0:	e0bffd17 	ldw	r2,-12(fp)
 2016db4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2016db8:	e0bffd17 	ldw	r2,-12(fp)
 2016dbc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2016dc0:	e0bffd17 	ldw	r2,-12(fp)
 2016dc4:	d0a73815 	stw	r2,-25376(gp)
 2016dc8:	e0bff617 	ldw	r2,-40(fp)
 2016dcc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016dd0:	e0bff717 	ldw	r2,-36(fp)
 2016dd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2016dd8:	e0bfff17 	ldw	r2,-4(fp)
 2016ddc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2016de0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2016de4:	00003f06 	br	2016ee4 <OSQDel+0x268>
 2016de8:	e0bff617 	ldw	r2,-40(fp)
 2016dec:	e0bff915 	stw	r2,-28(fp)
 2016df0:	e0bff917 	ldw	r2,-28(fp)
 2016df4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2016df8:	e0bfff17 	ldw	r2,-4(fp)
 2016dfc:	00c01244 	movi	r3,73
 2016e00:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2016e04:	e0bffd17 	ldw	r2,-12(fp)
 2016e08:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 2016e0c:	00003506 	br	2016ee4 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2016e10:	000f883a 	mov	r7,zero
 2016e14:	01800104 	movi	r6,4
 2016e18:	000b883a 	mov	r5,zero
 2016e1c:	e13ffd17 	ldw	r4,-12(fp)
 2016e20:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2016e24:	e0bffd17 	ldw	r2,-12(fp)
 2016e28:	10800283 	ldbu	r2,10(r2)
 2016e2c:	10803fcc 	andi	r2,r2,255
 2016e30:	103ff71e 	bne	r2,zero,2016e10 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2016e34:	e0bffd17 	ldw	r2,-12(fp)
 2016e38:	00c00fc4 	movi	r3,63
 2016e3c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2016e40:	e0bffd17 	ldw	r2,-12(fp)
 2016e44:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 2016e48:	e0bffd17 	ldw	r2,-12(fp)
 2016e4c:	10800117 	ldw	r2,4(r2)
 2016e50:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 2016e54:	d0e73617 	ldw	r3,-25384(gp)
 2016e58:	e0bff817 	ldw	r2,-32(fp)
 2016e5c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2016e60:	e0bff817 	ldw	r2,-32(fp)
 2016e64:	d0a73615 	stw	r2,-25384(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2016e68:	e0bffd17 	ldw	r2,-12(fp)
 2016e6c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2016e70:	d0e73817 	ldw	r3,-25376(gp)
 2016e74:	e0bffd17 	ldw	r2,-12(fp)
 2016e78:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2016e7c:	e0bffd17 	ldw	r2,-12(fp)
 2016e80:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2016e84:	e0bffd17 	ldw	r2,-12(fp)
 2016e88:	d0a73815 	stw	r2,-25376(gp)
 2016e8c:	e0bff617 	ldw	r2,-40(fp)
 2016e90:	e0bffa15 	stw	r2,-24(fp)
 2016e94:	e0bffa17 	ldw	r2,-24(fp)
 2016e98:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2016e9c:	e0bff403 	ldbu	r2,-48(fp)
 2016ea0:	10800058 	cmpnei	r2,r2,1
 2016ea4:	1000011e 	bne	r2,zero,2016eac <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2016ea8:	20137fc0 	call	20137fc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2016eac:	e0bfff17 	ldw	r2,-4(fp)
 2016eb0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2016eb4:	e03ff515 	stw	zero,-44(fp)
             break;
 2016eb8:	00000a06 	br	2016ee4 <OSQDel+0x268>
 2016ebc:	e0bff617 	ldw	r2,-40(fp)
 2016ec0:	e0bffb15 	stw	r2,-20(fp)
 2016ec4:	e0bffb17 	ldw	r2,-20(fp)
 2016ec8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2016ecc:	e0bfff17 	ldw	r2,-4(fp)
 2016ed0:	00c001c4 	movi	r3,7
 2016ed4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2016ed8:	e0bffd17 	ldw	r2,-12(fp)
 2016edc:	e0bff515 	stw	r2,-44(fp)
             break;
 2016ee0:	0001883a 	nop
    }
    return (pevent_return);
 2016ee4:	e0bff517 	ldw	r2,-44(fp)
}
 2016ee8:	e037883a 	mov	sp,fp
 2016eec:	dfc00117 	ldw	ra,4(sp)
 2016ef0:	df000017 	ldw	fp,0(sp)
 2016ef4:	dec00204 	addi	sp,sp,8
 2016ef8:	f800283a 	ret

02016efc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2016efc:	defffa04 	addi	sp,sp,-24
 2016f00:	df000515 	stw	fp,20(sp)
 2016f04:	df000504 	addi	fp,sp,20
 2016f08:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016f0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2016f10:	e0bfff17 	ldw	r2,-4(fp)
 2016f14:	1000021e 	bne	r2,zero,2016f20 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 2016f18:	00800104 	movi	r2,4
 2016f1c:	00002106 	br	2016fa4 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2016f20:	e0bfff17 	ldw	r2,-4(fp)
 2016f24:	10800003 	ldbu	r2,0(r2)
 2016f28:	10803fcc 	andi	r2,r2,255
 2016f2c:	108000a0 	cmpeqi	r2,r2,2
 2016f30:	1000021e 	bne	r2,zero,2016f3c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 2016f34:	00800044 	movi	r2,1
 2016f38:	00001a06 	br	2016fa4 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016f3c:	0005303a 	rdctl	r2,status
 2016f40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016f44:	e0fffd17 	ldw	r3,-12(fp)
 2016f48:	00bfff84 	movi	r2,-2
 2016f4c:	1884703a 	and	r2,r3,r2
 2016f50:	1001703a 	wrctl	status,r2
  
  return context;
 2016f54:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016f58:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2016f5c:	e0bfff17 	ldw	r2,-4(fp)
 2016f60:	10800117 	ldw	r2,4(r2)
 2016f64:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 2016f68:	e0bffc17 	ldw	r2,-16(fp)
 2016f6c:	10c00117 	ldw	r3,4(r2)
 2016f70:	e0bffc17 	ldw	r2,-16(fp)
 2016f74:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2016f78:	e0bffc17 	ldw	r2,-16(fp)
 2016f7c:	10c00117 	ldw	r3,4(r2)
 2016f80:	e0bffc17 	ldw	r2,-16(fp)
 2016f84:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2016f88:	e0bffc17 	ldw	r2,-16(fp)
 2016f8c:	1000058d 	sth	zero,22(r2)
 2016f90:	e0bffb17 	ldw	r2,-20(fp)
 2016f94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016f98:	e0bffe17 	ldw	r2,-8(fp)
 2016f9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2016fa0:	0005883a 	mov	r2,zero
}
 2016fa4:	e037883a 	mov	sp,fp
 2016fa8:	df000017 	ldw	fp,0(sp)
 2016fac:	dec00104 	addi	sp,sp,4
 2016fb0:	f800283a 	ret

02016fb4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2016fb4:	defff304 	addi	sp,sp,-52
 2016fb8:	dfc00c15 	stw	ra,48(sp)
 2016fbc:	df000b15 	stw	fp,44(sp)
 2016fc0:	df000b04 	addi	fp,sp,44
 2016fc4:	e13ffd15 	stw	r4,-12(fp)
 2016fc8:	2805883a 	mov	r2,r5
 2016fcc:	e1bfff15 	stw	r6,-4(fp)
 2016fd0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016fd4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016fd8:	e0bfff17 	ldw	r2,-4(fp)
 2016fdc:	1000021e 	bne	r2,zero,2016fe8 <OSQPend+0x34>
        return ((void *)0);
 2016fe0:	0005883a 	mov	r2,zero
 2016fe4:	00009106 	br	201722c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2016fe8:	e0bffd17 	ldw	r2,-12(fp)
 2016fec:	1000051e 	bne	r2,zero,2017004 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2016ff0:	e0bfff17 	ldw	r2,-4(fp)
 2016ff4:	00c00104 	movi	r3,4
 2016ff8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2016ffc:	0005883a 	mov	r2,zero
 2017000:	00008a06 	br	201722c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2017004:	e0bffd17 	ldw	r2,-12(fp)
 2017008:	10800003 	ldbu	r2,0(r2)
 201700c:	10803fcc 	andi	r2,r2,255
 2017010:	108000a0 	cmpeqi	r2,r2,2
 2017014:	1000051e 	bne	r2,zero,201702c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2017018:	e0bfff17 	ldw	r2,-4(fp)
 201701c:	00c00044 	movi	r3,1
 2017020:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017024:	0005883a 	mov	r2,zero
 2017028:	00008006 	br	201722c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201702c:	d0a73903 	ldbu	r2,-25372(gp)
 2017030:	10803fcc 	andi	r2,r2,255
 2017034:	10000526 	beq	r2,zero,201704c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 2017038:	e0bfff17 	ldw	r2,-4(fp)
 201703c:	00c00084 	movi	r3,2
 2017040:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017044:	0005883a 	mov	r2,zero
 2017048:	00007806 	br	201722c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 201704c:	d0a72b03 	ldbu	r2,-25428(gp)
 2017050:	10803fcc 	andi	r2,r2,255
 2017054:	10000526 	beq	r2,zero,201706c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 2017058:	e0bfff17 	ldw	r2,-4(fp)
 201705c:	00c00344 	movi	r3,13
 2017060:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017064:	0005883a 	mov	r2,zero
 2017068:	00007006 	br	201722c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201706c:	0005303a 	rdctl	r2,status
 2017070:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017074:	e0fffc17 	ldw	r3,-16(fp)
 2017078:	00bfff84 	movi	r2,-2
 201707c:	1884703a 	and	r2,r3,r2
 2017080:	1001703a 	wrctl	status,r2
  
  return context;
 2017084:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017088:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201708c:	e0bffd17 	ldw	r2,-12(fp)
 2017090:	10800117 	ldw	r2,4(r2)
 2017094:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2017098:	e0bff817 	ldw	r2,-32(fp)
 201709c:	1080058b 	ldhu	r2,22(r2)
 20170a0:	10bfffcc 	andi	r2,r2,65535
 20170a4:	10001e26 	beq	r2,zero,2017120 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 20170a8:	e0bff817 	ldw	r2,-32(fp)
 20170ac:	10800417 	ldw	r2,16(r2)
 20170b0:	11000104 	addi	r4,r2,4
 20170b4:	e0fff817 	ldw	r3,-32(fp)
 20170b8:	19000415 	stw	r4,16(r3)
 20170bc:	10800017 	ldw	r2,0(r2)
 20170c0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 20170c4:	e0bff817 	ldw	r2,-32(fp)
 20170c8:	1080058b 	ldhu	r2,22(r2)
 20170cc:	10bfffc4 	addi	r2,r2,-1
 20170d0:	1007883a 	mov	r3,r2
 20170d4:	e0bff817 	ldw	r2,-32(fp)
 20170d8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 20170dc:	e0bff817 	ldw	r2,-32(fp)
 20170e0:	10c00417 	ldw	r3,16(r2)
 20170e4:	e0bff817 	ldw	r2,-32(fp)
 20170e8:	10800217 	ldw	r2,8(r2)
 20170ec:	1880041e 	bne	r3,r2,2017100 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 20170f0:	e0bff817 	ldw	r2,-32(fp)
 20170f4:	10c00117 	ldw	r3,4(r2)
 20170f8:	e0bff817 	ldw	r2,-32(fp)
 20170fc:	10c00415 	stw	r3,16(r2)
 2017100:	e0bff617 	ldw	r2,-40(fp)
 2017104:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017108:	e0bff717 	ldw	r2,-36(fp)
 201710c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2017110:	e0bfff17 	ldw	r2,-4(fp)
 2017114:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 2017118:	e0bff517 	ldw	r2,-44(fp)
 201711c:	00004306 	br	201722c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2017120:	d0a73a17 	ldw	r2,-25368(gp)
 2017124:	d0e73a17 	ldw	r3,-25368(gp)
 2017128:	18c00c03 	ldbu	r3,48(r3)
 201712c:	18c00114 	ori	r3,r3,4
 2017130:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2017134:	d0a73a17 	ldw	r2,-25368(gp)
 2017138:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 201713c:	d0a73a17 	ldw	r2,-25368(gp)
 2017140:	e0fffe0b 	ldhu	r3,-8(fp)
 2017144:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 2017148:	e13ffd17 	ldw	r4,-12(fp)
 201714c:	2012f480 	call	2012f48 <OS_EventTaskWait>
 2017150:	e0bff617 	ldw	r2,-40(fp)
 2017154:	e0bffb15 	stw	r2,-20(fp)
 2017158:	e0bffb17 	ldw	r2,-20(fp)
 201715c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2017160:	20137fc0 	call	20137fc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017164:	0005303a 	rdctl	r2,status
 2017168:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201716c:	e0fff917 	ldw	r3,-28(fp)
 2017170:	00bfff84 	movi	r2,-2
 2017174:	1884703a 	and	r2,r3,r2
 2017178:	1001703a 	wrctl	status,r2
  
  return context;
 201717c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2017180:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2017184:	d0a73a17 	ldw	r2,-25368(gp)
 2017188:	10800c43 	ldbu	r2,49(r2)
 201718c:	10803fcc 	andi	r2,r2,255
 2017190:	10000326 	beq	r2,zero,20171a0 <OSQPend+0x1ec>
 2017194:	108000a0 	cmpeqi	r2,r2,2
 2017198:	1000071e 	bne	r2,zero,20171b8 <OSQPend+0x204>
 201719c:	00000b06 	br	20171cc <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 20171a0:	d0a73a17 	ldw	r2,-25368(gp)
 20171a4:	10800917 	ldw	r2,36(r2)
 20171a8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 20171ac:	e0bfff17 	ldw	r2,-4(fp)
 20171b0:	10000005 	stb	zero,0(r2)
             break;
 20171b4:	00000e06 	br	20171f0 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 20171b8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 20171bc:	e0bfff17 	ldw	r2,-4(fp)
 20171c0:	00c00384 	movi	r3,14
 20171c4:	10c00005 	stb	r3,0(r2)
             break;
 20171c8:	00000906 	br	20171f0 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 20171cc:	d0a73a17 	ldw	r2,-25368(gp)
 20171d0:	e17ffd17 	ldw	r5,-12(fp)
 20171d4:	1009883a 	mov	r4,r2
 20171d8:	20131a80 	call	20131a8 <OS_EventTaskRemove>
             pmsg = (void *)0;
 20171dc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 20171e0:	e0bfff17 	ldw	r2,-4(fp)
 20171e4:	00c00284 	movi	r3,10
 20171e8:	10c00005 	stb	r3,0(r2)
             break;
 20171ec:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 20171f0:	d0a73a17 	ldw	r2,-25368(gp)
 20171f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 20171f8:	d0a73a17 	ldw	r2,-25368(gp)
 20171fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2017200:	d0a73a17 	ldw	r2,-25368(gp)
 2017204:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2017208:	d0a73a17 	ldw	r2,-25368(gp)
 201720c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2017210:	d0a73a17 	ldw	r2,-25368(gp)
 2017214:	10000915 	stw	zero,36(r2)
 2017218:	e0bff617 	ldw	r2,-40(fp)
 201721c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017220:	e0bffa17 	ldw	r2,-24(fp)
 2017224:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2017228:	e0bff517 	ldw	r2,-44(fp)
}
 201722c:	e037883a 	mov	sp,fp
 2017230:	dfc00117 	ldw	ra,4(sp)
 2017234:	df000017 	ldw	fp,0(sp)
 2017238:	dec00204 	addi	sp,sp,8
 201723c:	f800283a 	ret

02017240 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2017240:	defff604 	addi	sp,sp,-40
 2017244:	dfc00915 	stw	ra,36(sp)
 2017248:	df000815 	stw	fp,32(sp)
 201724c:	df000804 	addi	fp,sp,32
 2017250:	e13ffd15 	stw	r4,-12(fp)
 2017254:	2805883a 	mov	r2,r5
 2017258:	e1bfff15 	stw	r6,-4(fp)
 201725c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017260:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2017264:	e0bfff17 	ldw	r2,-4(fp)
 2017268:	1000021e 	bne	r2,zero,2017274 <OSQPendAbort+0x34>
        return (0);
 201726c:	0005883a 	mov	r2,zero
 2017270:	00004906 	br	2017398 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2017274:	e0bffd17 	ldw	r2,-12(fp)
 2017278:	1000051e 	bne	r2,zero,2017290 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201727c:	e0bfff17 	ldw	r2,-4(fp)
 2017280:	00c00104 	movi	r3,4
 2017284:	10c00005 	stb	r3,0(r2)
        return (0);
 2017288:	0005883a 	mov	r2,zero
 201728c:	00004206 	br	2017398 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2017290:	e0bffd17 	ldw	r2,-12(fp)
 2017294:	10800003 	ldbu	r2,0(r2)
 2017298:	10803fcc 	andi	r2,r2,255
 201729c:	108000a0 	cmpeqi	r2,r2,2
 20172a0:	1000051e 	bne	r2,zero,20172b8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20172a4:	e0bfff17 	ldw	r2,-4(fp)
 20172a8:	00c00044 	movi	r3,1
 20172ac:	10c00005 	stb	r3,0(r2)
        return (0);
 20172b0:	0005883a 	mov	r2,zero
 20172b4:	00003806 	br	2017398 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20172b8:	0005303a 	rdctl	r2,status
 20172bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20172c0:	e0fffc17 	ldw	r3,-16(fp)
 20172c4:	00bfff84 	movi	r2,-2
 20172c8:	1884703a 	and	r2,r3,r2
 20172cc:	1001703a 	wrctl	status,r2
  
  return context;
 20172d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20172d4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 20172d8:	e0bffd17 	ldw	r2,-12(fp)
 20172dc:	10800283 	ldbu	r2,10(r2)
 20172e0:	10803fcc 	andi	r2,r2,255
 20172e4:	10002526 	beq	r2,zero,201737c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 20172e8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 20172ec:	e0bffe03 	ldbu	r2,-8(fp)
 20172f0:	10800060 	cmpeqi	r2,r2,1
 20172f4:	10000e26 	beq	r2,zero,2017330 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 20172f8:	00000806 	br	201731c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20172fc:	01c00084 	movi	r7,2
 2017300:	01800104 	movi	r6,4
 2017304:	000b883a 	mov	r5,zero
 2017308:	e13ffd17 	ldw	r4,-12(fp)
 201730c:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                     nbr_tasks++;
 2017310:	e0bff803 	ldbu	r2,-32(fp)
 2017314:	10800044 	addi	r2,r2,1
 2017318:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201731c:	e0bffd17 	ldw	r2,-12(fp)
 2017320:	10800283 	ldbu	r2,10(r2)
 2017324:	10803fcc 	andi	r2,r2,255
 2017328:	103ff41e 	bne	r2,zero,20172fc <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201732c:	00000906 	br	2017354 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2017330:	01c00084 	movi	r7,2
 2017334:	01800104 	movi	r6,4
 2017338:	000b883a 	mov	r5,zero
 201733c:	e13ffd17 	ldw	r4,-12(fp)
 2017340:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                 nbr_tasks++;
 2017344:	e0bff803 	ldbu	r2,-32(fp)
 2017348:	10800044 	addi	r2,r2,1
 201734c:	e0bff805 	stb	r2,-32(fp)
                 break;
 2017350:	0001883a 	nop
 2017354:	e0bff917 	ldw	r2,-28(fp)
 2017358:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201735c:	e0bffa17 	ldw	r2,-24(fp)
 2017360:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2017364:	20137fc0 	call	20137fc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2017368:	e0bfff17 	ldw	r2,-4(fp)
 201736c:	00c00384 	movi	r3,14
 2017370:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2017374:	e0bff803 	ldbu	r2,-32(fp)
 2017378:	00000706 	br	2017398 <OSQPendAbort+0x158>
 201737c:	e0bff917 	ldw	r2,-28(fp)
 2017380:	e0bffb15 	stw	r2,-20(fp)
 2017384:	e0bffb17 	ldw	r2,-20(fp)
 2017388:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201738c:	e0bfff17 	ldw	r2,-4(fp)
 2017390:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2017394:	0005883a 	mov	r2,zero
}
 2017398:	e037883a 	mov	sp,fp
 201739c:	dfc00117 	ldw	ra,4(sp)
 20173a0:	df000017 	ldw	fp,0(sp)
 20173a4:	dec00204 	addi	sp,sp,8
 20173a8:	f800283a 	ret

020173ac <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 20173ac:	defff604 	addi	sp,sp,-40
 20173b0:	dfc00915 	stw	ra,36(sp)
 20173b4:	df000815 	stw	fp,32(sp)
 20173b8:	df000804 	addi	fp,sp,32
 20173bc:	e13ffe15 	stw	r4,-8(fp)
 20173c0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20173c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 20173c8:	e0bffe17 	ldw	r2,-8(fp)
 20173cc:	1000021e 	bne	r2,zero,20173d8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 20173d0:	00800104 	movi	r2,4
 20173d4:	00004a06 	br	2017500 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 20173d8:	e0bffe17 	ldw	r2,-8(fp)
 20173dc:	10800003 	ldbu	r2,0(r2)
 20173e0:	10803fcc 	andi	r2,r2,255
 20173e4:	108000a0 	cmpeqi	r2,r2,2
 20173e8:	1000021e 	bne	r2,zero,20173f4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 20173ec:	00800044 	movi	r2,1
 20173f0:	00004306 	br	2017500 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20173f4:	0005303a 	rdctl	r2,status
 20173f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20173fc:	e0fffd17 	ldw	r3,-12(fp)
 2017400:	00bfff84 	movi	r2,-2
 2017404:	1884703a 	and	r2,r3,r2
 2017408:	1001703a 	wrctl	status,r2
  
  return context;
 201740c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017410:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 2017414:	e0bffe17 	ldw	r2,-8(fp)
 2017418:	10800283 	ldbu	r2,10(r2)
 201741c:	10803fcc 	andi	r2,r2,255
 2017420:	10000c26 	beq	r2,zero,2017454 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2017424:	000f883a 	mov	r7,zero
 2017428:	01800104 	movi	r6,4
 201742c:	e17fff17 	ldw	r5,-4(fp)
 2017430:	e13ffe17 	ldw	r4,-8(fp)
 2017434:	2012db00 	call	2012db0 <OS_EventTaskRdy>
 2017438:	e0bff817 	ldw	r2,-32(fp)
 201743c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017440:	e0bff917 	ldw	r2,-28(fp)
 2017444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 2017448:	20137fc0 	call	20137fc <OS_Sched>
        return (OS_ERR_NONE);
 201744c:	0005883a 	mov	r2,zero
 2017450:	00002b06 	br	2017500 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 2017454:	e0bffe17 	ldw	r2,-8(fp)
 2017458:	10800117 	ldw	r2,4(r2)
 201745c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 2017460:	e0bffb17 	ldw	r2,-20(fp)
 2017464:	10c0058b 	ldhu	r3,22(r2)
 2017468:	e0bffb17 	ldw	r2,-20(fp)
 201746c:	1080050b 	ldhu	r2,20(r2)
 2017470:	18ffffcc 	andi	r3,r3,65535
 2017474:	10bfffcc 	andi	r2,r2,65535
 2017478:	18800636 	bltu	r3,r2,2017494 <OSQPost+0xe8>
 201747c:	e0bff817 	ldw	r2,-32(fp)
 2017480:	e0bffa15 	stw	r2,-24(fp)
 2017484:	e0bffa17 	ldw	r2,-24(fp)
 2017488:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201748c:	00800784 	movi	r2,30
 2017490:	00001b06 	br	2017500 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2017494:	e0bffb17 	ldw	r2,-20(fp)
 2017498:	10800317 	ldw	r2,12(r2)
 201749c:	11000104 	addi	r4,r2,4
 20174a0:	e0fffb17 	ldw	r3,-20(fp)
 20174a4:	19000315 	stw	r4,12(r3)
 20174a8:	e0ffff17 	ldw	r3,-4(fp)
 20174ac:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 20174b0:	e0bffb17 	ldw	r2,-20(fp)
 20174b4:	1080058b 	ldhu	r2,22(r2)
 20174b8:	10800044 	addi	r2,r2,1
 20174bc:	1007883a 	mov	r3,r2
 20174c0:	e0bffb17 	ldw	r2,-20(fp)
 20174c4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 20174c8:	e0bffb17 	ldw	r2,-20(fp)
 20174cc:	10c00317 	ldw	r3,12(r2)
 20174d0:	e0bffb17 	ldw	r2,-20(fp)
 20174d4:	10800217 	ldw	r2,8(r2)
 20174d8:	1880041e 	bne	r3,r2,20174ec <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 20174dc:	e0bffb17 	ldw	r2,-20(fp)
 20174e0:	10c00117 	ldw	r3,4(r2)
 20174e4:	e0bffb17 	ldw	r2,-20(fp)
 20174e8:	10c00315 	stw	r3,12(r2)
 20174ec:	e0bff817 	ldw	r2,-32(fp)
 20174f0:	e0bffc15 	stw	r2,-16(fp)
 20174f4:	e0bffc17 	ldw	r2,-16(fp)
 20174f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20174fc:	0005883a 	mov	r2,zero
}
 2017500:	e037883a 	mov	sp,fp
 2017504:	dfc00117 	ldw	ra,4(sp)
 2017508:	df000017 	ldw	fp,0(sp)
 201750c:	dec00204 	addi	sp,sp,8
 2017510:	f800283a 	ret

02017514 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 2017514:	defff604 	addi	sp,sp,-40
 2017518:	dfc00915 	stw	ra,36(sp)
 201751c:	df000815 	stw	fp,32(sp)
 2017520:	df000804 	addi	fp,sp,32
 2017524:	e13ffe15 	stw	r4,-8(fp)
 2017528:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201752c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017530:	e0bffe17 	ldw	r2,-8(fp)
 2017534:	1000021e 	bne	r2,zero,2017540 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2017538:	00800104 	movi	r2,4
 201753c:	00004c06 	br	2017670 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2017540:	e0bffe17 	ldw	r2,-8(fp)
 2017544:	10800003 	ldbu	r2,0(r2)
 2017548:	10803fcc 	andi	r2,r2,255
 201754c:	108000a0 	cmpeqi	r2,r2,2
 2017550:	1000021e 	bne	r2,zero,201755c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 2017554:	00800044 	movi	r2,1
 2017558:	00004506 	br	2017670 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201755c:	0005303a 	rdctl	r2,status
 2017560:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017564:	e0fffd17 	ldw	r3,-12(fp)
 2017568:	00bfff84 	movi	r2,-2
 201756c:	1884703a 	and	r2,r3,r2
 2017570:	1001703a 	wrctl	status,r2
  
  return context;
 2017574:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017578:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 201757c:	e0bffe17 	ldw	r2,-8(fp)
 2017580:	10800283 	ldbu	r2,10(r2)
 2017584:	10803fcc 	andi	r2,r2,255
 2017588:	10000c26 	beq	r2,zero,20175bc <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201758c:	000f883a 	mov	r7,zero
 2017590:	01800104 	movi	r6,4
 2017594:	e17fff17 	ldw	r5,-4(fp)
 2017598:	e13ffe17 	ldw	r4,-8(fp)
 201759c:	2012db00 	call	2012db0 <OS_EventTaskRdy>
 20175a0:	e0bff817 	ldw	r2,-32(fp)
 20175a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20175a8:	e0bff917 	ldw	r2,-28(fp)
 20175ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 20175b0:	20137fc0 	call	20137fc <OS_Sched>
        return (OS_ERR_NONE);
 20175b4:	0005883a 	mov	r2,zero
 20175b8:	00002d06 	br	2017670 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 20175bc:	e0bffe17 	ldw	r2,-8(fp)
 20175c0:	10800117 	ldw	r2,4(r2)
 20175c4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 20175c8:	e0bffb17 	ldw	r2,-20(fp)
 20175cc:	10c0058b 	ldhu	r3,22(r2)
 20175d0:	e0bffb17 	ldw	r2,-20(fp)
 20175d4:	1080050b 	ldhu	r2,20(r2)
 20175d8:	18ffffcc 	andi	r3,r3,65535
 20175dc:	10bfffcc 	andi	r2,r2,65535
 20175e0:	18800636 	bltu	r3,r2,20175fc <OSQPostFront+0xe8>
 20175e4:	e0bff817 	ldw	r2,-32(fp)
 20175e8:	e0bffa15 	stw	r2,-24(fp)
 20175ec:	e0bffa17 	ldw	r2,-24(fp)
 20175f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20175f4:	00800784 	movi	r2,30
 20175f8:	00001d06 	br	2017670 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 20175fc:	e0bffb17 	ldw	r2,-20(fp)
 2017600:	10c00417 	ldw	r3,16(r2)
 2017604:	e0bffb17 	ldw	r2,-20(fp)
 2017608:	10800117 	ldw	r2,4(r2)
 201760c:	1880041e 	bne	r3,r2,2017620 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 2017610:	e0bffb17 	ldw	r2,-20(fp)
 2017614:	10c00217 	ldw	r3,8(r2)
 2017618:	e0bffb17 	ldw	r2,-20(fp)
 201761c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 2017620:	e0bffb17 	ldw	r2,-20(fp)
 2017624:	10800417 	ldw	r2,16(r2)
 2017628:	10ffff04 	addi	r3,r2,-4
 201762c:	e0bffb17 	ldw	r2,-20(fp)
 2017630:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 2017634:	e0bffb17 	ldw	r2,-20(fp)
 2017638:	10800417 	ldw	r2,16(r2)
 201763c:	e0ffff17 	ldw	r3,-4(fp)
 2017640:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2017644:	e0bffb17 	ldw	r2,-20(fp)
 2017648:	1080058b 	ldhu	r2,22(r2)
 201764c:	10800044 	addi	r2,r2,1
 2017650:	1007883a 	mov	r3,r2
 2017654:	e0bffb17 	ldw	r2,-20(fp)
 2017658:	10c0058d 	sth	r3,22(r2)
 201765c:	e0bff817 	ldw	r2,-32(fp)
 2017660:	e0bffc15 	stw	r2,-16(fp)
 2017664:	e0bffc17 	ldw	r2,-16(fp)
 2017668:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201766c:	0005883a 	mov	r2,zero
}
 2017670:	e037883a 	mov	sp,fp
 2017674:	dfc00117 	ldw	ra,4(sp)
 2017678:	df000017 	ldw	fp,0(sp)
 201767c:	dec00204 	addi	sp,sp,8
 2017680:	f800283a 	ret

02017684 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2017684:	defff504 	addi	sp,sp,-44
 2017688:	dfc00a15 	stw	ra,40(sp)
 201768c:	df000915 	stw	fp,36(sp)
 2017690:	df000904 	addi	fp,sp,36
 2017694:	e13ffd15 	stw	r4,-12(fp)
 2017698:	e17ffe15 	stw	r5,-8(fp)
 201769c:	3005883a 	mov	r2,r6
 20176a0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20176a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20176a8:	e0bffd17 	ldw	r2,-12(fp)
 20176ac:	1000021e 	bne	r2,zero,20176b8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 20176b0:	00800104 	movi	r2,4
 20176b4:	00007106 	br	201787c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20176b8:	e0bffd17 	ldw	r2,-12(fp)
 20176bc:	10800003 	ldbu	r2,0(r2)
 20176c0:	10803fcc 	andi	r2,r2,255
 20176c4:	108000a0 	cmpeqi	r2,r2,2
 20176c8:	1000021e 	bne	r2,zero,20176d4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 20176cc:	00800044 	movi	r2,1
 20176d0:	00006a06 	br	201787c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20176d4:	0005303a 	rdctl	r2,status
 20176d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20176dc:	e0fffc17 	ldw	r3,-16(fp)
 20176e0:	00bfff84 	movi	r2,-2
 20176e4:	1884703a 	and	r2,r3,r2
 20176e8:	1001703a 	wrctl	status,r2
  
  return context;
 20176ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20176f0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 20176f4:	e0bffd17 	ldw	r2,-12(fp)
 20176f8:	10800283 	ldbu	r2,10(r2)
 20176fc:	10803fcc 	andi	r2,r2,255
 2017700:	10001d26 	beq	r2,zero,2017778 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2017704:	e0bfff03 	ldbu	r2,-4(fp)
 2017708:	1080004c 	andi	r2,r2,1
 201770c:	10000b26 	beq	r2,zero,201773c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2017710:	00000506 	br	2017728 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2017714:	000f883a 	mov	r7,zero
 2017718:	01800104 	movi	r6,4
 201771c:	e17ffe17 	ldw	r5,-8(fp)
 2017720:	e13ffd17 	ldw	r4,-12(fp)
 2017724:	2012db00 	call	2012db0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2017728:	e0bffd17 	ldw	r2,-12(fp)
 201772c:	10800283 	ldbu	r2,10(r2)
 2017730:	10803fcc 	andi	r2,r2,255
 2017734:	103ff71e 	bne	r2,zero,2017714 <OSQPostOpt+0x90>
 2017738:	00000506 	br	2017750 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201773c:	000f883a 	mov	r7,zero
 2017740:	01800104 	movi	r6,4
 2017744:	e17ffe17 	ldw	r5,-8(fp)
 2017748:	e13ffd17 	ldw	r4,-12(fp)
 201774c:	2012db00 	call	2012db0 <OS_EventTaskRdy>
 2017750:	e0bff717 	ldw	r2,-36(fp)
 2017754:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017758:	e0bff817 	ldw	r2,-32(fp)
 201775c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2017760:	e0bfff03 	ldbu	r2,-4(fp)
 2017764:	1080010c 	andi	r2,r2,4
 2017768:	1000011e 	bne	r2,zero,2017770 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 201776c:	20137fc0 	call	20137fc <OS_Sched>
        }
        return (OS_ERR_NONE);
 2017770:	0005883a 	mov	r2,zero
 2017774:	00004106 	br	201787c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2017778:	e0bffd17 	ldw	r2,-12(fp)
 201777c:	10800117 	ldw	r2,4(r2)
 2017780:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2017784:	e0bffa17 	ldw	r2,-24(fp)
 2017788:	10c0058b 	ldhu	r3,22(r2)
 201778c:	e0bffa17 	ldw	r2,-24(fp)
 2017790:	1080050b 	ldhu	r2,20(r2)
 2017794:	18ffffcc 	andi	r3,r3,65535
 2017798:	10bfffcc 	andi	r2,r2,65535
 201779c:	18800636 	bltu	r3,r2,20177b8 <OSQPostOpt+0x134>
 20177a0:	e0bff717 	ldw	r2,-36(fp)
 20177a4:	e0bff915 	stw	r2,-28(fp)
 20177a8:	e0bff917 	ldw	r2,-28(fp)
 20177ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20177b0:	00800784 	movi	r2,30
 20177b4:	00003106 	br	201787c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 20177b8:	e0bfff03 	ldbu	r2,-4(fp)
 20177bc:	1080008c 	andi	r2,r2,2
 20177c0:	10001326 	beq	r2,zero,2017810 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 20177c4:	e0bffa17 	ldw	r2,-24(fp)
 20177c8:	10c00417 	ldw	r3,16(r2)
 20177cc:	e0bffa17 	ldw	r2,-24(fp)
 20177d0:	10800117 	ldw	r2,4(r2)
 20177d4:	1880041e 	bne	r3,r2,20177e8 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 20177d8:	e0bffa17 	ldw	r2,-24(fp)
 20177dc:	10c00217 	ldw	r3,8(r2)
 20177e0:	e0bffa17 	ldw	r2,-24(fp)
 20177e4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 20177e8:	e0bffa17 	ldw	r2,-24(fp)
 20177ec:	10800417 	ldw	r2,16(r2)
 20177f0:	10ffff04 	addi	r3,r2,-4
 20177f4:	e0bffa17 	ldw	r2,-24(fp)
 20177f8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 20177fc:	e0bffa17 	ldw	r2,-24(fp)
 2017800:	10800417 	ldw	r2,16(r2)
 2017804:	e0fffe17 	ldw	r3,-8(fp)
 2017808:	10c00015 	stw	r3,0(r2)
 201780c:	00001006 	br	2017850 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2017810:	e0bffa17 	ldw	r2,-24(fp)
 2017814:	10800317 	ldw	r2,12(r2)
 2017818:	11000104 	addi	r4,r2,4
 201781c:	e0fffa17 	ldw	r3,-24(fp)
 2017820:	19000315 	stw	r4,12(r3)
 2017824:	e0fffe17 	ldw	r3,-8(fp)
 2017828:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 201782c:	e0bffa17 	ldw	r2,-24(fp)
 2017830:	10c00317 	ldw	r3,12(r2)
 2017834:	e0bffa17 	ldw	r2,-24(fp)
 2017838:	10800217 	ldw	r2,8(r2)
 201783c:	1880041e 	bne	r3,r2,2017850 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 2017840:	e0bffa17 	ldw	r2,-24(fp)
 2017844:	10c00117 	ldw	r3,4(r2)
 2017848:	e0bffa17 	ldw	r2,-24(fp)
 201784c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2017850:	e0bffa17 	ldw	r2,-24(fp)
 2017854:	1080058b 	ldhu	r2,22(r2)
 2017858:	10800044 	addi	r2,r2,1
 201785c:	1007883a 	mov	r3,r2
 2017860:	e0bffa17 	ldw	r2,-24(fp)
 2017864:	10c0058d 	sth	r3,22(r2)
 2017868:	e0bff717 	ldw	r2,-36(fp)
 201786c:	e0bffb15 	stw	r2,-20(fp)
 2017870:	e0bffb17 	ldw	r2,-20(fp)
 2017874:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2017878:	0005883a 	mov	r2,zero
}
 201787c:	e037883a 	mov	sp,fp
 2017880:	dfc00117 	ldw	ra,4(sp)
 2017884:	df000017 	ldw	fp,0(sp)
 2017888:	dec00204 	addi	sp,sp,8
 201788c:	f800283a 	ret

02017890 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2017890:	defff604 	addi	sp,sp,-40
 2017894:	df000915 	stw	fp,36(sp)
 2017898:	df000904 	addi	fp,sp,36
 201789c:	e13ffe15 	stw	r4,-8(fp)
 20178a0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20178a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 20178a8:	e0bffe17 	ldw	r2,-8(fp)
 20178ac:	1000021e 	bne	r2,zero,20178b8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 20178b0:	00800104 	movi	r2,4
 20178b4:	00004906 	br	20179dc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 20178b8:	e0bfff17 	ldw	r2,-4(fp)
 20178bc:	1000021e 	bne	r2,zero,20178c8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 20178c0:	00800244 	movi	r2,9
 20178c4:	00004506 	br	20179dc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 20178c8:	e0bffe17 	ldw	r2,-8(fp)
 20178cc:	10800003 	ldbu	r2,0(r2)
 20178d0:	10803fcc 	andi	r2,r2,255
 20178d4:	108000a0 	cmpeqi	r2,r2,2
 20178d8:	1000021e 	bne	r2,zero,20178e4 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 20178dc:	00800044 	movi	r2,1
 20178e0:	00003e06 	br	20179dc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20178e4:	0005303a 	rdctl	r2,status
 20178e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20178ec:	e0fffd17 	ldw	r3,-12(fp)
 20178f0:	00bfff84 	movi	r2,-2
 20178f4:	1884703a 	and	r2,r3,r2
 20178f8:	1001703a 	wrctl	status,r2
  
  return context;
 20178fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017900:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 2017904:	e0bffe17 	ldw	r2,-8(fp)
 2017908:	10c00283 	ldbu	r3,10(r2)
 201790c:	e0bfff17 	ldw	r2,-4(fp)
 2017910:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 2017914:	e0bffe17 	ldw	r2,-8(fp)
 2017918:	108002c4 	addi	r2,r2,11
 201791c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2017920:	e0bfff17 	ldw	r2,-4(fp)
 2017924:	10800204 	addi	r2,r2,8
 2017928:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201792c:	e03ff705 	stb	zero,-36(fp)
 2017930:	00000b06 	br	2017960 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 2017934:	e0bff917 	ldw	r2,-28(fp)
 2017938:	10c00044 	addi	r3,r2,1
 201793c:	e0fff915 	stw	r3,-28(fp)
 2017940:	e0fff817 	ldw	r3,-32(fp)
 2017944:	19000044 	addi	r4,r3,1
 2017948:	e13ff815 	stw	r4,-32(fp)
 201794c:	18c00003 	ldbu	r3,0(r3)
 2017950:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2017954:	e0bff703 	ldbu	r2,-36(fp)
 2017958:	10800044 	addi	r2,r2,1
 201795c:	e0bff705 	stb	r2,-36(fp)
 2017960:	e0bff703 	ldbu	r2,-36(fp)
 2017964:	108000f0 	cmpltui	r2,r2,3
 2017968:	103ff21e 	bne	r2,zero,2017934 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 201796c:	e0bffe17 	ldw	r2,-8(fp)
 2017970:	10800117 	ldw	r2,4(r2)
 2017974:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 2017978:	e0bffc17 	ldw	r2,-16(fp)
 201797c:	1080058b 	ldhu	r2,22(r2)
 2017980:	10bfffcc 	andi	r2,r2,65535
 2017984:	10000626 	beq	r2,zero,20179a0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2017988:	e0bffc17 	ldw	r2,-16(fp)
 201798c:	10800417 	ldw	r2,16(r2)
 2017990:	10c00017 	ldw	r3,0(r2)
 2017994:	e0bfff17 	ldw	r2,-4(fp)
 2017998:	10c00015 	stw	r3,0(r2)
 201799c:	00000206 	br	20179a8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 20179a0:	e0bfff17 	ldw	r2,-4(fp)
 20179a4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 20179a8:	e0bffc17 	ldw	r2,-16(fp)
 20179ac:	10c0058b 	ldhu	r3,22(r2)
 20179b0:	e0bfff17 	ldw	r2,-4(fp)
 20179b4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 20179b8:	e0bffc17 	ldw	r2,-16(fp)
 20179bc:	10c0050b 	ldhu	r3,20(r2)
 20179c0:	e0bfff17 	ldw	r2,-4(fp)
 20179c4:	10c0018d 	sth	r3,6(r2)
 20179c8:	e0bffa17 	ldw	r2,-24(fp)
 20179cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20179d0:	e0bffb17 	ldw	r2,-20(fp)
 20179d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20179d8:	0005883a 	mov	r2,zero
}
 20179dc:	e037883a 	mov	sp,fp
 20179e0:	df000017 	ldw	fp,0(sp)
 20179e4:	dec00104 	addi	sp,sp,4
 20179e8:	f800283a 	ret

020179ec <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 20179ec:	defffb04 	addi	sp,sp,-20
 20179f0:	dfc00415 	stw	ra,16(sp)
 20179f4:	df000315 	stw	fp,12(sp)
 20179f8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 20179fc:	01407804 	movi	r5,480
 2017a00:	010080b4 	movhi	r4,514
 2017a04:	21171904 	addi	r4,r4,23652
 2017a08:	20137400 	call	2013740 <OS_MemClr>
    pq1 = &OSQTbl[0];
 2017a0c:	008080b4 	movhi	r2,514
 2017a10:	10971904 	addi	r2,r2,23652
 2017a14:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2017a18:	008080b4 	movhi	r2,514
 2017a1c:	10971f04 	addi	r2,r2,23676
 2017a20:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2017a24:	e03ffd0d 	sth	zero,-12(fp)
 2017a28:	00000c06 	br	2017a5c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 2017a2c:	e0bffe17 	ldw	r2,-8(fp)
 2017a30:	e0ffff17 	ldw	r3,-4(fp)
 2017a34:	10c00015 	stw	r3,0(r2)
        pq1++;
 2017a38:	e0bffe17 	ldw	r2,-8(fp)
 2017a3c:	10800604 	addi	r2,r2,24
 2017a40:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 2017a44:	e0bfff17 	ldw	r2,-4(fp)
 2017a48:	10800604 	addi	r2,r2,24
 2017a4c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2017a50:	e0bffd0b 	ldhu	r2,-12(fp)
 2017a54:	10800044 	addi	r2,r2,1
 2017a58:	e0bffd0d 	sth	r2,-12(fp)
 2017a5c:	e0bffd0b 	ldhu	r2,-12(fp)
 2017a60:	108004f0 	cmpltui	r2,r2,19
 2017a64:	103ff11e 	bne	r2,zero,2017a2c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 2017a68:	e0bffe17 	ldw	r2,-8(fp)
 2017a6c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 2017a70:	008080b4 	movhi	r2,514
 2017a74:	10971904 	addi	r2,r2,23652
 2017a78:	d0a73615 	stw	r2,-25384(gp)
#endif
}
 2017a7c:	0001883a 	nop
 2017a80:	e037883a 	mov	sp,fp
 2017a84:	dfc00117 	ldw	ra,4(sp)
 2017a88:	df000017 	ldw	fp,0(sp)
 2017a8c:	dec00204 	addi	sp,sp,8
 2017a90:	f800283a 	ret

02017a94 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2017a94:	defffa04 	addi	sp,sp,-24
 2017a98:	df000515 	stw	fp,20(sp)
 2017a9c:	df000504 	addi	fp,sp,20
 2017aa0:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017aa4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017aa8:	e0bfff17 	ldw	r2,-4(fp)
 2017aac:	1000021e 	bne	r2,zero,2017ab8 <OSSemAccept+0x24>
        return (0);
 2017ab0:	0005883a 	mov	r2,zero
 2017ab4:	00001f06 	br	2017b34 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2017ab8:	e0bfff17 	ldw	r2,-4(fp)
 2017abc:	10800003 	ldbu	r2,0(r2)
 2017ac0:	10803fcc 	andi	r2,r2,255
 2017ac4:	108000e0 	cmpeqi	r2,r2,3
 2017ac8:	1000021e 	bne	r2,zero,2017ad4 <OSSemAccept+0x40>
        return (0);
 2017acc:	0005883a 	mov	r2,zero
 2017ad0:	00001806 	br	2017b34 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ad4:	0005303a 	rdctl	r2,status
 2017ad8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017adc:	e0fffe17 	ldw	r3,-8(fp)
 2017ae0:	00bfff84 	movi	r2,-2
 2017ae4:	1884703a 	and	r2,r3,r2
 2017ae8:	1001703a 	wrctl	status,r2
  
  return context;
 2017aec:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2017af0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 2017af4:	e0bfff17 	ldw	r2,-4(fp)
 2017af8:	1080020b 	ldhu	r2,8(r2)
 2017afc:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 2017b00:	e0bffd0b 	ldhu	r2,-12(fp)
 2017b04:	10000626 	beq	r2,zero,2017b20 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 2017b08:	e0bfff17 	ldw	r2,-4(fp)
 2017b0c:	1080020b 	ldhu	r2,8(r2)
 2017b10:	10bfffc4 	addi	r2,r2,-1
 2017b14:	1007883a 	mov	r3,r2
 2017b18:	e0bfff17 	ldw	r2,-4(fp)
 2017b1c:	10c0020d 	sth	r3,8(r2)
 2017b20:	e0bffb17 	ldw	r2,-20(fp)
 2017b24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017b28:	e0bffc17 	ldw	r2,-16(fp)
 2017b2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 2017b30:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2017b34:	e037883a 	mov	sp,fp
 2017b38:	df000017 	ldw	fp,0(sp)
 2017b3c:	dec00104 	addi	sp,sp,4
 2017b40:	f800283a 	ret

02017b44 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 2017b44:	defff904 	addi	sp,sp,-28
 2017b48:	dfc00615 	stw	ra,24(sp)
 2017b4c:	df000515 	stw	fp,20(sp)
 2017b50:	df000504 	addi	fp,sp,20
 2017b54:	2005883a 	mov	r2,r4
 2017b58:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017b5c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2017b60:	d0a73903 	ldbu	r2,-25372(gp)
 2017b64:	10803fcc 	andi	r2,r2,255
 2017b68:	10000226 	beq	r2,zero,2017b74 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 2017b6c:	0005883a 	mov	r2,zero
 2017b70:	00002506 	br	2017c08 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017b74:	0005303a 	rdctl	r2,status
 2017b78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017b7c:	e0fffe17 	ldw	r3,-8(fp)
 2017b80:	00bfff84 	movi	r2,-2
 2017b84:	1884703a 	and	r2,r3,r2
 2017b88:	1001703a 	wrctl	status,r2
  
  return context;
 2017b8c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2017b90:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2017b94:	d0a73817 	ldw	r2,-25376(gp)
 2017b98:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2017b9c:	d0a73817 	ldw	r2,-25376(gp)
 2017ba0:	10000326 	beq	r2,zero,2017bb0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2017ba4:	d0a73817 	ldw	r2,-25376(gp)
 2017ba8:	10800117 	ldw	r2,4(r2)
 2017bac:	d0a73815 	stw	r2,-25376(gp)
 2017bb0:	e0bffb17 	ldw	r2,-20(fp)
 2017bb4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017bb8:	e0bffc17 	ldw	r2,-16(fp)
 2017bbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2017bc0:	e0bffd17 	ldw	r2,-12(fp)
 2017bc4:	10000f26 	beq	r2,zero,2017c04 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 2017bc8:	e0bffd17 	ldw	r2,-12(fp)
 2017bcc:	00c000c4 	movi	r3,3
 2017bd0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2017bd4:	e0bffd17 	ldw	r2,-12(fp)
 2017bd8:	e0ffff0b 	ldhu	r3,-4(fp)
 2017bdc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2017be0:	e0bffd17 	ldw	r2,-12(fp)
 2017be4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 2017be8:	e0bffd17 	ldw	r2,-12(fp)
 2017bec:	00c00fc4 	movi	r3,63
 2017bf0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2017bf4:	e0bffd17 	ldw	r2,-12(fp)
 2017bf8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2017bfc:	e13ffd17 	ldw	r4,-12(fp)
 2017c00:	20133600 	call	2013360 <OS_EventWaitListInit>
    }
    return (pevent);
 2017c04:	e0bffd17 	ldw	r2,-12(fp)
}
 2017c08:	e037883a 	mov	sp,fp
 2017c0c:	dfc00117 	ldw	ra,4(sp)
 2017c10:	df000017 	ldw	fp,0(sp)
 2017c14:	dec00204 	addi	sp,sp,8
 2017c18:	f800283a 	ret

02017c1c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2017c1c:	defff304 	addi	sp,sp,-52
 2017c20:	dfc00c15 	stw	ra,48(sp)
 2017c24:	df000b15 	stw	fp,44(sp)
 2017c28:	df000b04 	addi	fp,sp,44
 2017c2c:	e13ffd15 	stw	r4,-12(fp)
 2017c30:	2805883a 	mov	r2,r5
 2017c34:	e1bfff15 	stw	r6,-4(fp)
 2017c38:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017c3c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2017c40:	e0bfff17 	ldw	r2,-4(fp)
 2017c44:	1000021e 	bne	r2,zero,2017c50 <OSSemDel+0x34>
        return (pevent);
 2017c48:	e0bffd17 	ldw	r2,-12(fp)
 2017c4c:	00007e06 	br	2017e48 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2017c50:	e0bffd17 	ldw	r2,-12(fp)
 2017c54:	1000051e 	bne	r2,zero,2017c6c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2017c58:	e0bfff17 	ldw	r2,-4(fp)
 2017c5c:	00c00104 	movi	r3,4
 2017c60:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2017c64:	e0bffd17 	ldw	r2,-12(fp)
 2017c68:	00007706 	br	2017e48 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2017c6c:	e0bffd17 	ldw	r2,-12(fp)
 2017c70:	10800003 	ldbu	r2,0(r2)
 2017c74:	10803fcc 	andi	r2,r2,255
 2017c78:	108000e0 	cmpeqi	r2,r2,3
 2017c7c:	1000051e 	bne	r2,zero,2017c94 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2017c80:	e0bfff17 	ldw	r2,-4(fp)
 2017c84:	00c00044 	movi	r3,1
 2017c88:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2017c8c:	e0bffd17 	ldw	r2,-12(fp)
 2017c90:	00006d06 	br	2017e48 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2017c94:	d0a73903 	ldbu	r2,-25372(gp)
 2017c98:	10803fcc 	andi	r2,r2,255
 2017c9c:	10000526 	beq	r2,zero,2017cb4 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2017ca0:	e0bfff17 	ldw	r2,-4(fp)
 2017ca4:	00c003c4 	movi	r3,15
 2017ca8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2017cac:	e0bffd17 	ldw	r2,-12(fp)
 2017cb0:	00006506 	br	2017e48 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017cb4:	0005303a 	rdctl	r2,status
 2017cb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017cbc:	e0fffc17 	ldw	r3,-16(fp)
 2017cc0:	00bfff84 	movi	r2,-2
 2017cc4:	1884703a 	and	r2,r3,r2
 2017cc8:	1001703a 	wrctl	status,r2
  
  return context;
 2017ccc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017cd0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2017cd4:	e0bffd17 	ldw	r2,-12(fp)
 2017cd8:	10800283 	ldbu	r2,10(r2)
 2017cdc:	10803fcc 	andi	r2,r2,255
 2017ce0:	10000326 	beq	r2,zero,2017cf0 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2017ce4:	00800044 	movi	r2,1
 2017ce8:	e0bff505 	stb	r2,-44(fp)
 2017cec:	00000106 	br	2017cf4 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2017cf0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2017cf4:	e0bffe03 	ldbu	r2,-8(fp)
 2017cf8:	10000326 	beq	r2,zero,2017d08 <OSSemDel+0xec>
 2017cfc:	10800060 	cmpeqi	r2,r2,1
 2017d00:	1000281e 	bne	r2,zero,2017da4 <OSSemDel+0x188>
 2017d04:	00004506 	br	2017e1c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2017d08:	e0bff503 	ldbu	r2,-44(fp)
 2017d0c:	1000161e 	bne	r2,zero,2017d68 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2017d10:	e0bffd17 	ldw	r2,-12(fp)
 2017d14:	00c00fc4 	movi	r3,63
 2017d18:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2017d1c:	e0bffd17 	ldw	r2,-12(fp)
 2017d20:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2017d24:	e0bffd17 	ldw	r2,-12(fp)
 2017d28:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2017d2c:	d0e73817 	ldw	r3,-25376(gp)
 2017d30:	e0bffd17 	ldw	r2,-12(fp)
 2017d34:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2017d38:	e0bffd17 	ldw	r2,-12(fp)
 2017d3c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2017d40:	e0bffd17 	ldw	r2,-12(fp)
 2017d44:	d0a73815 	stw	r2,-25376(gp)
 2017d48:	e0bff717 	ldw	r2,-36(fp)
 2017d4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017d50:	e0bff817 	ldw	r2,-32(fp)
 2017d54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2017d58:	e0bfff17 	ldw	r2,-4(fp)
 2017d5c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 2017d60:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2017d64:	00003706 	br	2017e44 <OSSemDel+0x228>
 2017d68:	e0bff717 	ldw	r2,-36(fp)
 2017d6c:	e0bff915 	stw	r2,-28(fp)
 2017d70:	e0bff917 	ldw	r2,-28(fp)
 2017d74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2017d78:	e0bfff17 	ldw	r2,-4(fp)
 2017d7c:	00c01244 	movi	r3,73
 2017d80:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2017d84:	e0bffd17 	ldw	r2,-12(fp)
 2017d88:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2017d8c:	00002d06 	br	2017e44 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2017d90:	000f883a 	mov	r7,zero
 2017d94:	01800044 	movi	r6,1
 2017d98:	000b883a 	mov	r5,zero
 2017d9c:	e13ffd17 	ldw	r4,-12(fp)
 2017da0:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2017da4:	e0bffd17 	ldw	r2,-12(fp)
 2017da8:	10800283 	ldbu	r2,10(r2)
 2017dac:	10803fcc 	andi	r2,r2,255
 2017db0:	103ff71e 	bne	r2,zero,2017d90 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2017db4:	e0bffd17 	ldw	r2,-12(fp)
 2017db8:	00c00fc4 	movi	r3,63
 2017dbc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2017dc0:	e0bffd17 	ldw	r2,-12(fp)
 2017dc4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2017dc8:	e0bffd17 	ldw	r2,-12(fp)
 2017dcc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2017dd0:	d0e73817 	ldw	r3,-25376(gp)
 2017dd4:	e0bffd17 	ldw	r2,-12(fp)
 2017dd8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2017ddc:	e0bffd17 	ldw	r2,-12(fp)
 2017de0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2017de4:	e0bffd17 	ldw	r2,-12(fp)
 2017de8:	d0a73815 	stw	r2,-25376(gp)
 2017dec:	e0bff717 	ldw	r2,-36(fp)
 2017df0:	e0bffa15 	stw	r2,-24(fp)
 2017df4:	e0bffa17 	ldw	r2,-24(fp)
 2017df8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2017dfc:	e0bff503 	ldbu	r2,-44(fp)
 2017e00:	10800058 	cmpnei	r2,r2,1
 2017e04:	1000011e 	bne	r2,zero,2017e0c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2017e08:	20137fc0 	call	20137fc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2017e0c:	e0bfff17 	ldw	r2,-4(fp)
 2017e10:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 2017e14:	e03ff615 	stw	zero,-40(fp)
             break;
 2017e18:	00000a06 	br	2017e44 <OSSemDel+0x228>
 2017e1c:	e0bff717 	ldw	r2,-36(fp)
 2017e20:	e0bffb15 	stw	r2,-20(fp)
 2017e24:	e0bffb17 	ldw	r2,-20(fp)
 2017e28:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2017e2c:	e0bfff17 	ldw	r2,-4(fp)
 2017e30:	00c001c4 	movi	r3,7
 2017e34:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2017e38:	e0bffd17 	ldw	r2,-12(fp)
 2017e3c:	e0bff615 	stw	r2,-40(fp)
             break;
 2017e40:	0001883a 	nop
    }
    return (pevent_return);
 2017e44:	e0bff617 	ldw	r2,-40(fp)
}
 2017e48:	e037883a 	mov	sp,fp
 2017e4c:	dfc00117 	ldw	ra,4(sp)
 2017e50:	df000017 	ldw	fp,0(sp)
 2017e54:	dec00204 	addi	sp,sp,8
 2017e58:	f800283a 	ret

02017e5c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2017e5c:	defff504 	addi	sp,sp,-44
 2017e60:	dfc00a15 	stw	ra,40(sp)
 2017e64:	df000915 	stw	fp,36(sp)
 2017e68:	df000904 	addi	fp,sp,36
 2017e6c:	e13ffd15 	stw	r4,-12(fp)
 2017e70:	2805883a 	mov	r2,r5
 2017e74:	e1bfff15 	stw	r6,-4(fp)
 2017e78:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017e7c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2017e80:	e0bfff17 	ldw	r2,-4(fp)
 2017e84:	10007226 	beq	r2,zero,2018050 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017e88:	e0bffd17 	ldw	r2,-12(fp)
 2017e8c:	1000041e 	bne	r2,zero,2017ea0 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2017e90:	e0bfff17 	ldw	r2,-4(fp)
 2017e94:	00c00104 	movi	r3,4
 2017e98:	10c00005 	stb	r3,0(r2)
        return;
 2017e9c:	00006d06 	br	2018054 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2017ea0:	e0bffd17 	ldw	r2,-12(fp)
 2017ea4:	10800003 	ldbu	r2,0(r2)
 2017ea8:	10803fcc 	andi	r2,r2,255
 2017eac:	108000e0 	cmpeqi	r2,r2,3
 2017eb0:	1000041e 	bne	r2,zero,2017ec4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2017eb4:	e0bfff17 	ldw	r2,-4(fp)
 2017eb8:	00c00044 	movi	r3,1
 2017ebc:	10c00005 	stb	r3,0(r2)
        return;
 2017ec0:	00006406 	br	2018054 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2017ec4:	d0a73903 	ldbu	r2,-25372(gp)
 2017ec8:	10803fcc 	andi	r2,r2,255
 2017ecc:	10000426 	beq	r2,zero,2017ee0 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2017ed0:	e0bfff17 	ldw	r2,-4(fp)
 2017ed4:	00c00084 	movi	r3,2
 2017ed8:	10c00005 	stb	r3,0(r2)
        return;
 2017edc:	00005d06 	br	2018054 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2017ee0:	d0a72b03 	ldbu	r2,-25428(gp)
 2017ee4:	10803fcc 	andi	r2,r2,255
 2017ee8:	10000426 	beq	r2,zero,2017efc <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2017eec:	e0bfff17 	ldw	r2,-4(fp)
 2017ef0:	00c00344 	movi	r3,13
 2017ef4:	10c00005 	stb	r3,0(r2)
        return;
 2017ef8:	00005606 	br	2018054 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017efc:	0005303a 	rdctl	r2,status
 2017f00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017f04:	e0fffc17 	ldw	r3,-16(fp)
 2017f08:	00bfff84 	movi	r2,-2
 2017f0c:	1884703a 	and	r2,r3,r2
 2017f10:	1001703a 	wrctl	status,r2
  
  return context;
 2017f14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017f18:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 2017f1c:	e0bffd17 	ldw	r2,-12(fp)
 2017f20:	1080020b 	ldhu	r2,8(r2)
 2017f24:	10bfffcc 	andi	r2,r2,65535
 2017f28:	10000d26 	beq	r2,zero,2017f60 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 2017f2c:	e0bffd17 	ldw	r2,-12(fp)
 2017f30:	1080020b 	ldhu	r2,8(r2)
 2017f34:	10bfffc4 	addi	r2,r2,-1
 2017f38:	1007883a 	mov	r3,r2
 2017f3c:	e0bffd17 	ldw	r2,-12(fp)
 2017f40:	10c0020d 	sth	r3,8(r2)
 2017f44:	e0bff717 	ldw	r2,-36(fp)
 2017f48:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017f4c:	e0bff817 	ldw	r2,-32(fp)
 2017f50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2017f54:	e0bfff17 	ldw	r2,-4(fp)
 2017f58:	10000005 	stb	zero,0(r2)
        return;
 2017f5c:	00003d06 	br	2018054 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 2017f60:	d0a73a17 	ldw	r2,-25368(gp)
 2017f64:	d0e73a17 	ldw	r3,-25368(gp)
 2017f68:	18c00c03 	ldbu	r3,48(r3)
 2017f6c:	18c00054 	ori	r3,r3,1
 2017f70:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2017f74:	d0a73a17 	ldw	r2,-25368(gp)
 2017f78:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 2017f7c:	d0a73a17 	ldw	r2,-25368(gp)
 2017f80:	e0fffe0b 	ldhu	r3,-8(fp)
 2017f84:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2017f88:	e13ffd17 	ldw	r4,-12(fp)
 2017f8c:	2012f480 	call	2012f48 <OS_EventTaskWait>
 2017f90:	e0bff717 	ldw	r2,-36(fp)
 2017f94:	e0bffb15 	stw	r2,-20(fp)
 2017f98:	e0bffb17 	ldw	r2,-20(fp)
 2017f9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 2017fa0:	20137fc0 	call	20137fc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017fa4:	0005303a 	rdctl	r2,status
 2017fa8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017fac:	e0fff917 	ldw	r3,-28(fp)
 2017fb0:	00bfff84 	movi	r2,-2
 2017fb4:	1884703a 	and	r2,r3,r2
 2017fb8:	1001703a 	wrctl	status,r2
  
  return context;
 2017fbc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2017fc0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2017fc4:	d0a73a17 	ldw	r2,-25368(gp)
 2017fc8:	10800c43 	ldbu	r2,49(r2)
 2017fcc:	10803fcc 	andi	r2,r2,255
 2017fd0:	10000326 	beq	r2,zero,2017fe0 <OSSemPend+0x184>
 2017fd4:	108000a0 	cmpeqi	r2,r2,2
 2017fd8:	1000041e 	bne	r2,zero,2017fec <OSSemPend+0x190>
 2017fdc:	00000706 	br	2017ffc <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 2017fe0:	e0bfff17 	ldw	r2,-4(fp)
 2017fe4:	10000005 	stb	zero,0(r2)
             break;
 2017fe8:	00000c06 	br	201801c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2017fec:	e0bfff17 	ldw	r2,-4(fp)
 2017ff0:	00c00384 	movi	r3,14
 2017ff4:	10c00005 	stb	r3,0(r2)
             break;
 2017ff8:	00000806 	br	201801c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 2017ffc:	d0a73a17 	ldw	r2,-25368(gp)
 2018000:	e17ffd17 	ldw	r5,-12(fp)
 2018004:	1009883a 	mov	r4,r2
 2018008:	20131a80 	call	20131a8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201800c:	e0bfff17 	ldw	r2,-4(fp)
 2018010:	00c00284 	movi	r3,10
 2018014:	10c00005 	stb	r3,0(r2)
             break;
 2018018:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201801c:	d0a73a17 	ldw	r2,-25368(gp)
 2018020:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2018024:	d0a73a17 	ldw	r2,-25368(gp)
 2018028:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201802c:	d0a73a17 	ldw	r2,-25368(gp)
 2018030:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2018034:	d0a73a17 	ldw	r2,-25368(gp)
 2018038:	10000815 	stw	zero,32(r2)
 201803c:	e0bff717 	ldw	r2,-36(fp)
 2018040:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018044:	e0bffa17 	ldw	r2,-24(fp)
 2018048:	1001703a 	wrctl	status,r2
 201804c:	00000106 	br	2018054 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 2018050:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 2018054:	e037883a 	mov	sp,fp
 2018058:	dfc00117 	ldw	ra,4(sp)
 201805c:	df000017 	ldw	fp,0(sp)
 2018060:	dec00204 	addi	sp,sp,8
 2018064:	f800283a 	ret

02018068 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2018068:	defff604 	addi	sp,sp,-40
 201806c:	dfc00915 	stw	ra,36(sp)
 2018070:	df000815 	stw	fp,32(sp)
 2018074:	df000804 	addi	fp,sp,32
 2018078:	e13ffd15 	stw	r4,-12(fp)
 201807c:	2805883a 	mov	r2,r5
 2018080:	e1bfff15 	stw	r6,-4(fp)
 2018084:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018088:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201808c:	e0bfff17 	ldw	r2,-4(fp)
 2018090:	1000021e 	bne	r2,zero,201809c <OSSemPendAbort+0x34>
        return (0);
 2018094:	0005883a 	mov	r2,zero
 2018098:	00004906 	br	20181c0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201809c:	e0bffd17 	ldw	r2,-12(fp)
 20180a0:	1000051e 	bne	r2,zero,20180b8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20180a4:	e0bfff17 	ldw	r2,-4(fp)
 20180a8:	00c00104 	movi	r3,4
 20180ac:	10c00005 	stb	r3,0(r2)
        return (0);
 20180b0:	0005883a 	mov	r2,zero
 20180b4:	00004206 	br	20181c0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 20180b8:	e0bffd17 	ldw	r2,-12(fp)
 20180bc:	10800003 	ldbu	r2,0(r2)
 20180c0:	10803fcc 	andi	r2,r2,255
 20180c4:	108000e0 	cmpeqi	r2,r2,3
 20180c8:	1000051e 	bne	r2,zero,20180e0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 20180cc:	e0bfff17 	ldw	r2,-4(fp)
 20180d0:	00c00044 	movi	r3,1
 20180d4:	10c00005 	stb	r3,0(r2)
        return (0);
 20180d8:	0005883a 	mov	r2,zero
 20180dc:	00003806 	br	20181c0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20180e0:	0005303a 	rdctl	r2,status
 20180e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20180e8:	e0fffc17 	ldw	r3,-16(fp)
 20180ec:	00bfff84 	movi	r2,-2
 20180f0:	1884703a 	and	r2,r3,r2
 20180f4:	1001703a 	wrctl	status,r2
  
  return context;
 20180f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20180fc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 2018100:	e0bffd17 	ldw	r2,-12(fp)
 2018104:	10800283 	ldbu	r2,10(r2)
 2018108:	10803fcc 	andi	r2,r2,255
 201810c:	10002526 	beq	r2,zero,20181a4 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 2018110:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2018114:	e0bffe03 	ldbu	r2,-8(fp)
 2018118:	10800060 	cmpeqi	r2,r2,1
 201811c:	10000e26 	beq	r2,zero,2018158 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2018120:	00000806 	br	2018144 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2018124:	01c00084 	movi	r7,2
 2018128:	01800044 	movi	r6,1
 201812c:	000b883a 	mov	r5,zero
 2018130:	e13ffd17 	ldw	r4,-12(fp)
 2018134:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                     nbr_tasks++;
 2018138:	e0bff803 	ldbu	r2,-32(fp)
 201813c:	10800044 	addi	r2,r2,1
 2018140:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2018144:	e0bffd17 	ldw	r2,-12(fp)
 2018148:	10800283 	ldbu	r2,10(r2)
 201814c:	10803fcc 	andi	r2,r2,255
 2018150:	103ff41e 	bne	r2,zero,2018124 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2018154:	00000906 	br	201817c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2018158:	01c00084 	movi	r7,2
 201815c:	01800044 	movi	r6,1
 2018160:	000b883a 	mov	r5,zero
 2018164:	e13ffd17 	ldw	r4,-12(fp)
 2018168:	2012db00 	call	2012db0 <OS_EventTaskRdy>
                 nbr_tasks++;
 201816c:	e0bff803 	ldbu	r2,-32(fp)
 2018170:	10800044 	addi	r2,r2,1
 2018174:	e0bff805 	stb	r2,-32(fp)
                 break;
 2018178:	0001883a 	nop
 201817c:	e0bff917 	ldw	r2,-28(fp)
 2018180:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018184:	e0bffa17 	ldw	r2,-24(fp)
 2018188:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201818c:	20137fc0 	call	20137fc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2018190:	e0bfff17 	ldw	r2,-4(fp)
 2018194:	00c00384 	movi	r3,14
 2018198:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201819c:	e0bff803 	ldbu	r2,-32(fp)
 20181a0:	00000706 	br	20181c0 <OSSemPendAbort+0x158>
 20181a4:	e0bff917 	ldw	r2,-28(fp)
 20181a8:	e0bffb15 	stw	r2,-20(fp)
 20181ac:	e0bffb17 	ldw	r2,-20(fp)
 20181b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20181b4:	e0bfff17 	ldw	r2,-4(fp)
 20181b8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 20181bc:	0005883a 	mov	r2,zero
}
 20181c0:	e037883a 	mov	sp,fp
 20181c4:	dfc00117 	ldw	ra,4(sp)
 20181c8:	df000017 	ldw	fp,0(sp)
 20181cc:	dec00204 	addi	sp,sp,8
 20181d0:	f800283a 	ret

020181d4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 20181d4:	defff804 	addi	sp,sp,-32
 20181d8:	dfc00715 	stw	ra,28(sp)
 20181dc:	df000615 	stw	fp,24(sp)
 20181e0:	df000604 	addi	fp,sp,24
 20181e4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20181e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20181ec:	e0bfff17 	ldw	r2,-4(fp)
 20181f0:	1000021e 	bne	r2,zero,20181fc <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 20181f4:	00800104 	movi	r2,4
 20181f8:	00003506 	br	20182d0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 20181fc:	e0bfff17 	ldw	r2,-4(fp)
 2018200:	10800003 	ldbu	r2,0(r2)
 2018204:	10803fcc 	andi	r2,r2,255
 2018208:	108000e0 	cmpeqi	r2,r2,3
 201820c:	1000021e 	bne	r2,zero,2018218 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 2018210:	00800044 	movi	r2,1
 2018214:	00002e06 	br	20182d0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018218:	0005303a 	rdctl	r2,status
 201821c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018220:	e0fffe17 	ldw	r3,-8(fp)
 2018224:	00bfff84 	movi	r2,-2
 2018228:	1884703a 	and	r2,r3,r2
 201822c:	1001703a 	wrctl	status,r2
  
  return context;
 2018230:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2018234:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 2018238:	e0bfff17 	ldw	r2,-4(fp)
 201823c:	10800283 	ldbu	r2,10(r2)
 2018240:	10803fcc 	andi	r2,r2,255
 2018244:	10000c26 	beq	r2,zero,2018278 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2018248:	000f883a 	mov	r7,zero
 201824c:	01800044 	movi	r6,1
 2018250:	000b883a 	mov	r5,zero
 2018254:	e13fff17 	ldw	r4,-4(fp)
 2018258:	2012db00 	call	2012db0 <OS_EventTaskRdy>
 201825c:	e0bffa17 	ldw	r2,-24(fp)
 2018260:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018264:	e0bffb17 	ldw	r2,-20(fp)
 2018268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201826c:	20137fc0 	call	20137fc <OS_Sched>
        return (OS_ERR_NONE);
 2018270:	0005883a 	mov	r2,zero
 2018274:	00001606 	br	20182d0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 2018278:	e0bfff17 	ldw	r2,-4(fp)
 201827c:	1080020b 	ldhu	r2,8(r2)
 2018280:	10ffffcc 	andi	r3,r2,65535
 2018284:	00bfffd4 	movui	r2,65535
 2018288:	18800c26 	beq	r3,r2,20182bc <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201828c:	e0bfff17 	ldw	r2,-4(fp)
 2018290:	1080020b 	ldhu	r2,8(r2)
 2018294:	10800044 	addi	r2,r2,1
 2018298:	1007883a 	mov	r3,r2
 201829c:	e0bfff17 	ldw	r2,-4(fp)
 20182a0:	10c0020d 	sth	r3,8(r2)
 20182a4:	e0bffa17 	ldw	r2,-24(fp)
 20182a8:	e0bffc15 	stw	r2,-16(fp)
 20182ac:	e0bffc17 	ldw	r2,-16(fp)
 20182b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 20182b4:	0005883a 	mov	r2,zero
 20182b8:	00000506 	br	20182d0 <OSSemPost+0xfc>
 20182bc:	e0bffa17 	ldw	r2,-24(fp)
 20182c0:	e0bffd15 	stw	r2,-12(fp)
 20182c4:	e0bffd17 	ldw	r2,-12(fp)
 20182c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 20182cc:	00800c84 	movi	r2,50
}
 20182d0:	e037883a 	mov	sp,fp
 20182d4:	dfc00117 	ldw	ra,4(sp)
 20182d8:	df000017 	ldw	fp,0(sp)
 20182dc:	dec00204 	addi	sp,sp,8
 20182e0:	f800283a 	ret

020182e4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 20182e4:	defff704 	addi	sp,sp,-36
 20182e8:	df000815 	stw	fp,32(sp)
 20182ec:	df000804 	addi	fp,sp,32
 20182f0:	e13ffe15 	stw	r4,-8(fp)
 20182f4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20182f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20182fc:	e0bffe17 	ldw	r2,-8(fp)
 2018300:	1000021e 	bne	r2,zero,201830c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2018304:	00800104 	movi	r2,4
 2018308:	00003606 	br	20183e4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201830c:	e0bfff17 	ldw	r2,-4(fp)
 2018310:	1000021e 	bne	r2,zero,201831c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2018314:	00800244 	movi	r2,9
 2018318:	00003206 	br	20183e4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201831c:	e0bffe17 	ldw	r2,-8(fp)
 2018320:	10800003 	ldbu	r2,0(r2)
 2018324:	10803fcc 	andi	r2,r2,255
 2018328:	108000e0 	cmpeqi	r2,r2,3
 201832c:	1000021e 	bne	r2,zero,2018338 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2018330:	00800044 	movi	r2,1
 2018334:	00002b06 	br	20183e4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018338:	0005303a 	rdctl	r2,status
 201833c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018340:	e0fffd17 	ldw	r3,-12(fp)
 2018344:	00bfff84 	movi	r2,-2
 2018348:	1884703a 	and	r2,r3,r2
 201834c:	1001703a 	wrctl	status,r2
  
  return context;
 2018350:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018354:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 2018358:	e0bffe17 	ldw	r2,-8(fp)
 201835c:	10c00283 	ldbu	r3,10(r2)
 2018360:	e0bfff17 	ldw	r2,-4(fp)
 2018364:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 2018368:	e0bffe17 	ldw	r2,-8(fp)
 201836c:	108002c4 	addi	r2,r2,11
 2018370:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 2018374:	e0bfff17 	ldw	r2,-4(fp)
 2018378:	10800084 	addi	r2,r2,2
 201837c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2018380:	e03ffa05 	stb	zero,-24(fp)
 2018384:	00000b06 	br	20183b4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 2018388:	e0bff917 	ldw	r2,-28(fp)
 201838c:	10c00044 	addi	r3,r2,1
 2018390:	e0fff915 	stw	r3,-28(fp)
 2018394:	e0fff817 	ldw	r3,-32(fp)
 2018398:	19000044 	addi	r4,r3,1
 201839c:	e13ff815 	stw	r4,-32(fp)
 20183a0:	18c00003 	ldbu	r3,0(r3)
 20183a4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20183a8:	e0bffa03 	ldbu	r2,-24(fp)
 20183ac:	10800044 	addi	r2,r2,1
 20183b0:	e0bffa05 	stb	r2,-24(fp)
 20183b4:	e0bffa03 	ldbu	r2,-24(fp)
 20183b8:	108000f0 	cmpltui	r2,r2,3
 20183bc:	103ff21e 	bne	r2,zero,2018388 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 20183c0:	e0bffe17 	ldw	r2,-8(fp)
 20183c4:	10c0020b 	ldhu	r3,8(r2)
 20183c8:	e0bfff17 	ldw	r2,-4(fp)
 20183cc:	10c0000d 	sth	r3,0(r2)
 20183d0:	e0bffb17 	ldw	r2,-20(fp)
 20183d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20183d8:	e0bffc17 	ldw	r2,-16(fp)
 20183dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20183e0:	0005883a 	mov	r2,zero
}
 20183e4:	e037883a 	mov	sp,fp
 20183e8:	df000017 	ldw	fp,0(sp)
 20183ec:	dec00104 	addi	sp,sp,4
 20183f0:	f800283a 	ret

020183f4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 20183f4:	defff904 	addi	sp,sp,-28
 20183f8:	df000615 	stw	fp,24(sp)
 20183fc:	df000604 	addi	fp,sp,24
 2018400:	e13ffd15 	stw	r4,-12(fp)
 2018404:	2805883a 	mov	r2,r5
 2018408:	e1bfff15 	stw	r6,-4(fp)
 201840c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018410:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2018414:	e0bfff17 	ldw	r2,-4(fp)
 2018418:	10003126 	beq	r2,zero,20184e0 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201841c:	e0bffd17 	ldw	r2,-12(fp)
 2018420:	1000041e 	bne	r2,zero,2018434 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2018424:	e0bfff17 	ldw	r2,-4(fp)
 2018428:	00c00104 	movi	r3,4
 201842c:	10c00005 	stb	r3,0(r2)
        return;
 2018430:	00002c06 	br	20184e4 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2018434:	e0bffd17 	ldw	r2,-12(fp)
 2018438:	10800003 	ldbu	r2,0(r2)
 201843c:	10803fcc 	andi	r2,r2,255
 2018440:	108000e0 	cmpeqi	r2,r2,3
 2018444:	1000041e 	bne	r2,zero,2018458 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 2018448:	e0bfff17 	ldw	r2,-4(fp)
 201844c:	00c00044 	movi	r3,1
 2018450:	10c00005 	stb	r3,0(r2)
        return;
 2018454:	00002306 	br	20184e4 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018458:	0005303a 	rdctl	r2,status
 201845c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018460:	e0fffc17 	ldw	r3,-16(fp)
 2018464:	00bfff84 	movi	r2,-2
 2018468:	1884703a 	and	r2,r3,r2
 201846c:	1001703a 	wrctl	status,r2
  
  return context;
 2018470:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018474:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 2018478:	e0bfff17 	ldw	r2,-4(fp)
 201847c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 2018480:	e0bffd17 	ldw	r2,-12(fp)
 2018484:	1080020b 	ldhu	r2,8(r2)
 2018488:	10bfffcc 	andi	r2,r2,65535
 201848c:	10000426 	beq	r2,zero,20184a0 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 2018490:	e0bffd17 	ldw	r2,-12(fp)
 2018494:	e0fffe0b 	ldhu	r3,-8(fp)
 2018498:	10c0020d 	sth	r3,8(r2)
 201849c:	00000b06 	br	20184cc <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 20184a0:	e0bffd17 	ldw	r2,-12(fp)
 20184a4:	10800283 	ldbu	r2,10(r2)
 20184a8:	10803fcc 	andi	r2,r2,255
 20184ac:	1000041e 	bne	r2,zero,20184c0 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 20184b0:	e0bffd17 	ldw	r2,-12(fp)
 20184b4:	e0fffe0b 	ldhu	r3,-8(fp)
 20184b8:	10c0020d 	sth	r3,8(r2)
 20184bc:	00000306 	br	20184cc <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 20184c0:	e0bfff17 	ldw	r2,-4(fp)
 20184c4:	00c01244 	movi	r3,73
 20184c8:	10c00005 	stb	r3,0(r2)
 20184cc:	e0bffa17 	ldw	r2,-24(fp)
 20184d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20184d4:	e0bffb17 	ldw	r2,-20(fp)
 20184d8:	1001703a 	wrctl	status,r2
 20184dc:	00000106 	br	20184e4 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 20184e0:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 20184e4:	e037883a 	mov	sp,fp
 20184e8:	df000017 	ldw	fp,0(sp)
 20184ec:	dec00104 	addi	sp,sp,4
 20184f0:	f800283a 	ret

020184f4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 20184f4:	defff104 	addi	sp,sp,-60
 20184f8:	dfc00e15 	stw	ra,56(sp)
 20184fc:	df000d15 	stw	fp,52(sp)
 2018500:	df000d04 	addi	fp,sp,52
 2018504:	2007883a 	mov	r3,r4
 2018508:	2805883a 	mov	r2,r5
 201850c:	e0fffe05 	stb	r3,-8(fp)
 2018510:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 2018514:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 2018518:	e0bffe03 	ldbu	r2,-8(fp)
 201851c:	10800530 	cmpltui	r2,r2,20
 2018520:	1000051e 	bne	r2,zero,2018538 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 2018524:	e0bffe03 	ldbu	r2,-8(fp)
 2018528:	10803fe0 	cmpeqi	r2,r2,255
 201852c:	1000021e 	bne	r2,zero,2018538 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 2018530:	00800a84 	movi	r2,42
 2018534:	00012606 	br	20189d0 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 2018538:	e0bfff03 	ldbu	r2,-4(fp)
 201853c:	10800530 	cmpltui	r2,r2,20
 2018540:	1000021e 	bne	r2,zero,201854c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 2018544:	00800a84 	movi	r2,42
 2018548:	00012106 	br	20189d0 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201854c:	0005303a 	rdctl	r2,status
 2018550:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018554:	e0fffd17 	ldw	r3,-12(fp)
 2018558:	00bfff84 	movi	r2,-2
 201855c:	1884703a 	and	r2,r3,r2
 2018560:	1001703a 	wrctl	status,r2
  
  return context;
 2018564:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018568:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201856c:	e0ffff03 	ldbu	r3,-4(fp)
 2018570:	008080b4 	movhi	r2,514
 2018574:	109da504 	addi	r2,r2,30356
 2018578:	18c7883a 	add	r3,r3,r3
 201857c:	18c7883a 	add	r3,r3,r3
 2018580:	10c5883a 	add	r2,r2,r3
 2018584:	10800017 	ldw	r2,0(r2)
 2018588:	10000626 	beq	r2,zero,20185a4 <OSTaskChangePrio+0xb0>
 201858c:	e0bff517 	ldw	r2,-44(fp)
 2018590:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018594:	e0bff617 	ldw	r2,-40(fp)
 2018598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201859c:	00800a04 	movi	r2,40
 20185a0:	00010b06 	br	20189d0 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 20185a4:	e0bffe03 	ldbu	r2,-8(fp)
 20185a8:	10803fd8 	cmpnei	r2,r2,255
 20185ac:	1000031e 	bne	r2,zero,20185bc <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 20185b0:	d0a73a17 	ldw	r2,-25368(gp)
 20185b4:	10800c83 	ldbu	r2,50(r2)
 20185b8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 20185bc:	e0fffe03 	ldbu	r3,-8(fp)
 20185c0:	008080b4 	movhi	r2,514
 20185c4:	109da504 	addi	r2,r2,30356
 20185c8:	18c7883a 	add	r3,r3,r3
 20185cc:	18c7883a 	add	r3,r3,r3
 20185d0:	10c5883a 	add	r2,r2,r3
 20185d4:	10800017 	ldw	r2,0(r2)
 20185d8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 20185dc:	e0bff817 	ldw	r2,-32(fp)
 20185e0:	1000061e 	bne	r2,zero,20185fc <OSTaskChangePrio+0x108>
 20185e4:	e0bff517 	ldw	r2,-44(fp)
 20185e8:	e0bff715 	stw	r2,-36(fp)
 20185ec:	e0bff717 	ldw	r2,-36(fp)
 20185f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 20185f4:	00800a44 	movi	r2,41
 20185f8:	0000f506 	br	20189d0 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 20185fc:	e0bff817 	ldw	r2,-32(fp)
 2018600:	10800058 	cmpnei	r2,r2,1
 2018604:	1000061e 	bne	r2,zero,2018620 <OSTaskChangePrio+0x12c>
 2018608:	e0bff517 	ldw	r2,-44(fp)
 201860c:	e0bff915 	stw	r2,-28(fp)
 2018610:	e0bff917 	ldw	r2,-28(fp)
 2018614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 2018618:	008010c4 	movi	r2,67
 201861c:	0000ec06 	br	20189d0 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 2018620:	e0bfff03 	ldbu	r2,-4(fp)
 2018624:	1004d0fa 	srli	r2,r2,3
 2018628:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201862c:	e0bfff03 	ldbu	r2,-4(fp)
 2018630:	108001cc 	andi	r2,r2,7
 2018634:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 2018638:	e0bffb03 	ldbu	r2,-20(fp)
 201863c:	00c00044 	movi	r3,1
 2018640:	1884983a 	sll	r2,r3,r2
 2018644:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 2018648:	e0bffb43 	ldbu	r2,-19(fp)
 201864c:	00c00044 	movi	r3,1
 2018650:	1884983a 	sll	r2,r3,r2
 2018654:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 2018658:	e0fffe03 	ldbu	r3,-8(fp)
 201865c:	008080b4 	movhi	r2,514
 2018660:	109da504 	addi	r2,r2,30356
 2018664:	18c7883a 	add	r3,r3,r3
 2018668:	18c7883a 	add	r3,r3,r3
 201866c:	10c5883a 	add	r2,r2,r3
 2018670:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 2018674:	e0ffff03 	ldbu	r3,-4(fp)
 2018678:	008080b4 	movhi	r2,514
 201867c:	109da504 	addi	r2,r2,30356
 2018680:	18c7883a 	add	r3,r3,r3
 2018684:	18c7883a 	add	r3,r3,r3
 2018688:	10c5883a 	add	r2,r2,r3
 201868c:	e0fff817 	ldw	r3,-32(fp)
 2018690:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 2018694:	e0bff817 	ldw	r2,-32(fp)
 2018698:	10800d03 	ldbu	r2,52(r2)
 201869c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 20186a0:	e0bff817 	ldw	r2,-32(fp)
 20186a4:	10800d83 	ldbu	r2,54(r2)
 20186a8:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 20186ac:	e0bff817 	ldw	r2,-32(fp)
 20186b0:	10800d43 	ldbu	r2,53(r2)
 20186b4:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 20186b8:	e0fffc03 	ldbu	r3,-16(fp)
 20186bc:	d0a73744 	addi	r2,gp,-25379
 20186c0:	1885883a 	add	r2,r3,r2
 20186c4:	10c00003 	ldbu	r3,0(r2)
 20186c8:	e0bffc83 	ldbu	r2,-14(fp)
 20186cc:	1884703a 	and	r2,r3,r2
 20186d0:	10803fcc 	andi	r2,r2,255
 20186d4:	10002826 	beq	r2,zero,2018778 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 20186d8:	e0fffc03 	ldbu	r3,-16(fp)
 20186dc:	e13ffc03 	ldbu	r4,-16(fp)
 20186e0:	d0a73744 	addi	r2,gp,-25379
 20186e4:	2085883a 	add	r2,r4,r2
 20186e8:	10800003 	ldbu	r2,0(r2)
 20186ec:	1009883a 	mov	r4,r2
 20186f0:	e0bffc83 	ldbu	r2,-14(fp)
 20186f4:	0084303a 	nor	r2,zero,r2
 20186f8:	2084703a 	and	r2,r4,r2
 20186fc:	1009883a 	mov	r4,r2
 2018700:	d0a73744 	addi	r2,gp,-25379
 2018704:	1885883a 	add	r2,r3,r2
 2018708:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201870c:	e0fffc03 	ldbu	r3,-16(fp)
 2018710:	d0a73744 	addi	r2,gp,-25379
 2018714:	1885883a 	add	r2,r3,r2
 2018718:	10800003 	ldbu	r2,0(r2)
 201871c:	10803fcc 	andi	r2,r2,255
 2018720:	1000061e 	bne	r2,zero,201873c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 2018724:	e0bffc43 	ldbu	r2,-15(fp)
 2018728:	0084303a 	nor	r2,zero,r2
 201872c:	1007883a 	mov	r3,r2
 2018730:	d0a73703 	ldbu	r2,-25380(gp)
 2018734:	1884703a 	and	r2,r3,r2
 2018738:	d0a73705 	stb	r2,-25380(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201873c:	d0e73703 	ldbu	r3,-25380(gp)
 2018740:	e0bffb83 	ldbu	r2,-18(fp)
 2018744:	1884b03a 	or	r2,r3,r2
 2018748:	d0a73705 	stb	r2,-25380(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201874c:	e0fffb03 	ldbu	r3,-20(fp)
 2018750:	e13ffb03 	ldbu	r4,-20(fp)
 2018754:	d0a73744 	addi	r2,gp,-25379
 2018758:	2085883a 	add	r2,r4,r2
 201875c:	11000003 	ldbu	r4,0(r2)
 2018760:	e0bffbc3 	ldbu	r2,-17(fp)
 2018764:	2084b03a 	or	r2,r4,r2
 2018768:	1009883a 	mov	r4,r2
 201876c:	d0a73744 	addi	r2,gp,-25379
 2018770:	1885883a 	add	r2,r3,r2
 2018774:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 2018778:	e0bff817 	ldw	r2,-32(fp)
 201877c:	10800717 	ldw	r2,28(r2)
 2018780:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 2018784:	e0bff317 	ldw	r2,-52(fp)
 2018788:	10003326 	beq	r2,zero,2018858 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201878c:	e0bffc03 	ldbu	r2,-16(fp)
 2018790:	e0fffc03 	ldbu	r3,-16(fp)
 2018794:	e13ff317 	ldw	r4,-52(fp)
 2018798:	20c7883a 	add	r3,r4,r3
 201879c:	18c002c4 	addi	r3,r3,11
 20187a0:	18c00003 	ldbu	r3,0(r3)
 20187a4:	1809883a 	mov	r4,r3
 20187a8:	e0fffc83 	ldbu	r3,-14(fp)
 20187ac:	00c6303a 	nor	r3,zero,r3
 20187b0:	20c6703a 	and	r3,r4,r3
 20187b4:	1809883a 	mov	r4,r3
 20187b8:	e0fff317 	ldw	r3,-52(fp)
 20187bc:	1885883a 	add	r2,r3,r2
 20187c0:	108002c4 	addi	r2,r2,11
 20187c4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 20187c8:	e0bffc03 	ldbu	r2,-16(fp)
 20187cc:	e0fff317 	ldw	r3,-52(fp)
 20187d0:	1885883a 	add	r2,r3,r2
 20187d4:	108002c4 	addi	r2,r2,11
 20187d8:	10800003 	ldbu	r2,0(r2)
 20187dc:	10803fcc 	andi	r2,r2,255
 20187e0:	1000091e 	bne	r2,zero,2018808 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 20187e4:	e0bff317 	ldw	r2,-52(fp)
 20187e8:	10800283 	ldbu	r2,10(r2)
 20187ec:	1007883a 	mov	r3,r2
 20187f0:	e0bffc43 	ldbu	r2,-15(fp)
 20187f4:	0084303a 	nor	r2,zero,r2
 20187f8:	1884703a 	and	r2,r3,r2
 20187fc:	1007883a 	mov	r3,r2
 2018800:	e0bff317 	ldw	r2,-52(fp)
 2018804:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 2018808:	e0bff317 	ldw	r2,-52(fp)
 201880c:	10c00283 	ldbu	r3,10(r2)
 2018810:	e0bffb83 	ldbu	r2,-18(fp)
 2018814:	1884b03a 	or	r2,r3,r2
 2018818:	1007883a 	mov	r3,r2
 201881c:	e0bff317 	ldw	r2,-52(fp)
 2018820:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 2018824:	e0bffb03 	ldbu	r2,-20(fp)
 2018828:	e0fffb03 	ldbu	r3,-20(fp)
 201882c:	e13ff317 	ldw	r4,-52(fp)
 2018830:	20c7883a 	add	r3,r4,r3
 2018834:	18c002c4 	addi	r3,r3,11
 2018838:	19000003 	ldbu	r4,0(r3)
 201883c:	e0fffbc3 	ldbu	r3,-17(fp)
 2018840:	20c6b03a 	or	r3,r4,r3
 2018844:	1809883a 	mov	r4,r3
 2018848:	e0fff317 	ldw	r3,-52(fp)
 201884c:	1885883a 	add	r2,r3,r2
 2018850:	108002c4 	addi	r2,r2,11
 2018854:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 2018858:	e0bff817 	ldw	r2,-32(fp)
 201885c:	10800817 	ldw	r2,32(r2)
 2018860:	10004226 	beq	r2,zero,201896c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 2018864:	e0bff817 	ldw	r2,-32(fp)
 2018868:	10800817 	ldw	r2,32(r2)
 201886c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 2018870:	e0bff417 	ldw	r2,-48(fp)
 2018874:	10800017 	ldw	r2,0(r2)
 2018878:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201887c:	00003906 	br	2018964 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 2018880:	e0bffc03 	ldbu	r2,-16(fp)
 2018884:	e0fffc03 	ldbu	r3,-16(fp)
 2018888:	e13ff317 	ldw	r4,-52(fp)
 201888c:	20c7883a 	add	r3,r4,r3
 2018890:	18c002c4 	addi	r3,r3,11
 2018894:	18c00003 	ldbu	r3,0(r3)
 2018898:	1809883a 	mov	r4,r3
 201889c:	e0fffc83 	ldbu	r3,-14(fp)
 20188a0:	00c6303a 	nor	r3,zero,r3
 20188a4:	20c6703a 	and	r3,r4,r3
 20188a8:	1809883a 	mov	r4,r3
 20188ac:	e0fff317 	ldw	r3,-52(fp)
 20188b0:	1885883a 	add	r2,r3,r2
 20188b4:	108002c4 	addi	r2,r2,11
 20188b8:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 20188bc:	e0bffc03 	ldbu	r2,-16(fp)
 20188c0:	e0fff317 	ldw	r3,-52(fp)
 20188c4:	1885883a 	add	r2,r3,r2
 20188c8:	108002c4 	addi	r2,r2,11
 20188cc:	10800003 	ldbu	r2,0(r2)
 20188d0:	10803fcc 	andi	r2,r2,255
 20188d4:	1000091e 	bne	r2,zero,20188fc <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 20188d8:	e0bff317 	ldw	r2,-52(fp)
 20188dc:	10800283 	ldbu	r2,10(r2)
 20188e0:	1007883a 	mov	r3,r2
 20188e4:	e0bffc43 	ldbu	r2,-15(fp)
 20188e8:	0084303a 	nor	r2,zero,r2
 20188ec:	1884703a 	and	r2,r3,r2
 20188f0:	1007883a 	mov	r3,r2
 20188f4:	e0bff317 	ldw	r2,-52(fp)
 20188f8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 20188fc:	e0bff317 	ldw	r2,-52(fp)
 2018900:	10c00283 	ldbu	r3,10(r2)
 2018904:	e0bffb83 	ldbu	r2,-18(fp)
 2018908:	1884b03a 	or	r2,r3,r2
 201890c:	1007883a 	mov	r3,r2
 2018910:	e0bff317 	ldw	r2,-52(fp)
 2018914:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 2018918:	e0bffb03 	ldbu	r2,-20(fp)
 201891c:	e0fffb03 	ldbu	r3,-20(fp)
 2018920:	e13ff317 	ldw	r4,-52(fp)
 2018924:	20c7883a 	add	r3,r4,r3
 2018928:	18c002c4 	addi	r3,r3,11
 201892c:	19000003 	ldbu	r4,0(r3)
 2018930:	e0fffbc3 	ldbu	r3,-17(fp)
 2018934:	20c6b03a 	or	r3,r4,r3
 2018938:	1809883a 	mov	r4,r3
 201893c:	e0fff317 	ldw	r3,-52(fp)
 2018940:	1885883a 	add	r2,r3,r2
 2018944:	108002c4 	addi	r2,r2,11
 2018948:	11000005 	stb	r4,0(r2)
            pevents++;
 201894c:	e0bff417 	ldw	r2,-48(fp)
 2018950:	10800104 	addi	r2,r2,4
 2018954:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 2018958:	e0bff417 	ldw	r2,-48(fp)
 201895c:	10800017 	ldw	r2,0(r2)
 2018960:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 2018964:	e0bff317 	ldw	r2,-52(fp)
 2018968:	103fc51e 	bne	r2,zero,2018880 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201896c:	e0bff817 	ldw	r2,-32(fp)
 2018970:	e0ffff03 	ldbu	r3,-4(fp)
 2018974:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 2018978:	e0bff817 	ldw	r2,-32(fp)
 201897c:	e0fffb03 	ldbu	r3,-20(fp)
 2018980:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 2018984:	e0bff817 	ldw	r2,-32(fp)
 2018988:	e0fffb43 	ldbu	r3,-19(fp)
 201898c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 2018990:	e0bff817 	ldw	r2,-32(fp)
 2018994:	e0fffb83 	ldbu	r3,-18(fp)
 2018998:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201899c:	e0bff817 	ldw	r2,-32(fp)
 20189a0:	e0fffbc3 	ldbu	r3,-17(fp)
 20189a4:	10c00d45 	stb	r3,53(r2)
 20189a8:	e0bff517 	ldw	r2,-44(fp)
 20189ac:	e0bffa15 	stw	r2,-24(fp)
 20189b0:	e0bffa17 	ldw	r2,-24(fp)
 20189b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 20189b8:	d0a72b43 	ldbu	r2,-25427(gp)
 20189bc:	10803fcc 	andi	r2,r2,255
 20189c0:	10800058 	cmpnei	r2,r2,1
 20189c4:	1000011e 	bne	r2,zero,20189cc <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 20189c8:	20137fc0 	call	20137fc <OS_Sched>
    }
    return (OS_ERR_NONE);
 20189cc:	0005883a 	mov	r2,zero
}
 20189d0:	e037883a 	mov	sp,fp
 20189d4:	dfc00117 	ldw	ra,4(sp)
 20189d8:	df000017 	ldw	fp,0(sp)
 20189dc:	dec00204 	addi	sp,sp,8
 20189e0:	f800283a 	ret

020189e4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 20189e4:	deffee04 	addi	sp,sp,-72
 20189e8:	dfc01115 	stw	ra,68(sp)
 20189ec:	df001015 	stw	fp,64(sp)
 20189f0:	df001004 	addi	fp,sp,64
 20189f4:	e13ffc15 	stw	r4,-16(fp)
 20189f8:	e17ffd15 	stw	r5,-12(fp)
 20189fc:	e1bffe15 	stw	r6,-8(fp)
 2018a00:	3805883a 	mov	r2,r7
 2018a04:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2018a08:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2018a0c:	e0bfff03 	ldbu	r2,-4(fp)
 2018a10:	10800570 	cmpltui	r2,r2,21
 2018a14:	1000021e 	bne	r2,zero,2018a20 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 2018a18:	00800a84 	movi	r2,42
 2018a1c:	00005706 	br	2018b7c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018a20:	0005303a 	rdctl	r2,status
 2018a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018a28:	e0fffb17 	ldw	r3,-20(fp)
 2018a2c:	00bfff84 	movi	r2,-2
 2018a30:	1884703a 	and	r2,r3,r2
 2018a34:	1001703a 	wrctl	status,r2
  
  return context;
 2018a38:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018a3c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 2018a40:	d0a73903 	ldbu	r2,-25372(gp)
 2018a44:	10803fcc 	andi	r2,r2,255
 2018a48:	10000626 	beq	r2,zero,2018a64 <OSTaskCreate+0x80>
 2018a4c:	e0bff317 	ldw	r2,-52(fp)
 2018a50:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018a54:	e0bff417 	ldw	r2,-48(fp)
 2018a58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 2018a5c:	00800f04 	movi	r2,60
 2018a60:	00004606 	br	2018b7c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 2018a64:	e0ffff03 	ldbu	r3,-4(fp)
 2018a68:	008080b4 	movhi	r2,514
 2018a6c:	109da504 	addi	r2,r2,30356
 2018a70:	18c7883a 	add	r3,r3,r3
 2018a74:	18c7883a 	add	r3,r3,r3
 2018a78:	10c5883a 	add	r2,r2,r3
 2018a7c:	10800017 	ldw	r2,0(r2)
 2018a80:	1000391e 	bne	r2,zero,2018b68 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 2018a84:	e0ffff03 	ldbu	r3,-4(fp)
 2018a88:	008080b4 	movhi	r2,514
 2018a8c:	109da504 	addi	r2,r2,30356
 2018a90:	18c7883a 	add	r3,r3,r3
 2018a94:	18c7883a 	add	r3,r3,r3
 2018a98:	10c5883a 	add	r2,r2,r3
 2018a9c:	00c00044 	movi	r3,1
 2018aa0:	10c00015 	stw	r3,0(r2)
 2018aa4:	e0bff317 	ldw	r2,-52(fp)
 2018aa8:	e0bff515 	stw	r2,-44(fp)
 2018aac:	e0bff517 	ldw	r2,-44(fp)
 2018ab0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 2018ab4:	000f883a 	mov	r7,zero
 2018ab8:	e1bffe17 	ldw	r6,-8(fp)
 2018abc:	e17ffd17 	ldw	r5,-12(fp)
 2018ac0:	e13ffc17 	ldw	r4,-16(fp)
 2018ac4:	201bc480 	call	201bc48 <OSTaskStkInit>
 2018ac8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 2018acc:	e0bfff03 	ldbu	r2,-4(fp)
 2018ad0:	d8000215 	stw	zero,8(sp)
 2018ad4:	d8000115 	stw	zero,4(sp)
 2018ad8:	d8000015 	stw	zero,0(sp)
 2018adc:	000f883a 	mov	r7,zero
 2018ae0:	000d883a 	mov	r6,zero
 2018ae4:	e17ff717 	ldw	r5,-36(fp)
 2018ae8:	1009883a 	mov	r4,r2
 2018aec:	2013bfc0 	call	2013bfc <OS_TCBInit>
 2018af0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 2018af4:	e0bff803 	ldbu	r2,-32(fp)
 2018af8:	1000061e 	bne	r2,zero,2018b14 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 2018afc:	d0a72b43 	ldbu	r2,-25427(gp)
 2018b00:	10803fcc 	andi	r2,r2,255
 2018b04:	10800058 	cmpnei	r2,r2,1
 2018b08:	1000151e 	bne	r2,zero,2018b60 <OSTaskCreate+0x17c>
                OS_Sched();
 2018b0c:	20137fc0 	call	20137fc <OS_Sched>
 2018b10:	00001306 	br	2018b60 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018b14:	0005303a 	rdctl	r2,status
 2018b18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018b1c:	e0fffa17 	ldw	r3,-24(fp)
 2018b20:	00bfff84 	movi	r2,-2
 2018b24:	1884703a 	and	r2,r3,r2
 2018b28:	1001703a 	wrctl	status,r2
  
  return context;
 2018b2c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2018b30:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 2018b34:	e0ffff03 	ldbu	r3,-4(fp)
 2018b38:	008080b4 	movhi	r2,514
 2018b3c:	109da504 	addi	r2,r2,30356
 2018b40:	18c7883a 	add	r3,r3,r3
 2018b44:	18c7883a 	add	r3,r3,r3
 2018b48:	10c5883a 	add	r2,r2,r3
 2018b4c:	10000015 	stw	zero,0(r2)
 2018b50:	e0bff317 	ldw	r2,-52(fp)
 2018b54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018b58:	e0bff617 	ldw	r2,-40(fp)
 2018b5c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 2018b60:	e0bff803 	ldbu	r2,-32(fp)
 2018b64:	00000506 	br	2018b7c <OSTaskCreate+0x198>
 2018b68:	e0bff317 	ldw	r2,-52(fp)
 2018b6c:	e0bff915 	stw	r2,-28(fp)
 2018b70:	e0bff917 	ldw	r2,-28(fp)
 2018b74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 2018b78:	00800a04 	movi	r2,40
}
 2018b7c:	e037883a 	mov	sp,fp
 2018b80:	dfc00117 	ldw	ra,4(sp)
 2018b84:	df000017 	ldw	fp,0(sp)
 2018b88:	dec00204 	addi	sp,sp,8
 2018b8c:	f800283a 	ret

02018b90 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 2018b90:	deffec04 	addi	sp,sp,-80
 2018b94:	dfc01315 	stw	ra,76(sp)
 2018b98:	df001215 	stw	fp,72(sp)
 2018b9c:	df001204 	addi	fp,sp,72
 2018ba0:	e13ffa15 	stw	r4,-24(fp)
 2018ba4:	e17ffb15 	stw	r5,-20(fp)
 2018ba8:	e1bffc15 	stw	r6,-16(fp)
 2018bac:	3809883a 	mov	r4,r7
 2018bb0:	e0c00217 	ldw	r3,8(fp)
 2018bb4:	e0800617 	ldw	r2,24(fp)
 2018bb8:	e13ffd05 	stb	r4,-12(fp)
 2018bbc:	e0fffe0d 	sth	r3,-8(fp)
 2018bc0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2018bc4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2018bc8:	e0bffd03 	ldbu	r2,-12(fp)
 2018bcc:	10800570 	cmpltui	r2,r2,21
 2018bd0:	1000021e 	bne	r2,zero,2018bdc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 2018bd4:	00800a84 	movi	r2,42
 2018bd8:	00006106 	br	2018d60 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018bdc:	0005303a 	rdctl	r2,status
 2018be0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018be4:	e0fff917 	ldw	r3,-28(fp)
 2018be8:	00bfff84 	movi	r2,-2
 2018bec:	1884703a 	and	r2,r3,r2
 2018bf0:	1001703a 	wrctl	status,r2
  
  return context;
 2018bf4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018bf8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 2018bfc:	d0a73903 	ldbu	r2,-25372(gp)
 2018c00:	10803fcc 	andi	r2,r2,255
 2018c04:	10000626 	beq	r2,zero,2018c20 <OSTaskCreateExt+0x90>
 2018c08:	e0bff117 	ldw	r2,-60(fp)
 2018c0c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018c10:	e0bff217 	ldw	r2,-56(fp)
 2018c14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 2018c18:	00800f04 	movi	r2,60
 2018c1c:	00005006 	br	2018d60 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 2018c20:	e0fffd03 	ldbu	r3,-12(fp)
 2018c24:	008080b4 	movhi	r2,514
 2018c28:	109da504 	addi	r2,r2,30356
 2018c2c:	18c7883a 	add	r3,r3,r3
 2018c30:	18c7883a 	add	r3,r3,r3
 2018c34:	10c5883a 	add	r2,r2,r3
 2018c38:	10800017 	ldw	r2,0(r2)
 2018c3c:	1000431e 	bne	r2,zero,2018d4c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 2018c40:	e0fffd03 	ldbu	r3,-12(fp)
 2018c44:	008080b4 	movhi	r2,514
 2018c48:	109da504 	addi	r2,r2,30356
 2018c4c:	18c7883a 	add	r3,r3,r3
 2018c50:	18c7883a 	add	r3,r3,r3
 2018c54:	10c5883a 	add	r2,r2,r3
 2018c58:	00c00044 	movi	r3,1
 2018c5c:	10c00015 	stw	r3,0(r2)
 2018c60:	e0bff117 	ldw	r2,-60(fp)
 2018c64:	e0bff315 	stw	r2,-52(fp)
 2018c68:	e0bff317 	ldw	r2,-52(fp)
 2018c6c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 2018c70:	e0bfff0b 	ldhu	r2,-4(fp)
 2018c74:	100d883a 	mov	r6,r2
 2018c78:	e1400417 	ldw	r5,16(fp)
 2018c7c:	e1000317 	ldw	r4,12(fp)
 2018c80:	2019bf00 	call	2019bf0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 2018c84:	e0bfff0b 	ldhu	r2,-4(fp)
 2018c88:	100f883a 	mov	r7,r2
 2018c8c:	e1bffc17 	ldw	r6,-16(fp)
 2018c90:	e17ffb17 	ldw	r5,-20(fp)
 2018c94:	e13ffa17 	ldw	r4,-24(fp)
 2018c98:	201bc480 	call	201bc48 <OSTaskStkInit>
 2018c9c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 2018ca0:	e0fffd03 	ldbu	r3,-12(fp)
 2018ca4:	e13ffe0b 	ldhu	r4,-8(fp)
 2018ca8:	e0bfff0b 	ldhu	r2,-4(fp)
 2018cac:	d8800215 	stw	r2,8(sp)
 2018cb0:	e0800517 	ldw	r2,20(fp)
 2018cb4:	d8800115 	stw	r2,4(sp)
 2018cb8:	e0800417 	ldw	r2,16(fp)
 2018cbc:	d8800015 	stw	r2,0(sp)
 2018cc0:	200f883a 	mov	r7,r4
 2018cc4:	e1800317 	ldw	r6,12(fp)
 2018cc8:	e17ff517 	ldw	r5,-44(fp)
 2018ccc:	1809883a 	mov	r4,r3
 2018cd0:	2013bfc0 	call	2013bfc <OS_TCBInit>
 2018cd4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 2018cd8:	e0bff603 	ldbu	r2,-40(fp)
 2018cdc:	1000061e 	bne	r2,zero,2018cf8 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 2018ce0:	d0a72b43 	ldbu	r2,-25427(gp)
 2018ce4:	10803fcc 	andi	r2,r2,255
 2018ce8:	10800058 	cmpnei	r2,r2,1
 2018cec:	1000151e 	bne	r2,zero,2018d44 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 2018cf0:	20137fc0 	call	20137fc <OS_Sched>
 2018cf4:	00001306 	br	2018d44 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018cf8:	0005303a 	rdctl	r2,status
 2018cfc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018d00:	e0fff817 	ldw	r3,-32(fp)
 2018d04:	00bfff84 	movi	r2,-2
 2018d08:	1884703a 	and	r2,r3,r2
 2018d0c:	1001703a 	wrctl	status,r2
  
  return context;
 2018d10:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2018d14:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 2018d18:	e0fffd03 	ldbu	r3,-12(fp)
 2018d1c:	008080b4 	movhi	r2,514
 2018d20:	109da504 	addi	r2,r2,30356
 2018d24:	18c7883a 	add	r3,r3,r3
 2018d28:	18c7883a 	add	r3,r3,r3
 2018d2c:	10c5883a 	add	r2,r2,r3
 2018d30:	10000015 	stw	zero,0(r2)
 2018d34:	e0bff117 	ldw	r2,-60(fp)
 2018d38:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018d3c:	e0bff417 	ldw	r2,-48(fp)
 2018d40:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 2018d44:	e0bff603 	ldbu	r2,-40(fp)
 2018d48:	00000506 	br	2018d60 <OSTaskCreateExt+0x1d0>
 2018d4c:	e0bff117 	ldw	r2,-60(fp)
 2018d50:	e0bff715 	stw	r2,-36(fp)
 2018d54:	e0bff717 	ldw	r2,-36(fp)
 2018d58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 2018d5c:	00800a04 	movi	r2,40
}
 2018d60:	e037883a 	mov	sp,fp
 2018d64:	dfc00117 	ldw	ra,4(sp)
 2018d68:	df000017 	ldw	fp,0(sp)
 2018d6c:	dec00204 	addi	sp,sp,8
 2018d70:	f800283a 	ret

02018d74 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 2018d74:	defff404 	addi	sp,sp,-48
 2018d78:	dfc00b15 	stw	ra,44(sp)
 2018d7c:	df000a15 	stw	fp,40(sp)
 2018d80:	df000a04 	addi	fp,sp,40
 2018d84:	2005883a 	mov	r2,r4
 2018d88:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 2018d8c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 2018d90:	d0a73903 	ldbu	r2,-25372(gp)
 2018d94:	10803fcc 	andi	r2,r2,255
 2018d98:	10000226 	beq	r2,zero,2018da4 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 2018d9c:	00801004 	movi	r2,64
 2018da0:	0000c006 	br	20190a4 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 2018da4:	e0bfff03 	ldbu	r2,-4(fp)
 2018da8:	10800518 	cmpnei	r2,r2,20
 2018dac:	1000021e 	bne	r2,zero,2018db8 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 2018db0:	00800f84 	movi	r2,62
 2018db4:	0000bb06 	br	20190a4 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 2018db8:	e0bfff03 	ldbu	r2,-4(fp)
 2018dbc:	10800530 	cmpltui	r2,r2,20
 2018dc0:	1000051e 	bne	r2,zero,2018dd8 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 2018dc4:	e0bfff03 	ldbu	r2,-4(fp)
 2018dc8:	10803fe0 	cmpeqi	r2,r2,255
 2018dcc:	1000021e 	bne	r2,zero,2018dd8 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 2018dd0:	00800a84 	movi	r2,42
 2018dd4:	0000b306 	br	20190a4 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018dd8:	0005303a 	rdctl	r2,status
 2018ddc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018de0:	e0fffe17 	ldw	r3,-8(fp)
 2018de4:	00bfff84 	movi	r2,-2
 2018de8:	1884703a 	and	r2,r3,r2
 2018dec:	1001703a 	wrctl	status,r2
  
  return context;
 2018df0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2018df4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 2018df8:	e0bfff03 	ldbu	r2,-4(fp)
 2018dfc:	10803fd8 	cmpnei	r2,r2,255
 2018e00:	1000031e 	bne	r2,zero,2018e10 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 2018e04:	d0a73a17 	ldw	r2,-25368(gp)
 2018e08:	10800c83 	ldbu	r2,50(r2)
 2018e0c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2018e10:	e0ffff03 	ldbu	r3,-4(fp)
 2018e14:	008080b4 	movhi	r2,514
 2018e18:	109da504 	addi	r2,r2,30356
 2018e1c:	18c7883a 	add	r3,r3,r3
 2018e20:	18c7883a 	add	r3,r3,r3
 2018e24:	10c5883a 	add	r2,r2,r3
 2018e28:	10800017 	ldw	r2,0(r2)
 2018e2c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 2018e30:	e0bff817 	ldw	r2,-32(fp)
 2018e34:	1000061e 	bne	r2,zero,2018e50 <OSTaskDel+0xdc>
 2018e38:	e0bff617 	ldw	r2,-40(fp)
 2018e3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018e40:	e0bff717 	ldw	r2,-36(fp)
 2018e44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2018e48:	008010c4 	movi	r2,67
 2018e4c:	00009506 	br	20190a4 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 2018e50:	e0bff817 	ldw	r2,-32(fp)
 2018e54:	10800058 	cmpnei	r2,r2,1
 2018e58:	1000061e 	bne	r2,zero,2018e74 <OSTaskDel+0x100>
 2018e5c:	e0bff617 	ldw	r2,-40(fp)
 2018e60:	e0bff915 	stw	r2,-28(fp)
 2018e64:	e0bff917 	ldw	r2,-28(fp)
 2018e68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 2018e6c:	00800f44 	movi	r2,61
 2018e70:	00008c06 	br	20190a4 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 2018e74:	e0bff817 	ldw	r2,-32(fp)
 2018e78:	10800d03 	ldbu	r2,52(r2)
 2018e7c:	10c03fcc 	andi	r3,r2,255
 2018e80:	e0bff817 	ldw	r2,-32(fp)
 2018e84:	10800d03 	ldbu	r2,52(r2)
 2018e88:	11003fcc 	andi	r4,r2,255
 2018e8c:	d0a73744 	addi	r2,gp,-25379
 2018e90:	2085883a 	add	r2,r4,r2
 2018e94:	10800003 	ldbu	r2,0(r2)
 2018e98:	1009883a 	mov	r4,r2
 2018e9c:	e0bff817 	ldw	r2,-32(fp)
 2018ea0:	10800d43 	ldbu	r2,53(r2)
 2018ea4:	0084303a 	nor	r2,zero,r2
 2018ea8:	2084703a 	and	r2,r4,r2
 2018eac:	1009883a 	mov	r4,r2
 2018eb0:	d0a73744 	addi	r2,gp,-25379
 2018eb4:	1885883a 	add	r2,r3,r2
 2018eb8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 2018ebc:	e0bff817 	ldw	r2,-32(fp)
 2018ec0:	10800d03 	ldbu	r2,52(r2)
 2018ec4:	10c03fcc 	andi	r3,r2,255
 2018ec8:	d0a73744 	addi	r2,gp,-25379
 2018ecc:	1885883a 	add	r2,r3,r2
 2018ed0:	10800003 	ldbu	r2,0(r2)
 2018ed4:	10803fcc 	andi	r2,r2,255
 2018ed8:	1000071e 	bne	r2,zero,2018ef8 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 2018edc:	e0bff817 	ldw	r2,-32(fp)
 2018ee0:	10800d83 	ldbu	r2,54(r2)
 2018ee4:	0084303a 	nor	r2,zero,r2
 2018ee8:	1007883a 	mov	r3,r2
 2018eec:	d0a73703 	ldbu	r2,-25380(gp)
 2018ef0:	1884703a 	and	r2,r3,r2
 2018ef4:	d0a73705 	stb	r2,-25380(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 2018ef8:	e0bff817 	ldw	r2,-32(fp)
 2018efc:	10800717 	ldw	r2,28(r2)
 2018f00:	10000526 	beq	r2,zero,2018f18 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 2018f04:	e0bff817 	ldw	r2,-32(fp)
 2018f08:	10800717 	ldw	r2,28(r2)
 2018f0c:	100b883a 	mov	r5,r2
 2018f10:	e13ff817 	ldw	r4,-32(fp)
 2018f14:	20131a80 	call	20131a8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 2018f18:	e0bff817 	ldw	r2,-32(fp)
 2018f1c:	10800817 	ldw	r2,32(r2)
 2018f20:	10000526 	beq	r2,zero,2018f38 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2018f24:	e0bff817 	ldw	r2,-32(fp)
 2018f28:	10800817 	ldw	r2,32(r2)
 2018f2c:	100b883a 	mov	r5,r2
 2018f30:	e13ff817 	ldw	r4,-32(fp)
 2018f34:	20132600 	call	2013260 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 2018f38:	e0bff817 	ldw	r2,-32(fp)
 2018f3c:	10800a17 	ldw	r2,40(r2)
 2018f40:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 2018f44:	e0bffb17 	ldw	r2,-20(fp)
 2018f48:	10000226 	beq	r2,zero,2018f54 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 2018f4c:	e13ffb17 	ldw	r4,-20(fp)
 2018f50:	20156d00 	call	20156d0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 2018f54:	e0bff817 	ldw	r2,-32(fp)
 2018f58:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 2018f5c:	e0bff817 	ldw	r2,-32(fp)
 2018f60:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2018f64:	e0bff817 	ldw	r2,-32(fp)
 2018f68:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 2018f6c:	d0a72b03 	ldbu	r2,-25428(gp)
 2018f70:	10803fcc 	andi	r2,r2,255
 2018f74:	10803fe0 	cmpeqi	r2,r2,255
 2018f78:	1000031e 	bne	r2,zero,2018f88 <OSTaskDel+0x214>
        OSLockNesting++;
 2018f7c:	d0a72b03 	ldbu	r2,-25428(gp)
 2018f80:	10800044 	addi	r2,r2,1
 2018f84:	d0a72b05 	stb	r2,-25428(gp)
 2018f88:	e0bff617 	ldw	r2,-40(fp)
 2018f8c:	e0bffd15 	stw	r2,-12(fp)
 2018f90:	e0bffd17 	ldw	r2,-12(fp)
 2018f94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 2018f98:	2012d900 	call	2012d90 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018f9c:	0005303a 	rdctl	r2,status
 2018fa0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018fa4:	e0fffa17 	ldw	r3,-24(fp)
 2018fa8:	00bfff84 	movi	r2,-2
 2018fac:	1884703a 	and	r2,r3,r2
 2018fb0:	1001703a 	wrctl	status,r2
  
  return context;
 2018fb4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 2018fb8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 2018fbc:	d0a72b03 	ldbu	r2,-25428(gp)
 2018fc0:	10803fcc 	andi	r2,r2,255
 2018fc4:	10000326 	beq	r2,zero,2018fd4 <OSTaskDel+0x260>
        OSLockNesting--;
 2018fc8:	d0a72b03 	ldbu	r2,-25428(gp)
 2018fcc:	10bfffc4 	addi	r2,r2,-1
 2018fd0:	d0a72b05 	stb	r2,-25428(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 2018fd4:	e13ff817 	ldw	r4,-32(fp)
 2018fd8:	201bdc80 	call	201bdc8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 2018fdc:	d0a73343 	ldbu	r2,-25395(gp)
 2018fe0:	10bfffc4 	addi	r2,r2,-1
 2018fe4:	d0a73345 	stb	r2,-25395(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 2018fe8:	e0ffff03 	ldbu	r3,-4(fp)
 2018fec:	008080b4 	movhi	r2,514
 2018ff0:	109da504 	addi	r2,r2,30356
 2018ff4:	18c7883a 	add	r3,r3,r3
 2018ff8:	18c7883a 	add	r3,r3,r3
 2018ffc:	10c5883a 	add	r2,r2,r3
 2019000:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 2019004:	e0bff817 	ldw	r2,-32(fp)
 2019008:	10800617 	ldw	r2,24(r2)
 201900c:	1000071e 	bne	r2,zero,201902c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 2019010:	e0bff817 	ldw	r2,-32(fp)
 2019014:	10800517 	ldw	r2,20(r2)
 2019018:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201901c:	e0bff817 	ldw	r2,-32(fp)
 2019020:	10800517 	ldw	r2,20(r2)
 2019024:	d0a72e15 	stw	r2,-25416(gp)
 2019028:	00000a06 	br	2019054 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201902c:	e0bff817 	ldw	r2,-32(fp)
 2019030:	10800617 	ldw	r2,24(r2)
 2019034:	e0fff817 	ldw	r3,-32(fp)
 2019038:	18c00517 	ldw	r3,20(r3)
 201903c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 2019040:	e0bff817 	ldw	r2,-32(fp)
 2019044:	10800517 	ldw	r2,20(r2)
 2019048:	e0fff817 	ldw	r3,-32(fp)
 201904c:	18c00617 	ldw	r3,24(r3)
 2019050:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 2019054:	d0e73217 	ldw	r3,-25400(gp)
 2019058:	e0bff817 	ldw	r2,-32(fp)
 201905c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 2019060:	e0bff817 	ldw	r2,-32(fp)
 2019064:	d0a73215 	stw	r2,-25400(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 2019068:	e0bff817 	ldw	r2,-32(fp)
 201906c:	00c00fc4 	movi	r3,63
 2019070:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2019074:	e0bff817 	ldw	r2,-32(fp)
 2019078:	10001345 	stb	zero,77(r2)
 201907c:	e0bff617 	ldw	r2,-40(fp)
 2019080:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019084:	e0bffc17 	ldw	r2,-16(fp)
 2019088:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201908c:	d0a72b43 	ldbu	r2,-25427(gp)
 2019090:	10803fcc 	andi	r2,r2,255
 2019094:	10800058 	cmpnei	r2,r2,1
 2019098:	1000011e 	bne	r2,zero,20190a0 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 201909c:	20137fc0 	call	20137fc <OS_Sched>
    }
    return (OS_ERR_NONE);
 20190a0:	0005883a 	mov	r2,zero
}
 20190a4:	e037883a 	mov	sp,fp
 20190a8:	dfc00117 	ldw	ra,4(sp)
 20190ac:	df000017 	ldw	fp,0(sp)
 20190b0:	dec00204 	addi	sp,sp,8
 20190b4:	f800283a 	ret

020190b8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 20190b8:	defff504 	addi	sp,sp,-44
 20190bc:	df000a15 	stw	fp,40(sp)
 20190c0:	df000a04 	addi	fp,sp,40
 20190c4:	2005883a 	mov	r2,r4
 20190c8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20190cc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 20190d0:	e0bfff03 	ldbu	r2,-4(fp)
 20190d4:	10800518 	cmpnei	r2,r2,20
 20190d8:	1000021e 	bne	r2,zero,20190e4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 20190dc:	00800f84 	movi	r2,62
 20190e0:	00004506 	br	20191f8 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 20190e4:	e0bfff03 	ldbu	r2,-4(fp)
 20190e8:	10800530 	cmpltui	r2,r2,20
 20190ec:	1000051e 	bne	r2,zero,2019104 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 20190f0:	e0bfff03 	ldbu	r2,-4(fp)
 20190f4:	10803fe0 	cmpeqi	r2,r2,255
 20190f8:	1000021e 	bne	r2,zero,2019104 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 20190fc:	00800a84 	movi	r2,42
 2019100:	00003d06 	br	20191f8 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 2019104:	e0bfff03 	ldbu	r2,-4(fp)
 2019108:	10803fd8 	cmpnei	r2,r2,255
 201910c:	1000111e 	bne	r2,zero,2019154 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019110:	0005303a 	rdctl	r2,status
 2019114:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019118:	e0fff917 	ldw	r3,-28(fp)
 201911c:	00bfff84 	movi	r2,-2
 2019120:	1884703a 	and	r2,r3,r2
 2019124:	1001703a 	wrctl	status,r2
  
  return context;
 2019128:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201912c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 2019130:	d0a73a17 	ldw	r2,-25368(gp)
 2019134:	10800dc3 	ldbu	r2,55(r2)
 2019138:	e0bff805 	stb	r2,-32(fp)
 201913c:	e0bff617 	ldw	r2,-40(fp)
 2019140:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019144:	e0bffe17 	ldw	r2,-8(fp)
 2019148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201914c:	e0bff803 	ldbu	r2,-32(fp)
 2019150:	00002906 	br	20191f8 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019154:	0005303a 	rdctl	r2,status
 2019158:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201915c:	e0fff717 	ldw	r3,-36(fp)
 2019160:	00bfff84 	movi	r2,-2
 2019164:	1884703a 	and	r2,r3,r2
 2019168:	1001703a 	wrctl	status,r2
  
  return context;
 201916c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2019170:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 2019174:	e0ffff03 	ldbu	r3,-4(fp)
 2019178:	008080b4 	movhi	r2,514
 201917c:	109da504 	addi	r2,r2,30356
 2019180:	18c7883a 	add	r3,r3,r3
 2019184:	18c7883a 	add	r3,r3,r3
 2019188:	10c5883a 	add	r2,r2,r3
 201918c:	10800017 	ldw	r2,0(r2)
 2019190:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 2019194:	e0bffb17 	ldw	r2,-20(fp)
 2019198:	1000061e 	bne	r2,zero,20191b4 <OSTaskDelReq+0xfc>
 201919c:	e0bff617 	ldw	r2,-40(fp)
 20191a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20191a4:	e0bffa17 	ldw	r2,-24(fp)
 20191a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 20191ac:	008010c4 	movi	r2,67
 20191b0:	00001106 	br	20191f8 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 20191b4:	e0bffb17 	ldw	r2,-20(fp)
 20191b8:	10800058 	cmpnei	r2,r2,1
 20191bc:	1000061e 	bne	r2,zero,20191d8 <OSTaskDelReq+0x120>
 20191c0:	e0bff617 	ldw	r2,-40(fp)
 20191c4:	e0bffc15 	stw	r2,-16(fp)
 20191c8:	e0bffc17 	ldw	r2,-16(fp)
 20191cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 20191d0:	00800f44 	movi	r2,61
 20191d4:	00000806 	br	20191f8 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 20191d8:	e0bffb17 	ldw	r2,-20(fp)
 20191dc:	00c00fc4 	movi	r3,63
 20191e0:	10c00dc5 	stb	r3,55(r2)
 20191e4:	e0bff617 	ldw	r2,-40(fp)
 20191e8:	e0bffd15 	stw	r2,-12(fp)
 20191ec:	e0bffd17 	ldw	r2,-12(fp)
 20191f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20191f4:	0005883a 	mov	r2,zero
}
 20191f8:	e037883a 	mov	sp,fp
 20191fc:	df000017 	ldw	fp,0(sp)
 2019200:	dec00104 	addi	sp,sp,4
 2019204:	f800283a 	ret

02019208 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 2019208:	defff404 	addi	sp,sp,-48
 201920c:	dfc00b15 	stw	ra,44(sp)
 2019210:	df000a15 	stw	fp,40(sp)
 2019214:	df000a04 	addi	fp,sp,40
 2019218:	2005883a 	mov	r2,r4
 201921c:	e17ffe15 	stw	r5,-8(fp)
 2019220:	e1bfff15 	stw	r6,-4(fp)
 2019224:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 2019228:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201922c:	e0bfff17 	ldw	r2,-4(fp)
 2019230:	1000021e 	bne	r2,zero,201923c <OSTaskNameGet+0x34>
        return (0);
 2019234:	0005883a 	mov	r2,zero
 2019238:	00005406 	br	201938c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201923c:	e0bffd03 	ldbu	r2,-12(fp)
 2019240:	10800570 	cmpltui	r2,r2,21
 2019244:	1000081e 	bne	r2,zero,2019268 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 2019248:	e0bffd03 	ldbu	r2,-12(fp)
 201924c:	10803fe0 	cmpeqi	r2,r2,255
 2019250:	1000051e 	bne	r2,zero,2019268 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 2019254:	e0bfff17 	ldw	r2,-4(fp)
 2019258:	00c00a84 	movi	r3,42
 201925c:	10c00005 	stb	r3,0(r2)
            return (0);
 2019260:	0005883a 	mov	r2,zero
 2019264:	00004906 	br	201938c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 2019268:	e0bffe17 	ldw	r2,-8(fp)
 201926c:	1000051e 	bne	r2,zero,2019284 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 2019270:	e0bfff17 	ldw	r2,-4(fp)
 2019274:	00c00304 	movi	r3,12
 2019278:	10c00005 	stb	r3,0(r2)
        return (0);
 201927c:	0005883a 	mov	r2,zero
 2019280:	00004206 	br	201938c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 2019284:	d0a73903 	ldbu	r2,-25372(gp)
 2019288:	10803fcc 	andi	r2,r2,255
 201928c:	10000526 	beq	r2,zero,20192a4 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 2019290:	e0bfff17 	ldw	r2,-4(fp)
 2019294:	00c00444 	movi	r3,17
 2019298:	10c00005 	stb	r3,0(r2)
        return (0);
 201929c:	0005883a 	mov	r2,zero
 20192a0:	00003a06 	br	201938c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20192a4:	0005303a 	rdctl	r2,status
 20192a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20192ac:	e0fffc17 	ldw	r3,-16(fp)
 20192b0:	00bfff84 	movi	r2,-2
 20192b4:	1884703a 	and	r2,r3,r2
 20192b8:	1001703a 	wrctl	status,r2
  
  return context;
 20192bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20192c0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 20192c4:	e0bffd03 	ldbu	r2,-12(fp)
 20192c8:	10803fd8 	cmpnei	r2,r2,255
 20192cc:	1000031e 	bne	r2,zero,20192dc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 20192d0:	d0a73a17 	ldw	r2,-25368(gp)
 20192d4:	10800c83 	ldbu	r2,50(r2)
 20192d8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20192dc:	e0fffd03 	ldbu	r3,-12(fp)
 20192e0:	008080b4 	movhi	r2,514
 20192e4:	109da504 	addi	r2,r2,30356
 20192e8:	18c7883a 	add	r3,r3,r3
 20192ec:	18c7883a 	add	r3,r3,r3
 20192f0:	10c5883a 	add	r2,r2,r3
 20192f4:	10800017 	ldw	r2,0(r2)
 20192f8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 20192fc:	e0bff817 	ldw	r2,-32(fp)
 2019300:	1000091e 	bne	r2,zero,2019328 <OSTaskNameGet+0x120>
 2019304:	e0bff617 	ldw	r2,-40(fp)
 2019308:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201930c:	e0bff717 	ldw	r2,-36(fp)
 2019310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2019314:	e0bfff17 	ldw	r2,-4(fp)
 2019318:	00c010c4 	movi	r3,67
 201931c:	10c00005 	stb	r3,0(r2)
        return (0);
 2019320:	0005883a 	mov	r2,zero
 2019324:	00001906 	br	201938c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 2019328:	e0bff817 	ldw	r2,-32(fp)
 201932c:	10800058 	cmpnei	r2,r2,1
 2019330:	1000091e 	bne	r2,zero,2019358 <OSTaskNameGet+0x150>
 2019334:	e0bff617 	ldw	r2,-40(fp)
 2019338:	e0bff915 	stw	r2,-28(fp)
 201933c:	e0bff917 	ldw	r2,-28(fp)
 2019340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2019344:	e0bfff17 	ldw	r2,-4(fp)
 2019348:	00c010c4 	movi	r3,67
 201934c:	10c00005 	stb	r3,0(r2)
        return (0);
 2019350:	0005883a 	mov	r2,zero
 2019354:	00000d06 	br	201938c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 2019358:	e0bff817 	ldw	r2,-32(fp)
 201935c:	10801304 	addi	r2,r2,76
 2019360:	100b883a 	mov	r5,r2
 2019364:	e13ffe17 	ldw	r4,-8(fp)
 2019368:	20139400 	call	2013940 <OS_StrCopy>
 201936c:	e0bffb05 	stb	r2,-20(fp)
 2019370:	e0bff617 	ldw	r2,-40(fp)
 2019374:	e0bffa15 	stw	r2,-24(fp)
 2019378:	e0bffa17 	ldw	r2,-24(fp)
 201937c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019380:	e0bfff17 	ldw	r2,-4(fp)
 2019384:	10000005 	stb	zero,0(r2)
    return (len);
 2019388:	e0bffb03 	ldbu	r2,-20(fp)
}
 201938c:	e037883a 	mov	sp,fp
 2019390:	dfc00117 	ldw	ra,4(sp)
 2019394:	df000017 	ldw	fp,0(sp)
 2019398:	dec00204 	addi	sp,sp,8
 201939c:	f800283a 	ret

020193a0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 20193a0:	defff304 	addi	sp,sp,-52
 20193a4:	dfc00c15 	stw	ra,48(sp)
 20193a8:	df000b15 	stw	fp,44(sp)
 20193ac:	df000b04 	addi	fp,sp,44
 20193b0:	2005883a 	mov	r2,r4
 20193b4:	e17ffe15 	stw	r5,-8(fp)
 20193b8:	e1bfff15 	stw	r6,-4(fp)
 20193bc:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 20193c0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 20193c4:	e0bfff17 	ldw	r2,-4(fp)
 20193c8:	10005c26 	beq	r2,zero,201953c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 20193cc:	e0bffd03 	ldbu	r2,-12(fp)
 20193d0:	10800570 	cmpltui	r2,r2,21
 20193d4:	1000071e 	bne	r2,zero,20193f4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 20193d8:	e0bffd03 	ldbu	r2,-12(fp)
 20193dc:	10803fe0 	cmpeqi	r2,r2,255
 20193e0:	1000041e 	bne	r2,zero,20193f4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 20193e4:	e0bfff17 	ldw	r2,-4(fp)
 20193e8:	00c00a84 	movi	r3,42
 20193ec:	10c00005 	stb	r3,0(r2)
            return;
 20193f0:	00005306 	br	2019540 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 20193f4:	e0bffe17 	ldw	r2,-8(fp)
 20193f8:	1000041e 	bne	r2,zero,201940c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 20193fc:	e0bfff17 	ldw	r2,-4(fp)
 2019400:	00c00304 	movi	r3,12
 2019404:	10c00005 	stb	r3,0(r2)
        return;
 2019408:	00004d06 	br	2019540 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201940c:	d0a73903 	ldbu	r2,-25372(gp)
 2019410:	10803fcc 	andi	r2,r2,255
 2019414:	10000426 	beq	r2,zero,2019428 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 2019418:	e0bfff17 	ldw	r2,-4(fp)
 201941c:	00c00484 	movi	r3,18
 2019420:	10c00005 	stb	r3,0(r2)
        return;
 2019424:	00004606 	br	2019540 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019428:	0005303a 	rdctl	r2,status
 201942c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019430:	e0fffc17 	ldw	r3,-16(fp)
 2019434:	00bfff84 	movi	r2,-2
 2019438:	1884703a 	and	r2,r3,r2
 201943c:	1001703a 	wrctl	status,r2
  
  return context;
 2019440:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019444:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 2019448:	e0bffd03 	ldbu	r2,-12(fp)
 201944c:	10803fd8 	cmpnei	r2,r2,255
 2019450:	1000031e 	bne	r2,zero,2019460 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 2019454:	d0a73a17 	ldw	r2,-25368(gp)
 2019458:	10800c83 	ldbu	r2,50(r2)
 201945c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2019460:	e0fffd03 	ldbu	r3,-12(fp)
 2019464:	008080b4 	movhi	r2,514
 2019468:	109da504 	addi	r2,r2,30356
 201946c:	18c7883a 	add	r3,r3,r3
 2019470:	18c7883a 	add	r3,r3,r3
 2019474:	10c5883a 	add	r2,r2,r3
 2019478:	10800017 	ldw	r2,0(r2)
 201947c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 2019480:	e0bff717 	ldw	r2,-36(fp)
 2019484:	1000081e 	bne	r2,zero,20194a8 <OSTaskNameSet+0x108>
 2019488:	e0bff517 	ldw	r2,-44(fp)
 201948c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019490:	e0bff617 	ldw	r2,-40(fp)
 2019494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2019498:	e0bfff17 	ldw	r2,-4(fp)
 201949c:	00c010c4 	movi	r3,67
 20194a0:	10c00005 	stb	r3,0(r2)
        return;
 20194a4:	00002606 	br	2019540 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 20194a8:	e0bff717 	ldw	r2,-36(fp)
 20194ac:	10800058 	cmpnei	r2,r2,1
 20194b0:	1000081e 	bne	r2,zero,20194d4 <OSTaskNameSet+0x134>
 20194b4:	e0bff517 	ldw	r2,-44(fp)
 20194b8:	e0bff815 	stw	r2,-32(fp)
 20194bc:	e0bff817 	ldw	r2,-32(fp)
 20194c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20194c4:	e0bfff17 	ldw	r2,-4(fp)
 20194c8:	00c010c4 	movi	r3,67
 20194cc:	10c00005 	stb	r3,0(r2)
        return;
 20194d0:	00001b06 	br	2019540 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 20194d4:	e13ffe17 	ldw	r4,-8(fp)
 20194d8:	20139b40 	call	20139b4 <OS_StrLen>
 20194dc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 20194e0:	e0bffa03 	ldbu	r2,-24(fp)
 20194e4:	10800830 	cmpltui	r2,r2,32
 20194e8:	1000081e 	bne	r2,zero,201950c <OSTaskNameSet+0x16c>
 20194ec:	e0bff517 	ldw	r2,-44(fp)
 20194f0:	e0bff915 	stw	r2,-28(fp)
 20194f4:	e0bff917 	ldw	r2,-28(fp)
 20194f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 20194fc:	e0bfff17 	ldw	r2,-4(fp)
 2019500:	00c01044 	movi	r3,65
 2019504:	10c00005 	stb	r3,0(r2)
        return;
 2019508:	00000d06 	br	2019540 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201950c:	e0bff717 	ldw	r2,-36(fp)
 2019510:	10801304 	addi	r2,r2,76
 2019514:	e17ffe17 	ldw	r5,-8(fp)
 2019518:	1009883a 	mov	r4,r2
 201951c:	20139400 	call	2013940 <OS_StrCopy>
 2019520:	e0bff517 	ldw	r2,-44(fp)
 2019524:	e0bffb15 	stw	r2,-20(fp)
 2019528:	e0bffb17 	ldw	r2,-20(fp)
 201952c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019530:	e0bfff17 	ldw	r2,-4(fp)
 2019534:	10000005 	stb	zero,0(r2)
 2019538:	00000106 	br	2019540 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201953c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2019540:	e037883a 	mov	sp,fp
 2019544:	dfc00117 	ldw	ra,4(sp)
 2019548:	df000017 	ldw	fp,0(sp)
 201954c:	dec00204 	addi	sp,sp,8
 2019550:	f800283a 	ret

02019554 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 2019554:	defff404 	addi	sp,sp,-48
 2019558:	dfc00b15 	stw	ra,44(sp)
 201955c:	df000a15 	stw	fp,40(sp)
 2019560:	df000a04 	addi	fp,sp,40
 2019564:	2005883a 	mov	r2,r4
 2019568:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201956c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 2019570:	e0bfff03 	ldbu	r2,-4(fp)
 2019574:	10800530 	cmpltui	r2,r2,20
 2019578:	1000021e 	bne	r2,zero,2019584 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201957c:	00800a84 	movi	r2,42
 2019580:	00006406 	br	2019714 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019584:	0005303a 	rdctl	r2,status
 2019588:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201958c:	e0fffe17 	ldw	r3,-8(fp)
 2019590:	00bfff84 	movi	r2,-2
 2019594:	1884703a 	and	r2,r3,r2
 2019598:	1001703a 	wrctl	status,r2
  
  return context;
 201959c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20195a0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 20195a4:	e0ffff03 	ldbu	r3,-4(fp)
 20195a8:	008080b4 	movhi	r2,514
 20195ac:	109da504 	addi	r2,r2,30356
 20195b0:	18c7883a 	add	r3,r3,r3
 20195b4:	18c7883a 	add	r3,r3,r3
 20195b8:	10c5883a 	add	r2,r2,r3
 20195bc:	10800017 	ldw	r2,0(r2)
 20195c0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 20195c4:	e0bff817 	ldw	r2,-32(fp)
 20195c8:	1000061e 	bne	r2,zero,20195e4 <OSTaskResume+0x90>
 20195cc:	e0bff617 	ldw	r2,-40(fp)
 20195d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20195d4:	e0bff717 	ldw	r2,-36(fp)
 20195d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 20195dc:	00801184 	movi	r2,70
 20195e0:	00004c06 	br	2019714 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 20195e4:	e0bff817 	ldw	r2,-32(fp)
 20195e8:	10800058 	cmpnei	r2,r2,1
 20195ec:	1000061e 	bne	r2,zero,2019608 <OSTaskResume+0xb4>
 20195f0:	e0bff617 	ldw	r2,-40(fp)
 20195f4:	e0bff915 	stw	r2,-28(fp)
 20195f8:	e0bff917 	ldw	r2,-28(fp)
 20195fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2019600:	008010c4 	movi	r2,67
 2019604:	00004306 	br	2019714 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 2019608:	e0bff817 	ldw	r2,-32(fp)
 201960c:	10800c03 	ldbu	r2,48(r2)
 2019610:	10803fcc 	andi	r2,r2,255
 2019614:	1080020c 	andi	r2,r2,8
 2019618:	10003926 	beq	r2,zero,2019700 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201961c:	e0bff817 	ldw	r2,-32(fp)
 2019620:	10c00c03 	ldbu	r3,48(r2)
 2019624:	00bffdc4 	movi	r2,-9
 2019628:	1884703a 	and	r2,r3,r2
 201962c:	1007883a 	mov	r3,r2
 2019630:	e0bff817 	ldw	r2,-32(fp)
 2019634:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 2019638:	e0bff817 	ldw	r2,-32(fp)
 201963c:	10800c03 	ldbu	r2,48(r2)
 2019640:	10803fcc 	andi	r2,r2,255
 2019644:	1000281e 	bne	r2,zero,20196e8 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 2019648:	e0bff817 	ldw	r2,-32(fp)
 201964c:	10800b8b 	ldhu	r2,46(r2)
 2019650:	10bfffcc 	andi	r2,r2,65535
 2019654:	10001f1e 	bne	r2,zero,20196d4 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 2019658:	e0bff817 	ldw	r2,-32(fp)
 201965c:	10c00d83 	ldbu	r3,54(r2)
 2019660:	d0a73703 	ldbu	r2,-25380(gp)
 2019664:	1884b03a 	or	r2,r3,r2
 2019668:	d0a73705 	stb	r2,-25380(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201966c:	e0bff817 	ldw	r2,-32(fp)
 2019670:	10800d03 	ldbu	r2,52(r2)
 2019674:	10c03fcc 	andi	r3,r2,255
 2019678:	e0bff817 	ldw	r2,-32(fp)
 201967c:	10800d03 	ldbu	r2,52(r2)
 2019680:	11003fcc 	andi	r4,r2,255
 2019684:	d0a73744 	addi	r2,gp,-25379
 2019688:	2085883a 	add	r2,r4,r2
 201968c:	11000003 	ldbu	r4,0(r2)
 2019690:	e0bff817 	ldw	r2,-32(fp)
 2019694:	10800d43 	ldbu	r2,53(r2)
 2019698:	2084b03a 	or	r2,r4,r2
 201969c:	1009883a 	mov	r4,r2
 20196a0:	d0a73744 	addi	r2,gp,-25379
 20196a4:	1885883a 	add	r2,r3,r2
 20196a8:	11000005 	stb	r4,0(r2)
 20196ac:	e0bff617 	ldw	r2,-40(fp)
 20196b0:	e0bffa15 	stw	r2,-24(fp)
 20196b4:	e0bffa17 	ldw	r2,-24(fp)
 20196b8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 20196bc:	d0a72b43 	ldbu	r2,-25427(gp)
 20196c0:	10803fcc 	andi	r2,r2,255
 20196c4:	10800058 	cmpnei	r2,r2,1
 20196c8:	10000b1e 	bne	r2,zero,20196f8 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 20196cc:	20137fc0 	call	20137fc <OS_Sched>
 20196d0:	00000906 	br	20196f8 <OSTaskResume+0x1a4>
 20196d4:	e0bff617 	ldw	r2,-40(fp)
 20196d8:	e0bffb15 	stw	r2,-20(fp)
 20196dc:	e0bffb17 	ldw	r2,-20(fp)
 20196e0:	1001703a 	wrctl	status,r2
 20196e4:	00000406 	br	20196f8 <OSTaskResume+0x1a4>
 20196e8:	e0bff617 	ldw	r2,-40(fp)
 20196ec:	e0bffc15 	stw	r2,-16(fp)
 20196f0:	e0bffc17 	ldw	r2,-16(fp)
 20196f4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 20196f8:	0005883a 	mov	r2,zero
 20196fc:	00000506 	br	2019714 <OSTaskResume+0x1c0>
 2019700:	e0bff617 	ldw	r2,-40(fp)
 2019704:	e0bffd15 	stw	r2,-12(fp)
 2019708:	e0bffd17 	ldw	r2,-12(fp)
 201970c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 2019710:	00801104 	movi	r2,68
}
 2019714:	e037883a 	mov	sp,fp
 2019718:	dfc00117 	ldw	ra,4(sp)
 201971c:	df000017 	ldw	fp,0(sp)
 2019720:	dec00204 	addi	sp,sp,8
 2019724:	f800283a 	ret

02019728 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 2019728:	defff304 	addi	sp,sp,-52
 201972c:	df000c15 	stw	fp,48(sp)
 2019730:	df000c04 	addi	fp,sp,48
 2019734:	2005883a 	mov	r2,r4
 2019738:	e17fff15 	stw	r5,-4(fp)
 201973c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2019740:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 2019744:	e0bffe03 	ldbu	r2,-8(fp)
 2019748:	10800570 	cmpltui	r2,r2,21
 201974c:	1000051e 	bne	r2,zero,2019764 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 2019750:	e0bffe03 	ldbu	r2,-8(fp)
 2019754:	10803fe0 	cmpeqi	r2,r2,255
 2019758:	1000021e 	bne	r2,zero,2019764 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201975c:	00800a84 	movi	r2,42
 2019760:	00005d06 	br	20198d8 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 2019764:	e0bfff17 	ldw	r2,-4(fp)
 2019768:	1000021e 	bne	r2,zero,2019774 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201976c:	00800244 	movi	r2,9
 2019770:	00005906 	br	20198d8 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 2019774:	e0bfff17 	ldw	r2,-4(fp)
 2019778:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201977c:	e0bfff17 	ldw	r2,-4(fp)
 2019780:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019784:	0005303a 	rdctl	r2,status
 2019788:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201978c:	e0fffd17 	ldw	r3,-12(fp)
 2019790:	00bfff84 	movi	r2,-2
 2019794:	1884703a 	and	r2,r3,r2
 2019798:	1001703a 	wrctl	status,r2
  
  return context;
 201979c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 20197a0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 20197a4:	e0bffe03 	ldbu	r2,-8(fp)
 20197a8:	10803fd8 	cmpnei	r2,r2,255
 20197ac:	1000031e 	bne	r2,zero,20197bc <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 20197b0:	d0a73a17 	ldw	r2,-25368(gp)
 20197b4:	10800c83 	ldbu	r2,50(r2)
 20197b8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20197bc:	e0fffe03 	ldbu	r3,-8(fp)
 20197c0:	008080b4 	movhi	r2,514
 20197c4:	109da504 	addi	r2,r2,30356
 20197c8:	18c7883a 	add	r3,r3,r3
 20197cc:	18c7883a 	add	r3,r3,r3
 20197d0:	10c5883a 	add	r2,r2,r3
 20197d4:	10800017 	ldw	r2,0(r2)
 20197d8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 20197dc:	e0bff817 	ldw	r2,-32(fp)
 20197e0:	1000061e 	bne	r2,zero,20197fc <OSTaskStkChk+0xd4>
 20197e4:	e0bff617 	ldw	r2,-40(fp)
 20197e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20197ec:	e0bff717 	ldw	r2,-36(fp)
 20197f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20197f4:	008010c4 	movi	r2,67
 20197f8:	00003706 	br	20198d8 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 20197fc:	e0bff817 	ldw	r2,-32(fp)
 2019800:	10800058 	cmpnei	r2,r2,1
 2019804:	1000061e 	bne	r2,zero,2019820 <OSTaskStkChk+0xf8>
 2019808:	e0bff617 	ldw	r2,-40(fp)
 201980c:	e0bff915 	stw	r2,-28(fp)
 2019810:	e0bff917 	ldw	r2,-28(fp)
 2019814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2019818:	008010c4 	movi	r2,67
 201981c:	00002e06 	br	20198d8 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 2019820:	e0bff817 	ldw	r2,-32(fp)
 2019824:	1080040b 	ldhu	r2,16(r2)
 2019828:	10bfffcc 	andi	r2,r2,65535
 201982c:	1080004c 	andi	r2,r2,1
 2019830:	1000061e 	bne	r2,zero,201984c <OSTaskStkChk+0x124>
 2019834:	e0bff617 	ldw	r2,-40(fp)
 2019838:	e0bffa15 	stw	r2,-24(fp)
 201983c:	e0bffa17 	ldw	r2,-24(fp)
 2019840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 2019844:	00801144 	movi	r2,69
 2019848:	00002306 	br	20198d8 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201984c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 2019850:	e0bff817 	ldw	r2,-32(fp)
 2019854:	10800317 	ldw	r2,12(r2)
 2019858:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201985c:	e0bff817 	ldw	r2,-32(fp)
 2019860:	10800217 	ldw	r2,8(r2)
 2019864:	e0bff415 	stw	r2,-48(fp)
 2019868:	e0bff617 	ldw	r2,-40(fp)
 201986c:	e0bffb15 	stw	r2,-20(fp)
 2019870:	e0bffb17 	ldw	r2,-20(fp)
 2019874:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 2019878:	00000306 	br	2019888 <OSTaskStkChk+0x160>
        nfree++;
 201987c:	e0bff517 	ldw	r2,-44(fp)
 2019880:	10800044 	addi	r2,r2,1
 2019884:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 2019888:	e0bff417 	ldw	r2,-48(fp)
 201988c:	10c00104 	addi	r3,r2,4
 2019890:	e0fff415 	stw	r3,-48(fp)
 2019894:	10800017 	ldw	r2,0(r2)
 2019898:	103ff826 	beq	r2,zero,201987c <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201989c:	e0bff517 	ldw	r2,-44(fp)
 20198a0:	1085883a 	add	r2,r2,r2
 20198a4:	1085883a 	add	r2,r2,r2
 20198a8:	1007883a 	mov	r3,r2
 20198ac:	e0bfff17 	ldw	r2,-4(fp)
 20198b0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 20198b4:	e0fffc17 	ldw	r3,-16(fp)
 20198b8:	e0bff517 	ldw	r2,-44(fp)
 20198bc:	1885c83a 	sub	r2,r3,r2
 20198c0:	1085883a 	add	r2,r2,r2
 20198c4:	1085883a 	add	r2,r2,r2
 20198c8:	1007883a 	mov	r3,r2
 20198cc:	e0bfff17 	ldw	r2,-4(fp)
 20198d0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 20198d4:	0005883a 	mov	r2,zero
}
 20198d8:	e037883a 	mov	sp,fp
 20198dc:	df000017 	ldw	fp,0(sp)
 20198e0:	dec00104 	addi	sp,sp,4
 20198e4:	f800283a 	ret

020198e8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 20198e8:	defff504 	addi	sp,sp,-44
 20198ec:	dfc00a15 	stw	ra,40(sp)
 20198f0:	df000915 	stw	fp,36(sp)
 20198f4:	df000904 	addi	fp,sp,36
 20198f8:	2005883a 	mov	r2,r4
 20198fc:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019900:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 2019904:	e0bfff03 	ldbu	r2,-4(fp)
 2019908:	10800518 	cmpnei	r2,r2,20
 201990c:	1000021e 	bne	r2,zero,2019918 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 2019910:	008011c4 	movi	r2,71
 2019914:	00006806 	br	2019ab8 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2019918:	e0bfff03 	ldbu	r2,-4(fp)
 201991c:	10800530 	cmpltui	r2,r2,20
 2019920:	1000051e 	bne	r2,zero,2019938 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 2019924:	e0bfff03 	ldbu	r2,-4(fp)
 2019928:	10803fe0 	cmpeqi	r2,r2,255
 201992c:	1000021e 	bne	r2,zero,2019938 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 2019930:	00800a84 	movi	r2,42
 2019934:	00006006 	br	2019ab8 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019938:	0005303a 	rdctl	r2,status
 201993c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019940:	e0fffe17 	ldw	r3,-8(fp)
 2019944:	00bfff84 	movi	r2,-2
 2019948:	1884703a 	and	r2,r3,r2
 201994c:	1001703a 	wrctl	status,r2
  
  return context;
 2019950:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 2019954:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 2019958:	e0bfff03 	ldbu	r2,-4(fp)
 201995c:	10803fd8 	cmpnei	r2,r2,255
 2019960:	1000061e 	bne	r2,zero,201997c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 2019964:	d0a73a17 	ldw	r2,-25368(gp)
 2019968:	10800c83 	ldbu	r2,50(r2)
 201996c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 2019970:	00800044 	movi	r2,1
 2019974:	e0bff705 	stb	r2,-36(fp)
 2019978:	00000906 	br	20199a0 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201997c:	d0a73a17 	ldw	r2,-25368(gp)
 2019980:	10800c83 	ldbu	r2,50(r2)
 2019984:	10c03fcc 	andi	r3,r2,255
 2019988:	e0bfff03 	ldbu	r2,-4(fp)
 201998c:	1880031e 	bne	r3,r2,201999c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 2019990:	00800044 	movi	r2,1
 2019994:	e0bff705 	stb	r2,-36(fp)
 2019998:	00000106 	br	20199a0 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201999c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20199a0:	e0ffff03 	ldbu	r3,-4(fp)
 20199a4:	008080b4 	movhi	r2,514
 20199a8:	109da504 	addi	r2,r2,30356
 20199ac:	18c7883a 	add	r3,r3,r3
 20199b0:	18c7883a 	add	r3,r3,r3
 20199b4:	10c5883a 	add	r2,r2,r3
 20199b8:	10800017 	ldw	r2,0(r2)
 20199bc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 20199c0:	e0bffa17 	ldw	r2,-24(fp)
 20199c4:	1000061e 	bne	r2,zero,20199e0 <OSTaskSuspend+0xf8>
 20199c8:	e0bff817 	ldw	r2,-32(fp)
 20199cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20199d0:	e0bff917 	ldw	r2,-28(fp)
 20199d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 20199d8:	00801204 	movi	r2,72
 20199dc:	00003606 	br	2019ab8 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 20199e0:	e0bffa17 	ldw	r2,-24(fp)
 20199e4:	10800058 	cmpnei	r2,r2,1
 20199e8:	1000061e 	bne	r2,zero,2019a04 <OSTaskSuspend+0x11c>
 20199ec:	e0bff817 	ldw	r2,-32(fp)
 20199f0:	e0bffb15 	stw	r2,-20(fp)
 20199f4:	e0bffb17 	ldw	r2,-20(fp)
 20199f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20199fc:	008010c4 	movi	r2,67
 2019a00:	00002d06 	br	2019ab8 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 2019a04:	e0bffa17 	ldw	r2,-24(fp)
 2019a08:	10800d03 	ldbu	r2,52(r2)
 2019a0c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 2019a10:	e0fffd03 	ldbu	r3,-12(fp)
 2019a14:	e13ffd03 	ldbu	r4,-12(fp)
 2019a18:	d0a73744 	addi	r2,gp,-25379
 2019a1c:	2085883a 	add	r2,r4,r2
 2019a20:	10800003 	ldbu	r2,0(r2)
 2019a24:	1009883a 	mov	r4,r2
 2019a28:	e0bffa17 	ldw	r2,-24(fp)
 2019a2c:	10800d43 	ldbu	r2,53(r2)
 2019a30:	0084303a 	nor	r2,zero,r2
 2019a34:	2084703a 	and	r2,r4,r2
 2019a38:	1009883a 	mov	r4,r2
 2019a3c:	d0a73744 	addi	r2,gp,-25379
 2019a40:	1885883a 	add	r2,r3,r2
 2019a44:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2019a48:	e0fffd03 	ldbu	r3,-12(fp)
 2019a4c:	d0a73744 	addi	r2,gp,-25379
 2019a50:	1885883a 	add	r2,r3,r2
 2019a54:	10800003 	ldbu	r2,0(r2)
 2019a58:	10803fcc 	andi	r2,r2,255
 2019a5c:	1000071e 	bne	r2,zero,2019a7c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 2019a60:	e0bffa17 	ldw	r2,-24(fp)
 2019a64:	10800d83 	ldbu	r2,54(r2)
 2019a68:	0084303a 	nor	r2,zero,r2
 2019a6c:	1007883a 	mov	r3,r2
 2019a70:	d0a73703 	ldbu	r2,-25380(gp)
 2019a74:	1884703a 	and	r2,r3,r2
 2019a78:	d0a73705 	stb	r2,-25380(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 2019a7c:	e0bffa17 	ldw	r2,-24(fp)
 2019a80:	10800c03 	ldbu	r2,48(r2)
 2019a84:	10800214 	ori	r2,r2,8
 2019a88:	1007883a 	mov	r3,r2
 2019a8c:	e0bffa17 	ldw	r2,-24(fp)
 2019a90:	10c00c05 	stb	r3,48(r2)
 2019a94:	e0bff817 	ldw	r2,-32(fp)
 2019a98:	e0bffc15 	stw	r2,-16(fp)
 2019a9c:	e0bffc17 	ldw	r2,-16(fp)
 2019aa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 2019aa4:	e0bff703 	ldbu	r2,-36(fp)
 2019aa8:	10800058 	cmpnei	r2,r2,1
 2019aac:	1000011e 	bne	r2,zero,2019ab4 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 2019ab0:	20137fc0 	call	20137fc <OS_Sched>
    }
    return (OS_ERR_NONE);
 2019ab4:	0005883a 	mov	r2,zero
}
 2019ab8:	e037883a 	mov	sp,fp
 2019abc:	dfc00117 	ldw	ra,4(sp)
 2019ac0:	df000017 	ldw	fp,0(sp)
 2019ac4:	dec00204 	addi	sp,sp,8
 2019ac8:	f800283a 	ret

02019acc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 2019acc:	defff604 	addi	sp,sp,-40
 2019ad0:	dfc00915 	stw	ra,36(sp)
 2019ad4:	df000815 	stw	fp,32(sp)
 2019ad8:	df000804 	addi	fp,sp,32
 2019adc:	2005883a 	mov	r2,r4
 2019ae0:	e17fff15 	stw	r5,-4(fp)
 2019ae4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019ae8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 2019aec:	e0bffe03 	ldbu	r2,-8(fp)
 2019af0:	10800570 	cmpltui	r2,r2,21
 2019af4:	1000051e 	bne	r2,zero,2019b0c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 2019af8:	e0bffe03 	ldbu	r2,-8(fp)
 2019afc:	10803fe0 	cmpeqi	r2,r2,255
 2019b00:	1000021e 	bne	r2,zero,2019b0c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 2019b04:	00800a84 	movi	r2,42
 2019b08:	00003406 	br	2019bdc <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 2019b0c:	e0bfff17 	ldw	r2,-4(fp)
 2019b10:	1000021e 	bne	r2,zero,2019b1c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 2019b14:	00800244 	movi	r2,9
 2019b18:	00003006 	br	2019bdc <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019b1c:	0005303a 	rdctl	r2,status
 2019b20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019b24:	e0fffd17 	ldw	r3,-12(fp)
 2019b28:	00bfff84 	movi	r2,-2
 2019b2c:	1884703a 	and	r2,r3,r2
 2019b30:	1001703a 	wrctl	status,r2
  
  return context;
 2019b34:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2019b38:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 2019b3c:	e0bffe03 	ldbu	r2,-8(fp)
 2019b40:	10803fd8 	cmpnei	r2,r2,255
 2019b44:	1000031e 	bne	r2,zero,2019b54 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 2019b48:	d0a73a17 	ldw	r2,-25368(gp)
 2019b4c:	10800c83 	ldbu	r2,50(r2)
 2019b50:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2019b54:	e0fffe03 	ldbu	r3,-8(fp)
 2019b58:	008080b4 	movhi	r2,514
 2019b5c:	109da504 	addi	r2,r2,30356
 2019b60:	18c7883a 	add	r3,r3,r3
 2019b64:	18c7883a 	add	r3,r3,r3
 2019b68:	10c5883a 	add	r2,r2,r3
 2019b6c:	10800017 	ldw	r2,0(r2)
 2019b70:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 2019b74:	e0bffa17 	ldw	r2,-24(fp)
 2019b78:	1000061e 	bne	r2,zero,2019b94 <OSTaskQuery+0xc8>
 2019b7c:	e0bff817 	ldw	r2,-32(fp)
 2019b80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019b84:	e0bff917 	ldw	r2,-28(fp)
 2019b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 2019b8c:	00800a44 	movi	r2,41
 2019b90:	00001206 	br	2019bdc <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 2019b94:	e0bffa17 	ldw	r2,-24(fp)
 2019b98:	10800058 	cmpnei	r2,r2,1
 2019b9c:	1000061e 	bne	r2,zero,2019bb8 <OSTaskQuery+0xec>
 2019ba0:	e0bff817 	ldw	r2,-32(fp)
 2019ba4:	e0bffb15 	stw	r2,-20(fp)
 2019ba8:	e0bffb17 	ldw	r2,-20(fp)
 2019bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2019bb0:	008010c4 	movi	r2,67
 2019bb4:	00000906 	br	2019bdc <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 2019bb8:	01801b04 	movi	r6,108
 2019bbc:	e17ffa17 	ldw	r5,-24(fp)
 2019bc0:	e13fff17 	ldw	r4,-4(fp)
 2019bc4:	20137940 	call	2013794 <OS_MemCopy>
 2019bc8:	e0bff817 	ldw	r2,-32(fp)
 2019bcc:	e0bffc15 	stw	r2,-16(fp)
 2019bd0:	e0bffc17 	ldw	r2,-16(fp)
 2019bd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019bd8:	0005883a 	mov	r2,zero
}
 2019bdc:	e037883a 	mov	sp,fp
 2019be0:	dfc00117 	ldw	ra,4(sp)
 2019be4:	df000017 	ldw	fp,0(sp)
 2019be8:	dec00204 	addi	sp,sp,8
 2019bec:	f800283a 	ret

02019bf0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 2019bf0:	defffc04 	addi	sp,sp,-16
 2019bf4:	df000315 	stw	fp,12(sp)
 2019bf8:	df000304 	addi	fp,sp,12
 2019bfc:	e13ffd15 	stw	r4,-12(fp)
 2019c00:	e17ffe15 	stw	r5,-8(fp)
 2019c04:	3005883a 	mov	r2,r6
 2019c08:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 2019c0c:	e0bfff0b 	ldhu	r2,-4(fp)
 2019c10:	1080004c 	andi	r2,r2,1
 2019c14:	10000d26 	beq	r2,zero,2019c4c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 2019c18:	e0bfff0b 	ldhu	r2,-4(fp)
 2019c1c:	1080008c 	andi	r2,r2,2
 2019c20:	10000a26 	beq	r2,zero,2019c4c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2019c24:	00000706 	br	2019c44 <OS_TaskStkClr+0x54>
                size--;
 2019c28:	e0bffe17 	ldw	r2,-8(fp)
 2019c2c:	10bfffc4 	addi	r2,r2,-1
 2019c30:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 2019c34:	e0bffd17 	ldw	r2,-12(fp)
 2019c38:	10c00104 	addi	r3,r2,4
 2019c3c:	e0fffd15 	stw	r3,-12(fp)
 2019c40:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2019c44:	e0bffe17 	ldw	r2,-8(fp)
 2019c48:	103ff71e 	bne	r2,zero,2019c28 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 2019c4c:	0001883a 	nop
 2019c50:	e037883a 	mov	sp,fp
 2019c54:	df000017 	ldw	fp,0(sp)
 2019c58:	dec00104 	addi	sp,sp,4
 2019c5c:	f800283a 	ret

02019c60 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 2019c60:	defff904 	addi	sp,sp,-28
 2019c64:	dfc00615 	stw	ra,24(sp)
 2019c68:	df000515 	stw	fp,20(sp)
 2019c6c:	df000504 	addi	fp,sp,20
 2019c70:	2005883a 	mov	r2,r4
 2019c74:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019c78:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2019c7c:	d0a73903 	ldbu	r2,-25372(gp)
 2019c80:	10803fcc 	andi	r2,r2,255
 2019c84:	1000311e 	bne	r2,zero,2019d4c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 2019c88:	e0bfff0b 	ldhu	r2,-4(fp)
 2019c8c:	10003026 	beq	r2,zero,2019d50 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019c90:	0005303a 	rdctl	r2,status
 2019c94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019c98:	e0fffe17 	ldw	r3,-8(fp)
 2019c9c:	00bfff84 	movi	r2,-2
 2019ca0:	1884703a 	and	r2,r3,r2
 2019ca4:	1001703a 	wrctl	status,r2
  
  return context;
 2019ca8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2019cac:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 2019cb0:	d0a73a17 	ldw	r2,-25368(gp)
 2019cb4:	10800d03 	ldbu	r2,52(r2)
 2019cb8:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2019cbc:	e0fffd03 	ldbu	r3,-12(fp)
 2019cc0:	e13ffd03 	ldbu	r4,-12(fp)
 2019cc4:	d0a73744 	addi	r2,gp,-25379
 2019cc8:	2085883a 	add	r2,r4,r2
 2019ccc:	10800003 	ldbu	r2,0(r2)
 2019cd0:	1009883a 	mov	r4,r2
 2019cd4:	d0a73a17 	ldw	r2,-25368(gp)
 2019cd8:	10800d43 	ldbu	r2,53(r2)
 2019cdc:	0084303a 	nor	r2,zero,r2
 2019ce0:	2084703a 	and	r2,r4,r2
 2019ce4:	1009883a 	mov	r4,r2
 2019ce8:	d0a73744 	addi	r2,gp,-25379
 2019cec:	1885883a 	add	r2,r3,r2
 2019cf0:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 2019cf4:	e0fffd03 	ldbu	r3,-12(fp)
 2019cf8:	d0a73744 	addi	r2,gp,-25379
 2019cfc:	1885883a 	add	r2,r3,r2
 2019d00:	10800003 	ldbu	r2,0(r2)
 2019d04:	10803fcc 	andi	r2,r2,255
 2019d08:	1000071e 	bne	r2,zero,2019d28 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2019d0c:	d0a73a17 	ldw	r2,-25368(gp)
 2019d10:	10800d83 	ldbu	r2,54(r2)
 2019d14:	0084303a 	nor	r2,zero,r2
 2019d18:	1007883a 	mov	r3,r2
 2019d1c:	d0a73703 	ldbu	r2,-25380(gp)
 2019d20:	1884703a 	and	r2,r3,r2
 2019d24:	d0a73705 	stb	r2,-25380(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 2019d28:	d0a73a17 	ldw	r2,-25368(gp)
 2019d2c:	e0ffff0b 	ldhu	r3,-4(fp)
 2019d30:	10c00b8d 	sth	r3,46(r2)
 2019d34:	e0bffb17 	ldw	r2,-20(fp)
 2019d38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019d3c:	e0bffc17 	ldw	r2,-16(fp)
 2019d40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 2019d44:	20137fc0 	call	20137fc <OS_Sched>
 2019d48:	00000106 	br	2019d50 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 2019d4c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 2019d50:	e037883a 	mov	sp,fp
 2019d54:	dfc00117 	ldw	ra,4(sp)
 2019d58:	df000017 	ldw	fp,0(sp)
 2019d5c:	dec00204 	addi	sp,sp,8
 2019d60:	f800283a 	ret

02019d64 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 2019d64:	defff704 	addi	sp,sp,-36
 2019d68:	dfc00815 	stw	ra,32(sp)
 2019d6c:	df000715 	stw	fp,28(sp)
 2019d70:	dc000615 	stw	r16,24(sp)
 2019d74:	df000704 	addi	fp,sp,28
 2019d78:	2011883a 	mov	r8,r4
 2019d7c:	2809883a 	mov	r4,r5
 2019d80:	3007883a 	mov	r3,r6
 2019d84:	3805883a 	mov	r2,r7
 2019d88:	e23ffb05 	stb	r8,-20(fp)
 2019d8c:	e13ffc05 	stb	r4,-16(fp)
 2019d90:	e0fffd05 	stb	r3,-12(fp)
 2019d94:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2019d98:	d0a73903 	ldbu	r2,-25372(gp)
 2019d9c:	10803fcc 	andi	r2,r2,255
 2019da0:	10000226 	beq	r2,zero,2019dac <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 2019da4:	00801544 	movi	r2,85
 2019da8:	00003d06 	br	2019ea0 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 2019dac:	e0bffb03 	ldbu	r2,-20(fp)
 2019db0:	1000081e 	bne	r2,zero,2019dd4 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 2019db4:	e0bffc03 	ldbu	r2,-16(fp)
 2019db8:	1000061e 	bne	r2,zero,2019dd4 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 2019dbc:	e0bffd03 	ldbu	r2,-12(fp)
 2019dc0:	1000041e 	bne	r2,zero,2019dd4 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 2019dc4:	e0bffe0b 	ldhu	r2,-8(fp)
 2019dc8:	1000021e 	bne	r2,zero,2019dd4 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 2019dcc:	00801504 	movi	r2,84
 2019dd0:	00003306 	br	2019ea0 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 2019dd4:	e0bffc03 	ldbu	r2,-16(fp)
 2019dd8:	10800f30 	cmpltui	r2,r2,60
 2019ddc:	1000021e 	bne	r2,zero,2019de8 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 2019de0:	00801444 	movi	r2,81
 2019de4:	00002e06 	br	2019ea0 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 2019de8:	e0bffd03 	ldbu	r2,-12(fp)
 2019dec:	10800f30 	cmpltui	r2,r2,60
 2019df0:	1000021e 	bne	r2,zero,2019dfc <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 2019df4:	00801484 	movi	r2,82
 2019df8:	00002906 	br	2019ea0 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 2019dfc:	e0bffe0b 	ldhu	r2,-8(fp)
 2019e00:	1080fa30 	cmpltui	r2,r2,1000
 2019e04:	1000021e 	bne	r2,zero,2019e10 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 2019e08:	008014c4 	movi	r2,83
 2019e0c:	00002406 	br	2019ea0 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2019e10:	e0bffb03 	ldbu	r2,-20(fp)
 2019e14:	10c38424 	muli	r3,r2,3600
 2019e18:	e0bffc03 	ldbu	r2,-16(fp)
 2019e1c:	10800f24 	muli	r2,r2,60
 2019e20:	1887883a 	add	r3,r3,r2
 2019e24:	e0bffd03 	ldbu	r2,-12(fp)
 2019e28:	1885883a 	add	r2,r3,r2
 2019e2c:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 2019e30:	e0bffe0b 	ldhu	r2,-8(fp)
 2019e34:	1080fa24 	muli	r2,r2,1000
 2019e38:	0140fa04 	movi	r5,1000
 2019e3c:	1009883a 	mov	r4,r2
 2019e40:	2003e840 	call	2003e84 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2019e44:	8085883a 	add	r2,r16,r2
 2019e48:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 2019e4c:	e0bffa17 	ldw	r2,-24(fp)
 2019e50:	1004d43a 	srli	r2,r2,16
 2019e54:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 2019e58:	e0bffa17 	ldw	r2,-24(fp)
 2019e5c:	10bfffcc 	andi	r2,r2,65535
 2019e60:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 2019e64:	e0bffa17 	ldw	r2,-24(fp)
 2019e68:	10bfffcc 	andi	r2,r2,65535
 2019e6c:	1009883a 	mov	r4,r2
 2019e70:	2019c600 	call	2019c60 <OSTimeDly>
    while (loops > 0) {
 2019e74:	00000706 	br	2019e94 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 2019e78:	01200014 	movui	r4,32768
 2019e7c:	2019c600 	call	2019c60 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 2019e80:	01200014 	movui	r4,32768
 2019e84:	2019c600 	call	2019c60 <OSTimeDly>
        loops--;
 2019e88:	e0bff90b 	ldhu	r2,-28(fp)
 2019e8c:	10bfffc4 	addi	r2,r2,-1
 2019e90:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 2019e94:	e0bff90b 	ldhu	r2,-28(fp)
 2019e98:	103ff71e 	bne	r2,zero,2019e78 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 2019e9c:	0005883a 	mov	r2,zero
}
 2019ea0:	e6ffff04 	addi	sp,fp,-4
 2019ea4:	dfc00217 	ldw	ra,8(sp)
 2019ea8:	df000117 	ldw	fp,4(sp)
 2019eac:	dc000017 	ldw	r16,0(sp)
 2019eb0:	dec00304 	addi	sp,sp,12
 2019eb4:	f800283a 	ret

02019eb8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 2019eb8:	defff504 	addi	sp,sp,-44
 2019ebc:	dfc00a15 	stw	ra,40(sp)
 2019ec0:	df000915 	stw	fp,36(sp)
 2019ec4:	df000904 	addi	fp,sp,36
 2019ec8:	2005883a 	mov	r2,r4
 2019ecc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019ed0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 2019ed4:	e0bfff03 	ldbu	r2,-4(fp)
 2019ed8:	10800530 	cmpltui	r2,r2,20
 2019edc:	1000021e 	bne	r2,zero,2019ee8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 2019ee0:	00800a84 	movi	r2,42
 2019ee4:	00006406 	br	201a078 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019ee8:	0005303a 	rdctl	r2,status
 2019eec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019ef0:	e0fffe17 	ldw	r3,-8(fp)
 2019ef4:	00bfff84 	movi	r2,-2
 2019ef8:	1884703a 	and	r2,r3,r2
 2019efc:	1001703a 	wrctl	status,r2
  
  return context;
 2019f00:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2019f04:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 2019f08:	e0ffff03 	ldbu	r3,-4(fp)
 2019f0c:	008080b4 	movhi	r2,514
 2019f10:	109da504 	addi	r2,r2,30356
 2019f14:	18c7883a 	add	r3,r3,r3
 2019f18:	18c7883a 	add	r3,r3,r3
 2019f1c:	10c5883a 	add	r2,r2,r3
 2019f20:	10800017 	ldw	r2,0(r2)
 2019f24:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 2019f28:	e0bff917 	ldw	r2,-28(fp)
 2019f2c:	1000061e 	bne	r2,zero,2019f48 <OSTimeDlyResume+0x90>
 2019f30:	e0bff717 	ldw	r2,-36(fp)
 2019f34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019f38:	e0bff817 	ldw	r2,-32(fp)
 2019f3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2019f40:	008010c4 	movi	r2,67
 2019f44:	00004c06 	br	201a078 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 2019f48:	e0bff917 	ldw	r2,-28(fp)
 2019f4c:	10800058 	cmpnei	r2,r2,1
 2019f50:	1000061e 	bne	r2,zero,2019f6c <OSTimeDlyResume+0xb4>
 2019f54:	e0bff717 	ldw	r2,-36(fp)
 2019f58:	e0bffa15 	stw	r2,-24(fp)
 2019f5c:	e0bffa17 	ldw	r2,-24(fp)
 2019f60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2019f64:	008010c4 	movi	r2,67
 2019f68:	00004306 	br	201a078 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 2019f6c:	e0bff917 	ldw	r2,-28(fp)
 2019f70:	10800b8b 	ldhu	r2,46(r2)
 2019f74:	10bfffcc 	andi	r2,r2,65535
 2019f78:	1000061e 	bne	r2,zero,2019f94 <OSTimeDlyResume+0xdc>
 2019f7c:	e0bff717 	ldw	r2,-36(fp)
 2019f80:	e0bffb15 	stw	r2,-20(fp)
 2019f84:	e0bffb17 	ldw	r2,-20(fp)
 2019f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 2019f8c:	00801404 	movi	r2,80
 2019f90:	00003906 	br	201a078 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 2019f94:	e0bff917 	ldw	r2,-28(fp)
 2019f98:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2019f9c:	e0bff917 	ldw	r2,-28(fp)
 2019fa0:	10800c03 	ldbu	r2,48(r2)
 2019fa4:	10803fcc 	andi	r2,r2,255
 2019fa8:	10800dcc 	andi	r2,r2,55
 2019fac:	10000b26 	beq	r2,zero,2019fdc <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 2019fb0:	e0bff917 	ldw	r2,-28(fp)
 2019fb4:	10c00c03 	ldbu	r3,48(r2)
 2019fb8:	00bff204 	movi	r2,-56
 2019fbc:	1884703a 	and	r2,r3,r2
 2019fc0:	1007883a 	mov	r3,r2
 2019fc4:	e0bff917 	ldw	r2,-28(fp)
 2019fc8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 2019fcc:	e0bff917 	ldw	r2,-28(fp)
 2019fd0:	00c00044 	movi	r3,1
 2019fd4:	10c00c45 	stb	r3,49(r2)
 2019fd8:	00000206 	br	2019fe4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 2019fdc:	e0bff917 	ldw	r2,-28(fp)
 2019fe0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 2019fe4:	e0bff917 	ldw	r2,-28(fp)
 2019fe8:	10800c03 	ldbu	r2,48(r2)
 2019fec:	10803fcc 	andi	r2,r2,255
 2019ff0:	1080020c 	andi	r2,r2,8
 2019ff4:	10001b1e 	bne	r2,zero,201a064 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 2019ff8:	e0bff917 	ldw	r2,-28(fp)
 2019ffc:	10c00d83 	ldbu	r3,54(r2)
 201a000:	d0a73703 	ldbu	r2,-25380(gp)
 201a004:	1884b03a 	or	r2,r3,r2
 201a008:	d0a73705 	stb	r2,-25380(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201a00c:	e0bff917 	ldw	r2,-28(fp)
 201a010:	10800d03 	ldbu	r2,52(r2)
 201a014:	10c03fcc 	andi	r3,r2,255
 201a018:	e0bff917 	ldw	r2,-28(fp)
 201a01c:	10800d03 	ldbu	r2,52(r2)
 201a020:	11003fcc 	andi	r4,r2,255
 201a024:	d0a73744 	addi	r2,gp,-25379
 201a028:	2085883a 	add	r2,r4,r2
 201a02c:	11000003 	ldbu	r4,0(r2)
 201a030:	e0bff917 	ldw	r2,-28(fp)
 201a034:	10800d43 	ldbu	r2,53(r2)
 201a038:	2084b03a 	or	r2,r4,r2
 201a03c:	1009883a 	mov	r4,r2
 201a040:	d0a73744 	addi	r2,gp,-25379
 201a044:	1885883a 	add	r2,r3,r2
 201a048:	11000005 	stb	r4,0(r2)
 201a04c:	e0bff717 	ldw	r2,-36(fp)
 201a050:	e0bffc15 	stw	r2,-16(fp)
 201a054:	e0bffc17 	ldw	r2,-16(fp)
 201a058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201a05c:	20137fc0 	call	20137fc <OS_Sched>
 201a060:	00000406 	br	201a074 <OSTimeDlyResume+0x1bc>
 201a064:	e0bff717 	ldw	r2,-36(fp)
 201a068:	e0bffd15 	stw	r2,-12(fp)
 201a06c:	e0bffd17 	ldw	r2,-12(fp)
 201a070:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201a074:	0005883a 	mov	r2,zero
}
 201a078:	e037883a 	mov	sp,fp
 201a07c:	dfc00117 	ldw	ra,4(sp)
 201a080:	df000017 	ldw	fp,0(sp)
 201a084:	dec00204 	addi	sp,sp,8
 201a088:	f800283a 	ret

0201a08c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201a08c:	defffb04 	addi	sp,sp,-20
 201a090:	df000415 	stw	fp,16(sp)
 201a094:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201a098:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a09c:	0005303a 	rdctl	r2,status
 201a0a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a0a4:	e0fffe17 	ldw	r3,-8(fp)
 201a0a8:	00bfff84 	movi	r2,-2
 201a0ac:	1884703a 	and	r2,r3,r2
 201a0b0:	1001703a 	wrctl	status,r2
  
  return context;
 201a0b4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201a0b8:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 201a0bc:	d0a73b17 	ldw	r2,-25364(gp)
 201a0c0:	e0bffd15 	stw	r2,-12(fp)
 201a0c4:	e0bffc17 	ldw	r2,-16(fp)
 201a0c8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a0cc:	e0bfff17 	ldw	r2,-4(fp)
 201a0d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201a0d4:	e0bffd17 	ldw	r2,-12(fp)
}
 201a0d8:	e037883a 	mov	sp,fp
 201a0dc:	df000017 	ldw	fp,0(sp)
 201a0e0:	dec00104 	addi	sp,sp,4
 201a0e4:	f800283a 	ret

0201a0e8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201a0e8:	defffb04 	addi	sp,sp,-20
 201a0ec:	df000415 	stw	fp,16(sp)
 201a0f0:	df000404 	addi	fp,sp,16
 201a0f4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201a0f8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a0fc:	0005303a 	rdctl	r2,status
 201a100:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a104:	e0fffd17 	ldw	r3,-12(fp)
 201a108:	00bfff84 	movi	r2,-2
 201a10c:	1884703a 	and	r2,r3,r2
 201a110:	1001703a 	wrctl	status,r2
  
  return context;
 201a114:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201a118:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 201a11c:	e0bfff17 	ldw	r2,-4(fp)
 201a120:	d0a73b15 	stw	r2,-25364(gp)
 201a124:	e0bffc17 	ldw	r2,-16(fp)
 201a128:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a12c:	e0bffe17 	ldw	r2,-8(fp)
 201a130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201a134:	0001883a 	nop
 201a138:	e037883a 	mov	sp,fp
 201a13c:	df000017 	ldw	fp,0(sp)
 201a140:	dec00104 	addi	sp,sp,4
 201a144:	f800283a 	ret

0201a148 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201a148:	defffd04 	addi	sp,sp,-12
 201a14c:	dfc00215 	stw	ra,8(sp)
 201a150:	df000115 	stw	fp,4(sp)
 201a154:	df000104 	addi	fp,sp,4
 201a158:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201a15c:	d1600d04 	addi	r5,gp,-32716
 201a160:	e13fff17 	ldw	r4,-4(fp)
 201a164:	201b1e40 	call	201b1e4 <alt_dev_llist_insert>
}
 201a168:	e037883a 	mov	sp,fp
 201a16c:	dfc00117 	ldw	ra,4(sp)
 201a170:	df000017 	ldw	fp,0(sp)
 201a174:	dec00204 	addi	sp,sp,8
 201a178:	f800283a 	ret

0201a17c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201a17c:	defffd04 	addi	sp,sp,-12
 201a180:	dfc00215 	stw	ra,8(sp)
 201a184:	df000115 	stw	fp,4(sp)
 201a188:	df000104 	addi	fp,sp,4
 201a18c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201a190:	201bb540 	call	201bb54 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201a194:	00800044 	movi	r2,1
 201a198:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201a19c:	0001883a 	nop
 201a1a0:	e037883a 	mov	sp,fp
 201a1a4:	dfc00117 	ldw	ra,4(sp)
 201a1a8:	df000017 	ldw	fp,0(sp)
 201a1ac:	dec00204 	addi	sp,sp,8
 201a1b0:	f800283a 	ret

0201a1b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201a1b4:	defffe04 	addi	sp,sp,-8
 201a1b8:	dfc00115 	stw	ra,4(sp)
 201a1bc:	df000015 	stw	fp,0(sp)
 201a1c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 201a1c4:	01c0fa04 	movi	r7,1000
 201a1c8:	01800044 	movi	r6,1
 201a1cc:	000b883a 	mov	r5,zero
 201a1d0:	0009883a 	mov	r4,zero
 201a1d4:	201afb80 	call	201afb8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201a1d8:	000d883a 	mov	r6,zero
 201a1dc:	000b883a 	mov	r5,zero
 201a1e0:	010080b4 	movhi	r4,514
 201a1e4:	2135d204 	addi	r4,r4,-10424
 201a1e8:	201a3780 	call	201a378 <altera_avalon_jtag_uart_init>
 201a1ec:	010080b4 	movhi	r4,514
 201a1f0:	2135c804 	addi	r4,r4,-10464
 201a1f4:	201a1480 	call	201a148 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 201a1f8:	0001883a 	nop
}
 201a1fc:	0001883a 	nop
 201a200:	e037883a 	mov	sp,fp
 201a204:	dfc00117 	ldw	ra,4(sp)
 201a208:	df000017 	ldw	fp,0(sp)
 201a20c:	dec00204 	addi	sp,sp,8
 201a210:	f800283a 	ret

0201a214 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201a214:	defffa04 	addi	sp,sp,-24
 201a218:	dfc00515 	stw	ra,20(sp)
 201a21c:	df000415 	stw	fp,16(sp)
 201a220:	df000404 	addi	fp,sp,16
 201a224:	e13ffd15 	stw	r4,-12(fp)
 201a228:	e17ffe15 	stw	r5,-8(fp)
 201a22c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201a230:	e0bffd17 	ldw	r2,-12(fp)
 201a234:	10800017 	ldw	r2,0(r2)
 201a238:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201a23c:	e0bffc17 	ldw	r2,-16(fp)
 201a240:	10c00a04 	addi	r3,r2,40
 201a244:	e0bffd17 	ldw	r2,-12(fp)
 201a248:	10800217 	ldw	r2,8(r2)
 201a24c:	100f883a 	mov	r7,r2
 201a250:	e1bfff17 	ldw	r6,-4(fp)
 201a254:	e17ffe17 	ldw	r5,-8(fp)
 201a258:	1809883a 	mov	r4,r3
 201a25c:	201a9c00 	call	201a9c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 201a260:	e037883a 	mov	sp,fp
 201a264:	dfc00117 	ldw	ra,4(sp)
 201a268:	df000017 	ldw	fp,0(sp)
 201a26c:	dec00204 	addi	sp,sp,8
 201a270:	f800283a 	ret

0201a274 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201a274:	defffa04 	addi	sp,sp,-24
 201a278:	dfc00515 	stw	ra,20(sp)
 201a27c:	df000415 	stw	fp,16(sp)
 201a280:	df000404 	addi	fp,sp,16
 201a284:	e13ffd15 	stw	r4,-12(fp)
 201a288:	e17ffe15 	stw	r5,-8(fp)
 201a28c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201a290:	e0bffd17 	ldw	r2,-12(fp)
 201a294:	10800017 	ldw	r2,0(r2)
 201a298:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201a29c:	e0bffc17 	ldw	r2,-16(fp)
 201a2a0:	10c00a04 	addi	r3,r2,40
 201a2a4:	e0bffd17 	ldw	r2,-12(fp)
 201a2a8:	10800217 	ldw	r2,8(r2)
 201a2ac:	100f883a 	mov	r7,r2
 201a2b0:	e1bfff17 	ldw	r6,-4(fp)
 201a2b4:	e17ffe17 	ldw	r5,-8(fp)
 201a2b8:	1809883a 	mov	r4,r3
 201a2bc:	201ac7c0 	call	201ac7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201a2c0:	e037883a 	mov	sp,fp
 201a2c4:	dfc00117 	ldw	ra,4(sp)
 201a2c8:	df000017 	ldw	fp,0(sp)
 201a2cc:	dec00204 	addi	sp,sp,8
 201a2d0:	f800283a 	ret

0201a2d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 201a2d4:	defffc04 	addi	sp,sp,-16
 201a2d8:	dfc00315 	stw	ra,12(sp)
 201a2dc:	df000215 	stw	fp,8(sp)
 201a2e0:	df000204 	addi	fp,sp,8
 201a2e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201a2e8:	e0bfff17 	ldw	r2,-4(fp)
 201a2ec:	10800017 	ldw	r2,0(r2)
 201a2f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 201a2f4:	e0bffe17 	ldw	r2,-8(fp)
 201a2f8:	10c00a04 	addi	r3,r2,40
 201a2fc:	e0bfff17 	ldw	r2,-4(fp)
 201a300:	10800217 	ldw	r2,8(r2)
 201a304:	100b883a 	mov	r5,r2
 201a308:	1809883a 	mov	r4,r3
 201a30c:	201a8680 	call	201a868 <altera_avalon_jtag_uart_close>
}
 201a310:	e037883a 	mov	sp,fp
 201a314:	dfc00117 	ldw	ra,4(sp)
 201a318:	df000017 	ldw	fp,0(sp)
 201a31c:	dec00204 	addi	sp,sp,8
 201a320:	f800283a 	ret

0201a324 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201a324:	defffa04 	addi	sp,sp,-24
 201a328:	dfc00515 	stw	ra,20(sp)
 201a32c:	df000415 	stw	fp,16(sp)
 201a330:	df000404 	addi	fp,sp,16
 201a334:	e13ffd15 	stw	r4,-12(fp)
 201a338:	e17ffe15 	stw	r5,-8(fp)
 201a33c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 201a340:	e0bffd17 	ldw	r2,-12(fp)
 201a344:	10800017 	ldw	r2,0(r2)
 201a348:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201a34c:	e0bffc17 	ldw	r2,-16(fp)
 201a350:	10800a04 	addi	r2,r2,40
 201a354:	e1bfff17 	ldw	r6,-4(fp)
 201a358:	e17ffe17 	ldw	r5,-8(fp)
 201a35c:	1009883a 	mov	r4,r2
 201a360:	201a8d00 	call	201a8d0 <altera_avalon_jtag_uart_ioctl>
}
 201a364:	e037883a 	mov	sp,fp
 201a368:	dfc00117 	ldw	ra,4(sp)
 201a36c:	df000017 	ldw	fp,0(sp)
 201a370:	dec00204 	addi	sp,sp,8
 201a374:	f800283a 	ret

0201a378 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201a378:	defff104 	addi	sp,sp,-60
 201a37c:	dfc00e15 	stw	ra,56(sp)
 201a380:	df000d15 	stw	fp,52(sp)
 201a384:	df000d04 	addi	fp,sp,52
 201a388:	e13ff915 	stw	r4,-28(fp)
 201a38c:	e17ffa15 	stw	r5,-24(fp)
 201a390:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201a394:	e0bff917 	ldw	r2,-28(fp)
 201a398:	10800c04 	addi	r2,r2,48
 201a39c:	e0bff415 	stw	r2,-48(fp)
 201a3a0:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 201a3a4:	e0bff80b 	ldhu	r2,-32(fp)
 201a3a8:	e0fff884 	addi	r3,fp,-30
 201a3ac:	180b883a 	mov	r5,r3
 201a3b0:	1009883a 	mov	r4,r2
 201a3b4:	20143680 	call	2014368 <OSFlagCreate>
 201a3b8:	1007883a 	mov	r3,r2
 201a3bc:	e0bff417 	ldw	r2,-48(fp)
 201a3c0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 201a3c4:	e0bff917 	ldw	r2,-28(fp)
 201a3c8:	10800a04 	addi	r2,r2,40
 201a3cc:	e0bff515 	stw	r2,-44(fp)
 201a3d0:	00800044 	movi	r2,1
 201a3d4:	e0bff78d 	sth	r2,-34(fp)
 201a3d8:	e0bff78b 	ldhu	r2,-34(fp)
 201a3dc:	1009883a 	mov	r4,r2
 201a3e0:	2017b440 	call	2017b44 <OSSemCreate>
 201a3e4:	1007883a 	mov	r3,r2
 201a3e8:	e0bff517 	ldw	r2,-44(fp)
 201a3ec:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 201a3f0:	e0bff917 	ldw	r2,-28(fp)
 201a3f4:	10800b04 	addi	r2,r2,44
 201a3f8:	e0bff615 	stw	r2,-40(fp)
 201a3fc:	00800044 	movi	r2,1
 201a400:	e0bff70d 	sth	r2,-36(fp)
 201a404:	e0bff70b 	ldhu	r2,-36(fp)
 201a408:	1009883a 	mov	r4,r2
 201a40c:	2017b440 	call	2017b44 <OSSemCreate>
 201a410:	1007883a 	mov	r3,r2
 201a414:	e0bff617 	ldw	r2,-40(fp)
 201a418:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201a41c:	e0bff917 	ldw	r2,-28(fp)
 201a420:	00c00044 	movi	r3,1
 201a424:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 201a428:	e0bff917 	ldw	r2,-28(fp)
 201a42c:	10800017 	ldw	r2,0(r2)
 201a430:	10800104 	addi	r2,r2,4
 201a434:	1007883a 	mov	r3,r2
 201a438:	e0bff917 	ldw	r2,-28(fp)
 201a43c:	10800817 	ldw	r2,32(r2)
 201a440:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 201a444:	e0bffa17 	ldw	r2,-24(fp)
 201a448:	e0fffb17 	ldw	r3,-20(fp)
 201a44c:	d8000015 	stw	zero,0(sp)
 201a450:	e1fff917 	ldw	r7,-28(fp)
 201a454:	018080b4 	movhi	r6,514
 201a458:	31a93004 	addi	r6,r6,-23360
 201a45c:	180b883a 	mov	r5,r3
 201a460:	1009883a 	mov	r4,r2
 201a464:	201b37c0 	call	201b37c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201a468:	e0bff917 	ldw	r2,-28(fp)
 201a46c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201a470:	e0bff917 	ldw	r2,-28(fp)
 201a474:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201a478:	d0e74017 	ldw	r3,-25344(gp)
 201a47c:	e1fff917 	ldw	r7,-28(fp)
 201a480:	018080b4 	movhi	r6,514
 201a484:	31a9d904 	addi	r6,r6,-22684
 201a488:	180b883a 	mov	r5,r3
 201a48c:	1009883a 	mov	r4,r2
 201a490:	201b0340 	call	201b034 <alt_alarm_start>
 201a494:	1000040e 	bge	r2,zero,201a4a8 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201a498:	e0fff917 	ldw	r3,-28(fp)
 201a49c:	00a00034 	movhi	r2,32768
 201a4a0:	10bfffc4 	addi	r2,r2,-1
 201a4a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201a4a8:	0001883a 	nop
 201a4ac:	e037883a 	mov	sp,fp
 201a4b0:	dfc00117 	ldw	ra,4(sp)
 201a4b4:	df000017 	ldw	fp,0(sp)
 201a4b8:	dec00204 	addi	sp,sp,8
 201a4bc:	f800283a 	ret

0201a4c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201a4c0:	defff204 	addi	sp,sp,-56
 201a4c4:	dfc00d15 	stw	ra,52(sp)
 201a4c8:	df000c15 	stw	fp,48(sp)
 201a4cc:	df000c04 	addi	fp,sp,48
 201a4d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201a4d4:	e0bfff17 	ldw	r2,-4(fp)
 201a4d8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 201a4dc:	e0bff617 	ldw	r2,-40(fp)
 201a4e0:	10800017 	ldw	r2,0(r2)
 201a4e4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201a4e8:	e0bff717 	ldw	r2,-36(fp)
 201a4ec:	10800104 	addi	r2,r2,4
 201a4f0:	10800037 	ldwio	r2,0(r2)
 201a4f4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201a4f8:	e0bff817 	ldw	r2,-32(fp)
 201a4fc:	1080c00c 	andi	r2,r2,768
 201a500:	10009126 	beq	r2,zero,201a748 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201a504:	e0bff817 	ldw	r2,-32(fp)
 201a508:	1080400c 	andi	r2,r2,256
 201a50c:	10004726 	beq	r2,zero,201a62c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201a510:	00800074 	movhi	r2,1
 201a514:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201a518:	e0bff617 	ldw	r2,-40(fp)
 201a51c:	10800d17 	ldw	r2,52(r2)
 201a520:	10800044 	addi	r2,r2,1
 201a524:	1081ffcc 	andi	r2,r2,2047
 201a528:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 201a52c:	e0bff617 	ldw	r2,-40(fp)
 201a530:	10c00e17 	ldw	r3,56(r2)
 201a534:	e0bff917 	ldw	r2,-28(fp)
 201a538:	18802726 	beq	r3,r2,201a5d8 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201a53c:	e0bff717 	ldw	r2,-36(fp)
 201a540:	10800037 	ldwio	r2,0(r2)
 201a544:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201a548:	e0bff417 	ldw	r2,-48(fp)
 201a54c:	10a0000c 	andi	r2,r2,32768
 201a550:	10002326 	beq	r2,zero,201a5e0 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201a554:	e0bff617 	ldw	r2,-40(fp)
 201a558:	10800d17 	ldw	r2,52(r2)
 201a55c:	e0fff417 	ldw	r3,-48(fp)
 201a560:	1809883a 	mov	r4,r3
 201a564:	e0fff617 	ldw	r3,-40(fp)
 201a568:	1885883a 	add	r2,r3,r2
 201a56c:	10801104 	addi	r2,r2,68
 201a570:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201a574:	e0bff617 	ldw	r2,-40(fp)
 201a578:	10800d17 	ldw	r2,52(r2)
 201a57c:	10800044 	addi	r2,r2,1
 201a580:	10c1ffcc 	andi	r3,r2,2047
 201a584:	e0bff617 	ldw	r2,-40(fp)
 201a588:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 201a58c:	e0bff617 	ldw	r2,-40(fp)
 201a590:	10800c17 	ldw	r2,48(r2)
 201a594:	e0bffb15 	stw	r2,-20(fp)
 201a598:	00800044 	movi	r2,1
 201a59c:	e0bffc0d 	sth	r2,-16(fp)
 201a5a0:	00800044 	movi	r2,1
 201a5a4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201a5a8:	d0a72b43 	ldbu	r2,-25427(gp)
 201a5ac:	10803fcc 	andi	r2,r2,255
 201a5b0:	103fd926 	beq	r2,zero,201a518 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 201a5b4:	e0bffc0b 	ldhu	r2,-16(fp)
 201a5b8:	e0fffc83 	ldbu	r3,-14(fp)
 201a5bc:	e13ffdc4 	addi	r4,fp,-9
 201a5c0:	200f883a 	mov	r7,r4
 201a5c4:	180d883a 	mov	r6,r3
 201a5c8:	100b883a 	mov	r5,r2
 201a5cc:	e13ffb17 	ldw	r4,-20(fp)
 201a5d0:	2014f440 	call	2014f44 <OSFlagPost>
      }
 201a5d4:	003fd006 	br	201a518 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 201a5d8:	0001883a 	nop
 201a5dc:	00000106 	br	201a5e4 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 201a5e0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 201a5e4:	e0bff417 	ldw	r2,-48(fp)
 201a5e8:	10bfffec 	andhi	r2,r2,65535
 201a5ec:	10000f26 	beq	r2,zero,201a62c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201a5f0:	e0bff617 	ldw	r2,-40(fp)
 201a5f4:	10c00817 	ldw	r3,32(r2)
 201a5f8:	00bfff84 	movi	r2,-2
 201a5fc:	1886703a 	and	r3,r3,r2
 201a600:	e0bff617 	ldw	r2,-40(fp)
 201a604:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201a608:	e0bff717 	ldw	r2,-36(fp)
 201a60c:	10800104 	addi	r2,r2,4
 201a610:	1007883a 	mov	r3,r2
 201a614:	e0bff617 	ldw	r2,-40(fp)
 201a618:	10800817 	ldw	r2,32(r2)
 201a61c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201a620:	e0bff717 	ldw	r2,-36(fp)
 201a624:	10800104 	addi	r2,r2,4
 201a628:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201a62c:	e0bff817 	ldw	r2,-32(fp)
 201a630:	1080800c 	andi	r2,r2,512
 201a634:	103fac26 	beq	r2,zero,201a4e8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201a638:	e0bff817 	ldw	r2,-32(fp)
 201a63c:	1004d43a 	srli	r2,r2,16
 201a640:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201a644:	00002606 	br	201a6e0 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201a648:	e0bff717 	ldw	r2,-36(fp)
 201a64c:	e0fff617 	ldw	r3,-40(fp)
 201a650:	18c01017 	ldw	r3,64(r3)
 201a654:	e13ff617 	ldw	r4,-40(fp)
 201a658:	20c7883a 	add	r3,r4,r3
 201a65c:	18c21104 	addi	r3,r3,2116
 201a660:	18c00003 	ldbu	r3,0(r3)
 201a664:	18c03fcc 	andi	r3,r3,255
 201a668:	18c0201c 	xori	r3,r3,128
 201a66c:	18ffe004 	addi	r3,r3,-128
 201a670:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201a674:	e0bff617 	ldw	r2,-40(fp)
 201a678:	10801017 	ldw	r2,64(r2)
 201a67c:	10800044 	addi	r2,r2,1
 201a680:	10c1ffcc 	andi	r3,r2,2047
 201a684:	e0bff617 	ldw	r2,-40(fp)
 201a688:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 201a68c:	e0bff617 	ldw	r2,-40(fp)
 201a690:	10800c17 	ldw	r2,48(r2)
 201a694:	e0bffa15 	stw	r2,-24(fp)
 201a698:	00800084 	movi	r2,2
 201a69c:	e0bffd0d 	sth	r2,-12(fp)
 201a6a0:	00800044 	movi	r2,1
 201a6a4:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201a6a8:	d0a72b43 	ldbu	r2,-25427(gp)
 201a6ac:	10803fcc 	andi	r2,r2,255
 201a6b0:	10000826 	beq	r2,zero,201a6d4 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 201a6b4:	e0bffd0b 	ldhu	r2,-12(fp)
 201a6b8:	e0fffd83 	ldbu	r3,-10(fp)
 201a6bc:	e13ffe04 	addi	r4,fp,-8
 201a6c0:	200f883a 	mov	r7,r4
 201a6c4:	180d883a 	mov	r6,r3
 201a6c8:	100b883a 	mov	r5,r2
 201a6cc:	e13ffa17 	ldw	r4,-24(fp)
 201a6d0:	2014f440 	call	2014f44 <OSFlagPost>

        space--;
 201a6d4:	e0bff517 	ldw	r2,-44(fp)
 201a6d8:	10bfffc4 	addi	r2,r2,-1
 201a6dc:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 201a6e0:	e0bff517 	ldw	r2,-44(fp)
 201a6e4:	10000526 	beq	r2,zero,201a6fc <altera_avalon_jtag_uart_irq+0x23c>
 201a6e8:	e0bff617 	ldw	r2,-40(fp)
 201a6ec:	10c01017 	ldw	r3,64(r2)
 201a6f0:	e0bff617 	ldw	r2,-40(fp)
 201a6f4:	10800f17 	ldw	r2,60(r2)
 201a6f8:	18bfd31e 	bne	r3,r2,201a648 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 201a6fc:	e0bff517 	ldw	r2,-44(fp)
 201a700:	103f7926 	beq	r2,zero,201a4e8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201a704:	e0bff617 	ldw	r2,-40(fp)
 201a708:	10c00817 	ldw	r3,32(r2)
 201a70c:	00bfff44 	movi	r2,-3
 201a710:	1886703a 	and	r3,r3,r2
 201a714:	e0bff617 	ldw	r2,-40(fp)
 201a718:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201a71c:	e0bff617 	ldw	r2,-40(fp)
 201a720:	10800017 	ldw	r2,0(r2)
 201a724:	10800104 	addi	r2,r2,4
 201a728:	1007883a 	mov	r3,r2
 201a72c:	e0bff617 	ldw	r2,-40(fp)
 201a730:	10800817 	ldw	r2,32(r2)
 201a734:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201a738:	e0bff717 	ldw	r2,-36(fp)
 201a73c:	10800104 	addi	r2,r2,4
 201a740:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201a744:	003f6806 	br	201a4e8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 201a748:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 201a74c:	0001883a 	nop
 201a750:	e037883a 	mov	sp,fp
 201a754:	dfc00117 	ldw	ra,4(sp)
 201a758:	df000017 	ldw	fp,0(sp)
 201a75c:	dec00204 	addi	sp,sp,8
 201a760:	f800283a 	ret

0201a764 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201a764:	defff904 	addi	sp,sp,-28
 201a768:	dfc00615 	stw	ra,24(sp)
 201a76c:	df000515 	stw	fp,20(sp)
 201a770:	df000504 	addi	fp,sp,20
 201a774:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201a778:	e0bfff17 	ldw	r2,-4(fp)
 201a77c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201a780:	e0bffb17 	ldw	r2,-20(fp)
 201a784:	10800017 	ldw	r2,0(r2)
 201a788:	10800104 	addi	r2,r2,4
 201a78c:	10800037 	ldwio	r2,0(r2)
 201a790:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201a794:	e0bffc17 	ldw	r2,-16(fp)
 201a798:	1081000c 	andi	r2,r2,1024
 201a79c:	10000b26 	beq	r2,zero,201a7cc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 201a7a0:	e0bffb17 	ldw	r2,-20(fp)
 201a7a4:	10800017 	ldw	r2,0(r2)
 201a7a8:	10800104 	addi	r2,r2,4
 201a7ac:	1007883a 	mov	r3,r2
 201a7b0:	e0bffb17 	ldw	r2,-20(fp)
 201a7b4:	10800817 	ldw	r2,32(r2)
 201a7b8:	10810014 	ori	r2,r2,1024
 201a7bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 201a7c0:	e0bffb17 	ldw	r2,-20(fp)
 201a7c4:	10000915 	stw	zero,36(r2)
 201a7c8:	00002106 	br	201a850 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201a7cc:	e0bffb17 	ldw	r2,-20(fp)
 201a7d0:	10c00917 	ldw	r3,36(r2)
 201a7d4:	00a00034 	movhi	r2,32768
 201a7d8:	10bfff04 	addi	r2,r2,-4
 201a7dc:	10c01c36 	bltu	r2,r3,201a850 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 201a7e0:	e0bffb17 	ldw	r2,-20(fp)
 201a7e4:	10800917 	ldw	r2,36(r2)
 201a7e8:	10c00044 	addi	r3,r2,1
 201a7ec:	e0bffb17 	ldw	r2,-20(fp)
 201a7f0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 201a7f4:	e0bffb17 	ldw	r2,-20(fp)
 201a7f8:	10c00917 	ldw	r3,36(r2)
 201a7fc:	e0bffb17 	ldw	r2,-20(fp)
 201a800:	10800117 	ldw	r2,4(r2)
 201a804:	18801236 	bltu	r3,r2,201a850 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201a808:	e0bffb17 	ldw	r2,-20(fp)
 201a80c:	10800c17 	ldw	r2,48(r2)
 201a810:	e0bffd15 	stw	r2,-12(fp)
 201a814:	00800104 	movi	r2,4
 201a818:	e0bffe0d 	sth	r2,-8(fp)
 201a81c:	00800044 	movi	r2,1
 201a820:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201a824:	d0a72b43 	ldbu	r2,-25427(gp)
 201a828:	10803fcc 	andi	r2,r2,255
 201a82c:	10000826 	beq	r2,zero,201a850 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 201a830:	e0bffe0b 	ldhu	r2,-8(fp)
 201a834:	e0fffe83 	ldbu	r3,-6(fp)
 201a838:	e13ffec4 	addi	r4,fp,-5
 201a83c:	200f883a 	mov	r7,r4
 201a840:	180d883a 	mov	r6,r3
 201a844:	100b883a 	mov	r5,r2
 201a848:	e13ffd17 	ldw	r4,-12(fp)
 201a84c:	2014f440 	call	2014f44 <OSFlagPost>
 201a850:	d0a74017 	ldw	r2,-25344(gp)
    }
  }

  return alt_ticks_per_second();
}
 201a854:	e037883a 	mov	sp,fp
 201a858:	dfc00117 	ldw	ra,4(sp)
 201a85c:	df000017 	ldw	fp,0(sp)
 201a860:	dec00204 	addi	sp,sp,8
 201a864:	f800283a 	ret

0201a868 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 201a868:	defffd04 	addi	sp,sp,-12
 201a86c:	df000215 	stw	fp,8(sp)
 201a870:	df000204 	addi	fp,sp,8
 201a874:	e13ffe15 	stw	r4,-8(fp)
 201a878:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201a87c:	00000506 	br	201a894 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 201a880:	e0bfff17 	ldw	r2,-4(fp)
 201a884:	1090000c 	andi	r2,r2,16384
 201a888:	10000226 	beq	r2,zero,201a894 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201a88c:	00bffd44 	movi	r2,-11
 201a890:	00000b06 	br	201a8c0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201a894:	e0bffe17 	ldw	r2,-8(fp)
 201a898:	10c01017 	ldw	r3,64(r2)
 201a89c:	e0bffe17 	ldw	r2,-8(fp)
 201a8a0:	10800f17 	ldw	r2,60(r2)
 201a8a4:	18800526 	beq	r3,r2,201a8bc <altera_avalon_jtag_uart_close+0x54>
 201a8a8:	e0bffe17 	ldw	r2,-8(fp)
 201a8ac:	10c00917 	ldw	r3,36(r2)
 201a8b0:	e0bffe17 	ldw	r2,-8(fp)
 201a8b4:	10800117 	ldw	r2,4(r2)
 201a8b8:	18bff136 	bltu	r3,r2,201a880 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201a8bc:	0005883a 	mov	r2,zero
}
 201a8c0:	e037883a 	mov	sp,fp
 201a8c4:	df000017 	ldw	fp,0(sp)
 201a8c8:	dec00104 	addi	sp,sp,4
 201a8cc:	f800283a 	ret

0201a8d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201a8d0:	defffa04 	addi	sp,sp,-24
 201a8d4:	df000515 	stw	fp,20(sp)
 201a8d8:	df000504 	addi	fp,sp,20
 201a8dc:	e13ffd15 	stw	r4,-12(fp)
 201a8e0:	e17ffe15 	stw	r5,-8(fp)
 201a8e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 201a8e8:	00bff9c4 	movi	r2,-25
 201a8ec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 201a8f0:	e0bffe17 	ldw	r2,-8(fp)
 201a8f4:	10da8060 	cmpeqi	r3,r2,27137
 201a8f8:	1800031e 	bne	r3,zero,201a908 <altera_avalon_jtag_uart_ioctl+0x38>
 201a8fc:	109a80a0 	cmpeqi	r2,r2,27138
 201a900:	1000181e 	bne	r2,zero,201a964 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 201a904:	00002906 	br	201a9ac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201a908:	e0bffd17 	ldw	r2,-12(fp)
 201a90c:	10c00117 	ldw	r3,4(r2)
 201a910:	00a00034 	movhi	r2,32768
 201a914:	10bfffc4 	addi	r2,r2,-1
 201a918:	18802126 	beq	r3,r2,201a9a0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 201a91c:	e0bfff17 	ldw	r2,-4(fp)
 201a920:	10800017 	ldw	r2,0(r2)
 201a924:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201a928:	e0bffc17 	ldw	r2,-16(fp)
 201a92c:	10800090 	cmplti	r2,r2,2
 201a930:	1000061e 	bne	r2,zero,201a94c <altera_avalon_jtag_uart_ioctl+0x7c>
 201a934:	e0fffc17 	ldw	r3,-16(fp)
 201a938:	00a00034 	movhi	r2,32768
 201a93c:	10bfffc4 	addi	r2,r2,-1
 201a940:	18800226 	beq	r3,r2,201a94c <altera_avalon_jtag_uart_ioctl+0x7c>
 201a944:	e0bffc17 	ldw	r2,-16(fp)
 201a948:	00000206 	br	201a954 <altera_avalon_jtag_uart_ioctl+0x84>
 201a94c:	00a00034 	movhi	r2,32768
 201a950:	10bfff84 	addi	r2,r2,-2
 201a954:	e0fffd17 	ldw	r3,-12(fp)
 201a958:	18800115 	stw	r2,4(r3)
      rc = 0;
 201a95c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201a960:	00000f06 	br	201a9a0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201a964:	e0bffd17 	ldw	r2,-12(fp)
 201a968:	10c00117 	ldw	r3,4(r2)
 201a96c:	00a00034 	movhi	r2,32768
 201a970:	10bfffc4 	addi	r2,r2,-1
 201a974:	18800c26 	beq	r3,r2,201a9a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201a978:	e0bffd17 	ldw	r2,-12(fp)
 201a97c:	10c00917 	ldw	r3,36(r2)
 201a980:	e0bffd17 	ldw	r2,-12(fp)
 201a984:	10800117 	ldw	r2,4(r2)
 201a988:	1885803a 	cmpltu	r2,r3,r2
 201a98c:	10c03fcc 	andi	r3,r2,255
 201a990:	e0bfff17 	ldw	r2,-4(fp)
 201a994:	10c00015 	stw	r3,0(r2)
      rc = 0;
 201a998:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201a99c:	00000206 	br	201a9a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201a9a0:	0001883a 	nop
 201a9a4:	00000106 	br	201a9ac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 201a9a8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201a9ac:	e0bffb17 	ldw	r2,-20(fp)
}
 201a9b0:	e037883a 	mov	sp,fp
 201a9b4:	df000017 	ldw	fp,0(sp)
 201a9b8:	dec00104 	addi	sp,sp,4
 201a9bc:	f800283a 	ret

0201a9c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201a9c0:	deffed04 	addi	sp,sp,-76
 201a9c4:	dfc01215 	stw	ra,72(sp)
 201a9c8:	df001115 	stw	fp,68(sp)
 201a9cc:	df001104 	addi	fp,sp,68
 201a9d0:	e13ffc15 	stw	r4,-16(fp)
 201a9d4:	e17ffd15 	stw	r5,-12(fp)
 201a9d8:	e1bffe15 	stw	r6,-8(fp)
 201a9dc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 201a9e0:	e0bffd17 	ldw	r2,-12(fp)
 201a9e4:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201a9e8:	e0bffc17 	ldw	r2,-16(fp)
 201a9ec:	10800a17 	ldw	r2,40(r2)
 201a9f0:	e0bff815 	stw	r2,-32(fp)
 201a9f4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201a9f8:	e0bff90b 	ldhu	r2,-28(fp)
 201a9fc:	e0fffb04 	addi	r3,fp,-20
 201aa00:	180d883a 	mov	r6,r3
 201aa04:	100b883a 	mov	r5,r2
 201aa08:	e13ff817 	ldw	r4,-32(fp)
 201aa0c:	2017e5c0 	call	2017e5c <OSSemPend>

  while (space > 0)
 201aa10:	00006106 	br	201ab98 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201aa14:	e0bffc17 	ldw	r2,-16(fp)
 201aa18:	10800d17 	ldw	r2,52(r2)
 201aa1c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 201aa20:	e0bffc17 	ldw	r2,-16(fp)
 201aa24:	10800e17 	ldw	r2,56(r2)
 201aa28:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 201aa2c:	e0fff317 	ldw	r3,-52(fp)
 201aa30:	e0bff417 	ldw	r2,-48(fp)
 201aa34:	18800536 	bltu	r3,r2,201aa4c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 201aa38:	e0fff317 	ldw	r3,-52(fp)
 201aa3c:	e0bff417 	ldw	r2,-48(fp)
 201aa40:	1885c83a 	sub	r2,r3,r2
 201aa44:	e0bff115 	stw	r2,-60(fp)
 201aa48:	00000406 	br	201aa5c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201aa4c:	00c20004 	movi	r3,2048
 201aa50:	e0bff417 	ldw	r2,-48(fp)
 201aa54:	1885c83a 	sub	r2,r3,r2
 201aa58:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201aa5c:	e0bff117 	ldw	r2,-60(fp)
 201aa60:	10001e26 	beq	r2,zero,201aadc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201aa64:	e0fffe17 	ldw	r3,-8(fp)
 201aa68:	e0bff117 	ldw	r2,-60(fp)
 201aa6c:	1880022e 	bgeu	r3,r2,201aa78 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 201aa70:	e0bffe17 	ldw	r2,-8(fp)
 201aa74:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201aa78:	e0bffc17 	ldw	r2,-16(fp)
 201aa7c:	10c01104 	addi	r3,r2,68
 201aa80:	e0bff417 	ldw	r2,-48(fp)
 201aa84:	1885883a 	add	r2,r3,r2
 201aa88:	e1bff117 	ldw	r6,-60(fp)
 201aa8c:	100b883a 	mov	r5,r2
 201aa90:	e13ff017 	ldw	r4,-64(fp)
 201aa94:	200b5b40 	call	200b5b4 <memcpy>
      ptr   += n;
 201aa98:	e0fff017 	ldw	r3,-64(fp)
 201aa9c:	e0bff117 	ldw	r2,-60(fp)
 201aaa0:	1885883a 	add	r2,r3,r2
 201aaa4:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 201aaa8:	e0fffe17 	ldw	r3,-8(fp)
 201aaac:	e0bff117 	ldw	r2,-60(fp)
 201aab0:	1885c83a 	sub	r2,r3,r2
 201aab4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201aab8:	e0fff417 	ldw	r3,-48(fp)
 201aabc:	e0bff117 	ldw	r2,-60(fp)
 201aac0:	1885883a 	add	r2,r3,r2
 201aac4:	10c1ffcc 	andi	r3,r2,2047
 201aac8:	e0bffc17 	ldw	r2,-16(fp)
 201aacc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 201aad0:	e0bffe17 	ldw	r2,-8(fp)
 201aad4:	00bfcf16 	blt	zero,r2,201aa14 <altera_avalon_jtag_uart_read+0x54>
 201aad8:	00000106 	br	201aae0 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 201aadc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 201aae0:	e0fff017 	ldw	r3,-64(fp)
 201aae4:	e0bffd17 	ldw	r2,-12(fp)
 201aae8:	18802e1e 	bne	r3,r2,201aba4 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 201aaec:	e0bfff17 	ldw	r2,-4(fp)
 201aaf0:	1090000c 	andi	r2,r2,16384
 201aaf4:	10002d1e 	bne	r2,zero,201abac <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 201aaf8:	d0a72b43 	ldbu	r2,-25427(gp)
 201aafc:	10803fcc 	andi	r2,r2,255
 201ab00:	10800058 	cmpnei	r2,r2,1
 201ab04:	1000161e 	bne	r2,zero,201ab60 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201ab08:	e0bffc17 	ldw	r2,-16(fp)
 201ab0c:	10800c17 	ldw	r2,48(r2)
 201ab10:	e0bff215 	stw	r2,-56(fp)
 201ab14:	00800144 	movi	r2,5
 201ab18:	e0bff98d 	sth	r2,-26(fp)
 201ab1c:	00bfe0c4 	movi	r2,-125
 201ab20:	e0bffa05 	stb	r2,-24(fp)
 201ab24:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201ab28:	d0a72b43 	ldbu	r2,-25427(gp)
 201ab2c:	10803fcc 	andi	r2,r2,255
 201ab30:	10001526 	beq	r2,zero,201ab88 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201ab34:	e0fff98b 	ldhu	r3,-26(fp)
 201ab38:	e13ffa03 	ldbu	r4,-24(fp)
 201ab3c:	e17ffa8b 	ldhu	r5,-22(fp)
 201ab40:	e0bffb44 	addi	r2,fp,-19
 201ab44:	d8800015 	stw	r2,0(sp)
 201ab48:	280f883a 	mov	r7,r5
 201ab4c:	200d883a 	mov	r6,r4
 201ab50:	180b883a 	mov	r5,r3
 201ab54:	e13ff217 	ldw	r4,-56(fp)
 201ab58:	201492c0 	call	201492c <OSFlagPend>
 201ab5c:	00000a06 	br	201ab88 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 201ab60:	0001883a 	nop
 201ab64:	e0bffc17 	ldw	r2,-16(fp)
 201ab68:	10c00d17 	ldw	r3,52(r2)
 201ab6c:	e0bff317 	ldw	r2,-52(fp)
 201ab70:	1880051e 	bne	r3,r2,201ab88 <altera_avalon_jtag_uart_read+0x1c8>
 201ab74:	e0bffc17 	ldw	r2,-16(fp)
 201ab78:	10c00917 	ldw	r3,36(r2)
 201ab7c:	e0bffc17 	ldw	r2,-16(fp)
 201ab80:	10800117 	ldw	r2,4(r2)
 201ab84:	18bff736 	bltu	r3,r2,201ab64 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 201ab88:	e0bffc17 	ldw	r2,-16(fp)
 201ab8c:	10c00d17 	ldw	r3,52(r2)
 201ab90:	e0bff317 	ldw	r2,-52(fp)
 201ab94:	18800726 	beq	r3,r2,201abb4 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 201ab98:	e0bffe17 	ldw	r2,-8(fp)
 201ab9c:	00bf9d16 	blt	zero,r2,201aa14 <altera_avalon_jtag_uart_read+0x54>
 201aba0:	00000506 	br	201abb8 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 201aba4:	0001883a 	nop
 201aba8:	00000306 	br	201abb8 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 201abac:	0001883a 	nop
 201abb0:	00000106 	br	201abb8 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 201abb4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 201abb8:	e0bffc17 	ldw	r2,-16(fp)
 201abbc:	10800a17 	ldw	r2,40(r2)
 201abc0:	1009883a 	mov	r4,r2
 201abc4:	20181d40 	call	20181d4 <OSSemPost>

  if (ptr != buffer)
 201abc8:	e0fff017 	ldw	r3,-64(fp)
 201abcc:	e0bffd17 	ldw	r2,-12(fp)
 201abd0:	18801826 	beq	r3,r2,201ac34 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201abd4:	0005303a 	rdctl	r2,status
 201abd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201abdc:	e0fff717 	ldw	r3,-36(fp)
 201abe0:	00bfff84 	movi	r2,-2
 201abe4:	1884703a 	and	r2,r3,r2
 201abe8:	1001703a 	wrctl	status,r2
  
  return context;
 201abec:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201abf0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201abf4:	e0bffc17 	ldw	r2,-16(fp)
 201abf8:	10800817 	ldw	r2,32(r2)
 201abfc:	10c00054 	ori	r3,r2,1
 201ac00:	e0bffc17 	ldw	r2,-16(fp)
 201ac04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201ac08:	e0bffc17 	ldw	r2,-16(fp)
 201ac0c:	10800017 	ldw	r2,0(r2)
 201ac10:	10800104 	addi	r2,r2,4
 201ac14:	1007883a 	mov	r3,r2
 201ac18:	e0bffc17 	ldw	r2,-16(fp)
 201ac1c:	10800817 	ldw	r2,32(r2)
 201ac20:	18800035 	stwio	r2,0(r3)
 201ac24:	e0bff617 	ldw	r2,-40(fp)
 201ac28:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ac2c:	e0bff517 	ldw	r2,-44(fp)
 201ac30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 201ac34:	e0fff017 	ldw	r3,-64(fp)
 201ac38:	e0bffd17 	ldw	r2,-12(fp)
 201ac3c:	18800426 	beq	r3,r2,201ac50 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 201ac40:	e0fff017 	ldw	r3,-64(fp)
 201ac44:	e0bffd17 	ldw	r2,-12(fp)
 201ac48:	1885c83a 	sub	r2,r3,r2
 201ac4c:	00000606 	br	201ac68 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 201ac50:	e0bfff17 	ldw	r2,-4(fp)
 201ac54:	1090000c 	andi	r2,r2,16384
 201ac58:	10000226 	beq	r2,zero,201ac64 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 201ac5c:	00bffd44 	movi	r2,-11
 201ac60:	00000106 	br	201ac68 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 201ac64:	00bffec4 	movi	r2,-5
}
 201ac68:	e037883a 	mov	sp,fp
 201ac6c:	dfc00117 	ldw	ra,4(sp)
 201ac70:	df000017 	ldw	fp,0(sp)
 201ac74:	dec00204 	addi	sp,sp,8
 201ac78:	f800283a 	ret

0201ac7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 201ac7c:	deffed04 	addi	sp,sp,-76
 201ac80:	dfc01215 	stw	ra,72(sp)
 201ac84:	df001115 	stw	fp,68(sp)
 201ac88:	df001104 	addi	fp,sp,68
 201ac8c:	e13ffc15 	stw	r4,-16(fp)
 201ac90:	e17ffd15 	stw	r5,-12(fp)
 201ac94:	e1bffe15 	stw	r6,-8(fp)
 201ac98:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 201ac9c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 201aca0:	e0bffd17 	ldw	r2,-12(fp)
 201aca4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 201aca8:	e0bffc17 	ldw	r2,-16(fp)
 201acac:	10800b17 	ldw	r2,44(r2)
 201acb0:	e0bff815 	stw	r2,-32(fp)
 201acb4:	e03ff90d 	sth	zero,-28(fp)
 201acb8:	e0bff90b 	ldhu	r2,-28(fp)
 201acbc:	e0fffb44 	addi	r3,fp,-19
 201acc0:	180d883a 	mov	r6,r3
 201acc4:	100b883a 	mov	r5,r2
 201acc8:	e13ff817 	ldw	r4,-32(fp)
 201accc:	2017e5c0 	call	2017e5c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201acd0:	00003706 	br	201adb0 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 201acd4:	e0bffc17 	ldw	r2,-16(fp)
 201acd8:	10800f17 	ldw	r2,60(r2)
 201acdc:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 201ace0:	e0bffc17 	ldw	r2,-16(fp)
 201ace4:	10801017 	ldw	r2,64(r2)
 201ace8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 201acec:	e0fff417 	ldw	r3,-48(fp)
 201acf0:	e0bff017 	ldw	r2,-64(fp)
 201acf4:	1880062e 	bgeu	r3,r2,201ad10 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 201acf8:	e0fff017 	ldw	r3,-64(fp)
 201acfc:	e0bff417 	ldw	r2,-48(fp)
 201ad00:	1885c83a 	sub	r2,r3,r2
 201ad04:	10bfffc4 	addi	r2,r2,-1
 201ad08:	e0bff115 	stw	r2,-60(fp)
 201ad0c:	00000b06 	br	201ad3c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 201ad10:	e0bff017 	ldw	r2,-64(fp)
 201ad14:	10000526 	beq	r2,zero,201ad2c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 201ad18:	00c20004 	movi	r3,2048
 201ad1c:	e0bff417 	ldw	r2,-48(fp)
 201ad20:	1885c83a 	sub	r2,r3,r2
 201ad24:	e0bff115 	stw	r2,-60(fp)
 201ad28:	00000406 	br	201ad3c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 201ad2c:	00c1ffc4 	movi	r3,2047
 201ad30:	e0bff417 	ldw	r2,-48(fp)
 201ad34:	1885c83a 	sub	r2,r3,r2
 201ad38:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201ad3c:	e0bff117 	ldw	r2,-60(fp)
 201ad40:	10001e26 	beq	r2,zero,201adbc <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 201ad44:	e0fffe17 	ldw	r3,-8(fp)
 201ad48:	e0bff117 	ldw	r2,-60(fp)
 201ad4c:	1880022e 	bgeu	r3,r2,201ad58 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 201ad50:	e0bffe17 	ldw	r2,-8(fp)
 201ad54:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 201ad58:	e0bffc17 	ldw	r2,-16(fp)
 201ad5c:	10c21104 	addi	r3,r2,2116
 201ad60:	e0bff417 	ldw	r2,-48(fp)
 201ad64:	1885883a 	add	r2,r3,r2
 201ad68:	e1bff117 	ldw	r6,-60(fp)
 201ad6c:	e17ffd17 	ldw	r5,-12(fp)
 201ad70:	1009883a 	mov	r4,r2
 201ad74:	200b5b40 	call	200b5b4 <memcpy>
      ptr   += n;
 201ad78:	e0fffd17 	ldw	r3,-12(fp)
 201ad7c:	e0bff117 	ldw	r2,-60(fp)
 201ad80:	1885883a 	add	r2,r3,r2
 201ad84:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 201ad88:	e0fffe17 	ldw	r3,-8(fp)
 201ad8c:	e0bff117 	ldw	r2,-60(fp)
 201ad90:	1885c83a 	sub	r2,r3,r2
 201ad94:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201ad98:	e0fff417 	ldw	r3,-48(fp)
 201ad9c:	e0bff117 	ldw	r2,-60(fp)
 201ada0:	1885883a 	add	r2,r3,r2
 201ada4:	10c1ffcc 	andi	r3,r2,2047
 201ada8:	e0bffc17 	ldw	r2,-16(fp)
 201adac:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201adb0:	e0bffe17 	ldw	r2,-8(fp)
 201adb4:	00bfc716 	blt	zero,r2,201acd4 <altera_avalon_jtag_uart_write+0x58>
 201adb8:	00000106 	br	201adc0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 201adbc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201adc0:	0005303a 	rdctl	r2,status
 201adc4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201adc8:	e0fff717 	ldw	r3,-36(fp)
 201adcc:	00bfff84 	movi	r2,-2
 201add0:	1884703a 	and	r2,r3,r2
 201add4:	1001703a 	wrctl	status,r2
  
  return context;
 201add8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 201addc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201ade0:	e0bffc17 	ldw	r2,-16(fp)
 201ade4:	10800817 	ldw	r2,32(r2)
 201ade8:	10c00094 	ori	r3,r2,2
 201adec:	e0bffc17 	ldw	r2,-16(fp)
 201adf0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201adf4:	e0bffc17 	ldw	r2,-16(fp)
 201adf8:	10800017 	ldw	r2,0(r2)
 201adfc:	10800104 	addi	r2,r2,4
 201ae00:	1007883a 	mov	r3,r2
 201ae04:	e0bffc17 	ldw	r2,-16(fp)
 201ae08:	10800817 	ldw	r2,32(r2)
 201ae0c:	18800035 	stwio	r2,0(r3)
 201ae10:	e0bff617 	ldw	r2,-40(fp)
 201ae14:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ae18:	e0bff317 	ldw	r2,-52(fp)
 201ae1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 201ae20:	e0bffe17 	ldw	r2,-8(fp)
 201ae24:	00802a0e 	bge	zero,r2,201aed0 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 201ae28:	e0bfff17 	ldw	r2,-4(fp)
 201ae2c:	1090000c 	andi	r2,r2,16384
 201ae30:	10002a1e 	bne	r2,zero,201aedc <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 201ae34:	d0a72b43 	ldbu	r2,-25427(gp)
 201ae38:	10803fcc 	andi	r2,r2,255
 201ae3c:	10800058 	cmpnei	r2,r2,1
 201ae40:	1000161e 	bne	r2,zero,201ae9c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 201ae44:	e0bffc17 	ldw	r2,-16(fp)
 201ae48:	10800c17 	ldw	r2,48(r2)
 201ae4c:	e0bff515 	stw	r2,-44(fp)
 201ae50:	00800184 	movi	r2,6
 201ae54:	e0bff98d 	sth	r2,-26(fp)
 201ae58:	00bfe0c4 	movi	r2,-125
 201ae5c:	e0bffa05 	stb	r2,-24(fp)
 201ae60:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201ae64:	d0a72b43 	ldbu	r2,-25427(gp)
 201ae68:	10803fcc 	andi	r2,r2,255
 201ae6c:	10001526 	beq	r2,zero,201aec4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201ae70:	e0fff98b 	ldhu	r3,-26(fp)
 201ae74:	e13ffa03 	ldbu	r4,-24(fp)
 201ae78:	e17ffa8b 	ldhu	r5,-22(fp)
 201ae7c:	e0bffb04 	addi	r2,fp,-20
 201ae80:	d8800015 	stw	r2,0(sp)
 201ae84:	280f883a 	mov	r7,r5
 201ae88:	200d883a 	mov	r6,r4
 201ae8c:	180b883a 	mov	r5,r3
 201ae90:	e13ff517 	ldw	r4,-44(fp)
 201ae94:	201492c0 	call	201492c <OSFlagPend>
 201ae98:	00000a06 	br	201aec4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 201ae9c:	0001883a 	nop
 201aea0:	e0bffc17 	ldw	r2,-16(fp)
 201aea4:	10c01017 	ldw	r3,64(r2)
 201aea8:	e0bff017 	ldw	r2,-64(fp)
 201aeac:	1880051e 	bne	r3,r2,201aec4 <altera_avalon_jtag_uart_write+0x248>
 201aeb0:	e0bffc17 	ldw	r2,-16(fp)
 201aeb4:	10c00917 	ldw	r3,36(r2)
 201aeb8:	e0bffc17 	ldw	r2,-16(fp)
 201aebc:	10800117 	ldw	r2,4(r2)
 201aec0:	18bff736 	bltu	r3,r2,201aea0 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 201aec4:	e0bffc17 	ldw	r2,-16(fp)
 201aec8:	10800917 	ldw	r2,36(r2)
 201aecc:	1000051e 	bne	r2,zero,201aee4 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 201aed0:	e0bffe17 	ldw	r2,-8(fp)
 201aed4:	00bfb616 	blt	zero,r2,201adb0 <altera_avalon_jtag_uart_write+0x134>
 201aed8:	00000306 	br	201aee8 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 201aedc:	0001883a 	nop
 201aee0:	00000106 	br	201aee8 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 201aee4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 201aee8:	e0bffc17 	ldw	r2,-16(fp)
 201aeec:	10800b17 	ldw	r2,44(r2)
 201aef0:	1009883a 	mov	r4,r2
 201aef4:	20181d40 	call	20181d4 <OSSemPost>

  if (ptr != start)
 201aef8:	e0fffd17 	ldw	r3,-12(fp)
 201aefc:	e0bff217 	ldw	r2,-56(fp)
 201af00:	18800426 	beq	r3,r2,201af14 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 201af04:	e0fffd17 	ldw	r3,-12(fp)
 201af08:	e0bff217 	ldw	r2,-56(fp)
 201af0c:	1885c83a 	sub	r2,r3,r2
 201af10:	00000606 	br	201af2c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 201af14:	e0bfff17 	ldw	r2,-4(fp)
 201af18:	1090000c 	andi	r2,r2,16384
 201af1c:	10000226 	beq	r2,zero,201af28 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 201af20:	00bffd44 	movi	r2,-11
 201af24:	00000106 	br	201af2c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 201af28:	00bffec4 	movi	r2,-5
}
 201af2c:	e037883a 	mov	sp,fp
 201af30:	dfc00117 	ldw	ra,4(sp)
 201af34:	df000017 	ldw	fp,0(sp)
 201af38:	dec00204 	addi	sp,sp,8
 201af3c:	f800283a 	ret

0201af40 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 201af40:	defffa04 	addi	sp,sp,-24
 201af44:	dfc00515 	stw	ra,20(sp)
 201af48:	df000415 	stw	fp,16(sp)
 201af4c:	df000404 	addi	fp,sp,16
 201af50:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 201af54:	0007883a 	mov	r3,zero
 201af58:	e0bfff17 	ldw	r2,-4(fp)
 201af5c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 201af60:	e0bfff17 	ldw	r2,-4(fp)
 201af64:	10800104 	addi	r2,r2,4
 201af68:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201af6c:	0005303a 	rdctl	r2,status
 201af70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201af74:	e0fffd17 	ldw	r3,-12(fp)
 201af78:	00bfff84 	movi	r2,-2
 201af7c:	1884703a 	and	r2,r3,r2
 201af80:	1001703a 	wrctl	status,r2
  
  return context;
 201af84:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 201af88:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 201af8c:	201ba4c0 	call	201ba4c <alt_tick>
 201af90:	e0bffc17 	ldw	r2,-16(fp)
 201af94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201af98:	e0bffe17 	ldw	r2,-8(fp)
 201af9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 201afa0:	0001883a 	nop
 201afa4:	e037883a 	mov	sp,fp
 201afa8:	dfc00117 	ldw	ra,4(sp)
 201afac:	df000017 	ldw	fp,0(sp)
 201afb0:	dec00204 	addi	sp,sp,8
 201afb4:	f800283a 	ret

0201afb8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 201afb8:	defff804 	addi	sp,sp,-32
 201afbc:	dfc00715 	stw	ra,28(sp)
 201afc0:	df000615 	stw	fp,24(sp)
 201afc4:	df000604 	addi	fp,sp,24
 201afc8:	e13ffc15 	stw	r4,-16(fp)
 201afcc:	e17ffd15 	stw	r5,-12(fp)
 201afd0:	e1bffe15 	stw	r6,-8(fp)
 201afd4:	e1ffff15 	stw	r7,-4(fp)
 201afd8:	e0bfff17 	ldw	r2,-4(fp)
 201afdc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 201afe0:	d0a74017 	ldw	r2,-25344(gp)
 201afe4:	1000021e 	bne	r2,zero,201aff0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 201afe8:	e0bffb17 	ldw	r2,-20(fp)
 201afec:	d0a74015 	stw	r2,-25344(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 201aff0:	e0bffc17 	ldw	r2,-16(fp)
 201aff4:	10800104 	addi	r2,r2,4
 201aff8:	00c001c4 	movi	r3,7
 201affc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 201b000:	d8000015 	stw	zero,0(sp)
 201b004:	e1fffc17 	ldw	r7,-16(fp)
 201b008:	018080b4 	movhi	r6,514
 201b00c:	31abd004 	addi	r6,r6,-20672
 201b010:	e17ffe17 	ldw	r5,-8(fp)
 201b014:	e13ffd17 	ldw	r4,-12(fp)
 201b018:	201b37c0 	call	201b37c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 201b01c:	0001883a 	nop
 201b020:	e037883a 	mov	sp,fp
 201b024:	dfc00117 	ldw	ra,4(sp)
 201b028:	df000017 	ldw	fp,0(sp)
 201b02c:	dec00204 	addi	sp,sp,8
 201b030:	f800283a 	ret

0201b034 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201b034:	defff504 	addi	sp,sp,-44
 201b038:	df000a15 	stw	fp,40(sp)
 201b03c:	df000a04 	addi	fp,sp,40
 201b040:	e13ffc15 	stw	r4,-16(fp)
 201b044:	e17ffd15 	stw	r5,-12(fp)
 201b048:	e1bffe15 	stw	r6,-8(fp)
 201b04c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201b050:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201b054:	d0a74017 	ldw	r2,-25344(gp)
  
  if (alt_ticks_per_second ())
 201b058:	10003c26 	beq	r2,zero,201b14c <alt_alarm_start+0x118>
  {
    if (alarm)
 201b05c:	e0bffc17 	ldw	r2,-16(fp)
 201b060:	10003826 	beq	r2,zero,201b144 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 201b064:	e0bffc17 	ldw	r2,-16(fp)
 201b068:	e0fffe17 	ldw	r3,-8(fp)
 201b06c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201b070:	e0bffc17 	ldw	r2,-16(fp)
 201b074:	e0ffff17 	ldw	r3,-4(fp)
 201b078:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b07c:	0005303a 	rdctl	r2,status
 201b080:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b084:	e0fff917 	ldw	r3,-28(fp)
 201b088:	00bfff84 	movi	r2,-2
 201b08c:	1884703a 	and	r2,r3,r2
 201b090:	1001703a 	wrctl	status,r2
  
  return context;
 201b094:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 201b098:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 201b09c:	d0a74117 	ldw	r2,-25340(gp)
      
      current_nticks = alt_nticks();
 201b0a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201b0a4:	e0fffd17 	ldw	r3,-12(fp)
 201b0a8:	e0bff617 	ldw	r2,-40(fp)
 201b0ac:	1885883a 	add	r2,r3,r2
 201b0b0:	10c00044 	addi	r3,r2,1
 201b0b4:	e0bffc17 	ldw	r2,-16(fp)
 201b0b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 201b0bc:	e0bffc17 	ldw	r2,-16(fp)
 201b0c0:	10c00217 	ldw	r3,8(r2)
 201b0c4:	e0bff617 	ldw	r2,-40(fp)
 201b0c8:	1880042e 	bgeu	r3,r2,201b0dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 201b0cc:	e0bffc17 	ldw	r2,-16(fp)
 201b0d0:	00c00044 	movi	r3,1
 201b0d4:	10c00405 	stb	r3,16(r2)
 201b0d8:	00000206 	br	201b0e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 201b0dc:	e0bffc17 	ldw	r2,-16(fp)
 201b0e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201b0e4:	e0bffc17 	ldw	r2,-16(fp)
 201b0e8:	d0e03204 	addi	r3,gp,-32568
 201b0ec:	e0fffa15 	stw	r3,-24(fp)
 201b0f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201b0f4:	e0bffb17 	ldw	r2,-20(fp)
 201b0f8:	e0fffa17 	ldw	r3,-24(fp)
 201b0fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201b100:	e0bffa17 	ldw	r2,-24(fp)
 201b104:	10c00017 	ldw	r3,0(r2)
 201b108:	e0bffb17 	ldw	r2,-20(fp)
 201b10c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201b110:	e0bffa17 	ldw	r2,-24(fp)
 201b114:	10800017 	ldw	r2,0(r2)
 201b118:	e0fffb17 	ldw	r3,-20(fp)
 201b11c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201b120:	e0bffa17 	ldw	r2,-24(fp)
 201b124:	e0fffb17 	ldw	r3,-20(fp)
 201b128:	10c00015 	stw	r3,0(r2)
 201b12c:	e0bff817 	ldw	r2,-32(fp)
 201b130:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b134:	e0bff717 	ldw	r2,-36(fp)
 201b138:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 201b13c:	0005883a 	mov	r2,zero
 201b140:	00000306 	br	201b150 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 201b144:	00bffa84 	movi	r2,-22
 201b148:	00000106 	br	201b150 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 201b14c:	00bfde84 	movi	r2,-134
  }
}
 201b150:	e037883a 	mov	sp,fp
 201b154:	df000017 	ldw	fp,0(sp)
 201b158:	dec00104 	addi	sp,sp,4
 201b15c:	f800283a 	ret

0201b160 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 201b160:	defffe04 	addi	sp,sp,-8
 201b164:	df000115 	stw	fp,4(sp)
 201b168:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201b16c:	e03fff15 	stw	zero,-4(fp)
 201b170:	00000506 	br	201b188 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 201b174:	e0bfff17 	ldw	r2,-4(fp)
 201b178:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201b17c:	e0bfff17 	ldw	r2,-4(fp)
 201b180:	10800804 	addi	r2,r2,32
 201b184:	e0bfff15 	stw	r2,-4(fp)
 201b188:	e0bfff17 	ldw	r2,-4(fp)
 201b18c:	10820030 	cmpltui	r2,r2,2048
 201b190:	103ff81e 	bne	r2,zero,201b174 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 201b194:	0001883a 	nop
 201b198:	e037883a 	mov	sp,fp
 201b19c:	df000017 	ldw	fp,0(sp)
 201b1a0:	dec00104 	addi	sp,sp,4
 201b1a4:	f800283a 	ret

0201b1a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201b1a8:	defffe04 	addi	sp,sp,-8
 201b1ac:	dfc00115 	stw	ra,4(sp)
 201b1b0:	df000015 	stw	fp,0(sp)
 201b1b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201b1b8:	d0a01017 	ldw	r2,-32704(gp)
 201b1bc:	10000326 	beq	r2,zero,201b1cc <alt_get_errno+0x24>
 201b1c0:	d0a01017 	ldw	r2,-32704(gp)
 201b1c4:	103ee83a 	callr	r2
 201b1c8:	00000106 	br	201b1d0 <alt_get_errno+0x28>
 201b1cc:	d0a72204 	addi	r2,gp,-25464
}
 201b1d0:	e037883a 	mov	sp,fp
 201b1d4:	dfc00117 	ldw	ra,4(sp)
 201b1d8:	df000017 	ldw	fp,0(sp)
 201b1dc:	dec00204 	addi	sp,sp,8
 201b1e0:	f800283a 	ret

0201b1e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201b1e4:	defffa04 	addi	sp,sp,-24
 201b1e8:	dfc00515 	stw	ra,20(sp)
 201b1ec:	df000415 	stw	fp,16(sp)
 201b1f0:	df000404 	addi	fp,sp,16
 201b1f4:	e13ffe15 	stw	r4,-8(fp)
 201b1f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201b1fc:	e0bffe17 	ldw	r2,-8(fp)
 201b200:	10000326 	beq	r2,zero,201b210 <alt_dev_llist_insert+0x2c>
 201b204:	e0bffe17 	ldw	r2,-8(fp)
 201b208:	10800217 	ldw	r2,8(r2)
 201b20c:	1000061e 	bne	r2,zero,201b228 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 201b210:	201b1a80 	call	201b1a8 <alt_get_errno>
 201b214:	1007883a 	mov	r3,r2
 201b218:	00800584 	movi	r2,22
 201b21c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 201b220:	00bffa84 	movi	r2,-22
 201b224:	00001306 	br	201b274 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201b228:	e0bffe17 	ldw	r2,-8(fp)
 201b22c:	e0ffff17 	ldw	r3,-4(fp)
 201b230:	e0fffc15 	stw	r3,-16(fp)
 201b234:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201b238:	e0bffd17 	ldw	r2,-12(fp)
 201b23c:	e0fffc17 	ldw	r3,-16(fp)
 201b240:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201b244:	e0bffc17 	ldw	r2,-16(fp)
 201b248:	10c00017 	ldw	r3,0(r2)
 201b24c:	e0bffd17 	ldw	r2,-12(fp)
 201b250:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201b254:	e0bffc17 	ldw	r2,-16(fp)
 201b258:	10800017 	ldw	r2,0(r2)
 201b25c:	e0fffd17 	ldw	r3,-12(fp)
 201b260:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201b264:	e0bffc17 	ldw	r2,-16(fp)
 201b268:	e0fffd17 	ldw	r3,-12(fp)
 201b26c:	10c00015 	stw	r3,0(r2)

  return 0;  
 201b270:	0005883a 	mov	r2,zero
}
 201b274:	e037883a 	mov	sp,fp
 201b278:	dfc00117 	ldw	ra,4(sp)
 201b27c:	df000017 	ldw	fp,0(sp)
 201b280:	dec00204 	addi	sp,sp,8
 201b284:	f800283a 	ret

0201b288 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 201b288:	defffd04 	addi	sp,sp,-12
 201b28c:	dfc00215 	stw	ra,8(sp)
 201b290:	df000115 	stw	fp,4(sp)
 201b294:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201b298:	008080b4 	movhi	r2,514
 201b29c:	10b1ed04 	addi	r2,r2,-14412
 201b2a0:	e0bfff15 	stw	r2,-4(fp)
 201b2a4:	00000606 	br	201b2c0 <_do_ctors+0x38>
        (*ctor) (); 
 201b2a8:	e0bfff17 	ldw	r2,-4(fp)
 201b2ac:	10800017 	ldw	r2,0(r2)
 201b2b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201b2b4:	e0bfff17 	ldw	r2,-4(fp)
 201b2b8:	10bfff04 	addi	r2,r2,-4
 201b2bc:	e0bfff15 	stw	r2,-4(fp)
 201b2c0:	e0ffff17 	ldw	r3,-4(fp)
 201b2c4:	008080b4 	movhi	r2,514
 201b2c8:	10b1ee04 	addi	r2,r2,-14408
 201b2cc:	18bff62e 	bgeu	r3,r2,201b2a8 <_do_ctors+0x20>
        (*ctor) (); 
}
 201b2d0:	0001883a 	nop
 201b2d4:	e037883a 	mov	sp,fp
 201b2d8:	dfc00117 	ldw	ra,4(sp)
 201b2dc:	df000017 	ldw	fp,0(sp)
 201b2e0:	dec00204 	addi	sp,sp,8
 201b2e4:	f800283a 	ret

0201b2e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201b2e8:	defffd04 	addi	sp,sp,-12
 201b2ec:	dfc00215 	stw	ra,8(sp)
 201b2f0:	df000115 	stw	fp,4(sp)
 201b2f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201b2f8:	008080b4 	movhi	r2,514
 201b2fc:	10b1ed04 	addi	r2,r2,-14412
 201b300:	e0bfff15 	stw	r2,-4(fp)
 201b304:	00000606 	br	201b320 <_do_dtors+0x38>
        (*dtor) (); 
 201b308:	e0bfff17 	ldw	r2,-4(fp)
 201b30c:	10800017 	ldw	r2,0(r2)
 201b310:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201b314:	e0bfff17 	ldw	r2,-4(fp)
 201b318:	10bfff04 	addi	r2,r2,-4
 201b31c:	e0bfff15 	stw	r2,-4(fp)
 201b320:	e0ffff17 	ldw	r3,-4(fp)
 201b324:	008080b4 	movhi	r2,514
 201b328:	10b1ee04 	addi	r2,r2,-14408
 201b32c:	18bff62e 	bgeu	r3,r2,201b308 <_do_dtors+0x20>
        (*dtor) (); 
}
 201b330:	0001883a 	nop
 201b334:	e037883a 	mov	sp,fp
 201b338:	dfc00117 	ldw	ra,4(sp)
 201b33c:	df000017 	ldw	fp,0(sp)
 201b340:	dec00204 	addi	sp,sp,8
 201b344:	f800283a 	ret

0201b348 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 201b348:	defffe04 	addi	sp,sp,-8
 201b34c:	dfc00115 	stw	ra,4(sp)
 201b350:	df000015 	stw	fp,0(sp)
 201b354:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 201b358:	01440004 	movi	r5,4096
 201b35c:	0009883a 	mov	r4,zero
 201b360:	201c1440 	call	201c144 <alt_icache_flush>
#endif
}
 201b364:	0001883a 	nop
 201b368:	e037883a 	mov	sp,fp
 201b36c:	dfc00117 	ldw	ra,4(sp)
 201b370:	df000017 	ldw	fp,0(sp)
 201b374:	dec00204 	addi	sp,sp,8
 201b378:	f800283a 	ret

0201b37c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201b37c:	defff904 	addi	sp,sp,-28
 201b380:	dfc00615 	stw	ra,24(sp)
 201b384:	df000515 	stw	fp,20(sp)
 201b388:	df000504 	addi	fp,sp,20
 201b38c:	e13ffc15 	stw	r4,-16(fp)
 201b390:	e17ffd15 	stw	r5,-12(fp)
 201b394:	e1bffe15 	stw	r6,-8(fp)
 201b398:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201b39c:	e0800217 	ldw	r2,8(fp)
 201b3a0:	d8800015 	stw	r2,0(sp)
 201b3a4:	e1ffff17 	ldw	r7,-4(fp)
 201b3a8:	e1bffe17 	ldw	r6,-8(fp)
 201b3ac:	e17ffd17 	ldw	r5,-12(fp)
 201b3b0:	e13ffc17 	ldw	r4,-16(fp)
 201b3b4:	201b52c0 	call	201b52c <alt_iic_isr_register>
}  
 201b3b8:	e037883a 	mov	sp,fp
 201b3bc:	dfc00117 	ldw	ra,4(sp)
 201b3c0:	df000017 	ldw	fp,0(sp)
 201b3c4:	dec00204 	addi	sp,sp,8
 201b3c8:	f800283a 	ret

0201b3cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201b3cc:	defff904 	addi	sp,sp,-28
 201b3d0:	df000615 	stw	fp,24(sp)
 201b3d4:	df000604 	addi	fp,sp,24
 201b3d8:	e13ffe15 	stw	r4,-8(fp)
 201b3dc:	e17fff15 	stw	r5,-4(fp)
 201b3e0:	e0bfff17 	ldw	r2,-4(fp)
 201b3e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b3e8:	0005303a 	rdctl	r2,status
 201b3ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b3f0:	e0fffb17 	ldw	r3,-20(fp)
 201b3f4:	00bfff84 	movi	r2,-2
 201b3f8:	1884703a 	and	r2,r3,r2
 201b3fc:	1001703a 	wrctl	status,r2
  
  return context;
 201b400:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201b404:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201b408:	00c00044 	movi	r3,1
 201b40c:	e0bffa17 	ldw	r2,-24(fp)
 201b410:	1884983a 	sll	r2,r3,r2
 201b414:	1007883a 	mov	r3,r2
 201b418:	d0a73f17 	ldw	r2,-25348(gp)
 201b41c:	1884b03a 	or	r2,r3,r2
 201b420:	d0a73f15 	stw	r2,-25348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201b424:	d0a73f17 	ldw	r2,-25348(gp)
 201b428:	100170fa 	wrctl	ienable,r2
 201b42c:	e0bffc17 	ldw	r2,-16(fp)
 201b430:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b434:	e0bffd17 	ldw	r2,-12(fp)
 201b438:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201b43c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 201b440:	0001883a 	nop
}
 201b444:	e037883a 	mov	sp,fp
 201b448:	df000017 	ldw	fp,0(sp)
 201b44c:	dec00104 	addi	sp,sp,4
 201b450:	f800283a 	ret

0201b454 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 201b454:	defff904 	addi	sp,sp,-28
 201b458:	df000615 	stw	fp,24(sp)
 201b45c:	df000604 	addi	fp,sp,24
 201b460:	e13ffe15 	stw	r4,-8(fp)
 201b464:	e17fff15 	stw	r5,-4(fp)
 201b468:	e0bfff17 	ldw	r2,-4(fp)
 201b46c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b470:	0005303a 	rdctl	r2,status
 201b474:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b478:	e0fffb17 	ldw	r3,-20(fp)
 201b47c:	00bfff84 	movi	r2,-2
 201b480:	1884703a 	and	r2,r3,r2
 201b484:	1001703a 	wrctl	status,r2
  
  return context;
 201b488:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201b48c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201b490:	00c00044 	movi	r3,1
 201b494:	e0bffa17 	ldw	r2,-24(fp)
 201b498:	1884983a 	sll	r2,r3,r2
 201b49c:	0084303a 	nor	r2,zero,r2
 201b4a0:	1007883a 	mov	r3,r2
 201b4a4:	d0a73f17 	ldw	r2,-25348(gp)
 201b4a8:	1884703a 	and	r2,r3,r2
 201b4ac:	d0a73f15 	stw	r2,-25348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201b4b0:	d0a73f17 	ldw	r2,-25348(gp)
 201b4b4:	100170fa 	wrctl	ienable,r2
 201b4b8:	e0bffc17 	ldw	r2,-16(fp)
 201b4bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b4c0:	e0bffd17 	ldw	r2,-12(fp)
 201b4c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201b4c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 201b4cc:	0001883a 	nop
}
 201b4d0:	e037883a 	mov	sp,fp
 201b4d4:	df000017 	ldw	fp,0(sp)
 201b4d8:	dec00104 	addi	sp,sp,4
 201b4dc:	f800283a 	ret

0201b4e0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 201b4e0:	defffc04 	addi	sp,sp,-16
 201b4e4:	df000315 	stw	fp,12(sp)
 201b4e8:	df000304 	addi	fp,sp,12
 201b4ec:	e13ffe15 	stw	r4,-8(fp)
 201b4f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 201b4f4:	000530fa 	rdctl	r2,ienable
 201b4f8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201b4fc:	00c00044 	movi	r3,1
 201b500:	e0bfff17 	ldw	r2,-4(fp)
 201b504:	1884983a 	sll	r2,r3,r2
 201b508:	1007883a 	mov	r3,r2
 201b50c:	e0bffd17 	ldw	r2,-12(fp)
 201b510:	1884703a 	and	r2,r3,r2
 201b514:	1004c03a 	cmpne	r2,r2,zero
 201b518:	10803fcc 	andi	r2,r2,255
}
 201b51c:	e037883a 	mov	sp,fp
 201b520:	df000017 	ldw	fp,0(sp)
 201b524:	dec00104 	addi	sp,sp,4
 201b528:	f800283a 	ret

0201b52c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201b52c:	defff504 	addi	sp,sp,-44
 201b530:	dfc00a15 	stw	ra,40(sp)
 201b534:	df000915 	stw	fp,36(sp)
 201b538:	df000904 	addi	fp,sp,36
 201b53c:	e13ffc15 	stw	r4,-16(fp)
 201b540:	e17ffd15 	stw	r5,-12(fp)
 201b544:	e1bffe15 	stw	r6,-8(fp)
 201b548:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 201b54c:	00bffa84 	movi	r2,-22
 201b550:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 201b554:	e0bffd17 	ldw	r2,-12(fp)
 201b558:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201b55c:	e0bff817 	ldw	r2,-32(fp)
 201b560:	10800808 	cmpgei	r2,r2,32
 201b564:	1000271e 	bne	r2,zero,201b604 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b568:	0005303a 	rdctl	r2,status
 201b56c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b570:	e0fffb17 	ldw	r3,-20(fp)
 201b574:	00bfff84 	movi	r2,-2
 201b578:	1884703a 	and	r2,r3,r2
 201b57c:	1001703a 	wrctl	status,r2
  
  return context;
 201b580:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 201b584:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 201b588:	008080b4 	movhi	r2,514
 201b58c:	109dba04 	addi	r2,r2,30440
 201b590:	e0fff817 	ldw	r3,-32(fp)
 201b594:	180690fa 	slli	r3,r3,3
 201b598:	10c5883a 	add	r2,r2,r3
 201b59c:	e0fffe17 	ldw	r3,-8(fp)
 201b5a0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 201b5a4:	008080b4 	movhi	r2,514
 201b5a8:	109dba04 	addi	r2,r2,30440
 201b5ac:	e0fff817 	ldw	r3,-32(fp)
 201b5b0:	180690fa 	slli	r3,r3,3
 201b5b4:	10c5883a 	add	r2,r2,r3
 201b5b8:	10800104 	addi	r2,r2,4
 201b5bc:	e0ffff17 	ldw	r3,-4(fp)
 201b5c0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 201b5c4:	e0bffe17 	ldw	r2,-8(fp)
 201b5c8:	10000526 	beq	r2,zero,201b5e0 <alt_iic_isr_register+0xb4>
 201b5cc:	e0bff817 	ldw	r2,-32(fp)
 201b5d0:	100b883a 	mov	r5,r2
 201b5d4:	e13ffc17 	ldw	r4,-16(fp)
 201b5d8:	201b3cc0 	call	201b3cc <alt_ic_irq_enable>
 201b5dc:	00000406 	br	201b5f0 <alt_iic_isr_register+0xc4>
 201b5e0:	e0bff817 	ldw	r2,-32(fp)
 201b5e4:	100b883a 	mov	r5,r2
 201b5e8:	e13ffc17 	ldw	r4,-16(fp)
 201b5ec:	201b4540 	call	201b454 <alt_ic_irq_disable>
 201b5f0:	e0bff715 	stw	r2,-36(fp)
 201b5f4:	e0bffa17 	ldw	r2,-24(fp)
 201b5f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b5fc:	e0bff917 	ldw	r2,-28(fp)
 201b600:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 201b604:	e0bff717 	ldw	r2,-36(fp)
}
 201b608:	e037883a 	mov	sp,fp
 201b60c:	dfc00117 	ldw	ra,4(sp)
 201b610:	df000017 	ldw	fp,0(sp)
 201b614:	dec00204 	addi	sp,sp,8
 201b618:	f800283a 	ret

0201b61c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201b61c:	defff904 	addi	sp,sp,-28
 201b620:	dfc00615 	stw	ra,24(sp)
 201b624:	df000515 	stw	fp,20(sp)
 201b628:	df000504 	addi	fp,sp,20
 201b62c:	e13ffc15 	stw	r4,-16(fp)
 201b630:	e17ffd15 	stw	r5,-12(fp)
 201b634:	e1bffe15 	stw	r6,-8(fp)
 201b638:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 201b63c:	e1bfff17 	ldw	r6,-4(fp)
 201b640:	e17ffe17 	ldw	r5,-8(fp)
 201b644:	e13ffd17 	ldw	r4,-12(fp)
 201b648:	201b85c0 	call	201b85c <open>
 201b64c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 201b650:	e0bffb17 	ldw	r2,-20(fp)
 201b654:	10001c16 	blt	r2,zero,201b6c8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 201b658:	008080b4 	movhi	r2,514
 201b65c:	10b56804 	addi	r2,r2,-10848
 201b660:	e0fffb17 	ldw	r3,-20(fp)
 201b664:	18c00324 	muli	r3,r3,12
 201b668:	10c5883a 	add	r2,r2,r3
 201b66c:	10c00017 	ldw	r3,0(r2)
 201b670:	e0bffc17 	ldw	r2,-16(fp)
 201b674:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 201b678:	008080b4 	movhi	r2,514
 201b67c:	10b56804 	addi	r2,r2,-10848
 201b680:	e0fffb17 	ldw	r3,-20(fp)
 201b684:	18c00324 	muli	r3,r3,12
 201b688:	10c5883a 	add	r2,r2,r3
 201b68c:	10800104 	addi	r2,r2,4
 201b690:	10c00017 	ldw	r3,0(r2)
 201b694:	e0bffc17 	ldw	r2,-16(fp)
 201b698:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201b69c:	008080b4 	movhi	r2,514
 201b6a0:	10b56804 	addi	r2,r2,-10848
 201b6a4:	e0fffb17 	ldw	r3,-20(fp)
 201b6a8:	18c00324 	muli	r3,r3,12
 201b6ac:	10c5883a 	add	r2,r2,r3
 201b6b0:	10800204 	addi	r2,r2,8
 201b6b4:	10c00017 	ldw	r3,0(r2)
 201b6b8:	e0bffc17 	ldw	r2,-16(fp)
 201b6bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201b6c0:	e13ffb17 	ldw	r4,-20(fp)
 201b6c4:	20119640 	call	2011964 <alt_release_fd>
  }
} 
 201b6c8:	0001883a 	nop
 201b6cc:	e037883a 	mov	sp,fp
 201b6d0:	dfc00117 	ldw	ra,4(sp)
 201b6d4:	df000017 	ldw	fp,0(sp)
 201b6d8:	dec00204 	addi	sp,sp,8
 201b6dc:	f800283a 	ret

0201b6e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 201b6e0:	defffb04 	addi	sp,sp,-20
 201b6e4:	dfc00415 	stw	ra,16(sp)
 201b6e8:	df000315 	stw	fp,12(sp)
 201b6ec:	df000304 	addi	fp,sp,12
 201b6f0:	e13ffd15 	stw	r4,-12(fp)
 201b6f4:	e17ffe15 	stw	r5,-8(fp)
 201b6f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201b6fc:	01c07fc4 	movi	r7,511
 201b700:	01800044 	movi	r6,1
 201b704:	e17ffd17 	ldw	r5,-12(fp)
 201b708:	010080b4 	movhi	r4,514
 201b70c:	21356b04 	addi	r4,r4,-10836
 201b710:	201b61c0 	call	201b61c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201b714:	01c07fc4 	movi	r7,511
 201b718:	000d883a 	mov	r6,zero
 201b71c:	e17ffe17 	ldw	r5,-8(fp)
 201b720:	010080b4 	movhi	r4,514
 201b724:	21356804 	addi	r4,r4,-10848
 201b728:	201b61c0 	call	201b61c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201b72c:	01c07fc4 	movi	r7,511
 201b730:	01800044 	movi	r6,1
 201b734:	e17fff17 	ldw	r5,-4(fp)
 201b738:	010080b4 	movhi	r4,514
 201b73c:	21356e04 	addi	r4,r4,-10824
 201b740:	201b61c0 	call	201b61c <alt_open_fd>
}  
 201b744:	0001883a 	nop
 201b748:	e037883a 	mov	sp,fp
 201b74c:	dfc00117 	ldw	ra,4(sp)
 201b750:	df000017 	ldw	fp,0(sp)
 201b754:	dec00204 	addi	sp,sp,8
 201b758:	f800283a 	ret

0201b75c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201b75c:	defffe04 	addi	sp,sp,-8
 201b760:	dfc00115 	stw	ra,4(sp)
 201b764:	df000015 	stw	fp,0(sp)
 201b768:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201b76c:	d0a01017 	ldw	r2,-32704(gp)
 201b770:	10000326 	beq	r2,zero,201b780 <alt_get_errno+0x24>
 201b774:	d0a01017 	ldw	r2,-32704(gp)
 201b778:	103ee83a 	callr	r2
 201b77c:	00000106 	br	201b784 <alt_get_errno+0x28>
 201b780:	d0a72204 	addi	r2,gp,-25464
}
 201b784:	e037883a 	mov	sp,fp
 201b788:	dfc00117 	ldw	ra,4(sp)
 201b78c:	df000017 	ldw	fp,0(sp)
 201b790:	dec00204 	addi	sp,sp,8
 201b794:	f800283a 	ret

0201b798 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201b798:	defffd04 	addi	sp,sp,-12
 201b79c:	df000215 	stw	fp,8(sp)
 201b7a0:	df000204 	addi	fp,sp,8
 201b7a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201b7a8:	e0bfff17 	ldw	r2,-4(fp)
 201b7ac:	10800217 	ldw	r2,8(r2)
 201b7b0:	10d00034 	orhi	r3,r2,16384
 201b7b4:	e0bfff17 	ldw	r2,-4(fp)
 201b7b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201b7bc:	e03ffe15 	stw	zero,-8(fp)
 201b7c0:	00001d06 	br	201b838 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201b7c4:	008080b4 	movhi	r2,514
 201b7c8:	10b56804 	addi	r2,r2,-10848
 201b7cc:	e0fffe17 	ldw	r3,-8(fp)
 201b7d0:	18c00324 	muli	r3,r3,12
 201b7d4:	10c5883a 	add	r2,r2,r3
 201b7d8:	10c00017 	ldw	r3,0(r2)
 201b7dc:	e0bfff17 	ldw	r2,-4(fp)
 201b7e0:	10800017 	ldw	r2,0(r2)
 201b7e4:	1880111e 	bne	r3,r2,201b82c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201b7e8:	008080b4 	movhi	r2,514
 201b7ec:	10b56804 	addi	r2,r2,-10848
 201b7f0:	e0fffe17 	ldw	r3,-8(fp)
 201b7f4:	18c00324 	muli	r3,r3,12
 201b7f8:	10c5883a 	add	r2,r2,r3
 201b7fc:	10800204 	addi	r2,r2,8
 201b800:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201b804:	1000090e 	bge	r2,zero,201b82c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201b808:	e0bffe17 	ldw	r2,-8(fp)
 201b80c:	10c00324 	muli	r3,r2,12
 201b810:	008080b4 	movhi	r2,514
 201b814:	10b56804 	addi	r2,r2,-10848
 201b818:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201b81c:	e0bfff17 	ldw	r2,-4(fp)
 201b820:	18800226 	beq	r3,r2,201b82c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201b824:	00bffcc4 	movi	r2,-13
 201b828:	00000806 	br	201b84c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201b82c:	e0bffe17 	ldw	r2,-8(fp)
 201b830:	10800044 	addi	r2,r2,1
 201b834:	e0bffe15 	stw	r2,-8(fp)
 201b838:	d0a00f17 	ldw	r2,-32708(gp)
 201b83c:	1007883a 	mov	r3,r2
 201b840:	e0bffe17 	ldw	r2,-8(fp)
 201b844:	18bfdf2e 	bgeu	r3,r2,201b7c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201b848:	0005883a 	mov	r2,zero
}
 201b84c:	e037883a 	mov	sp,fp
 201b850:	df000017 	ldw	fp,0(sp)
 201b854:	dec00104 	addi	sp,sp,4
 201b858:	f800283a 	ret

0201b85c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201b85c:	defff604 	addi	sp,sp,-40
 201b860:	dfc00915 	stw	ra,36(sp)
 201b864:	df000815 	stw	fp,32(sp)
 201b868:	df000804 	addi	fp,sp,32
 201b86c:	e13ffd15 	stw	r4,-12(fp)
 201b870:	e17ffe15 	stw	r5,-8(fp)
 201b874:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201b878:	00bfffc4 	movi	r2,-1
 201b87c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 201b880:	00bffb44 	movi	r2,-19
 201b884:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201b888:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201b88c:	d1600d04 	addi	r5,gp,-32716
 201b890:	e13ffd17 	ldw	r4,-12(fp)
 201b894:	201bed00 	call	201bed0 <alt_find_dev>
 201b898:	e0bff815 	stw	r2,-32(fp)
 201b89c:	e0bff817 	ldw	r2,-32(fp)
 201b8a0:	1000051e 	bne	r2,zero,201b8b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201b8a4:	e13ffd17 	ldw	r4,-12(fp)
 201b8a8:	201bf600 	call	201bf60 <alt_find_file>
 201b8ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 201b8b0:	00800044 	movi	r2,1
 201b8b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201b8b8:	e0bff817 	ldw	r2,-32(fp)
 201b8bc:	10002926 	beq	r2,zero,201b964 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201b8c0:	e13ff817 	ldw	r4,-32(fp)
 201b8c4:	201c0680 	call	201c068 <alt_get_fd>
 201b8c8:	e0bff915 	stw	r2,-28(fp)
 201b8cc:	e0bff917 	ldw	r2,-28(fp)
 201b8d0:	1000030e 	bge	r2,zero,201b8e0 <open+0x84>
    {
      status = index;
 201b8d4:	e0bff917 	ldw	r2,-28(fp)
 201b8d8:	e0bffa15 	stw	r2,-24(fp)
 201b8dc:	00002306 	br	201b96c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 201b8e0:	e0bff917 	ldw	r2,-28(fp)
 201b8e4:	10c00324 	muli	r3,r2,12
 201b8e8:	008080b4 	movhi	r2,514
 201b8ec:	10b56804 	addi	r2,r2,-10848
 201b8f0:	1885883a 	add	r2,r3,r2
 201b8f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201b8f8:	e0fffe17 	ldw	r3,-8(fp)
 201b8fc:	00900034 	movhi	r2,16384
 201b900:	10bfffc4 	addi	r2,r2,-1
 201b904:	1886703a 	and	r3,r3,r2
 201b908:	e0bffc17 	ldw	r2,-16(fp)
 201b90c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201b910:	e0bffb17 	ldw	r2,-20(fp)
 201b914:	1000051e 	bne	r2,zero,201b92c <open+0xd0>
 201b918:	e13ffc17 	ldw	r4,-16(fp)
 201b91c:	201b7980 	call	201b798 <alt_file_locked>
 201b920:	e0bffa15 	stw	r2,-24(fp)
 201b924:	e0bffa17 	ldw	r2,-24(fp)
 201b928:	10001016 	blt	r2,zero,201b96c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201b92c:	e0bff817 	ldw	r2,-32(fp)
 201b930:	10800317 	ldw	r2,12(r2)
 201b934:	10000826 	beq	r2,zero,201b958 <open+0xfc>
 201b938:	e0bff817 	ldw	r2,-32(fp)
 201b93c:	10800317 	ldw	r2,12(r2)
 201b940:	e1ffff17 	ldw	r7,-4(fp)
 201b944:	e1bffe17 	ldw	r6,-8(fp)
 201b948:	e17ffd17 	ldw	r5,-12(fp)
 201b94c:	e13ffc17 	ldw	r4,-16(fp)
 201b950:	103ee83a 	callr	r2
 201b954:	00000106 	br	201b95c <open+0x100>
 201b958:	0005883a 	mov	r2,zero
 201b95c:	e0bffa15 	stw	r2,-24(fp)
 201b960:	00000206 	br	201b96c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201b964:	00bffb44 	movi	r2,-19
 201b968:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201b96c:	e0bffa17 	ldw	r2,-24(fp)
 201b970:	1000090e 	bge	r2,zero,201b998 <open+0x13c>
  {
    alt_release_fd (index);  
 201b974:	e13ff917 	ldw	r4,-28(fp)
 201b978:	20119640 	call	2011964 <alt_release_fd>
    ALT_ERRNO = -status;
 201b97c:	201b75c0 	call	201b75c <alt_get_errno>
 201b980:	1007883a 	mov	r3,r2
 201b984:	e0bffa17 	ldw	r2,-24(fp)
 201b988:	0085c83a 	sub	r2,zero,r2
 201b98c:	18800015 	stw	r2,0(r3)
    return -1;
 201b990:	00bfffc4 	movi	r2,-1
 201b994:	00000106 	br	201b99c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 201b998:	e0bff917 	ldw	r2,-28(fp)
}
 201b99c:	e037883a 	mov	sp,fp
 201b9a0:	dfc00117 	ldw	ra,4(sp)
 201b9a4:	df000017 	ldw	fp,0(sp)
 201b9a8:	dec00204 	addi	sp,sp,8
 201b9ac:	f800283a 	ret

0201b9b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 201b9b0:	defffa04 	addi	sp,sp,-24
 201b9b4:	df000515 	stw	fp,20(sp)
 201b9b8:	df000504 	addi	fp,sp,20
 201b9bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b9c0:	0005303a 	rdctl	r2,status
 201b9c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b9c8:	e0fffc17 	ldw	r3,-16(fp)
 201b9cc:	00bfff84 	movi	r2,-2
 201b9d0:	1884703a 	and	r2,r3,r2
 201b9d4:	1001703a 	wrctl	status,r2
  
  return context;
 201b9d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 201b9dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 201b9e0:	e0bfff17 	ldw	r2,-4(fp)
 201b9e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 201b9e8:	e0bffd17 	ldw	r2,-12(fp)
 201b9ec:	10800017 	ldw	r2,0(r2)
 201b9f0:	e0fffd17 	ldw	r3,-12(fp)
 201b9f4:	18c00117 	ldw	r3,4(r3)
 201b9f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 201b9fc:	e0bffd17 	ldw	r2,-12(fp)
 201ba00:	10800117 	ldw	r2,4(r2)
 201ba04:	e0fffd17 	ldw	r3,-12(fp)
 201ba08:	18c00017 	ldw	r3,0(r3)
 201ba0c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201ba10:	e0bffd17 	ldw	r2,-12(fp)
 201ba14:	e0fffd17 	ldw	r3,-12(fp)
 201ba18:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 201ba1c:	e0bffd17 	ldw	r2,-12(fp)
 201ba20:	e0fffd17 	ldw	r3,-12(fp)
 201ba24:	10c00015 	stw	r3,0(r2)
 201ba28:	e0bffb17 	ldw	r2,-20(fp)
 201ba2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ba30:	e0bffe17 	ldw	r2,-8(fp)
 201ba34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201ba38:	0001883a 	nop
 201ba3c:	e037883a 	mov	sp,fp
 201ba40:	df000017 	ldw	fp,0(sp)
 201ba44:	dec00104 	addi	sp,sp,4
 201ba48:	f800283a 	ret

0201ba4c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201ba4c:	defffb04 	addi	sp,sp,-20
 201ba50:	dfc00415 	stw	ra,16(sp)
 201ba54:	df000315 	stw	fp,12(sp)
 201ba58:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201ba5c:	d0a03217 	ldw	r2,-32568(gp)
 201ba60:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201ba64:	d0a74117 	ldw	r2,-25340(gp)
 201ba68:	10800044 	addi	r2,r2,1
 201ba6c:	d0a74115 	stw	r2,-25340(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201ba70:	00002e06 	br	201bb2c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 201ba74:	e0bffd17 	ldw	r2,-12(fp)
 201ba78:	10800017 	ldw	r2,0(r2)
 201ba7c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 201ba80:	e0bffd17 	ldw	r2,-12(fp)
 201ba84:	10800403 	ldbu	r2,16(r2)
 201ba88:	10803fcc 	andi	r2,r2,255
 201ba8c:	10000426 	beq	r2,zero,201baa0 <alt_tick+0x54>
 201ba90:	d0a74117 	ldw	r2,-25340(gp)
 201ba94:	1000021e 	bne	r2,zero,201baa0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 201ba98:	e0bffd17 	ldw	r2,-12(fp)
 201ba9c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 201baa0:	e0bffd17 	ldw	r2,-12(fp)
 201baa4:	10800217 	ldw	r2,8(r2)
 201baa8:	d0e74117 	ldw	r3,-25340(gp)
 201baac:	18801d36 	bltu	r3,r2,201bb24 <alt_tick+0xd8>
 201bab0:	e0bffd17 	ldw	r2,-12(fp)
 201bab4:	10800403 	ldbu	r2,16(r2)
 201bab8:	10803fcc 	andi	r2,r2,255
 201babc:	1000191e 	bne	r2,zero,201bb24 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 201bac0:	e0bffd17 	ldw	r2,-12(fp)
 201bac4:	10800317 	ldw	r2,12(r2)
 201bac8:	e0fffd17 	ldw	r3,-12(fp)
 201bacc:	18c00517 	ldw	r3,20(r3)
 201bad0:	1809883a 	mov	r4,r3
 201bad4:	103ee83a 	callr	r2
 201bad8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 201badc:	e0bfff17 	ldw	r2,-4(fp)
 201bae0:	1000031e 	bne	r2,zero,201baf0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 201bae4:	e13ffd17 	ldw	r4,-12(fp)
 201bae8:	201b9b00 	call	201b9b0 <alt_alarm_stop>
 201baec:	00000d06 	br	201bb24 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 201baf0:	e0bffd17 	ldw	r2,-12(fp)
 201baf4:	10c00217 	ldw	r3,8(r2)
 201baf8:	e0bfff17 	ldw	r2,-4(fp)
 201bafc:	1887883a 	add	r3,r3,r2
 201bb00:	e0bffd17 	ldw	r2,-12(fp)
 201bb04:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 201bb08:	e0bffd17 	ldw	r2,-12(fp)
 201bb0c:	10c00217 	ldw	r3,8(r2)
 201bb10:	d0a74117 	ldw	r2,-25340(gp)
 201bb14:	1880032e 	bgeu	r3,r2,201bb24 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 201bb18:	e0bffd17 	ldw	r2,-12(fp)
 201bb1c:	00c00044 	movi	r3,1
 201bb20:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 201bb24:	e0bffe17 	ldw	r2,-8(fp)
 201bb28:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201bb2c:	e0fffd17 	ldw	r3,-12(fp)
 201bb30:	d0a03204 	addi	r2,gp,-32568
 201bb34:	18bfcf1e 	bne	r3,r2,201ba74 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 201bb38:	2012b500 	call	2012b50 <OSTimeTick>
}
 201bb3c:	0001883a 	nop
 201bb40:	e037883a 	mov	sp,fp
 201bb44:	dfc00117 	ldw	ra,4(sp)
 201bb48:	df000017 	ldw	fp,0(sp)
 201bb4c:	dec00204 	addi	sp,sp,8
 201bb50:	f800283a 	ret

0201bb54 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 201bb54:	deffff04 	addi	sp,sp,-4
 201bb58:	df000015 	stw	fp,0(sp)
 201bb5c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201bb60:	000170fa 	wrctl	ienable,zero
}
 201bb64:	0001883a 	nop
 201bb68:	e037883a 	mov	sp,fp
 201bb6c:	df000017 	ldw	fp,0(sp)
 201bb70:	dec00104 	addi	sp,sp,4
 201bb74:	f800283a 	ret

0201bb78 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 201bb78:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 201bb7c:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 201bb80:	d1273a17 	ldw	r4,-25368(gp)

      stw ra,  0(sp)
 201bb84:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 201bb88:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 201bb8c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 201bb90:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 201bb94:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 201bb98:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 201bb9c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 201bba0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 201bba4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 201bba8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 201bbac:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 201bbb0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201bbb4:	201bdec0 	call	201bdec <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 201bbb8:	d1273517 	ldw	r4,-25388(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 201bbbc:	d1672d07 	ldb	r5,-25420(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 201bbc0:	d1273a15 	stw	r4,-25368(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 201bbc4:	d1672d45 	stb	r5,-25419(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 201bbc8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 201bbcc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 201bbd0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 201bbd4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 201bbd8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 201bbdc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 201bbe0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 201bbe4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 201bbe8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 201bbec:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 201bbf0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 201bbf4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 201bbf8:	d0e00515 	stw	r3,-32748(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 201bbfc:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 201bc00:	f800283a 	ret

0201bc04 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 201bc04:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 201bc08:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 201bc0c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 201bc10:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201bc14:	201bdec0 	call	201bdec <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 201bc18:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 201bc1c:	d4a72b45 	stb	r18,-25427(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 201bc20:	003fe506 	br	201bbb8 <OSCtxSw+0x40>

0201bc24 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 201bc24:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 201bc28:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 201bc2c:	10800054 	ori	r2,r2,1
      wrctl status, r2
 201bc30:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 201bc34:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 201bc38:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 201bc3c:	dec00204 	addi	sp,sp,8

      callr r2
 201bc40:	103ee83a 	callr	r2

      nop
 201bc44:	0001883a 	nop

0201bc48 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 201bc48:	defff704 	addi	sp,sp,-36
 201bc4c:	dfc00815 	stw	ra,32(sp)
 201bc50:	df000715 	stw	fp,28(sp)
 201bc54:	df000704 	addi	fp,sp,28
 201bc58:	e13ffc15 	stw	r4,-16(fp)
 201bc5c:	e17ffd15 	stw	r5,-12(fp)
 201bc60:	e1bffe15 	stw	r6,-8(fp)
 201bc64:	3805883a 	mov	r2,r7
 201bc68:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 201bc6c:	e0fffe17 	ldw	r3,-8(fp)
 201bc70:	00bfff04 	movi	r2,-4
 201bc74:	1884703a 	and	r2,r3,r2
 201bc78:	10bef704 	addi	r2,r2,-1060
 201bc7c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 201bc80:	01810904 	movi	r6,1060
 201bc84:	000b883a 	mov	r5,zero
 201bc88:	e13ff917 	ldw	r4,-28(fp)
 201bc8c:	200b9440 	call	200b944 <memset>
 201bc90:	e0bff917 	ldw	r2,-28(fp)
 201bc94:	10c0bb04 	addi	r3,r2,748
 201bc98:	e0bff917 	ldw	r2,-28(fp)
 201bc9c:	10c00115 	stw	r3,4(r2)
 201bca0:	e0bff917 	ldw	r2,-28(fp)
 201bca4:	10c0d504 	addi	r3,r2,852
 201bca8:	e0bff917 	ldw	r2,-28(fp)
 201bcac:	10c00215 	stw	r3,8(r2)
 201bcb0:	e0bff917 	ldw	r2,-28(fp)
 201bcb4:	10c0ef04 	addi	r3,r2,956
 201bcb8:	e0bff917 	ldw	r2,-28(fp)
 201bcbc:	10c00315 	stw	r3,12(r2)
 201bcc0:	e0fff917 	ldw	r3,-28(fp)
 201bcc4:	008080b4 	movhi	r2,514
 201bcc8:	10b33404 	addi	r2,r2,-13104
 201bccc:	18800d15 	stw	r2,52(r3)
 201bcd0:	e0bff917 	ldw	r2,-28(fp)
 201bcd4:	00c00044 	movi	r3,1
 201bcd8:	10c02915 	stw	r3,164(r2)
 201bcdc:	10002a15 	stw	zero,168(r2)
 201bce0:	e0bff917 	ldw	r2,-28(fp)
 201bce4:	00ccc384 	movi	r3,13070
 201bce8:	10c02b0d 	sth	r3,172(r2)
 201bcec:	e0bff917 	ldw	r2,-28(fp)
 201bcf0:	00eaf344 	movi	r3,-21555
 201bcf4:	10c02b8d 	sth	r3,174(r2)
 201bcf8:	e0bff917 	ldw	r2,-28(fp)
 201bcfc:	00c48d04 	movi	r3,4660
 201bd00:	10c02c0d 	sth	r3,176(r2)
 201bd04:	e0bff917 	ldw	r2,-28(fp)
 201bd08:	00f99b44 	movi	r3,-6547
 201bd0c:	10c02c8d 	sth	r3,178(r2)
 201bd10:	e0bff917 	ldw	r2,-28(fp)
 201bd14:	00f7bb04 	movi	r3,-8468
 201bd18:	10c02d0d 	sth	r3,180(r2)
 201bd1c:	e0bff917 	ldw	r2,-28(fp)
 201bd20:	00c00144 	movi	r3,5
 201bd24:	10c02d8d 	sth	r3,182(r2)
 201bd28:	e0bff917 	ldw	r2,-28(fp)
 201bd2c:	00c002c4 	movi	r3,11
 201bd30:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 201bd34:	e0bff917 	ldw	r2,-28(fp)
 201bd38:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 201bd3c:	e0bffa17 	ldw	r2,-24(fp)
 201bd40:	10bff304 	addi	r2,r2,-52
 201bd44:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 201bd48:	e0bffb17 	ldw	r2,-20(fp)
 201bd4c:	10800c04 	addi	r2,r2,48
 201bd50:	e0fffc17 	ldw	r3,-16(fp)
 201bd54:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 201bd58:	e0bffb17 	ldw	r2,-20(fp)
 201bd5c:	10800b04 	addi	r2,r2,44
 201bd60:	e0fffd17 	ldw	r3,-12(fp)
 201bd64:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 201bd68:	e0bffb17 	ldw	r2,-20(fp)
 201bd6c:	10800a04 	addi	r2,r2,40
 201bd70:	e0fff917 	ldw	r3,-28(fp)
 201bd74:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 201bd78:	008080b4 	movhi	r2,514
 201bd7c:	10af0904 	addi	r2,r2,-17372
 201bd80:	10c00104 	addi	r3,r2,4
 201bd84:	e0bffb17 	ldw	r2,-20(fp)
 201bd88:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 201bd8c:	e0bffb17 	ldw	r2,-20(fp)
}
 201bd90:	e037883a 	mov	sp,fp
 201bd94:	dfc00117 	ldw	ra,4(sp)
 201bd98:	df000017 	ldw	fp,0(sp)
 201bd9c:	dec00204 	addi	sp,sp,8
 201bda0:	f800283a 	ret

0201bda4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 201bda4:	defffe04 	addi	sp,sp,-8
 201bda8:	df000115 	stw	fp,4(sp)
 201bdac:	df000104 	addi	fp,sp,4
 201bdb0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 201bdb4:	0001883a 	nop
 201bdb8:	e037883a 	mov	sp,fp
 201bdbc:	df000017 	ldw	fp,0(sp)
 201bdc0:	dec00104 	addi	sp,sp,4
 201bdc4:	f800283a 	ret

0201bdc8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 201bdc8:	defffe04 	addi	sp,sp,-8
 201bdcc:	df000115 	stw	fp,4(sp)
 201bdd0:	df000104 	addi	fp,sp,4
 201bdd4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 201bdd8:	0001883a 	nop
 201bddc:	e037883a 	mov	sp,fp
 201bde0:	df000017 	ldw	fp,0(sp)
 201bde4:	dec00104 	addi	sp,sp,4
 201bde8:	f800283a 	ret

0201bdec <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 201bdec:	deffff04 	addi	sp,sp,-4
 201bdf0:	df000015 	stw	fp,0(sp)
 201bdf4:	d839883a 	mov	fp,sp
}
 201bdf8:	0001883a 	nop
 201bdfc:	e037883a 	mov	sp,fp
 201be00:	df000017 	ldw	fp,0(sp)
 201be04:	dec00104 	addi	sp,sp,4
 201be08:	f800283a 	ret

0201be0c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 201be0c:	deffff04 	addi	sp,sp,-4
 201be10:	df000015 	stw	fp,0(sp)
 201be14:	d839883a 	mov	fp,sp
}
 201be18:	0001883a 	nop
 201be1c:	e037883a 	mov	sp,fp
 201be20:	df000017 	ldw	fp,0(sp)
 201be24:	dec00104 	addi	sp,sp,4
 201be28:	f800283a 	ret

0201be2c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 201be2c:	deffff04 	addi	sp,sp,-4
 201be30:	df000015 	stw	fp,0(sp)
 201be34:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 201be38:	0001883a 	nop
 201be3c:	e037883a 	mov	sp,fp
 201be40:	df000017 	ldw	fp,0(sp)
 201be44:	dec00104 	addi	sp,sp,4
 201be48:	f800283a 	ret

0201be4c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 201be4c:	deffff04 	addi	sp,sp,-4
 201be50:	df000015 	stw	fp,0(sp)
 201be54:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 201be58:	0001883a 	nop
 201be5c:	e037883a 	mov	sp,fp
 201be60:	df000017 	ldw	fp,0(sp)
 201be64:	dec00104 	addi	sp,sp,4
 201be68:	f800283a 	ret

0201be6c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 201be6c:	deffff04 	addi	sp,sp,-4
 201be70:	df000015 	stw	fp,0(sp)
 201be74:	d839883a 	mov	fp,sp
}
 201be78:	0001883a 	nop
 201be7c:	e037883a 	mov	sp,fp
 201be80:	df000017 	ldw	fp,0(sp)
 201be84:	dec00104 	addi	sp,sp,4
 201be88:	f800283a 	ret

0201be8c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 201be8c:	deffff04 	addi	sp,sp,-4
 201be90:	df000015 	stw	fp,0(sp)
 201be94:	d839883a 	mov	fp,sp
}
 201be98:	0001883a 	nop
 201be9c:	e037883a 	mov	sp,fp
 201bea0:	df000017 	ldw	fp,0(sp)
 201bea4:	dec00104 	addi	sp,sp,4
 201bea8:	f800283a 	ret

0201beac <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 201beac:	defffe04 	addi	sp,sp,-8
 201beb0:	df000115 	stw	fp,4(sp)
 201beb4:	df000104 	addi	fp,sp,4
 201beb8:	e13fff15 	stw	r4,-4(fp)
}
 201bebc:	0001883a 	nop
 201bec0:	e037883a 	mov	sp,fp
 201bec4:	df000017 	ldw	fp,0(sp)
 201bec8:	dec00104 	addi	sp,sp,4
 201becc:	f800283a 	ret

0201bed0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201bed0:	defffa04 	addi	sp,sp,-24
 201bed4:	dfc00515 	stw	ra,20(sp)
 201bed8:	df000415 	stw	fp,16(sp)
 201bedc:	df000404 	addi	fp,sp,16
 201bee0:	e13ffe15 	stw	r4,-8(fp)
 201bee4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201bee8:	e0bfff17 	ldw	r2,-4(fp)
 201beec:	10800017 	ldw	r2,0(r2)
 201bef0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 201bef4:	e13ffe17 	ldw	r4,-8(fp)
 201bef8:	200417c0 	call	200417c <strlen>
 201befc:	10800044 	addi	r2,r2,1
 201bf00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201bf04:	00000d06 	br	201bf3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201bf08:	e0bffc17 	ldw	r2,-16(fp)
 201bf0c:	10800217 	ldw	r2,8(r2)
 201bf10:	e0fffd17 	ldw	r3,-12(fp)
 201bf14:	180d883a 	mov	r6,r3
 201bf18:	e17ffe17 	ldw	r5,-8(fp)
 201bf1c:	1009883a 	mov	r4,r2
 201bf20:	201c2f40 	call	201c2f4 <memcmp>
 201bf24:	1000021e 	bne	r2,zero,201bf30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201bf28:	e0bffc17 	ldw	r2,-16(fp)
 201bf2c:	00000706 	br	201bf4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201bf30:	e0bffc17 	ldw	r2,-16(fp)
 201bf34:	10800017 	ldw	r2,0(r2)
 201bf38:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201bf3c:	e0fffc17 	ldw	r3,-16(fp)
 201bf40:	e0bfff17 	ldw	r2,-4(fp)
 201bf44:	18bff01e 	bne	r3,r2,201bf08 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201bf48:	0005883a 	mov	r2,zero
}
 201bf4c:	e037883a 	mov	sp,fp
 201bf50:	dfc00117 	ldw	ra,4(sp)
 201bf54:	df000017 	ldw	fp,0(sp)
 201bf58:	dec00204 	addi	sp,sp,8
 201bf5c:	f800283a 	ret

0201bf60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201bf60:	defffb04 	addi	sp,sp,-20
 201bf64:	dfc00415 	stw	ra,16(sp)
 201bf68:	df000315 	stw	fp,12(sp)
 201bf6c:	df000304 	addi	fp,sp,12
 201bf70:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201bf74:	d0a00b17 	ldw	r2,-32724(gp)
 201bf78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201bf7c:	00003106 	br	201c044 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 201bf80:	e0bffd17 	ldw	r2,-12(fp)
 201bf84:	10800217 	ldw	r2,8(r2)
 201bf88:	1009883a 	mov	r4,r2
 201bf8c:	200417c0 	call	200417c <strlen>
 201bf90:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 201bf94:	e0bffd17 	ldw	r2,-12(fp)
 201bf98:	10c00217 	ldw	r3,8(r2)
 201bf9c:	e0bffe17 	ldw	r2,-8(fp)
 201bfa0:	10bfffc4 	addi	r2,r2,-1
 201bfa4:	1885883a 	add	r2,r3,r2
 201bfa8:	10800003 	ldbu	r2,0(r2)
 201bfac:	10803fcc 	andi	r2,r2,255
 201bfb0:	1080201c 	xori	r2,r2,128
 201bfb4:	10bfe004 	addi	r2,r2,-128
 201bfb8:	10800bd8 	cmpnei	r2,r2,47
 201bfbc:	1000031e 	bne	r2,zero,201bfcc <alt_find_file+0x6c>
    {
      len -= 1;
 201bfc0:	e0bffe17 	ldw	r2,-8(fp)
 201bfc4:	10bfffc4 	addi	r2,r2,-1
 201bfc8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201bfcc:	e0bffe17 	ldw	r2,-8(fp)
 201bfd0:	e0ffff17 	ldw	r3,-4(fp)
 201bfd4:	1885883a 	add	r2,r3,r2
 201bfd8:	10800003 	ldbu	r2,0(r2)
 201bfdc:	10803fcc 	andi	r2,r2,255
 201bfe0:	1080201c 	xori	r2,r2,128
 201bfe4:	10bfe004 	addi	r2,r2,-128
 201bfe8:	10800be0 	cmpeqi	r2,r2,47
 201bfec:	1000081e 	bne	r2,zero,201c010 <alt_find_file+0xb0>
 201bff0:	e0bffe17 	ldw	r2,-8(fp)
 201bff4:	e0ffff17 	ldw	r3,-4(fp)
 201bff8:	1885883a 	add	r2,r3,r2
 201bffc:	10800003 	ldbu	r2,0(r2)
 201c000:	10803fcc 	andi	r2,r2,255
 201c004:	1080201c 	xori	r2,r2,128
 201c008:	10bfe004 	addi	r2,r2,-128
 201c00c:	10000a1e 	bne	r2,zero,201c038 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 201c010:	e0bffd17 	ldw	r2,-12(fp)
 201c014:	10800217 	ldw	r2,8(r2)
 201c018:	e0fffe17 	ldw	r3,-8(fp)
 201c01c:	180d883a 	mov	r6,r3
 201c020:	e17fff17 	ldw	r5,-4(fp)
 201c024:	1009883a 	mov	r4,r2
 201c028:	201c2f40 	call	201c2f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201c02c:	1000021e 	bne	r2,zero,201c038 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201c030:	e0bffd17 	ldw	r2,-12(fp)
 201c034:	00000706 	br	201c054 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 201c038:	e0bffd17 	ldw	r2,-12(fp)
 201c03c:	10800017 	ldw	r2,0(r2)
 201c040:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201c044:	e0fffd17 	ldw	r3,-12(fp)
 201c048:	d0a00b04 	addi	r2,gp,-32724
 201c04c:	18bfcc1e 	bne	r3,r2,201bf80 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 201c050:	0005883a 	mov	r2,zero
}
 201c054:	e037883a 	mov	sp,fp
 201c058:	dfc00117 	ldw	ra,4(sp)
 201c05c:	df000017 	ldw	fp,0(sp)
 201c060:	dec00204 	addi	sp,sp,8
 201c064:	f800283a 	ret

0201c068 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 201c068:	defff904 	addi	sp,sp,-28
 201c06c:	dfc00615 	stw	ra,24(sp)
 201c070:	df000515 	stw	fp,20(sp)
 201c074:	df000504 	addi	fp,sp,20
 201c078:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 201c07c:	00bffa04 	movi	r2,-24
 201c080:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 201c084:	d0a72317 	ldw	r2,-25460(gp)
 201c088:	e0bffd15 	stw	r2,-12(fp)
 201c08c:	e03ffe0d 	sth	zero,-8(fp)
 201c090:	e0bffe0b 	ldhu	r2,-8(fp)
 201c094:	e0fffe84 	addi	r3,fp,-6
 201c098:	180d883a 	mov	r6,r3
 201c09c:	100b883a 	mov	r5,r2
 201c0a0:	e13ffd17 	ldw	r4,-12(fp)
 201c0a4:	2017e5c0 	call	2017e5c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201c0a8:	e03ffb15 	stw	zero,-20(fp)
 201c0ac:	00001906 	br	201c114 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 201c0b0:	008080b4 	movhi	r2,514
 201c0b4:	10b56804 	addi	r2,r2,-10848
 201c0b8:	e0fffb17 	ldw	r3,-20(fp)
 201c0bc:	18c00324 	muli	r3,r3,12
 201c0c0:	10c5883a 	add	r2,r2,r3
 201c0c4:	10800017 	ldw	r2,0(r2)
 201c0c8:	10000f1e 	bne	r2,zero,201c108 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 201c0cc:	008080b4 	movhi	r2,514
 201c0d0:	10b56804 	addi	r2,r2,-10848
 201c0d4:	e0fffb17 	ldw	r3,-20(fp)
 201c0d8:	18c00324 	muli	r3,r3,12
 201c0dc:	10c5883a 	add	r2,r2,r3
 201c0e0:	e0ffff17 	ldw	r3,-4(fp)
 201c0e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 201c0e8:	d0e00f17 	ldw	r3,-32708(gp)
 201c0ec:	e0bffb17 	ldw	r2,-20(fp)
 201c0f0:	1880020e 	bge	r3,r2,201c0fc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 201c0f4:	e0bffb17 	ldw	r2,-20(fp)
 201c0f8:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 201c0fc:	e0bffb17 	ldw	r2,-20(fp)
 201c100:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 201c104:	00000606 	br	201c120 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201c108:	e0bffb17 	ldw	r2,-20(fp)
 201c10c:	10800044 	addi	r2,r2,1
 201c110:	e0bffb15 	stw	r2,-20(fp)
 201c114:	e0bffb17 	ldw	r2,-20(fp)
 201c118:	10800810 	cmplti	r2,r2,32
 201c11c:	103fe41e 	bne	r2,zero,201c0b0 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 201c120:	d0a72317 	ldw	r2,-25460(gp)
 201c124:	1009883a 	mov	r4,r2
 201c128:	20181d40 	call	20181d4 <OSSemPost>

  return rc;
 201c12c:	e0bffc17 	ldw	r2,-16(fp)
}
 201c130:	e037883a 	mov	sp,fp
 201c134:	dfc00117 	ldw	ra,4(sp)
 201c138:	df000017 	ldw	fp,0(sp)
 201c13c:	dec00204 	addi	sp,sp,8
 201c140:	f800283a 	ret

0201c144 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 201c144:	defffb04 	addi	sp,sp,-20
 201c148:	df000415 	stw	fp,16(sp)
 201c14c:	df000404 	addi	fp,sp,16
 201c150:	e13ffe15 	stw	r4,-8(fp)
 201c154:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 201c158:	e0bfff17 	ldw	r2,-4(fp)
 201c15c:	10840070 	cmpltui	r2,r2,4097
 201c160:	1000021e 	bne	r2,zero,201c16c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 201c164:	00840004 	movi	r2,4096
 201c168:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 201c16c:	e0fffe17 	ldw	r3,-8(fp)
 201c170:	e0bfff17 	ldw	r2,-4(fp)
 201c174:	1885883a 	add	r2,r3,r2
 201c178:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 201c17c:	e0bffe17 	ldw	r2,-8(fp)
 201c180:	e0bffc15 	stw	r2,-16(fp)
 201c184:	00000506 	br	201c19c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 201c188:	e0bffc17 	ldw	r2,-16(fp)
 201c18c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 201c190:	e0bffc17 	ldw	r2,-16(fp)
 201c194:	10800804 	addi	r2,r2,32
 201c198:	e0bffc15 	stw	r2,-16(fp)
 201c19c:	e0fffc17 	ldw	r3,-16(fp)
 201c1a0:	e0bffd17 	ldw	r2,-12(fp)
 201c1a4:	18bff836 	bltu	r3,r2,201c188 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 201c1a8:	e0bffe17 	ldw	r2,-8(fp)
 201c1ac:	108007cc 	andi	r2,r2,31
 201c1b0:	10000226 	beq	r2,zero,201c1bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 201c1b4:	e0bffc17 	ldw	r2,-16(fp)
 201c1b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 201c1bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 201c1c0:	0001883a 	nop
 201c1c4:	e037883a 	mov	sp,fp
 201c1c8:	df000017 	ldw	fp,0(sp)
 201c1cc:	dec00104 	addi	sp,sp,4
 201c1d0:	f800283a 	ret

0201c1d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 201c1d4:	defffe04 	addi	sp,sp,-8
 201c1d8:	df000115 	stw	fp,4(sp)
 201c1dc:	df000104 	addi	fp,sp,4
 201c1e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 201c1e4:	e0bfff17 	ldw	r2,-4(fp)
 201c1e8:	10bffe84 	addi	r2,r2,-6
 201c1ec:	10c00428 	cmpgeui	r3,r2,16
 201c1f0:	18001a1e 	bne	r3,zero,201c25c <alt_exception_cause_generated_bad_addr+0x88>
 201c1f4:	100690ba 	slli	r3,r2,2
 201c1f8:	008080b4 	movhi	r2,514
 201c1fc:	10b08304 	addi	r2,r2,-15860
 201c200:	1885883a 	add	r2,r3,r2
 201c204:	10800017 	ldw	r2,0(r2)
 201c208:	1000683a 	jmp	r2
 201c20c:	0201c24c 	andi	r8,zero,1801
 201c210:	0201c24c 	andi	r8,zero,1801
 201c214:	0201c25c 	xori	r8,zero,1801
 201c218:	0201c25c 	xori	r8,zero,1801
 201c21c:	0201c25c 	xori	r8,zero,1801
 201c220:	0201c24c 	andi	r8,zero,1801
 201c224:	0201c254 	movui	r8,1801
 201c228:	0201c25c 	xori	r8,zero,1801
 201c22c:	0201c24c 	andi	r8,zero,1801
 201c230:	0201c24c 	andi	r8,zero,1801
 201c234:	0201c25c 	xori	r8,zero,1801
 201c238:	0201c24c 	andi	r8,zero,1801
 201c23c:	0201c254 	movui	r8,1801
 201c240:	0201c25c 	xori	r8,zero,1801
 201c244:	0201c25c 	xori	r8,zero,1801
 201c248:	0201c24c 	andi	r8,zero,1801
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 201c24c:	00800044 	movi	r2,1
 201c250:	00000306 	br	201c260 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201c254:	0005883a 	mov	r2,zero
 201c258:	00000106 	br	201c260 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 201c25c:	0005883a 	mov	r2,zero
  }
}
 201c260:	e037883a 	mov	sp,fp
 201c264:	df000017 	ldw	fp,0(sp)
 201c268:	dec00104 	addi	sp,sp,4
 201c26c:	f800283a 	ret

0201c270 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 201c270:	defffd04 	addi	sp,sp,-12
 201c274:	dfc00215 	stw	ra,8(sp)
 201c278:	df000115 	stw	fp,4(sp)
 201c27c:	df000104 	addi	fp,sp,4
 201c280:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 201c284:	000f883a 	mov	r7,zero
 201c288:	000d883a 	mov	r6,zero
 201c28c:	e17fff17 	ldw	r5,-4(fp)
 201c290:	0009883a 	mov	r4,zero
 201c294:	201c4280 	call	201c428 <__register_exitproc>
}
 201c298:	e037883a 	mov	sp,fp
 201c29c:	dfc00117 	ldw	ra,4(sp)
 201c2a0:	df000017 	ldw	fp,0(sp)
 201c2a4:	dec00204 	addi	sp,sp,8
 201c2a8:	f800283a 	ret

0201c2ac <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 201c2ac:	defffd04 	addi	sp,sp,-12
 201c2b0:	dfc00215 	stw	ra,8(sp)
 201c2b4:	df000115 	stw	fp,4(sp)
 201c2b8:	df000104 	addi	fp,sp,4
 201c2bc:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 201c2c0:	000b883a 	mov	r5,zero
 201c2c4:	e13fff17 	ldw	r4,-4(fp)
 201c2c8:	201c5980 	call	201c598 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 201c2cc:	d0a00617 	ldw	r2,-32744(gp)
 201c2d0:	10800f17 	ldw	r2,60(r2)
 201c2d4:	10000526 	beq	r2,zero,201c2ec <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 201c2d8:	d0a00617 	ldw	r2,-32744(gp)
 201c2dc:	10800f17 	ldw	r2,60(r2)
 201c2e0:	d0e00617 	ldw	r3,-32744(gp)
 201c2e4:	1809883a 	mov	r4,r3
 201c2e8:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 201c2ec:	e13fff17 	ldw	r4,-4(fp)
 201c2f0:	201c7840 	call	201c784 <_exit>

0201c2f4 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 201c2f4:	defff804 	addi	sp,sp,-32
 201c2f8:	df000715 	stw	fp,28(sp)
 201c2fc:	df000704 	addi	fp,sp,28
 201c300:	e13ffd15 	stw	r4,-12(fp)
 201c304:	e17ffe15 	stw	r5,-8(fp)
 201c308:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 201c30c:	e0bffd17 	ldw	r2,-12(fp)
 201c310:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 201c314:	e0bffe17 	ldw	r2,-8(fp)
 201c318:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 201c31c:	e0bfff17 	ldw	r2,-4(fp)
 201c320:	10800130 	cmpltui	r2,r2,4
 201c324:	1000371e 	bne	r2,zero,201c404 <memcmp+0x110>
 201c328:	e0fff917 	ldw	r3,-28(fp)
 201c32c:	e0bffa17 	ldw	r2,-24(fp)
 201c330:	1884b03a 	or	r2,r3,r2
 201c334:	108000cc 	andi	r2,r2,3
 201c338:	1000321e 	bne	r2,zero,201c404 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 201c33c:	e0bff917 	ldw	r2,-28(fp)
 201c340:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 201c344:	e0bffa17 	ldw	r2,-24(fp)
 201c348:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 201c34c:	00000e06 	br	201c388 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 201c350:	e0bffb17 	ldw	r2,-20(fp)
 201c354:	10c00017 	ldw	r3,0(r2)
 201c358:	e0bffc17 	ldw	r2,-16(fp)
 201c35c:	10800017 	ldw	r2,0(r2)
 201c360:	18800d1e 	bne	r3,r2,201c398 <memcmp+0xa4>
   	    break;
          a1++;
 201c364:	e0bffb17 	ldw	r2,-20(fp)
 201c368:	10800104 	addi	r2,r2,4
 201c36c:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 201c370:	e0bffc17 	ldw	r2,-16(fp)
 201c374:	10800104 	addi	r2,r2,4
 201c378:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 201c37c:	e0bfff17 	ldw	r2,-4(fp)
 201c380:	10bfff04 	addi	r2,r2,-4
 201c384:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 201c388:	e0bfff17 	ldw	r2,-4(fp)
 201c38c:	10800128 	cmpgeui	r2,r2,4
 201c390:	103fef1e 	bne	r2,zero,201c350 <memcmp+0x5c>
 201c394:	00000106 	br	201c39c <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 201c398:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 201c39c:	e0bffb17 	ldw	r2,-20(fp)
 201c3a0:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 201c3a4:	e0bffc17 	ldw	r2,-16(fp)
 201c3a8:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 201c3ac:	00001506 	br	201c404 <memcmp+0x110>
    {
      if (*s1 != *s2)
 201c3b0:	e0bff917 	ldw	r2,-28(fp)
 201c3b4:	10c00003 	ldbu	r3,0(r2)
 201c3b8:	e0bffa17 	ldw	r2,-24(fp)
 201c3bc:	10800003 	ldbu	r2,0(r2)
 201c3c0:	18c03fcc 	andi	r3,r3,255
 201c3c4:	10803fcc 	andi	r2,r2,255
 201c3c8:	18800826 	beq	r3,r2,201c3ec <memcmp+0xf8>
	return *s1 - *s2;
 201c3cc:	e0bff917 	ldw	r2,-28(fp)
 201c3d0:	10800003 	ldbu	r2,0(r2)
 201c3d4:	10c03fcc 	andi	r3,r2,255
 201c3d8:	e0bffa17 	ldw	r2,-24(fp)
 201c3dc:	10800003 	ldbu	r2,0(r2)
 201c3e0:	10803fcc 	andi	r2,r2,255
 201c3e4:	1885c83a 	sub	r2,r3,r2
 201c3e8:	00000b06 	br	201c418 <memcmp+0x124>
      s1++;
 201c3ec:	e0bff917 	ldw	r2,-28(fp)
 201c3f0:	10800044 	addi	r2,r2,1
 201c3f4:	e0bff915 	stw	r2,-28(fp)
      s2++;
 201c3f8:	e0bffa17 	ldw	r2,-24(fp)
 201c3fc:	10800044 	addi	r2,r2,1
 201c400:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 201c404:	e0bfff17 	ldw	r2,-4(fp)
 201c408:	10ffffc4 	addi	r3,r2,-1
 201c40c:	e0ffff15 	stw	r3,-4(fp)
 201c410:	103fe71e 	bne	r2,zero,201c3b0 <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 201c414:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 201c418:	e037883a 	mov	sp,fp
 201c41c:	df000017 	ldw	fp,0(sp)
 201c420:	dec00104 	addi	sp,sp,4
 201c424:	f800283a 	ret

0201c428 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 201c428:	defff804 	addi	sp,sp,-32
 201c42c:	dfc00715 	stw	ra,28(sp)
 201c430:	df000615 	stw	fp,24(sp)
 201c434:	dc000515 	stw	r16,20(sp)
 201c438:	df000604 	addi	fp,sp,24
 201c43c:	e13ffb15 	stw	r4,-20(fp)
 201c440:	e17ffc15 	stw	r5,-16(fp)
 201c444:	e1bffd15 	stw	r6,-12(fp)
 201c448:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 201c44c:	d0a00617 	ldw	r2,-32744(gp)
 201c450:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 201c454:	8000041e 	bne	r16,zero,201c468 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 201c458:	d0a00617 	ldw	r2,-32744(gp)
 201c45c:	d0e00617 	ldw	r3,-32744(gp)
 201c460:	1c005304 	addi	r16,r3,332
 201c464:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 201c468:	80800117 	ldw	r2,4(r16)
 201c46c:	10800810 	cmplti	r2,r2,32
 201c470:	1000131e 	bne	r2,zero,201c4c0 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 201c474:	00800034 	movhi	r2,0
 201c478:	10800004 	addi	r2,r2,0
 201c47c:	1000021e 	bne	r2,zero,201c488 <__register_exitproc+0x60>
	return -1;
 201c480:	00bfffc4 	movi	r2,-1
 201c484:	00003e06 	br	201c580 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 201c488:	01006404 	movi	r4,400
 201c48c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 201c490:	1021883a 	mov	r16,r2
      if (p == NULL)
 201c494:	8000021e 	bne	r16,zero,201c4a0 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 201c498:	00bfffc4 	movi	r2,-1
 201c49c:	00003806 	br	201c580 <__register_exitproc+0x158>
	}
      p->_ind = 0;
 201c4a0:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 201c4a4:	d0a00617 	ldw	r2,-32744(gp)
 201c4a8:	10805217 	ldw	r2,328(r2)
 201c4ac:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 201c4b0:	d0a00617 	ldw	r2,-32744(gp)
 201c4b4:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 201c4b8:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 201c4bc:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 201c4c0:	e0bffb17 	ldw	r2,-20(fp)
 201c4c4:	10002426 	beq	r2,zero,201c558 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 201c4c8:	80802204 	addi	r2,r16,136
 201c4cc:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 201c4d0:	80800117 	ldw	r2,4(r16)
 201c4d4:	e0fffa17 	ldw	r3,-24(fp)
 201c4d8:	1085883a 	add	r2,r2,r2
 201c4dc:	1085883a 	add	r2,r2,r2
 201c4e0:	1885883a 	add	r2,r3,r2
 201c4e4:	e0fffd17 	ldw	r3,-12(fp)
 201c4e8:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 201c4ec:	e0bffa17 	ldw	r2,-24(fp)
 201c4f0:	10804017 	ldw	r2,256(r2)
 201c4f4:	80c00117 	ldw	r3,4(r16)
 201c4f8:	01000044 	movi	r4,1
 201c4fc:	20c6983a 	sll	r3,r4,r3
 201c500:	10c6b03a 	or	r3,r2,r3
 201c504:	e0bffa17 	ldw	r2,-24(fp)
 201c508:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 201c50c:	80800117 	ldw	r2,4(r16)
 201c510:	e0fffa17 	ldw	r3,-24(fp)
 201c514:	10800804 	addi	r2,r2,32
 201c518:	1085883a 	add	r2,r2,r2
 201c51c:	1085883a 	add	r2,r2,r2
 201c520:	1885883a 	add	r2,r3,r2
 201c524:	e0fffe17 	ldw	r3,-8(fp)
 201c528:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 201c52c:	e0bffb17 	ldw	r2,-20(fp)
 201c530:	10800098 	cmpnei	r2,r2,2
 201c534:	1000081e 	bne	r2,zero,201c558 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 201c538:	e0bffa17 	ldw	r2,-24(fp)
 201c53c:	10804117 	ldw	r2,260(r2)
 201c540:	80c00117 	ldw	r3,4(r16)
 201c544:	01000044 	movi	r4,1
 201c548:	20c6983a 	sll	r3,r4,r3
 201c54c:	10c6b03a 	or	r3,r2,r3
 201c550:	e0bffa17 	ldw	r2,-24(fp)
 201c554:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 201c558:	80800117 	ldw	r2,4(r16)
 201c55c:	10c00044 	addi	r3,r2,1
 201c560:	80c00115 	stw	r3,4(r16)
 201c564:	10800084 	addi	r2,r2,2
 201c568:	1085883a 	add	r2,r2,r2
 201c56c:	1085883a 	add	r2,r2,r2
 201c570:	8085883a 	add	r2,r16,r2
 201c574:	e0fffc17 	ldw	r3,-16(fp)
 201c578:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 201c57c:	0005883a 	mov	r2,zero
}
 201c580:	e6ffff04 	addi	sp,fp,-4
 201c584:	dfc00217 	ldw	ra,8(sp)
 201c588:	df000117 	ldw	fp,4(sp)
 201c58c:	dc000017 	ldw	r16,0(sp)
 201c590:	dec00304 	addi	sp,sp,12
 201c594:	f800283a 	ret

0201c598 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 201c598:	defff504 	addi	sp,sp,-44
 201c59c:	dfc00a15 	stw	ra,40(sp)
 201c5a0:	df000915 	stw	fp,36(sp)
 201c5a4:	dc800815 	stw	r18,32(sp)
 201c5a8:	dc400715 	stw	r17,28(sp)
 201c5ac:	dc000615 	stw	r16,24(sp)
 201c5b0:	df000904 	addi	fp,sp,36
 201c5b4:	e13ffb15 	stw	r4,-20(fp)
 201c5b8:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 201c5bc:	d0a00617 	ldw	r2,-32744(gp)
 201c5c0:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 201c5c4:	d0a00617 	ldw	r2,-32744(gp)
 201c5c8:	10805204 	addi	r2,r2,328
 201c5cc:	e0bff715 	stw	r2,-36(fp)
  while (p)
 201c5d0:	00006006 	br	201c754 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 201c5d4:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 201c5d8:	80800117 	ldw	r2,4(r16)
 201c5dc:	147fffc4 	addi	r17,r2,-1
 201c5e0:	00004a06 	br	201c70c <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 201c5e4:	00800044 	movi	r2,1
 201c5e8:	1444983a 	sll	r2,r2,r17
 201c5ec:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 201c5f0:	e0bffc17 	ldw	r2,-16(fp)
 201c5f4:	10000826 	beq	r2,zero,201c618 <__call_exitprocs+0x80>
 201c5f8:	90004026 	beq	r18,zero,201c6fc <__call_exitprocs+0x164>
 201c5fc:	88800804 	addi	r2,r17,32
 201c600:	1085883a 	add	r2,r2,r2
 201c604:	1085883a 	add	r2,r2,r2
 201c608:	9085883a 	add	r2,r18,r2
 201c60c:	10c00017 	ldw	r3,0(r2)
 201c610:	e0bffc17 	ldw	r2,-16(fp)
 201c614:	1880391e 	bne	r3,r2,201c6fc <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 201c618:	88800084 	addi	r2,r17,2
 201c61c:	1085883a 	add	r2,r2,r2
 201c620:	1085883a 	add	r2,r2,r2
 201c624:	8085883a 	add	r2,r16,r2
 201c628:	10800017 	ldw	r2,0(r2)
 201c62c:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 201c630:	80800117 	ldw	r2,4(r16)
 201c634:	10bfffc4 	addi	r2,r2,-1
 201c638:	1440041e 	bne	r2,r17,201c64c <__call_exitprocs+0xb4>
	    p->_ind--;
 201c63c:	80800117 	ldw	r2,4(r16)
 201c640:	10bfffc4 	addi	r2,r2,-1
 201c644:	80800115 	stw	r2,4(r16)
 201c648:	00000506 	br	201c660 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 201c64c:	88800084 	addi	r2,r17,2
 201c650:	1085883a 	add	r2,r2,r2
 201c654:	1085883a 	add	r2,r2,r2
 201c658:	8085883a 	add	r2,r16,r2
 201c65c:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 201c660:	e0bff917 	ldw	r2,-28(fp)
 201c664:	10002726 	beq	r2,zero,201c704 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 201c668:	80800117 	ldw	r2,4(r16)
 201c66c:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 201c670:	90000426 	beq	r18,zero,201c684 <__call_exitprocs+0xec>
 201c674:	90c04017 	ldw	r3,256(r18)
 201c678:	e0bff817 	ldw	r2,-32(fp)
 201c67c:	1884703a 	and	r2,r3,r2
 201c680:	1000031e 	bne	r2,zero,201c690 <__call_exitprocs+0xf8>
	    fn ();
 201c684:	e0bff917 	ldw	r2,-28(fp)
 201c688:	103ee83a 	callr	r2
 201c68c:	00001406 	br	201c6e0 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 201c690:	90c04117 	ldw	r3,260(r18)
 201c694:	e0bff817 	ldw	r2,-32(fp)
 201c698:	1884703a 	and	r2,r3,r2
 201c69c:	1000091e 	bne	r2,zero,201c6c4 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 201c6a0:	8c45883a 	add	r2,r17,r17
 201c6a4:	1085883a 	add	r2,r2,r2
 201c6a8:	9085883a 	add	r2,r18,r2
 201c6ac:	10c00017 	ldw	r3,0(r2)
 201c6b0:	e0bff917 	ldw	r2,-28(fp)
 201c6b4:	180b883a 	mov	r5,r3
 201c6b8:	e13ffb17 	ldw	r4,-20(fp)
 201c6bc:	103ee83a 	callr	r2
 201c6c0:	00000706 	br	201c6e0 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 201c6c4:	8c45883a 	add	r2,r17,r17
 201c6c8:	1085883a 	add	r2,r2,r2
 201c6cc:	9085883a 	add	r2,r18,r2
 201c6d0:	10c00017 	ldw	r3,0(r2)
 201c6d4:	e0bff917 	ldw	r2,-28(fp)
 201c6d8:	1809883a 	mov	r4,r3
 201c6dc:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 201c6e0:	80c00117 	ldw	r3,4(r16)
 201c6e4:	e0bffa17 	ldw	r2,-24(fp)
 201c6e8:	18bfb41e 	bne	r3,r2,201c5bc <__call_exitprocs+0x24>
 201c6ec:	e0bff717 	ldw	r2,-36(fp)
 201c6f0:	10800017 	ldw	r2,0(r2)
 201c6f4:	143fb11e 	bne	r2,r16,201c5bc <__call_exitprocs+0x24>
 201c6f8:	00000306 	br	201c708 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 201c6fc:	0001883a 	nop
 201c700:	00000106 	br	201c708 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 201c704:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 201c708:	8c7fffc4 	addi	r17,r17,-1
 201c70c:	883fb50e 	bge	r17,zero,201c5e4 <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 201c710:	00800034 	movhi	r2,0
 201c714:	10800004 	addi	r2,r2,0
 201c718:	10001026 	beq	r2,zero,201c75c <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 201c71c:	80800117 	ldw	r2,4(r16)
 201c720:	10000a1e 	bne	r2,zero,201c74c <__call_exitprocs+0x1b4>
 201c724:	80800017 	ldw	r2,0(r16)
 201c728:	10000826 	beq	r2,zero,201c74c <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 201c72c:	80c00017 	ldw	r3,0(r16)
 201c730:	e0bff717 	ldw	r2,-36(fp)
 201c734:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 201c738:	8009883a 	mov	r4,r16
 201c73c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
	  p = *lastp;
 201c740:	e0bff717 	ldw	r2,-36(fp)
 201c744:	14000017 	ldw	r16,0(r2)
 201c748:	00000206 	br	201c754 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 201c74c:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 201c750:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 201c754:	803f9f1e 	bne	r16,zero,201c5d4 <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 201c758:	00000106 	br	201c760 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 201c75c:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 201c760:	0001883a 	nop
 201c764:	e6fffd04 	addi	sp,fp,-12
 201c768:	dfc00417 	ldw	ra,16(sp)
 201c76c:	df000317 	ldw	fp,12(sp)
 201c770:	dc800217 	ldw	r18,8(sp)
 201c774:	dc400117 	ldw	r17,4(sp)
 201c778:	dc000017 	ldw	r16,0(sp)
 201c77c:	dec00504 	addi	sp,sp,20
 201c780:	f800283a 	ret

0201c784 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 201c784:	defffd04 	addi	sp,sp,-12
 201c788:	df000215 	stw	fp,8(sp)
 201c78c:	df000204 	addi	fp,sp,8
 201c790:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 201c794:	d0272b45 	stb	zero,-25427(gp)
 201c798:	e0bfff17 	ldw	r2,-4(fp)
 201c79c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 201c7a0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 201c7a4:	10000226 	beq	r2,zero,201c7b0 <_exit+0x2c>
    ALT_SIM_FAIL();
 201c7a8:	002af070 	cmpltui	zero,zero,43969
 201c7ac:	00000106 	br	201c7b4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 201c7b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 201c7b4:	003fff06 	br	201c7b4 <_exit+0x30>
