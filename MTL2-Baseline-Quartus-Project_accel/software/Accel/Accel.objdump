
Accel.elf:     file format elf32-littlenios2
Accel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000248

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00021f00 memsz 0x00021f00 flags r-x
    LOAD off    0x00022f20 vaddr 0x02021f20 paddr 0x02023ba8 align 2**12
         filesz 0x00001c88 memsz 0x00001c88 flags rw-
    LOAD off    0x00025830 vaddr 0x02025830 paddr 0x02025830 align 2**12
         filesz 0x00000000 memsz 0x0000942c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0002126c  02000248  02000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a6c  020214b4  020214b4  000224b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c88  02021f20  02023ba8  00022f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000942c  02025830  02025830  00025830  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  00024ba8  2**0
                  CONTENTS
  7 .sdram_controller 00000000  0202ec5c  0202ec5c  00024ba8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00024ba8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001340  00000000  00000000  00024bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002eae9  00000000  00000000  00025f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b17f  00000000  00000000  000549f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fde0  00000000  00000000  0005fb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003b3c  00000000  00000000  0006f958  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005db1  00000000  00000000  00073494  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009061  00000000  00000000  00079245  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000822a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014b8  00000000  00000000  000822d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00088f1e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00088f24  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00088f27  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00088f28  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00088f29  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00088f2d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00088f31  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00088f35  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00088f3e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00088f47  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00088f50  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000045  00000000  00000000  00088f59  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d7f  00000000  00000000  00088f9e  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005d33d  00000000  00000000  0008cd1d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000248 l    d  .text	00000000 .text
020214b4 l    d  .rodata	00000000 .rodata
02021f20 l    d  .rwdata	00000000 .rwdata
02025830 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
0202ec5c l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Accel_bsp//obj/HAL/src/crt0.o
02000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 physics.c
00000000 l    df *ABS*	00000000 s_fmin.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sf_cos.c
02023a38 l     O .rwdata	00000004 one
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 wf_atan2.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 ef_atan2.c
02023a3c l     O .rwdata	00000004 tiny
02023a40 l     O .rwdata	00000004 zero
02023a44 l     O .rwdata	00000004 pi_o_4
02023a48 l     O .rwdata	00000004 pi_o_2
02023a4c l     O .rwdata	00000004 pi
02023a50 l     O .rwdata	00000004 pi_lo
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
02021658 l     O .rodata	00000318 two_over_pi
02021970 l     O .rodata	00000080 npio2_hw
02023a54 l     O .rwdata	00000004 zero
02023a58 l     O .rwdata	00000004 half
02023a5c l     O .rwdata	00000004 two8
02023a60 l     O .rwdata	00000004 invpio2
02023a64 l     O .rwdata	00000004 pio2_1
02023a68 l     O .rwdata	00000004 pio2_1t
02023a6c l     O .rwdata	00000004 pio2_2
02023a70 l     O .rwdata	00000004 pio2_2t
02023a74 l     O .rwdata	00000004 pio2_3
02023a78 l     O .rwdata	00000004 pio2_3t
00000000 l    df *ABS*	00000000 ef_sqrt.c
02023a7c l     O .rwdata	00000004 one
02023a80 l     O .rwdata	00000004 tiny
00000000 l    df *ABS*	00000000 kf_cos.c
02023a84 l     O .rwdata	00000004 one
02023a88 l     O .rwdata	00000004 C1
02023a8c l     O .rwdata	00000004 C2
02023a90 l     O .rwdata	00000004 C3
02023a94 l     O .rwdata	00000004 C4
02023a98 l     O .rwdata	00000004 C5
02023a9c l     O .rwdata	00000004 C6
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
020219f0 l     O .rodata	0000000c init_jk
020219fc l     O .rodata	0000002c PIo2
02023aa0 l     O .rwdata	00000004 zero
02023aa4 l     O .rwdata	00000004 one
02023aa8 l     O .rwdata	00000004 two8
02023aac l     O .rwdata	00000004 twon8
00000000 l    df *ABS*	00000000 kf_sin.c
02023ab0 l     O .rwdata	00000004 half
02023ab4 l     O .rwdata	00000004 S1
02023ab8 l     O .rwdata	00000004 S2
02023abc l     O .rwdata	00000004 S3
02023ac0 l     O .rwdata	00000004 S4
02023ac4 l     O .rwdata	00000004 S5
02023ac8 l     O .rwdata	00000004 S6
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 sf_atan.c
02021a28 l     O .rodata	00000010 atanhi
02021a38 l     O .rodata	00000010 atanlo
02021a48 l     O .rodata	0000002c aT
02023ad0 l     O .rwdata	00000004 one
02023ad4 l     O .rwdata	00000004 huge
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_floor.c
02023ad8 l     O .rwdata	00000004 huge
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
02023adc l     O .rwdata	00000004 two25
02023ae0 l     O .rwdata	00000004 twom25
02023ae4 l     O .rwdata	00000004 huge
02023ae8 l     O .rwdata	00000004 tiny
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
02021f50 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02007d24 l     F .text	000000f0 __sbprintf
02009f34 l     F .text	0000020c cvt
0200a140 l     F .text	00000140 exponent
02021bda l     O .rodata	00000010 blanks.4403
02021bea l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200a420 l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200c72c l     F .text	000000f4 std
02025864 l     O .bss	00000004 __sfp_lock
02025868 l     O .bss	00000004 __sinit_lock
0200cc28 l     F .text	00000024 __fp_lock
0200cc4c l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
02022374 l     O .rwdata	00000038 lconv
020223ac l     O .rwdata	00000020 lc_ctype_charset
020223cc l     O .rwdata	00000020 lc_message_charset
02025878 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0200df7c l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
02021d3c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
02011e28 l     F .text	000000f0 __sbprintf
02021d92 l     O .rodata	00000010 blanks.4348
02021da2 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
02015cdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02015de8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02015e14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02015f00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02015fe0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020160cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
02016298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02023b1c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
020164e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
02023b20 l     O .rwdata	00000004 lockid
0202589c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
02023b24 l     O .rwdata	00000004 lockid
020258a4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02017f14 l     F .text	00000048 OS_InitMisc
02017f5c l     F .text	0000006c OS_InitRdyList
020180c8 l     F .text	000000e4 OS_InitTCBList
02017e34 l     F .text	000000e0 OS_InitEventList
02017fc8 l     F .text	00000080 OS_InitTaskIdle
02018048 l     F .text	00000080 OS_InitTaskStat
02018338 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0201a048 l     F .text	000000f4 OS_FlagTaskRdy
02019e08 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201ebb4 l     F .text	00000034 alt_dev_reg
0202299c l     O .rwdata	0000106c jtag_uart
02023a08 l     O .rwdata	0000002c accelerometer_spi_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201ef2c l     F .text	000002a8 altera_avalon_jtag_uart_irq
0201f1d4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0201f9b0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201ffc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02020228 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
020204e8 l     F .text	0000003c alt_get_errno
02020524 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0202590c l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
02025908 g     O .bss	00000004 alt_instruction_exception_handler
02010a34 g     F .text	000000b0 _mprec_log10
02023b72 g     O .rwdata	00000002 OSTaskNameSize
02010bb4 g     F .text	00000134 __any_on
02013910 g     F .text	00000060 _isatty_r
02021d14 g     O .rodata	00000028 __mprec_tinytens
020161dc g     F .text	000000bc alt_main
02007ae0 g     F .text	00000118 _puts_r
0202eb5c g     O .bss	00000100 alt_irq
02025834 g     O .bss	00000004 MailBox6
02013970 g     F .text	00000070 _lseek_r
0201b330 g     F .text	000000cc OS_MemInit
02023ba8 g       *ABS*	00000000 __flash_rwdata_start
0201eb54 g     F .text	00000060 OSTimeSet
02006868 g     F .text	00000088 .hidden __eqdf2
02016b88 g     F .text	00000610 OSEventPendMulti
0202ec5c g       *ABS*	00000000 __alt_heap_start
02020b30 g     F .text	00000024 OSTaskCreateHook
02025938 g     O .bss	00002000 task1_stk
02007a78 g     F .text	00000068 printf
02023b4a g     O .rwdata	00000002 OSMboxEn
020171f0 g     F .text	0000004c OSIntEnter
02013bf8 g     F .text	000000d4 _wcrtomb_r
02011ab8 g     F .text	000000a0 __sseek
0200cad0 g     F .text	000000d8 __sinit
02013a50 g     F .text	00000168 __swbuf_r
02023b5a g     O .rwdata	00000002 OSQEn
0200dbac g     F .text	00000084 _setlocale_r
0200c820 g     F .text	000000a4 __sfmoreglue
0201685c g     F .text	000000cc __malloc_unlock
02020b98 g     F .text	00000020 OSTaskStatHook
020258ac g     O .bss	00000001 OSLockNesting
02023b98 g     O .rwdata	00000002 OSDataSize
020258ad g     O .bss	00000001 OSRunning
0200f068 g     F .text	00000208 memmove
02020bd8 g     F .text	00000020 OSInitHookBegin
02023b90 g     O .rwdata	00000002 OSTmrSize
0200ca9c g     F .text	00000034 _cleanup
02023a34 g     O .rwdata	00000004 accel_name
0200f270 g     F .text	00000130 _Balloc
020258b0 g     O .bss	00000004 OSIdleCtr
020068f0 g     F .text	000000dc .hidden __gtdf2
020208e0 g     F .text	00000024 altera_nios2_gen2_irq_init
020209b0 g       .text	00000000 OSStartTsk
020076a8 g     F .text	00000020 __errno
02018668 g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000001c __reset
02003bac g     F .text	00000674 __ieee754_rem_pio2f
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
0201fbec g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
02023b96 g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
02023b36 g     O .rwdata	00000002 OSEventSize
020258b4 g     O .bss	00000001 OSPrioHighRdy
020138a8 g     F .text	00000068 _fstat_r
02020b54 g     F .text	00000024 OSTaskDelHook
02025888 g     O .bss	00000004 errno
020119d4 g     F .text	00000030 __seofread
02020990 g       .text	00000000 OSStartHighRdy
0201d5fc g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02019950 g     F .text	00000060 OSFlagPendGetFlagsRdy
02023b76 g     O .rwdata	00000002 OSTaskStatStkSize
02018acc g     F .text	00000308 OSFlagAccept
0201b968 g     F .text	000000b8 OSQFlush
0201b3fc g     F .text	00000140 OSQAccept
02025894 g     O .bss	00000004 alt_argv
0202ba34 g       *ABS*	00000000 _gp
0201d450 g     F .text	000001ac OSTaskCreate
020030d0 g     F .text	000000f4 damping
0201cf60 g     F .text	000004f0 OSTaskChangePrio
020258a8 g     O .bss	00000004 alt_heapsem
0201893c g     F .text	00000190 OSDebugInit
0201d7e0 g     F .text	00000344 OSTaskDel
02003638 g     F .text	00000160 sqrtf
0202281c g     O .rwdata	00000180 alt_fd_list
0202b938 g     O .bss	00000370 OSFlagTbl
02017c14 g     F .text	000000b8 OS_EventTaskRemove
02020164 g     F .text	00000090 alt_find_dev
020076c8 g     F .text	00000188 memcpy
02023b60 g     O .rwdata	00000002 OSRdyTblSize
02025838 g     O .bss	00000004 MailBox3
0200ca58 g     F .text	00000044 _cleanup_r
02015b58 g     F .text	000000dc .hidden __floatsidf
020202ec g     F .text	0000007c alt_io_redirect
020069cc g     F .text	000000f4 .hidden __ltdf2
020214b4 g       *ABS*	00000000 __DTOR_END__
02007bf8 g     F .text	00000038 puts
02020ed0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02016928 g     F .text	00000120 OSEventNameGet
02023b44 g     O .rwdata	00000002 OSFlagMax
02003270 g     F .text	00000104 __fpclassifyd
02010918 g     F .text	0000011c __ratio
0201723c g     F .text	000000f8 OSIntExit
02011f18 g     F .text	00000050 __vfiprintf_internal
02023b7e g     O .rwdata	00000002 OSTCBSize
020258b5 g     O .bss	00000001 OSPrioCur
0201f430 g     F .text	000002bc altera_avalon_jtag_uart_read
02007a14 g     F .text	00000064 _printf_r
020075ec g     F .text	00000064 .hidden __udivsi3
02015f3c g     F .text	000000a4 isatty
02023b64 g     O .rwdata	00000002 OSStkWidth
02021c24 g     O .rodata	000000c8 __mprec_tens
02023b58 g     O .rwdata	00000002 OSPtrSize
0200dc30 g     F .text	00000024 __locale_charset
02023b38 g     O .rwdata	00000002 OSEventTblSize
02020904 g       .text	00000000 OSCtxSw
02020e40 g     F .text	00000090 alt_icache_flush
0202587c g     O .bss	00000004 __malloc_top_pad
020258b8 g     O .bss	00000004 OSTCBList
02005c18 g     F .text	000000dc __fpclassifyf
0202588c g     O .bss	00000004 alt_fd_list_lock
02023af4 g     O .rwdata	00000004 __mb_cur_max
0200dcb8 g     F .text	00000028 _localeconv_r
0200f8b8 g     F .text	00000058 __i2b
0200d41c g     F .text	000005dc __sfvwrite_r
0202bca8 g     O .bss	00000c30 OSMemTbl
020258bc g     O .bss	00000001 OSTickStepState
020118d8 g     F .text	00000060 _sbrk_r
02023b5c g     O .rwdata	00000002 OSQMax
0202c8d8 g     O .bss	00000800 OSTaskStatStk
0201af6c g     F .text	000000f0 OSMemNameGet
02005a5c g     F .text	00000058 fabsf
02023b3c g     O .rwdata	00000002 OSFlagEn
020139e0 g     F .text	00000070 _read_r
02023b82 g     O .rwdata	00000002 OSTimeTickHookEn
0201be18 g     F .text	00000168 OSQPost
0201a13c g     F .text	000000a4 OS_FlagUnlink
02023b14 g     O .rwdata	00000004 alt_max_fd
02018200 g     F .text	00000068 OS_MemCopy
02018268 g     F .text	000000d0 OS_Sched
02013460 g     F .text	0000012c _fclose_r
0201ae7c g     F .text	000000f0 OSMemGet
0201ab98 g     F .text	00000110 OSMboxQuery
0201de0c g     F .text	000001b4 OSTaskNameSet
0200c6d8 g     F .text	00000054 fflush
02025880 g     O .bss	00000004 __malloc_max_sbrked_mem
020258c0 g     O .bss	00000004 OSCtxSwCtr
02020bb8 g     F .text	00000020 OSTimeTickHook
02020368 g     F .text	00000180 alt_irq_register
02023b46 g     O .rwdata	00000002 OSFlagNameSize
0202583c g     O .bss	00000004 AnimationFlagGrp
020071d8 g     F .text	00000110 .hidden __extendsfdf2
02017ccc g     F .text	00000100 OS_EventTaskRemoveMulti
02014930 g     F .text	000008ac .hidden __adddf3
02017ac4 g     F .text	00000150 OS_EventTaskWaitMulti
020104d4 g     F .text	00000204 __b2d
02023b5e g     O .rwdata	00000002 OSQSize
020143f8 g     F .text	00000538 .hidden __umoddi3
02016108 g     F .text	000000d4 lseek
0201c8c8 g     F .text	0000020c OSSemPend
02023acc g     O .rwdata	00000004 __fdlib_version
02002a6c g     F .text	00000064 momentum
02023af0 g     O .rwdata	00000004 _global_impure_ptr
02010ce8 g     F .text	00000bf0 _realloc_r
02005518 g     F .text	0000016c __kernel_sinf
02023b48 g     O .rwdata	00000002 OSLowestPrio
0202ec5c g       *ABS*	00000000 __bss_end
02020c38 g     F .text	00000024 OSTCBInitHook
02023b8e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
020207d8 g     F .text	00000108 alt_tick
0201a92c g     F .text	00000110 OSMboxPost
02013e80 g     F .text	00000578 .hidden __udivdi3
020137b8 g     F .text	00000088 _fputwc_r
02023b30 g     O .rwdata	00000002 OSEventEn
02021cec g     O .rodata	00000028 __mprec_bigtens
0200f5b0 g     F .text	0000018c __s2b
02023b8a g     O .rwdata	00000002 OSTmrCfgNameSize
02015c34 g     F .text	000000a8 .hidden __floatunsidf
02010050 g     F .text	00000114 __mcmp
0200cc70 g     F .text	00000040 __fp_lock_all
02025840 g     O .bss	00000004 MailBox5
02019f68 g     F .text	000000e0 OS_FlagInit
0202073c g     F .text	0000009c alt_alarm_stop
02023b6c g     O .rwdata	00000002 OSTaskIdleStkSize
02003374 g     F .text	00000140 cosf
020258fc g     O .bss	00000004 alt_irq_active
0201c500 g     F .text	000000b0 OSSemAccept
0201b170 g     F .text	000000d8 OSMemPut
0201aca8 g     F .text	000001d4 OSMemCreate
020258c4 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d8 alt_irq_handler
020227f4 g     O .rwdata	00000028 alt_dev_null
02023b80 g     O .rwdata	00000002 OSTicksPerSec
02020904 g       .text	00000000 OSIntCtxSw
0201ff7c g     F .text	00000048 alt_dcache_flush_all
0200f73c g     F .text	00000090 __hi0bits
02015ad8 g     F .text	00000080 .hidden __fixdfsi
02025844 g     O .bss	00000004 y_prev
020044b4 g     F .text	000001c4 __kernel_cosf
020258c8 g     O .bss	00000004 OSTCBFreeList
02023ba8 g       *ABS*	00000000 __ram_rwdata_end
0201cad4 g     F .text	0000016c OSSemPendAbort
02023b0c g     O .rwdata	00000008 alt_dev_list
02016520 g     F .text	000000f8 write
02023b84 g     O .rwdata	00000002 OSVersionNbr
02021f20 g       *ABS*	00000000 __ram_rodata_end
02015e50 g     F .text	000000b0 fstat
020069cc g     F .text	000000f4 .hidden __ledf2
02023b2c g     O .rwdata	00000004 OSEndiannessTest
0200fce0 g     F .text	00000178 __pow5mult
02011f68 g     F .text	000012c4 ___vfiprintf_internal_r
0202586c g     O .bss	00000004 __nlocale_changed
02007650 g     F .text	00000058 .hidden __umodsi3
02023b3e g     O .rwdata	00000002 OSFlagGrpSize
0202ec5c g       *ABS*	00000000 end
0201edf0 g     F .text	0000013c altera_avalon_jtag_uart_init
020184d0 g     F .text	000000cc OS_TaskStat
020001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
020214b4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0201fa2c g     F .text	00000074 alt_avalon_timer_sc_init
02007490 g     F .text	00000064 .hidden __clzsi2
0201f6ec g     F .text	000002c4 altera_avalon_jtag_uart_write
0200cba8 g     F .text	00000020 __sfp_lock_acquire
0200eeac g     F .text	000001bc memchr
020181ac g     F .text	00000054 OS_MemClr
02007e64 g     F .text	000020d0 ___vfprintf_internal_r
020209d4 g     F .text	0000015c OSTaskStkInit
02000294 g     F .text	00000210 task1
02021f20 g     O .rwdata	00000030 whole_list
0200ccf0 g     F .text	00000560 _free_r
0200dc54 g     F .text	00000020 __locale_mb_cur_max
0201781c g     F .text	00000198 OS_EventTaskRdy
02021294 g     F .text	000001ec __call_exitprocs
020258cc g     O .bss	00000001 OSCPUUsage
02025870 g     O .bss	00000004 __mlocale_changed
02023afc g     O .rwdata	00000004 __malloc_sbrk_base
02000248 g     F .text	0000004c _start
020004a4 g     F .text	00001ef4 task2
02025900 g     O .bss	00000004 _alt_tick_rate
0201ba20 g     F .text	0000028c OSQPend
0201e6cc g     F .text	00000104 OSTimeDly
02002914 g     F .text	00000158 borderCollide
0200fe58 g     F .text	000001f8 __lshift
02025904 g     O .bss	00000004 _alt_nticks
020162d4 g     F .text	000000fc read
0201ec20 g     F .text	0000006c alt_sys_init
0201fadc g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
02021124 g     F .text	00000170 __register_exitproc
020258cd g     O .bss	00000001 OSTaskCtr
02025848 g     O .bss	00000004 MailBox2
0201e7d0 g     F .text	00000154 OSTimeDlyHMSM
0200f910 g     F .text	000003d0 __multiply
0201f2d8 g     F .text	00000068 altera_avalon_jtag_uart_close
02021f20 g       *ABS*	00000000 __ram_rwdata_start
020214b4 g       *ABS*	00000000 __ram_rodata_start
02025910 g     O .bss	00000028 __malloc_current_mallinfo
02023b32 g     O .rwdata	00000002 OSEventMax
020106d8 g     F .text	00000240 __d2b
0201cc40 g     F .text	00000110 OSSemPost
020173c0 g     F .text	000000dc OSSchedUnlock
020031c4 g     F .text	000000ac fmin
0201ec8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02020d64 g     F .text	000000dc alt_get_fd
0202584c g     O .bss	00000004 x_axis
020258d0 g     O .bss	00000004 OSMemFreeList
0201750c g     F .text	000000b0 OSStatInit
02019d44 g     F .text	000000c4 OSFlagQuery
0201fcb8 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
02023b68 g     O .rwdata	00000002 OSTaskCreateExtEn
0201329c g     F .text	00000060 _close_r
02020ff0 g     F .text	00000134 memcmp
020177fc g     F .text	00000020 OS_Dummy
0201ed4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0202ec5c g       *ABS*	00000000 __alt_stack_base
0201ed9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0200a280 g     F .text	000001a0 __swsetup_r
0202d0d8 g     O .bss	000001e0 OSQTbl
02005f80 g     F .text	000008e8 .hidden __divdf3
0200c8c4 g     F .text	00000194 __sfp
02010ae4 g     F .text	000000d0 __copybits
020223ec g     O .rwdata	00000408 __malloc_av_
0200cc08 g     F .text	00000020 __sinit_lock_release
020258d4 g     O .bss	00000004 OSTCBHighRdy
02006ac0 g     F .text	00000718 .hidden __muldf3
02011938 g     F .text	0000009c __sread
020258d8 g     O .bss	00000004 OSQFreeList
02020c5c g     F .text	00000108 alt_find_file
02020000 g     F .text	000000a4 alt_dev_llist_insert
0201673c g     F .text	00000120 __malloc_lock
02016434 g     F .text	000000b0 sbrk
02005cf4 g     F .text	00000214 scalbnf
02016a48 g     F .text	00000140 OSEventNameSet
0200c650 g     F .text	00000088 _fflush_r
020132fc g     F .text	00000164 _calloc_r
020258dc g     O .bss	00000001 OSRdyGrp
02025830 g       *ABS*	00000000 __bss_start
02007850 g     F .text	000001c4 memset
02004220 g     F .text	00000294 __ieee754_sqrtf
02002628 g     F .text	00000178 main
02025898 g     O .bss	00000004 alt_envp
02025884 g     O .bss	00000004 __malloc_max_total_mem
02002f18 g     F .text	000001b8 moveBall
0201ecec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02013bb8 g     F .text	00000040 __swbuf
02021dd0 g     O .rodata	00000100 OSUnMapTbl
02023b62 g     O .rwdata	00000002 OSSemEn
020199b0 g     F .text	00000394 OSFlagPost
02011b58 g     F .text	00000054 __sclose
02005684 g     F .text	00000068 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
0201358c g     F .text	00000038 fclose
020179b4 g     F .text	00000110 OS_EventTaskWait
02027938 g     O .bss	00002000 task2_stk
020072e8 g     F .text	000001a8 .hidden __truncdfsf2
0201859c g     F .text	000000cc OS_TaskStatStkChk
02025850 g     O .bss	00000004 x_prev
0201db24 g     F .text	00000150 OSTaskDelReq
0200a7d4 g     F .text	00001b78 _dtoa_r
0200e330 g     F .text	00000b7c _malloc_r
02013e08 g     F .text	00000078 __ascii_wctomb
02023b18 g     O .rwdata	00000004 alt_errno
0201749c g     F .text	00000070 OSStart
02029938 g     O .bss	00002000 task3_stk
020166dc g     F .text	00000060 __env_unlock
0200d9f8 g     F .text	000000d8 _fwalk
0201dfc0 g     F .text	000001d4 OSTaskResume
0201b248 g     F .text	000000e8 OSMemQuery
02023b74 g     O .rwdata	00000002 OSTaskStatEn
02023b4e g     O .rwdata	00000002 OSMemMax
0201bf80 g     F .text	00000170 OSQPostFront
020074f4 g     F .text	00000084 .hidden __divsi3
020258dd g     O .bss	00000003 OSRdyTbl
02023b28 g     O .rwdata	00000002 OSDebugEn
0200d250 g     F .text	000001cc _malloc_trim_r
02025854 g     O .bss	00000004 MailBox4
020214b4 g       *ABS*	00000000 __CTOR_END__
02023b40 g     O .rwdata	00000002 OSFlagNodeSize
02023b88 g     O .rwdata	00000002 OSTmrCfgMax
02011bac g     F .text	00000140 strcmp
0201b53c g     F .text	000001ac OSQCreate
0201dc74 g     F .text	00000198 OSTaskNameGet
020214b4 g       *ABS*	00000000 __flash_rodata_start
0201c0f0 g     F .text	0000020c OSQPostOpt
020175bc g     F .text	00000220 OSTimeTick
02023b70 g     O .rwdata	00000002 OSTaskMax
020214b4 g       *ABS*	00000000 __DTOR_LIST__
0201c5b0 g     F .text	000000d8 OSSemCreate
02023b94 g     O .rwdata	00000002 OSTmrWheelSize
02006868 g     F .text	00000088 .hidden __nedf2
02023b6a g     O .rwdata	00000002 OSTaskDelEn
0201cd50 g     F .text	00000110 OSSemQuery
0201b6e8 g     F .text	00000280 OSQDel
0201bcac g     F .text	0000016c OSQPendAbort
0201ebe8 g     F .text	00000038 alt_irq_init
020163d0 g     F .text	00000064 alt_release_fd
02005f08 g     F .text	00000078 copysignf
02021a74 g     O .rodata	00000100 .hidden __clz_tab
02025874 g     O .bss	00000004 _PathLocale
02020f6c g     F .text	0000003c atexit
0201322c g     F .text	00000070 _write_r
02017334 g     F .text	0000008c OSSchedLock
0200dce0 g     F .text	00000040 setlocale
02018dd4 g     F .text	00000108 OSFlagCreate
02023aec g     O .rwdata	00000004 _impure_ptr
02025890 g     O .bss	00000004 alt_argc
0200c34c g     F .text	00000304 __sflush_r
020035f8 g     F .text	00000040 atan2f
02020104 g     F .text	00000060 _do_dtors
0200dc98 g     F .text	00000020 __locale_cjk_lang
02023b3a g     O .rwdata	00000002 OSEventMultiEn
02018edc g     F .text	00000248 OSFlagDel
020258e0 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
0201a7c0 g     F .text	0000016c OSMboxPendAbort
02025830 g     O .bss	00000004 accel_spi
02010408 g     F .text	000000cc __ulp
02023b86 g     O .rwdata	00000002 OSTmrEn
02019398 g     F .text	000005b8 OSFlagPend
0200ccb0 g     F .text	00000040 __fp_unlock_all
02023b04 g     O .rwdata	00000008 alt_fs_list
020183ac g     F .text	00000074 OS_StrCopy
020034b4 g     F .text	00000144 sinf
02023b50 g     O .rwdata	00000002 OSMemNameSize
02020bf8 g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
0201faa0 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
02023b7c g     O .rwdata	00000002 OSTCBPrioTblMax
0200dd20 g     F .text	00000030 localeconv
02023b78 g     O .rwdata	00000002 OSTaskStatStkChkEn
0201a278 g     F .text	000000d4 OSMboxCreate
02023b4c g     O .rwdata	00000002 OSMemEn
02023b56 g     O .rwdata	00000002 OSMutexEn
02023ba8 g       *ABS*	00000000 _edata
02002b90 g     F .text	00000388 collide_calc
0202ec5c g       *ABS*	00000000 _end
020258e4 g     O .bss	00000001 OSIntNesting
020135c4 g     F .text	000001f4 __fputwc
02000248 g       *ABS*	00000000 __ram_exceptions_end
0201f340 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0201e924 g     F .text	000001d4 OSTimeDlyResume
0201924c g     F .text	0000014c OSFlagNameSet
0201a58c g     F .text	00000234 OSMboxPend
020027a0 g     F .text	00000174 whole_collide
0201e194 g     F .text	000001c0 OSTaskStkChk
02023b52 g     O .rwdata	00000002 OSMemSize
02011a04 g     F .text	000000b4 __swrite
02023af8 g     O .rwdata	00000004 __malloc_trim_threshold
0200dc74 g     F .text	00000024 __locale_msgcharset
020258e8 g     O .bss	00000004 OSTCBCur
02020fa8 g     F .text	00000048 exit
02023b54 g     O .rwdata	00000002 OSMemTblSize
0200dad0 g     F .text	000000dc _fwalk_reent
02025858 g     O .bss	00000004 MailBox1
02010164 g     F .text	000002a4 __mdiff
02007578 g     F .text	00000074 .hidden __modsi3
0201fd84 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
0201a1e0 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200cbc8 g     F .text	00000020 __sfp_lock_release
02017198 g     F .text	00000058 OSInit
020056ec g     F .text	00000370 atanf
0201e538 g     F .text	00000124 OSTaskQuery
0201c458 g     F .text	000000a8 OS_QInit
02018420 g     F .text	00000054 OS_StrLen
0201b05c g     F .text	00000114 OSMemNameSet
02023b6e g     O .rwdata	00000002 OSTaskProfileEn
020258ec g     O .bss	00000004 OSTime
0202585c g     O .bss	00000004 isActiveFlagGrp
0202d2b8 g     O .bss	00000800 OSTaskIdleStk
02021480 g     F .text	00000034 _exit
0201aa3c g     F .text	0000015c OSMboxPostOpt
02004678 g     F .text	00000ea0 __kernel_rem_pio2f
0201fe50 g     F .text	0000012c alt_alarm_start
02019124 g     F .text	00000128 OSFlagNameGet
02002ad0 g     F .text	000000c0 detect_collide
0201eaf8 g     F .text	0000005c OSTimeGet
0201fb20 g     F .text	00000068 alt_up_accelerometer_spi_read
0201fb88 g     F .text	00000064 alt_up_accelerometer_spi_write
0200dd50 g     F .text	0000022c __smakebuf_r
02007c30 g     F .text	000000f4 strlen
02020b78 g     F .text	00000020 OSTaskSwHook
020205e8 g     F .text	00000154 open
0202dab8 g     O .bss	00000b40 OSEventTbl
020068f0 g     F .text	000000dc .hidden __gedf2
0202e5f8 g     O .bss	00000510 OSTCBTbl
0201ce60 g     F .text	00000100 OSSemSet
02023b00 g     O .rwdata	00000004 __wctomb
02011cec g     F .text	0000013c __sprint_r
020201f4 g     F .text	00000034 alt_icache_flush_all
02005ab4 g     F .text	00000164 floorf
02025860 g     O .bss	00000004 y_axis
02023b9c g     O .rwdata	00000004 alt_priority_mask
0201c688 g     F .text	00000240 OSSemDel
020258f0 g     O .bss	00000004 OSFlagFreeList
02002398 g     F .text	00000290 task3
02023b34 g     O .rwdata	00000002 OSEventNameSize
0201a34c g     F .text	00000240 OSMboxDel
02007e14 g     F .text	00000050 __vfprintf_internal
020258f4 g     O .bss	00000001 OSStatRdy
0202eb08 g     O .bss	00000054 OSTCBPrioTbl
02013da4 g     F .text	00000064 _wctomb_r
02016618 g     F .text	000000c4 __env_lock
02023b7a g     O .rwdata	00000002 OSTaskSwHookEn
020151dc g     F .text	000008fc .hidden __subdf3
0200f7cc g     F .text	000000ec __lo0bits
02023ba0 g     O .rwdata	00000008 alt_alarm_list
02023b42 g     O .rwdata	00000002 OSFlagWidth
020200a4 g     F .text	00000060 _do_ctors
02013ccc g     F .text	000000d8 wcrtomb
02015d18 g     F .text	000000d0 close
020258a0 g     O .bss	00000004 alt_envsem
020258f8 g     O .bss	00000004 OSIdleCtrRun
020177dc g     F .text	00000020 OSVersion
02023b8c g     O .rwdata	00000002 OSTmrCfgWheelSize
02016048 g     F .text	00000084 alt_load
0201e65c g     F .text	00000070 OS_TaskStkClr
02023b66 g     O .rwdata	00000002 OSTaskCreateEn
02017dcc g     F .text	00000068 OS_EventWaitListInit
02013840 g     F .text	00000068 fputwc
02020c18 g     F .text	00000020 OSTaskIdleHook
0200cbe8 g     F .text	00000020 __sinit_lock_acquire
0200f41c g     F .text	00000194 __multadd
0201e354 g     F .text	000001e4 OSTaskSuspend
0200f3a0 g     F .text	0000007c _Bfree
02003798 g     F .text	00000414 __ieee754_atan2f
02018474 g     F .text	0000005c OS_TaskIdle
02023b92 g     O .rwdata	00000002 OSTmrTblSize
0201c2fc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409214 	ori	at,at,584
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d40 	call	20001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	20171f00 	call	20171f0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001526 	beq	r2,zero,2000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 200013c:	008080f4 	movhi	r2,515
 2000140:	10bad704 	addi	r2,r2,-5284
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080f4 	movhi	r2,515
 2000158:	10bad704 	addi	r2,r2,-5284
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	e17ffd17 	ldw	r5,-12(fp)
 2000174:	1009883a 	mov	r4,r2
 2000178:	183ee83a 	callr	r3
#endif
        break;
 200017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000180:	0005313a 	rdctl	r2,ipending
 2000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000188:	e0bfff17 	ldw	r2,-4(fp)
 200018c:	00000706 	br	20001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 2000190:	e0bffc17 	ldw	r2,-16(fp)
 2000194:	1085883a 	add	r2,r2,r2
 2000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 200019c:	e0bffd17 	ldw	r2,-12(fp)
 20001a0:	10800044 	addi	r2,r2,1
 20001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a8:	003fe006 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001b0:	e0bffb17 	ldw	r2,-20(fp)
 20001b4:	103fda1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b8:	201723c0 	call	201723c <OSIntExit>
}
 20001bc:	0001883a 	nop
 20001c0:	e037883a 	mov	sp,fp
 20001c4:	dfc00117 	ldw	ra,4(sp)
 20001c8:	df000017 	ldw	fp,0(sp)
 20001cc:	dec00204 	addi	sp,sp,8
 20001d0:	f800283a 	ret

020001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d4:	defffb04 	addi	sp,sp,-20
 20001d8:	dfc00415 	stw	ra,16(sp)
 20001dc:	df000315 	stw	fp,12(sp)
 20001e0:	df000304 	addi	fp,sp,12
 20001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e8:	000531fa 	rdctl	r2,exception
 20001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001f0:	e0bffd17 	ldw	r2,-12(fp)
 20001f4:	10801f0c 	andi	r2,r2,124
 20001f8:	1004d0ba 	srli	r2,r2,2
 20001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 2000200:	0005333a 	rdctl	r2,badaddr
 2000204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000208:	d0a7b517 	ldw	r2,-24876(gp)
 200020c:	10000726 	beq	r2,zero,200022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 2000210:	d0a7b517 	ldw	r2,-24876(gp)
 2000214:	e0fffd17 	ldw	r3,-12(fp)
 2000218:	e1bffe17 	ldw	r6,-8(fp)
 200021c:	e17fff17 	ldw	r5,-4(fp)
 2000220:	1809883a 	mov	r4,r3
 2000224:	103ee83a 	callr	r2
 2000228:	00000206 	br	2000234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 200022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000230:	0005883a 	mov	r2,zero
}
 2000234:	e037883a 	mov	sp,fp
 2000238:	dfc00117 	ldw	ra,4(sp)
 200023c:	df000017 	ldw	fp,0(sp)
 2000240:	dec00204 	addi	sp,sp,8
 2000244:	f800283a 	ret

Disassembly of section .text:

02000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 200024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 2000250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000254:	00bffd16 	blt	zero,r2,200024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000258:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 200025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000260:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000264:	d6ae8d14 	ori	gp,gp,47668
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000268:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 200026c:	10960c14 	ori	r2,r2,22576

    movhi r3, %hi(__bss_end)
 2000270:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 2000274:	18fb1714 	ori	r3,r3,60508

    beq r2, r3, 1f
 2000278:	10c00326 	beq	r2,r3,2000288 <_start+0x40>

0:
    stw zero, (r2)
 200027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000284:	10fffd36 	bltu	r2,r3,200027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000288:	20160480 	call	2016048 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 200028c:	20161dc0 	call	20161dc <alt_main>

02000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000290:	003fff06 	br	2000290 <alt_after_alt_main>

02000294 <task1>:


/* Prints "Hello World" and sleeps for three seconds */

void task1(void* pdata)
{
 2000294:	deffeb04 	addi	sp,sp,-84
 2000298:	dfc01415 	stw	ra,80(sp)
 200029c:	df001315 	stw	fp,76(sp)
 20002a0:	df001304 	addi	fp,sp,76
 20002a4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 20002a8:	008000b4 	movhi	r2,2
 20002ac:	e0bff415 	stw	r2,-48(fp)
	int count_old = 0;
 20002b0:	e03ff515 	stw	zero,-44(fp)
	int count = 0;
 20002b4:	e03fee15 	stw	zero,-72(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 20002b8:	e03ff315 	stw	zero,-52(fp)

	while (1)
	{
		printf("wait for isActive\n");
 20002bc:	010080b4 	movhi	r4,514
 20002c0:	21053404 	addi	r4,r4,5328
 20002c4:	2007bf80 	call	2007bf8 <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002c8:	d0e78a17 	ldw	r3,-25048(gp)
 20002cc:	e0bffc04 	addi	r2,fp,-16
 20002d0:	d8800015 	stw	r2,0(sp)
 20002d4:	000f883a 	mov	r7,zero
 20002d8:	01802084 	movi	r6,130
 20002dc:	01400044 	movi	r5,1
 20002e0:	1809883a 	mov	r4,r3
 20002e4:	20193980 	call	2019398 <OSFlagPend>

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20002e8:	00004c06 	br	200041c <task1+0x188>
		{
			count_old = count;
 20002ec:	e0bfee17 	ldw	r2,-72(fp)
 20002f0:	e0bff515 	stw	r2,-44(fp)
			count = IORD(MTL_controller,10); // récupère le nombre de doigts présent sur l'écran
 20002f4:	e0bff417 	ldw	r2,-48(fp)
 20002f8:	10800a04 	addi	r2,r2,40
 20002fc:	10800037 	ldwio	r2,0(r2)
 2000300:	e0bfee15 	stw	r2,-72(fp)
			int pos1 = IORD(MTL_controller,11);
 2000304:	e0bff417 	ldw	r2,-48(fp)
 2000308:	10800b04 	addi	r2,r2,44
 200030c:	10800037 	ldwio	r2,0(r2)
 2000310:	e0bff615 	stw	r2,-40(fp)
			int pos2 = IORD(MTL_controller,12);
 2000314:	e0bff417 	ldw	r2,-48(fp)
 2000318:	10800c04 	addi	r2,r2,48
 200031c:	10800037 	ldwio	r2,0(r2)
 2000320:	e0bff715 	stw	r2,-36(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 2000324:	e0bff517 	ldw	r2,-44(fp)
 2000328:	10800058 	cmpnei	r2,r2,1
 200032c:	1000121e 	bne	r2,zero,2000378 <task1+0xe4>
 2000330:	e0bfee17 	ldw	r2,-72(fp)
 2000334:	10800098 	cmpnei	r2,r2,2
 2000338:	10000f1e 	bne	r2,zero,2000378 <task1+0xe4>
			{
				printf("start gesture\n");
 200033c:	010080b4 	movhi	r4,514
 2000340:	21053904 	addi	r4,r4,5348
 2000344:	2007bf80 	call	2007bf8 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000348:	e0bff617 	ldw	r2,-40(fp)
 200034c:	1080ffcc 	andi	r2,r2,1023
 2000350:	e0bfef15 	stw	r2,-68(fp)
				y1_gesture_start = pos1 >> 10;
 2000354:	e0bff617 	ldw	r2,-40(fp)
 2000358:	1005d2ba 	srai	r2,r2,10
 200035c:	e0bff115 	stw	r2,-60(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 2000360:	e0bff717 	ldw	r2,-36(fp)
 2000364:	1080ffcc 	andi	r2,r2,1023
 2000368:	e0bff815 	stw	r2,-32(fp)
				y2_gesture_start = pos2 >> 10;
 200036c:	e0bff717 	ldw	r2,-36(fp)
 2000370:	1005d2ba 	srai	r2,r2,10
 2000374:	e0bff915 	stw	r2,-28(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000378:	e0bff517 	ldw	r2,-44(fp)
 200037c:	10800098 	cmpnei	r2,r2,2
 2000380:	1000261e 	bne	r2,zero,200041c <task1+0x188>
 2000384:	e0bfee17 	ldw	r2,-72(fp)
 2000388:	10800058 	cmpnei	r2,r2,1
 200038c:	1000231e 	bne	r2,zero,200041c <task1+0x188>
			{
				printf("stop gesture\n");
 2000390:	010080b4 	movhi	r4,514
 2000394:	21053d04 	addi	r4,r4,5364
 2000398:	2007bf80 	call	2007bf8 <puts>
			//	printf("Hello\n");

				x1_gesture_stop = pos1 & 0x0003FF;
 200039c:	e0bff617 	ldw	r2,-40(fp)
 20003a0:	1080ffcc 	andi	r2,r2,1023
 20003a4:	e0bffa15 	stw	r2,-24(fp)
				y1_gesture_stop = pos1 >> 10;
 20003a8:	e0bff617 	ldw	r2,-40(fp)
 20003ac:	1005d2ba 	srai	r2,r2,10
 20003b0:	e0bffb15 	stw	r2,-20(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 20003b4:	e0bff717 	ldw	r2,-36(fp)
 20003b8:	1080ffcc 	andi	r2,r2,1023
 20003bc:	e0bff015 	stw	r2,-64(fp)
				y2_gesture_stop = pos2 >> 10;
 20003c0:	e0bff717 	ldw	r2,-36(fp)
 20003c4:	1005d2ba 	srai	r2,r2,10
 20003c8:	e0bff215 	stw	r2,-56(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003cc:	e0bfef17 	ldw	r2,-68(fp)
 20003d0:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003d4:	e0fffa17 	ldw	r3,-24(fp)
 20003d8:	18800e16 	blt	r3,r2,2000414 <task1+0x180>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003dc:	e0bfef17 	ldw	r2,-68(fp)
 20003e0:	10c00784 	addi	r3,r2,30
 20003e4:	e0bffa17 	ldw	r2,-24(fp)
 20003e8:	18800a16 	blt	r3,r2,2000414 <task1+0x180>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003ec:	e0bff117 	ldw	r2,-60(fp)
 20003f0:	10bff884 	addi	r2,r2,-30
 20003f4:	e0fffb17 	ldw	r3,-20(fp)
 20003f8:	18800616 	blt	r3,r2,2000414 <task1+0x180>
 20003fc:	e0bff117 	ldw	r2,-60(fp)
 2000400:	10c00784 	addi	r3,r2,30
 2000404:	e0bffb17 	ldw	r2,-20(fp)
 2000408:	18800216 	blt	r3,r2,2000414 <task1+0x180>
 200040c:	00800044 	movi	r2,1
 2000410:	00000106 	br	2000418 <task1+0x184>
 2000414:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 2000418:	e0bff315 	stw	r2,-52(fp)
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 200041c:	e0bff317 	ldw	r2,-52(fp)
 2000420:	103fb226 	beq	r2,zero,20002ec <task1+0x58>
			//*(MTL_controller + 5) = (y1_gesture_start << 10) + x1_gesture_start;
			//*(MTL_controller + 6) = (y2_gesture_start << 10) + x2_gesture_start;
			//*(MTL_controller + 7) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}
		//printf("Hello");
		int x_dir = (x2_gesture_stop - x1_gesture_start);
 2000424:	e0fff017 	ldw	r3,-64(fp)
 2000428:	e0bfef17 	ldw	r2,-68(fp)
 200042c:	1885c83a 	sub	r2,r3,r2
 2000430:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 2000434:	e0fff217 	ldw	r3,-56(fp)
 2000438:	e0bff117 	ldw	r2,-60(fp)
 200043c:	1885c83a 	sub	r2,r3,r2
 2000440:	e0bffe15 	stw	r2,-8(fp)
		printf("Send value : (%d, %d)\n", x_dir, y_dir);
 2000444:	e0bffd17 	ldw	r2,-12(fp)
 2000448:	e0fffe17 	ldw	r3,-8(fp)
 200044c:	180d883a 	mov	r6,r3
 2000450:	100b883a 	mov	r5,r2
 2000454:	010080b4 	movhi	r4,514
 2000458:	21054104 	addi	r4,r4,5380
 200045c:	2007a780 	call	2007a78 <printf>
		OSMboxPost(MailBox1, &x_dir);
 2000460:	d0a78917 	ldw	r2,-25052(gp)
 2000464:	e0fffd04 	addi	r3,fp,-12
 2000468:	180b883a 	mov	r5,r3
 200046c:	1009883a 	mov	r4,r2
 2000470:	201a92c0 	call	201a92c <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 2000474:	d0a78517 	ldw	r2,-25068(gp)
 2000478:	e0fffe04 	addi	r3,fp,-8
 200047c:	180b883a 	mov	r5,r3
 2000480:	1009883a 	mov	r4,r2
 2000484:	201a92c0 	call	201a92c <OSMboxPost>
		gesture_detected = 0;
 2000488:	e03ff315 	stw	zero,-52(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 200048c:	01c07d04 	movi	r7,500
 2000490:	000d883a 	mov	r6,zero
 2000494:	000b883a 	mov	r5,zero
 2000498:	0009883a 	mov	r4,zero
 200049c:	201e7d00 	call	201e7d0 <OSTimeDlyHMSM>
	}
 20004a0:	003f8606 	br	20002bc <task1+0x28>

020004a4 <task2>:
}

void task2(void* pdata)
{
 20004a4:	deff3c04 	addi	sp,sp,-784
 20004a8:	dfc0c315 	stw	ra,780(sp)
 20004ac:	df00c215 	stw	fp,776(sp)
 20004b0:	dd40c115 	stw	r21,772(sp)
 20004b4:	dd00c015 	stw	r20,768(sp)
 20004b8:	dcc0bf15 	stw	r19,764(sp)
 20004bc:	dc80be15 	stw	r18,760(sp)
 20004c0:	dc40bd15 	stw	r17,756(sp)
 20004c4:	dc00bc15 	stw	r16,752(sp)
 20004c8:	df00c204 	addi	fp,sp,776
 20004cc:	e13ff915 	stw	r4,-28(fp)

  INT8U err;
  INT8U opt_task2;
  volatile int * display = (int *) MTL_IP_BASE;
 20004d0:	008000b4 	movhi	r2,2
 20004d4:	e0bf4415 	stw	r2,-752(fp)
  alt_up_accelerometer_spi_read_y_axis(accel_spi,  &y_prev);
 20004d8:	d0a77f17 	ldw	r2,-25092(gp)
 20004dc:	d1678404 	addi	r5,gp,-25072
 20004e0:	1009883a 	mov	r4,r2
 20004e4:	201fcb80 	call	201fcb8 <alt_up_accelerometer_spi_read_y_axis>
  alt_up_accelerometer_spi_read_x_axis(accel_spi,  &x_prev);
 20004e8:	d0a77f17 	ldw	r2,-25092(gp)
 20004ec:	d1678704 	addi	r5,gp,-25060
 20004f0:	1009883a 	mov	r4,r2
 20004f4:	201fbec0 	call	201fbec <alt_up_accelerometer_spi_read_x_axis>



  float ball[10][2] =  {{266.0, 263.0}, // white
 20004f8:	008080b4 	movhi	r2,514
 20004fc:	10856004 	addi	r2,r2,5504
 2000500:	e0ff4d04 	addi	r3,fp,-716
 2000504:	1009883a 	mov	r4,r2
 2000508:	00801404 	movi	r2,80
 200050c:	100d883a 	mov	r6,r2
 2000510:	200b883a 	mov	r5,r4
 2000514:	1809883a 	mov	r4,r3
 2000518:	20076c80 	call	20076c8 <memcpy>
		  	  	  	  	{649.0, 222.0},
		  	  	  	  	{649.0, 249.0},
		  	  	  	  	{649.0, 277.0},
		  	  	  	  	{649.0, 304.0}};

  IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 200051c:	e0bf4417 	ldw	r2,-752(fp)
 2000520:	10800104 	addi	r2,r2,4
 2000524:	e0ff4e17 	ldw	r3,-712(fp)
 2000528:	1807fe72 	custom	249,r3,r3,zero
 200052c:	180892ba 	slli	r4,r3,10
 2000530:	e0ff4d17 	ldw	r3,-716(fp)
 2000534:	1807fe72 	custom	249,r3,r3,zero
 2000538:	20c7883a 	add	r3,r4,r3
 200053c:	10c00035 	stwio	r3,0(r2)
  IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 2000540:	e0bf4417 	ldw	r2,-752(fp)
 2000544:	10800204 	addi	r2,r2,8
 2000548:	e0ff5017 	ldw	r3,-704(fp)
 200054c:	1807fe72 	custom	249,r3,r3,zero
 2000550:	180892ba 	slli	r4,r3,10
 2000554:	e0ff4f17 	ldw	r3,-708(fp)
 2000558:	1807fe72 	custom	249,r3,r3,zero
 200055c:	20c7883a 	add	r3,r4,r3
 2000560:	10c00035 	stwio	r3,0(r2)
  IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 2000564:	e0bf4417 	ldw	r2,-752(fp)
 2000568:	10800304 	addi	r2,r2,12
 200056c:	e0ff5217 	ldw	r3,-696(fp)
 2000570:	1807fe72 	custom	249,r3,r3,zero
 2000574:	180892ba 	slli	r4,r3,10
 2000578:	e0ff5117 	ldw	r3,-700(fp)
 200057c:	1807fe72 	custom	249,r3,r3,zero
 2000580:	20c7883a 	add	r3,r4,r3
 2000584:	10c00035 	stwio	r3,0(r2)
  IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 2000588:	e0bf4417 	ldw	r2,-752(fp)
 200058c:	10800404 	addi	r2,r2,16
 2000590:	e0ff5417 	ldw	r3,-688(fp)
 2000594:	1807fe72 	custom	249,r3,r3,zero
 2000598:	180892ba 	slli	r4,r3,10
 200059c:	e0ff5317 	ldw	r3,-692(fp)
 20005a0:	1807fe72 	custom	249,r3,r3,zero
 20005a4:	20c7883a 	add	r3,r4,r3
 20005a8:	10c00035 	stwio	r3,0(r2)
  IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 20005ac:	e0bf4417 	ldw	r2,-752(fp)
 20005b0:	10800504 	addi	r2,r2,20
 20005b4:	e0ff5617 	ldw	r3,-680(fp)
 20005b8:	1807fe72 	custom	249,r3,r3,zero
 20005bc:	180892ba 	slli	r4,r3,10
 20005c0:	e0ff5517 	ldw	r3,-684(fp)
 20005c4:	1807fe72 	custom	249,r3,r3,zero
 20005c8:	20c7883a 	add	r3,r4,r3
 20005cc:	10c00035 	stwio	r3,0(r2)
  IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 20005d0:	e0bf4417 	ldw	r2,-752(fp)
 20005d4:	10800604 	addi	r2,r2,24
 20005d8:	e0ff5817 	ldw	r3,-672(fp)
 20005dc:	1807fe72 	custom	249,r3,r3,zero
 20005e0:	180892ba 	slli	r4,r3,10
 20005e4:	e0ff5717 	ldw	r3,-676(fp)
 20005e8:	1807fe72 	custom	249,r3,r3,zero
 20005ec:	20c7883a 	add	r3,r4,r3
 20005f0:	10c00035 	stwio	r3,0(r2)
  IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 20005f4:	e0bf4417 	ldw	r2,-752(fp)
 20005f8:	10800704 	addi	r2,r2,28
 20005fc:	e0ff5a17 	ldw	r3,-664(fp)
 2000600:	1807fe72 	custom	249,r3,r3,zero
 2000604:	180892ba 	slli	r4,r3,10
 2000608:	e0ff5917 	ldw	r3,-668(fp)
 200060c:	1807fe72 	custom	249,r3,r3,zero
 2000610:	20c7883a 	add	r3,r4,r3
 2000614:	10c00035 	stwio	r3,0(r2)
  IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 2000618:	e0bf4417 	ldw	r2,-752(fp)
 200061c:	10800804 	addi	r2,r2,32
 2000620:	e0ff5c17 	ldw	r3,-656(fp)
 2000624:	1807fe72 	custom	249,r3,r3,zero
 2000628:	180892ba 	slli	r4,r3,10
 200062c:	e0ff5b17 	ldw	r3,-660(fp)
 2000630:	1807fe72 	custom	249,r3,r3,zero
 2000634:	20c7883a 	add	r3,r4,r3
 2000638:	10c00035 	stwio	r3,0(r2)
  IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 200063c:	e0bf4417 	ldw	r2,-752(fp)
 2000640:	10800904 	addi	r2,r2,36
 2000644:	e0ff5e17 	ldw	r3,-648(fp)
 2000648:	1807fe72 	custom	249,r3,r3,zero
 200064c:	180892ba 	slli	r4,r3,10
 2000650:	e0ff5d17 	ldw	r3,-652(fp)
 2000654:	1807fe72 	custom	249,r3,r3,zero
 2000658:	20c7883a 	add	r3,r4,r3
 200065c:	10c00035 	stwio	r3,0(r2)
  IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 2000660:	e0bf4417 	ldw	r2,-752(fp)
 2000664:	10800a04 	addi	r2,r2,40
 2000668:	e0ff6017 	ldw	r3,-640(fp)
 200066c:	1807fe72 	custom	249,r3,r3,zero
 2000670:	180892ba 	slli	r4,r3,10
 2000674:	e0ff5f17 	ldw	r3,-644(fp)
 2000678:	1807fe72 	custom	249,r3,r3,zero
 200067c:	20c7883a 	add	r3,r4,r3
 2000680:	10c00035 	stwio	r3,0(r2)

  int collision[45][2]={{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
 2000684:	e0bf6104 	addi	r2,fp,-636
 2000688:	00c05a04 	movi	r3,360
 200068c:	180d883a 	mov	r6,r3
 2000690:	000b883a 	mov	r5,zero
 2000694:	1009883a 	mov	r4,r2
 2000698:	20078500 	call	2007850 <memset>
  	  	  	  	        {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  	  	  	         	{0,0},{0,0},{0,0},{0,0},{0,0}};

  while (1)
  {
   alt_up_accelerometer_spi_read_y_axis(accel_spi,  &y_axis);
 200069c:	d0a77f17 	ldw	r2,-25092(gp)
 20006a0:	d1678b04 	addi	r5,gp,-25044
 20006a4:	1009883a 	mov	r4,r2
 20006a8:	201fcb80 	call	201fcb8 <alt_up_accelerometer_spi_read_y_axis>
   alt_up_accelerometer_spi_read_x_axis(accel_spi,  &x_axis);
 20006ac:	d0a77f17 	ldw	r2,-25092(gp)
 20006b0:	d1678604 	addi	r5,gp,-25064
 20006b4:	1009883a 	mov	r4,r2
 20006b8:	201fbec0 	call	201fbec <alt_up_accelerometer_spi_read_x_axis>

   opt_task2= OS_FLAG_SET;
 20006bc:	00800044 	movi	r2,1
 20006c0:	e0bf4505 	stb	r2,-748(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 20006c4:	d0a78217 	ldw	r2,-25080(gp)
 20006c8:	e0ff4503 	ldbu	r3,-748(fp)
 20006cc:	e13f4c04 	addi	r4,fp,-720
 20006d0:	200f883a 	mov	r7,r4
 20006d4:	180d883a 	mov	r6,r3
 20006d8:	01400044 	movi	r5,1
 20006dc:	1009883a 	mov	r4,r2
 20006e0:	20199b00 	call	20199b0 <OSFlagPost>
   int *vector_x = OSMboxPend(MailBox4,0,&err);
 20006e4:	d0a78817 	ldw	r2,-25056(gp)
 20006e8:	e0ff4c04 	addi	r3,fp,-720
 20006ec:	180d883a 	mov	r6,r3
 20006f0:	000b883a 	mov	r5,zero
 20006f4:	1009883a 	mov	r4,r2
 20006f8:	201a58c0 	call	201a58c <OSMboxPend>
 20006fc:	e0bf4615 	stw	r2,-744(fp)
   int *vector_y = OSMboxPend(MailBox5,0,&err);
 2000700:	d0a78317 	ldw	r2,-25076(gp)
 2000704:	e0ff4c04 	addi	r3,fp,-720
 2000708:	180d883a 	mov	r6,r3
 200070c:	000b883a 	mov	r5,zero
 2000710:	1009883a 	mov	r4,r2
 2000714:	201a58c0 	call	201a58c <OSMboxPend>
 2000718:	e0bf4715 	stw	r2,-740(fp)

   float x = (float) *vector_x;
 200071c:	e0bf4617 	ldw	r2,-744(fp)
 2000720:	10800017 	ldw	r2,0(r2)
 2000724:	1005feb2 	custom	250,r2,r2,zero
 2000728:	e0bf4815 	stw	r2,-736(fp)
   float y = (float) *vector_y;
 200072c:	e0bf4717 	ldw	r2,-740(fp)
 2000730:	10800017 	ldw	r2,0(r2)
 2000734:	1005feb2 	custom	250,r2,r2,zero
 2000738:	e0bf4915 	stw	r2,-732(fp)

   float length = sqrtf(x*x + y*y);
 200073c:	e0ff4817 	ldw	r3,-736(fp)
 2000740:	e0bf4817 	ldw	r2,-736(fp)
 2000744:	1887ff32 	custom	252,r3,r3,r2
 2000748:	e13f4917 	ldw	r4,-732(fp)
 200074c:	e0bf4917 	ldw	r2,-732(fp)
 2000750:	2085ff32 	custom	252,r2,r4,r2
 2000754:	1885ff72 	custom	253,r2,r3,r2
 2000758:	1005fef2 	custom	251,r2,r2,zero
 200075c:	e0bf4a15 	stw	r2,-728(fp)
   float direction [] = {x/length, y/length};
 2000760:	e0ff4817 	ldw	r3,-736(fp)
 2000764:	e0bf4a17 	ldw	r2,-728(fp)
 2000768:	1885fff2 	custom	255,r2,r3,r2
 200076c:	e0bfbb15 	stw	r2,-276(fp)
 2000770:	e0ff4917 	ldw	r3,-732(fp)
 2000774:	e0bf4a17 	ldw	r2,-728(fp)
 2000778:	1885fff2 	custom	255,r2,r3,r2
 200077c:	e0bfbc15 	stw	r2,-272(fp)
   float speed = fmin(length / 1.2, 400.0);//*(x_axis*x_axis+y_axis*y_axis)/1000.0;
 2000780:	e13f4a17 	ldw	r4,-728(fp)
 2000784:	20071d80 	call	20071d8 <__extendsfdf2>
 2000788:	1011883a 	mov	r8,r2
 200078c:	1813883a 	mov	r9,r3
 2000790:	018cccf4 	movhi	r6,13107
 2000794:	318cccc4 	addi	r6,r6,13107
 2000798:	01cffcf4 	movhi	r7,16371
 200079c:	39ccccc4 	addi	r7,r7,13107
 20007a0:	4009883a 	mov	r4,r8
 20007a4:	480b883a 	mov	r5,r9
 20007a8:	2005f800 	call	2005f80 <__divdf3>
 20007ac:	1009883a 	mov	r4,r2
 20007b0:	180b883a 	mov	r5,r3
 20007b4:	2005883a 	mov	r2,r4
 20007b8:	2807883a 	mov	r3,r5
 20007bc:	000d883a 	mov	r6,zero
 20007c0:	01d01e74 	movhi	r7,16505
 20007c4:	1009883a 	mov	r4,r2
 20007c8:	180b883a 	mov	r5,r3
 20007cc:	20031c40 	call	20031c4 <fmin>
 20007d0:	100b883a 	mov	r5,r2
 20007d4:	180d883a 	mov	r6,r3
 20007d8:	2809883a 	mov	r4,r5
 20007dc:	300b883a 	mov	r5,r6
 20007e0:	20072e80 	call	20072e8 <__truncdfsf2>
 20007e4:	1007883a 	mov	r3,r2
 20007e8:	e0ff4315 	stw	r3,-756(fp)

   float velocity [10][2] = {{direction[0] * speed/80.0, direction[1] * speed/80.0},
 20007ec:	e0bfe504 	addi	r2,fp,-108
 20007f0:	00c01404 	movi	r3,80
 20007f4:	180d883a 	mov	r6,r3
 20007f8:	000b883a 	mov	r5,zero
 20007fc:	1009883a 	mov	r4,r2
 2000800:	20078500 	call	2007850 <memset>
 2000804:	e0ffbb17 	ldw	r3,-276(fp)
 2000808:	e0bf4317 	ldw	r2,-756(fp)
 200080c:	1887ff32 	custom	252,r3,r3,r2
 2000810:	0090a834 	movhi	r2,17056
 2000814:	1885fff2 	custom	255,r2,r3,r2
 2000818:	e0bfe515 	stw	r2,-108(fp)
 200081c:	e0ffbc17 	ldw	r3,-272(fp)
 2000820:	e0bf4317 	ldw	r2,-756(fp)
 2000824:	1887ff32 	custom	252,r3,r3,r2
 2000828:	0090a834 	movhi	r2,17056
 200082c:	1885fff2 	custom	255,r2,r3,r2
 2000830:	e0bfe615 	stw	r2,-104(fp)
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0}};

   printf("Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)\n",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);
 2000834:	e0bf4617 	ldw	r2,-744(fp)
 2000838:	15000017 	ldw	r20,0(r2)
 200083c:	e0bf4717 	ldw	r2,-740(fp)
 2000840:	15400017 	ldw	r21,0(r2)
 2000844:	e13f4317 	ldw	r4,-756(fp)
 2000848:	20071d80 	call	20071d8 <__extendsfdf2>
 200084c:	1025883a 	mov	r18,r2
 2000850:	1827883a 	mov	r19,r3
 2000854:	e0bfe517 	ldw	r2,-108(fp)
 2000858:	1009883a 	mov	r4,r2
 200085c:	20071d80 	call	20071d8 <__extendsfdf2>
 2000860:	1021883a 	mov	r16,r2
 2000864:	1823883a 	mov	r17,r3
 2000868:	e0bfe617 	ldw	r2,-104(fp)
 200086c:	1009883a 	mov	r4,r2
 2000870:	20071d80 	call	20071d8 <__extendsfdf2>
 2000874:	1009883a 	mov	r4,r2
 2000878:	180b883a 	mov	r5,r3
 200087c:	d9000315 	stw	r4,12(sp)
 2000880:	d9400415 	stw	r5,16(sp)
 2000884:	dc000115 	stw	r16,4(sp)
 2000888:	dc400215 	stw	r17,8(sp)
 200088c:	dcc00015 	stw	r19,0(sp)
 2000890:	900f883a 	mov	r7,r18
 2000894:	a80d883a 	mov	r6,r21
 2000898:	a00b883a 	mov	r5,r20
 200089c:	010080b4 	movhi	r4,514
 20008a0:	21054704 	addi	r4,r4,5404
 20008a4:	2007a780 	call	2007a78 <printf>

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
 20008a8:	e0bfbd04 	addi	r2,fp,-268
 20008ac:	00c02804 	movi	r3,160
 20008b0:	180d883a 	mov	r6,r3
 20008b4:	000b883a 	mov	r5,zero
 20008b8:	1009883a 	mov	r4,r2
 20008bc:	20078500 	call	2007850 <memset>

   while(speed >= 0.1)
 20008c0:	00069206 	br	200230c <task2+0x1e68>
   {
	   //Border Collide
	   alt_up_accelerometer_spi_read_y_axis(accel_spi,  &y_axis);
 20008c4:	d0a77f17 	ldw	r2,-25092(gp)
 20008c8:	d1678b04 	addi	r5,gp,-25044
 20008cc:	1009883a 	mov	r4,r2
 20008d0:	201fcb80 	call	201fcb8 <alt_up_accelerometer_spi_read_y_axis>
       alt_up_accelerometer_spi_read_x_axis(accel_spi,  &x_axis);
 20008d4:	d0a77f17 	ldw	r2,-25092(gp)
 20008d8:	d1678604 	addi	r5,gp,-25064
 20008dc:	1009883a 	mov	r4,r2
 20008e0:	201fbec0 	call	201fbec <alt_up_accelerometer_spi_read_x_axis>
       if (fabsf(a)<0.1){
    	   printf("Raspberry at rest\n");
       	}*/


	   borderCollide(ball[0], border_collision[0], velocity[0]);
 20008e4:	e13fe504 	addi	r4,fp,-108
 20008e8:	e0ffbd04 	addi	r3,fp,-268
 20008ec:	e0bf4d04 	addi	r2,fp,-716
 20008f0:	200d883a 	mov	r6,r4
 20008f4:	180b883a 	mov	r5,r3
 20008f8:	1009883a 	mov	r4,r2
 20008fc:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[1], border_collision[1], velocity[1]);
 2000900:	e0bfe504 	addi	r2,fp,-108
 2000904:	11000204 	addi	r4,r2,8
 2000908:	e0bfbd04 	addi	r2,fp,-268
 200090c:	10c00404 	addi	r3,r2,16
 2000910:	e0bf4d04 	addi	r2,fp,-716
 2000914:	10800204 	addi	r2,r2,8
 2000918:	200d883a 	mov	r6,r4
 200091c:	180b883a 	mov	r5,r3
 2000920:	1009883a 	mov	r4,r2
 2000924:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[2], border_collision[2], velocity[2]);
 2000928:	e0bfe504 	addi	r2,fp,-108
 200092c:	11000404 	addi	r4,r2,16
 2000930:	e0bfbd04 	addi	r2,fp,-268
 2000934:	10c00804 	addi	r3,r2,32
 2000938:	e0bf4d04 	addi	r2,fp,-716
 200093c:	10800404 	addi	r2,r2,16
 2000940:	200d883a 	mov	r6,r4
 2000944:	180b883a 	mov	r5,r3
 2000948:	1009883a 	mov	r4,r2
 200094c:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[3], border_collision[3], velocity[3]);
 2000950:	e0bfe504 	addi	r2,fp,-108
 2000954:	11000604 	addi	r4,r2,24
 2000958:	e0bfbd04 	addi	r2,fp,-268
 200095c:	10c00c04 	addi	r3,r2,48
 2000960:	e0bf4d04 	addi	r2,fp,-716
 2000964:	10800604 	addi	r2,r2,24
 2000968:	200d883a 	mov	r6,r4
 200096c:	180b883a 	mov	r5,r3
 2000970:	1009883a 	mov	r4,r2
 2000974:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[4], border_collision[4], velocity[4]);
 2000978:	e0bfe504 	addi	r2,fp,-108
 200097c:	11000804 	addi	r4,r2,32
 2000980:	e0bfbd04 	addi	r2,fp,-268
 2000984:	10c01004 	addi	r3,r2,64
 2000988:	e0bf4d04 	addi	r2,fp,-716
 200098c:	10800804 	addi	r2,r2,32
 2000990:	200d883a 	mov	r6,r4
 2000994:	180b883a 	mov	r5,r3
 2000998:	1009883a 	mov	r4,r2
 200099c:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[5], border_collision[5], velocity[5]);
 20009a0:	e0bfe504 	addi	r2,fp,-108
 20009a4:	11000a04 	addi	r4,r2,40
 20009a8:	e0bfbd04 	addi	r2,fp,-268
 20009ac:	10c01404 	addi	r3,r2,80
 20009b0:	e0bf4d04 	addi	r2,fp,-716
 20009b4:	10800a04 	addi	r2,r2,40
 20009b8:	200d883a 	mov	r6,r4
 20009bc:	180b883a 	mov	r5,r3
 20009c0:	1009883a 	mov	r4,r2
 20009c4:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[6], border_collision[6], velocity[6]);
 20009c8:	e0bfe504 	addi	r2,fp,-108
 20009cc:	11000c04 	addi	r4,r2,48
 20009d0:	e0bfbd04 	addi	r2,fp,-268
 20009d4:	10c01804 	addi	r3,r2,96
 20009d8:	e0bf4d04 	addi	r2,fp,-716
 20009dc:	10800c04 	addi	r2,r2,48
 20009e0:	200d883a 	mov	r6,r4
 20009e4:	180b883a 	mov	r5,r3
 20009e8:	1009883a 	mov	r4,r2
 20009ec:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[7], border_collision[7], velocity[7]);
 20009f0:	e0bfe504 	addi	r2,fp,-108
 20009f4:	11000e04 	addi	r4,r2,56
 20009f8:	e0bfbd04 	addi	r2,fp,-268
 20009fc:	10c01c04 	addi	r3,r2,112
 2000a00:	e0bf4d04 	addi	r2,fp,-716
 2000a04:	10800e04 	addi	r2,r2,56
 2000a08:	200d883a 	mov	r6,r4
 2000a0c:	180b883a 	mov	r5,r3
 2000a10:	1009883a 	mov	r4,r2
 2000a14:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[8], border_collision[8], velocity[8]);
 2000a18:	e0bfe504 	addi	r2,fp,-108
 2000a1c:	11001004 	addi	r4,r2,64
 2000a20:	e0bfbd04 	addi	r2,fp,-268
 2000a24:	10c02004 	addi	r3,r2,128
 2000a28:	e0bf4d04 	addi	r2,fp,-716
 2000a2c:	10801004 	addi	r2,r2,64
 2000a30:	200d883a 	mov	r6,r4
 2000a34:	180b883a 	mov	r5,r3
 2000a38:	1009883a 	mov	r4,r2
 2000a3c:	20029140 	call	2002914 <borderCollide>
       borderCollide(ball[9], border_collision[9], velocity[9]);
 2000a40:	e0bfe504 	addi	r2,fp,-108
 2000a44:	11001204 	addi	r4,r2,72
 2000a48:	e0bfbd04 	addi	r2,fp,-268
 2000a4c:	10c02404 	addi	r3,r2,144
 2000a50:	e0bf4d04 	addi	r2,fp,-716
 2000a54:	10801204 	addi	r2,r2,72
 2000a58:	200d883a 	mov	r6,r4
 2000a5c:	180b883a 	mov	r5,r3
 2000a60:	1009883a 	mov	r4,r2
 2000a64:	20029140 	call	2002914 <borderCollide>

       //Move the ball
       int zero =0;
 2000a68:	e03f4b15 	stw	zero,-724(fp)
       moveBall(ball[0], velocity[0],x_axis,y_axis);
 2000a6c:	d1278617 	ldw	r4,-25064(gp)
 2000a70:	d1678b17 	ldw	r5,-25044(gp)
 2000a74:	e0ffe504 	addi	r3,fp,-108
 2000a78:	e0bf4d04 	addi	r2,fp,-716
 2000a7c:	280f883a 	mov	r7,r5
 2000a80:	200d883a 	mov	r6,r4
 2000a84:	180b883a 	mov	r5,r3
 2000a88:	1009883a 	mov	r4,r2
 2000a8c:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[1], velocity[1],zero,zero);
 2000a90:	e0bfe504 	addi	r2,fp,-108
 2000a94:	10c00204 	addi	r3,r2,8
 2000a98:	e0bf4d04 	addi	r2,fp,-716
 2000a9c:	10800204 	addi	r2,r2,8
 2000aa0:	e1ff4b17 	ldw	r7,-724(fp)
 2000aa4:	e1bf4b17 	ldw	r6,-724(fp)
 2000aa8:	180b883a 	mov	r5,r3
 2000aac:	1009883a 	mov	r4,r2
 2000ab0:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[2], velocity[2],zero,zero);
 2000ab4:	e0bfe504 	addi	r2,fp,-108
 2000ab8:	10c00404 	addi	r3,r2,16
 2000abc:	e0bf4d04 	addi	r2,fp,-716
 2000ac0:	10800404 	addi	r2,r2,16
 2000ac4:	e1ff4b17 	ldw	r7,-724(fp)
 2000ac8:	e1bf4b17 	ldw	r6,-724(fp)
 2000acc:	180b883a 	mov	r5,r3
 2000ad0:	1009883a 	mov	r4,r2
 2000ad4:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[3], velocity[3],zero,zero);
 2000ad8:	e0bfe504 	addi	r2,fp,-108
 2000adc:	10c00604 	addi	r3,r2,24
 2000ae0:	e0bf4d04 	addi	r2,fp,-716
 2000ae4:	10800604 	addi	r2,r2,24
 2000ae8:	e1ff4b17 	ldw	r7,-724(fp)
 2000aec:	e1bf4b17 	ldw	r6,-724(fp)
 2000af0:	180b883a 	mov	r5,r3
 2000af4:	1009883a 	mov	r4,r2
 2000af8:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[4], velocity[4],zero,zero);
 2000afc:	e0bfe504 	addi	r2,fp,-108
 2000b00:	10c00804 	addi	r3,r2,32
 2000b04:	e0bf4d04 	addi	r2,fp,-716
 2000b08:	10800804 	addi	r2,r2,32
 2000b0c:	e1ff4b17 	ldw	r7,-724(fp)
 2000b10:	e1bf4b17 	ldw	r6,-724(fp)
 2000b14:	180b883a 	mov	r5,r3
 2000b18:	1009883a 	mov	r4,r2
 2000b1c:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[5], velocity[5],zero,zero);
 2000b20:	e0bfe504 	addi	r2,fp,-108
 2000b24:	10c00a04 	addi	r3,r2,40
 2000b28:	e0bf4d04 	addi	r2,fp,-716
 2000b2c:	10800a04 	addi	r2,r2,40
 2000b30:	e1ff4b17 	ldw	r7,-724(fp)
 2000b34:	e1bf4b17 	ldw	r6,-724(fp)
 2000b38:	180b883a 	mov	r5,r3
 2000b3c:	1009883a 	mov	r4,r2
 2000b40:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[6], velocity[6],zero,zero);
 2000b44:	e0bfe504 	addi	r2,fp,-108
 2000b48:	10c00c04 	addi	r3,r2,48
 2000b4c:	e0bf4d04 	addi	r2,fp,-716
 2000b50:	10800c04 	addi	r2,r2,48
 2000b54:	e1ff4b17 	ldw	r7,-724(fp)
 2000b58:	e1bf4b17 	ldw	r6,-724(fp)
 2000b5c:	180b883a 	mov	r5,r3
 2000b60:	1009883a 	mov	r4,r2
 2000b64:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[7], velocity[7],zero,zero);
 2000b68:	e0bfe504 	addi	r2,fp,-108
 2000b6c:	10c00e04 	addi	r3,r2,56
 2000b70:	e0bf4d04 	addi	r2,fp,-716
 2000b74:	10800e04 	addi	r2,r2,56
 2000b78:	e1ff4b17 	ldw	r7,-724(fp)
 2000b7c:	e1bf4b17 	ldw	r6,-724(fp)
 2000b80:	180b883a 	mov	r5,r3
 2000b84:	1009883a 	mov	r4,r2
 2000b88:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[8], velocity[8],zero,zero);
 2000b8c:	e0bfe504 	addi	r2,fp,-108
 2000b90:	10c01004 	addi	r3,r2,64
 2000b94:	e0bf4d04 	addi	r2,fp,-716
 2000b98:	10801004 	addi	r2,r2,64
 2000b9c:	e1ff4b17 	ldw	r7,-724(fp)
 2000ba0:	e1bf4b17 	ldw	r6,-724(fp)
 2000ba4:	180b883a 	mov	r5,r3
 2000ba8:	1009883a 	mov	r4,r2
 2000bac:	2002f180 	call	2002f18 <moveBall>
       moveBall(ball[9], velocity[9],zero,zero);
 2000bb0:	e0bfe504 	addi	r2,fp,-108
 2000bb4:	10c01204 	addi	r3,r2,72
 2000bb8:	e0bf4d04 	addi	r2,fp,-716
 2000bbc:	10801204 	addi	r2,r2,72
 2000bc0:	e1ff4b17 	ldw	r7,-724(fp)
 2000bc4:	e1bf4b17 	ldw	r6,-724(fp)
 2000bc8:	180b883a 	mov	r5,r3
 2000bcc:	1009883a 	mov	r4,r2
 2000bd0:	2002f180 	call	2002f18 <moveBall>

       //Whole collision

       whole_collide(ball[1],velocity[1]);
 2000bd4:	e0bfe504 	addi	r2,fp,-108
 2000bd8:	10c00204 	addi	r3,r2,8
 2000bdc:	e0bf4d04 	addi	r2,fp,-716
 2000be0:	10800204 	addi	r2,r2,8
 2000be4:	180b883a 	mov	r5,r3
 2000be8:	1009883a 	mov	r4,r2
 2000bec:	20027a00 	call	20027a0 <whole_collide>
       whole_collide(ball[2],velocity[2]);
 2000bf0:	e0bfe504 	addi	r2,fp,-108
 2000bf4:	10c00404 	addi	r3,r2,16
 2000bf8:	e0bf4d04 	addi	r2,fp,-716
 2000bfc:	10800404 	addi	r2,r2,16
 2000c00:	180b883a 	mov	r5,r3
 2000c04:	1009883a 	mov	r4,r2
 2000c08:	20027a00 	call	20027a0 <whole_collide>
       whole_collide(ball[3],velocity[3]);
 2000c0c:	e0bfe504 	addi	r2,fp,-108
 2000c10:	10c00604 	addi	r3,r2,24
 2000c14:	e0bf4d04 	addi	r2,fp,-716
 2000c18:	10800604 	addi	r2,r2,24
 2000c1c:	180b883a 	mov	r5,r3
 2000c20:	1009883a 	mov	r4,r2
 2000c24:	20027a00 	call	20027a0 <whole_collide>
       whole_collide(ball[4],velocity[4]);
 2000c28:	e0bfe504 	addi	r2,fp,-108
 2000c2c:	10c00804 	addi	r3,r2,32
 2000c30:	e0bf4d04 	addi	r2,fp,-716
 2000c34:	10800804 	addi	r2,r2,32
 2000c38:	180b883a 	mov	r5,r3
 2000c3c:	1009883a 	mov	r4,r2
 2000c40:	20027a00 	call	20027a0 <whole_collide>
       whole_collide(ball[5],velocity[5]);
 2000c44:	e0bfe504 	addi	r2,fp,-108
 2000c48:	10c00a04 	addi	r3,r2,40
 2000c4c:	e0bf4d04 	addi	r2,fp,-716
 2000c50:	10800a04 	addi	r2,r2,40
 2000c54:	180b883a 	mov	r5,r3
 2000c58:	1009883a 	mov	r4,r2
 2000c5c:	20027a00 	call	20027a0 <whole_collide>
       whole_collide(ball[6],velocity[6]);
 2000c60:	e0bfe504 	addi	r2,fp,-108
 2000c64:	10c00c04 	addi	r3,r2,48
 2000c68:	e0bf4d04 	addi	r2,fp,-716
 2000c6c:	10800c04 	addi	r2,r2,48
 2000c70:	180b883a 	mov	r5,r3
 2000c74:	1009883a 	mov	r4,r2
 2000c78:	20027a00 	call	20027a0 <whole_collide>
       whole_collide(ball[7],velocity[7]);
 2000c7c:	e0bfe504 	addi	r2,fp,-108
 2000c80:	10c00e04 	addi	r3,r2,56
 2000c84:	e0bf4d04 	addi	r2,fp,-716
 2000c88:	10800e04 	addi	r2,r2,56
 2000c8c:	180b883a 	mov	r5,r3
 2000c90:	1009883a 	mov	r4,r2
 2000c94:	20027a00 	call	20027a0 <whole_collide>
       whole_collide(ball[8],velocity[8]);
 2000c98:	e0bfe504 	addi	r2,fp,-108
 2000c9c:	10c01004 	addi	r3,r2,64
 2000ca0:	e0bf4d04 	addi	r2,fp,-716
 2000ca4:	10801004 	addi	r2,r2,64
 2000ca8:	180b883a 	mov	r5,r3
 2000cac:	1009883a 	mov	r4,r2
 2000cb0:	20027a00 	call	20027a0 <whole_collide>
       whole_collide(ball[9],velocity[9]);
 2000cb4:	e0bfe504 	addi	r2,fp,-108
 2000cb8:	10c01204 	addi	r3,r2,72
 2000cbc:	e0bf4d04 	addi	r2,fp,-716
 2000cc0:	10801204 	addi	r2,r2,72
 2000cc4:	180b883a 	mov	r5,r3
 2000cc8:	1009883a 	mov	r4,r2
 2000ccc:	20027a00 	call	20027a0 <whole_collide>

       //Collision

       detect_collide(ball[0],ball[1],collision[0]);
 2000cd0:	e13f6104 	addi	r4,fp,-636
 2000cd4:	e0bf4d04 	addi	r2,fp,-716
 2000cd8:	10c00204 	addi	r3,r2,8
 2000cdc:	e0bf4d04 	addi	r2,fp,-716
 2000ce0:	200d883a 	mov	r6,r4
 2000ce4:	180b883a 	mov	r5,r3
 2000ce8:	1009883a 	mov	r4,r2
 2000cec:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[0],ball[2],collision[1]);
 2000cf0:	e0bf6104 	addi	r2,fp,-636
 2000cf4:	11000204 	addi	r4,r2,8
 2000cf8:	e0bf4d04 	addi	r2,fp,-716
 2000cfc:	10c00404 	addi	r3,r2,16
 2000d00:	e0bf4d04 	addi	r2,fp,-716
 2000d04:	200d883a 	mov	r6,r4
 2000d08:	180b883a 	mov	r5,r3
 2000d0c:	1009883a 	mov	r4,r2
 2000d10:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[0],ball[3],collision[2]);
 2000d14:	e0bf6104 	addi	r2,fp,-636
 2000d18:	11000404 	addi	r4,r2,16
 2000d1c:	e0bf4d04 	addi	r2,fp,-716
 2000d20:	10c00604 	addi	r3,r2,24
 2000d24:	e0bf4d04 	addi	r2,fp,-716
 2000d28:	200d883a 	mov	r6,r4
 2000d2c:	180b883a 	mov	r5,r3
 2000d30:	1009883a 	mov	r4,r2
 2000d34:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[0],ball[4],collision[3]);
 2000d38:	e0bf6104 	addi	r2,fp,-636
 2000d3c:	11000604 	addi	r4,r2,24
 2000d40:	e0bf4d04 	addi	r2,fp,-716
 2000d44:	10c00804 	addi	r3,r2,32
 2000d48:	e0bf4d04 	addi	r2,fp,-716
 2000d4c:	200d883a 	mov	r6,r4
 2000d50:	180b883a 	mov	r5,r3
 2000d54:	1009883a 	mov	r4,r2
 2000d58:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[0],ball[5],collision[4]);
 2000d5c:	e0bf6104 	addi	r2,fp,-636
 2000d60:	11000804 	addi	r4,r2,32
 2000d64:	e0bf4d04 	addi	r2,fp,-716
 2000d68:	10c00a04 	addi	r3,r2,40
 2000d6c:	e0bf4d04 	addi	r2,fp,-716
 2000d70:	200d883a 	mov	r6,r4
 2000d74:	180b883a 	mov	r5,r3
 2000d78:	1009883a 	mov	r4,r2
 2000d7c:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[0],ball[6],collision[5]);
 2000d80:	e0bf6104 	addi	r2,fp,-636
 2000d84:	11000a04 	addi	r4,r2,40
 2000d88:	e0bf4d04 	addi	r2,fp,-716
 2000d8c:	10c00c04 	addi	r3,r2,48
 2000d90:	e0bf4d04 	addi	r2,fp,-716
 2000d94:	200d883a 	mov	r6,r4
 2000d98:	180b883a 	mov	r5,r3
 2000d9c:	1009883a 	mov	r4,r2
 2000da0:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[0],ball[7],collision[6]);
 2000da4:	e0bf6104 	addi	r2,fp,-636
 2000da8:	11000c04 	addi	r4,r2,48
 2000dac:	e0bf4d04 	addi	r2,fp,-716
 2000db0:	10c00e04 	addi	r3,r2,56
 2000db4:	e0bf4d04 	addi	r2,fp,-716
 2000db8:	200d883a 	mov	r6,r4
 2000dbc:	180b883a 	mov	r5,r3
 2000dc0:	1009883a 	mov	r4,r2
 2000dc4:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[0],ball[8],collision[7]);
 2000dc8:	e0bf6104 	addi	r2,fp,-636
 2000dcc:	11000e04 	addi	r4,r2,56
 2000dd0:	e0bf4d04 	addi	r2,fp,-716
 2000dd4:	10c01004 	addi	r3,r2,64
 2000dd8:	e0bf4d04 	addi	r2,fp,-716
 2000ddc:	200d883a 	mov	r6,r4
 2000de0:	180b883a 	mov	r5,r3
 2000de4:	1009883a 	mov	r4,r2
 2000de8:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[0],ball[9],collision[8]);
 2000dec:	e0bf6104 	addi	r2,fp,-636
 2000df0:	11001004 	addi	r4,r2,64
 2000df4:	e0bf4d04 	addi	r2,fp,-716
 2000df8:	10c01204 	addi	r3,r2,72
 2000dfc:	e0bf4d04 	addi	r2,fp,-716
 2000e00:	200d883a 	mov	r6,r4
 2000e04:	180b883a 	mov	r5,r3
 2000e08:	1009883a 	mov	r4,r2
 2000e0c:	2002ad00 	call	2002ad0 <detect_collide>

       detect_collide(ball[1],ball[2],collision[9]);
 2000e10:	e0bf6104 	addi	r2,fp,-636
 2000e14:	11001204 	addi	r4,r2,72
 2000e18:	e0bf4d04 	addi	r2,fp,-716
 2000e1c:	10c00404 	addi	r3,r2,16
 2000e20:	e0bf4d04 	addi	r2,fp,-716
 2000e24:	10800204 	addi	r2,r2,8
 2000e28:	200d883a 	mov	r6,r4
 2000e2c:	180b883a 	mov	r5,r3
 2000e30:	1009883a 	mov	r4,r2
 2000e34:	2002ad00 	call	2002ad0 <detect_collide>
       detect_collide(ball[1],ball[3],collision[10]);
 2000e38:	e0bf6104 	addi	r2,fp,-636
 2000e3c:	11001404 	addi	r4,r2,80
 2000e40:	e0bf4d04 	addi	r2,fp,-716
 2000e44:	10c00604 	addi	r3,r2,24
 2000e48:	e0bf4d04 	addi	r2,fp,-716
 2000e4c:	10800204 	addi	r2,r2,8
 2000e50:	200d883a 	mov	r6,r4
 2000e54:	180b883a 	mov	r5,r3
 2000e58:	1009883a 	mov	r4,r2
 2000e5c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[1],ball[4],collision[11]);
 2000e60:	e0bf6104 	addi	r2,fp,-636
 2000e64:	11001604 	addi	r4,r2,88
 2000e68:	e0bf4d04 	addi	r2,fp,-716
 2000e6c:	10c00804 	addi	r3,r2,32
 2000e70:	e0bf4d04 	addi	r2,fp,-716
 2000e74:	10800204 	addi	r2,r2,8
 2000e78:	200d883a 	mov	r6,r4
 2000e7c:	180b883a 	mov	r5,r3
 2000e80:	1009883a 	mov	r4,r2
 2000e84:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[1],ball[5],collision[12]);
 2000e88:	e0bf6104 	addi	r2,fp,-636
 2000e8c:	11001804 	addi	r4,r2,96
 2000e90:	e0bf4d04 	addi	r2,fp,-716
 2000e94:	10c00a04 	addi	r3,r2,40
 2000e98:	e0bf4d04 	addi	r2,fp,-716
 2000e9c:	10800204 	addi	r2,r2,8
 2000ea0:	200d883a 	mov	r6,r4
 2000ea4:	180b883a 	mov	r5,r3
 2000ea8:	1009883a 	mov	r4,r2
 2000eac:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[1],ball[6],collision[13]);
 2000eb0:	e0bf6104 	addi	r2,fp,-636
 2000eb4:	11001a04 	addi	r4,r2,104
 2000eb8:	e0bf4d04 	addi	r2,fp,-716
 2000ebc:	10c00c04 	addi	r3,r2,48
 2000ec0:	e0bf4d04 	addi	r2,fp,-716
 2000ec4:	10800204 	addi	r2,r2,8
 2000ec8:	200d883a 	mov	r6,r4
 2000ecc:	180b883a 	mov	r5,r3
 2000ed0:	1009883a 	mov	r4,r2
 2000ed4:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[1],ball[7],collision[14]);
 2000ed8:	e0bf6104 	addi	r2,fp,-636
 2000edc:	11001c04 	addi	r4,r2,112
 2000ee0:	e0bf4d04 	addi	r2,fp,-716
 2000ee4:	10c00e04 	addi	r3,r2,56
 2000ee8:	e0bf4d04 	addi	r2,fp,-716
 2000eec:	10800204 	addi	r2,r2,8
 2000ef0:	200d883a 	mov	r6,r4
 2000ef4:	180b883a 	mov	r5,r3
 2000ef8:	1009883a 	mov	r4,r2
 2000efc:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[1],ball[8],collision[15]);
 2000f00:	e0bf6104 	addi	r2,fp,-636
 2000f04:	11001e04 	addi	r4,r2,120
 2000f08:	e0bf4d04 	addi	r2,fp,-716
 2000f0c:	10c01004 	addi	r3,r2,64
 2000f10:	e0bf4d04 	addi	r2,fp,-716
 2000f14:	10800204 	addi	r2,r2,8
 2000f18:	200d883a 	mov	r6,r4
 2000f1c:	180b883a 	mov	r5,r3
 2000f20:	1009883a 	mov	r4,r2
 2000f24:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[1],ball[9],collision[16]);
 2000f28:	e0bf6104 	addi	r2,fp,-636
 2000f2c:	11002004 	addi	r4,r2,128
 2000f30:	e0bf4d04 	addi	r2,fp,-716
 2000f34:	10c01204 	addi	r3,r2,72
 2000f38:	e0bf4d04 	addi	r2,fp,-716
 2000f3c:	10800204 	addi	r2,r2,8
 2000f40:	200d883a 	mov	r6,r4
 2000f44:	180b883a 	mov	r5,r3
 2000f48:	1009883a 	mov	r4,r2
 2000f4c:	2002ad00 	call	2002ad0 <detect_collide>

	   detect_collide(ball[2],ball[3],collision[17]);
 2000f50:	e0bf6104 	addi	r2,fp,-636
 2000f54:	11002204 	addi	r4,r2,136
 2000f58:	e0bf4d04 	addi	r2,fp,-716
 2000f5c:	10c00604 	addi	r3,r2,24
 2000f60:	e0bf4d04 	addi	r2,fp,-716
 2000f64:	10800404 	addi	r2,r2,16
 2000f68:	200d883a 	mov	r6,r4
 2000f6c:	180b883a 	mov	r5,r3
 2000f70:	1009883a 	mov	r4,r2
 2000f74:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[2],ball[4],collision[18]);
 2000f78:	e0bf6104 	addi	r2,fp,-636
 2000f7c:	11002404 	addi	r4,r2,144
 2000f80:	e0bf4d04 	addi	r2,fp,-716
 2000f84:	10c00804 	addi	r3,r2,32
 2000f88:	e0bf4d04 	addi	r2,fp,-716
 2000f8c:	10800404 	addi	r2,r2,16
 2000f90:	200d883a 	mov	r6,r4
 2000f94:	180b883a 	mov	r5,r3
 2000f98:	1009883a 	mov	r4,r2
 2000f9c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[2],ball[5],collision[19]);
 2000fa0:	e0bf6104 	addi	r2,fp,-636
 2000fa4:	11002604 	addi	r4,r2,152
 2000fa8:	e0bf4d04 	addi	r2,fp,-716
 2000fac:	10c00a04 	addi	r3,r2,40
 2000fb0:	e0bf4d04 	addi	r2,fp,-716
 2000fb4:	10800404 	addi	r2,r2,16
 2000fb8:	200d883a 	mov	r6,r4
 2000fbc:	180b883a 	mov	r5,r3
 2000fc0:	1009883a 	mov	r4,r2
 2000fc4:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[2],ball[6],collision[20]);
 2000fc8:	e0bf6104 	addi	r2,fp,-636
 2000fcc:	11002804 	addi	r4,r2,160
 2000fd0:	e0bf4d04 	addi	r2,fp,-716
 2000fd4:	10c00c04 	addi	r3,r2,48
 2000fd8:	e0bf4d04 	addi	r2,fp,-716
 2000fdc:	10800404 	addi	r2,r2,16
 2000fe0:	200d883a 	mov	r6,r4
 2000fe4:	180b883a 	mov	r5,r3
 2000fe8:	1009883a 	mov	r4,r2
 2000fec:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[2],ball[7],collision[21]);
 2000ff0:	e0bf6104 	addi	r2,fp,-636
 2000ff4:	11002a04 	addi	r4,r2,168
 2000ff8:	e0bf4d04 	addi	r2,fp,-716
 2000ffc:	10c00e04 	addi	r3,r2,56
 2001000:	e0bf4d04 	addi	r2,fp,-716
 2001004:	10800404 	addi	r2,r2,16
 2001008:	200d883a 	mov	r6,r4
 200100c:	180b883a 	mov	r5,r3
 2001010:	1009883a 	mov	r4,r2
 2001014:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[2],ball[8],collision[22]);
 2001018:	e0bf6104 	addi	r2,fp,-636
 200101c:	11002c04 	addi	r4,r2,176
 2001020:	e0bf4d04 	addi	r2,fp,-716
 2001024:	10c01004 	addi	r3,r2,64
 2001028:	e0bf4d04 	addi	r2,fp,-716
 200102c:	10800404 	addi	r2,r2,16
 2001030:	200d883a 	mov	r6,r4
 2001034:	180b883a 	mov	r5,r3
 2001038:	1009883a 	mov	r4,r2
 200103c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[2],ball[9],collision[23]);
 2001040:	e0bf6104 	addi	r2,fp,-636
 2001044:	11002e04 	addi	r4,r2,184
 2001048:	e0bf4d04 	addi	r2,fp,-716
 200104c:	10c01204 	addi	r3,r2,72
 2001050:	e0bf4d04 	addi	r2,fp,-716
 2001054:	10800404 	addi	r2,r2,16
 2001058:	200d883a 	mov	r6,r4
 200105c:	180b883a 	mov	r5,r3
 2001060:	1009883a 	mov	r4,r2
 2001064:	2002ad00 	call	2002ad0 <detect_collide>

	   detect_collide(ball[3],ball[4],collision[24]);
 2001068:	e0bf6104 	addi	r2,fp,-636
 200106c:	11003004 	addi	r4,r2,192
 2001070:	e0bf4d04 	addi	r2,fp,-716
 2001074:	10c00804 	addi	r3,r2,32
 2001078:	e0bf4d04 	addi	r2,fp,-716
 200107c:	10800604 	addi	r2,r2,24
 2001080:	200d883a 	mov	r6,r4
 2001084:	180b883a 	mov	r5,r3
 2001088:	1009883a 	mov	r4,r2
 200108c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[3],ball[5],collision[25]);
 2001090:	e0bf6104 	addi	r2,fp,-636
 2001094:	11003204 	addi	r4,r2,200
 2001098:	e0bf4d04 	addi	r2,fp,-716
 200109c:	10c00a04 	addi	r3,r2,40
 20010a0:	e0bf4d04 	addi	r2,fp,-716
 20010a4:	10800604 	addi	r2,r2,24
 20010a8:	200d883a 	mov	r6,r4
 20010ac:	180b883a 	mov	r5,r3
 20010b0:	1009883a 	mov	r4,r2
 20010b4:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[3],ball[6],collision[26]);
 20010b8:	e0bf6104 	addi	r2,fp,-636
 20010bc:	11003404 	addi	r4,r2,208
 20010c0:	e0bf4d04 	addi	r2,fp,-716
 20010c4:	10c00c04 	addi	r3,r2,48
 20010c8:	e0bf4d04 	addi	r2,fp,-716
 20010cc:	10800604 	addi	r2,r2,24
 20010d0:	200d883a 	mov	r6,r4
 20010d4:	180b883a 	mov	r5,r3
 20010d8:	1009883a 	mov	r4,r2
 20010dc:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[3],ball[7],collision[27]);
 20010e0:	e0bf6104 	addi	r2,fp,-636
 20010e4:	11003604 	addi	r4,r2,216
 20010e8:	e0bf4d04 	addi	r2,fp,-716
 20010ec:	10c00e04 	addi	r3,r2,56
 20010f0:	e0bf4d04 	addi	r2,fp,-716
 20010f4:	10800604 	addi	r2,r2,24
 20010f8:	200d883a 	mov	r6,r4
 20010fc:	180b883a 	mov	r5,r3
 2001100:	1009883a 	mov	r4,r2
 2001104:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[3],ball[8],collision[28]);
 2001108:	e0bf6104 	addi	r2,fp,-636
 200110c:	11003804 	addi	r4,r2,224
 2001110:	e0bf4d04 	addi	r2,fp,-716
 2001114:	10c01004 	addi	r3,r2,64
 2001118:	e0bf4d04 	addi	r2,fp,-716
 200111c:	10800604 	addi	r2,r2,24
 2001120:	200d883a 	mov	r6,r4
 2001124:	180b883a 	mov	r5,r3
 2001128:	1009883a 	mov	r4,r2
 200112c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[3],ball[9],collision[29]);
 2001130:	e0bf6104 	addi	r2,fp,-636
 2001134:	11003a04 	addi	r4,r2,232
 2001138:	e0bf4d04 	addi	r2,fp,-716
 200113c:	10c01204 	addi	r3,r2,72
 2001140:	e0bf4d04 	addi	r2,fp,-716
 2001144:	10800604 	addi	r2,r2,24
 2001148:	200d883a 	mov	r6,r4
 200114c:	180b883a 	mov	r5,r3
 2001150:	1009883a 	mov	r4,r2
 2001154:	2002ad00 	call	2002ad0 <detect_collide>

	   detect_collide(ball[4],ball[5],collision[30]);
 2001158:	e0bf6104 	addi	r2,fp,-636
 200115c:	11003c04 	addi	r4,r2,240
 2001160:	e0bf4d04 	addi	r2,fp,-716
 2001164:	10c00a04 	addi	r3,r2,40
 2001168:	e0bf4d04 	addi	r2,fp,-716
 200116c:	10800804 	addi	r2,r2,32
 2001170:	200d883a 	mov	r6,r4
 2001174:	180b883a 	mov	r5,r3
 2001178:	1009883a 	mov	r4,r2
 200117c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[4],ball[6],collision[31]);
 2001180:	e0bf6104 	addi	r2,fp,-636
 2001184:	11003e04 	addi	r4,r2,248
 2001188:	e0bf4d04 	addi	r2,fp,-716
 200118c:	10c00c04 	addi	r3,r2,48
 2001190:	e0bf4d04 	addi	r2,fp,-716
 2001194:	10800804 	addi	r2,r2,32
 2001198:	200d883a 	mov	r6,r4
 200119c:	180b883a 	mov	r5,r3
 20011a0:	1009883a 	mov	r4,r2
 20011a4:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[4],ball[7],collision[32]);
 20011a8:	e0bf6104 	addi	r2,fp,-636
 20011ac:	11004004 	addi	r4,r2,256
 20011b0:	e0bf4d04 	addi	r2,fp,-716
 20011b4:	10c00e04 	addi	r3,r2,56
 20011b8:	e0bf4d04 	addi	r2,fp,-716
 20011bc:	10800804 	addi	r2,r2,32
 20011c0:	200d883a 	mov	r6,r4
 20011c4:	180b883a 	mov	r5,r3
 20011c8:	1009883a 	mov	r4,r2
 20011cc:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[4],ball[8],collision[33]);
 20011d0:	e0bf6104 	addi	r2,fp,-636
 20011d4:	11004204 	addi	r4,r2,264
 20011d8:	e0bf4d04 	addi	r2,fp,-716
 20011dc:	10c01004 	addi	r3,r2,64
 20011e0:	e0bf4d04 	addi	r2,fp,-716
 20011e4:	10800804 	addi	r2,r2,32
 20011e8:	200d883a 	mov	r6,r4
 20011ec:	180b883a 	mov	r5,r3
 20011f0:	1009883a 	mov	r4,r2
 20011f4:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[4],ball[9],collision[34]);
 20011f8:	e0bf6104 	addi	r2,fp,-636
 20011fc:	11004404 	addi	r4,r2,272
 2001200:	e0bf4d04 	addi	r2,fp,-716
 2001204:	10c01204 	addi	r3,r2,72
 2001208:	e0bf4d04 	addi	r2,fp,-716
 200120c:	10800804 	addi	r2,r2,32
 2001210:	200d883a 	mov	r6,r4
 2001214:	180b883a 	mov	r5,r3
 2001218:	1009883a 	mov	r4,r2
 200121c:	2002ad00 	call	2002ad0 <detect_collide>

	   detect_collide(ball[5],ball[6],collision[35]);
 2001220:	e0bf6104 	addi	r2,fp,-636
 2001224:	11004604 	addi	r4,r2,280
 2001228:	e0bf4d04 	addi	r2,fp,-716
 200122c:	10c00c04 	addi	r3,r2,48
 2001230:	e0bf4d04 	addi	r2,fp,-716
 2001234:	10800a04 	addi	r2,r2,40
 2001238:	200d883a 	mov	r6,r4
 200123c:	180b883a 	mov	r5,r3
 2001240:	1009883a 	mov	r4,r2
 2001244:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[5],ball[7],collision[36]);
 2001248:	e0bf6104 	addi	r2,fp,-636
 200124c:	11004804 	addi	r4,r2,288
 2001250:	e0bf4d04 	addi	r2,fp,-716
 2001254:	10c00e04 	addi	r3,r2,56
 2001258:	e0bf4d04 	addi	r2,fp,-716
 200125c:	10800a04 	addi	r2,r2,40
 2001260:	200d883a 	mov	r6,r4
 2001264:	180b883a 	mov	r5,r3
 2001268:	1009883a 	mov	r4,r2
 200126c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[5],ball[8],collision[37]);
 2001270:	e0bf6104 	addi	r2,fp,-636
 2001274:	11004a04 	addi	r4,r2,296
 2001278:	e0bf4d04 	addi	r2,fp,-716
 200127c:	10c01004 	addi	r3,r2,64
 2001280:	e0bf4d04 	addi	r2,fp,-716
 2001284:	10800a04 	addi	r2,r2,40
 2001288:	200d883a 	mov	r6,r4
 200128c:	180b883a 	mov	r5,r3
 2001290:	1009883a 	mov	r4,r2
 2001294:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[5],ball[9],collision[38]);
 2001298:	e0bf6104 	addi	r2,fp,-636
 200129c:	11004c04 	addi	r4,r2,304
 20012a0:	e0bf4d04 	addi	r2,fp,-716
 20012a4:	10c01204 	addi	r3,r2,72
 20012a8:	e0bf4d04 	addi	r2,fp,-716
 20012ac:	10800a04 	addi	r2,r2,40
 20012b0:	200d883a 	mov	r6,r4
 20012b4:	180b883a 	mov	r5,r3
 20012b8:	1009883a 	mov	r4,r2
 20012bc:	2002ad00 	call	2002ad0 <detect_collide>

	   detect_collide(ball[6],ball[7],collision[39]);
 20012c0:	e0bf6104 	addi	r2,fp,-636
 20012c4:	11004e04 	addi	r4,r2,312
 20012c8:	e0bf4d04 	addi	r2,fp,-716
 20012cc:	10c00e04 	addi	r3,r2,56
 20012d0:	e0bf4d04 	addi	r2,fp,-716
 20012d4:	10800c04 	addi	r2,r2,48
 20012d8:	200d883a 	mov	r6,r4
 20012dc:	180b883a 	mov	r5,r3
 20012e0:	1009883a 	mov	r4,r2
 20012e4:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[6],ball[8],collision[40]);
 20012e8:	e0bf6104 	addi	r2,fp,-636
 20012ec:	11005004 	addi	r4,r2,320
 20012f0:	e0bf4d04 	addi	r2,fp,-716
 20012f4:	10c01004 	addi	r3,r2,64
 20012f8:	e0bf4d04 	addi	r2,fp,-716
 20012fc:	10800c04 	addi	r2,r2,48
 2001300:	200d883a 	mov	r6,r4
 2001304:	180b883a 	mov	r5,r3
 2001308:	1009883a 	mov	r4,r2
 200130c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[6],ball[9],collision[41]);
 2001310:	e0bf6104 	addi	r2,fp,-636
 2001314:	11005204 	addi	r4,r2,328
 2001318:	e0bf4d04 	addi	r2,fp,-716
 200131c:	10c01204 	addi	r3,r2,72
 2001320:	e0bf4d04 	addi	r2,fp,-716
 2001324:	10800c04 	addi	r2,r2,48
 2001328:	200d883a 	mov	r6,r4
 200132c:	180b883a 	mov	r5,r3
 2001330:	1009883a 	mov	r4,r2
 2001334:	2002ad00 	call	2002ad0 <detect_collide>

	   detect_collide(ball[7],ball[8],collision[42]);
 2001338:	e0bf6104 	addi	r2,fp,-636
 200133c:	11005404 	addi	r4,r2,336
 2001340:	e0bf4d04 	addi	r2,fp,-716
 2001344:	10c01004 	addi	r3,r2,64
 2001348:	e0bf4d04 	addi	r2,fp,-716
 200134c:	10800e04 	addi	r2,r2,56
 2001350:	200d883a 	mov	r6,r4
 2001354:	180b883a 	mov	r5,r3
 2001358:	1009883a 	mov	r4,r2
 200135c:	2002ad00 	call	2002ad0 <detect_collide>
	   detect_collide(ball[7],ball[9],collision[43]);
 2001360:	e0bf6104 	addi	r2,fp,-636
 2001364:	11005604 	addi	r4,r2,344
 2001368:	e0bf4d04 	addi	r2,fp,-716
 200136c:	10c01204 	addi	r3,r2,72
 2001370:	e0bf4d04 	addi	r2,fp,-716
 2001374:	10800e04 	addi	r2,r2,56
 2001378:	200d883a 	mov	r6,r4
 200137c:	180b883a 	mov	r5,r3
 2001380:	1009883a 	mov	r4,r2
 2001384:	2002ad00 	call	2002ad0 <detect_collide>

	   detect_collide(ball[8],ball[9],collision[44]);
 2001388:	e0bf6104 	addi	r2,fp,-636
 200138c:	11005804 	addi	r4,r2,352
 2001390:	e0bf4d04 	addi	r2,fp,-716
 2001394:	10c01204 	addi	r3,r2,72
 2001398:	e0bf4d04 	addi	r2,fp,-716
 200139c:	10801004 	addi	r2,r2,64
 20013a0:	200d883a 	mov	r6,r4
 20013a4:	180b883a 	mov	r5,r3
 20013a8:	1009883a 	mov	r4,r2
 20013ac:	2002ad00 	call	2002ad0 <detect_collide>

	   //Calcul of collision

  	   collide_calc(ball[0],ball[1],velocity[0],velocity[1],collision[0],0);
 20013b0:	e0bfe504 	addi	r2,fp,-108
 20013b4:	11800204 	addi	r6,r2,8
 20013b8:	e17fe504 	addi	r5,fp,-108
 20013bc:	e0bf4d04 	addi	r2,fp,-716
 20013c0:	11000204 	addi	r4,r2,8
 20013c4:	e0ff4d04 	addi	r3,fp,-716
 20013c8:	d8000115 	stw	zero,4(sp)
 20013cc:	e0bf6104 	addi	r2,fp,-636
 20013d0:	d8800015 	stw	r2,0(sp)
 20013d4:	300f883a 	mov	r7,r6
 20013d8:	280d883a 	mov	r6,r5
 20013dc:	200b883a 	mov	r5,r4
 20013e0:	1809883a 	mov	r4,r3
 20013e4:	2002b900 	call	2002b90 <collide_calc>
  	   collide_calc(ball[0],ball[2],velocity[0],velocity[2],collision[1],1);
 20013e8:	e0bfe504 	addi	r2,fp,-108
 20013ec:	11800404 	addi	r6,r2,16
 20013f0:	e17fe504 	addi	r5,fp,-108
 20013f4:	e0bf4d04 	addi	r2,fp,-716
 20013f8:	11000404 	addi	r4,r2,16
 20013fc:	e0ff4d04 	addi	r3,fp,-716
 2001400:	00800044 	movi	r2,1
 2001404:	d8800115 	stw	r2,4(sp)
 2001408:	e0bf6104 	addi	r2,fp,-636
 200140c:	10800204 	addi	r2,r2,8
 2001410:	d8800015 	stw	r2,0(sp)
 2001414:	300f883a 	mov	r7,r6
 2001418:	280d883a 	mov	r6,r5
 200141c:	200b883a 	mov	r5,r4
 2001420:	1809883a 	mov	r4,r3
 2001424:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[0],ball[3],velocity[0],velocity[3],collision[2],2);
 2001428:	e0bfe504 	addi	r2,fp,-108
 200142c:	11800604 	addi	r6,r2,24
 2001430:	e17fe504 	addi	r5,fp,-108
 2001434:	e0bf4d04 	addi	r2,fp,-716
 2001438:	11000604 	addi	r4,r2,24
 200143c:	e0ff4d04 	addi	r3,fp,-716
 2001440:	00800084 	movi	r2,2
 2001444:	d8800115 	stw	r2,4(sp)
 2001448:	e0bf6104 	addi	r2,fp,-636
 200144c:	10800404 	addi	r2,r2,16
 2001450:	d8800015 	stw	r2,0(sp)
 2001454:	300f883a 	mov	r7,r6
 2001458:	280d883a 	mov	r6,r5
 200145c:	200b883a 	mov	r5,r4
 2001460:	1809883a 	mov	r4,r3
 2001464:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[0],ball[4],velocity[0],velocity[4],collision[3],3);
 2001468:	e0bfe504 	addi	r2,fp,-108
 200146c:	11800804 	addi	r6,r2,32
 2001470:	e17fe504 	addi	r5,fp,-108
 2001474:	e0bf4d04 	addi	r2,fp,-716
 2001478:	11000804 	addi	r4,r2,32
 200147c:	e0ff4d04 	addi	r3,fp,-716
 2001480:	008000c4 	movi	r2,3
 2001484:	d8800115 	stw	r2,4(sp)
 2001488:	e0bf6104 	addi	r2,fp,-636
 200148c:	10800604 	addi	r2,r2,24
 2001490:	d8800015 	stw	r2,0(sp)
 2001494:	300f883a 	mov	r7,r6
 2001498:	280d883a 	mov	r6,r5
 200149c:	200b883a 	mov	r5,r4
 20014a0:	1809883a 	mov	r4,r3
 20014a4:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[0],ball[5],velocity[0],velocity[5],collision[4],4);
 20014a8:	e0bfe504 	addi	r2,fp,-108
 20014ac:	11800a04 	addi	r6,r2,40
 20014b0:	e17fe504 	addi	r5,fp,-108
 20014b4:	e0bf4d04 	addi	r2,fp,-716
 20014b8:	11000a04 	addi	r4,r2,40
 20014bc:	e0ff4d04 	addi	r3,fp,-716
 20014c0:	00800104 	movi	r2,4
 20014c4:	d8800115 	stw	r2,4(sp)
 20014c8:	e0bf6104 	addi	r2,fp,-636
 20014cc:	10800804 	addi	r2,r2,32
 20014d0:	d8800015 	stw	r2,0(sp)
 20014d4:	300f883a 	mov	r7,r6
 20014d8:	280d883a 	mov	r6,r5
 20014dc:	200b883a 	mov	r5,r4
 20014e0:	1809883a 	mov	r4,r3
 20014e4:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[0],ball[6],velocity[0],velocity[6],collision[5],5);
 20014e8:	e0bfe504 	addi	r2,fp,-108
 20014ec:	11800c04 	addi	r6,r2,48
 20014f0:	e17fe504 	addi	r5,fp,-108
 20014f4:	e0bf4d04 	addi	r2,fp,-716
 20014f8:	11000c04 	addi	r4,r2,48
 20014fc:	e0ff4d04 	addi	r3,fp,-716
 2001500:	00800144 	movi	r2,5
 2001504:	d8800115 	stw	r2,4(sp)
 2001508:	e0bf6104 	addi	r2,fp,-636
 200150c:	10800a04 	addi	r2,r2,40
 2001510:	d8800015 	stw	r2,0(sp)
 2001514:	300f883a 	mov	r7,r6
 2001518:	280d883a 	mov	r6,r5
 200151c:	200b883a 	mov	r5,r4
 2001520:	1809883a 	mov	r4,r3
 2001524:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[0],ball[7],velocity[0],velocity[7],collision[6],6);
 2001528:	e0bfe504 	addi	r2,fp,-108
 200152c:	11800e04 	addi	r6,r2,56
 2001530:	e17fe504 	addi	r5,fp,-108
 2001534:	e0bf4d04 	addi	r2,fp,-716
 2001538:	11000e04 	addi	r4,r2,56
 200153c:	e0ff4d04 	addi	r3,fp,-716
 2001540:	00800184 	movi	r2,6
 2001544:	d8800115 	stw	r2,4(sp)
 2001548:	e0bf6104 	addi	r2,fp,-636
 200154c:	10800c04 	addi	r2,r2,48
 2001550:	d8800015 	stw	r2,0(sp)
 2001554:	300f883a 	mov	r7,r6
 2001558:	280d883a 	mov	r6,r5
 200155c:	200b883a 	mov	r5,r4
 2001560:	1809883a 	mov	r4,r3
 2001564:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[0],ball[8],velocity[0],velocity[8],collision[7],7);
 2001568:	e0bfe504 	addi	r2,fp,-108
 200156c:	11801004 	addi	r6,r2,64
 2001570:	e17fe504 	addi	r5,fp,-108
 2001574:	e0bf4d04 	addi	r2,fp,-716
 2001578:	11001004 	addi	r4,r2,64
 200157c:	e0ff4d04 	addi	r3,fp,-716
 2001580:	008001c4 	movi	r2,7
 2001584:	d8800115 	stw	r2,4(sp)
 2001588:	e0bf6104 	addi	r2,fp,-636
 200158c:	10800e04 	addi	r2,r2,56
 2001590:	d8800015 	stw	r2,0(sp)
 2001594:	300f883a 	mov	r7,r6
 2001598:	280d883a 	mov	r6,r5
 200159c:	200b883a 	mov	r5,r4
 20015a0:	1809883a 	mov	r4,r3
 20015a4:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[0],ball[9],velocity[0],velocity[9],collision[8],8);
 20015a8:	e0bfe504 	addi	r2,fp,-108
 20015ac:	11801204 	addi	r6,r2,72
 20015b0:	e17fe504 	addi	r5,fp,-108
 20015b4:	e0bf4d04 	addi	r2,fp,-716
 20015b8:	11001204 	addi	r4,r2,72
 20015bc:	e0ff4d04 	addi	r3,fp,-716
 20015c0:	00800204 	movi	r2,8
 20015c4:	d8800115 	stw	r2,4(sp)
 20015c8:	e0bf6104 	addi	r2,fp,-636
 20015cc:	10801004 	addi	r2,r2,64
 20015d0:	d8800015 	stw	r2,0(sp)
 20015d4:	300f883a 	mov	r7,r6
 20015d8:	280d883a 	mov	r6,r5
 20015dc:	200b883a 	mov	r5,r4
 20015e0:	1809883a 	mov	r4,r3
 20015e4:	2002b900 	call	2002b90 <collide_calc>

	   collide_calc(ball[1],ball[2],velocity[1],velocity[2],collision[9],9);
 20015e8:	e0bfe504 	addi	r2,fp,-108
 20015ec:	11800404 	addi	r6,r2,16
 20015f0:	e0bfe504 	addi	r2,fp,-108
 20015f4:	11400204 	addi	r5,r2,8
 20015f8:	e0bf4d04 	addi	r2,fp,-716
 20015fc:	11000404 	addi	r4,r2,16
 2001600:	e0bf4d04 	addi	r2,fp,-716
 2001604:	10c00204 	addi	r3,r2,8
 2001608:	00800244 	movi	r2,9
 200160c:	d8800115 	stw	r2,4(sp)
 2001610:	e0bf6104 	addi	r2,fp,-636
 2001614:	10801204 	addi	r2,r2,72
 2001618:	d8800015 	stw	r2,0(sp)
 200161c:	300f883a 	mov	r7,r6
 2001620:	280d883a 	mov	r6,r5
 2001624:	200b883a 	mov	r5,r4
 2001628:	1809883a 	mov	r4,r3
 200162c:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[1],ball[3],velocity[1],velocity[3],collision[10],10);
 2001630:	e0bfe504 	addi	r2,fp,-108
 2001634:	11800604 	addi	r6,r2,24
 2001638:	e0bfe504 	addi	r2,fp,-108
 200163c:	11400204 	addi	r5,r2,8
 2001640:	e0bf4d04 	addi	r2,fp,-716
 2001644:	11000604 	addi	r4,r2,24
 2001648:	e0bf4d04 	addi	r2,fp,-716
 200164c:	10c00204 	addi	r3,r2,8
 2001650:	00800284 	movi	r2,10
 2001654:	d8800115 	stw	r2,4(sp)
 2001658:	e0bf6104 	addi	r2,fp,-636
 200165c:	10801404 	addi	r2,r2,80
 2001660:	d8800015 	stw	r2,0(sp)
 2001664:	300f883a 	mov	r7,r6
 2001668:	280d883a 	mov	r6,r5
 200166c:	200b883a 	mov	r5,r4
 2001670:	1809883a 	mov	r4,r3
 2001674:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[1],ball[4],velocity[1],velocity[4],collision[11],11);
 2001678:	e0bfe504 	addi	r2,fp,-108
 200167c:	11800804 	addi	r6,r2,32
 2001680:	e0bfe504 	addi	r2,fp,-108
 2001684:	11400204 	addi	r5,r2,8
 2001688:	e0bf4d04 	addi	r2,fp,-716
 200168c:	11000804 	addi	r4,r2,32
 2001690:	e0bf4d04 	addi	r2,fp,-716
 2001694:	10c00204 	addi	r3,r2,8
 2001698:	008002c4 	movi	r2,11
 200169c:	d8800115 	stw	r2,4(sp)
 20016a0:	e0bf6104 	addi	r2,fp,-636
 20016a4:	10801604 	addi	r2,r2,88
 20016a8:	d8800015 	stw	r2,0(sp)
 20016ac:	300f883a 	mov	r7,r6
 20016b0:	280d883a 	mov	r6,r5
 20016b4:	200b883a 	mov	r5,r4
 20016b8:	1809883a 	mov	r4,r3
 20016bc:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[1],ball[5],velocity[1],velocity[5],collision[12],12);
 20016c0:	e0bfe504 	addi	r2,fp,-108
 20016c4:	11800a04 	addi	r6,r2,40
 20016c8:	e0bfe504 	addi	r2,fp,-108
 20016cc:	11400204 	addi	r5,r2,8
 20016d0:	e0bf4d04 	addi	r2,fp,-716
 20016d4:	11000a04 	addi	r4,r2,40
 20016d8:	e0bf4d04 	addi	r2,fp,-716
 20016dc:	10c00204 	addi	r3,r2,8
 20016e0:	00800304 	movi	r2,12
 20016e4:	d8800115 	stw	r2,4(sp)
 20016e8:	e0bf6104 	addi	r2,fp,-636
 20016ec:	10801804 	addi	r2,r2,96
 20016f0:	d8800015 	stw	r2,0(sp)
 20016f4:	300f883a 	mov	r7,r6
 20016f8:	280d883a 	mov	r6,r5
 20016fc:	200b883a 	mov	r5,r4
 2001700:	1809883a 	mov	r4,r3
 2001704:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[1],ball[6],velocity[1],velocity[6],collision[13],13);
 2001708:	e0bfe504 	addi	r2,fp,-108
 200170c:	11800c04 	addi	r6,r2,48
 2001710:	e0bfe504 	addi	r2,fp,-108
 2001714:	11400204 	addi	r5,r2,8
 2001718:	e0bf4d04 	addi	r2,fp,-716
 200171c:	11000c04 	addi	r4,r2,48
 2001720:	e0bf4d04 	addi	r2,fp,-716
 2001724:	10c00204 	addi	r3,r2,8
 2001728:	00800344 	movi	r2,13
 200172c:	d8800115 	stw	r2,4(sp)
 2001730:	e0bf6104 	addi	r2,fp,-636
 2001734:	10801a04 	addi	r2,r2,104
 2001738:	d8800015 	stw	r2,0(sp)
 200173c:	300f883a 	mov	r7,r6
 2001740:	280d883a 	mov	r6,r5
 2001744:	200b883a 	mov	r5,r4
 2001748:	1809883a 	mov	r4,r3
 200174c:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[1],ball[7],velocity[1],velocity[7],collision[14],14);
 2001750:	e0bfe504 	addi	r2,fp,-108
 2001754:	11800e04 	addi	r6,r2,56
 2001758:	e0bfe504 	addi	r2,fp,-108
 200175c:	11400204 	addi	r5,r2,8
 2001760:	e0bf4d04 	addi	r2,fp,-716
 2001764:	11000e04 	addi	r4,r2,56
 2001768:	e0bf4d04 	addi	r2,fp,-716
 200176c:	10c00204 	addi	r3,r2,8
 2001770:	00800384 	movi	r2,14
 2001774:	d8800115 	stw	r2,4(sp)
 2001778:	e0bf6104 	addi	r2,fp,-636
 200177c:	10801c04 	addi	r2,r2,112
 2001780:	d8800015 	stw	r2,0(sp)
 2001784:	300f883a 	mov	r7,r6
 2001788:	280d883a 	mov	r6,r5
 200178c:	200b883a 	mov	r5,r4
 2001790:	1809883a 	mov	r4,r3
 2001794:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[1],ball[8],velocity[1],velocity[8],collision[15],15);
 2001798:	e0bfe504 	addi	r2,fp,-108
 200179c:	11801004 	addi	r6,r2,64
 20017a0:	e0bfe504 	addi	r2,fp,-108
 20017a4:	11400204 	addi	r5,r2,8
 20017a8:	e0bf4d04 	addi	r2,fp,-716
 20017ac:	11001004 	addi	r4,r2,64
 20017b0:	e0bf4d04 	addi	r2,fp,-716
 20017b4:	10c00204 	addi	r3,r2,8
 20017b8:	008003c4 	movi	r2,15
 20017bc:	d8800115 	stw	r2,4(sp)
 20017c0:	e0bf6104 	addi	r2,fp,-636
 20017c4:	10801e04 	addi	r2,r2,120
 20017c8:	d8800015 	stw	r2,0(sp)
 20017cc:	300f883a 	mov	r7,r6
 20017d0:	280d883a 	mov	r6,r5
 20017d4:	200b883a 	mov	r5,r4
 20017d8:	1809883a 	mov	r4,r3
 20017dc:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[1],ball[9],velocity[1],velocity[9],collision[16],16);
 20017e0:	e0bfe504 	addi	r2,fp,-108
 20017e4:	11801204 	addi	r6,r2,72
 20017e8:	e0bfe504 	addi	r2,fp,-108
 20017ec:	11400204 	addi	r5,r2,8
 20017f0:	e0bf4d04 	addi	r2,fp,-716
 20017f4:	11001204 	addi	r4,r2,72
 20017f8:	e0bf4d04 	addi	r2,fp,-716
 20017fc:	10c00204 	addi	r3,r2,8
 2001800:	00800404 	movi	r2,16
 2001804:	d8800115 	stw	r2,4(sp)
 2001808:	e0bf6104 	addi	r2,fp,-636
 200180c:	10802004 	addi	r2,r2,128
 2001810:	d8800015 	stw	r2,0(sp)
 2001814:	300f883a 	mov	r7,r6
 2001818:	280d883a 	mov	r6,r5
 200181c:	200b883a 	mov	r5,r4
 2001820:	1809883a 	mov	r4,r3
 2001824:	2002b900 	call	2002b90 <collide_calc>

	   collide_calc(ball[2],ball[3],velocity[2],velocity[3],collision[17],17);
 2001828:	e0bfe504 	addi	r2,fp,-108
 200182c:	11800604 	addi	r6,r2,24
 2001830:	e0bfe504 	addi	r2,fp,-108
 2001834:	11400404 	addi	r5,r2,16
 2001838:	e0bf4d04 	addi	r2,fp,-716
 200183c:	11000604 	addi	r4,r2,24
 2001840:	e0bf4d04 	addi	r2,fp,-716
 2001844:	10c00404 	addi	r3,r2,16
 2001848:	00800444 	movi	r2,17
 200184c:	d8800115 	stw	r2,4(sp)
 2001850:	e0bf6104 	addi	r2,fp,-636
 2001854:	10802204 	addi	r2,r2,136
 2001858:	d8800015 	stw	r2,0(sp)
 200185c:	300f883a 	mov	r7,r6
 2001860:	280d883a 	mov	r6,r5
 2001864:	200b883a 	mov	r5,r4
 2001868:	1809883a 	mov	r4,r3
 200186c:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[2],ball[4],velocity[2],velocity[4],collision[18],18);
 2001870:	e0bfe504 	addi	r2,fp,-108
 2001874:	11800804 	addi	r6,r2,32
 2001878:	e0bfe504 	addi	r2,fp,-108
 200187c:	11400404 	addi	r5,r2,16
 2001880:	e0bf4d04 	addi	r2,fp,-716
 2001884:	11000804 	addi	r4,r2,32
 2001888:	e0bf4d04 	addi	r2,fp,-716
 200188c:	10c00404 	addi	r3,r2,16
 2001890:	00800484 	movi	r2,18
 2001894:	d8800115 	stw	r2,4(sp)
 2001898:	e0bf6104 	addi	r2,fp,-636
 200189c:	10802404 	addi	r2,r2,144
 20018a0:	d8800015 	stw	r2,0(sp)
 20018a4:	300f883a 	mov	r7,r6
 20018a8:	280d883a 	mov	r6,r5
 20018ac:	200b883a 	mov	r5,r4
 20018b0:	1809883a 	mov	r4,r3
 20018b4:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[2],ball[5],velocity[2],velocity[5],collision[19],19);
 20018b8:	e0bfe504 	addi	r2,fp,-108
 20018bc:	11800a04 	addi	r6,r2,40
 20018c0:	e0bfe504 	addi	r2,fp,-108
 20018c4:	11400404 	addi	r5,r2,16
 20018c8:	e0bf4d04 	addi	r2,fp,-716
 20018cc:	11000a04 	addi	r4,r2,40
 20018d0:	e0bf4d04 	addi	r2,fp,-716
 20018d4:	10c00404 	addi	r3,r2,16
 20018d8:	008004c4 	movi	r2,19
 20018dc:	d8800115 	stw	r2,4(sp)
 20018e0:	e0bf6104 	addi	r2,fp,-636
 20018e4:	10802604 	addi	r2,r2,152
 20018e8:	d8800015 	stw	r2,0(sp)
 20018ec:	300f883a 	mov	r7,r6
 20018f0:	280d883a 	mov	r6,r5
 20018f4:	200b883a 	mov	r5,r4
 20018f8:	1809883a 	mov	r4,r3
 20018fc:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[2],ball[6],velocity[2],velocity[6],collision[20],20);
 2001900:	e0bfe504 	addi	r2,fp,-108
 2001904:	11800c04 	addi	r6,r2,48
 2001908:	e0bfe504 	addi	r2,fp,-108
 200190c:	11400404 	addi	r5,r2,16
 2001910:	e0bf4d04 	addi	r2,fp,-716
 2001914:	11000c04 	addi	r4,r2,48
 2001918:	e0bf4d04 	addi	r2,fp,-716
 200191c:	10c00404 	addi	r3,r2,16
 2001920:	00800504 	movi	r2,20
 2001924:	d8800115 	stw	r2,4(sp)
 2001928:	e0bf6104 	addi	r2,fp,-636
 200192c:	10802804 	addi	r2,r2,160
 2001930:	d8800015 	stw	r2,0(sp)
 2001934:	300f883a 	mov	r7,r6
 2001938:	280d883a 	mov	r6,r5
 200193c:	200b883a 	mov	r5,r4
 2001940:	1809883a 	mov	r4,r3
 2001944:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[2],ball[7],velocity[2],velocity[7],collision[21],21);
 2001948:	e0bfe504 	addi	r2,fp,-108
 200194c:	11800e04 	addi	r6,r2,56
 2001950:	e0bfe504 	addi	r2,fp,-108
 2001954:	11400404 	addi	r5,r2,16
 2001958:	e0bf4d04 	addi	r2,fp,-716
 200195c:	11000e04 	addi	r4,r2,56
 2001960:	e0bf4d04 	addi	r2,fp,-716
 2001964:	10c00404 	addi	r3,r2,16
 2001968:	00800544 	movi	r2,21
 200196c:	d8800115 	stw	r2,4(sp)
 2001970:	e0bf6104 	addi	r2,fp,-636
 2001974:	10802a04 	addi	r2,r2,168
 2001978:	d8800015 	stw	r2,0(sp)
 200197c:	300f883a 	mov	r7,r6
 2001980:	280d883a 	mov	r6,r5
 2001984:	200b883a 	mov	r5,r4
 2001988:	1809883a 	mov	r4,r3
 200198c:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[2],ball[8],velocity[2],velocity[8],collision[22],22);
 2001990:	e0bfe504 	addi	r2,fp,-108
 2001994:	11801004 	addi	r6,r2,64
 2001998:	e0bfe504 	addi	r2,fp,-108
 200199c:	11400404 	addi	r5,r2,16
 20019a0:	e0bf4d04 	addi	r2,fp,-716
 20019a4:	11001004 	addi	r4,r2,64
 20019a8:	e0bf4d04 	addi	r2,fp,-716
 20019ac:	10c00404 	addi	r3,r2,16
 20019b0:	00800584 	movi	r2,22
 20019b4:	d8800115 	stw	r2,4(sp)
 20019b8:	e0bf6104 	addi	r2,fp,-636
 20019bc:	10802c04 	addi	r2,r2,176
 20019c0:	d8800015 	stw	r2,0(sp)
 20019c4:	300f883a 	mov	r7,r6
 20019c8:	280d883a 	mov	r6,r5
 20019cc:	200b883a 	mov	r5,r4
 20019d0:	1809883a 	mov	r4,r3
 20019d4:	2002b900 	call	2002b90 <collide_calc>
       collide_calc(ball[2],ball[9],velocity[2],velocity[9],collision[23],23);
 20019d8:	e0bfe504 	addi	r2,fp,-108
 20019dc:	11801204 	addi	r6,r2,72
 20019e0:	e0bfe504 	addi	r2,fp,-108
 20019e4:	11400404 	addi	r5,r2,16
 20019e8:	e0bf4d04 	addi	r2,fp,-716
 20019ec:	11001204 	addi	r4,r2,72
 20019f0:	e0bf4d04 	addi	r2,fp,-716
 20019f4:	10c00404 	addi	r3,r2,16
 20019f8:	008005c4 	movi	r2,23
 20019fc:	d8800115 	stw	r2,4(sp)
 2001a00:	e0bf6104 	addi	r2,fp,-636
 2001a04:	10802e04 	addi	r2,r2,184
 2001a08:	d8800015 	stw	r2,0(sp)
 2001a0c:	300f883a 	mov	r7,r6
 2001a10:	280d883a 	mov	r6,r5
 2001a14:	200b883a 	mov	r5,r4
 2001a18:	1809883a 	mov	r4,r3
 2001a1c:	2002b900 	call	2002b90 <collide_calc>

       collide_calc(ball[3],ball[4],velocity[3],velocity[4],collision[24],24);
 2001a20:	e0bfe504 	addi	r2,fp,-108
 2001a24:	11800804 	addi	r6,r2,32
 2001a28:	e0bfe504 	addi	r2,fp,-108
 2001a2c:	11400604 	addi	r5,r2,24
 2001a30:	e0bf4d04 	addi	r2,fp,-716
 2001a34:	11000804 	addi	r4,r2,32
 2001a38:	e0bf4d04 	addi	r2,fp,-716
 2001a3c:	10c00604 	addi	r3,r2,24
 2001a40:	00800604 	movi	r2,24
 2001a44:	d8800115 	stw	r2,4(sp)
 2001a48:	e0bf6104 	addi	r2,fp,-636
 2001a4c:	10803004 	addi	r2,r2,192
 2001a50:	d8800015 	stw	r2,0(sp)
 2001a54:	300f883a 	mov	r7,r6
 2001a58:	280d883a 	mov	r6,r5
 2001a5c:	200b883a 	mov	r5,r4
 2001a60:	1809883a 	mov	r4,r3
 2001a64:	2002b900 	call	2002b90 <collide_calc>
 	   collide_calc(ball[3],ball[5],velocity[3],velocity[5],collision[25],25);
 2001a68:	e0bfe504 	addi	r2,fp,-108
 2001a6c:	11800a04 	addi	r6,r2,40
 2001a70:	e0bfe504 	addi	r2,fp,-108
 2001a74:	11400604 	addi	r5,r2,24
 2001a78:	e0bf4d04 	addi	r2,fp,-716
 2001a7c:	11000a04 	addi	r4,r2,40
 2001a80:	e0bf4d04 	addi	r2,fp,-716
 2001a84:	10c00604 	addi	r3,r2,24
 2001a88:	00800644 	movi	r2,25
 2001a8c:	d8800115 	stw	r2,4(sp)
 2001a90:	e0bf6104 	addi	r2,fp,-636
 2001a94:	10803204 	addi	r2,r2,200
 2001a98:	d8800015 	stw	r2,0(sp)
 2001a9c:	300f883a 	mov	r7,r6
 2001aa0:	280d883a 	mov	r6,r5
 2001aa4:	200b883a 	mov	r5,r4
 2001aa8:	1809883a 	mov	r4,r3
 2001aac:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[3],ball[6],velocity[3],velocity[6],collision[26],26);
 2001ab0:	e0bfe504 	addi	r2,fp,-108
 2001ab4:	11800c04 	addi	r6,r2,48
 2001ab8:	e0bfe504 	addi	r2,fp,-108
 2001abc:	11400604 	addi	r5,r2,24
 2001ac0:	e0bf4d04 	addi	r2,fp,-716
 2001ac4:	11000c04 	addi	r4,r2,48
 2001ac8:	e0bf4d04 	addi	r2,fp,-716
 2001acc:	10c00604 	addi	r3,r2,24
 2001ad0:	00800684 	movi	r2,26
 2001ad4:	d8800115 	stw	r2,4(sp)
 2001ad8:	e0bf6104 	addi	r2,fp,-636
 2001adc:	10803404 	addi	r2,r2,208
 2001ae0:	d8800015 	stw	r2,0(sp)
 2001ae4:	300f883a 	mov	r7,r6
 2001ae8:	280d883a 	mov	r6,r5
 2001aec:	200b883a 	mov	r5,r4
 2001af0:	1809883a 	mov	r4,r3
 2001af4:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[3],ball[7],velocity[3],velocity[7],collision[27],27);
 2001af8:	e0bfe504 	addi	r2,fp,-108
 2001afc:	11800e04 	addi	r6,r2,56
 2001b00:	e0bfe504 	addi	r2,fp,-108
 2001b04:	11400604 	addi	r5,r2,24
 2001b08:	e0bf4d04 	addi	r2,fp,-716
 2001b0c:	11000e04 	addi	r4,r2,56
 2001b10:	e0bf4d04 	addi	r2,fp,-716
 2001b14:	10c00604 	addi	r3,r2,24
 2001b18:	008006c4 	movi	r2,27
 2001b1c:	d8800115 	stw	r2,4(sp)
 2001b20:	e0bf6104 	addi	r2,fp,-636
 2001b24:	10803604 	addi	r2,r2,216
 2001b28:	d8800015 	stw	r2,0(sp)
 2001b2c:	300f883a 	mov	r7,r6
 2001b30:	280d883a 	mov	r6,r5
 2001b34:	200b883a 	mov	r5,r4
 2001b38:	1809883a 	mov	r4,r3
 2001b3c:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[3],ball[8],velocity[3],velocity[8],collision[28],28);
 2001b40:	e0bfe504 	addi	r2,fp,-108
 2001b44:	11801004 	addi	r6,r2,64
 2001b48:	e0bfe504 	addi	r2,fp,-108
 2001b4c:	11400604 	addi	r5,r2,24
 2001b50:	e0bf4d04 	addi	r2,fp,-716
 2001b54:	11001004 	addi	r4,r2,64
 2001b58:	e0bf4d04 	addi	r2,fp,-716
 2001b5c:	10c00604 	addi	r3,r2,24
 2001b60:	00800704 	movi	r2,28
 2001b64:	d8800115 	stw	r2,4(sp)
 2001b68:	e0bf6104 	addi	r2,fp,-636
 2001b6c:	10803804 	addi	r2,r2,224
 2001b70:	d8800015 	stw	r2,0(sp)
 2001b74:	300f883a 	mov	r7,r6
 2001b78:	280d883a 	mov	r6,r5
 2001b7c:	200b883a 	mov	r5,r4
 2001b80:	1809883a 	mov	r4,r3
 2001b84:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[3],ball[9],velocity[3],velocity[9],collision[29],29);
 2001b88:	e0bfe504 	addi	r2,fp,-108
 2001b8c:	11801204 	addi	r6,r2,72
 2001b90:	e0bfe504 	addi	r2,fp,-108
 2001b94:	11400604 	addi	r5,r2,24
 2001b98:	e0bf4d04 	addi	r2,fp,-716
 2001b9c:	11001204 	addi	r4,r2,72
 2001ba0:	e0bf4d04 	addi	r2,fp,-716
 2001ba4:	10c00604 	addi	r3,r2,24
 2001ba8:	00800744 	movi	r2,29
 2001bac:	d8800115 	stw	r2,4(sp)
 2001bb0:	e0bf6104 	addi	r2,fp,-636
 2001bb4:	10803a04 	addi	r2,r2,232
 2001bb8:	d8800015 	stw	r2,0(sp)
 2001bbc:	300f883a 	mov	r7,r6
 2001bc0:	280d883a 	mov	r6,r5
 2001bc4:	200b883a 	mov	r5,r4
 2001bc8:	1809883a 	mov	r4,r3
 2001bcc:	2002b900 	call	2002b90 <collide_calc>

	   collide_calc(ball[4],ball[5],velocity[4],velocity[5],collision[30],30);
 2001bd0:	e0bfe504 	addi	r2,fp,-108
 2001bd4:	11800a04 	addi	r6,r2,40
 2001bd8:	e0bfe504 	addi	r2,fp,-108
 2001bdc:	11400804 	addi	r5,r2,32
 2001be0:	e0bf4d04 	addi	r2,fp,-716
 2001be4:	11000a04 	addi	r4,r2,40
 2001be8:	e0bf4d04 	addi	r2,fp,-716
 2001bec:	10c00804 	addi	r3,r2,32
 2001bf0:	00800784 	movi	r2,30
 2001bf4:	d8800115 	stw	r2,4(sp)
 2001bf8:	e0bf6104 	addi	r2,fp,-636
 2001bfc:	10803c04 	addi	r2,r2,240
 2001c00:	d8800015 	stw	r2,0(sp)
 2001c04:	300f883a 	mov	r7,r6
 2001c08:	280d883a 	mov	r6,r5
 2001c0c:	200b883a 	mov	r5,r4
 2001c10:	1809883a 	mov	r4,r3
 2001c14:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[4],ball[6],velocity[4],velocity[6],collision[31],31);
 2001c18:	e0bfe504 	addi	r2,fp,-108
 2001c1c:	11800c04 	addi	r6,r2,48
 2001c20:	e0bfe504 	addi	r2,fp,-108
 2001c24:	11400804 	addi	r5,r2,32
 2001c28:	e0bf4d04 	addi	r2,fp,-716
 2001c2c:	11000c04 	addi	r4,r2,48
 2001c30:	e0bf4d04 	addi	r2,fp,-716
 2001c34:	10c00804 	addi	r3,r2,32
 2001c38:	008007c4 	movi	r2,31
 2001c3c:	d8800115 	stw	r2,4(sp)
 2001c40:	e0bf6104 	addi	r2,fp,-636
 2001c44:	10803e04 	addi	r2,r2,248
 2001c48:	d8800015 	stw	r2,0(sp)
 2001c4c:	300f883a 	mov	r7,r6
 2001c50:	280d883a 	mov	r6,r5
 2001c54:	200b883a 	mov	r5,r4
 2001c58:	1809883a 	mov	r4,r3
 2001c5c:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[4],ball[7],velocity[4],velocity[7],collision[32],32);
 2001c60:	e0bfe504 	addi	r2,fp,-108
 2001c64:	11800e04 	addi	r6,r2,56
 2001c68:	e0bfe504 	addi	r2,fp,-108
 2001c6c:	11400804 	addi	r5,r2,32
 2001c70:	e0bf4d04 	addi	r2,fp,-716
 2001c74:	11000e04 	addi	r4,r2,56
 2001c78:	e0bf4d04 	addi	r2,fp,-716
 2001c7c:	10c00804 	addi	r3,r2,32
 2001c80:	00800804 	movi	r2,32
 2001c84:	d8800115 	stw	r2,4(sp)
 2001c88:	e0bf6104 	addi	r2,fp,-636
 2001c8c:	10804004 	addi	r2,r2,256
 2001c90:	d8800015 	stw	r2,0(sp)
 2001c94:	300f883a 	mov	r7,r6
 2001c98:	280d883a 	mov	r6,r5
 2001c9c:	200b883a 	mov	r5,r4
 2001ca0:	1809883a 	mov	r4,r3
 2001ca4:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[4],ball[8],velocity[4],velocity[8],collision[33],33);
 2001ca8:	e0bfe504 	addi	r2,fp,-108
 2001cac:	11801004 	addi	r6,r2,64
 2001cb0:	e0bfe504 	addi	r2,fp,-108
 2001cb4:	11400804 	addi	r5,r2,32
 2001cb8:	e0bf4d04 	addi	r2,fp,-716
 2001cbc:	11001004 	addi	r4,r2,64
 2001cc0:	e0bf4d04 	addi	r2,fp,-716
 2001cc4:	10c00804 	addi	r3,r2,32
 2001cc8:	00800844 	movi	r2,33
 2001ccc:	d8800115 	stw	r2,4(sp)
 2001cd0:	e0bf6104 	addi	r2,fp,-636
 2001cd4:	10804204 	addi	r2,r2,264
 2001cd8:	d8800015 	stw	r2,0(sp)
 2001cdc:	300f883a 	mov	r7,r6
 2001ce0:	280d883a 	mov	r6,r5
 2001ce4:	200b883a 	mov	r5,r4
 2001ce8:	1809883a 	mov	r4,r3
 2001cec:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[4],ball[9],velocity[4],velocity[9],collision[34],34);
 2001cf0:	e0bfe504 	addi	r2,fp,-108
 2001cf4:	11801204 	addi	r6,r2,72
 2001cf8:	e0bfe504 	addi	r2,fp,-108
 2001cfc:	11400804 	addi	r5,r2,32
 2001d00:	e0bf4d04 	addi	r2,fp,-716
 2001d04:	11001204 	addi	r4,r2,72
 2001d08:	e0bf4d04 	addi	r2,fp,-716
 2001d0c:	10c00804 	addi	r3,r2,32
 2001d10:	00800884 	movi	r2,34
 2001d14:	d8800115 	stw	r2,4(sp)
 2001d18:	e0bf6104 	addi	r2,fp,-636
 2001d1c:	10804404 	addi	r2,r2,272
 2001d20:	d8800015 	stw	r2,0(sp)
 2001d24:	300f883a 	mov	r7,r6
 2001d28:	280d883a 	mov	r6,r5
 2001d2c:	200b883a 	mov	r5,r4
 2001d30:	1809883a 	mov	r4,r3
 2001d34:	2002b900 	call	2002b90 <collide_calc>

	   collide_calc(ball[5],ball[6],velocity[5],velocity[6],collision[35],35);
 2001d38:	e0bfe504 	addi	r2,fp,-108
 2001d3c:	11800c04 	addi	r6,r2,48
 2001d40:	e0bfe504 	addi	r2,fp,-108
 2001d44:	11400a04 	addi	r5,r2,40
 2001d48:	e0bf4d04 	addi	r2,fp,-716
 2001d4c:	11000c04 	addi	r4,r2,48
 2001d50:	e0bf4d04 	addi	r2,fp,-716
 2001d54:	10c00a04 	addi	r3,r2,40
 2001d58:	008008c4 	movi	r2,35
 2001d5c:	d8800115 	stw	r2,4(sp)
 2001d60:	e0bf6104 	addi	r2,fp,-636
 2001d64:	10804604 	addi	r2,r2,280
 2001d68:	d8800015 	stw	r2,0(sp)
 2001d6c:	300f883a 	mov	r7,r6
 2001d70:	280d883a 	mov	r6,r5
 2001d74:	200b883a 	mov	r5,r4
 2001d78:	1809883a 	mov	r4,r3
 2001d7c:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[5],ball[7],velocity[5],velocity[7],collision[36],36);
 2001d80:	e0bfe504 	addi	r2,fp,-108
 2001d84:	11800e04 	addi	r6,r2,56
 2001d88:	e0bfe504 	addi	r2,fp,-108
 2001d8c:	11400a04 	addi	r5,r2,40
 2001d90:	e0bf4d04 	addi	r2,fp,-716
 2001d94:	11000e04 	addi	r4,r2,56
 2001d98:	e0bf4d04 	addi	r2,fp,-716
 2001d9c:	10c00a04 	addi	r3,r2,40
 2001da0:	00800904 	movi	r2,36
 2001da4:	d8800115 	stw	r2,4(sp)
 2001da8:	e0bf6104 	addi	r2,fp,-636
 2001dac:	10804804 	addi	r2,r2,288
 2001db0:	d8800015 	stw	r2,0(sp)
 2001db4:	300f883a 	mov	r7,r6
 2001db8:	280d883a 	mov	r6,r5
 2001dbc:	200b883a 	mov	r5,r4
 2001dc0:	1809883a 	mov	r4,r3
 2001dc4:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[5],ball[8],velocity[5],velocity[8],collision[37],37);
 2001dc8:	e0bfe504 	addi	r2,fp,-108
 2001dcc:	11801004 	addi	r6,r2,64
 2001dd0:	e0bfe504 	addi	r2,fp,-108
 2001dd4:	11400a04 	addi	r5,r2,40
 2001dd8:	e0bf4d04 	addi	r2,fp,-716
 2001ddc:	11001004 	addi	r4,r2,64
 2001de0:	e0bf4d04 	addi	r2,fp,-716
 2001de4:	10c00a04 	addi	r3,r2,40
 2001de8:	00800944 	movi	r2,37
 2001dec:	d8800115 	stw	r2,4(sp)
 2001df0:	e0bf6104 	addi	r2,fp,-636
 2001df4:	10804a04 	addi	r2,r2,296
 2001df8:	d8800015 	stw	r2,0(sp)
 2001dfc:	300f883a 	mov	r7,r6
 2001e00:	280d883a 	mov	r6,r5
 2001e04:	200b883a 	mov	r5,r4
 2001e08:	1809883a 	mov	r4,r3
 2001e0c:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[5],ball[9],velocity[5],velocity[9],collision[38],38);
 2001e10:	e0bfe504 	addi	r2,fp,-108
 2001e14:	11801204 	addi	r6,r2,72
 2001e18:	e0bfe504 	addi	r2,fp,-108
 2001e1c:	11400a04 	addi	r5,r2,40
 2001e20:	e0bf4d04 	addi	r2,fp,-716
 2001e24:	11001204 	addi	r4,r2,72
 2001e28:	e0bf4d04 	addi	r2,fp,-716
 2001e2c:	10c00a04 	addi	r3,r2,40
 2001e30:	00800984 	movi	r2,38
 2001e34:	d8800115 	stw	r2,4(sp)
 2001e38:	e0bf6104 	addi	r2,fp,-636
 2001e3c:	10804c04 	addi	r2,r2,304
 2001e40:	d8800015 	stw	r2,0(sp)
 2001e44:	300f883a 	mov	r7,r6
 2001e48:	280d883a 	mov	r6,r5
 2001e4c:	200b883a 	mov	r5,r4
 2001e50:	1809883a 	mov	r4,r3
 2001e54:	2002b900 	call	2002b90 <collide_calc>

	   collide_calc(ball[6],ball[7],velocity[6],velocity[7],collision[39],39);
 2001e58:	e0bfe504 	addi	r2,fp,-108
 2001e5c:	11800e04 	addi	r6,r2,56
 2001e60:	e0bfe504 	addi	r2,fp,-108
 2001e64:	11400c04 	addi	r5,r2,48
 2001e68:	e0bf4d04 	addi	r2,fp,-716
 2001e6c:	11000e04 	addi	r4,r2,56
 2001e70:	e0bf4d04 	addi	r2,fp,-716
 2001e74:	10c00c04 	addi	r3,r2,48
 2001e78:	008009c4 	movi	r2,39
 2001e7c:	d8800115 	stw	r2,4(sp)
 2001e80:	e0bf6104 	addi	r2,fp,-636
 2001e84:	10804e04 	addi	r2,r2,312
 2001e88:	d8800015 	stw	r2,0(sp)
 2001e8c:	300f883a 	mov	r7,r6
 2001e90:	280d883a 	mov	r6,r5
 2001e94:	200b883a 	mov	r5,r4
 2001e98:	1809883a 	mov	r4,r3
 2001e9c:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[6],ball[8],velocity[6],velocity[8],collision[40],40);
 2001ea0:	e0bfe504 	addi	r2,fp,-108
 2001ea4:	11801004 	addi	r6,r2,64
 2001ea8:	e0bfe504 	addi	r2,fp,-108
 2001eac:	11400c04 	addi	r5,r2,48
 2001eb0:	e0bf4d04 	addi	r2,fp,-716
 2001eb4:	11001004 	addi	r4,r2,64
 2001eb8:	e0bf4d04 	addi	r2,fp,-716
 2001ebc:	10c00c04 	addi	r3,r2,48
 2001ec0:	00800a04 	movi	r2,40
 2001ec4:	d8800115 	stw	r2,4(sp)
 2001ec8:	e0bf6104 	addi	r2,fp,-636
 2001ecc:	10805004 	addi	r2,r2,320
 2001ed0:	d8800015 	stw	r2,0(sp)
 2001ed4:	300f883a 	mov	r7,r6
 2001ed8:	280d883a 	mov	r6,r5
 2001edc:	200b883a 	mov	r5,r4
 2001ee0:	1809883a 	mov	r4,r3
 2001ee4:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[6],ball[9],velocity[6],velocity[9],collision[41],41);
 2001ee8:	e0bfe504 	addi	r2,fp,-108
 2001eec:	11801204 	addi	r6,r2,72
 2001ef0:	e0bfe504 	addi	r2,fp,-108
 2001ef4:	11400c04 	addi	r5,r2,48
 2001ef8:	e0bf4d04 	addi	r2,fp,-716
 2001efc:	11001204 	addi	r4,r2,72
 2001f00:	e0bf4d04 	addi	r2,fp,-716
 2001f04:	10c00c04 	addi	r3,r2,48
 2001f08:	00800a44 	movi	r2,41
 2001f0c:	d8800115 	stw	r2,4(sp)
 2001f10:	e0bf6104 	addi	r2,fp,-636
 2001f14:	10805204 	addi	r2,r2,328
 2001f18:	d8800015 	stw	r2,0(sp)
 2001f1c:	300f883a 	mov	r7,r6
 2001f20:	280d883a 	mov	r6,r5
 2001f24:	200b883a 	mov	r5,r4
 2001f28:	1809883a 	mov	r4,r3
 2001f2c:	2002b900 	call	2002b90 <collide_calc>

	   collide_calc(ball[7],ball[8],velocity[7],velocity[8],collision[42],42);
 2001f30:	e0bfe504 	addi	r2,fp,-108
 2001f34:	11801004 	addi	r6,r2,64
 2001f38:	e0bfe504 	addi	r2,fp,-108
 2001f3c:	11400e04 	addi	r5,r2,56
 2001f40:	e0bf4d04 	addi	r2,fp,-716
 2001f44:	11001004 	addi	r4,r2,64
 2001f48:	e0bf4d04 	addi	r2,fp,-716
 2001f4c:	10c00e04 	addi	r3,r2,56
 2001f50:	00800a84 	movi	r2,42
 2001f54:	d8800115 	stw	r2,4(sp)
 2001f58:	e0bf6104 	addi	r2,fp,-636
 2001f5c:	10805404 	addi	r2,r2,336
 2001f60:	d8800015 	stw	r2,0(sp)
 2001f64:	300f883a 	mov	r7,r6
 2001f68:	280d883a 	mov	r6,r5
 2001f6c:	200b883a 	mov	r5,r4
 2001f70:	1809883a 	mov	r4,r3
 2001f74:	2002b900 	call	2002b90 <collide_calc>
	   collide_calc(ball[7],ball[9],velocity[7],velocity[9],collision[43],43);
 2001f78:	e0bfe504 	addi	r2,fp,-108
 2001f7c:	11801204 	addi	r6,r2,72
 2001f80:	e0bfe504 	addi	r2,fp,-108
 2001f84:	11400e04 	addi	r5,r2,56
 2001f88:	e0bf4d04 	addi	r2,fp,-716
 2001f8c:	11001204 	addi	r4,r2,72
 2001f90:	e0bf4d04 	addi	r2,fp,-716
 2001f94:	10c00e04 	addi	r3,r2,56
 2001f98:	00800ac4 	movi	r2,43
 2001f9c:	d8800115 	stw	r2,4(sp)
 2001fa0:	e0bf6104 	addi	r2,fp,-636
 2001fa4:	10805604 	addi	r2,r2,344
 2001fa8:	d8800015 	stw	r2,0(sp)
 2001fac:	300f883a 	mov	r7,r6
 2001fb0:	280d883a 	mov	r6,r5
 2001fb4:	200b883a 	mov	r5,r4
 2001fb8:	1809883a 	mov	r4,r3
 2001fbc:	2002b900 	call	2002b90 <collide_calc>

	   collide_calc(ball[8],ball[9],velocity[7],velocity[9],collision[44],44);
 2001fc0:	e0bfe504 	addi	r2,fp,-108
 2001fc4:	11801204 	addi	r6,r2,72
 2001fc8:	e0bfe504 	addi	r2,fp,-108
 2001fcc:	11400e04 	addi	r5,r2,56
 2001fd0:	e0bf4d04 	addi	r2,fp,-716
 2001fd4:	11001204 	addi	r4,r2,72
 2001fd8:	e0bf4d04 	addi	r2,fp,-716
 2001fdc:	10c01004 	addi	r3,r2,64
 2001fe0:	00800b04 	movi	r2,44
 2001fe4:	d8800115 	stw	r2,4(sp)
 2001fe8:	e0bf6104 	addi	r2,fp,-636
 2001fec:	10805804 	addi	r2,r2,352
 2001ff0:	d8800015 	stw	r2,0(sp)
 2001ff4:	300f883a 	mov	r7,r6
 2001ff8:	280d883a 	mov	r6,r5
 2001ffc:	200b883a 	mov	r5,r4
 2002000:	1809883a 	mov	r4,r3
 2002004:	2002b900 	call	2002b90 <collide_calc>


	   // Damping factor

  	   damping(velocity[0]);
 2002008:	e0bfe504 	addi	r2,fp,-108
 200200c:	1009883a 	mov	r4,r2
 2002010:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[1]);
 2002014:	e0bfe504 	addi	r2,fp,-108
 2002018:	10800204 	addi	r2,r2,8
 200201c:	1009883a 	mov	r4,r2
 2002020:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[2]);
 2002024:	e0bfe504 	addi	r2,fp,-108
 2002028:	10800404 	addi	r2,r2,16
 200202c:	1009883a 	mov	r4,r2
 2002030:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[3]);
 2002034:	e0bfe504 	addi	r2,fp,-108
 2002038:	10800604 	addi	r2,r2,24
 200203c:	1009883a 	mov	r4,r2
 2002040:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[4]);
 2002044:	e0bfe504 	addi	r2,fp,-108
 2002048:	10800804 	addi	r2,r2,32
 200204c:	1009883a 	mov	r4,r2
 2002050:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[5]);
 2002054:	e0bfe504 	addi	r2,fp,-108
 2002058:	10800a04 	addi	r2,r2,40
 200205c:	1009883a 	mov	r4,r2
 2002060:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[6]);
 2002064:	e0bfe504 	addi	r2,fp,-108
 2002068:	10800c04 	addi	r2,r2,48
 200206c:	1009883a 	mov	r4,r2
 2002070:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[7]);
 2002074:	e0bfe504 	addi	r2,fp,-108
 2002078:	10800e04 	addi	r2,r2,56
 200207c:	1009883a 	mov	r4,r2
 2002080:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[8]);
 2002084:	e0bfe504 	addi	r2,fp,-108
 2002088:	10801004 	addi	r2,r2,64
 200208c:	1009883a 	mov	r4,r2
 2002090:	20030d00 	call	20030d0 <damping>
  	   damping(velocity[9]);
 2002094:	e0bfe504 	addi	r2,fp,-108
 2002098:	10801204 	addi	r2,r2,72
 200209c:	1009883a 	mov	r4,r2
 20020a0:	20030d00 	call	20030d0 <damping>

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 20020a4:	e0bfe504 	addi	r2,fp,-108
 20020a8:	1009883a 	mov	r4,r2
 20020ac:	2002a6c0 	call	2002a6c <momentum>
 20020b0:	1021883a 	mov	r16,r2
 20020b4:	e0bfe504 	addi	r2,fp,-108
 20020b8:	10800204 	addi	r2,r2,8
 20020bc:	1009883a 	mov	r4,r2
 20020c0:	2002a6c0 	call	2002a6c <momentum>
 20020c4:	1007883a 	mov	r3,r2
 20020c8:	80e1ff72 	custom	253,r16,r16,r3
 20020cc:	e0bfe504 	addi	r2,fp,-108
 20020d0:	10800404 	addi	r2,r2,16
 20020d4:	1009883a 	mov	r4,r2
 20020d8:	2002a6c0 	call	2002a6c <momentum>
 20020dc:	1007883a 	mov	r3,r2
 20020e0:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
 20020e4:	e0bfe504 	addi	r2,fp,-108
 20020e8:	10800604 	addi	r2,r2,24
 20020ec:	1009883a 	mov	r4,r2
 20020f0:	2002a6c0 	call	2002a6c <momentum>
 20020f4:	1007883a 	mov	r3,r2
 20020f8:	80e1ff72 	custom	253,r16,r16,r3
 20020fc:	e0bfe504 	addi	r2,fp,-108
 2002100:	10800804 	addi	r2,r2,32
 2002104:	1009883a 	mov	r4,r2
 2002108:	2002a6c0 	call	2002a6c <momentum>
 200210c:	1007883a 	mov	r3,r2
 2002110:	80e1ff72 	custom	253,r16,r16,r3
 2002114:	e0bfe504 	addi	r2,fp,-108
 2002118:	10800a04 	addi	r2,r2,40
 200211c:	1009883a 	mov	r4,r2
 2002120:	2002a6c0 	call	2002a6c <momentum>
 2002124:	1007883a 	mov	r3,r2
 2002128:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
 200212c:	e0bfe504 	addi	r2,fp,-108
 2002130:	10800c04 	addi	r2,r2,48
 2002134:	1009883a 	mov	r4,r2
 2002138:	2002a6c0 	call	2002a6c <momentum>
 200213c:	1007883a 	mov	r3,r2
 2002140:	80e1ff72 	custom	253,r16,r16,r3
 2002144:	e0bfe504 	addi	r2,fp,-108
 2002148:	10800e04 	addi	r2,r2,56
 200214c:	1009883a 	mov	r4,r2
 2002150:	2002a6c0 	call	2002a6c <momentum>
 2002154:	1007883a 	mov	r3,r2
 2002158:	80e1ff72 	custom	253,r16,r16,r3
 200215c:	e0bfe504 	addi	r2,fp,-108
 2002160:	10801004 	addi	r2,r2,64
 2002164:	1009883a 	mov	r4,r2
 2002168:	2002a6c0 	call	2002a6c <momentum>
 200216c:	1007883a 	mov	r3,r2
 2002170:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[9]);
 2002174:	e0bfe504 	addi	r2,fp,-108
 2002178:	10801204 	addi	r2,r2,72
 200217c:	1009883a 	mov	r4,r2
 2002180:	2002a6c0 	call	2002a6c <momentum>
 2002184:	1007883a 	mov	r3,r2
  	   damping(velocity[6]);
  	   damping(velocity[7]);
  	   damping(velocity[8]);
  	   damping(velocity[9]);

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 2002188:	80c5ff72 	custom	253,r2,r16,r3
 200218c:	e0bf4315 	stw	r2,-756(fp)
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
    		+momentum(velocity[9]);


       IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 2002190:	e0bf4417 	ldw	r2,-752(fp)
 2002194:	10800104 	addi	r2,r2,4
 2002198:	e0ff4e17 	ldw	r3,-712(fp)
 200219c:	1807fe72 	custom	249,r3,r3,zero
 20021a0:	180892ba 	slli	r4,r3,10
 20021a4:	e0ff4d17 	ldw	r3,-716(fp)
 20021a8:	1807fe72 	custom	249,r3,r3,zero
 20021ac:	20c7883a 	add	r3,r4,r3
 20021b0:	10c00035 	stwio	r3,0(r2)
       IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 20021b4:	e0bf4417 	ldw	r2,-752(fp)
 20021b8:	10800204 	addi	r2,r2,8
 20021bc:	e0ff5017 	ldw	r3,-704(fp)
 20021c0:	1807fe72 	custom	249,r3,r3,zero
 20021c4:	180892ba 	slli	r4,r3,10
 20021c8:	e0ff4f17 	ldw	r3,-708(fp)
 20021cc:	1807fe72 	custom	249,r3,r3,zero
 20021d0:	20c7883a 	add	r3,r4,r3
 20021d4:	10c00035 	stwio	r3,0(r2)
       IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 20021d8:	e0bf4417 	ldw	r2,-752(fp)
 20021dc:	10800304 	addi	r2,r2,12
 20021e0:	e0ff5217 	ldw	r3,-696(fp)
 20021e4:	1807fe72 	custom	249,r3,r3,zero
 20021e8:	180892ba 	slli	r4,r3,10
 20021ec:	e0ff5117 	ldw	r3,-700(fp)
 20021f0:	1807fe72 	custom	249,r3,r3,zero
 20021f4:	20c7883a 	add	r3,r4,r3
 20021f8:	10c00035 	stwio	r3,0(r2)
       IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 20021fc:	e0bf4417 	ldw	r2,-752(fp)
 2002200:	10800404 	addi	r2,r2,16
 2002204:	e0ff5417 	ldw	r3,-688(fp)
 2002208:	1807fe72 	custom	249,r3,r3,zero
 200220c:	180892ba 	slli	r4,r3,10
 2002210:	e0ff5317 	ldw	r3,-692(fp)
 2002214:	1807fe72 	custom	249,r3,r3,zero
 2002218:	20c7883a 	add	r3,r4,r3
 200221c:	10c00035 	stwio	r3,0(r2)
       IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2002220:	e0bf4417 	ldw	r2,-752(fp)
 2002224:	10800504 	addi	r2,r2,20
 2002228:	e0ff5617 	ldw	r3,-680(fp)
 200222c:	1807fe72 	custom	249,r3,r3,zero
 2002230:	180892ba 	slli	r4,r3,10
 2002234:	e0ff5517 	ldw	r3,-684(fp)
 2002238:	1807fe72 	custom	249,r3,r3,zero
 200223c:	20c7883a 	add	r3,r4,r3
 2002240:	10c00035 	stwio	r3,0(r2)
       IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 2002244:	e0bf4417 	ldw	r2,-752(fp)
 2002248:	10800604 	addi	r2,r2,24
 200224c:	e0ff5817 	ldw	r3,-672(fp)
 2002250:	1807fe72 	custom	249,r3,r3,zero
 2002254:	180892ba 	slli	r4,r3,10
 2002258:	e0ff5717 	ldw	r3,-676(fp)
 200225c:	1807fe72 	custom	249,r3,r3,zero
 2002260:	20c7883a 	add	r3,r4,r3
 2002264:	10c00035 	stwio	r3,0(r2)
       IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 2002268:	e0bf4417 	ldw	r2,-752(fp)
 200226c:	10800704 	addi	r2,r2,28
 2002270:	e0ff5a17 	ldw	r3,-664(fp)
 2002274:	1807fe72 	custom	249,r3,r3,zero
 2002278:	180892ba 	slli	r4,r3,10
 200227c:	e0ff5917 	ldw	r3,-668(fp)
 2002280:	1807fe72 	custom	249,r3,r3,zero
 2002284:	20c7883a 	add	r3,r4,r3
 2002288:	10c00035 	stwio	r3,0(r2)
       IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 200228c:	e0bf4417 	ldw	r2,-752(fp)
 2002290:	10800804 	addi	r2,r2,32
 2002294:	e0ff5c17 	ldw	r3,-656(fp)
 2002298:	1807fe72 	custom	249,r3,r3,zero
 200229c:	180892ba 	slli	r4,r3,10
 20022a0:	e0ff5b17 	ldw	r3,-660(fp)
 20022a4:	1807fe72 	custom	249,r3,r3,zero
 20022a8:	20c7883a 	add	r3,r4,r3
 20022ac:	10c00035 	stwio	r3,0(r2)
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 20022b0:	e0bf4417 	ldw	r2,-752(fp)
 20022b4:	10800904 	addi	r2,r2,36
 20022b8:	e0ff5e17 	ldw	r3,-648(fp)
 20022bc:	1807fe72 	custom	249,r3,r3,zero
 20022c0:	180892ba 	slli	r4,r3,10
 20022c4:	e0ff5d17 	ldw	r3,-652(fp)
 20022c8:	1807fe72 	custom	249,r3,r3,zero
 20022cc:	20c7883a 	add	r3,r4,r3
 20022d0:	10c00035 	stwio	r3,0(r2)
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 20022d4:	e0bf4417 	ldw	r2,-752(fp)
 20022d8:	10800a04 	addi	r2,r2,40
 20022dc:	e0ff6017 	ldw	r3,-640(fp)
 20022e0:	1807fe72 	custom	249,r3,r3,zero
 20022e4:	180892ba 	slli	r4,r3,10
 20022e8:	e0ff5f17 	ldw	r3,-644(fp)
 20022ec:	1807fe72 	custom	249,r3,r3,zero
 20022f0:	20c7883a 	add	r3,r4,r3
 20022f4:	10c00035 	stwio	r3,0(r2)
       OSTimeDlyHMSM(0, 0, 0, 4);
 20022f8:	01c00104 	movi	r7,4
 20022fc:	000d883a 	mov	r6,zero
 2002300:	000b883a 	mov	r5,zero
 2002304:	0009883a 	mov	r4,zero
 2002308:	201e7d00 	call	201e7d0 <OSTimeDlyHMSM>

   printf("Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)\n",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};

   while(speed >= 0.1)
 200230c:	e13f4317 	ldw	r4,-756(fp)
 2002310:	20071d80 	call	20071d8 <__extendsfdf2>
 2002314:	1011883a 	mov	r8,r2
 2002318:	1813883a 	mov	r9,r3
 200231c:	01a666b4 	movhi	r6,39322
 2002320:	31a66684 	addi	r6,r6,-26214
 2002324:	01cfeeb4 	movhi	r7,16314
 2002328:	39e66644 	addi	r7,r7,-26215
 200232c:	4009883a 	mov	r4,r8
 2002330:	480b883a 	mov	r5,r9
 2002334:	20068f00 	call	20068f0 <__gedf2>
 2002338:	1039620e 	bge	r2,zero,20008c4 <task2+0x420>
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
       OSTimeDlyHMSM(0, 0, 0, 4);

   }
   OSTimeDlyHMSM(0, 0, 0, 500);
 200233c:	01c07d04 	movi	r7,500
 2002340:	000d883a 	mov	r6,zero
 2002344:	000b883a 	mov	r5,zero
 2002348:	0009883a 	mov	r4,zero
 200234c:	201e7d00 	call	201e7d0 <OSTimeDlyHMSM>

   printf("Animation termine\n");
 2002350:	010080b4 	movhi	r4,514
 2002354:	21055b04 	addi	r4,r4,5484
 2002358:	2007bf80 	call	2007bf8 <puts>

   OSTimeDlyHMSM(0, 0, 0, 100);
 200235c:	01c01904 	movi	r7,100
 2002360:	000d883a 	mov	r6,zero
 2002364:	000b883a 	mov	r5,zero
 2002368:	0009883a 	mov	r4,zero
 200236c:	201e7d00 	call	201e7d0 <OSTimeDlyHMSM>

   opt_task2= OS_FLAG_CLR;
 2002370:	e03f4505 	stb	zero,-748(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2002374:	d0a78217 	ldw	r2,-25080(gp)
 2002378:	e0ff4503 	ldbu	r3,-748(fp)
 200237c:	e13f4c04 	addi	r4,fp,-720
 2002380:	200f883a 	mov	r7,r4
 2002384:	180d883a 	mov	r6,r3
 2002388:	01400044 	movi	r5,1
 200238c:	1009883a 	mov	r4,r2
 2002390:	20199b00 	call	20199b0 <OSFlagPost>
  }
 2002394:	0038c106 	br	200069c <task2+0x1f8>

02002398 <task3>:
}


void task3(void* pdata)
{
 2002398:	defff204 	addi	sp,sp,-56
 200239c:	dfc00d15 	stw	ra,52(sp)
 20023a0:	df000c15 	stw	fp,48(sp)
 20023a4:	df000c04 	addi	fp,sp,48
 20023a8:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	INT8U opt_task1;

	int activePlayer = 1;
 20023ac:	00800044 	movi	r2,1
 20023b0:	e0bff515 	stw	r2,-44(fp)

	int * XdirSend = (int*) MEM_NIOS_PI_BASE+1;
 20023b4:	00800834 	movhi	r2,32
 20023b8:	10800104 	addi	r2,r2,4
 20023bc:	e0bff615 	stw	r2,-40(fp)
	int * YdirSend = (int*) MEM_NIOS_PI_BASE+2;
 20023c0:	00800834 	movhi	r2,32
 20023c4:	10800204 	addi	r2,r2,8
 20023c8:	e0bff715 	stw	r2,-36(fp)
	int * isSend = (int*) MEM_NIOS_PI_BASE+3;
 20023cc:	00800834 	movhi	r2,32
 20023d0:	10800304 	addi	r2,r2,12
 20023d4:	e0bff815 	stw	r2,-32(fp)
	int * isReceived = (int*) MEM_NIOS_PI_BASE+4;
 20023d8:	00800834 	movhi	r2,32
 20023dc:	10800404 	addi	r2,r2,16
 20023e0:	e0bff915 	stw	r2,-28(fp)
	//int * AckSend     = (int*) MEM_NIOS_PI_BASE+5;
	//int * AckReceived     = (int*) MEM_NIOS_PI_BASE+6;
	int * XdirRec = (int*) MEM_NIOS_PI_BASE+7;
 20023e4:	00800834 	movhi	r2,32
 20023e8:	10800704 	addi	r2,r2,28
 20023ec:	e0bffa15 	stw	r2,-24(fp)
	int * YdirRec = (int*) MEM_NIOS_PI_BASE+8;
 20023f0:	00800834 	movhi	r2,32
 20023f4:	10800804 	addi	r2,r2,32
 20023f8:	e0bffb15 	stw	r2,-20(fp)
	//int * speedRec = (int*) MEM_NIOS_PI_BASE+9;

	*XdirSend =0;
 20023fc:	e0bff617 	ldw	r2,-40(fp)
 2002400:	10000015 	stw	zero,0(r2)
	*XdirRec =0;
 2002404:	e0bffa17 	ldw	r2,-24(fp)
 2002408:	10000015 	stw	zero,0(r2)
	*isSend = 0;
 200240c:	e0bff817 	ldw	r2,-32(fp)
 2002410:	10000015 	stw	zero,0(r2)
	*isReceived = 0;
 2002414:	e0bff917 	ldw	r2,-28(fp)
 2002418:	10000015 	stw	zero,0(r2)
	*YdirSend =0;
 200241c:	e0bff717 	ldw	r2,-36(fp)
 2002420:	10000015 	stw	zero,0(r2)
	*YdirRec = 0;
 2002424:	e0bffb17 	ldw	r2,-20(fp)
 2002428:	10000015 	stw	zero,0(r2)
	 * 	-> Envoi les données ensuite on prévient le Raspberry qu'il y a de nouvelle donnée disponible
	 * 	-> Envoi les données à la tâche 3 + lance l'animation
	 * 	-> Désactive la tâche 1
	 * */

	 if(!*isReceived && activePlayer){
 200242c:	e0bff917 	ldw	r2,-28(fp)
 2002430:	10800017 	ldw	r2,0(r2)
 2002434:	10004a1e 	bne	r2,zero,2002560 <task3+0x1c8>
 2002438:	e0bff517 	ldw	r2,-44(fp)
 200243c:	10004826 	beq	r2,zero,2002560 <task3+0x1c8>
		  OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 2002440:	d0a78a17 	ldw	r2,-25048(gp)
 2002444:	e0fffe44 	addi	r3,fp,-7
 2002448:	180f883a 	mov	r7,r3
 200244c:	01800044 	movi	r6,1
 2002450:	01400044 	movi	r5,1
 2002454:	1009883a 	mov	r4,r2
 2002458:	20199b00 	call	20199b0 <OSFlagPost>
		  printf("Wait for value from task 1\n");
 200245c:	010080b4 	movhi	r4,514
 2002460:	21057404 	addi	r4,r4,5584
 2002464:	2007bf80 	call	2007bf8 <puts>
		  int *vector_x = (int *) OSMboxPend(MailBox1,0,&err);
 2002468:	d0a78917 	ldw	r2,-25052(gp)
 200246c:	e0fffe44 	addi	r3,fp,-7
 2002470:	180d883a 	mov	r6,r3
 2002474:	000b883a 	mov	r5,zero
 2002478:	1009883a 	mov	r4,r2
 200247c:	201a58c0 	call	201a58c <OSMboxPend>
 2002480:	e0bffc15 	stw	r2,-16(fp)
		  int *vector_y = (int *) OSMboxPend(MailBox2,0,&err);
 2002484:	d0a78517 	ldw	r2,-25068(gp)
 2002488:	e0fffe44 	addi	r3,fp,-7
 200248c:	180d883a 	mov	r6,r3
 2002490:	000b883a 	mov	r5,zero
 2002494:	1009883a 	mov	r4,r2
 2002498:	201a58c0 	call	201a58c <OSMboxPend>
 200249c:	e0bffd15 	stw	r2,-12(fp)
		  printf("Get value from task 1 : (%d, %d)\n",*vector_x, *vector_y);
 20024a0:	e0bffc17 	ldw	r2,-16(fp)
 20024a4:	10c00017 	ldw	r3,0(r2)
 20024a8:	e0bffd17 	ldw	r2,-12(fp)
 20024ac:	10800017 	ldw	r2,0(r2)
 20024b0:	100d883a 	mov	r6,r2
 20024b4:	180b883a 	mov	r5,r3
 20024b8:	010080b4 	movhi	r4,514
 20024bc:	21057b04 	addi	r4,r4,5612
 20024c0:	2007a780 	call	2007a78 <printf>

		  OSMboxPost(MailBox4, vector_x);
 20024c4:	d0a78817 	ldw	r2,-25056(gp)
 20024c8:	e17ffc17 	ldw	r5,-16(fp)
 20024cc:	1009883a 	mov	r4,r2
 20024d0:	201a92c0 	call	201a92c <OSMboxPost>
		  OSMboxPost(MailBox5, vector_y);
 20024d4:	d0a78317 	ldw	r2,-25076(gp)
 20024d8:	e17ffd17 	ldw	r5,-12(fp)
 20024dc:	1009883a 	mov	r4,r2
 20024e0:	201a92c0 	call	201a92c <OSMboxPost>

		  *XdirSend = *vector_x;
 20024e4:	e0bffc17 	ldw	r2,-16(fp)
 20024e8:	10c00017 	ldw	r3,0(r2)
 20024ec:	e0bff617 	ldw	r2,-40(fp)
 20024f0:	10c00015 	stw	r3,0(r2)
		  *YdirSend = *vector_y;
 20024f4:	e0bffd17 	ldw	r2,-12(fp)
 20024f8:	10c00017 	ldw	r3,0(r2)
 20024fc:	e0bff717 	ldw	r2,-36(fp)
 2002500:	10c00015 	stw	r3,0(r2)
		  *isSend = 1; // value are available
 2002504:	e0bff817 	ldw	r2,-32(fp)
 2002508:	00c00044 	movi	r3,1
 200250c:	10c00015 	stw	r3,0(r2)
		  activePlayer = 1; //modified
 2002510:	00800044 	movi	r2,1
 2002514:	e0bff515 	stw	r2,-44(fp)

		  opt_task1=OS_FLAG_CLR;
 2002518:	e03ffe05 	stb	zero,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 200251c:	d0a78a17 	ldw	r2,-25048(gp)
 2002520:	e0fffe03 	ldbu	r3,-8(fp)
 2002524:	e13ffe44 	addi	r4,fp,-7
 2002528:	200f883a 	mov	r7,r4
 200252c:	180d883a 	mov	r6,r3
 2002530:	01400044 	movi	r5,1
 2002534:	1009883a 	mov	r4,r2
 2002538:	20199b00 	call	20199b0 <OSFlagPost>
		  OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 200253c:	d0e78217 	ldw	r3,-25080(gp)
 2002540:	e0bffe44 	addi	r2,fp,-7
 2002544:	d8800015 	stw	r2,0(sp)
 2002548:	000f883a 	mov	r7,zero
 200254c:	000d883a 	mov	r6,zero
 2002550:	01400044 	movi	r5,1
 2002554:	1809883a 	mov	r4,r3
 2002558:	20193980 	call	2019398 <OSFlagPend>
	 * 	-> Envoi les données ensuite on prévient le Raspberry qu'il y a de nouvelle donnée disponible
	 * 	-> Envoi les données à la tâche 3 + lance l'animation
	 * 	-> Désactive la tâche 1
	 * */

	 if(!*isReceived && activePlayer){
 200255c:	00002c06 	br	2002610 <task3+0x278>
	 /* Si on n'est pas le joueur actif, on attend le signal donnée disponible
	  * -> lit les donnée
	  * -> envoi les données à la tâche 3 + lance l'animation
	  * -> passe en mode joueur actif
	  */
	 else if (!activePlayer && *isReceived){
 2002560:	e0bff517 	ldw	r2,-44(fp)
 2002564:	10002a1e 	bne	r2,zero,2002610 <task3+0x278>
 2002568:	e0bff917 	ldw	r2,-28(fp)
 200256c:	10800017 	ldw	r2,0(r2)
 2002570:	10002726 	beq	r2,zero,2002610 <task3+0x278>
		  printf("Get value from SPI : (%d, %d)\n",*XdirRec, *YdirRec);
 2002574:	e0bffa17 	ldw	r2,-24(fp)
 2002578:	10c00017 	ldw	r3,0(r2)
 200257c:	e0bffb17 	ldw	r2,-20(fp)
 2002580:	10800017 	ldw	r2,0(r2)
 2002584:	100d883a 	mov	r6,r2
 2002588:	180b883a 	mov	r5,r3
 200258c:	010080b4 	movhi	r4,514
 2002590:	21058404 	addi	r4,r4,5648
 2002594:	2007a780 	call	2007a78 <printf>
		  OSMboxPost(MailBox4, XdirRec);
 2002598:	d0a78817 	ldw	r2,-25056(gp)
 200259c:	e17ffa17 	ldw	r5,-24(fp)
 20025a0:	1009883a 	mov	r4,r2
 20025a4:	201a92c0 	call	201a92c <OSMboxPost>
		  OSMboxPost(MailBox5, YdirRec);
 20025a8:	d0a78317 	ldw	r2,-25076(gp)
 20025ac:	e17ffb17 	ldw	r5,-20(fp)
 20025b0:	1009883a 	mov	r4,r2
 20025b4:	201a92c0 	call	201a92c <OSMboxPost>
		  OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 20025b8:	d0e78217 	ldw	r3,-25080(gp)
 20025bc:	e0bffe44 	addi	r2,fp,-7
 20025c0:	d8800015 	stw	r2,0(sp)
 20025c4:	000f883a 	mov	r7,zero
 20025c8:	000d883a 	mov	r6,zero
 20025cc:	01400044 	movi	r5,1
 20025d0:	1809883a 	mov	r4,r3
 20025d4:	20193980 	call	2019398 <OSFlagPend>
		  opt_task1=OS_FLAG_SET;
 20025d8:	00800044 	movi	r2,1
 20025dc:	e0bffe05 	stb	r2,-8(fp)
		  OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 20025e0:	d0a78a17 	ldw	r2,-25048(gp)
 20025e4:	e0fffe03 	ldbu	r3,-8(fp)
 20025e8:	e13ffe44 	addi	r4,fp,-7
 20025ec:	200f883a 	mov	r7,r4
 20025f0:	180d883a 	mov	r6,r3
 20025f4:	01400044 	movi	r5,1
 20025f8:	1009883a 	mov	r4,r2
 20025fc:	20199b00 	call	20199b0 <OSFlagPost>
		  *isReceived = 0; // we are the actif player
 2002600:	e0bff917 	ldw	r2,-28(fp)
 2002604:	10000015 	stw	zero,0(r2)
		  activePlayer = 1;
 2002608:	00800044 	movi	r2,1
 200260c:	e0bff515 	stw	r2,-44(fp)
	  }
	  OSTimeDlyHMSM(0,0,0,100);
 2002610:	01c01904 	movi	r7,100
 2002614:	000d883a 	mov	r6,zero
 2002618:	000b883a 	mov	r5,zero
 200261c:	0009883a 	mov	r4,zero
 2002620:	201e7d00 	call	201e7d0 <OSTimeDlyHMSM>
  }
 2002624:	003f8106 	br	200242c <task3+0x94>

02002628 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
 2002628:	defff804 	addi	sp,sp,-32
 200262c:	dfc00715 	stw	ra,28(sp)
 2002630:	df000615 	stw	fp,24(sp)
 2002634:	df000604 	addi	fp,sp,24
	INT8U err;

	accel_spi = alt_up_accelerometer_spi_open_dev(accel_name);
 2002638:	d0a00017 	ldw	r2,-32768(gp)
 200263c:	1009883a 	mov	r4,r2
 2002640:	201faa00 	call	201faa0 <alt_up_accelerometer_spi_open_dev>
 2002644:	d0a77f15 	stw	r2,-25092(gp)
	if(accel_spi == NULL){
 2002648:	d0a77f17 	ldw	r2,-25092(gp)
 200264c:	1000031e 	bne	r2,zero,200265c <main+0x34>
			printf("Accelerometer device not found.\n");
 2002650:	010080b4 	movhi	r4,514
 2002654:	21058c04 	addi	r4,r4,5680
 2002658:	2007bf80 	call	2007bf8 <puts>
		}


  MailBox1 = OSMboxCreate(NULL);
 200265c:	0009883a 	mov	r4,zero
 2002660:	201a2780 	call	201a278 <OSMboxCreate>
 2002664:	d0a78915 	stw	r2,-25052(gp)
  MailBox2 = OSMboxCreate(NULL);
 2002668:	0009883a 	mov	r4,zero
 200266c:	201a2780 	call	201a278 <OSMboxCreate>
 2002670:	d0a78515 	stw	r2,-25068(gp)
  MailBox3 = OSMboxCreate(NULL);
 2002674:	0009883a 	mov	r4,zero
 2002678:	201a2780 	call	201a278 <OSMboxCreate>
 200267c:	d0a78115 	stw	r2,-25084(gp)

  MailBox4 = OSMboxCreate(NULL);
 2002680:	0009883a 	mov	r4,zero
 2002684:	201a2780 	call	201a278 <OSMboxCreate>
 2002688:	d0a78815 	stw	r2,-25056(gp)
  MailBox5 = OSMboxCreate(NULL);
 200268c:	0009883a 	mov	r4,zero
 2002690:	201a2780 	call	201a278 <OSMboxCreate>
 2002694:	d0a78315 	stw	r2,-25076(gp)
  MailBox6 = OSMboxCreate(NULL);
 2002698:	0009883a 	mov	r4,zero
 200269c:	201a2780 	call	201a278 <OSMboxCreate>
 20026a0:	d0a78015 	stw	r2,-25088(gp)

  isActiveFlagGrp = OSFlagCreate(0, &err);
 20026a4:	e17fff04 	addi	r5,fp,-4
 20026a8:	0009883a 	mov	r4,zero
 20026ac:	2018dd40 	call	2018dd4 <OSFlagCreate>
 20026b0:	d0a78a15 	stw	r2,-25048(gp)
  AnimationFlagGrp = OSFlagCreate(0, &err);
 20026b4:	e17fff04 	addi	r5,fp,-4
 20026b8:	0009883a 	mov	r4,zero
 20026bc:	2018dd40 	call	2018dd4 <OSFlagCreate>
 20026c0:	d0a78215 	stw	r2,-25080(gp)

  OSTaskCreateExt(task1,
 20026c4:	d8000415 	stw	zero,16(sp)
 20026c8:	d8000315 	stw	zero,12(sp)
 20026cc:	00820004 	movi	r2,2048
 20026d0:	d8800215 	stw	r2,8(sp)
 20026d4:	008080b4 	movhi	r2,514
 20026d8:	10964e04 	addi	r2,r2,22840
 20026dc:	d8800115 	stw	r2,4(sp)
 20026e0:	00800044 	movi	r2,1
 20026e4:	d8800015 	stw	r2,0(sp)
 20026e8:	01c00044 	movi	r7,1
 20026ec:	018080b4 	movhi	r6,514
 20026f0:	319e4d04 	addi	r6,r6,31028
 20026f4:	000b883a 	mov	r5,zero
 20026f8:	01008034 	movhi	r4,512
 20026fc:	2100a504 	addi	r4,r4,660
 2002700:	201d5fc0 	call	201d5fc <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
 2002704:	d8000415 	stw	zero,16(sp)
 2002708:	d8000315 	stw	zero,12(sp)
 200270c:	00820004 	movi	r2,2048
 2002710:	d8800215 	stw	r2,8(sp)
 2002714:	008080b4 	movhi	r2,514
 2002718:	109e4e04 	addi	r2,r2,31032
 200271c:	d8800115 	stw	r2,4(sp)
 2002720:	00800084 	movi	r2,2
 2002724:	d8800015 	stw	r2,0(sp)
 2002728:	01c00084 	movi	r7,2
 200272c:	018080f4 	movhi	r6,515
 2002730:	31a64d04 	addi	r6,r6,-26316
 2002734:	000b883a 	mov	r5,zero
 2002738:	01008034 	movhi	r4,512
 200273c:	21012904 	addi	r4,r4,1188
 2002740:	201d5fc0 	call	201d5fc <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 2002744:	d8000415 	stw	zero,16(sp)
 2002748:	d8000315 	stw	zero,12(sp)
 200274c:	00820004 	movi	r2,2048
 2002750:	d8800215 	stw	r2,8(sp)
 2002754:	008080f4 	movhi	r2,515
 2002758:	10a64e04 	addi	r2,r2,-26312
 200275c:	d8800115 	stw	r2,4(sp)
 2002760:	008000c4 	movi	r2,3
 2002764:	d8800015 	stw	r2,0(sp)
 2002768:	01c000c4 	movi	r7,3
 200276c:	018080f4 	movhi	r6,515
 2002770:	31ae4d04 	addi	r6,r6,-18124
 2002774:	000b883a 	mov	r5,zero
 2002778:	01008034 	movhi	r4,512
 200277c:	2108e604 	addi	r4,r4,9112
 2002780:	201d5fc0 	call	201d5fc <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSStart();
 2002784:	201749c0 	call	201749c <OSStart>
  return 0;
 2002788:	0005883a 	mov	r2,zero
}
 200278c:	e037883a 	mov	sp,fp
 2002790:	dfc00117 	ldw	ra,4(sp)
 2002794:	df000017 	ldw	fp,0(sp)
 2002798:	dec00204 	addi	sp,sp,8
 200279c:	f800283a 	ret

020027a0 <whole_collide>:
#include <stdio.h>
#include <math.h>

int whole_list [6][2]={{86,63},{446,63},{806,63},{86,463},{446,463},{806,463}};

int whole_collide(float ball [2], float velocity [2]){
 20027a0:	defff604 	addi	sp,sp,-40
 20027a4:	dfc00915 	stw	ra,36(sp)
 20027a8:	df000815 	stw	fp,32(sp)
 20027ac:	df000804 	addi	fp,sp,32
 20027b0:	e13ffe15 	stw	r4,-8(fp)
 20027b4:	e17fff15 	stw	r5,-4(fp)
	float x = ball[0]+velocity[0];
 20027b8:	e0bffe17 	ldw	r2,-8(fp)
 20027bc:	10c00017 	ldw	r3,0(r2)
 20027c0:	e13fff17 	ldw	r4,-4(fp)
 20027c4:	20800017 	ldw	r2,0(r4)
 20027c8:	1885ff72 	custom	253,r2,r3,r2
 20027cc:	e0bffa15 	stw	r2,-24(fp)
	float y = ball[1]+velocity[1];
 20027d0:	e0bffe17 	ldw	r2,-8(fp)
 20027d4:	10800104 	addi	r2,r2,4
 20027d8:	10c00017 	ldw	r3,0(r2)
 20027dc:	e0bfff17 	ldw	r2,-4(fp)
 20027e0:	11000104 	addi	r4,r2,4
 20027e4:	20800017 	ldw	r2,0(r4)
 20027e8:	1885ff72 	custom	253,r2,r3,r2
 20027ec:	e0bffb15 	stw	r2,-20(fp)

	int collision = 0;
 20027f0:	e03ff815 	stw	zero,-32(fp)
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 20027f4:	e03ff915 	stw	zero,-28(fp)
 20027f8:	00003d06 	br	20028f0 <whole_collide+0x150>
		float dx = whole_list[cnt][0]-x;
 20027fc:	008080b4 	movhi	r2,514
 2002800:	1087c804 	addi	r2,r2,7968
 2002804:	e0fff917 	ldw	r3,-28(fp)
 2002808:	180690fa 	slli	r3,r3,3
 200280c:	10c5883a 	add	r2,r2,r3
 2002810:	10800017 	ldw	r2,0(r2)
 2002814:	1007feb2 	custom	250,r3,r2,zero
 2002818:	e0bffa17 	ldw	r2,-24(fp)
 200281c:	1885ffb2 	custom	254,r2,r3,r2
 2002820:	e0bffc15 	stw	r2,-16(fp)
		float dy = whole_list[cnt][1]-y;
 2002824:	008080b4 	movhi	r2,514
 2002828:	1087c804 	addi	r2,r2,7968
 200282c:	e0fff917 	ldw	r3,-28(fp)
 2002830:	180690fa 	slli	r3,r3,3
 2002834:	10c5883a 	add	r2,r2,r3
 2002838:	10800104 	addi	r2,r2,4
 200283c:	10800017 	ldw	r2,0(r2)
 2002840:	1007feb2 	custom	250,r3,r2,zero
 2002844:	e0bffb17 	ldw	r2,-20(fp)
 2002848:	1885ffb2 	custom	254,r2,r3,r2
 200284c:	e0bffd15 	stw	r2,-12(fp)

		collision = collision || (dx*dx+dy*dy <= ((SIZE+WHOLE_SIZE)*(SIZE+WHOLE_SIZE)*0.85));
 2002850:	e0bff817 	ldw	r2,-32(fp)
 2002854:	1000131e 	bne	r2,zero,20028a4 <whole_collide+0x104>
 2002858:	e0fffc17 	ldw	r3,-16(fp)
 200285c:	e0bffc17 	ldw	r2,-16(fp)
 2002860:	1887ff32 	custom	252,r3,r3,r2
 2002864:	e13ffd17 	ldw	r4,-12(fp)
 2002868:	e0bffd17 	ldw	r2,-12(fp)
 200286c:	2085ff32 	custom	252,r2,r4,r2
 2002870:	1885ff72 	custom	253,r2,r3,r2
 2002874:	1009883a 	mov	r4,r2
 2002878:	20071d80 	call	20071d8 <__extendsfdf2>
 200287c:	1011883a 	mov	r8,r2
 2002880:	1813883a 	mov	r9,r3
 2002884:	01b33374 	movhi	r6,52429
 2002888:	31b33344 	addi	r6,r6,-13107
 200288c:	01d021b4 	movhi	r7,16518
 2002890:	39d5b304 	addi	r7,r7,22220
 2002894:	4009883a 	mov	r4,r8
 2002898:	480b883a 	mov	r5,r9
 200289c:	20069cc0 	call	20069cc <__ledf2>
 20028a0:	00800216 	blt	zero,r2,20028ac <whole_collide+0x10c>
 20028a4:	00800044 	movi	r2,1
 20028a8:	00000106 	br	20028b0 <whole_collide+0x110>
 20028ac:	0005883a 	mov	r2,zero
 20028b0:	e0bff815 	stw	r2,-32(fp)

		if (collision){
 20028b4:	e0bff817 	ldw	r2,-32(fp)
 20028b8:	10000a26 	beq	r2,zero,20028e4 <whole_collide+0x144>
			ball[0]=0;
 20028bc:	e0bffe17 	ldw	r2,-8(fp)
 20028c0:	10000015 	stw	zero,0(r2)
			ball[1]=0;
 20028c4:	e0bffe17 	ldw	r2,-8(fp)
 20028c8:	10800104 	addi	r2,r2,4
 20028cc:	10000015 	stw	zero,0(r2)
			velocity[0]=0;
 20028d0:	e0bfff17 	ldw	r2,-4(fp)
 20028d4:	10000015 	stw	zero,0(r2)
			velocity[1]=0;
 20028d8:	e0bfff17 	ldw	r2,-4(fp)
 20028dc:	10800104 	addi	r2,r2,4
 20028e0:	10000015 	stw	zero,0(r2)
	float y = ball[1]+velocity[1];

	int collision = 0;
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 20028e4:	e0bff917 	ldw	r2,-28(fp)
 20028e8:	10800044 	addi	r2,r2,1
 20028ec:	e0bff915 	stw	r2,-28(fp)
 20028f0:	e0bff917 	ldw	r2,-28(fp)
 20028f4:	10800190 	cmplti	r2,r2,6
 20028f8:	103fc01e 	bne	r2,zero,20027fc <whole_collide+0x5c>
			ball[1]=0;
			velocity[0]=0;
			velocity[1]=0;
		}
	}
	return collision;
 20028fc:	e0bff817 	ldw	r2,-32(fp)
}
 2002900:	e037883a 	mov	sp,fp
 2002904:	dfc00117 	ldw	ra,4(sp)
 2002908:	df000017 	ldw	fp,0(sp)
 200290c:	dec00204 	addi	sp,sp,8
 2002910:	f800283a 	ret

02002914 <borderCollide>:


void borderCollide(float* ball, int* border_collision, float* velocity)
{
 2002914:	defffa04 	addi	sp,sp,-24
 2002918:	df000515 	stw	fp,20(sp)
 200291c:	df000504 	addi	fp,sp,20
 2002920:	e13ffd15 	stw	r4,-12(fp)
 2002924:	e17ffe15 	stw	r5,-8(fp)
 2002928:	e1bfff15 	stw	r6,-4(fp)
	int collide_x = 0;
 200292c:	e03ffb15 	stw	zero,-20(fp)
	int collide_y = 0;
 2002930:	e03ffc15 	stw	zero,-16(fp)
	collide_x = (ball[0] < BORDER_X + BORDER + SIZE || ball[0] > (MAX_X + BORDER_X)-(BORDER + SIZE));
 2002934:	e0bffd17 	ldw	r2,-12(fp)
 2002938:	10c00017 	ldw	r3,0(r2)
 200293c:	0090b1b4 	movhi	r2,17094
 2002940:	1885f9f2 	custom	231,r2,r3,r2
 2002944:	1000061e 	bne	r2,zero,2002960 <borderCollide+0x4c>
 2002948:	e0bffd17 	ldw	r2,-12(fp)
 200294c:	10c00017 	ldw	r3,0(r2)
 2002950:	009111b4 	movhi	r2,17478
 2002954:	10900004 	addi	r2,r2,16384
 2002958:	1885f972 	custom	229,r2,r3,r2
 200295c:	10000226 	beq	r2,zero,2002968 <borderCollide+0x54>
 2002960:	00800044 	movi	r2,1
 2002964:	00000106 	br	200296c <borderCollide+0x58>
 2002968:	0005883a 	mov	r2,zero
 200296c:	e0bffb15 	stw	r2,-20(fp)
	collide_y = (ball[1] < BORDER_Y + BORDER + SIZE || ball[1] > (MAX_Y + BORDER_Y)-(BORDER + SIZE));
 2002970:	e0bffd17 	ldw	r2,-12(fp)
 2002974:	10800104 	addi	r2,r2,4
 2002978:	10c00017 	ldw	r3,0(r2)
 200297c:	0090a634 	movhi	r2,17048
 2002980:	1885f9f2 	custom	231,r2,r3,r2
 2002984:	1000061e 	bne	r2,zero,20029a0 <borderCollide+0x8c>
 2002988:	e0bffd17 	ldw	r2,-12(fp)
 200298c:	10800104 	addi	r2,r2,4
 2002990:	10c00017 	ldw	r3,0(r2)
 2002994:	0090f874 	movhi	r2,17377
 2002998:	1885f972 	custom	229,r2,r3,r2
 200299c:	10000226 	beq	r2,zero,20029a8 <borderCollide+0x94>
 20029a0:	00800044 	movi	r2,1
 20029a4:	00000106 	br	20029ac <borderCollide+0x98>
 20029a8:	0005883a 	mov	r2,zero
 20029ac:	e0bffc15 	stw	r2,-16(fp)
	if(!border_collision[0] && collide_x)
 20029b0:	e0bffe17 	ldw	r2,-8(fp)
 20029b4:	10800017 	ldw	r2,0(r2)
 20029b8:	1000081e 	bne	r2,zero,20029dc <borderCollide+0xc8>
 20029bc:	e0bffb17 	ldw	r2,-20(fp)
 20029c0:	10000626 	beq	r2,zero,20029dc <borderCollide+0xc8>
	{
		velocity[0] = 0 - velocity[0];
 20029c4:	e0ffff17 	ldw	r3,-4(fp)
 20029c8:	18800017 	ldw	r2,0(r3)
 20029cc:	0007883a 	mov	r3,zero
 20029d0:	1887ffb2 	custom	254,r3,r3,r2
 20029d4:	e0bfff17 	ldw	r2,-4(fp)
 20029d8:	10c00015 	stw	r3,0(r2)
	}
	if(!border_collision[2] && collide_y)
 20029dc:	e0bffe17 	ldw	r2,-8(fp)
 20029e0:	10800204 	addi	r2,r2,8
 20029e4:	10800017 	ldw	r2,0(r2)
 20029e8:	10000a1e 	bne	r2,zero,2002a14 <borderCollide+0x100>
 20029ec:	e0bffc17 	ldw	r2,-16(fp)
 20029f0:	10000826 	beq	r2,zero,2002a14 <borderCollide+0x100>
	{
		velocity[1] = 0 - velocity[1];
 20029f4:	e0bfff17 	ldw	r2,-4(fp)
 20029f8:	10800104 	addi	r2,r2,4
 20029fc:	e0ffff17 	ldw	r3,-4(fp)
 2002a00:	19000104 	addi	r4,r3,4
 2002a04:	20c00017 	ldw	r3,0(r4)
 2002a08:	0009883a 	mov	r4,zero
 2002a0c:	20c7ffb2 	custom	254,r3,r4,r3
 2002a10:	10c00015 	stw	r3,0(r2)
	}

	border_collision[0] = border_collision[1];
 2002a14:	e0bffe17 	ldw	r2,-8(fp)
 2002a18:	10c00117 	ldw	r3,4(r2)
 2002a1c:	e0bffe17 	ldw	r2,-8(fp)
 2002a20:	10c00015 	stw	r3,0(r2)
	border_collision[1] = collide_x;
 2002a24:	e0bffe17 	ldw	r2,-8(fp)
 2002a28:	10800104 	addi	r2,r2,4
 2002a2c:	e0fffb17 	ldw	r3,-20(fp)
 2002a30:	10c00015 	stw	r3,0(r2)
	border_collision[2] = border_collision[3];
 2002a34:	e0bffe17 	ldw	r2,-8(fp)
 2002a38:	10800204 	addi	r2,r2,8
 2002a3c:	e0fffe17 	ldw	r3,-8(fp)
 2002a40:	18c00317 	ldw	r3,12(r3)
 2002a44:	10c00015 	stw	r3,0(r2)
	border_collision[3] = collide_y;
 2002a48:	e0bffe17 	ldw	r2,-8(fp)
 2002a4c:	10800304 	addi	r2,r2,12
 2002a50:	e0fffc17 	ldw	r3,-16(fp)
 2002a54:	10c00015 	stw	r3,0(r2)
}
 2002a58:	0001883a 	nop
 2002a5c:	e037883a 	mov	sp,fp
 2002a60:	df000017 	ldw	fp,0(sp)
 2002a64:	dec00104 	addi	sp,sp,4
 2002a68:	f800283a 	ret

02002a6c <momentum>:

float momentum (float* velocity){
 2002a6c:	defffd04 	addi	sp,sp,-12
 2002a70:	df000215 	stw	fp,8(sp)
 2002a74:	df000204 	addi	fp,sp,8
 2002a78:	e13fff15 	stw	r4,-4(fp)
	float result=velocity[0]*velocity[0]+velocity[1]*velocity[1];
 2002a7c:	e0bfff17 	ldw	r2,-4(fp)
 2002a80:	10c00017 	ldw	r3,0(r2)
 2002a84:	e13fff17 	ldw	r4,-4(fp)
 2002a88:	20800017 	ldw	r2,0(r4)
 2002a8c:	1887ff32 	custom	252,r3,r3,r2
 2002a90:	e0bfff17 	ldw	r2,-4(fp)
 2002a94:	10800104 	addi	r2,r2,4
 2002a98:	11000017 	ldw	r4,0(r2)
 2002a9c:	e0bfff17 	ldw	r2,-4(fp)
 2002aa0:	11400104 	addi	r5,r2,4
 2002aa4:	28800017 	ldw	r2,0(r5)
 2002aa8:	2085ff32 	custom	252,r2,r4,r2
 2002aac:	1885ff72 	custom	253,r2,r3,r2
 2002ab0:	e0bffe15 	stw	r2,-8(fp)
	return result;
 2002ab4:	e0bffe17 	ldw	r2,-8(fp)
 2002ab8:	1007883a 	mov	r3,r2
}
 2002abc:	1805883a 	mov	r2,r3
 2002ac0:	e037883a 	mov	sp,fp
 2002ac4:	df000017 	ldw	fp,0(sp)
 2002ac8:	dec00104 	addi	sp,sp,4
 2002acc:	f800283a 	ret

02002ad0 <detect_collide>:

void detect_collide(float* ball1, float* ball2, int* collision){
 2002ad0:	defff604 	addi	sp,sp,-40
 2002ad4:	df000915 	stw	fp,36(sp)
 2002ad8:	df000904 	addi	fp,sp,36
 2002adc:	e13ffd15 	stw	r4,-12(fp)
 2002ae0:	e17ffe15 	stw	r5,-8(fp)
 2002ae4:	e1bfff15 	stw	r6,-4(fp)
	collision[0]=collision[1];
 2002ae8:	e0bfff17 	ldw	r2,-4(fp)
 2002aec:	10c00117 	ldw	r3,4(r2)
 2002af0:	e0bfff17 	ldw	r2,-4(fp)
 2002af4:	10c00015 	stw	r3,0(r2)

	float x1,y1,x2,y2,dx,dy;
	x1=ball1[0];
 2002af8:	e0bffd17 	ldw	r2,-12(fp)
 2002afc:	10800017 	ldw	r2,0(r2)
 2002b00:	e0bff715 	stw	r2,-36(fp)
	x2=ball2[0];
 2002b04:	e0bffe17 	ldw	r2,-8(fp)
 2002b08:	10800017 	ldw	r2,0(r2)
 2002b0c:	e0bff815 	stw	r2,-32(fp)

	y1=ball1[1];
 2002b10:	e0bffd17 	ldw	r2,-12(fp)
 2002b14:	10800117 	ldw	r2,4(r2)
 2002b18:	e0bff915 	stw	r2,-28(fp)
	y2=ball2[1];
 2002b1c:	e0bffe17 	ldw	r2,-8(fp)
 2002b20:	10800117 	ldw	r2,4(r2)
 2002b24:	e0bffa15 	stw	r2,-24(fp)

	dx=x2-x1;
 2002b28:	e0fff817 	ldw	r3,-32(fp)
 2002b2c:	e0bff717 	ldw	r2,-36(fp)
 2002b30:	1885ffb2 	custom	254,r2,r3,r2
 2002b34:	e0bffb15 	stw	r2,-20(fp)
	dy=y2-y1;
 2002b38:	e0fffa17 	ldw	r3,-24(fp)
 2002b3c:	e0bff917 	ldw	r2,-28(fp)
 2002b40:	1885ffb2 	custom	254,r2,r3,r2
 2002b44:	e0bffc15 	stw	r2,-16(fp)
	collision[1]=dx*dx + dy*dy <= 4*SIZE*SIZE;
 2002b48:	e0bfff17 	ldw	r2,-4(fp)
 2002b4c:	10800104 	addi	r2,r2,4
 2002b50:	e13ffb17 	ldw	r4,-20(fp)
 2002b54:	e0fffb17 	ldw	r3,-20(fp)
 2002b58:	20c9ff32 	custom	252,r4,r4,r3
 2002b5c:	e17ffc17 	ldw	r5,-16(fp)
 2002b60:	e0fffc17 	ldw	r3,-16(fp)
 2002b64:	28c7ff32 	custom	252,r3,r5,r3
 2002b68:	20c9ff72 	custom	253,r4,r4,r3
 2002b6c:	00d10a74 	movhi	r3,17449
 2002b70:	20c7f9b2 	custom	230,r3,r4,r3
 2002b74:	18c03fcc 	andi	r3,r3,255
 2002b78:	10c00015 	stw	r3,0(r2)
}
 2002b7c:	0001883a 	nop
 2002b80:	e037883a 	mov	sp,fp
 2002b84:	df000017 	ldw	fp,0(sp)
 2002b88:	dec00104 	addi	sp,sp,4
 2002b8c:	f800283a 	ret

02002b90 <collide_calc>:


void collide_calc(float* ball1, float* ball2,float* velocity1, float* velocity2, int* collision,int id){
 2002b90:	deffeb04 	addi	sp,sp,-84
 2002b94:	dfc01415 	stw	ra,80(sp)
 2002b98:	df001315 	stw	fp,76(sp)
 2002b9c:	dc401215 	stw	r17,72(sp)
 2002ba0:	dc001115 	stw	r16,68(sp)
 2002ba4:	df001304 	addi	fp,sp,76
 2002ba8:	e13ffa15 	stw	r4,-24(fp)
 2002bac:	e17ffb15 	stw	r5,-20(fp)
 2002bb0:	e1bffc15 	stw	r6,-16(fp)
 2002bb4:	e1fffd15 	stw	r7,-12(fp)
	if ((!collision[0] && collision[1]) || (collision[0] && collision[1] && ball1[0]!=0 && ball1[1] && ball2[0] && ball2[1])){
 2002bb8:	e0800217 	ldw	r2,8(fp)
 2002bbc:	10800017 	ldw	r2,0(r2)
 2002bc0:	1000041e 	bne	r2,zero,2002bd4 <collide_calc+0x44>
 2002bc4:	e0800217 	ldw	r2,8(fp)
 2002bc8:	10800104 	addi	r2,r2,4
 2002bcc:	10800017 	ldw	r2,0(r2)
 2002bd0:	10001d1e 	bne	r2,zero,2002c48 <collide_calc+0xb8>
 2002bd4:	e0800217 	ldw	r2,8(fp)
 2002bd8:	10800017 	ldw	r2,0(r2)
 2002bdc:	1000c626 	beq	r2,zero,2002ef8 <collide_calc+0x368>
 2002be0:	e0800217 	ldw	r2,8(fp)
 2002be4:	10800104 	addi	r2,r2,4
 2002be8:	10800017 	ldw	r2,0(r2)
 2002bec:	1000c226 	beq	r2,zero,2002ef8 <collide_calc+0x368>
 2002bf0:	e0fffa17 	ldw	r3,-24(fp)
 2002bf4:	18800017 	ldw	r2,0(r3)
 2002bf8:	0007883a 	mov	r3,zero
 2002bfc:	10c5f8f2 	custom	227,r2,r2,r3
 2002c00:	1000bd1e 	bne	r2,zero,2002ef8 <collide_calc+0x368>
 2002c04:	e0bffa17 	ldw	r2,-24(fp)
 2002c08:	10c00104 	addi	r3,r2,4
 2002c0c:	18800017 	ldw	r2,0(r3)
 2002c10:	0007883a 	mov	r3,zero
 2002c14:	10c5f8f2 	custom	227,r2,r2,r3
 2002c18:	1000b71e 	bne	r2,zero,2002ef8 <collide_calc+0x368>
 2002c1c:	e0fffb17 	ldw	r3,-20(fp)
 2002c20:	18800017 	ldw	r2,0(r3)
 2002c24:	0007883a 	mov	r3,zero
 2002c28:	10c5f8f2 	custom	227,r2,r2,r3
 2002c2c:	1000b21e 	bne	r2,zero,2002ef8 <collide_calc+0x368>
 2002c30:	e0bffb17 	ldw	r2,-20(fp)
 2002c34:	10c00104 	addi	r3,r2,4
 2002c38:	18800017 	ldw	r2,0(r3)
 2002c3c:	0007883a 	mov	r3,zero
 2002c40:	10c5f8f2 	custom	227,r2,r2,r3
 2002c44:	1000ac1e 	bne	r2,zero,2002ef8 <collide_calc+0x368>
		int sign;
		float v21 [2];
		float a;
		float dv;

		x1=ball1[0];
 2002c48:	e0bffa17 	ldw	r2,-24(fp)
 2002c4c:	10800017 	ldw	r2,0(r2)
 2002c50:	e0bfef15 	stw	r2,-68(fp)
		x2=ball2[0];
 2002c54:	e0bffb17 	ldw	r2,-20(fp)
 2002c58:	10800017 	ldw	r2,0(r2)
 2002c5c:	e0bff015 	stw	r2,-64(fp)
		y1=ball1[1];
 2002c60:	e0bffa17 	ldw	r2,-24(fp)
 2002c64:	10800117 	ldw	r2,4(r2)
 2002c68:	e0bff115 	stw	r2,-60(fp)
		y2=ball2[1];
 2002c6c:	e0bffb17 	ldw	r2,-20(fp)
 2002c70:	10800117 	ldw	r2,4(r2)
 2002c74:	e0bff215 	stw	r2,-56(fp)

		//m1=1.0;
		//m2=1.0;
		m21 = 1.0; // m1 = 1.0 / m2 = 1.0
 2002c78:	008fe034 	movhi	r2,16256
 2002c7c:	e0bff315 	stw	r2,-52(fp)
		x21 = x2-x1;
 2002c80:	e0fff017 	ldw	r3,-64(fp)
 2002c84:	e0bfef17 	ldw	r2,-68(fp)
 2002c88:	1885ffb2 	custom	254,r2,r3,r2
 2002c8c:	e0bfed15 	stw	r2,-76(fp)
		y21 = y2-y1;
 2002c90:	e0fff217 	ldw	r3,-56(fp)
 2002c94:	e0bff117 	ldw	r2,-60(fp)
 2002c98:	1885ffb2 	custom	254,r2,r3,r2
 2002c9c:	e0bff415 	stw	r2,-48(fp)
		v21[0]=velocity2[0]-velocity1[0];
 2002ca0:	e0bffd17 	ldw	r2,-12(fp)
 2002ca4:	10c00017 	ldw	r3,0(r2)
 2002ca8:	e13ffc17 	ldw	r4,-16(fp)
 2002cac:	20800017 	ldw	r2,0(r4)
 2002cb0:	1885ffb2 	custom	254,r2,r3,r2
 2002cb4:	e0bff815 	stw	r2,-32(fp)
		v21[1]=velocity2[1]-velocity1[1];
 2002cb8:	e0bffd17 	ldw	r2,-12(fp)
 2002cbc:	10800104 	addi	r2,r2,4
 2002cc0:	10c00017 	ldw	r3,0(r2)
 2002cc4:	e0bffc17 	ldw	r2,-16(fp)
 2002cc8:	11000104 	addi	r4,r2,4
 2002ccc:	20800017 	ldw	r2,0(r4)
 2002cd0:	1885ffb2 	custom	254,r2,r3,r2
 2002cd4:	e0bff915 	stw	r2,-28(fp)

		if ((v21[0]*x21 + v21[1]*y21) >=0){
 2002cd8:	e0fff817 	ldw	r3,-32(fp)
 2002cdc:	e0bfed17 	ldw	r2,-76(fp)
 2002ce0:	1887ff32 	custom	252,r3,r3,r2
 2002ce4:	e13ff917 	ldw	r4,-28(fp)
 2002ce8:	e0bff417 	ldw	r2,-48(fp)
 2002cec:	2085ff32 	custom	252,r2,r4,r2
 2002cf0:	1885ff72 	custom	253,r2,r3,r2
 2002cf4:	0007883a 	mov	r3,zero
 2002cf8:	10c5f932 	custom	228,r2,r2,r3
 2002cfc:	10007e1e 	bne	r2,zero,2002ef8 <collide_calc+0x368>
			//printf("error in collision\n");
			//printf("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
					//ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
		}
		else{
			fy21=0.000001*fabs(y21);
 2002d00:	e0bff417 	ldw	r2,-48(fp)
 2002d04:	1005f832 	custom	224,r2,r2,zero
 2002d08:	1009883a 	mov	r4,r2
 2002d0c:	20071d80 	call	20071d8 <__extendsfdf2>
 2002d10:	1011883a 	mov	r8,r2
 2002d14:	1813883a 	mov	r9,r3
 2002d18:	01a82db4 	movhi	r6,41142
 2002d1c:	31bb6344 	addi	r6,r6,-4723
 2002d20:	01cfac74 	movhi	r7,16049
 2002d24:	39f1bdc4 	addi	r7,r7,-14601
 2002d28:	4009883a 	mov	r4,r8
 2002d2c:	480b883a 	mov	r5,r9
 2002d30:	2006ac00 	call	2006ac0 <__muldf3>
 2002d34:	1009883a 	mov	r4,r2
 2002d38:	180b883a 	mov	r5,r3
 2002d3c:	2005883a 	mov	r2,r4
 2002d40:	2807883a 	mov	r3,r5
 2002d44:	1009883a 	mov	r4,r2
 2002d48:	180b883a 	mov	r5,r3
 2002d4c:	20072e80 	call	20072e8 <__truncdfsf2>
 2002d50:	1007883a 	mov	r3,r2
 2002d54:	e0fff515 	stw	r3,-44(fp)
			if(fabs(x21) < fy21){
 2002d58:	e0bfed17 	ldw	r2,-76(fp)
 2002d5c:	1007f832 	custom	224,r3,r2,zero
 2002d60:	e0bff517 	ldw	r2,-44(fp)
 2002d64:	1885f9f2 	custom	231,r2,r3,r2
 2002d68:	10000e26 	beq	r2,zero,2002da4 <collide_calc+0x214>
				if (x21<0) sign = -1;
 2002d6c:	e0bfed17 	ldw	r2,-76(fp)
 2002d70:	0007883a 	mov	r3,zero
 2002d74:	10c5f9f2 	custom	231,r2,r2,r3
 2002d78:	10000326 	beq	r2,zero,2002d88 <collide_calc+0x1f8>
 2002d7c:	00bfffc4 	movi	r2,-1
 2002d80:	e0bfee15 	stw	r2,-72(fp)
 2002d84:	00000206 	br	2002d90 <collide_calc+0x200>
				else sign=1;
 2002d88:	00800044 	movi	r2,1
 2002d8c:	e0bfee15 	stw	r2,-72(fp)
				x21=fy21*sign;
 2002d90:	e0bfee17 	ldw	r2,-72(fp)
 2002d94:	1007feb2 	custom	250,r3,r2,zero
 2002d98:	e0bff517 	ldw	r2,-44(fp)
 2002d9c:	1885ff32 	custom	252,r2,r3,r2
 2002da0:	e0bfed15 	stw	r2,-76(fp)
			}
			a=y21/x21;
 2002da4:	e0fff417 	ldw	r3,-48(fp)
 2002da8:	e0bfed17 	ldw	r2,-76(fp)
 2002dac:	1885fff2 	custom	255,r2,r3,r2
 2002db0:	e0bff615 	stw	r2,-40(fp)
            dv = -2.0*(v21[0]+a*v21[1])/((1+a*a)*(1+m21));
 2002db4:	e0fff817 	ldw	r3,-32(fp)
 2002db8:	e13ff917 	ldw	r4,-28(fp)
 2002dbc:	e0bff617 	ldw	r2,-40(fp)
 2002dc0:	2085ff32 	custom	252,r2,r4,r2
 2002dc4:	1885ff72 	custom	253,r2,r3,r2
 2002dc8:	1009883a 	mov	r4,r2
 2002dcc:	20071d80 	call	20071d8 <__extendsfdf2>
 2002dd0:	1011883a 	mov	r8,r2
 2002dd4:	1813883a 	mov	r9,r3
 2002dd8:	000d883a 	mov	r6,zero
 2002ddc:	01f00034 	movhi	r7,49152
 2002de0:	4009883a 	mov	r4,r8
 2002de4:	480b883a 	mov	r5,r9
 2002de8:	2006ac00 	call	2006ac0 <__muldf3>
 2002dec:	1009883a 	mov	r4,r2
 2002df0:	180b883a 	mov	r5,r3
 2002df4:	2021883a 	mov	r16,r4
 2002df8:	2823883a 	mov	r17,r5
 2002dfc:	e0fff617 	ldw	r3,-40(fp)
 2002e00:	e0bff617 	ldw	r2,-40(fp)
 2002e04:	1887ff32 	custom	252,r3,r3,r2
 2002e08:	008fe034 	movhi	r2,16256
 2002e0c:	1887ff72 	custom	253,r3,r3,r2
 2002e10:	e13ff317 	ldw	r4,-52(fp)
 2002e14:	008fe034 	movhi	r2,16256
 2002e18:	2085ff72 	custom	253,r2,r4,r2
 2002e1c:	1885ff32 	custom	252,r2,r3,r2
 2002e20:	1009883a 	mov	r4,r2
 2002e24:	20071d80 	call	20071d8 <__extendsfdf2>
 2002e28:	1009883a 	mov	r4,r2
 2002e2c:	180b883a 	mov	r5,r3
 2002e30:	200d883a 	mov	r6,r4
 2002e34:	280f883a 	mov	r7,r5
 2002e38:	8009883a 	mov	r4,r16
 2002e3c:	880b883a 	mov	r5,r17
 2002e40:	2005f800 	call	2005f80 <__divdf3>
 2002e44:	1009883a 	mov	r4,r2
 2002e48:	180b883a 	mov	r5,r3
 2002e4c:	2005883a 	mov	r2,r4
 2002e50:	2807883a 	mov	r3,r5
 2002e54:	1009883a 	mov	r4,r2
 2002e58:	180b883a 	mov	r5,r3
 2002e5c:	20072e80 	call	20072e8 <__truncdfsf2>
 2002e60:	1007883a 	mov	r3,r2
 2002e64:	e0fff715 	stw	r3,-36(fp)
            velocity2[0] += dv;
 2002e68:	e0bffd17 	ldw	r2,-12(fp)
 2002e6c:	10c00017 	ldw	r3,0(r2)
 2002e70:	e0bff717 	ldw	r2,-36(fp)
 2002e74:	1887ff72 	custom	253,r3,r3,r2
 2002e78:	e0bffd17 	ldw	r2,-12(fp)
 2002e7c:	10c00015 	stw	r3,0(r2)
            velocity2[1] += a*dv;
 2002e80:	e0bffd17 	ldw	r2,-12(fp)
 2002e84:	10800104 	addi	r2,r2,4
 2002e88:	e0fffd17 	ldw	r3,-12(fp)
 2002e8c:	18c00104 	addi	r3,r3,4
 2002e90:	19000017 	ldw	r4,0(r3)
 2002e94:	e17ff617 	ldw	r5,-40(fp)
 2002e98:	e0fff717 	ldw	r3,-36(fp)
 2002e9c:	28c7ff32 	custom	252,r3,r5,r3
 2002ea0:	20c7ff72 	custom	253,r3,r4,r3
 2002ea4:	10c00015 	stw	r3,0(r2)

            velocity1[0] -= m21*dv;
 2002ea8:	e0bffc17 	ldw	r2,-16(fp)
 2002eac:	10c00017 	ldw	r3,0(r2)
 2002eb0:	e13ff317 	ldw	r4,-52(fp)
 2002eb4:	e0bff717 	ldw	r2,-36(fp)
 2002eb8:	2085ff32 	custom	252,r2,r4,r2
 2002ebc:	1887ffb2 	custom	254,r3,r3,r2
 2002ec0:	e0bffc17 	ldw	r2,-16(fp)
 2002ec4:	10c00015 	stw	r3,0(r2)
            velocity1[1] -= a*m21*dv;
 2002ec8:	e0bffc17 	ldw	r2,-16(fp)
 2002ecc:	10800104 	addi	r2,r2,4
 2002ed0:	e0fffc17 	ldw	r3,-16(fp)
 2002ed4:	18c00104 	addi	r3,r3,4
 2002ed8:	19000017 	ldw	r4,0(r3)
 2002edc:	e17ff617 	ldw	r5,-40(fp)
 2002ee0:	e0fff317 	ldw	r3,-52(fp)
 2002ee4:	28cbff32 	custom	252,r5,r5,r3
 2002ee8:	e0fff717 	ldw	r3,-36(fp)
 2002eec:	28c7ff32 	custom	252,r3,r5,r3
 2002ef0:	20c7ffb2 	custom	254,r3,r4,r3
 2002ef4:	10c00015 	stw	r3,0(r2)
		}
	}
}
 2002ef8:	0001883a 	nop
 2002efc:	e6fffe04 	addi	sp,fp,-8
 2002f00:	dfc00317 	ldw	ra,12(sp)
 2002f04:	df000217 	ldw	fp,8(sp)
 2002f08:	dc400117 	ldw	r17,4(sp)
 2002f0c:	dc000017 	ldw	r16,0(sp)
 2002f10:	dec00404 	addi	sp,sp,16
 2002f14:	f800283a 	ret

02002f18 <moveBall>:


void moveBall(float* ball, float* velocity, int x_axis , int y_axis){
 2002f18:	defff404 	addi	sp,sp,-48
 2002f1c:	dfc00b15 	stw	ra,44(sp)
 2002f20:	df000a15 	stw	fp,40(sp)
 2002f24:	dc800915 	stw	r18,36(sp)
 2002f28:	dc400815 	stw	r17,32(sp)
 2002f2c:	dc000715 	stw	r16,28(sp)
 2002f30:	df000a04 	addi	fp,sp,40
 2002f34:	e13ff915 	stw	r4,-28(fp)
 2002f38:	e17ffa15 	stw	r5,-24(fp)
 2002f3c:	e1bffb15 	stw	r6,-20(fp)
 2002f40:	e1fffc15 	stw	r7,-16(fp)

	float a = sqrtf(((float) x_axis*(float) x_axis)+((float) y_axis*(float) y_axis));
 2002f44:	e0bffb17 	ldw	r2,-20(fp)
 2002f48:	1007feb2 	custom	250,r3,r2,zero
 2002f4c:	e0bffb17 	ldw	r2,-20(fp)
 2002f50:	1005feb2 	custom	250,r2,r2,zero
 2002f54:	1887ff32 	custom	252,r3,r3,r2
 2002f58:	e0bffc17 	ldw	r2,-16(fp)
 2002f5c:	1009feb2 	custom	250,r4,r2,zero
 2002f60:	e0bffc17 	ldw	r2,-16(fp)
 2002f64:	1005feb2 	custom	250,r2,r2,zero
 2002f68:	2085ff32 	custom	252,r2,r4,r2
 2002f6c:	1885ff72 	custom	253,r2,r3,r2
 2002f70:	1009883a 	mov	r4,r2
 2002f74:	20036380 	call	2003638 <sqrtf>
 2002f78:	e0bff615 	stw	r2,-40(fp)
	float norm = sqrt(255.0*255.0+255.0*255.0);
 2002f7c:	0090ed34 	movhi	r2,17332
 2002f80:	1093fb84 	addi	r2,r2,20462
 2002f84:	e0bff715 	stw	r2,-36(fp)
	a=a/norm;
 2002f88:	e0fff617 	ldw	r3,-40(fp)
 2002f8c:	e0bff717 	ldw	r2,-36(fp)
 2002f90:	1885fff2 	custom	255,r2,r3,r2
 2002f94:	e0bff615 	stw	r2,-40(fp)



	if (!(fabsf(a)<0.1)){
 2002f98:	e0bff617 	ldw	r2,-40(fp)
 2002f9c:	1005f832 	custom	224,r2,r2,zero
 2002fa0:	1009883a 	mov	r4,r2
 2002fa4:	20071d80 	call	20071d8 <__extendsfdf2>
 2002fa8:	1011883a 	mov	r8,r2
 2002fac:	1813883a 	mov	r9,r3
 2002fb0:	04000044 	movi	r16,1
 2002fb4:	01a666b4 	movhi	r6,39322
 2002fb8:	31a66684 	addi	r6,r6,-26214
 2002fbc:	01cfeeb4 	movhi	r7,16314
 2002fc0:	39e66644 	addi	r7,r7,-26215
 2002fc4:	4009883a 	mov	r4,r8
 2002fc8:	480b883a 	mov	r5,r9
 2002fcc:	20069cc0 	call	20069cc <__ledf2>
 2002fd0:	10000116 	blt	r2,zero,2002fd8 <moveBall+0xc0>
 2002fd4:	0021883a 	mov	r16,zero
 2002fd8:	8080005c 	xori	r2,r16,1
 2002fdc:	10803fcc 	andi	r2,r2,255
 2002fe0:	10002126 	beq	r2,zero,2003068 <moveBall+0x150>
	 float theta = atan2f((float) x_axis, (float) y_axis);
 2002fe4:	e0bffb17 	ldw	r2,-20(fp)
 2002fe8:	1007feb2 	custom	250,r3,r2,zero
 2002fec:	e0bffc17 	ldw	r2,-16(fp)
 2002ff0:	1005feb2 	custom	250,r2,r2,zero
 2002ff4:	100b883a 	mov	r5,r2
 2002ff8:	1809883a 	mov	r4,r3
 2002ffc:	20035f80 	call	20035f8 <atan2f>
 2003000:	e0bff815 	stw	r2,-32(fp)
	 ball[0] += velocity[0]*cosf(theta);
 2003004:	e0bff917 	ldw	r2,-28(fp)
 2003008:	14000017 	ldw	r16,0(r2)
 200300c:	e0bffa17 	ldw	r2,-24(fp)
 2003010:	14400017 	ldw	r17,0(r2)
 2003014:	e13ff817 	ldw	r4,-32(fp)
 2003018:	20033740 	call	2003374 <cosf>
 200301c:	1007883a 	mov	r3,r2
 2003020:	88c5ff32 	custom	252,r2,r17,r3
 2003024:	8087ff72 	custom	253,r3,r16,r2
 2003028:	e0bff917 	ldw	r2,-28(fp)
 200302c:	10c00015 	stw	r3,0(r2)
	 ball[1] += velocity[1]*sinf(theta);
 2003030:	e0bff917 	ldw	r2,-28(fp)
 2003034:	14000104 	addi	r16,r2,4
 2003038:	e0bff917 	ldw	r2,-28(fp)
 200303c:	10800104 	addi	r2,r2,4
 2003040:	14400017 	ldw	r17,0(r2)
 2003044:	e0bffa17 	ldw	r2,-24(fp)
 2003048:	10800104 	addi	r2,r2,4
 200304c:	14800017 	ldw	r18,0(r2)
 2003050:	e13ff817 	ldw	r4,-32(fp)
 2003054:	20034b40 	call	20034b4 <sinf>
 2003058:	1007883a 	mov	r3,r2
 200305c:	90c5ff32 	custom	252,r2,r18,r3
 2003060:	8885ff72 	custom	253,r2,r17,r2
 2003064:	80800015 	stw	r2,0(r16)
	 //ball[0] *= cosf(theta);
	 //ball[1] *= sinf(theta);
	}

	ball[0] += velocity[0];//+x_axis*0.02;
 2003068:	e0bff917 	ldw	r2,-28(fp)
 200306c:	10c00017 	ldw	r3,0(r2)
 2003070:	e13ffa17 	ldw	r4,-24(fp)
 2003074:	20800017 	ldw	r2,0(r4)
 2003078:	1887ff72 	custom	253,r3,r3,r2
 200307c:	e0bff917 	ldw	r2,-28(fp)
 2003080:	10c00015 	stw	r3,0(r2)
	ball[1] += velocity[1];//+y_axis*0.02;
 2003084:	e0bff917 	ldw	r2,-28(fp)
 2003088:	10800104 	addi	r2,r2,4
 200308c:	e0fff917 	ldw	r3,-28(fp)
 2003090:	18c00104 	addi	r3,r3,4
 2003094:	19000017 	ldw	r4,0(r3)
 2003098:	e0fffa17 	ldw	r3,-24(fp)
 200309c:	19400104 	addi	r5,r3,4
 20030a0:	28c00017 	ldw	r3,0(r5)
 20030a4:	20c7ff72 	custom	253,r3,r4,r3
 20030a8:	10c00015 	stw	r3,0(r2)
}
 20030ac:	0001883a 	nop
 20030b0:	e6fffd04 	addi	sp,fp,-12
 20030b4:	dfc00417 	ldw	ra,16(sp)
 20030b8:	df000317 	ldw	fp,12(sp)
 20030bc:	dc800217 	ldw	r18,8(sp)
 20030c0:	dc400117 	ldw	r17,4(sp)
 20030c4:	dc000017 	ldw	r16,0(sp)
 20030c8:	dec00504 	addi	sp,sp,20
 20030cc:	f800283a 	ret

020030d0 <damping>:


void damping(float* velocity){
 20030d0:	defffc04 	addi	sp,sp,-16
 20030d4:	dfc00315 	stw	ra,12(sp)
 20030d8:	df000215 	stw	fp,8(sp)
 20030dc:	dc000115 	stw	r16,4(sp)
 20030e0:	df000204 	addi	fp,sp,8
 20030e4:	e13ffe15 	stw	r4,-8(fp)
	velocity[0] *= DAMPING;
 20030e8:	e0bffe17 	ldw	r2,-8(fp)
 20030ec:	10c00017 	ldw	r3,0(r2)
 20030f0:	1809883a 	mov	r4,r3
 20030f4:	20071d80 	call	20071d8 <__extendsfdf2>
 20030f8:	1011883a 	mov	r8,r2
 20030fc:	1813883a 	mov	r9,r3
 2003100:	018f5c74 	movhi	r6,15729
 2003104:	31a8f5c4 	addi	r6,r6,-23593
 2003108:	01cffc34 	movhi	r7,16368
 200310c:	39f5c284 	addi	r7,r7,-10486
 2003110:	4009883a 	mov	r4,r8
 2003114:	480b883a 	mov	r5,r9
 2003118:	2006ac00 	call	2006ac0 <__muldf3>
 200311c:	1009883a 	mov	r4,r2
 2003120:	180b883a 	mov	r5,r3
 2003124:	2005883a 	mov	r2,r4
 2003128:	2807883a 	mov	r3,r5
 200312c:	1009883a 	mov	r4,r2
 2003130:	180b883a 	mov	r5,r3
 2003134:	20072e80 	call	20072e8 <__truncdfsf2>
 2003138:	1007883a 	mov	r3,r2
 200313c:	e0bffe17 	ldw	r2,-8(fp)
 2003140:	10c00015 	stw	r3,0(r2)
	velocity[1] *= DAMPING;
 2003144:	e0bffe17 	ldw	r2,-8(fp)
 2003148:	14000104 	addi	r16,r2,4
 200314c:	e0bffe17 	ldw	r2,-8(fp)
 2003150:	10800104 	addi	r2,r2,4
 2003154:	10c00017 	ldw	r3,0(r2)
 2003158:	1809883a 	mov	r4,r3
 200315c:	20071d80 	call	20071d8 <__extendsfdf2>
 2003160:	1011883a 	mov	r8,r2
 2003164:	1813883a 	mov	r9,r3
 2003168:	018f5c74 	movhi	r6,15729
 200316c:	31a8f5c4 	addi	r6,r6,-23593
 2003170:	01cffc34 	movhi	r7,16368
 2003174:	39f5c284 	addi	r7,r7,-10486
 2003178:	4009883a 	mov	r4,r8
 200317c:	480b883a 	mov	r5,r9
 2003180:	2006ac00 	call	2006ac0 <__muldf3>
 2003184:	1009883a 	mov	r4,r2
 2003188:	180b883a 	mov	r5,r3
 200318c:	2005883a 	mov	r2,r4
 2003190:	2807883a 	mov	r3,r5
 2003194:	1009883a 	mov	r4,r2
 2003198:	180b883a 	mov	r5,r3
 200319c:	20072e80 	call	20072e8 <__truncdfsf2>
 20031a0:	1007883a 	mov	r3,r2
 20031a4:	80c00015 	stw	r3,0(r16)
}
 20031a8:	0001883a 	nop
 20031ac:	e6ffff04 	addi	sp,fp,-4
 20031b0:	dfc00217 	ldw	ra,8(sp)
 20031b4:	df000117 	ldw	fp,4(sp)
 20031b8:	dc000017 	ldw	r16,0(sp)
 20031bc:	dec00304 	addi	sp,sp,12
 20031c0:	f800283a 	ret

020031c4 <fmin>:
#else
	double fmin(x,y)
	double x;
	double y;
#endif
{
 20031c4:	defffa04 	addi	sp,sp,-24
 20031c8:	dfc00515 	stw	ra,20(sp)
 20031cc:	df000415 	stw	fp,16(sp)
 20031d0:	df000404 	addi	fp,sp,16
 20031d4:	e13ffc15 	stw	r4,-16(fp)
 20031d8:	e17ffd15 	stw	r5,-12(fp)
 20031dc:	e1bffe15 	stw	r6,-8(fp)
 20031e0:	e1ffff15 	stw	r7,-4(fp)
  if (__fpclassifyd(x) == FP_NAN)
 20031e4:	e13ffc17 	ldw	r4,-16(fp)
 20031e8:	e17ffd17 	ldw	r5,-12(fp)
 20031ec:	20032700 	call	2003270 <__fpclassifyd>
 20031f0:	1000031e 	bne	r2,zero,2003200 <fmin+0x3c>
    return y;
 20031f4:	e0bffe17 	ldw	r2,-8(fp)
 20031f8:	e0ffff17 	ldw	r3,-4(fp)
 20031fc:	00001306 	br	200324c <fmin+0x88>
  if (__fpclassifyd(y) == FP_NAN)
 2003200:	e13ffe17 	ldw	r4,-8(fp)
 2003204:	e17fff17 	ldw	r5,-4(fp)
 2003208:	20032700 	call	2003270 <__fpclassifyd>
 200320c:	1000031e 	bne	r2,zero,200321c <fmin+0x58>
    return x;
 2003210:	e0bffc17 	ldw	r2,-16(fp)
 2003214:	e0fffd17 	ldw	r3,-12(fp)
 2003218:	00000c06 	br	200324c <fmin+0x88>
  
  return x < y ? x : y;
 200321c:	e1bffe17 	ldw	r6,-8(fp)
 2003220:	e1ffff17 	ldw	r7,-4(fp)
 2003224:	e13ffc17 	ldw	r4,-16(fp)
 2003228:	e17ffd17 	ldw	r5,-12(fp)
 200322c:	20069cc0 	call	20069cc <__ledf2>
 2003230:	1000030e 	bge	r2,zero,2003240 <fmin+0x7c>
 2003234:	e0bffc17 	ldw	r2,-16(fp)
 2003238:	e0fffd17 	ldw	r3,-12(fp)
 200323c:	00000206 	br	2003248 <fmin+0x84>
 2003240:	e0bffe17 	ldw	r2,-8(fp)
 2003244:	e0ffff17 	ldw	r3,-4(fp)
 2003248:	0001883a 	nop
 200324c:	1009883a 	mov	r4,r2
 2003250:	180b883a 	mov	r5,r3
}
 2003254:	2005883a 	mov	r2,r4
 2003258:	2807883a 	mov	r3,r5
 200325c:	e037883a 	mov	sp,fp
 2003260:	dfc00117 	ldw	ra,4(sp)
 2003264:	df000017 	ldw	fp,0(sp)
 2003268:	dec00204 	addi	sp,sp,8
 200326c:	f800283a 	ret

02003270 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 2003270:	defff904 	addi	sp,sp,-28
 2003274:	df000615 	stw	fp,24(sp)
 2003278:	df000604 	addi	fp,sp,24
 200327c:	e13ffe15 	stw	r4,-8(fp)
 2003280:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 2003284:	e0bffe17 	ldw	r2,-8(fp)
 2003288:	e0bffc15 	stw	r2,-16(fp)
 200328c:	e0bfff17 	ldw	r2,-4(fp)
 2003290:	e0bffd15 	stw	r2,-12(fp)
 2003294:	e0bffd17 	ldw	r2,-12(fp)
 2003298:	e0bffa15 	stw	r2,-24(fp)
 200329c:	e0bffc17 	ldw	r2,-16(fp)
 20032a0:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 20032a4:	e0bffa17 	ldw	r2,-24(fp)
 20032a8:	1000021e 	bne	r2,zero,20032b4 <__fpclassifyd+0x44>
 20032ac:	e0bffb17 	ldw	r2,-20(fp)
 20032b0:	10000526 	beq	r2,zero,20032c8 <__fpclassifyd+0x58>
 20032b4:	e0fffa17 	ldw	r3,-24(fp)
 20032b8:	00a00034 	movhi	r2,32768
 20032bc:	1880041e 	bne	r3,r2,20032d0 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 20032c0:	e0bffb17 	ldw	r2,-20(fp)
 20032c4:	1000021e 	bne	r2,zero,20032d0 <__fpclassifyd+0x60>
    return FP_ZERO;
 20032c8:	00800084 	movi	r2,2
 20032cc:	00002506 	br	2003364 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 20032d0:	e0fffa17 	ldw	r3,-24(fp)
 20032d4:	00800434 	movhi	r2,16
 20032d8:	18800336 	bltu	r3,r2,20032e8 <__fpclassifyd+0x78>
 20032dc:	e0fffa17 	ldw	r3,-24(fp)
 20032e0:	009ffc34 	movhi	r2,32752
 20032e4:	18800636 	bltu	r3,r2,2003300 <__fpclassifyd+0x90>
 20032e8:	e0fffa17 	ldw	r3,-24(fp)
 20032ec:	00a00434 	movhi	r2,32784
 20032f0:	18800536 	bltu	r3,r2,2003308 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 20032f4:	e0fffa17 	ldw	r3,-24(fp)
 20032f8:	00bffc34 	movhi	r2,65520
 20032fc:	1880022e 	bgeu	r3,r2,2003308 <__fpclassifyd+0x98>
    return FP_NORMAL;
 2003300:	00800104 	movi	r2,4
 2003304:	00001706 	br	2003364 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2003308:	e0fffa17 	ldw	r3,-24(fp)
 200330c:	00800434 	movhi	r2,16
 2003310:	18800536 	bltu	r3,r2,2003328 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2003314:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2003318:	1000050e 	bge	r2,zero,2003330 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 200331c:	e0fffa17 	ldw	r3,-24(fp)
 2003320:	00a00434 	movhi	r2,32784
 2003324:	1880022e 	bgeu	r3,r2,2003330 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 2003328:	008000c4 	movi	r2,3
 200332c:	00000d06 	br	2003364 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 2003330:	e0fffa17 	ldw	r3,-24(fp)
 2003334:	009ffc34 	movhi	r2,32752
 2003338:	1880021e 	bne	r3,r2,2003344 <__fpclassifyd+0xd4>
 200333c:	e0bffb17 	ldw	r2,-20(fp)
 2003340:	10000526 	beq	r2,zero,2003358 <__fpclassifyd+0xe8>
 2003344:	e0fffa17 	ldw	r3,-24(fp)
 2003348:	00bffc34 	movhi	r2,65520
 200334c:	1880041e 	bne	r3,r2,2003360 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 2003350:	e0bffb17 	ldw	r2,-20(fp)
 2003354:	1000021e 	bne	r2,zero,2003360 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 2003358:	00800044 	movi	r2,1
 200335c:	00000106 	br	2003364 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 2003360:	0005883a 	mov	r2,zero
}
 2003364:	e037883a 	mov	sp,fp
 2003368:	df000017 	ldw	fp,0(sp)
 200336c:	dec00104 	addi	sp,sp,4
 2003370:	f800283a 	ret

02003374 <cosf>:
	float cosf(float x)
#else
	float cosf(x)
	float x;
#endif
{
 2003374:	defff704 	addi	sp,sp,-36
 2003378:	dfc00815 	stw	ra,32(sp)
 200337c:	df000715 	stw	fp,28(sp)
 2003380:	df000704 	addi	fp,sp,28
 2003384:	e13fff15 	stw	r4,-4(fp)
	float y[2],z=0.0;
 2003388:	e03ff915 	stw	zero,-28(fp)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
 200338c:	e0bfff17 	ldw	r2,-4(fp)
 2003390:	e0bffe15 	stw	r2,-8(fp)
 2003394:	e0bffe17 	ldw	r2,-8(fp)
 2003398:	e0bffa15 	stw	r2,-24(fp)

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 200339c:	e0fffa17 	ldw	r3,-24(fp)
 20033a0:	00a00034 	movhi	r2,32768
 20033a4:	10bfffc4 	addi	r2,r2,-1
 20033a8:	1884703a 	and	r2,r3,r2
 20033ac:	e0bffa15 	stw	r2,-24(fp)
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
 20033b0:	e0fffa17 	ldw	r3,-24(fp)
 20033b4:	008fd274 	movhi	r2,16201
 20033b8:	1083f604 	addi	r2,r2,4056
 20033bc:	10c00516 	blt	r2,r3,20033d4 <cosf+0x60>
 20033c0:	e17ff917 	ldw	r5,-28(fp)
 20033c4:	e13fff17 	ldw	r4,-4(fp)
 20033c8:	20044b40 	call	20044b4 <__kernel_cosf>
 20033cc:	1007883a 	mov	r3,r2
 20033d0:	00003206 	br	200349c <cosf+0x128>

    /* cos(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 20033d4:	e0fffa17 	ldw	r3,-24(fp)
 20033d8:	009fe034 	movhi	r2,32640
 20033dc:	18800416 	blt	r3,r2,20033f0 <cosf+0x7c>
 20033e0:	e0ffff17 	ldw	r3,-4(fp)
 20033e4:	e0bfff17 	ldw	r2,-4(fp)
 20033e8:	1887ffb2 	custom	254,r3,r3,r2
 20033ec:	00002b06 	br	200349c <cosf+0x128>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 20033f0:	e0bffc04 	addi	r2,fp,-16
 20033f4:	100b883a 	mov	r5,r2
 20033f8:	e13fff17 	ldw	r4,-4(fp)
 20033fc:	2003bac0 	call	2003bac <__ieee754_rem_pio2f>
 2003400:	e0bffb15 	stw	r2,-20(fp)
	    switch(n&3) {
 2003404:	e0bffb17 	ldw	r2,-20(fp)
 2003408:	108000cc 	andi	r2,r2,3
 200340c:	10c00060 	cmpeqi	r3,r2,1
 2003410:	18000a1e 	bne	r3,zero,200343c <cosf+0xc8>
 2003414:	10c000a0 	cmpeqi	r3,r2,2
 2003418:	1800111e 	bne	r3,zero,2003460 <cosf+0xec>
 200341c:	1000181e 	bne	r2,zero,2003480 <cosf+0x10c>
		case 0: return  __kernel_cosf(y[0],y[1]);
 2003420:	e0bffc17 	ldw	r2,-16(fp)
 2003424:	e0fffd17 	ldw	r3,-12(fp)
 2003428:	180b883a 	mov	r5,r3
 200342c:	1009883a 	mov	r4,r2
 2003430:	20044b40 	call	20044b4 <__kernel_cosf>
 2003434:	1007883a 	mov	r3,r2
 2003438:	00001806 	br	200349c <cosf+0x128>
		case 1: return -__kernel_sinf(y[0],y[1],1);
 200343c:	e0bffc17 	ldw	r2,-16(fp)
 2003440:	e0fffd17 	ldw	r3,-12(fp)
 2003444:	01800044 	movi	r6,1
 2003448:	180b883a 	mov	r5,r3
 200344c:	1009883a 	mov	r4,r2
 2003450:	20055180 	call	2005518 <__kernel_sinf>
 2003454:	1007883a 	mov	r3,r2
 2003458:	1807f872 	custom	225,r3,r3,zero
 200345c:	00000f06 	br	200349c <cosf+0x128>
		case 2: return -__kernel_cosf(y[0],y[1]);
 2003460:	e0bffc17 	ldw	r2,-16(fp)
 2003464:	e0fffd17 	ldw	r3,-12(fp)
 2003468:	180b883a 	mov	r5,r3
 200346c:	1009883a 	mov	r4,r2
 2003470:	20044b40 	call	20044b4 <__kernel_cosf>
 2003474:	1007883a 	mov	r3,r2
 2003478:	1807f872 	custom	225,r3,r3,zero
 200347c:	00000706 	br	200349c <cosf+0x128>
		default:
		        return  __kernel_sinf(y[0],y[1],1);
 2003480:	e0bffc17 	ldw	r2,-16(fp)
 2003484:	e0fffd17 	ldw	r3,-12(fp)
 2003488:	01800044 	movi	r6,1
 200348c:	180b883a 	mov	r5,r3
 2003490:	1009883a 	mov	r4,r2
 2003494:	20055180 	call	2005518 <__kernel_sinf>
 2003498:	1007883a 	mov	r3,r2
 200349c:	1805883a 	mov	r2,r3
	    }
	}
}
 20034a0:	e037883a 	mov	sp,fp
 20034a4:	dfc00117 	ldw	ra,4(sp)
 20034a8:	df000017 	ldw	fp,0(sp)
 20034ac:	dec00204 	addi	sp,sp,8
 20034b0:	f800283a 	ret

020034b4 <sinf>:
	float sinf(float x)
#else
	float sinf(x)
	float x;
#endif
{
 20034b4:	defff704 	addi	sp,sp,-36
 20034b8:	dfc00815 	stw	ra,32(sp)
 20034bc:	df000715 	stw	fp,28(sp)
 20034c0:	df000704 	addi	fp,sp,28
 20034c4:	e13fff15 	stw	r4,-4(fp)
	float y[2],z=0.0;
 20034c8:	e03ff915 	stw	zero,-28(fp)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
 20034cc:	e0bfff17 	ldw	r2,-4(fp)
 20034d0:	e0bffe15 	stw	r2,-8(fp)
 20034d4:	e0bffe17 	ldw	r2,-8(fp)
 20034d8:	e0bffa15 	stw	r2,-24(fp)

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 20034dc:	e0fffa17 	ldw	r3,-24(fp)
 20034e0:	00a00034 	movhi	r2,32768
 20034e4:	10bfffc4 	addi	r2,r2,-1
 20034e8:	1884703a 	and	r2,r3,r2
 20034ec:	e0bffa15 	stw	r2,-24(fp)
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
 20034f0:	e0fffa17 	ldw	r3,-24(fp)
 20034f4:	008fd274 	movhi	r2,16201
 20034f8:	1083f604 	addi	r2,r2,4056
 20034fc:	10c00616 	blt	r2,r3,2003518 <sinf+0x64>
 2003500:	000d883a 	mov	r6,zero
 2003504:	e17ff917 	ldw	r5,-28(fp)
 2003508:	e13fff17 	ldw	r4,-4(fp)
 200350c:	20055180 	call	2005518 <__kernel_sinf>
 2003510:	1007883a 	mov	r3,r2
 2003514:	00003206 	br	20035e0 <sinf+0x12c>

    /* sin(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 2003518:	e0fffa17 	ldw	r3,-24(fp)
 200351c:	009fe034 	movhi	r2,32640
 2003520:	18800416 	blt	r3,r2,2003534 <sinf+0x80>
 2003524:	e0ffff17 	ldw	r3,-4(fp)
 2003528:	e0bfff17 	ldw	r2,-4(fp)
 200352c:	1887ffb2 	custom	254,r3,r3,r2
 2003530:	00002b06 	br	20035e0 <sinf+0x12c>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 2003534:	e0bffc04 	addi	r2,fp,-16
 2003538:	100b883a 	mov	r5,r2
 200353c:	e13fff17 	ldw	r4,-4(fp)
 2003540:	2003bac0 	call	2003bac <__ieee754_rem_pio2f>
 2003544:	e0bffb15 	stw	r2,-20(fp)
	    switch(n&3) {
 2003548:	e0bffb17 	ldw	r2,-20(fp)
 200354c:	108000cc 	andi	r2,r2,3
 2003550:	10c00060 	cmpeqi	r3,r2,1
 2003554:	18000b1e 	bne	r3,zero,2003584 <sinf+0xd0>
 2003558:	10c000a0 	cmpeqi	r3,r2,2
 200355c:	1800101e 	bne	r3,zero,20035a0 <sinf+0xec>
 2003560:	1000181e 	bne	r2,zero,20035c4 <sinf+0x110>
		case 0: return  __kernel_sinf(y[0],y[1],1);
 2003564:	e0bffc17 	ldw	r2,-16(fp)
 2003568:	e0fffd17 	ldw	r3,-12(fp)
 200356c:	01800044 	movi	r6,1
 2003570:	180b883a 	mov	r5,r3
 2003574:	1009883a 	mov	r4,r2
 2003578:	20055180 	call	2005518 <__kernel_sinf>
 200357c:	1007883a 	mov	r3,r2
 2003580:	00001706 	br	20035e0 <sinf+0x12c>
		case 1: return  __kernel_cosf(y[0],y[1]);
 2003584:	e0bffc17 	ldw	r2,-16(fp)
 2003588:	e0fffd17 	ldw	r3,-12(fp)
 200358c:	180b883a 	mov	r5,r3
 2003590:	1009883a 	mov	r4,r2
 2003594:	20044b40 	call	20044b4 <__kernel_cosf>
 2003598:	1007883a 	mov	r3,r2
 200359c:	00001006 	br	20035e0 <sinf+0x12c>
		case 2: return -__kernel_sinf(y[0],y[1],1);
 20035a0:	e0bffc17 	ldw	r2,-16(fp)
 20035a4:	e0fffd17 	ldw	r3,-12(fp)
 20035a8:	01800044 	movi	r6,1
 20035ac:	180b883a 	mov	r5,r3
 20035b0:	1009883a 	mov	r4,r2
 20035b4:	20055180 	call	2005518 <__kernel_sinf>
 20035b8:	1007883a 	mov	r3,r2
 20035bc:	1807f872 	custom	225,r3,r3,zero
 20035c0:	00000706 	br	20035e0 <sinf+0x12c>
		default:
			return -__kernel_cosf(y[0],y[1]);
 20035c4:	e0bffc17 	ldw	r2,-16(fp)
 20035c8:	e0fffd17 	ldw	r3,-12(fp)
 20035cc:	180b883a 	mov	r5,r3
 20035d0:	1009883a 	mov	r4,r2
 20035d4:	20044b40 	call	20044b4 <__kernel_cosf>
 20035d8:	1007883a 	mov	r3,r2
 20035dc:	1807f872 	custom	225,r3,r3,zero
 20035e0:	1805883a 	mov	r2,r3
	    }
	}
}
 20035e4:	e037883a 	mov	sp,fp
 20035e8:	dfc00117 	ldw	ra,4(sp)
 20035ec:	df000017 	ldw	fp,0(sp)
 20035f0:	dec00204 	addi	sp,sp,8
 20035f4:	f800283a 	ret

020035f8 <atan2f>:
	float atan2f(float y, float x)		/* wrapper atan2f */
#else
	float atan2f(y,x)			/* wrapper atan2 */
	float y,x;
#endif
{
 20035f8:	defffc04 	addi	sp,sp,-16
 20035fc:	dfc00315 	stw	ra,12(sp)
 2003600:	df000215 	stw	fp,8(sp)
 2003604:	df000204 	addi	fp,sp,8
 2003608:	e13ffe15 	stw	r4,-8(fp)
 200360c:	e17fff15 	stw	r5,-4(fp)
	return __ieee754_atan2f(y,x);
 2003610:	e17fff17 	ldw	r5,-4(fp)
 2003614:	e13ffe17 	ldw	r4,-8(fp)
 2003618:	20037980 	call	2003798 <__ieee754_atan2f>
 200361c:	1007883a 	mov	r3,r2
 2003620:	1805883a 	mov	r2,r3
}
 2003624:	e037883a 	mov	sp,fp
 2003628:	dfc00117 	ldw	ra,4(sp)
 200362c:	df000017 	ldw	fp,0(sp)
 2003630:	dec00204 	addi	sp,sp,8
 2003634:	f800283a 	ret

02003638 <sqrtf>:
	float sqrtf(float x)		/* wrapper sqrtf */
#else
	float sqrtf(x)			/* wrapper sqrtf */
	float x;
#endif
{
 2003638:	defff304 	addi	sp,sp,-52
 200363c:	dfc00c15 	stw	ra,48(sp)
 2003640:	df000b15 	stw	fp,44(sp)
 2003644:	df000b04 	addi	fp,sp,44
 2003648:	e13fff15 	stw	r4,-4(fp)
#ifdef _IEEE_LIBM
	return __ieee754_sqrtf(x);
#else
	float z;
	struct exception exc;
	z = __ieee754_sqrtf(x);
 200364c:	e13fff17 	ldw	r4,-4(fp)
 2003650:	20042200 	call	2004220 <__ieee754_sqrtf>
 2003654:	e0bff515 	stw	r2,-44(fp)
	if(_LIB_VERSION == _IEEE_ || isnan(x)) return z;
 2003658:	d0a02617 	ldw	r2,-32616(gp)
 200365c:	10bfffe0 	cmpeqi	r2,r2,-1
 2003660:	1000031e 	bne	r2,zero,2003670 <sqrtf+0x38>
 2003664:	e13fff17 	ldw	r4,-4(fp)
 2003668:	2005c180 	call	2005c18 <__fpclassifyf>
 200366c:	1000021e 	bne	r2,zero,2003678 <sqrtf+0x40>
 2003670:	e0fff517 	ldw	r3,-44(fp)
 2003674:	00004206 	br	2003780 <sqrtf+0x148>
	if(x<(float)0.0) {
 2003678:	e0bfff17 	ldw	r2,-4(fp)
 200367c:	0007883a 	mov	r3,zero
 2003680:	10c5f9f2 	custom	231,r2,r2,r3
 2003684:	10003d26 	beq	r2,zero,200377c <sqrtf+0x144>
            /* sqrtf(negative) */
            exc.type = DOMAIN;
 2003688:	00800044 	movi	r2,1
 200368c:	e0bff615 	stw	r2,-40(fp)
            exc.name = "sqrtf";
 2003690:	008080b4 	movhi	r2,514
 2003694:	10859404 	addi	r2,r2,5712
 2003698:	e0bff715 	stw	r2,-36(fp)
	    exc.err = 0;
 200369c:	e03ffe15 	stw	zero,-8(fp)
	    exc.arg1 = exc.arg2 = (double)x;
 20036a0:	e13fff17 	ldw	r4,-4(fp)
 20036a4:	20071d80 	call	20071d8 <__extendsfdf2>
 20036a8:	1009883a 	mov	r4,r2
 20036ac:	180b883a 	mov	r5,r3
 20036b0:	e13ffa15 	stw	r4,-24(fp)
 20036b4:	e17ffb15 	stw	r5,-20(fp)
 20036b8:	e0bffa17 	ldw	r2,-24(fp)
 20036bc:	e0fffb17 	ldw	r3,-20(fp)
 20036c0:	e0bff815 	stw	r2,-32(fp)
 20036c4:	e0fff915 	stw	r3,-28(fp)
            if (_LIB_VERSION == _SVID_)
 20036c8:	d0a02617 	ldw	r2,-32616(gp)
 20036cc:	1000031e 	bne	r2,zero,20036dc <sqrtf+0xa4>
              exc.retval = 0.0;
 20036d0:	e03ffc15 	stw	zero,-16(fp)
 20036d4:	e03ffd15 	stw	zero,-12(fp)
 20036d8:	00000b06 	br	2003708 <sqrtf+0xd0>
            else
              exc.retval = 0.0/0.0;
 20036dc:	000d883a 	mov	r6,zero
 20036e0:	000f883a 	mov	r7,zero
 20036e4:	0009883a 	mov	r4,zero
 20036e8:	000b883a 	mov	r5,zero
 20036ec:	2005f800 	call	2005f80 <__divdf3>
 20036f0:	1009883a 	mov	r4,r2
 20036f4:	180b883a 	mov	r5,r3
 20036f8:	2005883a 	mov	r2,r4
 20036fc:	2807883a 	mov	r3,r5
 2003700:	e0bffc15 	stw	r2,-16(fp)
 2003704:	e0fffd15 	stw	r3,-12(fp)
            if (_LIB_VERSION == _POSIX_) 
 2003708:	d0a02617 	ldw	r2,-32616(gp)
 200370c:	10800098 	cmpnei	r2,r2,2
 2003710:	1000051e 	bne	r2,zero,2003728 <sqrtf+0xf0>
              errno = EDOM;
 2003714:	20076a80 	call	20076a8 <__errno>
 2003718:	1007883a 	mov	r3,r2
 200371c:	00800844 	movi	r2,33
 2003720:	18800015 	stw	r2,0(r3)
 2003724:	00000806 	br	2003748 <sqrtf+0x110>
            else if (!matherr(&exc)) {
 2003728:	e0bff604 	addi	r2,fp,-40
 200372c:	1009883a 	mov	r4,r2
 2003730:	20056840 	call	2005684 <matherr>
 2003734:	1000041e 	bne	r2,zero,2003748 <sqrtf+0x110>
              errno = EDOM;
 2003738:	20076a80 	call	20076a8 <__errno>
 200373c:	1007883a 	mov	r3,r2
 2003740:	00800844 	movi	r2,33
 2003744:	18800015 	stw	r2,0(r3)
            }
            if (exc.err != 0)
 2003748:	e0bffe17 	ldw	r2,-8(fp)
 200374c:	10000426 	beq	r2,zero,2003760 <sqrtf+0x128>
	      errno = exc.err;
 2003750:	20076a80 	call	20076a8 <__errno>
 2003754:	1007883a 	mov	r3,r2
 2003758:	e0bffe17 	ldw	r2,-8(fp)
 200375c:	18800015 	stw	r2,0(r3)
	    return (float)exc.retval; 
 2003760:	e0bffc17 	ldw	r2,-16(fp)
 2003764:	e0fffd17 	ldw	r3,-12(fp)
 2003768:	1009883a 	mov	r4,r2
 200376c:	180b883a 	mov	r5,r3
 2003770:	20072e80 	call	20072e8 <__truncdfsf2>
 2003774:	1007883a 	mov	r3,r2
 2003778:	00000106 	br	2003780 <sqrtf+0x148>
	} else
	    return z;
 200377c:	e0fff517 	ldw	r3,-44(fp)
 2003780:	1805883a 	mov	r2,r3
#endif
}
 2003784:	e037883a 	mov	sp,fp
 2003788:	dfc00117 	ldw	ra,4(sp)
 200378c:	df000017 	ldw	fp,0(sp)
 2003790:	dec00204 	addi	sp,sp,8
 2003794:	f800283a 	ret

02003798 <__ieee754_atan2f>:
	float __ieee754_atan2f(float y, float x)
#else
	float __ieee754_atan2f(y,x)
	float  y,x;
#endif
{  
 2003798:	defff004 	addi	sp,sp,-64
 200379c:	dfc00f15 	stw	ra,60(sp)
 20037a0:	df000e15 	stw	fp,56(sp)
 20037a4:	df000e04 	addi	fp,sp,56
 20037a8:	e13ffe15 	stw	r4,-8(fp)
 20037ac:	e17fff15 	stw	r5,-4(fp)
	float z;
	__int32_t k,m,hx,hy,ix,iy;

	GET_FLOAT_WORD(hx,x);
 20037b0:	e0bfff17 	ldw	r2,-4(fp)
 20037b4:	e0bffa15 	stw	r2,-24(fp)
 20037b8:	e0bffa17 	ldw	r2,-24(fp)
 20037bc:	e0bff315 	stw	r2,-52(fp)
	ix = hx&0x7fffffff;
 20037c0:	e0fff317 	ldw	r3,-52(fp)
 20037c4:	00a00034 	movhi	r2,32768
 20037c8:	10bfffc4 	addi	r2,r2,-1
 20037cc:	1884703a 	and	r2,r3,r2
 20037d0:	e0bff415 	stw	r2,-48(fp)
	GET_FLOAT_WORD(hy,y);
 20037d4:	e0bffe17 	ldw	r2,-8(fp)
 20037d8:	e0bffb15 	stw	r2,-20(fp)
 20037dc:	e0bffb17 	ldw	r2,-20(fp)
 20037e0:	e0bff515 	stw	r2,-44(fp)
	iy = hy&0x7fffffff;
 20037e4:	e0fff517 	ldw	r3,-44(fp)
 20037e8:	00a00034 	movhi	r2,32768
 20037ec:	10bfffc4 	addi	r2,r2,-1
 20037f0:	1884703a 	and	r2,r3,r2
 20037f4:	e0bff615 	stw	r2,-40(fp)
	if(FLT_UWORD_IS_NAN(ix)||
 20037f8:	e0bff417 	ldw	r2,-48(fp)
 20037fc:	00dfe034 	movhi	r3,32640
 2003800:	18800316 	blt	r3,r2,2003810 <__ieee754_atan2f+0x78>
 2003804:	e0bff617 	ldw	r2,-40(fp)
 2003808:	00dfe034 	movhi	r3,32640
 200380c:	1880040e 	bge	r3,r2,2003820 <__ieee754_atan2f+0x88>
	   FLT_UWORD_IS_NAN(iy))	/* x or y is NaN */
	   return x+y;
 2003810:	e0ffff17 	ldw	r3,-4(fp)
 2003814:	e0bffe17 	ldw	r2,-8(fp)
 2003818:	1887ff72 	custom	253,r3,r3,r2
 200381c:	0000dd06 	br	2003b94 <__ieee754_atan2f+0x3fc>
	if(hx==0x3f800000) return atanf(y);   /* x=1.0 */
 2003820:	e0fff317 	ldw	r3,-52(fp)
 2003824:	008fe034 	movhi	r2,16256
 2003828:	1880041e 	bne	r3,r2,200383c <__ieee754_atan2f+0xa4>
 200382c:	e13ffe17 	ldw	r4,-8(fp)
 2003830:	20056ec0 	call	20056ec <atanf>
 2003834:	1007883a 	mov	r3,r2
 2003838:	0000d606 	br	2003b94 <__ieee754_atan2f+0x3fc>
	m = ((hy>>31)&1)|((hx>>30)&2);	/* 2*sign(x)+sign(y) */
 200383c:	e0bff517 	ldw	r2,-44(fp)
 2003840:	1004d7fa 	srli	r2,r2,31
 2003844:	1007883a 	mov	r3,r2
 2003848:	e0bff317 	ldw	r2,-52(fp)
 200384c:	1005d7ba 	srai	r2,r2,30
 2003850:	1080008c 	andi	r2,r2,2
 2003854:	1884b03a 	or	r2,r3,r2
 2003858:	e0bff715 	stw	r2,-36(fp)

    /* when y = 0 */
	if(FLT_UWORD_IS_ZERO(iy)) {
 200385c:	e0bff617 	ldw	r2,-40(fp)
 2003860:	1000191e 	bne	r2,zero,20038c8 <__ieee754_atan2f+0x130>
	    switch(m) {
 2003864:	e0bff717 	ldw	r2,-36(fp)
 2003868:	10c000a0 	cmpeqi	r3,r2,2
 200386c:	1800091e 	bne	r3,zero,2003894 <__ieee754_atan2f+0xfc>
 2003870:	10c000c8 	cmpgei	r3,r2,3
 2003874:	1800021e 	bne	r3,zero,2003880 <__ieee754_atan2f+0xe8>
 2003878:	10001316 	blt	r2,zero,20038c8 <__ieee754_atan2f+0x130>
 200387c:	00000306 	br	200388c <__ieee754_atan2f+0xf4>
 2003880:	108000e0 	cmpeqi	r2,r2,3
 2003884:	1000091e 	bne	r2,zero,20038ac <__ieee754_atan2f+0x114>
 2003888:	00000f06 	br	20038c8 <__ieee754_atan2f+0x130>
		case 0: 
		case 1: return y; 	/* atan(+-0,+anything)=+-0 */
 200388c:	e0fffe17 	ldw	r3,-8(fp)
 2003890:	0000c006 	br	2003b94 <__ieee754_atan2f+0x3fc>
		case 2: return  pi+tiny;/* atan(+0,-anything) = pi */
 2003894:	00d01274 	movhi	r3,16457
 2003898:	18c3f6c4 	addi	r3,r3,4059
 200389c:	008368b4 	movhi	r2,3490
 20038a0:	10909804 	addi	r2,r2,16992
 20038a4:	1887ff72 	custom	253,r3,r3,r2
 20038a8:	0000ba06 	br	2003b94 <__ieee754_atan2f+0x3fc>
		case 3: return -pi-tiny;/* atan(-0,-anything) =-pi */
 20038ac:	00901274 	movhi	r2,16457
 20038b0:	1083f6c4 	addi	r2,r2,4059
 20038b4:	1007f872 	custom	225,r3,r2,zero
 20038b8:	008368b4 	movhi	r2,3490
 20038bc:	10909804 	addi	r2,r2,16992
 20038c0:	1887ffb2 	custom	254,r3,r3,r2
 20038c4:	0000b306 	br	2003b94 <__ieee754_atan2f+0x3fc>
	    }
	}
    /* when x = 0 */
	if(FLT_UWORD_IS_ZERO(ix)) return (hy<0)?  -pi_o_2-tiny: pi_o_2+tiny;
 20038c8:	e0bff417 	ldw	r2,-48(fp)
 20038cc:	10000f1e 	bne	r2,zero,200390c <__ieee754_atan2f+0x174>
 20038d0:	e0bff517 	ldw	r2,-44(fp)
 20038d4:	1000070e 	bge	r2,zero,20038f4 <__ieee754_atan2f+0x15c>
 20038d8:	008ff274 	movhi	r2,16329
 20038dc:	1083f6c4 	addi	r2,r2,4059
 20038e0:	1007f872 	custom	225,r3,r2,zero
 20038e4:	008368b4 	movhi	r2,3490
 20038e8:	10909804 	addi	r2,r2,16992
 20038ec:	1887ffb2 	custom	254,r3,r3,r2
 20038f0:	0000a806 	br	2003b94 <__ieee754_atan2f+0x3fc>
 20038f4:	00cff274 	movhi	r3,16329
 20038f8:	18c3f6c4 	addi	r3,r3,4059
 20038fc:	008368b4 	movhi	r2,3490
 2003900:	10909804 	addi	r2,r2,16992
 2003904:	1887ff72 	custom	253,r3,r3,r2
 2003908:	0000a206 	br	2003b94 <__ieee754_atan2f+0x3fc>
	    
    /* when x is INF */
	if(FLT_UWORD_IS_INFINITE(ix)) {
 200390c:	e0fff417 	ldw	r3,-48(fp)
 2003910:	009fe034 	movhi	r2,32640
 2003914:	18804a1e 	bne	r3,r2,2003a40 <__ieee754_atan2f+0x2a8>
	    if(FLT_UWORD_IS_INFINITE(iy)) {
 2003918:	e0fff617 	ldw	r3,-40(fp)
 200391c:	009fe034 	movhi	r2,32640
 2003920:	1880291e 	bne	r3,r2,20039c8 <__ieee754_atan2f+0x230>
		switch(m) {
 2003924:	e0bff717 	ldw	r2,-36(fp)
 2003928:	10c00060 	cmpeqi	r3,r2,1
 200392c:	18000f1e 	bne	r3,zero,200396c <__ieee754_atan2f+0x1d4>
 2003930:	10c00088 	cmpgei	r3,r2,2
 2003934:	1800021e 	bne	r3,zero,2003940 <__ieee754_atan2f+0x1a8>
 2003938:	10000626 	beq	r2,zero,2003954 <__ieee754_atan2f+0x1bc>
 200393c:	00004006 	br	2003a40 <__ieee754_atan2f+0x2a8>
 2003940:	10c000a0 	cmpeqi	r3,r2,2
 2003944:	1800101e 	bne	r3,zero,2003988 <__ieee754_atan2f+0x1f0>
 2003948:	108000e0 	cmpeqi	r2,r2,3
 200394c:	1000161e 	bne	r2,zero,20039a8 <__ieee754_atan2f+0x210>
 2003950:	00003b06 	br	2003a40 <__ieee754_atan2f+0x2a8>
		    case 0: return  pi_o_4+tiny;/* atan(+INF,+INF) */
 2003954:	00cfd274 	movhi	r3,16201
 2003958:	18c3f6c4 	addi	r3,r3,4059
 200395c:	008368b4 	movhi	r2,3490
 2003960:	10909804 	addi	r2,r2,16992
 2003964:	1887ff72 	custom	253,r3,r3,r2
 2003968:	00008a06 	br	2003b94 <__ieee754_atan2f+0x3fc>
		    case 1: return -pi_o_4-tiny;/* atan(-INF,+INF) */
 200396c:	008fd274 	movhi	r2,16201
 2003970:	1083f6c4 	addi	r2,r2,4059
 2003974:	1007f872 	custom	225,r3,r2,zero
 2003978:	008368b4 	movhi	r2,3490
 200397c:	10909804 	addi	r2,r2,16992
 2003980:	1887ffb2 	custom	254,r3,r3,r2
 2003984:	00008306 	br	2003b94 <__ieee754_atan2f+0x3fc>
		    case 2: return  (float)3.0*pi_o_4+tiny;/*atan(+INF,-INF)*/
 2003988:	008fd274 	movhi	r2,16201
 200398c:	1083f6c4 	addi	r2,r2,4059
 2003990:	00d01034 	movhi	r3,16448
 2003994:	10c7ff32 	custom	252,r3,r2,r3
 2003998:	008368b4 	movhi	r2,3490
 200399c:	10909804 	addi	r2,r2,16992
 20039a0:	1887ff72 	custom	253,r3,r3,r2
 20039a4:	00007b06 	br	2003b94 <__ieee754_atan2f+0x3fc>
		    case 3: return (float)-3.0*pi_o_4-tiny;/*atan(-INF,-INF)*/
 20039a8:	008fd274 	movhi	r2,16201
 20039ac:	1083f6c4 	addi	r2,r2,4059
 20039b0:	00f01034 	movhi	r3,49216
 20039b4:	10c7ff32 	custom	252,r3,r2,r3
 20039b8:	008368b4 	movhi	r2,3490
 20039bc:	10909804 	addi	r2,r2,16992
 20039c0:	1887ffb2 	custom	254,r3,r3,r2
 20039c4:	00007306 	br	2003b94 <__ieee754_atan2f+0x3fc>
		}
	    } else {
		switch(m) {
 20039c8:	e0bff717 	ldw	r2,-36(fp)
 20039cc:	10c00060 	cmpeqi	r3,r2,1
 20039d0:	18000b1e 	bne	r3,zero,2003a00 <__ieee754_atan2f+0x268>
 20039d4:	10c00088 	cmpgei	r3,r2,2
 20039d8:	1800021e 	bne	r3,zero,20039e4 <__ieee754_atan2f+0x24c>
 20039dc:	10000626 	beq	r2,zero,20039f8 <__ieee754_atan2f+0x260>
 20039e0:	00001706 	br	2003a40 <__ieee754_atan2f+0x2a8>
 20039e4:	10c000a0 	cmpeqi	r3,r2,2
 20039e8:	1800081e 	bne	r3,zero,2003a0c <__ieee754_atan2f+0x274>
 20039ec:	108000e0 	cmpeqi	r2,r2,3
 20039f0:	10000c1e 	bne	r2,zero,2003a24 <__ieee754_atan2f+0x28c>
 20039f4:	00001206 	br	2003a40 <__ieee754_atan2f+0x2a8>
		    case 0: return  zero  ;	/* atan(+...,+INF) */
 20039f8:	0007883a 	mov	r3,zero
 20039fc:	00006506 	br	2003b94 <__ieee754_atan2f+0x3fc>
		    case 1: return -zero  ;	/* atan(-...,+INF) */
 2003a00:	0005883a 	mov	r2,zero
 2003a04:	1007f872 	custom	225,r3,r2,zero
 2003a08:	00006206 	br	2003b94 <__ieee754_atan2f+0x3fc>
		    case 2: return  pi+tiny  ;	/* atan(+...,-INF) */
 2003a0c:	00d01274 	movhi	r3,16457
 2003a10:	18c3f6c4 	addi	r3,r3,4059
 2003a14:	008368b4 	movhi	r2,3490
 2003a18:	10909804 	addi	r2,r2,16992
 2003a1c:	1887ff72 	custom	253,r3,r3,r2
 2003a20:	00005c06 	br	2003b94 <__ieee754_atan2f+0x3fc>
		    case 3: return -pi-tiny  ;	/* atan(-...,-INF) */
 2003a24:	00901274 	movhi	r2,16457
 2003a28:	1083f6c4 	addi	r2,r2,4059
 2003a2c:	1007f872 	custom	225,r3,r2,zero
 2003a30:	008368b4 	movhi	r2,3490
 2003a34:	10909804 	addi	r2,r2,16992
 2003a38:	1887ffb2 	custom	254,r3,r3,r2
 2003a3c:	00005506 	br	2003b94 <__ieee754_atan2f+0x3fc>
		}
	    }
	}
    /* when y is INF */
	if(FLT_UWORD_IS_INFINITE(iy)) return (hy<0)? -pi_o_2-tiny: pi_o_2+tiny;
 2003a40:	e0fff617 	ldw	r3,-40(fp)
 2003a44:	009fe034 	movhi	r2,32640
 2003a48:	18800f1e 	bne	r3,r2,2003a88 <__ieee754_atan2f+0x2f0>
 2003a4c:	e0bff517 	ldw	r2,-44(fp)
 2003a50:	1000070e 	bge	r2,zero,2003a70 <__ieee754_atan2f+0x2d8>
 2003a54:	008ff274 	movhi	r2,16329
 2003a58:	1083f6c4 	addi	r2,r2,4059
 2003a5c:	1007f872 	custom	225,r3,r2,zero
 2003a60:	008368b4 	movhi	r2,3490
 2003a64:	10909804 	addi	r2,r2,16992
 2003a68:	1887ffb2 	custom	254,r3,r3,r2
 2003a6c:	00004906 	br	2003b94 <__ieee754_atan2f+0x3fc>
 2003a70:	00cff274 	movhi	r3,16329
 2003a74:	18c3f6c4 	addi	r3,r3,4059
 2003a78:	008368b4 	movhi	r2,3490
 2003a7c:	10909804 	addi	r2,r2,16992
 2003a80:	1887ff72 	custom	253,r3,r3,r2
 2003a84:	00004306 	br	2003b94 <__ieee754_atan2f+0x3fc>

    /* compute y/x */
	k = (iy-ix)>>23;
 2003a88:	e0fff617 	ldw	r3,-40(fp)
 2003a8c:	e0bff417 	ldw	r2,-48(fp)
 2003a90:	1885c83a 	sub	r2,r3,r2
 2003a94:	1005d5fa 	srai	r2,r2,23
 2003a98:	e0bff815 	stw	r2,-32(fp)
	if(k > 60) z=pi_o_2+(float)0.5*pi_lo; 	/* |y/x| >  2**60 */
 2003a9c:	e0bff817 	ldw	r2,-32(fp)
 2003aa0:	10800f50 	cmplti	r2,r2,61
 2003aa4:	1000091e 	bne	r2,zero,2003acc <__ieee754_atan2f+0x334>
 2003aa8:	00acef34 	movhi	r2,46012
 2003aac:	10af4b84 	addi	r2,r2,-17106
 2003ab0:	00cfc034 	movhi	r3,16128
 2003ab4:	10c7ff32 	custom	252,r3,r2,r3
 2003ab8:	008ff274 	movhi	r2,16329
 2003abc:	1083f6c4 	addi	r2,r2,4059
 2003ac0:	1885ff72 	custom	253,r2,r3,r2
 2003ac4:	e0bff215 	stw	r2,-56(fp)
 2003ac8:	00001006 	br	2003b0c <__ieee754_atan2f+0x374>
	else if(hx<0&&k<-60) z=0.0; 	/* |y|/x < -2**60 */
 2003acc:	e0bff317 	ldw	r2,-52(fp)
 2003ad0:	1000050e 	bge	r2,zero,2003ae8 <__ieee754_atan2f+0x350>
 2003ad4:	e0bff817 	ldw	r2,-32(fp)
 2003ad8:	10bff108 	cmpgei	r2,r2,-60
 2003adc:	1000021e 	bne	r2,zero,2003ae8 <__ieee754_atan2f+0x350>
 2003ae0:	e03ff215 	stw	zero,-56(fp)
 2003ae4:	00000906 	br	2003b0c <__ieee754_atan2f+0x374>
	else z=atanf(fabsf(y/x));	/* safe to do y/x */
 2003ae8:	e0fffe17 	ldw	r3,-8(fp)
 2003aec:	e0bfff17 	ldw	r2,-4(fp)
 2003af0:	1885fff2 	custom	255,r2,r3,r2
 2003af4:	1009883a 	mov	r4,r2
 2003af8:	2005a5c0 	call	2005a5c <fabsf>
 2003afc:	1007883a 	mov	r3,r2
 2003b00:	1809883a 	mov	r4,r3
 2003b04:	20056ec0 	call	20056ec <atanf>
 2003b08:	e0bff215 	stw	r2,-56(fp)
	switch (m) {
 2003b0c:	e0bff717 	ldw	r2,-36(fp)
 2003b10:	10c00060 	cmpeqi	r3,r2,1
 2003b14:	1800051e 	bne	r3,zero,2003b2c <__ieee754_atan2f+0x394>
 2003b18:	10c000a0 	cmpeqi	r3,r2,2
 2003b1c:	18000e1e 	bne	r3,zero,2003b58 <__ieee754_atan2f+0x3c0>
 2003b20:	1000151e 	bne	r2,zero,2003b78 <__ieee754_atan2f+0x3e0>
	    case 0: return       z  ;	/* atan(+,+) */
 2003b24:	e0fff217 	ldw	r3,-56(fp)
 2003b28:	00001a06 	br	2003b94 <__ieee754_atan2f+0x3fc>
	    case 1: {
	    	      __uint32_t zh;
		      GET_FLOAT_WORD(zh,z);
 2003b2c:	e0bff217 	ldw	r2,-56(fp)
 2003b30:	e0bffc15 	stw	r2,-16(fp)
 2003b34:	e0bffc17 	ldw	r2,-16(fp)
 2003b38:	e0bff915 	stw	r2,-28(fp)
		      SET_FLOAT_WORD(z,zh ^ 0x80000000);
 2003b3c:	e0bff917 	ldw	r2,-28(fp)
 2003b40:	10a0003c 	xorhi	r2,r2,32768
 2003b44:	e0bffd15 	stw	r2,-12(fp)
 2003b48:	e0bffd17 	ldw	r2,-12(fp)
 2003b4c:	e0bff215 	stw	r2,-56(fp)
		    }
		    return       z  ;	/* atan(-,+) */
 2003b50:	e0fff217 	ldw	r3,-56(fp)
 2003b54:	00000f06 	br	2003b94 <__ieee754_atan2f+0x3fc>
	    case 2: return  pi-(z-pi_lo);/* atan(+,-) */
 2003b58:	00901274 	movhi	r2,16457
 2003b5c:	1083f6c4 	addi	r2,r2,4059
 2003b60:	00ecef34 	movhi	r3,46012
 2003b64:	18ef4b84 	addi	r3,r3,-17106
 2003b68:	e13ff217 	ldw	r4,-56(fp)
 2003b6c:	20c7ffb2 	custom	254,r3,r4,r3
 2003b70:	10c7ffb2 	custom	254,r3,r2,r3
 2003b74:	00000706 	br	2003b94 <__ieee754_atan2f+0x3fc>
	    default: /* case 3 */
	    	    return  (z-pi_lo)-pi;/* atan(-,-) */
 2003b78:	00acef34 	movhi	r2,46012
 2003b7c:	10af4b84 	addi	r2,r2,-17106
 2003b80:	e0fff217 	ldw	r3,-56(fp)
 2003b84:	1887ffb2 	custom	254,r3,r3,r2
 2003b88:	00901274 	movhi	r2,16457
 2003b8c:	1083f6c4 	addi	r2,r2,4059
 2003b90:	1887ffb2 	custom	254,r3,r3,r2
 2003b94:	1805883a 	mov	r2,r3
	}
}
 2003b98:	e037883a 	mov	sp,fp
 2003b9c:	dfc00117 	ldw	ra,4(sp)
 2003ba0:	df000017 	ldw	fp,0(sp)
 2003ba4:	dec00204 	addi	sp,sp,8
 2003ba8:	f800283a 	ret

02003bac <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
 2003bac:	deffe604 	addi	sp,sp,-104
 2003bb0:	dfc01915 	stw	ra,100(sp)
 2003bb4:	df001815 	stw	fp,96(sp)
 2003bb8:	df001804 	addi	fp,sp,96
 2003bbc:	e13ffe15 	stw	r4,-8(fp)
 2003bc0:	e17fff15 	stw	r5,-4(fp)
	float z,w,t,r,fn;
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
 2003bc4:	e0bffe17 	ldw	r2,-8(fp)
 2003bc8:	e0bffa15 	stw	r2,-24(fp)
 2003bcc:	e0bffa17 	ldw	r2,-24(fp)
 2003bd0:	e0bfef15 	stw	r2,-68(fp)
	ix = hx&0x7fffffff;
 2003bd4:	e0ffef17 	ldw	r3,-68(fp)
 2003bd8:	00a00034 	movhi	r2,32768
 2003bdc:	10bfffc4 	addi	r2,r2,-1
 2003be0:	1884703a 	and	r2,r3,r2
 2003be4:	e0bff015 	stw	r2,-64(fp)
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
 2003be8:	e0fff017 	ldw	r3,-64(fp)
 2003bec:	008fd274 	movhi	r2,16201
 2003bf0:	1083f604 	addi	r2,r2,4056
 2003bf4:	10c00816 	blt	r2,r3,2003c18 <__ieee754_rem_pio2f+0x6c>
	    {y[0] = x; y[1] = 0; return 0;}
 2003bf8:	e0bfff17 	ldw	r2,-4(fp)
 2003bfc:	e0fffe17 	ldw	r3,-8(fp)
 2003c00:	10c00015 	stw	r3,0(r2)
 2003c04:	e0bfff17 	ldw	r2,-4(fp)
 2003c08:	10800104 	addi	r2,r2,4
 2003c0c:	10000015 	stw	zero,0(r2)
 2003c10:	0005883a 	mov	r2,zero
 2003c14:	00017d06 	br	200420c <__ieee754_rem_pio2f+0x660>
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
 2003c18:	e0fff017 	ldw	r3,-64(fp)
 2003c1c:	009005f4 	movhi	r2,16407
 2003c20:	10b2f8c4 	addi	r2,r2,-13341
 2003c24:	10c06816 	blt	r2,r3,2003dc8 <__ieee754_rem_pio2f+0x21c>
	    if(hx>0) { 
 2003c28:	e0bfef17 	ldw	r2,-68(fp)
 2003c2c:	0080330e 	bge	zero,r2,2003cfc <__ieee754_rem_pio2f+0x150>
		z = x - pio2_1;
 2003c30:	008ff274 	movhi	r2,16329
 2003c34:	1083e004 	addi	r2,r2,3968
 2003c38:	e0fffe17 	ldw	r3,-8(fp)
 2003c3c:	1885ffb2 	custom	254,r2,r3,r2
 2003c40:	e0bfea15 	stw	r2,-88(fp)
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 2003c44:	e0fff017 	ldw	r3,-64(fp)
 2003c48:	00bffc04 	movi	r2,-16
 2003c4c:	1886703a 	and	r3,r3,r2
 2003c50:	008ff274 	movhi	r2,16329
 2003c54:	1083f404 	addi	r2,r2,4048
 2003c58:	18801126 	beq	r3,r2,2003ca0 <__ieee754_rem_pio2f+0xf4>
		    y[0] = z - pio2_1t;
 2003c5c:	008dcd74 	movhi	r2,14133
 2003c60:	109110c4 	addi	r2,r2,17475
 2003c64:	e0ffea17 	ldw	r3,-88(fp)
 2003c68:	1887ffb2 	custom	254,r3,r3,r2
 2003c6c:	e0bfff17 	ldw	r2,-4(fp)
 2003c70:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])-pio2_1t;
 2003c74:	e0bfff17 	ldw	r2,-4(fp)
 2003c78:	10c00104 	addi	r3,r2,4
 2003c7c:	e13fff17 	ldw	r4,-4(fp)
 2003c80:	20800017 	ldw	r2,0(r4)
 2003c84:	e13fea17 	ldw	r4,-88(fp)
 2003c88:	2089ffb2 	custom	254,r4,r4,r2
 2003c8c:	008dcd74 	movhi	r2,14133
 2003c90:	109110c4 	addi	r2,r2,17475
 2003c94:	2085ffb2 	custom	254,r2,r4,r2
 2003c98:	18800015 	stw	r2,0(r3)
 2003c9c:	00001506 	br	2003cf4 <__ieee754_rem_pio2f+0x148>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
 2003ca0:	008dcd74 	movhi	r2,14133
 2003ca4:	10910004 	addi	r2,r2,17408
 2003ca8:	e0ffea17 	ldw	r3,-88(fp)
 2003cac:	1885ffb2 	custom	254,r2,r3,r2
 2003cb0:	e0bfea15 	stw	r2,-88(fp)
		    y[0] = z - pio2_2t;
 2003cb4:	008ba1b4 	movhi	r2,11910
 2003cb8:	10a8c204 	addi	r2,r2,-23800
 2003cbc:	e0ffea17 	ldw	r3,-88(fp)
 2003cc0:	1887ffb2 	custom	254,r3,r3,r2
 2003cc4:	e0bfff17 	ldw	r2,-4(fp)
 2003cc8:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])-pio2_2t;
 2003ccc:	e0bfff17 	ldw	r2,-4(fp)
 2003cd0:	10c00104 	addi	r3,r2,4
 2003cd4:	e13fff17 	ldw	r4,-4(fp)
 2003cd8:	20800017 	ldw	r2,0(r4)
 2003cdc:	e13fea17 	ldw	r4,-88(fp)
 2003ce0:	2089ffb2 	custom	254,r4,r4,r2
 2003ce4:	008ba1b4 	movhi	r2,11910
 2003ce8:	10a8c204 	addi	r2,r2,-23800
 2003cec:	2085ffb2 	custom	254,r2,r4,r2
 2003cf0:	18800015 	stw	r2,0(r3)
		}
		return 1;
 2003cf4:	00800044 	movi	r2,1
 2003cf8:	00014406 	br	200420c <__ieee754_rem_pio2f+0x660>
	    } else {	/* negative x */
		z = x + pio2_1;
 2003cfc:	008ff274 	movhi	r2,16329
 2003d00:	1083e004 	addi	r2,r2,3968
 2003d04:	e0fffe17 	ldw	r3,-8(fp)
 2003d08:	1885ff72 	custom	253,r2,r3,r2
 2003d0c:	e0bfea15 	stw	r2,-88(fp)
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 2003d10:	e0fff017 	ldw	r3,-64(fp)
 2003d14:	00bffc04 	movi	r2,-16
 2003d18:	1886703a 	and	r3,r3,r2
 2003d1c:	008ff274 	movhi	r2,16329
 2003d20:	1083f404 	addi	r2,r2,4048
 2003d24:	18801126 	beq	r3,r2,2003d6c <__ieee754_rem_pio2f+0x1c0>
		    y[0] = z + pio2_1t;
 2003d28:	008dcd74 	movhi	r2,14133
 2003d2c:	109110c4 	addi	r2,r2,17475
 2003d30:	e0ffea17 	ldw	r3,-88(fp)
 2003d34:	10c7ff72 	custom	253,r3,r2,r3
 2003d38:	e0bfff17 	ldw	r2,-4(fp)
 2003d3c:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])+pio2_1t;
 2003d40:	e0bfff17 	ldw	r2,-4(fp)
 2003d44:	10c00104 	addi	r3,r2,4
 2003d48:	e13fff17 	ldw	r4,-4(fp)
 2003d4c:	20800017 	ldw	r2,0(r4)
 2003d50:	e13fea17 	ldw	r4,-88(fp)
 2003d54:	2089ffb2 	custom	254,r4,r4,r2
 2003d58:	008dcd74 	movhi	r2,14133
 2003d5c:	109110c4 	addi	r2,r2,17475
 2003d60:	2085ff72 	custom	253,r2,r4,r2
 2003d64:	18800015 	stw	r2,0(r3)
 2003d68:	00001506 	br	2003dc0 <__ieee754_rem_pio2f+0x214>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
 2003d6c:	008dcd74 	movhi	r2,14133
 2003d70:	10910004 	addi	r2,r2,17408
 2003d74:	e0ffea17 	ldw	r3,-88(fp)
 2003d78:	1885ff72 	custom	253,r2,r3,r2
 2003d7c:	e0bfea15 	stw	r2,-88(fp)
		    y[0] = z + pio2_2t;
 2003d80:	008ba1b4 	movhi	r2,11910
 2003d84:	10a8c204 	addi	r2,r2,-23800
 2003d88:	e0ffea17 	ldw	r3,-88(fp)
 2003d8c:	10c7ff72 	custom	253,r3,r2,r3
 2003d90:	e0bfff17 	ldw	r2,-4(fp)
 2003d94:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])+pio2_2t;
 2003d98:	e0bfff17 	ldw	r2,-4(fp)
 2003d9c:	10c00104 	addi	r3,r2,4
 2003da0:	e13fff17 	ldw	r4,-4(fp)
 2003da4:	20800017 	ldw	r2,0(r4)
 2003da8:	e13fea17 	ldw	r4,-88(fp)
 2003dac:	2089ffb2 	custom	254,r4,r4,r2
 2003db0:	008ba1b4 	movhi	r2,11910
 2003db4:	10a8c204 	addi	r2,r2,-23800
 2003db8:	2085ff72 	custom	253,r2,r4,r2
 2003dbc:	18800015 	stw	r2,0(r3)
		}
		return -1;
 2003dc0:	00bfffc4 	movi	r2,-1
 2003dc4:	00011106 	br	200420c <__ieee754_rem_pio2f+0x660>
	    }
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
 2003dc8:	e0fff017 	ldw	r3,-64(fp)
 2003dcc:	0090d274 	movhi	r2,17225
 2003dd0:	1083e004 	addi	r2,r2,3968
 2003dd4:	10c0a516 	blt	r2,r3,200406c <__ieee754_rem_pio2f+0x4c0>
	    t  = fabsf(x);
 2003dd8:	e13ffe17 	ldw	r4,-8(fp)
 2003ddc:	2005a5c0 	call	2005a5c <fabsf>
 2003de0:	e0bff115 	stw	r2,-60(fp)
	    n  = (__int32_t) (t*invpio2+half);
 2003de4:	008fc8f4 	movhi	r2,16163
 2003de8:	10be6104 	addi	r2,r2,-1660
 2003dec:	e0fff117 	ldw	r3,-60(fp)
 2003df0:	10c7ff32 	custom	252,r3,r2,r3
 2003df4:	008fc034 	movhi	r2,16128
 2003df8:	1885ff72 	custom	253,r2,r3,r2
 2003dfc:	1005fe72 	custom	249,r2,r2,zero
 2003e00:	e0bff215 	stw	r2,-56(fp)
	    fn = (float)n;
 2003e04:	e0bff217 	ldw	r2,-56(fp)
 2003e08:	1005feb2 	custom	250,r2,r2,zero
 2003e0c:	e0bff315 	stw	r2,-52(fp)
	    r  = t-fn*pio2_1;
 2003e10:	008ff274 	movhi	r2,16329
 2003e14:	1083e004 	addi	r2,r2,3968
 2003e18:	e0fff317 	ldw	r3,-52(fp)
 2003e1c:	10c5ff32 	custom	252,r2,r2,r3
 2003e20:	e0fff117 	ldw	r3,-60(fp)
 2003e24:	1885ffb2 	custom	254,r2,r3,r2
 2003e28:	e0bfec15 	stw	r2,-80(fp)
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
 2003e2c:	008dcd74 	movhi	r2,14133
 2003e30:	109110c4 	addi	r2,r2,17475
 2003e34:	e0fff317 	ldw	r3,-52(fp)
 2003e38:	1885ff32 	custom	252,r2,r3,r2
 2003e3c:	e0bfeb15 	stw	r2,-84(fp)
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
 2003e40:	e0bff217 	ldw	r2,-56(fp)
 2003e44:	10800808 	cmpgei	r2,r2,32
 2003e48:	1000121e 	bne	r2,zero,2003e94 <__ieee754_rem_pio2f+0x2e8>
 2003e4c:	e0fff017 	ldw	r3,-64(fp)
 2003e50:	00bfc004 	movi	r2,-256
 2003e54:	1888703a 	and	r4,r3,r2
 2003e58:	e0bff217 	ldw	r2,-56(fp)
 2003e5c:	10ffffc4 	addi	r3,r2,-1
 2003e60:	008080b4 	movhi	r2,514
 2003e64:	10865c04 	addi	r2,r2,6512
 2003e68:	18c7883a 	add	r3,r3,r3
 2003e6c:	18c7883a 	add	r3,r3,r3
 2003e70:	10c5883a 	add	r2,r2,r3
 2003e74:	10800017 	ldw	r2,0(r2)
 2003e78:	20800626 	beq	r4,r2,2003e94 <__ieee754_rem_pio2f+0x2e8>
		y[0] = r-w;	/* quick check no cancellation */
 2003e7c:	e0ffec17 	ldw	r3,-80(fp)
 2003e80:	e0bfeb17 	ldw	r2,-84(fp)
 2003e84:	1887ffb2 	custom	254,r3,r3,r2
 2003e88:	e0bfff17 	ldw	r2,-4(fp)
 2003e8c:	10c00015 	stw	r3,0(r2)
 2003e90:	00005a06 	br	2003ffc <__ieee754_rem_pio2f+0x450>
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
 2003e94:	e0bff017 	ldw	r2,-64(fp)
 2003e98:	1005d5fa 	srai	r2,r2,23
 2003e9c:	e0bff415 	stw	r2,-48(fp)
	        y[0] = r-w; 
 2003ea0:	e0ffec17 	ldw	r3,-80(fp)
 2003ea4:	e0bfeb17 	ldw	r2,-84(fp)
 2003ea8:	1887ffb2 	custom	254,r3,r3,r2
 2003eac:	e0bfff17 	ldw	r2,-4(fp)
 2003eb0:	10c00015 	stw	r3,0(r2)
		GET_FLOAT_WORD(high,y[0]);
 2003eb4:	e0ffff17 	ldw	r3,-4(fp)
 2003eb8:	18800017 	ldw	r2,0(r3)
 2003ebc:	e0bffb15 	stw	r2,-20(fp)
 2003ec0:	e0bffb17 	ldw	r2,-20(fp)
 2003ec4:	e0bff515 	stw	r2,-44(fp)
	        i = j-((high>>23)&0xff);
 2003ec8:	e0fff417 	ldw	r3,-48(fp)
 2003ecc:	e0bff517 	ldw	r2,-44(fp)
 2003ed0:	1004d5fa 	srli	r2,r2,23
 2003ed4:	10803fcc 	andi	r2,r2,255
 2003ed8:	1885c83a 	sub	r2,r3,r2
 2003edc:	e0bfed15 	stw	r2,-76(fp)
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
 2003ee0:	e0bfed17 	ldw	r2,-76(fp)
 2003ee4:	10800250 	cmplti	r2,r2,9
 2003ee8:	1000441e 	bne	r2,zero,2003ffc <__ieee754_rem_pio2f+0x450>
		    t  = r;
 2003eec:	e0bfec17 	ldw	r2,-80(fp)
 2003ef0:	e0bff115 	stw	r2,-60(fp)
		    w  = fn*pio2_2;	
 2003ef4:	008dcd74 	movhi	r2,14133
 2003ef8:	10910004 	addi	r2,r2,17408
 2003efc:	e0fff317 	ldw	r3,-52(fp)
 2003f00:	1885ff32 	custom	252,r2,r3,r2
 2003f04:	e0bfeb15 	stw	r2,-84(fp)
		    r  = t-w;
 2003f08:	e0fff117 	ldw	r3,-60(fp)
 2003f0c:	e0bfeb17 	ldw	r2,-84(fp)
 2003f10:	1885ffb2 	custom	254,r2,r3,r2
 2003f14:	e0bfec15 	stw	r2,-80(fp)
		    w  = fn*pio2_2t-((t-r)-w);	
 2003f18:	008ba1b4 	movhi	r2,11910
 2003f1c:	10a8c204 	addi	r2,r2,-23800
 2003f20:	e0fff317 	ldw	r3,-52(fp)
 2003f24:	10c7ff32 	custom	252,r3,r2,r3
 2003f28:	e13ff117 	ldw	r4,-60(fp)
 2003f2c:	e0bfec17 	ldw	r2,-80(fp)
 2003f30:	2089ffb2 	custom	254,r4,r4,r2
 2003f34:	e0bfeb17 	ldw	r2,-84(fp)
 2003f38:	2085ffb2 	custom	254,r2,r4,r2
 2003f3c:	1885ffb2 	custom	254,r2,r3,r2
 2003f40:	e0bfeb15 	stw	r2,-84(fp)
		    y[0] = r-w;
 2003f44:	e0ffec17 	ldw	r3,-80(fp)
 2003f48:	e0bfeb17 	ldw	r2,-84(fp)
 2003f4c:	1887ffb2 	custom	254,r3,r3,r2
 2003f50:	e0bfff17 	ldw	r2,-4(fp)
 2003f54:	10c00015 	stw	r3,0(r2)
		    GET_FLOAT_WORD(high,y[0]);
 2003f58:	e0ffff17 	ldw	r3,-4(fp)
 2003f5c:	18800017 	ldw	r2,0(r3)
 2003f60:	e0bffc15 	stw	r2,-16(fp)
 2003f64:	e0bffc17 	ldw	r2,-16(fp)
 2003f68:	e0bff515 	stw	r2,-44(fp)
		    i = j-((high>>23)&0xff);
 2003f6c:	e0fff417 	ldw	r3,-48(fp)
 2003f70:	e0bff517 	ldw	r2,-44(fp)
 2003f74:	1004d5fa 	srli	r2,r2,23
 2003f78:	10803fcc 	andi	r2,r2,255
 2003f7c:	1885c83a 	sub	r2,r3,r2
 2003f80:	e0bfed15 	stw	r2,-76(fp)
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
 2003f84:	e0bfed17 	ldw	r2,-76(fp)
 2003f88:	10800690 	cmplti	r2,r2,26
 2003f8c:	10001b1e 	bne	r2,zero,2003ffc <__ieee754_rem_pio2f+0x450>
		    	t  = r;	/* will cover all possible cases */
 2003f90:	e0bfec17 	ldw	r2,-80(fp)
 2003f94:	e0bff115 	stw	r2,-60(fp)
		    	w  = fn*pio2_3;	
 2003f98:	008ba1b4 	movhi	r2,11910
 2003f9c:	10a8c004 	addi	r2,r2,-23808
 2003fa0:	e0fff317 	ldw	r3,-52(fp)
 2003fa4:	1885ff32 	custom	252,r2,r3,r2
 2003fa8:	e0bfeb15 	stw	r2,-84(fp)
		    	r  = t-w;
 2003fac:	e0fff117 	ldw	r3,-60(fp)
 2003fb0:	e0bfeb17 	ldw	r2,-84(fp)
 2003fb4:	1885ffb2 	custom	254,r2,r3,r2
 2003fb8:	e0bfec15 	stw	r2,-80(fp)
		    	w  = fn*pio2_3t-((t-r)-w);	
 2003fbc:	00892374 	movhi	r2,9357
 2003fc0:	108c4c84 	addi	r2,r2,12594
 2003fc4:	e0fff317 	ldw	r3,-52(fp)
 2003fc8:	10c7ff32 	custom	252,r3,r2,r3
 2003fcc:	e13ff117 	ldw	r4,-60(fp)
 2003fd0:	e0bfec17 	ldw	r2,-80(fp)
 2003fd4:	2089ffb2 	custom	254,r4,r4,r2
 2003fd8:	e0bfeb17 	ldw	r2,-84(fp)
 2003fdc:	2085ffb2 	custom	254,r2,r4,r2
 2003fe0:	1885ffb2 	custom	254,r2,r3,r2
 2003fe4:	e0bfeb15 	stw	r2,-84(fp)
		    	y[0] = r-w;
 2003fe8:	e0ffec17 	ldw	r3,-80(fp)
 2003fec:	e0bfeb17 	ldw	r2,-84(fp)
 2003ff0:	1887ffb2 	custom	254,r3,r3,r2
 2003ff4:	e0bfff17 	ldw	r2,-4(fp)
 2003ff8:	10c00015 	stw	r3,0(r2)
		    }
		}
	    }
	    y[1] = (r-y[0])-w;
 2003ffc:	e0bfff17 	ldw	r2,-4(fp)
 2004000:	10800104 	addi	r2,r2,4
 2004004:	e13fff17 	ldw	r4,-4(fp)
 2004008:	20c00017 	ldw	r3,0(r4)
 200400c:	e13fec17 	ldw	r4,-80(fp)
 2004010:	20c9ffb2 	custom	254,r4,r4,r3
 2004014:	e0ffeb17 	ldw	r3,-84(fp)
 2004018:	20c7ffb2 	custom	254,r3,r4,r3
 200401c:	10c00015 	stw	r3,0(r2)
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
 2004020:	e0bfef17 	ldw	r2,-68(fp)
 2004024:	10000f0e 	bge	r2,zero,2004064 <__ieee754_rem_pio2f+0x4b8>
 2004028:	e0ffff17 	ldw	r3,-4(fp)
 200402c:	18800017 	ldw	r2,0(r3)
 2004030:	1007f872 	custom	225,r3,r2,zero
 2004034:	e0bfff17 	ldw	r2,-4(fp)
 2004038:	10c00015 	stw	r3,0(r2)
 200403c:	e0bfff17 	ldw	r2,-4(fp)
 2004040:	10800104 	addi	r2,r2,4
 2004044:	e0ffff17 	ldw	r3,-4(fp)
 2004048:	19000104 	addi	r4,r3,4
 200404c:	20c00017 	ldw	r3,0(r4)
 2004050:	1807f872 	custom	225,r3,r3,zero
 2004054:	10c00015 	stw	r3,0(r2)
 2004058:	e0bff217 	ldw	r2,-56(fp)
 200405c:	0085c83a 	sub	r2,zero,r2
 2004060:	00006a06 	br	200420c <__ieee754_rem_pio2f+0x660>
	    else	 return n;
 2004064:	e0bff217 	ldw	r2,-56(fp)
 2004068:	00006806 	br	200420c <__ieee754_rem_pio2f+0x660>
	}
    /* 
     * all other (large) arguments
     */
	if(!FLT_UWORD_IS_FINITE(ix)) {
 200406c:	e0fff017 	ldw	r3,-64(fp)
 2004070:	009fe034 	movhi	r2,32640
 2004074:	18800b16 	blt	r3,r2,20040a4 <__ieee754_rem_pio2f+0x4f8>
	    y[0]=y[1]=x-x; return 0;
 2004078:	e0bfff17 	ldw	r2,-4(fp)
 200407c:	10800104 	addi	r2,r2,4
 2004080:	e13ffe17 	ldw	r4,-8(fp)
 2004084:	e0fffe17 	ldw	r3,-8(fp)
 2004088:	20c7ffb2 	custom	254,r3,r4,r3
 200408c:	10c00015 	stw	r3,0(r2)
 2004090:	10c00017 	ldw	r3,0(r2)
 2004094:	e0bfff17 	ldw	r2,-4(fp)
 2004098:	10c00015 	stw	r3,0(r2)
 200409c:	0005883a 	mov	r2,zero
 20040a0:	00005a06 	br	200420c <__ieee754_rem_pio2f+0x660>
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
 20040a4:	e0bff017 	ldw	r2,-64(fp)
 20040a8:	1005d5fa 	srai	r2,r2,23
 20040ac:	10bfde84 	addi	r2,r2,-134
 20040b0:	e0bff615 	stw	r2,-40(fp)
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
 20040b4:	e0bff617 	ldw	r2,-40(fp)
 20040b8:	100495fa 	slli	r2,r2,23
 20040bc:	e0fff017 	ldw	r3,-64(fp)
 20040c0:	1885c83a 	sub	r2,r3,r2
 20040c4:	e0bffd15 	stw	r2,-12(fp)
 20040c8:	e0bffd17 	ldw	r2,-12(fp)
 20040cc:	e0bfea15 	stw	r2,-88(fp)
	for(i=0;i<2;i++) {
 20040d0:	e03fed15 	stw	zero,-76(fp)
 20040d4:	00001906 	br	200413c <__ieee754_rem_pio2f+0x590>
		tx[i] = (float)((__int32_t)(z));
 20040d8:	e0ffea17 	ldw	r3,-88(fp)
 20040dc:	1805fe72 	custom	249,r2,r3,zero
 20040e0:	1007feb2 	custom	250,r3,r2,zero
 20040e4:	e0bfed17 	ldw	r2,-76(fp)
 20040e8:	1085883a 	add	r2,r2,r2
 20040ec:	1085883a 	add	r2,r2,r2
 20040f0:	e13fea04 	addi	r4,fp,-88
 20040f4:	2085883a 	add	r2,r4,r2
 20040f8:	10800d04 	addi	r2,r2,52
 20040fc:	10c00015 	stw	r3,0(r2)
		z     = (z-tx[i])*two8;
 2004100:	e0bfed17 	ldw	r2,-76(fp)
 2004104:	1085883a 	add	r2,r2,r2
 2004108:	1085883a 	add	r2,r2,r2
 200410c:	e0ffea04 	addi	r3,fp,-88
 2004110:	1885883a 	add	r2,r3,r2
 2004114:	10c00d04 	addi	r3,r2,52
 2004118:	18800017 	ldw	r2,0(r3)
 200411c:	e0ffea17 	ldw	r3,-88(fp)
 2004120:	1887ffb2 	custom	254,r3,r3,r2
 2004124:	0090e034 	movhi	r2,17280
 2004128:	1885ff32 	custom	252,r2,r3,r2
 200412c:	e0bfea15 	stw	r2,-88(fp)
	    y[0]=y[1]=x-x; return 0;
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
	for(i=0;i<2;i++) {
 2004130:	e0bfed17 	ldw	r2,-76(fp)
 2004134:	10800044 	addi	r2,r2,1
 2004138:	e0bfed15 	stw	r2,-76(fp)
 200413c:	e0bfed17 	ldw	r2,-76(fp)
 2004140:	10800090 	cmplti	r2,r2,2
 2004144:	103fe41e 	bne	r2,zero,20040d8 <__ieee754_rem_pio2f+0x52c>
		tx[i] = (float)((__int32_t)(z));
		z     = (z-tx[i])*two8;
	}
	tx[2] = z;
 2004148:	e0bfea17 	ldw	r2,-88(fp)
 200414c:	e0bff915 	stw	r2,-28(fp)
	nx = 3;
 2004150:	008000c4 	movi	r2,3
 2004154:	e0bfee15 	stw	r2,-72(fp)
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
 2004158:	00000306 	br	2004168 <__ieee754_rem_pio2f+0x5bc>
 200415c:	e0bfee17 	ldw	r2,-72(fp)
 2004160:	10bfffc4 	addi	r2,r2,-1
 2004164:	e0bfee15 	stw	r2,-72(fp)
 2004168:	e0bfee17 	ldw	r2,-72(fp)
 200416c:	10bfffc4 	addi	r2,r2,-1
 2004170:	1085883a 	add	r2,r2,r2
 2004174:	1085883a 	add	r2,r2,r2
 2004178:	e13fea04 	addi	r4,fp,-88
 200417c:	2085883a 	add	r2,r4,r2
 2004180:	10c00d04 	addi	r3,r2,52
 2004184:	18800017 	ldw	r2,0(r3)
 2004188:	0007883a 	mov	r3,zero
 200418c:	10c5f8f2 	custom	227,r2,r2,r3
 2004190:	103ff21e 	bne	r2,zero,200415c <__ieee754_rem_pio2f+0x5b0>
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
 2004194:	e0fff704 	addi	r3,fp,-36
 2004198:	008080b4 	movhi	r2,514
 200419c:	10859604 	addi	r2,r2,5720
 20041a0:	d8800115 	stw	r2,4(sp)
 20041a4:	00800084 	movi	r2,2
 20041a8:	d8800015 	stw	r2,0(sp)
 20041ac:	e1ffee17 	ldw	r7,-72(fp)
 20041b0:	e1bff617 	ldw	r6,-40(fp)
 20041b4:	e17fff17 	ldw	r5,-4(fp)
 20041b8:	1809883a 	mov	r4,r3
 20041bc:	20046780 	call	2004678 <__kernel_rem_pio2f>
 20041c0:	e0bff215 	stw	r2,-56(fp)
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
 20041c4:	e0bfef17 	ldw	r2,-68(fp)
 20041c8:	10000f0e 	bge	r2,zero,2004208 <__ieee754_rem_pio2f+0x65c>
 20041cc:	e0ffff17 	ldw	r3,-4(fp)
 20041d0:	18800017 	ldw	r2,0(r3)
 20041d4:	1007f872 	custom	225,r3,r2,zero
 20041d8:	e0bfff17 	ldw	r2,-4(fp)
 20041dc:	10c00015 	stw	r3,0(r2)
 20041e0:	e0bfff17 	ldw	r2,-4(fp)
 20041e4:	10800104 	addi	r2,r2,4
 20041e8:	e0ffff17 	ldw	r3,-4(fp)
 20041ec:	19000104 	addi	r4,r3,4
 20041f0:	20c00017 	ldw	r3,0(r4)
 20041f4:	1807f872 	custom	225,r3,r3,zero
 20041f8:	10c00015 	stw	r3,0(r2)
 20041fc:	e0bff217 	ldw	r2,-56(fp)
 2004200:	0085c83a 	sub	r2,zero,r2
 2004204:	00000106 	br	200420c <__ieee754_rem_pio2f+0x660>
	return n;
 2004208:	e0bff217 	ldw	r2,-56(fp)
}
 200420c:	e037883a 	mov	sp,fp
 2004210:	dfc00117 	ldw	ra,4(sp)
 2004214:	df000017 	ldw	fp,0(sp)
 2004218:	dec00204 	addi	sp,sp,8
 200421c:	f800283a 	ret

02004220 <__ieee754_sqrtf>:
	float __ieee754_sqrtf(float x)
#else
	float __ieee754_sqrtf(x)
	float x;
#endif
{
 2004220:	defff304 	addi	sp,sp,-52
 2004224:	df000c15 	stw	fp,48(sp)
 2004228:	df000c04 	addi	fp,sp,48
 200422c:	e13fff15 	stw	r4,-4(fp)
	float z;
	__uint32_t r,hx;
	__int32_t ix,s,q,m,t,i;

	GET_FLOAT_WORD(ix,x);
 2004230:	e0bfff17 	ldw	r2,-4(fp)
 2004234:	e0bffd15 	stw	r2,-12(fp)
 2004238:	e0bffd17 	ldw	r2,-12(fp)
 200423c:	e0bff515 	stw	r2,-44(fp)
	hx = ix&0x7fffffff;
 2004240:	e0fff517 	ldw	r3,-44(fp)
 2004244:	00a00034 	movhi	r2,32768
 2004248:	10bfffc4 	addi	r2,r2,-1
 200424c:	1884703a 	and	r2,r3,r2
 2004250:	e0bffa15 	stw	r2,-24(fp)

    /* take care of Inf and NaN */
	if(!FLT_UWORD_IS_FINITE(hx))
 2004254:	e0fffa17 	ldw	r3,-24(fp)
 2004258:	009fe034 	movhi	r2,32640
 200425c:	18800636 	bltu	r3,r2,2004278 <__ieee754_sqrtf+0x58>
	    return x*x+x;		/* sqrt(NaN)=NaN, sqrt(+inf)=+inf
 2004260:	e0ffff17 	ldw	r3,-4(fp)
 2004264:	e0bfff17 	ldw	r2,-4(fp)
 2004268:	1887ff32 	custom	252,r3,r3,r2
 200426c:	e0bfff17 	ldw	r2,-4(fp)
 2004270:	1885ff72 	custom	253,r2,r3,r2
 2004274:	00008906 	br	200449c <__ieee754_sqrtf+0x27c>
					   sqrt(-inf)=sNaN */
    /* take care of zero and -ves */
	if(FLT_UWORD_IS_ZERO(hx)) return x;/* sqrt(+-0) = +-0 */
 2004278:	e0bffa17 	ldw	r2,-24(fp)
 200427c:	1000021e 	bne	r2,zero,2004288 <__ieee754_sqrtf+0x68>
 2004280:	e0bfff17 	ldw	r2,-4(fp)
 2004284:	00008506 	br	200449c <__ieee754_sqrtf+0x27c>
	if(ix<0) return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
 2004288:	e0bff517 	ldw	r2,-44(fp)
 200428c:	1000080e 	bge	r2,zero,20042b0 <__ieee754_sqrtf+0x90>
 2004290:	e0ffff17 	ldw	r3,-4(fp)
 2004294:	e0bfff17 	ldw	r2,-4(fp)
 2004298:	1887ffb2 	custom	254,r3,r3,r2
 200429c:	e13fff17 	ldw	r4,-4(fp)
 20042a0:	e0bfff17 	ldw	r2,-4(fp)
 20042a4:	2085ffb2 	custom	254,r2,r4,r2
 20042a8:	1885fff2 	custom	255,r2,r3,r2
 20042ac:	00007b06 	br	200449c <__ieee754_sqrtf+0x27c>

    /* normalize x */
	m = (ix>>23);
 20042b0:	e0bff517 	ldw	r2,-44(fp)
 20042b4:	1005d5fa 	srai	r2,r2,23
 20042b8:	e0bff815 	stw	r2,-32(fp)
	if(FLT_UWORD_IS_SUBNORMAL(hx)) {		/* subnormal x */
 20042bc:	e0fffa17 	ldw	r3,-24(fp)
 20042c0:	00802034 	movhi	r2,128
 20042c4:	1880102e 	bgeu	r3,r2,2004308 <__ieee754_sqrtf+0xe8>
	    for(i=0;(ix&0x00800000L)==0;i++) ix<<=1;
 20042c8:	e03ff915 	stw	zero,-28(fp)
 20042cc:	00000606 	br	20042e8 <__ieee754_sqrtf+0xc8>
 20042d0:	e0bff517 	ldw	r2,-44(fp)
 20042d4:	1085883a 	add	r2,r2,r2
 20042d8:	e0bff515 	stw	r2,-44(fp)
 20042dc:	e0bff917 	ldw	r2,-28(fp)
 20042e0:	10800044 	addi	r2,r2,1
 20042e4:	e0bff915 	stw	r2,-28(fp)
 20042e8:	e0bff517 	ldw	r2,-44(fp)
 20042ec:	1080202c 	andhi	r2,r2,128
 20042f0:	103ff726 	beq	r2,zero,20042d0 <__ieee754_sqrtf+0xb0>
	    m -= i-1;
 20042f4:	e0bff917 	ldw	r2,-28(fp)
 20042f8:	10bfffc4 	addi	r2,r2,-1
 20042fc:	e0fff817 	ldw	r3,-32(fp)
 2004300:	1885c83a 	sub	r2,r3,r2
 2004304:	e0bff815 	stw	r2,-32(fp)
	}
	m -= 127;	/* unbias exponent */
 2004308:	e0bff817 	ldw	r2,-32(fp)
 200430c:	10bfe044 	addi	r2,r2,-127
 2004310:	e0bff815 	stw	r2,-32(fp)
	ix = (ix&0x007fffffL)|0x00800000L;
 2004314:	e0fff517 	ldw	r3,-44(fp)
 2004318:	00802034 	movhi	r2,128
 200431c:	10bfffc4 	addi	r2,r2,-1
 2004320:	1884703a 	and	r2,r3,r2
 2004324:	10802034 	orhi	r2,r2,128
 2004328:	e0bff515 	stw	r2,-44(fp)
	if(m&1)	/* odd m, double x to make it even */
 200432c:	e0bff817 	ldw	r2,-32(fp)
 2004330:	1080004c 	andi	r2,r2,1
 2004334:	10000426 	beq	r2,zero,2004348 <__ieee754_sqrtf+0x128>
	    ix += ix;
 2004338:	e0fff517 	ldw	r3,-44(fp)
 200433c:	e0bff517 	ldw	r2,-44(fp)
 2004340:	1885883a 	add	r2,r3,r2
 2004344:	e0bff515 	stw	r2,-44(fp)
	m >>= 1;	/* m = [m/2] */
 2004348:	e0bff817 	ldw	r2,-32(fp)
 200434c:	1005d07a 	srai	r2,r2,1
 2004350:	e0bff815 	stw	r2,-32(fp)

    /* generate sqrt(x) bit by bit */
	ix += ix;
 2004354:	e0fff517 	ldw	r3,-44(fp)
 2004358:	e0bff517 	ldw	r2,-44(fp)
 200435c:	1885883a 	add	r2,r3,r2
 2004360:	e0bff515 	stw	r2,-44(fp)
	q = s = 0;		/* q = sqrt(x) */
 2004364:	e03ff615 	stw	zero,-40(fp)
 2004368:	e0bff617 	ldw	r2,-40(fp)
 200436c:	e0bff715 	stw	r2,-36(fp)
	r = 0x01000000L;		/* r = moving bit from right to left */
 2004370:	00804034 	movhi	r2,256
 2004374:	e0bff415 	stw	r2,-48(fp)

	while(r!=0) {
 2004378:	00001a06 	br	20043e4 <__ieee754_sqrtf+0x1c4>
	    t = s+r; 
 200437c:	e0fff617 	ldw	r3,-40(fp)
 2004380:	e0bff417 	ldw	r2,-48(fp)
 2004384:	1885883a 	add	r2,r3,r2
 2004388:	e0bffb15 	stw	r2,-20(fp)
	    if(t<=ix) { 
 200438c:	e0bffb17 	ldw	r2,-20(fp)
 2004390:	e0fff517 	ldw	r3,-44(fp)
 2004394:	18800c16 	blt	r3,r2,20043c8 <__ieee754_sqrtf+0x1a8>
		s    = t+r; 
 2004398:	e0fffb17 	ldw	r3,-20(fp)
 200439c:	e0bff417 	ldw	r2,-48(fp)
 20043a0:	1885883a 	add	r2,r3,r2
 20043a4:	e0bff615 	stw	r2,-40(fp)
		ix  -= t; 
 20043a8:	e0fff517 	ldw	r3,-44(fp)
 20043ac:	e0bffb17 	ldw	r2,-20(fp)
 20043b0:	1885c83a 	sub	r2,r3,r2
 20043b4:	e0bff515 	stw	r2,-44(fp)
		q   += r; 
 20043b8:	e0fff717 	ldw	r3,-36(fp)
 20043bc:	e0bff417 	ldw	r2,-48(fp)
 20043c0:	1885883a 	add	r2,r3,r2
 20043c4:	e0bff715 	stw	r2,-36(fp)
	    } 
	    ix += ix;
 20043c8:	e0fff517 	ldw	r3,-44(fp)
 20043cc:	e0bff517 	ldw	r2,-44(fp)
 20043d0:	1885883a 	add	r2,r3,r2
 20043d4:	e0bff515 	stw	r2,-44(fp)
	    r>>=1;
 20043d8:	e0bff417 	ldw	r2,-48(fp)
 20043dc:	1004d07a 	srli	r2,r2,1
 20043e0:	e0bff415 	stw	r2,-48(fp)
    /* generate sqrt(x) bit by bit */
	ix += ix;
	q = s = 0;		/* q = sqrt(x) */
	r = 0x01000000L;		/* r = moving bit from right to left */

	while(r!=0) {
 20043e4:	e0bff417 	ldw	r2,-48(fp)
 20043e8:	103fe41e 	bne	r2,zero,200437c <__ieee754_sqrtf+0x15c>
	    ix += ix;
	    r>>=1;
	}

    /* use floating add to find out rounding direction */
	if(ix!=0) {
 20043ec:	e0bff517 	ldw	r2,-44(fp)
 20043f0:	10001b26 	beq	r2,zero,2004460 <__ieee754_sqrtf+0x240>
	    z = one-tiny; /* trigger inexact flag */
 20043f4:	00cfe034 	movhi	r3,16256
 20043f8:	008368b4 	movhi	r2,3490
 20043fc:	10909804 	addi	r2,r2,16992
 2004400:	1885ffb2 	custom	254,r2,r3,r2
 2004404:	e0bffc15 	stw	r2,-16(fp)
	    if (z>=one) {
 2004408:	008fe034 	movhi	r2,16256
 200440c:	e0fffc17 	ldw	r3,-16(fp)
 2004410:	1885f932 	custom	228,r2,r3,r2
 2004414:	10001226 	beq	r2,zero,2004460 <__ieee754_sqrtf+0x240>
	        z = one+tiny;
 2004418:	00cfe034 	movhi	r3,16256
 200441c:	008368b4 	movhi	r2,3490
 2004420:	10909804 	addi	r2,r2,16992
 2004424:	1885ff72 	custom	253,r2,r3,r2
 2004428:	e0bffc15 	stw	r2,-16(fp)
		if (z>one)
 200442c:	008fe034 	movhi	r2,16256
 2004430:	e0fffc17 	ldw	r3,-16(fp)
 2004434:	1885f972 	custom	229,r2,r3,r2
 2004438:	10000426 	beq	r2,zero,200444c <__ieee754_sqrtf+0x22c>
		    q += 2;
 200443c:	e0bff717 	ldw	r2,-36(fp)
 2004440:	10800084 	addi	r2,r2,2
 2004444:	e0bff715 	stw	r2,-36(fp)
 2004448:	00000506 	br	2004460 <__ieee754_sqrtf+0x240>
		else
		    q += (q&1);
 200444c:	e0bff717 	ldw	r2,-36(fp)
 2004450:	1080004c 	andi	r2,r2,1
 2004454:	e0fff717 	ldw	r3,-36(fp)
 2004458:	1885883a 	add	r2,r3,r2
 200445c:	e0bff715 	stw	r2,-36(fp)
	    }
	}
	ix = (q>>1)+0x3f000000L;
 2004460:	e0bff717 	ldw	r2,-36(fp)
 2004464:	1007d07a 	srai	r3,r2,1
 2004468:	008fc034 	movhi	r2,16128
 200446c:	1885883a 	add	r2,r3,r2
 2004470:	e0bff515 	stw	r2,-44(fp)
	ix += (m <<23);
 2004474:	e0bff817 	ldw	r2,-32(fp)
 2004478:	100495fa 	slli	r2,r2,23
 200447c:	e0fff517 	ldw	r3,-44(fp)
 2004480:	1885883a 	add	r2,r3,r2
 2004484:	e0bff515 	stw	r2,-44(fp)
	SET_FLOAT_WORD(z,ix);
 2004488:	e0bff517 	ldw	r2,-44(fp)
 200448c:	e0bffe15 	stw	r2,-8(fp)
 2004490:	e0bffe17 	ldw	r2,-8(fp)
 2004494:	e0bffc15 	stw	r2,-16(fp)
	return z;
 2004498:	e0bffc17 	ldw	r2,-16(fp)
 200449c:	1007883a 	mov	r3,r2
}
 20044a0:	1805883a 	mov	r2,r3
 20044a4:	e037883a 	mov	sp,fp
 20044a8:	df000017 	ldw	fp,0(sp)
 20044ac:	dec00104 	addi	sp,sp,4
 20044b0:	f800283a 	ret

020044b4 <__kernel_cosf>:
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
 20044b4:	defff504 	addi	sp,sp,-44
 20044b8:	df000a15 	stw	fp,40(sp)
 20044bc:	df000a04 	addi	fp,sp,40
 20044c0:	e13ffe15 	stw	r4,-8(fp)
 20044c4:	e17fff15 	stw	r5,-4(fp)
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
 20044c8:	e0bffe17 	ldw	r2,-8(fp)
 20044cc:	e0bffc15 	stw	r2,-16(fp)
 20044d0:	e0bffc17 	ldw	r2,-16(fp)
 20044d4:	e0bff715 	stw	r2,-36(fp)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
 20044d8:	e0fff717 	ldw	r3,-36(fp)
 20044dc:	00a00034 	movhi	r2,32768
 20044e0:	10bfffc4 	addi	r2,r2,-1
 20044e4:	1884703a 	and	r2,r3,r2
 20044e8:	e0bff715 	stw	r2,-36(fp)
	if(ix<0x32000000) {			/* if x < 2**27 */
 20044ec:	e0fff717 	ldw	r3,-36(fp)
 20044f0:	008c8034 	movhi	r2,12800
 20044f4:	1880050e 	bge	r3,r2,200450c <__kernel_cosf+0x58>
	    if(((int)x)==0) return one;		/* generate inexact */
 20044f8:	e0fffe17 	ldw	r3,-8(fp)
 20044fc:	1805fe72 	custom	249,r2,r3,zero
 2004500:	1000021e 	bne	r2,zero,200450c <__kernel_cosf+0x58>
 2004504:	008fe034 	movhi	r2,16256
 2004508:	00005506 	br	2004660 <__kernel_cosf+0x1ac>
	}
	z  = x*x;
 200450c:	e0fffe17 	ldw	r3,-8(fp)
 2004510:	e0bffe17 	ldw	r2,-8(fp)
 2004514:	1885ff32 	custom	252,r2,r3,r2
 2004518:	e0bff815 	stw	r2,-32(fp)
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 200451c:	00ab5234 	movhi	r2,44360
 2004520:	10b5d384 	addi	r2,r2,-10418
 2004524:	e0fff817 	ldw	r3,-32(fp)
 2004528:	10c7ff32 	custom	252,r3,r2,r3
 200452c:	008c43f4 	movhi	r2,12559
 2004530:	109d3d84 	addi	r2,r2,29942
 2004534:	1887ff72 	custom	253,r3,r3,r2
 2004538:	e0bff817 	ldw	r2,-32(fp)
 200453c:	1887ff32 	custom	252,r3,r3,r2
 2004540:	00ad2534 	movhi	r2,46228
 2004544:	10bc9f04 	addi	r2,r2,-3460
 2004548:	1887ff72 	custom	253,r3,r3,r2
 200454c:	e0bff817 	ldw	r2,-32(fp)
 2004550:	1887ff32 	custom	252,r3,r3,r2
 2004554:	008df434 	movhi	r2,14288
 2004558:	10834044 	addi	r2,r2,3329
 200455c:	1887ff72 	custom	253,r3,r3,r2
 2004560:	e0bff817 	ldw	r2,-32(fp)
 2004564:	1887ff32 	custom	252,r3,r3,r2
 2004568:	00aeadb4 	movhi	r2,47798
 200456c:	1082d844 	addi	r2,r2,2913
 2004570:	1887ff72 	custom	253,r3,r3,r2
 2004574:	e0bff817 	ldw	r2,-32(fp)
 2004578:	1887ff32 	custom	252,r3,r3,r2
 200457c:	008f4af4 	movhi	r2,15659
 2004580:	10aaaac4 	addi	r2,r2,-21845
 2004584:	1887ff72 	custom	253,r3,r3,r2
 2004588:	e0bff817 	ldw	r2,-32(fp)
 200458c:	1885ff32 	custom	252,r2,r3,r2
 2004590:	e0bff915 	stw	r2,-28(fp)
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
 2004594:	e0fff717 	ldw	r3,-36(fp)
 2004598:	008fa6b4 	movhi	r2,16026
 200459c:	10a66644 	addi	r2,r2,-26215
 20045a0:	10c00e16 	blt	r2,r3,20045dc <__kernel_cosf+0x128>
	    return one - ((float)0.5*z - (z*r - x*y));
 20045a4:	00cfe034 	movhi	r3,16256
 20045a8:	e13ff817 	ldw	r4,-32(fp)
 20045ac:	008fc034 	movhi	r2,16128
 20045b0:	2089ff32 	custom	252,r4,r4,r2
 20045b4:	e17ff817 	ldw	r5,-32(fp)
 20045b8:	e0bff917 	ldw	r2,-28(fp)
 20045bc:	288bff32 	custom	252,r5,r5,r2
 20045c0:	e1bffe17 	ldw	r6,-8(fp)
 20045c4:	e0bfff17 	ldw	r2,-4(fp)
 20045c8:	3085ff32 	custom	252,r2,r6,r2
 20045cc:	2885ffb2 	custom	254,r2,r5,r2
 20045d0:	2085ffb2 	custom	254,r2,r4,r2
 20045d4:	1885ffb2 	custom	254,r2,r3,r2
 20045d8:	00002106 	br	2004660 <__kernel_cosf+0x1ac>
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
 20045dc:	e0bff717 	ldw	r2,-36(fp)
 20045e0:	00cfd234 	movhi	r3,16200
 20045e4:	1880030e 	bge	r3,r2,20045f4 <__kernel_cosf+0x140>
		qx = (float)0.28125;
 20045e8:	008fa434 	movhi	r2,16016
 20045ec:	e0bff615 	stw	r2,-40(fp)
 20045f0:	00000606 	br	200460c <__kernel_cosf+0x158>
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
 20045f4:	e0fff717 	ldw	r3,-36(fp)
 20045f8:	00bfc034 	movhi	r2,65280
 20045fc:	1885883a 	add	r2,r3,r2
 2004600:	e0bffd15 	stw	r2,-12(fp)
 2004604:	e0bffd17 	ldw	r2,-12(fp)
 2004608:	e0bff615 	stw	r2,-40(fp)
	    }
	    hz = (float)0.5*z-qx;
 200460c:	e0fff817 	ldw	r3,-32(fp)
 2004610:	008fc034 	movhi	r2,16128
 2004614:	1887ff32 	custom	252,r3,r3,r2
 2004618:	e0bff617 	ldw	r2,-40(fp)
 200461c:	1885ffb2 	custom	254,r2,r3,r2
 2004620:	e0bffa15 	stw	r2,-24(fp)
	    a  = one-qx;
 2004624:	00cfe034 	movhi	r3,16256
 2004628:	e0bff617 	ldw	r2,-40(fp)
 200462c:	1885ffb2 	custom	254,r2,r3,r2
 2004630:	e0bffb15 	stw	r2,-20(fp)
	    return a - (hz - (z*r-x*y));
 2004634:	e0fff817 	ldw	r3,-32(fp)
 2004638:	e0bff917 	ldw	r2,-28(fp)
 200463c:	1887ff32 	custom	252,r3,r3,r2
 2004640:	e13ffe17 	ldw	r4,-8(fp)
 2004644:	e0bfff17 	ldw	r2,-4(fp)
 2004648:	2085ff32 	custom	252,r2,r4,r2
 200464c:	1885ffb2 	custom	254,r2,r3,r2
 2004650:	e0fffa17 	ldw	r3,-24(fp)
 2004654:	1885ffb2 	custom	254,r2,r3,r2
 2004658:	e0fffb17 	ldw	r3,-20(fp)
 200465c:	1885ffb2 	custom	254,r2,r3,r2
 2004660:	1007883a 	mov	r3,r2
	}
}
 2004664:	1805883a 	mov	r2,r3
 2004668:	e037883a 	mov	sp,fp
 200466c:	df000017 	ldw	fp,0(sp)
 2004670:	dec00104 	addi	sp,sp,4
 2004674:	f800283a 	ret

02004678 <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
 2004678:	deff9b04 	addi	sp,sp,-404
 200467c:	dfc06415 	stw	ra,400(sp)
 2004680:	df006315 	stw	fp,396(sp)
 2004684:	df006304 	addi	fp,sp,396
 2004688:	e13ffc15 	stw	r4,-16(fp)
 200468c:	e17ffd15 	stw	r5,-12(fp)
 2004690:	e1bffe15 	stw	r6,-8(fp)
 2004694:	e1ffff15 	stw	r7,-4(fp)
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
 2004698:	008080b4 	movhi	r2,514
 200469c:	10867c04 	addi	r2,r2,6640
 20046a0:	e0c00217 	ldw	r3,8(fp)
 20046a4:	18c7883a 	add	r3,r3,r3
 20046a8:	18c7883a 	add	r3,r3,r3
 20046ac:	10c5883a 	add	r2,r2,r3
 20046b0:	10800017 	ldw	r2,0(r2)
 20046b4:	e0bfa815 	stw	r2,-352(fp)
	jp = jk;
 20046b8:	e0bfa817 	ldw	r2,-352(fp)
 20046bc:	e0bfa915 	stw	r2,-348(fp)

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
 20046c0:	e0bfff17 	ldw	r2,-4(fp)
 20046c4:	10bfffc4 	addi	r2,r2,-1
 20046c8:	e0bfaa15 	stw	r2,-344(fp)
	jv = (e0-3)/8; if(jv<0) jv=0;
 20046cc:	e0bffe17 	ldw	r2,-8(fp)
 20046d0:	10bfff44 	addi	r2,r2,-3
 20046d4:	1000010e 	bge	r2,zero,20046dc <__kernel_rem_pio2f+0x64>
 20046d8:	108001c4 	addi	r2,r2,7
 20046dc:	1005d0fa 	srai	r2,r2,3
 20046e0:	e0bf9e15 	stw	r2,-392(fp)
 20046e4:	e0bf9e17 	ldw	r2,-392(fp)
 20046e8:	1000010e 	bge	r2,zero,20046f0 <__kernel_rem_pio2f+0x78>
 20046ec:	e03f9e15 	stw	zero,-392(fp)
	q0 =  e0-8*(jv+1);
 20046f0:	e0bf9e17 	ldw	r2,-392(fp)
 20046f4:	10800044 	addi	r2,r2,1
 20046f8:	100490fa 	slli	r2,r2,3
 20046fc:	e0fffe17 	ldw	r3,-8(fp)
 2004700:	1885c83a 	sub	r2,r3,r2
 2004704:	e0bfa415 	stw	r2,-368(fp)

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
 2004708:	e0ff9e17 	ldw	r3,-392(fp)
 200470c:	e0bfaa17 	ldw	r2,-344(fp)
 2004710:	1885c83a 	sub	r2,r3,r2
 2004714:	e0bfa215 	stw	r2,-376(fp)
 2004718:	e0ffaa17 	ldw	r3,-344(fp)
 200471c:	e0bfa817 	ldw	r2,-352(fp)
 2004720:	1885883a 	add	r2,r3,r2
 2004724:	e0bfab15 	stw	r2,-340(fp)
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
 2004728:	e03fa115 	stw	zero,-380(fp)
 200472c:	00001906 	br	2004794 <__kernel_rem_pio2f+0x11c>
 2004730:	e0bfa217 	ldw	r2,-376(fp)
 2004734:	10000916 	blt	r2,zero,200475c <__kernel_rem_pio2f+0xe4>
 2004738:	e0bfa217 	ldw	r2,-376(fp)
 200473c:	1085883a 	add	r2,r2,r2
 2004740:	1085883a 	add	r2,r2,r2
 2004744:	1007883a 	mov	r3,r2
 2004748:	e0800317 	ldw	r2,12(fp)
 200474c:	10c5883a 	add	r2,r2,r3
 2004750:	10800017 	ldw	r2,0(r2)
 2004754:	1005feb2 	custom	250,r2,r2,zero
 2004758:	00000106 	br	2004760 <__kernel_rem_pio2f+0xe8>
 200475c:	0005883a 	mov	r2,zero
 2004760:	e0ffa117 	ldw	r3,-380(fp)
 2004764:	18c7883a 	add	r3,r3,r3
 2004768:	18c7883a 	add	r3,r3,r3
 200476c:	e13f9d04 	addi	r4,fp,-396
 2004770:	20c7883a 	add	r3,r4,r3
 2004774:	18c02304 	addi	r3,r3,140
 2004778:	18800015 	stw	r2,0(r3)
 200477c:	e0bfa117 	ldw	r2,-380(fp)
 2004780:	10800044 	addi	r2,r2,1
 2004784:	e0bfa115 	stw	r2,-380(fp)
 2004788:	e0bfa217 	ldw	r2,-376(fp)
 200478c:	10800044 	addi	r2,r2,1
 2004790:	e0bfa215 	stw	r2,-376(fp)
 2004794:	e0bfa117 	ldw	r2,-380(fp)
 2004798:	e0ffab17 	ldw	r3,-340(fp)
 200479c:	18bfe40e 	bge	r3,r2,2004730 <__kernel_rem_pio2f+0xb8>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 20047a0:	e03fa115 	stw	zero,-380(fp)
 20047a4:	00002a06 	br	2004850 <__kernel_rem_pio2f+0x1d8>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
 20047a8:	e03fa215 	stw	zero,-376(fp)
 20047ac:	e03fa715 	stw	zero,-356(fp)
 20047b0:	00001906 	br	2004818 <__kernel_rem_pio2f+0x1a0>
 20047b4:	e0bfa217 	ldw	r2,-376(fp)
 20047b8:	1085883a 	add	r2,r2,r2
 20047bc:	1085883a 	add	r2,r2,r2
 20047c0:	1007883a 	mov	r3,r2
 20047c4:	e0bffc17 	ldw	r2,-16(fp)
 20047c8:	10c5883a 	add	r2,r2,r3
 20047cc:	10c00017 	ldw	r3,0(r2)
 20047d0:	e13faa17 	ldw	r4,-344(fp)
 20047d4:	e0bfa117 	ldw	r2,-380(fp)
 20047d8:	2089883a 	add	r4,r4,r2
 20047dc:	e0bfa217 	ldw	r2,-376(fp)
 20047e0:	2085c83a 	sub	r2,r4,r2
 20047e4:	1085883a 	add	r2,r2,r2
 20047e8:	1085883a 	add	r2,r2,r2
 20047ec:	e13f9d04 	addi	r4,fp,-396
 20047f0:	2085883a 	add	r2,r4,r2
 20047f4:	11002304 	addi	r4,r2,140
 20047f8:	20800017 	ldw	r2,0(r4)
 20047fc:	1885ff32 	custom	252,r2,r3,r2
 2004800:	e0ffa717 	ldw	r3,-356(fp)
 2004804:	1885ff72 	custom	253,r2,r3,r2
 2004808:	e0bfa715 	stw	r2,-356(fp)
 200480c:	e0bfa217 	ldw	r2,-376(fp)
 2004810:	10800044 	addi	r2,r2,1
 2004814:	e0bfa215 	stw	r2,-376(fp)
 2004818:	e0bfa217 	ldw	r2,-376(fp)
 200481c:	e0ffaa17 	ldw	r3,-344(fp)
 2004820:	18bfe40e 	bge	r3,r2,20047b4 <__kernel_rem_pio2f+0x13c>
 2004824:	e0bfa117 	ldw	r2,-380(fp)
 2004828:	1085883a 	add	r2,r2,r2
 200482c:	1085883a 	add	r2,r2,r2
 2004830:	e0ff9d04 	addi	r3,fp,-396
 2004834:	1885883a 	add	r2,r3,r2
 2004838:	10804b04 	addi	r2,r2,300
 200483c:	e0ffa717 	ldw	r3,-356(fp)
 2004840:	10c00015 	stw	r3,0(r2)
    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 2004844:	e0bfa117 	ldw	r2,-380(fp)
 2004848:	10800044 	addi	r2,r2,1
 200484c:	e0bfa115 	stw	r2,-380(fp)
 2004850:	e0bfa117 	ldw	r2,-380(fp)
 2004854:	e0ffa817 	ldw	r3,-352(fp)
 2004858:	18bfd30e 	bge	r3,r2,20047a8 <__kernel_rem_pio2f+0x130>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
	}

	jz = jk;
 200485c:	e0bfa817 	ldw	r2,-352(fp)
 2004860:	e0bf9d15 	stw	r2,-396(fp)
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 2004864:	e03fa115 	stw	zero,-380(fp)
 2004868:	e0bf9d17 	ldw	r2,-396(fp)
 200486c:	e0bfa215 	stw	r2,-376(fp)
 2004870:	e0bf9d17 	ldw	r2,-396(fp)
 2004874:	1085883a 	add	r2,r2,r2
 2004878:	1085883a 	add	r2,r2,r2
 200487c:	e13f9d04 	addi	r4,fp,-396
 2004880:	2085883a 	add	r2,r4,r2
 2004884:	10804b04 	addi	r2,r2,300
 2004888:	10800017 	ldw	r2,0(r2)
 200488c:	e0bfa615 	stw	r2,-360(fp)
 2004890:	00002406 	br	2004924 <__kernel_rem_pio2f+0x2ac>
	    fw    =  (float)((__int32_t)(twon8* z));
 2004894:	00cee034 	movhi	r3,15232
 2004898:	e0bfa617 	ldw	r2,-360(fp)
 200489c:	1885ff32 	custom	252,r2,r3,r2
 20048a0:	1005fe72 	custom	249,r2,r2,zero
 20048a4:	1005feb2 	custom	250,r2,r2,zero
 20048a8:	e0bfa715 	stw	r2,-356(fp)
	    iq[i] =  (__int32_t)(z-two8*fw);
 20048ac:	00d0e034 	movhi	r3,17280
 20048b0:	e0bfa717 	ldw	r2,-356(fp)
 20048b4:	1885ff32 	custom	252,r2,r3,r2
 20048b8:	e0ffa617 	ldw	r3,-360(fp)
 20048bc:	1885ffb2 	custom	254,r2,r3,r2
 20048c0:	1007fe72 	custom	249,r3,r2,zero
 20048c4:	e0bfa117 	ldw	r2,-380(fp)
 20048c8:	1085883a 	add	r2,r2,r2
 20048cc:	1085883a 	add	r2,r2,r2
 20048d0:	e13f9d04 	addi	r4,fp,-396
 20048d4:	2085883a 	add	r2,r4,r2
 20048d8:	10800f04 	addi	r2,r2,60
 20048dc:	10c00015 	stw	r3,0(r2)
	    z     =  q[j-1]+fw;
 20048e0:	e0bfa217 	ldw	r2,-376(fp)
 20048e4:	10bfffc4 	addi	r2,r2,-1
 20048e8:	1085883a 	add	r2,r2,r2
 20048ec:	1085883a 	add	r2,r2,r2
 20048f0:	e0ff9d04 	addi	r3,fp,-396
 20048f4:	1885883a 	add	r2,r3,r2
 20048f8:	10804b04 	addi	r2,r2,300
 20048fc:	10c00017 	ldw	r3,0(r2)
 2004900:	e0bfa717 	ldw	r2,-356(fp)
 2004904:	1885ff72 	custom	253,r2,r3,r2
 2004908:	e0bfa615 	stw	r2,-360(fp)
	}

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 200490c:	e0bfa117 	ldw	r2,-380(fp)
 2004910:	10800044 	addi	r2,r2,1
 2004914:	e0bfa115 	stw	r2,-380(fp)
 2004918:	e0bfa217 	ldw	r2,-376(fp)
 200491c:	10bfffc4 	addi	r2,r2,-1
 2004920:	e0bfa215 	stw	r2,-376(fp)
 2004924:	e0bfa217 	ldw	r2,-376(fp)
 2004928:	00bfda16 	blt	zero,r2,2004894 <__kernel_rem_pio2f+0x21c>
	    iq[i] =  (__int32_t)(z-two8*fw);
	    z     =  q[j-1]+fw;
	}

    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
 200492c:	e17fa417 	ldw	r5,-368(fp)
 2004930:	e13fa617 	ldw	r4,-360(fp)
 2004934:	2005cf40 	call	2005cf4 <scalbnf>
 2004938:	e0bfa615 	stw	r2,-360(fp)
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
 200493c:	e0ffa617 	ldw	r3,-360(fp)
 2004940:	008f8034 	movhi	r2,15872
 2004944:	1885ff32 	custom	252,r2,r3,r2
 2004948:	1009883a 	mov	r4,r2
 200494c:	2005ab40 	call	2005ab4 <floorf>
 2004950:	1007883a 	mov	r3,r2
 2004954:	00904034 	movhi	r2,16640
 2004958:	1885ff32 	custom	252,r2,r3,r2
 200495c:	e0ffa617 	ldw	r3,-360(fp)
 2004960:	1885ffb2 	custom	254,r2,r3,r2
 2004964:	e0bfa615 	stw	r2,-360(fp)
	n  = (__int32_t) z;
 2004968:	e13fa617 	ldw	r4,-360(fp)
 200496c:	2005fe72 	custom	249,r2,r4,zero
 2004970:	e0bfa015 	stw	r2,-384(fp)
	z -= (float)n;
 2004974:	e0bfa017 	ldw	r2,-384(fp)
 2004978:	1005feb2 	custom	250,r2,r2,zero
 200497c:	e0ffa617 	ldw	r3,-360(fp)
 2004980:	1885ffb2 	custom	254,r2,r3,r2
 2004984:	e0bfa615 	stw	r2,-360(fp)
	ih = 0;
 2004988:	e03fa515 	stw	zero,-364(fp)
	if(q0>0) {	/* need iq[jz-1] to determine n */
 200498c:	e0bfa417 	ldw	r2,-368(fp)
 2004990:	0080350e 	bge	zero,r2,2004a68 <__kernel_rem_pio2f+0x3f0>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
 2004994:	e0bf9d17 	ldw	r2,-396(fp)
 2004998:	10bfffc4 	addi	r2,r2,-1
 200499c:	1085883a 	add	r2,r2,r2
 20049a0:	1085883a 	add	r2,r2,r2
 20049a4:	e0ff9d04 	addi	r3,fp,-396
 20049a8:	1885883a 	add	r2,r3,r2
 20049ac:	10800f04 	addi	r2,r2,60
 20049b0:	10c00017 	ldw	r3,0(r2)
 20049b4:	01000204 	movi	r4,8
 20049b8:	e0bfa417 	ldw	r2,-368(fp)
 20049bc:	2085c83a 	sub	r2,r4,r2
 20049c0:	1885d83a 	sra	r2,r3,r2
 20049c4:	e0bfa115 	stw	r2,-380(fp)
 20049c8:	e0ffa017 	ldw	r3,-384(fp)
 20049cc:	e0bfa117 	ldw	r2,-380(fp)
 20049d0:	1885883a 	add	r2,r3,r2
 20049d4:	e0bfa015 	stw	r2,-384(fp)
	    iq[jz-1] -= i<<(8-q0);
 20049d8:	e0bf9d17 	ldw	r2,-396(fp)
 20049dc:	10bfffc4 	addi	r2,r2,-1
 20049e0:	e0ff9d17 	ldw	r3,-396(fp)
 20049e4:	18ffffc4 	addi	r3,r3,-1
 20049e8:	18c7883a 	add	r3,r3,r3
 20049ec:	18c7883a 	add	r3,r3,r3
 20049f0:	e13f9d04 	addi	r4,fp,-396
 20049f4:	20c7883a 	add	r3,r4,r3
 20049f8:	18c00f04 	addi	r3,r3,60
 20049fc:	19000017 	ldw	r4,0(r3)
 2004a00:	01400204 	movi	r5,8
 2004a04:	e0ffa417 	ldw	r3,-368(fp)
 2004a08:	28c7c83a 	sub	r3,r5,r3
 2004a0c:	e17fa117 	ldw	r5,-380(fp)
 2004a10:	28c6983a 	sll	r3,r5,r3
 2004a14:	20c7c83a 	sub	r3,r4,r3
 2004a18:	1085883a 	add	r2,r2,r2
 2004a1c:	1085883a 	add	r2,r2,r2
 2004a20:	e13f9d04 	addi	r4,fp,-396
 2004a24:	2085883a 	add	r2,r4,r2
 2004a28:	10800f04 	addi	r2,r2,60
 2004a2c:	10c00015 	stw	r3,0(r2)
	    ih = iq[jz-1]>>(7-q0);
 2004a30:	e0bf9d17 	ldw	r2,-396(fp)
 2004a34:	10bfffc4 	addi	r2,r2,-1
 2004a38:	1085883a 	add	r2,r2,r2
 2004a3c:	1085883a 	add	r2,r2,r2
 2004a40:	e0ff9d04 	addi	r3,fp,-396
 2004a44:	1885883a 	add	r2,r3,r2
 2004a48:	10800f04 	addi	r2,r2,60
 2004a4c:	10c00017 	ldw	r3,0(r2)
 2004a50:	010001c4 	movi	r4,7
 2004a54:	e0bfa417 	ldw	r2,-368(fp)
 2004a58:	2085c83a 	sub	r2,r4,r2
 2004a5c:	1885d83a 	sra	r2,r3,r2
 2004a60:	e0bfa515 	stw	r2,-364(fp)
 2004a64:	00001306 	br	2004ab4 <__kernel_rem_pio2f+0x43c>
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
 2004a68:	e0bfa417 	ldw	r2,-368(fp)
 2004a6c:	10000b1e 	bne	r2,zero,2004a9c <__kernel_rem_pio2f+0x424>
 2004a70:	e0bf9d17 	ldw	r2,-396(fp)
 2004a74:	10bfffc4 	addi	r2,r2,-1
 2004a78:	1085883a 	add	r2,r2,r2
 2004a7c:	1085883a 	add	r2,r2,r2
 2004a80:	e13f9d04 	addi	r4,fp,-396
 2004a84:	2085883a 	add	r2,r4,r2
 2004a88:	10800f04 	addi	r2,r2,60
 2004a8c:	10800017 	ldw	r2,0(r2)
 2004a90:	1005d23a 	srai	r2,r2,8
 2004a94:	e0bfa515 	stw	r2,-364(fp)
 2004a98:	00000606 	br	2004ab4 <__kernel_rem_pio2f+0x43c>
	else if(z>=(float)0.5) ih=2;
 2004a9c:	e0ffa617 	ldw	r3,-360(fp)
 2004aa0:	008fc034 	movhi	r2,16128
 2004aa4:	1885f932 	custom	228,r2,r3,r2
 2004aa8:	10000226 	beq	r2,zero,2004ab4 <__kernel_rem_pio2f+0x43c>
 2004aac:	00800084 	movi	r2,2
 2004ab0:	e0bfa515 	stw	r2,-364(fp)

	if(ih>0) {	/* q > 0.5 */
 2004ab4:	e0bfa517 	ldw	r2,-364(fp)
 2004ab8:	00806c0e 	bge	zero,r2,2004c6c <__kernel_rem_pio2f+0x5f4>
	    n += 1; carry = 0;
 2004abc:	e0bfa017 	ldw	r2,-384(fp)
 2004ac0:	10800044 	addi	r2,r2,1
 2004ac4:	e0bfa015 	stw	r2,-384(fp)
 2004ac8:	e03f9f15 	stw	zero,-388(fp)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 2004acc:	e03fa115 	stw	zero,-380(fp)
 2004ad0:	00002606 	br	2004b6c <__kernel_rem_pio2f+0x4f4>
		j = iq[i];
 2004ad4:	e0bfa117 	ldw	r2,-380(fp)
 2004ad8:	1085883a 	add	r2,r2,r2
 2004adc:	1085883a 	add	r2,r2,r2
 2004ae0:	e0ff9d04 	addi	r3,fp,-396
 2004ae4:	1885883a 	add	r2,r3,r2
 2004ae8:	10800f04 	addi	r2,r2,60
 2004aec:	10800017 	ldw	r2,0(r2)
 2004af0:	e0bfa215 	stw	r2,-376(fp)
		if(carry==0) {
 2004af4:	e0bf9f17 	ldw	r2,-388(fp)
 2004af8:	10000f1e 	bne	r2,zero,2004b38 <__kernel_rem_pio2f+0x4c0>
		    if(j!=0) {
 2004afc:	e0bfa217 	ldw	r2,-376(fp)
 2004b00:	10001726 	beq	r2,zero,2004b60 <__kernel_rem_pio2f+0x4e8>
			carry = 1; iq[i] = 0x100- j;
 2004b04:	00800044 	movi	r2,1
 2004b08:	e0bf9f15 	stw	r2,-388(fp)
 2004b0c:	00c04004 	movi	r3,256
 2004b10:	e0bfa217 	ldw	r2,-376(fp)
 2004b14:	1887c83a 	sub	r3,r3,r2
 2004b18:	e0bfa117 	ldw	r2,-380(fp)
 2004b1c:	1085883a 	add	r2,r2,r2
 2004b20:	1085883a 	add	r2,r2,r2
 2004b24:	e13f9d04 	addi	r4,fp,-396
 2004b28:	2085883a 	add	r2,r4,r2
 2004b2c:	10800f04 	addi	r2,r2,60
 2004b30:	10c00015 	stw	r3,0(r2)
 2004b34:	00000a06 	br	2004b60 <__kernel_rem_pio2f+0x4e8>
		    }
		} else  iq[i] = 0xff - j;
 2004b38:	00c03fc4 	movi	r3,255
 2004b3c:	e0bfa217 	ldw	r2,-376(fp)
 2004b40:	1887c83a 	sub	r3,r3,r2
 2004b44:	e0bfa117 	ldw	r2,-380(fp)
 2004b48:	1085883a 	add	r2,r2,r2
 2004b4c:	1085883a 	add	r2,r2,r2
 2004b50:	e13f9d04 	addi	r4,fp,-396
 2004b54:	2085883a 	add	r2,r4,r2
 2004b58:	10800f04 	addi	r2,r2,60
 2004b5c:	10c00015 	stw	r3,0(r2)
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 2004b60:	e0bfa117 	ldw	r2,-380(fp)
 2004b64:	10800044 	addi	r2,r2,1
 2004b68:	e0bfa115 	stw	r2,-380(fp)
 2004b6c:	e0ffa117 	ldw	r3,-380(fp)
 2004b70:	e0bf9d17 	ldw	r2,-396(fp)
 2004b74:	18bfd716 	blt	r3,r2,2004ad4 <__kernel_rem_pio2f+0x45c>
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
		    }
		} else  iq[i] = 0xff - j;
	    }
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
 2004b78:	e0bfa417 	ldw	r2,-368(fp)
 2004b7c:	00802a0e 	bge	zero,r2,2004c28 <__kernel_rem_pio2f+0x5b0>
	        switch(q0) {
 2004b80:	e0bfa417 	ldw	r2,-368(fp)
 2004b84:	10c00060 	cmpeqi	r3,r2,1
 2004b88:	1800031e 	bne	r3,zero,2004b98 <__kernel_rem_pio2f+0x520>
 2004b8c:	108000a0 	cmpeqi	r2,r2,2
 2004b90:	1000131e 	bne	r2,zero,2004be0 <__kernel_rem_pio2f+0x568>
 2004b94:	00002406 	br	2004c28 <__kernel_rem_pio2f+0x5b0>
	        case 1:
	    	   iq[jz-1] &= 0x7f; break;
 2004b98:	e0bf9d17 	ldw	r2,-396(fp)
 2004b9c:	10bfffc4 	addi	r2,r2,-1
 2004ba0:	e0ff9d17 	ldw	r3,-396(fp)
 2004ba4:	18ffffc4 	addi	r3,r3,-1
 2004ba8:	18c7883a 	add	r3,r3,r3
 2004bac:	18c7883a 	add	r3,r3,r3
 2004bb0:	e13f9d04 	addi	r4,fp,-396
 2004bb4:	20c7883a 	add	r3,r4,r3
 2004bb8:	18c00f04 	addi	r3,r3,60
 2004bbc:	18c00017 	ldw	r3,0(r3)
 2004bc0:	18c01fcc 	andi	r3,r3,127
 2004bc4:	1085883a 	add	r2,r2,r2
 2004bc8:	1085883a 	add	r2,r2,r2
 2004bcc:	e13f9d04 	addi	r4,fp,-396
 2004bd0:	2085883a 	add	r2,r4,r2
 2004bd4:	10800f04 	addi	r2,r2,60
 2004bd8:	10c00015 	stw	r3,0(r2)
 2004bdc:	00001206 	br	2004c28 <__kernel_rem_pio2f+0x5b0>
	    	case 2:
	    	   iq[jz-1] &= 0x3f; break;
 2004be0:	e0bf9d17 	ldw	r2,-396(fp)
 2004be4:	10bfffc4 	addi	r2,r2,-1
 2004be8:	e0ff9d17 	ldw	r3,-396(fp)
 2004bec:	18ffffc4 	addi	r3,r3,-1
 2004bf0:	18c7883a 	add	r3,r3,r3
 2004bf4:	18c7883a 	add	r3,r3,r3
 2004bf8:	e13f9d04 	addi	r4,fp,-396
 2004bfc:	20c7883a 	add	r3,r4,r3
 2004c00:	18c00f04 	addi	r3,r3,60
 2004c04:	18c00017 	ldw	r3,0(r3)
 2004c08:	18c00fcc 	andi	r3,r3,63
 2004c0c:	1085883a 	add	r2,r2,r2
 2004c10:	1085883a 	add	r2,r2,r2
 2004c14:	e13f9d04 	addi	r4,fp,-396
 2004c18:	2085883a 	add	r2,r4,r2
 2004c1c:	10800f04 	addi	r2,r2,60
 2004c20:	10c00015 	stw	r3,0(r2)
 2004c24:	0001883a 	nop
	        }
	    }
	    if(ih==2) {
 2004c28:	e0bfa517 	ldw	r2,-364(fp)
 2004c2c:	10800098 	cmpnei	r2,r2,2
 2004c30:	10000e1e 	bne	r2,zero,2004c6c <__kernel_rem_pio2f+0x5f4>
		z = one - z;
 2004c34:	00cfe034 	movhi	r3,16256
 2004c38:	e0bfa617 	ldw	r2,-360(fp)
 2004c3c:	1885ffb2 	custom	254,r2,r3,r2
 2004c40:	e0bfa615 	stw	r2,-360(fp)
		if(carry!=0) z -= scalbnf(one,(int)q0);
 2004c44:	e0bf9f17 	ldw	r2,-388(fp)
 2004c48:	10000826 	beq	r2,zero,2004c6c <__kernel_rem_pio2f+0x5f4>
 2004c4c:	008fe034 	movhi	r2,16256
 2004c50:	e17fa417 	ldw	r5,-368(fp)
 2004c54:	1009883a 	mov	r4,r2
 2004c58:	2005cf40 	call	2005cf4 <scalbnf>
 2004c5c:	1007883a 	mov	r3,r2
 2004c60:	e0bfa617 	ldw	r2,-360(fp)
 2004c64:	10c5ffb2 	custom	254,r2,r2,r3
 2004c68:	e0bfa615 	stw	r2,-360(fp)
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
 2004c6c:	0007883a 	mov	r3,zero
 2004c70:	e0bfa617 	ldw	r2,-360(fp)
 2004c74:	10c5f8b2 	custom	226,r2,r2,r3
 2004c78:	1000721e 	bne	r2,zero,2004e44 <__kernel_rem_pio2f+0x7cc>
	    j = 0;
 2004c7c:	e03fa215 	stw	zero,-376(fp)
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
 2004c80:	e0bf9d17 	ldw	r2,-396(fp)
 2004c84:	10bfffc4 	addi	r2,r2,-1
 2004c88:	e0bfa115 	stw	r2,-380(fp)
 2004c8c:	00000d06 	br	2004cc4 <__kernel_rem_pio2f+0x64c>
 2004c90:	e0bfa117 	ldw	r2,-380(fp)
 2004c94:	1085883a 	add	r2,r2,r2
 2004c98:	1085883a 	add	r2,r2,r2
 2004c9c:	e0ff9d04 	addi	r3,fp,-396
 2004ca0:	1885883a 	add	r2,r3,r2
 2004ca4:	10800f04 	addi	r2,r2,60
 2004ca8:	10800017 	ldw	r2,0(r2)
 2004cac:	e0ffa217 	ldw	r3,-376(fp)
 2004cb0:	1884b03a 	or	r2,r3,r2
 2004cb4:	e0bfa215 	stw	r2,-376(fp)
 2004cb8:	e0bfa117 	ldw	r2,-380(fp)
 2004cbc:	10bfffc4 	addi	r2,r2,-1
 2004cc0:	e0bfa115 	stw	r2,-380(fp)
 2004cc4:	e0ffa117 	ldw	r3,-380(fp)
 2004cc8:	e0bfa817 	ldw	r2,-352(fp)
 2004ccc:	18bff00e 	bge	r3,r2,2004c90 <__kernel_rem_pio2f+0x618>
	    if(j==0) { /* need recomputation */
 2004cd0:	e0bfa217 	ldw	r2,-376(fp)
 2004cd4:	10005b1e 	bne	r2,zero,2004e44 <__kernel_rem_pio2f+0x7cc>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
 2004cd8:	00800044 	movi	r2,1
 2004cdc:	e0bfa315 	stw	r2,-372(fp)
 2004ce0:	00000306 	br	2004cf0 <__kernel_rem_pio2f+0x678>
 2004ce4:	e0bfa317 	ldw	r2,-372(fp)
 2004ce8:	10800044 	addi	r2,r2,1
 2004cec:	e0bfa315 	stw	r2,-372(fp)
 2004cf0:	e0ffa817 	ldw	r3,-352(fp)
 2004cf4:	e0bfa317 	ldw	r2,-372(fp)
 2004cf8:	1885c83a 	sub	r2,r3,r2
 2004cfc:	1085883a 	add	r2,r2,r2
 2004d00:	1085883a 	add	r2,r2,r2
 2004d04:	e13f9d04 	addi	r4,fp,-396
 2004d08:	2085883a 	add	r2,r4,r2
 2004d0c:	10800f04 	addi	r2,r2,60
 2004d10:	10800017 	ldw	r2,0(r2)
 2004d14:	103ff326 	beq	r2,zero,2004ce4 <__kernel_rem_pio2f+0x66c>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 2004d18:	e0bf9d17 	ldw	r2,-396(fp)
 2004d1c:	10800044 	addi	r2,r2,1
 2004d20:	e0bfa115 	stw	r2,-380(fp)
 2004d24:	00003d06 	br	2004e1c <__kernel_rem_pio2f+0x7a4>
		    f[jx+i] = (float) ipio2[jv+i];
 2004d28:	e0ffaa17 	ldw	r3,-344(fp)
 2004d2c:	e0bfa117 	ldw	r2,-380(fp)
 2004d30:	1885883a 	add	r2,r3,r2
 2004d34:	e13f9e17 	ldw	r4,-392(fp)
 2004d38:	e0ffa117 	ldw	r3,-380(fp)
 2004d3c:	20c7883a 	add	r3,r4,r3
 2004d40:	18c7883a 	add	r3,r3,r3
 2004d44:	18c7883a 	add	r3,r3,r3
 2004d48:	1809883a 	mov	r4,r3
 2004d4c:	e0c00317 	ldw	r3,12(fp)
 2004d50:	1907883a 	add	r3,r3,r4
 2004d54:	18c00017 	ldw	r3,0(r3)
 2004d58:	1807feb2 	custom	250,r3,r3,zero
 2004d5c:	1085883a 	add	r2,r2,r2
 2004d60:	1085883a 	add	r2,r2,r2
 2004d64:	e13f9d04 	addi	r4,fp,-396
 2004d68:	2085883a 	add	r2,r4,r2
 2004d6c:	10802304 	addi	r2,r2,140
 2004d70:	10c00015 	stw	r3,0(r2)
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
 2004d74:	e03fa215 	stw	zero,-376(fp)
 2004d78:	e03fa715 	stw	zero,-356(fp)
 2004d7c:	00001906 	br	2004de4 <__kernel_rem_pio2f+0x76c>
 2004d80:	e0bfa217 	ldw	r2,-376(fp)
 2004d84:	1085883a 	add	r2,r2,r2
 2004d88:	1085883a 	add	r2,r2,r2
 2004d8c:	1007883a 	mov	r3,r2
 2004d90:	e0bffc17 	ldw	r2,-16(fp)
 2004d94:	10c5883a 	add	r2,r2,r3
 2004d98:	10c00017 	ldw	r3,0(r2)
 2004d9c:	e13faa17 	ldw	r4,-344(fp)
 2004da0:	e0bfa117 	ldw	r2,-380(fp)
 2004da4:	2089883a 	add	r4,r4,r2
 2004da8:	e0bfa217 	ldw	r2,-376(fp)
 2004dac:	2085c83a 	sub	r2,r4,r2
 2004db0:	1085883a 	add	r2,r2,r2
 2004db4:	1085883a 	add	r2,r2,r2
 2004db8:	e13f9d04 	addi	r4,fp,-396
 2004dbc:	2085883a 	add	r2,r4,r2
 2004dc0:	11002304 	addi	r4,r2,140
 2004dc4:	20800017 	ldw	r2,0(r4)
 2004dc8:	1885ff32 	custom	252,r2,r3,r2
 2004dcc:	e0ffa717 	ldw	r3,-356(fp)
 2004dd0:	1885ff72 	custom	253,r2,r3,r2
 2004dd4:	e0bfa715 	stw	r2,-356(fp)
 2004dd8:	e0bfa217 	ldw	r2,-376(fp)
 2004ddc:	10800044 	addi	r2,r2,1
 2004de0:	e0bfa215 	stw	r2,-376(fp)
 2004de4:	e0bfa217 	ldw	r2,-376(fp)
 2004de8:	e0ffaa17 	ldw	r3,-344(fp)
 2004dec:	18bfe40e 	bge	r3,r2,2004d80 <__kernel_rem_pio2f+0x708>
		    q[i] = fw;
 2004df0:	e0bfa117 	ldw	r2,-380(fp)
 2004df4:	1085883a 	add	r2,r2,r2
 2004df8:	1085883a 	add	r2,r2,r2
 2004dfc:	e0ff9d04 	addi	r3,fp,-396
 2004e00:	1885883a 	add	r2,r3,r2
 2004e04:	10804b04 	addi	r2,r2,300
 2004e08:	e0ffa717 	ldw	r3,-356(fp)
 2004e0c:	10c00015 	stw	r3,0(r2)
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 2004e10:	e0bfa117 	ldw	r2,-380(fp)
 2004e14:	10800044 	addi	r2,r2,1
 2004e18:	e0bfa115 	stw	r2,-380(fp)
 2004e1c:	e0ff9d17 	ldw	r3,-396(fp)
 2004e20:	e0bfa317 	ldw	r2,-372(fp)
 2004e24:	1887883a 	add	r3,r3,r2
 2004e28:	e0bfa117 	ldw	r2,-380(fp)
 2004e2c:	18bfbe0e 	bge	r3,r2,2004d28 <__kernel_rem_pio2f+0x6b0>
		    f[jx+i] = (float) ipio2[jv+i];
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
		    q[i] = fw;
		}
		jz += k;
 2004e30:	e0ff9d17 	ldw	r3,-396(fp)
 2004e34:	e0bfa317 	ldw	r2,-372(fp)
 2004e38:	1885883a 	add	r2,r3,r2
 2004e3c:	e0bf9d15 	stw	r2,-396(fp)
		goto recompute;
 2004e40:	003e8806 	br	2004864 <__kernel_rem_pio2f+0x1ec>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
 2004e44:	e0bfa617 	ldw	r2,-360(fp)
 2004e48:	0007883a 	mov	r3,zero
 2004e4c:	10c5f8b2 	custom	226,r2,r2,r3
 2004e50:	1000161e 	bne	r2,zero,2004eac <__kernel_rem_pio2f+0x834>
	    jz -= 1; q0 -= 8;
 2004e54:	e0bf9d17 	ldw	r2,-396(fp)
 2004e58:	10bfffc4 	addi	r2,r2,-1
 2004e5c:	e0bf9d15 	stw	r2,-396(fp)
 2004e60:	e0bfa417 	ldw	r2,-368(fp)
 2004e64:	10bffe04 	addi	r2,r2,-8
 2004e68:	e0bfa415 	stw	r2,-368(fp)
	    while(iq[jz]==0) { jz--; q0-=8;}
 2004e6c:	00000606 	br	2004e88 <__kernel_rem_pio2f+0x810>
 2004e70:	e0bf9d17 	ldw	r2,-396(fp)
 2004e74:	10bfffc4 	addi	r2,r2,-1
 2004e78:	e0bf9d15 	stw	r2,-396(fp)
 2004e7c:	e0bfa417 	ldw	r2,-368(fp)
 2004e80:	10bffe04 	addi	r2,r2,-8
 2004e84:	e0bfa415 	stw	r2,-368(fp)
 2004e88:	e0bf9d17 	ldw	r2,-396(fp)
 2004e8c:	1085883a 	add	r2,r2,r2
 2004e90:	1085883a 	add	r2,r2,r2
 2004e94:	e13f9d04 	addi	r4,fp,-396
 2004e98:	2085883a 	add	r2,r4,r2
 2004e9c:	10800f04 	addi	r2,r2,60
 2004ea0:	10800017 	ldw	r2,0(r2)
 2004ea4:	103ff226 	beq	r2,zero,2004e70 <__kernel_rem_pio2f+0x7f8>
 2004ea8:	00003606 	br	2004f84 <__kernel_rem_pio2f+0x90c>
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
 2004eac:	e0bfa417 	ldw	r2,-368(fp)
 2004eb0:	0085c83a 	sub	r2,zero,r2
 2004eb4:	100b883a 	mov	r5,r2
 2004eb8:	e13fa617 	ldw	r4,-360(fp)
 2004ebc:	2005cf40 	call	2005cf4 <scalbnf>
 2004ec0:	e0bfa615 	stw	r2,-360(fp)
	    if(z>=two8) { 
 2004ec4:	0090e034 	movhi	r2,17280
 2004ec8:	e0ffa617 	ldw	r3,-360(fp)
 2004ecc:	1885f932 	custom	228,r2,r3,r2
 2004ed0:	10002326 	beq	r2,zero,2004f60 <__kernel_rem_pio2f+0x8e8>
		fw = (float)((__int32_t)(twon8*z));
 2004ed4:	00cee034 	movhi	r3,15232
 2004ed8:	e0bfa617 	ldw	r2,-360(fp)
 2004edc:	1885ff32 	custom	252,r2,r3,r2
 2004ee0:	1005fe72 	custom	249,r2,r2,zero
 2004ee4:	1005feb2 	custom	250,r2,r2,zero
 2004ee8:	e0bfa715 	stw	r2,-356(fp)
		iq[jz] = (__int32_t)(z-two8*fw);
 2004eec:	00d0e034 	movhi	r3,17280
 2004ef0:	e0bfa717 	ldw	r2,-356(fp)
 2004ef4:	1885ff32 	custom	252,r2,r3,r2
 2004ef8:	e0ffa617 	ldw	r3,-360(fp)
 2004efc:	1885ffb2 	custom	254,r2,r3,r2
 2004f00:	1007fe72 	custom	249,r3,r2,zero
 2004f04:	e0bf9d17 	ldw	r2,-396(fp)
 2004f08:	1085883a 	add	r2,r2,r2
 2004f0c:	1085883a 	add	r2,r2,r2
 2004f10:	e13f9d04 	addi	r4,fp,-396
 2004f14:	2085883a 	add	r2,r4,r2
 2004f18:	10800f04 	addi	r2,r2,60
 2004f1c:	10c00015 	stw	r3,0(r2)
		jz += 1; q0 += 8;
 2004f20:	e0bf9d17 	ldw	r2,-396(fp)
 2004f24:	10800044 	addi	r2,r2,1
 2004f28:	e0bf9d15 	stw	r2,-396(fp)
 2004f2c:	e0bfa417 	ldw	r2,-368(fp)
 2004f30:	10800204 	addi	r2,r2,8
 2004f34:	e0bfa415 	stw	r2,-368(fp)
		iq[jz] = (__int32_t) fw;
 2004f38:	e0bfa717 	ldw	r2,-356(fp)
 2004f3c:	1007fe72 	custom	249,r3,r2,zero
 2004f40:	e0bf9d17 	ldw	r2,-396(fp)
 2004f44:	1085883a 	add	r2,r2,r2
 2004f48:	1085883a 	add	r2,r2,r2
 2004f4c:	e13f9d04 	addi	r4,fp,-396
 2004f50:	2085883a 	add	r2,r4,r2
 2004f54:	10800f04 	addi	r2,r2,60
 2004f58:	10c00015 	stw	r3,0(r2)
 2004f5c:	00000906 	br	2004f84 <__kernel_rem_pio2f+0x90c>
	    } else iq[jz] = (__int32_t) z ;
 2004f60:	e0bfa617 	ldw	r2,-360(fp)
 2004f64:	1007fe72 	custom	249,r3,r2,zero
 2004f68:	e0bf9d17 	ldw	r2,-396(fp)
 2004f6c:	1085883a 	add	r2,r2,r2
 2004f70:	1085883a 	add	r2,r2,r2
 2004f74:	e13f9d04 	addi	r4,fp,-396
 2004f78:	2085883a 	add	r2,r4,r2
 2004f7c:	10800f04 	addi	r2,r2,60
 2004f80:	10c00015 	stw	r3,0(r2)
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
 2004f84:	008fe034 	movhi	r2,16256
 2004f88:	e17fa417 	ldw	r5,-368(fp)
 2004f8c:	1009883a 	mov	r4,r2
 2004f90:	2005cf40 	call	2005cf4 <scalbnf>
 2004f94:	e0bfa715 	stw	r2,-356(fp)
	for(i=jz;i>=0;i--) {
 2004f98:	e0bf9d17 	ldw	r2,-396(fp)
 2004f9c:	e0bfa115 	stw	r2,-380(fp)
 2004fa0:	00001806 	br	2005004 <__kernel_rem_pio2f+0x98c>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
 2004fa4:	e0bfa117 	ldw	r2,-380(fp)
 2004fa8:	1085883a 	add	r2,r2,r2
 2004fac:	1085883a 	add	r2,r2,r2
 2004fb0:	e0ff9d04 	addi	r3,fp,-396
 2004fb4:	1885883a 	add	r2,r3,r2
 2004fb8:	10800f04 	addi	r2,r2,60
 2004fbc:	10800017 	ldw	r2,0(r2)
 2004fc0:	1007feb2 	custom	250,r3,r2,zero
 2004fc4:	e0bfa717 	ldw	r2,-356(fp)
 2004fc8:	1887ff32 	custom	252,r3,r3,r2
 2004fcc:	e0bfa117 	ldw	r2,-380(fp)
 2004fd0:	1085883a 	add	r2,r2,r2
 2004fd4:	1085883a 	add	r2,r2,r2
 2004fd8:	e13f9d04 	addi	r4,fp,-396
 2004fdc:	2085883a 	add	r2,r4,r2
 2004fe0:	10804b04 	addi	r2,r2,300
 2004fe4:	10c00015 	stw	r3,0(r2)
 2004fe8:	008ee034 	movhi	r2,15232
 2004fec:	e0ffa717 	ldw	r3,-356(fp)
 2004ff0:	1885ff32 	custom	252,r2,r3,r2
 2004ff4:	e0bfa715 	stw	r2,-356(fp)
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
	for(i=jz;i>=0;i--) {
 2004ff8:	e0bfa117 	ldw	r2,-380(fp)
 2004ffc:	10bfffc4 	addi	r2,r2,-1
 2005000:	e0bfa115 	stw	r2,-380(fp)
 2005004:	e0bfa117 	ldw	r2,-380(fp)
 2005008:	103fe60e 	bge	r2,zero,2004fa4 <__kernel_rem_pio2f+0x92c>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 200500c:	e0bf9d17 	ldw	r2,-396(fp)
 2005010:	e0bfa115 	stw	r2,-380(fp)
 2005014:	00002f06 	br	20050d4 <__kernel_rem_pio2f+0xa5c>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
 2005018:	e03fa715 	stw	zero,-356(fp)
 200501c:	e03fa315 	stw	zero,-372(fp)
 2005020:	00001706 	br	2005080 <__kernel_rem_pio2f+0xa08>
 2005024:	008080b4 	movhi	r2,514
 2005028:	10867f04 	addi	r2,r2,6652
 200502c:	e0ffa317 	ldw	r3,-372(fp)
 2005030:	18c7883a 	add	r3,r3,r3
 2005034:	18c7883a 	add	r3,r3,r3
 2005038:	10c5883a 	add	r2,r2,r3
 200503c:	10c00017 	ldw	r3,0(r2)
 2005040:	e13fa117 	ldw	r4,-380(fp)
 2005044:	e0bfa317 	ldw	r2,-372(fp)
 2005048:	2085883a 	add	r2,r4,r2
 200504c:	1085883a 	add	r2,r2,r2
 2005050:	1085883a 	add	r2,r2,r2
 2005054:	e13f9d04 	addi	r4,fp,-396
 2005058:	2085883a 	add	r2,r4,r2
 200505c:	11004b04 	addi	r4,r2,300
 2005060:	20800017 	ldw	r2,0(r4)
 2005064:	1885ff32 	custom	252,r2,r3,r2
 2005068:	e0ffa717 	ldw	r3,-356(fp)
 200506c:	1885ff72 	custom	253,r2,r3,r2
 2005070:	e0bfa715 	stw	r2,-356(fp)
 2005074:	e0bfa317 	ldw	r2,-372(fp)
 2005078:	10800044 	addi	r2,r2,1
 200507c:	e0bfa315 	stw	r2,-372(fp)
 2005080:	e0bfa317 	ldw	r2,-372(fp)
 2005084:	e0ffa917 	ldw	r3,-348(fp)
 2005088:	18800516 	blt	r3,r2,20050a0 <__kernel_rem_pio2f+0xa28>
 200508c:	e0ff9d17 	ldw	r3,-396(fp)
 2005090:	e0bfa117 	ldw	r2,-380(fp)
 2005094:	1887c83a 	sub	r3,r3,r2
 2005098:	e0bfa317 	ldw	r2,-372(fp)
 200509c:	18bfe10e 	bge	r3,r2,2005024 <__kernel_rem_pio2f+0x9ac>
	    fq[jz-i] = fw;
 20050a0:	e0ff9d17 	ldw	r3,-396(fp)
 20050a4:	e0bfa117 	ldw	r2,-380(fp)
 20050a8:	1885c83a 	sub	r2,r3,r2
 20050ac:	1085883a 	add	r2,r2,r2
 20050b0:	1085883a 	add	r2,r2,r2
 20050b4:	e0ff9d04 	addi	r3,fp,-396
 20050b8:	1885883a 	add	r2,r3,r2
 20050bc:	10803704 	addi	r2,r2,220
 20050c0:	e0ffa717 	ldw	r3,-356(fp)
 20050c4:	10c00015 	stw	r3,0(r2)
	for(i=jz;i>=0;i--) {
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 20050c8:	e0bfa117 	ldw	r2,-380(fp)
 20050cc:	10bfffc4 	addi	r2,r2,-1
 20050d0:	e0bfa115 	stw	r2,-380(fp)
 20050d4:	e0bfa117 	ldw	r2,-380(fp)
 20050d8:	103fcf0e 	bge	r2,zero,2005018 <__kernel_rem_pio2f+0x9a0>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
	    fq[jz-i] = fw;
	}

    /* compress fq[] into y[] */
	switch(prec) {
 20050dc:	e0800217 	ldw	r2,8(fp)
 20050e0:	10c000c8 	cmpgei	r3,r2,3
 20050e4:	1800031e 	bne	r3,zero,20050f4 <__kernel_rem_pio2f+0xa7c>
 20050e8:	00802116 	blt	zero,r2,2005170 <__kernel_rem_pio2f+0xaf8>
 20050ec:	10000426 	beq	r2,zero,2005100 <__kernel_rem_pio2f+0xa88>
 20050f0:	00010206 	br	20054fc <__kernel_rem_pio2f+0xe84>
 20050f4:	108000e0 	cmpeqi	r2,r2,3
 20050f8:	1000591e 	bne	r2,zero,2005260 <__kernel_rem_pio2f+0xbe8>
 20050fc:	0000ff06 	br	20054fc <__kernel_rem_pio2f+0xe84>
	    case 0:
		fw = 0.0;
 2005100:	e03fa715 	stw	zero,-356(fp)
		for (i=jz;i>=0;i--) fw += fq[i];
 2005104:	e0bf9d17 	ldw	r2,-396(fp)
 2005108:	e0bfa115 	stw	r2,-380(fp)
 200510c:	00000d06 	br	2005144 <__kernel_rem_pio2f+0xacc>
 2005110:	e0bfa117 	ldw	r2,-380(fp)
 2005114:	1085883a 	add	r2,r2,r2
 2005118:	1085883a 	add	r2,r2,r2
 200511c:	e13f9d04 	addi	r4,fp,-396
 2005120:	2085883a 	add	r2,r4,r2
 2005124:	10c03704 	addi	r3,r2,220
 2005128:	18800017 	ldw	r2,0(r3)
 200512c:	e0ffa717 	ldw	r3,-356(fp)
 2005130:	1885ff72 	custom	253,r2,r3,r2
 2005134:	e0bfa715 	stw	r2,-356(fp)
 2005138:	e0bfa117 	ldw	r2,-380(fp)
 200513c:	10bfffc4 	addi	r2,r2,-1
 2005140:	e0bfa115 	stw	r2,-380(fp)
 2005144:	e0bfa117 	ldw	r2,-380(fp)
 2005148:	103ff10e 	bge	r2,zero,2005110 <__kernel_rem_pio2f+0xa98>
		y[0] = (ih==0)? fw: -fw; 
 200514c:	e0bfa517 	ldw	r2,-364(fp)
 2005150:	10000326 	beq	r2,zero,2005160 <__kernel_rem_pio2f+0xae8>
 2005154:	e0bfa717 	ldw	r2,-356(fp)
 2005158:	1005f872 	custom	225,r2,r2,zero
 200515c:	00000106 	br	2005164 <__kernel_rem_pio2f+0xaec>
 2005160:	e0bfa717 	ldw	r2,-356(fp)
 2005164:	e0fffd17 	ldw	r3,-12(fp)
 2005168:	18800015 	stw	r2,0(r3)
		break;
 200516c:	0000e306 	br	20054fc <__kernel_rem_pio2f+0xe84>
	    case 1:
	    case 2:
		fw = 0.0;
 2005170:	e03fa715 	stw	zero,-356(fp)
		for (i=jz;i>=0;i--) fw += fq[i]; 
 2005174:	e0bf9d17 	ldw	r2,-396(fp)
 2005178:	e0bfa115 	stw	r2,-380(fp)
 200517c:	00000d06 	br	20051b4 <__kernel_rem_pio2f+0xb3c>
 2005180:	e0bfa117 	ldw	r2,-380(fp)
 2005184:	1085883a 	add	r2,r2,r2
 2005188:	1085883a 	add	r2,r2,r2
 200518c:	e0ff9d04 	addi	r3,fp,-396
 2005190:	1885883a 	add	r2,r3,r2
 2005194:	10c03704 	addi	r3,r2,220
 2005198:	18800017 	ldw	r2,0(r3)
 200519c:	e0ffa717 	ldw	r3,-356(fp)
 20051a0:	1885ff72 	custom	253,r2,r3,r2
 20051a4:	e0bfa715 	stw	r2,-356(fp)
 20051a8:	e0bfa117 	ldw	r2,-380(fp)
 20051ac:	10bfffc4 	addi	r2,r2,-1
 20051b0:	e0bfa115 	stw	r2,-380(fp)
 20051b4:	e0bfa117 	ldw	r2,-380(fp)
 20051b8:	103ff10e 	bge	r2,zero,2005180 <__kernel_rem_pio2f+0xb08>
		y[0] = (ih==0)? fw: -fw; 
 20051bc:	e0bfa517 	ldw	r2,-364(fp)
 20051c0:	10000326 	beq	r2,zero,20051d0 <__kernel_rem_pio2f+0xb58>
 20051c4:	e0bfa717 	ldw	r2,-356(fp)
 20051c8:	1005f872 	custom	225,r2,r2,zero
 20051cc:	00000106 	br	20051d4 <__kernel_rem_pio2f+0xb5c>
 20051d0:	e0bfa717 	ldw	r2,-356(fp)
 20051d4:	e0fffd17 	ldw	r3,-12(fp)
 20051d8:	18800015 	stw	r2,0(r3)
		fw = fq[0]-fw;
 20051dc:	e0ffd417 	ldw	r3,-176(fp)
 20051e0:	e0bfa717 	ldw	r2,-356(fp)
 20051e4:	1885ffb2 	custom	254,r2,r3,r2
 20051e8:	e0bfa715 	stw	r2,-356(fp)
		for (i=1;i<=jz;i++) fw += fq[i];
 20051ec:	00800044 	movi	r2,1
 20051f0:	e0bfa115 	stw	r2,-380(fp)
 20051f4:	00000d06 	br	200522c <__kernel_rem_pio2f+0xbb4>
 20051f8:	e0bfa117 	ldw	r2,-380(fp)
 20051fc:	1085883a 	add	r2,r2,r2
 2005200:	1085883a 	add	r2,r2,r2
 2005204:	e13f9d04 	addi	r4,fp,-396
 2005208:	2085883a 	add	r2,r4,r2
 200520c:	10c03704 	addi	r3,r2,220
 2005210:	18800017 	ldw	r2,0(r3)
 2005214:	e0ffa717 	ldw	r3,-356(fp)
 2005218:	1885ff72 	custom	253,r2,r3,r2
 200521c:	e0bfa715 	stw	r2,-356(fp)
 2005220:	e0bfa117 	ldw	r2,-380(fp)
 2005224:	10800044 	addi	r2,r2,1
 2005228:	e0bfa115 	stw	r2,-380(fp)
 200522c:	e0bfa117 	ldw	r2,-380(fp)
 2005230:	e0ff9d17 	ldw	r3,-396(fp)
 2005234:	18bff00e 	bge	r3,r2,20051f8 <__kernel_rem_pio2f+0xb80>
		y[1] = (ih==0)? fw: -fw; 
 2005238:	e0bffd17 	ldw	r2,-12(fp)
 200523c:	10c00104 	addi	r3,r2,4
 2005240:	e0bfa517 	ldw	r2,-364(fp)
 2005244:	10000326 	beq	r2,zero,2005254 <__kernel_rem_pio2f+0xbdc>
 2005248:	e0bfa717 	ldw	r2,-356(fp)
 200524c:	1005f872 	custom	225,r2,r2,zero
 2005250:	00000106 	br	2005258 <__kernel_rem_pio2f+0xbe0>
 2005254:	e0bfa717 	ldw	r2,-356(fp)
 2005258:	18800015 	stw	r2,0(r3)
		break;
 200525c:	0000a706 	br	20054fc <__kernel_rem_pio2f+0xe84>
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 2005260:	e0bf9d17 	ldw	r2,-396(fp)
 2005264:	e0bfa115 	stw	r2,-380(fp)
 2005268:	00003606 	br	2005344 <__kernel_rem_pio2f+0xccc>
		    fw      = fq[i-1]+fq[i]; 
 200526c:	e0bfa117 	ldw	r2,-380(fp)
 2005270:	10bfffc4 	addi	r2,r2,-1
 2005274:	1085883a 	add	r2,r2,r2
 2005278:	1085883a 	add	r2,r2,r2
 200527c:	e0ff9d04 	addi	r3,fp,-396
 2005280:	1885883a 	add	r2,r3,r2
 2005284:	10803704 	addi	r2,r2,220
 2005288:	10c00017 	ldw	r3,0(r2)
 200528c:	e0bfa117 	ldw	r2,-380(fp)
 2005290:	1085883a 	add	r2,r2,r2
 2005294:	1085883a 	add	r2,r2,r2
 2005298:	e13f9d04 	addi	r4,fp,-396
 200529c:	2085883a 	add	r2,r4,r2
 20052a0:	11003704 	addi	r4,r2,220
 20052a4:	20800017 	ldw	r2,0(r4)
 20052a8:	1885ff72 	custom	253,r2,r3,r2
 20052ac:	e0bfa715 	stw	r2,-356(fp)
		    fq[i]  += fq[i-1]-fw;
 20052b0:	e0bfa117 	ldw	r2,-380(fp)
 20052b4:	1085883a 	add	r2,r2,r2
 20052b8:	1085883a 	add	r2,r2,r2
 20052bc:	e0ff9d04 	addi	r3,fp,-396
 20052c0:	1885883a 	add	r2,r3,r2
 20052c4:	10803704 	addi	r2,r2,220
 20052c8:	10c00017 	ldw	r3,0(r2)
 20052cc:	e0bfa117 	ldw	r2,-380(fp)
 20052d0:	10bfffc4 	addi	r2,r2,-1
 20052d4:	1085883a 	add	r2,r2,r2
 20052d8:	1085883a 	add	r2,r2,r2
 20052dc:	e13f9d04 	addi	r4,fp,-396
 20052e0:	2085883a 	add	r2,r4,r2
 20052e4:	10803704 	addi	r2,r2,220
 20052e8:	11000017 	ldw	r4,0(r2)
 20052ec:	e0bfa717 	ldw	r2,-356(fp)
 20052f0:	2085ffb2 	custom	254,r2,r4,r2
 20052f4:	1887ff72 	custom	253,r3,r3,r2
 20052f8:	e0bfa117 	ldw	r2,-380(fp)
 20052fc:	1085883a 	add	r2,r2,r2
 2005300:	1085883a 	add	r2,r2,r2
 2005304:	e13f9d04 	addi	r4,fp,-396
 2005308:	2085883a 	add	r2,r4,r2
 200530c:	10803704 	addi	r2,r2,220
 2005310:	10c00015 	stw	r3,0(r2)
		    fq[i-1] = fw;
 2005314:	e0bfa117 	ldw	r2,-380(fp)
 2005318:	10bfffc4 	addi	r2,r2,-1
 200531c:	1085883a 	add	r2,r2,r2
 2005320:	1085883a 	add	r2,r2,r2
 2005324:	e0ff9d04 	addi	r3,fp,-396
 2005328:	1885883a 	add	r2,r3,r2
 200532c:	10803704 	addi	r2,r2,220
 2005330:	e0ffa717 	ldw	r3,-356(fp)
 2005334:	10c00015 	stw	r3,0(r2)
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 2005338:	e0bfa117 	ldw	r2,-380(fp)
 200533c:	10bfffc4 	addi	r2,r2,-1
 2005340:	e0bfa115 	stw	r2,-380(fp)
 2005344:	e0bfa117 	ldw	r2,-380(fp)
 2005348:	00bfc816 	blt	zero,r2,200526c <__kernel_rem_pio2f+0xbf4>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 200534c:	e0bf9d17 	ldw	r2,-396(fp)
 2005350:	e0bfa115 	stw	r2,-380(fp)
 2005354:	00003606 	br	2005430 <__kernel_rem_pio2f+0xdb8>
		    fw      = fq[i-1]+fq[i]; 
 2005358:	e0bfa117 	ldw	r2,-380(fp)
 200535c:	10bfffc4 	addi	r2,r2,-1
 2005360:	1085883a 	add	r2,r2,r2
 2005364:	1085883a 	add	r2,r2,r2
 2005368:	e13f9d04 	addi	r4,fp,-396
 200536c:	2085883a 	add	r2,r4,r2
 2005370:	10803704 	addi	r2,r2,220
 2005374:	10c00017 	ldw	r3,0(r2)
 2005378:	e0bfa117 	ldw	r2,-380(fp)
 200537c:	1085883a 	add	r2,r2,r2
 2005380:	1085883a 	add	r2,r2,r2
 2005384:	e13f9d04 	addi	r4,fp,-396
 2005388:	2085883a 	add	r2,r4,r2
 200538c:	11003704 	addi	r4,r2,220
 2005390:	20800017 	ldw	r2,0(r4)
 2005394:	1885ff72 	custom	253,r2,r3,r2
 2005398:	e0bfa715 	stw	r2,-356(fp)
		    fq[i]  += fq[i-1]-fw;
 200539c:	e0bfa117 	ldw	r2,-380(fp)
 20053a0:	1085883a 	add	r2,r2,r2
 20053a4:	1085883a 	add	r2,r2,r2
 20053a8:	e0ff9d04 	addi	r3,fp,-396
 20053ac:	1885883a 	add	r2,r3,r2
 20053b0:	10803704 	addi	r2,r2,220
 20053b4:	10c00017 	ldw	r3,0(r2)
 20053b8:	e0bfa117 	ldw	r2,-380(fp)
 20053bc:	10bfffc4 	addi	r2,r2,-1
 20053c0:	1085883a 	add	r2,r2,r2
 20053c4:	1085883a 	add	r2,r2,r2
 20053c8:	e13f9d04 	addi	r4,fp,-396
 20053cc:	2085883a 	add	r2,r4,r2
 20053d0:	10803704 	addi	r2,r2,220
 20053d4:	11000017 	ldw	r4,0(r2)
 20053d8:	e0bfa717 	ldw	r2,-356(fp)
 20053dc:	2085ffb2 	custom	254,r2,r4,r2
 20053e0:	1887ff72 	custom	253,r3,r3,r2
 20053e4:	e0bfa117 	ldw	r2,-380(fp)
 20053e8:	1085883a 	add	r2,r2,r2
 20053ec:	1085883a 	add	r2,r2,r2
 20053f0:	e13f9d04 	addi	r4,fp,-396
 20053f4:	2085883a 	add	r2,r4,r2
 20053f8:	10803704 	addi	r2,r2,220
 20053fc:	10c00015 	stw	r3,0(r2)
		    fq[i-1] = fw;
 2005400:	e0bfa117 	ldw	r2,-380(fp)
 2005404:	10bfffc4 	addi	r2,r2,-1
 2005408:	1085883a 	add	r2,r2,r2
 200540c:	1085883a 	add	r2,r2,r2
 2005410:	e0ff9d04 	addi	r3,fp,-396
 2005414:	1885883a 	add	r2,r3,r2
 2005418:	10803704 	addi	r2,r2,220
 200541c:	e0ffa717 	ldw	r3,-356(fp)
 2005420:	10c00015 	stw	r3,0(r2)
		for (i=jz;i>0;i--) {
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 2005424:	e0bfa117 	ldw	r2,-380(fp)
 2005428:	10bfffc4 	addi	r2,r2,-1
 200542c:	e0bfa115 	stw	r2,-380(fp)
 2005430:	e0bfa117 	ldw	r2,-380(fp)
 2005434:	10800088 	cmpgei	r2,r2,2
 2005438:	103fc71e 	bne	r2,zero,2005358 <__kernel_rem_pio2f+0xce0>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
 200543c:	e03fa715 	stw	zero,-356(fp)
 2005440:	e0bf9d17 	ldw	r2,-396(fp)
 2005444:	e0bfa115 	stw	r2,-380(fp)
 2005448:	00000d06 	br	2005480 <__kernel_rem_pio2f+0xe08>
 200544c:	e0bfa117 	ldw	r2,-380(fp)
 2005450:	1085883a 	add	r2,r2,r2
 2005454:	1085883a 	add	r2,r2,r2
 2005458:	e13f9d04 	addi	r4,fp,-396
 200545c:	2085883a 	add	r2,r4,r2
 2005460:	10c03704 	addi	r3,r2,220
 2005464:	18800017 	ldw	r2,0(r3)
 2005468:	e0ffa717 	ldw	r3,-356(fp)
 200546c:	1885ff72 	custom	253,r2,r3,r2
 2005470:	e0bfa715 	stw	r2,-356(fp)
 2005474:	e0bfa117 	ldw	r2,-380(fp)
 2005478:	10bfffc4 	addi	r2,r2,-1
 200547c:	e0bfa115 	stw	r2,-380(fp)
 2005480:	e0bfa117 	ldw	r2,-380(fp)
 2005484:	10800088 	cmpgei	r2,r2,2
 2005488:	103ff01e 	bne	r2,zero,200544c <__kernel_rem_pio2f+0xdd4>
		if(ih==0) {
 200548c:	e0bfa517 	ldw	r2,-364(fp)
 2005490:	10000c1e 	bne	r2,zero,20054c4 <__kernel_rem_pio2f+0xe4c>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
 2005494:	e0ffd417 	ldw	r3,-176(fp)
 2005498:	e0bffd17 	ldw	r2,-12(fp)
 200549c:	10c00015 	stw	r3,0(r2)
 20054a0:	e0bffd17 	ldw	r2,-12(fp)
 20054a4:	10800104 	addi	r2,r2,4
 20054a8:	e0ffd517 	ldw	r3,-172(fp)
 20054ac:	10c00015 	stw	r3,0(r2)
 20054b0:	e0bffd17 	ldw	r2,-12(fp)
 20054b4:	10800204 	addi	r2,r2,8
 20054b8:	e0ffa717 	ldw	r3,-356(fp)
 20054bc:	10c00015 	stw	r3,0(r2)
 20054c0:	00000e06 	br	20054fc <__kernel_rem_pio2f+0xe84>
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
 20054c4:	e0bfd417 	ldw	r2,-176(fp)
 20054c8:	1007f872 	custom	225,r3,r2,zero
 20054cc:	e0bffd17 	ldw	r2,-12(fp)
 20054d0:	10c00015 	stw	r3,0(r2)
 20054d4:	e0bffd17 	ldw	r2,-12(fp)
 20054d8:	10800104 	addi	r2,r2,4
 20054dc:	e0ffd517 	ldw	r3,-172(fp)
 20054e0:	1807f872 	custom	225,r3,r3,zero
 20054e4:	10c00015 	stw	r3,0(r2)
 20054e8:	e0bffd17 	ldw	r2,-12(fp)
 20054ec:	10800204 	addi	r2,r2,8
 20054f0:	e0ffa717 	ldw	r3,-356(fp)
 20054f4:	1807f872 	custom	225,r3,r3,zero
 20054f8:	10c00015 	stw	r3,0(r2)
		}
	}
	return n&7;
 20054fc:	e0bfa017 	ldw	r2,-384(fp)
 2005500:	108001cc 	andi	r2,r2,7
}
 2005504:	e037883a 	mov	sp,fp
 2005508:	dfc00117 	ldw	ra,4(sp)
 200550c:	df000017 	ldw	fp,0(sp)
 2005510:	dec00204 	addi	sp,sp,8
 2005514:	f800283a 	ret

02005518 <__kernel_sinf>:
	float __kernel_sinf(float x, float y, int iy)
#else
	float __kernel_sinf(x, y, iy)
	float x,y; int iy;		/* iy=0 if y is zero */
#endif
{
 2005518:	defff704 	addi	sp,sp,-36
 200551c:	df000815 	stw	fp,32(sp)
 2005520:	df000804 	addi	fp,sp,32
 2005524:	e13ffd15 	stw	r4,-12(fp)
 2005528:	e17ffe15 	stw	r5,-8(fp)
 200552c:	e1bfff15 	stw	r6,-4(fp)
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
 2005530:	e0bffd17 	ldw	r2,-12(fp)
 2005534:	e0bffc15 	stw	r2,-16(fp)
 2005538:	e0bffc17 	ldw	r2,-16(fp)
 200553c:	e0bff815 	stw	r2,-32(fp)
	ix &= 0x7fffffff;			/* high word of x */
 2005540:	e0fff817 	ldw	r3,-32(fp)
 2005544:	00a00034 	movhi	r2,32768
 2005548:	10bfffc4 	addi	r2,r2,-1
 200554c:	1884703a 	and	r2,r3,r2
 2005550:	e0bff815 	stw	r2,-32(fp)
	if(ix<0x32000000)			/* |x| < 2**-27 */
 2005554:	e0fff817 	ldw	r3,-32(fp)
 2005558:	008c8034 	movhi	r2,12800
 200555c:	1880050e 	bge	r3,r2,2005574 <__kernel_sinf+0x5c>
	   {if((int)x==0) return x;}		/* generate inexact */
 2005560:	e0fffd17 	ldw	r3,-12(fp)
 2005564:	1805fe72 	custom	249,r2,r3,zero
 2005568:	1000021e 	bne	r2,zero,2005574 <__kernel_sinf+0x5c>
 200556c:	e0bffd17 	ldw	r2,-12(fp)
 2005570:	00003e06 	br	200566c <__kernel_sinf+0x154>
	z	=  x*x;
 2005574:	e0fffd17 	ldw	r3,-12(fp)
 2005578:	e0bffd17 	ldw	r2,-12(fp)
 200557c:	1885ff32 	custom	252,r2,r3,r2
 2005580:	e0bff915 	stw	r2,-28(fp)
	v	=  z*x;
 2005584:	e0fff917 	ldw	r3,-28(fp)
 2005588:	e0bffd17 	ldw	r2,-12(fp)
 200558c:	1885ff32 	custom	252,r2,r3,r2
 2005590:	e0bffa15 	stw	r2,-24(fp)
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
 2005594:	008bcbf4 	movhi	r2,12079
 2005598:	10b274c4 	addi	r2,r2,-13869
 200559c:	e0fff917 	ldw	r3,-28(fp)
 20055a0:	10c7ff32 	custom	252,r3,r2,r3
 20055a4:	00acb5f4 	movhi	r2,45783
 20055a8:	108bcd04 	addi	r2,r2,12084
 20055ac:	1887ff72 	custom	253,r3,r3,r2
 20055b0:	e0bff917 	ldw	r2,-28(fp)
 20055b4:	1887ff32 	custom	252,r3,r3,r2
 20055b8:	008d8e74 	movhi	r2,13881
 20055bc:	10bbc6c4 	addi	r2,r2,-4325
 20055c0:	1887ff72 	custom	253,r3,r3,r2
 20055c4:	e0bff917 	ldw	r2,-28(fp)
 20055c8:	1887ff32 	custom	252,r3,r3,r2
 20055cc:	00ae5434 	movhi	r2,47440
 20055d0:	10834044 	addi	r2,r2,3329
 20055d4:	1887ff72 	custom	253,r3,r3,r2
 20055d8:	e0bff917 	ldw	r2,-28(fp)
 20055dc:	1887ff32 	custom	252,r3,r3,r2
 20055e0:	008f0274 	movhi	r2,15369
 20055e4:	10a22244 	addi	r2,r2,-30583
 20055e8:	1885ff72 	custom	253,r2,r3,r2
 20055ec:	e0bffb15 	stw	r2,-20(fp)
	if(iy==0) return x+v*(S1+z*r);
 20055f0:	e0bfff17 	ldw	r2,-4(fp)
 20055f4:	10000b1e 	bne	r2,zero,2005624 <__kernel_sinf+0x10c>
 20055f8:	e0fff917 	ldw	r3,-28(fp)
 20055fc:	e0bffb17 	ldw	r2,-20(fp)
 2005600:	1887ff32 	custom	252,r3,r3,r2
 2005604:	00af8af4 	movhi	r2,48683
 2005608:	10aaaac4 	addi	r2,r2,-21845
 200560c:	1887ff72 	custom	253,r3,r3,r2
 2005610:	e0bffa17 	ldw	r2,-24(fp)
 2005614:	1887ff32 	custom	252,r3,r3,r2
 2005618:	e0bffd17 	ldw	r2,-12(fp)
 200561c:	1885ff72 	custom	253,r2,r3,r2
 2005620:	00001206 	br	200566c <__kernel_sinf+0x154>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
 2005624:	00cfc034 	movhi	r3,16128
 2005628:	e0bffe17 	ldw	r2,-8(fp)
 200562c:	1887ff32 	custom	252,r3,r3,r2
 2005630:	e13ffa17 	ldw	r4,-24(fp)
 2005634:	e0bffb17 	ldw	r2,-20(fp)
 2005638:	2085ff32 	custom	252,r2,r4,r2
 200563c:	1887ffb2 	custom	254,r3,r3,r2
 2005640:	e0bff917 	ldw	r2,-28(fp)
 2005644:	1887ff32 	custom	252,r3,r3,r2
 2005648:	e0bffe17 	ldw	r2,-8(fp)
 200564c:	1887ffb2 	custom	254,r3,r3,r2
 2005650:	00af8af4 	movhi	r2,48683
 2005654:	10aaaac4 	addi	r2,r2,-21845
 2005658:	e13ffa17 	ldw	r4,-24(fp)
 200565c:	1105ff32 	custom	252,r2,r2,r4
 2005660:	1885ffb2 	custom	254,r2,r3,r2
 2005664:	e0fffd17 	ldw	r3,-12(fp)
 2005668:	1885ffb2 	custom	254,r2,r3,r2
 200566c:	1007883a 	mov	r3,r2
}
 2005670:	1805883a 	mov	r2,r3
 2005674:	e037883a 	mov	sp,fp
 2005678:	df000017 	ldw	fp,0(sp)
 200567c:	dec00104 	addi	sp,sp,4
 2005680:	f800283a 	ret

02005684 <matherr>:
	int matherr(struct exception *x)
#else
	int matherr(x)
	struct exception *x;
#endif
{
 2005684:	defffc04 	addi	sp,sp,-16
 2005688:	dfc00315 	stw	ra,12(sp)
 200568c:	df000215 	stw	fp,8(sp)
 2005690:	df000204 	addi	fp,sp,8
 2005694:	e13fff15 	stw	r4,-4(fp)
	int n=0;
 2005698:	e03ffe15 	stw	zero,-8(fp)
	if(x->arg1!=x->arg1) return 0;
 200569c:	e13fff17 	ldw	r4,-4(fp)
 20056a0:	20800217 	ldw	r2,8(r4)
 20056a4:	20c00317 	ldw	r3,12(r4)
 20056a8:	e1bfff17 	ldw	r6,-4(fp)
 20056ac:	31000217 	ldw	r4,8(r6)
 20056b0:	31400317 	ldw	r5,12(r6)
 20056b4:	200d883a 	mov	r6,r4
 20056b8:	280f883a 	mov	r7,r5
 20056bc:	1009883a 	mov	r4,r2
 20056c0:	180b883a 	mov	r5,r3
 20056c4:	20068680 	call	2006868 <__eqdf2>
 20056c8:	10000226 	beq	r2,zero,20056d4 <matherr+0x50>
 20056cc:	0005883a 	mov	r2,zero
 20056d0:	00000106 	br	20056d8 <matherr+0x54>
	return n;
 20056d4:	e0bffe17 	ldw	r2,-8(fp)
}
 20056d8:	e037883a 	mov	sp,fp
 20056dc:	dfc00117 	ldw	ra,4(sp)
 20056e0:	df000017 	ldw	fp,0(sp)
 20056e4:	dec00204 	addi	sp,sp,8
 20056e8:	f800283a 	ret

020056ec <atanf>:
	float atanf(float x)
#else
	float atanf(x)
	float x;
#endif
{
 20056ec:	defff504 	addi	sp,sp,-44
 20056f0:	dfc00a15 	stw	ra,40(sp)
 20056f4:	df000915 	stw	fp,36(sp)
 20056f8:	df000904 	addi	fp,sp,36
 20056fc:	e13fff15 	stw	r4,-4(fp)
	float w,s1,s2,z;
	__int32_t ix,hx,id;

	GET_FLOAT_WORD(hx,x);
 2005700:	e0bfff17 	ldw	r2,-4(fp)
 2005704:	e0bffe15 	stw	r2,-8(fp)
 2005708:	e0bffe17 	ldw	r2,-8(fp)
 200570c:	e0bff815 	stw	r2,-32(fp)
	ix = hx&0x7fffffff;
 2005710:	e0fff817 	ldw	r3,-32(fp)
 2005714:	00a00034 	movhi	r2,32768
 2005718:	10bfffc4 	addi	r2,r2,-1
 200571c:	1884703a 	and	r2,r3,r2
 2005720:	e0bff915 	stw	r2,-28(fp)
	if(ix>=0x50800000) {	/* if |x| >= 2^34 */
 2005724:	e0fff917 	ldw	r3,-28(fp)
 2005728:	00942034 	movhi	r2,20608
 200572c:	18801516 	blt	r3,r2,2005784 <atanf+0x98>
	    if(FLT_UWORD_IS_NAN(ix))
 2005730:	e0bff917 	ldw	r2,-28(fp)
 2005734:	00dfe034 	movhi	r3,32640
 2005738:	1880030e 	bge	r3,r2,2005748 <atanf+0x5c>
		return x+x;		/* NaN */
 200573c:	e0bfff17 	ldw	r2,-4(fp)
 2005740:	1085ff72 	custom	253,r2,r2,r2
 2005744:	0000be06 	br	2005a40 <atanf+0x354>
	    if(hx>0) return  atanhi[3]+atanlo[3];
 2005748:	e0bff817 	ldw	r2,-32(fp)
 200574c:	0080060e 	bge	zero,r2,2005768 <atanf+0x7c>
 2005750:	00cff274 	movhi	r3,16329
 2005754:	18c3f684 	addi	r3,r3,4058
 2005758:	008ce8b4 	movhi	r2,13218
 200575c:	10885a04 	addi	r2,r2,8552
 2005760:	1885ff72 	custom	253,r2,r3,r2
 2005764:	0000b606 	br	2005a40 <atanf+0x354>
	    else     return -atanhi[3]-atanlo[3];
 2005768:	008ff274 	movhi	r2,16329
 200576c:	1083f684 	addi	r2,r2,4058
 2005770:	1007f872 	custom	225,r3,r2,zero
 2005774:	008ce8b4 	movhi	r2,13218
 2005778:	10885a04 	addi	r2,r2,8552
 200577c:	1885ffb2 	custom	254,r2,r3,r2
 2005780:	0000af06 	br	2005a40 <atanf+0x354>
	} if (ix < 0x3ee00000) {	/* |x| < 0.4375 */
 2005784:	e0fff917 	ldw	r3,-28(fp)
 2005788:	008fb834 	movhi	r2,16096
 200578c:	18800f0e 	bge	r3,r2,20057cc <atanf+0xe0>
	    if (ix < 0x31000000) {	/* |x| < 2^-29 */
 2005790:	e0fff917 	ldw	r3,-28(fp)
 2005794:	008c4034 	movhi	r2,12544
 2005798:	1880090e 	bge	r3,r2,20057c0 <atanf+0xd4>
		if(huge+x>one) return x;	/* raise inexact */
 200579c:	009c52b4 	movhi	r2,29002
 20057a0:	10bcb284 	addi	r2,r2,-3382
 20057a4:	e0ffff17 	ldw	r3,-4(fp)
 20057a8:	10c7ff72 	custom	253,r3,r2,r3
 20057ac:	008fe034 	movhi	r2,16256
 20057b0:	1885f972 	custom	229,r2,r3,r2
 20057b4:	10000226 	beq	r2,zero,20057c0 <atanf+0xd4>
 20057b8:	e0bfff17 	ldw	r2,-4(fp)
 20057bc:	0000a006 	br	2005a40 <atanf+0x354>
	    }
	    id = -1;
 20057c0:	00bfffc4 	movi	r2,-1
 20057c4:	e0bff715 	stw	r2,-36(fp)
 20057c8:	00003506 	br	20058a0 <atanf+0x1b4>
	} else {
	x = fabsf(x);
 20057cc:	e13fff17 	ldw	r4,-4(fp)
 20057d0:	2005a5c0 	call	2005a5c <fabsf>
 20057d4:	e0bfff15 	stw	r2,-4(fp)
	if (ix < 0x3f980000) {		/* |x| < 1.1875 */
 20057d8:	e0fff917 	ldw	r3,-28(fp)
 20057dc:	008fe634 	movhi	r2,16280
 20057e0:	1880190e 	bge	r3,r2,2005848 <atanf+0x15c>
	    if (ix < 0x3f300000) {	/* 7/16 <=|x|<11/16 */
 20057e4:	e0fff917 	ldw	r3,-28(fp)
 20057e8:	008fcc34 	movhi	r2,16176
 20057ec:	18800b0e 	bge	r3,r2,200581c <atanf+0x130>
		id = 0; x = ((float)2.0*x-one)/((float)2.0+x); 
 20057f0:	e03ff715 	stw	zero,-36(fp)
 20057f4:	e0bfff17 	ldw	r2,-4(fp)
 20057f8:	1087ff72 	custom	253,r3,r2,r2
 20057fc:	008fe034 	movhi	r2,16256
 2005800:	1887ffb2 	custom	254,r3,r3,r2
 2005804:	e13fff17 	ldw	r4,-4(fp)
 2005808:	00900034 	movhi	r2,16384
 200580c:	2085ff72 	custom	253,r2,r4,r2
 2005810:	1885fff2 	custom	255,r2,r3,r2
 2005814:	e0bfff15 	stw	r2,-4(fp)
 2005818:	00002106 	br	20058a0 <atanf+0x1b4>
	    } else {			/* 11/16<=|x|< 19/16 */
		id = 1; x  = (x-one)/(x+one); 
 200581c:	00800044 	movi	r2,1
 2005820:	e0bff715 	stw	r2,-36(fp)
 2005824:	008fe034 	movhi	r2,16256
 2005828:	e0ffff17 	ldw	r3,-4(fp)
 200582c:	1887ffb2 	custom	254,r3,r3,r2
 2005830:	010fe034 	movhi	r4,16256
 2005834:	e0bfff17 	ldw	r2,-4(fp)
 2005838:	2085ff72 	custom	253,r2,r4,r2
 200583c:	1885fff2 	custom	255,r2,r3,r2
 2005840:	e0bfff15 	stw	r2,-4(fp)
 2005844:	00001606 	br	20058a0 <atanf+0x1b4>
	    }
	} else {
	    if (ix < 0x401c0000) {	/* |x| < 2.4375 */
 2005848:	e0fff917 	ldw	r3,-28(fp)
 200584c:	00900734 	movhi	r2,16412
 2005850:	18800d0e 	bge	r3,r2,2005888 <atanf+0x19c>
		id = 2; x  = (x-(float)1.5)/(one+(float)1.5*x);
 2005854:	00800084 	movi	r2,2
 2005858:	e0bff715 	stw	r2,-36(fp)
 200585c:	e0ffff17 	ldw	r3,-4(fp)
 2005860:	008ff034 	movhi	r2,16320
 2005864:	1887ffb2 	custom	254,r3,r3,r2
 2005868:	e13fff17 	ldw	r4,-4(fp)
 200586c:	008ff034 	movhi	r2,16320
 2005870:	2089ff32 	custom	252,r4,r4,r2
 2005874:	008fe034 	movhi	r2,16256
 2005878:	2085ff72 	custom	253,r2,r4,r2
 200587c:	1885fff2 	custom	255,r2,r3,r2
 2005880:	e0bfff15 	stw	r2,-4(fp)
 2005884:	00000606 	br	20058a0 <atanf+0x1b4>
	    } else {			/* 2.4375 <= |x| < 2^66 */
		id = 3; x  = -(float)1.0/x;
 2005888:	008000c4 	movi	r2,3
 200588c:	e0bff715 	stw	r2,-36(fp)
 2005890:	00efe034 	movhi	r3,49024
 2005894:	e0bfff17 	ldw	r2,-4(fp)
 2005898:	1885fff2 	custom	255,r2,r3,r2
 200589c:	e0bfff15 	stw	r2,-4(fp)
	    }
	}}
    /* end of argument reduction */
	z = x*x;
 20058a0:	e0ffff17 	ldw	r3,-4(fp)
 20058a4:	e0bfff17 	ldw	r2,-4(fp)
 20058a8:	1885ff32 	custom	252,r2,r3,r2
 20058ac:	e0bffa15 	stw	r2,-24(fp)
	w = z*z;
 20058b0:	e0fffa17 	ldw	r3,-24(fp)
 20058b4:	e0bffa17 	ldw	r2,-24(fp)
 20058b8:	1885ff32 	custom	252,r2,r3,r2
 20058bc:	e0bffb15 	stw	r2,-20(fp)
    /* break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly */
	s1 = z*(aT[0]+w*(aT[2]+w*(aT[4]+w*(aT[6]+w*(aT[8]+w*aT[10])))));
 20058c0:	008faaf4 	movhi	r2,16043
 20058c4:	10aaaac4 	addi	r2,r2,-21845
 20058c8:	00cf84b4 	movhi	r3,15890
 20058cc:	18d24944 	addi	r3,r3,18725
 20058d0:	010f6eb4 	movhi	r4,15802
 20058d4:	210b9b84 	addi	r4,r4,11886
 20058d8:	014f6234 	movhi	r5,15752
 20058dc:	295acd44 	addi	r5,r5,27445
 20058e0:	018f5334 	movhi	r6,15692
 20058e4:	31b69644 	addi	r6,r6,-9639
 20058e8:	01cf2174 	movhi	r7,15493
 20058ec:	39da75c4 	addi	r7,r7,27095
 20058f0:	e23ffb17 	ldw	r8,-20(fp)
 20058f4:	3a0fff32 	custom	252,r7,r7,r8
 20058f8:	31cfff72 	custom	253,r7,r6,r7
 20058fc:	e1bffb17 	ldw	r6,-20(fp)
 2005900:	398dff32 	custom	252,r6,r7,r6
 2005904:	298dff72 	custom	253,r6,r5,r6
 2005908:	e17ffb17 	ldw	r5,-20(fp)
 200590c:	314bff32 	custom	252,r5,r6,r5
 2005910:	214bff72 	custom	253,r5,r4,r5
 2005914:	e13ffb17 	ldw	r4,-20(fp)
 2005918:	2909ff32 	custom	252,r4,r5,r4
 200591c:	1909ff72 	custom	253,r4,r3,r4
 2005920:	e0fffb17 	ldw	r3,-20(fp)
 2005924:	20c7ff32 	custom	252,r3,r4,r3
 2005928:	10c7ff72 	custom	253,r3,r2,r3
 200592c:	e0bffa17 	ldw	r2,-24(fp)
 2005930:	1885ff32 	custom	252,r2,r3,r2
 2005934:	e0bffc15 	stw	r2,-16(fp)
	s2 = w*(aT[1]+w*(aT[3]+w*(aT[5]+w*(aT[7]+w*aT[9]))));
 2005938:	00af9374 	movhi	r2,48717
 200593c:	10b33344 	addi	r2,r2,-13107
 2005940:	00ef7934 	movhi	r3,48612
 2005944:	18e38e04 	addi	r3,r3,-29128
 2005948:	012f67b4 	movhi	r4,48542
 200594c:	2121e544 	addi	r4,r4,-30827
 2005950:	016f5bf4 	movhi	r5,48495
 2005954:	297c5ac4 	addi	r5,r5,-3733
 2005958:	01af45b4 	movhi	r6,48406
 200595c:	31a88844 	addi	r6,r6,-24031
 2005960:	e1fffb17 	ldw	r7,-20(fp)
 2005964:	31cdff32 	custom	252,r6,r6,r7
 2005968:	298dff72 	custom	253,r6,r5,r6
 200596c:	e17ffb17 	ldw	r5,-20(fp)
 2005970:	314bff32 	custom	252,r5,r6,r5
 2005974:	214bff72 	custom	253,r5,r4,r5
 2005978:	e13ffb17 	ldw	r4,-20(fp)
 200597c:	2909ff32 	custom	252,r4,r5,r4
 2005980:	1909ff72 	custom	253,r4,r3,r4
 2005984:	e0fffb17 	ldw	r3,-20(fp)
 2005988:	20c7ff32 	custom	252,r3,r4,r3
 200598c:	10c7ff72 	custom	253,r3,r2,r3
 2005990:	e0bffb17 	ldw	r2,-20(fp)
 2005994:	1885ff32 	custom	252,r2,r3,r2
 2005998:	e0bffd15 	stw	r2,-12(fp)
	if (id<0) return x - x*(s1+s2);
 200599c:	e0bff717 	ldw	r2,-36(fp)
 20059a0:	1000080e 	bge	r2,zero,20059c4 <atanf+0x2d8>
 20059a4:	e0fffc17 	ldw	r3,-16(fp)
 20059a8:	e0bffd17 	ldw	r2,-12(fp)
 20059ac:	1887ff72 	custom	253,r3,r3,r2
 20059b0:	e0bfff17 	ldw	r2,-4(fp)
 20059b4:	1885ff32 	custom	252,r2,r3,r2
 20059b8:	e0ffff17 	ldw	r3,-4(fp)
 20059bc:	1885ffb2 	custom	254,r2,r3,r2
 20059c0:	00001f06 	br	2005a40 <atanf+0x354>
	else {
	    z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
 20059c4:	008080b4 	movhi	r2,514
 20059c8:	10868a04 	addi	r2,r2,6696
 20059cc:	e0fff717 	ldw	r3,-36(fp)
 20059d0:	18c7883a 	add	r3,r3,r3
 20059d4:	18c7883a 	add	r3,r3,r3
 20059d8:	10c5883a 	add	r2,r2,r3
 20059dc:	11000017 	ldw	r4,0(r2)
 20059e0:	e0fffc17 	ldw	r3,-16(fp)
 20059e4:	e0bffd17 	ldw	r2,-12(fp)
 20059e8:	1887ff72 	custom	253,r3,r3,r2
 20059ec:	e0bfff17 	ldw	r2,-4(fp)
 20059f0:	188bff32 	custom	252,r5,r3,r2
 20059f4:	008080b4 	movhi	r2,514
 20059f8:	10868e04 	addi	r2,r2,6712
 20059fc:	e0fff717 	ldw	r3,-36(fp)
 2005a00:	18c7883a 	add	r3,r3,r3
 2005a04:	18c7883a 	add	r3,r3,r3
 2005a08:	10c7883a 	add	r3,r2,r3
 2005a0c:	18800017 	ldw	r2,0(r3)
 2005a10:	2887ffb2 	custom	254,r3,r5,r2
 2005a14:	e0bfff17 	ldw	r2,-4(fp)
 2005a18:	1885ffb2 	custom	254,r2,r3,r2
 2005a1c:	2085ffb2 	custom	254,r2,r4,r2
 2005a20:	e0bffa15 	stw	r2,-24(fp)
	    return (hx<0)? -z:z;
 2005a24:	e0bff817 	ldw	r2,-32(fp)
 2005a28:	1000030e 	bge	r2,zero,2005a38 <atanf+0x34c>
 2005a2c:	e0bffa17 	ldw	r2,-24(fp)
 2005a30:	1005f872 	custom	225,r2,r2,zero
 2005a34:	00000106 	br	2005a3c <atanf+0x350>
 2005a38:	e0bffa17 	ldw	r2,-24(fp)
 2005a3c:	0001883a 	nop
 2005a40:	1007883a 	mov	r3,r2
	}
}
 2005a44:	1805883a 	mov	r2,r3
 2005a48:	e037883a 	mov	sp,fp
 2005a4c:	dfc00117 	ldw	ra,4(sp)
 2005a50:	df000017 	ldw	fp,0(sp)
 2005a54:	dec00204 	addi	sp,sp,8
 2005a58:	f800283a 	ret

02005a5c <fabsf>:
	float fabsf(float x)
#else
	float fabsf(x)
	float x;
#endif
{
 2005a5c:	defffb04 	addi	sp,sp,-20
 2005a60:	df000415 	stw	fp,16(sp)
 2005a64:	df000404 	addi	fp,sp,16
 2005a68:	e13fff15 	stw	r4,-4(fp)
	__uint32_t ix;
	GET_FLOAT_WORD(ix,x);
 2005a6c:	e0bfff17 	ldw	r2,-4(fp)
 2005a70:	e0bffd15 	stw	r2,-12(fp)
 2005a74:	e0bffd17 	ldw	r2,-12(fp)
 2005a78:	e0bffc15 	stw	r2,-16(fp)
	SET_FLOAT_WORD(x,ix&0x7fffffff);
 2005a7c:	e0fffc17 	ldw	r3,-16(fp)
 2005a80:	00a00034 	movhi	r2,32768
 2005a84:	10bfffc4 	addi	r2,r2,-1
 2005a88:	1884703a 	and	r2,r3,r2
 2005a8c:	e0bffe15 	stw	r2,-8(fp)
 2005a90:	e0bffe17 	ldw	r2,-8(fp)
 2005a94:	e0bfff15 	stw	r2,-4(fp)
        return x;
 2005a98:	e0bfff17 	ldw	r2,-4(fp)
 2005a9c:	1007883a 	mov	r3,r2
}
 2005aa0:	1805883a 	mov	r2,r3
 2005aa4:	e037883a 	mov	sp,fp
 2005aa8:	df000017 	ldw	fp,0(sp)
 2005aac:	dec00104 	addi	sp,sp,4
 2005ab0:	f800283a 	ret

02005ab4 <floorf>:
	float floorf(float x)
#else
	float floorf(x)
	float x;
#endif
{
 2005ab4:	defff804 	addi	sp,sp,-32
 2005ab8:	df000715 	stw	fp,28(sp)
 2005abc:	df000704 	addi	fp,sp,28
 2005ac0:	e13fff15 	stw	r4,-4(fp)
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
 2005ac4:	e0bfff17 	ldw	r2,-4(fp)
 2005ac8:	e0bffd15 	stw	r2,-12(fp)
 2005acc:	e0bffd17 	ldw	r2,-12(fp)
 2005ad0:	e0bff915 	stw	r2,-28(fp)
	ix = (i0&0x7fffffff);
 2005ad4:	e0fff917 	ldw	r3,-28(fp)
 2005ad8:	00a00034 	movhi	r2,32768
 2005adc:	10bfffc4 	addi	r2,r2,-1
 2005ae0:	1884703a 	and	r2,r3,r2
 2005ae4:	e0bffa15 	stw	r2,-24(fp)
	j0 = (ix>>23)-0x7f;
 2005ae8:	e0bffa17 	ldw	r2,-24(fp)
 2005aec:	1004d5fa 	srli	r2,r2,23
 2005af0:	10bfe044 	addi	r2,r2,-127
 2005af4:	e0bffb15 	stw	r2,-20(fp)
	if(j0<23) {
 2005af8:	e0bffb17 	ldw	r2,-20(fp)
 2005afc:	108005c8 	cmpgei	r2,r2,23
 2005b00:	1000321e 	bne	r2,zero,2005bcc <floorf+0x118>
	    if(j0<0) { 	/* raise inexact if x != 0 */
 2005b04:	e0bffb17 	ldw	r2,-20(fp)
 2005b08:	1000100e 	bge	r2,zero,2005b4c <floorf+0x98>
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
 2005b0c:	009c52b4 	movhi	r2,29002
 2005b10:	10bcb284 	addi	r2,r2,-3382
 2005b14:	e0ffff17 	ldw	r3,-4(fp)
 2005b18:	10c5ff72 	custom	253,r2,r2,r3
 2005b1c:	0007883a 	mov	r3,zero
 2005b20:	10c5f972 	custom	229,r2,r2,r3
 2005b24:	10003126 	beq	r2,zero,2005bec <floorf+0x138>
		    if(i0>=0) {i0=0;} 
 2005b28:	e0bff917 	ldw	r2,-28(fp)
 2005b2c:	10000216 	blt	r2,zero,2005b38 <floorf+0x84>
 2005b30:	e03ff915 	stw	zero,-28(fp)
 2005b34:	00002d06 	br	2005bec <floorf+0x138>
		    else if(!FLT_UWORD_IS_ZERO(ix))
 2005b38:	e0bffa17 	ldw	r2,-24(fp)
 2005b3c:	10002b26 	beq	r2,zero,2005bec <floorf+0x138>
			{ i0=0xbf800000;}
 2005b40:	00afe034 	movhi	r2,49024
 2005b44:	e0bff915 	stw	r2,-28(fp)
 2005b48:	00002806 	br	2005bec <floorf+0x138>
		}
	    } else {
		i = (0x007fffff)>>j0;
 2005b4c:	00802034 	movhi	r2,128
 2005b50:	10bfffc4 	addi	r2,r2,-1
 2005b54:	e0fffb17 	ldw	r3,-20(fp)
 2005b58:	10c5d83a 	sra	r2,r2,r3
 2005b5c:	e0bffc15 	stw	r2,-16(fp)
		if((i0&i)==0) return x; /* x is integral */
 2005b60:	e0fff917 	ldw	r3,-28(fp)
 2005b64:	e0bffc17 	ldw	r2,-16(fp)
 2005b68:	1884703a 	and	r2,r3,r2
 2005b6c:	1000021e 	bne	r2,zero,2005b78 <floorf+0xc4>
 2005b70:	e0bfff17 	ldw	r2,-4(fp)
 2005b74:	00002206 	br	2005c00 <floorf+0x14c>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
 2005b78:	009c52b4 	movhi	r2,29002
 2005b7c:	10bcb284 	addi	r2,r2,-3382
 2005b80:	e0ffff17 	ldw	r3,-4(fp)
 2005b84:	10c5ff72 	custom	253,r2,r2,r3
 2005b88:	0007883a 	mov	r3,zero
 2005b8c:	10c5f972 	custom	229,r2,r2,r3
 2005b90:	10001626 	beq	r2,zero,2005bec <floorf+0x138>
		    if(i0<0) i0 += (0x00800000)>>j0;
 2005b94:	e0bff917 	ldw	r2,-28(fp)
 2005b98:	1000060e 	bge	r2,zero,2005bb4 <floorf+0x100>
 2005b9c:	00c02034 	movhi	r3,128
 2005ba0:	e0bffb17 	ldw	r2,-20(fp)
 2005ba4:	1885d83a 	sra	r2,r3,r2
 2005ba8:	e0fff917 	ldw	r3,-28(fp)
 2005bac:	1885883a 	add	r2,r3,r2
 2005bb0:	e0bff915 	stw	r2,-28(fp)
		    i0 &= (~i);
 2005bb4:	e0bffc17 	ldw	r2,-16(fp)
 2005bb8:	0086303a 	nor	r3,zero,r2
 2005bbc:	e0bff917 	ldw	r2,-28(fp)
 2005bc0:	1884703a 	and	r2,r3,r2
 2005bc4:	e0bff915 	stw	r2,-28(fp)
 2005bc8:	00000806 	br	2005bec <floorf+0x138>
		}
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
 2005bcc:	e0fffa17 	ldw	r3,-24(fp)
 2005bd0:	009fe034 	movhi	r2,32640
 2005bd4:	18800336 	bltu	r3,r2,2005be4 <floorf+0x130>
 2005bd8:	e0bfff17 	ldw	r2,-4(fp)
 2005bdc:	1085ff72 	custom	253,r2,r2,r2
 2005be0:	00000706 	br	2005c00 <floorf+0x14c>
	    else return x;		/* x is integral */
 2005be4:	e0bfff17 	ldw	r2,-4(fp)
 2005be8:	00000506 	br	2005c00 <floorf+0x14c>
	}
	SET_FLOAT_WORD(x,i0);
 2005bec:	e0bff917 	ldw	r2,-28(fp)
 2005bf0:	e0bffe15 	stw	r2,-8(fp)
 2005bf4:	e0bffe17 	ldw	r2,-8(fp)
 2005bf8:	e0bfff15 	stw	r2,-4(fp)
	return x;
 2005bfc:	e0bfff17 	ldw	r2,-4(fp)
 2005c00:	1007883a 	mov	r3,r2
}
 2005c04:	1805883a 	mov	r2,r3
 2005c08:	e037883a 	mov	sp,fp
 2005c0c:	df000017 	ldw	fp,0(sp)
 2005c10:	dec00104 	addi	sp,sp,4
 2005c14:	f800283a 	ret

02005c18 <__fpclassifyf>:

#include "fdlibm.h"

int
__fpclassifyf (float x)
{
 2005c18:	defffc04 	addi	sp,sp,-16
 2005c1c:	df000315 	stw	fp,12(sp)
 2005c20:	df000304 	addi	fp,sp,12
 2005c24:	e13fff15 	stw	r4,-4(fp)
  __uint32_t w;

  GET_FLOAT_WORD(w,x);
 2005c28:	e0bfff17 	ldw	r2,-4(fp)
 2005c2c:	e0bffe15 	stw	r2,-8(fp)
 2005c30:	e0bffe17 	ldw	r2,-8(fp)
 2005c34:	e0bffd15 	stw	r2,-12(fp)
  
  if (w == 0x00000000 || w == 0x80000000)
 2005c38:	e0bffd17 	ldw	r2,-12(fp)
 2005c3c:	10000326 	beq	r2,zero,2005c4c <__fpclassifyf+0x34>
 2005c40:	e0fffd17 	ldw	r3,-12(fp)
 2005c44:	00a00034 	movhi	r2,32768
 2005c48:	1880021e 	bne	r3,r2,2005c54 <__fpclassifyf+0x3c>
    return FP_ZERO;
 2005c4c:	00800084 	movi	r2,2
 2005c50:	00002406 	br	2005ce4 <__fpclassifyf+0xcc>
  else if ((w >= 0x00800000 && w <= 0x7f7fffff) ||
 2005c54:	e0fffd17 	ldw	r3,-12(fp)
 2005c58:	00802034 	movhi	r2,128
 2005c5c:	18800336 	bltu	r3,r2,2005c6c <__fpclassifyf+0x54>
 2005c60:	e0fffd17 	ldw	r3,-12(fp)
 2005c64:	009fe034 	movhi	r2,32640
 2005c68:	18800636 	bltu	r3,r2,2005c84 <__fpclassifyf+0x6c>
 2005c6c:	e0fffd17 	ldw	r3,-12(fp)
 2005c70:	00a02034 	movhi	r2,32896
 2005c74:	18800536 	bltu	r3,r2,2005c8c <__fpclassifyf+0x74>
           (w >= 0x80800000 && w <= 0xff7fffff))
 2005c78:	e0fffd17 	ldw	r3,-12(fp)
 2005c7c:	00bfe034 	movhi	r2,65408
 2005c80:	1880022e 	bgeu	r3,r2,2005c8c <__fpclassifyf+0x74>
    return FP_NORMAL;
 2005c84:	00800104 	movi	r2,4
 2005c88:	00001606 	br	2005ce4 <__fpclassifyf+0xcc>
  else if ((w >= 0x00000001 && w <= 0x007fffff) ||
 2005c8c:	e0bffd17 	ldw	r2,-12(fp)
 2005c90:	10000326 	beq	r2,zero,2005ca0 <__fpclassifyf+0x88>
 2005c94:	e0fffd17 	ldw	r3,-12(fp)
 2005c98:	00802034 	movhi	r2,128
 2005c9c:	18800636 	bltu	r3,r2,2005cb8 <__fpclassifyf+0xa0>
 2005ca0:	e0bffd17 	ldw	r2,-12(fp)
 2005ca4:	00e00034 	movhi	r3,32768
 2005ca8:	1880052e 	bgeu	r3,r2,2005cc0 <__fpclassifyf+0xa8>
           (w >= 0x80000001 && w <= 0x807fffff))
 2005cac:	e0fffd17 	ldw	r3,-12(fp)
 2005cb0:	00a02034 	movhi	r2,32896
 2005cb4:	1880022e 	bgeu	r3,r2,2005cc0 <__fpclassifyf+0xa8>
    return FP_SUBNORMAL;
 2005cb8:	008000c4 	movi	r2,3
 2005cbc:	00000906 	br	2005ce4 <__fpclassifyf+0xcc>
  else if (w == 0x7f800000 || w == 0xff800000)
 2005cc0:	e0fffd17 	ldw	r3,-12(fp)
 2005cc4:	009fe034 	movhi	r2,32640
 2005cc8:	18800326 	beq	r3,r2,2005cd8 <__fpclassifyf+0xc0>
 2005ccc:	e0fffd17 	ldw	r3,-12(fp)
 2005cd0:	00bfe034 	movhi	r2,65408
 2005cd4:	1880021e 	bne	r3,r2,2005ce0 <__fpclassifyf+0xc8>
    return FP_INFINITE;
 2005cd8:	00800044 	movi	r2,1
 2005cdc:	00000106 	br	2005ce4 <__fpclassifyf+0xcc>
  else
    return FP_NAN;
 2005ce0:	0005883a 	mov	r2,zero
}
 2005ce4:	e037883a 	mov	sp,fp
 2005ce8:	df000017 	ldw	fp,0(sp)
 2005cec:	dec00104 	addi	sp,sp,4
 2005cf0:	f800283a 	ret

02005cf4 <scalbnf>:
	float scalbnf (float x, int n)
#else
	float scalbnf (x,n)
	float x; int n;
#endif
{
 2005cf4:	defff504 	addi	sp,sp,-44
 2005cf8:	dfc00a15 	stw	ra,40(sp)
 2005cfc:	df000915 	stw	fp,36(sp)
 2005d00:	df000904 	addi	fp,sp,36
 2005d04:	e13ffe15 	stw	r4,-8(fp)
 2005d08:	e17fff15 	stw	r5,-4(fp)
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
 2005d0c:	e0bffe17 	ldw	r2,-8(fp)
 2005d10:	e0bffa15 	stw	r2,-24(fp)
 2005d14:	e0bffa17 	ldw	r2,-24(fp)
 2005d18:	e0bff815 	stw	r2,-32(fp)
	hx = ix&0x7fffffff;
 2005d1c:	e0fff817 	ldw	r3,-32(fp)
 2005d20:	00a00034 	movhi	r2,32768
 2005d24:	10bfffc4 	addi	r2,r2,-1
 2005d28:	1884703a 	and	r2,r3,r2
 2005d2c:	e0bff915 	stw	r2,-28(fp)
        k = hx>>23;		/* extract exponent */
 2005d30:	e0bff917 	ldw	r2,-28(fp)
 2005d34:	1004d5fa 	srli	r2,r2,23
 2005d38:	e0bff715 	stw	r2,-36(fp)
	if (FLT_UWORD_IS_ZERO(hx))
 2005d3c:	e0bff917 	ldw	r2,-28(fp)
 2005d40:	1000021e 	bne	r2,zero,2005d4c <scalbnf+0x58>
	    return x;
 2005d44:	e0bffe17 	ldw	r2,-8(fp)
 2005d48:	00006806 	br	2005eec <scalbnf+0x1f8>
        if (!FLT_UWORD_IS_FINITE(hx))
 2005d4c:	e0fff917 	ldw	r3,-28(fp)
 2005d50:	009fe034 	movhi	r2,32640
 2005d54:	18800336 	bltu	r3,r2,2005d64 <scalbnf+0x70>
	    return x+x;		/* NaN or Inf */
 2005d58:	e0bffe17 	ldw	r2,-8(fp)
 2005d5c:	1085ff72 	custom	253,r2,r2,r2
 2005d60:	00006206 	br	2005eec <scalbnf+0x1f8>
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
 2005d64:	e0fff917 	ldw	r3,-28(fp)
 2005d68:	00802034 	movhi	r2,128
 2005d6c:	1880162e 	bgeu	r3,r2,2005dc8 <scalbnf+0xd4>
	    x *= two25;
 2005d70:	00930034 	movhi	r2,19456
 2005d74:	e0fffe17 	ldw	r3,-8(fp)
 2005d78:	1885ff32 	custom	252,r2,r3,r2
 2005d7c:	e0bffe15 	stw	r2,-8(fp)
	    GET_FLOAT_WORD(ix,x);
 2005d80:	e0bffe17 	ldw	r2,-8(fp)
 2005d84:	e0bffb15 	stw	r2,-20(fp)
 2005d88:	e0bffb17 	ldw	r2,-20(fp)
 2005d8c:	e0bff815 	stw	r2,-32(fp)
	    k = ((ix&0x7f800000)>>23) - 25; 
 2005d90:	e0bff817 	ldw	r2,-32(fp)
 2005d94:	109fe02c 	andhi	r2,r2,32640
 2005d98:	1005d5fa 	srai	r2,r2,23
 2005d9c:	10bff9c4 	addi	r2,r2,-25
 2005da0:	e0bff715 	stw	r2,-36(fp)
            if (n< -50000) return tiny*x; 	/*underflow*/
 2005da4:	e0ffff17 	ldw	r3,-4(fp)
 2005da8:	00bffff4 	movhi	r2,65535
 2005dac:	108f2c04 	addi	r2,r2,15536
 2005db0:	1880050e 	bge	r3,r2,2005dc8 <scalbnf+0xd4>
 2005db4:	008368b4 	movhi	r2,3490
 2005db8:	10909804 	addi	r2,r2,16992
 2005dbc:	e0fffe17 	ldw	r3,-8(fp)
 2005dc0:	10c5ff32 	custom	252,r2,r2,r3
 2005dc4:	00004906 	br	2005eec <scalbnf+0x1f8>
        }
        k = k+n; 
 2005dc8:	e0fff717 	ldw	r3,-36(fp)
 2005dcc:	e0bfff17 	ldw	r2,-4(fp)
 2005dd0:	1885883a 	add	r2,r3,r2
 2005dd4:	e0bff715 	stw	r2,-36(fp)
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
 2005dd8:	e0bff717 	ldw	r2,-36(fp)
 2005ddc:	10803fd0 	cmplti	r2,r2,255
 2005de0:	10000a1e 	bne	r2,zero,2005e0c <scalbnf+0x118>
 2005de4:	009c52b4 	movhi	r2,29002
 2005de8:	10bcb284 	addi	r2,r2,-3382
 2005dec:	e17ffe17 	ldw	r5,-8(fp)
 2005df0:	1009883a 	mov	r4,r2
 2005df4:	2005f080 	call	2005f08 <copysignf>
 2005df8:	1007883a 	mov	r3,r2
 2005dfc:	009c52b4 	movhi	r2,29002
 2005e00:	10bcb284 	addi	r2,r2,-3382
 2005e04:	1885ff32 	custom	252,r2,r3,r2
 2005e08:	00003806 	br	2005eec <scalbnf+0x1f8>
        if (k > 0) 				/* normal result */
 2005e0c:	e0bff717 	ldw	r2,-36(fp)
 2005e10:	00800c0e 	bge	zero,r2,2005e44 <scalbnf+0x150>
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
 2005e14:	e0fff817 	ldw	r3,-32(fp)
 2005e18:	00a02034 	movhi	r2,32896
 2005e1c:	10bfffc4 	addi	r2,r2,-1
 2005e20:	1884703a 	and	r2,r3,r2
 2005e24:	e0fff717 	ldw	r3,-36(fp)
 2005e28:	180695fa 	slli	r3,r3,23
 2005e2c:	10c4b03a 	or	r2,r2,r3
 2005e30:	e0bffc15 	stw	r2,-16(fp)
 2005e34:	e0bffc17 	ldw	r2,-16(fp)
 2005e38:	e0bffe15 	stw	r2,-8(fp)
 2005e3c:	e0bffe17 	ldw	r2,-8(fp)
 2005e40:	00002a06 	br	2005eec <scalbnf+0x1f8>
        if (k < FLT_SMALLEST_EXP) {
 2005e44:	e0bff717 	ldw	r2,-36(fp)
 2005e48:	10bffa88 	cmpgei	r2,r2,-22
 2005e4c:	1000171e 	bne	r2,zero,2005eac <scalbnf+0x1b8>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
 2005e50:	e0bfff17 	ldw	r2,-4(fp)
 2005e54:	00f0d414 	movui	r3,50000
 2005e58:	18800a0e 	bge	r3,r2,2005e84 <scalbnf+0x190>
		return huge*copysignf(huge,x);	/*overflow*/
 2005e5c:	009c52b4 	movhi	r2,29002
 2005e60:	10bcb284 	addi	r2,r2,-3382
 2005e64:	e17ffe17 	ldw	r5,-8(fp)
 2005e68:	1009883a 	mov	r4,r2
 2005e6c:	2005f080 	call	2005f08 <copysignf>
 2005e70:	1007883a 	mov	r3,r2
 2005e74:	009c52b4 	movhi	r2,29002
 2005e78:	10bcb284 	addi	r2,r2,-3382
 2005e7c:	1885ff32 	custom	252,r2,r3,r2
 2005e80:	00001a06 	br	2005eec <scalbnf+0x1f8>
	    else return tiny*copysignf(tiny,x);	/*underflow*/
 2005e84:	008368b4 	movhi	r2,3490
 2005e88:	10909804 	addi	r2,r2,16992
 2005e8c:	e17ffe17 	ldw	r5,-8(fp)
 2005e90:	1009883a 	mov	r4,r2
 2005e94:	2005f080 	call	2005f08 <copysignf>
 2005e98:	1007883a 	mov	r3,r2
 2005e9c:	008368b4 	movhi	r2,3490
 2005ea0:	10909804 	addi	r2,r2,16992
 2005ea4:	1885ff32 	custom	252,r2,r3,r2
 2005ea8:	00001006 	br	2005eec <scalbnf+0x1f8>
        }
        k += 25;				/* subnormal result */
 2005eac:	e0bff717 	ldw	r2,-36(fp)
 2005eb0:	10800644 	addi	r2,r2,25
 2005eb4:	e0bff715 	stw	r2,-36(fp)
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
 2005eb8:	e0fff817 	ldw	r3,-32(fp)
 2005ebc:	00a02034 	movhi	r2,32896
 2005ec0:	10bfffc4 	addi	r2,r2,-1
 2005ec4:	1884703a 	and	r2,r3,r2
 2005ec8:	e0fff717 	ldw	r3,-36(fp)
 2005ecc:	180695fa 	slli	r3,r3,23
 2005ed0:	10c4b03a 	or	r2,r2,r3
 2005ed4:	e0bffd15 	stw	r2,-12(fp)
 2005ed8:	e0bffd17 	ldw	r2,-12(fp)
 2005edc:	e0bffe15 	stw	r2,-8(fp)
        return x*twom25;
 2005ee0:	00ccc034 	movhi	r3,13056
 2005ee4:	e0bffe17 	ldw	r2,-8(fp)
 2005ee8:	1885ff32 	custom	252,r2,r3,r2
 2005eec:	1007883a 	mov	r3,r2
}
 2005ef0:	1805883a 	mov	r2,r3
 2005ef4:	e037883a 	mov	sp,fp
 2005ef8:	dfc00117 	ldw	ra,4(sp)
 2005efc:	df000017 	ldw	fp,0(sp)
 2005f00:	dec00204 	addi	sp,sp,8
 2005f04:	f800283a 	ret

02005f08 <copysignf>:
	float copysignf(float x, float y)
#else
	float copysignf(x,y)
	float x,y;
#endif
{
 2005f08:	defff804 	addi	sp,sp,-32
 2005f0c:	df000715 	stw	fp,28(sp)
 2005f10:	df000704 	addi	fp,sp,28
 2005f14:	e13ffe15 	stw	r4,-8(fp)
 2005f18:	e17fff15 	stw	r5,-4(fp)
	__uint32_t ix,iy;
	GET_FLOAT_WORD(ix,x);
 2005f1c:	e0bffe17 	ldw	r2,-8(fp)
 2005f20:	e0bffb15 	stw	r2,-20(fp)
 2005f24:	e0bffb17 	ldw	r2,-20(fp)
 2005f28:	e0bff915 	stw	r2,-28(fp)
	GET_FLOAT_WORD(iy,y);
 2005f2c:	e0bfff17 	ldw	r2,-4(fp)
 2005f30:	e0bffc15 	stw	r2,-16(fp)
 2005f34:	e0bffc17 	ldw	r2,-16(fp)
 2005f38:	e0bffa15 	stw	r2,-24(fp)
	SET_FLOAT_WORD(x,(ix&0x7fffffff)|(iy&0x80000000));
 2005f3c:	e0fff917 	ldw	r3,-28(fp)
 2005f40:	00a00034 	movhi	r2,32768
 2005f44:	10bfffc4 	addi	r2,r2,-1
 2005f48:	1886703a 	and	r3,r3,r2
 2005f4c:	e0bffa17 	ldw	r2,-24(fp)
 2005f50:	10a0002c 	andhi	r2,r2,32768
 2005f54:	1884b03a 	or	r2,r3,r2
 2005f58:	e0bffd15 	stw	r2,-12(fp)
 2005f5c:	e0bffd17 	ldw	r2,-12(fp)
 2005f60:	e0bffe15 	stw	r2,-8(fp)
        return x;
 2005f64:	e0bffe17 	ldw	r2,-8(fp)
 2005f68:	1007883a 	mov	r3,r2
}
 2005f6c:	1805883a 	mov	r2,r3
 2005f70:	e037883a 	mov	sp,fp
 2005f74:	df000017 	ldw	fp,0(sp)
 2005f78:	dec00104 	addi	sp,sp,4
 2005f7c:	f800283a 	ret

02005f80 <__divdf3>:
 2005f80:	defff204 	addi	sp,sp,-56
 2005f84:	dd400915 	stw	r21,36(sp)
 2005f88:	282ad53a 	srli	r21,r5,20
 2005f8c:	dd000815 	stw	r20,32(sp)
 2005f90:	2828d7fa 	srli	r20,r5,31
 2005f94:	dc000415 	stw	r16,16(sp)
 2005f98:	04000434 	movhi	r16,16
 2005f9c:	df000c15 	stw	fp,48(sp)
 2005fa0:	843fffc4 	addi	r16,r16,-1
 2005fa4:	dfc00d15 	stw	ra,52(sp)
 2005fa8:	ddc00b15 	stw	r23,44(sp)
 2005fac:	dd800a15 	stw	r22,40(sp)
 2005fb0:	dcc00715 	stw	r19,28(sp)
 2005fb4:	dc800615 	stw	r18,24(sp)
 2005fb8:	dc400515 	stw	r17,20(sp)
 2005fbc:	ad41ffcc 	andi	r21,r21,2047
 2005fc0:	2c20703a 	and	r16,r5,r16
 2005fc4:	a7003fcc 	andi	fp,r20,255
 2005fc8:	a8006126 	beq	r21,zero,2006150 <__divdf3+0x1d0>
 2005fcc:	0081ffc4 	movi	r2,2047
 2005fd0:	2025883a 	mov	r18,r4
 2005fd4:	a8803726 	beq	r21,r2,20060b4 <__divdf3+0x134>
 2005fd8:	80800434 	orhi	r2,r16,16
 2005fdc:	100490fa 	slli	r2,r2,3
 2005fe0:	2020d77a 	srli	r16,r4,29
 2005fe4:	202490fa 	slli	r18,r4,3
 2005fe8:	ad7f0044 	addi	r21,r21,-1023
 2005fec:	80a0b03a 	or	r16,r16,r2
 2005ff0:	0027883a 	mov	r19,zero
 2005ff4:	0013883a 	mov	r9,zero
 2005ff8:	3804d53a 	srli	r2,r7,20
 2005ffc:	382cd7fa 	srli	r22,r7,31
 2006000:	04400434 	movhi	r17,16
 2006004:	8c7fffc4 	addi	r17,r17,-1
 2006008:	1081ffcc 	andi	r2,r2,2047
 200600c:	3011883a 	mov	r8,r6
 2006010:	3c62703a 	and	r17,r7,r17
 2006014:	b5c03fcc 	andi	r23,r22,255
 2006018:	10006c26 	beq	r2,zero,20061cc <__divdf3+0x24c>
 200601c:	00c1ffc4 	movi	r3,2047
 2006020:	10c06426 	beq	r2,r3,20061b4 <__divdf3+0x234>
 2006024:	88c00434 	orhi	r3,r17,16
 2006028:	180690fa 	slli	r3,r3,3
 200602c:	3022d77a 	srli	r17,r6,29
 2006030:	301090fa 	slli	r8,r6,3
 2006034:	10bf0044 	addi	r2,r2,-1023
 2006038:	88e2b03a 	or	r17,r17,r3
 200603c:	000f883a 	mov	r7,zero
 2006040:	a58cf03a 	xor	r6,r20,r22
 2006044:	3cc8b03a 	or	r4,r7,r19
 2006048:	a8abc83a 	sub	r21,r21,r2
 200604c:	008003c4 	movi	r2,15
 2006050:	3007883a 	mov	r3,r6
 2006054:	34c03fcc 	andi	r19,r6,255
 2006058:	11009036 	bltu	r2,r4,200629c <__divdf3+0x31c>
 200605c:	200890ba 	slli	r4,r4,2
 2006060:	00808034 	movhi	r2,512
 2006064:	10981d04 	addi	r2,r2,24692
 2006068:	2089883a 	add	r4,r4,r2
 200606c:	20800017 	ldw	r2,0(r4)
 2006070:	1000683a 	jmp	r2
 2006074:	0200629c 	xori	r8,zero,394
 2006078:	020060ec 	andhi	r8,zero,387
 200607c:	0200628c 	andi	r8,zero,394
 2006080:	020060e0 	cmpeqi	r8,zero,387
 2006084:	0200628c 	andi	r8,zero,394
 2006088:	02006260 	cmpeqi	r8,zero,393
 200608c:	0200628c 	andi	r8,zero,394
 2006090:	020060e0 	cmpeqi	r8,zero,387
 2006094:	020060ec 	andhi	r8,zero,387
 2006098:	020060ec 	andhi	r8,zero,387
 200609c:	02006260 	cmpeqi	r8,zero,393
 20060a0:	020060e0 	cmpeqi	r8,zero,387
 20060a4:	020060d0 	cmplti	r8,zero,387
 20060a8:	020060d0 	cmplti	r8,zero,387
 20060ac:	020060d0 	cmplti	r8,zero,387
 20060b0:	02006580 	call	200658 <__alt_mem_mem_Nios_PI+0x658>
 20060b4:	2404b03a 	or	r2,r4,r16
 20060b8:	1000661e 	bne	r2,zero,2006254 <__divdf3+0x2d4>
 20060bc:	04c00204 	movi	r19,8
 20060c0:	0021883a 	mov	r16,zero
 20060c4:	0025883a 	mov	r18,zero
 20060c8:	02400084 	movi	r9,2
 20060cc:	003fca06 	br	2005ff8 <__divdf3+0x78>
 20060d0:	8023883a 	mov	r17,r16
 20060d4:	9011883a 	mov	r8,r18
 20060d8:	e02f883a 	mov	r23,fp
 20060dc:	480f883a 	mov	r7,r9
 20060e0:	00800084 	movi	r2,2
 20060e4:	3881311e 	bne	r7,r2,20065ac <__divdf3+0x62c>
 20060e8:	b827883a 	mov	r19,r23
 20060ec:	98c0004c 	andi	r3,r19,1
 20060f0:	0081ffc4 	movi	r2,2047
 20060f4:	000b883a 	mov	r5,zero
 20060f8:	0025883a 	mov	r18,zero
 20060fc:	1004953a 	slli	r2,r2,20
 2006100:	18c03fcc 	andi	r3,r3,255
 2006104:	04400434 	movhi	r17,16
 2006108:	8c7fffc4 	addi	r17,r17,-1
 200610c:	180697fa 	slli	r3,r3,31
 2006110:	2c4a703a 	and	r5,r5,r17
 2006114:	288ab03a 	or	r5,r5,r2
 2006118:	28c6b03a 	or	r3,r5,r3
 200611c:	9005883a 	mov	r2,r18
 2006120:	dfc00d17 	ldw	ra,52(sp)
 2006124:	df000c17 	ldw	fp,48(sp)
 2006128:	ddc00b17 	ldw	r23,44(sp)
 200612c:	dd800a17 	ldw	r22,40(sp)
 2006130:	dd400917 	ldw	r21,36(sp)
 2006134:	dd000817 	ldw	r20,32(sp)
 2006138:	dcc00717 	ldw	r19,28(sp)
 200613c:	dc800617 	ldw	r18,24(sp)
 2006140:	dc400517 	ldw	r17,20(sp)
 2006144:	dc000417 	ldw	r16,16(sp)
 2006148:	dec00e04 	addi	sp,sp,56
 200614c:	f800283a 	ret
 2006150:	2404b03a 	or	r2,r4,r16
 2006154:	2027883a 	mov	r19,r4
 2006158:	10003926 	beq	r2,zero,2006240 <__divdf3+0x2c0>
 200615c:	80012e26 	beq	r16,zero,2006618 <__divdf3+0x698>
 2006160:	8009883a 	mov	r4,r16
 2006164:	d9800315 	stw	r6,12(sp)
 2006168:	d9c00215 	stw	r7,8(sp)
 200616c:	20074900 	call	2007490 <__clzsi2>
 2006170:	d9800317 	ldw	r6,12(sp)
 2006174:	d9c00217 	ldw	r7,8(sp)
 2006178:	113ffd44 	addi	r4,r2,-11
 200617c:	00c00704 	movi	r3,28
 2006180:	19012116 	blt	r3,r4,2006608 <__divdf3+0x688>
 2006184:	00c00744 	movi	r3,29
 2006188:	147ffe04 	addi	r17,r2,-8
 200618c:	1907c83a 	sub	r3,r3,r4
 2006190:	8460983a 	sll	r16,r16,r17
 2006194:	98c6d83a 	srl	r3,r19,r3
 2006198:	9c64983a 	sll	r18,r19,r17
 200619c:	1c20b03a 	or	r16,r3,r16
 20061a0:	1080fcc4 	addi	r2,r2,1011
 20061a4:	00abc83a 	sub	r21,zero,r2
 20061a8:	0027883a 	mov	r19,zero
 20061ac:	0013883a 	mov	r9,zero
 20061b0:	003f9106 	br	2005ff8 <__divdf3+0x78>
 20061b4:	3446b03a 	or	r3,r6,r17
 20061b8:	18001f1e 	bne	r3,zero,2006238 <__divdf3+0x2b8>
 20061bc:	0023883a 	mov	r17,zero
 20061c0:	0011883a 	mov	r8,zero
 20061c4:	01c00084 	movi	r7,2
 20061c8:	003f9d06 	br	2006040 <__divdf3+0xc0>
 20061cc:	3446b03a 	or	r3,r6,r17
 20061d0:	18001526 	beq	r3,zero,2006228 <__divdf3+0x2a8>
 20061d4:	88011b26 	beq	r17,zero,2006644 <__divdf3+0x6c4>
 20061d8:	8809883a 	mov	r4,r17
 20061dc:	d9800315 	stw	r6,12(sp)
 20061e0:	da400115 	stw	r9,4(sp)
 20061e4:	20074900 	call	2007490 <__clzsi2>
 20061e8:	d9800317 	ldw	r6,12(sp)
 20061ec:	da400117 	ldw	r9,4(sp)
 20061f0:	113ffd44 	addi	r4,r2,-11
 20061f4:	00c00704 	movi	r3,28
 20061f8:	19010e16 	blt	r3,r4,2006634 <__divdf3+0x6b4>
 20061fc:	00c00744 	movi	r3,29
 2006200:	123ffe04 	addi	r8,r2,-8
 2006204:	1907c83a 	sub	r3,r3,r4
 2006208:	8a22983a 	sll	r17,r17,r8
 200620c:	30c6d83a 	srl	r3,r6,r3
 2006210:	3210983a 	sll	r8,r6,r8
 2006214:	1c62b03a 	or	r17,r3,r17
 2006218:	1080fcc4 	addi	r2,r2,1011
 200621c:	0085c83a 	sub	r2,zero,r2
 2006220:	000f883a 	mov	r7,zero
 2006224:	003f8606 	br	2006040 <__divdf3+0xc0>
 2006228:	0023883a 	mov	r17,zero
 200622c:	0011883a 	mov	r8,zero
 2006230:	01c00044 	movi	r7,1
 2006234:	003f8206 	br	2006040 <__divdf3+0xc0>
 2006238:	01c000c4 	movi	r7,3
 200623c:	003f8006 	br	2006040 <__divdf3+0xc0>
 2006240:	04c00104 	movi	r19,4
 2006244:	0021883a 	mov	r16,zero
 2006248:	0025883a 	mov	r18,zero
 200624c:	02400044 	movi	r9,1
 2006250:	003f6906 	br	2005ff8 <__divdf3+0x78>
 2006254:	04c00304 	movi	r19,12
 2006258:	024000c4 	movi	r9,3
 200625c:	003f6606 	br	2005ff8 <__divdf3+0x78>
 2006260:	01400434 	movhi	r5,16
 2006264:	0007883a 	mov	r3,zero
 2006268:	297fffc4 	addi	r5,r5,-1
 200626c:	04bfffc4 	movi	r18,-1
 2006270:	0081ffc4 	movi	r2,2047
 2006274:	003fa106 	br	20060fc <__divdf3+0x17c>
 2006278:	00c00044 	movi	r3,1
 200627c:	1887c83a 	sub	r3,r3,r2
 2006280:	01000e04 	movi	r4,56
 2006284:	20c1210e 	bge	r4,r3,200670c <__divdf3+0x78c>
 2006288:	98c0004c 	andi	r3,r19,1
 200628c:	0005883a 	mov	r2,zero
 2006290:	000b883a 	mov	r5,zero
 2006294:	0025883a 	mov	r18,zero
 2006298:	003f9806 	br	20060fc <__divdf3+0x17c>
 200629c:	8c00fd36 	bltu	r17,r16,2006694 <__divdf3+0x714>
 20062a0:	8440fb26 	beq	r16,r17,2006690 <__divdf3+0x710>
 20062a4:	8007883a 	mov	r3,r16
 20062a8:	ad7fffc4 	addi	r21,r21,-1
 20062ac:	0021883a 	mov	r16,zero
 20062b0:	4004d63a 	srli	r2,r8,24
 20062b4:	8822923a 	slli	r17,r17,8
 20062b8:	1809883a 	mov	r4,r3
 20062bc:	402c923a 	slli	r22,r8,8
 20062c0:	88b8b03a 	or	fp,r17,r2
 20062c4:	e028d43a 	srli	r20,fp,16
 20062c8:	d8c00015 	stw	r3,0(sp)
 20062cc:	e5ffffcc 	andi	r23,fp,65535
 20062d0:	a00b883a 	mov	r5,r20
 20062d4:	20075ec0 	call	20075ec <__udivsi3>
 20062d8:	d8c00017 	ldw	r3,0(sp)
 20062dc:	a00b883a 	mov	r5,r20
 20062e0:	d8800315 	stw	r2,12(sp)
 20062e4:	1809883a 	mov	r4,r3
 20062e8:	20076500 	call	2007650 <__umodsi3>
 20062ec:	d9800317 	ldw	r6,12(sp)
 20062f0:	1006943a 	slli	r3,r2,16
 20062f4:	9004d43a 	srli	r2,r18,16
 20062f8:	b9a3383a 	mul	r17,r23,r6
 20062fc:	10c4b03a 	or	r2,r2,r3
 2006300:	1440062e 	bgeu	r2,r17,200631c <__divdf3+0x39c>
 2006304:	1705883a 	add	r2,r2,fp
 2006308:	30ffffc4 	addi	r3,r6,-1
 200630c:	1700ee36 	bltu	r2,fp,20066c8 <__divdf3+0x748>
 2006310:	1440ed2e 	bgeu	r2,r17,20066c8 <__divdf3+0x748>
 2006314:	31bfff84 	addi	r6,r6,-2
 2006318:	1705883a 	add	r2,r2,fp
 200631c:	1463c83a 	sub	r17,r2,r17
 2006320:	a00b883a 	mov	r5,r20
 2006324:	8809883a 	mov	r4,r17
 2006328:	d9800315 	stw	r6,12(sp)
 200632c:	20075ec0 	call	20075ec <__udivsi3>
 2006330:	a00b883a 	mov	r5,r20
 2006334:	8809883a 	mov	r4,r17
 2006338:	d8800215 	stw	r2,8(sp)
 200633c:	20076500 	call	2007650 <__umodsi3>
 2006340:	d9c00217 	ldw	r7,8(sp)
 2006344:	1004943a 	slli	r2,r2,16
 2006348:	94bfffcc 	andi	r18,r18,65535
 200634c:	b9d1383a 	mul	r8,r23,r7
 2006350:	90a4b03a 	or	r18,r18,r2
 2006354:	d9800317 	ldw	r6,12(sp)
 2006358:	9200062e 	bgeu	r18,r8,2006374 <__divdf3+0x3f4>
 200635c:	9725883a 	add	r18,r18,fp
 2006360:	38bfffc4 	addi	r2,r7,-1
 2006364:	9700d636 	bltu	r18,fp,20066c0 <__divdf3+0x740>
 2006368:	9200d52e 	bgeu	r18,r8,20066c0 <__divdf3+0x740>
 200636c:	39ffff84 	addi	r7,r7,-2
 2006370:	9725883a 	add	r18,r18,fp
 2006374:	3004943a 	slli	r2,r6,16
 2006378:	b012d43a 	srli	r9,r22,16
 200637c:	b1bfffcc 	andi	r6,r22,65535
 2006380:	11e2b03a 	or	r17,r2,r7
 2006384:	8806d43a 	srli	r3,r17,16
 2006388:	893fffcc 	andi	r4,r17,65535
 200638c:	218b383a 	mul	r5,r4,r6
 2006390:	30c5383a 	mul	r2,r6,r3
 2006394:	2249383a 	mul	r4,r4,r9
 2006398:	280ed43a 	srli	r7,r5,16
 200639c:	9225c83a 	sub	r18,r18,r8
 20063a0:	2089883a 	add	r4,r4,r2
 20063a4:	3909883a 	add	r4,r7,r4
 20063a8:	1a47383a 	mul	r3,r3,r9
 20063ac:	2080022e 	bgeu	r4,r2,20063b8 <__divdf3+0x438>
 20063b0:	00800074 	movhi	r2,1
 20063b4:	1887883a 	add	r3,r3,r2
 20063b8:	2004d43a 	srli	r2,r4,16
 20063bc:	2008943a 	slli	r4,r4,16
 20063c0:	297fffcc 	andi	r5,r5,65535
 20063c4:	10c7883a 	add	r3,r2,r3
 20063c8:	2149883a 	add	r4,r4,r5
 20063cc:	90c0a536 	bltu	r18,r3,2006664 <__divdf3+0x6e4>
 20063d0:	90c0bf26 	beq	r18,r3,20066d0 <__divdf3+0x750>
 20063d4:	90c7c83a 	sub	r3,r18,r3
 20063d8:	810fc83a 	sub	r7,r16,r4
 20063dc:	81e5803a 	cmpltu	r18,r16,r7
 20063e0:	1ca5c83a 	sub	r18,r3,r18
 20063e4:	e480c126 	beq	fp,r18,20066ec <__divdf3+0x76c>
 20063e8:	a00b883a 	mov	r5,r20
 20063ec:	9009883a 	mov	r4,r18
 20063f0:	d9800315 	stw	r6,12(sp)
 20063f4:	d9c00215 	stw	r7,8(sp)
 20063f8:	da400115 	stw	r9,4(sp)
 20063fc:	20075ec0 	call	20075ec <__udivsi3>
 2006400:	a00b883a 	mov	r5,r20
 2006404:	9009883a 	mov	r4,r18
 2006408:	d8800015 	stw	r2,0(sp)
 200640c:	20076500 	call	2007650 <__umodsi3>
 2006410:	d9c00217 	ldw	r7,8(sp)
 2006414:	da000017 	ldw	r8,0(sp)
 2006418:	1006943a 	slli	r3,r2,16
 200641c:	3804d43a 	srli	r2,r7,16
 2006420:	ba21383a 	mul	r16,r23,r8
 2006424:	d9800317 	ldw	r6,12(sp)
 2006428:	10c4b03a 	or	r2,r2,r3
 200642c:	da400117 	ldw	r9,4(sp)
 2006430:	1400062e 	bgeu	r2,r16,200644c <__divdf3+0x4cc>
 2006434:	1705883a 	add	r2,r2,fp
 2006438:	40ffffc4 	addi	r3,r8,-1
 200643c:	1700ad36 	bltu	r2,fp,20066f4 <__divdf3+0x774>
 2006440:	1400ac2e 	bgeu	r2,r16,20066f4 <__divdf3+0x774>
 2006444:	423fff84 	addi	r8,r8,-2
 2006448:	1705883a 	add	r2,r2,fp
 200644c:	1421c83a 	sub	r16,r2,r16
 2006450:	a00b883a 	mov	r5,r20
 2006454:	8009883a 	mov	r4,r16
 2006458:	d9800315 	stw	r6,12(sp)
 200645c:	d9c00215 	stw	r7,8(sp)
 2006460:	da000015 	stw	r8,0(sp)
 2006464:	da400115 	stw	r9,4(sp)
 2006468:	20075ec0 	call	20075ec <__udivsi3>
 200646c:	8009883a 	mov	r4,r16
 2006470:	a00b883a 	mov	r5,r20
 2006474:	1025883a 	mov	r18,r2
 2006478:	20076500 	call	2007650 <__umodsi3>
 200647c:	d9c00217 	ldw	r7,8(sp)
 2006480:	1004943a 	slli	r2,r2,16
 2006484:	bcaf383a 	mul	r23,r23,r18
 2006488:	393fffcc 	andi	r4,r7,65535
 200648c:	2088b03a 	or	r4,r4,r2
 2006490:	d9800317 	ldw	r6,12(sp)
 2006494:	da000017 	ldw	r8,0(sp)
 2006498:	da400117 	ldw	r9,4(sp)
 200649c:	25c0062e 	bgeu	r4,r23,20064b8 <__divdf3+0x538>
 20064a0:	2709883a 	add	r4,r4,fp
 20064a4:	90bfffc4 	addi	r2,r18,-1
 20064a8:	27009436 	bltu	r4,fp,20066fc <__divdf3+0x77c>
 20064ac:	25c0932e 	bgeu	r4,r23,20066fc <__divdf3+0x77c>
 20064b0:	94bfff84 	addi	r18,r18,-2
 20064b4:	2709883a 	add	r4,r4,fp
 20064b8:	4004943a 	slli	r2,r8,16
 20064bc:	25efc83a 	sub	r23,r4,r23
 20064c0:	1490b03a 	or	r8,r2,r18
 20064c4:	4008d43a 	srli	r4,r8,16
 20064c8:	40ffffcc 	andi	r3,r8,65535
 20064cc:	30c5383a 	mul	r2,r6,r3
 20064d0:	1a47383a 	mul	r3,r3,r9
 20064d4:	310d383a 	mul	r6,r6,r4
 20064d8:	100ad43a 	srli	r5,r2,16
 20064dc:	4913383a 	mul	r9,r9,r4
 20064e0:	1987883a 	add	r3,r3,r6
 20064e4:	28c7883a 	add	r3,r5,r3
 20064e8:	1980022e 	bgeu	r3,r6,20064f4 <__divdf3+0x574>
 20064ec:	01000074 	movhi	r4,1
 20064f0:	4913883a 	add	r9,r9,r4
 20064f4:	1808d43a 	srli	r4,r3,16
 20064f8:	1806943a 	slli	r3,r3,16
 20064fc:	10bfffcc 	andi	r2,r2,65535
 2006500:	2253883a 	add	r9,r4,r9
 2006504:	1887883a 	add	r3,r3,r2
 2006508:	ba403836 	bltu	r23,r9,20065ec <__divdf3+0x66c>
 200650c:	ba403626 	beq	r23,r9,20065e8 <__divdf3+0x668>
 2006510:	42000054 	ori	r8,r8,1
 2006514:	a880ffc4 	addi	r2,r21,1023
 2006518:	00bf570e 	bge	zero,r2,2006278 <__divdf3+0x2f8>
 200651c:	40c001cc 	andi	r3,r8,7
 2006520:	18000726 	beq	r3,zero,2006540 <__divdf3+0x5c0>
 2006524:	40c003cc 	andi	r3,r8,15
 2006528:	01000104 	movi	r4,4
 200652c:	19000426 	beq	r3,r4,2006540 <__divdf3+0x5c0>
 2006530:	4107883a 	add	r3,r8,r4
 2006534:	1a11803a 	cmpltu	r8,r3,r8
 2006538:	8a23883a 	add	r17,r17,r8
 200653c:	1811883a 	mov	r8,r3
 2006540:	88c0402c 	andhi	r3,r17,256
 2006544:	18000426 	beq	r3,zero,2006558 <__divdf3+0x5d8>
 2006548:	00ffc034 	movhi	r3,65280
 200654c:	18ffffc4 	addi	r3,r3,-1
 2006550:	a8810004 	addi	r2,r21,1024
 2006554:	88e2703a 	and	r17,r17,r3
 2006558:	00c1ff84 	movi	r3,2046
 200655c:	18bee316 	blt	r3,r2,20060ec <__divdf3+0x16c>
 2006560:	8824977a 	slli	r18,r17,29
 2006564:	4010d0fa 	srli	r8,r8,3
 2006568:	8822927a 	slli	r17,r17,9
 200656c:	1081ffcc 	andi	r2,r2,2047
 2006570:	9224b03a 	or	r18,r18,r8
 2006574:	880ad33a 	srli	r5,r17,12
 2006578:	98c0004c 	andi	r3,r19,1
 200657c:	003edf06 	br	20060fc <__divdf3+0x17c>
 2006580:	8080022c 	andhi	r2,r16,8
 2006584:	10001226 	beq	r2,zero,20065d0 <__divdf3+0x650>
 2006588:	8880022c 	andhi	r2,r17,8
 200658c:	1000101e 	bne	r2,zero,20065d0 <__divdf3+0x650>
 2006590:	00800434 	movhi	r2,16
 2006594:	89400234 	orhi	r5,r17,8
 2006598:	10bfffc4 	addi	r2,r2,-1
 200659c:	b007883a 	mov	r3,r22
 20065a0:	288a703a 	and	r5,r5,r2
 20065a4:	4025883a 	mov	r18,r8
 20065a8:	003f3106 	br	2006270 <__divdf3+0x2f0>
 20065ac:	008000c4 	movi	r2,3
 20065b0:	3880a626 	beq	r7,r2,200684c <__divdf3+0x8cc>
 20065b4:	00800044 	movi	r2,1
 20065b8:	3880521e 	bne	r7,r2,2006704 <__divdf3+0x784>
 20065bc:	b807883a 	mov	r3,r23
 20065c0:	0005883a 	mov	r2,zero
 20065c4:	000b883a 	mov	r5,zero
 20065c8:	0025883a 	mov	r18,zero
 20065cc:	003ecb06 	br	20060fc <__divdf3+0x17c>
 20065d0:	00800434 	movhi	r2,16
 20065d4:	81400234 	orhi	r5,r16,8
 20065d8:	10bfffc4 	addi	r2,r2,-1
 20065dc:	a007883a 	mov	r3,r20
 20065e0:	288a703a 	and	r5,r5,r2
 20065e4:	003f2206 	br	2006270 <__divdf3+0x2f0>
 20065e8:	183fca26 	beq	r3,zero,2006514 <__divdf3+0x594>
 20065ec:	e5ef883a 	add	r23,fp,r23
 20065f0:	40bfffc4 	addi	r2,r8,-1
 20065f4:	bf00392e 	bgeu	r23,fp,20066dc <__divdf3+0x75c>
 20065f8:	1011883a 	mov	r8,r2
 20065fc:	ba7fc41e 	bne	r23,r9,2006510 <__divdf3+0x590>
 2006600:	b0ffc31e 	bne	r22,r3,2006510 <__divdf3+0x590>
 2006604:	003fc306 	br	2006514 <__divdf3+0x594>
 2006608:	143ff604 	addi	r16,r2,-40
 200660c:	9c20983a 	sll	r16,r19,r16
 2006610:	0025883a 	mov	r18,zero
 2006614:	003ee206 	br	20061a0 <__divdf3+0x220>
 2006618:	d9800315 	stw	r6,12(sp)
 200661c:	d9c00215 	stw	r7,8(sp)
 2006620:	20074900 	call	2007490 <__clzsi2>
 2006624:	10800804 	addi	r2,r2,32
 2006628:	d9c00217 	ldw	r7,8(sp)
 200662c:	d9800317 	ldw	r6,12(sp)
 2006630:	003ed106 	br	2006178 <__divdf3+0x1f8>
 2006634:	147ff604 	addi	r17,r2,-40
 2006638:	3462983a 	sll	r17,r6,r17
 200663c:	0011883a 	mov	r8,zero
 2006640:	003ef506 	br	2006218 <__divdf3+0x298>
 2006644:	3009883a 	mov	r4,r6
 2006648:	d9800315 	stw	r6,12(sp)
 200664c:	da400115 	stw	r9,4(sp)
 2006650:	20074900 	call	2007490 <__clzsi2>
 2006654:	10800804 	addi	r2,r2,32
 2006658:	da400117 	ldw	r9,4(sp)
 200665c:	d9800317 	ldw	r6,12(sp)
 2006660:	003ee306 	br	20061f0 <__divdf3+0x270>
 2006664:	85a1883a 	add	r16,r16,r22
 2006668:	8585803a 	cmpltu	r2,r16,r22
 200666c:	1705883a 	add	r2,r2,fp
 2006670:	14a5883a 	add	r18,r2,r18
 2006674:	88bfffc4 	addi	r2,r17,-1
 2006678:	e4800c2e 	bgeu	fp,r18,20066ac <__divdf3+0x72c>
 200667c:	90c03e36 	bltu	r18,r3,2006778 <__divdf3+0x7f8>
 2006680:	1c806926 	beq	r3,r18,2006828 <__divdf3+0x8a8>
 2006684:	90c7c83a 	sub	r3,r18,r3
 2006688:	1023883a 	mov	r17,r2
 200668c:	003f5206 	br	20063d8 <__divdf3+0x458>
 2006690:	923f0436 	bltu	r18,r8,20062a4 <__divdf3+0x324>
 2006694:	800897fa 	slli	r4,r16,31
 2006698:	9004d07a 	srli	r2,r18,1
 200669c:	8006d07a 	srli	r3,r16,1
 20066a0:	902097fa 	slli	r16,r18,31
 20066a4:	20a4b03a 	or	r18,r4,r2
 20066a8:	003f0106 	br	20062b0 <__divdf3+0x330>
 20066ac:	e4bff51e 	bne	fp,r18,2006684 <__divdf3+0x704>
 20066b0:	85bff22e 	bgeu	r16,r22,200667c <__divdf3+0x6fc>
 20066b4:	e0c7c83a 	sub	r3,fp,r3
 20066b8:	1023883a 	mov	r17,r2
 20066bc:	003f4606 	br	20063d8 <__divdf3+0x458>
 20066c0:	100f883a 	mov	r7,r2
 20066c4:	003f2b06 	br	2006374 <__divdf3+0x3f4>
 20066c8:	180d883a 	mov	r6,r3
 20066cc:	003f1306 	br	200631c <__divdf3+0x39c>
 20066d0:	813fe436 	bltu	r16,r4,2006664 <__divdf3+0x6e4>
 20066d4:	0007883a 	mov	r3,zero
 20066d8:	003f3f06 	br	20063d8 <__divdf3+0x458>
 20066dc:	ba402c36 	bltu	r23,r9,2006790 <__divdf3+0x810>
 20066e0:	4dc05426 	beq	r9,r23,2006834 <__divdf3+0x8b4>
 20066e4:	1011883a 	mov	r8,r2
 20066e8:	003f8906 	br	2006510 <__divdf3+0x590>
 20066ec:	023fffc4 	movi	r8,-1
 20066f0:	003f8806 	br	2006514 <__divdf3+0x594>
 20066f4:	1811883a 	mov	r8,r3
 20066f8:	003f5406 	br	200644c <__divdf3+0x4cc>
 20066fc:	1025883a 	mov	r18,r2
 2006700:	003f6d06 	br	20064b8 <__divdf3+0x538>
 2006704:	b827883a 	mov	r19,r23
 2006708:	003f8206 	br	2006514 <__divdf3+0x594>
 200670c:	010007c4 	movi	r4,31
 2006710:	20c02616 	blt	r4,r3,20067ac <__divdf3+0x82c>
 2006714:	00800804 	movi	r2,32
 2006718:	10c5c83a 	sub	r2,r2,r3
 200671c:	888a983a 	sll	r5,r17,r2
 2006720:	40c8d83a 	srl	r4,r8,r3
 2006724:	4084983a 	sll	r2,r8,r2
 2006728:	88e2d83a 	srl	r17,r17,r3
 200672c:	2906b03a 	or	r3,r5,r4
 2006730:	1004c03a 	cmpne	r2,r2,zero
 2006734:	1886b03a 	or	r3,r3,r2
 2006738:	188001cc 	andi	r2,r3,7
 200673c:	10000726 	beq	r2,zero,200675c <__divdf3+0x7dc>
 2006740:	188003cc 	andi	r2,r3,15
 2006744:	01000104 	movi	r4,4
 2006748:	11000426 	beq	r2,r4,200675c <__divdf3+0x7dc>
 200674c:	1805883a 	mov	r2,r3
 2006750:	10c00104 	addi	r3,r2,4
 2006754:	1885803a 	cmpltu	r2,r3,r2
 2006758:	88a3883a 	add	r17,r17,r2
 200675c:	8880202c 	andhi	r2,r17,128
 2006760:	10002726 	beq	r2,zero,2006800 <__divdf3+0x880>
 2006764:	98c0004c 	andi	r3,r19,1
 2006768:	00800044 	movi	r2,1
 200676c:	000b883a 	mov	r5,zero
 2006770:	0025883a 	mov	r18,zero
 2006774:	003e6106 	br	20060fc <__divdf3+0x17c>
 2006778:	85a1883a 	add	r16,r16,r22
 200677c:	8585803a 	cmpltu	r2,r16,r22
 2006780:	1705883a 	add	r2,r2,fp
 2006784:	14a5883a 	add	r18,r2,r18
 2006788:	8c7fff84 	addi	r17,r17,-2
 200678c:	003f1106 	br	20063d4 <__divdf3+0x454>
 2006790:	b589883a 	add	r4,r22,r22
 2006794:	25ad803a 	cmpltu	r22,r4,r22
 2006798:	b739883a 	add	fp,r22,fp
 200679c:	40bfff84 	addi	r2,r8,-2
 20067a0:	bf2f883a 	add	r23,r23,fp
 20067a4:	202d883a 	mov	r22,r4
 20067a8:	003f9306 	br	20065f8 <__divdf3+0x678>
 20067ac:	013ff844 	movi	r4,-31
 20067b0:	2085c83a 	sub	r2,r4,r2
 20067b4:	8888d83a 	srl	r4,r17,r2
 20067b8:	00800804 	movi	r2,32
 20067bc:	18802126 	beq	r3,r2,2006844 <__divdf3+0x8c4>
 20067c0:	00801004 	movi	r2,64
 20067c4:	10c5c83a 	sub	r2,r2,r3
 20067c8:	8884983a 	sll	r2,r17,r2
 20067cc:	1204b03a 	or	r2,r2,r8
 20067d0:	1004c03a 	cmpne	r2,r2,zero
 20067d4:	2084b03a 	or	r2,r4,r2
 20067d8:	144001cc 	andi	r17,r2,7
 20067dc:	88000d1e 	bne	r17,zero,2006814 <__divdf3+0x894>
 20067e0:	000b883a 	mov	r5,zero
 20067e4:	1024d0fa 	srli	r18,r2,3
 20067e8:	98c0004c 	andi	r3,r19,1
 20067ec:	0005883a 	mov	r2,zero
 20067f0:	9464b03a 	or	r18,r18,r17
 20067f4:	003e4106 	br	20060fc <__divdf3+0x17c>
 20067f8:	1007883a 	mov	r3,r2
 20067fc:	0023883a 	mov	r17,zero
 2006800:	880a927a 	slli	r5,r17,9
 2006804:	1805883a 	mov	r2,r3
 2006808:	8822977a 	slli	r17,r17,29
 200680c:	280ad33a 	srli	r5,r5,12
 2006810:	003ff406 	br	20067e4 <__divdf3+0x864>
 2006814:	10c003cc 	andi	r3,r2,15
 2006818:	01000104 	movi	r4,4
 200681c:	193ff626 	beq	r3,r4,20067f8 <__divdf3+0x878>
 2006820:	0023883a 	mov	r17,zero
 2006824:	003fca06 	br	2006750 <__divdf3+0x7d0>
 2006828:	813fd336 	bltu	r16,r4,2006778 <__divdf3+0x7f8>
 200682c:	1023883a 	mov	r17,r2
 2006830:	003fa806 	br	20066d4 <__divdf3+0x754>
 2006834:	b0ffd636 	bltu	r22,r3,2006790 <__divdf3+0x810>
 2006838:	1011883a 	mov	r8,r2
 200683c:	b0ff341e 	bne	r22,r3,2006510 <__divdf3+0x590>
 2006840:	003f3406 	br	2006514 <__divdf3+0x594>
 2006844:	0005883a 	mov	r2,zero
 2006848:	003fe006 	br	20067cc <__divdf3+0x84c>
 200684c:	00800434 	movhi	r2,16
 2006850:	89400234 	orhi	r5,r17,8
 2006854:	10bfffc4 	addi	r2,r2,-1
 2006858:	b807883a 	mov	r3,r23
 200685c:	288a703a 	and	r5,r5,r2
 2006860:	4025883a 	mov	r18,r8
 2006864:	003e8206 	br	2006270 <__divdf3+0x2f0>

02006868 <__eqdf2>:
 2006868:	2804d53a 	srli	r2,r5,20
 200686c:	3806d53a 	srli	r3,r7,20
 2006870:	02000434 	movhi	r8,16
 2006874:	423fffc4 	addi	r8,r8,-1
 2006878:	1081ffcc 	andi	r2,r2,2047
 200687c:	0281ffc4 	movi	r10,2047
 2006880:	2a12703a 	and	r9,r5,r8
 2006884:	18c1ffcc 	andi	r3,r3,2047
 2006888:	3a10703a 	and	r8,r7,r8
 200688c:	280ad7fa 	srli	r5,r5,31
 2006890:	380ed7fa 	srli	r7,r7,31
 2006894:	12801026 	beq	r2,r10,20068d8 <__eqdf2+0x70>
 2006898:	0281ffc4 	movi	r10,2047
 200689c:	1a800a26 	beq	r3,r10,20068c8 <__eqdf2+0x60>
 20068a0:	10c00226 	beq	r2,r3,20068ac <__eqdf2+0x44>
 20068a4:	00800044 	movi	r2,1
 20068a8:	f800283a 	ret
 20068ac:	4a3ffd1e 	bne	r9,r8,20068a4 <__eqdf2+0x3c>
 20068b0:	21bffc1e 	bne	r4,r6,20068a4 <__eqdf2+0x3c>
 20068b4:	29c00c26 	beq	r5,r7,20068e8 <__eqdf2+0x80>
 20068b8:	103ffa1e 	bne	r2,zero,20068a4 <__eqdf2+0x3c>
 20068bc:	2244b03a 	or	r2,r4,r9
 20068c0:	1004c03a 	cmpne	r2,r2,zero
 20068c4:	f800283a 	ret
 20068c8:	3214b03a 	or	r10,r6,r8
 20068cc:	503ff426 	beq	r10,zero,20068a0 <__eqdf2+0x38>
 20068d0:	00800044 	movi	r2,1
 20068d4:	f800283a 	ret
 20068d8:	2254b03a 	or	r10,r4,r9
 20068dc:	503fee26 	beq	r10,zero,2006898 <__eqdf2+0x30>
 20068e0:	00800044 	movi	r2,1
 20068e4:	f800283a 	ret
 20068e8:	0005883a 	mov	r2,zero
 20068ec:	f800283a 	ret

020068f0 <__gedf2>:
 20068f0:	2804d53a 	srli	r2,r5,20
 20068f4:	3806d53a 	srli	r3,r7,20
 20068f8:	02000434 	movhi	r8,16
 20068fc:	423fffc4 	addi	r8,r8,-1
 2006900:	1081ffcc 	andi	r2,r2,2047
 2006904:	0241ffc4 	movi	r9,2047
 2006908:	2a14703a 	and	r10,r5,r8
 200690c:	18c1ffcc 	andi	r3,r3,2047
 2006910:	3a10703a 	and	r8,r7,r8
 2006914:	280ad7fa 	srli	r5,r5,31
 2006918:	380ed7fa 	srli	r7,r7,31
 200691c:	12401d26 	beq	r2,r9,2006994 <__gedf2+0xa4>
 2006920:	0241ffc4 	movi	r9,2047
 2006924:	1a401226 	beq	r3,r9,2006970 <__gedf2+0x80>
 2006928:	1000081e 	bne	r2,zero,200694c <__gedf2+0x5c>
 200692c:	2296b03a 	or	r11,r4,r10
 2006930:	5813003a 	cmpeq	r9,r11,zero
 2006934:	1800091e 	bne	r3,zero,200695c <__gedf2+0x6c>
 2006938:	3218b03a 	or	r12,r6,r8
 200693c:	6000071e 	bne	r12,zero,200695c <__gedf2+0x6c>
 2006940:	0005883a 	mov	r2,zero
 2006944:	5800101e 	bne	r11,zero,2006988 <__gedf2+0x98>
 2006948:	f800283a 	ret
 200694c:	18000c1e 	bne	r3,zero,2006980 <__gedf2+0x90>
 2006950:	3212b03a 	or	r9,r6,r8
 2006954:	48000c26 	beq	r9,zero,2006988 <__gedf2+0x98>
 2006958:	0013883a 	mov	r9,zero
 200695c:	39c03fcc 	andi	r7,r7,255
 2006960:	48000826 	beq	r9,zero,2006984 <__gedf2+0x94>
 2006964:	38000926 	beq	r7,zero,200698c <__gedf2+0x9c>
 2006968:	00800044 	movi	r2,1
 200696c:	f800283a 	ret
 2006970:	3212b03a 	or	r9,r6,r8
 2006974:	483fec26 	beq	r9,zero,2006928 <__gedf2+0x38>
 2006978:	00bfff84 	movi	r2,-2
 200697c:	f800283a 	ret
 2006980:	39c03fcc 	andi	r7,r7,255
 2006984:	29c00626 	beq	r5,r7,20069a0 <__gedf2+0xb0>
 2006988:	283ff726 	beq	r5,zero,2006968 <__gedf2+0x78>
 200698c:	00bfffc4 	movi	r2,-1
 2006990:	f800283a 	ret
 2006994:	2292b03a 	or	r9,r4,r10
 2006998:	483fe126 	beq	r9,zero,2006920 <__gedf2+0x30>
 200699c:	003ff606 	br	2006978 <__gedf2+0x88>
 20069a0:	18bff916 	blt	r3,r2,2006988 <__gedf2+0x98>
 20069a4:	10c00316 	blt	r2,r3,20069b4 <__gedf2+0xc4>
 20069a8:	42bff736 	bltu	r8,r10,2006988 <__gedf2+0x98>
 20069ac:	52000326 	beq	r10,r8,20069bc <__gedf2+0xcc>
 20069b0:	5200042e 	bgeu	r10,r8,20069c4 <__gedf2+0xd4>
 20069b4:	283fec1e 	bne	r5,zero,2006968 <__gedf2+0x78>
 20069b8:	003ff406 	br	200698c <__gedf2+0x9c>
 20069bc:	313ff236 	bltu	r6,r4,2006988 <__gedf2+0x98>
 20069c0:	21bffc36 	bltu	r4,r6,20069b4 <__gedf2+0xc4>
 20069c4:	0005883a 	mov	r2,zero
 20069c8:	f800283a 	ret

020069cc <__ledf2>:
 20069cc:	2804d53a 	srli	r2,r5,20
 20069d0:	3810d53a 	srli	r8,r7,20
 20069d4:	00c00434 	movhi	r3,16
 20069d8:	18ffffc4 	addi	r3,r3,-1
 20069dc:	1081ffcc 	andi	r2,r2,2047
 20069e0:	0241ffc4 	movi	r9,2047
 20069e4:	28d4703a 	and	r10,r5,r3
 20069e8:	4201ffcc 	andi	r8,r8,2047
 20069ec:	38c6703a 	and	r3,r7,r3
 20069f0:	280ad7fa 	srli	r5,r5,31
 20069f4:	380ed7fa 	srli	r7,r7,31
 20069f8:	12401f26 	beq	r2,r9,2006a78 <__ledf2+0xac>
 20069fc:	0241ffc4 	movi	r9,2047
 2006a00:	42401426 	beq	r8,r9,2006a54 <__ledf2+0x88>
 2006a04:	1000091e 	bne	r2,zero,2006a2c <__ledf2+0x60>
 2006a08:	2296b03a 	or	r11,r4,r10
 2006a0c:	5813003a 	cmpeq	r9,r11,zero
 2006a10:	29403fcc 	andi	r5,r5,255
 2006a14:	40000a1e 	bne	r8,zero,2006a40 <__ledf2+0x74>
 2006a18:	30d8b03a 	or	r12,r6,r3
 2006a1c:	6000081e 	bne	r12,zero,2006a40 <__ledf2+0x74>
 2006a20:	0005883a 	mov	r2,zero
 2006a24:	5800111e 	bne	r11,zero,2006a6c <__ledf2+0xa0>
 2006a28:	f800283a 	ret
 2006a2c:	29403fcc 	andi	r5,r5,255
 2006a30:	40000c1e 	bne	r8,zero,2006a64 <__ledf2+0x98>
 2006a34:	30d2b03a 	or	r9,r6,r3
 2006a38:	48000c26 	beq	r9,zero,2006a6c <__ledf2+0xa0>
 2006a3c:	0013883a 	mov	r9,zero
 2006a40:	39c03fcc 	andi	r7,r7,255
 2006a44:	48000826 	beq	r9,zero,2006a68 <__ledf2+0x9c>
 2006a48:	38001126 	beq	r7,zero,2006a90 <__ledf2+0xc4>
 2006a4c:	00800044 	movi	r2,1
 2006a50:	f800283a 	ret
 2006a54:	30d2b03a 	or	r9,r6,r3
 2006a58:	483fea26 	beq	r9,zero,2006a04 <__ledf2+0x38>
 2006a5c:	00800084 	movi	r2,2
 2006a60:	f800283a 	ret
 2006a64:	39c03fcc 	andi	r7,r7,255
 2006a68:	39400726 	beq	r7,r5,2006a88 <__ledf2+0xbc>
 2006a6c:	2800081e 	bne	r5,zero,2006a90 <__ledf2+0xc4>
 2006a70:	00800044 	movi	r2,1
 2006a74:	f800283a 	ret
 2006a78:	2292b03a 	or	r9,r4,r10
 2006a7c:	483fdf26 	beq	r9,zero,20069fc <__ledf2+0x30>
 2006a80:	00800084 	movi	r2,2
 2006a84:	f800283a 	ret
 2006a88:	4080030e 	bge	r8,r2,2006a98 <__ledf2+0xcc>
 2006a8c:	383fef26 	beq	r7,zero,2006a4c <__ledf2+0x80>
 2006a90:	00bfffc4 	movi	r2,-1
 2006a94:	f800283a 	ret
 2006a98:	123feb16 	blt	r2,r8,2006a48 <__ledf2+0x7c>
 2006a9c:	1abff336 	bltu	r3,r10,2006a6c <__ledf2+0xa0>
 2006aa0:	50c00326 	beq	r10,r3,2006ab0 <__ledf2+0xe4>
 2006aa4:	50c0042e 	bgeu	r10,r3,2006ab8 <__ledf2+0xec>
 2006aa8:	283fe81e 	bne	r5,zero,2006a4c <__ledf2+0x80>
 2006aac:	003ff806 	br	2006a90 <__ledf2+0xc4>
 2006ab0:	313fee36 	bltu	r6,r4,2006a6c <__ledf2+0xa0>
 2006ab4:	21bffc36 	bltu	r4,r6,2006aa8 <__ledf2+0xdc>
 2006ab8:	0005883a 	mov	r2,zero
 2006abc:	f800283a 	ret

02006ac0 <__muldf3>:
 2006ac0:	defff304 	addi	sp,sp,-52
 2006ac4:	2804d53a 	srli	r2,r5,20
 2006ac8:	dd800915 	stw	r22,36(sp)
 2006acc:	282cd7fa 	srli	r22,r5,31
 2006ad0:	dc000315 	stw	r16,12(sp)
 2006ad4:	04000434 	movhi	r16,16
 2006ad8:	dd400815 	stw	r21,32(sp)
 2006adc:	dc800515 	stw	r18,20(sp)
 2006ae0:	843fffc4 	addi	r16,r16,-1
 2006ae4:	dfc00c15 	stw	ra,48(sp)
 2006ae8:	df000b15 	stw	fp,44(sp)
 2006aec:	ddc00a15 	stw	r23,40(sp)
 2006af0:	dd000715 	stw	r20,28(sp)
 2006af4:	dcc00615 	stw	r19,24(sp)
 2006af8:	dc400415 	stw	r17,16(sp)
 2006afc:	1481ffcc 	andi	r18,r2,2047
 2006b00:	2c20703a 	and	r16,r5,r16
 2006b04:	b02b883a 	mov	r21,r22
 2006b08:	b2403fcc 	andi	r9,r22,255
 2006b0c:	90006026 	beq	r18,zero,2006c90 <__muldf3+0x1d0>
 2006b10:	0081ffc4 	movi	r2,2047
 2006b14:	2029883a 	mov	r20,r4
 2006b18:	90803626 	beq	r18,r2,2006bf4 <__muldf3+0x134>
 2006b1c:	80800434 	orhi	r2,r16,16
 2006b20:	100490fa 	slli	r2,r2,3
 2006b24:	2020d77a 	srli	r16,r4,29
 2006b28:	202890fa 	slli	r20,r4,3
 2006b2c:	94bf0044 	addi	r18,r18,-1023
 2006b30:	80a0b03a 	or	r16,r16,r2
 2006b34:	0027883a 	mov	r19,zero
 2006b38:	0039883a 	mov	fp,zero
 2006b3c:	3804d53a 	srli	r2,r7,20
 2006b40:	382ed7fa 	srli	r23,r7,31
 2006b44:	04400434 	movhi	r17,16
 2006b48:	8c7fffc4 	addi	r17,r17,-1
 2006b4c:	1081ffcc 	andi	r2,r2,2047
 2006b50:	3011883a 	mov	r8,r6
 2006b54:	3c62703a 	and	r17,r7,r17
 2006b58:	ba803fcc 	andi	r10,r23,255
 2006b5c:	10006d26 	beq	r2,zero,2006d14 <__muldf3+0x254>
 2006b60:	00c1ffc4 	movi	r3,2047
 2006b64:	10c06526 	beq	r2,r3,2006cfc <__muldf3+0x23c>
 2006b68:	88c00434 	orhi	r3,r17,16
 2006b6c:	180690fa 	slli	r3,r3,3
 2006b70:	3022d77a 	srli	r17,r6,29
 2006b74:	301090fa 	slli	r8,r6,3
 2006b78:	10bf0044 	addi	r2,r2,-1023
 2006b7c:	88e2b03a 	or	r17,r17,r3
 2006b80:	000b883a 	mov	r5,zero
 2006b84:	9085883a 	add	r2,r18,r2
 2006b88:	2cc8b03a 	or	r4,r5,r19
 2006b8c:	00c003c4 	movi	r3,15
 2006b90:	bdacf03a 	xor	r22,r23,r22
 2006b94:	12c00044 	addi	r11,r2,1
 2006b98:	19009936 	bltu	r3,r4,2006e00 <__muldf3+0x340>
 2006b9c:	200890ba 	slli	r4,r4,2
 2006ba0:	00c08034 	movhi	r3,512
 2006ba4:	18daed04 	addi	r3,r3,27572
 2006ba8:	20c9883a 	add	r4,r4,r3
 2006bac:	20c00017 	ldw	r3,0(r4)
 2006bb0:	1800683a 	jmp	r3
 2006bb4:	02006e00 	call	2006e0 <__alt_mem_mem_Nios_PI+0x6e0>
 2006bb8:	02006c14 	movui	r8,432
 2006bbc:	02006c14 	movui	r8,432
 2006bc0:	02006c10 	cmplti	r8,zero,432
 2006bc4:	02006ddc 	xori	r8,zero,439
 2006bc8:	02006ddc 	xori	r8,zero,439
 2006bcc:	02006dc4 	movi	r8,439
 2006bd0:	02006c10 	cmplti	r8,zero,432
 2006bd4:	02006ddc 	xori	r8,zero,439
 2006bd8:	02006dc4 	movi	r8,439
 2006bdc:	02006ddc 	xori	r8,zero,439
 2006be0:	02006c10 	cmplti	r8,zero,432
 2006be4:	02006dec 	andhi	r8,zero,439
 2006be8:	02006dec 	andhi	r8,zero,439
 2006bec:	02006dec 	andhi	r8,zero,439
 2006bf0:	02007008 	cmpgei	r8,zero,448
 2006bf4:	2404b03a 	or	r2,r4,r16
 2006bf8:	10006f1e 	bne	r2,zero,2006db8 <__muldf3+0x2f8>
 2006bfc:	04c00204 	movi	r19,8
 2006c00:	0021883a 	mov	r16,zero
 2006c04:	0029883a 	mov	r20,zero
 2006c08:	07000084 	movi	fp,2
 2006c0c:	003fcb06 	br	2006b3c <__muldf3+0x7c>
 2006c10:	502d883a 	mov	r22,r10
 2006c14:	00800084 	movi	r2,2
 2006c18:	28805726 	beq	r5,r2,2006d78 <__muldf3+0x2b8>
 2006c1c:	008000c4 	movi	r2,3
 2006c20:	28816626 	beq	r5,r2,20071bc <__muldf3+0x6fc>
 2006c24:	00800044 	movi	r2,1
 2006c28:	2881411e 	bne	r5,r2,2007130 <__muldf3+0x670>
 2006c2c:	b02b883a 	mov	r21,r22
 2006c30:	0005883a 	mov	r2,zero
 2006c34:	000b883a 	mov	r5,zero
 2006c38:	0029883a 	mov	r20,zero
 2006c3c:	1004953a 	slli	r2,r2,20
 2006c40:	a8c03fcc 	andi	r3,r21,255
 2006c44:	04400434 	movhi	r17,16
 2006c48:	8c7fffc4 	addi	r17,r17,-1
 2006c4c:	180697fa 	slli	r3,r3,31
 2006c50:	2c4a703a 	and	r5,r5,r17
 2006c54:	288ab03a 	or	r5,r5,r2
 2006c58:	28c6b03a 	or	r3,r5,r3
 2006c5c:	a005883a 	mov	r2,r20
 2006c60:	dfc00c17 	ldw	ra,48(sp)
 2006c64:	df000b17 	ldw	fp,44(sp)
 2006c68:	ddc00a17 	ldw	r23,40(sp)
 2006c6c:	dd800917 	ldw	r22,36(sp)
 2006c70:	dd400817 	ldw	r21,32(sp)
 2006c74:	dd000717 	ldw	r20,28(sp)
 2006c78:	dcc00617 	ldw	r19,24(sp)
 2006c7c:	dc800517 	ldw	r18,20(sp)
 2006c80:	dc400417 	ldw	r17,16(sp)
 2006c84:	dc000317 	ldw	r16,12(sp)
 2006c88:	dec00d04 	addi	sp,sp,52
 2006c8c:	f800283a 	ret
 2006c90:	2404b03a 	or	r2,r4,r16
 2006c94:	2027883a 	mov	r19,r4
 2006c98:	10004226 	beq	r2,zero,2006da4 <__muldf3+0x2e4>
 2006c9c:	8000fc26 	beq	r16,zero,2007090 <__muldf3+0x5d0>
 2006ca0:	8009883a 	mov	r4,r16
 2006ca4:	d9800215 	stw	r6,8(sp)
 2006ca8:	d9c00015 	stw	r7,0(sp)
 2006cac:	da400115 	stw	r9,4(sp)
 2006cb0:	20074900 	call	2007490 <__clzsi2>
 2006cb4:	d9800217 	ldw	r6,8(sp)
 2006cb8:	d9c00017 	ldw	r7,0(sp)
 2006cbc:	da400117 	ldw	r9,4(sp)
 2006cc0:	113ffd44 	addi	r4,r2,-11
 2006cc4:	00c00704 	movi	r3,28
 2006cc8:	1900ed16 	blt	r3,r4,2007080 <__muldf3+0x5c0>
 2006ccc:	00c00744 	movi	r3,29
 2006cd0:	147ffe04 	addi	r17,r2,-8
 2006cd4:	1907c83a 	sub	r3,r3,r4
 2006cd8:	8460983a 	sll	r16,r16,r17
 2006cdc:	98c6d83a 	srl	r3,r19,r3
 2006ce0:	9c68983a 	sll	r20,r19,r17
 2006ce4:	1c20b03a 	or	r16,r3,r16
 2006ce8:	1080fcc4 	addi	r2,r2,1011
 2006cec:	00a5c83a 	sub	r18,zero,r2
 2006cf0:	0027883a 	mov	r19,zero
 2006cf4:	0039883a 	mov	fp,zero
 2006cf8:	003f9006 	br	2006b3c <__muldf3+0x7c>
 2006cfc:	3446b03a 	or	r3,r6,r17
 2006d00:	1800261e 	bne	r3,zero,2006d9c <__muldf3+0x2dc>
 2006d04:	0023883a 	mov	r17,zero
 2006d08:	0011883a 	mov	r8,zero
 2006d0c:	01400084 	movi	r5,2
 2006d10:	003f9c06 	br	2006b84 <__muldf3+0xc4>
 2006d14:	3446b03a 	or	r3,r6,r17
 2006d18:	18001c26 	beq	r3,zero,2006d8c <__muldf3+0x2cc>
 2006d1c:	8800ce26 	beq	r17,zero,2007058 <__muldf3+0x598>
 2006d20:	8809883a 	mov	r4,r17
 2006d24:	d9800215 	stw	r6,8(sp)
 2006d28:	da400115 	stw	r9,4(sp)
 2006d2c:	da800015 	stw	r10,0(sp)
 2006d30:	20074900 	call	2007490 <__clzsi2>
 2006d34:	d9800217 	ldw	r6,8(sp)
 2006d38:	da400117 	ldw	r9,4(sp)
 2006d3c:	da800017 	ldw	r10,0(sp)
 2006d40:	113ffd44 	addi	r4,r2,-11
 2006d44:	00c00704 	movi	r3,28
 2006d48:	1900bf16 	blt	r3,r4,2007048 <__muldf3+0x588>
 2006d4c:	00c00744 	movi	r3,29
 2006d50:	123ffe04 	addi	r8,r2,-8
 2006d54:	1907c83a 	sub	r3,r3,r4
 2006d58:	8a22983a 	sll	r17,r17,r8
 2006d5c:	30c6d83a 	srl	r3,r6,r3
 2006d60:	3210983a 	sll	r8,r6,r8
 2006d64:	1c62b03a 	or	r17,r3,r17
 2006d68:	1080fcc4 	addi	r2,r2,1011
 2006d6c:	0085c83a 	sub	r2,zero,r2
 2006d70:	000b883a 	mov	r5,zero
 2006d74:	003f8306 	br	2006b84 <__muldf3+0xc4>
 2006d78:	b02b883a 	mov	r21,r22
 2006d7c:	0081ffc4 	movi	r2,2047
 2006d80:	000b883a 	mov	r5,zero
 2006d84:	0029883a 	mov	r20,zero
 2006d88:	003fac06 	br	2006c3c <__muldf3+0x17c>
 2006d8c:	0023883a 	mov	r17,zero
 2006d90:	0011883a 	mov	r8,zero
 2006d94:	01400044 	movi	r5,1
 2006d98:	003f7a06 	br	2006b84 <__muldf3+0xc4>
 2006d9c:	014000c4 	movi	r5,3
 2006da0:	003f7806 	br	2006b84 <__muldf3+0xc4>
 2006da4:	04c00104 	movi	r19,4
 2006da8:	0021883a 	mov	r16,zero
 2006dac:	0029883a 	mov	r20,zero
 2006db0:	07000044 	movi	fp,1
 2006db4:	003f6106 	br	2006b3c <__muldf3+0x7c>
 2006db8:	04c00304 	movi	r19,12
 2006dbc:	070000c4 	movi	fp,3
 2006dc0:	003f5e06 	br	2006b3c <__muldf3+0x7c>
 2006dc4:	01400434 	movhi	r5,16
 2006dc8:	002b883a 	mov	r21,zero
 2006dcc:	297fffc4 	addi	r5,r5,-1
 2006dd0:	053fffc4 	movi	r20,-1
 2006dd4:	0081ffc4 	movi	r2,2047
 2006dd8:	003f9806 	br	2006c3c <__muldf3+0x17c>
 2006ddc:	8023883a 	mov	r17,r16
 2006de0:	a011883a 	mov	r8,r20
 2006de4:	e00b883a 	mov	r5,fp
 2006de8:	003f8a06 	br	2006c14 <__muldf3+0x154>
 2006dec:	8023883a 	mov	r17,r16
 2006df0:	a011883a 	mov	r8,r20
 2006df4:	482d883a 	mov	r22,r9
 2006df8:	e00b883a 	mov	r5,fp
 2006dfc:	003f8506 	br	2006c14 <__muldf3+0x154>
 2006e00:	a00ad43a 	srli	r5,r20,16
 2006e04:	401ad43a 	srli	r13,r8,16
 2006e08:	a53fffcc 	andi	r20,r20,65535
 2006e0c:	423fffcc 	andi	r8,r8,65535
 2006e10:	4519383a 	mul	r12,r8,r20
 2006e14:	4147383a 	mul	r3,r8,r5
 2006e18:	6d09383a 	mul	r4,r13,r20
 2006e1c:	600cd43a 	srli	r6,r12,16
 2006e20:	2b5d383a 	mul	r14,r5,r13
 2006e24:	20c9883a 	add	r4,r4,r3
 2006e28:	310d883a 	add	r6,r6,r4
 2006e2c:	30c0022e 	bgeu	r6,r3,2006e38 <__muldf3+0x378>
 2006e30:	00c00074 	movhi	r3,1
 2006e34:	70dd883a 	add	r14,r14,r3
 2006e38:	8826d43a 	srli	r19,r17,16
 2006e3c:	8bffffcc 	andi	r15,r17,65535
 2006e40:	7d23383a 	mul	r17,r15,r20
 2006e44:	7949383a 	mul	r4,r15,r5
 2006e48:	9d29383a 	mul	r20,r19,r20
 2006e4c:	8814d43a 	srli	r10,r17,16
 2006e50:	3012943a 	slli	r9,r6,16
 2006e54:	a129883a 	add	r20,r20,r4
 2006e58:	633fffcc 	andi	r12,r12,65535
 2006e5c:	5515883a 	add	r10,r10,r20
 2006e60:	3006d43a 	srli	r3,r6,16
 2006e64:	4b13883a 	add	r9,r9,r12
 2006e68:	2ccb383a 	mul	r5,r5,r19
 2006e6c:	5100022e 	bgeu	r10,r4,2006e78 <__muldf3+0x3b8>
 2006e70:	01000074 	movhi	r4,1
 2006e74:	290b883a 	add	r5,r5,r4
 2006e78:	802ad43a 	srli	r21,r16,16
 2006e7c:	843fffcc 	andi	r16,r16,65535
 2006e80:	440d383a 	mul	r6,r8,r16
 2006e84:	4565383a 	mul	r18,r8,r21
 2006e88:	8349383a 	mul	r4,r16,r13
 2006e8c:	500e943a 	slli	r7,r10,16
 2006e90:	3010d43a 	srli	r8,r6,16
 2006e94:	5028d43a 	srli	r20,r10,16
 2006e98:	2489883a 	add	r4,r4,r18
 2006e9c:	8abfffcc 	andi	r10,r17,65535
 2006ea0:	3a95883a 	add	r10,r7,r10
 2006ea4:	4119883a 	add	r12,r8,r4
 2006ea8:	a169883a 	add	r20,r20,r5
 2006eac:	1a87883a 	add	r3,r3,r10
 2006eb0:	6d5b383a 	mul	r13,r13,r21
 2006eb4:	6480022e 	bgeu	r12,r18,2006ec0 <__muldf3+0x400>
 2006eb8:	01000074 	movhi	r4,1
 2006ebc:	691b883a 	add	r13,r13,r4
 2006ec0:	7c25383a 	mul	r18,r15,r16
 2006ec4:	7d4b383a 	mul	r5,r15,r21
 2006ec8:	84cf383a 	mul	r7,r16,r19
 2006ecc:	901ed43a 	srli	r15,r18,16
 2006ed0:	6008d43a 	srli	r4,r12,16
 2006ed4:	6010943a 	slli	r8,r12,16
 2006ed8:	394f883a 	add	r7,r7,r5
 2006edc:	333fffcc 	andi	r12,r6,65535
 2006ee0:	79df883a 	add	r15,r15,r7
 2006ee4:	235b883a 	add	r13,r4,r13
 2006ee8:	9d63383a 	mul	r17,r19,r21
 2006eec:	4309883a 	add	r4,r8,r12
 2006ef0:	7940022e 	bgeu	r15,r5,2006efc <__muldf3+0x43c>
 2006ef4:	01400074 	movhi	r5,1
 2006ef8:	8963883a 	add	r17,r17,r5
 2006efc:	780a943a 	slli	r5,r15,16
 2006f00:	91bfffcc 	andi	r6,r18,65535
 2006f04:	70c7883a 	add	r3,r14,r3
 2006f08:	298d883a 	add	r6,r5,r6
 2006f0c:	1a8f803a 	cmpltu	r7,r3,r10
 2006f10:	350b883a 	add	r5,r6,r20
 2006f14:	20c7883a 	add	r3,r4,r3
 2006f18:	3955883a 	add	r10,r7,r5
 2006f1c:	1909803a 	cmpltu	r4,r3,r4
 2006f20:	6a91883a 	add	r8,r13,r10
 2006f24:	780cd43a 	srli	r6,r15,16
 2006f28:	2219883a 	add	r12,r4,r8
 2006f2c:	2d0b803a 	cmpltu	r5,r5,r20
 2006f30:	51cf803a 	cmpltu	r7,r10,r7
 2006f34:	29ceb03a 	or	r7,r5,r7
 2006f38:	4351803a 	cmpltu	r8,r8,r13
 2006f3c:	610b803a 	cmpltu	r5,r12,r4
 2006f40:	4148b03a 	or	r4,r8,r5
 2006f44:	398f883a 	add	r7,r7,r6
 2006f48:	3909883a 	add	r4,r7,r4
 2006f4c:	1810927a 	slli	r8,r3,9
 2006f50:	2449883a 	add	r4,r4,r17
 2006f54:	2008927a 	slli	r4,r4,9
 2006f58:	6022d5fa 	srli	r17,r12,23
 2006f5c:	1806d5fa 	srli	r3,r3,23
 2006f60:	4252b03a 	or	r9,r8,r9
 2006f64:	600a927a 	slli	r5,r12,9
 2006f68:	4810c03a 	cmpne	r8,r9,zero
 2006f6c:	2462b03a 	or	r17,r4,r17
 2006f70:	40c6b03a 	or	r3,r8,r3
 2006f74:	8900402c 	andhi	r4,r17,256
 2006f78:	1950b03a 	or	r8,r3,r5
 2006f7c:	20000726 	beq	r4,zero,2006f9c <__muldf3+0x4dc>
 2006f80:	4006d07a 	srli	r3,r8,1
 2006f84:	880497fa 	slli	r2,r17,31
 2006f88:	4200004c 	andi	r8,r8,1
 2006f8c:	8822d07a 	srli	r17,r17,1
 2006f90:	1a10b03a 	or	r8,r3,r8
 2006f94:	1210b03a 	or	r8,r2,r8
 2006f98:	5805883a 	mov	r2,r11
 2006f9c:	1140ffc4 	addi	r5,r2,1023
 2006fa0:	0140440e 	bge	zero,r5,20070b4 <__muldf3+0x5f4>
 2006fa4:	40c001cc 	andi	r3,r8,7
 2006fa8:	18000726 	beq	r3,zero,2006fc8 <__muldf3+0x508>
 2006fac:	40c003cc 	andi	r3,r8,15
 2006fb0:	01000104 	movi	r4,4
 2006fb4:	19000426 	beq	r3,r4,2006fc8 <__muldf3+0x508>
 2006fb8:	4107883a 	add	r3,r8,r4
 2006fbc:	1a11803a 	cmpltu	r8,r3,r8
 2006fc0:	8a23883a 	add	r17,r17,r8
 2006fc4:	1811883a 	mov	r8,r3
 2006fc8:	88c0402c 	andhi	r3,r17,256
 2006fcc:	18000426 	beq	r3,zero,2006fe0 <__muldf3+0x520>
 2006fd0:	11410004 	addi	r5,r2,1024
 2006fd4:	00bfc034 	movhi	r2,65280
 2006fd8:	10bfffc4 	addi	r2,r2,-1
 2006fdc:	88a2703a 	and	r17,r17,r2
 2006fe0:	0081ff84 	movi	r2,2046
 2006fe4:	117f6416 	blt	r2,r5,2006d78 <__muldf3+0x2b8>
 2006fe8:	8828977a 	slli	r20,r17,29
 2006fec:	4010d0fa 	srli	r8,r8,3
 2006ff0:	8822927a 	slli	r17,r17,9
 2006ff4:	2881ffcc 	andi	r2,r5,2047
 2006ff8:	a228b03a 	or	r20,r20,r8
 2006ffc:	880ad33a 	srli	r5,r17,12
 2007000:	b02b883a 	mov	r21,r22
 2007004:	003f0d06 	br	2006c3c <__muldf3+0x17c>
 2007008:	8080022c 	andhi	r2,r16,8
 200700c:	10000926 	beq	r2,zero,2007034 <__muldf3+0x574>
 2007010:	8880022c 	andhi	r2,r17,8
 2007014:	1000071e 	bne	r2,zero,2007034 <__muldf3+0x574>
 2007018:	00800434 	movhi	r2,16
 200701c:	89400234 	orhi	r5,r17,8
 2007020:	10bfffc4 	addi	r2,r2,-1
 2007024:	b82b883a 	mov	r21,r23
 2007028:	288a703a 	and	r5,r5,r2
 200702c:	4029883a 	mov	r20,r8
 2007030:	003f6806 	br	2006dd4 <__muldf3+0x314>
 2007034:	00800434 	movhi	r2,16
 2007038:	81400234 	orhi	r5,r16,8
 200703c:	10bfffc4 	addi	r2,r2,-1
 2007040:	288a703a 	and	r5,r5,r2
 2007044:	003f6306 	br	2006dd4 <__muldf3+0x314>
 2007048:	147ff604 	addi	r17,r2,-40
 200704c:	3462983a 	sll	r17,r6,r17
 2007050:	0011883a 	mov	r8,zero
 2007054:	003f4406 	br	2006d68 <__muldf3+0x2a8>
 2007058:	3009883a 	mov	r4,r6
 200705c:	d9800215 	stw	r6,8(sp)
 2007060:	da400115 	stw	r9,4(sp)
 2007064:	da800015 	stw	r10,0(sp)
 2007068:	20074900 	call	2007490 <__clzsi2>
 200706c:	10800804 	addi	r2,r2,32
 2007070:	da800017 	ldw	r10,0(sp)
 2007074:	da400117 	ldw	r9,4(sp)
 2007078:	d9800217 	ldw	r6,8(sp)
 200707c:	003f3006 	br	2006d40 <__muldf3+0x280>
 2007080:	143ff604 	addi	r16,r2,-40
 2007084:	9c20983a 	sll	r16,r19,r16
 2007088:	0029883a 	mov	r20,zero
 200708c:	003f1606 	br	2006ce8 <__muldf3+0x228>
 2007090:	d9800215 	stw	r6,8(sp)
 2007094:	d9c00015 	stw	r7,0(sp)
 2007098:	da400115 	stw	r9,4(sp)
 200709c:	20074900 	call	2007490 <__clzsi2>
 20070a0:	10800804 	addi	r2,r2,32
 20070a4:	da400117 	ldw	r9,4(sp)
 20070a8:	d9c00017 	ldw	r7,0(sp)
 20070ac:	d9800217 	ldw	r6,8(sp)
 20070b0:	003f0306 	br	2006cc0 <__muldf3+0x200>
 20070b4:	00c00044 	movi	r3,1
 20070b8:	1947c83a 	sub	r3,r3,r5
 20070bc:	00800e04 	movi	r2,56
 20070c0:	10feda16 	blt	r2,r3,2006c2c <__muldf3+0x16c>
 20070c4:	008007c4 	movi	r2,31
 20070c8:	10c01b16 	blt	r2,r3,2007138 <__muldf3+0x678>
 20070cc:	00800804 	movi	r2,32
 20070d0:	10c5c83a 	sub	r2,r2,r3
 20070d4:	888a983a 	sll	r5,r17,r2
 20070d8:	40c8d83a 	srl	r4,r8,r3
 20070dc:	4084983a 	sll	r2,r8,r2
 20070e0:	88e2d83a 	srl	r17,r17,r3
 20070e4:	2906b03a 	or	r3,r5,r4
 20070e8:	1004c03a 	cmpne	r2,r2,zero
 20070ec:	1886b03a 	or	r3,r3,r2
 20070f0:	188001cc 	andi	r2,r3,7
 20070f4:	10000726 	beq	r2,zero,2007114 <__muldf3+0x654>
 20070f8:	188003cc 	andi	r2,r3,15
 20070fc:	01000104 	movi	r4,4
 2007100:	11000426 	beq	r2,r4,2007114 <__muldf3+0x654>
 2007104:	1805883a 	mov	r2,r3
 2007108:	10c00104 	addi	r3,r2,4
 200710c:	1885803a 	cmpltu	r2,r3,r2
 2007110:	88a3883a 	add	r17,r17,r2
 2007114:	8880202c 	andhi	r2,r17,128
 2007118:	10001c26 	beq	r2,zero,200718c <__muldf3+0x6cc>
 200711c:	b02b883a 	mov	r21,r22
 2007120:	00800044 	movi	r2,1
 2007124:	000b883a 	mov	r5,zero
 2007128:	0029883a 	mov	r20,zero
 200712c:	003ec306 	br	2006c3c <__muldf3+0x17c>
 2007130:	5805883a 	mov	r2,r11
 2007134:	003f9906 	br	2006f9c <__muldf3+0x4dc>
 2007138:	00bff844 	movi	r2,-31
 200713c:	1145c83a 	sub	r2,r2,r5
 2007140:	8888d83a 	srl	r4,r17,r2
 2007144:	00800804 	movi	r2,32
 2007148:	18801a26 	beq	r3,r2,20071b4 <__muldf3+0x6f4>
 200714c:	00801004 	movi	r2,64
 2007150:	10c5c83a 	sub	r2,r2,r3
 2007154:	8884983a 	sll	r2,r17,r2
 2007158:	1204b03a 	or	r2,r2,r8
 200715c:	1004c03a 	cmpne	r2,r2,zero
 2007160:	2084b03a 	or	r2,r4,r2
 2007164:	144001cc 	andi	r17,r2,7
 2007168:	88000d1e 	bne	r17,zero,20071a0 <__muldf3+0x6e0>
 200716c:	000b883a 	mov	r5,zero
 2007170:	1028d0fa 	srli	r20,r2,3
 2007174:	b02b883a 	mov	r21,r22
 2007178:	0005883a 	mov	r2,zero
 200717c:	a468b03a 	or	r20,r20,r17
 2007180:	003eae06 	br	2006c3c <__muldf3+0x17c>
 2007184:	1007883a 	mov	r3,r2
 2007188:	0023883a 	mov	r17,zero
 200718c:	880a927a 	slli	r5,r17,9
 2007190:	1805883a 	mov	r2,r3
 2007194:	8822977a 	slli	r17,r17,29
 2007198:	280ad33a 	srli	r5,r5,12
 200719c:	003ff406 	br	2007170 <__muldf3+0x6b0>
 20071a0:	10c003cc 	andi	r3,r2,15
 20071a4:	01000104 	movi	r4,4
 20071a8:	193ff626 	beq	r3,r4,2007184 <__muldf3+0x6c4>
 20071ac:	0023883a 	mov	r17,zero
 20071b0:	003fd506 	br	2007108 <__muldf3+0x648>
 20071b4:	0005883a 	mov	r2,zero
 20071b8:	003fe706 	br	2007158 <__muldf3+0x698>
 20071bc:	00800434 	movhi	r2,16
 20071c0:	89400234 	orhi	r5,r17,8
 20071c4:	10bfffc4 	addi	r2,r2,-1
 20071c8:	b02b883a 	mov	r21,r22
 20071cc:	288a703a 	and	r5,r5,r2
 20071d0:	4029883a 	mov	r20,r8
 20071d4:	003eff06 	br	2006dd4 <__muldf3+0x314>

020071d8 <__extendsfdf2>:
 20071d8:	200ad5fa 	srli	r5,r4,23
 20071dc:	defffd04 	addi	sp,sp,-12
 20071e0:	dc400115 	stw	r17,4(sp)
 20071e4:	29403fcc 	andi	r5,r5,255
 20071e8:	29800044 	addi	r6,r5,1
 20071ec:	04402034 	movhi	r17,128
 20071f0:	dc000015 	stw	r16,0(sp)
 20071f4:	8c7fffc4 	addi	r17,r17,-1
 20071f8:	dfc00215 	stw	ra,8(sp)
 20071fc:	31803fcc 	andi	r6,r6,255
 2007200:	00800044 	movi	r2,1
 2007204:	8922703a 	and	r17,r17,r4
 2007208:	2020d7fa 	srli	r16,r4,31
 200720c:	1180110e 	bge	r2,r6,2007254 <__extendsfdf2+0x7c>
 2007210:	880cd0fa 	srli	r6,r17,3
 2007214:	8822977a 	slli	r17,r17,29
 2007218:	2940e004 	addi	r5,r5,896
 200721c:	2941ffcc 	andi	r5,r5,2047
 2007220:	2804953a 	slli	r2,r5,20
 2007224:	01400434 	movhi	r5,16
 2007228:	800697fa 	slli	r3,r16,31
 200722c:	297fffc4 	addi	r5,r5,-1
 2007230:	314a703a 	and	r5,r6,r5
 2007234:	288ab03a 	or	r5,r5,r2
 2007238:	28c6b03a 	or	r3,r5,r3
 200723c:	8805883a 	mov	r2,r17
 2007240:	dfc00217 	ldw	ra,8(sp)
 2007244:	dc400117 	ldw	r17,4(sp)
 2007248:	dc000017 	ldw	r16,0(sp)
 200724c:	dec00304 	addi	sp,sp,12
 2007250:	f800283a 	ret
 2007254:	2800111e 	bne	r5,zero,200729c <__extendsfdf2+0xc4>
 2007258:	88001c26 	beq	r17,zero,20072cc <__extendsfdf2+0xf4>
 200725c:	8809883a 	mov	r4,r17
 2007260:	20074900 	call	2007490 <__clzsi2>
 2007264:	00c00284 	movi	r3,10
 2007268:	18801b16 	blt	r3,r2,20072d8 <__extendsfdf2+0x100>
 200726c:	018002c4 	movi	r6,11
 2007270:	308dc83a 	sub	r6,r6,r2
 2007274:	11000544 	addi	r4,r2,21
 2007278:	8986d83a 	srl	r3,r17,r6
 200727c:	8922983a 	sll	r17,r17,r4
 2007280:	0180e244 	movi	r6,905
 2007284:	01400434 	movhi	r5,16
 2007288:	3085c83a 	sub	r2,r6,r2
 200728c:	297fffc4 	addi	r5,r5,-1
 2007290:	194c703a 	and	r6,r3,r5
 2007294:	1141ffcc 	andi	r5,r2,2047
 2007298:	003fe006 	br	200721c <__extendsfdf2+0x44>
 200729c:	88000826 	beq	r17,zero,20072c0 <__extendsfdf2+0xe8>
 20072a0:	880cd0fa 	srli	r6,r17,3
 20072a4:	00800434 	movhi	r2,16
 20072a8:	10bfffc4 	addi	r2,r2,-1
 20072ac:	31800234 	orhi	r6,r6,8
 20072b0:	8822977a 	slli	r17,r17,29
 20072b4:	308c703a 	and	r6,r6,r2
 20072b8:	0141ffc4 	movi	r5,2047
 20072bc:	003fd706 	br	200721c <__extendsfdf2+0x44>
 20072c0:	0141ffc4 	movi	r5,2047
 20072c4:	000d883a 	mov	r6,zero
 20072c8:	003fd406 	br	200721c <__extendsfdf2+0x44>
 20072cc:	000b883a 	mov	r5,zero
 20072d0:	000d883a 	mov	r6,zero
 20072d4:	003fd106 	br	200721c <__extendsfdf2+0x44>
 20072d8:	11bffd44 	addi	r6,r2,-11
 20072dc:	8986983a 	sll	r3,r17,r6
 20072e0:	0023883a 	mov	r17,zero
 20072e4:	003fe606 	br	2007280 <__extendsfdf2+0xa8>

020072e8 <__truncdfsf2>:
 20072e8:	2810d53a 	srli	r8,r5,20
 20072ec:	01c00434 	movhi	r7,16
 20072f0:	39ffffc4 	addi	r7,r7,-1
 20072f4:	29ce703a 	and	r7,r5,r7
 20072f8:	4201ffcc 	andi	r8,r8,2047
 20072fc:	380e90fa 	slli	r7,r7,3
 2007300:	200cd77a 	srli	r6,r4,29
 2007304:	42400044 	addi	r9,r8,1
 2007308:	4a41ffcc 	andi	r9,r9,2047
 200730c:	00c00044 	movi	r3,1
 2007310:	280ad7fa 	srli	r5,r5,31
 2007314:	31ceb03a 	or	r7,r6,r7
 2007318:	200490fa 	slli	r2,r4,3
 200731c:	1a40230e 	bge	r3,r9,20073ac <__truncdfsf2+0xc4>
 2007320:	40ff2004 	addi	r3,r8,-896
 2007324:	01803f84 	movi	r6,254
 2007328:	30c01516 	blt	r6,r3,2007380 <__truncdfsf2+0x98>
 200732c:	00c0380e 	bge	zero,r3,2007410 <__truncdfsf2+0x128>
 2007330:	200c91ba 	slli	r6,r4,6
 2007334:	380e90fa 	slli	r7,r7,3
 2007338:	1004d77a 	srli	r2,r2,29
 200733c:	300cc03a 	cmpne	r6,r6,zero
 2007340:	31ccb03a 	or	r6,r6,r7
 2007344:	308cb03a 	or	r6,r6,r2
 2007348:	308001cc 	andi	r2,r6,7
 200734c:	10000426 	beq	r2,zero,2007360 <__truncdfsf2+0x78>
 2007350:	308003cc 	andi	r2,r6,15
 2007354:	01000104 	movi	r4,4
 2007358:	11000126 	beq	r2,r4,2007360 <__truncdfsf2+0x78>
 200735c:	31800104 	addi	r6,r6,4
 2007360:	3081002c 	andhi	r2,r6,1024
 2007364:	10001626 	beq	r2,zero,20073c0 <__truncdfsf2+0xd8>
 2007368:	18c00044 	addi	r3,r3,1
 200736c:	00803fc4 	movi	r2,255
 2007370:	18800326 	beq	r3,r2,2007380 <__truncdfsf2+0x98>
 2007374:	300c91ba 	slli	r6,r6,6
 2007378:	300cd27a 	srli	r6,r6,9
 200737c:	00000206 	br	2007388 <__truncdfsf2+0xa0>
 2007380:	00ffffc4 	movi	r3,-1
 2007384:	000d883a 	mov	r6,zero
 2007388:	18c03fcc 	andi	r3,r3,255
 200738c:	180895fa 	slli	r4,r3,23
 2007390:	00c02034 	movhi	r3,128
 2007394:	280a97fa 	slli	r5,r5,31
 2007398:	18ffffc4 	addi	r3,r3,-1
 200739c:	30c6703a 	and	r3,r6,r3
 20073a0:	1906b03a 	or	r3,r3,r4
 20073a4:	1944b03a 	or	r2,r3,r5
 20073a8:	f800283a 	ret
 20073ac:	40000b1e 	bne	r8,zero,20073dc <__truncdfsf2+0xf4>
 20073b0:	388cb03a 	or	r6,r7,r2
 20073b4:	0007883a 	mov	r3,zero
 20073b8:	30000426 	beq	r6,zero,20073cc <__truncdfsf2+0xe4>
 20073bc:	01800144 	movi	r6,5
 20073c0:	00803fc4 	movi	r2,255
 20073c4:	300cd0fa 	srli	r6,r6,3
 20073c8:	18800a26 	beq	r3,r2,20073f4 <__truncdfsf2+0x10c>
 20073cc:	00802034 	movhi	r2,128
 20073d0:	10bfffc4 	addi	r2,r2,-1
 20073d4:	308c703a 	and	r6,r6,r2
 20073d8:	003feb06 	br	2007388 <__truncdfsf2+0xa0>
 20073dc:	3888b03a 	or	r4,r7,r2
 20073e0:	203fe726 	beq	r4,zero,2007380 <__truncdfsf2+0x98>
 20073e4:	380c90fa 	slli	r6,r7,3
 20073e8:	00c03fc4 	movi	r3,255
 20073ec:	31808034 	orhi	r6,r6,512
 20073f0:	003fd506 	br	2007348 <__truncdfsf2+0x60>
 20073f4:	303fe226 	beq	r6,zero,2007380 <__truncdfsf2+0x98>
 20073f8:	00802034 	movhi	r2,128
 20073fc:	31801034 	orhi	r6,r6,64
 2007400:	10bfffc4 	addi	r2,r2,-1
 2007404:	00ffffc4 	movi	r3,-1
 2007408:	308c703a 	and	r6,r6,r2
 200740c:	003fde06 	br	2007388 <__truncdfsf2+0xa0>
 2007410:	013ffa44 	movi	r4,-23
 2007414:	19000e16 	blt	r3,r4,2007450 <__truncdfsf2+0x168>
 2007418:	01000784 	movi	r4,30
 200741c:	20c9c83a 	sub	r4,r4,r3
 2007420:	018007c4 	movi	r6,31
 2007424:	39c02034 	orhi	r7,r7,128
 2007428:	31000b16 	blt	r6,r4,2007458 <__truncdfsf2+0x170>
 200742c:	423f2084 	addi	r8,r8,-894
 2007430:	120c983a 	sll	r6,r2,r8
 2007434:	3a0e983a 	sll	r7,r7,r8
 2007438:	1104d83a 	srl	r2,r2,r4
 200743c:	300cc03a 	cmpne	r6,r6,zero
 2007440:	31ceb03a 	or	r7,r6,r7
 2007444:	388cb03a 	or	r6,r7,r2
 2007448:	0007883a 	mov	r3,zero
 200744c:	003fbe06 	br	2007348 <__truncdfsf2+0x60>
 2007450:	0007883a 	mov	r3,zero
 2007454:	003fd906 	br	20073bc <__truncdfsf2+0xd4>
 2007458:	01bfff84 	movi	r6,-2
 200745c:	30cdc83a 	sub	r6,r6,r3
 2007460:	00c00804 	movi	r3,32
 2007464:	398cd83a 	srl	r6,r7,r6
 2007468:	20c00726 	beq	r4,r3,2007488 <__truncdfsf2+0x1a0>
 200746c:	423f2884 	addi	r8,r8,-862
 2007470:	3a0e983a 	sll	r7,r7,r8
 2007474:	3884b03a 	or	r2,r7,r2
 2007478:	1004c03a 	cmpne	r2,r2,zero
 200747c:	118cb03a 	or	r6,r2,r6
 2007480:	0007883a 	mov	r3,zero
 2007484:	003fb006 	br	2007348 <__truncdfsf2+0x60>
 2007488:	000f883a 	mov	r7,zero
 200748c:	003ff906 	br	2007474 <__truncdfsf2+0x18c>

02007490 <__clzsi2>:
 2007490:	00bfffd4 	movui	r2,65535
 2007494:	11000536 	bltu	r2,r4,20074ac <__clzsi2+0x1c>
 2007498:	00803fc4 	movi	r2,255
 200749c:	11000f36 	bltu	r2,r4,20074dc <__clzsi2+0x4c>
 20074a0:	00800804 	movi	r2,32
 20074a4:	0007883a 	mov	r3,zero
 20074a8:	00000506 	br	20074c0 <__clzsi2+0x30>
 20074ac:	00804034 	movhi	r2,256
 20074b0:	10bfffc4 	addi	r2,r2,-1
 20074b4:	11000c2e 	bgeu	r2,r4,20074e8 <__clzsi2+0x58>
 20074b8:	00800204 	movi	r2,8
 20074bc:	00c00604 	movi	r3,24
 20074c0:	20c8d83a 	srl	r4,r4,r3
 20074c4:	00c080b4 	movhi	r3,514
 20074c8:	18c69d04 	addi	r3,r3,6772
 20074cc:	1909883a 	add	r4,r3,r4
 20074d0:	20c00003 	ldbu	r3,0(r4)
 20074d4:	10c5c83a 	sub	r2,r2,r3
 20074d8:	f800283a 	ret
 20074dc:	00800604 	movi	r2,24
 20074e0:	00c00204 	movi	r3,8
 20074e4:	003ff606 	br	20074c0 <__clzsi2+0x30>
 20074e8:	00800404 	movi	r2,16
 20074ec:	1007883a 	mov	r3,r2
 20074f0:	003ff306 	br	20074c0 <__clzsi2+0x30>

020074f4 <__divsi3>:
 20074f4:	20001b16 	blt	r4,zero,2007564 <__divsi3+0x70>
 20074f8:	000f883a 	mov	r7,zero
 20074fc:	28001616 	blt	r5,zero,2007558 <__divsi3+0x64>
 2007500:	200d883a 	mov	r6,r4
 2007504:	29001a2e 	bgeu	r5,r4,2007570 <__divsi3+0x7c>
 2007508:	00800804 	movi	r2,32
 200750c:	00c00044 	movi	r3,1
 2007510:	00000106 	br	2007518 <__divsi3+0x24>
 2007514:	10000d26 	beq	r2,zero,200754c <__divsi3+0x58>
 2007518:	294b883a 	add	r5,r5,r5
 200751c:	10bfffc4 	addi	r2,r2,-1
 2007520:	18c7883a 	add	r3,r3,r3
 2007524:	293ffb36 	bltu	r5,r4,2007514 <__divsi3+0x20>
 2007528:	0005883a 	mov	r2,zero
 200752c:	18000726 	beq	r3,zero,200754c <__divsi3+0x58>
 2007530:	0005883a 	mov	r2,zero
 2007534:	31400236 	bltu	r6,r5,2007540 <__divsi3+0x4c>
 2007538:	314dc83a 	sub	r6,r6,r5
 200753c:	10c4b03a 	or	r2,r2,r3
 2007540:	1806d07a 	srli	r3,r3,1
 2007544:	280ad07a 	srli	r5,r5,1
 2007548:	183ffa1e 	bne	r3,zero,2007534 <__divsi3+0x40>
 200754c:	38000126 	beq	r7,zero,2007554 <__divsi3+0x60>
 2007550:	0085c83a 	sub	r2,zero,r2
 2007554:	f800283a 	ret
 2007558:	014bc83a 	sub	r5,zero,r5
 200755c:	39c0005c 	xori	r7,r7,1
 2007560:	003fe706 	br	2007500 <__divsi3+0xc>
 2007564:	0109c83a 	sub	r4,zero,r4
 2007568:	01c00044 	movi	r7,1
 200756c:	003fe306 	br	20074fc <__divsi3+0x8>
 2007570:	00c00044 	movi	r3,1
 2007574:	003fee06 	br	2007530 <__divsi3+0x3c>

02007578 <__modsi3>:
 2007578:	20001716 	blt	r4,zero,20075d8 <__modsi3+0x60>
 200757c:	000f883a 	mov	r7,zero
 2007580:	2005883a 	mov	r2,r4
 2007584:	28001216 	blt	r5,zero,20075d0 <__modsi3+0x58>
 2007588:	2900162e 	bgeu	r5,r4,20075e4 <__modsi3+0x6c>
 200758c:	01800804 	movi	r6,32
 2007590:	00c00044 	movi	r3,1
 2007594:	00000106 	br	200759c <__modsi3+0x24>
 2007598:	30000a26 	beq	r6,zero,20075c4 <__modsi3+0x4c>
 200759c:	294b883a 	add	r5,r5,r5
 20075a0:	31bfffc4 	addi	r6,r6,-1
 20075a4:	18c7883a 	add	r3,r3,r3
 20075a8:	293ffb36 	bltu	r5,r4,2007598 <__modsi3+0x20>
 20075ac:	18000526 	beq	r3,zero,20075c4 <__modsi3+0x4c>
 20075b0:	1806d07a 	srli	r3,r3,1
 20075b4:	11400136 	bltu	r2,r5,20075bc <__modsi3+0x44>
 20075b8:	1145c83a 	sub	r2,r2,r5
 20075bc:	280ad07a 	srli	r5,r5,1
 20075c0:	183ffb1e 	bne	r3,zero,20075b0 <__modsi3+0x38>
 20075c4:	38000126 	beq	r7,zero,20075cc <__modsi3+0x54>
 20075c8:	0085c83a 	sub	r2,zero,r2
 20075cc:	f800283a 	ret
 20075d0:	014bc83a 	sub	r5,zero,r5
 20075d4:	003fec06 	br	2007588 <__modsi3+0x10>
 20075d8:	0109c83a 	sub	r4,zero,r4
 20075dc:	01c00044 	movi	r7,1
 20075e0:	003fe706 	br	2007580 <__modsi3+0x8>
 20075e4:	00c00044 	movi	r3,1
 20075e8:	003ff106 	br	20075b0 <__modsi3+0x38>

020075ec <__udivsi3>:
 20075ec:	200d883a 	mov	r6,r4
 20075f0:	2900152e 	bgeu	r5,r4,2007648 <__udivsi3+0x5c>
 20075f4:	28001416 	blt	r5,zero,2007648 <__udivsi3+0x5c>
 20075f8:	00800804 	movi	r2,32
 20075fc:	00c00044 	movi	r3,1
 2007600:	00000206 	br	200760c <__udivsi3+0x20>
 2007604:	10000e26 	beq	r2,zero,2007640 <__udivsi3+0x54>
 2007608:	28000516 	blt	r5,zero,2007620 <__udivsi3+0x34>
 200760c:	294b883a 	add	r5,r5,r5
 2007610:	10bfffc4 	addi	r2,r2,-1
 2007614:	18c7883a 	add	r3,r3,r3
 2007618:	293ffa36 	bltu	r5,r4,2007604 <__udivsi3+0x18>
 200761c:	18000826 	beq	r3,zero,2007640 <__udivsi3+0x54>
 2007620:	0005883a 	mov	r2,zero
 2007624:	31400236 	bltu	r6,r5,2007630 <__udivsi3+0x44>
 2007628:	314dc83a 	sub	r6,r6,r5
 200762c:	10c4b03a 	or	r2,r2,r3
 2007630:	1806d07a 	srli	r3,r3,1
 2007634:	280ad07a 	srli	r5,r5,1
 2007638:	183ffa1e 	bne	r3,zero,2007624 <__udivsi3+0x38>
 200763c:	f800283a 	ret
 2007640:	0005883a 	mov	r2,zero
 2007644:	f800283a 	ret
 2007648:	00c00044 	movi	r3,1
 200764c:	003ff406 	br	2007620 <__udivsi3+0x34>

02007650 <__umodsi3>:
 2007650:	2005883a 	mov	r2,r4
 2007654:	2900122e 	bgeu	r5,r4,20076a0 <__umodsi3+0x50>
 2007658:	28001116 	blt	r5,zero,20076a0 <__umodsi3+0x50>
 200765c:	01800804 	movi	r6,32
 2007660:	00c00044 	movi	r3,1
 2007664:	00000206 	br	2007670 <__umodsi3+0x20>
 2007668:	30000c26 	beq	r6,zero,200769c <__umodsi3+0x4c>
 200766c:	28000516 	blt	r5,zero,2007684 <__umodsi3+0x34>
 2007670:	294b883a 	add	r5,r5,r5
 2007674:	31bfffc4 	addi	r6,r6,-1
 2007678:	18c7883a 	add	r3,r3,r3
 200767c:	293ffa36 	bltu	r5,r4,2007668 <__umodsi3+0x18>
 2007680:	18000626 	beq	r3,zero,200769c <__umodsi3+0x4c>
 2007684:	1806d07a 	srli	r3,r3,1
 2007688:	11400136 	bltu	r2,r5,2007690 <__umodsi3+0x40>
 200768c:	1145c83a 	sub	r2,r2,r5
 2007690:	280ad07a 	srli	r5,r5,1
 2007694:	183ffb1e 	bne	r3,zero,2007684 <__umodsi3+0x34>
 2007698:	f800283a 	ret
 200769c:	f800283a 	ret
 20076a0:	00c00044 	movi	r3,1
 20076a4:	003ff706 	br	2007684 <__umodsi3+0x34>

020076a8 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
 20076a8:	deffff04 	addi	sp,sp,-4
 20076ac:	df000015 	stw	fp,0(sp)
 20076b0:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
 20076b4:	d0a02e17 	ldw	r2,-32584(gp)
}
 20076b8:	e037883a 	mov	sp,fp
 20076bc:	df000017 	ldw	fp,0(sp)
 20076c0:	dec00104 	addi	sp,sp,4
 20076c4:	f800283a 	ret

020076c8 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 20076c8:	defff804 	addi	sp,sp,-32
 20076cc:	df000715 	stw	fp,28(sp)
 20076d0:	df000704 	addi	fp,sp,28
 20076d4:	e13ffd15 	stw	r4,-12(fp)
 20076d8:	e17ffe15 	stw	r5,-8(fp)
 20076dc:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 20076e0:	e0bffd17 	ldw	r2,-12(fp)
 20076e4:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 20076e8:	e0bffe17 	ldw	r2,-8(fp)
 20076ec:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 20076f0:	e0bfff17 	ldw	r2,-4(fp)
 20076f4:	10800430 	cmpltui	r2,r2,16
 20076f8:	10004c1e 	bne	r2,zero,200782c <memcpy+0x164>
 20076fc:	e0fffa17 	ldw	r3,-24(fp)
 2007700:	e0bff917 	ldw	r2,-28(fp)
 2007704:	1884b03a 	or	r2,r3,r2
 2007708:	108000cc 	andi	r2,r2,3
 200770c:	1000471e 	bne	r2,zero,200782c <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 2007710:	e0bff917 	ldw	r2,-28(fp)
 2007714:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 2007718:	e0bffa17 	ldw	r2,-24(fp)
 200771c:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2007720:	00002306 	br	20077b0 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 2007724:	e0bffb17 	ldw	r2,-20(fp)
 2007728:	10c00104 	addi	r3,r2,4
 200772c:	e0fffb15 	stw	r3,-20(fp)
 2007730:	e0fffc17 	ldw	r3,-16(fp)
 2007734:	19000104 	addi	r4,r3,4
 2007738:	e13ffc15 	stw	r4,-16(fp)
 200773c:	18c00017 	ldw	r3,0(r3)
 2007740:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2007744:	e0bffb17 	ldw	r2,-20(fp)
 2007748:	10c00104 	addi	r3,r2,4
 200774c:	e0fffb15 	stw	r3,-20(fp)
 2007750:	e0fffc17 	ldw	r3,-16(fp)
 2007754:	19000104 	addi	r4,r3,4
 2007758:	e13ffc15 	stw	r4,-16(fp)
 200775c:	18c00017 	ldw	r3,0(r3)
 2007760:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2007764:	e0bffb17 	ldw	r2,-20(fp)
 2007768:	10c00104 	addi	r3,r2,4
 200776c:	e0fffb15 	stw	r3,-20(fp)
 2007770:	e0fffc17 	ldw	r3,-16(fp)
 2007774:	19000104 	addi	r4,r3,4
 2007778:	e13ffc15 	stw	r4,-16(fp)
 200777c:	18c00017 	ldw	r3,0(r3)
 2007780:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2007784:	e0bffb17 	ldw	r2,-20(fp)
 2007788:	10c00104 	addi	r3,r2,4
 200778c:	e0fffb15 	stw	r3,-20(fp)
 2007790:	e0fffc17 	ldw	r3,-16(fp)
 2007794:	19000104 	addi	r4,r3,4
 2007798:	e13ffc15 	stw	r4,-16(fp)
 200779c:	18c00017 	ldw	r3,0(r3)
 20077a0:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 20077a4:	e0bfff17 	ldw	r2,-4(fp)
 20077a8:	10bffc04 	addi	r2,r2,-16
 20077ac:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 20077b0:	e0bfff17 	ldw	r2,-4(fp)
 20077b4:	10800428 	cmpgeui	r2,r2,16
 20077b8:	103fda1e 	bne	r2,zero,2007724 <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 20077bc:	00000b06 	br	20077ec <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 20077c0:	e0bffb17 	ldw	r2,-20(fp)
 20077c4:	10c00104 	addi	r3,r2,4
 20077c8:	e0fffb15 	stw	r3,-20(fp)
 20077cc:	e0fffc17 	ldw	r3,-16(fp)
 20077d0:	19000104 	addi	r4,r3,4
 20077d4:	e13ffc15 	stw	r4,-16(fp)
 20077d8:	18c00017 	ldw	r3,0(r3)
 20077dc:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 20077e0:	e0bfff17 	ldw	r2,-4(fp)
 20077e4:	10bfff04 	addi	r2,r2,-4
 20077e8:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 20077ec:	e0bfff17 	ldw	r2,-4(fp)
 20077f0:	10800128 	cmpgeui	r2,r2,4
 20077f4:	103ff21e 	bne	r2,zero,20077c0 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 20077f8:	e0bffb17 	ldw	r2,-20(fp)
 20077fc:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 2007800:	e0bffc17 	ldw	r2,-16(fp)
 2007804:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 2007808:	00000806 	br	200782c <memcpy+0x164>
    *dst++ = *src++;
 200780c:	e0bff917 	ldw	r2,-28(fp)
 2007810:	10c00044 	addi	r3,r2,1
 2007814:	e0fff915 	stw	r3,-28(fp)
 2007818:	e0fffa17 	ldw	r3,-24(fp)
 200781c:	19000044 	addi	r4,r3,1
 2007820:	e13ffa15 	stw	r4,-24(fp)
 2007824:	18c00003 	ldbu	r3,0(r3)
 2007828:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 200782c:	e0bfff17 	ldw	r2,-4(fp)
 2007830:	10ffffc4 	addi	r3,r2,-1
 2007834:	e0ffff15 	stw	r3,-4(fp)
 2007838:	103ff41e 	bne	r2,zero,200780c <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 200783c:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2007840:	e037883a 	mov	sp,fp
 2007844:	df000017 	ldw	fp,0(sp)
 2007848:	dec00104 	addi	sp,sp,4
 200784c:	f800283a 	ret

02007850 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 2007850:	defff704 	addi	sp,sp,-36
 2007854:	df000815 	stw	fp,32(sp)
 2007858:	df000804 	addi	fp,sp,32
 200785c:	e13ffd15 	stw	r4,-12(fp)
 2007860:	e17ffe15 	stw	r5,-8(fp)
 2007864:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 2007868:	e0bffd17 	ldw	r2,-12(fp)
 200786c:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 2007870:	e0bffe17 	ldw	r2,-8(fp)
 2007874:	10803fcc 	andi	r2,r2,255
 2007878:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 200787c:	00000c06 	br	20078b0 <memset+0x60>
    {
      if (n--)
 2007880:	e0bfff17 	ldw	r2,-4(fp)
 2007884:	10ffffc4 	addi	r3,r2,-1
 2007888:	e0ffff15 	stw	r3,-4(fp)
 200788c:	10000626 	beq	r2,zero,20078a8 <memset+0x58>
        *s++ = (char) c;
 2007890:	e0bff817 	ldw	r2,-32(fp)
 2007894:	10c00044 	addi	r3,r2,1
 2007898:	e0fff815 	stw	r3,-32(fp)
 200789c:	e0fffe17 	ldw	r3,-8(fp)
 20078a0:	10c00005 	stb	r3,0(r2)
 20078a4:	00000206 	br	20078b0 <memset+0x60>
      else
        return m;
 20078a8:	e0bffd17 	ldw	r2,-12(fp)
 20078ac:	00005506 	br	2007a04 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 20078b0:	e0bff817 	ldw	r2,-32(fp)
 20078b4:	108000cc 	andi	r2,r2,3
 20078b8:	103ff11e 	bne	r2,zero,2007880 <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 20078bc:	e0bfff17 	ldw	r2,-4(fp)
 20078c0:	10800130 	cmpltui	r2,r2,4
 20078c4:	10004a1e 	bne	r2,zero,20079f0 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 20078c8:	e0bff817 	ldw	r2,-32(fp)
 20078cc:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 20078d0:	e0bffc17 	ldw	r2,-16(fp)
 20078d4:	1006923a 	slli	r3,r2,8
 20078d8:	e0bffc17 	ldw	r2,-16(fp)
 20078dc:	1884b03a 	or	r2,r3,r2
 20078e0:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 20078e4:	e0bffa17 	ldw	r2,-24(fp)
 20078e8:	1004943a 	slli	r2,r2,16
 20078ec:	e0fffa17 	ldw	r3,-24(fp)
 20078f0:	1884b03a 	or	r2,r3,r2
 20078f4:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 20078f8:	00800804 	movi	r2,32
 20078fc:	e0bff915 	stw	r2,-28(fp)
 2007900:	00000906 	br	2007928 <memset+0xd8>
        buffer = (buffer << i) | buffer;
 2007904:	e0fffa17 	ldw	r3,-24(fp)
 2007908:	e0bff917 	ldw	r2,-28(fp)
 200790c:	1884983a 	sll	r2,r3,r2
 2007910:	e0fffa17 	ldw	r3,-24(fp)
 2007914:	1884b03a 	or	r2,r3,r2
 2007918:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200791c:	e0bff917 	ldw	r2,-28(fp)
 2007920:	1085883a 	add	r2,r2,r2
 2007924:	e0bff915 	stw	r2,-28(fp)
 2007928:	e0bff917 	ldw	r2,-28(fp)
 200792c:	10800830 	cmpltui	r2,r2,32
 2007930:	103ff41e 	bne	r2,zero,2007904 <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2007934:	00001706 	br	2007994 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 2007938:	e0bffb17 	ldw	r2,-20(fp)
 200793c:	10c00104 	addi	r3,r2,4
 2007940:	e0fffb15 	stw	r3,-20(fp)
 2007944:	e0fffa17 	ldw	r3,-24(fp)
 2007948:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 200794c:	e0bffb17 	ldw	r2,-20(fp)
 2007950:	10c00104 	addi	r3,r2,4
 2007954:	e0fffb15 	stw	r3,-20(fp)
 2007958:	e0fffa17 	ldw	r3,-24(fp)
 200795c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2007960:	e0bffb17 	ldw	r2,-20(fp)
 2007964:	10c00104 	addi	r3,r2,4
 2007968:	e0fffb15 	stw	r3,-20(fp)
 200796c:	e0fffa17 	ldw	r3,-24(fp)
 2007970:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2007974:	e0bffb17 	ldw	r2,-20(fp)
 2007978:	10c00104 	addi	r3,r2,4
 200797c:	e0fffb15 	stw	r3,-20(fp)
 2007980:	e0fffa17 	ldw	r3,-24(fp)
 2007984:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 2007988:	e0bfff17 	ldw	r2,-4(fp)
 200798c:	10bffc04 	addi	r2,r2,-16
 2007990:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2007994:	e0bfff17 	ldw	r2,-4(fp)
 2007998:	10800428 	cmpgeui	r2,r2,16
 200799c:	103fe61e 	bne	r2,zero,2007938 <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 20079a0:	00000806 	br	20079c4 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 20079a4:	e0bffb17 	ldw	r2,-20(fp)
 20079a8:	10c00104 	addi	r3,r2,4
 20079ac:	e0fffb15 	stw	r3,-20(fp)
 20079b0:	e0fffa17 	ldw	r3,-24(fp)
 20079b4:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 20079b8:	e0bfff17 	ldw	r2,-4(fp)
 20079bc:	10bfff04 	addi	r2,r2,-4
 20079c0:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 20079c4:	e0bfff17 	ldw	r2,-4(fp)
 20079c8:	10800128 	cmpgeui	r2,r2,4
 20079cc:	103ff51e 	bne	r2,zero,20079a4 <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 20079d0:	e0bffb17 	ldw	r2,-20(fp)
 20079d4:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 20079d8:	00000506 	br	20079f0 <memset+0x1a0>
    *s++ = (char) c;
 20079dc:	e0bff817 	ldw	r2,-32(fp)
 20079e0:	10c00044 	addi	r3,r2,1
 20079e4:	e0fff815 	stw	r3,-32(fp)
 20079e8:	e0fffe17 	ldw	r3,-8(fp)
 20079ec:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 20079f0:	e0bfff17 	ldw	r2,-4(fp)
 20079f4:	10ffffc4 	addi	r3,r2,-1
 20079f8:	e0ffff15 	stw	r3,-4(fp)
 20079fc:	103ff71e 	bne	r2,zero,20079dc <memset+0x18c>
    *s++ = (char) c;

  return m;
 2007a00:	e0bffd17 	ldw	r2,-12(fp)
}
 2007a04:	e037883a 	mov	sp,fp
 2007a08:	df000017 	ldw	fp,0(sp)
 2007a0c:	dec00104 	addi	sp,sp,4
 2007a10:	f800283a 	ret

02007a14 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 2007a14:	defff804 	addi	sp,sp,-32
 2007a18:	dfc00515 	stw	ra,20(sp)
 2007a1c:	df000415 	stw	fp,16(sp)
 2007a20:	df000404 	addi	fp,sp,16
 2007a24:	e13ffe15 	stw	r4,-8(fp)
 2007a28:	e17fff15 	stw	r5,-4(fp)
 2007a2c:	e1800215 	stw	r6,8(fp)
 2007a30:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 2007a34:	e0800204 	addi	r2,fp,8
 2007a38:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2007a3c:	e0bffe17 	ldw	r2,-8(fp)
 2007a40:	10800217 	ldw	r2,8(r2)
 2007a44:	e0fffd17 	ldw	r3,-12(fp)
 2007a48:	180f883a 	mov	r7,r3
 2007a4c:	e1bfff17 	ldw	r6,-4(fp)
 2007a50:	100b883a 	mov	r5,r2
 2007a54:	e13ffe17 	ldw	r4,-8(fp)
 2007a58:	2007e640 	call	2007e64 <___vfprintf_internal_r>
 2007a5c:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 2007a60:	e0bffc17 	ldw	r2,-16(fp)
}
 2007a64:	e037883a 	mov	sp,fp
 2007a68:	dfc00117 	ldw	ra,4(sp)
 2007a6c:	df000017 	ldw	fp,0(sp)
 2007a70:	dec00404 	addi	sp,sp,16
 2007a74:	f800283a 	ret

02007a78 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 2007a78:	defff704 	addi	sp,sp,-36
 2007a7c:	dfc00515 	stw	ra,20(sp)
 2007a80:	df000415 	stw	fp,16(sp)
 2007a84:	df000404 	addi	fp,sp,16
 2007a88:	e13fff15 	stw	r4,-4(fp)
 2007a8c:	e1400215 	stw	r5,8(fp)
 2007a90:	e1800315 	stw	r6,12(fp)
 2007a94:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 2007a98:	d0a02e17 	ldw	r2,-32584(gp)
 2007a9c:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 2007aa0:	e0800204 	addi	r2,fp,8
 2007aa4:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 2007aa8:	d0a02e17 	ldw	r2,-32584(gp)
 2007aac:	10800217 	ldw	r2,8(r2)
 2007ab0:	e0fffe17 	ldw	r3,-8(fp)
 2007ab4:	180d883a 	mov	r6,r3
 2007ab8:	e17fff17 	ldw	r5,-4(fp)
 2007abc:	1009883a 	mov	r4,r2
 2007ac0:	2007e140 	call	2007e14 <__vfprintf_internal>
 2007ac4:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 2007ac8:	e0bffd17 	ldw	r2,-12(fp)
}
 2007acc:	e037883a 	mov	sp,fp
 2007ad0:	dfc00117 	ldw	ra,4(sp)
 2007ad4:	df000017 	ldw	fp,0(sp)
 2007ad8:	dec00504 	addi	sp,sp,20
 2007adc:	f800283a 	ret

02007ae0 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 2007ae0:	defff104 	addi	sp,sp,-60
 2007ae4:	dfc00e15 	stw	ra,56(sp)
 2007ae8:	df000d15 	stw	fp,52(sp)
 2007aec:	df000d04 	addi	fp,sp,52
 2007af0:	e13ffe15 	stw	r4,-8(fp)
 2007af4:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 2007af8:	e13fff17 	ldw	r4,-4(fp)
 2007afc:	2007c300 	call	2007c30 <strlen>
 2007b00:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 2007b04:	e0bfff17 	ldw	r2,-4(fp)
 2007b08:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 2007b0c:	e0bff317 	ldw	r2,-52(fp)
 2007b10:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 2007b14:	008080b4 	movhi	r2,514
 2007b18:	1086de04 	addi	r2,r2,7032
 2007b1c:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 2007b20:	00800044 	movi	r2,1
 2007b24:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 2007b28:	e0bff317 	ldw	r2,-52(fp)
 2007b2c:	10800044 	addi	r2,r2,1
 2007b30:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 2007b34:	e0bffa04 	addi	r2,fp,-24
 2007b38:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 2007b3c:	00800084 	movi	r2,2
 2007b40:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 2007b44:	e0bffe17 	ldw	r2,-8(fp)
 2007b48:	e0bff415 	stw	r2,-48(fp)
 2007b4c:	e0bff417 	ldw	r2,-48(fp)
 2007b50:	10000526 	beq	r2,zero,2007b68 <_puts_r+0x88>
 2007b54:	e0bff417 	ldw	r2,-48(fp)
 2007b58:	10800e17 	ldw	r2,56(r2)
 2007b5c:	1000021e 	bne	r2,zero,2007b68 <_puts_r+0x88>
 2007b60:	e13ff417 	ldw	r4,-48(fp)
 2007b64:	200cad00 	call	200cad0 <__sinit>
  fp = _stdout_r (ptr);
 2007b68:	e0bffe17 	ldw	r2,-8(fp)
 2007b6c:	10800217 	ldw	r2,8(r2)
 2007b70:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 2007b74:	e0bff517 	ldw	r2,-44(fp)
 2007b78:	1080030b 	ldhu	r2,12(r2)
 2007b7c:	10bfffcc 	andi	r2,r2,65535
 2007b80:	1088000c 	andi	r2,r2,8192
 2007b84:	10000c1e 	bne	r2,zero,2007bb8 <_puts_r+0xd8>
 2007b88:	e0bff517 	ldw	r2,-44(fp)
 2007b8c:	1080030b 	ldhu	r2,12(r2)
 2007b90:	10880014 	ori	r2,r2,8192
 2007b94:	1007883a 	mov	r3,r2
 2007b98:	e0bff517 	ldw	r2,-44(fp)
 2007b9c:	10c0030d 	sth	r3,12(r2)
 2007ba0:	e0bff517 	ldw	r2,-44(fp)
 2007ba4:	10c01917 	ldw	r3,100(r2)
 2007ba8:	00b7ffc4 	movi	r2,-8193
 2007bac:	1886703a 	and	r3,r3,r2
 2007bb0:	e0bff517 	ldw	r2,-44(fp)
 2007bb4:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 2007bb8:	e0bff704 	addi	r2,fp,-36
 2007bbc:	100d883a 	mov	r6,r2
 2007bc0:	e17ff517 	ldw	r5,-44(fp)
 2007bc4:	e13ffe17 	ldw	r4,-8(fp)
 2007bc8:	200d41c0 	call	200d41c <__sfvwrite_r>
 2007bcc:	10000226 	beq	r2,zero,2007bd8 <_puts_r+0xf8>
 2007bd0:	00bfffc4 	movi	r2,-1
 2007bd4:	00000106 	br	2007bdc <_puts_r+0xfc>
 2007bd8:	00800284 	movi	r2,10
 2007bdc:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 2007be0:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 2007be4:	e037883a 	mov	sp,fp
 2007be8:	dfc00117 	ldw	ra,4(sp)
 2007bec:	df000017 	ldw	fp,0(sp)
 2007bf0:	dec00204 	addi	sp,sp,8
 2007bf4:	f800283a 	ret

02007bf8 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 2007bf8:	defffd04 	addi	sp,sp,-12
 2007bfc:	dfc00215 	stw	ra,8(sp)
 2007c00:	df000115 	stw	fp,4(sp)
 2007c04:	df000104 	addi	fp,sp,4
 2007c08:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 2007c0c:	d0a02e17 	ldw	r2,-32584(gp)
 2007c10:	e17fff17 	ldw	r5,-4(fp)
 2007c14:	1009883a 	mov	r4,r2
 2007c18:	2007ae00 	call	2007ae0 <_puts_r>
}
 2007c1c:	e037883a 	mov	sp,fp
 2007c20:	dfc00117 	ldw	ra,4(sp)
 2007c24:	df000017 	ldw	fp,0(sp)
 2007c28:	dec00204 	addi	sp,sp,8
 2007c2c:	f800283a 	ret

02007c30 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 2007c30:	defffc04 	addi	sp,sp,-16
 2007c34:	df000315 	stw	fp,12(sp)
 2007c38:	df000304 	addi	fp,sp,12
 2007c3c:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 2007c40:	e0bfff17 	ldw	r2,-4(fp)
 2007c44:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2007c48:	00000d06 	br	2007c80 <strlen+0x50>
    {
      if (!*str)
 2007c4c:	e0bfff17 	ldw	r2,-4(fp)
 2007c50:	10800003 	ldbu	r2,0(r2)
 2007c54:	10803fcc 	andi	r2,r2,255
 2007c58:	1080201c 	xori	r2,r2,128
 2007c5c:	10bfe004 	addi	r2,r2,-128
 2007c60:	1000041e 	bne	r2,zero,2007c74 <strlen+0x44>
	return str - start;
 2007c64:	e0ffff17 	ldw	r3,-4(fp)
 2007c68:	e0bffe17 	ldw	r2,-8(fp)
 2007c6c:	1885c83a 	sub	r2,r3,r2
 2007c70:	00002806 	br	2007d14 <strlen+0xe4>
      str++;
 2007c74:	e0bfff17 	ldw	r2,-4(fp)
 2007c78:	10800044 	addi	r2,r2,1
 2007c7c:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2007c80:	e0bfff17 	ldw	r2,-4(fp)
 2007c84:	108000cc 	andi	r2,r2,3
 2007c88:	103ff01e 	bne	r2,zero,2007c4c <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 2007c8c:	e0bfff17 	ldw	r2,-4(fp)
 2007c90:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 2007c94:	00000306 	br	2007ca4 <strlen+0x74>
    aligned_addr++;
 2007c98:	e0bffd17 	ldw	r2,-12(fp)
 2007c9c:	10800104 	addi	r2,r2,4
 2007ca0:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 2007ca4:	e0bffd17 	ldw	r2,-12(fp)
 2007ca8:	10c00017 	ldw	r3,0(r2)
 2007cac:	00bfbff4 	movhi	r2,65279
 2007cb0:	10bfbfc4 	addi	r2,r2,-257
 2007cb4:	1887883a 	add	r3,r3,r2
 2007cb8:	e0bffd17 	ldw	r2,-12(fp)
 2007cbc:	10800017 	ldw	r2,0(r2)
 2007cc0:	0084303a 	nor	r2,zero,r2
 2007cc4:	1886703a 	and	r3,r3,r2
 2007cc8:	00a02074 	movhi	r2,32897
 2007ccc:	10a02004 	addi	r2,r2,-32640
 2007cd0:	1884703a 	and	r2,r3,r2
 2007cd4:	103ff026 	beq	r2,zero,2007c98 <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 2007cd8:	e0bffd17 	ldw	r2,-12(fp)
 2007cdc:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 2007ce0:	00000306 	br	2007cf0 <strlen+0xc0>
    str++;
 2007ce4:	e0bfff17 	ldw	r2,-4(fp)
 2007ce8:	10800044 	addi	r2,r2,1
 2007cec:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 2007cf0:	e0bfff17 	ldw	r2,-4(fp)
 2007cf4:	10800003 	ldbu	r2,0(r2)
 2007cf8:	10803fcc 	andi	r2,r2,255
 2007cfc:	1080201c 	xori	r2,r2,128
 2007d00:	10bfe004 	addi	r2,r2,-128
 2007d04:	103ff71e 	bne	r2,zero,2007ce4 <strlen+0xb4>
    str++;
  return str - start;
 2007d08:	e0ffff17 	ldw	r3,-4(fp)
 2007d0c:	e0bffe17 	ldw	r2,-8(fp)
 2007d10:	1885c83a 	sub	r2,r3,r2
}
 2007d14:	e037883a 	mov	sp,fp
 2007d18:	df000017 	ldw	fp,0(sp)
 2007d1c:	dec00104 	addi	sp,sp,4
 2007d20:	f800283a 	ret

02007d24 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 2007d24:	defedf04 	addi	sp,sp,-1156
 2007d28:	dfc12015 	stw	ra,1152(sp)
 2007d2c:	df011f15 	stw	fp,1148(sp)
 2007d30:	dc011e15 	stw	r16,1144(sp)
 2007d34:	df011f04 	addi	fp,sp,1148
 2007d38:	e13ffc15 	stw	r4,-16(fp)
 2007d3c:	2821883a 	mov	r16,r5
 2007d40:	e1bffd15 	stw	r6,-12(fp)
 2007d44:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2007d48:	80c0030b 	ldhu	r3,12(r16)
 2007d4c:	00bfff44 	movi	r2,-3
 2007d50:	1884703a 	and	r2,r3,r2
 2007d54:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2007d58:	80801917 	ldw	r2,100(r16)
 2007d5c:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 2007d60:	8080038b 	ldhu	r2,14(r16)
 2007d64:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2007d68:	80800717 	ldw	r2,28(r16)
 2007d6c:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 2007d70:	80800917 	ldw	r2,36(r16)
 2007d74:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2007d78:	e0befc04 	addi	r2,fp,-1040
 2007d7c:	e0bee215 	stw	r2,-1144(fp)
 2007d80:	e0bee217 	ldw	r2,-1144(fp)
 2007d84:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2007d88:	00810004 	movi	r2,1024
 2007d8c:	e0bee415 	stw	r2,-1136(fp)
 2007d90:	e0bee417 	ldw	r2,-1136(fp)
 2007d94:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2007d98:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2007d9c:	e0bee204 	addi	r2,fp,-1144
 2007da0:	e1fffe17 	ldw	r7,-8(fp)
 2007da4:	e1bffd17 	ldw	r6,-12(fp)
 2007da8:	100b883a 	mov	r5,r2
 2007dac:	e13ffc17 	ldw	r4,-16(fp)
 2007db0:	2007e640 	call	2007e64 <___vfprintf_internal_r>
 2007db4:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2007db8:	e0bee117 	ldw	r2,-1148(fp)
 2007dbc:	10000716 	blt	r2,zero,2007ddc <__sbprintf+0xb8>
 2007dc0:	e0bee204 	addi	r2,fp,-1144
 2007dc4:	100b883a 	mov	r5,r2
 2007dc8:	e13ffc17 	ldw	r4,-16(fp)
 2007dcc:	200c6500 	call	200c650 <_fflush_r>
 2007dd0:	10000226 	beq	r2,zero,2007ddc <__sbprintf+0xb8>
		ret = EOF;
 2007dd4:	00bfffc4 	movi	r2,-1
 2007dd8:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2007ddc:	e0bee50b 	ldhu	r2,-1132(fp)
 2007de0:	10bfffcc 	andi	r2,r2,65535
 2007de4:	1080100c 	andi	r2,r2,64
 2007de8:	10000326 	beq	r2,zero,2007df8 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 2007dec:	8080030b 	ldhu	r2,12(r16)
 2007df0:	10801014 	ori	r2,r2,64
 2007df4:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 2007df8:	e0bee117 	ldw	r2,-1148(fp)
}
 2007dfc:	e6ffff04 	addi	sp,fp,-4
 2007e00:	dfc00217 	ldw	ra,8(sp)
 2007e04:	df000117 	ldw	fp,4(sp)
 2007e08:	dc000017 	ldw	r16,0(sp)
 2007e0c:	dec00304 	addi	sp,sp,12
 2007e10:	f800283a 	ret

02007e14 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 2007e14:	defffa04 	addi	sp,sp,-24
 2007e18:	dfc00515 	stw	ra,20(sp)
 2007e1c:	df000415 	stw	fp,16(sp)
 2007e20:	df000404 	addi	fp,sp,16
 2007e24:	e13ffd15 	stw	r4,-12(fp)
 2007e28:	e17ffe15 	stw	r5,-8(fp)
 2007e2c:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 2007e30:	d0a02e17 	ldw	r2,-32584(gp)
 2007e34:	e1ffff17 	ldw	r7,-4(fp)
 2007e38:	e1bffe17 	ldw	r6,-8(fp)
 2007e3c:	e17ffd17 	ldw	r5,-12(fp)
 2007e40:	1009883a 	mov	r4,r2
 2007e44:	2007e640 	call	2007e64 <___vfprintf_internal_r>
 2007e48:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2007e4c:	e0bffc17 	ldw	r2,-16(fp)
}
 2007e50:	e037883a 	mov	sp,fp
 2007e54:	dfc00117 	ldw	ra,4(sp)
 2007e58:	df000017 	ldw	fp,0(sp)
 2007e5c:	dec00204 	addi	sp,sp,8
 2007e60:	f800283a 	ret

02007e64 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 2007e64:	deffa404 	addi	sp,sp,-368
 2007e68:	dfc05b15 	stw	ra,364(sp)
 2007e6c:	df005a15 	stw	fp,360(sp)
 2007e70:	ddc05915 	stw	r23,356(sp)
 2007e74:	dd805815 	stw	r22,352(sp)
 2007e78:	dd405715 	stw	r21,348(sp)
 2007e7c:	dd005615 	stw	r20,344(sp)
 2007e80:	dcc05515 	stw	r19,340(sp)
 2007e84:	dc805415 	stw	r18,336(sp)
 2007e88:	dc405315 	stw	r17,332(sp)
 2007e8c:	dc005215 	stw	r16,328(sp)
 2007e90:	df005a04 	addi	fp,sp,360
 2007e94:	e13fe615 	stw	r4,-104(fp)
 2007e98:	e17fe715 	stw	r5,-100(fp)
 2007e9c:	e1bfe815 	stw	r6,-96(fp)
 2007ea0:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 2007ea4:	e13fe617 	ldw	r4,-104(fp)
 2007ea8:	200dcb80 	call	200dcb8 <_localeconv_r>
 2007eac:	10800017 	ldw	r2,0(r2)
 2007eb0:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 2007eb4:	e13fbb17 	ldw	r4,-276(fp)
 2007eb8:	2007c300 	call	2007c30 <strlen>
 2007ebc:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 2007ec0:	e03fc215 	stw	zero,-248(fp)
 2007ec4:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 2007ec8:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 2007ecc:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2007ed0:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2007ed4:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 2007ed8:	e0bfe617 	ldw	r2,-104(fp)
 2007edc:	e0bfbd15 	stw	r2,-268(fp)
 2007ee0:	e0bfbd17 	ldw	r2,-268(fp)
 2007ee4:	10000526 	beq	r2,zero,2007efc <___vfprintf_internal_r+0x98>
 2007ee8:	e0bfbd17 	ldw	r2,-268(fp)
 2007eec:	10800e17 	ldw	r2,56(r2)
 2007ef0:	1000021e 	bne	r2,zero,2007efc <___vfprintf_internal_r+0x98>
 2007ef4:	e13fbd17 	ldw	r4,-268(fp)
 2007ef8:	200cad00 	call	200cad0 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2007efc:	e0bfe717 	ldw	r2,-100(fp)
 2007f00:	1080030b 	ldhu	r2,12(r2)
 2007f04:	10bfffcc 	andi	r2,r2,65535
 2007f08:	1088000c 	andi	r2,r2,8192
 2007f0c:	10000c1e 	bne	r2,zero,2007f40 <___vfprintf_internal_r+0xdc>
 2007f10:	e0bfe717 	ldw	r2,-100(fp)
 2007f14:	1080030b 	ldhu	r2,12(r2)
 2007f18:	10880014 	ori	r2,r2,8192
 2007f1c:	1007883a 	mov	r3,r2
 2007f20:	e0bfe717 	ldw	r2,-100(fp)
 2007f24:	10c0030d 	sth	r3,12(r2)
 2007f28:	e0bfe717 	ldw	r2,-100(fp)
 2007f2c:	10c01917 	ldw	r3,100(r2)
 2007f30:	00b7ffc4 	movi	r2,-8193
 2007f34:	1886703a 	and	r3,r3,r2
 2007f38:	e0bfe717 	ldw	r2,-100(fp)
 2007f3c:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 2007f40:	e0bfe717 	ldw	r2,-100(fp)
 2007f44:	1080030b 	ldhu	r2,12(r2)
 2007f48:	10bfffcc 	andi	r2,r2,65535
 2007f4c:	1080020c 	andi	r2,r2,8
 2007f50:	10000326 	beq	r2,zero,2007f60 <___vfprintf_internal_r+0xfc>
 2007f54:	e0bfe717 	ldw	r2,-100(fp)
 2007f58:	10800417 	ldw	r2,16(r2)
 2007f5c:	1000061e 	bne	r2,zero,2007f78 <___vfprintf_internal_r+0x114>
 2007f60:	e17fe717 	ldw	r5,-100(fp)
 2007f64:	e13fe617 	ldw	r4,-104(fp)
 2007f68:	200a2800 	call	200a280 <__swsetup_r>
 2007f6c:	10000226 	beq	r2,zero,2007f78 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2007f70:	00bfffc4 	movi	r2,-1
 2007f74:	0007e206 	br	2009f00 <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2007f78:	e0bfe717 	ldw	r2,-100(fp)
 2007f7c:	1080030b 	ldhu	r2,12(r2)
 2007f80:	10bfffcc 	andi	r2,r2,65535
 2007f84:	1080068c 	andi	r2,r2,26
 2007f88:	10800298 	cmpnei	r2,r2,10
 2007f8c:	10000c1e 	bne	r2,zero,2007fc0 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 2007f90:	e0bfe717 	ldw	r2,-100(fp)
 2007f94:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2007f98:	10bfffcc 	andi	r2,r2,65535
 2007f9c:	10a0001c 	xori	r2,r2,32768
 2007fa0:	10a00004 	addi	r2,r2,-32768
 2007fa4:	10000616 	blt	r2,zero,2007fc0 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 2007fa8:	e1ffe917 	ldw	r7,-92(fp)
 2007fac:	e1bfe817 	ldw	r6,-96(fp)
 2007fb0:	e17fe717 	ldw	r5,-100(fp)
 2007fb4:	e13fe617 	ldw	r4,-104(fp)
 2007fb8:	2007d240 	call	2007d24 <__sbprintf>
 2007fbc:	0007d006 	br	2009f00 <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2007fc0:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2007fc4:	e47fcb04 	addi	r17,fp,-212
 2007fc8:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 2007fcc:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2007fd0:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2007fd4:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 2007fd8:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2007fdc:	00000106 	br	2007fe4 <___vfprintf_internal_r+0x180>
                    fmt += 1;
 2007fe0:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2007fe4:	a8800003 	ldbu	r2,0(r21)
 2007fe8:	10803fcc 	andi	r2,r2,255
 2007fec:	1080201c 	xori	r2,r2,128
 2007ff0:	10bfe004 	addi	r2,r2,-128
 2007ff4:	10000626 	beq	r2,zero,2008010 <___vfprintf_internal_r+0x1ac>
 2007ff8:	a8800003 	ldbu	r2,0(r21)
 2007ffc:	10803fcc 	andi	r2,r2,255
 2008000:	1080201c 	xori	r2,r2,128
 2008004:	10bfe004 	addi	r2,r2,-128
 2008008:	10800958 	cmpnei	r2,r2,37
 200800c:	103ff41e 	bne	r2,zero,2007fe0 <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 2008010:	a807883a 	mov	r3,r21
 2008014:	9005883a 	mov	r2,r18
 2008018:	18a1c83a 	sub	r16,r3,r2
 200801c:	80001826 	beq	r16,zero,2008080 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 2008020:	8c800015 	stw	r18,0(r17)
 2008024:	8005883a 	mov	r2,r16
 2008028:	88800115 	stw	r2,4(r17)
 200802c:	e0bfca17 	ldw	r2,-216(fp)
 2008030:	8007883a 	mov	r3,r16
 2008034:	10c5883a 	add	r2,r2,r3
 2008038:	e0bfca15 	stw	r2,-216(fp)
 200803c:	8c400204 	addi	r17,r17,8
 2008040:	e0bfc917 	ldw	r2,-220(fp)
 2008044:	10800044 	addi	r2,r2,1
 2008048:	e0bfc915 	stw	r2,-220(fp)
 200804c:	e0bfc917 	ldw	r2,-220(fp)
 2008050:	10800210 	cmplti	r2,r2,8
 2008054:	1000071e 	bne	r2,zero,2008074 <___vfprintf_internal_r+0x210>
 2008058:	e0bfc804 	addi	r2,fp,-224
 200805c:	100d883a 	mov	r6,r2
 2008060:	e17fe717 	ldw	r5,-100(fp)
 2008064:	e13fe617 	ldw	r4,-104(fp)
 2008068:	2011cec0 	call	2011cec <__sprint_r>
 200806c:	10074d1e 	bne	r2,zero,2009da4 <___vfprintf_internal_r+0x1f40>
 2008070:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 2008074:	e0bfac17 	ldw	r2,-336(fp)
 2008078:	1405883a 	add	r2,r2,r16
 200807c:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2008080:	a8800003 	ldbu	r2,0(r21)
 2008084:	10803fcc 	andi	r2,r2,255
 2008088:	1080201c 	xori	r2,r2,128
 200808c:	10bfe004 	addi	r2,r2,-128
 2008090:	10073626 	beq	r2,zero,2009d6c <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 2008094:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 2008098:	ad400044 	addi	r21,r21,1

		flags = 0;
 200809c:	0027883a 	mov	r19,zero
		dprec = 0;
 20080a0:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 20080a4:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 20080a8:	00bfffc4 	movi	r2,-1
 20080ac:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 20080b0:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 20080b4:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 20080b8:	a805883a 	mov	r2,r21
 20080bc:	15400044 	addi	r21,r2,1
 20080c0:	10800003 	ldbu	r2,0(r2)
 20080c4:	15003fcc 	andi	r20,r2,255
 20080c8:	a500201c 	xori	r20,r20,128
 20080cc:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 20080d0:	a0bff804 	addi	r2,r20,-32
 20080d4:	10c01668 	cmpgeui	r3,r2,89
 20080d8:	1803491e 	bne	r3,zero,2008e00 <___vfprintf_internal_r+0xf9c>
 20080dc:	100690ba 	slli	r3,r2,2
 20080e0:	00808074 	movhi	r2,513
 20080e4:	10a03d04 	addi	r2,r2,-32524
 20080e8:	1885883a 	add	r2,r3,r2
 20080ec:	10800017 	ldw	r2,0(r2)
 20080f0:	1000683a 	jmp	r2
 20080f4:	02008258 	cmpnei	r8,zero,521
 20080f8:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20080fc:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008100:	02008278 	rdprs	r8,zero,521
 2008104:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008108:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 200810c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008110:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008114:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008118:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 200811c:	02008280 	call	200828 <__alt_mem_mem_Nios_PI+0x828>
 2008120:	020082b4 	movhi	r8,522
 2008124:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008128:	020082ac 	andhi	r8,zero,522
 200812c:	020082c0 	call	20082c <__alt_mem_mem_Nios_PI+0x82c>
 2008130:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008134:	02008354 	movui	r8,525
 2008138:	0200835c 	xori	r8,zero,525
 200813c:	0200835c 	xori	r8,zero,525
 2008140:	0200835c 	xori	r8,zero,525
 2008144:	0200835c 	xori	r8,zero,525
 2008148:	0200835c 	xori	r8,zero,525
 200814c:	0200835c 	xori	r8,zero,525
 2008150:	0200835c 	xori	r8,zero,525
 2008154:	0200835c 	xori	r8,zero,525
 2008158:	0200835c 	xori	r8,zero,525
 200815c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008160:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008164:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008168:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 200816c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008170:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008174:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008178:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 200817c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008180:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008184:	02008404 	movi	r8,528
 2008188:	02008504 	movi	r8,532
 200818c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008190:	02008504 	movi	r8,532
 2008194:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008198:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 200819c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081a0:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081a4:	02008398 	cmpnei	r8,zero,526
 20081a8:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081ac:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081b0:	020088a0 	cmpeqi	r8,zero,546
 20081b4:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081b8:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081bc:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081c0:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081c4:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081c8:	02008a1c 	xori	r8,zero,552
 20081cc:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081d0:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081d4:	02008adc 	xori	r8,zero,555
 20081d8:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081dc:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081e0:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081e4:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081e8:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081ec:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081f0:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081f4:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081f8:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 20081fc:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008200:	020083dc 	xori	r8,zero,527
 2008204:	02008408 	cmpgei	r8,zero,528
 2008208:	02008504 	movi	r8,532
 200820c:	02008504 	movi	r8,532
 2008210:	02008504 	movi	r8,532
 2008214:	020083a0 	cmpeqi	r8,zero,526
 2008218:	02008408 	cmpgei	r8,zero,528
 200821c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008220:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008224:	020083a8 	cmpgeui	r8,zero,526
 2008228:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 200822c:	02008800 	call	200880 <__alt_mem_mem_Nios_PI+0x880>
 2008230:	020088a4 	muli	r8,zero,546
 2008234:	02008944 	movi	r8,549
 2008238:	020083d4 	movui	r8,527
 200823c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008240:	0200898c 	andi	r8,zero,550
 2008244:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008248:	02008a20 	cmpeqi	r8,zero,552
 200824c:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008250:	02008e00 	call	2008e0 <__alt_mem_mem_Nios_PI+0x8e0>
 2008254:	02008aec 	andhi	r8,zero,555
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 2008258:	e0bfc103 	ldbu	r2,-252(fp)
 200825c:	10803fcc 	andi	r2,r2,255
 2008260:	1080201c 	xori	r2,r2,128
 2008264:	10bfe004 	addi	r2,r2,-128
 2008268:	103f931e 	bne	r2,zero,20080b8 <___vfprintf_internal_r+0x254>
				sign = ' ';
 200826c:	00800804 	movi	r2,32
 2008270:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2008274:	003f9006 	br	20080b8 <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 2008278:	9cc00054 	ori	r19,r19,1
			goto rflag;
 200827c:	003f8e06 	br	20080b8 <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2008280:	e0bfe917 	ldw	r2,-92(fp)
 2008284:	10c00104 	addi	r3,r2,4
 2008288:	e0ffe915 	stw	r3,-92(fp)
 200828c:	10800017 	ldw	r2,0(r2)
 2008290:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2008294:	e0bfad17 	ldw	r2,-332(fp)
 2008298:	10000116 	blt	r2,zero,20082a0 <___vfprintf_internal_r+0x43c>
				goto rflag;
 200829c:	003f8606 	br	20080b8 <___vfprintf_internal_r+0x254>
			width = -width;
 20082a0:	e0bfad17 	ldw	r2,-332(fp)
 20082a4:	0085c83a 	sub	r2,zero,r2
 20082a8:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 20082ac:	9cc00114 	ori	r19,r19,4
			goto rflag;
 20082b0:	003f8106 	br	20080b8 <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 20082b4:	00800ac4 	movi	r2,43
 20082b8:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 20082bc:	003f7e06 	br	20080b8 <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 20082c0:	a805883a 	mov	r2,r21
 20082c4:	15400044 	addi	r21,r2,1
 20082c8:	10800003 	ldbu	r2,0(r2)
 20082cc:	15003fcc 	andi	r20,r2,255
 20082d0:	a500201c 	xori	r20,r20,128
 20082d4:	a53fe004 	addi	r20,r20,-128
 20082d8:	a0800a98 	cmpnei	r2,r20,42
 20082dc:	10000a1e 	bne	r2,zero,2008308 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 20082e0:	e0bfe917 	ldw	r2,-92(fp)
 20082e4:	10c00104 	addi	r3,r2,4
 20082e8:	e0ffe915 	stw	r3,-92(fp)
 20082ec:	10800017 	ldw	r2,0(r2)
 20082f0:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 20082f4:	e0bfae17 	ldw	r2,-328(fp)
 20082f8:	103f6f0e 	bge	r2,zero,20080b8 <___vfprintf_internal_r+0x254>
					prec = -1;
 20082fc:	00bfffc4 	movi	r2,-1
 2008300:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 2008304:	003f6c06 	br	20080b8 <___vfprintf_internal_r+0x254>
			}
			n = 0;
 2008308:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 200830c:	00000906 	br	2008334 <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 2008310:	80c002a4 	muli	r3,r16,10
 2008314:	a0bff404 	addi	r2,r20,-48
 2008318:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200831c:	a805883a 	mov	r2,r21
 2008320:	15400044 	addi	r21,r2,1
 2008324:	10800003 	ldbu	r2,0(r2)
 2008328:	15003fcc 	andi	r20,r2,255
 200832c:	a500201c 	xori	r20,r20,128
 2008330:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 2008334:	a0bff404 	addi	r2,r20,-48
 2008338:	108002b0 	cmpltui	r2,r2,10
 200833c:	103ff41e 	bne	r2,zero,2008310 <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 2008340:	8005883a 	mov	r2,r16
 2008344:	1000010e 	bge	r2,zero,200834c <___vfprintf_internal_r+0x4e8>
 2008348:	00bfffc4 	movi	r2,-1
 200834c:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 2008350:	003f5f06 	br	20080d0 <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 2008354:	9cc02014 	ori	r19,r19,128
			goto rflag;
 2008358:	003f5706 	br	20080b8 <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 200835c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 2008360:	80c002a4 	muli	r3,r16,10
 2008364:	a0bff404 	addi	r2,r20,-48
 2008368:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200836c:	a805883a 	mov	r2,r21
 2008370:	15400044 	addi	r21,r2,1
 2008374:	10800003 	ldbu	r2,0(r2)
 2008378:	15003fcc 	andi	r20,r2,255
 200837c:	a500201c 	xori	r20,r20,128
 2008380:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 2008384:	a0bff404 	addi	r2,r20,-48
 2008388:	108002b0 	cmpltui	r2,r2,10
 200838c:	103ff41e 	bne	r2,zero,2008360 <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2008390:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 2008394:	003f4e06 	br	20080d0 <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 2008398:	9cc00214 	ori	r19,r19,8
			goto rflag;
 200839c:	003f4606 	br	20080b8 <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 20083a0:	9cc01014 	ori	r19,r19,64
			goto rflag;
 20083a4:	003f4406 	br	20080b8 <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 20083a8:	a8800003 	ldbu	r2,0(r21)
 20083ac:	10803fcc 	andi	r2,r2,255
 20083b0:	1080201c 	xori	r2,r2,128
 20083b4:	10bfe004 	addi	r2,r2,-128
 20083b8:	10801b18 	cmpnei	r2,r2,108
 20083bc:	1000031e 	bne	r2,zero,20083cc <___vfprintf_internal_r+0x568>
				fmt++;
 20083c0:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 20083c4:	9cc00814 	ori	r19,r19,32
 20083c8:	003f3b06 	br	20080b8 <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 20083cc:	9cc00414 	ori	r19,r19,16
			goto rflag;
 20083d0:	003f3906 	br	20080b8 <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 20083d4:	9cc00814 	ori	r19,r19,32
			goto rflag;
 20083d8:	003f3706 	br	20080b8 <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 20083dc:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 20083e0:	e0bfe917 	ldw	r2,-92(fp)
 20083e4:	10c00104 	addi	r3,r2,4
 20083e8:	e0ffe915 	stw	r3,-92(fp)
 20083ec:	10800017 	ldw	r2,0(r2)
 20083f0:	90800005 	stb	r2,0(r18)
				size = 1;
 20083f4:	00800044 	movi	r2,1
 20083f8:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 20083fc:	e03fc105 	stb	zero,-252(fp)
			break;
 2008400:	00028806 	br	2008e24 <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 2008404:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 2008408:	9880080c 	andi	r2,r19,32
 200840c:	10000826 	beq	r2,zero,2008430 <___vfprintf_internal_r+0x5cc>
 2008410:	e13fe917 	ldw	r4,-92(fp)
 2008414:	20800204 	addi	r2,r4,8
 2008418:	e0bfe915 	stw	r2,-92(fp)
 200841c:	20800017 	ldw	r2,0(r4)
 2008420:	20c00117 	ldw	r3,4(r4)
 2008424:	e0bfea15 	stw	r2,-88(fp)
 2008428:	e0ffeb15 	stw	r3,-84(fp)
 200842c:	00001e06 	br	20084a8 <___vfprintf_internal_r+0x644>
 2008430:	9880040c 	andi	r2,r19,16
 2008434:	10000826 	beq	r2,zero,2008458 <___vfprintf_internal_r+0x5f4>
 2008438:	e0bfe917 	ldw	r2,-92(fp)
 200843c:	10c00104 	addi	r3,r2,4
 2008440:	e0ffe915 	stw	r3,-92(fp)
 2008444:	10800017 	ldw	r2,0(r2)
 2008448:	e0bfea15 	stw	r2,-88(fp)
 200844c:	1005d7fa 	srai	r2,r2,31
 2008450:	e0bfeb15 	stw	r2,-84(fp)
 2008454:	00001406 	br	20084a8 <___vfprintf_internal_r+0x644>
 2008458:	9880100c 	andi	r2,r19,64
 200845c:	10000b26 	beq	r2,zero,200848c <___vfprintf_internal_r+0x628>
 2008460:	e0bfe917 	ldw	r2,-92(fp)
 2008464:	10c00104 	addi	r3,r2,4
 2008468:	e0ffe915 	stw	r3,-92(fp)
 200846c:	10800017 	ldw	r2,0(r2)
 2008470:	10bfffcc 	andi	r2,r2,65535
 2008474:	10a0001c 	xori	r2,r2,32768
 2008478:	10a00004 	addi	r2,r2,-32768
 200847c:	e0bfea15 	stw	r2,-88(fp)
 2008480:	1005d7fa 	srai	r2,r2,31
 2008484:	e0bfeb15 	stw	r2,-84(fp)
 2008488:	00000706 	br	20084a8 <___vfprintf_internal_r+0x644>
 200848c:	e0bfe917 	ldw	r2,-92(fp)
 2008490:	10c00104 	addi	r3,r2,4
 2008494:	e0ffe915 	stw	r3,-92(fp)
 2008498:	10800017 	ldw	r2,0(r2)
 200849c:	e0bfea15 	stw	r2,-88(fp)
 20084a0:	1005d7fa 	srai	r2,r2,31
 20084a4:	e0bfeb15 	stw	r2,-84(fp)
 20084a8:	e0bfea17 	ldw	r2,-88(fp)
 20084ac:	e0bfb115 	stw	r2,-316(fp)
 20084b0:	e0ffeb17 	ldw	r3,-84(fp)
 20084b4:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 20084b8:	e0bfb117 	ldw	r2,-316(fp)
 20084bc:	e0ffb217 	ldw	r3,-312(fp)
 20084c0:	18000d0e 	bge	r3,zero,20084f8 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 20084c4:	000f883a 	mov	r7,zero
 20084c8:	0011883a 	mov	r8,zero
 20084cc:	e13fb117 	ldw	r4,-316(fp)
 20084d0:	e17fb217 	ldw	r5,-312(fp)
 20084d4:	3905c83a 	sub	r2,r7,r4
 20084d8:	388d803a 	cmpltu	r6,r7,r2
 20084dc:	4147c83a 	sub	r3,r8,r5
 20084e0:	1989c83a 	sub	r4,r3,r6
 20084e4:	2007883a 	mov	r3,r4
 20084e8:	e0bfb115 	stw	r2,-316(fp)
 20084ec:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 20084f0:	00800b44 	movi	r2,45
 20084f4:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 20084f8:	00800044 	movi	r2,1
 20084fc:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 2008500:	0001b706 	br	2008be0 <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 2008504:	9880020c 	andi	r2,r19,8
 2008508:	10000826 	beq	r2,zero,200852c <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 200850c:	e13fe917 	ldw	r4,-92(fp)
 2008510:	20800204 	addi	r2,r4,8
 2008514:	e0bfe915 	stw	r2,-92(fp)
 2008518:	20800017 	ldw	r2,0(r4)
 200851c:	20c00117 	ldw	r3,4(r4)
 2008520:	e0bfc215 	stw	r2,-248(fp)
 2008524:	e0ffc315 	stw	r3,-244(fp)
 2008528:	00000706 	br	2008548 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 200852c:	e13fe917 	ldw	r4,-92(fp)
 2008530:	20800204 	addi	r2,r4,8
 2008534:	e0bfe915 	stw	r2,-92(fp)
 2008538:	20800017 	ldw	r2,0(r4)
 200853c:	20c00117 	ldw	r3,4(r4)
 2008540:	e0bfc215 	stw	r2,-248(fp)
 2008544:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 2008548:	e0bfc217 	ldw	r2,-248(fp)
 200854c:	e0ffc317 	ldw	r3,-244(fp)
 2008550:	1009883a 	mov	r4,r2
 2008554:	180b883a 	mov	r5,r3
 2008558:	20032700 	call	2003270 <__fpclassifyd>
 200855c:	10800058 	cmpnei	r2,r2,1
 2008560:	1000161e 	bne	r2,zero,20085bc <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 2008564:	e0bfc217 	ldw	r2,-248(fp)
 2008568:	e0ffc317 	ldw	r3,-244(fp)
 200856c:	000d883a 	mov	r6,zero
 2008570:	000f883a 	mov	r7,zero
 2008574:	1009883a 	mov	r4,r2
 2008578:	180b883a 	mov	r5,r3
 200857c:	20069cc0 	call	20069cc <__ledf2>
 2008580:	1000020e 	bge	r2,zero,200858c <___vfprintf_internal_r+0x728>
					sign = '-';
 2008584:	00800b44 	movi	r2,45
 2008588:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 200858c:	a0801208 	cmpgei	r2,r20,72
 2008590:	1000031e 	bne	r2,zero,20085a0 <___vfprintf_internal_r+0x73c>
					cp = "INF";
 2008594:	048080b4 	movhi	r18,514
 2008598:	9486df04 	addi	r18,r18,7036
 200859c:	00000206 	br	20085a8 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 20085a0:	048080b4 	movhi	r18,514
 20085a4:	9486e004 	addi	r18,r18,7040
				size = 3;
 20085a8:	008000c4 	movi	r2,3
 20085ac:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 20085b0:	00bfdfc4 	movi	r2,-129
 20085b4:	98a6703a 	and	r19,r19,r2
				break;
 20085b8:	00021a06 	br	2008e24 <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 20085bc:	e0bfc217 	ldw	r2,-248(fp)
 20085c0:	e0ffc317 	ldw	r3,-244(fp)
 20085c4:	1009883a 	mov	r4,r2
 20085c8:	180b883a 	mov	r5,r3
 20085cc:	20032700 	call	2003270 <__fpclassifyd>
 20085d0:	10000c1e 	bne	r2,zero,2008604 <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 20085d4:	a0801208 	cmpgei	r2,r20,72
 20085d8:	1000031e 	bne	r2,zero,20085e8 <___vfprintf_internal_r+0x784>
					cp = "NAN";
 20085dc:	048080b4 	movhi	r18,514
 20085e0:	9486e104 	addi	r18,r18,7044
 20085e4:	00000206 	br	20085f0 <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 20085e8:	048080b4 	movhi	r18,514
 20085ec:	9486e204 	addi	r18,r18,7048
				size = 3;
 20085f0:	008000c4 	movi	r2,3
 20085f4:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 20085f8:	00bfdfc4 	movi	r2,-129
 20085fc:	98a6703a 	and	r19,r19,r2
				break;
 2008600:	00020806 	br	2008e24 <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 2008604:	e0bfae17 	ldw	r2,-328(fp)
 2008608:	10bfffd8 	cmpnei	r2,r2,-1
 200860c:	1000031e 	bne	r2,zero,200861c <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 2008610:	00800184 	movi	r2,6
 2008614:	e0bfae15 	stw	r2,-328(fp)
 2008618:	00000806 	br	200863c <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 200861c:	a08019e0 	cmpeqi	r2,r20,103
 2008620:	1000021e 	bne	r2,zero,200862c <___vfprintf_internal_r+0x7c8>
 2008624:	a08011d8 	cmpnei	r2,r20,71
 2008628:	1000041e 	bne	r2,zero,200863c <___vfprintf_internal_r+0x7d8>
 200862c:	e0bfae17 	ldw	r2,-328(fp)
 2008630:	1000021e 	bne	r2,zero,200863c <___vfprintf_internal_r+0x7d8>
				prec = 1;
 2008634:	00800044 	movi	r2,1
 2008638:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 200863c:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 2008640:	e0bfc217 	ldw	r2,-248(fp)
 2008644:	e0ffc317 	ldw	r3,-244(fp)
 2008648:	dc800515 	stw	r18,20(sp)
 200864c:	e13fc704 	addi	r4,fp,-228
 2008650:	d9000415 	stw	r4,16(sp)
 2008654:	dd000315 	stw	r20,12(sp)
 2008658:	e13fc404 	addi	r4,fp,-240
 200865c:	d9000215 	stw	r4,8(sp)
 2008660:	e13fc144 	addi	r4,fp,-251
 2008664:	d9000115 	stw	r4,4(sp)
 2008668:	dcc00015 	stw	r19,0(sp)
 200866c:	e1ffae17 	ldw	r7,-328(fp)
 2008670:	100b883a 	mov	r5,r2
 2008674:	180d883a 	mov	r6,r3
 2008678:	e13fe617 	ldw	r4,-104(fp)
 200867c:	2009f340 	call	2009f34 <cvt>
 2008680:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 2008684:	a08019e0 	cmpeqi	r2,r20,103
 2008688:	1000021e 	bne	r2,zero,2008694 <___vfprintf_internal_r+0x830>
 200868c:	a08011d8 	cmpnei	r2,r20,71
 2008690:	1000091e 	bne	r2,zero,20086b8 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 2008694:	e0bfc417 	ldw	r2,-240(fp)
 2008698:	10bfff50 	cmplti	r2,r2,-3
 200869c:	1000031e 	bne	r2,zero,20086ac <___vfprintf_internal_r+0x848>
 20086a0:	e0bfc417 	ldw	r2,-240(fp)
 20086a4:	e0ffae17 	ldw	r3,-328(fp)
 20086a8:	1880020e 	bge	r3,r2,20086b4 <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 20086ac:	a53fff84 	addi	r20,r20,-2
 20086b0:	00000106 	br	20086b8 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 20086b4:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 20086b8:	a0801988 	cmpgei	r2,r20,102
 20086bc:	1000171e 	bne	r2,zero,200871c <___vfprintf_internal_r+0x8b8>
				--expt;
 20086c0:	e0bfc417 	ldw	r2,-240(fp)
 20086c4:	10bfffc4 	addi	r2,r2,-1
 20086c8:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 20086cc:	e0bfc417 	ldw	r2,-240(fp)
 20086d0:	e0ffc504 	addi	r3,fp,-236
 20086d4:	a00d883a 	mov	r6,r20
 20086d8:	100b883a 	mov	r5,r2
 20086dc:	1809883a 	mov	r4,r3
 20086e0:	200a1400 	call	200a140 <exponent>
 20086e4:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 20086e8:	e0bfc717 	ldw	r2,-228(fp)
 20086ec:	e0ffaf17 	ldw	r3,-324(fp)
 20086f0:	1885883a 	add	r2,r3,r2
 20086f4:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 20086f8:	e0bfc717 	ldw	r2,-228(fp)
 20086fc:	10800088 	cmpgei	r2,r2,2
 2008700:	1000021e 	bne	r2,zero,200870c <___vfprintf_internal_r+0x8a8>
 2008704:	9880004c 	andi	r2,r19,1
 2008708:	10003526 	beq	r2,zero,20087e0 <___vfprintf_internal_r+0x97c>
					++size;
 200870c:	e0bfb617 	ldw	r2,-296(fp)
 2008710:	10800044 	addi	r2,r2,1
 2008714:	e0bfb615 	stw	r2,-296(fp)
 2008718:	00003106 	br	20087e0 <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 200871c:	a0801998 	cmpnei	r2,r20,102
 2008720:	1000181e 	bne	r2,zero,2008784 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 2008724:	e0bfc417 	ldw	r2,-240(fp)
 2008728:	00800c0e 	bge	zero,r2,200875c <___vfprintf_internal_r+0x8f8>
						size = expt;
 200872c:	e0bfc417 	ldw	r2,-240(fp)
 2008730:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 2008734:	e0bfae17 	ldw	r2,-328(fp)
 2008738:	1000021e 	bne	r2,zero,2008744 <___vfprintf_internal_r+0x8e0>
 200873c:	9880004c 	andi	r2,r19,1
 2008740:	10002526 	beq	r2,zero,20087d8 <___vfprintf_internal_r+0x974>
							size += prec + 1;
 2008744:	e0bfae17 	ldw	r2,-328(fp)
 2008748:	10800044 	addi	r2,r2,1
 200874c:	e0ffb617 	ldw	r3,-296(fp)
 2008750:	1885883a 	add	r2,r3,r2
 2008754:	e0bfb615 	stw	r2,-296(fp)
 2008758:	00001f06 	br	20087d8 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 200875c:	e0bfae17 	ldw	r2,-328(fp)
 2008760:	1000021e 	bne	r2,zero,200876c <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2008764:	9880004c 	andi	r2,r19,1
 2008768:	10000326 	beq	r2,zero,2008778 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 200876c:	e0bfae17 	ldw	r2,-328(fp)
 2008770:	10800084 	addi	r2,r2,2
 2008774:	00000106 	br	200877c <___vfprintf_internal_r+0x918>
 2008778:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 200877c:	e0bfb615 	stw	r2,-296(fp)
 2008780:	00001506 	br	20087d8 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 2008784:	e0ffc417 	ldw	r3,-240(fp)
 2008788:	e0bfc717 	ldw	r2,-228(fp)
 200878c:	18800816 	blt	r3,r2,20087b0 <___vfprintf_internal_r+0x94c>
					size = expt;
 2008790:	e0bfc417 	ldw	r2,-240(fp)
 2008794:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 2008798:	9880004c 	andi	r2,r19,1
 200879c:	10000e26 	beq	r2,zero,20087d8 <___vfprintf_internal_r+0x974>
						++size;
 20087a0:	e0bfb617 	ldw	r2,-296(fp)
 20087a4:	10800044 	addi	r2,r2,1
 20087a8:	e0bfb615 	stw	r2,-296(fp)
 20087ac:	00000a06 	br	20087d8 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 20087b0:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 20087b4:	00800416 	blt	zero,r2,20087c8 <___vfprintf_internal_r+0x964>
 20087b8:	e0bfc417 	ldw	r2,-240(fp)
 20087bc:	00c00084 	movi	r3,2
 20087c0:	1885c83a 	sub	r2,r3,r2
 20087c4:	00000106 	br	20087cc <___vfprintf_internal_r+0x968>
 20087c8:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 20087cc:	e0ffc717 	ldw	r3,-228(fp)
 20087d0:	10c5883a 	add	r2,r2,r3
 20087d4:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 20087d8:	e0bfc417 	ldw	r2,-240(fp)
 20087dc:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 20087e0:	e0bfc143 	ldbu	r2,-251(fp)
 20087e4:	10803fcc 	andi	r2,r2,255
 20087e8:	1080201c 	xori	r2,r2,128
 20087ec:	10bfe004 	addi	r2,r2,-128
 20087f0:	10018b26 	beq	r2,zero,2008e20 <___vfprintf_internal_r+0xfbc>
				sign = '-';
 20087f4:	00800b44 	movi	r2,45
 20087f8:	e0bfc105 	stb	r2,-252(fp)
			break;
 20087fc:	00018806 	br	2008e20 <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 2008800:	9880080c 	andi	r2,r19,32
 2008804:	10000d26 	beq	r2,zero,200883c <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 2008808:	e0bfe917 	ldw	r2,-92(fp)
 200880c:	10c00104 	addi	r3,r2,4
 2008810:	e0ffe915 	stw	r3,-92(fp)
 2008814:	10800017 	ldw	r2,0(r2)
 2008818:	e0ffac17 	ldw	r3,-336(fp)
 200881c:	e0fff015 	stw	r3,-64(fp)
 2008820:	1807d7fa 	srai	r3,r3,31
 2008824:	e0fff115 	stw	r3,-60(fp)
 2008828:	e0fff017 	ldw	r3,-64(fp)
 200882c:	10c00015 	stw	r3,0(r2)
 2008830:	e0fff117 	ldw	r3,-60(fp)
 2008834:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2008838:	00054b06 	br	2009d68 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200883c:	9880040c 	andi	r2,r19,16
 2008840:	10000726 	beq	r2,zero,2008860 <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 2008844:	e0bfe917 	ldw	r2,-92(fp)
 2008848:	10c00104 	addi	r3,r2,4
 200884c:	e0ffe915 	stw	r3,-92(fp)
 2008850:	10800017 	ldw	r2,0(r2)
 2008854:	e0ffac17 	ldw	r3,-336(fp)
 2008858:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200885c:	00054206 	br	2009d68 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 2008860:	9880100c 	andi	r2,r19,64
 2008864:	10000726 	beq	r2,zero,2008884 <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2008868:	e0bfe917 	ldw	r2,-92(fp)
 200886c:	10c00104 	addi	r3,r2,4
 2008870:	e0ffe915 	stw	r3,-92(fp)
 2008874:	10800017 	ldw	r2,0(r2)
 2008878:	e0ffac17 	ldw	r3,-336(fp)
 200887c:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2008880:	00053906 	br	2009d68 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 2008884:	e0bfe917 	ldw	r2,-92(fp)
 2008888:	10c00104 	addi	r3,r2,4
 200888c:	e0ffe915 	stw	r3,-92(fp)
 2008890:	10800017 	ldw	r2,0(r2)
 2008894:	e0ffac17 	ldw	r3,-336(fp)
 2008898:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200889c:	00053206 	br	2009d68 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 20088a0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 20088a4:	9880080c 	andi	r2,r19,32
 20088a8:	10000626 	beq	r2,zero,20088c4 <___vfprintf_internal_r+0xa60>
 20088ac:	e0bfe917 	ldw	r2,-92(fp)
 20088b0:	10c00204 	addi	r3,r2,8
 20088b4:	e0ffe915 	stw	r3,-92(fp)
 20088b8:	15800017 	ldw	r22,0(r2)
 20088bc:	15c00117 	ldw	r23,4(r2)
 20088c0:	00001c06 	br	2008934 <___vfprintf_internal_r+0xad0>
 20088c4:	9880040c 	andi	r2,r19,16
 20088c8:	10000726 	beq	r2,zero,20088e8 <___vfprintf_internal_r+0xa84>
 20088cc:	e0bfe917 	ldw	r2,-92(fp)
 20088d0:	10c00104 	addi	r3,r2,4
 20088d4:	e0ffe915 	stw	r3,-92(fp)
 20088d8:	10800017 	ldw	r2,0(r2)
 20088dc:	102d883a 	mov	r22,r2
 20088e0:	002f883a 	mov	r23,zero
 20088e4:	00001306 	br	2008934 <___vfprintf_internal_r+0xad0>
 20088e8:	9880100c 	andi	r2,r19,64
 20088ec:	10000b26 	beq	r2,zero,200891c <___vfprintf_internal_r+0xab8>
 20088f0:	e0bfe917 	ldw	r2,-92(fp)
 20088f4:	10c00104 	addi	r3,r2,4
 20088f8:	e0ffe915 	stw	r3,-92(fp)
 20088fc:	10800017 	ldw	r2,0(r2)
 2008900:	e0bff215 	stw	r2,-56(fp)
 2008904:	e03ff315 	stw	zero,-52(fp)
 2008908:	e0bff217 	ldw	r2,-56(fp)
 200890c:	15bfffcc 	andi	r22,r2,65535
 2008910:	e0fff317 	ldw	r3,-52(fp)
 2008914:	182e703a 	and	r23,r3,zero
 2008918:	00000606 	br	2008934 <___vfprintf_internal_r+0xad0>
 200891c:	e0bfe917 	ldw	r2,-92(fp)
 2008920:	10c00104 	addi	r3,r2,4
 2008924:	e0ffe915 	stw	r3,-92(fp)
 2008928:	10800017 	ldw	r2,0(r2)
 200892c:	102d883a 	mov	r22,r2
 2008930:	002f883a 	mov	r23,zero
 2008934:	e5bfb115 	stw	r22,-316(fp)
 2008938:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 200893c:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 2008940:	0000a606 	br	2008bdc <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 2008944:	e0bfe917 	ldw	r2,-92(fp)
 2008948:	10c00104 	addi	r3,r2,4
 200894c:	e0ffe915 	stw	r3,-92(fp)
 2008950:	10800017 	ldw	r2,0(r2)
 2008954:	e0bfb115 	stw	r2,-316(fp)
 2008958:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 200895c:	00800084 	movi	r2,2
 2008960:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 2008964:	008080b4 	movhi	r2,514
 2008968:	1086e304 	addi	r2,r2,7052
 200896c:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 2008970:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 2008974:	00800c04 	movi	r2,48
 2008978:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200897c:	05001e04 	movi	r20,120
 2008980:	00801e04 	movi	r2,120
 2008984:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2008988:	00009406 	br	2008bdc <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200898c:	e0bfe917 	ldw	r2,-92(fp)
 2008990:	10c00104 	addi	r3,r2,4
 2008994:	e0ffe915 	stw	r3,-92(fp)
 2008998:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200899c:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 20089a0:	9000081e 	bne	r18,zero,20089c4 <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 20089a4:	048080b4 	movhi	r18,514
 20089a8:	9486e804 	addi	r18,r18,7072
				size = ((unsigned) prec > 6U) ? 6 : prec;
 20089ac:	e0bfae17 	ldw	r2,-328(fp)
 20089b0:	10c001f0 	cmpltui	r3,r2,7
 20089b4:	1800011e 	bne	r3,zero,20089bc <___vfprintf_internal_r+0xb58>
 20089b8:	00800184 	movi	r2,6
 20089bc:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 20089c0:	00011806 	br	2008e24 <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 20089c4:	e0bfae17 	ldw	r2,-328(fp)
 20089c8:	10001016 	blt	r2,zero,2008a0c <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 20089cc:	e0bfae17 	ldw	r2,-328(fp)
 20089d0:	100d883a 	mov	r6,r2
 20089d4:	000b883a 	mov	r5,zero
 20089d8:	9009883a 	mov	r4,r18
 20089dc:	200eeac0 	call	200eeac <memchr>
 20089e0:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 20089e4:	e0bfbf17 	ldw	r2,-260(fp)
 20089e8:	10000526 	beq	r2,zero,2008a00 <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 20089ec:	e0bfbf17 	ldw	r2,-260(fp)
 20089f0:	9007883a 	mov	r3,r18
 20089f4:	10c5c83a 	sub	r2,r2,r3
 20089f8:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 20089fc:	00010906 	br	2008e24 <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 2008a00:	e0bfae17 	ldw	r2,-328(fp)
 2008a04:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 2008a08:	00010606 	br	2008e24 <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 2008a0c:	9009883a 	mov	r4,r18
 2008a10:	2007c300 	call	2007c30 <strlen>
 2008a14:	e0bfb615 	stw	r2,-296(fp)

			break;
 2008a18:	00010206 	br	2008e24 <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 2008a1c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 2008a20:	9880080c 	andi	r2,r19,32
 2008a24:	10000826 	beq	r2,zero,2008a48 <___vfprintf_internal_r+0xbe4>
 2008a28:	e0bfe917 	ldw	r2,-92(fp)
 2008a2c:	10c00204 	addi	r3,r2,8
 2008a30:	e0ffe915 	stw	r3,-92(fp)
 2008a34:	10c00017 	ldw	r3,0(r2)
 2008a38:	e0ffec15 	stw	r3,-80(fp)
 2008a3c:	10c00117 	ldw	r3,4(r2)
 2008a40:	e0ffed15 	stw	r3,-76(fp)
 2008a44:	00001e06 	br	2008ac0 <___vfprintf_internal_r+0xc5c>
 2008a48:	9880040c 	andi	r2,r19,16
 2008a4c:	10000726 	beq	r2,zero,2008a6c <___vfprintf_internal_r+0xc08>
 2008a50:	e0bfe917 	ldw	r2,-92(fp)
 2008a54:	10c00104 	addi	r3,r2,4
 2008a58:	e0ffe915 	stw	r3,-92(fp)
 2008a5c:	10800017 	ldw	r2,0(r2)
 2008a60:	e0bfec15 	stw	r2,-80(fp)
 2008a64:	e03fed15 	stw	zero,-76(fp)
 2008a68:	00001506 	br	2008ac0 <___vfprintf_internal_r+0xc5c>
 2008a6c:	9880100c 	andi	r2,r19,64
 2008a70:	10000d26 	beq	r2,zero,2008aa8 <___vfprintf_internal_r+0xc44>
 2008a74:	e0bfe917 	ldw	r2,-92(fp)
 2008a78:	10c00104 	addi	r3,r2,4
 2008a7c:	e0ffe915 	stw	r3,-92(fp)
 2008a80:	10800017 	ldw	r2,0(r2)
 2008a84:	e0bff415 	stw	r2,-48(fp)
 2008a88:	e03ff515 	stw	zero,-44(fp)
 2008a8c:	e0bff417 	ldw	r2,-48(fp)
 2008a90:	10bfffcc 	andi	r2,r2,65535
 2008a94:	e0bfec15 	stw	r2,-80(fp)
 2008a98:	e0fff517 	ldw	r3,-44(fp)
 2008a9c:	1806703a 	and	r3,r3,zero
 2008aa0:	e0ffed15 	stw	r3,-76(fp)
 2008aa4:	00000606 	br	2008ac0 <___vfprintf_internal_r+0xc5c>
 2008aa8:	e0bfe917 	ldw	r2,-92(fp)
 2008aac:	10c00104 	addi	r3,r2,4
 2008ab0:	e0ffe915 	stw	r3,-92(fp)
 2008ab4:	10800017 	ldw	r2,0(r2)
 2008ab8:	e0bfec15 	stw	r2,-80(fp)
 2008abc:	e03fed15 	stw	zero,-76(fp)
 2008ac0:	e0bfec17 	ldw	r2,-80(fp)
 2008ac4:	e0bfb115 	stw	r2,-316(fp)
 2008ac8:	e0ffed17 	ldw	r3,-76(fp)
 2008acc:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 2008ad0:	00800044 	movi	r2,1
 2008ad4:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 2008ad8:	00004006 	br	2008bdc <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 2008adc:	008080b4 	movhi	r2,514
 2008ae0:	1086ea04 	addi	r2,r2,7080
 2008ae4:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 2008ae8:	00000306 	br	2008af8 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 2008aec:	008080b4 	movhi	r2,514
 2008af0:	1086e304 	addi	r2,r2,7052
 2008af4:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 2008af8:	9880080c 	andi	r2,r19,32
 2008afc:	10000826 	beq	r2,zero,2008b20 <___vfprintf_internal_r+0xcbc>
 2008b00:	e0bfe917 	ldw	r2,-92(fp)
 2008b04:	10c00204 	addi	r3,r2,8
 2008b08:	e0ffe915 	stw	r3,-92(fp)
 2008b0c:	10c00017 	ldw	r3,0(r2)
 2008b10:	e0ffee15 	stw	r3,-72(fp)
 2008b14:	10c00117 	ldw	r3,4(r2)
 2008b18:	e0ffef15 	stw	r3,-68(fp)
 2008b1c:	00001e06 	br	2008b98 <___vfprintf_internal_r+0xd34>
 2008b20:	9880040c 	andi	r2,r19,16
 2008b24:	10000726 	beq	r2,zero,2008b44 <___vfprintf_internal_r+0xce0>
 2008b28:	e0bfe917 	ldw	r2,-92(fp)
 2008b2c:	10c00104 	addi	r3,r2,4
 2008b30:	e0ffe915 	stw	r3,-92(fp)
 2008b34:	10800017 	ldw	r2,0(r2)
 2008b38:	e0bfee15 	stw	r2,-72(fp)
 2008b3c:	e03fef15 	stw	zero,-68(fp)
 2008b40:	00001506 	br	2008b98 <___vfprintf_internal_r+0xd34>
 2008b44:	9880100c 	andi	r2,r19,64
 2008b48:	10000d26 	beq	r2,zero,2008b80 <___vfprintf_internal_r+0xd1c>
 2008b4c:	e0bfe917 	ldw	r2,-92(fp)
 2008b50:	10c00104 	addi	r3,r2,4
 2008b54:	e0ffe915 	stw	r3,-92(fp)
 2008b58:	10800017 	ldw	r2,0(r2)
 2008b5c:	e0bff615 	stw	r2,-40(fp)
 2008b60:	e03ff715 	stw	zero,-36(fp)
 2008b64:	e0bff617 	ldw	r2,-40(fp)
 2008b68:	10bfffcc 	andi	r2,r2,65535
 2008b6c:	e0bfee15 	stw	r2,-72(fp)
 2008b70:	e0fff717 	ldw	r3,-36(fp)
 2008b74:	1806703a 	and	r3,r3,zero
 2008b78:	e0ffef15 	stw	r3,-68(fp)
 2008b7c:	00000606 	br	2008b98 <___vfprintf_internal_r+0xd34>
 2008b80:	e0bfe917 	ldw	r2,-92(fp)
 2008b84:	10c00104 	addi	r3,r2,4
 2008b88:	e0ffe915 	stw	r3,-92(fp)
 2008b8c:	10800017 	ldw	r2,0(r2)
 2008b90:	e0bfee15 	stw	r2,-72(fp)
 2008b94:	e03fef15 	stw	zero,-68(fp)
 2008b98:	e0bfee17 	ldw	r2,-72(fp)
 2008b9c:	e0bfb115 	stw	r2,-316(fp)
 2008ba0:	e0ffef17 	ldw	r3,-68(fp)
 2008ba4:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 2008ba8:	00800084 	movi	r2,2
 2008bac:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 2008bb0:	9880004c 	andi	r2,r19,1
 2008bb4:	10000926 	beq	r2,zero,2008bdc <___vfprintf_internal_r+0xd78>
 2008bb8:	e0bfb117 	ldw	r2,-316(fp)
 2008bbc:	e0ffb217 	ldw	r3,-312(fp)
 2008bc0:	10c4b03a 	or	r2,r2,r3
 2008bc4:	10000526 	beq	r2,zero,2008bdc <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 2008bc8:	00800c04 	movi	r2,48
 2008bcc:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 2008bd0:	a005883a 	mov	r2,r20
 2008bd4:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 2008bd8:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 2008bdc:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 2008be0:	e0bfae17 	ldw	r2,-328(fp)
 2008be4:	e0bfb415 	stw	r2,-304(fp)
 2008be8:	e0bfb417 	ldw	r2,-304(fp)
 2008bec:	10000216 	blt	r2,zero,2008bf8 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 2008bf0:	00bfdfc4 	movi	r2,-129
 2008bf4:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 2008bf8:	e4bfdb04 	addi	r18,fp,-148
 2008bfc:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 2008c00:	e0bfb117 	ldw	r2,-316(fp)
 2008c04:	e0ffb217 	ldw	r3,-312(fp)
 2008c08:	10c4b03a 	or	r2,r2,r3
 2008c0c:	1000021e 	bne	r2,zero,2008c18 <___vfprintf_internal_r+0xdb4>
 2008c10:	e0bfae17 	ldw	r2,-328(fp)
 2008c14:	10006c26 	beq	r2,zero,2008dc8 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 2008c18:	e0bfb303 	ldbu	r2,-308(fp)
 2008c1c:	10c00060 	cmpeqi	r3,r2,1
 2008c20:	1800211e 	bne	r3,zero,2008ca8 <___vfprintf_internal_r+0xe44>
 2008c24:	10c000a0 	cmpeqi	r3,r2,2
 2008c28:	1800491e 	bne	r3,zero,2008d50 <___vfprintf_internal_r+0xeec>
 2008c2c:	10005d1e 	bne	r2,zero,2008da4 <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 2008c30:	94bfffc4 	addi	r18,r18,-1
 2008c34:	e0bfb117 	ldw	r2,-316(fp)
 2008c38:	108001cc 	andi	r2,r2,7
 2008c3c:	10800c04 	addi	r2,r2,48
 2008c40:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 2008c44:	e0bfb217 	ldw	r2,-312(fp)
 2008c48:	1004977a 	slli	r2,r2,29
 2008c4c:	e0ffb117 	ldw	r3,-316(fp)
 2008c50:	1806d0fa 	srli	r3,r3,3
 2008c54:	1884b03a 	or	r2,r3,r2
 2008c58:	e0bfb115 	stw	r2,-316(fp)
 2008c5c:	e0bfb217 	ldw	r2,-312(fp)
 2008c60:	1004d0fa 	srli	r2,r2,3
 2008c64:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 2008c68:	e0bfb117 	ldw	r2,-316(fp)
 2008c6c:	e0ffb217 	ldw	r3,-312(fp)
 2008c70:	10c4b03a 	or	r2,r2,r3
 2008c74:	103fee1e 	bne	r2,zero,2008c30 <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 2008c78:	9880004c 	andi	r2,r19,1
 2008c7c:	10005026 	beq	r2,zero,2008dc0 <___vfprintf_internal_r+0xf5c>
 2008c80:	90800003 	ldbu	r2,0(r18)
 2008c84:	10803fcc 	andi	r2,r2,255
 2008c88:	1080201c 	xori	r2,r2,128
 2008c8c:	10bfe004 	addi	r2,r2,-128
 2008c90:	10800c20 	cmpeqi	r2,r2,48
 2008c94:	10004a1e 	bne	r2,zero,2008dc0 <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 2008c98:	94bfffc4 	addi	r18,r18,-1
 2008c9c:	00800c04 	movi	r2,48
 2008ca0:	90800005 	stb	r2,0(r18)
					break;
 2008ca4:	00004606 	br	2008dc0 <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 2008ca8:	e0bfb217 	ldw	r2,-312(fp)
 2008cac:	10000a1e 	bne	r2,zero,2008cd8 <___vfprintf_internal_r+0xe74>
 2008cb0:	e0bfb217 	ldw	r2,-312(fp)
 2008cb4:	1000031e 	bne	r2,zero,2008cc4 <___vfprintf_internal_r+0xe60>
 2008cb8:	e0bfb117 	ldw	r2,-316(fp)
 2008cbc:	108002a8 	cmpgeui	r2,r2,10
 2008cc0:	1000051e 	bne	r2,zero,2008cd8 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 2008cc4:	94bfffc4 	addi	r18,r18,-1
 2008cc8:	e0bfb117 	ldw	r2,-316(fp)
 2008ccc:	10800c04 	addi	r2,r2,48
 2008cd0:	90800005 	stb	r2,0(r18)
						break;
 2008cd4:	00003b06 	br	2008dc4 <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 2008cd8:	94bfffc4 	addi	r18,r18,-1
 2008cdc:	e0bfb117 	ldw	r2,-316(fp)
 2008ce0:	e0ffb217 	ldw	r3,-312(fp)
 2008ce4:	01800284 	movi	r6,10
 2008ce8:	000f883a 	mov	r7,zero
 2008cec:	1009883a 	mov	r4,r2
 2008cf0:	180b883a 	mov	r5,r3
 2008cf4:	20143f80 	call	20143f8 <__umoddi3>
 2008cf8:	1009883a 	mov	r4,r2
 2008cfc:	180b883a 	mov	r5,r3
 2008d00:	2005883a 	mov	r2,r4
 2008d04:	2807883a 	mov	r3,r5
 2008d08:	10800c04 	addi	r2,r2,48
 2008d0c:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 2008d10:	e0bfb117 	ldw	r2,-316(fp)
 2008d14:	e0ffb217 	ldw	r3,-312(fp)
 2008d18:	01800284 	movi	r6,10
 2008d1c:	000f883a 	mov	r7,zero
 2008d20:	1009883a 	mov	r4,r2
 2008d24:	180b883a 	mov	r5,r3
 2008d28:	2013e800 	call	2013e80 <__udivdi3>
 2008d2c:	1009883a 	mov	r4,r2
 2008d30:	180b883a 	mov	r5,r3
 2008d34:	e13fb115 	stw	r4,-316(fp)
 2008d38:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 2008d3c:	e0bfb117 	ldw	r2,-316(fp)
 2008d40:	e0ffb217 	ldw	r3,-312(fp)
 2008d44:	10c4b03a 	or	r2,r2,r3
 2008d48:	103fe31e 	bne	r2,zero,2008cd8 <___vfprintf_internal_r+0xe74>
					break;
 2008d4c:	00001d06 	br	2008dc4 <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 2008d50:	94bfffc4 	addi	r18,r18,-1
 2008d54:	e0bfb117 	ldw	r2,-316(fp)
 2008d58:	108003cc 	andi	r2,r2,15
 2008d5c:	e0ffb717 	ldw	r3,-292(fp)
 2008d60:	1885883a 	add	r2,r3,r2
 2008d64:	10800003 	ldbu	r2,0(r2)
 2008d68:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 2008d6c:	e0bfb217 	ldw	r2,-312(fp)
 2008d70:	1004973a 	slli	r2,r2,28
 2008d74:	e0ffb117 	ldw	r3,-316(fp)
 2008d78:	1806d13a 	srli	r3,r3,4
 2008d7c:	1884b03a 	or	r2,r3,r2
 2008d80:	e0bfb115 	stw	r2,-316(fp)
 2008d84:	e0bfb217 	ldw	r2,-312(fp)
 2008d88:	1004d13a 	srli	r2,r2,4
 2008d8c:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 2008d90:	e0bfb117 	ldw	r2,-316(fp)
 2008d94:	e0ffb217 	ldw	r3,-312(fp)
 2008d98:	10c4b03a 	or	r2,r2,r3
 2008d9c:	103fec1e 	bne	r2,zero,2008d50 <___vfprintf_internal_r+0xeec>
					break;
 2008da0:	00000806 	br	2008dc4 <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 2008da4:	048080b4 	movhi	r18,514
 2008da8:	9486ef04 	addi	r18,r18,7100
					size = strlen (cp);
 2008dac:	9009883a 	mov	r4,r18
 2008db0:	2007c300 	call	2007c30 <strlen>
 2008db4:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 2008db8:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2008dbc:	00001906 	br	2008e24 <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 2008dc0:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 2008dc4:	00000706 	br	2008de4 <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 2008dc8:	e0bfb303 	ldbu	r2,-308(fp)
 2008dcc:	1000051e 	bne	r2,zero,2008de4 <___vfprintf_internal_r+0xf80>
 2008dd0:	9880004c 	andi	r2,r19,1
 2008dd4:	10000326 	beq	r2,zero,2008de4 <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 2008dd8:	94bfffc4 	addi	r18,r18,-1
 2008ddc:	00800c04 	movi	r2,48
 2008de0:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 2008de4:	e0bfdb04 	addi	r2,fp,-148
 2008de8:	10800a04 	addi	r2,r2,40
 2008dec:	1007883a 	mov	r3,r2
 2008df0:	9005883a 	mov	r2,r18
 2008df4:	1885c83a 	sub	r2,r3,r2
 2008df8:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 2008dfc:	00000906 	br	2008e24 <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 2008e00:	a003dc26 	beq	r20,zero,2009d74 <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 2008e04:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 2008e08:	a005883a 	mov	r2,r20
 2008e0c:	90800005 	stb	r2,0(r18)
			size = 1;
 2008e10:	00800044 	movi	r2,1
 2008e14:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 2008e18:	e03fc105 	stb	zero,-252(fp)
			break;
 2008e1c:	00000106 	br	2008e24 <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 2008e20:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 2008e24:	e0ffb417 	ldw	r3,-304(fp)
 2008e28:	e0bfb617 	ldw	r2,-296(fp)
 2008e2c:	10c0010e 	bge	r2,r3,2008e34 <___vfprintf_internal_r+0xfd0>
 2008e30:	1805883a 	mov	r2,r3
 2008e34:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 2008e38:	e0bfc103 	ldbu	r2,-252(fp)
 2008e3c:	10803fcc 	andi	r2,r2,255
 2008e40:	1080201c 	xori	r2,r2,128
 2008e44:	10bfe004 	addi	r2,r2,-128
 2008e48:	10000326 	beq	r2,zero,2008e58 <___vfprintf_internal_r+0xff4>
			realsz++;
 2008e4c:	e0bfb517 	ldw	r2,-300(fp)
 2008e50:	10800044 	addi	r2,r2,1
 2008e54:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 2008e58:	9880008c 	andi	r2,r19,2
 2008e5c:	10000326 	beq	r2,zero,2008e6c <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 2008e60:	e0bfb517 	ldw	r2,-300(fp)
 2008e64:	10800084 	addi	r2,r2,2
 2008e68:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 2008e6c:	9880210c 	andi	r2,r19,132
 2008e70:	1000351e 	bne	r2,zero,2008f48 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 2008e74:	e0ffad17 	ldw	r3,-332(fp)
 2008e78:	e0bfb517 	ldw	r2,-300(fp)
 2008e7c:	18a1c83a 	sub	r16,r3,r2
 2008e80:	0400310e 	bge	zero,r16,2008f48 <___vfprintf_internal_r+0x10e4>
 2008e84:	00001706 	br	2008ee4 <___vfprintf_internal_r+0x1080>
 2008e88:	008080b4 	movhi	r2,514
 2008e8c:	1086f684 	addi	r2,r2,7130
 2008e90:	88800015 	stw	r2,0(r17)
 2008e94:	00800404 	movi	r2,16
 2008e98:	88800115 	stw	r2,4(r17)
 2008e9c:	e0bfca17 	ldw	r2,-216(fp)
 2008ea0:	10800404 	addi	r2,r2,16
 2008ea4:	e0bfca15 	stw	r2,-216(fp)
 2008ea8:	8c400204 	addi	r17,r17,8
 2008eac:	e0bfc917 	ldw	r2,-220(fp)
 2008eb0:	10800044 	addi	r2,r2,1
 2008eb4:	e0bfc915 	stw	r2,-220(fp)
 2008eb8:	e0bfc917 	ldw	r2,-220(fp)
 2008ebc:	10800210 	cmplti	r2,r2,8
 2008ec0:	1000071e 	bne	r2,zero,2008ee0 <___vfprintf_internal_r+0x107c>
 2008ec4:	e0bfc804 	addi	r2,fp,-224
 2008ec8:	100d883a 	mov	r6,r2
 2008ecc:	e17fe717 	ldw	r5,-100(fp)
 2008ed0:	e13fe617 	ldw	r4,-104(fp)
 2008ed4:	2011cec0 	call	2011cec <__sprint_r>
 2008ed8:	1003b41e 	bne	r2,zero,2009dac <___vfprintf_internal_r+0x1f48>
 2008edc:	e47fcb04 	addi	r17,fp,-212
 2008ee0:	843ffc04 	addi	r16,r16,-16
 2008ee4:	80800448 	cmpgei	r2,r16,17
 2008ee8:	103fe71e 	bne	r2,zero,2008e88 <___vfprintf_internal_r+0x1024>
 2008eec:	008080b4 	movhi	r2,514
 2008ef0:	1086f684 	addi	r2,r2,7130
 2008ef4:	88800015 	stw	r2,0(r17)
 2008ef8:	8005883a 	mov	r2,r16
 2008efc:	88800115 	stw	r2,4(r17)
 2008f00:	e0bfca17 	ldw	r2,-216(fp)
 2008f04:	8007883a 	mov	r3,r16
 2008f08:	10c5883a 	add	r2,r2,r3
 2008f0c:	e0bfca15 	stw	r2,-216(fp)
 2008f10:	8c400204 	addi	r17,r17,8
 2008f14:	e0bfc917 	ldw	r2,-220(fp)
 2008f18:	10800044 	addi	r2,r2,1
 2008f1c:	e0bfc915 	stw	r2,-220(fp)
 2008f20:	e0bfc917 	ldw	r2,-220(fp)
 2008f24:	10800210 	cmplti	r2,r2,8
 2008f28:	1000071e 	bne	r2,zero,2008f48 <___vfprintf_internal_r+0x10e4>
 2008f2c:	e0bfc804 	addi	r2,fp,-224
 2008f30:	100d883a 	mov	r6,r2
 2008f34:	e17fe717 	ldw	r5,-100(fp)
 2008f38:	e13fe617 	ldw	r4,-104(fp)
 2008f3c:	2011cec0 	call	2011cec <__sprint_r>
 2008f40:	10039c1e 	bne	r2,zero,2009db4 <___vfprintf_internal_r+0x1f50>
 2008f44:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 2008f48:	e0bfc103 	ldbu	r2,-252(fp)
 2008f4c:	10803fcc 	andi	r2,r2,255
 2008f50:	1080201c 	xori	r2,r2,128
 2008f54:	10bfe004 	addi	r2,r2,-128
 2008f58:	10001526 	beq	r2,zero,2008fb0 <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 2008f5c:	e0bfc104 	addi	r2,fp,-252
 2008f60:	88800015 	stw	r2,0(r17)
 2008f64:	00800044 	movi	r2,1
 2008f68:	88800115 	stw	r2,4(r17)
 2008f6c:	e0bfca17 	ldw	r2,-216(fp)
 2008f70:	10800044 	addi	r2,r2,1
 2008f74:	e0bfca15 	stw	r2,-216(fp)
 2008f78:	8c400204 	addi	r17,r17,8
 2008f7c:	e0bfc917 	ldw	r2,-220(fp)
 2008f80:	10800044 	addi	r2,r2,1
 2008f84:	e0bfc915 	stw	r2,-220(fp)
 2008f88:	e0bfc917 	ldw	r2,-220(fp)
 2008f8c:	10800210 	cmplti	r2,r2,8
 2008f90:	1000071e 	bne	r2,zero,2008fb0 <___vfprintf_internal_r+0x114c>
 2008f94:	e0bfc804 	addi	r2,fp,-224
 2008f98:	100d883a 	mov	r6,r2
 2008f9c:	e17fe717 	ldw	r5,-100(fp)
 2008fa0:	e13fe617 	ldw	r4,-104(fp)
 2008fa4:	2011cec0 	call	2011cec <__sprint_r>
 2008fa8:	1003841e 	bne	r2,zero,2009dbc <___vfprintf_internal_r+0x1f58>
 2008fac:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 2008fb0:	9880008c 	andi	r2,r19,2
 2008fb4:	10001526 	beq	r2,zero,200900c <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 2008fb8:	e0bfe504 	addi	r2,fp,-108
 2008fbc:	88800015 	stw	r2,0(r17)
 2008fc0:	00800084 	movi	r2,2
 2008fc4:	88800115 	stw	r2,4(r17)
 2008fc8:	e0bfca17 	ldw	r2,-216(fp)
 2008fcc:	10800084 	addi	r2,r2,2
 2008fd0:	e0bfca15 	stw	r2,-216(fp)
 2008fd4:	8c400204 	addi	r17,r17,8
 2008fd8:	e0bfc917 	ldw	r2,-220(fp)
 2008fdc:	10800044 	addi	r2,r2,1
 2008fe0:	e0bfc915 	stw	r2,-220(fp)
 2008fe4:	e0bfc917 	ldw	r2,-220(fp)
 2008fe8:	10800210 	cmplti	r2,r2,8
 2008fec:	1000071e 	bne	r2,zero,200900c <___vfprintf_internal_r+0x11a8>
 2008ff0:	e0bfc804 	addi	r2,fp,-224
 2008ff4:	100d883a 	mov	r6,r2
 2008ff8:	e17fe717 	ldw	r5,-100(fp)
 2008ffc:	e13fe617 	ldw	r4,-104(fp)
 2009000:	2011cec0 	call	2011cec <__sprint_r>
 2009004:	10036f1e 	bne	r2,zero,2009dc4 <___vfprintf_internal_r+0x1f60>
 2009008:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 200900c:	9880210c 	andi	r2,r19,132
 2009010:	10802018 	cmpnei	r2,r2,128
 2009014:	1000351e 	bne	r2,zero,20090ec <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 2009018:	e0ffad17 	ldw	r3,-332(fp)
 200901c:	e0bfb517 	ldw	r2,-300(fp)
 2009020:	18a1c83a 	sub	r16,r3,r2
 2009024:	0400310e 	bge	zero,r16,20090ec <___vfprintf_internal_r+0x1288>
 2009028:	00001706 	br	2009088 <___vfprintf_internal_r+0x1224>
 200902c:	008080b4 	movhi	r2,514
 2009030:	1086fa84 	addi	r2,r2,7146
 2009034:	88800015 	stw	r2,0(r17)
 2009038:	00800404 	movi	r2,16
 200903c:	88800115 	stw	r2,4(r17)
 2009040:	e0bfca17 	ldw	r2,-216(fp)
 2009044:	10800404 	addi	r2,r2,16
 2009048:	e0bfca15 	stw	r2,-216(fp)
 200904c:	8c400204 	addi	r17,r17,8
 2009050:	e0bfc917 	ldw	r2,-220(fp)
 2009054:	10800044 	addi	r2,r2,1
 2009058:	e0bfc915 	stw	r2,-220(fp)
 200905c:	e0bfc917 	ldw	r2,-220(fp)
 2009060:	10800210 	cmplti	r2,r2,8
 2009064:	1000071e 	bne	r2,zero,2009084 <___vfprintf_internal_r+0x1220>
 2009068:	e0bfc804 	addi	r2,fp,-224
 200906c:	100d883a 	mov	r6,r2
 2009070:	e17fe717 	ldw	r5,-100(fp)
 2009074:	e13fe617 	ldw	r4,-104(fp)
 2009078:	2011cec0 	call	2011cec <__sprint_r>
 200907c:	1003531e 	bne	r2,zero,2009dcc <___vfprintf_internal_r+0x1f68>
 2009080:	e47fcb04 	addi	r17,fp,-212
 2009084:	843ffc04 	addi	r16,r16,-16
 2009088:	80800448 	cmpgei	r2,r16,17
 200908c:	103fe71e 	bne	r2,zero,200902c <___vfprintf_internal_r+0x11c8>
 2009090:	008080b4 	movhi	r2,514
 2009094:	1086fa84 	addi	r2,r2,7146
 2009098:	88800015 	stw	r2,0(r17)
 200909c:	8005883a 	mov	r2,r16
 20090a0:	88800115 	stw	r2,4(r17)
 20090a4:	e0bfca17 	ldw	r2,-216(fp)
 20090a8:	8007883a 	mov	r3,r16
 20090ac:	10c5883a 	add	r2,r2,r3
 20090b0:	e0bfca15 	stw	r2,-216(fp)
 20090b4:	8c400204 	addi	r17,r17,8
 20090b8:	e0bfc917 	ldw	r2,-220(fp)
 20090bc:	10800044 	addi	r2,r2,1
 20090c0:	e0bfc915 	stw	r2,-220(fp)
 20090c4:	e0bfc917 	ldw	r2,-220(fp)
 20090c8:	10800210 	cmplti	r2,r2,8
 20090cc:	1000071e 	bne	r2,zero,20090ec <___vfprintf_internal_r+0x1288>
 20090d0:	e0bfc804 	addi	r2,fp,-224
 20090d4:	100d883a 	mov	r6,r2
 20090d8:	e17fe717 	ldw	r5,-100(fp)
 20090dc:	e13fe617 	ldw	r4,-104(fp)
 20090e0:	2011cec0 	call	2011cec <__sprint_r>
 20090e4:	10033b1e 	bne	r2,zero,2009dd4 <___vfprintf_internal_r+0x1f70>
 20090e8:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 20090ec:	e0ffb417 	ldw	r3,-304(fp)
 20090f0:	e0bfb617 	ldw	r2,-296(fp)
 20090f4:	18a1c83a 	sub	r16,r3,r2
 20090f8:	0400310e 	bge	zero,r16,20091c0 <___vfprintf_internal_r+0x135c>
 20090fc:	00001706 	br	200915c <___vfprintf_internal_r+0x12f8>
 2009100:	008080b4 	movhi	r2,514
 2009104:	1086fa84 	addi	r2,r2,7146
 2009108:	88800015 	stw	r2,0(r17)
 200910c:	00800404 	movi	r2,16
 2009110:	88800115 	stw	r2,4(r17)
 2009114:	e0bfca17 	ldw	r2,-216(fp)
 2009118:	10800404 	addi	r2,r2,16
 200911c:	e0bfca15 	stw	r2,-216(fp)
 2009120:	8c400204 	addi	r17,r17,8
 2009124:	e0bfc917 	ldw	r2,-220(fp)
 2009128:	10800044 	addi	r2,r2,1
 200912c:	e0bfc915 	stw	r2,-220(fp)
 2009130:	e0bfc917 	ldw	r2,-220(fp)
 2009134:	10800210 	cmplti	r2,r2,8
 2009138:	1000071e 	bne	r2,zero,2009158 <___vfprintf_internal_r+0x12f4>
 200913c:	e0bfc804 	addi	r2,fp,-224
 2009140:	100d883a 	mov	r6,r2
 2009144:	e17fe717 	ldw	r5,-100(fp)
 2009148:	e13fe617 	ldw	r4,-104(fp)
 200914c:	2011cec0 	call	2011cec <__sprint_r>
 2009150:	1003221e 	bne	r2,zero,2009ddc <___vfprintf_internal_r+0x1f78>
 2009154:	e47fcb04 	addi	r17,fp,-212
 2009158:	843ffc04 	addi	r16,r16,-16
 200915c:	80800448 	cmpgei	r2,r16,17
 2009160:	103fe71e 	bne	r2,zero,2009100 <___vfprintf_internal_r+0x129c>
 2009164:	008080b4 	movhi	r2,514
 2009168:	1086fa84 	addi	r2,r2,7146
 200916c:	88800015 	stw	r2,0(r17)
 2009170:	8005883a 	mov	r2,r16
 2009174:	88800115 	stw	r2,4(r17)
 2009178:	e0bfca17 	ldw	r2,-216(fp)
 200917c:	8007883a 	mov	r3,r16
 2009180:	10c5883a 	add	r2,r2,r3
 2009184:	e0bfca15 	stw	r2,-216(fp)
 2009188:	8c400204 	addi	r17,r17,8
 200918c:	e0bfc917 	ldw	r2,-220(fp)
 2009190:	10800044 	addi	r2,r2,1
 2009194:	e0bfc915 	stw	r2,-220(fp)
 2009198:	e0bfc917 	ldw	r2,-220(fp)
 200919c:	10800210 	cmplti	r2,r2,8
 20091a0:	1000071e 	bne	r2,zero,20091c0 <___vfprintf_internal_r+0x135c>
 20091a4:	e0bfc804 	addi	r2,fp,-224
 20091a8:	100d883a 	mov	r6,r2
 20091ac:	e17fe717 	ldw	r5,-100(fp)
 20091b0:	e13fe617 	ldw	r4,-104(fp)
 20091b4:	2011cec0 	call	2011cec <__sprint_r>
 20091b8:	10030a1e 	bne	r2,zero,2009de4 <___vfprintf_internal_r+0x1f80>
 20091bc:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 20091c0:	9880400c 	andi	r2,r19,256
 20091c4:	1000161e 	bne	r2,zero,2009220 <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 20091c8:	8c800015 	stw	r18,0(r17)
 20091cc:	e0bfb617 	ldw	r2,-296(fp)
 20091d0:	88800115 	stw	r2,4(r17)
 20091d4:	e0ffca17 	ldw	r3,-216(fp)
 20091d8:	e0bfb617 	ldw	r2,-296(fp)
 20091dc:	1885883a 	add	r2,r3,r2
 20091e0:	e0bfca15 	stw	r2,-216(fp)
 20091e4:	8c400204 	addi	r17,r17,8
 20091e8:	e0bfc917 	ldw	r2,-220(fp)
 20091ec:	10800044 	addi	r2,r2,1
 20091f0:	e0bfc915 	stw	r2,-220(fp)
 20091f4:	e0bfc917 	ldw	r2,-220(fp)
 20091f8:	10800210 	cmplti	r2,r2,8
 20091fc:	10028c1e 	bne	r2,zero,2009c30 <___vfprintf_internal_r+0x1dcc>
 2009200:	e0bfc804 	addi	r2,fp,-224
 2009204:	100d883a 	mov	r6,r2
 2009208:	e17fe717 	ldw	r5,-100(fp)
 200920c:	e13fe617 	ldw	r4,-104(fp)
 2009210:	2011cec0 	call	2011cec <__sprint_r>
 2009214:	1002f51e 	bne	r2,zero,2009dec <___vfprintf_internal_r+0x1f88>
 2009218:	e47fcb04 	addi	r17,fp,-212
 200921c:	00028406 	br	2009c30 <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 2009220:	a0801990 	cmplti	r2,r20,102
 2009224:	1001d11e 	bne	r2,zero,200996c <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 2009228:	e0bfc217 	ldw	r2,-248(fp)
 200922c:	e0ffc317 	ldw	r3,-244(fp)
 2009230:	000d883a 	mov	r6,zero
 2009234:	000f883a 	mov	r7,zero
 2009238:	1009883a 	mov	r4,r2
 200923c:	180b883a 	mov	r5,r3
 2009240:	20068680 	call	2006868 <__eqdf2>
 2009244:	1000661e 	bne	r2,zero,20093e0 <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2009248:	008080b4 	movhi	r2,514
 200924c:	1086f604 	addi	r2,r2,7128
 2009250:	88800015 	stw	r2,0(r17)
 2009254:	00800044 	movi	r2,1
 2009258:	88800115 	stw	r2,4(r17)
 200925c:	e0bfca17 	ldw	r2,-216(fp)
 2009260:	10800044 	addi	r2,r2,1
 2009264:	e0bfca15 	stw	r2,-216(fp)
 2009268:	8c400204 	addi	r17,r17,8
 200926c:	e0bfc917 	ldw	r2,-220(fp)
 2009270:	10800044 	addi	r2,r2,1
 2009274:	e0bfc915 	stw	r2,-220(fp)
 2009278:	e0bfc917 	ldw	r2,-220(fp)
 200927c:	10800210 	cmplti	r2,r2,8
 2009280:	1000071e 	bne	r2,zero,20092a0 <___vfprintf_internal_r+0x143c>
 2009284:	e0bfc804 	addi	r2,fp,-224
 2009288:	100d883a 	mov	r6,r2
 200928c:	e17fe717 	ldw	r5,-100(fp)
 2009290:	e13fe617 	ldw	r4,-104(fp)
 2009294:	2011cec0 	call	2011cec <__sprint_r>
 2009298:	1002d61e 	bne	r2,zero,2009df4 <___vfprintf_internal_r+0x1f90>
 200929c:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 20092a0:	e0ffc417 	ldw	r3,-240(fp)
 20092a4:	e0bfc717 	ldw	r2,-228(fp)
 20092a8:	18800216 	blt	r3,r2,20092b4 <___vfprintf_internal_r+0x1450>
 20092ac:	9880004c 	andi	r2,r19,1
 20092b0:	10025f26 	beq	r2,zero,2009c30 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 20092b4:	e0bfbb17 	ldw	r2,-276(fp)
 20092b8:	88800015 	stw	r2,0(r17)
 20092bc:	e0bfbc17 	ldw	r2,-272(fp)
 20092c0:	88800115 	stw	r2,4(r17)
 20092c4:	e0ffca17 	ldw	r3,-216(fp)
 20092c8:	e0bfbc17 	ldw	r2,-272(fp)
 20092cc:	1885883a 	add	r2,r3,r2
 20092d0:	e0bfca15 	stw	r2,-216(fp)
 20092d4:	8c400204 	addi	r17,r17,8
 20092d8:	e0bfc917 	ldw	r2,-220(fp)
 20092dc:	10800044 	addi	r2,r2,1
 20092e0:	e0bfc915 	stw	r2,-220(fp)
 20092e4:	e0bfc917 	ldw	r2,-220(fp)
 20092e8:	10800210 	cmplti	r2,r2,8
 20092ec:	1000071e 	bne	r2,zero,200930c <___vfprintf_internal_r+0x14a8>
 20092f0:	e0bfc804 	addi	r2,fp,-224
 20092f4:	100d883a 	mov	r6,r2
 20092f8:	e17fe717 	ldw	r5,-100(fp)
 20092fc:	e13fe617 	ldw	r4,-104(fp)
 2009300:	2011cec0 	call	2011cec <__sprint_r>
 2009304:	1002bd1e 	bne	r2,zero,2009dfc <___vfprintf_internal_r+0x1f98>
 2009308:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 200930c:	e0bfc717 	ldw	r2,-228(fp)
 2009310:	143fffc4 	addi	r16,r2,-1
 2009314:	0402460e 	bge	zero,r16,2009c30 <___vfprintf_internal_r+0x1dcc>
 2009318:	00001706 	br	2009378 <___vfprintf_internal_r+0x1514>
 200931c:	008080b4 	movhi	r2,514
 2009320:	1086fa84 	addi	r2,r2,7146
 2009324:	88800015 	stw	r2,0(r17)
 2009328:	00800404 	movi	r2,16
 200932c:	88800115 	stw	r2,4(r17)
 2009330:	e0bfca17 	ldw	r2,-216(fp)
 2009334:	10800404 	addi	r2,r2,16
 2009338:	e0bfca15 	stw	r2,-216(fp)
 200933c:	8c400204 	addi	r17,r17,8
 2009340:	e0bfc917 	ldw	r2,-220(fp)
 2009344:	10800044 	addi	r2,r2,1
 2009348:	e0bfc915 	stw	r2,-220(fp)
 200934c:	e0bfc917 	ldw	r2,-220(fp)
 2009350:	10800210 	cmplti	r2,r2,8
 2009354:	1000071e 	bne	r2,zero,2009374 <___vfprintf_internal_r+0x1510>
 2009358:	e0bfc804 	addi	r2,fp,-224
 200935c:	100d883a 	mov	r6,r2
 2009360:	e17fe717 	ldw	r5,-100(fp)
 2009364:	e13fe617 	ldw	r4,-104(fp)
 2009368:	2011cec0 	call	2011cec <__sprint_r>
 200936c:	1002a51e 	bne	r2,zero,2009e04 <___vfprintf_internal_r+0x1fa0>
 2009370:	e47fcb04 	addi	r17,fp,-212
 2009374:	843ffc04 	addi	r16,r16,-16
 2009378:	80800448 	cmpgei	r2,r16,17
 200937c:	103fe71e 	bne	r2,zero,200931c <___vfprintf_internal_r+0x14b8>
 2009380:	008080b4 	movhi	r2,514
 2009384:	1086fa84 	addi	r2,r2,7146
 2009388:	88800015 	stw	r2,0(r17)
 200938c:	8005883a 	mov	r2,r16
 2009390:	88800115 	stw	r2,4(r17)
 2009394:	e0bfca17 	ldw	r2,-216(fp)
 2009398:	8007883a 	mov	r3,r16
 200939c:	10c5883a 	add	r2,r2,r3
 20093a0:	e0bfca15 	stw	r2,-216(fp)
 20093a4:	8c400204 	addi	r17,r17,8
 20093a8:	e0bfc917 	ldw	r2,-220(fp)
 20093ac:	10800044 	addi	r2,r2,1
 20093b0:	e0bfc915 	stw	r2,-220(fp)
 20093b4:	e0bfc917 	ldw	r2,-220(fp)
 20093b8:	10800210 	cmplti	r2,r2,8
 20093bc:	10021c1e 	bne	r2,zero,2009c30 <___vfprintf_internal_r+0x1dcc>
 20093c0:	e0bfc804 	addi	r2,fp,-224
 20093c4:	100d883a 	mov	r6,r2
 20093c8:	e17fe717 	ldw	r5,-100(fp)
 20093cc:	e13fe617 	ldw	r4,-104(fp)
 20093d0:	2011cec0 	call	2011cec <__sprint_r>
 20093d4:	10028d1e 	bne	r2,zero,2009e0c <___vfprintf_internal_r+0x1fa8>
 20093d8:	e47fcb04 	addi	r17,fp,-212
 20093dc:	00021406 	br	2009c30 <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 20093e0:	e0bfc417 	ldw	r2,-240(fp)
 20093e4:	00807c16 	blt	zero,r2,20095d8 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 20093e8:	008080b4 	movhi	r2,514
 20093ec:	1086f604 	addi	r2,r2,7128
 20093f0:	88800015 	stw	r2,0(r17)
 20093f4:	00800044 	movi	r2,1
 20093f8:	88800115 	stw	r2,4(r17)
 20093fc:	e0bfca17 	ldw	r2,-216(fp)
 2009400:	10800044 	addi	r2,r2,1
 2009404:	e0bfca15 	stw	r2,-216(fp)
 2009408:	8c400204 	addi	r17,r17,8
 200940c:	e0bfc917 	ldw	r2,-220(fp)
 2009410:	10800044 	addi	r2,r2,1
 2009414:	e0bfc915 	stw	r2,-220(fp)
 2009418:	e0bfc917 	ldw	r2,-220(fp)
 200941c:	10800210 	cmplti	r2,r2,8
 2009420:	1000071e 	bne	r2,zero,2009440 <___vfprintf_internal_r+0x15dc>
 2009424:	e0bfc804 	addi	r2,fp,-224
 2009428:	100d883a 	mov	r6,r2
 200942c:	e17fe717 	ldw	r5,-100(fp)
 2009430:	e13fe617 	ldw	r4,-104(fp)
 2009434:	2011cec0 	call	2011cec <__sprint_r>
 2009438:	1002761e 	bne	r2,zero,2009e14 <___vfprintf_internal_r+0x1fb0>
 200943c:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 2009440:	e0bfc417 	ldw	r2,-240(fp)
 2009444:	1000041e 	bne	r2,zero,2009458 <___vfprintf_internal_r+0x15f4>
 2009448:	e0bfc717 	ldw	r2,-228(fp)
 200944c:	1000021e 	bne	r2,zero,2009458 <___vfprintf_internal_r+0x15f4>
 2009450:	9880004c 	andi	r2,r19,1
 2009454:	1001f626 	beq	r2,zero,2009c30 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 2009458:	e0bfbb17 	ldw	r2,-276(fp)
 200945c:	88800015 	stw	r2,0(r17)
 2009460:	e0bfbc17 	ldw	r2,-272(fp)
 2009464:	88800115 	stw	r2,4(r17)
 2009468:	e0ffca17 	ldw	r3,-216(fp)
 200946c:	e0bfbc17 	ldw	r2,-272(fp)
 2009470:	1885883a 	add	r2,r3,r2
 2009474:	e0bfca15 	stw	r2,-216(fp)
 2009478:	8c400204 	addi	r17,r17,8
 200947c:	e0bfc917 	ldw	r2,-220(fp)
 2009480:	10800044 	addi	r2,r2,1
 2009484:	e0bfc915 	stw	r2,-220(fp)
 2009488:	e0bfc917 	ldw	r2,-220(fp)
 200948c:	10800210 	cmplti	r2,r2,8
 2009490:	1000071e 	bne	r2,zero,20094b0 <___vfprintf_internal_r+0x164c>
 2009494:	e0bfc804 	addi	r2,fp,-224
 2009498:	100d883a 	mov	r6,r2
 200949c:	e17fe717 	ldw	r5,-100(fp)
 20094a0:	e13fe617 	ldw	r4,-104(fp)
 20094a4:	2011cec0 	call	2011cec <__sprint_r>
 20094a8:	10025c1e 	bne	r2,zero,2009e1c <___vfprintf_internal_r+0x1fb8>
 20094ac:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 20094b0:	e0bfc417 	ldw	r2,-240(fp)
 20094b4:	00a1c83a 	sub	r16,zero,r2
 20094b8:	0400310e 	bge	zero,r16,2009580 <___vfprintf_internal_r+0x171c>
 20094bc:	00001706 	br	200951c <___vfprintf_internal_r+0x16b8>
 20094c0:	008080b4 	movhi	r2,514
 20094c4:	1086fa84 	addi	r2,r2,7146
 20094c8:	88800015 	stw	r2,0(r17)
 20094cc:	00800404 	movi	r2,16
 20094d0:	88800115 	stw	r2,4(r17)
 20094d4:	e0bfca17 	ldw	r2,-216(fp)
 20094d8:	10800404 	addi	r2,r2,16
 20094dc:	e0bfca15 	stw	r2,-216(fp)
 20094e0:	8c400204 	addi	r17,r17,8
 20094e4:	e0bfc917 	ldw	r2,-220(fp)
 20094e8:	10800044 	addi	r2,r2,1
 20094ec:	e0bfc915 	stw	r2,-220(fp)
 20094f0:	e0bfc917 	ldw	r2,-220(fp)
 20094f4:	10800210 	cmplti	r2,r2,8
 20094f8:	1000071e 	bne	r2,zero,2009518 <___vfprintf_internal_r+0x16b4>
 20094fc:	e0bfc804 	addi	r2,fp,-224
 2009500:	100d883a 	mov	r6,r2
 2009504:	e17fe717 	ldw	r5,-100(fp)
 2009508:	e13fe617 	ldw	r4,-104(fp)
 200950c:	2011cec0 	call	2011cec <__sprint_r>
 2009510:	1002441e 	bne	r2,zero,2009e24 <___vfprintf_internal_r+0x1fc0>
 2009514:	e47fcb04 	addi	r17,fp,-212
 2009518:	843ffc04 	addi	r16,r16,-16
 200951c:	80800448 	cmpgei	r2,r16,17
 2009520:	103fe71e 	bne	r2,zero,20094c0 <___vfprintf_internal_r+0x165c>
 2009524:	008080b4 	movhi	r2,514
 2009528:	1086fa84 	addi	r2,r2,7146
 200952c:	88800015 	stw	r2,0(r17)
 2009530:	8005883a 	mov	r2,r16
 2009534:	88800115 	stw	r2,4(r17)
 2009538:	e0bfca17 	ldw	r2,-216(fp)
 200953c:	8007883a 	mov	r3,r16
 2009540:	10c5883a 	add	r2,r2,r3
 2009544:	e0bfca15 	stw	r2,-216(fp)
 2009548:	8c400204 	addi	r17,r17,8
 200954c:	e0bfc917 	ldw	r2,-220(fp)
 2009550:	10800044 	addi	r2,r2,1
 2009554:	e0bfc915 	stw	r2,-220(fp)
 2009558:	e0bfc917 	ldw	r2,-220(fp)
 200955c:	10800210 	cmplti	r2,r2,8
 2009560:	1000071e 	bne	r2,zero,2009580 <___vfprintf_internal_r+0x171c>
 2009564:	e0bfc804 	addi	r2,fp,-224
 2009568:	100d883a 	mov	r6,r2
 200956c:	e17fe717 	ldw	r5,-100(fp)
 2009570:	e13fe617 	ldw	r4,-104(fp)
 2009574:	2011cec0 	call	2011cec <__sprint_r>
 2009578:	10022c1e 	bne	r2,zero,2009e2c <___vfprintf_internal_r+0x1fc8>
 200957c:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 2009580:	8c800015 	stw	r18,0(r17)
 2009584:	e0bfc717 	ldw	r2,-228(fp)
 2009588:	88800115 	stw	r2,4(r17)
 200958c:	e0bfca17 	ldw	r2,-216(fp)
 2009590:	e0ffc717 	ldw	r3,-228(fp)
 2009594:	10c5883a 	add	r2,r2,r3
 2009598:	e0bfca15 	stw	r2,-216(fp)
 200959c:	8c400204 	addi	r17,r17,8
 20095a0:	e0bfc917 	ldw	r2,-220(fp)
 20095a4:	10800044 	addi	r2,r2,1
 20095a8:	e0bfc915 	stw	r2,-220(fp)
 20095ac:	e0bfc917 	ldw	r2,-220(fp)
 20095b0:	10800210 	cmplti	r2,r2,8
 20095b4:	10019e1e 	bne	r2,zero,2009c30 <___vfprintf_internal_r+0x1dcc>
 20095b8:	e0bfc804 	addi	r2,fp,-224
 20095bc:	100d883a 	mov	r6,r2
 20095c0:	e17fe717 	ldw	r5,-100(fp)
 20095c4:	e13fe617 	ldw	r4,-104(fp)
 20095c8:	2011cec0 	call	2011cec <__sprint_r>
 20095cc:	1002191e 	bne	r2,zero,2009e34 <___vfprintf_internal_r+0x1fd0>
 20095d0:	e47fcb04 	addi	r17,fp,-212
 20095d4:	00019606 	br	2009c30 <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 20095d8:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 20095dc:	e0bfc717 	ldw	r2,-228(fp)
 20095e0:	1007883a 	mov	r3,r2
 20095e4:	e0bfc017 	ldw	r2,-256(fp)
 20095e8:	10c5883a 	add	r2,r2,r3
 20095ec:	1007883a 	mov	r3,r2
 20095f0:	9005883a 	mov	r2,r18
 20095f4:	1885c83a 	sub	r2,r3,r2
 20095f8:	e0bfb915 	stw	r2,-284(fp)
 20095fc:	e0bfb917 	ldw	r2,-284(fp)
 2009600:	e0ffb017 	ldw	r3,-320(fp)
 2009604:	1880020e 	bge	r3,r2,2009610 <___vfprintf_internal_r+0x17ac>
 2009608:	e0bfb017 	ldw	r2,-320(fp)
 200960c:	e0bfb915 	stw	r2,-284(fp)
 2009610:	e0bfb917 	ldw	r2,-284(fp)
 2009614:	0080150e 	bge	zero,r2,200966c <___vfprintf_internal_r+0x1808>
 2009618:	8c800015 	stw	r18,0(r17)
 200961c:	e0bfb917 	ldw	r2,-284(fp)
 2009620:	88800115 	stw	r2,4(r17)
 2009624:	e0ffca17 	ldw	r3,-216(fp)
 2009628:	e0bfb917 	ldw	r2,-284(fp)
 200962c:	1885883a 	add	r2,r3,r2
 2009630:	e0bfca15 	stw	r2,-216(fp)
 2009634:	8c400204 	addi	r17,r17,8
 2009638:	e0bfc917 	ldw	r2,-220(fp)
 200963c:	10800044 	addi	r2,r2,1
 2009640:	e0bfc915 	stw	r2,-220(fp)
 2009644:	e0bfc917 	ldw	r2,-220(fp)
 2009648:	10800210 	cmplti	r2,r2,8
 200964c:	1000071e 	bne	r2,zero,200966c <___vfprintf_internal_r+0x1808>
 2009650:	e0bfc804 	addi	r2,fp,-224
 2009654:	100d883a 	mov	r6,r2
 2009658:	e17fe717 	ldw	r5,-100(fp)
 200965c:	e13fe617 	ldw	r4,-104(fp)
 2009660:	2011cec0 	call	2011cec <__sprint_r>
 2009664:	1001f51e 	bne	r2,zero,2009e3c <___vfprintf_internal_r+0x1fd8>
 2009668:	e47fcb04 	addi	r17,fp,-212
 200966c:	e0bfb917 	ldw	r2,-284(fp)
 2009670:	1000010e 	bge	r2,zero,2009678 <___vfprintf_internal_r+0x1814>
 2009674:	0005883a 	mov	r2,zero
 2009678:	e0ffb017 	ldw	r3,-320(fp)
 200967c:	1885c83a 	sub	r2,r3,r2
 2009680:	e0bfb915 	stw	r2,-284(fp)
 2009684:	e0bfb917 	ldw	r2,-284(fp)
 2009688:	0080340e 	bge	zero,r2,200975c <___vfprintf_internal_r+0x18f8>
 200968c:	00001906 	br	20096f4 <___vfprintf_internal_r+0x1890>
 2009690:	008080b4 	movhi	r2,514
 2009694:	1086fa84 	addi	r2,r2,7146
 2009698:	88800015 	stw	r2,0(r17)
 200969c:	00800404 	movi	r2,16
 20096a0:	88800115 	stw	r2,4(r17)
 20096a4:	e0bfca17 	ldw	r2,-216(fp)
 20096a8:	10800404 	addi	r2,r2,16
 20096ac:	e0bfca15 	stw	r2,-216(fp)
 20096b0:	8c400204 	addi	r17,r17,8
 20096b4:	e0bfc917 	ldw	r2,-220(fp)
 20096b8:	10800044 	addi	r2,r2,1
 20096bc:	e0bfc915 	stw	r2,-220(fp)
 20096c0:	e0bfc917 	ldw	r2,-220(fp)
 20096c4:	10800210 	cmplti	r2,r2,8
 20096c8:	1000071e 	bne	r2,zero,20096e8 <___vfprintf_internal_r+0x1884>
 20096cc:	e0bfc804 	addi	r2,fp,-224
 20096d0:	100d883a 	mov	r6,r2
 20096d4:	e17fe717 	ldw	r5,-100(fp)
 20096d8:	e13fe617 	ldw	r4,-104(fp)
 20096dc:	2011cec0 	call	2011cec <__sprint_r>
 20096e0:	1001d81e 	bne	r2,zero,2009e44 <___vfprintf_internal_r+0x1fe0>
 20096e4:	e47fcb04 	addi	r17,fp,-212
 20096e8:	e0bfb917 	ldw	r2,-284(fp)
 20096ec:	10bffc04 	addi	r2,r2,-16
 20096f0:	e0bfb915 	stw	r2,-284(fp)
 20096f4:	e0bfb917 	ldw	r2,-284(fp)
 20096f8:	10800448 	cmpgei	r2,r2,17
 20096fc:	103fe41e 	bne	r2,zero,2009690 <___vfprintf_internal_r+0x182c>
 2009700:	008080b4 	movhi	r2,514
 2009704:	1086fa84 	addi	r2,r2,7146
 2009708:	88800015 	stw	r2,0(r17)
 200970c:	e0bfb917 	ldw	r2,-284(fp)
 2009710:	88800115 	stw	r2,4(r17)
 2009714:	e0ffca17 	ldw	r3,-216(fp)
 2009718:	e0bfb917 	ldw	r2,-284(fp)
 200971c:	1885883a 	add	r2,r3,r2
 2009720:	e0bfca15 	stw	r2,-216(fp)
 2009724:	8c400204 	addi	r17,r17,8
 2009728:	e0bfc917 	ldw	r2,-220(fp)
 200972c:	10800044 	addi	r2,r2,1
 2009730:	e0bfc915 	stw	r2,-220(fp)
 2009734:	e0bfc917 	ldw	r2,-220(fp)
 2009738:	10800210 	cmplti	r2,r2,8
 200973c:	1000071e 	bne	r2,zero,200975c <___vfprintf_internal_r+0x18f8>
 2009740:	e0bfc804 	addi	r2,fp,-224
 2009744:	100d883a 	mov	r6,r2
 2009748:	e17fe717 	ldw	r5,-100(fp)
 200974c:	e13fe617 	ldw	r4,-104(fp)
 2009750:	2011cec0 	call	2011cec <__sprint_r>
 2009754:	1001bd1e 	bne	r2,zero,2009e4c <___vfprintf_internal_r+0x1fe8>
 2009758:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 200975c:	e0bfb017 	ldw	r2,-320(fp)
 2009760:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 2009764:	e0ffc417 	ldw	r3,-240(fp)
 2009768:	e0bfc717 	ldw	r2,-228(fp)
 200976c:	18800216 	blt	r3,r2,2009778 <___vfprintf_internal_r+0x1914>
 2009770:	9880004c 	andi	r2,r19,1
 2009774:	10001626 	beq	r2,zero,20097d0 <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 2009778:	e0bfbb17 	ldw	r2,-276(fp)
 200977c:	88800015 	stw	r2,0(r17)
 2009780:	e0bfbc17 	ldw	r2,-272(fp)
 2009784:	88800115 	stw	r2,4(r17)
 2009788:	e0ffca17 	ldw	r3,-216(fp)
 200978c:	e0bfbc17 	ldw	r2,-272(fp)
 2009790:	1885883a 	add	r2,r3,r2
 2009794:	e0bfca15 	stw	r2,-216(fp)
 2009798:	8c400204 	addi	r17,r17,8
 200979c:	e0bfc917 	ldw	r2,-220(fp)
 20097a0:	10800044 	addi	r2,r2,1
 20097a4:	e0bfc915 	stw	r2,-220(fp)
 20097a8:	e0bfc917 	ldw	r2,-220(fp)
 20097ac:	10800210 	cmplti	r2,r2,8
 20097b0:	1000071e 	bne	r2,zero,20097d0 <___vfprintf_internal_r+0x196c>
 20097b4:	e0bfc804 	addi	r2,fp,-224
 20097b8:	100d883a 	mov	r6,r2
 20097bc:	e17fe717 	ldw	r5,-100(fp)
 20097c0:	e13fe617 	ldw	r4,-104(fp)
 20097c4:	2011cec0 	call	2011cec <__sprint_r>
 20097c8:	1001a21e 	bne	r2,zero,2009e54 <___vfprintf_internal_r+0x1ff0>
 20097cc:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 20097d0:	e0bfc717 	ldw	r2,-228(fp)
 20097d4:	1007883a 	mov	r3,r2
 20097d8:	e0bfc017 	ldw	r2,-256(fp)
 20097dc:	10c5883a 	add	r2,r2,r3
 20097e0:	1007883a 	mov	r3,r2
 20097e4:	9005883a 	mov	r2,r18
 20097e8:	1885c83a 	sub	r2,r3,r2
 20097ec:	e0bfba15 	stw	r2,-280(fp)
 20097f0:	e0ffc717 	ldw	r3,-228(fp)
 20097f4:	e0bfc417 	ldw	r2,-240(fp)
 20097f8:	1887c83a 	sub	r3,r3,r2
 20097fc:	e0bfba17 	ldw	r2,-280(fp)
 2009800:	1880040e 	bge	r3,r2,2009814 <___vfprintf_internal_r+0x19b0>
 2009804:	e0ffc717 	ldw	r3,-228(fp)
 2009808:	e0bfc417 	ldw	r2,-240(fp)
 200980c:	1885c83a 	sub	r2,r3,r2
 2009810:	e0bfba15 	stw	r2,-280(fp)
 2009814:	e0bfba17 	ldw	r2,-280(fp)
 2009818:	0080150e 	bge	zero,r2,2009870 <___vfprintf_internal_r+0x1a0c>
 200981c:	8c800015 	stw	r18,0(r17)
 2009820:	e0bfba17 	ldw	r2,-280(fp)
 2009824:	88800115 	stw	r2,4(r17)
 2009828:	e0ffca17 	ldw	r3,-216(fp)
 200982c:	e0bfba17 	ldw	r2,-280(fp)
 2009830:	1885883a 	add	r2,r3,r2
 2009834:	e0bfca15 	stw	r2,-216(fp)
 2009838:	8c400204 	addi	r17,r17,8
 200983c:	e0bfc917 	ldw	r2,-220(fp)
 2009840:	10800044 	addi	r2,r2,1
 2009844:	e0bfc915 	stw	r2,-220(fp)
 2009848:	e0bfc917 	ldw	r2,-220(fp)
 200984c:	10800210 	cmplti	r2,r2,8
 2009850:	1000071e 	bne	r2,zero,2009870 <___vfprintf_internal_r+0x1a0c>
 2009854:	e0bfc804 	addi	r2,fp,-224
 2009858:	100d883a 	mov	r6,r2
 200985c:	e17fe717 	ldw	r5,-100(fp)
 2009860:	e13fe617 	ldw	r4,-104(fp)
 2009864:	2011cec0 	call	2011cec <__sprint_r>
 2009868:	10017c1e 	bne	r2,zero,2009e5c <___vfprintf_internal_r+0x1ff8>
 200986c:	e47fcb04 	addi	r17,fp,-212
 2009870:	e0ffc717 	ldw	r3,-228(fp)
 2009874:	e0bfc417 	ldw	r2,-240(fp)
 2009878:	1887c83a 	sub	r3,r3,r2
 200987c:	e0bfba17 	ldw	r2,-280(fp)
 2009880:	1000010e 	bge	r2,zero,2009888 <___vfprintf_internal_r+0x1a24>
 2009884:	0005883a 	mov	r2,zero
 2009888:	1885c83a 	sub	r2,r3,r2
 200988c:	e0bfba15 	stw	r2,-280(fp)
 2009890:	e0bfba17 	ldw	r2,-280(fp)
 2009894:	0080e60e 	bge	zero,r2,2009c30 <___vfprintf_internal_r+0x1dcc>
 2009898:	00001906 	br	2009900 <___vfprintf_internal_r+0x1a9c>
 200989c:	008080b4 	movhi	r2,514
 20098a0:	1086fa84 	addi	r2,r2,7146
 20098a4:	88800015 	stw	r2,0(r17)
 20098a8:	00800404 	movi	r2,16
 20098ac:	88800115 	stw	r2,4(r17)
 20098b0:	e0bfca17 	ldw	r2,-216(fp)
 20098b4:	10800404 	addi	r2,r2,16
 20098b8:	e0bfca15 	stw	r2,-216(fp)
 20098bc:	8c400204 	addi	r17,r17,8
 20098c0:	e0bfc917 	ldw	r2,-220(fp)
 20098c4:	10800044 	addi	r2,r2,1
 20098c8:	e0bfc915 	stw	r2,-220(fp)
 20098cc:	e0bfc917 	ldw	r2,-220(fp)
 20098d0:	10800210 	cmplti	r2,r2,8
 20098d4:	1000071e 	bne	r2,zero,20098f4 <___vfprintf_internal_r+0x1a90>
 20098d8:	e0bfc804 	addi	r2,fp,-224
 20098dc:	100d883a 	mov	r6,r2
 20098e0:	e17fe717 	ldw	r5,-100(fp)
 20098e4:	e13fe617 	ldw	r4,-104(fp)
 20098e8:	2011cec0 	call	2011cec <__sprint_r>
 20098ec:	10015d1e 	bne	r2,zero,2009e64 <___vfprintf_internal_r+0x2000>
 20098f0:	e47fcb04 	addi	r17,fp,-212
 20098f4:	e0bfba17 	ldw	r2,-280(fp)
 20098f8:	10bffc04 	addi	r2,r2,-16
 20098fc:	e0bfba15 	stw	r2,-280(fp)
 2009900:	e0bfba17 	ldw	r2,-280(fp)
 2009904:	10800448 	cmpgei	r2,r2,17
 2009908:	103fe41e 	bne	r2,zero,200989c <___vfprintf_internal_r+0x1a38>
 200990c:	008080b4 	movhi	r2,514
 2009910:	1086fa84 	addi	r2,r2,7146
 2009914:	88800015 	stw	r2,0(r17)
 2009918:	e0bfba17 	ldw	r2,-280(fp)
 200991c:	88800115 	stw	r2,4(r17)
 2009920:	e0ffca17 	ldw	r3,-216(fp)
 2009924:	e0bfba17 	ldw	r2,-280(fp)
 2009928:	1885883a 	add	r2,r3,r2
 200992c:	e0bfca15 	stw	r2,-216(fp)
 2009930:	8c400204 	addi	r17,r17,8
 2009934:	e0bfc917 	ldw	r2,-220(fp)
 2009938:	10800044 	addi	r2,r2,1
 200993c:	e0bfc915 	stw	r2,-220(fp)
 2009940:	e0bfc917 	ldw	r2,-220(fp)
 2009944:	10800210 	cmplti	r2,r2,8
 2009948:	1000b91e 	bne	r2,zero,2009c30 <___vfprintf_internal_r+0x1dcc>
 200994c:	e0bfc804 	addi	r2,fp,-224
 2009950:	100d883a 	mov	r6,r2
 2009954:	e17fe717 	ldw	r5,-100(fp)
 2009958:	e13fe617 	ldw	r4,-104(fp)
 200995c:	2011cec0 	call	2011cec <__sprint_r>
 2009960:	1001421e 	bne	r2,zero,2009e6c <___vfprintf_internal_r+0x2008>
 2009964:	e47fcb04 	addi	r17,fp,-212
 2009968:	0000b106 	br	2009c30 <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 200996c:	e0bfc717 	ldw	r2,-228(fp)
 2009970:	10800088 	cmpgei	r2,r2,2
 2009974:	1000021e 	bne	r2,zero,2009980 <___vfprintf_internal_r+0x1b1c>
 2009978:	9880004c 	andi	r2,r19,1
 200997c:	10008026 	beq	r2,zero,2009b80 <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 2009980:	8c800015 	stw	r18,0(r17)
 2009984:	00800044 	movi	r2,1
 2009988:	88800115 	stw	r2,4(r17)
 200998c:	e0bfca17 	ldw	r2,-216(fp)
 2009990:	10800044 	addi	r2,r2,1
 2009994:	e0bfca15 	stw	r2,-216(fp)
 2009998:	8c400204 	addi	r17,r17,8
 200999c:	e0bfc917 	ldw	r2,-220(fp)
 20099a0:	10800044 	addi	r2,r2,1
 20099a4:	e0bfc915 	stw	r2,-220(fp)
 20099a8:	e0bfc917 	ldw	r2,-220(fp)
 20099ac:	10800210 	cmplti	r2,r2,8
 20099b0:	1000071e 	bne	r2,zero,20099d0 <___vfprintf_internal_r+0x1b6c>
 20099b4:	e0bfc804 	addi	r2,fp,-224
 20099b8:	100d883a 	mov	r6,r2
 20099bc:	e17fe717 	ldw	r5,-100(fp)
 20099c0:	e13fe617 	ldw	r4,-104(fp)
 20099c4:	2011cec0 	call	2011cec <__sprint_r>
 20099c8:	10012a1e 	bne	r2,zero,2009e74 <___vfprintf_internal_r+0x2010>
 20099cc:	e47fcb04 	addi	r17,fp,-212
					cp++;
 20099d0:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 20099d4:	e0bfbb17 	ldw	r2,-276(fp)
 20099d8:	88800015 	stw	r2,0(r17)
 20099dc:	e0bfbc17 	ldw	r2,-272(fp)
 20099e0:	88800115 	stw	r2,4(r17)
 20099e4:	e0ffca17 	ldw	r3,-216(fp)
 20099e8:	e0bfbc17 	ldw	r2,-272(fp)
 20099ec:	1885883a 	add	r2,r3,r2
 20099f0:	e0bfca15 	stw	r2,-216(fp)
 20099f4:	8c400204 	addi	r17,r17,8
 20099f8:	e0bfc917 	ldw	r2,-220(fp)
 20099fc:	10800044 	addi	r2,r2,1
 2009a00:	e0bfc915 	stw	r2,-220(fp)
 2009a04:	e0bfc917 	ldw	r2,-220(fp)
 2009a08:	10800210 	cmplti	r2,r2,8
 2009a0c:	1000071e 	bne	r2,zero,2009a2c <___vfprintf_internal_r+0x1bc8>
 2009a10:	e0bfc804 	addi	r2,fp,-224
 2009a14:	100d883a 	mov	r6,r2
 2009a18:	e17fe717 	ldw	r5,-100(fp)
 2009a1c:	e13fe617 	ldw	r4,-104(fp)
 2009a20:	2011cec0 	call	2011cec <__sprint_r>
 2009a24:	1001151e 	bne	r2,zero,2009e7c <___vfprintf_internal_r+0x2018>
 2009a28:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 2009a2c:	e0bfc217 	ldw	r2,-248(fp)
 2009a30:	e0ffc317 	ldw	r3,-244(fp)
 2009a34:	000d883a 	mov	r6,zero
 2009a38:	000f883a 	mov	r7,zero
 2009a3c:	1009883a 	mov	r4,r2
 2009a40:	180b883a 	mov	r5,r3
 2009a44:	20068680 	call	2006868 <__eqdf2>
 2009a48:	10001826 	beq	r2,zero,2009aac <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 2009a4c:	8c800015 	stw	r18,0(r17)
 2009a50:	e0bfc717 	ldw	r2,-228(fp)
 2009a54:	10bfffc4 	addi	r2,r2,-1
 2009a58:	88800115 	stw	r2,4(r17)
 2009a5c:	e0bfca17 	ldw	r2,-216(fp)
 2009a60:	e0ffc717 	ldw	r3,-228(fp)
 2009a64:	10c5883a 	add	r2,r2,r3
 2009a68:	10bfffc4 	addi	r2,r2,-1
 2009a6c:	e0bfca15 	stw	r2,-216(fp)
 2009a70:	8c400204 	addi	r17,r17,8
 2009a74:	e0bfc917 	ldw	r2,-220(fp)
 2009a78:	10800044 	addi	r2,r2,1
 2009a7c:	e0bfc915 	stw	r2,-220(fp)
 2009a80:	e0bfc917 	ldw	r2,-220(fp)
 2009a84:	10800210 	cmplti	r2,r2,8
 2009a88:	1000521e 	bne	r2,zero,2009bd4 <___vfprintf_internal_r+0x1d70>
 2009a8c:	e0bfc804 	addi	r2,fp,-224
 2009a90:	100d883a 	mov	r6,r2
 2009a94:	e17fe717 	ldw	r5,-100(fp)
 2009a98:	e13fe617 	ldw	r4,-104(fp)
 2009a9c:	2011cec0 	call	2011cec <__sprint_r>
 2009aa0:	1000f81e 	bne	r2,zero,2009e84 <___vfprintf_internal_r+0x2020>
 2009aa4:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2009aa8:	00004a06 	br	2009bd4 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2009aac:	e0bfc717 	ldw	r2,-228(fp)
 2009ab0:	143fffc4 	addi	r16,r2,-1
 2009ab4:	0400470e 	bge	zero,r16,2009bd4 <___vfprintf_internal_r+0x1d70>
 2009ab8:	00001706 	br	2009b18 <___vfprintf_internal_r+0x1cb4>
 2009abc:	008080b4 	movhi	r2,514
 2009ac0:	1086fa84 	addi	r2,r2,7146
 2009ac4:	88800015 	stw	r2,0(r17)
 2009ac8:	00800404 	movi	r2,16
 2009acc:	88800115 	stw	r2,4(r17)
 2009ad0:	e0bfca17 	ldw	r2,-216(fp)
 2009ad4:	10800404 	addi	r2,r2,16
 2009ad8:	e0bfca15 	stw	r2,-216(fp)
 2009adc:	8c400204 	addi	r17,r17,8
 2009ae0:	e0bfc917 	ldw	r2,-220(fp)
 2009ae4:	10800044 	addi	r2,r2,1
 2009ae8:	e0bfc915 	stw	r2,-220(fp)
 2009aec:	e0bfc917 	ldw	r2,-220(fp)
 2009af0:	10800210 	cmplti	r2,r2,8
 2009af4:	1000071e 	bne	r2,zero,2009b14 <___vfprintf_internal_r+0x1cb0>
 2009af8:	e0bfc804 	addi	r2,fp,-224
 2009afc:	100d883a 	mov	r6,r2
 2009b00:	e17fe717 	ldw	r5,-100(fp)
 2009b04:	e13fe617 	ldw	r4,-104(fp)
 2009b08:	2011cec0 	call	2011cec <__sprint_r>
 2009b0c:	1000df1e 	bne	r2,zero,2009e8c <___vfprintf_internal_r+0x2028>
 2009b10:	e47fcb04 	addi	r17,fp,-212
 2009b14:	843ffc04 	addi	r16,r16,-16
 2009b18:	80800448 	cmpgei	r2,r16,17
 2009b1c:	103fe71e 	bne	r2,zero,2009abc <___vfprintf_internal_r+0x1c58>
 2009b20:	008080b4 	movhi	r2,514
 2009b24:	1086fa84 	addi	r2,r2,7146
 2009b28:	88800015 	stw	r2,0(r17)
 2009b2c:	8005883a 	mov	r2,r16
 2009b30:	88800115 	stw	r2,4(r17)
 2009b34:	e0bfca17 	ldw	r2,-216(fp)
 2009b38:	8007883a 	mov	r3,r16
 2009b3c:	10c5883a 	add	r2,r2,r3
 2009b40:	e0bfca15 	stw	r2,-216(fp)
 2009b44:	8c400204 	addi	r17,r17,8
 2009b48:	e0bfc917 	ldw	r2,-220(fp)
 2009b4c:	10800044 	addi	r2,r2,1
 2009b50:	e0bfc915 	stw	r2,-220(fp)
 2009b54:	e0bfc917 	ldw	r2,-220(fp)
 2009b58:	10800210 	cmplti	r2,r2,8
 2009b5c:	10001d1e 	bne	r2,zero,2009bd4 <___vfprintf_internal_r+0x1d70>
 2009b60:	e0bfc804 	addi	r2,fp,-224
 2009b64:	100d883a 	mov	r6,r2
 2009b68:	e17fe717 	ldw	r5,-100(fp)
 2009b6c:	e13fe617 	ldw	r4,-104(fp)
 2009b70:	2011cec0 	call	2011cec <__sprint_r>
 2009b74:	1000c71e 	bne	r2,zero,2009e94 <___vfprintf_internal_r+0x2030>
 2009b78:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2009b7c:	00001506 	br	2009bd4 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 2009b80:	8c800015 	stw	r18,0(r17)
 2009b84:	00800044 	movi	r2,1
 2009b88:	88800115 	stw	r2,4(r17)
 2009b8c:	e0bfca17 	ldw	r2,-216(fp)
 2009b90:	10800044 	addi	r2,r2,1
 2009b94:	e0bfca15 	stw	r2,-216(fp)
 2009b98:	8c400204 	addi	r17,r17,8
 2009b9c:	e0bfc917 	ldw	r2,-220(fp)
 2009ba0:	10800044 	addi	r2,r2,1
 2009ba4:	e0bfc915 	stw	r2,-220(fp)
 2009ba8:	e0bfc917 	ldw	r2,-220(fp)
 2009bac:	10800210 	cmplti	r2,r2,8
 2009bb0:	1000091e 	bne	r2,zero,2009bd8 <___vfprintf_internal_r+0x1d74>
 2009bb4:	e0bfc804 	addi	r2,fp,-224
 2009bb8:	100d883a 	mov	r6,r2
 2009bbc:	e17fe717 	ldw	r5,-100(fp)
 2009bc0:	e13fe617 	ldw	r4,-104(fp)
 2009bc4:	2011cec0 	call	2011cec <__sprint_r>
 2009bc8:	1000b41e 	bne	r2,zero,2009e9c <___vfprintf_internal_r+0x2038>
 2009bcc:	e47fcb04 	addi	r17,fp,-212
 2009bd0:	00000106 	br	2009bd8 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2009bd4:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 2009bd8:	e0bfc504 	addi	r2,fp,-236
 2009bdc:	88800015 	stw	r2,0(r17)
 2009be0:	e0bfaf17 	ldw	r2,-324(fp)
 2009be4:	88800115 	stw	r2,4(r17)
 2009be8:	e0ffca17 	ldw	r3,-216(fp)
 2009bec:	e0bfaf17 	ldw	r2,-324(fp)
 2009bf0:	1885883a 	add	r2,r3,r2
 2009bf4:	e0bfca15 	stw	r2,-216(fp)
 2009bf8:	8c400204 	addi	r17,r17,8
 2009bfc:	e0bfc917 	ldw	r2,-220(fp)
 2009c00:	10800044 	addi	r2,r2,1
 2009c04:	e0bfc915 	stw	r2,-220(fp)
 2009c08:	e0bfc917 	ldw	r2,-220(fp)
 2009c0c:	10800210 	cmplti	r2,r2,8
 2009c10:	1000071e 	bne	r2,zero,2009c30 <___vfprintf_internal_r+0x1dcc>
 2009c14:	e0bfc804 	addi	r2,fp,-224
 2009c18:	100d883a 	mov	r6,r2
 2009c1c:	e17fe717 	ldw	r5,-100(fp)
 2009c20:	e13fe617 	ldw	r4,-104(fp)
 2009c24:	2011cec0 	call	2011cec <__sprint_r>
 2009c28:	10009e1e 	bne	r2,zero,2009ea4 <___vfprintf_internal_r+0x2040>
 2009c2c:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2009c30:	9880010c 	andi	r2,r19,4
 2009c34:	10003526 	beq	r2,zero,2009d0c <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 2009c38:	e0ffad17 	ldw	r3,-332(fp)
 2009c3c:	e0bfb517 	ldw	r2,-300(fp)
 2009c40:	18a1c83a 	sub	r16,r3,r2
 2009c44:	0400310e 	bge	zero,r16,2009d0c <___vfprintf_internal_r+0x1ea8>
 2009c48:	00001706 	br	2009ca8 <___vfprintf_internal_r+0x1e44>
 2009c4c:	008080b4 	movhi	r2,514
 2009c50:	1086f684 	addi	r2,r2,7130
 2009c54:	88800015 	stw	r2,0(r17)
 2009c58:	00800404 	movi	r2,16
 2009c5c:	88800115 	stw	r2,4(r17)
 2009c60:	e0bfca17 	ldw	r2,-216(fp)
 2009c64:	10800404 	addi	r2,r2,16
 2009c68:	e0bfca15 	stw	r2,-216(fp)
 2009c6c:	8c400204 	addi	r17,r17,8
 2009c70:	e0bfc917 	ldw	r2,-220(fp)
 2009c74:	10800044 	addi	r2,r2,1
 2009c78:	e0bfc915 	stw	r2,-220(fp)
 2009c7c:	e0bfc917 	ldw	r2,-220(fp)
 2009c80:	10800210 	cmplti	r2,r2,8
 2009c84:	1000071e 	bne	r2,zero,2009ca4 <___vfprintf_internal_r+0x1e40>
 2009c88:	e0bfc804 	addi	r2,fp,-224
 2009c8c:	100d883a 	mov	r6,r2
 2009c90:	e17fe717 	ldw	r5,-100(fp)
 2009c94:	e13fe617 	ldw	r4,-104(fp)
 2009c98:	2011cec0 	call	2011cec <__sprint_r>
 2009c9c:	1000831e 	bne	r2,zero,2009eac <___vfprintf_internal_r+0x2048>
 2009ca0:	e47fcb04 	addi	r17,fp,-212
 2009ca4:	843ffc04 	addi	r16,r16,-16
 2009ca8:	80800448 	cmpgei	r2,r16,17
 2009cac:	103fe71e 	bne	r2,zero,2009c4c <___vfprintf_internal_r+0x1de8>
 2009cb0:	008080b4 	movhi	r2,514
 2009cb4:	1086f684 	addi	r2,r2,7130
 2009cb8:	88800015 	stw	r2,0(r17)
 2009cbc:	8005883a 	mov	r2,r16
 2009cc0:	88800115 	stw	r2,4(r17)
 2009cc4:	e0bfca17 	ldw	r2,-216(fp)
 2009cc8:	8007883a 	mov	r3,r16
 2009ccc:	10c5883a 	add	r2,r2,r3
 2009cd0:	e0bfca15 	stw	r2,-216(fp)
 2009cd4:	8c400204 	addi	r17,r17,8
 2009cd8:	e0bfc917 	ldw	r2,-220(fp)
 2009cdc:	10800044 	addi	r2,r2,1
 2009ce0:	e0bfc915 	stw	r2,-220(fp)
 2009ce4:	e0bfc917 	ldw	r2,-220(fp)
 2009ce8:	10800210 	cmplti	r2,r2,8
 2009cec:	1000071e 	bne	r2,zero,2009d0c <___vfprintf_internal_r+0x1ea8>
 2009cf0:	e0bfc804 	addi	r2,fp,-224
 2009cf4:	100d883a 	mov	r6,r2
 2009cf8:	e17fe717 	ldw	r5,-100(fp)
 2009cfc:	e13fe617 	ldw	r4,-104(fp)
 2009d00:	2011cec0 	call	2011cec <__sprint_r>
 2009d04:	10006b1e 	bne	r2,zero,2009eb4 <___vfprintf_internal_r+0x2050>
 2009d08:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2009d0c:	e0ffad17 	ldw	r3,-332(fp)
 2009d10:	e0bfb517 	ldw	r2,-300(fp)
 2009d14:	10c0010e 	bge	r2,r3,2009d1c <___vfprintf_internal_r+0x1eb8>
 2009d18:	1805883a 	mov	r2,r3
 2009d1c:	e0ffac17 	ldw	r3,-336(fp)
 2009d20:	1885883a 	add	r2,r3,r2
 2009d24:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 2009d28:	e0bfca17 	ldw	r2,-216(fp)
 2009d2c:	10000626 	beq	r2,zero,2009d48 <___vfprintf_internal_r+0x1ee4>
 2009d30:	e0bfc804 	addi	r2,fp,-224
 2009d34:	100d883a 	mov	r6,r2
 2009d38:	e17fe717 	ldw	r5,-100(fp)
 2009d3c:	e13fe617 	ldw	r4,-104(fp)
 2009d40:	2011cec0 	call	2011cec <__sprint_r>
 2009d44:	10005d1e 	bne	r2,zero,2009ebc <___vfprintf_internal_r+0x2058>
 2009d48:	e03fc915 	stw	zero,-220(fp)
 2009d4c:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 2009d50:	e0bfb817 	ldw	r2,-288(fp)
 2009d54:	1038a026 	beq	r2,zero,2007fd8 <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 2009d58:	e17fb817 	ldw	r5,-288(fp)
 2009d5c:	e13fe617 	ldw	r4,-104(fp)
 2009d60:	200ccf00 	call	200ccf0 <_free_r>
			malloc_buf = NULL;
 2009d64:	e03fb815 	stw	zero,-288(fp)
		}
	}
 2009d68:	00389b06 	br	2007fd8 <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 2009d6c:	0001883a 	nop
 2009d70:	00000106 	br	2009d78 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2009d74:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2009d78:	e0bfca17 	ldw	r2,-216(fp)
 2009d7c:	10000626 	beq	r2,zero,2009d98 <___vfprintf_internal_r+0x1f34>
 2009d80:	e0bfc804 	addi	r2,fp,-224
 2009d84:	100d883a 	mov	r6,r2
 2009d88:	e17fe717 	ldw	r5,-100(fp)
 2009d8c:	e13fe617 	ldw	r4,-104(fp)
 2009d90:	2011cec0 	call	2011cec <__sprint_r>
 2009d94:	10004b1e 	bne	r2,zero,2009ec4 <___vfprintf_internal_r+0x2060>
 2009d98:	e03fc915 	stw	zero,-220(fp)
 2009d9c:	e47fcb04 	addi	r17,fp,-212
 2009da0:	00004906 	br	2009ec8 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 2009da4:	0001883a 	nop
 2009da8:	00004706 	br	2009ec8 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 2009dac:	0001883a 	nop
 2009db0:	00004506 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009db4:	0001883a 	nop
 2009db8:	00004306 	br	2009ec8 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2009dbc:	0001883a 	nop
 2009dc0:	00004106 	br	2009ec8 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2009dc4:	0001883a 	nop
 2009dc8:	00003f06 	br	2009ec8 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2009dcc:	0001883a 	nop
 2009dd0:	00003d06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009dd4:	0001883a 	nop
 2009dd8:	00003b06 	br	2009ec8 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2009ddc:	0001883a 	nop
 2009de0:	00003906 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009de4:	0001883a 	nop
 2009de8:	00003706 	br	2009ec8 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 2009dec:	0001883a 	nop
 2009df0:	00003506 	br	2009ec8 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2009df4:	0001883a 	nop
 2009df8:	00003306 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2009dfc:	0001883a 	nop
 2009e00:	00003106 	br	2009ec8 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 2009e04:	0001883a 	nop
 2009e08:	00002f06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009e0c:	0001883a 	nop
 2009e10:	00002d06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 2009e14:	0001883a 	nop
 2009e18:	00002b06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2009e1c:	0001883a 	nop
 2009e20:	00002906 	br	2009ec8 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 2009e24:	0001883a 	nop
 2009e28:	00002706 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009e2c:	0001883a 	nop
 2009e30:	00002506 	br	2009ec8 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 2009e34:	0001883a 	nop
 2009e38:	00002306 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 2009e3c:	0001883a 	nop
 2009e40:	00002106 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009e44:	0001883a 	nop
 2009e48:	00001f06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009e4c:	0001883a 	nop
 2009e50:	00001d06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 2009e54:	0001883a 	nop
 2009e58:	00001b06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 2009e5c:	0001883a 	nop
 2009e60:	00001906 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009e64:	0001883a 	nop
 2009e68:	00001706 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009e6c:	0001883a 	nop
 2009e70:	00001506 	br	2009ec8 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 2009e74:	0001883a 	nop
 2009e78:	00001306 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 2009e7c:	0001883a 	nop
 2009e80:	00001106 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 2009e84:	0001883a 	nop
 2009e88:	00000f06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2009e8c:	0001883a 	nop
 2009e90:	00000d06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009e94:	0001883a 	nop
 2009e98:	00000b06 	br	2009ec8 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 2009e9c:	0001883a 	nop
 2009ea0:	00000906 	br	2009ec8 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 2009ea4:	0001883a 	nop
 2009ea8:	00000706 	br	2009ec8 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 2009eac:	0001883a 	nop
 2009eb0:	00000506 	br	2009ec8 <___vfprintf_internal_r+0x2064>
 2009eb4:	0001883a 	nop
 2009eb8:	00000306 	br	2009ec8 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2009ebc:	0001883a 	nop
 2009ec0:	00000106 	br	2009ec8 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2009ec4:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 2009ec8:	e0bfb817 	ldw	r2,-288(fp)
 2009ecc:	10000326 	beq	r2,zero,2009edc <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 2009ed0:	e17fb817 	ldw	r5,-288(fp)
 2009ed4:	e13fe617 	ldw	r4,-104(fp)
 2009ed8:	200ccf00 	call	200ccf0 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2009edc:	e0bfe717 	ldw	r2,-100(fp)
 2009ee0:	1080030b 	ldhu	r2,12(r2)
 2009ee4:	10bfffcc 	andi	r2,r2,65535
 2009ee8:	1080100c 	andi	r2,r2,64
 2009eec:	1000021e 	bne	r2,zero,2009ef8 <___vfprintf_internal_r+0x2094>
 2009ef0:	e0bfac17 	ldw	r2,-336(fp)
 2009ef4:	00000206 	br	2009f00 <___vfprintf_internal_r+0x209c>
 2009ef8:	00bfffc4 	movi	r2,-1
 2009efc:	0001883a 	nop
	/* NOTREACHED */
}
 2009f00:	e6fff804 	addi	sp,fp,-32
 2009f04:	dfc00917 	ldw	ra,36(sp)
 2009f08:	df000817 	ldw	fp,32(sp)
 2009f0c:	ddc00717 	ldw	r23,28(sp)
 2009f10:	dd800617 	ldw	r22,24(sp)
 2009f14:	dd400517 	ldw	r21,20(sp)
 2009f18:	dd000417 	ldw	r20,16(sp)
 2009f1c:	dcc00317 	ldw	r19,12(sp)
 2009f20:	dc800217 	ldw	r18,8(sp)
 2009f24:	dc400117 	ldw	r17,4(sp)
 2009f28:	dc000017 	ldw	r16,0(sp)
 2009f2c:	dec00a04 	addi	sp,sp,40
 2009f30:	f800283a 	ret

02009f34 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 2009f34:	deffef04 	addi	sp,sp,-68
 2009f38:	dfc01015 	stw	ra,64(sp)
 2009f3c:	df000f15 	stw	fp,60(sp)
 2009f40:	df000f04 	addi	fp,sp,60
 2009f44:	e13ffc15 	stw	r4,-16(fp)
 2009f48:	e17ffd15 	stw	r5,-12(fp)
 2009f4c:	e1bffe15 	stw	r6,-8(fp)
 2009f50:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 2009f54:	e0bffd17 	ldw	r2,-12(fp)
 2009f58:	e0bffa15 	stw	r2,-24(fp)
 2009f5c:	e0bffe17 	ldw	r2,-8(fp)
 2009f60:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 2009f64:	e0bffb17 	ldw	r2,-20(fp)
 2009f68:	1000090e 	bge	r2,zero,2009f90 <cvt+0x5c>
		value = -value;
 2009f6c:	e0bffd17 	ldw	r2,-12(fp)
 2009f70:	e0bffd15 	stw	r2,-12(fp)
 2009f74:	e0bffe17 	ldw	r2,-8(fp)
 2009f78:	10a0003c 	xorhi	r2,r2,32768
 2009f7c:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 2009f80:	e0800317 	ldw	r2,12(fp)
 2009f84:	00c00b44 	movi	r3,45
 2009f88:	10c00005 	stb	r3,0(r2)
 2009f8c:	00000206 	br	2009f98 <cvt+0x64>
	} else
		*sign = '\000';
 2009f90:	e0800317 	ldw	r2,12(fp)
 2009f94:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 2009f98:	e0800517 	ldw	r2,20(fp)
 2009f9c:	108019a0 	cmpeqi	r2,r2,102
 2009fa0:	1000031e 	bne	r2,zero,2009fb0 <cvt+0x7c>
 2009fa4:	e0800517 	ldw	r2,20(fp)
 2009fa8:	10801198 	cmpnei	r2,r2,70
 2009fac:	1000031e 	bne	r2,zero,2009fbc <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 2009fb0:	008000c4 	movi	r2,3
 2009fb4:	e0bff515 	stw	r2,-44(fp)
 2009fb8:	00000b06 	br	2009fe8 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 2009fbc:	e0800517 	ldw	r2,20(fp)
 2009fc0:	10801960 	cmpeqi	r2,r2,101
 2009fc4:	1000031e 	bne	r2,zero,2009fd4 <cvt+0xa0>
 2009fc8:	e0800517 	ldw	r2,20(fp)
 2009fcc:	10801158 	cmpnei	r2,r2,69
 2009fd0:	1000031e 	bne	r2,zero,2009fe0 <cvt+0xac>
			ndigits++;
 2009fd4:	e0bfff17 	ldw	r2,-4(fp)
 2009fd8:	10800044 	addi	r2,r2,1
 2009fdc:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 2009fe0:	00800084 	movi	r2,2
 2009fe4:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 2009fe8:	e0bff904 	addi	r2,fp,-28
 2009fec:	d8800315 	stw	r2,12(sp)
 2009ff0:	e0bff804 	addi	r2,fp,-32
 2009ff4:	d8800215 	stw	r2,8(sp)
 2009ff8:	e0800417 	ldw	r2,16(fp)
 2009ffc:	d8800115 	stw	r2,4(sp)
 200a000:	e0bfff17 	ldw	r2,-4(fp)
 200a004:	d8800015 	stw	r2,0(sp)
 200a008:	e1fff517 	ldw	r7,-44(fp)
 200a00c:	e17ffd17 	ldw	r5,-12(fp)
 200a010:	e1bffe17 	ldw	r6,-8(fp)
 200a014:	e13ffc17 	ldw	r4,-16(fp)
 200a018:	200a7d40 	call	200a7d4 <_dtoa_r>
 200a01c:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 200a020:	e0800517 	ldw	r2,20(fp)
 200a024:	108019e0 	cmpeqi	r2,r2,103
 200a028:	1000031e 	bne	r2,zero,200a038 <cvt+0x104>
 200a02c:	e0800517 	ldw	r2,20(fp)
 200a030:	108011d8 	cmpnei	r2,r2,71
 200a034:	1000031e 	bne	r2,zero,200a044 <cvt+0x110>
 200a038:	e0800217 	ldw	r2,8(fp)
 200a03c:	1080004c 	andi	r2,r2,1
 200a040:	10003326 	beq	r2,zero,200a110 <cvt+0x1dc>
		bp = digits + ndigits;
 200a044:	e0bfff17 	ldw	r2,-4(fp)
 200a048:	e0fff717 	ldw	r3,-36(fp)
 200a04c:	1885883a 	add	r2,r3,r2
 200a050:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 200a054:	e0800517 	ldw	r2,20(fp)
 200a058:	108019a0 	cmpeqi	r2,r2,102
 200a05c:	1000031e 	bne	r2,zero,200a06c <cvt+0x138>
 200a060:	e0800517 	ldw	r2,20(fp)
 200a064:	10801198 	cmpnei	r2,r2,70
 200a068:	1000181e 	bne	r2,zero,200a0cc <cvt+0x198>
			if (*digits == '0' && value)
 200a06c:	e0bff717 	ldw	r2,-36(fp)
 200a070:	10800003 	ldbu	r2,0(r2)
 200a074:	10803fcc 	andi	r2,r2,255
 200a078:	1080201c 	xori	r2,r2,128
 200a07c:	10bfe004 	addi	r2,r2,-128
 200a080:	10800c18 	cmpnei	r2,r2,48
 200a084:	10000b1e 	bne	r2,zero,200a0b4 <cvt+0x180>
 200a088:	000d883a 	mov	r6,zero
 200a08c:	000f883a 	mov	r7,zero
 200a090:	e13ffd17 	ldw	r4,-12(fp)
 200a094:	e17ffe17 	ldw	r5,-8(fp)
 200a098:	20068680 	call	2006868 <__eqdf2>
 200a09c:	10000526 	beq	r2,zero,200a0b4 <cvt+0x180>
				*decpt = -ndigits + 1;
 200a0a0:	00c00044 	movi	r3,1
 200a0a4:	e0bfff17 	ldw	r2,-4(fp)
 200a0a8:	1887c83a 	sub	r3,r3,r2
 200a0ac:	e0800417 	ldw	r2,16(fp)
 200a0b0:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 200a0b4:	e0800417 	ldw	r2,16(fp)
 200a0b8:	10800017 	ldw	r2,0(r2)
 200a0bc:	1007883a 	mov	r3,r2
 200a0c0:	e0bff617 	ldw	r2,-40(fp)
 200a0c4:	10c5883a 	add	r2,r2,r3
 200a0c8:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 200a0cc:	000d883a 	mov	r6,zero
 200a0d0:	000f883a 	mov	r7,zero
 200a0d4:	e13ffd17 	ldw	r4,-12(fp)
 200a0d8:	e17ffe17 	ldw	r5,-8(fp)
 200a0dc:	20068680 	call	2006868 <__eqdf2>
 200a0e0:	1000081e 	bne	r2,zero,200a104 <cvt+0x1d0>
			rve = bp;
 200a0e4:	e0bff617 	ldw	r2,-40(fp)
 200a0e8:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 200a0ec:	00000506 	br	200a104 <cvt+0x1d0>
			*rve++ = '0';
 200a0f0:	e0bff917 	ldw	r2,-28(fp)
 200a0f4:	10c00044 	addi	r3,r2,1
 200a0f8:	e0fff915 	stw	r3,-28(fp)
 200a0fc:	00c00c04 	movi	r3,48
 200a100:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 200a104:	e0fff917 	ldw	r3,-28(fp)
 200a108:	e0bff617 	ldw	r2,-40(fp)
 200a10c:	18bff836 	bltu	r3,r2,200a0f0 <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 200a110:	e0bff917 	ldw	r2,-28(fp)
 200a114:	1007883a 	mov	r3,r2
 200a118:	e0bff717 	ldw	r2,-36(fp)
 200a11c:	1887c83a 	sub	r3,r3,r2
 200a120:	e0800617 	ldw	r2,24(fp)
 200a124:	10c00015 	stw	r3,0(r2)
	return (digits);
 200a128:	e0bff717 	ldw	r2,-36(fp)
}
 200a12c:	e037883a 	mov	sp,fp
 200a130:	dfc00117 	ldw	ra,4(sp)
 200a134:	df000017 	ldw	fp,0(sp)
 200a138:	dec00204 	addi	sp,sp,8
 200a13c:	f800283a 	ret

0200a140 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 200a140:	defff704 	addi	sp,sp,-36
 200a144:	dfc00815 	stw	ra,32(sp)
 200a148:	df000715 	stw	fp,28(sp)
 200a14c:	dc400615 	stw	r17,24(sp)
 200a150:	dc000515 	stw	r16,20(sp)
 200a154:	df000704 	addi	fp,sp,28
 200a158:	e13ffb15 	stw	r4,-20(fp)
 200a15c:	e17ffc15 	stw	r5,-16(fp)
 200a160:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 200a164:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 200a168:	8805883a 	mov	r2,r17
 200a16c:	14400044 	addi	r17,r2,1
 200a170:	e0fffd17 	ldw	r3,-12(fp)
 200a174:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 200a178:	e0bffc17 	ldw	r2,-16(fp)
 200a17c:	1000080e 	bge	r2,zero,200a1a0 <exponent+0x60>
		exp = -exp;
 200a180:	e0bffc17 	ldw	r2,-16(fp)
 200a184:	0085c83a 	sub	r2,zero,r2
 200a188:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 200a18c:	8805883a 	mov	r2,r17
 200a190:	14400044 	addi	r17,r2,1
 200a194:	00c00b44 	movi	r3,45
 200a198:	10c00005 	stb	r3,0(r2)
 200a19c:	00000406 	br	200a1b0 <exponent+0x70>
	}
	else
		*p++ = '+';
 200a1a0:	8805883a 	mov	r2,r17
 200a1a4:	14400044 	addi	r17,r2,1
 200a1a8:	00c00ac4 	movi	r3,43
 200a1ac:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 200a1b0:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 200a1b4:	e0bffc17 	ldw	r2,-16(fp)
 200a1b8:	10800290 	cmplti	r2,r2,10
 200a1bc:	10001d1e 	bne	r2,zero,200a234 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 200a1c0:	843fffc4 	addi	r16,r16,-1
 200a1c4:	e0bffc17 	ldw	r2,-16(fp)
 200a1c8:	01400284 	movi	r5,10
 200a1cc:	1009883a 	mov	r4,r2
 200a1d0:	20075780 	call	2007578 <__modsi3>
 200a1d4:	10800c04 	addi	r2,r2,48
 200a1d8:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 200a1dc:	e0bffc17 	ldw	r2,-16(fp)
 200a1e0:	01400284 	movi	r5,10
 200a1e4:	1009883a 	mov	r4,r2
 200a1e8:	20074f40 	call	20074f4 <__divsi3>
 200a1ec:	e0bffc15 	stw	r2,-16(fp)
 200a1f0:	e0bffc17 	ldw	r2,-16(fp)
 200a1f4:	10800288 	cmpgei	r2,r2,10
 200a1f8:	103ff11e 	bne	r2,zero,200a1c0 <exponent+0x80>
		*--t = to_char (exp);
 200a1fc:	843fffc4 	addi	r16,r16,-1
 200a200:	e0bffc17 	ldw	r2,-16(fp)
 200a204:	10800c04 	addi	r2,r2,48
 200a208:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 200a20c:	00000606 	br	200a228 <exponent+0xe8>
 200a210:	8805883a 	mov	r2,r17
 200a214:	14400044 	addi	r17,r2,1
 200a218:	8007883a 	mov	r3,r16
 200a21c:	1c000044 	addi	r16,r3,1
 200a220:	18c00003 	ldbu	r3,0(r3)
 200a224:	10c00005 	stb	r3,0(r2)
 200a228:	e0bffac4 	addi	r2,fp,-21
 200a22c:	80bff836 	bltu	r16,r2,200a210 <exponent+0xd0>
 200a230:	00000906 	br	200a258 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 200a234:	8805883a 	mov	r2,r17
 200a238:	14400044 	addi	r17,r2,1
 200a23c:	00c00c04 	movi	r3,48
 200a240:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 200a244:	8805883a 	mov	r2,r17
 200a248:	14400044 	addi	r17,r2,1
 200a24c:	e0fffc17 	ldw	r3,-16(fp)
 200a250:	18c00c04 	addi	r3,r3,48
 200a254:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 200a258:	8807883a 	mov	r3,r17
 200a25c:	e0bffb17 	ldw	r2,-20(fp)
 200a260:	1885c83a 	sub	r2,r3,r2
}
 200a264:	e6fffe04 	addi	sp,fp,-8
 200a268:	dfc00317 	ldw	ra,12(sp)
 200a26c:	df000217 	ldw	fp,8(sp)
 200a270:	dc400117 	ldw	r17,4(sp)
 200a274:	dc000017 	ldw	r16,0(sp)
 200a278:	dec00404 	addi	sp,sp,16
 200a27c:	f800283a 	ret

0200a280 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200a280:	defffb04 	addi	sp,sp,-20
 200a284:	dfc00415 	stw	ra,16(sp)
 200a288:	df000315 	stw	fp,12(sp)
 200a28c:	dc000215 	stw	r16,8(sp)
 200a290:	df000304 	addi	fp,sp,12
 200a294:	e13ffe15 	stw	r4,-8(fp)
 200a298:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 200a29c:	d0a02e17 	ldw	r2,-32584(gp)
 200a2a0:	e0bffd15 	stw	r2,-12(fp)
 200a2a4:	e0bffd17 	ldw	r2,-12(fp)
 200a2a8:	10000526 	beq	r2,zero,200a2c0 <__swsetup_r+0x40>
 200a2ac:	e0bffd17 	ldw	r2,-12(fp)
 200a2b0:	10800e17 	ldw	r2,56(r2)
 200a2b4:	1000021e 	bne	r2,zero,200a2c0 <__swsetup_r+0x40>
 200a2b8:	e13ffd17 	ldw	r4,-12(fp)
 200a2bc:	200cad00 	call	200cad0 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 200a2c0:	8080030b 	ldhu	r2,12(r16)
 200a2c4:	10bfffcc 	andi	r2,r2,65535
 200a2c8:	1080020c 	andi	r2,r2,8
 200a2cc:	1000241e 	bne	r2,zero,200a360 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 200a2d0:	8080030b 	ldhu	r2,12(r16)
 200a2d4:	10bfffcc 	andi	r2,r2,65535
 200a2d8:	1080040c 	andi	r2,r2,16
 200a2dc:	1000081e 	bne	r2,zero,200a300 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 200a2e0:	e0bffe17 	ldw	r2,-8(fp)
 200a2e4:	00c00244 	movi	r3,9
 200a2e8:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 200a2ec:	8080030b 	ldhu	r2,12(r16)
 200a2f0:	10801014 	ori	r2,r2,64
 200a2f4:	8080030d 	sth	r2,12(r16)
	  return EOF;
 200a2f8:	00bfffc4 	movi	r2,-1
 200a2fc:	00004206 	br	200a408 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 200a300:	8080030b 	ldhu	r2,12(r16)
 200a304:	10bfffcc 	andi	r2,r2,65535
 200a308:	1080010c 	andi	r2,r2,4
 200a30c:	10001126 	beq	r2,zero,200a354 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 200a310:	80800c17 	ldw	r2,48(r16)
 200a314:	10000826 	beq	r2,zero,200a338 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 200a318:	80c00c17 	ldw	r3,48(r16)
 200a31c:	80801004 	addi	r2,r16,64
 200a320:	18800426 	beq	r3,r2,200a334 <__swsetup_r+0xb4>
 200a324:	80800c17 	ldw	r2,48(r16)
 200a328:	100b883a 	mov	r5,r2
 200a32c:	e13ffe17 	ldw	r4,-8(fp)
 200a330:	200ccf00 	call	200ccf0 <_free_r>
 200a334:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 200a338:	80c0030b 	ldhu	r3,12(r16)
 200a33c:	00bff6c4 	movi	r2,-37
 200a340:	1884703a 	and	r2,r3,r2
 200a344:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 200a348:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 200a34c:	80800417 	ldw	r2,16(r16)
 200a350:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 200a354:	8080030b 	ldhu	r2,12(r16)
 200a358:	10800214 	ori	r2,r2,8
 200a35c:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 200a360:	80800417 	ldw	r2,16(r16)
 200a364:	10000b1e 	bne	r2,zero,200a394 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 200a368:	8080030b 	ldhu	r2,12(r16)
 200a36c:	10bfffcc 	andi	r2,r2,65535
 200a370:	1080800c 	andi	r2,r2,512
 200a374:	10000426 	beq	r2,zero,200a388 <__swsetup_r+0x108>
 200a378:	8080030b 	ldhu	r2,12(r16)
 200a37c:	10bfffcc 	andi	r2,r2,65535
 200a380:	1080200c 	andi	r2,r2,128
 200a384:	10000326 	beq	r2,zero,200a394 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 200a388:	800b883a 	mov	r5,r16
 200a38c:	e13ffe17 	ldw	r4,-8(fp)
 200a390:	200dd500 	call	200dd50 <__smakebuf_r>

  if (fp->_flags & __SLBF)
 200a394:	8080030b 	ldhu	r2,12(r16)
 200a398:	10bfffcc 	andi	r2,r2,65535
 200a39c:	1080004c 	andi	r2,r2,1
 200a3a0:	10000526 	beq	r2,zero,200a3b8 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 200a3a4:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 200a3a8:	80800517 	ldw	r2,20(r16)
 200a3ac:	0085c83a 	sub	r2,zero,r2
 200a3b0:	80800615 	stw	r2,24(r16)
 200a3b4:	00000806 	br	200a3d8 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 200a3b8:	8080030b 	ldhu	r2,12(r16)
 200a3bc:	10bfffcc 	andi	r2,r2,65535
 200a3c0:	1080008c 	andi	r2,r2,2
 200a3c4:	1000021e 	bne	r2,zero,200a3d0 <__swsetup_r+0x150>
 200a3c8:	80800517 	ldw	r2,20(r16)
 200a3cc:	00000106 	br	200a3d4 <__swsetup_r+0x154>
 200a3d0:	0005883a 	mov	r2,zero
 200a3d4:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 200a3d8:	80800417 	ldw	r2,16(r16)
 200a3dc:	1000091e 	bne	r2,zero,200a404 <__swsetup_r+0x184>
 200a3e0:	8080030b 	ldhu	r2,12(r16)
 200a3e4:	10bfffcc 	andi	r2,r2,65535
 200a3e8:	1080200c 	andi	r2,r2,128
 200a3ec:	10000526 	beq	r2,zero,200a404 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 200a3f0:	8080030b 	ldhu	r2,12(r16)
 200a3f4:	10801014 	ori	r2,r2,64
 200a3f8:	8080030d 	sth	r2,12(r16)
      return EOF;
 200a3fc:	00bfffc4 	movi	r2,-1
 200a400:	00000106 	br	200a408 <__swsetup_r+0x188>
    }
  return 0;
 200a404:	0005883a 	mov	r2,zero
}
 200a408:	e6ffff04 	addi	sp,fp,-4
 200a40c:	dfc00217 	ldw	ra,8(sp)
 200a410:	df000117 	ldw	fp,4(sp)
 200a414:	dc000017 	ldw	r16,0(sp)
 200a418:	dec00304 	addi	sp,sp,12
 200a41c:	f800283a 	ret

0200a420 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 200a420:	deffef04 	addi	sp,sp,-68
 200a424:	dfc01015 	stw	ra,64(sp)
 200a428:	df000f15 	stw	fp,60(sp)
 200a42c:	df000f04 	addi	fp,sp,60
 200a430:	e13ffe15 	stw	r4,-8(fp)
 200a434:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 200a438:	e0bfff17 	ldw	r2,-4(fp)
 200a43c:	10800417 	ldw	r2,16(r2)
 200a440:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 200a444:	e0bffe17 	ldw	r2,-8(fp)
 200a448:	10c00417 	ldw	r3,16(r2)
 200a44c:	e0bff117 	ldw	r2,-60(fp)
 200a450:	1880020e 	bge	r3,r2,200a45c <quorem+0x3c>
    return 0;
 200a454:	0005883a 	mov	r2,zero
 200a458:	0000d906 	br	200a7c0 <quorem+0x3a0>
  sx = S->_x;
 200a45c:	e0bfff17 	ldw	r2,-4(fp)
 200a460:	10800504 	addi	r2,r2,20
 200a464:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 200a468:	e0bff117 	ldw	r2,-60(fp)
 200a46c:	10bfffc4 	addi	r2,r2,-1
 200a470:	e0bff115 	stw	r2,-60(fp)
 200a474:	e0bff117 	ldw	r2,-60(fp)
 200a478:	1085883a 	add	r2,r2,r2
 200a47c:	1085883a 	add	r2,r2,r2
 200a480:	1007883a 	mov	r3,r2
 200a484:	e0bff717 	ldw	r2,-36(fp)
 200a488:	10c5883a 	add	r2,r2,r3
 200a48c:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 200a490:	e0bffe17 	ldw	r2,-8(fp)
 200a494:	10800504 	addi	r2,r2,20
 200a498:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 200a49c:	e0bff117 	ldw	r2,-60(fp)
 200a4a0:	1085883a 	add	r2,r2,r2
 200a4a4:	1085883a 	add	r2,r2,r2
 200a4a8:	1007883a 	mov	r3,r2
 200a4ac:	e0bff517 	ldw	r2,-44(fp)
 200a4b0:	10c5883a 	add	r2,r2,r3
 200a4b4:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 200a4b8:	e0bff617 	ldw	r2,-40(fp)
 200a4bc:	10c00017 	ldw	r3,0(r2)
 200a4c0:	e0bff817 	ldw	r2,-32(fp)
 200a4c4:	10800017 	ldw	r2,0(r2)
 200a4c8:	10800044 	addi	r2,r2,1
 200a4cc:	100b883a 	mov	r5,r2
 200a4d0:	1809883a 	mov	r4,r3
 200a4d4:	20075ec0 	call	20075ec <__udivsi3>
 200a4d8:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 200a4dc:	e0bff417 	ldw	r2,-48(fp)
 200a4e0:	10005326 	beq	r2,zero,200a630 <quorem+0x210>
    {
      borrow = 0;
 200a4e4:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200a4e8:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 200a4ec:	e0bff717 	ldw	r2,-36(fp)
 200a4f0:	10c00104 	addi	r3,r2,4
 200a4f4:	e0fff715 	stw	r3,-36(fp)
 200a4f8:	10800017 	ldw	r2,0(r2)
 200a4fc:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 200a500:	e0bff917 	ldw	r2,-28(fp)
 200a504:	10ffffcc 	andi	r3,r2,65535
 200a508:	e0bff417 	ldw	r2,-48(fp)
 200a50c:	1887383a 	mul	r3,r3,r2
 200a510:	e0bff317 	ldw	r2,-52(fp)
 200a514:	1885883a 	add	r2,r3,r2
 200a518:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 200a51c:	e0bff917 	ldw	r2,-28(fp)
 200a520:	1006d43a 	srli	r3,r2,16
 200a524:	e0bff417 	ldw	r2,-48(fp)
 200a528:	1887383a 	mul	r3,r3,r2
 200a52c:	e0bffa17 	ldw	r2,-24(fp)
 200a530:	1004d43a 	srli	r2,r2,16
 200a534:	1885883a 	add	r2,r3,r2
 200a538:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 200a53c:	e0bffb17 	ldw	r2,-20(fp)
 200a540:	1004d43a 	srli	r2,r2,16
 200a544:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200a548:	e0bff517 	ldw	r2,-44(fp)
 200a54c:	10800017 	ldw	r2,0(r2)
 200a550:	10ffffcc 	andi	r3,r2,65535
 200a554:	e0bffa17 	ldw	r2,-24(fp)
 200a558:	10bfffcc 	andi	r2,r2,65535
 200a55c:	1887c83a 	sub	r3,r3,r2
 200a560:	e0bff217 	ldw	r2,-56(fp)
 200a564:	1885883a 	add	r2,r3,r2
 200a568:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 200a56c:	e0bffc17 	ldw	r2,-16(fp)
 200a570:	1005d43a 	srai	r2,r2,16
 200a574:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200a578:	e0bff517 	ldw	r2,-44(fp)
 200a57c:	10800017 	ldw	r2,0(r2)
 200a580:	1006d43a 	srli	r3,r2,16
 200a584:	e0bffb17 	ldw	r2,-20(fp)
 200a588:	10bfffcc 	andi	r2,r2,65535
 200a58c:	1887c83a 	sub	r3,r3,r2
 200a590:	e0bff217 	ldw	r2,-56(fp)
 200a594:	1885883a 	add	r2,r3,r2
 200a598:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 200a59c:	e0bffd17 	ldw	r2,-12(fp)
 200a5a0:	1005d43a 	srai	r2,r2,16
 200a5a4:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200a5a8:	e0bff517 	ldw	r2,-44(fp)
 200a5ac:	10c00104 	addi	r3,r2,4
 200a5b0:	e0fff515 	stw	r3,-44(fp)
 200a5b4:	e0fffd17 	ldw	r3,-12(fp)
 200a5b8:	1808943a 	slli	r4,r3,16
 200a5bc:	e0fffc17 	ldw	r3,-16(fp)
 200a5c0:	18ffffcc 	andi	r3,r3,65535
 200a5c4:	20c6b03a 	or	r3,r4,r3
 200a5c8:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 200a5cc:	e0bff717 	ldw	r2,-36(fp)
 200a5d0:	e0fff817 	ldw	r3,-32(fp)
 200a5d4:	18bfc52e 	bgeu	r3,r2,200a4ec <quorem+0xcc>
      if (!*bxe)
 200a5d8:	e0bff617 	ldw	r2,-40(fp)
 200a5dc:	10800017 	ldw	r2,0(r2)
 200a5e0:	1000131e 	bne	r2,zero,200a630 <quorem+0x210>
	{
	  bx = b->_x;
 200a5e4:	e0bffe17 	ldw	r2,-8(fp)
 200a5e8:	10800504 	addi	r2,r2,20
 200a5ec:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 200a5f0:	00000306 	br	200a600 <quorem+0x1e0>
	    --n;
 200a5f4:	e0bff117 	ldw	r2,-60(fp)
 200a5f8:	10bfffc4 	addi	r2,r2,-1
 200a5fc:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 200a600:	e0bff617 	ldw	r2,-40(fp)
 200a604:	10bfff04 	addi	r2,r2,-4
 200a608:	e0bff615 	stw	r2,-40(fp)
 200a60c:	e0bff617 	ldw	r2,-40(fp)
 200a610:	e0fff517 	ldw	r3,-44(fp)
 200a614:	1880032e 	bgeu	r3,r2,200a624 <quorem+0x204>
 200a618:	e0bff617 	ldw	r2,-40(fp)
 200a61c:	10800017 	ldw	r2,0(r2)
 200a620:	103ff426 	beq	r2,zero,200a5f4 <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 200a624:	e0bffe17 	ldw	r2,-8(fp)
 200a628:	e0fff117 	ldw	r3,-60(fp)
 200a62c:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 200a630:	e17fff17 	ldw	r5,-4(fp)
 200a634:	e13ffe17 	ldw	r4,-8(fp)
 200a638:	20100500 	call	2010050 <__mcmp>
 200a63c:	10005f16 	blt	r2,zero,200a7bc <quorem+0x39c>
    {
      q++;
 200a640:	e0bff417 	ldw	r2,-48(fp)
 200a644:	10800044 	addi	r2,r2,1
 200a648:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 200a64c:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200a650:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 200a654:	e0bffe17 	ldw	r2,-8(fp)
 200a658:	10800504 	addi	r2,r2,20
 200a65c:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 200a660:	e0bfff17 	ldw	r2,-4(fp)
 200a664:	10800504 	addi	r2,r2,20
 200a668:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 200a66c:	e0bff717 	ldw	r2,-36(fp)
 200a670:	10c00104 	addi	r3,r2,4
 200a674:	e0fff715 	stw	r3,-36(fp)
 200a678:	10800017 	ldw	r2,0(r2)
 200a67c:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 200a680:	e0bff917 	ldw	r2,-28(fp)
 200a684:	10ffffcc 	andi	r3,r2,65535
 200a688:	e0bff317 	ldw	r2,-52(fp)
 200a68c:	1885883a 	add	r2,r3,r2
 200a690:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 200a694:	e0bff917 	ldw	r2,-28(fp)
 200a698:	1006d43a 	srli	r3,r2,16
 200a69c:	e0bffa17 	ldw	r2,-24(fp)
 200a6a0:	1004d43a 	srli	r2,r2,16
 200a6a4:	1885883a 	add	r2,r3,r2
 200a6a8:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 200a6ac:	e0bffb17 	ldw	r2,-20(fp)
 200a6b0:	1004d43a 	srli	r2,r2,16
 200a6b4:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200a6b8:	e0bff517 	ldw	r2,-44(fp)
 200a6bc:	10800017 	ldw	r2,0(r2)
 200a6c0:	10ffffcc 	andi	r3,r2,65535
 200a6c4:	e0bffa17 	ldw	r2,-24(fp)
 200a6c8:	10bfffcc 	andi	r2,r2,65535
 200a6cc:	1887c83a 	sub	r3,r3,r2
 200a6d0:	e0bff217 	ldw	r2,-56(fp)
 200a6d4:	1885883a 	add	r2,r3,r2
 200a6d8:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 200a6dc:	e0bffc17 	ldw	r2,-16(fp)
 200a6e0:	1005d43a 	srai	r2,r2,16
 200a6e4:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200a6e8:	e0bff517 	ldw	r2,-44(fp)
 200a6ec:	10800017 	ldw	r2,0(r2)
 200a6f0:	1006d43a 	srli	r3,r2,16
 200a6f4:	e0bffb17 	ldw	r2,-20(fp)
 200a6f8:	10bfffcc 	andi	r2,r2,65535
 200a6fc:	1887c83a 	sub	r3,r3,r2
 200a700:	e0bff217 	ldw	r2,-56(fp)
 200a704:	1885883a 	add	r2,r3,r2
 200a708:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 200a70c:	e0bffd17 	ldw	r2,-12(fp)
 200a710:	1005d43a 	srai	r2,r2,16
 200a714:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200a718:	e0bff517 	ldw	r2,-44(fp)
 200a71c:	10c00104 	addi	r3,r2,4
 200a720:	e0fff515 	stw	r3,-44(fp)
 200a724:	e0fffd17 	ldw	r3,-12(fp)
 200a728:	1808943a 	slli	r4,r3,16
 200a72c:	e0fffc17 	ldw	r3,-16(fp)
 200a730:	18ffffcc 	andi	r3,r3,65535
 200a734:	20c6b03a 	or	r3,r4,r3
 200a738:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 200a73c:	e0bff717 	ldw	r2,-36(fp)
 200a740:	e0fff817 	ldw	r3,-32(fp)
 200a744:	18bfc92e 	bgeu	r3,r2,200a66c <quorem+0x24c>
      bx = b->_x;
 200a748:	e0bffe17 	ldw	r2,-8(fp)
 200a74c:	10800504 	addi	r2,r2,20
 200a750:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 200a754:	e0bff117 	ldw	r2,-60(fp)
 200a758:	1085883a 	add	r2,r2,r2
 200a75c:	1085883a 	add	r2,r2,r2
 200a760:	1007883a 	mov	r3,r2
 200a764:	e0bff517 	ldw	r2,-44(fp)
 200a768:	10c5883a 	add	r2,r2,r3
 200a76c:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 200a770:	e0bff617 	ldw	r2,-40(fp)
 200a774:	10800017 	ldw	r2,0(r2)
 200a778:	1000101e 	bne	r2,zero,200a7bc <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 200a77c:	00000306 	br	200a78c <quorem+0x36c>
	    --n;
 200a780:	e0bff117 	ldw	r2,-60(fp)
 200a784:	10bfffc4 	addi	r2,r2,-1
 200a788:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 200a78c:	e0bff617 	ldw	r2,-40(fp)
 200a790:	10bfff04 	addi	r2,r2,-4
 200a794:	e0bff615 	stw	r2,-40(fp)
 200a798:	e0bff617 	ldw	r2,-40(fp)
 200a79c:	e0fff517 	ldw	r3,-44(fp)
 200a7a0:	1880032e 	bgeu	r3,r2,200a7b0 <quorem+0x390>
 200a7a4:	e0bff617 	ldw	r2,-40(fp)
 200a7a8:	10800017 	ldw	r2,0(r2)
 200a7ac:	103ff426 	beq	r2,zero,200a780 <quorem+0x360>
	    --n;
	  b->_wds = n;
 200a7b0:	e0bffe17 	ldw	r2,-8(fp)
 200a7b4:	e0fff117 	ldw	r3,-60(fp)
 200a7b8:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 200a7bc:	e0bff417 	ldw	r2,-48(fp)
}
 200a7c0:	e037883a 	mov	sp,fp
 200a7c4:	dfc00117 	ldw	ra,4(sp)
 200a7c8:	df000017 	ldw	fp,0(sp)
 200a7cc:	dec00204 	addi	sp,sp,8
 200a7d0:	f800283a 	ret

0200a7d4 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 200a7d4:	deffcc04 	addi	sp,sp,-208
 200a7d8:	dfc03315 	stw	ra,204(sp)
 200a7dc:	df003215 	stw	fp,200(sp)
 200a7e0:	dcc03115 	stw	r19,196(sp)
 200a7e4:	dc803015 	stw	r18,192(sp)
 200a7e8:	dc402f15 	stw	r17,188(sp)
 200a7ec:	dc002e15 	stw	r16,184(sp)
 200a7f0:	df003204 	addi	fp,sp,200
 200a7f4:	e13ff815 	stw	r4,-32(fp)
 200a7f8:	e17ff915 	stw	r5,-28(fp)
 200a7fc:	e1bffa15 	stw	r6,-24(fp)
 200a800:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 200a804:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 200a808:	e0bff917 	ldw	r2,-28(fp)
 200a80c:	e0bff215 	stw	r2,-56(fp)
 200a810:	e0bffa17 	ldw	r2,-24(fp)
 200a814:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 200a818:	e0bff817 	ldw	r2,-32(fp)
 200a81c:	10801017 	ldw	r2,64(r2)
 200a820:	10001326 	beq	r2,zero,200a870 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 200a824:	e0bff817 	ldw	r2,-32(fp)
 200a828:	10801017 	ldw	r2,64(r2)
 200a82c:	e0fff817 	ldw	r3,-32(fp)
 200a830:	18c01117 	ldw	r3,68(r3)
 200a834:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 200a838:	e0bff817 	ldw	r2,-32(fp)
 200a83c:	10801017 	ldw	r2,64(r2)
 200a840:	e0fff817 	ldw	r3,-32(fp)
 200a844:	18c01117 	ldw	r3,68(r3)
 200a848:	01000044 	movi	r4,1
 200a84c:	20c6983a 	sll	r3,r4,r3
 200a850:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 200a854:	e0bff817 	ldw	r2,-32(fp)
 200a858:	10801017 	ldw	r2,64(r2)
 200a85c:	100b883a 	mov	r5,r2
 200a860:	e13ff817 	ldw	r4,-32(fp)
 200a864:	200f3a00 	call	200f3a0 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 200a868:	e0bff817 	ldw	r2,-32(fp)
 200a86c:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 200a870:	e0bff317 	ldw	r2,-52(fp)
 200a874:	1000090e 	bge	r2,zero,200a89c <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 200a878:	e0800417 	ldw	r2,16(fp)
 200a87c:	00c00044 	movi	r3,1
 200a880:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 200a884:	e0fff317 	ldw	r3,-52(fp)
 200a888:	00a00034 	movhi	r2,32768
 200a88c:	10bfffc4 	addi	r2,r2,-1
 200a890:	1884703a 	and	r2,r3,r2
 200a894:	e0bff315 	stw	r2,-52(fp)
 200a898:	00000206 	br	200a8a4 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 200a89c:	e0800417 	ldw	r2,16(fp)
 200a8a0:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 200a8a4:	e0bff317 	ldw	r2,-52(fp)
 200a8a8:	10dffc2c 	andhi	r3,r2,32752
 200a8ac:	009ffc34 	movhi	r2,32752
 200a8b0:	1880221e 	bne	r3,r2,200a93c <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 200a8b4:	e0800317 	ldw	r2,12(fp)
 200a8b8:	00c9c3c4 	movi	r3,9999
 200a8bc:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 200a8c0:	e0bff217 	ldw	r2,-56(fp)
 200a8c4:	1000081e 	bne	r2,zero,200a8e8 <_dtoa_r+0x114>
 200a8c8:	e0fff317 	ldw	r3,-52(fp)
 200a8cc:	00800434 	movhi	r2,16
 200a8d0:	10bfffc4 	addi	r2,r2,-1
 200a8d4:	1884703a 	and	r2,r3,r2
 200a8d8:	1000031e 	bne	r2,zero,200a8e8 <_dtoa_r+0x114>
 200a8dc:	008080b4 	movhi	r2,514
 200a8e0:	1086ff04 	addi	r2,r2,7164
 200a8e4:	00000206 	br	200a8f0 <_dtoa_r+0x11c>
 200a8e8:	008080b4 	movhi	r2,514
 200a8ec:	10870204 	addi	r2,r2,7176
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 200a8f0:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 200a8f4:	e0800517 	ldw	r2,20(fp)
 200a8f8:	10000e26 	beq	r2,zero,200a934 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 200a8fc:	e0bfe717 	ldw	r2,-100(fp)
 200a900:	108000c4 	addi	r2,r2,3
 200a904:	10800003 	ldbu	r2,0(r2)
 200a908:	10803fcc 	andi	r2,r2,255
 200a90c:	1080201c 	xori	r2,r2,128
 200a910:	10bfe004 	addi	r2,r2,-128
 200a914:	10000326 	beq	r2,zero,200a924 <_dtoa_r+0x150>
 200a918:	e0bfe717 	ldw	r2,-100(fp)
 200a91c:	10800204 	addi	r2,r2,8
 200a920:	00000206 	br	200a92c <_dtoa_r+0x158>
 200a924:	e0bfe717 	ldw	r2,-100(fp)
 200a928:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 200a92c:	e0c00517 	ldw	r3,20(fp)
 200a930:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 200a934:	e0bfe717 	ldw	r2,-100(fp)
 200a938:	00067b06 	br	200c328 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 200a93c:	e0bff217 	ldw	r2,-56(fp)
 200a940:	e0fff317 	ldw	r3,-52(fp)
 200a944:	000d883a 	mov	r6,zero
 200a948:	000f883a 	mov	r7,zero
 200a94c:	1009883a 	mov	r4,r2
 200a950:	180b883a 	mov	r5,r3
 200a954:	20068680 	call	2006868 <__eqdf2>
 200a958:	10000e1e 	bne	r2,zero,200a994 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 200a95c:	e0800317 	ldw	r2,12(fp)
 200a960:	00c00044 	movi	r3,1
 200a964:	10c00015 	stw	r3,0(r2)
      s = "0";
 200a968:	008080b4 	movhi	r2,514
 200a96c:	10870304 	addi	r2,r2,7180
 200a970:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 200a974:	e0800517 	ldw	r2,20(fp)
 200a978:	10000426 	beq	r2,zero,200a98c <_dtoa_r+0x1b8>
	*rve = s + 1;
 200a97c:	e0bfe717 	ldw	r2,-100(fp)
 200a980:	10c00044 	addi	r3,r2,1
 200a984:	e0800517 	ldw	r2,20(fp)
 200a988:	10c00015 	stw	r3,0(r2)
      return s;
 200a98c:	e0bfe717 	ldw	r2,-100(fp)
 200a990:	00066506 	br	200c328 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 200a994:	e0bff217 	ldw	r2,-56(fp)
 200a998:	e0fff317 	ldw	r3,-52(fp)
 200a99c:	e17ff104 	addi	r5,fp,-60
 200a9a0:	e13ff004 	addi	r4,fp,-64
 200a9a4:	d9000015 	stw	r4,0(sp)
 200a9a8:	280f883a 	mov	r7,r5
 200a9ac:	100b883a 	mov	r5,r2
 200a9b0:	180d883a 	mov	r6,r3
 200a9b4:	e13ff817 	ldw	r4,-32(fp)
 200a9b8:	20106d80 	call	20106d8 <__d2b>
 200a9bc:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 200a9c0:	e0bff317 	ldw	r2,-52(fp)
 200a9c4:	1004d53a 	srli	r2,r2,20
 200a9c8:	1081ffcc 	andi	r2,r2,2047
 200a9cc:	e0bfd215 	stw	r2,-184(fp)
 200a9d0:	e0bfd217 	ldw	r2,-184(fp)
 200a9d4:	10001126 	beq	r2,zero,200aa1c <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 200a9d8:	e0bff217 	ldw	r2,-56(fp)
 200a9dc:	e0fff317 	ldw	r3,-52(fp)
 200a9e0:	e0bff415 	stw	r2,-48(fp)
 200a9e4:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 200a9e8:	e0fff517 	ldw	r3,-44(fp)
 200a9ec:	00800434 	movhi	r2,16
 200a9f0:	10bfffc4 	addi	r2,r2,-1
 200a9f4:	1884703a 	and	r2,r3,r2
 200a9f8:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 200a9fc:	e0bff517 	ldw	r2,-44(fp)
 200aa00:	108ffc34 	orhi	r2,r2,16368
 200aa04:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 200aa08:	e0bfd217 	ldw	r2,-184(fp)
 200aa0c:	10bf0044 	addi	r2,r2,-1023
 200aa10:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 200aa14:	e03fe015 	stw	zero,-128(fp)
 200aa18:	00002806 	br	200aabc <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 200aa1c:	e0fff017 	ldw	r3,-64(fp)
 200aa20:	e0bff117 	ldw	r2,-60(fp)
 200aa24:	1885883a 	add	r2,r3,r2
 200aa28:	10810c84 	addi	r2,r2,1074
 200aa2c:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 200aa30:	e0bfd217 	ldw	r2,-184(fp)
 200aa34:	10800850 	cmplti	r2,r2,33
 200aa38:	10000b1e 	bne	r2,zero,200aa68 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 200aa3c:	e0fff317 	ldw	r3,-52(fp)
 200aa40:	01001004 	movi	r4,64
 200aa44:	e0bfd217 	ldw	r2,-184(fp)
 200aa48:	2085c83a 	sub	r2,r4,r2
 200aa4c:	1886983a 	sll	r3,r3,r2
 200aa50:	e13ff217 	ldw	r4,-56(fp)
 200aa54:	e0bfd217 	ldw	r2,-184(fp)
 200aa58:	10bff804 	addi	r2,r2,-32
 200aa5c:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 200aa60:	1884b03a 	or	r2,r3,r2
 200aa64:	00000506 	br	200aa7c <_dtoa_r+0x2a8>
 200aa68:	e0fff217 	ldw	r3,-56(fp)
 200aa6c:	01000804 	movi	r4,32
 200aa70:	e0bfd217 	ldw	r2,-184(fp)
 200aa74:	2085c83a 	sub	r2,r4,r2
 200aa78:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 200aa7c:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 200aa80:	e13fe817 	ldw	r4,-96(fp)
 200aa84:	2015c340 	call	2015c34 <__floatunsidf>
 200aa88:	1009883a 	mov	r4,r2
 200aa8c:	180b883a 	mov	r5,r3
 200aa90:	e13ff415 	stw	r4,-48(fp)
 200aa94:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 200aa98:	e0fff517 	ldw	r3,-44(fp)
 200aa9c:	00bf8434 	movhi	r2,65040
 200aaa0:	1885883a 	add	r2,r3,r2
 200aaa4:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 200aaa8:	e0bfd217 	ldw	r2,-184(fp)
 200aaac:	10bef344 	addi	r2,r2,-1075
 200aab0:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 200aab4:	00800044 	movi	r2,1
 200aab8:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 200aabc:	e0bff417 	ldw	r2,-48(fp)
 200aac0:	e0fff517 	ldw	r3,-44(fp)
 200aac4:	000d883a 	mov	r6,zero
 200aac8:	01cffe34 	movhi	r7,16376
 200aacc:	1009883a 	mov	r4,r2
 200aad0:	180b883a 	mov	r5,r3
 200aad4:	20151dc0 	call	20151dc <__subdf3>
 200aad8:	1009883a 	mov	r4,r2
 200aadc:	180b883a 	mov	r5,r3
 200aae0:	2005883a 	mov	r2,r4
 200aae4:	2807883a 	mov	r3,r5
 200aae8:	0198dbf4 	movhi	r6,25455
 200aaec:	3190d844 	addi	r6,r6,17249
 200aaf0:	01cff4f4 	movhi	r7,16339
 200aaf4:	39e1e9c4 	addi	r7,r7,-30809
 200aaf8:	1009883a 	mov	r4,r2
 200aafc:	180b883a 	mov	r5,r3
 200ab00:	2006ac00 	call	2006ac0 <__muldf3>
 200ab04:	1009883a 	mov	r4,r2
 200ab08:	180b883a 	mov	r5,r3
 200ab0c:	2005883a 	mov	r2,r4
 200ab10:	2807883a 	mov	r3,r5
 200ab14:	01a2d874 	movhi	r6,35681
 200ab18:	31b22cc4 	addi	r6,r6,-14157
 200ab1c:	01cff1f4 	movhi	r7,16327
 200ab20:	39e28a04 	addi	r7,r7,-30168
 200ab24:	1009883a 	mov	r4,r2
 200ab28:	180b883a 	mov	r5,r3
 200ab2c:	20149300 	call	2014930 <__adddf3>
 200ab30:	1009883a 	mov	r4,r2
 200ab34:	180b883a 	mov	r5,r3
 200ab38:	2025883a 	mov	r18,r4
 200ab3c:	2827883a 	mov	r19,r5
 200ab40:	e13fd217 	ldw	r4,-184(fp)
 200ab44:	2015b580 	call	2015b58 <__floatsidf>
 200ab48:	1011883a 	mov	r8,r2
 200ab4c:	1813883a 	mov	r9,r3
 200ab50:	019427f4 	movhi	r6,20639
 200ab54:	319e7ec4 	addi	r6,r6,31227
 200ab58:	01cff4f4 	movhi	r7,16339
 200ab5c:	39d104c4 	addi	r7,r7,17427
 200ab60:	4009883a 	mov	r4,r8
 200ab64:	480b883a 	mov	r5,r9
 200ab68:	2006ac00 	call	2006ac0 <__muldf3>
 200ab6c:	1009883a 	mov	r4,r2
 200ab70:	180b883a 	mov	r5,r3
 200ab74:	2005883a 	mov	r2,r4
 200ab78:	2807883a 	mov	r3,r5
 200ab7c:	100d883a 	mov	r6,r2
 200ab80:	180f883a 	mov	r7,r3
 200ab84:	9009883a 	mov	r4,r18
 200ab88:	980b883a 	mov	r5,r19
 200ab8c:	20149300 	call	2014930 <__adddf3>
 200ab90:	1009883a 	mov	r4,r2
 200ab94:	180b883a 	mov	r5,r3
 200ab98:	e13fe515 	stw	r4,-108(fp)
 200ab9c:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 200aba0:	e13fe517 	ldw	r4,-108(fp)
 200aba4:	e17fe617 	ldw	r5,-104(fp)
 200aba8:	2015ad80 	call	2015ad8 <__fixdfsi>
 200abac:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 200abb0:	000d883a 	mov	r6,zero
 200abb4:	000f883a 	mov	r7,zero
 200abb8:	e13fe517 	ldw	r4,-108(fp)
 200abbc:	e17fe617 	ldw	r5,-104(fp)
 200abc0:	20069cc0 	call	20069cc <__ledf2>
 200abc4:	10000d0e 	bge	r2,zero,200abfc <_dtoa_r+0x428>
 200abc8:	e13fd717 	ldw	r4,-164(fp)
 200abcc:	2015b580 	call	2015b58 <__floatsidf>
 200abd0:	1011883a 	mov	r8,r2
 200abd4:	1813883a 	mov	r9,r3
 200abd8:	e1bfe517 	ldw	r6,-108(fp)
 200abdc:	e1ffe617 	ldw	r7,-104(fp)
 200abe0:	4009883a 	mov	r4,r8
 200abe4:	480b883a 	mov	r5,r9
 200abe8:	20068680 	call	2006868 <__eqdf2>
 200abec:	10000326 	beq	r2,zero,200abfc <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 200abf0:	e0bfd717 	ldw	r2,-164(fp)
 200abf4:	10bfffc4 	addi	r2,r2,-1
 200abf8:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 200abfc:	00800044 	movi	r2,1
 200ac00:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 200ac04:	e0bfd717 	ldw	r2,-164(fp)
 200ac08:	10001616 	blt	r2,zero,200ac64 <_dtoa_r+0x490>
 200ac0c:	e0bfd717 	ldw	r2,-164(fp)
 200ac10:	108005c8 	cmpgei	r2,r2,23
 200ac14:	1000131e 	bne	r2,zero,200ac64 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 200ac18:	e0bff217 	ldw	r2,-56(fp)
 200ac1c:	e0fff317 	ldw	r3,-52(fp)
 200ac20:	010080b4 	movhi	r4,514
 200ac24:	21070904 	addi	r4,r4,7204
 200ac28:	e17fd717 	ldw	r5,-164(fp)
 200ac2c:	280a90fa 	slli	r5,r5,3
 200ac30:	214d883a 	add	r6,r4,r5
 200ac34:	31000017 	ldw	r4,0(r6)
 200ac38:	31400117 	ldw	r5,4(r6)
 200ac3c:	200d883a 	mov	r6,r4
 200ac40:	280f883a 	mov	r7,r5
 200ac44:	1009883a 	mov	r4,r2
 200ac48:	180b883a 	mov	r5,r3
 200ac4c:	20069cc0 	call	20069cc <__ledf2>
 200ac50:	1000030e 	bge	r2,zero,200ac60 <_dtoa_r+0x48c>
	k--;
 200ac54:	e0bfd717 	ldw	r2,-164(fp)
 200ac58:	10bfffc4 	addi	r2,r2,-1
 200ac5c:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 200ac60:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 200ac64:	e0fff017 	ldw	r3,-64(fp)
 200ac68:	e0bfd217 	ldw	r2,-184(fp)
 200ac6c:	1885c83a 	sub	r2,r3,r2
 200ac70:	10bfffc4 	addi	r2,r2,-1
 200ac74:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 200ac78:	e0bfd617 	ldw	r2,-168(fp)
 200ac7c:	10000416 	blt	r2,zero,200ac90 <_dtoa_r+0x4bc>
    {
      b2 = 0;
 200ac80:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 200ac84:	e0bfd617 	ldw	r2,-168(fp)
 200ac88:	e0bfdc15 	stw	r2,-144(fp)
 200ac8c:	00000406 	br	200aca0 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 200ac90:	e0bfd617 	ldw	r2,-168(fp)
 200ac94:	0085c83a 	sub	r2,zero,r2
 200ac98:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 200ac9c:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 200aca0:	e0bfd717 	ldw	r2,-164(fp)
 200aca4:	10000816 	blt	r2,zero,200acc8 <_dtoa_r+0x4f4>
    {
      b5 = 0;
 200aca8:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 200acac:	e0bfd717 	ldw	r2,-164(fp)
 200acb0:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 200acb4:	e0ffdc17 	ldw	r3,-144(fp)
 200acb8:	e0bfd717 	ldw	r2,-164(fp)
 200acbc:	1885883a 	add	r2,r3,r2
 200acc0:	e0bfdc15 	stw	r2,-144(fp)
 200acc4:	00000806 	br	200ace8 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 200acc8:	e0ffcf17 	ldw	r3,-196(fp)
 200accc:	e0bfd717 	ldw	r2,-164(fp)
 200acd0:	1885c83a 	sub	r2,r3,r2
 200acd4:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 200acd8:	e0bfd717 	ldw	r2,-164(fp)
 200acdc:	0085c83a 	sub	r2,zero,r2
 200ace0:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 200ace4:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 200ace8:	e0bffb17 	ldw	r2,-20(fp)
 200acec:	10000316 	blt	r2,zero,200acfc <_dtoa_r+0x528>
 200acf0:	e0bffb17 	ldw	r2,-20(fp)
 200acf4:	10800290 	cmplti	r2,r2,10
 200acf8:	1000011e 	bne	r2,zero,200ad00 <_dtoa_r+0x52c>
    mode = 0;
 200acfc:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 200ad00:	00800044 	movi	r2,1
 200ad04:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 200ad08:	e0bffb17 	ldw	r2,-20(fp)
 200ad0c:	10800190 	cmplti	r2,r2,6
 200ad10:	1000041e 	bne	r2,zero,200ad24 <_dtoa_r+0x550>
    {
      mode -= 4;
 200ad14:	e0bffb17 	ldw	r2,-20(fp)
 200ad18:	10bfff04 	addi	r2,r2,-4
 200ad1c:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 200ad20:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 200ad24:	00800044 	movi	r2,1
 200ad28:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 200ad2c:	00bfffc4 	movi	r2,-1
 200ad30:	e0bfd515 	stw	r2,-172(fp)
 200ad34:	e0bfd517 	ldw	r2,-172(fp)
 200ad38:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 200ad3c:	e0bffb17 	ldw	r2,-20(fp)
 200ad40:	108001a8 	cmpgeui	r2,r2,6
 200ad44:	10002c1e 	bne	r2,zero,200adf8 <_dtoa_r+0x624>
 200ad48:	e0bffb17 	ldw	r2,-20(fp)
 200ad4c:	100690ba 	slli	r3,r2,2
 200ad50:	00808074 	movhi	r2,513
 200ad54:	10ab5904 	addi	r2,r2,-21148
 200ad58:	1885883a 	add	r2,r3,r2
 200ad5c:	10800017 	ldw	r2,0(r2)
 200ad60:	1000683a 	jmp	r2
 200ad64:	0200ad7c 	xorhi	r8,zero,693
 200ad68:	0200ad7c 	xorhi	r8,zero,693
 200ad6c:	0200ad8c 	andi	r8,zero,694
 200ad70:	0200adbc 	xorhi	r8,zero,694
 200ad74:	0200ad90 	cmplti	r8,zero,694
 200ad78:	0200adc0 	call	200adc <__alt_mem_mem_Nios_PI+0xadc>
    {
    case 0:
    case 1:
      i = 18;
 200ad7c:	00800484 	movi	r2,18
 200ad80:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 200ad84:	e0000215 	stw	zero,8(fp)
      break;
 200ad88:	00001b06 	br	200adf8 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 200ad8c:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 200ad90:	e0800217 	ldw	r2,8(fp)
 200ad94:	00800216 	blt	zero,r2,200ada0 <_dtoa_r+0x5cc>
	ndigits = 1;
 200ad98:	00800044 	movi	r2,1
 200ad9c:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 200ada0:	e0800217 	ldw	r2,8(fp)
 200ada4:	e0bfd215 	stw	r2,-184(fp)
 200ada8:	e0bfd217 	ldw	r2,-184(fp)
 200adac:	e0bfd515 	stw	r2,-172(fp)
 200adb0:	e0bfd517 	ldw	r2,-172(fp)
 200adb4:	e0bfd415 	stw	r2,-176(fp)
      break;
 200adb8:	00000f06 	br	200adf8 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 200adbc:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 200adc0:	e0c00217 	ldw	r3,8(fp)
 200adc4:	e0bfd717 	ldw	r2,-164(fp)
 200adc8:	1885883a 	add	r2,r3,r2
 200adcc:	10800044 	addi	r2,r2,1
 200add0:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 200add4:	e0bfd217 	ldw	r2,-184(fp)
 200add8:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 200addc:	e0bfd217 	ldw	r2,-184(fp)
 200ade0:	10bfffc4 	addi	r2,r2,-1
 200ade4:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 200ade8:	e0bfd217 	ldw	r2,-184(fp)
 200adec:	00800216 	blt	zero,r2,200adf8 <_dtoa_r+0x624>
	i = 1;
 200adf0:	00800044 	movi	r2,1
 200adf4:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 200adf8:	00800104 	movi	r2,4
 200adfc:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200ae00:	e0bff817 	ldw	r2,-32(fp)
 200ae04:	10001115 	stw	zero,68(r2)
 200ae08:	00000806 	br	200ae2c <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 200ae0c:	e0bff817 	ldw	r2,-32(fp)
 200ae10:	10801117 	ldw	r2,68(r2)
 200ae14:	10c00044 	addi	r3,r2,1
 200ae18:	e0bff817 	ldw	r2,-32(fp)
 200ae1c:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 200ae20:	e0bfd617 	ldw	r2,-168(fp)
 200ae24:	1085883a 	add	r2,r2,r2
 200ae28:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200ae2c:	e0bfd617 	ldw	r2,-168(fp)
 200ae30:	10800504 	addi	r2,r2,20
 200ae34:	e0ffd217 	ldw	r3,-184(fp)
 200ae38:	18bff42e 	bgeu	r3,r2,200ae0c <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 200ae3c:	e0bff817 	ldw	r2,-32(fp)
 200ae40:	10801117 	ldw	r2,68(r2)
 200ae44:	100b883a 	mov	r5,r2
 200ae48:	e13ff817 	ldw	r4,-32(fp)
 200ae4c:	200f2700 	call	200f270 <_Balloc>
 200ae50:	1007883a 	mov	r3,r2
 200ae54:	e0bff817 	ldw	r2,-32(fp)
 200ae58:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 200ae5c:	e0bff817 	ldw	r2,-32(fp)
 200ae60:	10801017 	ldw	r2,64(r2)
 200ae64:	e0bfe915 	stw	r2,-92(fp)
 200ae68:	e0bfe917 	ldw	r2,-92(fp)
 200ae6c:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 200ae70:	e0bfd417 	ldw	r2,-176(fp)
 200ae74:	10021616 	blt	r2,zero,200b6d0 <_dtoa_r+0xefc>
 200ae78:	e0bfd417 	ldw	r2,-176(fp)
 200ae7c:	108003c8 	cmpgei	r2,r2,15
 200ae80:	1002131e 	bne	r2,zero,200b6d0 <_dtoa_r+0xefc>
 200ae84:	e0bfdf17 	ldw	r2,-132(fp)
 200ae88:	10021126 	beq	r2,zero,200b6d0 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 200ae8c:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 200ae90:	e0bff217 	ldw	r2,-56(fp)
 200ae94:	e0fff317 	ldw	r3,-52(fp)
 200ae98:	e0bff415 	stw	r2,-48(fp)
 200ae9c:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 200aea0:	e0bfd717 	ldw	r2,-164(fp)
 200aea4:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 200aea8:	e0bfd417 	ldw	r2,-176(fp)
 200aeac:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 200aeb0:	00800084 	movi	r2,2
 200aeb4:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 200aeb8:	e0bfd717 	ldw	r2,-164(fp)
 200aebc:	0080540e 	bge	zero,r2,200b010 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 200aec0:	e0bfd717 	ldw	r2,-164(fp)
 200aec4:	10c003cc 	andi	r3,r2,15
 200aec8:	008080b4 	movhi	r2,514
 200aecc:	10870904 	addi	r2,r2,7204
 200aed0:	180690fa 	slli	r3,r3,3
 200aed4:	10c5883a 	add	r2,r2,r3
 200aed8:	10c00017 	ldw	r3,0(r2)
 200aedc:	e0ffe515 	stw	r3,-108(fp)
 200aee0:	10800117 	ldw	r2,4(r2)
 200aee4:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 200aee8:	e0bfd717 	ldw	r2,-164(fp)
 200aeec:	1005d13a 	srai	r2,r2,4
 200aef0:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 200aef4:	e0bfd617 	ldw	r2,-168(fp)
 200aef8:	1080040c 	andi	r2,r2,16
 200aefc:	10003426 	beq	r2,zero,200afd0 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 200af00:	e0bfd617 	ldw	r2,-168(fp)
 200af04:	108003cc 	andi	r2,r2,15
 200af08:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 200af0c:	e0bff217 	ldw	r2,-56(fp)
 200af10:	e0fff317 	ldw	r3,-52(fp)
 200af14:	018080b4 	movhi	r6,514
 200af18:	31873b04 	addi	r6,r6,7404
 200af1c:	31000817 	ldw	r4,32(r6)
 200af20:	31400917 	ldw	r5,36(r6)
 200af24:	200d883a 	mov	r6,r4
 200af28:	280f883a 	mov	r7,r5
 200af2c:	1009883a 	mov	r4,r2
 200af30:	180b883a 	mov	r5,r3
 200af34:	2005f800 	call	2005f80 <__divdf3>
 200af38:	1009883a 	mov	r4,r2
 200af3c:	180b883a 	mov	r5,r3
 200af40:	2005883a 	mov	r2,r4
 200af44:	2807883a 	mov	r3,r5
 200af48:	e0bff215 	stw	r2,-56(fp)
 200af4c:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 200af50:	e0bfd317 	ldw	r2,-180(fp)
 200af54:	10800044 	addi	r2,r2,1
 200af58:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 200af5c:	00001c06 	br	200afd0 <_dtoa_r+0x7fc>
	    if (j & 1)
 200af60:	e0bfd617 	ldw	r2,-168(fp)
 200af64:	1080004c 	andi	r2,r2,1
 200af68:	10001326 	beq	r2,zero,200afb8 <_dtoa_r+0x7e4>
	      {
		ieps++;
 200af6c:	e0bfd317 	ldw	r2,-180(fp)
 200af70:	10800044 	addi	r2,r2,1
 200af74:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 200af78:	008080b4 	movhi	r2,514
 200af7c:	10873b04 	addi	r2,r2,7404
 200af80:	e0ffd217 	ldw	r3,-184(fp)
 200af84:	180690fa 	slli	r3,r3,3
 200af88:	10c9883a 	add	r4,r2,r3
 200af8c:	20800017 	ldw	r2,0(r4)
 200af90:	20c00117 	ldw	r3,4(r4)
 200af94:	100d883a 	mov	r6,r2
 200af98:	180f883a 	mov	r7,r3
 200af9c:	e13fe517 	ldw	r4,-108(fp)
 200afa0:	e17fe617 	ldw	r5,-104(fp)
 200afa4:	2006ac00 	call	2006ac0 <__muldf3>
 200afa8:	1009883a 	mov	r4,r2
 200afac:	180b883a 	mov	r5,r3
 200afb0:	e13fe515 	stw	r4,-108(fp)
 200afb4:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 200afb8:	e0bfd617 	ldw	r2,-168(fp)
 200afbc:	1005d07a 	srai	r2,r2,1
 200afc0:	e0bfd615 	stw	r2,-168(fp)
 200afc4:	e0bfd217 	ldw	r2,-184(fp)
 200afc8:	10800044 	addi	r2,r2,1
 200afcc:	e0bfd215 	stw	r2,-184(fp)
 200afd0:	e0bfd617 	ldw	r2,-168(fp)
 200afd4:	103fe21e 	bne	r2,zero,200af60 <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 200afd8:	e0bff217 	ldw	r2,-56(fp)
 200afdc:	e0fff317 	ldw	r3,-52(fp)
 200afe0:	e1bfe517 	ldw	r6,-108(fp)
 200afe4:	e1ffe617 	ldw	r7,-104(fp)
 200afe8:	1009883a 	mov	r4,r2
 200afec:	180b883a 	mov	r5,r3
 200aff0:	2005f800 	call	2005f80 <__divdf3>
 200aff4:	1009883a 	mov	r4,r2
 200aff8:	180b883a 	mov	r5,r3
 200affc:	2005883a 	mov	r2,r4
 200b000:	2807883a 	mov	r3,r5
 200b004:	e0bff215 	stw	r2,-56(fp)
 200b008:	e0fff315 	stw	r3,-52(fp)
 200b00c:	00004006 	br	200b110 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 200b010:	e0bfd717 	ldw	r2,-164(fp)
 200b014:	0085c83a 	sub	r2,zero,r2
 200b018:	e0bfec15 	stw	r2,-80(fp)
 200b01c:	e0bfec17 	ldw	r2,-80(fp)
 200b020:	10003b26 	beq	r2,zero,200b110 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 200b024:	e0bff217 	ldw	r2,-56(fp)
 200b028:	e0fff317 	ldw	r3,-52(fp)
 200b02c:	e13fec17 	ldw	r4,-80(fp)
 200b030:	214003cc 	andi	r5,r4,15
 200b034:	010080b4 	movhi	r4,514
 200b038:	21070904 	addi	r4,r4,7204
 200b03c:	280a90fa 	slli	r5,r5,3
 200b040:	214d883a 	add	r6,r4,r5
 200b044:	31000017 	ldw	r4,0(r6)
 200b048:	31400117 	ldw	r5,4(r6)
 200b04c:	200d883a 	mov	r6,r4
 200b050:	280f883a 	mov	r7,r5
 200b054:	1009883a 	mov	r4,r2
 200b058:	180b883a 	mov	r5,r3
 200b05c:	2006ac00 	call	2006ac0 <__muldf3>
 200b060:	1009883a 	mov	r4,r2
 200b064:	180b883a 	mov	r5,r3
 200b068:	2005883a 	mov	r2,r4
 200b06c:	2807883a 	mov	r3,r5
 200b070:	e0bff215 	stw	r2,-56(fp)
 200b074:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200b078:	e0bfec17 	ldw	r2,-80(fp)
 200b07c:	1005d13a 	srai	r2,r2,4
 200b080:	e0bfd615 	stw	r2,-168(fp)
 200b084:	00002006 	br	200b108 <_dtoa_r+0x934>
	    if (j & 1)
 200b088:	e0bfd617 	ldw	r2,-168(fp)
 200b08c:	1080004c 	andi	r2,r2,1
 200b090:	10001726 	beq	r2,zero,200b0f0 <_dtoa_r+0x91c>
	      {
		ieps++;
 200b094:	e0bfd317 	ldw	r2,-180(fp)
 200b098:	10800044 	addi	r2,r2,1
 200b09c:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 200b0a0:	e0bff217 	ldw	r2,-56(fp)
 200b0a4:	e0fff317 	ldw	r3,-52(fp)
 200b0a8:	010080b4 	movhi	r4,514
 200b0ac:	21073b04 	addi	r4,r4,7404
 200b0b0:	e17fd217 	ldw	r5,-184(fp)
 200b0b4:	280a90fa 	slli	r5,r5,3
 200b0b8:	214d883a 	add	r6,r4,r5
 200b0bc:	31000017 	ldw	r4,0(r6)
 200b0c0:	31400117 	ldw	r5,4(r6)
 200b0c4:	200d883a 	mov	r6,r4
 200b0c8:	280f883a 	mov	r7,r5
 200b0cc:	1009883a 	mov	r4,r2
 200b0d0:	180b883a 	mov	r5,r3
 200b0d4:	2006ac00 	call	2006ac0 <__muldf3>
 200b0d8:	1009883a 	mov	r4,r2
 200b0dc:	180b883a 	mov	r5,r3
 200b0e0:	2005883a 	mov	r2,r4
 200b0e4:	2807883a 	mov	r3,r5
 200b0e8:	e0bff215 	stw	r2,-56(fp)
 200b0ec:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200b0f0:	e0bfd617 	ldw	r2,-168(fp)
 200b0f4:	1005d07a 	srai	r2,r2,1
 200b0f8:	e0bfd615 	stw	r2,-168(fp)
 200b0fc:	e0bfd217 	ldw	r2,-184(fp)
 200b100:	10800044 	addi	r2,r2,1
 200b104:	e0bfd215 	stw	r2,-184(fp)
 200b108:	e0bfd617 	ldw	r2,-168(fp)
 200b10c:	103fde1e 	bne	r2,zero,200b088 <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 200b110:	e0bfd817 	ldw	r2,-160(fp)
 200b114:	10002126 	beq	r2,zero,200b19c <_dtoa_r+0x9c8>
 200b118:	e0bff217 	ldw	r2,-56(fp)
 200b11c:	e0fff317 	ldw	r3,-52(fp)
 200b120:	000d883a 	mov	r6,zero
 200b124:	01cffc34 	movhi	r7,16368
 200b128:	1009883a 	mov	r4,r2
 200b12c:	180b883a 	mov	r5,r3
 200b130:	20069cc0 	call	20069cc <__ledf2>
 200b134:	1000190e 	bge	r2,zero,200b19c <_dtoa_r+0x9c8>
 200b138:	e0bfd417 	ldw	r2,-176(fp)
 200b13c:	0080170e 	bge	zero,r2,200b19c <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 200b140:	e0bfd517 	ldw	r2,-172(fp)
 200b144:	0081550e 	bge	zero,r2,200b69c <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 200b148:	e0bfd517 	ldw	r2,-172(fp)
 200b14c:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 200b150:	e0bfd717 	ldw	r2,-164(fp)
 200b154:	10bfffc4 	addi	r2,r2,-1
 200b158:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 200b15c:	e0bff217 	ldw	r2,-56(fp)
 200b160:	e0fff317 	ldw	r3,-52(fp)
 200b164:	000d883a 	mov	r6,zero
 200b168:	01d00934 	movhi	r7,16420
 200b16c:	1009883a 	mov	r4,r2
 200b170:	180b883a 	mov	r5,r3
 200b174:	2006ac00 	call	2006ac0 <__muldf3>
 200b178:	1009883a 	mov	r4,r2
 200b17c:	180b883a 	mov	r5,r3
 200b180:	2005883a 	mov	r2,r4
 200b184:	2807883a 	mov	r3,r5
 200b188:	e0bff215 	stw	r2,-56(fp)
 200b18c:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 200b190:	e0bfd317 	ldw	r2,-180(fp)
 200b194:	10800044 	addi	r2,r2,1
 200b198:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 200b19c:	e13fd317 	ldw	r4,-180(fp)
 200b1a0:	2015b580 	call	2015b58 <__floatsidf>
 200b1a4:	1011883a 	mov	r8,r2
 200b1a8:	1813883a 	mov	r9,r3
 200b1ac:	e0bff217 	ldw	r2,-56(fp)
 200b1b0:	e0fff317 	ldw	r3,-52(fp)
 200b1b4:	100d883a 	mov	r6,r2
 200b1b8:	180f883a 	mov	r7,r3
 200b1bc:	4009883a 	mov	r4,r8
 200b1c0:	480b883a 	mov	r5,r9
 200b1c4:	2006ac00 	call	2006ac0 <__muldf3>
 200b1c8:	1009883a 	mov	r4,r2
 200b1cc:	180b883a 	mov	r5,r3
 200b1d0:	2005883a 	mov	r2,r4
 200b1d4:	2807883a 	mov	r3,r5
 200b1d8:	000d883a 	mov	r6,zero
 200b1dc:	01d00734 	movhi	r7,16412
 200b1e0:	1009883a 	mov	r4,r2
 200b1e4:	180b883a 	mov	r5,r3
 200b1e8:	20149300 	call	2014930 <__adddf3>
 200b1ec:	1009883a 	mov	r4,r2
 200b1f0:	180b883a 	mov	r5,r3
 200b1f4:	2005883a 	mov	r2,r4
 200b1f8:	2807883a 	mov	r3,r5
 200b1fc:	e0bff615 	stw	r2,-40(fp)
 200b200:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 200b204:	e0fff717 	ldw	r3,-36(fp)
 200b208:	00bf3034 	movhi	r2,64704
 200b20c:	1885883a 	add	r2,r3,r2
 200b210:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 200b214:	e0bfd417 	ldw	r2,-176(fp)
 200b218:	1000271e 	bne	r2,zero,200b2b8 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 200b21c:	e03fe315 	stw	zero,-116(fp)
 200b220:	e0bfe317 	ldw	r2,-116(fp)
 200b224:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 200b228:	e0bff217 	ldw	r2,-56(fp)
 200b22c:	e0fff317 	ldw	r3,-52(fp)
 200b230:	000d883a 	mov	r6,zero
 200b234:	01d00534 	movhi	r7,16404
 200b238:	1009883a 	mov	r4,r2
 200b23c:	180b883a 	mov	r5,r3
 200b240:	20151dc0 	call	20151dc <__subdf3>
 200b244:	1009883a 	mov	r4,r2
 200b248:	180b883a 	mov	r5,r3
 200b24c:	2005883a 	mov	r2,r4
 200b250:	2807883a 	mov	r3,r5
 200b254:	e0bff215 	stw	r2,-56(fp)
 200b258:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 200b25c:	e0bff217 	ldw	r2,-56(fp)
 200b260:	e0fff317 	ldw	r3,-52(fp)
 200b264:	e13ff617 	ldw	r4,-40(fp)
 200b268:	e17ff717 	ldw	r5,-36(fp)
 200b26c:	200d883a 	mov	r6,r4
 200b270:	280f883a 	mov	r7,r5
 200b274:	1009883a 	mov	r4,r2
 200b278:	180b883a 	mov	r5,r3
 200b27c:	20068f00 	call	20068f0 <__gedf2>
 200b280:	0082eb16 	blt	zero,r2,200be30 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 200b284:	e23ff217 	ldw	r8,-56(fp)
 200b288:	e27ff317 	ldw	r9,-52(fp)
 200b28c:	e0bff617 	ldw	r2,-40(fp)
 200b290:	e0fff717 	ldw	r3,-36(fp)
 200b294:	1021883a 	mov	r16,r2
 200b298:	1c60003c 	xorhi	r17,r3,32768
 200b29c:	800d883a 	mov	r6,r16
 200b2a0:	880f883a 	mov	r7,r17
 200b2a4:	4009883a 	mov	r4,r8
 200b2a8:	480b883a 	mov	r5,r9
 200b2ac:	20069cc0 	call	20069cc <__ledf2>
 200b2b0:	1002da16 	blt	r2,zero,200be1c <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 200b2b4:	0000fc06 	br	200b6a8 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 200b2b8:	e0bfd917 	ldw	r2,-156(fp)
 200b2bc:	10007a26 	beq	r2,zero,200b4a8 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 200b2c0:	e0bfd417 	ldw	r2,-176(fp)
 200b2c4:	10ffffc4 	addi	r3,r2,-1
 200b2c8:	008080b4 	movhi	r2,514
 200b2cc:	10870904 	addi	r2,r2,7204
 200b2d0:	180690fa 	slli	r3,r3,3
 200b2d4:	10c9883a 	add	r4,r2,r3
 200b2d8:	20800017 	ldw	r2,0(r4)
 200b2dc:	20c00117 	ldw	r3,4(r4)
 200b2e0:	100d883a 	mov	r6,r2
 200b2e4:	180f883a 	mov	r7,r3
 200b2e8:	0009883a 	mov	r4,zero
 200b2ec:	014ff834 	movhi	r5,16352
 200b2f0:	2005f800 	call	2005f80 <__divdf3>
 200b2f4:	1009883a 	mov	r4,r2
 200b2f8:	180b883a 	mov	r5,r3
 200b2fc:	2011883a 	mov	r8,r4
 200b300:	2813883a 	mov	r9,r5
 200b304:	e0bff617 	ldw	r2,-40(fp)
 200b308:	e0fff717 	ldw	r3,-36(fp)
 200b30c:	100d883a 	mov	r6,r2
 200b310:	180f883a 	mov	r7,r3
 200b314:	4009883a 	mov	r4,r8
 200b318:	480b883a 	mov	r5,r9
 200b31c:	20151dc0 	call	20151dc <__subdf3>
 200b320:	1009883a 	mov	r4,r2
 200b324:	180b883a 	mov	r5,r3
 200b328:	2005883a 	mov	r2,r4
 200b32c:	2807883a 	mov	r3,r5
 200b330:	e0bff615 	stw	r2,-40(fp)
 200b334:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 200b338:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 200b33c:	e0bff217 	ldw	r2,-56(fp)
 200b340:	e0fff317 	ldw	r3,-52(fp)
 200b344:	1009883a 	mov	r4,r2
 200b348:	180b883a 	mov	r5,r3
 200b34c:	2015ad80 	call	2015ad8 <__fixdfsi>
 200b350:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200b354:	e43ff217 	ldw	r16,-56(fp)
 200b358:	e47ff317 	ldw	r17,-52(fp)
 200b35c:	e13fed17 	ldw	r4,-76(fp)
 200b360:	2015b580 	call	2015b58 <__floatsidf>
 200b364:	1009883a 	mov	r4,r2
 200b368:	180b883a 	mov	r5,r3
 200b36c:	200d883a 	mov	r6,r4
 200b370:	280f883a 	mov	r7,r5
 200b374:	8009883a 	mov	r4,r16
 200b378:	880b883a 	mov	r5,r17
 200b37c:	20151dc0 	call	20151dc <__subdf3>
 200b380:	1009883a 	mov	r4,r2
 200b384:	180b883a 	mov	r5,r3
 200b388:	2005883a 	mov	r2,r4
 200b38c:	2807883a 	mov	r3,r5
 200b390:	e0bff215 	stw	r2,-56(fp)
 200b394:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200b398:	e0bfe717 	ldw	r2,-100(fp)
 200b39c:	10c00044 	addi	r3,r2,1
 200b3a0:	e0ffe715 	stw	r3,-100(fp)
 200b3a4:	e0ffed17 	ldw	r3,-76(fp)
 200b3a8:	18c00c04 	addi	r3,r3,48
 200b3ac:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 200b3b0:	e0bff217 	ldw	r2,-56(fp)
 200b3b4:	e0fff317 	ldw	r3,-52(fp)
 200b3b8:	e13ff617 	ldw	r4,-40(fp)
 200b3bc:	e17ff717 	ldw	r5,-36(fp)
 200b3c0:	200d883a 	mov	r6,r4
 200b3c4:	280f883a 	mov	r7,r5
 200b3c8:	1009883a 	mov	r4,r2
 200b3cc:	180b883a 	mov	r5,r3
 200b3d0:	20069cc0 	call	20069cc <__ledf2>
 200b3d4:	1003c416 	blt	r2,zero,200c2e8 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 200b3d8:	e0bff217 	ldw	r2,-56(fp)
 200b3dc:	e0fff317 	ldw	r3,-52(fp)
 200b3e0:	100d883a 	mov	r6,r2
 200b3e4:	180f883a 	mov	r7,r3
 200b3e8:	0009883a 	mov	r4,zero
 200b3ec:	014ffc34 	movhi	r5,16368
 200b3f0:	20151dc0 	call	20151dc <__subdf3>
 200b3f4:	1009883a 	mov	r4,r2
 200b3f8:	180b883a 	mov	r5,r3
 200b3fc:	2011883a 	mov	r8,r4
 200b400:	2813883a 	mov	r9,r5
 200b404:	e0bff617 	ldw	r2,-40(fp)
 200b408:	e0fff717 	ldw	r3,-36(fp)
 200b40c:	100d883a 	mov	r6,r2
 200b410:	180f883a 	mov	r7,r3
 200b414:	4009883a 	mov	r4,r8
 200b418:	480b883a 	mov	r5,r9
 200b41c:	20069cc0 	call	20069cc <__ledf2>
 200b420:	10012916 	blt	r2,zero,200b8c8 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 200b424:	e0bfd217 	ldw	r2,-184(fp)
 200b428:	10800044 	addi	r2,r2,1
 200b42c:	e0bfd215 	stw	r2,-184(fp)
 200b430:	e0ffd217 	ldw	r3,-184(fp)
 200b434:	e0bfd417 	ldw	r2,-176(fp)
 200b438:	18809a0e 	bge	r3,r2,200b6a4 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 200b43c:	e0bff617 	ldw	r2,-40(fp)
 200b440:	e0fff717 	ldw	r3,-36(fp)
 200b444:	000d883a 	mov	r6,zero
 200b448:	01d00934 	movhi	r7,16420
 200b44c:	1009883a 	mov	r4,r2
 200b450:	180b883a 	mov	r5,r3
 200b454:	2006ac00 	call	2006ac0 <__muldf3>
 200b458:	1009883a 	mov	r4,r2
 200b45c:	180b883a 	mov	r5,r3
 200b460:	2005883a 	mov	r2,r4
 200b464:	2807883a 	mov	r3,r5
 200b468:	e0bff615 	stw	r2,-40(fp)
 200b46c:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 200b470:	e0bff217 	ldw	r2,-56(fp)
 200b474:	e0fff317 	ldw	r3,-52(fp)
 200b478:	000d883a 	mov	r6,zero
 200b47c:	01d00934 	movhi	r7,16420
 200b480:	1009883a 	mov	r4,r2
 200b484:	180b883a 	mov	r5,r3
 200b488:	2006ac00 	call	2006ac0 <__muldf3>
 200b48c:	1009883a 	mov	r4,r2
 200b490:	180b883a 	mov	r5,r3
 200b494:	2005883a 	mov	r2,r4
 200b498:	2807883a 	mov	r3,r5
 200b49c:	e0bff215 	stw	r2,-56(fp)
 200b4a0:	e0fff315 	stw	r3,-52(fp)
	    }
 200b4a4:	003fa506 	br	200b33c <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 200b4a8:	e0bff617 	ldw	r2,-40(fp)
 200b4ac:	e0fff717 	ldw	r3,-36(fp)
 200b4b0:	e13fd417 	ldw	r4,-176(fp)
 200b4b4:	217fffc4 	addi	r5,r4,-1
 200b4b8:	010080b4 	movhi	r4,514
 200b4bc:	21070904 	addi	r4,r4,7204
 200b4c0:	280a90fa 	slli	r5,r5,3
 200b4c4:	214d883a 	add	r6,r4,r5
 200b4c8:	31000017 	ldw	r4,0(r6)
 200b4cc:	31400117 	ldw	r5,4(r6)
 200b4d0:	200d883a 	mov	r6,r4
 200b4d4:	280f883a 	mov	r7,r5
 200b4d8:	1009883a 	mov	r4,r2
 200b4dc:	180b883a 	mov	r5,r3
 200b4e0:	2006ac00 	call	2006ac0 <__muldf3>
 200b4e4:	1009883a 	mov	r4,r2
 200b4e8:	180b883a 	mov	r5,r3
 200b4ec:	2005883a 	mov	r2,r4
 200b4f0:	2807883a 	mov	r3,r5
 200b4f4:	e0bff615 	stw	r2,-40(fp)
 200b4f8:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 200b4fc:	00800044 	movi	r2,1
 200b500:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 200b504:	e0bff217 	ldw	r2,-56(fp)
 200b508:	e0fff317 	ldw	r3,-52(fp)
 200b50c:	1009883a 	mov	r4,r2
 200b510:	180b883a 	mov	r5,r3
 200b514:	2015ad80 	call	2015ad8 <__fixdfsi>
 200b518:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200b51c:	e43ff217 	ldw	r16,-56(fp)
 200b520:	e47ff317 	ldw	r17,-52(fp)
 200b524:	e13fed17 	ldw	r4,-76(fp)
 200b528:	2015b580 	call	2015b58 <__floatsidf>
 200b52c:	1009883a 	mov	r4,r2
 200b530:	180b883a 	mov	r5,r3
 200b534:	200d883a 	mov	r6,r4
 200b538:	280f883a 	mov	r7,r5
 200b53c:	8009883a 	mov	r4,r16
 200b540:	880b883a 	mov	r5,r17
 200b544:	20151dc0 	call	20151dc <__subdf3>
 200b548:	1009883a 	mov	r4,r2
 200b54c:	180b883a 	mov	r5,r3
 200b550:	2005883a 	mov	r2,r4
 200b554:	2807883a 	mov	r3,r5
 200b558:	e0bff215 	stw	r2,-56(fp)
 200b55c:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200b560:	e0bfe717 	ldw	r2,-100(fp)
 200b564:	10c00044 	addi	r3,r2,1
 200b568:	e0ffe715 	stw	r3,-100(fp)
 200b56c:	e0ffed17 	ldw	r3,-76(fp)
 200b570:	18c00c04 	addi	r3,r3,48
 200b574:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 200b578:	e0ffd217 	ldw	r3,-184(fp)
 200b57c:	e0bfd417 	ldw	r2,-176(fp)
 200b580:	1880351e 	bne	r3,r2,200b658 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 200b584:	e43ff217 	ldw	r16,-56(fp)
 200b588:	e47ff317 	ldw	r17,-52(fp)
 200b58c:	e0bff617 	ldw	r2,-40(fp)
 200b590:	e0fff717 	ldw	r3,-36(fp)
 200b594:	000d883a 	mov	r6,zero
 200b598:	01cff834 	movhi	r7,16352
 200b59c:	1009883a 	mov	r4,r2
 200b5a0:	180b883a 	mov	r5,r3
 200b5a4:	20149300 	call	2014930 <__adddf3>
 200b5a8:	1009883a 	mov	r4,r2
 200b5ac:	180b883a 	mov	r5,r3
 200b5b0:	2005883a 	mov	r2,r4
 200b5b4:	2807883a 	mov	r3,r5
 200b5b8:	100d883a 	mov	r6,r2
 200b5bc:	180f883a 	mov	r7,r3
 200b5c0:	8009883a 	mov	r4,r16
 200b5c4:	880b883a 	mov	r5,r17
 200b5c8:	20068f00 	call	20068f0 <__gedf2>
 200b5cc:	0080c016 	blt	zero,r2,200b8d0 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 200b5d0:	e43ff217 	ldw	r16,-56(fp)
 200b5d4:	e47ff317 	ldw	r17,-52(fp)
 200b5d8:	e0bff617 	ldw	r2,-40(fp)
 200b5dc:	e0fff717 	ldw	r3,-36(fp)
 200b5e0:	100d883a 	mov	r6,r2
 200b5e4:	180f883a 	mov	r7,r3
 200b5e8:	0009883a 	mov	r4,zero
 200b5ec:	014ff834 	movhi	r5,16352
 200b5f0:	20151dc0 	call	20151dc <__subdf3>
 200b5f4:	1009883a 	mov	r4,r2
 200b5f8:	180b883a 	mov	r5,r3
 200b5fc:	2005883a 	mov	r2,r4
 200b600:	2807883a 	mov	r3,r5
 200b604:	100d883a 	mov	r6,r2
 200b608:	180f883a 	mov	r7,r3
 200b60c:	8009883a 	mov	r4,r16
 200b610:	880b883a 	mov	r5,r17
 200b614:	20069cc0 	call	20069cc <__ledf2>
 200b618:	10000116 	blt	r2,zero,200b620 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 200b61c:	00002206 	br	200b6a8 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 200b620:	e0bfe717 	ldw	r2,-100(fp)
 200b624:	10bfffc4 	addi	r2,r2,-1
 200b628:	e0bfe715 	stw	r2,-100(fp)
 200b62c:	e0bfe717 	ldw	r2,-100(fp)
 200b630:	10800003 	ldbu	r2,0(r2)
 200b634:	10803fcc 	andi	r2,r2,255
 200b638:	1080201c 	xori	r2,r2,128
 200b63c:	10bfe004 	addi	r2,r2,-128
 200b640:	10800c20 	cmpeqi	r2,r2,48
 200b644:	103ff61e 	bne	r2,zero,200b620 <_dtoa_r+0xe4c>
		      s++;
 200b648:	e0bfe717 	ldw	r2,-100(fp)
 200b64c:	10800044 	addi	r2,r2,1
 200b650:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 200b654:	00032506 	br	200c2ec <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 200b658:	e0bfd217 	ldw	r2,-184(fp)
 200b65c:	10800044 	addi	r2,r2,1
 200b660:	e0bfd215 	stw	r2,-184(fp)
 200b664:	e0bff217 	ldw	r2,-56(fp)
 200b668:	e0fff317 	ldw	r3,-52(fp)
 200b66c:	000d883a 	mov	r6,zero
 200b670:	01d00934 	movhi	r7,16420
 200b674:	1009883a 	mov	r4,r2
 200b678:	180b883a 	mov	r5,r3
 200b67c:	2006ac00 	call	2006ac0 <__muldf3>
 200b680:	1009883a 	mov	r4,r2
 200b684:	180b883a 	mov	r5,r3
 200b688:	2005883a 	mov	r2,r4
 200b68c:	2807883a 	mov	r3,r5
 200b690:	e0bff215 	stw	r2,-56(fp)
 200b694:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 200b698:	003f9a06 	br	200b504 <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 200b69c:	0001883a 	nop
 200b6a0:	00000106 	br	200b6a8 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 200b6a4:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 200b6a8:	e0bfe917 	ldw	r2,-92(fp)
 200b6ac:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 200b6b0:	e0bff417 	ldw	r2,-48(fp)
 200b6b4:	e0fff517 	ldw	r3,-44(fp)
 200b6b8:	e0bff215 	stw	r2,-56(fp)
 200b6bc:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 200b6c0:	e0bfea17 	ldw	r2,-88(fp)
 200b6c4:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 200b6c8:	e0bfeb17 	ldw	r2,-84(fp)
 200b6cc:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 200b6d0:	e0bff117 	ldw	r2,-60(fp)
 200b6d4:	1000b816 	blt	r2,zero,200b9b8 <_dtoa_r+0x11e4>
 200b6d8:	e0bfd717 	ldw	r2,-164(fp)
 200b6dc:	108003c8 	cmpgei	r2,r2,15
 200b6e0:	1000b51e 	bne	r2,zero,200b9b8 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 200b6e4:	008080b4 	movhi	r2,514
 200b6e8:	10870904 	addi	r2,r2,7204
 200b6ec:	e0ffd717 	ldw	r3,-164(fp)
 200b6f0:	180690fa 	slli	r3,r3,3
 200b6f4:	10c5883a 	add	r2,r2,r3
 200b6f8:	10c00017 	ldw	r3,0(r2)
 200b6fc:	e0ffe515 	stw	r3,-108(fp)
 200b700:	10800117 	ldw	r2,4(r2)
 200b704:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 200b708:	e0800217 	ldw	r2,8(fp)
 200b70c:	1000190e 	bge	r2,zero,200b774 <_dtoa_r+0xfa0>
 200b710:	e0bfd417 	ldw	r2,-176(fp)
 200b714:	00801716 	blt	zero,r2,200b774 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 200b718:	e03fe315 	stw	zero,-116(fp)
 200b71c:	e0bfe317 	ldw	r2,-116(fp)
 200b720:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 200b724:	e0bfd417 	ldw	r2,-176(fp)
 200b728:	1001bd16 	blt	r2,zero,200be20 <_dtoa_r+0x164c>
 200b72c:	e43ff217 	ldw	r16,-56(fp)
 200b730:	e47ff317 	ldw	r17,-52(fp)
 200b734:	000d883a 	mov	r6,zero
 200b738:	01d00534 	movhi	r7,16404
 200b73c:	e13fe517 	ldw	r4,-108(fp)
 200b740:	e17fe617 	ldw	r5,-104(fp)
 200b744:	2006ac00 	call	2006ac0 <__muldf3>
 200b748:	1009883a 	mov	r4,r2
 200b74c:	180b883a 	mov	r5,r3
 200b750:	2005883a 	mov	r2,r4
 200b754:	2807883a 	mov	r3,r5
 200b758:	100d883a 	mov	r6,r2
 200b75c:	180f883a 	mov	r7,r3
 200b760:	8009883a 	mov	r4,r16
 200b764:	880b883a 	mov	r5,r17
 200b768:	20069cc0 	call	20069cc <__ledf2>
 200b76c:	0081ac0e 	bge	zero,r2,200be20 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 200b770:	0001b006 	br	200be34 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 200b774:	00800044 	movi	r2,1
 200b778:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 200b77c:	e0bff217 	ldw	r2,-56(fp)
 200b780:	e0fff317 	ldw	r3,-52(fp)
 200b784:	e1bfe517 	ldw	r6,-108(fp)
 200b788:	e1ffe617 	ldw	r7,-104(fp)
 200b78c:	1009883a 	mov	r4,r2
 200b790:	180b883a 	mov	r5,r3
 200b794:	2005f800 	call	2005f80 <__divdf3>
 200b798:	1009883a 	mov	r4,r2
 200b79c:	180b883a 	mov	r5,r3
 200b7a0:	2005883a 	mov	r2,r4
 200b7a4:	2807883a 	mov	r3,r5
 200b7a8:	1009883a 	mov	r4,r2
 200b7ac:	180b883a 	mov	r5,r3
 200b7b0:	2015ad80 	call	2015ad8 <__fixdfsi>
 200b7b4:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 200b7b8:	e43ff217 	ldw	r16,-56(fp)
 200b7bc:	e47ff317 	ldw	r17,-52(fp)
 200b7c0:	e13fed17 	ldw	r4,-76(fp)
 200b7c4:	2015b580 	call	2015b58 <__floatsidf>
 200b7c8:	1011883a 	mov	r8,r2
 200b7cc:	1813883a 	mov	r9,r3
 200b7d0:	e1bfe517 	ldw	r6,-108(fp)
 200b7d4:	e1ffe617 	ldw	r7,-104(fp)
 200b7d8:	4009883a 	mov	r4,r8
 200b7dc:	480b883a 	mov	r5,r9
 200b7e0:	2006ac00 	call	2006ac0 <__muldf3>
 200b7e4:	1009883a 	mov	r4,r2
 200b7e8:	180b883a 	mov	r5,r3
 200b7ec:	2005883a 	mov	r2,r4
 200b7f0:	2807883a 	mov	r3,r5
 200b7f4:	100d883a 	mov	r6,r2
 200b7f8:	180f883a 	mov	r7,r3
 200b7fc:	8009883a 	mov	r4,r16
 200b800:	880b883a 	mov	r5,r17
 200b804:	20151dc0 	call	20151dc <__subdf3>
 200b808:	1009883a 	mov	r4,r2
 200b80c:	180b883a 	mov	r5,r3
 200b810:	2005883a 	mov	r2,r4
 200b814:	2807883a 	mov	r3,r5
 200b818:	e0bff215 	stw	r2,-56(fp)
 200b81c:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 200b820:	e0bfe717 	ldw	r2,-100(fp)
 200b824:	10c00044 	addi	r3,r2,1
 200b828:	e0ffe715 	stw	r3,-100(fp)
 200b82c:	e0ffed17 	ldw	r3,-76(fp)
 200b830:	18c00c04 	addi	r3,r3,48
 200b834:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 200b838:	e0ffd217 	ldw	r3,-184(fp)
 200b83c:	e0bfd417 	ldw	r2,-176(fp)
 200b840:	1880401e 	bne	r3,r2,200b944 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 200b844:	e0bff217 	ldw	r2,-56(fp)
 200b848:	e0fff317 	ldw	r3,-52(fp)
 200b84c:	100d883a 	mov	r6,r2
 200b850:	180f883a 	mov	r7,r3
 200b854:	1009883a 	mov	r4,r2
 200b858:	180b883a 	mov	r5,r3
 200b85c:	20149300 	call	2014930 <__adddf3>
 200b860:	1009883a 	mov	r4,r2
 200b864:	180b883a 	mov	r5,r3
 200b868:	2005883a 	mov	r2,r4
 200b86c:	2807883a 	mov	r3,r5
 200b870:	e0bff215 	stw	r2,-56(fp)
 200b874:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 200b878:	e0bff217 	ldw	r2,-56(fp)
 200b87c:	e0fff317 	ldw	r3,-52(fp)
 200b880:	e1bfe517 	ldw	r6,-108(fp)
 200b884:	e1ffe617 	ldw	r7,-104(fp)
 200b888:	1009883a 	mov	r4,r2
 200b88c:	180b883a 	mov	r5,r3
 200b890:	20068f00 	call	20068f0 <__gedf2>
 200b894:	00801a16 	blt	zero,r2,200b900 <_dtoa_r+0x112c>
 200b898:	e0bff217 	ldw	r2,-56(fp)
 200b89c:	e0fff317 	ldw	r3,-52(fp)
 200b8a0:	e1bfe517 	ldw	r6,-108(fp)
 200b8a4:	e1ffe617 	ldw	r7,-104(fp)
 200b8a8:	1009883a 	mov	r4,r2
 200b8ac:	180b883a 	mov	r5,r3
 200b8b0:	20068680 	call	2006868 <__eqdf2>
 200b8b4:	10003c1e 	bne	r2,zero,200b9a8 <_dtoa_r+0x11d4>
 200b8b8:	e0bfed17 	ldw	r2,-76(fp)
 200b8bc:	1080004c 	andi	r2,r2,1
 200b8c0:	10003926 	beq	r2,zero,200b9a8 <_dtoa_r+0x11d4>
 200b8c4:	00000e06 	br	200b900 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 200b8c8:	0001883a 	nop
 200b8cc:	00000c06 	br	200b900 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 200b8d0:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 200b8d4:	00000a06 	br	200b900 <_dtoa_r+0x112c>
		    if (s == s0)
 200b8d8:	e0ffe717 	ldw	r3,-100(fp)
 200b8dc:	e0bfe917 	ldw	r2,-92(fp)
 200b8e0:	1880071e 	bne	r3,r2,200b900 <_dtoa_r+0x112c>
		      {
			k++;
 200b8e4:	e0bfd717 	ldw	r2,-164(fp)
 200b8e8:	10800044 	addi	r2,r2,1
 200b8ec:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 200b8f0:	e0bfe717 	ldw	r2,-100(fp)
 200b8f4:	00c00c04 	movi	r3,48
 200b8f8:	10c00005 	stb	r3,0(r2)
			break;
 200b8fc:	00000a06 	br	200b928 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 200b900:	e0bfe717 	ldw	r2,-100(fp)
 200b904:	10bfffc4 	addi	r2,r2,-1
 200b908:	e0bfe715 	stw	r2,-100(fp)
 200b90c:	e0bfe717 	ldw	r2,-100(fp)
 200b910:	10800003 	ldbu	r2,0(r2)
 200b914:	10803fcc 	andi	r2,r2,255
 200b918:	1080201c 	xori	r2,r2,128
 200b91c:	10bfe004 	addi	r2,r2,-128
 200b920:	10800e60 	cmpeqi	r2,r2,57
 200b924:	103fec1e 	bne	r2,zero,200b8d8 <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 200b928:	e0bfe717 	ldw	r2,-100(fp)
 200b92c:	10c00044 	addi	r3,r2,1
 200b930:	e0ffe715 	stw	r3,-100(fp)
 200b934:	10c00003 	ldbu	r3,0(r2)
 200b938:	18c00044 	addi	r3,r3,1
 200b93c:	10c00005 	stb	r3,0(r2)
		}
	      break;
 200b940:	00001906 	br	200b9a8 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 200b944:	e0bff217 	ldw	r2,-56(fp)
 200b948:	e0fff317 	ldw	r3,-52(fp)
 200b94c:	000d883a 	mov	r6,zero
 200b950:	01d00934 	movhi	r7,16420
 200b954:	1009883a 	mov	r4,r2
 200b958:	180b883a 	mov	r5,r3
 200b95c:	2006ac00 	call	2006ac0 <__muldf3>
 200b960:	1009883a 	mov	r4,r2
 200b964:	180b883a 	mov	r5,r3
 200b968:	2005883a 	mov	r2,r4
 200b96c:	2807883a 	mov	r3,r5
 200b970:	e0bff215 	stw	r2,-56(fp)
 200b974:	e0fff315 	stw	r3,-52(fp)
 200b978:	e0bff217 	ldw	r2,-56(fp)
 200b97c:	e0fff317 	ldw	r3,-52(fp)
 200b980:	000d883a 	mov	r6,zero
 200b984:	000f883a 	mov	r7,zero
 200b988:	1009883a 	mov	r4,r2
 200b98c:	180b883a 	mov	r5,r3
 200b990:	20068680 	call	2006868 <__eqdf2>
 200b994:	10000626 	beq	r2,zero,200b9b0 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 200b998:	e0bfd217 	ldw	r2,-184(fp)
 200b99c:	10800044 	addi	r2,r2,1
 200b9a0:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 200b9a4:	003f7506 	br	200b77c <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 200b9a8:	0001883a 	nop
 200b9ac:	00024f06 	br	200c2ec <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 200b9b0:	0001883a 	nop
	}
      goto ret1;
 200b9b4:	00024d06 	br	200c2ec <_dtoa_r+0x1b18>
    }

  m2 = b2;
 200b9b8:	e0bfcf17 	ldw	r2,-196(fp)
 200b9bc:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 200b9c0:	e0bfd017 	ldw	r2,-192(fp)
 200b9c4:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 200b9c8:	e03fe215 	stw	zero,-120(fp)
 200b9cc:	e0bfe217 	ldw	r2,-120(fp)
 200b9d0:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 200b9d4:	e0bfd917 	ldw	r2,-156(fp)
 200b9d8:	10003a26 	beq	r2,zero,200bac4 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 200b9dc:	e0bffb17 	ldw	r2,-20(fp)
 200b9e0:	10800088 	cmpgei	r2,r2,2
 200b9e4:	10000a1e 	bne	r2,zero,200ba10 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 200b9e8:	e0bfe017 	ldw	r2,-128(fp)
 200b9ec:	10000326 	beq	r2,zero,200b9fc <_dtoa_r+0x1228>
 200b9f0:	e0bff117 	ldw	r2,-60(fp)
 200b9f4:	10810cc4 	addi	r2,r2,1075
 200b9f8:	00000306 	br	200ba08 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 200b9fc:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 200ba00:	00c00d84 	movi	r3,54
 200ba04:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 200ba08:	e0bfd215 	stw	r2,-184(fp)
 200ba0c:	00002106 	br	200ba94 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 200ba10:	e0bfd417 	ldw	r2,-176(fp)
 200ba14:	10bfffc4 	addi	r2,r2,-1
 200ba18:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 200ba1c:	e0ffdb17 	ldw	r3,-148(fp)
 200ba20:	e0bfd617 	ldw	r2,-168(fp)
 200ba24:	18800516 	blt	r3,r2,200ba3c <_dtoa_r+0x1268>
	    m5 -= j;
 200ba28:	e0ffdb17 	ldw	r3,-148(fp)
 200ba2c:	e0bfd617 	ldw	r2,-168(fp)
 200ba30:	1885c83a 	sub	r2,r3,r2
 200ba34:	e0bfdb15 	stw	r2,-148(fp)
 200ba38:	00000d06 	br	200ba70 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 200ba3c:	e0ffd617 	ldw	r3,-168(fp)
 200ba40:	e0bfdb17 	ldw	r2,-148(fp)
 200ba44:	1885c83a 	sub	r2,r3,r2
 200ba48:	e0bfd615 	stw	r2,-168(fp)
 200ba4c:	e0bfd617 	ldw	r2,-168(fp)
 200ba50:	e0ffdd17 	ldw	r3,-140(fp)
 200ba54:	1885883a 	add	r2,r3,r2
 200ba58:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 200ba5c:	e0ffd017 	ldw	r3,-192(fp)
 200ba60:	e0bfd617 	ldw	r2,-168(fp)
 200ba64:	1885883a 	add	r2,r3,r2
 200ba68:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 200ba6c:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 200ba70:	e0bfd417 	ldw	r2,-176(fp)
 200ba74:	e0bfd215 	stw	r2,-184(fp)
 200ba78:	e0bfd217 	ldw	r2,-184(fp)
 200ba7c:	1000050e 	bge	r2,zero,200ba94 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 200ba80:	e0ffda17 	ldw	r3,-152(fp)
 200ba84:	e0bfd217 	ldw	r2,-184(fp)
 200ba88:	1885c83a 	sub	r2,r3,r2
 200ba8c:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 200ba90:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 200ba94:	e0ffcf17 	ldw	r3,-196(fp)
 200ba98:	e0bfd217 	ldw	r2,-184(fp)
 200ba9c:	1885883a 	add	r2,r3,r2
 200baa0:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 200baa4:	e0ffdc17 	ldw	r3,-144(fp)
 200baa8:	e0bfd217 	ldw	r2,-184(fp)
 200baac:	1885883a 	add	r2,r3,r2
 200bab0:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 200bab4:	01400044 	movi	r5,1
 200bab8:	e13ff817 	ldw	r4,-32(fp)
 200babc:	200f8b80 	call	200f8b8 <__i2b>
 200bac0:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 200bac4:	e0bfda17 	ldw	r2,-152(fp)
 200bac8:	0080130e 	bge	zero,r2,200bb18 <_dtoa_r+0x1344>
 200bacc:	e0bfdc17 	ldw	r2,-144(fp)
 200bad0:	0080110e 	bge	zero,r2,200bb18 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 200bad4:	e0ffda17 	ldw	r3,-152(fp)
 200bad8:	e0bfdc17 	ldw	r2,-144(fp)
 200badc:	1880010e 	bge	r3,r2,200bae4 <_dtoa_r+0x1310>
 200bae0:	1805883a 	mov	r2,r3
 200bae4:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 200bae8:	e0ffcf17 	ldw	r3,-196(fp)
 200baec:	e0bfd217 	ldw	r2,-184(fp)
 200baf0:	1885c83a 	sub	r2,r3,r2
 200baf4:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 200baf8:	e0ffda17 	ldw	r3,-152(fp)
 200bafc:	e0bfd217 	ldw	r2,-184(fp)
 200bb00:	1885c83a 	sub	r2,r3,r2
 200bb04:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 200bb08:	e0ffdc17 	ldw	r3,-144(fp)
 200bb0c:	e0bfd217 	ldw	r2,-184(fp)
 200bb10:	1885c83a 	sub	r2,r3,r2
 200bb14:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 200bb18:	e0bfd017 	ldw	r2,-192(fp)
 200bb1c:	0080240e 	bge	zero,r2,200bbb0 <_dtoa_r+0x13dc>
    {
      if (leftright)
 200bb20:	e0bfd917 	ldw	r2,-156(fp)
 200bb24:	10001d26 	beq	r2,zero,200bb9c <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 200bb28:	e0bfdb17 	ldw	r2,-148(fp)
 200bb2c:	00800f0e 	bge	zero,r2,200bb6c <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 200bb30:	e1bfdb17 	ldw	r6,-148(fp)
 200bb34:	e17fe317 	ldw	r5,-116(fp)
 200bb38:	e13ff817 	ldw	r4,-32(fp)
 200bb3c:	200fce00 	call	200fce0 <__pow5mult>
 200bb40:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 200bb44:	e1bfe117 	ldw	r6,-124(fp)
 200bb48:	e17fe317 	ldw	r5,-116(fp)
 200bb4c:	e13ff817 	ldw	r4,-32(fp)
 200bb50:	200f9100 	call	200f910 <__multiply>
 200bb54:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 200bb58:	e17fe117 	ldw	r5,-124(fp)
 200bb5c:	e13ff817 	ldw	r4,-32(fp)
 200bb60:	200f3a00 	call	200f3a0 <_Bfree>
	      b = b1;
 200bb64:	e0bfee17 	ldw	r2,-72(fp)
 200bb68:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 200bb6c:	e0ffd017 	ldw	r3,-192(fp)
 200bb70:	e0bfdb17 	ldw	r2,-148(fp)
 200bb74:	1885c83a 	sub	r2,r3,r2
 200bb78:	e0bfd615 	stw	r2,-168(fp)
 200bb7c:	e0bfd617 	ldw	r2,-168(fp)
 200bb80:	10000b26 	beq	r2,zero,200bbb0 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 200bb84:	e1bfd617 	ldw	r6,-168(fp)
 200bb88:	e17fe117 	ldw	r5,-124(fp)
 200bb8c:	e13ff817 	ldw	r4,-32(fp)
 200bb90:	200fce00 	call	200fce0 <__pow5mult>
 200bb94:	e0bfe115 	stw	r2,-124(fp)
 200bb98:	00000506 	br	200bbb0 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 200bb9c:	e1bfd017 	ldw	r6,-192(fp)
 200bba0:	e17fe117 	ldw	r5,-124(fp)
 200bba4:	e13ff817 	ldw	r4,-32(fp)
 200bba8:	200fce00 	call	200fce0 <__pow5mult>
 200bbac:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 200bbb0:	01400044 	movi	r5,1
 200bbb4:	e13ff817 	ldw	r4,-32(fp)
 200bbb8:	200f8b80 	call	200f8b8 <__i2b>
 200bbbc:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 200bbc0:	e0bfdd17 	ldw	r2,-140(fp)
 200bbc4:	0080050e 	bge	zero,r2,200bbdc <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 200bbc8:	e1bfdd17 	ldw	r6,-140(fp)
 200bbcc:	e17fe417 	ldw	r5,-112(fp)
 200bbd0:	e13ff817 	ldw	r4,-32(fp)
 200bbd4:	200fce00 	call	200fce0 <__pow5mult>
 200bbd8:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 200bbdc:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 200bbe0:	e0bffb17 	ldw	r2,-20(fp)
 200bbe4:	10800088 	cmpgei	r2,r2,2
 200bbe8:	1000121e 	bne	r2,zero,200bc34 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 200bbec:	e0bff217 	ldw	r2,-56(fp)
 200bbf0:	1000101e 	bne	r2,zero,200bc34 <_dtoa_r+0x1460>
 200bbf4:	e0fff317 	ldw	r3,-52(fp)
 200bbf8:	00800434 	movhi	r2,16
 200bbfc:	10bfffc4 	addi	r2,r2,-1
 200bc00:	1884703a 	and	r2,r3,r2
 200bc04:	10000b1e 	bne	r2,zero,200bc34 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 200bc08:	e0bff317 	ldw	r2,-52(fp)
 200bc0c:	109ffc2c 	andhi	r2,r2,32752
 200bc10:	10000826 	beq	r2,zero,200bc34 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 200bc14:	e0bfcf17 	ldw	r2,-196(fp)
 200bc18:	10800044 	addi	r2,r2,1
 200bc1c:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 200bc20:	e0bfdc17 	ldw	r2,-144(fp)
 200bc24:	10800044 	addi	r2,r2,1
 200bc28:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 200bc2c:	00800044 	movi	r2,1
 200bc30:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 200bc34:	e0bfdd17 	ldw	r2,-140(fp)
 200bc38:	10000f26 	beq	r2,zero,200bc78 <_dtoa_r+0x14a4>
 200bc3c:	e0bfe417 	ldw	r2,-112(fp)
 200bc40:	10800417 	ldw	r2,16(r2)
 200bc44:	10bfffc4 	addi	r2,r2,-1
 200bc48:	e0ffe417 	ldw	r3,-112(fp)
 200bc4c:	10800144 	addi	r2,r2,5
 200bc50:	1085883a 	add	r2,r2,r2
 200bc54:	1085883a 	add	r2,r2,r2
 200bc58:	1885883a 	add	r2,r3,r2
 200bc5c:	10800017 	ldw	r2,0(r2)
 200bc60:	1009883a 	mov	r4,r2
 200bc64:	200f73c0 	call	200f73c <__hi0bits>
 200bc68:	1007883a 	mov	r3,r2
 200bc6c:	00800804 	movi	r2,32
 200bc70:	10c5c83a 	sub	r2,r2,r3
 200bc74:	00000106 	br	200bc7c <_dtoa_r+0x14a8>
 200bc78:	00800044 	movi	r2,1
 200bc7c:	e0ffdc17 	ldw	r3,-144(fp)
 200bc80:	10c5883a 	add	r2,r2,r3
 200bc84:	108007cc 	andi	r2,r2,31
 200bc88:	e0bfd215 	stw	r2,-184(fp)
 200bc8c:	e0bfd217 	ldw	r2,-184(fp)
 200bc90:	10000426 	beq	r2,zero,200bca4 <_dtoa_r+0x14d0>
    i = 32 - i;
 200bc94:	00c00804 	movi	r3,32
 200bc98:	e0bfd217 	ldw	r2,-184(fp)
 200bc9c:	1885c83a 	sub	r2,r3,r2
 200bca0:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 200bca4:	e0bfd217 	ldw	r2,-184(fp)
 200bca8:	10800150 	cmplti	r2,r2,5
 200bcac:	1000101e 	bne	r2,zero,200bcf0 <_dtoa_r+0x151c>
    {
      i -= 4;
 200bcb0:	e0bfd217 	ldw	r2,-184(fp)
 200bcb4:	10bfff04 	addi	r2,r2,-4
 200bcb8:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200bcbc:	e0ffcf17 	ldw	r3,-196(fp)
 200bcc0:	e0bfd217 	ldw	r2,-184(fp)
 200bcc4:	1885883a 	add	r2,r3,r2
 200bcc8:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 200bccc:	e0ffda17 	ldw	r3,-152(fp)
 200bcd0:	e0bfd217 	ldw	r2,-184(fp)
 200bcd4:	1885883a 	add	r2,r3,r2
 200bcd8:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 200bcdc:	e0ffdc17 	ldw	r3,-144(fp)
 200bce0:	e0bfd217 	ldw	r2,-184(fp)
 200bce4:	1885883a 	add	r2,r3,r2
 200bce8:	e0bfdc15 	stw	r2,-144(fp)
 200bcec:	00001206 	br	200bd38 <_dtoa_r+0x1564>
    }
  else if (i < 4)
 200bcf0:	e0bfd217 	ldw	r2,-184(fp)
 200bcf4:	10800108 	cmpgei	r2,r2,4
 200bcf8:	10000f1e 	bne	r2,zero,200bd38 <_dtoa_r+0x1564>
    {
      i += 28;
 200bcfc:	e0bfd217 	ldw	r2,-184(fp)
 200bd00:	10800704 	addi	r2,r2,28
 200bd04:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200bd08:	e0ffcf17 	ldw	r3,-196(fp)
 200bd0c:	e0bfd217 	ldw	r2,-184(fp)
 200bd10:	1885883a 	add	r2,r3,r2
 200bd14:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 200bd18:	e0ffda17 	ldw	r3,-152(fp)
 200bd1c:	e0bfd217 	ldw	r2,-184(fp)
 200bd20:	1885883a 	add	r2,r3,r2
 200bd24:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 200bd28:	e0ffdc17 	ldw	r3,-144(fp)
 200bd2c:	e0bfd217 	ldw	r2,-184(fp)
 200bd30:	1885883a 	add	r2,r3,r2
 200bd34:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 200bd38:	e0bfcf17 	ldw	r2,-196(fp)
 200bd3c:	0080050e 	bge	zero,r2,200bd54 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 200bd40:	e1bfcf17 	ldw	r6,-196(fp)
 200bd44:	e17fe117 	ldw	r5,-124(fp)
 200bd48:	e13ff817 	ldw	r4,-32(fp)
 200bd4c:	200fe580 	call	200fe58 <__lshift>
 200bd50:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 200bd54:	e0bfdc17 	ldw	r2,-144(fp)
 200bd58:	0080050e 	bge	zero,r2,200bd70 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 200bd5c:	e1bfdc17 	ldw	r6,-144(fp)
 200bd60:	e17fe417 	ldw	r5,-112(fp)
 200bd64:	e13ff817 	ldw	r4,-32(fp)
 200bd68:	200fe580 	call	200fe58 <__lshift>
 200bd6c:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 200bd70:	e0bfd817 	ldw	r2,-160(fp)
 200bd74:	10001726 	beq	r2,zero,200bdd4 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 200bd78:	e17fe417 	ldw	r5,-112(fp)
 200bd7c:	e13fe117 	ldw	r4,-124(fp)
 200bd80:	20100500 	call	2010050 <__mcmp>
 200bd84:	1000130e 	bge	r2,zero,200bdd4 <_dtoa_r+0x1600>
	{
	  k--;
 200bd88:	e0bfd717 	ldw	r2,-164(fp)
 200bd8c:	10bfffc4 	addi	r2,r2,-1
 200bd90:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 200bd94:	000f883a 	mov	r7,zero
 200bd98:	01800284 	movi	r6,10
 200bd9c:	e17fe117 	ldw	r5,-124(fp)
 200bda0:	e13ff817 	ldw	r4,-32(fp)
 200bda4:	200f41c0 	call	200f41c <__multadd>
 200bda8:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 200bdac:	e0bfd917 	ldw	r2,-156(fp)
 200bdb0:	10000626 	beq	r2,zero,200bdcc <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 200bdb4:	000f883a 	mov	r7,zero
 200bdb8:	01800284 	movi	r6,10
 200bdbc:	e17fe317 	ldw	r5,-116(fp)
 200bdc0:	e13ff817 	ldw	r4,-32(fp)
 200bdc4:	200f41c0 	call	200f41c <__multadd>
 200bdc8:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 200bdcc:	e0bfd517 	ldw	r2,-172(fp)
 200bdd0:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 200bdd4:	e0bfd417 	ldw	r2,-176(fp)
 200bdd8:	00801f16 	blt	zero,r2,200be58 <_dtoa_r+0x1684>
 200bddc:	e0bffb17 	ldw	r2,-20(fp)
 200bde0:	108000d0 	cmplti	r2,r2,3
 200bde4:	10001c1e 	bne	r2,zero,200be58 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 200bde8:	e0bfd417 	ldw	r2,-176(fp)
 200bdec:	10000c16 	blt	r2,zero,200be20 <_dtoa_r+0x164c>
 200bdf0:	000f883a 	mov	r7,zero
 200bdf4:	01800144 	movi	r6,5
 200bdf8:	e17fe417 	ldw	r5,-112(fp)
 200bdfc:	e13ff817 	ldw	r4,-32(fp)
 200be00:	200f41c0 	call	200f41c <__multadd>
 200be04:	e0bfe415 	stw	r2,-112(fp)
 200be08:	e17fe417 	ldw	r5,-112(fp)
 200be0c:	e13fe117 	ldw	r4,-124(fp)
 200be10:	20100500 	call	2010050 <__mcmp>
 200be14:	00800716 	blt	zero,r2,200be34 <_dtoa_r+0x1660>
 200be18:	00000106 	br	200be20 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 200be1c:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 200be20:	e0800217 	ldw	r2,8(fp)
 200be24:	0084303a 	nor	r2,zero,r2
 200be28:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 200be2c:	00011d06 	br	200c2a4 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 200be30:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 200be34:	e0bfe717 	ldw	r2,-100(fp)
 200be38:	10c00044 	addi	r3,r2,1
 200be3c:	e0ffe715 	stw	r3,-100(fp)
 200be40:	00c00c44 	movi	r3,49
 200be44:	10c00005 	stb	r3,0(r2)
      k++;
 200be48:	e0bfd717 	ldw	r2,-164(fp)
 200be4c:	10800044 	addi	r2,r2,1
 200be50:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 200be54:	00011306 	br	200c2a4 <_dtoa_r+0x1ad0>
    }
  if (leftright)
 200be58:	e0bfd917 	ldw	r2,-156(fp)
 200be5c:	1000ba26 	beq	r2,zero,200c148 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 200be60:	e0bfda17 	ldw	r2,-152(fp)
 200be64:	0080050e 	bge	zero,r2,200be7c <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 200be68:	e1bfda17 	ldw	r6,-152(fp)
 200be6c:	e17fe317 	ldw	r5,-116(fp)
 200be70:	e13ff817 	ldw	r4,-32(fp)
 200be74:	200fe580 	call	200fe58 <__lshift>
 200be78:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 200be7c:	e0bfe317 	ldw	r2,-116(fp)
 200be80:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 200be84:	e0bfde17 	ldw	r2,-136(fp)
 200be88:	10001826 	beq	r2,zero,200beec <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 200be8c:	e0bfe317 	ldw	r2,-116(fp)
 200be90:	10800117 	ldw	r2,4(r2)
 200be94:	100b883a 	mov	r5,r2
 200be98:	e13ff817 	ldw	r4,-32(fp)
 200be9c:	200f2700 	call	200f270 <_Balloc>
 200bea0:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 200bea4:	e0bfe317 	ldw	r2,-116(fp)
 200bea8:	10c00304 	addi	r3,r2,12
 200beac:	e0bfe217 	ldw	r2,-120(fp)
 200beb0:	11000304 	addi	r4,r2,12
 200beb4:	e0bfe217 	ldw	r2,-120(fp)
 200beb8:	10800417 	ldw	r2,16(r2)
 200bebc:	10800084 	addi	r2,r2,2
 200bec0:	1085883a 	add	r2,r2,r2
 200bec4:	1085883a 	add	r2,r2,r2
 200bec8:	100d883a 	mov	r6,r2
 200becc:	200b883a 	mov	r5,r4
 200bed0:	1809883a 	mov	r4,r3
 200bed4:	20076c80 	call	20076c8 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 200bed8:	01800044 	movi	r6,1
 200bedc:	e17fe317 	ldw	r5,-116(fp)
 200bee0:	e13ff817 	ldw	r4,-32(fp)
 200bee4:	200fe580 	call	200fe58 <__lshift>
 200bee8:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 200beec:	00800044 	movi	r2,1
 200bef0:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 200bef4:	e17fe417 	ldw	r5,-112(fp)
 200bef8:	e13fe117 	ldw	r4,-124(fp)
 200befc:	200a4200 	call	200a420 <quorem>
 200bf00:	10800c04 	addi	r2,r2,48
 200bf04:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 200bf08:	e17fe217 	ldw	r5,-120(fp)
 200bf0c:	e13fe117 	ldw	r4,-124(fp)
 200bf10:	20100500 	call	2010050 <__mcmp>
 200bf14:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 200bf18:	e1bfe317 	ldw	r6,-116(fp)
 200bf1c:	e17fe417 	ldw	r5,-112(fp)
 200bf20:	e13ff817 	ldw	r4,-32(fp)
 200bf24:	20101640 	call	2010164 <__mdiff>
 200bf28:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 200bf2c:	e0bfef17 	ldw	r2,-68(fp)
 200bf30:	10800317 	ldw	r2,12(r2)
 200bf34:	1000041e 	bne	r2,zero,200bf48 <_dtoa_r+0x1774>
 200bf38:	e17fef17 	ldw	r5,-68(fp)
 200bf3c:	e13fe117 	ldw	r4,-124(fp)
 200bf40:	20100500 	call	2010050 <__mcmp>
 200bf44:	00000106 	br	200bf4c <_dtoa_r+0x1778>
 200bf48:	00800044 	movi	r2,1
 200bf4c:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 200bf50:	e17fef17 	ldw	r5,-68(fp)
 200bf54:	e13ff817 	ldw	r4,-32(fp)
 200bf58:	200f3a00 	call	200f3a0 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 200bf5c:	e0bfec17 	ldw	r2,-80(fp)
 200bf60:	1000131e 	bne	r2,zero,200bfb0 <_dtoa_r+0x17dc>
 200bf64:	e0bffb17 	ldw	r2,-20(fp)
 200bf68:	1000111e 	bne	r2,zero,200bfb0 <_dtoa_r+0x17dc>
 200bf6c:	e0bff217 	ldw	r2,-56(fp)
 200bf70:	1080004c 	andi	r2,r2,1
 200bf74:	10000e1e 	bne	r2,zero,200bfb0 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 200bf78:	e0bfd117 	ldw	r2,-188(fp)
 200bf7c:	10800e58 	cmpnei	r2,r2,57
 200bf80:	10003726 	beq	r2,zero,200c060 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 200bf84:	e0bfd617 	ldw	r2,-168(fp)
 200bf88:	0080030e 	bge	zero,r2,200bf98 <_dtoa_r+0x17c4>
		dig++;
 200bf8c:	e0bfd117 	ldw	r2,-188(fp)
 200bf90:	10800044 	addi	r2,r2,1
 200bf94:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 200bf98:	e0bfe717 	ldw	r2,-100(fp)
 200bf9c:	10c00044 	addi	r3,r2,1
 200bfa0:	e0ffe715 	stw	r3,-100(fp)
 200bfa4:	e0ffd117 	ldw	r3,-188(fp)
 200bfa8:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200bfac:	0000bd06 	br	200c2a4 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 200bfb0:	e0bfd617 	ldw	r2,-168(fp)
 200bfb4:	10000716 	blt	r2,zero,200bfd4 <_dtoa_r+0x1800>
 200bfb8:	e0bfd617 	ldw	r2,-168(fp)
 200bfbc:	1000221e 	bne	r2,zero,200c048 <_dtoa_r+0x1874>
 200bfc0:	e0bffb17 	ldw	r2,-20(fp)
 200bfc4:	1000201e 	bne	r2,zero,200c048 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 200bfc8:	e0bff217 	ldw	r2,-56(fp)
 200bfcc:	1080004c 	andi	r2,r2,1
 200bfd0:	10001d1e 	bne	r2,zero,200c048 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 200bfd4:	e0bfec17 	ldw	r2,-80(fp)
 200bfd8:	0080150e 	bge	zero,r2,200c030 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 200bfdc:	01800044 	movi	r6,1
 200bfe0:	e17fe117 	ldw	r5,-124(fp)
 200bfe4:	e13ff817 	ldw	r4,-32(fp)
 200bfe8:	200fe580 	call	200fe58 <__lshift>
 200bfec:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 200bff0:	e17fe417 	ldw	r5,-112(fp)
 200bff4:	e13fe117 	ldw	r4,-124(fp)
 200bff8:	20100500 	call	2010050 <__mcmp>
 200bffc:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 200c000:	e0bfec17 	ldw	r2,-80(fp)
 200c004:	00800516 	blt	zero,r2,200c01c <_dtoa_r+0x1848>
 200c008:	e0bfec17 	ldw	r2,-80(fp)
 200c00c:	1000081e 	bne	r2,zero,200c030 <_dtoa_r+0x185c>
 200c010:	e0bfd117 	ldw	r2,-188(fp)
 200c014:	1080004c 	andi	r2,r2,1
 200c018:	10000526 	beq	r2,zero,200c030 <_dtoa_r+0x185c>
		      && dig++ == '9')
 200c01c:	e0bfd117 	ldw	r2,-188(fp)
 200c020:	10c00044 	addi	r3,r2,1
 200c024:	e0ffd115 	stw	r3,-188(fp)
 200c028:	10800e58 	cmpnei	r2,r2,57
 200c02c:	10000e26 	beq	r2,zero,200c068 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 200c030:	e0bfe717 	ldw	r2,-100(fp)
 200c034:	10c00044 	addi	r3,r2,1
 200c038:	e0ffe715 	stw	r3,-100(fp)
 200c03c:	e0ffd117 	ldw	r3,-188(fp)
 200c040:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200c044:	00009706 	br	200c2a4 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 200c048:	e0bfec17 	ldw	r2,-80(fp)
 200c04c:	0080140e 	bge	zero,r2,200c0a0 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 200c050:	e0bfd117 	ldw	r2,-188(fp)
 200c054:	10800e58 	cmpnei	r2,r2,57
 200c058:	10000a1e 	bne	r2,zero,200c084 <_dtoa_r+0x18b0>
 200c05c:	00000306 	br	200c06c <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 200c060:	0001883a 	nop
 200c064:	00000106 	br	200c06c <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 200c068:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 200c06c:	e0bfe717 	ldw	r2,-100(fp)
 200c070:	10c00044 	addi	r3,r2,1
 200c074:	e0ffe715 	stw	r3,-100(fp)
 200c078:	00c00e44 	movi	r3,57
 200c07c:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 200c080:	00005d06 	br	200c1f8 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 200c084:	e0bfe717 	ldw	r2,-100(fp)
 200c088:	10c00044 	addi	r3,r2,1
 200c08c:	e0ffe715 	stw	r3,-100(fp)
 200c090:	e0ffd117 	ldw	r3,-188(fp)
 200c094:	18c00044 	addi	r3,r3,1
 200c098:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200c09c:	00008106 	br	200c2a4 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 200c0a0:	e0bfe717 	ldw	r2,-100(fp)
 200c0a4:	10c00044 	addi	r3,r2,1
 200c0a8:	e0ffe715 	stw	r3,-100(fp)
 200c0ac:	e0ffd117 	ldw	r3,-188(fp)
 200c0b0:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 200c0b4:	e0ffd217 	ldw	r3,-184(fp)
 200c0b8:	e0bfd417 	ldw	r2,-176(fp)
 200c0bc:	18803b26 	beq	r3,r2,200c1ac <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 200c0c0:	000f883a 	mov	r7,zero
 200c0c4:	01800284 	movi	r6,10
 200c0c8:	e17fe117 	ldw	r5,-124(fp)
 200c0cc:	e13ff817 	ldw	r4,-32(fp)
 200c0d0:	200f41c0 	call	200f41c <__multadd>
 200c0d4:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 200c0d8:	e0ffe217 	ldw	r3,-120(fp)
 200c0dc:	e0bfe317 	ldw	r2,-116(fp)
 200c0e0:	1880091e 	bne	r3,r2,200c108 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 200c0e4:	000f883a 	mov	r7,zero
 200c0e8:	01800284 	movi	r6,10
 200c0ec:	e17fe317 	ldw	r5,-116(fp)
 200c0f0:	e13ff817 	ldw	r4,-32(fp)
 200c0f4:	200f41c0 	call	200f41c <__multadd>
 200c0f8:	e0bfe315 	stw	r2,-116(fp)
 200c0fc:	e0bfe317 	ldw	r2,-116(fp)
 200c100:	e0bfe215 	stw	r2,-120(fp)
 200c104:	00000c06 	br	200c138 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 200c108:	000f883a 	mov	r7,zero
 200c10c:	01800284 	movi	r6,10
 200c110:	e17fe217 	ldw	r5,-120(fp)
 200c114:	e13ff817 	ldw	r4,-32(fp)
 200c118:	200f41c0 	call	200f41c <__multadd>
 200c11c:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 200c120:	000f883a 	mov	r7,zero
 200c124:	01800284 	movi	r6,10
 200c128:	e17fe317 	ldw	r5,-116(fp)
 200c12c:	e13ff817 	ldw	r4,-32(fp)
 200c130:	200f41c0 	call	200f41c <__multadd>
 200c134:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 200c138:	e0bfd217 	ldw	r2,-184(fp)
 200c13c:	10800044 	addi	r2,r2,1
 200c140:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 200c144:	003f6b06 	br	200bef4 <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 200c148:	00800044 	movi	r2,1
 200c14c:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 200c150:	e43fe717 	ldw	r16,-100(fp)
 200c154:	80800044 	addi	r2,r16,1
 200c158:	e0bfe715 	stw	r2,-100(fp)
 200c15c:	e17fe417 	ldw	r5,-112(fp)
 200c160:	e13fe117 	ldw	r4,-124(fp)
 200c164:	200a4200 	call	200a420 <quorem>
 200c168:	10800c04 	addi	r2,r2,48
 200c16c:	e0bfd115 	stw	r2,-188(fp)
 200c170:	e0bfd117 	ldw	r2,-188(fp)
 200c174:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 200c178:	e0ffd217 	ldw	r3,-184(fp)
 200c17c:	e0bfd417 	ldw	r2,-176(fp)
 200c180:	18800c0e 	bge	r3,r2,200c1b4 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 200c184:	000f883a 	mov	r7,zero
 200c188:	01800284 	movi	r6,10
 200c18c:	e17fe117 	ldw	r5,-124(fp)
 200c190:	e13ff817 	ldw	r4,-32(fp)
 200c194:	200f41c0 	call	200f41c <__multadd>
 200c198:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 200c19c:	e0bfd217 	ldw	r2,-184(fp)
 200c1a0:	10800044 	addi	r2,r2,1
 200c1a4:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 200c1a8:	003fe906 	br	200c150 <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 200c1ac:	0001883a 	nop
 200c1b0:	00000106 	br	200c1b8 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 200c1b4:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 200c1b8:	01800044 	movi	r6,1
 200c1bc:	e17fe117 	ldw	r5,-124(fp)
 200c1c0:	e13ff817 	ldw	r4,-32(fp)
 200c1c4:	200fe580 	call	200fe58 <__lshift>
 200c1c8:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 200c1cc:	e17fe417 	ldw	r5,-112(fp)
 200c1d0:	e13fe117 	ldw	r4,-124(fp)
 200c1d4:	20100500 	call	2010050 <__mcmp>
 200c1d8:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 200c1dc:	e0bfd617 	ldw	r2,-168(fp)
 200c1e0:	00801216 	blt	zero,r2,200c22c <_dtoa_r+0x1a58>
 200c1e4:	e0bfd617 	ldw	r2,-168(fp)
 200c1e8:	1000211e 	bne	r2,zero,200c270 <_dtoa_r+0x1a9c>
 200c1ec:	e0bfd117 	ldw	r2,-188(fp)
 200c1f0:	1080004c 	andi	r2,r2,1
 200c1f4:	10001e26 	beq	r2,zero,200c270 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 200c1f8:	00000c06 	br	200c22c <_dtoa_r+0x1a58>
	if (s == s0)
 200c1fc:	e0ffe717 	ldw	r3,-100(fp)
 200c200:	e0bfe917 	ldw	r2,-92(fp)
 200c204:	1880091e 	bne	r3,r2,200c22c <_dtoa_r+0x1a58>
	  {
	    k++;
 200c208:	e0bfd717 	ldw	r2,-164(fp)
 200c20c:	10800044 	addi	r2,r2,1
 200c210:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 200c214:	e0bfe717 	ldw	r2,-100(fp)
 200c218:	10c00044 	addi	r3,r2,1
 200c21c:	e0ffe715 	stw	r3,-100(fp)
 200c220:	00c00c44 	movi	r3,49
 200c224:	10c00005 	stb	r3,0(r2)
	    goto ret;
 200c228:	00001e06 	br	200c2a4 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 200c22c:	e0bfe717 	ldw	r2,-100(fp)
 200c230:	10bfffc4 	addi	r2,r2,-1
 200c234:	e0bfe715 	stw	r2,-100(fp)
 200c238:	e0bfe717 	ldw	r2,-100(fp)
 200c23c:	10800003 	ldbu	r2,0(r2)
 200c240:	10803fcc 	andi	r2,r2,255
 200c244:	1080201c 	xori	r2,r2,128
 200c248:	10bfe004 	addi	r2,r2,-128
 200c24c:	10800e60 	cmpeqi	r2,r2,57
 200c250:	103fea1e 	bne	r2,zero,200c1fc <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 200c254:	e0bfe717 	ldw	r2,-100(fp)
 200c258:	10c00044 	addi	r3,r2,1
 200c25c:	e0ffe715 	stw	r3,-100(fp)
 200c260:	10c00003 	ldbu	r3,0(r2)
 200c264:	18c00044 	addi	r3,r3,1
 200c268:	10c00005 	stb	r3,0(r2)
 200c26c:	00000d06 	br	200c2a4 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 200c270:	e0bfe717 	ldw	r2,-100(fp)
 200c274:	10bfffc4 	addi	r2,r2,-1
 200c278:	e0bfe715 	stw	r2,-100(fp)
 200c27c:	e0bfe717 	ldw	r2,-100(fp)
 200c280:	10800003 	ldbu	r2,0(r2)
 200c284:	10803fcc 	andi	r2,r2,255
 200c288:	1080201c 	xori	r2,r2,128
 200c28c:	10bfe004 	addi	r2,r2,-128
 200c290:	10800c20 	cmpeqi	r2,r2,48
 200c294:	103ff61e 	bne	r2,zero,200c270 <_dtoa_r+0x1a9c>
      s++;
 200c298:	e0bfe717 	ldw	r2,-100(fp)
 200c29c:	10800044 	addi	r2,r2,1
 200c2a0:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 200c2a4:	e17fe417 	ldw	r5,-112(fp)
 200c2a8:	e13ff817 	ldw	r4,-32(fp)
 200c2ac:	200f3a00 	call	200f3a0 <_Bfree>
  if (mhi)
 200c2b0:	e0bfe317 	ldw	r2,-116(fp)
 200c2b4:	10000d26 	beq	r2,zero,200c2ec <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 200c2b8:	e0bfe217 	ldw	r2,-120(fp)
 200c2bc:	10000626 	beq	r2,zero,200c2d8 <_dtoa_r+0x1b04>
 200c2c0:	e0ffe217 	ldw	r3,-120(fp)
 200c2c4:	e0bfe317 	ldw	r2,-116(fp)
 200c2c8:	18800326 	beq	r3,r2,200c2d8 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 200c2cc:	e17fe217 	ldw	r5,-120(fp)
 200c2d0:	e13ff817 	ldw	r4,-32(fp)
 200c2d4:	200f3a00 	call	200f3a0 <_Bfree>
      Bfree (ptr, mhi);
 200c2d8:	e17fe317 	ldw	r5,-116(fp)
 200c2dc:	e13ff817 	ldw	r4,-32(fp)
 200c2e0:	200f3a00 	call	200f3a0 <_Bfree>
 200c2e4:	00000106 	br	200c2ec <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 200c2e8:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 200c2ec:	e17fe117 	ldw	r5,-124(fp)
 200c2f0:	e13ff817 	ldw	r4,-32(fp)
 200c2f4:	200f3a00 	call	200f3a0 <_Bfree>
  *s = 0;
 200c2f8:	e0bfe717 	ldw	r2,-100(fp)
 200c2fc:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 200c300:	e0bfd717 	ldw	r2,-164(fp)
 200c304:	10c00044 	addi	r3,r2,1
 200c308:	e0800317 	ldw	r2,12(fp)
 200c30c:	10c00015 	stw	r3,0(r2)
  if (rve)
 200c310:	e0800517 	ldw	r2,20(fp)
 200c314:	10000326 	beq	r2,zero,200c324 <_dtoa_r+0x1b50>
    *rve = s;
 200c318:	e0800517 	ldw	r2,20(fp)
 200c31c:	e0ffe717 	ldw	r3,-100(fp)
 200c320:	10c00015 	stw	r3,0(r2)
  return s0;
 200c324:	e0bfe917 	ldw	r2,-92(fp)
}
 200c328:	e6fffc04 	addi	sp,fp,-16
 200c32c:	dfc00517 	ldw	ra,20(sp)
 200c330:	df000417 	ldw	fp,16(sp)
 200c334:	dcc00317 	ldw	r19,12(sp)
 200c338:	dc800217 	ldw	r18,8(sp)
 200c33c:	dc400117 	ldw	r17,4(sp)
 200c340:	dc000017 	ldw	r16,0(sp)
 200c344:	dec00604 	addi	sp,sp,24
 200c348:	f800283a 	ret

0200c34c <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200c34c:	defff504 	addi	sp,sp,-44
 200c350:	dfc00a15 	stw	ra,40(sp)
 200c354:	df000915 	stw	fp,36(sp)
 200c358:	dcc00815 	stw	r19,32(sp)
 200c35c:	dc800715 	stw	r18,28(sp)
 200c360:	dc400615 	stw	r17,24(sp)
 200c364:	dc000515 	stw	r16,20(sp)
 200c368:	df000904 	addi	fp,sp,36
 200c36c:	e13ffb15 	stw	r4,-20(fp)
 200c370:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 200c374:	8080030b 	ldhu	r2,12(r16)
 200c378:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 200c37c:	e0bff90b 	ldhu	r2,-28(fp)
 200c380:	10bfffcc 	andi	r2,r2,65535
 200c384:	1080020c 	andi	r2,r2,8
 200c388:	1000831e 	bne	r2,zero,200c598 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 200c38c:	8080030b 	ldhu	r2,12(r16)
 200c390:	10820014 	ori	r2,r2,2048
 200c394:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 200c398:	80800117 	ldw	r2,4(r16)
 200c39c:	00800216 	blt	zero,r2,200c3a8 <__sflush_r+0x5c>
 200c3a0:	80800f17 	ldw	r2,60(r16)
 200c3a4:	00807a0e 	bge	zero,r2,200c590 <__sflush_r+0x244>
 200c3a8:	80800a17 	ldw	r2,40(r16)
 200c3ac:	10007826 	beq	r2,zero,200c590 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 200c3b0:	e0bffb17 	ldw	r2,-20(fp)
 200c3b4:	10800017 	ldw	r2,0(r2)
 200c3b8:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 200c3bc:	e0bffb17 	ldw	r2,-20(fp)
 200c3c0:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 200c3c4:	8080030b 	ldhu	r2,12(r16)
 200c3c8:	10bfffcc 	andi	r2,r2,65535
 200c3cc:	1084000c 	andi	r2,r2,4096
 200c3d0:	10000326 	beq	r2,zero,200c3e0 <__sflush_r+0x94>
	    curoff = fp->_offset;
 200c3d4:	80801417 	ldw	r2,80(r16)
 200c3d8:	e0bff715 	stw	r2,-36(fp)
 200c3dc:	00002206 	br	200c468 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 200c3e0:	80800a17 	ldw	r2,40(r16)
 200c3e4:	80c00717 	ldw	r3,28(r16)
 200c3e8:	01c00044 	movi	r7,1
 200c3ec:	000d883a 	mov	r6,zero
 200c3f0:	180b883a 	mov	r5,r3
 200c3f4:	e13ffb17 	ldw	r4,-20(fp)
 200c3f8:	103ee83a 	callr	r2
 200c3fc:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 200c400:	e0bff717 	ldw	r2,-36(fp)
 200c404:	10bfffd8 	cmpnei	r2,r2,-1
 200c408:	1000171e 	bne	r2,zero,200c468 <__sflush_r+0x11c>
 200c40c:	e0bffb17 	ldw	r2,-20(fp)
 200c410:	10800017 	ldw	r2,0(r2)
 200c414:	10001426 	beq	r2,zero,200c468 <__sflush_r+0x11c>
		{
		  int result = EOF;
 200c418:	00bfffc4 	movi	r2,-1
 200c41c:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200c420:	e0bffb17 	ldw	r2,-20(fp)
 200c424:	10800017 	ldw	r2,0(r2)
 200c428:	10800760 	cmpeqi	r2,r2,29
 200c42c:	1000041e 	bne	r2,zero,200c440 <__sflush_r+0xf4>
 200c430:	e0bffb17 	ldw	r2,-20(fp)
 200c434:	10800017 	ldw	r2,0(r2)
 200c438:	10800598 	cmpnei	r2,r2,22
 200c43c:	1000051e 	bne	r2,zero,200c454 <__sflush_r+0x108>
		    {
		      result = 0;
 200c440:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 200c444:	e0bffb17 	ldw	r2,-20(fp)
 200c448:	e0fffa17 	ldw	r3,-24(fp)
 200c44c:	10c00015 	stw	r3,0(r2)
 200c450:	00000306 	br	200c460 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 200c454:	8080030b 	ldhu	r2,12(r16)
 200c458:	10801014 	ori	r2,r2,64
 200c45c:	8080030d 	sth	r2,12(r16)
		  return result;
 200c460:	e0bff817 	ldw	r2,-32(fp)
 200c464:	00007106 	br	200c62c <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 200c468:	8080030b 	ldhu	r2,12(r16)
 200c46c:	10bfffcc 	andi	r2,r2,65535
 200c470:	1080010c 	andi	r2,r2,4
 200c474:	10000a26 	beq	r2,zero,200c4a0 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 200c478:	80800117 	ldw	r2,4(r16)
 200c47c:	e0fff717 	ldw	r3,-36(fp)
 200c480:	1885c83a 	sub	r2,r3,r2
 200c484:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 200c488:	80800c17 	ldw	r2,48(r16)
 200c48c:	10000426 	beq	r2,zero,200c4a0 <__sflush_r+0x154>
                curoff -= fp->_ur;
 200c490:	80800f17 	ldw	r2,60(r16)
 200c494:	e0fff717 	ldw	r3,-36(fp)
 200c498:	1885c83a 	sub	r2,r3,r2
 200c49c:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 200c4a0:	80800a17 	ldw	r2,40(r16)
 200c4a4:	80c00717 	ldw	r3,28(r16)
 200c4a8:	000f883a 	mov	r7,zero
 200c4ac:	e1bff717 	ldw	r6,-36(fp)
 200c4b0:	180b883a 	mov	r5,r3
 200c4b4:	e13ffb17 	ldw	r4,-20(fp)
 200c4b8:	103ee83a 	callr	r2
 200c4bc:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 200c4c0:	e0bff717 	ldw	r2,-36(fp)
 200c4c4:	10bfffd8 	cmpnei	r2,r2,-1
 200c4c8:	10000b1e 	bne	r2,zero,200c4f8 <__sflush_r+0x1ac>
 200c4cc:	e0bffb17 	ldw	r2,-20(fp)
 200c4d0:	10800017 	ldw	r2,0(r2)
 200c4d4:	10000826 	beq	r2,zero,200c4f8 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200c4d8:	e0bffb17 	ldw	r2,-20(fp)
 200c4dc:	10800017 	ldw	r2,0(r2)
 200c4e0:	10800760 	cmpeqi	r2,r2,29
 200c4e4:	1000041e 	bne	r2,zero,200c4f8 <__sflush_r+0x1ac>
 200c4e8:	e0bffb17 	ldw	r2,-20(fp)
 200c4ec:	10800017 	ldw	r2,0(r2)
 200c4f0:	10800598 	cmpnei	r2,r2,22
 200c4f4:	1000211e 	bne	r2,zero,200c57c <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 200c4f8:	80c0030b 	ldhu	r3,12(r16)
 200c4fc:	00bdffc4 	movi	r2,-2049
 200c500:	1884703a 	and	r2,r3,r2
 200c504:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 200c508:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 200c50c:	80800417 	ldw	r2,16(r16)
 200c510:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 200c514:	8080030b 	ldhu	r2,12(r16)
 200c518:	10bfffcc 	andi	r2,r2,65535
 200c51c:	1084000c 	andi	r2,r2,4096
 200c520:	10000826 	beq	r2,zero,200c544 <__sflush_r+0x1f8>
 200c524:	e0bff717 	ldw	r2,-36(fp)
 200c528:	10bfffd8 	cmpnei	r2,r2,-1
 200c52c:	1000031e 	bne	r2,zero,200c53c <__sflush_r+0x1f0>
 200c530:	e0bffb17 	ldw	r2,-20(fp)
 200c534:	10800017 	ldw	r2,0(r2)
 200c538:	1000021e 	bne	r2,zero,200c544 <__sflush_r+0x1f8>
		fp->_offset = curoff;
 200c53c:	e0bff717 	ldw	r2,-36(fp)
 200c540:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 200c544:	e0bffb17 	ldw	r2,-20(fp)
 200c548:	e0fffa17 	ldw	r3,-24(fp)
 200c54c:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 200c550:	80800c17 	ldw	r2,48(r16)
 200c554:	10000e26 	beq	r2,zero,200c590 <__sflush_r+0x244>
		FREEUB (ptr, fp);
 200c558:	80c00c17 	ldw	r3,48(r16)
 200c55c:	80801004 	addi	r2,r16,64
 200c560:	18800426 	beq	r3,r2,200c574 <__sflush_r+0x228>
 200c564:	80800c17 	ldw	r2,48(r16)
 200c568:	100b883a 	mov	r5,r2
 200c56c:	e13ffb17 	ldw	r4,-20(fp)
 200c570:	200ccf00 	call	200ccf0 <_free_r>
 200c574:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 200c578:	00000506 	br	200c590 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 200c57c:	8080030b 	ldhu	r2,12(r16)
 200c580:	10801014 	ori	r2,r2,64
 200c584:	8080030d 	sth	r2,12(r16)
	      return EOF;
 200c588:	00bfffc4 	movi	r2,-1
 200c58c:	00002706 	br	200c62c <__sflush_r+0x2e0>
	    }
	}
      return 0;
 200c590:	0005883a 	mov	r2,zero
 200c594:	00002506 	br	200c62c <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 200c598:	84400417 	ldw	r17,16(r16)
 200c59c:	8800021e 	bne	r17,zero,200c5a8 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 200c5a0:	0005883a 	mov	r2,zero
 200c5a4:	00002106 	br	200c62c <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 200c5a8:	80800017 	ldw	r2,0(r16)
 200c5ac:	1007883a 	mov	r3,r2
 200c5b0:	8805883a 	mov	r2,r17
 200c5b4:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 200c5b8:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 200c5bc:	e0bff90b 	ldhu	r2,-28(fp)
 200c5c0:	10bfffcc 	andi	r2,r2,65535
 200c5c4:	108000cc 	andi	r2,r2,3
 200c5c8:	1000021e 	bne	r2,zero,200c5d4 <__sflush_r+0x288>
 200c5cc:	80800517 	ldw	r2,20(r16)
 200c5d0:	00000106 	br	200c5d8 <__sflush_r+0x28c>
 200c5d4:	0005883a 	mov	r2,zero
 200c5d8:	80800215 	stw	r2,8(r16)

  while (n > 0)
 200c5dc:	00001106 	br	200c624 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 200c5e0:	80800917 	ldw	r2,36(r16)
 200c5e4:	80c00717 	ldw	r3,28(r16)
 200c5e8:	900f883a 	mov	r7,r18
 200c5ec:	880d883a 	mov	r6,r17
 200c5f0:	180b883a 	mov	r5,r3
 200c5f4:	e13ffb17 	ldw	r4,-20(fp)
 200c5f8:	103ee83a 	callr	r2
 200c5fc:	1027883a 	mov	r19,r2
      if (t <= 0)
 200c600:	04c00516 	blt	zero,r19,200c618 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 200c604:	8080030b 	ldhu	r2,12(r16)
 200c608:	10801014 	ori	r2,r2,64
 200c60c:	8080030d 	sth	r2,12(r16)
          return EOF;
 200c610:	00bfffc4 	movi	r2,-1
 200c614:	00000506 	br	200c62c <__sflush_r+0x2e0>
	}
      p += t;
 200c618:	9805883a 	mov	r2,r19
 200c61c:	88a3883a 	add	r17,r17,r2
      n -= t;
 200c620:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 200c624:	04bfee16 	blt	zero,r18,200c5e0 <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 200c628:	0005883a 	mov	r2,zero
}
 200c62c:	e6fffc04 	addi	sp,fp,-16
 200c630:	dfc00517 	ldw	ra,20(sp)
 200c634:	df000417 	ldw	fp,16(sp)
 200c638:	dcc00317 	ldw	r19,12(sp)
 200c63c:	dc800217 	ldw	r18,8(sp)
 200c640:	dc400117 	ldw	r17,4(sp)
 200c644:	dc000017 	ldw	r16,0(sp)
 200c648:	dec00604 	addi	sp,sp,24
 200c64c:	f800283a 	ret

0200c650 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200c650:	defffa04 	addi	sp,sp,-24
 200c654:	dfc00515 	stw	ra,20(sp)
 200c658:	df000415 	stw	fp,16(sp)
 200c65c:	dc000315 	stw	r16,12(sp)
 200c660:	df000404 	addi	fp,sp,16
 200c664:	e13ffe15 	stw	r4,-8(fp)
 200c668:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 200c66c:	e0bffe17 	ldw	r2,-8(fp)
 200c670:	e0bffc15 	stw	r2,-16(fp)
 200c674:	e0bffc17 	ldw	r2,-16(fp)
 200c678:	10000526 	beq	r2,zero,200c690 <_fflush_r+0x40>
 200c67c:	e0bffc17 	ldw	r2,-16(fp)
 200c680:	10800e17 	ldw	r2,56(r2)
 200c684:	1000021e 	bne	r2,zero,200c690 <_fflush_r+0x40>
 200c688:	e13ffc17 	ldw	r4,-16(fp)
 200c68c:	200cad00 	call	200cad0 <__sinit>

  if (!fp->_flags)
 200c690:	8080030b 	ldhu	r2,12(r16)
 200c694:	10bfffcc 	andi	r2,r2,65535
 200c698:	10a0001c 	xori	r2,r2,32768
 200c69c:	10a00004 	addi	r2,r2,-32768
 200c6a0:	1000021e 	bne	r2,zero,200c6ac <_fflush_r+0x5c>
    return 0;
 200c6a4:	0005883a 	mov	r2,zero
 200c6a8:	00000506 	br	200c6c0 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 200c6ac:	800b883a 	mov	r5,r16
 200c6b0:	e13ffe17 	ldw	r4,-8(fp)
 200c6b4:	200c34c0 	call	200c34c <__sflush_r>
 200c6b8:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 200c6bc:	e0bffd17 	ldw	r2,-12(fp)
}
 200c6c0:	e6ffff04 	addi	sp,fp,-4
 200c6c4:	dfc00217 	ldw	ra,8(sp)
 200c6c8:	df000117 	ldw	fp,4(sp)
 200c6cc:	dc000017 	ldw	r16,0(sp)
 200c6d0:	dec00304 	addi	sp,sp,12
 200c6d4:	f800283a 	ret

0200c6d8 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 200c6d8:	defffe04 	addi	sp,sp,-8
 200c6dc:	dfc00115 	stw	ra,4(sp)
 200c6e0:	df000015 	stw	fp,0(sp)
 200c6e4:	d839883a 	mov	fp,sp
 200c6e8:	2005883a 	mov	r2,r4
  if (fp == NULL)
 200c6ec:	1000061e 	bne	r2,zero,200c708 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 200c6f0:	d0a02f17 	ldw	r2,-32580(gp)
 200c6f4:	01408074 	movhi	r5,513
 200c6f8:	29719404 	addi	r5,r5,-14768
 200c6fc:	1009883a 	mov	r4,r2
 200c700:	200dad00 	call	200dad0 <_fwalk_reent>
 200c704:	00000406 	br	200c718 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 200c708:	d0e02e17 	ldw	r3,-32584(gp)
 200c70c:	100b883a 	mov	r5,r2
 200c710:	1809883a 	mov	r4,r3
 200c714:	200c6500 	call	200c650 <_fflush_r>
}
 200c718:	e037883a 	mov	sp,fp
 200c71c:	dfc00117 	ldw	ra,4(sp)
 200c720:	df000017 	ldw	fp,0(sp)
 200c724:	dec00204 	addi	sp,sp,8
 200c728:	f800283a 	ret

0200c72c <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 200c72c:	defffa04 	addi	sp,sp,-24
 200c730:	dfc00515 	stw	ra,20(sp)
 200c734:	df000415 	stw	fp,16(sp)
 200c738:	df000404 	addi	fp,sp,16
 200c73c:	e13ffc15 	stw	r4,-16(fp)
 200c740:	e17ffd15 	stw	r5,-12(fp)
 200c744:	e1bffe15 	stw	r6,-8(fp)
 200c748:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 200c74c:	e0bffc17 	ldw	r2,-16(fp)
 200c750:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 200c754:	e0bffc17 	ldw	r2,-16(fp)
 200c758:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 200c75c:	e0bffc17 	ldw	r2,-16(fp)
 200c760:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 200c764:	e0bffd17 	ldw	r2,-12(fp)
 200c768:	1007883a 	mov	r3,r2
 200c76c:	e0bffc17 	ldw	r2,-16(fp)
 200c770:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 200c774:	e0bffc17 	ldw	r2,-16(fp)
 200c778:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 200c77c:	e0bffe17 	ldw	r2,-8(fp)
 200c780:	1007883a 	mov	r3,r2
 200c784:	e0bffc17 	ldw	r2,-16(fp)
 200c788:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 200c78c:	e0bffc17 	ldw	r2,-16(fp)
 200c790:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 200c794:	e0bffc17 	ldw	r2,-16(fp)
 200c798:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 200c79c:	e0bffc17 	ldw	r2,-16(fp)
 200c7a0:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 200c7a4:	e0bffc17 	ldw	r2,-16(fp)
 200c7a8:	10801704 	addi	r2,r2,92
 200c7ac:	01800204 	movi	r6,8
 200c7b0:	000b883a 	mov	r5,zero
 200c7b4:	1009883a 	mov	r4,r2
 200c7b8:	20078500 	call	2007850 <memset>
  ptr->_cookie = ptr;
 200c7bc:	e0bffc17 	ldw	r2,-16(fp)
 200c7c0:	e0fffc17 	ldw	r3,-16(fp)
 200c7c4:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 200c7c8:	e0fffc17 	ldw	r3,-16(fp)
 200c7cc:	00808074 	movhi	r2,513
 200c7d0:	10864e04 	addi	r2,r2,6456
 200c7d4:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 200c7d8:	e0fffc17 	ldw	r3,-16(fp)
 200c7dc:	00808074 	movhi	r2,513
 200c7e0:	10868104 	addi	r2,r2,6660
 200c7e4:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 200c7e8:	e0fffc17 	ldw	r3,-16(fp)
 200c7ec:	00808074 	movhi	r2,513
 200c7f0:	1086ae04 	addi	r2,r2,6840
 200c7f4:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 200c7f8:	e0fffc17 	ldw	r3,-16(fp)
 200c7fc:	00808074 	movhi	r2,513
 200c800:	1086d604 	addi	r2,r2,7000
 200c804:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 200c808:	0001883a 	nop
 200c80c:	e037883a 	mov	sp,fp
 200c810:	dfc00117 	ldw	ra,4(sp)
 200c814:	df000017 	ldw	fp,0(sp)
 200c818:	dec00204 	addi	sp,sp,8
 200c81c:	f800283a 	ret

0200c820 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 200c820:	defffb04 	addi	sp,sp,-20
 200c824:	dfc00415 	stw	ra,16(sp)
 200c828:	df000315 	stw	fp,12(sp)
 200c82c:	dc000215 	stw	r16,8(sp)
 200c830:	df000304 	addi	fp,sp,12
 200c834:	e13ffe15 	stw	r4,-8(fp)
 200c838:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 200c83c:	80bfffc4 	addi	r2,r16,-1
 200c840:	10801a24 	muli	r2,r2,104
 200c844:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 200c848:	100b883a 	mov	r5,r2
 200c84c:	e13ffe17 	ldw	r4,-8(fp)
 200c850:	200e3300 	call	200e330 <_malloc_r>
 200c854:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 200c858:	e0bffd17 	ldw	r2,-12(fp)
 200c85c:	1000021e 	bne	r2,zero,200c868 <__sfmoreglue+0x48>
    return NULL;
 200c860:	0005883a 	mov	r2,zero
 200c864:	00001106 	br	200c8ac <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 200c868:	e0bffd17 	ldw	r2,-12(fp)
 200c86c:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 200c870:	e0bffd17 	ldw	r2,-12(fp)
 200c874:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 200c878:	e0bffd17 	ldw	r2,-12(fp)
 200c87c:	10c00304 	addi	r3,r2,12
 200c880:	e0bffd17 	ldw	r2,-12(fp)
 200c884:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 200c888:	e0bffd17 	ldw	r2,-12(fp)
 200c88c:	10800304 	addi	r2,r2,12
 200c890:	8007883a 	mov	r3,r16
 200c894:	18c01a24 	muli	r3,r3,104
 200c898:	180d883a 	mov	r6,r3
 200c89c:	000b883a 	mov	r5,zero
 200c8a0:	1009883a 	mov	r4,r2
 200c8a4:	20078500 	call	2007850 <memset>
  return &g->glue;
 200c8a8:	e0bffd17 	ldw	r2,-12(fp)
}
 200c8ac:	e6ffff04 	addi	sp,fp,-4
 200c8b0:	dfc00217 	ldw	ra,8(sp)
 200c8b4:	df000117 	ldw	fp,4(sp)
 200c8b8:	dc000017 	ldw	r16,0(sp)
 200c8bc:	dec00304 	addi	sp,sp,12
 200c8c0:	f800283a 	ret

0200c8c4 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 200c8c4:	defffa04 	addi	sp,sp,-24
 200c8c8:	dfc00515 	stw	ra,20(sp)
 200c8cc:	df000415 	stw	fp,16(sp)
 200c8d0:	df000404 	addi	fp,sp,16
 200c8d4:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 200c8d8:	200cba80 	call	200cba8 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 200c8dc:	d0a02f17 	ldw	r2,-32580(gp)
 200c8e0:	10800e17 	ldw	r2,56(r2)
 200c8e4:	1000031e 	bne	r2,zero,200c8f4 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 200c8e8:	d0a02f17 	ldw	r2,-32580(gp)
 200c8ec:	1009883a 	mov	r4,r2
 200c8f0:	200cad00 	call	200cad0 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200c8f4:	d0a02f17 	ldw	r2,-32580(gp)
 200c8f8:	1080b804 	addi	r2,r2,736
 200c8fc:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200c900:	e0bffe17 	ldw	r2,-8(fp)
 200c904:	10800217 	ldw	r2,8(r2)
 200c908:	e0bffc15 	stw	r2,-16(fp)
 200c90c:	e0bffe17 	ldw	r2,-8(fp)
 200c910:	10800117 	ldw	r2,4(r2)
 200c914:	e0bffd15 	stw	r2,-12(fp)
 200c918:	00000906 	br	200c940 <__sfp+0x7c>
	if (fp->_flags == 0)
 200c91c:	e0bffc17 	ldw	r2,-16(fp)
 200c920:	1080030b 	ldhu	r2,12(r2)
 200c924:	10bfffcc 	andi	r2,r2,65535
 200c928:	10a0001c 	xori	r2,r2,32768
 200c92c:	10a00004 	addi	r2,r2,-32768
 200c930:	10001f26 	beq	r2,zero,200c9b0 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200c934:	e0bffc17 	ldw	r2,-16(fp)
 200c938:	10801a04 	addi	r2,r2,104
 200c93c:	e0bffc15 	stw	r2,-16(fp)
 200c940:	e0bffd17 	ldw	r2,-12(fp)
 200c944:	10bfffc4 	addi	r2,r2,-1
 200c948:	e0bffd15 	stw	r2,-12(fp)
 200c94c:	e0bffd17 	ldw	r2,-12(fp)
 200c950:	103ff20e 	bge	r2,zero,200c91c <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200c954:	e0bffe17 	ldw	r2,-8(fp)
 200c958:	10800017 	ldw	r2,0(r2)
 200c95c:	1000091e 	bne	r2,zero,200c984 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 200c960:	01400104 	movi	r5,4
 200c964:	e13fff17 	ldw	r4,-4(fp)
 200c968:	200c8200 	call	200c820 <__sfmoreglue>
 200c96c:	1007883a 	mov	r3,r2
 200c970:	e0bffe17 	ldw	r2,-8(fp)
 200c974:	10c00015 	stw	r3,0(r2)
 200c978:	e0bffe17 	ldw	r2,-8(fp)
 200c97c:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200c980:	10000426 	beq	r2,zero,200c994 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200c984:	e0bffe17 	ldw	r2,-8(fp)
 200c988:	10800017 	ldw	r2,0(r2)
 200c98c:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 200c990:	003fdb06 	br	200c900 <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 200c994:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 200c998:	200cbc80 	call	200cbc8 <__sfp_lock_release>
  d->_errno = ENOMEM;
 200c99c:	e0bfff17 	ldw	r2,-4(fp)
 200c9a0:	00c00304 	movi	r3,12
 200c9a4:	10c00015 	stw	r3,0(r2)
  return NULL;
 200c9a8:	0005883a 	mov	r2,zero
 200c9ac:	00002506 	br	200ca44 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 200c9b0:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 200c9b4:	e0bffc17 	ldw	r2,-16(fp)
 200c9b8:	00ffffc4 	movi	r3,-1
 200c9bc:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 200c9c0:	e0bffc17 	ldw	r2,-16(fp)
 200c9c4:	00c00044 	movi	r3,1
 200c9c8:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 200c9cc:	e0bffc17 	ldw	r2,-16(fp)
 200c9d0:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 200c9d4:	200cbc80 	call	200cbc8 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 200c9d8:	e0bffc17 	ldw	r2,-16(fp)
 200c9dc:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 200c9e0:	e0bffc17 	ldw	r2,-16(fp)
 200c9e4:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 200c9e8:	e0bffc17 	ldw	r2,-16(fp)
 200c9ec:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 200c9f0:	e0bffc17 	ldw	r2,-16(fp)
 200c9f4:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 200c9f8:	e0bffc17 	ldw	r2,-16(fp)
 200c9fc:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 200ca00:	e0bffc17 	ldw	r2,-16(fp)
 200ca04:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 200ca08:	e0bffc17 	ldw	r2,-16(fp)
 200ca0c:	10801704 	addi	r2,r2,92
 200ca10:	01800204 	movi	r6,8
 200ca14:	000b883a 	mov	r5,zero
 200ca18:	1009883a 	mov	r4,r2
 200ca1c:	20078500 	call	2007850 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 200ca20:	e0bffc17 	ldw	r2,-16(fp)
 200ca24:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 200ca28:	e0bffc17 	ldw	r2,-16(fp)
 200ca2c:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 200ca30:	e0bffc17 	ldw	r2,-16(fp)
 200ca34:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 200ca38:	e0bffc17 	ldw	r2,-16(fp)
 200ca3c:	10001215 	stw	zero,72(r2)

  return fp;
 200ca40:	e0bffc17 	ldw	r2,-16(fp)
}
 200ca44:	e037883a 	mov	sp,fp
 200ca48:	dfc00117 	ldw	ra,4(sp)
 200ca4c:	df000017 	ldw	fp,0(sp)
 200ca50:	dec00204 	addi	sp,sp,8
 200ca54:	f800283a 	ret

0200ca58 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 200ca58:	defffc04 	addi	sp,sp,-16
 200ca5c:	dfc00315 	stw	ra,12(sp)
 200ca60:	df000215 	stw	fp,8(sp)
 200ca64:	df000204 	addi	fp,sp,8
 200ca68:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 200ca6c:	00808074 	movhi	r2,513
 200ca70:	108d1804 	addi	r2,r2,13408
 200ca74:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 200ca78:	e17ffe17 	ldw	r5,-8(fp)
 200ca7c:	e13fff17 	ldw	r4,-4(fp)
 200ca80:	200dad00 	call	200dad0 <_fwalk_reent>
}
 200ca84:	0001883a 	nop
 200ca88:	e037883a 	mov	sp,fp
 200ca8c:	dfc00117 	ldw	ra,4(sp)
 200ca90:	df000017 	ldw	fp,0(sp)
 200ca94:	dec00204 	addi	sp,sp,8
 200ca98:	f800283a 	ret

0200ca9c <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 200ca9c:	defffe04 	addi	sp,sp,-8
 200caa0:	dfc00115 	stw	ra,4(sp)
 200caa4:	df000015 	stw	fp,0(sp)
 200caa8:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 200caac:	d0a02f17 	ldw	r2,-32580(gp)
 200cab0:	1009883a 	mov	r4,r2
 200cab4:	200ca580 	call	200ca58 <_cleanup_r>
}
 200cab8:	0001883a 	nop
 200cabc:	e037883a 	mov	sp,fp
 200cac0:	dfc00117 	ldw	ra,4(sp)
 200cac4:	df000017 	ldw	fp,0(sp)
 200cac8:	dec00204 	addi	sp,sp,8
 200cacc:	f800283a 	ret

0200cad0 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 200cad0:	defffd04 	addi	sp,sp,-12
 200cad4:	dfc00215 	stw	ra,8(sp)
 200cad8:	df000115 	stw	fp,4(sp)
 200cadc:	df000104 	addi	fp,sp,4
 200cae0:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 200cae4:	200cbe80 	call	200cbe8 <__sinit_lock_acquire>

  if (s->__sdidinit)
 200cae8:	e0bfff17 	ldw	r2,-4(fp)
 200caec:	10800e17 	ldw	r2,56(r2)
 200caf0:	10000226 	beq	r2,zero,200cafc <__sinit+0x2c>
    {
      __sinit_lock_release ();
 200caf4:	200cc080 	call	200cc08 <__sinit_lock_release>
      return;
 200caf8:	00002606 	br	200cb94 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 200cafc:	e0ffff17 	ldw	r3,-4(fp)
 200cb00:	00808074 	movhi	r2,513
 200cb04:	10b29604 	addi	r2,r2,-13736
 200cb08:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 200cb0c:	e0bfff17 	ldw	r2,-4(fp)
 200cb10:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 200cb14:	e0bfff17 	ldw	r2,-4(fp)
 200cb18:	00c000c4 	movi	r3,3
 200cb1c:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 200cb20:	e0bfff17 	ldw	r2,-4(fp)
 200cb24:	10c0bb04 	addi	r3,r2,748
 200cb28:	e0bfff17 	ldw	r2,-4(fp)
 200cb2c:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 200cb30:	e0bfff17 	ldw	r2,-4(fp)
 200cb34:	10800117 	ldw	r2,4(r2)
 200cb38:	e1ffff17 	ldw	r7,-4(fp)
 200cb3c:	000d883a 	mov	r6,zero
 200cb40:	01400104 	movi	r5,4
 200cb44:	1009883a 	mov	r4,r2
 200cb48:	200c72c0 	call	200c72c <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 200cb4c:	e0bfff17 	ldw	r2,-4(fp)
 200cb50:	10800217 	ldw	r2,8(r2)
 200cb54:	e1ffff17 	ldw	r7,-4(fp)
 200cb58:	01800044 	movi	r6,1
 200cb5c:	01400284 	movi	r5,10
 200cb60:	1009883a 	mov	r4,r2
 200cb64:	200c72c0 	call	200c72c <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 200cb68:	e0bfff17 	ldw	r2,-4(fp)
 200cb6c:	10800317 	ldw	r2,12(r2)
 200cb70:	e1ffff17 	ldw	r7,-4(fp)
 200cb74:	01800084 	movi	r6,2
 200cb78:	01400484 	movi	r5,18
 200cb7c:	1009883a 	mov	r4,r2
 200cb80:	200c72c0 	call	200c72c <std>

  s->__sdidinit = 1;
 200cb84:	e0bfff17 	ldw	r2,-4(fp)
 200cb88:	00c00044 	movi	r3,1
 200cb8c:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 200cb90:	200cc080 	call	200cc08 <__sinit_lock_release>
}
 200cb94:	e037883a 	mov	sp,fp
 200cb98:	dfc00117 	ldw	ra,4(sp)
 200cb9c:	df000017 	ldw	fp,0(sp)
 200cba0:	dec00204 	addi	sp,sp,8
 200cba4:	f800283a 	ret

0200cba8 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 200cba8:	deffff04 	addi	sp,sp,-4
 200cbac:	df000015 	stw	fp,0(sp)
 200cbb0:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 200cbb4:	0001883a 	nop
 200cbb8:	e037883a 	mov	sp,fp
 200cbbc:	df000017 	ldw	fp,0(sp)
 200cbc0:	dec00104 	addi	sp,sp,4
 200cbc4:	f800283a 	ret

0200cbc8 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 200cbc8:	deffff04 	addi	sp,sp,-4
 200cbcc:	df000015 	stw	fp,0(sp)
 200cbd0:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 200cbd4:	0001883a 	nop
 200cbd8:	e037883a 	mov	sp,fp
 200cbdc:	df000017 	ldw	fp,0(sp)
 200cbe0:	dec00104 	addi	sp,sp,4
 200cbe4:	f800283a 	ret

0200cbe8 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 200cbe8:	deffff04 	addi	sp,sp,-4
 200cbec:	df000015 	stw	fp,0(sp)
 200cbf0:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 200cbf4:	0001883a 	nop
 200cbf8:	e037883a 	mov	sp,fp
 200cbfc:	df000017 	ldw	fp,0(sp)
 200cc00:	dec00104 	addi	sp,sp,4
 200cc04:	f800283a 	ret

0200cc08 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 200cc08:	deffff04 	addi	sp,sp,-4
 200cc0c:	df000015 	stw	fp,0(sp)
 200cc10:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 200cc14:	0001883a 	nop
 200cc18:	e037883a 	mov	sp,fp
 200cc1c:	df000017 	ldw	fp,0(sp)
 200cc20:	dec00104 	addi	sp,sp,4
 200cc24:	f800283a 	ret

0200cc28 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 200cc28:	defffe04 	addi	sp,sp,-8
 200cc2c:	df000115 	stw	fp,4(sp)
 200cc30:	df000104 	addi	fp,sp,4
 200cc34:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 200cc38:	0005883a 	mov	r2,zero
}
 200cc3c:	e037883a 	mov	sp,fp
 200cc40:	df000017 	ldw	fp,0(sp)
 200cc44:	dec00104 	addi	sp,sp,4
 200cc48:	f800283a 	ret

0200cc4c <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 200cc4c:	defffe04 	addi	sp,sp,-8
 200cc50:	df000115 	stw	fp,4(sp)
 200cc54:	df000104 	addi	fp,sp,4
 200cc58:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 200cc5c:	0005883a 	mov	r2,zero
}
 200cc60:	e037883a 	mov	sp,fp
 200cc64:	df000017 	ldw	fp,0(sp)
 200cc68:	dec00104 	addi	sp,sp,4
 200cc6c:	f800283a 	ret

0200cc70 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 200cc70:	defffe04 	addi	sp,sp,-8
 200cc74:	dfc00115 	stw	ra,4(sp)
 200cc78:	df000015 	stw	fp,0(sp)
 200cc7c:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 200cc80:	200cba80 	call	200cba8 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 200cc84:	d0a02e17 	ldw	r2,-32584(gp)
 200cc88:	01408074 	movhi	r5,513
 200cc8c:	29730a04 	addi	r5,r5,-13272
 200cc90:	1009883a 	mov	r4,r2
 200cc94:	200d9f80 	call	200d9f8 <_fwalk>
}
 200cc98:	0001883a 	nop
 200cc9c:	e037883a 	mov	sp,fp
 200cca0:	dfc00117 	ldw	ra,4(sp)
 200cca4:	df000017 	ldw	fp,0(sp)
 200cca8:	dec00204 	addi	sp,sp,8
 200ccac:	f800283a 	ret

0200ccb0 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 200ccb0:	defffe04 	addi	sp,sp,-8
 200ccb4:	dfc00115 	stw	ra,4(sp)
 200ccb8:	df000015 	stw	fp,0(sp)
 200ccbc:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 200ccc0:	d0a02e17 	ldw	r2,-32584(gp)
 200ccc4:	01408074 	movhi	r5,513
 200ccc8:	29731304 	addi	r5,r5,-13236
 200cccc:	1009883a 	mov	r4,r2
 200ccd0:	200d9f80 	call	200d9f8 <_fwalk>

  __sfp_lock_release ();
 200ccd4:	200cbc80 	call	200cbc8 <__sfp_lock_release>
}
 200ccd8:	0001883a 	nop
 200ccdc:	e037883a 	mov	sp,fp
 200cce0:	dfc00117 	ldw	ra,4(sp)
 200cce4:	df000017 	ldw	fp,0(sp)
 200cce8:	dec00204 	addi	sp,sp,8
 200ccec:	f800283a 	ret

0200ccf0 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 200ccf0:	defff204 	addi	sp,sp,-56
 200ccf4:	dfc00d15 	stw	ra,52(sp)
 200ccf8:	df000c15 	stw	fp,48(sp)
 200ccfc:	df000c04 	addi	fp,sp,48
 200cd00:	e13ffe15 	stw	r4,-8(fp)
 200cd04:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 200cd08:	e0bfff17 	ldw	r2,-4(fp)
 200cd0c:	10014a26 	beq	r2,zero,200d238 <_free_r+0x548>
    return;

  MALLOC_LOCK;
 200cd10:	e13ffe17 	ldw	r4,-8(fp)
 200cd14:	201673c0 	call	201673c <__malloc_lock>

  p = mem2chunk(mem);
 200cd18:	e0bfff17 	ldw	r2,-4(fp)
 200cd1c:	10bffe04 	addi	r2,r2,-8
 200cd20:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 200cd24:	e0bff417 	ldw	r2,-48(fp)
 200cd28:	10800117 	ldw	r2,4(r2)
 200cd2c:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 200cd30:	e0fff917 	ldw	r3,-28(fp)
 200cd34:	00bfff84 	movi	r2,-2
 200cd38:	1884703a 	and	r2,r3,r2
 200cd3c:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 200cd40:	e0fff417 	ldw	r3,-48(fp)
 200cd44:	e0bff517 	ldw	r2,-44(fp)
 200cd48:	1885883a 	add	r2,r3,r2
 200cd4c:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 200cd50:	e0bffa17 	ldw	r2,-24(fp)
 200cd54:	10c00117 	ldw	r3,4(r2)
 200cd58:	00bfff04 	movi	r2,-4
 200cd5c:	1884703a 	and	r2,r3,r2
 200cd60:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 200cd64:	008080b4 	movhi	r2,514
 200cd68:	1088fb04 	addi	r2,r2,9196
 200cd6c:	10c00217 	ldw	r3,8(r2)
 200cd70:	e0bffa17 	ldw	r2,-24(fp)
 200cd74:	1880311e 	bne	r3,r2,200ce3c <_free_r+0x14c>
  {
    sz += nextsz;
 200cd78:	e0fff517 	ldw	r3,-44(fp)
 200cd7c:	e0bffb17 	ldw	r2,-20(fp)
 200cd80:	1885883a 	add	r2,r3,r2
 200cd84:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200cd88:	e0bff917 	ldw	r2,-28(fp)
 200cd8c:	1080004c 	andi	r2,r2,1
 200cd90:	1000181e 	bne	r2,zero,200cdf4 <_free_r+0x104>
    {
      prevsz = p->prev_size;
 200cd94:	e0bff417 	ldw	r2,-48(fp)
 200cd98:	10800017 	ldw	r2,0(r2)
 200cd9c:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 200cda0:	e0bffc17 	ldw	r2,-16(fp)
 200cda4:	0085c83a 	sub	r2,zero,r2
 200cda8:	e0fff417 	ldw	r3,-48(fp)
 200cdac:	1885883a 	add	r2,r3,r2
 200cdb0:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 200cdb4:	e0fff517 	ldw	r3,-44(fp)
 200cdb8:	e0bffc17 	ldw	r2,-16(fp)
 200cdbc:	1885883a 	add	r2,r3,r2
 200cdc0:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 200cdc4:	e0bff417 	ldw	r2,-48(fp)
 200cdc8:	10800317 	ldw	r2,12(r2)
 200cdcc:	e0bff615 	stw	r2,-40(fp)
 200cdd0:	e0bff417 	ldw	r2,-48(fp)
 200cdd4:	10800217 	ldw	r2,8(r2)
 200cdd8:	e0bff715 	stw	r2,-36(fp)
 200cddc:	e0bff717 	ldw	r2,-36(fp)
 200cde0:	e0fff617 	ldw	r3,-40(fp)
 200cde4:	10c00315 	stw	r3,12(r2)
 200cde8:	e0bff617 	ldw	r2,-40(fp)
 200cdec:	e0fff717 	ldw	r3,-36(fp)
 200cdf0:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 200cdf4:	e0bff517 	ldw	r2,-44(fp)
 200cdf8:	10c00054 	ori	r3,r2,1
 200cdfc:	e0bff417 	ldw	r2,-48(fp)
 200ce00:	10c00115 	stw	r3,4(r2)
    top = p;
 200ce04:	008080b4 	movhi	r2,514
 200ce08:	1088fb04 	addi	r2,r2,9196
 200ce0c:	e0fff417 	ldw	r3,-48(fp)
 200ce10:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 200ce14:	d0a03117 	ldw	r2,-32572(gp)
 200ce18:	e0fff517 	ldw	r3,-44(fp)
 200ce1c:	18800436 	bltu	r3,r2,200ce30 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 200ce20:	d0a79217 	ldw	r2,-25016(gp)
 200ce24:	100b883a 	mov	r5,r2
 200ce28:	e13ffe17 	ldw	r4,-8(fp)
 200ce2c:	200d2500 	call	200d250 <_malloc_trim_r>
    MALLOC_UNLOCK;
 200ce30:	e13ffe17 	ldw	r4,-8(fp)
 200ce34:	201685c0 	call	201685c <__malloc_unlock>
    return;
 200ce38:	00010006 	br	200d23c <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 200ce3c:	e0bffa17 	ldw	r2,-24(fp)
 200ce40:	e0fffb17 	ldw	r3,-20(fp)
 200ce44:	10c00115 	stw	r3,4(r2)

  islr = 0;
 200ce48:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200ce4c:	e0bff917 	ldw	r2,-28(fp)
 200ce50:	1080004c 	andi	r2,r2,1
 200ce54:	1000201e 	bne	r2,zero,200ced8 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 200ce58:	e0bff417 	ldw	r2,-48(fp)
 200ce5c:	10800017 	ldw	r2,0(r2)
 200ce60:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 200ce64:	e0bffc17 	ldw	r2,-16(fp)
 200ce68:	0085c83a 	sub	r2,zero,r2
 200ce6c:	e0fff417 	ldw	r3,-48(fp)
 200ce70:	1885883a 	add	r2,r3,r2
 200ce74:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 200ce78:	e0fff517 	ldw	r3,-44(fp)
 200ce7c:	e0bffc17 	ldw	r2,-16(fp)
 200ce80:	1885883a 	add	r2,r3,r2
 200ce84:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 200ce88:	e0bff417 	ldw	r2,-48(fp)
 200ce8c:	10c00217 	ldw	r3,8(r2)
 200ce90:	008080b4 	movhi	r2,514
 200ce94:	1088fd04 	addi	r2,r2,9204
 200ce98:	1880031e 	bne	r3,r2,200cea8 <_free_r+0x1b8>
      islr = 1;
 200ce9c:	00800044 	movi	r2,1
 200cea0:	e0bff815 	stw	r2,-32(fp)
 200cea4:	00000c06 	br	200ced8 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 200cea8:	e0bff417 	ldw	r2,-48(fp)
 200ceac:	10800317 	ldw	r2,12(r2)
 200ceb0:	e0bff615 	stw	r2,-40(fp)
 200ceb4:	e0bff417 	ldw	r2,-48(fp)
 200ceb8:	10800217 	ldw	r2,8(r2)
 200cebc:	e0bff715 	stw	r2,-36(fp)
 200cec0:	e0bff717 	ldw	r2,-36(fp)
 200cec4:	e0fff617 	ldw	r3,-40(fp)
 200cec8:	10c00315 	stw	r3,12(r2)
 200cecc:	e0bff617 	ldw	r2,-40(fp)
 200ced0:	e0fff717 	ldw	r3,-36(fp)
 200ced4:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 200ced8:	e0fffa17 	ldw	r3,-24(fp)
 200cedc:	e0bffb17 	ldw	r2,-20(fp)
 200cee0:	1885883a 	add	r2,r3,r2
 200cee4:	10800117 	ldw	r2,4(r2)
 200cee8:	1080004c 	andi	r2,r2,1
 200ceec:	10002a1e 	bne	r2,zero,200cf98 <_free_r+0x2a8>
  {
    sz += nextsz;
 200cef0:	e0fff517 	ldw	r3,-44(fp)
 200cef4:	e0bffb17 	ldw	r2,-20(fp)
 200cef8:	1885883a 	add	r2,r3,r2
 200cefc:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 200cf00:	e0bff817 	ldw	r2,-32(fp)
 200cf04:	1000181e 	bne	r2,zero,200cf68 <_free_r+0x278>
 200cf08:	e0bffa17 	ldw	r2,-24(fp)
 200cf0c:	10c00217 	ldw	r3,8(r2)
 200cf10:	008080b4 	movhi	r2,514
 200cf14:	1088fd04 	addi	r2,r2,9204
 200cf18:	1880131e 	bne	r3,r2,200cf68 <_free_r+0x278>
    {
      islr = 1;
 200cf1c:	00800044 	movi	r2,1
 200cf20:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 200cf24:	00c080b4 	movhi	r3,514
 200cf28:	18c8fd04 	addi	r3,r3,9204
 200cf2c:	008080b4 	movhi	r2,514
 200cf30:	1088fd04 	addi	r2,r2,9204
 200cf34:	e13ff417 	ldw	r4,-48(fp)
 200cf38:	11000315 	stw	r4,12(r2)
 200cf3c:	10800317 	ldw	r2,12(r2)
 200cf40:	18800215 	stw	r2,8(r3)
 200cf44:	008080b4 	movhi	r2,514
 200cf48:	1088fd04 	addi	r2,r2,9204
 200cf4c:	e0fff417 	ldw	r3,-48(fp)
 200cf50:	18800315 	stw	r2,12(r3)
 200cf54:	e0bff417 	ldw	r2,-48(fp)
 200cf58:	10c00317 	ldw	r3,12(r2)
 200cf5c:	e0bff417 	ldw	r2,-48(fp)
 200cf60:	10c00215 	stw	r3,8(r2)
 200cf64:	00000c06 	br	200cf98 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 200cf68:	e0bffa17 	ldw	r2,-24(fp)
 200cf6c:	10800317 	ldw	r2,12(r2)
 200cf70:	e0bff615 	stw	r2,-40(fp)
 200cf74:	e0bffa17 	ldw	r2,-24(fp)
 200cf78:	10800217 	ldw	r2,8(r2)
 200cf7c:	e0bff715 	stw	r2,-36(fp)
 200cf80:	e0bff717 	ldw	r2,-36(fp)
 200cf84:	e0fff617 	ldw	r3,-40(fp)
 200cf88:	10c00315 	stw	r3,12(r2)
 200cf8c:	e0bff617 	ldw	r2,-40(fp)
 200cf90:	e0fff717 	ldw	r3,-36(fp)
 200cf94:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 200cf98:	e0bff517 	ldw	r2,-44(fp)
 200cf9c:	10c00054 	ori	r3,r2,1
 200cfa0:	e0bff417 	ldw	r2,-48(fp)
 200cfa4:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 200cfa8:	e0fff417 	ldw	r3,-48(fp)
 200cfac:	e0bff517 	ldw	r2,-44(fp)
 200cfb0:	1885883a 	add	r2,r3,r2
 200cfb4:	e0fff517 	ldw	r3,-44(fp)
 200cfb8:	10c00015 	stw	r3,0(r2)
  if (!islr)
 200cfbc:	e0bff817 	ldw	r2,-32(fp)
 200cfc0:	10009a1e 	bne	r2,zero,200d22c <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 200cfc4:	e0bff517 	ldw	r2,-44(fp)
 200cfc8:	10808028 	cmpgeui	r2,r2,512
 200cfcc:	10002c1e 	bne	r2,zero,200d080 <_free_r+0x390>
 200cfd0:	e0bff517 	ldw	r2,-44(fp)
 200cfd4:	1004d0fa 	srli	r2,r2,3
 200cfd8:	e0bffd15 	stw	r2,-12(fp)
 200cfdc:	00c080b4 	movhi	r3,514
 200cfe0:	18c8fb04 	addi	r3,r3,9196
 200cfe4:	008080b4 	movhi	r2,514
 200cfe8:	1088fb04 	addi	r2,r2,9196
 200cfec:	11000117 	ldw	r4,4(r2)
 200cff0:	e0bffd17 	ldw	r2,-12(fp)
 200cff4:	1000010e 	bge	r2,zero,200cffc <_free_r+0x30c>
 200cff8:	108000c4 	addi	r2,r2,3
 200cffc:	1005d0ba 	srai	r2,r2,2
 200d000:	100b883a 	mov	r5,r2
 200d004:	00800044 	movi	r2,1
 200d008:	1144983a 	sll	r2,r2,r5
 200d00c:	2084b03a 	or	r2,r4,r2
 200d010:	18800115 	stw	r2,4(r3)
 200d014:	e0bffd17 	ldw	r2,-12(fp)
 200d018:	10800044 	addi	r2,r2,1
 200d01c:	1085883a 	add	r2,r2,r2
 200d020:	1085883a 	add	r2,r2,r2
 200d024:	1087883a 	add	r3,r2,r2
 200d028:	008080b4 	movhi	r2,514
 200d02c:	1088fb04 	addi	r2,r2,9196
 200d030:	1885883a 	add	r2,r3,r2
 200d034:	10bffe04 	addi	r2,r2,-8
 200d038:	e0bff615 	stw	r2,-40(fp)
 200d03c:	e0bff617 	ldw	r2,-40(fp)
 200d040:	10800217 	ldw	r2,8(r2)
 200d044:	e0bff715 	stw	r2,-36(fp)
 200d048:	e0bff417 	ldw	r2,-48(fp)
 200d04c:	e0fff617 	ldw	r3,-40(fp)
 200d050:	10c00315 	stw	r3,12(r2)
 200d054:	e0bff417 	ldw	r2,-48(fp)
 200d058:	e0fff717 	ldw	r3,-36(fp)
 200d05c:	10c00215 	stw	r3,8(r2)
 200d060:	e0bff617 	ldw	r2,-40(fp)
 200d064:	e0fff417 	ldw	r3,-48(fp)
 200d068:	10c00215 	stw	r3,8(r2)
 200d06c:	e0bff617 	ldw	r2,-40(fp)
 200d070:	10c00217 	ldw	r3,8(r2)
 200d074:	e0bff717 	ldw	r2,-36(fp)
 200d078:	10c00315 	stw	r3,12(r2)
 200d07c:	00006b06 	br	200d22c <_free_r+0x53c>
 200d080:	e0bff517 	ldw	r2,-44(fp)
 200d084:	1004d27a 	srli	r2,r2,9
 200d088:	1000031e 	bne	r2,zero,200d098 <_free_r+0x3a8>
 200d08c:	e0bff517 	ldw	r2,-44(fp)
 200d090:	1004d0fa 	srli	r2,r2,3
 200d094:	00002906 	br	200d13c <_free_r+0x44c>
 200d098:	e0bff517 	ldw	r2,-44(fp)
 200d09c:	1004d27a 	srli	r2,r2,9
 200d0a0:	10800168 	cmpgeui	r2,r2,5
 200d0a4:	1000041e 	bne	r2,zero,200d0b8 <_free_r+0x3c8>
 200d0a8:	e0bff517 	ldw	r2,-44(fp)
 200d0ac:	1004d1ba 	srli	r2,r2,6
 200d0b0:	10800e04 	addi	r2,r2,56
 200d0b4:	00002106 	br	200d13c <_free_r+0x44c>
 200d0b8:	e0bff517 	ldw	r2,-44(fp)
 200d0bc:	1004d27a 	srli	r2,r2,9
 200d0c0:	10800568 	cmpgeui	r2,r2,21
 200d0c4:	1000041e 	bne	r2,zero,200d0d8 <_free_r+0x3e8>
 200d0c8:	e0bff517 	ldw	r2,-44(fp)
 200d0cc:	1004d27a 	srli	r2,r2,9
 200d0d0:	108016c4 	addi	r2,r2,91
 200d0d4:	00001906 	br	200d13c <_free_r+0x44c>
 200d0d8:	e0bff517 	ldw	r2,-44(fp)
 200d0dc:	1004d27a 	srli	r2,r2,9
 200d0e0:	10801568 	cmpgeui	r2,r2,85
 200d0e4:	1000041e 	bne	r2,zero,200d0f8 <_free_r+0x408>
 200d0e8:	e0bff517 	ldw	r2,-44(fp)
 200d0ec:	1004d33a 	srli	r2,r2,12
 200d0f0:	10801b84 	addi	r2,r2,110
 200d0f4:	00001106 	br	200d13c <_free_r+0x44c>
 200d0f8:	e0bff517 	ldw	r2,-44(fp)
 200d0fc:	1004d27a 	srli	r2,r2,9
 200d100:	10805568 	cmpgeui	r2,r2,341
 200d104:	1000041e 	bne	r2,zero,200d118 <_free_r+0x428>
 200d108:	e0bff517 	ldw	r2,-44(fp)
 200d10c:	1004d3fa 	srli	r2,r2,15
 200d110:	10801dc4 	addi	r2,r2,119
 200d114:	00000906 	br	200d13c <_free_r+0x44c>
 200d118:	e0bff517 	ldw	r2,-44(fp)
 200d11c:	1004d27a 	srli	r2,r2,9
 200d120:	10815568 	cmpgeui	r2,r2,1365
 200d124:	1000041e 	bne	r2,zero,200d138 <_free_r+0x448>
 200d128:	e0bff517 	ldw	r2,-44(fp)
 200d12c:	1004d4ba 	srli	r2,r2,18
 200d130:	10801f04 	addi	r2,r2,124
 200d134:	00000106 	br	200d13c <_free_r+0x44c>
 200d138:	00801f84 	movi	r2,126
 200d13c:	e0bffd15 	stw	r2,-12(fp)
 200d140:	e0bffd17 	ldw	r2,-12(fp)
 200d144:	10800044 	addi	r2,r2,1
 200d148:	1085883a 	add	r2,r2,r2
 200d14c:	1085883a 	add	r2,r2,r2
 200d150:	1087883a 	add	r3,r2,r2
 200d154:	008080b4 	movhi	r2,514
 200d158:	1088fb04 	addi	r2,r2,9196
 200d15c:	1885883a 	add	r2,r3,r2
 200d160:	10bffe04 	addi	r2,r2,-8
 200d164:	e0bff615 	stw	r2,-40(fp)
 200d168:	e0bff617 	ldw	r2,-40(fp)
 200d16c:	10800217 	ldw	r2,8(r2)
 200d170:	e0bff715 	stw	r2,-36(fp)
 200d174:	e0fff717 	ldw	r3,-36(fp)
 200d178:	e0bff617 	ldw	r2,-40(fp)
 200d17c:	1880121e 	bne	r3,r2,200d1c8 <_free_r+0x4d8>
 200d180:	00c080b4 	movhi	r3,514
 200d184:	18c8fb04 	addi	r3,r3,9196
 200d188:	008080b4 	movhi	r2,514
 200d18c:	1088fb04 	addi	r2,r2,9196
 200d190:	11000117 	ldw	r4,4(r2)
 200d194:	e0bffd17 	ldw	r2,-12(fp)
 200d198:	1000010e 	bge	r2,zero,200d1a0 <_free_r+0x4b0>
 200d19c:	108000c4 	addi	r2,r2,3
 200d1a0:	1005d0ba 	srai	r2,r2,2
 200d1a4:	100b883a 	mov	r5,r2
 200d1a8:	00800044 	movi	r2,1
 200d1ac:	1144983a 	sll	r2,r2,r5
 200d1b0:	2084b03a 	or	r2,r4,r2
 200d1b4:	18800115 	stw	r2,4(r3)
 200d1b8:	00000f06 	br	200d1f8 <_free_r+0x508>
 200d1bc:	e0bff717 	ldw	r2,-36(fp)
 200d1c0:	10800217 	ldw	r2,8(r2)
 200d1c4:	e0bff715 	stw	r2,-36(fp)
 200d1c8:	e0fff717 	ldw	r3,-36(fp)
 200d1cc:	e0bff617 	ldw	r2,-40(fp)
 200d1d0:	18800626 	beq	r3,r2,200d1ec <_free_r+0x4fc>
 200d1d4:	e0bff717 	ldw	r2,-36(fp)
 200d1d8:	10c00117 	ldw	r3,4(r2)
 200d1dc:	00bfff04 	movi	r2,-4
 200d1e0:	1884703a 	and	r2,r3,r2
 200d1e4:	e0fff517 	ldw	r3,-44(fp)
 200d1e8:	18bff436 	bltu	r3,r2,200d1bc <_free_r+0x4cc>
 200d1ec:	e0bff717 	ldw	r2,-36(fp)
 200d1f0:	10800317 	ldw	r2,12(r2)
 200d1f4:	e0bff615 	stw	r2,-40(fp)
 200d1f8:	e0bff417 	ldw	r2,-48(fp)
 200d1fc:	e0fff617 	ldw	r3,-40(fp)
 200d200:	10c00315 	stw	r3,12(r2)
 200d204:	e0bff417 	ldw	r2,-48(fp)
 200d208:	e0fff717 	ldw	r3,-36(fp)
 200d20c:	10c00215 	stw	r3,8(r2)
 200d210:	e0bff617 	ldw	r2,-40(fp)
 200d214:	e0fff417 	ldw	r3,-48(fp)
 200d218:	10c00215 	stw	r3,8(r2)
 200d21c:	e0bff617 	ldw	r2,-40(fp)
 200d220:	10c00217 	ldw	r3,8(r2)
 200d224:	e0bff717 	ldw	r2,-36(fp)
 200d228:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 200d22c:	e13ffe17 	ldw	r4,-8(fp)
 200d230:	201685c0 	call	201685c <__malloc_unlock>
 200d234:	00000106 	br	200d23c <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 200d238:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 200d23c:	e037883a 	mov	sp,fp
 200d240:	dfc00117 	ldw	ra,4(sp)
 200d244:	df000017 	ldw	fp,0(sp)
 200d248:	dec00204 	addi	sp,sp,8
 200d24c:	f800283a 	ret

0200d250 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 200d250:	defff704 	addi	sp,sp,-36
 200d254:	dfc00815 	stw	ra,32(sp)
 200d258:	df000715 	stw	fp,28(sp)
 200d25c:	df000704 	addi	fp,sp,28
 200d260:	e13ffe15 	stw	r4,-8(fp)
 200d264:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 200d268:	00840004 	movi	r2,4096
 200d26c:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 200d270:	e13ffe17 	ldw	r4,-8(fp)
 200d274:	201673c0 	call	201673c <__malloc_lock>

  top_size = chunksize(top);
 200d278:	008080b4 	movhi	r2,514
 200d27c:	1088fb04 	addi	r2,r2,9196
 200d280:	10800217 	ldw	r2,8(r2)
 200d284:	10800117 	ldw	r2,4(r2)
 200d288:	1007883a 	mov	r3,r2
 200d28c:	00bfff04 	movi	r2,-4
 200d290:	1884703a 	and	r2,r3,r2
 200d294:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 200d298:	e0fffa17 	ldw	r3,-24(fp)
 200d29c:	e0bfff17 	ldw	r2,-4(fp)
 200d2a0:	1887c83a 	sub	r3,r3,r2
 200d2a4:	e0bff917 	ldw	r2,-28(fp)
 200d2a8:	1885883a 	add	r2,r3,r2
 200d2ac:	10bffbc4 	addi	r2,r2,-17
 200d2b0:	e17ff917 	ldw	r5,-28(fp)
 200d2b4:	1009883a 	mov	r4,r2
 200d2b8:	20075ec0 	call	20075ec <__udivsi3>
 200d2bc:	10ffffc4 	addi	r3,r2,-1
 200d2c0:	e0bff917 	ldw	r2,-28(fp)
 200d2c4:	1885383a 	mul	r2,r3,r2
 200d2c8:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 200d2cc:	e0bff917 	ldw	r2,-28(fp)
 200d2d0:	e0fffb17 	ldw	r3,-20(fp)
 200d2d4:	1880040e 	bge	r3,r2,200d2e8 <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 200d2d8:	e13ffe17 	ldw	r4,-8(fp)
 200d2dc:	201685c0 	call	201685c <__malloc_unlock>
    return 0;
 200d2e0:	0005883a 	mov	r2,zero
 200d2e4:	00004806 	br	200d408 <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 200d2e8:	000b883a 	mov	r5,zero
 200d2ec:	e13ffe17 	ldw	r4,-8(fp)
 200d2f0:	20118d80 	call	20118d8 <_sbrk_r>
 200d2f4:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 200d2f8:	008080b4 	movhi	r2,514
 200d2fc:	1088fb04 	addi	r2,r2,9196
 200d300:	10c00217 	ldw	r3,8(r2)
 200d304:	e0bffa17 	ldw	r2,-24(fp)
 200d308:	1887883a 	add	r3,r3,r2
 200d30c:	e0bffc17 	ldw	r2,-16(fp)
 200d310:	18800426 	beq	r3,r2,200d324 <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 200d314:	e13ffe17 	ldw	r4,-8(fp)
 200d318:	201685c0 	call	201685c <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 200d31c:	0005883a 	mov	r2,zero
 200d320:	00003906 	br	200d408 <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 200d324:	e0bffb17 	ldw	r2,-20(fp)
 200d328:	0085c83a 	sub	r2,zero,r2
 200d32c:	100b883a 	mov	r5,r2
 200d330:	e13ffe17 	ldw	r4,-8(fp)
 200d334:	20118d80 	call	20118d8 <_sbrk_r>
 200d338:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 200d33c:	e0bffd17 	ldw	r2,-12(fp)
 200d340:	10bfffd8 	cmpnei	r2,r2,-1
 200d344:	10001d1e 	bne	r2,zero,200d3bc <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 200d348:	000b883a 	mov	r5,zero
 200d34c:	e13ffe17 	ldw	r4,-8(fp)
 200d350:	20118d80 	call	20118d8 <_sbrk_r>
 200d354:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 200d358:	e0fffc17 	ldw	r3,-16(fp)
 200d35c:	008080b4 	movhi	r2,514
 200d360:	1088fb04 	addi	r2,r2,9196
 200d364:	10800217 	ldw	r2,8(r2)
 200d368:	1885c83a 	sub	r2,r3,r2
 200d36c:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 200d370:	e0bffa17 	ldw	r2,-24(fp)
 200d374:	10800410 	cmplti	r2,r2,16
 200d378:	10000c1e 	bne	r2,zero,200d3ac <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 200d37c:	e0bffc17 	ldw	r2,-16(fp)
 200d380:	d0e03217 	ldw	r3,-32568(gp)
 200d384:	10c7c83a 	sub	r3,r2,r3
 200d388:	008080b4 	movhi	r2,514
 200d38c:	10964404 	addi	r2,r2,22800
 200d390:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 200d394:	008080b4 	movhi	r2,514
 200d398:	1088fb04 	addi	r2,r2,9196
 200d39c:	10800217 	ldw	r2,8(r2)
 200d3a0:	e0fffa17 	ldw	r3,-24(fp)
 200d3a4:	18c00054 	ori	r3,r3,1
 200d3a8:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 200d3ac:	e13ffe17 	ldw	r4,-8(fp)
 200d3b0:	201685c0 	call	201685c <__malloc_unlock>
        return 0; 
 200d3b4:	0005883a 	mov	r2,zero
 200d3b8:	00001306 	br	200d408 <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 200d3bc:	008080b4 	movhi	r2,514
 200d3c0:	1088fb04 	addi	r2,r2,9196
 200d3c4:	10800217 	ldw	r2,8(r2)
 200d3c8:	e13ffa17 	ldw	r4,-24(fp)
 200d3cc:	e0fffb17 	ldw	r3,-20(fp)
 200d3d0:	20c7c83a 	sub	r3,r4,r3
 200d3d4:	18c00054 	ori	r3,r3,1
 200d3d8:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 200d3dc:	008080b4 	movhi	r2,514
 200d3e0:	10964404 	addi	r2,r2,22800
 200d3e4:	10c00017 	ldw	r3,0(r2)
 200d3e8:	e0bffb17 	ldw	r2,-20(fp)
 200d3ec:	1887c83a 	sub	r3,r3,r2
 200d3f0:	008080b4 	movhi	r2,514
 200d3f4:	10964404 	addi	r2,r2,22800
 200d3f8:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 200d3fc:	e13ffe17 	ldw	r4,-8(fp)
 200d400:	201685c0 	call	201685c <__malloc_unlock>
        return 1;
 200d404:	00800044 	movi	r2,1
      }
    }
  }
}
 200d408:	e037883a 	mov	sp,fp
 200d40c:	dfc00117 	ldw	ra,4(sp)
 200d410:	df000017 	ldw	fp,0(sp)
 200d414:	dec00204 	addi	sp,sp,8
 200d418:	f800283a 	ret

0200d41c <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 200d41c:	defff004 	addi	sp,sp,-64
 200d420:	dfc00f15 	stw	ra,60(sp)
 200d424:	df000e15 	stw	fp,56(sp)
 200d428:	dd800d15 	stw	r22,52(sp)
 200d42c:	dd400c15 	stw	r21,48(sp)
 200d430:	dd000b15 	stw	r20,44(sp)
 200d434:	dcc00a15 	stw	r19,40(sp)
 200d438:	dc800915 	stw	r18,36(sp)
 200d43c:	dc400815 	stw	r17,32(sp)
 200d440:	dc000715 	stw	r16,28(sp)
 200d444:	df000e04 	addi	fp,sp,56
 200d448:	e13ff815 	stw	r4,-32(fp)
 200d44c:	2821883a 	mov	r16,r5
 200d450:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 200d454:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 200d458:	ac800217 	ldw	r18,8(r21)
 200d45c:	9000021e 	bne	r18,zero,200d468 <__sfvwrite_r+0x4c>
    return 0;
 200d460:	0005883a 	mov	r2,zero
 200d464:	00015806 	br	200d9c8 <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 200d468:	8080030b 	ldhu	r2,12(r16)
 200d46c:	10bfffcc 	andi	r2,r2,65535
 200d470:	1080020c 	andi	r2,r2,8
 200d474:	10000226 	beq	r2,zero,200d480 <__sfvwrite_r+0x64>
 200d478:	80800417 	ldw	r2,16(r16)
 200d47c:	1000061e 	bne	r2,zero,200d498 <__sfvwrite_r+0x7c>
 200d480:	800b883a 	mov	r5,r16
 200d484:	e13ff817 	ldw	r4,-32(fp)
 200d488:	200a2800 	call	200a280 <__swsetup_r>
 200d48c:	10000226 	beq	r2,zero,200d498 <__sfvwrite_r+0x7c>
    return EOF;
 200d490:	00bfffc4 	movi	r2,-1
 200d494:	00014c06 	br	200d9c8 <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 200d498:	ad000017 	ldw	r20,0(r21)
  len = 0;
 200d49c:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 200d4a0:	8080030b 	ldhu	r2,12(r16)
 200d4a4:	10bfffcc 	andi	r2,r2,65535
 200d4a8:	1080008c 	andi	r2,r2,2
 200d4ac:	10001f26 	beq	r2,zero,200d52c <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 200d4b0:	00000306 	br	200d4c0 <__sfvwrite_r+0xa4>
 200d4b4:	a4c00017 	ldw	r19,0(r20)
 200d4b8:	a4800117 	ldw	r18,4(r20)
 200d4bc:	a5000204 	addi	r20,r20,8
 200d4c0:	903ffc26 	beq	r18,zero,200d4b4 <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 200d4c4:	82000917 	ldw	r8,36(r16)
 200d4c8:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 200d4cc:	9005883a 	mov	r2,r18
 200d4d0:	00e00034 	movhi	r3,32768
 200d4d4:	18ff0004 	addi	r3,r3,-1024
 200d4d8:	1880022e 	bgeu	r3,r2,200d4e4 <__sfvwrite_r+0xc8>
 200d4dc:	00a00034 	movhi	r2,32768
 200d4e0:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 200d4e4:	100f883a 	mov	r7,r2
 200d4e8:	980d883a 	mov	r6,r19
 200d4ec:	200b883a 	mov	r5,r4
 200d4f0:	e13ff817 	ldw	r4,-32(fp)
 200d4f4:	403ee83a 	callr	r8
 200d4f8:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 200d4fc:	0441290e 	bge	zero,r17,200d9a4 <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 200d500:	8805883a 	mov	r2,r17
 200d504:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200d508:	8805883a 	mov	r2,r17
 200d50c:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200d510:	a8800217 	ldw	r2,8(r21)
 200d514:	8807883a 	mov	r3,r17
 200d518:	10c5c83a 	sub	r2,r2,r3
 200d51c:	a8800215 	stw	r2,8(r21)
 200d520:	a8800217 	ldw	r2,8(r21)
 200d524:	103fe61e 	bne	r2,zero,200d4c0 <__sfvwrite_r+0xa4>
 200d528:	00011c06 	br	200d99c <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 200d52c:	8080030b 	ldhu	r2,12(r16)
 200d530:	10bfffcc 	andi	r2,r2,65535
 200d534:	1080004c 	andi	r2,r2,1
 200d538:	1000b51e 	bne	r2,zero,200d810 <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 200d53c:	00000306 	br	200d54c <__sfvwrite_r+0x130>
 200d540:	a4c00017 	ldw	r19,0(r20)
 200d544:	a4800117 	ldw	r18,4(r20)
 200d548:	a5000204 	addi	r20,r20,8
 200d54c:	903ffc26 	beq	r18,zero,200d540 <__sfvwrite_r+0x124>
	  w = fp->_w;
 200d550:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 200d554:	8080030b 	ldhu	r2,12(r16)
 200d558:	10bfffcc 	andi	r2,r2,65535
 200d55c:	1080800c 	andi	r2,r2,512
 200d560:	10006b26 	beq	r2,zero,200d710 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 200d564:	8805883a 	mov	r2,r17
 200d568:	90805736 	bltu	r18,r2,200d6c8 <__sfvwrite_r+0x2ac>
 200d56c:	8080030b 	ldhu	r2,12(r16)
 200d570:	10bfffcc 	andi	r2,r2,65535
 200d574:	1081200c 	andi	r2,r2,1152
 200d578:	10005326 	beq	r2,zero,200d6c8 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 200d57c:	80800017 	ldw	r2,0(r16)
 200d580:	1007883a 	mov	r3,r2
 200d584:	80800417 	ldw	r2,16(r16)
 200d588:	1885c83a 	sub	r2,r3,r2
 200d58c:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 200d590:	80c00517 	ldw	r3,20(r16)
 200d594:	1805883a 	mov	r2,r3
 200d598:	1085883a 	add	r2,r2,r2
 200d59c:	10c5883a 	add	r2,r2,r3
 200d5a0:	1006d7fa 	srli	r3,r2,31
 200d5a4:	1885883a 	add	r2,r3,r2
 200d5a8:	1005d07a 	srai	r2,r2,1
 200d5ac:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 200d5b0:	e0bff617 	ldw	r2,-40(fp)
 200d5b4:	1485883a 	add	r2,r2,r18
 200d5b8:	10800044 	addi	r2,r2,1
 200d5bc:	e0fff517 	ldw	r3,-44(fp)
 200d5c0:	1880042e 	bgeu	r3,r2,200d5d4 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 200d5c4:	e0bff617 	ldw	r2,-40(fp)
 200d5c8:	1485883a 	add	r2,r2,r18
 200d5cc:	10800044 	addi	r2,r2,1
 200d5d0:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 200d5d4:	8080030b 	ldhu	r2,12(r16)
 200d5d8:	10bfffcc 	andi	r2,r2,65535
 200d5dc:	1081000c 	andi	r2,r2,1024
 200d5e0:	10001726 	beq	r2,zero,200d640 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 200d5e4:	e0bff517 	ldw	r2,-44(fp)
 200d5e8:	100b883a 	mov	r5,r2
 200d5ec:	e13ff817 	ldw	r4,-32(fp)
 200d5f0:	200e3300 	call	200e330 <_malloc_r>
 200d5f4:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 200d5f8:	e0bff417 	ldw	r2,-48(fp)
 200d5fc:	1000041e 	bne	r2,zero,200d610 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 200d600:	e0bff817 	ldw	r2,-32(fp)
 200d604:	00c00304 	movi	r3,12
 200d608:	10c00015 	stw	r3,0(r2)
			  goto err;
 200d60c:	0000ea06 	br	200d9b8 <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 200d610:	80800417 	ldw	r2,16(r16)
 200d614:	e0fff617 	ldw	r3,-40(fp)
 200d618:	180d883a 	mov	r6,r3
 200d61c:	100b883a 	mov	r5,r2
 200d620:	e13ff417 	ldw	r4,-48(fp)
 200d624:	20076c80 	call	20076c8 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 200d628:	80c0030b 	ldhu	r3,12(r16)
 200d62c:	00bedfc4 	movi	r2,-1153
 200d630:	1884703a 	and	r2,r3,r2
 200d634:	10802014 	ori	r2,r2,128
 200d638:	8080030d 	sth	r2,12(r16)
 200d63c:	00001506 	br	200d694 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 200d640:	80800417 	ldw	r2,16(r16)
 200d644:	e0fff517 	ldw	r3,-44(fp)
 200d648:	180d883a 	mov	r6,r3
 200d64c:	100b883a 	mov	r5,r2
 200d650:	e13ff817 	ldw	r4,-32(fp)
 200d654:	2010ce80 	call	2010ce8 <_realloc_r>
 200d658:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 200d65c:	e0bff417 	ldw	r2,-48(fp)
 200d660:	10000c1e 	bne	r2,zero,200d694 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 200d664:	80800417 	ldw	r2,16(r16)
 200d668:	100b883a 	mov	r5,r2
 200d66c:	e13ff817 	ldw	r4,-32(fp)
 200d670:	200ccf00 	call	200ccf0 <_free_r>
			  fp->_flags &=  ~__SMBF;
 200d674:	80c0030b 	ldhu	r3,12(r16)
 200d678:	00bfdfc4 	movi	r2,-129
 200d67c:	1884703a 	and	r2,r3,r2
 200d680:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 200d684:	e0bff817 	ldw	r2,-32(fp)
 200d688:	00c00304 	movi	r3,12
 200d68c:	10c00015 	stw	r3,0(r2)
			  goto err;
 200d690:	0000c906 	br	200d9b8 <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 200d694:	e0bff417 	ldw	r2,-48(fp)
 200d698:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 200d69c:	e0bff617 	ldw	r2,-40(fp)
 200d6a0:	e0fff417 	ldw	r3,-48(fp)
 200d6a4:	1885883a 	add	r2,r3,r2
 200d6a8:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 200d6ac:	e0bff517 	ldw	r2,-44(fp)
 200d6b0:	80800515 	stw	r2,20(r16)
		  w = len;
 200d6b4:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 200d6b8:	e0fff517 	ldw	r3,-44(fp)
 200d6bc:	e0bff617 	ldw	r2,-40(fp)
 200d6c0:	1885c83a 	sub	r2,r3,r2
 200d6c4:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 200d6c8:	8805883a 	mov	r2,r17
 200d6cc:	9080012e 	bgeu	r18,r2,200d6d4 <__sfvwrite_r+0x2b8>
		w = len;
 200d6d0:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 200d6d4:	80800017 	ldw	r2,0(r16)
 200d6d8:	8807883a 	mov	r3,r17
 200d6dc:	180d883a 	mov	r6,r3
 200d6e0:	980b883a 	mov	r5,r19
 200d6e4:	1009883a 	mov	r4,r2
 200d6e8:	200f0680 	call	200f068 <memmove>
	      fp->_w -= w;
 200d6ec:	80800217 	ldw	r2,8(r16)
 200d6f0:	1445c83a 	sub	r2,r2,r17
 200d6f4:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200d6f8:	80800017 	ldw	r2,0(r16)
 200d6fc:	8807883a 	mov	r3,r17
 200d700:	10c5883a 	add	r2,r2,r3
 200d704:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 200d708:	9023883a 	mov	r17,r18
 200d70c:	00003506 	br	200d7e4 <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 200d710:	80800017 	ldw	r2,0(r16)
 200d714:	80c00417 	ldw	r3,16(r16)
 200d718:	18800236 	bltu	r3,r2,200d724 <__sfvwrite_r+0x308>
 200d71c:	80800517 	ldw	r2,20(r16)
 200d720:	9080182e 	bgeu	r18,r2,200d784 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 200d724:	8805883a 	mov	r2,r17
 200d728:	9080012e 	bgeu	r18,r2,200d730 <__sfvwrite_r+0x314>
 200d72c:	9005883a 	mov	r2,r18
 200d730:	1023883a 	mov	r17,r2
	      COPY (w);
 200d734:	80800017 	ldw	r2,0(r16)
 200d738:	8807883a 	mov	r3,r17
 200d73c:	180d883a 	mov	r6,r3
 200d740:	980b883a 	mov	r5,r19
 200d744:	1009883a 	mov	r4,r2
 200d748:	200f0680 	call	200f068 <memmove>
	      fp->_w -= w;
 200d74c:	80800217 	ldw	r2,8(r16)
 200d750:	1445c83a 	sub	r2,r2,r17
 200d754:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200d758:	80800017 	ldw	r2,0(r16)
 200d75c:	8807883a 	mov	r3,r17
 200d760:	10c5883a 	add	r2,r2,r3
 200d764:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200d768:	80800217 	ldw	r2,8(r16)
 200d76c:	10001c1e 	bne	r2,zero,200d7e0 <__sfvwrite_r+0x3c4>
 200d770:	800b883a 	mov	r5,r16
 200d774:	e13ff817 	ldw	r4,-32(fp)
 200d778:	200c6500 	call	200c650 <_fflush_r>
 200d77c:	10001826 	beq	r2,zero,200d7e0 <__sfvwrite_r+0x3c4>
		goto err;
 200d780:	00008d06 	br	200d9b8 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 200d784:	9005883a 	mov	r2,r18
 200d788:	00e00034 	movhi	r3,32768
 200d78c:	10c00236 	bltu	r2,r3,200d798 <__sfvwrite_r+0x37c>
 200d790:	00a00034 	movhi	r2,32768
 200d794:	10bfffc4 	addi	r2,r2,-1
 200d798:	1007883a 	mov	r3,r2
 200d79c:	80800517 	ldw	r2,20(r16)
 200d7a0:	100b883a 	mov	r5,r2
 200d7a4:	1809883a 	mov	r4,r3
 200d7a8:	20074f40 	call	20074f4 <__divsi3>
 200d7ac:	1007883a 	mov	r3,r2
 200d7b0:	80800517 	ldw	r2,20(r16)
 200d7b4:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200d7b8:	80800917 	ldw	r2,36(r16)
 200d7bc:	80c00717 	ldw	r3,28(r16)
 200d7c0:	880f883a 	mov	r7,r17
 200d7c4:	980d883a 	mov	r6,r19
 200d7c8:	180b883a 	mov	r5,r3
 200d7cc:	e13ff817 	ldw	r4,-32(fp)
 200d7d0:	103ee83a 	callr	r2
 200d7d4:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200d7d8:	0440740e 	bge	zero,r17,200d9ac <__sfvwrite_r+0x590>
 200d7dc:	00000106 	br	200d7e4 <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200d7e0:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 200d7e4:	8805883a 	mov	r2,r17
 200d7e8:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200d7ec:	8805883a 	mov	r2,r17
 200d7f0:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200d7f4:	a8800217 	ldw	r2,8(r21)
 200d7f8:	8807883a 	mov	r3,r17
 200d7fc:	10c5c83a 	sub	r2,r2,r3
 200d800:	a8800215 	stw	r2,8(r21)
 200d804:	a8800217 	ldw	r2,8(r21)
 200d808:	103f501e 	bne	r2,zero,200d54c <__sfvwrite_r+0x130>
 200d80c:	00006306 	br	200d99c <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 200d810:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 200d814:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 200d818:	00000406 	br	200d82c <__sfvwrite_r+0x410>
 200d81c:	e03ff215 	stw	zero,-56(fp)
 200d820:	a4c00017 	ldw	r19,0(r20)
 200d824:	a4800117 	ldw	r18,4(r20)
 200d828:	a5000204 	addi	r20,r20,8
 200d82c:	903ffb26 	beq	r18,zero,200d81c <__sfvwrite_r+0x400>
	  if (!nlknown)
 200d830:	e0bff217 	ldw	r2,-56(fp)
 200d834:	1000111e 	bne	r2,zero,200d87c <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 200d838:	900d883a 	mov	r6,r18
 200d83c:	01400284 	movi	r5,10
 200d840:	9809883a 	mov	r4,r19
 200d844:	200eeac0 	call	200eeac <memchr>
 200d848:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 200d84c:	e0bff717 	ldw	r2,-36(fp)
 200d850:	10000626 	beq	r2,zero,200d86c <__sfvwrite_r+0x450>
 200d854:	e0bff717 	ldw	r2,-36(fp)
 200d858:	10800044 	addi	r2,r2,1
 200d85c:	1007883a 	mov	r3,r2
 200d860:	9805883a 	mov	r2,r19
 200d864:	1885c83a 	sub	r2,r3,r2
 200d868:	00000106 	br	200d870 <__sfvwrite_r+0x454>
 200d86c:	90800044 	addi	r2,r18,1
 200d870:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 200d874:	00800044 	movi	r2,1
 200d878:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 200d87c:	e0bff317 	ldw	r2,-52(fp)
 200d880:	9080012e 	bgeu	r18,r2,200d888 <__sfvwrite_r+0x46c>
 200d884:	9005883a 	mov	r2,r18
 200d888:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 200d88c:	80c00217 	ldw	r3,8(r16)
 200d890:	80800517 	ldw	r2,20(r16)
 200d894:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 200d898:	80800017 	ldw	r2,0(r16)
 200d89c:	80c00417 	ldw	r3,16(r16)
 200d8a0:	1880102e 	bgeu	r3,r2,200d8e4 <__sfvwrite_r+0x4c8>
 200d8a4:	8d800f0e 	bge	r17,r22,200d8e4 <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 200d8a8:	80800017 	ldw	r2,0(r16)
 200d8ac:	8807883a 	mov	r3,r17
 200d8b0:	180d883a 	mov	r6,r3
 200d8b4:	980b883a 	mov	r5,r19
 200d8b8:	1009883a 	mov	r4,r2
 200d8bc:	200f0680 	call	200f068 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 200d8c0:	80800017 	ldw	r2,0(r16)
 200d8c4:	8807883a 	mov	r3,r17
 200d8c8:	10c5883a 	add	r2,r2,r3
 200d8cc:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 200d8d0:	800b883a 	mov	r5,r16
 200d8d4:	e13ff817 	ldw	r4,-32(fp)
 200d8d8:	200c6500 	call	200c650 <_fflush_r>
 200d8dc:	10001b26 	beq	r2,zero,200d94c <__sfvwrite_r+0x530>
		goto err;
 200d8e0:	00003506 	br	200d9b8 <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 200d8e4:	84400517 	ldw	r17,20(r16)
 200d8e8:	b4400a16 	blt	r22,r17,200d914 <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200d8ec:	80800917 	ldw	r2,36(r16)
 200d8f0:	80c00717 	ldw	r3,28(r16)
 200d8f4:	880f883a 	mov	r7,r17
 200d8f8:	980d883a 	mov	r6,r19
 200d8fc:	180b883a 	mov	r5,r3
 200d900:	e13ff817 	ldw	r4,-32(fp)
 200d904:	103ee83a 	callr	r2
 200d908:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200d90c:	04400f16 	blt	zero,r17,200d94c <__sfvwrite_r+0x530>
		goto err;
 200d910:	00002906 	br	200d9b8 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 200d914:	b023883a 	mov	r17,r22
	      COPY (w);
 200d918:	80800017 	ldw	r2,0(r16)
 200d91c:	8807883a 	mov	r3,r17
 200d920:	180d883a 	mov	r6,r3
 200d924:	980b883a 	mov	r5,r19
 200d928:	1009883a 	mov	r4,r2
 200d92c:	200f0680 	call	200f068 <memmove>
	      fp->_w -= w;
 200d930:	80800217 	ldw	r2,8(r16)
 200d934:	1445c83a 	sub	r2,r2,r17
 200d938:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200d93c:	80800017 	ldw	r2,0(r16)
 200d940:	8807883a 	mov	r3,r17
 200d944:	10c5883a 	add	r2,r2,r3
 200d948:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 200d94c:	e0bff317 	ldw	r2,-52(fp)
 200d950:	1445c83a 	sub	r2,r2,r17
 200d954:	e0bff315 	stw	r2,-52(fp)
 200d958:	e0bff317 	ldw	r2,-52(fp)
 200d95c:	1000051e 	bne	r2,zero,200d974 <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 200d960:	800b883a 	mov	r5,r16
 200d964:	e13ff817 	ldw	r4,-32(fp)
 200d968:	200c6500 	call	200c650 <_fflush_r>
 200d96c:	1000111e 	bne	r2,zero,200d9b4 <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 200d970:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 200d974:	8805883a 	mov	r2,r17
 200d978:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200d97c:	8805883a 	mov	r2,r17
 200d980:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200d984:	a8800217 	ldw	r2,8(r21)
 200d988:	8807883a 	mov	r3,r17
 200d98c:	10c5c83a 	sub	r2,r2,r3
 200d990:	a8800215 	stw	r2,8(r21)
 200d994:	a8800217 	ldw	r2,8(r21)
 200d998:	103fa41e 	bne	r2,zero,200d82c <__sfvwrite_r+0x410>
    }
  return 0;
 200d99c:	0005883a 	mov	r2,zero
 200d9a0:	00000906 	br	200d9c8 <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 200d9a4:	0001883a 	nop
 200d9a8:	00000306 	br	200d9b8 <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 200d9ac:	0001883a 	nop
 200d9b0:	00000106 	br	200d9b8 <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 200d9b4:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 200d9b8:	8080030b 	ldhu	r2,12(r16)
 200d9bc:	10801014 	ori	r2,r2,64
 200d9c0:	8080030d 	sth	r2,12(r16)
  return EOF;
 200d9c4:	00bfffc4 	movi	r2,-1
}
 200d9c8:	e6fff904 	addi	sp,fp,-28
 200d9cc:	dfc00817 	ldw	ra,32(sp)
 200d9d0:	df000717 	ldw	fp,28(sp)
 200d9d4:	dd800617 	ldw	r22,24(sp)
 200d9d8:	dd400517 	ldw	r21,20(sp)
 200d9dc:	dd000417 	ldw	r20,16(sp)
 200d9e0:	dcc00317 	ldw	r19,12(sp)
 200d9e4:	dc800217 	ldw	r18,8(sp)
 200d9e8:	dc400117 	ldw	r17,4(sp)
 200d9ec:	dc000017 	ldw	r16,0(sp)
 200d9f0:	dec00904 	addi	sp,sp,36
 200d9f4:	f800283a 	ret

0200d9f8 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 200d9f8:	defff804 	addi	sp,sp,-32
 200d9fc:	dfc00715 	stw	ra,28(sp)
 200da00:	df000615 	stw	fp,24(sp)
 200da04:	dd000515 	stw	r20,20(sp)
 200da08:	dcc00415 	stw	r19,16(sp)
 200da0c:	dc800315 	stw	r18,12(sp)
 200da10:	dc400215 	stw	r17,8(sp)
 200da14:	dc000115 	stw	r16,4(sp)
 200da18:	df000604 	addi	fp,sp,24
 200da1c:	e13ffa15 	stw	r4,-24(fp)
 200da20:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200da24:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200da28:	e0bffa17 	ldw	r2,-24(fp)
 200da2c:	1440b804 	addi	r17,r2,736
 200da30:	00001b06 	br	200daa0 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200da34:	8c000217 	ldw	r16,8(r17)
 200da38:	8c800117 	ldw	r18,4(r17)
 200da3c:	00001506 	br	200da94 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200da40:	8080030b 	ldhu	r2,12(r16)
 200da44:	10bfffcc 	andi	r2,r2,65535
 200da48:	10a0001c 	xori	r2,r2,32768
 200da4c:	10a00004 	addi	r2,r2,-32768
 200da50:	10000f26 	beq	r2,zero,200da90 <_fwalk+0x98>
 200da54:	8080030b 	ldhu	r2,12(r16)
 200da58:	10bfffcc 	andi	r2,r2,65535
 200da5c:	10a0001c 	xori	r2,r2,32768
 200da60:	10a00004 	addi	r2,r2,-32768
 200da64:	10800060 	cmpeqi	r2,r2,1
 200da68:	1000091e 	bne	r2,zero,200da90 <_fwalk+0x98>
 200da6c:	8080038b 	ldhu	r2,14(r16)
 200da70:	10bfffcc 	andi	r2,r2,65535
 200da74:	10a0001c 	xori	r2,r2,32768
 200da78:	10a00004 	addi	r2,r2,-32768
 200da7c:	10bfffe0 	cmpeqi	r2,r2,-1
 200da80:	1000031e 	bne	r2,zero,200da90 <_fwalk+0x98>
	ret |= (*function) (fp);
 200da84:	8009883a 	mov	r4,r16
 200da88:	a03ee83a 	callr	r20
 200da8c:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200da90:	84001a04 	addi	r16,r16,104
 200da94:	94bfffc4 	addi	r18,r18,-1
 200da98:	903fe90e 	bge	r18,zero,200da40 <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200da9c:	8c400017 	ldw	r17,0(r17)
 200daa0:	883fe41e 	bne	r17,zero,200da34 <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 200daa4:	9805883a 	mov	r2,r19
}
 200daa8:	e6fffb04 	addi	sp,fp,-20
 200daac:	dfc00617 	ldw	ra,24(sp)
 200dab0:	df000517 	ldw	fp,20(sp)
 200dab4:	dd000417 	ldw	r20,16(sp)
 200dab8:	dcc00317 	ldw	r19,12(sp)
 200dabc:	dc800217 	ldw	r18,8(sp)
 200dac0:	dc400117 	ldw	r17,4(sp)
 200dac4:	dc000017 	ldw	r16,0(sp)
 200dac8:	dec00704 	addi	sp,sp,28
 200dacc:	f800283a 	ret

0200dad0 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 200dad0:	defff804 	addi	sp,sp,-32
 200dad4:	dfc00715 	stw	ra,28(sp)
 200dad8:	df000615 	stw	fp,24(sp)
 200dadc:	dd000515 	stw	r20,20(sp)
 200dae0:	dcc00415 	stw	r19,16(sp)
 200dae4:	dc800315 	stw	r18,12(sp)
 200dae8:	dc400215 	stw	r17,8(sp)
 200daec:	dc000115 	stw	r16,4(sp)
 200daf0:	df000604 	addi	fp,sp,24
 200daf4:	e13ffa15 	stw	r4,-24(fp)
 200daf8:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200dafc:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200db00:	e0bffa17 	ldw	r2,-24(fp)
 200db04:	1440b804 	addi	r17,r2,736
 200db08:	00001c06 	br	200db7c <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200db0c:	8c000217 	ldw	r16,8(r17)
 200db10:	8c800117 	ldw	r18,4(r17)
 200db14:	00001606 	br	200db70 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200db18:	8080030b 	ldhu	r2,12(r16)
 200db1c:	10bfffcc 	andi	r2,r2,65535
 200db20:	10a0001c 	xori	r2,r2,32768
 200db24:	10a00004 	addi	r2,r2,-32768
 200db28:	10001026 	beq	r2,zero,200db6c <_fwalk_reent+0x9c>
 200db2c:	8080030b 	ldhu	r2,12(r16)
 200db30:	10bfffcc 	andi	r2,r2,65535
 200db34:	10a0001c 	xori	r2,r2,32768
 200db38:	10a00004 	addi	r2,r2,-32768
 200db3c:	10800060 	cmpeqi	r2,r2,1
 200db40:	10000a1e 	bne	r2,zero,200db6c <_fwalk_reent+0x9c>
 200db44:	8080038b 	ldhu	r2,14(r16)
 200db48:	10bfffcc 	andi	r2,r2,65535
 200db4c:	10a0001c 	xori	r2,r2,32768
 200db50:	10a00004 	addi	r2,r2,-32768
 200db54:	10bfffe0 	cmpeqi	r2,r2,-1
 200db58:	1000041e 	bne	r2,zero,200db6c <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 200db5c:	800b883a 	mov	r5,r16
 200db60:	e13ffa17 	ldw	r4,-24(fp)
 200db64:	a03ee83a 	callr	r20
 200db68:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200db6c:	84001a04 	addi	r16,r16,104
 200db70:	94bfffc4 	addi	r18,r18,-1
 200db74:	903fe80e 	bge	r18,zero,200db18 <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200db78:	8c400017 	ldw	r17,0(r17)
 200db7c:	883fe31e 	bne	r17,zero,200db0c <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 200db80:	9805883a 	mov	r2,r19
}
 200db84:	e6fffb04 	addi	sp,fp,-20
 200db88:	dfc00617 	ldw	ra,24(sp)
 200db8c:	df000517 	ldw	fp,20(sp)
 200db90:	dd000417 	ldw	r20,16(sp)
 200db94:	dcc00317 	ldw	r19,12(sp)
 200db98:	dc800217 	ldw	r18,8(sp)
 200db9c:	dc400117 	ldw	r17,4(sp)
 200dba0:	dc000017 	ldw	r16,0(sp)
 200dba4:	dec00704 	addi	sp,sp,28
 200dba8:	f800283a 	ret

0200dbac <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 200dbac:	defffb04 	addi	sp,sp,-20
 200dbb0:	dfc00415 	stw	ra,16(sp)
 200dbb4:	df000315 	stw	fp,12(sp)
 200dbb8:	df000304 	addi	fp,sp,12
 200dbbc:	e13ffd15 	stw	r4,-12(fp)
 200dbc0:	e17ffe15 	stw	r5,-8(fp)
 200dbc4:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 200dbc8:	e0bfff17 	ldw	r2,-4(fp)
 200dbcc:	10001126 	beq	r2,zero,200dc14 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 200dbd0:	014080b4 	movhi	r5,514
 200dbd4:	29470604 	addi	r5,r5,7192
 200dbd8:	e13fff17 	ldw	r4,-4(fp)
 200dbdc:	2011bac0 	call	2011bac <strcmp>
 200dbe0:	10000c26 	beq	r2,zero,200dc14 <_setlocale_r+0x68>
 200dbe4:	014080b4 	movhi	r5,514
 200dbe8:	29470804 	addi	r5,r5,7200
 200dbec:	e13fff17 	ldw	r4,-4(fp)
 200dbf0:	2011bac0 	call	2011bac <strcmp>
 200dbf4:	10000726 	beq	r2,zero,200dc14 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 200dbf8:	014080b4 	movhi	r5,514
 200dbfc:	29470504 	addi	r5,r5,7188
 200dc00:	e13fff17 	ldw	r4,-4(fp)
 200dc04:	2011bac0 	call	2011bac <strcmp>
 200dc08:	10000226 	beq	r2,zero,200dc14 <_setlocale_r+0x68>
        return NULL;
 200dc0c:	0005883a 	mov	r2,zero
 200dc10:	00000206 	br	200dc1c <_setlocale_r+0x70>
    }
  return "C";
 200dc14:	008080b4 	movhi	r2,514
 200dc18:	10870804 	addi	r2,r2,7200
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 200dc1c:	e037883a 	mov	sp,fp
 200dc20:	dfc00117 	ldw	ra,4(sp)
 200dc24:	df000017 	ldw	fp,0(sp)
 200dc28:	dec00204 	addi	sp,sp,8
 200dc2c:	f800283a 	ret

0200dc30 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 200dc30:	deffff04 	addi	sp,sp,-4
 200dc34:	df000015 	stw	fp,0(sp)
 200dc38:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 200dc3c:	008080b4 	movhi	r2,514
 200dc40:	1088eb04 	addi	r2,r2,9132
#endif
}
 200dc44:	e037883a 	mov	sp,fp
 200dc48:	df000017 	ldw	fp,0(sp)
 200dc4c:	dec00104 	addi	sp,sp,4
 200dc50:	f800283a 	ret

0200dc54 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 200dc54:	deffff04 	addi	sp,sp,-4
 200dc58:	df000015 	stw	fp,0(sp)
 200dc5c:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 200dc60:	d0a03017 	ldw	r2,-32576(gp)
#endif
}
 200dc64:	e037883a 	mov	sp,fp
 200dc68:	df000017 	ldw	fp,0(sp)
 200dc6c:	dec00104 	addi	sp,sp,4
 200dc70:	f800283a 	ret

0200dc74 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 200dc74:	deffff04 	addi	sp,sp,-4
 200dc78:	df000015 	stw	fp,0(sp)
 200dc7c:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 200dc80:	008080b4 	movhi	r2,514
 200dc84:	1088f304 	addi	r2,r2,9164
#endif
}
 200dc88:	e037883a 	mov	sp,fp
 200dc8c:	df000017 	ldw	fp,0(sp)
 200dc90:	dec00104 	addi	sp,sp,4
 200dc94:	f800283a 	ret

0200dc98 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 200dc98:	deffff04 	addi	sp,sp,-4
 200dc9c:	df000015 	stw	fp,0(sp)
 200dca0:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 200dca4:	d0a79117 	ldw	r2,-25020(gp)
}
 200dca8:	e037883a 	mov	sp,fp
 200dcac:	df000017 	ldw	fp,0(sp)
 200dcb0:	dec00104 	addi	sp,sp,4
 200dcb4:	f800283a 	ret

0200dcb8 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 200dcb8:	defffe04 	addi	sp,sp,-8
 200dcbc:	df000115 	stw	fp,4(sp)
 200dcc0:	df000104 	addi	fp,sp,4
 200dcc4:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 200dcc8:	008080b4 	movhi	r2,514
 200dccc:	1088dd04 	addi	r2,r2,9076
}
 200dcd0:	e037883a 	mov	sp,fp
 200dcd4:	df000017 	ldw	fp,0(sp)
 200dcd8:	dec00104 	addi	sp,sp,4
 200dcdc:	f800283a 	ret

0200dce0 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 200dce0:	defffc04 	addi	sp,sp,-16
 200dce4:	dfc00315 	stw	ra,12(sp)
 200dce8:	df000215 	stw	fp,8(sp)
 200dcec:	df000204 	addi	fp,sp,8
 200dcf0:	e13ffe15 	stw	r4,-8(fp)
 200dcf4:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 200dcf8:	d0a02e17 	ldw	r2,-32584(gp)
 200dcfc:	e1bfff17 	ldw	r6,-4(fp)
 200dd00:	e17ffe17 	ldw	r5,-8(fp)
 200dd04:	1009883a 	mov	r4,r2
 200dd08:	200dbac0 	call	200dbac <_setlocale_r>
}
 200dd0c:	e037883a 	mov	sp,fp
 200dd10:	dfc00117 	ldw	ra,4(sp)
 200dd14:	df000017 	ldw	fp,0(sp)
 200dd18:	dec00204 	addi	sp,sp,8
 200dd1c:	f800283a 	ret

0200dd20 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 200dd20:	defffe04 	addi	sp,sp,-8
 200dd24:	dfc00115 	stw	ra,4(sp)
 200dd28:	df000015 	stw	fp,0(sp)
 200dd2c:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 200dd30:	d0a02e17 	ldw	r2,-32584(gp)
 200dd34:	1009883a 	mov	r4,r2
 200dd38:	200dcb80 	call	200dcb8 <_localeconv_r>
}
 200dd3c:	e037883a 	mov	sp,fp
 200dd40:	dfc00117 	ldw	ra,4(sp)
 200dd44:	df000017 	ldw	fp,0(sp)
 200dd48:	dec00204 	addi	sp,sp,8
 200dd4c:	f800283a 	ret

0200dd50 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 200dd50:	deffea04 	addi	sp,sp,-88
 200dd54:	dfc01515 	stw	ra,84(sp)
 200dd58:	df001415 	stw	fp,80(sp)
 200dd5c:	dcc01315 	stw	r19,76(sp)
 200dd60:	dc801215 	stw	r18,72(sp)
 200dd64:	dc401115 	stw	r17,68(sp)
 200dd68:	dc001015 	stw	r16,64(sp)
 200dd6c:	df001404 	addi	fp,sp,80
 200dd70:	e13ffb15 	stw	r4,-20(fp)
 200dd74:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 200dd78:	8080030b 	ldhu	r2,12(r16)
 200dd7c:	10bfffcc 	andi	r2,r2,65535
 200dd80:	1080008c 	andi	r2,r2,2
 200dd84:	10000726 	beq	r2,zero,200dda4 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 200dd88:	808010c4 	addi	r2,r16,67
 200dd8c:	80800015 	stw	r2,0(r16)
 200dd90:	80800017 	ldw	r2,0(r16)
 200dd94:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 200dd98:	00800044 	movi	r2,1
 200dd9c:	80800515 	stw	r2,20(r16)
 200dda0:	00006d06 	br	200df58 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 200dda4:	8080038b 	ldhu	r2,14(r16)
 200dda8:	10bfffcc 	andi	r2,r2,65535
 200ddac:	10a0001c 	xori	r2,r2,32768
 200ddb0:	10a00004 	addi	r2,r2,-32768
 200ddb4:	10000916 	blt	r2,zero,200dddc <__smakebuf_r+0x8c>
 200ddb8:	8080038b 	ldhu	r2,14(r16)
 200ddbc:	10bfffcc 	andi	r2,r2,65535
 200ddc0:	10a0001c 	xori	r2,r2,32768
 200ddc4:	10a00004 	addi	r2,r2,-32768
 200ddc8:	e1bfec04 	addi	r6,fp,-80
 200ddcc:	100b883a 	mov	r5,r2
 200ddd0:	e13ffb17 	ldw	r4,-20(fp)
 200ddd4:	20138a80 	call	20138a8 <_fstat_r>
 200ddd8:	10000c0e 	bge	r2,zero,200de0c <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 200dddc:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 200dde0:	8080030b 	ldhu	r2,12(r16)
 200dde4:	10bfffcc 	andi	r2,r2,65535
 200dde8:	1080200c 	andi	r2,r2,128
 200ddec:	10000226 	beq	r2,zero,200ddf8 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 200ddf0:	04401004 	movi	r17,64
 200ddf4:	00000106 	br	200ddfc <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 200ddf8:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 200ddfc:	8080030b 	ldhu	r2,12(r16)
 200de00:	10820014 	ori	r2,r2,2048
 200de04:	8080030d 	sth	r2,12(r16)
 200de08:	00001606 	br	200de64 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 200de0c:	e0bfed17 	ldw	r2,-76(fp)
 200de10:	10bc000c 	andi	r2,r2,61440
 200de14:	10880020 	cmpeqi	r2,r2,8192
 200de18:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 200de1c:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 200de20:	e0bfed17 	ldw	r2,-76(fp)
 200de24:	10fc000c 	andi	r3,r2,61440
 200de28:	00a00014 	movui	r2,32768
 200de2c:	18800a1e 	bne	r3,r2,200de58 <__smakebuf_r+0x108>
 200de30:	80c00a17 	ldw	r3,40(r16)
 200de34:	00808074 	movhi	r2,513
 200de38:	1086ae04 	addi	r2,r2,6840
 200de3c:	1880061e 	bne	r3,r2,200de58 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 200de40:	8080030b 	ldhu	r2,12(r16)
 200de44:	10810014 	ori	r2,r2,1024
 200de48:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 200de4c:	00810004 	movi	r2,1024
 200de50:	80801315 	stw	r2,76(r16)
 200de54:	00000306 	br	200de64 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 200de58:	8080030b 	ldhu	r2,12(r16)
 200de5c:	10820014 	ori	r2,r2,2048
 200de60:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 200de64:	90001126 	beq	r18,zero,200deac <__smakebuf_r+0x15c>
 200de68:	8080038b 	ldhu	r2,14(r16)
 200de6c:	10bfffcc 	andi	r2,r2,65535
 200de70:	10a0001c 	xori	r2,r2,32768
 200de74:	10a00004 	addi	r2,r2,-32768
 200de78:	100b883a 	mov	r5,r2
 200de7c:	e13ffb17 	ldw	r4,-20(fp)
 200de80:	20139100 	call	2013910 <_isatty_r>
 200de84:	10000926 	beq	r2,zero,200deac <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 200de88:	8080030b 	ldhu	r2,12(r16)
 200de8c:	10800054 	ori	r2,r2,1
 200de90:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 200de94:	808010c4 	addi	r2,r16,67
 200de98:	80800015 	stw	r2,0(r16)
 200de9c:	80800017 	ldw	r2,0(r16)
 200dea0:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 200dea4:	00800044 	movi	r2,1
 200dea8:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 200deac:	880b883a 	mov	r5,r17
 200deb0:	e13ffb17 	ldw	r4,-20(fp)
 200deb4:	200e3300 	call	200e330 <_malloc_r>
 200deb8:	1027883a 	mov	r19,r2
 200debc:	98000e1e 	bne	r19,zero,200def8 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 200dec0:	8080030b 	ldhu	r2,12(r16)
 200dec4:	10bfffcc 	andi	r2,r2,65535
 200dec8:	1080800c 	andi	r2,r2,512
 200decc:	1000221e 	bne	r2,zero,200df58 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 200ded0:	8080030b 	ldhu	r2,12(r16)
 200ded4:	10800094 	ori	r2,r2,2
 200ded8:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 200dedc:	808010c4 	addi	r2,r16,67
 200dee0:	80800015 	stw	r2,0(r16)
 200dee4:	80800017 	ldw	r2,0(r16)
 200dee8:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 200deec:	00800044 	movi	r2,1
 200def0:	80800515 	stw	r2,20(r16)
 200def4:	00001806 	br	200df58 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 200def8:	e0fffb17 	ldw	r3,-20(fp)
 200defc:	00808074 	movhi	r2,513
 200df00:	10b29604 	addi	r2,r2,-13736
 200df04:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 200df08:	8080030b 	ldhu	r2,12(r16)
 200df0c:	10802014 	ori	r2,r2,128
 200df10:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 200df14:	84c00015 	stw	r19,0(r16)
 200df18:	80800017 	ldw	r2,0(r16)
 200df1c:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 200df20:	8805883a 	mov	r2,r17
 200df24:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 200df28:	90000b26 	beq	r18,zero,200df58 <__smakebuf_r+0x208>
 200df2c:	8080038b 	ldhu	r2,14(r16)
 200df30:	10bfffcc 	andi	r2,r2,65535
 200df34:	10a0001c 	xori	r2,r2,32768
 200df38:	10a00004 	addi	r2,r2,-32768
 200df3c:	100b883a 	mov	r5,r2
 200df40:	e13ffb17 	ldw	r4,-20(fp)
 200df44:	20139100 	call	2013910 <_isatty_r>
 200df48:	10000326 	beq	r2,zero,200df58 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 200df4c:	8080030b 	ldhu	r2,12(r16)
 200df50:	10800054 	ori	r2,r2,1
 200df54:	8080030d 	sth	r2,12(r16)
    }
}
 200df58:	e6fffc04 	addi	sp,fp,-16
 200df5c:	dfc00517 	ldw	ra,20(sp)
 200df60:	df000417 	ldw	fp,16(sp)
 200df64:	dcc00317 	ldw	r19,12(sp)
 200df68:	dc800217 	ldw	r18,8(sp)
 200df6c:	dc400117 	ldw	r17,4(sp)
 200df70:	dc000017 	ldw	r16,0(sp)
 200df74:	dec00604 	addi	sp,sp,24
 200df78:	f800283a 	ret

0200df7c <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 200df7c:	defff104 	addi	sp,sp,-60
 200df80:	dfc00e15 	stw	ra,56(sp)
 200df84:	df000d15 	stw	fp,52(sp)
 200df88:	df000d04 	addi	fp,sp,52
 200df8c:	e13ffe15 	stw	r4,-8(fp)
 200df90:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 200df94:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 200df98:	008080b4 	movhi	r2,514
 200df9c:	1088fb04 	addi	r2,r2,9196
 200dfa0:	10800217 	ldw	r2,8(r2)
 200dfa4:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 200dfa8:	e0bff817 	ldw	r2,-32(fp)
 200dfac:	10c00117 	ldw	r3,4(r2)
 200dfb0:	00bfff04 	movi	r2,-4
 200dfb4:	1884703a 	and	r2,r3,r2
 200dfb8:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 200dfbc:	e0fff817 	ldw	r3,-32(fp)
 200dfc0:	e0bff917 	ldw	r2,-28(fp)
 200dfc4:	1885883a 	add	r2,r3,r2
 200dfc8:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 200dfcc:	d0e79217 	ldw	r3,-25016(gp)
 200dfd0:	e0bfff17 	ldw	r2,-4(fp)
 200dfd4:	1885883a 	add	r2,r3,r2
 200dfd8:	10800404 	addi	r2,r2,16
 200dfdc:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 200dfe0:	00840004 	movi	r2,4096
 200dfe4:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 200dfe8:	d0a03217 	ldw	r2,-32568(gp)
 200dfec:	10bfffe0 	cmpeqi	r2,r2,-1
 200dff0:	1000081e 	bne	r2,zero,200e014 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 200dff4:	e0fffb17 	ldw	r3,-20(fp)
 200dff8:	e0bff617 	ldw	r2,-40(fp)
 200dffc:	1885883a 	add	r2,r3,r2
 200e000:	10ffffc4 	addi	r3,r2,-1
 200e004:	e0bffb17 	ldw	r2,-20(fp)
 200e008:	0085c83a 	sub	r2,zero,r2
 200e00c:	1884703a 	and	r2,r3,r2
 200e010:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 200e014:	e0bff617 	ldw	r2,-40(fp)
 200e018:	100b883a 	mov	r5,r2
 200e01c:	e13ffe17 	ldw	r4,-8(fp)
 200e020:	20118d80 	call	20118d8 <_sbrk_r>
 200e024:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 200e028:	e0bff317 	ldw	r2,-52(fp)
 200e02c:	10bfffe0 	cmpeqi	r2,r2,-1
 200e030:	1000b91e 	bne	r2,zero,200e318 <malloc_extend_top+0x39c>
 200e034:	e0fff317 	ldw	r3,-52(fp)
 200e038:	e0bffa17 	ldw	r2,-24(fp)
 200e03c:	1880042e 	bgeu	r3,r2,200e050 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 200e040:	008080b4 	movhi	r2,514
 200e044:	1088fb04 	addi	r2,r2,9196
 200e048:	e0fff817 	ldw	r3,-32(fp)
 200e04c:	1880b21e 	bne	r3,r2,200e318 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 200e050:	008080b4 	movhi	r2,514
 200e054:	10964404 	addi	r2,r2,22800
 200e058:	10800017 	ldw	r2,0(r2)
 200e05c:	1007883a 	mov	r3,r2
 200e060:	e0bff617 	ldw	r2,-40(fp)
 200e064:	1885883a 	add	r2,r3,r2
 200e068:	1007883a 	mov	r3,r2
 200e06c:	008080b4 	movhi	r2,514
 200e070:	10964404 	addi	r2,r2,22800
 200e074:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 200e078:	e0fff317 	ldw	r3,-52(fp)
 200e07c:	e0bffa17 	ldw	r2,-24(fp)
 200e080:	1880101e 	bne	r3,r2,200e0c4 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 200e084:	e0bffb17 	ldw	r2,-20(fp)
 200e088:	10ffffc4 	addi	r3,r2,-1
 200e08c:	e0bffa17 	ldw	r2,-24(fp)
 200e090:	1884703a 	and	r2,r3,r2
 200e094:	10000b1e 	bne	r2,zero,200e0c4 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 200e098:	e0fff617 	ldw	r3,-40(fp)
 200e09c:	e0bff917 	ldw	r2,-28(fp)
 200e0a0:	1885883a 	add	r2,r3,r2
 200e0a4:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200e0a8:	008080b4 	movhi	r2,514
 200e0ac:	1088fb04 	addi	r2,r2,9196
 200e0b0:	10800217 	ldw	r2,8(r2)
 200e0b4:	e0fffc17 	ldw	r3,-16(fp)
 200e0b8:	18c00054 	ori	r3,r3,1
 200e0bc:	10c00115 	stw	r3,4(r2)
 200e0c0:	00008006 	br	200e2c4 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 200e0c4:	d0a03217 	ldw	r2,-32568(gp)
 200e0c8:	10bfffd8 	cmpnei	r2,r2,-1
 200e0cc:	1000031e 	bne	r2,zero,200e0dc <malloc_extend_top+0x160>
      sbrk_base = brk;
 200e0d0:	e0bff317 	ldw	r2,-52(fp)
 200e0d4:	d0a03215 	stw	r2,-32568(gp)
 200e0d8:	00000a06 	br	200e104 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 200e0dc:	008080b4 	movhi	r2,514
 200e0e0:	10964404 	addi	r2,r2,22800
 200e0e4:	10c00017 	ldw	r3,0(r2)
 200e0e8:	e13ff317 	ldw	r4,-52(fp)
 200e0ec:	e0bffa17 	ldw	r2,-24(fp)
 200e0f0:	2085c83a 	sub	r2,r4,r2
 200e0f4:	1887883a 	add	r3,r3,r2
 200e0f8:	008080b4 	movhi	r2,514
 200e0fc:	10964404 	addi	r2,r2,22800
 200e100:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 200e104:	e0bff317 	ldw	r2,-52(fp)
 200e108:	10800204 	addi	r2,r2,8
 200e10c:	108001cc 	andi	r2,r2,7
 200e110:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 200e114:	e0bffd17 	ldw	r2,-12(fp)
 200e118:	10000926 	beq	r2,zero,200e140 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 200e11c:	00c00204 	movi	r3,8
 200e120:	e0bffd17 	ldw	r2,-12(fp)
 200e124:	1885c83a 	sub	r2,r3,r2
 200e128:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 200e12c:	e0fff317 	ldw	r3,-52(fp)
 200e130:	e0bff417 	ldw	r2,-48(fp)
 200e134:	1885883a 	add	r2,r3,r2
 200e138:	e0bff315 	stw	r2,-52(fp)
 200e13c:	00000106 	br	200e144 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 200e140:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 200e144:	e0fff317 	ldw	r3,-52(fp)
 200e148:	e0bff617 	ldw	r2,-40(fp)
 200e14c:	1885883a 	add	r2,r3,r2
 200e150:	1007883a 	mov	r3,r2
 200e154:	e0bffb17 	ldw	r2,-20(fp)
 200e158:	10bfffc4 	addi	r2,r2,-1
 200e15c:	1884703a 	and	r2,r3,r2
 200e160:	e0fffb17 	ldw	r3,-20(fp)
 200e164:	1885c83a 	sub	r2,r3,r2
 200e168:	e0fff417 	ldw	r3,-48(fp)
 200e16c:	1885883a 	add	r2,r3,r2
 200e170:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 200e174:	e0bff417 	ldw	r2,-48(fp)
 200e178:	100b883a 	mov	r5,r2
 200e17c:	e13ffe17 	ldw	r4,-8(fp)
 200e180:	20118d80 	call	20118d8 <_sbrk_r>
 200e184:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 200e188:	e0bff517 	ldw	r2,-44(fp)
 200e18c:	10bfffd8 	cmpnei	r2,r2,-1
 200e190:	1000051e 	bne	r2,zero,200e1a8 <malloc_extend_top+0x22c>
      {
	correction = 0;
 200e194:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 200e198:	00800044 	movi	r2,1
 200e19c:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 200e1a0:	e0bff317 	ldw	r2,-52(fp)
 200e1a4:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 200e1a8:	008080b4 	movhi	r2,514
 200e1ac:	10964404 	addi	r2,r2,22800
 200e1b0:	10800017 	ldw	r2,0(r2)
 200e1b4:	1007883a 	mov	r3,r2
 200e1b8:	e0bff417 	ldw	r2,-48(fp)
 200e1bc:	1885883a 	add	r2,r3,r2
 200e1c0:	1007883a 	mov	r3,r2
 200e1c4:	008080b4 	movhi	r2,514
 200e1c8:	10964404 	addi	r2,r2,22800
 200e1cc:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 200e1d0:	008080b4 	movhi	r2,514
 200e1d4:	1088fb04 	addi	r2,r2,9196
 200e1d8:	e0fff317 	ldw	r3,-52(fp)
 200e1dc:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 200e1e0:	e0fff517 	ldw	r3,-44(fp)
 200e1e4:	e0bff317 	ldw	r2,-52(fp)
 200e1e8:	1885c83a 	sub	r2,r3,r2
 200e1ec:	1007883a 	mov	r3,r2
 200e1f0:	e0bff417 	ldw	r2,-48(fp)
 200e1f4:	1885883a 	add	r2,r3,r2
 200e1f8:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200e1fc:	008080b4 	movhi	r2,514
 200e200:	1088fb04 	addi	r2,r2,9196
 200e204:	10800217 	ldw	r2,8(r2)
 200e208:	e0fffc17 	ldw	r3,-16(fp)
 200e20c:	18c00054 	ori	r3,r3,1
 200e210:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 200e214:	008080b4 	movhi	r2,514
 200e218:	1088fb04 	addi	r2,r2,9196
 200e21c:	e0fff817 	ldw	r3,-32(fp)
 200e220:	18802826 	beq	r3,r2,200e2c4 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 200e224:	e0bff917 	ldw	r2,-28(fp)
 200e228:	10800428 	cmpgeui	r2,r2,16
 200e22c:	1000061e 	bne	r2,zero,200e248 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 200e230:	008080b4 	movhi	r2,514
 200e234:	1088fb04 	addi	r2,r2,9196
 200e238:	10800217 	ldw	r2,8(r2)
 200e23c:	00c00044 	movi	r3,1
 200e240:	10c00115 	stw	r3,4(r2)
        return;
 200e244:	00003506 	br	200e31c <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 200e248:	e0bff917 	ldw	r2,-28(fp)
 200e24c:	10fffd04 	addi	r3,r2,-12
 200e250:	00bffe04 	movi	r2,-8
 200e254:	1884703a 	and	r2,r3,r2
 200e258:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 200e25c:	e0bff817 	ldw	r2,-32(fp)
 200e260:	10800117 	ldw	r2,4(r2)
 200e264:	10c0004c 	andi	r3,r2,1
 200e268:	e0bff917 	ldw	r2,-28(fp)
 200e26c:	1886b03a 	or	r3,r3,r2
 200e270:	e0bff817 	ldw	r2,-32(fp)
 200e274:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 200e278:	e0fff817 	ldw	r3,-32(fp)
 200e27c:	e0bff917 	ldw	r2,-28(fp)
 200e280:	1885883a 	add	r2,r3,r2
 200e284:	00c00144 	movi	r3,5
 200e288:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 200e28c:	e0bff917 	ldw	r2,-28(fp)
 200e290:	10800104 	addi	r2,r2,4
 200e294:	e0fff817 	ldw	r3,-32(fp)
 200e298:	1885883a 	add	r2,r3,r2
 200e29c:	00c00144 	movi	r3,5
 200e2a0:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 200e2a4:	e0bff917 	ldw	r2,-28(fp)
 200e2a8:	10800430 	cmpltui	r2,r2,16
 200e2ac:	1000051e 	bne	r2,zero,200e2c4 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 200e2b0:	e0bff817 	ldw	r2,-32(fp)
 200e2b4:	10800204 	addi	r2,r2,8
 200e2b8:	100b883a 	mov	r5,r2
 200e2bc:	e13ffe17 	ldw	r4,-8(fp)
 200e2c0:	200ccf00 	call	200ccf0 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 200e2c4:	008080b4 	movhi	r2,514
 200e2c8:	10964404 	addi	r2,r2,22800
 200e2cc:	10800017 	ldw	r2,0(r2)
 200e2d0:	1007883a 	mov	r3,r2
 200e2d4:	d0a79317 	ldw	r2,-25012(gp)
 200e2d8:	10c0042e 	bgeu	r2,r3,200e2ec <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 200e2dc:	008080b4 	movhi	r2,514
 200e2e0:	10964404 	addi	r2,r2,22800
 200e2e4:	10800017 	ldw	r2,0(r2)
 200e2e8:	d0a79315 	stw	r2,-25012(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 200e2ec:	008080b4 	movhi	r2,514
 200e2f0:	10964404 	addi	r2,r2,22800
 200e2f4:	10800017 	ldw	r2,0(r2)
 200e2f8:	1007883a 	mov	r3,r2
 200e2fc:	d0a79417 	ldw	r2,-25008(gp)
 200e300:	10c0062e 	bgeu	r2,r3,200e31c <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 200e304:	008080b4 	movhi	r2,514
 200e308:	10964404 	addi	r2,r2,22800
 200e30c:	10800017 	ldw	r2,0(r2)
 200e310:	d0a79415 	stw	r2,-25008(gp)
 200e314:	00000106 	br	200e31c <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 200e318:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 200e31c:	e037883a 	mov	sp,fp
 200e320:	dfc00117 	ldw	ra,4(sp)
 200e324:	df000017 	ldw	fp,0(sp)
 200e328:	dec00204 	addi	sp,sp,8
 200e32c:	f800283a 	ret

0200e330 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 200e330:	deffef04 	addi	sp,sp,-68
 200e334:	dfc01015 	stw	ra,64(sp)
 200e338:	df000f15 	stw	fp,60(sp)
 200e33c:	df000f04 	addi	fp,sp,60
 200e340:	e13ffe15 	stw	r4,-8(fp)
 200e344:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 200e348:	e0bfff17 	ldw	r2,-4(fp)
 200e34c:	108002c4 	addi	r2,r2,11
 200e350:	108005f0 	cmpltui	r2,r2,23
 200e354:	1000051e 	bne	r2,zero,200e36c <_malloc_r+0x3c>
 200e358:	e0bfff17 	ldw	r2,-4(fp)
 200e35c:	10c002c4 	addi	r3,r2,11
 200e360:	00bffe04 	movi	r2,-8
 200e364:	1884703a 	and	r2,r3,r2
 200e368:	00000106 	br	200e370 <_malloc_r+0x40>
 200e36c:	00800404 	movi	r2,16
 200e370:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200e374:	e0bffa17 	ldw	r2,-24(fp)
 200e378:	10000316 	blt	r2,zero,200e388 <_malloc_r+0x58>
 200e37c:	e0fffa17 	ldw	r3,-24(fp)
 200e380:	e0bfff17 	ldw	r2,-4(fp)
 200e384:	1880052e 	bgeu	r3,r2,200e39c <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 200e388:	e0bffe17 	ldw	r2,-8(fp)
 200e38c:	00c00304 	movi	r3,12
 200e390:	10c00015 	stw	r3,0(r2)
    return 0;
 200e394:	0005883a 	mov	r2,zero
 200e398:	0002bf06 	br	200ee98 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 200e39c:	e13ffe17 	ldw	r4,-8(fp)
 200e3a0:	201673c0 	call	201673c <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 200e3a4:	e0bffa17 	ldw	r2,-24(fp)
 200e3a8:	10807e28 	cmpgeui	r2,r2,504
 200e3ac:	10003f1e 	bne	r2,zero,200e4ac <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 200e3b0:	e0bffa17 	ldw	r2,-24(fp)
 200e3b4:	1004d0fa 	srli	r2,r2,3
 200e3b8:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 200e3bc:	e0bff217 	ldw	r2,-56(fp)
 200e3c0:	10800044 	addi	r2,r2,1
 200e3c4:	1085883a 	add	r2,r2,r2
 200e3c8:	1085883a 	add	r2,r2,r2
 200e3cc:	1087883a 	add	r3,r2,r2
 200e3d0:	008080b4 	movhi	r2,514
 200e3d4:	1088fb04 	addi	r2,r2,9196
 200e3d8:	1885883a 	add	r2,r3,r2
 200e3dc:	10bffe04 	addi	r2,r2,-8
 200e3e0:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 200e3e4:	e0bff917 	ldw	r2,-28(fp)
 200e3e8:	10800317 	ldw	r2,12(r2)
 200e3ec:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 200e3f0:	e0fff117 	ldw	r3,-60(fp)
 200e3f4:	e0bff917 	ldw	r2,-28(fp)
 200e3f8:	1880061e 	bne	r3,r2,200e414 <_malloc_r+0xe4>
    {
      q = next_bin(q);
 200e3fc:	e0bff917 	ldw	r2,-28(fp)
 200e400:	10800204 	addi	r2,r2,8
 200e404:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 200e408:	e0bff917 	ldw	r2,-28(fp)
 200e40c:	10800317 	ldw	r2,12(r2)
 200e410:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 200e414:	e0fff117 	ldw	r3,-60(fp)
 200e418:	e0bff917 	ldw	r2,-28(fp)
 200e41c:	18801f26 	beq	r3,r2,200e49c <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 200e420:	e0bff117 	ldw	r2,-60(fp)
 200e424:	10c00117 	ldw	r3,4(r2)
 200e428:	00bfff04 	movi	r2,-4
 200e42c:	1884703a 	and	r2,r3,r2
 200e430:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 200e434:	e0bff117 	ldw	r2,-60(fp)
 200e438:	10800317 	ldw	r2,12(r2)
 200e43c:	e0bff815 	stw	r2,-32(fp)
 200e440:	e0bff117 	ldw	r2,-60(fp)
 200e444:	10800217 	ldw	r2,8(r2)
 200e448:	e0bff715 	stw	r2,-36(fp)
 200e44c:	e0bff717 	ldw	r2,-36(fp)
 200e450:	e0fff817 	ldw	r3,-32(fp)
 200e454:	10c00315 	stw	r3,12(r2)
 200e458:	e0bff817 	ldw	r2,-32(fp)
 200e45c:	e0fff717 	ldw	r3,-36(fp)
 200e460:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 200e464:	e0fff117 	ldw	r3,-60(fp)
 200e468:	e0bffb17 	ldw	r2,-20(fp)
 200e46c:	1885883a 	add	r2,r3,r2
 200e470:	e13ff117 	ldw	r4,-60(fp)
 200e474:	e0fffb17 	ldw	r3,-20(fp)
 200e478:	20c7883a 	add	r3,r4,r3
 200e47c:	18c00117 	ldw	r3,4(r3)
 200e480:	18c00054 	ori	r3,r3,1
 200e484:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200e488:	e13ffe17 	ldw	r4,-8(fp)
 200e48c:	201685c0 	call	201685c <__malloc_unlock>
      return chunk2mem(victim);
 200e490:	e0bff117 	ldw	r2,-60(fp)
 200e494:	10800204 	addi	r2,r2,8
 200e498:	00027f06 	br	200ee98 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 200e49c:	e0bff217 	ldw	r2,-56(fp)
 200e4a0:	10800084 	addi	r2,r2,2
 200e4a4:	e0bff215 	stw	r2,-56(fp)
 200e4a8:	00007306 	br	200e678 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 200e4ac:	e0bffa17 	ldw	r2,-24(fp)
 200e4b0:	1004d27a 	srli	r2,r2,9
 200e4b4:	1000031e 	bne	r2,zero,200e4c4 <_malloc_r+0x194>
 200e4b8:	e0bffa17 	ldw	r2,-24(fp)
 200e4bc:	1004d0fa 	srli	r2,r2,3
 200e4c0:	00002906 	br	200e568 <_malloc_r+0x238>
 200e4c4:	e0bffa17 	ldw	r2,-24(fp)
 200e4c8:	1004d27a 	srli	r2,r2,9
 200e4cc:	10800168 	cmpgeui	r2,r2,5
 200e4d0:	1000041e 	bne	r2,zero,200e4e4 <_malloc_r+0x1b4>
 200e4d4:	e0bffa17 	ldw	r2,-24(fp)
 200e4d8:	1004d1ba 	srli	r2,r2,6
 200e4dc:	10800e04 	addi	r2,r2,56
 200e4e0:	00002106 	br	200e568 <_malloc_r+0x238>
 200e4e4:	e0bffa17 	ldw	r2,-24(fp)
 200e4e8:	1004d27a 	srli	r2,r2,9
 200e4ec:	10800568 	cmpgeui	r2,r2,21
 200e4f0:	1000041e 	bne	r2,zero,200e504 <_malloc_r+0x1d4>
 200e4f4:	e0bffa17 	ldw	r2,-24(fp)
 200e4f8:	1004d27a 	srli	r2,r2,9
 200e4fc:	108016c4 	addi	r2,r2,91
 200e500:	00001906 	br	200e568 <_malloc_r+0x238>
 200e504:	e0bffa17 	ldw	r2,-24(fp)
 200e508:	1004d27a 	srli	r2,r2,9
 200e50c:	10801568 	cmpgeui	r2,r2,85
 200e510:	1000041e 	bne	r2,zero,200e524 <_malloc_r+0x1f4>
 200e514:	e0bffa17 	ldw	r2,-24(fp)
 200e518:	1004d33a 	srli	r2,r2,12
 200e51c:	10801b84 	addi	r2,r2,110
 200e520:	00001106 	br	200e568 <_malloc_r+0x238>
 200e524:	e0bffa17 	ldw	r2,-24(fp)
 200e528:	1004d27a 	srli	r2,r2,9
 200e52c:	10805568 	cmpgeui	r2,r2,341
 200e530:	1000041e 	bne	r2,zero,200e544 <_malloc_r+0x214>
 200e534:	e0bffa17 	ldw	r2,-24(fp)
 200e538:	1004d3fa 	srli	r2,r2,15
 200e53c:	10801dc4 	addi	r2,r2,119
 200e540:	00000906 	br	200e568 <_malloc_r+0x238>
 200e544:	e0bffa17 	ldw	r2,-24(fp)
 200e548:	1004d27a 	srli	r2,r2,9
 200e54c:	10815568 	cmpgeui	r2,r2,1365
 200e550:	1000041e 	bne	r2,zero,200e564 <_malloc_r+0x234>
 200e554:	e0bffa17 	ldw	r2,-24(fp)
 200e558:	1004d4ba 	srli	r2,r2,18
 200e55c:	10801f04 	addi	r2,r2,124
 200e560:	00000106 	br	200e568 <_malloc_r+0x238>
 200e564:	00801f84 	movi	r2,126
 200e568:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 200e56c:	e0bff217 	ldw	r2,-56(fp)
 200e570:	10800044 	addi	r2,r2,1
 200e574:	1085883a 	add	r2,r2,r2
 200e578:	1085883a 	add	r2,r2,r2
 200e57c:	1087883a 	add	r3,r2,r2
 200e580:	008080b4 	movhi	r2,514
 200e584:	1088fb04 	addi	r2,r2,9196
 200e588:	1885883a 	add	r2,r3,r2
 200e58c:	10bffe04 	addi	r2,r2,-8
 200e590:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200e594:	e0bff317 	ldw	r2,-52(fp)
 200e598:	10800317 	ldw	r2,12(r2)
 200e59c:	e0bff115 	stw	r2,-60(fp)
 200e5a0:	00002f06 	br	200e660 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 200e5a4:	e0bff117 	ldw	r2,-60(fp)
 200e5a8:	10c00117 	ldw	r3,4(r2)
 200e5ac:	00bfff04 	movi	r2,-4
 200e5b0:	1884703a 	and	r2,r3,r2
 200e5b4:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 200e5b8:	e0fffb17 	ldw	r3,-20(fp)
 200e5bc:	e0bffa17 	ldw	r2,-24(fp)
 200e5c0:	1885c83a 	sub	r2,r3,r2
 200e5c4:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 200e5c8:	e0bff417 	ldw	r2,-48(fp)
 200e5cc:	10800410 	cmplti	r2,r2,16
 200e5d0:	1000041e 	bne	r2,zero,200e5e4 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 200e5d4:	e0bff217 	ldw	r2,-56(fp)
 200e5d8:	10bfffc4 	addi	r2,r2,-1
 200e5dc:	e0bff215 	stw	r2,-56(fp)
        break;   
 200e5e0:	00002206 	br	200e66c <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 200e5e4:	e0bff417 	ldw	r2,-48(fp)
 200e5e8:	10001a16 	blt	r2,zero,200e654 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 200e5ec:	e0bff117 	ldw	r2,-60(fp)
 200e5f0:	10800317 	ldw	r2,12(r2)
 200e5f4:	e0bff815 	stw	r2,-32(fp)
 200e5f8:	e0bff117 	ldw	r2,-60(fp)
 200e5fc:	10800217 	ldw	r2,8(r2)
 200e600:	e0bff715 	stw	r2,-36(fp)
 200e604:	e0bff717 	ldw	r2,-36(fp)
 200e608:	e0fff817 	ldw	r3,-32(fp)
 200e60c:	10c00315 	stw	r3,12(r2)
 200e610:	e0bff817 	ldw	r2,-32(fp)
 200e614:	e0fff717 	ldw	r3,-36(fp)
 200e618:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 200e61c:	e0fff117 	ldw	r3,-60(fp)
 200e620:	e0bffb17 	ldw	r2,-20(fp)
 200e624:	1885883a 	add	r2,r3,r2
 200e628:	e13ff117 	ldw	r4,-60(fp)
 200e62c:	e0fffb17 	ldw	r3,-20(fp)
 200e630:	20c7883a 	add	r3,r4,r3
 200e634:	18c00117 	ldw	r3,4(r3)
 200e638:	18c00054 	ori	r3,r3,1
 200e63c:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 200e640:	e13ffe17 	ldw	r4,-8(fp)
 200e644:	201685c0 	call	201685c <__malloc_unlock>
        return chunk2mem(victim);
 200e648:	e0bff117 	ldw	r2,-60(fp)
 200e64c:	10800204 	addi	r2,r2,8
 200e650:	00021106 	br	200ee98 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200e654:	e0bff117 	ldw	r2,-60(fp)
 200e658:	10800317 	ldw	r2,12(r2)
 200e65c:	e0bff115 	stw	r2,-60(fp)
 200e660:	e0fff117 	ldw	r3,-60(fp)
 200e664:	e0bff317 	ldw	r2,-52(fp)
 200e668:	18bfce1e 	bne	r3,r2,200e5a4 <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 200e66c:	e0bff217 	ldw	r2,-56(fp)
 200e670:	10800044 	addi	r2,r2,1
 200e674:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 200e678:	008080b4 	movhi	r2,514
 200e67c:	1088fd04 	addi	r2,r2,9204
 200e680:	10800217 	ldw	r2,8(r2)
 200e684:	e0bff115 	stw	r2,-60(fp)
 200e688:	008080b4 	movhi	r2,514
 200e68c:	1088fd04 	addi	r2,r2,9204
 200e690:	e0fff117 	ldw	r3,-60(fp)
 200e694:	1880e626 	beq	r3,r2,200ea30 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 200e698:	e0bff117 	ldw	r2,-60(fp)
 200e69c:	10c00117 	ldw	r3,4(r2)
 200e6a0:	00bfff04 	movi	r2,-4
 200e6a4:	1884703a 	and	r2,r3,r2
 200e6a8:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 200e6ac:	e0fffb17 	ldw	r3,-20(fp)
 200e6b0:	e0bffa17 	ldw	r2,-24(fp)
 200e6b4:	1885c83a 	sub	r2,r3,r2
 200e6b8:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 200e6bc:	e0bff417 	ldw	r2,-48(fp)
 200e6c0:	10800410 	cmplti	r2,r2,16
 200e6c4:	1000271e 	bne	r2,zero,200e764 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 200e6c8:	e0fff117 	ldw	r3,-60(fp)
 200e6cc:	e0bffa17 	ldw	r2,-24(fp)
 200e6d0:	1885883a 	add	r2,r3,r2
 200e6d4:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 200e6d8:	e0bffa17 	ldw	r2,-24(fp)
 200e6dc:	10c00054 	ori	r3,r2,1
 200e6e0:	e0bff117 	ldw	r2,-60(fp)
 200e6e4:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 200e6e8:	00c080b4 	movhi	r3,514
 200e6ec:	18c8fd04 	addi	r3,r3,9204
 200e6f0:	008080b4 	movhi	r2,514
 200e6f4:	1088fd04 	addi	r2,r2,9204
 200e6f8:	e13ffc17 	ldw	r4,-16(fp)
 200e6fc:	11000315 	stw	r4,12(r2)
 200e700:	10800317 	ldw	r2,12(r2)
 200e704:	18800215 	stw	r2,8(r3)
 200e708:	008080b4 	movhi	r2,514
 200e70c:	1088fd04 	addi	r2,r2,9204
 200e710:	e0fffc17 	ldw	r3,-16(fp)
 200e714:	18800315 	stw	r2,12(r3)
 200e718:	e0bffc17 	ldw	r2,-16(fp)
 200e71c:	10c00317 	ldw	r3,12(r2)
 200e720:	e0bffc17 	ldw	r2,-16(fp)
 200e724:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 200e728:	e0bff417 	ldw	r2,-48(fp)
 200e72c:	10800054 	ori	r2,r2,1
 200e730:	1007883a 	mov	r3,r2
 200e734:	e0bffc17 	ldw	r2,-16(fp)
 200e738:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 200e73c:	e0bff417 	ldw	r2,-48(fp)
 200e740:	e0fffc17 	ldw	r3,-16(fp)
 200e744:	1885883a 	add	r2,r3,r2
 200e748:	e0fff417 	ldw	r3,-48(fp)
 200e74c:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200e750:	e13ffe17 	ldw	r4,-8(fp)
 200e754:	201685c0 	call	201685c <__malloc_unlock>
      return chunk2mem(victim);
 200e758:	e0bff117 	ldw	r2,-60(fp)
 200e75c:	10800204 	addi	r2,r2,8
 200e760:	0001cd06 	br	200ee98 <_malloc_r+0xb68>
    }

    clear_last_remainder;
 200e764:	00c080b4 	movhi	r3,514
 200e768:	18c8fd04 	addi	r3,r3,9204
 200e76c:	008080b4 	movhi	r2,514
 200e770:	1088fd04 	addi	r2,r2,9204
 200e774:	010080b4 	movhi	r4,514
 200e778:	2108fd04 	addi	r4,r4,9204
 200e77c:	11000315 	stw	r4,12(r2)
 200e780:	10800317 	ldw	r2,12(r2)
 200e784:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 200e788:	e0bff417 	ldw	r2,-48(fp)
 200e78c:	10000e16 	blt	r2,zero,200e7c8 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 200e790:	e0fff117 	ldw	r3,-60(fp)
 200e794:	e0bffb17 	ldw	r2,-20(fp)
 200e798:	1885883a 	add	r2,r3,r2
 200e79c:	e13ff117 	ldw	r4,-60(fp)
 200e7a0:	e0fffb17 	ldw	r3,-20(fp)
 200e7a4:	20c7883a 	add	r3,r4,r3
 200e7a8:	18c00117 	ldw	r3,4(r3)
 200e7ac:	18c00054 	ori	r3,r3,1
 200e7b0:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200e7b4:	e13ffe17 	ldw	r4,-8(fp)
 200e7b8:	201685c0 	call	201685c <__malloc_unlock>
      return chunk2mem(victim);
 200e7bc:	e0bff117 	ldw	r2,-60(fp)
 200e7c0:	10800204 	addi	r2,r2,8
 200e7c4:	0001b406 	br	200ee98 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 200e7c8:	e0bffb17 	ldw	r2,-20(fp)
 200e7cc:	10808028 	cmpgeui	r2,r2,512
 200e7d0:	10002c1e 	bne	r2,zero,200e884 <_malloc_r+0x554>
 200e7d4:	e0bffb17 	ldw	r2,-20(fp)
 200e7d8:	1004d0fa 	srli	r2,r2,3
 200e7dc:	e0bffd15 	stw	r2,-12(fp)
 200e7e0:	00c080b4 	movhi	r3,514
 200e7e4:	18c8fb04 	addi	r3,r3,9196
 200e7e8:	008080b4 	movhi	r2,514
 200e7ec:	1088fb04 	addi	r2,r2,9196
 200e7f0:	11000117 	ldw	r4,4(r2)
 200e7f4:	e0bffd17 	ldw	r2,-12(fp)
 200e7f8:	1000010e 	bge	r2,zero,200e800 <_malloc_r+0x4d0>
 200e7fc:	108000c4 	addi	r2,r2,3
 200e800:	1005d0ba 	srai	r2,r2,2
 200e804:	100b883a 	mov	r5,r2
 200e808:	00800044 	movi	r2,1
 200e80c:	1144983a 	sll	r2,r2,r5
 200e810:	2084b03a 	or	r2,r4,r2
 200e814:	18800115 	stw	r2,4(r3)
 200e818:	e0bffd17 	ldw	r2,-12(fp)
 200e81c:	10800044 	addi	r2,r2,1
 200e820:	1085883a 	add	r2,r2,r2
 200e824:	1085883a 	add	r2,r2,r2
 200e828:	1087883a 	add	r3,r2,r2
 200e82c:	008080b4 	movhi	r2,514
 200e830:	1088fb04 	addi	r2,r2,9196
 200e834:	1885883a 	add	r2,r3,r2
 200e838:	10bffe04 	addi	r2,r2,-8
 200e83c:	e0bff815 	stw	r2,-32(fp)
 200e840:	e0bff817 	ldw	r2,-32(fp)
 200e844:	10800217 	ldw	r2,8(r2)
 200e848:	e0bff715 	stw	r2,-36(fp)
 200e84c:	e0bff117 	ldw	r2,-60(fp)
 200e850:	e0fff817 	ldw	r3,-32(fp)
 200e854:	10c00315 	stw	r3,12(r2)
 200e858:	e0bff117 	ldw	r2,-60(fp)
 200e85c:	e0fff717 	ldw	r3,-36(fp)
 200e860:	10c00215 	stw	r3,8(r2)
 200e864:	e0bff817 	ldw	r2,-32(fp)
 200e868:	e0fff117 	ldw	r3,-60(fp)
 200e86c:	10c00215 	stw	r3,8(r2)
 200e870:	e0bff817 	ldw	r2,-32(fp)
 200e874:	10c00217 	ldw	r3,8(r2)
 200e878:	e0bff717 	ldw	r2,-36(fp)
 200e87c:	10c00315 	stw	r3,12(r2)
 200e880:	00006b06 	br	200ea30 <_malloc_r+0x700>
 200e884:	e0bffb17 	ldw	r2,-20(fp)
 200e888:	1004d27a 	srli	r2,r2,9
 200e88c:	1000031e 	bne	r2,zero,200e89c <_malloc_r+0x56c>
 200e890:	e0bffb17 	ldw	r2,-20(fp)
 200e894:	1004d0fa 	srli	r2,r2,3
 200e898:	00002906 	br	200e940 <_malloc_r+0x610>
 200e89c:	e0bffb17 	ldw	r2,-20(fp)
 200e8a0:	1004d27a 	srli	r2,r2,9
 200e8a4:	10800168 	cmpgeui	r2,r2,5
 200e8a8:	1000041e 	bne	r2,zero,200e8bc <_malloc_r+0x58c>
 200e8ac:	e0bffb17 	ldw	r2,-20(fp)
 200e8b0:	1004d1ba 	srli	r2,r2,6
 200e8b4:	10800e04 	addi	r2,r2,56
 200e8b8:	00002106 	br	200e940 <_malloc_r+0x610>
 200e8bc:	e0bffb17 	ldw	r2,-20(fp)
 200e8c0:	1004d27a 	srli	r2,r2,9
 200e8c4:	10800568 	cmpgeui	r2,r2,21
 200e8c8:	1000041e 	bne	r2,zero,200e8dc <_malloc_r+0x5ac>
 200e8cc:	e0bffb17 	ldw	r2,-20(fp)
 200e8d0:	1004d27a 	srli	r2,r2,9
 200e8d4:	108016c4 	addi	r2,r2,91
 200e8d8:	00001906 	br	200e940 <_malloc_r+0x610>
 200e8dc:	e0bffb17 	ldw	r2,-20(fp)
 200e8e0:	1004d27a 	srli	r2,r2,9
 200e8e4:	10801568 	cmpgeui	r2,r2,85
 200e8e8:	1000041e 	bne	r2,zero,200e8fc <_malloc_r+0x5cc>
 200e8ec:	e0bffb17 	ldw	r2,-20(fp)
 200e8f0:	1004d33a 	srli	r2,r2,12
 200e8f4:	10801b84 	addi	r2,r2,110
 200e8f8:	00001106 	br	200e940 <_malloc_r+0x610>
 200e8fc:	e0bffb17 	ldw	r2,-20(fp)
 200e900:	1004d27a 	srli	r2,r2,9
 200e904:	10805568 	cmpgeui	r2,r2,341
 200e908:	1000041e 	bne	r2,zero,200e91c <_malloc_r+0x5ec>
 200e90c:	e0bffb17 	ldw	r2,-20(fp)
 200e910:	1004d3fa 	srli	r2,r2,15
 200e914:	10801dc4 	addi	r2,r2,119
 200e918:	00000906 	br	200e940 <_malloc_r+0x610>
 200e91c:	e0bffb17 	ldw	r2,-20(fp)
 200e920:	1004d27a 	srli	r2,r2,9
 200e924:	10815568 	cmpgeui	r2,r2,1365
 200e928:	1000041e 	bne	r2,zero,200e93c <_malloc_r+0x60c>
 200e92c:	e0bffb17 	ldw	r2,-20(fp)
 200e930:	1004d4ba 	srli	r2,r2,18
 200e934:	10801f04 	addi	r2,r2,124
 200e938:	00000106 	br	200e940 <_malloc_r+0x610>
 200e93c:	00801f84 	movi	r2,126
 200e940:	e0bffd15 	stw	r2,-12(fp)
 200e944:	e0bffd17 	ldw	r2,-12(fp)
 200e948:	10800044 	addi	r2,r2,1
 200e94c:	1085883a 	add	r2,r2,r2
 200e950:	1085883a 	add	r2,r2,r2
 200e954:	1087883a 	add	r3,r2,r2
 200e958:	008080b4 	movhi	r2,514
 200e95c:	1088fb04 	addi	r2,r2,9196
 200e960:	1885883a 	add	r2,r3,r2
 200e964:	10bffe04 	addi	r2,r2,-8
 200e968:	e0bff815 	stw	r2,-32(fp)
 200e96c:	e0bff817 	ldw	r2,-32(fp)
 200e970:	10800217 	ldw	r2,8(r2)
 200e974:	e0bff715 	stw	r2,-36(fp)
 200e978:	e0fff717 	ldw	r3,-36(fp)
 200e97c:	e0bff817 	ldw	r2,-32(fp)
 200e980:	1880121e 	bne	r3,r2,200e9cc <_malloc_r+0x69c>
 200e984:	00c080b4 	movhi	r3,514
 200e988:	18c8fb04 	addi	r3,r3,9196
 200e98c:	008080b4 	movhi	r2,514
 200e990:	1088fb04 	addi	r2,r2,9196
 200e994:	11000117 	ldw	r4,4(r2)
 200e998:	e0bffd17 	ldw	r2,-12(fp)
 200e99c:	1000010e 	bge	r2,zero,200e9a4 <_malloc_r+0x674>
 200e9a0:	108000c4 	addi	r2,r2,3
 200e9a4:	1005d0ba 	srai	r2,r2,2
 200e9a8:	100b883a 	mov	r5,r2
 200e9ac:	00800044 	movi	r2,1
 200e9b0:	1144983a 	sll	r2,r2,r5
 200e9b4:	2084b03a 	or	r2,r4,r2
 200e9b8:	18800115 	stw	r2,4(r3)
 200e9bc:	00000f06 	br	200e9fc <_malloc_r+0x6cc>
 200e9c0:	e0bff717 	ldw	r2,-36(fp)
 200e9c4:	10800217 	ldw	r2,8(r2)
 200e9c8:	e0bff715 	stw	r2,-36(fp)
 200e9cc:	e0fff717 	ldw	r3,-36(fp)
 200e9d0:	e0bff817 	ldw	r2,-32(fp)
 200e9d4:	18800626 	beq	r3,r2,200e9f0 <_malloc_r+0x6c0>
 200e9d8:	e0bff717 	ldw	r2,-36(fp)
 200e9dc:	10c00117 	ldw	r3,4(r2)
 200e9e0:	00bfff04 	movi	r2,-4
 200e9e4:	1884703a 	and	r2,r3,r2
 200e9e8:	e0fffb17 	ldw	r3,-20(fp)
 200e9ec:	18bff436 	bltu	r3,r2,200e9c0 <_malloc_r+0x690>
 200e9f0:	e0bff717 	ldw	r2,-36(fp)
 200e9f4:	10800317 	ldw	r2,12(r2)
 200e9f8:	e0bff815 	stw	r2,-32(fp)
 200e9fc:	e0bff117 	ldw	r2,-60(fp)
 200ea00:	e0fff817 	ldw	r3,-32(fp)
 200ea04:	10c00315 	stw	r3,12(r2)
 200ea08:	e0bff117 	ldw	r2,-60(fp)
 200ea0c:	e0fff717 	ldw	r3,-36(fp)
 200ea10:	10c00215 	stw	r3,8(r2)
 200ea14:	e0bff817 	ldw	r2,-32(fp)
 200ea18:	e0fff117 	ldw	r3,-60(fp)
 200ea1c:	10c00215 	stw	r3,8(r2)
 200ea20:	e0bff817 	ldw	r2,-32(fp)
 200ea24:	10c00217 	ldw	r3,8(r2)
 200ea28:	e0bff717 	ldw	r2,-36(fp)
 200ea2c:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 200ea30:	e0bff217 	ldw	r2,-56(fp)
 200ea34:	1000010e 	bge	r2,zero,200ea3c <_malloc_r+0x70c>
 200ea38:	108000c4 	addi	r2,r2,3
 200ea3c:	1005d0ba 	srai	r2,r2,2
 200ea40:	1007883a 	mov	r3,r2
 200ea44:	00800044 	movi	r2,1
 200ea48:	10c4983a 	sll	r2,r2,r3
 200ea4c:	e0bff515 	stw	r2,-44(fp)
 200ea50:	008080b4 	movhi	r2,514
 200ea54:	1088fb04 	addi	r2,r2,9196
 200ea58:	10c00117 	ldw	r3,4(r2)
 200ea5c:	e0bff517 	ldw	r2,-44(fp)
 200ea60:	1880c636 	bltu	r3,r2,200ed7c <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 200ea64:	008080b4 	movhi	r2,514
 200ea68:	1088fb04 	addi	r2,r2,9196
 200ea6c:	10c00117 	ldw	r3,4(r2)
 200ea70:	e0bff517 	ldw	r2,-44(fp)
 200ea74:	1884703a 	and	r2,r3,r2
 200ea78:	1000151e 	bne	r2,zero,200ead0 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 200ea7c:	e0fff217 	ldw	r3,-56(fp)
 200ea80:	00bfff04 	movi	r2,-4
 200ea84:	1884703a 	and	r2,r3,r2
 200ea88:	10800104 	addi	r2,r2,4
 200ea8c:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 200ea90:	e0bff517 	ldw	r2,-44(fp)
 200ea94:	1085883a 	add	r2,r2,r2
 200ea98:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 200ea9c:	00000606 	br	200eab8 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 200eaa0:	e0bff217 	ldw	r2,-56(fp)
 200eaa4:	10800104 	addi	r2,r2,4
 200eaa8:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 200eaac:	e0bff517 	ldw	r2,-44(fp)
 200eab0:	1085883a 	add	r2,r2,r2
 200eab4:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 200eab8:	008080b4 	movhi	r2,514
 200eabc:	1088fb04 	addi	r2,r2,9196
 200eac0:	10c00117 	ldw	r3,4(r2)
 200eac4:	e0bff517 	ldw	r2,-44(fp)
 200eac8:	1884703a 	and	r2,r3,r2
 200eacc:	103ff426 	beq	r2,zero,200eaa0 <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 200ead0:	e0bff217 	ldw	r2,-56(fp)
 200ead4:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 200ead8:	e0bff217 	ldw	r2,-56(fp)
 200eadc:	10800044 	addi	r2,r2,1
 200eae0:	1085883a 	add	r2,r2,r2
 200eae4:	1085883a 	add	r2,r2,r2
 200eae8:	1087883a 	add	r3,r2,r2
 200eaec:	008080b4 	movhi	r2,514
 200eaf0:	1088fb04 	addi	r2,r2,9196
 200eaf4:	1885883a 	add	r2,r3,r2
 200eaf8:	10bffe04 	addi	r2,r2,-8
 200eafc:	e0bff315 	stw	r2,-52(fp)
 200eb00:	e0bff317 	ldw	r2,-52(fp)
 200eb04:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200eb08:	e0bff317 	ldw	r2,-52(fp)
 200eb0c:	10800317 	ldw	r2,12(r2)
 200eb10:	e0bff115 	stw	r2,-60(fp)
 200eb14:	00005e06 	br	200ec90 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 200eb18:	e0bff117 	ldw	r2,-60(fp)
 200eb1c:	10c00117 	ldw	r3,4(r2)
 200eb20:	00bfff04 	movi	r2,-4
 200eb24:	1884703a 	and	r2,r3,r2
 200eb28:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 200eb2c:	e0fffb17 	ldw	r3,-20(fp)
 200eb30:	e0bffa17 	ldw	r2,-24(fp)
 200eb34:	1885c83a 	sub	r2,r3,r2
 200eb38:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 200eb3c:	e0bff417 	ldw	r2,-48(fp)
 200eb40:	10800410 	cmplti	r2,r2,16
 200eb44:	1000331e 	bne	r2,zero,200ec14 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 200eb48:	e0fff117 	ldw	r3,-60(fp)
 200eb4c:	e0bffa17 	ldw	r2,-24(fp)
 200eb50:	1885883a 	add	r2,r3,r2
 200eb54:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 200eb58:	e0bffa17 	ldw	r2,-24(fp)
 200eb5c:	10c00054 	ori	r3,r2,1
 200eb60:	e0bff117 	ldw	r2,-60(fp)
 200eb64:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200eb68:	e0bff117 	ldw	r2,-60(fp)
 200eb6c:	10800317 	ldw	r2,12(r2)
 200eb70:	e0bff815 	stw	r2,-32(fp)
 200eb74:	e0bff117 	ldw	r2,-60(fp)
 200eb78:	10800217 	ldw	r2,8(r2)
 200eb7c:	e0bff715 	stw	r2,-36(fp)
 200eb80:	e0bff717 	ldw	r2,-36(fp)
 200eb84:	e0fff817 	ldw	r3,-32(fp)
 200eb88:	10c00315 	stw	r3,12(r2)
 200eb8c:	e0bff817 	ldw	r2,-32(fp)
 200eb90:	e0fff717 	ldw	r3,-36(fp)
 200eb94:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 200eb98:	00c080b4 	movhi	r3,514
 200eb9c:	18c8fd04 	addi	r3,r3,9204
 200eba0:	008080b4 	movhi	r2,514
 200eba4:	1088fd04 	addi	r2,r2,9204
 200eba8:	e13ffc17 	ldw	r4,-16(fp)
 200ebac:	11000315 	stw	r4,12(r2)
 200ebb0:	10800317 	ldw	r2,12(r2)
 200ebb4:	18800215 	stw	r2,8(r3)
 200ebb8:	008080b4 	movhi	r2,514
 200ebbc:	1088fd04 	addi	r2,r2,9204
 200ebc0:	e0fffc17 	ldw	r3,-16(fp)
 200ebc4:	18800315 	stw	r2,12(r3)
 200ebc8:	e0bffc17 	ldw	r2,-16(fp)
 200ebcc:	10c00317 	ldw	r3,12(r2)
 200ebd0:	e0bffc17 	ldw	r2,-16(fp)
 200ebd4:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 200ebd8:	e0bff417 	ldw	r2,-48(fp)
 200ebdc:	10800054 	ori	r2,r2,1
 200ebe0:	1007883a 	mov	r3,r2
 200ebe4:	e0bffc17 	ldw	r2,-16(fp)
 200ebe8:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 200ebec:	e0bff417 	ldw	r2,-48(fp)
 200ebf0:	e0fffc17 	ldw	r3,-16(fp)
 200ebf4:	1885883a 	add	r2,r3,r2
 200ebf8:	e0fff417 	ldw	r3,-48(fp)
 200ebfc:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200ec00:	e13ffe17 	ldw	r4,-8(fp)
 200ec04:	201685c0 	call	201685c <__malloc_unlock>
            return chunk2mem(victim);
 200ec08:	e0bff117 	ldw	r2,-60(fp)
 200ec0c:	10800204 	addi	r2,r2,8
 200ec10:	0000a106 	br	200ee98 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 200ec14:	e0bff417 	ldw	r2,-48(fp)
 200ec18:	10001a16 	blt	r2,zero,200ec84 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 200ec1c:	e0fff117 	ldw	r3,-60(fp)
 200ec20:	e0bffb17 	ldw	r2,-20(fp)
 200ec24:	1885883a 	add	r2,r3,r2
 200ec28:	e13ff117 	ldw	r4,-60(fp)
 200ec2c:	e0fffb17 	ldw	r3,-20(fp)
 200ec30:	20c7883a 	add	r3,r4,r3
 200ec34:	18c00117 	ldw	r3,4(r3)
 200ec38:	18c00054 	ori	r3,r3,1
 200ec3c:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200ec40:	e0bff117 	ldw	r2,-60(fp)
 200ec44:	10800317 	ldw	r2,12(r2)
 200ec48:	e0bff815 	stw	r2,-32(fp)
 200ec4c:	e0bff117 	ldw	r2,-60(fp)
 200ec50:	10800217 	ldw	r2,8(r2)
 200ec54:	e0bff715 	stw	r2,-36(fp)
 200ec58:	e0bff717 	ldw	r2,-36(fp)
 200ec5c:	e0fff817 	ldw	r3,-32(fp)
 200ec60:	10c00315 	stw	r3,12(r2)
 200ec64:	e0bff817 	ldw	r2,-32(fp)
 200ec68:	e0fff717 	ldw	r3,-36(fp)
 200ec6c:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200ec70:	e13ffe17 	ldw	r4,-8(fp)
 200ec74:	201685c0 	call	201685c <__malloc_unlock>
            return chunk2mem(victim);
 200ec78:	e0bff117 	ldw	r2,-60(fp)
 200ec7c:	10800204 	addi	r2,r2,8
 200ec80:	00008506 	br	200ee98 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200ec84:	e0bff117 	ldw	r2,-60(fp)
 200ec88:	10800317 	ldw	r2,12(r2)
 200ec8c:	e0bff115 	stw	r2,-60(fp)
 200ec90:	e0fff117 	ldw	r3,-60(fp)
 200ec94:	e0bff317 	ldw	r2,-52(fp)
 200ec98:	18bf9f1e 	bne	r3,r2,200eb18 <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 200ec9c:	e0bff317 	ldw	r2,-52(fp)
 200eca0:	10800204 	addi	r2,r2,8
 200eca4:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 200eca8:	e0bff217 	ldw	r2,-56(fp)
 200ecac:	10800044 	addi	r2,r2,1
 200ecb0:	e0bff215 	stw	r2,-56(fp)
 200ecb4:	e0bff217 	ldw	r2,-56(fp)
 200ecb8:	108000cc 	andi	r2,r2,3
 200ecbc:	103f921e 	bne	r2,zero,200eb08 <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 200ecc0:	e0bff617 	ldw	r2,-40(fp)
 200ecc4:	108000cc 	andi	r2,r2,3
 200ecc8:	10000a1e 	bne	r2,zero,200ecf4 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 200eccc:	008080b4 	movhi	r2,514
 200ecd0:	1088fb04 	addi	r2,r2,9196
 200ecd4:	00c080b4 	movhi	r3,514
 200ecd8:	18c8fb04 	addi	r3,r3,9196
 200ecdc:	19000117 	ldw	r4,4(r3)
 200ece0:	e0fff517 	ldw	r3,-44(fp)
 200ece4:	00c6303a 	nor	r3,zero,r3
 200ece8:	20c6703a 	and	r3,r4,r3
 200ecec:	10c00115 	stw	r3,4(r2)
          break;
 200ecf0:	00000a06 	br	200ed1c <_malloc_r+0x9ec>
        }
        --startidx;
 200ecf4:	e0bff617 	ldw	r2,-40(fp)
 200ecf8:	10bfffc4 	addi	r2,r2,-1
 200ecfc:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 200ed00:	e0bff917 	ldw	r2,-28(fp)
 200ed04:	10bffe04 	addi	r2,r2,-8
 200ed08:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 200ed0c:	e0bff917 	ldw	r2,-28(fp)
 200ed10:	10c00217 	ldw	r3,8(r2)
 200ed14:	e0bff917 	ldw	r2,-28(fp)
 200ed18:	18bfe926 	beq	r3,r2,200ecc0 <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 200ed1c:	e0bff517 	ldw	r2,-44(fp)
 200ed20:	1085883a 	add	r2,r2,r2
 200ed24:	e0bff515 	stw	r2,-44(fp)
 200ed28:	008080b4 	movhi	r2,514
 200ed2c:	1088fb04 	addi	r2,r2,9196
 200ed30:	10c00117 	ldw	r3,4(r2)
 200ed34:	e0bff517 	ldw	r2,-44(fp)
 200ed38:	18801036 	bltu	r3,r2,200ed7c <_malloc_r+0xa4c>
 200ed3c:	e0bff517 	ldw	r2,-44(fp)
 200ed40:	10000e26 	beq	r2,zero,200ed7c <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 200ed44:	00000606 	br	200ed60 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 200ed48:	e0bff217 	ldw	r2,-56(fp)
 200ed4c:	10800104 	addi	r2,r2,4
 200ed50:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 200ed54:	e0bff517 	ldw	r2,-44(fp)
 200ed58:	1085883a 	add	r2,r2,r2
 200ed5c:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 200ed60:	008080b4 	movhi	r2,514
 200ed64:	1088fb04 	addi	r2,r2,9196
 200ed68:	10c00117 	ldw	r3,4(r2)
 200ed6c:	e0bff517 	ldw	r2,-44(fp)
 200ed70:	1884703a 	and	r2,r3,r2
 200ed74:	103ff426 	beq	r2,zero,200ed48 <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 200ed78:	003f5506 	br	200ead0 <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 200ed7c:	008080b4 	movhi	r2,514
 200ed80:	1088fb04 	addi	r2,r2,9196
 200ed84:	10800217 	ldw	r2,8(r2)
 200ed88:	10c00117 	ldw	r3,4(r2)
 200ed8c:	00bfff04 	movi	r2,-4
 200ed90:	1886703a 	and	r3,r3,r2
 200ed94:	e0bffa17 	ldw	r2,-24(fp)
 200ed98:	1885c83a 	sub	r2,r3,r2
 200ed9c:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200eda0:	008080b4 	movhi	r2,514
 200eda4:	1088fb04 	addi	r2,r2,9196
 200eda8:	10800217 	ldw	r2,8(r2)
 200edac:	10c00117 	ldw	r3,4(r2)
 200edb0:	00bfff04 	movi	r2,-4
 200edb4:	1886703a 	and	r3,r3,r2
 200edb8:	e0bffa17 	ldw	r2,-24(fp)
 200edbc:	18800336 	bltu	r3,r2,200edcc <_malloc_r+0xa9c>
 200edc0:	e0bff417 	ldw	r2,-48(fp)
 200edc4:	10800408 	cmpgei	r2,r2,16
 200edc8:	10001b1e 	bne	r2,zero,200ee38 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 200edcc:	e17ffa17 	ldw	r5,-24(fp)
 200edd0:	e13ffe17 	ldw	r4,-8(fp)
 200edd4:	200df7c0 	call	200df7c <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 200edd8:	008080b4 	movhi	r2,514
 200eddc:	1088fb04 	addi	r2,r2,9196
 200ede0:	10800217 	ldw	r2,8(r2)
 200ede4:	10c00117 	ldw	r3,4(r2)
 200ede8:	00bfff04 	movi	r2,-4
 200edec:	1886703a 	and	r3,r3,r2
 200edf0:	e0bffa17 	ldw	r2,-24(fp)
 200edf4:	1885c83a 	sub	r2,r3,r2
 200edf8:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200edfc:	008080b4 	movhi	r2,514
 200ee00:	1088fb04 	addi	r2,r2,9196
 200ee04:	10800217 	ldw	r2,8(r2)
 200ee08:	10c00117 	ldw	r3,4(r2)
 200ee0c:	00bfff04 	movi	r2,-4
 200ee10:	1886703a 	and	r3,r3,r2
 200ee14:	e0bffa17 	ldw	r2,-24(fp)
 200ee18:	18800336 	bltu	r3,r2,200ee28 <_malloc_r+0xaf8>
 200ee1c:	e0bff417 	ldw	r2,-48(fp)
 200ee20:	10800408 	cmpgei	r2,r2,16
 200ee24:	1000041e 	bne	r2,zero,200ee38 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 200ee28:	e13ffe17 	ldw	r4,-8(fp)
 200ee2c:	201685c0 	call	201685c <__malloc_unlock>
      return 0; /* propagate failure */
 200ee30:	0005883a 	mov	r2,zero
 200ee34:	00001806 	br	200ee98 <_malloc_r+0xb68>
    }
  }

  victim = top;
 200ee38:	008080b4 	movhi	r2,514
 200ee3c:	1088fb04 	addi	r2,r2,9196
 200ee40:	10800217 	ldw	r2,8(r2)
 200ee44:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 200ee48:	e0bffa17 	ldw	r2,-24(fp)
 200ee4c:	10c00054 	ori	r3,r2,1
 200ee50:	e0bff117 	ldw	r2,-60(fp)
 200ee54:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 200ee58:	008080b4 	movhi	r2,514
 200ee5c:	1088fb04 	addi	r2,r2,9196
 200ee60:	e13ff117 	ldw	r4,-60(fp)
 200ee64:	e0fffa17 	ldw	r3,-24(fp)
 200ee68:	20c7883a 	add	r3,r4,r3
 200ee6c:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 200ee70:	008080b4 	movhi	r2,514
 200ee74:	1088fb04 	addi	r2,r2,9196
 200ee78:	10800217 	ldw	r2,8(r2)
 200ee7c:	e0fff417 	ldw	r3,-48(fp)
 200ee80:	18c00054 	ori	r3,r3,1
 200ee84:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 200ee88:	e13ffe17 	ldw	r4,-8(fp)
 200ee8c:	201685c0 	call	201685c <__malloc_unlock>
  return chunk2mem(victim);
 200ee90:	e0bff117 	ldw	r2,-60(fp)
 200ee94:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200ee98:	e037883a 	mov	sp,fp
 200ee9c:	dfc00117 	ldw	ra,4(sp)
 200eea0:	df000017 	ldw	fp,0(sp)
 200eea4:	dec00204 	addi	sp,sp,8
 200eea8:	f800283a 	ret

0200eeac <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 200eeac:	defff704 	addi	sp,sp,-36
 200eeb0:	df000815 	stw	fp,32(sp)
 200eeb4:	df000804 	addi	fp,sp,32
 200eeb8:	e13ffd15 	stw	r4,-12(fp)
 200eebc:	e17ffe15 	stw	r5,-8(fp)
 200eec0:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 200eec4:	e0bffd17 	ldw	r2,-12(fp)
 200eec8:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 200eecc:	e0bffe17 	ldw	r2,-8(fp)
 200eed0:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200eed4:	00001006 	br	200ef18 <memchr+0x6c>
    {
      if (!length--)
 200eed8:	e0bfff17 	ldw	r2,-4(fp)
 200eedc:	10ffffc4 	addi	r3,r2,-1
 200eee0:	e0ffff15 	stw	r3,-4(fp)
 200eee4:	1000021e 	bne	r2,zero,200eef0 <memchr+0x44>
        return NULL;
 200eee8:	0005883a 	mov	r2,zero
 200eeec:	00005a06 	br	200f058 <memchr+0x1ac>
      if (*src == d)
 200eef0:	e0bff817 	ldw	r2,-32(fp)
 200eef4:	10800003 	ldbu	r2,0(r2)
 200eef8:	10c03fcc 	andi	r3,r2,255
 200eefc:	e0bffc03 	ldbu	r2,-16(fp)
 200ef00:	1880021e 	bne	r3,r2,200ef0c <memchr+0x60>
        return (void *) src;
 200ef04:	e0bff817 	ldw	r2,-32(fp)
 200ef08:	00005306 	br	200f058 <memchr+0x1ac>
      src++;
 200ef0c:	e0bff817 	ldw	r2,-32(fp)
 200ef10:	10800044 	addi	r2,r2,1
 200ef14:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200ef18:	e0bff817 	ldw	r2,-32(fp)
 200ef1c:	108000cc 	andi	r2,r2,3
 200ef20:	103fed1e 	bne	r2,zero,200eed8 <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 200ef24:	e0bfff17 	ldw	r2,-4(fp)
 200ef28:	10800130 	cmpltui	r2,r2,4
 200ef2c:	1000451e 	bne	r2,zero,200f044 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 200ef30:	e0bff817 	ldw	r2,-32(fp)
 200ef34:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 200ef38:	e0bffc03 	ldbu	r2,-16(fp)
 200ef3c:	1006923a 	slli	r3,r2,8
 200ef40:	e0bffc03 	ldbu	r2,-16(fp)
 200ef44:	1884b03a 	or	r2,r3,r2
 200ef48:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 200ef4c:	e0bffa17 	ldw	r2,-24(fp)
 200ef50:	1004943a 	slli	r2,r2,16
 200ef54:	e0fffa17 	ldw	r3,-24(fp)
 200ef58:	1884b03a 	or	r2,r3,r2
 200ef5c:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200ef60:	00800804 	movi	r2,32
 200ef64:	e0bffb15 	stw	r2,-20(fp)
 200ef68:	00000906 	br	200ef90 <memchr+0xe4>
        mask = (mask << i) | mask;
 200ef6c:	e0fffa17 	ldw	r3,-24(fp)
 200ef70:	e0bffb17 	ldw	r2,-20(fp)
 200ef74:	1884983a 	sll	r2,r3,r2
 200ef78:	e0fffa17 	ldw	r3,-24(fp)
 200ef7c:	1884b03a 	or	r2,r3,r2
 200ef80:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200ef84:	e0bffb17 	ldw	r2,-20(fp)
 200ef88:	1085883a 	add	r2,r2,r2
 200ef8c:	e0bffb15 	stw	r2,-20(fp)
 200ef90:	e0bffb17 	ldw	r2,-20(fp)
 200ef94:	10800830 	cmpltui	r2,r2,32
 200ef98:	103ff41e 	bne	r2,zero,200ef6c <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200ef9c:	00001706 	br	200effc <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 200efa0:	e0bff917 	ldw	r2,-28(fp)
 200efa4:	10c00017 	ldw	r3,0(r2)
 200efa8:	e0bffa17 	ldw	r2,-24(fp)
 200efac:	1886f03a 	xor	r3,r3,r2
 200efb0:	00bfbff4 	movhi	r2,65279
 200efb4:	10bfbfc4 	addi	r2,r2,-257
 200efb8:	1887883a 	add	r3,r3,r2
 200efbc:	e0bff917 	ldw	r2,-28(fp)
 200efc0:	11000017 	ldw	r4,0(r2)
 200efc4:	e0bffa17 	ldw	r2,-24(fp)
 200efc8:	2084f03a 	xor	r2,r4,r2
 200efcc:	0084303a 	nor	r2,zero,r2
 200efd0:	1886703a 	and	r3,r3,r2
 200efd4:	00a02074 	movhi	r2,32897
 200efd8:	10a02004 	addi	r2,r2,-32640
 200efdc:	1884703a 	and	r2,r3,r2
 200efe0:	10000a1e 	bne	r2,zero,200f00c <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 200efe4:	e0bfff17 	ldw	r2,-4(fp)
 200efe8:	10bfff04 	addi	r2,r2,-4
 200efec:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 200eff0:	e0bff917 	ldw	r2,-28(fp)
 200eff4:	10800104 	addi	r2,r2,4
 200eff8:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200effc:	e0bfff17 	ldw	r2,-4(fp)
 200f000:	10800128 	cmpgeui	r2,r2,4
 200f004:	103fe61e 	bne	r2,zero,200efa0 <memchr+0xf4>
 200f008:	00000106 	br	200f010 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 200f00c:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 200f010:	e0bff917 	ldw	r2,-28(fp)
 200f014:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200f018:	00000a06 	br	200f044 <memchr+0x198>
    {
      if (*src == d)
 200f01c:	e0bff817 	ldw	r2,-32(fp)
 200f020:	10800003 	ldbu	r2,0(r2)
 200f024:	10c03fcc 	andi	r3,r2,255
 200f028:	e0bffc03 	ldbu	r2,-16(fp)
 200f02c:	1880021e 	bne	r3,r2,200f038 <memchr+0x18c>
        return (void *) src;
 200f030:	e0bff817 	ldw	r2,-32(fp)
 200f034:	00000806 	br	200f058 <memchr+0x1ac>
      src++;
 200f038:	e0bff817 	ldw	r2,-32(fp)
 200f03c:	10800044 	addi	r2,r2,1
 200f040:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200f044:	e0bfff17 	ldw	r2,-4(fp)
 200f048:	10ffffc4 	addi	r3,r2,-1
 200f04c:	e0ffff15 	stw	r3,-4(fp)
 200f050:	103ff21e 	bne	r2,zero,200f01c <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 200f054:	0005883a 	mov	r2,zero
}
 200f058:	e037883a 	mov	sp,fp
 200f05c:	df000017 	ldw	fp,0(sp)
 200f060:	dec00104 	addi	sp,sp,4
 200f064:	f800283a 	ret

0200f068 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 200f068:	defff804 	addi	sp,sp,-32
 200f06c:	df000715 	stw	fp,28(sp)
 200f070:	df000704 	addi	fp,sp,28
 200f074:	e13ffd15 	stw	r4,-12(fp)
 200f078:	e17ffe15 	stw	r5,-8(fp)
 200f07c:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 200f080:	e0bffd17 	ldw	r2,-12(fp)
 200f084:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 200f088:	e0bffe17 	ldw	r2,-8(fp)
 200f08c:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200f090:	e0fffa17 	ldw	r3,-24(fp)
 200f094:	e0bff917 	ldw	r2,-28(fp)
 200f098:	18801d2e 	bgeu	r3,r2,200f110 <memmove+0xa8>
 200f09c:	e0fffa17 	ldw	r3,-24(fp)
 200f0a0:	e0bfff17 	ldw	r2,-4(fp)
 200f0a4:	1885883a 	add	r2,r3,r2
 200f0a8:	e0fff917 	ldw	r3,-28(fp)
 200f0ac:	1880182e 	bgeu	r3,r2,200f110 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 200f0b0:	e0fffa17 	ldw	r3,-24(fp)
 200f0b4:	e0bfff17 	ldw	r2,-4(fp)
 200f0b8:	1885883a 	add	r2,r3,r2
 200f0bc:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 200f0c0:	e0fff917 	ldw	r3,-28(fp)
 200f0c4:	e0bfff17 	ldw	r2,-4(fp)
 200f0c8:	1885883a 	add	r2,r3,r2
 200f0cc:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 200f0d0:	00000a06 	br	200f0fc <memmove+0x94>
	{
	  *--dst = *--src;
 200f0d4:	e0bff917 	ldw	r2,-28(fp)
 200f0d8:	10bfffc4 	addi	r2,r2,-1
 200f0dc:	e0bff915 	stw	r2,-28(fp)
 200f0e0:	e0bffa17 	ldw	r2,-24(fp)
 200f0e4:	10bfffc4 	addi	r2,r2,-1
 200f0e8:	e0bffa15 	stw	r2,-24(fp)
 200f0ec:	e0bffa17 	ldw	r2,-24(fp)
 200f0f0:	10c00003 	ldbu	r3,0(r2)
 200f0f4:	e0bff917 	ldw	r2,-28(fp)
 200f0f8:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 200f0fc:	e0bfff17 	ldw	r2,-4(fp)
 200f100:	10ffffc4 	addi	r3,r2,-1
 200f104:	e0ffff15 	stw	r3,-4(fp)
 200f108:	103ff21e 	bne	r2,zero,200f0d4 <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200f10c:	00005306 	br	200f25c <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 200f110:	e0bfff17 	ldw	r2,-4(fp)
 200f114:	10800430 	cmpltui	r2,r2,16
 200f118:	10004c1e 	bne	r2,zero,200f24c <memmove+0x1e4>
 200f11c:	e0fffa17 	ldw	r3,-24(fp)
 200f120:	e0bff917 	ldw	r2,-28(fp)
 200f124:	1884b03a 	or	r2,r3,r2
 200f128:	108000cc 	andi	r2,r2,3
 200f12c:	1000471e 	bne	r2,zero,200f24c <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 200f130:	e0bff917 	ldw	r2,-28(fp)
 200f134:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 200f138:	e0bffa17 	ldw	r2,-24(fp)
 200f13c:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200f140:	00002306 	br	200f1d0 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 200f144:	e0bffb17 	ldw	r2,-20(fp)
 200f148:	10c00104 	addi	r3,r2,4
 200f14c:	e0fffb15 	stw	r3,-20(fp)
 200f150:	e0fffc17 	ldw	r3,-16(fp)
 200f154:	19000104 	addi	r4,r3,4
 200f158:	e13ffc15 	stw	r4,-16(fp)
 200f15c:	18c00017 	ldw	r3,0(r3)
 200f160:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200f164:	e0bffb17 	ldw	r2,-20(fp)
 200f168:	10c00104 	addi	r3,r2,4
 200f16c:	e0fffb15 	stw	r3,-20(fp)
 200f170:	e0fffc17 	ldw	r3,-16(fp)
 200f174:	19000104 	addi	r4,r3,4
 200f178:	e13ffc15 	stw	r4,-16(fp)
 200f17c:	18c00017 	ldw	r3,0(r3)
 200f180:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200f184:	e0bffb17 	ldw	r2,-20(fp)
 200f188:	10c00104 	addi	r3,r2,4
 200f18c:	e0fffb15 	stw	r3,-20(fp)
 200f190:	e0fffc17 	ldw	r3,-16(fp)
 200f194:	19000104 	addi	r4,r3,4
 200f198:	e13ffc15 	stw	r4,-16(fp)
 200f19c:	18c00017 	ldw	r3,0(r3)
 200f1a0:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200f1a4:	e0bffb17 	ldw	r2,-20(fp)
 200f1a8:	10c00104 	addi	r3,r2,4
 200f1ac:	e0fffb15 	stw	r3,-20(fp)
 200f1b0:	e0fffc17 	ldw	r3,-16(fp)
 200f1b4:	19000104 	addi	r4,r3,4
 200f1b8:	e13ffc15 	stw	r4,-16(fp)
 200f1bc:	18c00017 	ldw	r3,0(r3)
 200f1c0:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 200f1c4:	e0bfff17 	ldw	r2,-4(fp)
 200f1c8:	10bffc04 	addi	r2,r2,-16
 200f1cc:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200f1d0:	e0bfff17 	ldw	r2,-4(fp)
 200f1d4:	10800428 	cmpgeui	r2,r2,16
 200f1d8:	103fda1e 	bne	r2,zero,200f144 <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200f1dc:	00000b06 	br	200f20c <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 200f1e0:	e0bffb17 	ldw	r2,-20(fp)
 200f1e4:	10c00104 	addi	r3,r2,4
 200f1e8:	e0fffb15 	stw	r3,-20(fp)
 200f1ec:	e0fffc17 	ldw	r3,-16(fp)
 200f1f0:	19000104 	addi	r4,r3,4
 200f1f4:	e13ffc15 	stw	r4,-16(fp)
 200f1f8:	18c00017 	ldw	r3,0(r3)
 200f1fc:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 200f200:	e0bfff17 	ldw	r2,-4(fp)
 200f204:	10bfff04 	addi	r2,r2,-4
 200f208:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200f20c:	e0bfff17 	ldw	r2,-4(fp)
 200f210:	10800128 	cmpgeui	r2,r2,4
 200f214:	103ff21e 	bne	r2,zero,200f1e0 <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 200f218:	e0bffb17 	ldw	r2,-20(fp)
 200f21c:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 200f220:	e0bffc17 	ldw	r2,-16(fp)
 200f224:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 200f228:	00000806 	br	200f24c <memmove+0x1e4>
        {
          *dst++ = *src++;
 200f22c:	e0bff917 	ldw	r2,-28(fp)
 200f230:	10c00044 	addi	r3,r2,1
 200f234:	e0fff915 	stw	r3,-28(fp)
 200f238:	e0fffa17 	ldw	r3,-24(fp)
 200f23c:	19000044 	addi	r4,r3,1
 200f240:	e13ffa15 	stw	r4,-24(fp)
 200f244:	18c00003 	ldbu	r3,0(r3)
 200f248:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 200f24c:	e0bfff17 	ldw	r2,-4(fp)
 200f250:	10ffffc4 	addi	r3,r2,-1
 200f254:	e0ffff15 	stw	r3,-4(fp)
 200f258:	103ff41e 	bne	r2,zero,200f22c <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 200f25c:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200f260:	e037883a 	mov	sp,fp
 200f264:	df000017 	ldw	fp,0(sp)
 200f268:	dec00104 	addi	sp,sp,4
 200f26c:	f800283a 	ret

0200f270 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 200f270:	defffa04 	addi	sp,sp,-24
 200f274:	dfc00515 	stw	ra,20(sp)
 200f278:	df000415 	stw	fp,16(sp)
 200f27c:	df000404 	addi	fp,sp,16
 200f280:	e13ffe15 	stw	r4,-8(fp)
 200f284:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 200f288:	e0bffe17 	ldw	r2,-8(fp)
 200f28c:	10801317 	ldw	r2,76(r2)
 200f290:	10000c1e 	bne	r2,zero,200f2c4 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 200f294:	01800844 	movi	r6,33
 200f298:	01400104 	movi	r5,4
 200f29c:	e13ffe17 	ldw	r4,-8(fp)
 200f2a0:	20132fc0 	call	20132fc <_calloc_r>
 200f2a4:	1007883a 	mov	r3,r2
 200f2a8:	e0bffe17 	ldw	r2,-8(fp)
 200f2ac:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 200f2b0:	e0bffe17 	ldw	r2,-8(fp)
 200f2b4:	10801317 	ldw	r2,76(r2)
 200f2b8:	1000021e 	bne	r2,zero,200f2c4 <_Balloc+0x54>
	{
	  return NULL;
 200f2bc:	0005883a 	mov	r2,zero
 200f2c0:	00003206 	br	200f38c <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 200f2c4:	e0bffe17 	ldw	r2,-8(fp)
 200f2c8:	10c01317 	ldw	r3,76(r2)
 200f2cc:	e0bfff17 	ldw	r2,-4(fp)
 200f2d0:	1085883a 	add	r2,r2,r2
 200f2d4:	1085883a 	add	r2,r2,r2
 200f2d8:	1885883a 	add	r2,r3,r2
 200f2dc:	10800017 	ldw	r2,0(r2)
 200f2e0:	e0bffc15 	stw	r2,-16(fp)
 200f2e4:	e0bffc17 	ldw	r2,-16(fp)
 200f2e8:	10000a26 	beq	r2,zero,200f314 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 200f2ec:	e0bffe17 	ldw	r2,-8(fp)
 200f2f0:	10c01317 	ldw	r3,76(r2)
 200f2f4:	e0bfff17 	ldw	r2,-4(fp)
 200f2f8:	1085883a 	add	r2,r2,r2
 200f2fc:	1085883a 	add	r2,r2,r2
 200f300:	1885883a 	add	r2,r3,r2
 200f304:	e0fffc17 	ldw	r3,-16(fp)
 200f308:	18c00017 	ldw	r3,0(r3)
 200f30c:	10c00015 	stw	r3,0(r2)
 200f310:	00001706 	br	200f370 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 200f314:	00c00044 	movi	r3,1
 200f318:	e0bfff17 	ldw	r2,-4(fp)
 200f31c:	1884983a 	sll	r2,r3,r2
 200f320:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 200f324:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 200f328:	10800144 	addi	r2,r2,5
 200f32c:	1085883a 	add	r2,r2,r2
 200f330:	1085883a 	add	r2,r2,r2
 200f334:	100d883a 	mov	r6,r2
 200f338:	01400044 	movi	r5,1
 200f33c:	e13ffe17 	ldw	r4,-8(fp)
 200f340:	20132fc0 	call	20132fc <_calloc_r>
 200f344:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 200f348:	e0bffc17 	ldw	r2,-16(fp)
 200f34c:	1000021e 	bne	r2,zero,200f358 <_Balloc+0xe8>
 200f350:	0005883a 	mov	r2,zero
 200f354:	00000d06 	br	200f38c <_Balloc+0x11c>
      rv->_k = k;
 200f358:	e0bffc17 	ldw	r2,-16(fp)
 200f35c:	e0ffff17 	ldw	r3,-4(fp)
 200f360:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 200f364:	e0bffc17 	ldw	r2,-16(fp)
 200f368:	e0fffd17 	ldw	r3,-12(fp)
 200f36c:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 200f370:	e0bffc17 	ldw	r2,-16(fp)
 200f374:	10000415 	stw	zero,16(r2)
 200f378:	e0bffc17 	ldw	r2,-16(fp)
 200f37c:	10c00417 	ldw	r3,16(r2)
 200f380:	e0bffc17 	ldw	r2,-16(fp)
 200f384:	10c00315 	stw	r3,12(r2)
  return rv;
 200f388:	e0bffc17 	ldw	r2,-16(fp)
}
 200f38c:	e037883a 	mov	sp,fp
 200f390:	dfc00117 	ldw	ra,4(sp)
 200f394:	df000017 	ldw	fp,0(sp)
 200f398:	dec00204 	addi	sp,sp,8
 200f39c:	f800283a 	ret

0200f3a0 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 200f3a0:	defffd04 	addi	sp,sp,-12
 200f3a4:	df000215 	stw	fp,8(sp)
 200f3a8:	df000204 	addi	fp,sp,8
 200f3ac:	e13ffe15 	stw	r4,-8(fp)
 200f3b0:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 200f3b4:	e0bfff17 	ldw	r2,-4(fp)
 200f3b8:	10001326 	beq	r2,zero,200f408 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 200f3bc:	e0bffe17 	ldw	r2,-8(fp)
 200f3c0:	10c01317 	ldw	r3,76(r2)
 200f3c4:	e0bfff17 	ldw	r2,-4(fp)
 200f3c8:	10800117 	ldw	r2,4(r2)
 200f3cc:	1085883a 	add	r2,r2,r2
 200f3d0:	1085883a 	add	r2,r2,r2
 200f3d4:	1885883a 	add	r2,r3,r2
 200f3d8:	10c00017 	ldw	r3,0(r2)
 200f3dc:	e0bfff17 	ldw	r2,-4(fp)
 200f3e0:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 200f3e4:	e0bffe17 	ldw	r2,-8(fp)
 200f3e8:	10c01317 	ldw	r3,76(r2)
 200f3ec:	e0bfff17 	ldw	r2,-4(fp)
 200f3f0:	10800117 	ldw	r2,4(r2)
 200f3f4:	1085883a 	add	r2,r2,r2
 200f3f8:	1085883a 	add	r2,r2,r2
 200f3fc:	1885883a 	add	r2,r3,r2
 200f400:	e0ffff17 	ldw	r3,-4(fp)
 200f404:	10c00015 	stw	r3,0(r2)
    }
}
 200f408:	0001883a 	nop
 200f40c:	e037883a 	mov	sp,fp
 200f410:	df000017 	ldw	fp,0(sp)
 200f414:	dec00104 	addi	sp,sp,4
 200f418:	f800283a 	ret

0200f41c <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 200f41c:	defff304 	addi	sp,sp,-52
 200f420:	dfc00c15 	stw	ra,48(sp)
 200f424:	df000b15 	stw	fp,44(sp)
 200f428:	df000b04 	addi	fp,sp,44
 200f42c:	e13ffc15 	stw	r4,-16(fp)
 200f430:	e17ffd15 	stw	r5,-12(fp)
 200f434:	e1bffe15 	stw	r6,-8(fp)
 200f438:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 200f43c:	e0bffd17 	ldw	r2,-12(fp)
 200f440:	10800417 	ldw	r2,16(r2)
 200f444:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 200f448:	e0bffd17 	ldw	r2,-12(fp)
 200f44c:	10800504 	addi	r2,r2,20
 200f450:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 200f454:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 200f458:	e0bff617 	ldw	r2,-40(fp)
 200f45c:	10800017 	ldw	r2,0(r2)
 200f460:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 200f464:	e0bff817 	ldw	r2,-32(fp)
 200f468:	10ffffcc 	andi	r3,r2,65535
 200f46c:	e0bffe17 	ldw	r2,-8(fp)
 200f470:	1887383a 	mul	r3,r3,r2
 200f474:	e0bfff17 	ldw	r2,-4(fp)
 200f478:	1885883a 	add	r2,r3,r2
 200f47c:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 200f480:	e0bff817 	ldw	r2,-32(fp)
 200f484:	1006d43a 	srli	r3,r2,16
 200f488:	e0bffe17 	ldw	r2,-8(fp)
 200f48c:	1887383a 	mul	r3,r3,r2
 200f490:	e0bff917 	ldw	r2,-28(fp)
 200f494:	1004d43a 	srli	r2,r2,16
 200f498:	1885883a 	add	r2,r3,r2
 200f49c:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 200f4a0:	e0bffa17 	ldw	r2,-24(fp)
 200f4a4:	1004d43a 	srli	r2,r2,16
 200f4a8:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 200f4ac:	e0bff617 	ldw	r2,-40(fp)
 200f4b0:	10c00104 	addi	r3,r2,4
 200f4b4:	e0fff615 	stw	r3,-40(fp)
 200f4b8:	e0fffa17 	ldw	r3,-24(fp)
 200f4bc:	1808943a 	slli	r4,r3,16
 200f4c0:	e0fff917 	ldw	r3,-28(fp)
 200f4c4:	18ffffcc 	andi	r3,r3,65535
 200f4c8:	20c7883a 	add	r3,r4,r3
 200f4cc:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 200f4d0:	e0bff517 	ldw	r2,-44(fp)
 200f4d4:	10800044 	addi	r2,r2,1
 200f4d8:	e0bff515 	stw	r2,-44(fp)
 200f4dc:	e0fff517 	ldw	r3,-44(fp)
 200f4e0:	e0bff717 	ldw	r2,-36(fp)
 200f4e4:	18bfdc16 	blt	r3,r2,200f458 <__multadd+0x3c>
  if (a)
 200f4e8:	e0bfff17 	ldw	r2,-4(fp)
 200f4ec:	10002a26 	beq	r2,zero,200f598 <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 200f4f0:	e0bffd17 	ldw	r2,-12(fp)
 200f4f4:	10800217 	ldw	r2,8(r2)
 200f4f8:	e0fff717 	ldw	r3,-36(fp)
 200f4fc:	18801916 	blt	r3,r2,200f564 <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 200f500:	e0bffd17 	ldw	r2,-12(fp)
 200f504:	10800117 	ldw	r2,4(r2)
 200f508:	10800044 	addi	r2,r2,1
 200f50c:	100b883a 	mov	r5,r2
 200f510:	e13ffc17 	ldw	r4,-16(fp)
 200f514:	200f2700 	call	200f270 <_Balloc>
 200f518:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 200f51c:	e0bffb17 	ldw	r2,-20(fp)
 200f520:	10c00304 	addi	r3,r2,12
 200f524:	e0bffd17 	ldw	r2,-12(fp)
 200f528:	11000304 	addi	r4,r2,12
 200f52c:	e0bffd17 	ldw	r2,-12(fp)
 200f530:	10800417 	ldw	r2,16(r2)
 200f534:	10800084 	addi	r2,r2,2
 200f538:	1085883a 	add	r2,r2,r2
 200f53c:	1085883a 	add	r2,r2,r2
 200f540:	100d883a 	mov	r6,r2
 200f544:	200b883a 	mov	r5,r4
 200f548:	1809883a 	mov	r4,r3
 200f54c:	20076c80 	call	20076c8 <memcpy>
	  Bfree (ptr, b);
 200f550:	e17ffd17 	ldw	r5,-12(fp)
 200f554:	e13ffc17 	ldw	r4,-16(fp)
 200f558:	200f3a00 	call	200f3a0 <_Bfree>
	  b = b1;
 200f55c:	e0bffb17 	ldw	r2,-20(fp)
 200f560:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 200f564:	e0bff717 	ldw	r2,-36(fp)
 200f568:	10c00044 	addi	r3,r2,1
 200f56c:	e0fff715 	stw	r3,-36(fp)
 200f570:	e0ffff17 	ldw	r3,-4(fp)
 200f574:	e13ffd17 	ldw	r4,-12(fp)
 200f578:	10800144 	addi	r2,r2,5
 200f57c:	1085883a 	add	r2,r2,r2
 200f580:	1085883a 	add	r2,r2,r2
 200f584:	2085883a 	add	r2,r4,r2
 200f588:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 200f58c:	e0bffd17 	ldw	r2,-12(fp)
 200f590:	e0fff717 	ldw	r3,-36(fp)
 200f594:	10c00415 	stw	r3,16(r2)
    }
  return b;
 200f598:	e0bffd17 	ldw	r2,-12(fp)
}
 200f59c:	e037883a 	mov	sp,fp
 200f5a0:	dfc00117 	ldw	ra,4(sp)
 200f5a4:	df000017 	ldw	fp,0(sp)
 200f5a8:	dec00204 	addi	sp,sp,8
 200f5ac:	f800283a 	ret

0200f5b0 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 200f5b0:	defff504 	addi	sp,sp,-44
 200f5b4:	dfc00a15 	stw	ra,40(sp)
 200f5b8:	df000915 	stw	fp,36(sp)
 200f5bc:	df000904 	addi	fp,sp,36
 200f5c0:	e13ffc15 	stw	r4,-16(fp)
 200f5c4:	e17ffd15 	stw	r5,-12(fp)
 200f5c8:	e1bffe15 	stw	r6,-8(fp)
 200f5cc:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 200f5d0:	e0bfff17 	ldw	r2,-4(fp)
 200f5d4:	10800204 	addi	r2,r2,8
 200f5d8:	01400244 	movi	r5,9
 200f5dc:	1009883a 	mov	r4,r2
 200f5e0:	20074f40 	call	20074f4 <__divsi3>
 200f5e4:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 200f5e8:	e03ff915 	stw	zero,-28(fp)
 200f5ec:	00800044 	movi	r2,1
 200f5f0:	e0bffa15 	stw	r2,-24(fp)
 200f5f4:	00000606 	br	200f610 <__s2b+0x60>
 200f5f8:	e0bffa17 	ldw	r2,-24(fp)
 200f5fc:	1085883a 	add	r2,r2,r2
 200f600:	e0bffa15 	stw	r2,-24(fp)
 200f604:	e0bff917 	ldw	r2,-28(fp)
 200f608:	10800044 	addi	r2,r2,1
 200f60c:	e0bff915 	stw	r2,-28(fp)
 200f610:	e0bffb17 	ldw	r2,-20(fp)
 200f614:	e0fffa17 	ldw	r3,-24(fp)
 200f618:	18bff716 	blt	r3,r2,200f5f8 <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 200f61c:	e17ff917 	ldw	r5,-28(fp)
 200f620:	e13ffc17 	ldw	r4,-16(fp)
 200f624:	200f2700 	call	200f270 <_Balloc>
 200f628:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 200f62c:	e0bff717 	ldw	r2,-36(fp)
 200f630:	e0c00217 	ldw	r3,8(fp)
 200f634:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200f638:	e0bff717 	ldw	r2,-36(fp)
 200f63c:	00c00044 	movi	r3,1
 200f640:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 200f644:	00800244 	movi	r2,9
 200f648:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 200f64c:	e0bffe17 	ldw	r2,-8(fp)
 200f650:	10800290 	cmplti	r2,r2,10
 200f654:	10001b1e 	bne	r2,zero,200f6c4 <__s2b+0x114>
    {
      s += 9;
 200f658:	e0bffd17 	ldw	r2,-12(fp)
 200f65c:	10800244 	addi	r2,r2,9
 200f660:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 200f664:	e0bffd17 	ldw	r2,-12(fp)
 200f668:	10c00044 	addi	r3,r2,1
 200f66c:	e0fffd15 	stw	r3,-12(fp)
 200f670:	10800003 	ldbu	r2,0(r2)
 200f674:	10803fcc 	andi	r2,r2,255
 200f678:	1080201c 	xori	r2,r2,128
 200f67c:	10bfe004 	addi	r2,r2,-128
 200f680:	10bff404 	addi	r2,r2,-48
 200f684:	100f883a 	mov	r7,r2
 200f688:	01800284 	movi	r6,10
 200f68c:	e17ff717 	ldw	r5,-36(fp)
 200f690:	e13ffc17 	ldw	r4,-16(fp)
 200f694:	200f41c0 	call	200f41c <__multadd>
 200f698:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 200f69c:	e0bff817 	ldw	r2,-32(fp)
 200f6a0:	10800044 	addi	r2,r2,1
 200f6a4:	e0bff815 	stw	r2,-32(fp)
 200f6a8:	e0fff817 	ldw	r3,-32(fp)
 200f6ac:	e0bffe17 	ldw	r2,-8(fp)
 200f6b0:	18bfec16 	blt	r3,r2,200f664 <__s2b+0xb4>
      s++;
 200f6b4:	e0bffd17 	ldw	r2,-12(fp)
 200f6b8:	10800044 	addi	r2,r2,1
 200f6bc:	e0bffd15 	stw	r2,-12(fp)
 200f6c0:	00001506 	br	200f718 <__s2b+0x168>
    }
  else
    s += 10;
 200f6c4:	e0bffd17 	ldw	r2,-12(fp)
 200f6c8:	10800284 	addi	r2,r2,10
 200f6cc:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 200f6d0:	00001106 	br	200f718 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 200f6d4:	e0bffd17 	ldw	r2,-12(fp)
 200f6d8:	10c00044 	addi	r3,r2,1
 200f6dc:	e0fffd15 	stw	r3,-12(fp)
 200f6e0:	10800003 	ldbu	r2,0(r2)
 200f6e4:	10803fcc 	andi	r2,r2,255
 200f6e8:	1080201c 	xori	r2,r2,128
 200f6ec:	10bfe004 	addi	r2,r2,-128
 200f6f0:	10bff404 	addi	r2,r2,-48
 200f6f4:	100f883a 	mov	r7,r2
 200f6f8:	01800284 	movi	r6,10
 200f6fc:	e17ff717 	ldw	r5,-36(fp)
 200f700:	e13ffc17 	ldw	r4,-16(fp)
 200f704:	200f41c0 	call	200f41c <__multadd>
 200f708:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 200f70c:	e0bff817 	ldw	r2,-32(fp)
 200f710:	10800044 	addi	r2,r2,1
 200f714:	e0bff815 	stw	r2,-32(fp)
 200f718:	e0fff817 	ldw	r3,-32(fp)
 200f71c:	e0bfff17 	ldw	r2,-4(fp)
 200f720:	18bfec16 	blt	r3,r2,200f6d4 <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 200f724:	e0bff717 	ldw	r2,-36(fp)
}
 200f728:	e037883a 	mov	sp,fp
 200f72c:	dfc00117 	ldw	ra,4(sp)
 200f730:	df000017 	ldw	fp,0(sp)
 200f734:	dec00204 	addi	sp,sp,8
 200f738:	f800283a 	ret

0200f73c <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 200f73c:	defffe04 	addi	sp,sp,-8
 200f740:	df000115 	stw	fp,4(sp)
 200f744:	dc000015 	stw	r16,0(sp)
 200f748:	df000104 	addi	fp,sp,4
 200f74c:	2005883a 	mov	r2,r4
  register int k = 0;
 200f750:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 200f754:	10ffffec 	andhi	r3,r2,65535
 200f758:	1800021e 	bne	r3,zero,200f764 <__hi0bits+0x28>
    {
      k = 16;
 200f75c:	04000404 	movi	r16,16
      x <<= 16;
 200f760:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 200f764:	10ffc02c 	andhi	r3,r2,65280
 200f768:	1800021e 	bne	r3,zero,200f774 <__hi0bits+0x38>
    {
      k += 8;
 200f76c:	84000204 	addi	r16,r16,8
      x <<= 8;
 200f770:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 200f774:	10fc002c 	andhi	r3,r2,61440
 200f778:	1800021e 	bne	r3,zero,200f784 <__hi0bits+0x48>
    {
      k += 4;
 200f77c:	84000104 	addi	r16,r16,4
      x <<= 4;
 200f780:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 200f784:	10f0002c 	andhi	r3,r2,49152
 200f788:	1800031e 	bne	r3,zero,200f798 <__hi0bits+0x5c>
    {
      k += 2;
 200f78c:	84000084 	addi	r16,r16,2
      x <<= 2;
 200f790:	1085883a 	add	r2,r2,r2
 200f794:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 200f798:	1007883a 	mov	r3,r2
 200f79c:	18000516 	blt	r3,zero,200f7b4 <__hi0bits+0x78>
    {
      k++;
 200f7a0:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 200f7a4:	1090002c 	andhi	r2,r2,16384
 200f7a8:	1000021e 	bne	r2,zero,200f7b4 <__hi0bits+0x78>
	return 32;
 200f7ac:	00800804 	movi	r2,32
 200f7b0:	00000106 	br	200f7b8 <__hi0bits+0x7c>
    }
  return k;
 200f7b4:	8005883a 	mov	r2,r16
}
 200f7b8:	e6ffff04 	addi	sp,fp,-4
 200f7bc:	df000117 	ldw	fp,4(sp)
 200f7c0:	dc000017 	ldw	r16,0(sp)
 200f7c4:	dec00204 	addi	sp,sp,8
 200f7c8:	f800283a 	ret

0200f7cc <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 200f7cc:	defffc04 	addi	sp,sp,-16
 200f7d0:	df000315 	stw	fp,12(sp)
 200f7d4:	dc400215 	stw	r17,8(sp)
 200f7d8:	dc000115 	stw	r16,4(sp)
 200f7dc:	df000304 	addi	fp,sp,12
 200f7e0:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 200f7e4:	e0bffd17 	ldw	r2,-12(fp)
 200f7e8:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 200f7ec:	808001cc 	andi	r2,r16,7
 200f7f0:	10001026 	beq	r2,zero,200f834 <__lo0bits+0x68>
    {
      if (x & 1)
 200f7f4:	8080004c 	andi	r2,r16,1
 200f7f8:	10000226 	beq	r2,zero,200f804 <__lo0bits+0x38>
	return 0;
 200f7fc:	0005883a 	mov	r2,zero
 200f800:	00002706 	br	200f8a0 <__lo0bits+0xd4>
      if (x & 2)
 200f804:	8080008c 	andi	r2,r16,2
 200f808:	10000526 	beq	r2,zero,200f820 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 200f80c:	8006d07a 	srli	r3,r16,1
 200f810:	e0bffd17 	ldw	r2,-12(fp)
 200f814:	10c00015 	stw	r3,0(r2)
	  return 1;
 200f818:	00800044 	movi	r2,1
 200f81c:	00002006 	br	200f8a0 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 200f820:	8006d0ba 	srli	r3,r16,2
 200f824:	e0bffd17 	ldw	r2,-12(fp)
 200f828:	10c00015 	stw	r3,0(r2)
      return 2;
 200f82c:	00800084 	movi	r2,2
 200f830:	00001b06 	br	200f8a0 <__lo0bits+0xd4>
    }
  k = 0;
 200f834:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 200f838:	80bfffcc 	andi	r2,r16,65535
 200f83c:	1000021e 	bne	r2,zero,200f848 <__lo0bits+0x7c>
    {
      k = 16;
 200f840:	04400404 	movi	r17,16
      x >>= 16;
 200f844:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 200f848:	80803fcc 	andi	r2,r16,255
 200f84c:	1000021e 	bne	r2,zero,200f858 <__lo0bits+0x8c>
    {
      k += 8;
 200f850:	8c400204 	addi	r17,r17,8
      x >>= 8;
 200f854:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 200f858:	808003cc 	andi	r2,r16,15
 200f85c:	1000021e 	bne	r2,zero,200f868 <__lo0bits+0x9c>
    {
      k += 4;
 200f860:	8c400104 	addi	r17,r17,4
      x >>= 4;
 200f864:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 200f868:	808000cc 	andi	r2,r16,3
 200f86c:	1000021e 	bne	r2,zero,200f878 <__lo0bits+0xac>
    {
      k += 2;
 200f870:	8c400084 	addi	r17,r17,2
      x >>= 2;
 200f874:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 200f878:	8080004c 	andi	r2,r16,1
 200f87c:	1000051e 	bne	r2,zero,200f894 <__lo0bits+0xc8>
    {
      k++;
 200f880:	8c400044 	addi	r17,r17,1
      x >>= 1;
 200f884:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 200f888:	8000021e 	bne	r16,zero,200f894 <__lo0bits+0xc8>
	return 32;
 200f88c:	00800804 	movi	r2,32
 200f890:	00000306 	br	200f8a0 <__lo0bits+0xd4>
    }
  *y = x;
 200f894:	e0bffd17 	ldw	r2,-12(fp)
 200f898:	14000015 	stw	r16,0(r2)
  return k;
 200f89c:	8805883a 	mov	r2,r17
}
 200f8a0:	e6fffe04 	addi	sp,fp,-8
 200f8a4:	df000217 	ldw	fp,8(sp)
 200f8a8:	dc400117 	ldw	r17,4(sp)
 200f8ac:	dc000017 	ldw	r16,0(sp)
 200f8b0:	dec00304 	addi	sp,sp,12
 200f8b4:	f800283a 	ret

0200f8b8 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 200f8b8:	defffb04 	addi	sp,sp,-20
 200f8bc:	dfc00415 	stw	ra,16(sp)
 200f8c0:	df000315 	stw	fp,12(sp)
 200f8c4:	df000304 	addi	fp,sp,12
 200f8c8:	e13ffe15 	stw	r4,-8(fp)
 200f8cc:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 200f8d0:	01400044 	movi	r5,1
 200f8d4:	e13ffe17 	ldw	r4,-8(fp)
 200f8d8:	200f2700 	call	200f270 <_Balloc>
 200f8dc:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 200f8e0:	e0ffff17 	ldw	r3,-4(fp)
 200f8e4:	e0bffd17 	ldw	r2,-12(fp)
 200f8e8:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200f8ec:	e0bffd17 	ldw	r2,-12(fp)
 200f8f0:	00c00044 	movi	r3,1
 200f8f4:	10c00415 	stw	r3,16(r2)
  return b;
 200f8f8:	e0bffd17 	ldw	r2,-12(fp)
}
 200f8fc:	e037883a 	mov	sp,fp
 200f900:	dfc00117 	ldw	ra,4(sp)
 200f904:	df000017 	ldw	fp,0(sp)
 200f908:	dec00204 	addi	sp,sp,8
 200f90c:	f800283a 	ret

0200f910 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 200f910:	deffeb04 	addi	sp,sp,-84
 200f914:	dfc01415 	stw	ra,80(sp)
 200f918:	df001315 	stw	fp,76(sp)
 200f91c:	df001304 	addi	fp,sp,76
 200f920:	e13ffd15 	stw	r4,-12(fp)
 200f924:	e17ffe15 	stw	r5,-8(fp)
 200f928:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 200f92c:	e0bffe17 	ldw	r2,-8(fp)
 200f930:	10c00417 	ldw	r3,16(r2)
 200f934:	e0bfff17 	ldw	r2,-4(fp)
 200f938:	10800417 	ldw	r2,16(r2)
 200f93c:	1880060e 	bge	r3,r2,200f958 <__multiply+0x48>
    {
      c = a;
 200f940:	e0bffe17 	ldw	r2,-8(fp)
 200f944:	e0bff515 	stw	r2,-44(fp)
      a = b;
 200f948:	e0bfff17 	ldw	r2,-4(fp)
 200f94c:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200f950:	e0bff517 	ldw	r2,-44(fp)
 200f954:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 200f958:	e0bffe17 	ldw	r2,-8(fp)
 200f95c:	10800117 	ldw	r2,4(r2)
 200f960:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 200f964:	e0bffe17 	ldw	r2,-8(fp)
 200f968:	10800417 	ldw	r2,16(r2)
 200f96c:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 200f970:	e0bfff17 	ldw	r2,-4(fp)
 200f974:	10800417 	ldw	r2,16(r2)
 200f978:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 200f97c:	e0fff617 	ldw	r3,-40(fp)
 200f980:	e0bff717 	ldw	r2,-36(fp)
 200f984:	1885883a 	add	r2,r3,r2
 200f988:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 200f98c:	e0bffe17 	ldw	r2,-8(fp)
 200f990:	10c00217 	ldw	r3,8(r2)
 200f994:	e0bfee17 	ldw	r2,-72(fp)
 200f998:	1880030e 	bge	r3,r2,200f9a8 <__multiply+0x98>
    k++;
 200f99c:	e0bfed17 	ldw	r2,-76(fp)
 200f9a0:	10800044 	addi	r2,r2,1
 200f9a4:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 200f9a8:	e17fed17 	ldw	r5,-76(fp)
 200f9ac:	e13ffd17 	ldw	r4,-12(fp)
 200f9b0:	200f2700 	call	200f270 <_Balloc>
 200f9b4:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200f9b8:	e0bff517 	ldw	r2,-44(fp)
 200f9bc:	10800504 	addi	r2,r2,20
 200f9c0:	e0bff015 	stw	r2,-64(fp)
 200f9c4:	e0bfee17 	ldw	r2,-72(fp)
 200f9c8:	1085883a 	add	r2,r2,r2
 200f9cc:	1085883a 	add	r2,r2,r2
 200f9d0:	1007883a 	mov	r3,r2
 200f9d4:	e0bff017 	ldw	r2,-64(fp)
 200f9d8:	10c5883a 	add	r2,r2,r3
 200f9dc:	e0bff815 	stw	r2,-32(fp)
 200f9e0:	00000506 	br	200f9f8 <__multiply+0xe8>
    *x = 0;
 200f9e4:	e0bff017 	ldw	r2,-64(fp)
 200f9e8:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200f9ec:	e0bff017 	ldw	r2,-64(fp)
 200f9f0:	10800104 	addi	r2,r2,4
 200f9f4:	e0bff015 	stw	r2,-64(fp)
 200f9f8:	e0fff017 	ldw	r3,-64(fp)
 200f9fc:	e0bff817 	ldw	r2,-32(fp)
 200fa00:	18bff836 	bltu	r3,r2,200f9e4 <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 200fa04:	e0bffe17 	ldw	r2,-8(fp)
 200fa08:	10800504 	addi	r2,r2,20
 200fa0c:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 200fa10:	e0bff617 	ldw	r2,-40(fp)
 200fa14:	1085883a 	add	r2,r2,r2
 200fa18:	1085883a 	add	r2,r2,r2
 200fa1c:	1007883a 	mov	r3,r2
 200fa20:	e0bff817 	ldw	r2,-32(fp)
 200fa24:	10c5883a 	add	r2,r2,r3
 200fa28:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200fa2c:	e0bfff17 	ldw	r2,-4(fp)
 200fa30:	10800504 	addi	r2,r2,20
 200fa34:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 200fa38:	e0bff717 	ldw	r2,-36(fp)
 200fa3c:	1085883a 	add	r2,r2,r2
 200fa40:	1085883a 	add	r2,r2,r2
 200fa44:	1007883a 	mov	r3,r2
 200fa48:	e0bff117 	ldw	r2,-60(fp)
 200fa4c:	10c5883a 	add	r2,r2,r3
 200fa50:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 200fa54:	e0bff517 	ldw	r2,-44(fp)
 200fa58:	10800504 	addi	r2,r2,20
 200fa5c:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200fa60:	00007d06 	br	200fc58 <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 200fa64:	e0bff117 	ldw	r2,-60(fp)
 200fa68:	10800017 	ldw	r2,0(r2)
 200fa6c:	10bfffcc 	andi	r2,r2,65535
 200fa70:	e0bffb15 	stw	r2,-20(fp)
 200fa74:	e0bffb17 	ldw	r2,-20(fp)
 200fa78:	10003426 	beq	r2,zero,200fb4c <__multiply+0x23c>
	{
	  x = xa;
 200fa7c:	e0bff817 	ldw	r2,-32(fp)
 200fa80:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200fa84:	e0bff317 	ldw	r2,-52(fp)
 200fa88:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200fa8c:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 200fa90:	e0bff017 	ldw	r2,-64(fp)
 200fa94:	10800017 	ldw	r2,0(r2)
 200fa98:	10ffffcc 	andi	r3,r2,65535
 200fa9c:	e0bffb17 	ldw	r2,-20(fp)
 200faa0:	1887383a 	mul	r3,r3,r2
 200faa4:	e0bff217 	ldw	r2,-56(fp)
 200faa8:	10800017 	ldw	r2,0(r2)
 200faac:	10bfffcc 	andi	r2,r2,65535
 200fab0:	1887883a 	add	r3,r3,r2
 200fab4:	e0bfef17 	ldw	r2,-68(fp)
 200fab8:	1885883a 	add	r2,r3,r2
 200fabc:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200fac0:	e0bffc17 	ldw	r2,-16(fp)
 200fac4:	1004d43a 	srli	r2,r2,16
 200fac8:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 200facc:	e0bff017 	ldw	r2,-64(fp)
 200fad0:	10c00104 	addi	r3,r2,4
 200fad4:	e0fff015 	stw	r3,-64(fp)
 200fad8:	10800017 	ldw	r2,0(r2)
 200fadc:	1006d43a 	srli	r3,r2,16
 200fae0:	e0bffb17 	ldw	r2,-20(fp)
 200fae4:	1887383a 	mul	r3,r3,r2
 200fae8:	e0bff217 	ldw	r2,-56(fp)
 200faec:	10800017 	ldw	r2,0(r2)
 200faf0:	1004d43a 	srli	r2,r2,16
 200faf4:	1887883a 	add	r3,r3,r2
 200faf8:	e0bfef17 	ldw	r2,-68(fp)
 200fafc:	1885883a 	add	r2,r3,r2
 200fb00:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200fb04:	e0bff417 	ldw	r2,-48(fp)
 200fb08:	1004d43a 	srli	r2,r2,16
 200fb0c:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 200fb10:	e0bff217 	ldw	r2,-56(fp)
 200fb14:	10c00104 	addi	r3,r2,4
 200fb18:	e0fff215 	stw	r3,-56(fp)
 200fb1c:	e0fff417 	ldw	r3,-48(fp)
 200fb20:	1808943a 	slli	r4,r3,16
 200fb24:	e0fffc17 	ldw	r3,-16(fp)
 200fb28:	18ffffcc 	andi	r3,r3,65535
 200fb2c:	20c6b03a 	or	r3,r4,r3
 200fb30:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 200fb34:	e0fff017 	ldw	r3,-64(fp)
 200fb38:	e0bff917 	ldw	r2,-28(fp)
 200fb3c:	18bfd436 	bltu	r3,r2,200fa90 <__multiply+0x180>
	  *xc = carry;
 200fb40:	e0bff217 	ldw	r2,-56(fp)
 200fb44:	e0ffef17 	ldw	r3,-68(fp)
 200fb48:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 200fb4c:	e0bff117 	ldw	r2,-60(fp)
 200fb50:	10800017 	ldw	r2,0(r2)
 200fb54:	1004d43a 	srli	r2,r2,16
 200fb58:	e0bffb15 	stw	r2,-20(fp)
 200fb5c:	e0bffb17 	ldw	r2,-20(fp)
 200fb60:	10003726 	beq	r2,zero,200fc40 <__multiply+0x330>
	{
	  x = xa;
 200fb64:	e0bff817 	ldw	r2,-32(fp)
 200fb68:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200fb6c:	e0bff317 	ldw	r2,-52(fp)
 200fb70:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200fb74:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 200fb78:	e0bff217 	ldw	r2,-56(fp)
 200fb7c:	10800017 	ldw	r2,0(r2)
 200fb80:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 200fb84:	e0bff017 	ldw	r2,-64(fp)
 200fb88:	10800017 	ldw	r2,0(r2)
 200fb8c:	10ffffcc 	andi	r3,r2,65535
 200fb90:	e0bffb17 	ldw	r2,-20(fp)
 200fb94:	1887383a 	mul	r3,r3,r2
 200fb98:	e0bff217 	ldw	r2,-56(fp)
 200fb9c:	10800017 	ldw	r2,0(r2)
 200fba0:	1004d43a 	srli	r2,r2,16
 200fba4:	1887883a 	add	r3,r3,r2
 200fba8:	e0bfef17 	ldw	r2,-68(fp)
 200fbac:	1885883a 	add	r2,r3,r2
 200fbb0:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200fbb4:	e0bffc17 	ldw	r2,-16(fp)
 200fbb8:	1004d43a 	srli	r2,r2,16
 200fbbc:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 200fbc0:	e0bff217 	ldw	r2,-56(fp)
 200fbc4:	10c00104 	addi	r3,r2,4
 200fbc8:	e0fff215 	stw	r3,-56(fp)
 200fbcc:	e0fffc17 	ldw	r3,-16(fp)
 200fbd0:	1808943a 	slli	r4,r3,16
 200fbd4:	e0fff417 	ldw	r3,-48(fp)
 200fbd8:	18ffffcc 	andi	r3,r3,65535
 200fbdc:	20c6b03a 	or	r3,r4,r3
 200fbe0:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 200fbe4:	e0bff017 	ldw	r2,-64(fp)
 200fbe8:	10c00104 	addi	r3,r2,4
 200fbec:	e0fff015 	stw	r3,-64(fp)
 200fbf0:	10800017 	ldw	r2,0(r2)
 200fbf4:	1006d43a 	srli	r3,r2,16
 200fbf8:	e0bffb17 	ldw	r2,-20(fp)
 200fbfc:	1887383a 	mul	r3,r3,r2
 200fc00:	e0bff217 	ldw	r2,-56(fp)
 200fc04:	10800017 	ldw	r2,0(r2)
 200fc08:	10bfffcc 	andi	r2,r2,65535
 200fc0c:	1887883a 	add	r3,r3,r2
 200fc10:	e0bfef17 	ldw	r2,-68(fp)
 200fc14:	1885883a 	add	r2,r3,r2
 200fc18:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200fc1c:	e0bff417 	ldw	r2,-48(fp)
 200fc20:	1004d43a 	srli	r2,r2,16
 200fc24:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 200fc28:	e0fff017 	ldw	r3,-64(fp)
 200fc2c:	e0bff917 	ldw	r2,-28(fp)
 200fc30:	18bfd436 	bltu	r3,r2,200fb84 <__multiply+0x274>
	  *xc = z2;
 200fc34:	e0bff217 	ldw	r2,-56(fp)
 200fc38:	e0fff417 	ldw	r3,-48(fp)
 200fc3c:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200fc40:	e0bff117 	ldw	r2,-60(fp)
 200fc44:	10800104 	addi	r2,r2,4
 200fc48:	e0bff115 	stw	r2,-60(fp)
 200fc4c:	e0bff317 	ldw	r2,-52(fp)
 200fc50:	10800104 	addi	r2,r2,4
 200fc54:	e0bff315 	stw	r2,-52(fp)
 200fc58:	e0fff117 	ldw	r3,-60(fp)
 200fc5c:	e0bffa17 	ldw	r2,-24(fp)
 200fc60:	18bf8036 	bltu	r3,r2,200fa64 <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 200fc64:	e0bff517 	ldw	r2,-44(fp)
 200fc68:	10800504 	addi	r2,r2,20
 200fc6c:	e0bff315 	stw	r2,-52(fp)
 200fc70:	e0bfee17 	ldw	r2,-72(fp)
 200fc74:	1085883a 	add	r2,r2,r2
 200fc78:	1085883a 	add	r2,r2,r2
 200fc7c:	1007883a 	mov	r3,r2
 200fc80:	e0bff317 	ldw	r2,-52(fp)
 200fc84:	10c5883a 	add	r2,r2,r3
 200fc88:	e0bff215 	stw	r2,-56(fp)
 200fc8c:	00000306 	br	200fc9c <__multiply+0x38c>
 200fc90:	e0bfee17 	ldw	r2,-72(fp)
 200fc94:	10bfffc4 	addi	r2,r2,-1
 200fc98:	e0bfee15 	stw	r2,-72(fp)
 200fc9c:	e0bfee17 	ldw	r2,-72(fp)
 200fca0:	0080060e 	bge	zero,r2,200fcbc <__multiply+0x3ac>
 200fca4:	e0bff217 	ldw	r2,-56(fp)
 200fca8:	10bfff04 	addi	r2,r2,-4
 200fcac:	e0bff215 	stw	r2,-56(fp)
 200fcb0:	e0bff217 	ldw	r2,-56(fp)
 200fcb4:	10800017 	ldw	r2,0(r2)
 200fcb8:	103ff526 	beq	r2,zero,200fc90 <__multiply+0x380>
  c->_wds = wc;
 200fcbc:	e0bff517 	ldw	r2,-44(fp)
 200fcc0:	e0ffee17 	ldw	r3,-72(fp)
 200fcc4:	10c00415 	stw	r3,16(r2)
  return c;
 200fcc8:	e0bff517 	ldw	r2,-44(fp)
}
 200fccc:	e037883a 	mov	sp,fp
 200fcd0:	dfc00117 	ldw	ra,4(sp)
 200fcd4:	df000017 	ldw	fp,0(sp)
 200fcd8:	dec00204 	addi	sp,sp,8
 200fcdc:	f800283a 	ret

0200fce0 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200fce0:	defff704 	addi	sp,sp,-36
 200fce4:	dfc00815 	stw	ra,32(sp)
 200fce8:	df000715 	stw	fp,28(sp)
 200fcec:	df000704 	addi	fp,sp,28
 200fcf0:	e13ffd15 	stw	r4,-12(fp)
 200fcf4:	e17ffe15 	stw	r5,-8(fp)
 200fcf8:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 200fcfc:	e0bfff17 	ldw	r2,-4(fp)
 200fd00:	108000cc 	andi	r2,r2,3
 200fd04:	e0bffb15 	stw	r2,-20(fp)
 200fd08:	e0bffb17 	ldw	r2,-20(fp)
 200fd0c:	10000e26 	beq	r2,zero,200fd48 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 200fd10:	e0bffb17 	ldw	r2,-20(fp)
 200fd14:	10ffffc4 	addi	r3,r2,-1
 200fd18:	008080b4 	movhi	r2,514
 200fd1c:	10874f04 	addi	r2,r2,7484
 200fd20:	18c7883a 	add	r3,r3,r3
 200fd24:	18c7883a 	add	r3,r3,r3
 200fd28:	10c5883a 	add	r2,r2,r3
 200fd2c:	10800017 	ldw	r2,0(r2)
 200fd30:	000f883a 	mov	r7,zero
 200fd34:	100d883a 	mov	r6,r2
 200fd38:	e17ffe17 	ldw	r5,-8(fp)
 200fd3c:	e13ffd17 	ldw	r4,-12(fp)
 200fd40:	200f41c0 	call	200f41c <__multadd>
 200fd44:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 200fd48:	e0bfff17 	ldw	r2,-4(fp)
 200fd4c:	1005d0ba 	srai	r2,r2,2
 200fd50:	e0bfff15 	stw	r2,-4(fp)
 200fd54:	e0bfff17 	ldw	r2,-4(fp)
 200fd58:	1000021e 	bne	r2,zero,200fd64 <__pow5mult+0x84>
    return b;
 200fd5c:	e0bffe17 	ldw	r2,-8(fp)
 200fd60:	00003806 	br	200fe44 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 200fd64:	e0bffd17 	ldw	r2,-12(fp)
 200fd68:	10801217 	ldw	r2,72(r2)
 200fd6c:	e0bff915 	stw	r2,-28(fp)
 200fd70:	e0bff917 	ldw	r2,-28(fp)
 200fd74:	10000b1e 	bne	r2,zero,200fda4 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 200fd78:	01409c44 	movi	r5,625
 200fd7c:	e13ffd17 	ldw	r4,-12(fp)
 200fd80:	200f8b80 	call	200f8b8 <__i2b>
 200fd84:	1007883a 	mov	r3,r2
 200fd88:	e0bffd17 	ldw	r2,-12(fp)
 200fd8c:	10c01215 	stw	r3,72(r2)
 200fd90:	e0bffd17 	ldw	r2,-12(fp)
 200fd94:	10801217 	ldw	r2,72(r2)
 200fd98:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 200fd9c:	e0bff917 	ldw	r2,-28(fp)
 200fda0:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 200fda4:	e0bfff17 	ldw	r2,-4(fp)
 200fda8:	1080004c 	andi	r2,r2,1
 200fdac:	10000a26 	beq	r2,zero,200fdd8 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 200fdb0:	e1bff917 	ldw	r6,-28(fp)
 200fdb4:	e17ffe17 	ldw	r5,-8(fp)
 200fdb8:	e13ffd17 	ldw	r4,-12(fp)
 200fdbc:	200f9100 	call	200f910 <__multiply>
 200fdc0:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 200fdc4:	e17ffe17 	ldw	r5,-8(fp)
 200fdc8:	e13ffd17 	ldw	r4,-12(fp)
 200fdcc:	200f3a00 	call	200f3a0 <_Bfree>
	  b = b1;
 200fdd0:	e0bffc17 	ldw	r2,-16(fp)
 200fdd4:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 200fdd8:	e0bfff17 	ldw	r2,-4(fp)
 200fddc:	1005d07a 	srai	r2,r2,1
 200fde0:	e0bfff15 	stw	r2,-4(fp)
 200fde4:	e0bfff17 	ldw	r2,-4(fp)
 200fde8:	10001426 	beq	r2,zero,200fe3c <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 200fdec:	e0bff917 	ldw	r2,-28(fp)
 200fdf0:	10800017 	ldw	r2,0(r2)
 200fdf4:	e0bffa15 	stw	r2,-24(fp)
 200fdf8:	e0bffa17 	ldw	r2,-24(fp)
 200fdfc:	10000c1e 	bne	r2,zero,200fe30 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 200fe00:	e1bff917 	ldw	r6,-28(fp)
 200fe04:	e17ff917 	ldw	r5,-28(fp)
 200fe08:	e13ffd17 	ldw	r4,-12(fp)
 200fe0c:	200f9100 	call	200f910 <__multiply>
 200fe10:	1007883a 	mov	r3,r2
 200fe14:	e0bff917 	ldw	r2,-28(fp)
 200fe18:	10c00015 	stw	r3,0(r2)
 200fe1c:	e0bff917 	ldw	r2,-28(fp)
 200fe20:	10800017 	ldw	r2,0(r2)
 200fe24:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 200fe28:	e0bffa17 	ldw	r2,-24(fp)
 200fe2c:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 200fe30:	e0bffa17 	ldw	r2,-24(fp)
 200fe34:	e0bff915 	stw	r2,-28(fp)
    }
 200fe38:	003fda06 	br	200fda4 <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 200fe3c:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 200fe40:	e0bffe17 	ldw	r2,-8(fp)
}
 200fe44:	e037883a 	mov	sp,fp
 200fe48:	dfc00117 	ldw	ra,4(sp)
 200fe4c:	df000017 	ldw	fp,0(sp)
 200fe50:	dec00204 	addi	sp,sp,8
 200fe54:	f800283a 	ret

0200fe58 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200fe58:	defff204 	addi	sp,sp,-56
 200fe5c:	dfc00d15 	stw	ra,52(sp)
 200fe60:	df000c15 	stw	fp,48(sp)
 200fe64:	df000c04 	addi	fp,sp,48
 200fe68:	e13ffd15 	stw	r4,-12(fp)
 200fe6c:	e17ffe15 	stw	r5,-8(fp)
 200fe70:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 200fe74:	e0bfff17 	ldw	r2,-4(fp)
 200fe78:	1005d17a 	srai	r2,r2,5
 200fe7c:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 200fe80:	e0bffe17 	ldw	r2,-8(fp)
 200fe84:	10800117 	ldw	r2,4(r2)
 200fe88:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 200fe8c:	e0bffe17 	ldw	r2,-8(fp)
 200fe90:	10c00417 	ldw	r3,16(r2)
 200fe94:	e0bffa17 	ldw	r2,-24(fp)
 200fe98:	1885883a 	add	r2,r3,r2
 200fe9c:	10800044 	addi	r2,r2,1
 200fea0:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200fea4:	e0bffe17 	ldw	r2,-8(fp)
 200fea8:	10800217 	ldw	r2,8(r2)
 200feac:	e0bff415 	stw	r2,-48(fp)
 200feb0:	00000606 	br	200fecc <__lshift+0x74>
    k1++;
 200feb4:	e0bff517 	ldw	r2,-44(fp)
 200feb8:	10800044 	addi	r2,r2,1
 200febc:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200fec0:	e0bff417 	ldw	r2,-48(fp)
 200fec4:	1085883a 	add	r2,r2,r2
 200fec8:	e0bff415 	stw	r2,-48(fp)
 200fecc:	e0bff617 	ldw	r2,-40(fp)
 200fed0:	e0fff417 	ldw	r3,-48(fp)
 200fed4:	18bff716 	blt	r3,r2,200feb4 <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 200fed8:	e17ff517 	ldw	r5,-44(fp)
 200fedc:	e13ffd17 	ldw	r4,-12(fp)
 200fee0:	200f2700 	call	200f270 <_Balloc>
 200fee4:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 200fee8:	e0bffb17 	ldw	r2,-20(fp)
 200feec:	10800504 	addi	r2,r2,20
 200fef0:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 200fef4:	e03ff415 	stw	zero,-48(fp)
 200fef8:	00000706 	br	200ff18 <__lshift+0xc0>
    *x1++ = 0;
 200fefc:	e0bff817 	ldw	r2,-32(fp)
 200ff00:	10c00104 	addi	r3,r2,4
 200ff04:	e0fff815 	stw	r3,-32(fp)
 200ff08:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 200ff0c:	e0bff417 	ldw	r2,-48(fp)
 200ff10:	10800044 	addi	r2,r2,1
 200ff14:	e0bff415 	stw	r2,-48(fp)
 200ff18:	e0fff417 	ldw	r3,-48(fp)
 200ff1c:	e0bffa17 	ldw	r2,-24(fp)
 200ff20:	18bff616 	blt	r3,r2,200fefc <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 200ff24:	e0bffe17 	ldw	r2,-8(fp)
 200ff28:	10800504 	addi	r2,r2,20
 200ff2c:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 200ff30:	e0bffe17 	ldw	r2,-8(fp)
 200ff34:	10800417 	ldw	r2,16(r2)
 200ff38:	1085883a 	add	r2,r2,r2
 200ff3c:	1085883a 	add	r2,r2,r2
 200ff40:	1007883a 	mov	r3,r2
 200ff44:	e0bff717 	ldw	r2,-36(fp)
 200ff48:	10c5883a 	add	r2,r2,r3
 200ff4c:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 200ff50:	e0bfff17 	ldw	r2,-4(fp)
 200ff54:	108007cc 	andi	r2,r2,31
 200ff58:	e0bfff15 	stw	r2,-4(fp)
 200ff5c:	e0bfff17 	ldw	r2,-4(fp)
 200ff60:	10002326 	beq	r2,zero,200fff0 <__lshift+0x198>
    {
      k1 = 32 - k;
 200ff64:	00c00804 	movi	r3,32
 200ff68:	e0bfff17 	ldw	r2,-4(fp)
 200ff6c:	1885c83a 	sub	r2,r3,r2
 200ff70:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 200ff74:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 200ff78:	e0bff817 	ldw	r2,-32(fp)
 200ff7c:	10c00104 	addi	r3,r2,4
 200ff80:	e0fff815 	stw	r3,-32(fp)
 200ff84:	e0fff717 	ldw	r3,-36(fp)
 200ff88:	19000017 	ldw	r4,0(r3)
 200ff8c:	e0ffff17 	ldw	r3,-4(fp)
 200ff90:	20c8983a 	sll	r4,r4,r3
 200ff94:	e0fff917 	ldw	r3,-28(fp)
 200ff98:	20c6b03a 	or	r3,r4,r3
 200ff9c:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 200ffa0:	e0bff717 	ldw	r2,-36(fp)
 200ffa4:	10c00104 	addi	r3,r2,4
 200ffa8:	e0fff715 	stw	r3,-36(fp)
 200ffac:	10c00017 	ldw	r3,0(r2)
 200ffb0:	e0bff517 	ldw	r2,-44(fp)
 200ffb4:	1884d83a 	srl	r2,r3,r2
 200ffb8:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 200ffbc:	e0fff717 	ldw	r3,-36(fp)
 200ffc0:	e0bffc17 	ldw	r2,-16(fp)
 200ffc4:	18bfec36 	bltu	r3,r2,200ff78 <__lshift+0x120>
      if ((*x1 = z) != 0)
 200ffc8:	e0bff817 	ldw	r2,-32(fp)
 200ffcc:	e0fff917 	ldw	r3,-28(fp)
 200ffd0:	10c00015 	stw	r3,0(r2)
 200ffd4:	e0bff817 	ldw	r2,-32(fp)
 200ffd8:	10800017 	ldw	r2,0(r2)
 200ffdc:	10000f26 	beq	r2,zero,201001c <__lshift+0x1c4>
	++n1;
 200ffe0:	e0bff617 	ldw	r2,-40(fp)
 200ffe4:	10800044 	addi	r2,r2,1
 200ffe8:	e0bff615 	stw	r2,-40(fp)
 200ffec:	00000b06 	br	201001c <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 200fff0:	e0bff817 	ldw	r2,-32(fp)
 200fff4:	10c00104 	addi	r3,r2,4
 200fff8:	e0fff815 	stw	r3,-32(fp)
 200fffc:	e0fff717 	ldw	r3,-36(fp)
 2010000:	19000104 	addi	r4,r3,4
 2010004:	e13ff715 	stw	r4,-36(fp)
 2010008:	18c00017 	ldw	r3,0(r3)
 201000c:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 2010010:	e0fff717 	ldw	r3,-36(fp)
 2010014:	e0bffc17 	ldw	r2,-16(fp)
 2010018:	18bff536 	bltu	r3,r2,200fff0 <__lshift+0x198>
  b1->_wds = n1 - 1;
 201001c:	e0bff617 	ldw	r2,-40(fp)
 2010020:	10ffffc4 	addi	r3,r2,-1
 2010024:	e0bffb17 	ldw	r2,-20(fp)
 2010028:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 201002c:	e17ffe17 	ldw	r5,-8(fp)
 2010030:	e13ffd17 	ldw	r4,-12(fp)
 2010034:	200f3a00 	call	200f3a0 <_Bfree>
  return b1;
 2010038:	e0bffb17 	ldw	r2,-20(fp)
}
 201003c:	e037883a 	mov	sp,fp
 2010040:	dfc00117 	ldw	ra,4(sp)
 2010044:	df000017 	ldw	fp,0(sp)
 2010048:	dec00204 	addi	sp,sp,8
 201004c:	f800283a 	ret

02010050 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 2010050:	defff704 	addi	sp,sp,-36
 2010054:	df000815 	stw	fp,32(sp)
 2010058:	df000804 	addi	fp,sp,32
 201005c:	e13ffe15 	stw	r4,-8(fp)
 2010060:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 2010064:	e0bffe17 	ldw	r2,-8(fp)
 2010068:	10800417 	ldw	r2,16(r2)
 201006c:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 2010070:	e0bfff17 	ldw	r2,-4(fp)
 2010074:	10800417 	ldw	r2,16(r2)
 2010078:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 201007c:	e0fffa17 	ldw	r3,-24(fp)
 2010080:	e0bffb17 	ldw	r2,-20(fp)
 2010084:	1885c83a 	sub	r2,r3,r2
 2010088:	e0bffa15 	stw	r2,-24(fp)
 201008c:	e0bffa17 	ldw	r2,-24(fp)
 2010090:	10000226 	beq	r2,zero,201009c <__mcmp+0x4c>
    return i;
 2010094:	e0bffa17 	ldw	r2,-24(fp)
 2010098:	00002e06 	br	2010154 <__mcmp+0x104>
  xa0 = a->_x;
 201009c:	e0bffe17 	ldw	r2,-8(fp)
 20100a0:	10800504 	addi	r2,r2,20
 20100a4:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 20100a8:	e0bffb17 	ldw	r2,-20(fp)
 20100ac:	1085883a 	add	r2,r2,r2
 20100b0:	1085883a 	add	r2,r2,r2
 20100b4:	1007883a 	mov	r3,r2
 20100b8:	e0bffc17 	ldw	r2,-16(fp)
 20100bc:	10c5883a 	add	r2,r2,r3
 20100c0:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 20100c4:	e0bfff17 	ldw	r2,-4(fp)
 20100c8:	10800504 	addi	r2,r2,20
 20100cc:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 20100d0:	e0bffb17 	ldw	r2,-20(fp)
 20100d4:	1085883a 	add	r2,r2,r2
 20100d8:	1085883a 	add	r2,r2,r2
 20100dc:	1007883a 	mov	r3,r2
 20100e0:	e0bffd17 	ldw	r2,-12(fp)
 20100e4:	10c5883a 	add	r2,r2,r3
 20100e8:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 20100ec:	e0bff817 	ldw	r2,-32(fp)
 20100f0:	10bfff04 	addi	r2,r2,-4
 20100f4:	e0bff815 	stw	r2,-32(fp)
 20100f8:	e0bff817 	ldw	r2,-32(fp)
 20100fc:	10c00017 	ldw	r3,0(r2)
 2010100:	e0bff917 	ldw	r2,-28(fp)
 2010104:	10bfff04 	addi	r2,r2,-4
 2010108:	e0bff915 	stw	r2,-28(fp)
 201010c:	e0bff917 	ldw	r2,-28(fp)
 2010110:	10800017 	ldw	r2,0(r2)
 2010114:	18800926 	beq	r3,r2,201013c <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 2010118:	e0bff817 	ldw	r2,-32(fp)
 201011c:	10c00017 	ldw	r3,0(r2)
 2010120:	e0bff917 	ldw	r2,-28(fp)
 2010124:	10800017 	ldw	r2,0(r2)
 2010128:	1880022e 	bgeu	r3,r2,2010134 <__mcmp+0xe4>
 201012c:	00bfffc4 	movi	r2,-1
 2010130:	00000806 	br	2010154 <__mcmp+0x104>
 2010134:	00800044 	movi	r2,1
 2010138:	00000606 	br	2010154 <__mcmp+0x104>
      if (xa <= xa0)
 201013c:	e0bff817 	ldw	r2,-32(fp)
 2010140:	e0fffc17 	ldw	r3,-16(fp)
 2010144:	1880012e 	bgeu	r3,r2,201014c <__mcmp+0xfc>
	break;
    }
 2010148:	003fe806 	br	20100ec <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 201014c:	0001883a 	nop
    }
  return 0;
 2010150:	0005883a 	mov	r2,zero
}
 2010154:	e037883a 	mov	sp,fp
 2010158:	df000017 	ldw	fp,0(sp)
 201015c:	dec00104 	addi	sp,sp,4
 2010160:	f800283a 	ret

02010164 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 2010164:	deffef04 	addi	sp,sp,-68
 2010168:	dfc01015 	stw	ra,64(sp)
 201016c:	df000f15 	stw	fp,60(sp)
 2010170:	df000f04 	addi	fp,sp,60
 2010174:	e13ffd15 	stw	r4,-12(fp)
 2010178:	e17ffe15 	stw	r5,-8(fp)
 201017c:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 2010180:	e17fff17 	ldw	r5,-4(fp)
 2010184:	e13ffe17 	ldw	r4,-8(fp)
 2010188:	20100500 	call	2010050 <__mcmp>
 201018c:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 2010190:	e0bff117 	ldw	r2,-60(fp)
 2010194:	10000b1e 	bne	r2,zero,20101c4 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 2010198:	000b883a 	mov	r5,zero
 201019c:	e13ffd17 	ldw	r4,-12(fp)
 20101a0:	200f2700 	call	200f270 <_Balloc>
 20101a4:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 20101a8:	e0bff717 	ldw	r2,-36(fp)
 20101ac:	00c00044 	movi	r3,1
 20101b0:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 20101b4:	e0bff717 	ldw	r2,-36(fp)
 20101b8:	10000515 	stw	zero,20(r2)
      return c;
 20101bc:	e0bff717 	ldw	r2,-36(fp)
 20101c0:	00008c06 	br	20103f4 <__mdiff+0x290>
    }
  if (i < 0)
 20101c4:	e0bff117 	ldw	r2,-60(fp)
 20101c8:	1000090e 	bge	r2,zero,20101f0 <__mdiff+0x8c>
    {
      c = a;
 20101cc:	e0bffe17 	ldw	r2,-8(fp)
 20101d0:	e0bff715 	stw	r2,-36(fp)
      a = b;
 20101d4:	e0bfff17 	ldw	r2,-4(fp)
 20101d8:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 20101dc:	e0bff717 	ldw	r2,-36(fp)
 20101e0:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 20101e4:	00800044 	movi	r2,1
 20101e8:	e0bff115 	stw	r2,-60(fp)
 20101ec:	00000106 	br	20101f4 <__mdiff+0x90>
    }
  else
    i = 0;
 20101f0:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 20101f4:	e0bffe17 	ldw	r2,-8(fp)
 20101f8:	10800117 	ldw	r2,4(r2)
 20101fc:	100b883a 	mov	r5,r2
 2010200:	e13ffd17 	ldw	r4,-12(fp)
 2010204:	200f2700 	call	200f270 <_Balloc>
 2010208:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 201020c:	e0bff717 	ldw	r2,-36(fp)
 2010210:	e0fff117 	ldw	r3,-60(fp)
 2010214:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 2010218:	e0bffe17 	ldw	r2,-8(fp)
 201021c:	10800417 	ldw	r2,16(r2)
 2010220:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 2010224:	e0bffe17 	ldw	r2,-8(fp)
 2010228:	10800504 	addi	r2,r2,20
 201022c:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 2010230:	e0bff217 	ldw	r2,-56(fp)
 2010234:	1085883a 	add	r2,r2,r2
 2010238:	1085883a 	add	r2,r2,r2
 201023c:	1007883a 	mov	r3,r2
 2010240:	e0bff417 	ldw	r2,-48(fp)
 2010244:	10c5883a 	add	r2,r2,r3
 2010248:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 201024c:	e0bfff17 	ldw	r2,-4(fp)
 2010250:	10800417 	ldw	r2,16(r2)
 2010254:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 2010258:	e0bfff17 	ldw	r2,-4(fp)
 201025c:	10800504 	addi	r2,r2,20
 2010260:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 2010264:	e0bff917 	ldw	r2,-28(fp)
 2010268:	1085883a 	add	r2,r2,r2
 201026c:	1085883a 	add	r2,r2,r2
 2010270:	1007883a 	mov	r3,r2
 2010274:	e0bff517 	ldw	r2,-44(fp)
 2010278:	10c5883a 	add	r2,r2,r3
 201027c:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 2010280:	e0bff717 	ldw	r2,-36(fp)
 2010284:	10800504 	addi	r2,r2,20
 2010288:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 201028c:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 2010290:	e0bff417 	ldw	r2,-48(fp)
 2010294:	10800017 	ldw	r2,0(r2)
 2010298:	10ffffcc 	andi	r3,r2,65535
 201029c:	e0bff517 	ldw	r2,-44(fp)
 20102a0:	10800017 	ldw	r2,0(r2)
 20102a4:	10bfffcc 	andi	r2,r2,65535
 20102a8:	1887c83a 	sub	r3,r3,r2
 20102ac:	e0bff317 	ldw	r2,-52(fp)
 20102b0:	1885883a 	add	r2,r3,r2
 20102b4:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 20102b8:	e0bffb17 	ldw	r2,-20(fp)
 20102bc:	1005d43a 	srai	r2,r2,16
 20102c0:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 20102c4:	e0bff417 	ldw	r2,-48(fp)
 20102c8:	10c00104 	addi	r3,r2,4
 20102cc:	e0fff415 	stw	r3,-48(fp)
 20102d0:	10800017 	ldw	r2,0(r2)
 20102d4:	1006d43a 	srli	r3,r2,16
 20102d8:	e0bff517 	ldw	r2,-44(fp)
 20102dc:	11000104 	addi	r4,r2,4
 20102e0:	e13ff515 	stw	r4,-44(fp)
 20102e4:	10800017 	ldw	r2,0(r2)
 20102e8:	1004d43a 	srli	r2,r2,16
 20102ec:	1887c83a 	sub	r3,r3,r2
 20102f0:	e0bff317 	ldw	r2,-52(fp)
 20102f4:	1885883a 	add	r2,r3,r2
 20102f8:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 20102fc:	e0bffc17 	ldw	r2,-16(fp)
 2010300:	1005d43a 	srai	r2,r2,16
 2010304:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 2010308:	e0bff617 	ldw	r2,-40(fp)
 201030c:	10c00104 	addi	r3,r2,4
 2010310:	e0fff615 	stw	r3,-40(fp)
 2010314:	e0fffc17 	ldw	r3,-16(fp)
 2010318:	1808943a 	slli	r4,r3,16
 201031c:	e0fffb17 	ldw	r3,-20(fp)
 2010320:	18ffffcc 	andi	r3,r3,65535
 2010324:	20c6b03a 	or	r3,r4,r3
 2010328:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 201032c:	e0fff517 	ldw	r3,-44(fp)
 2010330:	e0bffa17 	ldw	r2,-24(fp)
 2010334:	18bfd636 	bltu	r3,r2,2010290 <__mdiff+0x12c>
  while (xa < xae)
 2010338:	00001d06 	br	20103b0 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 201033c:	e0bff417 	ldw	r2,-48(fp)
 2010340:	10800017 	ldw	r2,0(r2)
 2010344:	10ffffcc 	andi	r3,r2,65535
 2010348:	e0bff317 	ldw	r2,-52(fp)
 201034c:	1885883a 	add	r2,r3,r2
 2010350:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 2010354:	e0bffb17 	ldw	r2,-20(fp)
 2010358:	1005d43a 	srai	r2,r2,16
 201035c:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 2010360:	e0bff417 	ldw	r2,-48(fp)
 2010364:	10c00104 	addi	r3,r2,4
 2010368:	e0fff415 	stw	r3,-48(fp)
 201036c:	10800017 	ldw	r2,0(r2)
 2010370:	1006d43a 	srli	r3,r2,16
 2010374:	e0bff317 	ldw	r2,-52(fp)
 2010378:	1885883a 	add	r2,r3,r2
 201037c:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 2010380:	e0bffc17 	ldw	r2,-16(fp)
 2010384:	1005d43a 	srai	r2,r2,16
 2010388:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 201038c:	e0bff617 	ldw	r2,-40(fp)
 2010390:	10c00104 	addi	r3,r2,4
 2010394:	e0fff615 	stw	r3,-40(fp)
 2010398:	e0fffc17 	ldw	r3,-16(fp)
 201039c:	1808943a 	slli	r4,r3,16
 20103a0:	e0fffb17 	ldw	r3,-20(fp)
 20103a4:	18ffffcc 	andi	r3,r3,65535
 20103a8:	20c6b03a 	or	r3,r4,r3
 20103ac:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 20103b0:	e0fff417 	ldw	r3,-48(fp)
 20103b4:	e0bff817 	ldw	r2,-32(fp)
 20103b8:	18bfe036 	bltu	r3,r2,201033c <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 20103bc:	00000306 	br	20103cc <__mdiff+0x268>
    wa--;
 20103c0:	e0bff217 	ldw	r2,-56(fp)
 20103c4:	10bfffc4 	addi	r2,r2,-1
 20103c8:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 20103cc:	e0bff617 	ldw	r2,-40(fp)
 20103d0:	10bfff04 	addi	r2,r2,-4
 20103d4:	e0bff615 	stw	r2,-40(fp)
 20103d8:	e0bff617 	ldw	r2,-40(fp)
 20103dc:	10800017 	ldw	r2,0(r2)
 20103e0:	103ff726 	beq	r2,zero,20103c0 <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 20103e4:	e0bff717 	ldw	r2,-36(fp)
 20103e8:	e0fff217 	ldw	r3,-56(fp)
 20103ec:	10c00415 	stw	r3,16(r2)
  return c;
 20103f0:	e0bff717 	ldw	r2,-36(fp)
}
 20103f4:	e037883a 	mov	sp,fp
 20103f8:	dfc00117 	ldw	ra,4(sp)
 20103fc:	df000017 	ldw	fp,0(sp)
 2010400:	dec00204 	addi	sp,sp,8
 2010404:	f800283a 	ret

02010408 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 2010408:	defff804 	addi	sp,sp,-32
 201040c:	df000715 	stw	fp,28(sp)
 2010410:	dc000615 	stw	r16,24(sp)
 2010414:	df000704 	addi	fp,sp,28
 2010418:	e13ffd15 	stw	r4,-12(fp)
 201041c:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 2010420:	e0bffd17 	ldw	r2,-12(fp)
 2010424:	e0bff915 	stw	r2,-28(fp)
 2010428:	e0bffe17 	ldw	r2,-8(fp)
 201042c:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 2010430:	e0bffa17 	ldw	r2,-24(fp)
 2010434:	10dffc2c 	andhi	r3,r2,32752
 2010438:	00bf3034 	movhi	r2,64704
 201043c:	1885883a 	add	r2,r3,r2
 2010440:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 2010444:	0400040e 	bge	zero,r16,2010458 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 2010448:	8005883a 	mov	r2,r16
 201044c:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 2010450:	e03ffb15 	stw	zero,-20(fp)
 2010454:	00001406 	br	20104a8 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 2010458:	0405c83a 	sub	r2,zero,r16
 201045c:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 2010460:	80800508 	cmpgei	r2,r16,20
 2010464:	1000051e 	bne	r2,zero,201047c <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 2010468:	00800234 	movhi	r2,8
 201046c:	1405d83a 	sra	r2,r2,r16
 2010470:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 2010474:	e03ffb15 	stw	zero,-20(fp)
 2010478:	00000b06 	br	20104a8 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 201047c:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 2010480:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 2010484:	808007c8 	cmpgei	r2,r16,31
 2010488:	1000051e 	bne	r2,zero,20104a0 <__ulp+0x98>
 201048c:	008007c4 	movi	r2,31
 2010490:	1405c83a 	sub	r2,r2,r16
 2010494:	00c00044 	movi	r3,1
 2010498:	1884983a 	sll	r2,r3,r2
 201049c:	00000106 	br	20104a4 <__ulp+0x9c>
 20104a0:	00800044 	movi	r2,1
 20104a4:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 20104a8:	e0bffb17 	ldw	r2,-20(fp)
 20104ac:	e0fffc17 	ldw	r3,-16(fp)
 20104b0:	1009883a 	mov	r4,r2
 20104b4:	180b883a 	mov	r5,r3
}
 20104b8:	2005883a 	mov	r2,r4
 20104bc:	2807883a 	mov	r3,r5
 20104c0:	e6ffff04 	addi	sp,fp,-4
 20104c4:	df000117 	ldw	fp,4(sp)
 20104c8:	dc000017 	ldw	r16,0(sp)
 20104cc:	dec00204 	addi	sp,sp,8
 20104d0:	f800283a 	ret

020104d4 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 20104d4:	defff404 	addi	sp,sp,-48
 20104d8:	dfc00b15 	stw	ra,44(sp)
 20104dc:	df000a15 	stw	fp,40(sp)
 20104e0:	df000a04 	addi	fp,sp,40
 20104e4:	e13ffe15 	stw	r4,-8(fp)
 20104e8:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 20104ec:	e0bffe17 	ldw	r2,-8(fp)
 20104f0:	10800504 	addi	r2,r2,20
 20104f4:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 20104f8:	e0bffe17 	ldw	r2,-8(fp)
 20104fc:	10800417 	ldw	r2,16(r2)
 2010500:	1085883a 	add	r2,r2,r2
 2010504:	1085883a 	add	r2,r2,r2
 2010508:	1007883a 	mov	r3,r2
 201050c:	e0bff717 	ldw	r2,-36(fp)
 2010510:	10c5883a 	add	r2,r2,r3
 2010514:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 2010518:	e0bff617 	ldw	r2,-40(fp)
 201051c:	10bfff04 	addi	r2,r2,-4
 2010520:	e0bff615 	stw	r2,-40(fp)
 2010524:	e0bff617 	ldw	r2,-40(fp)
 2010528:	10800017 	ldw	r2,0(r2)
 201052c:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 2010530:	e13ff817 	ldw	r4,-32(fp)
 2010534:	200f73c0 	call	200f73c <__hi0bits>
 2010538:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 201053c:	00c00804 	movi	r3,32
 2010540:	e0bff917 	ldw	r2,-28(fp)
 2010544:	1887c83a 	sub	r3,r3,r2
 2010548:	e0bfff17 	ldw	r2,-4(fp)
 201054c:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 2010550:	e0bff917 	ldw	r2,-28(fp)
 2010554:	108002c8 	cmpgei	r2,r2,11
 2010558:	10001e1e 	bne	r2,zero,20105d4 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 201055c:	00c002c4 	movi	r3,11
 2010560:	e0bff917 	ldw	r2,-28(fp)
 2010564:	1885c83a 	sub	r2,r3,r2
 2010568:	e0fff817 	ldw	r3,-32(fp)
 201056c:	1884d83a 	srl	r2,r3,r2
 2010570:	108ffc34 	orhi	r2,r2,16368
 2010574:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 2010578:	e0bff617 	ldw	r2,-40(fp)
 201057c:	e0fff717 	ldw	r3,-36(fp)
 2010580:	1880062e 	bgeu	r3,r2,201059c <__b2d+0xc8>
 2010584:	e0bff617 	ldw	r2,-40(fp)
 2010588:	10bfff04 	addi	r2,r2,-4
 201058c:	e0bff615 	stw	r2,-40(fp)
 2010590:	e0bff617 	ldw	r2,-40(fp)
 2010594:	10800017 	ldw	r2,0(r2)
 2010598:	00000106 	br	20105a0 <__b2d+0xcc>
 201059c:	0005883a 	mov	r2,zero
 20105a0:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 20105a4:	e0bff917 	ldw	r2,-28(fp)
 20105a8:	10800544 	addi	r2,r2,21
 20105ac:	e0fff817 	ldw	r3,-32(fp)
 20105b0:	1886983a 	sll	r3,r3,r2
 20105b4:	010002c4 	movi	r4,11
 20105b8:	e0bff917 	ldw	r2,-28(fp)
 20105bc:	2085c83a 	sub	r2,r4,r2
 20105c0:	e13ffa17 	ldw	r4,-24(fp)
 20105c4:	2084d83a 	srl	r2,r4,r2
 20105c8:	1884b03a 	or	r2,r3,r2
 20105cc:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 20105d0:	00003606 	br	20106ac <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 20105d4:	e0bff617 	ldw	r2,-40(fp)
 20105d8:	e0fff717 	ldw	r3,-36(fp)
 20105dc:	1880062e 	bgeu	r3,r2,20105f8 <__b2d+0x124>
 20105e0:	e0bff617 	ldw	r2,-40(fp)
 20105e4:	10bfff04 	addi	r2,r2,-4
 20105e8:	e0bff615 	stw	r2,-40(fp)
 20105ec:	e0bff617 	ldw	r2,-40(fp)
 20105f0:	10800017 	ldw	r2,0(r2)
 20105f4:	00000106 	br	20105fc <__b2d+0x128>
 20105f8:	0005883a 	mov	r2,zero
 20105fc:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 2010600:	e0bff917 	ldw	r2,-28(fp)
 2010604:	10bffd44 	addi	r2,r2,-11
 2010608:	e0bff915 	stw	r2,-28(fp)
 201060c:	e0bff917 	ldw	r2,-28(fp)
 2010610:	10002126 	beq	r2,zero,2010698 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 2010614:	e0fff817 	ldw	r3,-32(fp)
 2010618:	e0bff917 	ldw	r2,-28(fp)
 201061c:	1886983a 	sll	r3,r3,r2
 2010620:	01000804 	movi	r4,32
 2010624:	e0bff917 	ldw	r2,-28(fp)
 2010628:	2085c83a 	sub	r2,r4,r2
 201062c:	e13ffb17 	ldw	r4,-20(fp)
 2010630:	2084d83a 	srl	r2,r4,r2
 2010634:	1884b03a 	or	r2,r3,r2
 2010638:	108ffc34 	orhi	r2,r2,16368
 201063c:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 2010640:	e0bff617 	ldw	r2,-40(fp)
 2010644:	e0fff717 	ldw	r3,-36(fp)
 2010648:	1880062e 	bgeu	r3,r2,2010664 <__b2d+0x190>
 201064c:	e0bff617 	ldw	r2,-40(fp)
 2010650:	10bfff04 	addi	r2,r2,-4
 2010654:	e0bff615 	stw	r2,-40(fp)
 2010658:	e0bff617 	ldw	r2,-40(fp)
 201065c:	10800017 	ldw	r2,0(r2)
 2010660:	00000106 	br	2010668 <__b2d+0x194>
 2010664:	0005883a 	mov	r2,zero
 2010668:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 201066c:	e0fffb17 	ldw	r3,-20(fp)
 2010670:	e0bff917 	ldw	r2,-28(fp)
 2010674:	1886983a 	sll	r3,r3,r2
 2010678:	01000804 	movi	r4,32
 201067c:	e0bff917 	ldw	r2,-28(fp)
 2010680:	2085c83a 	sub	r2,r4,r2
 2010684:	e13ff817 	ldw	r4,-32(fp)
 2010688:	2084d83a 	srl	r2,r4,r2
 201068c:	1884b03a 	or	r2,r3,r2
 2010690:	e0bffc15 	stw	r2,-16(fp)
 2010694:	00000506 	br	20106ac <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 2010698:	e0bff817 	ldw	r2,-32(fp)
 201069c:	108ffc34 	orhi	r2,r2,16368
 20106a0:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 20106a4:	e0bffb17 	ldw	r2,-20(fp)
 20106a8:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 20106ac:	e0bffc17 	ldw	r2,-16(fp)
 20106b0:	e0fffd17 	ldw	r3,-12(fp)
 20106b4:	1009883a 	mov	r4,r2
 20106b8:	180b883a 	mov	r5,r3
}
 20106bc:	2005883a 	mov	r2,r4
 20106c0:	2807883a 	mov	r3,r5
 20106c4:	e037883a 	mov	sp,fp
 20106c8:	dfc00117 	ldw	ra,4(sp)
 20106cc:	df000017 	ldw	fp,0(sp)
 20106d0:	dec00204 	addi	sp,sp,8
 20106d4:	f800283a 	ret

020106d8 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 20106d8:	defff004 	addi	sp,sp,-64
 20106dc:	dfc00f15 	stw	ra,60(sp)
 20106e0:	df000e15 	stw	fp,56(sp)
 20106e4:	dc000d15 	stw	r16,52(sp)
 20106e8:	df000e04 	addi	fp,sp,56
 20106ec:	e13ffb15 	stw	r4,-20(fp)
 20106f0:	e17ffc15 	stw	r5,-16(fp)
 20106f4:	e1bffd15 	stw	r6,-12(fp)
 20106f8:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 20106fc:	e0bffc17 	ldw	r2,-16(fp)
 2010700:	e0bff715 	stw	r2,-36(fp)
 2010704:	e0bffd17 	ldw	r2,-12(fp)
 2010708:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 201070c:	e0bffc17 	ldw	r2,-16(fp)
 2010710:	e0bff715 	stw	r2,-36(fp)
 2010714:	e0bffd17 	ldw	r2,-12(fp)
 2010718:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 201071c:	01400044 	movi	r5,1
 2010720:	e13ffb17 	ldw	r4,-20(fp)
 2010724:	200f2700 	call	200f270 <_Balloc>
 2010728:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 201072c:	e0bff417 	ldw	r2,-48(fp)
 2010730:	10800504 	addi	r2,r2,20
 2010734:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 2010738:	e0fff817 	ldw	r3,-32(fp)
 201073c:	00800434 	movhi	r2,16
 2010740:	10bfffc4 	addi	r2,r2,-1
 2010744:	1884703a 	and	r2,r3,r2
 2010748:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 201074c:	e0fff817 	ldw	r3,-32(fp)
 2010750:	00a00034 	movhi	r2,32768
 2010754:	10bfffc4 	addi	r2,r2,-1
 2010758:	1884703a 	and	r2,r3,r2
 201075c:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 2010760:	e0bff817 	ldw	r2,-32(fp)
 2010764:	1004d53a 	srli	r2,r2,20
 2010768:	e0bff615 	stw	r2,-40(fp)
 201076c:	e0bff617 	ldw	r2,-40(fp)
 2010770:	10000326 	beq	r2,zero,2010780 <__d2b+0xa8>
    z |= Exp_msk1;
 2010774:	e0bffa17 	ldw	r2,-24(fp)
 2010778:	10800434 	orhi	r2,r2,16
 201077c:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 2010780:	e0bff717 	ldw	r2,-36(fp)
 2010784:	10002826 	beq	r2,zero,2010828 <__d2b+0x150>
    {
      y = d1;
 2010788:	e0bff717 	ldw	r2,-36(fp)
 201078c:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 2010790:	e0bff904 	addi	r2,fp,-28
 2010794:	1009883a 	mov	r4,r2
 2010798:	200f7cc0 	call	200f7cc <__lo0bits>
 201079c:	e0bff315 	stw	r2,-52(fp)
      if (k)
 20107a0:	e0bff317 	ldw	r2,-52(fp)
 20107a4:	10000e26 	beq	r2,zero,20107e0 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 20107a8:	e0fffa17 	ldw	r3,-24(fp)
 20107ac:	01000804 	movi	r4,32
 20107b0:	e0bff317 	ldw	r2,-52(fp)
 20107b4:	2085c83a 	sub	r2,r4,r2
 20107b8:	1886983a 	sll	r3,r3,r2
 20107bc:	e0bff917 	ldw	r2,-28(fp)
 20107c0:	1886b03a 	or	r3,r3,r2
 20107c4:	e0bff517 	ldw	r2,-44(fp)
 20107c8:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 20107cc:	e0fffa17 	ldw	r3,-24(fp)
 20107d0:	e0bff317 	ldw	r2,-52(fp)
 20107d4:	1884d83a 	srl	r2,r3,r2
 20107d8:	e0bffa15 	stw	r2,-24(fp)
 20107dc:	00000306 	br	20107ec <__d2b+0x114>
	}
      else
	x[0] = y;
 20107e0:	e0fff917 	ldw	r3,-28(fp)
 20107e4:	e0bff517 	ldw	r2,-44(fp)
 20107e8:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 20107ec:	e0bff517 	ldw	r2,-44(fp)
 20107f0:	10800104 	addi	r2,r2,4
 20107f4:	e0fffa17 	ldw	r3,-24(fp)
 20107f8:	10c00015 	stw	r3,0(r2)
 20107fc:	10800017 	ldw	r2,0(r2)
 2010800:	10000226 	beq	r2,zero,201080c <__d2b+0x134>
 2010804:	00800084 	movi	r2,2
 2010808:	00000106 	br	2010810 <__d2b+0x138>
 201080c:	00800044 	movi	r2,1
 2010810:	e0fff417 	ldw	r3,-48(fp)
 2010814:	18800415 	stw	r2,16(r3)
 2010818:	e0bff417 	ldw	r2,-48(fp)
 201081c:	10800417 	ldw	r2,16(r2)
 2010820:	e0bff215 	stw	r2,-56(fp)
 2010824:	00001006 	br	2010868 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 2010828:	e0bffa04 	addi	r2,fp,-24
 201082c:	1009883a 	mov	r4,r2
 2010830:	200f7cc0 	call	200f7cc <__lo0bits>
 2010834:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 2010838:	e0fffa17 	ldw	r3,-24(fp)
 201083c:	e0bff517 	ldw	r2,-44(fp)
 2010840:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 2010844:	e0bff417 	ldw	r2,-48(fp)
 2010848:	00c00044 	movi	r3,1
 201084c:	10c00415 	stw	r3,16(r2)
 2010850:	e0bff417 	ldw	r2,-48(fp)
 2010854:	10800417 	ldw	r2,16(r2)
 2010858:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 201085c:	e0bff317 	ldw	r2,-52(fp)
 2010860:	10800804 	addi	r2,r2,32
 2010864:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 2010868:	e0bff617 	ldw	r2,-40(fp)
 201086c:	10000c26 	beq	r2,zero,20108a0 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 2010870:	e0bff617 	ldw	r2,-40(fp)
 2010874:	10fef344 	addi	r3,r2,-1075
 2010878:	e0bff317 	ldw	r2,-52(fp)
 201087c:	1887883a 	add	r3,r3,r2
 2010880:	e0bffe17 	ldw	r2,-8(fp)
 2010884:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 2010888:	00c00d44 	movi	r3,53
 201088c:	e0bff317 	ldw	r2,-52(fp)
 2010890:	1887c83a 	sub	r3,r3,r2
 2010894:	e0800217 	ldw	r2,8(fp)
 2010898:	10c00015 	stw	r3,0(r2)
 201089c:	00001706 	br	20108fc <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 20108a0:	e0bff617 	ldw	r2,-40(fp)
 20108a4:	10fef384 	addi	r3,r2,-1074
 20108a8:	e0bff317 	ldw	r2,-52(fp)
 20108ac:	1887883a 	add	r3,r3,r2
 20108b0:	e0bffe17 	ldw	r2,-8(fp)
 20108b4:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 20108b8:	e0bff217 	ldw	r2,-56(fp)
 20108bc:	1020917a 	slli	r16,r2,5
 20108c0:	e0fff217 	ldw	r3,-56(fp)
 20108c4:	00900034 	movhi	r2,16384
 20108c8:	10bfffc4 	addi	r2,r2,-1
 20108cc:	1885883a 	add	r2,r3,r2
 20108d0:	1085883a 	add	r2,r2,r2
 20108d4:	1085883a 	add	r2,r2,r2
 20108d8:	1007883a 	mov	r3,r2
 20108dc:	e0bff517 	ldw	r2,-44(fp)
 20108e0:	10c5883a 	add	r2,r2,r3
 20108e4:	10800017 	ldw	r2,0(r2)
 20108e8:	1009883a 	mov	r4,r2
 20108ec:	200f73c0 	call	200f73c <__hi0bits>
 20108f0:	8087c83a 	sub	r3,r16,r2
 20108f4:	e0800217 	ldw	r2,8(fp)
 20108f8:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 20108fc:	e0bff417 	ldw	r2,-48(fp)
}
 2010900:	e6ffff04 	addi	sp,fp,-4
 2010904:	dfc00217 	ldw	ra,8(sp)
 2010908:	df000117 	ldw	fp,4(sp)
 201090c:	dc000017 	ldw	r16,0(sp)
 2010910:	dec00304 	addi	sp,sp,12
 2010914:	f800283a 	ret

02010918 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 2010918:	defff504 	addi	sp,sp,-44
 201091c:	dfc00a15 	stw	ra,40(sp)
 2010920:	df000915 	stw	fp,36(sp)
 2010924:	df000904 	addi	fp,sp,36
 2010928:	e13ffe15 	stw	r4,-8(fp)
 201092c:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 2010930:	e0bffc04 	addi	r2,fp,-16
 2010934:	100b883a 	mov	r5,r2
 2010938:	e13ffe17 	ldw	r4,-8(fp)
 201093c:	20104d40 	call	20104d4 <__b2d>
 2010940:	1009883a 	mov	r4,r2
 2010944:	180b883a 	mov	r5,r3
 2010948:	e13ff815 	stw	r4,-32(fp)
 201094c:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 2010950:	e0bffd04 	addi	r2,fp,-12
 2010954:	100b883a 	mov	r5,r2
 2010958:	e13fff17 	ldw	r4,-4(fp)
 201095c:	20104d40 	call	20104d4 <__b2d>
 2010960:	1009883a 	mov	r4,r2
 2010964:	180b883a 	mov	r5,r3
 2010968:	e13ffa15 	stw	r4,-24(fp)
 201096c:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 2010970:	e0fffc17 	ldw	r3,-16(fp)
 2010974:	e0bffd17 	ldw	r2,-12(fp)
 2010978:	1887c83a 	sub	r3,r3,r2
 201097c:	e0bffe17 	ldw	r2,-8(fp)
 2010980:	11000417 	ldw	r4,16(r2)
 2010984:	e0bfff17 	ldw	r2,-4(fp)
 2010988:	10800417 	ldw	r2,16(r2)
 201098c:	2085c83a 	sub	r2,r4,r2
 2010990:	1004917a 	slli	r2,r2,5
 2010994:	1885883a 	add	r2,r3,r2
 2010998:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 201099c:	e0bff717 	ldw	r2,-36(fp)
 20109a0:	0080060e 	bge	zero,r2,20109bc <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 20109a4:	e0fff917 	ldw	r3,-28(fp)
 20109a8:	e0bff717 	ldw	r2,-36(fp)
 20109ac:	1004953a 	slli	r2,r2,20
 20109b0:	1885883a 	add	r2,r3,r2
 20109b4:	e0bff915 	stw	r2,-28(fp)
 20109b8:	00000806 	br	20109dc <__ratio+0xc4>
  else
    {
      k = -k;
 20109bc:	e0bff717 	ldw	r2,-36(fp)
 20109c0:	0085c83a 	sub	r2,zero,r2
 20109c4:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 20109c8:	e0fffb17 	ldw	r3,-20(fp)
 20109cc:	e0bff717 	ldw	r2,-36(fp)
 20109d0:	1004953a 	slli	r2,r2,20
 20109d4:	1885883a 	add	r2,r3,r2
 20109d8:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 20109dc:	e0bff817 	ldw	r2,-32(fp)
 20109e0:	e0fff917 	ldw	r3,-28(fp)
 20109e4:	e13ffa17 	ldw	r4,-24(fp)
 20109e8:	e17ffb17 	ldw	r5,-20(fp)
 20109ec:	200d883a 	mov	r6,r4
 20109f0:	280f883a 	mov	r7,r5
 20109f4:	1009883a 	mov	r4,r2
 20109f8:	180b883a 	mov	r5,r3
 20109fc:	2005f800 	call	2005f80 <__divdf3>
 2010a00:	100f883a 	mov	r7,r2
 2010a04:	1811883a 	mov	r8,r3
 2010a08:	380b883a 	mov	r5,r7
 2010a0c:	400d883a 	mov	r6,r8
 2010a10:	2807883a 	mov	r3,r5
 2010a14:	3009883a 	mov	r4,r6
}
 2010a18:	1805883a 	mov	r2,r3
 2010a1c:	2007883a 	mov	r3,r4
 2010a20:	e037883a 	mov	sp,fp
 2010a24:	dfc00117 	ldw	ra,4(sp)
 2010a28:	df000017 	ldw	fp,0(sp)
 2010a2c:	dec00204 	addi	sp,sp,8
 2010a30:	f800283a 	ret

02010a34 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 2010a34:	defffb04 	addi	sp,sp,-20
 2010a38:	dfc00415 	stw	ra,16(sp)
 2010a3c:	df000315 	stw	fp,12(sp)
 2010a40:	df000304 	addi	fp,sp,12
 2010a44:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 2010a48:	e03ffd15 	stw	zero,-12(fp)
 2010a4c:	008ffc34 	movhi	r2,16368
 2010a50:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 2010a54:	e0bfff17 	ldw	r2,-4(fp)
 2010a58:	10800608 	cmpgei	r2,r2,24
 2010a5c:	1000141e 	bne	r2,zero,2010ab0 <_mprec_log10+0x7c>
    return tens[dig];
 2010a60:	008080b4 	movhi	r2,514
 2010a64:	10870904 	addi	r2,r2,7204
 2010a68:	e0ffff17 	ldw	r3,-4(fp)
 2010a6c:	180690fa 	slli	r3,r3,3
 2010a70:	10c9883a 	add	r4,r2,r3
 2010a74:	20800017 	ldw	r2,0(r4)
 2010a78:	20c00117 	ldw	r3,4(r4)
 2010a7c:	00001006 	br	2010ac0 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 2010a80:	000d883a 	mov	r6,zero
 2010a84:	01d00934 	movhi	r7,16420
 2010a88:	e13ffd17 	ldw	r4,-12(fp)
 2010a8c:	e17ffe17 	ldw	r5,-8(fp)
 2010a90:	2006ac00 	call	2006ac0 <__muldf3>
 2010a94:	1009883a 	mov	r4,r2
 2010a98:	180b883a 	mov	r5,r3
 2010a9c:	e13ffd15 	stw	r4,-12(fp)
 2010aa0:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 2010aa4:	e0bfff17 	ldw	r2,-4(fp)
 2010aa8:	10bfffc4 	addi	r2,r2,-1
 2010aac:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 2010ab0:	e0bfff17 	ldw	r2,-4(fp)
 2010ab4:	00bff216 	blt	zero,r2,2010a80 <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 2010ab8:	e0bffd17 	ldw	r2,-12(fp)
 2010abc:	e0fffe17 	ldw	r3,-8(fp)
 2010ac0:	1009883a 	mov	r4,r2
 2010ac4:	180b883a 	mov	r5,r3
}
 2010ac8:	2005883a 	mov	r2,r4
 2010acc:	2807883a 	mov	r3,r5
 2010ad0:	e037883a 	mov	sp,fp
 2010ad4:	dfc00117 	ldw	ra,4(sp)
 2010ad8:	df000017 	ldw	fp,0(sp)
 2010adc:	dec00204 	addi	sp,sp,8
 2010ae0:	f800283a 	ret

02010ae4 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 2010ae4:	defff904 	addi	sp,sp,-28
 2010ae8:	df000615 	stw	fp,24(sp)
 2010aec:	df000604 	addi	fp,sp,24
 2010af0:	e13ffd15 	stw	r4,-12(fp)
 2010af4:	e17ffe15 	stw	r5,-8(fp)
 2010af8:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 2010afc:	e0bffe17 	ldw	r2,-8(fp)
 2010b00:	10bfffc4 	addi	r2,r2,-1
 2010b04:	1005d17a 	srai	r2,r2,5
 2010b08:	10800044 	addi	r2,r2,1
 2010b0c:	1085883a 	add	r2,r2,r2
 2010b10:	1085883a 	add	r2,r2,r2
 2010b14:	1007883a 	mov	r3,r2
 2010b18:	e0bffd17 	ldw	r2,-12(fp)
 2010b1c:	10c5883a 	add	r2,r2,r3
 2010b20:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 2010b24:	e0bfff17 	ldw	r2,-4(fp)
 2010b28:	10800504 	addi	r2,r2,20
 2010b2c:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 2010b30:	e0bfff17 	ldw	r2,-4(fp)
 2010b34:	10800417 	ldw	r2,16(r2)
 2010b38:	1085883a 	add	r2,r2,r2
 2010b3c:	1085883a 	add	r2,r2,r2
 2010b40:	1007883a 	mov	r3,r2
 2010b44:	e0bffa17 	ldw	r2,-24(fp)
 2010b48:	10c5883a 	add	r2,r2,r3
 2010b4c:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 2010b50:	00000806 	br	2010b74 <__copybits+0x90>
		*c++ = *x++;
 2010b54:	e0bffd17 	ldw	r2,-12(fp)
 2010b58:	10c00104 	addi	r3,r2,4
 2010b5c:	e0fffd15 	stw	r3,-12(fp)
 2010b60:	e0fffa17 	ldw	r3,-24(fp)
 2010b64:	19000104 	addi	r4,r3,4
 2010b68:	e13ffa15 	stw	r4,-24(fp)
 2010b6c:	18c00017 	ldw	r3,0(r3)
 2010b70:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 2010b74:	e0fffa17 	ldw	r3,-24(fp)
 2010b78:	e0bffc17 	ldw	r2,-16(fp)
 2010b7c:	18bff536 	bltu	r3,r2,2010b54 <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 2010b80:	00000406 	br	2010b94 <__copybits+0xb0>
		*c++ = 0;
 2010b84:	e0bffd17 	ldw	r2,-12(fp)
 2010b88:	10c00104 	addi	r3,r2,4
 2010b8c:	e0fffd15 	stw	r3,-12(fp)
 2010b90:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 2010b94:	e0fffd17 	ldw	r3,-12(fp)
 2010b98:	e0bffb17 	ldw	r2,-20(fp)
 2010b9c:	18bff936 	bltu	r3,r2,2010b84 <__copybits+0xa0>
		*c++ = 0;
}
 2010ba0:	0001883a 	nop
 2010ba4:	e037883a 	mov	sp,fp
 2010ba8:	df000017 	ldw	fp,0(sp)
 2010bac:	dec00104 	addi	sp,sp,4
 2010bb0:	f800283a 	ret

02010bb4 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 2010bb4:	defff704 	addi	sp,sp,-36
 2010bb8:	df000815 	stw	fp,32(sp)
 2010bbc:	df000804 	addi	fp,sp,32
 2010bc0:	e13ffe15 	stw	r4,-8(fp)
 2010bc4:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 2010bc8:	e0bffe17 	ldw	r2,-8(fp)
 2010bcc:	10800504 	addi	r2,r2,20
 2010bd0:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 2010bd4:	e0bffe17 	ldw	r2,-8(fp)
 2010bd8:	10800417 	ldw	r2,16(r2)
 2010bdc:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 2010be0:	e0bfff17 	ldw	r2,-4(fp)
 2010be4:	1005d17a 	srai	r2,r2,5
 2010be8:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 2010bec:	e0bff817 	ldw	r2,-32(fp)
 2010bf0:	e0fffa17 	ldw	r3,-24(fp)
 2010bf4:	1880030e 	bge	r3,r2,2010c04 <__any_on+0x50>
		n = nwds;
 2010bf8:	e0bffa17 	ldw	r2,-24(fp)
 2010bfc:	e0bff815 	stw	r2,-32(fp)
 2010c00:	00001f06 	br	2010c80 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 2010c04:	e0fff817 	ldw	r3,-32(fp)
 2010c08:	e0bffa17 	ldw	r2,-24(fp)
 2010c0c:	18801c0e 	bge	r3,r2,2010c80 <__any_on+0xcc>
 2010c10:	e0bfff17 	ldw	r2,-4(fp)
 2010c14:	108007cc 	andi	r2,r2,31
 2010c18:	e0bfff15 	stw	r2,-4(fp)
 2010c1c:	e0bfff17 	ldw	r2,-4(fp)
 2010c20:	10001726 	beq	r2,zero,2010c80 <__any_on+0xcc>
		x1 = x2 = x[n];
 2010c24:	e0bff817 	ldw	r2,-32(fp)
 2010c28:	1085883a 	add	r2,r2,r2
 2010c2c:	1085883a 	add	r2,r2,r2
 2010c30:	1007883a 	mov	r3,r2
 2010c34:	e0bff917 	ldw	r2,-28(fp)
 2010c38:	10c5883a 	add	r2,r2,r3
 2010c3c:	10800017 	ldw	r2,0(r2)
 2010c40:	e0bffb15 	stw	r2,-20(fp)
 2010c44:	e0bffb17 	ldw	r2,-20(fp)
 2010c48:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 2010c4c:	e0fffc17 	ldw	r3,-16(fp)
 2010c50:	e0bfff17 	ldw	r2,-4(fp)
 2010c54:	1884d83a 	srl	r2,r3,r2
 2010c58:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 2010c5c:	e0fffc17 	ldw	r3,-16(fp)
 2010c60:	e0bfff17 	ldw	r2,-4(fp)
 2010c64:	1884983a 	sll	r2,r3,r2
 2010c68:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 2010c6c:	e0fffc17 	ldw	r3,-16(fp)
 2010c70:	e0bffb17 	ldw	r2,-20(fp)
 2010c74:	18800226 	beq	r3,r2,2010c80 <__any_on+0xcc>
			return 1;
 2010c78:	00800044 	movi	r2,1
 2010c7c:	00001606 	br	2010cd8 <__any_on+0x124>
		}
	x0 = x;
 2010c80:	e0bff917 	ldw	r2,-28(fp)
 2010c84:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 2010c88:	e0bff817 	ldw	r2,-32(fp)
 2010c8c:	1085883a 	add	r2,r2,r2
 2010c90:	1085883a 	add	r2,r2,r2
 2010c94:	1007883a 	mov	r3,r2
 2010c98:	e0bff917 	ldw	r2,-28(fp)
 2010c9c:	10c5883a 	add	r2,r2,r3
 2010ca0:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 2010ca4:	00000806 	br	2010cc8 <__any_on+0x114>
		if (*--x)
 2010ca8:	e0bff917 	ldw	r2,-28(fp)
 2010cac:	10bfff04 	addi	r2,r2,-4
 2010cb0:	e0bff915 	stw	r2,-28(fp)
 2010cb4:	e0bff917 	ldw	r2,-28(fp)
 2010cb8:	10800017 	ldw	r2,0(r2)
 2010cbc:	10000226 	beq	r2,zero,2010cc8 <__any_on+0x114>
			return 1;
 2010cc0:	00800044 	movi	r2,1
 2010cc4:	00000406 	br	2010cd8 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 2010cc8:	e0bff917 	ldw	r2,-28(fp)
 2010ccc:	e0fffd17 	ldw	r3,-12(fp)
 2010cd0:	18bff536 	bltu	r3,r2,2010ca8 <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 2010cd4:	0005883a 	mov	r2,zero
}
 2010cd8:	e037883a 	mov	sp,fp
 2010cdc:	df000017 	ldw	fp,0(sp)
 2010ce0:	dec00104 	addi	sp,sp,4
 2010ce4:	f800283a 	ret

02010ce8 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 2010ce8:	deffe104 	addi	sp,sp,-124
 2010cec:	dfc01e15 	stw	ra,120(sp)
 2010cf0:	df001d15 	stw	fp,116(sp)
 2010cf4:	df001d04 	addi	fp,sp,116
 2010cf8:	e13ffd15 	stw	r4,-12(fp)
 2010cfc:	e17ffe15 	stw	r5,-8(fp)
 2010d00:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 2010d04:	e0bffe17 	ldw	r2,-8(fp)
 2010d08:	1000041e 	bne	r2,zero,2010d1c <_realloc_r+0x34>
 2010d0c:	e17fff17 	ldw	r5,-4(fp)
 2010d10:	e13ffd17 	ldw	r4,-12(fp)
 2010d14:	200e3300 	call	200e330 <_malloc_r>
 2010d18:	0002ea06 	br	20118c4 <_realloc_r+0xbdc>

  MALLOC_LOCK;
 2010d1c:	e13ffd17 	ldw	r4,-12(fp)
 2010d20:	201673c0 	call	201673c <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 2010d24:	e0bffe17 	ldw	r2,-8(fp)
 2010d28:	10bffe04 	addi	r2,r2,-8
 2010d2c:	e0bfef15 	stw	r2,-68(fp)
 2010d30:	e0bfef17 	ldw	r2,-68(fp)
 2010d34:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 2010d38:	e0bfef17 	ldw	r2,-68(fp)
 2010d3c:	10c00117 	ldw	r3,4(r2)
 2010d40:	00bfff04 	movi	r2,-4
 2010d44:	1884703a 	and	r2,r3,r2
 2010d48:	e0bff015 	stw	r2,-64(fp)
 2010d4c:	e0bff017 	ldw	r2,-64(fp)
 2010d50:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 2010d54:	e0bfff17 	ldw	r2,-4(fp)
 2010d58:	108002c4 	addi	r2,r2,11
 2010d5c:	108005f0 	cmpltui	r2,r2,23
 2010d60:	1000051e 	bne	r2,zero,2010d78 <_realloc_r+0x90>
 2010d64:	e0bfff17 	ldw	r2,-4(fp)
 2010d68:	10c002c4 	addi	r3,r2,11
 2010d6c:	00bffe04 	movi	r2,-8
 2010d70:	1884703a 	and	r2,r3,r2
 2010d74:	00000106 	br	2010d7c <_realloc_r+0x94>
 2010d78:	00800404 	movi	r2,16
 2010d7c:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 2010d80:	e0bff117 	ldw	r2,-60(fp)
 2010d84:	10000316 	blt	r2,zero,2010d94 <_realloc_r+0xac>
 2010d88:	e0fff117 	ldw	r3,-60(fp)
 2010d8c:	e0bfff17 	ldw	r2,-4(fp)
 2010d90:	1880052e 	bgeu	r3,r2,2010da8 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 2010d94:	e0bffd17 	ldw	r2,-12(fp)
 2010d98:	00c00304 	movi	r3,12
 2010d9c:	10c00015 	stw	r3,0(r2)
    return 0;
 2010da0:	0005883a 	mov	r2,zero
 2010da4:	0002c706 	br	20118c4 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 2010da8:	e0fff017 	ldw	r3,-64(fp)
 2010dac:	e0bff117 	ldw	r2,-60(fp)
 2010db0:	18828b0e 	bge	r3,r2,20117e0 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 2010db4:	e0ffef17 	ldw	r3,-68(fp)
 2010db8:	e0bff017 	ldw	r2,-64(fp)
 2010dbc:	1885883a 	add	r2,r3,r2
 2010dc0:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 2010dc4:	008080b4 	movhi	r2,514
 2010dc8:	1088fb04 	addi	r2,r2,9196
 2010dcc:	10c00217 	ldw	r3,8(r2)
 2010dd0:	e0bfe517 	ldw	r2,-108(fp)
 2010dd4:	18800926 	beq	r3,r2,2010dfc <_realloc_r+0x114>
 2010dd8:	e0bfe517 	ldw	r2,-108(fp)
 2010ddc:	10c00117 	ldw	r3,4(r2)
 2010de0:	00bfff84 	movi	r2,-2
 2010de4:	1884703a 	and	r2,r3,r2
 2010de8:	e0ffe517 	ldw	r3,-108(fp)
 2010dec:	1885883a 	add	r2,r3,r2
 2010df0:	10800117 	ldw	r2,4(r2)
 2010df4:	1080004c 	andi	r2,r2,1
 2010df8:	1000461e 	bne	r2,zero,2010f14 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 2010dfc:	e0bfe517 	ldw	r2,-108(fp)
 2010e00:	10c00117 	ldw	r3,4(r2)
 2010e04:	00bfff04 	movi	r2,-4
 2010e08:	1884703a 	and	r2,r3,r2
 2010e0c:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 2010e10:	008080b4 	movhi	r2,514
 2010e14:	1088fb04 	addi	r2,r2,9196
 2010e18:	10c00217 	ldw	r3,8(r2)
 2010e1c:	e0bfe517 	ldw	r2,-108(fp)
 2010e20:	1880251e 	bne	r3,r2,2010eb8 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 2010e24:	e0ffe617 	ldw	r3,-104(fp)
 2010e28:	e0bfe417 	ldw	r2,-112(fp)
 2010e2c:	1885883a 	add	r2,r3,r2
 2010e30:	1007883a 	mov	r3,r2
 2010e34:	e0bff117 	ldw	r2,-60(fp)
 2010e38:	10800404 	addi	r2,r2,16
 2010e3c:	18803816 	blt	r3,r2,2010f20 <_realloc_r+0x238>
        {
          newsize += nextsize;
 2010e40:	e0ffe417 	ldw	r3,-112(fp)
 2010e44:	e0bfe617 	ldw	r2,-104(fp)
 2010e48:	1885883a 	add	r2,r3,r2
 2010e4c:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 2010e50:	008080b4 	movhi	r2,514
 2010e54:	1088fb04 	addi	r2,r2,9196
 2010e58:	e13fef17 	ldw	r4,-68(fp)
 2010e5c:	e0fff117 	ldw	r3,-60(fp)
 2010e60:	20c7883a 	add	r3,r4,r3
 2010e64:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 2010e68:	008080b4 	movhi	r2,514
 2010e6c:	1088fb04 	addi	r2,r2,9196
 2010e70:	10800217 	ldw	r2,8(r2)
 2010e74:	e13fe417 	ldw	r4,-112(fp)
 2010e78:	e0fff117 	ldw	r3,-60(fp)
 2010e7c:	20c7c83a 	sub	r3,r4,r3
 2010e80:	18c00054 	ori	r3,r3,1
 2010e84:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 2010e88:	e0bfef17 	ldw	r2,-68(fp)
 2010e8c:	10800117 	ldw	r2,4(r2)
 2010e90:	10c0004c 	andi	r3,r2,1
 2010e94:	e0bff117 	ldw	r2,-60(fp)
 2010e98:	1886b03a 	or	r3,r3,r2
 2010e9c:	e0bfef17 	ldw	r2,-68(fp)
 2010ea0:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 2010ea4:	e13ffd17 	ldw	r4,-12(fp)
 2010ea8:	201685c0 	call	201685c <__malloc_unlock>
          return chunk2mem(oldp);
 2010eac:	e0bfef17 	ldw	r2,-68(fp)
 2010eb0:	10800204 	addi	r2,r2,8
 2010eb4:	00028306 	br	20118c4 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 2010eb8:	e0ffe617 	ldw	r3,-104(fp)
 2010ebc:	e0bfe417 	ldw	r2,-112(fp)
 2010ec0:	1885883a 	add	r2,r3,r2
 2010ec4:	1007883a 	mov	r3,r2
 2010ec8:	e0bff117 	ldw	r2,-60(fp)
 2010ecc:	18801416 	blt	r3,r2,2010f20 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 2010ed0:	e0bfe517 	ldw	r2,-108(fp)
 2010ed4:	10800317 	ldw	r2,12(r2)
 2010ed8:	e0bff215 	stw	r2,-56(fp)
 2010edc:	e0bfe517 	ldw	r2,-108(fp)
 2010ee0:	10800217 	ldw	r2,8(r2)
 2010ee4:	e0bff315 	stw	r2,-52(fp)
 2010ee8:	e0bff317 	ldw	r2,-52(fp)
 2010eec:	e0fff217 	ldw	r3,-56(fp)
 2010ef0:	10c00315 	stw	r3,12(r2)
 2010ef4:	e0bff217 	ldw	r2,-56(fp)
 2010ef8:	e0fff317 	ldw	r3,-52(fp)
 2010efc:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 2010f00:	e0ffe417 	ldw	r3,-112(fp)
 2010f04:	e0bfe617 	ldw	r2,-104(fp)
 2010f08:	1885883a 	add	r2,r3,r2
 2010f0c:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 2010f10:	00023306 	br	20117e0 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 2010f14:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 2010f18:	e03fe615 	stw	zero,-104(fp)
 2010f1c:	00000106 	br	2010f24 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 2010f20:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 2010f24:	e0bfef17 	ldw	r2,-68(fp)
 2010f28:	10800117 	ldw	r2,4(r2)
 2010f2c:	1080004c 	andi	r2,r2,1
 2010f30:	1001a91e 	bne	r2,zero,20115d8 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 2010f34:	e0bfef17 	ldw	r2,-68(fp)
 2010f38:	10800017 	ldw	r2,0(r2)
 2010f3c:	0085c83a 	sub	r2,zero,r2
 2010f40:	e0ffef17 	ldw	r3,-68(fp)
 2010f44:	1885883a 	add	r2,r3,r2
 2010f48:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 2010f4c:	e0bff417 	ldw	r2,-48(fp)
 2010f50:	10c00117 	ldw	r3,4(r2)
 2010f54:	00bfff04 	movi	r2,-4
 2010f58:	1884703a 	and	r2,r3,r2
 2010f5c:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 2010f60:	e0bfe517 	ldw	r2,-108(fp)
 2010f64:	10012226 	beq	r2,zero,20113f0 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 2010f68:	008080b4 	movhi	r2,514
 2010f6c:	1088fb04 	addi	r2,r2,9196
 2010f70:	10c00217 	ldw	r3,8(r2)
 2010f74:	e0bfe517 	ldw	r2,-108(fp)
 2010f78:	1880951e 	bne	r3,r2,20111d0 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 2010f7c:	e0ffe617 	ldw	r3,-104(fp)
 2010f80:	e0bff517 	ldw	r2,-44(fp)
 2010f84:	1887883a 	add	r3,r3,r2
 2010f88:	e0bfe417 	ldw	r2,-112(fp)
 2010f8c:	1885883a 	add	r2,r3,r2
 2010f90:	1007883a 	mov	r3,r2
 2010f94:	e0bff117 	ldw	r2,-60(fp)
 2010f98:	10800404 	addi	r2,r2,16
 2010f9c:	18811416 	blt	r3,r2,20113f0 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 2010fa0:	e0bff417 	ldw	r2,-48(fp)
 2010fa4:	10800317 	ldw	r2,12(r2)
 2010fa8:	e0bff215 	stw	r2,-56(fp)
 2010fac:	e0bff417 	ldw	r2,-48(fp)
 2010fb0:	10800217 	ldw	r2,8(r2)
 2010fb4:	e0bff315 	stw	r2,-52(fp)
 2010fb8:	e0bff317 	ldw	r2,-52(fp)
 2010fbc:	e0fff217 	ldw	r3,-56(fp)
 2010fc0:	10c00315 	stw	r3,12(r2)
 2010fc4:	e0bff217 	ldw	r2,-56(fp)
 2010fc8:	e0fff317 	ldw	r3,-52(fp)
 2010fcc:	10c00215 	stw	r3,8(r2)
            newp = prev;
 2010fd0:	e0bff417 	ldw	r2,-48(fp)
 2010fd4:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 2010fd8:	e0fff517 	ldw	r3,-44(fp)
 2010fdc:	e0bfe617 	ldw	r2,-104(fp)
 2010fe0:	1885883a 	add	r2,r3,r2
 2010fe4:	e0ffe417 	ldw	r3,-112(fp)
 2010fe8:	1885883a 	add	r2,r3,r2
 2010fec:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 2010ff0:	e0bfe317 	ldw	r2,-116(fp)
 2010ff4:	10800204 	addi	r2,r2,8
 2010ff8:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2010ffc:	e0bff017 	ldw	r2,-64(fp)
 2011000:	10bfff04 	addi	r2,r2,-4
 2011004:	e0bff715 	stw	r2,-36(fp)
 2011008:	e0bff717 	ldw	r2,-36(fp)
 201100c:	10800968 	cmpgeui	r2,r2,37
 2011010:	1000521e 	bne	r2,zero,201115c <_realloc_r+0x474>
 2011014:	e0bffe17 	ldw	r2,-8(fp)
 2011018:	e0bfe715 	stw	r2,-100(fp)
 201101c:	e0bff617 	ldw	r2,-40(fp)
 2011020:	e0bfe815 	stw	r2,-96(fp)
 2011024:	e0bff717 	ldw	r2,-36(fp)
 2011028:	10800530 	cmpltui	r2,r2,20
 201102c:	1000361e 	bne	r2,zero,2011108 <_realloc_r+0x420>
 2011030:	e0bfe817 	ldw	r2,-96(fp)
 2011034:	10c00104 	addi	r3,r2,4
 2011038:	e0ffe815 	stw	r3,-96(fp)
 201103c:	e0ffe717 	ldw	r3,-100(fp)
 2011040:	19000104 	addi	r4,r3,4
 2011044:	e13fe715 	stw	r4,-100(fp)
 2011048:	18c00017 	ldw	r3,0(r3)
 201104c:	10c00015 	stw	r3,0(r2)
 2011050:	e0bfe817 	ldw	r2,-96(fp)
 2011054:	10c00104 	addi	r3,r2,4
 2011058:	e0ffe815 	stw	r3,-96(fp)
 201105c:	e0ffe717 	ldw	r3,-100(fp)
 2011060:	19000104 	addi	r4,r3,4
 2011064:	e13fe715 	stw	r4,-100(fp)
 2011068:	18c00017 	ldw	r3,0(r3)
 201106c:	10c00015 	stw	r3,0(r2)
 2011070:	e0bff717 	ldw	r2,-36(fp)
 2011074:	10800730 	cmpltui	r2,r2,28
 2011078:	1000231e 	bne	r2,zero,2011108 <_realloc_r+0x420>
 201107c:	e0bfe817 	ldw	r2,-96(fp)
 2011080:	10c00104 	addi	r3,r2,4
 2011084:	e0ffe815 	stw	r3,-96(fp)
 2011088:	e0ffe717 	ldw	r3,-100(fp)
 201108c:	19000104 	addi	r4,r3,4
 2011090:	e13fe715 	stw	r4,-100(fp)
 2011094:	18c00017 	ldw	r3,0(r3)
 2011098:	10c00015 	stw	r3,0(r2)
 201109c:	e0bfe817 	ldw	r2,-96(fp)
 20110a0:	10c00104 	addi	r3,r2,4
 20110a4:	e0ffe815 	stw	r3,-96(fp)
 20110a8:	e0ffe717 	ldw	r3,-100(fp)
 20110ac:	19000104 	addi	r4,r3,4
 20110b0:	e13fe715 	stw	r4,-100(fp)
 20110b4:	18c00017 	ldw	r3,0(r3)
 20110b8:	10c00015 	stw	r3,0(r2)
 20110bc:	e0bff717 	ldw	r2,-36(fp)
 20110c0:	10800930 	cmpltui	r2,r2,36
 20110c4:	1000101e 	bne	r2,zero,2011108 <_realloc_r+0x420>
 20110c8:	e0bfe817 	ldw	r2,-96(fp)
 20110cc:	10c00104 	addi	r3,r2,4
 20110d0:	e0ffe815 	stw	r3,-96(fp)
 20110d4:	e0ffe717 	ldw	r3,-100(fp)
 20110d8:	19000104 	addi	r4,r3,4
 20110dc:	e13fe715 	stw	r4,-100(fp)
 20110e0:	18c00017 	ldw	r3,0(r3)
 20110e4:	10c00015 	stw	r3,0(r2)
 20110e8:	e0bfe817 	ldw	r2,-96(fp)
 20110ec:	10c00104 	addi	r3,r2,4
 20110f0:	e0ffe815 	stw	r3,-96(fp)
 20110f4:	e0ffe717 	ldw	r3,-100(fp)
 20110f8:	19000104 	addi	r4,r3,4
 20110fc:	e13fe715 	stw	r4,-100(fp)
 2011100:	18c00017 	ldw	r3,0(r3)
 2011104:	10c00015 	stw	r3,0(r2)
 2011108:	e0bfe817 	ldw	r2,-96(fp)
 201110c:	10c00104 	addi	r3,r2,4
 2011110:	e0ffe815 	stw	r3,-96(fp)
 2011114:	e0ffe717 	ldw	r3,-100(fp)
 2011118:	19000104 	addi	r4,r3,4
 201111c:	e13fe715 	stw	r4,-100(fp)
 2011120:	18c00017 	ldw	r3,0(r3)
 2011124:	10c00015 	stw	r3,0(r2)
 2011128:	e0bfe817 	ldw	r2,-96(fp)
 201112c:	10c00104 	addi	r3,r2,4
 2011130:	e0ffe815 	stw	r3,-96(fp)
 2011134:	e0ffe717 	ldw	r3,-100(fp)
 2011138:	19000104 	addi	r4,r3,4
 201113c:	e13fe715 	stw	r4,-100(fp)
 2011140:	18c00017 	ldw	r3,0(r3)
 2011144:	10c00015 	stw	r3,0(r2)
 2011148:	e0bfe717 	ldw	r2,-100(fp)
 201114c:	10c00017 	ldw	r3,0(r2)
 2011150:	e0bfe817 	ldw	r2,-96(fp)
 2011154:	10c00015 	stw	r3,0(r2)
 2011158:	00000406 	br	201116c <_realloc_r+0x484>
 201115c:	e1bff717 	ldw	r6,-36(fp)
 2011160:	e17ffe17 	ldw	r5,-8(fp)
 2011164:	e13ff617 	ldw	r4,-40(fp)
 2011168:	200f0680 	call	200f068 <memmove>
            top = chunk_at_offset(newp, nb);
 201116c:	008080b4 	movhi	r2,514
 2011170:	1088fb04 	addi	r2,r2,9196
 2011174:	e13fe317 	ldw	r4,-116(fp)
 2011178:	e0fff117 	ldw	r3,-60(fp)
 201117c:	20c7883a 	add	r3,r4,r3
 2011180:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 2011184:	008080b4 	movhi	r2,514
 2011188:	1088fb04 	addi	r2,r2,9196
 201118c:	10800217 	ldw	r2,8(r2)
 2011190:	e13fe417 	ldw	r4,-112(fp)
 2011194:	e0fff117 	ldw	r3,-60(fp)
 2011198:	20c7c83a 	sub	r3,r4,r3
 201119c:	18c00054 	ori	r3,r3,1
 20111a0:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 20111a4:	e0bfe317 	ldw	r2,-116(fp)
 20111a8:	10800117 	ldw	r2,4(r2)
 20111ac:	10c0004c 	andi	r3,r2,1
 20111b0:	e0bff117 	ldw	r2,-60(fp)
 20111b4:	1886b03a 	or	r3,r3,r2
 20111b8:	e0bfe317 	ldw	r2,-116(fp)
 20111bc:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 20111c0:	e13ffd17 	ldw	r4,-12(fp)
 20111c4:	201685c0 	call	201685c <__malloc_unlock>
            return newmem;
 20111c8:	e0bff617 	ldw	r2,-40(fp)
 20111cc:	0001bd06 	br	20118c4 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 20111d0:	e0ffe617 	ldw	r3,-104(fp)
 20111d4:	e0bff517 	ldw	r2,-44(fp)
 20111d8:	1887883a 	add	r3,r3,r2
 20111dc:	e0bfe417 	ldw	r2,-112(fp)
 20111e0:	1885883a 	add	r2,r3,r2
 20111e4:	1007883a 	mov	r3,r2
 20111e8:	e0bff117 	ldw	r2,-60(fp)
 20111ec:	18808016 	blt	r3,r2,20113f0 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 20111f0:	e0bfe517 	ldw	r2,-108(fp)
 20111f4:	10800317 	ldw	r2,12(r2)
 20111f8:	e0bff215 	stw	r2,-56(fp)
 20111fc:	e0bfe517 	ldw	r2,-108(fp)
 2011200:	10800217 	ldw	r2,8(r2)
 2011204:	e0bff315 	stw	r2,-52(fp)
 2011208:	e0bff317 	ldw	r2,-52(fp)
 201120c:	e0fff217 	ldw	r3,-56(fp)
 2011210:	10c00315 	stw	r3,12(r2)
 2011214:	e0bff217 	ldw	r2,-56(fp)
 2011218:	e0fff317 	ldw	r3,-52(fp)
 201121c:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 2011220:	e0bff417 	ldw	r2,-48(fp)
 2011224:	10800317 	ldw	r2,12(r2)
 2011228:	e0bff215 	stw	r2,-56(fp)
 201122c:	e0bff417 	ldw	r2,-48(fp)
 2011230:	10800217 	ldw	r2,8(r2)
 2011234:	e0bff315 	stw	r2,-52(fp)
 2011238:	e0bff317 	ldw	r2,-52(fp)
 201123c:	e0fff217 	ldw	r3,-56(fp)
 2011240:	10c00315 	stw	r3,12(r2)
 2011244:	e0bff217 	ldw	r2,-56(fp)
 2011248:	e0fff317 	ldw	r3,-52(fp)
 201124c:	10c00215 	stw	r3,8(r2)
          newp = prev;
 2011250:	e0bff417 	ldw	r2,-48(fp)
 2011254:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 2011258:	e0ffe617 	ldw	r3,-104(fp)
 201125c:	e0bff517 	ldw	r2,-44(fp)
 2011260:	1885883a 	add	r2,r3,r2
 2011264:	e0ffe417 	ldw	r3,-112(fp)
 2011268:	1885883a 	add	r2,r3,r2
 201126c:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 2011270:	e0bfe317 	ldw	r2,-116(fp)
 2011274:	10800204 	addi	r2,r2,8
 2011278:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 201127c:	e0bff017 	ldw	r2,-64(fp)
 2011280:	10bfff04 	addi	r2,r2,-4
 2011284:	e0bff815 	stw	r2,-32(fp)
 2011288:	e0bff817 	ldw	r2,-32(fp)
 201128c:	10800968 	cmpgeui	r2,r2,37
 2011290:	1000521e 	bne	r2,zero,20113dc <_realloc_r+0x6f4>
 2011294:	e0bffe17 	ldw	r2,-8(fp)
 2011298:	e0bfe915 	stw	r2,-92(fp)
 201129c:	e0bff617 	ldw	r2,-40(fp)
 20112a0:	e0bfea15 	stw	r2,-88(fp)
 20112a4:	e0bff817 	ldw	r2,-32(fp)
 20112a8:	10800530 	cmpltui	r2,r2,20
 20112ac:	1000361e 	bne	r2,zero,2011388 <_realloc_r+0x6a0>
 20112b0:	e0bfea17 	ldw	r2,-88(fp)
 20112b4:	10c00104 	addi	r3,r2,4
 20112b8:	e0ffea15 	stw	r3,-88(fp)
 20112bc:	e0ffe917 	ldw	r3,-92(fp)
 20112c0:	19000104 	addi	r4,r3,4
 20112c4:	e13fe915 	stw	r4,-92(fp)
 20112c8:	18c00017 	ldw	r3,0(r3)
 20112cc:	10c00015 	stw	r3,0(r2)
 20112d0:	e0bfea17 	ldw	r2,-88(fp)
 20112d4:	10c00104 	addi	r3,r2,4
 20112d8:	e0ffea15 	stw	r3,-88(fp)
 20112dc:	e0ffe917 	ldw	r3,-92(fp)
 20112e0:	19000104 	addi	r4,r3,4
 20112e4:	e13fe915 	stw	r4,-92(fp)
 20112e8:	18c00017 	ldw	r3,0(r3)
 20112ec:	10c00015 	stw	r3,0(r2)
 20112f0:	e0bff817 	ldw	r2,-32(fp)
 20112f4:	10800730 	cmpltui	r2,r2,28
 20112f8:	1000231e 	bne	r2,zero,2011388 <_realloc_r+0x6a0>
 20112fc:	e0bfea17 	ldw	r2,-88(fp)
 2011300:	10c00104 	addi	r3,r2,4
 2011304:	e0ffea15 	stw	r3,-88(fp)
 2011308:	e0ffe917 	ldw	r3,-92(fp)
 201130c:	19000104 	addi	r4,r3,4
 2011310:	e13fe915 	stw	r4,-92(fp)
 2011314:	18c00017 	ldw	r3,0(r3)
 2011318:	10c00015 	stw	r3,0(r2)
 201131c:	e0bfea17 	ldw	r2,-88(fp)
 2011320:	10c00104 	addi	r3,r2,4
 2011324:	e0ffea15 	stw	r3,-88(fp)
 2011328:	e0ffe917 	ldw	r3,-92(fp)
 201132c:	19000104 	addi	r4,r3,4
 2011330:	e13fe915 	stw	r4,-92(fp)
 2011334:	18c00017 	ldw	r3,0(r3)
 2011338:	10c00015 	stw	r3,0(r2)
 201133c:	e0bff817 	ldw	r2,-32(fp)
 2011340:	10800930 	cmpltui	r2,r2,36
 2011344:	1000101e 	bne	r2,zero,2011388 <_realloc_r+0x6a0>
 2011348:	e0bfea17 	ldw	r2,-88(fp)
 201134c:	10c00104 	addi	r3,r2,4
 2011350:	e0ffea15 	stw	r3,-88(fp)
 2011354:	e0ffe917 	ldw	r3,-92(fp)
 2011358:	19000104 	addi	r4,r3,4
 201135c:	e13fe915 	stw	r4,-92(fp)
 2011360:	18c00017 	ldw	r3,0(r3)
 2011364:	10c00015 	stw	r3,0(r2)
 2011368:	e0bfea17 	ldw	r2,-88(fp)
 201136c:	10c00104 	addi	r3,r2,4
 2011370:	e0ffea15 	stw	r3,-88(fp)
 2011374:	e0ffe917 	ldw	r3,-92(fp)
 2011378:	19000104 	addi	r4,r3,4
 201137c:	e13fe915 	stw	r4,-92(fp)
 2011380:	18c00017 	ldw	r3,0(r3)
 2011384:	10c00015 	stw	r3,0(r2)
 2011388:	e0bfea17 	ldw	r2,-88(fp)
 201138c:	10c00104 	addi	r3,r2,4
 2011390:	e0ffea15 	stw	r3,-88(fp)
 2011394:	e0ffe917 	ldw	r3,-92(fp)
 2011398:	19000104 	addi	r4,r3,4
 201139c:	e13fe915 	stw	r4,-92(fp)
 20113a0:	18c00017 	ldw	r3,0(r3)
 20113a4:	10c00015 	stw	r3,0(r2)
 20113a8:	e0bfea17 	ldw	r2,-88(fp)
 20113ac:	10c00104 	addi	r3,r2,4
 20113b0:	e0ffea15 	stw	r3,-88(fp)
 20113b4:	e0ffe917 	ldw	r3,-92(fp)
 20113b8:	19000104 	addi	r4,r3,4
 20113bc:	e13fe915 	stw	r4,-92(fp)
 20113c0:	18c00017 	ldw	r3,0(r3)
 20113c4:	10c00015 	stw	r3,0(r2)
 20113c8:	e0bfe917 	ldw	r2,-92(fp)
 20113cc:	10c00017 	ldw	r3,0(r2)
 20113d0:	e0bfea17 	ldw	r2,-88(fp)
 20113d4:	10c00015 	stw	r3,0(r2)
          goto split;
 20113d8:	00010106 	br	20117e0 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 20113dc:	e1bff817 	ldw	r6,-32(fp)
 20113e0:	e17ffe17 	ldw	r5,-8(fp)
 20113e4:	e13ff617 	ldw	r4,-40(fp)
 20113e8:	200f0680 	call	200f068 <memmove>
          goto split;
 20113ec:	0000fc06 	br	20117e0 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 20113f0:	e0bff417 	ldw	r2,-48(fp)
 20113f4:	10007826 	beq	r2,zero,20115d8 <_realloc_r+0x8f0>
 20113f8:	e0fff517 	ldw	r3,-44(fp)
 20113fc:	e0bfe417 	ldw	r2,-112(fp)
 2011400:	1885883a 	add	r2,r3,r2
 2011404:	1007883a 	mov	r3,r2
 2011408:	e0bff117 	ldw	r2,-60(fp)
 201140c:	18807216 	blt	r3,r2,20115d8 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 2011410:	e0bff417 	ldw	r2,-48(fp)
 2011414:	10800317 	ldw	r2,12(r2)
 2011418:	e0bff215 	stw	r2,-56(fp)
 201141c:	e0bff417 	ldw	r2,-48(fp)
 2011420:	10800217 	ldw	r2,8(r2)
 2011424:	e0bff315 	stw	r2,-52(fp)
 2011428:	e0bff317 	ldw	r2,-52(fp)
 201142c:	e0fff217 	ldw	r3,-56(fp)
 2011430:	10c00315 	stw	r3,12(r2)
 2011434:	e0bff217 	ldw	r2,-56(fp)
 2011438:	e0fff317 	ldw	r3,-52(fp)
 201143c:	10c00215 	stw	r3,8(r2)
        newp = prev;
 2011440:	e0bff417 	ldw	r2,-48(fp)
 2011444:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 2011448:	e0ffe417 	ldw	r3,-112(fp)
 201144c:	e0bff517 	ldw	r2,-44(fp)
 2011450:	1885883a 	add	r2,r3,r2
 2011454:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 2011458:	e0bfe317 	ldw	r2,-116(fp)
 201145c:	10800204 	addi	r2,r2,8
 2011460:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2011464:	e0bff017 	ldw	r2,-64(fp)
 2011468:	10bfff04 	addi	r2,r2,-4
 201146c:	e0bff915 	stw	r2,-28(fp)
 2011470:	e0bff917 	ldw	r2,-28(fp)
 2011474:	10800968 	cmpgeui	r2,r2,37
 2011478:	1000521e 	bne	r2,zero,20115c4 <_realloc_r+0x8dc>
 201147c:	e0bffe17 	ldw	r2,-8(fp)
 2011480:	e0bfeb15 	stw	r2,-84(fp)
 2011484:	e0bff617 	ldw	r2,-40(fp)
 2011488:	e0bfec15 	stw	r2,-80(fp)
 201148c:	e0bff917 	ldw	r2,-28(fp)
 2011490:	10800530 	cmpltui	r2,r2,20
 2011494:	1000361e 	bne	r2,zero,2011570 <_realloc_r+0x888>
 2011498:	e0bfec17 	ldw	r2,-80(fp)
 201149c:	10c00104 	addi	r3,r2,4
 20114a0:	e0ffec15 	stw	r3,-80(fp)
 20114a4:	e0ffeb17 	ldw	r3,-84(fp)
 20114a8:	19000104 	addi	r4,r3,4
 20114ac:	e13feb15 	stw	r4,-84(fp)
 20114b0:	18c00017 	ldw	r3,0(r3)
 20114b4:	10c00015 	stw	r3,0(r2)
 20114b8:	e0bfec17 	ldw	r2,-80(fp)
 20114bc:	10c00104 	addi	r3,r2,4
 20114c0:	e0ffec15 	stw	r3,-80(fp)
 20114c4:	e0ffeb17 	ldw	r3,-84(fp)
 20114c8:	19000104 	addi	r4,r3,4
 20114cc:	e13feb15 	stw	r4,-84(fp)
 20114d0:	18c00017 	ldw	r3,0(r3)
 20114d4:	10c00015 	stw	r3,0(r2)
 20114d8:	e0bff917 	ldw	r2,-28(fp)
 20114dc:	10800730 	cmpltui	r2,r2,28
 20114e0:	1000231e 	bne	r2,zero,2011570 <_realloc_r+0x888>
 20114e4:	e0bfec17 	ldw	r2,-80(fp)
 20114e8:	10c00104 	addi	r3,r2,4
 20114ec:	e0ffec15 	stw	r3,-80(fp)
 20114f0:	e0ffeb17 	ldw	r3,-84(fp)
 20114f4:	19000104 	addi	r4,r3,4
 20114f8:	e13feb15 	stw	r4,-84(fp)
 20114fc:	18c00017 	ldw	r3,0(r3)
 2011500:	10c00015 	stw	r3,0(r2)
 2011504:	e0bfec17 	ldw	r2,-80(fp)
 2011508:	10c00104 	addi	r3,r2,4
 201150c:	e0ffec15 	stw	r3,-80(fp)
 2011510:	e0ffeb17 	ldw	r3,-84(fp)
 2011514:	19000104 	addi	r4,r3,4
 2011518:	e13feb15 	stw	r4,-84(fp)
 201151c:	18c00017 	ldw	r3,0(r3)
 2011520:	10c00015 	stw	r3,0(r2)
 2011524:	e0bff917 	ldw	r2,-28(fp)
 2011528:	10800930 	cmpltui	r2,r2,36
 201152c:	1000101e 	bne	r2,zero,2011570 <_realloc_r+0x888>
 2011530:	e0bfec17 	ldw	r2,-80(fp)
 2011534:	10c00104 	addi	r3,r2,4
 2011538:	e0ffec15 	stw	r3,-80(fp)
 201153c:	e0ffeb17 	ldw	r3,-84(fp)
 2011540:	19000104 	addi	r4,r3,4
 2011544:	e13feb15 	stw	r4,-84(fp)
 2011548:	18c00017 	ldw	r3,0(r3)
 201154c:	10c00015 	stw	r3,0(r2)
 2011550:	e0bfec17 	ldw	r2,-80(fp)
 2011554:	10c00104 	addi	r3,r2,4
 2011558:	e0ffec15 	stw	r3,-80(fp)
 201155c:	e0ffeb17 	ldw	r3,-84(fp)
 2011560:	19000104 	addi	r4,r3,4
 2011564:	e13feb15 	stw	r4,-84(fp)
 2011568:	18c00017 	ldw	r3,0(r3)
 201156c:	10c00015 	stw	r3,0(r2)
 2011570:	e0bfec17 	ldw	r2,-80(fp)
 2011574:	10c00104 	addi	r3,r2,4
 2011578:	e0ffec15 	stw	r3,-80(fp)
 201157c:	e0ffeb17 	ldw	r3,-84(fp)
 2011580:	19000104 	addi	r4,r3,4
 2011584:	e13feb15 	stw	r4,-84(fp)
 2011588:	18c00017 	ldw	r3,0(r3)
 201158c:	10c00015 	stw	r3,0(r2)
 2011590:	e0bfec17 	ldw	r2,-80(fp)
 2011594:	10c00104 	addi	r3,r2,4
 2011598:	e0ffec15 	stw	r3,-80(fp)
 201159c:	e0ffeb17 	ldw	r3,-84(fp)
 20115a0:	19000104 	addi	r4,r3,4
 20115a4:	e13feb15 	stw	r4,-84(fp)
 20115a8:	18c00017 	ldw	r3,0(r3)
 20115ac:	10c00015 	stw	r3,0(r2)
 20115b0:	e0bfeb17 	ldw	r2,-84(fp)
 20115b4:	10c00017 	ldw	r3,0(r2)
 20115b8:	e0bfec17 	ldw	r2,-80(fp)
 20115bc:	10c00015 	stw	r3,0(r2)
        goto split;
 20115c0:	00008706 	br	20117e0 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 20115c4:	e1bff917 	ldw	r6,-28(fp)
 20115c8:	e17ffe17 	ldw	r5,-8(fp)
 20115cc:	e13ff617 	ldw	r4,-40(fp)
 20115d0:	200f0680 	call	200f068 <memmove>
        goto split;
 20115d4:	00008206 	br	20117e0 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 20115d8:	e17fff17 	ldw	r5,-4(fp)
 20115dc:	e13ffd17 	ldw	r4,-12(fp)
 20115e0:	200e3300 	call	200e330 <_malloc_r>
 20115e4:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 20115e8:	e0bff617 	ldw	r2,-40(fp)
 20115ec:	1000041e 	bne	r2,zero,2011600 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 20115f0:	e13ffd17 	ldw	r4,-12(fp)
 20115f4:	201685c0 	call	201685c <__malloc_unlock>
      return 0;
 20115f8:	0005883a 	mov	r2,zero
 20115fc:	0000b106 	br	20118c4 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 2011600:	e0bff617 	ldw	r2,-40(fp)
 2011604:	10bffe04 	addi	r2,r2,-8
 2011608:	e0bfe315 	stw	r2,-116(fp)
 201160c:	e0bfef17 	ldw	r2,-68(fp)
 2011610:	10c00117 	ldw	r3,4(r2)
 2011614:	00bfff84 	movi	r2,-2
 2011618:	1884703a 	and	r2,r3,r2
 201161c:	e0ffef17 	ldw	r3,-68(fp)
 2011620:	1885883a 	add	r2,r3,r2
 2011624:	e0ffe317 	ldw	r3,-116(fp)
 2011628:	18800a1e 	bne	r3,r2,2011654 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 201162c:	e0bfe317 	ldw	r2,-116(fp)
 2011630:	10c00117 	ldw	r3,4(r2)
 2011634:	00bfff04 	movi	r2,-4
 2011638:	1884703a 	and	r2,r3,r2
 201163c:	e0ffe417 	ldw	r3,-112(fp)
 2011640:	1885883a 	add	r2,r3,r2
 2011644:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 2011648:	e0bfef17 	ldw	r2,-68(fp)
 201164c:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 2011650:	00006306 	br	20117e0 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2011654:	e0bff017 	ldw	r2,-64(fp)
 2011658:	10bfff04 	addi	r2,r2,-4
 201165c:	e0bffa15 	stw	r2,-24(fp)
 2011660:	e0bffa17 	ldw	r2,-24(fp)
 2011664:	10800968 	cmpgeui	r2,r2,37
 2011668:	1000521e 	bne	r2,zero,20117b4 <_realloc_r+0xacc>
 201166c:	e0bffe17 	ldw	r2,-8(fp)
 2011670:	e0bfed15 	stw	r2,-76(fp)
 2011674:	e0bff617 	ldw	r2,-40(fp)
 2011678:	e0bfee15 	stw	r2,-72(fp)
 201167c:	e0bffa17 	ldw	r2,-24(fp)
 2011680:	10800530 	cmpltui	r2,r2,20
 2011684:	1000361e 	bne	r2,zero,2011760 <_realloc_r+0xa78>
 2011688:	e0bfee17 	ldw	r2,-72(fp)
 201168c:	10c00104 	addi	r3,r2,4
 2011690:	e0ffee15 	stw	r3,-72(fp)
 2011694:	e0ffed17 	ldw	r3,-76(fp)
 2011698:	19000104 	addi	r4,r3,4
 201169c:	e13fed15 	stw	r4,-76(fp)
 20116a0:	18c00017 	ldw	r3,0(r3)
 20116a4:	10c00015 	stw	r3,0(r2)
 20116a8:	e0bfee17 	ldw	r2,-72(fp)
 20116ac:	10c00104 	addi	r3,r2,4
 20116b0:	e0ffee15 	stw	r3,-72(fp)
 20116b4:	e0ffed17 	ldw	r3,-76(fp)
 20116b8:	19000104 	addi	r4,r3,4
 20116bc:	e13fed15 	stw	r4,-76(fp)
 20116c0:	18c00017 	ldw	r3,0(r3)
 20116c4:	10c00015 	stw	r3,0(r2)
 20116c8:	e0bffa17 	ldw	r2,-24(fp)
 20116cc:	10800730 	cmpltui	r2,r2,28
 20116d0:	1000231e 	bne	r2,zero,2011760 <_realloc_r+0xa78>
 20116d4:	e0bfee17 	ldw	r2,-72(fp)
 20116d8:	10c00104 	addi	r3,r2,4
 20116dc:	e0ffee15 	stw	r3,-72(fp)
 20116e0:	e0ffed17 	ldw	r3,-76(fp)
 20116e4:	19000104 	addi	r4,r3,4
 20116e8:	e13fed15 	stw	r4,-76(fp)
 20116ec:	18c00017 	ldw	r3,0(r3)
 20116f0:	10c00015 	stw	r3,0(r2)
 20116f4:	e0bfee17 	ldw	r2,-72(fp)
 20116f8:	10c00104 	addi	r3,r2,4
 20116fc:	e0ffee15 	stw	r3,-72(fp)
 2011700:	e0ffed17 	ldw	r3,-76(fp)
 2011704:	19000104 	addi	r4,r3,4
 2011708:	e13fed15 	stw	r4,-76(fp)
 201170c:	18c00017 	ldw	r3,0(r3)
 2011710:	10c00015 	stw	r3,0(r2)
 2011714:	e0bffa17 	ldw	r2,-24(fp)
 2011718:	10800930 	cmpltui	r2,r2,36
 201171c:	1000101e 	bne	r2,zero,2011760 <_realloc_r+0xa78>
 2011720:	e0bfee17 	ldw	r2,-72(fp)
 2011724:	10c00104 	addi	r3,r2,4
 2011728:	e0ffee15 	stw	r3,-72(fp)
 201172c:	e0ffed17 	ldw	r3,-76(fp)
 2011730:	19000104 	addi	r4,r3,4
 2011734:	e13fed15 	stw	r4,-76(fp)
 2011738:	18c00017 	ldw	r3,0(r3)
 201173c:	10c00015 	stw	r3,0(r2)
 2011740:	e0bfee17 	ldw	r2,-72(fp)
 2011744:	10c00104 	addi	r3,r2,4
 2011748:	e0ffee15 	stw	r3,-72(fp)
 201174c:	e0ffed17 	ldw	r3,-76(fp)
 2011750:	19000104 	addi	r4,r3,4
 2011754:	e13fed15 	stw	r4,-76(fp)
 2011758:	18c00017 	ldw	r3,0(r3)
 201175c:	10c00015 	stw	r3,0(r2)
 2011760:	e0bfee17 	ldw	r2,-72(fp)
 2011764:	10c00104 	addi	r3,r2,4
 2011768:	e0ffee15 	stw	r3,-72(fp)
 201176c:	e0ffed17 	ldw	r3,-76(fp)
 2011770:	19000104 	addi	r4,r3,4
 2011774:	e13fed15 	stw	r4,-76(fp)
 2011778:	18c00017 	ldw	r3,0(r3)
 201177c:	10c00015 	stw	r3,0(r2)
 2011780:	e0bfee17 	ldw	r2,-72(fp)
 2011784:	10c00104 	addi	r3,r2,4
 2011788:	e0ffee15 	stw	r3,-72(fp)
 201178c:	e0ffed17 	ldw	r3,-76(fp)
 2011790:	19000104 	addi	r4,r3,4
 2011794:	e13fed15 	stw	r4,-76(fp)
 2011798:	18c00017 	ldw	r3,0(r3)
 201179c:	10c00015 	stw	r3,0(r2)
 20117a0:	e0bfed17 	ldw	r2,-76(fp)
 20117a4:	10c00017 	ldw	r3,0(r2)
 20117a8:	e0bfee17 	ldw	r2,-72(fp)
 20117ac:	10c00015 	stw	r3,0(r2)
 20117b0:	00000406 	br	20117c4 <_realloc_r+0xadc>
 20117b4:	e1bffa17 	ldw	r6,-24(fp)
 20117b8:	e17ffe17 	ldw	r5,-8(fp)
 20117bc:	e13ff617 	ldw	r4,-40(fp)
 20117c0:	200f0680 	call	200f068 <memmove>
    fREe(RCALL oldmem);
 20117c4:	e17ffe17 	ldw	r5,-8(fp)
 20117c8:	e13ffd17 	ldw	r4,-12(fp)
 20117cc:	200ccf00 	call	200ccf0 <_free_r>
    MALLOC_UNLOCK;
 20117d0:	e13ffd17 	ldw	r4,-12(fp)
 20117d4:	201685c0 	call	201685c <__malloc_unlock>
    return newmem;
 20117d8:	e0bff617 	ldw	r2,-40(fp)
 20117dc:	00003906 	br	20118c4 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 20117e0:	e0ffe417 	ldw	r3,-112(fp)
 20117e4:	e0bff117 	ldw	r2,-60(fp)
 20117e8:	1885c83a 	sub	r2,r3,r2
 20117ec:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 20117f0:	e0bffb17 	ldw	r2,-20(fp)
 20117f4:	10800430 	cmpltui	r2,r2,16
 20117f8:	10001e1e 	bne	r2,zero,2011874 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 20117fc:	e0ffe317 	ldw	r3,-116(fp)
 2011800:	e0bff117 	ldw	r2,-60(fp)
 2011804:	1885883a 	add	r2,r3,r2
 2011808:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 201180c:	e0bfe317 	ldw	r2,-116(fp)
 2011810:	10800117 	ldw	r2,4(r2)
 2011814:	10c0004c 	andi	r3,r2,1
 2011818:	e0bff117 	ldw	r2,-60(fp)
 201181c:	1886b03a 	or	r3,r3,r2
 2011820:	e0bfe317 	ldw	r2,-116(fp)
 2011824:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 2011828:	e0bffb17 	ldw	r2,-20(fp)
 201182c:	10c00054 	ori	r3,r2,1
 2011830:	e0bffc17 	ldw	r2,-16(fp)
 2011834:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 2011838:	e0fffc17 	ldw	r3,-16(fp)
 201183c:	e0bffb17 	ldw	r2,-20(fp)
 2011840:	1885883a 	add	r2,r3,r2
 2011844:	e13ffc17 	ldw	r4,-16(fp)
 2011848:	e0fffb17 	ldw	r3,-20(fp)
 201184c:	20c7883a 	add	r3,r4,r3
 2011850:	18c00117 	ldw	r3,4(r3)
 2011854:	18c00054 	ori	r3,r3,1
 2011858:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 201185c:	e0bffc17 	ldw	r2,-16(fp)
 2011860:	10800204 	addi	r2,r2,8
 2011864:	100b883a 	mov	r5,r2
 2011868:	e13ffd17 	ldw	r4,-12(fp)
 201186c:	200ccf00 	call	200ccf0 <_free_r>
 2011870:	00001006 	br	20118b4 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 2011874:	e0bfe317 	ldw	r2,-116(fp)
 2011878:	10800117 	ldw	r2,4(r2)
 201187c:	10c0004c 	andi	r3,r2,1
 2011880:	e0bfe417 	ldw	r2,-112(fp)
 2011884:	1886b03a 	or	r3,r3,r2
 2011888:	e0bfe317 	ldw	r2,-116(fp)
 201188c:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 2011890:	e0ffe317 	ldw	r3,-116(fp)
 2011894:	e0bfe417 	ldw	r2,-112(fp)
 2011898:	1885883a 	add	r2,r3,r2
 201189c:	e13fe317 	ldw	r4,-116(fp)
 20118a0:	e0ffe417 	ldw	r3,-112(fp)
 20118a4:	20c7883a 	add	r3,r4,r3
 20118a8:	18c00117 	ldw	r3,4(r3)
 20118ac:	18c00054 	ori	r3,r3,1
 20118b0:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 20118b4:	e13ffd17 	ldw	r4,-12(fp)
 20118b8:	201685c0 	call	201685c <__malloc_unlock>
  return chunk2mem(newp);
 20118bc:	e0bfe317 	ldw	r2,-116(fp)
 20118c0:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 20118c4:	e037883a 	mov	sp,fp
 20118c8:	dfc00117 	ldw	ra,4(sp)
 20118cc:	df000017 	ldw	fp,0(sp)
 20118d0:	dec00204 	addi	sp,sp,8
 20118d4:	f800283a 	ret

020118d8 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 20118d8:	defffb04 	addi	sp,sp,-20
 20118dc:	dfc00415 	stw	ra,16(sp)
 20118e0:	df000315 	stw	fp,12(sp)
 20118e4:	df000304 	addi	fp,sp,12
 20118e8:	e13ffe15 	stw	r4,-8(fp)
 20118ec:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 20118f0:	d0279515 	stw	zero,-25004(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 20118f4:	e13fff17 	ldw	r4,-4(fp)
 20118f8:	20164340 	call	2016434 <sbrk>
 20118fc:	e0bffd15 	stw	r2,-12(fp)
 2011900:	e0bffd17 	ldw	r2,-12(fp)
 2011904:	10bfffd8 	cmpnei	r2,r2,-1
 2011908:	1000051e 	bne	r2,zero,2011920 <_sbrk_r+0x48>
 201190c:	d0a79517 	ldw	r2,-25004(gp)
 2011910:	10000326 	beq	r2,zero,2011920 <_sbrk_r+0x48>
    ptr->_errno = errno;
 2011914:	d0e79517 	ldw	r3,-25004(gp)
 2011918:	e0bffe17 	ldw	r2,-8(fp)
 201191c:	10c00015 	stw	r3,0(r2)
  return ret;
 2011920:	e0bffd17 	ldw	r2,-12(fp)
}
 2011924:	e037883a 	mov	sp,fp
 2011928:	dfc00117 	ldw	ra,4(sp)
 201192c:	df000017 	ldw	fp,0(sp)
 2011930:	dec00204 	addi	sp,sp,8
 2011934:	f800283a 	ret

02011938 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 2011938:	defff804 	addi	sp,sp,-32
 201193c:	dfc00715 	stw	ra,28(sp)
 2011940:	df000615 	stw	fp,24(sp)
 2011944:	dc400515 	stw	r17,20(sp)
 2011948:	dc000415 	stw	r16,16(sp)
 201194c:	df000604 	addi	fp,sp,24
 2011950:	e13ffa15 	stw	r4,-24(fp)
 2011954:	e17ffb15 	stw	r5,-20(fp)
 2011958:	e1bffc15 	stw	r6,-16(fp)
 201195c:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 2011960:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 2011964:	8080038b 	ldhu	r2,14(r16)
 2011968:	10bfffcc 	andi	r2,r2,65535
 201196c:	10a0001c 	xori	r2,r2,32768
 2011970:	10a00004 	addi	r2,r2,-32768
 2011974:	e0fffd17 	ldw	r3,-12(fp)
 2011978:	180f883a 	mov	r7,r3
 201197c:	e1bffc17 	ldw	r6,-16(fp)
 2011980:	100b883a 	mov	r5,r2
 2011984:	e13ffa17 	ldw	r4,-24(fp)
 2011988:	20139e00 	call	20139e0 <_read_r>
 201198c:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 2011990:	88000416 	blt	r17,zero,20119a4 <__sread+0x6c>
    fp->_offset += ret;
 2011994:	80801417 	ldw	r2,80(r16)
 2011998:	1445883a 	add	r2,r2,r17
 201199c:	80801415 	stw	r2,80(r16)
 20119a0:	00000406 	br	20119b4 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 20119a4:	80c0030b 	ldhu	r3,12(r16)
 20119a8:	00bbffc4 	movi	r2,-4097
 20119ac:	1884703a 	and	r2,r3,r2
 20119b0:	8080030d 	sth	r2,12(r16)
  return ret;
 20119b4:	8805883a 	mov	r2,r17
}
 20119b8:	e6fffe04 	addi	sp,fp,-8
 20119bc:	dfc00317 	ldw	ra,12(sp)
 20119c0:	df000217 	ldw	fp,8(sp)
 20119c4:	dc400117 	ldw	r17,4(sp)
 20119c8:	dc000017 	ldw	r16,0(sp)
 20119cc:	dec00404 	addi	sp,sp,16
 20119d0:	f800283a 	ret

020119d4 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 20119d4:	defffb04 	addi	sp,sp,-20
 20119d8:	df000415 	stw	fp,16(sp)
 20119dc:	df000404 	addi	fp,sp,16
 20119e0:	e13ffc15 	stw	r4,-16(fp)
 20119e4:	e17ffd15 	stw	r5,-12(fp)
 20119e8:	e1bffe15 	stw	r6,-8(fp)
 20119ec:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 20119f0:	0005883a 	mov	r2,zero
}
 20119f4:	e037883a 	mov	sp,fp
 20119f8:	df000017 	ldw	fp,0(sp)
 20119fc:	dec00104 	addi	sp,sp,4
 2011a00:	f800283a 	ret

02011a04 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 2011a04:	defff804 	addi	sp,sp,-32
 2011a08:	dfc00715 	stw	ra,28(sp)
 2011a0c:	df000615 	stw	fp,24(sp)
 2011a10:	dc000515 	stw	r16,20(sp)
 2011a14:	df000604 	addi	fp,sp,24
 2011a18:	e13ffb15 	stw	r4,-20(fp)
 2011a1c:	e17ffc15 	stw	r5,-16(fp)
 2011a20:	e1bffd15 	stw	r6,-12(fp)
 2011a24:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 2011a28:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 2011a2c:	8080030b 	ldhu	r2,12(r16)
 2011a30:	10bfffcc 	andi	r2,r2,65535
 2011a34:	1080400c 	andi	r2,r2,256
 2011a38:	10000926 	beq	r2,zero,2011a60 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 2011a3c:	8080038b 	ldhu	r2,14(r16)
 2011a40:	10bfffcc 	andi	r2,r2,65535
 2011a44:	10a0001c 	xori	r2,r2,32768
 2011a48:	10a00004 	addi	r2,r2,-32768
 2011a4c:	01c00084 	movi	r7,2
 2011a50:	000d883a 	mov	r6,zero
 2011a54:	100b883a 	mov	r5,r2
 2011a58:	e13ffb17 	ldw	r4,-20(fp)
 2011a5c:	20139700 	call	2013970 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 2011a60:	80c0030b 	ldhu	r3,12(r16)
 2011a64:	00bbffc4 	movi	r2,-4097
 2011a68:	1884703a 	and	r2,r3,r2
 2011a6c:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 2011a70:	8080038b 	ldhu	r2,14(r16)
 2011a74:	10bfffcc 	andi	r2,r2,65535
 2011a78:	10a0001c 	xori	r2,r2,32768
 2011a7c:	10a00004 	addi	r2,r2,-32768
 2011a80:	e0fffe17 	ldw	r3,-8(fp)
 2011a84:	180f883a 	mov	r7,r3
 2011a88:	e1bffd17 	ldw	r6,-12(fp)
 2011a8c:	100b883a 	mov	r5,r2
 2011a90:	e13ffb17 	ldw	r4,-20(fp)
 2011a94:	201322c0 	call	201322c <_write_r>
 2011a98:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 2011a9c:	e0bffa17 	ldw	r2,-24(fp)
}
 2011aa0:	e6ffff04 	addi	sp,fp,-4
 2011aa4:	dfc00217 	ldw	ra,8(sp)
 2011aa8:	df000117 	ldw	fp,4(sp)
 2011aac:	dc000017 	ldw	r16,0(sp)
 2011ab0:	dec00304 	addi	sp,sp,12
 2011ab4:	f800283a 	ret

02011ab8 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 2011ab8:	defff804 	addi	sp,sp,-32
 2011abc:	dfc00715 	stw	ra,28(sp)
 2011ac0:	df000615 	stw	fp,24(sp)
 2011ac4:	dc400515 	stw	r17,20(sp)
 2011ac8:	dc000415 	stw	r16,16(sp)
 2011acc:	df000604 	addi	fp,sp,24
 2011ad0:	e13ffa15 	stw	r4,-24(fp)
 2011ad4:	e17ffb15 	stw	r5,-20(fp)
 2011ad8:	e1bffc15 	stw	r6,-16(fp)
 2011adc:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 2011ae0:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 2011ae4:	8080038b 	ldhu	r2,14(r16)
 2011ae8:	10bfffcc 	andi	r2,r2,65535
 2011aec:	10a0001c 	xori	r2,r2,32768
 2011af0:	10a00004 	addi	r2,r2,-32768
 2011af4:	e1fffd17 	ldw	r7,-12(fp)
 2011af8:	e1bffc17 	ldw	r6,-16(fp)
 2011afc:	100b883a 	mov	r5,r2
 2011b00:	e13ffa17 	ldw	r4,-24(fp)
 2011b04:	20139700 	call	2013970 <_lseek_r>
 2011b08:	1023883a 	mov	r17,r2
  if (ret == -1L)
 2011b0c:	88bfffd8 	cmpnei	r2,r17,-1
 2011b10:	1000051e 	bne	r2,zero,2011b28 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 2011b14:	80c0030b 	ldhu	r3,12(r16)
 2011b18:	00bbffc4 	movi	r2,-4097
 2011b1c:	1884703a 	and	r2,r3,r2
 2011b20:	8080030d 	sth	r2,12(r16)
 2011b24:	00000406 	br	2011b38 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 2011b28:	8080030b 	ldhu	r2,12(r16)
 2011b2c:	10840014 	ori	r2,r2,4096
 2011b30:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 2011b34:	84401415 	stw	r17,80(r16)
    }
  return ret;
 2011b38:	8805883a 	mov	r2,r17
}
 2011b3c:	e6fffe04 	addi	sp,fp,-8
 2011b40:	dfc00317 	ldw	ra,12(sp)
 2011b44:	df000217 	ldw	fp,8(sp)
 2011b48:	dc400117 	ldw	r17,4(sp)
 2011b4c:	dc000017 	ldw	r16,0(sp)
 2011b50:	dec00404 	addi	sp,sp,16
 2011b54:	f800283a 	ret

02011b58 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 2011b58:	defffb04 	addi	sp,sp,-20
 2011b5c:	dfc00415 	stw	ra,16(sp)
 2011b60:	df000315 	stw	fp,12(sp)
 2011b64:	df000304 	addi	fp,sp,12
 2011b68:	e13ffe15 	stw	r4,-8(fp)
 2011b6c:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 2011b70:	e0bfff17 	ldw	r2,-4(fp)
 2011b74:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 2011b78:	e0bffd17 	ldw	r2,-12(fp)
 2011b7c:	1080038b 	ldhu	r2,14(r2)
 2011b80:	10bfffcc 	andi	r2,r2,65535
 2011b84:	10a0001c 	xori	r2,r2,32768
 2011b88:	10a00004 	addi	r2,r2,-32768
 2011b8c:	100b883a 	mov	r5,r2
 2011b90:	e13ffe17 	ldw	r4,-8(fp)
 2011b94:	201329c0 	call	201329c <_close_r>
}
 2011b98:	e037883a 	mov	sp,fp
 2011b9c:	dfc00117 	ldw	ra,4(sp)
 2011ba0:	df000017 	ldw	fp,0(sp)
 2011ba4:	dec00204 	addi	sp,sp,8
 2011ba8:	f800283a 	ret

02011bac <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 2011bac:	defffb04 	addi	sp,sp,-20
 2011bb0:	df000415 	stw	fp,16(sp)
 2011bb4:	df000404 	addi	fp,sp,16
 2011bb8:	e13ffe15 	stw	r4,-8(fp)
 2011bbc:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 2011bc0:	e0fffe17 	ldw	r3,-8(fp)
 2011bc4:	e0bfff17 	ldw	r2,-4(fp)
 2011bc8:	1884b03a 	or	r2,r3,r2
 2011bcc:	108000cc 	andi	r2,r2,3
 2011bd0:	10002a1e 	bne	r2,zero,2011c7c <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 2011bd4:	e0bffe17 	ldw	r2,-8(fp)
 2011bd8:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 2011bdc:	e0bfff17 	ldw	r2,-4(fp)
 2011be0:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 2011be4:	00001506 	br	2011c3c <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 2011be8:	e0bffc17 	ldw	r2,-16(fp)
 2011bec:	10c00017 	ldw	r3,0(r2)
 2011bf0:	00bfbff4 	movhi	r2,65279
 2011bf4:	10bfbfc4 	addi	r2,r2,-257
 2011bf8:	1887883a 	add	r3,r3,r2
 2011bfc:	e0bffc17 	ldw	r2,-16(fp)
 2011c00:	10800017 	ldw	r2,0(r2)
 2011c04:	0084303a 	nor	r2,zero,r2
 2011c08:	1886703a 	and	r3,r3,r2
 2011c0c:	00a02074 	movhi	r2,32897
 2011c10:	10a02004 	addi	r2,r2,-32640
 2011c14:	1884703a 	and	r2,r3,r2
 2011c18:	10000226 	beq	r2,zero,2011c24 <strcmp+0x78>
	    return 0;
 2011c1c:	0005883a 	mov	r2,zero
 2011c20:	00002e06 	br	2011cdc <strcmp+0x130>

          a1++;
 2011c24:	e0bffc17 	ldw	r2,-16(fp)
 2011c28:	10800104 	addi	r2,r2,4
 2011c2c:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 2011c30:	e0bffd17 	ldw	r2,-12(fp)
 2011c34:	10800104 	addi	r2,r2,4
 2011c38:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 2011c3c:	e0bffc17 	ldw	r2,-16(fp)
 2011c40:	10c00017 	ldw	r3,0(r2)
 2011c44:	e0bffd17 	ldw	r2,-12(fp)
 2011c48:	10800017 	ldw	r2,0(r2)
 2011c4c:	18bfe626 	beq	r3,r2,2011be8 <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 2011c50:	e0bffc17 	ldw	r2,-16(fp)
 2011c54:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 2011c58:	e0bffd17 	ldw	r2,-12(fp)
 2011c5c:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 2011c60:	00000606 	br	2011c7c <strcmp+0xd0>
    {
      s1++;
 2011c64:	e0bffe17 	ldw	r2,-8(fp)
 2011c68:	10800044 	addi	r2,r2,1
 2011c6c:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 2011c70:	e0bfff17 	ldw	r2,-4(fp)
 2011c74:	10800044 	addi	r2,r2,1
 2011c78:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 2011c7c:	e0bffe17 	ldw	r2,-8(fp)
 2011c80:	10800003 	ldbu	r2,0(r2)
 2011c84:	10803fcc 	andi	r2,r2,255
 2011c88:	1080201c 	xori	r2,r2,128
 2011c8c:	10bfe004 	addi	r2,r2,-128
 2011c90:	10000b26 	beq	r2,zero,2011cc0 <strcmp+0x114>
 2011c94:	e0bffe17 	ldw	r2,-8(fp)
 2011c98:	10c00003 	ldbu	r3,0(r2)
 2011c9c:	e0bfff17 	ldw	r2,-4(fp)
 2011ca0:	10800003 	ldbu	r2,0(r2)
 2011ca4:	18c03fcc 	andi	r3,r3,255
 2011ca8:	18c0201c 	xori	r3,r3,128
 2011cac:	18ffe004 	addi	r3,r3,-128
 2011cb0:	10803fcc 	andi	r2,r2,255
 2011cb4:	1080201c 	xori	r2,r2,128
 2011cb8:	10bfe004 	addi	r2,r2,-128
 2011cbc:	18bfe926 	beq	r3,r2,2011c64 <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 2011cc0:	e0bffe17 	ldw	r2,-8(fp)
 2011cc4:	10800003 	ldbu	r2,0(r2)
 2011cc8:	10c03fcc 	andi	r3,r2,255
 2011ccc:	e0bfff17 	ldw	r2,-4(fp)
 2011cd0:	10800003 	ldbu	r2,0(r2)
 2011cd4:	10803fcc 	andi	r2,r2,255
 2011cd8:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2011cdc:	e037883a 	mov	sp,fp
 2011ce0:	df000017 	ldw	fp,0(sp)
 2011ce4:	dec00104 	addi	sp,sp,4
 2011ce8:	f800283a 	ret

02011cec <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 2011cec:	defff604 	addi	sp,sp,-40
 2011cf0:	dfc00915 	stw	ra,36(sp)
 2011cf4:	df000815 	stw	fp,32(sp)
 2011cf8:	dc400715 	stw	r17,28(sp)
 2011cfc:	dc000615 	stw	r16,24(sp)
 2011d00:	df000804 	addi	fp,sp,32
 2011d04:	e13ffc15 	stw	r4,-16(fp)
 2011d08:	e17ffd15 	stw	r5,-12(fp)
 2011d0c:	3021883a 	mov	r16,r6
	register int err = 0;
 2011d10:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 2011d14:	80800217 	ldw	r2,8(r16)
 2011d18:	1000031e 	bne	r2,zero,2011d28 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 2011d1c:	80000115 	stw	zero,4(r16)
		return (0);
 2011d20:	0005883a 	mov	r2,zero
 2011d24:	00003906 	br	2011e0c <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 2011d28:	e0bffd17 	ldw	r2,-12(fp)
 2011d2c:	10801917 	ldw	r2,100(r2)
 2011d30:	1088000c 	andi	r2,r2,8192
 2011d34:	10002d26 	beq	r2,zero,2011dec <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 2011d38:	80800017 	ldw	r2,0(r16)
 2011d3c:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 2011d40:	00002706 	br	2011de0 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 2011d44:	e0bff817 	ldw	r2,-32(fp)
 2011d48:	10800017 	ldw	r2,0(r2)
 2011d4c:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 2011d50:	e0bff817 	ldw	r2,-32(fp)
 2011d54:	10800117 	ldw	r2,4(r2)
 2011d58:	1004d0ba 	srli	r2,r2,2
 2011d5c:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 2011d60:	e03ff915 	stw	zero,-28(fp)
 2011d64:	00001206 	br	2011db0 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 2011d68:	e0bff917 	ldw	r2,-28(fp)
 2011d6c:	1085883a 	add	r2,r2,r2
 2011d70:	1085883a 	add	r2,r2,r2
 2011d74:	1007883a 	mov	r3,r2
 2011d78:	e0bffa17 	ldw	r2,-24(fp)
 2011d7c:	10c5883a 	add	r2,r2,r3
 2011d80:	10800017 	ldw	r2,0(r2)
 2011d84:	e1bffd17 	ldw	r6,-12(fp)
 2011d88:	100b883a 	mov	r5,r2
 2011d8c:	e13ffc17 	ldw	r4,-16(fp)
 2011d90:	20137b80 	call	20137b8 <_fputwc_r>
 2011d94:	10bfffd8 	cmpnei	r2,r2,-1
 2011d98:	1000021e 	bne	r2,zero,2011da4 <__sprint_r+0xb8>
					err = -1;
 2011d9c:	047fffc4 	movi	r17,-1
					goto out;
 2011da0:	00001706 	br	2011e00 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 2011da4:	e0bff917 	ldw	r2,-28(fp)
 2011da8:	10800044 	addi	r2,r2,1
 2011dac:	e0bff915 	stw	r2,-28(fp)
 2011db0:	e0fff917 	ldw	r3,-28(fp)
 2011db4:	e0bffb17 	ldw	r2,-20(fp)
 2011db8:	18bfeb16 	blt	r3,r2,2011d68 <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 2011dbc:	80c00217 	ldw	r3,8(r16)
 2011dc0:	e0bffb17 	ldw	r2,-20(fp)
 2011dc4:	1085883a 	add	r2,r2,r2
 2011dc8:	1085883a 	add	r2,r2,r2
 2011dcc:	1885c83a 	sub	r2,r3,r2
 2011dd0:	80800215 	stw	r2,8(r16)
 2011dd4:	e0bff817 	ldw	r2,-32(fp)
 2011dd8:	10800204 	addi	r2,r2,8
 2011ddc:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 2011de0:	80800217 	ldw	r2,8(r16)
 2011de4:	103fd71e 	bne	r2,zero,2011d44 <__sprint_r+0x58>
 2011de8:	00000506 	br	2011e00 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 2011dec:	800d883a 	mov	r6,r16
 2011df0:	e17ffd17 	ldw	r5,-12(fp)
 2011df4:	e13ffc17 	ldw	r4,-16(fp)
 2011df8:	200d41c0 	call	200d41c <__sfvwrite_r>
 2011dfc:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 2011e00:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 2011e04:	80000115 	stw	zero,4(r16)
	return (err);
 2011e08:	8805883a 	mov	r2,r17
}
 2011e0c:	e6fffe04 	addi	sp,fp,-8
 2011e10:	dfc00317 	ldw	ra,12(sp)
 2011e14:	df000217 	ldw	fp,8(sp)
 2011e18:	dc400117 	ldw	r17,4(sp)
 2011e1c:	dc000017 	ldw	r16,0(sp)
 2011e20:	dec00404 	addi	sp,sp,16
 2011e24:	f800283a 	ret

02011e28 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 2011e28:	defedf04 	addi	sp,sp,-1156
 2011e2c:	dfc12015 	stw	ra,1152(sp)
 2011e30:	df011f15 	stw	fp,1148(sp)
 2011e34:	dc011e15 	stw	r16,1144(sp)
 2011e38:	df011f04 	addi	fp,sp,1148
 2011e3c:	e13ffc15 	stw	r4,-16(fp)
 2011e40:	2821883a 	mov	r16,r5
 2011e44:	e1bffd15 	stw	r6,-12(fp)
 2011e48:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2011e4c:	80c0030b 	ldhu	r3,12(r16)
 2011e50:	00bfff44 	movi	r2,-3
 2011e54:	1884703a 	and	r2,r3,r2
 2011e58:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2011e5c:	80801917 	ldw	r2,100(r16)
 2011e60:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 2011e64:	8080038b 	ldhu	r2,14(r16)
 2011e68:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2011e6c:	80800717 	ldw	r2,28(r16)
 2011e70:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 2011e74:	80800917 	ldw	r2,36(r16)
 2011e78:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2011e7c:	e0befc04 	addi	r2,fp,-1040
 2011e80:	e0bee215 	stw	r2,-1144(fp)
 2011e84:	e0bee217 	ldw	r2,-1144(fp)
 2011e88:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2011e8c:	00810004 	movi	r2,1024
 2011e90:	e0bee415 	stw	r2,-1136(fp)
 2011e94:	e0bee417 	ldw	r2,-1136(fp)
 2011e98:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2011e9c:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2011ea0:	e0bee204 	addi	r2,fp,-1144
 2011ea4:	e1fffe17 	ldw	r7,-8(fp)
 2011ea8:	e1bffd17 	ldw	r6,-12(fp)
 2011eac:	100b883a 	mov	r5,r2
 2011eb0:	e13ffc17 	ldw	r4,-16(fp)
 2011eb4:	2011f680 	call	2011f68 <___vfiprintf_internal_r>
 2011eb8:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2011ebc:	e0bee117 	ldw	r2,-1148(fp)
 2011ec0:	10000716 	blt	r2,zero,2011ee0 <__sbprintf+0xb8>
 2011ec4:	e0bee204 	addi	r2,fp,-1144
 2011ec8:	100b883a 	mov	r5,r2
 2011ecc:	e13ffc17 	ldw	r4,-16(fp)
 2011ed0:	200c6500 	call	200c650 <_fflush_r>
 2011ed4:	10000226 	beq	r2,zero,2011ee0 <__sbprintf+0xb8>
		ret = EOF;
 2011ed8:	00bfffc4 	movi	r2,-1
 2011edc:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2011ee0:	e0bee50b 	ldhu	r2,-1132(fp)
 2011ee4:	10bfffcc 	andi	r2,r2,65535
 2011ee8:	1080100c 	andi	r2,r2,64
 2011eec:	10000326 	beq	r2,zero,2011efc <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 2011ef0:	8080030b 	ldhu	r2,12(r16)
 2011ef4:	10801014 	ori	r2,r2,64
 2011ef8:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 2011efc:	e0bee117 	ldw	r2,-1148(fp)
}
 2011f00:	e6ffff04 	addi	sp,fp,-4
 2011f04:	dfc00217 	ldw	ra,8(sp)
 2011f08:	df000117 	ldw	fp,4(sp)
 2011f0c:	dc000017 	ldw	r16,0(sp)
 2011f10:	dec00304 	addi	sp,sp,12
 2011f14:	f800283a 	ret

02011f18 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 2011f18:	defffa04 	addi	sp,sp,-24
 2011f1c:	dfc00515 	stw	ra,20(sp)
 2011f20:	df000415 	stw	fp,16(sp)
 2011f24:	df000404 	addi	fp,sp,16
 2011f28:	e13ffd15 	stw	r4,-12(fp)
 2011f2c:	e17ffe15 	stw	r5,-8(fp)
 2011f30:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 2011f34:	d0a02e17 	ldw	r2,-32584(gp)
 2011f38:	e1ffff17 	ldw	r7,-4(fp)
 2011f3c:	e1bffe17 	ldw	r6,-8(fp)
 2011f40:	e17ffd17 	ldw	r5,-12(fp)
 2011f44:	1009883a 	mov	r4,r2
 2011f48:	2011f680 	call	2011f68 <___vfiprintf_internal_r>
 2011f4c:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2011f50:	e0bffc17 	ldw	r2,-16(fp)
}
 2011f54:	e037883a 	mov	sp,fp
 2011f58:	dfc00117 	ldw	ra,4(sp)
 2011f5c:	df000017 	ldw	fp,0(sp)
 2011f60:	dec00204 	addi	sp,sp,8
 2011f64:	f800283a 	ret

02011f68 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 2011f68:	deffb704 	addi	sp,sp,-292
 2011f6c:	dfc04815 	stw	ra,288(sp)
 2011f70:	df004715 	stw	fp,284(sp)
 2011f74:	ddc04615 	stw	r23,280(sp)
 2011f78:	dd804515 	stw	r22,276(sp)
 2011f7c:	dd404415 	stw	r21,272(sp)
 2011f80:	dd004315 	stw	r20,268(sp)
 2011f84:	dcc04215 	stw	r19,264(sp)
 2011f88:	dc804115 	stw	r18,260(sp)
 2011f8c:	dc404015 	stw	r17,256(sp)
 2011f90:	dc003f15 	stw	r16,252(sp)
 2011f94:	df004704 	addi	fp,sp,284
 2011f98:	e13fe615 	stw	r4,-104(fp)
 2011f9c:	e17fe715 	stw	r5,-100(fp)
 2011fa0:	e1bfe815 	stw	r6,-96(fp)
 2011fa4:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2011fa8:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2011fac:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 2011fb0:	e0bfe617 	ldw	r2,-104(fp)
 2011fb4:	e0bfc415 	stw	r2,-240(fp)
 2011fb8:	e0bfc417 	ldw	r2,-240(fp)
 2011fbc:	10000526 	beq	r2,zero,2011fd4 <___vfiprintf_internal_r+0x6c>
 2011fc0:	e0bfc417 	ldw	r2,-240(fp)
 2011fc4:	10800e17 	ldw	r2,56(r2)
 2011fc8:	1000021e 	bne	r2,zero,2011fd4 <___vfiprintf_internal_r+0x6c>
 2011fcc:	e13fc417 	ldw	r4,-240(fp)
 2011fd0:	200cad00 	call	200cad0 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2011fd4:	e0bfe717 	ldw	r2,-100(fp)
 2011fd8:	1080030b 	ldhu	r2,12(r2)
 2011fdc:	10bfffcc 	andi	r2,r2,65535
 2011fe0:	1088000c 	andi	r2,r2,8192
 2011fe4:	10000c1e 	bne	r2,zero,2012018 <___vfiprintf_internal_r+0xb0>
 2011fe8:	e0bfe717 	ldw	r2,-100(fp)
 2011fec:	1080030b 	ldhu	r2,12(r2)
 2011ff0:	10880014 	ori	r2,r2,8192
 2011ff4:	1007883a 	mov	r3,r2
 2011ff8:	e0bfe717 	ldw	r2,-100(fp)
 2011ffc:	10c0030d 	sth	r3,12(r2)
 2012000:	e0bfe717 	ldw	r2,-100(fp)
 2012004:	10c01917 	ldw	r3,100(r2)
 2012008:	00b7ffc4 	movi	r2,-8193
 201200c:	1886703a 	and	r3,r3,r2
 2012010:	e0bfe717 	ldw	r2,-100(fp)
 2012014:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 2012018:	e0bfe717 	ldw	r2,-100(fp)
 201201c:	1080030b 	ldhu	r2,12(r2)
 2012020:	10bfffcc 	andi	r2,r2,65535
 2012024:	1080020c 	andi	r2,r2,8
 2012028:	10000326 	beq	r2,zero,2012038 <___vfiprintf_internal_r+0xd0>
 201202c:	e0bfe717 	ldw	r2,-100(fp)
 2012030:	10800417 	ldw	r2,16(r2)
 2012034:	1000061e 	bne	r2,zero,2012050 <___vfiprintf_internal_r+0xe8>
 2012038:	e17fe717 	ldw	r5,-100(fp)
 201203c:	e13fe617 	ldw	r4,-104(fp)
 2012040:	200a2800 	call	200a280 <__swsetup_r>
 2012044:	10000226 	beq	r2,zero,2012050 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2012048:	00bfffc4 	movi	r2,-1
 201204c:	00046a06 	br	20131f8 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2012050:	e0bfe717 	ldw	r2,-100(fp)
 2012054:	1080030b 	ldhu	r2,12(r2)
 2012058:	10bfffcc 	andi	r2,r2,65535
 201205c:	1080068c 	andi	r2,r2,26
 2012060:	10800298 	cmpnei	r2,r2,10
 2012064:	10000c1e 	bne	r2,zero,2012098 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 2012068:	e0bfe717 	ldw	r2,-100(fp)
 201206c:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2012070:	10bfffcc 	andi	r2,r2,65535
 2012074:	10a0001c 	xori	r2,r2,32768
 2012078:	10a00004 	addi	r2,r2,-32768
 201207c:	10000616 	blt	r2,zero,2012098 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 2012080:	e1ffe917 	ldw	r7,-92(fp)
 2012084:	e1bfe817 	ldw	r6,-96(fp)
 2012088:	e17fe717 	ldw	r5,-100(fp)
 201208c:	e13fe617 	ldw	r4,-104(fp)
 2012090:	2011e280 	call	2011e28 <__sbprintf>
 2012094:	00045806 	br	20131f8 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2012098:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 201209c:	e4bfcb04 	addi	r18,fp,-212
 20120a0:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 20120a4:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 20120a8:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 20120ac:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 20120b0:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 20120b4:	00000106 	br	20120bc <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 20120b8:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 20120bc:	a8800003 	ldbu	r2,0(r21)
 20120c0:	10803fcc 	andi	r2,r2,255
 20120c4:	1080201c 	xori	r2,r2,128
 20120c8:	10bfe004 	addi	r2,r2,-128
 20120cc:	10000626 	beq	r2,zero,20120e8 <___vfiprintf_internal_r+0x180>
 20120d0:	a8800003 	ldbu	r2,0(r21)
 20120d4:	10803fcc 	andi	r2,r2,255
 20120d8:	1080201c 	xori	r2,r2,128
 20120dc:	10bfe004 	addi	r2,r2,-128
 20120e0:	10800958 	cmpnei	r2,r2,37
 20120e4:	103ff41e 	bne	r2,zero,20120b8 <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 20120e8:	a807883a 	mov	r3,r21
 20120ec:	a005883a 	mov	r2,r20
 20120f0:	18a1c83a 	sub	r16,r3,r2
 20120f4:	80001826 	beq	r16,zero,2012158 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 20120f8:	95000015 	stw	r20,0(r18)
 20120fc:	8005883a 	mov	r2,r16
 2012100:	90800115 	stw	r2,4(r18)
 2012104:	e0bfca17 	ldw	r2,-216(fp)
 2012108:	8007883a 	mov	r3,r16
 201210c:	10c5883a 	add	r2,r2,r3
 2012110:	e0bfca15 	stw	r2,-216(fp)
 2012114:	94800204 	addi	r18,r18,8
 2012118:	e0bfc917 	ldw	r2,-220(fp)
 201211c:	10800044 	addi	r2,r2,1
 2012120:	e0bfc915 	stw	r2,-220(fp)
 2012124:	e0bfc917 	ldw	r2,-220(fp)
 2012128:	10800210 	cmplti	r2,r2,8
 201212c:	1000071e 	bne	r2,zero,201214c <___vfiprintf_internal_r+0x1e4>
 2012130:	e0bfc804 	addi	r2,fp,-224
 2012134:	100d883a 	mov	r6,r2
 2012138:	e17fe717 	ldw	r5,-100(fp)
 201213c:	e13fe617 	ldw	r4,-104(fp)
 2012140:	2011cec0 	call	2011cec <__sprint_r>
 2012144:	1004031e 	bne	r2,zero,2013154 <___vfiprintf_internal_r+0x11ec>
 2012148:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 201214c:	e0bfb917 	ldw	r2,-284(fp)
 2012150:	1405883a 	add	r2,r2,r16
 2012154:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2012158:	a8800003 	ldbu	r2,0(r21)
 201215c:	10803fcc 	andi	r2,r2,255
 2012160:	1080201c 	xori	r2,r2,128
 2012164:	10bfe004 	addi	r2,r2,-128
 2012168:	1003ec26 	beq	r2,zero,201311c <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 201216c:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 2012170:	ad400044 	addi	r21,r21,1

		flags = 0;
 2012174:	0027883a 	mov	r19,zero
		dprec = 0;
 2012178:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 201217c:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 2012180:	00bfffc4 	movi	r2,-1
 2012184:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 2012188:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 201218c:	a805883a 	mov	r2,r21
 2012190:	15400044 	addi	r21,r2,1
 2012194:	10800003 	ldbu	r2,0(r2)
 2012198:	14403fcc 	andi	r17,r2,255
 201219c:	8c40201c 	xori	r17,r17,128
 20121a0:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 20121a4:	88bff804 	addi	r2,r17,-32
 20121a8:	10c01668 	cmpgeui	r3,r2,89
 20121ac:	1802881e 	bne	r3,zero,2012bd0 <___vfiprintf_internal_r+0xc68>
 20121b0:	100690ba 	slli	r3,r2,2
 20121b4:	00808074 	movhi	r2,513
 20121b8:	10887204 	addi	r2,r2,8648
 20121bc:	1885883a 	add	r2,r3,r2
 20121c0:	10800017 	ldw	r2,0(r2)
 20121c4:	1000683a 	jmp	r2
 20121c8:	0201232c 	andhi	r8,zero,1164
 20121cc:	02012bd0 	cmplti	r8,zero,1199
 20121d0:	02012bd0 	cmplti	r8,zero,1199
 20121d4:	0201234c 	andi	r8,zero,1165
 20121d8:	02012bd0 	cmplti	r8,zero,1199
 20121dc:	02012bd0 	cmplti	r8,zero,1199
 20121e0:	02012bd0 	cmplti	r8,zero,1199
 20121e4:	02012bd0 	cmplti	r8,zero,1199
 20121e8:	02012bd0 	cmplti	r8,zero,1199
 20121ec:	02012bd0 	cmplti	r8,zero,1199
 20121f0:	02012354 	movui	r8,1165
 20121f4:	02012388 	cmpgei	r8,zero,1166
 20121f8:	02012bd0 	cmplti	r8,zero,1199
 20121fc:	02012380 	call	201238 <__alt_mem_mem_Nios_PI+0x1238>
 2012200:	02012394 	movui	r8,1166
 2012204:	02012bd0 	cmplti	r8,zero,1199
 2012208:	02012428 	cmpgeui	r8,zero,1168
 201220c:	02012430 	cmpltui	r8,zero,1168
 2012210:	02012430 	cmpltui	r8,zero,1168
 2012214:	02012430 	cmpltui	r8,zero,1168
 2012218:	02012430 	cmpltui	r8,zero,1168
 201221c:	02012430 	cmpltui	r8,zero,1168
 2012220:	02012430 	cmpltui	r8,zero,1168
 2012224:	02012430 	cmpltui	r8,zero,1168
 2012228:	02012430 	cmpltui	r8,zero,1168
 201222c:	02012430 	cmpltui	r8,zero,1168
 2012230:	02012bd0 	cmplti	r8,zero,1199
 2012234:	02012bd0 	cmplti	r8,zero,1199
 2012238:	02012bd0 	cmplti	r8,zero,1199
 201223c:	02012bd0 	cmplti	r8,zero,1199
 2012240:	02012bd0 	cmplti	r8,zero,1199
 2012244:	02012bd0 	cmplti	r8,zero,1199
 2012248:	02012bd0 	cmplti	r8,zero,1199
 201224c:	02012bd0 	cmplti	r8,zero,1199
 2012250:	02012bd0 	cmplti	r8,zero,1199
 2012254:	02012bd0 	cmplti	r8,zero,1199
 2012258:	020124d0 	cmplti	r8,zero,1171
 201225c:	02012bd0 	cmplti	r8,zero,1199
 2012260:	02012bd0 	cmplti	r8,zero,1199
 2012264:	02012bd0 	cmplti	r8,zero,1199
 2012268:	02012bd0 	cmplti	r8,zero,1199
 201226c:	02012bd0 	cmplti	r8,zero,1199
 2012270:	02012bd0 	cmplti	r8,zero,1199
 2012274:	02012bd0 	cmplti	r8,zero,1199
 2012278:	02012bd0 	cmplti	r8,zero,1199
 201227c:	02012bd0 	cmplti	r8,zero,1199
 2012280:	02012bd0 	cmplti	r8,zero,1199
 2012284:	02012670 	cmpltui	r8,zero,1177
 2012288:	02012bd0 	cmplti	r8,zero,1199
 201228c:	02012bd0 	cmplti	r8,zero,1199
 2012290:	02012bd0 	cmplti	r8,zero,1199
 2012294:	02012bd0 	cmplti	r8,zero,1199
 2012298:	02012bd0 	cmplti	r8,zero,1199
 201229c:	020127ec 	andhi	r8,zero,1183
 20122a0:	02012bd0 	cmplti	r8,zero,1199
 20122a4:	02012bd0 	cmplti	r8,zero,1199
 20122a8:	020128ac 	andhi	r8,zero,1186
 20122ac:	02012bd0 	cmplti	r8,zero,1199
 20122b0:	02012bd0 	cmplti	r8,zero,1199
 20122b4:	02012bd0 	cmplti	r8,zero,1199
 20122b8:	02012bd0 	cmplti	r8,zero,1199
 20122bc:	02012bd0 	cmplti	r8,zero,1199
 20122c0:	02012bd0 	cmplti	r8,zero,1199
 20122c4:	02012bd0 	cmplti	r8,zero,1199
 20122c8:	02012bd0 	cmplti	r8,zero,1199
 20122cc:	02012bd0 	cmplti	r8,zero,1199
 20122d0:	02012bd0 	cmplti	r8,zero,1199
 20122d4:	020124a8 	cmpgeui	r8,zero,1170
 20122d8:	020124d4 	movui	r8,1171
 20122dc:	02012bd0 	cmplti	r8,zero,1199
 20122e0:	02012bd0 	cmplti	r8,zero,1199
 20122e4:	02012bd0 	cmplti	r8,zero,1199
 20122e8:	0201246c 	andhi	r8,zero,1169
 20122ec:	020124d4 	movui	r8,1171
 20122f0:	02012bd0 	cmplti	r8,zero,1199
 20122f4:	02012bd0 	cmplti	r8,zero,1199
 20122f8:	02012474 	movhi	r8,1169
 20122fc:	02012bd0 	cmplti	r8,zero,1199
 2012300:	020125d0 	cmplti	r8,zero,1175
 2012304:	02012674 	movhi	r8,1177
 2012308:	02012714 	movui	r8,1180
 201230c:	020124a0 	cmpeqi	r8,zero,1170
 2012310:	02012bd0 	cmplti	r8,zero,1199
 2012314:	0201275c 	xori	r8,zero,1181
 2012318:	02012bd0 	cmplti	r8,zero,1199
 201231c:	020127f0 	cmpltui	r8,zero,1183
 2012320:	02012bd0 	cmplti	r8,zero,1199
 2012324:	02012bd0 	cmplti	r8,zero,1199
 2012328:	020128bc 	xorhi	r8,zero,1186
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 201232c:	e0bfc703 	ldbu	r2,-228(fp)
 2012330:	10803fcc 	andi	r2,r2,255
 2012334:	1080201c 	xori	r2,r2,128
 2012338:	10bfe004 	addi	r2,r2,-128
 201233c:	103f931e 	bne	r2,zero,201218c <___vfiprintf_internal_r+0x224>
				sign = ' ';
 2012340:	00800804 	movi	r2,32
 2012344:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 2012348:	003f9006 	br	201218c <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 201234c:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2012350:	003f8e06 	br	201218c <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2012354:	e0bfe917 	ldw	r2,-92(fp)
 2012358:	10c00104 	addi	r3,r2,4
 201235c:	e0ffe915 	stw	r3,-92(fp)
 2012360:	10800017 	ldw	r2,0(r2)
 2012364:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2012368:	e0bfba17 	ldw	r2,-280(fp)
 201236c:	10000116 	blt	r2,zero,2012374 <___vfiprintf_internal_r+0x40c>
				goto rflag;
 2012370:	003f8606 	br	201218c <___vfiprintf_internal_r+0x224>
			width = -width;
 2012374:	e0bfba17 	ldw	r2,-280(fp)
 2012378:	0085c83a 	sub	r2,zero,r2
 201237c:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 2012380:	9cc00114 	ori	r19,r19,4
			goto rflag;
 2012384:	003f8106 	br	201218c <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 2012388:	00800ac4 	movi	r2,43
 201238c:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 2012390:	003f7e06 	br	201218c <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 2012394:	a805883a 	mov	r2,r21
 2012398:	15400044 	addi	r21,r2,1
 201239c:	10800003 	ldbu	r2,0(r2)
 20123a0:	14403fcc 	andi	r17,r2,255
 20123a4:	8c40201c 	xori	r17,r17,128
 20123a8:	8c7fe004 	addi	r17,r17,-128
 20123ac:	88800a98 	cmpnei	r2,r17,42
 20123b0:	10000a1e 	bne	r2,zero,20123dc <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 20123b4:	e0bfe917 	ldw	r2,-92(fp)
 20123b8:	10c00104 	addi	r3,r2,4
 20123bc:	e0ffe915 	stw	r3,-92(fp)
 20123c0:	10800017 	ldw	r2,0(r2)
 20123c4:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 20123c8:	e0bfbb17 	ldw	r2,-276(fp)
 20123cc:	103f6f0e 	bge	r2,zero,201218c <___vfiprintf_internal_r+0x224>
					prec = -1;
 20123d0:	00bfffc4 	movi	r2,-1
 20123d4:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 20123d8:	003f6c06 	br	201218c <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 20123dc:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 20123e0:	00000906 	br	2012408 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 20123e4:	80c002a4 	muli	r3,r16,10
 20123e8:	88bff404 	addi	r2,r17,-48
 20123ec:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 20123f0:	a805883a 	mov	r2,r21
 20123f4:	15400044 	addi	r21,r2,1
 20123f8:	10800003 	ldbu	r2,0(r2)
 20123fc:	14403fcc 	andi	r17,r2,255
 2012400:	8c40201c 	xori	r17,r17,128
 2012404:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 2012408:	88bff404 	addi	r2,r17,-48
 201240c:	108002b0 	cmpltui	r2,r2,10
 2012410:	103ff41e 	bne	r2,zero,20123e4 <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 2012414:	8005883a 	mov	r2,r16
 2012418:	1000010e 	bge	r2,zero,2012420 <___vfiprintf_internal_r+0x4b8>
 201241c:	00bfffc4 	movi	r2,-1
 2012420:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 2012424:	003f5f06 	br	20121a4 <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 2012428:	9cc02014 	ori	r19,r19,128
			goto rflag;
 201242c:	003f5706 	br	201218c <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 2012430:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 2012434:	80c002a4 	muli	r3,r16,10
 2012438:	88bff404 	addi	r2,r17,-48
 201243c:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2012440:	a805883a 	mov	r2,r21
 2012444:	15400044 	addi	r21,r2,1
 2012448:	10800003 	ldbu	r2,0(r2)
 201244c:	14403fcc 	andi	r17,r2,255
 2012450:	8c40201c 	xori	r17,r17,128
 2012454:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 2012458:	88bff404 	addi	r2,r17,-48
 201245c:	108002b0 	cmpltui	r2,r2,10
 2012460:	103ff41e 	bne	r2,zero,2012434 <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2012464:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 2012468:	003f4e06 	br	20121a4 <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 201246c:	9cc01014 	ori	r19,r19,64
			goto rflag;
 2012470:	003f4606 	br	201218c <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 2012474:	a8800003 	ldbu	r2,0(r21)
 2012478:	10803fcc 	andi	r2,r2,255
 201247c:	1080201c 	xori	r2,r2,128
 2012480:	10bfe004 	addi	r2,r2,-128
 2012484:	10801b18 	cmpnei	r2,r2,108
 2012488:	1000031e 	bne	r2,zero,2012498 <___vfiprintf_internal_r+0x530>
				fmt++;
 201248c:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 2012490:	9cc00814 	ori	r19,r19,32
 2012494:	003f3d06 	br	201218c <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 2012498:	9cc00414 	ori	r19,r19,16
			goto rflag;
 201249c:	003f3b06 	br	201218c <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 20124a0:	9cc00814 	ori	r19,r19,32
			goto rflag;
 20124a4:	003f3906 	br	201218c <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 20124a8:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 20124ac:	e0bfe917 	ldw	r2,-92(fp)
 20124b0:	10c00104 	addi	r3,r2,4
 20124b4:	e0ffe915 	stw	r3,-92(fp)
 20124b8:	10800017 	ldw	r2,0(r2)
 20124bc:	a0800005 	stb	r2,0(r20)
				size = 1;
 20124c0:	00800044 	movi	r2,1
 20124c4:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 20124c8:	e03fc705 	stb	zero,-228(fp)
			break;
 20124cc:	0001c806 	br	2012bf0 <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 20124d0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 20124d4:	9880080c 	andi	r2,r19,32
 20124d8:	10000826 	beq	r2,zero,20124fc <___vfiprintf_internal_r+0x594>
 20124dc:	e13fe917 	ldw	r4,-92(fp)
 20124e0:	20800204 	addi	r2,r4,8
 20124e4:	e0bfe915 	stw	r2,-92(fp)
 20124e8:	20800017 	ldw	r2,0(r4)
 20124ec:	20c00117 	ldw	r3,4(r4)
 20124f0:	e0bfea15 	stw	r2,-88(fp)
 20124f4:	e0ffeb15 	stw	r3,-84(fp)
 20124f8:	00001e06 	br	2012574 <___vfiprintf_internal_r+0x60c>
 20124fc:	9880040c 	andi	r2,r19,16
 2012500:	10000826 	beq	r2,zero,2012524 <___vfiprintf_internal_r+0x5bc>
 2012504:	e0bfe917 	ldw	r2,-92(fp)
 2012508:	10c00104 	addi	r3,r2,4
 201250c:	e0ffe915 	stw	r3,-92(fp)
 2012510:	10800017 	ldw	r2,0(r2)
 2012514:	e0bfea15 	stw	r2,-88(fp)
 2012518:	1005d7fa 	srai	r2,r2,31
 201251c:	e0bfeb15 	stw	r2,-84(fp)
 2012520:	00001406 	br	2012574 <___vfiprintf_internal_r+0x60c>
 2012524:	9880100c 	andi	r2,r19,64
 2012528:	10000b26 	beq	r2,zero,2012558 <___vfiprintf_internal_r+0x5f0>
 201252c:	e0bfe917 	ldw	r2,-92(fp)
 2012530:	10c00104 	addi	r3,r2,4
 2012534:	e0ffe915 	stw	r3,-92(fp)
 2012538:	10800017 	ldw	r2,0(r2)
 201253c:	10bfffcc 	andi	r2,r2,65535
 2012540:	10a0001c 	xori	r2,r2,32768
 2012544:	10a00004 	addi	r2,r2,-32768
 2012548:	e0bfea15 	stw	r2,-88(fp)
 201254c:	1005d7fa 	srai	r2,r2,31
 2012550:	e0bfeb15 	stw	r2,-84(fp)
 2012554:	00000706 	br	2012574 <___vfiprintf_internal_r+0x60c>
 2012558:	e0bfe917 	ldw	r2,-92(fp)
 201255c:	10c00104 	addi	r3,r2,4
 2012560:	e0ffe915 	stw	r3,-92(fp)
 2012564:	10800017 	ldw	r2,0(r2)
 2012568:	e0bfea15 	stw	r2,-88(fp)
 201256c:	1005d7fa 	srai	r2,r2,31
 2012570:	e0bfeb15 	stw	r2,-84(fp)
 2012574:	e0bfea17 	ldw	r2,-88(fp)
 2012578:	e0bfbc15 	stw	r2,-272(fp)
 201257c:	e0ffeb17 	ldw	r3,-84(fp)
 2012580:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 2012584:	e0bfbc17 	ldw	r2,-272(fp)
 2012588:	e0ffbd17 	ldw	r3,-268(fp)
 201258c:	18000d0e 	bge	r3,zero,20125c4 <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 2012590:	000d883a 	mov	r6,zero
 2012594:	000f883a 	mov	r7,zero
 2012598:	e13fbc17 	ldw	r4,-272(fp)
 201259c:	e17fbd17 	ldw	r5,-268(fp)
 20125a0:	3105c83a 	sub	r2,r6,r4
 20125a4:	3091803a 	cmpltu	r8,r6,r2
 20125a8:	3947c83a 	sub	r3,r7,r5
 20125ac:	1a09c83a 	sub	r4,r3,r8
 20125b0:	2007883a 	mov	r3,r4
 20125b4:	e0bfbc15 	stw	r2,-272(fp)
 20125b8:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 20125bc:	00800b44 	movi	r2,45
 20125c0:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 20125c4:	00800044 	movi	r2,1
 20125c8:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 20125cc:	0000f806 	br	20129b0 <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 20125d0:	9880080c 	andi	r2,r19,32
 20125d4:	10000d26 	beq	r2,zero,201260c <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 20125d8:	e0bfe917 	ldw	r2,-92(fp)
 20125dc:	10c00104 	addi	r3,r2,4
 20125e0:	e0ffe915 	stw	r3,-92(fp)
 20125e4:	10800017 	ldw	r2,0(r2)
 20125e8:	e0ffb917 	ldw	r3,-284(fp)
 20125ec:	e0fff015 	stw	r3,-64(fp)
 20125f0:	1807d7fa 	srai	r3,r3,31
 20125f4:	e0fff115 	stw	r3,-60(fp)
 20125f8:	e0fff017 	ldw	r3,-64(fp)
 20125fc:	10c00015 	stw	r3,0(r2)
 2012600:	e0fff117 	ldw	r3,-60(fp)
 2012604:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2012608:	0002c306 	br	2013118 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 201260c:	9880040c 	andi	r2,r19,16
 2012610:	10000726 	beq	r2,zero,2012630 <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 2012614:	e0bfe917 	ldw	r2,-92(fp)
 2012618:	10c00104 	addi	r3,r2,4
 201261c:	e0ffe915 	stw	r3,-92(fp)
 2012620:	10800017 	ldw	r2,0(r2)
 2012624:	e0ffb917 	ldw	r3,-284(fp)
 2012628:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 201262c:	0002ba06 	br	2013118 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 2012630:	9880100c 	andi	r2,r19,64
 2012634:	10000726 	beq	r2,zero,2012654 <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2012638:	e0bfe917 	ldw	r2,-92(fp)
 201263c:	10c00104 	addi	r3,r2,4
 2012640:	e0ffe915 	stw	r3,-92(fp)
 2012644:	10800017 	ldw	r2,0(r2)
 2012648:	e0ffb917 	ldw	r3,-284(fp)
 201264c:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2012650:	0002b106 	br	2013118 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 2012654:	e0bfe917 	ldw	r2,-92(fp)
 2012658:	10c00104 	addi	r3,r2,4
 201265c:	e0ffe915 	stw	r3,-92(fp)
 2012660:	10800017 	ldw	r2,0(r2)
 2012664:	e0ffb917 	ldw	r3,-284(fp)
 2012668:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 201266c:	0002aa06 	br	2013118 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 2012670:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 2012674:	9880080c 	andi	r2,r19,32
 2012678:	10000626 	beq	r2,zero,2012694 <___vfiprintf_internal_r+0x72c>
 201267c:	e0bfe917 	ldw	r2,-92(fp)
 2012680:	10c00204 	addi	r3,r2,8
 2012684:	e0ffe915 	stw	r3,-92(fp)
 2012688:	15800017 	ldw	r22,0(r2)
 201268c:	15c00117 	ldw	r23,4(r2)
 2012690:	00001c06 	br	2012704 <___vfiprintf_internal_r+0x79c>
 2012694:	9880040c 	andi	r2,r19,16
 2012698:	10000726 	beq	r2,zero,20126b8 <___vfiprintf_internal_r+0x750>
 201269c:	e0bfe917 	ldw	r2,-92(fp)
 20126a0:	10c00104 	addi	r3,r2,4
 20126a4:	e0ffe915 	stw	r3,-92(fp)
 20126a8:	10800017 	ldw	r2,0(r2)
 20126ac:	102d883a 	mov	r22,r2
 20126b0:	002f883a 	mov	r23,zero
 20126b4:	00001306 	br	2012704 <___vfiprintf_internal_r+0x79c>
 20126b8:	9880100c 	andi	r2,r19,64
 20126bc:	10000b26 	beq	r2,zero,20126ec <___vfiprintf_internal_r+0x784>
 20126c0:	e0bfe917 	ldw	r2,-92(fp)
 20126c4:	10c00104 	addi	r3,r2,4
 20126c8:	e0ffe915 	stw	r3,-92(fp)
 20126cc:	10800017 	ldw	r2,0(r2)
 20126d0:	e0bff215 	stw	r2,-56(fp)
 20126d4:	e03ff315 	stw	zero,-52(fp)
 20126d8:	e0bff217 	ldw	r2,-56(fp)
 20126dc:	15bfffcc 	andi	r22,r2,65535
 20126e0:	e0fff317 	ldw	r3,-52(fp)
 20126e4:	182e703a 	and	r23,r3,zero
 20126e8:	00000606 	br	2012704 <___vfiprintf_internal_r+0x79c>
 20126ec:	e0bfe917 	ldw	r2,-92(fp)
 20126f0:	10c00104 	addi	r3,r2,4
 20126f4:	e0ffe915 	stw	r3,-92(fp)
 20126f8:	10800017 	ldw	r2,0(r2)
 20126fc:	102d883a 	mov	r22,r2
 2012700:	002f883a 	mov	r23,zero
 2012704:	e5bfbc15 	stw	r22,-272(fp)
 2012708:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 201270c:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 2012710:	0000a606 	br	20129ac <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 2012714:	e0bfe917 	ldw	r2,-92(fp)
 2012718:	10c00104 	addi	r3,r2,4
 201271c:	e0ffe915 	stw	r3,-92(fp)
 2012720:	10800017 	ldw	r2,0(r2)
 2012724:	e0bfbc15 	stw	r2,-272(fp)
 2012728:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 201272c:	00800084 	movi	r2,2
 2012730:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 2012734:	008080b4 	movhi	r2,514
 2012738:	10875204 	addi	r2,r2,7496
 201273c:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 2012740:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 2012744:	00800c04 	movi	r2,48
 2012748:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 201274c:	04401e04 	movi	r17,120
 2012750:	00801e04 	movi	r2,120
 2012754:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2012758:	00009406 	br	20129ac <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 201275c:	e0bfe917 	ldw	r2,-92(fp)
 2012760:	10c00104 	addi	r3,r2,4
 2012764:	e0ffe915 	stw	r3,-92(fp)
 2012768:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 201276c:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 2012770:	a000081e 	bne	r20,zero,2012794 <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 2012774:	050080b4 	movhi	r20,514
 2012778:	a5075704 	addi	r20,r20,7516
				size = ((unsigned) prec > 6U) ? 6 : prec;
 201277c:	e0bfbb17 	ldw	r2,-276(fp)
 2012780:	10c001f0 	cmpltui	r3,r2,7
 2012784:	1800011e 	bne	r3,zero,201278c <___vfiprintf_internal_r+0x824>
 2012788:	00800184 	movi	r2,6
 201278c:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2012790:	00011706 	br	2012bf0 <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 2012794:	e0bfbb17 	ldw	r2,-276(fp)
 2012798:	10001016 	blt	r2,zero,20127dc <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 201279c:	e0bfbb17 	ldw	r2,-276(fp)
 20127a0:	100d883a 	mov	r6,r2
 20127a4:	000b883a 	mov	r5,zero
 20127a8:	a009883a 	mov	r4,r20
 20127ac:	200eeac0 	call	200eeac <memchr>
 20127b0:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 20127b4:	e0bfc617 	ldw	r2,-232(fp)
 20127b8:	10000526 	beq	r2,zero,20127d0 <___vfiprintf_internal_r+0x868>
					size = p - cp;
 20127bc:	e0bfc617 	ldw	r2,-232(fp)
 20127c0:	a007883a 	mov	r3,r20
 20127c4:	10c5c83a 	sub	r2,r2,r3
 20127c8:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 20127cc:	00010806 	br	2012bf0 <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 20127d0:	e0bfbb17 	ldw	r2,-276(fp)
 20127d4:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 20127d8:	00010506 	br	2012bf0 <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 20127dc:	a009883a 	mov	r4,r20
 20127e0:	2007c300 	call	2007c30 <strlen>
 20127e4:	e0bfc115 	stw	r2,-252(fp)

			break;
 20127e8:	00010106 	br	2012bf0 <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 20127ec:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 20127f0:	9880080c 	andi	r2,r19,32
 20127f4:	10000826 	beq	r2,zero,2012818 <___vfiprintf_internal_r+0x8b0>
 20127f8:	e0bfe917 	ldw	r2,-92(fp)
 20127fc:	10c00204 	addi	r3,r2,8
 2012800:	e0ffe915 	stw	r3,-92(fp)
 2012804:	10c00017 	ldw	r3,0(r2)
 2012808:	e0ffec15 	stw	r3,-80(fp)
 201280c:	10c00117 	ldw	r3,4(r2)
 2012810:	e0ffed15 	stw	r3,-76(fp)
 2012814:	00001e06 	br	2012890 <___vfiprintf_internal_r+0x928>
 2012818:	9880040c 	andi	r2,r19,16
 201281c:	10000726 	beq	r2,zero,201283c <___vfiprintf_internal_r+0x8d4>
 2012820:	e0bfe917 	ldw	r2,-92(fp)
 2012824:	10c00104 	addi	r3,r2,4
 2012828:	e0ffe915 	stw	r3,-92(fp)
 201282c:	10800017 	ldw	r2,0(r2)
 2012830:	e0bfec15 	stw	r2,-80(fp)
 2012834:	e03fed15 	stw	zero,-76(fp)
 2012838:	00001506 	br	2012890 <___vfiprintf_internal_r+0x928>
 201283c:	9880100c 	andi	r2,r19,64
 2012840:	10000d26 	beq	r2,zero,2012878 <___vfiprintf_internal_r+0x910>
 2012844:	e0bfe917 	ldw	r2,-92(fp)
 2012848:	10c00104 	addi	r3,r2,4
 201284c:	e0ffe915 	stw	r3,-92(fp)
 2012850:	10800017 	ldw	r2,0(r2)
 2012854:	e0bff415 	stw	r2,-48(fp)
 2012858:	e03ff515 	stw	zero,-44(fp)
 201285c:	e0bff417 	ldw	r2,-48(fp)
 2012860:	10bfffcc 	andi	r2,r2,65535
 2012864:	e0bfec15 	stw	r2,-80(fp)
 2012868:	e0fff517 	ldw	r3,-44(fp)
 201286c:	1806703a 	and	r3,r3,zero
 2012870:	e0ffed15 	stw	r3,-76(fp)
 2012874:	00000606 	br	2012890 <___vfiprintf_internal_r+0x928>
 2012878:	e0bfe917 	ldw	r2,-92(fp)
 201287c:	10c00104 	addi	r3,r2,4
 2012880:	e0ffe915 	stw	r3,-92(fp)
 2012884:	10800017 	ldw	r2,0(r2)
 2012888:	e0bfec15 	stw	r2,-80(fp)
 201288c:	e03fed15 	stw	zero,-76(fp)
 2012890:	e0bfec17 	ldw	r2,-80(fp)
 2012894:	e0bfbc15 	stw	r2,-272(fp)
 2012898:	e0ffed17 	ldw	r3,-76(fp)
 201289c:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 20128a0:	00800044 	movi	r2,1
 20128a4:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 20128a8:	00004006 	br	20129ac <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 20128ac:	008080b4 	movhi	r2,514
 20128b0:	10875904 	addi	r2,r2,7524
 20128b4:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 20128b8:	00000306 	br	20128c8 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 20128bc:	008080b4 	movhi	r2,514
 20128c0:	10875204 	addi	r2,r2,7496
 20128c4:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 20128c8:	9880080c 	andi	r2,r19,32
 20128cc:	10000826 	beq	r2,zero,20128f0 <___vfiprintf_internal_r+0x988>
 20128d0:	e0bfe917 	ldw	r2,-92(fp)
 20128d4:	10c00204 	addi	r3,r2,8
 20128d8:	e0ffe915 	stw	r3,-92(fp)
 20128dc:	10c00017 	ldw	r3,0(r2)
 20128e0:	e0ffee15 	stw	r3,-72(fp)
 20128e4:	10c00117 	ldw	r3,4(r2)
 20128e8:	e0ffef15 	stw	r3,-68(fp)
 20128ec:	00001e06 	br	2012968 <___vfiprintf_internal_r+0xa00>
 20128f0:	9880040c 	andi	r2,r19,16
 20128f4:	10000726 	beq	r2,zero,2012914 <___vfiprintf_internal_r+0x9ac>
 20128f8:	e0bfe917 	ldw	r2,-92(fp)
 20128fc:	10c00104 	addi	r3,r2,4
 2012900:	e0ffe915 	stw	r3,-92(fp)
 2012904:	10800017 	ldw	r2,0(r2)
 2012908:	e0bfee15 	stw	r2,-72(fp)
 201290c:	e03fef15 	stw	zero,-68(fp)
 2012910:	00001506 	br	2012968 <___vfiprintf_internal_r+0xa00>
 2012914:	9880100c 	andi	r2,r19,64
 2012918:	10000d26 	beq	r2,zero,2012950 <___vfiprintf_internal_r+0x9e8>
 201291c:	e0bfe917 	ldw	r2,-92(fp)
 2012920:	10c00104 	addi	r3,r2,4
 2012924:	e0ffe915 	stw	r3,-92(fp)
 2012928:	10800017 	ldw	r2,0(r2)
 201292c:	e0bff615 	stw	r2,-40(fp)
 2012930:	e03ff715 	stw	zero,-36(fp)
 2012934:	e0bff617 	ldw	r2,-40(fp)
 2012938:	10bfffcc 	andi	r2,r2,65535
 201293c:	e0bfee15 	stw	r2,-72(fp)
 2012940:	e0fff717 	ldw	r3,-36(fp)
 2012944:	1806703a 	and	r3,r3,zero
 2012948:	e0ffef15 	stw	r3,-68(fp)
 201294c:	00000606 	br	2012968 <___vfiprintf_internal_r+0xa00>
 2012950:	e0bfe917 	ldw	r2,-92(fp)
 2012954:	10c00104 	addi	r3,r2,4
 2012958:	e0ffe915 	stw	r3,-92(fp)
 201295c:	10800017 	ldw	r2,0(r2)
 2012960:	e0bfee15 	stw	r2,-72(fp)
 2012964:	e03fef15 	stw	zero,-68(fp)
 2012968:	e0bfee17 	ldw	r2,-72(fp)
 201296c:	e0bfbc15 	stw	r2,-272(fp)
 2012970:	e0ffef17 	ldw	r3,-68(fp)
 2012974:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 2012978:	00800084 	movi	r2,2
 201297c:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 2012980:	9880004c 	andi	r2,r19,1
 2012984:	10000926 	beq	r2,zero,20129ac <___vfiprintf_internal_r+0xa44>
 2012988:	e0bfbc17 	ldw	r2,-272(fp)
 201298c:	e0ffbd17 	ldw	r3,-268(fp)
 2012990:	10c4b03a 	or	r2,r2,r3
 2012994:	10000526 	beq	r2,zero,20129ac <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 2012998:	00800c04 	movi	r2,48
 201299c:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 20129a0:	8805883a 	mov	r2,r17
 20129a4:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 20129a8:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 20129ac:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 20129b0:	e0bfbb17 	ldw	r2,-276(fp)
 20129b4:	e0bfbf15 	stw	r2,-260(fp)
 20129b8:	e0bfbf17 	ldw	r2,-260(fp)
 20129bc:	10000216 	blt	r2,zero,20129c8 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 20129c0:	00bfdfc4 	movi	r2,-129
 20129c4:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 20129c8:	e53fdb04 	addi	r20,fp,-148
 20129cc:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 20129d0:	e0bfbc17 	ldw	r2,-272(fp)
 20129d4:	e0ffbd17 	ldw	r3,-268(fp)
 20129d8:	10c4b03a 	or	r2,r2,r3
 20129dc:	1000021e 	bne	r2,zero,20129e8 <___vfiprintf_internal_r+0xa80>
 20129e0:	e0bfbb17 	ldw	r2,-276(fp)
 20129e4:	10006c26 	beq	r2,zero,2012b98 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 20129e8:	e0bfbe03 	ldbu	r2,-264(fp)
 20129ec:	10c00060 	cmpeqi	r3,r2,1
 20129f0:	1800211e 	bne	r3,zero,2012a78 <___vfiprintf_internal_r+0xb10>
 20129f4:	10c000a0 	cmpeqi	r3,r2,2
 20129f8:	1800491e 	bne	r3,zero,2012b20 <___vfiprintf_internal_r+0xbb8>
 20129fc:	10005d1e 	bne	r2,zero,2012b74 <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 2012a00:	a53fffc4 	addi	r20,r20,-1
 2012a04:	e0bfbc17 	ldw	r2,-272(fp)
 2012a08:	108001cc 	andi	r2,r2,7
 2012a0c:	10800c04 	addi	r2,r2,48
 2012a10:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 2012a14:	e0bfbd17 	ldw	r2,-268(fp)
 2012a18:	1004977a 	slli	r2,r2,29
 2012a1c:	e0ffbc17 	ldw	r3,-272(fp)
 2012a20:	1806d0fa 	srli	r3,r3,3
 2012a24:	1884b03a 	or	r2,r3,r2
 2012a28:	e0bfbc15 	stw	r2,-272(fp)
 2012a2c:	e0bfbd17 	ldw	r2,-268(fp)
 2012a30:	1004d0fa 	srli	r2,r2,3
 2012a34:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 2012a38:	e0bfbc17 	ldw	r2,-272(fp)
 2012a3c:	e0ffbd17 	ldw	r3,-268(fp)
 2012a40:	10c4b03a 	or	r2,r2,r3
 2012a44:	103fee1e 	bne	r2,zero,2012a00 <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 2012a48:	9880004c 	andi	r2,r19,1
 2012a4c:	10005026 	beq	r2,zero,2012b90 <___vfiprintf_internal_r+0xc28>
 2012a50:	a0800003 	ldbu	r2,0(r20)
 2012a54:	10803fcc 	andi	r2,r2,255
 2012a58:	1080201c 	xori	r2,r2,128
 2012a5c:	10bfe004 	addi	r2,r2,-128
 2012a60:	10800c20 	cmpeqi	r2,r2,48
 2012a64:	10004a1e 	bne	r2,zero,2012b90 <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 2012a68:	a53fffc4 	addi	r20,r20,-1
 2012a6c:	00800c04 	movi	r2,48
 2012a70:	a0800005 	stb	r2,0(r20)
					break;
 2012a74:	00004606 	br	2012b90 <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 2012a78:	e0bfbd17 	ldw	r2,-268(fp)
 2012a7c:	10000a1e 	bne	r2,zero,2012aa8 <___vfiprintf_internal_r+0xb40>
 2012a80:	e0bfbd17 	ldw	r2,-268(fp)
 2012a84:	1000031e 	bne	r2,zero,2012a94 <___vfiprintf_internal_r+0xb2c>
 2012a88:	e0bfbc17 	ldw	r2,-272(fp)
 2012a8c:	108002a8 	cmpgeui	r2,r2,10
 2012a90:	1000051e 	bne	r2,zero,2012aa8 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 2012a94:	a53fffc4 	addi	r20,r20,-1
 2012a98:	e0bfbc17 	ldw	r2,-272(fp)
 2012a9c:	10800c04 	addi	r2,r2,48
 2012aa0:	a0800005 	stb	r2,0(r20)
						break;
 2012aa4:	00003b06 	br	2012b94 <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 2012aa8:	a53fffc4 	addi	r20,r20,-1
 2012aac:	e0bfbc17 	ldw	r2,-272(fp)
 2012ab0:	e0ffbd17 	ldw	r3,-268(fp)
 2012ab4:	01800284 	movi	r6,10
 2012ab8:	000f883a 	mov	r7,zero
 2012abc:	1009883a 	mov	r4,r2
 2012ac0:	180b883a 	mov	r5,r3
 2012ac4:	20143f80 	call	20143f8 <__umoddi3>
 2012ac8:	1009883a 	mov	r4,r2
 2012acc:	180b883a 	mov	r5,r3
 2012ad0:	2005883a 	mov	r2,r4
 2012ad4:	2807883a 	mov	r3,r5
 2012ad8:	10800c04 	addi	r2,r2,48
 2012adc:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 2012ae0:	e0bfbc17 	ldw	r2,-272(fp)
 2012ae4:	e0ffbd17 	ldw	r3,-268(fp)
 2012ae8:	01800284 	movi	r6,10
 2012aec:	000f883a 	mov	r7,zero
 2012af0:	1009883a 	mov	r4,r2
 2012af4:	180b883a 	mov	r5,r3
 2012af8:	2013e800 	call	2013e80 <__udivdi3>
 2012afc:	1009883a 	mov	r4,r2
 2012b00:	180b883a 	mov	r5,r3
 2012b04:	e13fbc15 	stw	r4,-272(fp)
 2012b08:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 2012b0c:	e0bfbc17 	ldw	r2,-272(fp)
 2012b10:	e0ffbd17 	ldw	r3,-268(fp)
 2012b14:	10c4b03a 	or	r2,r2,r3
 2012b18:	103fe31e 	bne	r2,zero,2012aa8 <___vfiprintf_internal_r+0xb40>
					break;
 2012b1c:	00001d06 	br	2012b94 <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 2012b20:	a53fffc4 	addi	r20,r20,-1
 2012b24:	e0bfbc17 	ldw	r2,-272(fp)
 2012b28:	108003cc 	andi	r2,r2,15
 2012b2c:	e0ffc217 	ldw	r3,-248(fp)
 2012b30:	1885883a 	add	r2,r3,r2
 2012b34:	10800003 	ldbu	r2,0(r2)
 2012b38:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 2012b3c:	e0bfbd17 	ldw	r2,-268(fp)
 2012b40:	1004973a 	slli	r2,r2,28
 2012b44:	e0ffbc17 	ldw	r3,-272(fp)
 2012b48:	1806d13a 	srli	r3,r3,4
 2012b4c:	1884b03a 	or	r2,r3,r2
 2012b50:	e0bfbc15 	stw	r2,-272(fp)
 2012b54:	e0bfbd17 	ldw	r2,-268(fp)
 2012b58:	1004d13a 	srli	r2,r2,4
 2012b5c:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 2012b60:	e0bfbc17 	ldw	r2,-272(fp)
 2012b64:	e0ffbd17 	ldw	r3,-268(fp)
 2012b68:	10c4b03a 	or	r2,r2,r3
 2012b6c:	103fec1e 	bne	r2,zero,2012b20 <___vfiprintf_internal_r+0xbb8>
					break;
 2012b70:	00000806 	br	2012b94 <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 2012b74:	050080b4 	movhi	r20,514
 2012b78:	a5075e04 	addi	r20,r20,7544
					size = strlen (cp);
 2012b7c:	a009883a 	mov	r4,r20
 2012b80:	2007c300 	call	2007c30 <strlen>
 2012b84:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 2012b88:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2012b8c:	00001806 	br	2012bf0 <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 2012b90:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 2012b94:	00000706 	br	2012bb4 <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 2012b98:	e0bfbe03 	ldbu	r2,-264(fp)
 2012b9c:	1000051e 	bne	r2,zero,2012bb4 <___vfiprintf_internal_r+0xc4c>
 2012ba0:	9880004c 	andi	r2,r19,1
 2012ba4:	10000326 	beq	r2,zero,2012bb4 <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 2012ba8:	a53fffc4 	addi	r20,r20,-1
 2012bac:	00800c04 	movi	r2,48
 2012bb0:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 2012bb4:	e0bfdb04 	addi	r2,fp,-148
 2012bb8:	10800a04 	addi	r2,r2,40
 2012bbc:	1007883a 	mov	r3,r2
 2012bc0:	a005883a 	mov	r2,r20
 2012bc4:	1885c83a 	sub	r2,r3,r2
 2012bc8:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 2012bcc:	00000806 	br	2012bf0 <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 2012bd0:	88015426 	beq	r17,zero,2013124 <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 2012bd4:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 2012bd8:	8805883a 	mov	r2,r17
 2012bdc:	a0800005 	stb	r2,0(r20)
			size = 1;
 2012be0:	00800044 	movi	r2,1
 2012be4:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 2012be8:	e03fc705 	stb	zero,-228(fp)
			break;
 2012bec:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 2012bf0:	e0ffbf17 	ldw	r3,-260(fp)
 2012bf4:	e0bfc117 	ldw	r2,-252(fp)
 2012bf8:	10c0010e 	bge	r2,r3,2012c00 <___vfiprintf_internal_r+0xc98>
 2012bfc:	1805883a 	mov	r2,r3
 2012c00:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 2012c04:	e0bfc703 	ldbu	r2,-228(fp)
 2012c08:	10803fcc 	andi	r2,r2,255
 2012c0c:	1080201c 	xori	r2,r2,128
 2012c10:	10bfe004 	addi	r2,r2,-128
 2012c14:	10000326 	beq	r2,zero,2012c24 <___vfiprintf_internal_r+0xcbc>
			realsz++;
 2012c18:	e0bfc017 	ldw	r2,-256(fp)
 2012c1c:	10800044 	addi	r2,r2,1
 2012c20:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 2012c24:	9880008c 	andi	r2,r19,2
 2012c28:	10000326 	beq	r2,zero,2012c38 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 2012c2c:	e0bfc017 	ldw	r2,-256(fp)
 2012c30:	10800084 	addi	r2,r2,2
 2012c34:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 2012c38:	9880210c 	andi	r2,r19,132
 2012c3c:	1000351e 	bne	r2,zero,2012d14 <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 2012c40:	e0ffba17 	ldw	r3,-280(fp)
 2012c44:	e0bfc017 	ldw	r2,-256(fp)
 2012c48:	18a1c83a 	sub	r16,r3,r2
 2012c4c:	0400310e 	bge	zero,r16,2012d14 <___vfiprintf_internal_r+0xdac>
 2012c50:	00001706 	br	2012cb0 <___vfiprintf_internal_r+0xd48>
 2012c54:	008080b4 	movhi	r2,514
 2012c58:	10876484 	addi	r2,r2,7570
 2012c5c:	90800015 	stw	r2,0(r18)
 2012c60:	00800404 	movi	r2,16
 2012c64:	90800115 	stw	r2,4(r18)
 2012c68:	e0bfca17 	ldw	r2,-216(fp)
 2012c6c:	10800404 	addi	r2,r2,16
 2012c70:	e0bfca15 	stw	r2,-216(fp)
 2012c74:	94800204 	addi	r18,r18,8
 2012c78:	e0bfc917 	ldw	r2,-220(fp)
 2012c7c:	10800044 	addi	r2,r2,1
 2012c80:	e0bfc915 	stw	r2,-220(fp)
 2012c84:	e0bfc917 	ldw	r2,-220(fp)
 2012c88:	10800210 	cmplti	r2,r2,8
 2012c8c:	1000071e 	bne	r2,zero,2012cac <___vfiprintf_internal_r+0xd44>
 2012c90:	e0bfc804 	addi	r2,fp,-224
 2012c94:	100d883a 	mov	r6,r2
 2012c98:	e17fe717 	ldw	r5,-100(fp)
 2012c9c:	e13fe617 	ldw	r4,-104(fp)
 2012ca0:	2011cec0 	call	2011cec <__sprint_r>
 2012ca4:	10012d1e 	bne	r2,zero,201315c <___vfiprintf_internal_r+0x11f4>
 2012ca8:	e4bfcb04 	addi	r18,fp,-212
 2012cac:	843ffc04 	addi	r16,r16,-16
 2012cb0:	80800448 	cmpgei	r2,r16,17
 2012cb4:	103fe71e 	bne	r2,zero,2012c54 <___vfiprintf_internal_r+0xcec>
 2012cb8:	008080b4 	movhi	r2,514
 2012cbc:	10876484 	addi	r2,r2,7570
 2012cc0:	90800015 	stw	r2,0(r18)
 2012cc4:	8005883a 	mov	r2,r16
 2012cc8:	90800115 	stw	r2,4(r18)
 2012ccc:	e0bfca17 	ldw	r2,-216(fp)
 2012cd0:	8007883a 	mov	r3,r16
 2012cd4:	10c5883a 	add	r2,r2,r3
 2012cd8:	e0bfca15 	stw	r2,-216(fp)
 2012cdc:	94800204 	addi	r18,r18,8
 2012ce0:	e0bfc917 	ldw	r2,-220(fp)
 2012ce4:	10800044 	addi	r2,r2,1
 2012ce8:	e0bfc915 	stw	r2,-220(fp)
 2012cec:	e0bfc917 	ldw	r2,-220(fp)
 2012cf0:	10800210 	cmplti	r2,r2,8
 2012cf4:	1000071e 	bne	r2,zero,2012d14 <___vfiprintf_internal_r+0xdac>
 2012cf8:	e0bfc804 	addi	r2,fp,-224
 2012cfc:	100d883a 	mov	r6,r2
 2012d00:	e17fe717 	ldw	r5,-100(fp)
 2012d04:	e13fe617 	ldw	r4,-104(fp)
 2012d08:	2011cec0 	call	2011cec <__sprint_r>
 2012d0c:	1001151e 	bne	r2,zero,2013164 <___vfiprintf_internal_r+0x11fc>
 2012d10:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 2012d14:	e0bfc703 	ldbu	r2,-228(fp)
 2012d18:	10803fcc 	andi	r2,r2,255
 2012d1c:	1080201c 	xori	r2,r2,128
 2012d20:	10bfe004 	addi	r2,r2,-128
 2012d24:	10001526 	beq	r2,zero,2012d7c <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 2012d28:	e0bfc704 	addi	r2,fp,-228
 2012d2c:	90800015 	stw	r2,0(r18)
 2012d30:	00800044 	movi	r2,1
 2012d34:	90800115 	stw	r2,4(r18)
 2012d38:	e0bfca17 	ldw	r2,-216(fp)
 2012d3c:	10800044 	addi	r2,r2,1
 2012d40:	e0bfca15 	stw	r2,-216(fp)
 2012d44:	94800204 	addi	r18,r18,8
 2012d48:	e0bfc917 	ldw	r2,-220(fp)
 2012d4c:	10800044 	addi	r2,r2,1
 2012d50:	e0bfc915 	stw	r2,-220(fp)
 2012d54:	e0bfc917 	ldw	r2,-220(fp)
 2012d58:	10800210 	cmplti	r2,r2,8
 2012d5c:	1000071e 	bne	r2,zero,2012d7c <___vfiprintf_internal_r+0xe14>
 2012d60:	e0bfc804 	addi	r2,fp,-224
 2012d64:	100d883a 	mov	r6,r2
 2012d68:	e17fe717 	ldw	r5,-100(fp)
 2012d6c:	e13fe617 	ldw	r4,-104(fp)
 2012d70:	2011cec0 	call	2011cec <__sprint_r>
 2012d74:	1000fd1e 	bne	r2,zero,201316c <___vfiprintf_internal_r+0x1204>
 2012d78:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 2012d7c:	9880008c 	andi	r2,r19,2
 2012d80:	10001526 	beq	r2,zero,2012dd8 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 2012d84:	e0bfe504 	addi	r2,fp,-108
 2012d88:	90800015 	stw	r2,0(r18)
 2012d8c:	00800084 	movi	r2,2
 2012d90:	90800115 	stw	r2,4(r18)
 2012d94:	e0bfca17 	ldw	r2,-216(fp)
 2012d98:	10800084 	addi	r2,r2,2
 2012d9c:	e0bfca15 	stw	r2,-216(fp)
 2012da0:	94800204 	addi	r18,r18,8
 2012da4:	e0bfc917 	ldw	r2,-220(fp)
 2012da8:	10800044 	addi	r2,r2,1
 2012dac:	e0bfc915 	stw	r2,-220(fp)
 2012db0:	e0bfc917 	ldw	r2,-220(fp)
 2012db4:	10800210 	cmplti	r2,r2,8
 2012db8:	1000071e 	bne	r2,zero,2012dd8 <___vfiprintf_internal_r+0xe70>
 2012dbc:	e0bfc804 	addi	r2,fp,-224
 2012dc0:	100d883a 	mov	r6,r2
 2012dc4:	e17fe717 	ldw	r5,-100(fp)
 2012dc8:	e13fe617 	ldw	r4,-104(fp)
 2012dcc:	2011cec0 	call	2011cec <__sprint_r>
 2012dd0:	1000e81e 	bne	r2,zero,2013174 <___vfiprintf_internal_r+0x120c>
 2012dd4:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 2012dd8:	9880210c 	andi	r2,r19,132
 2012ddc:	10802018 	cmpnei	r2,r2,128
 2012de0:	1000351e 	bne	r2,zero,2012eb8 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 2012de4:	e0ffba17 	ldw	r3,-280(fp)
 2012de8:	e0bfc017 	ldw	r2,-256(fp)
 2012dec:	18a1c83a 	sub	r16,r3,r2
 2012df0:	0400310e 	bge	zero,r16,2012eb8 <___vfiprintf_internal_r+0xf50>
 2012df4:	00001706 	br	2012e54 <___vfiprintf_internal_r+0xeec>
 2012df8:	008080b4 	movhi	r2,514
 2012dfc:	10876884 	addi	r2,r2,7586
 2012e00:	90800015 	stw	r2,0(r18)
 2012e04:	00800404 	movi	r2,16
 2012e08:	90800115 	stw	r2,4(r18)
 2012e0c:	e0bfca17 	ldw	r2,-216(fp)
 2012e10:	10800404 	addi	r2,r2,16
 2012e14:	e0bfca15 	stw	r2,-216(fp)
 2012e18:	94800204 	addi	r18,r18,8
 2012e1c:	e0bfc917 	ldw	r2,-220(fp)
 2012e20:	10800044 	addi	r2,r2,1
 2012e24:	e0bfc915 	stw	r2,-220(fp)
 2012e28:	e0bfc917 	ldw	r2,-220(fp)
 2012e2c:	10800210 	cmplti	r2,r2,8
 2012e30:	1000071e 	bne	r2,zero,2012e50 <___vfiprintf_internal_r+0xee8>
 2012e34:	e0bfc804 	addi	r2,fp,-224
 2012e38:	100d883a 	mov	r6,r2
 2012e3c:	e17fe717 	ldw	r5,-100(fp)
 2012e40:	e13fe617 	ldw	r4,-104(fp)
 2012e44:	2011cec0 	call	2011cec <__sprint_r>
 2012e48:	1000cc1e 	bne	r2,zero,201317c <___vfiprintf_internal_r+0x1214>
 2012e4c:	e4bfcb04 	addi	r18,fp,-212
 2012e50:	843ffc04 	addi	r16,r16,-16
 2012e54:	80800448 	cmpgei	r2,r16,17
 2012e58:	103fe71e 	bne	r2,zero,2012df8 <___vfiprintf_internal_r+0xe90>
 2012e5c:	008080b4 	movhi	r2,514
 2012e60:	10876884 	addi	r2,r2,7586
 2012e64:	90800015 	stw	r2,0(r18)
 2012e68:	8005883a 	mov	r2,r16
 2012e6c:	90800115 	stw	r2,4(r18)
 2012e70:	e0bfca17 	ldw	r2,-216(fp)
 2012e74:	8007883a 	mov	r3,r16
 2012e78:	10c5883a 	add	r2,r2,r3
 2012e7c:	e0bfca15 	stw	r2,-216(fp)
 2012e80:	94800204 	addi	r18,r18,8
 2012e84:	e0bfc917 	ldw	r2,-220(fp)
 2012e88:	10800044 	addi	r2,r2,1
 2012e8c:	e0bfc915 	stw	r2,-220(fp)
 2012e90:	e0bfc917 	ldw	r2,-220(fp)
 2012e94:	10800210 	cmplti	r2,r2,8
 2012e98:	1000071e 	bne	r2,zero,2012eb8 <___vfiprintf_internal_r+0xf50>
 2012e9c:	e0bfc804 	addi	r2,fp,-224
 2012ea0:	100d883a 	mov	r6,r2
 2012ea4:	e17fe717 	ldw	r5,-100(fp)
 2012ea8:	e13fe617 	ldw	r4,-104(fp)
 2012eac:	2011cec0 	call	2011cec <__sprint_r>
 2012eb0:	1000b41e 	bne	r2,zero,2013184 <___vfiprintf_internal_r+0x121c>
 2012eb4:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2012eb8:	e0ffbf17 	ldw	r3,-260(fp)
 2012ebc:	e0bfc117 	ldw	r2,-252(fp)
 2012ec0:	18a1c83a 	sub	r16,r3,r2
 2012ec4:	0400310e 	bge	zero,r16,2012f8c <___vfiprintf_internal_r+0x1024>
 2012ec8:	00001706 	br	2012f28 <___vfiprintf_internal_r+0xfc0>
 2012ecc:	008080b4 	movhi	r2,514
 2012ed0:	10876884 	addi	r2,r2,7586
 2012ed4:	90800015 	stw	r2,0(r18)
 2012ed8:	00800404 	movi	r2,16
 2012edc:	90800115 	stw	r2,4(r18)
 2012ee0:	e0bfca17 	ldw	r2,-216(fp)
 2012ee4:	10800404 	addi	r2,r2,16
 2012ee8:	e0bfca15 	stw	r2,-216(fp)
 2012eec:	94800204 	addi	r18,r18,8
 2012ef0:	e0bfc917 	ldw	r2,-220(fp)
 2012ef4:	10800044 	addi	r2,r2,1
 2012ef8:	e0bfc915 	stw	r2,-220(fp)
 2012efc:	e0bfc917 	ldw	r2,-220(fp)
 2012f00:	10800210 	cmplti	r2,r2,8
 2012f04:	1000071e 	bne	r2,zero,2012f24 <___vfiprintf_internal_r+0xfbc>
 2012f08:	e0bfc804 	addi	r2,fp,-224
 2012f0c:	100d883a 	mov	r6,r2
 2012f10:	e17fe717 	ldw	r5,-100(fp)
 2012f14:	e13fe617 	ldw	r4,-104(fp)
 2012f18:	2011cec0 	call	2011cec <__sprint_r>
 2012f1c:	10009b1e 	bne	r2,zero,201318c <___vfiprintf_internal_r+0x1224>
 2012f20:	e4bfcb04 	addi	r18,fp,-212
 2012f24:	843ffc04 	addi	r16,r16,-16
 2012f28:	80800448 	cmpgei	r2,r16,17
 2012f2c:	103fe71e 	bne	r2,zero,2012ecc <___vfiprintf_internal_r+0xf64>
 2012f30:	008080b4 	movhi	r2,514
 2012f34:	10876884 	addi	r2,r2,7586
 2012f38:	90800015 	stw	r2,0(r18)
 2012f3c:	8005883a 	mov	r2,r16
 2012f40:	90800115 	stw	r2,4(r18)
 2012f44:	e0bfca17 	ldw	r2,-216(fp)
 2012f48:	8007883a 	mov	r3,r16
 2012f4c:	10c5883a 	add	r2,r2,r3
 2012f50:	e0bfca15 	stw	r2,-216(fp)
 2012f54:	94800204 	addi	r18,r18,8
 2012f58:	e0bfc917 	ldw	r2,-220(fp)
 2012f5c:	10800044 	addi	r2,r2,1
 2012f60:	e0bfc915 	stw	r2,-220(fp)
 2012f64:	e0bfc917 	ldw	r2,-220(fp)
 2012f68:	10800210 	cmplti	r2,r2,8
 2012f6c:	1000071e 	bne	r2,zero,2012f8c <___vfiprintf_internal_r+0x1024>
 2012f70:	e0bfc804 	addi	r2,fp,-224
 2012f74:	100d883a 	mov	r6,r2
 2012f78:	e17fe717 	ldw	r5,-100(fp)
 2012f7c:	e13fe617 	ldw	r4,-104(fp)
 2012f80:	2011cec0 	call	2011cec <__sprint_r>
 2012f84:	1000831e 	bne	r2,zero,2013194 <___vfiprintf_internal_r+0x122c>
 2012f88:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2012f8c:	95000015 	stw	r20,0(r18)
 2012f90:	e0bfc117 	ldw	r2,-252(fp)
 2012f94:	90800115 	stw	r2,4(r18)
 2012f98:	e0ffca17 	ldw	r3,-216(fp)
 2012f9c:	e0bfc117 	ldw	r2,-252(fp)
 2012fa0:	1885883a 	add	r2,r3,r2
 2012fa4:	e0bfca15 	stw	r2,-216(fp)
 2012fa8:	94800204 	addi	r18,r18,8
 2012fac:	e0bfc917 	ldw	r2,-220(fp)
 2012fb0:	10800044 	addi	r2,r2,1
 2012fb4:	e0bfc915 	stw	r2,-220(fp)
 2012fb8:	e0bfc917 	ldw	r2,-220(fp)
 2012fbc:	10800210 	cmplti	r2,r2,8
 2012fc0:	1000071e 	bne	r2,zero,2012fe0 <___vfiprintf_internal_r+0x1078>
 2012fc4:	e0bfc804 	addi	r2,fp,-224
 2012fc8:	100d883a 	mov	r6,r2
 2012fcc:	e17fe717 	ldw	r5,-100(fp)
 2012fd0:	e13fe617 	ldw	r4,-104(fp)
 2012fd4:	2011cec0 	call	2011cec <__sprint_r>
 2012fd8:	1000701e 	bne	r2,zero,201319c <___vfiprintf_internal_r+0x1234>
 2012fdc:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2012fe0:	9880010c 	andi	r2,r19,4
 2012fe4:	10003526 	beq	r2,zero,20130bc <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 2012fe8:	e0ffba17 	ldw	r3,-280(fp)
 2012fec:	e0bfc017 	ldw	r2,-256(fp)
 2012ff0:	18a1c83a 	sub	r16,r3,r2
 2012ff4:	0400310e 	bge	zero,r16,20130bc <___vfiprintf_internal_r+0x1154>
 2012ff8:	00001706 	br	2013058 <___vfiprintf_internal_r+0x10f0>
 2012ffc:	008080b4 	movhi	r2,514
 2013000:	10876484 	addi	r2,r2,7570
 2013004:	90800015 	stw	r2,0(r18)
 2013008:	00800404 	movi	r2,16
 201300c:	90800115 	stw	r2,4(r18)
 2013010:	e0bfca17 	ldw	r2,-216(fp)
 2013014:	10800404 	addi	r2,r2,16
 2013018:	e0bfca15 	stw	r2,-216(fp)
 201301c:	94800204 	addi	r18,r18,8
 2013020:	e0bfc917 	ldw	r2,-220(fp)
 2013024:	10800044 	addi	r2,r2,1
 2013028:	e0bfc915 	stw	r2,-220(fp)
 201302c:	e0bfc917 	ldw	r2,-220(fp)
 2013030:	10800210 	cmplti	r2,r2,8
 2013034:	1000071e 	bne	r2,zero,2013054 <___vfiprintf_internal_r+0x10ec>
 2013038:	e0bfc804 	addi	r2,fp,-224
 201303c:	100d883a 	mov	r6,r2
 2013040:	e17fe717 	ldw	r5,-100(fp)
 2013044:	e13fe617 	ldw	r4,-104(fp)
 2013048:	2011cec0 	call	2011cec <__sprint_r>
 201304c:	1000551e 	bne	r2,zero,20131a4 <___vfiprintf_internal_r+0x123c>
 2013050:	e4bfcb04 	addi	r18,fp,-212
 2013054:	843ffc04 	addi	r16,r16,-16
 2013058:	80800448 	cmpgei	r2,r16,17
 201305c:	103fe71e 	bne	r2,zero,2012ffc <___vfiprintf_internal_r+0x1094>
 2013060:	008080b4 	movhi	r2,514
 2013064:	10876484 	addi	r2,r2,7570
 2013068:	90800015 	stw	r2,0(r18)
 201306c:	8005883a 	mov	r2,r16
 2013070:	90800115 	stw	r2,4(r18)
 2013074:	e0bfca17 	ldw	r2,-216(fp)
 2013078:	8007883a 	mov	r3,r16
 201307c:	10c5883a 	add	r2,r2,r3
 2013080:	e0bfca15 	stw	r2,-216(fp)
 2013084:	94800204 	addi	r18,r18,8
 2013088:	e0bfc917 	ldw	r2,-220(fp)
 201308c:	10800044 	addi	r2,r2,1
 2013090:	e0bfc915 	stw	r2,-220(fp)
 2013094:	e0bfc917 	ldw	r2,-220(fp)
 2013098:	10800210 	cmplti	r2,r2,8
 201309c:	1000071e 	bne	r2,zero,20130bc <___vfiprintf_internal_r+0x1154>
 20130a0:	e0bfc804 	addi	r2,fp,-224
 20130a4:	100d883a 	mov	r6,r2
 20130a8:	e17fe717 	ldw	r5,-100(fp)
 20130ac:	e13fe617 	ldw	r4,-104(fp)
 20130b0:	2011cec0 	call	2011cec <__sprint_r>
 20130b4:	10003d1e 	bne	r2,zero,20131ac <___vfiprintf_internal_r+0x1244>
 20130b8:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 20130bc:	e0ffba17 	ldw	r3,-280(fp)
 20130c0:	e0bfc017 	ldw	r2,-256(fp)
 20130c4:	10c0010e 	bge	r2,r3,20130cc <___vfiprintf_internal_r+0x1164>
 20130c8:	1805883a 	mov	r2,r3
 20130cc:	e0ffb917 	ldw	r3,-284(fp)
 20130d0:	1885883a 	add	r2,r3,r2
 20130d4:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 20130d8:	e0bfca17 	ldw	r2,-216(fp)
 20130dc:	10000626 	beq	r2,zero,20130f8 <___vfiprintf_internal_r+0x1190>
 20130e0:	e0bfc804 	addi	r2,fp,-224
 20130e4:	100d883a 	mov	r6,r2
 20130e8:	e17fe717 	ldw	r5,-100(fp)
 20130ec:	e13fe617 	ldw	r4,-104(fp)
 20130f0:	2011cec0 	call	2011cec <__sprint_r>
 20130f4:	10002f1e 	bne	r2,zero,20131b4 <___vfiprintf_internal_r+0x124c>
 20130f8:	e03fc915 	stw	zero,-220(fp)
 20130fc:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 2013100:	e0bfc317 	ldw	r2,-244(fp)
 2013104:	103bea26 	beq	r2,zero,20120b0 <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 2013108:	e17fc317 	ldw	r5,-244(fp)
 201310c:	e13fe617 	ldw	r4,-104(fp)
 2013110:	200ccf00 	call	200ccf0 <_free_r>
			malloc_buf = NULL;
 2013114:	e03fc315 	stw	zero,-244(fp)
		}
	}
 2013118:	003be506 	br	20120b0 <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 201311c:	0001883a 	nop
 2013120:	00000106 	br	2013128 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2013124:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2013128:	e0bfca17 	ldw	r2,-216(fp)
 201312c:	10000626 	beq	r2,zero,2013148 <___vfiprintf_internal_r+0x11e0>
 2013130:	e0bfc804 	addi	r2,fp,-224
 2013134:	100d883a 	mov	r6,r2
 2013138:	e17fe717 	ldw	r5,-100(fp)
 201313c:	e13fe617 	ldw	r4,-104(fp)
 2013140:	2011cec0 	call	2011cec <__sprint_r>
 2013144:	10001d1e 	bne	r2,zero,20131bc <___vfiprintf_internal_r+0x1254>
 2013148:	e03fc915 	stw	zero,-220(fp)
 201314c:	e4bfcb04 	addi	r18,fp,-212
 2013150:	00001b06 	br	20131c0 <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 2013154:	0001883a 	nop
 2013158:	00001906 	br	20131c0 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 201315c:	0001883a 	nop
 2013160:	00001706 	br	20131c0 <___vfiprintf_internal_r+0x1258>
 2013164:	0001883a 	nop
 2013168:	00001506 	br	20131c0 <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 201316c:	0001883a 	nop
 2013170:	00001306 	br	20131c0 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2013174:	0001883a 	nop
 2013178:	00001106 	br	20131c0 <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 201317c:	0001883a 	nop
 2013180:	00000f06 	br	20131c0 <___vfiprintf_internal_r+0x1258>
 2013184:	0001883a 	nop
 2013188:	00000d06 	br	20131c0 <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 201318c:	0001883a 	nop
 2013190:	00000b06 	br	20131c0 <___vfiprintf_internal_r+0x1258>
 2013194:	0001883a 	nop
 2013198:	00000906 	br	20131c0 <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 201319c:	0001883a 	nop
 20131a0:	00000706 	br	20131c0 <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 20131a4:	0001883a 	nop
 20131a8:	00000506 	br	20131c0 <___vfiprintf_internal_r+0x1258>
 20131ac:	0001883a 	nop
 20131b0:	00000306 	br	20131c0 <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 20131b4:	0001883a 	nop
 20131b8:	00000106 	br	20131c0 <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 20131bc:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 20131c0:	e0bfc317 	ldw	r2,-244(fp)
 20131c4:	10000326 	beq	r2,zero,20131d4 <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 20131c8:	e17fc317 	ldw	r5,-244(fp)
 20131cc:	e13fe617 	ldw	r4,-104(fp)
 20131d0:	200ccf00 	call	200ccf0 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 20131d4:	e0bfe717 	ldw	r2,-100(fp)
 20131d8:	1080030b 	ldhu	r2,12(r2)
 20131dc:	10bfffcc 	andi	r2,r2,65535
 20131e0:	1080100c 	andi	r2,r2,64
 20131e4:	1000021e 	bne	r2,zero,20131f0 <___vfiprintf_internal_r+0x1288>
 20131e8:	e0bfb917 	ldw	r2,-284(fp)
 20131ec:	00000206 	br	20131f8 <___vfiprintf_internal_r+0x1290>
 20131f0:	00bfffc4 	movi	r2,-1
 20131f4:	0001883a 	nop
	/* NOTREACHED */
}
 20131f8:	e6fff804 	addi	sp,fp,-32
 20131fc:	dfc00917 	ldw	ra,36(sp)
 2013200:	df000817 	ldw	fp,32(sp)
 2013204:	ddc00717 	ldw	r23,28(sp)
 2013208:	dd800617 	ldw	r22,24(sp)
 201320c:	dd400517 	ldw	r21,20(sp)
 2013210:	dd000417 	ldw	r20,16(sp)
 2013214:	dcc00317 	ldw	r19,12(sp)
 2013218:	dc800217 	ldw	r18,8(sp)
 201321c:	dc400117 	ldw	r17,4(sp)
 2013220:	dc000017 	ldw	r16,0(sp)
 2013224:	dec00a04 	addi	sp,sp,40
 2013228:	f800283a 	ret

0201322c <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 201322c:	defff904 	addi	sp,sp,-28
 2013230:	dfc00615 	stw	ra,24(sp)
 2013234:	df000515 	stw	fp,20(sp)
 2013238:	df000504 	addi	fp,sp,20
 201323c:	e13ffc15 	stw	r4,-16(fp)
 2013240:	e17ffd15 	stw	r5,-12(fp)
 2013244:	e1bffe15 	stw	r6,-8(fp)
 2013248:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 201324c:	d0279515 	stw	zero,-25004(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 2013250:	e1bfff17 	ldw	r6,-4(fp)
 2013254:	e17ffe17 	ldw	r5,-8(fp)
 2013258:	e13ffd17 	ldw	r4,-12(fp)
 201325c:	20165200 	call	2016520 <write>
 2013260:	e0bffb15 	stw	r2,-20(fp)
 2013264:	e0bffb17 	ldw	r2,-20(fp)
 2013268:	10bfffd8 	cmpnei	r2,r2,-1
 201326c:	1000051e 	bne	r2,zero,2013284 <_write_r+0x58>
 2013270:	d0a79517 	ldw	r2,-25004(gp)
 2013274:	10000326 	beq	r2,zero,2013284 <_write_r+0x58>
    ptr->_errno = errno;
 2013278:	d0e79517 	ldw	r3,-25004(gp)
 201327c:	e0bffc17 	ldw	r2,-16(fp)
 2013280:	10c00015 	stw	r3,0(r2)
  return ret;
 2013284:	e0bffb17 	ldw	r2,-20(fp)
}
 2013288:	e037883a 	mov	sp,fp
 201328c:	dfc00117 	ldw	ra,4(sp)
 2013290:	df000017 	ldw	fp,0(sp)
 2013294:	dec00204 	addi	sp,sp,8
 2013298:	f800283a 	ret

0201329c <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 201329c:	defffb04 	addi	sp,sp,-20
 20132a0:	dfc00415 	stw	ra,16(sp)
 20132a4:	df000315 	stw	fp,12(sp)
 20132a8:	df000304 	addi	fp,sp,12
 20132ac:	e13ffe15 	stw	r4,-8(fp)
 20132b0:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 20132b4:	d0279515 	stw	zero,-25004(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 20132b8:	e13fff17 	ldw	r4,-4(fp)
 20132bc:	2015d180 	call	2015d18 <close>
 20132c0:	e0bffd15 	stw	r2,-12(fp)
 20132c4:	e0bffd17 	ldw	r2,-12(fp)
 20132c8:	10bfffd8 	cmpnei	r2,r2,-1
 20132cc:	1000051e 	bne	r2,zero,20132e4 <_close_r+0x48>
 20132d0:	d0a79517 	ldw	r2,-25004(gp)
 20132d4:	10000326 	beq	r2,zero,20132e4 <_close_r+0x48>
    ptr->_errno = errno;
 20132d8:	d0e79517 	ldw	r3,-25004(gp)
 20132dc:	e0bffe17 	ldw	r2,-8(fp)
 20132e0:	10c00015 	stw	r3,0(r2)
  return ret;
 20132e4:	e0bffd17 	ldw	r2,-12(fp)
}
 20132e8:	e037883a 	mov	sp,fp
 20132ec:	dfc00117 	ldw	ra,4(sp)
 20132f0:	df000017 	ldw	fp,0(sp)
 20132f4:	dec00204 	addi	sp,sp,8
 20132f8:	f800283a 	ret

020132fc <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 20132fc:	defff504 	addi	sp,sp,-44
 2013300:	dfc00a15 	stw	ra,40(sp)
 2013304:	df000915 	stw	fp,36(sp)
 2013308:	df000904 	addi	fp,sp,36
 201330c:	e13ffd15 	stw	r4,-12(fp)
 2013310:	e17ffe15 	stw	r5,-8(fp)
 2013314:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 2013318:	e0fffe17 	ldw	r3,-8(fp)
 201331c:	e0bfff17 	ldw	r2,-4(fp)
 2013320:	1885383a 	mul	r2,r3,r2
 2013324:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 2013328:	e17ff817 	ldw	r5,-32(fp)
 201332c:	e13ffd17 	ldw	r4,-12(fp)
 2013330:	200e3300 	call	200e330 <_malloc_r>
 2013334:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 2013338:	e0bff917 	ldw	r2,-28(fp)
 201333c:	1000021e 	bne	r2,zero,2013348 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 2013340:	0005883a 	mov	r2,zero
 2013344:	00004106 	br	201344c <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 2013348:	e0bff917 	ldw	r2,-28(fp)
 201334c:	10bffe04 	addi	r2,r2,-8
 2013350:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 2013354:	e0bffa17 	ldw	r2,-24(fp)
 2013358:	10c00117 	ldw	r3,4(r2)
 201335c:	00bfff04 	movi	r2,-4
 2013360:	1884703a 	and	r2,r3,r2
 2013364:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 2013368:	e0bffb17 	ldw	r2,-20(fp)
 201336c:	10bfff04 	addi	r2,r2,-4
 2013370:	e0bffc15 	stw	r2,-16(fp)
 2013374:	e0bffc17 	ldw	r2,-16(fp)
 2013378:	10800968 	cmpgeui	r2,r2,37
 201337c:	10002e1e 	bne	r2,zero,2013438 <_calloc_r+0x13c>
 2013380:	e0bff917 	ldw	r2,-28(fp)
 2013384:	e0bff715 	stw	r2,-36(fp)
 2013388:	e0bffc17 	ldw	r2,-16(fp)
 201338c:	10800530 	cmpltui	r2,r2,20
 2013390:	10001e1e 	bne	r2,zero,201340c <_calloc_r+0x110>
 2013394:	e0bff717 	ldw	r2,-36(fp)
 2013398:	10c00104 	addi	r3,r2,4
 201339c:	e0fff715 	stw	r3,-36(fp)
 20133a0:	10000015 	stw	zero,0(r2)
 20133a4:	e0bff717 	ldw	r2,-36(fp)
 20133a8:	10c00104 	addi	r3,r2,4
 20133ac:	e0fff715 	stw	r3,-36(fp)
 20133b0:	10000015 	stw	zero,0(r2)
 20133b4:	e0bffc17 	ldw	r2,-16(fp)
 20133b8:	10800730 	cmpltui	r2,r2,28
 20133bc:	1000131e 	bne	r2,zero,201340c <_calloc_r+0x110>
 20133c0:	e0bff717 	ldw	r2,-36(fp)
 20133c4:	10c00104 	addi	r3,r2,4
 20133c8:	e0fff715 	stw	r3,-36(fp)
 20133cc:	10000015 	stw	zero,0(r2)
 20133d0:	e0bff717 	ldw	r2,-36(fp)
 20133d4:	10c00104 	addi	r3,r2,4
 20133d8:	e0fff715 	stw	r3,-36(fp)
 20133dc:	10000015 	stw	zero,0(r2)
 20133e0:	e0bffc17 	ldw	r2,-16(fp)
 20133e4:	10800930 	cmpltui	r2,r2,36
 20133e8:	1000081e 	bne	r2,zero,201340c <_calloc_r+0x110>
 20133ec:	e0bff717 	ldw	r2,-36(fp)
 20133f0:	10c00104 	addi	r3,r2,4
 20133f4:	e0fff715 	stw	r3,-36(fp)
 20133f8:	10000015 	stw	zero,0(r2)
 20133fc:	e0bff717 	ldw	r2,-36(fp)
 2013400:	10c00104 	addi	r3,r2,4
 2013404:	e0fff715 	stw	r3,-36(fp)
 2013408:	10000015 	stw	zero,0(r2)
 201340c:	e0bff717 	ldw	r2,-36(fp)
 2013410:	10c00104 	addi	r3,r2,4
 2013414:	e0fff715 	stw	r3,-36(fp)
 2013418:	10000015 	stw	zero,0(r2)
 201341c:	e0bff717 	ldw	r2,-36(fp)
 2013420:	10c00104 	addi	r3,r2,4
 2013424:	e0fff715 	stw	r3,-36(fp)
 2013428:	10000015 	stw	zero,0(r2)
 201342c:	e0bff717 	ldw	r2,-36(fp)
 2013430:	10000015 	stw	zero,0(r2)
 2013434:	00000406 	br	2013448 <_calloc_r+0x14c>
 2013438:	e1bffc17 	ldw	r6,-16(fp)
 201343c:	000b883a 	mov	r5,zero
 2013440:	e13ff917 	ldw	r4,-28(fp)
 2013444:	20078500 	call	2007850 <memset>
    return mem;
 2013448:	e0bff917 	ldw	r2,-28(fp)
  }
}
 201344c:	e037883a 	mov	sp,fp
 2013450:	dfc00117 	ldw	ra,4(sp)
 2013454:	df000017 	ldw	fp,0(sp)
 2013458:	dec00204 	addi	sp,sp,8
 201345c:	f800283a 	ret

02013460 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 2013460:	defffa04 	addi	sp,sp,-24
 2013464:	dfc00515 	stw	ra,20(sp)
 2013468:	df000415 	stw	fp,16(sp)
 201346c:	dc000315 	stw	r16,12(sp)
 2013470:	df000404 	addi	fp,sp,16
 2013474:	e13ffe15 	stw	r4,-8(fp)
 2013478:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 201347c:	8000021e 	bne	r16,zero,2013488 <_fclose_r+0x28>
    return (0);			/* on NULL */
 2013480:	0005883a 	mov	r2,zero
 2013484:	00003b06 	br	2013574 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 2013488:	e0bffe17 	ldw	r2,-8(fp)
 201348c:	e0bffd15 	stw	r2,-12(fp)
 2013490:	e0bffd17 	ldw	r2,-12(fp)
 2013494:	10000526 	beq	r2,zero,20134ac <_fclose_r+0x4c>
 2013498:	e0bffd17 	ldw	r2,-12(fp)
 201349c:	10800e17 	ldw	r2,56(r2)
 20134a0:	1000021e 	bne	r2,zero,20134ac <_fclose_r+0x4c>
 20134a4:	e13ffd17 	ldw	r4,-12(fp)
 20134a8:	200cad00 	call	200cad0 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 20134ac:	8080030b 	ldhu	r2,12(r16)
 20134b0:	10bfffcc 	andi	r2,r2,65535
 20134b4:	10a0001c 	xori	r2,r2,32768
 20134b8:	10a00004 	addi	r2,r2,-32768
 20134bc:	1000021e 	bne	r2,zero,20134c8 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 20134c0:	0005883a 	mov	r2,zero
 20134c4:	00002b06 	br	2013574 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 20134c8:	800b883a 	mov	r5,r16
 20134cc:	e13ffe17 	ldw	r4,-8(fp)
 20134d0:	200c34c0 	call	200c34c <__sflush_r>
 20134d4:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 20134d8:	80800b17 	ldw	r2,44(r16)
 20134dc:	10000826 	beq	r2,zero,2013500 <_fclose_r+0xa0>
 20134e0:	80800b17 	ldw	r2,44(r16)
 20134e4:	80c00717 	ldw	r3,28(r16)
 20134e8:	180b883a 	mov	r5,r3
 20134ec:	e13ffe17 	ldw	r4,-8(fp)
 20134f0:	103ee83a 	callr	r2
 20134f4:	1000020e 	bge	r2,zero,2013500 <_fclose_r+0xa0>
    r = EOF;
 20134f8:	00bfffc4 	movi	r2,-1
 20134fc:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 2013500:	8080030b 	ldhu	r2,12(r16)
 2013504:	10bfffcc 	andi	r2,r2,65535
 2013508:	1080200c 	andi	r2,r2,128
 201350c:	10000426 	beq	r2,zero,2013520 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 2013510:	80800417 	ldw	r2,16(r16)
 2013514:	100b883a 	mov	r5,r2
 2013518:	e13ffe17 	ldw	r4,-8(fp)
 201351c:	200ccf00 	call	200ccf0 <_free_r>
  if (HASUB (fp))
 2013520:	80800c17 	ldw	r2,48(r16)
 2013524:	10000826 	beq	r2,zero,2013548 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 2013528:	80c00c17 	ldw	r3,48(r16)
 201352c:	80801004 	addi	r2,r16,64
 2013530:	18800426 	beq	r3,r2,2013544 <_fclose_r+0xe4>
 2013534:	80800c17 	ldw	r2,48(r16)
 2013538:	100b883a 	mov	r5,r2
 201353c:	e13ffe17 	ldw	r4,-8(fp)
 2013540:	200ccf00 	call	200ccf0 <_free_r>
 2013544:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 2013548:	80801117 	ldw	r2,68(r16)
 201354c:	10000526 	beq	r2,zero,2013564 <_fclose_r+0x104>
    FREELB (rptr, fp);
 2013550:	80801117 	ldw	r2,68(r16)
 2013554:	100b883a 	mov	r5,r2
 2013558:	e13ffe17 	ldw	r4,-8(fp)
 201355c:	200ccf00 	call	200ccf0 <_free_r>
 2013560:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 2013564:	200cba80 	call	200cba8 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 2013568:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 201356c:	200cbc80 	call	200cbc8 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 2013570:	e0bffc17 	ldw	r2,-16(fp)
}
 2013574:	e6ffff04 	addi	sp,fp,-4
 2013578:	dfc00217 	ldw	ra,8(sp)
 201357c:	df000117 	ldw	fp,4(sp)
 2013580:	dc000017 	ldw	r16,0(sp)
 2013584:	dec00304 	addi	sp,sp,12
 2013588:	f800283a 	ret

0201358c <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 201358c:	defffe04 	addi	sp,sp,-8
 2013590:	dfc00115 	stw	ra,4(sp)
 2013594:	df000015 	stw	fp,0(sp)
 2013598:	d839883a 	mov	fp,sp
 201359c:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 20135a0:	d0a02e17 	ldw	r2,-32584(gp)
 20135a4:	180b883a 	mov	r5,r3
 20135a8:	1009883a 	mov	r4,r2
 20135ac:	20134600 	call	2013460 <_fclose_r>
}
 20135b0:	e037883a 	mov	sp,fp
 20135b4:	dfc00117 	ldw	ra,4(sp)
 20135b8:	df000017 	ldw	fp,0(sp)
 20135bc:	dec00204 	addi	sp,sp,8
 20135c0:	f800283a 	ret

020135c4 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 20135c4:	defff804 	addi	sp,sp,-32
 20135c8:	dfc00715 	stw	ra,28(sp)
 20135cc:	df000615 	stw	fp,24(sp)
 20135d0:	df000604 	addi	fp,sp,24
 20135d4:	e13ffd15 	stw	r4,-12(fp)
 20135d8:	e17ffe15 	stw	r5,-8(fp)
 20135dc:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 20135e0:	200dc540 	call	200dc54 <__locale_mb_cur_max>
 20135e4:	10800058 	cmpnei	r2,r2,1
 20135e8:	10000a1e 	bne	r2,zero,2013614 <__fputwc+0x50>
 20135ec:	e0bffe17 	ldw	r2,-8(fp)
 20135f0:	0080080e 	bge	zero,r2,2013614 <__fputwc+0x50>
 20135f4:	e0bffe17 	ldw	r2,-8(fp)
 20135f8:	10804008 	cmpgei	r2,r2,256
 20135fc:	1000051e 	bne	r2,zero,2013614 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 2013600:	e0bffe17 	ldw	r2,-8(fp)
 2013604:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 2013608:	00800044 	movi	r2,1
 201360c:	e0bffb15 	stw	r2,-20(fp)
 2013610:	00001406 	br	2013664 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 2013614:	e0bfff17 	ldw	r2,-4(fp)
 2013618:	10c01704 	addi	r3,r2,92
 201361c:	e0bffc04 	addi	r2,fp,-16
 2013620:	180f883a 	mov	r7,r3
 2013624:	e1bffe17 	ldw	r6,-8(fp)
 2013628:	100b883a 	mov	r5,r2
 201362c:	e13ffd17 	ldw	r4,-12(fp)
 2013630:	2013bf80 	call	2013bf8 <_wcrtomb_r>
 2013634:	e0bffb15 	stw	r2,-20(fp)
 2013638:	e0bffb17 	ldw	r2,-20(fp)
 201363c:	10bfffd8 	cmpnei	r2,r2,-1
 2013640:	1000081e 	bne	r2,zero,2013664 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 2013644:	e0bfff17 	ldw	r2,-4(fp)
 2013648:	1080030b 	ldhu	r2,12(r2)
 201364c:	10801014 	ori	r2,r2,64
 2013650:	1007883a 	mov	r3,r2
 2013654:	e0bfff17 	ldw	r2,-4(fp)
 2013658:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 201365c:	00bfffc4 	movi	r2,-1
 2013660:	00005006 	br	20137a4 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 2013664:	e03ffa15 	stw	zero,-24(fp)
 2013668:	00004a06 	br	2013794 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 201366c:	e0bfff17 	ldw	r2,-4(fp)
 2013670:	10800217 	ldw	r2,8(r2)
 2013674:	10ffffc4 	addi	r3,r2,-1
 2013678:	e0bfff17 	ldw	r2,-4(fp)
 201367c:	10c00215 	stw	r3,8(r2)
 2013680:	e0bfff17 	ldw	r2,-4(fp)
 2013684:	10800217 	ldw	r2,8(r2)
 2013688:	10002c0e 	bge	r2,zero,201373c <__fputwc+0x178>
 201368c:	e0bfff17 	ldw	r2,-4(fp)
 2013690:	10c00217 	ldw	r3,8(r2)
 2013694:	e0bfff17 	ldw	r2,-4(fp)
 2013698:	10800617 	ldw	r2,24(r2)
 201369c:	18801c16 	blt	r3,r2,2013710 <__fputwc+0x14c>
 20136a0:	e0bfff17 	ldw	r2,-4(fp)
 20136a4:	10800017 	ldw	r2,0(r2)
 20136a8:	e13ffc04 	addi	r4,fp,-16
 20136ac:	e0fffa17 	ldw	r3,-24(fp)
 20136b0:	20c7883a 	add	r3,r4,r3
 20136b4:	18c00003 	ldbu	r3,0(r3)
 20136b8:	10c00005 	stb	r3,0(r2)
 20136bc:	e0bfff17 	ldw	r2,-4(fp)
 20136c0:	10800017 	ldw	r2,0(r2)
 20136c4:	10800003 	ldbu	r2,0(r2)
 20136c8:	10803fcc 	andi	r2,r2,255
 20136cc:	108002a0 	cmpeqi	r2,r2,10
 20136d0:	1000091e 	bne	r2,zero,20136f8 <__fputwc+0x134>
 20136d4:	e0bfff17 	ldw	r2,-4(fp)
 20136d8:	10800017 	ldw	r2,0(r2)
 20136dc:	11000044 	addi	r4,r2,1
 20136e0:	e0ffff17 	ldw	r3,-4(fp)
 20136e4:	19000015 	stw	r4,0(r3)
 20136e8:	10800003 	ldbu	r2,0(r2)
 20136ec:	10803fcc 	andi	r2,r2,255
 20136f0:	10bfffe0 	cmpeqi	r2,r2,-1
 20136f4:	00002006 	br	2013778 <__fputwc+0x1b4>
 20136f8:	e1bfff17 	ldw	r6,-4(fp)
 20136fc:	01400284 	movi	r5,10
 2013700:	e13ffd17 	ldw	r4,-12(fp)
 2013704:	2013a500 	call	2013a50 <__swbuf_r>
 2013708:	10bfffe0 	cmpeqi	r2,r2,-1
 201370c:	00001a06 	br	2013778 <__fputwc+0x1b4>
 2013710:	e0fffc04 	addi	r3,fp,-16
 2013714:	e0bffa17 	ldw	r2,-24(fp)
 2013718:	1885883a 	add	r2,r3,r2
 201371c:	10800003 	ldbu	r2,0(r2)
 2013720:	10803fcc 	andi	r2,r2,255
 2013724:	e1bfff17 	ldw	r6,-4(fp)
 2013728:	100b883a 	mov	r5,r2
 201372c:	e13ffd17 	ldw	r4,-12(fp)
 2013730:	2013a500 	call	2013a50 <__swbuf_r>
 2013734:	10bfffe0 	cmpeqi	r2,r2,-1
 2013738:	00000f06 	br	2013778 <__fputwc+0x1b4>
 201373c:	e0bfff17 	ldw	r2,-4(fp)
 2013740:	10800017 	ldw	r2,0(r2)
 2013744:	e13ffc04 	addi	r4,fp,-16
 2013748:	e0fffa17 	ldw	r3,-24(fp)
 201374c:	20c7883a 	add	r3,r4,r3
 2013750:	18c00003 	ldbu	r3,0(r3)
 2013754:	10c00005 	stb	r3,0(r2)
 2013758:	e0bfff17 	ldw	r2,-4(fp)
 201375c:	10800017 	ldw	r2,0(r2)
 2013760:	11000044 	addi	r4,r2,1
 2013764:	e0ffff17 	ldw	r3,-4(fp)
 2013768:	19000015 	stw	r4,0(r3)
 201376c:	10800003 	ldbu	r2,0(r2)
 2013770:	10803fcc 	andi	r2,r2,255
 2013774:	10bfffe0 	cmpeqi	r2,r2,-1
 2013778:	10803fcc 	andi	r2,r2,255
 201377c:	10000226 	beq	r2,zero,2013788 <__fputwc+0x1c4>
      return WEOF;
 2013780:	00bfffc4 	movi	r2,-1
 2013784:	00000706 	br	20137a4 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 2013788:	e0bffa17 	ldw	r2,-24(fp)
 201378c:	10800044 	addi	r2,r2,1
 2013790:	e0bffa15 	stw	r2,-24(fp)
 2013794:	e0fffa17 	ldw	r3,-24(fp)
 2013798:	e0bffb17 	ldw	r2,-20(fp)
 201379c:	18bfb336 	bltu	r3,r2,201366c <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 20137a0:	e0bffe17 	ldw	r2,-8(fp)
}
 20137a4:	e037883a 	mov	sp,fp
 20137a8:	dfc00117 	ldw	ra,4(sp)
 20137ac:	df000017 	ldw	fp,0(sp)
 20137b0:	dec00204 	addi	sp,sp,8
 20137b4:	f800283a 	ret

020137b8 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 20137b8:	defffa04 	addi	sp,sp,-24
 20137bc:	dfc00515 	stw	ra,20(sp)
 20137c0:	df000415 	stw	fp,16(sp)
 20137c4:	df000404 	addi	fp,sp,16
 20137c8:	e13ffd15 	stw	r4,-12(fp)
 20137cc:	e17ffe15 	stw	r5,-8(fp)
 20137d0:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 20137d4:	e0bfff17 	ldw	r2,-4(fp)
 20137d8:	1080030b 	ldhu	r2,12(r2)
 20137dc:	10bfffcc 	andi	r2,r2,65535
 20137e0:	1088000c 	andi	r2,r2,8192
 20137e4:	10000b1e 	bne	r2,zero,2013814 <_fputwc_r+0x5c>
 20137e8:	e0bfff17 	ldw	r2,-4(fp)
 20137ec:	1080030b 	ldhu	r2,12(r2)
 20137f0:	10880014 	ori	r2,r2,8192
 20137f4:	1007883a 	mov	r3,r2
 20137f8:	e0bfff17 	ldw	r2,-4(fp)
 20137fc:	10c0030d 	sth	r3,12(r2)
 2013800:	e0bfff17 	ldw	r2,-4(fp)
 2013804:	10801917 	ldw	r2,100(r2)
 2013808:	10c80014 	ori	r3,r2,8192
 201380c:	e0bfff17 	ldw	r2,-4(fp)
 2013810:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 2013814:	e1bfff17 	ldw	r6,-4(fp)
 2013818:	e17ffe17 	ldw	r5,-8(fp)
 201381c:	e13ffd17 	ldw	r4,-12(fp)
 2013820:	20135c40 	call	20135c4 <__fputwc>
 2013824:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 2013828:	e0bffc17 	ldw	r2,-16(fp)
}
 201382c:	e037883a 	mov	sp,fp
 2013830:	dfc00117 	ldw	ra,4(sp)
 2013834:	df000017 	ldw	fp,0(sp)
 2013838:	dec00204 	addi	sp,sp,8
 201383c:	f800283a 	ret

02013840 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 2013840:	defffa04 	addi	sp,sp,-24
 2013844:	dfc00515 	stw	ra,20(sp)
 2013848:	df000415 	stw	fp,16(sp)
 201384c:	df000404 	addi	fp,sp,16
 2013850:	e13ffe15 	stw	r4,-8(fp)
 2013854:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 2013858:	d0a02e17 	ldw	r2,-32584(gp)
 201385c:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 2013860:	e0bffc17 	ldw	r2,-16(fp)
 2013864:	e0bffd15 	stw	r2,-12(fp)
 2013868:	e0bffd17 	ldw	r2,-12(fp)
 201386c:	10000526 	beq	r2,zero,2013884 <fputwc+0x44>
 2013870:	e0bffd17 	ldw	r2,-12(fp)
 2013874:	10800e17 	ldw	r2,56(r2)
 2013878:	1000021e 	bne	r2,zero,2013884 <fputwc+0x44>
 201387c:	e13ffd17 	ldw	r4,-12(fp)
 2013880:	200cad00 	call	200cad0 <__sinit>
  return _fputwc_r (reent, wc, fp);
 2013884:	e1bfff17 	ldw	r6,-4(fp)
 2013888:	e17ffe17 	ldw	r5,-8(fp)
 201388c:	e13ffc17 	ldw	r4,-16(fp)
 2013890:	20137b80 	call	20137b8 <_fputwc_r>
}
 2013894:	e037883a 	mov	sp,fp
 2013898:	dfc00117 	ldw	ra,4(sp)
 201389c:	df000017 	ldw	fp,0(sp)
 20138a0:	dec00204 	addi	sp,sp,8
 20138a4:	f800283a 	ret

020138a8 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 20138a8:	defffa04 	addi	sp,sp,-24
 20138ac:	dfc00515 	stw	ra,20(sp)
 20138b0:	df000415 	stw	fp,16(sp)
 20138b4:	df000404 	addi	fp,sp,16
 20138b8:	e13ffd15 	stw	r4,-12(fp)
 20138bc:	e17ffe15 	stw	r5,-8(fp)
 20138c0:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 20138c4:	d0279515 	stw	zero,-25004(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 20138c8:	e17fff17 	ldw	r5,-4(fp)
 20138cc:	e13ffe17 	ldw	r4,-8(fp)
 20138d0:	2015e500 	call	2015e50 <fstat>
 20138d4:	e0bffc15 	stw	r2,-16(fp)
 20138d8:	e0bffc17 	ldw	r2,-16(fp)
 20138dc:	10bfffd8 	cmpnei	r2,r2,-1
 20138e0:	1000051e 	bne	r2,zero,20138f8 <_fstat_r+0x50>
 20138e4:	d0a79517 	ldw	r2,-25004(gp)
 20138e8:	10000326 	beq	r2,zero,20138f8 <_fstat_r+0x50>
    ptr->_errno = errno;
 20138ec:	d0e79517 	ldw	r3,-25004(gp)
 20138f0:	e0bffd17 	ldw	r2,-12(fp)
 20138f4:	10c00015 	stw	r3,0(r2)
  return ret;
 20138f8:	e0bffc17 	ldw	r2,-16(fp)
}
 20138fc:	e037883a 	mov	sp,fp
 2013900:	dfc00117 	ldw	ra,4(sp)
 2013904:	df000017 	ldw	fp,0(sp)
 2013908:	dec00204 	addi	sp,sp,8
 201390c:	f800283a 	ret

02013910 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2013910:	defffb04 	addi	sp,sp,-20
 2013914:	dfc00415 	stw	ra,16(sp)
 2013918:	df000315 	stw	fp,12(sp)
 201391c:	df000304 	addi	fp,sp,12
 2013920:	e13ffe15 	stw	r4,-8(fp)
 2013924:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2013928:	d0279515 	stw	zero,-25004(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 201392c:	e13fff17 	ldw	r4,-4(fp)
 2013930:	2015f3c0 	call	2015f3c <isatty>
 2013934:	e0bffd15 	stw	r2,-12(fp)
 2013938:	e0bffd17 	ldw	r2,-12(fp)
 201393c:	10bfffd8 	cmpnei	r2,r2,-1
 2013940:	1000051e 	bne	r2,zero,2013958 <_isatty_r+0x48>
 2013944:	d0a79517 	ldw	r2,-25004(gp)
 2013948:	10000326 	beq	r2,zero,2013958 <_isatty_r+0x48>
    ptr->_errno = errno;
 201394c:	d0e79517 	ldw	r3,-25004(gp)
 2013950:	e0bffe17 	ldw	r2,-8(fp)
 2013954:	10c00015 	stw	r3,0(r2)
  return ret;
 2013958:	e0bffd17 	ldw	r2,-12(fp)
}
 201395c:	e037883a 	mov	sp,fp
 2013960:	dfc00117 	ldw	ra,4(sp)
 2013964:	df000017 	ldw	fp,0(sp)
 2013968:	dec00204 	addi	sp,sp,8
 201396c:	f800283a 	ret

02013970 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 2013970:	defff904 	addi	sp,sp,-28
 2013974:	dfc00615 	stw	ra,24(sp)
 2013978:	df000515 	stw	fp,20(sp)
 201397c:	df000504 	addi	fp,sp,20
 2013980:	e13ffc15 	stw	r4,-16(fp)
 2013984:	e17ffd15 	stw	r5,-12(fp)
 2013988:	e1bffe15 	stw	r6,-8(fp)
 201398c:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 2013990:	d0279515 	stw	zero,-25004(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 2013994:	e1bfff17 	ldw	r6,-4(fp)
 2013998:	e17ffe17 	ldw	r5,-8(fp)
 201399c:	e13ffd17 	ldw	r4,-12(fp)
 20139a0:	20161080 	call	2016108 <lseek>
 20139a4:	e0bffb15 	stw	r2,-20(fp)
 20139a8:	e0bffb17 	ldw	r2,-20(fp)
 20139ac:	10bfffd8 	cmpnei	r2,r2,-1
 20139b0:	1000051e 	bne	r2,zero,20139c8 <_lseek_r+0x58>
 20139b4:	d0a79517 	ldw	r2,-25004(gp)
 20139b8:	10000326 	beq	r2,zero,20139c8 <_lseek_r+0x58>
    ptr->_errno = errno;
 20139bc:	d0e79517 	ldw	r3,-25004(gp)
 20139c0:	e0bffc17 	ldw	r2,-16(fp)
 20139c4:	10c00015 	stw	r3,0(r2)
  return ret;
 20139c8:	e0bffb17 	ldw	r2,-20(fp)
}
 20139cc:	e037883a 	mov	sp,fp
 20139d0:	dfc00117 	ldw	ra,4(sp)
 20139d4:	df000017 	ldw	fp,0(sp)
 20139d8:	dec00204 	addi	sp,sp,8
 20139dc:	f800283a 	ret

020139e0 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 20139e0:	defff904 	addi	sp,sp,-28
 20139e4:	dfc00615 	stw	ra,24(sp)
 20139e8:	df000515 	stw	fp,20(sp)
 20139ec:	df000504 	addi	fp,sp,20
 20139f0:	e13ffc15 	stw	r4,-16(fp)
 20139f4:	e17ffd15 	stw	r5,-12(fp)
 20139f8:	e1bffe15 	stw	r6,-8(fp)
 20139fc:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2013a00:	d0279515 	stw	zero,-25004(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 2013a04:	e1bfff17 	ldw	r6,-4(fp)
 2013a08:	e17ffe17 	ldw	r5,-8(fp)
 2013a0c:	e13ffd17 	ldw	r4,-12(fp)
 2013a10:	20162d40 	call	20162d4 <read>
 2013a14:	e0bffb15 	stw	r2,-20(fp)
 2013a18:	e0bffb17 	ldw	r2,-20(fp)
 2013a1c:	10bfffd8 	cmpnei	r2,r2,-1
 2013a20:	1000051e 	bne	r2,zero,2013a38 <_read_r+0x58>
 2013a24:	d0a79517 	ldw	r2,-25004(gp)
 2013a28:	10000326 	beq	r2,zero,2013a38 <_read_r+0x58>
    ptr->_errno = errno;
 2013a2c:	d0e79517 	ldw	r3,-25004(gp)
 2013a30:	e0bffc17 	ldw	r2,-16(fp)
 2013a34:	10c00015 	stw	r3,0(r2)
  return ret;
 2013a38:	e0bffb17 	ldw	r2,-20(fp)
}
 2013a3c:	e037883a 	mov	sp,fp
 2013a40:	dfc00117 	ldw	ra,4(sp)
 2013a44:	df000017 	ldw	fp,0(sp)
 2013a48:	dec00204 	addi	sp,sp,8
 2013a4c:	f800283a 	ret

02013a50 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 2013a50:	defff904 	addi	sp,sp,-28
 2013a54:	dfc00615 	stw	ra,24(sp)
 2013a58:	df000515 	stw	fp,20(sp)
 2013a5c:	dc800415 	stw	r18,16(sp)
 2013a60:	dc400315 	stw	r17,12(sp)
 2013a64:	dc000215 	stw	r16,8(sp)
 2013a68:	df000504 	addi	fp,sp,20
 2013a6c:	e13ffc15 	stw	r4,-16(fp)
 2013a70:	2825883a 	mov	r18,r5
 2013a74:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 2013a78:	e0bffc17 	ldw	r2,-16(fp)
 2013a7c:	e0bffb15 	stw	r2,-20(fp)
 2013a80:	e0bffb17 	ldw	r2,-20(fp)
 2013a84:	10000526 	beq	r2,zero,2013a9c <__swbuf_r+0x4c>
 2013a88:	e0bffb17 	ldw	r2,-20(fp)
 2013a8c:	10800e17 	ldw	r2,56(r2)
 2013a90:	1000021e 	bne	r2,zero,2013a9c <__swbuf_r+0x4c>
 2013a94:	e13ffb17 	ldw	r4,-20(fp)
 2013a98:	200cad00 	call	200cad0 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 2013a9c:	80800617 	ldw	r2,24(r16)
 2013aa0:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 2013aa4:	8080030b 	ldhu	r2,12(r16)
 2013aa8:	10bfffcc 	andi	r2,r2,65535
 2013aac:	1080020c 	andi	r2,r2,8
 2013ab0:	10000226 	beq	r2,zero,2013abc <__swbuf_r+0x6c>
 2013ab4:	80800417 	ldw	r2,16(r16)
 2013ab8:	1000061e 	bne	r2,zero,2013ad4 <__swbuf_r+0x84>
 2013abc:	800b883a 	mov	r5,r16
 2013ac0:	e13ffc17 	ldw	r4,-16(fp)
 2013ac4:	200a2800 	call	200a280 <__swsetup_r>
 2013ac8:	10000226 	beq	r2,zero,2013ad4 <__swbuf_r+0x84>
    return EOF;
 2013acc:	00bfffc4 	movi	r2,-1
 2013ad0:	00003106 	br	2013b98 <__swbuf_r+0x148>
  c = (unsigned char) c;
 2013ad4:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 2013ad8:	8080030b 	ldhu	r2,12(r16)
 2013adc:	10bfffcc 	andi	r2,r2,65535
 2013ae0:	1088000c 	andi	r2,r2,8192
 2013ae4:	1000071e 	bne	r2,zero,2013b04 <__swbuf_r+0xb4>
 2013ae8:	8080030b 	ldhu	r2,12(r16)
 2013aec:	10880014 	ori	r2,r2,8192
 2013af0:	8080030d 	sth	r2,12(r16)
 2013af4:	80c01917 	ldw	r3,100(r16)
 2013af8:	00b7ffc4 	movi	r2,-8193
 2013afc:	1884703a 	and	r2,r3,r2
 2013b00:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 2013b04:	80800017 	ldw	r2,0(r16)
 2013b08:	1007883a 	mov	r3,r2
 2013b0c:	80800417 	ldw	r2,16(r16)
 2013b10:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 2013b14:	80800517 	ldw	r2,20(r16)
 2013b18:	88800716 	blt	r17,r2,2013b38 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 2013b1c:	800b883a 	mov	r5,r16
 2013b20:	e13ffc17 	ldw	r4,-16(fp)
 2013b24:	200c6500 	call	200c650 <_fflush_r>
 2013b28:	10000226 	beq	r2,zero,2013b34 <__swbuf_r+0xe4>
	return EOF;
 2013b2c:	00bfffc4 	movi	r2,-1
 2013b30:	00001906 	br	2013b98 <__swbuf_r+0x148>
      n = 0;
 2013b34:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 2013b38:	80800217 	ldw	r2,8(r16)
 2013b3c:	10bfffc4 	addi	r2,r2,-1
 2013b40:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 2013b44:	80800017 	ldw	r2,0(r16)
 2013b48:	10c00044 	addi	r3,r2,1
 2013b4c:	80c00015 	stw	r3,0(r16)
 2013b50:	9007883a 	mov	r3,r18
 2013b54:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 2013b58:	8c400044 	addi	r17,r17,1
 2013b5c:	80800517 	ldw	r2,20(r16)
 2013b60:	88800626 	beq	r17,r2,2013b7c <__swbuf_r+0x12c>
 2013b64:	8080030b 	ldhu	r2,12(r16)
 2013b68:	10bfffcc 	andi	r2,r2,65535
 2013b6c:	1080004c 	andi	r2,r2,1
 2013b70:	10000826 	beq	r2,zero,2013b94 <__swbuf_r+0x144>
 2013b74:	90800298 	cmpnei	r2,r18,10
 2013b78:	1000061e 	bne	r2,zero,2013b94 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 2013b7c:	800b883a 	mov	r5,r16
 2013b80:	e13ffc17 	ldw	r4,-16(fp)
 2013b84:	200c6500 	call	200c650 <_fflush_r>
 2013b88:	10000226 	beq	r2,zero,2013b94 <__swbuf_r+0x144>
      return EOF;
 2013b8c:	00bfffc4 	movi	r2,-1
 2013b90:	00000106 	br	2013b98 <__swbuf_r+0x148>
  return c;
 2013b94:	9005883a 	mov	r2,r18
}
 2013b98:	e6fffd04 	addi	sp,fp,-12
 2013b9c:	dfc00417 	ldw	ra,16(sp)
 2013ba0:	df000317 	ldw	fp,12(sp)
 2013ba4:	dc800217 	ldw	r18,8(sp)
 2013ba8:	dc400117 	ldw	r17,4(sp)
 2013bac:	dc000017 	ldw	r16,0(sp)
 2013bb0:	dec00504 	addi	sp,sp,20
 2013bb4:	f800283a 	ret

02013bb8 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 2013bb8:	defffe04 	addi	sp,sp,-8
 2013bbc:	dfc00115 	stw	ra,4(sp)
 2013bc0:	df000015 	stw	fp,0(sp)
 2013bc4:	d839883a 	mov	fp,sp
 2013bc8:	2007883a 	mov	r3,r4
 2013bcc:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 2013bd0:	d0a02e17 	ldw	r2,-32584(gp)
 2013bd4:	200d883a 	mov	r6,r4
 2013bd8:	180b883a 	mov	r5,r3
 2013bdc:	1009883a 	mov	r4,r2
 2013be0:	2013a500 	call	2013a50 <__swbuf_r>
}
 2013be4:	e037883a 	mov	sp,fp
 2013be8:	dfc00117 	ldw	ra,4(sp)
 2013bec:	df000017 	ldw	fp,0(sp)
 2013bf0:	dec00204 	addi	sp,sp,8
 2013bf4:	f800283a 	ret

02013bf8 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 2013bf8:	defff404 	addi	sp,sp,-48
 2013bfc:	dfc00b15 	stw	ra,44(sp)
 2013c00:	df000a15 	stw	fp,40(sp)
 2013c04:	dc000915 	stw	r16,36(sp)
 2013c08:	df000a04 	addi	fp,sp,40
 2013c0c:	e13ffb15 	stw	r4,-20(fp)
 2013c10:	e17ffc15 	stw	r5,-16(fp)
 2013c14:	e1bffd15 	stw	r6,-12(fp)
 2013c18:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 2013c1c:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 2013c20:	e0bffc17 	ldw	r2,-16(fp)
 2013c24:	10000d1e 	bne	r2,zero,2013c5c <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 2013c28:	d4203317 	ldw	r16,-32564(gp)
 2013c2c:	200dc300 	call	200dc30 <__locale_charset>
 2013c30:	1009883a 	mov	r4,r2
 2013c34:	e0fff804 	addi	r3,fp,-32
 2013c38:	e0bffe17 	ldw	r2,-8(fp)
 2013c3c:	d8800015 	stw	r2,0(sp)
 2013c40:	200f883a 	mov	r7,r4
 2013c44:	000d883a 	mov	r6,zero
 2013c48:	180b883a 	mov	r5,r3
 2013c4c:	e13ffb17 	ldw	r4,-20(fp)
 2013c50:	803ee83a 	callr	r16
 2013c54:	e0bff715 	stw	r2,-36(fp)
 2013c58:	00000b06 	br	2013c88 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 2013c5c:	d4203317 	ldw	r16,-32564(gp)
 2013c60:	200dc300 	call	200dc30 <__locale_charset>
 2013c64:	1007883a 	mov	r3,r2
 2013c68:	e0bffe17 	ldw	r2,-8(fp)
 2013c6c:	d8800015 	stw	r2,0(sp)
 2013c70:	180f883a 	mov	r7,r3
 2013c74:	e1bffd17 	ldw	r6,-12(fp)
 2013c78:	e17ffc17 	ldw	r5,-16(fp)
 2013c7c:	e13ffb17 	ldw	r4,-20(fp)
 2013c80:	803ee83a 	callr	r16
 2013c84:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2013c88:	e0bff717 	ldw	r2,-36(fp)
 2013c8c:	10bfffd8 	cmpnei	r2,r2,-1
 2013c90:	1000071e 	bne	r2,zero,2013cb0 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 2013c94:	e0bffe17 	ldw	r2,-8(fp)
 2013c98:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 2013c9c:	e0bffb17 	ldw	r2,-20(fp)
 2013ca0:	00c02284 	movi	r3,138
 2013ca4:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2013ca8:	00bfffc4 	movi	r2,-1
 2013cac:	00000106 	br	2013cb4 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 2013cb0:	e0bff717 	ldw	r2,-36(fp)
}
 2013cb4:	e6ffff04 	addi	sp,fp,-4
 2013cb8:	dfc00217 	ldw	ra,8(sp)
 2013cbc:	df000117 	ldw	fp,4(sp)
 2013cc0:	dc000017 	ldw	r16,0(sp)
 2013cc4:	dec00304 	addi	sp,sp,12
 2013cc8:	f800283a 	ret

02013ccc <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 2013ccc:	defff404 	addi	sp,sp,-48
 2013cd0:	dfc00b15 	stw	ra,44(sp)
 2013cd4:	df000a15 	stw	fp,40(sp)
 2013cd8:	dc000915 	stw	r16,36(sp)
 2013cdc:	df000a04 	addi	fp,sp,40
 2013ce0:	e13ffc15 	stw	r4,-16(fp)
 2013ce4:	e17ffd15 	stw	r5,-12(fp)
 2013ce8:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 2013cec:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 2013cf0:	d0a02e17 	ldw	r2,-32584(gp)
 2013cf4:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 2013cf8:	e0bffc17 	ldw	r2,-16(fp)
 2013cfc:	10000d1e 	bne	r2,zero,2013d34 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 2013d00:	d4203317 	ldw	r16,-32564(gp)
 2013d04:	200dc300 	call	200dc30 <__locale_charset>
 2013d08:	1009883a 	mov	r4,r2
 2013d0c:	e0fff904 	addi	r3,fp,-28
 2013d10:	e0bffe17 	ldw	r2,-8(fp)
 2013d14:	d8800015 	stw	r2,0(sp)
 2013d18:	200f883a 	mov	r7,r4
 2013d1c:	000d883a 	mov	r6,zero
 2013d20:	180b883a 	mov	r5,r3
 2013d24:	e13ff817 	ldw	r4,-32(fp)
 2013d28:	803ee83a 	callr	r16
 2013d2c:	e0bff715 	stw	r2,-36(fp)
 2013d30:	00000b06 	br	2013d60 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 2013d34:	d4203317 	ldw	r16,-32564(gp)
 2013d38:	200dc300 	call	200dc30 <__locale_charset>
 2013d3c:	1007883a 	mov	r3,r2
 2013d40:	e0bffe17 	ldw	r2,-8(fp)
 2013d44:	d8800015 	stw	r2,0(sp)
 2013d48:	180f883a 	mov	r7,r3
 2013d4c:	e1bffd17 	ldw	r6,-12(fp)
 2013d50:	e17ffc17 	ldw	r5,-16(fp)
 2013d54:	e13ff817 	ldw	r4,-32(fp)
 2013d58:	803ee83a 	callr	r16
 2013d5c:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2013d60:	e0bff717 	ldw	r2,-36(fp)
 2013d64:	10bfffd8 	cmpnei	r2,r2,-1
 2013d68:	1000071e 	bne	r2,zero,2013d88 <wcrtomb+0xbc>
    {
      ps->__count = 0;
 2013d6c:	e0bffe17 	ldw	r2,-8(fp)
 2013d70:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 2013d74:	e0bff817 	ldw	r2,-32(fp)
 2013d78:	00c02284 	movi	r3,138
 2013d7c:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2013d80:	00bfffc4 	movi	r2,-1
 2013d84:	00000106 	br	2013d8c <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 2013d88:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2013d8c:	e6ffff04 	addi	sp,fp,-4
 2013d90:	dfc00217 	ldw	ra,8(sp)
 2013d94:	df000117 	ldw	fp,4(sp)
 2013d98:	dc000017 	ldw	r16,0(sp)
 2013d9c:	dec00304 	addi	sp,sp,12
 2013da0:	f800283a 	ret

02013da4 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 2013da4:	defff804 	addi	sp,sp,-32
 2013da8:	dfc00715 	stw	ra,28(sp)
 2013dac:	df000615 	stw	fp,24(sp)
 2013db0:	dc000515 	stw	r16,20(sp)
 2013db4:	df000604 	addi	fp,sp,24
 2013db8:	e13ffb15 	stw	r4,-20(fp)
 2013dbc:	e17ffc15 	stw	r5,-16(fp)
 2013dc0:	e1bffd15 	stw	r6,-12(fp)
 2013dc4:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 2013dc8:	d4203317 	ldw	r16,-32564(gp)
 2013dcc:	200dc300 	call	200dc30 <__locale_charset>
 2013dd0:	1007883a 	mov	r3,r2
 2013dd4:	e0bffe17 	ldw	r2,-8(fp)
 2013dd8:	d8800015 	stw	r2,0(sp)
 2013ddc:	180f883a 	mov	r7,r3
 2013de0:	e1bffd17 	ldw	r6,-12(fp)
 2013de4:	e17ffc17 	ldw	r5,-16(fp)
 2013de8:	e13ffb17 	ldw	r4,-20(fp)
 2013dec:	803ee83a 	callr	r16
}
 2013df0:	e6ffff04 	addi	sp,fp,-4
 2013df4:	dfc00217 	ldw	ra,8(sp)
 2013df8:	df000117 	ldw	fp,4(sp)
 2013dfc:	dc000017 	ldw	r16,0(sp)
 2013e00:	dec00304 	addi	sp,sp,12
 2013e04:	f800283a 	ret

02013e08 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 2013e08:	defffa04 	addi	sp,sp,-24
 2013e0c:	df000515 	stw	fp,20(sp)
 2013e10:	df000504 	addi	fp,sp,20
 2013e14:	e13ffc15 	stw	r4,-16(fp)
 2013e18:	e17ffd15 	stw	r5,-12(fp)
 2013e1c:	e1bffe15 	stw	r6,-8(fp)
 2013e20:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 2013e24:	e0bffe17 	ldw	r2,-8(fp)
 2013e28:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 2013e2c:	e0bffd17 	ldw	r2,-12(fp)
 2013e30:	1000021e 	bne	r2,zero,2013e3c <__ascii_wctomb+0x34>
    return 0;
 2013e34:	0005883a 	mov	r2,zero
 2013e38:	00000d06 	br	2013e70 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 2013e3c:	e0bffb17 	ldw	r2,-20(fp)
 2013e40:	10804030 	cmpltui	r2,r2,256
 2013e44:	1000051e 	bne	r2,zero,2013e5c <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 2013e48:	e0bffc17 	ldw	r2,-16(fp)
 2013e4c:	00c02284 	movi	r3,138
 2013e50:	10c00015 	stw	r3,0(r2)
      return -1;
 2013e54:	00bfffc4 	movi	r2,-1
 2013e58:	00000506 	br	2013e70 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 2013e5c:	e0bffb17 	ldw	r2,-20(fp)
 2013e60:	1007883a 	mov	r3,r2
 2013e64:	e0bffd17 	ldw	r2,-12(fp)
 2013e68:	10c00005 	stb	r3,0(r2)
  return 1;
 2013e6c:	00800044 	movi	r2,1
}
 2013e70:	e037883a 	mov	sp,fp
 2013e74:	df000017 	ldw	fp,0(sp)
 2013e78:	dec00104 	addi	sp,sp,4
 2013e7c:	f800283a 	ret

02013e80 <__udivdi3>:
 2013e80:	defff504 	addi	sp,sp,-44
 2013e84:	dcc00415 	stw	r19,16(sp)
 2013e88:	dc000115 	stw	r16,4(sp)
 2013e8c:	dfc00a15 	stw	ra,40(sp)
 2013e90:	df000915 	stw	fp,36(sp)
 2013e94:	ddc00815 	stw	r23,32(sp)
 2013e98:	dd800715 	stw	r22,28(sp)
 2013e9c:	dd400615 	stw	r21,24(sp)
 2013ea0:	dd000515 	stw	r20,20(sp)
 2013ea4:	dc800315 	stw	r18,12(sp)
 2013ea8:	dc400215 	stw	r17,8(sp)
 2013eac:	2027883a 	mov	r19,r4
 2013eb0:	2821883a 	mov	r16,r5
 2013eb4:	3800411e 	bne	r7,zero,2013fbc <__udivdi3+0x13c>
 2013eb8:	3023883a 	mov	r17,r6
 2013ebc:	2025883a 	mov	r18,r4
 2013ec0:	2980522e 	bgeu	r5,r6,201400c <__udivdi3+0x18c>
 2013ec4:	00bfffd4 	movui	r2,65535
 2013ec8:	282d883a 	mov	r22,r5
 2013ecc:	1180a836 	bltu	r2,r6,2014170 <__udivdi3+0x2f0>
 2013ed0:	00803fc4 	movi	r2,255
 2013ed4:	1185803a 	cmpltu	r2,r2,r6
 2013ed8:	100490fa 	slli	r2,r2,3
 2013edc:	3086d83a 	srl	r3,r6,r2
 2013ee0:	010080b4 	movhi	r4,514
 2013ee4:	21069d04 	addi	r4,r4,6772
 2013ee8:	20c7883a 	add	r3,r4,r3
 2013eec:	18c00003 	ldbu	r3,0(r3)
 2013ef0:	1885883a 	add	r2,r3,r2
 2013ef4:	00c00804 	movi	r3,32
 2013ef8:	1887c83a 	sub	r3,r3,r2
 2013efc:	18000526 	beq	r3,zero,2013f14 <__udivdi3+0x94>
 2013f00:	80e0983a 	sll	r16,r16,r3
 2013f04:	9884d83a 	srl	r2,r19,r2
 2013f08:	30e2983a 	sll	r17,r6,r3
 2013f0c:	98e4983a 	sll	r18,r19,r3
 2013f10:	142cb03a 	or	r22,r2,r16
 2013f14:	882ad43a 	srli	r21,r17,16
 2013f18:	b009883a 	mov	r4,r22
 2013f1c:	8d3fffcc 	andi	r20,r17,65535
 2013f20:	a80b883a 	mov	r5,r21
 2013f24:	20076500 	call	2007650 <__umodsi3>
 2013f28:	b009883a 	mov	r4,r22
 2013f2c:	a80b883a 	mov	r5,r21
 2013f30:	1027883a 	mov	r19,r2
 2013f34:	20075ec0 	call	20075ec <__udivsi3>
 2013f38:	102d883a 	mov	r22,r2
 2013f3c:	9826943a 	slli	r19,r19,16
 2013f40:	9004d43a 	srli	r2,r18,16
 2013f44:	a5a1383a 	mul	r16,r20,r22
 2013f48:	14c4b03a 	or	r2,r2,r19
 2013f4c:	1400052e 	bgeu	r2,r16,2013f64 <__udivdi3+0xe4>
 2013f50:	1445883a 	add	r2,r2,r17
 2013f54:	b0ffffc4 	addi	r3,r22,-1
 2013f58:	14400136 	bltu	r2,r17,2013f60 <__udivdi3+0xe0>
 2013f5c:	14012336 	bltu	r2,r16,20143ec <__udivdi3+0x56c>
 2013f60:	182d883a 	mov	r22,r3
 2013f64:	1421c83a 	sub	r16,r2,r16
 2013f68:	a80b883a 	mov	r5,r21
 2013f6c:	8009883a 	mov	r4,r16
 2013f70:	20076500 	call	2007650 <__umodsi3>
 2013f74:	1027883a 	mov	r19,r2
 2013f78:	a80b883a 	mov	r5,r21
 2013f7c:	8009883a 	mov	r4,r16
 2013f80:	20075ec0 	call	20075ec <__udivsi3>
 2013f84:	9826943a 	slli	r19,r19,16
 2013f88:	a0a9383a 	mul	r20,r20,r2
 2013f8c:	94bfffcc 	andi	r18,r18,65535
 2013f90:	94e4b03a 	or	r18,r18,r19
 2013f94:	9500052e 	bgeu	r18,r20,2013fac <__udivdi3+0x12c>
 2013f98:	8ca5883a 	add	r18,r17,r18
 2013f9c:	10ffffc4 	addi	r3,r2,-1
 2013fa0:	9440f136 	bltu	r18,r17,2014368 <__udivdi3+0x4e8>
 2013fa4:	9500f02e 	bgeu	r18,r20,2014368 <__udivdi3+0x4e8>
 2013fa8:	10bfff84 	addi	r2,r2,-2
 2013fac:	b00c943a 	slli	r6,r22,16
 2013fb0:	0007883a 	mov	r3,zero
 2013fb4:	3084b03a 	or	r2,r6,r2
 2013fb8:	00005906 	br	2014120 <__udivdi3+0x2a0>
 2013fbc:	29c05636 	bltu	r5,r7,2014118 <__udivdi3+0x298>
 2013fc0:	00bfffd4 	movui	r2,65535
 2013fc4:	11c0622e 	bgeu	r2,r7,2014150 <__udivdi3+0x2d0>
 2013fc8:	00804034 	movhi	r2,256
 2013fcc:	10bfffc4 	addi	r2,r2,-1
 2013fd0:	11c0ee36 	bltu	r2,r7,201438c <__udivdi3+0x50c>
 2013fd4:	00800404 	movi	r2,16
 2013fd8:	3886d83a 	srl	r3,r7,r2
 2013fdc:	010080b4 	movhi	r4,514
 2013fe0:	21069d04 	addi	r4,r4,6772
 2013fe4:	20c7883a 	add	r3,r4,r3
 2013fe8:	18c00003 	ldbu	r3,0(r3)
 2013fec:	05400804 	movi	r21,32
 2013ff0:	1885883a 	add	r2,r3,r2
 2013ff4:	a8abc83a 	sub	r21,r21,r2
 2013ff8:	a800621e 	bne	r21,zero,2014184 <__udivdi3+0x304>
 2013ffc:	3c00e936 	bltu	r7,r16,20143a4 <__udivdi3+0x524>
 2014000:	9985403a 	cmpgeu	r2,r19,r6
 2014004:	0007883a 	mov	r3,zero
 2014008:	00004506 	br	2014120 <__udivdi3+0x2a0>
 201400c:	3000041e 	bne	r6,zero,2014020 <__udivdi3+0x1a0>
 2014010:	000b883a 	mov	r5,zero
 2014014:	01000044 	movi	r4,1
 2014018:	20075ec0 	call	20075ec <__udivsi3>
 201401c:	1023883a 	mov	r17,r2
 2014020:	00bfffd4 	movui	r2,65535
 2014024:	14404e2e 	bgeu	r2,r17,2014160 <__udivdi3+0x2e0>
 2014028:	00804034 	movhi	r2,256
 201402c:	10bfffc4 	addi	r2,r2,-1
 2014030:	1440d836 	bltu	r2,r17,2014394 <__udivdi3+0x514>
 2014034:	00800404 	movi	r2,16
 2014038:	8886d83a 	srl	r3,r17,r2
 201403c:	010080b4 	movhi	r4,514
 2014040:	21069d04 	addi	r4,r4,6772
 2014044:	20c7883a 	add	r3,r4,r3
 2014048:	18c00003 	ldbu	r3,0(r3)
 201404c:	1885883a 	add	r2,r3,r2
 2014050:	00c00804 	movi	r3,32
 2014054:	1887c83a 	sub	r3,r3,r2
 2014058:	18008f1e 	bne	r3,zero,2014298 <__udivdi3+0x418>
 201405c:	882ad43a 	srli	r21,r17,16
 2014060:	8461c83a 	sub	r16,r16,r17
 2014064:	8d3fffcc 	andi	r20,r17,65535
 2014068:	00c00044 	movi	r3,1
 201406c:	8009883a 	mov	r4,r16
 2014070:	a80b883a 	mov	r5,r21
 2014074:	d8c00015 	stw	r3,0(sp)
 2014078:	20076500 	call	2007650 <__umodsi3>
 201407c:	8009883a 	mov	r4,r16
 2014080:	a80b883a 	mov	r5,r21
 2014084:	1027883a 	mov	r19,r2
 2014088:	20075ec0 	call	20075ec <__udivsi3>
 201408c:	9826943a 	slli	r19,r19,16
 2014090:	9008d43a 	srli	r4,r18,16
 2014094:	1521383a 	mul	r16,r2,r20
 2014098:	102d883a 	mov	r22,r2
 201409c:	24c8b03a 	or	r4,r4,r19
 20140a0:	d8c00017 	ldw	r3,0(sp)
 20140a4:	2400052e 	bgeu	r4,r16,20140bc <__udivdi3+0x23c>
 20140a8:	2449883a 	add	r4,r4,r17
 20140ac:	b0bfffc4 	addi	r2,r22,-1
 20140b0:	24400136 	bltu	r4,r17,20140b8 <__udivdi3+0x238>
 20140b4:	2400ca36 	bltu	r4,r16,20143e0 <__udivdi3+0x560>
 20140b8:	102d883a 	mov	r22,r2
 20140bc:	2421c83a 	sub	r16,r4,r16
 20140c0:	a80b883a 	mov	r5,r21
 20140c4:	8009883a 	mov	r4,r16
 20140c8:	d8c00015 	stw	r3,0(sp)
 20140cc:	20076500 	call	2007650 <__umodsi3>
 20140d0:	1027883a 	mov	r19,r2
 20140d4:	a80b883a 	mov	r5,r21
 20140d8:	8009883a 	mov	r4,r16
 20140dc:	20075ec0 	call	20075ec <__udivsi3>
 20140e0:	9826943a 	slli	r19,r19,16
 20140e4:	1529383a 	mul	r20,r2,r20
 20140e8:	94bfffcc 	andi	r18,r18,65535
 20140ec:	94e4b03a 	or	r18,r18,r19
 20140f0:	d8c00017 	ldw	r3,0(sp)
 20140f4:	9500052e 	bgeu	r18,r20,201410c <__udivdi3+0x28c>
 20140f8:	8ca5883a 	add	r18,r17,r18
 20140fc:	113fffc4 	addi	r4,r2,-1
 2014100:	94409736 	bltu	r18,r17,2014360 <__udivdi3+0x4e0>
 2014104:	9500962e 	bgeu	r18,r20,2014360 <__udivdi3+0x4e0>
 2014108:	10bfff84 	addi	r2,r2,-2
 201410c:	b00c943a 	slli	r6,r22,16
 2014110:	3084b03a 	or	r2,r6,r2
 2014114:	00000206 	br	2014120 <__udivdi3+0x2a0>
 2014118:	0007883a 	mov	r3,zero
 201411c:	0005883a 	mov	r2,zero
 2014120:	dfc00a17 	ldw	ra,40(sp)
 2014124:	df000917 	ldw	fp,36(sp)
 2014128:	ddc00817 	ldw	r23,32(sp)
 201412c:	dd800717 	ldw	r22,28(sp)
 2014130:	dd400617 	ldw	r21,24(sp)
 2014134:	dd000517 	ldw	r20,20(sp)
 2014138:	dcc00417 	ldw	r19,16(sp)
 201413c:	dc800317 	ldw	r18,12(sp)
 2014140:	dc400217 	ldw	r17,8(sp)
 2014144:	dc000117 	ldw	r16,4(sp)
 2014148:	dec00b04 	addi	sp,sp,44
 201414c:	f800283a 	ret
 2014150:	00803fc4 	movi	r2,255
 2014154:	11c5803a 	cmpltu	r2,r2,r7
 2014158:	100490fa 	slli	r2,r2,3
 201415c:	003f9e06 	br	2013fd8 <__udivdi3+0x158>
 2014160:	00803fc4 	movi	r2,255
 2014164:	1445803a 	cmpltu	r2,r2,r17
 2014168:	100490fa 	slli	r2,r2,3
 201416c:	003fb206 	br	2014038 <__udivdi3+0x1b8>
 2014170:	00804034 	movhi	r2,256
 2014174:	10bfffc4 	addi	r2,r2,-1
 2014178:	11808836 	bltu	r2,r6,201439c <__udivdi3+0x51c>
 201417c:	00800404 	movi	r2,16
 2014180:	003f5606 	br	2013edc <__udivdi3+0x5c>
 2014184:	30aed83a 	srl	r23,r6,r2
 2014188:	3d4e983a 	sll	r7,r7,r21
 201418c:	80acd83a 	srl	r22,r16,r2
 2014190:	9884d83a 	srl	r2,r19,r2
 2014194:	3deeb03a 	or	r23,r7,r23
 2014198:	b824d43a 	srli	r18,r23,16
 201419c:	8560983a 	sll	r16,r16,r21
 20141a0:	b009883a 	mov	r4,r22
 20141a4:	900b883a 	mov	r5,r18
 20141a8:	3568983a 	sll	r20,r6,r21
 20141ac:	1420b03a 	or	r16,r2,r16
 20141b0:	20076500 	call	2007650 <__umodsi3>
 20141b4:	b009883a 	mov	r4,r22
 20141b8:	900b883a 	mov	r5,r18
 20141bc:	1023883a 	mov	r17,r2
 20141c0:	20075ec0 	call	20075ec <__udivsi3>
 20141c4:	8808943a 	slli	r4,r17,16
 20141c8:	bf3fffcc 	andi	fp,r23,65535
 20141cc:	8006d43a 	srli	r3,r16,16
 20141d0:	e0a3383a 	mul	r17,fp,r2
 20141d4:	100d883a 	mov	r6,r2
 20141d8:	1906b03a 	or	r3,r3,r4
 20141dc:	1c40042e 	bgeu	r3,r17,20141f0 <__udivdi3+0x370>
 20141e0:	1dc7883a 	add	r3,r3,r23
 20141e4:	10bfffc4 	addi	r2,r2,-1
 20141e8:	1dc0752e 	bgeu	r3,r23,20143c0 <__udivdi3+0x540>
 20141ec:	100d883a 	mov	r6,r2
 20141f0:	1c63c83a 	sub	r17,r3,r17
 20141f4:	900b883a 	mov	r5,r18
 20141f8:	8809883a 	mov	r4,r17
 20141fc:	d9800015 	stw	r6,0(sp)
 2014200:	20076500 	call	2007650 <__umodsi3>
 2014204:	102d883a 	mov	r22,r2
 2014208:	8809883a 	mov	r4,r17
 201420c:	900b883a 	mov	r5,r18
 2014210:	20075ec0 	call	20075ec <__udivsi3>
 2014214:	b02c943a 	slli	r22,r22,16
 2014218:	e089383a 	mul	r4,fp,r2
 201421c:	843fffcc 	andi	r16,r16,65535
 2014220:	85a0b03a 	or	r16,r16,r22
 2014224:	d9800017 	ldw	r6,0(sp)
 2014228:	8100042e 	bgeu	r16,r4,201423c <__udivdi3+0x3bc>
 201422c:	85e1883a 	add	r16,r16,r23
 2014230:	10ffffc4 	addi	r3,r2,-1
 2014234:	85c05e2e 	bgeu	r16,r23,20143b0 <__udivdi3+0x530>
 2014238:	1805883a 	mov	r2,r3
 201423c:	300c943a 	slli	r6,r6,16
 2014240:	a17fffcc 	andi	r5,r20,65535
 2014244:	a028d43a 	srli	r20,r20,16
 2014248:	3084b03a 	or	r2,r6,r2
 201424c:	10ffffcc 	andi	r3,r2,65535
 2014250:	100cd43a 	srli	r6,r2,16
 2014254:	194f383a 	mul	r7,r3,r5
 2014258:	1d07383a 	mul	r3,r3,r20
 201425c:	314b383a 	mul	r5,r6,r5
 2014260:	3810d43a 	srli	r8,r7,16
 2014264:	8121c83a 	sub	r16,r16,r4
 2014268:	1947883a 	add	r3,r3,r5
 201426c:	40c7883a 	add	r3,r8,r3
 2014270:	350d383a 	mul	r6,r6,r20
 2014274:	1940022e 	bgeu	r3,r5,2014280 <__udivdi3+0x400>
 2014278:	01000074 	movhi	r4,1
 201427c:	310d883a 	add	r6,r6,r4
 2014280:	1828d43a 	srli	r20,r3,16
 2014284:	a18d883a 	add	r6,r20,r6
 2014288:	81803e36 	bltu	r16,r6,2014384 <__udivdi3+0x504>
 201428c:	81803826 	beq	r16,r6,2014370 <__udivdi3+0x4f0>
 2014290:	0007883a 	mov	r3,zero
 2014294:	003fa206 	br	2014120 <__udivdi3+0x2a0>
 2014298:	88e2983a 	sll	r17,r17,r3
 201429c:	80a8d83a 	srl	r20,r16,r2
 20142a0:	80e0983a 	sll	r16,r16,r3
 20142a4:	882ad43a 	srli	r21,r17,16
 20142a8:	9884d83a 	srl	r2,r19,r2
 20142ac:	a009883a 	mov	r4,r20
 20142b0:	a80b883a 	mov	r5,r21
 20142b4:	142eb03a 	or	r23,r2,r16
 20142b8:	98e4983a 	sll	r18,r19,r3
 20142bc:	20076500 	call	2007650 <__umodsi3>
 20142c0:	a009883a 	mov	r4,r20
 20142c4:	a80b883a 	mov	r5,r21
 20142c8:	1021883a 	mov	r16,r2
 20142cc:	20075ec0 	call	20075ec <__udivsi3>
 20142d0:	1039883a 	mov	fp,r2
 20142d4:	8d3fffcc 	andi	r20,r17,65535
 20142d8:	8020943a 	slli	r16,r16,16
 20142dc:	b804d43a 	srli	r2,r23,16
 20142e0:	a72d383a 	mul	r22,r20,fp
 20142e4:	1404b03a 	or	r2,r2,r16
 20142e8:	1580062e 	bgeu	r2,r22,2014304 <__udivdi3+0x484>
 20142ec:	1445883a 	add	r2,r2,r17
 20142f0:	e0ffffc4 	addi	r3,fp,-1
 20142f4:	14403836 	bltu	r2,r17,20143d8 <__udivdi3+0x558>
 20142f8:	1580372e 	bgeu	r2,r22,20143d8 <__udivdi3+0x558>
 20142fc:	e73fff84 	addi	fp,fp,-2
 2014300:	1445883a 	add	r2,r2,r17
 2014304:	15adc83a 	sub	r22,r2,r22
 2014308:	a80b883a 	mov	r5,r21
 201430c:	b009883a 	mov	r4,r22
 2014310:	20076500 	call	2007650 <__umodsi3>
 2014314:	1027883a 	mov	r19,r2
 2014318:	b009883a 	mov	r4,r22
 201431c:	a80b883a 	mov	r5,r21
 2014320:	20075ec0 	call	20075ec <__udivsi3>
 2014324:	9826943a 	slli	r19,r19,16
 2014328:	a0a1383a 	mul	r16,r20,r2
 201432c:	b93fffcc 	andi	r4,r23,65535
 2014330:	24c8b03a 	or	r4,r4,r19
 2014334:	2400062e 	bgeu	r4,r16,2014350 <__udivdi3+0x4d0>
 2014338:	2449883a 	add	r4,r4,r17
 201433c:	10ffffc4 	addi	r3,r2,-1
 2014340:	24402336 	bltu	r4,r17,20143d0 <__udivdi3+0x550>
 2014344:	2400222e 	bgeu	r4,r16,20143d0 <__udivdi3+0x550>
 2014348:	10bfff84 	addi	r2,r2,-2
 201434c:	2449883a 	add	r4,r4,r17
 2014350:	e038943a 	slli	fp,fp,16
 2014354:	2421c83a 	sub	r16,r4,r16
 2014358:	e086b03a 	or	r3,fp,r2
 201435c:	003f4306 	br	201406c <__udivdi3+0x1ec>
 2014360:	2005883a 	mov	r2,r4
 2014364:	003f6906 	br	201410c <__udivdi3+0x28c>
 2014368:	1805883a 	mov	r2,r3
 201436c:	003f0f06 	br	2013fac <__udivdi3+0x12c>
 2014370:	1806943a 	slli	r3,r3,16
 2014374:	9d66983a 	sll	r19,r19,r21
 2014378:	39ffffcc 	andi	r7,r7,65535
 201437c:	19c7883a 	add	r3,r3,r7
 2014380:	98ffc32e 	bgeu	r19,r3,2014290 <__udivdi3+0x410>
 2014384:	10bfffc4 	addi	r2,r2,-1
 2014388:	003fc106 	br	2014290 <__udivdi3+0x410>
 201438c:	00800604 	movi	r2,24
 2014390:	003f1106 	br	2013fd8 <__udivdi3+0x158>
 2014394:	00800604 	movi	r2,24
 2014398:	003f2706 	br	2014038 <__udivdi3+0x1b8>
 201439c:	00800604 	movi	r2,24
 20143a0:	003ece06 	br	2013edc <__udivdi3+0x5c>
 20143a4:	0007883a 	mov	r3,zero
 20143a8:	00800044 	movi	r2,1
 20143ac:	003f5c06 	br	2014120 <__udivdi3+0x2a0>
 20143b0:	813fa12e 	bgeu	r16,r4,2014238 <__udivdi3+0x3b8>
 20143b4:	10bfff84 	addi	r2,r2,-2
 20143b8:	85e1883a 	add	r16,r16,r23
 20143bc:	003f9f06 	br	201423c <__udivdi3+0x3bc>
 20143c0:	1c7f8a2e 	bgeu	r3,r17,20141ec <__udivdi3+0x36c>
 20143c4:	31bfff84 	addi	r6,r6,-2
 20143c8:	1dc7883a 	add	r3,r3,r23
 20143cc:	003f8806 	br	20141f0 <__udivdi3+0x370>
 20143d0:	1805883a 	mov	r2,r3
 20143d4:	003fde06 	br	2014350 <__udivdi3+0x4d0>
 20143d8:	1839883a 	mov	fp,r3
 20143dc:	003fc906 	br	2014304 <__udivdi3+0x484>
 20143e0:	b5bfff84 	addi	r22,r22,-2
 20143e4:	2449883a 	add	r4,r4,r17
 20143e8:	003f3406 	br	20140bc <__udivdi3+0x23c>
 20143ec:	b5bfff84 	addi	r22,r22,-2
 20143f0:	1445883a 	add	r2,r2,r17
 20143f4:	003edb06 	br	2013f64 <__udivdi3+0xe4>

020143f8 <__umoddi3>:
 20143f8:	defff404 	addi	sp,sp,-48
 20143fc:	df000a15 	stw	fp,40(sp)
 2014400:	dc400315 	stw	r17,12(sp)
 2014404:	dc000215 	stw	r16,8(sp)
 2014408:	dfc00b15 	stw	ra,44(sp)
 201440c:	ddc00915 	stw	r23,36(sp)
 2014410:	dd800815 	stw	r22,32(sp)
 2014414:	dd400715 	stw	r21,28(sp)
 2014418:	dd000615 	stw	r20,24(sp)
 201441c:	dcc00515 	stw	r19,20(sp)
 2014420:	dc800415 	stw	r18,16(sp)
 2014424:	2021883a 	mov	r16,r4
 2014428:	2823883a 	mov	r17,r5
 201442c:	2839883a 	mov	fp,r5
 2014430:	38003c1e 	bne	r7,zero,2014524 <__umoddi3+0x12c>
 2014434:	3027883a 	mov	r19,r6
 2014438:	2029883a 	mov	r20,r4
 201443c:	2980512e 	bgeu	r5,r6,2014584 <__umoddi3+0x18c>
 2014440:	00bfffd4 	movui	r2,65535
 2014444:	11809a36 	bltu	r2,r6,20146b0 <__umoddi3+0x2b8>
 2014448:	01003fc4 	movi	r4,255
 201444c:	2189803a 	cmpltu	r4,r4,r6
 2014450:	200890fa 	slli	r4,r4,3
 2014454:	3104d83a 	srl	r2,r6,r4
 2014458:	00c080b4 	movhi	r3,514
 201445c:	18c69d04 	addi	r3,r3,6772
 2014460:	1885883a 	add	r2,r3,r2
 2014464:	10c00003 	ldbu	r3,0(r2)
 2014468:	00800804 	movi	r2,32
 201446c:	1909883a 	add	r4,r3,r4
 2014470:	1125c83a 	sub	r18,r2,r4
 2014474:	90000526 	beq	r18,zero,201448c <__umoddi3+0x94>
 2014478:	8ca2983a 	sll	r17,r17,r18
 201447c:	8108d83a 	srl	r4,r16,r4
 2014480:	34a6983a 	sll	r19,r6,r18
 2014484:	84a8983a 	sll	r20,r16,r18
 2014488:	2478b03a 	or	fp,r4,r17
 201448c:	982ed43a 	srli	r23,r19,16
 2014490:	e009883a 	mov	r4,fp
 2014494:	9dbfffcc 	andi	r22,r19,65535
 2014498:	b80b883a 	mov	r5,r23
 201449c:	20076500 	call	2007650 <__umodsi3>
 20144a0:	e009883a 	mov	r4,fp
 20144a4:	b80b883a 	mov	r5,r23
 20144a8:	102b883a 	mov	r21,r2
 20144ac:	20075ec0 	call	20075ec <__udivsi3>
 20144b0:	a806943a 	slli	r3,r21,16
 20144b4:	a008d43a 	srli	r4,r20,16
 20144b8:	b085383a 	mul	r2,r22,r2
 20144bc:	20c8b03a 	or	r4,r4,r3
 20144c0:	2080032e 	bgeu	r4,r2,20144d0 <__umoddi3+0xd8>
 20144c4:	24c9883a 	add	r4,r4,r19
 20144c8:	24c00136 	bltu	r4,r19,20144d0 <__umoddi3+0xd8>
 20144cc:	20811036 	bltu	r4,r2,2014910 <__umoddi3+0x518>
 20144d0:	20abc83a 	sub	r21,r4,r2
 20144d4:	b80b883a 	mov	r5,r23
 20144d8:	a809883a 	mov	r4,r21
 20144dc:	20076500 	call	2007650 <__umodsi3>
 20144e0:	1023883a 	mov	r17,r2
 20144e4:	b80b883a 	mov	r5,r23
 20144e8:	a809883a 	mov	r4,r21
 20144ec:	20075ec0 	call	20075ec <__udivsi3>
 20144f0:	8822943a 	slli	r17,r17,16
 20144f4:	b085383a 	mul	r2,r22,r2
 20144f8:	a0ffffcc 	andi	r3,r20,65535
 20144fc:	1c46b03a 	or	r3,r3,r17
 2014500:	1880042e 	bgeu	r3,r2,2014514 <__umoddi3+0x11c>
 2014504:	1cc7883a 	add	r3,r3,r19
 2014508:	1cc00236 	bltu	r3,r19,2014514 <__umoddi3+0x11c>
 201450c:	1880012e 	bgeu	r3,r2,2014514 <__umoddi3+0x11c>
 2014510:	1cc7883a 	add	r3,r3,r19
 2014514:	1885c83a 	sub	r2,r3,r2
 2014518:	1484d83a 	srl	r2,r2,r18
 201451c:	0007883a 	mov	r3,zero
 2014520:	00004f06 	br	2014660 <__umoddi3+0x268>
 2014524:	29c04c36 	bltu	r5,r7,2014658 <__umoddi3+0x260>
 2014528:	00bfffd4 	movui	r2,65535
 201452c:	11c0582e 	bgeu	r2,r7,2014690 <__umoddi3+0x298>
 2014530:	00804034 	movhi	r2,256
 2014534:	10bfffc4 	addi	r2,r2,-1
 2014538:	11c0e736 	bltu	r2,r7,20148d8 <__umoddi3+0x4e0>
 201453c:	01000404 	movi	r4,16
 2014540:	3904d83a 	srl	r2,r7,r4
 2014544:	00c080b4 	movhi	r3,514
 2014548:	18c69d04 	addi	r3,r3,6772
 201454c:	1885883a 	add	r2,r3,r2
 2014550:	14c00003 	ldbu	r19,0(r2)
 2014554:	00c00804 	movi	r3,32
 2014558:	9927883a 	add	r19,r19,r4
 201455c:	1ce9c83a 	sub	r20,r3,r19
 2014560:	a000581e 	bne	r20,zero,20146c4 <__umoddi3+0x2cc>
 2014564:	3c400136 	bltu	r7,r17,201456c <__umoddi3+0x174>
 2014568:	8180eb36 	bltu	r16,r6,2014918 <__umoddi3+0x520>
 201456c:	8185c83a 	sub	r2,r16,r6
 2014570:	89e3c83a 	sub	r17,r17,r7
 2014574:	8089803a 	cmpltu	r4,r16,r2
 2014578:	8939c83a 	sub	fp,r17,r4
 201457c:	e007883a 	mov	r3,fp
 2014580:	00003706 	br	2014660 <__umoddi3+0x268>
 2014584:	3000041e 	bne	r6,zero,2014598 <__umoddi3+0x1a0>
 2014588:	000b883a 	mov	r5,zero
 201458c:	01000044 	movi	r4,1
 2014590:	20075ec0 	call	20075ec <__udivsi3>
 2014594:	1027883a 	mov	r19,r2
 2014598:	00bfffd4 	movui	r2,65535
 201459c:	14c0402e 	bgeu	r2,r19,20146a0 <__umoddi3+0x2a8>
 20145a0:	00804034 	movhi	r2,256
 20145a4:	10bfffc4 	addi	r2,r2,-1
 20145a8:	14c0cd36 	bltu	r2,r19,20148e0 <__umoddi3+0x4e8>
 20145ac:	00800404 	movi	r2,16
 20145b0:	9886d83a 	srl	r3,r19,r2
 20145b4:	010080b4 	movhi	r4,514
 20145b8:	21069d04 	addi	r4,r4,6772
 20145bc:	20c7883a 	add	r3,r4,r3
 20145c0:	18c00003 	ldbu	r3,0(r3)
 20145c4:	1887883a 	add	r3,r3,r2
 20145c8:	00800804 	movi	r2,32
 20145cc:	10e5c83a 	sub	r18,r2,r3
 20145d0:	9000901e 	bne	r18,zero,2014814 <__umoddi3+0x41c>
 20145d4:	982cd43a 	srli	r22,r19,16
 20145d8:	8ce3c83a 	sub	r17,r17,r19
 20145dc:	9d7fffcc 	andi	r21,r19,65535
 20145e0:	b00b883a 	mov	r5,r22
 20145e4:	8809883a 	mov	r4,r17
 20145e8:	20076500 	call	2007650 <__umodsi3>
 20145ec:	8809883a 	mov	r4,r17
 20145f0:	b00b883a 	mov	r5,r22
 20145f4:	1021883a 	mov	r16,r2
 20145f8:	20075ec0 	call	20075ec <__udivsi3>
 20145fc:	8006943a 	slli	r3,r16,16
 2014600:	a008d43a 	srli	r4,r20,16
 2014604:	1545383a 	mul	r2,r2,r21
 2014608:	20c8b03a 	or	r4,r4,r3
 201460c:	2080042e 	bgeu	r4,r2,2014620 <__umoddi3+0x228>
 2014610:	24c9883a 	add	r4,r4,r19
 2014614:	24c00236 	bltu	r4,r19,2014620 <__umoddi3+0x228>
 2014618:	2080012e 	bgeu	r4,r2,2014620 <__umoddi3+0x228>
 201461c:	24c9883a 	add	r4,r4,r19
 2014620:	20a1c83a 	sub	r16,r4,r2
 2014624:	b00b883a 	mov	r5,r22
 2014628:	8009883a 	mov	r4,r16
 201462c:	20076500 	call	2007650 <__umodsi3>
 2014630:	1023883a 	mov	r17,r2
 2014634:	b00b883a 	mov	r5,r22
 2014638:	8009883a 	mov	r4,r16
 201463c:	20075ec0 	call	20075ec <__udivsi3>
 2014640:	8822943a 	slli	r17,r17,16
 2014644:	1545383a 	mul	r2,r2,r21
 2014648:	a53fffcc 	andi	r20,r20,65535
 201464c:	a446b03a 	or	r3,r20,r17
 2014650:	18bfb02e 	bgeu	r3,r2,2014514 <__umoddi3+0x11c>
 2014654:	003fab06 	br	2014504 <__umoddi3+0x10c>
 2014658:	2005883a 	mov	r2,r4
 201465c:	2807883a 	mov	r3,r5
 2014660:	dfc00b17 	ldw	ra,44(sp)
 2014664:	df000a17 	ldw	fp,40(sp)
 2014668:	ddc00917 	ldw	r23,36(sp)
 201466c:	dd800817 	ldw	r22,32(sp)
 2014670:	dd400717 	ldw	r21,28(sp)
 2014674:	dd000617 	ldw	r20,24(sp)
 2014678:	dcc00517 	ldw	r19,20(sp)
 201467c:	dc800417 	ldw	r18,16(sp)
 2014680:	dc400317 	ldw	r17,12(sp)
 2014684:	dc000217 	ldw	r16,8(sp)
 2014688:	dec00c04 	addi	sp,sp,48
 201468c:	f800283a 	ret
 2014690:	04c03fc4 	movi	r19,255
 2014694:	99c9803a 	cmpltu	r4,r19,r7
 2014698:	200890fa 	slli	r4,r4,3
 201469c:	003fa806 	br	2014540 <__umoddi3+0x148>
 20146a0:	00803fc4 	movi	r2,255
 20146a4:	14c5803a 	cmpltu	r2,r2,r19
 20146a8:	100490fa 	slli	r2,r2,3
 20146ac:	003fc006 	br	20145b0 <__umoddi3+0x1b8>
 20146b0:	00804034 	movhi	r2,256
 20146b4:	10bfffc4 	addi	r2,r2,-1
 20146b8:	11808b36 	bltu	r2,r6,20148e8 <__umoddi3+0x4f0>
 20146bc:	01000404 	movi	r4,16
 20146c0:	003f6406 	br	2014454 <__umoddi3+0x5c>
 20146c4:	34c4d83a 	srl	r2,r6,r19
 20146c8:	3d0e983a 	sll	r7,r7,r20
 20146cc:	8cf8d83a 	srl	fp,r17,r19
 20146d0:	8d10983a 	sll	r8,r17,r20
 20146d4:	38aab03a 	or	r21,r7,r2
 20146d8:	a82cd43a 	srli	r22,r21,16
 20146dc:	84e2d83a 	srl	r17,r16,r19
 20146e0:	e009883a 	mov	r4,fp
 20146e4:	b00b883a 	mov	r5,r22
 20146e8:	8a22b03a 	or	r17,r17,r8
 20146ec:	3524983a 	sll	r18,r6,r20
 20146f0:	20076500 	call	2007650 <__umodsi3>
 20146f4:	e009883a 	mov	r4,fp
 20146f8:	b00b883a 	mov	r5,r22
 20146fc:	102f883a 	mov	r23,r2
 2014700:	20075ec0 	call	20075ec <__udivsi3>
 2014704:	100d883a 	mov	r6,r2
 2014708:	b808943a 	slli	r4,r23,16
 201470c:	aa3fffcc 	andi	r8,r21,65535
 2014710:	8804d43a 	srli	r2,r17,16
 2014714:	41af383a 	mul	r23,r8,r6
 2014718:	8520983a 	sll	r16,r16,r20
 201471c:	1104b03a 	or	r2,r2,r4
 2014720:	15c0042e 	bgeu	r2,r23,2014734 <__umoddi3+0x33c>
 2014724:	1545883a 	add	r2,r2,r21
 2014728:	30ffffc4 	addi	r3,r6,-1
 201472c:	1540742e 	bgeu	r2,r21,2014900 <__umoddi3+0x508>
 2014730:	180d883a 	mov	r6,r3
 2014734:	15efc83a 	sub	r23,r2,r23
 2014738:	b00b883a 	mov	r5,r22
 201473c:	b809883a 	mov	r4,r23
 2014740:	d9800115 	stw	r6,4(sp)
 2014744:	da000015 	stw	r8,0(sp)
 2014748:	20076500 	call	2007650 <__umodsi3>
 201474c:	b00b883a 	mov	r5,r22
 2014750:	b809883a 	mov	r4,r23
 2014754:	1039883a 	mov	fp,r2
 2014758:	20075ec0 	call	20075ec <__udivsi3>
 201475c:	da000017 	ldw	r8,0(sp)
 2014760:	e038943a 	slli	fp,fp,16
 2014764:	100b883a 	mov	r5,r2
 2014768:	4089383a 	mul	r4,r8,r2
 201476c:	8a3fffcc 	andi	r8,r17,65535
 2014770:	4710b03a 	or	r8,r8,fp
 2014774:	d9800117 	ldw	r6,4(sp)
 2014778:	4100042e 	bgeu	r8,r4,201478c <__umoddi3+0x394>
 201477c:	4551883a 	add	r8,r8,r21
 2014780:	10bfffc4 	addi	r2,r2,-1
 2014784:	45405a2e 	bgeu	r8,r21,20148f0 <__umoddi3+0x4f8>
 2014788:	100b883a 	mov	r5,r2
 201478c:	300c943a 	slli	r6,r6,16
 2014790:	91ffffcc 	andi	r7,r18,65535
 2014794:	9004d43a 	srli	r2,r18,16
 2014798:	314cb03a 	or	r6,r6,r5
 201479c:	317fffcc 	andi	r5,r6,65535
 20147a0:	300cd43a 	srli	r6,r6,16
 20147a4:	29d3383a 	mul	r9,r5,r7
 20147a8:	288b383a 	mul	r5,r5,r2
 20147ac:	31cf383a 	mul	r7,r6,r7
 20147b0:	4806d43a 	srli	r3,r9,16
 20147b4:	4111c83a 	sub	r8,r8,r4
 20147b8:	29cb883a 	add	r5,r5,r7
 20147bc:	194b883a 	add	r5,r3,r5
 20147c0:	3085383a 	mul	r2,r6,r2
 20147c4:	29c0022e 	bgeu	r5,r7,20147d0 <__umoddi3+0x3d8>
 20147c8:	00c00074 	movhi	r3,1
 20147cc:	10c5883a 	add	r2,r2,r3
 20147d0:	2808d43a 	srli	r4,r5,16
 20147d4:	280a943a 	slli	r5,r5,16
 20147d8:	4a7fffcc 	andi	r9,r9,65535
 20147dc:	2085883a 	add	r2,r4,r2
 20147e0:	2a4b883a 	add	r5,r5,r9
 20147e4:	40803636 	bltu	r8,r2,20148c0 <__umoddi3+0x4c8>
 20147e8:	40804d26 	beq	r8,r2,2014920 <__umoddi3+0x528>
 20147ec:	4089c83a 	sub	r4,r8,r2
 20147f0:	280f883a 	mov	r7,r5
 20147f4:	81cfc83a 	sub	r7,r16,r7
 20147f8:	81c7803a 	cmpltu	r3,r16,r7
 20147fc:	20c7c83a 	sub	r3,r4,r3
 2014800:	1cc4983a 	sll	r2,r3,r19
 2014804:	3d0ed83a 	srl	r7,r7,r20
 2014808:	1d06d83a 	srl	r3,r3,r20
 201480c:	11c4b03a 	or	r2,r2,r7
 2014810:	003f9306 	br	2014660 <__umoddi3+0x268>
 2014814:	9ca6983a 	sll	r19,r19,r18
 2014818:	88e8d83a 	srl	r20,r17,r3
 201481c:	80c4d83a 	srl	r2,r16,r3
 2014820:	982cd43a 	srli	r22,r19,16
 2014824:	8ca2983a 	sll	r17,r17,r18
 2014828:	a009883a 	mov	r4,r20
 201482c:	b00b883a 	mov	r5,r22
 2014830:	1478b03a 	or	fp,r2,r17
 2014834:	20076500 	call	2007650 <__umodsi3>
 2014838:	a009883a 	mov	r4,r20
 201483c:	b00b883a 	mov	r5,r22
 2014840:	1023883a 	mov	r17,r2
 2014844:	20075ec0 	call	20075ec <__udivsi3>
 2014848:	9d7fffcc 	andi	r21,r19,65535
 201484c:	880a943a 	slli	r5,r17,16
 2014850:	e008d43a 	srli	r4,fp,16
 2014854:	a885383a 	mul	r2,r21,r2
 2014858:	84a8983a 	sll	r20,r16,r18
 201485c:	2148b03a 	or	r4,r4,r5
 2014860:	2080042e 	bgeu	r4,r2,2014874 <__umoddi3+0x47c>
 2014864:	24c9883a 	add	r4,r4,r19
 2014868:	24c00236 	bltu	r4,r19,2014874 <__umoddi3+0x47c>
 201486c:	2080012e 	bgeu	r4,r2,2014874 <__umoddi3+0x47c>
 2014870:	24c9883a 	add	r4,r4,r19
 2014874:	20a3c83a 	sub	r17,r4,r2
 2014878:	b00b883a 	mov	r5,r22
 201487c:	8809883a 	mov	r4,r17
 2014880:	20076500 	call	2007650 <__umodsi3>
 2014884:	102f883a 	mov	r23,r2
 2014888:	8809883a 	mov	r4,r17
 201488c:	b00b883a 	mov	r5,r22
 2014890:	20075ec0 	call	20075ec <__udivsi3>
 2014894:	b82e943a 	slli	r23,r23,16
 2014898:	a885383a 	mul	r2,r21,r2
 201489c:	e13fffcc 	andi	r4,fp,65535
 20148a0:	25c8b03a 	or	r4,r4,r23
 20148a4:	2080042e 	bgeu	r4,r2,20148b8 <__umoddi3+0x4c0>
 20148a8:	24c9883a 	add	r4,r4,r19
 20148ac:	24c00236 	bltu	r4,r19,20148b8 <__umoddi3+0x4c0>
 20148b0:	2080012e 	bgeu	r4,r2,20148b8 <__umoddi3+0x4c0>
 20148b4:	24c9883a 	add	r4,r4,r19
 20148b8:	20a3c83a 	sub	r17,r4,r2
 20148bc:	003f4806 	br	20145e0 <__umoddi3+0x1e8>
 20148c0:	2c8fc83a 	sub	r7,r5,r18
 20148c4:	1545c83a 	sub	r2,r2,r21
 20148c8:	29cb803a 	cmpltu	r5,r5,r7
 20148cc:	1145c83a 	sub	r2,r2,r5
 20148d0:	4089c83a 	sub	r4,r8,r2
 20148d4:	003fc706 	br	20147f4 <__umoddi3+0x3fc>
 20148d8:	01000604 	movi	r4,24
 20148dc:	003f1806 	br	2014540 <__umoddi3+0x148>
 20148e0:	00800604 	movi	r2,24
 20148e4:	003f3206 	br	20145b0 <__umoddi3+0x1b8>
 20148e8:	01000604 	movi	r4,24
 20148ec:	003ed906 	br	2014454 <__umoddi3+0x5c>
 20148f0:	413fa52e 	bgeu	r8,r4,2014788 <__umoddi3+0x390>
 20148f4:	297fff84 	addi	r5,r5,-2
 20148f8:	4551883a 	add	r8,r8,r21
 20148fc:	003fa306 	br	201478c <__umoddi3+0x394>
 2014900:	15ff8b2e 	bgeu	r2,r23,2014730 <__umoddi3+0x338>
 2014904:	31bfff84 	addi	r6,r6,-2
 2014908:	1545883a 	add	r2,r2,r21
 201490c:	003f8906 	br	2014734 <__umoddi3+0x33c>
 2014910:	24c9883a 	add	r4,r4,r19
 2014914:	003eee06 	br	20144d0 <__umoddi3+0xd8>
 2014918:	8005883a 	mov	r2,r16
 201491c:	003f1706 	br	201457c <__umoddi3+0x184>
 2014920:	817fe736 	bltu	r16,r5,20148c0 <__umoddi3+0x4c8>
 2014924:	280f883a 	mov	r7,r5
 2014928:	0009883a 	mov	r4,zero
 201492c:	003fb106 	br	20147f4 <__umoddi3+0x3fc>

02014930 <__adddf3>:
 2014930:	02c00434 	movhi	r11,16
 2014934:	5affffc4 	addi	r11,r11,-1
 2014938:	2806d7fa 	srli	r3,r5,31
 201493c:	2ad4703a 	and	r10,r5,r11
 2014940:	3ad2703a 	and	r9,r7,r11
 2014944:	3804d53a 	srli	r2,r7,20
 2014948:	3018d77a 	srli	r12,r6,29
 201494c:	280ad53a 	srli	r5,r5,20
 2014950:	501490fa 	slli	r10,r10,3
 2014954:	2010d77a 	srli	r8,r4,29
 2014958:	481290fa 	slli	r9,r9,3
 201495c:	380ed7fa 	srli	r7,r7,31
 2014960:	defffb04 	addi	sp,sp,-20
 2014964:	dc800215 	stw	r18,8(sp)
 2014968:	dc400115 	stw	r17,4(sp)
 201496c:	dc000015 	stw	r16,0(sp)
 2014970:	dfc00415 	stw	ra,16(sp)
 2014974:	dcc00315 	stw	r19,12(sp)
 2014978:	1c803fcc 	andi	r18,r3,255
 201497c:	2c01ffcc 	andi	r16,r5,2047
 2014980:	5210b03a 	or	r8,r10,r8
 2014984:	202290fa 	slli	r17,r4,3
 2014988:	1081ffcc 	andi	r2,r2,2047
 201498c:	4b12b03a 	or	r9,r9,r12
 2014990:	300c90fa 	slli	r6,r6,3
 2014994:	91c07526 	beq	r18,r7,2014b6c <__adddf3+0x23c>
 2014998:	8087c83a 	sub	r3,r16,r2
 201499c:	00c0ab0e 	bge	zero,r3,2014c4c <__adddf3+0x31c>
 20149a0:	10002a1e 	bne	r2,zero,2014a4c <__adddf3+0x11c>
 20149a4:	4984b03a 	or	r2,r9,r6
 20149a8:	1000961e 	bne	r2,zero,2014c04 <__adddf3+0x2d4>
 20149ac:	888001cc 	andi	r2,r17,7
 20149b0:	10000726 	beq	r2,zero,20149d0 <__adddf3+0xa0>
 20149b4:	888003cc 	andi	r2,r17,15
 20149b8:	00c00104 	movi	r3,4
 20149bc:	10c00426 	beq	r2,r3,20149d0 <__adddf3+0xa0>
 20149c0:	88c7883a 	add	r3,r17,r3
 20149c4:	1c63803a 	cmpltu	r17,r3,r17
 20149c8:	4451883a 	add	r8,r8,r17
 20149cc:	1823883a 	mov	r17,r3
 20149d0:	4080202c 	andhi	r2,r8,128
 20149d4:	10005926 	beq	r2,zero,2014b3c <__adddf3+0x20c>
 20149d8:	84000044 	addi	r16,r16,1
 20149dc:	0081ffc4 	movi	r2,2047
 20149e0:	8080ba26 	beq	r16,r2,2014ccc <__adddf3+0x39c>
 20149e4:	00bfe034 	movhi	r2,65408
 20149e8:	10bfffc4 	addi	r2,r2,-1
 20149ec:	4090703a 	and	r8,r8,r2
 20149f0:	4004977a 	slli	r2,r8,29
 20149f4:	4010927a 	slli	r8,r8,9
 20149f8:	8822d0fa 	srli	r17,r17,3
 20149fc:	8401ffcc 	andi	r16,r16,2047
 2014a00:	4010d33a 	srli	r8,r8,12
 2014a04:	9007883a 	mov	r3,r18
 2014a08:	1444b03a 	or	r2,r2,r17
 2014a0c:	8401ffcc 	andi	r16,r16,2047
 2014a10:	8020953a 	slli	r16,r16,20
 2014a14:	18c03fcc 	andi	r3,r3,255
 2014a18:	01000434 	movhi	r4,16
 2014a1c:	213fffc4 	addi	r4,r4,-1
 2014a20:	180697fa 	slli	r3,r3,31
 2014a24:	4110703a 	and	r8,r8,r4
 2014a28:	4410b03a 	or	r8,r8,r16
 2014a2c:	40c6b03a 	or	r3,r8,r3
 2014a30:	dfc00417 	ldw	ra,16(sp)
 2014a34:	dcc00317 	ldw	r19,12(sp)
 2014a38:	dc800217 	ldw	r18,8(sp)
 2014a3c:	dc400117 	ldw	r17,4(sp)
 2014a40:	dc000017 	ldw	r16,0(sp)
 2014a44:	dec00504 	addi	sp,sp,20
 2014a48:	f800283a 	ret
 2014a4c:	0081ffc4 	movi	r2,2047
 2014a50:	80bfd626 	beq	r16,r2,20149ac <__adddf3+0x7c>
 2014a54:	4a402034 	orhi	r9,r9,128
 2014a58:	00800e04 	movi	r2,56
 2014a5c:	10c09f16 	blt	r2,r3,2014cdc <__adddf3+0x3ac>
 2014a60:	008007c4 	movi	r2,31
 2014a64:	10c0c216 	blt	r2,r3,2014d70 <__adddf3+0x440>
 2014a68:	00800804 	movi	r2,32
 2014a6c:	10c5c83a 	sub	r2,r2,r3
 2014a70:	488a983a 	sll	r5,r9,r2
 2014a74:	30c8d83a 	srl	r4,r6,r3
 2014a78:	3084983a 	sll	r2,r6,r2
 2014a7c:	48c6d83a 	srl	r3,r9,r3
 2014a80:	290cb03a 	or	r6,r5,r4
 2014a84:	1004c03a 	cmpne	r2,r2,zero
 2014a88:	308cb03a 	or	r6,r6,r2
 2014a8c:	898dc83a 	sub	r6,r17,r6
 2014a90:	89a3803a 	cmpltu	r17,r17,r6
 2014a94:	40d1c83a 	sub	r8,r8,r3
 2014a98:	4451c83a 	sub	r8,r8,r17
 2014a9c:	3023883a 	mov	r17,r6
 2014aa0:	4080202c 	andhi	r2,r8,128
 2014aa4:	10002326 	beq	r2,zero,2014b34 <__adddf3+0x204>
 2014aa8:	04c02034 	movhi	r19,128
 2014aac:	9cffffc4 	addi	r19,r19,-1
 2014ab0:	44e6703a 	and	r19,r8,r19
 2014ab4:	98007626 	beq	r19,zero,2014c90 <__adddf3+0x360>
 2014ab8:	9809883a 	mov	r4,r19
 2014abc:	20074900 	call	2007490 <__clzsi2>
 2014ac0:	10fffe04 	addi	r3,r2,-8
 2014ac4:	010007c4 	movi	r4,31
 2014ac8:	20c07716 	blt	r4,r3,2014ca8 <__adddf3+0x378>
 2014acc:	00800804 	movi	r2,32
 2014ad0:	10c5c83a 	sub	r2,r2,r3
 2014ad4:	8884d83a 	srl	r2,r17,r2
 2014ad8:	98d0983a 	sll	r8,r19,r3
 2014adc:	88e2983a 	sll	r17,r17,r3
 2014ae0:	1204b03a 	or	r2,r2,r8
 2014ae4:	1c007416 	blt	r3,r16,2014cb8 <__adddf3+0x388>
 2014ae8:	1c21c83a 	sub	r16,r3,r16
 2014aec:	82000044 	addi	r8,r16,1
 2014af0:	00c007c4 	movi	r3,31
 2014af4:	1a009116 	blt	r3,r8,2014d3c <__adddf3+0x40c>
 2014af8:	00c00804 	movi	r3,32
 2014afc:	1a07c83a 	sub	r3,r3,r8
 2014b00:	8a08d83a 	srl	r4,r17,r8
 2014b04:	88e2983a 	sll	r17,r17,r3
 2014b08:	10c6983a 	sll	r3,r2,r3
 2014b0c:	1210d83a 	srl	r8,r2,r8
 2014b10:	8804c03a 	cmpne	r2,r17,zero
 2014b14:	1906b03a 	or	r3,r3,r4
 2014b18:	18a2b03a 	or	r17,r3,r2
 2014b1c:	0021883a 	mov	r16,zero
 2014b20:	003fa206 	br	20149ac <__adddf3+0x7c>
 2014b24:	1890b03a 	or	r8,r3,r2
 2014b28:	40017d26 	beq	r8,zero,2015120 <__adddf3+0x7f0>
 2014b2c:	1011883a 	mov	r8,r2
 2014b30:	1823883a 	mov	r17,r3
 2014b34:	888001cc 	andi	r2,r17,7
 2014b38:	103f9e1e 	bne	r2,zero,20149b4 <__adddf3+0x84>
 2014b3c:	4004977a 	slli	r2,r8,29
 2014b40:	8822d0fa 	srli	r17,r17,3
 2014b44:	4010d0fa 	srli	r8,r8,3
 2014b48:	9007883a 	mov	r3,r18
 2014b4c:	1444b03a 	or	r2,r2,r17
 2014b50:	0101ffc4 	movi	r4,2047
 2014b54:	81002426 	beq	r16,r4,2014be8 <__adddf3+0x2b8>
 2014b58:	8120703a 	and	r16,r16,r4
 2014b5c:	01000434 	movhi	r4,16
 2014b60:	213fffc4 	addi	r4,r4,-1
 2014b64:	4110703a 	and	r8,r8,r4
 2014b68:	003fa806 	br	2014a0c <__adddf3+0xdc>
 2014b6c:	8089c83a 	sub	r4,r16,r2
 2014b70:	01005e0e 	bge	zero,r4,2014cec <__adddf3+0x3bc>
 2014b74:	10002b26 	beq	r2,zero,2014c24 <__adddf3+0x2f4>
 2014b78:	0081ffc4 	movi	r2,2047
 2014b7c:	80bf8b26 	beq	r16,r2,20149ac <__adddf3+0x7c>
 2014b80:	4a402034 	orhi	r9,r9,128
 2014b84:	00800e04 	movi	r2,56
 2014b88:	1100a40e 	bge	r2,r4,2014e1c <__adddf3+0x4ec>
 2014b8c:	498cb03a 	or	r6,r9,r6
 2014b90:	300ac03a 	cmpne	r5,r6,zero
 2014b94:	0013883a 	mov	r9,zero
 2014b98:	2c4b883a 	add	r5,r5,r17
 2014b9c:	2c63803a 	cmpltu	r17,r5,r17
 2014ba0:	4a11883a 	add	r8,r9,r8
 2014ba4:	8a11883a 	add	r8,r17,r8
 2014ba8:	2823883a 	mov	r17,r5
 2014bac:	4080202c 	andhi	r2,r8,128
 2014bb0:	103fe026 	beq	r2,zero,2014b34 <__adddf3+0x204>
 2014bb4:	84000044 	addi	r16,r16,1
 2014bb8:	0081ffc4 	movi	r2,2047
 2014bbc:	8080d226 	beq	r16,r2,2014f08 <__adddf3+0x5d8>
 2014bc0:	00bfe034 	movhi	r2,65408
 2014bc4:	10bfffc4 	addi	r2,r2,-1
 2014bc8:	4090703a 	and	r8,r8,r2
 2014bcc:	880ad07a 	srli	r5,r17,1
 2014bd0:	400897fa 	slli	r4,r8,31
 2014bd4:	88c0004c 	andi	r3,r17,1
 2014bd8:	28e2b03a 	or	r17,r5,r3
 2014bdc:	4010d07a 	srli	r8,r8,1
 2014be0:	2462b03a 	or	r17,r4,r17
 2014be4:	003f7106 	br	20149ac <__adddf3+0x7c>
 2014be8:	4088b03a 	or	r4,r8,r2
 2014bec:	20014526 	beq	r4,zero,2015104 <__adddf3+0x7d4>
 2014bf0:	01000434 	movhi	r4,16
 2014bf4:	42000234 	orhi	r8,r8,8
 2014bf8:	213fffc4 	addi	r4,r4,-1
 2014bfc:	4110703a 	and	r8,r8,r4
 2014c00:	003f8206 	br	2014a0c <__adddf3+0xdc>
 2014c04:	18ffffc4 	addi	r3,r3,-1
 2014c08:	1800491e 	bne	r3,zero,2014d30 <__adddf3+0x400>
 2014c0c:	898bc83a 	sub	r5,r17,r6
 2014c10:	8963803a 	cmpltu	r17,r17,r5
 2014c14:	4251c83a 	sub	r8,r8,r9
 2014c18:	4451c83a 	sub	r8,r8,r17
 2014c1c:	2823883a 	mov	r17,r5
 2014c20:	003f9f06 	br	2014aa0 <__adddf3+0x170>
 2014c24:	4984b03a 	or	r2,r9,r6
 2014c28:	103f6026 	beq	r2,zero,20149ac <__adddf3+0x7c>
 2014c2c:	213fffc4 	addi	r4,r4,-1
 2014c30:	2000931e 	bne	r4,zero,2014e80 <__adddf3+0x550>
 2014c34:	898d883a 	add	r6,r17,r6
 2014c38:	3463803a 	cmpltu	r17,r6,r17
 2014c3c:	4251883a 	add	r8,r8,r9
 2014c40:	8a11883a 	add	r8,r17,r8
 2014c44:	3023883a 	mov	r17,r6
 2014c48:	003fd806 	br	2014bac <__adddf3+0x27c>
 2014c4c:	1800541e 	bne	r3,zero,2014da0 <__adddf3+0x470>
 2014c50:	80800044 	addi	r2,r16,1
 2014c54:	1081ffcc 	andi	r2,r2,2047
 2014c58:	00c00044 	movi	r3,1
 2014c5c:	1880a00e 	bge	r3,r2,2014ee0 <__adddf3+0x5b0>
 2014c60:	8989c83a 	sub	r4,r17,r6
 2014c64:	8905803a 	cmpltu	r2,r17,r4
 2014c68:	4267c83a 	sub	r19,r8,r9
 2014c6c:	98a7c83a 	sub	r19,r19,r2
 2014c70:	9880202c 	andhi	r2,r19,128
 2014c74:	10006326 	beq	r2,zero,2014e04 <__adddf3+0x4d4>
 2014c78:	3463c83a 	sub	r17,r6,r17
 2014c7c:	4a07c83a 	sub	r3,r9,r8
 2014c80:	344d803a 	cmpltu	r6,r6,r17
 2014c84:	19a7c83a 	sub	r19,r3,r6
 2014c88:	3825883a 	mov	r18,r7
 2014c8c:	983f8a1e 	bne	r19,zero,2014ab8 <__adddf3+0x188>
 2014c90:	8809883a 	mov	r4,r17
 2014c94:	20074900 	call	2007490 <__clzsi2>
 2014c98:	10800804 	addi	r2,r2,32
 2014c9c:	10fffe04 	addi	r3,r2,-8
 2014ca0:	010007c4 	movi	r4,31
 2014ca4:	20ff890e 	bge	r4,r3,2014acc <__adddf3+0x19c>
 2014ca8:	10bff604 	addi	r2,r2,-40
 2014cac:	8884983a 	sll	r2,r17,r2
 2014cb0:	0023883a 	mov	r17,zero
 2014cb4:	1c3f8c0e 	bge	r3,r16,2014ae8 <__adddf3+0x1b8>
 2014cb8:	023fe034 	movhi	r8,65408
 2014cbc:	423fffc4 	addi	r8,r8,-1
 2014cc0:	80e1c83a 	sub	r16,r16,r3
 2014cc4:	1210703a 	and	r8,r2,r8
 2014cc8:	003f3806 	br	20149ac <__adddf3+0x7c>
 2014ccc:	9007883a 	mov	r3,r18
 2014cd0:	0011883a 	mov	r8,zero
 2014cd4:	0005883a 	mov	r2,zero
 2014cd8:	003f4c06 	br	2014a0c <__adddf3+0xdc>
 2014cdc:	498cb03a 	or	r6,r9,r6
 2014ce0:	300cc03a 	cmpne	r6,r6,zero
 2014ce4:	0007883a 	mov	r3,zero
 2014ce8:	003f6806 	br	2014a8c <__adddf3+0x15c>
 2014cec:	20009c1e 	bne	r4,zero,2014f60 <__adddf3+0x630>
 2014cf0:	80800044 	addi	r2,r16,1
 2014cf4:	1141ffcc 	andi	r5,r2,2047
 2014cf8:	01000044 	movi	r4,1
 2014cfc:	2140670e 	bge	r4,r5,2014e9c <__adddf3+0x56c>
 2014d00:	0101ffc4 	movi	r4,2047
 2014d04:	11007f26 	beq	r2,r4,2014f04 <__adddf3+0x5d4>
 2014d08:	898d883a 	add	r6,r17,r6
 2014d0c:	4247883a 	add	r3,r8,r9
 2014d10:	3451803a 	cmpltu	r8,r6,r17
 2014d14:	40d1883a 	add	r8,r8,r3
 2014d18:	402297fa 	slli	r17,r8,31
 2014d1c:	300cd07a 	srli	r6,r6,1
 2014d20:	4010d07a 	srli	r8,r8,1
 2014d24:	1021883a 	mov	r16,r2
 2014d28:	89a2b03a 	or	r17,r17,r6
 2014d2c:	003f1f06 	br	20149ac <__adddf3+0x7c>
 2014d30:	0081ffc4 	movi	r2,2047
 2014d34:	80bf481e 	bne	r16,r2,2014a58 <__adddf3+0x128>
 2014d38:	003f1c06 	br	20149ac <__adddf3+0x7c>
 2014d3c:	843ff844 	addi	r16,r16,-31
 2014d40:	01000804 	movi	r4,32
 2014d44:	1406d83a 	srl	r3,r2,r16
 2014d48:	41005026 	beq	r8,r4,2014e8c <__adddf3+0x55c>
 2014d4c:	01001004 	movi	r4,64
 2014d50:	2211c83a 	sub	r8,r4,r8
 2014d54:	1204983a 	sll	r2,r2,r8
 2014d58:	88a2b03a 	or	r17,r17,r2
 2014d5c:	8822c03a 	cmpne	r17,r17,zero
 2014d60:	1c62b03a 	or	r17,r3,r17
 2014d64:	0011883a 	mov	r8,zero
 2014d68:	0021883a 	mov	r16,zero
 2014d6c:	003f7106 	br	2014b34 <__adddf3+0x204>
 2014d70:	193ff804 	addi	r4,r3,-32
 2014d74:	00800804 	movi	r2,32
 2014d78:	4908d83a 	srl	r4,r9,r4
 2014d7c:	18804526 	beq	r3,r2,2014e94 <__adddf3+0x564>
 2014d80:	00801004 	movi	r2,64
 2014d84:	10c5c83a 	sub	r2,r2,r3
 2014d88:	4886983a 	sll	r3,r9,r2
 2014d8c:	198cb03a 	or	r6,r3,r6
 2014d90:	300cc03a 	cmpne	r6,r6,zero
 2014d94:	218cb03a 	or	r6,r4,r6
 2014d98:	0007883a 	mov	r3,zero
 2014d9c:	003f3b06 	br	2014a8c <__adddf3+0x15c>
 2014da0:	80002a26 	beq	r16,zero,2014e4c <__adddf3+0x51c>
 2014da4:	0101ffc4 	movi	r4,2047
 2014da8:	11006826 	beq	r2,r4,2014f4c <__adddf3+0x61c>
 2014dac:	00c7c83a 	sub	r3,zero,r3
 2014db0:	42002034 	orhi	r8,r8,128
 2014db4:	01000e04 	movi	r4,56
 2014db8:	20c07c16 	blt	r4,r3,2014fac <__adddf3+0x67c>
 2014dbc:	010007c4 	movi	r4,31
 2014dc0:	20c0da16 	blt	r4,r3,201512c <__adddf3+0x7fc>
 2014dc4:	01000804 	movi	r4,32
 2014dc8:	20c9c83a 	sub	r4,r4,r3
 2014dcc:	4114983a 	sll	r10,r8,r4
 2014dd0:	88cad83a 	srl	r5,r17,r3
 2014dd4:	8908983a 	sll	r4,r17,r4
 2014dd8:	40c6d83a 	srl	r3,r8,r3
 2014ddc:	5162b03a 	or	r17,r10,r5
 2014de0:	2008c03a 	cmpne	r4,r4,zero
 2014de4:	8922b03a 	or	r17,r17,r4
 2014de8:	3463c83a 	sub	r17,r6,r17
 2014dec:	48c7c83a 	sub	r3,r9,r3
 2014df0:	344d803a 	cmpltu	r6,r6,r17
 2014df4:	1991c83a 	sub	r8,r3,r6
 2014df8:	1021883a 	mov	r16,r2
 2014dfc:	3825883a 	mov	r18,r7
 2014e00:	003f2706 	br	2014aa0 <__adddf3+0x170>
 2014e04:	24d0b03a 	or	r8,r4,r19
 2014e08:	40001b1e 	bne	r8,zero,2014e78 <__adddf3+0x548>
 2014e0c:	0005883a 	mov	r2,zero
 2014e10:	0007883a 	mov	r3,zero
 2014e14:	0021883a 	mov	r16,zero
 2014e18:	003f4d06 	br	2014b50 <__adddf3+0x220>
 2014e1c:	008007c4 	movi	r2,31
 2014e20:	11003c16 	blt	r2,r4,2014f14 <__adddf3+0x5e4>
 2014e24:	00800804 	movi	r2,32
 2014e28:	1105c83a 	sub	r2,r2,r4
 2014e2c:	488e983a 	sll	r7,r9,r2
 2014e30:	310ad83a 	srl	r5,r6,r4
 2014e34:	3084983a 	sll	r2,r6,r2
 2014e38:	4912d83a 	srl	r9,r9,r4
 2014e3c:	394ab03a 	or	r5,r7,r5
 2014e40:	1004c03a 	cmpne	r2,r2,zero
 2014e44:	288ab03a 	or	r5,r5,r2
 2014e48:	003f5306 	br	2014b98 <__adddf3+0x268>
 2014e4c:	4448b03a 	or	r4,r8,r17
 2014e50:	20003e26 	beq	r4,zero,2014f4c <__adddf3+0x61c>
 2014e54:	00c6303a 	nor	r3,zero,r3
 2014e58:	18003a1e 	bne	r3,zero,2014f44 <__adddf3+0x614>
 2014e5c:	3463c83a 	sub	r17,r6,r17
 2014e60:	4a07c83a 	sub	r3,r9,r8
 2014e64:	344d803a 	cmpltu	r6,r6,r17
 2014e68:	1991c83a 	sub	r8,r3,r6
 2014e6c:	1021883a 	mov	r16,r2
 2014e70:	3825883a 	mov	r18,r7
 2014e74:	003f0a06 	br	2014aa0 <__adddf3+0x170>
 2014e78:	2023883a 	mov	r17,r4
 2014e7c:	003f0d06 	br	2014ab4 <__adddf3+0x184>
 2014e80:	0081ffc4 	movi	r2,2047
 2014e84:	80bf3f1e 	bne	r16,r2,2014b84 <__adddf3+0x254>
 2014e88:	003ec806 	br	20149ac <__adddf3+0x7c>
 2014e8c:	0005883a 	mov	r2,zero
 2014e90:	003fb106 	br	2014d58 <__adddf3+0x428>
 2014e94:	0007883a 	mov	r3,zero
 2014e98:	003fbc06 	br	2014d8c <__adddf3+0x45c>
 2014e9c:	4444b03a 	or	r2,r8,r17
 2014ea0:	8000871e 	bne	r16,zero,20150c0 <__adddf3+0x790>
 2014ea4:	1000ba26 	beq	r2,zero,2015190 <__adddf3+0x860>
 2014ea8:	4984b03a 	or	r2,r9,r6
 2014eac:	103ebf26 	beq	r2,zero,20149ac <__adddf3+0x7c>
 2014eb0:	8985883a 	add	r2,r17,r6
 2014eb4:	4247883a 	add	r3,r8,r9
 2014eb8:	1451803a 	cmpltu	r8,r2,r17
 2014ebc:	40d1883a 	add	r8,r8,r3
 2014ec0:	40c0202c 	andhi	r3,r8,128
 2014ec4:	1023883a 	mov	r17,r2
 2014ec8:	183f1a26 	beq	r3,zero,2014b34 <__adddf3+0x204>
 2014ecc:	00bfe034 	movhi	r2,65408
 2014ed0:	10bfffc4 	addi	r2,r2,-1
 2014ed4:	2021883a 	mov	r16,r4
 2014ed8:	4090703a 	and	r8,r8,r2
 2014edc:	003eb306 	br	20149ac <__adddf3+0x7c>
 2014ee0:	4444b03a 	or	r2,r8,r17
 2014ee4:	8000291e 	bne	r16,zero,2014f8c <__adddf3+0x65c>
 2014ee8:	10004b1e 	bne	r2,zero,2015018 <__adddf3+0x6e8>
 2014eec:	4990b03a 	or	r8,r9,r6
 2014ef0:	40008b26 	beq	r8,zero,2015120 <__adddf3+0x7f0>
 2014ef4:	4811883a 	mov	r8,r9
 2014ef8:	3023883a 	mov	r17,r6
 2014efc:	3825883a 	mov	r18,r7
 2014f00:	003eaa06 	br	20149ac <__adddf3+0x7c>
 2014f04:	1021883a 	mov	r16,r2
 2014f08:	0011883a 	mov	r8,zero
 2014f0c:	0005883a 	mov	r2,zero
 2014f10:	003f0f06 	br	2014b50 <__adddf3+0x220>
 2014f14:	217ff804 	addi	r5,r4,-32
 2014f18:	00800804 	movi	r2,32
 2014f1c:	494ad83a 	srl	r5,r9,r5
 2014f20:	20807d26 	beq	r4,r2,2015118 <__adddf3+0x7e8>
 2014f24:	00801004 	movi	r2,64
 2014f28:	1109c83a 	sub	r4,r2,r4
 2014f2c:	4912983a 	sll	r9,r9,r4
 2014f30:	498cb03a 	or	r6,r9,r6
 2014f34:	300cc03a 	cmpne	r6,r6,zero
 2014f38:	298ab03a 	or	r5,r5,r6
 2014f3c:	0013883a 	mov	r9,zero
 2014f40:	003f1506 	br	2014b98 <__adddf3+0x268>
 2014f44:	0101ffc4 	movi	r4,2047
 2014f48:	113f9a1e 	bne	r2,r4,2014db4 <__adddf3+0x484>
 2014f4c:	4811883a 	mov	r8,r9
 2014f50:	3023883a 	mov	r17,r6
 2014f54:	1021883a 	mov	r16,r2
 2014f58:	3825883a 	mov	r18,r7
 2014f5c:	003e9306 	br	20149ac <__adddf3+0x7c>
 2014f60:	8000161e 	bne	r16,zero,2014fbc <__adddf3+0x68c>
 2014f64:	444ab03a 	or	r5,r8,r17
 2014f68:	28005126 	beq	r5,zero,20150b0 <__adddf3+0x780>
 2014f6c:	0108303a 	nor	r4,zero,r4
 2014f70:	20004d1e 	bne	r4,zero,20150a8 <__adddf3+0x778>
 2014f74:	89a3883a 	add	r17,r17,r6
 2014f78:	4253883a 	add	r9,r8,r9
 2014f7c:	898d803a 	cmpltu	r6,r17,r6
 2014f80:	3251883a 	add	r8,r6,r9
 2014f84:	1021883a 	mov	r16,r2
 2014f88:	003f0806 	br	2014bac <__adddf3+0x27c>
 2014f8c:	1000301e 	bne	r2,zero,2015050 <__adddf3+0x720>
 2014f90:	4984b03a 	or	r2,r9,r6
 2014f94:	10007126 	beq	r2,zero,201515c <__adddf3+0x82c>
 2014f98:	4811883a 	mov	r8,r9
 2014f9c:	3023883a 	mov	r17,r6
 2014fa0:	3825883a 	mov	r18,r7
 2014fa4:	0401ffc4 	movi	r16,2047
 2014fa8:	003e8006 	br	20149ac <__adddf3+0x7c>
 2014fac:	4462b03a 	or	r17,r8,r17
 2014fb0:	8822c03a 	cmpne	r17,r17,zero
 2014fb4:	0007883a 	mov	r3,zero
 2014fb8:	003f8b06 	br	2014de8 <__adddf3+0x4b8>
 2014fbc:	0141ffc4 	movi	r5,2047
 2014fc0:	11403b26 	beq	r2,r5,20150b0 <__adddf3+0x780>
 2014fc4:	0109c83a 	sub	r4,zero,r4
 2014fc8:	42002034 	orhi	r8,r8,128
 2014fcc:	01400e04 	movi	r5,56
 2014fd0:	29006716 	blt	r5,r4,2015170 <__adddf3+0x840>
 2014fd4:	014007c4 	movi	r5,31
 2014fd8:	29007016 	blt	r5,r4,201519c <__adddf3+0x86c>
 2014fdc:	01400804 	movi	r5,32
 2014fe0:	290bc83a 	sub	r5,r5,r4
 2014fe4:	4154983a 	sll	r10,r8,r5
 2014fe8:	890ed83a 	srl	r7,r17,r4
 2014fec:	894a983a 	sll	r5,r17,r5
 2014ff0:	4108d83a 	srl	r4,r8,r4
 2014ff4:	51e2b03a 	or	r17,r10,r7
 2014ff8:	280ac03a 	cmpne	r5,r5,zero
 2014ffc:	8962b03a 	or	r17,r17,r5
 2015000:	89a3883a 	add	r17,r17,r6
 2015004:	2253883a 	add	r9,r4,r9
 2015008:	898d803a 	cmpltu	r6,r17,r6
 201500c:	3251883a 	add	r8,r6,r9
 2015010:	1021883a 	mov	r16,r2
 2015014:	003ee506 	br	2014bac <__adddf3+0x27c>
 2015018:	4984b03a 	or	r2,r9,r6
 201501c:	103e6326 	beq	r2,zero,20149ac <__adddf3+0x7c>
 2015020:	8987c83a 	sub	r3,r17,r6
 2015024:	88c9803a 	cmpltu	r4,r17,r3
 2015028:	4245c83a 	sub	r2,r8,r9
 201502c:	1105c83a 	sub	r2,r2,r4
 2015030:	1100202c 	andhi	r4,r2,128
 2015034:	203ebb26 	beq	r4,zero,2014b24 <__adddf3+0x1f4>
 2015038:	3463c83a 	sub	r17,r6,r17
 201503c:	4a07c83a 	sub	r3,r9,r8
 2015040:	344d803a 	cmpltu	r6,r6,r17
 2015044:	1991c83a 	sub	r8,r3,r6
 2015048:	3825883a 	mov	r18,r7
 201504c:	003e5706 	br	20149ac <__adddf3+0x7c>
 2015050:	4984b03a 	or	r2,r9,r6
 2015054:	10002e26 	beq	r2,zero,2015110 <__adddf3+0x7e0>
 2015058:	4004d0fa 	srli	r2,r8,3
 201505c:	8822d0fa 	srli	r17,r17,3
 2015060:	4010977a 	slli	r8,r8,29
 2015064:	10c0022c 	andhi	r3,r2,8
 2015068:	4462b03a 	or	r17,r8,r17
 201506c:	18000826 	beq	r3,zero,2015090 <__adddf3+0x760>
 2015070:	4808d0fa 	srli	r4,r9,3
 2015074:	20c0022c 	andhi	r3,r4,8
 2015078:	1800051e 	bne	r3,zero,2015090 <__adddf3+0x760>
 201507c:	300cd0fa 	srli	r6,r6,3
 2015080:	4806977a 	slli	r3,r9,29
 2015084:	2005883a 	mov	r2,r4
 2015088:	3825883a 	mov	r18,r7
 201508c:	19a2b03a 	or	r17,r3,r6
 2015090:	8810d77a 	srli	r8,r17,29
 2015094:	100490fa 	slli	r2,r2,3
 2015098:	882290fa 	slli	r17,r17,3
 201509c:	0401ffc4 	movi	r16,2047
 20150a0:	4090b03a 	or	r8,r8,r2
 20150a4:	003e4106 	br	20149ac <__adddf3+0x7c>
 20150a8:	0141ffc4 	movi	r5,2047
 20150ac:	117fc71e 	bne	r2,r5,2014fcc <__adddf3+0x69c>
 20150b0:	4811883a 	mov	r8,r9
 20150b4:	3023883a 	mov	r17,r6
 20150b8:	1021883a 	mov	r16,r2
 20150bc:	003e3b06 	br	20149ac <__adddf3+0x7c>
 20150c0:	10002f26 	beq	r2,zero,2015180 <__adddf3+0x850>
 20150c4:	4984b03a 	or	r2,r9,r6
 20150c8:	10001126 	beq	r2,zero,2015110 <__adddf3+0x7e0>
 20150cc:	4004d0fa 	srli	r2,r8,3
 20150d0:	8822d0fa 	srli	r17,r17,3
 20150d4:	4010977a 	slli	r8,r8,29
 20150d8:	10c0022c 	andhi	r3,r2,8
 20150dc:	4462b03a 	or	r17,r8,r17
 20150e0:	183feb26 	beq	r3,zero,2015090 <__adddf3+0x760>
 20150e4:	4808d0fa 	srli	r4,r9,3
 20150e8:	20c0022c 	andhi	r3,r4,8
 20150ec:	183fe81e 	bne	r3,zero,2015090 <__adddf3+0x760>
 20150f0:	300cd0fa 	srli	r6,r6,3
 20150f4:	4806977a 	slli	r3,r9,29
 20150f8:	2005883a 	mov	r2,r4
 20150fc:	19a2b03a 	or	r17,r3,r6
 2015100:	003fe306 	br	2015090 <__adddf3+0x760>
 2015104:	0011883a 	mov	r8,zero
 2015108:	0005883a 	mov	r2,zero
 201510c:	003e3f06 	br	2014a0c <__adddf3+0xdc>
 2015110:	0401ffc4 	movi	r16,2047
 2015114:	003e2506 	br	20149ac <__adddf3+0x7c>
 2015118:	0013883a 	mov	r9,zero
 201511c:	003f8406 	br	2014f30 <__adddf3+0x600>
 2015120:	0005883a 	mov	r2,zero
 2015124:	0007883a 	mov	r3,zero
 2015128:	003e8906 	br	2014b50 <__adddf3+0x220>
 201512c:	197ff804 	addi	r5,r3,-32
 2015130:	01000804 	movi	r4,32
 2015134:	414ad83a 	srl	r5,r8,r5
 2015138:	19002426 	beq	r3,r4,20151cc <__adddf3+0x89c>
 201513c:	01001004 	movi	r4,64
 2015140:	20c7c83a 	sub	r3,r4,r3
 2015144:	40c6983a 	sll	r3,r8,r3
 2015148:	1c46b03a 	or	r3,r3,r17
 201514c:	1806c03a 	cmpne	r3,r3,zero
 2015150:	28e2b03a 	or	r17,r5,r3
 2015154:	0007883a 	mov	r3,zero
 2015158:	003f2306 	br	2014de8 <__adddf3+0x4b8>
 201515c:	0007883a 	mov	r3,zero
 2015160:	5811883a 	mov	r8,r11
 2015164:	00bfffc4 	movi	r2,-1
 2015168:	0401ffc4 	movi	r16,2047
 201516c:	003e7806 	br	2014b50 <__adddf3+0x220>
 2015170:	4462b03a 	or	r17,r8,r17
 2015174:	8822c03a 	cmpne	r17,r17,zero
 2015178:	0009883a 	mov	r4,zero
 201517c:	003fa006 	br	2015000 <__adddf3+0x6d0>
 2015180:	4811883a 	mov	r8,r9
 2015184:	3023883a 	mov	r17,r6
 2015188:	0401ffc4 	movi	r16,2047
 201518c:	003e0706 	br	20149ac <__adddf3+0x7c>
 2015190:	4811883a 	mov	r8,r9
 2015194:	3023883a 	mov	r17,r6
 2015198:	003e0406 	br	20149ac <__adddf3+0x7c>
 201519c:	21fff804 	addi	r7,r4,-32
 20151a0:	01400804 	movi	r5,32
 20151a4:	41ced83a 	srl	r7,r8,r7
 20151a8:	21400a26 	beq	r4,r5,20151d4 <__adddf3+0x8a4>
 20151ac:	01401004 	movi	r5,64
 20151b0:	2909c83a 	sub	r4,r5,r4
 20151b4:	4108983a 	sll	r4,r8,r4
 20151b8:	2448b03a 	or	r4,r4,r17
 20151bc:	2008c03a 	cmpne	r4,r4,zero
 20151c0:	3922b03a 	or	r17,r7,r4
 20151c4:	0009883a 	mov	r4,zero
 20151c8:	003f8d06 	br	2015000 <__adddf3+0x6d0>
 20151cc:	0007883a 	mov	r3,zero
 20151d0:	003fdd06 	br	2015148 <__adddf3+0x818>
 20151d4:	0009883a 	mov	r4,zero
 20151d8:	003ff706 	br	20151b8 <__adddf3+0x888>

020151dc <__subdf3>:
 20151dc:	02000434 	movhi	r8,16
 20151e0:	423fffc4 	addi	r8,r8,-1
 20151e4:	defffb04 	addi	sp,sp,-20
 20151e8:	2a14703a 	and	r10,r5,r8
 20151ec:	3812d53a 	srli	r9,r7,20
 20151f0:	3a10703a 	and	r8,r7,r8
 20151f4:	2006d77a 	srli	r3,r4,29
 20151f8:	3004d77a 	srli	r2,r6,29
 20151fc:	dc000015 	stw	r16,0(sp)
 2015200:	501490fa 	slli	r10,r10,3
 2015204:	2820d53a 	srli	r16,r5,20
 2015208:	401090fa 	slli	r8,r8,3
 201520c:	dc800215 	stw	r18,8(sp)
 2015210:	dc400115 	stw	r17,4(sp)
 2015214:	dfc00415 	stw	ra,16(sp)
 2015218:	202290fa 	slli	r17,r4,3
 201521c:	dcc00315 	stw	r19,12(sp)
 2015220:	4a41ffcc 	andi	r9,r9,2047
 2015224:	0101ffc4 	movi	r4,2047
 2015228:	2824d7fa 	srli	r18,r5,31
 201522c:	8401ffcc 	andi	r16,r16,2047
 2015230:	50c6b03a 	or	r3,r10,r3
 2015234:	380ed7fa 	srli	r7,r7,31
 2015238:	408ab03a 	or	r5,r8,r2
 201523c:	300c90fa 	slli	r6,r6,3
 2015240:	49009626 	beq	r9,r4,201549c <__subdf3+0x2c0>
 2015244:	39c0005c 	xori	r7,r7,1
 2015248:	8245c83a 	sub	r2,r16,r9
 201524c:	3c807426 	beq	r7,r18,2015420 <__subdf3+0x244>
 2015250:	0080af0e 	bge	zero,r2,2015510 <__subdf3+0x334>
 2015254:	48002a1e 	bne	r9,zero,2015300 <__subdf3+0x124>
 2015258:	2988b03a 	or	r4,r5,r6
 201525c:	20009a1e 	bne	r4,zero,20154c8 <__subdf3+0x2ec>
 2015260:	888001cc 	andi	r2,r17,7
 2015264:	10000726 	beq	r2,zero,2015284 <__subdf3+0xa8>
 2015268:	888003cc 	andi	r2,r17,15
 201526c:	01000104 	movi	r4,4
 2015270:	11000426 	beq	r2,r4,2015284 <__subdf3+0xa8>
 2015274:	890b883a 	add	r5,r17,r4
 2015278:	2c63803a 	cmpltu	r17,r5,r17
 201527c:	1c47883a 	add	r3,r3,r17
 2015280:	2823883a 	mov	r17,r5
 2015284:	1880202c 	andhi	r2,r3,128
 2015288:	10005926 	beq	r2,zero,20153f0 <__subdf3+0x214>
 201528c:	84000044 	addi	r16,r16,1
 2015290:	0081ffc4 	movi	r2,2047
 2015294:	8080be26 	beq	r16,r2,2015590 <__subdf3+0x3b4>
 2015298:	017fe034 	movhi	r5,65408
 201529c:	297fffc4 	addi	r5,r5,-1
 20152a0:	1946703a 	and	r3,r3,r5
 20152a4:	1804977a 	slli	r2,r3,29
 20152a8:	1806927a 	slli	r3,r3,9
 20152ac:	8822d0fa 	srli	r17,r17,3
 20152b0:	8401ffcc 	andi	r16,r16,2047
 20152b4:	180ad33a 	srli	r5,r3,12
 20152b8:	9100004c 	andi	r4,r18,1
 20152bc:	1444b03a 	or	r2,r2,r17
 20152c0:	80c1ffcc 	andi	r3,r16,2047
 20152c4:	1820953a 	slli	r16,r3,20
 20152c8:	20c03fcc 	andi	r3,r4,255
 20152cc:	180897fa 	slli	r4,r3,31
 20152d0:	00c00434 	movhi	r3,16
 20152d4:	18ffffc4 	addi	r3,r3,-1
 20152d8:	28c6703a 	and	r3,r5,r3
 20152dc:	1c06b03a 	or	r3,r3,r16
 20152e0:	1906b03a 	or	r3,r3,r4
 20152e4:	dfc00417 	ldw	ra,16(sp)
 20152e8:	dcc00317 	ldw	r19,12(sp)
 20152ec:	dc800217 	ldw	r18,8(sp)
 20152f0:	dc400117 	ldw	r17,4(sp)
 20152f4:	dc000017 	ldw	r16,0(sp)
 20152f8:	dec00504 	addi	sp,sp,20
 20152fc:	f800283a 	ret
 2015300:	0101ffc4 	movi	r4,2047
 2015304:	813fd626 	beq	r16,r4,2015260 <__subdf3+0x84>
 2015308:	29402034 	orhi	r5,r5,128
 201530c:	01000e04 	movi	r4,56
 2015310:	2080a316 	blt	r4,r2,20155a0 <__subdf3+0x3c4>
 2015314:	010007c4 	movi	r4,31
 2015318:	2080c616 	blt	r4,r2,2015634 <__subdf3+0x458>
 201531c:	01000804 	movi	r4,32
 2015320:	2089c83a 	sub	r4,r4,r2
 2015324:	2910983a 	sll	r8,r5,r4
 2015328:	308ed83a 	srl	r7,r6,r2
 201532c:	3108983a 	sll	r4,r6,r4
 2015330:	2884d83a 	srl	r2,r5,r2
 2015334:	41ccb03a 	or	r6,r8,r7
 2015338:	2008c03a 	cmpne	r4,r4,zero
 201533c:	310cb03a 	or	r6,r6,r4
 2015340:	898dc83a 	sub	r6,r17,r6
 2015344:	89a3803a 	cmpltu	r17,r17,r6
 2015348:	1887c83a 	sub	r3,r3,r2
 201534c:	1c47c83a 	sub	r3,r3,r17
 2015350:	3023883a 	mov	r17,r6
 2015354:	1880202c 	andhi	r2,r3,128
 2015358:	10002326 	beq	r2,zero,20153e8 <__subdf3+0x20c>
 201535c:	04c02034 	movhi	r19,128
 2015360:	9cffffc4 	addi	r19,r19,-1
 2015364:	1ce6703a 	and	r19,r3,r19
 2015368:	98007a26 	beq	r19,zero,2015554 <__subdf3+0x378>
 201536c:	9809883a 	mov	r4,r19
 2015370:	20074900 	call	2007490 <__clzsi2>
 2015374:	113ffe04 	addi	r4,r2,-8
 2015378:	00c007c4 	movi	r3,31
 201537c:	19007b16 	blt	r3,r4,201556c <__subdf3+0x390>
 2015380:	00800804 	movi	r2,32
 2015384:	1105c83a 	sub	r2,r2,r4
 2015388:	8884d83a 	srl	r2,r17,r2
 201538c:	9906983a 	sll	r3,r19,r4
 2015390:	8922983a 	sll	r17,r17,r4
 2015394:	10c4b03a 	or	r2,r2,r3
 2015398:	24007816 	blt	r4,r16,201557c <__subdf3+0x3a0>
 201539c:	2421c83a 	sub	r16,r4,r16
 20153a0:	80c00044 	addi	r3,r16,1
 20153a4:	010007c4 	movi	r4,31
 20153a8:	20c09516 	blt	r4,r3,2015600 <__subdf3+0x424>
 20153ac:	01400804 	movi	r5,32
 20153b0:	28cbc83a 	sub	r5,r5,r3
 20153b4:	88c8d83a 	srl	r4,r17,r3
 20153b8:	8962983a 	sll	r17,r17,r5
 20153bc:	114a983a 	sll	r5,r2,r5
 20153c0:	10c6d83a 	srl	r3,r2,r3
 20153c4:	8804c03a 	cmpne	r2,r17,zero
 20153c8:	290ab03a 	or	r5,r5,r4
 20153cc:	28a2b03a 	or	r17,r5,r2
 20153d0:	0021883a 	mov	r16,zero
 20153d4:	003fa206 	br	2015260 <__subdf3+0x84>
 20153d8:	2090b03a 	or	r8,r4,r2
 20153dc:	40018e26 	beq	r8,zero,2015a18 <__subdf3+0x83c>
 20153e0:	1007883a 	mov	r3,r2
 20153e4:	2023883a 	mov	r17,r4
 20153e8:	888001cc 	andi	r2,r17,7
 20153ec:	103f9e1e 	bne	r2,zero,2015268 <__subdf3+0x8c>
 20153f0:	1804977a 	slli	r2,r3,29
 20153f4:	8822d0fa 	srli	r17,r17,3
 20153f8:	1810d0fa 	srli	r8,r3,3
 20153fc:	9100004c 	andi	r4,r18,1
 2015400:	1444b03a 	or	r2,r2,r17
 2015404:	00c1ffc4 	movi	r3,2047
 2015408:	80c02826 	beq	r16,r3,20154ac <__subdf3+0x2d0>
 201540c:	01400434 	movhi	r5,16
 2015410:	297fffc4 	addi	r5,r5,-1
 2015414:	80e0703a 	and	r16,r16,r3
 2015418:	414a703a 	and	r5,r8,r5
 201541c:	003fa806 	br	20152c0 <__subdf3+0xe4>
 2015420:	0080630e 	bge	zero,r2,20155b0 <__subdf3+0x3d4>
 2015424:	48003026 	beq	r9,zero,20154e8 <__subdf3+0x30c>
 2015428:	0101ffc4 	movi	r4,2047
 201542c:	813f8c26 	beq	r16,r4,2015260 <__subdf3+0x84>
 2015430:	29402034 	orhi	r5,r5,128
 2015434:	01000e04 	movi	r4,56
 2015438:	2080a90e 	bge	r4,r2,20156e0 <__subdf3+0x504>
 201543c:	298cb03a 	or	r6,r5,r6
 2015440:	3012c03a 	cmpne	r9,r6,zero
 2015444:	0005883a 	mov	r2,zero
 2015448:	4c53883a 	add	r9,r9,r17
 201544c:	4c63803a 	cmpltu	r17,r9,r17
 2015450:	10c7883a 	add	r3,r2,r3
 2015454:	88c7883a 	add	r3,r17,r3
 2015458:	4823883a 	mov	r17,r9
 201545c:	1880202c 	andhi	r2,r3,128
 2015460:	1000d026 	beq	r2,zero,20157a4 <__subdf3+0x5c8>
 2015464:	84000044 	addi	r16,r16,1
 2015468:	0081ffc4 	movi	r2,2047
 201546c:	8080fe26 	beq	r16,r2,2015868 <__subdf3+0x68c>
 2015470:	00bfe034 	movhi	r2,65408
 2015474:	10bfffc4 	addi	r2,r2,-1
 2015478:	1886703a 	and	r3,r3,r2
 201547c:	880ad07a 	srli	r5,r17,1
 2015480:	180497fa 	slli	r2,r3,31
 2015484:	8900004c 	andi	r4,r17,1
 2015488:	2922b03a 	or	r17,r5,r4
 201548c:	1806d07a 	srli	r3,r3,1
 2015490:	1462b03a 	or	r17,r2,r17
 2015494:	3825883a 	mov	r18,r7
 2015498:	003f7106 	br	2015260 <__subdf3+0x84>
 201549c:	2984b03a 	or	r2,r5,r6
 20154a0:	103f6826 	beq	r2,zero,2015244 <__subdf3+0x68>
 20154a4:	39c03fcc 	andi	r7,r7,255
 20154a8:	003f6706 	br	2015248 <__subdf3+0x6c>
 20154ac:	4086b03a 	or	r3,r8,r2
 20154b0:	18015226 	beq	r3,zero,20159fc <__subdf3+0x820>
 20154b4:	00c00434 	movhi	r3,16
 20154b8:	41400234 	orhi	r5,r8,8
 20154bc:	18ffffc4 	addi	r3,r3,-1
 20154c0:	28ca703a 	and	r5,r5,r3
 20154c4:	003f7e06 	br	20152c0 <__subdf3+0xe4>
 20154c8:	10bfffc4 	addi	r2,r2,-1
 20154cc:	1000491e 	bne	r2,zero,20155f4 <__subdf3+0x418>
 20154d0:	898fc83a 	sub	r7,r17,r6
 20154d4:	89e3803a 	cmpltu	r17,r17,r7
 20154d8:	1947c83a 	sub	r3,r3,r5
 20154dc:	1c47c83a 	sub	r3,r3,r17
 20154e0:	3823883a 	mov	r17,r7
 20154e4:	003f9b06 	br	2015354 <__subdf3+0x178>
 20154e8:	2988b03a 	or	r4,r5,r6
 20154ec:	203f5c26 	beq	r4,zero,2015260 <__subdf3+0x84>
 20154f0:	10bfffc4 	addi	r2,r2,-1
 20154f4:	1000931e 	bne	r2,zero,2015744 <__subdf3+0x568>
 20154f8:	898d883a 	add	r6,r17,r6
 20154fc:	3463803a 	cmpltu	r17,r6,r17
 2015500:	1947883a 	add	r3,r3,r5
 2015504:	88c7883a 	add	r3,r17,r3
 2015508:	3023883a 	mov	r17,r6
 201550c:	003fd306 	br	201545c <__subdf3+0x280>
 2015510:	1000541e 	bne	r2,zero,2015664 <__subdf3+0x488>
 2015514:	80800044 	addi	r2,r16,1
 2015518:	1081ffcc 	andi	r2,r2,2047
 201551c:	01000044 	movi	r4,1
 2015520:	2080a20e 	bge	r4,r2,20157ac <__subdf3+0x5d0>
 2015524:	8989c83a 	sub	r4,r17,r6
 2015528:	8905803a 	cmpltu	r2,r17,r4
 201552c:	1967c83a 	sub	r19,r3,r5
 2015530:	98a7c83a 	sub	r19,r19,r2
 2015534:	9880202c 	andhi	r2,r19,128
 2015538:	10006326 	beq	r2,zero,20156c8 <__subdf3+0x4ec>
 201553c:	3463c83a 	sub	r17,r6,r17
 2015540:	28c7c83a 	sub	r3,r5,r3
 2015544:	344d803a 	cmpltu	r6,r6,r17
 2015548:	19a7c83a 	sub	r19,r3,r6
 201554c:	3825883a 	mov	r18,r7
 2015550:	983f861e 	bne	r19,zero,201536c <__subdf3+0x190>
 2015554:	8809883a 	mov	r4,r17
 2015558:	20074900 	call	2007490 <__clzsi2>
 201555c:	10800804 	addi	r2,r2,32
 2015560:	113ffe04 	addi	r4,r2,-8
 2015564:	00c007c4 	movi	r3,31
 2015568:	193f850e 	bge	r3,r4,2015380 <__subdf3+0x1a4>
 201556c:	10bff604 	addi	r2,r2,-40
 2015570:	8884983a 	sll	r2,r17,r2
 2015574:	0023883a 	mov	r17,zero
 2015578:	243f880e 	bge	r4,r16,201539c <__subdf3+0x1c0>
 201557c:	00ffe034 	movhi	r3,65408
 2015580:	18ffffc4 	addi	r3,r3,-1
 2015584:	8121c83a 	sub	r16,r16,r4
 2015588:	10c6703a 	and	r3,r2,r3
 201558c:	003f3406 	br	2015260 <__subdf3+0x84>
 2015590:	9100004c 	andi	r4,r18,1
 2015594:	000b883a 	mov	r5,zero
 2015598:	0005883a 	mov	r2,zero
 201559c:	003f4806 	br	20152c0 <__subdf3+0xe4>
 20155a0:	298cb03a 	or	r6,r5,r6
 20155a4:	300cc03a 	cmpne	r6,r6,zero
 20155a8:	0005883a 	mov	r2,zero
 20155ac:	003f6406 	br	2015340 <__subdf3+0x164>
 20155b0:	10009a1e 	bne	r2,zero,201581c <__subdf3+0x640>
 20155b4:	82400044 	addi	r9,r16,1
 20155b8:	4881ffcc 	andi	r2,r9,2047
 20155bc:	02800044 	movi	r10,1
 20155c0:	5080670e 	bge	r10,r2,2015760 <__subdf3+0x584>
 20155c4:	0081ffc4 	movi	r2,2047
 20155c8:	4880af26 	beq	r9,r2,2015888 <__subdf3+0x6ac>
 20155cc:	898d883a 	add	r6,r17,r6
 20155d0:	1945883a 	add	r2,r3,r5
 20155d4:	3447803a 	cmpltu	r3,r6,r17
 20155d8:	1887883a 	add	r3,r3,r2
 20155dc:	182297fa 	slli	r17,r3,31
 20155e0:	300cd07a 	srli	r6,r6,1
 20155e4:	1806d07a 	srli	r3,r3,1
 20155e8:	4821883a 	mov	r16,r9
 20155ec:	89a2b03a 	or	r17,r17,r6
 20155f0:	003f1b06 	br	2015260 <__subdf3+0x84>
 20155f4:	0101ffc4 	movi	r4,2047
 20155f8:	813f441e 	bne	r16,r4,201530c <__subdf3+0x130>
 20155fc:	003f1806 	br	2015260 <__subdf3+0x84>
 2015600:	843ff844 	addi	r16,r16,-31
 2015604:	01400804 	movi	r5,32
 2015608:	1408d83a 	srl	r4,r2,r16
 201560c:	19405026 	beq	r3,r5,2015750 <__subdf3+0x574>
 2015610:	01401004 	movi	r5,64
 2015614:	28c7c83a 	sub	r3,r5,r3
 2015618:	10c4983a 	sll	r2,r2,r3
 201561c:	88a2b03a 	or	r17,r17,r2
 2015620:	8822c03a 	cmpne	r17,r17,zero
 2015624:	2462b03a 	or	r17,r4,r17
 2015628:	0007883a 	mov	r3,zero
 201562c:	0021883a 	mov	r16,zero
 2015630:	003f6d06 	br	20153e8 <__subdf3+0x20c>
 2015634:	11fff804 	addi	r7,r2,-32
 2015638:	01000804 	movi	r4,32
 201563c:	29ced83a 	srl	r7,r5,r7
 2015640:	11004526 	beq	r2,r4,2015758 <__subdf3+0x57c>
 2015644:	01001004 	movi	r4,64
 2015648:	2089c83a 	sub	r4,r4,r2
 201564c:	2904983a 	sll	r2,r5,r4
 2015650:	118cb03a 	or	r6,r2,r6
 2015654:	300cc03a 	cmpne	r6,r6,zero
 2015658:	398cb03a 	or	r6,r7,r6
 201565c:	0005883a 	mov	r2,zero
 2015660:	003f3706 	br	2015340 <__subdf3+0x164>
 2015664:	80002a26 	beq	r16,zero,2015710 <__subdf3+0x534>
 2015668:	0101ffc4 	movi	r4,2047
 201566c:	49006626 	beq	r9,r4,2015808 <__subdf3+0x62c>
 2015670:	0085c83a 	sub	r2,zero,r2
 2015674:	18c02034 	orhi	r3,r3,128
 2015678:	01000e04 	movi	r4,56
 201567c:	20807e16 	blt	r4,r2,2015878 <__subdf3+0x69c>
 2015680:	010007c4 	movi	r4,31
 2015684:	2080e716 	blt	r4,r2,2015a24 <__subdf3+0x848>
 2015688:	01000804 	movi	r4,32
 201568c:	2089c83a 	sub	r4,r4,r2
 2015690:	1914983a 	sll	r10,r3,r4
 2015694:	8890d83a 	srl	r8,r17,r2
 2015698:	8908983a 	sll	r4,r17,r4
 201569c:	1884d83a 	srl	r2,r3,r2
 20156a0:	5222b03a 	or	r17,r10,r8
 20156a4:	2006c03a 	cmpne	r3,r4,zero
 20156a8:	88e2b03a 	or	r17,r17,r3
 20156ac:	3463c83a 	sub	r17,r6,r17
 20156b0:	2885c83a 	sub	r2,r5,r2
 20156b4:	344d803a 	cmpltu	r6,r6,r17
 20156b8:	1187c83a 	sub	r3,r2,r6
 20156bc:	4821883a 	mov	r16,r9
 20156c0:	3825883a 	mov	r18,r7
 20156c4:	003f2306 	br	2015354 <__subdf3+0x178>
 20156c8:	24d0b03a 	or	r8,r4,r19
 20156cc:	40001b1e 	bne	r8,zero,201573c <__subdf3+0x560>
 20156d0:	0005883a 	mov	r2,zero
 20156d4:	0009883a 	mov	r4,zero
 20156d8:	0021883a 	mov	r16,zero
 20156dc:	003f4906 	br	2015404 <__subdf3+0x228>
 20156e0:	010007c4 	movi	r4,31
 20156e4:	20803a16 	blt	r4,r2,20157d0 <__subdf3+0x5f4>
 20156e8:	01000804 	movi	r4,32
 20156ec:	2089c83a 	sub	r4,r4,r2
 20156f0:	2912983a 	sll	r9,r5,r4
 20156f4:	3090d83a 	srl	r8,r6,r2
 20156f8:	3108983a 	sll	r4,r6,r4
 20156fc:	2884d83a 	srl	r2,r5,r2
 2015700:	4a12b03a 	or	r9,r9,r8
 2015704:	2008c03a 	cmpne	r4,r4,zero
 2015708:	4912b03a 	or	r9,r9,r4
 201570c:	003f4e06 	br	2015448 <__subdf3+0x26c>
 2015710:	1c48b03a 	or	r4,r3,r17
 2015714:	20003c26 	beq	r4,zero,2015808 <__subdf3+0x62c>
 2015718:	0084303a 	nor	r2,zero,r2
 201571c:	1000381e 	bne	r2,zero,2015800 <__subdf3+0x624>
 2015720:	3463c83a 	sub	r17,r6,r17
 2015724:	28c5c83a 	sub	r2,r5,r3
 2015728:	344d803a 	cmpltu	r6,r6,r17
 201572c:	1187c83a 	sub	r3,r2,r6
 2015730:	4821883a 	mov	r16,r9
 2015734:	3825883a 	mov	r18,r7
 2015738:	003f0606 	br	2015354 <__subdf3+0x178>
 201573c:	2023883a 	mov	r17,r4
 2015740:	003f0906 	br	2015368 <__subdf3+0x18c>
 2015744:	0101ffc4 	movi	r4,2047
 2015748:	813f3a1e 	bne	r16,r4,2015434 <__subdf3+0x258>
 201574c:	003ec406 	br	2015260 <__subdf3+0x84>
 2015750:	0005883a 	mov	r2,zero
 2015754:	003fb106 	br	201561c <__subdf3+0x440>
 2015758:	0005883a 	mov	r2,zero
 201575c:	003fbc06 	br	2015650 <__subdf3+0x474>
 2015760:	1c44b03a 	or	r2,r3,r17
 2015764:	80008e1e 	bne	r16,zero,20159a0 <__subdf3+0x7c4>
 2015768:	1000c826 	beq	r2,zero,2015a8c <__subdf3+0x8b0>
 201576c:	2984b03a 	or	r2,r5,r6
 2015770:	103ebb26 	beq	r2,zero,2015260 <__subdf3+0x84>
 2015774:	8989883a 	add	r4,r17,r6
 2015778:	1945883a 	add	r2,r3,r5
 201577c:	2447803a 	cmpltu	r3,r4,r17
 2015780:	1887883a 	add	r3,r3,r2
 2015784:	1880202c 	andhi	r2,r3,128
 2015788:	2023883a 	mov	r17,r4
 201578c:	103f1626 	beq	r2,zero,20153e8 <__subdf3+0x20c>
 2015790:	00bfe034 	movhi	r2,65408
 2015794:	10bfffc4 	addi	r2,r2,-1
 2015798:	5021883a 	mov	r16,r10
 201579c:	1886703a 	and	r3,r3,r2
 20157a0:	003eaf06 	br	2015260 <__subdf3+0x84>
 20157a4:	3825883a 	mov	r18,r7
 20157a8:	003f0f06 	br	20153e8 <__subdf3+0x20c>
 20157ac:	1c44b03a 	or	r2,r3,r17
 20157b0:	8000251e 	bne	r16,zero,2015848 <__subdf3+0x66c>
 20157b4:	1000661e 	bne	r2,zero,2015950 <__subdf3+0x774>
 20157b8:	2990b03a 	or	r8,r5,r6
 20157bc:	40009626 	beq	r8,zero,2015a18 <__subdf3+0x83c>
 20157c0:	2807883a 	mov	r3,r5
 20157c4:	3023883a 	mov	r17,r6
 20157c8:	3825883a 	mov	r18,r7
 20157cc:	003ea406 	br	2015260 <__subdf3+0x84>
 20157d0:	127ff804 	addi	r9,r2,-32
 20157d4:	01000804 	movi	r4,32
 20157d8:	2a52d83a 	srl	r9,r5,r9
 20157dc:	11008c26 	beq	r2,r4,2015a10 <__subdf3+0x834>
 20157e0:	01001004 	movi	r4,64
 20157e4:	2085c83a 	sub	r2,r4,r2
 20157e8:	2884983a 	sll	r2,r5,r2
 20157ec:	118cb03a 	or	r6,r2,r6
 20157f0:	300cc03a 	cmpne	r6,r6,zero
 20157f4:	4992b03a 	or	r9,r9,r6
 20157f8:	0005883a 	mov	r2,zero
 20157fc:	003f1206 	br	2015448 <__subdf3+0x26c>
 2015800:	0101ffc4 	movi	r4,2047
 2015804:	493f9c1e 	bne	r9,r4,2015678 <__subdf3+0x49c>
 2015808:	2807883a 	mov	r3,r5
 201580c:	3023883a 	mov	r17,r6
 2015810:	4821883a 	mov	r16,r9
 2015814:	3825883a 	mov	r18,r7
 2015818:	003e9106 	br	2015260 <__subdf3+0x84>
 201581c:	80001f1e 	bne	r16,zero,201589c <__subdf3+0x6c0>
 2015820:	1c48b03a 	or	r4,r3,r17
 2015824:	20005a26 	beq	r4,zero,2015990 <__subdf3+0x7b4>
 2015828:	0084303a 	nor	r2,zero,r2
 201582c:	1000561e 	bne	r2,zero,2015988 <__subdf3+0x7ac>
 2015830:	89a3883a 	add	r17,r17,r6
 2015834:	1945883a 	add	r2,r3,r5
 2015838:	898d803a 	cmpltu	r6,r17,r6
 201583c:	3087883a 	add	r3,r6,r2
 2015840:	4821883a 	mov	r16,r9
 2015844:	003f0506 	br	201545c <__subdf3+0x280>
 2015848:	10002b1e 	bne	r2,zero,20158f8 <__subdf3+0x71c>
 201584c:	2984b03a 	or	r2,r5,r6
 2015850:	10008026 	beq	r2,zero,2015a54 <__subdf3+0x878>
 2015854:	2807883a 	mov	r3,r5
 2015858:	3023883a 	mov	r17,r6
 201585c:	3825883a 	mov	r18,r7
 2015860:	0401ffc4 	movi	r16,2047
 2015864:	003e7e06 	br	2015260 <__subdf3+0x84>
 2015868:	3809883a 	mov	r4,r7
 201586c:	0011883a 	mov	r8,zero
 2015870:	0005883a 	mov	r2,zero
 2015874:	003ee306 	br	2015404 <__subdf3+0x228>
 2015878:	1c62b03a 	or	r17,r3,r17
 201587c:	8822c03a 	cmpne	r17,r17,zero
 2015880:	0005883a 	mov	r2,zero
 2015884:	003f8906 	br	20156ac <__subdf3+0x4d0>
 2015888:	3809883a 	mov	r4,r7
 201588c:	4821883a 	mov	r16,r9
 2015890:	0011883a 	mov	r8,zero
 2015894:	0005883a 	mov	r2,zero
 2015898:	003eda06 	br	2015404 <__subdf3+0x228>
 201589c:	0101ffc4 	movi	r4,2047
 20158a0:	49003b26 	beq	r9,r4,2015990 <__subdf3+0x7b4>
 20158a4:	0085c83a 	sub	r2,zero,r2
 20158a8:	18c02034 	orhi	r3,r3,128
 20158ac:	01000e04 	movi	r4,56
 20158b0:	20806e16 	blt	r4,r2,2015a6c <__subdf3+0x890>
 20158b4:	010007c4 	movi	r4,31
 20158b8:	20807716 	blt	r4,r2,2015a98 <__subdf3+0x8bc>
 20158bc:	01000804 	movi	r4,32
 20158c0:	2089c83a 	sub	r4,r4,r2
 20158c4:	1914983a 	sll	r10,r3,r4
 20158c8:	8890d83a 	srl	r8,r17,r2
 20158cc:	8908983a 	sll	r4,r17,r4
 20158d0:	1884d83a 	srl	r2,r3,r2
 20158d4:	5222b03a 	or	r17,r10,r8
 20158d8:	2006c03a 	cmpne	r3,r4,zero
 20158dc:	88e2b03a 	or	r17,r17,r3
 20158e0:	89a3883a 	add	r17,r17,r6
 20158e4:	1145883a 	add	r2,r2,r5
 20158e8:	898d803a 	cmpltu	r6,r17,r6
 20158ec:	3087883a 	add	r3,r6,r2
 20158f0:	4821883a 	mov	r16,r9
 20158f4:	003ed906 	br	201545c <__subdf3+0x280>
 20158f8:	2984b03a 	or	r2,r5,r6
 20158fc:	10004226 	beq	r2,zero,2015a08 <__subdf3+0x82c>
 2015900:	1808d0fa 	srli	r4,r3,3
 2015904:	8822d0fa 	srli	r17,r17,3
 2015908:	1806977a 	slli	r3,r3,29
 201590c:	2080022c 	andhi	r2,r4,8
 2015910:	1c62b03a 	or	r17,r3,r17
 2015914:	10000826 	beq	r2,zero,2015938 <__subdf3+0x75c>
 2015918:	2812d0fa 	srli	r9,r5,3
 201591c:	4880022c 	andhi	r2,r9,8
 2015920:	1000051e 	bne	r2,zero,2015938 <__subdf3+0x75c>
 2015924:	300cd0fa 	srli	r6,r6,3
 2015928:	2804977a 	slli	r2,r5,29
 201592c:	4809883a 	mov	r4,r9
 2015930:	3825883a 	mov	r18,r7
 2015934:	11a2b03a 	or	r17,r2,r6
 2015938:	8806d77a 	srli	r3,r17,29
 201593c:	200890fa 	slli	r4,r4,3
 2015940:	882290fa 	slli	r17,r17,3
 2015944:	0401ffc4 	movi	r16,2047
 2015948:	1906b03a 	or	r3,r3,r4
 201594c:	003e4406 	br	2015260 <__subdf3+0x84>
 2015950:	2984b03a 	or	r2,r5,r6
 2015954:	103e4226 	beq	r2,zero,2015260 <__subdf3+0x84>
 2015958:	8989c83a 	sub	r4,r17,r6
 201595c:	8911803a 	cmpltu	r8,r17,r4
 2015960:	1945c83a 	sub	r2,r3,r5
 2015964:	1205c83a 	sub	r2,r2,r8
 2015968:	1200202c 	andhi	r8,r2,128
 201596c:	403e9a26 	beq	r8,zero,20153d8 <__subdf3+0x1fc>
 2015970:	3463c83a 	sub	r17,r6,r17
 2015974:	28c5c83a 	sub	r2,r5,r3
 2015978:	344d803a 	cmpltu	r6,r6,r17
 201597c:	1187c83a 	sub	r3,r2,r6
 2015980:	3825883a 	mov	r18,r7
 2015984:	003e3606 	br	2015260 <__subdf3+0x84>
 2015988:	0101ffc4 	movi	r4,2047
 201598c:	493fc71e 	bne	r9,r4,20158ac <__subdf3+0x6d0>
 2015990:	2807883a 	mov	r3,r5
 2015994:	3023883a 	mov	r17,r6
 2015998:	4821883a 	mov	r16,r9
 201599c:	003e3006 	br	2015260 <__subdf3+0x84>
 20159a0:	10003626 	beq	r2,zero,2015a7c <__subdf3+0x8a0>
 20159a4:	2984b03a 	or	r2,r5,r6
 20159a8:	10001726 	beq	r2,zero,2015a08 <__subdf3+0x82c>
 20159ac:	1808d0fa 	srli	r4,r3,3
 20159b0:	8822d0fa 	srli	r17,r17,3
 20159b4:	1806977a 	slli	r3,r3,29
 20159b8:	2080022c 	andhi	r2,r4,8
 20159bc:	1c62b03a 	or	r17,r3,r17
 20159c0:	10000726 	beq	r2,zero,20159e0 <__subdf3+0x804>
 20159c4:	2812d0fa 	srli	r9,r5,3
 20159c8:	4880022c 	andhi	r2,r9,8
 20159cc:	1000041e 	bne	r2,zero,20159e0 <__subdf3+0x804>
 20159d0:	300cd0fa 	srli	r6,r6,3
 20159d4:	2804977a 	slli	r2,r5,29
 20159d8:	4809883a 	mov	r4,r9
 20159dc:	11a2b03a 	or	r17,r2,r6
 20159e0:	8806d77a 	srli	r3,r17,29
 20159e4:	200890fa 	slli	r4,r4,3
 20159e8:	882290fa 	slli	r17,r17,3
 20159ec:	3825883a 	mov	r18,r7
 20159f0:	1906b03a 	or	r3,r3,r4
 20159f4:	0401ffc4 	movi	r16,2047
 20159f8:	003e1906 	br	2015260 <__subdf3+0x84>
 20159fc:	000b883a 	mov	r5,zero
 2015a00:	0005883a 	mov	r2,zero
 2015a04:	003e2e06 	br	20152c0 <__subdf3+0xe4>
 2015a08:	0401ffc4 	movi	r16,2047
 2015a0c:	003e1406 	br	2015260 <__subdf3+0x84>
 2015a10:	0005883a 	mov	r2,zero
 2015a14:	003f7506 	br	20157ec <__subdf3+0x610>
 2015a18:	0005883a 	mov	r2,zero
 2015a1c:	0009883a 	mov	r4,zero
 2015a20:	003e7806 	br	2015404 <__subdf3+0x228>
 2015a24:	123ff804 	addi	r8,r2,-32
 2015a28:	01000804 	movi	r4,32
 2015a2c:	1a10d83a 	srl	r8,r3,r8
 2015a30:	11002526 	beq	r2,r4,2015ac8 <__subdf3+0x8ec>
 2015a34:	01001004 	movi	r4,64
 2015a38:	2085c83a 	sub	r2,r4,r2
 2015a3c:	1884983a 	sll	r2,r3,r2
 2015a40:	1444b03a 	or	r2,r2,r17
 2015a44:	1004c03a 	cmpne	r2,r2,zero
 2015a48:	40a2b03a 	or	r17,r8,r2
 2015a4c:	0005883a 	mov	r2,zero
 2015a50:	003f1606 	br	20156ac <__subdf3+0x4d0>
 2015a54:	02000434 	movhi	r8,16
 2015a58:	0009883a 	mov	r4,zero
 2015a5c:	423fffc4 	addi	r8,r8,-1
 2015a60:	00bfffc4 	movi	r2,-1
 2015a64:	0401ffc4 	movi	r16,2047
 2015a68:	003e6606 	br	2015404 <__subdf3+0x228>
 2015a6c:	1c62b03a 	or	r17,r3,r17
 2015a70:	8822c03a 	cmpne	r17,r17,zero
 2015a74:	0005883a 	mov	r2,zero
 2015a78:	003f9906 	br	20158e0 <__subdf3+0x704>
 2015a7c:	2807883a 	mov	r3,r5
 2015a80:	3023883a 	mov	r17,r6
 2015a84:	0401ffc4 	movi	r16,2047
 2015a88:	003df506 	br	2015260 <__subdf3+0x84>
 2015a8c:	2807883a 	mov	r3,r5
 2015a90:	3023883a 	mov	r17,r6
 2015a94:	003df206 	br	2015260 <__subdf3+0x84>
 2015a98:	123ff804 	addi	r8,r2,-32
 2015a9c:	01000804 	movi	r4,32
 2015aa0:	1a10d83a 	srl	r8,r3,r8
 2015aa4:	11000a26 	beq	r2,r4,2015ad0 <__subdf3+0x8f4>
 2015aa8:	01001004 	movi	r4,64
 2015aac:	2085c83a 	sub	r2,r4,r2
 2015ab0:	1884983a 	sll	r2,r3,r2
 2015ab4:	1444b03a 	or	r2,r2,r17
 2015ab8:	1004c03a 	cmpne	r2,r2,zero
 2015abc:	40a2b03a 	or	r17,r8,r2
 2015ac0:	0005883a 	mov	r2,zero
 2015ac4:	003f8606 	br	20158e0 <__subdf3+0x704>
 2015ac8:	0005883a 	mov	r2,zero
 2015acc:	003fdc06 	br	2015a40 <__subdf3+0x864>
 2015ad0:	0005883a 	mov	r2,zero
 2015ad4:	003ff706 	br	2015ab4 <__subdf3+0x8d8>

02015ad8 <__fixdfsi>:
 2015ad8:	280cd53a 	srli	r6,r5,20
 2015adc:	00c00434 	movhi	r3,16
 2015ae0:	18ffffc4 	addi	r3,r3,-1
 2015ae4:	3181ffcc 	andi	r6,r6,2047
 2015ae8:	01c0ff84 	movi	r7,1022
 2015aec:	28c6703a 	and	r3,r5,r3
 2015af0:	280ad7fa 	srli	r5,r5,31
 2015af4:	3980120e 	bge	r7,r6,2015b40 <__fixdfsi+0x68>
 2015af8:	00810744 	movi	r2,1053
 2015afc:	11800c16 	blt	r2,r6,2015b30 <__fixdfsi+0x58>
 2015b00:	00810cc4 	movi	r2,1075
 2015b04:	1185c83a 	sub	r2,r2,r6
 2015b08:	01c007c4 	movi	r7,31
 2015b0c:	18c00434 	orhi	r3,r3,16
 2015b10:	38800d16 	blt	r7,r2,2015b48 <__fixdfsi+0x70>
 2015b14:	31befb44 	addi	r6,r6,-1043
 2015b18:	2084d83a 	srl	r2,r4,r2
 2015b1c:	1986983a 	sll	r3,r3,r6
 2015b20:	1884b03a 	or	r2,r3,r2
 2015b24:	28000726 	beq	r5,zero,2015b44 <__fixdfsi+0x6c>
 2015b28:	0085c83a 	sub	r2,zero,r2
 2015b2c:	f800283a 	ret
 2015b30:	00a00034 	movhi	r2,32768
 2015b34:	10bfffc4 	addi	r2,r2,-1
 2015b38:	2885883a 	add	r2,r5,r2
 2015b3c:	f800283a 	ret
 2015b40:	0005883a 	mov	r2,zero
 2015b44:	f800283a 	ret
 2015b48:	008104c4 	movi	r2,1043
 2015b4c:	1185c83a 	sub	r2,r2,r6
 2015b50:	1884d83a 	srl	r2,r3,r2
 2015b54:	003ff306 	br	2015b24 <__fixdfsi+0x4c>

02015b58 <__floatsidf>:
 2015b58:	defffd04 	addi	sp,sp,-12
 2015b5c:	dfc00215 	stw	ra,8(sp)
 2015b60:	dc400115 	stw	r17,4(sp)
 2015b64:	dc000015 	stw	r16,0(sp)
 2015b68:	20002b26 	beq	r4,zero,2015c18 <__floatsidf+0xc0>
 2015b6c:	2023883a 	mov	r17,r4
 2015b70:	2020d7fa 	srli	r16,r4,31
 2015b74:	20002d16 	blt	r4,zero,2015c2c <__floatsidf+0xd4>
 2015b78:	8809883a 	mov	r4,r17
 2015b7c:	20074900 	call	2007490 <__clzsi2>
 2015b80:	01410784 	movi	r5,1054
 2015b84:	288bc83a 	sub	r5,r5,r2
 2015b88:	01010cc4 	movi	r4,1075
 2015b8c:	2149c83a 	sub	r4,r4,r5
 2015b90:	00c007c4 	movi	r3,31
 2015b94:	1900160e 	bge	r3,r4,2015bf0 <__floatsidf+0x98>
 2015b98:	00c104c4 	movi	r3,1043
 2015b9c:	1947c83a 	sub	r3,r3,r5
 2015ba0:	88c6983a 	sll	r3,r17,r3
 2015ba4:	00800434 	movhi	r2,16
 2015ba8:	10bfffc4 	addi	r2,r2,-1
 2015bac:	1886703a 	and	r3,r3,r2
 2015bb0:	2941ffcc 	andi	r5,r5,2047
 2015bb4:	800d883a 	mov	r6,r16
 2015bb8:	0005883a 	mov	r2,zero
 2015bbc:	280a953a 	slli	r5,r5,20
 2015bc0:	31803fcc 	andi	r6,r6,255
 2015bc4:	01000434 	movhi	r4,16
 2015bc8:	300c97fa 	slli	r6,r6,31
 2015bcc:	213fffc4 	addi	r4,r4,-1
 2015bd0:	1906703a 	and	r3,r3,r4
 2015bd4:	1946b03a 	or	r3,r3,r5
 2015bd8:	1986b03a 	or	r3,r3,r6
 2015bdc:	dfc00217 	ldw	ra,8(sp)
 2015be0:	dc400117 	ldw	r17,4(sp)
 2015be4:	dc000017 	ldw	r16,0(sp)
 2015be8:	dec00304 	addi	sp,sp,12
 2015bec:	f800283a 	ret
 2015bf0:	00c002c4 	movi	r3,11
 2015bf4:	1887c83a 	sub	r3,r3,r2
 2015bf8:	88c6d83a 	srl	r3,r17,r3
 2015bfc:	8904983a 	sll	r2,r17,r4
 2015c00:	01000434 	movhi	r4,16
 2015c04:	213fffc4 	addi	r4,r4,-1
 2015c08:	2941ffcc 	andi	r5,r5,2047
 2015c0c:	1906703a 	and	r3,r3,r4
 2015c10:	800d883a 	mov	r6,r16
 2015c14:	003fe906 	br	2015bbc <__floatsidf+0x64>
 2015c18:	000d883a 	mov	r6,zero
 2015c1c:	000b883a 	mov	r5,zero
 2015c20:	0007883a 	mov	r3,zero
 2015c24:	0005883a 	mov	r2,zero
 2015c28:	003fe406 	br	2015bbc <__floatsidf+0x64>
 2015c2c:	0123c83a 	sub	r17,zero,r4
 2015c30:	003fd106 	br	2015b78 <__floatsidf+0x20>

02015c34 <__floatunsidf>:
 2015c34:	defffe04 	addi	sp,sp,-8
 2015c38:	dc000015 	stw	r16,0(sp)
 2015c3c:	dfc00115 	stw	ra,4(sp)
 2015c40:	2021883a 	mov	r16,r4
 2015c44:	20002226 	beq	r4,zero,2015cd0 <__floatunsidf+0x9c>
 2015c48:	20074900 	call	2007490 <__clzsi2>
 2015c4c:	01010784 	movi	r4,1054
 2015c50:	2089c83a 	sub	r4,r4,r2
 2015c54:	01810cc4 	movi	r6,1075
 2015c58:	310dc83a 	sub	r6,r6,r4
 2015c5c:	00c007c4 	movi	r3,31
 2015c60:	1980120e 	bge	r3,r6,2015cac <__floatunsidf+0x78>
 2015c64:	00c104c4 	movi	r3,1043
 2015c68:	1907c83a 	sub	r3,r3,r4
 2015c6c:	80ca983a 	sll	r5,r16,r3
 2015c70:	00800434 	movhi	r2,16
 2015c74:	10bfffc4 	addi	r2,r2,-1
 2015c78:	2101ffcc 	andi	r4,r4,2047
 2015c7c:	0021883a 	mov	r16,zero
 2015c80:	288a703a 	and	r5,r5,r2
 2015c84:	2008953a 	slli	r4,r4,20
 2015c88:	00c00434 	movhi	r3,16
 2015c8c:	18ffffc4 	addi	r3,r3,-1
 2015c90:	28c6703a 	and	r3,r5,r3
 2015c94:	8005883a 	mov	r2,r16
 2015c98:	1906b03a 	or	r3,r3,r4
 2015c9c:	dfc00117 	ldw	ra,4(sp)
 2015ca0:	dc000017 	ldw	r16,0(sp)
 2015ca4:	dec00204 	addi	sp,sp,8
 2015ca8:	f800283a 	ret
 2015cac:	00c002c4 	movi	r3,11
 2015cb0:	188bc83a 	sub	r5,r3,r2
 2015cb4:	814ad83a 	srl	r5,r16,r5
 2015cb8:	00c00434 	movhi	r3,16
 2015cbc:	18ffffc4 	addi	r3,r3,-1
 2015cc0:	81a0983a 	sll	r16,r16,r6
 2015cc4:	2101ffcc 	andi	r4,r4,2047
 2015cc8:	28ca703a 	and	r5,r5,r3
 2015ccc:	003fed06 	br	2015c84 <__floatunsidf+0x50>
 2015cd0:	0009883a 	mov	r4,zero
 2015cd4:	000b883a 	mov	r5,zero
 2015cd8:	003fea06 	br	2015c84 <__floatunsidf+0x50>

02015cdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015cdc:	defffe04 	addi	sp,sp,-8
 2015ce0:	dfc00115 	stw	ra,4(sp)
 2015ce4:	df000015 	stw	fp,0(sp)
 2015ce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015cec:	d0a03917 	ldw	r2,-32540(gp)
 2015cf0:	10000326 	beq	r2,zero,2015d00 <alt_get_errno+0x24>
 2015cf4:	d0a03917 	ldw	r2,-32540(gp)
 2015cf8:	103ee83a 	callr	r2
 2015cfc:	00000106 	br	2015d04 <alt_get_errno+0x28>
 2015d00:	d0a79504 	addi	r2,gp,-25004
}
 2015d04:	e037883a 	mov	sp,fp
 2015d08:	dfc00117 	ldw	ra,4(sp)
 2015d0c:	df000017 	ldw	fp,0(sp)
 2015d10:	dec00204 	addi	sp,sp,8
 2015d14:	f800283a 	ret

02015d18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2015d18:	defffb04 	addi	sp,sp,-20
 2015d1c:	dfc00415 	stw	ra,16(sp)
 2015d20:	df000315 	stw	fp,12(sp)
 2015d24:	df000304 	addi	fp,sp,12
 2015d28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2015d2c:	e0bfff17 	ldw	r2,-4(fp)
 2015d30:	10000616 	blt	r2,zero,2015d4c <close+0x34>
 2015d34:	e0bfff17 	ldw	r2,-4(fp)
 2015d38:	10c00324 	muli	r3,r2,12
 2015d3c:	008080b4 	movhi	r2,514
 2015d40:	108a0704 	addi	r2,r2,10268
 2015d44:	1885883a 	add	r2,r3,r2
 2015d48:	00000106 	br	2015d50 <close+0x38>
 2015d4c:	0005883a 	mov	r2,zero
 2015d50:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2015d54:	e0bffd17 	ldw	r2,-12(fp)
 2015d58:	10001926 	beq	r2,zero,2015dc0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2015d5c:	e0bffd17 	ldw	r2,-12(fp)
 2015d60:	10800017 	ldw	r2,0(r2)
 2015d64:	10800417 	ldw	r2,16(r2)
 2015d68:	10000626 	beq	r2,zero,2015d84 <close+0x6c>
 2015d6c:	e0bffd17 	ldw	r2,-12(fp)
 2015d70:	10800017 	ldw	r2,0(r2)
 2015d74:	10800417 	ldw	r2,16(r2)
 2015d78:	e13ffd17 	ldw	r4,-12(fp)
 2015d7c:	103ee83a 	callr	r2
 2015d80:	00000106 	br	2015d88 <close+0x70>
 2015d84:	0005883a 	mov	r2,zero
 2015d88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2015d8c:	e13fff17 	ldw	r4,-4(fp)
 2015d90:	20163d00 	call	20163d0 <alt_release_fd>
    if (rval < 0)
 2015d94:	e0bffe17 	ldw	r2,-8(fp)
 2015d98:	1000070e 	bge	r2,zero,2015db8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 2015d9c:	2015cdc0 	call	2015cdc <alt_get_errno>
 2015da0:	1007883a 	mov	r3,r2
 2015da4:	e0bffe17 	ldw	r2,-8(fp)
 2015da8:	0085c83a 	sub	r2,zero,r2
 2015dac:	18800015 	stw	r2,0(r3)
      return -1;
 2015db0:	00bfffc4 	movi	r2,-1
 2015db4:	00000706 	br	2015dd4 <close+0xbc>
    }
    return 0;
 2015db8:	0005883a 	mov	r2,zero
 2015dbc:	00000506 	br	2015dd4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2015dc0:	2015cdc0 	call	2015cdc <alt_get_errno>
 2015dc4:	1007883a 	mov	r3,r2
 2015dc8:	00801444 	movi	r2,81
 2015dcc:	18800015 	stw	r2,0(r3)
    return -1;
 2015dd0:	00bfffc4 	movi	r2,-1
  }
}
 2015dd4:	e037883a 	mov	sp,fp
 2015dd8:	dfc00117 	ldw	ra,4(sp)
 2015ddc:	df000017 	ldw	fp,0(sp)
 2015de0:	dec00204 	addi	sp,sp,8
 2015de4:	f800283a 	ret

02015de8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2015de8:	defffc04 	addi	sp,sp,-16
 2015dec:	df000315 	stw	fp,12(sp)
 2015df0:	df000304 	addi	fp,sp,12
 2015df4:	e13ffd15 	stw	r4,-12(fp)
 2015df8:	e17ffe15 	stw	r5,-8(fp)
 2015dfc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2015e00:	e0bfff17 	ldw	r2,-4(fp)
}
 2015e04:	e037883a 	mov	sp,fp
 2015e08:	df000017 	ldw	fp,0(sp)
 2015e0c:	dec00104 	addi	sp,sp,4
 2015e10:	f800283a 	ret

02015e14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015e14:	defffe04 	addi	sp,sp,-8
 2015e18:	dfc00115 	stw	ra,4(sp)
 2015e1c:	df000015 	stw	fp,0(sp)
 2015e20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015e24:	d0a03917 	ldw	r2,-32540(gp)
 2015e28:	10000326 	beq	r2,zero,2015e38 <alt_get_errno+0x24>
 2015e2c:	d0a03917 	ldw	r2,-32540(gp)
 2015e30:	103ee83a 	callr	r2
 2015e34:	00000106 	br	2015e3c <alt_get_errno+0x28>
 2015e38:	d0a79504 	addi	r2,gp,-25004
}
 2015e3c:	e037883a 	mov	sp,fp
 2015e40:	dfc00117 	ldw	ra,4(sp)
 2015e44:	df000017 	ldw	fp,0(sp)
 2015e48:	dec00204 	addi	sp,sp,8
 2015e4c:	f800283a 	ret

02015e50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2015e50:	defffb04 	addi	sp,sp,-20
 2015e54:	dfc00415 	stw	ra,16(sp)
 2015e58:	df000315 	stw	fp,12(sp)
 2015e5c:	df000304 	addi	fp,sp,12
 2015e60:	e13ffe15 	stw	r4,-8(fp)
 2015e64:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2015e68:	e0bffe17 	ldw	r2,-8(fp)
 2015e6c:	10000616 	blt	r2,zero,2015e88 <fstat+0x38>
 2015e70:	e0bffe17 	ldw	r2,-8(fp)
 2015e74:	10c00324 	muli	r3,r2,12
 2015e78:	008080b4 	movhi	r2,514
 2015e7c:	108a0704 	addi	r2,r2,10268
 2015e80:	1885883a 	add	r2,r3,r2
 2015e84:	00000106 	br	2015e8c <fstat+0x3c>
 2015e88:	0005883a 	mov	r2,zero
 2015e8c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2015e90:	e0bffd17 	ldw	r2,-12(fp)
 2015e94:	10001026 	beq	r2,zero,2015ed8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2015e98:	e0bffd17 	ldw	r2,-12(fp)
 2015e9c:	10800017 	ldw	r2,0(r2)
 2015ea0:	10800817 	ldw	r2,32(r2)
 2015ea4:	10000726 	beq	r2,zero,2015ec4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 2015ea8:	e0bffd17 	ldw	r2,-12(fp)
 2015eac:	10800017 	ldw	r2,0(r2)
 2015eb0:	10800817 	ldw	r2,32(r2)
 2015eb4:	e17fff17 	ldw	r5,-4(fp)
 2015eb8:	e13ffd17 	ldw	r4,-12(fp)
 2015ebc:	103ee83a 	callr	r2
 2015ec0:	00000a06 	br	2015eec <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2015ec4:	e0bfff17 	ldw	r2,-4(fp)
 2015ec8:	00c80004 	movi	r3,8192
 2015ecc:	10c00115 	stw	r3,4(r2)
      return 0;
 2015ed0:	0005883a 	mov	r2,zero
 2015ed4:	00000506 	br	2015eec <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2015ed8:	2015e140 	call	2015e14 <alt_get_errno>
 2015edc:	1007883a 	mov	r3,r2
 2015ee0:	00801444 	movi	r2,81
 2015ee4:	18800015 	stw	r2,0(r3)
    return -1;
 2015ee8:	00bfffc4 	movi	r2,-1
  }
}
 2015eec:	e037883a 	mov	sp,fp
 2015ef0:	dfc00117 	ldw	ra,4(sp)
 2015ef4:	df000017 	ldw	fp,0(sp)
 2015ef8:	dec00204 	addi	sp,sp,8
 2015efc:	f800283a 	ret

02015f00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015f00:	defffe04 	addi	sp,sp,-8
 2015f04:	dfc00115 	stw	ra,4(sp)
 2015f08:	df000015 	stw	fp,0(sp)
 2015f0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015f10:	d0a03917 	ldw	r2,-32540(gp)
 2015f14:	10000326 	beq	r2,zero,2015f24 <alt_get_errno+0x24>
 2015f18:	d0a03917 	ldw	r2,-32540(gp)
 2015f1c:	103ee83a 	callr	r2
 2015f20:	00000106 	br	2015f28 <alt_get_errno+0x28>
 2015f24:	d0a79504 	addi	r2,gp,-25004
}
 2015f28:	e037883a 	mov	sp,fp
 2015f2c:	dfc00117 	ldw	ra,4(sp)
 2015f30:	df000017 	ldw	fp,0(sp)
 2015f34:	dec00204 	addi	sp,sp,8
 2015f38:	f800283a 	ret

02015f3c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2015f3c:	deffed04 	addi	sp,sp,-76
 2015f40:	dfc01215 	stw	ra,72(sp)
 2015f44:	df001115 	stw	fp,68(sp)
 2015f48:	df001104 	addi	fp,sp,68
 2015f4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2015f50:	e0bfff17 	ldw	r2,-4(fp)
 2015f54:	10000616 	blt	r2,zero,2015f70 <isatty+0x34>
 2015f58:	e0bfff17 	ldw	r2,-4(fp)
 2015f5c:	10c00324 	muli	r3,r2,12
 2015f60:	008080b4 	movhi	r2,514
 2015f64:	108a0704 	addi	r2,r2,10268
 2015f68:	1885883a 	add	r2,r3,r2
 2015f6c:	00000106 	br	2015f74 <isatty+0x38>
 2015f70:	0005883a 	mov	r2,zero
 2015f74:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2015f78:	e0bfef17 	ldw	r2,-68(fp)
 2015f7c:	10000e26 	beq	r2,zero,2015fb8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2015f80:	e0bfef17 	ldw	r2,-68(fp)
 2015f84:	10800017 	ldw	r2,0(r2)
 2015f88:	10800817 	ldw	r2,32(r2)
 2015f8c:	1000021e 	bne	r2,zero,2015f98 <isatty+0x5c>
    {
      return 1;
 2015f90:	00800044 	movi	r2,1
 2015f94:	00000d06 	br	2015fcc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2015f98:	e0bff004 	addi	r2,fp,-64
 2015f9c:	100b883a 	mov	r5,r2
 2015fa0:	e13fff17 	ldw	r4,-4(fp)
 2015fa4:	2015e500 	call	2015e50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2015fa8:	e0bff117 	ldw	r2,-60(fp)
 2015fac:	10880020 	cmpeqi	r2,r2,8192
 2015fb0:	10803fcc 	andi	r2,r2,255
 2015fb4:	00000506 	br	2015fcc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2015fb8:	2015f000 	call	2015f00 <alt_get_errno>
 2015fbc:	1007883a 	mov	r3,r2
 2015fc0:	00801444 	movi	r2,81
 2015fc4:	18800015 	stw	r2,0(r3)
    return 0;
 2015fc8:	0005883a 	mov	r2,zero
  }
}
 2015fcc:	e037883a 	mov	sp,fp
 2015fd0:	dfc00117 	ldw	ra,4(sp)
 2015fd4:	df000017 	ldw	fp,0(sp)
 2015fd8:	dec00204 	addi	sp,sp,8
 2015fdc:	f800283a 	ret

02015fe0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2015fe0:	defffc04 	addi	sp,sp,-16
 2015fe4:	df000315 	stw	fp,12(sp)
 2015fe8:	df000304 	addi	fp,sp,12
 2015fec:	e13ffd15 	stw	r4,-12(fp)
 2015ff0:	e17ffe15 	stw	r5,-8(fp)
 2015ff4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2015ff8:	e0fffe17 	ldw	r3,-8(fp)
 2015ffc:	e0bffd17 	ldw	r2,-12(fp)
 2016000:	18800c26 	beq	r3,r2,2016034 <alt_load_section+0x54>
  {
    while( to != end )
 2016004:	00000806 	br	2016028 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2016008:	e0bffe17 	ldw	r2,-8(fp)
 201600c:	10c00104 	addi	r3,r2,4
 2016010:	e0fffe15 	stw	r3,-8(fp)
 2016014:	e0fffd17 	ldw	r3,-12(fp)
 2016018:	19000104 	addi	r4,r3,4
 201601c:	e13ffd15 	stw	r4,-12(fp)
 2016020:	18c00017 	ldw	r3,0(r3)
 2016024:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2016028:	e0fffe17 	ldw	r3,-8(fp)
 201602c:	e0bfff17 	ldw	r2,-4(fp)
 2016030:	18bff51e 	bne	r3,r2,2016008 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2016034:	0001883a 	nop
 2016038:	e037883a 	mov	sp,fp
 201603c:	df000017 	ldw	fp,0(sp)
 2016040:	dec00104 	addi	sp,sp,4
 2016044:	f800283a 	ret

02016048 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2016048:	defffe04 	addi	sp,sp,-8
 201604c:	dfc00115 	stw	ra,4(sp)
 2016050:	df000015 	stw	fp,0(sp)
 2016054:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2016058:	018080b4 	movhi	r6,514
 201605c:	318eea04 	addi	r6,r6,15272
 2016060:	014080b4 	movhi	r5,514
 2016064:	2947c804 	addi	r5,r5,7968
 2016068:	010080b4 	movhi	r4,514
 201606c:	210eea04 	addi	r4,r4,15272
 2016070:	2015fe00 	call	2015fe0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2016074:	01808034 	movhi	r6,512
 2016078:	31809204 	addi	r6,r6,584
 201607c:	01408034 	movhi	r5,512
 2016080:	29400804 	addi	r5,r5,32
 2016084:	01008034 	movhi	r4,512
 2016088:	21000804 	addi	r4,r4,32
 201608c:	2015fe00 	call	2015fe0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2016090:	018080b4 	movhi	r6,514
 2016094:	3187c804 	addi	r6,r6,7968
 2016098:	014080b4 	movhi	r5,514
 201609c:	29452d04 	addi	r5,r5,5300
 20160a0:	010080b4 	movhi	r4,514
 20160a4:	21052d04 	addi	r4,r4,5300
 20160a8:	2015fe00 	call	2015fe0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20160ac:	201ff7c0 	call	201ff7c <alt_dcache_flush_all>
  alt_icache_flush_all();
 20160b0:	20201f40 	call	20201f4 <alt_icache_flush_all>
}
 20160b4:	0001883a 	nop
 20160b8:	e037883a 	mov	sp,fp
 20160bc:	dfc00117 	ldw	ra,4(sp)
 20160c0:	df000017 	ldw	fp,0(sp)
 20160c4:	dec00204 	addi	sp,sp,8
 20160c8:	f800283a 	ret

020160cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20160cc:	defffe04 	addi	sp,sp,-8
 20160d0:	dfc00115 	stw	ra,4(sp)
 20160d4:	df000015 	stw	fp,0(sp)
 20160d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20160dc:	d0a03917 	ldw	r2,-32540(gp)
 20160e0:	10000326 	beq	r2,zero,20160f0 <alt_get_errno+0x24>
 20160e4:	d0a03917 	ldw	r2,-32540(gp)
 20160e8:	103ee83a 	callr	r2
 20160ec:	00000106 	br	20160f4 <alt_get_errno+0x28>
 20160f0:	d0a79504 	addi	r2,gp,-25004
}
 20160f4:	e037883a 	mov	sp,fp
 20160f8:	dfc00117 	ldw	ra,4(sp)
 20160fc:	df000017 	ldw	fp,0(sp)
 2016100:	dec00204 	addi	sp,sp,8
 2016104:	f800283a 	ret

02016108 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2016108:	defff904 	addi	sp,sp,-28
 201610c:	dfc00615 	stw	ra,24(sp)
 2016110:	df000515 	stw	fp,20(sp)
 2016114:	df000504 	addi	fp,sp,20
 2016118:	e13ffd15 	stw	r4,-12(fp)
 201611c:	e17ffe15 	stw	r5,-8(fp)
 2016120:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2016124:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016128:	e0bffd17 	ldw	r2,-12(fp)
 201612c:	10000616 	blt	r2,zero,2016148 <lseek+0x40>
 2016130:	e0bffd17 	ldw	r2,-12(fp)
 2016134:	10c00324 	muli	r3,r2,12
 2016138:	008080b4 	movhi	r2,514
 201613c:	108a0704 	addi	r2,r2,10268
 2016140:	1885883a 	add	r2,r3,r2
 2016144:	00000106 	br	201614c <lseek+0x44>
 2016148:	0005883a 	mov	r2,zero
 201614c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2016150:	e0bffc17 	ldw	r2,-16(fp)
 2016154:	10001026 	beq	r2,zero,2016198 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2016158:	e0bffc17 	ldw	r2,-16(fp)
 201615c:	10800017 	ldw	r2,0(r2)
 2016160:	10800717 	ldw	r2,28(r2)
 2016164:	10000926 	beq	r2,zero,201618c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2016168:	e0bffc17 	ldw	r2,-16(fp)
 201616c:	10800017 	ldw	r2,0(r2)
 2016170:	10800717 	ldw	r2,28(r2)
 2016174:	e1bfff17 	ldw	r6,-4(fp)
 2016178:	e17ffe17 	ldw	r5,-8(fp)
 201617c:	e13ffc17 	ldw	r4,-16(fp)
 2016180:	103ee83a 	callr	r2
 2016184:	e0bffb15 	stw	r2,-20(fp)
 2016188:	00000506 	br	20161a0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 201618c:	00bfde84 	movi	r2,-134
 2016190:	e0bffb15 	stw	r2,-20(fp)
 2016194:	00000206 	br	20161a0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 2016198:	00bfebc4 	movi	r2,-81
 201619c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 20161a0:	e0bffb17 	ldw	r2,-20(fp)
 20161a4:	1000070e 	bge	r2,zero,20161c4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 20161a8:	20160cc0 	call	20160cc <alt_get_errno>
 20161ac:	1007883a 	mov	r3,r2
 20161b0:	e0bffb17 	ldw	r2,-20(fp)
 20161b4:	0085c83a 	sub	r2,zero,r2
 20161b8:	18800015 	stw	r2,0(r3)
    rc = -1;
 20161bc:	00bfffc4 	movi	r2,-1
 20161c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20161c4:	e0bffb17 	ldw	r2,-20(fp)
}
 20161c8:	e037883a 	mov	sp,fp
 20161cc:	dfc00117 	ldw	ra,4(sp)
 20161d0:	df000017 	ldw	fp,0(sp)
 20161d4:	dec00204 	addi	sp,sp,8
 20161d8:	f800283a 	ret

020161dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20161dc:	defff904 	addi	sp,sp,-28
 20161e0:	dfc00615 	stw	ra,24(sp)
 20161e4:	df000515 	stw	fp,20(sp)
 20161e8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20161ec:	0009883a 	mov	r4,zero
 20161f0:	201ebe80 	call	201ebe8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20161f4:	20171980 	call	2017198 <OSInit>
 20161f8:	01000044 	movi	r4,1
 20161fc:	201c5b00 	call	201c5b0 <OSSemCreate>
 2016200:	d0a79b15 	stw	r2,-24980(gp)
 2016204:	01000044 	movi	r4,1
 2016208:	201c5b00 	call	201c5b0 <OSSemCreate>
 201620c:	d0a79d15 	stw	r2,-24972(gp)
 2016210:	d0a79604 	addi	r2,gp,-25000
 2016214:	e0bffc15 	stw	r2,-16(fp)
 2016218:	00800044 	movi	r2,1
 201621c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 2016220:	e0bffd0b 	ldhu	r2,-12(fp)
 2016224:	1009883a 	mov	r4,r2
 2016228:	201c5b00 	call	201c5b0 <OSSemCreate>
 201622c:	1007883a 	mov	r3,r2
 2016230:	e0bffc17 	ldw	r2,-16(fp)
 2016234:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2016238:	201ec200 	call	201ec20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 201623c:	018080b4 	movhi	r6,514
 2016240:	31877004 	addi	r6,r6,7616
 2016244:	014080b4 	movhi	r5,514
 2016248:	29477004 	addi	r5,r5,7616
 201624c:	010080b4 	movhi	r4,514
 2016250:	21077004 	addi	r4,r4,7616
 2016254:	20202ec0 	call	20202ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2016258:	20200a40 	call	20200a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 201625c:	010080b4 	movhi	r4,514
 2016260:	21004104 	addi	r4,r4,260
 2016264:	2020f6c0 	call	2020f6c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2016268:	d0a79717 	ldw	r2,-24996(gp)
 201626c:	d0e79817 	ldw	r3,-24992(gp)
 2016270:	d1279917 	ldw	r4,-24988(gp)
 2016274:	200d883a 	mov	r6,r4
 2016278:	180b883a 	mov	r5,r3
 201627c:	1009883a 	mov	r4,r2
 2016280:	20026280 	call	2002628 <main>
 2016284:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 2016288:	01000044 	movi	r4,1
 201628c:	2015d180 	call	2015d18 <close>
  exit (result);
 2016290:	e13ffb17 	ldw	r4,-20(fp)
 2016294:	2020fa80 	call	2020fa8 <exit>

02016298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016298:	defffe04 	addi	sp,sp,-8
 201629c:	dfc00115 	stw	ra,4(sp)
 20162a0:	df000015 	stw	fp,0(sp)
 20162a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20162a8:	d0a03917 	ldw	r2,-32540(gp)
 20162ac:	10000326 	beq	r2,zero,20162bc <alt_get_errno+0x24>
 20162b0:	d0a03917 	ldw	r2,-32540(gp)
 20162b4:	103ee83a 	callr	r2
 20162b8:	00000106 	br	20162c0 <alt_get_errno+0x28>
 20162bc:	d0a79504 	addi	r2,gp,-25004
}
 20162c0:	e037883a 	mov	sp,fp
 20162c4:	dfc00117 	ldw	ra,4(sp)
 20162c8:	df000017 	ldw	fp,0(sp)
 20162cc:	dec00204 	addi	sp,sp,8
 20162d0:	f800283a 	ret

020162d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20162d4:	defff904 	addi	sp,sp,-28
 20162d8:	dfc00615 	stw	ra,24(sp)
 20162dc:	df000515 	stw	fp,20(sp)
 20162e0:	df000504 	addi	fp,sp,20
 20162e4:	e13ffd15 	stw	r4,-12(fp)
 20162e8:	e17ffe15 	stw	r5,-8(fp)
 20162ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20162f0:	e0bffd17 	ldw	r2,-12(fp)
 20162f4:	10000616 	blt	r2,zero,2016310 <read+0x3c>
 20162f8:	e0bffd17 	ldw	r2,-12(fp)
 20162fc:	10c00324 	muli	r3,r2,12
 2016300:	008080b4 	movhi	r2,514
 2016304:	108a0704 	addi	r2,r2,10268
 2016308:	1885883a 	add	r2,r3,r2
 201630c:	00000106 	br	2016314 <read+0x40>
 2016310:	0005883a 	mov	r2,zero
 2016314:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2016318:	e0bffb17 	ldw	r2,-20(fp)
 201631c:	10002226 	beq	r2,zero,20163a8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2016320:	e0bffb17 	ldw	r2,-20(fp)
 2016324:	10800217 	ldw	r2,8(r2)
 2016328:	108000cc 	andi	r2,r2,3
 201632c:	10800060 	cmpeqi	r2,r2,1
 2016330:	1000181e 	bne	r2,zero,2016394 <read+0xc0>
        (fd->dev->read))
 2016334:	e0bffb17 	ldw	r2,-20(fp)
 2016338:	10800017 	ldw	r2,0(r2)
 201633c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2016340:	10001426 	beq	r2,zero,2016394 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2016344:	e0bffb17 	ldw	r2,-20(fp)
 2016348:	10800017 	ldw	r2,0(r2)
 201634c:	10800517 	ldw	r2,20(r2)
 2016350:	e0ffff17 	ldw	r3,-4(fp)
 2016354:	180d883a 	mov	r6,r3
 2016358:	e17ffe17 	ldw	r5,-8(fp)
 201635c:	e13ffb17 	ldw	r4,-20(fp)
 2016360:	103ee83a 	callr	r2
 2016364:	e0bffc15 	stw	r2,-16(fp)
 2016368:	e0bffc17 	ldw	r2,-16(fp)
 201636c:	1000070e 	bge	r2,zero,201638c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 2016370:	20162980 	call	2016298 <alt_get_errno>
 2016374:	1007883a 	mov	r3,r2
 2016378:	e0bffc17 	ldw	r2,-16(fp)
 201637c:	0085c83a 	sub	r2,zero,r2
 2016380:	18800015 	stw	r2,0(r3)
          return -1;
 2016384:	00bfffc4 	movi	r2,-1
 2016388:	00000c06 	br	20163bc <read+0xe8>
        }
        return rval;
 201638c:	e0bffc17 	ldw	r2,-16(fp)
 2016390:	00000a06 	br	20163bc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2016394:	20162980 	call	2016298 <alt_get_errno>
 2016398:	1007883a 	mov	r3,r2
 201639c:	00800344 	movi	r2,13
 20163a0:	18800015 	stw	r2,0(r3)
 20163a4:	00000406 	br	20163b8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20163a8:	20162980 	call	2016298 <alt_get_errno>
 20163ac:	1007883a 	mov	r3,r2
 20163b0:	00801444 	movi	r2,81
 20163b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20163b8:	00bfffc4 	movi	r2,-1
}
 20163bc:	e037883a 	mov	sp,fp
 20163c0:	dfc00117 	ldw	ra,4(sp)
 20163c4:	df000017 	ldw	fp,0(sp)
 20163c8:	dec00204 	addi	sp,sp,8
 20163cc:	f800283a 	ret

020163d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20163d0:	defffe04 	addi	sp,sp,-8
 20163d4:	df000115 	stw	fp,4(sp)
 20163d8:	df000104 	addi	fp,sp,4
 20163dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 20163e0:	e0bfff17 	ldw	r2,-4(fp)
 20163e4:	108000d0 	cmplti	r2,r2,3
 20163e8:	10000d1e 	bne	r2,zero,2016420 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 20163ec:	008080b4 	movhi	r2,514
 20163f0:	108a0704 	addi	r2,r2,10268
 20163f4:	e0ffff17 	ldw	r3,-4(fp)
 20163f8:	18c00324 	muli	r3,r3,12
 20163fc:	10c5883a 	add	r2,r2,r3
 2016400:	10800204 	addi	r2,r2,8
 2016404:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2016408:	008080b4 	movhi	r2,514
 201640c:	108a0704 	addi	r2,r2,10268
 2016410:	e0ffff17 	ldw	r3,-4(fp)
 2016414:	18c00324 	muli	r3,r3,12
 2016418:	10c5883a 	add	r2,r2,r3
 201641c:	10000015 	stw	zero,0(r2)
  }
}
 2016420:	0001883a 	nop
 2016424:	e037883a 	mov	sp,fp
 2016428:	df000017 	ldw	fp,0(sp)
 201642c:	dec00104 	addi	sp,sp,4
 2016430:	f800283a 	ret

02016434 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2016434:	defff904 	addi	sp,sp,-28
 2016438:	df000615 	stw	fp,24(sp)
 201643c:	df000604 	addi	fp,sp,24
 2016440:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016444:	0005303a 	rdctl	r2,status
 2016448:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201644c:	e0fffe17 	ldw	r3,-8(fp)
 2016450:	00bfff84 	movi	r2,-2
 2016454:	1884703a 	and	r2,r3,r2
 2016458:	1001703a 	wrctl	status,r2
  
  return context;
 201645c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2016460:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2016464:	d0a03a17 	ldw	r2,-32536(gp)
 2016468:	10c000c4 	addi	r3,r2,3
 201646c:	00bfff04 	movi	r2,-4
 2016470:	1884703a 	and	r2,r3,r2
 2016474:	d0a03a15 	stw	r2,-32536(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2016478:	d0e03a17 	ldw	r3,-32536(gp)
 201647c:	e0bfff17 	ldw	r2,-4(fp)
 2016480:	1887883a 	add	r3,r3,r2
 2016484:	00810034 	movhi	r2,1024
 2016488:	10800004 	addi	r2,r2,0
 201648c:	10c0062e 	bgeu	r2,r3,20164a8 <sbrk+0x74>
 2016490:	e0bffb17 	ldw	r2,-20(fp)
 2016494:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016498:	e0bffa17 	ldw	r2,-24(fp)
 201649c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20164a0:	00bfffc4 	movi	r2,-1
 20164a4:	00000b06 	br	20164d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 20164a8:	d0a03a17 	ldw	r2,-32536(gp)
 20164ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 20164b0:	d0e03a17 	ldw	r3,-32536(gp)
 20164b4:	e0bfff17 	ldw	r2,-4(fp)
 20164b8:	1885883a 	add	r2,r3,r2
 20164bc:	d0a03a15 	stw	r2,-32536(gp)
 20164c0:	e0bffb17 	ldw	r2,-20(fp)
 20164c4:	e0bffc15 	stw	r2,-16(fp)
 20164c8:	e0bffc17 	ldw	r2,-16(fp)
 20164cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20164d0:	e0bffd17 	ldw	r2,-12(fp)
} 
 20164d4:	e037883a 	mov	sp,fp
 20164d8:	df000017 	ldw	fp,0(sp)
 20164dc:	dec00104 	addi	sp,sp,4
 20164e0:	f800283a 	ret

020164e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20164e4:	defffe04 	addi	sp,sp,-8
 20164e8:	dfc00115 	stw	ra,4(sp)
 20164ec:	df000015 	stw	fp,0(sp)
 20164f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20164f4:	d0a03917 	ldw	r2,-32540(gp)
 20164f8:	10000326 	beq	r2,zero,2016508 <alt_get_errno+0x24>
 20164fc:	d0a03917 	ldw	r2,-32540(gp)
 2016500:	103ee83a 	callr	r2
 2016504:	00000106 	br	201650c <alt_get_errno+0x28>
 2016508:	d0a79504 	addi	r2,gp,-25004
}
 201650c:	e037883a 	mov	sp,fp
 2016510:	dfc00117 	ldw	ra,4(sp)
 2016514:	df000017 	ldw	fp,0(sp)
 2016518:	dec00204 	addi	sp,sp,8
 201651c:	f800283a 	ret

02016520 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2016520:	defff904 	addi	sp,sp,-28
 2016524:	dfc00615 	stw	ra,24(sp)
 2016528:	df000515 	stw	fp,20(sp)
 201652c:	df000504 	addi	fp,sp,20
 2016530:	e13ffd15 	stw	r4,-12(fp)
 2016534:	e17ffe15 	stw	r5,-8(fp)
 2016538:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201653c:	e0bffd17 	ldw	r2,-12(fp)
 2016540:	10000616 	blt	r2,zero,201655c <write+0x3c>
 2016544:	e0bffd17 	ldw	r2,-12(fp)
 2016548:	10c00324 	muli	r3,r2,12
 201654c:	008080b4 	movhi	r2,514
 2016550:	108a0704 	addi	r2,r2,10268
 2016554:	1885883a 	add	r2,r3,r2
 2016558:	00000106 	br	2016560 <write+0x40>
 201655c:	0005883a 	mov	r2,zero
 2016560:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2016564:	e0bffb17 	ldw	r2,-20(fp)
 2016568:	10002126 	beq	r2,zero,20165f0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 201656c:	e0bffb17 	ldw	r2,-20(fp)
 2016570:	10800217 	ldw	r2,8(r2)
 2016574:	108000cc 	andi	r2,r2,3
 2016578:	10001826 	beq	r2,zero,20165dc <write+0xbc>
 201657c:	e0bffb17 	ldw	r2,-20(fp)
 2016580:	10800017 	ldw	r2,0(r2)
 2016584:	10800617 	ldw	r2,24(r2)
 2016588:	10001426 	beq	r2,zero,20165dc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 201658c:	e0bffb17 	ldw	r2,-20(fp)
 2016590:	10800017 	ldw	r2,0(r2)
 2016594:	10800617 	ldw	r2,24(r2)
 2016598:	e0ffff17 	ldw	r3,-4(fp)
 201659c:	180d883a 	mov	r6,r3
 20165a0:	e17ffe17 	ldw	r5,-8(fp)
 20165a4:	e13ffb17 	ldw	r4,-20(fp)
 20165a8:	103ee83a 	callr	r2
 20165ac:	e0bffc15 	stw	r2,-16(fp)
 20165b0:	e0bffc17 	ldw	r2,-16(fp)
 20165b4:	1000070e 	bge	r2,zero,20165d4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 20165b8:	20164e40 	call	20164e4 <alt_get_errno>
 20165bc:	1007883a 	mov	r3,r2
 20165c0:	e0bffc17 	ldw	r2,-16(fp)
 20165c4:	0085c83a 	sub	r2,zero,r2
 20165c8:	18800015 	stw	r2,0(r3)
        return -1;
 20165cc:	00bfffc4 	movi	r2,-1
 20165d0:	00000c06 	br	2016604 <write+0xe4>
      }
      return rval;
 20165d4:	e0bffc17 	ldw	r2,-16(fp)
 20165d8:	00000a06 	br	2016604 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20165dc:	20164e40 	call	20164e4 <alt_get_errno>
 20165e0:	1007883a 	mov	r3,r2
 20165e4:	00800344 	movi	r2,13
 20165e8:	18800015 	stw	r2,0(r3)
 20165ec:	00000406 	br	2016600 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 20165f0:	20164e40 	call	20164e4 <alt_get_errno>
 20165f4:	1007883a 	mov	r3,r2
 20165f8:	00801444 	movi	r2,81
 20165fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2016600:	00bfffc4 	movi	r2,-1
}
 2016604:	e037883a 	mov	sp,fp
 2016608:	dfc00117 	ldw	ra,4(sp)
 201660c:	df000017 	ldw	fp,0(sp)
 2016610:	dec00204 	addi	sp,sp,8
 2016614:	f800283a 	ret

02016618 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2016618:	deffdf04 	addi	sp,sp,-132
 201661c:	dfc02015 	stw	ra,128(sp)
 2016620:	df001f15 	stw	fp,124(sp)
 2016624:	df001f04 	addi	fp,sp,124
 2016628:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 201662c:	e0bfe204 	addi	r2,fp,-120
 2016630:	100b883a 	mov	r5,r2
 2016634:	01003fc4 	movi	r4,255
 2016638:	201e5380 	call	201e538 <OSTaskQuery>
 201663c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2016640:	e0bffe83 	ldbu	r2,-6(fp)
 2016644:	10803fcc 	andi	r2,r2,255
 2016648:	10001e1e 	bne	r2,zero,20166c4 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 201664c:	e0bfee83 	ldbu	r2,-70(fp)
 2016650:	10803fcc 	andi	r2,r2,255
 2016654:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2016658:	d0a79b17 	ldw	r2,-24980(gp)
 201665c:	e0fffd04 	addi	r3,fp,-12
 2016660:	180b883a 	mov	r5,r3
 2016664:	1009883a 	mov	r4,r2
 2016668:	201cd500 	call	201cd50 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 201666c:	e0bffe43 	ldbu	r2,-7(fp)
 2016670:	10803fcc 	andi	r2,r2,255
 2016674:	10000726 	beq	r2,zero,2016694 <__env_lock+0x7c>
 2016678:	d0a03b17 	ldw	r2,-32532(gp)
 201667c:	e0ffe117 	ldw	r3,-124(fp)
 2016680:	1880041e 	bne	r3,r2,2016694 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2016684:	d0a79a17 	ldw	r2,-24984(gp)
 2016688:	10800044 	addi	r2,r2,1
 201668c:	d0a79a15 	stw	r2,-24984(gp)
 2016690:	00000a06 	br	20166bc <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2016694:	d0a79b17 	ldw	r2,-24980(gp)
 2016698:	e0fffe84 	addi	r3,fp,-6
 201669c:	180d883a 	mov	r6,r3
 20166a0:	000b883a 	mov	r5,zero
 20166a4:	1009883a 	mov	r4,r2
 20166a8:	201c8c80 	call	201c8c8 <OSSemPend>
    locks  = 1;
 20166ac:	00800044 	movi	r2,1
 20166b0:	d0a79a15 	stw	r2,-24984(gp)
    lockid = id;
 20166b4:	e0bfe117 	ldw	r2,-124(fp)
 20166b8:	d0a03b15 	stw	r2,-32532(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 20166bc:	0001883a 	nop
 20166c0:	00000106 	br	20166c8 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 20166c4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 20166c8:	e037883a 	mov	sp,fp
 20166cc:	dfc00117 	ldw	ra,4(sp)
 20166d0:	df000017 	ldw	fp,0(sp)
 20166d4:	dec00204 	addi	sp,sp,8
 20166d8:	f800283a 	ret

020166dc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 20166dc:	defffd04 	addi	sp,sp,-12
 20166e0:	dfc00215 	stw	ra,8(sp)
 20166e4:	df000115 	stw	fp,4(sp)
 20166e8:	df000104 	addi	fp,sp,4
 20166ec:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 20166f0:	d0a79a17 	ldw	r2,-24984(gp)
 20166f4:	10000b26 	beq	r2,zero,2016724 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 20166f8:	d0a79a17 	ldw	r2,-24984(gp)
 20166fc:	10bfffc4 	addi	r2,r2,-1
 2016700:	d0a79a15 	stw	r2,-24984(gp)
 2016704:	d0a79a17 	ldw	r2,-24984(gp)
 2016708:	1000071e 	bne	r2,zero,2016728 <__env_unlock+0x4c>
  {
    lockid = -1;
 201670c:	00bfffc4 	movi	r2,-1
 2016710:	d0a03b15 	stw	r2,-32532(gp)
    OSSemPost( alt_envsem );
 2016714:	d0a79b17 	ldw	r2,-24980(gp)
 2016718:	1009883a 	mov	r4,r2
 201671c:	201cc400 	call	201cc40 <OSSemPost>
 2016720:	00000106 	br	2016728 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2016724:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2016728:	e037883a 	mov	sp,fp
 201672c:	dfc00117 	ldw	ra,4(sp)
 2016730:	df000017 	ldw	fp,0(sp)
 2016734:	dec00204 	addi	sp,sp,8
 2016738:	f800283a 	ret

0201673c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 201673c:	deffdb04 	addi	sp,sp,-148
 2016740:	dfc02415 	stw	ra,144(sp)
 2016744:	df002315 	stw	fp,140(sp)
 2016748:	df002304 	addi	fp,sp,140
 201674c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016750:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2016754:	d0a79e43 	ldbu	r2,-24967(gp)
 2016758:	10803fcc 	andi	r2,r2,255
 201675c:	10800060 	cmpeqi	r2,r2,1
 2016760:	10003626 	beq	r2,zero,201683c <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2016764:	e0bfe204 	addi	r2,fp,-120
 2016768:	100b883a 	mov	r5,r2
 201676c:	01003fc4 	movi	r4,255
 2016770:	201e5380 	call	201e538 <OSTaskQuery>
 2016774:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2016778:	e0bffe83 	ldbu	r2,-6(fp)
 201677c:	10803fcc 	andi	r2,r2,255
 2016780:	1000301e 	bne	r2,zero,2016844 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 2016784:	e0bfee83 	ldbu	r2,-70(fp)
 2016788:	10803fcc 	andi	r2,r2,255
 201678c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 2016790:	d0a79d17 	ldw	r2,-24972(gp)
 2016794:	e0fffd04 	addi	r3,fp,-12
 2016798:	180b883a 	mov	r5,r3
 201679c:	1009883a 	mov	r4,r2
 20167a0:	201cd500 	call	201cd50 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20167a4:	0005303a 	rdctl	r2,status
 20167a8:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20167ac:	e0ffe117 	ldw	r3,-124(fp)
 20167b0:	00bfff84 	movi	r2,-2
 20167b4:	1884703a 	and	r2,r3,r2
 20167b8:	1001703a 	wrctl	status,r2
  
  return context;
 20167bc:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 20167c0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 20167c4:	e0bffd0b 	ldhu	r2,-12(fp)
 20167c8:	10bfffcc 	andi	r2,r2,65535
 20167cc:	10000b1e 	bne	r2,zero,20167fc <__malloc_lock+0xc0>
 20167d0:	d0a03c17 	ldw	r2,-32528(gp)
 20167d4:	e0ffde17 	ldw	r3,-136(fp)
 20167d8:	1880081e 	bne	r3,r2,20167fc <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 20167dc:	d0a79c17 	ldw	r2,-24976(gp)
 20167e0:	10800044 	addi	r2,r2,1
 20167e4:	d0a79c15 	stw	r2,-24976(gp)
 20167e8:	e0bfdd17 	ldw	r2,-140(fp)
 20167ec:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20167f0:	e0bfdf17 	ldw	r2,-132(fp)
 20167f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 20167f8:	00000e06 	br	2016834 <__malloc_lock+0xf8>
 20167fc:	e0bfdd17 	ldw	r2,-140(fp)
 2016800:	e0bfe015 	stw	r2,-128(fp)
 2016804:	e0bfe017 	ldw	r2,-128(fp)
 2016808:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 201680c:	d0a79d17 	ldw	r2,-24972(gp)
 2016810:	e0fffe84 	addi	r3,fp,-6
 2016814:	180d883a 	mov	r6,r3
 2016818:	000b883a 	mov	r5,zero
 201681c:	1009883a 	mov	r4,r2
 2016820:	201c8c80 	call	201c8c8 <OSSemPend>
    locks  = 1;
 2016824:	00800044 	movi	r2,1
 2016828:	d0a79c15 	stw	r2,-24976(gp)
    lockid = id;
 201682c:	e0bfde17 	ldw	r2,-136(fp)
 2016830:	d0a03c15 	stw	r2,-32528(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2016834:	0001883a 	nop
 2016838:	00000306 	br	2016848 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 201683c:	0001883a 	nop
 2016840:	00000106 	br	2016848 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2016844:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2016848:	e037883a 	mov	sp,fp
 201684c:	dfc00117 	ldw	ra,4(sp)
 2016850:	df000017 	ldw	fp,0(sp)
 2016854:	dec00204 	addi	sp,sp,8
 2016858:	f800283a 	ret

0201685c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 201685c:	defff804 	addi	sp,sp,-32
 2016860:	dfc00715 	stw	ra,28(sp)
 2016864:	df000615 	stw	fp,24(sp)
 2016868:	df000604 	addi	fp,sp,24
 201686c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016870:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2016874:	d0a79e43 	ldbu	r2,-24967(gp)
 2016878:	10803fcc 	andi	r2,r2,255
 201687c:	10800060 	cmpeqi	r2,r2,1
 2016880:	10002326 	beq	r2,zero,2016910 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016884:	0005303a 	rdctl	r2,status
 2016888:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201688c:	e0fffe17 	ldw	r3,-8(fp)
 2016890:	00bfff84 	movi	r2,-2
 2016894:	1884703a 	and	r2,r3,r2
 2016898:	1001703a 	wrctl	status,r2
  
  return context;
 201689c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 20168a0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 20168a4:	d0a79c17 	ldw	r2,-24976(gp)
 20168a8:	1000051e 	bne	r2,zero,20168c0 <__malloc_unlock+0x64>
 20168ac:	e0bffa17 	ldw	r2,-24(fp)
 20168b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20168b4:	e0bffb17 	ldw	r2,-20(fp)
 20168b8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 20168bc:	00001506 	br	2016914 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 20168c0:	d0a79c17 	ldw	r2,-24976(gp)
 20168c4:	10bfffc4 	addi	r2,r2,-1
 20168c8:	d0a79c15 	stw	r2,-24976(gp)
 20168cc:	d0a79c17 	ldw	r2,-24976(gp)
 20168d0:	10000a1e 	bne	r2,zero,20168fc <__malloc_unlock+0xa0>
  {
    lockid = -1;
 20168d4:	00bfffc4 	movi	r2,-1
 20168d8:	d0a03c15 	stw	r2,-32528(gp)
 20168dc:	e0bffa17 	ldw	r2,-24(fp)
 20168e0:	e0bffc15 	stw	r2,-16(fp)
 20168e4:	e0bffc17 	ldw	r2,-16(fp)
 20168e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 20168ec:	d0a79d17 	ldw	r2,-24972(gp)
 20168f0:	1009883a 	mov	r4,r2
 20168f4:	201cc400 	call	201cc40 <OSSemPost>
 20168f8:	00000606 	br	2016914 <__malloc_unlock+0xb8>
 20168fc:	e0bffa17 	ldw	r2,-24(fp)
 2016900:	e0bffd15 	stw	r2,-12(fp)
 2016904:	e0bffd17 	ldw	r2,-12(fp)
 2016908:	1001703a 	wrctl	status,r2
 201690c:	00000106 	br	2016914 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2016910:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2016914:	e037883a 	mov	sp,fp
 2016918:	dfc00117 	ldw	ra,4(sp)
 201691c:	df000017 	ldw	fp,0(sp)
 2016920:	dec00204 	addi	sp,sp,8
 2016924:	f800283a 	ret

02016928 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2016928:	defff704 	addi	sp,sp,-36
 201692c:	dfc00815 	stw	ra,32(sp)
 2016930:	df000715 	stw	fp,28(sp)
 2016934:	df000704 	addi	fp,sp,28
 2016938:	e13ffd15 	stw	r4,-12(fp)
 201693c:	e17ffe15 	stw	r5,-8(fp)
 2016940:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016944:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016948:	e0bfff17 	ldw	r2,-4(fp)
 201694c:	1000021e 	bne	r2,zero,2016958 <OSEventNameGet+0x30>
        return (0);
 2016950:	0005883a 	mov	r2,zero
 2016954:	00003706 	br	2016a34 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2016958:	e0bffd17 	ldw	r2,-12(fp)
 201695c:	1000051e 	bne	r2,zero,2016974 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2016960:	e0bfff17 	ldw	r2,-4(fp)
 2016964:	00c00104 	movi	r3,4
 2016968:	10c00005 	stb	r3,0(r2)
        return (0);
 201696c:	0005883a 	mov	r2,zero
 2016970:	00003006 	br	2016a34 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2016974:	e0bffe17 	ldw	r2,-8(fp)
 2016978:	1000051e 	bne	r2,zero,2016990 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201697c:	e0bfff17 	ldw	r2,-4(fp)
 2016980:	00c00304 	movi	r3,12
 2016984:	10c00005 	stb	r3,0(r2)
        return (0);
 2016988:	0005883a 	mov	r2,zero
 201698c:	00002906 	br	2016a34 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016990:	d0a7ac03 	ldbu	r2,-24912(gp)
 2016994:	10803fcc 	andi	r2,r2,255
 2016998:	10000526 	beq	r2,zero,20169b0 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 201699c:	e0bfff17 	ldw	r2,-4(fp)
 20169a0:	00c00444 	movi	r3,17
 20169a4:	10c00005 	stb	r3,0(r2)
        return (0);
 20169a8:	0005883a 	mov	r2,zero
 20169ac:	00002106 	br	2016a34 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 20169b0:	e0bffd17 	ldw	r2,-12(fp)
 20169b4:	10800003 	ldbu	r2,0(r2)
 20169b8:	10803fcc 	andi	r2,r2,255
 20169bc:	10bfffc4 	addi	r2,r2,-1
 20169c0:	10800128 	cmpgeui	r2,r2,4
 20169c4:	10000526 	beq	r2,zero,20169dc <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20169c8:	e0bfff17 	ldw	r2,-4(fp)
 20169cc:	00c00044 	movi	r3,1
 20169d0:	10c00005 	stb	r3,0(r2)
             return (0);
 20169d4:	0005883a 	mov	r2,zero
 20169d8:	00001606 	br	2016a34 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 20169dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20169e0:	0005303a 	rdctl	r2,status
 20169e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20169e8:	e0fffb17 	ldw	r3,-20(fp)
 20169ec:	00bfff84 	movi	r2,-2
 20169f0:	1884703a 	and	r2,r3,r2
 20169f4:	1001703a 	wrctl	status,r2
  
  return context;
 20169f8:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 20169fc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2016a00:	e0bffd17 	ldw	r2,-12(fp)
 2016a04:	10800384 	addi	r2,r2,14
 2016a08:	100b883a 	mov	r5,r2
 2016a0c:	e13ffe17 	ldw	r4,-8(fp)
 2016a10:	20183ac0 	call	20183ac <OS_StrCopy>
 2016a14:	e0bffa05 	stb	r2,-24(fp)
 2016a18:	e0bff917 	ldw	r2,-28(fp)
 2016a1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016a20:	e0bffc17 	ldw	r2,-16(fp)
 2016a24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016a28:	e0bfff17 	ldw	r2,-4(fp)
 2016a2c:	10000005 	stb	zero,0(r2)
    return (len);
 2016a30:	e0bffa03 	ldbu	r2,-24(fp)
}
 2016a34:	e037883a 	mov	sp,fp
 2016a38:	dfc00117 	ldw	ra,4(sp)
 2016a3c:	df000017 	ldw	fp,0(sp)
 2016a40:	dec00204 	addi	sp,sp,8
 2016a44:	f800283a 	ret

02016a48 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2016a48:	defff604 	addi	sp,sp,-40
 2016a4c:	dfc00915 	stw	ra,36(sp)
 2016a50:	df000815 	stw	fp,32(sp)
 2016a54:	df000804 	addi	fp,sp,32
 2016a58:	e13ffd15 	stw	r4,-12(fp)
 2016a5c:	e17ffe15 	stw	r5,-8(fp)
 2016a60:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016a64:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2016a68:	e0bfff17 	ldw	r2,-4(fp)
 2016a6c:	10004026 	beq	r2,zero,2016b70 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2016a70:	e0bffd17 	ldw	r2,-12(fp)
 2016a74:	1000041e 	bne	r2,zero,2016a88 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2016a78:	e0bfff17 	ldw	r2,-4(fp)
 2016a7c:	00c00104 	movi	r3,4
 2016a80:	10c00005 	stb	r3,0(r2)
        return;
 2016a84:	00003b06 	br	2016b74 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2016a88:	e0bffe17 	ldw	r2,-8(fp)
 2016a8c:	1000041e 	bne	r2,zero,2016aa0 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2016a90:	e0bfff17 	ldw	r2,-4(fp)
 2016a94:	00c00304 	movi	r3,12
 2016a98:	10c00005 	stb	r3,0(r2)
        return;
 2016a9c:	00003506 	br	2016b74 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016aa0:	d0a7ac03 	ldbu	r2,-24912(gp)
 2016aa4:	10803fcc 	andi	r2,r2,255
 2016aa8:	10000426 	beq	r2,zero,2016abc <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2016aac:	e0bfff17 	ldw	r2,-4(fp)
 2016ab0:	00c00484 	movi	r3,18
 2016ab4:	10c00005 	stb	r3,0(r2)
        return;
 2016ab8:	00002e06 	br	2016b74 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 2016abc:	e0bffd17 	ldw	r2,-12(fp)
 2016ac0:	10800003 	ldbu	r2,0(r2)
 2016ac4:	10803fcc 	andi	r2,r2,255
 2016ac8:	10bfffc4 	addi	r2,r2,-1
 2016acc:	10800128 	cmpgeui	r2,r2,4
 2016ad0:	10000426 	beq	r2,zero,2016ae4 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2016ad4:	e0bfff17 	ldw	r2,-4(fp)
 2016ad8:	00c00044 	movi	r3,1
 2016adc:	10c00005 	stb	r3,0(r2)
             return;
 2016ae0:	00002406 	br	2016b74 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2016ae4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016ae8:	0005303a 	rdctl	r2,status
 2016aec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016af0:	e0fffc17 	ldw	r3,-16(fp)
 2016af4:	00bfff84 	movi	r2,-2
 2016af8:	1884703a 	and	r2,r3,r2
 2016afc:	1001703a 	wrctl	status,r2
  
  return context;
 2016b00:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2016b04:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2016b08:	e13ffe17 	ldw	r4,-8(fp)
 2016b0c:	20184200 	call	2018420 <OS_StrLen>
 2016b10:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2016b14:	e0bffa03 	ldbu	r2,-24(fp)
 2016b18:	10800830 	cmpltui	r2,r2,32
 2016b1c:	1000081e 	bne	r2,zero,2016b40 <OSEventNameSet+0xf8>
 2016b20:	e0bff817 	ldw	r2,-32(fp)
 2016b24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016b28:	e0bff917 	ldw	r2,-28(fp)
 2016b2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2016b30:	e0bfff17 	ldw	r2,-4(fp)
 2016b34:	00c002c4 	movi	r3,11
 2016b38:	10c00005 	stb	r3,0(r2)
        return;
 2016b3c:	00000d06 	br	2016b74 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2016b40:	e0bffd17 	ldw	r2,-12(fp)
 2016b44:	10800384 	addi	r2,r2,14
 2016b48:	e17ffe17 	ldw	r5,-8(fp)
 2016b4c:	1009883a 	mov	r4,r2
 2016b50:	20183ac0 	call	20183ac <OS_StrCopy>
 2016b54:	e0bff817 	ldw	r2,-32(fp)
 2016b58:	e0bffb15 	stw	r2,-20(fp)
 2016b5c:	e0bffb17 	ldw	r2,-20(fp)
 2016b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016b64:	e0bfff17 	ldw	r2,-4(fp)
 2016b68:	10000005 	stb	zero,0(r2)
 2016b6c:	00000106 	br	2016b74 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2016b70:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2016b74:	e037883a 	mov	sp,fp
 2016b78:	dfc00117 	ldw	ra,4(sp)
 2016b7c:	df000017 	ldw	fp,0(sp)
 2016b80:	dec00204 	addi	sp,sp,8
 2016b84:	f800283a 	ret

02016b88 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 2016b88:	deffed04 	addi	sp,sp,-76
 2016b8c:	dfc01215 	stw	ra,72(sp)
 2016b90:	df001115 	stw	fp,68(sp)
 2016b94:	df001104 	addi	fp,sp,68
 2016b98:	e13ffc15 	stw	r4,-16(fp)
 2016b9c:	e17ffd15 	stw	r5,-12(fp)
 2016ba0:	e1bffe15 	stw	r6,-8(fp)
 2016ba4:	3805883a 	mov	r2,r7
 2016ba8:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 2016bac:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 2016bb0:	e0800217 	ldw	r2,8(fp)
 2016bb4:	1000021e 	bne	r2,zero,2016bc0 <OSEventPendMulti+0x38>
        return (0);
 2016bb8:	0005883a 	mov	r2,zero
 2016bbc:	00017106 	br	2017184 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 2016bc0:	e0bffc17 	ldw	r2,-16(fp)
 2016bc4:	1000051e 	bne	r2,zero,2016bdc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 2016bc8:	e0800217 	ldw	r2,8(fp)
 2016bcc:	00c00104 	movi	r3,4
 2016bd0:	10c00005 	stb	r3,0(r2)
        return (0);
 2016bd4:	0005883a 	mov	r2,zero
 2016bd8:	00016a06 	br	2017184 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2016bdc:	e0bffd17 	ldw	r2,-12(fp)
 2016be0:	1000051e 	bne	r2,zero,2016bf8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2016be4:	e0800217 	ldw	r2,8(fp)
 2016be8:	00c00104 	movi	r3,4
 2016bec:	10c00005 	stb	r3,0(r2)
        return (0);
 2016bf0:	0005883a 	mov	r2,zero
 2016bf4:	00016306 	br	2017184 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 2016bf8:	e0bffe17 	ldw	r2,-8(fp)
 2016bfc:	1000051e 	bne	r2,zero,2016c14 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2016c00:	e0800217 	ldw	r2,8(fp)
 2016c04:	00c00104 	movi	r3,4
 2016c08:	10c00005 	stb	r3,0(r2)
        return (0);
 2016c0c:	0005883a 	mov	r2,zero
 2016c10:	00015c06 	br	2017184 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2016c14:	e0bffd17 	ldw	r2,-12(fp)
 2016c18:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 2016c1c:	e0bffc17 	ldw	r2,-16(fp)
 2016c20:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 2016c24:	e0bfef17 	ldw	r2,-68(fp)
 2016c28:	10800017 	ldw	r2,0(r2)
 2016c2c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 2016c30:	00001906 	br	2016c98 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2016c34:	e0bff017 	ldw	r2,-64(fp)
 2016c38:	10800003 	ldbu	r2,0(r2)
 2016c3c:	10803fcc 	andi	r2,r2,255
 2016c40:	10c000a0 	cmpeqi	r3,r2,2
 2016c44:	1800091e 	bne	r3,zero,2016c6c <OSEventPendMulti+0xe4>
 2016c48:	10c000e0 	cmpeqi	r3,r2,3
 2016c4c:	1800091e 	bne	r3,zero,2016c74 <OSEventPendMulti+0xec>
 2016c50:	10800060 	cmpeqi	r2,r2,1
 2016c54:	1000091e 	bne	r2,zero,2016c7c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 2016c58:	e0800217 	ldw	r2,8(fp)
 2016c5c:	00c00044 	movi	r3,1
 2016c60:	10c00005 	stb	r3,0(r2)
                 return (0);
 2016c64:	0005883a 	mov	r2,zero
 2016c68:	00014606 	br	2017184 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 2016c6c:	0001883a 	nop
 2016c70:	00000306 	br	2016c80 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 2016c74:	0001883a 	nop
 2016c78:	00000106 	br	2016c80 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 2016c7c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 2016c80:	e0bfef17 	ldw	r2,-68(fp)
 2016c84:	10800104 	addi	r2,r2,4
 2016c88:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2016c8c:	e0bfef17 	ldw	r2,-68(fp)
 2016c90:	10800017 	ldw	r2,0(r2)
 2016c94:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 2016c98:	e0bff017 	ldw	r2,-64(fp)
 2016c9c:	103fe51e 	bne	r2,zero,2016c34 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 2016ca0:	d0a7ac03 	ldbu	r2,-24912(gp)
 2016ca4:	10803fcc 	andi	r2,r2,255
 2016ca8:	10000526 	beq	r2,zero,2016cc0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 2016cac:	e0800217 	ldw	r2,8(fp)
 2016cb0:	00c00084 	movi	r3,2
 2016cb4:	10c00005 	stb	r3,0(r2)
        return (0);
 2016cb8:	0005883a 	mov	r2,zero
 2016cbc:	00013106 	br	2017184 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 2016cc0:	d0a79e03 	ldbu	r2,-24968(gp)
 2016cc4:	10803fcc 	andi	r2,r2,255
 2016cc8:	10000526 	beq	r2,zero,2016ce0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 2016ccc:	e0800217 	ldw	r2,8(fp)
 2016cd0:	00c00344 	movi	r3,13
 2016cd4:	10c00005 	stb	r3,0(r2)
        return (0);
 2016cd8:	0005883a 	mov	r2,zero
 2016cdc:	00012906 	br	2017184 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016ce0:	0005303a 	rdctl	r2,status
 2016ce4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016ce8:	e0fffb17 	ldw	r3,-20(fp)
 2016cec:	00bfff84 	movi	r2,-2
 2016cf0:	1884703a 	and	r2,r3,r2
 2016cf4:	1001703a 	wrctl	status,r2
  
  return context;
 2016cf8:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2016cfc:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 2016d00:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2016d04:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 2016d08:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 2016d0c:	e0bffc17 	ldw	r2,-16(fp)
 2016d10:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2016d14:	e0bfef17 	ldw	r2,-68(fp)
 2016d18:	10800017 	ldw	r2,0(r2)
 2016d1c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2016d20:	00008106 	br	2016f28 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 2016d24:	e0bff017 	ldw	r2,-64(fp)
 2016d28:	10800003 	ldbu	r2,0(r2)
 2016d2c:	10803fcc 	andi	r2,r2,255
 2016d30:	10c000a0 	cmpeqi	r3,r2,2
 2016d34:	18003c1e 	bne	r3,zero,2016e28 <OSEventPendMulti+0x2a0>
 2016d38:	10c000e0 	cmpeqi	r3,r2,3
 2016d3c:	1800031e 	bne	r3,zero,2016d4c <OSEventPendMulti+0x1c4>
 2016d40:	10800060 	cmpeqi	r2,r2,1
 2016d44:	10001e1e 	bne	r2,zero,2016dc0 <OSEventPendMulti+0x238>
 2016d48:	00006606 	br	2016ee4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2016d4c:	e0bff017 	ldw	r2,-64(fp)
 2016d50:	1080020b 	ldhu	r2,8(r2)
 2016d54:	10bfffcc 	andi	r2,r2,65535
 2016d58:	10001526 	beq	r2,zero,2016db0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2016d5c:	e0bff017 	ldw	r2,-64(fp)
 2016d60:	1080020b 	ldhu	r2,8(r2)
 2016d64:	10bfffc4 	addi	r2,r2,-1
 2016d68:	1007883a 	mov	r3,r2
 2016d6c:	e0bff017 	ldw	r2,-64(fp)
 2016d70:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2016d74:	e0bffd17 	ldw	r2,-12(fp)
 2016d78:	10c00104 	addi	r3,r2,4
 2016d7c:	e0fffd15 	stw	r3,-12(fp)
 2016d80:	e0fff017 	ldw	r3,-64(fp)
 2016d84:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 2016d88:	00800044 	movi	r2,1
 2016d8c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 2016d90:	e0bffe17 	ldw	r2,-8(fp)
 2016d94:	10c00104 	addi	r3,r2,4
 2016d98:	e0fffe15 	stw	r3,-8(fp)
 2016d9c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 2016da0:	e0bff18b 	ldhu	r2,-58(fp)
 2016da4:	10800044 	addi	r2,r2,1
 2016da8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 2016dac:	00005806 	br	2016f10 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 2016db0:	e0bff203 	ldbu	r2,-56(fp)
 2016db4:	10800054 	ori	r2,r2,1
 2016db8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2016dbc:	00005406 	br	2016f10 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 2016dc0:	e0bff017 	ldw	r2,-64(fp)
 2016dc4:	10800117 	ldw	r2,4(r2)
 2016dc8:	10001326 	beq	r2,zero,2016e18 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 2016dcc:	e0bffe17 	ldw	r2,-8(fp)
 2016dd0:	10c00104 	addi	r3,r2,4
 2016dd4:	e0fffe15 	stw	r3,-8(fp)
 2016dd8:	e0fff017 	ldw	r3,-64(fp)
 2016ddc:	18c00117 	ldw	r3,4(r3)
 2016de0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 2016de4:	e0bff017 	ldw	r2,-64(fp)
 2016de8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 2016dec:	e0bffd17 	ldw	r2,-12(fp)
 2016df0:	10c00104 	addi	r3,r2,4
 2016df4:	e0fffd15 	stw	r3,-12(fp)
 2016df8:	e0fff017 	ldw	r3,-64(fp)
 2016dfc:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 2016e00:	00800044 	movi	r2,1
 2016e04:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2016e08:	e0bff18b 	ldhu	r2,-58(fp)
 2016e0c:	10800044 	addi	r2,r2,1
 2016e10:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2016e14:	00003e06 	br	2016f10 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 2016e18:	e0bff203 	ldbu	r2,-56(fp)
 2016e1c:	10800094 	ori	r2,r2,2
 2016e20:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2016e24:	00003a06 	br	2016f10 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 2016e28:	e0bff017 	ldw	r2,-64(fp)
 2016e2c:	10800117 	ldw	r2,4(r2)
 2016e30:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2016e34:	e0bff517 	ldw	r2,-44(fp)
 2016e38:	1080058b 	ldhu	r2,22(r2)
 2016e3c:	10bfffcc 	andi	r2,r2,65535
 2016e40:	10002426 	beq	r2,zero,2016ed4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2016e44:	e0bffe17 	ldw	r2,-8(fp)
 2016e48:	10c00104 	addi	r3,r2,4
 2016e4c:	e0fffe15 	stw	r3,-8(fp)
 2016e50:	e0fff517 	ldw	r3,-44(fp)
 2016e54:	18c00417 	ldw	r3,16(r3)
 2016e58:	19400104 	addi	r5,r3,4
 2016e5c:	e13ff517 	ldw	r4,-44(fp)
 2016e60:	21400415 	stw	r5,16(r4)
 2016e64:	18c00017 	ldw	r3,0(r3)
 2016e68:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2016e6c:	e0bff517 	ldw	r2,-44(fp)
 2016e70:	10c00417 	ldw	r3,16(r2)
 2016e74:	e0bff517 	ldw	r2,-44(fp)
 2016e78:	10800217 	ldw	r2,8(r2)
 2016e7c:	1880041e 	bne	r3,r2,2016e90 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 2016e80:	e0bff517 	ldw	r2,-44(fp)
 2016e84:	10c00117 	ldw	r3,4(r2)
 2016e88:	e0bff517 	ldw	r2,-44(fp)
 2016e8c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 2016e90:	e0bff517 	ldw	r2,-44(fp)
 2016e94:	1080058b 	ldhu	r2,22(r2)
 2016e98:	10bfffc4 	addi	r2,r2,-1
 2016e9c:	1007883a 	mov	r3,r2
 2016ea0:	e0bff517 	ldw	r2,-44(fp)
 2016ea4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 2016ea8:	e0bffd17 	ldw	r2,-12(fp)
 2016eac:	10c00104 	addi	r3,r2,4
 2016eb0:	e0fffd15 	stw	r3,-12(fp)
 2016eb4:	e0fff017 	ldw	r3,-64(fp)
 2016eb8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 2016ebc:	00800044 	movi	r2,1
 2016ec0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2016ec4:	e0bff18b 	ldhu	r2,-58(fp)
 2016ec8:	10800044 	addi	r2,r2,1
 2016ecc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 2016ed0:	00000f06 	br	2016f10 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 2016ed4:	e0bff203 	ldbu	r2,-56(fp)
 2016ed8:	10800114 	ori	r2,r2,4
 2016edc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2016ee0:	00000b06 	br	2016f10 <OSEventPendMulti+0x388>
 2016ee4:	e0bff317 	ldw	r2,-52(fp)
 2016ee8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016eec:	e0bff417 	ldw	r2,-48(fp)
 2016ef0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2016ef4:	e0bffd17 	ldw	r2,-12(fp)
 2016ef8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2016efc:	e0800217 	ldw	r2,8(fp)
 2016f00:	00c00044 	movi	r3,1
 2016f04:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 2016f08:	e0bff18b 	ldhu	r2,-58(fp)
 2016f0c:	00009d06 	br	2017184 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 2016f10:	e0bfef17 	ldw	r2,-68(fp)
 2016f14:	10800104 	addi	r2,r2,4
 2016f18:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2016f1c:	e0bfef17 	ldw	r2,-68(fp)
 2016f20:	10800017 	ldw	r2,0(r2)
 2016f24:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2016f28:	e0bff017 	ldw	r2,-64(fp)
 2016f2c:	103f7d1e 	bne	r2,zero,2016d24 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 2016f30:	e0bff103 	ldbu	r2,-60(fp)
 2016f34:	10800058 	cmpnei	r2,r2,1
 2016f38:	10000a1e 	bne	r2,zero,2016f64 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 2016f3c:	e0bffd17 	ldw	r2,-12(fp)
 2016f40:	10000015 	stw	zero,0(r2)
 2016f44:	e0bff317 	ldw	r2,-52(fp)
 2016f48:	e0bff615 	stw	r2,-40(fp)
 2016f4c:	e0bff617 	ldw	r2,-40(fp)
 2016f50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2016f54:	e0800217 	ldw	r2,8(fp)
 2016f58:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2016f5c:	e0bff18b 	ldhu	r2,-58(fp)
 2016f60:	00008806 	br	2017184 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2016f64:	d0a7ad17 	ldw	r2,-24908(gp)
 2016f68:	d0e7ad17 	ldw	r3,-24908(gp)
 2016f6c:	19000c03 	ldbu	r4,48(r3)
 2016f70:	e0fff203 	ldbu	r3,-56(fp)
 2016f74:	20c6b03a 	or	r3,r4,r3
 2016f78:	1809883a 	mov	r4,r3
 2016f7c:	00ffe004 	movi	r3,-128
 2016f80:	20c6b03a 	or	r3,r4,r3
 2016f84:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2016f88:	d0a7ad17 	ldw	r2,-24908(gp)
 2016f8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 2016f90:	d0a7ad17 	ldw	r2,-24908(gp)
 2016f94:	e0ffff0b 	ldhu	r3,-4(fp)
 2016f98:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 2016f9c:	e13ffc17 	ldw	r4,-16(fp)
 2016fa0:	2017ac40 	call	2017ac4 <OS_EventTaskWaitMulti>
 2016fa4:	e0bff317 	ldw	r2,-52(fp)
 2016fa8:	e0bff915 	stw	r2,-28(fp)
 2016fac:	e0bff917 	ldw	r2,-28(fp)
 2016fb0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 2016fb4:	20182680 	call	2018268 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016fb8:	0005303a 	rdctl	r2,status
 2016fbc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016fc0:	e0fff717 	ldw	r3,-36(fp)
 2016fc4:	00bfff84 	movi	r2,-2
 2016fc8:	1884703a 	and	r2,r3,r2
 2016fcc:	1001703a 	wrctl	status,r2
  
  return context;
 2016fd0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 2016fd4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 2016fd8:	d0a7ad17 	ldw	r2,-24908(gp)
 2016fdc:	10800c43 	ldbu	r2,49(r2)
 2016fe0:	10803fcc 	andi	r2,r2,255
 2016fe4:	10000226 	beq	r2,zero,2016ff0 <OSEventPendMulti+0x468>
 2016fe8:	108000a0 	cmpeqi	r2,r2,2
 2016fec:	10001826 	beq	r2,zero,2017050 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 2016ff0:	d0a7ad17 	ldw	r2,-24908(gp)
 2016ff4:	10800717 	ldw	r2,28(r2)
 2016ff8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2016ffc:	e0bff017 	ldw	r2,-64(fp)
 2017000:	10000b26 	beq	r2,zero,2017030 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2017004:	e0bffd17 	ldw	r2,-12(fp)
 2017008:	10c00104 	addi	r3,r2,4
 201700c:	e0fffd15 	stw	r3,-12(fp)
 2017010:	e0fff017 	ldw	r3,-64(fp)
 2017014:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2017018:	e0bffd17 	ldw	r2,-12(fp)
 201701c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 2017020:	e0bff18b 	ldhu	r2,-58(fp)
 2017024:	10800044 	addi	r2,r2,1
 2017028:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 201702c:	00000d06 	br	2017064 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 2017030:	d0a7ad17 	ldw	r2,-24908(gp)
 2017034:	00c00044 	movi	r3,1
 2017038:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 201703c:	d0a7ad17 	ldw	r2,-24908(gp)
 2017040:	e17ffc17 	ldw	r5,-16(fp)
 2017044:	1009883a 	mov	r4,r2
 2017048:	2017ccc0 	call	2017ccc <OS_EventTaskRemoveMulti>
             }
			 break;
 201704c:	00000506 	br	2017064 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2017050:	d0a7ad17 	ldw	r2,-24908(gp)
 2017054:	e17ffc17 	ldw	r5,-16(fp)
 2017058:	1009883a 	mov	r4,r2
 201705c:	2017ccc0 	call	2017ccc <OS_EventTaskRemoveMulti>
             break;
 2017060:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2017064:	d0a7ad17 	ldw	r2,-24908(gp)
 2017068:	10800c43 	ldbu	r2,49(r2)
 201706c:	10803fcc 	andi	r2,r2,255
 2017070:	10000326 	beq	r2,zero,2017080 <OSEventPendMulti+0x4f8>
 2017074:	108000a0 	cmpeqi	r2,r2,2
 2017078:	1000231e 	bne	r2,zero,2017108 <OSEventPendMulti+0x580>
 201707c:	00002a06 	br	2017128 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 2017080:	e0bff017 	ldw	r2,-64(fp)
 2017084:	10800003 	ldbu	r2,0(r2)
 2017088:	10803fcc 	andi	r2,r2,255
 201708c:	0080100e 	bge	zero,r2,20170d0 <OSEventPendMulti+0x548>
 2017090:	10c000d0 	cmplti	r3,r2,3
 2017094:	1800071e 	bne	r3,zero,20170b4 <OSEventPendMulti+0x52c>
 2017098:	108000e0 	cmpeqi	r2,r2,3
 201709c:	10000c26 	beq	r2,zero,20170d0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 20170a0:	e0bffe17 	ldw	r2,-8(fp)
 20170a4:	10c00104 	addi	r3,r2,4
 20170a8:	e0fffe15 	stw	r3,-8(fp)
 20170ac:	10000015 	stw	zero,0(r2)
                      break;
 20170b0:	00001206 	br	20170fc <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 20170b4:	e0bffe17 	ldw	r2,-8(fp)
 20170b8:	10c00104 	addi	r3,r2,4
 20170bc:	e0fffe15 	stw	r3,-8(fp)
 20170c0:	d0e7ad17 	ldw	r3,-24908(gp)
 20170c4:	18c00917 	ldw	r3,36(r3)
 20170c8:	10c00015 	stw	r3,0(r2)
                      break;
 20170cc:	00000b06 	br	20170fc <OSEventPendMulti+0x574>
 20170d0:	e0bff317 	ldw	r2,-52(fp)
 20170d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20170d8:	e0bff817 	ldw	r2,-32(fp)
 20170dc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 20170e0:	e0bffd17 	ldw	r2,-12(fp)
 20170e4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 20170e8:	e0800217 	ldw	r2,8(fp)
 20170ec:	00c00044 	movi	r3,1
 20170f0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 20170f4:	e0bff18b 	ldhu	r2,-58(fp)
 20170f8:	00002206 	br	2017184 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 20170fc:	e0800217 	ldw	r2,8(fp)
 2017100:	10000005 	stb	zero,0(r2)
             break;
 2017104:	00001006 	br	2017148 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2017108:	e0bffe17 	ldw	r2,-8(fp)
 201710c:	10c00104 	addi	r3,r2,4
 2017110:	e0fffe15 	stw	r3,-8(fp)
 2017114:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2017118:	e0800217 	ldw	r2,8(fp)
 201711c:	00c00384 	movi	r3,14
 2017120:	10c00005 	stb	r3,0(r2)
             break;
 2017124:	00000806 	br	2017148 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2017128:	e0bffe17 	ldw	r2,-8(fp)
 201712c:	10c00104 	addi	r3,r2,4
 2017130:	e0fffe15 	stw	r3,-8(fp)
 2017134:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2017138:	e0800217 	ldw	r2,8(fp)
 201713c:	00c00284 	movi	r3,10
 2017140:	10c00005 	stb	r3,0(r2)
             break;
 2017144:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2017148:	d0a7ad17 	ldw	r2,-24908(gp)
 201714c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2017150:	d0a7ad17 	ldw	r2,-24908(gp)
 2017154:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2017158:	d0a7ad17 	ldw	r2,-24908(gp)
 201715c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2017160:	d0a7ad17 	ldw	r2,-24908(gp)
 2017164:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2017168:	d0a7ad17 	ldw	r2,-24908(gp)
 201716c:	10000915 	stw	zero,36(r2)
 2017170:	e0bff317 	ldw	r2,-52(fp)
 2017174:	e0bffa15 	stw	r2,-24(fp)
 2017178:	e0bffa17 	ldw	r2,-24(fp)
 201717c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2017180:	e0bff18b 	ldhu	r2,-58(fp)
}
 2017184:	e037883a 	mov	sp,fp
 2017188:	dfc00117 	ldw	ra,4(sp)
 201718c:	df000017 	ldw	fp,0(sp)
 2017190:	dec00204 	addi	sp,sp,8
 2017194:	f800283a 	ret

02017198 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 2017198:	defffe04 	addi	sp,sp,-8
 201719c:	dfc00115 	stw	ra,4(sp)
 20171a0:	df000015 	stw	fp,0(sp)
 20171a4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 20171a8:	2020bd80 	call	2020bd8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 20171ac:	2017f140 	call	2017f14 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 20171b0:	2017f5c0 	call	2017f5c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 20171b4:	20180c80 	call	20180c8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 20171b8:	2017e340 	call	2017e34 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 20171bc:	2019f680 	call	2019f68 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 20171c0:	201b3300 	call	201b330 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 20171c4:	201c4580 	call	201c458 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 20171c8:	2017fc80 	call	2017fc8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 20171cc:	20180480 	call	2018048 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 20171d0:	2020bf80 	call	2020bf8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 20171d4:	201893c0 	call	201893c <OSDebugInit>
#endif
}
 20171d8:	0001883a 	nop
 20171dc:	e037883a 	mov	sp,fp
 20171e0:	dfc00117 	ldw	ra,4(sp)
 20171e4:	df000017 	ldw	fp,0(sp)
 20171e8:	dec00204 	addi	sp,sp,8
 20171ec:	f800283a 	ret

020171f0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 20171f0:	deffff04 	addi	sp,sp,-4
 20171f4:	df000015 	stw	fp,0(sp)
 20171f8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 20171fc:	d0a79e43 	ldbu	r2,-24967(gp)
 2017200:	10803fcc 	andi	r2,r2,255
 2017204:	10800058 	cmpnei	r2,r2,1
 2017208:	1000071e 	bne	r2,zero,2017228 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 201720c:	d0a7ac03 	ldbu	r2,-24912(gp)
 2017210:	10803fcc 	andi	r2,r2,255
 2017214:	10803fe0 	cmpeqi	r2,r2,255
 2017218:	1000031e 	bne	r2,zero,2017228 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 201721c:	d0a7ac03 	ldbu	r2,-24912(gp)
 2017220:	10800044 	addi	r2,r2,1
 2017224:	d0a7ac05 	stb	r2,-24912(gp)
        }
    }
}
 2017228:	0001883a 	nop
 201722c:	e037883a 	mov	sp,fp
 2017230:	df000017 	ldw	fp,0(sp)
 2017234:	dec00104 	addi	sp,sp,4
 2017238:	f800283a 	ret

0201723c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 201723c:	defffb04 	addi	sp,sp,-20
 2017240:	dfc00415 	stw	ra,16(sp)
 2017244:	df000315 	stw	fp,12(sp)
 2017248:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201724c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2017250:	d0a79e43 	ldbu	r2,-24967(gp)
 2017254:	10803fcc 	andi	r2,r2,255
 2017258:	10800058 	cmpnei	r2,r2,1
 201725c:	10002f1e 	bne	r2,zero,201731c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017260:	0005303a 	rdctl	r2,status
 2017264:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017268:	e0ffff17 	ldw	r3,-4(fp)
 201726c:	00bfff84 	movi	r2,-2
 2017270:	1884703a 	and	r2,r3,r2
 2017274:	1001703a 	wrctl	status,r2
  
  return context;
 2017278:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 201727c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2017280:	d0a7ac03 	ldbu	r2,-24912(gp)
 2017284:	10803fcc 	andi	r2,r2,255
 2017288:	10000326 	beq	r2,zero,2017298 <OSIntExit+0x5c>
            OSIntNesting--;
 201728c:	d0a7ac03 	ldbu	r2,-24912(gp)
 2017290:	10bfffc4 	addi	r2,r2,-1
 2017294:	d0a7ac05 	stb	r2,-24912(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 2017298:	d0a7ac03 	ldbu	r2,-24912(gp)
 201729c:	10803fcc 	andi	r2,r2,255
 20172a0:	10001a1e 	bne	r2,zero,201730c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 20172a4:	d0a79e03 	ldbu	r2,-24968(gp)
 20172a8:	10803fcc 	andi	r2,r2,255
 20172ac:	1000171e 	bne	r2,zero,201730c <OSIntExit+0xd0>
                OS_SchedNew();
 20172b0:	20183380 	call	2018338 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 20172b4:	d0e7a003 	ldbu	r3,-24960(gp)
 20172b8:	d0a7a043 	ldbu	r2,-24959(gp)
 20172bc:	18c03fcc 	andi	r3,r3,255
 20172c0:	10803fcc 	andi	r2,r2,255
 20172c4:	18801126 	beq	r3,r2,201730c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 20172c8:	d0a7a003 	ldbu	r2,-24960(gp)
 20172cc:	10c03fcc 	andi	r3,r2,255
 20172d0:	008080f4 	movhi	r2,515
 20172d4:	10bac204 	addi	r2,r2,-5368
 20172d8:	18c7883a 	add	r3,r3,r3
 20172dc:	18c7883a 	add	r3,r3,r3
 20172e0:	10c5883a 	add	r2,r2,r3
 20172e4:	10800017 	ldw	r2,0(r2)
 20172e8:	d0a7a815 	stw	r2,-24928(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 20172ec:	d0a7a817 	ldw	r2,-24928(gp)
 20172f0:	10c00e17 	ldw	r3,56(r2)
 20172f4:	18c00044 	addi	r3,r3,1
 20172f8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 20172fc:	d0a7a317 	ldw	r2,-24948(gp)
 2017300:	10800044 	addi	r2,r2,1
 2017304:	d0a7a315 	stw	r2,-24948(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2017308:	20209040 	call	2020904 <OSCtxSw>
 201730c:	e0bffd17 	ldw	r2,-12(fp)
 2017310:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017314:	e0bffe17 	ldw	r2,-8(fp)
 2017318:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 201731c:	0001883a 	nop
 2017320:	e037883a 	mov	sp,fp
 2017324:	dfc00117 	ldw	ra,4(sp)
 2017328:	df000017 	ldw	fp,0(sp)
 201732c:	dec00204 	addi	sp,sp,8
 2017330:	f800283a 	ret

02017334 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2017334:	defffc04 	addi	sp,sp,-16
 2017338:	df000315 	stw	fp,12(sp)
 201733c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017340:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2017344:	d0a79e43 	ldbu	r2,-24967(gp)
 2017348:	10803fcc 	andi	r2,r2,255
 201734c:	10800058 	cmpnei	r2,r2,1
 2017350:	1000161e 	bne	r2,zero,20173ac <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017354:	0005303a 	rdctl	r2,status
 2017358:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201735c:	e0ffff17 	ldw	r3,-4(fp)
 2017360:	00bfff84 	movi	r2,-2
 2017364:	1884703a 	and	r2,r3,r2
 2017368:	1001703a 	wrctl	status,r2
  
  return context;
 201736c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2017370:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2017374:	d0a7ac03 	ldbu	r2,-24912(gp)
 2017378:	10803fcc 	andi	r2,r2,255
 201737c:	1000071e 	bne	r2,zero,201739c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2017380:	d0a79e03 	ldbu	r2,-24968(gp)
 2017384:	10803fcc 	andi	r2,r2,255
 2017388:	10803fe0 	cmpeqi	r2,r2,255
 201738c:	1000031e 	bne	r2,zero,201739c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2017390:	d0a79e03 	ldbu	r2,-24968(gp)
 2017394:	10800044 	addi	r2,r2,1
 2017398:	d0a79e05 	stb	r2,-24968(gp)
 201739c:	e0bffd17 	ldw	r2,-12(fp)
 20173a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20173a4:	e0bffe17 	ldw	r2,-8(fp)
 20173a8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20173ac:	0001883a 	nop
 20173b0:	e037883a 	mov	sp,fp
 20173b4:	df000017 	ldw	fp,0(sp)
 20173b8:	dec00104 	addi	sp,sp,4
 20173bc:	f800283a 	ret

020173c0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 20173c0:	defff804 	addi	sp,sp,-32
 20173c4:	dfc00715 	stw	ra,28(sp)
 20173c8:	df000615 	stw	fp,24(sp)
 20173cc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20173d0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 20173d4:	d0a79e43 	ldbu	r2,-24967(gp)
 20173d8:	10803fcc 	andi	r2,r2,255
 20173dc:	10800058 	cmpnei	r2,r2,1
 20173e0:	1000281e 	bne	r2,zero,2017484 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20173e4:	0005303a 	rdctl	r2,status
 20173e8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20173ec:	e0ffff17 	ldw	r3,-4(fp)
 20173f0:	00bfff84 	movi	r2,-2
 20173f4:	1884703a 	and	r2,r3,r2
 20173f8:	1001703a 	wrctl	status,r2
  
  return context;
 20173fc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2017400:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2017404:	d0a79e03 	ldbu	r2,-24968(gp)
 2017408:	10803fcc 	andi	r2,r2,255
 201740c:	10001926 	beq	r2,zero,2017474 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2017410:	d0a79e03 	ldbu	r2,-24968(gp)
 2017414:	10bfffc4 	addi	r2,r2,-1
 2017418:	d0a79e05 	stb	r2,-24968(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 201741c:	d0a79e03 	ldbu	r2,-24968(gp)
 2017420:	10803fcc 	andi	r2,r2,255
 2017424:	10000e1e 	bne	r2,zero,2017460 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2017428:	d0a7ac03 	ldbu	r2,-24912(gp)
 201742c:	10803fcc 	andi	r2,r2,255
 2017430:	1000061e 	bne	r2,zero,201744c <OSSchedUnlock+0x8c>
 2017434:	e0bffa17 	ldw	r2,-24(fp)
 2017438:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201743c:	e0bffb17 	ldw	r2,-20(fp)
 2017440:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2017444:	20182680 	call	2018268 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2017448:	00000e06 	br	2017484 <OSSchedUnlock+0xc4>
 201744c:	e0bffa17 	ldw	r2,-24(fp)
 2017450:	e0bffc15 	stw	r2,-16(fp)
 2017454:	e0bffc17 	ldw	r2,-16(fp)
 2017458:	1001703a 	wrctl	status,r2
 201745c:	00000906 	br	2017484 <OSSchedUnlock+0xc4>
 2017460:	e0bffa17 	ldw	r2,-24(fp)
 2017464:	e0bffd15 	stw	r2,-12(fp)
 2017468:	e0bffd17 	ldw	r2,-12(fp)
 201746c:	1001703a 	wrctl	status,r2
 2017470:	00000406 	br	2017484 <OSSchedUnlock+0xc4>
 2017474:	e0bffa17 	ldw	r2,-24(fp)
 2017478:	e0bffe15 	stw	r2,-8(fp)
 201747c:	e0bffe17 	ldw	r2,-8(fp)
 2017480:	1001703a 	wrctl	status,r2
 2017484:	0001883a 	nop
 2017488:	e037883a 	mov	sp,fp
 201748c:	dfc00117 	ldw	ra,4(sp)
 2017490:	df000017 	ldw	fp,0(sp)
 2017494:	dec00204 	addi	sp,sp,8
 2017498:	f800283a 	ret

0201749c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 201749c:	defffe04 	addi	sp,sp,-8
 20174a0:	dfc00115 	stw	ra,4(sp)
 20174a4:	df000015 	stw	fp,0(sp)
 20174a8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 20174ac:	d0a79e43 	ldbu	r2,-24967(gp)
 20174b0:	10803fcc 	andi	r2,r2,255
 20174b4:	10000f1e 	bne	r2,zero,20174f4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 20174b8:	20183380 	call	2018338 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 20174bc:	d0a7a003 	ldbu	r2,-24960(gp)
 20174c0:	d0a7a045 	stb	r2,-24959(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 20174c4:	d0a7a003 	ldbu	r2,-24960(gp)
 20174c8:	10c03fcc 	andi	r3,r2,255
 20174cc:	008080f4 	movhi	r2,515
 20174d0:	10bac204 	addi	r2,r2,-5368
 20174d4:	18c7883a 	add	r3,r3,r3
 20174d8:	18c7883a 	add	r3,r3,r3
 20174dc:	10c5883a 	add	r2,r2,r3
 20174e0:	10800017 	ldw	r2,0(r2)
 20174e4:	d0a7a815 	stw	r2,-24928(gp)
        OSTCBCur      = OSTCBHighRdy;
 20174e8:	d0a7a817 	ldw	r2,-24928(gp)
 20174ec:	d0a7ad15 	stw	r2,-24908(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 20174f0:	20209900 	call	2020990 <OSStartHighRdy>
    }
}
 20174f4:	0001883a 	nop
 20174f8:	e037883a 	mov	sp,fp
 20174fc:	dfc00117 	ldw	ra,4(sp)
 2017500:	df000017 	ldw	fp,0(sp)
 2017504:	dec00204 	addi	sp,sp,8
 2017508:	f800283a 	ret

0201750c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 201750c:	defff904 	addi	sp,sp,-28
 2017510:	dfc00615 	stw	ra,24(sp)
 2017514:	df000515 	stw	fp,20(sp)
 2017518:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201751c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2017520:	01000084 	movi	r4,2
 2017524:	201e6cc0 	call	201e6cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017528:	0005303a 	rdctl	r2,status
 201752c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017530:	e0fffc17 	ldw	r3,-16(fp)
 2017534:	00bfff84 	movi	r2,-2
 2017538:	1884703a 	and	r2,r3,r2
 201753c:	1001703a 	wrctl	status,r2
  
  return context;
 2017540:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2017544:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2017548:	d0279f15 	stw	zero,-24964(gp)
 201754c:	e0bffb17 	ldw	r2,-20(fp)
 2017550:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017554:	e0bffd17 	ldw	r2,-12(fp)
 2017558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 201755c:	01001904 	movi	r4,100
 2017560:	201e6cc0 	call	201e6cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017564:	0005303a 	rdctl	r2,status
 2017568:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201756c:	e0fffe17 	ldw	r3,-8(fp)
 2017570:	00bfff84 	movi	r2,-2
 2017574:	1884703a 	and	r2,r3,r2
 2017578:	1001703a 	wrctl	status,r2
  
  return context;
 201757c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2017580:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2017584:	d0a79f17 	ldw	r2,-24964(gp)
 2017588:	d0a7a415 	stw	r2,-24944(gp)
    OSStatRdy    = OS_TRUE;
 201758c:	00800044 	movi	r2,1
 2017590:	d0a7b005 	stb	r2,-24896(gp)
 2017594:	e0bffb17 	ldw	r2,-20(fp)
 2017598:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201759c:	e0bfff17 	ldw	r2,-4(fp)
 20175a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 20175a4:	0001883a 	nop
 20175a8:	e037883a 	mov	sp,fp
 20175ac:	dfc00117 	ldw	ra,4(sp)
 20175b0:	df000017 	ldw	fp,0(sp)
 20175b4:	dec00204 	addi	sp,sp,8
 20175b8:	f800283a 	ret

020175bc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 20175bc:	defff704 	addi	sp,sp,-36
 20175c0:	dfc00815 	stw	ra,32(sp)
 20175c4:	df000715 	stw	fp,28(sp)
 20175c8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20175cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 20175d0:	2020bb80 	call	2020bb8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20175d4:	0005303a 	rdctl	r2,status
 20175d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20175dc:	e0fffd17 	ldw	r3,-12(fp)
 20175e0:	00bfff84 	movi	r2,-2
 20175e4:	1884703a 	and	r2,r3,r2
 20175e8:	1001703a 	wrctl	status,r2
  
  return context;
 20175ec:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 20175f0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 20175f4:	d0a7ae17 	ldw	r2,-24904(gp)
 20175f8:	10800044 	addi	r2,r2,1
 20175fc:	d0a7ae15 	stw	r2,-24904(gp)
 2017600:	e0bffb17 	ldw	r2,-20(fp)
 2017604:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017608:	e0bfff17 	ldw	r2,-4(fp)
 201760c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2017610:	d0a79e43 	ldbu	r2,-24967(gp)
 2017614:	10803fcc 	andi	r2,r2,255
 2017618:	10800058 	cmpnei	r2,r2,1
 201761c:	10006a1e 	bne	r2,zero,20177c8 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2017620:	d0a7a203 	ldbu	r2,-24952(gp)
 2017624:	10803fcc 	andi	r2,r2,255
 2017628:	10c00060 	cmpeqi	r3,r2,1
 201762c:	1800061e 	bne	r3,zero,2017648 <OSTimeTick+0x8c>
 2017630:	10c000a0 	cmpeqi	r3,r2,2
 2017634:	1800061e 	bne	r3,zero,2017650 <OSTimeTick+0x94>
 2017638:	10000a1e 	bne	r2,zero,2017664 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 201763c:	00800044 	movi	r2,1
 2017640:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2017644:	00000b06 	br	2017674 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2017648:	e03ffa05 	stb	zero,-24(fp)
                 break;
 201764c:	00000906 	br	2017674 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2017650:	00800044 	movi	r2,1
 2017654:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2017658:	00800044 	movi	r2,1
 201765c:	d0a7a205 	stb	r2,-24952(gp)
                 break;
 2017660:	00000406 	br	2017674 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2017664:	00800044 	movi	r2,1
 2017668:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 201766c:	d027a205 	stb	zero,-24952(gp)
                 break;
 2017670:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2017674:	e0bffa03 	ldbu	r2,-24(fp)
 2017678:	10005226 	beq	r2,zero,20177c4 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 201767c:	d0a7a117 	ldw	r2,-24956(gp)
 2017680:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2017684:	00004906 	br	20177ac <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017688:	0005303a 	rdctl	r2,status
 201768c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017690:	e0fffc17 	ldw	r3,-16(fp)
 2017694:	00bfff84 	movi	r2,-2
 2017698:	1884703a 	and	r2,r3,r2
 201769c:	1001703a 	wrctl	status,r2
  
  return context;
 20176a0:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 20176a4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 20176a8:	e0bff917 	ldw	r2,-28(fp)
 20176ac:	10800b8b 	ldhu	r2,46(r2)
 20176b0:	10bfffcc 	andi	r2,r2,65535
 20176b4:	10003626 	beq	r2,zero,2017790 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 20176b8:	e0bff917 	ldw	r2,-28(fp)
 20176bc:	10800b8b 	ldhu	r2,46(r2)
 20176c0:	10bfffc4 	addi	r2,r2,-1
 20176c4:	1007883a 	mov	r3,r2
 20176c8:	e0bff917 	ldw	r2,-28(fp)
 20176cc:	10c00b8d 	sth	r3,46(r2)
 20176d0:	e0bff917 	ldw	r2,-28(fp)
 20176d4:	10800b8b 	ldhu	r2,46(r2)
 20176d8:	10bfffcc 	andi	r2,r2,65535
 20176dc:	10002c1e 	bne	r2,zero,2017790 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 20176e0:	e0bff917 	ldw	r2,-28(fp)
 20176e4:	10800c03 	ldbu	r2,48(r2)
 20176e8:	10803fcc 	andi	r2,r2,255
 20176ec:	10800dcc 	andi	r2,r2,55
 20176f0:	10000b26 	beq	r2,zero,2017720 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 20176f4:	e0bff917 	ldw	r2,-28(fp)
 20176f8:	10c00c03 	ldbu	r3,48(r2)
 20176fc:	00bff204 	movi	r2,-56
 2017700:	1884703a 	and	r2,r3,r2
 2017704:	1007883a 	mov	r3,r2
 2017708:	e0bff917 	ldw	r2,-28(fp)
 201770c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2017710:	e0bff917 	ldw	r2,-28(fp)
 2017714:	00c00044 	movi	r3,1
 2017718:	10c00c45 	stb	r3,49(r2)
 201771c:	00000206 	br	2017728 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2017720:	e0bff917 	ldw	r2,-28(fp)
 2017724:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2017728:	e0bff917 	ldw	r2,-28(fp)
 201772c:	10800c03 	ldbu	r2,48(r2)
 2017730:	10803fcc 	andi	r2,r2,255
 2017734:	1080020c 	andi	r2,r2,8
 2017738:	1000151e 	bne	r2,zero,2017790 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 201773c:	e0bff917 	ldw	r2,-28(fp)
 2017740:	10c00d83 	ldbu	r3,54(r2)
 2017744:	d0a7aa03 	ldbu	r2,-24920(gp)
 2017748:	1884b03a 	or	r2,r3,r2
 201774c:	d0a7aa05 	stb	r2,-24920(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2017750:	e0bff917 	ldw	r2,-28(fp)
 2017754:	10800d03 	ldbu	r2,52(r2)
 2017758:	10c03fcc 	andi	r3,r2,255
 201775c:	e0bff917 	ldw	r2,-28(fp)
 2017760:	10800d03 	ldbu	r2,52(r2)
 2017764:	11003fcc 	andi	r4,r2,255
 2017768:	d0a7aa44 	addi	r2,gp,-24919
 201776c:	2085883a 	add	r2,r4,r2
 2017770:	11000003 	ldbu	r4,0(r2)
 2017774:	e0bff917 	ldw	r2,-28(fp)
 2017778:	10800d43 	ldbu	r2,53(r2)
 201777c:	2084b03a 	or	r2,r4,r2
 2017780:	1009883a 	mov	r4,r2
 2017784:	d0a7aa44 	addi	r2,gp,-24919
 2017788:	1885883a 	add	r2,r3,r2
 201778c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2017790:	e0bff917 	ldw	r2,-28(fp)
 2017794:	10800517 	ldw	r2,20(r2)
 2017798:	e0bff915 	stw	r2,-28(fp)
 201779c:	e0bffb17 	ldw	r2,-20(fp)
 20177a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20177a4:	e0bffe17 	ldw	r2,-8(fp)
 20177a8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 20177ac:	e0bff917 	ldw	r2,-28(fp)
 20177b0:	10800c83 	ldbu	r2,50(r2)
 20177b4:	10803fcc 	andi	r2,r2,255
 20177b8:	10800518 	cmpnei	r2,r2,20
 20177bc:	103fb21e 	bne	r2,zero,2017688 <OSTimeTick+0xcc>
 20177c0:	00000106 	br	20177c8 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 20177c4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 20177c8:	e037883a 	mov	sp,fp
 20177cc:	dfc00117 	ldw	ra,4(sp)
 20177d0:	df000017 	ldw	fp,0(sp)
 20177d4:	dec00204 	addi	sp,sp,8
 20177d8:	f800283a 	ret

020177dc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 20177dc:	deffff04 	addi	sp,sp,-4
 20177e0:	df000015 	stw	fp,0(sp)
 20177e4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 20177e8:	00804784 	movi	r2,286
}
 20177ec:	e037883a 	mov	sp,fp
 20177f0:	df000017 	ldw	fp,0(sp)
 20177f4:	dec00104 	addi	sp,sp,4
 20177f8:	f800283a 	ret

020177fc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 20177fc:	deffff04 	addi	sp,sp,-4
 2017800:	df000015 	stw	fp,0(sp)
 2017804:	d839883a 	mov	fp,sp
}
 2017808:	0001883a 	nop
 201780c:	e037883a 	mov	sp,fp
 2017810:	df000017 	ldw	fp,0(sp)
 2017814:	dec00104 	addi	sp,sp,4
 2017818:	f800283a 	ret

0201781c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 201781c:	defff804 	addi	sp,sp,-32
 2017820:	dfc00715 	stw	ra,28(sp)
 2017824:	df000615 	stw	fp,24(sp)
 2017828:	df000604 	addi	fp,sp,24
 201782c:	e13ffc15 	stw	r4,-16(fp)
 2017830:	e17ffd15 	stw	r5,-12(fp)
 2017834:	3007883a 	mov	r3,r6
 2017838:	3805883a 	mov	r2,r7
 201783c:	e0fffe05 	stb	r3,-8(fp)
 2017840:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2017844:	e0bffc17 	ldw	r2,-16(fp)
 2017848:	10800283 	ldbu	r2,10(r2)
 201784c:	10c03fcc 	andi	r3,r2,255
 2017850:	008080b4 	movhi	r2,514
 2017854:	10877404 	addi	r2,r2,7632
 2017858:	10c5883a 	add	r2,r2,r3
 201785c:	10800003 	ldbu	r2,0(r2)
 2017860:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2017864:	e0bffa03 	ldbu	r2,-24(fp)
 2017868:	e0fffc17 	ldw	r3,-16(fp)
 201786c:	1885883a 	add	r2,r3,r2
 2017870:	108002c4 	addi	r2,r2,11
 2017874:	10800003 	ldbu	r2,0(r2)
 2017878:	10c03fcc 	andi	r3,r2,255
 201787c:	008080b4 	movhi	r2,514
 2017880:	10877404 	addi	r2,r2,7632
 2017884:	10c5883a 	add	r2,r2,r3
 2017888:	10800003 	ldbu	r2,0(r2)
 201788c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2017890:	e0bffa03 	ldbu	r2,-24(fp)
 2017894:	100490fa 	slli	r2,r2,3
 2017898:	1007883a 	mov	r3,r2
 201789c:	e0bffa43 	ldbu	r2,-23(fp)
 20178a0:	1885883a 	add	r2,r3,r2
 20178a4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 20178a8:	e0fffa83 	ldbu	r3,-22(fp)
 20178ac:	008080f4 	movhi	r2,515
 20178b0:	10bac204 	addi	r2,r2,-5368
 20178b4:	18c7883a 	add	r3,r3,r3
 20178b8:	18c7883a 	add	r3,r3,r3
 20178bc:	10c5883a 	add	r2,r2,r3
 20178c0:	10800017 	ldw	r2,0(r2)
 20178c4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 20178c8:	e0bffb17 	ldw	r2,-20(fp)
 20178cc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 20178d0:	e0bffb17 	ldw	r2,-20(fp)
 20178d4:	e0fffd17 	ldw	r3,-12(fp)
 20178d8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 20178dc:	e0bffb17 	ldw	r2,-20(fp)
 20178e0:	10800c03 	ldbu	r2,48(r2)
 20178e4:	1007883a 	mov	r3,r2
 20178e8:	e0bffe03 	ldbu	r2,-8(fp)
 20178ec:	0084303a 	nor	r2,zero,r2
 20178f0:	1884703a 	and	r2,r3,r2
 20178f4:	1007883a 	mov	r3,r2
 20178f8:	e0bffb17 	ldw	r2,-20(fp)
 20178fc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2017900:	e0bffb17 	ldw	r2,-20(fp)
 2017904:	e0ffff03 	ldbu	r3,-4(fp)
 2017908:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 201790c:	e0bffb17 	ldw	r2,-20(fp)
 2017910:	10800c03 	ldbu	r2,48(r2)
 2017914:	10803fcc 	andi	r2,r2,255
 2017918:	1080020c 	andi	r2,r2,8
 201791c:	1000111e 	bne	r2,zero,2017964 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2017920:	e0bffb17 	ldw	r2,-20(fp)
 2017924:	10c00d83 	ldbu	r3,54(r2)
 2017928:	d0a7aa03 	ldbu	r2,-24920(gp)
 201792c:	1884b03a 	or	r2,r3,r2
 2017930:	d0a7aa05 	stb	r2,-24920(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2017934:	e0fffa03 	ldbu	r3,-24(fp)
 2017938:	e13ffa03 	ldbu	r4,-24(fp)
 201793c:	d0a7aa44 	addi	r2,gp,-24919
 2017940:	2085883a 	add	r2,r4,r2
 2017944:	11000003 	ldbu	r4,0(r2)
 2017948:	e0bffb17 	ldw	r2,-20(fp)
 201794c:	10800d43 	ldbu	r2,53(r2)
 2017950:	2084b03a 	or	r2,r4,r2
 2017954:	1009883a 	mov	r4,r2
 2017958:	d0a7aa44 	addi	r2,gp,-24919
 201795c:	1885883a 	add	r2,r3,r2
 2017960:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2017964:	e17ffc17 	ldw	r5,-16(fp)
 2017968:	e13ffb17 	ldw	r4,-20(fp)
 201796c:	2017c140 	call	2017c14 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2017970:	e0bffb17 	ldw	r2,-20(fp)
 2017974:	10800817 	ldw	r2,32(r2)
 2017978:	10000826 	beq	r2,zero,201799c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201797c:	e0bffb17 	ldw	r2,-20(fp)
 2017980:	10800817 	ldw	r2,32(r2)
 2017984:	100b883a 	mov	r5,r2
 2017988:	e13ffb17 	ldw	r4,-20(fp)
 201798c:	2017ccc0 	call	2017ccc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2017990:	e0bffb17 	ldw	r2,-20(fp)
 2017994:	e0fffc17 	ldw	r3,-16(fp)
 2017998:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 201799c:	e0bffa83 	ldbu	r2,-22(fp)
}
 20179a0:	e037883a 	mov	sp,fp
 20179a4:	dfc00117 	ldw	ra,4(sp)
 20179a8:	df000017 	ldw	fp,0(sp)
 20179ac:	dec00204 	addi	sp,sp,8
 20179b0:	f800283a 	ret

020179b4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 20179b4:	defffd04 	addi	sp,sp,-12
 20179b8:	df000215 	stw	fp,8(sp)
 20179bc:	df000204 	addi	fp,sp,8
 20179c0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 20179c4:	d0a7ad17 	ldw	r2,-24908(gp)
 20179c8:	e0ffff17 	ldw	r3,-4(fp)
 20179cc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 20179d0:	d0a7ad17 	ldw	r2,-24908(gp)
 20179d4:	10800d03 	ldbu	r2,52(r2)
 20179d8:	10803fcc 	andi	r2,r2,255
 20179dc:	d0e7ad17 	ldw	r3,-24908(gp)
 20179e0:	18c00d03 	ldbu	r3,52(r3)
 20179e4:	18c03fcc 	andi	r3,r3,255
 20179e8:	e13fff17 	ldw	r4,-4(fp)
 20179ec:	20c7883a 	add	r3,r4,r3
 20179f0:	18c002c4 	addi	r3,r3,11
 20179f4:	19000003 	ldbu	r4,0(r3)
 20179f8:	d0e7ad17 	ldw	r3,-24908(gp)
 20179fc:	18c00d43 	ldbu	r3,53(r3)
 2017a00:	20c6b03a 	or	r3,r4,r3
 2017a04:	1809883a 	mov	r4,r3
 2017a08:	e0ffff17 	ldw	r3,-4(fp)
 2017a0c:	1885883a 	add	r2,r3,r2
 2017a10:	108002c4 	addi	r2,r2,11
 2017a14:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2017a18:	e0bfff17 	ldw	r2,-4(fp)
 2017a1c:	10c00283 	ldbu	r3,10(r2)
 2017a20:	d0a7ad17 	ldw	r2,-24908(gp)
 2017a24:	10800d83 	ldbu	r2,54(r2)
 2017a28:	1884b03a 	or	r2,r3,r2
 2017a2c:	1007883a 	mov	r3,r2
 2017a30:	e0bfff17 	ldw	r2,-4(fp)
 2017a34:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2017a38:	d0a7ad17 	ldw	r2,-24908(gp)
 2017a3c:	10800d03 	ldbu	r2,52(r2)
 2017a40:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2017a44:	e0fffe03 	ldbu	r3,-8(fp)
 2017a48:	e13ffe03 	ldbu	r4,-8(fp)
 2017a4c:	d0a7aa44 	addi	r2,gp,-24919
 2017a50:	2085883a 	add	r2,r4,r2
 2017a54:	10800003 	ldbu	r2,0(r2)
 2017a58:	1009883a 	mov	r4,r2
 2017a5c:	d0a7ad17 	ldw	r2,-24908(gp)
 2017a60:	10800d43 	ldbu	r2,53(r2)
 2017a64:	0084303a 	nor	r2,zero,r2
 2017a68:	2084703a 	and	r2,r4,r2
 2017a6c:	1009883a 	mov	r4,r2
 2017a70:	d0a7aa44 	addi	r2,gp,-24919
 2017a74:	1885883a 	add	r2,r3,r2
 2017a78:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2017a7c:	e0fffe03 	ldbu	r3,-8(fp)
 2017a80:	d0a7aa44 	addi	r2,gp,-24919
 2017a84:	1885883a 	add	r2,r3,r2
 2017a88:	10800003 	ldbu	r2,0(r2)
 2017a8c:	10803fcc 	andi	r2,r2,255
 2017a90:	1000071e 	bne	r2,zero,2017ab0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2017a94:	d0a7ad17 	ldw	r2,-24908(gp)
 2017a98:	10800d83 	ldbu	r2,54(r2)
 2017a9c:	0084303a 	nor	r2,zero,r2
 2017aa0:	1007883a 	mov	r3,r2
 2017aa4:	d0a7aa03 	ldbu	r2,-24920(gp)
 2017aa8:	1884703a 	and	r2,r3,r2
 2017aac:	d0a7aa05 	stb	r2,-24920(gp)
    }
}
 2017ab0:	0001883a 	nop
 2017ab4:	e037883a 	mov	sp,fp
 2017ab8:	df000017 	ldw	fp,0(sp)
 2017abc:	dec00104 	addi	sp,sp,4
 2017ac0:	f800283a 	ret

02017ac4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 2017ac4:	defffb04 	addi	sp,sp,-20
 2017ac8:	df000415 	stw	fp,16(sp)
 2017acc:	df000404 	addi	fp,sp,16
 2017ad0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2017ad4:	d0a7ad17 	ldw	r2,-24908(gp)
 2017ad8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2017adc:	d0a7ad17 	ldw	r2,-24908(gp)
 2017ae0:	e0ffff17 	ldw	r3,-4(fp)
 2017ae4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2017ae8:	e0bfff17 	ldw	r2,-4(fp)
 2017aec:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2017af0:	e0bffc17 	ldw	r2,-16(fp)
 2017af4:	10800017 	ldw	r2,0(r2)
 2017af8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2017afc:	00002006 	br	2017b80 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2017b00:	d0a7ad17 	ldw	r2,-24908(gp)
 2017b04:	10800d03 	ldbu	r2,52(r2)
 2017b08:	10803fcc 	andi	r2,r2,255
 2017b0c:	d0e7ad17 	ldw	r3,-24908(gp)
 2017b10:	18c00d03 	ldbu	r3,52(r3)
 2017b14:	18c03fcc 	andi	r3,r3,255
 2017b18:	e13ffd17 	ldw	r4,-12(fp)
 2017b1c:	20c7883a 	add	r3,r4,r3
 2017b20:	18c002c4 	addi	r3,r3,11
 2017b24:	19000003 	ldbu	r4,0(r3)
 2017b28:	d0e7ad17 	ldw	r3,-24908(gp)
 2017b2c:	18c00d43 	ldbu	r3,53(r3)
 2017b30:	20c6b03a 	or	r3,r4,r3
 2017b34:	1809883a 	mov	r4,r3
 2017b38:	e0fffd17 	ldw	r3,-12(fp)
 2017b3c:	1885883a 	add	r2,r3,r2
 2017b40:	108002c4 	addi	r2,r2,11
 2017b44:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2017b48:	e0bffd17 	ldw	r2,-12(fp)
 2017b4c:	10c00283 	ldbu	r3,10(r2)
 2017b50:	d0a7ad17 	ldw	r2,-24908(gp)
 2017b54:	10800d83 	ldbu	r2,54(r2)
 2017b58:	1884b03a 	or	r2,r3,r2
 2017b5c:	1007883a 	mov	r3,r2
 2017b60:	e0bffd17 	ldw	r2,-12(fp)
 2017b64:	10c00285 	stb	r3,10(r2)
        pevents++;
 2017b68:	e0bffc17 	ldw	r2,-16(fp)
 2017b6c:	10800104 	addi	r2,r2,4
 2017b70:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 2017b74:	e0bffc17 	ldw	r2,-16(fp)
 2017b78:	10800017 	ldw	r2,0(r2)
 2017b7c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2017b80:	e0bffd17 	ldw	r2,-12(fp)
 2017b84:	103fde1e 	bne	r2,zero,2017b00 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2017b88:	d0a7ad17 	ldw	r2,-24908(gp)
 2017b8c:	10800d03 	ldbu	r2,52(r2)
 2017b90:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2017b94:	e0fffe03 	ldbu	r3,-8(fp)
 2017b98:	e13ffe03 	ldbu	r4,-8(fp)
 2017b9c:	d0a7aa44 	addi	r2,gp,-24919
 2017ba0:	2085883a 	add	r2,r4,r2
 2017ba4:	10800003 	ldbu	r2,0(r2)
 2017ba8:	1009883a 	mov	r4,r2
 2017bac:	d0a7ad17 	ldw	r2,-24908(gp)
 2017bb0:	10800d43 	ldbu	r2,53(r2)
 2017bb4:	0084303a 	nor	r2,zero,r2
 2017bb8:	2084703a 	and	r2,r4,r2
 2017bbc:	1009883a 	mov	r4,r2
 2017bc0:	d0a7aa44 	addi	r2,gp,-24919
 2017bc4:	1885883a 	add	r2,r3,r2
 2017bc8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2017bcc:	e0fffe03 	ldbu	r3,-8(fp)
 2017bd0:	d0a7aa44 	addi	r2,gp,-24919
 2017bd4:	1885883a 	add	r2,r3,r2
 2017bd8:	10800003 	ldbu	r2,0(r2)
 2017bdc:	10803fcc 	andi	r2,r2,255
 2017be0:	1000071e 	bne	r2,zero,2017c00 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2017be4:	d0a7ad17 	ldw	r2,-24908(gp)
 2017be8:	10800d83 	ldbu	r2,54(r2)
 2017bec:	0084303a 	nor	r2,zero,r2
 2017bf0:	1007883a 	mov	r3,r2
 2017bf4:	d0a7aa03 	ldbu	r2,-24920(gp)
 2017bf8:	1884703a 	and	r2,r3,r2
 2017bfc:	d0a7aa05 	stb	r2,-24920(gp)
    }
}
 2017c00:	0001883a 	nop
 2017c04:	e037883a 	mov	sp,fp
 2017c08:	df000017 	ldw	fp,0(sp)
 2017c0c:	dec00104 	addi	sp,sp,4
 2017c10:	f800283a 	ret

02017c14 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2017c14:	defffc04 	addi	sp,sp,-16
 2017c18:	df000315 	stw	fp,12(sp)
 2017c1c:	df000304 	addi	fp,sp,12
 2017c20:	e13ffe15 	stw	r4,-8(fp)
 2017c24:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 2017c28:	e0bffe17 	ldw	r2,-8(fp)
 2017c2c:	10800d03 	ldbu	r2,52(r2)
 2017c30:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2017c34:	e0bffd03 	ldbu	r2,-12(fp)
 2017c38:	e0fffd03 	ldbu	r3,-12(fp)
 2017c3c:	e13fff17 	ldw	r4,-4(fp)
 2017c40:	20c7883a 	add	r3,r4,r3
 2017c44:	18c002c4 	addi	r3,r3,11
 2017c48:	18c00003 	ldbu	r3,0(r3)
 2017c4c:	1809883a 	mov	r4,r3
 2017c50:	e0fffe17 	ldw	r3,-8(fp)
 2017c54:	18c00d43 	ldbu	r3,53(r3)
 2017c58:	00c6303a 	nor	r3,zero,r3
 2017c5c:	20c6703a 	and	r3,r4,r3
 2017c60:	1809883a 	mov	r4,r3
 2017c64:	e0ffff17 	ldw	r3,-4(fp)
 2017c68:	1885883a 	add	r2,r3,r2
 2017c6c:	108002c4 	addi	r2,r2,11
 2017c70:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2017c74:	e0bffd03 	ldbu	r2,-12(fp)
 2017c78:	e0ffff17 	ldw	r3,-4(fp)
 2017c7c:	1885883a 	add	r2,r3,r2
 2017c80:	108002c4 	addi	r2,r2,11
 2017c84:	10800003 	ldbu	r2,0(r2)
 2017c88:	10803fcc 	andi	r2,r2,255
 2017c8c:	10000a1e 	bne	r2,zero,2017cb8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 2017c90:	e0bfff17 	ldw	r2,-4(fp)
 2017c94:	10800283 	ldbu	r2,10(r2)
 2017c98:	1007883a 	mov	r3,r2
 2017c9c:	e0bffe17 	ldw	r2,-8(fp)
 2017ca0:	10800d83 	ldbu	r2,54(r2)
 2017ca4:	0084303a 	nor	r2,zero,r2
 2017ca8:	1884703a 	and	r2,r3,r2
 2017cac:	1007883a 	mov	r3,r2
 2017cb0:	e0bfff17 	ldw	r2,-4(fp)
 2017cb4:	10c00285 	stb	r3,10(r2)
    }
}
 2017cb8:	0001883a 	nop
 2017cbc:	e037883a 	mov	sp,fp
 2017cc0:	df000017 	ldw	fp,0(sp)
 2017cc4:	dec00104 	addi	sp,sp,4
 2017cc8:	f800283a 	ret

02017ccc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2017ccc:	defffa04 	addi	sp,sp,-24
 2017cd0:	df000515 	stw	fp,20(sp)
 2017cd4:	df000504 	addi	fp,sp,20
 2017cd8:	e13ffe15 	stw	r4,-8(fp)
 2017cdc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2017ce0:	e0bffe17 	ldw	r2,-8(fp)
 2017ce4:	10800d03 	ldbu	r2,52(r2)
 2017ce8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2017cec:	e0bffe17 	ldw	r2,-8(fp)
 2017cf0:	10800d83 	ldbu	r2,54(r2)
 2017cf4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 2017cf8:	e0bffe17 	ldw	r2,-8(fp)
 2017cfc:	10800d43 	ldbu	r2,53(r2)
 2017d00:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2017d04:	e0bfff17 	ldw	r2,-4(fp)
 2017d08:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2017d0c:	e0bffb17 	ldw	r2,-20(fp)
 2017d10:	10800017 	ldw	r2,0(r2)
 2017d14:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2017d18:	00002506 	br	2017db0 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 2017d1c:	e0bffd03 	ldbu	r2,-12(fp)
 2017d20:	e0fffd03 	ldbu	r3,-12(fp)
 2017d24:	e13ffc17 	ldw	r4,-16(fp)
 2017d28:	20c7883a 	add	r3,r4,r3
 2017d2c:	18c002c4 	addi	r3,r3,11
 2017d30:	18c00003 	ldbu	r3,0(r3)
 2017d34:	1809883a 	mov	r4,r3
 2017d38:	e0fffd83 	ldbu	r3,-10(fp)
 2017d3c:	00c6303a 	nor	r3,zero,r3
 2017d40:	20c6703a 	and	r3,r4,r3
 2017d44:	1809883a 	mov	r4,r3
 2017d48:	e0fffc17 	ldw	r3,-16(fp)
 2017d4c:	1885883a 	add	r2,r3,r2
 2017d50:	108002c4 	addi	r2,r2,11
 2017d54:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2017d58:	e0bffd03 	ldbu	r2,-12(fp)
 2017d5c:	e0fffc17 	ldw	r3,-16(fp)
 2017d60:	1885883a 	add	r2,r3,r2
 2017d64:	108002c4 	addi	r2,r2,11
 2017d68:	10800003 	ldbu	r2,0(r2)
 2017d6c:	10803fcc 	andi	r2,r2,255
 2017d70:	1000091e 	bne	r2,zero,2017d98 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 2017d74:	e0bffc17 	ldw	r2,-16(fp)
 2017d78:	10800283 	ldbu	r2,10(r2)
 2017d7c:	1007883a 	mov	r3,r2
 2017d80:	e0bffd43 	ldbu	r2,-11(fp)
 2017d84:	0084303a 	nor	r2,zero,r2
 2017d88:	1884703a 	and	r2,r3,r2
 2017d8c:	1007883a 	mov	r3,r2
 2017d90:	e0bffc17 	ldw	r2,-16(fp)
 2017d94:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 2017d98:	e0bffb17 	ldw	r2,-20(fp)
 2017d9c:	10800104 	addi	r2,r2,4
 2017da0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 2017da4:	e0bffb17 	ldw	r2,-20(fp)
 2017da8:	10800017 	ldw	r2,0(r2)
 2017dac:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2017db0:	e0bffc17 	ldw	r2,-16(fp)
 2017db4:	103fd91e 	bne	r2,zero,2017d1c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 2017db8:	0001883a 	nop
 2017dbc:	e037883a 	mov	sp,fp
 2017dc0:	df000017 	ldw	fp,0(sp)
 2017dc4:	dec00104 	addi	sp,sp,4
 2017dc8:	f800283a 	ret

02017dcc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 2017dcc:	defffc04 	addi	sp,sp,-16
 2017dd0:	df000315 	stw	fp,12(sp)
 2017dd4:	df000304 	addi	fp,sp,12
 2017dd8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2017ddc:	e0bfff17 	ldw	r2,-4(fp)
 2017de0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2017de4:	e0bfff17 	ldw	r2,-4(fp)
 2017de8:	108002c4 	addi	r2,r2,11
 2017dec:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2017df0:	e03ffe05 	stb	zero,-8(fp)
 2017df4:	00000706 	br	2017e14 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 2017df8:	e0bffd17 	ldw	r2,-12(fp)
 2017dfc:	10c00044 	addi	r3,r2,1
 2017e00:	e0fffd15 	stw	r3,-12(fp)
 2017e04:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2017e08:	e0bffe03 	ldbu	r2,-8(fp)
 2017e0c:	10800044 	addi	r2,r2,1
 2017e10:	e0bffe05 	stb	r2,-8(fp)
 2017e14:	e0bffe03 	ldbu	r2,-8(fp)
 2017e18:	108000f0 	cmpltui	r2,r2,3
 2017e1c:	103ff61e 	bne	r2,zero,2017df8 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2017e20:	0001883a 	nop
 2017e24:	e037883a 	mov	sp,fp
 2017e28:	df000017 	ldw	fp,0(sp)
 2017e2c:	dec00104 	addi	sp,sp,4
 2017e30:	f800283a 	ret

02017e34 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2017e34:	defffb04 	addi	sp,sp,-20
 2017e38:	dfc00415 	stw	ra,16(sp)
 2017e3c:	df000315 	stw	fp,12(sp)
 2017e40:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2017e44:	0142d004 	movi	r5,2880
 2017e48:	010080f4 	movhi	r4,515
 2017e4c:	2136ae04 	addi	r4,r4,-9544
 2017e50:	20181ac0 	call	20181ac <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2017e54:	008080f4 	movhi	r2,515
 2017e58:	10b6ae04 	addi	r2,r2,-9544
 2017e5c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2017e60:	008080f4 	movhi	r2,515
 2017e64:	10b6ba04 	addi	r2,r2,-9496
 2017e68:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2017e6c:	e03ffd0d 	sth	zero,-12(fp)
 2017e70:	00001306 	br	2017ec0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2017e74:	e0bffe17 	ldw	r2,-8(fp)
 2017e78:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 2017e7c:	e0bffe17 	ldw	r2,-8(fp)
 2017e80:	e0ffff17 	ldw	r3,-4(fp)
 2017e84:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 2017e88:	e0bffe17 	ldw	r2,-8(fp)
 2017e8c:	00c00fc4 	movi	r3,63
 2017e90:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 2017e94:	e0bffe17 	ldw	r2,-8(fp)
 2017e98:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 2017e9c:	e0bffe17 	ldw	r2,-8(fp)
 2017ea0:	10800c04 	addi	r2,r2,48
 2017ea4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 2017ea8:	e0bfff17 	ldw	r2,-4(fp)
 2017eac:	10800c04 	addi	r2,r2,48
 2017eb0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2017eb4:	e0bffd0b 	ldhu	r2,-12(fp)
 2017eb8:	10800044 	addi	r2,r2,1
 2017ebc:	e0bffd0d 	sth	r2,-12(fp)
 2017ec0:	e0bffd0b 	ldhu	r2,-12(fp)
 2017ec4:	10800ef0 	cmpltui	r2,r2,59
 2017ec8:	103fea1e 	bne	r2,zero,2017e74 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 2017ecc:	e0bffe17 	ldw	r2,-8(fp)
 2017ed0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 2017ed4:	e0bffe17 	ldw	r2,-8(fp)
 2017ed8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2017edc:	e0bffe17 	ldw	r2,-8(fp)
 2017ee0:	00c00fc4 	movi	r3,63
 2017ee4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2017ee8:	e0bffe17 	ldw	r2,-8(fp)
 2017eec:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2017ef0:	008080f4 	movhi	r2,515
 2017ef4:	10b6ae04 	addi	r2,r2,-9544
 2017ef8:	d0a7ab15 	stw	r2,-24916(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2017efc:	0001883a 	nop
 2017f00:	e037883a 	mov	sp,fp
 2017f04:	dfc00117 	ldw	ra,4(sp)
 2017f08:	df000017 	ldw	fp,0(sp)
 2017f0c:	dec00204 	addi	sp,sp,8
 2017f10:	f800283a 	ret

02017f14 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2017f14:	deffff04 	addi	sp,sp,-4
 2017f18:	df000015 	stw	fp,0(sp)
 2017f1c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2017f20:	d027ae15 	stw	zero,-24904(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2017f24:	d027ac05 	stb	zero,-24912(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2017f28:	d0279e05 	stb	zero,-24968(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2017f2c:	d027a645 	stb	zero,-24935(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2017f30:	d0279e45 	stb	zero,-24967(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2017f34:	d027a315 	stw	zero,-24948(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2017f38:	d0279f15 	stw	zero,-24964(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2017f3c:	d027b115 	stw	zero,-24892(gp)
    OSIdleCtrMax  = 0L;
 2017f40:	d027a415 	stw	zero,-24944(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2017f44:	d027b005 	stb	zero,-24896(gp)
#endif
}
 2017f48:	0001883a 	nop
 2017f4c:	e037883a 	mov	sp,fp
 2017f50:	df000017 	ldw	fp,0(sp)
 2017f54:	dec00104 	addi	sp,sp,4
 2017f58:	f800283a 	ret

02017f5c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2017f5c:	defffd04 	addi	sp,sp,-12
 2017f60:	df000215 	stw	fp,8(sp)
 2017f64:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2017f68:	d027aa05 	stb	zero,-24920(gp)
    prdytbl       = &OSRdyTbl[0];
 2017f6c:	d0a7aa44 	addi	r2,gp,-24919
 2017f70:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2017f74:	e03ffe05 	stb	zero,-8(fp)
 2017f78:	00000706 	br	2017f98 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 2017f7c:	e0bfff17 	ldw	r2,-4(fp)
 2017f80:	10c00044 	addi	r3,r2,1
 2017f84:	e0ffff15 	stw	r3,-4(fp)
 2017f88:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2017f8c:	e0bffe03 	ldbu	r2,-8(fp)
 2017f90:	10800044 	addi	r2,r2,1
 2017f94:	e0bffe05 	stb	r2,-8(fp)
 2017f98:	e0bffe03 	ldbu	r2,-8(fp)
 2017f9c:	108000f0 	cmpltui	r2,r2,3
 2017fa0:	103ff61e 	bne	r2,zero,2017f7c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 2017fa4:	d027a045 	stb	zero,-24959(gp)
    OSPrioHighRdy = 0;
 2017fa8:	d027a005 	stb	zero,-24960(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 2017fac:	d027a815 	stw	zero,-24928(gp)
    OSTCBCur      = (OS_TCB *)0;
 2017fb0:	d027ad15 	stw	zero,-24908(gp)
}
 2017fb4:	0001883a 	nop
 2017fb8:	e037883a 	mov	sp,fp
 2017fbc:	df000017 	ldw	fp,0(sp)
 2017fc0:	dec00104 	addi	sp,sp,4
 2017fc4:	f800283a 	ret

02017fc8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 2017fc8:	defff804 	addi	sp,sp,-32
 2017fcc:	dfc00715 	stw	ra,28(sp)
 2017fd0:	df000615 	stw	fp,24(sp)
 2017fd4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 2017fd8:	008000c4 	movi	r2,3
 2017fdc:	d8800415 	stw	r2,16(sp)
 2017fe0:	d8000315 	stw	zero,12(sp)
 2017fe4:	00808004 	movi	r2,512
 2017fe8:	d8800215 	stw	r2,8(sp)
 2017fec:	008080f4 	movhi	r2,515
 2017ff0:	10b4ae04 	addi	r2,r2,-11592
 2017ff4:	d8800115 	stw	r2,4(sp)
 2017ff8:	00bfffd4 	movui	r2,65535
 2017ffc:	d8800015 	stw	r2,0(sp)
 2018000:	01c00504 	movi	r7,20
 2018004:	018080f4 	movhi	r6,515
 2018008:	31b6ad04 	addi	r6,r6,-9548
 201800c:	000b883a 	mov	r5,zero
 2018010:	010080b4 	movhi	r4,514
 2018014:	21211d04 	addi	r4,r4,-31628
 2018018:	201d5fc0 	call	201d5fc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 201801c:	e1bfff04 	addi	r6,fp,-4
 2018020:	014080b4 	movhi	r5,514
 2018024:	2947b404 	addi	r5,r5,7888
 2018028:	01000504 	movi	r4,20
 201802c:	201de0c0 	call	201de0c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2018030:	0001883a 	nop
 2018034:	e037883a 	mov	sp,fp
 2018038:	dfc00117 	ldw	ra,4(sp)
 201803c:	df000017 	ldw	fp,0(sp)
 2018040:	dec00204 	addi	sp,sp,8
 2018044:	f800283a 	ret

02018048 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2018048:	defff804 	addi	sp,sp,-32
 201804c:	dfc00715 	stw	ra,28(sp)
 2018050:	df000615 	stw	fp,24(sp)
 2018054:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2018058:	008000c4 	movi	r2,3
 201805c:	d8800415 	stw	r2,16(sp)
 2018060:	d8000315 	stw	zero,12(sp)
 2018064:	00808004 	movi	r2,512
 2018068:	d8800215 	stw	r2,8(sp)
 201806c:	008080f4 	movhi	r2,515
 2018070:	10b23604 	addi	r2,r2,-14120
 2018074:	d8800115 	stw	r2,4(sp)
 2018078:	00bfff94 	movui	r2,65534
 201807c:	d8800015 	stw	r2,0(sp)
 2018080:	01c004c4 	movi	r7,19
 2018084:	018080f4 	movhi	r6,515
 2018088:	31b43504 	addi	r6,r6,-12076
 201808c:	000b883a 	mov	r5,zero
 2018090:	010080b4 	movhi	r4,514
 2018094:	21213404 	addi	r4,r4,-31536
 2018098:	201d5fc0 	call	201d5fc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 201809c:	e1bfff04 	addi	r6,fp,-4
 20180a0:	014080b4 	movhi	r5,514
 20180a4:	2947b804 	addi	r5,r5,7904
 20180a8:	010004c4 	movi	r4,19
 20180ac:	201de0c0 	call	201de0c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20180b0:	0001883a 	nop
 20180b4:	e037883a 	mov	sp,fp
 20180b8:	dfc00117 	ldw	ra,4(sp)
 20180bc:	df000017 	ldw	fp,0(sp)
 20180c0:	dec00204 	addi	sp,sp,8
 20180c4:	f800283a 	ret

020180c8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 20180c8:	defffb04 	addi	sp,sp,-20
 20180cc:	dfc00415 	stw	ra,16(sp)
 20180d0:	df000315 	stw	fp,12(sp)
 20180d4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 20180d8:	01414404 	movi	r5,1296
 20180dc:	010080f4 	movhi	r4,515
 20180e0:	21397e04 	addi	r4,r4,-6664
 20180e4:	20181ac0 	call	20181ac <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 20180e8:	01401504 	movi	r5,84
 20180ec:	010080f4 	movhi	r4,515
 20180f0:	213ac204 	addi	r4,r4,-5368
 20180f4:	20181ac0 	call	20181ac <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 20180f8:	008080f4 	movhi	r2,515
 20180fc:	10b97e04 	addi	r2,r2,-6664
 2018100:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2018104:	008080f4 	movhi	r2,515
 2018108:	10b99904 	addi	r2,r2,-6556
 201810c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2018110:	e03ffd05 	stb	zero,-12(fp)
 2018114:	00001106 	br	201815c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2018118:	e0bffe17 	ldw	r2,-8(fp)
 201811c:	e0ffff17 	ldw	r3,-4(fp)
 2018120:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2018124:	e0bffe17 	ldw	r2,-8(fp)
 2018128:	00c00fc4 	movi	r3,63
 201812c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2018130:	e0bffe17 	ldw	r2,-8(fp)
 2018134:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2018138:	e0bffe17 	ldw	r2,-8(fp)
 201813c:	10801b04 	addi	r2,r2,108
 2018140:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2018144:	e0bfff17 	ldw	r2,-4(fp)
 2018148:	10801b04 	addi	r2,r2,108
 201814c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2018150:	e0bffd03 	ldbu	r2,-12(fp)
 2018154:	10800044 	addi	r2,r2,1
 2018158:	e0bffd05 	stb	r2,-12(fp)
 201815c:	e0bffd03 	ldbu	r2,-12(fp)
 2018160:	108002f0 	cmpltui	r2,r2,11
 2018164:	103fec1e 	bne	r2,zero,2018118 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2018168:	e0bffe17 	ldw	r2,-8(fp)
 201816c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2018170:	e0bffe17 	ldw	r2,-8(fp)
 2018174:	00c00fc4 	movi	r3,63
 2018178:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 201817c:	e0bffe17 	ldw	r2,-8(fp)
 2018180:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2018184:	d027a115 	stw	zero,-24956(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 2018188:	008080f4 	movhi	r2,515
 201818c:	10b97e04 	addi	r2,r2,-6664
 2018190:	d0a7a515 	stw	r2,-24940(gp)
}
 2018194:	0001883a 	nop
 2018198:	e037883a 	mov	sp,fp
 201819c:	dfc00117 	ldw	ra,4(sp)
 20181a0:	df000017 	ldw	fp,0(sp)
 20181a4:	dec00204 	addi	sp,sp,8
 20181a8:	f800283a 	ret

020181ac <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 20181ac:	defffd04 	addi	sp,sp,-12
 20181b0:	df000215 	stw	fp,8(sp)
 20181b4:	df000204 	addi	fp,sp,8
 20181b8:	e13ffe15 	stw	r4,-8(fp)
 20181bc:	2805883a 	mov	r2,r5
 20181c0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20181c4:	00000706 	br	20181e4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 20181c8:	e0bffe17 	ldw	r2,-8(fp)
 20181cc:	10c00044 	addi	r3,r2,1
 20181d0:	e0fffe15 	stw	r3,-8(fp)
 20181d4:	10000005 	stb	zero,0(r2)
        size--;
 20181d8:	e0bfff0b 	ldhu	r2,-4(fp)
 20181dc:	10bfffc4 	addi	r2,r2,-1
 20181e0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 20181e4:	e0bfff0b 	ldhu	r2,-4(fp)
 20181e8:	103ff71e 	bne	r2,zero,20181c8 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 20181ec:	0001883a 	nop
 20181f0:	e037883a 	mov	sp,fp
 20181f4:	df000017 	ldw	fp,0(sp)
 20181f8:	dec00104 	addi	sp,sp,4
 20181fc:	f800283a 	ret

02018200 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2018200:	defffc04 	addi	sp,sp,-16
 2018204:	df000315 	stw	fp,12(sp)
 2018208:	df000304 	addi	fp,sp,12
 201820c:	e13ffd15 	stw	r4,-12(fp)
 2018210:	e17ffe15 	stw	r5,-8(fp)
 2018214:	3005883a 	mov	r2,r6
 2018218:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 201821c:	00000b06 	br	201824c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 2018220:	e0bffd17 	ldw	r2,-12(fp)
 2018224:	10c00044 	addi	r3,r2,1
 2018228:	e0fffd15 	stw	r3,-12(fp)
 201822c:	e0fffe17 	ldw	r3,-8(fp)
 2018230:	19000044 	addi	r4,r3,1
 2018234:	e13ffe15 	stw	r4,-8(fp)
 2018238:	18c00003 	ldbu	r3,0(r3)
 201823c:	10c00005 	stb	r3,0(r2)
        size--;
 2018240:	e0bfff0b 	ldhu	r2,-4(fp)
 2018244:	10bfffc4 	addi	r2,r2,-1
 2018248:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 201824c:	e0bfff0b 	ldhu	r2,-4(fp)
 2018250:	103ff31e 	bne	r2,zero,2018220 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2018254:	0001883a 	nop
 2018258:	e037883a 	mov	sp,fp
 201825c:	df000017 	ldw	fp,0(sp)
 2018260:	dec00104 	addi	sp,sp,4
 2018264:	f800283a 	ret

02018268 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2018268:	defffb04 	addi	sp,sp,-20
 201826c:	dfc00415 	stw	ra,16(sp)
 2018270:	df000315 	stw	fp,12(sp)
 2018274:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2018278:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201827c:	0005303a 	rdctl	r2,status
 2018280:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018284:	e0ffff17 	ldw	r3,-4(fp)
 2018288:	00bfff84 	movi	r2,-2
 201828c:	1884703a 	and	r2,r3,r2
 2018290:	1001703a 	wrctl	status,r2
  
  return context;
 2018294:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 2018298:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 201829c:	d0a7ac03 	ldbu	r2,-24912(gp)
 20182a0:	10803fcc 	andi	r2,r2,255
 20182a4:	10001a1e 	bne	r2,zero,2018310 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 20182a8:	d0a79e03 	ldbu	r2,-24968(gp)
 20182ac:	10803fcc 	andi	r2,r2,255
 20182b0:	1000171e 	bne	r2,zero,2018310 <OS_Sched+0xa8>
            OS_SchedNew();
 20182b4:	20183380 	call	2018338 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 20182b8:	d0e7a003 	ldbu	r3,-24960(gp)
 20182bc:	d0a7a043 	ldbu	r2,-24959(gp)
 20182c0:	18c03fcc 	andi	r3,r3,255
 20182c4:	10803fcc 	andi	r2,r2,255
 20182c8:	18801126 	beq	r3,r2,2018310 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 20182cc:	d0a7a003 	ldbu	r2,-24960(gp)
 20182d0:	10c03fcc 	andi	r3,r2,255
 20182d4:	008080f4 	movhi	r2,515
 20182d8:	10bac204 	addi	r2,r2,-5368
 20182dc:	18c7883a 	add	r3,r3,r3
 20182e0:	18c7883a 	add	r3,r3,r3
 20182e4:	10c5883a 	add	r2,r2,r3
 20182e8:	10800017 	ldw	r2,0(r2)
 20182ec:	d0a7a815 	stw	r2,-24928(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 20182f0:	d0a7a817 	ldw	r2,-24928(gp)
 20182f4:	10c00e17 	ldw	r3,56(r2)
 20182f8:	18c00044 	addi	r3,r3,1
 20182fc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2018300:	d0a7a317 	ldw	r2,-24948(gp)
 2018304:	10800044 	addi	r2,r2,1
 2018308:	d0a7a315 	stw	r2,-24948(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 201830c:	20209040 	call	2020904 <OSCtxSw>
 2018310:	e0bffd17 	ldw	r2,-12(fp)
 2018314:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018318:	e0bffe17 	ldw	r2,-8(fp)
 201831c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2018320:	0001883a 	nop
 2018324:	e037883a 	mov	sp,fp
 2018328:	dfc00117 	ldw	ra,4(sp)
 201832c:	df000017 	ldw	fp,0(sp)
 2018330:	dec00204 	addi	sp,sp,8
 2018334:	f800283a 	ret

02018338 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2018338:	defffe04 	addi	sp,sp,-8
 201833c:	df000115 	stw	fp,4(sp)
 2018340:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2018344:	d0a7aa03 	ldbu	r2,-24920(gp)
 2018348:	10c03fcc 	andi	r3,r2,255
 201834c:	008080b4 	movhi	r2,514
 2018350:	10877404 	addi	r2,r2,7632
 2018354:	10c5883a 	add	r2,r2,r3
 2018358:	10800003 	ldbu	r2,0(r2)
 201835c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2018360:	e0bfff03 	ldbu	r2,-4(fp)
 2018364:	100490fa 	slli	r2,r2,3
 2018368:	1009883a 	mov	r4,r2
 201836c:	e0ffff03 	ldbu	r3,-4(fp)
 2018370:	d0a7aa44 	addi	r2,gp,-24919
 2018374:	1885883a 	add	r2,r3,r2
 2018378:	10800003 	ldbu	r2,0(r2)
 201837c:	10c03fcc 	andi	r3,r2,255
 2018380:	008080b4 	movhi	r2,514
 2018384:	10877404 	addi	r2,r2,7632
 2018388:	10c5883a 	add	r2,r2,r3
 201838c:	10800003 	ldbu	r2,0(r2)
 2018390:	2085883a 	add	r2,r4,r2
 2018394:	d0a7a005 	stb	r2,-24960(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 2018398:	0001883a 	nop
 201839c:	e037883a 	mov	sp,fp
 20183a0:	df000017 	ldw	fp,0(sp)
 20183a4:	dec00104 	addi	sp,sp,4
 20183a8:	f800283a 	ret

020183ac <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 20183ac:	defffc04 	addi	sp,sp,-16
 20183b0:	df000315 	stw	fp,12(sp)
 20183b4:	df000304 	addi	fp,sp,12
 20183b8:	e13ffe15 	stw	r4,-8(fp)
 20183bc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 20183c0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 20183c4:	00000b06 	br	20183f4 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 20183c8:	e0bffe17 	ldw	r2,-8(fp)
 20183cc:	10c00044 	addi	r3,r2,1
 20183d0:	e0fffe15 	stw	r3,-8(fp)
 20183d4:	e0ffff17 	ldw	r3,-4(fp)
 20183d8:	19000044 	addi	r4,r3,1
 20183dc:	e13fff15 	stw	r4,-4(fp)
 20183e0:	18c00003 	ldbu	r3,0(r3)
 20183e4:	10c00005 	stb	r3,0(r2)
        len++;
 20183e8:	e0bffd03 	ldbu	r2,-12(fp)
 20183ec:	10800044 	addi	r2,r2,1
 20183f0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 20183f4:	e0bfff17 	ldw	r2,-4(fp)
 20183f8:	10800003 	ldbu	r2,0(r2)
 20183fc:	10803fcc 	andi	r2,r2,255
 2018400:	103ff11e 	bne	r2,zero,20183c8 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2018404:	e0bffe17 	ldw	r2,-8(fp)
 2018408:	10000005 	stb	zero,0(r2)
    return (len);
 201840c:	e0bffd03 	ldbu	r2,-12(fp)
}
 2018410:	e037883a 	mov	sp,fp
 2018414:	df000017 	ldw	fp,0(sp)
 2018418:	dec00104 	addi	sp,sp,4
 201841c:	f800283a 	ret

02018420 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2018420:	defffd04 	addi	sp,sp,-12
 2018424:	df000215 	stw	fp,8(sp)
 2018428:	df000204 	addi	fp,sp,8
 201842c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2018430:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2018434:	00000606 	br	2018450 <OS_StrLen+0x30>
        psrc++;
 2018438:	e0bfff17 	ldw	r2,-4(fp)
 201843c:	10800044 	addi	r2,r2,1
 2018440:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2018444:	e0bffe03 	ldbu	r2,-8(fp)
 2018448:	10800044 	addi	r2,r2,1
 201844c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2018450:	e0bfff17 	ldw	r2,-4(fp)
 2018454:	10800003 	ldbu	r2,0(r2)
 2018458:	10803fcc 	andi	r2,r2,255
 201845c:	103ff61e 	bne	r2,zero,2018438 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2018460:	e0bffe03 	ldbu	r2,-8(fp)
}
 2018464:	e037883a 	mov	sp,fp
 2018468:	df000017 	ldw	fp,0(sp)
 201846c:	dec00104 	addi	sp,sp,4
 2018470:	f800283a 	ret

02018474 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2018474:	defffa04 	addi	sp,sp,-24
 2018478:	dfc00515 	stw	ra,20(sp)
 201847c:	df000415 	stw	fp,16(sp)
 2018480:	df000404 	addi	fp,sp,16
 2018484:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018488:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201848c:	0005303a 	rdctl	r2,status
 2018490:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018494:	e0fffd17 	ldw	r3,-12(fp)
 2018498:	00bfff84 	movi	r2,-2
 201849c:	1884703a 	and	r2,r3,r2
 20184a0:	1001703a 	wrctl	status,r2
  
  return context;
 20184a4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 20184a8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 20184ac:	d0a79f17 	ldw	r2,-24964(gp)
 20184b0:	10800044 	addi	r2,r2,1
 20184b4:	d0a79f15 	stw	r2,-24964(gp)
 20184b8:	e0bffc17 	ldw	r2,-16(fp)
 20184bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20184c0:	e0bffe17 	ldw	r2,-8(fp)
 20184c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 20184c8:	2020c180 	call	2020c18 <OSTaskIdleHook>
    }
 20184cc:	003fef06 	br	201848c <OS_TaskIdle+0x18>

020184d0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 20184d0:	defffa04 	addi	sp,sp,-24
 20184d4:	dfc00515 	stw	ra,20(sp)
 20184d8:	df000415 	stw	fp,16(sp)
 20184dc:	df000404 	addi	fp,sp,16
 20184e0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20184e4:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20184e8:	00000206 	br	20184f4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 20184ec:	01003204 	movi	r4,200
 20184f0:	201e6cc0 	call	201e6cc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20184f4:	d0a7b003 	ldbu	r2,-24896(gp)
 20184f8:	10803fcc 	andi	r2,r2,255
 20184fc:	103ffb26 	beq	r2,zero,20184ec <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2018500:	d0a7a417 	ldw	r2,-24944(gp)
 2018504:	01401904 	movi	r5,100
 2018508:	1009883a 	mov	r4,r2
 201850c:	20075ec0 	call	20075ec <__udivsi3>
 2018510:	d0a7a415 	stw	r2,-24944(gp)
    if (OSIdleCtrMax == 0L) {
 2018514:	d0a7a417 	ldw	r2,-24944(gp)
 2018518:	1000031e 	bne	r2,zero,2018528 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 201851c:	d027a605 	stb	zero,-24936(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2018520:	01003fc4 	movi	r4,255
 2018524:	201e3540 	call	201e354 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018528:	0005303a 	rdctl	r2,status
 201852c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018530:	e0fffd17 	ldw	r3,-12(fp)
 2018534:	00bfff84 	movi	r2,-2
 2018538:	1884703a 	and	r2,r3,r2
 201853c:	1001703a 	wrctl	status,r2
  
  return context;
 2018540:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2018544:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2018548:	d0a79f17 	ldw	r2,-24964(gp)
 201854c:	d0a7b115 	stw	r2,-24892(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2018550:	d0279f15 	stw	zero,-24964(gp)
 2018554:	e0bffc17 	ldw	r2,-16(fp)
 2018558:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201855c:	e0bffe17 	ldw	r2,-8(fp)
 2018560:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2018564:	d0a7b117 	ldw	r2,-24892(gp)
 2018568:	d0e7a417 	ldw	r3,-24944(gp)
 201856c:	180b883a 	mov	r5,r3
 2018570:	1009883a 	mov	r4,r2
 2018574:	20075ec0 	call	20075ec <__udivsi3>
 2018578:	1007883a 	mov	r3,r2
 201857c:	00801904 	movi	r2,100
 2018580:	10c5c83a 	sub	r2,r2,r3
 2018584:	d0a7a605 	stb	r2,-24936(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2018588:	2020b980 	call	2020b98 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 201858c:	201859c0 	call	201859c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 2018590:	01001904 	movi	r4,100
 2018594:	201e6cc0 	call	201e6cc <OSTimeDly>
    }
 2018598:	003fe306 	br	2018528 <OS_TaskStat+0x58>

0201859c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 201859c:	defffa04 	addi	sp,sp,-24
 20185a0:	dfc00515 	stw	ra,20(sp)
 20185a4:	df000415 	stw	fp,16(sp)
 20185a8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20185ac:	e03ffc05 	stb	zero,-16(fp)
 20185b0:	00002406 	br	2018644 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 20185b4:	e0bffc03 	ldbu	r2,-16(fp)
 20185b8:	e0fffe04 	addi	r3,fp,-8
 20185bc:	180b883a 	mov	r5,r3
 20185c0:	1009883a 	mov	r4,r2
 20185c4:	201e1940 	call	201e194 <OSTaskStkChk>
 20185c8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 20185cc:	e0bffc43 	ldbu	r2,-15(fp)
 20185d0:	1000191e 	bne	r2,zero,2018638 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 20185d4:	e0fffc03 	ldbu	r3,-16(fp)
 20185d8:	008080f4 	movhi	r2,515
 20185dc:	10bac204 	addi	r2,r2,-5368
 20185e0:	18c7883a 	add	r3,r3,r3
 20185e4:	18c7883a 	add	r3,r3,r3
 20185e8:	10c5883a 	add	r2,r2,r3
 20185ec:	10800017 	ldw	r2,0(r2)
 20185f0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 20185f4:	e0bffd17 	ldw	r2,-12(fp)
 20185f8:	10000f26 	beq	r2,zero,2018638 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 20185fc:	e0bffd17 	ldw	r2,-12(fp)
 2018600:	10800060 	cmpeqi	r2,r2,1
 2018604:	10000c1e 	bne	r2,zero,2018638 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2018608:	e0bffd17 	ldw	r2,-12(fp)
 201860c:	10c00217 	ldw	r3,8(r2)
 2018610:	e0bffd17 	ldw	r2,-12(fp)
 2018614:	10800317 	ldw	r2,12(r2)
 2018618:	1085883a 	add	r2,r2,r2
 201861c:	1085883a 	add	r2,r2,r2
 2018620:	1887883a 	add	r3,r3,r2
 2018624:	e0bffd17 	ldw	r2,-12(fp)
 2018628:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 201862c:	e0ffff17 	ldw	r3,-4(fp)
 2018630:	e0bffd17 	ldw	r2,-12(fp)
 2018634:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2018638:	e0bffc03 	ldbu	r2,-16(fp)
 201863c:	10800044 	addi	r2,r2,1
 2018640:	e0bffc05 	stb	r2,-16(fp)
 2018644:	e0bffc03 	ldbu	r2,-16(fp)
 2018648:	10800570 	cmpltui	r2,r2,21
 201864c:	103fd91e 	bne	r2,zero,20185b4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2018650:	0001883a 	nop
 2018654:	e037883a 	mov	sp,fp
 2018658:	dfc00117 	ldw	ra,4(sp)
 201865c:	df000017 	ldw	fp,0(sp)
 2018660:	dec00204 	addi	sp,sp,8
 2018664:	f800283a 	ret

02018668 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2018668:	defff204 	addi	sp,sp,-56
 201866c:	dfc00d15 	stw	ra,52(sp)
 2018670:	df000c15 	stw	fp,48(sp)
 2018674:	df000c04 	addi	fp,sp,48
 2018678:	e17ffc15 	stw	r5,-16(fp)
 201867c:	e1bffd15 	stw	r6,-12(fp)
 2018680:	3807883a 	mov	r3,r7
 2018684:	e0800417 	ldw	r2,16(fp)
 2018688:	e13ffb05 	stb	r4,-20(fp)
 201868c:	e0fffe0d 	sth	r3,-8(fp)
 2018690:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2018694:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018698:	0005303a 	rdctl	r2,status
 201869c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20186a0:	e0fffa17 	ldw	r3,-24(fp)
 20186a4:	00bfff84 	movi	r2,-2
 20186a8:	1884703a 	and	r2,r3,r2
 20186ac:	1001703a 	wrctl	status,r2
  
  return context;
 20186b0:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 20186b4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 20186b8:	d0a7a517 	ldw	r2,-24940(gp)
 20186bc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 20186c0:	e0bff617 	ldw	r2,-40(fp)
 20186c4:	10009326 	beq	r2,zero,2018914 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 20186c8:	e0bff617 	ldw	r2,-40(fp)
 20186cc:	10800517 	ldw	r2,20(r2)
 20186d0:	d0a7a515 	stw	r2,-24940(gp)
 20186d4:	e0bff417 	ldw	r2,-48(fp)
 20186d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20186dc:	e0bff817 	ldw	r2,-32(fp)
 20186e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 20186e4:	e0bff617 	ldw	r2,-40(fp)
 20186e8:	e0fffc17 	ldw	r3,-16(fp)
 20186ec:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 20186f0:	e0bff617 	ldw	r2,-40(fp)
 20186f4:	e0fffb03 	ldbu	r3,-20(fp)
 20186f8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 20186fc:	e0bff617 	ldw	r2,-40(fp)
 2018700:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2018704:	e0bff617 	ldw	r2,-40(fp)
 2018708:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 201870c:	e0bff617 	ldw	r2,-40(fp)
 2018710:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2018714:	e0bff617 	ldw	r2,-40(fp)
 2018718:	e0c00317 	ldw	r3,12(fp)
 201871c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2018720:	e0bff617 	ldw	r2,-40(fp)
 2018724:	e0c00217 	ldw	r3,8(fp)
 2018728:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 201872c:	e0bff617 	ldw	r2,-40(fp)
 2018730:	e0fffd17 	ldw	r3,-12(fp)
 2018734:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2018738:	e0bff617 	ldw	r2,-40(fp)
 201873c:	e0ffff0b 	ldhu	r3,-4(fp)
 2018740:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2018744:	e0bff617 	ldw	r2,-40(fp)
 2018748:	e0fffe0b 	ldhu	r3,-8(fp)
 201874c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2018750:	e0bff617 	ldw	r2,-40(fp)
 2018754:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2018758:	e0bffb03 	ldbu	r2,-20(fp)
 201875c:	1004d0fa 	srli	r2,r2,3
 2018760:	1007883a 	mov	r3,r2
 2018764:	e0bff617 	ldw	r2,-40(fp)
 2018768:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 201876c:	e0bffb03 	ldbu	r2,-20(fp)
 2018770:	108001cc 	andi	r2,r2,7
 2018774:	1007883a 	mov	r3,r2
 2018778:	e0bff617 	ldw	r2,-40(fp)
 201877c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2018780:	e0bff617 	ldw	r2,-40(fp)
 2018784:	10800d03 	ldbu	r2,52(r2)
 2018788:	10803fcc 	andi	r2,r2,255
 201878c:	00c00044 	movi	r3,1
 2018790:	1884983a 	sll	r2,r3,r2
 2018794:	1007883a 	mov	r3,r2
 2018798:	e0bff617 	ldw	r2,-40(fp)
 201879c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 20187a0:	e0bff617 	ldw	r2,-40(fp)
 20187a4:	10800cc3 	ldbu	r2,51(r2)
 20187a8:	10803fcc 	andi	r2,r2,255
 20187ac:	00c00044 	movi	r3,1
 20187b0:	1884983a 	sll	r2,r3,r2
 20187b4:	1007883a 	mov	r3,r2
 20187b8:	e0bff617 	ldw	r2,-40(fp)
 20187bc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 20187c0:	e0bff617 	ldw	r2,-40(fp)
 20187c4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 20187c8:	e0bff617 	ldw	r2,-40(fp)
 20187cc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 20187d0:	e0bff617 	ldw	r2,-40(fp)
 20187d4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 20187d8:	e0bff617 	ldw	r2,-40(fp)
 20187dc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 20187e0:	e0bff617 	ldw	r2,-40(fp)
 20187e4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 20187e8:	e0bff617 	ldw	r2,-40(fp)
 20187ec:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 20187f0:	e0bff617 	ldw	r2,-40(fp)
 20187f4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 20187f8:	e0bff617 	ldw	r2,-40(fp)
 20187fc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2018800:	e0bff617 	ldw	r2,-40(fp)
 2018804:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2018808:	e0bff617 	ldw	r2,-40(fp)
 201880c:	00c00fc4 	movi	r3,63
 2018810:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2018814:	e0bff617 	ldw	r2,-40(fp)
 2018818:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 201881c:	e13ff617 	ldw	r4,-40(fp)
 2018820:	2020c380 	call	2020c38 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2018824:	e13ff617 	ldw	r4,-40(fp)
 2018828:	2020b300 	call	2020b30 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201882c:	0005303a 	rdctl	r2,status
 2018830:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018834:	e0fff517 	ldw	r3,-44(fp)
 2018838:	00bfff84 	movi	r2,-2
 201883c:	1884703a 	and	r2,r3,r2
 2018840:	1001703a 	wrctl	status,r2
  
  return context;
 2018844:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2018848:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 201884c:	e0fffb03 	ldbu	r3,-20(fp)
 2018850:	008080f4 	movhi	r2,515
 2018854:	10bac204 	addi	r2,r2,-5368
 2018858:	18c7883a 	add	r3,r3,r3
 201885c:	18c7883a 	add	r3,r3,r3
 2018860:	10c5883a 	add	r2,r2,r3
 2018864:	e0fff617 	ldw	r3,-40(fp)
 2018868:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 201886c:	d0e7a117 	ldw	r3,-24956(gp)
 2018870:	e0bff617 	ldw	r2,-40(fp)
 2018874:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2018878:	e0bff617 	ldw	r2,-40(fp)
 201887c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2018880:	d0a7a117 	ldw	r2,-24956(gp)
 2018884:	10000326 	beq	r2,zero,2018894 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2018888:	d0a7a117 	ldw	r2,-24956(gp)
 201888c:	e0fff617 	ldw	r3,-40(fp)
 2018890:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2018894:	e0bff617 	ldw	r2,-40(fp)
 2018898:	d0a7a115 	stw	r2,-24956(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 201889c:	e0bff617 	ldw	r2,-40(fp)
 20188a0:	10c00d83 	ldbu	r3,54(r2)
 20188a4:	d0a7aa03 	ldbu	r2,-24920(gp)
 20188a8:	1884b03a 	or	r2,r3,r2
 20188ac:	d0a7aa05 	stb	r2,-24920(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20188b0:	e0bff617 	ldw	r2,-40(fp)
 20188b4:	10800d03 	ldbu	r2,52(r2)
 20188b8:	10c03fcc 	andi	r3,r2,255
 20188bc:	e0bff617 	ldw	r2,-40(fp)
 20188c0:	10800d03 	ldbu	r2,52(r2)
 20188c4:	11003fcc 	andi	r4,r2,255
 20188c8:	d0a7aa44 	addi	r2,gp,-24919
 20188cc:	2085883a 	add	r2,r4,r2
 20188d0:	11000003 	ldbu	r4,0(r2)
 20188d4:	e0bff617 	ldw	r2,-40(fp)
 20188d8:	10800d43 	ldbu	r2,53(r2)
 20188dc:	2084b03a 	or	r2,r4,r2
 20188e0:	1009883a 	mov	r4,r2
 20188e4:	d0a7aa44 	addi	r2,gp,-24919
 20188e8:	1885883a 	add	r2,r3,r2
 20188ec:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 20188f0:	d0a7a643 	ldbu	r2,-24935(gp)
 20188f4:	10800044 	addi	r2,r2,1
 20188f8:	d0a7a645 	stb	r2,-24935(gp)
 20188fc:	e0bff417 	ldw	r2,-48(fp)
 2018900:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018904:	e0bff717 	ldw	r2,-36(fp)
 2018908:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201890c:	0005883a 	mov	r2,zero
 2018910:	00000506 	br	2018928 <OS_TCBInit+0x2c0>
 2018914:	e0bff417 	ldw	r2,-48(fp)
 2018918:	e0bff915 	stw	r2,-28(fp)
 201891c:	e0bff917 	ldw	r2,-28(fp)
 2018920:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2018924:	00801084 	movi	r2,66
}
 2018928:	e037883a 	mov	sp,fp
 201892c:	dfc00117 	ldw	ra,4(sp)
 2018930:	df000017 	ldw	fp,0(sp)
 2018934:	dec00204 	addi	sp,sp,8
 2018938:	f800283a 	ret

0201893c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 201893c:	defffe04 	addi	sp,sp,-8
 2018940:	df000115 	stw	fp,4(sp)
 2018944:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2018948:	d0a03d04 	addi	r2,gp,-32524
 201894c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2018950:	d0a03e04 	addi	r2,gp,-32520
 2018954:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2018958:	d0a03f84 	addi	r2,gp,-32514
 201895c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2018960:	d0a04004 	addi	r2,gp,-32512
 2018964:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2018968:	d0a03f04 	addi	r2,gp,-32516
 201896c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2018970:	d0a04084 	addi	r2,gp,-32510
 2018974:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2018978:	d0a04104 	addi	r2,gp,-32508
 201897c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2018980:	d0a04184 	addi	r2,gp,-32506
 2018984:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2018988:	d0a04204 	addi	r2,gp,-32504
 201898c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2018990:	d0a04284 	addi	r2,gp,-32502
 2018994:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2018998:	d0a04304 	addi	r2,gp,-32500
 201899c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 20189a0:	d0a04384 	addi	r2,gp,-32498
 20189a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 20189a8:	d0a04404 	addi	r2,gp,-32496
 20189ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 20189b0:	d0a04484 	addi	r2,gp,-32494
 20189b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 20189b8:	d0a04504 	addi	r2,gp,-32492
 20189bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 20189c0:	d0a04584 	addi	r2,gp,-32490
 20189c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 20189c8:	d0a04604 	addi	r2,gp,-32488
 20189cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 20189d0:	d0a04684 	addi	r2,gp,-32486
 20189d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 20189d8:	d0a04704 	addi	r2,gp,-32484
 20189dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 20189e0:	d0a04784 	addi	r2,gp,-32482
 20189e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 20189e8:	d0a04804 	addi	r2,gp,-32480
 20189ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 20189f0:	d0a04884 	addi	r2,gp,-32478
 20189f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 20189f8:	d0a04904 	addi	r2,gp,-32476
 20189fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2018a00:	d0a04984 	addi	r2,gp,-32474
 2018a04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2018a08:	d0a04a04 	addi	r2,gp,-32472
 2018a0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2018a10:	d0a04a84 	addi	r2,gp,-32470
 2018a14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2018a18:	d0a04b04 	addi	r2,gp,-32468
 2018a1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2018a20:	d0a04b84 	addi	r2,gp,-32466
 2018a24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2018a28:	d0a04c04 	addi	r2,gp,-32464
 2018a2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2018a30:	d0a04c84 	addi	r2,gp,-32462
 2018a34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2018a38:	d0a04d04 	addi	r2,gp,-32460
 2018a3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2018a40:	d0a04d84 	addi	r2,gp,-32458
 2018a44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2018a48:	d0a04e04 	addi	r2,gp,-32456
 2018a4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2018a50:	d0a04e84 	addi	r2,gp,-32454
 2018a54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2018a58:	d0a04f04 	addi	r2,gp,-32452
 2018a5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2018a60:	d0a04f84 	addi	r2,gp,-32450
 2018a64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2018a68:	d0a05004 	addi	r2,gp,-32448
 2018a6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2018a70:	d0a05084 	addi	r2,gp,-32446
 2018a74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2018a78:	d0a05104 	addi	r2,gp,-32444
 2018a7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2018a80:	d0a05184 	addi	r2,gp,-32442
 2018a84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 2018a88:	d0a05204 	addi	r2,gp,-32440
 2018a8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2018a90:	d0a05284 	addi	r2,gp,-32438
 2018a94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 2018a98:	d0a05304 	addi	r2,gp,-32436
 2018a9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2018aa0:	d0a05384 	addi	r2,gp,-32434
 2018aa4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 2018aa8:	d0a05404 	addi	r2,gp,-32432
 2018aac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2018ab0:	d0a05904 	addi	r2,gp,-32412
 2018ab4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 2018ab8:	0001883a 	nop
 2018abc:	e037883a 	mov	sp,fp
 2018ac0:	df000017 	ldw	fp,0(sp)
 2018ac4:	dec00104 	addi	sp,sp,4
 2018ac8:	f800283a 	ret

02018acc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2018acc:	defff204 	addi	sp,sp,-56
 2018ad0:	df000d15 	stw	fp,52(sp)
 2018ad4:	df000d04 	addi	fp,sp,52
 2018ad8:	e13ffc15 	stw	r4,-16(fp)
 2018adc:	2807883a 	mov	r3,r5
 2018ae0:	3005883a 	mov	r2,r6
 2018ae4:	e1ffff15 	stw	r7,-4(fp)
 2018ae8:	e0fffd0d 	sth	r3,-12(fp)
 2018aec:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2018af0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2018af4:	e0bfff17 	ldw	r2,-4(fp)
 2018af8:	1000021e 	bne	r2,zero,2018b04 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2018afc:	0005883a 	mov	r2,zero
 2018b00:	0000b006 	br	2018dc4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2018b04:	e0bffc17 	ldw	r2,-16(fp)
 2018b08:	1000051e 	bne	r2,zero,2018b20 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2018b0c:	e0bfff17 	ldw	r2,-4(fp)
 2018b10:	00c01b84 	movi	r3,110
 2018b14:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2018b18:	0005883a 	mov	r2,zero
 2018b1c:	0000a906 	br	2018dc4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2018b20:	e0bffc17 	ldw	r2,-16(fp)
 2018b24:	10800003 	ldbu	r2,0(r2)
 2018b28:	10803fcc 	andi	r2,r2,255
 2018b2c:	10800160 	cmpeqi	r2,r2,5
 2018b30:	1000051e 	bne	r2,zero,2018b48 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2018b34:	e0bfff17 	ldw	r2,-4(fp)
 2018b38:	00c00044 	movi	r3,1
 2018b3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2018b40:	0005883a 	mov	r2,zero
 2018b44:	00009f06 	br	2018dc4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2018b48:	e0fffe03 	ldbu	r3,-8(fp)
 2018b4c:	00bfe004 	movi	r2,-128
 2018b50:	1884703a 	and	r2,r3,r2
 2018b54:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2018b58:	e0bff503 	ldbu	r2,-44(fp)
 2018b5c:	10000626 	beq	r2,zero,2018b78 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2018b60:	e0bffe03 	ldbu	r2,-8(fp)
 2018b64:	10801fcc 	andi	r2,r2,127
 2018b68:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2018b6c:	00800044 	movi	r2,1
 2018b70:	e0bff385 	stb	r2,-50(fp)
 2018b74:	00000106 	br	2018b7c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2018b78:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2018b7c:	e0bfff17 	ldw	r2,-4(fp)
 2018b80:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018b84:	0005303a 	rdctl	r2,status
 2018b88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018b8c:	e0fffb17 	ldw	r3,-20(fp)
 2018b90:	00bfff84 	movi	r2,-2
 2018b94:	1884703a 	and	r2,r3,r2
 2018b98:	1001703a 	wrctl	status,r2
  
  return context;
 2018b9c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2018ba0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 2018ba4:	e0bffe03 	ldbu	r2,-8(fp)
 2018ba8:	10c00060 	cmpeqi	r3,r2,1
 2018bac:	18005f1e 	bne	r3,zero,2018d2c <OSFlagAccept+0x260>
 2018bb0:	10c00088 	cmpgei	r3,r2,2
 2018bb4:	1800021e 	bne	r3,zero,2018bc0 <OSFlagAccept+0xf4>
 2018bb8:	10003f26 	beq	r2,zero,2018cb8 <OSFlagAccept+0x1ec>
 2018bbc:	00007706 	br	2018d9c <OSFlagAccept+0x2d0>
 2018bc0:	10c000a0 	cmpeqi	r3,r2,2
 2018bc4:	1800031e 	bne	r3,zero,2018bd4 <OSFlagAccept+0x108>
 2018bc8:	108000e0 	cmpeqi	r2,r2,3
 2018bcc:	10001e1e 	bne	r2,zero,2018c48 <OSFlagAccept+0x17c>
 2018bd0:	00007206 	br	2018d9c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2018bd4:	e0bffc17 	ldw	r2,-16(fp)
 2018bd8:	10c0020b 	ldhu	r3,8(r2)
 2018bdc:	e0bffd0b 	ldhu	r2,-12(fp)
 2018be0:	1884703a 	and	r2,r3,r2
 2018be4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2018be8:	e0fff30b 	ldhu	r3,-52(fp)
 2018bec:	e0bffd0b 	ldhu	r2,-12(fp)
 2018bf0:	18800d1e 	bne	r3,r2,2018c28 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2018bf4:	e0bff383 	ldbu	r2,-50(fp)
 2018bf8:	10800058 	cmpnei	r2,r2,1
 2018bfc:	10000d1e 	bne	r2,zero,2018c34 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2018c00:	e0bffc17 	ldw	r2,-16(fp)
 2018c04:	1080020b 	ldhu	r2,8(r2)
 2018c08:	1007883a 	mov	r3,r2
 2018c0c:	e0bff30b 	ldhu	r2,-52(fp)
 2018c10:	0084303a 	nor	r2,zero,r2
 2018c14:	1884703a 	and	r2,r3,r2
 2018c18:	1007883a 	mov	r3,r2
 2018c1c:	e0bffc17 	ldw	r2,-16(fp)
 2018c20:	10c0020d 	sth	r3,8(r2)
 2018c24:	00000306 	br	2018c34 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2018c28:	e0bfff17 	ldw	r2,-4(fp)
 2018c2c:	00c01c04 	movi	r3,112
 2018c30:	10c00005 	stb	r3,0(r2)
 2018c34:	e0bff417 	ldw	r2,-48(fp)
 2018c38:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018c3c:	e0bff617 	ldw	r2,-40(fp)
 2018c40:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2018c44:	00005e06 	br	2018dc0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2018c48:	e0bffc17 	ldw	r2,-16(fp)
 2018c4c:	10c0020b 	ldhu	r3,8(r2)
 2018c50:	e0bffd0b 	ldhu	r2,-12(fp)
 2018c54:	1884703a 	and	r2,r3,r2
 2018c58:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2018c5c:	e0bff30b 	ldhu	r2,-52(fp)
 2018c60:	10000d26 	beq	r2,zero,2018c98 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2018c64:	e0bff383 	ldbu	r2,-50(fp)
 2018c68:	10800058 	cmpnei	r2,r2,1
 2018c6c:	10000d1e 	bne	r2,zero,2018ca4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2018c70:	e0bffc17 	ldw	r2,-16(fp)
 2018c74:	1080020b 	ldhu	r2,8(r2)
 2018c78:	1007883a 	mov	r3,r2
 2018c7c:	e0bff30b 	ldhu	r2,-52(fp)
 2018c80:	0084303a 	nor	r2,zero,r2
 2018c84:	1884703a 	and	r2,r3,r2
 2018c88:	1007883a 	mov	r3,r2
 2018c8c:	e0bffc17 	ldw	r2,-16(fp)
 2018c90:	10c0020d 	sth	r3,8(r2)
 2018c94:	00000306 	br	2018ca4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2018c98:	e0bfff17 	ldw	r2,-4(fp)
 2018c9c:	00c01c04 	movi	r3,112
 2018ca0:	10c00005 	stb	r3,0(r2)
 2018ca4:	e0bff417 	ldw	r2,-48(fp)
 2018ca8:	e0bff715 	stw	r2,-36(fp)
 2018cac:	e0bff717 	ldw	r2,-36(fp)
 2018cb0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2018cb4:	00004206 	br	2018dc0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2018cb8:	e0bffc17 	ldw	r2,-16(fp)
 2018cbc:	1080020b 	ldhu	r2,8(r2)
 2018cc0:	0084303a 	nor	r2,zero,r2
 2018cc4:	1007883a 	mov	r3,r2
 2018cc8:	e0bffd0b 	ldhu	r2,-12(fp)
 2018ccc:	1884703a 	and	r2,r3,r2
 2018cd0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2018cd4:	e0fff30b 	ldhu	r3,-52(fp)
 2018cd8:	e0bffd0b 	ldhu	r2,-12(fp)
 2018cdc:	18800b1e 	bne	r3,r2,2018d0c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2018ce0:	e0bff383 	ldbu	r2,-50(fp)
 2018ce4:	10800058 	cmpnei	r2,r2,1
 2018ce8:	10000b1e 	bne	r2,zero,2018d18 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2018cec:	e0bffc17 	ldw	r2,-16(fp)
 2018cf0:	10c0020b 	ldhu	r3,8(r2)
 2018cf4:	e0bff30b 	ldhu	r2,-52(fp)
 2018cf8:	1884b03a 	or	r2,r3,r2
 2018cfc:	1007883a 	mov	r3,r2
 2018d00:	e0bffc17 	ldw	r2,-16(fp)
 2018d04:	10c0020d 	sth	r3,8(r2)
 2018d08:	00000306 	br	2018d18 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2018d0c:	e0bfff17 	ldw	r2,-4(fp)
 2018d10:	00c01c04 	movi	r3,112
 2018d14:	10c00005 	stb	r3,0(r2)
 2018d18:	e0bff417 	ldw	r2,-48(fp)
 2018d1c:	e0bff815 	stw	r2,-32(fp)
 2018d20:	e0bff817 	ldw	r2,-32(fp)
 2018d24:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2018d28:	00002506 	br	2018dc0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2018d2c:	e0bffc17 	ldw	r2,-16(fp)
 2018d30:	1080020b 	ldhu	r2,8(r2)
 2018d34:	0084303a 	nor	r2,zero,r2
 2018d38:	1007883a 	mov	r3,r2
 2018d3c:	e0bffd0b 	ldhu	r2,-12(fp)
 2018d40:	1884703a 	and	r2,r3,r2
 2018d44:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2018d48:	e0bff30b 	ldhu	r2,-52(fp)
 2018d4c:	10000b26 	beq	r2,zero,2018d7c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2018d50:	e0bff383 	ldbu	r2,-50(fp)
 2018d54:	10800058 	cmpnei	r2,r2,1
 2018d58:	10000b1e 	bne	r2,zero,2018d88 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2018d5c:	e0bffc17 	ldw	r2,-16(fp)
 2018d60:	10c0020b 	ldhu	r3,8(r2)
 2018d64:	e0bff30b 	ldhu	r2,-52(fp)
 2018d68:	1884b03a 	or	r2,r3,r2
 2018d6c:	1007883a 	mov	r3,r2
 2018d70:	e0bffc17 	ldw	r2,-16(fp)
 2018d74:	10c0020d 	sth	r3,8(r2)
 2018d78:	00000306 	br	2018d88 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2018d7c:	e0bfff17 	ldw	r2,-4(fp)
 2018d80:	00c01c04 	movi	r3,112
 2018d84:	10c00005 	stb	r3,0(r2)
 2018d88:	e0bff417 	ldw	r2,-48(fp)
 2018d8c:	e0bff915 	stw	r2,-28(fp)
 2018d90:	e0bff917 	ldw	r2,-28(fp)
 2018d94:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2018d98:	00000906 	br	2018dc0 <OSFlagAccept+0x2f4>
 2018d9c:	e0bff417 	ldw	r2,-48(fp)
 2018da0:	e0bffa15 	stw	r2,-24(fp)
 2018da4:	e0bffa17 	ldw	r2,-24(fp)
 2018da8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2018dac:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 2018db0:	e0bfff17 	ldw	r2,-4(fp)
 2018db4:	00c01bc4 	movi	r3,111
 2018db8:	10c00005 	stb	r3,0(r2)
             break;
 2018dbc:	0001883a 	nop
    }
    return (flags_rdy);
 2018dc0:	e0bff30b 	ldhu	r2,-52(fp)
}
 2018dc4:	e037883a 	mov	sp,fp
 2018dc8:	df000017 	ldw	fp,0(sp)
 2018dcc:	dec00104 	addi	sp,sp,4
 2018dd0:	f800283a 	ret

02018dd4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 2018dd4:	defff804 	addi	sp,sp,-32
 2018dd8:	df000715 	stw	fp,28(sp)
 2018ddc:	df000704 	addi	fp,sp,28
 2018de0:	2005883a 	mov	r2,r4
 2018de4:	e17fff15 	stw	r5,-4(fp)
 2018de8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2018dec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2018df0:	e0bfff17 	ldw	r2,-4(fp)
 2018df4:	1000021e 	bne	r2,zero,2018e00 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2018df8:	0005883a 	mov	r2,zero
 2018dfc:	00003306 	br	2018ecc <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2018e00:	d0a7ac03 	ldbu	r2,-24912(gp)
 2018e04:	10803fcc 	andi	r2,r2,255
 2018e08:	10000526 	beq	r2,zero,2018e20 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2018e0c:	e0bfff17 	ldw	r2,-4(fp)
 2018e10:	00c00404 	movi	r3,16
 2018e14:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 2018e18:	0005883a 	mov	r2,zero
 2018e1c:	00002b06 	br	2018ecc <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018e20:	0005303a 	rdctl	r2,status
 2018e24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018e28:	e0fffd17 	ldw	r3,-12(fp)
 2018e2c:	00bfff84 	movi	r2,-2
 2018e30:	1884703a 	and	r2,r3,r2
 2018e34:	1001703a 	wrctl	status,r2
  
  return context;
 2018e38:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018e3c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2018e40:	d0a7af17 	ldw	r2,-24900(gp)
 2018e44:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2018e48:	e0bffb17 	ldw	r2,-20(fp)
 2018e4c:	10001726 	beq	r2,zero,2018eac <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 2018e50:	d0a7af17 	ldw	r2,-24900(gp)
 2018e54:	10800117 	ldw	r2,4(r2)
 2018e58:	d0a7af15 	stw	r2,-24900(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2018e5c:	e0bffb17 	ldw	r2,-20(fp)
 2018e60:	00c00144 	movi	r3,5
 2018e64:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2018e68:	e0bffb17 	ldw	r2,-20(fp)
 2018e6c:	e0fffe0b 	ldhu	r3,-8(fp)
 2018e70:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2018e74:	e0bffb17 	ldw	r2,-20(fp)
 2018e78:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2018e7c:	e0bffb17 	ldw	r2,-20(fp)
 2018e80:	00c00fc4 	movi	r3,63
 2018e84:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2018e88:	e0bffb17 	ldw	r2,-20(fp)
 2018e8c:	100002c5 	stb	zero,11(r2)
 2018e90:	e0bff917 	ldw	r2,-28(fp)
 2018e94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018e98:	e0bffa17 	ldw	r2,-24(fp)
 2018e9c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2018ea0:	e0bfff17 	ldw	r2,-4(fp)
 2018ea4:	10000005 	stb	zero,0(r2)
 2018ea8:	00000706 	br	2018ec8 <OSFlagCreate+0xf4>
 2018eac:	e0bff917 	ldw	r2,-28(fp)
 2018eb0:	e0bffc15 	stw	r2,-16(fp)
 2018eb4:	e0bffc17 	ldw	r2,-16(fp)
 2018eb8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 2018ebc:	e0bfff17 	ldw	r2,-4(fp)
 2018ec0:	00c01c84 	movi	r3,114
 2018ec4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 2018ec8:	e0bffb17 	ldw	r2,-20(fp)
}
 2018ecc:	e037883a 	mov	sp,fp
 2018ed0:	df000017 	ldw	fp,0(sp)
 2018ed4:	dec00104 	addi	sp,sp,4
 2018ed8:	f800283a 	ret

02018edc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2018edc:	defff204 	addi	sp,sp,-56
 2018ee0:	dfc00d15 	stw	ra,52(sp)
 2018ee4:	df000c15 	stw	fp,48(sp)
 2018ee8:	df000c04 	addi	fp,sp,48
 2018eec:	e13ffd15 	stw	r4,-12(fp)
 2018ef0:	2805883a 	mov	r2,r5
 2018ef4:	e1bfff15 	stw	r6,-4(fp)
 2018ef8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2018efc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2018f00:	e0bfff17 	ldw	r2,-4(fp)
 2018f04:	1000021e 	bne	r2,zero,2018f10 <OSFlagDel+0x34>
        return (pgrp);
 2018f08:	e0bffd17 	ldw	r2,-12(fp)
 2018f0c:	00008006 	br	2019110 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2018f10:	e0bffd17 	ldw	r2,-12(fp)
 2018f14:	1000051e 	bne	r2,zero,2018f2c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2018f18:	e0bfff17 	ldw	r2,-4(fp)
 2018f1c:	00c01b84 	movi	r3,110
 2018f20:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2018f24:	e0bffd17 	ldw	r2,-12(fp)
 2018f28:	00007906 	br	2019110 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2018f2c:	d0a7ac03 	ldbu	r2,-24912(gp)
 2018f30:	10803fcc 	andi	r2,r2,255
 2018f34:	10000526 	beq	r2,zero,2018f4c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2018f38:	e0bfff17 	ldw	r2,-4(fp)
 2018f3c:	00c003c4 	movi	r3,15
 2018f40:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2018f44:	e0bffd17 	ldw	r2,-12(fp)
 2018f48:	00007106 	br	2019110 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2018f4c:	e0bffd17 	ldw	r2,-12(fp)
 2018f50:	10800003 	ldbu	r2,0(r2)
 2018f54:	10803fcc 	andi	r2,r2,255
 2018f58:	10800160 	cmpeqi	r2,r2,5
 2018f5c:	1000051e 	bne	r2,zero,2018f74 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 2018f60:	e0bfff17 	ldw	r2,-4(fp)
 2018f64:	00c00044 	movi	r3,1
 2018f68:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2018f6c:	e0bffd17 	ldw	r2,-12(fp)
 2018f70:	00006706 	br	2019110 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018f74:	0005303a 	rdctl	r2,status
 2018f78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018f7c:	e0fffc17 	ldw	r3,-16(fp)
 2018f80:	00bfff84 	movi	r2,-2
 2018f84:	1884703a 	and	r2,r3,r2
 2018f88:	1001703a 	wrctl	status,r2
  
  return context;
 2018f8c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018f90:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2018f94:	e0bffd17 	ldw	r2,-12(fp)
 2018f98:	10800117 	ldw	r2,4(r2)
 2018f9c:	10000326 	beq	r2,zero,2018fac <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2018fa0:	00800044 	movi	r2,1
 2018fa4:	e0bff405 	stb	r2,-48(fp)
 2018fa8:	00000106 	br	2018fb0 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2018fac:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2018fb0:	e0bffe03 	ldbu	r2,-8(fp)
 2018fb4:	10000326 	beq	r2,zero,2018fc4 <OSFlagDel+0xe8>
 2018fb8:	10800060 	cmpeqi	r2,r2,1
 2018fbc:	1000231e 	bne	r2,zero,201904c <OSFlagDel+0x170>
 2018fc0:	00004806 	br	20190e4 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 2018fc4:	e0bff403 	ldbu	r2,-48(fp)
 2018fc8:	1000161e 	bne	r2,zero,2019024 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2018fcc:	e0bffd17 	ldw	r2,-12(fp)
 2018fd0:	00c00fc4 	movi	r3,63
 2018fd4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2018fd8:	e0bffd17 	ldw	r2,-12(fp)
 2018fdc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2018fe0:	e0bffd17 	ldw	r2,-12(fp)
 2018fe4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2018fe8:	d0e7af17 	ldw	r3,-24900(gp)
 2018fec:	e0bffd17 	ldw	r2,-12(fp)
 2018ff0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2018ff4:	e0bffd17 	ldw	r2,-12(fp)
 2018ff8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2018ffc:	e0bffd17 	ldw	r2,-12(fp)
 2019000:	d0a7af15 	stw	r2,-24900(gp)
 2019004:	e0bff717 	ldw	r2,-36(fp)
 2019008:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201900c:	e0bff817 	ldw	r2,-32(fp)
 2019010:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2019014:	e0bfff17 	ldw	r2,-4(fp)
 2019018:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 201901c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 2019020:	00003a06 	br	201910c <OSFlagDel+0x230>
 2019024:	e0bff717 	ldw	r2,-36(fp)
 2019028:	e0bff915 	stw	r2,-28(fp)
 201902c:	e0bff917 	ldw	r2,-28(fp)
 2019030:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2019034:	e0bfff17 	ldw	r2,-4(fp)
 2019038:	00c01244 	movi	r3,73
 201903c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 2019040:	e0bffd17 	ldw	r2,-12(fp)
 2019044:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2019048:	00003006 	br	201910c <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201904c:	e0bffd17 	ldw	r2,-12(fp)
 2019050:	10800117 	ldw	r2,4(r2)
 2019054:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2019058:	00000606 	br	2019074 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 201905c:	000b883a 	mov	r5,zero
 2019060:	e13ff517 	ldw	r4,-44(fp)
 2019064:	201a0480 	call	201a048 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2019068:	e0bff517 	ldw	r2,-44(fp)
 201906c:	10800017 	ldw	r2,0(r2)
 2019070:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2019074:	e0bff517 	ldw	r2,-44(fp)
 2019078:	103ff81e 	bne	r2,zero,201905c <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 201907c:	e0bffd17 	ldw	r2,-12(fp)
 2019080:	00c00fc4 	movi	r3,63
 2019084:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2019088:	e0bffd17 	ldw	r2,-12(fp)
 201908c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2019090:	e0bffd17 	ldw	r2,-12(fp)
 2019094:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 2019098:	d0e7af17 	ldw	r3,-24900(gp)
 201909c:	e0bffd17 	ldw	r2,-12(fp)
 20190a0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 20190a4:	e0bffd17 	ldw	r2,-12(fp)
 20190a8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 20190ac:	e0bffd17 	ldw	r2,-12(fp)
 20190b0:	d0a7af15 	stw	r2,-24900(gp)
 20190b4:	e0bff717 	ldw	r2,-36(fp)
 20190b8:	e0bffa15 	stw	r2,-24(fp)
 20190bc:	e0bffa17 	ldw	r2,-24(fp)
 20190c0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 20190c4:	e0bff403 	ldbu	r2,-48(fp)
 20190c8:	10800058 	cmpnei	r2,r2,1
 20190cc:	1000011e 	bne	r2,zero,20190d4 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20190d0:	20182680 	call	2018268 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 20190d4:	e0bfff17 	ldw	r2,-4(fp)
 20190d8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 20190dc:	e03ff615 	stw	zero,-40(fp)
             break;
 20190e0:	00000a06 	br	201910c <OSFlagDel+0x230>
 20190e4:	e0bff717 	ldw	r2,-36(fp)
 20190e8:	e0bffb15 	stw	r2,-20(fp)
 20190ec:	e0bffb17 	ldw	r2,-20(fp)
 20190f0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 20190f4:	e0bfff17 	ldw	r2,-4(fp)
 20190f8:	00c001c4 	movi	r3,7
 20190fc:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2019100:	e0bffd17 	ldw	r2,-12(fp)
 2019104:	e0bff615 	stw	r2,-40(fp)
             break;
 2019108:	0001883a 	nop
    }
    return (pgrp_return);
 201910c:	e0bff617 	ldw	r2,-40(fp)
}
 2019110:	e037883a 	mov	sp,fp
 2019114:	dfc00117 	ldw	ra,4(sp)
 2019118:	df000017 	ldw	fp,0(sp)
 201911c:	dec00204 	addi	sp,sp,8
 2019120:	f800283a 	ret

02019124 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2019124:	defff604 	addi	sp,sp,-40
 2019128:	dfc00915 	stw	ra,36(sp)
 201912c:	df000815 	stw	fp,32(sp)
 2019130:	df000804 	addi	fp,sp,32
 2019134:	e13ffd15 	stw	r4,-12(fp)
 2019138:	e17ffe15 	stw	r5,-8(fp)
 201913c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019140:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2019144:	e0bfff17 	ldw	r2,-4(fp)
 2019148:	1000021e 	bne	r2,zero,2019154 <OSFlagNameGet+0x30>
        return (0);
 201914c:	0005883a 	mov	r2,zero
 2019150:	00003906 	br	2019238 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2019154:	e0bffd17 	ldw	r2,-12(fp)
 2019158:	1000051e 	bne	r2,zero,2019170 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201915c:	e0bfff17 	ldw	r2,-4(fp)
 2019160:	00c01b84 	movi	r3,110
 2019164:	10c00005 	stb	r3,0(r2)
        return (0);
 2019168:	0005883a 	mov	r2,zero
 201916c:	00003206 	br	2019238 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2019170:	e0bffe17 	ldw	r2,-8(fp)
 2019174:	1000051e 	bne	r2,zero,201918c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2019178:	e0bfff17 	ldw	r2,-4(fp)
 201917c:	00c00304 	movi	r3,12
 2019180:	10c00005 	stb	r3,0(r2)
        return (0);
 2019184:	0005883a 	mov	r2,zero
 2019188:	00002b06 	br	2019238 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201918c:	d0a7ac03 	ldbu	r2,-24912(gp)
 2019190:	10803fcc 	andi	r2,r2,255
 2019194:	10000526 	beq	r2,zero,20191ac <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2019198:	e0bfff17 	ldw	r2,-4(fp)
 201919c:	00c00444 	movi	r3,17
 20191a0:	10c00005 	stb	r3,0(r2)
        return (0);
 20191a4:	0005883a 	mov	r2,zero
 20191a8:	00002306 	br	2019238 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20191ac:	0005303a 	rdctl	r2,status
 20191b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20191b4:	e0fffc17 	ldw	r3,-16(fp)
 20191b8:	00bfff84 	movi	r2,-2
 20191bc:	1884703a 	and	r2,r3,r2
 20191c0:	1001703a 	wrctl	status,r2
  
  return context;
 20191c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20191c8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20191cc:	e0bffd17 	ldw	r2,-12(fp)
 20191d0:	10800003 	ldbu	r2,0(r2)
 20191d4:	10803fcc 	andi	r2,r2,255
 20191d8:	10800160 	cmpeqi	r2,r2,5
 20191dc:	1000091e 	bne	r2,zero,2019204 <OSFlagNameGet+0xe0>
 20191e0:	e0bff817 	ldw	r2,-32(fp)
 20191e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20191e8:	e0bff917 	ldw	r2,-28(fp)
 20191ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 20191f0:	e0bfff17 	ldw	r2,-4(fp)
 20191f4:	00c00044 	movi	r3,1
 20191f8:	10c00005 	stb	r3,0(r2)
        return (0);
 20191fc:	0005883a 	mov	r2,zero
 2019200:	00000d06 	br	2019238 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2019204:	e0bffd17 	ldw	r2,-12(fp)
 2019208:	10800284 	addi	r2,r2,10
 201920c:	100b883a 	mov	r5,r2
 2019210:	e13ffe17 	ldw	r4,-8(fp)
 2019214:	20183ac0 	call	20183ac <OS_StrCopy>
 2019218:	e0bffb05 	stb	r2,-20(fp)
 201921c:	e0bff817 	ldw	r2,-32(fp)
 2019220:	e0bffa15 	stw	r2,-24(fp)
 2019224:	e0bffa17 	ldw	r2,-24(fp)
 2019228:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201922c:	e0bfff17 	ldw	r2,-4(fp)
 2019230:	10000005 	stb	zero,0(r2)
    return (len);
 2019234:	e0bffb03 	ldbu	r2,-20(fp)
}
 2019238:	e037883a 	mov	sp,fp
 201923c:	dfc00117 	ldw	ra,4(sp)
 2019240:	df000017 	ldw	fp,0(sp)
 2019244:	dec00204 	addi	sp,sp,8
 2019248:	f800283a 	ret

0201924c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 201924c:	defff504 	addi	sp,sp,-44
 2019250:	dfc00a15 	stw	ra,40(sp)
 2019254:	df000915 	stw	fp,36(sp)
 2019258:	df000904 	addi	fp,sp,36
 201925c:	e13ffd15 	stw	r4,-12(fp)
 2019260:	e17ffe15 	stw	r5,-8(fp)
 2019264:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019268:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201926c:	e0bfff17 	ldw	r2,-4(fp)
 2019270:	10004326 	beq	r2,zero,2019380 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2019274:	e0bffd17 	ldw	r2,-12(fp)
 2019278:	1000041e 	bne	r2,zero,201928c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201927c:	e0bfff17 	ldw	r2,-4(fp)
 2019280:	00c01b84 	movi	r3,110
 2019284:	10c00005 	stb	r3,0(r2)
        return;
 2019288:	00003e06 	br	2019384 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201928c:	e0bffe17 	ldw	r2,-8(fp)
 2019290:	1000041e 	bne	r2,zero,20192a4 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2019294:	e0bfff17 	ldw	r2,-4(fp)
 2019298:	00c00304 	movi	r3,12
 201929c:	10c00005 	stb	r3,0(r2)
        return;
 20192a0:	00003806 	br	2019384 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20192a4:	d0a7ac03 	ldbu	r2,-24912(gp)
 20192a8:	10803fcc 	andi	r2,r2,255
 20192ac:	10000426 	beq	r2,zero,20192c0 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20192b0:	e0bfff17 	ldw	r2,-4(fp)
 20192b4:	00c00484 	movi	r3,18
 20192b8:	10c00005 	stb	r3,0(r2)
        return;
 20192bc:	00003106 	br	2019384 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20192c0:	0005303a 	rdctl	r2,status
 20192c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20192c8:	e0fffc17 	ldw	r3,-16(fp)
 20192cc:	00bfff84 	movi	r2,-2
 20192d0:	1884703a 	and	r2,r3,r2
 20192d4:	1001703a 	wrctl	status,r2
  
  return context;
 20192d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20192dc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20192e0:	e0bffd17 	ldw	r2,-12(fp)
 20192e4:	10800003 	ldbu	r2,0(r2)
 20192e8:	10803fcc 	andi	r2,r2,255
 20192ec:	10800160 	cmpeqi	r2,r2,5
 20192f0:	1000081e 	bne	r2,zero,2019314 <OSFlagNameSet+0xc8>
 20192f4:	e0bff717 	ldw	r2,-36(fp)
 20192f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20192fc:	e0bff817 	ldw	r2,-32(fp)
 2019300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2019304:	e0bfff17 	ldw	r2,-4(fp)
 2019308:	00c00044 	movi	r3,1
 201930c:	10c00005 	stb	r3,0(r2)
        return;
 2019310:	00001c06 	br	2019384 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2019314:	e13ffe17 	ldw	r4,-8(fp)
 2019318:	20184200 	call	2018420 <OS_StrLen>
 201931c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2019320:	e0bffa03 	ldbu	r2,-24(fp)
 2019324:	10800830 	cmpltui	r2,r2,32
 2019328:	1000081e 	bne	r2,zero,201934c <OSFlagNameSet+0x100>
 201932c:	e0bff717 	ldw	r2,-36(fp)
 2019330:	e0bff915 	stw	r2,-28(fp)
 2019334:	e0bff917 	ldw	r2,-28(fp)
 2019338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 201933c:	e0bfff17 	ldw	r2,-4(fp)
 2019340:	00c01cc4 	movi	r3,115
 2019344:	10c00005 	stb	r3,0(r2)
        return;
 2019348:	00000e06 	br	2019384 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 201934c:	e0bffd17 	ldw	r2,-12(fp)
 2019350:	10800284 	addi	r2,r2,10
 2019354:	e17ffe17 	ldw	r5,-8(fp)
 2019358:	1009883a 	mov	r4,r2
 201935c:	20183ac0 	call	20183ac <OS_StrCopy>
 2019360:	e0bff717 	ldw	r2,-36(fp)
 2019364:	e0bffb15 	stw	r2,-20(fp)
 2019368:	e0bffb17 	ldw	r2,-20(fp)
 201936c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019370:	e0bfff17 	ldw	r2,-4(fp)
 2019374:	10000005 	stb	zero,0(r2)
    return;
 2019378:	0001883a 	nop
 201937c:	00000106 	br	2019384 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2019380:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2019384:	e037883a 	mov	sp,fp
 2019388:	dfc00117 	ldw	ra,4(sp)
 201938c:	df000017 	ldw	fp,0(sp)
 2019390:	dec00204 	addi	sp,sp,8
 2019394:	f800283a 	ret

02019398 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 2019398:	deffe104 	addi	sp,sp,-124
 201939c:	dfc01e15 	stw	ra,120(sp)
 20193a0:	df001d15 	stw	fp,116(sp)
 20193a4:	df001d04 	addi	fp,sp,116
 20193a8:	e13ffc15 	stw	r4,-16(fp)
 20193ac:	2809883a 	mov	r4,r5
 20193b0:	3007883a 	mov	r3,r6
 20193b4:	3805883a 	mov	r2,r7
 20193b8:	e13ffd0d 	sth	r4,-12(fp)
 20193bc:	e0fffe05 	stb	r3,-8(fp)
 20193c0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20193c4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20193c8:	e0800217 	ldw	r2,8(fp)
 20193cc:	1000021e 	bne	r2,zero,20193d8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 20193d0:	0005883a 	mov	r2,zero
 20193d4:	00015906 	br	201993c <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 20193d8:	e0bffc17 	ldw	r2,-16(fp)
 20193dc:	1000051e 	bne	r2,zero,20193f4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20193e0:	e0800217 	ldw	r2,8(fp)
 20193e4:	00c01b84 	movi	r3,110
 20193e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20193ec:	0005883a 	mov	r2,zero
 20193f0:	00015206 	br	201993c <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20193f4:	d0a7ac03 	ldbu	r2,-24912(gp)
 20193f8:	10803fcc 	andi	r2,r2,255
 20193fc:	10000526 	beq	r2,zero,2019414 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2019400:	e0800217 	ldw	r2,8(fp)
 2019404:	00c00084 	movi	r3,2
 2019408:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201940c:	0005883a 	mov	r2,zero
 2019410:	00014a06 	br	201993c <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2019414:	d0a79e03 	ldbu	r2,-24968(gp)
 2019418:	10803fcc 	andi	r2,r2,255
 201941c:	10000526 	beq	r2,zero,2019434 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2019420:	e0800217 	ldw	r2,8(fp)
 2019424:	00c00344 	movi	r3,13
 2019428:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201942c:	0005883a 	mov	r2,zero
 2019430:	00014206 	br	201993c <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2019434:	e0bffc17 	ldw	r2,-16(fp)
 2019438:	10800003 	ldbu	r2,0(r2)
 201943c:	10803fcc 	andi	r2,r2,255
 2019440:	10800160 	cmpeqi	r2,r2,5
 2019444:	1000051e 	bne	r2,zero,201945c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 2019448:	e0800217 	ldw	r2,8(fp)
 201944c:	00c00044 	movi	r3,1
 2019450:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019454:	0005883a 	mov	r2,zero
 2019458:	00013806 	br	201993c <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 201945c:	e0fffe03 	ldbu	r3,-8(fp)
 2019460:	00bfe004 	movi	r2,-128
 2019464:	1884703a 	and	r2,r3,r2
 2019468:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 201946c:	e0bfe603 	ldbu	r2,-104(fp)
 2019470:	10000626 	beq	r2,zero,201948c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2019474:	e0bffe03 	ldbu	r2,-8(fp)
 2019478:	10801fcc 	andi	r2,r2,127
 201947c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2019480:	00800044 	movi	r2,1
 2019484:	e0bfe405 	stb	r2,-112(fp)
 2019488:	00000106 	br	2019490 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 201948c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019490:	0005303a 	rdctl	r2,status
 2019494:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019498:	e0fff617 	ldw	r3,-40(fp)
 201949c:	00bfff84 	movi	r2,-2
 20194a0:	1884703a 	and	r2,r3,r2
 20194a4:	1001703a 	wrctl	status,r2
  
  return context;
 20194a8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 20194ac:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 20194b0:	e0bffe03 	ldbu	r2,-8(fp)
 20194b4:	10c00060 	cmpeqi	r3,r2,1
 20194b8:	1800921e 	bne	r3,zero,2019704 <OSFlagPend+0x36c>
 20194bc:	10c00088 	cmpgei	r3,r2,2
 20194c0:	1800021e 	bne	r3,zero,20194cc <OSFlagPend+0x134>
 20194c4:	10006126 	beq	r2,zero,201964c <OSFlagPend+0x2b4>
 20194c8:	0000bb06 	br	20197b8 <OSFlagPend+0x420>
 20194cc:	10c000a0 	cmpeqi	r3,r2,2
 20194d0:	1800031e 	bne	r3,zero,20194e0 <OSFlagPend+0x148>
 20194d4:	108000e0 	cmpeqi	r2,r2,3
 20194d8:	10002f1e 	bne	r2,zero,2019598 <OSFlagPend+0x200>
 20194dc:	0000b606 	br	20197b8 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 20194e0:	e0bffc17 	ldw	r2,-16(fp)
 20194e4:	10c0020b 	ldhu	r3,8(r2)
 20194e8:	e0bffd0b 	ldhu	r2,-12(fp)
 20194ec:	1884703a 	and	r2,r3,r2
 20194f0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20194f4:	e0ffe80b 	ldhu	r3,-96(fp)
 20194f8:	e0bffd0b 	ldhu	r2,-12(fp)
 20194fc:	1880171e 	bne	r3,r2,201955c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019500:	e0bfe403 	ldbu	r2,-112(fp)
 2019504:	10800058 	cmpnei	r2,r2,1
 2019508:	1000091e 	bne	r2,zero,2019530 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 201950c:	e0bffc17 	ldw	r2,-16(fp)
 2019510:	1080020b 	ldhu	r2,8(r2)
 2019514:	1007883a 	mov	r3,r2
 2019518:	e0bfe80b 	ldhu	r2,-96(fp)
 201951c:	0084303a 	nor	r2,zero,r2
 2019520:	1884703a 	and	r2,r3,r2
 2019524:	1007883a 	mov	r3,r2
 2019528:	e0bffc17 	ldw	r2,-16(fp)
 201952c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2019530:	d0a7ad17 	ldw	r2,-24908(gp)
 2019534:	e0ffe80b 	ldhu	r3,-96(fp)
 2019538:	10c00b0d 	sth	r3,44(r2)
 201953c:	e0bfe517 	ldw	r2,-108(fp)
 2019540:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019544:	e0bfe717 	ldw	r2,-100(fp)
 2019548:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201954c:	e0800217 	ldw	r2,8(fp)
 2019550:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2019554:	e0bfe80b 	ldhu	r2,-96(fp)
 2019558:	0000f806 	br	201993c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201955c:	e13ffd0b 	ldhu	r4,-12(fp)
 2019560:	e17ffe03 	ldbu	r5,-8(fp)
 2019564:	e0bfff0b 	ldhu	r2,-4(fp)
 2019568:	e0fff704 	addi	r3,fp,-36
 201956c:	d8800015 	stw	r2,0(sp)
 2019570:	280f883a 	mov	r7,r5
 2019574:	200d883a 	mov	r6,r4
 2019578:	180b883a 	mov	r5,r3
 201957c:	e13ffc17 	ldw	r4,-16(fp)
 2019580:	2019e080 	call	2019e08 <OS_FlagBlock>
 2019584:	e0bfe517 	ldw	r2,-108(fp)
 2019588:	e0bfe915 	stw	r2,-92(fp)
 201958c:	e0bfe917 	ldw	r2,-92(fp)
 2019590:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2019594:	00009206 	br	20197e0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2019598:	e0bffc17 	ldw	r2,-16(fp)
 201959c:	10c0020b 	ldhu	r3,8(r2)
 20195a0:	e0bffd0b 	ldhu	r2,-12(fp)
 20195a4:	1884703a 	and	r2,r3,r2
 20195a8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 20195ac:	e0bfe80b 	ldhu	r2,-96(fp)
 20195b0:	10001726 	beq	r2,zero,2019610 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20195b4:	e0bfe403 	ldbu	r2,-112(fp)
 20195b8:	10800058 	cmpnei	r2,r2,1
 20195bc:	1000091e 	bne	r2,zero,20195e4 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 20195c0:	e0bffc17 	ldw	r2,-16(fp)
 20195c4:	1080020b 	ldhu	r2,8(r2)
 20195c8:	1007883a 	mov	r3,r2
 20195cc:	e0bfe80b 	ldhu	r2,-96(fp)
 20195d0:	0084303a 	nor	r2,zero,r2
 20195d4:	1884703a 	and	r2,r3,r2
 20195d8:	1007883a 	mov	r3,r2
 20195dc:	e0bffc17 	ldw	r2,-16(fp)
 20195e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20195e4:	d0a7ad17 	ldw	r2,-24908(gp)
 20195e8:	e0ffe80b 	ldhu	r3,-96(fp)
 20195ec:	10c00b0d 	sth	r3,44(r2)
 20195f0:	e0bfe517 	ldw	r2,-108(fp)
 20195f4:	e0bfea15 	stw	r2,-88(fp)
 20195f8:	e0bfea17 	ldw	r2,-88(fp)
 20195fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2019600:	e0800217 	ldw	r2,8(fp)
 2019604:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2019608:	e0bfe80b 	ldhu	r2,-96(fp)
 201960c:	0000cb06 	br	201993c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2019610:	e13ffd0b 	ldhu	r4,-12(fp)
 2019614:	e17ffe03 	ldbu	r5,-8(fp)
 2019618:	e0bfff0b 	ldhu	r2,-4(fp)
 201961c:	e0fff704 	addi	r3,fp,-36
 2019620:	d8800015 	stw	r2,0(sp)
 2019624:	280f883a 	mov	r7,r5
 2019628:	200d883a 	mov	r6,r4
 201962c:	180b883a 	mov	r5,r3
 2019630:	e13ffc17 	ldw	r4,-16(fp)
 2019634:	2019e080 	call	2019e08 <OS_FlagBlock>
 2019638:	e0bfe517 	ldw	r2,-108(fp)
 201963c:	e0bfeb15 	stw	r2,-84(fp)
 2019640:	e0bfeb17 	ldw	r2,-84(fp)
 2019644:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2019648:	00006506 	br	20197e0 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 201964c:	e0bffc17 	ldw	r2,-16(fp)
 2019650:	1080020b 	ldhu	r2,8(r2)
 2019654:	0084303a 	nor	r2,zero,r2
 2019658:	1007883a 	mov	r3,r2
 201965c:	e0bffd0b 	ldhu	r2,-12(fp)
 2019660:	1884703a 	and	r2,r3,r2
 2019664:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2019668:	e0ffe80b 	ldhu	r3,-96(fp)
 201966c:	e0bffd0b 	ldhu	r2,-12(fp)
 2019670:	1880151e 	bne	r3,r2,20196c8 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019674:	e0bfe403 	ldbu	r2,-112(fp)
 2019678:	10800058 	cmpnei	r2,r2,1
 201967c:	1000071e 	bne	r2,zero,201969c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2019680:	e0bffc17 	ldw	r2,-16(fp)
 2019684:	10c0020b 	ldhu	r3,8(r2)
 2019688:	e0bfe80b 	ldhu	r2,-96(fp)
 201968c:	1884b03a 	or	r2,r3,r2
 2019690:	1007883a 	mov	r3,r2
 2019694:	e0bffc17 	ldw	r2,-16(fp)
 2019698:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201969c:	d0a7ad17 	ldw	r2,-24908(gp)
 20196a0:	e0ffe80b 	ldhu	r3,-96(fp)
 20196a4:	10c00b0d 	sth	r3,44(r2)
 20196a8:	e0bfe517 	ldw	r2,-108(fp)
 20196ac:	e0bfec15 	stw	r2,-80(fp)
 20196b0:	e0bfec17 	ldw	r2,-80(fp)
 20196b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20196b8:	e0800217 	ldw	r2,8(fp)
 20196bc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20196c0:	e0bfe80b 	ldhu	r2,-96(fp)
 20196c4:	00009d06 	br	201993c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20196c8:	e13ffd0b 	ldhu	r4,-12(fp)
 20196cc:	e17ffe03 	ldbu	r5,-8(fp)
 20196d0:	e0bfff0b 	ldhu	r2,-4(fp)
 20196d4:	e0fff704 	addi	r3,fp,-36
 20196d8:	d8800015 	stw	r2,0(sp)
 20196dc:	280f883a 	mov	r7,r5
 20196e0:	200d883a 	mov	r6,r4
 20196e4:	180b883a 	mov	r5,r3
 20196e8:	e13ffc17 	ldw	r4,-16(fp)
 20196ec:	2019e080 	call	2019e08 <OS_FlagBlock>
 20196f0:	e0bfe517 	ldw	r2,-108(fp)
 20196f4:	e0bfed15 	stw	r2,-76(fp)
 20196f8:	e0bfed17 	ldw	r2,-76(fp)
 20196fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2019700:	00003706 	br	20197e0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2019704:	e0bffc17 	ldw	r2,-16(fp)
 2019708:	1080020b 	ldhu	r2,8(r2)
 201970c:	0084303a 	nor	r2,zero,r2
 2019710:	1007883a 	mov	r3,r2
 2019714:	e0bffd0b 	ldhu	r2,-12(fp)
 2019718:	1884703a 	and	r2,r3,r2
 201971c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2019720:	e0bfe80b 	ldhu	r2,-96(fp)
 2019724:	10001526 	beq	r2,zero,201977c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019728:	e0bfe403 	ldbu	r2,-112(fp)
 201972c:	10800058 	cmpnei	r2,r2,1
 2019730:	1000071e 	bne	r2,zero,2019750 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2019734:	e0bffc17 	ldw	r2,-16(fp)
 2019738:	10c0020b 	ldhu	r3,8(r2)
 201973c:	e0bfe80b 	ldhu	r2,-96(fp)
 2019740:	1884b03a 	or	r2,r3,r2
 2019744:	1007883a 	mov	r3,r2
 2019748:	e0bffc17 	ldw	r2,-16(fp)
 201974c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2019750:	d0a7ad17 	ldw	r2,-24908(gp)
 2019754:	e0ffe80b 	ldhu	r3,-96(fp)
 2019758:	10c00b0d 	sth	r3,44(r2)
 201975c:	e0bfe517 	ldw	r2,-108(fp)
 2019760:	e0bfee15 	stw	r2,-72(fp)
 2019764:	e0bfee17 	ldw	r2,-72(fp)
 2019768:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201976c:	e0800217 	ldw	r2,8(fp)
 2019770:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2019774:	e0bfe80b 	ldhu	r2,-96(fp)
 2019778:	00007006 	br	201993c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201977c:	e13ffd0b 	ldhu	r4,-12(fp)
 2019780:	e17ffe03 	ldbu	r5,-8(fp)
 2019784:	e0bfff0b 	ldhu	r2,-4(fp)
 2019788:	e0fff704 	addi	r3,fp,-36
 201978c:	d8800015 	stw	r2,0(sp)
 2019790:	280f883a 	mov	r7,r5
 2019794:	200d883a 	mov	r6,r4
 2019798:	180b883a 	mov	r5,r3
 201979c:	e13ffc17 	ldw	r4,-16(fp)
 20197a0:	2019e080 	call	2019e08 <OS_FlagBlock>
 20197a4:	e0bfe517 	ldw	r2,-108(fp)
 20197a8:	e0bfef15 	stw	r2,-68(fp)
 20197ac:	e0bfef17 	ldw	r2,-68(fp)
 20197b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20197b4:	00000a06 	br	20197e0 <OSFlagPend+0x448>
 20197b8:	e0bfe517 	ldw	r2,-108(fp)
 20197bc:	e0bff015 	stw	r2,-64(fp)
 20197c0:	e0bff017 	ldw	r2,-64(fp)
 20197c4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20197c8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 20197cc:	e0800217 	ldw	r2,8(fp)
 20197d0:	00c01bc4 	movi	r3,111
 20197d4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 20197d8:	e0bfe80b 	ldhu	r2,-96(fp)
 20197dc:	00005706 	br	201993c <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 20197e0:	20182680 	call	2018268 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20197e4:	0005303a 	rdctl	r2,status
 20197e8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20197ec:	e0fff117 	ldw	r3,-60(fp)
 20197f0:	00bfff84 	movi	r2,-2
 20197f4:	1884703a 	and	r2,r3,r2
 20197f8:	1001703a 	wrctl	status,r2
  
  return context;
 20197fc:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 2019800:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2019804:	d0a7ad17 	ldw	r2,-24908(gp)
 2019808:	10800c43 	ldbu	r2,49(r2)
 201980c:	10803fcc 	andi	r2,r2,255
 2019810:	10001c26 	beq	r2,zero,2019884 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2019814:	d0a7ad17 	ldw	r2,-24908(gp)
 2019818:	10800c43 	ldbu	r2,49(r2)
 201981c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2019820:	d0a7ad17 	ldw	r2,-24908(gp)
 2019824:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2019828:	e0bff704 	addi	r2,fp,-36
 201982c:	1009883a 	mov	r4,r2
 2019830:	201a13c0 	call	201a13c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2019834:	d0a7ad17 	ldw	r2,-24908(gp)
 2019838:	10000c05 	stb	zero,48(r2)
 201983c:	e0bfe517 	ldw	r2,-108(fp)
 2019840:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019844:	e0bff217 	ldw	r2,-56(fp)
 2019848:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 201984c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 2019850:	e0bff303 	ldbu	r2,-52(fp)
 2019854:	108000a0 	cmpeqi	r2,r2,2
 2019858:	10000426 	beq	r2,zero,201986c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 201985c:	e0800217 	ldw	r2,8(fp)
 2019860:	00c00384 	movi	r3,14
 2019864:	10c00005 	stb	r3,0(r2)
                 break;
 2019868:	00000406 	br	201987c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 201986c:	e0800217 	ldw	r2,8(fp)
 2019870:	00c00284 	movi	r3,10
 2019874:	10c00005 	stb	r3,0(r2)
                 break;
 2019878:	0001883a 	nop
        }
        return (flags_rdy);
 201987c:	e0bfe80b 	ldhu	r2,-96(fp)
 2019880:	00002e06 	br	201993c <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2019884:	d0a7ad17 	ldw	r2,-24908(gp)
 2019888:	10800b0b 	ldhu	r2,44(r2)
 201988c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2019890:	e0bfe403 	ldbu	r2,-112(fp)
 2019894:	10800058 	cmpnei	r2,r2,1
 2019898:	1000211e 	bne	r2,zero,2019920 <OSFlagPend+0x588>
        switch (wait_type) {
 201989c:	e0bffe03 	ldbu	r2,-8(fp)
 20198a0:	10001616 	blt	r2,zero,20198fc <OSFlagPend+0x564>
 20198a4:	10c00090 	cmplti	r3,r2,2
 20198a8:	18000c1e 	bne	r3,zero,20198dc <OSFlagPend+0x544>
 20198ac:	10800108 	cmpgei	r2,r2,4
 20198b0:	1000121e 	bne	r2,zero,20198fc <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 20198b4:	e0bffc17 	ldw	r2,-16(fp)
 20198b8:	1080020b 	ldhu	r2,8(r2)
 20198bc:	1007883a 	mov	r3,r2
 20198c0:	e0bfe80b 	ldhu	r2,-96(fp)
 20198c4:	0084303a 	nor	r2,zero,r2
 20198c8:	1884703a 	and	r2,r3,r2
 20198cc:	1007883a 	mov	r3,r2
 20198d0:	e0bffc17 	ldw	r2,-16(fp)
 20198d4:	10c0020d 	sth	r3,8(r2)
                 break;
 20198d8:	00001106 	br	2019920 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 20198dc:	e0bffc17 	ldw	r2,-16(fp)
 20198e0:	10c0020b 	ldhu	r3,8(r2)
 20198e4:	e0bfe80b 	ldhu	r2,-96(fp)
 20198e8:	1884b03a 	or	r2,r3,r2
 20198ec:	1007883a 	mov	r3,r2
 20198f0:	e0bffc17 	ldw	r2,-16(fp)
 20198f4:	10c0020d 	sth	r3,8(r2)
                 break;
 20198f8:	00000906 	br	2019920 <OSFlagPend+0x588>
 20198fc:	e0bfe517 	ldw	r2,-108(fp)
 2019900:	e0bff415 	stw	r2,-48(fp)
 2019904:	e0bff417 	ldw	r2,-48(fp)
 2019908:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 201990c:	e0800217 	ldw	r2,8(fp)
 2019910:	00c01bc4 	movi	r3,111
 2019914:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2019918:	0005883a 	mov	r2,zero
 201991c:	00000706 	br	201993c <OSFlagPend+0x5a4>
 2019920:	e0bfe517 	ldw	r2,-108(fp)
 2019924:	e0bff515 	stw	r2,-44(fp)
 2019928:	e0bff517 	ldw	r2,-44(fp)
 201992c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2019930:	e0800217 	ldw	r2,8(fp)
 2019934:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2019938:	e0bfe80b 	ldhu	r2,-96(fp)
}
 201993c:	e037883a 	mov	sp,fp
 2019940:	dfc00117 	ldw	ra,4(sp)
 2019944:	df000017 	ldw	fp,0(sp)
 2019948:	dec00204 	addi	sp,sp,8
 201994c:	f800283a 	ret

02019950 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2019950:	defffb04 	addi	sp,sp,-20
 2019954:	df000415 	stw	fp,16(sp)
 2019958:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201995c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019960:	0005303a 	rdctl	r2,status
 2019964:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019968:	e0fffe17 	ldw	r3,-8(fp)
 201996c:	00bfff84 	movi	r2,-2
 2019970:	1884703a 	and	r2,r3,r2
 2019974:	1001703a 	wrctl	status,r2
  
  return context;
 2019978:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201997c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2019980:	d0a7ad17 	ldw	r2,-24908(gp)
 2019984:	10800b0b 	ldhu	r2,44(r2)
 2019988:	e0bffd0d 	sth	r2,-12(fp)
 201998c:	e0bffc17 	ldw	r2,-16(fp)
 2019990:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019994:	e0bfff17 	ldw	r2,-4(fp)
 2019998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 201999c:	e0bffd0b 	ldhu	r2,-12(fp)
}
 20199a0:	e037883a 	mov	sp,fp
 20199a4:	df000017 	ldw	fp,0(sp)
 20199a8:	dec00104 	addi	sp,sp,4
 20199ac:	f800283a 	ret

020199b0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 20199b0:	deffef04 	addi	sp,sp,-68
 20199b4:	dfc01015 	stw	ra,64(sp)
 20199b8:	df000f15 	stw	fp,60(sp)
 20199bc:	df000f04 	addi	fp,sp,60
 20199c0:	e13ffc15 	stw	r4,-16(fp)
 20199c4:	2807883a 	mov	r3,r5
 20199c8:	3005883a 	mov	r2,r6
 20199cc:	e1ffff15 	stw	r7,-4(fp)
 20199d0:	e0fffd0d 	sth	r3,-12(fp)
 20199d4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 20199d8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 20199dc:	e0bfff17 	ldw	r2,-4(fp)
 20199e0:	1000021e 	bne	r2,zero,20199ec <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 20199e4:	0005883a 	mov	r2,zero
 20199e8:	0000d106 	br	2019d30 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 20199ec:	e0bffc17 	ldw	r2,-16(fp)
 20199f0:	1000051e 	bne	r2,zero,2019a08 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20199f4:	e0bfff17 	ldw	r2,-4(fp)
 20199f8:	00c01b84 	movi	r3,110
 20199fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019a00:	0005883a 	mov	r2,zero
 2019a04:	0000ca06 	br	2019d30 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2019a08:	e0bffc17 	ldw	r2,-16(fp)
 2019a0c:	10800003 	ldbu	r2,0(r2)
 2019a10:	10803fcc 	andi	r2,r2,255
 2019a14:	10800160 	cmpeqi	r2,r2,5
 2019a18:	1000051e 	bne	r2,zero,2019a30 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2019a1c:	e0bfff17 	ldw	r2,-4(fp)
 2019a20:	00c00044 	movi	r3,1
 2019a24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019a28:	0005883a 	mov	r2,zero
 2019a2c:	0000c006 	br	2019d30 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019a30:	0005303a 	rdctl	r2,status
 2019a34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019a38:	e0fffb17 	ldw	r3,-20(fp)
 2019a3c:	00bfff84 	movi	r2,-2
 2019a40:	1884703a 	and	r2,r3,r2
 2019a44:	1001703a 	wrctl	status,r2
  
  return context;
 2019a48:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2019a4c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 2019a50:	e0bffe03 	ldbu	r2,-8(fp)
 2019a54:	10000326 	beq	r2,zero,2019a64 <OSFlagPost+0xb4>
 2019a58:	10800060 	cmpeqi	r2,r2,1
 2019a5c:	10000b1e 	bne	r2,zero,2019a8c <OSFlagPost+0xdc>
 2019a60:	00001206 	br	2019aac <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2019a64:	e0bffc17 	ldw	r2,-16(fp)
 2019a68:	1080020b 	ldhu	r2,8(r2)
 2019a6c:	1007883a 	mov	r3,r2
 2019a70:	e0bffd0b 	ldhu	r2,-12(fp)
 2019a74:	0084303a 	nor	r2,zero,r2
 2019a78:	1884703a 	and	r2,r3,r2
 2019a7c:	1007883a 	mov	r3,r2
 2019a80:	e0bffc17 	ldw	r2,-16(fp)
 2019a84:	10c0020d 	sth	r3,8(r2)
             break;
 2019a88:	00001106 	br	2019ad0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2019a8c:	e0bffc17 	ldw	r2,-16(fp)
 2019a90:	10c0020b 	ldhu	r3,8(r2)
 2019a94:	e0bffd0b 	ldhu	r2,-12(fp)
 2019a98:	1884b03a 	or	r2,r3,r2
 2019a9c:	1007883a 	mov	r3,r2
 2019aa0:	e0bffc17 	ldw	r2,-16(fp)
 2019aa4:	10c0020d 	sth	r3,8(r2)
             break;
 2019aa8:	00000906 	br	2019ad0 <OSFlagPost+0x120>
 2019aac:	e0bff317 	ldw	r2,-52(fp)
 2019ab0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019ab4:	e0bff417 	ldw	r2,-48(fp)
 2019ab8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2019abc:	e0bfff17 	ldw	r2,-4(fp)
 2019ac0:	00c01c44 	movi	r3,113
 2019ac4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 2019ac8:	0005883a 	mov	r2,zero
 2019acc:	00009806 	br	2019d30 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2019ad0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2019ad4:	e0bffc17 	ldw	r2,-16(fp)
 2019ad8:	10800117 	ldw	r2,4(r2)
 2019adc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2019ae0:	00007706 	br	2019cc0 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 2019ae4:	e0bff117 	ldw	r2,-60(fp)
 2019ae8:	10800483 	ldbu	r2,18(r2)
 2019aec:	10803fcc 	andi	r2,r2,255
 2019af0:	10c00060 	cmpeqi	r3,r2,1
 2019af4:	18004a1e 	bne	r3,zero,2019c20 <OSFlagPost+0x270>
 2019af8:	10c00088 	cmpgei	r3,r2,2
 2019afc:	1800021e 	bne	r3,zero,2019b08 <OSFlagPost+0x158>
 2019b00:	10002f26 	beq	r2,zero,2019bc0 <OSFlagPost+0x210>
 2019b04:	00005b06 	br	2019c74 <OSFlagPost+0x2c4>
 2019b08:	10c000a0 	cmpeqi	r3,r2,2
 2019b0c:	1800031e 	bne	r3,zero,2019b1c <OSFlagPost+0x16c>
 2019b10:	108000e0 	cmpeqi	r2,r2,3
 2019b14:	1000171e 	bne	r2,zero,2019b74 <OSFlagPost+0x1c4>
 2019b18:	00005606 	br	2019c74 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2019b1c:	e0bffc17 	ldw	r2,-16(fp)
 2019b20:	10c0020b 	ldhu	r3,8(r2)
 2019b24:	e0bff117 	ldw	r2,-60(fp)
 2019b28:	1080040b 	ldhu	r2,16(r2)
 2019b2c:	1884703a 	and	r2,r3,r2
 2019b30:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2019b34:	e0bff117 	ldw	r2,-60(fp)
 2019b38:	1080040b 	ldhu	r2,16(r2)
 2019b3c:	10ffffcc 	andi	r3,r2,65535
 2019b40:	e0bff60b 	ldhu	r2,-40(fp)
 2019b44:	1880541e 	bne	r3,r2,2019c98 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2019b48:	e0bff60b 	ldhu	r2,-40(fp)
 2019b4c:	100b883a 	mov	r5,r2
 2019b50:	e13ff117 	ldw	r4,-60(fp)
 2019b54:	201a0480 	call	201a048 <OS_FlagTaskRdy>
 2019b58:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2019b5c:	e0bff683 	ldbu	r2,-38(fp)
 2019b60:	10800058 	cmpnei	r2,r2,1
 2019b64:	10004c1e 	bne	r2,zero,2019c98 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2019b68:	00800044 	movi	r2,1
 2019b6c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2019b70:	00004906 	br	2019c98 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2019b74:	e0bffc17 	ldw	r2,-16(fp)
 2019b78:	10c0020b 	ldhu	r3,8(r2)
 2019b7c:	e0bff117 	ldw	r2,-60(fp)
 2019b80:	1080040b 	ldhu	r2,16(r2)
 2019b84:	1884703a 	and	r2,r3,r2
 2019b88:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2019b8c:	e0bff60b 	ldhu	r2,-40(fp)
 2019b90:	10004326 	beq	r2,zero,2019ca0 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2019b94:	e0bff60b 	ldhu	r2,-40(fp)
 2019b98:	100b883a 	mov	r5,r2
 2019b9c:	e13ff117 	ldw	r4,-60(fp)
 2019ba0:	201a0480 	call	201a048 <OS_FlagTaskRdy>
 2019ba4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2019ba8:	e0bff683 	ldbu	r2,-38(fp)
 2019bac:	10800058 	cmpnei	r2,r2,1
 2019bb0:	10003b1e 	bne	r2,zero,2019ca0 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2019bb4:	00800044 	movi	r2,1
 2019bb8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2019bbc:	00003806 	br	2019ca0 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2019bc0:	e0bffc17 	ldw	r2,-16(fp)
 2019bc4:	1080020b 	ldhu	r2,8(r2)
 2019bc8:	0084303a 	nor	r2,zero,r2
 2019bcc:	1007883a 	mov	r3,r2
 2019bd0:	e0bff117 	ldw	r2,-60(fp)
 2019bd4:	1080040b 	ldhu	r2,16(r2)
 2019bd8:	1884703a 	and	r2,r3,r2
 2019bdc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2019be0:	e0bff117 	ldw	r2,-60(fp)
 2019be4:	1080040b 	ldhu	r2,16(r2)
 2019be8:	10ffffcc 	andi	r3,r2,65535
 2019bec:	e0bff60b 	ldhu	r2,-40(fp)
 2019bf0:	18802d1e 	bne	r3,r2,2019ca8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2019bf4:	e0bff60b 	ldhu	r2,-40(fp)
 2019bf8:	100b883a 	mov	r5,r2
 2019bfc:	e13ff117 	ldw	r4,-60(fp)
 2019c00:	201a0480 	call	201a048 <OS_FlagTaskRdy>
 2019c04:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2019c08:	e0bff683 	ldbu	r2,-38(fp)
 2019c0c:	10800058 	cmpnei	r2,r2,1
 2019c10:	1000251e 	bne	r2,zero,2019ca8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2019c14:	00800044 	movi	r2,1
 2019c18:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2019c1c:	00002206 	br	2019ca8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2019c20:	e0bffc17 	ldw	r2,-16(fp)
 2019c24:	1080020b 	ldhu	r2,8(r2)
 2019c28:	0084303a 	nor	r2,zero,r2
 2019c2c:	1007883a 	mov	r3,r2
 2019c30:	e0bff117 	ldw	r2,-60(fp)
 2019c34:	1080040b 	ldhu	r2,16(r2)
 2019c38:	1884703a 	and	r2,r3,r2
 2019c3c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2019c40:	e0bff60b 	ldhu	r2,-40(fp)
 2019c44:	10001a26 	beq	r2,zero,2019cb0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2019c48:	e0bff60b 	ldhu	r2,-40(fp)
 2019c4c:	100b883a 	mov	r5,r2
 2019c50:	e13ff117 	ldw	r4,-60(fp)
 2019c54:	201a0480 	call	201a048 <OS_FlagTaskRdy>
 2019c58:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2019c5c:	e0bff683 	ldbu	r2,-38(fp)
 2019c60:	10800058 	cmpnei	r2,r2,1
 2019c64:	1000121e 	bne	r2,zero,2019cb0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2019c68:	00800044 	movi	r2,1
 2019c6c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2019c70:	00000f06 	br	2019cb0 <OSFlagPost+0x300>
 2019c74:	e0bff317 	ldw	r2,-52(fp)
 2019c78:	e0bff515 	stw	r2,-44(fp)
 2019c7c:	e0bff517 	ldw	r2,-44(fp)
 2019c80:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2019c84:	e0bfff17 	ldw	r2,-4(fp)
 2019c88:	00c01bc4 	movi	r3,111
 2019c8c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2019c90:	0005883a 	mov	r2,zero
 2019c94:	00002606 	br	2019d30 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2019c98:	0001883a 	nop
 2019c9c:	00000506 	br	2019cb4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2019ca0:	0001883a 	nop
 2019ca4:	00000306 	br	2019cb4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2019ca8:	0001883a 	nop
 2019cac:	00000106 	br	2019cb4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2019cb0:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 2019cb4:	e0bff117 	ldw	r2,-60(fp)
 2019cb8:	10800017 	ldw	r2,0(r2)
 2019cbc:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2019cc0:	e0bff117 	ldw	r2,-60(fp)
 2019cc4:	103f871e 	bne	r2,zero,2019ae4 <OSFlagPost+0x134>
 2019cc8:	e0bff317 	ldw	r2,-52(fp)
 2019ccc:	e0bff715 	stw	r2,-36(fp)
 2019cd0:	e0bff717 	ldw	r2,-36(fp)
 2019cd4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 2019cd8:	e0bff203 	ldbu	r2,-56(fp)
 2019cdc:	10800058 	cmpnei	r2,r2,1
 2019ce0:	1000011e 	bne	r2,zero,2019ce8 <OSFlagPost+0x338>
        OS_Sched();
 2019ce4:	20182680 	call	2018268 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019ce8:	0005303a 	rdctl	r2,status
 2019cec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019cf0:	e0fffa17 	ldw	r3,-24(fp)
 2019cf4:	00bfff84 	movi	r2,-2
 2019cf8:	1884703a 	and	r2,r3,r2
 2019cfc:	1001703a 	wrctl	status,r2
  
  return context;
 2019d00:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2019d04:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 2019d08:	e0bffc17 	ldw	r2,-16(fp)
 2019d0c:	1080020b 	ldhu	r2,8(r2)
 2019d10:	e0bff90d 	sth	r2,-28(fp)
 2019d14:	e0bff317 	ldw	r2,-52(fp)
 2019d18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019d1c:	e0bff817 	ldw	r2,-32(fp)
 2019d20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 2019d24:	e0bfff17 	ldw	r2,-4(fp)
 2019d28:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2019d2c:	e0bff90b 	ldhu	r2,-28(fp)
}
 2019d30:	e037883a 	mov	sp,fp
 2019d34:	dfc00117 	ldw	ra,4(sp)
 2019d38:	df000017 	ldw	fp,0(sp)
 2019d3c:	dec00204 	addi	sp,sp,8
 2019d40:	f800283a 	ret

02019d44 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2019d44:	defff904 	addi	sp,sp,-28
 2019d48:	df000615 	stw	fp,24(sp)
 2019d4c:	df000604 	addi	fp,sp,24
 2019d50:	e13ffe15 	stw	r4,-8(fp)
 2019d54:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 2019d58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2019d5c:	e0bfff17 	ldw	r2,-4(fp)
 2019d60:	1000021e 	bne	r2,zero,2019d6c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 2019d64:	0005883a 	mov	r2,zero
 2019d68:	00002306 	br	2019df8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2019d6c:	e0bffe17 	ldw	r2,-8(fp)
 2019d70:	1000051e 	bne	r2,zero,2019d88 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019d74:	e0bfff17 	ldw	r2,-4(fp)
 2019d78:	00c01b84 	movi	r3,110
 2019d7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019d80:	0005883a 	mov	r2,zero
 2019d84:	00001c06 	br	2019df8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 2019d88:	e0bffe17 	ldw	r2,-8(fp)
 2019d8c:	10800003 	ldbu	r2,0(r2)
 2019d90:	10803fcc 	andi	r2,r2,255
 2019d94:	10800160 	cmpeqi	r2,r2,5
 2019d98:	1000051e 	bne	r2,zero,2019db0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2019d9c:	e0bfff17 	ldw	r2,-4(fp)
 2019da0:	00c00044 	movi	r3,1
 2019da4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019da8:	0005883a 	mov	r2,zero
 2019dac:	00001206 	br	2019df8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019db0:	0005303a 	rdctl	r2,status
 2019db4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019db8:	e0fffc17 	ldw	r3,-16(fp)
 2019dbc:	00bfff84 	movi	r2,-2
 2019dc0:	1884703a 	and	r2,r3,r2
 2019dc4:	1001703a 	wrctl	status,r2
  
  return context;
 2019dc8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019dcc:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 2019dd0:	e0bffe17 	ldw	r2,-8(fp)
 2019dd4:	1080020b 	ldhu	r2,8(r2)
 2019dd8:	e0bffb0d 	sth	r2,-20(fp)
 2019ddc:	e0bffa17 	ldw	r2,-24(fp)
 2019de0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019de4:	e0bffd17 	ldw	r2,-12(fp)
 2019de8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019dec:	e0bfff17 	ldw	r2,-4(fp)
 2019df0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 2019df4:	e0bffb0b 	ldhu	r2,-20(fp)
}
 2019df8:	e037883a 	mov	sp,fp
 2019dfc:	df000017 	ldw	fp,0(sp)
 2019e00:	dec00104 	addi	sp,sp,4
 2019e04:	f800283a 	ret

02019e08 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 2019e08:	defff804 	addi	sp,sp,-32
 2019e0c:	df000715 	stw	fp,28(sp)
 2019e10:	df000704 	addi	fp,sp,28
 2019e14:	e13ffb15 	stw	r4,-20(fp)
 2019e18:	e17ffc15 	stw	r5,-16(fp)
 2019e1c:	3009883a 	mov	r4,r6
 2019e20:	3807883a 	mov	r3,r7
 2019e24:	e0800117 	ldw	r2,4(fp)
 2019e28:	e13ffd0d 	sth	r4,-12(fp)
 2019e2c:	e0fffe05 	stb	r3,-8(fp)
 2019e30:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 2019e34:	d0a7ad17 	ldw	r2,-24908(gp)
 2019e38:	d0e7ad17 	ldw	r3,-24908(gp)
 2019e3c:	18c00c03 	ldbu	r3,48(r3)
 2019e40:	18c00814 	ori	r3,r3,32
 2019e44:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 2019e48:	d0a7ad17 	ldw	r2,-24908(gp)
 2019e4c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 2019e50:	d0a7ad17 	ldw	r2,-24908(gp)
 2019e54:	e0ffff0b 	ldhu	r3,-4(fp)
 2019e58:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2019e5c:	d0a7ad17 	ldw	r2,-24908(gp)
 2019e60:	e0fffc17 	ldw	r3,-16(fp)
 2019e64:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2019e68:	e0bffc17 	ldw	r2,-16(fp)
 2019e6c:	e0fffd0b 	ldhu	r3,-12(fp)
 2019e70:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2019e74:	e0bffc17 	ldw	r2,-16(fp)
 2019e78:	e0fffe03 	ldbu	r3,-8(fp)
 2019e7c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 2019e80:	d0e7ad17 	ldw	r3,-24908(gp)
 2019e84:	e0bffc17 	ldw	r2,-16(fp)
 2019e88:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2019e8c:	e0bffb17 	ldw	r2,-20(fp)
 2019e90:	10c00117 	ldw	r3,4(r2)
 2019e94:	e0bffc17 	ldw	r2,-16(fp)
 2019e98:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2019e9c:	e0bffc17 	ldw	r2,-16(fp)
 2019ea0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 2019ea4:	e0bffc17 	ldw	r2,-16(fp)
 2019ea8:	e0fffb17 	ldw	r3,-20(fp)
 2019eac:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2019eb0:	e0bffb17 	ldw	r2,-20(fp)
 2019eb4:	10800117 	ldw	r2,4(r2)
 2019eb8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 2019ebc:	e0bff917 	ldw	r2,-28(fp)
 2019ec0:	10000326 	beq	r2,zero,2019ed0 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 2019ec4:	e0bff917 	ldw	r2,-28(fp)
 2019ec8:	e0fffc17 	ldw	r3,-16(fp)
 2019ecc:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 2019ed0:	e0bffb17 	ldw	r2,-20(fp)
 2019ed4:	e0fffc17 	ldw	r3,-16(fp)
 2019ed8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 2019edc:	d0a7ad17 	ldw	r2,-24908(gp)
 2019ee0:	10800d03 	ldbu	r2,52(r2)
 2019ee4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2019ee8:	e0fffa03 	ldbu	r3,-24(fp)
 2019eec:	e13ffa03 	ldbu	r4,-24(fp)
 2019ef0:	d0a7aa44 	addi	r2,gp,-24919
 2019ef4:	2085883a 	add	r2,r4,r2
 2019ef8:	10800003 	ldbu	r2,0(r2)
 2019efc:	1009883a 	mov	r4,r2
 2019f00:	d0a7ad17 	ldw	r2,-24908(gp)
 2019f04:	10800d43 	ldbu	r2,53(r2)
 2019f08:	0084303a 	nor	r2,zero,r2
 2019f0c:	2084703a 	and	r2,r4,r2
 2019f10:	1009883a 	mov	r4,r2
 2019f14:	d0a7aa44 	addi	r2,gp,-24919
 2019f18:	1885883a 	add	r2,r3,r2
 2019f1c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2019f20:	e0fffa03 	ldbu	r3,-24(fp)
 2019f24:	d0a7aa44 	addi	r2,gp,-24919
 2019f28:	1885883a 	add	r2,r3,r2
 2019f2c:	10800003 	ldbu	r2,0(r2)
 2019f30:	10803fcc 	andi	r2,r2,255
 2019f34:	1000071e 	bne	r2,zero,2019f54 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2019f38:	d0a7ad17 	ldw	r2,-24908(gp)
 2019f3c:	10800d83 	ldbu	r2,54(r2)
 2019f40:	0084303a 	nor	r2,zero,r2
 2019f44:	1007883a 	mov	r3,r2
 2019f48:	d0a7aa03 	ldbu	r2,-24920(gp)
 2019f4c:	1884703a 	and	r2,r3,r2
 2019f50:	d0a7aa05 	stb	r2,-24920(gp)
    }
}
 2019f54:	0001883a 	nop
 2019f58:	e037883a 	mov	sp,fp
 2019f5c:	df000017 	ldw	fp,0(sp)
 2019f60:	dec00104 	addi	sp,sp,4
 2019f64:	f800283a 	ret

02019f68 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 2019f68:	defffb04 	addi	sp,sp,-20
 2019f6c:	dfc00415 	stw	ra,16(sp)
 2019f70:	df000315 	stw	fp,12(sp)
 2019f74:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 2019f78:	0140dc04 	movi	r5,880
 2019f7c:	010080f4 	movhi	r4,515
 2019f80:	212e4e04 	addi	r4,r4,-18120
 2019f84:	20181ac0 	call	20181ac <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 2019f88:	008080f4 	movhi	r2,515
 2019f8c:	10ae4e04 	addi	r2,r2,-18120
 2019f90:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 2019f94:	008080f4 	movhi	r2,515
 2019f98:	10ae5904 	addi	r2,r2,-18076
 2019f9c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2019fa0:	e03ffd0d 	sth	zero,-12(fp)
 2019fa4:	00001306 	br	2019ff4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2019fa8:	e0bffe17 	ldw	r2,-8(fp)
 2019fac:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 2019fb0:	e0bffe17 	ldw	r2,-8(fp)
 2019fb4:	e0ffff17 	ldw	r3,-4(fp)
 2019fb8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 2019fbc:	e0bffe17 	ldw	r2,-8(fp)
 2019fc0:	00c00fc4 	movi	r3,63
 2019fc4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2019fc8:	e0bffe17 	ldw	r2,-8(fp)
 2019fcc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 2019fd0:	e0bffe17 	ldw	r2,-8(fp)
 2019fd4:	10800b04 	addi	r2,r2,44
 2019fd8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2019fdc:	e0bfff17 	ldw	r2,-4(fp)
 2019fe0:	10800b04 	addi	r2,r2,44
 2019fe4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2019fe8:	e0bffd0b 	ldhu	r2,-12(fp)
 2019fec:	10800044 	addi	r2,r2,1
 2019ff0:	e0bffd0d 	sth	r2,-12(fp)
 2019ff4:	e0bffd0b 	ldhu	r2,-12(fp)
 2019ff8:	108004f0 	cmpltui	r2,r2,19
 2019ffc:	103fea1e 	bne	r2,zero,2019fa8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201a000:	e0bffe17 	ldw	r2,-8(fp)
 201a004:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 201a008:	e0bffe17 	ldw	r2,-8(fp)
 201a00c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 201a010:	e0bffe17 	ldw	r2,-8(fp)
 201a014:	00c00fc4 	movi	r3,63
 201a018:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201a01c:	e0bffe17 	ldw	r2,-8(fp)
 201a020:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 201a024:	008080f4 	movhi	r2,515
 201a028:	10ae4e04 	addi	r2,r2,-18120
 201a02c:	d0a7af15 	stw	r2,-24900(gp)
#endif
}
 201a030:	0001883a 	nop
 201a034:	e037883a 	mov	sp,fp
 201a038:	dfc00117 	ldw	ra,4(sp)
 201a03c:	df000017 	ldw	fp,0(sp)
 201a040:	dec00204 	addi	sp,sp,8
 201a044:	f800283a 	ret

0201a048 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 201a048:	defffa04 	addi	sp,sp,-24
 201a04c:	dfc00515 	stw	ra,20(sp)
 201a050:	df000415 	stw	fp,16(sp)
 201a054:	df000404 	addi	fp,sp,16
 201a058:	e13ffe15 	stw	r4,-8(fp)
 201a05c:	2805883a 	mov	r2,r5
 201a060:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 201a064:	e0bffe17 	ldw	r2,-8(fp)
 201a068:	10800217 	ldw	r2,8(r2)
 201a06c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 201a070:	e0bffd17 	ldw	r2,-12(fp)
 201a074:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 201a078:	e0bffd17 	ldw	r2,-12(fp)
 201a07c:	e0ffff0b 	ldhu	r3,-4(fp)
 201a080:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 201a084:	e0bffd17 	ldw	r2,-12(fp)
 201a088:	10c00c03 	ldbu	r3,48(r2)
 201a08c:	00bff7c4 	movi	r2,-33
 201a090:	1884703a 	and	r2,r3,r2
 201a094:	1007883a 	mov	r3,r2
 201a098:	e0bffd17 	ldw	r2,-12(fp)
 201a09c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 201a0a0:	e0bffd17 	ldw	r2,-12(fp)
 201a0a4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 201a0a8:	e0bffd17 	ldw	r2,-12(fp)
 201a0ac:	10800c03 	ldbu	r2,48(r2)
 201a0b0:	10803fcc 	andi	r2,r2,255
 201a0b4:	1000181e 	bne	r2,zero,201a118 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 201a0b8:	e0bffd17 	ldw	r2,-12(fp)
 201a0bc:	10c00d83 	ldbu	r3,54(r2)
 201a0c0:	d0a7aa03 	ldbu	r2,-24920(gp)
 201a0c4:	1884b03a 	or	r2,r3,r2
 201a0c8:	d0a7aa05 	stb	r2,-24920(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201a0cc:	e0bffd17 	ldw	r2,-12(fp)
 201a0d0:	10800d03 	ldbu	r2,52(r2)
 201a0d4:	10c03fcc 	andi	r3,r2,255
 201a0d8:	e0bffd17 	ldw	r2,-12(fp)
 201a0dc:	10800d03 	ldbu	r2,52(r2)
 201a0e0:	11003fcc 	andi	r4,r2,255
 201a0e4:	d0a7aa44 	addi	r2,gp,-24919
 201a0e8:	2085883a 	add	r2,r4,r2
 201a0ec:	11000003 	ldbu	r4,0(r2)
 201a0f0:	e0bffd17 	ldw	r2,-12(fp)
 201a0f4:	10800d43 	ldbu	r2,53(r2)
 201a0f8:	2084b03a 	or	r2,r4,r2
 201a0fc:	1009883a 	mov	r4,r2
 201a100:	d0a7aa44 	addi	r2,gp,-24919
 201a104:	1885883a 	add	r2,r3,r2
 201a108:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 201a10c:	00800044 	movi	r2,1
 201a110:	e0bffc05 	stb	r2,-16(fp)
 201a114:	00000106 	br	201a11c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 201a118:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 201a11c:	e13ffe17 	ldw	r4,-8(fp)
 201a120:	201a13c0 	call	201a13c <OS_FlagUnlink>
    return (sched);
 201a124:	e0bffc03 	ldbu	r2,-16(fp)
}
 201a128:	e037883a 	mov	sp,fp
 201a12c:	dfc00117 	ldw	ra,4(sp)
 201a130:	df000017 	ldw	fp,0(sp)
 201a134:	dec00204 	addi	sp,sp,8
 201a138:	f800283a 	ret

0201a13c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 201a13c:	defffa04 	addi	sp,sp,-24
 201a140:	df000515 	stw	fp,20(sp)
 201a144:	df000504 	addi	fp,sp,20
 201a148:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 201a14c:	e0bfff17 	ldw	r2,-4(fp)
 201a150:	10800117 	ldw	r2,4(r2)
 201a154:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 201a158:	e0bfff17 	ldw	r2,-4(fp)
 201a15c:	10800017 	ldw	r2,0(r2)
 201a160:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 201a164:	e0bffb17 	ldw	r2,-20(fp)
 201a168:	10000b1e 	bne	r2,zero,201a198 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 201a16c:	e0bfff17 	ldw	r2,-4(fp)
 201a170:	10800317 	ldw	r2,12(r2)
 201a174:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 201a178:	e0bffd17 	ldw	r2,-12(fp)
 201a17c:	e0fffc17 	ldw	r3,-16(fp)
 201a180:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 201a184:	e0bffc17 	ldw	r2,-16(fp)
 201a188:	10000b26 	beq	r2,zero,201a1b8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 201a18c:	e0bffc17 	ldw	r2,-16(fp)
 201a190:	10000115 	stw	zero,4(r2)
 201a194:	00000806 	br	201a1b8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 201a198:	e0bffb17 	ldw	r2,-20(fp)
 201a19c:	e0fffc17 	ldw	r3,-16(fp)
 201a1a0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 201a1a4:	e0bffc17 	ldw	r2,-16(fp)
 201a1a8:	10000326 	beq	r2,zero,201a1b8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 201a1ac:	e0bffc17 	ldw	r2,-16(fp)
 201a1b0:	e0fffb17 	ldw	r3,-20(fp)
 201a1b4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 201a1b8:	e0bfff17 	ldw	r2,-4(fp)
 201a1bc:	10800217 	ldw	r2,8(r2)
 201a1c0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 201a1c4:	e0bffe17 	ldw	r2,-8(fp)
 201a1c8:	10000a15 	stw	zero,40(r2)
#endif
}
 201a1cc:	0001883a 	nop
 201a1d0:	e037883a 	mov	sp,fp
 201a1d4:	df000017 	ldw	fp,0(sp)
 201a1d8:	dec00104 	addi	sp,sp,4
 201a1dc:	f800283a 	ret

0201a1e0 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 201a1e0:	defffa04 	addi	sp,sp,-24
 201a1e4:	df000515 	stw	fp,20(sp)
 201a1e8:	df000504 	addi	fp,sp,20
 201a1ec:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 201a1f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 201a1f4:	e0bfff17 	ldw	r2,-4(fp)
 201a1f8:	1000021e 	bne	r2,zero,201a204 <OSMboxAccept+0x24>
        return ((void *)0);
 201a1fc:	0005883a 	mov	r2,zero
 201a200:	00001906 	br	201a268 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 201a204:	e0bfff17 	ldw	r2,-4(fp)
 201a208:	10800003 	ldbu	r2,0(r2)
 201a20c:	10803fcc 	andi	r2,r2,255
 201a210:	10800060 	cmpeqi	r2,r2,1
 201a214:	1000021e 	bne	r2,zero,201a220 <OSMboxAccept+0x40>
        return ((void *)0);
 201a218:	0005883a 	mov	r2,zero
 201a21c:	00001206 	br	201a268 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a220:	0005303a 	rdctl	r2,status
 201a224:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a228:	e0fffd17 	ldw	r3,-12(fp)
 201a22c:	00bfff84 	movi	r2,-2
 201a230:	1884703a 	and	r2,r3,r2
 201a234:	1001703a 	wrctl	status,r2
  
  return context;
 201a238:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201a23c:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 201a240:	e0bfff17 	ldw	r2,-4(fp)
 201a244:	10800117 	ldw	r2,4(r2)
 201a248:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 201a24c:	e0bfff17 	ldw	r2,-4(fp)
 201a250:	10000115 	stw	zero,4(r2)
 201a254:	e0bffb17 	ldw	r2,-20(fp)
 201a258:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a25c:	e0bffe17 	ldw	r2,-8(fp)
 201a260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 201a264:	e0bffc17 	ldw	r2,-16(fp)
}
 201a268:	e037883a 	mov	sp,fp
 201a26c:	df000017 	ldw	fp,0(sp)
 201a270:	dec00104 	addi	sp,sp,4
 201a274:	f800283a 	ret

0201a278 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 201a278:	defff904 	addi	sp,sp,-28
 201a27c:	dfc00615 	stw	ra,24(sp)
 201a280:	df000515 	stw	fp,20(sp)
 201a284:	df000504 	addi	fp,sp,20
 201a288:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201a28c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201a290:	d0a7ac03 	ldbu	r2,-24912(gp)
 201a294:	10803fcc 	andi	r2,r2,255
 201a298:	10000226 	beq	r2,zero,201a2a4 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 201a29c:	0005883a 	mov	r2,zero
 201a2a0:	00002506 	br	201a338 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a2a4:	0005303a 	rdctl	r2,status
 201a2a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a2ac:	e0fffe17 	ldw	r3,-8(fp)
 201a2b0:	00bfff84 	movi	r2,-2
 201a2b4:	1884703a 	and	r2,r3,r2
 201a2b8:	1001703a 	wrctl	status,r2
  
  return context;
 201a2bc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201a2c0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201a2c4:	d0a7ab17 	ldw	r2,-24916(gp)
 201a2c8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201a2cc:	d0a7ab17 	ldw	r2,-24916(gp)
 201a2d0:	10000326 	beq	r2,zero,201a2e0 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201a2d4:	d0a7ab17 	ldw	r2,-24916(gp)
 201a2d8:	10800117 	ldw	r2,4(r2)
 201a2dc:	d0a7ab15 	stw	r2,-24916(gp)
 201a2e0:	e0bffb17 	ldw	r2,-20(fp)
 201a2e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a2e8:	e0bffc17 	ldw	r2,-16(fp)
 201a2ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 201a2f0:	e0bffd17 	ldw	r2,-12(fp)
 201a2f4:	10000f26 	beq	r2,zero,201a334 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 201a2f8:	e0bffd17 	ldw	r2,-12(fp)
 201a2fc:	00c00044 	movi	r3,1
 201a300:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 201a304:	e0bffd17 	ldw	r2,-12(fp)
 201a308:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 201a30c:	e0bffd17 	ldw	r2,-12(fp)
 201a310:	e0ffff17 	ldw	r3,-4(fp)
 201a314:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 201a318:	e0bffd17 	ldw	r2,-12(fp)
 201a31c:	00c00fc4 	movi	r3,63
 201a320:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201a324:	e0bffd17 	ldw	r2,-12(fp)
 201a328:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 201a32c:	e13ffd17 	ldw	r4,-12(fp)
 201a330:	2017dcc0 	call	2017dcc <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 201a334:	e0bffd17 	ldw	r2,-12(fp)
}
 201a338:	e037883a 	mov	sp,fp
 201a33c:	dfc00117 	ldw	ra,4(sp)
 201a340:	df000017 	ldw	fp,0(sp)
 201a344:	dec00204 	addi	sp,sp,8
 201a348:	f800283a 	ret

0201a34c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201a34c:	defff304 	addi	sp,sp,-52
 201a350:	dfc00c15 	stw	ra,48(sp)
 201a354:	df000b15 	stw	fp,44(sp)
 201a358:	df000b04 	addi	fp,sp,44
 201a35c:	e13ffd15 	stw	r4,-12(fp)
 201a360:	2805883a 	mov	r2,r5
 201a364:	e1bfff15 	stw	r6,-4(fp)
 201a368:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201a36c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201a370:	e0bfff17 	ldw	r2,-4(fp)
 201a374:	1000021e 	bne	r2,zero,201a380 <OSMboxDel+0x34>
        return (pevent);
 201a378:	e0bffd17 	ldw	r2,-12(fp)
 201a37c:	00007e06 	br	201a578 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201a380:	e0bffd17 	ldw	r2,-12(fp)
 201a384:	1000051e 	bne	r2,zero,201a39c <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201a388:	e0bfff17 	ldw	r2,-4(fp)
 201a38c:	00c00104 	movi	r3,4
 201a390:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201a394:	e0bffd17 	ldw	r2,-12(fp)
 201a398:	00007706 	br	201a578 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201a39c:	e0bffd17 	ldw	r2,-12(fp)
 201a3a0:	10800003 	ldbu	r2,0(r2)
 201a3a4:	10803fcc 	andi	r2,r2,255
 201a3a8:	10800060 	cmpeqi	r2,r2,1
 201a3ac:	1000051e 	bne	r2,zero,201a3c4 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201a3b0:	e0bfff17 	ldw	r2,-4(fp)
 201a3b4:	00c00044 	movi	r3,1
 201a3b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201a3bc:	e0bffd17 	ldw	r2,-12(fp)
 201a3c0:	00006d06 	br	201a578 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201a3c4:	d0a7ac03 	ldbu	r2,-24912(gp)
 201a3c8:	10803fcc 	andi	r2,r2,255
 201a3cc:	10000526 	beq	r2,zero,201a3e4 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201a3d0:	e0bfff17 	ldw	r2,-4(fp)
 201a3d4:	00c003c4 	movi	r3,15
 201a3d8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201a3dc:	e0bffd17 	ldw	r2,-12(fp)
 201a3e0:	00006506 	br	201a578 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a3e4:	0005303a 	rdctl	r2,status
 201a3e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a3ec:	e0fffc17 	ldw	r3,-16(fp)
 201a3f0:	00bfff84 	movi	r2,-2
 201a3f4:	1884703a 	and	r2,r3,r2
 201a3f8:	1001703a 	wrctl	status,r2
  
  return context;
 201a3fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a400:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 201a404:	e0bffd17 	ldw	r2,-12(fp)
 201a408:	10800283 	ldbu	r2,10(r2)
 201a40c:	10803fcc 	andi	r2,r2,255
 201a410:	10000326 	beq	r2,zero,201a420 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201a414:	00800044 	movi	r2,1
 201a418:	e0bff505 	stb	r2,-44(fp)
 201a41c:	00000106 	br	201a424 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201a420:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201a424:	e0bffe03 	ldbu	r2,-8(fp)
 201a428:	10000326 	beq	r2,zero,201a438 <OSMboxDel+0xec>
 201a42c:	10800060 	cmpeqi	r2,r2,1
 201a430:	1000281e 	bne	r2,zero,201a4d4 <OSMboxDel+0x188>
 201a434:	00004506 	br	201a54c <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 201a438:	e0bff503 	ldbu	r2,-44(fp)
 201a43c:	1000161e 	bne	r2,zero,201a498 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201a440:	e0bffd17 	ldw	r2,-12(fp)
 201a444:	00c00fc4 	movi	r3,63
 201a448:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201a44c:	e0bffd17 	ldw	r2,-12(fp)
 201a450:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 201a454:	e0bffd17 	ldw	r2,-12(fp)
 201a458:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 201a45c:	d0e7ab17 	ldw	r3,-24916(gp)
 201a460:	e0bffd17 	ldw	r2,-12(fp)
 201a464:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 201a468:	e0bffd17 	ldw	r2,-12(fp)
 201a46c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 201a470:	e0bffd17 	ldw	r2,-12(fp)
 201a474:	d0a7ab15 	stw	r2,-24916(gp)
 201a478:	e0bff717 	ldw	r2,-36(fp)
 201a47c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a480:	e0bff817 	ldw	r2,-32(fp)
 201a484:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 201a488:	e0bfff17 	ldw	r2,-4(fp)
 201a48c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 201a490:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 201a494:	00003706 	br	201a574 <OSMboxDel+0x228>
 201a498:	e0bff717 	ldw	r2,-36(fp)
 201a49c:	e0bff915 	stw	r2,-28(fp)
 201a4a0:	e0bff917 	ldw	r2,-28(fp)
 201a4a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 201a4a8:	e0bfff17 	ldw	r2,-4(fp)
 201a4ac:	00c01244 	movi	r3,73
 201a4b0:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 201a4b4:	e0bffd17 	ldw	r2,-12(fp)
 201a4b8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201a4bc:	00002d06 	br	201a574 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201a4c0:	000f883a 	mov	r7,zero
 201a4c4:	01800084 	movi	r6,2
 201a4c8:	000b883a 	mov	r5,zero
 201a4cc:	e13ffd17 	ldw	r4,-12(fp)
 201a4d0:	201781c0 	call	201781c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 201a4d4:	e0bffd17 	ldw	r2,-12(fp)
 201a4d8:	10800283 	ldbu	r2,10(r2)
 201a4dc:	10803fcc 	andi	r2,r2,255
 201a4e0:	103ff71e 	bne	r2,zero,201a4c0 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201a4e4:	e0bffd17 	ldw	r2,-12(fp)
 201a4e8:	00c00fc4 	movi	r3,63
 201a4ec:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201a4f0:	e0bffd17 	ldw	r2,-12(fp)
 201a4f4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201a4f8:	e0bffd17 	ldw	r2,-12(fp)
 201a4fc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201a500:	d0e7ab17 	ldw	r3,-24916(gp)
 201a504:	e0bffd17 	ldw	r2,-12(fp)
 201a508:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201a50c:	e0bffd17 	ldw	r2,-12(fp)
 201a510:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201a514:	e0bffd17 	ldw	r2,-12(fp)
 201a518:	d0a7ab15 	stw	r2,-24916(gp)
 201a51c:	e0bff717 	ldw	r2,-36(fp)
 201a520:	e0bffa15 	stw	r2,-24(fp)
 201a524:	e0bffa17 	ldw	r2,-24(fp)
 201a528:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201a52c:	e0bff503 	ldbu	r2,-44(fp)
 201a530:	10800058 	cmpnei	r2,r2,1
 201a534:	1000011e 	bne	r2,zero,201a53c <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201a538:	20182680 	call	2018268 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 201a53c:	e0bfff17 	ldw	r2,-4(fp)
 201a540:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 201a544:	e03ff615 	stw	zero,-40(fp)
             break;
 201a548:	00000a06 	br	201a574 <OSMboxDel+0x228>
 201a54c:	e0bff717 	ldw	r2,-36(fp)
 201a550:	e0bffb15 	stw	r2,-20(fp)
 201a554:	e0bffb17 	ldw	r2,-20(fp)
 201a558:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 201a55c:	e0bfff17 	ldw	r2,-4(fp)
 201a560:	00c001c4 	movi	r3,7
 201a564:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 201a568:	e0bffd17 	ldw	r2,-12(fp)
 201a56c:	e0bff615 	stw	r2,-40(fp)
             break;
 201a570:	0001883a 	nop
    }
    return (pevent_return);
 201a574:	e0bff617 	ldw	r2,-40(fp)
}
 201a578:	e037883a 	mov	sp,fp
 201a57c:	dfc00117 	ldw	ra,4(sp)
 201a580:	df000017 	ldw	fp,0(sp)
 201a584:	dec00204 	addi	sp,sp,8
 201a588:	f800283a 	ret

0201a58c <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201a58c:	defff404 	addi	sp,sp,-48
 201a590:	dfc00b15 	stw	ra,44(sp)
 201a594:	df000a15 	stw	fp,40(sp)
 201a598:	df000a04 	addi	fp,sp,40
 201a59c:	e13ffd15 	stw	r4,-12(fp)
 201a5a0:	2805883a 	mov	r2,r5
 201a5a4:	e1bfff15 	stw	r6,-4(fp)
 201a5a8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a5ac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201a5b0:	e0bfff17 	ldw	r2,-4(fp)
 201a5b4:	1000021e 	bne	r2,zero,201a5c0 <OSMboxPend+0x34>
        return ((void *)0);
 201a5b8:	0005883a 	mov	r2,zero
 201a5bc:	00007b06 	br	201a7ac <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a5c0:	e0bffd17 	ldw	r2,-12(fp)
 201a5c4:	1000051e 	bne	r2,zero,201a5dc <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201a5c8:	e0bfff17 	ldw	r2,-4(fp)
 201a5cc:	00c00104 	movi	r3,4
 201a5d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201a5d4:	0005883a 	mov	r2,zero
 201a5d8:	00007406 	br	201a7ac <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201a5dc:	e0bffd17 	ldw	r2,-12(fp)
 201a5e0:	10800003 	ldbu	r2,0(r2)
 201a5e4:	10803fcc 	andi	r2,r2,255
 201a5e8:	10800060 	cmpeqi	r2,r2,1
 201a5ec:	1000051e 	bne	r2,zero,201a604 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201a5f0:	e0bfff17 	ldw	r2,-4(fp)
 201a5f4:	00c00044 	movi	r3,1
 201a5f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201a5fc:	0005883a 	mov	r2,zero
 201a600:	00006a06 	br	201a7ac <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201a604:	d0a7ac03 	ldbu	r2,-24912(gp)
 201a608:	10803fcc 	andi	r2,r2,255
 201a60c:	10000526 	beq	r2,zero,201a624 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201a610:	e0bfff17 	ldw	r2,-4(fp)
 201a614:	00c00084 	movi	r3,2
 201a618:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201a61c:	0005883a 	mov	r2,zero
 201a620:	00006206 	br	201a7ac <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201a624:	d0a79e03 	ldbu	r2,-24968(gp)
 201a628:	10803fcc 	andi	r2,r2,255
 201a62c:	10000526 	beq	r2,zero,201a644 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201a630:	e0bfff17 	ldw	r2,-4(fp)
 201a634:	00c00344 	movi	r3,13
 201a638:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201a63c:	0005883a 	mov	r2,zero
 201a640:	00005a06 	br	201a7ac <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a644:	0005303a 	rdctl	r2,status
 201a648:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a64c:	e0fffc17 	ldw	r3,-16(fp)
 201a650:	00bfff84 	movi	r2,-2
 201a654:	1884703a 	and	r2,r3,r2
 201a658:	1001703a 	wrctl	status,r2
  
  return context;
 201a65c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a660:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 201a664:	e0bffd17 	ldw	r2,-12(fp)
 201a668:	10800117 	ldw	r2,4(r2)
 201a66c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 201a670:	e0bff617 	ldw	r2,-40(fp)
 201a674:	10000a26 	beq	r2,zero,201a6a0 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 201a678:	e0bffd17 	ldw	r2,-12(fp)
 201a67c:	10000115 	stw	zero,4(r2)
 201a680:	e0bff717 	ldw	r2,-36(fp)
 201a684:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a688:	e0bff817 	ldw	r2,-32(fp)
 201a68c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201a690:	e0bfff17 	ldw	r2,-4(fp)
 201a694:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 201a698:	e0bff617 	ldw	r2,-40(fp)
 201a69c:	00004306 	br	201a7ac <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 201a6a0:	d0a7ad17 	ldw	r2,-24908(gp)
 201a6a4:	d0e7ad17 	ldw	r3,-24908(gp)
 201a6a8:	18c00c03 	ldbu	r3,48(r3)
 201a6ac:	18c00094 	ori	r3,r3,2
 201a6b0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201a6b4:	d0a7ad17 	ldw	r2,-24908(gp)
 201a6b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 201a6bc:	d0a7ad17 	ldw	r2,-24908(gp)
 201a6c0:	e0fffe0b 	ldhu	r3,-8(fp)
 201a6c4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201a6c8:	e13ffd17 	ldw	r4,-12(fp)
 201a6cc:	20179b40 	call	20179b4 <OS_EventTaskWait>
 201a6d0:	e0bff717 	ldw	r2,-36(fp)
 201a6d4:	e0bffb15 	stw	r2,-20(fp)
 201a6d8:	e0bffb17 	ldw	r2,-20(fp)
 201a6dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 201a6e0:	20182680 	call	2018268 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a6e4:	0005303a 	rdctl	r2,status
 201a6e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a6ec:	e0fff917 	ldw	r3,-28(fp)
 201a6f0:	00bfff84 	movi	r2,-2
 201a6f4:	1884703a 	and	r2,r3,r2
 201a6f8:	1001703a 	wrctl	status,r2
  
  return context;
 201a6fc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201a700:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201a704:	d0a7ad17 	ldw	r2,-24908(gp)
 201a708:	10800c43 	ldbu	r2,49(r2)
 201a70c:	10803fcc 	andi	r2,r2,255
 201a710:	10000326 	beq	r2,zero,201a720 <OSMboxPend+0x194>
 201a714:	108000a0 	cmpeqi	r2,r2,2
 201a718:	1000071e 	bne	r2,zero,201a738 <OSMboxPend+0x1ac>
 201a71c:	00000b06 	br	201a74c <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 201a720:	d0a7ad17 	ldw	r2,-24908(gp)
 201a724:	10800917 	ldw	r2,36(r2)
 201a728:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 201a72c:	e0bfff17 	ldw	r2,-4(fp)
 201a730:	10000005 	stb	zero,0(r2)
             break;
 201a734:	00000e06 	br	201a770 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201a738:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201a73c:	e0bfff17 	ldw	r2,-4(fp)
 201a740:	00c00384 	movi	r3,14
 201a744:	10c00005 	stb	r3,0(r2)
             break;
 201a748:	00000906 	br	201a770 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201a74c:	d0a7ad17 	ldw	r2,-24908(gp)
 201a750:	e17ffd17 	ldw	r5,-12(fp)
 201a754:	1009883a 	mov	r4,r2
 201a758:	2017c140 	call	2017c14 <OS_EventTaskRemove>
             pmsg = (void *)0;
 201a75c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201a760:	e0bfff17 	ldw	r2,-4(fp)
 201a764:	00c00284 	movi	r3,10
 201a768:	10c00005 	stb	r3,0(r2)
             break;
 201a76c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201a770:	d0a7ad17 	ldw	r2,-24908(gp)
 201a774:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201a778:	d0a7ad17 	ldw	r2,-24908(gp)
 201a77c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201a780:	d0a7ad17 	ldw	r2,-24908(gp)
 201a784:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201a788:	d0a7ad17 	ldw	r2,-24908(gp)
 201a78c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201a790:	d0a7ad17 	ldw	r2,-24908(gp)
 201a794:	10000915 	stw	zero,36(r2)
 201a798:	e0bff717 	ldw	r2,-36(fp)
 201a79c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a7a0:	e0bffa17 	ldw	r2,-24(fp)
 201a7a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201a7a8:	e0bff617 	ldw	r2,-40(fp)
}
 201a7ac:	e037883a 	mov	sp,fp
 201a7b0:	dfc00117 	ldw	ra,4(sp)
 201a7b4:	df000017 	ldw	fp,0(sp)
 201a7b8:	dec00204 	addi	sp,sp,8
 201a7bc:	f800283a 	ret

0201a7c0 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201a7c0:	defff604 	addi	sp,sp,-40
 201a7c4:	dfc00915 	stw	ra,36(sp)
 201a7c8:	df000815 	stw	fp,32(sp)
 201a7cc:	df000804 	addi	fp,sp,32
 201a7d0:	e13ffd15 	stw	r4,-12(fp)
 201a7d4:	2805883a 	mov	r2,r5
 201a7d8:	e1bfff15 	stw	r6,-4(fp)
 201a7dc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201a7e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201a7e4:	e0bfff17 	ldw	r2,-4(fp)
 201a7e8:	1000021e 	bne	r2,zero,201a7f4 <OSMboxPendAbort+0x34>
        return (0);
 201a7ec:	0005883a 	mov	r2,zero
 201a7f0:	00004906 	br	201a918 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201a7f4:	e0bffd17 	ldw	r2,-12(fp)
 201a7f8:	1000051e 	bne	r2,zero,201a810 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201a7fc:	e0bfff17 	ldw	r2,-4(fp)
 201a800:	00c00104 	movi	r3,4
 201a804:	10c00005 	stb	r3,0(r2)
        return (0);
 201a808:	0005883a 	mov	r2,zero
 201a80c:	00004206 	br	201a918 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201a810:	e0bffd17 	ldw	r2,-12(fp)
 201a814:	10800003 	ldbu	r2,0(r2)
 201a818:	10803fcc 	andi	r2,r2,255
 201a81c:	10800060 	cmpeqi	r2,r2,1
 201a820:	1000051e 	bne	r2,zero,201a838 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201a824:	e0bfff17 	ldw	r2,-4(fp)
 201a828:	00c00044 	movi	r3,1
 201a82c:	10c00005 	stb	r3,0(r2)
        return (0);
 201a830:	0005883a 	mov	r2,zero
 201a834:	00003806 	br	201a918 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a838:	0005303a 	rdctl	r2,status
 201a83c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a840:	e0fffc17 	ldw	r3,-16(fp)
 201a844:	00bfff84 	movi	r2,-2
 201a848:	1884703a 	and	r2,r3,r2
 201a84c:	1001703a 	wrctl	status,r2
  
  return context;
 201a850:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a854:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 201a858:	e0bffd17 	ldw	r2,-12(fp)
 201a85c:	10800283 	ldbu	r2,10(r2)
 201a860:	10803fcc 	andi	r2,r2,255
 201a864:	10002526 	beq	r2,zero,201a8fc <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 201a868:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201a86c:	e0bffe03 	ldbu	r2,-8(fp)
 201a870:	10800060 	cmpeqi	r2,r2,1
 201a874:	10000e26 	beq	r2,zero,201a8b0 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 201a878:	00000806 	br	201a89c <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 201a87c:	01c00084 	movi	r7,2
 201a880:	01800084 	movi	r6,2
 201a884:	000b883a 	mov	r5,zero
 201a888:	e13ffd17 	ldw	r4,-12(fp)
 201a88c:	201781c0 	call	201781c <OS_EventTaskRdy>
                     nbr_tasks++;
 201a890:	e0bff803 	ldbu	r2,-32(fp)
 201a894:	10800044 	addi	r2,r2,1
 201a898:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 201a89c:	e0bffd17 	ldw	r2,-12(fp)
 201a8a0:	10800283 	ldbu	r2,10(r2)
 201a8a4:	10803fcc 	andi	r2,r2,255
 201a8a8:	103ff41e 	bne	r2,zero,201a87c <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201a8ac:	00000906 	br	201a8d4 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 201a8b0:	01c00084 	movi	r7,2
 201a8b4:	01800084 	movi	r6,2
 201a8b8:	000b883a 	mov	r5,zero
 201a8bc:	e13ffd17 	ldw	r4,-12(fp)
 201a8c0:	201781c0 	call	201781c <OS_EventTaskRdy>
                 nbr_tasks++;
 201a8c4:	e0bff803 	ldbu	r2,-32(fp)
 201a8c8:	10800044 	addi	r2,r2,1
 201a8cc:	e0bff805 	stb	r2,-32(fp)
                 break;
 201a8d0:	0001883a 	nop
 201a8d4:	e0bff917 	ldw	r2,-28(fp)
 201a8d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a8dc:	e0bffa17 	ldw	r2,-24(fp)
 201a8e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 201a8e4:	20182680 	call	2018268 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201a8e8:	e0bfff17 	ldw	r2,-4(fp)
 201a8ec:	00c00384 	movi	r3,14
 201a8f0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201a8f4:	e0bff803 	ldbu	r2,-32(fp)
 201a8f8:	00000706 	br	201a918 <OSMboxPendAbort+0x158>
 201a8fc:	e0bff917 	ldw	r2,-28(fp)
 201a900:	e0bffb15 	stw	r2,-20(fp)
 201a904:	e0bffb17 	ldw	r2,-20(fp)
 201a908:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201a90c:	e0bfff17 	ldw	r2,-4(fp)
 201a910:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 201a914:	0005883a 	mov	r2,zero
}
 201a918:	e037883a 	mov	sp,fp
 201a91c:	dfc00117 	ldw	ra,4(sp)
 201a920:	df000017 	ldw	fp,0(sp)
 201a924:	dec00204 	addi	sp,sp,8
 201a928:	f800283a 	ret

0201a92c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 201a92c:	defff704 	addi	sp,sp,-36
 201a930:	dfc00815 	stw	ra,32(sp)
 201a934:	df000715 	stw	fp,28(sp)
 201a938:	df000704 	addi	fp,sp,28
 201a93c:	e13ffe15 	stw	r4,-8(fp)
 201a940:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a944:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a948:	e0bffe17 	ldw	r2,-8(fp)
 201a94c:	1000021e 	bne	r2,zero,201a958 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201a950:	00800104 	movi	r2,4
 201a954:	00003406 	br	201aa28 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201a958:	e0bfff17 	ldw	r2,-4(fp)
 201a95c:	1000021e 	bne	r2,zero,201a968 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 201a960:	008000c4 	movi	r2,3
 201a964:	00003006 	br	201aa28 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201a968:	e0bffe17 	ldw	r2,-8(fp)
 201a96c:	10800003 	ldbu	r2,0(r2)
 201a970:	10803fcc 	andi	r2,r2,255
 201a974:	10800060 	cmpeqi	r2,r2,1
 201a978:	1000021e 	bne	r2,zero,201a984 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 201a97c:	00800044 	movi	r2,1
 201a980:	00002906 	br	201aa28 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a984:	0005303a 	rdctl	r2,status
 201a988:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a98c:	e0fffd17 	ldw	r3,-12(fp)
 201a990:	00bfff84 	movi	r2,-2
 201a994:	1884703a 	and	r2,r3,r2
 201a998:	1001703a 	wrctl	status,r2
  
  return context;
 201a99c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201a9a0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 201a9a4:	e0bffe17 	ldw	r2,-8(fp)
 201a9a8:	10800283 	ldbu	r2,10(r2)
 201a9ac:	10803fcc 	andi	r2,r2,255
 201a9b0:	10000c26 	beq	r2,zero,201a9e4 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201a9b4:	000f883a 	mov	r7,zero
 201a9b8:	01800084 	movi	r6,2
 201a9bc:	e17fff17 	ldw	r5,-4(fp)
 201a9c0:	e13ffe17 	ldw	r4,-8(fp)
 201a9c4:	201781c0 	call	201781c <OS_EventTaskRdy>
 201a9c8:	e0bff917 	ldw	r2,-28(fp)
 201a9cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a9d0:	e0bffa17 	ldw	r2,-24(fp)
 201a9d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201a9d8:	20182680 	call	2018268 <OS_Sched>
        return (OS_ERR_NONE);
 201a9dc:	0005883a 	mov	r2,zero
 201a9e0:	00001106 	br	201aa28 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201a9e4:	e0bffe17 	ldw	r2,-8(fp)
 201a9e8:	10800117 	ldw	r2,4(r2)
 201a9ec:	10000626 	beq	r2,zero,201aa08 <OSMboxPost+0xdc>
 201a9f0:	e0bff917 	ldw	r2,-28(fp)
 201a9f4:	e0bffb15 	stw	r2,-20(fp)
 201a9f8:	e0bffb17 	ldw	r2,-20(fp)
 201a9fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201aa00:	00800504 	movi	r2,20
 201aa04:	00000806 	br	201aa28 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 201aa08:	e0bffe17 	ldw	r2,-8(fp)
 201aa0c:	e0ffff17 	ldw	r3,-4(fp)
 201aa10:	10c00115 	stw	r3,4(r2)
 201aa14:	e0bff917 	ldw	r2,-28(fp)
 201aa18:	e0bffc15 	stw	r2,-16(fp)
 201aa1c:	e0bffc17 	ldw	r2,-16(fp)
 201aa20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201aa24:	0005883a 	mov	r2,zero
}
 201aa28:	e037883a 	mov	sp,fp
 201aa2c:	dfc00117 	ldw	ra,4(sp)
 201aa30:	df000017 	ldw	fp,0(sp)
 201aa34:	dec00204 	addi	sp,sp,8
 201aa38:	f800283a 	ret

0201aa3c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201aa3c:	defff604 	addi	sp,sp,-40
 201aa40:	dfc00915 	stw	ra,36(sp)
 201aa44:	df000815 	stw	fp,32(sp)
 201aa48:	df000804 	addi	fp,sp,32
 201aa4c:	e13ffd15 	stw	r4,-12(fp)
 201aa50:	e17ffe15 	stw	r5,-8(fp)
 201aa54:	3005883a 	mov	r2,r6
 201aa58:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201aa5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201aa60:	e0bffd17 	ldw	r2,-12(fp)
 201aa64:	1000021e 	bne	r2,zero,201aa70 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201aa68:	00800104 	movi	r2,4
 201aa6c:	00004506 	br	201ab84 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201aa70:	e0bffe17 	ldw	r2,-8(fp)
 201aa74:	1000021e 	bne	r2,zero,201aa80 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 201aa78:	008000c4 	movi	r2,3
 201aa7c:	00004106 	br	201ab84 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201aa80:	e0bffd17 	ldw	r2,-12(fp)
 201aa84:	10800003 	ldbu	r2,0(r2)
 201aa88:	10803fcc 	andi	r2,r2,255
 201aa8c:	10800060 	cmpeqi	r2,r2,1
 201aa90:	1000021e 	bne	r2,zero,201aa9c <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 201aa94:	00800044 	movi	r2,1
 201aa98:	00003a06 	br	201ab84 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aa9c:	0005303a 	rdctl	r2,status
 201aaa0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aaa4:	e0fffc17 	ldw	r3,-16(fp)
 201aaa8:	00bfff84 	movi	r2,-2
 201aaac:	1884703a 	and	r2,r3,r2
 201aab0:	1001703a 	wrctl	status,r2
  
  return context;
 201aab4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201aab8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 201aabc:	e0bffd17 	ldw	r2,-12(fp)
 201aac0:	10800283 	ldbu	r2,10(r2)
 201aac4:	10803fcc 	andi	r2,r2,255
 201aac8:	10001d26 	beq	r2,zero,201ab40 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201aacc:	e0bfff03 	ldbu	r2,-4(fp)
 201aad0:	1080004c 	andi	r2,r2,1
 201aad4:	10000b26 	beq	r2,zero,201ab04 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201aad8:	00000506 	br	201aaf0 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201aadc:	000f883a 	mov	r7,zero
 201aae0:	01800084 	movi	r6,2
 201aae4:	e17ffe17 	ldw	r5,-8(fp)
 201aae8:	e13ffd17 	ldw	r4,-12(fp)
 201aaec:	201781c0 	call	201781c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201aaf0:	e0bffd17 	ldw	r2,-12(fp)
 201aaf4:	10800283 	ldbu	r2,10(r2)
 201aaf8:	10803fcc 	andi	r2,r2,255
 201aafc:	103ff71e 	bne	r2,zero,201aadc <OSMboxPostOpt+0xa0>
 201ab00:	00000506 	br	201ab18 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201ab04:	000f883a 	mov	r7,zero
 201ab08:	01800084 	movi	r6,2
 201ab0c:	e17ffe17 	ldw	r5,-8(fp)
 201ab10:	e13ffd17 	ldw	r4,-12(fp)
 201ab14:	201781c0 	call	201781c <OS_EventTaskRdy>
 201ab18:	e0bff817 	ldw	r2,-32(fp)
 201ab1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ab20:	e0bff917 	ldw	r2,-28(fp)
 201ab24:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 201ab28:	e0bfff03 	ldbu	r2,-4(fp)
 201ab2c:	1080010c 	andi	r2,r2,4
 201ab30:	1000011e 	bne	r2,zero,201ab38 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 201ab34:	20182680 	call	2018268 <OS_Sched>
        }
        return (OS_ERR_NONE);
 201ab38:	0005883a 	mov	r2,zero
 201ab3c:	00001106 	br	201ab84 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201ab40:	e0bffd17 	ldw	r2,-12(fp)
 201ab44:	10800117 	ldw	r2,4(r2)
 201ab48:	10000626 	beq	r2,zero,201ab64 <OSMboxPostOpt+0x128>
 201ab4c:	e0bff817 	ldw	r2,-32(fp)
 201ab50:	e0bffa15 	stw	r2,-24(fp)
 201ab54:	e0bffa17 	ldw	r2,-24(fp)
 201ab58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201ab5c:	00800504 	movi	r2,20
 201ab60:	00000806 	br	201ab84 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 201ab64:	e0bffd17 	ldw	r2,-12(fp)
 201ab68:	e0fffe17 	ldw	r3,-8(fp)
 201ab6c:	10c00115 	stw	r3,4(r2)
 201ab70:	e0bff817 	ldw	r2,-32(fp)
 201ab74:	e0bffb15 	stw	r2,-20(fp)
 201ab78:	e0bffb17 	ldw	r2,-20(fp)
 201ab7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ab80:	0005883a 	mov	r2,zero
}
 201ab84:	e037883a 	mov	sp,fp
 201ab88:	dfc00117 	ldw	ra,4(sp)
 201ab8c:	df000017 	ldw	fp,0(sp)
 201ab90:	dec00204 	addi	sp,sp,8
 201ab94:	f800283a 	ret

0201ab98 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 201ab98:	defff704 	addi	sp,sp,-36
 201ab9c:	df000815 	stw	fp,32(sp)
 201aba0:	df000804 	addi	fp,sp,32
 201aba4:	e13ffe15 	stw	r4,-8(fp)
 201aba8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201abac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201abb0:	e0bffe17 	ldw	r2,-8(fp)
 201abb4:	1000021e 	bne	r2,zero,201abc0 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201abb8:	00800104 	movi	r2,4
 201abbc:	00003606 	br	201ac98 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 201abc0:	e0bfff17 	ldw	r2,-4(fp)
 201abc4:	1000021e 	bne	r2,zero,201abd0 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201abc8:	00800244 	movi	r2,9
 201abcc:	00003206 	br	201ac98 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201abd0:	e0bffe17 	ldw	r2,-8(fp)
 201abd4:	10800003 	ldbu	r2,0(r2)
 201abd8:	10803fcc 	andi	r2,r2,255
 201abdc:	10800060 	cmpeqi	r2,r2,1
 201abe0:	1000021e 	bne	r2,zero,201abec <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201abe4:	00800044 	movi	r2,1
 201abe8:	00002b06 	br	201ac98 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201abec:	0005303a 	rdctl	r2,status
 201abf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201abf4:	e0fffd17 	ldw	r3,-12(fp)
 201abf8:	00bfff84 	movi	r2,-2
 201abfc:	1884703a 	and	r2,r3,r2
 201ac00:	1001703a 	wrctl	status,r2
  
  return context;
 201ac04:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201ac08:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 201ac0c:	e0bffe17 	ldw	r2,-8(fp)
 201ac10:	10c00283 	ldbu	r3,10(r2)
 201ac14:	e0bfff17 	ldw	r2,-4(fp)
 201ac18:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 201ac1c:	e0bffe17 	ldw	r2,-8(fp)
 201ac20:	108002c4 	addi	r2,r2,11
 201ac24:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 201ac28:	e0bfff17 	ldw	r2,-4(fp)
 201ac2c:	10800104 	addi	r2,r2,4
 201ac30:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201ac34:	e03ff805 	stb	zero,-32(fp)
 201ac38:	00000b06 	br	201ac68 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 201ac3c:	e0bffa17 	ldw	r2,-24(fp)
 201ac40:	10c00044 	addi	r3,r2,1
 201ac44:	e0fffa15 	stw	r3,-24(fp)
 201ac48:	e0fff917 	ldw	r3,-28(fp)
 201ac4c:	19000044 	addi	r4,r3,1
 201ac50:	e13ff915 	stw	r4,-28(fp)
 201ac54:	18c00003 	ldbu	r3,0(r3)
 201ac58:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201ac5c:	e0bff803 	ldbu	r2,-32(fp)
 201ac60:	10800044 	addi	r2,r2,1
 201ac64:	e0bff805 	stb	r2,-32(fp)
 201ac68:	e0bff803 	ldbu	r2,-32(fp)
 201ac6c:	108000f0 	cmpltui	r2,r2,3
 201ac70:	103ff21e 	bne	r2,zero,201ac3c <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 201ac74:	e0bffe17 	ldw	r2,-8(fp)
 201ac78:	10c00117 	ldw	r3,4(r2)
 201ac7c:	e0bfff17 	ldw	r2,-4(fp)
 201ac80:	10c00015 	stw	r3,0(r2)
 201ac84:	e0bffb17 	ldw	r2,-20(fp)
 201ac88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ac8c:	e0bffc17 	ldw	r2,-16(fp)
 201ac90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ac94:	0005883a 	mov	r2,zero
}
 201ac98:	e037883a 	mov	sp,fp
 201ac9c:	df000017 	ldw	fp,0(sp)
 201aca0:	dec00104 	addi	sp,sp,4
 201aca4:	f800283a 	ret

0201aca8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 201aca8:	defff404 	addi	sp,sp,-48
 201acac:	df000b15 	stw	fp,44(sp)
 201acb0:	df000b04 	addi	fp,sp,44
 201acb4:	e13ffc15 	stw	r4,-16(fp)
 201acb8:	e17ffd15 	stw	r5,-12(fp)
 201acbc:	e1bffe15 	stw	r6,-8(fp)
 201acc0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201acc4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201acc8:	e0bfff17 	ldw	r2,-4(fp)
 201accc:	1000021e 	bne	r2,zero,201acd8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 201acd0:	0005883a 	mov	r2,zero
 201acd4:	00006506 	br	201ae6c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 201acd8:	e0bffc17 	ldw	r2,-16(fp)
 201acdc:	1000051e 	bne	r2,zero,201acf4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201ace0:	e0bfff17 	ldw	r2,-4(fp)
 201ace4:	00c01884 	movi	r3,98
 201ace8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201acec:	0005883a 	mov	r2,zero
 201acf0:	00005e06 	br	201ae6c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 201acf4:	e0bffc17 	ldw	r2,-16(fp)
 201acf8:	108000cc 	andi	r2,r2,3
 201acfc:	10000526 	beq	r2,zero,201ad14 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201ad00:	e0bfff17 	ldw	r2,-4(fp)
 201ad04:	00c01884 	movi	r3,98
 201ad08:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201ad0c:	0005883a 	mov	r2,zero
 201ad10:	00005606 	br	201ae6c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 201ad14:	e0bffd17 	ldw	r2,-12(fp)
 201ad18:	108000a8 	cmpgeui	r2,r2,2
 201ad1c:	1000051e 	bne	r2,zero,201ad34 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 201ad20:	e0bfff17 	ldw	r2,-4(fp)
 201ad24:	00c016c4 	movi	r3,91
 201ad28:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201ad2c:	0005883a 	mov	r2,zero
 201ad30:	00004e06 	br	201ae6c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 201ad34:	e0bffe17 	ldw	r2,-8(fp)
 201ad38:	10800128 	cmpgeui	r2,r2,4
 201ad3c:	1000051e 	bne	r2,zero,201ad54 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 201ad40:	e0bfff17 	ldw	r2,-4(fp)
 201ad44:	00c01704 	movi	r3,92
 201ad48:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201ad4c:	0005883a 	mov	r2,zero
 201ad50:	00004606 	br	201ae6c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ad54:	0005303a 	rdctl	r2,status
 201ad58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ad5c:	e0fffb17 	ldw	r3,-20(fp)
 201ad60:	00bfff84 	movi	r2,-2
 201ad64:	1884703a 	and	r2,r3,r2
 201ad68:	1001703a 	wrctl	status,r2
  
  return context;
 201ad6c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201ad70:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 201ad74:	d0a7a717 	ldw	r2,-24932(gp)
 201ad78:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 201ad7c:	d0a7a717 	ldw	r2,-24932(gp)
 201ad80:	10000326 	beq	r2,zero,201ad90 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 201ad84:	d0a7a717 	ldw	r2,-24932(gp)
 201ad88:	10800117 	ldw	r2,4(r2)
 201ad8c:	d0a7a715 	stw	r2,-24932(gp)
 201ad90:	e0bff817 	ldw	r2,-32(fp)
 201ad94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ad98:	e0bff917 	ldw	r2,-28(fp)
 201ad9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 201ada0:	e0bffa17 	ldw	r2,-24(fp)
 201ada4:	1000051e 	bne	r2,zero,201adbc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 201ada8:	e0bfff17 	ldw	r2,-4(fp)
 201adac:	00c01684 	movi	r3,90
 201adb0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201adb4:	0005883a 	mov	r2,zero
 201adb8:	00002c06 	br	201ae6c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 201adbc:	e0bffc17 	ldw	r2,-16(fp)
 201adc0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 201adc4:	e0fffc17 	ldw	r3,-16(fp)
 201adc8:	e0bffe17 	ldw	r2,-8(fp)
 201adcc:	1885883a 	add	r2,r3,r2
 201add0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 201add4:	e03ff715 	stw	zero,-36(fp)
 201add8:	00000c06 	br	201ae0c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 201addc:	e0bff617 	ldw	r2,-40(fp)
 201ade0:	e0fff517 	ldw	r3,-44(fp)
 201ade4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 201ade8:	e0bff517 	ldw	r2,-44(fp)
 201adec:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 201adf0:	e0fff517 	ldw	r3,-44(fp)
 201adf4:	e0bffe17 	ldw	r2,-8(fp)
 201adf8:	1885883a 	add	r2,r3,r2
 201adfc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 201ae00:	e0bff717 	ldw	r2,-36(fp)
 201ae04:	10800044 	addi	r2,r2,1
 201ae08:	e0bff715 	stw	r2,-36(fp)
 201ae0c:	e0bffd17 	ldw	r2,-12(fp)
 201ae10:	10bfffc4 	addi	r2,r2,-1
 201ae14:	e0fff717 	ldw	r3,-36(fp)
 201ae18:	18bff036 	bltu	r3,r2,201addc <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 201ae1c:	e0bff617 	ldw	r2,-40(fp)
 201ae20:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 201ae24:	e0bffa17 	ldw	r2,-24(fp)
 201ae28:	e0fffc17 	ldw	r3,-16(fp)
 201ae2c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 201ae30:	e0bffa17 	ldw	r2,-24(fp)
 201ae34:	e0fffc17 	ldw	r3,-16(fp)
 201ae38:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 201ae3c:	e0bffa17 	ldw	r2,-24(fp)
 201ae40:	e0fffd17 	ldw	r3,-12(fp)
 201ae44:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 201ae48:	e0bffa17 	ldw	r2,-24(fp)
 201ae4c:	e0fffd17 	ldw	r3,-12(fp)
 201ae50:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 201ae54:	e0bffa17 	ldw	r2,-24(fp)
 201ae58:	e0fffe17 	ldw	r3,-8(fp)
 201ae5c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 201ae60:	e0bfff17 	ldw	r2,-4(fp)
 201ae64:	10000005 	stb	zero,0(r2)
    return (pmem);
 201ae68:	e0bffa17 	ldw	r2,-24(fp)
}
 201ae6c:	e037883a 	mov	sp,fp
 201ae70:	df000017 	ldw	fp,0(sp)
 201ae74:	dec00104 	addi	sp,sp,4
 201ae78:	f800283a 	ret

0201ae7c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 201ae7c:	defff804 	addi	sp,sp,-32
 201ae80:	df000715 	stw	fp,28(sp)
 201ae84:	df000704 	addi	fp,sp,28
 201ae88:	e13ffe15 	stw	r4,-8(fp)
 201ae8c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201ae90:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201ae94:	e0bfff17 	ldw	r2,-4(fp)
 201ae98:	1000021e 	bne	r2,zero,201aea4 <OSMemGet+0x28>
        return ((void *)0);
 201ae9c:	0005883a 	mov	r2,zero
 201aea0:	00002e06 	br	201af5c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 201aea4:	e0bffe17 	ldw	r2,-8(fp)
 201aea8:	1000051e 	bne	r2,zero,201aec0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201aeac:	e0bfff17 	ldw	r2,-4(fp)
 201aeb0:	00c01804 	movi	r3,96
 201aeb4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201aeb8:	0005883a 	mov	r2,zero
 201aebc:	00002706 	br	201af5c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aec0:	0005303a 	rdctl	r2,status
 201aec4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aec8:	e0fffd17 	ldw	r3,-12(fp)
 201aecc:	00bfff84 	movi	r2,-2
 201aed0:	1884703a 	and	r2,r3,r2
 201aed4:	1001703a 	wrctl	status,r2
  
  return context;
 201aed8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201aedc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 201aee0:	e0bffe17 	ldw	r2,-8(fp)
 201aee4:	10800417 	ldw	r2,16(r2)
 201aee8:	10001426 	beq	r2,zero,201af3c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 201aeec:	e0bffe17 	ldw	r2,-8(fp)
 201aef0:	10800117 	ldw	r2,4(r2)
 201aef4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 201aef8:	e0bffb17 	ldw	r2,-20(fp)
 201aefc:	10c00017 	ldw	r3,0(r2)
 201af00:	e0bffe17 	ldw	r2,-8(fp)
 201af04:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 201af08:	e0bffe17 	ldw	r2,-8(fp)
 201af0c:	10800417 	ldw	r2,16(r2)
 201af10:	10ffffc4 	addi	r3,r2,-1
 201af14:	e0bffe17 	ldw	r2,-8(fp)
 201af18:	10c00415 	stw	r3,16(r2)
 201af1c:	e0bff917 	ldw	r2,-28(fp)
 201af20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201af24:	e0bffa17 	ldw	r2,-24(fp)
 201af28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 201af2c:	e0bfff17 	ldw	r2,-4(fp)
 201af30:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 201af34:	e0bffb17 	ldw	r2,-20(fp)
 201af38:	00000806 	br	201af5c <OSMemGet+0xe0>
 201af3c:	e0bff917 	ldw	r2,-28(fp)
 201af40:	e0bffc15 	stw	r2,-16(fp)
 201af44:	e0bffc17 	ldw	r2,-16(fp)
 201af48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 201af4c:	e0bfff17 	ldw	r2,-4(fp)
 201af50:	00c01744 	movi	r3,93
 201af54:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 201af58:	0005883a 	mov	r2,zero
}
 201af5c:	e037883a 	mov	sp,fp
 201af60:	df000017 	ldw	fp,0(sp)
 201af64:	dec00104 	addi	sp,sp,4
 201af68:	f800283a 	ret

0201af6c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201af6c:	defff704 	addi	sp,sp,-36
 201af70:	dfc00815 	stw	ra,32(sp)
 201af74:	df000715 	stw	fp,28(sp)
 201af78:	df000704 	addi	fp,sp,28
 201af7c:	e13ffd15 	stw	r4,-12(fp)
 201af80:	e17ffe15 	stw	r5,-8(fp)
 201af84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201af88:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201af8c:	e0bfff17 	ldw	r2,-4(fp)
 201af90:	1000021e 	bne	r2,zero,201af9c <OSMemNameGet+0x30>
        return (0);
 201af94:	0005883a 	mov	r2,zero
 201af98:	00002b06 	br	201b048 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 201af9c:	e0bffd17 	ldw	r2,-12(fp)
 201afa0:	1000051e 	bne	r2,zero,201afb8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201afa4:	e0bfff17 	ldw	r2,-4(fp)
 201afa8:	00c01804 	movi	r3,96
 201afac:	10c00005 	stb	r3,0(r2)
        return (0);
 201afb0:	0005883a 	mov	r2,zero
 201afb4:	00002406 	br	201b048 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201afb8:	e0bffe17 	ldw	r2,-8(fp)
 201afbc:	1000051e 	bne	r2,zero,201afd4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201afc0:	e0bfff17 	ldw	r2,-4(fp)
 201afc4:	00c00304 	movi	r3,12
 201afc8:	10c00005 	stb	r3,0(r2)
        return (0);
 201afcc:	0005883a 	mov	r2,zero
 201afd0:	00001d06 	br	201b048 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201afd4:	d0a7ac03 	ldbu	r2,-24912(gp)
 201afd8:	10803fcc 	andi	r2,r2,255
 201afdc:	10000526 	beq	r2,zero,201aff4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 201afe0:	e0bfff17 	ldw	r2,-4(fp)
 201afe4:	00c00444 	movi	r3,17
 201afe8:	10c00005 	stb	r3,0(r2)
        return (0);
 201afec:	0005883a 	mov	r2,zero
 201aff0:	00001506 	br	201b048 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aff4:	0005303a 	rdctl	r2,status
 201aff8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201affc:	e0fffb17 	ldw	r3,-20(fp)
 201b000:	00bfff84 	movi	r2,-2
 201b004:	1884703a 	and	r2,r3,r2
 201b008:	1001703a 	wrctl	status,r2
  
  return context;
 201b00c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201b010:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 201b014:	e0bffd17 	ldw	r2,-12(fp)
 201b018:	10800504 	addi	r2,r2,20
 201b01c:	100b883a 	mov	r5,r2
 201b020:	e13ffe17 	ldw	r4,-8(fp)
 201b024:	20183ac0 	call	20183ac <OS_StrCopy>
 201b028:	e0bffa05 	stb	r2,-24(fp)
 201b02c:	e0bff917 	ldw	r2,-28(fp)
 201b030:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b034:	e0bffc17 	ldw	r2,-16(fp)
 201b038:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b03c:	e0bfff17 	ldw	r2,-4(fp)
 201b040:	10000005 	stb	zero,0(r2)
    return (len);
 201b044:	e0bffa03 	ldbu	r2,-24(fp)
}
 201b048:	e037883a 	mov	sp,fp
 201b04c:	dfc00117 	ldw	ra,4(sp)
 201b050:	df000017 	ldw	fp,0(sp)
 201b054:	dec00204 	addi	sp,sp,8
 201b058:	f800283a 	ret

0201b05c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201b05c:	defff604 	addi	sp,sp,-40
 201b060:	dfc00915 	stw	ra,36(sp)
 201b064:	df000815 	stw	fp,32(sp)
 201b068:	df000804 	addi	fp,sp,32
 201b06c:	e13ffd15 	stw	r4,-12(fp)
 201b070:	e17ffe15 	stw	r5,-8(fp)
 201b074:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b078:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201b07c:	e0bfff17 	ldw	r2,-4(fp)
 201b080:	10003526 	beq	r2,zero,201b158 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 201b084:	e0bffd17 	ldw	r2,-12(fp)
 201b088:	1000041e 	bne	r2,zero,201b09c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201b08c:	e0bfff17 	ldw	r2,-4(fp)
 201b090:	00c01804 	movi	r3,96
 201b094:	10c00005 	stb	r3,0(r2)
        return;
 201b098:	00003006 	br	201b15c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201b09c:	e0bffe17 	ldw	r2,-8(fp)
 201b0a0:	1000041e 	bne	r2,zero,201b0b4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 201b0a4:	e0bfff17 	ldw	r2,-4(fp)
 201b0a8:	00c00304 	movi	r3,12
 201b0ac:	10c00005 	stb	r3,0(r2)
        return;
 201b0b0:	00002a06 	br	201b15c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201b0b4:	d0a7ac03 	ldbu	r2,-24912(gp)
 201b0b8:	10803fcc 	andi	r2,r2,255
 201b0bc:	10000426 	beq	r2,zero,201b0d0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 201b0c0:	e0bfff17 	ldw	r2,-4(fp)
 201b0c4:	00c00484 	movi	r3,18
 201b0c8:	10c00005 	stb	r3,0(r2)
        return;
 201b0cc:	00002306 	br	201b15c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b0d0:	0005303a 	rdctl	r2,status
 201b0d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b0d8:	e0fffc17 	ldw	r3,-16(fp)
 201b0dc:	00bfff84 	movi	r2,-2
 201b0e0:	1884703a 	and	r2,r3,r2
 201b0e4:	1001703a 	wrctl	status,r2
  
  return context;
 201b0e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b0ec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 201b0f0:	e13ffe17 	ldw	r4,-8(fp)
 201b0f4:	20184200 	call	2018420 <OS_StrLen>
 201b0f8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 201b0fc:	e0bffa03 	ldbu	r2,-24(fp)
 201b100:	10800830 	cmpltui	r2,r2,32
 201b104:	1000081e 	bne	r2,zero,201b128 <OSMemNameSet+0xcc>
 201b108:	e0bff817 	ldw	r2,-32(fp)
 201b10c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b110:	e0bff917 	ldw	r2,-28(fp)
 201b114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 201b118:	e0bfff17 	ldw	r2,-4(fp)
 201b11c:	00c018c4 	movi	r3,99
 201b120:	10c00005 	stb	r3,0(r2)
        return;
 201b124:	00000d06 	br	201b15c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 201b128:	e0bffd17 	ldw	r2,-12(fp)
 201b12c:	10800504 	addi	r2,r2,20
 201b130:	e17ffe17 	ldw	r5,-8(fp)
 201b134:	1009883a 	mov	r4,r2
 201b138:	20183ac0 	call	20183ac <OS_StrCopy>
 201b13c:	e0bff817 	ldw	r2,-32(fp)
 201b140:	e0bffb15 	stw	r2,-20(fp)
 201b144:	e0bffb17 	ldw	r2,-20(fp)
 201b148:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b14c:	e0bfff17 	ldw	r2,-4(fp)
 201b150:	10000005 	stb	zero,0(r2)
 201b154:	00000106 	br	201b15c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201b158:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201b15c:	e037883a 	mov	sp,fp
 201b160:	dfc00117 	ldw	ra,4(sp)
 201b164:	df000017 	ldw	fp,0(sp)
 201b168:	dec00204 	addi	sp,sp,8
 201b16c:	f800283a 	ret

0201b170 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 201b170:	defff904 	addi	sp,sp,-28
 201b174:	df000615 	stw	fp,24(sp)
 201b178:	df000604 	addi	fp,sp,24
 201b17c:	e13ffe15 	stw	r4,-8(fp)
 201b180:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b184:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201b188:	e0bffe17 	ldw	r2,-8(fp)
 201b18c:	1000021e 	bne	r2,zero,201b198 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201b190:	00801804 	movi	r2,96
 201b194:	00002806 	br	201b238 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 201b198:	e0bfff17 	ldw	r2,-4(fp)
 201b19c:	1000021e 	bne	r2,zero,201b1a8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 201b1a0:	008017c4 	movi	r2,95
 201b1a4:	00002406 	br	201b238 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b1a8:	0005303a 	rdctl	r2,status
 201b1ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b1b0:	e0fffd17 	ldw	r3,-12(fp)
 201b1b4:	00bfff84 	movi	r2,-2
 201b1b8:	1884703a 	and	r2,r3,r2
 201b1bc:	1001703a 	wrctl	status,r2
  
  return context;
 201b1c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b1c4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 201b1c8:	e0bffe17 	ldw	r2,-8(fp)
 201b1cc:	10c00417 	ldw	r3,16(r2)
 201b1d0:	e0bffe17 	ldw	r2,-8(fp)
 201b1d4:	10800317 	ldw	r2,12(r2)
 201b1d8:	18800636 	bltu	r3,r2,201b1f4 <OSMemPut+0x84>
 201b1dc:	e0bffa17 	ldw	r2,-24(fp)
 201b1e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b1e4:	e0bffb17 	ldw	r2,-20(fp)
 201b1e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 201b1ec:	00801784 	movi	r2,94
 201b1f0:	00001106 	br	201b238 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 201b1f4:	e0bffe17 	ldw	r2,-8(fp)
 201b1f8:	10c00117 	ldw	r3,4(r2)
 201b1fc:	e0bfff17 	ldw	r2,-4(fp)
 201b200:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 201b204:	e0bffe17 	ldw	r2,-8(fp)
 201b208:	e0ffff17 	ldw	r3,-4(fp)
 201b20c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 201b210:	e0bffe17 	ldw	r2,-8(fp)
 201b214:	10800417 	ldw	r2,16(r2)
 201b218:	10c00044 	addi	r3,r2,1
 201b21c:	e0bffe17 	ldw	r2,-8(fp)
 201b220:	10c00415 	stw	r3,16(r2)
 201b224:	e0bffa17 	ldw	r2,-24(fp)
 201b228:	e0bffc15 	stw	r2,-16(fp)
 201b22c:	e0bffc17 	ldw	r2,-16(fp)
 201b230:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 201b234:	0005883a 	mov	r2,zero
}
 201b238:	e037883a 	mov	sp,fp
 201b23c:	df000017 	ldw	fp,0(sp)
 201b240:	dec00104 	addi	sp,sp,4
 201b244:	f800283a 	ret

0201b248 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 201b248:	defffa04 	addi	sp,sp,-24
 201b24c:	df000515 	stw	fp,20(sp)
 201b250:	df000504 	addi	fp,sp,20
 201b254:	e13ffe15 	stw	r4,-8(fp)
 201b258:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b25c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201b260:	e0bffe17 	ldw	r2,-8(fp)
 201b264:	1000021e 	bne	r2,zero,201b270 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201b268:	00801804 	movi	r2,96
 201b26c:	00002c06 	br	201b320 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 201b270:	e0bfff17 	ldw	r2,-4(fp)
 201b274:	1000021e 	bne	r2,zero,201b280 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 201b278:	00801844 	movi	r2,97
 201b27c:	00002806 	br	201b320 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b280:	0005303a 	rdctl	r2,status
 201b284:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b288:	e0fffc17 	ldw	r3,-16(fp)
 201b28c:	00bfff84 	movi	r2,-2
 201b290:	1884703a 	and	r2,r3,r2
 201b294:	1001703a 	wrctl	status,r2
  
  return context;
 201b298:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b29c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 201b2a0:	e0bffe17 	ldw	r2,-8(fp)
 201b2a4:	10c00017 	ldw	r3,0(r2)
 201b2a8:	e0bfff17 	ldw	r2,-4(fp)
 201b2ac:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 201b2b0:	e0bffe17 	ldw	r2,-8(fp)
 201b2b4:	10c00117 	ldw	r3,4(r2)
 201b2b8:	e0bfff17 	ldw	r2,-4(fp)
 201b2bc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 201b2c0:	e0bffe17 	ldw	r2,-8(fp)
 201b2c4:	10c00217 	ldw	r3,8(r2)
 201b2c8:	e0bfff17 	ldw	r2,-4(fp)
 201b2cc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 201b2d0:	e0bffe17 	ldw	r2,-8(fp)
 201b2d4:	10c00317 	ldw	r3,12(r2)
 201b2d8:	e0bfff17 	ldw	r2,-4(fp)
 201b2dc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 201b2e0:	e0bffe17 	ldw	r2,-8(fp)
 201b2e4:	10c00417 	ldw	r3,16(r2)
 201b2e8:	e0bfff17 	ldw	r2,-4(fp)
 201b2ec:	10c00415 	stw	r3,16(r2)
 201b2f0:	e0bffb17 	ldw	r2,-20(fp)
 201b2f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b2f8:	e0bffd17 	ldw	r2,-12(fp)
 201b2fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 201b300:	e0bfff17 	ldw	r2,-4(fp)
 201b304:	10c00317 	ldw	r3,12(r2)
 201b308:	e0bfff17 	ldw	r2,-4(fp)
 201b30c:	10800417 	ldw	r2,16(r2)
 201b310:	1887c83a 	sub	r3,r3,r2
 201b314:	e0bfff17 	ldw	r2,-4(fp)
 201b318:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 201b31c:	0005883a 	mov	r2,zero
}
 201b320:	e037883a 	mov	sp,fp
 201b324:	df000017 	ldw	fp,0(sp)
 201b328:	dec00104 	addi	sp,sp,4
 201b32c:	f800283a 	ret

0201b330 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 201b330:	defffc04 	addi	sp,sp,-16
 201b334:	dfc00315 	stw	ra,12(sp)
 201b338:	df000215 	stw	fp,8(sp)
 201b33c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 201b340:	01430c04 	movi	r5,3120
 201b344:	010080f4 	movhi	r4,515
 201b348:	212f2a04 	addi	r4,r4,-17240
 201b34c:	20181ac0 	call	20181ac <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 201b350:	008080f4 	movhi	r2,515
 201b354:	10af2a04 	addi	r2,r2,-17240
 201b358:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 201b35c:	e03fff0d 	sth	zero,-4(fp)
 201b360:	00001306 	br	201b3b0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 201b364:	e0bfff0b 	ldhu	r2,-4(fp)
 201b368:	10800044 	addi	r2,r2,1
 201b36c:	10c00d24 	muli	r3,r2,52
 201b370:	008080f4 	movhi	r2,515
 201b374:	10af2a04 	addi	r2,r2,-17240
 201b378:	1887883a 	add	r3,r3,r2
 201b37c:	e0bffe17 	ldw	r2,-8(fp)
 201b380:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 201b384:	e0bffe17 	ldw	r2,-8(fp)
 201b388:	00c00fc4 	movi	r3,63
 201b38c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 201b390:	e0bffe17 	ldw	r2,-8(fp)
 201b394:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 201b398:	e0bffe17 	ldw	r2,-8(fp)
 201b39c:	10800d04 	addi	r2,r2,52
 201b3a0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 201b3a4:	e0bfff0b 	ldhu	r2,-4(fp)
 201b3a8:	10800044 	addi	r2,r2,1
 201b3ac:	e0bfff0d 	sth	r2,-4(fp)
 201b3b0:	e0bfff0b 	ldhu	r2,-4(fp)
 201b3b4:	10800ef0 	cmpltui	r2,r2,59
 201b3b8:	103fea1e 	bne	r2,zero,201b364 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 201b3bc:	e0bffe17 	ldw	r2,-8(fp)
 201b3c0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 201b3c4:	e0bffe17 	ldw	r2,-8(fp)
 201b3c8:	00c00fc4 	movi	r3,63
 201b3cc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 201b3d0:	e0bffe17 	ldw	r2,-8(fp)
 201b3d4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 201b3d8:	008080f4 	movhi	r2,515
 201b3dc:	10af2a04 	addi	r2,r2,-17240
 201b3e0:	d0a7a715 	stw	r2,-24932(gp)
#endif
}
 201b3e4:	0001883a 	nop
 201b3e8:	e037883a 	mov	sp,fp
 201b3ec:	dfc00117 	ldw	ra,4(sp)
 201b3f0:	df000017 	ldw	fp,0(sp)
 201b3f4:	dec00204 	addi	sp,sp,8
 201b3f8:	f800283a 	ret

0201b3fc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 201b3fc:	defff804 	addi	sp,sp,-32
 201b400:	df000715 	stw	fp,28(sp)
 201b404:	df000704 	addi	fp,sp,28
 201b408:	e13ffe15 	stw	r4,-8(fp)
 201b40c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b410:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201b414:	e0bfff17 	ldw	r2,-4(fp)
 201b418:	1000021e 	bne	r2,zero,201b424 <OSQAccept+0x28>
        return ((void *)0);
 201b41c:	0005883a 	mov	r2,zero
 201b420:	00004206 	br	201b52c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201b424:	e0bffe17 	ldw	r2,-8(fp)
 201b428:	1000051e 	bne	r2,zero,201b440 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201b42c:	e0bfff17 	ldw	r2,-4(fp)
 201b430:	00c00104 	movi	r3,4
 201b434:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b438:	0005883a 	mov	r2,zero
 201b43c:	00003b06 	br	201b52c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201b440:	e0bffe17 	ldw	r2,-8(fp)
 201b444:	10800003 	ldbu	r2,0(r2)
 201b448:	10803fcc 	andi	r2,r2,255
 201b44c:	108000a0 	cmpeqi	r2,r2,2
 201b450:	1000051e 	bne	r2,zero,201b468 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201b454:	e0bfff17 	ldw	r2,-4(fp)
 201b458:	00c00044 	movi	r3,1
 201b45c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b460:	0005883a 	mov	r2,zero
 201b464:	00003106 	br	201b52c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b468:	0005303a 	rdctl	r2,status
 201b46c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b470:	e0fffd17 	ldw	r3,-12(fp)
 201b474:	00bfff84 	movi	r2,-2
 201b478:	1884703a 	and	r2,r3,r2
 201b47c:	1001703a 	wrctl	status,r2
  
  return context;
 201b480:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201b484:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201b488:	e0bffe17 	ldw	r2,-8(fp)
 201b48c:	10800117 	ldw	r2,4(r2)
 201b490:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201b494:	e0bffc17 	ldw	r2,-16(fp)
 201b498:	1080058b 	ldhu	r2,22(r2)
 201b49c:	10bfffcc 	andi	r2,r2,65535
 201b4a0:	10001926 	beq	r2,zero,201b508 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201b4a4:	e0bffc17 	ldw	r2,-16(fp)
 201b4a8:	10800417 	ldw	r2,16(r2)
 201b4ac:	11000104 	addi	r4,r2,4
 201b4b0:	e0fffc17 	ldw	r3,-16(fp)
 201b4b4:	19000415 	stw	r4,16(r3)
 201b4b8:	10800017 	ldw	r2,0(r2)
 201b4bc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201b4c0:	e0bffc17 	ldw	r2,-16(fp)
 201b4c4:	1080058b 	ldhu	r2,22(r2)
 201b4c8:	10bfffc4 	addi	r2,r2,-1
 201b4cc:	1007883a 	mov	r3,r2
 201b4d0:	e0bffc17 	ldw	r2,-16(fp)
 201b4d4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201b4d8:	e0bffc17 	ldw	r2,-16(fp)
 201b4dc:	10c00417 	ldw	r3,16(r2)
 201b4e0:	e0bffc17 	ldw	r2,-16(fp)
 201b4e4:	10800217 	ldw	r2,8(r2)
 201b4e8:	1880041e 	bne	r3,r2,201b4fc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 201b4ec:	e0bffc17 	ldw	r2,-16(fp)
 201b4f0:	10c00117 	ldw	r3,4(r2)
 201b4f4:	e0bffc17 	ldw	r2,-16(fp)
 201b4f8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 201b4fc:	e0bfff17 	ldw	r2,-4(fp)
 201b500:	10000005 	stb	zero,0(r2)
 201b504:	00000406 	br	201b518 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 201b508:	e0bfff17 	ldw	r2,-4(fp)
 201b50c:	00c007c4 	movi	r3,31
 201b510:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 201b514:	e03ff915 	stw	zero,-28(fp)
 201b518:	e0bffa17 	ldw	r2,-24(fp)
 201b51c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b520:	e0bffb17 	ldw	r2,-20(fp)
 201b524:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 201b528:	e0bff917 	ldw	r2,-28(fp)
}
 201b52c:	e037883a 	mov	sp,fp
 201b530:	df000017 	ldw	fp,0(sp)
 201b534:	dec00104 	addi	sp,sp,4
 201b538:	f800283a 	ret

0201b53c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 201b53c:	defff404 	addi	sp,sp,-48
 201b540:	dfc00b15 	stw	ra,44(sp)
 201b544:	df000a15 	stw	fp,40(sp)
 201b548:	df000a04 	addi	fp,sp,40
 201b54c:	e13ffe15 	stw	r4,-8(fp)
 201b550:	2805883a 	mov	r2,r5
 201b554:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b558:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201b55c:	d0a7ac03 	ldbu	r2,-24912(gp)
 201b560:	10803fcc 	andi	r2,r2,255
 201b564:	10000226 	beq	r2,zero,201b570 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 201b568:	0005883a 	mov	r2,zero
 201b56c:	00005906 	br	201b6d4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b570:	0005303a 	rdctl	r2,status
 201b574:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b578:	e0fffd17 	ldw	r3,-12(fp)
 201b57c:	00bfff84 	movi	r2,-2
 201b580:	1884703a 	and	r2,r3,r2
 201b584:	1001703a 	wrctl	status,r2
  
  return context;
 201b588:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201b58c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201b590:	d0a7ab17 	ldw	r2,-24916(gp)
 201b594:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201b598:	d0a7ab17 	ldw	r2,-24916(gp)
 201b59c:	10000326 	beq	r2,zero,201b5ac <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201b5a0:	d0a7ab17 	ldw	r2,-24916(gp)
 201b5a4:	10800117 	ldw	r2,4(r2)
 201b5a8:	d0a7ab15 	stw	r2,-24916(gp)
 201b5ac:	e0bff717 	ldw	r2,-36(fp)
 201b5b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b5b4:	e0bff817 	ldw	r2,-32(fp)
 201b5b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 201b5bc:	e0bff617 	ldw	r2,-40(fp)
 201b5c0:	10004326 	beq	r2,zero,201b6d0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b5c4:	0005303a 	rdctl	r2,status
 201b5c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b5cc:	e0fff917 	ldw	r3,-28(fp)
 201b5d0:	00bfff84 	movi	r2,-2
 201b5d4:	1884703a 	and	r2,r3,r2
 201b5d8:	1001703a 	wrctl	status,r2
  
  return context;
 201b5dc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 201b5e0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 201b5e4:	d0a7a917 	ldw	r2,-24924(gp)
 201b5e8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 201b5ec:	e0bffb17 	ldw	r2,-20(fp)
 201b5f0:	10002d26 	beq	r2,zero,201b6a8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 201b5f4:	d0a7a917 	ldw	r2,-24924(gp)
 201b5f8:	10800017 	ldw	r2,0(r2)
 201b5fc:	d0a7a915 	stw	r2,-24924(gp)
 201b600:	e0bff717 	ldw	r2,-36(fp)
 201b604:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b608:	e0bffa17 	ldw	r2,-24(fp)
 201b60c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 201b610:	e0bffb17 	ldw	r2,-20(fp)
 201b614:	e0fffe17 	ldw	r3,-8(fp)
 201b618:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 201b61c:	e0bfff0b 	ldhu	r2,-4(fp)
 201b620:	1085883a 	add	r2,r2,r2
 201b624:	1085883a 	add	r2,r2,r2
 201b628:	1007883a 	mov	r3,r2
 201b62c:	e0bffe17 	ldw	r2,-8(fp)
 201b630:	10c7883a 	add	r3,r2,r3
 201b634:	e0bffb17 	ldw	r2,-20(fp)
 201b638:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 201b63c:	e0bffb17 	ldw	r2,-20(fp)
 201b640:	e0fffe17 	ldw	r3,-8(fp)
 201b644:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 201b648:	e0bffb17 	ldw	r2,-20(fp)
 201b64c:	e0fffe17 	ldw	r3,-8(fp)
 201b650:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 201b654:	e0bffb17 	ldw	r2,-20(fp)
 201b658:	e0ffff0b 	ldhu	r3,-4(fp)
 201b65c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 201b660:	e0bffb17 	ldw	r2,-20(fp)
 201b664:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 201b668:	e0bff617 	ldw	r2,-40(fp)
 201b66c:	00c00084 	movi	r3,2
 201b670:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 201b674:	e0bff617 	ldw	r2,-40(fp)
 201b678:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 201b67c:	e0bff617 	ldw	r2,-40(fp)
 201b680:	e0fffb17 	ldw	r3,-20(fp)
 201b684:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 201b688:	e0bff617 	ldw	r2,-40(fp)
 201b68c:	00c00fc4 	movi	r3,63
 201b690:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 201b694:	e0bff617 	ldw	r2,-40(fp)
 201b698:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 201b69c:	e13ff617 	ldw	r4,-40(fp)
 201b6a0:	2017dcc0 	call	2017dcc <OS_EventWaitListInit>
 201b6a4:	00000a06 	br	201b6d0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 201b6a8:	d0e7ab17 	ldw	r3,-24916(gp)
 201b6ac:	e0bff617 	ldw	r2,-40(fp)
 201b6b0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 201b6b4:	e0bff617 	ldw	r2,-40(fp)
 201b6b8:	d0a7ab15 	stw	r2,-24916(gp)
 201b6bc:	e0bff717 	ldw	r2,-36(fp)
 201b6c0:	e0bffc15 	stw	r2,-16(fp)
 201b6c4:	e0bffc17 	ldw	r2,-16(fp)
 201b6c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 201b6cc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 201b6d0:	e0bff617 	ldw	r2,-40(fp)
}
 201b6d4:	e037883a 	mov	sp,fp
 201b6d8:	dfc00117 	ldw	ra,4(sp)
 201b6dc:	df000017 	ldw	fp,0(sp)
 201b6e0:	dec00204 	addi	sp,sp,8
 201b6e4:	f800283a 	ret

0201b6e8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201b6e8:	defff204 	addi	sp,sp,-56
 201b6ec:	dfc00d15 	stw	ra,52(sp)
 201b6f0:	df000c15 	stw	fp,48(sp)
 201b6f4:	df000c04 	addi	fp,sp,48
 201b6f8:	e13ffd15 	stw	r4,-12(fp)
 201b6fc:	2805883a 	mov	r2,r5
 201b700:	e1bfff15 	stw	r6,-4(fp)
 201b704:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201b708:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201b70c:	e0bfff17 	ldw	r2,-4(fp)
 201b710:	1000021e 	bne	r2,zero,201b71c <OSQDel+0x34>
        return (pevent);
 201b714:	e0bffd17 	ldw	r2,-12(fp)
 201b718:	00008e06 	br	201b954 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201b71c:	e0bffd17 	ldw	r2,-12(fp)
 201b720:	1000051e 	bne	r2,zero,201b738 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201b724:	e0bfff17 	ldw	r2,-4(fp)
 201b728:	00c00104 	movi	r3,4
 201b72c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201b730:	e0bffd17 	ldw	r2,-12(fp)
 201b734:	00008706 	br	201b954 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 201b738:	e0bffd17 	ldw	r2,-12(fp)
 201b73c:	10800003 	ldbu	r2,0(r2)
 201b740:	10803fcc 	andi	r2,r2,255
 201b744:	108000a0 	cmpeqi	r2,r2,2
 201b748:	1000051e 	bne	r2,zero,201b760 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201b74c:	e0bfff17 	ldw	r2,-4(fp)
 201b750:	00c00044 	movi	r3,1
 201b754:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201b758:	e0bffd17 	ldw	r2,-12(fp)
 201b75c:	00007d06 	br	201b954 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201b760:	d0a7ac03 	ldbu	r2,-24912(gp)
 201b764:	10803fcc 	andi	r2,r2,255
 201b768:	10000526 	beq	r2,zero,201b780 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201b76c:	e0bfff17 	ldw	r2,-4(fp)
 201b770:	00c003c4 	movi	r3,15
 201b774:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201b778:	e0bffd17 	ldw	r2,-12(fp)
 201b77c:	00007506 	br	201b954 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b780:	0005303a 	rdctl	r2,status
 201b784:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b788:	e0fffc17 	ldw	r3,-16(fp)
 201b78c:	00bfff84 	movi	r2,-2
 201b790:	1884703a 	and	r2,r3,r2
 201b794:	1001703a 	wrctl	status,r2
  
  return context;
 201b798:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b79c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 201b7a0:	e0bffd17 	ldw	r2,-12(fp)
 201b7a4:	10800283 	ldbu	r2,10(r2)
 201b7a8:	10803fcc 	andi	r2,r2,255
 201b7ac:	10000326 	beq	r2,zero,201b7bc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201b7b0:	00800044 	movi	r2,1
 201b7b4:	e0bff405 	stb	r2,-48(fp)
 201b7b8:	00000106 	br	201b7c0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201b7bc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 201b7c0:	e0bffe03 	ldbu	r2,-8(fp)
 201b7c4:	10000326 	beq	r2,zero,201b7d4 <OSQDel+0xec>
 201b7c8:	10800060 	cmpeqi	r2,r2,1
 201b7cc:	1000301e 	bne	r2,zero,201b890 <OSQDel+0x1a8>
 201b7d0:	00005506 	br	201b928 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 201b7d4:	e0bff403 	ldbu	r2,-48(fp)
 201b7d8:	10001e1e 	bne	r2,zero,201b854 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201b7dc:	e0bffd17 	ldw	r2,-12(fp)
 201b7e0:	00c00fc4 	movi	r3,63
 201b7e4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201b7e8:	e0bffd17 	ldw	r2,-12(fp)
 201b7ec:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 201b7f0:	e0bffd17 	ldw	r2,-12(fp)
 201b7f4:	10800117 	ldw	r2,4(r2)
 201b7f8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 201b7fc:	d0e7a917 	ldw	r3,-24924(gp)
 201b800:	e0bff817 	ldw	r2,-32(fp)
 201b804:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 201b808:	e0bff817 	ldw	r2,-32(fp)
 201b80c:	d0a7a915 	stw	r2,-24924(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201b810:	e0bffd17 	ldw	r2,-12(fp)
 201b814:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201b818:	d0e7ab17 	ldw	r3,-24916(gp)
 201b81c:	e0bffd17 	ldw	r2,-12(fp)
 201b820:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201b824:	e0bffd17 	ldw	r2,-12(fp)
 201b828:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201b82c:	e0bffd17 	ldw	r2,-12(fp)
 201b830:	d0a7ab15 	stw	r2,-24916(gp)
 201b834:	e0bff617 	ldw	r2,-40(fp)
 201b838:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b83c:	e0bff717 	ldw	r2,-36(fp)
 201b840:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201b844:	e0bfff17 	ldw	r2,-4(fp)
 201b848:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 201b84c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 201b850:	00003f06 	br	201b950 <OSQDel+0x268>
 201b854:	e0bff617 	ldw	r2,-40(fp)
 201b858:	e0bff915 	stw	r2,-28(fp)
 201b85c:	e0bff917 	ldw	r2,-28(fp)
 201b860:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201b864:	e0bfff17 	ldw	r2,-4(fp)
 201b868:	00c01244 	movi	r3,73
 201b86c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 201b870:	e0bffd17 	ldw	r2,-12(fp)
 201b874:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 201b878:	00003506 	br	201b950 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 201b87c:	000f883a 	mov	r7,zero
 201b880:	01800104 	movi	r6,4
 201b884:	000b883a 	mov	r5,zero
 201b888:	e13ffd17 	ldw	r4,-12(fp)
 201b88c:	201781c0 	call	201781c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 201b890:	e0bffd17 	ldw	r2,-12(fp)
 201b894:	10800283 	ldbu	r2,10(r2)
 201b898:	10803fcc 	andi	r2,r2,255
 201b89c:	103ff71e 	bne	r2,zero,201b87c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201b8a0:	e0bffd17 	ldw	r2,-12(fp)
 201b8a4:	00c00fc4 	movi	r3,63
 201b8a8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201b8ac:	e0bffd17 	ldw	r2,-12(fp)
 201b8b0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 201b8b4:	e0bffd17 	ldw	r2,-12(fp)
 201b8b8:	10800117 	ldw	r2,4(r2)
 201b8bc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 201b8c0:	d0e7a917 	ldw	r3,-24924(gp)
 201b8c4:	e0bff817 	ldw	r2,-32(fp)
 201b8c8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 201b8cc:	e0bff817 	ldw	r2,-32(fp)
 201b8d0:	d0a7a915 	stw	r2,-24924(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201b8d4:	e0bffd17 	ldw	r2,-12(fp)
 201b8d8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201b8dc:	d0e7ab17 	ldw	r3,-24916(gp)
 201b8e0:	e0bffd17 	ldw	r2,-12(fp)
 201b8e4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201b8e8:	e0bffd17 	ldw	r2,-12(fp)
 201b8ec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201b8f0:	e0bffd17 	ldw	r2,-12(fp)
 201b8f4:	d0a7ab15 	stw	r2,-24916(gp)
 201b8f8:	e0bff617 	ldw	r2,-40(fp)
 201b8fc:	e0bffa15 	stw	r2,-24(fp)
 201b900:	e0bffa17 	ldw	r2,-24(fp)
 201b904:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201b908:	e0bff403 	ldbu	r2,-48(fp)
 201b90c:	10800058 	cmpnei	r2,r2,1
 201b910:	1000011e 	bne	r2,zero,201b918 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201b914:	20182680 	call	2018268 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201b918:	e0bfff17 	ldw	r2,-4(fp)
 201b91c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 201b920:	e03ff515 	stw	zero,-44(fp)
             break;
 201b924:	00000a06 	br	201b950 <OSQDel+0x268>
 201b928:	e0bff617 	ldw	r2,-40(fp)
 201b92c:	e0bffb15 	stw	r2,-20(fp)
 201b930:	e0bffb17 	ldw	r2,-20(fp)
 201b934:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201b938:	e0bfff17 	ldw	r2,-4(fp)
 201b93c:	00c001c4 	movi	r3,7
 201b940:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201b944:	e0bffd17 	ldw	r2,-12(fp)
 201b948:	e0bff515 	stw	r2,-44(fp)
             break;
 201b94c:	0001883a 	nop
    }
    return (pevent_return);
 201b950:	e0bff517 	ldw	r2,-44(fp)
}
 201b954:	e037883a 	mov	sp,fp
 201b958:	dfc00117 	ldw	ra,4(sp)
 201b95c:	df000017 	ldw	fp,0(sp)
 201b960:	dec00204 	addi	sp,sp,8
 201b964:	f800283a 	ret

0201b968 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 201b968:	defffa04 	addi	sp,sp,-24
 201b96c:	df000515 	stw	fp,20(sp)
 201b970:	df000504 	addi	fp,sp,20
 201b974:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b978:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201b97c:	e0bfff17 	ldw	r2,-4(fp)
 201b980:	1000021e 	bne	r2,zero,201b98c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 201b984:	00800104 	movi	r2,4
 201b988:	00002106 	br	201ba10 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201b98c:	e0bfff17 	ldw	r2,-4(fp)
 201b990:	10800003 	ldbu	r2,0(r2)
 201b994:	10803fcc 	andi	r2,r2,255
 201b998:	108000a0 	cmpeqi	r2,r2,2
 201b99c:	1000021e 	bne	r2,zero,201b9a8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 201b9a0:	00800044 	movi	r2,1
 201b9a4:	00001a06 	br	201ba10 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b9a8:	0005303a 	rdctl	r2,status
 201b9ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b9b0:	e0fffd17 	ldw	r3,-12(fp)
 201b9b4:	00bfff84 	movi	r2,-2
 201b9b8:	1884703a 	and	r2,r3,r2
 201b9bc:	1001703a 	wrctl	status,r2
  
  return context;
 201b9c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b9c4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 201b9c8:	e0bfff17 	ldw	r2,-4(fp)
 201b9cc:	10800117 	ldw	r2,4(r2)
 201b9d0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 201b9d4:	e0bffc17 	ldw	r2,-16(fp)
 201b9d8:	10c00117 	ldw	r3,4(r2)
 201b9dc:	e0bffc17 	ldw	r2,-16(fp)
 201b9e0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 201b9e4:	e0bffc17 	ldw	r2,-16(fp)
 201b9e8:	10c00117 	ldw	r3,4(r2)
 201b9ec:	e0bffc17 	ldw	r2,-16(fp)
 201b9f0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 201b9f4:	e0bffc17 	ldw	r2,-16(fp)
 201b9f8:	1000058d 	sth	zero,22(r2)
 201b9fc:	e0bffb17 	ldw	r2,-20(fp)
 201ba00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ba04:	e0bffe17 	ldw	r2,-8(fp)
 201ba08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ba0c:	0005883a 	mov	r2,zero
}
 201ba10:	e037883a 	mov	sp,fp
 201ba14:	df000017 	ldw	fp,0(sp)
 201ba18:	dec00104 	addi	sp,sp,4
 201ba1c:	f800283a 	ret

0201ba20 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201ba20:	defff304 	addi	sp,sp,-52
 201ba24:	dfc00c15 	stw	ra,48(sp)
 201ba28:	df000b15 	stw	fp,44(sp)
 201ba2c:	df000b04 	addi	fp,sp,44
 201ba30:	e13ffd15 	stw	r4,-12(fp)
 201ba34:	2805883a 	mov	r2,r5
 201ba38:	e1bfff15 	stw	r6,-4(fp)
 201ba3c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201ba40:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201ba44:	e0bfff17 	ldw	r2,-4(fp)
 201ba48:	1000021e 	bne	r2,zero,201ba54 <OSQPend+0x34>
        return ((void *)0);
 201ba4c:	0005883a 	mov	r2,zero
 201ba50:	00009106 	br	201bc98 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201ba54:	e0bffd17 	ldw	r2,-12(fp)
 201ba58:	1000051e 	bne	r2,zero,201ba70 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201ba5c:	e0bfff17 	ldw	r2,-4(fp)
 201ba60:	00c00104 	movi	r3,4
 201ba64:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201ba68:	0005883a 	mov	r2,zero
 201ba6c:	00008a06 	br	201bc98 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201ba70:	e0bffd17 	ldw	r2,-12(fp)
 201ba74:	10800003 	ldbu	r2,0(r2)
 201ba78:	10803fcc 	andi	r2,r2,255
 201ba7c:	108000a0 	cmpeqi	r2,r2,2
 201ba80:	1000051e 	bne	r2,zero,201ba98 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201ba84:	e0bfff17 	ldw	r2,-4(fp)
 201ba88:	00c00044 	movi	r3,1
 201ba8c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201ba90:	0005883a 	mov	r2,zero
 201ba94:	00008006 	br	201bc98 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201ba98:	d0a7ac03 	ldbu	r2,-24912(gp)
 201ba9c:	10803fcc 	andi	r2,r2,255
 201baa0:	10000526 	beq	r2,zero,201bab8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 201baa4:	e0bfff17 	ldw	r2,-4(fp)
 201baa8:	00c00084 	movi	r3,2
 201baac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201bab0:	0005883a 	mov	r2,zero
 201bab4:	00007806 	br	201bc98 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 201bab8:	d0a79e03 	ldbu	r2,-24968(gp)
 201babc:	10803fcc 	andi	r2,r2,255
 201bac0:	10000526 	beq	r2,zero,201bad8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 201bac4:	e0bfff17 	ldw	r2,-4(fp)
 201bac8:	00c00344 	movi	r3,13
 201bacc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201bad0:	0005883a 	mov	r2,zero
 201bad4:	00007006 	br	201bc98 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bad8:	0005303a 	rdctl	r2,status
 201badc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bae0:	e0fffc17 	ldw	r3,-16(fp)
 201bae4:	00bfff84 	movi	r2,-2
 201bae8:	1884703a 	and	r2,r3,r2
 201baec:	1001703a 	wrctl	status,r2
  
  return context;
 201baf0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201baf4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201baf8:	e0bffd17 	ldw	r2,-12(fp)
 201bafc:	10800117 	ldw	r2,4(r2)
 201bb00:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201bb04:	e0bff817 	ldw	r2,-32(fp)
 201bb08:	1080058b 	ldhu	r2,22(r2)
 201bb0c:	10bfffcc 	andi	r2,r2,65535
 201bb10:	10001e26 	beq	r2,zero,201bb8c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201bb14:	e0bff817 	ldw	r2,-32(fp)
 201bb18:	10800417 	ldw	r2,16(r2)
 201bb1c:	11000104 	addi	r4,r2,4
 201bb20:	e0fff817 	ldw	r3,-32(fp)
 201bb24:	19000415 	stw	r4,16(r3)
 201bb28:	10800017 	ldw	r2,0(r2)
 201bb2c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201bb30:	e0bff817 	ldw	r2,-32(fp)
 201bb34:	1080058b 	ldhu	r2,22(r2)
 201bb38:	10bfffc4 	addi	r2,r2,-1
 201bb3c:	1007883a 	mov	r3,r2
 201bb40:	e0bff817 	ldw	r2,-32(fp)
 201bb44:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201bb48:	e0bff817 	ldw	r2,-32(fp)
 201bb4c:	10c00417 	ldw	r3,16(r2)
 201bb50:	e0bff817 	ldw	r2,-32(fp)
 201bb54:	10800217 	ldw	r2,8(r2)
 201bb58:	1880041e 	bne	r3,r2,201bb6c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 201bb5c:	e0bff817 	ldw	r2,-32(fp)
 201bb60:	10c00117 	ldw	r3,4(r2)
 201bb64:	e0bff817 	ldw	r2,-32(fp)
 201bb68:	10c00415 	stw	r3,16(r2)
 201bb6c:	e0bff617 	ldw	r2,-40(fp)
 201bb70:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bb74:	e0bff717 	ldw	r2,-36(fp)
 201bb78:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201bb7c:	e0bfff17 	ldw	r2,-4(fp)
 201bb80:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 201bb84:	e0bff517 	ldw	r2,-44(fp)
 201bb88:	00004306 	br	201bc98 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 201bb8c:	d0a7ad17 	ldw	r2,-24908(gp)
 201bb90:	d0e7ad17 	ldw	r3,-24908(gp)
 201bb94:	18c00c03 	ldbu	r3,48(r3)
 201bb98:	18c00114 	ori	r3,r3,4
 201bb9c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201bba0:	d0a7ad17 	ldw	r2,-24908(gp)
 201bba4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 201bba8:	d0a7ad17 	ldw	r2,-24908(gp)
 201bbac:	e0fffe0b 	ldhu	r3,-8(fp)
 201bbb0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 201bbb4:	e13ffd17 	ldw	r4,-12(fp)
 201bbb8:	20179b40 	call	20179b4 <OS_EventTaskWait>
 201bbbc:	e0bff617 	ldw	r2,-40(fp)
 201bbc0:	e0bffb15 	stw	r2,-20(fp)
 201bbc4:	e0bffb17 	ldw	r2,-20(fp)
 201bbc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 201bbcc:	20182680 	call	2018268 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bbd0:	0005303a 	rdctl	r2,status
 201bbd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bbd8:	e0fff917 	ldw	r3,-28(fp)
 201bbdc:	00bfff84 	movi	r2,-2
 201bbe0:	1884703a 	and	r2,r3,r2
 201bbe4:	1001703a 	wrctl	status,r2
  
  return context;
 201bbe8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201bbec:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201bbf0:	d0a7ad17 	ldw	r2,-24908(gp)
 201bbf4:	10800c43 	ldbu	r2,49(r2)
 201bbf8:	10803fcc 	andi	r2,r2,255
 201bbfc:	10000326 	beq	r2,zero,201bc0c <OSQPend+0x1ec>
 201bc00:	108000a0 	cmpeqi	r2,r2,2
 201bc04:	1000071e 	bne	r2,zero,201bc24 <OSQPend+0x204>
 201bc08:	00000b06 	br	201bc38 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 201bc0c:	d0a7ad17 	ldw	r2,-24908(gp)
 201bc10:	10800917 	ldw	r2,36(r2)
 201bc14:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 201bc18:	e0bfff17 	ldw	r2,-4(fp)
 201bc1c:	10000005 	stb	zero,0(r2)
             break;
 201bc20:	00000e06 	br	201bc5c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201bc24:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201bc28:	e0bfff17 	ldw	r2,-4(fp)
 201bc2c:	00c00384 	movi	r3,14
 201bc30:	10c00005 	stb	r3,0(r2)
             break;
 201bc34:	00000906 	br	201bc5c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201bc38:	d0a7ad17 	ldw	r2,-24908(gp)
 201bc3c:	e17ffd17 	ldw	r5,-12(fp)
 201bc40:	1009883a 	mov	r4,r2
 201bc44:	2017c140 	call	2017c14 <OS_EventTaskRemove>
             pmsg = (void *)0;
 201bc48:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201bc4c:	e0bfff17 	ldw	r2,-4(fp)
 201bc50:	00c00284 	movi	r3,10
 201bc54:	10c00005 	stb	r3,0(r2)
             break;
 201bc58:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201bc5c:	d0a7ad17 	ldw	r2,-24908(gp)
 201bc60:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201bc64:	d0a7ad17 	ldw	r2,-24908(gp)
 201bc68:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201bc6c:	d0a7ad17 	ldw	r2,-24908(gp)
 201bc70:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201bc74:	d0a7ad17 	ldw	r2,-24908(gp)
 201bc78:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201bc7c:	d0a7ad17 	ldw	r2,-24908(gp)
 201bc80:	10000915 	stw	zero,36(r2)
 201bc84:	e0bff617 	ldw	r2,-40(fp)
 201bc88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bc8c:	e0bffa17 	ldw	r2,-24(fp)
 201bc90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201bc94:	e0bff517 	ldw	r2,-44(fp)
}
 201bc98:	e037883a 	mov	sp,fp
 201bc9c:	dfc00117 	ldw	ra,4(sp)
 201bca0:	df000017 	ldw	fp,0(sp)
 201bca4:	dec00204 	addi	sp,sp,8
 201bca8:	f800283a 	ret

0201bcac <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201bcac:	defff604 	addi	sp,sp,-40
 201bcb0:	dfc00915 	stw	ra,36(sp)
 201bcb4:	df000815 	stw	fp,32(sp)
 201bcb8:	df000804 	addi	fp,sp,32
 201bcbc:	e13ffd15 	stw	r4,-12(fp)
 201bcc0:	2805883a 	mov	r2,r5
 201bcc4:	e1bfff15 	stw	r6,-4(fp)
 201bcc8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201bccc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201bcd0:	e0bfff17 	ldw	r2,-4(fp)
 201bcd4:	1000021e 	bne	r2,zero,201bce0 <OSQPendAbort+0x34>
        return (0);
 201bcd8:	0005883a 	mov	r2,zero
 201bcdc:	00004906 	br	201be04 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201bce0:	e0bffd17 	ldw	r2,-12(fp)
 201bce4:	1000051e 	bne	r2,zero,201bcfc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201bce8:	e0bfff17 	ldw	r2,-4(fp)
 201bcec:	00c00104 	movi	r3,4
 201bcf0:	10c00005 	stb	r3,0(r2)
        return (0);
 201bcf4:	0005883a 	mov	r2,zero
 201bcf8:	00004206 	br	201be04 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 201bcfc:	e0bffd17 	ldw	r2,-12(fp)
 201bd00:	10800003 	ldbu	r2,0(r2)
 201bd04:	10803fcc 	andi	r2,r2,255
 201bd08:	108000a0 	cmpeqi	r2,r2,2
 201bd0c:	1000051e 	bne	r2,zero,201bd24 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201bd10:	e0bfff17 	ldw	r2,-4(fp)
 201bd14:	00c00044 	movi	r3,1
 201bd18:	10c00005 	stb	r3,0(r2)
        return (0);
 201bd1c:	0005883a 	mov	r2,zero
 201bd20:	00003806 	br	201be04 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bd24:	0005303a 	rdctl	r2,status
 201bd28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bd2c:	e0fffc17 	ldw	r3,-16(fp)
 201bd30:	00bfff84 	movi	r2,-2
 201bd34:	1884703a 	and	r2,r3,r2
 201bd38:	1001703a 	wrctl	status,r2
  
  return context;
 201bd3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201bd40:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 201bd44:	e0bffd17 	ldw	r2,-12(fp)
 201bd48:	10800283 	ldbu	r2,10(r2)
 201bd4c:	10803fcc 	andi	r2,r2,255
 201bd50:	10002526 	beq	r2,zero,201bde8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 201bd54:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201bd58:	e0bffe03 	ldbu	r2,-8(fp)
 201bd5c:	10800060 	cmpeqi	r2,r2,1
 201bd60:	10000e26 	beq	r2,zero,201bd9c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201bd64:	00000806 	br	201bd88 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201bd68:	01c00084 	movi	r7,2
 201bd6c:	01800104 	movi	r6,4
 201bd70:	000b883a 	mov	r5,zero
 201bd74:	e13ffd17 	ldw	r4,-12(fp)
 201bd78:	201781c0 	call	201781c <OS_EventTaskRdy>
                     nbr_tasks++;
 201bd7c:	e0bff803 	ldbu	r2,-32(fp)
 201bd80:	10800044 	addi	r2,r2,1
 201bd84:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201bd88:	e0bffd17 	ldw	r2,-12(fp)
 201bd8c:	10800283 	ldbu	r2,10(r2)
 201bd90:	10803fcc 	andi	r2,r2,255
 201bd94:	103ff41e 	bne	r2,zero,201bd68 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201bd98:	00000906 	br	201bdc0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201bd9c:	01c00084 	movi	r7,2
 201bda0:	01800104 	movi	r6,4
 201bda4:	000b883a 	mov	r5,zero
 201bda8:	e13ffd17 	ldw	r4,-12(fp)
 201bdac:	201781c0 	call	201781c <OS_EventTaskRdy>
                 nbr_tasks++;
 201bdb0:	e0bff803 	ldbu	r2,-32(fp)
 201bdb4:	10800044 	addi	r2,r2,1
 201bdb8:	e0bff805 	stb	r2,-32(fp)
                 break;
 201bdbc:	0001883a 	nop
 201bdc0:	e0bff917 	ldw	r2,-28(fp)
 201bdc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bdc8:	e0bffa17 	ldw	r2,-24(fp)
 201bdcc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 201bdd0:	20182680 	call	2018268 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201bdd4:	e0bfff17 	ldw	r2,-4(fp)
 201bdd8:	00c00384 	movi	r3,14
 201bddc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201bde0:	e0bff803 	ldbu	r2,-32(fp)
 201bde4:	00000706 	br	201be04 <OSQPendAbort+0x158>
 201bde8:	e0bff917 	ldw	r2,-28(fp)
 201bdec:	e0bffb15 	stw	r2,-20(fp)
 201bdf0:	e0bffb17 	ldw	r2,-20(fp)
 201bdf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201bdf8:	e0bfff17 	ldw	r2,-4(fp)
 201bdfc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 201be00:	0005883a 	mov	r2,zero
}
 201be04:	e037883a 	mov	sp,fp
 201be08:	dfc00117 	ldw	ra,4(sp)
 201be0c:	df000017 	ldw	fp,0(sp)
 201be10:	dec00204 	addi	sp,sp,8
 201be14:	f800283a 	ret

0201be18 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 201be18:	defff604 	addi	sp,sp,-40
 201be1c:	dfc00915 	stw	ra,36(sp)
 201be20:	df000815 	stw	fp,32(sp)
 201be24:	df000804 	addi	fp,sp,32
 201be28:	e13ffe15 	stw	r4,-8(fp)
 201be2c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201be30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 201be34:	e0bffe17 	ldw	r2,-8(fp)
 201be38:	1000021e 	bne	r2,zero,201be44 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201be3c:	00800104 	movi	r2,4
 201be40:	00004a06 	br	201bf6c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 201be44:	e0bffe17 	ldw	r2,-8(fp)
 201be48:	10800003 	ldbu	r2,0(r2)
 201be4c:	10803fcc 	andi	r2,r2,255
 201be50:	108000a0 	cmpeqi	r2,r2,2
 201be54:	1000021e 	bne	r2,zero,201be60 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 201be58:	00800044 	movi	r2,1
 201be5c:	00004306 	br	201bf6c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201be60:	0005303a 	rdctl	r2,status
 201be64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201be68:	e0fffd17 	ldw	r3,-12(fp)
 201be6c:	00bfff84 	movi	r2,-2
 201be70:	1884703a 	and	r2,r3,r2
 201be74:	1001703a 	wrctl	status,r2
  
  return context;
 201be78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201be7c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 201be80:	e0bffe17 	ldw	r2,-8(fp)
 201be84:	10800283 	ldbu	r2,10(r2)
 201be88:	10803fcc 	andi	r2,r2,255
 201be8c:	10000c26 	beq	r2,zero,201bec0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201be90:	000f883a 	mov	r7,zero
 201be94:	01800104 	movi	r6,4
 201be98:	e17fff17 	ldw	r5,-4(fp)
 201be9c:	e13ffe17 	ldw	r4,-8(fp)
 201bea0:	201781c0 	call	201781c <OS_EventTaskRdy>
 201bea4:	e0bff817 	ldw	r2,-32(fp)
 201bea8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201beac:	e0bff917 	ldw	r2,-28(fp)
 201beb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 201beb4:	20182680 	call	2018268 <OS_Sched>
        return (OS_ERR_NONE);
 201beb8:	0005883a 	mov	r2,zero
 201bebc:	00002b06 	br	201bf6c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 201bec0:	e0bffe17 	ldw	r2,-8(fp)
 201bec4:	10800117 	ldw	r2,4(r2)
 201bec8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 201becc:	e0bffb17 	ldw	r2,-20(fp)
 201bed0:	10c0058b 	ldhu	r3,22(r2)
 201bed4:	e0bffb17 	ldw	r2,-20(fp)
 201bed8:	1080050b 	ldhu	r2,20(r2)
 201bedc:	18ffffcc 	andi	r3,r3,65535
 201bee0:	10bfffcc 	andi	r2,r2,65535
 201bee4:	18800636 	bltu	r3,r2,201bf00 <OSQPost+0xe8>
 201bee8:	e0bff817 	ldw	r2,-32(fp)
 201beec:	e0bffa15 	stw	r2,-24(fp)
 201bef0:	e0bffa17 	ldw	r2,-24(fp)
 201bef4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201bef8:	00800784 	movi	r2,30
 201befc:	00001b06 	br	201bf6c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 201bf00:	e0bffb17 	ldw	r2,-20(fp)
 201bf04:	10800317 	ldw	r2,12(r2)
 201bf08:	11000104 	addi	r4,r2,4
 201bf0c:	e0fffb17 	ldw	r3,-20(fp)
 201bf10:	19000315 	stw	r4,12(r3)
 201bf14:	e0ffff17 	ldw	r3,-4(fp)
 201bf18:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 201bf1c:	e0bffb17 	ldw	r2,-20(fp)
 201bf20:	1080058b 	ldhu	r2,22(r2)
 201bf24:	10800044 	addi	r2,r2,1
 201bf28:	1007883a 	mov	r3,r2
 201bf2c:	e0bffb17 	ldw	r2,-20(fp)
 201bf30:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 201bf34:	e0bffb17 	ldw	r2,-20(fp)
 201bf38:	10c00317 	ldw	r3,12(r2)
 201bf3c:	e0bffb17 	ldw	r2,-20(fp)
 201bf40:	10800217 	ldw	r2,8(r2)
 201bf44:	1880041e 	bne	r3,r2,201bf58 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 201bf48:	e0bffb17 	ldw	r2,-20(fp)
 201bf4c:	10c00117 	ldw	r3,4(r2)
 201bf50:	e0bffb17 	ldw	r2,-20(fp)
 201bf54:	10c00315 	stw	r3,12(r2)
 201bf58:	e0bff817 	ldw	r2,-32(fp)
 201bf5c:	e0bffc15 	stw	r2,-16(fp)
 201bf60:	e0bffc17 	ldw	r2,-16(fp)
 201bf64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201bf68:	0005883a 	mov	r2,zero
}
 201bf6c:	e037883a 	mov	sp,fp
 201bf70:	dfc00117 	ldw	ra,4(sp)
 201bf74:	df000017 	ldw	fp,0(sp)
 201bf78:	dec00204 	addi	sp,sp,8
 201bf7c:	f800283a 	ret

0201bf80 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 201bf80:	defff604 	addi	sp,sp,-40
 201bf84:	dfc00915 	stw	ra,36(sp)
 201bf88:	df000815 	stw	fp,32(sp)
 201bf8c:	df000804 	addi	fp,sp,32
 201bf90:	e13ffe15 	stw	r4,-8(fp)
 201bf94:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201bf98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201bf9c:	e0bffe17 	ldw	r2,-8(fp)
 201bfa0:	1000021e 	bne	r2,zero,201bfac <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201bfa4:	00800104 	movi	r2,4
 201bfa8:	00004c06 	br	201c0dc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201bfac:	e0bffe17 	ldw	r2,-8(fp)
 201bfb0:	10800003 	ldbu	r2,0(r2)
 201bfb4:	10803fcc 	andi	r2,r2,255
 201bfb8:	108000a0 	cmpeqi	r2,r2,2
 201bfbc:	1000021e 	bne	r2,zero,201bfc8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 201bfc0:	00800044 	movi	r2,1
 201bfc4:	00004506 	br	201c0dc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bfc8:	0005303a 	rdctl	r2,status
 201bfcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bfd0:	e0fffd17 	ldw	r3,-12(fp)
 201bfd4:	00bfff84 	movi	r2,-2
 201bfd8:	1884703a 	and	r2,r3,r2
 201bfdc:	1001703a 	wrctl	status,r2
  
  return context;
 201bfe0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201bfe4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 201bfe8:	e0bffe17 	ldw	r2,-8(fp)
 201bfec:	10800283 	ldbu	r2,10(r2)
 201bff0:	10803fcc 	andi	r2,r2,255
 201bff4:	10000c26 	beq	r2,zero,201c028 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201bff8:	000f883a 	mov	r7,zero
 201bffc:	01800104 	movi	r6,4
 201c000:	e17fff17 	ldw	r5,-4(fp)
 201c004:	e13ffe17 	ldw	r4,-8(fp)
 201c008:	201781c0 	call	201781c <OS_EventTaskRdy>
 201c00c:	e0bff817 	ldw	r2,-32(fp)
 201c010:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c014:	e0bff917 	ldw	r2,-28(fp)
 201c018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201c01c:	20182680 	call	2018268 <OS_Sched>
        return (OS_ERR_NONE);
 201c020:	0005883a 	mov	r2,zero
 201c024:	00002d06 	br	201c0dc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201c028:	e0bffe17 	ldw	r2,-8(fp)
 201c02c:	10800117 	ldw	r2,4(r2)
 201c030:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201c034:	e0bffb17 	ldw	r2,-20(fp)
 201c038:	10c0058b 	ldhu	r3,22(r2)
 201c03c:	e0bffb17 	ldw	r2,-20(fp)
 201c040:	1080050b 	ldhu	r2,20(r2)
 201c044:	18ffffcc 	andi	r3,r3,65535
 201c048:	10bfffcc 	andi	r2,r2,65535
 201c04c:	18800636 	bltu	r3,r2,201c068 <OSQPostFront+0xe8>
 201c050:	e0bff817 	ldw	r2,-32(fp)
 201c054:	e0bffa15 	stw	r2,-24(fp)
 201c058:	e0bffa17 	ldw	r2,-24(fp)
 201c05c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201c060:	00800784 	movi	r2,30
 201c064:	00001d06 	br	201c0dc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 201c068:	e0bffb17 	ldw	r2,-20(fp)
 201c06c:	10c00417 	ldw	r3,16(r2)
 201c070:	e0bffb17 	ldw	r2,-20(fp)
 201c074:	10800117 	ldw	r2,4(r2)
 201c078:	1880041e 	bne	r3,r2,201c08c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 201c07c:	e0bffb17 	ldw	r2,-20(fp)
 201c080:	10c00217 	ldw	r3,8(r2)
 201c084:	e0bffb17 	ldw	r2,-20(fp)
 201c088:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 201c08c:	e0bffb17 	ldw	r2,-20(fp)
 201c090:	10800417 	ldw	r2,16(r2)
 201c094:	10ffff04 	addi	r3,r2,-4
 201c098:	e0bffb17 	ldw	r2,-20(fp)
 201c09c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 201c0a0:	e0bffb17 	ldw	r2,-20(fp)
 201c0a4:	10800417 	ldw	r2,16(r2)
 201c0a8:	e0ffff17 	ldw	r3,-4(fp)
 201c0ac:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 201c0b0:	e0bffb17 	ldw	r2,-20(fp)
 201c0b4:	1080058b 	ldhu	r2,22(r2)
 201c0b8:	10800044 	addi	r2,r2,1
 201c0bc:	1007883a 	mov	r3,r2
 201c0c0:	e0bffb17 	ldw	r2,-20(fp)
 201c0c4:	10c0058d 	sth	r3,22(r2)
 201c0c8:	e0bff817 	ldw	r2,-32(fp)
 201c0cc:	e0bffc15 	stw	r2,-16(fp)
 201c0d0:	e0bffc17 	ldw	r2,-16(fp)
 201c0d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c0d8:	0005883a 	mov	r2,zero
}
 201c0dc:	e037883a 	mov	sp,fp
 201c0e0:	dfc00117 	ldw	ra,4(sp)
 201c0e4:	df000017 	ldw	fp,0(sp)
 201c0e8:	dec00204 	addi	sp,sp,8
 201c0ec:	f800283a 	ret

0201c0f0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201c0f0:	defff504 	addi	sp,sp,-44
 201c0f4:	dfc00a15 	stw	ra,40(sp)
 201c0f8:	df000915 	stw	fp,36(sp)
 201c0fc:	df000904 	addi	fp,sp,36
 201c100:	e13ffd15 	stw	r4,-12(fp)
 201c104:	e17ffe15 	stw	r5,-8(fp)
 201c108:	3005883a 	mov	r2,r6
 201c10c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201c110:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201c114:	e0bffd17 	ldw	r2,-12(fp)
 201c118:	1000021e 	bne	r2,zero,201c124 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201c11c:	00800104 	movi	r2,4
 201c120:	00007106 	br	201c2e8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201c124:	e0bffd17 	ldw	r2,-12(fp)
 201c128:	10800003 	ldbu	r2,0(r2)
 201c12c:	10803fcc 	andi	r2,r2,255
 201c130:	108000a0 	cmpeqi	r2,r2,2
 201c134:	1000021e 	bne	r2,zero,201c140 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 201c138:	00800044 	movi	r2,1
 201c13c:	00006a06 	br	201c2e8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c140:	0005303a 	rdctl	r2,status
 201c144:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c148:	e0fffc17 	ldw	r3,-16(fp)
 201c14c:	00bfff84 	movi	r2,-2
 201c150:	1884703a 	and	r2,r3,r2
 201c154:	1001703a 	wrctl	status,r2
  
  return context;
 201c158:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c15c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 201c160:	e0bffd17 	ldw	r2,-12(fp)
 201c164:	10800283 	ldbu	r2,10(r2)
 201c168:	10803fcc 	andi	r2,r2,255
 201c16c:	10001d26 	beq	r2,zero,201c1e4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201c170:	e0bfff03 	ldbu	r2,-4(fp)
 201c174:	1080004c 	andi	r2,r2,1
 201c178:	10000b26 	beq	r2,zero,201c1a8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201c17c:	00000506 	br	201c194 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201c180:	000f883a 	mov	r7,zero
 201c184:	01800104 	movi	r6,4
 201c188:	e17ffe17 	ldw	r5,-8(fp)
 201c18c:	e13ffd17 	ldw	r4,-12(fp)
 201c190:	201781c0 	call	201781c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201c194:	e0bffd17 	ldw	r2,-12(fp)
 201c198:	10800283 	ldbu	r2,10(r2)
 201c19c:	10803fcc 	andi	r2,r2,255
 201c1a0:	103ff71e 	bne	r2,zero,201c180 <OSQPostOpt+0x90>
 201c1a4:	00000506 	br	201c1bc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201c1a8:	000f883a 	mov	r7,zero
 201c1ac:	01800104 	movi	r6,4
 201c1b0:	e17ffe17 	ldw	r5,-8(fp)
 201c1b4:	e13ffd17 	ldw	r4,-12(fp)
 201c1b8:	201781c0 	call	201781c <OS_EventTaskRdy>
 201c1bc:	e0bff717 	ldw	r2,-36(fp)
 201c1c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c1c4:	e0bff817 	ldw	r2,-32(fp)
 201c1c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 201c1cc:	e0bfff03 	ldbu	r2,-4(fp)
 201c1d0:	1080010c 	andi	r2,r2,4
 201c1d4:	1000011e 	bne	r2,zero,201c1dc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 201c1d8:	20182680 	call	2018268 <OS_Sched>
        }
        return (OS_ERR_NONE);
 201c1dc:	0005883a 	mov	r2,zero
 201c1e0:	00004106 	br	201c2e8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201c1e4:	e0bffd17 	ldw	r2,-12(fp)
 201c1e8:	10800117 	ldw	r2,4(r2)
 201c1ec:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201c1f0:	e0bffa17 	ldw	r2,-24(fp)
 201c1f4:	10c0058b 	ldhu	r3,22(r2)
 201c1f8:	e0bffa17 	ldw	r2,-24(fp)
 201c1fc:	1080050b 	ldhu	r2,20(r2)
 201c200:	18ffffcc 	andi	r3,r3,65535
 201c204:	10bfffcc 	andi	r2,r2,65535
 201c208:	18800636 	bltu	r3,r2,201c224 <OSQPostOpt+0x134>
 201c20c:	e0bff717 	ldw	r2,-36(fp)
 201c210:	e0bff915 	stw	r2,-28(fp)
 201c214:	e0bff917 	ldw	r2,-28(fp)
 201c218:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201c21c:	00800784 	movi	r2,30
 201c220:	00003106 	br	201c2e8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 201c224:	e0bfff03 	ldbu	r2,-4(fp)
 201c228:	1080008c 	andi	r2,r2,2
 201c22c:	10001326 	beq	r2,zero,201c27c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 201c230:	e0bffa17 	ldw	r2,-24(fp)
 201c234:	10c00417 	ldw	r3,16(r2)
 201c238:	e0bffa17 	ldw	r2,-24(fp)
 201c23c:	10800117 	ldw	r2,4(r2)
 201c240:	1880041e 	bne	r3,r2,201c254 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 201c244:	e0bffa17 	ldw	r2,-24(fp)
 201c248:	10c00217 	ldw	r3,8(r2)
 201c24c:	e0bffa17 	ldw	r2,-24(fp)
 201c250:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 201c254:	e0bffa17 	ldw	r2,-24(fp)
 201c258:	10800417 	ldw	r2,16(r2)
 201c25c:	10ffff04 	addi	r3,r2,-4
 201c260:	e0bffa17 	ldw	r2,-24(fp)
 201c264:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 201c268:	e0bffa17 	ldw	r2,-24(fp)
 201c26c:	10800417 	ldw	r2,16(r2)
 201c270:	e0fffe17 	ldw	r3,-8(fp)
 201c274:	10c00015 	stw	r3,0(r2)
 201c278:	00001006 	br	201c2bc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 201c27c:	e0bffa17 	ldw	r2,-24(fp)
 201c280:	10800317 	ldw	r2,12(r2)
 201c284:	11000104 	addi	r4,r2,4
 201c288:	e0fffa17 	ldw	r3,-24(fp)
 201c28c:	19000315 	stw	r4,12(r3)
 201c290:	e0fffe17 	ldw	r3,-8(fp)
 201c294:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 201c298:	e0bffa17 	ldw	r2,-24(fp)
 201c29c:	10c00317 	ldw	r3,12(r2)
 201c2a0:	e0bffa17 	ldw	r2,-24(fp)
 201c2a4:	10800217 	ldw	r2,8(r2)
 201c2a8:	1880041e 	bne	r3,r2,201c2bc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 201c2ac:	e0bffa17 	ldw	r2,-24(fp)
 201c2b0:	10c00117 	ldw	r3,4(r2)
 201c2b4:	e0bffa17 	ldw	r2,-24(fp)
 201c2b8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 201c2bc:	e0bffa17 	ldw	r2,-24(fp)
 201c2c0:	1080058b 	ldhu	r2,22(r2)
 201c2c4:	10800044 	addi	r2,r2,1
 201c2c8:	1007883a 	mov	r3,r2
 201c2cc:	e0bffa17 	ldw	r2,-24(fp)
 201c2d0:	10c0058d 	sth	r3,22(r2)
 201c2d4:	e0bff717 	ldw	r2,-36(fp)
 201c2d8:	e0bffb15 	stw	r2,-20(fp)
 201c2dc:	e0bffb17 	ldw	r2,-20(fp)
 201c2e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c2e4:	0005883a 	mov	r2,zero
}
 201c2e8:	e037883a 	mov	sp,fp
 201c2ec:	dfc00117 	ldw	ra,4(sp)
 201c2f0:	df000017 	ldw	fp,0(sp)
 201c2f4:	dec00204 	addi	sp,sp,8
 201c2f8:	f800283a 	ret

0201c2fc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 201c2fc:	defff604 	addi	sp,sp,-40
 201c300:	df000915 	stw	fp,36(sp)
 201c304:	df000904 	addi	fp,sp,36
 201c308:	e13ffe15 	stw	r4,-8(fp)
 201c30c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201c310:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 201c314:	e0bffe17 	ldw	r2,-8(fp)
 201c318:	1000021e 	bne	r2,zero,201c324 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201c31c:	00800104 	movi	r2,4
 201c320:	00004906 	br	201c448 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 201c324:	e0bfff17 	ldw	r2,-4(fp)
 201c328:	1000021e 	bne	r2,zero,201c334 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201c32c:	00800244 	movi	r2,9
 201c330:	00004506 	br	201c448 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 201c334:	e0bffe17 	ldw	r2,-8(fp)
 201c338:	10800003 	ldbu	r2,0(r2)
 201c33c:	10803fcc 	andi	r2,r2,255
 201c340:	108000a0 	cmpeqi	r2,r2,2
 201c344:	1000021e 	bne	r2,zero,201c350 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201c348:	00800044 	movi	r2,1
 201c34c:	00003e06 	br	201c448 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c350:	0005303a 	rdctl	r2,status
 201c354:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c358:	e0fffd17 	ldw	r3,-12(fp)
 201c35c:	00bfff84 	movi	r2,-2
 201c360:	1884703a 	and	r2,r3,r2
 201c364:	1001703a 	wrctl	status,r2
  
  return context;
 201c368:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201c36c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 201c370:	e0bffe17 	ldw	r2,-8(fp)
 201c374:	10c00283 	ldbu	r3,10(r2)
 201c378:	e0bfff17 	ldw	r2,-4(fp)
 201c37c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 201c380:	e0bffe17 	ldw	r2,-8(fp)
 201c384:	108002c4 	addi	r2,r2,11
 201c388:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 201c38c:	e0bfff17 	ldw	r2,-4(fp)
 201c390:	10800204 	addi	r2,r2,8
 201c394:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201c398:	e03ff705 	stb	zero,-36(fp)
 201c39c:	00000b06 	br	201c3cc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 201c3a0:	e0bff917 	ldw	r2,-28(fp)
 201c3a4:	10c00044 	addi	r3,r2,1
 201c3a8:	e0fff915 	stw	r3,-28(fp)
 201c3ac:	e0fff817 	ldw	r3,-32(fp)
 201c3b0:	19000044 	addi	r4,r3,1
 201c3b4:	e13ff815 	stw	r4,-32(fp)
 201c3b8:	18c00003 	ldbu	r3,0(r3)
 201c3bc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201c3c0:	e0bff703 	ldbu	r2,-36(fp)
 201c3c4:	10800044 	addi	r2,r2,1
 201c3c8:	e0bff705 	stb	r2,-36(fp)
 201c3cc:	e0bff703 	ldbu	r2,-36(fp)
 201c3d0:	108000f0 	cmpltui	r2,r2,3
 201c3d4:	103ff21e 	bne	r2,zero,201c3a0 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 201c3d8:	e0bffe17 	ldw	r2,-8(fp)
 201c3dc:	10800117 	ldw	r2,4(r2)
 201c3e0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 201c3e4:	e0bffc17 	ldw	r2,-16(fp)
 201c3e8:	1080058b 	ldhu	r2,22(r2)
 201c3ec:	10bfffcc 	andi	r2,r2,65535
 201c3f0:	10000626 	beq	r2,zero,201c40c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 201c3f4:	e0bffc17 	ldw	r2,-16(fp)
 201c3f8:	10800417 	ldw	r2,16(r2)
 201c3fc:	10c00017 	ldw	r3,0(r2)
 201c400:	e0bfff17 	ldw	r2,-4(fp)
 201c404:	10c00015 	stw	r3,0(r2)
 201c408:	00000206 	br	201c414 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 201c40c:	e0bfff17 	ldw	r2,-4(fp)
 201c410:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 201c414:	e0bffc17 	ldw	r2,-16(fp)
 201c418:	10c0058b 	ldhu	r3,22(r2)
 201c41c:	e0bfff17 	ldw	r2,-4(fp)
 201c420:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 201c424:	e0bffc17 	ldw	r2,-16(fp)
 201c428:	10c0050b 	ldhu	r3,20(r2)
 201c42c:	e0bfff17 	ldw	r2,-4(fp)
 201c430:	10c0018d 	sth	r3,6(r2)
 201c434:	e0bffa17 	ldw	r2,-24(fp)
 201c438:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c43c:	e0bffb17 	ldw	r2,-20(fp)
 201c440:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c444:	0005883a 	mov	r2,zero
}
 201c448:	e037883a 	mov	sp,fp
 201c44c:	df000017 	ldw	fp,0(sp)
 201c450:	dec00104 	addi	sp,sp,4
 201c454:	f800283a 	ret

0201c458 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 201c458:	defffb04 	addi	sp,sp,-20
 201c45c:	dfc00415 	stw	ra,16(sp)
 201c460:	df000315 	stw	fp,12(sp)
 201c464:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 201c468:	01407804 	movi	r5,480
 201c46c:	010080f4 	movhi	r4,515
 201c470:	21343604 	addi	r4,r4,-12072
 201c474:	20181ac0 	call	20181ac <OS_MemClr>
    pq1 = &OSQTbl[0];
 201c478:	008080f4 	movhi	r2,515
 201c47c:	10b43604 	addi	r2,r2,-12072
 201c480:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 201c484:	008080f4 	movhi	r2,515
 201c488:	10b43c04 	addi	r2,r2,-12048
 201c48c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201c490:	e03ffd0d 	sth	zero,-12(fp)
 201c494:	00000c06 	br	201c4c8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 201c498:	e0bffe17 	ldw	r2,-8(fp)
 201c49c:	e0ffff17 	ldw	r3,-4(fp)
 201c4a0:	10c00015 	stw	r3,0(r2)
        pq1++;
 201c4a4:	e0bffe17 	ldw	r2,-8(fp)
 201c4a8:	10800604 	addi	r2,r2,24
 201c4ac:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 201c4b0:	e0bfff17 	ldw	r2,-4(fp)
 201c4b4:	10800604 	addi	r2,r2,24
 201c4b8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201c4bc:	e0bffd0b 	ldhu	r2,-12(fp)
 201c4c0:	10800044 	addi	r2,r2,1
 201c4c4:	e0bffd0d 	sth	r2,-12(fp)
 201c4c8:	e0bffd0b 	ldhu	r2,-12(fp)
 201c4cc:	108004f0 	cmpltui	r2,r2,19
 201c4d0:	103ff11e 	bne	r2,zero,201c498 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 201c4d4:	e0bffe17 	ldw	r2,-8(fp)
 201c4d8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 201c4dc:	008080f4 	movhi	r2,515
 201c4e0:	10b43604 	addi	r2,r2,-12072
 201c4e4:	d0a7a915 	stw	r2,-24924(gp)
#endif
}
 201c4e8:	0001883a 	nop
 201c4ec:	e037883a 	mov	sp,fp
 201c4f0:	dfc00117 	ldw	ra,4(sp)
 201c4f4:	df000017 	ldw	fp,0(sp)
 201c4f8:	dec00204 	addi	sp,sp,8
 201c4fc:	f800283a 	ret

0201c500 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 201c500:	defffa04 	addi	sp,sp,-24
 201c504:	df000515 	stw	fp,20(sp)
 201c508:	df000504 	addi	fp,sp,20
 201c50c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201c510:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201c514:	e0bfff17 	ldw	r2,-4(fp)
 201c518:	1000021e 	bne	r2,zero,201c524 <OSSemAccept+0x24>
        return (0);
 201c51c:	0005883a 	mov	r2,zero
 201c520:	00001f06 	br	201c5a0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201c524:	e0bfff17 	ldw	r2,-4(fp)
 201c528:	10800003 	ldbu	r2,0(r2)
 201c52c:	10803fcc 	andi	r2,r2,255
 201c530:	108000e0 	cmpeqi	r2,r2,3
 201c534:	1000021e 	bne	r2,zero,201c540 <OSSemAccept+0x40>
        return (0);
 201c538:	0005883a 	mov	r2,zero
 201c53c:	00001806 	br	201c5a0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c540:	0005303a 	rdctl	r2,status
 201c544:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c548:	e0fffe17 	ldw	r3,-8(fp)
 201c54c:	00bfff84 	movi	r2,-2
 201c550:	1884703a 	and	r2,r3,r2
 201c554:	1001703a 	wrctl	status,r2
  
  return context;
 201c558:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201c55c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 201c560:	e0bfff17 	ldw	r2,-4(fp)
 201c564:	1080020b 	ldhu	r2,8(r2)
 201c568:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 201c56c:	e0bffd0b 	ldhu	r2,-12(fp)
 201c570:	10000626 	beq	r2,zero,201c58c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 201c574:	e0bfff17 	ldw	r2,-4(fp)
 201c578:	1080020b 	ldhu	r2,8(r2)
 201c57c:	10bfffc4 	addi	r2,r2,-1
 201c580:	1007883a 	mov	r3,r2
 201c584:	e0bfff17 	ldw	r2,-4(fp)
 201c588:	10c0020d 	sth	r3,8(r2)
 201c58c:	e0bffb17 	ldw	r2,-20(fp)
 201c590:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c594:	e0bffc17 	ldw	r2,-16(fp)
 201c598:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 201c59c:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201c5a0:	e037883a 	mov	sp,fp
 201c5a4:	df000017 	ldw	fp,0(sp)
 201c5a8:	dec00104 	addi	sp,sp,4
 201c5ac:	f800283a 	ret

0201c5b0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 201c5b0:	defff904 	addi	sp,sp,-28
 201c5b4:	dfc00615 	stw	ra,24(sp)
 201c5b8:	df000515 	stw	fp,20(sp)
 201c5bc:	df000504 	addi	fp,sp,20
 201c5c0:	2005883a 	mov	r2,r4
 201c5c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201c5c8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201c5cc:	d0a7ac03 	ldbu	r2,-24912(gp)
 201c5d0:	10803fcc 	andi	r2,r2,255
 201c5d4:	10000226 	beq	r2,zero,201c5e0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 201c5d8:	0005883a 	mov	r2,zero
 201c5dc:	00002506 	br	201c674 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c5e0:	0005303a 	rdctl	r2,status
 201c5e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c5e8:	e0fffe17 	ldw	r3,-8(fp)
 201c5ec:	00bfff84 	movi	r2,-2
 201c5f0:	1884703a 	and	r2,r3,r2
 201c5f4:	1001703a 	wrctl	status,r2
  
  return context;
 201c5f8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201c5fc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 201c600:	d0a7ab17 	ldw	r2,-24916(gp)
 201c604:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 201c608:	d0a7ab17 	ldw	r2,-24916(gp)
 201c60c:	10000326 	beq	r2,zero,201c61c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201c610:	d0a7ab17 	ldw	r2,-24916(gp)
 201c614:	10800117 	ldw	r2,4(r2)
 201c618:	d0a7ab15 	stw	r2,-24916(gp)
 201c61c:	e0bffb17 	ldw	r2,-20(fp)
 201c620:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c624:	e0bffc17 	ldw	r2,-16(fp)
 201c628:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 201c62c:	e0bffd17 	ldw	r2,-12(fp)
 201c630:	10000f26 	beq	r2,zero,201c670 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 201c634:	e0bffd17 	ldw	r2,-12(fp)
 201c638:	00c000c4 	movi	r3,3
 201c63c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 201c640:	e0bffd17 	ldw	r2,-12(fp)
 201c644:	e0ffff0b 	ldhu	r3,-4(fp)
 201c648:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 201c64c:	e0bffd17 	ldw	r2,-12(fp)
 201c650:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 201c654:	e0bffd17 	ldw	r2,-12(fp)
 201c658:	00c00fc4 	movi	r3,63
 201c65c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201c660:	e0bffd17 	ldw	r2,-12(fp)
 201c664:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 201c668:	e13ffd17 	ldw	r4,-12(fp)
 201c66c:	2017dcc0 	call	2017dcc <OS_EventWaitListInit>
    }
    return (pevent);
 201c670:	e0bffd17 	ldw	r2,-12(fp)
}
 201c674:	e037883a 	mov	sp,fp
 201c678:	dfc00117 	ldw	ra,4(sp)
 201c67c:	df000017 	ldw	fp,0(sp)
 201c680:	dec00204 	addi	sp,sp,8
 201c684:	f800283a 	ret

0201c688 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201c688:	defff304 	addi	sp,sp,-52
 201c68c:	dfc00c15 	stw	ra,48(sp)
 201c690:	df000b15 	stw	fp,44(sp)
 201c694:	df000b04 	addi	fp,sp,44
 201c698:	e13ffd15 	stw	r4,-12(fp)
 201c69c:	2805883a 	mov	r2,r5
 201c6a0:	e1bfff15 	stw	r6,-4(fp)
 201c6a4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201c6a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201c6ac:	e0bfff17 	ldw	r2,-4(fp)
 201c6b0:	1000021e 	bne	r2,zero,201c6bc <OSSemDel+0x34>
        return (pevent);
 201c6b4:	e0bffd17 	ldw	r2,-12(fp)
 201c6b8:	00007e06 	br	201c8b4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201c6bc:	e0bffd17 	ldw	r2,-12(fp)
 201c6c0:	1000051e 	bne	r2,zero,201c6d8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201c6c4:	e0bfff17 	ldw	r2,-4(fp)
 201c6c8:	00c00104 	movi	r3,4
 201c6cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c6d0:	e0bffd17 	ldw	r2,-12(fp)
 201c6d4:	00007706 	br	201c8b4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201c6d8:	e0bffd17 	ldw	r2,-12(fp)
 201c6dc:	10800003 	ldbu	r2,0(r2)
 201c6e0:	10803fcc 	andi	r2,r2,255
 201c6e4:	108000e0 	cmpeqi	r2,r2,3
 201c6e8:	1000051e 	bne	r2,zero,201c700 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201c6ec:	e0bfff17 	ldw	r2,-4(fp)
 201c6f0:	00c00044 	movi	r3,1
 201c6f4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c6f8:	e0bffd17 	ldw	r2,-12(fp)
 201c6fc:	00006d06 	br	201c8b4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201c700:	d0a7ac03 	ldbu	r2,-24912(gp)
 201c704:	10803fcc 	andi	r2,r2,255
 201c708:	10000526 	beq	r2,zero,201c720 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 201c70c:	e0bfff17 	ldw	r2,-4(fp)
 201c710:	00c003c4 	movi	r3,15
 201c714:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c718:	e0bffd17 	ldw	r2,-12(fp)
 201c71c:	00006506 	br	201c8b4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c720:	0005303a 	rdctl	r2,status
 201c724:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c728:	e0fffc17 	ldw	r3,-16(fp)
 201c72c:	00bfff84 	movi	r2,-2
 201c730:	1884703a 	and	r2,r3,r2
 201c734:	1001703a 	wrctl	status,r2
  
  return context;
 201c738:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c73c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 201c740:	e0bffd17 	ldw	r2,-12(fp)
 201c744:	10800283 	ldbu	r2,10(r2)
 201c748:	10803fcc 	andi	r2,r2,255
 201c74c:	10000326 	beq	r2,zero,201c75c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201c750:	00800044 	movi	r2,1
 201c754:	e0bff505 	stb	r2,-44(fp)
 201c758:	00000106 	br	201c760 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201c75c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201c760:	e0bffe03 	ldbu	r2,-8(fp)
 201c764:	10000326 	beq	r2,zero,201c774 <OSSemDel+0xec>
 201c768:	10800060 	cmpeqi	r2,r2,1
 201c76c:	1000281e 	bne	r2,zero,201c810 <OSSemDel+0x188>
 201c770:	00004506 	br	201c888 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 201c774:	e0bff503 	ldbu	r2,-44(fp)
 201c778:	1000161e 	bne	r2,zero,201c7d4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201c77c:	e0bffd17 	ldw	r2,-12(fp)
 201c780:	00c00fc4 	movi	r3,63
 201c784:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201c788:	e0bffd17 	ldw	r2,-12(fp)
 201c78c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201c790:	e0bffd17 	ldw	r2,-12(fp)
 201c794:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201c798:	d0e7ab17 	ldw	r3,-24916(gp)
 201c79c:	e0bffd17 	ldw	r2,-12(fp)
 201c7a0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201c7a4:	e0bffd17 	ldw	r2,-12(fp)
 201c7a8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201c7ac:	e0bffd17 	ldw	r2,-12(fp)
 201c7b0:	d0a7ab15 	stw	r2,-24916(gp)
 201c7b4:	e0bff717 	ldw	r2,-36(fp)
 201c7b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c7bc:	e0bff817 	ldw	r2,-32(fp)
 201c7c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201c7c4:	e0bfff17 	ldw	r2,-4(fp)
 201c7c8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 201c7cc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 201c7d0:	00003706 	br	201c8b0 <OSSemDel+0x228>
 201c7d4:	e0bff717 	ldw	r2,-36(fp)
 201c7d8:	e0bff915 	stw	r2,-28(fp)
 201c7dc:	e0bff917 	ldw	r2,-28(fp)
 201c7e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201c7e4:	e0bfff17 	ldw	r2,-4(fp)
 201c7e8:	00c01244 	movi	r3,73
 201c7ec:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 201c7f0:	e0bffd17 	ldw	r2,-12(fp)
 201c7f4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201c7f8:	00002d06 	br	201c8b0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201c7fc:	000f883a 	mov	r7,zero
 201c800:	01800044 	movi	r6,1
 201c804:	000b883a 	mov	r5,zero
 201c808:	e13ffd17 	ldw	r4,-12(fp)
 201c80c:	201781c0 	call	201781c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 201c810:	e0bffd17 	ldw	r2,-12(fp)
 201c814:	10800283 	ldbu	r2,10(r2)
 201c818:	10803fcc 	andi	r2,r2,255
 201c81c:	103ff71e 	bne	r2,zero,201c7fc <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201c820:	e0bffd17 	ldw	r2,-12(fp)
 201c824:	00c00fc4 	movi	r3,63
 201c828:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201c82c:	e0bffd17 	ldw	r2,-12(fp)
 201c830:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201c834:	e0bffd17 	ldw	r2,-12(fp)
 201c838:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201c83c:	d0e7ab17 	ldw	r3,-24916(gp)
 201c840:	e0bffd17 	ldw	r2,-12(fp)
 201c844:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201c848:	e0bffd17 	ldw	r2,-12(fp)
 201c84c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201c850:	e0bffd17 	ldw	r2,-12(fp)
 201c854:	d0a7ab15 	stw	r2,-24916(gp)
 201c858:	e0bff717 	ldw	r2,-36(fp)
 201c85c:	e0bffa15 	stw	r2,-24(fp)
 201c860:	e0bffa17 	ldw	r2,-24(fp)
 201c864:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201c868:	e0bff503 	ldbu	r2,-44(fp)
 201c86c:	10800058 	cmpnei	r2,r2,1
 201c870:	1000011e 	bne	r2,zero,201c878 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201c874:	20182680 	call	2018268 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201c878:	e0bfff17 	ldw	r2,-4(fp)
 201c87c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 201c880:	e03ff615 	stw	zero,-40(fp)
             break;
 201c884:	00000a06 	br	201c8b0 <OSSemDel+0x228>
 201c888:	e0bff717 	ldw	r2,-36(fp)
 201c88c:	e0bffb15 	stw	r2,-20(fp)
 201c890:	e0bffb17 	ldw	r2,-20(fp)
 201c894:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201c898:	e0bfff17 	ldw	r2,-4(fp)
 201c89c:	00c001c4 	movi	r3,7
 201c8a0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201c8a4:	e0bffd17 	ldw	r2,-12(fp)
 201c8a8:	e0bff615 	stw	r2,-40(fp)
             break;
 201c8ac:	0001883a 	nop
    }
    return (pevent_return);
 201c8b0:	e0bff617 	ldw	r2,-40(fp)
}
 201c8b4:	e037883a 	mov	sp,fp
 201c8b8:	dfc00117 	ldw	ra,4(sp)
 201c8bc:	df000017 	ldw	fp,0(sp)
 201c8c0:	dec00204 	addi	sp,sp,8
 201c8c4:	f800283a 	ret

0201c8c8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201c8c8:	defff504 	addi	sp,sp,-44
 201c8cc:	dfc00a15 	stw	ra,40(sp)
 201c8d0:	df000915 	stw	fp,36(sp)
 201c8d4:	df000904 	addi	fp,sp,36
 201c8d8:	e13ffd15 	stw	r4,-12(fp)
 201c8dc:	2805883a 	mov	r2,r5
 201c8e0:	e1bfff15 	stw	r6,-4(fp)
 201c8e4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201c8e8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201c8ec:	e0bfff17 	ldw	r2,-4(fp)
 201c8f0:	10007226 	beq	r2,zero,201cabc <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201c8f4:	e0bffd17 	ldw	r2,-12(fp)
 201c8f8:	1000041e 	bne	r2,zero,201c90c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201c8fc:	e0bfff17 	ldw	r2,-4(fp)
 201c900:	00c00104 	movi	r3,4
 201c904:	10c00005 	stb	r3,0(r2)
        return;
 201c908:	00006d06 	br	201cac0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201c90c:	e0bffd17 	ldw	r2,-12(fp)
 201c910:	10800003 	ldbu	r2,0(r2)
 201c914:	10803fcc 	andi	r2,r2,255
 201c918:	108000e0 	cmpeqi	r2,r2,3
 201c91c:	1000041e 	bne	r2,zero,201c930 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 201c920:	e0bfff17 	ldw	r2,-4(fp)
 201c924:	00c00044 	movi	r3,1
 201c928:	10c00005 	stb	r3,0(r2)
        return;
 201c92c:	00006406 	br	201cac0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201c930:	d0a7ac03 	ldbu	r2,-24912(gp)
 201c934:	10803fcc 	andi	r2,r2,255
 201c938:	10000426 	beq	r2,zero,201c94c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201c93c:	e0bfff17 	ldw	r2,-4(fp)
 201c940:	00c00084 	movi	r3,2
 201c944:	10c00005 	stb	r3,0(r2)
        return;
 201c948:	00005d06 	br	201cac0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201c94c:	d0a79e03 	ldbu	r2,-24968(gp)
 201c950:	10803fcc 	andi	r2,r2,255
 201c954:	10000426 	beq	r2,zero,201c968 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201c958:	e0bfff17 	ldw	r2,-4(fp)
 201c95c:	00c00344 	movi	r3,13
 201c960:	10c00005 	stb	r3,0(r2)
        return;
 201c964:	00005606 	br	201cac0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c968:	0005303a 	rdctl	r2,status
 201c96c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c970:	e0fffc17 	ldw	r3,-16(fp)
 201c974:	00bfff84 	movi	r2,-2
 201c978:	1884703a 	and	r2,r3,r2
 201c97c:	1001703a 	wrctl	status,r2
  
  return context;
 201c980:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c984:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 201c988:	e0bffd17 	ldw	r2,-12(fp)
 201c98c:	1080020b 	ldhu	r2,8(r2)
 201c990:	10bfffcc 	andi	r2,r2,65535
 201c994:	10000d26 	beq	r2,zero,201c9cc <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 201c998:	e0bffd17 	ldw	r2,-12(fp)
 201c99c:	1080020b 	ldhu	r2,8(r2)
 201c9a0:	10bfffc4 	addi	r2,r2,-1
 201c9a4:	1007883a 	mov	r3,r2
 201c9a8:	e0bffd17 	ldw	r2,-12(fp)
 201c9ac:	10c0020d 	sth	r3,8(r2)
 201c9b0:	e0bff717 	ldw	r2,-36(fp)
 201c9b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c9b8:	e0bff817 	ldw	r2,-32(fp)
 201c9bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201c9c0:	e0bfff17 	ldw	r2,-4(fp)
 201c9c4:	10000005 	stb	zero,0(r2)
        return;
 201c9c8:	00003d06 	br	201cac0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 201c9cc:	d0a7ad17 	ldw	r2,-24908(gp)
 201c9d0:	d0e7ad17 	ldw	r3,-24908(gp)
 201c9d4:	18c00c03 	ldbu	r3,48(r3)
 201c9d8:	18c00054 	ori	r3,r3,1
 201c9dc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201c9e0:	d0a7ad17 	ldw	r2,-24908(gp)
 201c9e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 201c9e8:	d0a7ad17 	ldw	r2,-24908(gp)
 201c9ec:	e0fffe0b 	ldhu	r3,-8(fp)
 201c9f0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201c9f4:	e13ffd17 	ldw	r4,-12(fp)
 201c9f8:	20179b40 	call	20179b4 <OS_EventTaskWait>
 201c9fc:	e0bff717 	ldw	r2,-36(fp)
 201ca00:	e0bffb15 	stw	r2,-20(fp)
 201ca04:	e0bffb17 	ldw	r2,-20(fp)
 201ca08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 201ca0c:	20182680 	call	2018268 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ca10:	0005303a 	rdctl	r2,status
 201ca14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ca18:	e0fff917 	ldw	r3,-28(fp)
 201ca1c:	00bfff84 	movi	r2,-2
 201ca20:	1884703a 	and	r2,r3,r2
 201ca24:	1001703a 	wrctl	status,r2
  
  return context;
 201ca28:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201ca2c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201ca30:	d0a7ad17 	ldw	r2,-24908(gp)
 201ca34:	10800c43 	ldbu	r2,49(r2)
 201ca38:	10803fcc 	andi	r2,r2,255
 201ca3c:	10000326 	beq	r2,zero,201ca4c <OSSemPend+0x184>
 201ca40:	108000a0 	cmpeqi	r2,r2,2
 201ca44:	1000041e 	bne	r2,zero,201ca58 <OSSemPend+0x190>
 201ca48:	00000706 	br	201ca68 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 201ca4c:	e0bfff17 	ldw	r2,-4(fp)
 201ca50:	10000005 	stb	zero,0(r2)
             break;
 201ca54:	00000c06 	br	201ca88 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201ca58:	e0bfff17 	ldw	r2,-4(fp)
 201ca5c:	00c00384 	movi	r3,14
 201ca60:	10c00005 	stb	r3,0(r2)
             break;
 201ca64:	00000806 	br	201ca88 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 201ca68:	d0a7ad17 	ldw	r2,-24908(gp)
 201ca6c:	e17ffd17 	ldw	r5,-12(fp)
 201ca70:	1009883a 	mov	r4,r2
 201ca74:	2017c140 	call	2017c14 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201ca78:	e0bfff17 	ldw	r2,-4(fp)
 201ca7c:	00c00284 	movi	r3,10
 201ca80:	10c00005 	stb	r3,0(r2)
             break;
 201ca84:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201ca88:	d0a7ad17 	ldw	r2,-24908(gp)
 201ca8c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201ca90:	d0a7ad17 	ldw	r2,-24908(gp)
 201ca94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201ca98:	d0a7ad17 	ldw	r2,-24908(gp)
 201ca9c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201caa0:	d0a7ad17 	ldw	r2,-24908(gp)
 201caa4:	10000815 	stw	zero,32(r2)
 201caa8:	e0bff717 	ldw	r2,-36(fp)
 201caac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cab0:	e0bffa17 	ldw	r2,-24(fp)
 201cab4:	1001703a 	wrctl	status,r2
 201cab8:	00000106 	br	201cac0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201cabc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 201cac0:	e037883a 	mov	sp,fp
 201cac4:	dfc00117 	ldw	ra,4(sp)
 201cac8:	df000017 	ldw	fp,0(sp)
 201cacc:	dec00204 	addi	sp,sp,8
 201cad0:	f800283a 	ret

0201cad4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201cad4:	defff604 	addi	sp,sp,-40
 201cad8:	dfc00915 	stw	ra,36(sp)
 201cadc:	df000815 	stw	fp,32(sp)
 201cae0:	df000804 	addi	fp,sp,32
 201cae4:	e13ffd15 	stw	r4,-12(fp)
 201cae8:	2805883a 	mov	r2,r5
 201caec:	e1bfff15 	stw	r6,-4(fp)
 201caf0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201caf4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201caf8:	e0bfff17 	ldw	r2,-4(fp)
 201cafc:	1000021e 	bne	r2,zero,201cb08 <OSSemPendAbort+0x34>
        return (0);
 201cb00:	0005883a 	mov	r2,zero
 201cb04:	00004906 	br	201cc2c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201cb08:	e0bffd17 	ldw	r2,-12(fp)
 201cb0c:	1000051e 	bne	r2,zero,201cb24 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201cb10:	e0bfff17 	ldw	r2,-4(fp)
 201cb14:	00c00104 	movi	r3,4
 201cb18:	10c00005 	stb	r3,0(r2)
        return (0);
 201cb1c:	0005883a 	mov	r2,zero
 201cb20:	00004206 	br	201cc2c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201cb24:	e0bffd17 	ldw	r2,-12(fp)
 201cb28:	10800003 	ldbu	r2,0(r2)
 201cb2c:	10803fcc 	andi	r2,r2,255
 201cb30:	108000e0 	cmpeqi	r2,r2,3
 201cb34:	1000051e 	bne	r2,zero,201cb4c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201cb38:	e0bfff17 	ldw	r2,-4(fp)
 201cb3c:	00c00044 	movi	r3,1
 201cb40:	10c00005 	stb	r3,0(r2)
        return (0);
 201cb44:	0005883a 	mov	r2,zero
 201cb48:	00003806 	br	201cc2c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cb4c:	0005303a 	rdctl	r2,status
 201cb50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cb54:	e0fffc17 	ldw	r3,-16(fp)
 201cb58:	00bfff84 	movi	r2,-2
 201cb5c:	1884703a 	and	r2,r3,r2
 201cb60:	1001703a 	wrctl	status,r2
  
  return context;
 201cb64:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201cb68:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 201cb6c:	e0bffd17 	ldw	r2,-12(fp)
 201cb70:	10800283 	ldbu	r2,10(r2)
 201cb74:	10803fcc 	andi	r2,r2,255
 201cb78:	10002526 	beq	r2,zero,201cc10 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 201cb7c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201cb80:	e0bffe03 	ldbu	r2,-8(fp)
 201cb84:	10800060 	cmpeqi	r2,r2,1
 201cb88:	10000e26 	beq	r2,zero,201cbc4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201cb8c:	00000806 	br	201cbb0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201cb90:	01c00084 	movi	r7,2
 201cb94:	01800044 	movi	r6,1
 201cb98:	000b883a 	mov	r5,zero
 201cb9c:	e13ffd17 	ldw	r4,-12(fp)
 201cba0:	201781c0 	call	201781c <OS_EventTaskRdy>
                     nbr_tasks++;
 201cba4:	e0bff803 	ldbu	r2,-32(fp)
 201cba8:	10800044 	addi	r2,r2,1
 201cbac:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201cbb0:	e0bffd17 	ldw	r2,-12(fp)
 201cbb4:	10800283 	ldbu	r2,10(r2)
 201cbb8:	10803fcc 	andi	r2,r2,255
 201cbbc:	103ff41e 	bne	r2,zero,201cb90 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201cbc0:	00000906 	br	201cbe8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201cbc4:	01c00084 	movi	r7,2
 201cbc8:	01800044 	movi	r6,1
 201cbcc:	000b883a 	mov	r5,zero
 201cbd0:	e13ffd17 	ldw	r4,-12(fp)
 201cbd4:	201781c0 	call	201781c <OS_EventTaskRdy>
                 nbr_tasks++;
 201cbd8:	e0bff803 	ldbu	r2,-32(fp)
 201cbdc:	10800044 	addi	r2,r2,1
 201cbe0:	e0bff805 	stb	r2,-32(fp)
                 break;
 201cbe4:	0001883a 	nop
 201cbe8:	e0bff917 	ldw	r2,-28(fp)
 201cbec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cbf0:	e0bffa17 	ldw	r2,-24(fp)
 201cbf4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201cbf8:	20182680 	call	2018268 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201cbfc:	e0bfff17 	ldw	r2,-4(fp)
 201cc00:	00c00384 	movi	r3,14
 201cc04:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201cc08:	e0bff803 	ldbu	r2,-32(fp)
 201cc0c:	00000706 	br	201cc2c <OSSemPendAbort+0x158>
 201cc10:	e0bff917 	ldw	r2,-28(fp)
 201cc14:	e0bffb15 	stw	r2,-20(fp)
 201cc18:	e0bffb17 	ldw	r2,-20(fp)
 201cc1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201cc20:	e0bfff17 	ldw	r2,-4(fp)
 201cc24:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 201cc28:	0005883a 	mov	r2,zero
}
 201cc2c:	e037883a 	mov	sp,fp
 201cc30:	dfc00117 	ldw	ra,4(sp)
 201cc34:	df000017 	ldw	fp,0(sp)
 201cc38:	dec00204 	addi	sp,sp,8
 201cc3c:	f800283a 	ret

0201cc40 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 201cc40:	defff804 	addi	sp,sp,-32
 201cc44:	dfc00715 	stw	ra,28(sp)
 201cc48:	df000615 	stw	fp,24(sp)
 201cc4c:	df000604 	addi	fp,sp,24
 201cc50:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201cc54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201cc58:	e0bfff17 	ldw	r2,-4(fp)
 201cc5c:	1000021e 	bne	r2,zero,201cc68 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 201cc60:	00800104 	movi	r2,4
 201cc64:	00003506 	br	201cd3c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201cc68:	e0bfff17 	ldw	r2,-4(fp)
 201cc6c:	10800003 	ldbu	r2,0(r2)
 201cc70:	10803fcc 	andi	r2,r2,255
 201cc74:	108000e0 	cmpeqi	r2,r2,3
 201cc78:	1000021e 	bne	r2,zero,201cc84 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 201cc7c:	00800044 	movi	r2,1
 201cc80:	00002e06 	br	201cd3c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cc84:	0005303a 	rdctl	r2,status
 201cc88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cc8c:	e0fffe17 	ldw	r3,-8(fp)
 201cc90:	00bfff84 	movi	r2,-2
 201cc94:	1884703a 	and	r2,r3,r2
 201cc98:	1001703a 	wrctl	status,r2
  
  return context;
 201cc9c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201cca0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 201cca4:	e0bfff17 	ldw	r2,-4(fp)
 201cca8:	10800283 	ldbu	r2,10(r2)
 201ccac:	10803fcc 	andi	r2,r2,255
 201ccb0:	10000c26 	beq	r2,zero,201cce4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201ccb4:	000f883a 	mov	r7,zero
 201ccb8:	01800044 	movi	r6,1
 201ccbc:	000b883a 	mov	r5,zero
 201ccc0:	e13fff17 	ldw	r4,-4(fp)
 201ccc4:	201781c0 	call	201781c <OS_EventTaskRdy>
 201ccc8:	e0bffa17 	ldw	r2,-24(fp)
 201cccc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ccd0:	e0bffb17 	ldw	r2,-20(fp)
 201ccd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201ccd8:	20182680 	call	2018268 <OS_Sched>
        return (OS_ERR_NONE);
 201ccdc:	0005883a 	mov	r2,zero
 201cce0:	00001606 	br	201cd3c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 201cce4:	e0bfff17 	ldw	r2,-4(fp)
 201cce8:	1080020b 	ldhu	r2,8(r2)
 201ccec:	10ffffcc 	andi	r3,r2,65535
 201ccf0:	00bfffd4 	movui	r2,65535
 201ccf4:	18800c26 	beq	r3,r2,201cd28 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201ccf8:	e0bfff17 	ldw	r2,-4(fp)
 201ccfc:	1080020b 	ldhu	r2,8(r2)
 201cd00:	10800044 	addi	r2,r2,1
 201cd04:	1007883a 	mov	r3,r2
 201cd08:	e0bfff17 	ldw	r2,-4(fp)
 201cd0c:	10c0020d 	sth	r3,8(r2)
 201cd10:	e0bffa17 	ldw	r2,-24(fp)
 201cd14:	e0bffc15 	stw	r2,-16(fp)
 201cd18:	e0bffc17 	ldw	r2,-16(fp)
 201cd1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201cd20:	0005883a 	mov	r2,zero
 201cd24:	00000506 	br	201cd3c <OSSemPost+0xfc>
 201cd28:	e0bffa17 	ldw	r2,-24(fp)
 201cd2c:	e0bffd15 	stw	r2,-12(fp)
 201cd30:	e0bffd17 	ldw	r2,-12(fp)
 201cd34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 201cd38:	00800c84 	movi	r2,50
}
 201cd3c:	e037883a 	mov	sp,fp
 201cd40:	dfc00117 	ldw	ra,4(sp)
 201cd44:	df000017 	ldw	fp,0(sp)
 201cd48:	dec00204 	addi	sp,sp,8
 201cd4c:	f800283a 	ret

0201cd50 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 201cd50:	defff704 	addi	sp,sp,-36
 201cd54:	df000815 	stw	fp,32(sp)
 201cd58:	df000804 	addi	fp,sp,32
 201cd5c:	e13ffe15 	stw	r4,-8(fp)
 201cd60:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201cd64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201cd68:	e0bffe17 	ldw	r2,-8(fp)
 201cd6c:	1000021e 	bne	r2,zero,201cd78 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201cd70:	00800104 	movi	r2,4
 201cd74:	00003606 	br	201ce50 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201cd78:	e0bfff17 	ldw	r2,-4(fp)
 201cd7c:	1000021e 	bne	r2,zero,201cd88 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201cd80:	00800244 	movi	r2,9
 201cd84:	00003206 	br	201ce50 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201cd88:	e0bffe17 	ldw	r2,-8(fp)
 201cd8c:	10800003 	ldbu	r2,0(r2)
 201cd90:	10803fcc 	andi	r2,r2,255
 201cd94:	108000e0 	cmpeqi	r2,r2,3
 201cd98:	1000021e 	bne	r2,zero,201cda4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201cd9c:	00800044 	movi	r2,1
 201cda0:	00002b06 	br	201ce50 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cda4:	0005303a 	rdctl	r2,status
 201cda8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cdac:	e0fffd17 	ldw	r3,-12(fp)
 201cdb0:	00bfff84 	movi	r2,-2
 201cdb4:	1884703a 	and	r2,r3,r2
 201cdb8:	1001703a 	wrctl	status,r2
  
  return context;
 201cdbc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201cdc0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 201cdc4:	e0bffe17 	ldw	r2,-8(fp)
 201cdc8:	10c00283 	ldbu	r3,10(r2)
 201cdcc:	e0bfff17 	ldw	r2,-4(fp)
 201cdd0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 201cdd4:	e0bffe17 	ldw	r2,-8(fp)
 201cdd8:	108002c4 	addi	r2,r2,11
 201cddc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 201cde0:	e0bfff17 	ldw	r2,-4(fp)
 201cde4:	10800084 	addi	r2,r2,2
 201cde8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201cdec:	e03ffa05 	stb	zero,-24(fp)
 201cdf0:	00000b06 	br	201ce20 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 201cdf4:	e0bff917 	ldw	r2,-28(fp)
 201cdf8:	10c00044 	addi	r3,r2,1
 201cdfc:	e0fff915 	stw	r3,-28(fp)
 201ce00:	e0fff817 	ldw	r3,-32(fp)
 201ce04:	19000044 	addi	r4,r3,1
 201ce08:	e13ff815 	stw	r4,-32(fp)
 201ce0c:	18c00003 	ldbu	r3,0(r3)
 201ce10:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201ce14:	e0bffa03 	ldbu	r2,-24(fp)
 201ce18:	10800044 	addi	r2,r2,1
 201ce1c:	e0bffa05 	stb	r2,-24(fp)
 201ce20:	e0bffa03 	ldbu	r2,-24(fp)
 201ce24:	108000f0 	cmpltui	r2,r2,3
 201ce28:	103ff21e 	bne	r2,zero,201cdf4 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201ce2c:	e0bffe17 	ldw	r2,-8(fp)
 201ce30:	10c0020b 	ldhu	r3,8(r2)
 201ce34:	e0bfff17 	ldw	r2,-4(fp)
 201ce38:	10c0000d 	sth	r3,0(r2)
 201ce3c:	e0bffb17 	ldw	r2,-20(fp)
 201ce40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ce44:	e0bffc17 	ldw	r2,-16(fp)
 201ce48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ce4c:	0005883a 	mov	r2,zero
}
 201ce50:	e037883a 	mov	sp,fp
 201ce54:	df000017 	ldw	fp,0(sp)
 201ce58:	dec00104 	addi	sp,sp,4
 201ce5c:	f800283a 	ret

0201ce60 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 201ce60:	defff904 	addi	sp,sp,-28
 201ce64:	df000615 	stw	fp,24(sp)
 201ce68:	df000604 	addi	fp,sp,24
 201ce6c:	e13ffd15 	stw	r4,-12(fp)
 201ce70:	2805883a 	mov	r2,r5
 201ce74:	e1bfff15 	stw	r6,-4(fp)
 201ce78:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201ce7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201ce80:	e0bfff17 	ldw	r2,-4(fp)
 201ce84:	10003126 	beq	r2,zero,201cf4c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201ce88:	e0bffd17 	ldw	r2,-12(fp)
 201ce8c:	1000041e 	bne	r2,zero,201cea0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 201ce90:	e0bfff17 	ldw	r2,-4(fp)
 201ce94:	00c00104 	movi	r3,4
 201ce98:	10c00005 	stb	r3,0(r2)
        return;
 201ce9c:	00002c06 	br	201cf50 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201cea0:	e0bffd17 	ldw	r2,-12(fp)
 201cea4:	10800003 	ldbu	r2,0(r2)
 201cea8:	10803fcc 	andi	r2,r2,255
 201ceac:	108000e0 	cmpeqi	r2,r2,3
 201ceb0:	1000041e 	bne	r2,zero,201cec4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 201ceb4:	e0bfff17 	ldw	r2,-4(fp)
 201ceb8:	00c00044 	movi	r3,1
 201cebc:	10c00005 	stb	r3,0(r2)
        return;
 201cec0:	00002306 	br	201cf50 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cec4:	0005303a 	rdctl	r2,status
 201cec8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cecc:	e0fffc17 	ldw	r3,-16(fp)
 201ced0:	00bfff84 	movi	r2,-2
 201ced4:	1884703a 	and	r2,r3,r2
 201ced8:	1001703a 	wrctl	status,r2
  
  return context;
 201cedc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201cee0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 201cee4:	e0bfff17 	ldw	r2,-4(fp)
 201cee8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 201ceec:	e0bffd17 	ldw	r2,-12(fp)
 201cef0:	1080020b 	ldhu	r2,8(r2)
 201cef4:	10bfffcc 	andi	r2,r2,65535
 201cef8:	10000426 	beq	r2,zero,201cf0c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 201cefc:	e0bffd17 	ldw	r2,-12(fp)
 201cf00:	e0fffe0b 	ldhu	r3,-8(fp)
 201cf04:	10c0020d 	sth	r3,8(r2)
 201cf08:	00000b06 	br	201cf38 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201cf0c:	e0bffd17 	ldw	r2,-12(fp)
 201cf10:	10800283 	ldbu	r2,10(r2)
 201cf14:	10803fcc 	andi	r2,r2,255
 201cf18:	1000041e 	bne	r2,zero,201cf2c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201cf1c:	e0bffd17 	ldw	r2,-12(fp)
 201cf20:	e0fffe0b 	ldhu	r3,-8(fp)
 201cf24:	10c0020d 	sth	r3,8(r2)
 201cf28:	00000306 	br	201cf38 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201cf2c:	e0bfff17 	ldw	r2,-4(fp)
 201cf30:	00c01244 	movi	r3,73
 201cf34:	10c00005 	stb	r3,0(r2)
 201cf38:	e0bffa17 	ldw	r2,-24(fp)
 201cf3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cf40:	e0bffb17 	ldw	r2,-20(fp)
 201cf44:	1001703a 	wrctl	status,r2
 201cf48:	00000106 	br	201cf50 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201cf4c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 201cf50:	e037883a 	mov	sp,fp
 201cf54:	df000017 	ldw	fp,0(sp)
 201cf58:	dec00104 	addi	sp,sp,4
 201cf5c:	f800283a 	ret

0201cf60 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 201cf60:	defff104 	addi	sp,sp,-60
 201cf64:	dfc00e15 	stw	ra,56(sp)
 201cf68:	df000d15 	stw	fp,52(sp)
 201cf6c:	df000d04 	addi	fp,sp,52
 201cf70:	2007883a 	mov	r3,r4
 201cf74:	2805883a 	mov	r2,r5
 201cf78:	e0fffe05 	stb	r3,-8(fp)
 201cf7c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201cf80:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201cf84:	e0bffe03 	ldbu	r2,-8(fp)
 201cf88:	10800530 	cmpltui	r2,r2,20
 201cf8c:	1000051e 	bne	r2,zero,201cfa4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 201cf90:	e0bffe03 	ldbu	r2,-8(fp)
 201cf94:	10803fe0 	cmpeqi	r2,r2,255
 201cf98:	1000021e 	bne	r2,zero,201cfa4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 201cf9c:	00800a84 	movi	r2,42
 201cfa0:	00012606 	br	201d43c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201cfa4:	e0bfff03 	ldbu	r2,-4(fp)
 201cfa8:	10800530 	cmpltui	r2,r2,20
 201cfac:	1000021e 	bne	r2,zero,201cfb8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 201cfb0:	00800a84 	movi	r2,42
 201cfb4:	00012106 	br	201d43c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cfb8:	0005303a 	rdctl	r2,status
 201cfbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cfc0:	e0fffd17 	ldw	r3,-12(fp)
 201cfc4:	00bfff84 	movi	r2,-2
 201cfc8:	1884703a 	and	r2,r3,r2
 201cfcc:	1001703a 	wrctl	status,r2
  
  return context;
 201cfd0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201cfd4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201cfd8:	e0ffff03 	ldbu	r3,-4(fp)
 201cfdc:	008080f4 	movhi	r2,515
 201cfe0:	10bac204 	addi	r2,r2,-5368
 201cfe4:	18c7883a 	add	r3,r3,r3
 201cfe8:	18c7883a 	add	r3,r3,r3
 201cfec:	10c5883a 	add	r2,r2,r3
 201cff0:	10800017 	ldw	r2,0(r2)
 201cff4:	10000626 	beq	r2,zero,201d010 <OSTaskChangePrio+0xb0>
 201cff8:	e0bff517 	ldw	r2,-44(fp)
 201cffc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d000:	e0bff617 	ldw	r2,-40(fp)
 201d004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201d008:	00800a04 	movi	r2,40
 201d00c:	00010b06 	br	201d43c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 201d010:	e0bffe03 	ldbu	r2,-8(fp)
 201d014:	10803fd8 	cmpnei	r2,r2,255
 201d018:	1000031e 	bne	r2,zero,201d028 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201d01c:	d0a7ad17 	ldw	r2,-24908(gp)
 201d020:	10800c83 	ldbu	r2,50(r2)
 201d024:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201d028:	e0fffe03 	ldbu	r3,-8(fp)
 201d02c:	008080f4 	movhi	r2,515
 201d030:	10bac204 	addi	r2,r2,-5368
 201d034:	18c7883a 	add	r3,r3,r3
 201d038:	18c7883a 	add	r3,r3,r3
 201d03c:	10c5883a 	add	r2,r2,r3
 201d040:	10800017 	ldw	r2,0(r2)
 201d044:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201d048:	e0bff817 	ldw	r2,-32(fp)
 201d04c:	1000061e 	bne	r2,zero,201d068 <OSTaskChangePrio+0x108>
 201d050:	e0bff517 	ldw	r2,-44(fp)
 201d054:	e0bff715 	stw	r2,-36(fp)
 201d058:	e0bff717 	ldw	r2,-36(fp)
 201d05c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 201d060:	00800a44 	movi	r2,41
 201d064:	0000f506 	br	201d43c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 201d068:	e0bff817 	ldw	r2,-32(fp)
 201d06c:	10800058 	cmpnei	r2,r2,1
 201d070:	1000061e 	bne	r2,zero,201d08c <OSTaskChangePrio+0x12c>
 201d074:	e0bff517 	ldw	r2,-44(fp)
 201d078:	e0bff915 	stw	r2,-28(fp)
 201d07c:	e0bff917 	ldw	r2,-28(fp)
 201d080:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 201d084:	008010c4 	movi	r2,67
 201d088:	0000ec06 	br	201d43c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201d08c:	e0bfff03 	ldbu	r2,-4(fp)
 201d090:	1004d0fa 	srli	r2,r2,3
 201d094:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201d098:	e0bfff03 	ldbu	r2,-4(fp)
 201d09c:	108001cc 	andi	r2,r2,7
 201d0a0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 201d0a4:	e0bffb03 	ldbu	r2,-20(fp)
 201d0a8:	00c00044 	movi	r3,1
 201d0ac:	1884983a 	sll	r2,r3,r2
 201d0b0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 201d0b4:	e0bffb43 	ldbu	r2,-19(fp)
 201d0b8:	00c00044 	movi	r3,1
 201d0bc:	1884983a 	sll	r2,r3,r2
 201d0c0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 201d0c4:	e0fffe03 	ldbu	r3,-8(fp)
 201d0c8:	008080f4 	movhi	r2,515
 201d0cc:	10bac204 	addi	r2,r2,-5368
 201d0d0:	18c7883a 	add	r3,r3,r3
 201d0d4:	18c7883a 	add	r3,r3,r3
 201d0d8:	10c5883a 	add	r2,r2,r3
 201d0dc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 201d0e0:	e0ffff03 	ldbu	r3,-4(fp)
 201d0e4:	008080f4 	movhi	r2,515
 201d0e8:	10bac204 	addi	r2,r2,-5368
 201d0ec:	18c7883a 	add	r3,r3,r3
 201d0f0:	18c7883a 	add	r3,r3,r3
 201d0f4:	10c5883a 	add	r2,r2,r3
 201d0f8:	e0fff817 	ldw	r3,-32(fp)
 201d0fc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 201d100:	e0bff817 	ldw	r2,-32(fp)
 201d104:	10800d03 	ldbu	r2,52(r2)
 201d108:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201d10c:	e0bff817 	ldw	r2,-32(fp)
 201d110:	10800d83 	ldbu	r2,54(r2)
 201d114:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201d118:	e0bff817 	ldw	r2,-32(fp)
 201d11c:	10800d43 	ldbu	r2,53(r2)
 201d120:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 201d124:	e0fffc03 	ldbu	r3,-16(fp)
 201d128:	d0a7aa44 	addi	r2,gp,-24919
 201d12c:	1885883a 	add	r2,r3,r2
 201d130:	10c00003 	ldbu	r3,0(r2)
 201d134:	e0bffc83 	ldbu	r2,-14(fp)
 201d138:	1884703a 	and	r2,r3,r2
 201d13c:	10803fcc 	andi	r2,r2,255
 201d140:	10002826 	beq	r2,zero,201d1e4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 201d144:	e0fffc03 	ldbu	r3,-16(fp)
 201d148:	e13ffc03 	ldbu	r4,-16(fp)
 201d14c:	d0a7aa44 	addi	r2,gp,-24919
 201d150:	2085883a 	add	r2,r4,r2
 201d154:	10800003 	ldbu	r2,0(r2)
 201d158:	1009883a 	mov	r4,r2
 201d15c:	e0bffc83 	ldbu	r2,-14(fp)
 201d160:	0084303a 	nor	r2,zero,r2
 201d164:	2084703a 	and	r2,r4,r2
 201d168:	1009883a 	mov	r4,r2
 201d16c:	d0a7aa44 	addi	r2,gp,-24919
 201d170:	1885883a 	add	r2,r3,r2
 201d174:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201d178:	e0fffc03 	ldbu	r3,-16(fp)
 201d17c:	d0a7aa44 	addi	r2,gp,-24919
 201d180:	1885883a 	add	r2,r3,r2
 201d184:	10800003 	ldbu	r2,0(r2)
 201d188:	10803fcc 	andi	r2,r2,255
 201d18c:	1000061e 	bne	r2,zero,201d1a8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 201d190:	e0bffc43 	ldbu	r2,-15(fp)
 201d194:	0084303a 	nor	r2,zero,r2
 201d198:	1007883a 	mov	r3,r2
 201d19c:	d0a7aa03 	ldbu	r2,-24920(gp)
 201d1a0:	1884703a 	and	r2,r3,r2
 201d1a4:	d0a7aa05 	stb	r2,-24920(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201d1a8:	d0e7aa03 	ldbu	r3,-24920(gp)
 201d1ac:	e0bffb83 	ldbu	r2,-18(fp)
 201d1b0:	1884b03a 	or	r2,r3,r2
 201d1b4:	d0a7aa05 	stb	r2,-24920(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201d1b8:	e0fffb03 	ldbu	r3,-20(fp)
 201d1bc:	e13ffb03 	ldbu	r4,-20(fp)
 201d1c0:	d0a7aa44 	addi	r2,gp,-24919
 201d1c4:	2085883a 	add	r2,r4,r2
 201d1c8:	11000003 	ldbu	r4,0(r2)
 201d1cc:	e0bffbc3 	ldbu	r2,-17(fp)
 201d1d0:	2084b03a 	or	r2,r4,r2
 201d1d4:	1009883a 	mov	r4,r2
 201d1d8:	d0a7aa44 	addi	r2,gp,-24919
 201d1dc:	1885883a 	add	r2,r3,r2
 201d1e0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 201d1e4:	e0bff817 	ldw	r2,-32(fp)
 201d1e8:	10800717 	ldw	r2,28(r2)
 201d1ec:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 201d1f0:	e0bff317 	ldw	r2,-52(fp)
 201d1f4:	10003326 	beq	r2,zero,201d2c4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201d1f8:	e0bffc03 	ldbu	r2,-16(fp)
 201d1fc:	e0fffc03 	ldbu	r3,-16(fp)
 201d200:	e13ff317 	ldw	r4,-52(fp)
 201d204:	20c7883a 	add	r3,r4,r3
 201d208:	18c002c4 	addi	r3,r3,11
 201d20c:	18c00003 	ldbu	r3,0(r3)
 201d210:	1809883a 	mov	r4,r3
 201d214:	e0fffc83 	ldbu	r3,-14(fp)
 201d218:	00c6303a 	nor	r3,zero,r3
 201d21c:	20c6703a 	and	r3,r4,r3
 201d220:	1809883a 	mov	r4,r3
 201d224:	e0fff317 	ldw	r3,-52(fp)
 201d228:	1885883a 	add	r2,r3,r2
 201d22c:	108002c4 	addi	r2,r2,11
 201d230:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 201d234:	e0bffc03 	ldbu	r2,-16(fp)
 201d238:	e0fff317 	ldw	r3,-52(fp)
 201d23c:	1885883a 	add	r2,r3,r2
 201d240:	108002c4 	addi	r2,r2,11
 201d244:	10800003 	ldbu	r2,0(r2)
 201d248:	10803fcc 	andi	r2,r2,255
 201d24c:	1000091e 	bne	r2,zero,201d274 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 201d250:	e0bff317 	ldw	r2,-52(fp)
 201d254:	10800283 	ldbu	r2,10(r2)
 201d258:	1007883a 	mov	r3,r2
 201d25c:	e0bffc43 	ldbu	r2,-15(fp)
 201d260:	0084303a 	nor	r2,zero,r2
 201d264:	1884703a 	and	r2,r3,r2
 201d268:	1007883a 	mov	r3,r2
 201d26c:	e0bff317 	ldw	r2,-52(fp)
 201d270:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 201d274:	e0bff317 	ldw	r2,-52(fp)
 201d278:	10c00283 	ldbu	r3,10(r2)
 201d27c:	e0bffb83 	ldbu	r2,-18(fp)
 201d280:	1884b03a 	or	r2,r3,r2
 201d284:	1007883a 	mov	r3,r2
 201d288:	e0bff317 	ldw	r2,-52(fp)
 201d28c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 201d290:	e0bffb03 	ldbu	r2,-20(fp)
 201d294:	e0fffb03 	ldbu	r3,-20(fp)
 201d298:	e13ff317 	ldw	r4,-52(fp)
 201d29c:	20c7883a 	add	r3,r4,r3
 201d2a0:	18c002c4 	addi	r3,r3,11
 201d2a4:	19000003 	ldbu	r4,0(r3)
 201d2a8:	e0fffbc3 	ldbu	r3,-17(fp)
 201d2ac:	20c6b03a 	or	r3,r4,r3
 201d2b0:	1809883a 	mov	r4,r3
 201d2b4:	e0fff317 	ldw	r3,-52(fp)
 201d2b8:	1885883a 	add	r2,r3,r2
 201d2bc:	108002c4 	addi	r2,r2,11
 201d2c0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 201d2c4:	e0bff817 	ldw	r2,-32(fp)
 201d2c8:	10800817 	ldw	r2,32(r2)
 201d2cc:	10004226 	beq	r2,zero,201d3d8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 201d2d0:	e0bff817 	ldw	r2,-32(fp)
 201d2d4:	10800817 	ldw	r2,32(r2)
 201d2d8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 201d2dc:	e0bff417 	ldw	r2,-48(fp)
 201d2e0:	10800017 	ldw	r2,0(r2)
 201d2e4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201d2e8:	00003906 	br	201d3d0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 201d2ec:	e0bffc03 	ldbu	r2,-16(fp)
 201d2f0:	e0fffc03 	ldbu	r3,-16(fp)
 201d2f4:	e13ff317 	ldw	r4,-52(fp)
 201d2f8:	20c7883a 	add	r3,r4,r3
 201d2fc:	18c002c4 	addi	r3,r3,11
 201d300:	18c00003 	ldbu	r3,0(r3)
 201d304:	1809883a 	mov	r4,r3
 201d308:	e0fffc83 	ldbu	r3,-14(fp)
 201d30c:	00c6303a 	nor	r3,zero,r3
 201d310:	20c6703a 	and	r3,r4,r3
 201d314:	1809883a 	mov	r4,r3
 201d318:	e0fff317 	ldw	r3,-52(fp)
 201d31c:	1885883a 	add	r2,r3,r2
 201d320:	108002c4 	addi	r2,r2,11
 201d324:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201d328:	e0bffc03 	ldbu	r2,-16(fp)
 201d32c:	e0fff317 	ldw	r3,-52(fp)
 201d330:	1885883a 	add	r2,r3,r2
 201d334:	108002c4 	addi	r2,r2,11
 201d338:	10800003 	ldbu	r2,0(r2)
 201d33c:	10803fcc 	andi	r2,r2,255
 201d340:	1000091e 	bne	r2,zero,201d368 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 201d344:	e0bff317 	ldw	r2,-52(fp)
 201d348:	10800283 	ldbu	r2,10(r2)
 201d34c:	1007883a 	mov	r3,r2
 201d350:	e0bffc43 	ldbu	r2,-15(fp)
 201d354:	0084303a 	nor	r2,zero,r2
 201d358:	1884703a 	and	r2,r3,r2
 201d35c:	1007883a 	mov	r3,r2
 201d360:	e0bff317 	ldw	r2,-52(fp)
 201d364:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 201d368:	e0bff317 	ldw	r2,-52(fp)
 201d36c:	10c00283 	ldbu	r3,10(r2)
 201d370:	e0bffb83 	ldbu	r2,-18(fp)
 201d374:	1884b03a 	or	r2,r3,r2
 201d378:	1007883a 	mov	r3,r2
 201d37c:	e0bff317 	ldw	r2,-52(fp)
 201d380:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 201d384:	e0bffb03 	ldbu	r2,-20(fp)
 201d388:	e0fffb03 	ldbu	r3,-20(fp)
 201d38c:	e13ff317 	ldw	r4,-52(fp)
 201d390:	20c7883a 	add	r3,r4,r3
 201d394:	18c002c4 	addi	r3,r3,11
 201d398:	19000003 	ldbu	r4,0(r3)
 201d39c:	e0fffbc3 	ldbu	r3,-17(fp)
 201d3a0:	20c6b03a 	or	r3,r4,r3
 201d3a4:	1809883a 	mov	r4,r3
 201d3a8:	e0fff317 	ldw	r3,-52(fp)
 201d3ac:	1885883a 	add	r2,r3,r2
 201d3b0:	108002c4 	addi	r2,r2,11
 201d3b4:	11000005 	stb	r4,0(r2)
            pevents++;
 201d3b8:	e0bff417 	ldw	r2,-48(fp)
 201d3bc:	10800104 	addi	r2,r2,4
 201d3c0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 201d3c4:	e0bff417 	ldw	r2,-48(fp)
 201d3c8:	10800017 	ldw	r2,0(r2)
 201d3cc:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 201d3d0:	e0bff317 	ldw	r2,-52(fp)
 201d3d4:	103fc51e 	bne	r2,zero,201d2ec <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201d3d8:	e0bff817 	ldw	r2,-32(fp)
 201d3dc:	e0ffff03 	ldbu	r3,-4(fp)
 201d3e0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 201d3e4:	e0bff817 	ldw	r2,-32(fp)
 201d3e8:	e0fffb03 	ldbu	r3,-20(fp)
 201d3ec:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 201d3f0:	e0bff817 	ldw	r2,-32(fp)
 201d3f4:	e0fffb43 	ldbu	r3,-19(fp)
 201d3f8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 201d3fc:	e0bff817 	ldw	r2,-32(fp)
 201d400:	e0fffb83 	ldbu	r3,-18(fp)
 201d404:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201d408:	e0bff817 	ldw	r2,-32(fp)
 201d40c:	e0fffbc3 	ldbu	r3,-17(fp)
 201d410:	10c00d45 	stb	r3,53(r2)
 201d414:	e0bff517 	ldw	r2,-44(fp)
 201d418:	e0bffa15 	stw	r2,-24(fp)
 201d41c:	e0bffa17 	ldw	r2,-24(fp)
 201d420:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201d424:	d0a79e43 	ldbu	r2,-24967(gp)
 201d428:	10803fcc 	andi	r2,r2,255
 201d42c:	10800058 	cmpnei	r2,r2,1
 201d430:	1000011e 	bne	r2,zero,201d438 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 201d434:	20182680 	call	2018268 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201d438:	0005883a 	mov	r2,zero
}
 201d43c:	e037883a 	mov	sp,fp
 201d440:	dfc00117 	ldw	ra,4(sp)
 201d444:	df000017 	ldw	fp,0(sp)
 201d448:	dec00204 	addi	sp,sp,8
 201d44c:	f800283a 	ret

0201d450 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 201d450:	deffee04 	addi	sp,sp,-72
 201d454:	dfc01115 	stw	ra,68(sp)
 201d458:	df001015 	stw	fp,64(sp)
 201d45c:	df001004 	addi	fp,sp,64
 201d460:	e13ffc15 	stw	r4,-16(fp)
 201d464:	e17ffd15 	stw	r5,-12(fp)
 201d468:	e1bffe15 	stw	r6,-8(fp)
 201d46c:	3805883a 	mov	r2,r7
 201d470:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201d474:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201d478:	e0bfff03 	ldbu	r2,-4(fp)
 201d47c:	10800570 	cmpltui	r2,r2,21
 201d480:	1000021e 	bne	r2,zero,201d48c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201d484:	00800a84 	movi	r2,42
 201d488:	00005706 	br	201d5e8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d48c:	0005303a 	rdctl	r2,status
 201d490:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d494:	e0fffb17 	ldw	r3,-20(fp)
 201d498:	00bfff84 	movi	r2,-2
 201d49c:	1884703a 	and	r2,r3,r2
 201d4a0:	1001703a 	wrctl	status,r2
  
  return context;
 201d4a4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201d4a8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201d4ac:	d0a7ac03 	ldbu	r2,-24912(gp)
 201d4b0:	10803fcc 	andi	r2,r2,255
 201d4b4:	10000626 	beq	r2,zero,201d4d0 <OSTaskCreate+0x80>
 201d4b8:	e0bff317 	ldw	r2,-52(fp)
 201d4bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d4c0:	e0bff417 	ldw	r2,-48(fp)
 201d4c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201d4c8:	00800f04 	movi	r2,60
 201d4cc:	00004606 	br	201d5e8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201d4d0:	e0ffff03 	ldbu	r3,-4(fp)
 201d4d4:	008080f4 	movhi	r2,515
 201d4d8:	10bac204 	addi	r2,r2,-5368
 201d4dc:	18c7883a 	add	r3,r3,r3
 201d4e0:	18c7883a 	add	r3,r3,r3
 201d4e4:	10c5883a 	add	r2,r2,r3
 201d4e8:	10800017 	ldw	r2,0(r2)
 201d4ec:	1000391e 	bne	r2,zero,201d5d4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201d4f0:	e0ffff03 	ldbu	r3,-4(fp)
 201d4f4:	008080f4 	movhi	r2,515
 201d4f8:	10bac204 	addi	r2,r2,-5368
 201d4fc:	18c7883a 	add	r3,r3,r3
 201d500:	18c7883a 	add	r3,r3,r3
 201d504:	10c5883a 	add	r2,r2,r3
 201d508:	00c00044 	movi	r3,1
 201d50c:	10c00015 	stw	r3,0(r2)
 201d510:	e0bff317 	ldw	r2,-52(fp)
 201d514:	e0bff515 	stw	r2,-44(fp)
 201d518:	e0bff517 	ldw	r2,-44(fp)
 201d51c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 201d520:	000f883a 	mov	r7,zero
 201d524:	e1bffe17 	ldw	r6,-8(fp)
 201d528:	e17ffd17 	ldw	r5,-12(fp)
 201d52c:	e13ffc17 	ldw	r4,-16(fp)
 201d530:	20209d40 	call	20209d4 <OSTaskStkInit>
 201d534:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 201d538:	e0bfff03 	ldbu	r2,-4(fp)
 201d53c:	d8000215 	stw	zero,8(sp)
 201d540:	d8000115 	stw	zero,4(sp)
 201d544:	d8000015 	stw	zero,0(sp)
 201d548:	000f883a 	mov	r7,zero
 201d54c:	000d883a 	mov	r6,zero
 201d550:	e17ff717 	ldw	r5,-36(fp)
 201d554:	1009883a 	mov	r4,r2
 201d558:	20186680 	call	2018668 <OS_TCBInit>
 201d55c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 201d560:	e0bff803 	ldbu	r2,-32(fp)
 201d564:	1000061e 	bne	r2,zero,201d580 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 201d568:	d0a79e43 	ldbu	r2,-24967(gp)
 201d56c:	10803fcc 	andi	r2,r2,255
 201d570:	10800058 	cmpnei	r2,r2,1
 201d574:	1000151e 	bne	r2,zero,201d5cc <OSTaskCreate+0x17c>
                OS_Sched();
 201d578:	20182680 	call	2018268 <OS_Sched>
 201d57c:	00001306 	br	201d5cc <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d580:	0005303a 	rdctl	r2,status
 201d584:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d588:	e0fffa17 	ldw	r3,-24(fp)
 201d58c:	00bfff84 	movi	r2,-2
 201d590:	1884703a 	and	r2,r3,r2
 201d594:	1001703a 	wrctl	status,r2
  
  return context;
 201d598:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201d59c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 201d5a0:	e0ffff03 	ldbu	r3,-4(fp)
 201d5a4:	008080f4 	movhi	r2,515
 201d5a8:	10bac204 	addi	r2,r2,-5368
 201d5ac:	18c7883a 	add	r3,r3,r3
 201d5b0:	18c7883a 	add	r3,r3,r3
 201d5b4:	10c5883a 	add	r2,r2,r3
 201d5b8:	10000015 	stw	zero,0(r2)
 201d5bc:	e0bff317 	ldw	r2,-52(fp)
 201d5c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d5c4:	e0bff617 	ldw	r2,-40(fp)
 201d5c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201d5cc:	e0bff803 	ldbu	r2,-32(fp)
 201d5d0:	00000506 	br	201d5e8 <OSTaskCreate+0x198>
 201d5d4:	e0bff317 	ldw	r2,-52(fp)
 201d5d8:	e0bff915 	stw	r2,-28(fp)
 201d5dc:	e0bff917 	ldw	r2,-28(fp)
 201d5e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201d5e4:	00800a04 	movi	r2,40
}
 201d5e8:	e037883a 	mov	sp,fp
 201d5ec:	dfc00117 	ldw	ra,4(sp)
 201d5f0:	df000017 	ldw	fp,0(sp)
 201d5f4:	dec00204 	addi	sp,sp,8
 201d5f8:	f800283a 	ret

0201d5fc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 201d5fc:	deffec04 	addi	sp,sp,-80
 201d600:	dfc01315 	stw	ra,76(sp)
 201d604:	df001215 	stw	fp,72(sp)
 201d608:	df001204 	addi	fp,sp,72
 201d60c:	e13ffa15 	stw	r4,-24(fp)
 201d610:	e17ffb15 	stw	r5,-20(fp)
 201d614:	e1bffc15 	stw	r6,-16(fp)
 201d618:	3809883a 	mov	r4,r7
 201d61c:	e0c00217 	ldw	r3,8(fp)
 201d620:	e0800617 	ldw	r2,24(fp)
 201d624:	e13ffd05 	stb	r4,-12(fp)
 201d628:	e0fffe0d 	sth	r3,-8(fp)
 201d62c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201d630:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201d634:	e0bffd03 	ldbu	r2,-12(fp)
 201d638:	10800570 	cmpltui	r2,r2,21
 201d63c:	1000021e 	bne	r2,zero,201d648 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 201d640:	00800a84 	movi	r2,42
 201d644:	00006106 	br	201d7cc <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d648:	0005303a 	rdctl	r2,status
 201d64c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d650:	e0fff917 	ldw	r3,-28(fp)
 201d654:	00bfff84 	movi	r2,-2
 201d658:	1884703a 	and	r2,r3,r2
 201d65c:	1001703a 	wrctl	status,r2
  
  return context;
 201d660:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201d664:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201d668:	d0a7ac03 	ldbu	r2,-24912(gp)
 201d66c:	10803fcc 	andi	r2,r2,255
 201d670:	10000626 	beq	r2,zero,201d68c <OSTaskCreateExt+0x90>
 201d674:	e0bff117 	ldw	r2,-60(fp)
 201d678:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d67c:	e0bff217 	ldw	r2,-56(fp)
 201d680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201d684:	00800f04 	movi	r2,60
 201d688:	00005006 	br	201d7cc <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201d68c:	e0fffd03 	ldbu	r3,-12(fp)
 201d690:	008080f4 	movhi	r2,515
 201d694:	10bac204 	addi	r2,r2,-5368
 201d698:	18c7883a 	add	r3,r3,r3
 201d69c:	18c7883a 	add	r3,r3,r3
 201d6a0:	10c5883a 	add	r2,r2,r3
 201d6a4:	10800017 	ldw	r2,0(r2)
 201d6a8:	1000431e 	bne	r2,zero,201d7b8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201d6ac:	e0fffd03 	ldbu	r3,-12(fp)
 201d6b0:	008080f4 	movhi	r2,515
 201d6b4:	10bac204 	addi	r2,r2,-5368
 201d6b8:	18c7883a 	add	r3,r3,r3
 201d6bc:	18c7883a 	add	r3,r3,r3
 201d6c0:	10c5883a 	add	r2,r2,r3
 201d6c4:	00c00044 	movi	r3,1
 201d6c8:	10c00015 	stw	r3,0(r2)
 201d6cc:	e0bff117 	ldw	r2,-60(fp)
 201d6d0:	e0bff315 	stw	r2,-52(fp)
 201d6d4:	e0bff317 	ldw	r2,-52(fp)
 201d6d8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 201d6dc:	e0bfff0b 	ldhu	r2,-4(fp)
 201d6e0:	100d883a 	mov	r6,r2
 201d6e4:	e1400417 	ldw	r5,16(fp)
 201d6e8:	e1000317 	ldw	r4,12(fp)
 201d6ec:	201e65c0 	call	201e65c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 201d6f0:	e0bfff0b 	ldhu	r2,-4(fp)
 201d6f4:	100f883a 	mov	r7,r2
 201d6f8:	e1bffc17 	ldw	r6,-16(fp)
 201d6fc:	e17ffb17 	ldw	r5,-20(fp)
 201d700:	e13ffa17 	ldw	r4,-24(fp)
 201d704:	20209d40 	call	20209d4 <OSTaskStkInit>
 201d708:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 201d70c:	e0fffd03 	ldbu	r3,-12(fp)
 201d710:	e13ffe0b 	ldhu	r4,-8(fp)
 201d714:	e0bfff0b 	ldhu	r2,-4(fp)
 201d718:	d8800215 	stw	r2,8(sp)
 201d71c:	e0800517 	ldw	r2,20(fp)
 201d720:	d8800115 	stw	r2,4(sp)
 201d724:	e0800417 	ldw	r2,16(fp)
 201d728:	d8800015 	stw	r2,0(sp)
 201d72c:	200f883a 	mov	r7,r4
 201d730:	e1800317 	ldw	r6,12(fp)
 201d734:	e17ff517 	ldw	r5,-44(fp)
 201d738:	1809883a 	mov	r4,r3
 201d73c:	20186680 	call	2018668 <OS_TCBInit>
 201d740:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 201d744:	e0bff603 	ldbu	r2,-40(fp)
 201d748:	1000061e 	bne	r2,zero,201d764 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 201d74c:	d0a79e43 	ldbu	r2,-24967(gp)
 201d750:	10803fcc 	andi	r2,r2,255
 201d754:	10800058 	cmpnei	r2,r2,1
 201d758:	1000151e 	bne	r2,zero,201d7b0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 201d75c:	20182680 	call	2018268 <OS_Sched>
 201d760:	00001306 	br	201d7b0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d764:	0005303a 	rdctl	r2,status
 201d768:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d76c:	e0fff817 	ldw	r3,-32(fp)
 201d770:	00bfff84 	movi	r2,-2
 201d774:	1884703a 	and	r2,r3,r2
 201d778:	1001703a 	wrctl	status,r2
  
  return context;
 201d77c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201d780:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201d784:	e0fffd03 	ldbu	r3,-12(fp)
 201d788:	008080f4 	movhi	r2,515
 201d78c:	10bac204 	addi	r2,r2,-5368
 201d790:	18c7883a 	add	r3,r3,r3
 201d794:	18c7883a 	add	r3,r3,r3
 201d798:	10c5883a 	add	r2,r2,r3
 201d79c:	10000015 	stw	zero,0(r2)
 201d7a0:	e0bff117 	ldw	r2,-60(fp)
 201d7a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d7a8:	e0bff417 	ldw	r2,-48(fp)
 201d7ac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201d7b0:	e0bff603 	ldbu	r2,-40(fp)
 201d7b4:	00000506 	br	201d7cc <OSTaskCreateExt+0x1d0>
 201d7b8:	e0bff117 	ldw	r2,-60(fp)
 201d7bc:	e0bff715 	stw	r2,-36(fp)
 201d7c0:	e0bff717 	ldw	r2,-36(fp)
 201d7c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201d7c8:	00800a04 	movi	r2,40
}
 201d7cc:	e037883a 	mov	sp,fp
 201d7d0:	dfc00117 	ldw	ra,4(sp)
 201d7d4:	df000017 	ldw	fp,0(sp)
 201d7d8:	dec00204 	addi	sp,sp,8
 201d7dc:	f800283a 	ret

0201d7e0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201d7e0:	defff404 	addi	sp,sp,-48
 201d7e4:	dfc00b15 	stw	ra,44(sp)
 201d7e8:	df000a15 	stw	fp,40(sp)
 201d7ec:	df000a04 	addi	fp,sp,40
 201d7f0:	2005883a 	mov	r2,r4
 201d7f4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 201d7f8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 201d7fc:	d0a7ac03 	ldbu	r2,-24912(gp)
 201d800:	10803fcc 	andi	r2,r2,255
 201d804:	10000226 	beq	r2,zero,201d810 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 201d808:	00801004 	movi	r2,64
 201d80c:	0000c006 	br	201db10 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 201d810:	e0bfff03 	ldbu	r2,-4(fp)
 201d814:	10800518 	cmpnei	r2,r2,20
 201d818:	1000021e 	bne	r2,zero,201d824 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 201d81c:	00800f84 	movi	r2,62
 201d820:	0000bb06 	br	201db10 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201d824:	e0bfff03 	ldbu	r2,-4(fp)
 201d828:	10800530 	cmpltui	r2,r2,20
 201d82c:	1000051e 	bne	r2,zero,201d844 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 201d830:	e0bfff03 	ldbu	r2,-4(fp)
 201d834:	10803fe0 	cmpeqi	r2,r2,255
 201d838:	1000021e 	bne	r2,zero,201d844 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 201d83c:	00800a84 	movi	r2,42
 201d840:	0000b306 	br	201db10 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d844:	0005303a 	rdctl	r2,status
 201d848:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d84c:	e0fffe17 	ldw	r3,-8(fp)
 201d850:	00bfff84 	movi	r2,-2
 201d854:	1884703a 	and	r2,r3,r2
 201d858:	1001703a 	wrctl	status,r2
  
  return context;
 201d85c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201d860:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201d864:	e0bfff03 	ldbu	r2,-4(fp)
 201d868:	10803fd8 	cmpnei	r2,r2,255
 201d86c:	1000031e 	bne	r2,zero,201d87c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 201d870:	d0a7ad17 	ldw	r2,-24908(gp)
 201d874:	10800c83 	ldbu	r2,50(r2)
 201d878:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201d87c:	e0ffff03 	ldbu	r3,-4(fp)
 201d880:	008080f4 	movhi	r2,515
 201d884:	10bac204 	addi	r2,r2,-5368
 201d888:	18c7883a 	add	r3,r3,r3
 201d88c:	18c7883a 	add	r3,r3,r3
 201d890:	10c5883a 	add	r2,r2,r3
 201d894:	10800017 	ldw	r2,0(r2)
 201d898:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201d89c:	e0bff817 	ldw	r2,-32(fp)
 201d8a0:	1000061e 	bne	r2,zero,201d8bc <OSTaskDel+0xdc>
 201d8a4:	e0bff617 	ldw	r2,-40(fp)
 201d8a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d8ac:	e0bff717 	ldw	r2,-36(fp)
 201d8b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201d8b4:	008010c4 	movi	r2,67
 201d8b8:	00009506 	br	201db10 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201d8bc:	e0bff817 	ldw	r2,-32(fp)
 201d8c0:	10800058 	cmpnei	r2,r2,1
 201d8c4:	1000061e 	bne	r2,zero,201d8e0 <OSTaskDel+0x100>
 201d8c8:	e0bff617 	ldw	r2,-40(fp)
 201d8cc:	e0bff915 	stw	r2,-28(fp)
 201d8d0:	e0bff917 	ldw	r2,-28(fp)
 201d8d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201d8d8:	00800f44 	movi	r2,61
 201d8dc:	00008c06 	br	201db10 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 201d8e0:	e0bff817 	ldw	r2,-32(fp)
 201d8e4:	10800d03 	ldbu	r2,52(r2)
 201d8e8:	10c03fcc 	andi	r3,r2,255
 201d8ec:	e0bff817 	ldw	r2,-32(fp)
 201d8f0:	10800d03 	ldbu	r2,52(r2)
 201d8f4:	11003fcc 	andi	r4,r2,255
 201d8f8:	d0a7aa44 	addi	r2,gp,-24919
 201d8fc:	2085883a 	add	r2,r4,r2
 201d900:	10800003 	ldbu	r2,0(r2)
 201d904:	1009883a 	mov	r4,r2
 201d908:	e0bff817 	ldw	r2,-32(fp)
 201d90c:	10800d43 	ldbu	r2,53(r2)
 201d910:	0084303a 	nor	r2,zero,r2
 201d914:	2084703a 	and	r2,r4,r2
 201d918:	1009883a 	mov	r4,r2
 201d91c:	d0a7aa44 	addi	r2,gp,-24919
 201d920:	1885883a 	add	r2,r3,r2
 201d924:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 201d928:	e0bff817 	ldw	r2,-32(fp)
 201d92c:	10800d03 	ldbu	r2,52(r2)
 201d930:	10c03fcc 	andi	r3,r2,255
 201d934:	d0a7aa44 	addi	r2,gp,-24919
 201d938:	1885883a 	add	r2,r3,r2
 201d93c:	10800003 	ldbu	r2,0(r2)
 201d940:	10803fcc 	andi	r2,r2,255
 201d944:	1000071e 	bne	r2,zero,201d964 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201d948:	e0bff817 	ldw	r2,-32(fp)
 201d94c:	10800d83 	ldbu	r2,54(r2)
 201d950:	0084303a 	nor	r2,zero,r2
 201d954:	1007883a 	mov	r3,r2
 201d958:	d0a7aa03 	ldbu	r2,-24920(gp)
 201d95c:	1884703a 	and	r2,r3,r2
 201d960:	d0a7aa05 	stb	r2,-24920(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201d964:	e0bff817 	ldw	r2,-32(fp)
 201d968:	10800717 	ldw	r2,28(r2)
 201d96c:	10000526 	beq	r2,zero,201d984 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201d970:	e0bff817 	ldw	r2,-32(fp)
 201d974:	10800717 	ldw	r2,28(r2)
 201d978:	100b883a 	mov	r5,r2
 201d97c:	e13ff817 	ldw	r4,-32(fp)
 201d980:	2017c140 	call	2017c14 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201d984:	e0bff817 	ldw	r2,-32(fp)
 201d988:	10800817 	ldw	r2,32(r2)
 201d98c:	10000526 	beq	r2,zero,201d9a4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201d990:	e0bff817 	ldw	r2,-32(fp)
 201d994:	10800817 	ldw	r2,32(r2)
 201d998:	100b883a 	mov	r5,r2
 201d99c:	e13ff817 	ldw	r4,-32(fp)
 201d9a0:	2017ccc0 	call	2017ccc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201d9a4:	e0bff817 	ldw	r2,-32(fp)
 201d9a8:	10800a17 	ldw	r2,40(r2)
 201d9ac:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 201d9b0:	e0bffb17 	ldw	r2,-20(fp)
 201d9b4:	10000226 	beq	r2,zero,201d9c0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 201d9b8:	e13ffb17 	ldw	r4,-20(fp)
 201d9bc:	201a13c0 	call	201a13c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201d9c0:	e0bff817 	ldw	r2,-32(fp)
 201d9c4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 201d9c8:	e0bff817 	ldw	r2,-32(fp)
 201d9cc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 201d9d0:	e0bff817 	ldw	r2,-32(fp)
 201d9d4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 201d9d8:	d0a79e03 	ldbu	r2,-24968(gp)
 201d9dc:	10803fcc 	andi	r2,r2,255
 201d9e0:	10803fe0 	cmpeqi	r2,r2,255
 201d9e4:	1000031e 	bne	r2,zero,201d9f4 <OSTaskDel+0x214>
        OSLockNesting++;
 201d9e8:	d0a79e03 	ldbu	r2,-24968(gp)
 201d9ec:	10800044 	addi	r2,r2,1
 201d9f0:	d0a79e05 	stb	r2,-24968(gp)
 201d9f4:	e0bff617 	ldw	r2,-40(fp)
 201d9f8:	e0bffd15 	stw	r2,-12(fp)
 201d9fc:	e0bffd17 	ldw	r2,-12(fp)
 201da00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201da04:	20177fc0 	call	20177fc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201da08:	0005303a 	rdctl	r2,status
 201da0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201da10:	e0fffa17 	ldw	r3,-24(fp)
 201da14:	00bfff84 	movi	r2,-2
 201da18:	1884703a 	and	r2,r3,r2
 201da1c:	1001703a 	wrctl	status,r2
  
  return context;
 201da20:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201da24:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 201da28:	d0a79e03 	ldbu	r2,-24968(gp)
 201da2c:	10803fcc 	andi	r2,r2,255
 201da30:	10000326 	beq	r2,zero,201da40 <OSTaskDel+0x260>
        OSLockNesting--;
 201da34:	d0a79e03 	ldbu	r2,-24968(gp)
 201da38:	10bfffc4 	addi	r2,r2,-1
 201da3c:	d0a79e05 	stb	r2,-24968(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 201da40:	e13ff817 	ldw	r4,-32(fp)
 201da44:	2020b540 	call	2020b54 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 201da48:	d0a7a643 	ldbu	r2,-24935(gp)
 201da4c:	10bfffc4 	addi	r2,r2,-1
 201da50:	d0a7a645 	stb	r2,-24935(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201da54:	e0ffff03 	ldbu	r3,-4(fp)
 201da58:	008080f4 	movhi	r2,515
 201da5c:	10bac204 	addi	r2,r2,-5368
 201da60:	18c7883a 	add	r3,r3,r3
 201da64:	18c7883a 	add	r3,r3,r3
 201da68:	10c5883a 	add	r2,r2,r3
 201da6c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201da70:	e0bff817 	ldw	r2,-32(fp)
 201da74:	10800617 	ldw	r2,24(r2)
 201da78:	1000071e 	bne	r2,zero,201da98 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 201da7c:	e0bff817 	ldw	r2,-32(fp)
 201da80:	10800517 	ldw	r2,20(r2)
 201da84:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201da88:	e0bff817 	ldw	r2,-32(fp)
 201da8c:	10800517 	ldw	r2,20(r2)
 201da90:	d0a7a115 	stw	r2,-24956(gp)
 201da94:	00000a06 	br	201dac0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201da98:	e0bff817 	ldw	r2,-32(fp)
 201da9c:	10800617 	ldw	r2,24(r2)
 201daa0:	e0fff817 	ldw	r3,-32(fp)
 201daa4:	18c00517 	ldw	r3,20(r3)
 201daa8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 201daac:	e0bff817 	ldw	r2,-32(fp)
 201dab0:	10800517 	ldw	r2,20(r2)
 201dab4:	e0fff817 	ldw	r3,-32(fp)
 201dab8:	18c00617 	ldw	r3,24(r3)
 201dabc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 201dac0:	d0e7a517 	ldw	r3,-24940(gp)
 201dac4:	e0bff817 	ldw	r2,-32(fp)
 201dac8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201dacc:	e0bff817 	ldw	r2,-32(fp)
 201dad0:	d0a7a515 	stw	r2,-24940(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201dad4:	e0bff817 	ldw	r2,-32(fp)
 201dad8:	00c00fc4 	movi	r3,63
 201dadc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 201dae0:	e0bff817 	ldw	r2,-32(fp)
 201dae4:	10001345 	stb	zero,77(r2)
 201dae8:	e0bff617 	ldw	r2,-40(fp)
 201daec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201daf0:	e0bffc17 	ldw	r2,-16(fp)
 201daf4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201daf8:	d0a79e43 	ldbu	r2,-24967(gp)
 201dafc:	10803fcc 	andi	r2,r2,255
 201db00:	10800058 	cmpnei	r2,r2,1
 201db04:	1000011e 	bne	r2,zero,201db0c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 201db08:	20182680 	call	2018268 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201db0c:	0005883a 	mov	r2,zero
}
 201db10:	e037883a 	mov	sp,fp
 201db14:	dfc00117 	ldw	ra,4(sp)
 201db18:	df000017 	ldw	fp,0(sp)
 201db1c:	dec00204 	addi	sp,sp,8
 201db20:	f800283a 	ret

0201db24 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201db24:	defff504 	addi	sp,sp,-44
 201db28:	df000a15 	stw	fp,40(sp)
 201db2c:	df000a04 	addi	fp,sp,40
 201db30:	2005883a 	mov	r2,r4
 201db34:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201db38:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201db3c:	e0bfff03 	ldbu	r2,-4(fp)
 201db40:	10800518 	cmpnei	r2,r2,20
 201db44:	1000021e 	bne	r2,zero,201db50 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 201db48:	00800f84 	movi	r2,62
 201db4c:	00004506 	br	201dc64 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201db50:	e0bfff03 	ldbu	r2,-4(fp)
 201db54:	10800530 	cmpltui	r2,r2,20
 201db58:	1000051e 	bne	r2,zero,201db70 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 201db5c:	e0bfff03 	ldbu	r2,-4(fp)
 201db60:	10803fe0 	cmpeqi	r2,r2,255
 201db64:	1000021e 	bne	r2,zero,201db70 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 201db68:	00800a84 	movi	r2,42
 201db6c:	00003d06 	br	201dc64 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 201db70:	e0bfff03 	ldbu	r2,-4(fp)
 201db74:	10803fd8 	cmpnei	r2,r2,255
 201db78:	1000111e 	bne	r2,zero,201dbc0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201db7c:	0005303a 	rdctl	r2,status
 201db80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201db84:	e0fff917 	ldw	r3,-28(fp)
 201db88:	00bfff84 	movi	r2,-2
 201db8c:	1884703a 	and	r2,r3,r2
 201db90:	1001703a 	wrctl	status,r2
  
  return context;
 201db94:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201db98:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 201db9c:	d0a7ad17 	ldw	r2,-24908(gp)
 201dba0:	10800dc3 	ldbu	r2,55(r2)
 201dba4:	e0bff805 	stb	r2,-32(fp)
 201dba8:	e0bff617 	ldw	r2,-40(fp)
 201dbac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dbb0:	e0bffe17 	ldw	r2,-8(fp)
 201dbb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201dbb8:	e0bff803 	ldbu	r2,-32(fp)
 201dbbc:	00002906 	br	201dc64 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201dbc0:	0005303a 	rdctl	r2,status
 201dbc4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201dbc8:	e0fff717 	ldw	r3,-36(fp)
 201dbcc:	00bfff84 	movi	r2,-2
 201dbd0:	1884703a 	and	r2,r3,r2
 201dbd4:	1001703a 	wrctl	status,r2
  
  return context;
 201dbd8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 201dbdc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201dbe0:	e0ffff03 	ldbu	r3,-4(fp)
 201dbe4:	008080f4 	movhi	r2,515
 201dbe8:	10bac204 	addi	r2,r2,-5368
 201dbec:	18c7883a 	add	r3,r3,r3
 201dbf0:	18c7883a 	add	r3,r3,r3
 201dbf4:	10c5883a 	add	r2,r2,r3
 201dbf8:	10800017 	ldw	r2,0(r2)
 201dbfc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 201dc00:	e0bffb17 	ldw	r2,-20(fp)
 201dc04:	1000061e 	bne	r2,zero,201dc20 <OSTaskDelReq+0xfc>
 201dc08:	e0bff617 	ldw	r2,-40(fp)
 201dc0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dc10:	e0bffa17 	ldw	r2,-24(fp)
 201dc14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 201dc18:	008010c4 	movi	r2,67
 201dc1c:	00001106 	br	201dc64 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201dc20:	e0bffb17 	ldw	r2,-20(fp)
 201dc24:	10800058 	cmpnei	r2,r2,1
 201dc28:	1000061e 	bne	r2,zero,201dc44 <OSTaskDelReq+0x120>
 201dc2c:	e0bff617 	ldw	r2,-40(fp)
 201dc30:	e0bffc15 	stw	r2,-16(fp)
 201dc34:	e0bffc17 	ldw	r2,-16(fp)
 201dc38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201dc3c:	00800f44 	movi	r2,61
 201dc40:	00000806 	br	201dc64 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201dc44:	e0bffb17 	ldw	r2,-20(fp)
 201dc48:	00c00fc4 	movi	r3,63
 201dc4c:	10c00dc5 	stb	r3,55(r2)
 201dc50:	e0bff617 	ldw	r2,-40(fp)
 201dc54:	e0bffd15 	stw	r2,-12(fp)
 201dc58:	e0bffd17 	ldw	r2,-12(fp)
 201dc5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201dc60:	0005883a 	mov	r2,zero
}
 201dc64:	e037883a 	mov	sp,fp
 201dc68:	df000017 	ldw	fp,0(sp)
 201dc6c:	dec00104 	addi	sp,sp,4
 201dc70:	f800283a 	ret

0201dc74 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201dc74:	defff404 	addi	sp,sp,-48
 201dc78:	dfc00b15 	stw	ra,44(sp)
 201dc7c:	df000a15 	stw	fp,40(sp)
 201dc80:	df000a04 	addi	fp,sp,40
 201dc84:	2005883a 	mov	r2,r4
 201dc88:	e17ffe15 	stw	r5,-8(fp)
 201dc8c:	e1bfff15 	stw	r6,-4(fp)
 201dc90:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201dc94:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201dc98:	e0bfff17 	ldw	r2,-4(fp)
 201dc9c:	1000021e 	bne	r2,zero,201dca8 <OSTaskNameGet+0x34>
        return (0);
 201dca0:	0005883a 	mov	r2,zero
 201dca4:	00005406 	br	201ddf8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201dca8:	e0bffd03 	ldbu	r2,-12(fp)
 201dcac:	10800570 	cmpltui	r2,r2,21
 201dcb0:	1000081e 	bne	r2,zero,201dcd4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 201dcb4:	e0bffd03 	ldbu	r2,-12(fp)
 201dcb8:	10803fe0 	cmpeqi	r2,r2,255
 201dcbc:	1000051e 	bne	r2,zero,201dcd4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 201dcc0:	e0bfff17 	ldw	r2,-4(fp)
 201dcc4:	00c00a84 	movi	r3,42
 201dcc8:	10c00005 	stb	r3,0(r2)
            return (0);
 201dccc:	0005883a 	mov	r2,zero
 201dcd0:	00004906 	br	201ddf8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 201dcd4:	e0bffe17 	ldw	r2,-8(fp)
 201dcd8:	1000051e 	bne	r2,zero,201dcf0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 201dcdc:	e0bfff17 	ldw	r2,-4(fp)
 201dce0:	00c00304 	movi	r3,12
 201dce4:	10c00005 	stb	r3,0(r2)
        return (0);
 201dce8:	0005883a 	mov	r2,zero
 201dcec:	00004206 	br	201ddf8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 201dcf0:	d0a7ac03 	ldbu	r2,-24912(gp)
 201dcf4:	10803fcc 	andi	r2,r2,255
 201dcf8:	10000526 	beq	r2,zero,201dd10 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 201dcfc:	e0bfff17 	ldw	r2,-4(fp)
 201dd00:	00c00444 	movi	r3,17
 201dd04:	10c00005 	stb	r3,0(r2)
        return (0);
 201dd08:	0005883a 	mov	r2,zero
 201dd0c:	00003a06 	br	201ddf8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201dd10:	0005303a 	rdctl	r2,status
 201dd14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201dd18:	e0fffc17 	ldw	r3,-16(fp)
 201dd1c:	00bfff84 	movi	r2,-2
 201dd20:	1884703a 	and	r2,r3,r2
 201dd24:	1001703a 	wrctl	status,r2
  
  return context;
 201dd28:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201dd2c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 201dd30:	e0bffd03 	ldbu	r2,-12(fp)
 201dd34:	10803fd8 	cmpnei	r2,r2,255
 201dd38:	1000031e 	bne	r2,zero,201dd48 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 201dd3c:	d0a7ad17 	ldw	r2,-24908(gp)
 201dd40:	10800c83 	ldbu	r2,50(r2)
 201dd44:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201dd48:	e0fffd03 	ldbu	r3,-12(fp)
 201dd4c:	008080f4 	movhi	r2,515
 201dd50:	10bac204 	addi	r2,r2,-5368
 201dd54:	18c7883a 	add	r3,r3,r3
 201dd58:	18c7883a 	add	r3,r3,r3
 201dd5c:	10c5883a 	add	r2,r2,r3
 201dd60:	10800017 	ldw	r2,0(r2)
 201dd64:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 201dd68:	e0bff817 	ldw	r2,-32(fp)
 201dd6c:	1000091e 	bne	r2,zero,201dd94 <OSTaskNameGet+0x120>
 201dd70:	e0bff617 	ldw	r2,-40(fp)
 201dd74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dd78:	e0bff717 	ldw	r2,-36(fp)
 201dd7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201dd80:	e0bfff17 	ldw	r2,-4(fp)
 201dd84:	00c010c4 	movi	r3,67
 201dd88:	10c00005 	stb	r3,0(r2)
        return (0);
 201dd8c:	0005883a 	mov	r2,zero
 201dd90:	00001906 	br	201ddf8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201dd94:	e0bff817 	ldw	r2,-32(fp)
 201dd98:	10800058 	cmpnei	r2,r2,1
 201dd9c:	1000091e 	bne	r2,zero,201ddc4 <OSTaskNameGet+0x150>
 201dda0:	e0bff617 	ldw	r2,-40(fp)
 201dda4:	e0bff915 	stw	r2,-28(fp)
 201dda8:	e0bff917 	ldw	r2,-28(fp)
 201ddac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201ddb0:	e0bfff17 	ldw	r2,-4(fp)
 201ddb4:	00c010c4 	movi	r3,67
 201ddb8:	10c00005 	stb	r3,0(r2)
        return (0);
 201ddbc:	0005883a 	mov	r2,zero
 201ddc0:	00000d06 	br	201ddf8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 201ddc4:	e0bff817 	ldw	r2,-32(fp)
 201ddc8:	10801304 	addi	r2,r2,76
 201ddcc:	100b883a 	mov	r5,r2
 201ddd0:	e13ffe17 	ldw	r4,-8(fp)
 201ddd4:	20183ac0 	call	20183ac <OS_StrCopy>
 201ddd8:	e0bffb05 	stb	r2,-20(fp)
 201dddc:	e0bff617 	ldw	r2,-40(fp)
 201dde0:	e0bffa15 	stw	r2,-24(fp)
 201dde4:	e0bffa17 	ldw	r2,-24(fp)
 201dde8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201ddec:	e0bfff17 	ldw	r2,-4(fp)
 201ddf0:	10000005 	stb	zero,0(r2)
    return (len);
 201ddf4:	e0bffb03 	ldbu	r2,-20(fp)
}
 201ddf8:	e037883a 	mov	sp,fp
 201ddfc:	dfc00117 	ldw	ra,4(sp)
 201de00:	df000017 	ldw	fp,0(sp)
 201de04:	dec00204 	addi	sp,sp,8
 201de08:	f800283a 	ret

0201de0c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201de0c:	defff304 	addi	sp,sp,-52
 201de10:	dfc00c15 	stw	ra,48(sp)
 201de14:	df000b15 	stw	fp,44(sp)
 201de18:	df000b04 	addi	fp,sp,44
 201de1c:	2005883a 	mov	r2,r4
 201de20:	e17ffe15 	stw	r5,-8(fp)
 201de24:	e1bfff15 	stw	r6,-4(fp)
 201de28:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201de2c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201de30:	e0bfff17 	ldw	r2,-4(fp)
 201de34:	10005c26 	beq	r2,zero,201dfa8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 201de38:	e0bffd03 	ldbu	r2,-12(fp)
 201de3c:	10800570 	cmpltui	r2,r2,21
 201de40:	1000071e 	bne	r2,zero,201de60 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 201de44:	e0bffd03 	ldbu	r2,-12(fp)
 201de48:	10803fe0 	cmpeqi	r2,r2,255
 201de4c:	1000041e 	bne	r2,zero,201de60 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 201de50:	e0bfff17 	ldw	r2,-4(fp)
 201de54:	00c00a84 	movi	r3,42
 201de58:	10c00005 	stb	r3,0(r2)
            return;
 201de5c:	00005306 	br	201dfac <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 201de60:	e0bffe17 	ldw	r2,-8(fp)
 201de64:	1000041e 	bne	r2,zero,201de78 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 201de68:	e0bfff17 	ldw	r2,-4(fp)
 201de6c:	00c00304 	movi	r3,12
 201de70:	10c00005 	stb	r3,0(r2)
        return;
 201de74:	00004d06 	br	201dfac <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201de78:	d0a7ac03 	ldbu	r2,-24912(gp)
 201de7c:	10803fcc 	andi	r2,r2,255
 201de80:	10000426 	beq	r2,zero,201de94 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 201de84:	e0bfff17 	ldw	r2,-4(fp)
 201de88:	00c00484 	movi	r3,18
 201de8c:	10c00005 	stb	r3,0(r2)
        return;
 201de90:	00004606 	br	201dfac <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201de94:	0005303a 	rdctl	r2,status
 201de98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201de9c:	e0fffc17 	ldw	r3,-16(fp)
 201dea0:	00bfff84 	movi	r2,-2
 201dea4:	1884703a 	and	r2,r3,r2
 201dea8:	1001703a 	wrctl	status,r2
  
  return context;
 201deac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201deb0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201deb4:	e0bffd03 	ldbu	r2,-12(fp)
 201deb8:	10803fd8 	cmpnei	r2,r2,255
 201debc:	1000031e 	bne	r2,zero,201decc <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 201dec0:	d0a7ad17 	ldw	r2,-24908(gp)
 201dec4:	10800c83 	ldbu	r2,50(r2)
 201dec8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201decc:	e0fffd03 	ldbu	r3,-12(fp)
 201ded0:	008080f4 	movhi	r2,515
 201ded4:	10bac204 	addi	r2,r2,-5368
 201ded8:	18c7883a 	add	r3,r3,r3
 201dedc:	18c7883a 	add	r3,r3,r3
 201dee0:	10c5883a 	add	r2,r2,r3
 201dee4:	10800017 	ldw	r2,0(r2)
 201dee8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201deec:	e0bff717 	ldw	r2,-36(fp)
 201def0:	1000081e 	bne	r2,zero,201df14 <OSTaskNameSet+0x108>
 201def4:	e0bff517 	ldw	r2,-44(fp)
 201def8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201defc:	e0bff617 	ldw	r2,-40(fp)
 201df00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201df04:	e0bfff17 	ldw	r2,-4(fp)
 201df08:	00c010c4 	movi	r3,67
 201df0c:	10c00005 	stb	r3,0(r2)
        return;
 201df10:	00002606 	br	201dfac <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 201df14:	e0bff717 	ldw	r2,-36(fp)
 201df18:	10800058 	cmpnei	r2,r2,1
 201df1c:	1000081e 	bne	r2,zero,201df40 <OSTaskNameSet+0x134>
 201df20:	e0bff517 	ldw	r2,-44(fp)
 201df24:	e0bff815 	stw	r2,-32(fp)
 201df28:	e0bff817 	ldw	r2,-32(fp)
 201df2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201df30:	e0bfff17 	ldw	r2,-4(fp)
 201df34:	00c010c4 	movi	r3,67
 201df38:	10c00005 	stb	r3,0(r2)
        return;
 201df3c:	00001b06 	br	201dfac <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 201df40:	e13ffe17 	ldw	r4,-8(fp)
 201df44:	20184200 	call	2018420 <OS_StrLen>
 201df48:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201df4c:	e0bffa03 	ldbu	r2,-24(fp)
 201df50:	10800830 	cmpltui	r2,r2,32
 201df54:	1000081e 	bne	r2,zero,201df78 <OSTaskNameSet+0x16c>
 201df58:	e0bff517 	ldw	r2,-44(fp)
 201df5c:	e0bff915 	stw	r2,-28(fp)
 201df60:	e0bff917 	ldw	r2,-28(fp)
 201df64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 201df68:	e0bfff17 	ldw	r2,-4(fp)
 201df6c:	00c01044 	movi	r3,65
 201df70:	10c00005 	stb	r3,0(r2)
        return;
 201df74:	00000d06 	br	201dfac <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201df78:	e0bff717 	ldw	r2,-36(fp)
 201df7c:	10801304 	addi	r2,r2,76
 201df80:	e17ffe17 	ldw	r5,-8(fp)
 201df84:	1009883a 	mov	r4,r2
 201df88:	20183ac0 	call	20183ac <OS_StrCopy>
 201df8c:	e0bff517 	ldw	r2,-44(fp)
 201df90:	e0bffb15 	stw	r2,-20(fp)
 201df94:	e0bffb17 	ldw	r2,-20(fp)
 201df98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201df9c:	e0bfff17 	ldw	r2,-4(fp)
 201dfa0:	10000005 	stb	zero,0(r2)
 201dfa4:	00000106 	br	201dfac <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201dfa8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201dfac:	e037883a 	mov	sp,fp
 201dfb0:	dfc00117 	ldw	ra,4(sp)
 201dfb4:	df000017 	ldw	fp,0(sp)
 201dfb8:	dec00204 	addi	sp,sp,8
 201dfbc:	f800283a 	ret

0201dfc0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 201dfc0:	defff404 	addi	sp,sp,-48
 201dfc4:	dfc00b15 	stw	ra,44(sp)
 201dfc8:	df000a15 	stw	fp,40(sp)
 201dfcc:	df000a04 	addi	fp,sp,40
 201dfd0:	2005883a 	mov	r2,r4
 201dfd4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201dfd8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201dfdc:	e0bfff03 	ldbu	r2,-4(fp)
 201dfe0:	10800530 	cmpltui	r2,r2,20
 201dfe4:	1000021e 	bne	r2,zero,201dff0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201dfe8:	00800a84 	movi	r2,42
 201dfec:	00006406 	br	201e180 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201dff0:	0005303a 	rdctl	r2,status
 201dff4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201dff8:	e0fffe17 	ldw	r3,-8(fp)
 201dffc:	00bfff84 	movi	r2,-2
 201e000:	1884703a 	and	r2,r3,r2
 201e004:	1001703a 	wrctl	status,r2
  
  return context;
 201e008:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201e00c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201e010:	e0ffff03 	ldbu	r3,-4(fp)
 201e014:	008080f4 	movhi	r2,515
 201e018:	10bac204 	addi	r2,r2,-5368
 201e01c:	18c7883a 	add	r3,r3,r3
 201e020:	18c7883a 	add	r3,r3,r3
 201e024:	10c5883a 	add	r2,r2,r3
 201e028:	10800017 	ldw	r2,0(r2)
 201e02c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 201e030:	e0bff817 	ldw	r2,-32(fp)
 201e034:	1000061e 	bne	r2,zero,201e050 <OSTaskResume+0x90>
 201e038:	e0bff617 	ldw	r2,-40(fp)
 201e03c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e040:	e0bff717 	ldw	r2,-36(fp)
 201e044:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 201e048:	00801184 	movi	r2,70
 201e04c:	00004c06 	br	201e180 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 201e050:	e0bff817 	ldw	r2,-32(fp)
 201e054:	10800058 	cmpnei	r2,r2,1
 201e058:	1000061e 	bne	r2,zero,201e074 <OSTaskResume+0xb4>
 201e05c:	e0bff617 	ldw	r2,-40(fp)
 201e060:	e0bff915 	stw	r2,-28(fp)
 201e064:	e0bff917 	ldw	r2,-28(fp)
 201e068:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201e06c:	008010c4 	movi	r2,67
 201e070:	00004306 	br	201e180 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 201e074:	e0bff817 	ldw	r2,-32(fp)
 201e078:	10800c03 	ldbu	r2,48(r2)
 201e07c:	10803fcc 	andi	r2,r2,255
 201e080:	1080020c 	andi	r2,r2,8
 201e084:	10003926 	beq	r2,zero,201e16c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201e088:	e0bff817 	ldw	r2,-32(fp)
 201e08c:	10c00c03 	ldbu	r3,48(r2)
 201e090:	00bffdc4 	movi	r2,-9
 201e094:	1884703a 	and	r2,r3,r2
 201e098:	1007883a 	mov	r3,r2
 201e09c:	e0bff817 	ldw	r2,-32(fp)
 201e0a0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 201e0a4:	e0bff817 	ldw	r2,-32(fp)
 201e0a8:	10800c03 	ldbu	r2,48(r2)
 201e0ac:	10803fcc 	andi	r2,r2,255
 201e0b0:	1000281e 	bne	r2,zero,201e154 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 201e0b4:	e0bff817 	ldw	r2,-32(fp)
 201e0b8:	10800b8b 	ldhu	r2,46(r2)
 201e0bc:	10bfffcc 	andi	r2,r2,65535
 201e0c0:	10001f1e 	bne	r2,zero,201e140 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 201e0c4:	e0bff817 	ldw	r2,-32(fp)
 201e0c8:	10c00d83 	ldbu	r3,54(r2)
 201e0cc:	d0a7aa03 	ldbu	r2,-24920(gp)
 201e0d0:	1884b03a 	or	r2,r3,r2
 201e0d4:	d0a7aa05 	stb	r2,-24920(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201e0d8:	e0bff817 	ldw	r2,-32(fp)
 201e0dc:	10800d03 	ldbu	r2,52(r2)
 201e0e0:	10c03fcc 	andi	r3,r2,255
 201e0e4:	e0bff817 	ldw	r2,-32(fp)
 201e0e8:	10800d03 	ldbu	r2,52(r2)
 201e0ec:	11003fcc 	andi	r4,r2,255
 201e0f0:	d0a7aa44 	addi	r2,gp,-24919
 201e0f4:	2085883a 	add	r2,r4,r2
 201e0f8:	11000003 	ldbu	r4,0(r2)
 201e0fc:	e0bff817 	ldw	r2,-32(fp)
 201e100:	10800d43 	ldbu	r2,53(r2)
 201e104:	2084b03a 	or	r2,r4,r2
 201e108:	1009883a 	mov	r4,r2
 201e10c:	d0a7aa44 	addi	r2,gp,-24919
 201e110:	1885883a 	add	r2,r3,r2
 201e114:	11000005 	stb	r4,0(r2)
 201e118:	e0bff617 	ldw	r2,-40(fp)
 201e11c:	e0bffa15 	stw	r2,-24(fp)
 201e120:	e0bffa17 	ldw	r2,-24(fp)
 201e124:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201e128:	d0a79e43 	ldbu	r2,-24967(gp)
 201e12c:	10803fcc 	andi	r2,r2,255
 201e130:	10800058 	cmpnei	r2,r2,1
 201e134:	10000b1e 	bne	r2,zero,201e164 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 201e138:	20182680 	call	2018268 <OS_Sched>
 201e13c:	00000906 	br	201e164 <OSTaskResume+0x1a4>
 201e140:	e0bff617 	ldw	r2,-40(fp)
 201e144:	e0bffb15 	stw	r2,-20(fp)
 201e148:	e0bffb17 	ldw	r2,-20(fp)
 201e14c:	1001703a 	wrctl	status,r2
 201e150:	00000406 	br	201e164 <OSTaskResume+0x1a4>
 201e154:	e0bff617 	ldw	r2,-40(fp)
 201e158:	e0bffc15 	stw	r2,-16(fp)
 201e15c:	e0bffc17 	ldw	r2,-16(fp)
 201e160:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 201e164:	0005883a 	mov	r2,zero
 201e168:	00000506 	br	201e180 <OSTaskResume+0x1c0>
 201e16c:	e0bff617 	ldw	r2,-40(fp)
 201e170:	e0bffd15 	stw	r2,-12(fp)
 201e174:	e0bffd17 	ldw	r2,-12(fp)
 201e178:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201e17c:	00801104 	movi	r2,68
}
 201e180:	e037883a 	mov	sp,fp
 201e184:	dfc00117 	ldw	ra,4(sp)
 201e188:	df000017 	ldw	fp,0(sp)
 201e18c:	dec00204 	addi	sp,sp,8
 201e190:	f800283a 	ret

0201e194 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 201e194:	defff304 	addi	sp,sp,-52
 201e198:	df000c15 	stw	fp,48(sp)
 201e19c:	df000c04 	addi	fp,sp,48
 201e1a0:	2005883a 	mov	r2,r4
 201e1a4:	e17fff15 	stw	r5,-4(fp)
 201e1a8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201e1ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 201e1b0:	e0bffe03 	ldbu	r2,-8(fp)
 201e1b4:	10800570 	cmpltui	r2,r2,21
 201e1b8:	1000051e 	bne	r2,zero,201e1d0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201e1bc:	e0bffe03 	ldbu	r2,-8(fp)
 201e1c0:	10803fe0 	cmpeqi	r2,r2,255
 201e1c4:	1000021e 	bne	r2,zero,201e1d0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201e1c8:	00800a84 	movi	r2,42
 201e1cc:	00005d06 	br	201e344 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 201e1d0:	e0bfff17 	ldw	r2,-4(fp)
 201e1d4:	1000021e 	bne	r2,zero,201e1e0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201e1d8:	00800244 	movi	r2,9
 201e1dc:	00005906 	br	201e344 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 201e1e0:	e0bfff17 	ldw	r2,-4(fp)
 201e1e4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201e1e8:	e0bfff17 	ldw	r2,-4(fp)
 201e1ec:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e1f0:	0005303a 	rdctl	r2,status
 201e1f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e1f8:	e0fffd17 	ldw	r3,-12(fp)
 201e1fc:	00bfff84 	movi	r2,-2
 201e200:	1884703a 	and	r2,r3,r2
 201e204:	1001703a 	wrctl	status,r2
  
  return context;
 201e208:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 201e20c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 201e210:	e0bffe03 	ldbu	r2,-8(fp)
 201e214:	10803fd8 	cmpnei	r2,r2,255
 201e218:	1000031e 	bne	r2,zero,201e228 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201e21c:	d0a7ad17 	ldw	r2,-24908(gp)
 201e220:	10800c83 	ldbu	r2,50(r2)
 201e224:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201e228:	e0fffe03 	ldbu	r3,-8(fp)
 201e22c:	008080f4 	movhi	r2,515
 201e230:	10bac204 	addi	r2,r2,-5368
 201e234:	18c7883a 	add	r3,r3,r3
 201e238:	18c7883a 	add	r3,r3,r3
 201e23c:	10c5883a 	add	r2,r2,r3
 201e240:	10800017 	ldw	r2,0(r2)
 201e244:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 201e248:	e0bff817 	ldw	r2,-32(fp)
 201e24c:	1000061e 	bne	r2,zero,201e268 <OSTaskStkChk+0xd4>
 201e250:	e0bff617 	ldw	r2,-40(fp)
 201e254:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e258:	e0bff717 	ldw	r2,-36(fp)
 201e25c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201e260:	008010c4 	movi	r2,67
 201e264:	00003706 	br	201e344 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201e268:	e0bff817 	ldw	r2,-32(fp)
 201e26c:	10800058 	cmpnei	r2,r2,1
 201e270:	1000061e 	bne	r2,zero,201e28c <OSTaskStkChk+0xf8>
 201e274:	e0bff617 	ldw	r2,-40(fp)
 201e278:	e0bff915 	stw	r2,-28(fp)
 201e27c:	e0bff917 	ldw	r2,-28(fp)
 201e280:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201e284:	008010c4 	movi	r2,67
 201e288:	00002e06 	br	201e344 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201e28c:	e0bff817 	ldw	r2,-32(fp)
 201e290:	1080040b 	ldhu	r2,16(r2)
 201e294:	10bfffcc 	andi	r2,r2,65535
 201e298:	1080004c 	andi	r2,r2,1
 201e29c:	1000061e 	bne	r2,zero,201e2b8 <OSTaskStkChk+0x124>
 201e2a0:	e0bff617 	ldw	r2,-40(fp)
 201e2a4:	e0bffa15 	stw	r2,-24(fp)
 201e2a8:	e0bffa17 	ldw	r2,-24(fp)
 201e2ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 201e2b0:	00801144 	movi	r2,69
 201e2b4:	00002306 	br	201e344 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201e2b8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 201e2bc:	e0bff817 	ldw	r2,-32(fp)
 201e2c0:	10800317 	ldw	r2,12(r2)
 201e2c4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201e2c8:	e0bff817 	ldw	r2,-32(fp)
 201e2cc:	10800217 	ldw	r2,8(r2)
 201e2d0:	e0bff415 	stw	r2,-48(fp)
 201e2d4:	e0bff617 	ldw	r2,-40(fp)
 201e2d8:	e0bffb15 	stw	r2,-20(fp)
 201e2dc:	e0bffb17 	ldw	r2,-20(fp)
 201e2e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201e2e4:	00000306 	br	201e2f4 <OSTaskStkChk+0x160>
        nfree++;
 201e2e8:	e0bff517 	ldw	r2,-44(fp)
 201e2ec:	10800044 	addi	r2,r2,1
 201e2f0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201e2f4:	e0bff417 	ldw	r2,-48(fp)
 201e2f8:	10c00104 	addi	r3,r2,4
 201e2fc:	e0fff415 	stw	r3,-48(fp)
 201e300:	10800017 	ldw	r2,0(r2)
 201e304:	103ff826 	beq	r2,zero,201e2e8 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201e308:	e0bff517 	ldw	r2,-44(fp)
 201e30c:	1085883a 	add	r2,r2,r2
 201e310:	1085883a 	add	r2,r2,r2
 201e314:	1007883a 	mov	r3,r2
 201e318:	e0bfff17 	ldw	r2,-4(fp)
 201e31c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 201e320:	e0fffc17 	ldw	r3,-16(fp)
 201e324:	e0bff517 	ldw	r2,-44(fp)
 201e328:	1885c83a 	sub	r2,r3,r2
 201e32c:	1085883a 	add	r2,r2,r2
 201e330:	1085883a 	add	r2,r2,r2
 201e334:	1007883a 	mov	r3,r2
 201e338:	e0bfff17 	ldw	r2,-4(fp)
 201e33c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 201e340:	0005883a 	mov	r2,zero
}
 201e344:	e037883a 	mov	sp,fp
 201e348:	df000017 	ldw	fp,0(sp)
 201e34c:	dec00104 	addi	sp,sp,4
 201e350:	f800283a 	ret

0201e354 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 201e354:	defff504 	addi	sp,sp,-44
 201e358:	dfc00a15 	stw	ra,40(sp)
 201e35c:	df000915 	stw	fp,36(sp)
 201e360:	df000904 	addi	fp,sp,36
 201e364:	2005883a 	mov	r2,r4
 201e368:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201e36c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 201e370:	e0bfff03 	ldbu	r2,-4(fp)
 201e374:	10800518 	cmpnei	r2,r2,20
 201e378:	1000021e 	bne	r2,zero,201e384 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201e37c:	008011c4 	movi	r2,71
 201e380:	00006806 	br	201e524 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201e384:	e0bfff03 	ldbu	r2,-4(fp)
 201e388:	10800530 	cmpltui	r2,r2,20
 201e38c:	1000051e 	bne	r2,zero,201e3a4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 201e390:	e0bfff03 	ldbu	r2,-4(fp)
 201e394:	10803fe0 	cmpeqi	r2,r2,255
 201e398:	1000021e 	bne	r2,zero,201e3a4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 201e39c:	00800a84 	movi	r2,42
 201e3a0:	00006006 	br	201e524 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e3a4:	0005303a 	rdctl	r2,status
 201e3a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e3ac:	e0fffe17 	ldw	r3,-8(fp)
 201e3b0:	00bfff84 	movi	r2,-2
 201e3b4:	1884703a 	and	r2,r3,r2
 201e3b8:	1001703a 	wrctl	status,r2
  
  return context;
 201e3bc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 201e3c0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 201e3c4:	e0bfff03 	ldbu	r2,-4(fp)
 201e3c8:	10803fd8 	cmpnei	r2,r2,255
 201e3cc:	1000061e 	bne	r2,zero,201e3e8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201e3d0:	d0a7ad17 	ldw	r2,-24908(gp)
 201e3d4:	10800c83 	ldbu	r2,50(r2)
 201e3d8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 201e3dc:	00800044 	movi	r2,1
 201e3e0:	e0bff705 	stb	r2,-36(fp)
 201e3e4:	00000906 	br	201e40c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201e3e8:	d0a7ad17 	ldw	r2,-24908(gp)
 201e3ec:	10800c83 	ldbu	r2,50(r2)
 201e3f0:	10c03fcc 	andi	r3,r2,255
 201e3f4:	e0bfff03 	ldbu	r2,-4(fp)
 201e3f8:	1880031e 	bne	r3,r2,201e408 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 201e3fc:	00800044 	movi	r2,1
 201e400:	e0bff705 	stb	r2,-36(fp)
 201e404:	00000106 	br	201e40c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201e408:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201e40c:	e0ffff03 	ldbu	r3,-4(fp)
 201e410:	008080f4 	movhi	r2,515
 201e414:	10bac204 	addi	r2,r2,-5368
 201e418:	18c7883a 	add	r3,r3,r3
 201e41c:	18c7883a 	add	r3,r3,r3
 201e420:	10c5883a 	add	r2,r2,r3
 201e424:	10800017 	ldw	r2,0(r2)
 201e428:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201e42c:	e0bffa17 	ldw	r2,-24(fp)
 201e430:	1000061e 	bne	r2,zero,201e44c <OSTaskSuspend+0xf8>
 201e434:	e0bff817 	ldw	r2,-32(fp)
 201e438:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e43c:	e0bff917 	ldw	r2,-28(fp)
 201e440:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201e444:	00801204 	movi	r2,72
 201e448:	00003606 	br	201e524 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201e44c:	e0bffa17 	ldw	r2,-24(fp)
 201e450:	10800058 	cmpnei	r2,r2,1
 201e454:	1000061e 	bne	r2,zero,201e470 <OSTaskSuspend+0x11c>
 201e458:	e0bff817 	ldw	r2,-32(fp)
 201e45c:	e0bffb15 	stw	r2,-20(fp)
 201e460:	e0bffb17 	ldw	r2,-20(fp)
 201e464:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201e468:	008010c4 	movi	r2,67
 201e46c:	00002d06 	br	201e524 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 201e470:	e0bffa17 	ldw	r2,-24(fp)
 201e474:	10800d03 	ldbu	r2,52(r2)
 201e478:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201e47c:	e0fffd03 	ldbu	r3,-12(fp)
 201e480:	e13ffd03 	ldbu	r4,-12(fp)
 201e484:	d0a7aa44 	addi	r2,gp,-24919
 201e488:	2085883a 	add	r2,r4,r2
 201e48c:	10800003 	ldbu	r2,0(r2)
 201e490:	1009883a 	mov	r4,r2
 201e494:	e0bffa17 	ldw	r2,-24(fp)
 201e498:	10800d43 	ldbu	r2,53(r2)
 201e49c:	0084303a 	nor	r2,zero,r2
 201e4a0:	2084703a 	and	r2,r4,r2
 201e4a4:	1009883a 	mov	r4,r2
 201e4a8:	d0a7aa44 	addi	r2,gp,-24919
 201e4ac:	1885883a 	add	r2,r3,r2
 201e4b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 201e4b4:	e0fffd03 	ldbu	r3,-12(fp)
 201e4b8:	d0a7aa44 	addi	r2,gp,-24919
 201e4bc:	1885883a 	add	r2,r3,r2
 201e4c0:	10800003 	ldbu	r2,0(r2)
 201e4c4:	10803fcc 	andi	r2,r2,255
 201e4c8:	1000071e 	bne	r2,zero,201e4e8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 201e4cc:	e0bffa17 	ldw	r2,-24(fp)
 201e4d0:	10800d83 	ldbu	r2,54(r2)
 201e4d4:	0084303a 	nor	r2,zero,r2
 201e4d8:	1007883a 	mov	r3,r2
 201e4dc:	d0a7aa03 	ldbu	r2,-24920(gp)
 201e4e0:	1884703a 	and	r2,r3,r2
 201e4e4:	d0a7aa05 	stb	r2,-24920(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201e4e8:	e0bffa17 	ldw	r2,-24(fp)
 201e4ec:	10800c03 	ldbu	r2,48(r2)
 201e4f0:	10800214 	ori	r2,r2,8
 201e4f4:	1007883a 	mov	r3,r2
 201e4f8:	e0bffa17 	ldw	r2,-24(fp)
 201e4fc:	10c00c05 	stb	r3,48(r2)
 201e500:	e0bff817 	ldw	r2,-32(fp)
 201e504:	e0bffc15 	stw	r2,-16(fp)
 201e508:	e0bffc17 	ldw	r2,-16(fp)
 201e50c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 201e510:	e0bff703 	ldbu	r2,-36(fp)
 201e514:	10800058 	cmpnei	r2,r2,1
 201e518:	1000011e 	bne	r2,zero,201e520 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 201e51c:	20182680 	call	2018268 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201e520:	0005883a 	mov	r2,zero
}
 201e524:	e037883a 	mov	sp,fp
 201e528:	dfc00117 	ldw	ra,4(sp)
 201e52c:	df000017 	ldw	fp,0(sp)
 201e530:	dec00204 	addi	sp,sp,8
 201e534:	f800283a 	ret

0201e538 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 201e538:	defff604 	addi	sp,sp,-40
 201e53c:	dfc00915 	stw	ra,36(sp)
 201e540:	df000815 	stw	fp,32(sp)
 201e544:	df000804 	addi	fp,sp,32
 201e548:	2005883a 	mov	r2,r4
 201e54c:	e17fff15 	stw	r5,-4(fp)
 201e550:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201e554:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 201e558:	e0bffe03 	ldbu	r2,-8(fp)
 201e55c:	10800570 	cmpltui	r2,r2,21
 201e560:	1000051e 	bne	r2,zero,201e578 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201e564:	e0bffe03 	ldbu	r2,-8(fp)
 201e568:	10803fe0 	cmpeqi	r2,r2,255
 201e56c:	1000021e 	bne	r2,zero,201e578 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 201e570:	00800a84 	movi	r2,42
 201e574:	00003406 	br	201e648 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 201e578:	e0bfff17 	ldw	r2,-4(fp)
 201e57c:	1000021e 	bne	r2,zero,201e588 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 201e580:	00800244 	movi	r2,9
 201e584:	00003006 	br	201e648 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e588:	0005303a 	rdctl	r2,status
 201e58c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e590:	e0fffd17 	ldw	r3,-12(fp)
 201e594:	00bfff84 	movi	r2,-2
 201e598:	1884703a 	and	r2,r3,r2
 201e59c:	1001703a 	wrctl	status,r2
  
  return context;
 201e5a0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201e5a4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201e5a8:	e0bffe03 	ldbu	r2,-8(fp)
 201e5ac:	10803fd8 	cmpnei	r2,r2,255
 201e5b0:	1000031e 	bne	r2,zero,201e5c0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 201e5b4:	d0a7ad17 	ldw	r2,-24908(gp)
 201e5b8:	10800c83 	ldbu	r2,50(r2)
 201e5bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201e5c0:	e0fffe03 	ldbu	r3,-8(fp)
 201e5c4:	008080f4 	movhi	r2,515
 201e5c8:	10bac204 	addi	r2,r2,-5368
 201e5cc:	18c7883a 	add	r3,r3,r3
 201e5d0:	18c7883a 	add	r3,r3,r3
 201e5d4:	10c5883a 	add	r2,r2,r3
 201e5d8:	10800017 	ldw	r2,0(r2)
 201e5dc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201e5e0:	e0bffa17 	ldw	r2,-24(fp)
 201e5e4:	1000061e 	bne	r2,zero,201e600 <OSTaskQuery+0xc8>
 201e5e8:	e0bff817 	ldw	r2,-32(fp)
 201e5ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e5f0:	e0bff917 	ldw	r2,-28(fp)
 201e5f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201e5f8:	00800a44 	movi	r2,41
 201e5fc:	00001206 	br	201e648 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 201e600:	e0bffa17 	ldw	r2,-24(fp)
 201e604:	10800058 	cmpnei	r2,r2,1
 201e608:	1000061e 	bne	r2,zero,201e624 <OSTaskQuery+0xec>
 201e60c:	e0bff817 	ldw	r2,-32(fp)
 201e610:	e0bffb15 	stw	r2,-20(fp)
 201e614:	e0bffb17 	ldw	r2,-20(fp)
 201e618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201e61c:	008010c4 	movi	r2,67
 201e620:	00000906 	br	201e648 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201e624:	01801b04 	movi	r6,108
 201e628:	e17ffa17 	ldw	r5,-24(fp)
 201e62c:	e13fff17 	ldw	r4,-4(fp)
 201e630:	20182000 	call	2018200 <OS_MemCopy>
 201e634:	e0bff817 	ldw	r2,-32(fp)
 201e638:	e0bffc15 	stw	r2,-16(fp)
 201e63c:	e0bffc17 	ldw	r2,-16(fp)
 201e640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201e644:	0005883a 	mov	r2,zero
}
 201e648:	e037883a 	mov	sp,fp
 201e64c:	dfc00117 	ldw	ra,4(sp)
 201e650:	df000017 	ldw	fp,0(sp)
 201e654:	dec00204 	addi	sp,sp,8
 201e658:	f800283a 	ret

0201e65c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 201e65c:	defffc04 	addi	sp,sp,-16
 201e660:	df000315 	stw	fp,12(sp)
 201e664:	df000304 	addi	fp,sp,12
 201e668:	e13ffd15 	stw	r4,-12(fp)
 201e66c:	e17ffe15 	stw	r5,-8(fp)
 201e670:	3005883a 	mov	r2,r6
 201e674:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 201e678:	e0bfff0b 	ldhu	r2,-4(fp)
 201e67c:	1080004c 	andi	r2,r2,1
 201e680:	10000d26 	beq	r2,zero,201e6b8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201e684:	e0bfff0b 	ldhu	r2,-4(fp)
 201e688:	1080008c 	andi	r2,r2,2
 201e68c:	10000a26 	beq	r2,zero,201e6b8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201e690:	00000706 	br	201e6b0 <OS_TaskStkClr+0x54>
                size--;
 201e694:	e0bffe17 	ldw	r2,-8(fp)
 201e698:	10bfffc4 	addi	r2,r2,-1
 201e69c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 201e6a0:	e0bffd17 	ldw	r2,-12(fp)
 201e6a4:	10c00104 	addi	r3,r2,4
 201e6a8:	e0fffd15 	stw	r3,-12(fp)
 201e6ac:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201e6b0:	e0bffe17 	ldw	r2,-8(fp)
 201e6b4:	103ff71e 	bne	r2,zero,201e694 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 201e6b8:	0001883a 	nop
 201e6bc:	e037883a 	mov	sp,fp
 201e6c0:	df000017 	ldw	fp,0(sp)
 201e6c4:	dec00104 	addi	sp,sp,4
 201e6c8:	f800283a 	ret

0201e6cc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 201e6cc:	defff904 	addi	sp,sp,-28
 201e6d0:	dfc00615 	stw	ra,24(sp)
 201e6d4:	df000515 	stw	fp,20(sp)
 201e6d8:	df000504 	addi	fp,sp,20
 201e6dc:	2005883a 	mov	r2,r4
 201e6e0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201e6e4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201e6e8:	d0a7ac03 	ldbu	r2,-24912(gp)
 201e6ec:	10803fcc 	andi	r2,r2,255
 201e6f0:	1000311e 	bne	r2,zero,201e7b8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 201e6f4:	e0bfff0b 	ldhu	r2,-4(fp)
 201e6f8:	10003026 	beq	r2,zero,201e7bc <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e6fc:	0005303a 	rdctl	r2,status
 201e700:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e704:	e0fffe17 	ldw	r3,-8(fp)
 201e708:	00bfff84 	movi	r2,-2
 201e70c:	1884703a 	and	r2,r3,r2
 201e710:	1001703a 	wrctl	status,r2
  
  return context;
 201e714:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201e718:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201e71c:	d0a7ad17 	ldw	r2,-24908(gp)
 201e720:	10800d03 	ldbu	r2,52(r2)
 201e724:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201e728:	e0fffd03 	ldbu	r3,-12(fp)
 201e72c:	e13ffd03 	ldbu	r4,-12(fp)
 201e730:	d0a7aa44 	addi	r2,gp,-24919
 201e734:	2085883a 	add	r2,r4,r2
 201e738:	10800003 	ldbu	r2,0(r2)
 201e73c:	1009883a 	mov	r4,r2
 201e740:	d0a7ad17 	ldw	r2,-24908(gp)
 201e744:	10800d43 	ldbu	r2,53(r2)
 201e748:	0084303a 	nor	r2,zero,r2
 201e74c:	2084703a 	and	r2,r4,r2
 201e750:	1009883a 	mov	r4,r2
 201e754:	d0a7aa44 	addi	r2,gp,-24919
 201e758:	1885883a 	add	r2,r3,r2
 201e75c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 201e760:	e0fffd03 	ldbu	r3,-12(fp)
 201e764:	d0a7aa44 	addi	r2,gp,-24919
 201e768:	1885883a 	add	r2,r3,r2
 201e76c:	10800003 	ldbu	r2,0(r2)
 201e770:	10803fcc 	andi	r2,r2,255
 201e774:	1000071e 	bne	r2,zero,201e794 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201e778:	d0a7ad17 	ldw	r2,-24908(gp)
 201e77c:	10800d83 	ldbu	r2,54(r2)
 201e780:	0084303a 	nor	r2,zero,r2
 201e784:	1007883a 	mov	r3,r2
 201e788:	d0a7aa03 	ldbu	r2,-24920(gp)
 201e78c:	1884703a 	and	r2,r3,r2
 201e790:	d0a7aa05 	stb	r2,-24920(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201e794:	d0a7ad17 	ldw	r2,-24908(gp)
 201e798:	e0ffff0b 	ldhu	r3,-4(fp)
 201e79c:	10c00b8d 	sth	r3,46(r2)
 201e7a0:	e0bffb17 	ldw	r2,-20(fp)
 201e7a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e7a8:	e0bffc17 	ldw	r2,-16(fp)
 201e7ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 201e7b0:	20182680 	call	2018268 <OS_Sched>
 201e7b4:	00000106 	br	201e7bc <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 201e7b8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 201e7bc:	e037883a 	mov	sp,fp
 201e7c0:	dfc00117 	ldw	ra,4(sp)
 201e7c4:	df000017 	ldw	fp,0(sp)
 201e7c8:	dec00204 	addi	sp,sp,8
 201e7cc:	f800283a 	ret

0201e7d0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 201e7d0:	defff704 	addi	sp,sp,-36
 201e7d4:	dfc00815 	stw	ra,32(sp)
 201e7d8:	df000715 	stw	fp,28(sp)
 201e7dc:	dc000615 	stw	r16,24(sp)
 201e7e0:	df000704 	addi	fp,sp,28
 201e7e4:	2011883a 	mov	r8,r4
 201e7e8:	2809883a 	mov	r4,r5
 201e7ec:	3007883a 	mov	r3,r6
 201e7f0:	3805883a 	mov	r2,r7
 201e7f4:	e23ffb05 	stb	r8,-20(fp)
 201e7f8:	e13ffc05 	stb	r4,-16(fp)
 201e7fc:	e0fffd05 	stb	r3,-12(fp)
 201e800:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201e804:	d0a7ac03 	ldbu	r2,-24912(gp)
 201e808:	10803fcc 	andi	r2,r2,255
 201e80c:	10000226 	beq	r2,zero,201e818 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 201e810:	00801544 	movi	r2,85
 201e814:	00003d06 	br	201e90c <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 201e818:	e0bffb03 	ldbu	r2,-20(fp)
 201e81c:	1000081e 	bne	r2,zero,201e840 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 201e820:	e0bffc03 	ldbu	r2,-16(fp)
 201e824:	1000061e 	bne	r2,zero,201e840 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 201e828:	e0bffd03 	ldbu	r2,-12(fp)
 201e82c:	1000041e 	bne	r2,zero,201e840 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 201e830:	e0bffe0b 	ldhu	r2,-8(fp)
 201e834:	1000021e 	bne	r2,zero,201e840 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 201e838:	00801504 	movi	r2,84
 201e83c:	00003306 	br	201e90c <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 201e840:	e0bffc03 	ldbu	r2,-16(fp)
 201e844:	10800f30 	cmpltui	r2,r2,60
 201e848:	1000021e 	bne	r2,zero,201e854 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 201e84c:	00801444 	movi	r2,81
 201e850:	00002e06 	br	201e90c <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 201e854:	e0bffd03 	ldbu	r2,-12(fp)
 201e858:	10800f30 	cmpltui	r2,r2,60
 201e85c:	1000021e 	bne	r2,zero,201e868 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 201e860:	00801484 	movi	r2,82
 201e864:	00002906 	br	201e90c <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 201e868:	e0bffe0b 	ldhu	r2,-8(fp)
 201e86c:	1080fa30 	cmpltui	r2,r2,1000
 201e870:	1000021e 	bne	r2,zero,201e87c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 201e874:	008014c4 	movi	r2,83
 201e878:	00002406 	br	201e90c <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201e87c:	e0bffb03 	ldbu	r2,-20(fp)
 201e880:	10c38424 	muli	r3,r2,3600
 201e884:	e0bffc03 	ldbu	r2,-16(fp)
 201e888:	10800f24 	muli	r2,r2,60
 201e88c:	1887883a 	add	r3,r3,r2
 201e890:	e0bffd03 	ldbu	r2,-12(fp)
 201e894:	1885883a 	add	r2,r3,r2
 201e898:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 201e89c:	e0bffe0b 	ldhu	r2,-8(fp)
 201e8a0:	1080fa24 	muli	r2,r2,1000
 201e8a4:	0140fa04 	movi	r5,1000
 201e8a8:	1009883a 	mov	r4,r2
 201e8ac:	20075ec0 	call	20075ec <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201e8b0:	8085883a 	add	r2,r16,r2
 201e8b4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 201e8b8:	e0bffa17 	ldw	r2,-24(fp)
 201e8bc:	1004d43a 	srli	r2,r2,16
 201e8c0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 201e8c4:	e0bffa17 	ldw	r2,-24(fp)
 201e8c8:	10bfffcc 	andi	r2,r2,65535
 201e8cc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 201e8d0:	e0bffa17 	ldw	r2,-24(fp)
 201e8d4:	10bfffcc 	andi	r2,r2,65535
 201e8d8:	1009883a 	mov	r4,r2
 201e8dc:	201e6cc0 	call	201e6cc <OSTimeDly>
    while (loops > 0) {
 201e8e0:	00000706 	br	201e900 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 201e8e4:	01200014 	movui	r4,32768
 201e8e8:	201e6cc0 	call	201e6cc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201e8ec:	01200014 	movui	r4,32768
 201e8f0:	201e6cc0 	call	201e6cc <OSTimeDly>
        loops--;
 201e8f4:	e0bff90b 	ldhu	r2,-28(fp)
 201e8f8:	10bfffc4 	addi	r2,r2,-1
 201e8fc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 201e900:	e0bff90b 	ldhu	r2,-28(fp)
 201e904:	103ff71e 	bne	r2,zero,201e8e4 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 201e908:	0005883a 	mov	r2,zero
}
 201e90c:	e6ffff04 	addi	sp,fp,-4
 201e910:	dfc00217 	ldw	ra,8(sp)
 201e914:	df000117 	ldw	fp,4(sp)
 201e918:	dc000017 	ldw	r16,0(sp)
 201e91c:	dec00304 	addi	sp,sp,12
 201e920:	f800283a 	ret

0201e924 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 201e924:	defff504 	addi	sp,sp,-44
 201e928:	dfc00a15 	stw	ra,40(sp)
 201e92c:	df000915 	stw	fp,36(sp)
 201e930:	df000904 	addi	fp,sp,36
 201e934:	2005883a 	mov	r2,r4
 201e938:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201e93c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 201e940:	e0bfff03 	ldbu	r2,-4(fp)
 201e944:	10800530 	cmpltui	r2,r2,20
 201e948:	1000021e 	bne	r2,zero,201e954 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201e94c:	00800a84 	movi	r2,42
 201e950:	00006406 	br	201eae4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e954:	0005303a 	rdctl	r2,status
 201e958:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e95c:	e0fffe17 	ldw	r3,-8(fp)
 201e960:	00bfff84 	movi	r2,-2
 201e964:	1884703a 	and	r2,r3,r2
 201e968:	1001703a 	wrctl	status,r2
  
  return context;
 201e96c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201e970:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 201e974:	e0ffff03 	ldbu	r3,-4(fp)
 201e978:	008080f4 	movhi	r2,515
 201e97c:	10bac204 	addi	r2,r2,-5368
 201e980:	18c7883a 	add	r3,r3,r3
 201e984:	18c7883a 	add	r3,r3,r3
 201e988:	10c5883a 	add	r2,r2,r3
 201e98c:	10800017 	ldw	r2,0(r2)
 201e990:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 201e994:	e0bff917 	ldw	r2,-28(fp)
 201e998:	1000061e 	bne	r2,zero,201e9b4 <OSTimeDlyResume+0x90>
 201e99c:	e0bff717 	ldw	r2,-36(fp)
 201e9a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e9a4:	e0bff817 	ldw	r2,-32(fp)
 201e9a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201e9ac:	008010c4 	movi	r2,67
 201e9b0:	00004c06 	br	201eae4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201e9b4:	e0bff917 	ldw	r2,-28(fp)
 201e9b8:	10800058 	cmpnei	r2,r2,1
 201e9bc:	1000061e 	bne	r2,zero,201e9d8 <OSTimeDlyResume+0xb4>
 201e9c0:	e0bff717 	ldw	r2,-36(fp)
 201e9c4:	e0bffa15 	stw	r2,-24(fp)
 201e9c8:	e0bffa17 	ldw	r2,-24(fp)
 201e9cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201e9d0:	008010c4 	movi	r2,67
 201e9d4:	00004306 	br	201eae4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 201e9d8:	e0bff917 	ldw	r2,-28(fp)
 201e9dc:	10800b8b 	ldhu	r2,46(r2)
 201e9e0:	10bfffcc 	andi	r2,r2,65535
 201e9e4:	1000061e 	bne	r2,zero,201ea00 <OSTimeDlyResume+0xdc>
 201e9e8:	e0bff717 	ldw	r2,-36(fp)
 201e9ec:	e0bffb15 	stw	r2,-20(fp)
 201e9f0:	e0bffb17 	ldw	r2,-20(fp)
 201e9f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 201e9f8:	00801404 	movi	r2,80
 201e9fc:	00003906 	br	201eae4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 201ea00:	e0bff917 	ldw	r2,-28(fp)
 201ea04:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 201ea08:	e0bff917 	ldw	r2,-28(fp)
 201ea0c:	10800c03 	ldbu	r2,48(r2)
 201ea10:	10803fcc 	andi	r2,r2,255
 201ea14:	10800dcc 	andi	r2,r2,55
 201ea18:	10000b26 	beq	r2,zero,201ea48 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201ea1c:	e0bff917 	ldw	r2,-28(fp)
 201ea20:	10c00c03 	ldbu	r3,48(r2)
 201ea24:	00bff204 	movi	r2,-56
 201ea28:	1884703a 	and	r2,r3,r2
 201ea2c:	1007883a 	mov	r3,r2
 201ea30:	e0bff917 	ldw	r2,-28(fp)
 201ea34:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201ea38:	e0bff917 	ldw	r2,-28(fp)
 201ea3c:	00c00044 	movi	r3,1
 201ea40:	10c00c45 	stb	r3,49(r2)
 201ea44:	00000206 	br	201ea50 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201ea48:	e0bff917 	ldw	r2,-28(fp)
 201ea4c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 201ea50:	e0bff917 	ldw	r2,-28(fp)
 201ea54:	10800c03 	ldbu	r2,48(r2)
 201ea58:	10803fcc 	andi	r2,r2,255
 201ea5c:	1080020c 	andi	r2,r2,8
 201ea60:	10001b1e 	bne	r2,zero,201ead0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201ea64:	e0bff917 	ldw	r2,-28(fp)
 201ea68:	10c00d83 	ldbu	r3,54(r2)
 201ea6c:	d0a7aa03 	ldbu	r2,-24920(gp)
 201ea70:	1884b03a 	or	r2,r3,r2
 201ea74:	d0a7aa05 	stb	r2,-24920(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201ea78:	e0bff917 	ldw	r2,-28(fp)
 201ea7c:	10800d03 	ldbu	r2,52(r2)
 201ea80:	10c03fcc 	andi	r3,r2,255
 201ea84:	e0bff917 	ldw	r2,-28(fp)
 201ea88:	10800d03 	ldbu	r2,52(r2)
 201ea8c:	11003fcc 	andi	r4,r2,255
 201ea90:	d0a7aa44 	addi	r2,gp,-24919
 201ea94:	2085883a 	add	r2,r4,r2
 201ea98:	11000003 	ldbu	r4,0(r2)
 201ea9c:	e0bff917 	ldw	r2,-28(fp)
 201eaa0:	10800d43 	ldbu	r2,53(r2)
 201eaa4:	2084b03a 	or	r2,r4,r2
 201eaa8:	1009883a 	mov	r4,r2
 201eaac:	d0a7aa44 	addi	r2,gp,-24919
 201eab0:	1885883a 	add	r2,r3,r2
 201eab4:	11000005 	stb	r4,0(r2)
 201eab8:	e0bff717 	ldw	r2,-36(fp)
 201eabc:	e0bffc15 	stw	r2,-16(fp)
 201eac0:	e0bffc17 	ldw	r2,-16(fp)
 201eac4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201eac8:	20182680 	call	2018268 <OS_Sched>
 201eacc:	00000406 	br	201eae0 <OSTimeDlyResume+0x1bc>
 201ead0:	e0bff717 	ldw	r2,-36(fp)
 201ead4:	e0bffd15 	stw	r2,-12(fp)
 201ead8:	e0bffd17 	ldw	r2,-12(fp)
 201eadc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201eae0:	0005883a 	mov	r2,zero
}
 201eae4:	e037883a 	mov	sp,fp
 201eae8:	dfc00117 	ldw	ra,4(sp)
 201eaec:	df000017 	ldw	fp,0(sp)
 201eaf0:	dec00204 	addi	sp,sp,8
 201eaf4:	f800283a 	ret

0201eaf8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201eaf8:	defffb04 	addi	sp,sp,-20
 201eafc:	df000415 	stw	fp,16(sp)
 201eb00:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201eb04:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201eb08:	0005303a 	rdctl	r2,status
 201eb0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201eb10:	e0fffe17 	ldw	r3,-8(fp)
 201eb14:	00bfff84 	movi	r2,-2
 201eb18:	1884703a 	and	r2,r3,r2
 201eb1c:	1001703a 	wrctl	status,r2
  
  return context;
 201eb20:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201eb24:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 201eb28:	d0a7ae17 	ldw	r2,-24904(gp)
 201eb2c:	e0bffd15 	stw	r2,-12(fp)
 201eb30:	e0bffc17 	ldw	r2,-16(fp)
 201eb34:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201eb38:	e0bfff17 	ldw	r2,-4(fp)
 201eb3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201eb40:	e0bffd17 	ldw	r2,-12(fp)
}
 201eb44:	e037883a 	mov	sp,fp
 201eb48:	df000017 	ldw	fp,0(sp)
 201eb4c:	dec00104 	addi	sp,sp,4
 201eb50:	f800283a 	ret

0201eb54 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201eb54:	defffb04 	addi	sp,sp,-20
 201eb58:	df000415 	stw	fp,16(sp)
 201eb5c:	df000404 	addi	fp,sp,16
 201eb60:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201eb64:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201eb68:	0005303a 	rdctl	r2,status
 201eb6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201eb70:	e0fffd17 	ldw	r3,-12(fp)
 201eb74:	00bfff84 	movi	r2,-2
 201eb78:	1884703a 	and	r2,r3,r2
 201eb7c:	1001703a 	wrctl	status,r2
  
  return context;
 201eb80:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201eb84:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 201eb88:	e0bfff17 	ldw	r2,-4(fp)
 201eb8c:	d0a7ae15 	stw	r2,-24904(gp)
 201eb90:	e0bffc17 	ldw	r2,-16(fp)
 201eb94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201eb98:	e0bffe17 	ldw	r2,-8(fp)
 201eb9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201eba0:	0001883a 	nop
 201eba4:	e037883a 	mov	sp,fp
 201eba8:	df000017 	ldw	fp,0(sp)
 201ebac:	dec00104 	addi	sp,sp,4
 201ebb0:	f800283a 	ret

0201ebb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201ebb4:	defffd04 	addi	sp,sp,-12
 201ebb8:	dfc00215 	stw	ra,8(sp)
 201ebbc:	df000115 	stw	fp,4(sp)
 201ebc0:	df000104 	addi	fp,sp,4
 201ebc4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201ebc8:	d1603604 	addi	r5,gp,-32552
 201ebcc:	e13fff17 	ldw	r4,-4(fp)
 201ebd0:	20200000 	call	2020000 <alt_dev_llist_insert>
}
 201ebd4:	e037883a 	mov	sp,fp
 201ebd8:	dfc00117 	ldw	ra,4(sp)
 201ebdc:	df000017 	ldw	fp,0(sp)
 201ebe0:	dec00204 	addi	sp,sp,8
 201ebe4:	f800283a 	ret

0201ebe8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201ebe8:	defffd04 	addi	sp,sp,-12
 201ebec:	dfc00215 	stw	ra,8(sp)
 201ebf0:	df000115 	stw	fp,4(sp)
 201ebf4:	df000104 	addi	fp,sp,4
 201ebf8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201ebfc:	20208e00 	call	20208e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201ec00:	00800044 	movi	r2,1
 201ec04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201ec08:	0001883a 	nop
 201ec0c:	e037883a 	mov	sp,fp
 201ec10:	dfc00117 	ldw	ra,4(sp)
 201ec14:	df000017 	ldw	fp,0(sp)
 201ec18:	dec00204 	addi	sp,sp,8
 201ec1c:	f800283a 	ret

0201ec20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201ec20:	defffe04 	addi	sp,sp,-8
 201ec24:	dfc00115 	stw	ra,4(sp)
 201ec28:	df000015 	stw	fp,0(sp)
 201ec2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 201ec30:	01c0fa04 	movi	r7,1000
 201ec34:	01800044 	movi	r6,1
 201ec38:	000b883a 	mov	r5,zero
 201ec3c:	0009883a 	mov	r4,zero
 201ec40:	201fa2c0 	call	201fa2c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201ec44:	000d883a 	mov	r6,zero
 201ec48:	000b883a 	mov	r5,zero
 201ec4c:	010080b4 	movhi	r4,514
 201ec50:	210a7104 	addi	r4,r4,10692
 201ec54:	201edf00 	call	201edf0 <altera_avalon_jtag_uart_init>
 201ec58:	010080b4 	movhi	r4,514
 201ec5c:	210a6704 	addi	r4,r4,10652
 201ec60:	201ebb40 	call	201ebb4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 201ec64:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
 201ec68:	010080b4 	movhi	r4,514
 201ec6c:	210e8204 	addi	r4,r4,14856
 201ec70:	201ebb40 	call	201ebb4 <alt_dev_reg>
}
 201ec74:	0001883a 	nop
 201ec78:	e037883a 	mov	sp,fp
 201ec7c:	dfc00117 	ldw	ra,4(sp)
 201ec80:	df000017 	ldw	fp,0(sp)
 201ec84:	dec00204 	addi	sp,sp,8
 201ec88:	f800283a 	ret

0201ec8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201ec8c:	defffa04 	addi	sp,sp,-24
 201ec90:	dfc00515 	stw	ra,20(sp)
 201ec94:	df000415 	stw	fp,16(sp)
 201ec98:	df000404 	addi	fp,sp,16
 201ec9c:	e13ffd15 	stw	r4,-12(fp)
 201eca0:	e17ffe15 	stw	r5,-8(fp)
 201eca4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201eca8:	e0bffd17 	ldw	r2,-12(fp)
 201ecac:	10800017 	ldw	r2,0(r2)
 201ecb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201ecb4:	e0bffc17 	ldw	r2,-16(fp)
 201ecb8:	10c00a04 	addi	r3,r2,40
 201ecbc:	e0bffd17 	ldw	r2,-12(fp)
 201ecc0:	10800217 	ldw	r2,8(r2)
 201ecc4:	100f883a 	mov	r7,r2
 201ecc8:	e1bfff17 	ldw	r6,-4(fp)
 201eccc:	e17ffe17 	ldw	r5,-8(fp)
 201ecd0:	1809883a 	mov	r4,r3
 201ecd4:	201f4300 	call	201f430 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 201ecd8:	e037883a 	mov	sp,fp
 201ecdc:	dfc00117 	ldw	ra,4(sp)
 201ece0:	df000017 	ldw	fp,0(sp)
 201ece4:	dec00204 	addi	sp,sp,8
 201ece8:	f800283a 	ret

0201ecec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201ecec:	defffa04 	addi	sp,sp,-24
 201ecf0:	dfc00515 	stw	ra,20(sp)
 201ecf4:	df000415 	stw	fp,16(sp)
 201ecf8:	df000404 	addi	fp,sp,16
 201ecfc:	e13ffd15 	stw	r4,-12(fp)
 201ed00:	e17ffe15 	stw	r5,-8(fp)
 201ed04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201ed08:	e0bffd17 	ldw	r2,-12(fp)
 201ed0c:	10800017 	ldw	r2,0(r2)
 201ed10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201ed14:	e0bffc17 	ldw	r2,-16(fp)
 201ed18:	10c00a04 	addi	r3,r2,40
 201ed1c:	e0bffd17 	ldw	r2,-12(fp)
 201ed20:	10800217 	ldw	r2,8(r2)
 201ed24:	100f883a 	mov	r7,r2
 201ed28:	e1bfff17 	ldw	r6,-4(fp)
 201ed2c:	e17ffe17 	ldw	r5,-8(fp)
 201ed30:	1809883a 	mov	r4,r3
 201ed34:	201f6ec0 	call	201f6ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201ed38:	e037883a 	mov	sp,fp
 201ed3c:	dfc00117 	ldw	ra,4(sp)
 201ed40:	df000017 	ldw	fp,0(sp)
 201ed44:	dec00204 	addi	sp,sp,8
 201ed48:	f800283a 	ret

0201ed4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 201ed4c:	defffc04 	addi	sp,sp,-16
 201ed50:	dfc00315 	stw	ra,12(sp)
 201ed54:	df000215 	stw	fp,8(sp)
 201ed58:	df000204 	addi	fp,sp,8
 201ed5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201ed60:	e0bfff17 	ldw	r2,-4(fp)
 201ed64:	10800017 	ldw	r2,0(r2)
 201ed68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 201ed6c:	e0bffe17 	ldw	r2,-8(fp)
 201ed70:	10c00a04 	addi	r3,r2,40
 201ed74:	e0bfff17 	ldw	r2,-4(fp)
 201ed78:	10800217 	ldw	r2,8(r2)
 201ed7c:	100b883a 	mov	r5,r2
 201ed80:	1809883a 	mov	r4,r3
 201ed84:	201f2d80 	call	201f2d8 <altera_avalon_jtag_uart_close>
}
 201ed88:	e037883a 	mov	sp,fp
 201ed8c:	dfc00117 	ldw	ra,4(sp)
 201ed90:	df000017 	ldw	fp,0(sp)
 201ed94:	dec00204 	addi	sp,sp,8
 201ed98:	f800283a 	ret

0201ed9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201ed9c:	defffa04 	addi	sp,sp,-24
 201eda0:	dfc00515 	stw	ra,20(sp)
 201eda4:	df000415 	stw	fp,16(sp)
 201eda8:	df000404 	addi	fp,sp,16
 201edac:	e13ffd15 	stw	r4,-12(fp)
 201edb0:	e17ffe15 	stw	r5,-8(fp)
 201edb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 201edb8:	e0bffd17 	ldw	r2,-12(fp)
 201edbc:	10800017 	ldw	r2,0(r2)
 201edc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201edc4:	e0bffc17 	ldw	r2,-16(fp)
 201edc8:	10800a04 	addi	r2,r2,40
 201edcc:	e1bfff17 	ldw	r6,-4(fp)
 201edd0:	e17ffe17 	ldw	r5,-8(fp)
 201edd4:	1009883a 	mov	r4,r2
 201edd8:	201f3400 	call	201f340 <altera_avalon_jtag_uart_ioctl>
}
 201eddc:	e037883a 	mov	sp,fp
 201ede0:	dfc00117 	ldw	ra,4(sp)
 201ede4:	df000017 	ldw	fp,0(sp)
 201ede8:	dec00204 	addi	sp,sp,8
 201edec:	f800283a 	ret

0201edf0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201edf0:	defff204 	addi	sp,sp,-56
 201edf4:	dfc00d15 	stw	ra,52(sp)
 201edf8:	df000c15 	stw	fp,48(sp)
 201edfc:	df000c04 	addi	fp,sp,48
 201ee00:	e13ff915 	stw	r4,-28(fp)
 201ee04:	e17ffa15 	stw	r5,-24(fp)
 201ee08:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201ee0c:	e0bff917 	ldw	r2,-28(fp)
 201ee10:	10800c04 	addi	r2,r2,48
 201ee14:	e0bff415 	stw	r2,-48(fp)
 201ee18:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 201ee1c:	e0bff80b 	ldhu	r2,-32(fp)
 201ee20:	e0fff884 	addi	r3,fp,-30
 201ee24:	180b883a 	mov	r5,r3
 201ee28:	1009883a 	mov	r4,r2
 201ee2c:	2018dd40 	call	2018dd4 <OSFlagCreate>
 201ee30:	1007883a 	mov	r3,r2
 201ee34:	e0bff417 	ldw	r2,-48(fp)
 201ee38:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 201ee3c:	e0bff917 	ldw	r2,-28(fp)
 201ee40:	10800a04 	addi	r2,r2,40
 201ee44:	e0bff515 	stw	r2,-44(fp)
 201ee48:	00800044 	movi	r2,1
 201ee4c:	e0bff78d 	sth	r2,-34(fp)
 201ee50:	e0bff78b 	ldhu	r2,-34(fp)
 201ee54:	1009883a 	mov	r4,r2
 201ee58:	201c5b00 	call	201c5b0 <OSSemCreate>
 201ee5c:	1007883a 	mov	r3,r2
 201ee60:	e0bff517 	ldw	r2,-44(fp)
 201ee64:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 201ee68:	e0bff917 	ldw	r2,-28(fp)
 201ee6c:	10800b04 	addi	r2,r2,44
 201ee70:	e0bff615 	stw	r2,-40(fp)
 201ee74:	00800044 	movi	r2,1
 201ee78:	e0bff70d 	sth	r2,-36(fp)
 201ee7c:	e0bff70b 	ldhu	r2,-36(fp)
 201ee80:	1009883a 	mov	r4,r2
 201ee84:	201c5b00 	call	201c5b0 <OSSemCreate>
 201ee88:	1007883a 	mov	r3,r2
 201ee8c:	e0bff617 	ldw	r2,-40(fp)
 201ee90:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201ee94:	e0bff917 	ldw	r2,-28(fp)
 201ee98:	00c00044 	movi	r3,1
 201ee9c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 201eea0:	e0bff917 	ldw	r2,-28(fp)
 201eea4:	10800017 	ldw	r2,0(r2)
 201eea8:	10800104 	addi	r2,r2,4
 201eeac:	1007883a 	mov	r3,r2
 201eeb0:	e0bff917 	ldw	r2,-28(fp)
 201eeb4:	10800817 	ldw	r2,32(r2)
 201eeb8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 201eebc:	e0bffb17 	ldw	r2,-20(fp)
 201eec0:	018080b4 	movhi	r6,514
 201eec4:	31bbcb04 	addi	r6,r6,-4308
 201eec8:	e17ff917 	ldw	r5,-28(fp)
 201eecc:	1009883a 	mov	r4,r2
 201eed0:	20203680 	call	2020368 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201eed4:	e0bff917 	ldw	r2,-28(fp)
 201eed8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201eedc:	e0bff917 	ldw	r2,-28(fp)
 201eee0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201eee4:	d0e7b317 	ldw	r3,-24884(gp)
 201eee8:	e1fff917 	ldw	r7,-28(fp)
 201eeec:	018080b4 	movhi	r6,514
 201eef0:	31bc7504 	addi	r6,r6,-3628
 201eef4:	180b883a 	mov	r5,r3
 201eef8:	1009883a 	mov	r4,r2
 201eefc:	201fe500 	call	201fe50 <alt_alarm_start>
 201ef00:	1000040e 	bge	r2,zero,201ef14 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201ef04:	e0fff917 	ldw	r3,-28(fp)
 201ef08:	00a00034 	movhi	r2,32768
 201ef0c:	10bfffc4 	addi	r2,r2,-1
 201ef10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201ef14:	0001883a 	nop
 201ef18:	e037883a 	mov	sp,fp
 201ef1c:	dfc00117 	ldw	ra,4(sp)
 201ef20:	df000017 	ldw	fp,0(sp)
 201ef24:	dec00204 	addi	sp,sp,8
 201ef28:	f800283a 	ret

0201ef2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201ef2c:	defff104 	addi	sp,sp,-60
 201ef30:	dfc00e15 	stw	ra,56(sp)
 201ef34:	df000d15 	stw	fp,52(sp)
 201ef38:	df000d04 	addi	fp,sp,52
 201ef3c:	e13ffe15 	stw	r4,-8(fp)
 201ef40:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201ef44:	e0bffe17 	ldw	r2,-8(fp)
 201ef48:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
 201ef4c:	e0bff517 	ldw	r2,-44(fp)
 201ef50:	10800017 	ldw	r2,0(r2)
 201ef54:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201ef58:	e0bff617 	ldw	r2,-40(fp)
 201ef5c:	10800104 	addi	r2,r2,4
 201ef60:	10800037 	ldwio	r2,0(r2)
 201ef64:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201ef68:	e0bff717 	ldw	r2,-36(fp)
 201ef6c:	1080c00c 	andi	r2,r2,768
 201ef70:	10009126 	beq	r2,zero,201f1b8 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201ef74:	e0bff717 	ldw	r2,-36(fp)
 201ef78:	1080400c 	andi	r2,r2,256
 201ef7c:	10004726 	beq	r2,zero,201f09c <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201ef80:	00800074 	movhi	r2,1
 201ef84:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201ef88:	e0bff517 	ldw	r2,-44(fp)
 201ef8c:	10800d17 	ldw	r2,52(r2)
 201ef90:	10800044 	addi	r2,r2,1
 201ef94:	1081ffcc 	andi	r2,r2,2047
 201ef98:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 201ef9c:	e0bff517 	ldw	r2,-44(fp)
 201efa0:	10c00e17 	ldw	r3,56(r2)
 201efa4:	e0bff817 	ldw	r2,-32(fp)
 201efa8:	18802726 	beq	r3,r2,201f048 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201efac:	e0bff617 	ldw	r2,-40(fp)
 201efb0:	10800037 	ldwio	r2,0(r2)
 201efb4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201efb8:	e0bff317 	ldw	r2,-52(fp)
 201efbc:	10a0000c 	andi	r2,r2,32768
 201efc0:	10002326 	beq	r2,zero,201f050 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201efc4:	e0bff517 	ldw	r2,-44(fp)
 201efc8:	10800d17 	ldw	r2,52(r2)
 201efcc:	e0fff317 	ldw	r3,-52(fp)
 201efd0:	1809883a 	mov	r4,r3
 201efd4:	e0fff517 	ldw	r3,-44(fp)
 201efd8:	1885883a 	add	r2,r3,r2
 201efdc:	10801104 	addi	r2,r2,68
 201efe0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201efe4:	e0bff517 	ldw	r2,-44(fp)
 201efe8:	10800d17 	ldw	r2,52(r2)
 201efec:	10800044 	addi	r2,r2,1
 201eff0:	10c1ffcc 	andi	r3,r2,2047
 201eff4:	e0bff517 	ldw	r2,-44(fp)
 201eff8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 201effc:	e0bff517 	ldw	r2,-44(fp)
 201f000:	10800c17 	ldw	r2,48(r2)
 201f004:	e0bffa15 	stw	r2,-24(fp)
 201f008:	00800044 	movi	r2,1
 201f00c:	e0bffb0d 	sth	r2,-20(fp)
 201f010:	00800044 	movi	r2,1
 201f014:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201f018:	d0a79e43 	ldbu	r2,-24967(gp)
 201f01c:	10803fcc 	andi	r2,r2,255
 201f020:	103fd926 	beq	r2,zero,201ef88 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
 201f024:	e0bffb0b 	ldhu	r2,-20(fp)
 201f028:	e0fffb83 	ldbu	r3,-18(fp)
 201f02c:	e13ffcc4 	addi	r4,fp,-13
 201f030:	200f883a 	mov	r7,r4
 201f034:	180d883a 	mov	r6,r3
 201f038:	100b883a 	mov	r5,r2
 201f03c:	e13ffa17 	ldw	r4,-24(fp)
 201f040:	20199b00 	call	20199b0 <OSFlagPost>
      }
 201f044:	003fd006 	br	201ef88 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 201f048:	0001883a 	nop
 201f04c:	00000106 	br	201f054 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 201f050:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 201f054:	e0bff317 	ldw	r2,-52(fp)
 201f058:	10bfffec 	andhi	r2,r2,65535
 201f05c:	10000f26 	beq	r2,zero,201f09c <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201f060:	e0bff517 	ldw	r2,-44(fp)
 201f064:	10c00817 	ldw	r3,32(r2)
 201f068:	00bfff84 	movi	r2,-2
 201f06c:	1886703a 	and	r3,r3,r2
 201f070:	e0bff517 	ldw	r2,-44(fp)
 201f074:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201f078:	e0bff617 	ldw	r2,-40(fp)
 201f07c:	10800104 	addi	r2,r2,4
 201f080:	1007883a 	mov	r3,r2
 201f084:	e0bff517 	ldw	r2,-44(fp)
 201f088:	10800817 	ldw	r2,32(r2)
 201f08c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201f090:	e0bff617 	ldw	r2,-40(fp)
 201f094:	10800104 	addi	r2,r2,4
 201f098:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201f09c:	e0bff717 	ldw	r2,-36(fp)
 201f0a0:	1080800c 	andi	r2,r2,512
 201f0a4:	103fac26 	beq	r2,zero,201ef58 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201f0a8:	e0bff717 	ldw	r2,-36(fp)
 201f0ac:	1004d43a 	srli	r2,r2,16
 201f0b0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201f0b4:	00002606 	br	201f150 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201f0b8:	e0bff617 	ldw	r2,-40(fp)
 201f0bc:	e0fff517 	ldw	r3,-44(fp)
 201f0c0:	18c01017 	ldw	r3,64(r3)
 201f0c4:	e13ff517 	ldw	r4,-44(fp)
 201f0c8:	20c7883a 	add	r3,r4,r3
 201f0cc:	18c21104 	addi	r3,r3,2116
 201f0d0:	18c00003 	ldbu	r3,0(r3)
 201f0d4:	18c03fcc 	andi	r3,r3,255
 201f0d8:	18c0201c 	xori	r3,r3,128
 201f0dc:	18ffe004 	addi	r3,r3,-128
 201f0e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201f0e4:	e0bff517 	ldw	r2,-44(fp)
 201f0e8:	10801017 	ldw	r2,64(r2)
 201f0ec:	10800044 	addi	r2,r2,1
 201f0f0:	10c1ffcc 	andi	r3,r2,2047
 201f0f4:	e0bff517 	ldw	r2,-44(fp)
 201f0f8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 201f0fc:	e0bff517 	ldw	r2,-44(fp)
 201f100:	10800c17 	ldw	r2,48(r2)
 201f104:	e0bff915 	stw	r2,-28(fp)
 201f108:	00800084 	movi	r2,2
 201f10c:	e0bffc0d 	sth	r2,-16(fp)
 201f110:	00800044 	movi	r2,1
 201f114:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201f118:	d0a79e43 	ldbu	r2,-24967(gp)
 201f11c:	10803fcc 	andi	r2,r2,255
 201f120:	10000826 	beq	r2,zero,201f144 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
 201f124:	e0bffc0b 	ldhu	r2,-16(fp)
 201f128:	e0fffc83 	ldbu	r3,-14(fp)
 201f12c:	e13ffd04 	addi	r4,fp,-12
 201f130:	200f883a 	mov	r7,r4
 201f134:	180d883a 	mov	r6,r3
 201f138:	100b883a 	mov	r5,r2
 201f13c:	e13ff917 	ldw	r4,-28(fp)
 201f140:	20199b00 	call	20199b0 <OSFlagPost>

        space--;
 201f144:	e0bff417 	ldw	r2,-48(fp)
 201f148:	10bfffc4 	addi	r2,r2,-1
 201f14c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 201f150:	e0bff417 	ldw	r2,-48(fp)
 201f154:	10000526 	beq	r2,zero,201f16c <altera_avalon_jtag_uart_irq+0x240>
 201f158:	e0bff517 	ldw	r2,-44(fp)
 201f15c:	10c01017 	ldw	r3,64(r2)
 201f160:	e0bff517 	ldw	r2,-44(fp)
 201f164:	10800f17 	ldw	r2,60(r2)
 201f168:	18bfd31e 	bne	r3,r2,201f0b8 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 201f16c:	e0bff417 	ldw	r2,-48(fp)
 201f170:	103f7926 	beq	r2,zero,201ef58 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201f174:	e0bff517 	ldw	r2,-44(fp)
 201f178:	10c00817 	ldw	r3,32(r2)
 201f17c:	00bfff44 	movi	r2,-3
 201f180:	1886703a 	and	r3,r3,r2
 201f184:	e0bff517 	ldw	r2,-44(fp)
 201f188:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201f18c:	e0bff517 	ldw	r2,-44(fp)
 201f190:	10800017 	ldw	r2,0(r2)
 201f194:	10800104 	addi	r2,r2,4
 201f198:	1007883a 	mov	r3,r2
 201f19c:	e0bff517 	ldw	r2,-44(fp)
 201f1a0:	10800817 	ldw	r2,32(r2)
 201f1a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201f1a8:	e0bff617 	ldw	r2,-40(fp)
 201f1ac:	10800104 	addi	r2,r2,4
 201f1b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201f1b4:	003f6806 	br	201ef58 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 201f1b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 201f1bc:	0001883a 	nop
 201f1c0:	e037883a 	mov	sp,fp
 201f1c4:	dfc00117 	ldw	ra,4(sp)
 201f1c8:	df000017 	ldw	fp,0(sp)
 201f1cc:	dec00204 	addi	sp,sp,8
 201f1d0:	f800283a 	ret

0201f1d4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201f1d4:	defff904 	addi	sp,sp,-28
 201f1d8:	dfc00615 	stw	ra,24(sp)
 201f1dc:	df000515 	stw	fp,20(sp)
 201f1e0:	df000504 	addi	fp,sp,20
 201f1e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201f1e8:	e0bfff17 	ldw	r2,-4(fp)
 201f1ec:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201f1f0:	e0bffb17 	ldw	r2,-20(fp)
 201f1f4:	10800017 	ldw	r2,0(r2)
 201f1f8:	10800104 	addi	r2,r2,4
 201f1fc:	10800037 	ldwio	r2,0(r2)
 201f200:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201f204:	e0bffc17 	ldw	r2,-16(fp)
 201f208:	1081000c 	andi	r2,r2,1024
 201f20c:	10000b26 	beq	r2,zero,201f23c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 201f210:	e0bffb17 	ldw	r2,-20(fp)
 201f214:	10800017 	ldw	r2,0(r2)
 201f218:	10800104 	addi	r2,r2,4
 201f21c:	1007883a 	mov	r3,r2
 201f220:	e0bffb17 	ldw	r2,-20(fp)
 201f224:	10800817 	ldw	r2,32(r2)
 201f228:	10810014 	ori	r2,r2,1024
 201f22c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 201f230:	e0bffb17 	ldw	r2,-20(fp)
 201f234:	10000915 	stw	zero,36(r2)
 201f238:	00002106 	br	201f2c0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201f23c:	e0bffb17 	ldw	r2,-20(fp)
 201f240:	10c00917 	ldw	r3,36(r2)
 201f244:	00a00034 	movhi	r2,32768
 201f248:	10bfff04 	addi	r2,r2,-4
 201f24c:	10c01c36 	bltu	r2,r3,201f2c0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 201f250:	e0bffb17 	ldw	r2,-20(fp)
 201f254:	10800917 	ldw	r2,36(r2)
 201f258:	10c00044 	addi	r3,r2,1
 201f25c:	e0bffb17 	ldw	r2,-20(fp)
 201f260:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 201f264:	e0bffb17 	ldw	r2,-20(fp)
 201f268:	10c00917 	ldw	r3,36(r2)
 201f26c:	e0bffb17 	ldw	r2,-20(fp)
 201f270:	10800117 	ldw	r2,4(r2)
 201f274:	18801236 	bltu	r3,r2,201f2c0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201f278:	e0bffb17 	ldw	r2,-20(fp)
 201f27c:	10800c17 	ldw	r2,48(r2)
 201f280:	e0bffd15 	stw	r2,-12(fp)
 201f284:	00800104 	movi	r2,4
 201f288:	e0bffe0d 	sth	r2,-8(fp)
 201f28c:	00800044 	movi	r2,1
 201f290:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201f294:	d0a79e43 	ldbu	r2,-24967(gp)
 201f298:	10803fcc 	andi	r2,r2,255
 201f29c:	10000826 	beq	r2,zero,201f2c0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 201f2a0:	e0bffe0b 	ldhu	r2,-8(fp)
 201f2a4:	e0fffe83 	ldbu	r3,-6(fp)
 201f2a8:	e13ffec4 	addi	r4,fp,-5
 201f2ac:	200f883a 	mov	r7,r4
 201f2b0:	180d883a 	mov	r6,r3
 201f2b4:	100b883a 	mov	r5,r2
 201f2b8:	e13ffd17 	ldw	r4,-12(fp)
 201f2bc:	20199b00 	call	20199b0 <OSFlagPost>
 201f2c0:	d0a7b317 	ldw	r2,-24884(gp)
    }
  }

  return alt_ticks_per_second();
}
 201f2c4:	e037883a 	mov	sp,fp
 201f2c8:	dfc00117 	ldw	ra,4(sp)
 201f2cc:	df000017 	ldw	fp,0(sp)
 201f2d0:	dec00204 	addi	sp,sp,8
 201f2d4:	f800283a 	ret

0201f2d8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 201f2d8:	defffd04 	addi	sp,sp,-12
 201f2dc:	df000215 	stw	fp,8(sp)
 201f2e0:	df000204 	addi	fp,sp,8
 201f2e4:	e13ffe15 	stw	r4,-8(fp)
 201f2e8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201f2ec:	00000506 	br	201f304 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 201f2f0:	e0bfff17 	ldw	r2,-4(fp)
 201f2f4:	1090000c 	andi	r2,r2,16384
 201f2f8:	10000226 	beq	r2,zero,201f304 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201f2fc:	00bffd44 	movi	r2,-11
 201f300:	00000b06 	br	201f330 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201f304:	e0bffe17 	ldw	r2,-8(fp)
 201f308:	10c01017 	ldw	r3,64(r2)
 201f30c:	e0bffe17 	ldw	r2,-8(fp)
 201f310:	10800f17 	ldw	r2,60(r2)
 201f314:	18800526 	beq	r3,r2,201f32c <altera_avalon_jtag_uart_close+0x54>
 201f318:	e0bffe17 	ldw	r2,-8(fp)
 201f31c:	10c00917 	ldw	r3,36(r2)
 201f320:	e0bffe17 	ldw	r2,-8(fp)
 201f324:	10800117 	ldw	r2,4(r2)
 201f328:	18bff136 	bltu	r3,r2,201f2f0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201f32c:	0005883a 	mov	r2,zero
}
 201f330:	e037883a 	mov	sp,fp
 201f334:	df000017 	ldw	fp,0(sp)
 201f338:	dec00104 	addi	sp,sp,4
 201f33c:	f800283a 	ret

0201f340 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201f340:	defffa04 	addi	sp,sp,-24
 201f344:	df000515 	stw	fp,20(sp)
 201f348:	df000504 	addi	fp,sp,20
 201f34c:	e13ffd15 	stw	r4,-12(fp)
 201f350:	e17ffe15 	stw	r5,-8(fp)
 201f354:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 201f358:	00bff9c4 	movi	r2,-25
 201f35c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 201f360:	e0bffe17 	ldw	r2,-8(fp)
 201f364:	10da8060 	cmpeqi	r3,r2,27137
 201f368:	1800031e 	bne	r3,zero,201f378 <altera_avalon_jtag_uart_ioctl+0x38>
 201f36c:	109a80a0 	cmpeqi	r2,r2,27138
 201f370:	1000181e 	bne	r2,zero,201f3d4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 201f374:	00002906 	br	201f41c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201f378:	e0bffd17 	ldw	r2,-12(fp)
 201f37c:	10c00117 	ldw	r3,4(r2)
 201f380:	00a00034 	movhi	r2,32768
 201f384:	10bfffc4 	addi	r2,r2,-1
 201f388:	18802126 	beq	r3,r2,201f410 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 201f38c:	e0bfff17 	ldw	r2,-4(fp)
 201f390:	10800017 	ldw	r2,0(r2)
 201f394:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201f398:	e0bffc17 	ldw	r2,-16(fp)
 201f39c:	10800090 	cmplti	r2,r2,2
 201f3a0:	1000061e 	bne	r2,zero,201f3bc <altera_avalon_jtag_uart_ioctl+0x7c>
 201f3a4:	e0fffc17 	ldw	r3,-16(fp)
 201f3a8:	00a00034 	movhi	r2,32768
 201f3ac:	10bfffc4 	addi	r2,r2,-1
 201f3b0:	18800226 	beq	r3,r2,201f3bc <altera_avalon_jtag_uart_ioctl+0x7c>
 201f3b4:	e0bffc17 	ldw	r2,-16(fp)
 201f3b8:	00000206 	br	201f3c4 <altera_avalon_jtag_uart_ioctl+0x84>
 201f3bc:	00a00034 	movhi	r2,32768
 201f3c0:	10bfff84 	addi	r2,r2,-2
 201f3c4:	e0fffd17 	ldw	r3,-12(fp)
 201f3c8:	18800115 	stw	r2,4(r3)
      rc = 0;
 201f3cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201f3d0:	00000f06 	br	201f410 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201f3d4:	e0bffd17 	ldw	r2,-12(fp)
 201f3d8:	10c00117 	ldw	r3,4(r2)
 201f3dc:	00a00034 	movhi	r2,32768
 201f3e0:	10bfffc4 	addi	r2,r2,-1
 201f3e4:	18800c26 	beq	r3,r2,201f418 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201f3e8:	e0bffd17 	ldw	r2,-12(fp)
 201f3ec:	10c00917 	ldw	r3,36(r2)
 201f3f0:	e0bffd17 	ldw	r2,-12(fp)
 201f3f4:	10800117 	ldw	r2,4(r2)
 201f3f8:	1885803a 	cmpltu	r2,r3,r2
 201f3fc:	10c03fcc 	andi	r3,r2,255
 201f400:	e0bfff17 	ldw	r2,-4(fp)
 201f404:	10c00015 	stw	r3,0(r2)
      rc = 0;
 201f408:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201f40c:	00000206 	br	201f418 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201f410:	0001883a 	nop
 201f414:	00000106 	br	201f41c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 201f418:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201f41c:	e0bffb17 	ldw	r2,-20(fp)
}
 201f420:	e037883a 	mov	sp,fp
 201f424:	df000017 	ldw	fp,0(sp)
 201f428:	dec00104 	addi	sp,sp,4
 201f42c:	f800283a 	ret

0201f430 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201f430:	deffed04 	addi	sp,sp,-76
 201f434:	dfc01215 	stw	ra,72(sp)
 201f438:	df001115 	stw	fp,68(sp)
 201f43c:	df001104 	addi	fp,sp,68
 201f440:	e13ffc15 	stw	r4,-16(fp)
 201f444:	e17ffd15 	stw	r5,-12(fp)
 201f448:	e1bffe15 	stw	r6,-8(fp)
 201f44c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 201f450:	e0bffd17 	ldw	r2,-12(fp)
 201f454:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201f458:	e0bffc17 	ldw	r2,-16(fp)
 201f45c:	10800a17 	ldw	r2,40(r2)
 201f460:	e0bff815 	stw	r2,-32(fp)
 201f464:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201f468:	e0bff90b 	ldhu	r2,-28(fp)
 201f46c:	e0fffb04 	addi	r3,fp,-20
 201f470:	180d883a 	mov	r6,r3
 201f474:	100b883a 	mov	r5,r2
 201f478:	e13ff817 	ldw	r4,-32(fp)
 201f47c:	201c8c80 	call	201c8c8 <OSSemPend>

  while (space > 0)
 201f480:	00006106 	br	201f608 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201f484:	e0bffc17 	ldw	r2,-16(fp)
 201f488:	10800d17 	ldw	r2,52(r2)
 201f48c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 201f490:	e0bffc17 	ldw	r2,-16(fp)
 201f494:	10800e17 	ldw	r2,56(r2)
 201f498:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 201f49c:	e0fff317 	ldw	r3,-52(fp)
 201f4a0:	e0bff417 	ldw	r2,-48(fp)
 201f4a4:	18800536 	bltu	r3,r2,201f4bc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 201f4a8:	e0fff317 	ldw	r3,-52(fp)
 201f4ac:	e0bff417 	ldw	r2,-48(fp)
 201f4b0:	1885c83a 	sub	r2,r3,r2
 201f4b4:	e0bff115 	stw	r2,-60(fp)
 201f4b8:	00000406 	br	201f4cc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201f4bc:	00c20004 	movi	r3,2048
 201f4c0:	e0bff417 	ldw	r2,-48(fp)
 201f4c4:	1885c83a 	sub	r2,r3,r2
 201f4c8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201f4cc:	e0bff117 	ldw	r2,-60(fp)
 201f4d0:	10001e26 	beq	r2,zero,201f54c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201f4d4:	e0fffe17 	ldw	r3,-8(fp)
 201f4d8:	e0bff117 	ldw	r2,-60(fp)
 201f4dc:	1880022e 	bgeu	r3,r2,201f4e8 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 201f4e0:	e0bffe17 	ldw	r2,-8(fp)
 201f4e4:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201f4e8:	e0bffc17 	ldw	r2,-16(fp)
 201f4ec:	10c01104 	addi	r3,r2,68
 201f4f0:	e0bff417 	ldw	r2,-48(fp)
 201f4f4:	1885883a 	add	r2,r3,r2
 201f4f8:	e1bff117 	ldw	r6,-60(fp)
 201f4fc:	100b883a 	mov	r5,r2
 201f500:	e13ff017 	ldw	r4,-64(fp)
 201f504:	20076c80 	call	20076c8 <memcpy>
      ptr   += n;
 201f508:	e0fff017 	ldw	r3,-64(fp)
 201f50c:	e0bff117 	ldw	r2,-60(fp)
 201f510:	1885883a 	add	r2,r3,r2
 201f514:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 201f518:	e0fffe17 	ldw	r3,-8(fp)
 201f51c:	e0bff117 	ldw	r2,-60(fp)
 201f520:	1885c83a 	sub	r2,r3,r2
 201f524:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201f528:	e0fff417 	ldw	r3,-48(fp)
 201f52c:	e0bff117 	ldw	r2,-60(fp)
 201f530:	1885883a 	add	r2,r3,r2
 201f534:	10c1ffcc 	andi	r3,r2,2047
 201f538:	e0bffc17 	ldw	r2,-16(fp)
 201f53c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 201f540:	e0bffe17 	ldw	r2,-8(fp)
 201f544:	00bfcf16 	blt	zero,r2,201f484 <altera_avalon_jtag_uart_read+0x54>
 201f548:	00000106 	br	201f550 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 201f54c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 201f550:	e0fff017 	ldw	r3,-64(fp)
 201f554:	e0bffd17 	ldw	r2,-12(fp)
 201f558:	18802e1e 	bne	r3,r2,201f614 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 201f55c:	e0bfff17 	ldw	r2,-4(fp)
 201f560:	1090000c 	andi	r2,r2,16384
 201f564:	10002d1e 	bne	r2,zero,201f61c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 201f568:	d0a79e43 	ldbu	r2,-24967(gp)
 201f56c:	10803fcc 	andi	r2,r2,255
 201f570:	10800058 	cmpnei	r2,r2,1
 201f574:	1000161e 	bne	r2,zero,201f5d0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201f578:	e0bffc17 	ldw	r2,-16(fp)
 201f57c:	10800c17 	ldw	r2,48(r2)
 201f580:	e0bff215 	stw	r2,-56(fp)
 201f584:	00800144 	movi	r2,5
 201f588:	e0bff98d 	sth	r2,-26(fp)
 201f58c:	00bfe0c4 	movi	r2,-125
 201f590:	e0bffa05 	stb	r2,-24(fp)
 201f594:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201f598:	d0a79e43 	ldbu	r2,-24967(gp)
 201f59c:	10803fcc 	andi	r2,r2,255
 201f5a0:	10001526 	beq	r2,zero,201f5f8 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201f5a4:	e0fff98b 	ldhu	r3,-26(fp)
 201f5a8:	e13ffa03 	ldbu	r4,-24(fp)
 201f5ac:	e17ffa8b 	ldhu	r5,-22(fp)
 201f5b0:	e0bffb44 	addi	r2,fp,-19
 201f5b4:	d8800015 	stw	r2,0(sp)
 201f5b8:	280f883a 	mov	r7,r5
 201f5bc:	200d883a 	mov	r6,r4
 201f5c0:	180b883a 	mov	r5,r3
 201f5c4:	e13ff217 	ldw	r4,-56(fp)
 201f5c8:	20193980 	call	2019398 <OSFlagPend>
 201f5cc:	00000a06 	br	201f5f8 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 201f5d0:	0001883a 	nop
 201f5d4:	e0bffc17 	ldw	r2,-16(fp)
 201f5d8:	10c00d17 	ldw	r3,52(r2)
 201f5dc:	e0bff317 	ldw	r2,-52(fp)
 201f5e0:	1880051e 	bne	r3,r2,201f5f8 <altera_avalon_jtag_uart_read+0x1c8>
 201f5e4:	e0bffc17 	ldw	r2,-16(fp)
 201f5e8:	10c00917 	ldw	r3,36(r2)
 201f5ec:	e0bffc17 	ldw	r2,-16(fp)
 201f5f0:	10800117 	ldw	r2,4(r2)
 201f5f4:	18bff736 	bltu	r3,r2,201f5d4 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 201f5f8:	e0bffc17 	ldw	r2,-16(fp)
 201f5fc:	10c00d17 	ldw	r3,52(r2)
 201f600:	e0bff317 	ldw	r2,-52(fp)
 201f604:	18800726 	beq	r3,r2,201f624 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 201f608:	e0bffe17 	ldw	r2,-8(fp)
 201f60c:	00bf9d16 	blt	zero,r2,201f484 <altera_avalon_jtag_uart_read+0x54>
 201f610:	00000506 	br	201f628 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 201f614:	0001883a 	nop
 201f618:	00000306 	br	201f628 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 201f61c:	0001883a 	nop
 201f620:	00000106 	br	201f628 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 201f624:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 201f628:	e0bffc17 	ldw	r2,-16(fp)
 201f62c:	10800a17 	ldw	r2,40(r2)
 201f630:	1009883a 	mov	r4,r2
 201f634:	201cc400 	call	201cc40 <OSSemPost>

  if (ptr != buffer)
 201f638:	e0fff017 	ldw	r3,-64(fp)
 201f63c:	e0bffd17 	ldw	r2,-12(fp)
 201f640:	18801826 	beq	r3,r2,201f6a4 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f644:	0005303a 	rdctl	r2,status
 201f648:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f64c:	e0fff717 	ldw	r3,-36(fp)
 201f650:	00bfff84 	movi	r2,-2
 201f654:	1884703a 	and	r2,r3,r2
 201f658:	1001703a 	wrctl	status,r2
  
  return context;
 201f65c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201f660:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201f664:	e0bffc17 	ldw	r2,-16(fp)
 201f668:	10800817 	ldw	r2,32(r2)
 201f66c:	10c00054 	ori	r3,r2,1
 201f670:	e0bffc17 	ldw	r2,-16(fp)
 201f674:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201f678:	e0bffc17 	ldw	r2,-16(fp)
 201f67c:	10800017 	ldw	r2,0(r2)
 201f680:	10800104 	addi	r2,r2,4
 201f684:	1007883a 	mov	r3,r2
 201f688:	e0bffc17 	ldw	r2,-16(fp)
 201f68c:	10800817 	ldw	r2,32(r2)
 201f690:	18800035 	stwio	r2,0(r3)
 201f694:	e0bff617 	ldw	r2,-40(fp)
 201f698:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f69c:	e0bff517 	ldw	r2,-44(fp)
 201f6a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 201f6a4:	e0fff017 	ldw	r3,-64(fp)
 201f6a8:	e0bffd17 	ldw	r2,-12(fp)
 201f6ac:	18800426 	beq	r3,r2,201f6c0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 201f6b0:	e0fff017 	ldw	r3,-64(fp)
 201f6b4:	e0bffd17 	ldw	r2,-12(fp)
 201f6b8:	1885c83a 	sub	r2,r3,r2
 201f6bc:	00000606 	br	201f6d8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 201f6c0:	e0bfff17 	ldw	r2,-4(fp)
 201f6c4:	1090000c 	andi	r2,r2,16384
 201f6c8:	10000226 	beq	r2,zero,201f6d4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 201f6cc:	00bffd44 	movi	r2,-11
 201f6d0:	00000106 	br	201f6d8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 201f6d4:	00bffec4 	movi	r2,-5
}
 201f6d8:	e037883a 	mov	sp,fp
 201f6dc:	dfc00117 	ldw	ra,4(sp)
 201f6e0:	df000017 	ldw	fp,0(sp)
 201f6e4:	dec00204 	addi	sp,sp,8
 201f6e8:	f800283a 	ret

0201f6ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 201f6ec:	deffed04 	addi	sp,sp,-76
 201f6f0:	dfc01215 	stw	ra,72(sp)
 201f6f4:	df001115 	stw	fp,68(sp)
 201f6f8:	df001104 	addi	fp,sp,68
 201f6fc:	e13ffc15 	stw	r4,-16(fp)
 201f700:	e17ffd15 	stw	r5,-12(fp)
 201f704:	e1bffe15 	stw	r6,-8(fp)
 201f708:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 201f70c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 201f710:	e0bffd17 	ldw	r2,-12(fp)
 201f714:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 201f718:	e0bffc17 	ldw	r2,-16(fp)
 201f71c:	10800b17 	ldw	r2,44(r2)
 201f720:	e0bff815 	stw	r2,-32(fp)
 201f724:	e03ff90d 	sth	zero,-28(fp)
 201f728:	e0bff90b 	ldhu	r2,-28(fp)
 201f72c:	e0fffb44 	addi	r3,fp,-19
 201f730:	180d883a 	mov	r6,r3
 201f734:	100b883a 	mov	r5,r2
 201f738:	e13ff817 	ldw	r4,-32(fp)
 201f73c:	201c8c80 	call	201c8c8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201f740:	00003706 	br	201f820 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 201f744:	e0bffc17 	ldw	r2,-16(fp)
 201f748:	10800f17 	ldw	r2,60(r2)
 201f74c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 201f750:	e0bffc17 	ldw	r2,-16(fp)
 201f754:	10801017 	ldw	r2,64(r2)
 201f758:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 201f75c:	e0fff417 	ldw	r3,-48(fp)
 201f760:	e0bff017 	ldw	r2,-64(fp)
 201f764:	1880062e 	bgeu	r3,r2,201f780 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 201f768:	e0fff017 	ldw	r3,-64(fp)
 201f76c:	e0bff417 	ldw	r2,-48(fp)
 201f770:	1885c83a 	sub	r2,r3,r2
 201f774:	10bfffc4 	addi	r2,r2,-1
 201f778:	e0bff115 	stw	r2,-60(fp)
 201f77c:	00000b06 	br	201f7ac <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 201f780:	e0bff017 	ldw	r2,-64(fp)
 201f784:	10000526 	beq	r2,zero,201f79c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 201f788:	00c20004 	movi	r3,2048
 201f78c:	e0bff417 	ldw	r2,-48(fp)
 201f790:	1885c83a 	sub	r2,r3,r2
 201f794:	e0bff115 	stw	r2,-60(fp)
 201f798:	00000406 	br	201f7ac <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 201f79c:	00c1ffc4 	movi	r3,2047
 201f7a0:	e0bff417 	ldw	r2,-48(fp)
 201f7a4:	1885c83a 	sub	r2,r3,r2
 201f7a8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201f7ac:	e0bff117 	ldw	r2,-60(fp)
 201f7b0:	10001e26 	beq	r2,zero,201f82c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 201f7b4:	e0fffe17 	ldw	r3,-8(fp)
 201f7b8:	e0bff117 	ldw	r2,-60(fp)
 201f7bc:	1880022e 	bgeu	r3,r2,201f7c8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 201f7c0:	e0bffe17 	ldw	r2,-8(fp)
 201f7c4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 201f7c8:	e0bffc17 	ldw	r2,-16(fp)
 201f7cc:	10c21104 	addi	r3,r2,2116
 201f7d0:	e0bff417 	ldw	r2,-48(fp)
 201f7d4:	1885883a 	add	r2,r3,r2
 201f7d8:	e1bff117 	ldw	r6,-60(fp)
 201f7dc:	e17ffd17 	ldw	r5,-12(fp)
 201f7e0:	1009883a 	mov	r4,r2
 201f7e4:	20076c80 	call	20076c8 <memcpy>
      ptr   += n;
 201f7e8:	e0fffd17 	ldw	r3,-12(fp)
 201f7ec:	e0bff117 	ldw	r2,-60(fp)
 201f7f0:	1885883a 	add	r2,r3,r2
 201f7f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 201f7f8:	e0fffe17 	ldw	r3,-8(fp)
 201f7fc:	e0bff117 	ldw	r2,-60(fp)
 201f800:	1885c83a 	sub	r2,r3,r2
 201f804:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201f808:	e0fff417 	ldw	r3,-48(fp)
 201f80c:	e0bff117 	ldw	r2,-60(fp)
 201f810:	1885883a 	add	r2,r3,r2
 201f814:	10c1ffcc 	andi	r3,r2,2047
 201f818:	e0bffc17 	ldw	r2,-16(fp)
 201f81c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201f820:	e0bffe17 	ldw	r2,-8(fp)
 201f824:	00bfc716 	blt	zero,r2,201f744 <altera_avalon_jtag_uart_write+0x58>
 201f828:	00000106 	br	201f830 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 201f82c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f830:	0005303a 	rdctl	r2,status
 201f834:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f838:	e0fff717 	ldw	r3,-36(fp)
 201f83c:	00bfff84 	movi	r2,-2
 201f840:	1884703a 	and	r2,r3,r2
 201f844:	1001703a 	wrctl	status,r2
  
  return context;
 201f848:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 201f84c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201f850:	e0bffc17 	ldw	r2,-16(fp)
 201f854:	10800817 	ldw	r2,32(r2)
 201f858:	10c00094 	ori	r3,r2,2
 201f85c:	e0bffc17 	ldw	r2,-16(fp)
 201f860:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201f864:	e0bffc17 	ldw	r2,-16(fp)
 201f868:	10800017 	ldw	r2,0(r2)
 201f86c:	10800104 	addi	r2,r2,4
 201f870:	1007883a 	mov	r3,r2
 201f874:	e0bffc17 	ldw	r2,-16(fp)
 201f878:	10800817 	ldw	r2,32(r2)
 201f87c:	18800035 	stwio	r2,0(r3)
 201f880:	e0bff617 	ldw	r2,-40(fp)
 201f884:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f888:	e0bff317 	ldw	r2,-52(fp)
 201f88c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 201f890:	e0bffe17 	ldw	r2,-8(fp)
 201f894:	00802a0e 	bge	zero,r2,201f940 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 201f898:	e0bfff17 	ldw	r2,-4(fp)
 201f89c:	1090000c 	andi	r2,r2,16384
 201f8a0:	10002a1e 	bne	r2,zero,201f94c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 201f8a4:	d0a79e43 	ldbu	r2,-24967(gp)
 201f8a8:	10803fcc 	andi	r2,r2,255
 201f8ac:	10800058 	cmpnei	r2,r2,1
 201f8b0:	1000161e 	bne	r2,zero,201f90c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 201f8b4:	e0bffc17 	ldw	r2,-16(fp)
 201f8b8:	10800c17 	ldw	r2,48(r2)
 201f8bc:	e0bff515 	stw	r2,-44(fp)
 201f8c0:	00800184 	movi	r2,6
 201f8c4:	e0bff98d 	sth	r2,-26(fp)
 201f8c8:	00bfe0c4 	movi	r2,-125
 201f8cc:	e0bffa05 	stb	r2,-24(fp)
 201f8d0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201f8d4:	d0a79e43 	ldbu	r2,-24967(gp)
 201f8d8:	10803fcc 	andi	r2,r2,255
 201f8dc:	10001526 	beq	r2,zero,201f934 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201f8e0:	e0fff98b 	ldhu	r3,-26(fp)
 201f8e4:	e13ffa03 	ldbu	r4,-24(fp)
 201f8e8:	e17ffa8b 	ldhu	r5,-22(fp)
 201f8ec:	e0bffb04 	addi	r2,fp,-20
 201f8f0:	d8800015 	stw	r2,0(sp)
 201f8f4:	280f883a 	mov	r7,r5
 201f8f8:	200d883a 	mov	r6,r4
 201f8fc:	180b883a 	mov	r5,r3
 201f900:	e13ff517 	ldw	r4,-44(fp)
 201f904:	20193980 	call	2019398 <OSFlagPend>
 201f908:	00000a06 	br	201f934 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 201f90c:	0001883a 	nop
 201f910:	e0bffc17 	ldw	r2,-16(fp)
 201f914:	10c01017 	ldw	r3,64(r2)
 201f918:	e0bff017 	ldw	r2,-64(fp)
 201f91c:	1880051e 	bne	r3,r2,201f934 <altera_avalon_jtag_uart_write+0x248>
 201f920:	e0bffc17 	ldw	r2,-16(fp)
 201f924:	10c00917 	ldw	r3,36(r2)
 201f928:	e0bffc17 	ldw	r2,-16(fp)
 201f92c:	10800117 	ldw	r2,4(r2)
 201f930:	18bff736 	bltu	r3,r2,201f910 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 201f934:	e0bffc17 	ldw	r2,-16(fp)
 201f938:	10800917 	ldw	r2,36(r2)
 201f93c:	1000051e 	bne	r2,zero,201f954 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 201f940:	e0bffe17 	ldw	r2,-8(fp)
 201f944:	00bfb616 	blt	zero,r2,201f820 <altera_avalon_jtag_uart_write+0x134>
 201f948:	00000306 	br	201f958 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 201f94c:	0001883a 	nop
 201f950:	00000106 	br	201f958 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 201f954:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 201f958:	e0bffc17 	ldw	r2,-16(fp)
 201f95c:	10800b17 	ldw	r2,44(r2)
 201f960:	1009883a 	mov	r4,r2
 201f964:	201cc400 	call	201cc40 <OSSemPost>

  if (ptr != start)
 201f968:	e0fffd17 	ldw	r3,-12(fp)
 201f96c:	e0bff217 	ldw	r2,-56(fp)
 201f970:	18800426 	beq	r3,r2,201f984 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 201f974:	e0fffd17 	ldw	r3,-12(fp)
 201f978:	e0bff217 	ldw	r2,-56(fp)
 201f97c:	1885c83a 	sub	r2,r3,r2
 201f980:	00000606 	br	201f99c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 201f984:	e0bfff17 	ldw	r2,-4(fp)
 201f988:	1090000c 	andi	r2,r2,16384
 201f98c:	10000226 	beq	r2,zero,201f998 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 201f990:	00bffd44 	movi	r2,-11
 201f994:	00000106 	br	201f99c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 201f998:	00bffec4 	movi	r2,-5
}
 201f99c:	e037883a 	mov	sp,fp
 201f9a0:	dfc00117 	ldw	ra,4(sp)
 201f9a4:	df000017 	ldw	fp,0(sp)
 201f9a8:	dec00204 	addi	sp,sp,8
 201f9ac:	f800283a 	ret

0201f9b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 201f9b0:	defff904 	addi	sp,sp,-28
 201f9b4:	dfc00615 	stw	ra,24(sp)
 201f9b8:	df000515 	stw	fp,20(sp)
 201f9bc:	df000504 	addi	fp,sp,20
 201f9c0:	e13ffe15 	stw	r4,-8(fp)
 201f9c4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 201f9c8:	0007883a 	mov	r3,zero
 201f9cc:	e0bffe17 	ldw	r2,-8(fp)
 201f9d0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 201f9d4:	e0bffe17 	ldw	r2,-8(fp)
 201f9d8:	10800104 	addi	r2,r2,4
 201f9dc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f9e0:	0005303a 	rdctl	r2,status
 201f9e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f9e8:	e0fffc17 	ldw	r3,-16(fp)
 201f9ec:	00bfff84 	movi	r2,-2
 201f9f0:	1884703a 	and	r2,r3,r2
 201f9f4:	1001703a 	wrctl	status,r2
  
  return context;
 201f9f8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 201f9fc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 201fa00:	20207d80 	call	20207d8 <alt_tick>
 201fa04:	e0bffb17 	ldw	r2,-20(fp)
 201fa08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201fa0c:	e0bffd17 	ldw	r2,-12(fp)
 201fa10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 201fa14:	0001883a 	nop
 201fa18:	e037883a 	mov	sp,fp
 201fa1c:	dfc00117 	ldw	ra,4(sp)
 201fa20:	df000017 	ldw	fp,0(sp)
 201fa24:	dec00204 	addi	sp,sp,8
 201fa28:	f800283a 	ret

0201fa2c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 201fa2c:	defff904 	addi	sp,sp,-28
 201fa30:	dfc00615 	stw	ra,24(sp)
 201fa34:	df000515 	stw	fp,20(sp)
 201fa38:	df000504 	addi	fp,sp,20
 201fa3c:	e13ffc15 	stw	r4,-16(fp)
 201fa40:	e17ffd15 	stw	r5,-12(fp)
 201fa44:	e1bffe15 	stw	r6,-8(fp)
 201fa48:	e1ffff15 	stw	r7,-4(fp)
 201fa4c:	e0bfff17 	ldw	r2,-4(fp)
 201fa50:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 201fa54:	d0a7b317 	ldw	r2,-24884(gp)
 201fa58:	1000021e 	bne	r2,zero,201fa64 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 201fa5c:	e0bffb17 	ldw	r2,-20(fp)
 201fa60:	d0a7b315 	stw	r2,-24884(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 201fa64:	e0bffc17 	ldw	r2,-16(fp)
 201fa68:	10800104 	addi	r2,r2,4
 201fa6c:	00c001c4 	movi	r3,7
 201fa70:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 201fa74:	018080b4 	movhi	r6,514
 201fa78:	31be6c04 	addi	r6,r6,-1616
 201fa7c:	e17ffc17 	ldw	r5,-16(fp)
 201fa80:	e13ffe17 	ldw	r4,-8(fp)
 201fa84:	20203680 	call	2020368 <alt_irq_register>
#endif  
}
 201fa88:	0001883a 	nop
 201fa8c:	e037883a 	mov	sp,fp
 201fa90:	dfc00117 	ldw	ra,4(sp)
 201fa94:	df000017 	ldw	fp,0(sp)
 201fa98:	dec00204 	addi	sp,sp,8
 201fa9c:	f800283a 	ret

0201faa0 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 201faa0:	defffc04 	addi	sp,sp,-16
 201faa4:	dfc00315 	stw	ra,12(sp)
 201faa8:	df000215 	stw	fp,8(sp)
 201faac:	df000204 	addi	fp,sp,8
 201fab0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 201fab4:	d1603604 	addi	r5,gp,-32552
 201fab8:	e13fff17 	ldw	r4,-4(fp)
 201fabc:	20201640 	call	2020164 <alt_find_dev>
 201fac0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 201fac4:	e0bffe17 	ldw	r2,-8(fp)
}
 201fac8:	e037883a 	mov	sp,fp
 201facc:	dfc00117 	ldw	ra,4(sp)
 201fad0:	df000017 	ldw	fp,0(sp)
 201fad4:	dec00204 	addi	sp,sp,8
 201fad8:	f800283a 	ret

0201fadc <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 201fadc:	defffd04 	addi	sp,sp,-12
 201fae0:	df000215 	stw	fp,8(sp)
 201fae4:	df000204 	addi	fp,sp,8
 201fae8:	e13ffe15 	stw	r4,-8(fp)
 201faec:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 201faf0:	e0bffe17 	ldw	r2,-8(fp)
 201faf4:	10800a17 	ldw	r2,40(r2)
 201faf8:	10800023 	ldbuio	r2,0(r2)
 201fafc:	10803fcc 	andi	r2,r2,255
 201fb00:	1007883a 	mov	r3,r2
 201fb04:	e0bfff17 	ldw	r2,-4(fp)
 201fb08:	10c00005 	stb	r3,0(r2)

	return 0;
 201fb0c:	0005883a 	mov	r2,zero
}
 201fb10:	e037883a 	mov	sp,fp
 201fb14:	df000017 	ldw	fp,0(sp)
 201fb18:	dec00104 	addi	sp,sp,4
 201fb1c:	f800283a 	ret

0201fb20 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 201fb20:	defffc04 	addi	sp,sp,-16
 201fb24:	df000315 	stw	fp,12(sp)
 201fb28:	df000304 	addi	fp,sp,12
 201fb2c:	e13ffd15 	stw	r4,-12(fp)
 201fb30:	2805883a 	mov	r2,r5
 201fb34:	e1bfff15 	stw	r6,-4(fp)
 201fb38:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201fb3c:	e0bffd17 	ldw	r2,-12(fp)
 201fb40:	10800a17 	ldw	r2,40(r2)
 201fb44:	1007883a 	mov	r3,r2
 201fb48:	e0bffe03 	ldbu	r2,-8(fp)
 201fb4c:	10800fcc 	andi	r2,r2,63
 201fb50:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 201fb54:	e0bffd17 	ldw	r2,-12(fp)
 201fb58:	10800a17 	ldw	r2,40(r2)
 201fb5c:	10800044 	addi	r2,r2,1
 201fb60:	10800023 	ldbuio	r2,0(r2)
 201fb64:	10803fcc 	andi	r2,r2,255
 201fb68:	1007883a 	mov	r3,r2
 201fb6c:	e0bfff17 	ldw	r2,-4(fp)
 201fb70:	10c00005 	stb	r3,0(r2)

	return 0;
 201fb74:	0005883a 	mov	r2,zero
}
 201fb78:	e037883a 	mov	sp,fp
 201fb7c:	df000017 	ldw	fp,0(sp)
 201fb80:	dec00104 	addi	sp,sp,4
 201fb84:	f800283a 	ret

0201fb88 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 201fb88:	defffc04 	addi	sp,sp,-16
 201fb8c:	df000315 	stw	fp,12(sp)
 201fb90:	df000304 	addi	fp,sp,12
 201fb94:	e13ffd15 	stw	r4,-12(fp)
 201fb98:	2807883a 	mov	r3,r5
 201fb9c:	3005883a 	mov	r2,r6
 201fba0:	e0fffe05 	stb	r3,-8(fp)
 201fba4:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201fba8:	e0bffd17 	ldw	r2,-12(fp)
 201fbac:	10800a17 	ldw	r2,40(r2)
 201fbb0:	1007883a 	mov	r3,r2
 201fbb4:	e0bffe03 	ldbu	r2,-8(fp)
 201fbb8:	10800fcc 	andi	r2,r2,63
 201fbbc:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 201fbc0:	e0bffd17 	ldw	r2,-12(fp)
 201fbc4:	10800a17 	ldw	r2,40(r2)
 201fbc8:	10800044 	addi	r2,r2,1
 201fbcc:	1007883a 	mov	r3,r2
 201fbd0:	e0bfff03 	ldbu	r2,-4(fp)
 201fbd4:	18800025 	stbio	r2,0(r3)

	return 0;
 201fbd8:	0005883a 	mov	r2,zero
}
 201fbdc:	e037883a 	mov	sp,fp
 201fbe0:	df000017 	ldw	fp,0(sp)
 201fbe4:	dec00104 	addi	sp,sp,4
 201fbe8:	f800283a 	ret

0201fbec <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 201fbec:	defffd04 	addi	sp,sp,-12
 201fbf0:	df000215 	stw	fp,8(sp)
 201fbf4:	df000204 	addi	fp,sp,8
 201fbf8:	e13ffe15 	stw	r4,-8(fp)
 201fbfc:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201fc00:	e0bffe17 	ldw	r2,-8(fp)
 201fc04:	10800a17 	ldw	r2,40(r2)
 201fc08:	1007883a 	mov	r3,r2
 201fc0c:	00800c84 	movi	r2,50
 201fc10:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 201fc14:	e0bffe17 	ldw	r2,-8(fp)
 201fc18:	10800a17 	ldw	r2,40(r2)
 201fc1c:	10800044 	addi	r2,r2,1
 201fc20:	10800023 	ldbuio	r2,0(r2)
 201fc24:	10803fcc 	andi	r2,r2,255
 201fc28:	10ffffcc 	andi	r3,r2,65535
 201fc2c:	e0bfff17 	ldw	r2,-4(fp)
 201fc30:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201fc34:	e0bffe17 	ldw	r2,-8(fp)
 201fc38:	10800a17 	ldw	r2,40(r2)
 201fc3c:	1007883a 	mov	r3,r2
 201fc40:	00800cc4 	movi	r2,51
 201fc44:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 201fc48:	e0bffe17 	ldw	r2,-8(fp)
 201fc4c:	10800a17 	ldw	r2,40(r2)
 201fc50:	10800044 	addi	r2,r2,1
 201fc54:	10800023 	ldbuio	r2,0(r2)
 201fc58:	10803fcc 	andi	r2,r2,255
 201fc5c:	10bfffcc 	andi	r2,r2,65535
 201fc60:	1004923a 	slli	r2,r2,8
 201fc64:	e0ffff17 	ldw	r3,-4(fp)
 201fc68:	18c00017 	ldw	r3,0(r3)
 201fc6c:	1885883a 	add	r2,r3,r2
 201fc70:	1007883a 	mov	r3,r2
 201fc74:	e0bfff17 	ldw	r2,-4(fp)
 201fc78:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 201fc7c:	e0bfff17 	ldw	r2,-4(fp)
 201fc80:	10800017 	ldw	r2,0(r2)
 201fc84:	10a0000c 	andi	r2,r2,32768
 201fc88:	10000626 	beq	r2,zero,201fca4 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 201fc8c:	e0bfff17 	ldw	r2,-4(fp)
 201fc90:	10800017 	ldw	r2,0(r2)
 201fc94:	10bffff4 	orhi	r2,r2,65535
 201fc98:	1007883a 	mov	r3,r2
 201fc9c:	e0bfff17 	ldw	r2,-4(fp)
 201fca0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 201fca4:	0005883a 	mov	r2,zero
}
 201fca8:	e037883a 	mov	sp,fp
 201fcac:	df000017 	ldw	fp,0(sp)
 201fcb0:	dec00104 	addi	sp,sp,4
 201fcb4:	f800283a 	ret

0201fcb8 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 201fcb8:	defffd04 	addi	sp,sp,-12
 201fcbc:	df000215 	stw	fp,8(sp)
 201fcc0:	df000204 	addi	fp,sp,8
 201fcc4:	e13ffe15 	stw	r4,-8(fp)
 201fcc8:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201fccc:	e0bffe17 	ldw	r2,-8(fp)
 201fcd0:	10800a17 	ldw	r2,40(r2)
 201fcd4:	1007883a 	mov	r3,r2
 201fcd8:	00800d04 	movi	r2,52
 201fcdc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 201fce0:	e0bffe17 	ldw	r2,-8(fp)
 201fce4:	10800a17 	ldw	r2,40(r2)
 201fce8:	10800044 	addi	r2,r2,1
 201fcec:	10800023 	ldbuio	r2,0(r2)
 201fcf0:	10803fcc 	andi	r2,r2,255
 201fcf4:	10ffffcc 	andi	r3,r2,65535
 201fcf8:	e0bfff17 	ldw	r2,-4(fp)
 201fcfc:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201fd00:	e0bffe17 	ldw	r2,-8(fp)
 201fd04:	10800a17 	ldw	r2,40(r2)
 201fd08:	1007883a 	mov	r3,r2
 201fd0c:	00800d44 	movi	r2,53
 201fd10:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 201fd14:	e0bffe17 	ldw	r2,-8(fp)
 201fd18:	10800a17 	ldw	r2,40(r2)
 201fd1c:	10800044 	addi	r2,r2,1
 201fd20:	10800023 	ldbuio	r2,0(r2)
 201fd24:	10803fcc 	andi	r2,r2,255
 201fd28:	10bfffcc 	andi	r2,r2,65535
 201fd2c:	1004923a 	slli	r2,r2,8
 201fd30:	e0ffff17 	ldw	r3,-4(fp)
 201fd34:	18c00017 	ldw	r3,0(r3)
 201fd38:	1885883a 	add	r2,r3,r2
 201fd3c:	1007883a 	mov	r3,r2
 201fd40:	e0bfff17 	ldw	r2,-4(fp)
 201fd44:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 201fd48:	e0bfff17 	ldw	r2,-4(fp)
 201fd4c:	10800017 	ldw	r2,0(r2)
 201fd50:	10a0000c 	andi	r2,r2,32768
 201fd54:	10000626 	beq	r2,zero,201fd70 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 201fd58:	e0bfff17 	ldw	r2,-4(fp)
 201fd5c:	10800017 	ldw	r2,0(r2)
 201fd60:	10bffff4 	orhi	r2,r2,65535
 201fd64:	1007883a 	mov	r3,r2
 201fd68:	e0bfff17 	ldw	r2,-4(fp)
 201fd6c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 201fd70:	0005883a 	mov	r2,zero
}
 201fd74:	e037883a 	mov	sp,fp
 201fd78:	df000017 	ldw	fp,0(sp)
 201fd7c:	dec00104 	addi	sp,sp,4
 201fd80:	f800283a 	ret

0201fd84 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 201fd84:	defffd04 	addi	sp,sp,-12
 201fd88:	df000215 	stw	fp,8(sp)
 201fd8c:	df000204 	addi	fp,sp,8
 201fd90:	e13ffe15 	stw	r4,-8(fp)
 201fd94:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201fd98:	e0bffe17 	ldw	r2,-8(fp)
 201fd9c:	10800a17 	ldw	r2,40(r2)
 201fda0:	1007883a 	mov	r3,r2
 201fda4:	00800d84 	movi	r2,54
 201fda8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 201fdac:	e0bffe17 	ldw	r2,-8(fp)
 201fdb0:	10800a17 	ldw	r2,40(r2)
 201fdb4:	10800044 	addi	r2,r2,1
 201fdb8:	10800023 	ldbuio	r2,0(r2)
 201fdbc:	10803fcc 	andi	r2,r2,255
 201fdc0:	10ffffcc 	andi	r3,r2,65535
 201fdc4:	e0bfff17 	ldw	r2,-4(fp)
 201fdc8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 201fdcc:	e0bffe17 	ldw	r2,-8(fp)
 201fdd0:	10800a17 	ldw	r2,40(r2)
 201fdd4:	1007883a 	mov	r3,r2
 201fdd8:	00800dc4 	movi	r2,55
 201fddc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 201fde0:	e0bffe17 	ldw	r2,-8(fp)
 201fde4:	10800a17 	ldw	r2,40(r2)
 201fde8:	10800044 	addi	r2,r2,1
 201fdec:	10800023 	ldbuio	r2,0(r2)
 201fdf0:	10803fcc 	andi	r2,r2,255
 201fdf4:	10bfffcc 	andi	r2,r2,65535
 201fdf8:	1004923a 	slli	r2,r2,8
 201fdfc:	e0ffff17 	ldw	r3,-4(fp)
 201fe00:	18c00017 	ldw	r3,0(r3)
 201fe04:	1885883a 	add	r2,r3,r2
 201fe08:	1007883a 	mov	r3,r2
 201fe0c:	e0bfff17 	ldw	r2,-4(fp)
 201fe10:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 201fe14:	e0bfff17 	ldw	r2,-4(fp)
 201fe18:	10800017 	ldw	r2,0(r2)
 201fe1c:	10a0000c 	andi	r2,r2,32768
 201fe20:	10000626 	beq	r2,zero,201fe3c <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 201fe24:	e0bfff17 	ldw	r2,-4(fp)
 201fe28:	10800017 	ldw	r2,0(r2)
 201fe2c:	10bffff4 	orhi	r2,r2,65535
 201fe30:	1007883a 	mov	r3,r2
 201fe34:	e0bfff17 	ldw	r2,-4(fp)
 201fe38:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 201fe3c:	0005883a 	mov	r2,zero
}
 201fe40:	e037883a 	mov	sp,fp
 201fe44:	df000017 	ldw	fp,0(sp)
 201fe48:	dec00104 	addi	sp,sp,4
 201fe4c:	f800283a 	ret

0201fe50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201fe50:	defff504 	addi	sp,sp,-44
 201fe54:	df000a15 	stw	fp,40(sp)
 201fe58:	df000a04 	addi	fp,sp,40
 201fe5c:	e13ffc15 	stw	r4,-16(fp)
 201fe60:	e17ffd15 	stw	r5,-12(fp)
 201fe64:	e1bffe15 	stw	r6,-8(fp)
 201fe68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201fe6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201fe70:	d0a7b317 	ldw	r2,-24884(gp)
  
  if (alt_ticks_per_second ())
 201fe74:	10003c26 	beq	r2,zero,201ff68 <alt_alarm_start+0x118>
  {
    if (alarm)
 201fe78:	e0bffc17 	ldw	r2,-16(fp)
 201fe7c:	10003826 	beq	r2,zero,201ff60 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 201fe80:	e0bffc17 	ldw	r2,-16(fp)
 201fe84:	e0fffe17 	ldw	r3,-8(fp)
 201fe88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201fe8c:	e0bffc17 	ldw	r2,-16(fp)
 201fe90:	e0ffff17 	ldw	r3,-4(fp)
 201fe94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201fe98:	0005303a 	rdctl	r2,status
 201fe9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201fea0:	e0fff917 	ldw	r3,-28(fp)
 201fea4:	00bfff84 	movi	r2,-2
 201fea8:	1884703a 	and	r2,r3,r2
 201feac:	1001703a 	wrctl	status,r2
  
  return context;
 201feb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 201feb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 201feb8:	d0a7b417 	ldw	r2,-24880(gp)
      
      current_nticks = alt_nticks();
 201febc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201fec0:	e0fffd17 	ldw	r3,-12(fp)
 201fec4:	e0bff617 	ldw	r2,-40(fp)
 201fec8:	1885883a 	add	r2,r3,r2
 201fecc:	10c00044 	addi	r3,r2,1
 201fed0:	e0bffc17 	ldw	r2,-16(fp)
 201fed4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 201fed8:	e0bffc17 	ldw	r2,-16(fp)
 201fedc:	10c00217 	ldw	r3,8(r2)
 201fee0:	e0bff617 	ldw	r2,-40(fp)
 201fee4:	1880042e 	bgeu	r3,r2,201fef8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 201fee8:	e0bffc17 	ldw	r2,-16(fp)
 201feec:	00c00044 	movi	r3,1
 201fef0:	10c00405 	stb	r3,16(r2)
 201fef4:	00000206 	br	201ff00 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 201fef8:	e0bffc17 	ldw	r2,-16(fp)
 201fefc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201ff00:	e0bffc17 	ldw	r2,-16(fp)
 201ff04:	d0e05b04 	addi	r3,gp,-32404
 201ff08:	e0fffa15 	stw	r3,-24(fp)
 201ff0c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201ff10:	e0bffb17 	ldw	r2,-20(fp)
 201ff14:	e0fffa17 	ldw	r3,-24(fp)
 201ff18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201ff1c:	e0bffa17 	ldw	r2,-24(fp)
 201ff20:	10c00017 	ldw	r3,0(r2)
 201ff24:	e0bffb17 	ldw	r2,-20(fp)
 201ff28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201ff2c:	e0bffa17 	ldw	r2,-24(fp)
 201ff30:	10800017 	ldw	r2,0(r2)
 201ff34:	e0fffb17 	ldw	r3,-20(fp)
 201ff38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201ff3c:	e0bffa17 	ldw	r2,-24(fp)
 201ff40:	e0fffb17 	ldw	r3,-20(fp)
 201ff44:	10c00015 	stw	r3,0(r2)
 201ff48:	e0bff817 	ldw	r2,-32(fp)
 201ff4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ff50:	e0bff717 	ldw	r2,-36(fp)
 201ff54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 201ff58:	0005883a 	mov	r2,zero
 201ff5c:	00000306 	br	201ff6c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 201ff60:	00bffa84 	movi	r2,-22
 201ff64:	00000106 	br	201ff6c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 201ff68:	00bfde84 	movi	r2,-134
  }
}
 201ff6c:	e037883a 	mov	sp,fp
 201ff70:	df000017 	ldw	fp,0(sp)
 201ff74:	dec00104 	addi	sp,sp,4
 201ff78:	f800283a 	ret

0201ff7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 201ff7c:	defffe04 	addi	sp,sp,-8
 201ff80:	df000115 	stw	fp,4(sp)
 201ff84:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201ff88:	e03fff15 	stw	zero,-4(fp)
 201ff8c:	00000506 	br	201ffa4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 201ff90:	e0bfff17 	ldw	r2,-4(fp)
 201ff94:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201ff98:	e0bfff17 	ldw	r2,-4(fp)
 201ff9c:	10800804 	addi	r2,r2,32
 201ffa0:	e0bfff15 	stw	r2,-4(fp)
 201ffa4:	e0bfff17 	ldw	r2,-4(fp)
 201ffa8:	10820030 	cmpltui	r2,r2,2048
 201ffac:	103ff81e 	bne	r2,zero,201ff90 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 201ffb0:	0001883a 	nop
 201ffb4:	e037883a 	mov	sp,fp
 201ffb8:	df000017 	ldw	fp,0(sp)
 201ffbc:	dec00104 	addi	sp,sp,4
 201ffc0:	f800283a 	ret

0201ffc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201ffc4:	defffe04 	addi	sp,sp,-8
 201ffc8:	dfc00115 	stw	ra,4(sp)
 201ffcc:	df000015 	stw	fp,0(sp)
 201ffd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201ffd4:	d0a03917 	ldw	r2,-32540(gp)
 201ffd8:	10000326 	beq	r2,zero,201ffe8 <alt_get_errno+0x24>
 201ffdc:	d0a03917 	ldw	r2,-32540(gp)
 201ffe0:	103ee83a 	callr	r2
 201ffe4:	00000106 	br	201ffec <alt_get_errno+0x28>
 201ffe8:	d0a79504 	addi	r2,gp,-25004
}
 201ffec:	e037883a 	mov	sp,fp
 201fff0:	dfc00117 	ldw	ra,4(sp)
 201fff4:	df000017 	ldw	fp,0(sp)
 201fff8:	dec00204 	addi	sp,sp,8
 201fffc:	f800283a 	ret

02020000 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2020000:	defffa04 	addi	sp,sp,-24
 2020004:	dfc00515 	stw	ra,20(sp)
 2020008:	df000415 	stw	fp,16(sp)
 202000c:	df000404 	addi	fp,sp,16
 2020010:	e13ffe15 	stw	r4,-8(fp)
 2020014:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2020018:	e0bffe17 	ldw	r2,-8(fp)
 202001c:	10000326 	beq	r2,zero,202002c <alt_dev_llist_insert+0x2c>
 2020020:	e0bffe17 	ldw	r2,-8(fp)
 2020024:	10800217 	ldw	r2,8(r2)
 2020028:	1000061e 	bne	r2,zero,2020044 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 202002c:	201ffc40 	call	201ffc4 <alt_get_errno>
 2020030:	1007883a 	mov	r3,r2
 2020034:	00800584 	movi	r2,22
 2020038:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 202003c:	00bffa84 	movi	r2,-22
 2020040:	00001306 	br	2020090 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2020044:	e0bffe17 	ldw	r2,-8(fp)
 2020048:	e0ffff17 	ldw	r3,-4(fp)
 202004c:	e0fffc15 	stw	r3,-16(fp)
 2020050:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2020054:	e0bffd17 	ldw	r2,-12(fp)
 2020058:	e0fffc17 	ldw	r3,-16(fp)
 202005c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2020060:	e0bffc17 	ldw	r2,-16(fp)
 2020064:	10c00017 	ldw	r3,0(r2)
 2020068:	e0bffd17 	ldw	r2,-12(fp)
 202006c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2020070:	e0bffc17 	ldw	r2,-16(fp)
 2020074:	10800017 	ldw	r2,0(r2)
 2020078:	e0fffd17 	ldw	r3,-12(fp)
 202007c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2020080:	e0bffc17 	ldw	r2,-16(fp)
 2020084:	e0fffd17 	ldw	r3,-12(fp)
 2020088:	10c00015 	stw	r3,0(r2)

  return 0;  
 202008c:	0005883a 	mov	r2,zero
}
 2020090:	e037883a 	mov	sp,fp
 2020094:	dfc00117 	ldw	ra,4(sp)
 2020098:	df000017 	ldw	fp,0(sp)
 202009c:	dec00204 	addi	sp,sp,8
 20200a0:	f800283a 	ret

020200a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20200a4:	defffd04 	addi	sp,sp,-12
 20200a8:	dfc00215 	stw	ra,8(sp)
 20200ac:	df000115 	stw	fp,4(sp)
 20200b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20200b4:	008080b4 	movhi	r2,514
 20200b8:	10852c04 	addi	r2,r2,5296
 20200bc:	e0bfff15 	stw	r2,-4(fp)
 20200c0:	00000606 	br	20200dc <_do_ctors+0x38>
        (*ctor) (); 
 20200c4:	e0bfff17 	ldw	r2,-4(fp)
 20200c8:	10800017 	ldw	r2,0(r2)
 20200cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20200d0:	e0bfff17 	ldw	r2,-4(fp)
 20200d4:	10bfff04 	addi	r2,r2,-4
 20200d8:	e0bfff15 	stw	r2,-4(fp)
 20200dc:	e0ffff17 	ldw	r3,-4(fp)
 20200e0:	008080b4 	movhi	r2,514
 20200e4:	10852d04 	addi	r2,r2,5300
 20200e8:	18bff62e 	bgeu	r3,r2,20200c4 <_do_ctors+0x20>
        (*ctor) (); 
}
 20200ec:	0001883a 	nop
 20200f0:	e037883a 	mov	sp,fp
 20200f4:	dfc00117 	ldw	ra,4(sp)
 20200f8:	df000017 	ldw	fp,0(sp)
 20200fc:	dec00204 	addi	sp,sp,8
 2020100:	f800283a 	ret

02020104 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2020104:	defffd04 	addi	sp,sp,-12
 2020108:	dfc00215 	stw	ra,8(sp)
 202010c:	df000115 	stw	fp,4(sp)
 2020110:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2020114:	008080b4 	movhi	r2,514
 2020118:	10852c04 	addi	r2,r2,5296
 202011c:	e0bfff15 	stw	r2,-4(fp)
 2020120:	00000606 	br	202013c <_do_dtors+0x38>
        (*dtor) (); 
 2020124:	e0bfff17 	ldw	r2,-4(fp)
 2020128:	10800017 	ldw	r2,0(r2)
 202012c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2020130:	e0bfff17 	ldw	r2,-4(fp)
 2020134:	10bfff04 	addi	r2,r2,-4
 2020138:	e0bfff15 	stw	r2,-4(fp)
 202013c:	e0ffff17 	ldw	r3,-4(fp)
 2020140:	008080b4 	movhi	r2,514
 2020144:	10852d04 	addi	r2,r2,5300
 2020148:	18bff62e 	bgeu	r3,r2,2020124 <_do_dtors+0x20>
        (*dtor) (); 
}
 202014c:	0001883a 	nop
 2020150:	e037883a 	mov	sp,fp
 2020154:	dfc00117 	ldw	ra,4(sp)
 2020158:	df000017 	ldw	fp,0(sp)
 202015c:	dec00204 	addi	sp,sp,8
 2020160:	f800283a 	ret

02020164 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2020164:	defffa04 	addi	sp,sp,-24
 2020168:	dfc00515 	stw	ra,20(sp)
 202016c:	df000415 	stw	fp,16(sp)
 2020170:	df000404 	addi	fp,sp,16
 2020174:	e13ffe15 	stw	r4,-8(fp)
 2020178:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 202017c:	e0bfff17 	ldw	r2,-4(fp)
 2020180:	10800017 	ldw	r2,0(r2)
 2020184:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2020188:	e13ffe17 	ldw	r4,-8(fp)
 202018c:	2007c300 	call	2007c30 <strlen>
 2020190:	10800044 	addi	r2,r2,1
 2020194:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2020198:	00000d06 	br	20201d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 202019c:	e0bffc17 	ldw	r2,-16(fp)
 20201a0:	10800217 	ldw	r2,8(r2)
 20201a4:	e0fffd17 	ldw	r3,-12(fp)
 20201a8:	180d883a 	mov	r6,r3
 20201ac:	e17ffe17 	ldw	r5,-8(fp)
 20201b0:	1009883a 	mov	r4,r2
 20201b4:	2020ff00 	call	2020ff0 <memcmp>
 20201b8:	1000021e 	bne	r2,zero,20201c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20201bc:	e0bffc17 	ldw	r2,-16(fp)
 20201c0:	00000706 	br	20201e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 20201c4:	e0bffc17 	ldw	r2,-16(fp)
 20201c8:	10800017 	ldw	r2,0(r2)
 20201cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20201d0:	e0fffc17 	ldw	r3,-16(fp)
 20201d4:	e0bfff17 	ldw	r2,-4(fp)
 20201d8:	18bff01e 	bne	r3,r2,202019c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20201dc:	0005883a 	mov	r2,zero
}
 20201e0:	e037883a 	mov	sp,fp
 20201e4:	dfc00117 	ldw	ra,4(sp)
 20201e8:	df000017 	ldw	fp,0(sp)
 20201ec:	dec00204 	addi	sp,sp,8
 20201f0:	f800283a 	ret

020201f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20201f4:	defffe04 	addi	sp,sp,-8
 20201f8:	dfc00115 	stw	ra,4(sp)
 20201fc:	df000015 	stw	fp,0(sp)
 2020200:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2020204:	01440004 	movi	r5,4096
 2020208:	0009883a 	mov	r4,zero
 202020c:	2020e400 	call	2020e40 <alt_icache_flush>
#endif
}
 2020210:	0001883a 	nop
 2020214:	e037883a 	mov	sp,fp
 2020218:	dfc00117 	ldw	ra,4(sp)
 202021c:	df000017 	ldw	fp,0(sp)
 2020220:	dec00204 	addi	sp,sp,8
 2020224:	f800283a 	ret

02020228 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2020228:	defff904 	addi	sp,sp,-28
 202022c:	dfc00615 	stw	ra,24(sp)
 2020230:	df000515 	stw	fp,20(sp)
 2020234:	df000504 	addi	fp,sp,20
 2020238:	e13ffc15 	stw	r4,-16(fp)
 202023c:	e17ffd15 	stw	r5,-12(fp)
 2020240:	e1bffe15 	stw	r6,-8(fp)
 2020244:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2020248:	e1bfff17 	ldw	r6,-4(fp)
 202024c:	e17ffe17 	ldw	r5,-8(fp)
 2020250:	e13ffd17 	ldw	r4,-12(fp)
 2020254:	20205e80 	call	20205e8 <open>
 2020258:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 202025c:	e0bffb17 	ldw	r2,-20(fp)
 2020260:	10001c16 	blt	r2,zero,20202d4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 2020264:	008080b4 	movhi	r2,514
 2020268:	108a0704 	addi	r2,r2,10268
 202026c:	e0fffb17 	ldw	r3,-20(fp)
 2020270:	18c00324 	muli	r3,r3,12
 2020274:	10c5883a 	add	r2,r2,r3
 2020278:	10c00017 	ldw	r3,0(r2)
 202027c:	e0bffc17 	ldw	r2,-16(fp)
 2020280:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2020284:	008080b4 	movhi	r2,514
 2020288:	108a0704 	addi	r2,r2,10268
 202028c:	e0fffb17 	ldw	r3,-20(fp)
 2020290:	18c00324 	muli	r3,r3,12
 2020294:	10c5883a 	add	r2,r2,r3
 2020298:	10800104 	addi	r2,r2,4
 202029c:	10c00017 	ldw	r3,0(r2)
 20202a0:	e0bffc17 	ldw	r2,-16(fp)
 20202a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20202a8:	008080b4 	movhi	r2,514
 20202ac:	108a0704 	addi	r2,r2,10268
 20202b0:	e0fffb17 	ldw	r3,-20(fp)
 20202b4:	18c00324 	muli	r3,r3,12
 20202b8:	10c5883a 	add	r2,r2,r3
 20202bc:	10800204 	addi	r2,r2,8
 20202c0:	10c00017 	ldw	r3,0(r2)
 20202c4:	e0bffc17 	ldw	r2,-16(fp)
 20202c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20202cc:	e13ffb17 	ldw	r4,-20(fp)
 20202d0:	20163d00 	call	20163d0 <alt_release_fd>
  }
} 
 20202d4:	0001883a 	nop
 20202d8:	e037883a 	mov	sp,fp
 20202dc:	dfc00117 	ldw	ra,4(sp)
 20202e0:	df000017 	ldw	fp,0(sp)
 20202e4:	dec00204 	addi	sp,sp,8
 20202e8:	f800283a 	ret

020202ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20202ec:	defffb04 	addi	sp,sp,-20
 20202f0:	dfc00415 	stw	ra,16(sp)
 20202f4:	df000315 	stw	fp,12(sp)
 20202f8:	df000304 	addi	fp,sp,12
 20202fc:	e13ffd15 	stw	r4,-12(fp)
 2020300:	e17ffe15 	stw	r5,-8(fp)
 2020304:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2020308:	01c07fc4 	movi	r7,511
 202030c:	01800044 	movi	r6,1
 2020310:	e17ffd17 	ldw	r5,-12(fp)
 2020314:	010080b4 	movhi	r4,514
 2020318:	210a0a04 	addi	r4,r4,10280
 202031c:	20202280 	call	2020228 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2020320:	01c07fc4 	movi	r7,511
 2020324:	000d883a 	mov	r6,zero
 2020328:	e17ffe17 	ldw	r5,-8(fp)
 202032c:	010080b4 	movhi	r4,514
 2020330:	210a0704 	addi	r4,r4,10268
 2020334:	20202280 	call	2020228 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2020338:	01c07fc4 	movi	r7,511
 202033c:	01800044 	movi	r6,1
 2020340:	e17fff17 	ldw	r5,-4(fp)
 2020344:	010080b4 	movhi	r4,514
 2020348:	210a0d04 	addi	r4,r4,10292
 202034c:	20202280 	call	2020228 <alt_open_fd>
}  
 2020350:	0001883a 	nop
 2020354:	e037883a 	mov	sp,fp
 2020358:	dfc00117 	ldw	ra,4(sp)
 202035c:	df000017 	ldw	fp,0(sp)
 2020360:	dec00204 	addi	sp,sp,8
 2020364:	f800283a 	ret

02020368 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 2020368:	defff004 	addi	sp,sp,-64
 202036c:	df000f15 	stw	fp,60(sp)
 2020370:	df000f04 	addi	fp,sp,60
 2020374:	e13ffd15 	stw	r4,-12(fp)
 2020378:	e17ffe15 	stw	r5,-8(fp)
 202037c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 2020380:	00bffa84 	movi	r2,-22
 2020384:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2020388:	e0bffd17 	ldw	r2,-12(fp)
 202038c:	10800828 	cmpgeui	r2,r2,32
 2020390:	1000501e 	bne	r2,zero,20204d4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020394:	0005303a 	rdctl	r2,status
 2020398:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 202039c:	e0fff617 	ldw	r3,-40(fp)
 20203a0:	00bfff84 	movi	r2,-2
 20203a4:	1884703a 	and	r2,r3,r2
 20203a8:	1001703a 	wrctl	status,r2
  
  return context;
 20203ac:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 20203b0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 20203b4:	008080f4 	movhi	r2,515
 20203b8:	10bad704 	addi	r2,r2,-5284
 20203bc:	e0fffd17 	ldw	r3,-12(fp)
 20203c0:	180690fa 	slli	r3,r3,3
 20203c4:	10c5883a 	add	r2,r2,r3
 20203c8:	e0ffff17 	ldw	r3,-4(fp)
 20203cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 20203d0:	008080f4 	movhi	r2,515
 20203d4:	10bad704 	addi	r2,r2,-5284
 20203d8:	e0fffd17 	ldw	r3,-12(fp)
 20203dc:	180690fa 	slli	r3,r3,3
 20203e0:	10c5883a 	add	r2,r2,r3
 20203e4:	10800104 	addi	r2,r2,4
 20203e8:	e0fffe17 	ldw	r3,-8(fp)
 20203ec:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 20203f0:	e0bfff17 	ldw	r2,-4(fp)
 20203f4:	10001926 	beq	r2,zero,202045c <alt_irq_register+0xf4>
 20203f8:	e0bffd17 	ldw	r2,-12(fp)
 20203fc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020400:	0005303a 	rdctl	r2,status
 2020404:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020408:	e0fff717 	ldw	r3,-36(fp)
 202040c:	00bfff84 	movi	r2,-2
 2020410:	1884703a 	and	r2,r3,r2
 2020414:	1001703a 	wrctl	status,r2
  
  return context;
 2020418:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 202041c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2020420:	00c00044 	movi	r3,1
 2020424:	e0bff217 	ldw	r2,-56(fp)
 2020428:	1884983a 	sll	r2,r3,r2
 202042c:	1007883a 	mov	r3,r2
 2020430:	d0a7b217 	ldw	r2,-24888(gp)
 2020434:	1884b03a 	or	r2,r3,r2
 2020438:	d0a7b215 	stw	r2,-24888(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 202043c:	d0a7b217 	ldw	r2,-24888(gp)
 2020440:	100170fa 	wrctl	ienable,r2
 2020444:	e0bff817 	ldw	r2,-32(fp)
 2020448:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 202044c:	e0bff917 	ldw	r2,-28(fp)
 2020450:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2020454:	0005883a 	mov	r2,zero
 2020458:	00001906 	br	20204c0 <alt_irq_register+0x158>
 202045c:	e0bffd17 	ldw	r2,-12(fp)
 2020460:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020464:	0005303a 	rdctl	r2,status
 2020468:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 202046c:	e0fffa17 	ldw	r3,-24(fp)
 2020470:	00bfff84 	movi	r2,-2
 2020474:	1884703a 	and	r2,r3,r2
 2020478:	1001703a 	wrctl	status,r2
  
  return context;
 202047c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2020480:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2020484:	00c00044 	movi	r3,1
 2020488:	e0bff417 	ldw	r2,-48(fp)
 202048c:	1884983a 	sll	r2,r3,r2
 2020490:	0084303a 	nor	r2,zero,r2
 2020494:	1007883a 	mov	r3,r2
 2020498:	d0a7b217 	ldw	r2,-24888(gp)
 202049c:	1884703a 	and	r2,r3,r2
 20204a0:	d0a7b215 	stw	r2,-24888(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20204a4:	d0a7b217 	ldw	r2,-24888(gp)
 20204a8:	100170fa 	wrctl	ienable,r2
 20204ac:	e0bffb17 	ldw	r2,-20(fp)
 20204b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20204b4:	e0bffc17 	ldw	r2,-16(fp)
 20204b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20204bc:	0005883a 	mov	r2,zero
 20204c0:	e0bff115 	stw	r2,-60(fp)
 20204c4:	e0bff317 	ldw	r2,-52(fp)
 20204c8:	e0bff515 	stw	r2,-44(fp)
 20204cc:	e0bff517 	ldw	r2,-44(fp)
 20204d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 20204d4:	e0bff117 	ldw	r2,-60(fp)
}
 20204d8:	e037883a 	mov	sp,fp
 20204dc:	df000017 	ldw	fp,0(sp)
 20204e0:	dec00104 	addi	sp,sp,4
 20204e4:	f800283a 	ret

020204e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20204e8:	defffe04 	addi	sp,sp,-8
 20204ec:	dfc00115 	stw	ra,4(sp)
 20204f0:	df000015 	stw	fp,0(sp)
 20204f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20204f8:	d0a03917 	ldw	r2,-32540(gp)
 20204fc:	10000326 	beq	r2,zero,202050c <alt_get_errno+0x24>
 2020500:	d0a03917 	ldw	r2,-32540(gp)
 2020504:	103ee83a 	callr	r2
 2020508:	00000106 	br	2020510 <alt_get_errno+0x28>
 202050c:	d0a79504 	addi	r2,gp,-25004
}
 2020510:	e037883a 	mov	sp,fp
 2020514:	dfc00117 	ldw	ra,4(sp)
 2020518:	df000017 	ldw	fp,0(sp)
 202051c:	dec00204 	addi	sp,sp,8
 2020520:	f800283a 	ret

02020524 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2020524:	defffd04 	addi	sp,sp,-12
 2020528:	df000215 	stw	fp,8(sp)
 202052c:	df000204 	addi	fp,sp,8
 2020530:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2020534:	e0bfff17 	ldw	r2,-4(fp)
 2020538:	10800217 	ldw	r2,8(r2)
 202053c:	10d00034 	orhi	r3,r2,16384
 2020540:	e0bfff17 	ldw	r2,-4(fp)
 2020544:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2020548:	e03ffe15 	stw	zero,-8(fp)
 202054c:	00001d06 	br	20205c4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2020550:	008080b4 	movhi	r2,514
 2020554:	108a0704 	addi	r2,r2,10268
 2020558:	e0fffe17 	ldw	r3,-8(fp)
 202055c:	18c00324 	muli	r3,r3,12
 2020560:	10c5883a 	add	r2,r2,r3
 2020564:	10c00017 	ldw	r3,0(r2)
 2020568:	e0bfff17 	ldw	r2,-4(fp)
 202056c:	10800017 	ldw	r2,0(r2)
 2020570:	1880111e 	bne	r3,r2,20205b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2020574:	008080b4 	movhi	r2,514
 2020578:	108a0704 	addi	r2,r2,10268
 202057c:	e0fffe17 	ldw	r3,-8(fp)
 2020580:	18c00324 	muli	r3,r3,12
 2020584:	10c5883a 	add	r2,r2,r3
 2020588:	10800204 	addi	r2,r2,8
 202058c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2020590:	1000090e 	bge	r2,zero,20205b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2020594:	e0bffe17 	ldw	r2,-8(fp)
 2020598:	10c00324 	muli	r3,r2,12
 202059c:	008080b4 	movhi	r2,514
 20205a0:	108a0704 	addi	r2,r2,10268
 20205a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20205a8:	e0bfff17 	ldw	r2,-4(fp)
 20205ac:	18800226 	beq	r3,r2,20205b8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 20205b0:	00bffcc4 	movi	r2,-13
 20205b4:	00000806 	br	20205d8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20205b8:	e0bffe17 	ldw	r2,-8(fp)
 20205bc:	10800044 	addi	r2,r2,1
 20205c0:	e0bffe15 	stw	r2,-8(fp)
 20205c4:	d0a03817 	ldw	r2,-32544(gp)
 20205c8:	1007883a 	mov	r3,r2
 20205cc:	e0bffe17 	ldw	r2,-8(fp)
 20205d0:	18bfdf2e 	bgeu	r3,r2,2020550 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20205d4:	0005883a 	mov	r2,zero
}
 20205d8:	e037883a 	mov	sp,fp
 20205dc:	df000017 	ldw	fp,0(sp)
 20205e0:	dec00104 	addi	sp,sp,4
 20205e4:	f800283a 	ret

020205e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20205e8:	defff604 	addi	sp,sp,-40
 20205ec:	dfc00915 	stw	ra,36(sp)
 20205f0:	df000815 	stw	fp,32(sp)
 20205f4:	df000804 	addi	fp,sp,32
 20205f8:	e13ffd15 	stw	r4,-12(fp)
 20205fc:	e17ffe15 	stw	r5,-8(fp)
 2020600:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2020604:	00bfffc4 	movi	r2,-1
 2020608:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 202060c:	00bffb44 	movi	r2,-19
 2020610:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2020614:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2020618:	d1603604 	addi	r5,gp,-32552
 202061c:	e13ffd17 	ldw	r4,-12(fp)
 2020620:	20201640 	call	2020164 <alt_find_dev>
 2020624:	e0bff815 	stw	r2,-32(fp)
 2020628:	e0bff817 	ldw	r2,-32(fp)
 202062c:	1000051e 	bne	r2,zero,2020644 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2020630:	e13ffd17 	ldw	r4,-12(fp)
 2020634:	2020c5c0 	call	2020c5c <alt_find_file>
 2020638:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 202063c:	00800044 	movi	r2,1
 2020640:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2020644:	e0bff817 	ldw	r2,-32(fp)
 2020648:	10002926 	beq	r2,zero,20206f0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 202064c:	e13ff817 	ldw	r4,-32(fp)
 2020650:	2020d640 	call	2020d64 <alt_get_fd>
 2020654:	e0bff915 	stw	r2,-28(fp)
 2020658:	e0bff917 	ldw	r2,-28(fp)
 202065c:	1000030e 	bge	r2,zero,202066c <open+0x84>
    {
      status = index;
 2020660:	e0bff917 	ldw	r2,-28(fp)
 2020664:	e0bffa15 	stw	r2,-24(fp)
 2020668:	00002306 	br	20206f8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 202066c:	e0bff917 	ldw	r2,-28(fp)
 2020670:	10c00324 	muli	r3,r2,12
 2020674:	008080b4 	movhi	r2,514
 2020678:	108a0704 	addi	r2,r2,10268
 202067c:	1885883a 	add	r2,r3,r2
 2020680:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2020684:	e0fffe17 	ldw	r3,-8(fp)
 2020688:	00900034 	movhi	r2,16384
 202068c:	10bfffc4 	addi	r2,r2,-1
 2020690:	1886703a 	and	r3,r3,r2
 2020694:	e0bffc17 	ldw	r2,-16(fp)
 2020698:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 202069c:	e0bffb17 	ldw	r2,-20(fp)
 20206a0:	1000051e 	bne	r2,zero,20206b8 <open+0xd0>
 20206a4:	e13ffc17 	ldw	r4,-16(fp)
 20206a8:	20205240 	call	2020524 <alt_file_locked>
 20206ac:	e0bffa15 	stw	r2,-24(fp)
 20206b0:	e0bffa17 	ldw	r2,-24(fp)
 20206b4:	10001016 	blt	r2,zero,20206f8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 20206b8:	e0bff817 	ldw	r2,-32(fp)
 20206bc:	10800317 	ldw	r2,12(r2)
 20206c0:	10000826 	beq	r2,zero,20206e4 <open+0xfc>
 20206c4:	e0bff817 	ldw	r2,-32(fp)
 20206c8:	10800317 	ldw	r2,12(r2)
 20206cc:	e1ffff17 	ldw	r7,-4(fp)
 20206d0:	e1bffe17 	ldw	r6,-8(fp)
 20206d4:	e17ffd17 	ldw	r5,-12(fp)
 20206d8:	e13ffc17 	ldw	r4,-16(fp)
 20206dc:	103ee83a 	callr	r2
 20206e0:	00000106 	br	20206e8 <open+0x100>
 20206e4:	0005883a 	mov	r2,zero
 20206e8:	e0bffa15 	stw	r2,-24(fp)
 20206ec:	00000206 	br	20206f8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 20206f0:	00bffb44 	movi	r2,-19
 20206f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 20206f8:	e0bffa17 	ldw	r2,-24(fp)
 20206fc:	1000090e 	bge	r2,zero,2020724 <open+0x13c>
  {
    alt_release_fd (index);  
 2020700:	e13ff917 	ldw	r4,-28(fp)
 2020704:	20163d00 	call	20163d0 <alt_release_fd>
    ALT_ERRNO = -status;
 2020708:	20204e80 	call	20204e8 <alt_get_errno>
 202070c:	1007883a 	mov	r3,r2
 2020710:	e0bffa17 	ldw	r2,-24(fp)
 2020714:	0085c83a 	sub	r2,zero,r2
 2020718:	18800015 	stw	r2,0(r3)
    return -1;
 202071c:	00bfffc4 	movi	r2,-1
 2020720:	00000106 	br	2020728 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2020724:	e0bff917 	ldw	r2,-28(fp)
}
 2020728:	e037883a 	mov	sp,fp
 202072c:	dfc00117 	ldw	ra,4(sp)
 2020730:	df000017 	ldw	fp,0(sp)
 2020734:	dec00204 	addi	sp,sp,8
 2020738:	f800283a 	ret

0202073c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 202073c:	defffa04 	addi	sp,sp,-24
 2020740:	df000515 	stw	fp,20(sp)
 2020744:	df000504 	addi	fp,sp,20
 2020748:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 202074c:	0005303a 	rdctl	r2,status
 2020750:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020754:	e0fffc17 	ldw	r3,-16(fp)
 2020758:	00bfff84 	movi	r2,-2
 202075c:	1884703a 	and	r2,r3,r2
 2020760:	1001703a 	wrctl	status,r2
  
  return context;
 2020764:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2020768:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 202076c:	e0bfff17 	ldw	r2,-4(fp)
 2020770:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2020774:	e0bffd17 	ldw	r2,-12(fp)
 2020778:	10800017 	ldw	r2,0(r2)
 202077c:	e0fffd17 	ldw	r3,-12(fp)
 2020780:	18c00117 	ldw	r3,4(r3)
 2020784:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2020788:	e0bffd17 	ldw	r2,-12(fp)
 202078c:	10800117 	ldw	r2,4(r2)
 2020790:	e0fffd17 	ldw	r3,-12(fp)
 2020794:	18c00017 	ldw	r3,0(r3)
 2020798:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 202079c:	e0bffd17 	ldw	r2,-12(fp)
 20207a0:	e0fffd17 	ldw	r3,-12(fp)
 20207a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20207a8:	e0bffd17 	ldw	r2,-12(fp)
 20207ac:	e0fffd17 	ldw	r3,-12(fp)
 20207b0:	10c00015 	stw	r3,0(r2)
 20207b4:	e0bffb17 	ldw	r2,-20(fp)
 20207b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20207bc:	e0bffe17 	ldw	r2,-8(fp)
 20207c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20207c4:	0001883a 	nop
 20207c8:	e037883a 	mov	sp,fp
 20207cc:	df000017 	ldw	fp,0(sp)
 20207d0:	dec00104 	addi	sp,sp,4
 20207d4:	f800283a 	ret

020207d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20207d8:	defffb04 	addi	sp,sp,-20
 20207dc:	dfc00415 	stw	ra,16(sp)
 20207e0:	df000315 	stw	fp,12(sp)
 20207e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20207e8:	d0a05b17 	ldw	r2,-32404(gp)
 20207ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20207f0:	d0a7b417 	ldw	r2,-24880(gp)
 20207f4:	10800044 	addi	r2,r2,1
 20207f8:	d0a7b415 	stw	r2,-24880(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20207fc:	00002e06 	br	20208b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2020800:	e0bffd17 	ldw	r2,-12(fp)
 2020804:	10800017 	ldw	r2,0(r2)
 2020808:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 202080c:	e0bffd17 	ldw	r2,-12(fp)
 2020810:	10800403 	ldbu	r2,16(r2)
 2020814:	10803fcc 	andi	r2,r2,255
 2020818:	10000426 	beq	r2,zero,202082c <alt_tick+0x54>
 202081c:	d0a7b417 	ldw	r2,-24880(gp)
 2020820:	1000021e 	bne	r2,zero,202082c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2020824:	e0bffd17 	ldw	r2,-12(fp)
 2020828:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 202082c:	e0bffd17 	ldw	r2,-12(fp)
 2020830:	10800217 	ldw	r2,8(r2)
 2020834:	d0e7b417 	ldw	r3,-24880(gp)
 2020838:	18801d36 	bltu	r3,r2,20208b0 <alt_tick+0xd8>
 202083c:	e0bffd17 	ldw	r2,-12(fp)
 2020840:	10800403 	ldbu	r2,16(r2)
 2020844:	10803fcc 	andi	r2,r2,255
 2020848:	1000191e 	bne	r2,zero,20208b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 202084c:	e0bffd17 	ldw	r2,-12(fp)
 2020850:	10800317 	ldw	r2,12(r2)
 2020854:	e0fffd17 	ldw	r3,-12(fp)
 2020858:	18c00517 	ldw	r3,20(r3)
 202085c:	1809883a 	mov	r4,r3
 2020860:	103ee83a 	callr	r2
 2020864:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2020868:	e0bfff17 	ldw	r2,-4(fp)
 202086c:	1000031e 	bne	r2,zero,202087c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2020870:	e13ffd17 	ldw	r4,-12(fp)
 2020874:	202073c0 	call	202073c <alt_alarm_stop>
 2020878:	00000d06 	br	20208b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 202087c:	e0bffd17 	ldw	r2,-12(fp)
 2020880:	10c00217 	ldw	r3,8(r2)
 2020884:	e0bfff17 	ldw	r2,-4(fp)
 2020888:	1887883a 	add	r3,r3,r2
 202088c:	e0bffd17 	ldw	r2,-12(fp)
 2020890:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2020894:	e0bffd17 	ldw	r2,-12(fp)
 2020898:	10c00217 	ldw	r3,8(r2)
 202089c:	d0a7b417 	ldw	r2,-24880(gp)
 20208a0:	1880032e 	bgeu	r3,r2,20208b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20208a4:	e0bffd17 	ldw	r2,-12(fp)
 20208a8:	00c00044 	movi	r3,1
 20208ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20208b0:	e0bffe17 	ldw	r2,-8(fp)
 20208b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20208b8:	e0fffd17 	ldw	r3,-12(fp)
 20208bc:	d0a05b04 	addi	r2,gp,-32404
 20208c0:	18bfcf1e 	bne	r3,r2,2020800 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20208c4:	20175bc0 	call	20175bc <OSTimeTick>
}
 20208c8:	0001883a 	nop
 20208cc:	e037883a 	mov	sp,fp
 20208d0:	dfc00117 	ldw	ra,4(sp)
 20208d4:	df000017 	ldw	fp,0(sp)
 20208d8:	dec00204 	addi	sp,sp,8
 20208dc:	f800283a 	ret

020208e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 20208e0:	deffff04 	addi	sp,sp,-4
 20208e4:	df000015 	stw	fp,0(sp)
 20208e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 20208ec:	000170fa 	wrctl	ienable,zero
}
 20208f0:	0001883a 	nop
 20208f4:	e037883a 	mov	sp,fp
 20208f8:	df000017 	ldw	fp,0(sp)
 20208fc:	dec00104 	addi	sp,sp,4
 2020900:	f800283a 	ret

02020904 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 2020904:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 2020908:	d0e02e17 	ldw	r3,-32584(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 202090c:	d127ad17 	ldw	r4,-24908(gp)

      stw ra,  0(sp)
 2020910:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 2020914:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 2020918:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 202091c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 2020920:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 2020924:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 2020928:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 202092c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 2020930:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 2020934:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 2020938:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 202093c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2020940:	2020b780 	call	2020b78 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 2020944:	d127a817 	ldw	r4,-24928(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 2020948:	d167a007 	ldb	r5,-24960(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 202094c:	d127ad15 	stw	r4,-24908(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 2020950:	d167a045 	stb	r5,-24959(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 2020954:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 2020958:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 202095c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 2020960:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 2020964:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 2020968:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 202096c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 2020970:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 2020974:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 2020978:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 202097c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 2020980:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 2020984:	d0e02e15 	stw	r3,-32584(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 2020988:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 202098c:	f800283a 	ret

02020990 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 2020990:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 2020994:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 2020998:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 202099c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 20209a0:	2020b780 	call	2020b78 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 20209a4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 20209a8:	d4a79e45 	stb	r18,-24967(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 20209ac:	003fe506 	br	2020944 <OSCtxSw+0x40>

020209b0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 20209b0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 20209b4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 20209b8:	10800054 	ori	r2,r2,1
      wrctl status, r2
 20209bc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 20209c0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 20209c4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 20209c8:	dec00204 	addi	sp,sp,8

      callr r2
 20209cc:	103ee83a 	callr	r2

      nop
 20209d0:	0001883a 	nop

020209d4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 20209d4:	defff704 	addi	sp,sp,-36
 20209d8:	dfc00815 	stw	ra,32(sp)
 20209dc:	df000715 	stw	fp,28(sp)
 20209e0:	df000704 	addi	fp,sp,28
 20209e4:	e13ffc15 	stw	r4,-16(fp)
 20209e8:	e17ffd15 	stw	r5,-12(fp)
 20209ec:	e1bffe15 	stw	r6,-8(fp)
 20209f0:	3805883a 	mov	r2,r7
 20209f4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 20209f8:	e0fffe17 	ldw	r3,-8(fp)
 20209fc:	00bfff04 	movi	r2,-4
 2020a00:	1884703a 	and	r2,r3,r2
 2020a04:	10bef704 	addi	r2,r2,-1060
 2020a08:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 2020a0c:	01810904 	movi	r6,1060
 2020a10:	000b883a 	mov	r5,zero
 2020a14:	e13ff917 	ldw	r4,-28(fp)
 2020a18:	20078500 	call	2007850 <memset>
 2020a1c:	e0bff917 	ldw	r2,-28(fp)
 2020a20:	10c0bb04 	addi	r3,r2,748
 2020a24:	e0bff917 	ldw	r2,-28(fp)
 2020a28:	10c00115 	stw	r3,4(r2)
 2020a2c:	e0bff917 	ldw	r2,-28(fp)
 2020a30:	10c0d504 	addi	r3,r2,852
 2020a34:	e0bff917 	ldw	r2,-28(fp)
 2020a38:	10c00215 	stw	r3,8(r2)
 2020a3c:	e0bff917 	ldw	r2,-28(fp)
 2020a40:	10c0ef04 	addi	r3,r2,956
 2020a44:	e0bff917 	ldw	r2,-28(fp)
 2020a48:	10c00315 	stw	r3,12(r2)
 2020a4c:	e0fff917 	ldw	r3,-28(fp)
 2020a50:	008080b4 	movhi	r2,514
 2020a54:	1087c704 	addi	r2,r2,7964
 2020a58:	18800d15 	stw	r2,52(r3)
 2020a5c:	e0bff917 	ldw	r2,-28(fp)
 2020a60:	00c00044 	movi	r3,1
 2020a64:	10c02915 	stw	r3,164(r2)
 2020a68:	10002a15 	stw	zero,168(r2)
 2020a6c:	e0bff917 	ldw	r2,-28(fp)
 2020a70:	00ccc384 	movi	r3,13070
 2020a74:	10c02b0d 	sth	r3,172(r2)
 2020a78:	e0bff917 	ldw	r2,-28(fp)
 2020a7c:	00eaf344 	movi	r3,-21555
 2020a80:	10c02b8d 	sth	r3,174(r2)
 2020a84:	e0bff917 	ldw	r2,-28(fp)
 2020a88:	00c48d04 	movi	r3,4660
 2020a8c:	10c02c0d 	sth	r3,176(r2)
 2020a90:	e0bff917 	ldw	r2,-28(fp)
 2020a94:	00f99b44 	movi	r3,-6547
 2020a98:	10c02c8d 	sth	r3,178(r2)
 2020a9c:	e0bff917 	ldw	r2,-28(fp)
 2020aa0:	00f7bb04 	movi	r3,-8468
 2020aa4:	10c02d0d 	sth	r3,180(r2)
 2020aa8:	e0bff917 	ldw	r2,-28(fp)
 2020aac:	00c00144 	movi	r3,5
 2020ab0:	10c02d8d 	sth	r3,182(r2)
 2020ab4:	e0bff917 	ldw	r2,-28(fp)
 2020ab8:	00c002c4 	movi	r3,11
 2020abc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 2020ac0:	e0bff917 	ldw	r2,-28(fp)
 2020ac4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 2020ac8:	e0bffa17 	ldw	r2,-24(fp)
 2020acc:	10bff304 	addi	r2,r2,-52
 2020ad0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 2020ad4:	e0bffb17 	ldw	r2,-20(fp)
 2020ad8:	10800c04 	addi	r2,r2,48
 2020adc:	e0fffc17 	ldw	r3,-16(fp)
 2020ae0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 2020ae4:	e0bffb17 	ldw	r2,-20(fp)
 2020ae8:	10800b04 	addi	r2,r2,44
 2020aec:	e0fffd17 	ldw	r3,-12(fp)
 2020af0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 2020af4:	e0bffb17 	ldw	r2,-20(fp)
 2020af8:	10800a04 	addi	r2,r2,40
 2020afc:	e0fff917 	ldw	r3,-28(fp)
 2020b00:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 2020b04:	008080b4 	movhi	r2,514
 2020b08:	10826c04 	addi	r2,r2,2480
 2020b0c:	10c00104 	addi	r3,r2,4
 2020b10:	e0bffb17 	ldw	r2,-20(fp)
 2020b14:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 2020b18:	e0bffb17 	ldw	r2,-20(fp)
}
 2020b1c:	e037883a 	mov	sp,fp
 2020b20:	dfc00117 	ldw	ra,4(sp)
 2020b24:	df000017 	ldw	fp,0(sp)
 2020b28:	dec00204 	addi	sp,sp,8
 2020b2c:	f800283a 	ret

02020b30 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 2020b30:	defffe04 	addi	sp,sp,-8
 2020b34:	df000115 	stw	fp,4(sp)
 2020b38:	df000104 	addi	fp,sp,4
 2020b3c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 2020b40:	0001883a 	nop
 2020b44:	e037883a 	mov	sp,fp
 2020b48:	df000017 	ldw	fp,0(sp)
 2020b4c:	dec00104 	addi	sp,sp,4
 2020b50:	f800283a 	ret

02020b54 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 2020b54:	defffe04 	addi	sp,sp,-8
 2020b58:	df000115 	stw	fp,4(sp)
 2020b5c:	df000104 	addi	fp,sp,4
 2020b60:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 2020b64:	0001883a 	nop
 2020b68:	e037883a 	mov	sp,fp
 2020b6c:	df000017 	ldw	fp,0(sp)
 2020b70:	dec00104 	addi	sp,sp,4
 2020b74:	f800283a 	ret

02020b78 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 2020b78:	deffff04 	addi	sp,sp,-4
 2020b7c:	df000015 	stw	fp,0(sp)
 2020b80:	d839883a 	mov	fp,sp
}
 2020b84:	0001883a 	nop
 2020b88:	e037883a 	mov	sp,fp
 2020b8c:	df000017 	ldw	fp,0(sp)
 2020b90:	dec00104 	addi	sp,sp,4
 2020b94:	f800283a 	ret

02020b98 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 2020b98:	deffff04 	addi	sp,sp,-4
 2020b9c:	df000015 	stw	fp,0(sp)
 2020ba0:	d839883a 	mov	fp,sp
}
 2020ba4:	0001883a 	nop
 2020ba8:	e037883a 	mov	sp,fp
 2020bac:	df000017 	ldw	fp,0(sp)
 2020bb0:	dec00104 	addi	sp,sp,4
 2020bb4:	f800283a 	ret

02020bb8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 2020bb8:	deffff04 	addi	sp,sp,-4
 2020bbc:	df000015 	stw	fp,0(sp)
 2020bc0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 2020bc4:	0001883a 	nop
 2020bc8:	e037883a 	mov	sp,fp
 2020bcc:	df000017 	ldw	fp,0(sp)
 2020bd0:	dec00104 	addi	sp,sp,4
 2020bd4:	f800283a 	ret

02020bd8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 2020bd8:	deffff04 	addi	sp,sp,-4
 2020bdc:	df000015 	stw	fp,0(sp)
 2020be0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 2020be4:	0001883a 	nop
 2020be8:	e037883a 	mov	sp,fp
 2020bec:	df000017 	ldw	fp,0(sp)
 2020bf0:	dec00104 	addi	sp,sp,4
 2020bf4:	f800283a 	ret

02020bf8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 2020bf8:	deffff04 	addi	sp,sp,-4
 2020bfc:	df000015 	stw	fp,0(sp)
 2020c00:	d839883a 	mov	fp,sp
}
 2020c04:	0001883a 	nop
 2020c08:	e037883a 	mov	sp,fp
 2020c0c:	df000017 	ldw	fp,0(sp)
 2020c10:	dec00104 	addi	sp,sp,4
 2020c14:	f800283a 	ret

02020c18 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 2020c18:	deffff04 	addi	sp,sp,-4
 2020c1c:	df000015 	stw	fp,0(sp)
 2020c20:	d839883a 	mov	fp,sp
}
 2020c24:	0001883a 	nop
 2020c28:	e037883a 	mov	sp,fp
 2020c2c:	df000017 	ldw	fp,0(sp)
 2020c30:	dec00104 	addi	sp,sp,4
 2020c34:	f800283a 	ret

02020c38 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 2020c38:	defffe04 	addi	sp,sp,-8
 2020c3c:	df000115 	stw	fp,4(sp)
 2020c40:	df000104 	addi	fp,sp,4
 2020c44:	e13fff15 	stw	r4,-4(fp)
}
 2020c48:	0001883a 	nop
 2020c4c:	e037883a 	mov	sp,fp
 2020c50:	df000017 	ldw	fp,0(sp)
 2020c54:	dec00104 	addi	sp,sp,4
 2020c58:	f800283a 	ret

02020c5c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2020c5c:	defffb04 	addi	sp,sp,-20
 2020c60:	dfc00415 	stw	ra,16(sp)
 2020c64:	df000315 	stw	fp,12(sp)
 2020c68:	df000304 	addi	fp,sp,12
 2020c6c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2020c70:	d0a03417 	ldw	r2,-32560(gp)
 2020c74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2020c78:	00003106 	br	2020d40 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2020c7c:	e0bffd17 	ldw	r2,-12(fp)
 2020c80:	10800217 	ldw	r2,8(r2)
 2020c84:	1009883a 	mov	r4,r2
 2020c88:	2007c300 	call	2007c30 <strlen>
 2020c8c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2020c90:	e0bffd17 	ldw	r2,-12(fp)
 2020c94:	10c00217 	ldw	r3,8(r2)
 2020c98:	e0bffe17 	ldw	r2,-8(fp)
 2020c9c:	10bfffc4 	addi	r2,r2,-1
 2020ca0:	1885883a 	add	r2,r3,r2
 2020ca4:	10800003 	ldbu	r2,0(r2)
 2020ca8:	10803fcc 	andi	r2,r2,255
 2020cac:	1080201c 	xori	r2,r2,128
 2020cb0:	10bfe004 	addi	r2,r2,-128
 2020cb4:	10800bd8 	cmpnei	r2,r2,47
 2020cb8:	1000031e 	bne	r2,zero,2020cc8 <alt_find_file+0x6c>
    {
      len -= 1;
 2020cbc:	e0bffe17 	ldw	r2,-8(fp)
 2020cc0:	10bfffc4 	addi	r2,r2,-1
 2020cc4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2020cc8:	e0bffe17 	ldw	r2,-8(fp)
 2020ccc:	e0ffff17 	ldw	r3,-4(fp)
 2020cd0:	1885883a 	add	r2,r3,r2
 2020cd4:	10800003 	ldbu	r2,0(r2)
 2020cd8:	10803fcc 	andi	r2,r2,255
 2020cdc:	1080201c 	xori	r2,r2,128
 2020ce0:	10bfe004 	addi	r2,r2,-128
 2020ce4:	10800be0 	cmpeqi	r2,r2,47
 2020ce8:	1000081e 	bne	r2,zero,2020d0c <alt_find_file+0xb0>
 2020cec:	e0bffe17 	ldw	r2,-8(fp)
 2020cf0:	e0ffff17 	ldw	r3,-4(fp)
 2020cf4:	1885883a 	add	r2,r3,r2
 2020cf8:	10800003 	ldbu	r2,0(r2)
 2020cfc:	10803fcc 	andi	r2,r2,255
 2020d00:	1080201c 	xori	r2,r2,128
 2020d04:	10bfe004 	addi	r2,r2,-128
 2020d08:	10000a1e 	bne	r2,zero,2020d34 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2020d0c:	e0bffd17 	ldw	r2,-12(fp)
 2020d10:	10800217 	ldw	r2,8(r2)
 2020d14:	e0fffe17 	ldw	r3,-8(fp)
 2020d18:	180d883a 	mov	r6,r3
 2020d1c:	e17fff17 	ldw	r5,-4(fp)
 2020d20:	1009883a 	mov	r4,r2
 2020d24:	2020ff00 	call	2020ff0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2020d28:	1000021e 	bne	r2,zero,2020d34 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2020d2c:	e0bffd17 	ldw	r2,-12(fp)
 2020d30:	00000706 	br	2020d50 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2020d34:	e0bffd17 	ldw	r2,-12(fp)
 2020d38:	10800017 	ldw	r2,0(r2)
 2020d3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2020d40:	e0fffd17 	ldw	r3,-12(fp)
 2020d44:	d0a03404 	addi	r2,gp,-32560
 2020d48:	18bfcc1e 	bne	r3,r2,2020c7c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2020d4c:	0005883a 	mov	r2,zero
}
 2020d50:	e037883a 	mov	sp,fp
 2020d54:	dfc00117 	ldw	ra,4(sp)
 2020d58:	df000017 	ldw	fp,0(sp)
 2020d5c:	dec00204 	addi	sp,sp,8
 2020d60:	f800283a 	ret

02020d64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2020d64:	defff904 	addi	sp,sp,-28
 2020d68:	dfc00615 	stw	ra,24(sp)
 2020d6c:	df000515 	stw	fp,20(sp)
 2020d70:	df000504 	addi	fp,sp,20
 2020d74:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2020d78:	00bffa04 	movi	r2,-24
 2020d7c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 2020d80:	d0a79617 	ldw	r2,-25000(gp)
 2020d84:	e0bffd15 	stw	r2,-12(fp)
 2020d88:	e03ffe0d 	sth	zero,-8(fp)
 2020d8c:	e0bffe0b 	ldhu	r2,-8(fp)
 2020d90:	e0fffe84 	addi	r3,fp,-6
 2020d94:	180d883a 	mov	r6,r3
 2020d98:	100b883a 	mov	r5,r2
 2020d9c:	e13ffd17 	ldw	r4,-12(fp)
 2020da0:	201c8c80 	call	201c8c8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2020da4:	e03ffb15 	stw	zero,-20(fp)
 2020da8:	00001906 	br	2020e10 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 2020dac:	008080b4 	movhi	r2,514
 2020db0:	108a0704 	addi	r2,r2,10268
 2020db4:	e0fffb17 	ldw	r3,-20(fp)
 2020db8:	18c00324 	muli	r3,r3,12
 2020dbc:	10c5883a 	add	r2,r2,r3
 2020dc0:	10800017 	ldw	r2,0(r2)
 2020dc4:	10000f1e 	bne	r2,zero,2020e04 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 2020dc8:	008080b4 	movhi	r2,514
 2020dcc:	108a0704 	addi	r2,r2,10268
 2020dd0:	e0fffb17 	ldw	r3,-20(fp)
 2020dd4:	18c00324 	muli	r3,r3,12
 2020dd8:	10c5883a 	add	r2,r2,r3
 2020ddc:	e0ffff17 	ldw	r3,-4(fp)
 2020de0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2020de4:	d0e03817 	ldw	r3,-32544(gp)
 2020de8:	e0bffb17 	ldw	r2,-20(fp)
 2020dec:	1880020e 	bge	r3,r2,2020df8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 2020df0:	e0bffb17 	ldw	r2,-20(fp)
 2020df4:	d0a03815 	stw	r2,-32544(gp)
      }
      rc = i;
 2020df8:	e0bffb17 	ldw	r2,-20(fp)
 2020dfc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 2020e00:	00000606 	br	2020e1c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2020e04:	e0bffb17 	ldw	r2,-20(fp)
 2020e08:	10800044 	addi	r2,r2,1
 2020e0c:	e0bffb15 	stw	r2,-20(fp)
 2020e10:	e0bffb17 	ldw	r2,-20(fp)
 2020e14:	10800810 	cmplti	r2,r2,32
 2020e18:	103fe41e 	bne	r2,zero,2020dac <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 2020e1c:	d0a79617 	ldw	r2,-25000(gp)
 2020e20:	1009883a 	mov	r4,r2
 2020e24:	201cc400 	call	201cc40 <OSSemPost>

  return rc;
 2020e28:	e0bffc17 	ldw	r2,-16(fp)
}
 2020e2c:	e037883a 	mov	sp,fp
 2020e30:	dfc00117 	ldw	ra,4(sp)
 2020e34:	df000017 	ldw	fp,0(sp)
 2020e38:	dec00204 	addi	sp,sp,8
 2020e3c:	f800283a 	ret

02020e40 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2020e40:	defffb04 	addi	sp,sp,-20
 2020e44:	df000415 	stw	fp,16(sp)
 2020e48:	df000404 	addi	fp,sp,16
 2020e4c:	e13ffe15 	stw	r4,-8(fp)
 2020e50:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2020e54:	e0bfff17 	ldw	r2,-4(fp)
 2020e58:	10840070 	cmpltui	r2,r2,4097
 2020e5c:	1000021e 	bne	r2,zero,2020e68 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2020e60:	00840004 	movi	r2,4096
 2020e64:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2020e68:	e0fffe17 	ldw	r3,-8(fp)
 2020e6c:	e0bfff17 	ldw	r2,-4(fp)
 2020e70:	1885883a 	add	r2,r3,r2
 2020e74:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2020e78:	e0bffe17 	ldw	r2,-8(fp)
 2020e7c:	e0bffc15 	stw	r2,-16(fp)
 2020e80:	00000506 	br	2020e98 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2020e84:	e0bffc17 	ldw	r2,-16(fp)
 2020e88:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2020e8c:	e0bffc17 	ldw	r2,-16(fp)
 2020e90:	10800804 	addi	r2,r2,32
 2020e94:	e0bffc15 	stw	r2,-16(fp)
 2020e98:	e0fffc17 	ldw	r3,-16(fp)
 2020e9c:	e0bffd17 	ldw	r2,-12(fp)
 2020ea0:	18bff836 	bltu	r3,r2,2020e84 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 2020ea4:	e0bffe17 	ldw	r2,-8(fp)
 2020ea8:	108007cc 	andi	r2,r2,31
 2020eac:	10000226 	beq	r2,zero,2020eb8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 2020eb0:	e0bffc17 	ldw	r2,-16(fp)
 2020eb4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 2020eb8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2020ebc:	0001883a 	nop
 2020ec0:	e037883a 	mov	sp,fp
 2020ec4:	df000017 	ldw	fp,0(sp)
 2020ec8:	dec00104 	addi	sp,sp,4
 2020ecc:	f800283a 	ret

02020ed0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2020ed0:	defffe04 	addi	sp,sp,-8
 2020ed4:	df000115 	stw	fp,4(sp)
 2020ed8:	df000104 	addi	fp,sp,4
 2020edc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2020ee0:	e0bfff17 	ldw	r2,-4(fp)
 2020ee4:	10bffe84 	addi	r2,r2,-6
 2020ee8:	10c00428 	cmpgeui	r3,r2,16
 2020eec:	18001a1e 	bne	r3,zero,2020f58 <alt_exception_cause_generated_bad_addr+0x88>
 2020ef0:	100690ba 	slli	r3,r2,2
 2020ef4:	008080b4 	movhi	r2,514
 2020ef8:	1083c204 	addi	r2,r2,3848
 2020efc:	1885883a 	add	r2,r3,r2
 2020f00:	10800017 	ldw	r2,0(r2)
 2020f04:	1000683a 	jmp	r2
 2020f08:	02020f48 	cmpgei	r8,zero,2109
 2020f0c:	02020f48 	cmpgei	r8,zero,2109
 2020f10:	02020f58 	cmpnei	r8,zero,2109
 2020f14:	02020f58 	cmpnei	r8,zero,2109
 2020f18:	02020f58 	cmpnei	r8,zero,2109
 2020f1c:	02020f48 	cmpgei	r8,zero,2109
 2020f20:	02020f50 	cmplti	r8,zero,2109
 2020f24:	02020f58 	cmpnei	r8,zero,2109
 2020f28:	02020f48 	cmpgei	r8,zero,2109
 2020f2c:	02020f48 	cmpgei	r8,zero,2109
 2020f30:	02020f58 	cmpnei	r8,zero,2109
 2020f34:	02020f48 	cmpgei	r8,zero,2109
 2020f38:	02020f50 	cmplti	r8,zero,2109
 2020f3c:	02020f58 	cmpnei	r8,zero,2109
 2020f40:	02020f58 	cmpnei	r8,zero,2109
 2020f44:	02020f48 	cmpgei	r8,zero,2109
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2020f48:	00800044 	movi	r2,1
 2020f4c:	00000306 	br	2020f5c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2020f50:	0005883a 	mov	r2,zero
 2020f54:	00000106 	br	2020f5c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2020f58:	0005883a 	mov	r2,zero
  }
}
 2020f5c:	e037883a 	mov	sp,fp
 2020f60:	df000017 	ldw	fp,0(sp)
 2020f64:	dec00104 	addi	sp,sp,4
 2020f68:	f800283a 	ret

02020f6c <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 2020f6c:	defffd04 	addi	sp,sp,-12
 2020f70:	dfc00215 	stw	ra,8(sp)
 2020f74:	df000115 	stw	fp,4(sp)
 2020f78:	df000104 	addi	fp,sp,4
 2020f7c:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 2020f80:	000f883a 	mov	r7,zero
 2020f84:	000d883a 	mov	r6,zero
 2020f88:	e17fff17 	ldw	r5,-4(fp)
 2020f8c:	0009883a 	mov	r4,zero
 2020f90:	20211240 	call	2021124 <__register_exitproc>
}
 2020f94:	e037883a 	mov	sp,fp
 2020f98:	dfc00117 	ldw	ra,4(sp)
 2020f9c:	df000017 	ldw	fp,0(sp)
 2020fa0:	dec00204 	addi	sp,sp,8
 2020fa4:	f800283a 	ret

02020fa8 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 2020fa8:	defffd04 	addi	sp,sp,-12
 2020fac:	dfc00215 	stw	ra,8(sp)
 2020fb0:	df000115 	stw	fp,4(sp)
 2020fb4:	df000104 	addi	fp,sp,4
 2020fb8:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 2020fbc:	000b883a 	mov	r5,zero
 2020fc0:	e13fff17 	ldw	r4,-4(fp)
 2020fc4:	20212940 	call	2021294 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 2020fc8:	d0a02f17 	ldw	r2,-32580(gp)
 2020fcc:	10800f17 	ldw	r2,60(r2)
 2020fd0:	10000526 	beq	r2,zero,2020fe8 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 2020fd4:	d0a02f17 	ldw	r2,-32580(gp)
 2020fd8:	10800f17 	ldw	r2,60(r2)
 2020fdc:	d0e02f17 	ldw	r3,-32580(gp)
 2020fe0:	1809883a 	mov	r4,r3
 2020fe4:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 2020fe8:	e13fff17 	ldw	r4,-4(fp)
 2020fec:	20214800 	call	2021480 <_exit>

02020ff0 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 2020ff0:	defff804 	addi	sp,sp,-32
 2020ff4:	df000715 	stw	fp,28(sp)
 2020ff8:	df000704 	addi	fp,sp,28
 2020ffc:	e13ffd15 	stw	r4,-12(fp)
 2021000:	e17ffe15 	stw	r5,-8(fp)
 2021004:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 2021008:	e0bffd17 	ldw	r2,-12(fp)
 202100c:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 2021010:	e0bffe17 	ldw	r2,-8(fp)
 2021014:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 2021018:	e0bfff17 	ldw	r2,-4(fp)
 202101c:	10800130 	cmpltui	r2,r2,4
 2021020:	1000371e 	bne	r2,zero,2021100 <memcmp+0x110>
 2021024:	e0fff917 	ldw	r3,-28(fp)
 2021028:	e0bffa17 	ldw	r2,-24(fp)
 202102c:	1884b03a 	or	r2,r3,r2
 2021030:	108000cc 	andi	r2,r2,3
 2021034:	1000321e 	bne	r2,zero,2021100 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 2021038:	e0bff917 	ldw	r2,-28(fp)
 202103c:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 2021040:	e0bffa17 	ldw	r2,-24(fp)
 2021044:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 2021048:	00000e06 	br	2021084 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 202104c:	e0bffb17 	ldw	r2,-20(fp)
 2021050:	10c00017 	ldw	r3,0(r2)
 2021054:	e0bffc17 	ldw	r2,-16(fp)
 2021058:	10800017 	ldw	r2,0(r2)
 202105c:	18800d1e 	bne	r3,r2,2021094 <memcmp+0xa4>
   	    break;
          a1++;
 2021060:	e0bffb17 	ldw	r2,-20(fp)
 2021064:	10800104 	addi	r2,r2,4
 2021068:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 202106c:	e0bffc17 	ldw	r2,-16(fp)
 2021070:	10800104 	addi	r2,r2,4
 2021074:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 2021078:	e0bfff17 	ldw	r2,-4(fp)
 202107c:	10bfff04 	addi	r2,r2,-4
 2021080:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 2021084:	e0bfff17 	ldw	r2,-4(fp)
 2021088:	10800128 	cmpgeui	r2,r2,4
 202108c:	103fef1e 	bne	r2,zero,202104c <memcmp+0x5c>
 2021090:	00000106 	br	2021098 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 2021094:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 2021098:	e0bffb17 	ldw	r2,-20(fp)
 202109c:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 20210a0:	e0bffc17 	ldw	r2,-16(fp)
 20210a4:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 20210a8:	00001506 	br	2021100 <memcmp+0x110>
    {
      if (*s1 != *s2)
 20210ac:	e0bff917 	ldw	r2,-28(fp)
 20210b0:	10c00003 	ldbu	r3,0(r2)
 20210b4:	e0bffa17 	ldw	r2,-24(fp)
 20210b8:	10800003 	ldbu	r2,0(r2)
 20210bc:	18c03fcc 	andi	r3,r3,255
 20210c0:	10803fcc 	andi	r2,r2,255
 20210c4:	18800826 	beq	r3,r2,20210e8 <memcmp+0xf8>
	return *s1 - *s2;
 20210c8:	e0bff917 	ldw	r2,-28(fp)
 20210cc:	10800003 	ldbu	r2,0(r2)
 20210d0:	10c03fcc 	andi	r3,r2,255
 20210d4:	e0bffa17 	ldw	r2,-24(fp)
 20210d8:	10800003 	ldbu	r2,0(r2)
 20210dc:	10803fcc 	andi	r2,r2,255
 20210e0:	1885c83a 	sub	r2,r3,r2
 20210e4:	00000b06 	br	2021114 <memcmp+0x124>
      s1++;
 20210e8:	e0bff917 	ldw	r2,-28(fp)
 20210ec:	10800044 	addi	r2,r2,1
 20210f0:	e0bff915 	stw	r2,-28(fp)
      s2++;
 20210f4:	e0bffa17 	ldw	r2,-24(fp)
 20210f8:	10800044 	addi	r2,r2,1
 20210fc:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 2021100:	e0bfff17 	ldw	r2,-4(fp)
 2021104:	10ffffc4 	addi	r3,r2,-1
 2021108:	e0ffff15 	stw	r3,-4(fp)
 202110c:	103fe71e 	bne	r2,zero,20210ac <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 2021110:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2021114:	e037883a 	mov	sp,fp
 2021118:	df000017 	ldw	fp,0(sp)
 202111c:	dec00104 	addi	sp,sp,4
 2021120:	f800283a 	ret

02021124 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 2021124:	defff804 	addi	sp,sp,-32
 2021128:	dfc00715 	stw	ra,28(sp)
 202112c:	df000615 	stw	fp,24(sp)
 2021130:	dc000515 	stw	r16,20(sp)
 2021134:	df000604 	addi	fp,sp,24
 2021138:	e13ffb15 	stw	r4,-20(fp)
 202113c:	e17ffc15 	stw	r5,-16(fp)
 2021140:	e1bffd15 	stw	r6,-12(fp)
 2021144:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 2021148:	d0a02f17 	ldw	r2,-32580(gp)
 202114c:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 2021150:	8000041e 	bne	r16,zero,2021164 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 2021154:	d0a02f17 	ldw	r2,-32580(gp)
 2021158:	d0e02f17 	ldw	r3,-32580(gp)
 202115c:	1c005304 	addi	r16,r3,332
 2021160:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 2021164:	80800117 	ldw	r2,4(r16)
 2021168:	10800810 	cmplti	r2,r2,32
 202116c:	1000131e 	bne	r2,zero,20211bc <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 2021170:	00800034 	movhi	r2,0
 2021174:	10800004 	addi	r2,r2,0
 2021178:	1000021e 	bne	r2,zero,2021184 <__register_exitproc+0x60>
	return -1;
 202117c:	00bfffc4 	movi	r2,-1
 2021180:	00003e06 	br	202127c <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 2021184:	01006404 	movi	r4,400
 2021188:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 202118c:	1021883a 	mov	r16,r2
      if (p == NULL)
 2021190:	8000021e 	bne	r16,zero,202119c <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 2021194:	00bfffc4 	movi	r2,-1
 2021198:	00003806 	br	202127c <__register_exitproc+0x158>
	}
      p->_ind = 0;
 202119c:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 20211a0:	d0a02f17 	ldw	r2,-32580(gp)
 20211a4:	10805217 	ldw	r2,328(r2)
 20211a8:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 20211ac:	d0a02f17 	ldw	r2,-32580(gp)
 20211b0:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 20211b4:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 20211b8:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 20211bc:	e0bffb17 	ldw	r2,-20(fp)
 20211c0:	10002426 	beq	r2,zero,2021254 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 20211c4:	80802204 	addi	r2,r16,136
 20211c8:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 20211cc:	80800117 	ldw	r2,4(r16)
 20211d0:	e0fffa17 	ldw	r3,-24(fp)
 20211d4:	1085883a 	add	r2,r2,r2
 20211d8:	1085883a 	add	r2,r2,r2
 20211dc:	1885883a 	add	r2,r3,r2
 20211e0:	e0fffd17 	ldw	r3,-12(fp)
 20211e4:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 20211e8:	e0bffa17 	ldw	r2,-24(fp)
 20211ec:	10804017 	ldw	r2,256(r2)
 20211f0:	80c00117 	ldw	r3,4(r16)
 20211f4:	01000044 	movi	r4,1
 20211f8:	20c6983a 	sll	r3,r4,r3
 20211fc:	10c6b03a 	or	r3,r2,r3
 2021200:	e0bffa17 	ldw	r2,-24(fp)
 2021204:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 2021208:	80800117 	ldw	r2,4(r16)
 202120c:	e0fffa17 	ldw	r3,-24(fp)
 2021210:	10800804 	addi	r2,r2,32
 2021214:	1085883a 	add	r2,r2,r2
 2021218:	1085883a 	add	r2,r2,r2
 202121c:	1885883a 	add	r2,r3,r2
 2021220:	e0fffe17 	ldw	r3,-8(fp)
 2021224:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 2021228:	e0bffb17 	ldw	r2,-20(fp)
 202122c:	10800098 	cmpnei	r2,r2,2
 2021230:	1000081e 	bne	r2,zero,2021254 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 2021234:	e0bffa17 	ldw	r2,-24(fp)
 2021238:	10804117 	ldw	r2,260(r2)
 202123c:	80c00117 	ldw	r3,4(r16)
 2021240:	01000044 	movi	r4,1
 2021244:	20c6983a 	sll	r3,r4,r3
 2021248:	10c6b03a 	or	r3,r2,r3
 202124c:	e0bffa17 	ldw	r2,-24(fp)
 2021250:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 2021254:	80800117 	ldw	r2,4(r16)
 2021258:	10c00044 	addi	r3,r2,1
 202125c:	80c00115 	stw	r3,4(r16)
 2021260:	10800084 	addi	r2,r2,2
 2021264:	1085883a 	add	r2,r2,r2
 2021268:	1085883a 	add	r2,r2,r2
 202126c:	8085883a 	add	r2,r16,r2
 2021270:	e0fffc17 	ldw	r3,-16(fp)
 2021274:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 2021278:	0005883a 	mov	r2,zero
}
 202127c:	e6ffff04 	addi	sp,fp,-4
 2021280:	dfc00217 	ldw	ra,8(sp)
 2021284:	df000117 	ldw	fp,4(sp)
 2021288:	dc000017 	ldw	r16,0(sp)
 202128c:	dec00304 	addi	sp,sp,12
 2021290:	f800283a 	ret

02021294 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 2021294:	defff504 	addi	sp,sp,-44
 2021298:	dfc00a15 	stw	ra,40(sp)
 202129c:	df000915 	stw	fp,36(sp)
 20212a0:	dc800815 	stw	r18,32(sp)
 20212a4:	dc400715 	stw	r17,28(sp)
 20212a8:	dc000615 	stw	r16,24(sp)
 20212ac:	df000904 	addi	fp,sp,36
 20212b0:	e13ffb15 	stw	r4,-20(fp)
 20212b4:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 20212b8:	d0a02f17 	ldw	r2,-32580(gp)
 20212bc:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 20212c0:	d0a02f17 	ldw	r2,-32580(gp)
 20212c4:	10805204 	addi	r2,r2,328
 20212c8:	e0bff715 	stw	r2,-36(fp)
  while (p)
 20212cc:	00006006 	br	2021450 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 20212d0:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 20212d4:	80800117 	ldw	r2,4(r16)
 20212d8:	147fffc4 	addi	r17,r2,-1
 20212dc:	00004a06 	br	2021408 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 20212e0:	00800044 	movi	r2,1
 20212e4:	1444983a 	sll	r2,r2,r17
 20212e8:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 20212ec:	e0bffc17 	ldw	r2,-16(fp)
 20212f0:	10000826 	beq	r2,zero,2021314 <__call_exitprocs+0x80>
 20212f4:	90004026 	beq	r18,zero,20213f8 <__call_exitprocs+0x164>
 20212f8:	88800804 	addi	r2,r17,32
 20212fc:	1085883a 	add	r2,r2,r2
 2021300:	1085883a 	add	r2,r2,r2
 2021304:	9085883a 	add	r2,r18,r2
 2021308:	10c00017 	ldw	r3,0(r2)
 202130c:	e0bffc17 	ldw	r2,-16(fp)
 2021310:	1880391e 	bne	r3,r2,20213f8 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 2021314:	88800084 	addi	r2,r17,2
 2021318:	1085883a 	add	r2,r2,r2
 202131c:	1085883a 	add	r2,r2,r2
 2021320:	8085883a 	add	r2,r16,r2
 2021324:	10800017 	ldw	r2,0(r2)
 2021328:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 202132c:	80800117 	ldw	r2,4(r16)
 2021330:	10bfffc4 	addi	r2,r2,-1
 2021334:	1440041e 	bne	r2,r17,2021348 <__call_exitprocs+0xb4>
	    p->_ind--;
 2021338:	80800117 	ldw	r2,4(r16)
 202133c:	10bfffc4 	addi	r2,r2,-1
 2021340:	80800115 	stw	r2,4(r16)
 2021344:	00000506 	br	202135c <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 2021348:	88800084 	addi	r2,r17,2
 202134c:	1085883a 	add	r2,r2,r2
 2021350:	1085883a 	add	r2,r2,r2
 2021354:	8085883a 	add	r2,r16,r2
 2021358:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 202135c:	e0bff917 	ldw	r2,-28(fp)
 2021360:	10002726 	beq	r2,zero,2021400 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 2021364:	80800117 	ldw	r2,4(r16)
 2021368:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 202136c:	90000426 	beq	r18,zero,2021380 <__call_exitprocs+0xec>
 2021370:	90c04017 	ldw	r3,256(r18)
 2021374:	e0bff817 	ldw	r2,-32(fp)
 2021378:	1884703a 	and	r2,r3,r2
 202137c:	1000031e 	bne	r2,zero,202138c <__call_exitprocs+0xf8>
	    fn ();
 2021380:	e0bff917 	ldw	r2,-28(fp)
 2021384:	103ee83a 	callr	r2
 2021388:	00001406 	br	20213dc <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 202138c:	90c04117 	ldw	r3,260(r18)
 2021390:	e0bff817 	ldw	r2,-32(fp)
 2021394:	1884703a 	and	r2,r3,r2
 2021398:	1000091e 	bne	r2,zero,20213c0 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 202139c:	8c45883a 	add	r2,r17,r17
 20213a0:	1085883a 	add	r2,r2,r2
 20213a4:	9085883a 	add	r2,r18,r2
 20213a8:	10c00017 	ldw	r3,0(r2)
 20213ac:	e0bff917 	ldw	r2,-28(fp)
 20213b0:	180b883a 	mov	r5,r3
 20213b4:	e13ffb17 	ldw	r4,-20(fp)
 20213b8:	103ee83a 	callr	r2
 20213bc:	00000706 	br	20213dc <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 20213c0:	8c45883a 	add	r2,r17,r17
 20213c4:	1085883a 	add	r2,r2,r2
 20213c8:	9085883a 	add	r2,r18,r2
 20213cc:	10c00017 	ldw	r3,0(r2)
 20213d0:	e0bff917 	ldw	r2,-28(fp)
 20213d4:	1809883a 	mov	r4,r3
 20213d8:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 20213dc:	80c00117 	ldw	r3,4(r16)
 20213e0:	e0bffa17 	ldw	r2,-24(fp)
 20213e4:	18bfb41e 	bne	r3,r2,20212b8 <__call_exitprocs+0x24>
 20213e8:	e0bff717 	ldw	r2,-36(fp)
 20213ec:	10800017 	ldw	r2,0(r2)
 20213f0:	143fb11e 	bne	r2,r16,20212b8 <__call_exitprocs+0x24>
 20213f4:	00000306 	br	2021404 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 20213f8:	0001883a 	nop
 20213fc:	00000106 	br	2021404 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 2021400:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 2021404:	8c7fffc4 	addi	r17,r17,-1
 2021408:	883fb50e 	bge	r17,zero,20212e0 <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 202140c:	00800034 	movhi	r2,0
 2021410:	10800004 	addi	r2,r2,0
 2021414:	10001026 	beq	r2,zero,2021458 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 2021418:	80800117 	ldw	r2,4(r16)
 202141c:	10000a1e 	bne	r2,zero,2021448 <__call_exitprocs+0x1b4>
 2021420:	80800017 	ldw	r2,0(r16)
 2021424:	10000826 	beq	r2,zero,2021448 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 2021428:	80c00017 	ldw	r3,0(r16)
 202142c:	e0bff717 	ldw	r2,-36(fp)
 2021430:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 2021434:	8009883a 	mov	r4,r16
 2021438:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
	  p = *lastp;
 202143c:	e0bff717 	ldw	r2,-36(fp)
 2021440:	14000017 	ldw	r16,0(r2)
 2021444:	00000206 	br	2021450 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 2021448:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 202144c:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 2021450:	803f9f1e 	bne	r16,zero,20212d0 <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 2021454:	00000106 	br	202145c <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 2021458:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 202145c:	0001883a 	nop
 2021460:	e6fffd04 	addi	sp,fp,-12
 2021464:	dfc00417 	ldw	ra,16(sp)
 2021468:	df000317 	ldw	fp,12(sp)
 202146c:	dc800217 	ldw	r18,8(sp)
 2021470:	dc400117 	ldw	r17,4(sp)
 2021474:	dc000017 	ldw	r16,0(sp)
 2021478:	dec00504 	addi	sp,sp,20
 202147c:	f800283a 	ret

02021480 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2021480:	defffd04 	addi	sp,sp,-12
 2021484:	df000215 	stw	fp,8(sp)
 2021488:	df000204 	addi	fp,sp,8
 202148c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2021490:	d0279e45 	stb	zero,-24967(gp)
 2021494:	e0bfff17 	ldw	r2,-4(fp)
 2021498:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 202149c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20214a0:	10000226 	beq	r2,zero,20214ac <_exit+0x2c>
    ALT_SIM_FAIL();
 20214a4:	002af070 	cmpltui	zero,zero,43969
 20214a8:	00000106 	br	20214b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 20214ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20214b0:	003fff06 	br	20214b0 <_exit+0x30>
