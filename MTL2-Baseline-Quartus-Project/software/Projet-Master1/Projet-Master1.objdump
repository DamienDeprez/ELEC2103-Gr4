
Projet-Master1.elf:     file format elf32-littlenios2
Projet-Master1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000248

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00022b94 memsz 0x00022b94 flags r-x
    LOAD off    0x00023bb4 vaddr 0x02022bb4 paddr 0x02024844 align 2**12
         filesz 0x00001c90 memsz 0x00001c90 flags rw-
    LOAD off    0x000264d4 vaddr 0x020264d4 paddr 0x020264d4 align 2**12
         filesz 0x00000000 memsz 0x0000b440 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00021da0  02000248  02000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bcc  02021fe8  02021fe8  00022fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c90  02022bb4  02024844  00023bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b440  020264d4  020264d4  000264d4  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  00025844  2**0
                  CONTENTS
  7 .sdram_controller 00000000  02031914  02031914  00025844  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00025844  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001320  00000000  00000000  00025868  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002ec65  00000000  00000000  00026b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b114  00000000  00000000  000557ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fbb4  00000000  00000000  00060901  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003b30  00000000  00000000  000704b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005e15  00000000  00000000  00073fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009061  00000000  00000000  00079dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00082e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014a8  00000000  00000000  00082e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00089b5e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00089b64  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00089b67  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00089b68  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00089b69  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00089b6d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00089b71  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00089b75  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00089b7e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00089b87  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00089b90  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  00089b99  2**0
                  CONTENTS, READONLY
 30 .jdi          00005000  00000000  00000000  00089bcd  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006901b  00000000  00000000  0008ebcd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000248 l    d  .text	00000000 .text
02021fe8 l    d  .rodata	00000000 .rodata
02022bb4 l    d  .rwdata	00000000 .rwdata
020264d4 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
02031914 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Projet-Master1_bsp//obj/HAL/src/crt0.o
02000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 physics.c
00000000 l    df *ABS*	00000000 s_fmin.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sf_cos.c
020246cc l     O .rwdata	00000004 one
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 wf_atan2.c
00000000 l    df *ABS*	00000000 e_sqrt.c
020246d0 l     O .rwdata	00000008 one
020246d8 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 ef_atan2.c
020246e0 l     O .rwdata	00000004 tiny
020246e4 l     O .rwdata	00000004 zero
020246e8 l     O .rwdata	00000004 pi_o_4
020246ec l     O .rwdata	00000004 pi_o_2
020246f0 l     O .rwdata	00000004 pi
020246f4 l     O .rwdata	00000004 pi_lo
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
020222ec l     O .rodata	00000318 two_over_pi
02022604 l     O .rodata	00000080 npio2_hw
020246f8 l     O .rwdata	00000004 zero
020246fc l     O .rwdata	00000004 half
02024700 l     O .rwdata	00000004 two8
02024704 l     O .rwdata	00000004 invpio2
02024708 l     O .rwdata	00000004 pio2_1
0202470c l     O .rwdata	00000004 pio2_1t
02024710 l     O .rwdata	00000004 pio2_2
02024714 l     O .rwdata	00000004 pio2_2t
02024718 l     O .rwdata	00000004 pio2_3
0202471c l     O .rwdata	00000004 pio2_3t
00000000 l    df *ABS*	00000000 kf_cos.c
02024720 l     O .rwdata	00000004 one
02024724 l     O .rwdata	00000004 C1
02024728 l     O .rwdata	00000004 C2
0202472c l     O .rwdata	00000004 C3
02024730 l     O .rwdata	00000004 C4
02024734 l     O .rwdata	00000004 C5
02024738 l     O .rwdata	00000004 C6
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
02022684 l     O .rodata	0000000c init_jk
02022690 l     O .rodata	0000002c PIo2
0202473c l     O .rwdata	00000004 zero
02024740 l     O .rwdata	00000004 one
02024744 l     O .rwdata	00000004 two8
02024748 l     O .rwdata	00000004 twon8
00000000 l    df *ABS*	00000000 kf_sin.c
0202474c l     O .rwdata	00000004 half
02024750 l     O .rwdata	00000004 S1
02024754 l     O .rwdata	00000004 S2
02024758 l     O .rwdata	00000004 S3
0202475c l     O .rwdata	00000004 S4
02024760 l     O .rwdata	00000004 S5
02024764 l     O .rwdata	00000004 S6
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 sf_atan.c
020226bc l     O .rodata	00000010 atanhi
020226cc l     O .rodata	00000010 atanlo
020226dc l     O .rodata	0000002c aT
0202476c l     O .rwdata	00000004 one
02024770 l     O .rwdata	00000004 huge
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_floor.c
02024774 l     O .rwdata	00000004 huge
00000000 l    df *ABS*	00000000 sf_scalbn.c
02024778 l     O .rwdata	00000004 two25
0202477c l     O .rwdata	00000004 twom25
02024780 l     O .rwdata	00000004 huge
02024784 l     O .rwdata	00000004 tiny
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
02022be4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02009a00 l     F .text	000000f0 __sbprintf
0200bc10 l     F .text	0000020c cvt
0200be1c l     F .text	00000140 exponent
0202286e l     O .rodata	00000010 blanks.4403
0202287e l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200c0fc l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200e408 l     F .text	000000f4 std
0202651c l     O .bss	00000004 __sfp_lock
02026520 l     O .bss	00000004 __sinit_lock
0200e904 l     F .text	00000024 __fp_lock
0200e928 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
02023008 l     O .rwdata	00000038 lconv
02023040 l     O .rwdata	00000020 lc_ctype_charset
02023060 l     O .rwdata	00000020 lc_message_charset
02026530 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0200fc58 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
020229d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
02013b04 l     F .text	000000f0 __sbprintf
02022a26 l     O .rodata	00000010 blanks.4348
02022a36 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
02016810 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0201691c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02016948 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02016a34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02016b14 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02016c00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
02016dcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020247b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02017018 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
020247bc l     O .rwdata	00000004 lockid
02026554 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
020247c0 l     O .rwdata	00000004 lockid
0202655c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02018a48 l     F .text	00000048 OS_InitMisc
02018a90 l     F .text	0000006c OS_InitRdyList
02018bfc l     F .text	000000e4 OS_InitTCBList
02018968 l     F .text	000000e0 OS_InitEventList
02018afc l     F .text	00000080 OS_InitTaskIdle
02018b7c l     F .text	00000080 OS_InitTaskStat
02018e6c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0201ab7c l     F .text	000000f4 OS_FlagTaskRdy
0201a93c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201f6e8 l     F .text	00000034 alt_dev_reg
02023630 l     O .rwdata	0000106c jtag_uart
0202469c l     O .rwdata	0000002c accelerometer_spi_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201fa60 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0201fd08 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020204e4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02020af8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02020d5c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0202101c l     F .text	0000003c alt_get_errno
02021058 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020265c4 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
020265c0 g     O .bss	00000004 alt_instruction_exception_handler
02012710 g     F .text	000000b0 _mprec_log10
0202480e g     O .rwdata	00000002 OSTaskNameSize
02012890 g     F .text	00000134 __any_on
020155ec g     F .text	00000060 _isatty_r
020229a8 g     O .rodata	00000028 __mprec_tinytens
02016d10 g     F .text	000000bc alt_main
020264d8 g     O .bss	00000004 MailBox9
020097bc g     F .text	00000118 _puts_r
02031814 g     O .bss	00000100 alt_irq
020264dc g     O .bss	00000004 MailBox6
0201564c g     F .text	00000070 _lseek_r
0201be64 g     F .text	000000cc OS_MemInit
02003e40 g     F .text	00000174 sqrt
02024844 g       *ABS*	00000000 __flash_rwdata_start
0201f688 g     F .text	00000060 OSTimeSet
02007dfc g     F .text	00000088 .hidden __eqdf2
020176bc g     F .text	00000610 OSEventPendMulti
02031914 g       *ABS*	00000000 __alt_heap_start
02021664 g     F .text	00000024 OSTaskCreateHook
020265f0 g     O .bss	00002000 task1_stk
02009754 g     F .text	00000068 printf
020247e6 g     O .rwdata	00000002 OSMboxEn
02017d24 g     F .text	0000004c OSIntEnter
020158d4 g     F .text	000000d4 _wcrtomb_r
02013794 g     F .text	000000a0 __sseek
0200e7ac g     F .text	000000d8 __sinit
0201572c g     F .text	00000168 __swbuf_r
020247f6 g     O .rwdata	00000002 OSQEn
0200f888 g     F .text	00000084 _setlocale_r
0200e4fc g     F .text	000000a4 __sfmoreglue
02017390 g     F .text	000000cc __malloc_unlock
020216cc g     F .text	00000020 OSTaskStatHook
02026564 g     O .bss	00000001 OSLockNesting
02024834 g     O .rwdata	00000002 OSDataSize
02026565 g     O .bss	00000001 OSRunning
02010d44 g     F .text	00000208 memmove
0202170c g     F .text	00000020 OSInitHookBegin
0202482c g     O .rwdata	00000002 OSTmrSize
0200e778 g     F .text	00000034 _cleanup
020246c8 g     O .rwdata	00000004 accel_name
02010f4c g     F .text	00000130 _Balloc
020264e0 g     O .bss	00000004 MailBox13
02026568 g     O .bss	00000004 OSIdleCtr
02007e84 g     F .text	000000dc .hidden __gtdf2
02021414 g     F .text	00000024 altera_nios2_gen2_irq_init
020214e4 g       .text	00000000 OSStartTsk
02009384 g     F .text	00000020 __errno
0201919c g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000001c __reset
02004a50 g     F .text	00000674 __ieee754_rem_pio2f
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
02020720 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
02024832 g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
020247d2 g     O .rwdata	00000002 OSEventSize
0202656c g     O .bss	00000001 OSPrioHighRdy
02015584 g     F .text	00000068 _fstat_r
02021688 g     F .text	00000024 OSTaskDelHook
02026540 g     O .bss	00000004 errno
020136b0 g     F .text	00000030 __seofread
020214c4 g       .text	00000000 OSStartHighRdy
0201e130 g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0201a484 g     F .text	00000060 OSFlagPendGetFlagsRdy
02024812 g     O .rwdata	00000002 OSTaskStatStkSize
02019600 g     F .text	00000308 OSFlagAccept
0201c49c g     F .text	000000b8 OSQFlush
0201bf30 g     F .text	00000140 OSQAccept
0202654c g     O .bss	00000004 alt_argv
0202c6c8 g       *ABS*	00000000 _gp
0201df84 g     F .text	000001ac OSTaskCreate
02003918 g     F .text	000000f4 damping
0201da94 g     F .text	000004f0 OSTaskChangePrio
02026560 g     O .bss	00000004 alt_heapsem
02002da4 g     F .text	000000cc task4
02019470 g     F .text	00000190 OSDebugInit
0201e314 g     F .text	00000344 OSTaskDel
020234b0 g     O .rwdata	00000180 alt_fd_list
0202e5f0 g     O .bss	00000370 OSFlagTbl
02018748 g     F .text	000000b8 OS_EventTaskRemove
02020c98 g     F .text	00000090 alt_find_dev
020093a4 g     F .text	00000188 memcpy
020247fc g     O .rwdata	00000002 OSRdyTblSize
020264e4 g     O .bss	00000004 MailBox3
0200e734 g     F .text	00000044 _cleanup_r
0201668c g     F .text	000000dc .hidden __floatsidf
02020e20 g     F .text	0000007c alt_io_redirect
02007f60 g     F .text	000000f4 .hidden __ltdf2
02021fe8 g       *ABS*	00000000 __DTOR_END__
020098d4 g     F .text	00000038 puts
02021a04 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0201745c g     F .text	00000120 OSEventNameGet
020247e0 g     O .rwdata	00000002 OSFlagMax
02003ab8 g     F .text	00000104 __fpclassifyd
020125f4 g     F .text	0000011c __ratio
02017d70 g     F .text	000000f8 OSIntExit
02013bf4 g     F .text	00000050 __vfiprintf_internal
0202481a g     O .rwdata	00000002 OSTCBSize
0202656d g     O .bss	00000001 OSPrioCur
0201ff64 g     F .text	000002bc altera_avalon_jtag_uart_read
020096f0 g     F .text	00000064 _printf_r
02006bac g     F .text	00000064 .hidden __udivsi3
02016a70 g     F .text	000000a4 isatty
02024800 g     O .rwdata	00000002 OSStkWidth
020228b8 g     O .rodata	000000c8 __mprec_tens
020247f4 g     O .rwdata	00000002 OSPtrSize
0200f90c g     F .text	00000024 __locale_charset
020247d4 g     O .rwdata	00000002 OSEventTblSize
02021438 g       .text	00000000 OSCtxSw
02021974 g     F .text	00000090 alt_icache_flush
02026534 g     O .bss	00000004 __malloc_top_pad
02026570 g     O .bss	00000004 OSTCBList
02026544 g     O .bss	00000004 alt_fd_list_lock
02024790 g     O .rwdata	00000004 __mb_cur_max
0200f994 g     F .text	00000028 _localeconv_r
02011594 g     F .text	00000058 __i2b
0200f0f8 g     F .text	000005dc __sfvwrite_r
0202e960 g     O .bss	00000c30 OSMemTbl
02026574 g     O .bss	00000001 OSTickStepState
020135b4 g     F .text	00000060 _sbrk_r
020247f8 g     O .rwdata	00000002 OSQMax
0202f590 g     O .bss	00000800 OSTaskStatStk
0201baa0 g     F .text	000000f0 OSMemNameGet
0200666c g     F .text	00000058 fabsf
020285f0 g     O .bss	00002000 task4_stk
020247d8 g     O .rwdata	00000002 OSFlagEn
020156bc g     F .text	00000070 _read_r
0202481e g     O .rwdata	00000002 OSTimeTickHookEn
0201c94c g     F .text	00000168 OSQPost
0201ac70 g     F .text	000000a4 OS_FlagUnlink
020247b0 g     O .rwdata	00000004 alt_max_fd
02018d34 g     F .text	00000068 OS_MemCopy
02018d9c g     F .text	000000d0 OS_Sched
0201513c g     F .text	0000012c _fclose_r
0201b9b0 g     F .text	000000f0 OSMemGet
0201b6cc g     F .text	00000110 OSMboxQuery
0201e940 g     F .text	000001b4 OSTaskNameSet
0200e3b4 g     F .text	00000054 fflush
02026538 g     O .bss	00000004 __malloc_max_sbrked_mem
02026578 g     O .bss	00000004 OSCtxSwCtr
020216ec g     F .text	00000020 OSTimeTickHook
02020e9c g     F .text	00000180 alt_irq_register
020247e2 g     O .rwdata	00000002 OSFlagNameSize
020264e8 g     O .bss	00000004 AnimationFlagGrp
02009068 g     F .text	00000110 .hidden __extendsfdf2
02018800 g     F .text	00000100 OS_EventTaskRemoveMulti
02006c68 g     F .text	000008ac .hidden __adddf3
020185f8 g     F .text	00000150 OS_EventTaskWaitMulti
020121b0 g     F .text	00000204 __b2d
020247fa g     O .rwdata	00000002 OSQSize
020160d4 g     F .text	00000538 .hidden __umoddi3
02016c3c g     F .text	000000d4 lseek
0201d3fc g     F .text	0000020c OSSemPend
02024768 g     O .rwdata	00000004 __fdlib_version
02003368 g     F .text	00000064 momentum
0202478c g     O .rwdata	00000004 _global_impure_ptr
020129c4 g     F .text	00000bf0 _realloc_r
02006128 g     F .text	0000016c __kernel_sinf
020247e4 g     O .rwdata	00000002 OSLowestPrio
02031914 g       *ABS*	00000000 __bss_end
0202176c g     F .text	00000024 OSTCBInitHook
0202482a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0202130c g     F .text	00000108 alt_tick
0201b460 g     F .text	00000110 OSMboxPost
02015b5c g     F .text	00000578 .hidden __udivdi3
02015494 g     F .text	00000088 _fputwc_r
020247cc g     O .rwdata	00000002 OSEventEn
02022980 g     O .rodata	00000028 __mprec_bigtens
0201128c g     F .text	0000018c __s2b
02024826 g     O .rwdata	00000002 OSTmrCfgNameSize
02016768 g     F .text	000000a8 .hidden __floatunsidf
02011d2c g     F .text	00000114 __mcmp
0200e94c g     F .text	00000040 __fp_lock_all
020264ec g     O .bss	00000004 MailBox5
0201aa9c g     F .text	000000e0 OS_FlagInit
02021270 g     F .text	0000009c alt_alarm_stop
02024808 g     O .rwdata	00000002 OSTaskIdleStkSize
02003bbc g     F .text	00000140 cosf
020265b4 g     O .bss	00000004 alt_irq_active
0201d034 g     F .text	000000b0 OSSemAccept
0201bca4 g     F .text	000000d8 OSMemPut
0201b7dc g     F .text	000001d4 OSMemCreate
0202657c g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d8 alt_irq_handler
02023488 g     O .rwdata	00000028 alt_dev_null
0202481c g     O .rwdata	00000002 OSTicksPerSec
02021438 g       .text	00000000 OSIntCtxSw
02020ab0 g     F .text	00000048 alt_dcache_flush_all
02011418 g     F .text	00000090 __hi0bits
0201660c g     F .text	00000080 .hidden __fixdfsi
020050c4 g     F .text	000001c4 __kernel_cosf
02026580 g     O .bss	00000004 OSTCBFreeList
02024844 g       *ABS*	00000000 __ram_rwdata_end
0201d608 g     F .text	0000016c OSSemPendAbort
020247a8 g     O .rwdata	00000008 alt_dev_list
02017054 g     F .text	000000f8 write
020264f0 g     O .bss	00000004 ActivateTask4Grp
02024820 g     O .rwdata	00000002 OSVersionNbr
02022bb4 g       *ABS*	00000000 __ram_rodata_end
02016984 g     F .text	000000b0 fstat
02007f60 g     F .text	000000f4 .hidden __ledf2
020247c8 g     O .rwdata	00000004 OSEndiannessTest
020119bc g     F .text	00000178 __pow5mult
02013c44 g     F .text	000012c4 ___vfiprintf_internal_r
02026524 g     O .bss	00000004 __nlocale_changed
02006c10 g     F .text	00000058 .hidden __umodsi3
020247da g     O .rwdata	00000002 OSFlagGrpSize
02031914 g       *ABS*	00000000 end
0201f924 g     F .text	0000013c altera_avalon_jtag_uart_init
02019004 g     F .text	000000cc OS_TaskStat
020001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
02021fe8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02020560 g     F .text	00000074 alt_avalon_timer_sc_init
02009320 g     F .text	00000064 .hidden __clzsi2
02020220 g     F .text	000002c4 altera_avalon_jtag_uart_write
0200e884 g     F .text	00000020 __sfp_lock_acquire
02010b88 g     F .text	000001bc memchr
02018ce0 g     F .text	00000054 OS_MemClr
02009b40 g     F .text	000020d0 ___vfprintf_internal_r
02021508 g     F .text	0000015c OSTaskStkInit
02000294 g     F .text	000003a0 task1
02022bb4 g     O .rwdata	00000030 whole_list
0200e9cc g     F .text	00000560 _free_r
0200f930 g     F .text	00000020 __locale_mb_cur_max
02018350 g     F .text	00000198 OS_EventTaskRdy
02021dc8 g     F .text	000001ec __call_exitprocs
02026584 g     O .bss	00000001 OSCPUUsage
02026528 g     O .bss	00000004 __mlocale_changed
02024798 g     O .rwdata	00000004 __malloc_sbrk_base
02000248 g     F .text	0000004c _start
02000634 g     F .text	0000207c task2
020265b8 g     O .bss	00000004 _alt_tick_rate
0201c554 g     F .text	0000028c OSQPend
0201f200 g     F .text	00000104 OSTimeDly
02003210 g     F .text	00000158 borderCollide
02011b34 g     F .text	000001f8 __lshift
020265bc g     O .bss	00000004 _alt_nticks
02016e08 g     F .text	000000fc read
0201f754 g     F .text	0000006c alt_sys_init
02020610 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
02021c58 g     F .text	00000170 __register_exitproc
02026585 g     O .bss	00000001 OSTaskCtr
020264f4 g     O .bss	00000004 MailBox10
020264f8 g     O .bss	00000004 MailBox2
0201f304 g     F .text	00000154 OSTimeDlyHMSM
020115ec g     F .text	000003d0 __multiply
0201fe0c g     F .text	00000068 altera_avalon_jtag_uart_close
02022bb4 g       *ABS*	00000000 __ram_rwdata_start
02021fe8 g       *ABS*	00000000 __ram_rodata_start
020265c8 g     O .bss	00000028 __malloc_current_mallinfo
020247ce g     O .rwdata	00000002 OSEventMax
020123b4 g     F .text	00000240 __d2b
0201d774 g     F .text	00000110 OSSemPost
02017ef4 g     F .text	000000dc OSSchedUnlock
02003a0c g     F .text	000000ac fmin
0201f7c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02021898 g     F .text	000000dc alt_get_fd
02026588 g     O .bss	00000004 OSMemFreeList
02018040 g     F .text	000000b0 OSStatInit
0201a878 g     F .text	000000c4 OSFlagQuery
020207ec g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
02024804 g     O .rwdata	00000002 OSTaskCreateExtEn
02014f78 g     F .text	00000060 _close_r
020264fc g     O .bss	00000004 MailBox12
02021b24 g     F .text	00000134 memcmp
02018330 g     F .text	00000020 OS_Dummy
0201f880 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02031914 g       *ABS*	00000000 __alt_stack_base
0201f8d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0200bf5c g     F .text	000001a0 __swsetup_r
0202fd90 g     O .bss	000001e0 OSQTbl
02007514 g     F .text	000008e8 .hidden __divdf3
0200e5a0 g     F .text	00000194 __sfp
020127c0 g     F .text	000000d0 __copybits
02023080 g     O .rwdata	00000408 __malloc_av_
0200e8e4 g     F .text	00000020 __sinit_lock_release
0202658c g     O .bss	00000004 OSTCBHighRdy
02008054 g     F .text	00000718 .hidden __muldf3
02013614 g     F .text	0000009c __sread
02026590 g     O .bss	00000004 OSQFreeList
02021790 g     F .text	00000108 alt_find_file
02020b34 g     F .text	000000a4 alt_dev_llist_insert
02017270 g     F .text	00000120 __malloc_lock
02016f68 g     F .text	000000b0 sbrk
02006828 g     F .text	00000214 scalbnf
0201757c g     F .text	00000140 OSEventNameSet
0200e32c g     F .text	00000088 _fflush_r
02014fd8 g     F .text	00000164 _calloc_r
02026594 g     O .bss	00000001 OSRdyGrp
020264d4 g       *ABS*	00000000 __bss_start
0200952c g     F .text	000001c4 memset
02002e70 g     F .text	0000022c main
02026550 g     O .bss	00000004 alt_envp
02026500 g     O .bss	00000004 MailBox8
0202653c g     O .bss	00000004 __malloc_max_total_mem
02003814 g     F .text	00000104 moveBall
0201f820 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02015894 g     F .text	00000040 __swbuf
02022a64 g     O .rodata	00000100 OSUnMapTbl
020247fe g     O .rwdata	00000002 OSSemEn
0201a4e4 g     F .text	00000394 OSFlagPost
02013834 g     F .text	00000054 __sclose
02006294 g     F .text	00000068 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
02015268 g     F .text	00000038 fclose
020184e8 g     F .text	00000110 OS_EventTaskWait
0202a5f0 g     O .bss	00002000 task2_stk
02009178 g     F .text	000001a8 .hidden __truncdfsf2
020190d0 g     F .text	000000cc OS_TaskStatStkChk
0201e658 g     F .text	00000150 OSTaskDelReq
0200c4b0 g     F .text	00001b78 _dtoa_r
0201000c g     F .text	00000b7c _malloc_r
02015ae4 g     F .text	00000078 __ascii_wctomb
020247b4 g     O .rwdata	00000004 alt_errno
02017fd0 g     F .text	00000070 OSStart
0202c5f0 g     O .bss	00002000 task3_stk
02017210 g     F .text	00000060 __env_unlock
0200f6d4 g     F .text	000000d8 _fwalk
0201eaf4 g     F .text	000001d4 OSTaskResume
0201bd7c g     F .text	000000e8 OSMemQuery
02024810 g     O .rwdata	00000002 OSTaskStatEn
020247ea g     O .rwdata	00000002 OSMemMax
0201cab4 g     F .text	00000170 OSQPostFront
02006ab4 g     F .text	00000084 .hidden __divsi3
02026595 g     O .bss	00000003 OSRdyTbl
020247c4 g     O .rwdata	00000002 OSDebugEn
0200ef2c g     F .text	000001cc _malloc_trim_r
02026504 g     O .bss	00000004 MailBox4
02021fe8 g       *ABS*	00000000 __CTOR_END__
02026508 g     O .bss	00000004 MailBox7
020247dc g     O .rwdata	00000002 OSFlagNodeSize
02024824 g     O .rwdata	00000002 OSTmrCfgMax
02013888 g     F .text	00000140 strcmp
0201c070 g     F .text	000001ac OSQCreate
0201e7a8 g     F .text	00000198 OSTaskNameGet
02021fe8 g       *ABS*	00000000 __flash_rodata_start
0201cc24 g     F .text	0000020c OSQPostOpt
020180f0 g     F .text	00000220 OSTimeTick
0202480c g     O .rwdata	00000002 OSTaskMax
02021fe8 g       *ABS*	00000000 __DTOR_LIST__
0201d0e4 g     F .text	000000d8 OSSemCreate
02024830 g     O .rwdata	00000002 OSTmrWheelSize
02007dfc g     F .text	00000088 .hidden __nedf2
02024806 g     O .rwdata	00000002 OSTaskDelEn
0201d884 g     F .text	00000110 OSSemQuery
0201c21c g     F .text	00000280 OSQDel
0201c7e0 g     F .text	0000016c OSQPendAbort
0201f71c g     F .text	00000038 alt_irq_init
02016f04 g     F .text	00000064 alt_release_fd
02006a3c g     F .text	00000078 copysignf
02022708 g     O .rodata	00000100 .hidden __clz_tab
0202652c g     O .bss	00000004 _PathLocale
02021aa0 g     F .text	0000003c atexit
02014f08 g     F .text	00000070 _write_r
02017e68 g     F .text	0000008c OSSchedLock
0200f9bc g     F .text	00000040 setlocale
02019908 g     F .text	00000108 OSFlagCreate
02024788 g     O .rwdata	00000004 _impure_ptr
02026548 g     O .bss	00000004 alt_argc
0200e028 g     F .text	00000304 __sflush_r
02003fb4 g     F .text	00000040 atan2f
02020c38 g     F .text	00000060 _do_dtors
0200f974 g     F .text	00000020 __locale_cjk_lang
020247d6 g     O .rwdata	00000002 OSEventMultiEn
02019a10 g     F .text	00000248 OSFlagDel
02026598 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
0201b2f4 g     F .text	0000016c OSMboxPendAbort
020264d4 g     O .bss	00000004 accel_spi
020120e4 g     F .text	000000cc __ulp
0202650c g     O .bss	00000004 MailBox11
02024822 g     O .rwdata	00000002 OSTmrEn
02019ecc g     F .text	000005b8 OSFlagPend
0200e98c g     F .text	00000040 __fp_unlock_all
020247a0 g     O .rwdata	00000008 alt_fs_list
02018ee0 g     F .text	00000074 OS_StrCopy
02003cfc g     F .text	00000144 sinf
020247ec g     O .rwdata	00000002 OSMemNameSize
0202172c g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
020205d4 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
02024818 g     O .rwdata	00000002 OSTCBPrioTblMax
0200f9fc g     F .text	00000030 localeconv
02003ff4 g     F .text	00000648 __ieee754_sqrt
02024814 g     O .rwdata	00000002 OSTaskStatStkChkEn
0201adac g     F .text	000000d4 OSMboxCreate
020247e8 g     O .rwdata	00000002 OSMemEn
020247f2 g     O .rwdata	00000002 OSMutexEn
02024844 g       *ABS*	00000000 _edata
0200348c g     F .text	00000388 collide_calc
02031914 g       *ABS*	00000000 _end
0202659c g     O .bss	00000001 OSIntNesting
020152a0 g     F .text	000001f4 __fputwc
02000248 g       *ABS*	00000000 __ram_exceptions_end
0201fe74 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0201f458 g     F .text	000001d4 OSTimeDlyResume
02019d80 g     F .text	0000014c OSFlagNameSet
0201b0c0 g     F .text	00000234 OSMboxPend
0200309c g     F .text	00000174 whole_collide
0201ecc8 g     F .text	000001c0 OSTaskStkChk
020247ee g     O .rwdata	00000002 OSMemSize
020136e0 g     F .text	000000b4 __swrite
02024794 g     O .rwdata	00000004 __malloc_trim_threshold
0200f950 g     F .text	00000024 __locale_msgcharset
020265a0 g     O .bss	00000004 OSTCBCur
02021adc g     F .text	00000048 exit
020247f0 g     O .rwdata	00000002 OSMemTblSize
0200f7ac g     F .text	000000dc _fwalk_reent
02026510 g     O .bss	00000004 MailBox1
02011e40 g     F .text	000002a4 __mdiff
02006b38 g     F .text	00000074 .hidden __modsi3
020208b8 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
0201ad14 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200e8a4 g     F .text	00000020 __sfp_lock_release
02017ccc g     F .text	00000058 OSInit
020062fc g     F .text	00000370 atanf
0201f06c g     F .text	00000124 OSTaskQuery
0201cf8c g     F .text	000000a8 OS_QInit
02018f54 g     F .text	00000054 OS_StrLen
0201bb90 g     F .text	00000114 OSMemNameSet
0202480a g     O .rwdata	00000002 OSTaskProfileEn
020265a4 g     O .bss	00000004 OSTime
02026514 g     O .bss	00000004 isActiveFlagGrp
0202ff70 g     O .bss	00000800 OSTaskIdleStk
02021fb4 g     F .text	00000034 _exit
0201b570 g     F .text	0000015c OSMboxPostOpt
02005288 g     F .text	00000ea0 __kernel_rem_pio2f
02020984 g     F .text	0000012c alt_alarm_start
02019c58 g     F .text	00000128 OSFlagNameGet
020033cc g     F .text	000000c0 detect_collide
0201f62c g     F .text	0000005c OSTimeGet
02020654 g     F .text	00000068 alt_up_accelerometer_spi_read
020206bc g     F .text	00000064 alt_up_accelerometer_spi_write
0200fa2c g     F .text	0000022c __smakebuf_r
0200990c g     F .text	000000f4 strlen
020216ac g     F .text	00000020 OSTaskSwHook
0202111c g     F .text	00000154 open
02030770 g     O .bss	00000b40 OSEventTbl
02007e84 g     F .text	000000dc .hidden __gedf2
020312b0 g     O .bss	00000510 OSTCBTbl
0201d994 g     F .text	00000100 OSSemSet
0202479c g     O .rwdata	00000004 __wctomb
02026518 g     O .bss	00000004 StartGameGrp
020139c8 g     F .text	0000013c __sprint_r
02020d28 g     F .text	00000034 alt_icache_flush_all
020066c4 g     F .text	00000164 floorf
02024838 g     O .rwdata	00000004 alt_priority_mask
0201d1bc g     F .text	00000240 OSSemDel
020265a8 g     O .bss	00000004 OSFlagFreeList
020026b0 g     F .text	000006f4 task3
020247d0 g     O .rwdata	00000002 OSEventNameSize
0201ae80 g     F .text	00000240 OSMboxDel
02009af0 g     F .text	00000050 __vfprintf_internal
020265ac g     O .bss	00000001 OSStatRdy
020317c0 g     O .bss	00000054 OSTCBPrioTbl
02015a80 g     F .text	00000064 _wctomb_r
0201714c g     F .text	000000c4 __env_lock
02024816 g     O .rwdata	00000002 OSTaskSwHookEn
0200876c g     F .text	000008fc .hidden __subdf3
020114a8 g     F .text	000000ec __lo0bits
0202483c g     O .rwdata	00000008 alt_alarm_list
020247de g     O .rwdata	00000002 OSFlagWidth
02020bd8 g     F .text	00000060 _do_ctors
020159a8 g     F .text	000000d8 wcrtomb
0201684c g     F .text	000000d0 close
02026558 g     O .bss	00000004 alt_envsem
020265b0 g     O .bss	00000004 OSIdleCtrRun
02018310 g     F .text	00000020 OSVersion
02024828 g     O .rwdata	00000002 OSTmrCfgWheelSize
02016b7c g     F .text	00000084 alt_load
0201f190 g     F .text	00000070 OS_TaskStkClr
02024802 g     O .rwdata	00000002 OSTaskCreateEn
02018900 g     F .text	00000068 OS_EventWaitListInit
0201551c g     F .text	00000068 fputwc
0202174c g     F .text	00000020 OSTaskIdleHook
0200e8c4 g     F .text	00000020 __sinit_lock_acquire
020110f8 g     F .text	00000194 __multadd
0201ee88 g     F .text	000001e4 OSTaskSuspend
0201107c g     F .text	0000007c _Bfree
0200463c g     F .text	00000414 __ieee754_atan2f
02018fa8 g     F .text	0000005c OS_TaskIdle
0202482e g     O .rwdata	00000002 OSTmrTblSize
0201ce30 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409214 	ori	at,at,584
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d40 	call	20001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	2017d240 	call	2017d24 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001526 	beq	r2,zero,2000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 200013c:	008080f4 	movhi	r2,515
 2000140:	10860504 	addi	r2,r2,6164
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080f4 	movhi	r2,515
 2000158:	10860504 	addi	r2,r2,6164
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	e17ffd17 	ldw	r5,-12(fp)
 2000174:	1009883a 	mov	r4,r2
 2000178:	183ee83a 	callr	r3
#endif
        break;
 200017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000180:	0005313a 	rdctl	r2,ipending
 2000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000188:	e0bfff17 	ldw	r2,-4(fp)
 200018c:	00000706 	br	20001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 2000190:	e0bffc17 	ldw	r2,-16(fp)
 2000194:	1085883a 	add	r2,r2,r2
 2000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 200019c:	e0bffd17 	ldw	r2,-12(fp)
 20001a0:	10800044 	addi	r2,r2,1
 20001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a8:	003fe006 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001b0:	e0bffb17 	ldw	r2,-20(fp)
 20001b4:	103fda1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b8:	2017d700 	call	2017d70 <OSIntExit>
}
 20001bc:	0001883a 	nop
 20001c0:	e037883a 	mov	sp,fp
 20001c4:	dfc00117 	ldw	ra,4(sp)
 20001c8:	df000017 	ldw	fp,0(sp)
 20001cc:	dec00204 	addi	sp,sp,8
 20001d0:	f800283a 	ret

020001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d4:	defffb04 	addi	sp,sp,-20
 20001d8:	dfc00415 	stw	ra,16(sp)
 20001dc:	df000315 	stw	fp,12(sp)
 20001e0:	df000304 	addi	fp,sp,12
 20001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e8:	000531fa 	rdctl	r2,exception
 20001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001f0:	e0bffd17 	ldw	r2,-12(fp)
 20001f4:	10801f0c 	andi	r2,r2,124
 20001f8:	1004d0ba 	srli	r2,r2,2
 20001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 2000200:	0005333a 	rdctl	r2,badaddr
 2000204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000208:	d0a7be17 	ldw	r2,-24840(gp)
 200020c:	10000726 	beq	r2,zero,200022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 2000210:	d0a7be17 	ldw	r2,-24840(gp)
 2000214:	e0fffd17 	ldw	r3,-12(fp)
 2000218:	e1bffe17 	ldw	r6,-8(fp)
 200021c:	e17fff17 	ldw	r5,-4(fp)
 2000220:	1809883a 	mov	r4,r3
 2000224:	103ee83a 	callr	r2
 2000228:	00000206 	br	2000234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 200022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000230:	0005883a 	mov	r2,zero
}
 2000234:	e037883a 	mov	sp,fp
 2000238:	dfc00117 	ldw	ra,4(sp)
 200023c:	df000017 	ldw	fp,0(sp)
 2000240:	dec00204 	addi	sp,sp,8
 2000244:	f800283a 	ret

Disassembly of section .text:

02000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 200024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 2000250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000254:	00bffd16 	blt	zero,r2,200024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000258:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 200025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000260:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000264:	d6b1b214 	ori	gp,gp,50888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000268:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 200026c:	10993514 	ori	r2,r2,25812

    movhi r3, %hi(__bss_end)
 2000270:	00c080f4 	movhi	r3,515
    ori r3, r3, %lo(__bss_end)
 2000274:	18c64514 	ori	r3,r3,6420

    beq r2, r3, 1f
 2000278:	10c00326 	beq	r2,r3,2000288 <_start+0x40>

0:
    stw zero, (r2)
 200027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000284:	10fffd36 	bltu	r2,r3,200027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000288:	2016b7c0 	call	2016b7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 200028c:	2016d100 	call	2016d10 <alt_main>

02000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000290:	003fff06 	br	2000290 <alt_after_alt_main>

02000294 <task1>:


/*  */

void task1(void* pdata)
{
 2000294:	deffe704 	addi	sp,sp,-100
 2000298:	dfc01815 	stw	ra,96(sp)
 200029c:	df001715 	stw	fp,92(sp)
 20002a0:	df001704 	addi	fp,sp,92
 20002a4:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	int shoot = 0;
 20002a8:	e03fea15 	stw	zero,-88(fp)
	int x_axis,y_axis;


	//volatile int * MTL_controller = (int *) MTL_IP_BASE;
	int count_old = 0;
 20002ac:	e03ff115 	stw	zero,-60(fp)
	int count = 0;
 20002b0:	e03feb15 	stw	zero,-84(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 20002b4:	e03ff015 	stw	zero,-64(fp)

	while (1)
	{


        DEBUG_PRINT("[Task 1] wait for isActive\n");
 20002b8:	010080b4 	movhi	r4,514
 20002bc:	21080104 	addi	r4,r4,8196
 20002c0:	20098d40 	call	20098d4 <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002c4:	d0e79317 	ldw	r3,-25012(gp)
 20002c8:	e0bff804 	addi	r2,fp,-32
 20002cc:	d8800015 	stw	r2,0(sp)
 20002d0:	000f883a 	mov	r7,zero
 20002d4:	01802084 	movi	r6,130
 20002d8:	01400044 	movi	r5,1
 20002dc:	1809883a 	mov	r4,r3
 20002e0:	2019ecc0 	call	2019ecc <OSFlagPend>
		IOWR(MTL_IP_BASE,13,0);
 20002e4:	0007883a 	mov	r3,zero
 20002e8:	008000b4 	movhi	r2,2
 20002ec:	10800d04 	addi	r2,r2,52
 20002f0:	10c00035 	stwio	r3,0(r2)
		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20002f4:	00004c06 	br	2000428 <task1+0x194>
		{
			count_old = count;
 20002f8:	e0bfeb17 	ldw	r2,-84(fp)
 20002fc:	e0bff115 	stw	r2,-60(fp)
			count = IORD(MTL_IP_BASE,10); // récupère le nombre de doigts présent sur l'écran
 2000300:	008000b4 	movhi	r2,2
 2000304:	10800a04 	addi	r2,r2,40
 2000308:	10800037 	ldwio	r2,0(r2)
 200030c:	e0bfeb15 	stw	r2,-84(fp)
			int pos1 = IORD(MTL_IP_BASE,11);
 2000310:	008000b4 	movhi	r2,2
 2000314:	10800b04 	addi	r2,r2,44
 2000318:	10800037 	ldwio	r2,0(r2)
 200031c:	e0bff215 	stw	r2,-56(fp)
			int pos2 = IORD(MTL_IP_BASE,12);
 2000320:	008000b4 	movhi	r2,2
 2000324:	10800c04 	addi	r2,r2,48
 2000328:	10800037 	ldwio	r2,0(r2)
 200032c:	e0bff315 	stw	r2,-52(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 2000330:	e0bff117 	ldw	r2,-60(fp)
 2000334:	10800058 	cmpnei	r2,r2,1
 2000338:	1000121e 	bne	r2,zero,2000384 <task1+0xf0>
 200033c:	e0bfeb17 	ldw	r2,-84(fp)
 2000340:	10800098 	cmpnei	r2,r2,2
 2000344:	10000f1e 	bne	r2,zero,2000384 <task1+0xf0>
			{
				DEBUG_PRINT("[Task 1] start gesture\n");
 2000348:	010080b4 	movhi	r4,514
 200034c:	21080804 	addi	r4,r4,8224
 2000350:	20098d40 	call	20098d4 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000354:	e0bff217 	ldw	r2,-56(fp)
 2000358:	1080ffcc 	andi	r2,r2,1023
 200035c:	e0bfec15 	stw	r2,-80(fp)
				y1_gesture_start = pos1 >> 10;
 2000360:	e0bff217 	ldw	r2,-56(fp)
 2000364:	1005d2ba 	srai	r2,r2,10
 2000368:	e0bfee15 	stw	r2,-72(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 200036c:	e0bff317 	ldw	r2,-52(fp)
 2000370:	1080ffcc 	andi	r2,r2,1023
 2000374:	e0bff415 	stw	r2,-48(fp)
				y2_gesture_start = pos2 >> 10;
 2000378:	e0bff317 	ldw	r2,-52(fp)
 200037c:	1005d2ba 	srai	r2,r2,10
 2000380:	e0bff515 	stw	r2,-44(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000384:	e0bff117 	ldw	r2,-60(fp)
 2000388:	10800098 	cmpnei	r2,r2,2
 200038c:	1000261e 	bne	r2,zero,2000428 <task1+0x194>
 2000390:	e0bfeb17 	ldw	r2,-84(fp)
 2000394:	10800058 	cmpnei	r2,r2,1
 2000398:	1000231e 	bne	r2,zero,2000428 <task1+0x194>
			{
				DEBUG_PRINT("[Task 1] stop gesture\n");
 200039c:	010080b4 	movhi	r4,514
 20003a0:	21080e04 	addi	r4,r4,8248
 20003a4:	20098d40 	call	20098d4 <puts>

				x1_gesture_stop = pos1 & 0x0003FF;
 20003a8:	e0bff217 	ldw	r2,-56(fp)
 20003ac:	1080ffcc 	andi	r2,r2,1023
 20003b0:	e0bff615 	stw	r2,-40(fp)
				y1_gesture_stop = pos1 >> 10;
 20003b4:	e0bff217 	ldw	r2,-56(fp)
 20003b8:	1005d2ba 	srai	r2,r2,10
 20003bc:	e0bff715 	stw	r2,-36(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 20003c0:	e0bff317 	ldw	r2,-52(fp)
 20003c4:	1080ffcc 	andi	r2,r2,1023
 20003c8:	e0bfed15 	stw	r2,-76(fp)
				y2_gesture_stop = pos2 >> 10;
 20003cc:	e0bff317 	ldw	r2,-52(fp)
 20003d0:	1005d2ba 	srai	r2,r2,10
 20003d4:	e0bfef15 	stw	r2,-68(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003d8:	e0bfec17 	ldw	r2,-80(fp)
 20003dc:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003e0:	e0fff617 	ldw	r3,-40(fp)
 20003e4:	18800e16 	blt	r3,r2,2000420 <task1+0x18c>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003e8:	e0bfec17 	ldw	r2,-80(fp)
 20003ec:	10c00784 	addi	r3,r2,30
 20003f0:	e0bff617 	ldw	r2,-40(fp)
 20003f4:	18800a16 	blt	r3,r2,2000420 <task1+0x18c>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003f8:	e0bfee17 	ldw	r2,-72(fp)
 20003fc:	10bff884 	addi	r2,r2,-30
 2000400:	e0fff717 	ldw	r3,-36(fp)
 2000404:	18800616 	blt	r3,r2,2000420 <task1+0x18c>
 2000408:	e0bfee17 	ldw	r2,-72(fp)
 200040c:	10c00784 	addi	r3,r2,30
 2000410:	e0bff717 	ldw	r2,-36(fp)
 2000414:	18800216 	blt	r3,r2,2000420 <task1+0x18c>
 2000418:	00800044 	movi	r2,1
 200041c:	00000106 	br	2000424 <task1+0x190>
 2000420:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 2000424:	e0bff015 	stw	r2,-64(fp)
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
		IOWR(MTL_IP_BASE,13,0);
		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 2000428:	e0bff017 	ldw	r2,-64(fp)
 200042c:	103fb226 	beq	r2,zero,20002f8 <task1+0x64>

			//*(MTL_controller + 5) = (y1_gesture_start << 10) + x1_gesture_start;
			//*(MTL_controller + 6) = (y2_gesture_start << 10) + x2_gesture_start;
			//*(MTL_controller + 7) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}
		IOWR(MTL_IP_BASE,13, 1);
 2000430:	00c00044 	movi	r3,1
 2000434:	008000b4 	movhi	r2,2
 2000438:	10800d04 	addi	r2,r2,52
 200043c:	10c00035 	stwio	r3,0(r2)

		count_old = 0;
 2000440:	e03ff115 	stw	zero,-60(fp)
		count = 0;
 2000444:	e03feb15 	stw	zero,-84(fp)
		shoot = 0;
 2000448:	e03fea15 	stw	zero,-88(fp)
  		int x = 446;
 200044c:	00806f84 	movi	r2,446
 2000450:	e0bffb15 	stw	r2,-20(fp)
  		int y = 263;
 2000454:	008041c4 	movi	r2,263
 2000458:	e0bffc15 	stw	r2,-16(fp)
  		IOWR(MTL_IP_BASE,11,(y<<10)+x);
 200045c:	e0bffc17 	ldw	r2,-16(fp)
 2000460:	100692ba 	slli	r3,r2,10
 2000464:	e0bffb17 	ldw	r2,-20(fp)
 2000468:	1887883a 	add	r3,r3,r2
 200046c:	008000b4 	movhi	r2,2
 2000470:	10800b04 	addi	r2,r2,44
 2000474:	10c00035 	stwio	r3,0(r2)
  		OSTimeDlyHMSM(0, 0, 0, 500);
 2000478:	01c07d04 	movi	r7,500
 200047c:	000d883a 	mov	r6,zero
 2000480:	000b883a 	mov	r5,zero
 2000484:	0009883a 	mov	r4,zero
 2000488:	201f3040 	call	201f304 <OSTimeDlyHMSM>

  		while(!shoot)
 200048c:	00003506 	br	2000564 <task1+0x2d0>
  		{
  			count_old = count;
 2000490:	e0bfeb17 	ldw	r2,-84(fp)
 2000494:	e0bff115 	stw	r2,-60(fp)
  			count = IORD(MTL_IP_BASE,10);
 2000498:	008000b4 	movhi	r2,2
 200049c:	10800a04 	addi	r2,r2,40
 20004a0:	10800037 	ldwio	r2,0(r2)
 20004a4:	e0bfeb15 	stw	r2,-84(fp)
  			if(count_old == 0 && count == 1)
 20004a8:	e0bff117 	ldw	r2,-60(fp)
 20004ac:	1000061e 	bne	r2,zero,20004c8 <task1+0x234>
 20004b0:	e0bfeb17 	ldw	r2,-84(fp)
 20004b4:	10800058 	cmpnei	r2,r2,1
 20004b8:	1000031e 	bne	r2,zero,20004c8 <task1+0x234>
  				shoot = 1;
 20004bc:	00800044 	movi	r2,1
 20004c0:	e0bfea15 	stw	r2,-88(fp)
 20004c4:	00002206 	br	2000550 <task1+0x2bc>
  			else{
  			   alt_up_accelerometer_spi_read_y_axis(accel_spi,  &y_axis);
 20004c8:	d0a78317 	ldw	r2,-25076(gp)
 20004cc:	e0fffa04 	addi	r3,fp,-24
 20004d0:	180b883a 	mov	r5,r3
 20004d4:	1009883a 	mov	r4,r2
 20004d8:	20207ec0 	call	20207ec <alt_up_accelerometer_spi_read_y_axis>
  		       alt_up_accelerometer_spi_read_x_axis(accel_spi,  &x_axis);
 20004dc:	d0a78317 	ldw	r2,-25076(gp)
 20004e0:	e0fff904 	addi	r3,fp,-28
 20004e4:	180b883a 	mov	r5,r3
 20004e8:	1009883a 	mov	r4,r2
 20004ec:	20207200 	call	2020720 <alt_up_accelerometer_spi_read_x_axis>
  		       //printf("Accelerometer : (%d, %d)\n",x_axis, y_axis);
  		       y += -(x_axis) / 10;
 20004f0:	e0bff917 	ldw	r2,-28(fp)
 20004f4:	0085c83a 	sub	r2,zero,r2
 20004f8:	01400284 	movi	r5,10
 20004fc:	1009883a 	mov	r4,r2
 2000500:	2006ab40 	call	2006ab4 <__divsi3>
 2000504:	1007883a 	mov	r3,r2
 2000508:	e0bffc17 	ldw	r2,-16(fp)
 200050c:	1885883a 	add	r2,r3,r2
 2000510:	e0bffc15 	stw	r2,-16(fp)
  		       x += y_axis / 10;
 2000514:	e0bffa17 	ldw	r2,-24(fp)
 2000518:	01400284 	movi	r5,10
 200051c:	1009883a 	mov	r4,r2
 2000520:	2006ab40 	call	2006ab4 <__divsi3>
 2000524:	1007883a 	mov	r3,r2
 2000528:	e0bffb17 	ldw	r2,-20(fp)
 200052c:	1885883a 	add	r2,r3,r2
 2000530:	e0bffb15 	stw	r2,-20(fp)
  		       IOWR(MTL_IP_BASE,11,(y<<10)+x);
 2000534:	e0bffc17 	ldw	r2,-16(fp)
 2000538:	100692ba 	slli	r3,r2,10
 200053c:	e0bffb17 	ldw	r2,-20(fp)
 2000540:	1887883a 	add	r3,r3,r2
 2000544:	008000b4 	movhi	r2,2
 2000548:	10800b04 	addi	r2,r2,44
 200054c:	10c00035 	stwio	r3,0(r2)
  				// play with the accelerometer

  			}
  			OSTimeDlyHMSM(0, 0, 0, 50);
 2000550:	01c00c84 	movi	r7,50
 2000554:	000d883a 	mov	r6,zero
 2000558:	000b883a 	mov	r5,zero
 200055c:	0009883a 	mov	r4,zero
 2000560:	201f3040 	call	201f304 <OSTimeDlyHMSM>
  		int x = 446;
  		int y = 263;
  		IOWR(MTL_IP_BASE,11,(y<<10)+x);
  		OSTimeDlyHMSM(0, 0, 0, 500);

  		while(!shoot)
 2000564:	e0bfea17 	ldw	r2,-88(fp)
 2000568:	103fc926 	beq	r2,zero,2000490 <task1+0x1fc>
  				// play with the accelerometer

  			}
  			OSTimeDlyHMSM(0, 0, 0, 50);
  		}
  		IOWR(MTL_IP_BASE,13, 0);
 200056c:	0007883a 	mov	r3,zero
 2000570:	008000b4 	movhi	r2,2
 2000574:	10800d04 	addi	r2,r2,52
 2000578:	10c00035 	stwio	r3,0(r2)

		int x_dir = (x2_gesture_stop - x1_gesture_start);
 200057c:	e0ffed17 	ldw	r3,-76(fp)
 2000580:	e0bfec17 	ldw	r2,-80(fp)
 2000584:	1885c83a 	sub	r2,r3,r2
 2000588:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 200058c:	e0ffef17 	ldw	r3,-68(fp)
 2000590:	e0bfee17 	ldw	r2,-72(fp)
 2000594:	1885c83a 	sub	r2,r3,r2
 2000598:	e0bffe15 	stw	r2,-8(fp)
		DEBUG_PRINT("[Task 1] Send value : (%d, %d) - (%d, %d)\n", x_dir, y_dir,x,y);
 200059c:	e0fffd17 	ldw	r3,-12(fp)
 20005a0:	e13ffe17 	ldw	r4,-8(fp)
 20005a4:	e17ffb17 	ldw	r5,-20(fp)
 20005a8:	e0bffc17 	ldw	r2,-16(fp)
 20005ac:	d8800015 	stw	r2,0(sp)
 20005b0:	280f883a 	mov	r7,r5
 20005b4:	200d883a 	mov	r6,r4
 20005b8:	180b883a 	mov	r5,r3
 20005bc:	010080b4 	movhi	r4,514
 20005c0:	21081404 	addi	r4,r4,8272
 20005c4:	20097540 	call	2009754 <printf>
		OSMboxPost(MailBox1, &x_dir);
 20005c8:	d0a79217 	ldw	r2,-25016(gp)
 20005cc:	e0fffd04 	addi	r3,fp,-12
 20005d0:	180b883a 	mov	r5,r3
 20005d4:	1009883a 	mov	r4,r2
 20005d8:	201b4600 	call	201b460 <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 20005dc:	d0a78c17 	ldw	r2,-25040(gp)
 20005e0:	e0fffe04 	addi	r3,fp,-8
 20005e4:	180b883a 	mov	r5,r3
 20005e8:	1009883a 	mov	r4,r2
 20005ec:	201b4600 	call	201b460 <OSMboxPost>
		OSMboxPost(MailBox10,&x);
 20005f0:	d0a78b17 	ldw	r2,-25044(gp)
 20005f4:	e0fffb04 	addi	r3,fp,-20
 20005f8:	180b883a 	mov	r5,r3
 20005fc:	1009883a 	mov	r4,r2
 2000600:	201b4600 	call	201b460 <OSMboxPost>
		OSMboxPost(MailBox11,&y);
 2000604:	d0a79117 	ldw	r2,-25020(gp)
 2000608:	e0fffc04 	addi	r3,fp,-16
 200060c:	180b883a 	mov	r5,r3
 2000610:	1009883a 	mov	r4,r2
 2000614:	201b4600 	call	201b460 <OSMboxPost>
		gesture_detected = 0;
 2000618:	e03ff015 	stw	zero,-64(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 200061c:	01c07d04 	movi	r7,500
 2000620:	000d883a 	mov	r6,zero
 2000624:	000b883a 	mov	r5,zero
 2000628:	0009883a 	mov	r4,zero
 200062c:	201f3040 	call	201f304 <OSTimeDlyHMSM>
	}
 2000630:	003f2106 	br	20002b8 <task1+0x24>

02000634 <task2>:
}

void task2(void* pdata)
{
 2000634:	deff3804 	addi	sp,sp,-800
 2000638:	dfc0c715 	stw	ra,796(sp)
 200063c:	df00c615 	stw	fp,792(sp)
 2000640:	dd40c515 	stw	r21,788(sp)
 2000644:	dd00c415 	stw	r20,784(sp)
 2000648:	dcc0c315 	stw	r19,780(sp)
 200064c:	dc80c215 	stw	r18,776(sp)
 2000650:	dc40c115 	stw	r17,772(sp)
 2000654:	dc00c015 	stw	r16,768(sp)
 2000658:	df00c604 	addi	fp,sp,792
 200065c:	e13ff915 	stw	r4,-28(fp)

  INT8U err;
  INT8U opt_task2;
  volatile int * display = (int *) MTL_IP_BASE;
 2000660:	008000b4 	movhi	r2,2
 2000664:	e0bf4015 	stw	r2,-768(fp)

  float ball[10][2] =  {{266.0, 263.0}, // white
 2000668:	008080b4 	movhi	r2,514
 200066c:	10884404 	addi	r2,r2,8464
 2000670:	e0ff4c04 	addi	r3,fp,-720
 2000674:	1009883a 	mov	r4,r2
 2000678:	00801404 	movi	r2,80
 200067c:	100d883a 	mov	r6,r2
 2000680:	200b883a 	mov	r5,r4
 2000684:	1809883a 	mov	r4,r3
 2000688:	20093a40 	call	20093a4 <memcpy>
		  	  	  	  	{649.0, 222.0},
		  	  	  	  	{649.0, 249.0},
		  	  	  	  	{649.0, 277.0},
		  	  	  	  	{649.0, 304.0}};

  IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 200068c:	e0bf4017 	ldw	r2,-768(fp)
 2000690:	10800104 	addi	r2,r2,4
 2000694:	e0ff4d17 	ldw	r3,-716(fp)
 2000698:	1807fe72 	custom	249,r3,r3,zero
 200069c:	180892ba 	slli	r4,r3,10
 20006a0:	e0ff4c17 	ldw	r3,-720(fp)
 20006a4:	1807fe72 	custom	249,r3,r3,zero
 20006a8:	20c7883a 	add	r3,r4,r3
 20006ac:	10c00035 	stwio	r3,0(r2)
  IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 20006b0:	e0bf4017 	ldw	r2,-768(fp)
 20006b4:	10800204 	addi	r2,r2,8
 20006b8:	e0ff4f17 	ldw	r3,-708(fp)
 20006bc:	1807fe72 	custom	249,r3,r3,zero
 20006c0:	180892ba 	slli	r4,r3,10
 20006c4:	e0ff4e17 	ldw	r3,-712(fp)
 20006c8:	1807fe72 	custom	249,r3,r3,zero
 20006cc:	20c7883a 	add	r3,r4,r3
 20006d0:	10c00035 	stwio	r3,0(r2)
  IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 20006d4:	e0bf4017 	ldw	r2,-768(fp)
 20006d8:	10800304 	addi	r2,r2,12
 20006dc:	e0ff5117 	ldw	r3,-700(fp)
 20006e0:	1807fe72 	custom	249,r3,r3,zero
 20006e4:	180892ba 	slli	r4,r3,10
 20006e8:	e0ff5017 	ldw	r3,-704(fp)
 20006ec:	1807fe72 	custom	249,r3,r3,zero
 20006f0:	20c7883a 	add	r3,r4,r3
 20006f4:	10c00035 	stwio	r3,0(r2)
  IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 20006f8:	e0bf4017 	ldw	r2,-768(fp)
 20006fc:	10800404 	addi	r2,r2,16
 2000700:	e0ff5317 	ldw	r3,-692(fp)
 2000704:	1807fe72 	custom	249,r3,r3,zero
 2000708:	180892ba 	slli	r4,r3,10
 200070c:	e0ff5217 	ldw	r3,-696(fp)
 2000710:	1807fe72 	custom	249,r3,r3,zero
 2000714:	20c7883a 	add	r3,r4,r3
 2000718:	10c00035 	stwio	r3,0(r2)
  IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 200071c:	e0bf4017 	ldw	r2,-768(fp)
 2000720:	10800504 	addi	r2,r2,20
 2000724:	e0ff5517 	ldw	r3,-684(fp)
 2000728:	1807fe72 	custom	249,r3,r3,zero
 200072c:	180892ba 	slli	r4,r3,10
 2000730:	e0ff5417 	ldw	r3,-688(fp)
 2000734:	1807fe72 	custom	249,r3,r3,zero
 2000738:	20c7883a 	add	r3,r4,r3
 200073c:	10c00035 	stwio	r3,0(r2)
  IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 2000740:	e0bf4017 	ldw	r2,-768(fp)
 2000744:	10800604 	addi	r2,r2,24
 2000748:	e0ff5717 	ldw	r3,-676(fp)
 200074c:	1807fe72 	custom	249,r3,r3,zero
 2000750:	180892ba 	slli	r4,r3,10
 2000754:	e0ff5617 	ldw	r3,-680(fp)
 2000758:	1807fe72 	custom	249,r3,r3,zero
 200075c:	20c7883a 	add	r3,r4,r3
 2000760:	10c00035 	stwio	r3,0(r2)
  IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 2000764:	e0bf4017 	ldw	r2,-768(fp)
 2000768:	10800704 	addi	r2,r2,28
 200076c:	e0ff5917 	ldw	r3,-668(fp)
 2000770:	1807fe72 	custom	249,r3,r3,zero
 2000774:	180892ba 	slli	r4,r3,10
 2000778:	e0ff5817 	ldw	r3,-672(fp)
 200077c:	1807fe72 	custom	249,r3,r3,zero
 2000780:	20c7883a 	add	r3,r4,r3
 2000784:	10c00035 	stwio	r3,0(r2)
  IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 2000788:	e0bf4017 	ldw	r2,-768(fp)
 200078c:	10800804 	addi	r2,r2,32
 2000790:	e0ff5b17 	ldw	r3,-660(fp)
 2000794:	1807fe72 	custom	249,r3,r3,zero
 2000798:	180892ba 	slli	r4,r3,10
 200079c:	e0ff5a17 	ldw	r3,-664(fp)
 20007a0:	1807fe72 	custom	249,r3,r3,zero
 20007a4:	20c7883a 	add	r3,r4,r3
 20007a8:	10c00035 	stwio	r3,0(r2)
  IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 20007ac:	e0bf4017 	ldw	r2,-768(fp)
 20007b0:	10800904 	addi	r2,r2,36
 20007b4:	e0ff5d17 	ldw	r3,-652(fp)
 20007b8:	1807fe72 	custom	249,r3,r3,zero
 20007bc:	180892ba 	slli	r4,r3,10
 20007c0:	e0ff5c17 	ldw	r3,-656(fp)
 20007c4:	1807fe72 	custom	249,r3,r3,zero
 20007c8:	20c7883a 	add	r3,r4,r3
 20007cc:	10c00035 	stwio	r3,0(r2)
  IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 20007d0:	e0bf4017 	ldw	r2,-768(fp)
 20007d4:	10800a04 	addi	r2,r2,40
 20007d8:	e0ff5f17 	ldw	r3,-644(fp)
 20007dc:	1807fe72 	custom	249,r3,r3,zero
 20007e0:	180892ba 	slli	r4,r3,10
 20007e4:	e0ff5e17 	ldw	r3,-648(fp)
 20007e8:	1807fe72 	custom	249,r3,r3,zero
 20007ec:	20c7883a 	add	r3,r4,r3
 20007f0:	10c00035 	stwio	r3,0(r2)

  int collision[45][2]={{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
 20007f4:	e0bf6004 	addi	r2,fp,-640
 20007f8:	00c05a04 	movi	r3,360
 20007fc:	180d883a 	mov	r6,r3
 2000800:	000b883a 	mov	r5,zero
 2000804:	1009883a 	mov	r4,r2
 2000808:	200952c0 	call	200952c <memset>
  	  	  	  	        {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  	  	  	         	{0,0},{0,0},{0,0},{0,0},{0,0}};

  while (1)
  {
   opt_task2= OS_FLAG_SET;
 200080c:	00800044 	movi	r2,1
 2000810:	e0bf4105 	stb	r2,-764(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000814:	d0a78817 	ldw	r2,-25056(gp)
 2000818:	e0ff4103 	ldbu	r3,-764(fp)
 200081c:	e13f4b04 	addi	r4,fp,-724
 2000820:	200f883a 	mov	r7,r4
 2000824:	180d883a 	mov	r6,r3
 2000828:	01400044 	movi	r5,1
 200082c:	1009883a 	mov	r4,r2
 2000830:	201a4e40 	call	201a4e4 <OSFlagPost>
   int *vector_x = OSMboxPend(MailBox4,0,&err);
 2000834:	d0a78f17 	ldw	r2,-25028(gp)
 2000838:	e0ff4b04 	addi	r3,fp,-724
 200083c:	180d883a 	mov	r6,r3
 2000840:	000b883a 	mov	r5,zero
 2000844:	1009883a 	mov	r4,r2
 2000848:	201b0c00 	call	201b0c0 <OSMboxPend>
 200084c:	e0bf4215 	stw	r2,-760(fp)
   int *vector_y = OSMboxPend(MailBox5,0,&err);
 2000850:	d0a78917 	ldw	r2,-25052(gp)
 2000854:	e0ff4b04 	addi	r3,fp,-724
 2000858:	180d883a 	mov	r6,r3
 200085c:	000b883a 	mov	r5,zero
 2000860:	1009883a 	mov	r4,r2
 2000864:	201b0c00 	call	201b0c0 <OSMboxPend>
 2000868:	e0bf4315 	stw	r2,-756(fp)

   int *effect_x = OSMboxPend(MailBox12,0, &err);
 200086c:	d0a78d17 	ldw	r2,-25036(gp)
 2000870:	e0ff4b04 	addi	r3,fp,-724
 2000874:	180d883a 	mov	r6,r3
 2000878:	000b883a 	mov	r5,zero
 200087c:	1009883a 	mov	r4,r2
 2000880:	201b0c00 	call	201b0c0 <OSMboxPend>
 2000884:	e0bf4415 	stw	r2,-752(fp)
   int *effect_y = OSMboxPend(MailBox13,0, &err);
 2000888:	d0a78617 	ldw	r2,-25064(gp)
 200088c:	e0ff4b04 	addi	r3,fp,-724
 2000890:	180d883a 	mov	r6,r3
 2000894:	000b883a 	mov	r5,zero
 2000898:	1009883a 	mov	r4,r2
 200089c:	201b0c00 	call	201b0c0 <OSMboxPend>
 20008a0:	e0bf4515 	stw	r2,-748(fp)

   int *nbr_ball = OSMboxPend(MailBox8,0,&err);
 20008a4:	d0a78e17 	ldw	r2,-25032(gp)
 20008a8:	e0ff4b04 	addi	r3,fp,-724
 20008ac:	180d883a 	mov	r6,r3
 20008b0:	000b883a 	mov	r5,zero
 20008b4:	1009883a 	mov	r4,r2
 20008b8:	201b0c00 	call	201b0c0 <OSMboxPend>
 20008bc:	e0bf4615 	stw	r2,-744(fp)
   int number_of_ball = *nbr_ball;
 20008c0:	e0bf4617 	ldw	r2,-744(fp)
 20008c4:	10800017 	ldw	r2,0(r2)
 20008c8:	e0bfba15 	stw	r2,-280(fp)


   float x = (float) *vector_x;
 20008cc:	e0bf4217 	ldw	r2,-760(fp)
 20008d0:	10800017 	ldw	r2,0(r2)
 20008d4:	1005feb2 	custom	250,r2,r2,zero
 20008d8:	e0bf4715 	stw	r2,-740(fp)
   float y = (float) *vector_y;
 20008dc:	e0bf4317 	ldw	r2,-756(fp)
 20008e0:	10800017 	ldw	r2,0(r2)
 20008e4:	1005feb2 	custom	250,r2,r2,zero
 20008e8:	e0bf4815 	stw	r2,-736(fp)

   float length = sqrt(x*x + y*y);
 20008ec:	e0ff4717 	ldw	r3,-740(fp)
 20008f0:	e0bf4717 	ldw	r2,-740(fp)
 20008f4:	1887ff32 	custom	252,r3,r3,r2
 20008f8:	e13f4817 	ldw	r4,-736(fp)
 20008fc:	e0bf4817 	ldw	r2,-736(fp)
 2000900:	2085ff32 	custom	252,r2,r4,r2
 2000904:	1885ff72 	custom	253,r2,r3,r2
 2000908:	1009883a 	mov	r4,r2
 200090c:	20090680 	call	2009068 <__extendsfdf2>
 2000910:	100b883a 	mov	r5,r2
 2000914:	180d883a 	mov	r6,r3
 2000918:	2809883a 	mov	r4,r5
 200091c:	300b883a 	mov	r5,r6
 2000920:	2003e400 	call	2003e40 <sqrt>
 2000924:	100b883a 	mov	r5,r2
 2000928:	180d883a 	mov	r6,r3
 200092c:	2809883a 	mov	r4,r5
 2000930:	300b883a 	mov	r5,r6
 2000934:	20091780 	call	2009178 <__truncdfsf2>
 2000938:	1007883a 	mov	r3,r2
 200093c:	e0ff4915 	stw	r3,-732(fp)
   float direction [] = {x/length, y/length};
 2000940:	e0ff4717 	ldw	r3,-740(fp)
 2000944:	e0bf4917 	ldw	r2,-732(fp)
 2000948:	1885fff2 	custom	255,r2,r3,r2
 200094c:	e0bfbb15 	stw	r2,-276(fp)
 2000950:	e0ff4817 	ldw	r3,-736(fp)
 2000954:	e0bf4917 	ldw	r2,-732(fp)
 2000958:	1885fff2 	custom	255,r2,r3,r2
 200095c:	e0bfbc15 	stw	r2,-272(fp)
   float speed = fmin(length / 2.0, 400.0);
 2000960:	e13f4917 	ldw	r4,-732(fp)
 2000964:	20090680 	call	2009068 <__extendsfdf2>
 2000968:	1011883a 	mov	r8,r2
 200096c:	1813883a 	mov	r9,r3
 2000970:	000d883a 	mov	r6,zero
 2000974:	01d00034 	movhi	r7,16384
 2000978:	4009883a 	mov	r4,r8
 200097c:	480b883a 	mov	r5,r9
 2000980:	20075140 	call	2007514 <__divdf3>
 2000984:	1009883a 	mov	r4,r2
 2000988:	180b883a 	mov	r5,r3
 200098c:	2005883a 	mov	r2,r4
 2000990:	2807883a 	mov	r3,r5
 2000994:	000d883a 	mov	r6,zero
 2000998:	01d01e74 	movhi	r7,16505
 200099c:	1009883a 	mov	r4,r2
 20009a0:	180b883a 	mov	r5,r3
 20009a4:	2003a0c0 	call	2003a0c <fmin>
 20009a8:	100b883a 	mov	r5,r2
 20009ac:	180d883a 	mov	r6,r3
 20009b0:	2809883a 	mov	r4,r5
 20009b4:	300b883a 	mov	r5,r6
 20009b8:	20091780 	call	2009178 <__truncdfsf2>
 20009bc:	1007883a 	mov	r3,r2
 20009c0:	e0ff3f15 	stw	r3,-772(fp)

   float velocity [10][2] = {{direction[0] * speed/80.0, direction[1] * speed/80.0},
 20009c4:	e0bfe504 	addi	r2,fp,-108
 20009c8:	00c01404 	movi	r3,80
 20009cc:	180d883a 	mov	r6,r3
 20009d0:	000b883a 	mov	r5,zero
 20009d4:	1009883a 	mov	r4,r2
 20009d8:	200952c0 	call	200952c <memset>
 20009dc:	e0ffbb17 	ldw	r3,-276(fp)
 20009e0:	e0bf3f17 	ldw	r2,-772(fp)
 20009e4:	1887ff32 	custom	252,r3,r3,r2
 20009e8:	0090a834 	movhi	r2,17056
 20009ec:	1885fff2 	custom	255,r2,r3,r2
 20009f0:	e0bfe515 	stw	r2,-108(fp)
 20009f4:	e0ffbc17 	ldw	r3,-272(fp)
 20009f8:	e0bf3f17 	ldw	r2,-772(fp)
 20009fc:	1887ff32 	custom	252,r3,r3,r2
 2000a00:	0090a834 	movhi	r2,17056
 2000a04:	1885fff2 	custom	255,r2,r3,r2
 2000a08:	e0bfe615 	stw	r2,-104(fp)
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0}};

   DEBUG_PRINT("[Task 2] Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);
 2000a0c:	e0bf4217 	ldw	r2,-760(fp)
 2000a10:	15000017 	ldw	r20,0(r2)
 2000a14:	e0bf4317 	ldw	r2,-756(fp)
 2000a18:	15400017 	ldw	r21,0(r2)
 2000a1c:	e13f3f17 	ldw	r4,-772(fp)
 2000a20:	20090680 	call	2009068 <__extendsfdf2>
 2000a24:	1025883a 	mov	r18,r2
 2000a28:	1827883a 	mov	r19,r3
 2000a2c:	e0bfe517 	ldw	r2,-108(fp)
 2000a30:	1009883a 	mov	r4,r2
 2000a34:	20090680 	call	2009068 <__extendsfdf2>
 2000a38:	1021883a 	mov	r16,r2
 2000a3c:	1823883a 	mov	r17,r3
 2000a40:	e0bfe617 	ldw	r2,-104(fp)
 2000a44:	1009883a 	mov	r4,r2
 2000a48:	20090680 	call	2009068 <__extendsfdf2>
 2000a4c:	1009883a 	mov	r4,r2
 2000a50:	180b883a 	mov	r5,r3
 2000a54:	d9000315 	stw	r4,12(sp)
 2000a58:	d9400415 	stw	r5,16(sp)
 2000a5c:	dc000115 	stw	r16,4(sp)
 2000a60:	dc400215 	stw	r17,8(sp)
 2000a64:	dcc00015 	stw	r19,0(sp)
 2000a68:	900f883a 	mov	r7,r18
 2000a6c:	a80d883a 	mov	r6,r21
 2000a70:	a00b883a 	mov	r5,r20
 2000a74:	010080b4 	movhi	r4,514
 2000a78:	21081f04 	addi	r4,r4,8316
 2000a7c:	20097540 	call	2009754 <printf>
   DEBUG_PRINT(" effect : (%d, %d)\n",*effect_x, *effect_y);
 2000a80:	e0bf4417 	ldw	r2,-752(fp)
 2000a84:	10c00017 	ldw	r3,0(r2)
 2000a88:	e0bf4517 	ldw	r2,-748(fp)
 2000a8c:	10800017 	ldw	r2,0(r2)
 2000a90:	100d883a 	mov	r6,r2
 2000a94:	180b883a 	mov	r5,r3
 2000a98:	010080b4 	movhi	r4,514
 2000a9c:	21083504 	addi	r4,r4,8404
 2000aa0:	20097540 	call	2009754 <printf>

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
 2000aa4:	e0bfbd04 	addi	r2,fp,-268
 2000aa8:	00c02804 	movi	r3,160
 2000aac:	180d883a 	mov	r6,r3
 2000ab0:	000b883a 	mov	r5,zero
 2000ab4:	1009883a 	mov	r4,r2
 2000ab8:	200952c0 	call	200952c <memset>
   float theta = atan2f(*effect_x-446, *effect_y-263);
 2000abc:	e0bf4417 	ldw	r2,-752(fp)
 2000ac0:	10800017 	ldw	r2,0(r2)
 2000ac4:	10bf9084 	addi	r2,r2,-446
 2000ac8:	1007feb2 	custom	250,r3,r2,zero
 2000acc:	e0bf4517 	ldw	r2,-748(fp)
 2000ad0:	10800017 	ldw	r2,0(r2)
 2000ad4:	10bfbe44 	addi	r2,r2,-263
 2000ad8:	1005feb2 	custom	250,r2,r2,zero
 2000adc:	100b883a 	mov	r5,r2
 2000ae0:	1809883a 	mov	r4,r3
 2000ae4:	2003fb40 	call	2003fb4 <atan2f>
 2000ae8:	e0bf4a15 	stw	r2,-728(fp)
   DEBUG_PRINT("theta : %f",theta);
 2000aec:	e13f4a17 	ldw	r4,-728(fp)
 2000af0:	20090680 	call	2009068 <__extendsfdf2>
 2000af4:	100d883a 	mov	r6,r2
 2000af8:	180f883a 	mov	r7,r3
 2000afc:	300b883a 	mov	r5,r6
 2000b00:	380d883a 	mov	r6,r7
 2000b04:	010080b4 	movhi	r4,514
 2000b08:	21083a04 	addi	r4,r4,8424
 2000b0c:	20097540 	call	2009754 <printf>

   while(speed >= 0.1)
 2000b10:	0006bf06 	br	2002610 <task2+0x1fdc>
   {
	   //Border Collide

	   borderCollide(ball[0], border_collision[0], velocity[0]);
 2000b14:	e13fe504 	addi	r4,fp,-108
 2000b18:	e0ffbd04 	addi	r3,fp,-268
 2000b1c:	e0bf4c04 	addi	r2,fp,-720
 2000b20:	200d883a 	mov	r6,r4
 2000b24:	180b883a 	mov	r5,r3
 2000b28:	1009883a 	mov	r4,r2
 2000b2c:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[1], border_collision[1], velocity[1]);
 2000b30:	e0bfe504 	addi	r2,fp,-108
 2000b34:	11000204 	addi	r4,r2,8
 2000b38:	e0bfbd04 	addi	r2,fp,-268
 2000b3c:	10c00404 	addi	r3,r2,16
 2000b40:	e0bf4c04 	addi	r2,fp,-720
 2000b44:	10800204 	addi	r2,r2,8
 2000b48:	200d883a 	mov	r6,r4
 2000b4c:	180b883a 	mov	r5,r3
 2000b50:	1009883a 	mov	r4,r2
 2000b54:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[2], border_collision[2], velocity[2]);
 2000b58:	e0bfe504 	addi	r2,fp,-108
 2000b5c:	11000404 	addi	r4,r2,16
 2000b60:	e0bfbd04 	addi	r2,fp,-268
 2000b64:	10c00804 	addi	r3,r2,32
 2000b68:	e0bf4c04 	addi	r2,fp,-720
 2000b6c:	10800404 	addi	r2,r2,16
 2000b70:	200d883a 	mov	r6,r4
 2000b74:	180b883a 	mov	r5,r3
 2000b78:	1009883a 	mov	r4,r2
 2000b7c:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[3], border_collision[3], velocity[3]);
 2000b80:	e0bfe504 	addi	r2,fp,-108
 2000b84:	11000604 	addi	r4,r2,24
 2000b88:	e0bfbd04 	addi	r2,fp,-268
 2000b8c:	10c00c04 	addi	r3,r2,48
 2000b90:	e0bf4c04 	addi	r2,fp,-720
 2000b94:	10800604 	addi	r2,r2,24
 2000b98:	200d883a 	mov	r6,r4
 2000b9c:	180b883a 	mov	r5,r3
 2000ba0:	1009883a 	mov	r4,r2
 2000ba4:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[4], border_collision[4], velocity[4]);
 2000ba8:	e0bfe504 	addi	r2,fp,-108
 2000bac:	11000804 	addi	r4,r2,32
 2000bb0:	e0bfbd04 	addi	r2,fp,-268
 2000bb4:	10c01004 	addi	r3,r2,64
 2000bb8:	e0bf4c04 	addi	r2,fp,-720
 2000bbc:	10800804 	addi	r2,r2,32
 2000bc0:	200d883a 	mov	r6,r4
 2000bc4:	180b883a 	mov	r5,r3
 2000bc8:	1009883a 	mov	r4,r2
 2000bcc:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[5], border_collision[5], velocity[5]);
 2000bd0:	e0bfe504 	addi	r2,fp,-108
 2000bd4:	11000a04 	addi	r4,r2,40
 2000bd8:	e0bfbd04 	addi	r2,fp,-268
 2000bdc:	10c01404 	addi	r3,r2,80
 2000be0:	e0bf4c04 	addi	r2,fp,-720
 2000be4:	10800a04 	addi	r2,r2,40
 2000be8:	200d883a 	mov	r6,r4
 2000bec:	180b883a 	mov	r5,r3
 2000bf0:	1009883a 	mov	r4,r2
 2000bf4:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[6], border_collision[6], velocity[6]);
 2000bf8:	e0bfe504 	addi	r2,fp,-108
 2000bfc:	11000c04 	addi	r4,r2,48
 2000c00:	e0bfbd04 	addi	r2,fp,-268
 2000c04:	10c01804 	addi	r3,r2,96
 2000c08:	e0bf4c04 	addi	r2,fp,-720
 2000c0c:	10800c04 	addi	r2,r2,48
 2000c10:	200d883a 	mov	r6,r4
 2000c14:	180b883a 	mov	r5,r3
 2000c18:	1009883a 	mov	r4,r2
 2000c1c:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[7], border_collision[7], velocity[7]);
 2000c20:	e0bfe504 	addi	r2,fp,-108
 2000c24:	11000e04 	addi	r4,r2,56
 2000c28:	e0bfbd04 	addi	r2,fp,-268
 2000c2c:	10c01c04 	addi	r3,r2,112
 2000c30:	e0bf4c04 	addi	r2,fp,-720
 2000c34:	10800e04 	addi	r2,r2,56
 2000c38:	200d883a 	mov	r6,r4
 2000c3c:	180b883a 	mov	r5,r3
 2000c40:	1009883a 	mov	r4,r2
 2000c44:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[8], border_collision[8], velocity[8]);
 2000c48:	e0bfe504 	addi	r2,fp,-108
 2000c4c:	11001004 	addi	r4,r2,64
 2000c50:	e0bfbd04 	addi	r2,fp,-268
 2000c54:	10c02004 	addi	r3,r2,128
 2000c58:	e0bf4c04 	addi	r2,fp,-720
 2000c5c:	10801004 	addi	r2,r2,64
 2000c60:	200d883a 	mov	r6,r4
 2000c64:	180b883a 	mov	r5,r3
 2000c68:	1009883a 	mov	r4,r2
 2000c6c:	20032100 	call	2003210 <borderCollide>
       borderCollide(ball[9], border_collision[9], velocity[9]);
 2000c70:	e0bfe504 	addi	r2,fp,-108
 2000c74:	11001204 	addi	r4,r2,72
 2000c78:	e0bfbd04 	addi	r2,fp,-268
 2000c7c:	10c02404 	addi	r3,r2,144
 2000c80:	e0bf4c04 	addi	r2,fp,-720
 2000c84:	10801204 	addi	r2,r2,72
 2000c88:	200d883a 	mov	r6,r4
 2000c8c:	180b883a 	mov	r5,r3
 2000c90:	1009883a 	mov	r4,r2
 2000c94:	20032100 	call	2003210 <borderCollide>

       //Move the ball

       if(theta < 0.1)
 2000c98:	e13f4a17 	ldw	r4,-728(fp)
 2000c9c:	20090680 	call	2009068 <__extendsfdf2>
 2000ca0:	1011883a 	mov	r8,r2
 2000ca4:	1813883a 	mov	r9,r3
 2000ca8:	01a666b4 	movhi	r6,39322
 2000cac:	31a66684 	addi	r6,r6,-26214
 2000cb0:	01cfeeb4 	movhi	r7,16314
 2000cb4:	39e66644 	addi	r7,r7,-26215
 2000cb8:	4009883a 	mov	r4,r8
 2000cbc:	480b883a 	mov	r5,r9
 2000cc0:	2007f600 	call	2007f60 <__ledf2>
 2000cc4:	1000080e 	bge	r2,zero,2000ce8 <task2+0x6b4>
    	   moveBall(ball[0], velocity[0], 0, 0);
 2000cc8:	e0ffe504 	addi	r3,fp,-108
 2000ccc:	e0bf4c04 	addi	r2,fp,-720
 2000cd0:	000f883a 	mov	r7,zero
 2000cd4:	000d883a 	mov	r6,zero
 2000cd8:	180b883a 	mov	r5,r3
 2000cdc:	1009883a 	mov	r4,r2
 2000ce0:	20038140 	call	2003814 <moveBall>
 2000ce4:	00000706 	br	2000d04 <task2+0x6d0>
       else
    	   moveBall(ball[0], velocity[0],theta,1);
 2000ce8:	e0ffe504 	addi	r3,fp,-108
 2000cec:	e0bf4c04 	addi	r2,fp,-720
 2000cf0:	01c00044 	movi	r7,1
 2000cf4:	e1bf4a17 	ldw	r6,-728(fp)
 2000cf8:	180b883a 	mov	r5,r3
 2000cfc:	1009883a 	mov	r4,r2
 2000d00:	20038140 	call	2003814 <moveBall>
       moveBall(ball[1], velocity[1],0,0);
 2000d04:	e0bfe504 	addi	r2,fp,-108
 2000d08:	10c00204 	addi	r3,r2,8
 2000d0c:	e0bf4c04 	addi	r2,fp,-720
 2000d10:	10800204 	addi	r2,r2,8
 2000d14:	000f883a 	mov	r7,zero
 2000d18:	000d883a 	mov	r6,zero
 2000d1c:	180b883a 	mov	r5,r3
 2000d20:	1009883a 	mov	r4,r2
 2000d24:	20038140 	call	2003814 <moveBall>
       moveBall(ball[2], velocity[2],0,0);
 2000d28:	e0bfe504 	addi	r2,fp,-108
 2000d2c:	10c00404 	addi	r3,r2,16
 2000d30:	e0bf4c04 	addi	r2,fp,-720
 2000d34:	10800404 	addi	r2,r2,16
 2000d38:	000f883a 	mov	r7,zero
 2000d3c:	000d883a 	mov	r6,zero
 2000d40:	180b883a 	mov	r5,r3
 2000d44:	1009883a 	mov	r4,r2
 2000d48:	20038140 	call	2003814 <moveBall>
       moveBall(ball[3], velocity[3],0,0);
 2000d4c:	e0bfe504 	addi	r2,fp,-108
 2000d50:	10c00604 	addi	r3,r2,24
 2000d54:	e0bf4c04 	addi	r2,fp,-720
 2000d58:	10800604 	addi	r2,r2,24
 2000d5c:	000f883a 	mov	r7,zero
 2000d60:	000d883a 	mov	r6,zero
 2000d64:	180b883a 	mov	r5,r3
 2000d68:	1009883a 	mov	r4,r2
 2000d6c:	20038140 	call	2003814 <moveBall>
       moveBall(ball[4], velocity[4],0,0);
 2000d70:	e0bfe504 	addi	r2,fp,-108
 2000d74:	10c00804 	addi	r3,r2,32
 2000d78:	e0bf4c04 	addi	r2,fp,-720
 2000d7c:	10800804 	addi	r2,r2,32
 2000d80:	000f883a 	mov	r7,zero
 2000d84:	000d883a 	mov	r6,zero
 2000d88:	180b883a 	mov	r5,r3
 2000d8c:	1009883a 	mov	r4,r2
 2000d90:	20038140 	call	2003814 <moveBall>
       moveBall(ball[5], velocity[5],0,0);
 2000d94:	e0bfe504 	addi	r2,fp,-108
 2000d98:	10c00a04 	addi	r3,r2,40
 2000d9c:	e0bf4c04 	addi	r2,fp,-720
 2000da0:	10800a04 	addi	r2,r2,40
 2000da4:	000f883a 	mov	r7,zero
 2000da8:	000d883a 	mov	r6,zero
 2000dac:	180b883a 	mov	r5,r3
 2000db0:	1009883a 	mov	r4,r2
 2000db4:	20038140 	call	2003814 <moveBall>
       moveBall(ball[6], velocity[6],0,0);
 2000db8:	e0bfe504 	addi	r2,fp,-108
 2000dbc:	10c00c04 	addi	r3,r2,48
 2000dc0:	e0bf4c04 	addi	r2,fp,-720
 2000dc4:	10800c04 	addi	r2,r2,48
 2000dc8:	000f883a 	mov	r7,zero
 2000dcc:	000d883a 	mov	r6,zero
 2000dd0:	180b883a 	mov	r5,r3
 2000dd4:	1009883a 	mov	r4,r2
 2000dd8:	20038140 	call	2003814 <moveBall>
       moveBall(ball[7], velocity[7],0,0);
 2000ddc:	e0bfe504 	addi	r2,fp,-108
 2000de0:	10c00e04 	addi	r3,r2,56
 2000de4:	e0bf4c04 	addi	r2,fp,-720
 2000de8:	10800e04 	addi	r2,r2,56
 2000dec:	000f883a 	mov	r7,zero
 2000df0:	000d883a 	mov	r6,zero
 2000df4:	180b883a 	mov	r5,r3
 2000df8:	1009883a 	mov	r4,r2
 2000dfc:	20038140 	call	2003814 <moveBall>
       moveBall(ball[8], velocity[8],0,0);
 2000e00:	e0bfe504 	addi	r2,fp,-108
 2000e04:	10c01004 	addi	r3,r2,64
 2000e08:	e0bf4c04 	addi	r2,fp,-720
 2000e0c:	10801004 	addi	r2,r2,64
 2000e10:	000f883a 	mov	r7,zero
 2000e14:	000d883a 	mov	r6,zero
 2000e18:	180b883a 	mov	r5,r3
 2000e1c:	1009883a 	mov	r4,r2
 2000e20:	20038140 	call	2003814 <moveBall>
       moveBall(ball[9], velocity[9],0,0);
 2000e24:	e0bfe504 	addi	r2,fp,-108
 2000e28:	10c01204 	addi	r3,r2,72
 2000e2c:	e0bf4c04 	addi	r2,fp,-720
 2000e30:	10801204 	addi	r2,r2,72
 2000e34:	000f883a 	mov	r7,zero
 2000e38:	000d883a 	mov	r6,zero
 2000e3c:	180b883a 	mov	r5,r3
 2000e40:	1009883a 	mov	r4,r2
 2000e44:	20038140 	call	2003814 <moveBall>

       //Whole collision

       if(whole_collide(ball[1],velocity[1])) number_of_ball -= 1;
 2000e48:	e0bfe504 	addi	r2,fp,-108
 2000e4c:	10c00204 	addi	r3,r2,8
 2000e50:	e0bf4c04 	addi	r2,fp,-720
 2000e54:	10800204 	addi	r2,r2,8
 2000e58:	180b883a 	mov	r5,r3
 2000e5c:	1009883a 	mov	r4,r2
 2000e60:	200309c0 	call	200309c <whole_collide>
 2000e64:	10000326 	beq	r2,zero,2000e74 <task2+0x840>
 2000e68:	e0bfba17 	ldw	r2,-280(fp)
 2000e6c:	10bfffc4 	addi	r2,r2,-1
 2000e70:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[2],velocity[2])) number_of_ball -= 1;
 2000e74:	e0bfe504 	addi	r2,fp,-108
 2000e78:	10c00404 	addi	r3,r2,16
 2000e7c:	e0bf4c04 	addi	r2,fp,-720
 2000e80:	10800404 	addi	r2,r2,16
 2000e84:	180b883a 	mov	r5,r3
 2000e88:	1009883a 	mov	r4,r2
 2000e8c:	200309c0 	call	200309c <whole_collide>
 2000e90:	10000326 	beq	r2,zero,2000ea0 <task2+0x86c>
 2000e94:	e0bfba17 	ldw	r2,-280(fp)
 2000e98:	10bfffc4 	addi	r2,r2,-1
 2000e9c:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[3],velocity[3])) number_of_ball -= 1;
 2000ea0:	e0bfe504 	addi	r2,fp,-108
 2000ea4:	10c00604 	addi	r3,r2,24
 2000ea8:	e0bf4c04 	addi	r2,fp,-720
 2000eac:	10800604 	addi	r2,r2,24
 2000eb0:	180b883a 	mov	r5,r3
 2000eb4:	1009883a 	mov	r4,r2
 2000eb8:	200309c0 	call	200309c <whole_collide>
 2000ebc:	10000326 	beq	r2,zero,2000ecc <task2+0x898>
 2000ec0:	e0bfba17 	ldw	r2,-280(fp)
 2000ec4:	10bfffc4 	addi	r2,r2,-1
 2000ec8:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[4],velocity[4])) number_of_ball -= 1;
 2000ecc:	e0bfe504 	addi	r2,fp,-108
 2000ed0:	10c00804 	addi	r3,r2,32
 2000ed4:	e0bf4c04 	addi	r2,fp,-720
 2000ed8:	10800804 	addi	r2,r2,32
 2000edc:	180b883a 	mov	r5,r3
 2000ee0:	1009883a 	mov	r4,r2
 2000ee4:	200309c0 	call	200309c <whole_collide>
 2000ee8:	10000326 	beq	r2,zero,2000ef8 <task2+0x8c4>
 2000eec:	e0bfba17 	ldw	r2,-280(fp)
 2000ef0:	10bfffc4 	addi	r2,r2,-1
 2000ef4:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[5],velocity[5])) number_of_ball -= 1;
 2000ef8:	e0bfe504 	addi	r2,fp,-108
 2000efc:	10c00a04 	addi	r3,r2,40
 2000f00:	e0bf4c04 	addi	r2,fp,-720
 2000f04:	10800a04 	addi	r2,r2,40
 2000f08:	180b883a 	mov	r5,r3
 2000f0c:	1009883a 	mov	r4,r2
 2000f10:	200309c0 	call	200309c <whole_collide>
 2000f14:	10000326 	beq	r2,zero,2000f24 <task2+0x8f0>
 2000f18:	e0bfba17 	ldw	r2,-280(fp)
 2000f1c:	10bfffc4 	addi	r2,r2,-1
 2000f20:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[6],velocity[6])) number_of_ball -= 1;
 2000f24:	e0bfe504 	addi	r2,fp,-108
 2000f28:	10c00c04 	addi	r3,r2,48
 2000f2c:	e0bf4c04 	addi	r2,fp,-720
 2000f30:	10800c04 	addi	r2,r2,48
 2000f34:	180b883a 	mov	r5,r3
 2000f38:	1009883a 	mov	r4,r2
 2000f3c:	200309c0 	call	200309c <whole_collide>
 2000f40:	10000326 	beq	r2,zero,2000f50 <task2+0x91c>
 2000f44:	e0bfba17 	ldw	r2,-280(fp)
 2000f48:	10bfffc4 	addi	r2,r2,-1
 2000f4c:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[7],velocity[7])) number_of_ball -= 1;
 2000f50:	e0bfe504 	addi	r2,fp,-108
 2000f54:	10c00e04 	addi	r3,r2,56
 2000f58:	e0bf4c04 	addi	r2,fp,-720
 2000f5c:	10800e04 	addi	r2,r2,56
 2000f60:	180b883a 	mov	r5,r3
 2000f64:	1009883a 	mov	r4,r2
 2000f68:	200309c0 	call	200309c <whole_collide>
 2000f6c:	10000326 	beq	r2,zero,2000f7c <task2+0x948>
 2000f70:	e0bfba17 	ldw	r2,-280(fp)
 2000f74:	10bfffc4 	addi	r2,r2,-1
 2000f78:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[8],velocity[8])) number_of_ball -= 1;
 2000f7c:	e0bfe504 	addi	r2,fp,-108
 2000f80:	10c01004 	addi	r3,r2,64
 2000f84:	e0bf4c04 	addi	r2,fp,-720
 2000f88:	10801004 	addi	r2,r2,64
 2000f8c:	180b883a 	mov	r5,r3
 2000f90:	1009883a 	mov	r4,r2
 2000f94:	200309c0 	call	200309c <whole_collide>
 2000f98:	10000326 	beq	r2,zero,2000fa8 <task2+0x974>
 2000f9c:	e0bfba17 	ldw	r2,-280(fp)
 2000fa0:	10bfffc4 	addi	r2,r2,-1
 2000fa4:	e0bfba15 	stw	r2,-280(fp)
       if(whole_collide(ball[9],velocity[9])) number_of_ball -= 1;
 2000fa8:	e0bfe504 	addi	r2,fp,-108
 2000fac:	10c01204 	addi	r3,r2,72
 2000fb0:	e0bf4c04 	addi	r2,fp,-720
 2000fb4:	10801204 	addi	r2,r2,72
 2000fb8:	180b883a 	mov	r5,r3
 2000fbc:	1009883a 	mov	r4,r2
 2000fc0:	200309c0 	call	200309c <whole_collide>
 2000fc4:	10000326 	beq	r2,zero,2000fd4 <task2+0x9a0>
 2000fc8:	e0bfba17 	ldw	r2,-280(fp)
 2000fcc:	10bfffc4 	addi	r2,r2,-1
 2000fd0:	e0bfba15 	stw	r2,-280(fp)

       //Collision

       detect_collide(ball[0],ball[1],collision[0]);
 2000fd4:	e13f6004 	addi	r4,fp,-640
 2000fd8:	e0bf4c04 	addi	r2,fp,-720
 2000fdc:	10c00204 	addi	r3,r2,8
 2000fe0:	e0bf4c04 	addi	r2,fp,-720
 2000fe4:	200d883a 	mov	r6,r4
 2000fe8:	180b883a 	mov	r5,r3
 2000fec:	1009883a 	mov	r4,r2
 2000ff0:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[0],ball[2],collision[1]);
 2000ff4:	e0bf6004 	addi	r2,fp,-640
 2000ff8:	11000204 	addi	r4,r2,8
 2000ffc:	e0bf4c04 	addi	r2,fp,-720
 2001000:	10c00404 	addi	r3,r2,16
 2001004:	e0bf4c04 	addi	r2,fp,-720
 2001008:	200d883a 	mov	r6,r4
 200100c:	180b883a 	mov	r5,r3
 2001010:	1009883a 	mov	r4,r2
 2001014:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[0],ball[3],collision[2]);
 2001018:	e0bf6004 	addi	r2,fp,-640
 200101c:	11000404 	addi	r4,r2,16
 2001020:	e0bf4c04 	addi	r2,fp,-720
 2001024:	10c00604 	addi	r3,r2,24
 2001028:	e0bf4c04 	addi	r2,fp,-720
 200102c:	200d883a 	mov	r6,r4
 2001030:	180b883a 	mov	r5,r3
 2001034:	1009883a 	mov	r4,r2
 2001038:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[0],ball[4],collision[3]);
 200103c:	e0bf6004 	addi	r2,fp,-640
 2001040:	11000604 	addi	r4,r2,24
 2001044:	e0bf4c04 	addi	r2,fp,-720
 2001048:	10c00804 	addi	r3,r2,32
 200104c:	e0bf4c04 	addi	r2,fp,-720
 2001050:	200d883a 	mov	r6,r4
 2001054:	180b883a 	mov	r5,r3
 2001058:	1009883a 	mov	r4,r2
 200105c:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[0],ball[5],collision[4]);
 2001060:	e0bf6004 	addi	r2,fp,-640
 2001064:	11000804 	addi	r4,r2,32
 2001068:	e0bf4c04 	addi	r2,fp,-720
 200106c:	10c00a04 	addi	r3,r2,40
 2001070:	e0bf4c04 	addi	r2,fp,-720
 2001074:	200d883a 	mov	r6,r4
 2001078:	180b883a 	mov	r5,r3
 200107c:	1009883a 	mov	r4,r2
 2001080:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[0],ball[6],collision[5]);
 2001084:	e0bf6004 	addi	r2,fp,-640
 2001088:	11000a04 	addi	r4,r2,40
 200108c:	e0bf4c04 	addi	r2,fp,-720
 2001090:	10c00c04 	addi	r3,r2,48
 2001094:	e0bf4c04 	addi	r2,fp,-720
 2001098:	200d883a 	mov	r6,r4
 200109c:	180b883a 	mov	r5,r3
 20010a0:	1009883a 	mov	r4,r2
 20010a4:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[0],ball[7],collision[6]);
 20010a8:	e0bf6004 	addi	r2,fp,-640
 20010ac:	11000c04 	addi	r4,r2,48
 20010b0:	e0bf4c04 	addi	r2,fp,-720
 20010b4:	10c00e04 	addi	r3,r2,56
 20010b8:	e0bf4c04 	addi	r2,fp,-720
 20010bc:	200d883a 	mov	r6,r4
 20010c0:	180b883a 	mov	r5,r3
 20010c4:	1009883a 	mov	r4,r2
 20010c8:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[0],ball[8],collision[7]);
 20010cc:	e0bf6004 	addi	r2,fp,-640
 20010d0:	11000e04 	addi	r4,r2,56
 20010d4:	e0bf4c04 	addi	r2,fp,-720
 20010d8:	10c01004 	addi	r3,r2,64
 20010dc:	e0bf4c04 	addi	r2,fp,-720
 20010e0:	200d883a 	mov	r6,r4
 20010e4:	180b883a 	mov	r5,r3
 20010e8:	1009883a 	mov	r4,r2
 20010ec:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[0],ball[9],collision[8]);
 20010f0:	e0bf6004 	addi	r2,fp,-640
 20010f4:	11001004 	addi	r4,r2,64
 20010f8:	e0bf4c04 	addi	r2,fp,-720
 20010fc:	10c01204 	addi	r3,r2,72
 2001100:	e0bf4c04 	addi	r2,fp,-720
 2001104:	200d883a 	mov	r6,r4
 2001108:	180b883a 	mov	r5,r3
 200110c:	1009883a 	mov	r4,r2
 2001110:	20033cc0 	call	20033cc <detect_collide>

       detect_collide(ball[1],ball[2],collision[9]);
 2001114:	e0bf6004 	addi	r2,fp,-640
 2001118:	11001204 	addi	r4,r2,72
 200111c:	e0bf4c04 	addi	r2,fp,-720
 2001120:	10c00404 	addi	r3,r2,16
 2001124:	e0bf4c04 	addi	r2,fp,-720
 2001128:	10800204 	addi	r2,r2,8
 200112c:	200d883a 	mov	r6,r4
 2001130:	180b883a 	mov	r5,r3
 2001134:	1009883a 	mov	r4,r2
 2001138:	20033cc0 	call	20033cc <detect_collide>
       detect_collide(ball[1],ball[3],collision[10]);
 200113c:	e0bf6004 	addi	r2,fp,-640
 2001140:	11001404 	addi	r4,r2,80
 2001144:	e0bf4c04 	addi	r2,fp,-720
 2001148:	10c00604 	addi	r3,r2,24
 200114c:	e0bf4c04 	addi	r2,fp,-720
 2001150:	10800204 	addi	r2,r2,8
 2001154:	200d883a 	mov	r6,r4
 2001158:	180b883a 	mov	r5,r3
 200115c:	1009883a 	mov	r4,r2
 2001160:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[1],ball[4],collision[11]);
 2001164:	e0bf6004 	addi	r2,fp,-640
 2001168:	11001604 	addi	r4,r2,88
 200116c:	e0bf4c04 	addi	r2,fp,-720
 2001170:	10c00804 	addi	r3,r2,32
 2001174:	e0bf4c04 	addi	r2,fp,-720
 2001178:	10800204 	addi	r2,r2,8
 200117c:	200d883a 	mov	r6,r4
 2001180:	180b883a 	mov	r5,r3
 2001184:	1009883a 	mov	r4,r2
 2001188:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[1],ball[5],collision[12]);
 200118c:	e0bf6004 	addi	r2,fp,-640
 2001190:	11001804 	addi	r4,r2,96
 2001194:	e0bf4c04 	addi	r2,fp,-720
 2001198:	10c00a04 	addi	r3,r2,40
 200119c:	e0bf4c04 	addi	r2,fp,-720
 20011a0:	10800204 	addi	r2,r2,8
 20011a4:	200d883a 	mov	r6,r4
 20011a8:	180b883a 	mov	r5,r3
 20011ac:	1009883a 	mov	r4,r2
 20011b0:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[1],ball[6],collision[13]);
 20011b4:	e0bf6004 	addi	r2,fp,-640
 20011b8:	11001a04 	addi	r4,r2,104
 20011bc:	e0bf4c04 	addi	r2,fp,-720
 20011c0:	10c00c04 	addi	r3,r2,48
 20011c4:	e0bf4c04 	addi	r2,fp,-720
 20011c8:	10800204 	addi	r2,r2,8
 20011cc:	200d883a 	mov	r6,r4
 20011d0:	180b883a 	mov	r5,r3
 20011d4:	1009883a 	mov	r4,r2
 20011d8:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[1],ball[7],collision[14]);
 20011dc:	e0bf6004 	addi	r2,fp,-640
 20011e0:	11001c04 	addi	r4,r2,112
 20011e4:	e0bf4c04 	addi	r2,fp,-720
 20011e8:	10c00e04 	addi	r3,r2,56
 20011ec:	e0bf4c04 	addi	r2,fp,-720
 20011f0:	10800204 	addi	r2,r2,8
 20011f4:	200d883a 	mov	r6,r4
 20011f8:	180b883a 	mov	r5,r3
 20011fc:	1009883a 	mov	r4,r2
 2001200:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[1],ball[8],collision[15]);
 2001204:	e0bf6004 	addi	r2,fp,-640
 2001208:	11001e04 	addi	r4,r2,120
 200120c:	e0bf4c04 	addi	r2,fp,-720
 2001210:	10c01004 	addi	r3,r2,64
 2001214:	e0bf4c04 	addi	r2,fp,-720
 2001218:	10800204 	addi	r2,r2,8
 200121c:	200d883a 	mov	r6,r4
 2001220:	180b883a 	mov	r5,r3
 2001224:	1009883a 	mov	r4,r2
 2001228:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[1],ball[9],collision[16]);
 200122c:	e0bf6004 	addi	r2,fp,-640
 2001230:	11002004 	addi	r4,r2,128
 2001234:	e0bf4c04 	addi	r2,fp,-720
 2001238:	10c01204 	addi	r3,r2,72
 200123c:	e0bf4c04 	addi	r2,fp,-720
 2001240:	10800204 	addi	r2,r2,8
 2001244:	200d883a 	mov	r6,r4
 2001248:	180b883a 	mov	r5,r3
 200124c:	1009883a 	mov	r4,r2
 2001250:	20033cc0 	call	20033cc <detect_collide>

	   detect_collide(ball[2],ball[3],collision[17]);
 2001254:	e0bf6004 	addi	r2,fp,-640
 2001258:	11002204 	addi	r4,r2,136
 200125c:	e0bf4c04 	addi	r2,fp,-720
 2001260:	10c00604 	addi	r3,r2,24
 2001264:	e0bf4c04 	addi	r2,fp,-720
 2001268:	10800404 	addi	r2,r2,16
 200126c:	200d883a 	mov	r6,r4
 2001270:	180b883a 	mov	r5,r3
 2001274:	1009883a 	mov	r4,r2
 2001278:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[2],ball[4],collision[18]);
 200127c:	e0bf6004 	addi	r2,fp,-640
 2001280:	11002404 	addi	r4,r2,144
 2001284:	e0bf4c04 	addi	r2,fp,-720
 2001288:	10c00804 	addi	r3,r2,32
 200128c:	e0bf4c04 	addi	r2,fp,-720
 2001290:	10800404 	addi	r2,r2,16
 2001294:	200d883a 	mov	r6,r4
 2001298:	180b883a 	mov	r5,r3
 200129c:	1009883a 	mov	r4,r2
 20012a0:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[2],ball[5],collision[19]);
 20012a4:	e0bf6004 	addi	r2,fp,-640
 20012a8:	11002604 	addi	r4,r2,152
 20012ac:	e0bf4c04 	addi	r2,fp,-720
 20012b0:	10c00a04 	addi	r3,r2,40
 20012b4:	e0bf4c04 	addi	r2,fp,-720
 20012b8:	10800404 	addi	r2,r2,16
 20012bc:	200d883a 	mov	r6,r4
 20012c0:	180b883a 	mov	r5,r3
 20012c4:	1009883a 	mov	r4,r2
 20012c8:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[2],ball[6],collision[20]);
 20012cc:	e0bf6004 	addi	r2,fp,-640
 20012d0:	11002804 	addi	r4,r2,160
 20012d4:	e0bf4c04 	addi	r2,fp,-720
 20012d8:	10c00c04 	addi	r3,r2,48
 20012dc:	e0bf4c04 	addi	r2,fp,-720
 20012e0:	10800404 	addi	r2,r2,16
 20012e4:	200d883a 	mov	r6,r4
 20012e8:	180b883a 	mov	r5,r3
 20012ec:	1009883a 	mov	r4,r2
 20012f0:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[2],ball[7],collision[21]);
 20012f4:	e0bf6004 	addi	r2,fp,-640
 20012f8:	11002a04 	addi	r4,r2,168
 20012fc:	e0bf4c04 	addi	r2,fp,-720
 2001300:	10c00e04 	addi	r3,r2,56
 2001304:	e0bf4c04 	addi	r2,fp,-720
 2001308:	10800404 	addi	r2,r2,16
 200130c:	200d883a 	mov	r6,r4
 2001310:	180b883a 	mov	r5,r3
 2001314:	1009883a 	mov	r4,r2
 2001318:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[2],ball[8],collision[22]);
 200131c:	e0bf6004 	addi	r2,fp,-640
 2001320:	11002c04 	addi	r4,r2,176
 2001324:	e0bf4c04 	addi	r2,fp,-720
 2001328:	10c01004 	addi	r3,r2,64
 200132c:	e0bf4c04 	addi	r2,fp,-720
 2001330:	10800404 	addi	r2,r2,16
 2001334:	200d883a 	mov	r6,r4
 2001338:	180b883a 	mov	r5,r3
 200133c:	1009883a 	mov	r4,r2
 2001340:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[2],ball[9],collision[23]);
 2001344:	e0bf6004 	addi	r2,fp,-640
 2001348:	11002e04 	addi	r4,r2,184
 200134c:	e0bf4c04 	addi	r2,fp,-720
 2001350:	10c01204 	addi	r3,r2,72
 2001354:	e0bf4c04 	addi	r2,fp,-720
 2001358:	10800404 	addi	r2,r2,16
 200135c:	200d883a 	mov	r6,r4
 2001360:	180b883a 	mov	r5,r3
 2001364:	1009883a 	mov	r4,r2
 2001368:	20033cc0 	call	20033cc <detect_collide>

	   detect_collide(ball[3],ball[4],collision[24]);
 200136c:	e0bf6004 	addi	r2,fp,-640
 2001370:	11003004 	addi	r4,r2,192
 2001374:	e0bf4c04 	addi	r2,fp,-720
 2001378:	10c00804 	addi	r3,r2,32
 200137c:	e0bf4c04 	addi	r2,fp,-720
 2001380:	10800604 	addi	r2,r2,24
 2001384:	200d883a 	mov	r6,r4
 2001388:	180b883a 	mov	r5,r3
 200138c:	1009883a 	mov	r4,r2
 2001390:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[3],ball[5],collision[25]);
 2001394:	e0bf6004 	addi	r2,fp,-640
 2001398:	11003204 	addi	r4,r2,200
 200139c:	e0bf4c04 	addi	r2,fp,-720
 20013a0:	10c00a04 	addi	r3,r2,40
 20013a4:	e0bf4c04 	addi	r2,fp,-720
 20013a8:	10800604 	addi	r2,r2,24
 20013ac:	200d883a 	mov	r6,r4
 20013b0:	180b883a 	mov	r5,r3
 20013b4:	1009883a 	mov	r4,r2
 20013b8:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[3],ball[6],collision[26]);
 20013bc:	e0bf6004 	addi	r2,fp,-640
 20013c0:	11003404 	addi	r4,r2,208
 20013c4:	e0bf4c04 	addi	r2,fp,-720
 20013c8:	10c00c04 	addi	r3,r2,48
 20013cc:	e0bf4c04 	addi	r2,fp,-720
 20013d0:	10800604 	addi	r2,r2,24
 20013d4:	200d883a 	mov	r6,r4
 20013d8:	180b883a 	mov	r5,r3
 20013dc:	1009883a 	mov	r4,r2
 20013e0:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[3],ball[7],collision[27]);
 20013e4:	e0bf6004 	addi	r2,fp,-640
 20013e8:	11003604 	addi	r4,r2,216
 20013ec:	e0bf4c04 	addi	r2,fp,-720
 20013f0:	10c00e04 	addi	r3,r2,56
 20013f4:	e0bf4c04 	addi	r2,fp,-720
 20013f8:	10800604 	addi	r2,r2,24
 20013fc:	200d883a 	mov	r6,r4
 2001400:	180b883a 	mov	r5,r3
 2001404:	1009883a 	mov	r4,r2
 2001408:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[3],ball[8],collision[28]);
 200140c:	e0bf6004 	addi	r2,fp,-640
 2001410:	11003804 	addi	r4,r2,224
 2001414:	e0bf4c04 	addi	r2,fp,-720
 2001418:	10c01004 	addi	r3,r2,64
 200141c:	e0bf4c04 	addi	r2,fp,-720
 2001420:	10800604 	addi	r2,r2,24
 2001424:	200d883a 	mov	r6,r4
 2001428:	180b883a 	mov	r5,r3
 200142c:	1009883a 	mov	r4,r2
 2001430:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[3],ball[9],collision[29]);
 2001434:	e0bf6004 	addi	r2,fp,-640
 2001438:	11003a04 	addi	r4,r2,232
 200143c:	e0bf4c04 	addi	r2,fp,-720
 2001440:	10c01204 	addi	r3,r2,72
 2001444:	e0bf4c04 	addi	r2,fp,-720
 2001448:	10800604 	addi	r2,r2,24
 200144c:	200d883a 	mov	r6,r4
 2001450:	180b883a 	mov	r5,r3
 2001454:	1009883a 	mov	r4,r2
 2001458:	20033cc0 	call	20033cc <detect_collide>

	   detect_collide(ball[4],ball[5],collision[30]);
 200145c:	e0bf6004 	addi	r2,fp,-640
 2001460:	11003c04 	addi	r4,r2,240
 2001464:	e0bf4c04 	addi	r2,fp,-720
 2001468:	10c00a04 	addi	r3,r2,40
 200146c:	e0bf4c04 	addi	r2,fp,-720
 2001470:	10800804 	addi	r2,r2,32
 2001474:	200d883a 	mov	r6,r4
 2001478:	180b883a 	mov	r5,r3
 200147c:	1009883a 	mov	r4,r2
 2001480:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[4],ball[6],collision[31]);
 2001484:	e0bf6004 	addi	r2,fp,-640
 2001488:	11003e04 	addi	r4,r2,248
 200148c:	e0bf4c04 	addi	r2,fp,-720
 2001490:	10c00c04 	addi	r3,r2,48
 2001494:	e0bf4c04 	addi	r2,fp,-720
 2001498:	10800804 	addi	r2,r2,32
 200149c:	200d883a 	mov	r6,r4
 20014a0:	180b883a 	mov	r5,r3
 20014a4:	1009883a 	mov	r4,r2
 20014a8:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[4],ball[7],collision[32]);
 20014ac:	e0bf6004 	addi	r2,fp,-640
 20014b0:	11004004 	addi	r4,r2,256
 20014b4:	e0bf4c04 	addi	r2,fp,-720
 20014b8:	10c00e04 	addi	r3,r2,56
 20014bc:	e0bf4c04 	addi	r2,fp,-720
 20014c0:	10800804 	addi	r2,r2,32
 20014c4:	200d883a 	mov	r6,r4
 20014c8:	180b883a 	mov	r5,r3
 20014cc:	1009883a 	mov	r4,r2
 20014d0:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[4],ball[8],collision[33]);
 20014d4:	e0bf6004 	addi	r2,fp,-640
 20014d8:	11004204 	addi	r4,r2,264
 20014dc:	e0bf4c04 	addi	r2,fp,-720
 20014e0:	10c01004 	addi	r3,r2,64
 20014e4:	e0bf4c04 	addi	r2,fp,-720
 20014e8:	10800804 	addi	r2,r2,32
 20014ec:	200d883a 	mov	r6,r4
 20014f0:	180b883a 	mov	r5,r3
 20014f4:	1009883a 	mov	r4,r2
 20014f8:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[4],ball[9],collision[34]);
 20014fc:	e0bf6004 	addi	r2,fp,-640
 2001500:	11004404 	addi	r4,r2,272
 2001504:	e0bf4c04 	addi	r2,fp,-720
 2001508:	10c01204 	addi	r3,r2,72
 200150c:	e0bf4c04 	addi	r2,fp,-720
 2001510:	10800804 	addi	r2,r2,32
 2001514:	200d883a 	mov	r6,r4
 2001518:	180b883a 	mov	r5,r3
 200151c:	1009883a 	mov	r4,r2
 2001520:	20033cc0 	call	20033cc <detect_collide>

	   detect_collide(ball[5],ball[6],collision[35]);
 2001524:	e0bf6004 	addi	r2,fp,-640
 2001528:	11004604 	addi	r4,r2,280
 200152c:	e0bf4c04 	addi	r2,fp,-720
 2001530:	10c00c04 	addi	r3,r2,48
 2001534:	e0bf4c04 	addi	r2,fp,-720
 2001538:	10800a04 	addi	r2,r2,40
 200153c:	200d883a 	mov	r6,r4
 2001540:	180b883a 	mov	r5,r3
 2001544:	1009883a 	mov	r4,r2
 2001548:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[5],ball[7],collision[36]);
 200154c:	e0bf6004 	addi	r2,fp,-640
 2001550:	11004804 	addi	r4,r2,288
 2001554:	e0bf4c04 	addi	r2,fp,-720
 2001558:	10c00e04 	addi	r3,r2,56
 200155c:	e0bf4c04 	addi	r2,fp,-720
 2001560:	10800a04 	addi	r2,r2,40
 2001564:	200d883a 	mov	r6,r4
 2001568:	180b883a 	mov	r5,r3
 200156c:	1009883a 	mov	r4,r2
 2001570:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[5],ball[8],collision[37]);
 2001574:	e0bf6004 	addi	r2,fp,-640
 2001578:	11004a04 	addi	r4,r2,296
 200157c:	e0bf4c04 	addi	r2,fp,-720
 2001580:	10c01004 	addi	r3,r2,64
 2001584:	e0bf4c04 	addi	r2,fp,-720
 2001588:	10800a04 	addi	r2,r2,40
 200158c:	200d883a 	mov	r6,r4
 2001590:	180b883a 	mov	r5,r3
 2001594:	1009883a 	mov	r4,r2
 2001598:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[5],ball[9],collision[38]);
 200159c:	e0bf6004 	addi	r2,fp,-640
 20015a0:	11004c04 	addi	r4,r2,304
 20015a4:	e0bf4c04 	addi	r2,fp,-720
 20015a8:	10c01204 	addi	r3,r2,72
 20015ac:	e0bf4c04 	addi	r2,fp,-720
 20015b0:	10800a04 	addi	r2,r2,40
 20015b4:	200d883a 	mov	r6,r4
 20015b8:	180b883a 	mov	r5,r3
 20015bc:	1009883a 	mov	r4,r2
 20015c0:	20033cc0 	call	20033cc <detect_collide>

	   detect_collide(ball[6],ball[7],collision[39]);
 20015c4:	e0bf6004 	addi	r2,fp,-640
 20015c8:	11004e04 	addi	r4,r2,312
 20015cc:	e0bf4c04 	addi	r2,fp,-720
 20015d0:	10c00e04 	addi	r3,r2,56
 20015d4:	e0bf4c04 	addi	r2,fp,-720
 20015d8:	10800c04 	addi	r2,r2,48
 20015dc:	200d883a 	mov	r6,r4
 20015e0:	180b883a 	mov	r5,r3
 20015e4:	1009883a 	mov	r4,r2
 20015e8:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[6],ball[8],collision[40]);
 20015ec:	e0bf6004 	addi	r2,fp,-640
 20015f0:	11005004 	addi	r4,r2,320
 20015f4:	e0bf4c04 	addi	r2,fp,-720
 20015f8:	10c01004 	addi	r3,r2,64
 20015fc:	e0bf4c04 	addi	r2,fp,-720
 2001600:	10800c04 	addi	r2,r2,48
 2001604:	200d883a 	mov	r6,r4
 2001608:	180b883a 	mov	r5,r3
 200160c:	1009883a 	mov	r4,r2
 2001610:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[6],ball[9],collision[41]);
 2001614:	e0bf6004 	addi	r2,fp,-640
 2001618:	11005204 	addi	r4,r2,328
 200161c:	e0bf4c04 	addi	r2,fp,-720
 2001620:	10c01204 	addi	r3,r2,72
 2001624:	e0bf4c04 	addi	r2,fp,-720
 2001628:	10800c04 	addi	r2,r2,48
 200162c:	200d883a 	mov	r6,r4
 2001630:	180b883a 	mov	r5,r3
 2001634:	1009883a 	mov	r4,r2
 2001638:	20033cc0 	call	20033cc <detect_collide>

	   detect_collide(ball[7],ball[8],collision[42]);
 200163c:	e0bf6004 	addi	r2,fp,-640
 2001640:	11005404 	addi	r4,r2,336
 2001644:	e0bf4c04 	addi	r2,fp,-720
 2001648:	10c01004 	addi	r3,r2,64
 200164c:	e0bf4c04 	addi	r2,fp,-720
 2001650:	10800e04 	addi	r2,r2,56
 2001654:	200d883a 	mov	r6,r4
 2001658:	180b883a 	mov	r5,r3
 200165c:	1009883a 	mov	r4,r2
 2001660:	20033cc0 	call	20033cc <detect_collide>
	   detect_collide(ball[7],ball[9],collision[43]);
 2001664:	e0bf6004 	addi	r2,fp,-640
 2001668:	11005604 	addi	r4,r2,344
 200166c:	e0bf4c04 	addi	r2,fp,-720
 2001670:	10c01204 	addi	r3,r2,72
 2001674:	e0bf4c04 	addi	r2,fp,-720
 2001678:	10800e04 	addi	r2,r2,56
 200167c:	200d883a 	mov	r6,r4
 2001680:	180b883a 	mov	r5,r3
 2001684:	1009883a 	mov	r4,r2
 2001688:	20033cc0 	call	20033cc <detect_collide>

	   detect_collide(ball[8],ball[9],collision[44]);
 200168c:	e0bf6004 	addi	r2,fp,-640
 2001690:	11005804 	addi	r4,r2,352
 2001694:	e0bf4c04 	addi	r2,fp,-720
 2001698:	10c01204 	addi	r3,r2,72
 200169c:	e0bf4c04 	addi	r2,fp,-720
 20016a0:	10801004 	addi	r2,r2,64
 20016a4:	200d883a 	mov	r6,r4
 20016a8:	180b883a 	mov	r5,r3
 20016ac:	1009883a 	mov	r4,r2
 20016b0:	20033cc0 	call	20033cc <detect_collide>

	   //Calcul of collision

  	   collide_calc(ball[0],ball[1],velocity[0],velocity[1],collision[0],0);
 20016b4:	e0bfe504 	addi	r2,fp,-108
 20016b8:	11800204 	addi	r6,r2,8
 20016bc:	e17fe504 	addi	r5,fp,-108
 20016c0:	e0bf4c04 	addi	r2,fp,-720
 20016c4:	11000204 	addi	r4,r2,8
 20016c8:	e0ff4c04 	addi	r3,fp,-720
 20016cc:	d8000115 	stw	zero,4(sp)
 20016d0:	e0bf6004 	addi	r2,fp,-640
 20016d4:	d8800015 	stw	r2,0(sp)
 20016d8:	300f883a 	mov	r7,r6
 20016dc:	280d883a 	mov	r6,r5
 20016e0:	200b883a 	mov	r5,r4
 20016e4:	1809883a 	mov	r4,r3
 20016e8:	200348c0 	call	200348c <collide_calc>
  	   collide_calc(ball[0],ball[2],velocity[0],velocity[2],collision[1],1);
 20016ec:	e0bfe504 	addi	r2,fp,-108
 20016f0:	11800404 	addi	r6,r2,16
 20016f4:	e17fe504 	addi	r5,fp,-108
 20016f8:	e0bf4c04 	addi	r2,fp,-720
 20016fc:	11000404 	addi	r4,r2,16
 2001700:	e0ff4c04 	addi	r3,fp,-720
 2001704:	00800044 	movi	r2,1
 2001708:	d8800115 	stw	r2,4(sp)
 200170c:	e0bf6004 	addi	r2,fp,-640
 2001710:	10800204 	addi	r2,r2,8
 2001714:	d8800015 	stw	r2,0(sp)
 2001718:	300f883a 	mov	r7,r6
 200171c:	280d883a 	mov	r6,r5
 2001720:	200b883a 	mov	r5,r4
 2001724:	1809883a 	mov	r4,r3
 2001728:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[0],ball[3],velocity[0],velocity[3],collision[2],2);
 200172c:	e0bfe504 	addi	r2,fp,-108
 2001730:	11800604 	addi	r6,r2,24
 2001734:	e17fe504 	addi	r5,fp,-108
 2001738:	e0bf4c04 	addi	r2,fp,-720
 200173c:	11000604 	addi	r4,r2,24
 2001740:	e0ff4c04 	addi	r3,fp,-720
 2001744:	00800084 	movi	r2,2
 2001748:	d8800115 	stw	r2,4(sp)
 200174c:	e0bf6004 	addi	r2,fp,-640
 2001750:	10800404 	addi	r2,r2,16
 2001754:	d8800015 	stw	r2,0(sp)
 2001758:	300f883a 	mov	r7,r6
 200175c:	280d883a 	mov	r6,r5
 2001760:	200b883a 	mov	r5,r4
 2001764:	1809883a 	mov	r4,r3
 2001768:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[0],ball[4],velocity[0],velocity[4],collision[3],3);
 200176c:	e0bfe504 	addi	r2,fp,-108
 2001770:	11800804 	addi	r6,r2,32
 2001774:	e17fe504 	addi	r5,fp,-108
 2001778:	e0bf4c04 	addi	r2,fp,-720
 200177c:	11000804 	addi	r4,r2,32
 2001780:	e0ff4c04 	addi	r3,fp,-720
 2001784:	008000c4 	movi	r2,3
 2001788:	d8800115 	stw	r2,4(sp)
 200178c:	e0bf6004 	addi	r2,fp,-640
 2001790:	10800604 	addi	r2,r2,24
 2001794:	d8800015 	stw	r2,0(sp)
 2001798:	300f883a 	mov	r7,r6
 200179c:	280d883a 	mov	r6,r5
 20017a0:	200b883a 	mov	r5,r4
 20017a4:	1809883a 	mov	r4,r3
 20017a8:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[0],ball[5],velocity[0],velocity[5],collision[4],4);
 20017ac:	e0bfe504 	addi	r2,fp,-108
 20017b0:	11800a04 	addi	r6,r2,40
 20017b4:	e17fe504 	addi	r5,fp,-108
 20017b8:	e0bf4c04 	addi	r2,fp,-720
 20017bc:	11000a04 	addi	r4,r2,40
 20017c0:	e0ff4c04 	addi	r3,fp,-720
 20017c4:	00800104 	movi	r2,4
 20017c8:	d8800115 	stw	r2,4(sp)
 20017cc:	e0bf6004 	addi	r2,fp,-640
 20017d0:	10800804 	addi	r2,r2,32
 20017d4:	d8800015 	stw	r2,0(sp)
 20017d8:	300f883a 	mov	r7,r6
 20017dc:	280d883a 	mov	r6,r5
 20017e0:	200b883a 	mov	r5,r4
 20017e4:	1809883a 	mov	r4,r3
 20017e8:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[0],ball[6],velocity[0],velocity[6],collision[5],5);
 20017ec:	e0bfe504 	addi	r2,fp,-108
 20017f0:	11800c04 	addi	r6,r2,48
 20017f4:	e17fe504 	addi	r5,fp,-108
 20017f8:	e0bf4c04 	addi	r2,fp,-720
 20017fc:	11000c04 	addi	r4,r2,48
 2001800:	e0ff4c04 	addi	r3,fp,-720
 2001804:	00800144 	movi	r2,5
 2001808:	d8800115 	stw	r2,4(sp)
 200180c:	e0bf6004 	addi	r2,fp,-640
 2001810:	10800a04 	addi	r2,r2,40
 2001814:	d8800015 	stw	r2,0(sp)
 2001818:	300f883a 	mov	r7,r6
 200181c:	280d883a 	mov	r6,r5
 2001820:	200b883a 	mov	r5,r4
 2001824:	1809883a 	mov	r4,r3
 2001828:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[0],ball[7],velocity[0],velocity[7],collision[6],6);
 200182c:	e0bfe504 	addi	r2,fp,-108
 2001830:	11800e04 	addi	r6,r2,56
 2001834:	e17fe504 	addi	r5,fp,-108
 2001838:	e0bf4c04 	addi	r2,fp,-720
 200183c:	11000e04 	addi	r4,r2,56
 2001840:	e0ff4c04 	addi	r3,fp,-720
 2001844:	00800184 	movi	r2,6
 2001848:	d8800115 	stw	r2,4(sp)
 200184c:	e0bf6004 	addi	r2,fp,-640
 2001850:	10800c04 	addi	r2,r2,48
 2001854:	d8800015 	stw	r2,0(sp)
 2001858:	300f883a 	mov	r7,r6
 200185c:	280d883a 	mov	r6,r5
 2001860:	200b883a 	mov	r5,r4
 2001864:	1809883a 	mov	r4,r3
 2001868:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[0],ball[8],velocity[0],velocity[8],collision[7],7);
 200186c:	e0bfe504 	addi	r2,fp,-108
 2001870:	11801004 	addi	r6,r2,64
 2001874:	e17fe504 	addi	r5,fp,-108
 2001878:	e0bf4c04 	addi	r2,fp,-720
 200187c:	11001004 	addi	r4,r2,64
 2001880:	e0ff4c04 	addi	r3,fp,-720
 2001884:	008001c4 	movi	r2,7
 2001888:	d8800115 	stw	r2,4(sp)
 200188c:	e0bf6004 	addi	r2,fp,-640
 2001890:	10800e04 	addi	r2,r2,56
 2001894:	d8800015 	stw	r2,0(sp)
 2001898:	300f883a 	mov	r7,r6
 200189c:	280d883a 	mov	r6,r5
 20018a0:	200b883a 	mov	r5,r4
 20018a4:	1809883a 	mov	r4,r3
 20018a8:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[0],ball[9],velocity[0],velocity[9],collision[8],8);
 20018ac:	e0bfe504 	addi	r2,fp,-108
 20018b0:	11801204 	addi	r6,r2,72
 20018b4:	e17fe504 	addi	r5,fp,-108
 20018b8:	e0bf4c04 	addi	r2,fp,-720
 20018bc:	11001204 	addi	r4,r2,72
 20018c0:	e0ff4c04 	addi	r3,fp,-720
 20018c4:	00800204 	movi	r2,8
 20018c8:	d8800115 	stw	r2,4(sp)
 20018cc:	e0bf6004 	addi	r2,fp,-640
 20018d0:	10801004 	addi	r2,r2,64
 20018d4:	d8800015 	stw	r2,0(sp)
 20018d8:	300f883a 	mov	r7,r6
 20018dc:	280d883a 	mov	r6,r5
 20018e0:	200b883a 	mov	r5,r4
 20018e4:	1809883a 	mov	r4,r3
 20018e8:	200348c0 	call	200348c <collide_calc>

	   collide_calc(ball[1],ball[2],velocity[1],velocity[2],collision[9],9);
 20018ec:	e0bfe504 	addi	r2,fp,-108
 20018f0:	11800404 	addi	r6,r2,16
 20018f4:	e0bfe504 	addi	r2,fp,-108
 20018f8:	11400204 	addi	r5,r2,8
 20018fc:	e0bf4c04 	addi	r2,fp,-720
 2001900:	11000404 	addi	r4,r2,16
 2001904:	e0bf4c04 	addi	r2,fp,-720
 2001908:	10c00204 	addi	r3,r2,8
 200190c:	00800244 	movi	r2,9
 2001910:	d8800115 	stw	r2,4(sp)
 2001914:	e0bf6004 	addi	r2,fp,-640
 2001918:	10801204 	addi	r2,r2,72
 200191c:	d8800015 	stw	r2,0(sp)
 2001920:	300f883a 	mov	r7,r6
 2001924:	280d883a 	mov	r6,r5
 2001928:	200b883a 	mov	r5,r4
 200192c:	1809883a 	mov	r4,r3
 2001930:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[1],ball[3],velocity[1],velocity[3],collision[10],10);
 2001934:	e0bfe504 	addi	r2,fp,-108
 2001938:	11800604 	addi	r6,r2,24
 200193c:	e0bfe504 	addi	r2,fp,-108
 2001940:	11400204 	addi	r5,r2,8
 2001944:	e0bf4c04 	addi	r2,fp,-720
 2001948:	11000604 	addi	r4,r2,24
 200194c:	e0bf4c04 	addi	r2,fp,-720
 2001950:	10c00204 	addi	r3,r2,8
 2001954:	00800284 	movi	r2,10
 2001958:	d8800115 	stw	r2,4(sp)
 200195c:	e0bf6004 	addi	r2,fp,-640
 2001960:	10801404 	addi	r2,r2,80
 2001964:	d8800015 	stw	r2,0(sp)
 2001968:	300f883a 	mov	r7,r6
 200196c:	280d883a 	mov	r6,r5
 2001970:	200b883a 	mov	r5,r4
 2001974:	1809883a 	mov	r4,r3
 2001978:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[1],ball[4],velocity[1],velocity[4],collision[11],11);
 200197c:	e0bfe504 	addi	r2,fp,-108
 2001980:	11800804 	addi	r6,r2,32
 2001984:	e0bfe504 	addi	r2,fp,-108
 2001988:	11400204 	addi	r5,r2,8
 200198c:	e0bf4c04 	addi	r2,fp,-720
 2001990:	11000804 	addi	r4,r2,32
 2001994:	e0bf4c04 	addi	r2,fp,-720
 2001998:	10c00204 	addi	r3,r2,8
 200199c:	008002c4 	movi	r2,11
 20019a0:	d8800115 	stw	r2,4(sp)
 20019a4:	e0bf6004 	addi	r2,fp,-640
 20019a8:	10801604 	addi	r2,r2,88
 20019ac:	d8800015 	stw	r2,0(sp)
 20019b0:	300f883a 	mov	r7,r6
 20019b4:	280d883a 	mov	r6,r5
 20019b8:	200b883a 	mov	r5,r4
 20019bc:	1809883a 	mov	r4,r3
 20019c0:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[1],ball[5],velocity[1],velocity[5],collision[12],12);
 20019c4:	e0bfe504 	addi	r2,fp,-108
 20019c8:	11800a04 	addi	r6,r2,40
 20019cc:	e0bfe504 	addi	r2,fp,-108
 20019d0:	11400204 	addi	r5,r2,8
 20019d4:	e0bf4c04 	addi	r2,fp,-720
 20019d8:	11000a04 	addi	r4,r2,40
 20019dc:	e0bf4c04 	addi	r2,fp,-720
 20019e0:	10c00204 	addi	r3,r2,8
 20019e4:	00800304 	movi	r2,12
 20019e8:	d8800115 	stw	r2,4(sp)
 20019ec:	e0bf6004 	addi	r2,fp,-640
 20019f0:	10801804 	addi	r2,r2,96
 20019f4:	d8800015 	stw	r2,0(sp)
 20019f8:	300f883a 	mov	r7,r6
 20019fc:	280d883a 	mov	r6,r5
 2001a00:	200b883a 	mov	r5,r4
 2001a04:	1809883a 	mov	r4,r3
 2001a08:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[1],ball[6],velocity[1],velocity[6],collision[13],13);
 2001a0c:	e0bfe504 	addi	r2,fp,-108
 2001a10:	11800c04 	addi	r6,r2,48
 2001a14:	e0bfe504 	addi	r2,fp,-108
 2001a18:	11400204 	addi	r5,r2,8
 2001a1c:	e0bf4c04 	addi	r2,fp,-720
 2001a20:	11000c04 	addi	r4,r2,48
 2001a24:	e0bf4c04 	addi	r2,fp,-720
 2001a28:	10c00204 	addi	r3,r2,8
 2001a2c:	00800344 	movi	r2,13
 2001a30:	d8800115 	stw	r2,4(sp)
 2001a34:	e0bf6004 	addi	r2,fp,-640
 2001a38:	10801a04 	addi	r2,r2,104
 2001a3c:	d8800015 	stw	r2,0(sp)
 2001a40:	300f883a 	mov	r7,r6
 2001a44:	280d883a 	mov	r6,r5
 2001a48:	200b883a 	mov	r5,r4
 2001a4c:	1809883a 	mov	r4,r3
 2001a50:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[1],ball[7],velocity[1],velocity[7],collision[14],14);
 2001a54:	e0bfe504 	addi	r2,fp,-108
 2001a58:	11800e04 	addi	r6,r2,56
 2001a5c:	e0bfe504 	addi	r2,fp,-108
 2001a60:	11400204 	addi	r5,r2,8
 2001a64:	e0bf4c04 	addi	r2,fp,-720
 2001a68:	11000e04 	addi	r4,r2,56
 2001a6c:	e0bf4c04 	addi	r2,fp,-720
 2001a70:	10c00204 	addi	r3,r2,8
 2001a74:	00800384 	movi	r2,14
 2001a78:	d8800115 	stw	r2,4(sp)
 2001a7c:	e0bf6004 	addi	r2,fp,-640
 2001a80:	10801c04 	addi	r2,r2,112
 2001a84:	d8800015 	stw	r2,0(sp)
 2001a88:	300f883a 	mov	r7,r6
 2001a8c:	280d883a 	mov	r6,r5
 2001a90:	200b883a 	mov	r5,r4
 2001a94:	1809883a 	mov	r4,r3
 2001a98:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[1],ball[8],velocity[1],velocity[8],collision[15],15);
 2001a9c:	e0bfe504 	addi	r2,fp,-108
 2001aa0:	11801004 	addi	r6,r2,64
 2001aa4:	e0bfe504 	addi	r2,fp,-108
 2001aa8:	11400204 	addi	r5,r2,8
 2001aac:	e0bf4c04 	addi	r2,fp,-720
 2001ab0:	11001004 	addi	r4,r2,64
 2001ab4:	e0bf4c04 	addi	r2,fp,-720
 2001ab8:	10c00204 	addi	r3,r2,8
 2001abc:	008003c4 	movi	r2,15
 2001ac0:	d8800115 	stw	r2,4(sp)
 2001ac4:	e0bf6004 	addi	r2,fp,-640
 2001ac8:	10801e04 	addi	r2,r2,120
 2001acc:	d8800015 	stw	r2,0(sp)
 2001ad0:	300f883a 	mov	r7,r6
 2001ad4:	280d883a 	mov	r6,r5
 2001ad8:	200b883a 	mov	r5,r4
 2001adc:	1809883a 	mov	r4,r3
 2001ae0:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[1],ball[9],velocity[1],velocity[9],collision[16],16);
 2001ae4:	e0bfe504 	addi	r2,fp,-108
 2001ae8:	11801204 	addi	r6,r2,72
 2001aec:	e0bfe504 	addi	r2,fp,-108
 2001af0:	11400204 	addi	r5,r2,8
 2001af4:	e0bf4c04 	addi	r2,fp,-720
 2001af8:	11001204 	addi	r4,r2,72
 2001afc:	e0bf4c04 	addi	r2,fp,-720
 2001b00:	10c00204 	addi	r3,r2,8
 2001b04:	00800404 	movi	r2,16
 2001b08:	d8800115 	stw	r2,4(sp)
 2001b0c:	e0bf6004 	addi	r2,fp,-640
 2001b10:	10802004 	addi	r2,r2,128
 2001b14:	d8800015 	stw	r2,0(sp)
 2001b18:	300f883a 	mov	r7,r6
 2001b1c:	280d883a 	mov	r6,r5
 2001b20:	200b883a 	mov	r5,r4
 2001b24:	1809883a 	mov	r4,r3
 2001b28:	200348c0 	call	200348c <collide_calc>

	   collide_calc(ball[2],ball[3],velocity[2],velocity[3],collision[17],17);
 2001b2c:	e0bfe504 	addi	r2,fp,-108
 2001b30:	11800604 	addi	r6,r2,24
 2001b34:	e0bfe504 	addi	r2,fp,-108
 2001b38:	11400404 	addi	r5,r2,16
 2001b3c:	e0bf4c04 	addi	r2,fp,-720
 2001b40:	11000604 	addi	r4,r2,24
 2001b44:	e0bf4c04 	addi	r2,fp,-720
 2001b48:	10c00404 	addi	r3,r2,16
 2001b4c:	00800444 	movi	r2,17
 2001b50:	d8800115 	stw	r2,4(sp)
 2001b54:	e0bf6004 	addi	r2,fp,-640
 2001b58:	10802204 	addi	r2,r2,136
 2001b5c:	d8800015 	stw	r2,0(sp)
 2001b60:	300f883a 	mov	r7,r6
 2001b64:	280d883a 	mov	r6,r5
 2001b68:	200b883a 	mov	r5,r4
 2001b6c:	1809883a 	mov	r4,r3
 2001b70:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[2],ball[4],velocity[2],velocity[4],collision[18],18);
 2001b74:	e0bfe504 	addi	r2,fp,-108
 2001b78:	11800804 	addi	r6,r2,32
 2001b7c:	e0bfe504 	addi	r2,fp,-108
 2001b80:	11400404 	addi	r5,r2,16
 2001b84:	e0bf4c04 	addi	r2,fp,-720
 2001b88:	11000804 	addi	r4,r2,32
 2001b8c:	e0bf4c04 	addi	r2,fp,-720
 2001b90:	10c00404 	addi	r3,r2,16
 2001b94:	00800484 	movi	r2,18
 2001b98:	d8800115 	stw	r2,4(sp)
 2001b9c:	e0bf6004 	addi	r2,fp,-640
 2001ba0:	10802404 	addi	r2,r2,144
 2001ba4:	d8800015 	stw	r2,0(sp)
 2001ba8:	300f883a 	mov	r7,r6
 2001bac:	280d883a 	mov	r6,r5
 2001bb0:	200b883a 	mov	r5,r4
 2001bb4:	1809883a 	mov	r4,r3
 2001bb8:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[2],ball[5],velocity[2],velocity[5],collision[19],19);
 2001bbc:	e0bfe504 	addi	r2,fp,-108
 2001bc0:	11800a04 	addi	r6,r2,40
 2001bc4:	e0bfe504 	addi	r2,fp,-108
 2001bc8:	11400404 	addi	r5,r2,16
 2001bcc:	e0bf4c04 	addi	r2,fp,-720
 2001bd0:	11000a04 	addi	r4,r2,40
 2001bd4:	e0bf4c04 	addi	r2,fp,-720
 2001bd8:	10c00404 	addi	r3,r2,16
 2001bdc:	008004c4 	movi	r2,19
 2001be0:	d8800115 	stw	r2,4(sp)
 2001be4:	e0bf6004 	addi	r2,fp,-640
 2001be8:	10802604 	addi	r2,r2,152
 2001bec:	d8800015 	stw	r2,0(sp)
 2001bf0:	300f883a 	mov	r7,r6
 2001bf4:	280d883a 	mov	r6,r5
 2001bf8:	200b883a 	mov	r5,r4
 2001bfc:	1809883a 	mov	r4,r3
 2001c00:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[2],ball[6],velocity[2],velocity[6],collision[20],20);
 2001c04:	e0bfe504 	addi	r2,fp,-108
 2001c08:	11800c04 	addi	r6,r2,48
 2001c0c:	e0bfe504 	addi	r2,fp,-108
 2001c10:	11400404 	addi	r5,r2,16
 2001c14:	e0bf4c04 	addi	r2,fp,-720
 2001c18:	11000c04 	addi	r4,r2,48
 2001c1c:	e0bf4c04 	addi	r2,fp,-720
 2001c20:	10c00404 	addi	r3,r2,16
 2001c24:	00800504 	movi	r2,20
 2001c28:	d8800115 	stw	r2,4(sp)
 2001c2c:	e0bf6004 	addi	r2,fp,-640
 2001c30:	10802804 	addi	r2,r2,160
 2001c34:	d8800015 	stw	r2,0(sp)
 2001c38:	300f883a 	mov	r7,r6
 2001c3c:	280d883a 	mov	r6,r5
 2001c40:	200b883a 	mov	r5,r4
 2001c44:	1809883a 	mov	r4,r3
 2001c48:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[2],ball[7],velocity[2],velocity[7],collision[21],21);
 2001c4c:	e0bfe504 	addi	r2,fp,-108
 2001c50:	11800e04 	addi	r6,r2,56
 2001c54:	e0bfe504 	addi	r2,fp,-108
 2001c58:	11400404 	addi	r5,r2,16
 2001c5c:	e0bf4c04 	addi	r2,fp,-720
 2001c60:	11000e04 	addi	r4,r2,56
 2001c64:	e0bf4c04 	addi	r2,fp,-720
 2001c68:	10c00404 	addi	r3,r2,16
 2001c6c:	00800544 	movi	r2,21
 2001c70:	d8800115 	stw	r2,4(sp)
 2001c74:	e0bf6004 	addi	r2,fp,-640
 2001c78:	10802a04 	addi	r2,r2,168
 2001c7c:	d8800015 	stw	r2,0(sp)
 2001c80:	300f883a 	mov	r7,r6
 2001c84:	280d883a 	mov	r6,r5
 2001c88:	200b883a 	mov	r5,r4
 2001c8c:	1809883a 	mov	r4,r3
 2001c90:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[2],ball[8],velocity[2],velocity[8],collision[22],22);
 2001c94:	e0bfe504 	addi	r2,fp,-108
 2001c98:	11801004 	addi	r6,r2,64
 2001c9c:	e0bfe504 	addi	r2,fp,-108
 2001ca0:	11400404 	addi	r5,r2,16
 2001ca4:	e0bf4c04 	addi	r2,fp,-720
 2001ca8:	11001004 	addi	r4,r2,64
 2001cac:	e0bf4c04 	addi	r2,fp,-720
 2001cb0:	10c00404 	addi	r3,r2,16
 2001cb4:	00800584 	movi	r2,22
 2001cb8:	d8800115 	stw	r2,4(sp)
 2001cbc:	e0bf6004 	addi	r2,fp,-640
 2001cc0:	10802c04 	addi	r2,r2,176
 2001cc4:	d8800015 	stw	r2,0(sp)
 2001cc8:	300f883a 	mov	r7,r6
 2001ccc:	280d883a 	mov	r6,r5
 2001cd0:	200b883a 	mov	r5,r4
 2001cd4:	1809883a 	mov	r4,r3
 2001cd8:	200348c0 	call	200348c <collide_calc>
       collide_calc(ball[2],ball[9],velocity[2],velocity[9],collision[23],23);
 2001cdc:	e0bfe504 	addi	r2,fp,-108
 2001ce0:	11801204 	addi	r6,r2,72
 2001ce4:	e0bfe504 	addi	r2,fp,-108
 2001ce8:	11400404 	addi	r5,r2,16
 2001cec:	e0bf4c04 	addi	r2,fp,-720
 2001cf0:	11001204 	addi	r4,r2,72
 2001cf4:	e0bf4c04 	addi	r2,fp,-720
 2001cf8:	10c00404 	addi	r3,r2,16
 2001cfc:	008005c4 	movi	r2,23
 2001d00:	d8800115 	stw	r2,4(sp)
 2001d04:	e0bf6004 	addi	r2,fp,-640
 2001d08:	10802e04 	addi	r2,r2,184
 2001d0c:	d8800015 	stw	r2,0(sp)
 2001d10:	300f883a 	mov	r7,r6
 2001d14:	280d883a 	mov	r6,r5
 2001d18:	200b883a 	mov	r5,r4
 2001d1c:	1809883a 	mov	r4,r3
 2001d20:	200348c0 	call	200348c <collide_calc>

       collide_calc(ball[3],ball[4],velocity[3],velocity[4],collision[24],24);
 2001d24:	e0bfe504 	addi	r2,fp,-108
 2001d28:	11800804 	addi	r6,r2,32
 2001d2c:	e0bfe504 	addi	r2,fp,-108
 2001d30:	11400604 	addi	r5,r2,24
 2001d34:	e0bf4c04 	addi	r2,fp,-720
 2001d38:	11000804 	addi	r4,r2,32
 2001d3c:	e0bf4c04 	addi	r2,fp,-720
 2001d40:	10c00604 	addi	r3,r2,24
 2001d44:	00800604 	movi	r2,24
 2001d48:	d8800115 	stw	r2,4(sp)
 2001d4c:	e0bf6004 	addi	r2,fp,-640
 2001d50:	10803004 	addi	r2,r2,192
 2001d54:	d8800015 	stw	r2,0(sp)
 2001d58:	300f883a 	mov	r7,r6
 2001d5c:	280d883a 	mov	r6,r5
 2001d60:	200b883a 	mov	r5,r4
 2001d64:	1809883a 	mov	r4,r3
 2001d68:	200348c0 	call	200348c <collide_calc>
 	   collide_calc(ball[3],ball[5],velocity[3],velocity[5],collision[25],25);
 2001d6c:	e0bfe504 	addi	r2,fp,-108
 2001d70:	11800a04 	addi	r6,r2,40
 2001d74:	e0bfe504 	addi	r2,fp,-108
 2001d78:	11400604 	addi	r5,r2,24
 2001d7c:	e0bf4c04 	addi	r2,fp,-720
 2001d80:	11000a04 	addi	r4,r2,40
 2001d84:	e0bf4c04 	addi	r2,fp,-720
 2001d88:	10c00604 	addi	r3,r2,24
 2001d8c:	00800644 	movi	r2,25
 2001d90:	d8800115 	stw	r2,4(sp)
 2001d94:	e0bf6004 	addi	r2,fp,-640
 2001d98:	10803204 	addi	r2,r2,200
 2001d9c:	d8800015 	stw	r2,0(sp)
 2001da0:	300f883a 	mov	r7,r6
 2001da4:	280d883a 	mov	r6,r5
 2001da8:	200b883a 	mov	r5,r4
 2001dac:	1809883a 	mov	r4,r3
 2001db0:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[3],ball[6],velocity[3],velocity[6],collision[26],26);
 2001db4:	e0bfe504 	addi	r2,fp,-108
 2001db8:	11800c04 	addi	r6,r2,48
 2001dbc:	e0bfe504 	addi	r2,fp,-108
 2001dc0:	11400604 	addi	r5,r2,24
 2001dc4:	e0bf4c04 	addi	r2,fp,-720
 2001dc8:	11000c04 	addi	r4,r2,48
 2001dcc:	e0bf4c04 	addi	r2,fp,-720
 2001dd0:	10c00604 	addi	r3,r2,24
 2001dd4:	00800684 	movi	r2,26
 2001dd8:	d8800115 	stw	r2,4(sp)
 2001ddc:	e0bf6004 	addi	r2,fp,-640
 2001de0:	10803404 	addi	r2,r2,208
 2001de4:	d8800015 	stw	r2,0(sp)
 2001de8:	300f883a 	mov	r7,r6
 2001dec:	280d883a 	mov	r6,r5
 2001df0:	200b883a 	mov	r5,r4
 2001df4:	1809883a 	mov	r4,r3
 2001df8:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[3],ball[7],velocity[3],velocity[7],collision[27],27);
 2001dfc:	e0bfe504 	addi	r2,fp,-108
 2001e00:	11800e04 	addi	r6,r2,56
 2001e04:	e0bfe504 	addi	r2,fp,-108
 2001e08:	11400604 	addi	r5,r2,24
 2001e0c:	e0bf4c04 	addi	r2,fp,-720
 2001e10:	11000e04 	addi	r4,r2,56
 2001e14:	e0bf4c04 	addi	r2,fp,-720
 2001e18:	10c00604 	addi	r3,r2,24
 2001e1c:	008006c4 	movi	r2,27
 2001e20:	d8800115 	stw	r2,4(sp)
 2001e24:	e0bf6004 	addi	r2,fp,-640
 2001e28:	10803604 	addi	r2,r2,216
 2001e2c:	d8800015 	stw	r2,0(sp)
 2001e30:	300f883a 	mov	r7,r6
 2001e34:	280d883a 	mov	r6,r5
 2001e38:	200b883a 	mov	r5,r4
 2001e3c:	1809883a 	mov	r4,r3
 2001e40:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[3],ball[8],velocity[3],velocity[8],collision[28],28);
 2001e44:	e0bfe504 	addi	r2,fp,-108
 2001e48:	11801004 	addi	r6,r2,64
 2001e4c:	e0bfe504 	addi	r2,fp,-108
 2001e50:	11400604 	addi	r5,r2,24
 2001e54:	e0bf4c04 	addi	r2,fp,-720
 2001e58:	11001004 	addi	r4,r2,64
 2001e5c:	e0bf4c04 	addi	r2,fp,-720
 2001e60:	10c00604 	addi	r3,r2,24
 2001e64:	00800704 	movi	r2,28
 2001e68:	d8800115 	stw	r2,4(sp)
 2001e6c:	e0bf6004 	addi	r2,fp,-640
 2001e70:	10803804 	addi	r2,r2,224
 2001e74:	d8800015 	stw	r2,0(sp)
 2001e78:	300f883a 	mov	r7,r6
 2001e7c:	280d883a 	mov	r6,r5
 2001e80:	200b883a 	mov	r5,r4
 2001e84:	1809883a 	mov	r4,r3
 2001e88:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[3],ball[9],velocity[3],velocity[9],collision[29],29);
 2001e8c:	e0bfe504 	addi	r2,fp,-108
 2001e90:	11801204 	addi	r6,r2,72
 2001e94:	e0bfe504 	addi	r2,fp,-108
 2001e98:	11400604 	addi	r5,r2,24
 2001e9c:	e0bf4c04 	addi	r2,fp,-720
 2001ea0:	11001204 	addi	r4,r2,72
 2001ea4:	e0bf4c04 	addi	r2,fp,-720
 2001ea8:	10c00604 	addi	r3,r2,24
 2001eac:	00800744 	movi	r2,29
 2001eb0:	d8800115 	stw	r2,4(sp)
 2001eb4:	e0bf6004 	addi	r2,fp,-640
 2001eb8:	10803a04 	addi	r2,r2,232
 2001ebc:	d8800015 	stw	r2,0(sp)
 2001ec0:	300f883a 	mov	r7,r6
 2001ec4:	280d883a 	mov	r6,r5
 2001ec8:	200b883a 	mov	r5,r4
 2001ecc:	1809883a 	mov	r4,r3
 2001ed0:	200348c0 	call	200348c <collide_calc>

	   collide_calc(ball[4],ball[5],velocity[4],velocity[5],collision[30],30);
 2001ed4:	e0bfe504 	addi	r2,fp,-108
 2001ed8:	11800a04 	addi	r6,r2,40
 2001edc:	e0bfe504 	addi	r2,fp,-108
 2001ee0:	11400804 	addi	r5,r2,32
 2001ee4:	e0bf4c04 	addi	r2,fp,-720
 2001ee8:	11000a04 	addi	r4,r2,40
 2001eec:	e0bf4c04 	addi	r2,fp,-720
 2001ef0:	10c00804 	addi	r3,r2,32
 2001ef4:	00800784 	movi	r2,30
 2001ef8:	d8800115 	stw	r2,4(sp)
 2001efc:	e0bf6004 	addi	r2,fp,-640
 2001f00:	10803c04 	addi	r2,r2,240
 2001f04:	d8800015 	stw	r2,0(sp)
 2001f08:	300f883a 	mov	r7,r6
 2001f0c:	280d883a 	mov	r6,r5
 2001f10:	200b883a 	mov	r5,r4
 2001f14:	1809883a 	mov	r4,r3
 2001f18:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[4],ball[6],velocity[4],velocity[6],collision[31],31);
 2001f1c:	e0bfe504 	addi	r2,fp,-108
 2001f20:	11800c04 	addi	r6,r2,48
 2001f24:	e0bfe504 	addi	r2,fp,-108
 2001f28:	11400804 	addi	r5,r2,32
 2001f2c:	e0bf4c04 	addi	r2,fp,-720
 2001f30:	11000c04 	addi	r4,r2,48
 2001f34:	e0bf4c04 	addi	r2,fp,-720
 2001f38:	10c00804 	addi	r3,r2,32
 2001f3c:	008007c4 	movi	r2,31
 2001f40:	d8800115 	stw	r2,4(sp)
 2001f44:	e0bf6004 	addi	r2,fp,-640
 2001f48:	10803e04 	addi	r2,r2,248
 2001f4c:	d8800015 	stw	r2,0(sp)
 2001f50:	300f883a 	mov	r7,r6
 2001f54:	280d883a 	mov	r6,r5
 2001f58:	200b883a 	mov	r5,r4
 2001f5c:	1809883a 	mov	r4,r3
 2001f60:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[4],ball[7],velocity[4],velocity[7],collision[32],32);
 2001f64:	e0bfe504 	addi	r2,fp,-108
 2001f68:	11800e04 	addi	r6,r2,56
 2001f6c:	e0bfe504 	addi	r2,fp,-108
 2001f70:	11400804 	addi	r5,r2,32
 2001f74:	e0bf4c04 	addi	r2,fp,-720
 2001f78:	11000e04 	addi	r4,r2,56
 2001f7c:	e0bf4c04 	addi	r2,fp,-720
 2001f80:	10c00804 	addi	r3,r2,32
 2001f84:	00800804 	movi	r2,32
 2001f88:	d8800115 	stw	r2,4(sp)
 2001f8c:	e0bf6004 	addi	r2,fp,-640
 2001f90:	10804004 	addi	r2,r2,256
 2001f94:	d8800015 	stw	r2,0(sp)
 2001f98:	300f883a 	mov	r7,r6
 2001f9c:	280d883a 	mov	r6,r5
 2001fa0:	200b883a 	mov	r5,r4
 2001fa4:	1809883a 	mov	r4,r3
 2001fa8:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[4],ball[8],velocity[4],velocity[8],collision[33],33);
 2001fac:	e0bfe504 	addi	r2,fp,-108
 2001fb0:	11801004 	addi	r6,r2,64
 2001fb4:	e0bfe504 	addi	r2,fp,-108
 2001fb8:	11400804 	addi	r5,r2,32
 2001fbc:	e0bf4c04 	addi	r2,fp,-720
 2001fc0:	11001004 	addi	r4,r2,64
 2001fc4:	e0bf4c04 	addi	r2,fp,-720
 2001fc8:	10c00804 	addi	r3,r2,32
 2001fcc:	00800844 	movi	r2,33
 2001fd0:	d8800115 	stw	r2,4(sp)
 2001fd4:	e0bf6004 	addi	r2,fp,-640
 2001fd8:	10804204 	addi	r2,r2,264
 2001fdc:	d8800015 	stw	r2,0(sp)
 2001fe0:	300f883a 	mov	r7,r6
 2001fe4:	280d883a 	mov	r6,r5
 2001fe8:	200b883a 	mov	r5,r4
 2001fec:	1809883a 	mov	r4,r3
 2001ff0:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[4],ball[9],velocity[4],velocity[9],collision[34],34);
 2001ff4:	e0bfe504 	addi	r2,fp,-108
 2001ff8:	11801204 	addi	r6,r2,72
 2001ffc:	e0bfe504 	addi	r2,fp,-108
 2002000:	11400804 	addi	r5,r2,32
 2002004:	e0bf4c04 	addi	r2,fp,-720
 2002008:	11001204 	addi	r4,r2,72
 200200c:	e0bf4c04 	addi	r2,fp,-720
 2002010:	10c00804 	addi	r3,r2,32
 2002014:	00800884 	movi	r2,34
 2002018:	d8800115 	stw	r2,4(sp)
 200201c:	e0bf6004 	addi	r2,fp,-640
 2002020:	10804404 	addi	r2,r2,272
 2002024:	d8800015 	stw	r2,0(sp)
 2002028:	300f883a 	mov	r7,r6
 200202c:	280d883a 	mov	r6,r5
 2002030:	200b883a 	mov	r5,r4
 2002034:	1809883a 	mov	r4,r3
 2002038:	200348c0 	call	200348c <collide_calc>

	   collide_calc(ball[5],ball[6],velocity[5],velocity[6],collision[35],35);
 200203c:	e0bfe504 	addi	r2,fp,-108
 2002040:	11800c04 	addi	r6,r2,48
 2002044:	e0bfe504 	addi	r2,fp,-108
 2002048:	11400a04 	addi	r5,r2,40
 200204c:	e0bf4c04 	addi	r2,fp,-720
 2002050:	11000c04 	addi	r4,r2,48
 2002054:	e0bf4c04 	addi	r2,fp,-720
 2002058:	10c00a04 	addi	r3,r2,40
 200205c:	008008c4 	movi	r2,35
 2002060:	d8800115 	stw	r2,4(sp)
 2002064:	e0bf6004 	addi	r2,fp,-640
 2002068:	10804604 	addi	r2,r2,280
 200206c:	d8800015 	stw	r2,0(sp)
 2002070:	300f883a 	mov	r7,r6
 2002074:	280d883a 	mov	r6,r5
 2002078:	200b883a 	mov	r5,r4
 200207c:	1809883a 	mov	r4,r3
 2002080:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[5],ball[7],velocity[5],velocity[7],collision[36],36);
 2002084:	e0bfe504 	addi	r2,fp,-108
 2002088:	11800e04 	addi	r6,r2,56
 200208c:	e0bfe504 	addi	r2,fp,-108
 2002090:	11400a04 	addi	r5,r2,40
 2002094:	e0bf4c04 	addi	r2,fp,-720
 2002098:	11000e04 	addi	r4,r2,56
 200209c:	e0bf4c04 	addi	r2,fp,-720
 20020a0:	10c00a04 	addi	r3,r2,40
 20020a4:	00800904 	movi	r2,36
 20020a8:	d8800115 	stw	r2,4(sp)
 20020ac:	e0bf6004 	addi	r2,fp,-640
 20020b0:	10804804 	addi	r2,r2,288
 20020b4:	d8800015 	stw	r2,0(sp)
 20020b8:	300f883a 	mov	r7,r6
 20020bc:	280d883a 	mov	r6,r5
 20020c0:	200b883a 	mov	r5,r4
 20020c4:	1809883a 	mov	r4,r3
 20020c8:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[5],ball[8],velocity[5],velocity[8],collision[37],37);
 20020cc:	e0bfe504 	addi	r2,fp,-108
 20020d0:	11801004 	addi	r6,r2,64
 20020d4:	e0bfe504 	addi	r2,fp,-108
 20020d8:	11400a04 	addi	r5,r2,40
 20020dc:	e0bf4c04 	addi	r2,fp,-720
 20020e0:	11001004 	addi	r4,r2,64
 20020e4:	e0bf4c04 	addi	r2,fp,-720
 20020e8:	10c00a04 	addi	r3,r2,40
 20020ec:	00800944 	movi	r2,37
 20020f0:	d8800115 	stw	r2,4(sp)
 20020f4:	e0bf6004 	addi	r2,fp,-640
 20020f8:	10804a04 	addi	r2,r2,296
 20020fc:	d8800015 	stw	r2,0(sp)
 2002100:	300f883a 	mov	r7,r6
 2002104:	280d883a 	mov	r6,r5
 2002108:	200b883a 	mov	r5,r4
 200210c:	1809883a 	mov	r4,r3
 2002110:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[5],ball[9],velocity[5],velocity[9],collision[38],38);
 2002114:	e0bfe504 	addi	r2,fp,-108
 2002118:	11801204 	addi	r6,r2,72
 200211c:	e0bfe504 	addi	r2,fp,-108
 2002120:	11400a04 	addi	r5,r2,40
 2002124:	e0bf4c04 	addi	r2,fp,-720
 2002128:	11001204 	addi	r4,r2,72
 200212c:	e0bf4c04 	addi	r2,fp,-720
 2002130:	10c00a04 	addi	r3,r2,40
 2002134:	00800984 	movi	r2,38
 2002138:	d8800115 	stw	r2,4(sp)
 200213c:	e0bf6004 	addi	r2,fp,-640
 2002140:	10804c04 	addi	r2,r2,304
 2002144:	d8800015 	stw	r2,0(sp)
 2002148:	300f883a 	mov	r7,r6
 200214c:	280d883a 	mov	r6,r5
 2002150:	200b883a 	mov	r5,r4
 2002154:	1809883a 	mov	r4,r3
 2002158:	200348c0 	call	200348c <collide_calc>

	   collide_calc(ball[6],ball[7],velocity[6],velocity[7],collision[39],39);
 200215c:	e0bfe504 	addi	r2,fp,-108
 2002160:	11800e04 	addi	r6,r2,56
 2002164:	e0bfe504 	addi	r2,fp,-108
 2002168:	11400c04 	addi	r5,r2,48
 200216c:	e0bf4c04 	addi	r2,fp,-720
 2002170:	11000e04 	addi	r4,r2,56
 2002174:	e0bf4c04 	addi	r2,fp,-720
 2002178:	10c00c04 	addi	r3,r2,48
 200217c:	008009c4 	movi	r2,39
 2002180:	d8800115 	stw	r2,4(sp)
 2002184:	e0bf6004 	addi	r2,fp,-640
 2002188:	10804e04 	addi	r2,r2,312
 200218c:	d8800015 	stw	r2,0(sp)
 2002190:	300f883a 	mov	r7,r6
 2002194:	280d883a 	mov	r6,r5
 2002198:	200b883a 	mov	r5,r4
 200219c:	1809883a 	mov	r4,r3
 20021a0:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[6],ball[8],velocity[6],velocity[8],collision[40],40);
 20021a4:	e0bfe504 	addi	r2,fp,-108
 20021a8:	11801004 	addi	r6,r2,64
 20021ac:	e0bfe504 	addi	r2,fp,-108
 20021b0:	11400c04 	addi	r5,r2,48
 20021b4:	e0bf4c04 	addi	r2,fp,-720
 20021b8:	11001004 	addi	r4,r2,64
 20021bc:	e0bf4c04 	addi	r2,fp,-720
 20021c0:	10c00c04 	addi	r3,r2,48
 20021c4:	00800a04 	movi	r2,40
 20021c8:	d8800115 	stw	r2,4(sp)
 20021cc:	e0bf6004 	addi	r2,fp,-640
 20021d0:	10805004 	addi	r2,r2,320
 20021d4:	d8800015 	stw	r2,0(sp)
 20021d8:	300f883a 	mov	r7,r6
 20021dc:	280d883a 	mov	r6,r5
 20021e0:	200b883a 	mov	r5,r4
 20021e4:	1809883a 	mov	r4,r3
 20021e8:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[6],ball[9],velocity[6],velocity[9],collision[41],41);
 20021ec:	e0bfe504 	addi	r2,fp,-108
 20021f0:	11801204 	addi	r6,r2,72
 20021f4:	e0bfe504 	addi	r2,fp,-108
 20021f8:	11400c04 	addi	r5,r2,48
 20021fc:	e0bf4c04 	addi	r2,fp,-720
 2002200:	11001204 	addi	r4,r2,72
 2002204:	e0bf4c04 	addi	r2,fp,-720
 2002208:	10c00c04 	addi	r3,r2,48
 200220c:	00800a44 	movi	r2,41
 2002210:	d8800115 	stw	r2,4(sp)
 2002214:	e0bf6004 	addi	r2,fp,-640
 2002218:	10805204 	addi	r2,r2,328
 200221c:	d8800015 	stw	r2,0(sp)
 2002220:	300f883a 	mov	r7,r6
 2002224:	280d883a 	mov	r6,r5
 2002228:	200b883a 	mov	r5,r4
 200222c:	1809883a 	mov	r4,r3
 2002230:	200348c0 	call	200348c <collide_calc>

	   collide_calc(ball[7],ball[8],velocity[7],velocity[8],collision[42],42);
 2002234:	e0bfe504 	addi	r2,fp,-108
 2002238:	11801004 	addi	r6,r2,64
 200223c:	e0bfe504 	addi	r2,fp,-108
 2002240:	11400e04 	addi	r5,r2,56
 2002244:	e0bf4c04 	addi	r2,fp,-720
 2002248:	11001004 	addi	r4,r2,64
 200224c:	e0bf4c04 	addi	r2,fp,-720
 2002250:	10c00e04 	addi	r3,r2,56
 2002254:	00800a84 	movi	r2,42
 2002258:	d8800115 	stw	r2,4(sp)
 200225c:	e0bf6004 	addi	r2,fp,-640
 2002260:	10805404 	addi	r2,r2,336
 2002264:	d8800015 	stw	r2,0(sp)
 2002268:	300f883a 	mov	r7,r6
 200226c:	280d883a 	mov	r6,r5
 2002270:	200b883a 	mov	r5,r4
 2002274:	1809883a 	mov	r4,r3
 2002278:	200348c0 	call	200348c <collide_calc>
	   collide_calc(ball[7],ball[9],velocity[7],velocity[9],collision[43],43);
 200227c:	e0bfe504 	addi	r2,fp,-108
 2002280:	11801204 	addi	r6,r2,72
 2002284:	e0bfe504 	addi	r2,fp,-108
 2002288:	11400e04 	addi	r5,r2,56
 200228c:	e0bf4c04 	addi	r2,fp,-720
 2002290:	11001204 	addi	r4,r2,72
 2002294:	e0bf4c04 	addi	r2,fp,-720
 2002298:	10c00e04 	addi	r3,r2,56
 200229c:	00800ac4 	movi	r2,43
 20022a0:	d8800115 	stw	r2,4(sp)
 20022a4:	e0bf6004 	addi	r2,fp,-640
 20022a8:	10805604 	addi	r2,r2,344
 20022ac:	d8800015 	stw	r2,0(sp)
 20022b0:	300f883a 	mov	r7,r6
 20022b4:	280d883a 	mov	r6,r5
 20022b8:	200b883a 	mov	r5,r4
 20022bc:	1809883a 	mov	r4,r3
 20022c0:	200348c0 	call	200348c <collide_calc>

	   collide_calc(ball[8],ball[9],velocity[7],velocity[9],collision[44],44);
 20022c4:	e0bfe504 	addi	r2,fp,-108
 20022c8:	11801204 	addi	r6,r2,72
 20022cc:	e0bfe504 	addi	r2,fp,-108
 20022d0:	11400e04 	addi	r5,r2,56
 20022d4:	e0bf4c04 	addi	r2,fp,-720
 20022d8:	11001204 	addi	r4,r2,72
 20022dc:	e0bf4c04 	addi	r2,fp,-720
 20022e0:	10c01004 	addi	r3,r2,64
 20022e4:	00800b04 	movi	r2,44
 20022e8:	d8800115 	stw	r2,4(sp)
 20022ec:	e0bf6004 	addi	r2,fp,-640
 20022f0:	10805804 	addi	r2,r2,352
 20022f4:	d8800015 	stw	r2,0(sp)
 20022f8:	300f883a 	mov	r7,r6
 20022fc:	280d883a 	mov	r6,r5
 2002300:	200b883a 	mov	r5,r4
 2002304:	1809883a 	mov	r4,r3
 2002308:	200348c0 	call	200348c <collide_calc>


	   // Damping factor

  	   damping(velocity[0]);
 200230c:	e0bfe504 	addi	r2,fp,-108
 2002310:	1009883a 	mov	r4,r2
 2002314:	20039180 	call	2003918 <damping>
  	   damping(velocity[1]);
 2002318:	e0bfe504 	addi	r2,fp,-108
 200231c:	10800204 	addi	r2,r2,8
 2002320:	1009883a 	mov	r4,r2
 2002324:	20039180 	call	2003918 <damping>
  	   damping(velocity[2]);
 2002328:	e0bfe504 	addi	r2,fp,-108
 200232c:	10800404 	addi	r2,r2,16
 2002330:	1009883a 	mov	r4,r2
 2002334:	20039180 	call	2003918 <damping>
  	   damping(velocity[3]);
 2002338:	e0bfe504 	addi	r2,fp,-108
 200233c:	10800604 	addi	r2,r2,24
 2002340:	1009883a 	mov	r4,r2
 2002344:	20039180 	call	2003918 <damping>
  	   damping(velocity[4]);
 2002348:	e0bfe504 	addi	r2,fp,-108
 200234c:	10800804 	addi	r2,r2,32
 2002350:	1009883a 	mov	r4,r2
 2002354:	20039180 	call	2003918 <damping>
  	   damping(velocity[5]);
 2002358:	e0bfe504 	addi	r2,fp,-108
 200235c:	10800a04 	addi	r2,r2,40
 2002360:	1009883a 	mov	r4,r2
 2002364:	20039180 	call	2003918 <damping>
  	   damping(velocity[6]);
 2002368:	e0bfe504 	addi	r2,fp,-108
 200236c:	10800c04 	addi	r2,r2,48
 2002370:	1009883a 	mov	r4,r2
 2002374:	20039180 	call	2003918 <damping>
  	   damping(velocity[7]);
 2002378:	e0bfe504 	addi	r2,fp,-108
 200237c:	10800e04 	addi	r2,r2,56
 2002380:	1009883a 	mov	r4,r2
 2002384:	20039180 	call	2003918 <damping>
  	   damping(velocity[8]);
 2002388:	e0bfe504 	addi	r2,fp,-108
 200238c:	10801004 	addi	r2,r2,64
 2002390:	1009883a 	mov	r4,r2
 2002394:	20039180 	call	2003918 <damping>
  	   damping(velocity[9]);
 2002398:	e0bfe504 	addi	r2,fp,-108
 200239c:	10801204 	addi	r2,r2,72
 20023a0:	1009883a 	mov	r4,r2
 20023a4:	20039180 	call	2003918 <damping>

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 20023a8:	e0bfe504 	addi	r2,fp,-108
 20023ac:	1009883a 	mov	r4,r2
 20023b0:	20033680 	call	2003368 <momentum>
 20023b4:	1021883a 	mov	r16,r2
 20023b8:	e0bfe504 	addi	r2,fp,-108
 20023bc:	10800204 	addi	r2,r2,8
 20023c0:	1009883a 	mov	r4,r2
 20023c4:	20033680 	call	2003368 <momentum>
 20023c8:	1007883a 	mov	r3,r2
 20023cc:	80e1ff72 	custom	253,r16,r16,r3
 20023d0:	e0bfe504 	addi	r2,fp,-108
 20023d4:	10800404 	addi	r2,r2,16
 20023d8:	1009883a 	mov	r4,r2
 20023dc:	20033680 	call	2003368 <momentum>
 20023e0:	1007883a 	mov	r3,r2
 20023e4:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
 20023e8:	e0bfe504 	addi	r2,fp,-108
 20023ec:	10800604 	addi	r2,r2,24
 20023f0:	1009883a 	mov	r4,r2
 20023f4:	20033680 	call	2003368 <momentum>
 20023f8:	1007883a 	mov	r3,r2
 20023fc:	80e1ff72 	custom	253,r16,r16,r3
 2002400:	e0bfe504 	addi	r2,fp,-108
 2002404:	10800804 	addi	r2,r2,32
 2002408:	1009883a 	mov	r4,r2
 200240c:	20033680 	call	2003368 <momentum>
 2002410:	1007883a 	mov	r3,r2
 2002414:	80e1ff72 	custom	253,r16,r16,r3
 2002418:	e0bfe504 	addi	r2,fp,-108
 200241c:	10800a04 	addi	r2,r2,40
 2002420:	1009883a 	mov	r4,r2
 2002424:	20033680 	call	2003368 <momentum>
 2002428:	1007883a 	mov	r3,r2
 200242c:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
 2002430:	e0bfe504 	addi	r2,fp,-108
 2002434:	10800c04 	addi	r2,r2,48
 2002438:	1009883a 	mov	r4,r2
 200243c:	20033680 	call	2003368 <momentum>
 2002440:	1007883a 	mov	r3,r2
 2002444:	80e1ff72 	custom	253,r16,r16,r3
 2002448:	e0bfe504 	addi	r2,fp,-108
 200244c:	10800e04 	addi	r2,r2,56
 2002450:	1009883a 	mov	r4,r2
 2002454:	20033680 	call	2003368 <momentum>
 2002458:	1007883a 	mov	r3,r2
 200245c:	80e1ff72 	custom	253,r16,r16,r3
 2002460:	e0bfe504 	addi	r2,fp,-108
 2002464:	10801004 	addi	r2,r2,64
 2002468:	1009883a 	mov	r4,r2
 200246c:	20033680 	call	2003368 <momentum>
 2002470:	1007883a 	mov	r3,r2
 2002474:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[9]);
 2002478:	e0bfe504 	addi	r2,fp,-108
 200247c:	10801204 	addi	r2,r2,72
 2002480:	1009883a 	mov	r4,r2
 2002484:	20033680 	call	2003368 <momentum>
 2002488:	1007883a 	mov	r3,r2
  	   damping(velocity[6]);
  	   damping(velocity[7]);
  	   damping(velocity[8]);
  	   damping(velocity[9]);

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 200248c:	80c5ff72 	custom	253,r2,r16,r3
 2002490:	e0bf3f15 	stw	r2,-772(fp)
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
    		+momentum(velocity[9]);


       IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 2002494:	e0bf4017 	ldw	r2,-768(fp)
 2002498:	10800104 	addi	r2,r2,4
 200249c:	e0ff4d17 	ldw	r3,-716(fp)
 20024a0:	1807fe72 	custom	249,r3,r3,zero
 20024a4:	180892ba 	slli	r4,r3,10
 20024a8:	e0ff4c17 	ldw	r3,-720(fp)
 20024ac:	1807fe72 	custom	249,r3,r3,zero
 20024b0:	20c7883a 	add	r3,r4,r3
 20024b4:	10c00035 	stwio	r3,0(r2)
       IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 20024b8:	e0bf4017 	ldw	r2,-768(fp)
 20024bc:	10800204 	addi	r2,r2,8
 20024c0:	e0ff4f17 	ldw	r3,-708(fp)
 20024c4:	1807fe72 	custom	249,r3,r3,zero
 20024c8:	180892ba 	slli	r4,r3,10
 20024cc:	e0ff4e17 	ldw	r3,-712(fp)
 20024d0:	1807fe72 	custom	249,r3,r3,zero
 20024d4:	20c7883a 	add	r3,r4,r3
 20024d8:	10c00035 	stwio	r3,0(r2)
       IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 20024dc:	e0bf4017 	ldw	r2,-768(fp)
 20024e0:	10800304 	addi	r2,r2,12
 20024e4:	e0ff5117 	ldw	r3,-700(fp)
 20024e8:	1807fe72 	custom	249,r3,r3,zero
 20024ec:	180892ba 	slli	r4,r3,10
 20024f0:	e0ff5017 	ldw	r3,-704(fp)
 20024f4:	1807fe72 	custom	249,r3,r3,zero
 20024f8:	20c7883a 	add	r3,r4,r3
 20024fc:	10c00035 	stwio	r3,0(r2)
       IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 2002500:	e0bf4017 	ldw	r2,-768(fp)
 2002504:	10800404 	addi	r2,r2,16
 2002508:	e0ff5317 	ldw	r3,-692(fp)
 200250c:	1807fe72 	custom	249,r3,r3,zero
 2002510:	180892ba 	slli	r4,r3,10
 2002514:	e0ff5217 	ldw	r3,-696(fp)
 2002518:	1807fe72 	custom	249,r3,r3,zero
 200251c:	20c7883a 	add	r3,r4,r3
 2002520:	10c00035 	stwio	r3,0(r2)
       IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2002524:	e0bf4017 	ldw	r2,-768(fp)
 2002528:	10800504 	addi	r2,r2,20
 200252c:	e0ff5517 	ldw	r3,-684(fp)
 2002530:	1807fe72 	custom	249,r3,r3,zero
 2002534:	180892ba 	slli	r4,r3,10
 2002538:	e0ff5417 	ldw	r3,-688(fp)
 200253c:	1807fe72 	custom	249,r3,r3,zero
 2002540:	20c7883a 	add	r3,r4,r3
 2002544:	10c00035 	stwio	r3,0(r2)
       IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 2002548:	e0bf4017 	ldw	r2,-768(fp)
 200254c:	10800604 	addi	r2,r2,24
 2002550:	e0ff5717 	ldw	r3,-676(fp)
 2002554:	1807fe72 	custom	249,r3,r3,zero
 2002558:	180892ba 	slli	r4,r3,10
 200255c:	e0ff5617 	ldw	r3,-680(fp)
 2002560:	1807fe72 	custom	249,r3,r3,zero
 2002564:	20c7883a 	add	r3,r4,r3
 2002568:	10c00035 	stwio	r3,0(r2)
       IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 200256c:	e0bf4017 	ldw	r2,-768(fp)
 2002570:	10800704 	addi	r2,r2,28
 2002574:	e0ff5917 	ldw	r3,-668(fp)
 2002578:	1807fe72 	custom	249,r3,r3,zero
 200257c:	180892ba 	slli	r4,r3,10
 2002580:	e0ff5817 	ldw	r3,-672(fp)
 2002584:	1807fe72 	custom	249,r3,r3,zero
 2002588:	20c7883a 	add	r3,r4,r3
 200258c:	10c00035 	stwio	r3,0(r2)
       IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 2002590:	e0bf4017 	ldw	r2,-768(fp)
 2002594:	10800804 	addi	r2,r2,32
 2002598:	e0ff5b17 	ldw	r3,-660(fp)
 200259c:	1807fe72 	custom	249,r3,r3,zero
 20025a0:	180892ba 	slli	r4,r3,10
 20025a4:	e0ff5a17 	ldw	r3,-664(fp)
 20025a8:	1807fe72 	custom	249,r3,r3,zero
 20025ac:	20c7883a 	add	r3,r4,r3
 20025b0:	10c00035 	stwio	r3,0(r2)
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 20025b4:	e0bf4017 	ldw	r2,-768(fp)
 20025b8:	10800904 	addi	r2,r2,36
 20025bc:	e0ff5d17 	ldw	r3,-652(fp)
 20025c0:	1807fe72 	custom	249,r3,r3,zero
 20025c4:	180892ba 	slli	r4,r3,10
 20025c8:	e0ff5c17 	ldw	r3,-656(fp)
 20025cc:	1807fe72 	custom	249,r3,r3,zero
 20025d0:	20c7883a 	add	r3,r4,r3
 20025d4:	10c00035 	stwio	r3,0(r2)
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 20025d8:	e0bf4017 	ldw	r2,-768(fp)
 20025dc:	10800a04 	addi	r2,r2,40
 20025e0:	e0ff5f17 	ldw	r3,-644(fp)
 20025e4:	1807fe72 	custom	249,r3,r3,zero
 20025e8:	180892ba 	slli	r4,r3,10
 20025ec:	e0ff5e17 	ldw	r3,-648(fp)
 20025f0:	1807fe72 	custom	249,r3,r3,zero
 20025f4:	20c7883a 	add	r3,r4,r3
 20025f8:	10c00035 	stwio	r3,0(r2)
       OSTimeDlyHMSM(0, 0, 0, 4);
 20025fc:	01c00104 	movi	r7,4
 2002600:	000d883a 	mov	r6,zero
 2002604:	000b883a 	mov	r5,zero
 2002608:	0009883a 	mov	r4,zero
 200260c:	201f3040 	call	201f304 <OSTimeDlyHMSM>

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
   float theta = atan2f(*effect_x-446, *effect_y-263);
   DEBUG_PRINT("theta : %f",theta);

   while(speed >= 0.1)
 2002610:	e13f3f17 	ldw	r4,-772(fp)
 2002614:	20090680 	call	2009068 <__extendsfdf2>
 2002618:	1011883a 	mov	r8,r2
 200261c:	1813883a 	mov	r9,r3
 2002620:	01a666b4 	movhi	r6,39322
 2002624:	31a66684 	addi	r6,r6,-26214
 2002628:	01cfeeb4 	movhi	r7,16314
 200262c:	39e66644 	addi	r7,r7,-26215
 2002630:	4009883a 	mov	r4,r8
 2002634:	480b883a 	mov	r5,r9
 2002638:	2007e840 	call	2007e84 <__gedf2>
 200263c:	1039350e 	bge	r2,zero,2000b14 <task2+0x4e0>
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
       OSTimeDlyHMSM(0, 0, 0, 4);

   }
   OSTimeDlyHMSM(0, 0, 0, 500);
 2002640:	01c07d04 	movi	r7,500
 2002644:	000d883a 	mov	r6,zero
 2002648:	000b883a 	mov	r5,zero
 200264c:	0009883a 	mov	r4,zero
 2002650:	201f3040 	call	201f304 <OSTimeDlyHMSM>

   DEBUG_PRINT("[Task 2] Animation termine\n");
 2002654:	010080b4 	movhi	r4,514
 2002658:	21083d04 	addi	r4,r4,8436
 200265c:	20098d40 	call	20098d4 <puts>

   OSTimeDlyHMSM(0, 0, 0, 100);
 2002660:	01c01904 	movi	r7,100
 2002664:	000d883a 	mov	r6,zero
 2002668:	000b883a 	mov	r5,zero
 200266c:	0009883a 	mov	r4,zero
 2002670:	201f3040 	call	201f304 <OSTimeDlyHMSM>

   opt_task2= OS_FLAG_CLR;
 2002674:	e03f4105 	stb	zero,-764(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2002678:	d0a78817 	ldw	r2,-25056(gp)
 200267c:	e0ff4103 	ldbu	r3,-764(fp)
 2002680:	e13f4b04 	addi	r4,fp,-724
 2002684:	200f883a 	mov	r7,r4
 2002688:	180d883a 	mov	r6,r3
 200268c:	01400044 	movi	r5,1
 2002690:	1009883a 	mov	r4,r2
 2002694:	201a4e40 	call	201a4e4 <OSFlagPost>

   OSMboxPost(MailBox6, &number_of_ball);
 2002698:	d0a78517 	ldw	r2,-25068(gp)
 200269c:	e0ffba04 	addi	r3,fp,-280
 20026a0:	180b883a 	mov	r5,r3
 20026a4:	1009883a 	mov	r4,r2
 20026a8:	201b4600 	call	201b460 <OSMboxPost>
   //OSMboxPost(MailBox7, &score);

  }
 20026ac:	00385706 	br	200080c <task2+0x1d8>

020026b0 <task3>:
}

void task3(void* pdata)
{
 20026b0:	deffe304 	addi	sp,sp,-116
 20026b4:	dfc01c15 	stw	ra,112(sp)
 20026b8:	df001b15 	stw	fp,108(sp)
 20026bc:	df001b04 	addi	fp,sp,108
 20026c0:	e13fff15 	stw	r4,-4(fp)
	int * game_finish = (int*) MEM_NIOS_PI_BASE+14; to RPi
	int * time_out = (int*) MEM_NIOS_PI_BASE+15; from RPi
	*/
	//intermediate variable//

	IOWR(MEM_NIOS_PI_BASE,0,0);
 20026c4:	0007883a 	mov	r3,zero
 20026c8:	00800834 	movhi	r2,32
 20026cc:	10c00035 	stwio	r3,0(r2)
	IOWR(MEM_NIOS_PI_BASE,1,0);
 20026d0:	0007883a 	mov	r3,zero
 20026d4:	00800834 	movhi	r2,32
 20026d8:	10800104 	addi	r2,r2,4
 20026dc:	10c00035 	stwio	r3,0(r2)
	IOWR(MEM_NIOS_PI_BASE,2,0);
 20026e0:	0007883a 	mov	r3,zero
 20026e4:	00800834 	movhi	r2,32
 20026e8:	10800204 	addi	r2,r2,8
 20026ec:	10c00035 	stwio	r3,0(r2)

	IOWR(MEM_NIOS_PI_BASE,3,0);
 20026f0:	0007883a 	mov	r3,zero
 20026f4:	00800834 	movhi	r2,32
 20026f8:	10800304 	addi	r2,r2,12
 20026fc:	10c00035 	stwio	r3,0(r2)

	IOWR(MEM_NIOS_PI_BASE,7,0);
 2002700:	0007883a 	mov	r3,zero
 2002704:	00800834 	movhi	r2,32
 2002708:	10800704 	addi	r2,r2,28
 200270c:	10c00035 	stwio	r3,0(r2)

	int ready,first_player,game_finish,ready_send;
	int all_rdy;

	ready=0;
 2002710:	e03fe715 	stw	zero,-100(fp)
	first_player=0;
 2002714:	e03fe815 	stw	zero,-96(fp)
	all_rdy=0;
 2002718:	e03feb15 	stw	zero,-84(fp)
	game_finish=0;
 200271c:	e03fe915 	stw	zero,-92(fp)
	ready_send=0;
 2002720:	e03fea15 	stw	zero,-88(fp)
	int number_of_ball = 10;
 2002724:	00800284 	movi	r2,10
 2002728:	e0bffc15 	stw	r2,-16(fp)
    int time_out = 0;
 200272c:	e03fec15 	stw	zero,-80(fp)

    int val = IORD(GPIO_BASE,0);
 2002730:	00800834 	movhi	r2,32
 2002734:	10810004 	addi	r2,r2,1024
 2002738:	10800037 	ldwio	r2,0(r2)
 200273c:	e0bfed15 	stw	r2,-76(fp)
    IOWR(MTL_IP_BASE,13,4);
 2002740:	00c00104 	movi	r3,4
 2002744:	008000b4 	movhi	r2,2
 2002748:	10800d04 	addi	r2,r2,52
 200274c:	10c00035 	stwio	r3,0(r2)
    while(!val){
 2002750:	00000906 	br	2002778 <task3+0xc8>
    	val = IORD(GPIO_BASE,0);
 2002754:	00800834 	movhi	r2,32
 2002758:	10810004 	addi	r2,r2,1024
 200275c:	10800037 	ldwio	r2,0(r2)
 2002760:	e0bfed15 	stw	r2,-76(fp)
    	OSTimeDlyHMSM(0,0,0,500);
 2002764:	01c07d04 	movi	r7,500
 2002768:	000d883a 	mov	r6,zero
 200276c:	000b883a 	mov	r5,zero
 2002770:	0009883a 	mov	r4,zero
 2002774:	201f3040 	call	201f304 <OSTimeDlyHMSM>
	int number_of_ball = 10;
    int time_out = 0;

    int val = IORD(GPIO_BASE,0);
    IOWR(MTL_IP_BASE,13,4);
    while(!val){
 2002778:	e0bfed17 	ldw	r2,-76(fp)
 200277c:	103ff526 	beq	r2,zero,2002754 <task3+0xa4>
    	OSTimeDlyHMSM(0,0,0,500);
    }

	while (1)
	{
            time_out = 0;
 2002780:	e03fec15 	stw	zero,-80(fp)
			/* Wait for first player */
		    OSFlagPost(ActivateTask4Grp,ACTIVATE_TASK4,OS_FLAG_SET,&err);
 2002784:	d0a78a17 	ldw	r2,-25048(gp)
 2002788:	e0fffb04 	addi	r3,fp,-20
 200278c:	180f883a 	mov	r7,r3
 2002790:	01800044 	movi	r6,1
 2002794:	01400044 	movi	r5,1
 2002798:	1009883a 	mov	r4,r2
 200279c:	201a4e40 	call	201a4e4 <OSFlagPost>
		    IOWR(MTL_IP_BASE,13,2);
 20027a0:	00c00084 	movi	r3,2
 20027a4:	008000b4 	movhi	r2,2
 20027a8:	10800d04 	addi	r2,r2,52
 20027ac:	10c00035 	stwio	r3,0(r2)
            DEBUG_PRINT("[Task 3] Wait for first player\n");
 20027b0:	010080b4 	movhi	r4,514
 20027b4:	21085804 	addi	r4,r4,8544
 20027b8:	20098d40 	call	20098d4 <puts>
			while (!ready && !time_out){
 20027bc:	00003506 	br	2002894 <task3+0x1e4>
				int var = IORD(MEM_NIOS_PI_BASE,1);
 20027c0:	00800834 	movhi	r2,32
 20027c4:	10800104 	addi	r2,r2,4
 20027c8:	10800037 	ldwio	r2,0(r2)
 20027cc:	e0bfee15 	stw	r2,-72(fp)
                time_out = IORD(MEM_NIOS_PI_BASE,15);
 20027d0:	00800834 	movhi	r2,32
 20027d4:	10800f04 	addi	r2,r2,60
 20027d8:	10800037 	ldwio	r2,0(r2)
 20027dc:	e0bfec15 	stw	r2,-80(fp)
                if(time_out) IOWR(MEM_NIOS_PI_BASE,15,1);
 20027e0:	e0bfec17 	ldw	r2,-80(fp)
 20027e4:	10000426 	beq	r2,zero,20027f8 <task3+0x148>
 20027e8:	00c00044 	movi	r3,1
 20027ec:	00800834 	movhi	r2,32
 20027f0:	10800f04 	addi	r2,r2,60
 20027f4:	10c00035 	stwio	r3,0(r2)
				if(var != 0){
 20027f8:	e0bfee17 	ldw	r2,-72(fp)
 20027fc:	10000526 	beq	r2,zero,2002814 <task3+0x164>
					ready = 1;
 2002800:	00800044 	movi	r2,1
 2002804:	e0bfe715 	stw	r2,-100(fp)
					first_player = var;
 2002808:	e0bfee17 	ldw	r2,-72(fp)
 200280c:	e0bfe815 	stw	r2,-96(fp)
 2002810:	00001b06 	br	2002880 <task3+0x1d0>
				}
				else if(!time_out){
 2002814:	e0bfec17 	ldw	r2,-80(fp)
 2002818:	1000191e 	bne	r2,zero,2002880 <task3+0x1d0>
					OS_FLAGS flag = OSFlagAccept(StartGameGrp,START_THE_GAME,OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, &err);
 200281c:	d0a79417 	ldw	r2,-25008(gp)
 2002820:	e0fffb04 	addi	r3,fp,-20
 2002824:	180f883a 	mov	r7,r3
 2002828:	01802084 	movi	r6,130
 200282c:	01400044 	movi	r5,1
 2002830:	1009883a 	mov	r4,r2
 2002834:	20196000 	call	2019600 <OSFlagAccept>
 2002838:	e0bfef0d 	sth	r2,-68(fp)
					if (flag==START_THE_GAME && !ready_send){
 200283c:	e0bfef0b 	ldhu	r2,-68(fp)
 2002840:	10800058 	cmpnei	r2,r2,1
 2002844:	10000e1e 	bne	r2,zero,2002880 <task3+0x1d0>
 2002848:	e0bfea17 	ldw	r2,-88(fp)
 200284c:	10000c1e 	bne	r2,zero,2002880 <task3+0x1d0>
					    IOWR(MTL_IP_BASE,13,3);
 2002850:	00c000c4 	movi	r3,3
 2002854:	008000b4 	movhi	r2,2
 2002858:	10800d04 	addi	r2,r2,52
 200285c:	10c00035 	stwio	r3,0(r2)
                        DEBUG_PRINT("[Task 3] Player touch the screen\n");
 2002860:	010080b4 	movhi	r4,514
 2002864:	21086004 	addi	r4,r4,8576
 2002868:	20098d40 	call	20098d4 <puts>
						ready_send = 1;
 200286c:	00800044 	movi	r2,1
 2002870:	e0bfea15 	stw	r2,-88(fp)
						IOWR(MEM_NIOS_PI_BASE,0,ID1);
 2002874:	00c00084 	movi	r3,2
 2002878:	00800834 	movhi	r2,32
 200287c:	10c00035 	stwio	r3,0(r2)
					}
				}
				OSTimeDlyHMSM(0, 0, 0, 100);
 2002880:	01c01904 	movi	r7,100
 2002884:	000d883a 	mov	r6,zero
 2002888:	000b883a 	mov	r5,zero
 200288c:	0009883a 	mov	r4,zero
 2002890:	201f3040 	call	201f304 <OSTimeDlyHMSM>
            time_out = 0;
			/* Wait for first player */
		    OSFlagPost(ActivateTask4Grp,ACTIVATE_TASK4,OS_FLAG_SET,&err);
		    IOWR(MTL_IP_BASE,13,2);
            DEBUG_PRINT("[Task 3] Wait for first player\n");
			while (!ready && !time_out){
 2002894:	e0bfe717 	ldw	r2,-100(fp)
 2002898:	1000021e 	bne	r2,zero,20028a4 <task3+0x1f4>
 200289c:	e0bfec17 	ldw	r2,-80(fp)
 20028a0:	103fc726 	beq	r2,zero,20027c0 <task3+0x110>
				}
				OSTimeDlyHMSM(0, 0, 0, 100);
			}

			/* Wait for all player */
			DEBUG_PRINT("[Task 3] Wait for all player are ready \n");
 20028a4:	010080b4 	movhi	r4,514
 20028a8:	21086904 	addi	r4,r4,8612
 20028ac:	20098d40 	call	20098d4 <puts>
			while(!all_rdy && !time_out){
 20028b0:	00001006 	br	20028f4 <task3+0x244>
                time_out = IORD(MEM_NIOS_PI_BASE,15);
 20028b4:	00800834 	movhi	r2,32
 20028b8:	10800f04 	addi	r2,r2,60
 20028bc:	10800037 	ldwio	r2,0(r2)
 20028c0:	e0bfec15 	stw	r2,-80(fp)
                if(time_out) IOWR(MEM_NIOS_PI_BASE,15,1);
 20028c4:	e0bfec17 	ldw	r2,-80(fp)
 20028c8:	10000426 	beq	r2,zero,20028dc <task3+0x22c>
 20028cc:	00c00044 	movi	r3,1
 20028d0:	00800834 	movhi	r2,32
 20028d4:	10800f04 	addi	r2,r2,60
 20028d8:	10c00035 	stwio	r3,0(r2)
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
 20028dc:	00800834 	movhi	r2,32
 20028e0:	10800204 	addi	r2,r2,8
 20028e4:	10800037 	ldwio	r2,0(r2)
 20028e8:	10000226 	beq	r2,zero,20028f4 <task3+0x244>
 20028ec:	00800044 	movi	r2,1
 20028f0:	e0bfeb15 	stw	r2,-84(fp)
				OSTimeDlyHMSM(0, 0, 0, 100);
			}

			/* Wait for all player */
			DEBUG_PRINT("[Task 3] Wait for all player are ready \n");
			while(!all_rdy && !time_out){
 20028f4:	e0bfeb17 	ldw	r2,-84(fp)
 20028f8:	1000021e 	bne	r2,zero,2002904 <task3+0x254>
 20028fc:	e0bfec17 	ldw	r2,-80(fp)
 2002900:	103fec26 	beq	r2,zero,20028b4 <task3+0x204>
                time_out = IORD(MEM_NIOS_PI_BASE,15);
                if(time_out) IOWR(MEM_NIOS_PI_BASE,15,1);
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
			}

			activePlayer = first_player;
 2002904:	e0bfe817 	ldw	r2,-96(fp)
 2002908:	e0bfe615 	stw	r2,-104(fp)
			game_finish = 0;
 200290c:	e03fe915 	stw	zero,-92(fp)
			DEBUG_PRINT("[Task 3] the game can start\n");
 2002910:	010080b4 	movhi	r4,514
 2002914:	21087304 	addi	r4,r4,8652
 2002918:	20098d40 	call	20098d4 <puts>
			IOWR(MTL_IP_BASE,13,0);
 200291c:	0007883a 	mov	r3,zero
 2002920:	008000b4 	movhi	r2,2
 2002924:	10800d04 	addi	r2,r2,52
 2002928:	10c00035 	stwio	r3,0(r2)
			while(!game_finish && !time_out){
 200292c:	00011806 	br	2002d90 <task3+0x6e0>
                time_out = IORD(MEM_NIOS_PI_BASE,15);
 2002930:	00800834 	movhi	r2,32
 2002934:	10800f04 	addi	r2,r2,60
 2002938:	10800037 	ldwio	r2,0(r2)
 200293c:	e0bfec15 	stw	r2,-80(fp)
                if(time_out) IOWR(MEM_NIOS_PI_BASE,15,0);
 2002940:	e0bfec17 	ldw	r2,-80(fp)
 2002944:	10000426 	beq	r2,zero,2002958 <task3+0x2a8>
 2002948:	0007883a 	mov	r3,zero
 200294c:	00800834 	movhi	r2,32
 2002950:	10800f04 	addi	r2,r2,60
 2002954:	10c00035 	stwio	r3,0(r2)
                if(activePlayer == ID1){
 2002958:	e0bfe617 	ldw	r2,-104(fp)
 200295c:	10800098 	cmpnei	r2,r2,2
 2002960:	1000051e 	bne	r2,zero,2002978 <task3+0x2c8>
                	IOWR(MTL_IP_BASE,12,1);
 2002964:	00c00044 	movi	r3,1
 2002968:	008000b4 	movhi	r2,2
 200296c:	10800c04 	addi	r2,r2,48
 2002970:	10c00035 	stwio	r3,0(r2)
 2002974:	00000406 	br	2002988 <task3+0x2d8>
                }
                else{
                	IOWR(MTL_IP_BASE,12,0);
 2002978:	0007883a 	mov	r3,zero
 200297c:	008000b4 	movhi	r2,2
 2002980:	10800c04 	addi	r2,r2,48
 2002984:	10c00035 	stwio	r3,0(r2)
                }
				if(activePlayer==ID1 && !IORD(MEM_NIOS_PI_BASE,7) && !time_out){
 2002988:	e0bfe617 	ldw	r2,-104(fp)
 200298c:	10800098 	cmpnei	r2,r2,2
 2002990:	1000851e 	bne	r2,zero,2002ba8 <task3+0x4f8>
 2002994:	00800834 	movhi	r2,32
 2002998:	10800704 	addi	r2,r2,28
 200299c:	10800037 	ldwio	r2,0(r2)
 20029a0:	1000811e 	bne	r2,zero,2002ba8 <task3+0x4f8>
 20029a4:	e0bfec17 	ldw	r2,-80(fp)
 20029a8:	10007f1e 	bne	r2,zero,2002ba8 <task3+0x4f8>
						OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 20029ac:	d0a79317 	ldw	r2,-25012(gp)
 20029b0:	e0fffb04 	addi	r3,fp,-20
 20029b4:	180f883a 	mov	r7,r3
 20029b8:	01800044 	movi	r6,1
 20029bc:	01400044 	movi	r5,1
 20029c0:	1009883a 	mov	r4,r2
 20029c4:	201a4e40 	call	201a4e4 <OSFlagPost>
						DEBUG_PRINT("[Task 3] Wait for value from task 1\n");
 20029c8:	010080b4 	movhi	r4,514
 20029cc:	21087a04 	addi	r4,r4,8680
 20029d0:	20098d40 	call	20098d4 <puts>
						int *vector_x = (int *) OSMboxPend(MailBox1,0,&err);
 20029d4:	d0a79217 	ldw	r2,-25016(gp)
 20029d8:	e0fffb04 	addi	r3,fp,-20
 20029dc:	180d883a 	mov	r6,r3
 20029e0:	000b883a 	mov	r5,zero
 20029e4:	1009883a 	mov	r4,r2
 20029e8:	201b0c00 	call	201b0c0 <OSMboxPend>
 20029ec:	e0bff015 	stw	r2,-64(fp)
						int *vector_y = (int *) OSMboxPend(MailBox2,0,&err);
 20029f0:	d0a78c17 	ldw	r2,-25040(gp)
 20029f4:	e0fffb04 	addi	r3,fp,-20
 20029f8:	180d883a 	mov	r6,r3
 20029fc:	000b883a 	mov	r5,zero
 2002a00:	1009883a 	mov	r4,r2
 2002a04:	201b0c00 	call	201b0c0 <OSMboxPend>
 2002a08:	e0bff115 	stw	r2,-60(fp)
						int *effect_x = (int *) OSMboxPend(MailBox10,0,&err);
 2002a0c:	d0a78b17 	ldw	r2,-25044(gp)
 2002a10:	e0fffb04 	addi	r3,fp,-20
 2002a14:	180d883a 	mov	r6,r3
 2002a18:	000b883a 	mov	r5,zero
 2002a1c:	1009883a 	mov	r4,r2
 2002a20:	201b0c00 	call	201b0c0 <OSMboxPend>
 2002a24:	e0bff215 	stw	r2,-56(fp)
						int *effect_y = (int *) OSMboxPend(MailBox11,0,&err);
 2002a28:	d0a79117 	ldw	r2,-25020(gp)
 2002a2c:	e0fffb04 	addi	r3,fp,-20
 2002a30:	180d883a 	mov	r6,r3
 2002a34:	000b883a 	mov	r5,zero
 2002a38:	1009883a 	mov	r4,r2
 2002a3c:	201b0c00 	call	201b0c0 <OSMboxPend>
 2002a40:	e0bff315 	stw	r2,-52(fp)
						DEBUG_PRINT("[Task 3] Get value from task 1 : (%d, %d)\n",*vector_x, *vector_y);
 2002a44:	e0bff017 	ldw	r2,-64(fp)
 2002a48:	10c00017 	ldw	r3,0(r2)
 2002a4c:	e0bff117 	ldw	r2,-60(fp)
 2002a50:	10800017 	ldw	r2,0(r2)
 2002a54:	100d883a 	mov	r6,r2
 2002a58:	180b883a 	mov	r5,r3
 2002a5c:	010080b4 	movhi	r4,514
 2002a60:	21088304 	addi	r4,r4,8716
 2002a64:	20097540 	call	2009754 <printf>

						OSMboxPost(MailBox4, vector_x);
 2002a68:	d0a78f17 	ldw	r2,-25028(gp)
 2002a6c:	e17ff017 	ldw	r5,-64(fp)
 2002a70:	1009883a 	mov	r4,r2
 2002a74:	201b4600 	call	201b460 <OSMboxPost>
						OSMboxPost(MailBox5, vector_y);
 2002a78:	d0a78917 	ldw	r2,-25052(gp)
 2002a7c:	e17ff117 	ldw	r5,-60(fp)
 2002a80:	1009883a 	mov	r4,r2
 2002a84:	201b4600 	call	201b460 <OSMboxPost>
						OSMboxPost(MailBox12, effect_x);
 2002a88:	d0a78d17 	ldw	r2,-25036(gp)
 2002a8c:	e17ff217 	ldw	r5,-56(fp)
 2002a90:	1009883a 	mov	r4,r2
 2002a94:	201b4600 	call	201b460 <OSMboxPost>
						OSMboxPost(MailBox13, effect_y);
 2002a98:	d0a78617 	ldw	r2,-25064(gp)
 2002a9c:	e17ff317 	ldw	r5,-52(fp)
 2002aa0:	1009883a 	mov	r4,r2
 2002aa4:	201b4600 	call	201b460 <OSMboxPost>

						OSMboxPost(MailBox8, &number_of_ball);                 //transmit nbr ball to task 2
 2002aa8:	d0a78e17 	ldw	r2,-25032(gp)
 2002aac:	e0fffc04 	addi	r3,fp,-16
 2002ab0:	180b883a 	mov	r5,r3
 2002ab4:	1009883a 	mov	r4,r2
 2002ab8:	201b4600 	call	201b460 <OSMboxPost>

						DEBUG_PRINT("[Task 3] Send value to the SPI\n");
 2002abc:	010080b4 	movhi	r4,514
 2002ac0:	21088e04 	addi	r4,r4,8760
 2002ac4:	20098d40 	call	20098d4 <puts>
						IOWR(MEM_NIOS_PI_BASE,4,number_of_ball);
 2002ac8:	e0fffc17 	ldw	r3,-16(fp)
 2002acc:	00800834 	movhi	r2,32
 2002ad0:	10800404 	addi	r2,r2,16
 2002ad4:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,5,(*vector_y<<10)+*vector_x);
 2002ad8:	e0bff117 	ldw	r2,-60(fp)
 2002adc:	10800017 	ldw	r2,0(r2)
 2002ae0:	100692ba 	slli	r3,r2,10
 2002ae4:	e0bff017 	ldw	r2,-64(fp)
 2002ae8:	10800017 	ldw	r2,0(r2)
 2002aec:	1887883a 	add	r3,r3,r2
 2002af0:	00800834 	movhi	r2,32
 2002af4:	10800504 	addi	r2,r2,20
 2002af8:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,6,(*effect_y<<10)+*effect_x);
 2002afc:	e0bff317 	ldw	r2,-52(fp)
 2002b00:	10800017 	ldw	r2,0(r2)
 2002b04:	100692ba 	slli	r3,r2,10
 2002b08:	e0bff217 	ldw	r2,-56(fp)
 2002b0c:	10800017 	ldw	r2,0(r2)
 2002b10:	1887883a 	add	r3,r3,r2
 2002b14:	00800834 	movhi	r2,32
 2002b18:	10800604 	addi	r2,r2,24
 2002b1c:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,3,1);             						//*isSend = 1; // value are available
 2002b20:	00c00044 	movi	r3,1
 2002b24:	00800834 	movhi	r2,32
 2002b28:	10800304 	addi	r2,r2,12
 2002b2c:	10c00035 	stwio	r3,0(r2)

						opt_task1=OS_FLAG_CLR;
 2002b30:	e03ff405 	stb	zero,-48(fp)
						OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2002b34:	d0a79317 	ldw	r2,-25012(gp)
 2002b38:	e0fff403 	ldbu	r3,-48(fp)
 2002b3c:	e13ffb04 	addi	r4,fp,-20
 2002b40:	200f883a 	mov	r7,r4
 2002b44:	180d883a 	mov	r6,r3
 2002b48:	01400044 	movi	r5,1
 2002b4c:	1009883a 	mov	r4,r2
 2002b50:	201a4e40 	call	201a4e4 <OSFlagPost>
						OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2002b54:	d0e78817 	ldw	r3,-25056(gp)
 2002b58:	e0bffb04 	addi	r2,fp,-20
 2002b5c:	d8800015 	stw	r2,0(sp)
 2002b60:	000f883a 	mov	r7,zero
 2002b64:	000d883a 	mov	r6,zero
 2002b68:	01400044 	movi	r5,1
 2002b6c:	1809883a 	mov	r4,r3
 2002b70:	2019ecc0 	call	2019ecc <OSFlagPend>

						int *nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
 2002b74:	d0a78517 	ldw	r2,-25068(gp)
 2002b78:	e0fffb04 	addi	r3,fp,-20
 2002b7c:	180d883a 	mov	r6,r3
 2002b80:	000b883a 	mov	r5,zero
 2002b84:	1009883a 	mov	r4,r2
 2002b88:	201b0c00 	call	201b0c0 <OSMboxPend>
 2002b8c:	e0bff515 	stw	r2,-44(fp)
						number_of_ball = *nbr_ball;
 2002b90:	e0bff517 	ldw	r2,-44(fp)
 2002b94:	10800017 	ldw	r2,0(r2)
 2002b98:	e0bffc15 	stw	r2,-16(fp)
						activePlayer = ID2;
 2002b9c:	00800044 	movi	r2,1
 2002ba0:	e0bfe615 	stw	r2,-104(fp)
                	IOWR(MTL_IP_BASE,12,1);
                }
                else{
                	IOWR(MTL_IP_BASE,12,0);
                }
				if(activePlayer==ID1 && !IORD(MEM_NIOS_PI_BASE,7) && !time_out){
 2002ba4:	00006606 	br	2002d40 <task3+0x690>
						int *nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
						number_of_ball = *nbr_ball;
						activePlayer = ID2;

				}
				else if(activePlayer == ID2 && IORD(MEM_NIOS_PI_BASE,7) && !time_out){
 2002ba8:	e0bfe617 	ldw	r2,-104(fp)
 2002bac:	10800058 	cmpnei	r2,r2,1
 2002bb0:	1000631e 	bne	r2,zero,2002d40 <task3+0x690>
 2002bb4:	00800834 	movhi	r2,32
 2002bb8:	10800704 	addi	r2,r2,28
 2002bbc:	10800037 	ldwio	r2,0(r2)
 2002bc0:	10005f26 	beq	r2,zero,2002d40 <task3+0x690>
 2002bc4:	e0bfec17 	ldw	r2,-80(fp)
 2002bc8:	10005d1e 	bne	r2,zero,2002d40 <task3+0x690>

						int dir = (int)(IORD(MEM_NIOS_PI_BASE,9));
 2002bcc:	00800834 	movhi	r2,32
 2002bd0:	10800904 	addi	r2,r2,36
 2002bd4:	10800037 	ldwio	r2,0(r2)
 2002bd8:	e0bff615 	stw	r2,-40(fp)
						int effect = (int)(IORD(MEM_NIOS_PI_BASE,10));
 2002bdc:	00800834 	movhi	r2,32
 2002be0:	10800a04 	addi	r2,r2,40
 2002be4:	10800037 	ldwio	r2,0(r2)
 2002be8:	e0bff715 	stw	r2,-36(fp)

						int x = dir & 0x3FF;
 2002bec:	e0bff617 	ldw	r2,-40(fp)
 2002bf0:	1080ffcc 	andi	r2,r2,1023
 2002bf4:	e0bffd15 	stw	r2,-12(fp)
						int y = (dir>>10) & 0x1FF;
 2002bf8:	e0bff617 	ldw	r2,-40(fp)
 2002bfc:	1005d2ba 	srai	r2,r2,10
 2002c00:	10807fcc 	andi	r2,r2,511
 2002c04:	e0bffe15 	stw	r2,-8(fp)

						int effect_x = effect & 0x3FF;
 2002c08:	e0bff717 	ldw	r2,-36(fp)
 2002c0c:	1080ffcc 	andi	r2,r2,1023
 2002c10:	e0bff815 	stw	r2,-32(fp)
						int effect_y = (effect>>10) & 0x1FF;
 2002c14:	e0bff717 	ldw	r2,-36(fp)
 2002c18:	1005d2ba 	srai	r2,r2,10
 2002c1c:	10807fcc 	andi	r2,r2,511
 2002c20:	e0bff915 	stw	r2,-28(fp)

						DEBUG_PRINT("[Task 3] %x - %x \t effect : (%d, %d)\n",x,y, effect_x, effect_y);
 2002c24:	e0fffd17 	ldw	r3,-12(fp)
 2002c28:	e13ffe17 	ldw	r4,-8(fp)
 2002c2c:	e0bff917 	ldw	r2,-28(fp)
 2002c30:	d8800015 	stw	r2,0(sp)
 2002c34:	e1fff817 	ldw	r7,-32(fp)
 2002c38:	200d883a 	mov	r6,r4
 2002c3c:	180b883a 	mov	r5,r3
 2002c40:	010080b4 	movhi	r4,514
 2002c44:	21089604 	addi	r4,r4,8792
 2002c48:	20097540 	call	2009754 <printf>

						OSMboxPost(MailBox4, &x);
 2002c4c:	d0a78f17 	ldw	r2,-25028(gp)
 2002c50:	e0fffd04 	addi	r3,fp,-12
 2002c54:	180b883a 	mov	r5,r3
 2002c58:	1009883a 	mov	r4,r2
 2002c5c:	201b4600 	call	201b460 <OSMboxPost>
						OSMboxPost(MailBox5, &y);
 2002c60:	d0a78917 	ldw	r2,-25052(gp)
 2002c64:	e0fffe04 	addi	r3,fp,-8
 2002c68:	180b883a 	mov	r5,r3
 2002c6c:	1009883a 	mov	r4,r2
 2002c70:	201b4600 	call	201b460 <OSMboxPost>
						OSMboxPost(MailBox8, IORD(MEM_NIOS_PI_BASE,8));
 2002c74:	d0e78e17 	ldw	r3,-25032(gp)
 2002c78:	00800834 	movhi	r2,32
 2002c7c:	10800804 	addi	r2,r2,32
 2002c80:	10800037 	ldwio	r2,0(r2)
 2002c84:	100b883a 	mov	r5,r2
 2002c88:	1809883a 	mov	r4,r3
 2002c8c:	201b4600 	call	201b460 <OSMboxPost>
						OSMboxPost(MailBox12, effect_x);
 2002c90:	d0a78d17 	ldw	r2,-25036(gp)
 2002c94:	e0fff817 	ldw	r3,-32(fp)
 2002c98:	180b883a 	mov	r5,r3
 2002c9c:	1009883a 	mov	r4,r2
 2002ca0:	201b4600 	call	201b460 <OSMboxPost>
						OSMboxPost(MailBox13, effect_y);
 2002ca4:	d0a78617 	ldw	r2,-25064(gp)
 2002ca8:	e0fff917 	ldw	r3,-28(fp)
 2002cac:	180b883a 	mov	r5,r3
 2002cb0:	1009883a 	mov	r4,r2
 2002cb4:	201b4600 	call	201b460 <OSMboxPost>


						OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2002cb8:	d0e78817 	ldw	r3,-25056(gp)
 2002cbc:	e0bffb04 	addi	r2,fp,-20
 2002cc0:	d8800015 	stw	r2,0(sp)
 2002cc4:	000f883a 	mov	r7,zero
 2002cc8:	000d883a 	mov	r6,zero
 2002ccc:	01400044 	movi	r5,1
 2002cd0:	1809883a 	mov	r4,r3
 2002cd4:	2019ecc0 	call	2019ecc <OSFlagPend>
						opt_task1=OS_FLAG_SET;
 2002cd8:	00800044 	movi	r2,1
 2002cdc:	e0bff405 	stb	r2,-48(fp)
						OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 2002ce0:	d0a79317 	ldw	r2,-25012(gp)
 2002ce4:	e0fff403 	ldbu	r3,-48(fp)
 2002ce8:	e13ffb04 	addi	r4,fp,-20
 2002cec:	200f883a 	mov	r7,r4
 2002cf0:	180d883a 	mov	r6,r3
 2002cf4:	01400044 	movi	r5,1
 2002cf8:	1009883a 	mov	r4,r2
 2002cfc:	201a4e40 	call	201a4e4 <OSFlagPost>

						IOWR(MEM_NIOS_PI_BASE,7,0);
 2002d00:	0007883a 	mov	r3,zero
 2002d04:	00800834 	movhi	r2,32
 2002d08:	10800704 	addi	r2,r2,28
 2002d0c:	10c00035 	stwio	r3,0(r2)
						activePlayer = ID1;
 2002d10:	00800084 	movi	r2,2
 2002d14:	e0bfe615 	stw	r2,-104(fp)
						int *nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
 2002d18:	d0a78517 	ldw	r2,-25068(gp)
 2002d1c:	e0fffb04 	addi	r3,fp,-20
 2002d20:	180d883a 	mov	r6,r3
 2002d24:	000b883a 	mov	r5,zero
 2002d28:	1009883a 	mov	r4,r2
 2002d2c:	201b0c00 	call	201b0c0 <OSMboxPend>
 2002d30:	e0bffa15 	stw	r2,-24(fp)
						number_of_ball = *nbr_ball;
 2002d34:	e0bffa17 	ldw	r2,-24(fp)
 2002d38:	10800017 	ldw	r2,0(r2)
 2002d3c:	e0bffc15 	stw	r2,-16(fp)
				}
				game_finish = number_of_ball == 1;
 2002d40:	e0bffc17 	ldw	r2,-16(fp)
 2002d44:	10800060 	cmpeqi	r2,r2,1
 2002d48:	10803fcc 	andi	r2,r2,255
 2002d4c:	e0bfe915 	stw	r2,-92(fp)
				if(game_finish == 1){
 2002d50:	e0bfe917 	ldw	r2,-92(fp)
 2002d54:	10800058 	cmpnei	r2,r2,1
 2002d58:	1000041e 	bne	r2,zero,2002d6c <task3+0x6bc>
					IOWR(MEM_NIOS_PI_BASE,14,1); // game finish
 2002d5c:	00c00044 	movi	r3,1
 2002d60:	00800834 	movhi	r2,32
 2002d64:	10800e04 	addi	r2,r2,56
 2002d68:	10c00035 	stwio	r3,0(r2)
				}
				IOWR(MEM_NIOS_PI_BASE,13,1); // turn finish
 2002d6c:	00c00044 	movi	r3,1
 2002d70:	00800834 	movhi	r2,32
 2002d74:	10800d04 	addi	r2,r2,52
 2002d78:	10c00035 	stwio	r3,0(r2)

				DEBUG_PRINT("[Task 3] Number of ball : %i\n",number_of_ball);
 2002d7c:	e0bffc17 	ldw	r2,-16(fp)
 2002d80:	100b883a 	mov	r5,r2
 2002d84:	010080b4 	movhi	r4,514
 2002d88:	2108a004 	addi	r4,r4,8832
 2002d8c:	20097540 	call	2009754 <printf>

			activePlayer = first_player;
			game_finish = 0;
			DEBUG_PRINT("[Task 3] the game can start\n");
			IOWR(MTL_IP_BASE,13,0);
			while(!game_finish && !time_out){
 2002d90:	e0bfe917 	ldw	r2,-92(fp)
 2002d94:	103e7a1e 	bne	r2,zero,2002780 <task3+0xd0>
 2002d98:	e0bfec17 	ldw	r2,-80(fp)
 2002d9c:	103ee426 	beq	r2,zero,2002930 <task3+0x280>
				IOWR(MEM_NIOS_PI_BASE,13,1); // turn finish

				DEBUG_PRINT("[Task 3] Number of ball : %i\n",number_of_ball);
			}

	}
 2002da0:	003e7706 	br	2002780 <task3+0xd0>

02002da4 <task4>:

}

void task4(void* pdata)
{
 2002da4:	defff704 	addi	sp,sp,-36
 2002da8:	dfc00815 	stw	ra,32(sp)
 2002dac:	df000715 	stw	fp,28(sp)
 2002db0:	df000704 	addi	fp,sp,28
 2002db4:	e13fff15 	stw	r4,-4(fp)

	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 2002db8:	008000b4 	movhi	r2,2
 2002dbc:	e0bffc15 	stw	r2,-16(fp)

	int count = 0;
 2002dc0:	e03ffa15 	stw	zero,-24(fp)
	int count_old = 0;
 2002dc4:	e03ffd15 	stw	zero,-12(fp)

    int gesture_detected = 0;
 2002dc8:	e03ffb15 	stw	zero,-20(fp)

	INT8U err;
	//INT8U opt_task4;

	while(1){
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 2002dcc:	d0e78a17 	ldw	r3,-25048(gp)
 2002dd0:	e0bffe04 	addi	r2,fp,-8
 2002dd4:	d8800015 	stw	r2,0(sp)
 2002dd8:	000f883a 	mov	r7,zero
 2002ddc:	01802084 	movi	r6,130
 2002de0:	01400044 	movi	r5,1
 2002de4:	1809883a 	mov	r4,r3
 2002de8:	2019ecc0 	call	2019ecc <OSFlagPend>
        while(!gesture_detected){
 2002dec:	00001006 	br	2002e30 <task4+0x8c>
        count_old = count;
 2002df0:	e0bffa17 	ldw	r2,-24(fp)
 2002df4:	e0bffd15 	stw	r2,-12(fp)
        count = IORD(MTL_controller,10); // récupère le nombre de doigts présent sur l'écran
 2002df8:	e0bffc17 	ldw	r2,-16(fp)
 2002dfc:	10800a04 	addi	r2,r2,40
 2002e00:	10800037 	ldwio	r2,0(r2)
 2002e04:	e0bffa15 	stw	r2,-24(fp)
		    if (count == 1 && count_old == 0){
 2002e08:	e0bffa17 	ldw	r2,-24(fp)
 2002e0c:	10800058 	cmpnei	r2,r2,1
 2002e10:	1000071e 	bne	r2,zero,2002e30 <task4+0x8c>
 2002e14:	e0bffd17 	ldw	r2,-12(fp)
 2002e18:	1000051e 	bne	r2,zero,2002e30 <task4+0x8c>
                DEBUG_PRINT("[Task 4] Player touch the screen\n");
 2002e1c:	010080b4 	movhi	r4,514
 2002e20:	2108a804 	addi	r4,r4,8864
 2002e24:	20098d40 	call	20098d4 <puts>
    			gesture_detected = 1;
 2002e28:	00800044 	movi	r2,1
 2002e2c:	e0bffb15 	stw	r2,-20(fp)
	INT8U err;
	//INT8U opt_task4;

	while(1){
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
        while(!gesture_detected){
 2002e30:	e0bffb17 	ldw	r2,-20(fp)
 2002e34:	103fee26 	beq	r2,zero,2002df0 <task4+0x4c>
		    if (count == 1 && count_old == 0){
                DEBUG_PRINT("[Task 4] Player touch the screen\n");
    			gesture_detected = 1;
            }
		}
        gesture_detected = 0;
 2002e38:	e03ffb15 	stw	zero,-20(fp)
        OSFlagPost(StartGameGrp,START_THE_GAME,OS_FLAG_SET,&err);
 2002e3c:	d0a79417 	ldw	r2,-25008(gp)
 2002e40:	e0fffe04 	addi	r3,fp,-8
 2002e44:	180f883a 	mov	r7,r3
 2002e48:	01800044 	movi	r6,1
 2002e4c:	01400044 	movi	r5,1
 2002e50:	1009883a 	mov	r4,r2
 2002e54:	201a4e40 	call	201a4e4 <OSFlagPost>
        OSTimeDlyHMSM(0, 0, 0, 500);
 2002e58:	01c07d04 	movi	r7,500
 2002e5c:	000d883a 	mov	r6,zero
 2002e60:	000b883a 	mov	r5,zero
 2002e64:	0009883a 	mov	r4,zero
 2002e68:	201f3040 	call	201f304 <OSTimeDlyHMSM>
	}
 2002e6c:	003fd706 	br	2002dcc <task4+0x28>

02002e70 <main>:
}


/* The main function creates two task and starts multi-tasking */
int main(void)
{
 2002e70:	defff804 	addi	sp,sp,-32
 2002e74:	dfc00715 	stw	ra,28(sp)
 2002e78:	df000615 	stw	fp,24(sp)
 2002e7c:	df000604 	addi	fp,sp,24
	INT8U err;

  MailBox1 = OSMboxCreate(NULL);
 2002e80:	0009883a 	mov	r4,zero
 2002e84:	201adac0 	call	201adac <OSMboxCreate>
 2002e88:	d0a79215 	stw	r2,-25016(gp)
  MailBox2 = OSMboxCreate(NULL);
 2002e8c:	0009883a 	mov	r4,zero
 2002e90:	201adac0 	call	201adac <OSMboxCreate>
 2002e94:	d0a78c15 	stw	r2,-25040(gp)
  MailBox3 = OSMboxCreate(NULL);
 2002e98:	0009883a 	mov	r4,zero
 2002e9c:	201adac0 	call	201adac <OSMboxCreate>
 2002ea0:	d0a78715 	stw	r2,-25060(gp)

  MailBox4 = OSMboxCreate(NULL);
 2002ea4:	0009883a 	mov	r4,zero
 2002ea8:	201adac0 	call	201adac <OSMboxCreate>
 2002eac:	d0a78f15 	stw	r2,-25028(gp)
  MailBox5 = OSMboxCreate(NULL);
 2002eb0:	0009883a 	mov	r4,zero
 2002eb4:	201adac0 	call	201adac <OSMboxCreate>
 2002eb8:	d0a78915 	stw	r2,-25052(gp)
  MailBox6 = OSMboxCreate(NULL);
 2002ebc:	0009883a 	mov	r4,zero
 2002ec0:	201adac0 	call	201adac <OSMboxCreate>
 2002ec4:	d0a78515 	stw	r2,-25068(gp)


  MailBox7 = OSMboxCreate(NULL);
 2002ec8:	0009883a 	mov	r4,zero
 2002ecc:	201adac0 	call	201adac <OSMboxCreate>
 2002ed0:	d0a79015 	stw	r2,-25024(gp)
  MailBox8 = OSMboxCreate(NULL);
 2002ed4:	0009883a 	mov	r4,zero
 2002ed8:	201adac0 	call	201adac <OSMboxCreate>
 2002edc:	d0a78e15 	stw	r2,-25032(gp)
  MailBox9 = OSMboxCreate(NULL);
 2002ee0:	0009883a 	mov	r4,zero
 2002ee4:	201adac0 	call	201adac <OSMboxCreate>
 2002ee8:	d0a78415 	stw	r2,-25072(gp)

  MailBox10 = OSMboxCreate(NULL);
 2002eec:	0009883a 	mov	r4,zero
 2002ef0:	201adac0 	call	201adac <OSMboxCreate>
 2002ef4:	d0a78b15 	stw	r2,-25044(gp)
  MailBox11 = OSMboxCreate(NULL);
 2002ef8:	0009883a 	mov	r4,zero
 2002efc:	201adac0 	call	201adac <OSMboxCreate>
 2002f00:	d0a79115 	stw	r2,-25020(gp)
  MailBox12 = OSMboxCreate(NULL);
 2002f04:	0009883a 	mov	r4,zero
 2002f08:	201adac0 	call	201adac <OSMboxCreate>
 2002f0c:	d0a78d15 	stw	r2,-25036(gp)
  MailBox13 = OSMboxCreate(NULL);
 2002f10:	0009883a 	mov	r4,zero
 2002f14:	201adac0 	call	201adac <OSMboxCreate>
 2002f18:	d0a78615 	stw	r2,-25064(gp)

  isActiveFlagGrp = OSFlagCreate(0, &err);
 2002f1c:	e17fff04 	addi	r5,fp,-4
 2002f20:	0009883a 	mov	r4,zero
 2002f24:	20199080 	call	2019908 <OSFlagCreate>
 2002f28:	d0a79315 	stw	r2,-25012(gp)
  AnimationFlagGrp = OSFlagCreate(0, &err);
 2002f2c:	e17fff04 	addi	r5,fp,-4
 2002f30:	0009883a 	mov	r4,zero
 2002f34:	20199080 	call	2019908 <OSFlagCreate>
 2002f38:	d0a78815 	stw	r2,-25056(gp)
  ActivateTask4Grp = OSFlagCreate(0,&err);
 2002f3c:	e17fff04 	addi	r5,fp,-4
 2002f40:	0009883a 	mov	r4,zero
 2002f44:	20199080 	call	2019908 <OSFlagCreate>
 2002f48:	d0a78a15 	stw	r2,-25048(gp)
  StartGameGrp = OSFlagCreate(0,&err);
 2002f4c:	e17fff04 	addi	r5,fp,-4
 2002f50:	0009883a 	mov	r4,zero
 2002f54:	20199080 	call	2019908 <OSFlagCreate>
 2002f58:	d0a79415 	stw	r2,-25008(gp)

  accel_spi = alt_up_accelerometer_spi_open_dev(accel_name);
 2002f5c:	d0a00017 	ldw	r2,-32768(gp)
 2002f60:	1009883a 	mov	r4,r2
 2002f64:	20205d40 	call	20205d4 <alt_up_accelerometer_spi_open_dev>
 2002f68:	d0a78315 	stw	r2,-25076(gp)
  	if(accel_spi == NULL){
 2002f6c:	d0a78317 	ldw	r2,-25076(gp)
 2002f70:	1000031e 	bne	r2,zero,2002f80 <main+0x110>
  		printf("Accelerometer device not found.\n");
 2002f74:	010080b4 	movhi	r4,514
 2002f78:	2108b104 	addi	r4,r4,8900
 2002f7c:	20098d40 	call	20098d4 <puts>
  	}




  OSTaskCreateExt(task1,
 2002f80:	d8000415 	stw	zero,16(sp)
 2002f84:	d8000315 	stw	zero,12(sp)
 2002f88:	00820004 	movi	r2,2048
 2002f8c:	d8800215 	stw	r2,8(sp)
 2002f90:	008080b4 	movhi	r2,514
 2002f94:	10997c04 	addi	r2,r2,26096
 2002f98:	d8800115 	stw	r2,4(sp)
 2002f9c:	00800044 	movi	r2,1
 2002fa0:	d8800015 	stw	r2,0(sp)
 2002fa4:	01c00044 	movi	r7,1
 2002fa8:	018080f4 	movhi	r6,515
 2002fac:	31a17b04 	addi	r6,r6,-31252
 2002fb0:	000b883a 	mov	r5,zero
 2002fb4:	01008034 	movhi	r4,512
 2002fb8:	2100a504 	addi	r4,r4,660
 2002fbc:	201e1300 	call	201e130 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
 2002fc0:	d8000415 	stw	zero,16(sp)
 2002fc4:	d8000315 	stw	zero,12(sp)
 2002fc8:	00820004 	movi	r2,2048
 2002fcc:	d8800215 	stw	r2,8(sp)
 2002fd0:	008080f4 	movhi	r2,515
 2002fd4:	10a97c04 	addi	r2,r2,-23056
 2002fd8:	d8800115 	stw	r2,4(sp)
 2002fdc:	00800084 	movi	r2,2
 2002fe0:	d8800015 	stw	r2,0(sp)
 2002fe4:	01c00084 	movi	r7,2
 2002fe8:	018080f4 	movhi	r6,515
 2002fec:	31b17b04 	addi	r6,r6,-14868
 2002ff0:	000b883a 	mov	r5,zero
 2002ff4:	01008034 	movhi	r4,512
 2002ff8:	21018d04 	addi	r4,r4,1588
 2002ffc:	201e1300 	call	201e130 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 2003000:	d8000415 	stw	zero,16(sp)
 2003004:	d8000315 	stw	zero,12(sp)
 2003008:	00820004 	movi	r2,2048
 200300c:	d8800215 	stw	r2,8(sp)
 2003010:	008080f4 	movhi	r2,515
 2003014:	10b17c04 	addi	r2,r2,-14864
 2003018:	d8800115 	stw	r2,4(sp)
 200301c:	008000c4 	movi	r2,3
 2003020:	d8800015 	stw	r2,0(sp)
 2003024:	01c000c4 	movi	r7,3
 2003028:	018080f4 	movhi	r6,515
 200302c:	31b97b04 	addi	r6,r6,-6676
 2003030:	000b883a 	mov	r5,zero
 2003034:	01008034 	movhi	r4,512
 2003038:	2109ac04 	addi	r4,r4,9904
 200303c:	201e1300 	call	201e130 <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSTaskCreateExt(task4,
 2003040:	d8000415 	stw	zero,16(sp)
 2003044:	d8000315 	stw	zero,12(sp)
 2003048:	00820004 	movi	r2,2048
 200304c:	d8800215 	stw	r2,8(sp)
 2003050:	008080f4 	movhi	r2,515
 2003054:	10a17c04 	addi	r2,r2,-31248
 2003058:	d8800115 	stw	r2,4(sp)
 200305c:	00800104 	movi	r2,4
 2003060:	d8800015 	stw	r2,0(sp)
 2003064:	01c00104 	movi	r7,4
 2003068:	018080f4 	movhi	r6,515
 200306c:	31a97b04 	addi	r6,r6,-23060
 2003070:	000b883a 	mov	r5,zero
 2003074:	01008034 	movhi	r4,512
 2003078:	210b6904 	addi	r4,r4,11684
 200307c:	201e1300 	call	201e130 <OSTaskCreateExt>
                     TASK_STACKSIZE,
                     NULL,
                     0);


  OSStart();
 2003080:	2017fd00 	call	2017fd0 <OSStart>
  return 0;
 2003084:	0005883a 	mov	r2,zero
}
 2003088:	e037883a 	mov	sp,fp
 200308c:	dfc00117 	ldw	ra,4(sp)
 2003090:	df000017 	ldw	fp,0(sp)
 2003094:	dec00204 	addi	sp,sp,8
 2003098:	f800283a 	ret

0200309c <whole_collide>:
#include "physics.h"
#include <stdio.h>

int whole_list [6][2]={{86,63},{446,63},{806,63},{86,463},{446,463},{806,463}};

int whole_collide(float ball [2], float velocity [2]){
 200309c:	defff604 	addi	sp,sp,-40
 20030a0:	dfc00915 	stw	ra,36(sp)
 20030a4:	df000815 	stw	fp,32(sp)
 20030a8:	df000804 	addi	fp,sp,32
 20030ac:	e13ffe15 	stw	r4,-8(fp)
 20030b0:	e17fff15 	stw	r5,-4(fp)
	float x = ball[0]+velocity[0];
 20030b4:	e0bffe17 	ldw	r2,-8(fp)
 20030b8:	10c00017 	ldw	r3,0(r2)
 20030bc:	e13fff17 	ldw	r4,-4(fp)
 20030c0:	20800017 	ldw	r2,0(r4)
 20030c4:	1885ff72 	custom	253,r2,r3,r2
 20030c8:	e0bffa15 	stw	r2,-24(fp)
	float y = ball[1]+velocity[1];
 20030cc:	e0bffe17 	ldw	r2,-8(fp)
 20030d0:	10800104 	addi	r2,r2,4
 20030d4:	10c00017 	ldw	r3,0(r2)
 20030d8:	e0bfff17 	ldw	r2,-4(fp)
 20030dc:	11000104 	addi	r4,r2,4
 20030e0:	20800017 	ldw	r2,0(r4)
 20030e4:	1885ff72 	custom	253,r2,r3,r2
 20030e8:	e0bffb15 	stw	r2,-20(fp)

	int collision = 0;
 20030ec:	e03ff815 	stw	zero,-32(fp)
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 20030f0:	e03ff915 	stw	zero,-28(fp)
 20030f4:	00003d06 	br	20031ec <whole_collide+0x150>
		float dx = whole_list[cnt][0]-x;
 20030f8:	008080b4 	movhi	r2,514
 20030fc:	108aed04 	addi	r2,r2,11188
 2003100:	e0fff917 	ldw	r3,-28(fp)
 2003104:	180690fa 	slli	r3,r3,3
 2003108:	10c5883a 	add	r2,r2,r3
 200310c:	10800017 	ldw	r2,0(r2)
 2003110:	1007feb2 	custom	250,r3,r2,zero
 2003114:	e0bffa17 	ldw	r2,-24(fp)
 2003118:	1885ffb2 	custom	254,r2,r3,r2
 200311c:	e0bffc15 	stw	r2,-16(fp)
		float dy = whole_list[cnt][1]-y;
 2003120:	008080b4 	movhi	r2,514
 2003124:	108aed04 	addi	r2,r2,11188
 2003128:	e0fff917 	ldw	r3,-28(fp)
 200312c:	180690fa 	slli	r3,r3,3
 2003130:	10c5883a 	add	r2,r2,r3
 2003134:	10800104 	addi	r2,r2,4
 2003138:	10800017 	ldw	r2,0(r2)
 200313c:	1007feb2 	custom	250,r3,r2,zero
 2003140:	e0bffb17 	ldw	r2,-20(fp)
 2003144:	1885ffb2 	custom	254,r2,r3,r2
 2003148:	e0bffd15 	stw	r2,-12(fp)

		collision = collision || (dx*dx+dy*dy <= ((SIZE+WHOLE_SIZE)*(SIZE+WHOLE_SIZE)*0.85));
 200314c:	e0bff817 	ldw	r2,-32(fp)
 2003150:	1000131e 	bne	r2,zero,20031a0 <whole_collide+0x104>
 2003154:	e0fffc17 	ldw	r3,-16(fp)
 2003158:	e0bffc17 	ldw	r2,-16(fp)
 200315c:	1887ff32 	custom	252,r3,r3,r2
 2003160:	e13ffd17 	ldw	r4,-12(fp)
 2003164:	e0bffd17 	ldw	r2,-12(fp)
 2003168:	2085ff32 	custom	252,r2,r4,r2
 200316c:	1885ff72 	custom	253,r2,r3,r2
 2003170:	1009883a 	mov	r4,r2
 2003174:	20090680 	call	2009068 <__extendsfdf2>
 2003178:	1011883a 	mov	r8,r2
 200317c:	1813883a 	mov	r9,r3
 2003180:	01b33374 	movhi	r6,52429
 2003184:	31b33344 	addi	r6,r6,-13107
 2003188:	01d021b4 	movhi	r7,16518
 200318c:	39d5b304 	addi	r7,r7,22220
 2003190:	4009883a 	mov	r4,r8
 2003194:	480b883a 	mov	r5,r9
 2003198:	2007f600 	call	2007f60 <__ledf2>
 200319c:	00800216 	blt	zero,r2,20031a8 <whole_collide+0x10c>
 20031a0:	00800044 	movi	r2,1
 20031a4:	00000106 	br	20031ac <whole_collide+0x110>
 20031a8:	0005883a 	mov	r2,zero
 20031ac:	e0bff815 	stw	r2,-32(fp)

		if (collision){
 20031b0:	e0bff817 	ldw	r2,-32(fp)
 20031b4:	10000a26 	beq	r2,zero,20031e0 <whole_collide+0x144>
			ball[0]=0;
 20031b8:	e0bffe17 	ldw	r2,-8(fp)
 20031bc:	10000015 	stw	zero,0(r2)
			ball[1]=0;
 20031c0:	e0bffe17 	ldw	r2,-8(fp)
 20031c4:	10800104 	addi	r2,r2,4
 20031c8:	10000015 	stw	zero,0(r2)
			velocity[0]=0;
 20031cc:	e0bfff17 	ldw	r2,-4(fp)
 20031d0:	10000015 	stw	zero,0(r2)
			velocity[1]=0;
 20031d4:	e0bfff17 	ldw	r2,-4(fp)
 20031d8:	10800104 	addi	r2,r2,4
 20031dc:	10000015 	stw	zero,0(r2)
	float y = ball[1]+velocity[1];

	int collision = 0;
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 20031e0:	e0bff917 	ldw	r2,-28(fp)
 20031e4:	10800044 	addi	r2,r2,1
 20031e8:	e0bff915 	stw	r2,-28(fp)
 20031ec:	e0bff917 	ldw	r2,-28(fp)
 20031f0:	10800190 	cmplti	r2,r2,6
 20031f4:	103fc01e 	bne	r2,zero,20030f8 <whole_collide+0x5c>
			ball[1]=0;
			velocity[0]=0;
			velocity[1]=0;
		}
	}
	return collision;
 20031f8:	e0bff817 	ldw	r2,-32(fp)
}
 20031fc:	e037883a 	mov	sp,fp
 2003200:	dfc00117 	ldw	ra,4(sp)
 2003204:	df000017 	ldw	fp,0(sp)
 2003208:	dec00204 	addi	sp,sp,8
 200320c:	f800283a 	ret

02003210 <borderCollide>:


void borderCollide(float* ball, int* border_collision, float* velocity)
{
 2003210:	defffa04 	addi	sp,sp,-24
 2003214:	df000515 	stw	fp,20(sp)
 2003218:	df000504 	addi	fp,sp,20
 200321c:	e13ffd15 	stw	r4,-12(fp)
 2003220:	e17ffe15 	stw	r5,-8(fp)
 2003224:	e1bfff15 	stw	r6,-4(fp)
	int collide_x = 0;
 2003228:	e03ffb15 	stw	zero,-20(fp)
	int collide_y = 0;
 200322c:	e03ffc15 	stw	zero,-16(fp)
	collide_x = (ball[0] < BORDER_X + BORDER + SIZE || ball[0] > (MAX_X + BORDER_X)-(BORDER + SIZE));
 2003230:	e0bffd17 	ldw	r2,-12(fp)
 2003234:	10c00017 	ldw	r3,0(r2)
 2003238:	0090b1b4 	movhi	r2,17094
 200323c:	1885f9f2 	custom	231,r2,r3,r2
 2003240:	1000061e 	bne	r2,zero,200325c <borderCollide+0x4c>
 2003244:	e0bffd17 	ldw	r2,-12(fp)
 2003248:	10c00017 	ldw	r3,0(r2)
 200324c:	009111b4 	movhi	r2,17478
 2003250:	10900004 	addi	r2,r2,16384
 2003254:	1885f972 	custom	229,r2,r3,r2
 2003258:	10000226 	beq	r2,zero,2003264 <borderCollide+0x54>
 200325c:	00800044 	movi	r2,1
 2003260:	00000106 	br	2003268 <borderCollide+0x58>
 2003264:	0005883a 	mov	r2,zero
 2003268:	e0bffb15 	stw	r2,-20(fp)
	collide_y = (ball[1] < BORDER_Y + BORDER + SIZE || ball[1] > (MAX_Y + BORDER_Y)-(BORDER + SIZE));
 200326c:	e0bffd17 	ldw	r2,-12(fp)
 2003270:	10800104 	addi	r2,r2,4
 2003274:	10c00017 	ldw	r3,0(r2)
 2003278:	0090a634 	movhi	r2,17048
 200327c:	1885f9f2 	custom	231,r2,r3,r2
 2003280:	1000061e 	bne	r2,zero,200329c <borderCollide+0x8c>
 2003284:	e0bffd17 	ldw	r2,-12(fp)
 2003288:	10800104 	addi	r2,r2,4
 200328c:	10c00017 	ldw	r3,0(r2)
 2003290:	0090f874 	movhi	r2,17377
 2003294:	1885f972 	custom	229,r2,r3,r2
 2003298:	10000226 	beq	r2,zero,20032a4 <borderCollide+0x94>
 200329c:	00800044 	movi	r2,1
 20032a0:	00000106 	br	20032a8 <borderCollide+0x98>
 20032a4:	0005883a 	mov	r2,zero
 20032a8:	e0bffc15 	stw	r2,-16(fp)
	if(!border_collision[0] && collide_x)
 20032ac:	e0bffe17 	ldw	r2,-8(fp)
 20032b0:	10800017 	ldw	r2,0(r2)
 20032b4:	1000081e 	bne	r2,zero,20032d8 <borderCollide+0xc8>
 20032b8:	e0bffb17 	ldw	r2,-20(fp)
 20032bc:	10000626 	beq	r2,zero,20032d8 <borderCollide+0xc8>
	{
		velocity[0] = 0 - velocity[0];
 20032c0:	e0ffff17 	ldw	r3,-4(fp)
 20032c4:	18800017 	ldw	r2,0(r3)
 20032c8:	0007883a 	mov	r3,zero
 20032cc:	1887ffb2 	custom	254,r3,r3,r2
 20032d0:	e0bfff17 	ldw	r2,-4(fp)
 20032d4:	10c00015 	stw	r3,0(r2)
	}
	if(!border_collision[2] && collide_y)
 20032d8:	e0bffe17 	ldw	r2,-8(fp)
 20032dc:	10800204 	addi	r2,r2,8
 20032e0:	10800017 	ldw	r2,0(r2)
 20032e4:	10000a1e 	bne	r2,zero,2003310 <borderCollide+0x100>
 20032e8:	e0bffc17 	ldw	r2,-16(fp)
 20032ec:	10000826 	beq	r2,zero,2003310 <borderCollide+0x100>
	{
		velocity[1] = 0 - velocity[1];
 20032f0:	e0bfff17 	ldw	r2,-4(fp)
 20032f4:	10800104 	addi	r2,r2,4
 20032f8:	e0ffff17 	ldw	r3,-4(fp)
 20032fc:	19000104 	addi	r4,r3,4
 2003300:	20c00017 	ldw	r3,0(r4)
 2003304:	0009883a 	mov	r4,zero
 2003308:	20c7ffb2 	custom	254,r3,r4,r3
 200330c:	10c00015 	stw	r3,0(r2)
	}

	border_collision[0] = border_collision[1];
 2003310:	e0bffe17 	ldw	r2,-8(fp)
 2003314:	10c00117 	ldw	r3,4(r2)
 2003318:	e0bffe17 	ldw	r2,-8(fp)
 200331c:	10c00015 	stw	r3,0(r2)
	border_collision[1] = collide_x;
 2003320:	e0bffe17 	ldw	r2,-8(fp)
 2003324:	10800104 	addi	r2,r2,4
 2003328:	e0fffb17 	ldw	r3,-20(fp)
 200332c:	10c00015 	stw	r3,0(r2)
	border_collision[2] = border_collision[3];
 2003330:	e0bffe17 	ldw	r2,-8(fp)
 2003334:	10800204 	addi	r2,r2,8
 2003338:	e0fffe17 	ldw	r3,-8(fp)
 200333c:	18c00317 	ldw	r3,12(r3)
 2003340:	10c00015 	stw	r3,0(r2)
	border_collision[3] = collide_y;
 2003344:	e0bffe17 	ldw	r2,-8(fp)
 2003348:	10800304 	addi	r2,r2,12
 200334c:	e0fffc17 	ldw	r3,-16(fp)
 2003350:	10c00015 	stw	r3,0(r2)
}
 2003354:	0001883a 	nop
 2003358:	e037883a 	mov	sp,fp
 200335c:	df000017 	ldw	fp,0(sp)
 2003360:	dec00104 	addi	sp,sp,4
 2003364:	f800283a 	ret

02003368 <momentum>:

float momentum (float* velocity){
 2003368:	defffd04 	addi	sp,sp,-12
 200336c:	df000215 	stw	fp,8(sp)
 2003370:	df000204 	addi	fp,sp,8
 2003374:	e13fff15 	stw	r4,-4(fp)
	float result=velocity[0]*velocity[0]+velocity[1]*velocity[1];
 2003378:	e0bfff17 	ldw	r2,-4(fp)
 200337c:	10c00017 	ldw	r3,0(r2)
 2003380:	e13fff17 	ldw	r4,-4(fp)
 2003384:	20800017 	ldw	r2,0(r4)
 2003388:	1887ff32 	custom	252,r3,r3,r2
 200338c:	e0bfff17 	ldw	r2,-4(fp)
 2003390:	10800104 	addi	r2,r2,4
 2003394:	11000017 	ldw	r4,0(r2)
 2003398:	e0bfff17 	ldw	r2,-4(fp)
 200339c:	11400104 	addi	r5,r2,4
 20033a0:	28800017 	ldw	r2,0(r5)
 20033a4:	2085ff32 	custom	252,r2,r4,r2
 20033a8:	1885ff72 	custom	253,r2,r3,r2
 20033ac:	e0bffe15 	stw	r2,-8(fp)
	return result;
 20033b0:	e0bffe17 	ldw	r2,-8(fp)
 20033b4:	1007883a 	mov	r3,r2
}
 20033b8:	1805883a 	mov	r2,r3
 20033bc:	e037883a 	mov	sp,fp
 20033c0:	df000017 	ldw	fp,0(sp)
 20033c4:	dec00104 	addi	sp,sp,4
 20033c8:	f800283a 	ret

020033cc <detect_collide>:

void detect_collide(float* ball1, float* ball2, int* collision){
 20033cc:	defff604 	addi	sp,sp,-40
 20033d0:	df000915 	stw	fp,36(sp)
 20033d4:	df000904 	addi	fp,sp,36
 20033d8:	e13ffd15 	stw	r4,-12(fp)
 20033dc:	e17ffe15 	stw	r5,-8(fp)
 20033e0:	e1bfff15 	stw	r6,-4(fp)
	collision[0]=collision[1];
 20033e4:	e0bfff17 	ldw	r2,-4(fp)
 20033e8:	10c00117 	ldw	r3,4(r2)
 20033ec:	e0bfff17 	ldw	r2,-4(fp)
 20033f0:	10c00015 	stw	r3,0(r2)

	float x1,y1,x2,y2,dx,dy;
	x1=ball1[0];
 20033f4:	e0bffd17 	ldw	r2,-12(fp)
 20033f8:	10800017 	ldw	r2,0(r2)
 20033fc:	e0bff715 	stw	r2,-36(fp)
	x2=ball2[0];
 2003400:	e0bffe17 	ldw	r2,-8(fp)
 2003404:	10800017 	ldw	r2,0(r2)
 2003408:	e0bff815 	stw	r2,-32(fp)

	y1=ball1[1];
 200340c:	e0bffd17 	ldw	r2,-12(fp)
 2003410:	10800117 	ldw	r2,4(r2)
 2003414:	e0bff915 	stw	r2,-28(fp)
	y2=ball2[1];
 2003418:	e0bffe17 	ldw	r2,-8(fp)
 200341c:	10800117 	ldw	r2,4(r2)
 2003420:	e0bffa15 	stw	r2,-24(fp)

	dx=x2-x1;
 2003424:	e0fff817 	ldw	r3,-32(fp)
 2003428:	e0bff717 	ldw	r2,-36(fp)
 200342c:	1885ffb2 	custom	254,r2,r3,r2
 2003430:	e0bffb15 	stw	r2,-20(fp)
	dy=y2-y1;
 2003434:	e0fffa17 	ldw	r3,-24(fp)
 2003438:	e0bff917 	ldw	r2,-28(fp)
 200343c:	1885ffb2 	custom	254,r2,r3,r2
 2003440:	e0bffc15 	stw	r2,-16(fp)
	collision[1]=dx*dx + dy*dy <= 4*SIZE*SIZE;
 2003444:	e0bfff17 	ldw	r2,-4(fp)
 2003448:	10800104 	addi	r2,r2,4
 200344c:	e13ffb17 	ldw	r4,-20(fp)
 2003450:	e0fffb17 	ldw	r3,-20(fp)
 2003454:	20c9ff32 	custom	252,r4,r4,r3
 2003458:	e17ffc17 	ldw	r5,-16(fp)
 200345c:	e0fffc17 	ldw	r3,-16(fp)
 2003460:	28c7ff32 	custom	252,r3,r5,r3
 2003464:	20c9ff72 	custom	253,r4,r4,r3
 2003468:	00d10a74 	movhi	r3,17449
 200346c:	20c7f9b2 	custom	230,r3,r4,r3
 2003470:	18c03fcc 	andi	r3,r3,255
 2003474:	10c00015 	stw	r3,0(r2)
}
 2003478:	0001883a 	nop
 200347c:	e037883a 	mov	sp,fp
 2003480:	df000017 	ldw	fp,0(sp)
 2003484:	dec00104 	addi	sp,sp,4
 2003488:	f800283a 	ret

0200348c <collide_calc>:


void collide_calc(float* ball1, float* ball2,float* velocity1, float* velocity2, int* collision,int id){
 200348c:	deffeb04 	addi	sp,sp,-84
 2003490:	dfc01415 	stw	ra,80(sp)
 2003494:	df001315 	stw	fp,76(sp)
 2003498:	dc401215 	stw	r17,72(sp)
 200349c:	dc001115 	stw	r16,68(sp)
 20034a0:	df001304 	addi	fp,sp,76
 20034a4:	e13ffa15 	stw	r4,-24(fp)
 20034a8:	e17ffb15 	stw	r5,-20(fp)
 20034ac:	e1bffc15 	stw	r6,-16(fp)
 20034b0:	e1fffd15 	stw	r7,-12(fp)
	if ((!collision[0] && collision[1]) || (collision[0] && collision[1] && ball1[0]!=0 && ball1[1] && ball2[0] && ball2[1])){
 20034b4:	e0800217 	ldw	r2,8(fp)
 20034b8:	10800017 	ldw	r2,0(r2)
 20034bc:	1000041e 	bne	r2,zero,20034d0 <collide_calc+0x44>
 20034c0:	e0800217 	ldw	r2,8(fp)
 20034c4:	10800104 	addi	r2,r2,4
 20034c8:	10800017 	ldw	r2,0(r2)
 20034cc:	10001d1e 	bne	r2,zero,2003544 <collide_calc+0xb8>
 20034d0:	e0800217 	ldw	r2,8(fp)
 20034d4:	10800017 	ldw	r2,0(r2)
 20034d8:	1000c626 	beq	r2,zero,20037f4 <collide_calc+0x368>
 20034dc:	e0800217 	ldw	r2,8(fp)
 20034e0:	10800104 	addi	r2,r2,4
 20034e4:	10800017 	ldw	r2,0(r2)
 20034e8:	1000c226 	beq	r2,zero,20037f4 <collide_calc+0x368>
 20034ec:	e0fffa17 	ldw	r3,-24(fp)
 20034f0:	18800017 	ldw	r2,0(r3)
 20034f4:	0007883a 	mov	r3,zero
 20034f8:	10c5f8f2 	custom	227,r2,r2,r3
 20034fc:	1000bd1e 	bne	r2,zero,20037f4 <collide_calc+0x368>
 2003500:	e0bffa17 	ldw	r2,-24(fp)
 2003504:	10c00104 	addi	r3,r2,4
 2003508:	18800017 	ldw	r2,0(r3)
 200350c:	0007883a 	mov	r3,zero
 2003510:	10c5f8f2 	custom	227,r2,r2,r3
 2003514:	1000b71e 	bne	r2,zero,20037f4 <collide_calc+0x368>
 2003518:	e0fffb17 	ldw	r3,-20(fp)
 200351c:	18800017 	ldw	r2,0(r3)
 2003520:	0007883a 	mov	r3,zero
 2003524:	10c5f8f2 	custom	227,r2,r2,r3
 2003528:	1000b21e 	bne	r2,zero,20037f4 <collide_calc+0x368>
 200352c:	e0bffb17 	ldw	r2,-20(fp)
 2003530:	10c00104 	addi	r3,r2,4
 2003534:	18800017 	ldw	r2,0(r3)
 2003538:	0007883a 	mov	r3,zero
 200353c:	10c5f8f2 	custom	227,r2,r2,r3
 2003540:	1000ac1e 	bne	r2,zero,20037f4 <collide_calc+0x368>
		int sign;
		float v21 [2];
		float a;
		float dv;

		x1=ball1[0];
 2003544:	e0bffa17 	ldw	r2,-24(fp)
 2003548:	10800017 	ldw	r2,0(r2)
 200354c:	e0bfef15 	stw	r2,-68(fp)
		x2=ball2[0];
 2003550:	e0bffb17 	ldw	r2,-20(fp)
 2003554:	10800017 	ldw	r2,0(r2)
 2003558:	e0bff015 	stw	r2,-64(fp)
		y1=ball1[1];
 200355c:	e0bffa17 	ldw	r2,-24(fp)
 2003560:	10800117 	ldw	r2,4(r2)
 2003564:	e0bff115 	stw	r2,-60(fp)
		y2=ball2[1];
 2003568:	e0bffb17 	ldw	r2,-20(fp)
 200356c:	10800117 	ldw	r2,4(r2)
 2003570:	e0bff215 	stw	r2,-56(fp)

		//m1=1.0;
		//m2=1.0;
		m21 = 1.0; // m1 = 1.0 / m2 = 1.0
 2003574:	008fe034 	movhi	r2,16256
 2003578:	e0bff315 	stw	r2,-52(fp)
		x21 = x2-x1;
 200357c:	e0fff017 	ldw	r3,-64(fp)
 2003580:	e0bfef17 	ldw	r2,-68(fp)
 2003584:	1885ffb2 	custom	254,r2,r3,r2
 2003588:	e0bfed15 	stw	r2,-76(fp)
		y21 = y2-y1;
 200358c:	e0fff217 	ldw	r3,-56(fp)
 2003590:	e0bff117 	ldw	r2,-60(fp)
 2003594:	1885ffb2 	custom	254,r2,r3,r2
 2003598:	e0bff415 	stw	r2,-48(fp)
		v21[0]=velocity2[0]-velocity1[0];
 200359c:	e0bffd17 	ldw	r2,-12(fp)
 20035a0:	10c00017 	ldw	r3,0(r2)
 20035a4:	e13ffc17 	ldw	r4,-16(fp)
 20035a8:	20800017 	ldw	r2,0(r4)
 20035ac:	1885ffb2 	custom	254,r2,r3,r2
 20035b0:	e0bff815 	stw	r2,-32(fp)
		v21[1]=velocity2[1]-velocity1[1];
 20035b4:	e0bffd17 	ldw	r2,-12(fp)
 20035b8:	10800104 	addi	r2,r2,4
 20035bc:	10c00017 	ldw	r3,0(r2)
 20035c0:	e0bffc17 	ldw	r2,-16(fp)
 20035c4:	11000104 	addi	r4,r2,4
 20035c8:	20800017 	ldw	r2,0(r4)
 20035cc:	1885ffb2 	custom	254,r2,r3,r2
 20035d0:	e0bff915 	stw	r2,-28(fp)

		if ((v21[0]*x21 + v21[1]*y21) >=0){
 20035d4:	e0fff817 	ldw	r3,-32(fp)
 20035d8:	e0bfed17 	ldw	r2,-76(fp)
 20035dc:	1887ff32 	custom	252,r3,r3,r2
 20035e0:	e13ff917 	ldw	r4,-28(fp)
 20035e4:	e0bff417 	ldw	r2,-48(fp)
 20035e8:	2085ff32 	custom	252,r2,r4,r2
 20035ec:	1885ff72 	custom	253,r2,r3,r2
 20035f0:	0007883a 	mov	r3,zero
 20035f4:	10c5f932 	custom	228,r2,r2,r3
 20035f8:	10007e1e 	bne	r2,zero,20037f4 <collide_calc+0x368>
			//DEBUG_PRINT("error in collision\n");
		}
		else{
			fy21=0.000001*fabs(y21);
 20035fc:	e0bff417 	ldw	r2,-48(fp)
 2003600:	1005f832 	custom	224,r2,r2,zero
 2003604:	1009883a 	mov	r4,r2
 2003608:	20090680 	call	2009068 <__extendsfdf2>
 200360c:	1011883a 	mov	r8,r2
 2003610:	1813883a 	mov	r9,r3
 2003614:	01a82db4 	movhi	r6,41142
 2003618:	31bb6344 	addi	r6,r6,-4723
 200361c:	01cfac74 	movhi	r7,16049
 2003620:	39f1bdc4 	addi	r7,r7,-14601
 2003624:	4009883a 	mov	r4,r8
 2003628:	480b883a 	mov	r5,r9
 200362c:	20080540 	call	2008054 <__muldf3>
 2003630:	1009883a 	mov	r4,r2
 2003634:	180b883a 	mov	r5,r3
 2003638:	2005883a 	mov	r2,r4
 200363c:	2807883a 	mov	r3,r5
 2003640:	1009883a 	mov	r4,r2
 2003644:	180b883a 	mov	r5,r3
 2003648:	20091780 	call	2009178 <__truncdfsf2>
 200364c:	1007883a 	mov	r3,r2
 2003650:	e0fff515 	stw	r3,-44(fp)
			if(fabs(x21) < fy21){
 2003654:	e0bfed17 	ldw	r2,-76(fp)
 2003658:	1007f832 	custom	224,r3,r2,zero
 200365c:	e0bff517 	ldw	r2,-44(fp)
 2003660:	1885f9f2 	custom	231,r2,r3,r2
 2003664:	10000e26 	beq	r2,zero,20036a0 <collide_calc+0x214>
				if (x21<0) sign = -1;
 2003668:	e0bfed17 	ldw	r2,-76(fp)
 200366c:	0007883a 	mov	r3,zero
 2003670:	10c5f9f2 	custom	231,r2,r2,r3
 2003674:	10000326 	beq	r2,zero,2003684 <collide_calc+0x1f8>
 2003678:	00bfffc4 	movi	r2,-1
 200367c:	e0bfee15 	stw	r2,-72(fp)
 2003680:	00000206 	br	200368c <collide_calc+0x200>
				else sign=1;
 2003684:	00800044 	movi	r2,1
 2003688:	e0bfee15 	stw	r2,-72(fp)
				x21=fy21*sign;
 200368c:	e0bfee17 	ldw	r2,-72(fp)
 2003690:	1007feb2 	custom	250,r3,r2,zero
 2003694:	e0bff517 	ldw	r2,-44(fp)
 2003698:	1885ff32 	custom	252,r2,r3,r2
 200369c:	e0bfed15 	stw	r2,-76(fp)
			}
			a=y21/x21;
 20036a0:	e0fff417 	ldw	r3,-48(fp)
 20036a4:	e0bfed17 	ldw	r2,-76(fp)
 20036a8:	1885fff2 	custom	255,r2,r3,r2
 20036ac:	e0bff615 	stw	r2,-40(fp)
            dv = -2.0*(v21[0]+a*v21[1])/((1+a*a)*(1+m21));
 20036b0:	e0fff817 	ldw	r3,-32(fp)
 20036b4:	e13ff917 	ldw	r4,-28(fp)
 20036b8:	e0bff617 	ldw	r2,-40(fp)
 20036bc:	2085ff32 	custom	252,r2,r4,r2
 20036c0:	1885ff72 	custom	253,r2,r3,r2
 20036c4:	1009883a 	mov	r4,r2
 20036c8:	20090680 	call	2009068 <__extendsfdf2>
 20036cc:	1011883a 	mov	r8,r2
 20036d0:	1813883a 	mov	r9,r3
 20036d4:	000d883a 	mov	r6,zero
 20036d8:	01f00034 	movhi	r7,49152
 20036dc:	4009883a 	mov	r4,r8
 20036e0:	480b883a 	mov	r5,r9
 20036e4:	20080540 	call	2008054 <__muldf3>
 20036e8:	1009883a 	mov	r4,r2
 20036ec:	180b883a 	mov	r5,r3
 20036f0:	2021883a 	mov	r16,r4
 20036f4:	2823883a 	mov	r17,r5
 20036f8:	e0fff617 	ldw	r3,-40(fp)
 20036fc:	e0bff617 	ldw	r2,-40(fp)
 2003700:	1887ff32 	custom	252,r3,r3,r2
 2003704:	008fe034 	movhi	r2,16256
 2003708:	1887ff72 	custom	253,r3,r3,r2
 200370c:	e13ff317 	ldw	r4,-52(fp)
 2003710:	008fe034 	movhi	r2,16256
 2003714:	2085ff72 	custom	253,r2,r4,r2
 2003718:	1885ff32 	custom	252,r2,r3,r2
 200371c:	1009883a 	mov	r4,r2
 2003720:	20090680 	call	2009068 <__extendsfdf2>
 2003724:	1009883a 	mov	r4,r2
 2003728:	180b883a 	mov	r5,r3
 200372c:	200d883a 	mov	r6,r4
 2003730:	280f883a 	mov	r7,r5
 2003734:	8009883a 	mov	r4,r16
 2003738:	880b883a 	mov	r5,r17
 200373c:	20075140 	call	2007514 <__divdf3>
 2003740:	1009883a 	mov	r4,r2
 2003744:	180b883a 	mov	r5,r3
 2003748:	2005883a 	mov	r2,r4
 200374c:	2807883a 	mov	r3,r5
 2003750:	1009883a 	mov	r4,r2
 2003754:	180b883a 	mov	r5,r3
 2003758:	20091780 	call	2009178 <__truncdfsf2>
 200375c:	1007883a 	mov	r3,r2
 2003760:	e0fff715 	stw	r3,-36(fp)
            velocity2[0] += dv;
 2003764:	e0bffd17 	ldw	r2,-12(fp)
 2003768:	10c00017 	ldw	r3,0(r2)
 200376c:	e0bff717 	ldw	r2,-36(fp)
 2003770:	1887ff72 	custom	253,r3,r3,r2
 2003774:	e0bffd17 	ldw	r2,-12(fp)
 2003778:	10c00015 	stw	r3,0(r2)
            velocity2[1] += a*dv;
 200377c:	e0bffd17 	ldw	r2,-12(fp)
 2003780:	10800104 	addi	r2,r2,4
 2003784:	e0fffd17 	ldw	r3,-12(fp)
 2003788:	18c00104 	addi	r3,r3,4
 200378c:	19000017 	ldw	r4,0(r3)
 2003790:	e17ff617 	ldw	r5,-40(fp)
 2003794:	e0fff717 	ldw	r3,-36(fp)
 2003798:	28c7ff32 	custom	252,r3,r5,r3
 200379c:	20c7ff72 	custom	253,r3,r4,r3
 20037a0:	10c00015 	stw	r3,0(r2)

            velocity1[0] -= m21*dv;
 20037a4:	e0bffc17 	ldw	r2,-16(fp)
 20037a8:	10c00017 	ldw	r3,0(r2)
 20037ac:	e13ff317 	ldw	r4,-52(fp)
 20037b0:	e0bff717 	ldw	r2,-36(fp)
 20037b4:	2085ff32 	custom	252,r2,r4,r2
 20037b8:	1887ffb2 	custom	254,r3,r3,r2
 20037bc:	e0bffc17 	ldw	r2,-16(fp)
 20037c0:	10c00015 	stw	r3,0(r2)
            velocity1[1] -= a*m21*dv;
 20037c4:	e0bffc17 	ldw	r2,-16(fp)
 20037c8:	10800104 	addi	r2,r2,4
 20037cc:	e0fffc17 	ldw	r3,-16(fp)
 20037d0:	18c00104 	addi	r3,r3,4
 20037d4:	19000017 	ldw	r4,0(r3)
 20037d8:	e17ff617 	ldw	r5,-40(fp)
 20037dc:	e0fff317 	ldw	r3,-52(fp)
 20037e0:	28cbff32 	custom	252,r5,r5,r3
 20037e4:	e0fff717 	ldw	r3,-36(fp)
 20037e8:	28c7ff32 	custom	252,r3,r5,r3
 20037ec:	20c7ffb2 	custom	254,r3,r4,r3
 20037f0:	10c00015 	stw	r3,0(r2)
            //DEBUG_PRINT("collision - ball 1 [ %f, %f] - ball 2 [ %f, %f] - V1 [%f, %f] - V2 [%f,%f]\n", ball1[0],ball1[1],
            //					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
		}
	}
}
 20037f4:	0001883a 	nop
 20037f8:	e6fffe04 	addi	sp,fp,-8
 20037fc:	dfc00317 	ldw	ra,12(sp)
 2003800:	df000217 	ldw	fp,8(sp)
 2003804:	dc400117 	ldw	r17,4(sp)
 2003808:	dc000017 	ldw	r16,0(sp)
 200380c:	dec00404 	addi	sp,sp,16
 2003810:	f800283a 	ret

02003814 <moveBall>:


void moveBall(float* ball, float* velocity, float theta, int neutre){
 2003814:	defff704 	addi	sp,sp,-36
 2003818:	dfc00815 	stw	ra,32(sp)
 200381c:	df000715 	stw	fp,28(sp)
 2003820:	dc800615 	stw	r18,24(sp)
 2003824:	dc400515 	stw	r17,20(sp)
 2003828:	dc000415 	stw	r16,16(sp)
 200382c:	df000704 	addi	fp,sp,28
 2003830:	e13ff915 	stw	r4,-28(fp)
 2003834:	e17ffa15 	stw	r5,-24(fp)
 2003838:	e1bffb15 	stw	r6,-20(fp)
 200383c:	e1fffc15 	stw	r7,-16(fp)
	if(neutre != 0)
 2003840:	e0bffc17 	ldw	r2,-16(fp)
 2003844:	10001a26 	beq	r2,zero,20038b0 <moveBall+0x9c>
	{
		ball[0] += velocity[0]*cosf(theta);
 2003848:	e0bff917 	ldw	r2,-28(fp)
 200384c:	14000017 	ldw	r16,0(r2)
 2003850:	e0bffa17 	ldw	r2,-24(fp)
 2003854:	14400017 	ldw	r17,0(r2)
 2003858:	e13ffb17 	ldw	r4,-20(fp)
 200385c:	2003bbc0 	call	2003bbc <cosf>
 2003860:	1007883a 	mov	r3,r2
 2003864:	88c5ff32 	custom	252,r2,r17,r3
 2003868:	8087ff72 	custom	253,r3,r16,r2
 200386c:	e0bff917 	ldw	r2,-28(fp)
 2003870:	10c00015 	stw	r3,0(r2)
		ball[1] += velocity[1]*sinf(theta);
 2003874:	e0bff917 	ldw	r2,-28(fp)
 2003878:	14000104 	addi	r16,r2,4
 200387c:	e0bff917 	ldw	r2,-28(fp)
 2003880:	10800104 	addi	r2,r2,4
 2003884:	14400017 	ldw	r17,0(r2)
 2003888:	e0bffa17 	ldw	r2,-24(fp)
 200388c:	10800104 	addi	r2,r2,4
 2003890:	14800017 	ldw	r18,0(r2)
 2003894:	e13ffb17 	ldw	r4,-20(fp)
 2003898:	2003cfc0 	call	2003cfc <sinf>
 200389c:	1007883a 	mov	r3,r2
 20038a0:	90c5ff32 	custom	252,r2,r18,r3
 20038a4:	8885ff72 	custom	253,r2,r17,r2
 20038a8:	80800015 	stw	r2,0(r16)
	else
	{
		ball[0] += velocity[0];
		ball[1] += velocity[1];
	}
}
 20038ac:	00001106 	br	20038f4 <moveBall+0xe0>
		ball[0] += velocity[0]*cosf(theta);
		ball[1] += velocity[1]*sinf(theta);
	}
	else
	{
		ball[0] += velocity[0];
 20038b0:	e0bff917 	ldw	r2,-28(fp)
 20038b4:	10c00017 	ldw	r3,0(r2)
 20038b8:	e13ffa17 	ldw	r4,-24(fp)
 20038bc:	20800017 	ldw	r2,0(r4)
 20038c0:	1887ff72 	custom	253,r3,r3,r2
 20038c4:	e0bff917 	ldw	r2,-28(fp)
 20038c8:	10c00015 	stw	r3,0(r2)
		ball[1] += velocity[1];
 20038cc:	e0bff917 	ldw	r2,-28(fp)
 20038d0:	10800104 	addi	r2,r2,4
 20038d4:	e0fff917 	ldw	r3,-28(fp)
 20038d8:	18c00104 	addi	r3,r3,4
 20038dc:	19000017 	ldw	r4,0(r3)
 20038e0:	e0fffa17 	ldw	r3,-24(fp)
 20038e4:	19400104 	addi	r5,r3,4
 20038e8:	28c00017 	ldw	r3,0(r5)
 20038ec:	20c7ff72 	custom	253,r3,r4,r3
 20038f0:	10c00015 	stw	r3,0(r2)
	}
}
 20038f4:	0001883a 	nop
 20038f8:	e6fffd04 	addi	sp,fp,-12
 20038fc:	dfc00417 	ldw	ra,16(sp)
 2003900:	df000317 	ldw	fp,12(sp)
 2003904:	dc800217 	ldw	r18,8(sp)
 2003908:	dc400117 	ldw	r17,4(sp)
 200390c:	dc000017 	ldw	r16,0(sp)
 2003910:	dec00504 	addi	sp,sp,20
 2003914:	f800283a 	ret

02003918 <damping>:


void damping(float* velocity){
 2003918:	defffc04 	addi	sp,sp,-16
 200391c:	dfc00315 	stw	ra,12(sp)
 2003920:	df000215 	stw	fp,8(sp)
 2003924:	dc000115 	stw	r16,4(sp)
 2003928:	df000204 	addi	fp,sp,8
 200392c:	e13ffe15 	stw	r4,-8(fp)
	velocity[0] *= DAMPING;
 2003930:	e0bffe17 	ldw	r2,-8(fp)
 2003934:	10c00017 	ldw	r3,0(r2)
 2003938:	1809883a 	mov	r4,r3
 200393c:	20090680 	call	2009068 <__extendsfdf2>
 2003940:	1011883a 	mov	r8,r2
 2003944:	1813883a 	mov	r9,r3
 2003948:	018f5c74 	movhi	r6,15729
 200394c:	31a8f5c4 	addi	r6,r6,-23593
 2003950:	01cffc34 	movhi	r7,16368
 2003954:	39f5c284 	addi	r7,r7,-10486
 2003958:	4009883a 	mov	r4,r8
 200395c:	480b883a 	mov	r5,r9
 2003960:	20080540 	call	2008054 <__muldf3>
 2003964:	1009883a 	mov	r4,r2
 2003968:	180b883a 	mov	r5,r3
 200396c:	2005883a 	mov	r2,r4
 2003970:	2807883a 	mov	r3,r5
 2003974:	1009883a 	mov	r4,r2
 2003978:	180b883a 	mov	r5,r3
 200397c:	20091780 	call	2009178 <__truncdfsf2>
 2003980:	1007883a 	mov	r3,r2
 2003984:	e0bffe17 	ldw	r2,-8(fp)
 2003988:	10c00015 	stw	r3,0(r2)
	velocity[1] *= DAMPING;
 200398c:	e0bffe17 	ldw	r2,-8(fp)
 2003990:	14000104 	addi	r16,r2,4
 2003994:	e0bffe17 	ldw	r2,-8(fp)
 2003998:	10800104 	addi	r2,r2,4
 200399c:	10c00017 	ldw	r3,0(r2)
 20039a0:	1809883a 	mov	r4,r3
 20039a4:	20090680 	call	2009068 <__extendsfdf2>
 20039a8:	1011883a 	mov	r8,r2
 20039ac:	1813883a 	mov	r9,r3
 20039b0:	018f5c74 	movhi	r6,15729
 20039b4:	31a8f5c4 	addi	r6,r6,-23593
 20039b8:	01cffc34 	movhi	r7,16368
 20039bc:	39f5c284 	addi	r7,r7,-10486
 20039c0:	4009883a 	mov	r4,r8
 20039c4:	480b883a 	mov	r5,r9
 20039c8:	20080540 	call	2008054 <__muldf3>
 20039cc:	1009883a 	mov	r4,r2
 20039d0:	180b883a 	mov	r5,r3
 20039d4:	2005883a 	mov	r2,r4
 20039d8:	2807883a 	mov	r3,r5
 20039dc:	1009883a 	mov	r4,r2
 20039e0:	180b883a 	mov	r5,r3
 20039e4:	20091780 	call	2009178 <__truncdfsf2>
 20039e8:	1007883a 	mov	r3,r2
 20039ec:	80c00015 	stw	r3,0(r16)
}
 20039f0:	0001883a 	nop
 20039f4:	e6ffff04 	addi	sp,fp,-4
 20039f8:	dfc00217 	ldw	ra,8(sp)
 20039fc:	df000117 	ldw	fp,4(sp)
 2003a00:	dc000017 	ldw	r16,0(sp)
 2003a04:	dec00304 	addi	sp,sp,12
 2003a08:	f800283a 	ret

02003a0c <fmin>:
#else
	double fmin(x,y)
	double x;
	double y;
#endif
{
 2003a0c:	defffa04 	addi	sp,sp,-24
 2003a10:	dfc00515 	stw	ra,20(sp)
 2003a14:	df000415 	stw	fp,16(sp)
 2003a18:	df000404 	addi	fp,sp,16
 2003a1c:	e13ffc15 	stw	r4,-16(fp)
 2003a20:	e17ffd15 	stw	r5,-12(fp)
 2003a24:	e1bffe15 	stw	r6,-8(fp)
 2003a28:	e1ffff15 	stw	r7,-4(fp)
  if (__fpclassifyd(x) == FP_NAN)
 2003a2c:	e13ffc17 	ldw	r4,-16(fp)
 2003a30:	e17ffd17 	ldw	r5,-12(fp)
 2003a34:	2003ab80 	call	2003ab8 <__fpclassifyd>
 2003a38:	1000031e 	bne	r2,zero,2003a48 <fmin+0x3c>
    return y;
 2003a3c:	e0bffe17 	ldw	r2,-8(fp)
 2003a40:	e0ffff17 	ldw	r3,-4(fp)
 2003a44:	00001306 	br	2003a94 <fmin+0x88>
  if (__fpclassifyd(y) == FP_NAN)
 2003a48:	e13ffe17 	ldw	r4,-8(fp)
 2003a4c:	e17fff17 	ldw	r5,-4(fp)
 2003a50:	2003ab80 	call	2003ab8 <__fpclassifyd>
 2003a54:	1000031e 	bne	r2,zero,2003a64 <fmin+0x58>
    return x;
 2003a58:	e0bffc17 	ldw	r2,-16(fp)
 2003a5c:	e0fffd17 	ldw	r3,-12(fp)
 2003a60:	00000c06 	br	2003a94 <fmin+0x88>
  
  return x < y ? x : y;
 2003a64:	e1bffe17 	ldw	r6,-8(fp)
 2003a68:	e1ffff17 	ldw	r7,-4(fp)
 2003a6c:	e13ffc17 	ldw	r4,-16(fp)
 2003a70:	e17ffd17 	ldw	r5,-12(fp)
 2003a74:	2007f600 	call	2007f60 <__ledf2>
 2003a78:	1000030e 	bge	r2,zero,2003a88 <fmin+0x7c>
 2003a7c:	e0bffc17 	ldw	r2,-16(fp)
 2003a80:	e0fffd17 	ldw	r3,-12(fp)
 2003a84:	00000206 	br	2003a90 <fmin+0x84>
 2003a88:	e0bffe17 	ldw	r2,-8(fp)
 2003a8c:	e0ffff17 	ldw	r3,-4(fp)
 2003a90:	0001883a 	nop
 2003a94:	1009883a 	mov	r4,r2
 2003a98:	180b883a 	mov	r5,r3
}
 2003a9c:	2005883a 	mov	r2,r4
 2003aa0:	2807883a 	mov	r3,r5
 2003aa4:	e037883a 	mov	sp,fp
 2003aa8:	dfc00117 	ldw	ra,4(sp)
 2003aac:	df000017 	ldw	fp,0(sp)
 2003ab0:	dec00204 	addi	sp,sp,8
 2003ab4:	f800283a 	ret

02003ab8 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 2003ab8:	defff904 	addi	sp,sp,-28
 2003abc:	df000615 	stw	fp,24(sp)
 2003ac0:	df000604 	addi	fp,sp,24
 2003ac4:	e13ffe15 	stw	r4,-8(fp)
 2003ac8:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 2003acc:	e0bffe17 	ldw	r2,-8(fp)
 2003ad0:	e0bffc15 	stw	r2,-16(fp)
 2003ad4:	e0bfff17 	ldw	r2,-4(fp)
 2003ad8:	e0bffd15 	stw	r2,-12(fp)
 2003adc:	e0bffd17 	ldw	r2,-12(fp)
 2003ae0:	e0bffa15 	stw	r2,-24(fp)
 2003ae4:	e0bffc17 	ldw	r2,-16(fp)
 2003ae8:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 2003aec:	e0bffa17 	ldw	r2,-24(fp)
 2003af0:	1000021e 	bne	r2,zero,2003afc <__fpclassifyd+0x44>
 2003af4:	e0bffb17 	ldw	r2,-20(fp)
 2003af8:	10000526 	beq	r2,zero,2003b10 <__fpclassifyd+0x58>
 2003afc:	e0fffa17 	ldw	r3,-24(fp)
 2003b00:	00a00034 	movhi	r2,32768
 2003b04:	1880041e 	bne	r3,r2,2003b18 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 2003b08:	e0bffb17 	ldw	r2,-20(fp)
 2003b0c:	1000021e 	bne	r2,zero,2003b18 <__fpclassifyd+0x60>
    return FP_ZERO;
 2003b10:	00800084 	movi	r2,2
 2003b14:	00002506 	br	2003bac <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 2003b18:	e0fffa17 	ldw	r3,-24(fp)
 2003b1c:	00800434 	movhi	r2,16
 2003b20:	18800336 	bltu	r3,r2,2003b30 <__fpclassifyd+0x78>
 2003b24:	e0fffa17 	ldw	r3,-24(fp)
 2003b28:	009ffc34 	movhi	r2,32752
 2003b2c:	18800636 	bltu	r3,r2,2003b48 <__fpclassifyd+0x90>
 2003b30:	e0fffa17 	ldw	r3,-24(fp)
 2003b34:	00a00434 	movhi	r2,32784
 2003b38:	18800536 	bltu	r3,r2,2003b50 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 2003b3c:	e0fffa17 	ldw	r3,-24(fp)
 2003b40:	00bffc34 	movhi	r2,65520
 2003b44:	1880022e 	bgeu	r3,r2,2003b50 <__fpclassifyd+0x98>
    return FP_NORMAL;
 2003b48:	00800104 	movi	r2,4
 2003b4c:	00001706 	br	2003bac <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2003b50:	e0fffa17 	ldw	r3,-24(fp)
 2003b54:	00800434 	movhi	r2,16
 2003b58:	18800536 	bltu	r3,r2,2003b70 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2003b5c:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 2003b60:	1000050e 	bge	r2,zero,2003b78 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2003b64:	e0fffa17 	ldw	r3,-24(fp)
 2003b68:	00a00434 	movhi	r2,32784
 2003b6c:	1880022e 	bgeu	r3,r2,2003b78 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 2003b70:	008000c4 	movi	r2,3
 2003b74:	00000d06 	br	2003bac <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 2003b78:	e0fffa17 	ldw	r3,-24(fp)
 2003b7c:	009ffc34 	movhi	r2,32752
 2003b80:	1880021e 	bne	r3,r2,2003b8c <__fpclassifyd+0xd4>
 2003b84:	e0bffb17 	ldw	r2,-20(fp)
 2003b88:	10000526 	beq	r2,zero,2003ba0 <__fpclassifyd+0xe8>
 2003b8c:	e0fffa17 	ldw	r3,-24(fp)
 2003b90:	00bffc34 	movhi	r2,65520
 2003b94:	1880041e 	bne	r3,r2,2003ba8 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 2003b98:	e0bffb17 	ldw	r2,-20(fp)
 2003b9c:	1000021e 	bne	r2,zero,2003ba8 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 2003ba0:	00800044 	movi	r2,1
 2003ba4:	00000106 	br	2003bac <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 2003ba8:	0005883a 	mov	r2,zero
}
 2003bac:	e037883a 	mov	sp,fp
 2003bb0:	df000017 	ldw	fp,0(sp)
 2003bb4:	dec00104 	addi	sp,sp,4
 2003bb8:	f800283a 	ret

02003bbc <cosf>:
	float cosf(float x)
#else
	float cosf(x)
	float x;
#endif
{
 2003bbc:	defff704 	addi	sp,sp,-36
 2003bc0:	dfc00815 	stw	ra,32(sp)
 2003bc4:	df000715 	stw	fp,28(sp)
 2003bc8:	df000704 	addi	fp,sp,28
 2003bcc:	e13fff15 	stw	r4,-4(fp)
	float y[2],z=0.0;
 2003bd0:	e03ff915 	stw	zero,-28(fp)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
 2003bd4:	e0bfff17 	ldw	r2,-4(fp)
 2003bd8:	e0bffe15 	stw	r2,-8(fp)
 2003bdc:	e0bffe17 	ldw	r2,-8(fp)
 2003be0:	e0bffa15 	stw	r2,-24(fp)

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 2003be4:	e0fffa17 	ldw	r3,-24(fp)
 2003be8:	00a00034 	movhi	r2,32768
 2003bec:	10bfffc4 	addi	r2,r2,-1
 2003bf0:	1884703a 	and	r2,r3,r2
 2003bf4:	e0bffa15 	stw	r2,-24(fp)
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
 2003bf8:	e0fffa17 	ldw	r3,-24(fp)
 2003bfc:	008fd274 	movhi	r2,16201
 2003c00:	1083f604 	addi	r2,r2,4056
 2003c04:	10c00516 	blt	r2,r3,2003c1c <cosf+0x60>
 2003c08:	e17ff917 	ldw	r5,-28(fp)
 2003c0c:	e13fff17 	ldw	r4,-4(fp)
 2003c10:	20050c40 	call	20050c4 <__kernel_cosf>
 2003c14:	1007883a 	mov	r3,r2
 2003c18:	00003206 	br	2003ce4 <cosf+0x128>

    /* cos(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 2003c1c:	e0fffa17 	ldw	r3,-24(fp)
 2003c20:	009fe034 	movhi	r2,32640
 2003c24:	18800416 	blt	r3,r2,2003c38 <cosf+0x7c>
 2003c28:	e0ffff17 	ldw	r3,-4(fp)
 2003c2c:	e0bfff17 	ldw	r2,-4(fp)
 2003c30:	1887ffb2 	custom	254,r3,r3,r2
 2003c34:	00002b06 	br	2003ce4 <cosf+0x128>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 2003c38:	e0bffc04 	addi	r2,fp,-16
 2003c3c:	100b883a 	mov	r5,r2
 2003c40:	e13fff17 	ldw	r4,-4(fp)
 2003c44:	2004a500 	call	2004a50 <__ieee754_rem_pio2f>
 2003c48:	e0bffb15 	stw	r2,-20(fp)
	    switch(n&3) {
 2003c4c:	e0bffb17 	ldw	r2,-20(fp)
 2003c50:	108000cc 	andi	r2,r2,3
 2003c54:	10c00060 	cmpeqi	r3,r2,1
 2003c58:	18000a1e 	bne	r3,zero,2003c84 <cosf+0xc8>
 2003c5c:	10c000a0 	cmpeqi	r3,r2,2
 2003c60:	1800111e 	bne	r3,zero,2003ca8 <cosf+0xec>
 2003c64:	1000181e 	bne	r2,zero,2003cc8 <cosf+0x10c>
		case 0: return  __kernel_cosf(y[0],y[1]);
 2003c68:	e0bffc17 	ldw	r2,-16(fp)
 2003c6c:	e0fffd17 	ldw	r3,-12(fp)
 2003c70:	180b883a 	mov	r5,r3
 2003c74:	1009883a 	mov	r4,r2
 2003c78:	20050c40 	call	20050c4 <__kernel_cosf>
 2003c7c:	1007883a 	mov	r3,r2
 2003c80:	00001806 	br	2003ce4 <cosf+0x128>
		case 1: return -__kernel_sinf(y[0],y[1],1);
 2003c84:	e0bffc17 	ldw	r2,-16(fp)
 2003c88:	e0fffd17 	ldw	r3,-12(fp)
 2003c8c:	01800044 	movi	r6,1
 2003c90:	180b883a 	mov	r5,r3
 2003c94:	1009883a 	mov	r4,r2
 2003c98:	20061280 	call	2006128 <__kernel_sinf>
 2003c9c:	1007883a 	mov	r3,r2
 2003ca0:	1807f872 	custom	225,r3,r3,zero
 2003ca4:	00000f06 	br	2003ce4 <cosf+0x128>
		case 2: return -__kernel_cosf(y[0],y[1]);
 2003ca8:	e0bffc17 	ldw	r2,-16(fp)
 2003cac:	e0fffd17 	ldw	r3,-12(fp)
 2003cb0:	180b883a 	mov	r5,r3
 2003cb4:	1009883a 	mov	r4,r2
 2003cb8:	20050c40 	call	20050c4 <__kernel_cosf>
 2003cbc:	1007883a 	mov	r3,r2
 2003cc0:	1807f872 	custom	225,r3,r3,zero
 2003cc4:	00000706 	br	2003ce4 <cosf+0x128>
		default:
		        return  __kernel_sinf(y[0],y[1],1);
 2003cc8:	e0bffc17 	ldw	r2,-16(fp)
 2003ccc:	e0fffd17 	ldw	r3,-12(fp)
 2003cd0:	01800044 	movi	r6,1
 2003cd4:	180b883a 	mov	r5,r3
 2003cd8:	1009883a 	mov	r4,r2
 2003cdc:	20061280 	call	2006128 <__kernel_sinf>
 2003ce0:	1007883a 	mov	r3,r2
 2003ce4:	1805883a 	mov	r2,r3
	    }
	}
}
 2003ce8:	e037883a 	mov	sp,fp
 2003cec:	dfc00117 	ldw	ra,4(sp)
 2003cf0:	df000017 	ldw	fp,0(sp)
 2003cf4:	dec00204 	addi	sp,sp,8
 2003cf8:	f800283a 	ret

02003cfc <sinf>:
	float sinf(float x)
#else
	float sinf(x)
	float x;
#endif
{
 2003cfc:	defff704 	addi	sp,sp,-36
 2003d00:	dfc00815 	stw	ra,32(sp)
 2003d04:	df000715 	stw	fp,28(sp)
 2003d08:	df000704 	addi	fp,sp,28
 2003d0c:	e13fff15 	stw	r4,-4(fp)
	float y[2],z=0.0;
 2003d10:	e03ff915 	stw	zero,-28(fp)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
 2003d14:	e0bfff17 	ldw	r2,-4(fp)
 2003d18:	e0bffe15 	stw	r2,-8(fp)
 2003d1c:	e0bffe17 	ldw	r2,-8(fp)
 2003d20:	e0bffa15 	stw	r2,-24(fp)

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 2003d24:	e0fffa17 	ldw	r3,-24(fp)
 2003d28:	00a00034 	movhi	r2,32768
 2003d2c:	10bfffc4 	addi	r2,r2,-1
 2003d30:	1884703a 	and	r2,r3,r2
 2003d34:	e0bffa15 	stw	r2,-24(fp)
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
 2003d38:	e0fffa17 	ldw	r3,-24(fp)
 2003d3c:	008fd274 	movhi	r2,16201
 2003d40:	1083f604 	addi	r2,r2,4056
 2003d44:	10c00616 	blt	r2,r3,2003d60 <sinf+0x64>
 2003d48:	000d883a 	mov	r6,zero
 2003d4c:	e17ff917 	ldw	r5,-28(fp)
 2003d50:	e13fff17 	ldw	r4,-4(fp)
 2003d54:	20061280 	call	2006128 <__kernel_sinf>
 2003d58:	1007883a 	mov	r3,r2
 2003d5c:	00003206 	br	2003e28 <sinf+0x12c>

    /* sin(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 2003d60:	e0fffa17 	ldw	r3,-24(fp)
 2003d64:	009fe034 	movhi	r2,32640
 2003d68:	18800416 	blt	r3,r2,2003d7c <sinf+0x80>
 2003d6c:	e0ffff17 	ldw	r3,-4(fp)
 2003d70:	e0bfff17 	ldw	r2,-4(fp)
 2003d74:	1887ffb2 	custom	254,r3,r3,r2
 2003d78:	00002b06 	br	2003e28 <sinf+0x12c>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 2003d7c:	e0bffc04 	addi	r2,fp,-16
 2003d80:	100b883a 	mov	r5,r2
 2003d84:	e13fff17 	ldw	r4,-4(fp)
 2003d88:	2004a500 	call	2004a50 <__ieee754_rem_pio2f>
 2003d8c:	e0bffb15 	stw	r2,-20(fp)
	    switch(n&3) {
 2003d90:	e0bffb17 	ldw	r2,-20(fp)
 2003d94:	108000cc 	andi	r2,r2,3
 2003d98:	10c00060 	cmpeqi	r3,r2,1
 2003d9c:	18000b1e 	bne	r3,zero,2003dcc <sinf+0xd0>
 2003da0:	10c000a0 	cmpeqi	r3,r2,2
 2003da4:	1800101e 	bne	r3,zero,2003de8 <sinf+0xec>
 2003da8:	1000181e 	bne	r2,zero,2003e0c <sinf+0x110>
		case 0: return  __kernel_sinf(y[0],y[1],1);
 2003dac:	e0bffc17 	ldw	r2,-16(fp)
 2003db0:	e0fffd17 	ldw	r3,-12(fp)
 2003db4:	01800044 	movi	r6,1
 2003db8:	180b883a 	mov	r5,r3
 2003dbc:	1009883a 	mov	r4,r2
 2003dc0:	20061280 	call	2006128 <__kernel_sinf>
 2003dc4:	1007883a 	mov	r3,r2
 2003dc8:	00001706 	br	2003e28 <sinf+0x12c>
		case 1: return  __kernel_cosf(y[0],y[1]);
 2003dcc:	e0bffc17 	ldw	r2,-16(fp)
 2003dd0:	e0fffd17 	ldw	r3,-12(fp)
 2003dd4:	180b883a 	mov	r5,r3
 2003dd8:	1009883a 	mov	r4,r2
 2003ddc:	20050c40 	call	20050c4 <__kernel_cosf>
 2003de0:	1007883a 	mov	r3,r2
 2003de4:	00001006 	br	2003e28 <sinf+0x12c>
		case 2: return -__kernel_sinf(y[0],y[1],1);
 2003de8:	e0bffc17 	ldw	r2,-16(fp)
 2003dec:	e0fffd17 	ldw	r3,-12(fp)
 2003df0:	01800044 	movi	r6,1
 2003df4:	180b883a 	mov	r5,r3
 2003df8:	1009883a 	mov	r4,r2
 2003dfc:	20061280 	call	2006128 <__kernel_sinf>
 2003e00:	1007883a 	mov	r3,r2
 2003e04:	1807f872 	custom	225,r3,r3,zero
 2003e08:	00000706 	br	2003e28 <sinf+0x12c>
		default:
			return -__kernel_cosf(y[0],y[1]);
 2003e0c:	e0bffc17 	ldw	r2,-16(fp)
 2003e10:	e0fffd17 	ldw	r3,-12(fp)
 2003e14:	180b883a 	mov	r5,r3
 2003e18:	1009883a 	mov	r4,r2
 2003e1c:	20050c40 	call	20050c4 <__kernel_cosf>
 2003e20:	1007883a 	mov	r3,r2
 2003e24:	1807f872 	custom	225,r3,r3,zero
 2003e28:	1805883a 	mov	r2,r3
	    }
	}
}
 2003e2c:	e037883a 	mov	sp,fp
 2003e30:	dfc00117 	ldw	ra,4(sp)
 2003e34:	df000017 	ldw	fp,0(sp)
 2003e38:	dec00204 	addi	sp,sp,8
 2003e3c:	f800283a 	ret

02003e40 <sqrt>:
	double sqrt(double x)		/* wrapper sqrt */
#else
	double sqrt(x)			/* wrapper sqrt */
	double x;
#endif
{
 2003e40:	defff104 	addi	sp,sp,-60
 2003e44:	dfc00e15 	stw	ra,56(sp)
 2003e48:	df000d15 	stw	fp,52(sp)
 2003e4c:	df000d04 	addi	fp,sp,52
 2003e50:	e13ffe15 	stw	r4,-8(fp)
 2003e54:	e17fff15 	stw	r5,-4(fp)
#ifdef _IEEE_LIBM
	return __ieee754_sqrt(x);
#else
	struct exception exc;
	double z;
	z = __ieee754_sqrt(x);
 2003e58:	e13ffe17 	ldw	r4,-8(fp)
 2003e5c:	e17fff17 	ldw	r5,-4(fp)
 2003e60:	2003ff40 	call	2003ff4 <__ieee754_sqrt>
 2003e64:	e0bff315 	stw	r2,-52(fp)
 2003e68:	e0fff415 	stw	r3,-48(fp)
	if(_LIB_VERSION == _IEEE_ || isnan(x)) return z;
 2003e6c:	d0a02817 	ldw	r2,-32608(gp)
 2003e70:	10bfffe0 	cmpeqi	r2,r2,-1
 2003e74:	1000041e 	bne	r2,zero,2003e88 <sqrt+0x48>
 2003e78:	e13ffe17 	ldw	r4,-8(fp)
 2003e7c:	e17fff17 	ldw	r5,-4(fp)
 2003e80:	2003ab80 	call	2003ab8 <__fpclassifyd>
 2003e84:	1000031e 	bne	r2,zero,2003e94 <sqrt+0x54>
 2003e88:	e0bff317 	ldw	r2,-52(fp)
 2003e8c:	e0fff417 	ldw	r3,-48(fp)
 2003e90:	00003f06 	br	2003f90 <sqrt+0x150>
	if(x<0.0) {
 2003e94:	000d883a 	mov	r6,zero
 2003e98:	000f883a 	mov	r7,zero
 2003e9c:	e13ffe17 	ldw	r4,-8(fp)
 2003ea0:	e17fff17 	ldw	r5,-4(fp)
 2003ea4:	2007f600 	call	2007f60 <__ledf2>
 2003ea8:	1000370e 	bge	r2,zero,2003f88 <sqrt+0x148>
	  exc.type = DOMAIN;
 2003eac:	00800044 	movi	r2,1
 2003eb0:	e0bff515 	stw	r2,-44(fp)
	  exc.name = "sqrt";
 2003eb4:	008080b4 	movhi	r2,514
 2003eb8:	1088b904 	addi	r2,r2,8932
 2003ebc:	e0bff615 	stw	r2,-40(fp)
	  exc.err = 0;
 2003ec0:	e03ffd15 	stw	zero,-12(fp)
	  exc.arg1 = exc.arg2 = x;
 2003ec4:	e0bffe17 	ldw	r2,-8(fp)
 2003ec8:	e0bff915 	stw	r2,-28(fp)
 2003ecc:	e0bfff17 	ldw	r2,-4(fp)
 2003ed0:	e0bffa15 	stw	r2,-24(fp)
 2003ed4:	e0bff917 	ldw	r2,-28(fp)
 2003ed8:	e0fffa17 	ldw	r3,-24(fp)
 2003edc:	e0bff715 	stw	r2,-36(fp)
 2003ee0:	e0fff815 	stw	r3,-32(fp)
	  if (_LIB_VERSION == _SVID_)
 2003ee4:	d0a02817 	ldw	r2,-32608(gp)
 2003ee8:	1000031e 	bne	r2,zero,2003ef8 <sqrt+0xb8>
	    exc.retval = 0.0;
 2003eec:	e03ffb15 	stw	zero,-20(fp)
 2003ef0:	e03ffc15 	stw	zero,-16(fp)
 2003ef4:	00000b06 	br	2003f24 <sqrt+0xe4>
          else
            exc.retval = 0.0/0.0;
 2003ef8:	000d883a 	mov	r6,zero
 2003efc:	000f883a 	mov	r7,zero
 2003f00:	0009883a 	mov	r4,zero
 2003f04:	000b883a 	mov	r5,zero
 2003f08:	20075140 	call	2007514 <__divdf3>
 2003f0c:	1009883a 	mov	r4,r2
 2003f10:	180b883a 	mov	r5,r3
 2003f14:	2005883a 	mov	r2,r4
 2003f18:	2807883a 	mov	r3,r5
 2003f1c:	e0bffb15 	stw	r2,-20(fp)
 2003f20:	e0fffc15 	stw	r3,-16(fp)
          if (_LIB_VERSION == _POSIX_)
 2003f24:	d0a02817 	ldw	r2,-32608(gp)
 2003f28:	10800098 	cmpnei	r2,r2,2
 2003f2c:	1000051e 	bne	r2,zero,2003f44 <sqrt+0x104>
            errno = EDOM;
 2003f30:	20093840 	call	2009384 <__errno>
 2003f34:	1007883a 	mov	r3,r2
 2003f38:	00800844 	movi	r2,33
 2003f3c:	18800015 	stw	r2,0(r3)
 2003f40:	00000806 	br	2003f64 <sqrt+0x124>
          else if (!matherr(&exc)) {
 2003f44:	e0bff504 	addi	r2,fp,-44
 2003f48:	1009883a 	mov	r4,r2
 2003f4c:	20062940 	call	2006294 <matherr>
 2003f50:	1000041e 	bne	r2,zero,2003f64 <sqrt+0x124>
            errno = EDOM;
 2003f54:	20093840 	call	2009384 <__errno>
 2003f58:	1007883a 	mov	r3,r2
 2003f5c:	00800844 	movi	r2,33
 2003f60:	18800015 	stw	r2,0(r3)
          }
          if (exc.err != 0)
 2003f64:	e0bffd17 	ldw	r2,-12(fp)
 2003f68:	10000426 	beq	r2,zero,2003f7c <sqrt+0x13c>
	    errno = exc.err;
 2003f6c:	20093840 	call	2009384 <__errno>
 2003f70:	1007883a 	mov	r3,r2
 2003f74:	e0bffd17 	ldw	r2,-12(fp)
 2003f78:	18800015 	stw	r2,0(r3)
	  return exc.retval; 
 2003f7c:	e0bffb17 	ldw	r2,-20(fp)
 2003f80:	e0fffc17 	ldw	r3,-16(fp)
 2003f84:	00000206 	br	2003f90 <sqrt+0x150>
	} else
	    return z;
 2003f88:	e0bff317 	ldw	r2,-52(fp)
 2003f8c:	e0fff417 	ldw	r3,-48(fp)
 2003f90:	1009883a 	mov	r4,r2
 2003f94:	180b883a 	mov	r5,r3
#endif
}
 2003f98:	2005883a 	mov	r2,r4
 2003f9c:	2807883a 	mov	r3,r5
 2003fa0:	e037883a 	mov	sp,fp
 2003fa4:	dfc00117 	ldw	ra,4(sp)
 2003fa8:	df000017 	ldw	fp,0(sp)
 2003fac:	dec00204 	addi	sp,sp,8
 2003fb0:	f800283a 	ret

02003fb4 <atan2f>:
	float atan2f(float y, float x)		/* wrapper atan2f */
#else
	float atan2f(y,x)			/* wrapper atan2 */
	float y,x;
#endif
{
 2003fb4:	defffc04 	addi	sp,sp,-16
 2003fb8:	dfc00315 	stw	ra,12(sp)
 2003fbc:	df000215 	stw	fp,8(sp)
 2003fc0:	df000204 	addi	fp,sp,8
 2003fc4:	e13ffe15 	stw	r4,-8(fp)
 2003fc8:	e17fff15 	stw	r5,-4(fp)
	return __ieee754_atan2f(y,x);
 2003fcc:	e17fff17 	ldw	r5,-4(fp)
 2003fd0:	e13ffe17 	ldw	r4,-8(fp)
 2003fd4:	200463c0 	call	200463c <__ieee754_atan2f>
 2003fd8:	1007883a 	mov	r3,r2
 2003fdc:	1805883a 	mov	r2,r3
}
 2003fe0:	e037883a 	mov	sp,fp
 2003fe4:	dfc00117 	ldw	ra,4(sp)
 2003fe8:	df000017 	ldw	fp,0(sp)
 2003fec:	dec00204 	addi	sp,sp,8
 2003ff0:	f800283a 	ret

02003ff4 <__ieee754_sqrt>:
	double __ieee754_sqrt(double x)
#else
	double __ieee754_sqrt(x)
	double x;
#endif
{
 2003ff4:	deffe804 	addi	sp,sp,-96
 2003ff8:	dfc01715 	stw	ra,92(sp)
 2003ffc:	df001615 	stw	fp,88(sp)
 2004000:	dc401515 	stw	r17,84(sp)
 2004004:	dc001415 	stw	r16,80(sp)
 2004008:	df001604 	addi	fp,sp,88
 200400c:	e13ffc15 	stw	r4,-16(fp)
 2004010:	e17ffd15 	stw	r5,-12(fp)
	double z;
	__int32_t sign = (int)0x80000000; 
 2004014:	00a00034 	movhi	r2,32768
 2004018:	e0bff315 	stw	r2,-52(fp)
	__uint32_t r,t1,s1,ix1,q1;
	__int32_t ix0,s0,q,m,t,i;

	EXTRACT_WORDS(ix0,ix1,x);
 200401c:	e0bffc17 	ldw	r2,-16(fp)
 2004020:	e0bff815 	stw	r2,-32(fp)
 2004024:	e0bffd17 	ldw	r2,-12(fp)
 2004028:	e0bff915 	stw	r2,-28(fp)
 200402c:	e0bff917 	ldw	r2,-28(fp)
 2004030:	e0bfee15 	stw	r2,-72(fp)
 2004034:	e0bff817 	ldw	r2,-32(fp)
 2004038:	e0bfec15 	stw	r2,-80(fp)

    /* take care of Inf and NaN */
	if((ix0&0x7ff00000)==0x7ff00000) {			
 200403c:	e0bfee17 	ldw	r2,-72(fp)
 2004040:	10dffc2c 	andhi	r3,r2,32752
 2004044:	009ffc34 	movhi	r2,32752
 2004048:	1880131e 	bne	r3,r2,2004098 <__ieee754_sqrt+0xa4>
	    return x*x+x;		/* sqrt(NaN)=NaN, sqrt(+inf)=+inf
 200404c:	e1bffc17 	ldw	r6,-16(fp)
 2004050:	e1fffd17 	ldw	r7,-12(fp)
 2004054:	e13ffc17 	ldw	r4,-16(fp)
 2004058:	e17ffd17 	ldw	r5,-12(fp)
 200405c:	20080540 	call	2008054 <__muldf3>
 2004060:	1009883a 	mov	r4,r2
 2004064:	180b883a 	mov	r5,r3
 2004068:	2005883a 	mov	r2,r4
 200406c:	2807883a 	mov	r3,r5
 2004070:	e1bffc17 	ldw	r6,-16(fp)
 2004074:	e1fffd17 	ldw	r7,-12(fp)
 2004078:	1009883a 	mov	r4,r2
 200407c:	180b883a 	mov	r5,r3
 2004080:	2006c680 	call	2006c68 <__adddf3>
 2004084:	1009883a 	mov	r4,r2
 2004088:	180b883a 	mov	r5,r3
 200408c:	2005883a 	mov	r2,r4
 2004090:	2807883a 	mov	r3,r5
 2004094:	00015e06 	br	2004610 <__ieee754_sqrt+0x61c>
					   sqrt(-inf)=sNaN */
	} 
    /* take care of zero */
	if(ix0<=0) {
 2004098:	e0bfee17 	ldw	r2,-72(fp)
 200409c:	00802916 	blt	zero,r2,2004144 <__ieee754_sqrt+0x150>
	    if(((ix0&(~sign))|ix1)==0) return x;/* sqrt(+-0) = +-0 */
 20040a0:	e0bff317 	ldw	r2,-52(fp)
 20040a4:	0086303a 	nor	r3,zero,r2
 20040a8:	e0bfee17 	ldw	r2,-72(fp)
 20040ac:	1884703a 	and	r2,r3,r2
 20040b0:	1007883a 	mov	r3,r2
 20040b4:	e0bfec17 	ldw	r2,-80(fp)
 20040b8:	1884b03a 	or	r2,r3,r2
 20040bc:	1000031e 	bne	r2,zero,20040cc <__ieee754_sqrt+0xd8>
 20040c0:	e0bffc17 	ldw	r2,-16(fp)
 20040c4:	e0fffd17 	ldw	r3,-12(fp)
 20040c8:	00015106 	br	2004610 <__ieee754_sqrt+0x61c>
	    else if(ix0<0)
 20040cc:	e0bfee17 	ldw	r2,-72(fp)
 20040d0:	10001c0e 	bge	r2,zero,2004144 <__ieee754_sqrt+0x150>
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
 20040d4:	e1bffc17 	ldw	r6,-16(fp)
 20040d8:	e1fffd17 	ldw	r7,-12(fp)
 20040dc:	e13ffc17 	ldw	r4,-16(fp)
 20040e0:	e17ffd17 	ldw	r5,-12(fp)
 20040e4:	200876c0 	call	200876c <__subdf3>
 20040e8:	1009883a 	mov	r4,r2
 20040ec:	180b883a 	mov	r5,r3
 20040f0:	2021883a 	mov	r16,r4
 20040f4:	2823883a 	mov	r17,r5
 20040f8:	e1bffc17 	ldw	r6,-16(fp)
 20040fc:	e1fffd17 	ldw	r7,-12(fp)
 2004100:	e13ffc17 	ldw	r4,-16(fp)
 2004104:	e17ffd17 	ldw	r5,-12(fp)
 2004108:	200876c0 	call	200876c <__subdf3>
 200410c:	1009883a 	mov	r4,r2
 2004110:	180b883a 	mov	r5,r3
 2004114:	2005883a 	mov	r2,r4
 2004118:	2807883a 	mov	r3,r5
 200411c:	100d883a 	mov	r6,r2
 2004120:	180f883a 	mov	r7,r3
 2004124:	8009883a 	mov	r4,r16
 2004128:	880b883a 	mov	r5,r17
 200412c:	20075140 	call	2007514 <__divdf3>
 2004130:	1009883a 	mov	r4,r2
 2004134:	180b883a 	mov	r5,r3
 2004138:	2005883a 	mov	r2,r4
 200413c:	2807883a 	mov	r3,r5
 2004140:	00013306 	br	2004610 <__ieee754_sqrt+0x61c>
	}
    /* normalize x */
	m = (ix0>>20);
 2004144:	e0bfee17 	ldw	r2,-72(fp)
 2004148:	1005d53a 	srai	r2,r2,20
 200414c:	e0bff115 	stw	r2,-60(fp)
	if(m==0) {				/* subnormal x */
 2004150:	e0bff117 	ldw	r2,-60(fp)
 2004154:	10002a1e 	bne	r2,zero,2004200 <__ieee754_sqrt+0x20c>
	    while(ix0==0) {
 2004158:	00000b06 	br	2004188 <__ieee754_sqrt+0x194>
		m -= 21;
 200415c:	e0bff117 	ldw	r2,-60(fp)
 2004160:	10bffac4 	addi	r2,r2,-21
 2004164:	e0bff115 	stw	r2,-60(fp)
		ix0 |= (ix1>>11); ix1 <<= 21;
 2004168:	e0bfec17 	ldw	r2,-80(fp)
 200416c:	1006d2fa 	srli	r3,r2,11
 2004170:	e0bfee17 	ldw	r2,-72(fp)
 2004174:	1884b03a 	or	r2,r3,r2
 2004178:	e0bfee15 	stw	r2,-72(fp)
 200417c:	e0bfec17 	ldw	r2,-80(fp)
 2004180:	1004957a 	slli	r2,r2,21
 2004184:	e0bfec15 	stw	r2,-80(fp)
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
	}
    /* normalize x */
	m = (ix0>>20);
	if(m==0) {				/* subnormal x */
	    while(ix0==0) {
 2004188:	e0bfee17 	ldw	r2,-72(fp)
 200418c:	103ff326 	beq	r2,zero,200415c <__ieee754_sqrt+0x168>
		m -= 21;
		ix0 |= (ix1>>11); ix1 <<= 21;
	    }
	    for(i=0;(ix0&0x00100000)==0;i++) ix0<<=1;
 2004190:	e03ff215 	stw	zero,-56(fp)
 2004194:	00000606 	br	20041b0 <__ieee754_sqrt+0x1bc>
 2004198:	e0bfee17 	ldw	r2,-72(fp)
 200419c:	1085883a 	add	r2,r2,r2
 20041a0:	e0bfee15 	stw	r2,-72(fp)
 20041a4:	e0bff217 	ldw	r2,-56(fp)
 20041a8:	10800044 	addi	r2,r2,1
 20041ac:	e0bff215 	stw	r2,-56(fp)
 20041b0:	e0bfee17 	ldw	r2,-72(fp)
 20041b4:	1080042c 	andhi	r2,r2,16
 20041b8:	103ff726 	beq	r2,zero,2004198 <__ieee754_sqrt+0x1a4>
	    m -= i-1;
 20041bc:	e0bff217 	ldw	r2,-56(fp)
 20041c0:	10bfffc4 	addi	r2,r2,-1
 20041c4:	e0fff117 	ldw	r3,-60(fp)
 20041c8:	1885c83a 	sub	r2,r3,r2
 20041cc:	e0bff115 	stw	r2,-60(fp)
	    ix0 |= (ix1>>(32-i));
 20041d0:	00c00804 	movi	r3,32
 20041d4:	e0bff217 	ldw	r2,-56(fp)
 20041d8:	1885c83a 	sub	r2,r3,r2
 20041dc:	e0ffec17 	ldw	r3,-80(fp)
 20041e0:	1886d83a 	srl	r3,r3,r2
 20041e4:	e0bfee17 	ldw	r2,-72(fp)
 20041e8:	1884b03a 	or	r2,r3,r2
 20041ec:	e0bfee15 	stw	r2,-72(fp)
	    ix1 <<= i;
 20041f0:	e0ffec17 	ldw	r3,-80(fp)
 20041f4:	e0bff217 	ldw	r2,-56(fp)
 20041f8:	1884983a 	sll	r2,r3,r2
 20041fc:	e0bfec15 	stw	r2,-80(fp)
	}
	m -= 1023;	/* unbias exponent */
 2004200:	e0bff117 	ldw	r2,-60(fp)
 2004204:	10bf0044 	addi	r2,r2,-1023
 2004208:	e0bff115 	stw	r2,-60(fp)
	ix0 = (ix0&0x000fffff)|0x00100000;
 200420c:	e0ffee17 	ldw	r3,-72(fp)
 2004210:	00800434 	movhi	r2,16
 2004214:	10bfffc4 	addi	r2,r2,-1
 2004218:	1884703a 	and	r2,r3,r2
 200421c:	10800434 	orhi	r2,r2,16
 2004220:	e0bfee15 	stw	r2,-72(fp)
	if(m&1){	/* odd m, double x to make it even */
 2004224:	e0bff117 	ldw	r2,-60(fp)
 2004228:	1080004c 	andi	r2,r2,1
 200422c:	10000d26 	beq	r2,zero,2004264 <__ieee754_sqrt+0x270>
	    ix0 += ix0 + ((ix1&sign)>>31);
 2004230:	e0fff317 	ldw	r3,-52(fp)
 2004234:	e0bfec17 	ldw	r2,-80(fp)
 2004238:	1884703a 	and	r2,r3,r2
 200423c:	1006d7fa 	srli	r3,r2,31
 2004240:	e0bfee17 	ldw	r2,-72(fp)
 2004244:	1887883a 	add	r3,r3,r2
 2004248:	e0bfee17 	ldw	r2,-72(fp)
 200424c:	1885883a 	add	r2,r3,r2
 2004250:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2004254:	e0ffec17 	ldw	r3,-80(fp)
 2004258:	e0bfec17 	ldw	r2,-80(fp)
 200425c:	1885883a 	add	r2,r3,r2
 2004260:	e0bfec15 	stw	r2,-80(fp)
	}
	m >>= 1;	/* m = [m/2] */
 2004264:	e0bff117 	ldw	r2,-60(fp)
 2004268:	1005d07a 	srai	r2,r2,1
 200426c:	e0bff115 	stw	r2,-60(fp)

    /* generate sqrt(x) bit by bit */
	ix0 += ix0 + ((ix1&sign)>>31);
 2004270:	e0fff317 	ldw	r3,-52(fp)
 2004274:	e0bfec17 	ldw	r2,-80(fp)
 2004278:	1884703a 	and	r2,r3,r2
 200427c:	1006d7fa 	srli	r3,r2,31
 2004280:	e0bfee17 	ldw	r2,-72(fp)
 2004284:	1887883a 	add	r3,r3,r2
 2004288:	e0bfee17 	ldw	r2,-72(fp)
 200428c:	1885883a 	add	r2,r3,r2
 2004290:	e0bfee15 	stw	r2,-72(fp)
	ix1 += ix1;
 2004294:	e0ffec17 	ldw	r3,-80(fp)
 2004298:	e0bfec17 	ldw	r2,-80(fp)
 200429c:	1885883a 	add	r2,r3,r2
 20042a0:	e0bfec15 	stw	r2,-80(fp)
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
 20042a4:	e03feb15 	stw	zero,-84(fp)
 20042a8:	e03fef15 	stw	zero,-68(fp)
 20042ac:	e0bfef17 	ldw	r2,-68(fp)
 20042b0:	e0bfed15 	stw	r2,-76(fp)
 20042b4:	e0bfed17 	ldw	r2,-76(fp)
 20042b8:	e0bff015 	stw	r2,-64(fp)
	r = 0x00200000;		/* r = moving bit from right to left */
 20042bc:	00800834 	movhi	r2,32
 20042c0:	e0bfea15 	stw	r2,-88(fp)

	while(r!=0) {
 20042c4:	00002306 	br	2004354 <__ieee754_sqrt+0x360>
	    t = s0+r; 
 20042c8:	e0ffef17 	ldw	r3,-68(fp)
 20042cc:	e0bfea17 	ldw	r2,-88(fp)
 20042d0:	1885883a 	add	r2,r3,r2
 20042d4:	e0bff415 	stw	r2,-48(fp)
	    if(t<=ix0) { 
 20042d8:	e0bff417 	ldw	r2,-48(fp)
 20042dc:	e0ffee17 	ldw	r3,-72(fp)
 20042e0:	18800c16 	blt	r3,r2,2004314 <__ieee754_sqrt+0x320>
		s0   = t+r; 
 20042e4:	e0fff417 	ldw	r3,-48(fp)
 20042e8:	e0bfea17 	ldw	r2,-88(fp)
 20042ec:	1885883a 	add	r2,r3,r2
 20042f0:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t; 
 20042f4:	e0ffee17 	ldw	r3,-72(fp)
 20042f8:	e0bff417 	ldw	r2,-48(fp)
 20042fc:	1885c83a 	sub	r2,r3,r2
 2004300:	e0bfee15 	stw	r2,-72(fp)
		q   += r; 
 2004304:	e0fff017 	ldw	r3,-64(fp)
 2004308:	e0bfea17 	ldw	r2,-88(fp)
 200430c:	1885883a 	add	r2,r3,r2
 2004310:	e0bff015 	stw	r2,-64(fp)
	    } 
	    ix0 += ix0 + ((ix1&sign)>>31);
 2004314:	e0fff317 	ldw	r3,-52(fp)
 2004318:	e0bfec17 	ldw	r2,-80(fp)
 200431c:	1884703a 	and	r2,r3,r2
 2004320:	1006d7fa 	srli	r3,r2,31
 2004324:	e0bfee17 	ldw	r2,-72(fp)
 2004328:	1887883a 	add	r3,r3,r2
 200432c:	e0bfee17 	ldw	r2,-72(fp)
 2004330:	1885883a 	add	r2,r3,r2
 2004334:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2004338:	e0ffec17 	ldw	r3,-80(fp)
 200433c:	e0bfec17 	ldw	r2,-80(fp)
 2004340:	1885883a 	add	r2,r3,r2
 2004344:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 2004348:	e0bfea17 	ldw	r2,-88(fp)
 200434c:	1004d07a 	srli	r2,r2,1
 2004350:	e0bfea15 	stw	r2,-88(fp)
	ix0 += ix0 + ((ix1&sign)>>31);
	ix1 += ix1;
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
	r = 0x00200000;		/* r = moving bit from right to left */

	while(r!=0) {
 2004354:	e0bfea17 	ldw	r2,-88(fp)
 2004358:	103fdb1e 	bne	r2,zero,20042c8 <__ieee754_sqrt+0x2d4>
	    ix0 += ix0 + ((ix1&sign)>>31);
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
 200435c:	e0bff317 	ldw	r2,-52(fp)
 2004360:	e0bfea15 	stw	r2,-88(fp)
	while(r!=0) {
 2004364:	00004106 	br	200446c <__ieee754_sqrt+0x478>
	    t1 = s1+r; 
 2004368:	e0ffeb17 	ldw	r3,-84(fp)
 200436c:	e0bfea17 	ldw	r2,-88(fp)
 2004370:	1885883a 	add	r2,r3,r2
 2004374:	e0bff515 	stw	r2,-44(fp)
	    t  = s0;
 2004378:	e0bfef17 	ldw	r2,-68(fp)
 200437c:	e0bff415 	stw	r2,-48(fp)
	    if((t<ix0)||((t==ix0)&&(t1<=ix1))) { 
 2004380:	e0fff417 	ldw	r3,-48(fp)
 2004384:	e0bfee17 	ldw	r2,-72(fp)
 2004388:	18800616 	blt	r3,r2,20043a4 <__ieee754_sqrt+0x3b0>
 200438c:	e0fff417 	ldw	r3,-48(fp)
 2004390:	e0bfee17 	ldw	r2,-72(fp)
 2004394:	1880251e 	bne	r3,r2,200442c <__ieee754_sqrt+0x438>
 2004398:	e0bff517 	ldw	r2,-44(fp)
 200439c:	e0ffec17 	ldw	r3,-80(fp)
 20043a0:	18802236 	bltu	r3,r2,200442c <__ieee754_sqrt+0x438>
		s1  = t1+r;
 20043a4:	e0fff517 	ldw	r3,-44(fp)
 20043a8:	e0bfea17 	ldw	r2,-88(fp)
 20043ac:	1885883a 	add	r2,r3,r2
 20043b0:	e0bfeb15 	stw	r2,-84(fp)
		if(((t1&sign)==sign)&&(s1&sign)==0) s0 += 1;
 20043b4:	e0fff317 	ldw	r3,-52(fp)
 20043b8:	e0bff517 	ldw	r2,-44(fp)
 20043bc:	1886703a 	and	r3,r3,r2
 20043c0:	e0bff317 	ldw	r2,-52(fp)
 20043c4:	1880071e 	bne	r3,r2,20043e4 <__ieee754_sqrt+0x3f0>
 20043c8:	e0fff317 	ldw	r3,-52(fp)
 20043cc:	e0bfeb17 	ldw	r2,-84(fp)
 20043d0:	1884703a 	and	r2,r3,r2
 20043d4:	1000031e 	bne	r2,zero,20043e4 <__ieee754_sqrt+0x3f0>
 20043d8:	e0bfef17 	ldw	r2,-68(fp)
 20043dc:	10800044 	addi	r2,r2,1
 20043e0:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t;
 20043e4:	e0ffee17 	ldw	r3,-72(fp)
 20043e8:	e0bff417 	ldw	r2,-48(fp)
 20043ec:	1885c83a 	sub	r2,r3,r2
 20043f0:	e0bfee15 	stw	r2,-72(fp)
		if (ix1 < t1) ix0 -= 1;
 20043f4:	e0ffec17 	ldw	r3,-80(fp)
 20043f8:	e0bff517 	ldw	r2,-44(fp)
 20043fc:	1880032e 	bgeu	r3,r2,200440c <__ieee754_sqrt+0x418>
 2004400:	e0bfee17 	ldw	r2,-72(fp)
 2004404:	10bfffc4 	addi	r2,r2,-1
 2004408:	e0bfee15 	stw	r2,-72(fp)
		ix1 -= t1;
 200440c:	e0ffec17 	ldw	r3,-80(fp)
 2004410:	e0bff517 	ldw	r2,-44(fp)
 2004414:	1885c83a 	sub	r2,r3,r2
 2004418:	e0bfec15 	stw	r2,-80(fp)
		q1  += r;
 200441c:	e0ffed17 	ldw	r3,-76(fp)
 2004420:	e0bfea17 	ldw	r2,-88(fp)
 2004424:	1885883a 	add	r2,r3,r2
 2004428:	e0bfed15 	stw	r2,-76(fp)
	    }
	    ix0 += ix0 + ((ix1&sign)>>31);
 200442c:	e0fff317 	ldw	r3,-52(fp)
 2004430:	e0bfec17 	ldw	r2,-80(fp)
 2004434:	1884703a 	and	r2,r3,r2
 2004438:	1006d7fa 	srli	r3,r2,31
 200443c:	e0bfee17 	ldw	r2,-72(fp)
 2004440:	1887883a 	add	r3,r3,r2
 2004444:	e0bfee17 	ldw	r2,-72(fp)
 2004448:	1885883a 	add	r2,r3,r2
 200444c:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2004450:	e0ffec17 	ldw	r3,-80(fp)
 2004454:	e0bfec17 	ldw	r2,-80(fp)
 2004458:	1885883a 	add	r2,r3,r2
 200445c:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 2004460:	e0bfea17 	ldw	r2,-88(fp)
 2004464:	1004d07a 	srli	r2,r2,1
 2004468:	e0bfea15 	stw	r2,-88(fp)
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
	while(r!=0) {
 200446c:	e0bfea17 	ldw	r2,-88(fp)
 2004470:	103fbd1e 	bne	r2,zero,2004368 <__ieee754_sqrt+0x374>
	    ix1 += ix1;
	    r>>=1;
	}

    /* use floating add to find out rounding direction */
	if((ix0|ix1)!=0) {
 2004474:	e0ffee17 	ldw	r3,-72(fp)
 2004478:	e0bfec17 	ldw	r2,-80(fp)
 200447c:	1884b03a 	or	r2,r3,r2
 2004480:	10004526 	beq	r2,zero,2004598 <__ieee754_sqrt+0x5a4>
	    z = one-tiny; /* trigger inexact flag */
 2004484:	0011883a 	mov	r8,zero
 2004488:	024ffc34 	movhi	r9,16368
 200448c:	00b0be74 	movhi	r2,49913
 2004490:	10bcd644 	addi	r2,r2,-3239
 2004494:	00c06974 	movhi	r3,421
 2004498:	18db87c4 	addi	r3,r3,28191
 200449c:	100d883a 	mov	r6,r2
 20044a0:	180f883a 	mov	r7,r3
 20044a4:	4009883a 	mov	r4,r8
 20044a8:	480b883a 	mov	r5,r9
 20044ac:	200876c0 	call	200876c <__subdf3>
 20044b0:	1009883a 	mov	r4,r2
 20044b4:	180b883a 	mov	r5,r3
 20044b8:	e13ff615 	stw	r4,-40(fp)
 20044bc:	e17ff715 	stw	r5,-36(fp)
	    if (z>=one) {
 20044c0:	0005883a 	mov	r2,zero
 20044c4:	00cffc34 	movhi	r3,16368
 20044c8:	100d883a 	mov	r6,r2
 20044cc:	180f883a 	mov	r7,r3
 20044d0:	e13ff617 	ldw	r4,-40(fp)
 20044d4:	e17ff717 	ldw	r5,-36(fp)
 20044d8:	2007e840 	call	2007e84 <__gedf2>
 20044dc:	10002e16 	blt	r2,zero,2004598 <__ieee754_sqrt+0x5a4>
	        z = one+tiny;
 20044e0:	0011883a 	mov	r8,zero
 20044e4:	024ffc34 	movhi	r9,16368
 20044e8:	00b0be74 	movhi	r2,49913
 20044ec:	10bcd644 	addi	r2,r2,-3239
 20044f0:	00c06974 	movhi	r3,421
 20044f4:	18db87c4 	addi	r3,r3,28191
 20044f8:	100d883a 	mov	r6,r2
 20044fc:	180f883a 	mov	r7,r3
 2004500:	4009883a 	mov	r4,r8
 2004504:	480b883a 	mov	r5,r9
 2004508:	2006c680 	call	2006c68 <__adddf3>
 200450c:	1009883a 	mov	r4,r2
 2004510:	180b883a 	mov	r5,r3
 2004514:	e13ff615 	stw	r4,-40(fp)
 2004518:	e17ff715 	stw	r5,-36(fp)
	        if (q1==(__uint32_t)0xffffffff) { q1=0; q += 1;}
 200451c:	e0bfed17 	ldw	r2,-76(fp)
 2004520:	10bfffd8 	cmpnei	r2,r2,-1
 2004524:	1000051e 	bne	r2,zero,200453c <__ieee754_sqrt+0x548>
 2004528:	e03fed15 	stw	zero,-76(fp)
 200452c:	e0bff017 	ldw	r2,-64(fp)
 2004530:	10800044 	addi	r2,r2,1
 2004534:	e0bff015 	stw	r2,-64(fp)
 2004538:	00001706 	br	2004598 <__ieee754_sqrt+0x5a4>
		else if (z>one) {
 200453c:	0005883a 	mov	r2,zero
 2004540:	00cffc34 	movhi	r3,16368
 2004544:	100d883a 	mov	r6,r2
 2004548:	180f883a 	mov	r7,r3
 200454c:	e13ff617 	ldw	r4,-40(fp)
 2004550:	e17ff717 	ldw	r5,-36(fp)
 2004554:	2007e840 	call	2007e84 <__gedf2>
 2004558:	00800a0e 	bge	zero,r2,2004584 <__ieee754_sqrt+0x590>
		    if (q1==(__uint32_t)0xfffffffe) q+=1;
 200455c:	e0bfed17 	ldw	r2,-76(fp)
 2004560:	10bfff98 	cmpnei	r2,r2,-2
 2004564:	1000031e 	bne	r2,zero,2004574 <__ieee754_sqrt+0x580>
 2004568:	e0bff017 	ldw	r2,-64(fp)
 200456c:	10800044 	addi	r2,r2,1
 2004570:	e0bff015 	stw	r2,-64(fp)
		    q1+=2; 
 2004574:	e0bfed17 	ldw	r2,-76(fp)
 2004578:	10800084 	addi	r2,r2,2
 200457c:	e0bfed15 	stw	r2,-76(fp)
 2004580:	00000506 	br	2004598 <__ieee754_sqrt+0x5a4>
		} else
	            q1 += (q1&1);
 2004584:	e0bfed17 	ldw	r2,-76(fp)
 2004588:	1080004c 	andi	r2,r2,1
 200458c:	e0ffed17 	ldw	r3,-76(fp)
 2004590:	1885883a 	add	r2,r3,r2
 2004594:	e0bfed15 	stw	r2,-76(fp)
	    }
	}
	ix0 = (q>>1)+0x3fe00000;
 2004598:	e0bff017 	ldw	r2,-64(fp)
 200459c:	1007d07a 	srai	r3,r2,1
 20045a0:	008ff834 	movhi	r2,16352
 20045a4:	1885883a 	add	r2,r3,r2
 20045a8:	e0bfee15 	stw	r2,-72(fp)
	ix1 =  q1>>1;
 20045ac:	e0bfed17 	ldw	r2,-76(fp)
 20045b0:	1004d07a 	srli	r2,r2,1
 20045b4:	e0bfec15 	stw	r2,-80(fp)
	if ((q&1)==1) ix1 |= sign;
 20045b8:	e0bff017 	ldw	r2,-64(fp)
 20045bc:	1080004c 	andi	r2,r2,1
 20045c0:	10000426 	beq	r2,zero,20045d4 <__ieee754_sqrt+0x5e0>
 20045c4:	e0bff317 	ldw	r2,-52(fp)
 20045c8:	e0ffec17 	ldw	r3,-80(fp)
 20045cc:	1884b03a 	or	r2,r3,r2
 20045d0:	e0bfec15 	stw	r2,-80(fp)
	ix0 += (m <<20);
 20045d4:	e0bff117 	ldw	r2,-60(fp)
 20045d8:	1004953a 	slli	r2,r2,20
 20045dc:	e0ffee17 	ldw	r3,-72(fp)
 20045e0:	1885883a 	add	r2,r3,r2
 20045e4:	e0bfee15 	stw	r2,-72(fp)
	INSERT_WORDS(z,ix0,ix1);
 20045e8:	e0bfee17 	ldw	r2,-72(fp)
 20045ec:	e0bffb15 	stw	r2,-20(fp)
 20045f0:	e0bfec17 	ldw	r2,-80(fp)
 20045f4:	e0bffa15 	stw	r2,-24(fp)
 20045f8:	e0bffa17 	ldw	r2,-24(fp)
 20045fc:	e0bff615 	stw	r2,-40(fp)
 2004600:	e0bffb17 	ldw	r2,-20(fp)
 2004604:	e0bff715 	stw	r2,-36(fp)
	return z;
 2004608:	e0bff617 	ldw	r2,-40(fp)
 200460c:	e0fff717 	ldw	r3,-36(fp)
 2004610:	1009883a 	mov	r4,r2
 2004614:	180b883a 	mov	r5,r3
}
 2004618:	2005883a 	mov	r2,r4
 200461c:	2807883a 	mov	r3,r5
 2004620:	e6fffe04 	addi	sp,fp,-8
 2004624:	dfc00317 	ldw	ra,12(sp)
 2004628:	df000217 	ldw	fp,8(sp)
 200462c:	dc400117 	ldw	r17,4(sp)
 2004630:	dc000017 	ldw	r16,0(sp)
 2004634:	dec00404 	addi	sp,sp,16
 2004638:	f800283a 	ret

0200463c <__ieee754_atan2f>:
	float __ieee754_atan2f(float y, float x)
#else
	float __ieee754_atan2f(y,x)
	float  y,x;
#endif
{  
 200463c:	defff004 	addi	sp,sp,-64
 2004640:	dfc00f15 	stw	ra,60(sp)
 2004644:	df000e15 	stw	fp,56(sp)
 2004648:	df000e04 	addi	fp,sp,56
 200464c:	e13ffe15 	stw	r4,-8(fp)
 2004650:	e17fff15 	stw	r5,-4(fp)
	float z;
	__int32_t k,m,hx,hy,ix,iy;

	GET_FLOAT_WORD(hx,x);
 2004654:	e0bfff17 	ldw	r2,-4(fp)
 2004658:	e0bffa15 	stw	r2,-24(fp)
 200465c:	e0bffa17 	ldw	r2,-24(fp)
 2004660:	e0bff315 	stw	r2,-52(fp)
	ix = hx&0x7fffffff;
 2004664:	e0fff317 	ldw	r3,-52(fp)
 2004668:	00a00034 	movhi	r2,32768
 200466c:	10bfffc4 	addi	r2,r2,-1
 2004670:	1884703a 	and	r2,r3,r2
 2004674:	e0bff415 	stw	r2,-48(fp)
	GET_FLOAT_WORD(hy,y);
 2004678:	e0bffe17 	ldw	r2,-8(fp)
 200467c:	e0bffb15 	stw	r2,-20(fp)
 2004680:	e0bffb17 	ldw	r2,-20(fp)
 2004684:	e0bff515 	stw	r2,-44(fp)
	iy = hy&0x7fffffff;
 2004688:	e0fff517 	ldw	r3,-44(fp)
 200468c:	00a00034 	movhi	r2,32768
 2004690:	10bfffc4 	addi	r2,r2,-1
 2004694:	1884703a 	and	r2,r3,r2
 2004698:	e0bff615 	stw	r2,-40(fp)
	if(FLT_UWORD_IS_NAN(ix)||
 200469c:	e0bff417 	ldw	r2,-48(fp)
 20046a0:	00dfe034 	movhi	r3,32640
 20046a4:	18800316 	blt	r3,r2,20046b4 <__ieee754_atan2f+0x78>
 20046a8:	e0bff617 	ldw	r2,-40(fp)
 20046ac:	00dfe034 	movhi	r3,32640
 20046b0:	1880040e 	bge	r3,r2,20046c4 <__ieee754_atan2f+0x88>
	   FLT_UWORD_IS_NAN(iy))	/* x or y is NaN */
	   return x+y;
 20046b4:	e0ffff17 	ldw	r3,-4(fp)
 20046b8:	e0bffe17 	ldw	r2,-8(fp)
 20046bc:	1887ff72 	custom	253,r3,r3,r2
 20046c0:	0000dd06 	br	2004a38 <__ieee754_atan2f+0x3fc>
	if(hx==0x3f800000) return atanf(y);   /* x=1.0 */
 20046c4:	e0fff317 	ldw	r3,-52(fp)
 20046c8:	008fe034 	movhi	r2,16256
 20046cc:	1880041e 	bne	r3,r2,20046e0 <__ieee754_atan2f+0xa4>
 20046d0:	e13ffe17 	ldw	r4,-8(fp)
 20046d4:	20062fc0 	call	20062fc <atanf>
 20046d8:	1007883a 	mov	r3,r2
 20046dc:	0000d606 	br	2004a38 <__ieee754_atan2f+0x3fc>
	m = ((hy>>31)&1)|((hx>>30)&2);	/* 2*sign(x)+sign(y) */
 20046e0:	e0bff517 	ldw	r2,-44(fp)
 20046e4:	1004d7fa 	srli	r2,r2,31
 20046e8:	1007883a 	mov	r3,r2
 20046ec:	e0bff317 	ldw	r2,-52(fp)
 20046f0:	1005d7ba 	srai	r2,r2,30
 20046f4:	1080008c 	andi	r2,r2,2
 20046f8:	1884b03a 	or	r2,r3,r2
 20046fc:	e0bff715 	stw	r2,-36(fp)

    /* when y = 0 */
	if(FLT_UWORD_IS_ZERO(iy)) {
 2004700:	e0bff617 	ldw	r2,-40(fp)
 2004704:	1000191e 	bne	r2,zero,200476c <__ieee754_atan2f+0x130>
	    switch(m) {
 2004708:	e0bff717 	ldw	r2,-36(fp)
 200470c:	10c000a0 	cmpeqi	r3,r2,2
 2004710:	1800091e 	bne	r3,zero,2004738 <__ieee754_atan2f+0xfc>
 2004714:	10c000c8 	cmpgei	r3,r2,3
 2004718:	1800021e 	bne	r3,zero,2004724 <__ieee754_atan2f+0xe8>
 200471c:	10001316 	blt	r2,zero,200476c <__ieee754_atan2f+0x130>
 2004720:	00000306 	br	2004730 <__ieee754_atan2f+0xf4>
 2004724:	108000e0 	cmpeqi	r2,r2,3
 2004728:	1000091e 	bne	r2,zero,2004750 <__ieee754_atan2f+0x114>
 200472c:	00000f06 	br	200476c <__ieee754_atan2f+0x130>
		case 0: 
		case 1: return y; 	/* atan(+-0,+anything)=+-0 */
 2004730:	e0fffe17 	ldw	r3,-8(fp)
 2004734:	0000c006 	br	2004a38 <__ieee754_atan2f+0x3fc>
		case 2: return  pi+tiny;/* atan(+0,-anything) = pi */
 2004738:	00d01274 	movhi	r3,16457
 200473c:	18c3f6c4 	addi	r3,r3,4059
 2004740:	008368b4 	movhi	r2,3490
 2004744:	10909804 	addi	r2,r2,16992
 2004748:	1887ff72 	custom	253,r3,r3,r2
 200474c:	0000ba06 	br	2004a38 <__ieee754_atan2f+0x3fc>
		case 3: return -pi-tiny;/* atan(-0,-anything) =-pi */
 2004750:	00901274 	movhi	r2,16457
 2004754:	1083f6c4 	addi	r2,r2,4059
 2004758:	1007f872 	custom	225,r3,r2,zero
 200475c:	008368b4 	movhi	r2,3490
 2004760:	10909804 	addi	r2,r2,16992
 2004764:	1887ffb2 	custom	254,r3,r3,r2
 2004768:	0000b306 	br	2004a38 <__ieee754_atan2f+0x3fc>
	    }
	}
    /* when x = 0 */
	if(FLT_UWORD_IS_ZERO(ix)) return (hy<0)?  -pi_o_2-tiny: pi_o_2+tiny;
 200476c:	e0bff417 	ldw	r2,-48(fp)
 2004770:	10000f1e 	bne	r2,zero,20047b0 <__ieee754_atan2f+0x174>
 2004774:	e0bff517 	ldw	r2,-44(fp)
 2004778:	1000070e 	bge	r2,zero,2004798 <__ieee754_atan2f+0x15c>
 200477c:	008ff274 	movhi	r2,16329
 2004780:	1083f6c4 	addi	r2,r2,4059
 2004784:	1007f872 	custom	225,r3,r2,zero
 2004788:	008368b4 	movhi	r2,3490
 200478c:	10909804 	addi	r2,r2,16992
 2004790:	1887ffb2 	custom	254,r3,r3,r2
 2004794:	0000a806 	br	2004a38 <__ieee754_atan2f+0x3fc>
 2004798:	00cff274 	movhi	r3,16329
 200479c:	18c3f6c4 	addi	r3,r3,4059
 20047a0:	008368b4 	movhi	r2,3490
 20047a4:	10909804 	addi	r2,r2,16992
 20047a8:	1887ff72 	custom	253,r3,r3,r2
 20047ac:	0000a206 	br	2004a38 <__ieee754_atan2f+0x3fc>
	    
    /* when x is INF */
	if(FLT_UWORD_IS_INFINITE(ix)) {
 20047b0:	e0fff417 	ldw	r3,-48(fp)
 20047b4:	009fe034 	movhi	r2,32640
 20047b8:	18804a1e 	bne	r3,r2,20048e4 <__ieee754_atan2f+0x2a8>
	    if(FLT_UWORD_IS_INFINITE(iy)) {
 20047bc:	e0fff617 	ldw	r3,-40(fp)
 20047c0:	009fe034 	movhi	r2,32640
 20047c4:	1880291e 	bne	r3,r2,200486c <__ieee754_atan2f+0x230>
		switch(m) {
 20047c8:	e0bff717 	ldw	r2,-36(fp)
 20047cc:	10c00060 	cmpeqi	r3,r2,1
 20047d0:	18000f1e 	bne	r3,zero,2004810 <__ieee754_atan2f+0x1d4>
 20047d4:	10c00088 	cmpgei	r3,r2,2
 20047d8:	1800021e 	bne	r3,zero,20047e4 <__ieee754_atan2f+0x1a8>
 20047dc:	10000626 	beq	r2,zero,20047f8 <__ieee754_atan2f+0x1bc>
 20047e0:	00004006 	br	20048e4 <__ieee754_atan2f+0x2a8>
 20047e4:	10c000a0 	cmpeqi	r3,r2,2
 20047e8:	1800101e 	bne	r3,zero,200482c <__ieee754_atan2f+0x1f0>
 20047ec:	108000e0 	cmpeqi	r2,r2,3
 20047f0:	1000161e 	bne	r2,zero,200484c <__ieee754_atan2f+0x210>
 20047f4:	00003b06 	br	20048e4 <__ieee754_atan2f+0x2a8>
		    case 0: return  pi_o_4+tiny;/* atan(+INF,+INF) */
 20047f8:	00cfd274 	movhi	r3,16201
 20047fc:	18c3f6c4 	addi	r3,r3,4059
 2004800:	008368b4 	movhi	r2,3490
 2004804:	10909804 	addi	r2,r2,16992
 2004808:	1887ff72 	custom	253,r3,r3,r2
 200480c:	00008a06 	br	2004a38 <__ieee754_atan2f+0x3fc>
		    case 1: return -pi_o_4-tiny;/* atan(-INF,+INF) */
 2004810:	008fd274 	movhi	r2,16201
 2004814:	1083f6c4 	addi	r2,r2,4059
 2004818:	1007f872 	custom	225,r3,r2,zero
 200481c:	008368b4 	movhi	r2,3490
 2004820:	10909804 	addi	r2,r2,16992
 2004824:	1887ffb2 	custom	254,r3,r3,r2
 2004828:	00008306 	br	2004a38 <__ieee754_atan2f+0x3fc>
		    case 2: return  (float)3.0*pi_o_4+tiny;/*atan(+INF,-INF)*/
 200482c:	008fd274 	movhi	r2,16201
 2004830:	1083f6c4 	addi	r2,r2,4059
 2004834:	00d01034 	movhi	r3,16448
 2004838:	10c7ff32 	custom	252,r3,r2,r3
 200483c:	008368b4 	movhi	r2,3490
 2004840:	10909804 	addi	r2,r2,16992
 2004844:	1887ff72 	custom	253,r3,r3,r2
 2004848:	00007b06 	br	2004a38 <__ieee754_atan2f+0x3fc>
		    case 3: return (float)-3.0*pi_o_4-tiny;/*atan(-INF,-INF)*/
 200484c:	008fd274 	movhi	r2,16201
 2004850:	1083f6c4 	addi	r2,r2,4059
 2004854:	00f01034 	movhi	r3,49216
 2004858:	10c7ff32 	custom	252,r3,r2,r3
 200485c:	008368b4 	movhi	r2,3490
 2004860:	10909804 	addi	r2,r2,16992
 2004864:	1887ffb2 	custom	254,r3,r3,r2
 2004868:	00007306 	br	2004a38 <__ieee754_atan2f+0x3fc>
		}
	    } else {
		switch(m) {
 200486c:	e0bff717 	ldw	r2,-36(fp)
 2004870:	10c00060 	cmpeqi	r3,r2,1
 2004874:	18000b1e 	bne	r3,zero,20048a4 <__ieee754_atan2f+0x268>
 2004878:	10c00088 	cmpgei	r3,r2,2
 200487c:	1800021e 	bne	r3,zero,2004888 <__ieee754_atan2f+0x24c>
 2004880:	10000626 	beq	r2,zero,200489c <__ieee754_atan2f+0x260>
 2004884:	00001706 	br	20048e4 <__ieee754_atan2f+0x2a8>
 2004888:	10c000a0 	cmpeqi	r3,r2,2
 200488c:	1800081e 	bne	r3,zero,20048b0 <__ieee754_atan2f+0x274>
 2004890:	108000e0 	cmpeqi	r2,r2,3
 2004894:	10000c1e 	bne	r2,zero,20048c8 <__ieee754_atan2f+0x28c>
 2004898:	00001206 	br	20048e4 <__ieee754_atan2f+0x2a8>
		    case 0: return  zero  ;	/* atan(+...,+INF) */
 200489c:	0007883a 	mov	r3,zero
 20048a0:	00006506 	br	2004a38 <__ieee754_atan2f+0x3fc>
		    case 1: return -zero  ;	/* atan(-...,+INF) */
 20048a4:	0005883a 	mov	r2,zero
 20048a8:	1007f872 	custom	225,r3,r2,zero
 20048ac:	00006206 	br	2004a38 <__ieee754_atan2f+0x3fc>
		    case 2: return  pi+tiny  ;	/* atan(+...,-INF) */
 20048b0:	00d01274 	movhi	r3,16457
 20048b4:	18c3f6c4 	addi	r3,r3,4059
 20048b8:	008368b4 	movhi	r2,3490
 20048bc:	10909804 	addi	r2,r2,16992
 20048c0:	1887ff72 	custom	253,r3,r3,r2
 20048c4:	00005c06 	br	2004a38 <__ieee754_atan2f+0x3fc>
		    case 3: return -pi-tiny  ;	/* atan(-...,-INF) */
 20048c8:	00901274 	movhi	r2,16457
 20048cc:	1083f6c4 	addi	r2,r2,4059
 20048d0:	1007f872 	custom	225,r3,r2,zero
 20048d4:	008368b4 	movhi	r2,3490
 20048d8:	10909804 	addi	r2,r2,16992
 20048dc:	1887ffb2 	custom	254,r3,r3,r2
 20048e0:	00005506 	br	2004a38 <__ieee754_atan2f+0x3fc>
		}
	    }
	}
    /* when y is INF */
	if(FLT_UWORD_IS_INFINITE(iy)) return (hy<0)? -pi_o_2-tiny: pi_o_2+tiny;
 20048e4:	e0fff617 	ldw	r3,-40(fp)
 20048e8:	009fe034 	movhi	r2,32640
 20048ec:	18800f1e 	bne	r3,r2,200492c <__ieee754_atan2f+0x2f0>
 20048f0:	e0bff517 	ldw	r2,-44(fp)
 20048f4:	1000070e 	bge	r2,zero,2004914 <__ieee754_atan2f+0x2d8>
 20048f8:	008ff274 	movhi	r2,16329
 20048fc:	1083f6c4 	addi	r2,r2,4059
 2004900:	1007f872 	custom	225,r3,r2,zero
 2004904:	008368b4 	movhi	r2,3490
 2004908:	10909804 	addi	r2,r2,16992
 200490c:	1887ffb2 	custom	254,r3,r3,r2
 2004910:	00004906 	br	2004a38 <__ieee754_atan2f+0x3fc>
 2004914:	00cff274 	movhi	r3,16329
 2004918:	18c3f6c4 	addi	r3,r3,4059
 200491c:	008368b4 	movhi	r2,3490
 2004920:	10909804 	addi	r2,r2,16992
 2004924:	1887ff72 	custom	253,r3,r3,r2
 2004928:	00004306 	br	2004a38 <__ieee754_atan2f+0x3fc>

    /* compute y/x */
	k = (iy-ix)>>23;
 200492c:	e0fff617 	ldw	r3,-40(fp)
 2004930:	e0bff417 	ldw	r2,-48(fp)
 2004934:	1885c83a 	sub	r2,r3,r2
 2004938:	1005d5fa 	srai	r2,r2,23
 200493c:	e0bff815 	stw	r2,-32(fp)
	if(k > 60) z=pi_o_2+(float)0.5*pi_lo; 	/* |y/x| >  2**60 */
 2004940:	e0bff817 	ldw	r2,-32(fp)
 2004944:	10800f50 	cmplti	r2,r2,61
 2004948:	1000091e 	bne	r2,zero,2004970 <__ieee754_atan2f+0x334>
 200494c:	00acef34 	movhi	r2,46012
 2004950:	10af4b84 	addi	r2,r2,-17106
 2004954:	00cfc034 	movhi	r3,16128
 2004958:	10c7ff32 	custom	252,r3,r2,r3
 200495c:	008ff274 	movhi	r2,16329
 2004960:	1083f6c4 	addi	r2,r2,4059
 2004964:	1885ff72 	custom	253,r2,r3,r2
 2004968:	e0bff215 	stw	r2,-56(fp)
 200496c:	00001006 	br	20049b0 <__ieee754_atan2f+0x374>
	else if(hx<0&&k<-60) z=0.0; 	/* |y|/x < -2**60 */
 2004970:	e0bff317 	ldw	r2,-52(fp)
 2004974:	1000050e 	bge	r2,zero,200498c <__ieee754_atan2f+0x350>
 2004978:	e0bff817 	ldw	r2,-32(fp)
 200497c:	10bff108 	cmpgei	r2,r2,-60
 2004980:	1000021e 	bne	r2,zero,200498c <__ieee754_atan2f+0x350>
 2004984:	e03ff215 	stw	zero,-56(fp)
 2004988:	00000906 	br	20049b0 <__ieee754_atan2f+0x374>
	else z=atanf(fabsf(y/x));	/* safe to do y/x */
 200498c:	e0fffe17 	ldw	r3,-8(fp)
 2004990:	e0bfff17 	ldw	r2,-4(fp)
 2004994:	1885fff2 	custom	255,r2,r3,r2
 2004998:	1009883a 	mov	r4,r2
 200499c:	200666c0 	call	200666c <fabsf>
 20049a0:	1007883a 	mov	r3,r2
 20049a4:	1809883a 	mov	r4,r3
 20049a8:	20062fc0 	call	20062fc <atanf>
 20049ac:	e0bff215 	stw	r2,-56(fp)
	switch (m) {
 20049b0:	e0bff717 	ldw	r2,-36(fp)
 20049b4:	10c00060 	cmpeqi	r3,r2,1
 20049b8:	1800051e 	bne	r3,zero,20049d0 <__ieee754_atan2f+0x394>
 20049bc:	10c000a0 	cmpeqi	r3,r2,2
 20049c0:	18000e1e 	bne	r3,zero,20049fc <__ieee754_atan2f+0x3c0>
 20049c4:	1000151e 	bne	r2,zero,2004a1c <__ieee754_atan2f+0x3e0>
	    case 0: return       z  ;	/* atan(+,+) */
 20049c8:	e0fff217 	ldw	r3,-56(fp)
 20049cc:	00001a06 	br	2004a38 <__ieee754_atan2f+0x3fc>
	    case 1: {
	    	      __uint32_t zh;
		      GET_FLOAT_WORD(zh,z);
 20049d0:	e0bff217 	ldw	r2,-56(fp)
 20049d4:	e0bffc15 	stw	r2,-16(fp)
 20049d8:	e0bffc17 	ldw	r2,-16(fp)
 20049dc:	e0bff915 	stw	r2,-28(fp)
		      SET_FLOAT_WORD(z,zh ^ 0x80000000);
 20049e0:	e0bff917 	ldw	r2,-28(fp)
 20049e4:	10a0003c 	xorhi	r2,r2,32768
 20049e8:	e0bffd15 	stw	r2,-12(fp)
 20049ec:	e0bffd17 	ldw	r2,-12(fp)
 20049f0:	e0bff215 	stw	r2,-56(fp)
		    }
		    return       z  ;	/* atan(-,+) */
 20049f4:	e0fff217 	ldw	r3,-56(fp)
 20049f8:	00000f06 	br	2004a38 <__ieee754_atan2f+0x3fc>
	    case 2: return  pi-(z-pi_lo);/* atan(+,-) */
 20049fc:	00901274 	movhi	r2,16457
 2004a00:	1083f6c4 	addi	r2,r2,4059
 2004a04:	00ecef34 	movhi	r3,46012
 2004a08:	18ef4b84 	addi	r3,r3,-17106
 2004a0c:	e13ff217 	ldw	r4,-56(fp)
 2004a10:	20c7ffb2 	custom	254,r3,r4,r3
 2004a14:	10c7ffb2 	custom	254,r3,r2,r3
 2004a18:	00000706 	br	2004a38 <__ieee754_atan2f+0x3fc>
	    default: /* case 3 */
	    	    return  (z-pi_lo)-pi;/* atan(-,-) */
 2004a1c:	00acef34 	movhi	r2,46012
 2004a20:	10af4b84 	addi	r2,r2,-17106
 2004a24:	e0fff217 	ldw	r3,-56(fp)
 2004a28:	1887ffb2 	custom	254,r3,r3,r2
 2004a2c:	00901274 	movhi	r2,16457
 2004a30:	1083f6c4 	addi	r2,r2,4059
 2004a34:	1887ffb2 	custom	254,r3,r3,r2
 2004a38:	1805883a 	mov	r2,r3
	}
}
 2004a3c:	e037883a 	mov	sp,fp
 2004a40:	dfc00117 	ldw	ra,4(sp)
 2004a44:	df000017 	ldw	fp,0(sp)
 2004a48:	dec00204 	addi	sp,sp,8
 2004a4c:	f800283a 	ret

02004a50 <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
 2004a50:	deffe604 	addi	sp,sp,-104
 2004a54:	dfc01915 	stw	ra,100(sp)
 2004a58:	df001815 	stw	fp,96(sp)
 2004a5c:	df001804 	addi	fp,sp,96
 2004a60:	e13ffe15 	stw	r4,-8(fp)
 2004a64:	e17fff15 	stw	r5,-4(fp)
	float z,w,t,r,fn;
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
 2004a68:	e0bffe17 	ldw	r2,-8(fp)
 2004a6c:	e0bffa15 	stw	r2,-24(fp)
 2004a70:	e0bffa17 	ldw	r2,-24(fp)
 2004a74:	e0bfef15 	stw	r2,-68(fp)
	ix = hx&0x7fffffff;
 2004a78:	e0ffef17 	ldw	r3,-68(fp)
 2004a7c:	00a00034 	movhi	r2,32768
 2004a80:	10bfffc4 	addi	r2,r2,-1
 2004a84:	1884703a 	and	r2,r3,r2
 2004a88:	e0bff015 	stw	r2,-64(fp)
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
 2004a8c:	e0fff017 	ldw	r3,-64(fp)
 2004a90:	008fd274 	movhi	r2,16201
 2004a94:	1083f604 	addi	r2,r2,4056
 2004a98:	10c00816 	blt	r2,r3,2004abc <__ieee754_rem_pio2f+0x6c>
	    {y[0] = x; y[1] = 0; return 0;}
 2004a9c:	e0bfff17 	ldw	r2,-4(fp)
 2004aa0:	e0fffe17 	ldw	r3,-8(fp)
 2004aa4:	10c00015 	stw	r3,0(r2)
 2004aa8:	e0bfff17 	ldw	r2,-4(fp)
 2004aac:	10800104 	addi	r2,r2,4
 2004ab0:	10000015 	stw	zero,0(r2)
 2004ab4:	0005883a 	mov	r2,zero
 2004ab8:	00017d06 	br	20050b0 <__ieee754_rem_pio2f+0x660>
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
 2004abc:	e0fff017 	ldw	r3,-64(fp)
 2004ac0:	009005f4 	movhi	r2,16407
 2004ac4:	10b2f8c4 	addi	r2,r2,-13341
 2004ac8:	10c06816 	blt	r2,r3,2004c6c <__ieee754_rem_pio2f+0x21c>
	    if(hx>0) { 
 2004acc:	e0bfef17 	ldw	r2,-68(fp)
 2004ad0:	0080330e 	bge	zero,r2,2004ba0 <__ieee754_rem_pio2f+0x150>
		z = x - pio2_1;
 2004ad4:	008ff274 	movhi	r2,16329
 2004ad8:	1083e004 	addi	r2,r2,3968
 2004adc:	e0fffe17 	ldw	r3,-8(fp)
 2004ae0:	1885ffb2 	custom	254,r2,r3,r2
 2004ae4:	e0bfea15 	stw	r2,-88(fp)
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 2004ae8:	e0fff017 	ldw	r3,-64(fp)
 2004aec:	00bffc04 	movi	r2,-16
 2004af0:	1886703a 	and	r3,r3,r2
 2004af4:	008ff274 	movhi	r2,16329
 2004af8:	1083f404 	addi	r2,r2,4048
 2004afc:	18801126 	beq	r3,r2,2004b44 <__ieee754_rem_pio2f+0xf4>
		    y[0] = z - pio2_1t;
 2004b00:	008dcd74 	movhi	r2,14133
 2004b04:	109110c4 	addi	r2,r2,17475
 2004b08:	e0ffea17 	ldw	r3,-88(fp)
 2004b0c:	1887ffb2 	custom	254,r3,r3,r2
 2004b10:	e0bfff17 	ldw	r2,-4(fp)
 2004b14:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])-pio2_1t;
 2004b18:	e0bfff17 	ldw	r2,-4(fp)
 2004b1c:	10c00104 	addi	r3,r2,4
 2004b20:	e13fff17 	ldw	r4,-4(fp)
 2004b24:	20800017 	ldw	r2,0(r4)
 2004b28:	e13fea17 	ldw	r4,-88(fp)
 2004b2c:	2089ffb2 	custom	254,r4,r4,r2
 2004b30:	008dcd74 	movhi	r2,14133
 2004b34:	109110c4 	addi	r2,r2,17475
 2004b38:	2085ffb2 	custom	254,r2,r4,r2
 2004b3c:	18800015 	stw	r2,0(r3)
 2004b40:	00001506 	br	2004b98 <__ieee754_rem_pio2f+0x148>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
 2004b44:	008dcd74 	movhi	r2,14133
 2004b48:	10910004 	addi	r2,r2,17408
 2004b4c:	e0ffea17 	ldw	r3,-88(fp)
 2004b50:	1885ffb2 	custom	254,r2,r3,r2
 2004b54:	e0bfea15 	stw	r2,-88(fp)
		    y[0] = z - pio2_2t;
 2004b58:	008ba1b4 	movhi	r2,11910
 2004b5c:	10a8c204 	addi	r2,r2,-23800
 2004b60:	e0ffea17 	ldw	r3,-88(fp)
 2004b64:	1887ffb2 	custom	254,r3,r3,r2
 2004b68:	e0bfff17 	ldw	r2,-4(fp)
 2004b6c:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])-pio2_2t;
 2004b70:	e0bfff17 	ldw	r2,-4(fp)
 2004b74:	10c00104 	addi	r3,r2,4
 2004b78:	e13fff17 	ldw	r4,-4(fp)
 2004b7c:	20800017 	ldw	r2,0(r4)
 2004b80:	e13fea17 	ldw	r4,-88(fp)
 2004b84:	2089ffb2 	custom	254,r4,r4,r2
 2004b88:	008ba1b4 	movhi	r2,11910
 2004b8c:	10a8c204 	addi	r2,r2,-23800
 2004b90:	2085ffb2 	custom	254,r2,r4,r2
 2004b94:	18800015 	stw	r2,0(r3)
		}
		return 1;
 2004b98:	00800044 	movi	r2,1
 2004b9c:	00014406 	br	20050b0 <__ieee754_rem_pio2f+0x660>
	    } else {	/* negative x */
		z = x + pio2_1;
 2004ba0:	008ff274 	movhi	r2,16329
 2004ba4:	1083e004 	addi	r2,r2,3968
 2004ba8:	e0fffe17 	ldw	r3,-8(fp)
 2004bac:	1885ff72 	custom	253,r2,r3,r2
 2004bb0:	e0bfea15 	stw	r2,-88(fp)
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 2004bb4:	e0fff017 	ldw	r3,-64(fp)
 2004bb8:	00bffc04 	movi	r2,-16
 2004bbc:	1886703a 	and	r3,r3,r2
 2004bc0:	008ff274 	movhi	r2,16329
 2004bc4:	1083f404 	addi	r2,r2,4048
 2004bc8:	18801126 	beq	r3,r2,2004c10 <__ieee754_rem_pio2f+0x1c0>
		    y[0] = z + pio2_1t;
 2004bcc:	008dcd74 	movhi	r2,14133
 2004bd0:	109110c4 	addi	r2,r2,17475
 2004bd4:	e0ffea17 	ldw	r3,-88(fp)
 2004bd8:	10c7ff72 	custom	253,r3,r2,r3
 2004bdc:	e0bfff17 	ldw	r2,-4(fp)
 2004be0:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])+pio2_1t;
 2004be4:	e0bfff17 	ldw	r2,-4(fp)
 2004be8:	10c00104 	addi	r3,r2,4
 2004bec:	e13fff17 	ldw	r4,-4(fp)
 2004bf0:	20800017 	ldw	r2,0(r4)
 2004bf4:	e13fea17 	ldw	r4,-88(fp)
 2004bf8:	2089ffb2 	custom	254,r4,r4,r2
 2004bfc:	008dcd74 	movhi	r2,14133
 2004c00:	109110c4 	addi	r2,r2,17475
 2004c04:	2085ff72 	custom	253,r2,r4,r2
 2004c08:	18800015 	stw	r2,0(r3)
 2004c0c:	00001506 	br	2004c64 <__ieee754_rem_pio2f+0x214>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
 2004c10:	008dcd74 	movhi	r2,14133
 2004c14:	10910004 	addi	r2,r2,17408
 2004c18:	e0ffea17 	ldw	r3,-88(fp)
 2004c1c:	1885ff72 	custom	253,r2,r3,r2
 2004c20:	e0bfea15 	stw	r2,-88(fp)
		    y[0] = z + pio2_2t;
 2004c24:	008ba1b4 	movhi	r2,11910
 2004c28:	10a8c204 	addi	r2,r2,-23800
 2004c2c:	e0ffea17 	ldw	r3,-88(fp)
 2004c30:	10c7ff72 	custom	253,r3,r2,r3
 2004c34:	e0bfff17 	ldw	r2,-4(fp)
 2004c38:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])+pio2_2t;
 2004c3c:	e0bfff17 	ldw	r2,-4(fp)
 2004c40:	10c00104 	addi	r3,r2,4
 2004c44:	e13fff17 	ldw	r4,-4(fp)
 2004c48:	20800017 	ldw	r2,0(r4)
 2004c4c:	e13fea17 	ldw	r4,-88(fp)
 2004c50:	2089ffb2 	custom	254,r4,r4,r2
 2004c54:	008ba1b4 	movhi	r2,11910
 2004c58:	10a8c204 	addi	r2,r2,-23800
 2004c5c:	2085ff72 	custom	253,r2,r4,r2
 2004c60:	18800015 	stw	r2,0(r3)
		}
		return -1;
 2004c64:	00bfffc4 	movi	r2,-1
 2004c68:	00011106 	br	20050b0 <__ieee754_rem_pio2f+0x660>
	    }
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
 2004c6c:	e0fff017 	ldw	r3,-64(fp)
 2004c70:	0090d274 	movhi	r2,17225
 2004c74:	1083e004 	addi	r2,r2,3968
 2004c78:	10c0a516 	blt	r2,r3,2004f10 <__ieee754_rem_pio2f+0x4c0>
	    t  = fabsf(x);
 2004c7c:	e13ffe17 	ldw	r4,-8(fp)
 2004c80:	200666c0 	call	200666c <fabsf>
 2004c84:	e0bff115 	stw	r2,-60(fp)
	    n  = (__int32_t) (t*invpio2+half);
 2004c88:	008fc8f4 	movhi	r2,16163
 2004c8c:	10be6104 	addi	r2,r2,-1660
 2004c90:	e0fff117 	ldw	r3,-60(fp)
 2004c94:	10c7ff32 	custom	252,r3,r2,r3
 2004c98:	008fc034 	movhi	r2,16128
 2004c9c:	1885ff72 	custom	253,r2,r3,r2
 2004ca0:	1005fe72 	custom	249,r2,r2,zero
 2004ca4:	e0bff215 	stw	r2,-56(fp)
	    fn = (float)n;
 2004ca8:	e0bff217 	ldw	r2,-56(fp)
 2004cac:	1005feb2 	custom	250,r2,r2,zero
 2004cb0:	e0bff315 	stw	r2,-52(fp)
	    r  = t-fn*pio2_1;
 2004cb4:	008ff274 	movhi	r2,16329
 2004cb8:	1083e004 	addi	r2,r2,3968
 2004cbc:	e0fff317 	ldw	r3,-52(fp)
 2004cc0:	10c5ff32 	custom	252,r2,r2,r3
 2004cc4:	e0fff117 	ldw	r3,-60(fp)
 2004cc8:	1885ffb2 	custom	254,r2,r3,r2
 2004ccc:	e0bfec15 	stw	r2,-80(fp)
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
 2004cd0:	008dcd74 	movhi	r2,14133
 2004cd4:	109110c4 	addi	r2,r2,17475
 2004cd8:	e0fff317 	ldw	r3,-52(fp)
 2004cdc:	1885ff32 	custom	252,r2,r3,r2
 2004ce0:	e0bfeb15 	stw	r2,-84(fp)
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
 2004ce4:	e0bff217 	ldw	r2,-56(fp)
 2004ce8:	10800808 	cmpgei	r2,r2,32
 2004cec:	1000121e 	bne	r2,zero,2004d38 <__ieee754_rem_pio2f+0x2e8>
 2004cf0:	e0fff017 	ldw	r3,-64(fp)
 2004cf4:	00bfc004 	movi	r2,-256
 2004cf8:	1888703a 	and	r4,r3,r2
 2004cfc:	e0bff217 	ldw	r2,-56(fp)
 2004d00:	10ffffc4 	addi	r3,r2,-1
 2004d04:	008080b4 	movhi	r2,514
 2004d08:	10898104 	addi	r2,r2,9732
 2004d0c:	18c7883a 	add	r3,r3,r3
 2004d10:	18c7883a 	add	r3,r3,r3
 2004d14:	10c5883a 	add	r2,r2,r3
 2004d18:	10800017 	ldw	r2,0(r2)
 2004d1c:	20800626 	beq	r4,r2,2004d38 <__ieee754_rem_pio2f+0x2e8>
		y[0] = r-w;	/* quick check no cancellation */
 2004d20:	e0ffec17 	ldw	r3,-80(fp)
 2004d24:	e0bfeb17 	ldw	r2,-84(fp)
 2004d28:	1887ffb2 	custom	254,r3,r3,r2
 2004d2c:	e0bfff17 	ldw	r2,-4(fp)
 2004d30:	10c00015 	stw	r3,0(r2)
 2004d34:	00005a06 	br	2004ea0 <__ieee754_rem_pio2f+0x450>
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
 2004d38:	e0bff017 	ldw	r2,-64(fp)
 2004d3c:	1005d5fa 	srai	r2,r2,23
 2004d40:	e0bff415 	stw	r2,-48(fp)
	        y[0] = r-w; 
 2004d44:	e0ffec17 	ldw	r3,-80(fp)
 2004d48:	e0bfeb17 	ldw	r2,-84(fp)
 2004d4c:	1887ffb2 	custom	254,r3,r3,r2
 2004d50:	e0bfff17 	ldw	r2,-4(fp)
 2004d54:	10c00015 	stw	r3,0(r2)
		GET_FLOAT_WORD(high,y[0]);
 2004d58:	e0ffff17 	ldw	r3,-4(fp)
 2004d5c:	18800017 	ldw	r2,0(r3)
 2004d60:	e0bffb15 	stw	r2,-20(fp)
 2004d64:	e0bffb17 	ldw	r2,-20(fp)
 2004d68:	e0bff515 	stw	r2,-44(fp)
	        i = j-((high>>23)&0xff);
 2004d6c:	e0fff417 	ldw	r3,-48(fp)
 2004d70:	e0bff517 	ldw	r2,-44(fp)
 2004d74:	1004d5fa 	srli	r2,r2,23
 2004d78:	10803fcc 	andi	r2,r2,255
 2004d7c:	1885c83a 	sub	r2,r3,r2
 2004d80:	e0bfed15 	stw	r2,-76(fp)
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
 2004d84:	e0bfed17 	ldw	r2,-76(fp)
 2004d88:	10800250 	cmplti	r2,r2,9
 2004d8c:	1000441e 	bne	r2,zero,2004ea0 <__ieee754_rem_pio2f+0x450>
		    t  = r;
 2004d90:	e0bfec17 	ldw	r2,-80(fp)
 2004d94:	e0bff115 	stw	r2,-60(fp)
		    w  = fn*pio2_2;	
 2004d98:	008dcd74 	movhi	r2,14133
 2004d9c:	10910004 	addi	r2,r2,17408
 2004da0:	e0fff317 	ldw	r3,-52(fp)
 2004da4:	1885ff32 	custom	252,r2,r3,r2
 2004da8:	e0bfeb15 	stw	r2,-84(fp)
		    r  = t-w;
 2004dac:	e0fff117 	ldw	r3,-60(fp)
 2004db0:	e0bfeb17 	ldw	r2,-84(fp)
 2004db4:	1885ffb2 	custom	254,r2,r3,r2
 2004db8:	e0bfec15 	stw	r2,-80(fp)
		    w  = fn*pio2_2t-((t-r)-w);	
 2004dbc:	008ba1b4 	movhi	r2,11910
 2004dc0:	10a8c204 	addi	r2,r2,-23800
 2004dc4:	e0fff317 	ldw	r3,-52(fp)
 2004dc8:	10c7ff32 	custom	252,r3,r2,r3
 2004dcc:	e13ff117 	ldw	r4,-60(fp)
 2004dd0:	e0bfec17 	ldw	r2,-80(fp)
 2004dd4:	2089ffb2 	custom	254,r4,r4,r2
 2004dd8:	e0bfeb17 	ldw	r2,-84(fp)
 2004ddc:	2085ffb2 	custom	254,r2,r4,r2
 2004de0:	1885ffb2 	custom	254,r2,r3,r2
 2004de4:	e0bfeb15 	stw	r2,-84(fp)
		    y[0] = r-w;
 2004de8:	e0ffec17 	ldw	r3,-80(fp)
 2004dec:	e0bfeb17 	ldw	r2,-84(fp)
 2004df0:	1887ffb2 	custom	254,r3,r3,r2
 2004df4:	e0bfff17 	ldw	r2,-4(fp)
 2004df8:	10c00015 	stw	r3,0(r2)
		    GET_FLOAT_WORD(high,y[0]);
 2004dfc:	e0ffff17 	ldw	r3,-4(fp)
 2004e00:	18800017 	ldw	r2,0(r3)
 2004e04:	e0bffc15 	stw	r2,-16(fp)
 2004e08:	e0bffc17 	ldw	r2,-16(fp)
 2004e0c:	e0bff515 	stw	r2,-44(fp)
		    i = j-((high>>23)&0xff);
 2004e10:	e0fff417 	ldw	r3,-48(fp)
 2004e14:	e0bff517 	ldw	r2,-44(fp)
 2004e18:	1004d5fa 	srli	r2,r2,23
 2004e1c:	10803fcc 	andi	r2,r2,255
 2004e20:	1885c83a 	sub	r2,r3,r2
 2004e24:	e0bfed15 	stw	r2,-76(fp)
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
 2004e28:	e0bfed17 	ldw	r2,-76(fp)
 2004e2c:	10800690 	cmplti	r2,r2,26
 2004e30:	10001b1e 	bne	r2,zero,2004ea0 <__ieee754_rem_pio2f+0x450>
		    	t  = r;	/* will cover all possible cases */
 2004e34:	e0bfec17 	ldw	r2,-80(fp)
 2004e38:	e0bff115 	stw	r2,-60(fp)
		    	w  = fn*pio2_3;	
 2004e3c:	008ba1b4 	movhi	r2,11910
 2004e40:	10a8c004 	addi	r2,r2,-23808
 2004e44:	e0fff317 	ldw	r3,-52(fp)
 2004e48:	1885ff32 	custom	252,r2,r3,r2
 2004e4c:	e0bfeb15 	stw	r2,-84(fp)
		    	r  = t-w;
 2004e50:	e0fff117 	ldw	r3,-60(fp)
 2004e54:	e0bfeb17 	ldw	r2,-84(fp)
 2004e58:	1885ffb2 	custom	254,r2,r3,r2
 2004e5c:	e0bfec15 	stw	r2,-80(fp)
		    	w  = fn*pio2_3t-((t-r)-w);	
 2004e60:	00892374 	movhi	r2,9357
 2004e64:	108c4c84 	addi	r2,r2,12594
 2004e68:	e0fff317 	ldw	r3,-52(fp)
 2004e6c:	10c7ff32 	custom	252,r3,r2,r3
 2004e70:	e13ff117 	ldw	r4,-60(fp)
 2004e74:	e0bfec17 	ldw	r2,-80(fp)
 2004e78:	2089ffb2 	custom	254,r4,r4,r2
 2004e7c:	e0bfeb17 	ldw	r2,-84(fp)
 2004e80:	2085ffb2 	custom	254,r2,r4,r2
 2004e84:	1885ffb2 	custom	254,r2,r3,r2
 2004e88:	e0bfeb15 	stw	r2,-84(fp)
		    	y[0] = r-w;
 2004e8c:	e0ffec17 	ldw	r3,-80(fp)
 2004e90:	e0bfeb17 	ldw	r2,-84(fp)
 2004e94:	1887ffb2 	custom	254,r3,r3,r2
 2004e98:	e0bfff17 	ldw	r2,-4(fp)
 2004e9c:	10c00015 	stw	r3,0(r2)
		    }
		}
	    }
	    y[1] = (r-y[0])-w;
 2004ea0:	e0bfff17 	ldw	r2,-4(fp)
 2004ea4:	10800104 	addi	r2,r2,4
 2004ea8:	e13fff17 	ldw	r4,-4(fp)
 2004eac:	20c00017 	ldw	r3,0(r4)
 2004eb0:	e13fec17 	ldw	r4,-80(fp)
 2004eb4:	20c9ffb2 	custom	254,r4,r4,r3
 2004eb8:	e0ffeb17 	ldw	r3,-84(fp)
 2004ebc:	20c7ffb2 	custom	254,r3,r4,r3
 2004ec0:	10c00015 	stw	r3,0(r2)
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
 2004ec4:	e0bfef17 	ldw	r2,-68(fp)
 2004ec8:	10000f0e 	bge	r2,zero,2004f08 <__ieee754_rem_pio2f+0x4b8>
 2004ecc:	e0ffff17 	ldw	r3,-4(fp)
 2004ed0:	18800017 	ldw	r2,0(r3)
 2004ed4:	1007f872 	custom	225,r3,r2,zero
 2004ed8:	e0bfff17 	ldw	r2,-4(fp)
 2004edc:	10c00015 	stw	r3,0(r2)
 2004ee0:	e0bfff17 	ldw	r2,-4(fp)
 2004ee4:	10800104 	addi	r2,r2,4
 2004ee8:	e0ffff17 	ldw	r3,-4(fp)
 2004eec:	19000104 	addi	r4,r3,4
 2004ef0:	20c00017 	ldw	r3,0(r4)
 2004ef4:	1807f872 	custom	225,r3,r3,zero
 2004ef8:	10c00015 	stw	r3,0(r2)
 2004efc:	e0bff217 	ldw	r2,-56(fp)
 2004f00:	0085c83a 	sub	r2,zero,r2
 2004f04:	00006a06 	br	20050b0 <__ieee754_rem_pio2f+0x660>
	    else	 return n;
 2004f08:	e0bff217 	ldw	r2,-56(fp)
 2004f0c:	00006806 	br	20050b0 <__ieee754_rem_pio2f+0x660>
	}
    /* 
     * all other (large) arguments
     */
	if(!FLT_UWORD_IS_FINITE(ix)) {
 2004f10:	e0fff017 	ldw	r3,-64(fp)
 2004f14:	009fe034 	movhi	r2,32640
 2004f18:	18800b16 	blt	r3,r2,2004f48 <__ieee754_rem_pio2f+0x4f8>
	    y[0]=y[1]=x-x; return 0;
 2004f1c:	e0bfff17 	ldw	r2,-4(fp)
 2004f20:	10800104 	addi	r2,r2,4
 2004f24:	e13ffe17 	ldw	r4,-8(fp)
 2004f28:	e0fffe17 	ldw	r3,-8(fp)
 2004f2c:	20c7ffb2 	custom	254,r3,r4,r3
 2004f30:	10c00015 	stw	r3,0(r2)
 2004f34:	10c00017 	ldw	r3,0(r2)
 2004f38:	e0bfff17 	ldw	r2,-4(fp)
 2004f3c:	10c00015 	stw	r3,0(r2)
 2004f40:	0005883a 	mov	r2,zero
 2004f44:	00005a06 	br	20050b0 <__ieee754_rem_pio2f+0x660>
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
 2004f48:	e0bff017 	ldw	r2,-64(fp)
 2004f4c:	1005d5fa 	srai	r2,r2,23
 2004f50:	10bfde84 	addi	r2,r2,-134
 2004f54:	e0bff615 	stw	r2,-40(fp)
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
 2004f58:	e0bff617 	ldw	r2,-40(fp)
 2004f5c:	100495fa 	slli	r2,r2,23
 2004f60:	e0fff017 	ldw	r3,-64(fp)
 2004f64:	1885c83a 	sub	r2,r3,r2
 2004f68:	e0bffd15 	stw	r2,-12(fp)
 2004f6c:	e0bffd17 	ldw	r2,-12(fp)
 2004f70:	e0bfea15 	stw	r2,-88(fp)
	for(i=0;i<2;i++) {
 2004f74:	e03fed15 	stw	zero,-76(fp)
 2004f78:	00001906 	br	2004fe0 <__ieee754_rem_pio2f+0x590>
		tx[i] = (float)((__int32_t)(z));
 2004f7c:	e0ffea17 	ldw	r3,-88(fp)
 2004f80:	1805fe72 	custom	249,r2,r3,zero
 2004f84:	1007feb2 	custom	250,r3,r2,zero
 2004f88:	e0bfed17 	ldw	r2,-76(fp)
 2004f8c:	1085883a 	add	r2,r2,r2
 2004f90:	1085883a 	add	r2,r2,r2
 2004f94:	e13fea04 	addi	r4,fp,-88
 2004f98:	2085883a 	add	r2,r4,r2
 2004f9c:	10800d04 	addi	r2,r2,52
 2004fa0:	10c00015 	stw	r3,0(r2)
		z     = (z-tx[i])*two8;
 2004fa4:	e0bfed17 	ldw	r2,-76(fp)
 2004fa8:	1085883a 	add	r2,r2,r2
 2004fac:	1085883a 	add	r2,r2,r2
 2004fb0:	e0ffea04 	addi	r3,fp,-88
 2004fb4:	1885883a 	add	r2,r3,r2
 2004fb8:	10c00d04 	addi	r3,r2,52
 2004fbc:	18800017 	ldw	r2,0(r3)
 2004fc0:	e0ffea17 	ldw	r3,-88(fp)
 2004fc4:	1887ffb2 	custom	254,r3,r3,r2
 2004fc8:	0090e034 	movhi	r2,17280
 2004fcc:	1885ff32 	custom	252,r2,r3,r2
 2004fd0:	e0bfea15 	stw	r2,-88(fp)
	    y[0]=y[1]=x-x; return 0;
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
	for(i=0;i<2;i++) {
 2004fd4:	e0bfed17 	ldw	r2,-76(fp)
 2004fd8:	10800044 	addi	r2,r2,1
 2004fdc:	e0bfed15 	stw	r2,-76(fp)
 2004fe0:	e0bfed17 	ldw	r2,-76(fp)
 2004fe4:	10800090 	cmplti	r2,r2,2
 2004fe8:	103fe41e 	bne	r2,zero,2004f7c <__ieee754_rem_pio2f+0x52c>
		tx[i] = (float)((__int32_t)(z));
		z     = (z-tx[i])*two8;
	}
	tx[2] = z;
 2004fec:	e0bfea17 	ldw	r2,-88(fp)
 2004ff0:	e0bff915 	stw	r2,-28(fp)
	nx = 3;
 2004ff4:	008000c4 	movi	r2,3
 2004ff8:	e0bfee15 	stw	r2,-72(fp)
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
 2004ffc:	00000306 	br	200500c <__ieee754_rem_pio2f+0x5bc>
 2005000:	e0bfee17 	ldw	r2,-72(fp)
 2005004:	10bfffc4 	addi	r2,r2,-1
 2005008:	e0bfee15 	stw	r2,-72(fp)
 200500c:	e0bfee17 	ldw	r2,-72(fp)
 2005010:	10bfffc4 	addi	r2,r2,-1
 2005014:	1085883a 	add	r2,r2,r2
 2005018:	1085883a 	add	r2,r2,r2
 200501c:	e13fea04 	addi	r4,fp,-88
 2005020:	2085883a 	add	r2,r4,r2
 2005024:	10c00d04 	addi	r3,r2,52
 2005028:	18800017 	ldw	r2,0(r3)
 200502c:	0007883a 	mov	r3,zero
 2005030:	10c5f8f2 	custom	227,r2,r2,r3
 2005034:	103ff21e 	bne	r2,zero,2005000 <__ieee754_rem_pio2f+0x5b0>
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
 2005038:	e0fff704 	addi	r3,fp,-36
 200503c:	008080b4 	movhi	r2,514
 2005040:	1088bb04 	addi	r2,r2,8940
 2005044:	d8800115 	stw	r2,4(sp)
 2005048:	00800084 	movi	r2,2
 200504c:	d8800015 	stw	r2,0(sp)
 2005050:	e1ffee17 	ldw	r7,-72(fp)
 2005054:	e1bff617 	ldw	r6,-40(fp)
 2005058:	e17fff17 	ldw	r5,-4(fp)
 200505c:	1809883a 	mov	r4,r3
 2005060:	20052880 	call	2005288 <__kernel_rem_pio2f>
 2005064:	e0bff215 	stw	r2,-56(fp)
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
 2005068:	e0bfef17 	ldw	r2,-68(fp)
 200506c:	10000f0e 	bge	r2,zero,20050ac <__ieee754_rem_pio2f+0x65c>
 2005070:	e0ffff17 	ldw	r3,-4(fp)
 2005074:	18800017 	ldw	r2,0(r3)
 2005078:	1007f872 	custom	225,r3,r2,zero
 200507c:	e0bfff17 	ldw	r2,-4(fp)
 2005080:	10c00015 	stw	r3,0(r2)
 2005084:	e0bfff17 	ldw	r2,-4(fp)
 2005088:	10800104 	addi	r2,r2,4
 200508c:	e0ffff17 	ldw	r3,-4(fp)
 2005090:	19000104 	addi	r4,r3,4
 2005094:	20c00017 	ldw	r3,0(r4)
 2005098:	1807f872 	custom	225,r3,r3,zero
 200509c:	10c00015 	stw	r3,0(r2)
 20050a0:	e0bff217 	ldw	r2,-56(fp)
 20050a4:	0085c83a 	sub	r2,zero,r2
 20050a8:	00000106 	br	20050b0 <__ieee754_rem_pio2f+0x660>
	return n;
 20050ac:	e0bff217 	ldw	r2,-56(fp)
}
 20050b0:	e037883a 	mov	sp,fp
 20050b4:	dfc00117 	ldw	ra,4(sp)
 20050b8:	df000017 	ldw	fp,0(sp)
 20050bc:	dec00204 	addi	sp,sp,8
 20050c0:	f800283a 	ret

020050c4 <__kernel_cosf>:
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
 20050c4:	defff504 	addi	sp,sp,-44
 20050c8:	df000a15 	stw	fp,40(sp)
 20050cc:	df000a04 	addi	fp,sp,40
 20050d0:	e13ffe15 	stw	r4,-8(fp)
 20050d4:	e17fff15 	stw	r5,-4(fp)
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
 20050d8:	e0bffe17 	ldw	r2,-8(fp)
 20050dc:	e0bffc15 	stw	r2,-16(fp)
 20050e0:	e0bffc17 	ldw	r2,-16(fp)
 20050e4:	e0bff715 	stw	r2,-36(fp)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
 20050e8:	e0fff717 	ldw	r3,-36(fp)
 20050ec:	00a00034 	movhi	r2,32768
 20050f0:	10bfffc4 	addi	r2,r2,-1
 20050f4:	1884703a 	and	r2,r3,r2
 20050f8:	e0bff715 	stw	r2,-36(fp)
	if(ix<0x32000000) {			/* if x < 2**27 */
 20050fc:	e0fff717 	ldw	r3,-36(fp)
 2005100:	008c8034 	movhi	r2,12800
 2005104:	1880050e 	bge	r3,r2,200511c <__kernel_cosf+0x58>
	    if(((int)x)==0) return one;		/* generate inexact */
 2005108:	e0fffe17 	ldw	r3,-8(fp)
 200510c:	1805fe72 	custom	249,r2,r3,zero
 2005110:	1000021e 	bne	r2,zero,200511c <__kernel_cosf+0x58>
 2005114:	008fe034 	movhi	r2,16256
 2005118:	00005506 	br	2005270 <__kernel_cosf+0x1ac>
	}
	z  = x*x;
 200511c:	e0fffe17 	ldw	r3,-8(fp)
 2005120:	e0bffe17 	ldw	r2,-8(fp)
 2005124:	1885ff32 	custom	252,r2,r3,r2
 2005128:	e0bff815 	stw	r2,-32(fp)
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 200512c:	00ab5234 	movhi	r2,44360
 2005130:	10b5d384 	addi	r2,r2,-10418
 2005134:	e0fff817 	ldw	r3,-32(fp)
 2005138:	10c7ff32 	custom	252,r3,r2,r3
 200513c:	008c43f4 	movhi	r2,12559
 2005140:	109d3d84 	addi	r2,r2,29942
 2005144:	1887ff72 	custom	253,r3,r3,r2
 2005148:	e0bff817 	ldw	r2,-32(fp)
 200514c:	1887ff32 	custom	252,r3,r3,r2
 2005150:	00ad2534 	movhi	r2,46228
 2005154:	10bc9f04 	addi	r2,r2,-3460
 2005158:	1887ff72 	custom	253,r3,r3,r2
 200515c:	e0bff817 	ldw	r2,-32(fp)
 2005160:	1887ff32 	custom	252,r3,r3,r2
 2005164:	008df434 	movhi	r2,14288
 2005168:	10834044 	addi	r2,r2,3329
 200516c:	1887ff72 	custom	253,r3,r3,r2
 2005170:	e0bff817 	ldw	r2,-32(fp)
 2005174:	1887ff32 	custom	252,r3,r3,r2
 2005178:	00aeadb4 	movhi	r2,47798
 200517c:	1082d844 	addi	r2,r2,2913
 2005180:	1887ff72 	custom	253,r3,r3,r2
 2005184:	e0bff817 	ldw	r2,-32(fp)
 2005188:	1887ff32 	custom	252,r3,r3,r2
 200518c:	008f4af4 	movhi	r2,15659
 2005190:	10aaaac4 	addi	r2,r2,-21845
 2005194:	1887ff72 	custom	253,r3,r3,r2
 2005198:	e0bff817 	ldw	r2,-32(fp)
 200519c:	1885ff32 	custom	252,r2,r3,r2
 20051a0:	e0bff915 	stw	r2,-28(fp)
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
 20051a4:	e0fff717 	ldw	r3,-36(fp)
 20051a8:	008fa6b4 	movhi	r2,16026
 20051ac:	10a66644 	addi	r2,r2,-26215
 20051b0:	10c00e16 	blt	r2,r3,20051ec <__kernel_cosf+0x128>
	    return one - ((float)0.5*z - (z*r - x*y));
 20051b4:	00cfe034 	movhi	r3,16256
 20051b8:	e13ff817 	ldw	r4,-32(fp)
 20051bc:	008fc034 	movhi	r2,16128
 20051c0:	2089ff32 	custom	252,r4,r4,r2
 20051c4:	e17ff817 	ldw	r5,-32(fp)
 20051c8:	e0bff917 	ldw	r2,-28(fp)
 20051cc:	288bff32 	custom	252,r5,r5,r2
 20051d0:	e1bffe17 	ldw	r6,-8(fp)
 20051d4:	e0bfff17 	ldw	r2,-4(fp)
 20051d8:	3085ff32 	custom	252,r2,r6,r2
 20051dc:	2885ffb2 	custom	254,r2,r5,r2
 20051e0:	2085ffb2 	custom	254,r2,r4,r2
 20051e4:	1885ffb2 	custom	254,r2,r3,r2
 20051e8:	00002106 	br	2005270 <__kernel_cosf+0x1ac>
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
 20051ec:	e0bff717 	ldw	r2,-36(fp)
 20051f0:	00cfd234 	movhi	r3,16200
 20051f4:	1880030e 	bge	r3,r2,2005204 <__kernel_cosf+0x140>
		qx = (float)0.28125;
 20051f8:	008fa434 	movhi	r2,16016
 20051fc:	e0bff615 	stw	r2,-40(fp)
 2005200:	00000606 	br	200521c <__kernel_cosf+0x158>
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
 2005204:	e0fff717 	ldw	r3,-36(fp)
 2005208:	00bfc034 	movhi	r2,65280
 200520c:	1885883a 	add	r2,r3,r2
 2005210:	e0bffd15 	stw	r2,-12(fp)
 2005214:	e0bffd17 	ldw	r2,-12(fp)
 2005218:	e0bff615 	stw	r2,-40(fp)
	    }
	    hz = (float)0.5*z-qx;
 200521c:	e0fff817 	ldw	r3,-32(fp)
 2005220:	008fc034 	movhi	r2,16128
 2005224:	1887ff32 	custom	252,r3,r3,r2
 2005228:	e0bff617 	ldw	r2,-40(fp)
 200522c:	1885ffb2 	custom	254,r2,r3,r2
 2005230:	e0bffa15 	stw	r2,-24(fp)
	    a  = one-qx;
 2005234:	00cfe034 	movhi	r3,16256
 2005238:	e0bff617 	ldw	r2,-40(fp)
 200523c:	1885ffb2 	custom	254,r2,r3,r2
 2005240:	e0bffb15 	stw	r2,-20(fp)
	    return a - (hz - (z*r-x*y));
 2005244:	e0fff817 	ldw	r3,-32(fp)
 2005248:	e0bff917 	ldw	r2,-28(fp)
 200524c:	1887ff32 	custom	252,r3,r3,r2
 2005250:	e13ffe17 	ldw	r4,-8(fp)
 2005254:	e0bfff17 	ldw	r2,-4(fp)
 2005258:	2085ff32 	custom	252,r2,r4,r2
 200525c:	1885ffb2 	custom	254,r2,r3,r2
 2005260:	e0fffa17 	ldw	r3,-24(fp)
 2005264:	1885ffb2 	custom	254,r2,r3,r2
 2005268:	e0fffb17 	ldw	r3,-20(fp)
 200526c:	1885ffb2 	custom	254,r2,r3,r2
 2005270:	1007883a 	mov	r3,r2
	}
}
 2005274:	1805883a 	mov	r2,r3
 2005278:	e037883a 	mov	sp,fp
 200527c:	df000017 	ldw	fp,0(sp)
 2005280:	dec00104 	addi	sp,sp,4
 2005284:	f800283a 	ret

02005288 <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
 2005288:	deff9b04 	addi	sp,sp,-404
 200528c:	dfc06415 	stw	ra,400(sp)
 2005290:	df006315 	stw	fp,396(sp)
 2005294:	df006304 	addi	fp,sp,396
 2005298:	e13ffc15 	stw	r4,-16(fp)
 200529c:	e17ffd15 	stw	r5,-12(fp)
 20052a0:	e1bffe15 	stw	r6,-8(fp)
 20052a4:	e1ffff15 	stw	r7,-4(fp)
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
 20052a8:	008080b4 	movhi	r2,514
 20052ac:	1089a104 	addi	r2,r2,9860
 20052b0:	e0c00217 	ldw	r3,8(fp)
 20052b4:	18c7883a 	add	r3,r3,r3
 20052b8:	18c7883a 	add	r3,r3,r3
 20052bc:	10c5883a 	add	r2,r2,r3
 20052c0:	10800017 	ldw	r2,0(r2)
 20052c4:	e0bfa815 	stw	r2,-352(fp)
	jp = jk;
 20052c8:	e0bfa817 	ldw	r2,-352(fp)
 20052cc:	e0bfa915 	stw	r2,-348(fp)

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
 20052d0:	e0bfff17 	ldw	r2,-4(fp)
 20052d4:	10bfffc4 	addi	r2,r2,-1
 20052d8:	e0bfaa15 	stw	r2,-344(fp)
	jv = (e0-3)/8; if(jv<0) jv=0;
 20052dc:	e0bffe17 	ldw	r2,-8(fp)
 20052e0:	10bfff44 	addi	r2,r2,-3
 20052e4:	1000010e 	bge	r2,zero,20052ec <__kernel_rem_pio2f+0x64>
 20052e8:	108001c4 	addi	r2,r2,7
 20052ec:	1005d0fa 	srai	r2,r2,3
 20052f0:	e0bf9e15 	stw	r2,-392(fp)
 20052f4:	e0bf9e17 	ldw	r2,-392(fp)
 20052f8:	1000010e 	bge	r2,zero,2005300 <__kernel_rem_pio2f+0x78>
 20052fc:	e03f9e15 	stw	zero,-392(fp)
	q0 =  e0-8*(jv+1);
 2005300:	e0bf9e17 	ldw	r2,-392(fp)
 2005304:	10800044 	addi	r2,r2,1
 2005308:	100490fa 	slli	r2,r2,3
 200530c:	e0fffe17 	ldw	r3,-8(fp)
 2005310:	1885c83a 	sub	r2,r3,r2
 2005314:	e0bfa415 	stw	r2,-368(fp)

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
 2005318:	e0ff9e17 	ldw	r3,-392(fp)
 200531c:	e0bfaa17 	ldw	r2,-344(fp)
 2005320:	1885c83a 	sub	r2,r3,r2
 2005324:	e0bfa215 	stw	r2,-376(fp)
 2005328:	e0ffaa17 	ldw	r3,-344(fp)
 200532c:	e0bfa817 	ldw	r2,-352(fp)
 2005330:	1885883a 	add	r2,r3,r2
 2005334:	e0bfab15 	stw	r2,-340(fp)
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
 2005338:	e03fa115 	stw	zero,-380(fp)
 200533c:	00001906 	br	20053a4 <__kernel_rem_pio2f+0x11c>
 2005340:	e0bfa217 	ldw	r2,-376(fp)
 2005344:	10000916 	blt	r2,zero,200536c <__kernel_rem_pio2f+0xe4>
 2005348:	e0bfa217 	ldw	r2,-376(fp)
 200534c:	1085883a 	add	r2,r2,r2
 2005350:	1085883a 	add	r2,r2,r2
 2005354:	1007883a 	mov	r3,r2
 2005358:	e0800317 	ldw	r2,12(fp)
 200535c:	10c5883a 	add	r2,r2,r3
 2005360:	10800017 	ldw	r2,0(r2)
 2005364:	1005feb2 	custom	250,r2,r2,zero
 2005368:	00000106 	br	2005370 <__kernel_rem_pio2f+0xe8>
 200536c:	0005883a 	mov	r2,zero
 2005370:	e0ffa117 	ldw	r3,-380(fp)
 2005374:	18c7883a 	add	r3,r3,r3
 2005378:	18c7883a 	add	r3,r3,r3
 200537c:	e13f9d04 	addi	r4,fp,-396
 2005380:	20c7883a 	add	r3,r4,r3
 2005384:	18c02304 	addi	r3,r3,140
 2005388:	18800015 	stw	r2,0(r3)
 200538c:	e0bfa117 	ldw	r2,-380(fp)
 2005390:	10800044 	addi	r2,r2,1
 2005394:	e0bfa115 	stw	r2,-380(fp)
 2005398:	e0bfa217 	ldw	r2,-376(fp)
 200539c:	10800044 	addi	r2,r2,1
 20053a0:	e0bfa215 	stw	r2,-376(fp)
 20053a4:	e0bfa117 	ldw	r2,-380(fp)
 20053a8:	e0ffab17 	ldw	r3,-340(fp)
 20053ac:	18bfe40e 	bge	r3,r2,2005340 <__kernel_rem_pio2f+0xb8>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 20053b0:	e03fa115 	stw	zero,-380(fp)
 20053b4:	00002a06 	br	2005460 <__kernel_rem_pio2f+0x1d8>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
 20053b8:	e03fa215 	stw	zero,-376(fp)
 20053bc:	e03fa715 	stw	zero,-356(fp)
 20053c0:	00001906 	br	2005428 <__kernel_rem_pio2f+0x1a0>
 20053c4:	e0bfa217 	ldw	r2,-376(fp)
 20053c8:	1085883a 	add	r2,r2,r2
 20053cc:	1085883a 	add	r2,r2,r2
 20053d0:	1007883a 	mov	r3,r2
 20053d4:	e0bffc17 	ldw	r2,-16(fp)
 20053d8:	10c5883a 	add	r2,r2,r3
 20053dc:	10c00017 	ldw	r3,0(r2)
 20053e0:	e13faa17 	ldw	r4,-344(fp)
 20053e4:	e0bfa117 	ldw	r2,-380(fp)
 20053e8:	2089883a 	add	r4,r4,r2
 20053ec:	e0bfa217 	ldw	r2,-376(fp)
 20053f0:	2085c83a 	sub	r2,r4,r2
 20053f4:	1085883a 	add	r2,r2,r2
 20053f8:	1085883a 	add	r2,r2,r2
 20053fc:	e13f9d04 	addi	r4,fp,-396
 2005400:	2085883a 	add	r2,r4,r2
 2005404:	11002304 	addi	r4,r2,140
 2005408:	20800017 	ldw	r2,0(r4)
 200540c:	1885ff32 	custom	252,r2,r3,r2
 2005410:	e0ffa717 	ldw	r3,-356(fp)
 2005414:	1885ff72 	custom	253,r2,r3,r2
 2005418:	e0bfa715 	stw	r2,-356(fp)
 200541c:	e0bfa217 	ldw	r2,-376(fp)
 2005420:	10800044 	addi	r2,r2,1
 2005424:	e0bfa215 	stw	r2,-376(fp)
 2005428:	e0bfa217 	ldw	r2,-376(fp)
 200542c:	e0ffaa17 	ldw	r3,-344(fp)
 2005430:	18bfe40e 	bge	r3,r2,20053c4 <__kernel_rem_pio2f+0x13c>
 2005434:	e0bfa117 	ldw	r2,-380(fp)
 2005438:	1085883a 	add	r2,r2,r2
 200543c:	1085883a 	add	r2,r2,r2
 2005440:	e0ff9d04 	addi	r3,fp,-396
 2005444:	1885883a 	add	r2,r3,r2
 2005448:	10804b04 	addi	r2,r2,300
 200544c:	e0ffa717 	ldw	r3,-356(fp)
 2005450:	10c00015 	stw	r3,0(r2)
    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 2005454:	e0bfa117 	ldw	r2,-380(fp)
 2005458:	10800044 	addi	r2,r2,1
 200545c:	e0bfa115 	stw	r2,-380(fp)
 2005460:	e0bfa117 	ldw	r2,-380(fp)
 2005464:	e0ffa817 	ldw	r3,-352(fp)
 2005468:	18bfd30e 	bge	r3,r2,20053b8 <__kernel_rem_pio2f+0x130>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
	}

	jz = jk;
 200546c:	e0bfa817 	ldw	r2,-352(fp)
 2005470:	e0bf9d15 	stw	r2,-396(fp)
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 2005474:	e03fa115 	stw	zero,-380(fp)
 2005478:	e0bf9d17 	ldw	r2,-396(fp)
 200547c:	e0bfa215 	stw	r2,-376(fp)
 2005480:	e0bf9d17 	ldw	r2,-396(fp)
 2005484:	1085883a 	add	r2,r2,r2
 2005488:	1085883a 	add	r2,r2,r2
 200548c:	e13f9d04 	addi	r4,fp,-396
 2005490:	2085883a 	add	r2,r4,r2
 2005494:	10804b04 	addi	r2,r2,300
 2005498:	10800017 	ldw	r2,0(r2)
 200549c:	e0bfa615 	stw	r2,-360(fp)
 20054a0:	00002406 	br	2005534 <__kernel_rem_pio2f+0x2ac>
	    fw    =  (float)((__int32_t)(twon8* z));
 20054a4:	00cee034 	movhi	r3,15232
 20054a8:	e0bfa617 	ldw	r2,-360(fp)
 20054ac:	1885ff32 	custom	252,r2,r3,r2
 20054b0:	1005fe72 	custom	249,r2,r2,zero
 20054b4:	1005feb2 	custom	250,r2,r2,zero
 20054b8:	e0bfa715 	stw	r2,-356(fp)
	    iq[i] =  (__int32_t)(z-two8*fw);
 20054bc:	00d0e034 	movhi	r3,17280
 20054c0:	e0bfa717 	ldw	r2,-356(fp)
 20054c4:	1885ff32 	custom	252,r2,r3,r2
 20054c8:	e0ffa617 	ldw	r3,-360(fp)
 20054cc:	1885ffb2 	custom	254,r2,r3,r2
 20054d0:	1007fe72 	custom	249,r3,r2,zero
 20054d4:	e0bfa117 	ldw	r2,-380(fp)
 20054d8:	1085883a 	add	r2,r2,r2
 20054dc:	1085883a 	add	r2,r2,r2
 20054e0:	e13f9d04 	addi	r4,fp,-396
 20054e4:	2085883a 	add	r2,r4,r2
 20054e8:	10800f04 	addi	r2,r2,60
 20054ec:	10c00015 	stw	r3,0(r2)
	    z     =  q[j-1]+fw;
 20054f0:	e0bfa217 	ldw	r2,-376(fp)
 20054f4:	10bfffc4 	addi	r2,r2,-1
 20054f8:	1085883a 	add	r2,r2,r2
 20054fc:	1085883a 	add	r2,r2,r2
 2005500:	e0ff9d04 	addi	r3,fp,-396
 2005504:	1885883a 	add	r2,r3,r2
 2005508:	10804b04 	addi	r2,r2,300
 200550c:	10c00017 	ldw	r3,0(r2)
 2005510:	e0bfa717 	ldw	r2,-356(fp)
 2005514:	1885ff72 	custom	253,r2,r3,r2
 2005518:	e0bfa615 	stw	r2,-360(fp)
	}

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 200551c:	e0bfa117 	ldw	r2,-380(fp)
 2005520:	10800044 	addi	r2,r2,1
 2005524:	e0bfa115 	stw	r2,-380(fp)
 2005528:	e0bfa217 	ldw	r2,-376(fp)
 200552c:	10bfffc4 	addi	r2,r2,-1
 2005530:	e0bfa215 	stw	r2,-376(fp)
 2005534:	e0bfa217 	ldw	r2,-376(fp)
 2005538:	00bfda16 	blt	zero,r2,20054a4 <__kernel_rem_pio2f+0x21c>
	    iq[i] =  (__int32_t)(z-two8*fw);
	    z     =  q[j-1]+fw;
	}

    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
 200553c:	e17fa417 	ldw	r5,-368(fp)
 2005540:	e13fa617 	ldw	r4,-360(fp)
 2005544:	20068280 	call	2006828 <scalbnf>
 2005548:	e0bfa615 	stw	r2,-360(fp)
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
 200554c:	e0ffa617 	ldw	r3,-360(fp)
 2005550:	008f8034 	movhi	r2,15872
 2005554:	1885ff32 	custom	252,r2,r3,r2
 2005558:	1009883a 	mov	r4,r2
 200555c:	20066c40 	call	20066c4 <floorf>
 2005560:	1007883a 	mov	r3,r2
 2005564:	00904034 	movhi	r2,16640
 2005568:	1885ff32 	custom	252,r2,r3,r2
 200556c:	e0ffa617 	ldw	r3,-360(fp)
 2005570:	1885ffb2 	custom	254,r2,r3,r2
 2005574:	e0bfa615 	stw	r2,-360(fp)
	n  = (__int32_t) z;
 2005578:	e13fa617 	ldw	r4,-360(fp)
 200557c:	2005fe72 	custom	249,r2,r4,zero
 2005580:	e0bfa015 	stw	r2,-384(fp)
	z -= (float)n;
 2005584:	e0bfa017 	ldw	r2,-384(fp)
 2005588:	1005feb2 	custom	250,r2,r2,zero
 200558c:	e0ffa617 	ldw	r3,-360(fp)
 2005590:	1885ffb2 	custom	254,r2,r3,r2
 2005594:	e0bfa615 	stw	r2,-360(fp)
	ih = 0;
 2005598:	e03fa515 	stw	zero,-364(fp)
	if(q0>0) {	/* need iq[jz-1] to determine n */
 200559c:	e0bfa417 	ldw	r2,-368(fp)
 20055a0:	0080350e 	bge	zero,r2,2005678 <__kernel_rem_pio2f+0x3f0>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
 20055a4:	e0bf9d17 	ldw	r2,-396(fp)
 20055a8:	10bfffc4 	addi	r2,r2,-1
 20055ac:	1085883a 	add	r2,r2,r2
 20055b0:	1085883a 	add	r2,r2,r2
 20055b4:	e0ff9d04 	addi	r3,fp,-396
 20055b8:	1885883a 	add	r2,r3,r2
 20055bc:	10800f04 	addi	r2,r2,60
 20055c0:	10c00017 	ldw	r3,0(r2)
 20055c4:	01000204 	movi	r4,8
 20055c8:	e0bfa417 	ldw	r2,-368(fp)
 20055cc:	2085c83a 	sub	r2,r4,r2
 20055d0:	1885d83a 	sra	r2,r3,r2
 20055d4:	e0bfa115 	stw	r2,-380(fp)
 20055d8:	e0ffa017 	ldw	r3,-384(fp)
 20055dc:	e0bfa117 	ldw	r2,-380(fp)
 20055e0:	1885883a 	add	r2,r3,r2
 20055e4:	e0bfa015 	stw	r2,-384(fp)
	    iq[jz-1] -= i<<(8-q0);
 20055e8:	e0bf9d17 	ldw	r2,-396(fp)
 20055ec:	10bfffc4 	addi	r2,r2,-1
 20055f0:	e0ff9d17 	ldw	r3,-396(fp)
 20055f4:	18ffffc4 	addi	r3,r3,-1
 20055f8:	18c7883a 	add	r3,r3,r3
 20055fc:	18c7883a 	add	r3,r3,r3
 2005600:	e13f9d04 	addi	r4,fp,-396
 2005604:	20c7883a 	add	r3,r4,r3
 2005608:	18c00f04 	addi	r3,r3,60
 200560c:	19000017 	ldw	r4,0(r3)
 2005610:	01400204 	movi	r5,8
 2005614:	e0ffa417 	ldw	r3,-368(fp)
 2005618:	28c7c83a 	sub	r3,r5,r3
 200561c:	e17fa117 	ldw	r5,-380(fp)
 2005620:	28c6983a 	sll	r3,r5,r3
 2005624:	20c7c83a 	sub	r3,r4,r3
 2005628:	1085883a 	add	r2,r2,r2
 200562c:	1085883a 	add	r2,r2,r2
 2005630:	e13f9d04 	addi	r4,fp,-396
 2005634:	2085883a 	add	r2,r4,r2
 2005638:	10800f04 	addi	r2,r2,60
 200563c:	10c00015 	stw	r3,0(r2)
	    ih = iq[jz-1]>>(7-q0);
 2005640:	e0bf9d17 	ldw	r2,-396(fp)
 2005644:	10bfffc4 	addi	r2,r2,-1
 2005648:	1085883a 	add	r2,r2,r2
 200564c:	1085883a 	add	r2,r2,r2
 2005650:	e0ff9d04 	addi	r3,fp,-396
 2005654:	1885883a 	add	r2,r3,r2
 2005658:	10800f04 	addi	r2,r2,60
 200565c:	10c00017 	ldw	r3,0(r2)
 2005660:	010001c4 	movi	r4,7
 2005664:	e0bfa417 	ldw	r2,-368(fp)
 2005668:	2085c83a 	sub	r2,r4,r2
 200566c:	1885d83a 	sra	r2,r3,r2
 2005670:	e0bfa515 	stw	r2,-364(fp)
 2005674:	00001306 	br	20056c4 <__kernel_rem_pio2f+0x43c>
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
 2005678:	e0bfa417 	ldw	r2,-368(fp)
 200567c:	10000b1e 	bne	r2,zero,20056ac <__kernel_rem_pio2f+0x424>
 2005680:	e0bf9d17 	ldw	r2,-396(fp)
 2005684:	10bfffc4 	addi	r2,r2,-1
 2005688:	1085883a 	add	r2,r2,r2
 200568c:	1085883a 	add	r2,r2,r2
 2005690:	e13f9d04 	addi	r4,fp,-396
 2005694:	2085883a 	add	r2,r4,r2
 2005698:	10800f04 	addi	r2,r2,60
 200569c:	10800017 	ldw	r2,0(r2)
 20056a0:	1005d23a 	srai	r2,r2,8
 20056a4:	e0bfa515 	stw	r2,-364(fp)
 20056a8:	00000606 	br	20056c4 <__kernel_rem_pio2f+0x43c>
	else if(z>=(float)0.5) ih=2;
 20056ac:	e0ffa617 	ldw	r3,-360(fp)
 20056b0:	008fc034 	movhi	r2,16128
 20056b4:	1885f932 	custom	228,r2,r3,r2
 20056b8:	10000226 	beq	r2,zero,20056c4 <__kernel_rem_pio2f+0x43c>
 20056bc:	00800084 	movi	r2,2
 20056c0:	e0bfa515 	stw	r2,-364(fp)

	if(ih>0) {	/* q > 0.5 */
 20056c4:	e0bfa517 	ldw	r2,-364(fp)
 20056c8:	00806c0e 	bge	zero,r2,200587c <__kernel_rem_pio2f+0x5f4>
	    n += 1; carry = 0;
 20056cc:	e0bfa017 	ldw	r2,-384(fp)
 20056d0:	10800044 	addi	r2,r2,1
 20056d4:	e0bfa015 	stw	r2,-384(fp)
 20056d8:	e03f9f15 	stw	zero,-388(fp)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 20056dc:	e03fa115 	stw	zero,-380(fp)
 20056e0:	00002606 	br	200577c <__kernel_rem_pio2f+0x4f4>
		j = iq[i];
 20056e4:	e0bfa117 	ldw	r2,-380(fp)
 20056e8:	1085883a 	add	r2,r2,r2
 20056ec:	1085883a 	add	r2,r2,r2
 20056f0:	e0ff9d04 	addi	r3,fp,-396
 20056f4:	1885883a 	add	r2,r3,r2
 20056f8:	10800f04 	addi	r2,r2,60
 20056fc:	10800017 	ldw	r2,0(r2)
 2005700:	e0bfa215 	stw	r2,-376(fp)
		if(carry==0) {
 2005704:	e0bf9f17 	ldw	r2,-388(fp)
 2005708:	10000f1e 	bne	r2,zero,2005748 <__kernel_rem_pio2f+0x4c0>
		    if(j!=0) {
 200570c:	e0bfa217 	ldw	r2,-376(fp)
 2005710:	10001726 	beq	r2,zero,2005770 <__kernel_rem_pio2f+0x4e8>
			carry = 1; iq[i] = 0x100- j;
 2005714:	00800044 	movi	r2,1
 2005718:	e0bf9f15 	stw	r2,-388(fp)
 200571c:	00c04004 	movi	r3,256
 2005720:	e0bfa217 	ldw	r2,-376(fp)
 2005724:	1887c83a 	sub	r3,r3,r2
 2005728:	e0bfa117 	ldw	r2,-380(fp)
 200572c:	1085883a 	add	r2,r2,r2
 2005730:	1085883a 	add	r2,r2,r2
 2005734:	e13f9d04 	addi	r4,fp,-396
 2005738:	2085883a 	add	r2,r4,r2
 200573c:	10800f04 	addi	r2,r2,60
 2005740:	10c00015 	stw	r3,0(r2)
 2005744:	00000a06 	br	2005770 <__kernel_rem_pio2f+0x4e8>
		    }
		} else  iq[i] = 0xff - j;
 2005748:	00c03fc4 	movi	r3,255
 200574c:	e0bfa217 	ldw	r2,-376(fp)
 2005750:	1887c83a 	sub	r3,r3,r2
 2005754:	e0bfa117 	ldw	r2,-380(fp)
 2005758:	1085883a 	add	r2,r2,r2
 200575c:	1085883a 	add	r2,r2,r2
 2005760:	e13f9d04 	addi	r4,fp,-396
 2005764:	2085883a 	add	r2,r4,r2
 2005768:	10800f04 	addi	r2,r2,60
 200576c:	10c00015 	stw	r3,0(r2)
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 2005770:	e0bfa117 	ldw	r2,-380(fp)
 2005774:	10800044 	addi	r2,r2,1
 2005778:	e0bfa115 	stw	r2,-380(fp)
 200577c:	e0ffa117 	ldw	r3,-380(fp)
 2005780:	e0bf9d17 	ldw	r2,-396(fp)
 2005784:	18bfd716 	blt	r3,r2,20056e4 <__kernel_rem_pio2f+0x45c>
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
		    }
		} else  iq[i] = 0xff - j;
	    }
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
 2005788:	e0bfa417 	ldw	r2,-368(fp)
 200578c:	00802a0e 	bge	zero,r2,2005838 <__kernel_rem_pio2f+0x5b0>
	        switch(q0) {
 2005790:	e0bfa417 	ldw	r2,-368(fp)
 2005794:	10c00060 	cmpeqi	r3,r2,1
 2005798:	1800031e 	bne	r3,zero,20057a8 <__kernel_rem_pio2f+0x520>
 200579c:	108000a0 	cmpeqi	r2,r2,2
 20057a0:	1000131e 	bne	r2,zero,20057f0 <__kernel_rem_pio2f+0x568>
 20057a4:	00002406 	br	2005838 <__kernel_rem_pio2f+0x5b0>
	        case 1:
	    	   iq[jz-1] &= 0x7f; break;
 20057a8:	e0bf9d17 	ldw	r2,-396(fp)
 20057ac:	10bfffc4 	addi	r2,r2,-1
 20057b0:	e0ff9d17 	ldw	r3,-396(fp)
 20057b4:	18ffffc4 	addi	r3,r3,-1
 20057b8:	18c7883a 	add	r3,r3,r3
 20057bc:	18c7883a 	add	r3,r3,r3
 20057c0:	e13f9d04 	addi	r4,fp,-396
 20057c4:	20c7883a 	add	r3,r4,r3
 20057c8:	18c00f04 	addi	r3,r3,60
 20057cc:	18c00017 	ldw	r3,0(r3)
 20057d0:	18c01fcc 	andi	r3,r3,127
 20057d4:	1085883a 	add	r2,r2,r2
 20057d8:	1085883a 	add	r2,r2,r2
 20057dc:	e13f9d04 	addi	r4,fp,-396
 20057e0:	2085883a 	add	r2,r4,r2
 20057e4:	10800f04 	addi	r2,r2,60
 20057e8:	10c00015 	stw	r3,0(r2)
 20057ec:	00001206 	br	2005838 <__kernel_rem_pio2f+0x5b0>
	    	case 2:
	    	   iq[jz-1] &= 0x3f; break;
 20057f0:	e0bf9d17 	ldw	r2,-396(fp)
 20057f4:	10bfffc4 	addi	r2,r2,-1
 20057f8:	e0ff9d17 	ldw	r3,-396(fp)
 20057fc:	18ffffc4 	addi	r3,r3,-1
 2005800:	18c7883a 	add	r3,r3,r3
 2005804:	18c7883a 	add	r3,r3,r3
 2005808:	e13f9d04 	addi	r4,fp,-396
 200580c:	20c7883a 	add	r3,r4,r3
 2005810:	18c00f04 	addi	r3,r3,60
 2005814:	18c00017 	ldw	r3,0(r3)
 2005818:	18c00fcc 	andi	r3,r3,63
 200581c:	1085883a 	add	r2,r2,r2
 2005820:	1085883a 	add	r2,r2,r2
 2005824:	e13f9d04 	addi	r4,fp,-396
 2005828:	2085883a 	add	r2,r4,r2
 200582c:	10800f04 	addi	r2,r2,60
 2005830:	10c00015 	stw	r3,0(r2)
 2005834:	0001883a 	nop
	        }
	    }
	    if(ih==2) {
 2005838:	e0bfa517 	ldw	r2,-364(fp)
 200583c:	10800098 	cmpnei	r2,r2,2
 2005840:	10000e1e 	bne	r2,zero,200587c <__kernel_rem_pio2f+0x5f4>
		z = one - z;
 2005844:	00cfe034 	movhi	r3,16256
 2005848:	e0bfa617 	ldw	r2,-360(fp)
 200584c:	1885ffb2 	custom	254,r2,r3,r2
 2005850:	e0bfa615 	stw	r2,-360(fp)
		if(carry!=0) z -= scalbnf(one,(int)q0);
 2005854:	e0bf9f17 	ldw	r2,-388(fp)
 2005858:	10000826 	beq	r2,zero,200587c <__kernel_rem_pio2f+0x5f4>
 200585c:	008fe034 	movhi	r2,16256
 2005860:	e17fa417 	ldw	r5,-368(fp)
 2005864:	1009883a 	mov	r4,r2
 2005868:	20068280 	call	2006828 <scalbnf>
 200586c:	1007883a 	mov	r3,r2
 2005870:	e0bfa617 	ldw	r2,-360(fp)
 2005874:	10c5ffb2 	custom	254,r2,r2,r3
 2005878:	e0bfa615 	stw	r2,-360(fp)
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
 200587c:	0007883a 	mov	r3,zero
 2005880:	e0bfa617 	ldw	r2,-360(fp)
 2005884:	10c5f8b2 	custom	226,r2,r2,r3
 2005888:	1000721e 	bne	r2,zero,2005a54 <__kernel_rem_pio2f+0x7cc>
	    j = 0;
 200588c:	e03fa215 	stw	zero,-376(fp)
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
 2005890:	e0bf9d17 	ldw	r2,-396(fp)
 2005894:	10bfffc4 	addi	r2,r2,-1
 2005898:	e0bfa115 	stw	r2,-380(fp)
 200589c:	00000d06 	br	20058d4 <__kernel_rem_pio2f+0x64c>
 20058a0:	e0bfa117 	ldw	r2,-380(fp)
 20058a4:	1085883a 	add	r2,r2,r2
 20058a8:	1085883a 	add	r2,r2,r2
 20058ac:	e0ff9d04 	addi	r3,fp,-396
 20058b0:	1885883a 	add	r2,r3,r2
 20058b4:	10800f04 	addi	r2,r2,60
 20058b8:	10800017 	ldw	r2,0(r2)
 20058bc:	e0ffa217 	ldw	r3,-376(fp)
 20058c0:	1884b03a 	or	r2,r3,r2
 20058c4:	e0bfa215 	stw	r2,-376(fp)
 20058c8:	e0bfa117 	ldw	r2,-380(fp)
 20058cc:	10bfffc4 	addi	r2,r2,-1
 20058d0:	e0bfa115 	stw	r2,-380(fp)
 20058d4:	e0ffa117 	ldw	r3,-380(fp)
 20058d8:	e0bfa817 	ldw	r2,-352(fp)
 20058dc:	18bff00e 	bge	r3,r2,20058a0 <__kernel_rem_pio2f+0x618>
	    if(j==0) { /* need recomputation */
 20058e0:	e0bfa217 	ldw	r2,-376(fp)
 20058e4:	10005b1e 	bne	r2,zero,2005a54 <__kernel_rem_pio2f+0x7cc>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
 20058e8:	00800044 	movi	r2,1
 20058ec:	e0bfa315 	stw	r2,-372(fp)
 20058f0:	00000306 	br	2005900 <__kernel_rem_pio2f+0x678>
 20058f4:	e0bfa317 	ldw	r2,-372(fp)
 20058f8:	10800044 	addi	r2,r2,1
 20058fc:	e0bfa315 	stw	r2,-372(fp)
 2005900:	e0ffa817 	ldw	r3,-352(fp)
 2005904:	e0bfa317 	ldw	r2,-372(fp)
 2005908:	1885c83a 	sub	r2,r3,r2
 200590c:	1085883a 	add	r2,r2,r2
 2005910:	1085883a 	add	r2,r2,r2
 2005914:	e13f9d04 	addi	r4,fp,-396
 2005918:	2085883a 	add	r2,r4,r2
 200591c:	10800f04 	addi	r2,r2,60
 2005920:	10800017 	ldw	r2,0(r2)
 2005924:	103ff326 	beq	r2,zero,20058f4 <__kernel_rem_pio2f+0x66c>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 2005928:	e0bf9d17 	ldw	r2,-396(fp)
 200592c:	10800044 	addi	r2,r2,1
 2005930:	e0bfa115 	stw	r2,-380(fp)
 2005934:	00003d06 	br	2005a2c <__kernel_rem_pio2f+0x7a4>
		    f[jx+i] = (float) ipio2[jv+i];
 2005938:	e0ffaa17 	ldw	r3,-344(fp)
 200593c:	e0bfa117 	ldw	r2,-380(fp)
 2005940:	1885883a 	add	r2,r3,r2
 2005944:	e13f9e17 	ldw	r4,-392(fp)
 2005948:	e0ffa117 	ldw	r3,-380(fp)
 200594c:	20c7883a 	add	r3,r4,r3
 2005950:	18c7883a 	add	r3,r3,r3
 2005954:	18c7883a 	add	r3,r3,r3
 2005958:	1809883a 	mov	r4,r3
 200595c:	e0c00317 	ldw	r3,12(fp)
 2005960:	1907883a 	add	r3,r3,r4
 2005964:	18c00017 	ldw	r3,0(r3)
 2005968:	1807feb2 	custom	250,r3,r3,zero
 200596c:	1085883a 	add	r2,r2,r2
 2005970:	1085883a 	add	r2,r2,r2
 2005974:	e13f9d04 	addi	r4,fp,-396
 2005978:	2085883a 	add	r2,r4,r2
 200597c:	10802304 	addi	r2,r2,140
 2005980:	10c00015 	stw	r3,0(r2)
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
 2005984:	e03fa215 	stw	zero,-376(fp)
 2005988:	e03fa715 	stw	zero,-356(fp)
 200598c:	00001906 	br	20059f4 <__kernel_rem_pio2f+0x76c>
 2005990:	e0bfa217 	ldw	r2,-376(fp)
 2005994:	1085883a 	add	r2,r2,r2
 2005998:	1085883a 	add	r2,r2,r2
 200599c:	1007883a 	mov	r3,r2
 20059a0:	e0bffc17 	ldw	r2,-16(fp)
 20059a4:	10c5883a 	add	r2,r2,r3
 20059a8:	10c00017 	ldw	r3,0(r2)
 20059ac:	e13faa17 	ldw	r4,-344(fp)
 20059b0:	e0bfa117 	ldw	r2,-380(fp)
 20059b4:	2089883a 	add	r4,r4,r2
 20059b8:	e0bfa217 	ldw	r2,-376(fp)
 20059bc:	2085c83a 	sub	r2,r4,r2
 20059c0:	1085883a 	add	r2,r2,r2
 20059c4:	1085883a 	add	r2,r2,r2
 20059c8:	e13f9d04 	addi	r4,fp,-396
 20059cc:	2085883a 	add	r2,r4,r2
 20059d0:	11002304 	addi	r4,r2,140
 20059d4:	20800017 	ldw	r2,0(r4)
 20059d8:	1885ff32 	custom	252,r2,r3,r2
 20059dc:	e0ffa717 	ldw	r3,-356(fp)
 20059e0:	1885ff72 	custom	253,r2,r3,r2
 20059e4:	e0bfa715 	stw	r2,-356(fp)
 20059e8:	e0bfa217 	ldw	r2,-376(fp)
 20059ec:	10800044 	addi	r2,r2,1
 20059f0:	e0bfa215 	stw	r2,-376(fp)
 20059f4:	e0bfa217 	ldw	r2,-376(fp)
 20059f8:	e0ffaa17 	ldw	r3,-344(fp)
 20059fc:	18bfe40e 	bge	r3,r2,2005990 <__kernel_rem_pio2f+0x708>
		    q[i] = fw;
 2005a00:	e0bfa117 	ldw	r2,-380(fp)
 2005a04:	1085883a 	add	r2,r2,r2
 2005a08:	1085883a 	add	r2,r2,r2
 2005a0c:	e0ff9d04 	addi	r3,fp,-396
 2005a10:	1885883a 	add	r2,r3,r2
 2005a14:	10804b04 	addi	r2,r2,300
 2005a18:	e0ffa717 	ldw	r3,-356(fp)
 2005a1c:	10c00015 	stw	r3,0(r2)
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 2005a20:	e0bfa117 	ldw	r2,-380(fp)
 2005a24:	10800044 	addi	r2,r2,1
 2005a28:	e0bfa115 	stw	r2,-380(fp)
 2005a2c:	e0ff9d17 	ldw	r3,-396(fp)
 2005a30:	e0bfa317 	ldw	r2,-372(fp)
 2005a34:	1887883a 	add	r3,r3,r2
 2005a38:	e0bfa117 	ldw	r2,-380(fp)
 2005a3c:	18bfbe0e 	bge	r3,r2,2005938 <__kernel_rem_pio2f+0x6b0>
		    f[jx+i] = (float) ipio2[jv+i];
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
		    q[i] = fw;
		}
		jz += k;
 2005a40:	e0ff9d17 	ldw	r3,-396(fp)
 2005a44:	e0bfa317 	ldw	r2,-372(fp)
 2005a48:	1885883a 	add	r2,r3,r2
 2005a4c:	e0bf9d15 	stw	r2,-396(fp)
		goto recompute;
 2005a50:	003e8806 	br	2005474 <__kernel_rem_pio2f+0x1ec>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
 2005a54:	e0bfa617 	ldw	r2,-360(fp)
 2005a58:	0007883a 	mov	r3,zero
 2005a5c:	10c5f8b2 	custom	226,r2,r2,r3
 2005a60:	1000161e 	bne	r2,zero,2005abc <__kernel_rem_pio2f+0x834>
	    jz -= 1; q0 -= 8;
 2005a64:	e0bf9d17 	ldw	r2,-396(fp)
 2005a68:	10bfffc4 	addi	r2,r2,-1
 2005a6c:	e0bf9d15 	stw	r2,-396(fp)
 2005a70:	e0bfa417 	ldw	r2,-368(fp)
 2005a74:	10bffe04 	addi	r2,r2,-8
 2005a78:	e0bfa415 	stw	r2,-368(fp)
	    while(iq[jz]==0) { jz--; q0-=8;}
 2005a7c:	00000606 	br	2005a98 <__kernel_rem_pio2f+0x810>
 2005a80:	e0bf9d17 	ldw	r2,-396(fp)
 2005a84:	10bfffc4 	addi	r2,r2,-1
 2005a88:	e0bf9d15 	stw	r2,-396(fp)
 2005a8c:	e0bfa417 	ldw	r2,-368(fp)
 2005a90:	10bffe04 	addi	r2,r2,-8
 2005a94:	e0bfa415 	stw	r2,-368(fp)
 2005a98:	e0bf9d17 	ldw	r2,-396(fp)
 2005a9c:	1085883a 	add	r2,r2,r2
 2005aa0:	1085883a 	add	r2,r2,r2
 2005aa4:	e13f9d04 	addi	r4,fp,-396
 2005aa8:	2085883a 	add	r2,r4,r2
 2005aac:	10800f04 	addi	r2,r2,60
 2005ab0:	10800017 	ldw	r2,0(r2)
 2005ab4:	103ff226 	beq	r2,zero,2005a80 <__kernel_rem_pio2f+0x7f8>
 2005ab8:	00003606 	br	2005b94 <__kernel_rem_pio2f+0x90c>
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
 2005abc:	e0bfa417 	ldw	r2,-368(fp)
 2005ac0:	0085c83a 	sub	r2,zero,r2
 2005ac4:	100b883a 	mov	r5,r2
 2005ac8:	e13fa617 	ldw	r4,-360(fp)
 2005acc:	20068280 	call	2006828 <scalbnf>
 2005ad0:	e0bfa615 	stw	r2,-360(fp)
	    if(z>=two8) { 
 2005ad4:	0090e034 	movhi	r2,17280
 2005ad8:	e0ffa617 	ldw	r3,-360(fp)
 2005adc:	1885f932 	custom	228,r2,r3,r2
 2005ae0:	10002326 	beq	r2,zero,2005b70 <__kernel_rem_pio2f+0x8e8>
		fw = (float)((__int32_t)(twon8*z));
 2005ae4:	00cee034 	movhi	r3,15232
 2005ae8:	e0bfa617 	ldw	r2,-360(fp)
 2005aec:	1885ff32 	custom	252,r2,r3,r2
 2005af0:	1005fe72 	custom	249,r2,r2,zero
 2005af4:	1005feb2 	custom	250,r2,r2,zero
 2005af8:	e0bfa715 	stw	r2,-356(fp)
		iq[jz] = (__int32_t)(z-two8*fw);
 2005afc:	00d0e034 	movhi	r3,17280
 2005b00:	e0bfa717 	ldw	r2,-356(fp)
 2005b04:	1885ff32 	custom	252,r2,r3,r2
 2005b08:	e0ffa617 	ldw	r3,-360(fp)
 2005b0c:	1885ffb2 	custom	254,r2,r3,r2
 2005b10:	1007fe72 	custom	249,r3,r2,zero
 2005b14:	e0bf9d17 	ldw	r2,-396(fp)
 2005b18:	1085883a 	add	r2,r2,r2
 2005b1c:	1085883a 	add	r2,r2,r2
 2005b20:	e13f9d04 	addi	r4,fp,-396
 2005b24:	2085883a 	add	r2,r4,r2
 2005b28:	10800f04 	addi	r2,r2,60
 2005b2c:	10c00015 	stw	r3,0(r2)
		jz += 1; q0 += 8;
 2005b30:	e0bf9d17 	ldw	r2,-396(fp)
 2005b34:	10800044 	addi	r2,r2,1
 2005b38:	e0bf9d15 	stw	r2,-396(fp)
 2005b3c:	e0bfa417 	ldw	r2,-368(fp)
 2005b40:	10800204 	addi	r2,r2,8
 2005b44:	e0bfa415 	stw	r2,-368(fp)
		iq[jz] = (__int32_t) fw;
 2005b48:	e0bfa717 	ldw	r2,-356(fp)
 2005b4c:	1007fe72 	custom	249,r3,r2,zero
 2005b50:	e0bf9d17 	ldw	r2,-396(fp)
 2005b54:	1085883a 	add	r2,r2,r2
 2005b58:	1085883a 	add	r2,r2,r2
 2005b5c:	e13f9d04 	addi	r4,fp,-396
 2005b60:	2085883a 	add	r2,r4,r2
 2005b64:	10800f04 	addi	r2,r2,60
 2005b68:	10c00015 	stw	r3,0(r2)
 2005b6c:	00000906 	br	2005b94 <__kernel_rem_pio2f+0x90c>
	    } else iq[jz] = (__int32_t) z ;
 2005b70:	e0bfa617 	ldw	r2,-360(fp)
 2005b74:	1007fe72 	custom	249,r3,r2,zero
 2005b78:	e0bf9d17 	ldw	r2,-396(fp)
 2005b7c:	1085883a 	add	r2,r2,r2
 2005b80:	1085883a 	add	r2,r2,r2
 2005b84:	e13f9d04 	addi	r4,fp,-396
 2005b88:	2085883a 	add	r2,r4,r2
 2005b8c:	10800f04 	addi	r2,r2,60
 2005b90:	10c00015 	stw	r3,0(r2)
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
 2005b94:	008fe034 	movhi	r2,16256
 2005b98:	e17fa417 	ldw	r5,-368(fp)
 2005b9c:	1009883a 	mov	r4,r2
 2005ba0:	20068280 	call	2006828 <scalbnf>
 2005ba4:	e0bfa715 	stw	r2,-356(fp)
	for(i=jz;i>=0;i--) {
 2005ba8:	e0bf9d17 	ldw	r2,-396(fp)
 2005bac:	e0bfa115 	stw	r2,-380(fp)
 2005bb0:	00001806 	br	2005c14 <__kernel_rem_pio2f+0x98c>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
 2005bb4:	e0bfa117 	ldw	r2,-380(fp)
 2005bb8:	1085883a 	add	r2,r2,r2
 2005bbc:	1085883a 	add	r2,r2,r2
 2005bc0:	e0ff9d04 	addi	r3,fp,-396
 2005bc4:	1885883a 	add	r2,r3,r2
 2005bc8:	10800f04 	addi	r2,r2,60
 2005bcc:	10800017 	ldw	r2,0(r2)
 2005bd0:	1007feb2 	custom	250,r3,r2,zero
 2005bd4:	e0bfa717 	ldw	r2,-356(fp)
 2005bd8:	1887ff32 	custom	252,r3,r3,r2
 2005bdc:	e0bfa117 	ldw	r2,-380(fp)
 2005be0:	1085883a 	add	r2,r2,r2
 2005be4:	1085883a 	add	r2,r2,r2
 2005be8:	e13f9d04 	addi	r4,fp,-396
 2005bec:	2085883a 	add	r2,r4,r2
 2005bf0:	10804b04 	addi	r2,r2,300
 2005bf4:	10c00015 	stw	r3,0(r2)
 2005bf8:	008ee034 	movhi	r2,15232
 2005bfc:	e0ffa717 	ldw	r3,-356(fp)
 2005c00:	1885ff32 	custom	252,r2,r3,r2
 2005c04:	e0bfa715 	stw	r2,-356(fp)
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
	for(i=jz;i>=0;i--) {
 2005c08:	e0bfa117 	ldw	r2,-380(fp)
 2005c0c:	10bfffc4 	addi	r2,r2,-1
 2005c10:	e0bfa115 	stw	r2,-380(fp)
 2005c14:	e0bfa117 	ldw	r2,-380(fp)
 2005c18:	103fe60e 	bge	r2,zero,2005bb4 <__kernel_rem_pio2f+0x92c>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 2005c1c:	e0bf9d17 	ldw	r2,-396(fp)
 2005c20:	e0bfa115 	stw	r2,-380(fp)
 2005c24:	00002f06 	br	2005ce4 <__kernel_rem_pio2f+0xa5c>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
 2005c28:	e03fa715 	stw	zero,-356(fp)
 2005c2c:	e03fa315 	stw	zero,-372(fp)
 2005c30:	00001706 	br	2005c90 <__kernel_rem_pio2f+0xa08>
 2005c34:	008080b4 	movhi	r2,514
 2005c38:	1089a404 	addi	r2,r2,9872
 2005c3c:	e0ffa317 	ldw	r3,-372(fp)
 2005c40:	18c7883a 	add	r3,r3,r3
 2005c44:	18c7883a 	add	r3,r3,r3
 2005c48:	10c5883a 	add	r2,r2,r3
 2005c4c:	10c00017 	ldw	r3,0(r2)
 2005c50:	e13fa117 	ldw	r4,-380(fp)
 2005c54:	e0bfa317 	ldw	r2,-372(fp)
 2005c58:	2085883a 	add	r2,r4,r2
 2005c5c:	1085883a 	add	r2,r2,r2
 2005c60:	1085883a 	add	r2,r2,r2
 2005c64:	e13f9d04 	addi	r4,fp,-396
 2005c68:	2085883a 	add	r2,r4,r2
 2005c6c:	11004b04 	addi	r4,r2,300
 2005c70:	20800017 	ldw	r2,0(r4)
 2005c74:	1885ff32 	custom	252,r2,r3,r2
 2005c78:	e0ffa717 	ldw	r3,-356(fp)
 2005c7c:	1885ff72 	custom	253,r2,r3,r2
 2005c80:	e0bfa715 	stw	r2,-356(fp)
 2005c84:	e0bfa317 	ldw	r2,-372(fp)
 2005c88:	10800044 	addi	r2,r2,1
 2005c8c:	e0bfa315 	stw	r2,-372(fp)
 2005c90:	e0bfa317 	ldw	r2,-372(fp)
 2005c94:	e0ffa917 	ldw	r3,-348(fp)
 2005c98:	18800516 	blt	r3,r2,2005cb0 <__kernel_rem_pio2f+0xa28>
 2005c9c:	e0ff9d17 	ldw	r3,-396(fp)
 2005ca0:	e0bfa117 	ldw	r2,-380(fp)
 2005ca4:	1887c83a 	sub	r3,r3,r2
 2005ca8:	e0bfa317 	ldw	r2,-372(fp)
 2005cac:	18bfe10e 	bge	r3,r2,2005c34 <__kernel_rem_pio2f+0x9ac>
	    fq[jz-i] = fw;
 2005cb0:	e0ff9d17 	ldw	r3,-396(fp)
 2005cb4:	e0bfa117 	ldw	r2,-380(fp)
 2005cb8:	1885c83a 	sub	r2,r3,r2
 2005cbc:	1085883a 	add	r2,r2,r2
 2005cc0:	1085883a 	add	r2,r2,r2
 2005cc4:	e0ff9d04 	addi	r3,fp,-396
 2005cc8:	1885883a 	add	r2,r3,r2
 2005ccc:	10803704 	addi	r2,r2,220
 2005cd0:	e0ffa717 	ldw	r3,-356(fp)
 2005cd4:	10c00015 	stw	r3,0(r2)
	for(i=jz;i>=0;i--) {
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 2005cd8:	e0bfa117 	ldw	r2,-380(fp)
 2005cdc:	10bfffc4 	addi	r2,r2,-1
 2005ce0:	e0bfa115 	stw	r2,-380(fp)
 2005ce4:	e0bfa117 	ldw	r2,-380(fp)
 2005ce8:	103fcf0e 	bge	r2,zero,2005c28 <__kernel_rem_pio2f+0x9a0>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
	    fq[jz-i] = fw;
	}

    /* compress fq[] into y[] */
	switch(prec) {
 2005cec:	e0800217 	ldw	r2,8(fp)
 2005cf0:	10c000c8 	cmpgei	r3,r2,3
 2005cf4:	1800031e 	bne	r3,zero,2005d04 <__kernel_rem_pio2f+0xa7c>
 2005cf8:	00802116 	blt	zero,r2,2005d80 <__kernel_rem_pio2f+0xaf8>
 2005cfc:	10000426 	beq	r2,zero,2005d10 <__kernel_rem_pio2f+0xa88>
 2005d00:	00010206 	br	200610c <__kernel_rem_pio2f+0xe84>
 2005d04:	108000e0 	cmpeqi	r2,r2,3
 2005d08:	1000591e 	bne	r2,zero,2005e70 <__kernel_rem_pio2f+0xbe8>
 2005d0c:	0000ff06 	br	200610c <__kernel_rem_pio2f+0xe84>
	    case 0:
		fw = 0.0;
 2005d10:	e03fa715 	stw	zero,-356(fp)
		for (i=jz;i>=0;i--) fw += fq[i];
 2005d14:	e0bf9d17 	ldw	r2,-396(fp)
 2005d18:	e0bfa115 	stw	r2,-380(fp)
 2005d1c:	00000d06 	br	2005d54 <__kernel_rem_pio2f+0xacc>
 2005d20:	e0bfa117 	ldw	r2,-380(fp)
 2005d24:	1085883a 	add	r2,r2,r2
 2005d28:	1085883a 	add	r2,r2,r2
 2005d2c:	e13f9d04 	addi	r4,fp,-396
 2005d30:	2085883a 	add	r2,r4,r2
 2005d34:	10c03704 	addi	r3,r2,220
 2005d38:	18800017 	ldw	r2,0(r3)
 2005d3c:	e0ffa717 	ldw	r3,-356(fp)
 2005d40:	1885ff72 	custom	253,r2,r3,r2
 2005d44:	e0bfa715 	stw	r2,-356(fp)
 2005d48:	e0bfa117 	ldw	r2,-380(fp)
 2005d4c:	10bfffc4 	addi	r2,r2,-1
 2005d50:	e0bfa115 	stw	r2,-380(fp)
 2005d54:	e0bfa117 	ldw	r2,-380(fp)
 2005d58:	103ff10e 	bge	r2,zero,2005d20 <__kernel_rem_pio2f+0xa98>
		y[0] = (ih==0)? fw: -fw; 
 2005d5c:	e0bfa517 	ldw	r2,-364(fp)
 2005d60:	10000326 	beq	r2,zero,2005d70 <__kernel_rem_pio2f+0xae8>
 2005d64:	e0bfa717 	ldw	r2,-356(fp)
 2005d68:	1005f872 	custom	225,r2,r2,zero
 2005d6c:	00000106 	br	2005d74 <__kernel_rem_pio2f+0xaec>
 2005d70:	e0bfa717 	ldw	r2,-356(fp)
 2005d74:	e0fffd17 	ldw	r3,-12(fp)
 2005d78:	18800015 	stw	r2,0(r3)
		break;
 2005d7c:	0000e306 	br	200610c <__kernel_rem_pio2f+0xe84>
	    case 1:
	    case 2:
		fw = 0.0;
 2005d80:	e03fa715 	stw	zero,-356(fp)
		for (i=jz;i>=0;i--) fw += fq[i]; 
 2005d84:	e0bf9d17 	ldw	r2,-396(fp)
 2005d88:	e0bfa115 	stw	r2,-380(fp)
 2005d8c:	00000d06 	br	2005dc4 <__kernel_rem_pio2f+0xb3c>
 2005d90:	e0bfa117 	ldw	r2,-380(fp)
 2005d94:	1085883a 	add	r2,r2,r2
 2005d98:	1085883a 	add	r2,r2,r2
 2005d9c:	e0ff9d04 	addi	r3,fp,-396
 2005da0:	1885883a 	add	r2,r3,r2
 2005da4:	10c03704 	addi	r3,r2,220
 2005da8:	18800017 	ldw	r2,0(r3)
 2005dac:	e0ffa717 	ldw	r3,-356(fp)
 2005db0:	1885ff72 	custom	253,r2,r3,r2
 2005db4:	e0bfa715 	stw	r2,-356(fp)
 2005db8:	e0bfa117 	ldw	r2,-380(fp)
 2005dbc:	10bfffc4 	addi	r2,r2,-1
 2005dc0:	e0bfa115 	stw	r2,-380(fp)
 2005dc4:	e0bfa117 	ldw	r2,-380(fp)
 2005dc8:	103ff10e 	bge	r2,zero,2005d90 <__kernel_rem_pio2f+0xb08>
		y[0] = (ih==0)? fw: -fw; 
 2005dcc:	e0bfa517 	ldw	r2,-364(fp)
 2005dd0:	10000326 	beq	r2,zero,2005de0 <__kernel_rem_pio2f+0xb58>
 2005dd4:	e0bfa717 	ldw	r2,-356(fp)
 2005dd8:	1005f872 	custom	225,r2,r2,zero
 2005ddc:	00000106 	br	2005de4 <__kernel_rem_pio2f+0xb5c>
 2005de0:	e0bfa717 	ldw	r2,-356(fp)
 2005de4:	e0fffd17 	ldw	r3,-12(fp)
 2005de8:	18800015 	stw	r2,0(r3)
		fw = fq[0]-fw;
 2005dec:	e0ffd417 	ldw	r3,-176(fp)
 2005df0:	e0bfa717 	ldw	r2,-356(fp)
 2005df4:	1885ffb2 	custom	254,r2,r3,r2
 2005df8:	e0bfa715 	stw	r2,-356(fp)
		for (i=1;i<=jz;i++) fw += fq[i];
 2005dfc:	00800044 	movi	r2,1
 2005e00:	e0bfa115 	stw	r2,-380(fp)
 2005e04:	00000d06 	br	2005e3c <__kernel_rem_pio2f+0xbb4>
 2005e08:	e0bfa117 	ldw	r2,-380(fp)
 2005e0c:	1085883a 	add	r2,r2,r2
 2005e10:	1085883a 	add	r2,r2,r2
 2005e14:	e13f9d04 	addi	r4,fp,-396
 2005e18:	2085883a 	add	r2,r4,r2
 2005e1c:	10c03704 	addi	r3,r2,220
 2005e20:	18800017 	ldw	r2,0(r3)
 2005e24:	e0ffa717 	ldw	r3,-356(fp)
 2005e28:	1885ff72 	custom	253,r2,r3,r2
 2005e2c:	e0bfa715 	stw	r2,-356(fp)
 2005e30:	e0bfa117 	ldw	r2,-380(fp)
 2005e34:	10800044 	addi	r2,r2,1
 2005e38:	e0bfa115 	stw	r2,-380(fp)
 2005e3c:	e0bfa117 	ldw	r2,-380(fp)
 2005e40:	e0ff9d17 	ldw	r3,-396(fp)
 2005e44:	18bff00e 	bge	r3,r2,2005e08 <__kernel_rem_pio2f+0xb80>
		y[1] = (ih==0)? fw: -fw; 
 2005e48:	e0bffd17 	ldw	r2,-12(fp)
 2005e4c:	10c00104 	addi	r3,r2,4
 2005e50:	e0bfa517 	ldw	r2,-364(fp)
 2005e54:	10000326 	beq	r2,zero,2005e64 <__kernel_rem_pio2f+0xbdc>
 2005e58:	e0bfa717 	ldw	r2,-356(fp)
 2005e5c:	1005f872 	custom	225,r2,r2,zero
 2005e60:	00000106 	br	2005e68 <__kernel_rem_pio2f+0xbe0>
 2005e64:	e0bfa717 	ldw	r2,-356(fp)
 2005e68:	18800015 	stw	r2,0(r3)
		break;
 2005e6c:	0000a706 	br	200610c <__kernel_rem_pio2f+0xe84>
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 2005e70:	e0bf9d17 	ldw	r2,-396(fp)
 2005e74:	e0bfa115 	stw	r2,-380(fp)
 2005e78:	00003606 	br	2005f54 <__kernel_rem_pio2f+0xccc>
		    fw      = fq[i-1]+fq[i]; 
 2005e7c:	e0bfa117 	ldw	r2,-380(fp)
 2005e80:	10bfffc4 	addi	r2,r2,-1
 2005e84:	1085883a 	add	r2,r2,r2
 2005e88:	1085883a 	add	r2,r2,r2
 2005e8c:	e0ff9d04 	addi	r3,fp,-396
 2005e90:	1885883a 	add	r2,r3,r2
 2005e94:	10803704 	addi	r2,r2,220
 2005e98:	10c00017 	ldw	r3,0(r2)
 2005e9c:	e0bfa117 	ldw	r2,-380(fp)
 2005ea0:	1085883a 	add	r2,r2,r2
 2005ea4:	1085883a 	add	r2,r2,r2
 2005ea8:	e13f9d04 	addi	r4,fp,-396
 2005eac:	2085883a 	add	r2,r4,r2
 2005eb0:	11003704 	addi	r4,r2,220
 2005eb4:	20800017 	ldw	r2,0(r4)
 2005eb8:	1885ff72 	custom	253,r2,r3,r2
 2005ebc:	e0bfa715 	stw	r2,-356(fp)
		    fq[i]  += fq[i-1]-fw;
 2005ec0:	e0bfa117 	ldw	r2,-380(fp)
 2005ec4:	1085883a 	add	r2,r2,r2
 2005ec8:	1085883a 	add	r2,r2,r2
 2005ecc:	e0ff9d04 	addi	r3,fp,-396
 2005ed0:	1885883a 	add	r2,r3,r2
 2005ed4:	10803704 	addi	r2,r2,220
 2005ed8:	10c00017 	ldw	r3,0(r2)
 2005edc:	e0bfa117 	ldw	r2,-380(fp)
 2005ee0:	10bfffc4 	addi	r2,r2,-1
 2005ee4:	1085883a 	add	r2,r2,r2
 2005ee8:	1085883a 	add	r2,r2,r2
 2005eec:	e13f9d04 	addi	r4,fp,-396
 2005ef0:	2085883a 	add	r2,r4,r2
 2005ef4:	10803704 	addi	r2,r2,220
 2005ef8:	11000017 	ldw	r4,0(r2)
 2005efc:	e0bfa717 	ldw	r2,-356(fp)
 2005f00:	2085ffb2 	custom	254,r2,r4,r2
 2005f04:	1887ff72 	custom	253,r3,r3,r2
 2005f08:	e0bfa117 	ldw	r2,-380(fp)
 2005f0c:	1085883a 	add	r2,r2,r2
 2005f10:	1085883a 	add	r2,r2,r2
 2005f14:	e13f9d04 	addi	r4,fp,-396
 2005f18:	2085883a 	add	r2,r4,r2
 2005f1c:	10803704 	addi	r2,r2,220
 2005f20:	10c00015 	stw	r3,0(r2)
		    fq[i-1] = fw;
 2005f24:	e0bfa117 	ldw	r2,-380(fp)
 2005f28:	10bfffc4 	addi	r2,r2,-1
 2005f2c:	1085883a 	add	r2,r2,r2
 2005f30:	1085883a 	add	r2,r2,r2
 2005f34:	e0ff9d04 	addi	r3,fp,-396
 2005f38:	1885883a 	add	r2,r3,r2
 2005f3c:	10803704 	addi	r2,r2,220
 2005f40:	e0ffa717 	ldw	r3,-356(fp)
 2005f44:	10c00015 	stw	r3,0(r2)
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 2005f48:	e0bfa117 	ldw	r2,-380(fp)
 2005f4c:	10bfffc4 	addi	r2,r2,-1
 2005f50:	e0bfa115 	stw	r2,-380(fp)
 2005f54:	e0bfa117 	ldw	r2,-380(fp)
 2005f58:	00bfc816 	blt	zero,r2,2005e7c <__kernel_rem_pio2f+0xbf4>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 2005f5c:	e0bf9d17 	ldw	r2,-396(fp)
 2005f60:	e0bfa115 	stw	r2,-380(fp)
 2005f64:	00003606 	br	2006040 <__kernel_rem_pio2f+0xdb8>
		    fw      = fq[i-1]+fq[i]; 
 2005f68:	e0bfa117 	ldw	r2,-380(fp)
 2005f6c:	10bfffc4 	addi	r2,r2,-1
 2005f70:	1085883a 	add	r2,r2,r2
 2005f74:	1085883a 	add	r2,r2,r2
 2005f78:	e13f9d04 	addi	r4,fp,-396
 2005f7c:	2085883a 	add	r2,r4,r2
 2005f80:	10803704 	addi	r2,r2,220
 2005f84:	10c00017 	ldw	r3,0(r2)
 2005f88:	e0bfa117 	ldw	r2,-380(fp)
 2005f8c:	1085883a 	add	r2,r2,r2
 2005f90:	1085883a 	add	r2,r2,r2
 2005f94:	e13f9d04 	addi	r4,fp,-396
 2005f98:	2085883a 	add	r2,r4,r2
 2005f9c:	11003704 	addi	r4,r2,220
 2005fa0:	20800017 	ldw	r2,0(r4)
 2005fa4:	1885ff72 	custom	253,r2,r3,r2
 2005fa8:	e0bfa715 	stw	r2,-356(fp)
		    fq[i]  += fq[i-1]-fw;
 2005fac:	e0bfa117 	ldw	r2,-380(fp)
 2005fb0:	1085883a 	add	r2,r2,r2
 2005fb4:	1085883a 	add	r2,r2,r2
 2005fb8:	e0ff9d04 	addi	r3,fp,-396
 2005fbc:	1885883a 	add	r2,r3,r2
 2005fc0:	10803704 	addi	r2,r2,220
 2005fc4:	10c00017 	ldw	r3,0(r2)
 2005fc8:	e0bfa117 	ldw	r2,-380(fp)
 2005fcc:	10bfffc4 	addi	r2,r2,-1
 2005fd0:	1085883a 	add	r2,r2,r2
 2005fd4:	1085883a 	add	r2,r2,r2
 2005fd8:	e13f9d04 	addi	r4,fp,-396
 2005fdc:	2085883a 	add	r2,r4,r2
 2005fe0:	10803704 	addi	r2,r2,220
 2005fe4:	11000017 	ldw	r4,0(r2)
 2005fe8:	e0bfa717 	ldw	r2,-356(fp)
 2005fec:	2085ffb2 	custom	254,r2,r4,r2
 2005ff0:	1887ff72 	custom	253,r3,r3,r2
 2005ff4:	e0bfa117 	ldw	r2,-380(fp)
 2005ff8:	1085883a 	add	r2,r2,r2
 2005ffc:	1085883a 	add	r2,r2,r2
 2006000:	e13f9d04 	addi	r4,fp,-396
 2006004:	2085883a 	add	r2,r4,r2
 2006008:	10803704 	addi	r2,r2,220
 200600c:	10c00015 	stw	r3,0(r2)
		    fq[i-1] = fw;
 2006010:	e0bfa117 	ldw	r2,-380(fp)
 2006014:	10bfffc4 	addi	r2,r2,-1
 2006018:	1085883a 	add	r2,r2,r2
 200601c:	1085883a 	add	r2,r2,r2
 2006020:	e0ff9d04 	addi	r3,fp,-396
 2006024:	1885883a 	add	r2,r3,r2
 2006028:	10803704 	addi	r2,r2,220
 200602c:	e0ffa717 	ldw	r3,-356(fp)
 2006030:	10c00015 	stw	r3,0(r2)
		for (i=jz;i>0;i--) {
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 2006034:	e0bfa117 	ldw	r2,-380(fp)
 2006038:	10bfffc4 	addi	r2,r2,-1
 200603c:	e0bfa115 	stw	r2,-380(fp)
 2006040:	e0bfa117 	ldw	r2,-380(fp)
 2006044:	10800088 	cmpgei	r2,r2,2
 2006048:	103fc71e 	bne	r2,zero,2005f68 <__kernel_rem_pio2f+0xce0>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
 200604c:	e03fa715 	stw	zero,-356(fp)
 2006050:	e0bf9d17 	ldw	r2,-396(fp)
 2006054:	e0bfa115 	stw	r2,-380(fp)
 2006058:	00000d06 	br	2006090 <__kernel_rem_pio2f+0xe08>
 200605c:	e0bfa117 	ldw	r2,-380(fp)
 2006060:	1085883a 	add	r2,r2,r2
 2006064:	1085883a 	add	r2,r2,r2
 2006068:	e13f9d04 	addi	r4,fp,-396
 200606c:	2085883a 	add	r2,r4,r2
 2006070:	10c03704 	addi	r3,r2,220
 2006074:	18800017 	ldw	r2,0(r3)
 2006078:	e0ffa717 	ldw	r3,-356(fp)
 200607c:	1885ff72 	custom	253,r2,r3,r2
 2006080:	e0bfa715 	stw	r2,-356(fp)
 2006084:	e0bfa117 	ldw	r2,-380(fp)
 2006088:	10bfffc4 	addi	r2,r2,-1
 200608c:	e0bfa115 	stw	r2,-380(fp)
 2006090:	e0bfa117 	ldw	r2,-380(fp)
 2006094:	10800088 	cmpgei	r2,r2,2
 2006098:	103ff01e 	bne	r2,zero,200605c <__kernel_rem_pio2f+0xdd4>
		if(ih==0) {
 200609c:	e0bfa517 	ldw	r2,-364(fp)
 20060a0:	10000c1e 	bne	r2,zero,20060d4 <__kernel_rem_pio2f+0xe4c>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
 20060a4:	e0ffd417 	ldw	r3,-176(fp)
 20060a8:	e0bffd17 	ldw	r2,-12(fp)
 20060ac:	10c00015 	stw	r3,0(r2)
 20060b0:	e0bffd17 	ldw	r2,-12(fp)
 20060b4:	10800104 	addi	r2,r2,4
 20060b8:	e0ffd517 	ldw	r3,-172(fp)
 20060bc:	10c00015 	stw	r3,0(r2)
 20060c0:	e0bffd17 	ldw	r2,-12(fp)
 20060c4:	10800204 	addi	r2,r2,8
 20060c8:	e0ffa717 	ldw	r3,-356(fp)
 20060cc:	10c00015 	stw	r3,0(r2)
 20060d0:	00000e06 	br	200610c <__kernel_rem_pio2f+0xe84>
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
 20060d4:	e0bfd417 	ldw	r2,-176(fp)
 20060d8:	1007f872 	custom	225,r3,r2,zero
 20060dc:	e0bffd17 	ldw	r2,-12(fp)
 20060e0:	10c00015 	stw	r3,0(r2)
 20060e4:	e0bffd17 	ldw	r2,-12(fp)
 20060e8:	10800104 	addi	r2,r2,4
 20060ec:	e0ffd517 	ldw	r3,-172(fp)
 20060f0:	1807f872 	custom	225,r3,r3,zero
 20060f4:	10c00015 	stw	r3,0(r2)
 20060f8:	e0bffd17 	ldw	r2,-12(fp)
 20060fc:	10800204 	addi	r2,r2,8
 2006100:	e0ffa717 	ldw	r3,-356(fp)
 2006104:	1807f872 	custom	225,r3,r3,zero
 2006108:	10c00015 	stw	r3,0(r2)
		}
	}
	return n&7;
 200610c:	e0bfa017 	ldw	r2,-384(fp)
 2006110:	108001cc 	andi	r2,r2,7
}
 2006114:	e037883a 	mov	sp,fp
 2006118:	dfc00117 	ldw	ra,4(sp)
 200611c:	df000017 	ldw	fp,0(sp)
 2006120:	dec00204 	addi	sp,sp,8
 2006124:	f800283a 	ret

02006128 <__kernel_sinf>:
	float __kernel_sinf(float x, float y, int iy)
#else
	float __kernel_sinf(x, y, iy)
	float x,y; int iy;		/* iy=0 if y is zero */
#endif
{
 2006128:	defff704 	addi	sp,sp,-36
 200612c:	df000815 	stw	fp,32(sp)
 2006130:	df000804 	addi	fp,sp,32
 2006134:	e13ffd15 	stw	r4,-12(fp)
 2006138:	e17ffe15 	stw	r5,-8(fp)
 200613c:	e1bfff15 	stw	r6,-4(fp)
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
 2006140:	e0bffd17 	ldw	r2,-12(fp)
 2006144:	e0bffc15 	stw	r2,-16(fp)
 2006148:	e0bffc17 	ldw	r2,-16(fp)
 200614c:	e0bff815 	stw	r2,-32(fp)
	ix &= 0x7fffffff;			/* high word of x */
 2006150:	e0fff817 	ldw	r3,-32(fp)
 2006154:	00a00034 	movhi	r2,32768
 2006158:	10bfffc4 	addi	r2,r2,-1
 200615c:	1884703a 	and	r2,r3,r2
 2006160:	e0bff815 	stw	r2,-32(fp)
	if(ix<0x32000000)			/* |x| < 2**-27 */
 2006164:	e0fff817 	ldw	r3,-32(fp)
 2006168:	008c8034 	movhi	r2,12800
 200616c:	1880050e 	bge	r3,r2,2006184 <__kernel_sinf+0x5c>
	   {if((int)x==0) return x;}		/* generate inexact */
 2006170:	e0fffd17 	ldw	r3,-12(fp)
 2006174:	1805fe72 	custom	249,r2,r3,zero
 2006178:	1000021e 	bne	r2,zero,2006184 <__kernel_sinf+0x5c>
 200617c:	e0bffd17 	ldw	r2,-12(fp)
 2006180:	00003e06 	br	200627c <__kernel_sinf+0x154>
	z	=  x*x;
 2006184:	e0fffd17 	ldw	r3,-12(fp)
 2006188:	e0bffd17 	ldw	r2,-12(fp)
 200618c:	1885ff32 	custom	252,r2,r3,r2
 2006190:	e0bff915 	stw	r2,-28(fp)
	v	=  z*x;
 2006194:	e0fff917 	ldw	r3,-28(fp)
 2006198:	e0bffd17 	ldw	r2,-12(fp)
 200619c:	1885ff32 	custom	252,r2,r3,r2
 20061a0:	e0bffa15 	stw	r2,-24(fp)
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
 20061a4:	008bcbf4 	movhi	r2,12079
 20061a8:	10b274c4 	addi	r2,r2,-13869
 20061ac:	e0fff917 	ldw	r3,-28(fp)
 20061b0:	10c7ff32 	custom	252,r3,r2,r3
 20061b4:	00acb5f4 	movhi	r2,45783
 20061b8:	108bcd04 	addi	r2,r2,12084
 20061bc:	1887ff72 	custom	253,r3,r3,r2
 20061c0:	e0bff917 	ldw	r2,-28(fp)
 20061c4:	1887ff32 	custom	252,r3,r3,r2
 20061c8:	008d8e74 	movhi	r2,13881
 20061cc:	10bbc6c4 	addi	r2,r2,-4325
 20061d0:	1887ff72 	custom	253,r3,r3,r2
 20061d4:	e0bff917 	ldw	r2,-28(fp)
 20061d8:	1887ff32 	custom	252,r3,r3,r2
 20061dc:	00ae5434 	movhi	r2,47440
 20061e0:	10834044 	addi	r2,r2,3329
 20061e4:	1887ff72 	custom	253,r3,r3,r2
 20061e8:	e0bff917 	ldw	r2,-28(fp)
 20061ec:	1887ff32 	custom	252,r3,r3,r2
 20061f0:	008f0274 	movhi	r2,15369
 20061f4:	10a22244 	addi	r2,r2,-30583
 20061f8:	1885ff72 	custom	253,r2,r3,r2
 20061fc:	e0bffb15 	stw	r2,-20(fp)
	if(iy==0) return x+v*(S1+z*r);
 2006200:	e0bfff17 	ldw	r2,-4(fp)
 2006204:	10000b1e 	bne	r2,zero,2006234 <__kernel_sinf+0x10c>
 2006208:	e0fff917 	ldw	r3,-28(fp)
 200620c:	e0bffb17 	ldw	r2,-20(fp)
 2006210:	1887ff32 	custom	252,r3,r3,r2
 2006214:	00af8af4 	movhi	r2,48683
 2006218:	10aaaac4 	addi	r2,r2,-21845
 200621c:	1887ff72 	custom	253,r3,r3,r2
 2006220:	e0bffa17 	ldw	r2,-24(fp)
 2006224:	1887ff32 	custom	252,r3,r3,r2
 2006228:	e0bffd17 	ldw	r2,-12(fp)
 200622c:	1885ff72 	custom	253,r2,r3,r2
 2006230:	00001206 	br	200627c <__kernel_sinf+0x154>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
 2006234:	00cfc034 	movhi	r3,16128
 2006238:	e0bffe17 	ldw	r2,-8(fp)
 200623c:	1887ff32 	custom	252,r3,r3,r2
 2006240:	e13ffa17 	ldw	r4,-24(fp)
 2006244:	e0bffb17 	ldw	r2,-20(fp)
 2006248:	2085ff32 	custom	252,r2,r4,r2
 200624c:	1887ffb2 	custom	254,r3,r3,r2
 2006250:	e0bff917 	ldw	r2,-28(fp)
 2006254:	1887ff32 	custom	252,r3,r3,r2
 2006258:	e0bffe17 	ldw	r2,-8(fp)
 200625c:	1887ffb2 	custom	254,r3,r3,r2
 2006260:	00af8af4 	movhi	r2,48683
 2006264:	10aaaac4 	addi	r2,r2,-21845
 2006268:	e13ffa17 	ldw	r4,-24(fp)
 200626c:	1105ff32 	custom	252,r2,r2,r4
 2006270:	1885ffb2 	custom	254,r2,r3,r2
 2006274:	e0fffd17 	ldw	r3,-12(fp)
 2006278:	1885ffb2 	custom	254,r2,r3,r2
 200627c:	1007883a 	mov	r3,r2
}
 2006280:	1805883a 	mov	r2,r3
 2006284:	e037883a 	mov	sp,fp
 2006288:	df000017 	ldw	fp,0(sp)
 200628c:	dec00104 	addi	sp,sp,4
 2006290:	f800283a 	ret

02006294 <matherr>:
	int matherr(struct exception *x)
#else
	int matherr(x)
	struct exception *x;
#endif
{
 2006294:	defffc04 	addi	sp,sp,-16
 2006298:	dfc00315 	stw	ra,12(sp)
 200629c:	df000215 	stw	fp,8(sp)
 20062a0:	df000204 	addi	fp,sp,8
 20062a4:	e13fff15 	stw	r4,-4(fp)
	int n=0;
 20062a8:	e03ffe15 	stw	zero,-8(fp)
	if(x->arg1!=x->arg1) return 0;
 20062ac:	e13fff17 	ldw	r4,-4(fp)
 20062b0:	20800217 	ldw	r2,8(r4)
 20062b4:	20c00317 	ldw	r3,12(r4)
 20062b8:	e1bfff17 	ldw	r6,-4(fp)
 20062bc:	31000217 	ldw	r4,8(r6)
 20062c0:	31400317 	ldw	r5,12(r6)
 20062c4:	200d883a 	mov	r6,r4
 20062c8:	280f883a 	mov	r7,r5
 20062cc:	1009883a 	mov	r4,r2
 20062d0:	180b883a 	mov	r5,r3
 20062d4:	2007dfc0 	call	2007dfc <__eqdf2>
 20062d8:	10000226 	beq	r2,zero,20062e4 <matherr+0x50>
 20062dc:	0005883a 	mov	r2,zero
 20062e0:	00000106 	br	20062e8 <matherr+0x54>
	return n;
 20062e4:	e0bffe17 	ldw	r2,-8(fp)
}
 20062e8:	e037883a 	mov	sp,fp
 20062ec:	dfc00117 	ldw	ra,4(sp)
 20062f0:	df000017 	ldw	fp,0(sp)
 20062f4:	dec00204 	addi	sp,sp,8
 20062f8:	f800283a 	ret

020062fc <atanf>:
	float atanf(float x)
#else
	float atanf(x)
	float x;
#endif
{
 20062fc:	defff504 	addi	sp,sp,-44
 2006300:	dfc00a15 	stw	ra,40(sp)
 2006304:	df000915 	stw	fp,36(sp)
 2006308:	df000904 	addi	fp,sp,36
 200630c:	e13fff15 	stw	r4,-4(fp)
	float w,s1,s2,z;
	__int32_t ix,hx,id;

	GET_FLOAT_WORD(hx,x);
 2006310:	e0bfff17 	ldw	r2,-4(fp)
 2006314:	e0bffe15 	stw	r2,-8(fp)
 2006318:	e0bffe17 	ldw	r2,-8(fp)
 200631c:	e0bff815 	stw	r2,-32(fp)
	ix = hx&0x7fffffff;
 2006320:	e0fff817 	ldw	r3,-32(fp)
 2006324:	00a00034 	movhi	r2,32768
 2006328:	10bfffc4 	addi	r2,r2,-1
 200632c:	1884703a 	and	r2,r3,r2
 2006330:	e0bff915 	stw	r2,-28(fp)
	if(ix>=0x50800000) {	/* if |x| >= 2^34 */
 2006334:	e0fff917 	ldw	r3,-28(fp)
 2006338:	00942034 	movhi	r2,20608
 200633c:	18801516 	blt	r3,r2,2006394 <atanf+0x98>
	    if(FLT_UWORD_IS_NAN(ix))
 2006340:	e0bff917 	ldw	r2,-28(fp)
 2006344:	00dfe034 	movhi	r3,32640
 2006348:	1880030e 	bge	r3,r2,2006358 <atanf+0x5c>
		return x+x;		/* NaN */
 200634c:	e0bfff17 	ldw	r2,-4(fp)
 2006350:	1085ff72 	custom	253,r2,r2,r2
 2006354:	0000be06 	br	2006650 <atanf+0x354>
	    if(hx>0) return  atanhi[3]+atanlo[3];
 2006358:	e0bff817 	ldw	r2,-32(fp)
 200635c:	0080060e 	bge	zero,r2,2006378 <atanf+0x7c>
 2006360:	00cff274 	movhi	r3,16329
 2006364:	18c3f684 	addi	r3,r3,4058
 2006368:	008ce8b4 	movhi	r2,13218
 200636c:	10885a04 	addi	r2,r2,8552
 2006370:	1885ff72 	custom	253,r2,r3,r2
 2006374:	0000b606 	br	2006650 <atanf+0x354>
	    else     return -atanhi[3]-atanlo[3];
 2006378:	008ff274 	movhi	r2,16329
 200637c:	1083f684 	addi	r2,r2,4058
 2006380:	1007f872 	custom	225,r3,r2,zero
 2006384:	008ce8b4 	movhi	r2,13218
 2006388:	10885a04 	addi	r2,r2,8552
 200638c:	1885ffb2 	custom	254,r2,r3,r2
 2006390:	0000af06 	br	2006650 <atanf+0x354>
	} if (ix < 0x3ee00000) {	/* |x| < 0.4375 */
 2006394:	e0fff917 	ldw	r3,-28(fp)
 2006398:	008fb834 	movhi	r2,16096
 200639c:	18800f0e 	bge	r3,r2,20063dc <atanf+0xe0>
	    if (ix < 0x31000000) {	/* |x| < 2^-29 */
 20063a0:	e0fff917 	ldw	r3,-28(fp)
 20063a4:	008c4034 	movhi	r2,12544
 20063a8:	1880090e 	bge	r3,r2,20063d0 <atanf+0xd4>
		if(huge+x>one) return x;	/* raise inexact */
 20063ac:	009c52b4 	movhi	r2,29002
 20063b0:	10bcb284 	addi	r2,r2,-3382
 20063b4:	e0ffff17 	ldw	r3,-4(fp)
 20063b8:	10c7ff72 	custom	253,r3,r2,r3
 20063bc:	008fe034 	movhi	r2,16256
 20063c0:	1885f972 	custom	229,r2,r3,r2
 20063c4:	10000226 	beq	r2,zero,20063d0 <atanf+0xd4>
 20063c8:	e0bfff17 	ldw	r2,-4(fp)
 20063cc:	0000a006 	br	2006650 <atanf+0x354>
	    }
	    id = -1;
 20063d0:	00bfffc4 	movi	r2,-1
 20063d4:	e0bff715 	stw	r2,-36(fp)
 20063d8:	00003506 	br	20064b0 <atanf+0x1b4>
	} else {
	x = fabsf(x);
 20063dc:	e13fff17 	ldw	r4,-4(fp)
 20063e0:	200666c0 	call	200666c <fabsf>
 20063e4:	e0bfff15 	stw	r2,-4(fp)
	if (ix < 0x3f980000) {		/* |x| < 1.1875 */
 20063e8:	e0fff917 	ldw	r3,-28(fp)
 20063ec:	008fe634 	movhi	r2,16280
 20063f0:	1880190e 	bge	r3,r2,2006458 <atanf+0x15c>
	    if (ix < 0x3f300000) {	/* 7/16 <=|x|<11/16 */
 20063f4:	e0fff917 	ldw	r3,-28(fp)
 20063f8:	008fcc34 	movhi	r2,16176
 20063fc:	18800b0e 	bge	r3,r2,200642c <atanf+0x130>
		id = 0; x = ((float)2.0*x-one)/((float)2.0+x); 
 2006400:	e03ff715 	stw	zero,-36(fp)
 2006404:	e0bfff17 	ldw	r2,-4(fp)
 2006408:	1087ff72 	custom	253,r3,r2,r2
 200640c:	008fe034 	movhi	r2,16256
 2006410:	1887ffb2 	custom	254,r3,r3,r2
 2006414:	e13fff17 	ldw	r4,-4(fp)
 2006418:	00900034 	movhi	r2,16384
 200641c:	2085ff72 	custom	253,r2,r4,r2
 2006420:	1885fff2 	custom	255,r2,r3,r2
 2006424:	e0bfff15 	stw	r2,-4(fp)
 2006428:	00002106 	br	20064b0 <atanf+0x1b4>
	    } else {			/* 11/16<=|x|< 19/16 */
		id = 1; x  = (x-one)/(x+one); 
 200642c:	00800044 	movi	r2,1
 2006430:	e0bff715 	stw	r2,-36(fp)
 2006434:	008fe034 	movhi	r2,16256
 2006438:	e0ffff17 	ldw	r3,-4(fp)
 200643c:	1887ffb2 	custom	254,r3,r3,r2
 2006440:	010fe034 	movhi	r4,16256
 2006444:	e0bfff17 	ldw	r2,-4(fp)
 2006448:	2085ff72 	custom	253,r2,r4,r2
 200644c:	1885fff2 	custom	255,r2,r3,r2
 2006450:	e0bfff15 	stw	r2,-4(fp)
 2006454:	00001606 	br	20064b0 <atanf+0x1b4>
	    }
	} else {
	    if (ix < 0x401c0000) {	/* |x| < 2.4375 */
 2006458:	e0fff917 	ldw	r3,-28(fp)
 200645c:	00900734 	movhi	r2,16412
 2006460:	18800d0e 	bge	r3,r2,2006498 <atanf+0x19c>
		id = 2; x  = (x-(float)1.5)/(one+(float)1.5*x);
 2006464:	00800084 	movi	r2,2
 2006468:	e0bff715 	stw	r2,-36(fp)
 200646c:	e0ffff17 	ldw	r3,-4(fp)
 2006470:	008ff034 	movhi	r2,16320
 2006474:	1887ffb2 	custom	254,r3,r3,r2
 2006478:	e13fff17 	ldw	r4,-4(fp)
 200647c:	008ff034 	movhi	r2,16320
 2006480:	2089ff32 	custom	252,r4,r4,r2
 2006484:	008fe034 	movhi	r2,16256
 2006488:	2085ff72 	custom	253,r2,r4,r2
 200648c:	1885fff2 	custom	255,r2,r3,r2
 2006490:	e0bfff15 	stw	r2,-4(fp)
 2006494:	00000606 	br	20064b0 <atanf+0x1b4>
	    } else {			/* 2.4375 <= |x| < 2^66 */
		id = 3; x  = -(float)1.0/x;
 2006498:	008000c4 	movi	r2,3
 200649c:	e0bff715 	stw	r2,-36(fp)
 20064a0:	00efe034 	movhi	r3,49024
 20064a4:	e0bfff17 	ldw	r2,-4(fp)
 20064a8:	1885fff2 	custom	255,r2,r3,r2
 20064ac:	e0bfff15 	stw	r2,-4(fp)
	    }
	}}
    /* end of argument reduction */
	z = x*x;
 20064b0:	e0ffff17 	ldw	r3,-4(fp)
 20064b4:	e0bfff17 	ldw	r2,-4(fp)
 20064b8:	1885ff32 	custom	252,r2,r3,r2
 20064bc:	e0bffa15 	stw	r2,-24(fp)
	w = z*z;
 20064c0:	e0fffa17 	ldw	r3,-24(fp)
 20064c4:	e0bffa17 	ldw	r2,-24(fp)
 20064c8:	1885ff32 	custom	252,r2,r3,r2
 20064cc:	e0bffb15 	stw	r2,-20(fp)
    /* break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly */
	s1 = z*(aT[0]+w*(aT[2]+w*(aT[4]+w*(aT[6]+w*(aT[8]+w*aT[10])))));
 20064d0:	008faaf4 	movhi	r2,16043
 20064d4:	10aaaac4 	addi	r2,r2,-21845
 20064d8:	00cf84b4 	movhi	r3,15890
 20064dc:	18d24944 	addi	r3,r3,18725
 20064e0:	010f6eb4 	movhi	r4,15802
 20064e4:	210b9b84 	addi	r4,r4,11886
 20064e8:	014f6234 	movhi	r5,15752
 20064ec:	295acd44 	addi	r5,r5,27445
 20064f0:	018f5334 	movhi	r6,15692
 20064f4:	31b69644 	addi	r6,r6,-9639
 20064f8:	01cf2174 	movhi	r7,15493
 20064fc:	39da75c4 	addi	r7,r7,27095
 2006500:	e23ffb17 	ldw	r8,-20(fp)
 2006504:	3a0fff32 	custom	252,r7,r7,r8
 2006508:	31cfff72 	custom	253,r7,r6,r7
 200650c:	e1bffb17 	ldw	r6,-20(fp)
 2006510:	398dff32 	custom	252,r6,r7,r6
 2006514:	298dff72 	custom	253,r6,r5,r6
 2006518:	e17ffb17 	ldw	r5,-20(fp)
 200651c:	314bff32 	custom	252,r5,r6,r5
 2006520:	214bff72 	custom	253,r5,r4,r5
 2006524:	e13ffb17 	ldw	r4,-20(fp)
 2006528:	2909ff32 	custom	252,r4,r5,r4
 200652c:	1909ff72 	custom	253,r4,r3,r4
 2006530:	e0fffb17 	ldw	r3,-20(fp)
 2006534:	20c7ff32 	custom	252,r3,r4,r3
 2006538:	10c7ff72 	custom	253,r3,r2,r3
 200653c:	e0bffa17 	ldw	r2,-24(fp)
 2006540:	1885ff32 	custom	252,r2,r3,r2
 2006544:	e0bffc15 	stw	r2,-16(fp)
	s2 = w*(aT[1]+w*(aT[3]+w*(aT[5]+w*(aT[7]+w*aT[9]))));
 2006548:	00af9374 	movhi	r2,48717
 200654c:	10b33344 	addi	r2,r2,-13107
 2006550:	00ef7934 	movhi	r3,48612
 2006554:	18e38e04 	addi	r3,r3,-29128
 2006558:	012f67b4 	movhi	r4,48542
 200655c:	2121e544 	addi	r4,r4,-30827
 2006560:	016f5bf4 	movhi	r5,48495
 2006564:	297c5ac4 	addi	r5,r5,-3733
 2006568:	01af45b4 	movhi	r6,48406
 200656c:	31a88844 	addi	r6,r6,-24031
 2006570:	e1fffb17 	ldw	r7,-20(fp)
 2006574:	31cdff32 	custom	252,r6,r6,r7
 2006578:	298dff72 	custom	253,r6,r5,r6
 200657c:	e17ffb17 	ldw	r5,-20(fp)
 2006580:	314bff32 	custom	252,r5,r6,r5
 2006584:	214bff72 	custom	253,r5,r4,r5
 2006588:	e13ffb17 	ldw	r4,-20(fp)
 200658c:	2909ff32 	custom	252,r4,r5,r4
 2006590:	1909ff72 	custom	253,r4,r3,r4
 2006594:	e0fffb17 	ldw	r3,-20(fp)
 2006598:	20c7ff32 	custom	252,r3,r4,r3
 200659c:	10c7ff72 	custom	253,r3,r2,r3
 20065a0:	e0bffb17 	ldw	r2,-20(fp)
 20065a4:	1885ff32 	custom	252,r2,r3,r2
 20065a8:	e0bffd15 	stw	r2,-12(fp)
	if (id<0) return x - x*(s1+s2);
 20065ac:	e0bff717 	ldw	r2,-36(fp)
 20065b0:	1000080e 	bge	r2,zero,20065d4 <atanf+0x2d8>
 20065b4:	e0fffc17 	ldw	r3,-16(fp)
 20065b8:	e0bffd17 	ldw	r2,-12(fp)
 20065bc:	1887ff72 	custom	253,r3,r3,r2
 20065c0:	e0bfff17 	ldw	r2,-4(fp)
 20065c4:	1885ff32 	custom	252,r2,r3,r2
 20065c8:	e0ffff17 	ldw	r3,-4(fp)
 20065cc:	1885ffb2 	custom	254,r2,r3,r2
 20065d0:	00001f06 	br	2006650 <atanf+0x354>
	else {
	    z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
 20065d4:	008080b4 	movhi	r2,514
 20065d8:	1089af04 	addi	r2,r2,9916
 20065dc:	e0fff717 	ldw	r3,-36(fp)
 20065e0:	18c7883a 	add	r3,r3,r3
 20065e4:	18c7883a 	add	r3,r3,r3
 20065e8:	10c5883a 	add	r2,r2,r3
 20065ec:	11000017 	ldw	r4,0(r2)
 20065f0:	e0fffc17 	ldw	r3,-16(fp)
 20065f4:	e0bffd17 	ldw	r2,-12(fp)
 20065f8:	1887ff72 	custom	253,r3,r3,r2
 20065fc:	e0bfff17 	ldw	r2,-4(fp)
 2006600:	188bff32 	custom	252,r5,r3,r2
 2006604:	008080b4 	movhi	r2,514
 2006608:	1089b304 	addi	r2,r2,9932
 200660c:	e0fff717 	ldw	r3,-36(fp)
 2006610:	18c7883a 	add	r3,r3,r3
 2006614:	18c7883a 	add	r3,r3,r3
 2006618:	10c7883a 	add	r3,r2,r3
 200661c:	18800017 	ldw	r2,0(r3)
 2006620:	2887ffb2 	custom	254,r3,r5,r2
 2006624:	e0bfff17 	ldw	r2,-4(fp)
 2006628:	1885ffb2 	custom	254,r2,r3,r2
 200662c:	2085ffb2 	custom	254,r2,r4,r2
 2006630:	e0bffa15 	stw	r2,-24(fp)
	    return (hx<0)? -z:z;
 2006634:	e0bff817 	ldw	r2,-32(fp)
 2006638:	1000030e 	bge	r2,zero,2006648 <atanf+0x34c>
 200663c:	e0bffa17 	ldw	r2,-24(fp)
 2006640:	1005f872 	custom	225,r2,r2,zero
 2006644:	00000106 	br	200664c <atanf+0x350>
 2006648:	e0bffa17 	ldw	r2,-24(fp)
 200664c:	0001883a 	nop
 2006650:	1007883a 	mov	r3,r2
	}
}
 2006654:	1805883a 	mov	r2,r3
 2006658:	e037883a 	mov	sp,fp
 200665c:	dfc00117 	ldw	ra,4(sp)
 2006660:	df000017 	ldw	fp,0(sp)
 2006664:	dec00204 	addi	sp,sp,8
 2006668:	f800283a 	ret

0200666c <fabsf>:
	float fabsf(float x)
#else
	float fabsf(x)
	float x;
#endif
{
 200666c:	defffb04 	addi	sp,sp,-20
 2006670:	df000415 	stw	fp,16(sp)
 2006674:	df000404 	addi	fp,sp,16
 2006678:	e13fff15 	stw	r4,-4(fp)
	__uint32_t ix;
	GET_FLOAT_WORD(ix,x);
 200667c:	e0bfff17 	ldw	r2,-4(fp)
 2006680:	e0bffd15 	stw	r2,-12(fp)
 2006684:	e0bffd17 	ldw	r2,-12(fp)
 2006688:	e0bffc15 	stw	r2,-16(fp)
	SET_FLOAT_WORD(x,ix&0x7fffffff);
 200668c:	e0fffc17 	ldw	r3,-16(fp)
 2006690:	00a00034 	movhi	r2,32768
 2006694:	10bfffc4 	addi	r2,r2,-1
 2006698:	1884703a 	and	r2,r3,r2
 200669c:	e0bffe15 	stw	r2,-8(fp)
 20066a0:	e0bffe17 	ldw	r2,-8(fp)
 20066a4:	e0bfff15 	stw	r2,-4(fp)
        return x;
 20066a8:	e0bfff17 	ldw	r2,-4(fp)
 20066ac:	1007883a 	mov	r3,r2
}
 20066b0:	1805883a 	mov	r2,r3
 20066b4:	e037883a 	mov	sp,fp
 20066b8:	df000017 	ldw	fp,0(sp)
 20066bc:	dec00104 	addi	sp,sp,4
 20066c0:	f800283a 	ret

020066c4 <floorf>:
	float floorf(float x)
#else
	float floorf(x)
	float x;
#endif
{
 20066c4:	defff804 	addi	sp,sp,-32
 20066c8:	df000715 	stw	fp,28(sp)
 20066cc:	df000704 	addi	fp,sp,28
 20066d0:	e13fff15 	stw	r4,-4(fp)
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
 20066d4:	e0bfff17 	ldw	r2,-4(fp)
 20066d8:	e0bffd15 	stw	r2,-12(fp)
 20066dc:	e0bffd17 	ldw	r2,-12(fp)
 20066e0:	e0bff915 	stw	r2,-28(fp)
	ix = (i0&0x7fffffff);
 20066e4:	e0fff917 	ldw	r3,-28(fp)
 20066e8:	00a00034 	movhi	r2,32768
 20066ec:	10bfffc4 	addi	r2,r2,-1
 20066f0:	1884703a 	and	r2,r3,r2
 20066f4:	e0bffa15 	stw	r2,-24(fp)
	j0 = (ix>>23)-0x7f;
 20066f8:	e0bffa17 	ldw	r2,-24(fp)
 20066fc:	1004d5fa 	srli	r2,r2,23
 2006700:	10bfe044 	addi	r2,r2,-127
 2006704:	e0bffb15 	stw	r2,-20(fp)
	if(j0<23) {
 2006708:	e0bffb17 	ldw	r2,-20(fp)
 200670c:	108005c8 	cmpgei	r2,r2,23
 2006710:	1000321e 	bne	r2,zero,20067dc <floorf+0x118>
	    if(j0<0) { 	/* raise inexact if x != 0 */
 2006714:	e0bffb17 	ldw	r2,-20(fp)
 2006718:	1000100e 	bge	r2,zero,200675c <floorf+0x98>
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
 200671c:	009c52b4 	movhi	r2,29002
 2006720:	10bcb284 	addi	r2,r2,-3382
 2006724:	e0ffff17 	ldw	r3,-4(fp)
 2006728:	10c5ff72 	custom	253,r2,r2,r3
 200672c:	0007883a 	mov	r3,zero
 2006730:	10c5f972 	custom	229,r2,r2,r3
 2006734:	10003126 	beq	r2,zero,20067fc <floorf+0x138>
		    if(i0>=0) {i0=0;} 
 2006738:	e0bff917 	ldw	r2,-28(fp)
 200673c:	10000216 	blt	r2,zero,2006748 <floorf+0x84>
 2006740:	e03ff915 	stw	zero,-28(fp)
 2006744:	00002d06 	br	20067fc <floorf+0x138>
		    else if(!FLT_UWORD_IS_ZERO(ix))
 2006748:	e0bffa17 	ldw	r2,-24(fp)
 200674c:	10002b26 	beq	r2,zero,20067fc <floorf+0x138>
			{ i0=0xbf800000;}
 2006750:	00afe034 	movhi	r2,49024
 2006754:	e0bff915 	stw	r2,-28(fp)
 2006758:	00002806 	br	20067fc <floorf+0x138>
		}
	    } else {
		i = (0x007fffff)>>j0;
 200675c:	00802034 	movhi	r2,128
 2006760:	10bfffc4 	addi	r2,r2,-1
 2006764:	e0fffb17 	ldw	r3,-20(fp)
 2006768:	10c5d83a 	sra	r2,r2,r3
 200676c:	e0bffc15 	stw	r2,-16(fp)
		if((i0&i)==0) return x; /* x is integral */
 2006770:	e0fff917 	ldw	r3,-28(fp)
 2006774:	e0bffc17 	ldw	r2,-16(fp)
 2006778:	1884703a 	and	r2,r3,r2
 200677c:	1000021e 	bne	r2,zero,2006788 <floorf+0xc4>
 2006780:	e0bfff17 	ldw	r2,-4(fp)
 2006784:	00002206 	br	2006810 <floorf+0x14c>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
 2006788:	009c52b4 	movhi	r2,29002
 200678c:	10bcb284 	addi	r2,r2,-3382
 2006790:	e0ffff17 	ldw	r3,-4(fp)
 2006794:	10c5ff72 	custom	253,r2,r2,r3
 2006798:	0007883a 	mov	r3,zero
 200679c:	10c5f972 	custom	229,r2,r2,r3
 20067a0:	10001626 	beq	r2,zero,20067fc <floorf+0x138>
		    if(i0<0) i0 += (0x00800000)>>j0;
 20067a4:	e0bff917 	ldw	r2,-28(fp)
 20067a8:	1000060e 	bge	r2,zero,20067c4 <floorf+0x100>
 20067ac:	00c02034 	movhi	r3,128
 20067b0:	e0bffb17 	ldw	r2,-20(fp)
 20067b4:	1885d83a 	sra	r2,r3,r2
 20067b8:	e0fff917 	ldw	r3,-28(fp)
 20067bc:	1885883a 	add	r2,r3,r2
 20067c0:	e0bff915 	stw	r2,-28(fp)
		    i0 &= (~i);
 20067c4:	e0bffc17 	ldw	r2,-16(fp)
 20067c8:	0086303a 	nor	r3,zero,r2
 20067cc:	e0bff917 	ldw	r2,-28(fp)
 20067d0:	1884703a 	and	r2,r3,r2
 20067d4:	e0bff915 	stw	r2,-28(fp)
 20067d8:	00000806 	br	20067fc <floorf+0x138>
		}
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
 20067dc:	e0fffa17 	ldw	r3,-24(fp)
 20067e0:	009fe034 	movhi	r2,32640
 20067e4:	18800336 	bltu	r3,r2,20067f4 <floorf+0x130>
 20067e8:	e0bfff17 	ldw	r2,-4(fp)
 20067ec:	1085ff72 	custom	253,r2,r2,r2
 20067f0:	00000706 	br	2006810 <floorf+0x14c>
	    else return x;		/* x is integral */
 20067f4:	e0bfff17 	ldw	r2,-4(fp)
 20067f8:	00000506 	br	2006810 <floorf+0x14c>
	}
	SET_FLOAT_WORD(x,i0);
 20067fc:	e0bff917 	ldw	r2,-28(fp)
 2006800:	e0bffe15 	stw	r2,-8(fp)
 2006804:	e0bffe17 	ldw	r2,-8(fp)
 2006808:	e0bfff15 	stw	r2,-4(fp)
	return x;
 200680c:	e0bfff17 	ldw	r2,-4(fp)
 2006810:	1007883a 	mov	r3,r2
}
 2006814:	1805883a 	mov	r2,r3
 2006818:	e037883a 	mov	sp,fp
 200681c:	df000017 	ldw	fp,0(sp)
 2006820:	dec00104 	addi	sp,sp,4
 2006824:	f800283a 	ret

02006828 <scalbnf>:
	float scalbnf (float x, int n)
#else
	float scalbnf (x,n)
	float x; int n;
#endif
{
 2006828:	defff504 	addi	sp,sp,-44
 200682c:	dfc00a15 	stw	ra,40(sp)
 2006830:	df000915 	stw	fp,36(sp)
 2006834:	df000904 	addi	fp,sp,36
 2006838:	e13ffe15 	stw	r4,-8(fp)
 200683c:	e17fff15 	stw	r5,-4(fp)
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
 2006840:	e0bffe17 	ldw	r2,-8(fp)
 2006844:	e0bffa15 	stw	r2,-24(fp)
 2006848:	e0bffa17 	ldw	r2,-24(fp)
 200684c:	e0bff815 	stw	r2,-32(fp)
	hx = ix&0x7fffffff;
 2006850:	e0fff817 	ldw	r3,-32(fp)
 2006854:	00a00034 	movhi	r2,32768
 2006858:	10bfffc4 	addi	r2,r2,-1
 200685c:	1884703a 	and	r2,r3,r2
 2006860:	e0bff915 	stw	r2,-28(fp)
        k = hx>>23;		/* extract exponent */
 2006864:	e0bff917 	ldw	r2,-28(fp)
 2006868:	1004d5fa 	srli	r2,r2,23
 200686c:	e0bff715 	stw	r2,-36(fp)
	if (FLT_UWORD_IS_ZERO(hx))
 2006870:	e0bff917 	ldw	r2,-28(fp)
 2006874:	1000021e 	bne	r2,zero,2006880 <scalbnf+0x58>
	    return x;
 2006878:	e0bffe17 	ldw	r2,-8(fp)
 200687c:	00006806 	br	2006a20 <scalbnf+0x1f8>
        if (!FLT_UWORD_IS_FINITE(hx))
 2006880:	e0fff917 	ldw	r3,-28(fp)
 2006884:	009fe034 	movhi	r2,32640
 2006888:	18800336 	bltu	r3,r2,2006898 <scalbnf+0x70>
	    return x+x;		/* NaN or Inf */
 200688c:	e0bffe17 	ldw	r2,-8(fp)
 2006890:	1085ff72 	custom	253,r2,r2,r2
 2006894:	00006206 	br	2006a20 <scalbnf+0x1f8>
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
 2006898:	e0fff917 	ldw	r3,-28(fp)
 200689c:	00802034 	movhi	r2,128
 20068a0:	1880162e 	bgeu	r3,r2,20068fc <scalbnf+0xd4>
	    x *= two25;
 20068a4:	00930034 	movhi	r2,19456
 20068a8:	e0fffe17 	ldw	r3,-8(fp)
 20068ac:	1885ff32 	custom	252,r2,r3,r2
 20068b0:	e0bffe15 	stw	r2,-8(fp)
	    GET_FLOAT_WORD(ix,x);
 20068b4:	e0bffe17 	ldw	r2,-8(fp)
 20068b8:	e0bffb15 	stw	r2,-20(fp)
 20068bc:	e0bffb17 	ldw	r2,-20(fp)
 20068c0:	e0bff815 	stw	r2,-32(fp)
	    k = ((ix&0x7f800000)>>23) - 25; 
 20068c4:	e0bff817 	ldw	r2,-32(fp)
 20068c8:	109fe02c 	andhi	r2,r2,32640
 20068cc:	1005d5fa 	srai	r2,r2,23
 20068d0:	10bff9c4 	addi	r2,r2,-25
 20068d4:	e0bff715 	stw	r2,-36(fp)
            if (n< -50000) return tiny*x; 	/*underflow*/
 20068d8:	e0ffff17 	ldw	r3,-4(fp)
 20068dc:	00bffff4 	movhi	r2,65535
 20068e0:	108f2c04 	addi	r2,r2,15536
 20068e4:	1880050e 	bge	r3,r2,20068fc <scalbnf+0xd4>
 20068e8:	008368b4 	movhi	r2,3490
 20068ec:	10909804 	addi	r2,r2,16992
 20068f0:	e0fffe17 	ldw	r3,-8(fp)
 20068f4:	10c5ff32 	custom	252,r2,r2,r3
 20068f8:	00004906 	br	2006a20 <scalbnf+0x1f8>
        }
        k = k+n; 
 20068fc:	e0fff717 	ldw	r3,-36(fp)
 2006900:	e0bfff17 	ldw	r2,-4(fp)
 2006904:	1885883a 	add	r2,r3,r2
 2006908:	e0bff715 	stw	r2,-36(fp)
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
 200690c:	e0bff717 	ldw	r2,-36(fp)
 2006910:	10803fd0 	cmplti	r2,r2,255
 2006914:	10000a1e 	bne	r2,zero,2006940 <scalbnf+0x118>
 2006918:	009c52b4 	movhi	r2,29002
 200691c:	10bcb284 	addi	r2,r2,-3382
 2006920:	e17ffe17 	ldw	r5,-8(fp)
 2006924:	1009883a 	mov	r4,r2
 2006928:	2006a3c0 	call	2006a3c <copysignf>
 200692c:	1007883a 	mov	r3,r2
 2006930:	009c52b4 	movhi	r2,29002
 2006934:	10bcb284 	addi	r2,r2,-3382
 2006938:	1885ff32 	custom	252,r2,r3,r2
 200693c:	00003806 	br	2006a20 <scalbnf+0x1f8>
        if (k > 0) 				/* normal result */
 2006940:	e0bff717 	ldw	r2,-36(fp)
 2006944:	00800c0e 	bge	zero,r2,2006978 <scalbnf+0x150>
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
 2006948:	e0fff817 	ldw	r3,-32(fp)
 200694c:	00a02034 	movhi	r2,32896
 2006950:	10bfffc4 	addi	r2,r2,-1
 2006954:	1884703a 	and	r2,r3,r2
 2006958:	e0fff717 	ldw	r3,-36(fp)
 200695c:	180695fa 	slli	r3,r3,23
 2006960:	10c4b03a 	or	r2,r2,r3
 2006964:	e0bffc15 	stw	r2,-16(fp)
 2006968:	e0bffc17 	ldw	r2,-16(fp)
 200696c:	e0bffe15 	stw	r2,-8(fp)
 2006970:	e0bffe17 	ldw	r2,-8(fp)
 2006974:	00002a06 	br	2006a20 <scalbnf+0x1f8>
        if (k < FLT_SMALLEST_EXP) {
 2006978:	e0bff717 	ldw	r2,-36(fp)
 200697c:	10bffa88 	cmpgei	r2,r2,-22
 2006980:	1000171e 	bne	r2,zero,20069e0 <scalbnf+0x1b8>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
 2006984:	e0bfff17 	ldw	r2,-4(fp)
 2006988:	00f0d414 	movui	r3,50000
 200698c:	18800a0e 	bge	r3,r2,20069b8 <scalbnf+0x190>
		return huge*copysignf(huge,x);	/*overflow*/
 2006990:	009c52b4 	movhi	r2,29002
 2006994:	10bcb284 	addi	r2,r2,-3382
 2006998:	e17ffe17 	ldw	r5,-8(fp)
 200699c:	1009883a 	mov	r4,r2
 20069a0:	2006a3c0 	call	2006a3c <copysignf>
 20069a4:	1007883a 	mov	r3,r2
 20069a8:	009c52b4 	movhi	r2,29002
 20069ac:	10bcb284 	addi	r2,r2,-3382
 20069b0:	1885ff32 	custom	252,r2,r3,r2
 20069b4:	00001a06 	br	2006a20 <scalbnf+0x1f8>
	    else return tiny*copysignf(tiny,x);	/*underflow*/
 20069b8:	008368b4 	movhi	r2,3490
 20069bc:	10909804 	addi	r2,r2,16992
 20069c0:	e17ffe17 	ldw	r5,-8(fp)
 20069c4:	1009883a 	mov	r4,r2
 20069c8:	2006a3c0 	call	2006a3c <copysignf>
 20069cc:	1007883a 	mov	r3,r2
 20069d0:	008368b4 	movhi	r2,3490
 20069d4:	10909804 	addi	r2,r2,16992
 20069d8:	1885ff32 	custom	252,r2,r3,r2
 20069dc:	00001006 	br	2006a20 <scalbnf+0x1f8>
        }
        k += 25;				/* subnormal result */
 20069e0:	e0bff717 	ldw	r2,-36(fp)
 20069e4:	10800644 	addi	r2,r2,25
 20069e8:	e0bff715 	stw	r2,-36(fp)
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
 20069ec:	e0fff817 	ldw	r3,-32(fp)
 20069f0:	00a02034 	movhi	r2,32896
 20069f4:	10bfffc4 	addi	r2,r2,-1
 20069f8:	1884703a 	and	r2,r3,r2
 20069fc:	e0fff717 	ldw	r3,-36(fp)
 2006a00:	180695fa 	slli	r3,r3,23
 2006a04:	10c4b03a 	or	r2,r2,r3
 2006a08:	e0bffd15 	stw	r2,-12(fp)
 2006a0c:	e0bffd17 	ldw	r2,-12(fp)
 2006a10:	e0bffe15 	stw	r2,-8(fp)
        return x*twom25;
 2006a14:	00ccc034 	movhi	r3,13056
 2006a18:	e0bffe17 	ldw	r2,-8(fp)
 2006a1c:	1885ff32 	custom	252,r2,r3,r2
 2006a20:	1007883a 	mov	r3,r2
}
 2006a24:	1805883a 	mov	r2,r3
 2006a28:	e037883a 	mov	sp,fp
 2006a2c:	dfc00117 	ldw	ra,4(sp)
 2006a30:	df000017 	ldw	fp,0(sp)
 2006a34:	dec00204 	addi	sp,sp,8
 2006a38:	f800283a 	ret

02006a3c <copysignf>:
	float copysignf(float x, float y)
#else
	float copysignf(x,y)
	float x,y;
#endif
{
 2006a3c:	defff804 	addi	sp,sp,-32
 2006a40:	df000715 	stw	fp,28(sp)
 2006a44:	df000704 	addi	fp,sp,28
 2006a48:	e13ffe15 	stw	r4,-8(fp)
 2006a4c:	e17fff15 	stw	r5,-4(fp)
	__uint32_t ix,iy;
	GET_FLOAT_WORD(ix,x);
 2006a50:	e0bffe17 	ldw	r2,-8(fp)
 2006a54:	e0bffb15 	stw	r2,-20(fp)
 2006a58:	e0bffb17 	ldw	r2,-20(fp)
 2006a5c:	e0bff915 	stw	r2,-28(fp)
	GET_FLOAT_WORD(iy,y);
 2006a60:	e0bfff17 	ldw	r2,-4(fp)
 2006a64:	e0bffc15 	stw	r2,-16(fp)
 2006a68:	e0bffc17 	ldw	r2,-16(fp)
 2006a6c:	e0bffa15 	stw	r2,-24(fp)
	SET_FLOAT_WORD(x,(ix&0x7fffffff)|(iy&0x80000000));
 2006a70:	e0fff917 	ldw	r3,-28(fp)
 2006a74:	00a00034 	movhi	r2,32768
 2006a78:	10bfffc4 	addi	r2,r2,-1
 2006a7c:	1886703a 	and	r3,r3,r2
 2006a80:	e0bffa17 	ldw	r2,-24(fp)
 2006a84:	10a0002c 	andhi	r2,r2,32768
 2006a88:	1884b03a 	or	r2,r3,r2
 2006a8c:	e0bffd15 	stw	r2,-12(fp)
 2006a90:	e0bffd17 	ldw	r2,-12(fp)
 2006a94:	e0bffe15 	stw	r2,-8(fp)
        return x;
 2006a98:	e0bffe17 	ldw	r2,-8(fp)
 2006a9c:	1007883a 	mov	r3,r2
}
 2006aa0:	1805883a 	mov	r2,r3
 2006aa4:	e037883a 	mov	sp,fp
 2006aa8:	df000017 	ldw	fp,0(sp)
 2006aac:	dec00104 	addi	sp,sp,4
 2006ab0:	f800283a 	ret

02006ab4 <__divsi3>:
 2006ab4:	20001b16 	blt	r4,zero,2006b24 <__divsi3+0x70>
 2006ab8:	000f883a 	mov	r7,zero
 2006abc:	28001616 	blt	r5,zero,2006b18 <__divsi3+0x64>
 2006ac0:	200d883a 	mov	r6,r4
 2006ac4:	29001a2e 	bgeu	r5,r4,2006b30 <__divsi3+0x7c>
 2006ac8:	00800804 	movi	r2,32
 2006acc:	00c00044 	movi	r3,1
 2006ad0:	00000106 	br	2006ad8 <__divsi3+0x24>
 2006ad4:	10000d26 	beq	r2,zero,2006b0c <__divsi3+0x58>
 2006ad8:	294b883a 	add	r5,r5,r5
 2006adc:	10bfffc4 	addi	r2,r2,-1
 2006ae0:	18c7883a 	add	r3,r3,r3
 2006ae4:	293ffb36 	bltu	r5,r4,2006ad4 <__divsi3+0x20>
 2006ae8:	0005883a 	mov	r2,zero
 2006aec:	18000726 	beq	r3,zero,2006b0c <__divsi3+0x58>
 2006af0:	0005883a 	mov	r2,zero
 2006af4:	31400236 	bltu	r6,r5,2006b00 <__divsi3+0x4c>
 2006af8:	314dc83a 	sub	r6,r6,r5
 2006afc:	10c4b03a 	or	r2,r2,r3
 2006b00:	1806d07a 	srli	r3,r3,1
 2006b04:	280ad07a 	srli	r5,r5,1
 2006b08:	183ffa1e 	bne	r3,zero,2006af4 <__divsi3+0x40>
 2006b0c:	38000126 	beq	r7,zero,2006b14 <__divsi3+0x60>
 2006b10:	0085c83a 	sub	r2,zero,r2
 2006b14:	f800283a 	ret
 2006b18:	014bc83a 	sub	r5,zero,r5
 2006b1c:	39c0005c 	xori	r7,r7,1
 2006b20:	003fe706 	br	2006ac0 <__divsi3+0xc>
 2006b24:	0109c83a 	sub	r4,zero,r4
 2006b28:	01c00044 	movi	r7,1
 2006b2c:	003fe306 	br	2006abc <__divsi3+0x8>
 2006b30:	00c00044 	movi	r3,1
 2006b34:	003fee06 	br	2006af0 <__divsi3+0x3c>

02006b38 <__modsi3>:
 2006b38:	20001716 	blt	r4,zero,2006b98 <__modsi3+0x60>
 2006b3c:	000f883a 	mov	r7,zero
 2006b40:	2005883a 	mov	r2,r4
 2006b44:	28001216 	blt	r5,zero,2006b90 <__modsi3+0x58>
 2006b48:	2900162e 	bgeu	r5,r4,2006ba4 <__modsi3+0x6c>
 2006b4c:	01800804 	movi	r6,32
 2006b50:	00c00044 	movi	r3,1
 2006b54:	00000106 	br	2006b5c <__modsi3+0x24>
 2006b58:	30000a26 	beq	r6,zero,2006b84 <__modsi3+0x4c>
 2006b5c:	294b883a 	add	r5,r5,r5
 2006b60:	31bfffc4 	addi	r6,r6,-1
 2006b64:	18c7883a 	add	r3,r3,r3
 2006b68:	293ffb36 	bltu	r5,r4,2006b58 <__modsi3+0x20>
 2006b6c:	18000526 	beq	r3,zero,2006b84 <__modsi3+0x4c>
 2006b70:	1806d07a 	srli	r3,r3,1
 2006b74:	11400136 	bltu	r2,r5,2006b7c <__modsi3+0x44>
 2006b78:	1145c83a 	sub	r2,r2,r5
 2006b7c:	280ad07a 	srli	r5,r5,1
 2006b80:	183ffb1e 	bne	r3,zero,2006b70 <__modsi3+0x38>
 2006b84:	38000126 	beq	r7,zero,2006b8c <__modsi3+0x54>
 2006b88:	0085c83a 	sub	r2,zero,r2
 2006b8c:	f800283a 	ret
 2006b90:	014bc83a 	sub	r5,zero,r5
 2006b94:	003fec06 	br	2006b48 <__modsi3+0x10>
 2006b98:	0109c83a 	sub	r4,zero,r4
 2006b9c:	01c00044 	movi	r7,1
 2006ba0:	003fe706 	br	2006b40 <__modsi3+0x8>
 2006ba4:	00c00044 	movi	r3,1
 2006ba8:	003ff106 	br	2006b70 <__modsi3+0x38>

02006bac <__udivsi3>:
 2006bac:	200d883a 	mov	r6,r4
 2006bb0:	2900152e 	bgeu	r5,r4,2006c08 <__udivsi3+0x5c>
 2006bb4:	28001416 	blt	r5,zero,2006c08 <__udivsi3+0x5c>
 2006bb8:	00800804 	movi	r2,32
 2006bbc:	00c00044 	movi	r3,1
 2006bc0:	00000206 	br	2006bcc <__udivsi3+0x20>
 2006bc4:	10000e26 	beq	r2,zero,2006c00 <__udivsi3+0x54>
 2006bc8:	28000516 	blt	r5,zero,2006be0 <__udivsi3+0x34>
 2006bcc:	294b883a 	add	r5,r5,r5
 2006bd0:	10bfffc4 	addi	r2,r2,-1
 2006bd4:	18c7883a 	add	r3,r3,r3
 2006bd8:	293ffa36 	bltu	r5,r4,2006bc4 <__udivsi3+0x18>
 2006bdc:	18000826 	beq	r3,zero,2006c00 <__udivsi3+0x54>
 2006be0:	0005883a 	mov	r2,zero
 2006be4:	31400236 	bltu	r6,r5,2006bf0 <__udivsi3+0x44>
 2006be8:	314dc83a 	sub	r6,r6,r5
 2006bec:	10c4b03a 	or	r2,r2,r3
 2006bf0:	1806d07a 	srli	r3,r3,1
 2006bf4:	280ad07a 	srli	r5,r5,1
 2006bf8:	183ffa1e 	bne	r3,zero,2006be4 <__udivsi3+0x38>
 2006bfc:	f800283a 	ret
 2006c00:	0005883a 	mov	r2,zero
 2006c04:	f800283a 	ret
 2006c08:	00c00044 	movi	r3,1
 2006c0c:	003ff406 	br	2006be0 <__udivsi3+0x34>

02006c10 <__umodsi3>:
 2006c10:	2005883a 	mov	r2,r4
 2006c14:	2900122e 	bgeu	r5,r4,2006c60 <__umodsi3+0x50>
 2006c18:	28001116 	blt	r5,zero,2006c60 <__umodsi3+0x50>
 2006c1c:	01800804 	movi	r6,32
 2006c20:	00c00044 	movi	r3,1
 2006c24:	00000206 	br	2006c30 <__umodsi3+0x20>
 2006c28:	30000c26 	beq	r6,zero,2006c5c <__umodsi3+0x4c>
 2006c2c:	28000516 	blt	r5,zero,2006c44 <__umodsi3+0x34>
 2006c30:	294b883a 	add	r5,r5,r5
 2006c34:	31bfffc4 	addi	r6,r6,-1
 2006c38:	18c7883a 	add	r3,r3,r3
 2006c3c:	293ffa36 	bltu	r5,r4,2006c28 <__umodsi3+0x18>
 2006c40:	18000626 	beq	r3,zero,2006c5c <__umodsi3+0x4c>
 2006c44:	1806d07a 	srli	r3,r3,1
 2006c48:	11400136 	bltu	r2,r5,2006c50 <__umodsi3+0x40>
 2006c4c:	1145c83a 	sub	r2,r2,r5
 2006c50:	280ad07a 	srli	r5,r5,1
 2006c54:	183ffb1e 	bne	r3,zero,2006c44 <__umodsi3+0x34>
 2006c58:	f800283a 	ret
 2006c5c:	f800283a 	ret
 2006c60:	00c00044 	movi	r3,1
 2006c64:	003ff706 	br	2006c44 <__umodsi3+0x34>

02006c68 <__adddf3>:
 2006c68:	02c00434 	movhi	r11,16
 2006c6c:	5affffc4 	addi	r11,r11,-1
 2006c70:	2806d7fa 	srli	r3,r5,31
 2006c74:	2ad4703a 	and	r10,r5,r11
 2006c78:	3ad2703a 	and	r9,r7,r11
 2006c7c:	3804d53a 	srli	r2,r7,20
 2006c80:	3018d77a 	srli	r12,r6,29
 2006c84:	280ad53a 	srli	r5,r5,20
 2006c88:	501490fa 	slli	r10,r10,3
 2006c8c:	2010d77a 	srli	r8,r4,29
 2006c90:	481290fa 	slli	r9,r9,3
 2006c94:	380ed7fa 	srli	r7,r7,31
 2006c98:	defffb04 	addi	sp,sp,-20
 2006c9c:	dc800215 	stw	r18,8(sp)
 2006ca0:	dc400115 	stw	r17,4(sp)
 2006ca4:	dc000015 	stw	r16,0(sp)
 2006ca8:	dfc00415 	stw	ra,16(sp)
 2006cac:	dcc00315 	stw	r19,12(sp)
 2006cb0:	1c803fcc 	andi	r18,r3,255
 2006cb4:	2c01ffcc 	andi	r16,r5,2047
 2006cb8:	5210b03a 	or	r8,r10,r8
 2006cbc:	202290fa 	slli	r17,r4,3
 2006cc0:	1081ffcc 	andi	r2,r2,2047
 2006cc4:	4b12b03a 	or	r9,r9,r12
 2006cc8:	300c90fa 	slli	r6,r6,3
 2006ccc:	91c07526 	beq	r18,r7,2006ea4 <__adddf3+0x23c>
 2006cd0:	8087c83a 	sub	r3,r16,r2
 2006cd4:	00c0ab0e 	bge	zero,r3,2006f84 <__adddf3+0x31c>
 2006cd8:	10002a1e 	bne	r2,zero,2006d84 <__adddf3+0x11c>
 2006cdc:	4984b03a 	or	r2,r9,r6
 2006ce0:	1000961e 	bne	r2,zero,2006f3c <__adddf3+0x2d4>
 2006ce4:	888001cc 	andi	r2,r17,7
 2006ce8:	10000726 	beq	r2,zero,2006d08 <__adddf3+0xa0>
 2006cec:	888003cc 	andi	r2,r17,15
 2006cf0:	00c00104 	movi	r3,4
 2006cf4:	10c00426 	beq	r2,r3,2006d08 <__adddf3+0xa0>
 2006cf8:	88c7883a 	add	r3,r17,r3
 2006cfc:	1c63803a 	cmpltu	r17,r3,r17
 2006d00:	4451883a 	add	r8,r8,r17
 2006d04:	1823883a 	mov	r17,r3
 2006d08:	4080202c 	andhi	r2,r8,128
 2006d0c:	10005926 	beq	r2,zero,2006e74 <__adddf3+0x20c>
 2006d10:	84000044 	addi	r16,r16,1
 2006d14:	0081ffc4 	movi	r2,2047
 2006d18:	8080ba26 	beq	r16,r2,2007004 <__adddf3+0x39c>
 2006d1c:	00bfe034 	movhi	r2,65408
 2006d20:	10bfffc4 	addi	r2,r2,-1
 2006d24:	4090703a 	and	r8,r8,r2
 2006d28:	4004977a 	slli	r2,r8,29
 2006d2c:	4010927a 	slli	r8,r8,9
 2006d30:	8822d0fa 	srli	r17,r17,3
 2006d34:	8401ffcc 	andi	r16,r16,2047
 2006d38:	4010d33a 	srli	r8,r8,12
 2006d3c:	9007883a 	mov	r3,r18
 2006d40:	1444b03a 	or	r2,r2,r17
 2006d44:	8401ffcc 	andi	r16,r16,2047
 2006d48:	8020953a 	slli	r16,r16,20
 2006d4c:	18c03fcc 	andi	r3,r3,255
 2006d50:	01000434 	movhi	r4,16
 2006d54:	213fffc4 	addi	r4,r4,-1
 2006d58:	180697fa 	slli	r3,r3,31
 2006d5c:	4110703a 	and	r8,r8,r4
 2006d60:	4410b03a 	or	r8,r8,r16
 2006d64:	40c6b03a 	or	r3,r8,r3
 2006d68:	dfc00417 	ldw	ra,16(sp)
 2006d6c:	dcc00317 	ldw	r19,12(sp)
 2006d70:	dc800217 	ldw	r18,8(sp)
 2006d74:	dc400117 	ldw	r17,4(sp)
 2006d78:	dc000017 	ldw	r16,0(sp)
 2006d7c:	dec00504 	addi	sp,sp,20
 2006d80:	f800283a 	ret
 2006d84:	0081ffc4 	movi	r2,2047
 2006d88:	80bfd626 	beq	r16,r2,2006ce4 <__adddf3+0x7c>
 2006d8c:	4a402034 	orhi	r9,r9,128
 2006d90:	00800e04 	movi	r2,56
 2006d94:	10c09f16 	blt	r2,r3,2007014 <__adddf3+0x3ac>
 2006d98:	008007c4 	movi	r2,31
 2006d9c:	10c0c216 	blt	r2,r3,20070a8 <__adddf3+0x440>
 2006da0:	00800804 	movi	r2,32
 2006da4:	10c5c83a 	sub	r2,r2,r3
 2006da8:	488a983a 	sll	r5,r9,r2
 2006dac:	30c8d83a 	srl	r4,r6,r3
 2006db0:	3084983a 	sll	r2,r6,r2
 2006db4:	48c6d83a 	srl	r3,r9,r3
 2006db8:	290cb03a 	or	r6,r5,r4
 2006dbc:	1004c03a 	cmpne	r2,r2,zero
 2006dc0:	308cb03a 	or	r6,r6,r2
 2006dc4:	898dc83a 	sub	r6,r17,r6
 2006dc8:	89a3803a 	cmpltu	r17,r17,r6
 2006dcc:	40d1c83a 	sub	r8,r8,r3
 2006dd0:	4451c83a 	sub	r8,r8,r17
 2006dd4:	3023883a 	mov	r17,r6
 2006dd8:	4080202c 	andhi	r2,r8,128
 2006ddc:	10002326 	beq	r2,zero,2006e6c <__adddf3+0x204>
 2006de0:	04c02034 	movhi	r19,128
 2006de4:	9cffffc4 	addi	r19,r19,-1
 2006de8:	44e6703a 	and	r19,r8,r19
 2006dec:	98007626 	beq	r19,zero,2006fc8 <__adddf3+0x360>
 2006df0:	9809883a 	mov	r4,r19
 2006df4:	20093200 	call	2009320 <__clzsi2>
 2006df8:	10fffe04 	addi	r3,r2,-8
 2006dfc:	010007c4 	movi	r4,31
 2006e00:	20c07716 	blt	r4,r3,2006fe0 <__adddf3+0x378>
 2006e04:	00800804 	movi	r2,32
 2006e08:	10c5c83a 	sub	r2,r2,r3
 2006e0c:	8884d83a 	srl	r2,r17,r2
 2006e10:	98d0983a 	sll	r8,r19,r3
 2006e14:	88e2983a 	sll	r17,r17,r3
 2006e18:	1204b03a 	or	r2,r2,r8
 2006e1c:	1c007416 	blt	r3,r16,2006ff0 <__adddf3+0x388>
 2006e20:	1c21c83a 	sub	r16,r3,r16
 2006e24:	82000044 	addi	r8,r16,1
 2006e28:	00c007c4 	movi	r3,31
 2006e2c:	1a009116 	blt	r3,r8,2007074 <__adddf3+0x40c>
 2006e30:	00c00804 	movi	r3,32
 2006e34:	1a07c83a 	sub	r3,r3,r8
 2006e38:	8a08d83a 	srl	r4,r17,r8
 2006e3c:	88e2983a 	sll	r17,r17,r3
 2006e40:	10c6983a 	sll	r3,r2,r3
 2006e44:	1210d83a 	srl	r8,r2,r8
 2006e48:	8804c03a 	cmpne	r2,r17,zero
 2006e4c:	1906b03a 	or	r3,r3,r4
 2006e50:	18a2b03a 	or	r17,r3,r2
 2006e54:	0021883a 	mov	r16,zero
 2006e58:	003fa206 	br	2006ce4 <__adddf3+0x7c>
 2006e5c:	1890b03a 	or	r8,r3,r2
 2006e60:	40017d26 	beq	r8,zero,2007458 <__adddf3+0x7f0>
 2006e64:	1011883a 	mov	r8,r2
 2006e68:	1823883a 	mov	r17,r3
 2006e6c:	888001cc 	andi	r2,r17,7
 2006e70:	103f9e1e 	bne	r2,zero,2006cec <__adddf3+0x84>
 2006e74:	4004977a 	slli	r2,r8,29
 2006e78:	8822d0fa 	srli	r17,r17,3
 2006e7c:	4010d0fa 	srli	r8,r8,3
 2006e80:	9007883a 	mov	r3,r18
 2006e84:	1444b03a 	or	r2,r2,r17
 2006e88:	0101ffc4 	movi	r4,2047
 2006e8c:	81002426 	beq	r16,r4,2006f20 <__adddf3+0x2b8>
 2006e90:	8120703a 	and	r16,r16,r4
 2006e94:	01000434 	movhi	r4,16
 2006e98:	213fffc4 	addi	r4,r4,-1
 2006e9c:	4110703a 	and	r8,r8,r4
 2006ea0:	003fa806 	br	2006d44 <__adddf3+0xdc>
 2006ea4:	8089c83a 	sub	r4,r16,r2
 2006ea8:	01005e0e 	bge	zero,r4,2007024 <__adddf3+0x3bc>
 2006eac:	10002b26 	beq	r2,zero,2006f5c <__adddf3+0x2f4>
 2006eb0:	0081ffc4 	movi	r2,2047
 2006eb4:	80bf8b26 	beq	r16,r2,2006ce4 <__adddf3+0x7c>
 2006eb8:	4a402034 	orhi	r9,r9,128
 2006ebc:	00800e04 	movi	r2,56
 2006ec0:	1100a40e 	bge	r2,r4,2007154 <__adddf3+0x4ec>
 2006ec4:	498cb03a 	or	r6,r9,r6
 2006ec8:	300ac03a 	cmpne	r5,r6,zero
 2006ecc:	0013883a 	mov	r9,zero
 2006ed0:	2c4b883a 	add	r5,r5,r17
 2006ed4:	2c63803a 	cmpltu	r17,r5,r17
 2006ed8:	4a11883a 	add	r8,r9,r8
 2006edc:	8a11883a 	add	r8,r17,r8
 2006ee0:	2823883a 	mov	r17,r5
 2006ee4:	4080202c 	andhi	r2,r8,128
 2006ee8:	103fe026 	beq	r2,zero,2006e6c <__adddf3+0x204>
 2006eec:	84000044 	addi	r16,r16,1
 2006ef0:	0081ffc4 	movi	r2,2047
 2006ef4:	8080d226 	beq	r16,r2,2007240 <__adddf3+0x5d8>
 2006ef8:	00bfe034 	movhi	r2,65408
 2006efc:	10bfffc4 	addi	r2,r2,-1
 2006f00:	4090703a 	and	r8,r8,r2
 2006f04:	880ad07a 	srli	r5,r17,1
 2006f08:	400897fa 	slli	r4,r8,31
 2006f0c:	88c0004c 	andi	r3,r17,1
 2006f10:	28e2b03a 	or	r17,r5,r3
 2006f14:	4010d07a 	srli	r8,r8,1
 2006f18:	2462b03a 	or	r17,r4,r17
 2006f1c:	003f7106 	br	2006ce4 <__adddf3+0x7c>
 2006f20:	4088b03a 	or	r4,r8,r2
 2006f24:	20014526 	beq	r4,zero,200743c <__adddf3+0x7d4>
 2006f28:	01000434 	movhi	r4,16
 2006f2c:	42000234 	orhi	r8,r8,8
 2006f30:	213fffc4 	addi	r4,r4,-1
 2006f34:	4110703a 	and	r8,r8,r4
 2006f38:	003f8206 	br	2006d44 <__adddf3+0xdc>
 2006f3c:	18ffffc4 	addi	r3,r3,-1
 2006f40:	1800491e 	bne	r3,zero,2007068 <__adddf3+0x400>
 2006f44:	898bc83a 	sub	r5,r17,r6
 2006f48:	8963803a 	cmpltu	r17,r17,r5
 2006f4c:	4251c83a 	sub	r8,r8,r9
 2006f50:	4451c83a 	sub	r8,r8,r17
 2006f54:	2823883a 	mov	r17,r5
 2006f58:	003f9f06 	br	2006dd8 <__adddf3+0x170>
 2006f5c:	4984b03a 	or	r2,r9,r6
 2006f60:	103f6026 	beq	r2,zero,2006ce4 <__adddf3+0x7c>
 2006f64:	213fffc4 	addi	r4,r4,-1
 2006f68:	2000931e 	bne	r4,zero,20071b8 <__adddf3+0x550>
 2006f6c:	898d883a 	add	r6,r17,r6
 2006f70:	3463803a 	cmpltu	r17,r6,r17
 2006f74:	4251883a 	add	r8,r8,r9
 2006f78:	8a11883a 	add	r8,r17,r8
 2006f7c:	3023883a 	mov	r17,r6
 2006f80:	003fd806 	br	2006ee4 <__adddf3+0x27c>
 2006f84:	1800541e 	bne	r3,zero,20070d8 <__adddf3+0x470>
 2006f88:	80800044 	addi	r2,r16,1
 2006f8c:	1081ffcc 	andi	r2,r2,2047
 2006f90:	00c00044 	movi	r3,1
 2006f94:	1880a00e 	bge	r3,r2,2007218 <__adddf3+0x5b0>
 2006f98:	8989c83a 	sub	r4,r17,r6
 2006f9c:	8905803a 	cmpltu	r2,r17,r4
 2006fa0:	4267c83a 	sub	r19,r8,r9
 2006fa4:	98a7c83a 	sub	r19,r19,r2
 2006fa8:	9880202c 	andhi	r2,r19,128
 2006fac:	10006326 	beq	r2,zero,200713c <__adddf3+0x4d4>
 2006fb0:	3463c83a 	sub	r17,r6,r17
 2006fb4:	4a07c83a 	sub	r3,r9,r8
 2006fb8:	344d803a 	cmpltu	r6,r6,r17
 2006fbc:	19a7c83a 	sub	r19,r3,r6
 2006fc0:	3825883a 	mov	r18,r7
 2006fc4:	983f8a1e 	bne	r19,zero,2006df0 <__adddf3+0x188>
 2006fc8:	8809883a 	mov	r4,r17
 2006fcc:	20093200 	call	2009320 <__clzsi2>
 2006fd0:	10800804 	addi	r2,r2,32
 2006fd4:	10fffe04 	addi	r3,r2,-8
 2006fd8:	010007c4 	movi	r4,31
 2006fdc:	20ff890e 	bge	r4,r3,2006e04 <__adddf3+0x19c>
 2006fe0:	10bff604 	addi	r2,r2,-40
 2006fe4:	8884983a 	sll	r2,r17,r2
 2006fe8:	0023883a 	mov	r17,zero
 2006fec:	1c3f8c0e 	bge	r3,r16,2006e20 <__adddf3+0x1b8>
 2006ff0:	023fe034 	movhi	r8,65408
 2006ff4:	423fffc4 	addi	r8,r8,-1
 2006ff8:	80e1c83a 	sub	r16,r16,r3
 2006ffc:	1210703a 	and	r8,r2,r8
 2007000:	003f3806 	br	2006ce4 <__adddf3+0x7c>
 2007004:	9007883a 	mov	r3,r18
 2007008:	0011883a 	mov	r8,zero
 200700c:	0005883a 	mov	r2,zero
 2007010:	003f4c06 	br	2006d44 <__adddf3+0xdc>
 2007014:	498cb03a 	or	r6,r9,r6
 2007018:	300cc03a 	cmpne	r6,r6,zero
 200701c:	0007883a 	mov	r3,zero
 2007020:	003f6806 	br	2006dc4 <__adddf3+0x15c>
 2007024:	20009c1e 	bne	r4,zero,2007298 <__adddf3+0x630>
 2007028:	80800044 	addi	r2,r16,1
 200702c:	1141ffcc 	andi	r5,r2,2047
 2007030:	01000044 	movi	r4,1
 2007034:	2140670e 	bge	r4,r5,20071d4 <__adddf3+0x56c>
 2007038:	0101ffc4 	movi	r4,2047
 200703c:	11007f26 	beq	r2,r4,200723c <__adddf3+0x5d4>
 2007040:	898d883a 	add	r6,r17,r6
 2007044:	4247883a 	add	r3,r8,r9
 2007048:	3451803a 	cmpltu	r8,r6,r17
 200704c:	40d1883a 	add	r8,r8,r3
 2007050:	402297fa 	slli	r17,r8,31
 2007054:	300cd07a 	srli	r6,r6,1
 2007058:	4010d07a 	srli	r8,r8,1
 200705c:	1021883a 	mov	r16,r2
 2007060:	89a2b03a 	or	r17,r17,r6
 2007064:	003f1f06 	br	2006ce4 <__adddf3+0x7c>
 2007068:	0081ffc4 	movi	r2,2047
 200706c:	80bf481e 	bne	r16,r2,2006d90 <__adddf3+0x128>
 2007070:	003f1c06 	br	2006ce4 <__adddf3+0x7c>
 2007074:	843ff844 	addi	r16,r16,-31
 2007078:	01000804 	movi	r4,32
 200707c:	1406d83a 	srl	r3,r2,r16
 2007080:	41005026 	beq	r8,r4,20071c4 <__adddf3+0x55c>
 2007084:	01001004 	movi	r4,64
 2007088:	2211c83a 	sub	r8,r4,r8
 200708c:	1204983a 	sll	r2,r2,r8
 2007090:	88a2b03a 	or	r17,r17,r2
 2007094:	8822c03a 	cmpne	r17,r17,zero
 2007098:	1c62b03a 	or	r17,r3,r17
 200709c:	0011883a 	mov	r8,zero
 20070a0:	0021883a 	mov	r16,zero
 20070a4:	003f7106 	br	2006e6c <__adddf3+0x204>
 20070a8:	193ff804 	addi	r4,r3,-32
 20070ac:	00800804 	movi	r2,32
 20070b0:	4908d83a 	srl	r4,r9,r4
 20070b4:	18804526 	beq	r3,r2,20071cc <__adddf3+0x564>
 20070b8:	00801004 	movi	r2,64
 20070bc:	10c5c83a 	sub	r2,r2,r3
 20070c0:	4886983a 	sll	r3,r9,r2
 20070c4:	198cb03a 	or	r6,r3,r6
 20070c8:	300cc03a 	cmpne	r6,r6,zero
 20070cc:	218cb03a 	or	r6,r4,r6
 20070d0:	0007883a 	mov	r3,zero
 20070d4:	003f3b06 	br	2006dc4 <__adddf3+0x15c>
 20070d8:	80002a26 	beq	r16,zero,2007184 <__adddf3+0x51c>
 20070dc:	0101ffc4 	movi	r4,2047
 20070e0:	11006826 	beq	r2,r4,2007284 <__adddf3+0x61c>
 20070e4:	00c7c83a 	sub	r3,zero,r3
 20070e8:	42002034 	orhi	r8,r8,128
 20070ec:	01000e04 	movi	r4,56
 20070f0:	20c07c16 	blt	r4,r3,20072e4 <__adddf3+0x67c>
 20070f4:	010007c4 	movi	r4,31
 20070f8:	20c0da16 	blt	r4,r3,2007464 <__adddf3+0x7fc>
 20070fc:	01000804 	movi	r4,32
 2007100:	20c9c83a 	sub	r4,r4,r3
 2007104:	4114983a 	sll	r10,r8,r4
 2007108:	88cad83a 	srl	r5,r17,r3
 200710c:	8908983a 	sll	r4,r17,r4
 2007110:	40c6d83a 	srl	r3,r8,r3
 2007114:	5162b03a 	or	r17,r10,r5
 2007118:	2008c03a 	cmpne	r4,r4,zero
 200711c:	8922b03a 	or	r17,r17,r4
 2007120:	3463c83a 	sub	r17,r6,r17
 2007124:	48c7c83a 	sub	r3,r9,r3
 2007128:	344d803a 	cmpltu	r6,r6,r17
 200712c:	1991c83a 	sub	r8,r3,r6
 2007130:	1021883a 	mov	r16,r2
 2007134:	3825883a 	mov	r18,r7
 2007138:	003f2706 	br	2006dd8 <__adddf3+0x170>
 200713c:	24d0b03a 	or	r8,r4,r19
 2007140:	40001b1e 	bne	r8,zero,20071b0 <__adddf3+0x548>
 2007144:	0005883a 	mov	r2,zero
 2007148:	0007883a 	mov	r3,zero
 200714c:	0021883a 	mov	r16,zero
 2007150:	003f4d06 	br	2006e88 <__adddf3+0x220>
 2007154:	008007c4 	movi	r2,31
 2007158:	11003c16 	blt	r2,r4,200724c <__adddf3+0x5e4>
 200715c:	00800804 	movi	r2,32
 2007160:	1105c83a 	sub	r2,r2,r4
 2007164:	488e983a 	sll	r7,r9,r2
 2007168:	310ad83a 	srl	r5,r6,r4
 200716c:	3084983a 	sll	r2,r6,r2
 2007170:	4912d83a 	srl	r9,r9,r4
 2007174:	394ab03a 	or	r5,r7,r5
 2007178:	1004c03a 	cmpne	r2,r2,zero
 200717c:	288ab03a 	or	r5,r5,r2
 2007180:	003f5306 	br	2006ed0 <__adddf3+0x268>
 2007184:	4448b03a 	or	r4,r8,r17
 2007188:	20003e26 	beq	r4,zero,2007284 <__adddf3+0x61c>
 200718c:	00c6303a 	nor	r3,zero,r3
 2007190:	18003a1e 	bne	r3,zero,200727c <__adddf3+0x614>
 2007194:	3463c83a 	sub	r17,r6,r17
 2007198:	4a07c83a 	sub	r3,r9,r8
 200719c:	344d803a 	cmpltu	r6,r6,r17
 20071a0:	1991c83a 	sub	r8,r3,r6
 20071a4:	1021883a 	mov	r16,r2
 20071a8:	3825883a 	mov	r18,r7
 20071ac:	003f0a06 	br	2006dd8 <__adddf3+0x170>
 20071b0:	2023883a 	mov	r17,r4
 20071b4:	003f0d06 	br	2006dec <__adddf3+0x184>
 20071b8:	0081ffc4 	movi	r2,2047
 20071bc:	80bf3f1e 	bne	r16,r2,2006ebc <__adddf3+0x254>
 20071c0:	003ec806 	br	2006ce4 <__adddf3+0x7c>
 20071c4:	0005883a 	mov	r2,zero
 20071c8:	003fb106 	br	2007090 <__adddf3+0x428>
 20071cc:	0007883a 	mov	r3,zero
 20071d0:	003fbc06 	br	20070c4 <__adddf3+0x45c>
 20071d4:	4444b03a 	or	r2,r8,r17
 20071d8:	8000871e 	bne	r16,zero,20073f8 <__adddf3+0x790>
 20071dc:	1000ba26 	beq	r2,zero,20074c8 <__adddf3+0x860>
 20071e0:	4984b03a 	or	r2,r9,r6
 20071e4:	103ebf26 	beq	r2,zero,2006ce4 <__adddf3+0x7c>
 20071e8:	8985883a 	add	r2,r17,r6
 20071ec:	4247883a 	add	r3,r8,r9
 20071f0:	1451803a 	cmpltu	r8,r2,r17
 20071f4:	40d1883a 	add	r8,r8,r3
 20071f8:	40c0202c 	andhi	r3,r8,128
 20071fc:	1023883a 	mov	r17,r2
 2007200:	183f1a26 	beq	r3,zero,2006e6c <__adddf3+0x204>
 2007204:	00bfe034 	movhi	r2,65408
 2007208:	10bfffc4 	addi	r2,r2,-1
 200720c:	2021883a 	mov	r16,r4
 2007210:	4090703a 	and	r8,r8,r2
 2007214:	003eb306 	br	2006ce4 <__adddf3+0x7c>
 2007218:	4444b03a 	or	r2,r8,r17
 200721c:	8000291e 	bne	r16,zero,20072c4 <__adddf3+0x65c>
 2007220:	10004b1e 	bne	r2,zero,2007350 <__adddf3+0x6e8>
 2007224:	4990b03a 	or	r8,r9,r6
 2007228:	40008b26 	beq	r8,zero,2007458 <__adddf3+0x7f0>
 200722c:	4811883a 	mov	r8,r9
 2007230:	3023883a 	mov	r17,r6
 2007234:	3825883a 	mov	r18,r7
 2007238:	003eaa06 	br	2006ce4 <__adddf3+0x7c>
 200723c:	1021883a 	mov	r16,r2
 2007240:	0011883a 	mov	r8,zero
 2007244:	0005883a 	mov	r2,zero
 2007248:	003f0f06 	br	2006e88 <__adddf3+0x220>
 200724c:	217ff804 	addi	r5,r4,-32
 2007250:	00800804 	movi	r2,32
 2007254:	494ad83a 	srl	r5,r9,r5
 2007258:	20807d26 	beq	r4,r2,2007450 <__adddf3+0x7e8>
 200725c:	00801004 	movi	r2,64
 2007260:	1109c83a 	sub	r4,r2,r4
 2007264:	4912983a 	sll	r9,r9,r4
 2007268:	498cb03a 	or	r6,r9,r6
 200726c:	300cc03a 	cmpne	r6,r6,zero
 2007270:	298ab03a 	or	r5,r5,r6
 2007274:	0013883a 	mov	r9,zero
 2007278:	003f1506 	br	2006ed0 <__adddf3+0x268>
 200727c:	0101ffc4 	movi	r4,2047
 2007280:	113f9a1e 	bne	r2,r4,20070ec <__adddf3+0x484>
 2007284:	4811883a 	mov	r8,r9
 2007288:	3023883a 	mov	r17,r6
 200728c:	1021883a 	mov	r16,r2
 2007290:	3825883a 	mov	r18,r7
 2007294:	003e9306 	br	2006ce4 <__adddf3+0x7c>
 2007298:	8000161e 	bne	r16,zero,20072f4 <__adddf3+0x68c>
 200729c:	444ab03a 	or	r5,r8,r17
 20072a0:	28005126 	beq	r5,zero,20073e8 <__adddf3+0x780>
 20072a4:	0108303a 	nor	r4,zero,r4
 20072a8:	20004d1e 	bne	r4,zero,20073e0 <__adddf3+0x778>
 20072ac:	89a3883a 	add	r17,r17,r6
 20072b0:	4253883a 	add	r9,r8,r9
 20072b4:	898d803a 	cmpltu	r6,r17,r6
 20072b8:	3251883a 	add	r8,r6,r9
 20072bc:	1021883a 	mov	r16,r2
 20072c0:	003f0806 	br	2006ee4 <__adddf3+0x27c>
 20072c4:	1000301e 	bne	r2,zero,2007388 <__adddf3+0x720>
 20072c8:	4984b03a 	or	r2,r9,r6
 20072cc:	10007126 	beq	r2,zero,2007494 <__adddf3+0x82c>
 20072d0:	4811883a 	mov	r8,r9
 20072d4:	3023883a 	mov	r17,r6
 20072d8:	3825883a 	mov	r18,r7
 20072dc:	0401ffc4 	movi	r16,2047
 20072e0:	003e8006 	br	2006ce4 <__adddf3+0x7c>
 20072e4:	4462b03a 	or	r17,r8,r17
 20072e8:	8822c03a 	cmpne	r17,r17,zero
 20072ec:	0007883a 	mov	r3,zero
 20072f0:	003f8b06 	br	2007120 <__adddf3+0x4b8>
 20072f4:	0141ffc4 	movi	r5,2047
 20072f8:	11403b26 	beq	r2,r5,20073e8 <__adddf3+0x780>
 20072fc:	0109c83a 	sub	r4,zero,r4
 2007300:	42002034 	orhi	r8,r8,128
 2007304:	01400e04 	movi	r5,56
 2007308:	29006716 	blt	r5,r4,20074a8 <__adddf3+0x840>
 200730c:	014007c4 	movi	r5,31
 2007310:	29007016 	blt	r5,r4,20074d4 <__adddf3+0x86c>
 2007314:	01400804 	movi	r5,32
 2007318:	290bc83a 	sub	r5,r5,r4
 200731c:	4154983a 	sll	r10,r8,r5
 2007320:	890ed83a 	srl	r7,r17,r4
 2007324:	894a983a 	sll	r5,r17,r5
 2007328:	4108d83a 	srl	r4,r8,r4
 200732c:	51e2b03a 	or	r17,r10,r7
 2007330:	280ac03a 	cmpne	r5,r5,zero
 2007334:	8962b03a 	or	r17,r17,r5
 2007338:	89a3883a 	add	r17,r17,r6
 200733c:	2253883a 	add	r9,r4,r9
 2007340:	898d803a 	cmpltu	r6,r17,r6
 2007344:	3251883a 	add	r8,r6,r9
 2007348:	1021883a 	mov	r16,r2
 200734c:	003ee506 	br	2006ee4 <__adddf3+0x27c>
 2007350:	4984b03a 	or	r2,r9,r6
 2007354:	103e6326 	beq	r2,zero,2006ce4 <__adddf3+0x7c>
 2007358:	8987c83a 	sub	r3,r17,r6
 200735c:	88c9803a 	cmpltu	r4,r17,r3
 2007360:	4245c83a 	sub	r2,r8,r9
 2007364:	1105c83a 	sub	r2,r2,r4
 2007368:	1100202c 	andhi	r4,r2,128
 200736c:	203ebb26 	beq	r4,zero,2006e5c <__adddf3+0x1f4>
 2007370:	3463c83a 	sub	r17,r6,r17
 2007374:	4a07c83a 	sub	r3,r9,r8
 2007378:	344d803a 	cmpltu	r6,r6,r17
 200737c:	1991c83a 	sub	r8,r3,r6
 2007380:	3825883a 	mov	r18,r7
 2007384:	003e5706 	br	2006ce4 <__adddf3+0x7c>
 2007388:	4984b03a 	or	r2,r9,r6
 200738c:	10002e26 	beq	r2,zero,2007448 <__adddf3+0x7e0>
 2007390:	4004d0fa 	srli	r2,r8,3
 2007394:	8822d0fa 	srli	r17,r17,3
 2007398:	4010977a 	slli	r8,r8,29
 200739c:	10c0022c 	andhi	r3,r2,8
 20073a0:	4462b03a 	or	r17,r8,r17
 20073a4:	18000826 	beq	r3,zero,20073c8 <__adddf3+0x760>
 20073a8:	4808d0fa 	srli	r4,r9,3
 20073ac:	20c0022c 	andhi	r3,r4,8
 20073b0:	1800051e 	bne	r3,zero,20073c8 <__adddf3+0x760>
 20073b4:	300cd0fa 	srli	r6,r6,3
 20073b8:	4806977a 	slli	r3,r9,29
 20073bc:	2005883a 	mov	r2,r4
 20073c0:	3825883a 	mov	r18,r7
 20073c4:	19a2b03a 	or	r17,r3,r6
 20073c8:	8810d77a 	srli	r8,r17,29
 20073cc:	100490fa 	slli	r2,r2,3
 20073d0:	882290fa 	slli	r17,r17,3
 20073d4:	0401ffc4 	movi	r16,2047
 20073d8:	4090b03a 	or	r8,r8,r2
 20073dc:	003e4106 	br	2006ce4 <__adddf3+0x7c>
 20073e0:	0141ffc4 	movi	r5,2047
 20073e4:	117fc71e 	bne	r2,r5,2007304 <__adddf3+0x69c>
 20073e8:	4811883a 	mov	r8,r9
 20073ec:	3023883a 	mov	r17,r6
 20073f0:	1021883a 	mov	r16,r2
 20073f4:	003e3b06 	br	2006ce4 <__adddf3+0x7c>
 20073f8:	10002f26 	beq	r2,zero,20074b8 <__adddf3+0x850>
 20073fc:	4984b03a 	or	r2,r9,r6
 2007400:	10001126 	beq	r2,zero,2007448 <__adddf3+0x7e0>
 2007404:	4004d0fa 	srli	r2,r8,3
 2007408:	8822d0fa 	srli	r17,r17,3
 200740c:	4010977a 	slli	r8,r8,29
 2007410:	10c0022c 	andhi	r3,r2,8
 2007414:	4462b03a 	or	r17,r8,r17
 2007418:	183feb26 	beq	r3,zero,20073c8 <__adddf3+0x760>
 200741c:	4808d0fa 	srli	r4,r9,3
 2007420:	20c0022c 	andhi	r3,r4,8
 2007424:	183fe81e 	bne	r3,zero,20073c8 <__adddf3+0x760>
 2007428:	300cd0fa 	srli	r6,r6,3
 200742c:	4806977a 	slli	r3,r9,29
 2007430:	2005883a 	mov	r2,r4
 2007434:	19a2b03a 	or	r17,r3,r6
 2007438:	003fe306 	br	20073c8 <__adddf3+0x760>
 200743c:	0011883a 	mov	r8,zero
 2007440:	0005883a 	mov	r2,zero
 2007444:	003e3f06 	br	2006d44 <__adddf3+0xdc>
 2007448:	0401ffc4 	movi	r16,2047
 200744c:	003e2506 	br	2006ce4 <__adddf3+0x7c>
 2007450:	0013883a 	mov	r9,zero
 2007454:	003f8406 	br	2007268 <__adddf3+0x600>
 2007458:	0005883a 	mov	r2,zero
 200745c:	0007883a 	mov	r3,zero
 2007460:	003e8906 	br	2006e88 <__adddf3+0x220>
 2007464:	197ff804 	addi	r5,r3,-32
 2007468:	01000804 	movi	r4,32
 200746c:	414ad83a 	srl	r5,r8,r5
 2007470:	19002426 	beq	r3,r4,2007504 <__adddf3+0x89c>
 2007474:	01001004 	movi	r4,64
 2007478:	20c7c83a 	sub	r3,r4,r3
 200747c:	40c6983a 	sll	r3,r8,r3
 2007480:	1c46b03a 	or	r3,r3,r17
 2007484:	1806c03a 	cmpne	r3,r3,zero
 2007488:	28e2b03a 	or	r17,r5,r3
 200748c:	0007883a 	mov	r3,zero
 2007490:	003f2306 	br	2007120 <__adddf3+0x4b8>
 2007494:	0007883a 	mov	r3,zero
 2007498:	5811883a 	mov	r8,r11
 200749c:	00bfffc4 	movi	r2,-1
 20074a0:	0401ffc4 	movi	r16,2047
 20074a4:	003e7806 	br	2006e88 <__adddf3+0x220>
 20074a8:	4462b03a 	or	r17,r8,r17
 20074ac:	8822c03a 	cmpne	r17,r17,zero
 20074b0:	0009883a 	mov	r4,zero
 20074b4:	003fa006 	br	2007338 <__adddf3+0x6d0>
 20074b8:	4811883a 	mov	r8,r9
 20074bc:	3023883a 	mov	r17,r6
 20074c0:	0401ffc4 	movi	r16,2047
 20074c4:	003e0706 	br	2006ce4 <__adddf3+0x7c>
 20074c8:	4811883a 	mov	r8,r9
 20074cc:	3023883a 	mov	r17,r6
 20074d0:	003e0406 	br	2006ce4 <__adddf3+0x7c>
 20074d4:	21fff804 	addi	r7,r4,-32
 20074d8:	01400804 	movi	r5,32
 20074dc:	41ced83a 	srl	r7,r8,r7
 20074e0:	21400a26 	beq	r4,r5,200750c <__adddf3+0x8a4>
 20074e4:	01401004 	movi	r5,64
 20074e8:	2909c83a 	sub	r4,r5,r4
 20074ec:	4108983a 	sll	r4,r8,r4
 20074f0:	2448b03a 	or	r4,r4,r17
 20074f4:	2008c03a 	cmpne	r4,r4,zero
 20074f8:	3922b03a 	or	r17,r7,r4
 20074fc:	0009883a 	mov	r4,zero
 2007500:	003f8d06 	br	2007338 <__adddf3+0x6d0>
 2007504:	0007883a 	mov	r3,zero
 2007508:	003fdd06 	br	2007480 <__adddf3+0x818>
 200750c:	0009883a 	mov	r4,zero
 2007510:	003ff706 	br	20074f0 <__adddf3+0x888>

02007514 <__divdf3>:
 2007514:	defff204 	addi	sp,sp,-56
 2007518:	dd400915 	stw	r21,36(sp)
 200751c:	282ad53a 	srli	r21,r5,20
 2007520:	dd000815 	stw	r20,32(sp)
 2007524:	2828d7fa 	srli	r20,r5,31
 2007528:	dc000415 	stw	r16,16(sp)
 200752c:	04000434 	movhi	r16,16
 2007530:	df000c15 	stw	fp,48(sp)
 2007534:	843fffc4 	addi	r16,r16,-1
 2007538:	dfc00d15 	stw	ra,52(sp)
 200753c:	ddc00b15 	stw	r23,44(sp)
 2007540:	dd800a15 	stw	r22,40(sp)
 2007544:	dcc00715 	stw	r19,28(sp)
 2007548:	dc800615 	stw	r18,24(sp)
 200754c:	dc400515 	stw	r17,20(sp)
 2007550:	ad41ffcc 	andi	r21,r21,2047
 2007554:	2c20703a 	and	r16,r5,r16
 2007558:	a7003fcc 	andi	fp,r20,255
 200755c:	a8006126 	beq	r21,zero,20076e4 <__divdf3+0x1d0>
 2007560:	0081ffc4 	movi	r2,2047
 2007564:	2025883a 	mov	r18,r4
 2007568:	a8803726 	beq	r21,r2,2007648 <__divdf3+0x134>
 200756c:	80800434 	orhi	r2,r16,16
 2007570:	100490fa 	slli	r2,r2,3
 2007574:	2020d77a 	srli	r16,r4,29
 2007578:	202490fa 	slli	r18,r4,3
 200757c:	ad7f0044 	addi	r21,r21,-1023
 2007580:	80a0b03a 	or	r16,r16,r2
 2007584:	0027883a 	mov	r19,zero
 2007588:	0013883a 	mov	r9,zero
 200758c:	3804d53a 	srli	r2,r7,20
 2007590:	382cd7fa 	srli	r22,r7,31
 2007594:	04400434 	movhi	r17,16
 2007598:	8c7fffc4 	addi	r17,r17,-1
 200759c:	1081ffcc 	andi	r2,r2,2047
 20075a0:	3011883a 	mov	r8,r6
 20075a4:	3c62703a 	and	r17,r7,r17
 20075a8:	b5c03fcc 	andi	r23,r22,255
 20075ac:	10006c26 	beq	r2,zero,2007760 <__divdf3+0x24c>
 20075b0:	00c1ffc4 	movi	r3,2047
 20075b4:	10c06426 	beq	r2,r3,2007748 <__divdf3+0x234>
 20075b8:	88c00434 	orhi	r3,r17,16
 20075bc:	180690fa 	slli	r3,r3,3
 20075c0:	3022d77a 	srli	r17,r6,29
 20075c4:	301090fa 	slli	r8,r6,3
 20075c8:	10bf0044 	addi	r2,r2,-1023
 20075cc:	88e2b03a 	or	r17,r17,r3
 20075d0:	000f883a 	mov	r7,zero
 20075d4:	a58cf03a 	xor	r6,r20,r22
 20075d8:	3cc8b03a 	or	r4,r7,r19
 20075dc:	a8abc83a 	sub	r21,r21,r2
 20075e0:	008003c4 	movi	r2,15
 20075e4:	3007883a 	mov	r3,r6
 20075e8:	34c03fcc 	andi	r19,r6,255
 20075ec:	11009036 	bltu	r2,r4,2007830 <__divdf3+0x31c>
 20075f0:	200890ba 	slli	r4,r4,2
 20075f4:	00808034 	movhi	r2,512
 20075f8:	109d8204 	addi	r2,r2,30216
 20075fc:	2089883a 	add	r4,r4,r2
 2007600:	20800017 	ldw	r2,0(r4)
 2007604:	1000683a 	jmp	r2
 2007608:	02007830 	cmpltui	r8,zero,480
 200760c:	02007680 	call	200768 <__alt_mem_mem_Nios_PI+0x768>
 2007610:	02007820 	cmpeqi	r8,zero,480
 2007614:	02007674 	movhi	r8,473
 2007618:	02007820 	cmpeqi	r8,zero,480
 200761c:	020077f4 	movhi	r8,479
 2007620:	02007820 	cmpeqi	r8,zero,480
 2007624:	02007674 	movhi	r8,473
 2007628:	02007680 	call	200768 <__alt_mem_mem_Nios_PI+0x768>
 200762c:	02007680 	call	200768 <__alt_mem_mem_Nios_PI+0x768>
 2007630:	020077f4 	movhi	r8,479
 2007634:	02007674 	movhi	r8,473
 2007638:	02007664 	muli	r8,zero,473
 200763c:	02007664 	muli	r8,zero,473
 2007640:	02007664 	muli	r8,zero,473
 2007644:	02007b14 	movui	r8,492
 2007648:	2404b03a 	or	r2,r4,r16
 200764c:	1000661e 	bne	r2,zero,20077e8 <__divdf3+0x2d4>
 2007650:	04c00204 	movi	r19,8
 2007654:	0021883a 	mov	r16,zero
 2007658:	0025883a 	mov	r18,zero
 200765c:	02400084 	movi	r9,2
 2007660:	003fca06 	br	200758c <__divdf3+0x78>
 2007664:	8023883a 	mov	r17,r16
 2007668:	9011883a 	mov	r8,r18
 200766c:	e02f883a 	mov	r23,fp
 2007670:	480f883a 	mov	r7,r9
 2007674:	00800084 	movi	r2,2
 2007678:	3881311e 	bne	r7,r2,2007b40 <__divdf3+0x62c>
 200767c:	b827883a 	mov	r19,r23
 2007680:	98c0004c 	andi	r3,r19,1
 2007684:	0081ffc4 	movi	r2,2047
 2007688:	000b883a 	mov	r5,zero
 200768c:	0025883a 	mov	r18,zero
 2007690:	1004953a 	slli	r2,r2,20
 2007694:	18c03fcc 	andi	r3,r3,255
 2007698:	04400434 	movhi	r17,16
 200769c:	8c7fffc4 	addi	r17,r17,-1
 20076a0:	180697fa 	slli	r3,r3,31
 20076a4:	2c4a703a 	and	r5,r5,r17
 20076a8:	288ab03a 	or	r5,r5,r2
 20076ac:	28c6b03a 	or	r3,r5,r3
 20076b0:	9005883a 	mov	r2,r18
 20076b4:	dfc00d17 	ldw	ra,52(sp)
 20076b8:	df000c17 	ldw	fp,48(sp)
 20076bc:	ddc00b17 	ldw	r23,44(sp)
 20076c0:	dd800a17 	ldw	r22,40(sp)
 20076c4:	dd400917 	ldw	r21,36(sp)
 20076c8:	dd000817 	ldw	r20,32(sp)
 20076cc:	dcc00717 	ldw	r19,28(sp)
 20076d0:	dc800617 	ldw	r18,24(sp)
 20076d4:	dc400517 	ldw	r17,20(sp)
 20076d8:	dc000417 	ldw	r16,16(sp)
 20076dc:	dec00e04 	addi	sp,sp,56
 20076e0:	f800283a 	ret
 20076e4:	2404b03a 	or	r2,r4,r16
 20076e8:	2027883a 	mov	r19,r4
 20076ec:	10003926 	beq	r2,zero,20077d4 <__divdf3+0x2c0>
 20076f0:	80012e26 	beq	r16,zero,2007bac <__divdf3+0x698>
 20076f4:	8009883a 	mov	r4,r16
 20076f8:	d9800315 	stw	r6,12(sp)
 20076fc:	d9c00215 	stw	r7,8(sp)
 2007700:	20093200 	call	2009320 <__clzsi2>
 2007704:	d9800317 	ldw	r6,12(sp)
 2007708:	d9c00217 	ldw	r7,8(sp)
 200770c:	113ffd44 	addi	r4,r2,-11
 2007710:	00c00704 	movi	r3,28
 2007714:	19012116 	blt	r3,r4,2007b9c <__divdf3+0x688>
 2007718:	00c00744 	movi	r3,29
 200771c:	147ffe04 	addi	r17,r2,-8
 2007720:	1907c83a 	sub	r3,r3,r4
 2007724:	8460983a 	sll	r16,r16,r17
 2007728:	98c6d83a 	srl	r3,r19,r3
 200772c:	9c64983a 	sll	r18,r19,r17
 2007730:	1c20b03a 	or	r16,r3,r16
 2007734:	1080fcc4 	addi	r2,r2,1011
 2007738:	00abc83a 	sub	r21,zero,r2
 200773c:	0027883a 	mov	r19,zero
 2007740:	0013883a 	mov	r9,zero
 2007744:	003f9106 	br	200758c <__divdf3+0x78>
 2007748:	3446b03a 	or	r3,r6,r17
 200774c:	18001f1e 	bne	r3,zero,20077cc <__divdf3+0x2b8>
 2007750:	0023883a 	mov	r17,zero
 2007754:	0011883a 	mov	r8,zero
 2007758:	01c00084 	movi	r7,2
 200775c:	003f9d06 	br	20075d4 <__divdf3+0xc0>
 2007760:	3446b03a 	or	r3,r6,r17
 2007764:	18001526 	beq	r3,zero,20077bc <__divdf3+0x2a8>
 2007768:	88011b26 	beq	r17,zero,2007bd8 <__divdf3+0x6c4>
 200776c:	8809883a 	mov	r4,r17
 2007770:	d9800315 	stw	r6,12(sp)
 2007774:	da400115 	stw	r9,4(sp)
 2007778:	20093200 	call	2009320 <__clzsi2>
 200777c:	d9800317 	ldw	r6,12(sp)
 2007780:	da400117 	ldw	r9,4(sp)
 2007784:	113ffd44 	addi	r4,r2,-11
 2007788:	00c00704 	movi	r3,28
 200778c:	19010e16 	blt	r3,r4,2007bc8 <__divdf3+0x6b4>
 2007790:	00c00744 	movi	r3,29
 2007794:	123ffe04 	addi	r8,r2,-8
 2007798:	1907c83a 	sub	r3,r3,r4
 200779c:	8a22983a 	sll	r17,r17,r8
 20077a0:	30c6d83a 	srl	r3,r6,r3
 20077a4:	3210983a 	sll	r8,r6,r8
 20077a8:	1c62b03a 	or	r17,r3,r17
 20077ac:	1080fcc4 	addi	r2,r2,1011
 20077b0:	0085c83a 	sub	r2,zero,r2
 20077b4:	000f883a 	mov	r7,zero
 20077b8:	003f8606 	br	20075d4 <__divdf3+0xc0>
 20077bc:	0023883a 	mov	r17,zero
 20077c0:	0011883a 	mov	r8,zero
 20077c4:	01c00044 	movi	r7,1
 20077c8:	003f8206 	br	20075d4 <__divdf3+0xc0>
 20077cc:	01c000c4 	movi	r7,3
 20077d0:	003f8006 	br	20075d4 <__divdf3+0xc0>
 20077d4:	04c00104 	movi	r19,4
 20077d8:	0021883a 	mov	r16,zero
 20077dc:	0025883a 	mov	r18,zero
 20077e0:	02400044 	movi	r9,1
 20077e4:	003f6906 	br	200758c <__divdf3+0x78>
 20077e8:	04c00304 	movi	r19,12
 20077ec:	024000c4 	movi	r9,3
 20077f0:	003f6606 	br	200758c <__divdf3+0x78>
 20077f4:	01400434 	movhi	r5,16
 20077f8:	0007883a 	mov	r3,zero
 20077fc:	297fffc4 	addi	r5,r5,-1
 2007800:	04bfffc4 	movi	r18,-1
 2007804:	0081ffc4 	movi	r2,2047
 2007808:	003fa106 	br	2007690 <__divdf3+0x17c>
 200780c:	00c00044 	movi	r3,1
 2007810:	1887c83a 	sub	r3,r3,r2
 2007814:	01000e04 	movi	r4,56
 2007818:	20c1210e 	bge	r4,r3,2007ca0 <__divdf3+0x78c>
 200781c:	98c0004c 	andi	r3,r19,1
 2007820:	0005883a 	mov	r2,zero
 2007824:	000b883a 	mov	r5,zero
 2007828:	0025883a 	mov	r18,zero
 200782c:	003f9806 	br	2007690 <__divdf3+0x17c>
 2007830:	8c00fd36 	bltu	r17,r16,2007c28 <__divdf3+0x714>
 2007834:	8440fb26 	beq	r16,r17,2007c24 <__divdf3+0x710>
 2007838:	8007883a 	mov	r3,r16
 200783c:	ad7fffc4 	addi	r21,r21,-1
 2007840:	0021883a 	mov	r16,zero
 2007844:	4004d63a 	srli	r2,r8,24
 2007848:	8822923a 	slli	r17,r17,8
 200784c:	1809883a 	mov	r4,r3
 2007850:	402c923a 	slli	r22,r8,8
 2007854:	88b8b03a 	or	fp,r17,r2
 2007858:	e028d43a 	srli	r20,fp,16
 200785c:	d8c00015 	stw	r3,0(sp)
 2007860:	e5ffffcc 	andi	r23,fp,65535
 2007864:	a00b883a 	mov	r5,r20
 2007868:	2006bac0 	call	2006bac <__udivsi3>
 200786c:	d8c00017 	ldw	r3,0(sp)
 2007870:	a00b883a 	mov	r5,r20
 2007874:	d8800315 	stw	r2,12(sp)
 2007878:	1809883a 	mov	r4,r3
 200787c:	2006c100 	call	2006c10 <__umodsi3>
 2007880:	d9800317 	ldw	r6,12(sp)
 2007884:	1006943a 	slli	r3,r2,16
 2007888:	9004d43a 	srli	r2,r18,16
 200788c:	b9a3383a 	mul	r17,r23,r6
 2007890:	10c4b03a 	or	r2,r2,r3
 2007894:	1440062e 	bgeu	r2,r17,20078b0 <__divdf3+0x39c>
 2007898:	1705883a 	add	r2,r2,fp
 200789c:	30ffffc4 	addi	r3,r6,-1
 20078a0:	1700ee36 	bltu	r2,fp,2007c5c <__divdf3+0x748>
 20078a4:	1440ed2e 	bgeu	r2,r17,2007c5c <__divdf3+0x748>
 20078a8:	31bfff84 	addi	r6,r6,-2
 20078ac:	1705883a 	add	r2,r2,fp
 20078b0:	1463c83a 	sub	r17,r2,r17
 20078b4:	a00b883a 	mov	r5,r20
 20078b8:	8809883a 	mov	r4,r17
 20078bc:	d9800315 	stw	r6,12(sp)
 20078c0:	2006bac0 	call	2006bac <__udivsi3>
 20078c4:	a00b883a 	mov	r5,r20
 20078c8:	8809883a 	mov	r4,r17
 20078cc:	d8800215 	stw	r2,8(sp)
 20078d0:	2006c100 	call	2006c10 <__umodsi3>
 20078d4:	d9c00217 	ldw	r7,8(sp)
 20078d8:	1004943a 	slli	r2,r2,16
 20078dc:	94bfffcc 	andi	r18,r18,65535
 20078e0:	b9d1383a 	mul	r8,r23,r7
 20078e4:	90a4b03a 	or	r18,r18,r2
 20078e8:	d9800317 	ldw	r6,12(sp)
 20078ec:	9200062e 	bgeu	r18,r8,2007908 <__divdf3+0x3f4>
 20078f0:	9725883a 	add	r18,r18,fp
 20078f4:	38bfffc4 	addi	r2,r7,-1
 20078f8:	9700d636 	bltu	r18,fp,2007c54 <__divdf3+0x740>
 20078fc:	9200d52e 	bgeu	r18,r8,2007c54 <__divdf3+0x740>
 2007900:	39ffff84 	addi	r7,r7,-2
 2007904:	9725883a 	add	r18,r18,fp
 2007908:	3004943a 	slli	r2,r6,16
 200790c:	b012d43a 	srli	r9,r22,16
 2007910:	b1bfffcc 	andi	r6,r22,65535
 2007914:	11e2b03a 	or	r17,r2,r7
 2007918:	8806d43a 	srli	r3,r17,16
 200791c:	893fffcc 	andi	r4,r17,65535
 2007920:	218b383a 	mul	r5,r4,r6
 2007924:	30c5383a 	mul	r2,r6,r3
 2007928:	2249383a 	mul	r4,r4,r9
 200792c:	280ed43a 	srli	r7,r5,16
 2007930:	9225c83a 	sub	r18,r18,r8
 2007934:	2089883a 	add	r4,r4,r2
 2007938:	3909883a 	add	r4,r7,r4
 200793c:	1a47383a 	mul	r3,r3,r9
 2007940:	2080022e 	bgeu	r4,r2,200794c <__divdf3+0x438>
 2007944:	00800074 	movhi	r2,1
 2007948:	1887883a 	add	r3,r3,r2
 200794c:	2004d43a 	srli	r2,r4,16
 2007950:	2008943a 	slli	r4,r4,16
 2007954:	297fffcc 	andi	r5,r5,65535
 2007958:	10c7883a 	add	r3,r2,r3
 200795c:	2149883a 	add	r4,r4,r5
 2007960:	90c0a536 	bltu	r18,r3,2007bf8 <__divdf3+0x6e4>
 2007964:	90c0bf26 	beq	r18,r3,2007c64 <__divdf3+0x750>
 2007968:	90c7c83a 	sub	r3,r18,r3
 200796c:	810fc83a 	sub	r7,r16,r4
 2007970:	81e5803a 	cmpltu	r18,r16,r7
 2007974:	1ca5c83a 	sub	r18,r3,r18
 2007978:	e480c126 	beq	fp,r18,2007c80 <__divdf3+0x76c>
 200797c:	a00b883a 	mov	r5,r20
 2007980:	9009883a 	mov	r4,r18
 2007984:	d9800315 	stw	r6,12(sp)
 2007988:	d9c00215 	stw	r7,8(sp)
 200798c:	da400115 	stw	r9,4(sp)
 2007990:	2006bac0 	call	2006bac <__udivsi3>
 2007994:	a00b883a 	mov	r5,r20
 2007998:	9009883a 	mov	r4,r18
 200799c:	d8800015 	stw	r2,0(sp)
 20079a0:	2006c100 	call	2006c10 <__umodsi3>
 20079a4:	d9c00217 	ldw	r7,8(sp)
 20079a8:	da000017 	ldw	r8,0(sp)
 20079ac:	1006943a 	slli	r3,r2,16
 20079b0:	3804d43a 	srli	r2,r7,16
 20079b4:	ba21383a 	mul	r16,r23,r8
 20079b8:	d9800317 	ldw	r6,12(sp)
 20079bc:	10c4b03a 	or	r2,r2,r3
 20079c0:	da400117 	ldw	r9,4(sp)
 20079c4:	1400062e 	bgeu	r2,r16,20079e0 <__divdf3+0x4cc>
 20079c8:	1705883a 	add	r2,r2,fp
 20079cc:	40ffffc4 	addi	r3,r8,-1
 20079d0:	1700ad36 	bltu	r2,fp,2007c88 <__divdf3+0x774>
 20079d4:	1400ac2e 	bgeu	r2,r16,2007c88 <__divdf3+0x774>
 20079d8:	423fff84 	addi	r8,r8,-2
 20079dc:	1705883a 	add	r2,r2,fp
 20079e0:	1421c83a 	sub	r16,r2,r16
 20079e4:	a00b883a 	mov	r5,r20
 20079e8:	8009883a 	mov	r4,r16
 20079ec:	d9800315 	stw	r6,12(sp)
 20079f0:	d9c00215 	stw	r7,8(sp)
 20079f4:	da000015 	stw	r8,0(sp)
 20079f8:	da400115 	stw	r9,4(sp)
 20079fc:	2006bac0 	call	2006bac <__udivsi3>
 2007a00:	8009883a 	mov	r4,r16
 2007a04:	a00b883a 	mov	r5,r20
 2007a08:	1025883a 	mov	r18,r2
 2007a0c:	2006c100 	call	2006c10 <__umodsi3>
 2007a10:	d9c00217 	ldw	r7,8(sp)
 2007a14:	1004943a 	slli	r2,r2,16
 2007a18:	bcaf383a 	mul	r23,r23,r18
 2007a1c:	393fffcc 	andi	r4,r7,65535
 2007a20:	2088b03a 	or	r4,r4,r2
 2007a24:	d9800317 	ldw	r6,12(sp)
 2007a28:	da000017 	ldw	r8,0(sp)
 2007a2c:	da400117 	ldw	r9,4(sp)
 2007a30:	25c0062e 	bgeu	r4,r23,2007a4c <__divdf3+0x538>
 2007a34:	2709883a 	add	r4,r4,fp
 2007a38:	90bfffc4 	addi	r2,r18,-1
 2007a3c:	27009436 	bltu	r4,fp,2007c90 <__divdf3+0x77c>
 2007a40:	25c0932e 	bgeu	r4,r23,2007c90 <__divdf3+0x77c>
 2007a44:	94bfff84 	addi	r18,r18,-2
 2007a48:	2709883a 	add	r4,r4,fp
 2007a4c:	4004943a 	slli	r2,r8,16
 2007a50:	25efc83a 	sub	r23,r4,r23
 2007a54:	1490b03a 	or	r8,r2,r18
 2007a58:	4008d43a 	srli	r4,r8,16
 2007a5c:	40ffffcc 	andi	r3,r8,65535
 2007a60:	30c5383a 	mul	r2,r6,r3
 2007a64:	1a47383a 	mul	r3,r3,r9
 2007a68:	310d383a 	mul	r6,r6,r4
 2007a6c:	100ad43a 	srli	r5,r2,16
 2007a70:	4913383a 	mul	r9,r9,r4
 2007a74:	1987883a 	add	r3,r3,r6
 2007a78:	28c7883a 	add	r3,r5,r3
 2007a7c:	1980022e 	bgeu	r3,r6,2007a88 <__divdf3+0x574>
 2007a80:	01000074 	movhi	r4,1
 2007a84:	4913883a 	add	r9,r9,r4
 2007a88:	1808d43a 	srli	r4,r3,16
 2007a8c:	1806943a 	slli	r3,r3,16
 2007a90:	10bfffcc 	andi	r2,r2,65535
 2007a94:	2253883a 	add	r9,r4,r9
 2007a98:	1887883a 	add	r3,r3,r2
 2007a9c:	ba403836 	bltu	r23,r9,2007b80 <__divdf3+0x66c>
 2007aa0:	ba403626 	beq	r23,r9,2007b7c <__divdf3+0x668>
 2007aa4:	42000054 	ori	r8,r8,1
 2007aa8:	a880ffc4 	addi	r2,r21,1023
 2007aac:	00bf570e 	bge	zero,r2,200780c <__divdf3+0x2f8>
 2007ab0:	40c001cc 	andi	r3,r8,7
 2007ab4:	18000726 	beq	r3,zero,2007ad4 <__divdf3+0x5c0>
 2007ab8:	40c003cc 	andi	r3,r8,15
 2007abc:	01000104 	movi	r4,4
 2007ac0:	19000426 	beq	r3,r4,2007ad4 <__divdf3+0x5c0>
 2007ac4:	4107883a 	add	r3,r8,r4
 2007ac8:	1a11803a 	cmpltu	r8,r3,r8
 2007acc:	8a23883a 	add	r17,r17,r8
 2007ad0:	1811883a 	mov	r8,r3
 2007ad4:	88c0402c 	andhi	r3,r17,256
 2007ad8:	18000426 	beq	r3,zero,2007aec <__divdf3+0x5d8>
 2007adc:	00ffc034 	movhi	r3,65280
 2007ae0:	18ffffc4 	addi	r3,r3,-1
 2007ae4:	a8810004 	addi	r2,r21,1024
 2007ae8:	88e2703a 	and	r17,r17,r3
 2007aec:	00c1ff84 	movi	r3,2046
 2007af0:	18bee316 	blt	r3,r2,2007680 <__divdf3+0x16c>
 2007af4:	8824977a 	slli	r18,r17,29
 2007af8:	4010d0fa 	srli	r8,r8,3
 2007afc:	8822927a 	slli	r17,r17,9
 2007b00:	1081ffcc 	andi	r2,r2,2047
 2007b04:	9224b03a 	or	r18,r18,r8
 2007b08:	880ad33a 	srli	r5,r17,12
 2007b0c:	98c0004c 	andi	r3,r19,1
 2007b10:	003edf06 	br	2007690 <__divdf3+0x17c>
 2007b14:	8080022c 	andhi	r2,r16,8
 2007b18:	10001226 	beq	r2,zero,2007b64 <__divdf3+0x650>
 2007b1c:	8880022c 	andhi	r2,r17,8
 2007b20:	1000101e 	bne	r2,zero,2007b64 <__divdf3+0x650>
 2007b24:	00800434 	movhi	r2,16
 2007b28:	89400234 	orhi	r5,r17,8
 2007b2c:	10bfffc4 	addi	r2,r2,-1
 2007b30:	b007883a 	mov	r3,r22
 2007b34:	288a703a 	and	r5,r5,r2
 2007b38:	4025883a 	mov	r18,r8
 2007b3c:	003f3106 	br	2007804 <__divdf3+0x2f0>
 2007b40:	008000c4 	movi	r2,3
 2007b44:	3880a626 	beq	r7,r2,2007de0 <__divdf3+0x8cc>
 2007b48:	00800044 	movi	r2,1
 2007b4c:	3880521e 	bne	r7,r2,2007c98 <__divdf3+0x784>
 2007b50:	b807883a 	mov	r3,r23
 2007b54:	0005883a 	mov	r2,zero
 2007b58:	000b883a 	mov	r5,zero
 2007b5c:	0025883a 	mov	r18,zero
 2007b60:	003ecb06 	br	2007690 <__divdf3+0x17c>
 2007b64:	00800434 	movhi	r2,16
 2007b68:	81400234 	orhi	r5,r16,8
 2007b6c:	10bfffc4 	addi	r2,r2,-1
 2007b70:	a007883a 	mov	r3,r20
 2007b74:	288a703a 	and	r5,r5,r2
 2007b78:	003f2206 	br	2007804 <__divdf3+0x2f0>
 2007b7c:	183fca26 	beq	r3,zero,2007aa8 <__divdf3+0x594>
 2007b80:	e5ef883a 	add	r23,fp,r23
 2007b84:	40bfffc4 	addi	r2,r8,-1
 2007b88:	bf00392e 	bgeu	r23,fp,2007c70 <__divdf3+0x75c>
 2007b8c:	1011883a 	mov	r8,r2
 2007b90:	ba7fc41e 	bne	r23,r9,2007aa4 <__divdf3+0x590>
 2007b94:	b0ffc31e 	bne	r22,r3,2007aa4 <__divdf3+0x590>
 2007b98:	003fc306 	br	2007aa8 <__divdf3+0x594>
 2007b9c:	143ff604 	addi	r16,r2,-40
 2007ba0:	9c20983a 	sll	r16,r19,r16
 2007ba4:	0025883a 	mov	r18,zero
 2007ba8:	003ee206 	br	2007734 <__divdf3+0x220>
 2007bac:	d9800315 	stw	r6,12(sp)
 2007bb0:	d9c00215 	stw	r7,8(sp)
 2007bb4:	20093200 	call	2009320 <__clzsi2>
 2007bb8:	10800804 	addi	r2,r2,32
 2007bbc:	d9c00217 	ldw	r7,8(sp)
 2007bc0:	d9800317 	ldw	r6,12(sp)
 2007bc4:	003ed106 	br	200770c <__divdf3+0x1f8>
 2007bc8:	147ff604 	addi	r17,r2,-40
 2007bcc:	3462983a 	sll	r17,r6,r17
 2007bd0:	0011883a 	mov	r8,zero
 2007bd4:	003ef506 	br	20077ac <__divdf3+0x298>
 2007bd8:	3009883a 	mov	r4,r6
 2007bdc:	d9800315 	stw	r6,12(sp)
 2007be0:	da400115 	stw	r9,4(sp)
 2007be4:	20093200 	call	2009320 <__clzsi2>
 2007be8:	10800804 	addi	r2,r2,32
 2007bec:	da400117 	ldw	r9,4(sp)
 2007bf0:	d9800317 	ldw	r6,12(sp)
 2007bf4:	003ee306 	br	2007784 <__divdf3+0x270>
 2007bf8:	85a1883a 	add	r16,r16,r22
 2007bfc:	8585803a 	cmpltu	r2,r16,r22
 2007c00:	1705883a 	add	r2,r2,fp
 2007c04:	14a5883a 	add	r18,r2,r18
 2007c08:	88bfffc4 	addi	r2,r17,-1
 2007c0c:	e4800c2e 	bgeu	fp,r18,2007c40 <__divdf3+0x72c>
 2007c10:	90c03e36 	bltu	r18,r3,2007d0c <__divdf3+0x7f8>
 2007c14:	1c806926 	beq	r3,r18,2007dbc <__divdf3+0x8a8>
 2007c18:	90c7c83a 	sub	r3,r18,r3
 2007c1c:	1023883a 	mov	r17,r2
 2007c20:	003f5206 	br	200796c <__divdf3+0x458>
 2007c24:	923f0436 	bltu	r18,r8,2007838 <__divdf3+0x324>
 2007c28:	800897fa 	slli	r4,r16,31
 2007c2c:	9004d07a 	srli	r2,r18,1
 2007c30:	8006d07a 	srli	r3,r16,1
 2007c34:	902097fa 	slli	r16,r18,31
 2007c38:	20a4b03a 	or	r18,r4,r2
 2007c3c:	003f0106 	br	2007844 <__divdf3+0x330>
 2007c40:	e4bff51e 	bne	fp,r18,2007c18 <__divdf3+0x704>
 2007c44:	85bff22e 	bgeu	r16,r22,2007c10 <__divdf3+0x6fc>
 2007c48:	e0c7c83a 	sub	r3,fp,r3
 2007c4c:	1023883a 	mov	r17,r2
 2007c50:	003f4606 	br	200796c <__divdf3+0x458>
 2007c54:	100f883a 	mov	r7,r2
 2007c58:	003f2b06 	br	2007908 <__divdf3+0x3f4>
 2007c5c:	180d883a 	mov	r6,r3
 2007c60:	003f1306 	br	20078b0 <__divdf3+0x39c>
 2007c64:	813fe436 	bltu	r16,r4,2007bf8 <__divdf3+0x6e4>
 2007c68:	0007883a 	mov	r3,zero
 2007c6c:	003f3f06 	br	200796c <__divdf3+0x458>
 2007c70:	ba402c36 	bltu	r23,r9,2007d24 <__divdf3+0x810>
 2007c74:	4dc05426 	beq	r9,r23,2007dc8 <__divdf3+0x8b4>
 2007c78:	1011883a 	mov	r8,r2
 2007c7c:	003f8906 	br	2007aa4 <__divdf3+0x590>
 2007c80:	023fffc4 	movi	r8,-1
 2007c84:	003f8806 	br	2007aa8 <__divdf3+0x594>
 2007c88:	1811883a 	mov	r8,r3
 2007c8c:	003f5406 	br	20079e0 <__divdf3+0x4cc>
 2007c90:	1025883a 	mov	r18,r2
 2007c94:	003f6d06 	br	2007a4c <__divdf3+0x538>
 2007c98:	b827883a 	mov	r19,r23
 2007c9c:	003f8206 	br	2007aa8 <__divdf3+0x594>
 2007ca0:	010007c4 	movi	r4,31
 2007ca4:	20c02616 	blt	r4,r3,2007d40 <__divdf3+0x82c>
 2007ca8:	00800804 	movi	r2,32
 2007cac:	10c5c83a 	sub	r2,r2,r3
 2007cb0:	888a983a 	sll	r5,r17,r2
 2007cb4:	40c8d83a 	srl	r4,r8,r3
 2007cb8:	4084983a 	sll	r2,r8,r2
 2007cbc:	88e2d83a 	srl	r17,r17,r3
 2007cc0:	2906b03a 	or	r3,r5,r4
 2007cc4:	1004c03a 	cmpne	r2,r2,zero
 2007cc8:	1886b03a 	or	r3,r3,r2
 2007ccc:	188001cc 	andi	r2,r3,7
 2007cd0:	10000726 	beq	r2,zero,2007cf0 <__divdf3+0x7dc>
 2007cd4:	188003cc 	andi	r2,r3,15
 2007cd8:	01000104 	movi	r4,4
 2007cdc:	11000426 	beq	r2,r4,2007cf0 <__divdf3+0x7dc>
 2007ce0:	1805883a 	mov	r2,r3
 2007ce4:	10c00104 	addi	r3,r2,4
 2007ce8:	1885803a 	cmpltu	r2,r3,r2
 2007cec:	88a3883a 	add	r17,r17,r2
 2007cf0:	8880202c 	andhi	r2,r17,128
 2007cf4:	10002726 	beq	r2,zero,2007d94 <__divdf3+0x880>
 2007cf8:	98c0004c 	andi	r3,r19,1
 2007cfc:	00800044 	movi	r2,1
 2007d00:	000b883a 	mov	r5,zero
 2007d04:	0025883a 	mov	r18,zero
 2007d08:	003e6106 	br	2007690 <__divdf3+0x17c>
 2007d0c:	85a1883a 	add	r16,r16,r22
 2007d10:	8585803a 	cmpltu	r2,r16,r22
 2007d14:	1705883a 	add	r2,r2,fp
 2007d18:	14a5883a 	add	r18,r2,r18
 2007d1c:	8c7fff84 	addi	r17,r17,-2
 2007d20:	003f1106 	br	2007968 <__divdf3+0x454>
 2007d24:	b589883a 	add	r4,r22,r22
 2007d28:	25ad803a 	cmpltu	r22,r4,r22
 2007d2c:	b739883a 	add	fp,r22,fp
 2007d30:	40bfff84 	addi	r2,r8,-2
 2007d34:	bf2f883a 	add	r23,r23,fp
 2007d38:	202d883a 	mov	r22,r4
 2007d3c:	003f9306 	br	2007b8c <__divdf3+0x678>
 2007d40:	013ff844 	movi	r4,-31
 2007d44:	2085c83a 	sub	r2,r4,r2
 2007d48:	8888d83a 	srl	r4,r17,r2
 2007d4c:	00800804 	movi	r2,32
 2007d50:	18802126 	beq	r3,r2,2007dd8 <__divdf3+0x8c4>
 2007d54:	00801004 	movi	r2,64
 2007d58:	10c5c83a 	sub	r2,r2,r3
 2007d5c:	8884983a 	sll	r2,r17,r2
 2007d60:	1204b03a 	or	r2,r2,r8
 2007d64:	1004c03a 	cmpne	r2,r2,zero
 2007d68:	2084b03a 	or	r2,r4,r2
 2007d6c:	144001cc 	andi	r17,r2,7
 2007d70:	88000d1e 	bne	r17,zero,2007da8 <__divdf3+0x894>
 2007d74:	000b883a 	mov	r5,zero
 2007d78:	1024d0fa 	srli	r18,r2,3
 2007d7c:	98c0004c 	andi	r3,r19,1
 2007d80:	0005883a 	mov	r2,zero
 2007d84:	9464b03a 	or	r18,r18,r17
 2007d88:	003e4106 	br	2007690 <__divdf3+0x17c>
 2007d8c:	1007883a 	mov	r3,r2
 2007d90:	0023883a 	mov	r17,zero
 2007d94:	880a927a 	slli	r5,r17,9
 2007d98:	1805883a 	mov	r2,r3
 2007d9c:	8822977a 	slli	r17,r17,29
 2007da0:	280ad33a 	srli	r5,r5,12
 2007da4:	003ff406 	br	2007d78 <__divdf3+0x864>
 2007da8:	10c003cc 	andi	r3,r2,15
 2007dac:	01000104 	movi	r4,4
 2007db0:	193ff626 	beq	r3,r4,2007d8c <__divdf3+0x878>
 2007db4:	0023883a 	mov	r17,zero
 2007db8:	003fca06 	br	2007ce4 <__divdf3+0x7d0>
 2007dbc:	813fd336 	bltu	r16,r4,2007d0c <__divdf3+0x7f8>
 2007dc0:	1023883a 	mov	r17,r2
 2007dc4:	003fa806 	br	2007c68 <__divdf3+0x754>
 2007dc8:	b0ffd636 	bltu	r22,r3,2007d24 <__divdf3+0x810>
 2007dcc:	1011883a 	mov	r8,r2
 2007dd0:	b0ff341e 	bne	r22,r3,2007aa4 <__divdf3+0x590>
 2007dd4:	003f3406 	br	2007aa8 <__divdf3+0x594>
 2007dd8:	0005883a 	mov	r2,zero
 2007ddc:	003fe006 	br	2007d60 <__divdf3+0x84c>
 2007de0:	00800434 	movhi	r2,16
 2007de4:	89400234 	orhi	r5,r17,8
 2007de8:	10bfffc4 	addi	r2,r2,-1
 2007dec:	b807883a 	mov	r3,r23
 2007df0:	288a703a 	and	r5,r5,r2
 2007df4:	4025883a 	mov	r18,r8
 2007df8:	003e8206 	br	2007804 <__divdf3+0x2f0>

02007dfc <__eqdf2>:
 2007dfc:	2804d53a 	srli	r2,r5,20
 2007e00:	3806d53a 	srli	r3,r7,20
 2007e04:	02000434 	movhi	r8,16
 2007e08:	423fffc4 	addi	r8,r8,-1
 2007e0c:	1081ffcc 	andi	r2,r2,2047
 2007e10:	0281ffc4 	movi	r10,2047
 2007e14:	2a12703a 	and	r9,r5,r8
 2007e18:	18c1ffcc 	andi	r3,r3,2047
 2007e1c:	3a10703a 	and	r8,r7,r8
 2007e20:	280ad7fa 	srli	r5,r5,31
 2007e24:	380ed7fa 	srli	r7,r7,31
 2007e28:	12801026 	beq	r2,r10,2007e6c <__eqdf2+0x70>
 2007e2c:	0281ffc4 	movi	r10,2047
 2007e30:	1a800a26 	beq	r3,r10,2007e5c <__eqdf2+0x60>
 2007e34:	10c00226 	beq	r2,r3,2007e40 <__eqdf2+0x44>
 2007e38:	00800044 	movi	r2,1
 2007e3c:	f800283a 	ret
 2007e40:	4a3ffd1e 	bne	r9,r8,2007e38 <__eqdf2+0x3c>
 2007e44:	21bffc1e 	bne	r4,r6,2007e38 <__eqdf2+0x3c>
 2007e48:	29c00c26 	beq	r5,r7,2007e7c <__eqdf2+0x80>
 2007e4c:	103ffa1e 	bne	r2,zero,2007e38 <__eqdf2+0x3c>
 2007e50:	2244b03a 	or	r2,r4,r9
 2007e54:	1004c03a 	cmpne	r2,r2,zero
 2007e58:	f800283a 	ret
 2007e5c:	3214b03a 	or	r10,r6,r8
 2007e60:	503ff426 	beq	r10,zero,2007e34 <__eqdf2+0x38>
 2007e64:	00800044 	movi	r2,1
 2007e68:	f800283a 	ret
 2007e6c:	2254b03a 	or	r10,r4,r9
 2007e70:	503fee26 	beq	r10,zero,2007e2c <__eqdf2+0x30>
 2007e74:	00800044 	movi	r2,1
 2007e78:	f800283a 	ret
 2007e7c:	0005883a 	mov	r2,zero
 2007e80:	f800283a 	ret

02007e84 <__gedf2>:
 2007e84:	2804d53a 	srli	r2,r5,20
 2007e88:	3806d53a 	srli	r3,r7,20
 2007e8c:	02000434 	movhi	r8,16
 2007e90:	423fffc4 	addi	r8,r8,-1
 2007e94:	1081ffcc 	andi	r2,r2,2047
 2007e98:	0241ffc4 	movi	r9,2047
 2007e9c:	2a14703a 	and	r10,r5,r8
 2007ea0:	18c1ffcc 	andi	r3,r3,2047
 2007ea4:	3a10703a 	and	r8,r7,r8
 2007ea8:	280ad7fa 	srli	r5,r5,31
 2007eac:	380ed7fa 	srli	r7,r7,31
 2007eb0:	12401d26 	beq	r2,r9,2007f28 <__gedf2+0xa4>
 2007eb4:	0241ffc4 	movi	r9,2047
 2007eb8:	1a401226 	beq	r3,r9,2007f04 <__gedf2+0x80>
 2007ebc:	1000081e 	bne	r2,zero,2007ee0 <__gedf2+0x5c>
 2007ec0:	2296b03a 	or	r11,r4,r10
 2007ec4:	5813003a 	cmpeq	r9,r11,zero
 2007ec8:	1800091e 	bne	r3,zero,2007ef0 <__gedf2+0x6c>
 2007ecc:	3218b03a 	or	r12,r6,r8
 2007ed0:	6000071e 	bne	r12,zero,2007ef0 <__gedf2+0x6c>
 2007ed4:	0005883a 	mov	r2,zero
 2007ed8:	5800101e 	bne	r11,zero,2007f1c <__gedf2+0x98>
 2007edc:	f800283a 	ret
 2007ee0:	18000c1e 	bne	r3,zero,2007f14 <__gedf2+0x90>
 2007ee4:	3212b03a 	or	r9,r6,r8
 2007ee8:	48000c26 	beq	r9,zero,2007f1c <__gedf2+0x98>
 2007eec:	0013883a 	mov	r9,zero
 2007ef0:	39c03fcc 	andi	r7,r7,255
 2007ef4:	48000826 	beq	r9,zero,2007f18 <__gedf2+0x94>
 2007ef8:	38000926 	beq	r7,zero,2007f20 <__gedf2+0x9c>
 2007efc:	00800044 	movi	r2,1
 2007f00:	f800283a 	ret
 2007f04:	3212b03a 	or	r9,r6,r8
 2007f08:	483fec26 	beq	r9,zero,2007ebc <__gedf2+0x38>
 2007f0c:	00bfff84 	movi	r2,-2
 2007f10:	f800283a 	ret
 2007f14:	39c03fcc 	andi	r7,r7,255
 2007f18:	29c00626 	beq	r5,r7,2007f34 <__gedf2+0xb0>
 2007f1c:	283ff726 	beq	r5,zero,2007efc <__gedf2+0x78>
 2007f20:	00bfffc4 	movi	r2,-1
 2007f24:	f800283a 	ret
 2007f28:	2292b03a 	or	r9,r4,r10
 2007f2c:	483fe126 	beq	r9,zero,2007eb4 <__gedf2+0x30>
 2007f30:	003ff606 	br	2007f0c <__gedf2+0x88>
 2007f34:	18bff916 	blt	r3,r2,2007f1c <__gedf2+0x98>
 2007f38:	10c00316 	blt	r2,r3,2007f48 <__gedf2+0xc4>
 2007f3c:	42bff736 	bltu	r8,r10,2007f1c <__gedf2+0x98>
 2007f40:	52000326 	beq	r10,r8,2007f50 <__gedf2+0xcc>
 2007f44:	5200042e 	bgeu	r10,r8,2007f58 <__gedf2+0xd4>
 2007f48:	283fec1e 	bne	r5,zero,2007efc <__gedf2+0x78>
 2007f4c:	003ff406 	br	2007f20 <__gedf2+0x9c>
 2007f50:	313ff236 	bltu	r6,r4,2007f1c <__gedf2+0x98>
 2007f54:	21bffc36 	bltu	r4,r6,2007f48 <__gedf2+0xc4>
 2007f58:	0005883a 	mov	r2,zero
 2007f5c:	f800283a 	ret

02007f60 <__ledf2>:
 2007f60:	2804d53a 	srli	r2,r5,20
 2007f64:	3810d53a 	srli	r8,r7,20
 2007f68:	00c00434 	movhi	r3,16
 2007f6c:	18ffffc4 	addi	r3,r3,-1
 2007f70:	1081ffcc 	andi	r2,r2,2047
 2007f74:	0241ffc4 	movi	r9,2047
 2007f78:	28d4703a 	and	r10,r5,r3
 2007f7c:	4201ffcc 	andi	r8,r8,2047
 2007f80:	38c6703a 	and	r3,r7,r3
 2007f84:	280ad7fa 	srli	r5,r5,31
 2007f88:	380ed7fa 	srli	r7,r7,31
 2007f8c:	12401f26 	beq	r2,r9,200800c <__ledf2+0xac>
 2007f90:	0241ffc4 	movi	r9,2047
 2007f94:	42401426 	beq	r8,r9,2007fe8 <__ledf2+0x88>
 2007f98:	1000091e 	bne	r2,zero,2007fc0 <__ledf2+0x60>
 2007f9c:	2296b03a 	or	r11,r4,r10
 2007fa0:	5813003a 	cmpeq	r9,r11,zero
 2007fa4:	29403fcc 	andi	r5,r5,255
 2007fa8:	40000a1e 	bne	r8,zero,2007fd4 <__ledf2+0x74>
 2007fac:	30d8b03a 	or	r12,r6,r3
 2007fb0:	6000081e 	bne	r12,zero,2007fd4 <__ledf2+0x74>
 2007fb4:	0005883a 	mov	r2,zero
 2007fb8:	5800111e 	bne	r11,zero,2008000 <__ledf2+0xa0>
 2007fbc:	f800283a 	ret
 2007fc0:	29403fcc 	andi	r5,r5,255
 2007fc4:	40000c1e 	bne	r8,zero,2007ff8 <__ledf2+0x98>
 2007fc8:	30d2b03a 	or	r9,r6,r3
 2007fcc:	48000c26 	beq	r9,zero,2008000 <__ledf2+0xa0>
 2007fd0:	0013883a 	mov	r9,zero
 2007fd4:	39c03fcc 	andi	r7,r7,255
 2007fd8:	48000826 	beq	r9,zero,2007ffc <__ledf2+0x9c>
 2007fdc:	38001126 	beq	r7,zero,2008024 <__ledf2+0xc4>
 2007fe0:	00800044 	movi	r2,1
 2007fe4:	f800283a 	ret
 2007fe8:	30d2b03a 	or	r9,r6,r3
 2007fec:	483fea26 	beq	r9,zero,2007f98 <__ledf2+0x38>
 2007ff0:	00800084 	movi	r2,2
 2007ff4:	f800283a 	ret
 2007ff8:	39c03fcc 	andi	r7,r7,255
 2007ffc:	39400726 	beq	r7,r5,200801c <__ledf2+0xbc>
 2008000:	2800081e 	bne	r5,zero,2008024 <__ledf2+0xc4>
 2008004:	00800044 	movi	r2,1
 2008008:	f800283a 	ret
 200800c:	2292b03a 	or	r9,r4,r10
 2008010:	483fdf26 	beq	r9,zero,2007f90 <__ledf2+0x30>
 2008014:	00800084 	movi	r2,2
 2008018:	f800283a 	ret
 200801c:	4080030e 	bge	r8,r2,200802c <__ledf2+0xcc>
 2008020:	383fef26 	beq	r7,zero,2007fe0 <__ledf2+0x80>
 2008024:	00bfffc4 	movi	r2,-1
 2008028:	f800283a 	ret
 200802c:	123feb16 	blt	r2,r8,2007fdc <__ledf2+0x7c>
 2008030:	1abff336 	bltu	r3,r10,2008000 <__ledf2+0xa0>
 2008034:	50c00326 	beq	r10,r3,2008044 <__ledf2+0xe4>
 2008038:	50c0042e 	bgeu	r10,r3,200804c <__ledf2+0xec>
 200803c:	283fe81e 	bne	r5,zero,2007fe0 <__ledf2+0x80>
 2008040:	003ff806 	br	2008024 <__ledf2+0xc4>
 2008044:	313fee36 	bltu	r6,r4,2008000 <__ledf2+0xa0>
 2008048:	21bffc36 	bltu	r4,r6,200803c <__ledf2+0xdc>
 200804c:	0005883a 	mov	r2,zero
 2008050:	f800283a 	ret

02008054 <__muldf3>:
 2008054:	defff304 	addi	sp,sp,-52
 2008058:	2804d53a 	srli	r2,r5,20
 200805c:	dd800915 	stw	r22,36(sp)
 2008060:	282cd7fa 	srli	r22,r5,31
 2008064:	dc000315 	stw	r16,12(sp)
 2008068:	04000434 	movhi	r16,16
 200806c:	dd400815 	stw	r21,32(sp)
 2008070:	dc800515 	stw	r18,20(sp)
 2008074:	843fffc4 	addi	r16,r16,-1
 2008078:	dfc00c15 	stw	ra,48(sp)
 200807c:	df000b15 	stw	fp,44(sp)
 2008080:	ddc00a15 	stw	r23,40(sp)
 2008084:	dd000715 	stw	r20,28(sp)
 2008088:	dcc00615 	stw	r19,24(sp)
 200808c:	dc400415 	stw	r17,16(sp)
 2008090:	1481ffcc 	andi	r18,r2,2047
 2008094:	2c20703a 	and	r16,r5,r16
 2008098:	b02b883a 	mov	r21,r22
 200809c:	b2403fcc 	andi	r9,r22,255
 20080a0:	90006026 	beq	r18,zero,2008224 <__muldf3+0x1d0>
 20080a4:	0081ffc4 	movi	r2,2047
 20080a8:	2029883a 	mov	r20,r4
 20080ac:	90803626 	beq	r18,r2,2008188 <__muldf3+0x134>
 20080b0:	80800434 	orhi	r2,r16,16
 20080b4:	100490fa 	slli	r2,r2,3
 20080b8:	2020d77a 	srli	r16,r4,29
 20080bc:	202890fa 	slli	r20,r4,3
 20080c0:	94bf0044 	addi	r18,r18,-1023
 20080c4:	80a0b03a 	or	r16,r16,r2
 20080c8:	0027883a 	mov	r19,zero
 20080cc:	0039883a 	mov	fp,zero
 20080d0:	3804d53a 	srli	r2,r7,20
 20080d4:	382ed7fa 	srli	r23,r7,31
 20080d8:	04400434 	movhi	r17,16
 20080dc:	8c7fffc4 	addi	r17,r17,-1
 20080e0:	1081ffcc 	andi	r2,r2,2047
 20080e4:	3011883a 	mov	r8,r6
 20080e8:	3c62703a 	and	r17,r7,r17
 20080ec:	ba803fcc 	andi	r10,r23,255
 20080f0:	10006d26 	beq	r2,zero,20082a8 <__muldf3+0x254>
 20080f4:	00c1ffc4 	movi	r3,2047
 20080f8:	10c06526 	beq	r2,r3,2008290 <__muldf3+0x23c>
 20080fc:	88c00434 	orhi	r3,r17,16
 2008100:	180690fa 	slli	r3,r3,3
 2008104:	3022d77a 	srli	r17,r6,29
 2008108:	301090fa 	slli	r8,r6,3
 200810c:	10bf0044 	addi	r2,r2,-1023
 2008110:	88e2b03a 	or	r17,r17,r3
 2008114:	000b883a 	mov	r5,zero
 2008118:	9085883a 	add	r2,r18,r2
 200811c:	2cc8b03a 	or	r4,r5,r19
 2008120:	00c003c4 	movi	r3,15
 2008124:	bdacf03a 	xor	r22,r23,r22
 2008128:	12c00044 	addi	r11,r2,1
 200812c:	19009936 	bltu	r3,r4,2008394 <__muldf3+0x340>
 2008130:	200890ba 	slli	r4,r4,2
 2008134:	00c08074 	movhi	r3,513
 2008138:	18e05204 	addi	r3,r3,-32440
 200813c:	20c9883a 	add	r4,r4,r3
 2008140:	20c00017 	ldw	r3,0(r4)
 2008144:	1800683a 	jmp	r3
 2008148:	02008394 	movui	r8,526
 200814c:	020081a8 	cmpgeui	r8,zero,518
 2008150:	020081a8 	cmpgeui	r8,zero,518
 2008154:	020081a4 	muli	r8,zero,518
 2008158:	02008370 	cmpltui	r8,zero,525
 200815c:	02008370 	cmpltui	r8,zero,525
 2008160:	02008358 	cmpnei	r8,zero,525
 2008164:	020081a4 	muli	r8,zero,518
 2008168:	02008370 	cmpltui	r8,zero,525
 200816c:	02008358 	cmpnei	r8,zero,525
 2008170:	02008370 	cmpltui	r8,zero,525
 2008174:	020081a4 	muli	r8,zero,518
 2008178:	02008380 	call	200838 <__alt_mem_mem_Nios_PI+0x838>
 200817c:	02008380 	call	200838 <__alt_mem_mem_Nios_PI+0x838>
 2008180:	02008380 	call	200838 <__alt_mem_mem_Nios_PI+0x838>
 2008184:	0200859c 	xori	r8,zero,534
 2008188:	2404b03a 	or	r2,r4,r16
 200818c:	10006f1e 	bne	r2,zero,200834c <__muldf3+0x2f8>
 2008190:	04c00204 	movi	r19,8
 2008194:	0021883a 	mov	r16,zero
 2008198:	0029883a 	mov	r20,zero
 200819c:	07000084 	movi	fp,2
 20081a0:	003fcb06 	br	20080d0 <__muldf3+0x7c>
 20081a4:	502d883a 	mov	r22,r10
 20081a8:	00800084 	movi	r2,2
 20081ac:	28805726 	beq	r5,r2,200830c <__muldf3+0x2b8>
 20081b0:	008000c4 	movi	r2,3
 20081b4:	28816626 	beq	r5,r2,2008750 <__muldf3+0x6fc>
 20081b8:	00800044 	movi	r2,1
 20081bc:	2881411e 	bne	r5,r2,20086c4 <__muldf3+0x670>
 20081c0:	b02b883a 	mov	r21,r22
 20081c4:	0005883a 	mov	r2,zero
 20081c8:	000b883a 	mov	r5,zero
 20081cc:	0029883a 	mov	r20,zero
 20081d0:	1004953a 	slli	r2,r2,20
 20081d4:	a8c03fcc 	andi	r3,r21,255
 20081d8:	04400434 	movhi	r17,16
 20081dc:	8c7fffc4 	addi	r17,r17,-1
 20081e0:	180697fa 	slli	r3,r3,31
 20081e4:	2c4a703a 	and	r5,r5,r17
 20081e8:	288ab03a 	or	r5,r5,r2
 20081ec:	28c6b03a 	or	r3,r5,r3
 20081f0:	a005883a 	mov	r2,r20
 20081f4:	dfc00c17 	ldw	ra,48(sp)
 20081f8:	df000b17 	ldw	fp,44(sp)
 20081fc:	ddc00a17 	ldw	r23,40(sp)
 2008200:	dd800917 	ldw	r22,36(sp)
 2008204:	dd400817 	ldw	r21,32(sp)
 2008208:	dd000717 	ldw	r20,28(sp)
 200820c:	dcc00617 	ldw	r19,24(sp)
 2008210:	dc800517 	ldw	r18,20(sp)
 2008214:	dc400417 	ldw	r17,16(sp)
 2008218:	dc000317 	ldw	r16,12(sp)
 200821c:	dec00d04 	addi	sp,sp,52
 2008220:	f800283a 	ret
 2008224:	2404b03a 	or	r2,r4,r16
 2008228:	2027883a 	mov	r19,r4
 200822c:	10004226 	beq	r2,zero,2008338 <__muldf3+0x2e4>
 2008230:	8000fc26 	beq	r16,zero,2008624 <__muldf3+0x5d0>
 2008234:	8009883a 	mov	r4,r16
 2008238:	d9800215 	stw	r6,8(sp)
 200823c:	d9c00015 	stw	r7,0(sp)
 2008240:	da400115 	stw	r9,4(sp)
 2008244:	20093200 	call	2009320 <__clzsi2>
 2008248:	d9800217 	ldw	r6,8(sp)
 200824c:	d9c00017 	ldw	r7,0(sp)
 2008250:	da400117 	ldw	r9,4(sp)
 2008254:	113ffd44 	addi	r4,r2,-11
 2008258:	00c00704 	movi	r3,28
 200825c:	1900ed16 	blt	r3,r4,2008614 <__muldf3+0x5c0>
 2008260:	00c00744 	movi	r3,29
 2008264:	147ffe04 	addi	r17,r2,-8
 2008268:	1907c83a 	sub	r3,r3,r4
 200826c:	8460983a 	sll	r16,r16,r17
 2008270:	98c6d83a 	srl	r3,r19,r3
 2008274:	9c68983a 	sll	r20,r19,r17
 2008278:	1c20b03a 	or	r16,r3,r16
 200827c:	1080fcc4 	addi	r2,r2,1011
 2008280:	00a5c83a 	sub	r18,zero,r2
 2008284:	0027883a 	mov	r19,zero
 2008288:	0039883a 	mov	fp,zero
 200828c:	003f9006 	br	20080d0 <__muldf3+0x7c>
 2008290:	3446b03a 	or	r3,r6,r17
 2008294:	1800261e 	bne	r3,zero,2008330 <__muldf3+0x2dc>
 2008298:	0023883a 	mov	r17,zero
 200829c:	0011883a 	mov	r8,zero
 20082a0:	01400084 	movi	r5,2
 20082a4:	003f9c06 	br	2008118 <__muldf3+0xc4>
 20082a8:	3446b03a 	or	r3,r6,r17
 20082ac:	18001c26 	beq	r3,zero,2008320 <__muldf3+0x2cc>
 20082b0:	8800ce26 	beq	r17,zero,20085ec <__muldf3+0x598>
 20082b4:	8809883a 	mov	r4,r17
 20082b8:	d9800215 	stw	r6,8(sp)
 20082bc:	da400115 	stw	r9,4(sp)
 20082c0:	da800015 	stw	r10,0(sp)
 20082c4:	20093200 	call	2009320 <__clzsi2>
 20082c8:	d9800217 	ldw	r6,8(sp)
 20082cc:	da400117 	ldw	r9,4(sp)
 20082d0:	da800017 	ldw	r10,0(sp)
 20082d4:	113ffd44 	addi	r4,r2,-11
 20082d8:	00c00704 	movi	r3,28
 20082dc:	1900bf16 	blt	r3,r4,20085dc <__muldf3+0x588>
 20082e0:	00c00744 	movi	r3,29
 20082e4:	123ffe04 	addi	r8,r2,-8
 20082e8:	1907c83a 	sub	r3,r3,r4
 20082ec:	8a22983a 	sll	r17,r17,r8
 20082f0:	30c6d83a 	srl	r3,r6,r3
 20082f4:	3210983a 	sll	r8,r6,r8
 20082f8:	1c62b03a 	or	r17,r3,r17
 20082fc:	1080fcc4 	addi	r2,r2,1011
 2008300:	0085c83a 	sub	r2,zero,r2
 2008304:	000b883a 	mov	r5,zero
 2008308:	003f8306 	br	2008118 <__muldf3+0xc4>
 200830c:	b02b883a 	mov	r21,r22
 2008310:	0081ffc4 	movi	r2,2047
 2008314:	000b883a 	mov	r5,zero
 2008318:	0029883a 	mov	r20,zero
 200831c:	003fac06 	br	20081d0 <__muldf3+0x17c>
 2008320:	0023883a 	mov	r17,zero
 2008324:	0011883a 	mov	r8,zero
 2008328:	01400044 	movi	r5,1
 200832c:	003f7a06 	br	2008118 <__muldf3+0xc4>
 2008330:	014000c4 	movi	r5,3
 2008334:	003f7806 	br	2008118 <__muldf3+0xc4>
 2008338:	04c00104 	movi	r19,4
 200833c:	0021883a 	mov	r16,zero
 2008340:	0029883a 	mov	r20,zero
 2008344:	07000044 	movi	fp,1
 2008348:	003f6106 	br	20080d0 <__muldf3+0x7c>
 200834c:	04c00304 	movi	r19,12
 2008350:	070000c4 	movi	fp,3
 2008354:	003f5e06 	br	20080d0 <__muldf3+0x7c>
 2008358:	01400434 	movhi	r5,16
 200835c:	002b883a 	mov	r21,zero
 2008360:	297fffc4 	addi	r5,r5,-1
 2008364:	053fffc4 	movi	r20,-1
 2008368:	0081ffc4 	movi	r2,2047
 200836c:	003f9806 	br	20081d0 <__muldf3+0x17c>
 2008370:	8023883a 	mov	r17,r16
 2008374:	a011883a 	mov	r8,r20
 2008378:	e00b883a 	mov	r5,fp
 200837c:	003f8a06 	br	20081a8 <__muldf3+0x154>
 2008380:	8023883a 	mov	r17,r16
 2008384:	a011883a 	mov	r8,r20
 2008388:	482d883a 	mov	r22,r9
 200838c:	e00b883a 	mov	r5,fp
 2008390:	003f8506 	br	20081a8 <__muldf3+0x154>
 2008394:	a00ad43a 	srli	r5,r20,16
 2008398:	401ad43a 	srli	r13,r8,16
 200839c:	a53fffcc 	andi	r20,r20,65535
 20083a0:	423fffcc 	andi	r8,r8,65535
 20083a4:	4519383a 	mul	r12,r8,r20
 20083a8:	4147383a 	mul	r3,r8,r5
 20083ac:	6d09383a 	mul	r4,r13,r20
 20083b0:	600cd43a 	srli	r6,r12,16
 20083b4:	2b5d383a 	mul	r14,r5,r13
 20083b8:	20c9883a 	add	r4,r4,r3
 20083bc:	310d883a 	add	r6,r6,r4
 20083c0:	30c0022e 	bgeu	r6,r3,20083cc <__muldf3+0x378>
 20083c4:	00c00074 	movhi	r3,1
 20083c8:	70dd883a 	add	r14,r14,r3
 20083cc:	8826d43a 	srli	r19,r17,16
 20083d0:	8bffffcc 	andi	r15,r17,65535
 20083d4:	7d23383a 	mul	r17,r15,r20
 20083d8:	7949383a 	mul	r4,r15,r5
 20083dc:	9d29383a 	mul	r20,r19,r20
 20083e0:	8814d43a 	srli	r10,r17,16
 20083e4:	3012943a 	slli	r9,r6,16
 20083e8:	a129883a 	add	r20,r20,r4
 20083ec:	633fffcc 	andi	r12,r12,65535
 20083f0:	5515883a 	add	r10,r10,r20
 20083f4:	3006d43a 	srli	r3,r6,16
 20083f8:	4b13883a 	add	r9,r9,r12
 20083fc:	2ccb383a 	mul	r5,r5,r19
 2008400:	5100022e 	bgeu	r10,r4,200840c <__muldf3+0x3b8>
 2008404:	01000074 	movhi	r4,1
 2008408:	290b883a 	add	r5,r5,r4
 200840c:	802ad43a 	srli	r21,r16,16
 2008410:	843fffcc 	andi	r16,r16,65535
 2008414:	440d383a 	mul	r6,r8,r16
 2008418:	4565383a 	mul	r18,r8,r21
 200841c:	8349383a 	mul	r4,r16,r13
 2008420:	500e943a 	slli	r7,r10,16
 2008424:	3010d43a 	srli	r8,r6,16
 2008428:	5028d43a 	srli	r20,r10,16
 200842c:	2489883a 	add	r4,r4,r18
 2008430:	8abfffcc 	andi	r10,r17,65535
 2008434:	3a95883a 	add	r10,r7,r10
 2008438:	4119883a 	add	r12,r8,r4
 200843c:	a169883a 	add	r20,r20,r5
 2008440:	1a87883a 	add	r3,r3,r10
 2008444:	6d5b383a 	mul	r13,r13,r21
 2008448:	6480022e 	bgeu	r12,r18,2008454 <__muldf3+0x400>
 200844c:	01000074 	movhi	r4,1
 2008450:	691b883a 	add	r13,r13,r4
 2008454:	7c25383a 	mul	r18,r15,r16
 2008458:	7d4b383a 	mul	r5,r15,r21
 200845c:	84cf383a 	mul	r7,r16,r19
 2008460:	901ed43a 	srli	r15,r18,16
 2008464:	6008d43a 	srli	r4,r12,16
 2008468:	6010943a 	slli	r8,r12,16
 200846c:	394f883a 	add	r7,r7,r5
 2008470:	333fffcc 	andi	r12,r6,65535
 2008474:	79df883a 	add	r15,r15,r7
 2008478:	235b883a 	add	r13,r4,r13
 200847c:	9d63383a 	mul	r17,r19,r21
 2008480:	4309883a 	add	r4,r8,r12
 2008484:	7940022e 	bgeu	r15,r5,2008490 <__muldf3+0x43c>
 2008488:	01400074 	movhi	r5,1
 200848c:	8963883a 	add	r17,r17,r5
 2008490:	780a943a 	slli	r5,r15,16
 2008494:	91bfffcc 	andi	r6,r18,65535
 2008498:	70c7883a 	add	r3,r14,r3
 200849c:	298d883a 	add	r6,r5,r6
 20084a0:	1a8f803a 	cmpltu	r7,r3,r10
 20084a4:	350b883a 	add	r5,r6,r20
 20084a8:	20c7883a 	add	r3,r4,r3
 20084ac:	3955883a 	add	r10,r7,r5
 20084b0:	1909803a 	cmpltu	r4,r3,r4
 20084b4:	6a91883a 	add	r8,r13,r10
 20084b8:	780cd43a 	srli	r6,r15,16
 20084bc:	2219883a 	add	r12,r4,r8
 20084c0:	2d0b803a 	cmpltu	r5,r5,r20
 20084c4:	51cf803a 	cmpltu	r7,r10,r7
 20084c8:	29ceb03a 	or	r7,r5,r7
 20084cc:	4351803a 	cmpltu	r8,r8,r13
 20084d0:	610b803a 	cmpltu	r5,r12,r4
 20084d4:	4148b03a 	or	r4,r8,r5
 20084d8:	398f883a 	add	r7,r7,r6
 20084dc:	3909883a 	add	r4,r7,r4
 20084e0:	1810927a 	slli	r8,r3,9
 20084e4:	2449883a 	add	r4,r4,r17
 20084e8:	2008927a 	slli	r4,r4,9
 20084ec:	6022d5fa 	srli	r17,r12,23
 20084f0:	1806d5fa 	srli	r3,r3,23
 20084f4:	4252b03a 	or	r9,r8,r9
 20084f8:	600a927a 	slli	r5,r12,9
 20084fc:	4810c03a 	cmpne	r8,r9,zero
 2008500:	2462b03a 	or	r17,r4,r17
 2008504:	40c6b03a 	or	r3,r8,r3
 2008508:	8900402c 	andhi	r4,r17,256
 200850c:	1950b03a 	or	r8,r3,r5
 2008510:	20000726 	beq	r4,zero,2008530 <__muldf3+0x4dc>
 2008514:	4006d07a 	srli	r3,r8,1
 2008518:	880497fa 	slli	r2,r17,31
 200851c:	4200004c 	andi	r8,r8,1
 2008520:	8822d07a 	srli	r17,r17,1
 2008524:	1a10b03a 	or	r8,r3,r8
 2008528:	1210b03a 	or	r8,r2,r8
 200852c:	5805883a 	mov	r2,r11
 2008530:	1140ffc4 	addi	r5,r2,1023
 2008534:	0140440e 	bge	zero,r5,2008648 <__muldf3+0x5f4>
 2008538:	40c001cc 	andi	r3,r8,7
 200853c:	18000726 	beq	r3,zero,200855c <__muldf3+0x508>
 2008540:	40c003cc 	andi	r3,r8,15
 2008544:	01000104 	movi	r4,4
 2008548:	19000426 	beq	r3,r4,200855c <__muldf3+0x508>
 200854c:	4107883a 	add	r3,r8,r4
 2008550:	1a11803a 	cmpltu	r8,r3,r8
 2008554:	8a23883a 	add	r17,r17,r8
 2008558:	1811883a 	mov	r8,r3
 200855c:	88c0402c 	andhi	r3,r17,256
 2008560:	18000426 	beq	r3,zero,2008574 <__muldf3+0x520>
 2008564:	11410004 	addi	r5,r2,1024
 2008568:	00bfc034 	movhi	r2,65280
 200856c:	10bfffc4 	addi	r2,r2,-1
 2008570:	88a2703a 	and	r17,r17,r2
 2008574:	0081ff84 	movi	r2,2046
 2008578:	117f6416 	blt	r2,r5,200830c <__muldf3+0x2b8>
 200857c:	8828977a 	slli	r20,r17,29
 2008580:	4010d0fa 	srli	r8,r8,3
 2008584:	8822927a 	slli	r17,r17,9
 2008588:	2881ffcc 	andi	r2,r5,2047
 200858c:	a228b03a 	or	r20,r20,r8
 2008590:	880ad33a 	srli	r5,r17,12
 2008594:	b02b883a 	mov	r21,r22
 2008598:	003f0d06 	br	20081d0 <__muldf3+0x17c>
 200859c:	8080022c 	andhi	r2,r16,8
 20085a0:	10000926 	beq	r2,zero,20085c8 <__muldf3+0x574>
 20085a4:	8880022c 	andhi	r2,r17,8
 20085a8:	1000071e 	bne	r2,zero,20085c8 <__muldf3+0x574>
 20085ac:	00800434 	movhi	r2,16
 20085b0:	89400234 	orhi	r5,r17,8
 20085b4:	10bfffc4 	addi	r2,r2,-1
 20085b8:	b82b883a 	mov	r21,r23
 20085bc:	288a703a 	and	r5,r5,r2
 20085c0:	4029883a 	mov	r20,r8
 20085c4:	003f6806 	br	2008368 <__muldf3+0x314>
 20085c8:	00800434 	movhi	r2,16
 20085cc:	81400234 	orhi	r5,r16,8
 20085d0:	10bfffc4 	addi	r2,r2,-1
 20085d4:	288a703a 	and	r5,r5,r2
 20085d8:	003f6306 	br	2008368 <__muldf3+0x314>
 20085dc:	147ff604 	addi	r17,r2,-40
 20085e0:	3462983a 	sll	r17,r6,r17
 20085e4:	0011883a 	mov	r8,zero
 20085e8:	003f4406 	br	20082fc <__muldf3+0x2a8>
 20085ec:	3009883a 	mov	r4,r6
 20085f0:	d9800215 	stw	r6,8(sp)
 20085f4:	da400115 	stw	r9,4(sp)
 20085f8:	da800015 	stw	r10,0(sp)
 20085fc:	20093200 	call	2009320 <__clzsi2>
 2008600:	10800804 	addi	r2,r2,32
 2008604:	da800017 	ldw	r10,0(sp)
 2008608:	da400117 	ldw	r9,4(sp)
 200860c:	d9800217 	ldw	r6,8(sp)
 2008610:	003f3006 	br	20082d4 <__muldf3+0x280>
 2008614:	143ff604 	addi	r16,r2,-40
 2008618:	9c20983a 	sll	r16,r19,r16
 200861c:	0029883a 	mov	r20,zero
 2008620:	003f1606 	br	200827c <__muldf3+0x228>
 2008624:	d9800215 	stw	r6,8(sp)
 2008628:	d9c00015 	stw	r7,0(sp)
 200862c:	da400115 	stw	r9,4(sp)
 2008630:	20093200 	call	2009320 <__clzsi2>
 2008634:	10800804 	addi	r2,r2,32
 2008638:	da400117 	ldw	r9,4(sp)
 200863c:	d9c00017 	ldw	r7,0(sp)
 2008640:	d9800217 	ldw	r6,8(sp)
 2008644:	003f0306 	br	2008254 <__muldf3+0x200>
 2008648:	00c00044 	movi	r3,1
 200864c:	1947c83a 	sub	r3,r3,r5
 2008650:	00800e04 	movi	r2,56
 2008654:	10feda16 	blt	r2,r3,20081c0 <__muldf3+0x16c>
 2008658:	008007c4 	movi	r2,31
 200865c:	10c01b16 	blt	r2,r3,20086cc <__muldf3+0x678>
 2008660:	00800804 	movi	r2,32
 2008664:	10c5c83a 	sub	r2,r2,r3
 2008668:	888a983a 	sll	r5,r17,r2
 200866c:	40c8d83a 	srl	r4,r8,r3
 2008670:	4084983a 	sll	r2,r8,r2
 2008674:	88e2d83a 	srl	r17,r17,r3
 2008678:	2906b03a 	or	r3,r5,r4
 200867c:	1004c03a 	cmpne	r2,r2,zero
 2008680:	1886b03a 	or	r3,r3,r2
 2008684:	188001cc 	andi	r2,r3,7
 2008688:	10000726 	beq	r2,zero,20086a8 <__muldf3+0x654>
 200868c:	188003cc 	andi	r2,r3,15
 2008690:	01000104 	movi	r4,4
 2008694:	11000426 	beq	r2,r4,20086a8 <__muldf3+0x654>
 2008698:	1805883a 	mov	r2,r3
 200869c:	10c00104 	addi	r3,r2,4
 20086a0:	1885803a 	cmpltu	r2,r3,r2
 20086a4:	88a3883a 	add	r17,r17,r2
 20086a8:	8880202c 	andhi	r2,r17,128
 20086ac:	10001c26 	beq	r2,zero,2008720 <__muldf3+0x6cc>
 20086b0:	b02b883a 	mov	r21,r22
 20086b4:	00800044 	movi	r2,1
 20086b8:	000b883a 	mov	r5,zero
 20086bc:	0029883a 	mov	r20,zero
 20086c0:	003ec306 	br	20081d0 <__muldf3+0x17c>
 20086c4:	5805883a 	mov	r2,r11
 20086c8:	003f9906 	br	2008530 <__muldf3+0x4dc>
 20086cc:	00bff844 	movi	r2,-31
 20086d0:	1145c83a 	sub	r2,r2,r5
 20086d4:	8888d83a 	srl	r4,r17,r2
 20086d8:	00800804 	movi	r2,32
 20086dc:	18801a26 	beq	r3,r2,2008748 <__muldf3+0x6f4>
 20086e0:	00801004 	movi	r2,64
 20086e4:	10c5c83a 	sub	r2,r2,r3
 20086e8:	8884983a 	sll	r2,r17,r2
 20086ec:	1204b03a 	or	r2,r2,r8
 20086f0:	1004c03a 	cmpne	r2,r2,zero
 20086f4:	2084b03a 	or	r2,r4,r2
 20086f8:	144001cc 	andi	r17,r2,7
 20086fc:	88000d1e 	bne	r17,zero,2008734 <__muldf3+0x6e0>
 2008700:	000b883a 	mov	r5,zero
 2008704:	1028d0fa 	srli	r20,r2,3
 2008708:	b02b883a 	mov	r21,r22
 200870c:	0005883a 	mov	r2,zero
 2008710:	a468b03a 	or	r20,r20,r17
 2008714:	003eae06 	br	20081d0 <__muldf3+0x17c>
 2008718:	1007883a 	mov	r3,r2
 200871c:	0023883a 	mov	r17,zero
 2008720:	880a927a 	slli	r5,r17,9
 2008724:	1805883a 	mov	r2,r3
 2008728:	8822977a 	slli	r17,r17,29
 200872c:	280ad33a 	srli	r5,r5,12
 2008730:	003ff406 	br	2008704 <__muldf3+0x6b0>
 2008734:	10c003cc 	andi	r3,r2,15
 2008738:	01000104 	movi	r4,4
 200873c:	193ff626 	beq	r3,r4,2008718 <__muldf3+0x6c4>
 2008740:	0023883a 	mov	r17,zero
 2008744:	003fd506 	br	200869c <__muldf3+0x648>
 2008748:	0005883a 	mov	r2,zero
 200874c:	003fe706 	br	20086ec <__muldf3+0x698>
 2008750:	00800434 	movhi	r2,16
 2008754:	89400234 	orhi	r5,r17,8
 2008758:	10bfffc4 	addi	r2,r2,-1
 200875c:	b02b883a 	mov	r21,r22
 2008760:	288a703a 	and	r5,r5,r2
 2008764:	4029883a 	mov	r20,r8
 2008768:	003eff06 	br	2008368 <__muldf3+0x314>

0200876c <__subdf3>:
 200876c:	02000434 	movhi	r8,16
 2008770:	423fffc4 	addi	r8,r8,-1
 2008774:	defffb04 	addi	sp,sp,-20
 2008778:	2a14703a 	and	r10,r5,r8
 200877c:	3812d53a 	srli	r9,r7,20
 2008780:	3a10703a 	and	r8,r7,r8
 2008784:	2006d77a 	srli	r3,r4,29
 2008788:	3004d77a 	srli	r2,r6,29
 200878c:	dc000015 	stw	r16,0(sp)
 2008790:	501490fa 	slli	r10,r10,3
 2008794:	2820d53a 	srli	r16,r5,20
 2008798:	401090fa 	slli	r8,r8,3
 200879c:	dc800215 	stw	r18,8(sp)
 20087a0:	dc400115 	stw	r17,4(sp)
 20087a4:	dfc00415 	stw	ra,16(sp)
 20087a8:	202290fa 	slli	r17,r4,3
 20087ac:	dcc00315 	stw	r19,12(sp)
 20087b0:	4a41ffcc 	andi	r9,r9,2047
 20087b4:	0101ffc4 	movi	r4,2047
 20087b8:	2824d7fa 	srli	r18,r5,31
 20087bc:	8401ffcc 	andi	r16,r16,2047
 20087c0:	50c6b03a 	or	r3,r10,r3
 20087c4:	380ed7fa 	srli	r7,r7,31
 20087c8:	408ab03a 	or	r5,r8,r2
 20087cc:	300c90fa 	slli	r6,r6,3
 20087d0:	49009626 	beq	r9,r4,2008a2c <__subdf3+0x2c0>
 20087d4:	39c0005c 	xori	r7,r7,1
 20087d8:	8245c83a 	sub	r2,r16,r9
 20087dc:	3c807426 	beq	r7,r18,20089b0 <__subdf3+0x244>
 20087e0:	0080af0e 	bge	zero,r2,2008aa0 <__subdf3+0x334>
 20087e4:	48002a1e 	bne	r9,zero,2008890 <__subdf3+0x124>
 20087e8:	2988b03a 	or	r4,r5,r6
 20087ec:	20009a1e 	bne	r4,zero,2008a58 <__subdf3+0x2ec>
 20087f0:	888001cc 	andi	r2,r17,7
 20087f4:	10000726 	beq	r2,zero,2008814 <__subdf3+0xa8>
 20087f8:	888003cc 	andi	r2,r17,15
 20087fc:	01000104 	movi	r4,4
 2008800:	11000426 	beq	r2,r4,2008814 <__subdf3+0xa8>
 2008804:	890b883a 	add	r5,r17,r4
 2008808:	2c63803a 	cmpltu	r17,r5,r17
 200880c:	1c47883a 	add	r3,r3,r17
 2008810:	2823883a 	mov	r17,r5
 2008814:	1880202c 	andhi	r2,r3,128
 2008818:	10005926 	beq	r2,zero,2008980 <__subdf3+0x214>
 200881c:	84000044 	addi	r16,r16,1
 2008820:	0081ffc4 	movi	r2,2047
 2008824:	8080be26 	beq	r16,r2,2008b20 <__subdf3+0x3b4>
 2008828:	017fe034 	movhi	r5,65408
 200882c:	297fffc4 	addi	r5,r5,-1
 2008830:	1946703a 	and	r3,r3,r5
 2008834:	1804977a 	slli	r2,r3,29
 2008838:	1806927a 	slli	r3,r3,9
 200883c:	8822d0fa 	srli	r17,r17,3
 2008840:	8401ffcc 	andi	r16,r16,2047
 2008844:	180ad33a 	srli	r5,r3,12
 2008848:	9100004c 	andi	r4,r18,1
 200884c:	1444b03a 	or	r2,r2,r17
 2008850:	80c1ffcc 	andi	r3,r16,2047
 2008854:	1820953a 	slli	r16,r3,20
 2008858:	20c03fcc 	andi	r3,r4,255
 200885c:	180897fa 	slli	r4,r3,31
 2008860:	00c00434 	movhi	r3,16
 2008864:	18ffffc4 	addi	r3,r3,-1
 2008868:	28c6703a 	and	r3,r5,r3
 200886c:	1c06b03a 	or	r3,r3,r16
 2008870:	1906b03a 	or	r3,r3,r4
 2008874:	dfc00417 	ldw	ra,16(sp)
 2008878:	dcc00317 	ldw	r19,12(sp)
 200887c:	dc800217 	ldw	r18,8(sp)
 2008880:	dc400117 	ldw	r17,4(sp)
 2008884:	dc000017 	ldw	r16,0(sp)
 2008888:	dec00504 	addi	sp,sp,20
 200888c:	f800283a 	ret
 2008890:	0101ffc4 	movi	r4,2047
 2008894:	813fd626 	beq	r16,r4,20087f0 <__subdf3+0x84>
 2008898:	29402034 	orhi	r5,r5,128
 200889c:	01000e04 	movi	r4,56
 20088a0:	2080a316 	blt	r4,r2,2008b30 <__subdf3+0x3c4>
 20088a4:	010007c4 	movi	r4,31
 20088a8:	2080c616 	blt	r4,r2,2008bc4 <__subdf3+0x458>
 20088ac:	01000804 	movi	r4,32
 20088b0:	2089c83a 	sub	r4,r4,r2
 20088b4:	2910983a 	sll	r8,r5,r4
 20088b8:	308ed83a 	srl	r7,r6,r2
 20088bc:	3108983a 	sll	r4,r6,r4
 20088c0:	2884d83a 	srl	r2,r5,r2
 20088c4:	41ccb03a 	or	r6,r8,r7
 20088c8:	2008c03a 	cmpne	r4,r4,zero
 20088cc:	310cb03a 	or	r6,r6,r4
 20088d0:	898dc83a 	sub	r6,r17,r6
 20088d4:	89a3803a 	cmpltu	r17,r17,r6
 20088d8:	1887c83a 	sub	r3,r3,r2
 20088dc:	1c47c83a 	sub	r3,r3,r17
 20088e0:	3023883a 	mov	r17,r6
 20088e4:	1880202c 	andhi	r2,r3,128
 20088e8:	10002326 	beq	r2,zero,2008978 <__subdf3+0x20c>
 20088ec:	04c02034 	movhi	r19,128
 20088f0:	9cffffc4 	addi	r19,r19,-1
 20088f4:	1ce6703a 	and	r19,r3,r19
 20088f8:	98007a26 	beq	r19,zero,2008ae4 <__subdf3+0x378>
 20088fc:	9809883a 	mov	r4,r19
 2008900:	20093200 	call	2009320 <__clzsi2>
 2008904:	113ffe04 	addi	r4,r2,-8
 2008908:	00c007c4 	movi	r3,31
 200890c:	19007b16 	blt	r3,r4,2008afc <__subdf3+0x390>
 2008910:	00800804 	movi	r2,32
 2008914:	1105c83a 	sub	r2,r2,r4
 2008918:	8884d83a 	srl	r2,r17,r2
 200891c:	9906983a 	sll	r3,r19,r4
 2008920:	8922983a 	sll	r17,r17,r4
 2008924:	10c4b03a 	or	r2,r2,r3
 2008928:	24007816 	blt	r4,r16,2008b0c <__subdf3+0x3a0>
 200892c:	2421c83a 	sub	r16,r4,r16
 2008930:	80c00044 	addi	r3,r16,1
 2008934:	010007c4 	movi	r4,31
 2008938:	20c09516 	blt	r4,r3,2008b90 <__subdf3+0x424>
 200893c:	01400804 	movi	r5,32
 2008940:	28cbc83a 	sub	r5,r5,r3
 2008944:	88c8d83a 	srl	r4,r17,r3
 2008948:	8962983a 	sll	r17,r17,r5
 200894c:	114a983a 	sll	r5,r2,r5
 2008950:	10c6d83a 	srl	r3,r2,r3
 2008954:	8804c03a 	cmpne	r2,r17,zero
 2008958:	290ab03a 	or	r5,r5,r4
 200895c:	28a2b03a 	or	r17,r5,r2
 2008960:	0021883a 	mov	r16,zero
 2008964:	003fa206 	br	20087f0 <__subdf3+0x84>
 2008968:	2090b03a 	or	r8,r4,r2
 200896c:	40018e26 	beq	r8,zero,2008fa8 <__subdf3+0x83c>
 2008970:	1007883a 	mov	r3,r2
 2008974:	2023883a 	mov	r17,r4
 2008978:	888001cc 	andi	r2,r17,7
 200897c:	103f9e1e 	bne	r2,zero,20087f8 <__subdf3+0x8c>
 2008980:	1804977a 	slli	r2,r3,29
 2008984:	8822d0fa 	srli	r17,r17,3
 2008988:	1810d0fa 	srli	r8,r3,3
 200898c:	9100004c 	andi	r4,r18,1
 2008990:	1444b03a 	or	r2,r2,r17
 2008994:	00c1ffc4 	movi	r3,2047
 2008998:	80c02826 	beq	r16,r3,2008a3c <__subdf3+0x2d0>
 200899c:	01400434 	movhi	r5,16
 20089a0:	297fffc4 	addi	r5,r5,-1
 20089a4:	80e0703a 	and	r16,r16,r3
 20089a8:	414a703a 	and	r5,r8,r5
 20089ac:	003fa806 	br	2008850 <__subdf3+0xe4>
 20089b0:	0080630e 	bge	zero,r2,2008b40 <__subdf3+0x3d4>
 20089b4:	48003026 	beq	r9,zero,2008a78 <__subdf3+0x30c>
 20089b8:	0101ffc4 	movi	r4,2047
 20089bc:	813f8c26 	beq	r16,r4,20087f0 <__subdf3+0x84>
 20089c0:	29402034 	orhi	r5,r5,128
 20089c4:	01000e04 	movi	r4,56
 20089c8:	2080a90e 	bge	r4,r2,2008c70 <__subdf3+0x504>
 20089cc:	298cb03a 	or	r6,r5,r6
 20089d0:	3012c03a 	cmpne	r9,r6,zero
 20089d4:	0005883a 	mov	r2,zero
 20089d8:	4c53883a 	add	r9,r9,r17
 20089dc:	4c63803a 	cmpltu	r17,r9,r17
 20089e0:	10c7883a 	add	r3,r2,r3
 20089e4:	88c7883a 	add	r3,r17,r3
 20089e8:	4823883a 	mov	r17,r9
 20089ec:	1880202c 	andhi	r2,r3,128
 20089f0:	1000d026 	beq	r2,zero,2008d34 <__subdf3+0x5c8>
 20089f4:	84000044 	addi	r16,r16,1
 20089f8:	0081ffc4 	movi	r2,2047
 20089fc:	8080fe26 	beq	r16,r2,2008df8 <__subdf3+0x68c>
 2008a00:	00bfe034 	movhi	r2,65408
 2008a04:	10bfffc4 	addi	r2,r2,-1
 2008a08:	1886703a 	and	r3,r3,r2
 2008a0c:	880ad07a 	srli	r5,r17,1
 2008a10:	180497fa 	slli	r2,r3,31
 2008a14:	8900004c 	andi	r4,r17,1
 2008a18:	2922b03a 	or	r17,r5,r4
 2008a1c:	1806d07a 	srli	r3,r3,1
 2008a20:	1462b03a 	or	r17,r2,r17
 2008a24:	3825883a 	mov	r18,r7
 2008a28:	003f7106 	br	20087f0 <__subdf3+0x84>
 2008a2c:	2984b03a 	or	r2,r5,r6
 2008a30:	103f6826 	beq	r2,zero,20087d4 <__subdf3+0x68>
 2008a34:	39c03fcc 	andi	r7,r7,255
 2008a38:	003f6706 	br	20087d8 <__subdf3+0x6c>
 2008a3c:	4086b03a 	or	r3,r8,r2
 2008a40:	18015226 	beq	r3,zero,2008f8c <__subdf3+0x820>
 2008a44:	00c00434 	movhi	r3,16
 2008a48:	41400234 	orhi	r5,r8,8
 2008a4c:	18ffffc4 	addi	r3,r3,-1
 2008a50:	28ca703a 	and	r5,r5,r3
 2008a54:	003f7e06 	br	2008850 <__subdf3+0xe4>
 2008a58:	10bfffc4 	addi	r2,r2,-1
 2008a5c:	1000491e 	bne	r2,zero,2008b84 <__subdf3+0x418>
 2008a60:	898fc83a 	sub	r7,r17,r6
 2008a64:	89e3803a 	cmpltu	r17,r17,r7
 2008a68:	1947c83a 	sub	r3,r3,r5
 2008a6c:	1c47c83a 	sub	r3,r3,r17
 2008a70:	3823883a 	mov	r17,r7
 2008a74:	003f9b06 	br	20088e4 <__subdf3+0x178>
 2008a78:	2988b03a 	or	r4,r5,r6
 2008a7c:	203f5c26 	beq	r4,zero,20087f0 <__subdf3+0x84>
 2008a80:	10bfffc4 	addi	r2,r2,-1
 2008a84:	1000931e 	bne	r2,zero,2008cd4 <__subdf3+0x568>
 2008a88:	898d883a 	add	r6,r17,r6
 2008a8c:	3463803a 	cmpltu	r17,r6,r17
 2008a90:	1947883a 	add	r3,r3,r5
 2008a94:	88c7883a 	add	r3,r17,r3
 2008a98:	3023883a 	mov	r17,r6
 2008a9c:	003fd306 	br	20089ec <__subdf3+0x280>
 2008aa0:	1000541e 	bne	r2,zero,2008bf4 <__subdf3+0x488>
 2008aa4:	80800044 	addi	r2,r16,1
 2008aa8:	1081ffcc 	andi	r2,r2,2047
 2008aac:	01000044 	movi	r4,1
 2008ab0:	2080a20e 	bge	r4,r2,2008d3c <__subdf3+0x5d0>
 2008ab4:	8989c83a 	sub	r4,r17,r6
 2008ab8:	8905803a 	cmpltu	r2,r17,r4
 2008abc:	1967c83a 	sub	r19,r3,r5
 2008ac0:	98a7c83a 	sub	r19,r19,r2
 2008ac4:	9880202c 	andhi	r2,r19,128
 2008ac8:	10006326 	beq	r2,zero,2008c58 <__subdf3+0x4ec>
 2008acc:	3463c83a 	sub	r17,r6,r17
 2008ad0:	28c7c83a 	sub	r3,r5,r3
 2008ad4:	344d803a 	cmpltu	r6,r6,r17
 2008ad8:	19a7c83a 	sub	r19,r3,r6
 2008adc:	3825883a 	mov	r18,r7
 2008ae0:	983f861e 	bne	r19,zero,20088fc <__subdf3+0x190>
 2008ae4:	8809883a 	mov	r4,r17
 2008ae8:	20093200 	call	2009320 <__clzsi2>
 2008aec:	10800804 	addi	r2,r2,32
 2008af0:	113ffe04 	addi	r4,r2,-8
 2008af4:	00c007c4 	movi	r3,31
 2008af8:	193f850e 	bge	r3,r4,2008910 <__subdf3+0x1a4>
 2008afc:	10bff604 	addi	r2,r2,-40
 2008b00:	8884983a 	sll	r2,r17,r2
 2008b04:	0023883a 	mov	r17,zero
 2008b08:	243f880e 	bge	r4,r16,200892c <__subdf3+0x1c0>
 2008b0c:	00ffe034 	movhi	r3,65408
 2008b10:	18ffffc4 	addi	r3,r3,-1
 2008b14:	8121c83a 	sub	r16,r16,r4
 2008b18:	10c6703a 	and	r3,r2,r3
 2008b1c:	003f3406 	br	20087f0 <__subdf3+0x84>
 2008b20:	9100004c 	andi	r4,r18,1
 2008b24:	000b883a 	mov	r5,zero
 2008b28:	0005883a 	mov	r2,zero
 2008b2c:	003f4806 	br	2008850 <__subdf3+0xe4>
 2008b30:	298cb03a 	or	r6,r5,r6
 2008b34:	300cc03a 	cmpne	r6,r6,zero
 2008b38:	0005883a 	mov	r2,zero
 2008b3c:	003f6406 	br	20088d0 <__subdf3+0x164>
 2008b40:	10009a1e 	bne	r2,zero,2008dac <__subdf3+0x640>
 2008b44:	82400044 	addi	r9,r16,1
 2008b48:	4881ffcc 	andi	r2,r9,2047
 2008b4c:	02800044 	movi	r10,1
 2008b50:	5080670e 	bge	r10,r2,2008cf0 <__subdf3+0x584>
 2008b54:	0081ffc4 	movi	r2,2047
 2008b58:	4880af26 	beq	r9,r2,2008e18 <__subdf3+0x6ac>
 2008b5c:	898d883a 	add	r6,r17,r6
 2008b60:	1945883a 	add	r2,r3,r5
 2008b64:	3447803a 	cmpltu	r3,r6,r17
 2008b68:	1887883a 	add	r3,r3,r2
 2008b6c:	182297fa 	slli	r17,r3,31
 2008b70:	300cd07a 	srli	r6,r6,1
 2008b74:	1806d07a 	srli	r3,r3,1
 2008b78:	4821883a 	mov	r16,r9
 2008b7c:	89a2b03a 	or	r17,r17,r6
 2008b80:	003f1b06 	br	20087f0 <__subdf3+0x84>
 2008b84:	0101ffc4 	movi	r4,2047
 2008b88:	813f441e 	bne	r16,r4,200889c <__subdf3+0x130>
 2008b8c:	003f1806 	br	20087f0 <__subdf3+0x84>
 2008b90:	843ff844 	addi	r16,r16,-31
 2008b94:	01400804 	movi	r5,32
 2008b98:	1408d83a 	srl	r4,r2,r16
 2008b9c:	19405026 	beq	r3,r5,2008ce0 <__subdf3+0x574>
 2008ba0:	01401004 	movi	r5,64
 2008ba4:	28c7c83a 	sub	r3,r5,r3
 2008ba8:	10c4983a 	sll	r2,r2,r3
 2008bac:	88a2b03a 	or	r17,r17,r2
 2008bb0:	8822c03a 	cmpne	r17,r17,zero
 2008bb4:	2462b03a 	or	r17,r4,r17
 2008bb8:	0007883a 	mov	r3,zero
 2008bbc:	0021883a 	mov	r16,zero
 2008bc0:	003f6d06 	br	2008978 <__subdf3+0x20c>
 2008bc4:	11fff804 	addi	r7,r2,-32
 2008bc8:	01000804 	movi	r4,32
 2008bcc:	29ced83a 	srl	r7,r5,r7
 2008bd0:	11004526 	beq	r2,r4,2008ce8 <__subdf3+0x57c>
 2008bd4:	01001004 	movi	r4,64
 2008bd8:	2089c83a 	sub	r4,r4,r2
 2008bdc:	2904983a 	sll	r2,r5,r4
 2008be0:	118cb03a 	or	r6,r2,r6
 2008be4:	300cc03a 	cmpne	r6,r6,zero
 2008be8:	398cb03a 	or	r6,r7,r6
 2008bec:	0005883a 	mov	r2,zero
 2008bf0:	003f3706 	br	20088d0 <__subdf3+0x164>
 2008bf4:	80002a26 	beq	r16,zero,2008ca0 <__subdf3+0x534>
 2008bf8:	0101ffc4 	movi	r4,2047
 2008bfc:	49006626 	beq	r9,r4,2008d98 <__subdf3+0x62c>
 2008c00:	0085c83a 	sub	r2,zero,r2
 2008c04:	18c02034 	orhi	r3,r3,128
 2008c08:	01000e04 	movi	r4,56
 2008c0c:	20807e16 	blt	r4,r2,2008e08 <__subdf3+0x69c>
 2008c10:	010007c4 	movi	r4,31
 2008c14:	2080e716 	blt	r4,r2,2008fb4 <__subdf3+0x848>
 2008c18:	01000804 	movi	r4,32
 2008c1c:	2089c83a 	sub	r4,r4,r2
 2008c20:	1914983a 	sll	r10,r3,r4
 2008c24:	8890d83a 	srl	r8,r17,r2
 2008c28:	8908983a 	sll	r4,r17,r4
 2008c2c:	1884d83a 	srl	r2,r3,r2
 2008c30:	5222b03a 	or	r17,r10,r8
 2008c34:	2006c03a 	cmpne	r3,r4,zero
 2008c38:	88e2b03a 	or	r17,r17,r3
 2008c3c:	3463c83a 	sub	r17,r6,r17
 2008c40:	2885c83a 	sub	r2,r5,r2
 2008c44:	344d803a 	cmpltu	r6,r6,r17
 2008c48:	1187c83a 	sub	r3,r2,r6
 2008c4c:	4821883a 	mov	r16,r9
 2008c50:	3825883a 	mov	r18,r7
 2008c54:	003f2306 	br	20088e4 <__subdf3+0x178>
 2008c58:	24d0b03a 	or	r8,r4,r19
 2008c5c:	40001b1e 	bne	r8,zero,2008ccc <__subdf3+0x560>
 2008c60:	0005883a 	mov	r2,zero
 2008c64:	0009883a 	mov	r4,zero
 2008c68:	0021883a 	mov	r16,zero
 2008c6c:	003f4906 	br	2008994 <__subdf3+0x228>
 2008c70:	010007c4 	movi	r4,31
 2008c74:	20803a16 	blt	r4,r2,2008d60 <__subdf3+0x5f4>
 2008c78:	01000804 	movi	r4,32
 2008c7c:	2089c83a 	sub	r4,r4,r2
 2008c80:	2912983a 	sll	r9,r5,r4
 2008c84:	3090d83a 	srl	r8,r6,r2
 2008c88:	3108983a 	sll	r4,r6,r4
 2008c8c:	2884d83a 	srl	r2,r5,r2
 2008c90:	4a12b03a 	or	r9,r9,r8
 2008c94:	2008c03a 	cmpne	r4,r4,zero
 2008c98:	4912b03a 	or	r9,r9,r4
 2008c9c:	003f4e06 	br	20089d8 <__subdf3+0x26c>
 2008ca0:	1c48b03a 	or	r4,r3,r17
 2008ca4:	20003c26 	beq	r4,zero,2008d98 <__subdf3+0x62c>
 2008ca8:	0084303a 	nor	r2,zero,r2
 2008cac:	1000381e 	bne	r2,zero,2008d90 <__subdf3+0x624>
 2008cb0:	3463c83a 	sub	r17,r6,r17
 2008cb4:	28c5c83a 	sub	r2,r5,r3
 2008cb8:	344d803a 	cmpltu	r6,r6,r17
 2008cbc:	1187c83a 	sub	r3,r2,r6
 2008cc0:	4821883a 	mov	r16,r9
 2008cc4:	3825883a 	mov	r18,r7
 2008cc8:	003f0606 	br	20088e4 <__subdf3+0x178>
 2008ccc:	2023883a 	mov	r17,r4
 2008cd0:	003f0906 	br	20088f8 <__subdf3+0x18c>
 2008cd4:	0101ffc4 	movi	r4,2047
 2008cd8:	813f3a1e 	bne	r16,r4,20089c4 <__subdf3+0x258>
 2008cdc:	003ec406 	br	20087f0 <__subdf3+0x84>
 2008ce0:	0005883a 	mov	r2,zero
 2008ce4:	003fb106 	br	2008bac <__subdf3+0x440>
 2008ce8:	0005883a 	mov	r2,zero
 2008cec:	003fbc06 	br	2008be0 <__subdf3+0x474>
 2008cf0:	1c44b03a 	or	r2,r3,r17
 2008cf4:	80008e1e 	bne	r16,zero,2008f30 <__subdf3+0x7c4>
 2008cf8:	1000c826 	beq	r2,zero,200901c <__subdf3+0x8b0>
 2008cfc:	2984b03a 	or	r2,r5,r6
 2008d00:	103ebb26 	beq	r2,zero,20087f0 <__subdf3+0x84>
 2008d04:	8989883a 	add	r4,r17,r6
 2008d08:	1945883a 	add	r2,r3,r5
 2008d0c:	2447803a 	cmpltu	r3,r4,r17
 2008d10:	1887883a 	add	r3,r3,r2
 2008d14:	1880202c 	andhi	r2,r3,128
 2008d18:	2023883a 	mov	r17,r4
 2008d1c:	103f1626 	beq	r2,zero,2008978 <__subdf3+0x20c>
 2008d20:	00bfe034 	movhi	r2,65408
 2008d24:	10bfffc4 	addi	r2,r2,-1
 2008d28:	5021883a 	mov	r16,r10
 2008d2c:	1886703a 	and	r3,r3,r2
 2008d30:	003eaf06 	br	20087f0 <__subdf3+0x84>
 2008d34:	3825883a 	mov	r18,r7
 2008d38:	003f0f06 	br	2008978 <__subdf3+0x20c>
 2008d3c:	1c44b03a 	or	r2,r3,r17
 2008d40:	8000251e 	bne	r16,zero,2008dd8 <__subdf3+0x66c>
 2008d44:	1000661e 	bne	r2,zero,2008ee0 <__subdf3+0x774>
 2008d48:	2990b03a 	or	r8,r5,r6
 2008d4c:	40009626 	beq	r8,zero,2008fa8 <__subdf3+0x83c>
 2008d50:	2807883a 	mov	r3,r5
 2008d54:	3023883a 	mov	r17,r6
 2008d58:	3825883a 	mov	r18,r7
 2008d5c:	003ea406 	br	20087f0 <__subdf3+0x84>
 2008d60:	127ff804 	addi	r9,r2,-32
 2008d64:	01000804 	movi	r4,32
 2008d68:	2a52d83a 	srl	r9,r5,r9
 2008d6c:	11008c26 	beq	r2,r4,2008fa0 <__subdf3+0x834>
 2008d70:	01001004 	movi	r4,64
 2008d74:	2085c83a 	sub	r2,r4,r2
 2008d78:	2884983a 	sll	r2,r5,r2
 2008d7c:	118cb03a 	or	r6,r2,r6
 2008d80:	300cc03a 	cmpne	r6,r6,zero
 2008d84:	4992b03a 	or	r9,r9,r6
 2008d88:	0005883a 	mov	r2,zero
 2008d8c:	003f1206 	br	20089d8 <__subdf3+0x26c>
 2008d90:	0101ffc4 	movi	r4,2047
 2008d94:	493f9c1e 	bne	r9,r4,2008c08 <__subdf3+0x49c>
 2008d98:	2807883a 	mov	r3,r5
 2008d9c:	3023883a 	mov	r17,r6
 2008da0:	4821883a 	mov	r16,r9
 2008da4:	3825883a 	mov	r18,r7
 2008da8:	003e9106 	br	20087f0 <__subdf3+0x84>
 2008dac:	80001f1e 	bne	r16,zero,2008e2c <__subdf3+0x6c0>
 2008db0:	1c48b03a 	or	r4,r3,r17
 2008db4:	20005a26 	beq	r4,zero,2008f20 <__subdf3+0x7b4>
 2008db8:	0084303a 	nor	r2,zero,r2
 2008dbc:	1000561e 	bne	r2,zero,2008f18 <__subdf3+0x7ac>
 2008dc0:	89a3883a 	add	r17,r17,r6
 2008dc4:	1945883a 	add	r2,r3,r5
 2008dc8:	898d803a 	cmpltu	r6,r17,r6
 2008dcc:	3087883a 	add	r3,r6,r2
 2008dd0:	4821883a 	mov	r16,r9
 2008dd4:	003f0506 	br	20089ec <__subdf3+0x280>
 2008dd8:	10002b1e 	bne	r2,zero,2008e88 <__subdf3+0x71c>
 2008ddc:	2984b03a 	or	r2,r5,r6
 2008de0:	10008026 	beq	r2,zero,2008fe4 <__subdf3+0x878>
 2008de4:	2807883a 	mov	r3,r5
 2008de8:	3023883a 	mov	r17,r6
 2008dec:	3825883a 	mov	r18,r7
 2008df0:	0401ffc4 	movi	r16,2047
 2008df4:	003e7e06 	br	20087f0 <__subdf3+0x84>
 2008df8:	3809883a 	mov	r4,r7
 2008dfc:	0011883a 	mov	r8,zero
 2008e00:	0005883a 	mov	r2,zero
 2008e04:	003ee306 	br	2008994 <__subdf3+0x228>
 2008e08:	1c62b03a 	or	r17,r3,r17
 2008e0c:	8822c03a 	cmpne	r17,r17,zero
 2008e10:	0005883a 	mov	r2,zero
 2008e14:	003f8906 	br	2008c3c <__subdf3+0x4d0>
 2008e18:	3809883a 	mov	r4,r7
 2008e1c:	4821883a 	mov	r16,r9
 2008e20:	0011883a 	mov	r8,zero
 2008e24:	0005883a 	mov	r2,zero
 2008e28:	003eda06 	br	2008994 <__subdf3+0x228>
 2008e2c:	0101ffc4 	movi	r4,2047
 2008e30:	49003b26 	beq	r9,r4,2008f20 <__subdf3+0x7b4>
 2008e34:	0085c83a 	sub	r2,zero,r2
 2008e38:	18c02034 	orhi	r3,r3,128
 2008e3c:	01000e04 	movi	r4,56
 2008e40:	20806e16 	blt	r4,r2,2008ffc <__subdf3+0x890>
 2008e44:	010007c4 	movi	r4,31
 2008e48:	20807716 	blt	r4,r2,2009028 <__subdf3+0x8bc>
 2008e4c:	01000804 	movi	r4,32
 2008e50:	2089c83a 	sub	r4,r4,r2
 2008e54:	1914983a 	sll	r10,r3,r4
 2008e58:	8890d83a 	srl	r8,r17,r2
 2008e5c:	8908983a 	sll	r4,r17,r4
 2008e60:	1884d83a 	srl	r2,r3,r2
 2008e64:	5222b03a 	or	r17,r10,r8
 2008e68:	2006c03a 	cmpne	r3,r4,zero
 2008e6c:	88e2b03a 	or	r17,r17,r3
 2008e70:	89a3883a 	add	r17,r17,r6
 2008e74:	1145883a 	add	r2,r2,r5
 2008e78:	898d803a 	cmpltu	r6,r17,r6
 2008e7c:	3087883a 	add	r3,r6,r2
 2008e80:	4821883a 	mov	r16,r9
 2008e84:	003ed906 	br	20089ec <__subdf3+0x280>
 2008e88:	2984b03a 	or	r2,r5,r6
 2008e8c:	10004226 	beq	r2,zero,2008f98 <__subdf3+0x82c>
 2008e90:	1808d0fa 	srli	r4,r3,3
 2008e94:	8822d0fa 	srli	r17,r17,3
 2008e98:	1806977a 	slli	r3,r3,29
 2008e9c:	2080022c 	andhi	r2,r4,8
 2008ea0:	1c62b03a 	or	r17,r3,r17
 2008ea4:	10000826 	beq	r2,zero,2008ec8 <__subdf3+0x75c>
 2008ea8:	2812d0fa 	srli	r9,r5,3
 2008eac:	4880022c 	andhi	r2,r9,8
 2008eb0:	1000051e 	bne	r2,zero,2008ec8 <__subdf3+0x75c>
 2008eb4:	300cd0fa 	srli	r6,r6,3
 2008eb8:	2804977a 	slli	r2,r5,29
 2008ebc:	4809883a 	mov	r4,r9
 2008ec0:	3825883a 	mov	r18,r7
 2008ec4:	11a2b03a 	or	r17,r2,r6
 2008ec8:	8806d77a 	srli	r3,r17,29
 2008ecc:	200890fa 	slli	r4,r4,3
 2008ed0:	882290fa 	slli	r17,r17,3
 2008ed4:	0401ffc4 	movi	r16,2047
 2008ed8:	1906b03a 	or	r3,r3,r4
 2008edc:	003e4406 	br	20087f0 <__subdf3+0x84>
 2008ee0:	2984b03a 	or	r2,r5,r6
 2008ee4:	103e4226 	beq	r2,zero,20087f0 <__subdf3+0x84>
 2008ee8:	8989c83a 	sub	r4,r17,r6
 2008eec:	8911803a 	cmpltu	r8,r17,r4
 2008ef0:	1945c83a 	sub	r2,r3,r5
 2008ef4:	1205c83a 	sub	r2,r2,r8
 2008ef8:	1200202c 	andhi	r8,r2,128
 2008efc:	403e9a26 	beq	r8,zero,2008968 <__subdf3+0x1fc>
 2008f00:	3463c83a 	sub	r17,r6,r17
 2008f04:	28c5c83a 	sub	r2,r5,r3
 2008f08:	344d803a 	cmpltu	r6,r6,r17
 2008f0c:	1187c83a 	sub	r3,r2,r6
 2008f10:	3825883a 	mov	r18,r7
 2008f14:	003e3606 	br	20087f0 <__subdf3+0x84>
 2008f18:	0101ffc4 	movi	r4,2047
 2008f1c:	493fc71e 	bne	r9,r4,2008e3c <__subdf3+0x6d0>
 2008f20:	2807883a 	mov	r3,r5
 2008f24:	3023883a 	mov	r17,r6
 2008f28:	4821883a 	mov	r16,r9
 2008f2c:	003e3006 	br	20087f0 <__subdf3+0x84>
 2008f30:	10003626 	beq	r2,zero,200900c <__subdf3+0x8a0>
 2008f34:	2984b03a 	or	r2,r5,r6
 2008f38:	10001726 	beq	r2,zero,2008f98 <__subdf3+0x82c>
 2008f3c:	1808d0fa 	srli	r4,r3,3
 2008f40:	8822d0fa 	srli	r17,r17,3
 2008f44:	1806977a 	slli	r3,r3,29
 2008f48:	2080022c 	andhi	r2,r4,8
 2008f4c:	1c62b03a 	or	r17,r3,r17
 2008f50:	10000726 	beq	r2,zero,2008f70 <__subdf3+0x804>
 2008f54:	2812d0fa 	srli	r9,r5,3
 2008f58:	4880022c 	andhi	r2,r9,8
 2008f5c:	1000041e 	bne	r2,zero,2008f70 <__subdf3+0x804>
 2008f60:	300cd0fa 	srli	r6,r6,3
 2008f64:	2804977a 	slli	r2,r5,29
 2008f68:	4809883a 	mov	r4,r9
 2008f6c:	11a2b03a 	or	r17,r2,r6
 2008f70:	8806d77a 	srli	r3,r17,29
 2008f74:	200890fa 	slli	r4,r4,3
 2008f78:	882290fa 	slli	r17,r17,3
 2008f7c:	3825883a 	mov	r18,r7
 2008f80:	1906b03a 	or	r3,r3,r4
 2008f84:	0401ffc4 	movi	r16,2047
 2008f88:	003e1906 	br	20087f0 <__subdf3+0x84>
 2008f8c:	000b883a 	mov	r5,zero
 2008f90:	0005883a 	mov	r2,zero
 2008f94:	003e2e06 	br	2008850 <__subdf3+0xe4>
 2008f98:	0401ffc4 	movi	r16,2047
 2008f9c:	003e1406 	br	20087f0 <__subdf3+0x84>
 2008fa0:	0005883a 	mov	r2,zero
 2008fa4:	003f7506 	br	2008d7c <__subdf3+0x610>
 2008fa8:	0005883a 	mov	r2,zero
 2008fac:	0009883a 	mov	r4,zero
 2008fb0:	003e7806 	br	2008994 <__subdf3+0x228>
 2008fb4:	123ff804 	addi	r8,r2,-32
 2008fb8:	01000804 	movi	r4,32
 2008fbc:	1a10d83a 	srl	r8,r3,r8
 2008fc0:	11002526 	beq	r2,r4,2009058 <__subdf3+0x8ec>
 2008fc4:	01001004 	movi	r4,64
 2008fc8:	2085c83a 	sub	r2,r4,r2
 2008fcc:	1884983a 	sll	r2,r3,r2
 2008fd0:	1444b03a 	or	r2,r2,r17
 2008fd4:	1004c03a 	cmpne	r2,r2,zero
 2008fd8:	40a2b03a 	or	r17,r8,r2
 2008fdc:	0005883a 	mov	r2,zero
 2008fe0:	003f1606 	br	2008c3c <__subdf3+0x4d0>
 2008fe4:	02000434 	movhi	r8,16
 2008fe8:	0009883a 	mov	r4,zero
 2008fec:	423fffc4 	addi	r8,r8,-1
 2008ff0:	00bfffc4 	movi	r2,-1
 2008ff4:	0401ffc4 	movi	r16,2047
 2008ff8:	003e6606 	br	2008994 <__subdf3+0x228>
 2008ffc:	1c62b03a 	or	r17,r3,r17
 2009000:	8822c03a 	cmpne	r17,r17,zero
 2009004:	0005883a 	mov	r2,zero
 2009008:	003f9906 	br	2008e70 <__subdf3+0x704>
 200900c:	2807883a 	mov	r3,r5
 2009010:	3023883a 	mov	r17,r6
 2009014:	0401ffc4 	movi	r16,2047
 2009018:	003df506 	br	20087f0 <__subdf3+0x84>
 200901c:	2807883a 	mov	r3,r5
 2009020:	3023883a 	mov	r17,r6
 2009024:	003df206 	br	20087f0 <__subdf3+0x84>
 2009028:	123ff804 	addi	r8,r2,-32
 200902c:	01000804 	movi	r4,32
 2009030:	1a10d83a 	srl	r8,r3,r8
 2009034:	11000a26 	beq	r2,r4,2009060 <__subdf3+0x8f4>
 2009038:	01001004 	movi	r4,64
 200903c:	2085c83a 	sub	r2,r4,r2
 2009040:	1884983a 	sll	r2,r3,r2
 2009044:	1444b03a 	or	r2,r2,r17
 2009048:	1004c03a 	cmpne	r2,r2,zero
 200904c:	40a2b03a 	or	r17,r8,r2
 2009050:	0005883a 	mov	r2,zero
 2009054:	003f8606 	br	2008e70 <__subdf3+0x704>
 2009058:	0005883a 	mov	r2,zero
 200905c:	003fdc06 	br	2008fd0 <__subdf3+0x864>
 2009060:	0005883a 	mov	r2,zero
 2009064:	003ff706 	br	2009044 <__subdf3+0x8d8>

02009068 <__extendsfdf2>:
 2009068:	200ad5fa 	srli	r5,r4,23
 200906c:	defffd04 	addi	sp,sp,-12
 2009070:	dc400115 	stw	r17,4(sp)
 2009074:	29403fcc 	andi	r5,r5,255
 2009078:	29800044 	addi	r6,r5,1
 200907c:	04402034 	movhi	r17,128
 2009080:	dc000015 	stw	r16,0(sp)
 2009084:	8c7fffc4 	addi	r17,r17,-1
 2009088:	dfc00215 	stw	ra,8(sp)
 200908c:	31803fcc 	andi	r6,r6,255
 2009090:	00800044 	movi	r2,1
 2009094:	8922703a 	and	r17,r17,r4
 2009098:	2020d7fa 	srli	r16,r4,31
 200909c:	1180110e 	bge	r2,r6,20090e4 <__extendsfdf2+0x7c>
 20090a0:	880cd0fa 	srli	r6,r17,3
 20090a4:	8822977a 	slli	r17,r17,29
 20090a8:	2940e004 	addi	r5,r5,896
 20090ac:	2941ffcc 	andi	r5,r5,2047
 20090b0:	2804953a 	slli	r2,r5,20
 20090b4:	01400434 	movhi	r5,16
 20090b8:	800697fa 	slli	r3,r16,31
 20090bc:	297fffc4 	addi	r5,r5,-1
 20090c0:	314a703a 	and	r5,r6,r5
 20090c4:	288ab03a 	or	r5,r5,r2
 20090c8:	28c6b03a 	or	r3,r5,r3
 20090cc:	8805883a 	mov	r2,r17
 20090d0:	dfc00217 	ldw	ra,8(sp)
 20090d4:	dc400117 	ldw	r17,4(sp)
 20090d8:	dc000017 	ldw	r16,0(sp)
 20090dc:	dec00304 	addi	sp,sp,12
 20090e0:	f800283a 	ret
 20090e4:	2800111e 	bne	r5,zero,200912c <__extendsfdf2+0xc4>
 20090e8:	88001c26 	beq	r17,zero,200915c <__extendsfdf2+0xf4>
 20090ec:	8809883a 	mov	r4,r17
 20090f0:	20093200 	call	2009320 <__clzsi2>
 20090f4:	00c00284 	movi	r3,10
 20090f8:	18801b16 	blt	r3,r2,2009168 <__extendsfdf2+0x100>
 20090fc:	018002c4 	movi	r6,11
 2009100:	308dc83a 	sub	r6,r6,r2
 2009104:	11000544 	addi	r4,r2,21
 2009108:	8986d83a 	srl	r3,r17,r6
 200910c:	8922983a 	sll	r17,r17,r4
 2009110:	0180e244 	movi	r6,905
 2009114:	01400434 	movhi	r5,16
 2009118:	3085c83a 	sub	r2,r6,r2
 200911c:	297fffc4 	addi	r5,r5,-1
 2009120:	194c703a 	and	r6,r3,r5
 2009124:	1141ffcc 	andi	r5,r2,2047
 2009128:	003fe006 	br	20090ac <__extendsfdf2+0x44>
 200912c:	88000826 	beq	r17,zero,2009150 <__extendsfdf2+0xe8>
 2009130:	880cd0fa 	srli	r6,r17,3
 2009134:	00800434 	movhi	r2,16
 2009138:	10bfffc4 	addi	r2,r2,-1
 200913c:	31800234 	orhi	r6,r6,8
 2009140:	8822977a 	slli	r17,r17,29
 2009144:	308c703a 	and	r6,r6,r2
 2009148:	0141ffc4 	movi	r5,2047
 200914c:	003fd706 	br	20090ac <__extendsfdf2+0x44>
 2009150:	0141ffc4 	movi	r5,2047
 2009154:	000d883a 	mov	r6,zero
 2009158:	003fd406 	br	20090ac <__extendsfdf2+0x44>
 200915c:	000b883a 	mov	r5,zero
 2009160:	000d883a 	mov	r6,zero
 2009164:	003fd106 	br	20090ac <__extendsfdf2+0x44>
 2009168:	11bffd44 	addi	r6,r2,-11
 200916c:	8986983a 	sll	r3,r17,r6
 2009170:	0023883a 	mov	r17,zero
 2009174:	003fe606 	br	2009110 <__extendsfdf2+0xa8>

02009178 <__truncdfsf2>:
 2009178:	2810d53a 	srli	r8,r5,20
 200917c:	01c00434 	movhi	r7,16
 2009180:	39ffffc4 	addi	r7,r7,-1
 2009184:	29ce703a 	and	r7,r5,r7
 2009188:	4201ffcc 	andi	r8,r8,2047
 200918c:	380e90fa 	slli	r7,r7,3
 2009190:	200cd77a 	srli	r6,r4,29
 2009194:	42400044 	addi	r9,r8,1
 2009198:	4a41ffcc 	andi	r9,r9,2047
 200919c:	00c00044 	movi	r3,1
 20091a0:	280ad7fa 	srli	r5,r5,31
 20091a4:	31ceb03a 	or	r7,r6,r7
 20091a8:	200490fa 	slli	r2,r4,3
 20091ac:	1a40230e 	bge	r3,r9,200923c <__truncdfsf2+0xc4>
 20091b0:	40ff2004 	addi	r3,r8,-896
 20091b4:	01803f84 	movi	r6,254
 20091b8:	30c01516 	blt	r6,r3,2009210 <__truncdfsf2+0x98>
 20091bc:	00c0380e 	bge	zero,r3,20092a0 <__truncdfsf2+0x128>
 20091c0:	200c91ba 	slli	r6,r4,6
 20091c4:	380e90fa 	slli	r7,r7,3
 20091c8:	1004d77a 	srli	r2,r2,29
 20091cc:	300cc03a 	cmpne	r6,r6,zero
 20091d0:	31ccb03a 	or	r6,r6,r7
 20091d4:	308cb03a 	or	r6,r6,r2
 20091d8:	308001cc 	andi	r2,r6,7
 20091dc:	10000426 	beq	r2,zero,20091f0 <__truncdfsf2+0x78>
 20091e0:	308003cc 	andi	r2,r6,15
 20091e4:	01000104 	movi	r4,4
 20091e8:	11000126 	beq	r2,r4,20091f0 <__truncdfsf2+0x78>
 20091ec:	31800104 	addi	r6,r6,4
 20091f0:	3081002c 	andhi	r2,r6,1024
 20091f4:	10001626 	beq	r2,zero,2009250 <__truncdfsf2+0xd8>
 20091f8:	18c00044 	addi	r3,r3,1
 20091fc:	00803fc4 	movi	r2,255
 2009200:	18800326 	beq	r3,r2,2009210 <__truncdfsf2+0x98>
 2009204:	300c91ba 	slli	r6,r6,6
 2009208:	300cd27a 	srli	r6,r6,9
 200920c:	00000206 	br	2009218 <__truncdfsf2+0xa0>
 2009210:	00ffffc4 	movi	r3,-1
 2009214:	000d883a 	mov	r6,zero
 2009218:	18c03fcc 	andi	r3,r3,255
 200921c:	180895fa 	slli	r4,r3,23
 2009220:	00c02034 	movhi	r3,128
 2009224:	280a97fa 	slli	r5,r5,31
 2009228:	18ffffc4 	addi	r3,r3,-1
 200922c:	30c6703a 	and	r3,r6,r3
 2009230:	1906b03a 	or	r3,r3,r4
 2009234:	1944b03a 	or	r2,r3,r5
 2009238:	f800283a 	ret
 200923c:	40000b1e 	bne	r8,zero,200926c <__truncdfsf2+0xf4>
 2009240:	388cb03a 	or	r6,r7,r2
 2009244:	0007883a 	mov	r3,zero
 2009248:	30000426 	beq	r6,zero,200925c <__truncdfsf2+0xe4>
 200924c:	01800144 	movi	r6,5
 2009250:	00803fc4 	movi	r2,255
 2009254:	300cd0fa 	srli	r6,r6,3
 2009258:	18800a26 	beq	r3,r2,2009284 <__truncdfsf2+0x10c>
 200925c:	00802034 	movhi	r2,128
 2009260:	10bfffc4 	addi	r2,r2,-1
 2009264:	308c703a 	and	r6,r6,r2
 2009268:	003feb06 	br	2009218 <__truncdfsf2+0xa0>
 200926c:	3888b03a 	or	r4,r7,r2
 2009270:	203fe726 	beq	r4,zero,2009210 <__truncdfsf2+0x98>
 2009274:	380c90fa 	slli	r6,r7,3
 2009278:	00c03fc4 	movi	r3,255
 200927c:	31808034 	orhi	r6,r6,512
 2009280:	003fd506 	br	20091d8 <__truncdfsf2+0x60>
 2009284:	303fe226 	beq	r6,zero,2009210 <__truncdfsf2+0x98>
 2009288:	00802034 	movhi	r2,128
 200928c:	31801034 	orhi	r6,r6,64
 2009290:	10bfffc4 	addi	r2,r2,-1
 2009294:	00ffffc4 	movi	r3,-1
 2009298:	308c703a 	and	r6,r6,r2
 200929c:	003fde06 	br	2009218 <__truncdfsf2+0xa0>
 20092a0:	013ffa44 	movi	r4,-23
 20092a4:	19000e16 	blt	r3,r4,20092e0 <__truncdfsf2+0x168>
 20092a8:	01000784 	movi	r4,30
 20092ac:	20c9c83a 	sub	r4,r4,r3
 20092b0:	018007c4 	movi	r6,31
 20092b4:	39c02034 	orhi	r7,r7,128
 20092b8:	31000b16 	blt	r6,r4,20092e8 <__truncdfsf2+0x170>
 20092bc:	423f2084 	addi	r8,r8,-894
 20092c0:	120c983a 	sll	r6,r2,r8
 20092c4:	3a0e983a 	sll	r7,r7,r8
 20092c8:	1104d83a 	srl	r2,r2,r4
 20092cc:	300cc03a 	cmpne	r6,r6,zero
 20092d0:	31ceb03a 	or	r7,r6,r7
 20092d4:	388cb03a 	or	r6,r7,r2
 20092d8:	0007883a 	mov	r3,zero
 20092dc:	003fbe06 	br	20091d8 <__truncdfsf2+0x60>
 20092e0:	0007883a 	mov	r3,zero
 20092e4:	003fd906 	br	200924c <__truncdfsf2+0xd4>
 20092e8:	01bfff84 	movi	r6,-2
 20092ec:	30cdc83a 	sub	r6,r6,r3
 20092f0:	00c00804 	movi	r3,32
 20092f4:	398cd83a 	srl	r6,r7,r6
 20092f8:	20c00726 	beq	r4,r3,2009318 <__truncdfsf2+0x1a0>
 20092fc:	423f2884 	addi	r8,r8,-862
 2009300:	3a0e983a 	sll	r7,r7,r8
 2009304:	3884b03a 	or	r2,r7,r2
 2009308:	1004c03a 	cmpne	r2,r2,zero
 200930c:	118cb03a 	or	r6,r2,r6
 2009310:	0007883a 	mov	r3,zero
 2009314:	003fb006 	br	20091d8 <__truncdfsf2+0x60>
 2009318:	000f883a 	mov	r7,zero
 200931c:	003ff906 	br	2009304 <__truncdfsf2+0x18c>

02009320 <__clzsi2>:
 2009320:	00bfffd4 	movui	r2,65535
 2009324:	11000536 	bltu	r2,r4,200933c <__clzsi2+0x1c>
 2009328:	00803fc4 	movi	r2,255
 200932c:	11000f36 	bltu	r2,r4,200936c <__clzsi2+0x4c>
 2009330:	00800804 	movi	r2,32
 2009334:	0007883a 	mov	r3,zero
 2009338:	00000506 	br	2009350 <__clzsi2+0x30>
 200933c:	00804034 	movhi	r2,256
 2009340:	10bfffc4 	addi	r2,r2,-1
 2009344:	11000c2e 	bgeu	r2,r4,2009378 <__clzsi2+0x58>
 2009348:	00800204 	movi	r2,8
 200934c:	00c00604 	movi	r3,24
 2009350:	20c8d83a 	srl	r4,r4,r3
 2009354:	00c080b4 	movhi	r3,514
 2009358:	18c9c204 	addi	r3,r3,9992
 200935c:	1909883a 	add	r4,r3,r4
 2009360:	20c00003 	ldbu	r3,0(r4)
 2009364:	10c5c83a 	sub	r2,r2,r3
 2009368:	f800283a 	ret
 200936c:	00800604 	movi	r2,24
 2009370:	00c00204 	movi	r3,8
 2009374:	003ff606 	br	2009350 <__clzsi2+0x30>
 2009378:	00800404 	movi	r2,16
 200937c:	1007883a 	mov	r3,r2
 2009380:	003ff306 	br	2009350 <__clzsi2+0x30>

02009384 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
 2009384:	deffff04 	addi	sp,sp,-4
 2009388:	df000015 	stw	fp,0(sp)
 200938c:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
 2009390:	d0a03017 	ldw	r2,-32576(gp)
}
 2009394:	e037883a 	mov	sp,fp
 2009398:	df000017 	ldw	fp,0(sp)
 200939c:	dec00104 	addi	sp,sp,4
 20093a0:	f800283a 	ret

020093a4 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 20093a4:	defff804 	addi	sp,sp,-32
 20093a8:	df000715 	stw	fp,28(sp)
 20093ac:	df000704 	addi	fp,sp,28
 20093b0:	e13ffd15 	stw	r4,-12(fp)
 20093b4:	e17ffe15 	stw	r5,-8(fp)
 20093b8:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 20093bc:	e0bffd17 	ldw	r2,-12(fp)
 20093c0:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 20093c4:	e0bffe17 	ldw	r2,-8(fp)
 20093c8:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 20093cc:	e0bfff17 	ldw	r2,-4(fp)
 20093d0:	10800430 	cmpltui	r2,r2,16
 20093d4:	10004c1e 	bne	r2,zero,2009508 <memcpy+0x164>
 20093d8:	e0fffa17 	ldw	r3,-24(fp)
 20093dc:	e0bff917 	ldw	r2,-28(fp)
 20093e0:	1884b03a 	or	r2,r3,r2
 20093e4:	108000cc 	andi	r2,r2,3
 20093e8:	1000471e 	bne	r2,zero,2009508 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 20093ec:	e0bff917 	ldw	r2,-28(fp)
 20093f0:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 20093f4:	e0bffa17 	ldw	r2,-24(fp)
 20093f8:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 20093fc:	00002306 	br	200948c <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 2009400:	e0bffb17 	ldw	r2,-20(fp)
 2009404:	10c00104 	addi	r3,r2,4
 2009408:	e0fffb15 	stw	r3,-20(fp)
 200940c:	e0fffc17 	ldw	r3,-16(fp)
 2009410:	19000104 	addi	r4,r3,4
 2009414:	e13ffc15 	stw	r4,-16(fp)
 2009418:	18c00017 	ldw	r3,0(r3)
 200941c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2009420:	e0bffb17 	ldw	r2,-20(fp)
 2009424:	10c00104 	addi	r3,r2,4
 2009428:	e0fffb15 	stw	r3,-20(fp)
 200942c:	e0fffc17 	ldw	r3,-16(fp)
 2009430:	19000104 	addi	r4,r3,4
 2009434:	e13ffc15 	stw	r4,-16(fp)
 2009438:	18c00017 	ldw	r3,0(r3)
 200943c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2009440:	e0bffb17 	ldw	r2,-20(fp)
 2009444:	10c00104 	addi	r3,r2,4
 2009448:	e0fffb15 	stw	r3,-20(fp)
 200944c:	e0fffc17 	ldw	r3,-16(fp)
 2009450:	19000104 	addi	r4,r3,4
 2009454:	e13ffc15 	stw	r4,-16(fp)
 2009458:	18c00017 	ldw	r3,0(r3)
 200945c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2009460:	e0bffb17 	ldw	r2,-20(fp)
 2009464:	10c00104 	addi	r3,r2,4
 2009468:	e0fffb15 	stw	r3,-20(fp)
 200946c:	e0fffc17 	ldw	r3,-16(fp)
 2009470:	19000104 	addi	r4,r3,4
 2009474:	e13ffc15 	stw	r4,-16(fp)
 2009478:	18c00017 	ldw	r3,0(r3)
 200947c:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 2009480:	e0bfff17 	ldw	r2,-4(fp)
 2009484:	10bffc04 	addi	r2,r2,-16
 2009488:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 200948c:	e0bfff17 	ldw	r2,-4(fp)
 2009490:	10800428 	cmpgeui	r2,r2,16
 2009494:	103fda1e 	bne	r2,zero,2009400 <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2009498:	00000b06 	br	20094c8 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 200949c:	e0bffb17 	ldw	r2,-20(fp)
 20094a0:	10c00104 	addi	r3,r2,4
 20094a4:	e0fffb15 	stw	r3,-20(fp)
 20094a8:	e0fffc17 	ldw	r3,-16(fp)
 20094ac:	19000104 	addi	r4,r3,4
 20094b0:	e13ffc15 	stw	r4,-16(fp)
 20094b4:	18c00017 	ldw	r3,0(r3)
 20094b8:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 20094bc:	e0bfff17 	ldw	r2,-4(fp)
 20094c0:	10bfff04 	addi	r2,r2,-4
 20094c4:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 20094c8:	e0bfff17 	ldw	r2,-4(fp)
 20094cc:	10800128 	cmpgeui	r2,r2,4
 20094d0:	103ff21e 	bne	r2,zero,200949c <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 20094d4:	e0bffb17 	ldw	r2,-20(fp)
 20094d8:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 20094dc:	e0bffc17 	ldw	r2,-16(fp)
 20094e0:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 20094e4:	00000806 	br	2009508 <memcpy+0x164>
    *dst++ = *src++;
 20094e8:	e0bff917 	ldw	r2,-28(fp)
 20094ec:	10c00044 	addi	r3,r2,1
 20094f0:	e0fff915 	stw	r3,-28(fp)
 20094f4:	e0fffa17 	ldw	r3,-24(fp)
 20094f8:	19000044 	addi	r4,r3,1
 20094fc:	e13ffa15 	stw	r4,-24(fp)
 2009500:	18c00003 	ldbu	r3,0(r3)
 2009504:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 2009508:	e0bfff17 	ldw	r2,-4(fp)
 200950c:	10ffffc4 	addi	r3,r2,-1
 2009510:	e0ffff15 	stw	r3,-4(fp)
 2009514:	103ff41e 	bne	r2,zero,20094e8 <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 2009518:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200951c:	e037883a 	mov	sp,fp
 2009520:	df000017 	ldw	fp,0(sp)
 2009524:	dec00104 	addi	sp,sp,4
 2009528:	f800283a 	ret

0200952c <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 200952c:	defff704 	addi	sp,sp,-36
 2009530:	df000815 	stw	fp,32(sp)
 2009534:	df000804 	addi	fp,sp,32
 2009538:	e13ffd15 	stw	r4,-12(fp)
 200953c:	e17ffe15 	stw	r5,-8(fp)
 2009540:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 2009544:	e0bffd17 	ldw	r2,-12(fp)
 2009548:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 200954c:	e0bffe17 	ldw	r2,-8(fp)
 2009550:	10803fcc 	andi	r2,r2,255
 2009554:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 2009558:	00000c06 	br	200958c <memset+0x60>
    {
      if (n--)
 200955c:	e0bfff17 	ldw	r2,-4(fp)
 2009560:	10ffffc4 	addi	r3,r2,-1
 2009564:	e0ffff15 	stw	r3,-4(fp)
 2009568:	10000626 	beq	r2,zero,2009584 <memset+0x58>
        *s++ = (char) c;
 200956c:	e0bff817 	ldw	r2,-32(fp)
 2009570:	10c00044 	addi	r3,r2,1
 2009574:	e0fff815 	stw	r3,-32(fp)
 2009578:	e0fffe17 	ldw	r3,-8(fp)
 200957c:	10c00005 	stb	r3,0(r2)
 2009580:	00000206 	br	200958c <memset+0x60>
      else
        return m;
 2009584:	e0bffd17 	ldw	r2,-12(fp)
 2009588:	00005506 	br	20096e0 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 200958c:	e0bff817 	ldw	r2,-32(fp)
 2009590:	108000cc 	andi	r2,r2,3
 2009594:	103ff11e 	bne	r2,zero,200955c <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 2009598:	e0bfff17 	ldw	r2,-4(fp)
 200959c:	10800130 	cmpltui	r2,r2,4
 20095a0:	10004a1e 	bne	r2,zero,20096cc <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 20095a4:	e0bff817 	ldw	r2,-32(fp)
 20095a8:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 20095ac:	e0bffc17 	ldw	r2,-16(fp)
 20095b0:	1006923a 	slli	r3,r2,8
 20095b4:	e0bffc17 	ldw	r2,-16(fp)
 20095b8:	1884b03a 	or	r2,r3,r2
 20095bc:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 20095c0:	e0bffa17 	ldw	r2,-24(fp)
 20095c4:	1004943a 	slli	r2,r2,16
 20095c8:	e0fffa17 	ldw	r3,-24(fp)
 20095cc:	1884b03a 	or	r2,r3,r2
 20095d0:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 20095d4:	00800804 	movi	r2,32
 20095d8:	e0bff915 	stw	r2,-28(fp)
 20095dc:	00000906 	br	2009604 <memset+0xd8>
        buffer = (buffer << i) | buffer;
 20095e0:	e0fffa17 	ldw	r3,-24(fp)
 20095e4:	e0bff917 	ldw	r2,-28(fp)
 20095e8:	1884983a 	sll	r2,r3,r2
 20095ec:	e0fffa17 	ldw	r3,-24(fp)
 20095f0:	1884b03a 	or	r2,r3,r2
 20095f4:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 20095f8:	e0bff917 	ldw	r2,-28(fp)
 20095fc:	1085883a 	add	r2,r2,r2
 2009600:	e0bff915 	stw	r2,-28(fp)
 2009604:	e0bff917 	ldw	r2,-28(fp)
 2009608:	10800830 	cmpltui	r2,r2,32
 200960c:	103ff41e 	bne	r2,zero,20095e0 <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2009610:	00001706 	br	2009670 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 2009614:	e0bffb17 	ldw	r2,-20(fp)
 2009618:	10c00104 	addi	r3,r2,4
 200961c:	e0fffb15 	stw	r3,-20(fp)
 2009620:	e0fffa17 	ldw	r3,-24(fp)
 2009624:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2009628:	e0bffb17 	ldw	r2,-20(fp)
 200962c:	10c00104 	addi	r3,r2,4
 2009630:	e0fffb15 	stw	r3,-20(fp)
 2009634:	e0fffa17 	ldw	r3,-24(fp)
 2009638:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 200963c:	e0bffb17 	ldw	r2,-20(fp)
 2009640:	10c00104 	addi	r3,r2,4
 2009644:	e0fffb15 	stw	r3,-20(fp)
 2009648:	e0fffa17 	ldw	r3,-24(fp)
 200964c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2009650:	e0bffb17 	ldw	r2,-20(fp)
 2009654:	10c00104 	addi	r3,r2,4
 2009658:	e0fffb15 	stw	r3,-20(fp)
 200965c:	e0fffa17 	ldw	r3,-24(fp)
 2009660:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 2009664:	e0bfff17 	ldw	r2,-4(fp)
 2009668:	10bffc04 	addi	r2,r2,-16
 200966c:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2009670:	e0bfff17 	ldw	r2,-4(fp)
 2009674:	10800428 	cmpgeui	r2,r2,16
 2009678:	103fe61e 	bne	r2,zero,2009614 <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 200967c:	00000806 	br	20096a0 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 2009680:	e0bffb17 	ldw	r2,-20(fp)
 2009684:	10c00104 	addi	r3,r2,4
 2009688:	e0fffb15 	stw	r3,-20(fp)
 200968c:	e0fffa17 	ldw	r3,-24(fp)
 2009690:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 2009694:	e0bfff17 	ldw	r2,-4(fp)
 2009698:	10bfff04 	addi	r2,r2,-4
 200969c:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 20096a0:	e0bfff17 	ldw	r2,-4(fp)
 20096a4:	10800128 	cmpgeui	r2,r2,4
 20096a8:	103ff51e 	bne	r2,zero,2009680 <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 20096ac:	e0bffb17 	ldw	r2,-20(fp)
 20096b0:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 20096b4:	00000506 	br	20096cc <memset+0x1a0>
    *s++ = (char) c;
 20096b8:	e0bff817 	ldw	r2,-32(fp)
 20096bc:	10c00044 	addi	r3,r2,1
 20096c0:	e0fff815 	stw	r3,-32(fp)
 20096c4:	e0fffe17 	ldw	r3,-8(fp)
 20096c8:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 20096cc:	e0bfff17 	ldw	r2,-4(fp)
 20096d0:	10ffffc4 	addi	r3,r2,-1
 20096d4:	e0ffff15 	stw	r3,-4(fp)
 20096d8:	103ff71e 	bne	r2,zero,20096b8 <memset+0x18c>
    *s++ = (char) c;

  return m;
 20096dc:	e0bffd17 	ldw	r2,-12(fp)
}
 20096e0:	e037883a 	mov	sp,fp
 20096e4:	df000017 	ldw	fp,0(sp)
 20096e8:	dec00104 	addi	sp,sp,4
 20096ec:	f800283a 	ret

020096f0 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 20096f0:	defff804 	addi	sp,sp,-32
 20096f4:	dfc00515 	stw	ra,20(sp)
 20096f8:	df000415 	stw	fp,16(sp)
 20096fc:	df000404 	addi	fp,sp,16
 2009700:	e13ffe15 	stw	r4,-8(fp)
 2009704:	e17fff15 	stw	r5,-4(fp)
 2009708:	e1800215 	stw	r6,8(fp)
 200970c:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 2009710:	e0800204 	addi	r2,fp,8
 2009714:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2009718:	e0bffe17 	ldw	r2,-8(fp)
 200971c:	10800217 	ldw	r2,8(r2)
 2009720:	e0fffd17 	ldw	r3,-12(fp)
 2009724:	180f883a 	mov	r7,r3
 2009728:	e1bfff17 	ldw	r6,-4(fp)
 200972c:	100b883a 	mov	r5,r2
 2009730:	e13ffe17 	ldw	r4,-8(fp)
 2009734:	2009b400 	call	2009b40 <___vfprintf_internal_r>
 2009738:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 200973c:	e0bffc17 	ldw	r2,-16(fp)
}
 2009740:	e037883a 	mov	sp,fp
 2009744:	dfc00117 	ldw	ra,4(sp)
 2009748:	df000017 	ldw	fp,0(sp)
 200974c:	dec00404 	addi	sp,sp,16
 2009750:	f800283a 	ret

02009754 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 2009754:	defff704 	addi	sp,sp,-36
 2009758:	dfc00515 	stw	ra,20(sp)
 200975c:	df000415 	stw	fp,16(sp)
 2009760:	df000404 	addi	fp,sp,16
 2009764:	e13fff15 	stw	r4,-4(fp)
 2009768:	e1400215 	stw	r5,8(fp)
 200976c:	e1800315 	stw	r6,12(fp)
 2009770:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 2009774:	d0a03017 	ldw	r2,-32576(gp)
 2009778:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 200977c:	e0800204 	addi	r2,fp,8
 2009780:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 2009784:	d0a03017 	ldw	r2,-32576(gp)
 2009788:	10800217 	ldw	r2,8(r2)
 200978c:	e0fffe17 	ldw	r3,-8(fp)
 2009790:	180d883a 	mov	r6,r3
 2009794:	e17fff17 	ldw	r5,-4(fp)
 2009798:	1009883a 	mov	r4,r2
 200979c:	2009af00 	call	2009af0 <__vfprintf_internal>
 20097a0:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 20097a4:	e0bffd17 	ldw	r2,-12(fp)
}
 20097a8:	e037883a 	mov	sp,fp
 20097ac:	dfc00117 	ldw	ra,4(sp)
 20097b0:	df000017 	ldw	fp,0(sp)
 20097b4:	dec00504 	addi	sp,sp,20
 20097b8:	f800283a 	ret

020097bc <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 20097bc:	defff104 	addi	sp,sp,-60
 20097c0:	dfc00e15 	stw	ra,56(sp)
 20097c4:	df000d15 	stw	fp,52(sp)
 20097c8:	df000d04 	addi	fp,sp,52
 20097cc:	e13ffe15 	stw	r4,-8(fp)
 20097d0:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 20097d4:	e13fff17 	ldw	r4,-4(fp)
 20097d8:	200990c0 	call	200990c <strlen>
 20097dc:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 20097e0:	e0bfff17 	ldw	r2,-4(fp)
 20097e4:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 20097e8:	e0bff317 	ldw	r2,-52(fp)
 20097ec:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 20097f0:	008080b4 	movhi	r2,514
 20097f4:	108a0304 	addi	r2,r2,10252
 20097f8:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 20097fc:	00800044 	movi	r2,1
 2009800:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 2009804:	e0bff317 	ldw	r2,-52(fp)
 2009808:	10800044 	addi	r2,r2,1
 200980c:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 2009810:	e0bffa04 	addi	r2,fp,-24
 2009814:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 2009818:	00800084 	movi	r2,2
 200981c:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 2009820:	e0bffe17 	ldw	r2,-8(fp)
 2009824:	e0bff415 	stw	r2,-48(fp)
 2009828:	e0bff417 	ldw	r2,-48(fp)
 200982c:	10000526 	beq	r2,zero,2009844 <_puts_r+0x88>
 2009830:	e0bff417 	ldw	r2,-48(fp)
 2009834:	10800e17 	ldw	r2,56(r2)
 2009838:	1000021e 	bne	r2,zero,2009844 <_puts_r+0x88>
 200983c:	e13ff417 	ldw	r4,-48(fp)
 2009840:	200e7ac0 	call	200e7ac <__sinit>
  fp = _stdout_r (ptr);
 2009844:	e0bffe17 	ldw	r2,-8(fp)
 2009848:	10800217 	ldw	r2,8(r2)
 200984c:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 2009850:	e0bff517 	ldw	r2,-44(fp)
 2009854:	1080030b 	ldhu	r2,12(r2)
 2009858:	10bfffcc 	andi	r2,r2,65535
 200985c:	1088000c 	andi	r2,r2,8192
 2009860:	10000c1e 	bne	r2,zero,2009894 <_puts_r+0xd8>
 2009864:	e0bff517 	ldw	r2,-44(fp)
 2009868:	1080030b 	ldhu	r2,12(r2)
 200986c:	10880014 	ori	r2,r2,8192
 2009870:	1007883a 	mov	r3,r2
 2009874:	e0bff517 	ldw	r2,-44(fp)
 2009878:	10c0030d 	sth	r3,12(r2)
 200987c:	e0bff517 	ldw	r2,-44(fp)
 2009880:	10c01917 	ldw	r3,100(r2)
 2009884:	00b7ffc4 	movi	r2,-8193
 2009888:	1886703a 	and	r3,r3,r2
 200988c:	e0bff517 	ldw	r2,-44(fp)
 2009890:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 2009894:	e0bff704 	addi	r2,fp,-36
 2009898:	100d883a 	mov	r6,r2
 200989c:	e17ff517 	ldw	r5,-44(fp)
 20098a0:	e13ffe17 	ldw	r4,-8(fp)
 20098a4:	200f0f80 	call	200f0f8 <__sfvwrite_r>
 20098a8:	10000226 	beq	r2,zero,20098b4 <_puts_r+0xf8>
 20098ac:	00bfffc4 	movi	r2,-1
 20098b0:	00000106 	br	20098b8 <_puts_r+0xfc>
 20098b4:	00800284 	movi	r2,10
 20098b8:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 20098bc:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 20098c0:	e037883a 	mov	sp,fp
 20098c4:	dfc00117 	ldw	ra,4(sp)
 20098c8:	df000017 	ldw	fp,0(sp)
 20098cc:	dec00204 	addi	sp,sp,8
 20098d0:	f800283a 	ret

020098d4 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 20098d4:	defffd04 	addi	sp,sp,-12
 20098d8:	dfc00215 	stw	ra,8(sp)
 20098dc:	df000115 	stw	fp,4(sp)
 20098e0:	df000104 	addi	fp,sp,4
 20098e4:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 20098e8:	d0a03017 	ldw	r2,-32576(gp)
 20098ec:	e17fff17 	ldw	r5,-4(fp)
 20098f0:	1009883a 	mov	r4,r2
 20098f4:	20097bc0 	call	20097bc <_puts_r>
}
 20098f8:	e037883a 	mov	sp,fp
 20098fc:	dfc00117 	ldw	ra,4(sp)
 2009900:	df000017 	ldw	fp,0(sp)
 2009904:	dec00204 	addi	sp,sp,8
 2009908:	f800283a 	ret

0200990c <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 200990c:	defffc04 	addi	sp,sp,-16
 2009910:	df000315 	stw	fp,12(sp)
 2009914:	df000304 	addi	fp,sp,12
 2009918:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 200991c:	e0bfff17 	ldw	r2,-4(fp)
 2009920:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2009924:	00000d06 	br	200995c <strlen+0x50>
    {
      if (!*str)
 2009928:	e0bfff17 	ldw	r2,-4(fp)
 200992c:	10800003 	ldbu	r2,0(r2)
 2009930:	10803fcc 	andi	r2,r2,255
 2009934:	1080201c 	xori	r2,r2,128
 2009938:	10bfe004 	addi	r2,r2,-128
 200993c:	1000041e 	bne	r2,zero,2009950 <strlen+0x44>
	return str - start;
 2009940:	e0ffff17 	ldw	r3,-4(fp)
 2009944:	e0bffe17 	ldw	r2,-8(fp)
 2009948:	1885c83a 	sub	r2,r3,r2
 200994c:	00002806 	br	20099f0 <strlen+0xe4>
      str++;
 2009950:	e0bfff17 	ldw	r2,-4(fp)
 2009954:	10800044 	addi	r2,r2,1
 2009958:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 200995c:	e0bfff17 	ldw	r2,-4(fp)
 2009960:	108000cc 	andi	r2,r2,3
 2009964:	103ff01e 	bne	r2,zero,2009928 <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 2009968:	e0bfff17 	ldw	r2,-4(fp)
 200996c:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 2009970:	00000306 	br	2009980 <strlen+0x74>
    aligned_addr++;
 2009974:	e0bffd17 	ldw	r2,-12(fp)
 2009978:	10800104 	addi	r2,r2,4
 200997c:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 2009980:	e0bffd17 	ldw	r2,-12(fp)
 2009984:	10c00017 	ldw	r3,0(r2)
 2009988:	00bfbff4 	movhi	r2,65279
 200998c:	10bfbfc4 	addi	r2,r2,-257
 2009990:	1887883a 	add	r3,r3,r2
 2009994:	e0bffd17 	ldw	r2,-12(fp)
 2009998:	10800017 	ldw	r2,0(r2)
 200999c:	0084303a 	nor	r2,zero,r2
 20099a0:	1886703a 	and	r3,r3,r2
 20099a4:	00a02074 	movhi	r2,32897
 20099a8:	10a02004 	addi	r2,r2,-32640
 20099ac:	1884703a 	and	r2,r3,r2
 20099b0:	103ff026 	beq	r2,zero,2009974 <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 20099b4:	e0bffd17 	ldw	r2,-12(fp)
 20099b8:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 20099bc:	00000306 	br	20099cc <strlen+0xc0>
    str++;
 20099c0:	e0bfff17 	ldw	r2,-4(fp)
 20099c4:	10800044 	addi	r2,r2,1
 20099c8:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 20099cc:	e0bfff17 	ldw	r2,-4(fp)
 20099d0:	10800003 	ldbu	r2,0(r2)
 20099d4:	10803fcc 	andi	r2,r2,255
 20099d8:	1080201c 	xori	r2,r2,128
 20099dc:	10bfe004 	addi	r2,r2,-128
 20099e0:	103ff71e 	bne	r2,zero,20099c0 <strlen+0xb4>
    str++;
  return str - start;
 20099e4:	e0ffff17 	ldw	r3,-4(fp)
 20099e8:	e0bffe17 	ldw	r2,-8(fp)
 20099ec:	1885c83a 	sub	r2,r3,r2
}
 20099f0:	e037883a 	mov	sp,fp
 20099f4:	df000017 	ldw	fp,0(sp)
 20099f8:	dec00104 	addi	sp,sp,4
 20099fc:	f800283a 	ret

02009a00 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 2009a00:	defedf04 	addi	sp,sp,-1156
 2009a04:	dfc12015 	stw	ra,1152(sp)
 2009a08:	df011f15 	stw	fp,1148(sp)
 2009a0c:	dc011e15 	stw	r16,1144(sp)
 2009a10:	df011f04 	addi	fp,sp,1148
 2009a14:	e13ffc15 	stw	r4,-16(fp)
 2009a18:	2821883a 	mov	r16,r5
 2009a1c:	e1bffd15 	stw	r6,-12(fp)
 2009a20:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2009a24:	80c0030b 	ldhu	r3,12(r16)
 2009a28:	00bfff44 	movi	r2,-3
 2009a2c:	1884703a 	and	r2,r3,r2
 2009a30:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2009a34:	80801917 	ldw	r2,100(r16)
 2009a38:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 2009a3c:	8080038b 	ldhu	r2,14(r16)
 2009a40:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2009a44:	80800717 	ldw	r2,28(r16)
 2009a48:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 2009a4c:	80800917 	ldw	r2,36(r16)
 2009a50:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2009a54:	e0befc04 	addi	r2,fp,-1040
 2009a58:	e0bee215 	stw	r2,-1144(fp)
 2009a5c:	e0bee217 	ldw	r2,-1144(fp)
 2009a60:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2009a64:	00810004 	movi	r2,1024
 2009a68:	e0bee415 	stw	r2,-1136(fp)
 2009a6c:	e0bee417 	ldw	r2,-1136(fp)
 2009a70:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2009a74:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2009a78:	e0bee204 	addi	r2,fp,-1144
 2009a7c:	e1fffe17 	ldw	r7,-8(fp)
 2009a80:	e1bffd17 	ldw	r6,-12(fp)
 2009a84:	100b883a 	mov	r5,r2
 2009a88:	e13ffc17 	ldw	r4,-16(fp)
 2009a8c:	2009b400 	call	2009b40 <___vfprintf_internal_r>
 2009a90:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2009a94:	e0bee117 	ldw	r2,-1148(fp)
 2009a98:	10000716 	blt	r2,zero,2009ab8 <__sbprintf+0xb8>
 2009a9c:	e0bee204 	addi	r2,fp,-1144
 2009aa0:	100b883a 	mov	r5,r2
 2009aa4:	e13ffc17 	ldw	r4,-16(fp)
 2009aa8:	200e32c0 	call	200e32c <_fflush_r>
 2009aac:	10000226 	beq	r2,zero,2009ab8 <__sbprintf+0xb8>
		ret = EOF;
 2009ab0:	00bfffc4 	movi	r2,-1
 2009ab4:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2009ab8:	e0bee50b 	ldhu	r2,-1132(fp)
 2009abc:	10bfffcc 	andi	r2,r2,65535
 2009ac0:	1080100c 	andi	r2,r2,64
 2009ac4:	10000326 	beq	r2,zero,2009ad4 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 2009ac8:	8080030b 	ldhu	r2,12(r16)
 2009acc:	10801014 	ori	r2,r2,64
 2009ad0:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 2009ad4:	e0bee117 	ldw	r2,-1148(fp)
}
 2009ad8:	e6ffff04 	addi	sp,fp,-4
 2009adc:	dfc00217 	ldw	ra,8(sp)
 2009ae0:	df000117 	ldw	fp,4(sp)
 2009ae4:	dc000017 	ldw	r16,0(sp)
 2009ae8:	dec00304 	addi	sp,sp,12
 2009aec:	f800283a 	ret

02009af0 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 2009af0:	defffa04 	addi	sp,sp,-24
 2009af4:	dfc00515 	stw	ra,20(sp)
 2009af8:	df000415 	stw	fp,16(sp)
 2009afc:	df000404 	addi	fp,sp,16
 2009b00:	e13ffd15 	stw	r4,-12(fp)
 2009b04:	e17ffe15 	stw	r5,-8(fp)
 2009b08:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 2009b0c:	d0a03017 	ldw	r2,-32576(gp)
 2009b10:	e1ffff17 	ldw	r7,-4(fp)
 2009b14:	e1bffe17 	ldw	r6,-8(fp)
 2009b18:	e17ffd17 	ldw	r5,-12(fp)
 2009b1c:	1009883a 	mov	r4,r2
 2009b20:	2009b400 	call	2009b40 <___vfprintf_internal_r>
 2009b24:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2009b28:	e0bffc17 	ldw	r2,-16(fp)
}
 2009b2c:	e037883a 	mov	sp,fp
 2009b30:	dfc00117 	ldw	ra,4(sp)
 2009b34:	df000017 	ldw	fp,0(sp)
 2009b38:	dec00204 	addi	sp,sp,8
 2009b3c:	f800283a 	ret

02009b40 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 2009b40:	deffa404 	addi	sp,sp,-368
 2009b44:	dfc05b15 	stw	ra,364(sp)
 2009b48:	df005a15 	stw	fp,360(sp)
 2009b4c:	ddc05915 	stw	r23,356(sp)
 2009b50:	dd805815 	stw	r22,352(sp)
 2009b54:	dd405715 	stw	r21,348(sp)
 2009b58:	dd005615 	stw	r20,344(sp)
 2009b5c:	dcc05515 	stw	r19,340(sp)
 2009b60:	dc805415 	stw	r18,336(sp)
 2009b64:	dc405315 	stw	r17,332(sp)
 2009b68:	dc005215 	stw	r16,328(sp)
 2009b6c:	df005a04 	addi	fp,sp,360
 2009b70:	e13fe615 	stw	r4,-104(fp)
 2009b74:	e17fe715 	stw	r5,-100(fp)
 2009b78:	e1bfe815 	stw	r6,-96(fp)
 2009b7c:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 2009b80:	e13fe617 	ldw	r4,-104(fp)
 2009b84:	200f9940 	call	200f994 <_localeconv_r>
 2009b88:	10800017 	ldw	r2,0(r2)
 2009b8c:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 2009b90:	e13fbb17 	ldw	r4,-276(fp)
 2009b94:	200990c0 	call	200990c <strlen>
 2009b98:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 2009b9c:	e03fc215 	stw	zero,-248(fp)
 2009ba0:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 2009ba4:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 2009ba8:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2009bac:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2009bb0:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 2009bb4:	e0bfe617 	ldw	r2,-104(fp)
 2009bb8:	e0bfbd15 	stw	r2,-268(fp)
 2009bbc:	e0bfbd17 	ldw	r2,-268(fp)
 2009bc0:	10000526 	beq	r2,zero,2009bd8 <___vfprintf_internal_r+0x98>
 2009bc4:	e0bfbd17 	ldw	r2,-268(fp)
 2009bc8:	10800e17 	ldw	r2,56(r2)
 2009bcc:	1000021e 	bne	r2,zero,2009bd8 <___vfprintf_internal_r+0x98>
 2009bd0:	e13fbd17 	ldw	r4,-268(fp)
 2009bd4:	200e7ac0 	call	200e7ac <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2009bd8:	e0bfe717 	ldw	r2,-100(fp)
 2009bdc:	1080030b 	ldhu	r2,12(r2)
 2009be0:	10bfffcc 	andi	r2,r2,65535
 2009be4:	1088000c 	andi	r2,r2,8192
 2009be8:	10000c1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0xdc>
 2009bec:	e0bfe717 	ldw	r2,-100(fp)
 2009bf0:	1080030b 	ldhu	r2,12(r2)
 2009bf4:	10880014 	ori	r2,r2,8192
 2009bf8:	1007883a 	mov	r3,r2
 2009bfc:	e0bfe717 	ldw	r2,-100(fp)
 2009c00:	10c0030d 	sth	r3,12(r2)
 2009c04:	e0bfe717 	ldw	r2,-100(fp)
 2009c08:	10c01917 	ldw	r3,100(r2)
 2009c0c:	00b7ffc4 	movi	r2,-8193
 2009c10:	1886703a 	and	r3,r3,r2
 2009c14:	e0bfe717 	ldw	r2,-100(fp)
 2009c18:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 2009c1c:	e0bfe717 	ldw	r2,-100(fp)
 2009c20:	1080030b 	ldhu	r2,12(r2)
 2009c24:	10bfffcc 	andi	r2,r2,65535
 2009c28:	1080020c 	andi	r2,r2,8
 2009c2c:	10000326 	beq	r2,zero,2009c3c <___vfprintf_internal_r+0xfc>
 2009c30:	e0bfe717 	ldw	r2,-100(fp)
 2009c34:	10800417 	ldw	r2,16(r2)
 2009c38:	1000061e 	bne	r2,zero,2009c54 <___vfprintf_internal_r+0x114>
 2009c3c:	e17fe717 	ldw	r5,-100(fp)
 2009c40:	e13fe617 	ldw	r4,-104(fp)
 2009c44:	200bf5c0 	call	200bf5c <__swsetup_r>
 2009c48:	10000226 	beq	r2,zero,2009c54 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2009c4c:	00bfffc4 	movi	r2,-1
 2009c50:	0007e206 	br	200bbdc <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2009c54:	e0bfe717 	ldw	r2,-100(fp)
 2009c58:	1080030b 	ldhu	r2,12(r2)
 2009c5c:	10bfffcc 	andi	r2,r2,65535
 2009c60:	1080068c 	andi	r2,r2,26
 2009c64:	10800298 	cmpnei	r2,r2,10
 2009c68:	10000c1e 	bne	r2,zero,2009c9c <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 2009c6c:	e0bfe717 	ldw	r2,-100(fp)
 2009c70:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2009c74:	10bfffcc 	andi	r2,r2,65535
 2009c78:	10a0001c 	xori	r2,r2,32768
 2009c7c:	10a00004 	addi	r2,r2,-32768
 2009c80:	10000616 	blt	r2,zero,2009c9c <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 2009c84:	e1ffe917 	ldw	r7,-92(fp)
 2009c88:	e1bfe817 	ldw	r6,-96(fp)
 2009c8c:	e17fe717 	ldw	r5,-100(fp)
 2009c90:	e13fe617 	ldw	r4,-104(fp)
 2009c94:	2009a000 	call	2009a00 <__sbprintf>
 2009c98:	0007d006 	br	200bbdc <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2009c9c:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2009ca0:	e47fcb04 	addi	r17,fp,-212
 2009ca4:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 2009ca8:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2009cac:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2009cb0:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 2009cb4:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2009cb8:	00000106 	br	2009cc0 <___vfprintf_internal_r+0x180>
                    fmt += 1;
 2009cbc:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2009cc0:	a8800003 	ldbu	r2,0(r21)
 2009cc4:	10803fcc 	andi	r2,r2,255
 2009cc8:	1080201c 	xori	r2,r2,128
 2009ccc:	10bfe004 	addi	r2,r2,-128
 2009cd0:	10000626 	beq	r2,zero,2009cec <___vfprintf_internal_r+0x1ac>
 2009cd4:	a8800003 	ldbu	r2,0(r21)
 2009cd8:	10803fcc 	andi	r2,r2,255
 2009cdc:	1080201c 	xori	r2,r2,128
 2009ce0:	10bfe004 	addi	r2,r2,-128
 2009ce4:	10800958 	cmpnei	r2,r2,37
 2009ce8:	103ff41e 	bne	r2,zero,2009cbc <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 2009cec:	a807883a 	mov	r3,r21
 2009cf0:	9005883a 	mov	r2,r18
 2009cf4:	18a1c83a 	sub	r16,r3,r2
 2009cf8:	80001826 	beq	r16,zero,2009d5c <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 2009cfc:	8c800015 	stw	r18,0(r17)
 2009d00:	8005883a 	mov	r2,r16
 2009d04:	88800115 	stw	r2,4(r17)
 2009d08:	e0bfca17 	ldw	r2,-216(fp)
 2009d0c:	8007883a 	mov	r3,r16
 2009d10:	10c5883a 	add	r2,r2,r3
 2009d14:	e0bfca15 	stw	r2,-216(fp)
 2009d18:	8c400204 	addi	r17,r17,8
 2009d1c:	e0bfc917 	ldw	r2,-220(fp)
 2009d20:	10800044 	addi	r2,r2,1
 2009d24:	e0bfc915 	stw	r2,-220(fp)
 2009d28:	e0bfc917 	ldw	r2,-220(fp)
 2009d2c:	10800210 	cmplti	r2,r2,8
 2009d30:	1000071e 	bne	r2,zero,2009d50 <___vfprintf_internal_r+0x210>
 2009d34:	e0bfc804 	addi	r2,fp,-224
 2009d38:	100d883a 	mov	r6,r2
 2009d3c:	e17fe717 	ldw	r5,-100(fp)
 2009d40:	e13fe617 	ldw	r4,-104(fp)
 2009d44:	20139c80 	call	20139c8 <__sprint_r>
 2009d48:	10074d1e 	bne	r2,zero,200ba80 <___vfprintf_internal_r+0x1f40>
 2009d4c:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 2009d50:	e0bfac17 	ldw	r2,-336(fp)
 2009d54:	1405883a 	add	r2,r2,r16
 2009d58:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2009d5c:	a8800003 	ldbu	r2,0(r21)
 2009d60:	10803fcc 	andi	r2,r2,255
 2009d64:	1080201c 	xori	r2,r2,128
 2009d68:	10bfe004 	addi	r2,r2,-128
 2009d6c:	10073626 	beq	r2,zero,200ba48 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 2009d70:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 2009d74:	ad400044 	addi	r21,r21,1

		flags = 0;
 2009d78:	0027883a 	mov	r19,zero
		dprec = 0;
 2009d7c:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 2009d80:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 2009d84:	00bfffc4 	movi	r2,-1
 2009d88:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 2009d8c:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 2009d90:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 2009d94:	a805883a 	mov	r2,r21
 2009d98:	15400044 	addi	r21,r2,1
 2009d9c:	10800003 	ldbu	r2,0(r2)
 2009da0:	15003fcc 	andi	r20,r2,255
 2009da4:	a500201c 	xori	r20,r20,128
 2009da8:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 2009dac:	a0bff804 	addi	r2,r20,-32
 2009db0:	10c01668 	cmpgeui	r3,r2,89
 2009db4:	1803491e 	bne	r3,zero,200aadc <___vfprintf_internal_r+0xf9c>
 2009db8:	100690ba 	slli	r3,r2,2
 2009dbc:	00808074 	movhi	r2,513
 2009dc0:	10a77404 	addi	r2,r2,-25136
 2009dc4:	1885883a 	add	r2,r3,r2
 2009dc8:	10800017 	ldw	r2,0(r2)
 2009dcc:	1000683a 	jmp	r2
 2009dd0:	02009f34 	movhi	r8,636
 2009dd4:	0200aadc 	xori	r8,zero,683
 2009dd8:	0200aadc 	xori	r8,zero,683
 2009ddc:	02009f54 	movui	r8,637
 2009de0:	0200aadc 	xori	r8,zero,683
 2009de4:	0200aadc 	xori	r8,zero,683
 2009de8:	0200aadc 	xori	r8,zero,683
 2009dec:	0200aadc 	xori	r8,zero,683
 2009df0:	0200aadc 	xori	r8,zero,683
 2009df4:	0200aadc 	xori	r8,zero,683
 2009df8:	02009f5c 	xori	r8,zero,637
 2009dfc:	02009f90 	cmplti	r8,zero,638
 2009e00:	0200aadc 	xori	r8,zero,683
 2009e04:	02009f88 	cmpgei	r8,zero,638
 2009e08:	02009f9c 	xori	r8,zero,638
 2009e0c:	0200aadc 	xori	r8,zero,683
 2009e10:	0200a030 	cmpltui	r8,zero,640
 2009e14:	0200a038 	rdprs	r8,zero,640
 2009e18:	0200a038 	rdprs	r8,zero,640
 2009e1c:	0200a038 	rdprs	r8,zero,640
 2009e20:	0200a038 	rdprs	r8,zero,640
 2009e24:	0200a038 	rdprs	r8,zero,640
 2009e28:	0200a038 	rdprs	r8,zero,640
 2009e2c:	0200a038 	rdprs	r8,zero,640
 2009e30:	0200a038 	rdprs	r8,zero,640
 2009e34:	0200a038 	rdprs	r8,zero,640
 2009e38:	0200aadc 	xori	r8,zero,683
 2009e3c:	0200aadc 	xori	r8,zero,683
 2009e40:	0200aadc 	xori	r8,zero,683
 2009e44:	0200aadc 	xori	r8,zero,683
 2009e48:	0200aadc 	xori	r8,zero,683
 2009e4c:	0200aadc 	xori	r8,zero,683
 2009e50:	0200aadc 	xori	r8,zero,683
 2009e54:	0200aadc 	xori	r8,zero,683
 2009e58:	0200aadc 	xori	r8,zero,683
 2009e5c:	0200aadc 	xori	r8,zero,683
 2009e60:	0200a0e0 	cmpeqi	r8,zero,643
 2009e64:	0200a1e0 	cmpeqi	r8,zero,647
 2009e68:	0200aadc 	xori	r8,zero,683
 2009e6c:	0200a1e0 	cmpeqi	r8,zero,647
 2009e70:	0200aadc 	xori	r8,zero,683
 2009e74:	0200aadc 	xori	r8,zero,683
 2009e78:	0200aadc 	xori	r8,zero,683
 2009e7c:	0200aadc 	xori	r8,zero,683
 2009e80:	0200a074 	movhi	r8,641
 2009e84:	0200aadc 	xori	r8,zero,683
 2009e88:	0200aadc 	xori	r8,zero,683
 2009e8c:	0200a57c 	xorhi	r8,zero,661
 2009e90:	0200aadc 	xori	r8,zero,683
 2009e94:	0200aadc 	xori	r8,zero,683
 2009e98:	0200aadc 	xori	r8,zero,683
 2009e9c:	0200aadc 	xori	r8,zero,683
 2009ea0:	0200aadc 	xori	r8,zero,683
 2009ea4:	0200a6f8 	rdprs	r8,zero,667
 2009ea8:	0200aadc 	xori	r8,zero,683
 2009eac:	0200aadc 	xori	r8,zero,683
 2009eb0:	0200a7b8 	rdprs	r8,zero,670
 2009eb4:	0200aadc 	xori	r8,zero,683
 2009eb8:	0200aadc 	xori	r8,zero,683
 2009ebc:	0200aadc 	xori	r8,zero,683
 2009ec0:	0200aadc 	xori	r8,zero,683
 2009ec4:	0200aadc 	xori	r8,zero,683
 2009ec8:	0200aadc 	xori	r8,zero,683
 2009ecc:	0200aadc 	xori	r8,zero,683
 2009ed0:	0200aadc 	xori	r8,zero,683
 2009ed4:	0200aadc 	xori	r8,zero,683
 2009ed8:	0200aadc 	xori	r8,zero,683
 2009edc:	0200a0b8 	rdprs	r8,zero,642
 2009ee0:	0200a0e4 	muli	r8,zero,643
 2009ee4:	0200a1e0 	cmpeqi	r8,zero,647
 2009ee8:	0200a1e0 	cmpeqi	r8,zero,647
 2009eec:	0200a1e0 	cmpeqi	r8,zero,647
 2009ef0:	0200a07c 	xorhi	r8,zero,641
 2009ef4:	0200a0e4 	muli	r8,zero,643
 2009ef8:	0200aadc 	xori	r8,zero,683
 2009efc:	0200aadc 	xori	r8,zero,683
 2009f00:	0200a084 	movi	r8,642
 2009f04:	0200aadc 	xori	r8,zero,683
 2009f08:	0200a4dc 	xori	r8,zero,659
 2009f0c:	0200a580 	call	200a58 <__alt_mem_mem_Nios_PI+0xa58>
 2009f10:	0200a620 	cmpeqi	r8,zero,664
 2009f14:	0200a0b0 	cmpltui	r8,zero,642
 2009f18:	0200aadc 	xori	r8,zero,683
 2009f1c:	0200a668 	cmpgeui	r8,zero,665
 2009f20:	0200aadc 	xori	r8,zero,683
 2009f24:	0200a6fc 	xorhi	r8,zero,667
 2009f28:	0200aadc 	xori	r8,zero,683
 2009f2c:	0200aadc 	xori	r8,zero,683
 2009f30:	0200a7c8 	cmpgei	r8,zero,671
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 2009f34:	e0bfc103 	ldbu	r2,-252(fp)
 2009f38:	10803fcc 	andi	r2,r2,255
 2009f3c:	1080201c 	xori	r2,r2,128
 2009f40:	10bfe004 	addi	r2,r2,-128
 2009f44:	103f931e 	bne	r2,zero,2009d94 <___vfprintf_internal_r+0x254>
				sign = ' ';
 2009f48:	00800804 	movi	r2,32
 2009f4c:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2009f50:	003f9006 	br	2009d94 <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 2009f54:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2009f58:	003f8e06 	br	2009d94 <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2009f5c:	e0bfe917 	ldw	r2,-92(fp)
 2009f60:	10c00104 	addi	r3,r2,4
 2009f64:	e0ffe915 	stw	r3,-92(fp)
 2009f68:	10800017 	ldw	r2,0(r2)
 2009f6c:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2009f70:	e0bfad17 	ldw	r2,-332(fp)
 2009f74:	10000116 	blt	r2,zero,2009f7c <___vfprintf_internal_r+0x43c>
				goto rflag;
 2009f78:	003f8606 	br	2009d94 <___vfprintf_internal_r+0x254>
			width = -width;
 2009f7c:	e0bfad17 	ldw	r2,-332(fp)
 2009f80:	0085c83a 	sub	r2,zero,r2
 2009f84:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 2009f88:	9cc00114 	ori	r19,r19,4
			goto rflag;
 2009f8c:	003f8106 	br	2009d94 <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 2009f90:	00800ac4 	movi	r2,43
 2009f94:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2009f98:	003f7e06 	br	2009d94 <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 2009f9c:	a805883a 	mov	r2,r21
 2009fa0:	15400044 	addi	r21,r2,1
 2009fa4:	10800003 	ldbu	r2,0(r2)
 2009fa8:	15003fcc 	andi	r20,r2,255
 2009fac:	a500201c 	xori	r20,r20,128
 2009fb0:	a53fe004 	addi	r20,r20,-128
 2009fb4:	a0800a98 	cmpnei	r2,r20,42
 2009fb8:	10000a1e 	bne	r2,zero,2009fe4 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 2009fbc:	e0bfe917 	ldw	r2,-92(fp)
 2009fc0:	10c00104 	addi	r3,r2,4
 2009fc4:	e0ffe915 	stw	r3,-92(fp)
 2009fc8:	10800017 	ldw	r2,0(r2)
 2009fcc:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 2009fd0:	e0bfae17 	ldw	r2,-328(fp)
 2009fd4:	103f6f0e 	bge	r2,zero,2009d94 <___vfprintf_internal_r+0x254>
					prec = -1;
 2009fd8:	00bfffc4 	movi	r2,-1
 2009fdc:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 2009fe0:	003f6c06 	br	2009d94 <___vfprintf_internal_r+0x254>
			}
			n = 0;
 2009fe4:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 2009fe8:	00000906 	br	200a010 <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 2009fec:	80c002a4 	muli	r3,r16,10
 2009ff0:	a0bff404 	addi	r2,r20,-48
 2009ff4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2009ff8:	a805883a 	mov	r2,r21
 2009ffc:	15400044 	addi	r21,r2,1
 200a000:	10800003 	ldbu	r2,0(r2)
 200a004:	15003fcc 	andi	r20,r2,255
 200a008:	a500201c 	xori	r20,r20,128
 200a00c:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 200a010:	a0bff404 	addi	r2,r20,-48
 200a014:	108002b0 	cmpltui	r2,r2,10
 200a018:	103ff41e 	bne	r2,zero,2009fec <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200a01c:	8005883a 	mov	r2,r16
 200a020:	1000010e 	bge	r2,zero,200a028 <___vfprintf_internal_r+0x4e8>
 200a024:	00bfffc4 	movi	r2,-1
 200a028:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 200a02c:	003f5f06 	br	2009dac <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 200a030:	9cc02014 	ori	r19,r19,128
			goto rflag;
 200a034:	003f5706 	br	2009d94 <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 200a038:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 200a03c:	80c002a4 	muli	r3,r16,10
 200a040:	a0bff404 	addi	r2,r20,-48
 200a044:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200a048:	a805883a 	mov	r2,r21
 200a04c:	15400044 	addi	r21,r2,1
 200a050:	10800003 	ldbu	r2,0(r2)
 200a054:	15003fcc 	andi	r20,r2,255
 200a058:	a500201c 	xori	r20,r20,128
 200a05c:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 200a060:	a0bff404 	addi	r2,r20,-48
 200a064:	108002b0 	cmpltui	r2,r2,10
 200a068:	103ff41e 	bne	r2,zero,200a03c <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 200a06c:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 200a070:	003f4e06 	br	2009dac <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 200a074:	9cc00214 	ori	r19,r19,8
			goto rflag;
 200a078:	003f4606 	br	2009d94 <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 200a07c:	9cc01014 	ori	r19,r19,64
			goto rflag;
 200a080:	003f4406 	br	2009d94 <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200a084:	a8800003 	ldbu	r2,0(r21)
 200a088:	10803fcc 	andi	r2,r2,255
 200a08c:	1080201c 	xori	r2,r2,128
 200a090:	10bfe004 	addi	r2,r2,-128
 200a094:	10801b18 	cmpnei	r2,r2,108
 200a098:	1000031e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x568>
				fmt++;
 200a09c:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 200a0a0:	9cc00814 	ori	r19,r19,32
 200a0a4:	003f3b06 	br	2009d94 <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 200a0a8:	9cc00414 	ori	r19,r19,16
			goto rflag;
 200a0ac:	003f3906 	br	2009d94 <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 200a0b0:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200a0b4:	003f3706 	br	2009d94 <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 200a0b8:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 200a0bc:	e0bfe917 	ldw	r2,-92(fp)
 200a0c0:	10c00104 	addi	r3,r2,4
 200a0c4:	e0ffe915 	stw	r3,-92(fp)
 200a0c8:	10800017 	ldw	r2,0(r2)
 200a0cc:	90800005 	stb	r2,0(r18)
				size = 1;
 200a0d0:	00800044 	movi	r2,1
 200a0d4:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 200a0d8:	e03fc105 	stb	zero,-252(fp)
			break;
 200a0dc:	00028806 	br	200ab00 <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 200a0e0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200a0e4:	9880080c 	andi	r2,r19,32
 200a0e8:	10000826 	beq	r2,zero,200a10c <___vfprintf_internal_r+0x5cc>
 200a0ec:	e13fe917 	ldw	r4,-92(fp)
 200a0f0:	20800204 	addi	r2,r4,8
 200a0f4:	e0bfe915 	stw	r2,-92(fp)
 200a0f8:	20800017 	ldw	r2,0(r4)
 200a0fc:	20c00117 	ldw	r3,4(r4)
 200a100:	e0bfea15 	stw	r2,-88(fp)
 200a104:	e0ffeb15 	stw	r3,-84(fp)
 200a108:	00001e06 	br	200a184 <___vfprintf_internal_r+0x644>
 200a10c:	9880040c 	andi	r2,r19,16
 200a110:	10000826 	beq	r2,zero,200a134 <___vfprintf_internal_r+0x5f4>
 200a114:	e0bfe917 	ldw	r2,-92(fp)
 200a118:	10c00104 	addi	r3,r2,4
 200a11c:	e0ffe915 	stw	r3,-92(fp)
 200a120:	10800017 	ldw	r2,0(r2)
 200a124:	e0bfea15 	stw	r2,-88(fp)
 200a128:	1005d7fa 	srai	r2,r2,31
 200a12c:	e0bfeb15 	stw	r2,-84(fp)
 200a130:	00001406 	br	200a184 <___vfprintf_internal_r+0x644>
 200a134:	9880100c 	andi	r2,r19,64
 200a138:	10000b26 	beq	r2,zero,200a168 <___vfprintf_internal_r+0x628>
 200a13c:	e0bfe917 	ldw	r2,-92(fp)
 200a140:	10c00104 	addi	r3,r2,4
 200a144:	e0ffe915 	stw	r3,-92(fp)
 200a148:	10800017 	ldw	r2,0(r2)
 200a14c:	10bfffcc 	andi	r2,r2,65535
 200a150:	10a0001c 	xori	r2,r2,32768
 200a154:	10a00004 	addi	r2,r2,-32768
 200a158:	e0bfea15 	stw	r2,-88(fp)
 200a15c:	1005d7fa 	srai	r2,r2,31
 200a160:	e0bfeb15 	stw	r2,-84(fp)
 200a164:	00000706 	br	200a184 <___vfprintf_internal_r+0x644>
 200a168:	e0bfe917 	ldw	r2,-92(fp)
 200a16c:	10c00104 	addi	r3,r2,4
 200a170:	e0ffe915 	stw	r3,-92(fp)
 200a174:	10800017 	ldw	r2,0(r2)
 200a178:	e0bfea15 	stw	r2,-88(fp)
 200a17c:	1005d7fa 	srai	r2,r2,31
 200a180:	e0bfeb15 	stw	r2,-84(fp)
 200a184:	e0bfea17 	ldw	r2,-88(fp)
 200a188:	e0bfb115 	stw	r2,-316(fp)
 200a18c:	e0ffeb17 	ldw	r3,-84(fp)
 200a190:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 200a194:	e0bfb117 	ldw	r2,-316(fp)
 200a198:	e0ffb217 	ldw	r3,-312(fp)
 200a19c:	18000d0e 	bge	r3,zero,200a1d4 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 200a1a0:	000f883a 	mov	r7,zero
 200a1a4:	0011883a 	mov	r8,zero
 200a1a8:	e13fb117 	ldw	r4,-316(fp)
 200a1ac:	e17fb217 	ldw	r5,-312(fp)
 200a1b0:	3905c83a 	sub	r2,r7,r4
 200a1b4:	388d803a 	cmpltu	r6,r7,r2
 200a1b8:	4147c83a 	sub	r3,r8,r5
 200a1bc:	1989c83a 	sub	r4,r3,r6
 200a1c0:	2007883a 	mov	r3,r4
 200a1c4:	e0bfb115 	stw	r2,-316(fp)
 200a1c8:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 200a1cc:	00800b44 	movi	r2,45
 200a1d0:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 200a1d4:	00800044 	movi	r2,1
 200a1d8:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 200a1dc:	0001b706 	br	200a8bc <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 200a1e0:	9880020c 	andi	r2,r19,8
 200a1e4:	10000826 	beq	r2,zero,200a208 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 200a1e8:	e13fe917 	ldw	r4,-92(fp)
 200a1ec:	20800204 	addi	r2,r4,8
 200a1f0:	e0bfe915 	stw	r2,-92(fp)
 200a1f4:	20800017 	ldw	r2,0(r4)
 200a1f8:	20c00117 	ldw	r3,4(r4)
 200a1fc:	e0bfc215 	stw	r2,-248(fp)
 200a200:	e0ffc315 	stw	r3,-244(fp)
 200a204:	00000706 	br	200a224 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 200a208:	e13fe917 	ldw	r4,-92(fp)
 200a20c:	20800204 	addi	r2,r4,8
 200a210:	e0bfe915 	stw	r2,-92(fp)
 200a214:	20800017 	ldw	r2,0(r4)
 200a218:	20c00117 	ldw	r3,4(r4)
 200a21c:	e0bfc215 	stw	r2,-248(fp)
 200a220:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 200a224:	e0bfc217 	ldw	r2,-248(fp)
 200a228:	e0ffc317 	ldw	r3,-244(fp)
 200a22c:	1009883a 	mov	r4,r2
 200a230:	180b883a 	mov	r5,r3
 200a234:	2003ab80 	call	2003ab8 <__fpclassifyd>
 200a238:	10800058 	cmpnei	r2,r2,1
 200a23c:	1000161e 	bne	r2,zero,200a298 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 200a240:	e0bfc217 	ldw	r2,-248(fp)
 200a244:	e0ffc317 	ldw	r3,-244(fp)
 200a248:	000d883a 	mov	r6,zero
 200a24c:	000f883a 	mov	r7,zero
 200a250:	1009883a 	mov	r4,r2
 200a254:	180b883a 	mov	r5,r3
 200a258:	2007f600 	call	2007f60 <__ledf2>
 200a25c:	1000020e 	bge	r2,zero,200a268 <___vfprintf_internal_r+0x728>
					sign = '-';
 200a260:	00800b44 	movi	r2,45
 200a264:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 200a268:	a0801208 	cmpgei	r2,r20,72
 200a26c:	1000031e 	bne	r2,zero,200a27c <___vfprintf_internal_r+0x73c>
					cp = "INF";
 200a270:	048080b4 	movhi	r18,514
 200a274:	948a0404 	addi	r18,r18,10256
 200a278:	00000206 	br	200a284 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 200a27c:	048080b4 	movhi	r18,514
 200a280:	948a0504 	addi	r18,r18,10260
				size = 3;
 200a284:	008000c4 	movi	r2,3
 200a288:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 200a28c:	00bfdfc4 	movi	r2,-129
 200a290:	98a6703a 	and	r19,r19,r2
				break;
 200a294:	00021a06 	br	200ab00 <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 200a298:	e0bfc217 	ldw	r2,-248(fp)
 200a29c:	e0ffc317 	ldw	r3,-244(fp)
 200a2a0:	1009883a 	mov	r4,r2
 200a2a4:	180b883a 	mov	r5,r3
 200a2a8:	2003ab80 	call	2003ab8 <__fpclassifyd>
 200a2ac:	10000c1e 	bne	r2,zero,200a2e0 <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 200a2b0:	a0801208 	cmpgei	r2,r20,72
 200a2b4:	1000031e 	bne	r2,zero,200a2c4 <___vfprintf_internal_r+0x784>
					cp = "NAN";
 200a2b8:	048080b4 	movhi	r18,514
 200a2bc:	948a0604 	addi	r18,r18,10264
 200a2c0:	00000206 	br	200a2cc <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 200a2c4:	048080b4 	movhi	r18,514
 200a2c8:	948a0704 	addi	r18,r18,10268
				size = 3;
 200a2cc:	008000c4 	movi	r2,3
 200a2d0:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 200a2d4:	00bfdfc4 	movi	r2,-129
 200a2d8:	98a6703a 	and	r19,r19,r2
				break;
 200a2dc:	00020806 	br	200ab00 <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 200a2e0:	e0bfae17 	ldw	r2,-328(fp)
 200a2e4:	10bfffd8 	cmpnei	r2,r2,-1
 200a2e8:	1000031e 	bne	r2,zero,200a2f8 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 200a2ec:	00800184 	movi	r2,6
 200a2f0:	e0bfae15 	stw	r2,-328(fp)
 200a2f4:	00000806 	br	200a318 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 200a2f8:	a08019e0 	cmpeqi	r2,r20,103
 200a2fc:	1000021e 	bne	r2,zero,200a308 <___vfprintf_internal_r+0x7c8>
 200a300:	a08011d8 	cmpnei	r2,r20,71
 200a304:	1000041e 	bne	r2,zero,200a318 <___vfprintf_internal_r+0x7d8>
 200a308:	e0bfae17 	ldw	r2,-328(fp)
 200a30c:	1000021e 	bne	r2,zero,200a318 <___vfprintf_internal_r+0x7d8>
				prec = 1;
 200a310:	00800044 	movi	r2,1
 200a314:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 200a318:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 200a31c:	e0bfc217 	ldw	r2,-248(fp)
 200a320:	e0ffc317 	ldw	r3,-244(fp)
 200a324:	dc800515 	stw	r18,20(sp)
 200a328:	e13fc704 	addi	r4,fp,-228
 200a32c:	d9000415 	stw	r4,16(sp)
 200a330:	dd000315 	stw	r20,12(sp)
 200a334:	e13fc404 	addi	r4,fp,-240
 200a338:	d9000215 	stw	r4,8(sp)
 200a33c:	e13fc144 	addi	r4,fp,-251
 200a340:	d9000115 	stw	r4,4(sp)
 200a344:	dcc00015 	stw	r19,0(sp)
 200a348:	e1ffae17 	ldw	r7,-328(fp)
 200a34c:	100b883a 	mov	r5,r2
 200a350:	180d883a 	mov	r6,r3
 200a354:	e13fe617 	ldw	r4,-104(fp)
 200a358:	200bc100 	call	200bc10 <cvt>
 200a35c:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 200a360:	a08019e0 	cmpeqi	r2,r20,103
 200a364:	1000021e 	bne	r2,zero,200a370 <___vfprintf_internal_r+0x830>
 200a368:	a08011d8 	cmpnei	r2,r20,71
 200a36c:	1000091e 	bne	r2,zero,200a394 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 200a370:	e0bfc417 	ldw	r2,-240(fp)
 200a374:	10bfff50 	cmplti	r2,r2,-3
 200a378:	1000031e 	bne	r2,zero,200a388 <___vfprintf_internal_r+0x848>
 200a37c:	e0bfc417 	ldw	r2,-240(fp)
 200a380:	e0ffae17 	ldw	r3,-328(fp)
 200a384:	1880020e 	bge	r3,r2,200a390 <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 200a388:	a53fff84 	addi	r20,r20,-2
 200a38c:	00000106 	br	200a394 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 200a390:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 200a394:	a0801988 	cmpgei	r2,r20,102
 200a398:	1000171e 	bne	r2,zero,200a3f8 <___vfprintf_internal_r+0x8b8>
				--expt;
 200a39c:	e0bfc417 	ldw	r2,-240(fp)
 200a3a0:	10bfffc4 	addi	r2,r2,-1
 200a3a4:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 200a3a8:	e0bfc417 	ldw	r2,-240(fp)
 200a3ac:	e0ffc504 	addi	r3,fp,-236
 200a3b0:	a00d883a 	mov	r6,r20
 200a3b4:	100b883a 	mov	r5,r2
 200a3b8:	1809883a 	mov	r4,r3
 200a3bc:	200be1c0 	call	200be1c <exponent>
 200a3c0:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 200a3c4:	e0bfc717 	ldw	r2,-228(fp)
 200a3c8:	e0ffaf17 	ldw	r3,-324(fp)
 200a3cc:	1885883a 	add	r2,r3,r2
 200a3d0:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 200a3d4:	e0bfc717 	ldw	r2,-228(fp)
 200a3d8:	10800088 	cmpgei	r2,r2,2
 200a3dc:	1000021e 	bne	r2,zero,200a3e8 <___vfprintf_internal_r+0x8a8>
 200a3e0:	9880004c 	andi	r2,r19,1
 200a3e4:	10003526 	beq	r2,zero,200a4bc <___vfprintf_internal_r+0x97c>
					++size;
 200a3e8:	e0bfb617 	ldw	r2,-296(fp)
 200a3ec:	10800044 	addi	r2,r2,1
 200a3f0:	e0bfb615 	stw	r2,-296(fp)
 200a3f4:	00003106 	br	200a4bc <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 200a3f8:	a0801998 	cmpnei	r2,r20,102
 200a3fc:	1000181e 	bne	r2,zero,200a460 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 200a400:	e0bfc417 	ldw	r2,-240(fp)
 200a404:	00800c0e 	bge	zero,r2,200a438 <___vfprintf_internal_r+0x8f8>
						size = expt;
 200a408:	e0bfc417 	ldw	r2,-240(fp)
 200a40c:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 200a410:	e0bfae17 	ldw	r2,-328(fp)
 200a414:	1000021e 	bne	r2,zero,200a420 <___vfprintf_internal_r+0x8e0>
 200a418:	9880004c 	andi	r2,r19,1
 200a41c:	10002526 	beq	r2,zero,200a4b4 <___vfprintf_internal_r+0x974>
							size += prec + 1;
 200a420:	e0bfae17 	ldw	r2,-328(fp)
 200a424:	10800044 	addi	r2,r2,1
 200a428:	e0ffb617 	ldw	r3,-296(fp)
 200a42c:	1885883a 	add	r2,r3,r2
 200a430:	e0bfb615 	stw	r2,-296(fp)
 200a434:	00001f06 	br	200a4b4 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 200a438:	e0bfae17 	ldw	r2,-328(fp)
 200a43c:	1000021e 	bne	r2,zero,200a448 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 200a440:	9880004c 	andi	r2,r19,1
 200a444:	10000326 	beq	r2,zero,200a454 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 200a448:	e0bfae17 	ldw	r2,-328(fp)
 200a44c:	10800084 	addi	r2,r2,2
 200a450:	00000106 	br	200a458 <___vfprintf_internal_r+0x918>
 200a454:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 200a458:	e0bfb615 	stw	r2,-296(fp)
 200a45c:	00001506 	br	200a4b4 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 200a460:	e0ffc417 	ldw	r3,-240(fp)
 200a464:	e0bfc717 	ldw	r2,-228(fp)
 200a468:	18800816 	blt	r3,r2,200a48c <___vfprintf_internal_r+0x94c>
					size = expt;
 200a46c:	e0bfc417 	ldw	r2,-240(fp)
 200a470:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 200a474:	9880004c 	andi	r2,r19,1
 200a478:	10000e26 	beq	r2,zero,200a4b4 <___vfprintf_internal_r+0x974>
						++size;
 200a47c:	e0bfb617 	ldw	r2,-296(fp)
 200a480:	10800044 	addi	r2,r2,1
 200a484:	e0bfb615 	stw	r2,-296(fp)
 200a488:	00000a06 	br	200a4b4 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 200a48c:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 200a490:	00800416 	blt	zero,r2,200a4a4 <___vfprintf_internal_r+0x964>
 200a494:	e0bfc417 	ldw	r2,-240(fp)
 200a498:	00c00084 	movi	r3,2
 200a49c:	1885c83a 	sub	r2,r3,r2
 200a4a0:	00000106 	br	200a4a8 <___vfprintf_internal_r+0x968>
 200a4a4:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 200a4a8:	e0ffc717 	ldw	r3,-228(fp)
 200a4ac:	10c5883a 	add	r2,r2,r3
 200a4b0:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 200a4b4:	e0bfc417 	ldw	r2,-240(fp)
 200a4b8:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 200a4bc:	e0bfc143 	ldbu	r2,-251(fp)
 200a4c0:	10803fcc 	andi	r2,r2,255
 200a4c4:	1080201c 	xori	r2,r2,128
 200a4c8:	10bfe004 	addi	r2,r2,-128
 200a4cc:	10018b26 	beq	r2,zero,200aafc <___vfprintf_internal_r+0xfbc>
				sign = '-';
 200a4d0:	00800b44 	movi	r2,45
 200a4d4:	e0bfc105 	stb	r2,-252(fp)
			break;
 200a4d8:	00018806 	br	200aafc <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 200a4dc:	9880080c 	andi	r2,r19,32
 200a4e0:	10000d26 	beq	r2,zero,200a518 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 200a4e4:	e0bfe917 	ldw	r2,-92(fp)
 200a4e8:	10c00104 	addi	r3,r2,4
 200a4ec:	e0ffe915 	stw	r3,-92(fp)
 200a4f0:	10800017 	ldw	r2,0(r2)
 200a4f4:	e0ffac17 	ldw	r3,-336(fp)
 200a4f8:	e0fff015 	stw	r3,-64(fp)
 200a4fc:	1807d7fa 	srai	r3,r3,31
 200a500:	e0fff115 	stw	r3,-60(fp)
 200a504:	e0fff017 	ldw	r3,-64(fp)
 200a508:	10c00015 	stw	r3,0(r2)
 200a50c:	e0fff117 	ldw	r3,-60(fp)
 200a510:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200a514:	00054b06 	br	200ba44 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200a518:	9880040c 	andi	r2,r19,16
 200a51c:	10000726 	beq	r2,zero,200a53c <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200a520:	e0bfe917 	ldw	r2,-92(fp)
 200a524:	10c00104 	addi	r3,r2,4
 200a528:	e0ffe915 	stw	r3,-92(fp)
 200a52c:	10800017 	ldw	r2,0(r2)
 200a530:	e0ffac17 	ldw	r3,-336(fp)
 200a534:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200a538:	00054206 	br	200ba44 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 200a53c:	9880100c 	andi	r2,r19,64
 200a540:	10000726 	beq	r2,zero,200a560 <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 200a544:	e0bfe917 	ldw	r2,-92(fp)
 200a548:	10c00104 	addi	r3,r2,4
 200a54c:	e0ffe915 	stw	r3,-92(fp)
 200a550:	10800017 	ldw	r2,0(r2)
 200a554:	e0ffac17 	ldw	r3,-336(fp)
 200a558:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200a55c:	00053906 	br	200ba44 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200a560:	e0bfe917 	ldw	r2,-92(fp)
 200a564:	10c00104 	addi	r3,r2,4
 200a568:	e0ffe915 	stw	r3,-92(fp)
 200a56c:	10800017 	ldw	r2,0(r2)
 200a570:	e0ffac17 	ldw	r3,-336(fp)
 200a574:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200a578:	00053206 	br	200ba44 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 200a57c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 200a580:	9880080c 	andi	r2,r19,32
 200a584:	10000626 	beq	r2,zero,200a5a0 <___vfprintf_internal_r+0xa60>
 200a588:	e0bfe917 	ldw	r2,-92(fp)
 200a58c:	10c00204 	addi	r3,r2,8
 200a590:	e0ffe915 	stw	r3,-92(fp)
 200a594:	15800017 	ldw	r22,0(r2)
 200a598:	15c00117 	ldw	r23,4(r2)
 200a59c:	00001c06 	br	200a610 <___vfprintf_internal_r+0xad0>
 200a5a0:	9880040c 	andi	r2,r19,16
 200a5a4:	10000726 	beq	r2,zero,200a5c4 <___vfprintf_internal_r+0xa84>
 200a5a8:	e0bfe917 	ldw	r2,-92(fp)
 200a5ac:	10c00104 	addi	r3,r2,4
 200a5b0:	e0ffe915 	stw	r3,-92(fp)
 200a5b4:	10800017 	ldw	r2,0(r2)
 200a5b8:	102d883a 	mov	r22,r2
 200a5bc:	002f883a 	mov	r23,zero
 200a5c0:	00001306 	br	200a610 <___vfprintf_internal_r+0xad0>
 200a5c4:	9880100c 	andi	r2,r19,64
 200a5c8:	10000b26 	beq	r2,zero,200a5f8 <___vfprintf_internal_r+0xab8>
 200a5cc:	e0bfe917 	ldw	r2,-92(fp)
 200a5d0:	10c00104 	addi	r3,r2,4
 200a5d4:	e0ffe915 	stw	r3,-92(fp)
 200a5d8:	10800017 	ldw	r2,0(r2)
 200a5dc:	e0bff215 	stw	r2,-56(fp)
 200a5e0:	e03ff315 	stw	zero,-52(fp)
 200a5e4:	e0bff217 	ldw	r2,-56(fp)
 200a5e8:	15bfffcc 	andi	r22,r2,65535
 200a5ec:	e0fff317 	ldw	r3,-52(fp)
 200a5f0:	182e703a 	and	r23,r3,zero
 200a5f4:	00000606 	br	200a610 <___vfprintf_internal_r+0xad0>
 200a5f8:	e0bfe917 	ldw	r2,-92(fp)
 200a5fc:	10c00104 	addi	r3,r2,4
 200a600:	e0ffe915 	stw	r3,-92(fp)
 200a604:	10800017 	ldw	r2,0(r2)
 200a608:	102d883a 	mov	r22,r2
 200a60c:	002f883a 	mov	r23,zero
 200a610:	e5bfb115 	stw	r22,-316(fp)
 200a614:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 200a618:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 200a61c:	0000a606 	br	200a8b8 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200a620:	e0bfe917 	ldw	r2,-92(fp)
 200a624:	10c00104 	addi	r3,r2,4
 200a628:	e0ffe915 	stw	r3,-92(fp)
 200a62c:	10800017 	ldw	r2,0(r2)
 200a630:	e0bfb115 	stw	r2,-316(fp)
 200a634:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 200a638:	00800084 	movi	r2,2
 200a63c:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 200a640:	008080b4 	movhi	r2,514
 200a644:	108a0804 	addi	r2,r2,10272
 200a648:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 200a64c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200a650:	00800c04 	movi	r2,48
 200a654:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200a658:	05001e04 	movi	r20,120
 200a65c:	00801e04 	movi	r2,120
 200a660:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 200a664:	00009406 	br	200a8b8 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200a668:	e0bfe917 	ldw	r2,-92(fp)
 200a66c:	10c00104 	addi	r3,r2,4
 200a670:	e0ffe915 	stw	r3,-92(fp)
 200a674:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200a678:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 200a67c:	9000081e 	bne	r18,zero,200a6a0 <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 200a680:	048080b4 	movhi	r18,514
 200a684:	948a0d04 	addi	r18,r18,10292
				size = ((unsigned) prec > 6U) ? 6 : prec;
 200a688:	e0bfae17 	ldw	r2,-328(fp)
 200a68c:	10c001f0 	cmpltui	r3,r2,7
 200a690:	1800011e 	bne	r3,zero,200a698 <___vfprintf_internal_r+0xb58>
 200a694:	00800184 	movi	r2,6
 200a698:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200a69c:	00011806 	br	200ab00 <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 200a6a0:	e0bfae17 	ldw	r2,-328(fp)
 200a6a4:	10001016 	blt	r2,zero,200a6e8 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 200a6a8:	e0bfae17 	ldw	r2,-328(fp)
 200a6ac:	100d883a 	mov	r6,r2
 200a6b0:	000b883a 	mov	r5,zero
 200a6b4:	9009883a 	mov	r4,r18
 200a6b8:	2010b880 	call	2010b88 <memchr>
 200a6bc:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 200a6c0:	e0bfbf17 	ldw	r2,-260(fp)
 200a6c4:	10000526 	beq	r2,zero,200a6dc <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 200a6c8:	e0bfbf17 	ldw	r2,-260(fp)
 200a6cc:	9007883a 	mov	r3,r18
 200a6d0:	10c5c83a 	sub	r2,r2,r3
 200a6d4:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200a6d8:	00010906 	br	200ab00 <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 200a6dc:	e0bfae17 	ldw	r2,-328(fp)
 200a6e0:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 200a6e4:	00010606 	br	200ab00 <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 200a6e8:	9009883a 	mov	r4,r18
 200a6ec:	200990c0 	call	200990c <strlen>
 200a6f0:	e0bfb615 	stw	r2,-296(fp)

			break;
 200a6f4:	00010206 	br	200ab00 <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 200a6f8:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 200a6fc:	9880080c 	andi	r2,r19,32
 200a700:	10000826 	beq	r2,zero,200a724 <___vfprintf_internal_r+0xbe4>
 200a704:	e0bfe917 	ldw	r2,-92(fp)
 200a708:	10c00204 	addi	r3,r2,8
 200a70c:	e0ffe915 	stw	r3,-92(fp)
 200a710:	10c00017 	ldw	r3,0(r2)
 200a714:	e0ffec15 	stw	r3,-80(fp)
 200a718:	10c00117 	ldw	r3,4(r2)
 200a71c:	e0ffed15 	stw	r3,-76(fp)
 200a720:	00001e06 	br	200a79c <___vfprintf_internal_r+0xc5c>
 200a724:	9880040c 	andi	r2,r19,16
 200a728:	10000726 	beq	r2,zero,200a748 <___vfprintf_internal_r+0xc08>
 200a72c:	e0bfe917 	ldw	r2,-92(fp)
 200a730:	10c00104 	addi	r3,r2,4
 200a734:	e0ffe915 	stw	r3,-92(fp)
 200a738:	10800017 	ldw	r2,0(r2)
 200a73c:	e0bfec15 	stw	r2,-80(fp)
 200a740:	e03fed15 	stw	zero,-76(fp)
 200a744:	00001506 	br	200a79c <___vfprintf_internal_r+0xc5c>
 200a748:	9880100c 	andi	r2,r19,64
 200a74c:	10000d26 	beq	r2,zero,200a784 <___vfprintf_internal_r+0xc44>
 200a750:	e0bfe917 	ldw	r2,-92(fp)
 200a754:	10c00104 	addi	r3,r2,4
 200a758:	e0ffe915 	stw	r3,-92(fp)
 200a75c:	10800017 	ldw	r2,0(r2)
 200a760:	e0bff415 	stw	r2,-48(fp)
 200a764:	e03ff515 	stw	zero,-44(fp)
 200a768:	e0bff417 	ldw	r2,-48(fp)
 200a76c:	10bfffcc 	andi	r2,r2,65535
 200a770:	e0bfec15 	stw	r2,-80(fp)
 200a774:	e0fff517 	ldw	r3,-44(fp)
 200a778:	1806703a 	and	r3,r3,zero
 200a77c:	e0ffed15 	stw	r3,-76(fp)
 200a780:	00000606 	br	200a79c <___vfprintf_internal_r+0xc5c>
 200a784:	e0bfe917 	ldw	r2,-92(fp)
 200a788:	10c00104 	addi	r3,r2,4
 200a78c:	e0ffe915 	stw	r3,-92(fp)
 200a790:	10800017 	ldw	r2,0(r2)
 200a794:	e0bfec15 	stw	r2,-80(fp)
 200a798:	e03fed15 	stw	zero,-76(fp)
 200a79c:	e0bfec17 	ldw	r2,-80(fp)
 200a7a0:	e0bfb115 	stw	r2,-316(fp)
 200a7a4:	e0ffed17 	ldw	r3,-76(fp)
 200a7a8:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 200a7ac:	00800044 	movi	r2,1
 200a7b0:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 200a7b4:	00004006 	br	200a8b8 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 200a7b8:	008080b4 	movhi	r2,514
 200a7bc:	108a0f04 	addi	r2,r2,10300
 200a7c0:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 200a7c4:	00000306 	br	200a7d4 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 200a7c8:	008080b4 	movhi	r2,514
 200a7cc:	108a0804 	addi	r2,r2,10272
 200a7d0:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 200a7d4:	9880080c 	andi	r2,r19,32
 200a7d8:	10000826 	beq	r2,zero,200a7fc <___vfprintf_internal_r+0xcbc>
 200a7dc:	e0bfe917 	ldw	r2,-92(fp)
 200a7e0:	10c00204 	addi	r3,r2,8
 200a7e4:	e0ffe915 	stw	r3,-92(fp)
 200a7e8:	10c00017 	ldw	r3,0(r2)
 200a7ec:	e0ffee15 	stw	r3,-72(fp)
 200a7f0:	10c00117 	ldw	r3,4(r2)
 200a7f4:	e0ffef15 	stw	r3,-68(fp)
 200a7f8:	00001e06 	br	200a874 <___vfprintf_internal_r+0xd34>
 200a7fc:	9880040c 	andi	r2,r19,16
 200a800:	10000726 	beq	r2,zero,200a820 <___vfprintf_internal_r+0xce0>
 200a804:	e0bfe917 	ldw	r2,-92(fp)
 200a808:	10c00104 	addi	r3,r2,4
 200a80c:	e0ffe915 	stw	r3,-92(fp)
 200a810:	10800017 	ldw	r2,0(r2)
 200a814:	e0bfee15 	stw	r2,-72(fp)
 200a818:	e03fef15 	stw	zero,-68(fp)
 200a81c:	00001506 	br	200a874 <___vfprintf_internal_r+0xd34>
 200a820:	9880100c 	andi	r2,r19,64
 200a824:	10000d26 	beq	r2,zero,200a85c <___vfprintf_internal_r+0xd1c>
 200a828:	e0bfe917 	ldw	r2,-92(fp)
 200a82c:	10c00104 	addi	r3,r2,4
 200a830:	e0ffe915 	stw	r3,-92(fp)
 200a834:	10800017 	ldw	r2,0(r2)
 200a838:	e0bff615 	stw	r2,-40(fp)
 200a83c:	e03ff715 	stw	zero,-36(fp)
 200a840:	e0bff617 	ldw	r2,-40(fp)
 200a844:	10bfffcc 	andi	r2,r2,65535
 200a848:	e0bfee15 	stw	r2,-72(fp)
 200a84c:	e0fff717 	ldw	r3,-36(fp)
 200a850:	1806703a 	and	r3,r3,zero
 200a854:	e0ffef15 	stw	r3,-68(fp)
 200a858:	00000606 	br	200a874 <___vfprintf_internal_r+0xd34>
 200a85c:	e0bfe917 	ldw	r2,-92(fp)
 200a860:	10c00104 	addi	r3,r2,4
 200a864:	e0ffe915 	stw	r3,-92(fp)
 200a868:	10800017 	ldw	r2,0(r2)
 200a86c:	e0bfee15 	stw	r2,-72(fp)
 200a870:	e03fef15 	stw	zero,-68(fp)
 200a874:	e0bfee17 	ldw	r2,-72(fp)
 200a878:	e0bfb115 	stw	r2,-316(fp)
 200a87c:	e0ffef17 	ldw	r3,-68(fp)
 200a880:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 200a884:	00800084 	movi	r2,2
 200a888:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 200a88c:	9880004c 	andi	r2,r19,1
 200a890:	10000926 	beq	r2,zero,200a8b8 <___vfprintf_internal_r+0xd78>
 200a894:	e0bfb117 	ldw	r2,-316(fp)
 200a898:	e0ffb217 	ldw	r3,-312(fp)
 200a89c:	10c4b03a 	or	r2,r2,r3
 200a8a0:	10000526 	beq	r2,zero,200a8b8 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 200a8a4:	00800c04 	movi	r2,48
 200a8a8:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200a8ac:	a005883a 	mov	r2,r20
 200a8b0:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200a8b4:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 200a8b8:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200a8bc:	e0bfae17 	ldw	r2,-328(fp)
 200a8c0:	e0bfb415 	stw	r2,-304(fp)
 200a8c4:	e0bfb417 	ldw	r2,-304(fp)
 200a8c8:	10000216 	blt	r2,zero,200a8d4 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 200a8cc:	00bfdfc4 	movi	r2,-129
 200a8d0:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200a8d4:	e4bfdb04 	addi	r18,fp,-148
 200a8d8:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 200a8dc:	e0bfb117 	ldw	r2,-316(fp)
 200a8e0:	e0ffb217 	ldw	r3,-312(fp)
 200a8e4:	10c4b03a 	or	r2,r2,r3
 200a8e8:	1000021e 	bne	r2,zero,200a8f4 <___vfprintf_internal_r+0xdb4>
 200a8ec:	e0bfae17 	ldw	r2,-328(fp)
 200a8f0:	10006c26 	beq	r2,zero,200aaa4 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 200a8f4:	e0bfb303 	ldbu	r2,-308(fp)
 200a8f8:	10c00060 	cmpeqi	r3,r2,1
 200a8fc:	1800211e 	bne	r3,zero,200a984 <___vfprintf_internal_r+0xe44>
 200a900:	10c000a0 	cmpeqi	r3,r2,2
 200a904:	1800491e 	bne	r3,zero,200aa2c <___vfprintf_internal_r+0xeec>
 200a908:	10005d1e 	bne	r2,zero,200aa80 <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200a90c:	94bfffc4 	addi	r18,r18,-1
 200a910:	e0bfb117 	ldw	r2,-316(fp)
 200a914:	108001cc 	andi	r2,r2,7
 200a918:	10800c04 	addi	r2,r2,48
 200a91c:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 200a920:	e0bfb217 	ldw	r2,-312(fp)
 200a924:	1004977a 	slli	r2,r2,29
 200a928:	e0ffb117 	ldw	r3,-316(fp)
 200a92c:	1806d0fa 	srli	r3,r3,3
 200a930:	1884b03a 	or	r2,r3,r2
 200a934:	e0bfb115 	stw	r2,-316(fp)
 200a938:	e0bfb217 	ldw	r2,-312(fp)
 200a93c:	1004d0fa 	srli	r2,r2,3
 200a940:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 200a944:	e0bfb117 	ldw	r2,-316(fp)
 200a948:	e0ffb217 	ldw	r3,-312(fp)
 200a94c:	10c4b03a 	or	r2,r2,r3
 200a950:	103fee1e 	bne	r2,zero,200a90c <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200a954:	9880004c 	andi	r2,r19,1
 200a958:	10005026 	beq	r2,zero,200aa9c <___vfprintf_internal_r+0xf5c>
 200a95c:	90800003 	ldbu	r2,0(r18)
 200a960:	10803fcc 	andi	r2,r2,255
 200a964:	1080201c 	xori	r2,r2,128
 200a968:	10bfe004 	addi	r2,r2,-128
 200a96c:	10800c20 	cmpeqi	r2,r2,48
 200a970:	10004a1e 	bne	r2,zero,200aa9c <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 200a974:	94bfffc4 	addi	r18,r18,-1
 200a978:	00800c04 	movi	r2,48
 200a97c:	90800005 	stb	r2,0(r18)
					break;
 200a980:	00004606 	br	200aa9c <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 200a984:	e0bfb217 	ldw	r2,-312(fp)
 200a988:	10000a1e 	bne	r2,zero,200a9b4 <___vfprintf_internal_r+0xe74>
 200a98c:	e0bfb217 	ldw	r2,-312(fp)
 200a990:	1000031e 	bne	r2,zero,200a9a0 <___vfprintf_internal_r+0xe60>
 200a994:	e0bfb117 	ldw	r2,-316(fp)
 200a998:	108002a8 	cmpgeui	r2,r2,10
 200a99c:	1000051e 	bne	r2,zero,200a9b4 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 200a9a0:	94bfffc4 	addi	r18,r18,-1
 200a9a4:	e0bfb117 	ldw	r2,-316(fp)
 200a9a8:	10800c04 	addi	r2,r2,48
 200a9ac:	90800005 	stb	r2,0(r18)
						break;
 200a9b0:	00003b06 	br	200aaa0 <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 200a9b4:	94bfffc4 	addi	r18,r18,-1
 200a9b8:	e0bfb117 	ldw	r2,-316(fp)
 200a9bc:	e0ffb217 	ldw	r3,-312(fp)
 200a9c0:	01800284 	movi	r6,10
 200a9c4:	000f883a 	mov	r7,zero
 200a9c8:	1009883a 	mov	r4,r2
 200a9cc:	180b883a 	mov	r5,r3
 200a9d0:	20160d40 	call	20160d4 <__umoddi3>
 200a9d4:	1009883a 	mov	r4,r2
 200a9d8:	180b883a 	mov	r5,r3
 200a9dc:	2005883a 	mov	r2,r4
 200a9e0:	2807883a 	mov	r3,r5
 200a9e4:	10800c04 	addi	r2,r2,48
 200a9e8:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200a9ec:	e0bfb117 	ldw	r2,-316(fp)
 200a9f0:	e0ffb217 	ldw	r3,-312(fp)
 200a9f4:	01800284 	movi	r6,10
 200a9f8:	000f883a 	mov	r7,zero
 200a9fc:	1009883a 	mov	r4,r2
 200aa00:	180b883a 	mov	r5,r3
 200aa04:	2015b5c0 	call	2015b5c <__udivdi3>
 200aa08:	1009883a 	mov	r4,r2
 200aa0c:	180b883a 	mov	r5,r3
 200aa10:	e13fb115 	stw	r4,-316(fp)
 200aa14:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 200aa18:	e0bfb117 	ldw	r2,-316(fp)
 200aa1c:	e0ffb217 	ldw	r3,-312(fp)
 200aa20:	10c4b03a 	or	r2,r2,r3
 200aa24:	103fe31e 	bne	r2,zero,200a9b4 <___vfprintf_internal_r+0xe74>
					break;
 200aa28:	00001d06 	br	200aaa0 <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200aa2c:	94bfffc4 	addi	r18,r18,-1
 200aa30:	e0bfb117 	ldw	r2,-316(fp)
 200aa34:	108003cc 	andi	r2,r2,15
 200aa38:	e0ffb717 	ldw	r3,-292(fp)
 200aa3c:	1885883a 	add	r2,r3,r2
 200aa40:	10800003 	ldbu	r2,0(r2)
 200aa44:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 200aa48:	e0bfb217 	ldw	r2,-312(fp)
 200aa4c:	1004973a 	slli	r2,r2,28
 200aa50:	e0ffb117 	ldw	r3,-316(fp)
 200aa54:	1806d13a 	srli	r3,r3,4
 200aa58:	1884b03a 	or	r2,r3,r2
 200aa5c:	e0bfb115 	stw	r2,-316(fp)
 200aa60:	e0bfb217 	ldw	r2,-312(fp)
 200aa64:	1004d13a 	srli	r2,r2,4
 200aa68:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 200aa6c:	e0bfb117 	ldw	r2,-316(fp)
 200aa70:	e0ffb217 	ldw	r3,-312(fp)
 200aa74:	10c4b03a 	or	r2,r2,r3
 200aa78:	103fec1e 	bne	r2,zero,200aa2c <___vfprintf_internal_r+0xeec>
					break;
 200aa7c:	00000806 	br	200aaa0 <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 200aa80:	048080b4 	movhi	r18,514
 200aa84:	948a1404 	addi	r18,r18,10320
					size = strlen (cp);
 200aa88:	9009883a 	mov	r4,r18
 200aa8c:	200990c0 	call	200990c <strlen>
 200aa90:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 200aa94:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 200aa98:	00001906 	br	200ab00 <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 200aa9c:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 200aaa0:	00000706 	br	200aac0 <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200aaa4:	e0bfb303 	ldbu	r2,-308(fp)
 200aaa8:	1000051e 	bne	r2,zero,200aac0 <___vfprintf_internal_r+0xf80>
 200aaac:	9880004c 	andi	r2,r19,1
 200aab0:	10000326 	beq	r2,zero,200aac0 <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 200aab4:	94bfffc4 	addi	r18,r18,-1
 200aab8:	00800c04 	movi	r2,48
 200aabc:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 200aac0:	e0bfdb04 	addi	r2,fp,-148
 200aac4:	10800a04 	addi	r2,r2,40
 200aac8:	1007883a 	mov	r3,r2
 200aacc:	9005883a 	mov	r2,r18
 200aad0:	1885c83a 	sub	r2,r3,r2
 200aad4:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 200aad8:	00000906 	br	200ab00 <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 200aadc:	a003dc26 	beq	r20,zero,200ba50 <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 200aae0:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 200aae4:	a005883a 	mov	r2,r20
 200aae8:	90800005 	stb	r2,0(r18)
			size = 1;
 200aaec:	00800044 	movi	r2,1
 200aaf0:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 200aaf4:	e03fc105 	stb	zero,-252(fp)
			break;
 200aaf8:	00000106 	br	200ab00 <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 200aafc:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 200ab00:	e0ffb417 	ldw	r3,-304(fp)
 200ab04:	e0bfb617 	ldw	r2,-296(fp)
 200ab08:	10c0010e 	bge	r2,r3,200ab10 <___vfprintf_internal_r+0xfd0>
 200ab0c:	1805883a 	mov	r2,r3
 200ab10:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 200ab14:	e0bfc103 	ldbu	r2,-252(fp)
 200ab18:	10803fcc 	andi	r2,r2,255
 200ab1c:	1080201c 	xori	r2,r2,128
 200ab20:	10bfe004 	addi	r2,r2,-128
 200ab24:	10000326 	beq	r2,zero,200ab34 <___vfprintf_internal_r+0xff4>
			realsz++;
 200ab28:	e0bfb517 	ldw	r2,-300(fp)
 200ab2c:	10800044 	addi	r2,r2,1
 200ab30:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 200ab34:	9880008c 	andi	r2,r19,2
 200ab38:	10000326 	beq	r2,zero,200ab48 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 200ab3c:	e0bfb517 	ldw	r2,-300(fp)
 200ab40:	10800084 	addi	r2,r2,2
 200ab44:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 200ab48:	9880210c 	andi	r2,r19,132
 200ab4c:	1000351e 	bne	r2,zero,200ac24 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 200ab50:	e0ffad17 	ldw	r3,-332(fp)
 200ab54:	e0bfb517 	ldw	r2,-300(fp)
 200ab58:	18a1c83a 	sub	r16,r3,r2
 200ab5c:	0400310e 	bge	zero,r16,200ac24 <___vfprintf_internal_r+0x10e4>
 200ab60:	00001706 	br	200abc0 <___vfprintf_internal_r+0x1080>
 200ab64:	008080b4 	movhi	r2,514
 200ab68:	108a1b84 	addi	r2,r2,10350
 200ab6c:	88800015 	stw	r2,0(r17)
 200ab70:	00800404 	movi	r2,16
 200ab74:	88800115 	stw	r2,4(r17)
 200ab78:	e0bfca17 	ldw	r2,-216(fp)
 200ab7c:	10800404 	addi	r2,r2,16
 200ab80:	e0bfca15 	stw	r2,-216(fp)
 200ab84:	8c400204 	addi	r17,r17,8
 200ab88:	e0bfc917 	ldw	r2,-220(fp)
 200ab8c:	10800044 	addi	r2,r2,1
 200ab90:	e0bfc915 	stw	r2,-220(fp)
 200ab94:	e0bfc917 	ldw	r2,-220(fp)
 200ab98:	10800210 	cmplti	r2,r2,8
 200ab9c:	1000071e 	bne	r2,zero,200abbc <___vfprintf_internal_r+0x107c>
 200aba0:	e0bfc804 	addi	r2,fp,-224
 200aba4:	100d883a 	mov	r6,r2
 200aba8:	e17fe717 	ldw	r5,-100(fp)
 200abac:	e13fe617 	ldw	r4,-104(fp)
 200abb0:	20139c80 	call	20139c8 <__sprint_r>
 200abb4:	1003b41e 	bne	r2,zero,200ba88 <___vfprintf_internal_r+0x1f48>
 200abb8:	e47fcb04 	addi	r17,fp,-212
 200abbc:	843ffc04 	addi	r16,r16,-16
 200abc0:	80800448 	cmpgei	r2,r16,17
 200abc4:	103fe71e 	bne	r2,zero,200ab64 <___vfprintf_internal_r+0x1024>
 200abc8:	008080b4 	movhi	r2,514
 200abcc:	108a1b84 	addi	r2,r2,10350
 200abd0:	88800015 	stw	r2,0(r17)
 200abd4:	8005883a 	mov	r2,r16
 200abd8:	88800115 	stw	r2,4(r17)
 200abdc:	e0bfca17 	ldw	r2,-216(fp)
 200abe0:	8007883a 	mov	r3,r16
 200abe4:	10c5883a 	add	r2,r2,r3
 200abe8:	e0bfca15 	stw	r2,-216(fp)
 200abec:	8c400204 	addi	r17,r17,8
 200abf0:	e0bfc917 	ldw	r2,-220(fp)
 200abf4:	10800044 	addi	r2,r2,1
 200abf8:	e0bfc915 	stw	r2,-220(fp)
 200abfc:	e0bfc917 	ldw	r2,-220(fp)
 200ac00:	10800210 	cmplti	r2,r2,8
 200ac04:	1000071e 	bne	r2,zero,200ac24 <___vfprintf_internal_r+0x10e4>
 200ac08:	e0bfc804 	addi	r2,fp,-224
 200ac0c:	100d883a 	mov	r6,r2
 200ac10:	e17fe717 	ldw	r5,-100(fp)
 200ac14:	e13fe617 	ldw	r4,-104(fp)
 200ac18:	20139c80 	call	20139c8 <__sprint_r>
 200ac1c:	10039c1e 	bne	r2,zero,200ba90 <___vfprintf_internal_r+0x1f50>
 200ac20:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 200ac24:	e0bfc103 	ldbu	r2,-252(fp)
 200ac28:	10803fcc 	andi	r2,r2,255
 200ac2c:	1080201c 	xori	r2,r2,128
 200ac30:	10bfe004 	addi	r2,r2,-128
 200ac34:	10001526 	beq	r2,zero,200ac8c <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 200ac38:	e0bfc104 	addi	r2,fp,-252
 200ac3c:	88800015 	stw	r2,0(r17)
 200ac40:	00800044 	movi	r2,1
 200ac44:	88800115 	stw	r2,4(r17)
 200ac48:	e0bfca17 	ldw	r2,-216(fp)
 200ac4c:	10800044 	addi	r2,r2,1
 200ac50:	e0bfca15 	stw	r2,-216(fp)
 200ac54:	8c400204 	addi	r17,r17,8
 200ac58:	e0bfc917 	ldw	r2,-220(fp)
 200ac5c:	10800044 	addi	r2,r2,1
 200ac60:	e0bfc915 	stw	r2,-220(fp)
 200ac64:	e0bfc917 	ldw	r2,-220(fp)
 200ac68:	10800210 	cmplti	r2,r2,8
 200ac6c:	1000071e 	bne	r2,zero,200ac8c <___vfprintf_internal_r+0x114c>
 200ac70:	e0bfc804 	addi	r2,fp,-224
 200ac74:	100d883a 	mov	r6,r2
 200ac78:	e17fe717 	ldw	r5,-100(fp)
 200ac7c:	e13fe617 	ldw	r4,-104(fp)
 200ac80:	20139c80 	call	20139c8 <__sprint_r>
 200ac84:	1003841e 	bne	r2,zero,200ba98 <___vfprintf_internal_r+0x1f58>
 200ac88:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 200ac8c:	9880008c 	andi	r2,r19,2
 200ac90:	10001526 	beq	r2,zero,200ace8 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 200ac94:	e0bfe504 	addi	r2,fp,-108
 200ac98:	88800015 	stw	r2,0(r17)
 200ac9c:	00800084 	movi	r2,2
 200aca0:	88800115 	stw	r2,4(r17)
 200aca4:	e0bfca17 	ldw	r2,-216(fp)
 200aca8:	10800084 	addi	r2,r2,2
 200acac:	e0bfca15 	stw	r2,-216(fp)
 200acb0:	8c400204 	addi	r17,r17,8
 200acb4:	e0bfc917 	ldw	r2,-220(fp)
 200acb8:	10800044 	addi	r2,r2,1
 200acbc:	e0bfc915 	stw	r2,-220(fp)
 200acc0:	e0bfc917 	ldw	r2,-220(fp)
 200acc4:	10800210 	cmplti	r2,r2,8
 200acc8:	1000071e 	bne	r2,zero,200ace8 <___vfprintf_internal_r+0x11a8>
 200accc:	e0bfc804 	addi	r2,fp,-224
 200acd0:	100d883a 	mov	r6,r2
 200acd4:	e17fe717 	ldw	r5,-100(fp)
 200acd8:	e13fe617 	ldw	r4,-104(fp)
 200acdc:	20139c80 	call	20139c8 <__sprint_r>
 200ace0:	10036f1e 	bne	r2,zero,200baa0 <___vfprintf_internal_r+0x1f60>
 200ace4:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 200ace8:	9880210c 	andi	r2,r19,132
 200acec:	10802018 	cmpnei	r2,r2,128
 200acf0:	1000351e 	bne	r2,zero,200adc8 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 200acf4:	e0ffad17 	ldw	r3,-332(fp)
 200acf8:	e0bfb517 	ldw	r2,-300(fp)
 200acfc:	18a1c83a 	sub	r16,r3,r2
 200ad00:	0400310e 	bge	zero,r16,200adc8 <___vfprintf_internal_r+0x1288>
 200ad04:	00001706 	br	200ad64 <___vfprintf_internal_r+0x1224>
 200ad08:	008080b4 	movhi	r2,514
 200ad0c:	108a1f84 	addi	r2,r2,10366
 200ad10:	88800015 	stw	r2,0(r17)
 200ad14:	00800404 	movi	r2,16
 200ad18:	88800115 	stw	r2,4(r17)
 200ad1c:	e0bfca17 	ldw	r2,-216(fp)
 200ad20:	10800404 	addi	r2,r2,16
 200ad24:	e0bfca15 	stw	r2,-216(fp)
 200ad28:	8c400204 	addi	r17,r17,8
 200ad2c:	e0bfc917 	ldw	r2,-220(fp)
 200ad30:	10800044 	addi	r2,r2,1
 200ad34:	e0bfc915 	stw	r2,-220(fp)
 200ad38:	e0bfc917 	ldw	r2,-220(fp)
 200ad3c:	10800210 	cmplti	r2,r2,8
 200ad40:	1000071e 	bne	r2,zero,200ad60 <___vfprintf_internal_r+0x1220>
 200ad44:	e0bfc804 	addi	r2,fp,-224
 200ad48:	100d883a 	mov	r6,r2
 200ad4c:	e17fe717 	ldw	r5,-100(fp)
 200ad50:	e13fe617 	ldw	r4,-104(fp)
 200ad54:	20139c80 	call	20139c8 <__sprint_r>
 200ad58:	1003531e 	bne	r2,zero,200baa8 <___vfprintf_internal_r+0x1f68>
 200ad5c:	e47fcb04 	addi	r17,fp,-212
 200ad60:	843ffc04 	addi	r16,r16,-16
 200ad64:	80800448 	cmpgei	r2,r16,17
 200ad68:	103fe71e 	bne	r2,zero,200ad08 <___vfprintf_internal_r+0x11c8>
 200ad6c:	008080b4 	movhi	r2,514
 200ad70:	108a1f84 	addi	r2,r2,10366
 200ad74:	88800015 	stw	r2,0(r17)
 200ad78:	8005883a 	mov	r2,r16
 200ad7c:	88800115 	stw	r2,4(r17)
 200ad80:	e0bfca17 	ldw	r2,-216(fp)
 200ad84:	8007883a 	mov	r3,r16
 200ad88:	10c5883a 	add	r2,r2,r3
 200ad8c:	e0bfca15 	stw	r2,-216(fp)
 200ad90:	8c400204 	addi	r17,r17,8
 200ad94:	e0bfc917 	ldw	r2,-220(fp)
 200ad98:	10800044 	addi	r2,r2,1
 200ad9c:	e0bfc915 	stw	r2,-220(fp)
 200ada0:	e0bfc917 	ldw	r2,-220(fp)
 200ada4:	10800210 	cmplti	r2,r2,8
 200ada8:	1000071e 	bne	r2,zero,200adc8 <___vfprintf_internal_r+0x1288>
 200adac:	e0bfc804 	addi	r2,fp,-224
 200adb0:	100d883a 	mov	r6,r2
 200adb4:	e17fe717 	ldw	r5,-100(fp)
 200adb8:	e13fe617 	ldw	r4,-104(fp)
 200adbc:	20139c80 	call	20139c8 <__sprint_r>
 200adc0:	10033b1e 	bne	r2,zero,200bab0 <___vfprintf_internal_r+0x1f70>
 200adc4:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200adc8:	e0ffb417 	ldw	r3,-304(fp)
 200adcc:	e0bfb617 	ldw	r2,-296(fp)
 200add0:	18a1c83a 	sub	r16,r3,r2
 200add4:	0400310e 	bge	zero,r16,200ae9c <___vfprintf_internal_r+0x135c>
 200add8:	00001706 	br	200ae38 <___vfprintf_internal_r+0x12f8>
 200addc:	008080b4 	movhi	r2,514
 200ade0:	108a1f84 	addi	r2,r2,10366
 200ade4:	88800015 	stw	r2,0(r17)
 200ade8:	00800404 	movi	r2,16
 200adec:	88800115 	stw	r2,4(r17)
 200adf0:	e0bfca17 	ldw	r2,-216(fp)
 200adf4:	10800404 	addi	r2,r2,16
 200adf8:	e0bfca15 	stw	r2,-216(fp)
 200adfc:	8c400204 	addi	r17,r17,8
 200ae00:	e0bfc917 	ldw	r2,-220(fp)
 200ae04:	10800044 	addi	r2,r2,1
 200ae08:	e0bfc915 	stw	r2,-220(fp)
 200ae0c:	e0bfc917 	ldw	r2,-220(fp)
 200ae10:	10800210 	cmplti	r2,r2,8
 200ae14:	1000071e 	bne	r2,zero,200ae34 <___vfprintf_internal_r+0x12f4>
 200ae18:	e0bfc804 	addi	r2,fp,-224
 200ae1c:	100d883a 	mov	r6,r2
 200ae20:	e17fe717 	ldw	r5,-100(fp)
 200ae24:	e13fe617 	ldw	r4,-104(fp)
 200ae28:	20139c80 	call	20139c8 <__sprint_r>
 200ae2c:	1003221e 	bne	r2,zero,200bab8 <___vfprintf_internal_r+0x1f78>
 200ae30:	e47fcb04 	addi	r17,fp,-212
 200ae34:	843ffc04 	addi	r16,r16,-16
 200ae38:	80800448 	cmpgei	r2,r16,17
 200ae3c:	103fe71e 	bne	r2,zero,200addc <___vfprintf_internal_r+0x129c>
 200ae40:	008080b4 	movhi	r2,514
 200ae44:	108a1f84 	addi	r2,r2,10366
 200ae48:	88800015 	stw	r2,0(r17)
 200ae4c:	8005883a 	mov	r2,r16
 200ae50:	88800115 	stw	r2,4(r17)
 200ae54:	e0bfca17 	ldw	r2,-216(fp)
 200ae58:	8007883a 	mov	r3,r16
 200ae5c:	10c5883a 	add	r2,r2,r3
 200ae60:	e0bfca15 	stw	r2,-216(fp)
 200ae64:	8c400204 	addi	r17,r17,8
 200ae68:	e0bfc917 	ldw	r2,-220(fp)
 200ae6c:	10800044 	addi	r2,r2,1
 200ae70:	e0bfc915 	stw	r2,-220(fp)
 200ae74:	e0bfc917 	ldw	r2,-220(fp)
 200ae78:	10800210 	cmplti	r2,r2,8
 200ae7c:	1000071e 	bne	r2,zero,200ae9c <___vfprintf_internal_r+0x135c>
 200ae80:	e0bfc804 	addi	r2,fp,-224
 200ae84:	100d883a 	mov	r6,r2
 200ae88:	e17fe717 	ldw	r5,-100(fp)
 200ae8c:	e13fe617 	ldw	r4,-104(fp)
 200ae90:	20139c80 	call	20139c8 <__sprint_r>
 200ae94:	10030a1e 	bne	r2,zero,200bac0 <___vfprintf_internal_r+0x1f80>
 200ae98:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 200ae9c:	9880400c 	andi	r2,r19,256
 200aea0:	1000161e 	bne	r2,zero,200aefc <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 200aea4:	8c800015 	stw	r18,0(r17)
 200aea8:	e0bfb617 	ldw	r2,-296(fp)
 200aeac:	88800115 	stw	r2,4(r17)
 200aeb0:	e0ffca17 	ldw	r3,-216(fp)
 200aeb4:	e0bfb617 	ldw	r2,-296(fp)
 200aeb8:	1885883a 	add	r2,r3,r2
 200aebc:	e0bfca15 	stw	r2,-216(fp)
 200aec0:	8c400204 	addi	r17,r17,8
 200aec4:	e0bfc917 	ldw	r2,-220(fp)
 200aec8:	10800044 	addi	r2,r2,1
 200aecc:	e0bfc915 	stw	r2,-220(fp)
 200aed0:	e0bfc917 	ldw	r2,-220(fp)
 200aed4:	10800210 	cmplti	r2,r2,8
 200aed8:	10028c1e 	bne	r2,zero,200b90c <___vfprintf_internal_r+0x1dcc>
 200aedc:	e0bfc804 	addi	r2,fp,-224
 200aee0:	100d883a 	mov	r6,r2
 200aee4:	e17fe717 	ldw	r5,-100(fp)
 200aee8:	e13fe617 	ldw	r4,-104(fp)
 200aeec:	20139c80 	call	20139c8 <__sprint_r>
 200aef0:	1002f51e 	bne	r2,zero,200bac8 <___vfprintf_internal_r+0x1f88>
 200aef4:	e47fcb04 	addi	r17,fp,-212
 200aef8:	00028406 	br	200b90c <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 200aefc:	a0801990 	cmplti	r2,r20,102
 200af00:	1001d11e 	bne	r2,zero,200b648 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 200af04:	e0bfc217 	ldw	r2,-248(fp)
 200af08:	e0ffc317 	ldw	r3,-244(fp)
 200af0c:	000d883a 	mov	r6,zero
 200af10:	000f883a 	mov	r7,zero
 200af14:	1009883a 	mov	r4,r2
 200af18:	180b883a 	mov	r5,r3
 200af1c:	2007dfc0 	call	2007dfc <__eqdf2>
 200af20:	1000661e 	bne	r2,zero,200b0bc <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 200af24:	008080b4 	movhi	r2,514
 200af28:	108a1b04 	addi	r2,r2,10348
 200af2c:	88800015 	stw	r2,0(r17)
 200af30:	00800044 	movi	r2,1
 200af34:	88800115 	stw	r2,4(r17)
 200af38:	e0bfca17 	ldw	r2,-216(fp)
 200af3c:	10800044 	addi	r2,r2,1
 200af40:	e0bfca15 	stw	r2,-216(fp)
 200af44:	8c400204 	addi	r17,r17,8
 200af48:	e0bfc917 	ldw	r2,-220(fp)
 200af4c:	10800044 	addi	r2,r2,1
 200af50:	e0bfc915 	stw	r2,-220(fp)
 200af54:	e0bfc917 	ldw	r2,-220(fp)
 200af58:	10800210 	cmplti	r2,r2,8
 200af5c:	1000071e 	bne	r2,zero,200af7c <___vfprintf_internal_r+0x143c>
 200af60:	e0bfc804 	addi	r2,fp,-224
 200af64:	100d883a 	mov	r6,r2
 200af68:	e17fe717 	ldw	r5,-100(fp)
 200af6c:	e13fe617 	ldw	r4,-104(fp)
 200af70:	20139c80 	call	20139c8 <__sprint_r>
 200af74:	1002d61e 	bne	r2,zero,200bad0 <___vfprintf_internal_r+0x1f90>
 200af78:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 200af7c:	e0ffc417 	ldw	r3,-240(fp)
 200af80:	e0bfc717 	ldw	r2,-228(fp)
 200af84:	18800216 	blt	r3,r2,200af90 <___vfprintf_internal_r+0x1450>
 200af88:	9880004c 	andi	r2,r19,1
 200af8c:	10025f26 	beq	r2,zero,200b90c <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 200af90:	e0bfbb17 	ldw	r2,-276(fp)
 200af94:	88800015 	stw	r2,0(r17)
 200af98:	e0bfbc17 	ldw	r2,-272(fp)
 200af9c:	88800115 	stw	r2,4(r17)
 200afa0:	e0ffca17 	ldw	r3,-216(fp)
 200afa4:	e0bfbc17 	ldw	r2,-272(fp)
 200afa8:	1885883a 	add	r2,r3,r2
 200afac:	e0bfca15 	stw	r2,-216(fp)
 200afb0:	8c400204 	addi	r17,r17,8
 200afb4:	e0bfc917 	ldw	r2,-220(fp)
 200afb8:	10800044 	addi	r2,r2,1
 200afbc:	e0bfc915 	stw	r2,-220(fp)
 200afc0:	e0bfc917 	ldw	r2,-220(fp)
 200afc4:	10800210 	cmplti	r2,r2,8
 200afc8:	1000071e 	bne	r2,zero,200afe8 <___vfprintf_internal_r+0x14a8>
 200afcc:	e0bfc804 	addi	r2,fp,-224
 200afd0:	100d883a 	mov	r6,r2
 200afd4:	e17fe717 	ldw	r5,-100(fp)
 200afd8:	e13fe617 	ldw	r4,-104(fp)
 200afdc:	20139c80 	call	20139c8 <__sprint_r>
 200afe0:	1002bd1e 	bne	r2,zero,200bad8 <___vfprintf_internal_r+0x1f98>
 200afe4:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 200afe8:	e0bfc717 	ldw	r2,-228(fp)
 200afec:	143fffc4 	addi	r16,r2,-1
 200aff0:	0402460e 	bge	zero,r16,200b90c <___vfprintf_internal_r+0x1dcc>
 200aff4:	00001706 	br	200b054 <___vfprintf_internal_r+0x1514>
 200aff8:	008080b4 	movhi	r2,514
 200affc:	108a1f84 	addi	r2,r2,10366
 200b000:	88800015 	stw	r2,0(r17)
 200b004:	00800404 	movi	r2,16
 200b008:	88800115 	stw	r2,4(r17)
 200b00c:	e0bfca17 	ldw	r2,-216(fp)
 200b010:	10800404 	addi	r2,r2,16
 200b014:	e0bfca15 	stw	r2,-216(fp)
 200b018:	8c400204 	addi	r17,r17,8
 200b01c:	e0bfc917 	ldw	r2,-220(fp)
 200b020:	10800044 	addi	r2,r2,1
 200b024:	e0bfc915 	stw	r2,-220(fp)
 200b028:	e0bfc917 	ldw	r2,-220(fp)
 200b02c:	10800210 	cmplti	r2,r2,8
 200b030:	1000071e 	bne	r2,zero,200b050 <___vfprintf_internal_r+0x1510>
 200b034:	e0bfc804 	addi	r2,fp,-224
 200b038:	100d883a 	mov	r6,r2
 200b03c:	e17fe717 	ldw	r5,-100(fp)
 200b040:	e13fe617 	ldw	r4,-104(fp)
 200b044:	20139c80 	call	20139c8 <__sprint_r>
 200b048:	1002a51e 	bne	r2,zero,200bae0 <___vfprintf_internal_r+0x1fa0>
 200b04c:	e47fcb04 	addi	r17,fp,-212
 200b050:	843ffc04 	addi	r16,r16,-16
 200b054:	80800448 	cmpgei	r2,r16,17
 200b058:	103fe71e 	bne	r2,zero,200aff8 <___vfprintf_internal_r+0x14b8>
 200b05c:	008080b4 	movhi	r2,514
 200b060:	108a1f84 	addi	r2,r2,10366
 200b064:	88800015 	stw	r2,0(r17)
 200b068:	8005883a 	mov	r2,r16
 200b06c:	88800115 	stw	r2,4(r17)
 200b070:	e0bfca17 	ldw	r2,-216(fp)
 200b074:	8007883a 	mov	r3,r16
 200b078:	10c5883a 	add	r2,r2,r3
 200b07c:	e0bfca15 	stw	r2,-216(fp)
 200b080:	8c400204 	addi	r17,r17,8
 200b084:	e0bfc917 	ldw	r2,-220(fp)
 200b088:	10800044 	addi	r2,r2,1
 200b08c:	e0bfc915 	stw	r2,-220(fp)
 200b090:	e0bfc917 	ldw	r2,-220(fp)
 200b094:	10800210 	cmplti	r2,r2,8
 200b098:	10021c1e 	bne	r2,zero,200b90c <___vfprintf_internal_r+0x1dcc>
 200b09c:	e0bfc804 	addi	r2,fp,-224
 200b0a0:	100d883a 	mov	r6,r2
 200b0a4:	e17fe717 	ldw	r5,-100(fp)
 200b0a8:	e13fe617 	ldw	r4,-104(fp)
 200b0ac:	20139c80 	call	20139c8 <__sprint_r>
 200b0b0:	10028d1e 	bne	r2,zero,200bae8 <___vfprintf_internal_r+0x1fa8>
 200b0b4:	e47fcb04 	addi	r17,fp,-212
 200b0b8:	00021406 	br	200b90c <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 200b0bc:	e0bfc417 	ldw	r2,-240(fp)
 200b0c0:	00807c16 	blt	zero,r2,200b2b4 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 200b0c4:	008080b4 	movhi	r2,514
 200b0c8:	108a1b04 	addi	r2,r2,10348
 200b0cc:	88800015 	stw	r2,0(r17)
 200b0d0:	00800044 	movi	r2,1
 200b0d4:	88800115 	stw	r2,4(r17)
 200b0d8:	e0bfca17 	ldw	r2,-216(fp)
 200b0dc:	10800044 	addi	r2,r2,1
 200b0e0:	e0bfca15 	stw	r2,-216(fp)
 200b0e4:	8c400204 	addi	r17,r17,8
 200b0e8:	e0bfc917 	ldw	r2,-220(fp)
 200b0ec:	10800044 	addi	r2,r2,1
 200b0f0:	e0bfc915 	stw	r2,-220(fp)
 200b0f4:	e0bfc917 	ldw	r2,-220(fp)
 200b0f8:	10800210 	cmplti	r2,r2,8
 200b0fc:	1000071e 	bne	r2,zero,200b11c <___vfprintf_internal_r+0x15dc>
 200b100:	e0bfc804 	addi	r2,fp,-224
 200b104:	100d883a 	mov	r6,r2
 200b108:	e17fe717 	ldw	r5,-100(fp)
 200b10c:	e13fe617 	ldw	r4,-104(fp)
 200b110:	20139c80 	call	20139c8 <__sprint_r>
 200b114:	1002761e 	bne	r2,zero,200baf0 <___vfprintf_internal_r+0x1fb0>
 200b118:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 200b11c:	e0bfc417 	ldw	r2,-240(fp)
 200b120:	1000041e 	bne	r2,zero,200b134 <___vfprintf_internal_r+0x15f4>
 200b124:	e0bfc717 	ldw	r2,-228(fp)
 200b128:	1000021e 	bne	r2,zero,200b134 <___vfprintf_internal_r+0x15f4>
 200b12c:	9880004c 	andi	r2,r19,1
 200b130:	1001f626 	beq	r2,zero,200b90c <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 200b134:	e0bfbb17 	ldw	r2,-276(fp)
 200b138:	88800015 	stw	r2,0(r17)
 200b13c:	e0bfbc17 	ldw	r2,-272(fp)
 200b140:	88800115 	stw	r2,4(r17)
 200b144:	e0ffca17 	ldw	r3,-216(fp)
 200b148:	e0bfbc17 	ldw	r2,-272(fp)
 200b14c:	1885883a 	add	r2,r3,r2
 200b150:	e0bfca15 	stw	r2,-216(fp)
 200b154:	8c400204 	addi	r17,r17,8
 200b158:	e0bfc917 	ldw	r2,-220(fp)
 200b15c:	10800044 	addi	r2,r2,1
 200b160:	e0bfc915 	stw	r2,-220(fp)
 200b164:	e0bfc917 	ldw	r2,-220(fp)
 200b168:	10800210 	cmplti	r2,r2,8
 200b16c:	1000071e 	bne	r2,zero,200b18c <___vfprintf_internal_r+0x164c>
 200b170:	e0bfc804 	addi	r2,fp,-224
 200b174:	100d883a 	mov	r6,r2
 200b178:	e17fe717 	ldw	r5,-100(fp)
 200b17c:	e13fe617 	ldw	r4,-104(fp)
 200b180:	20139c80 	call	20139c8 <__sprint_r>
 200b184:	10025c1e 	bne	r2,zero,200baf8 <___vfprintf_internal_r+0x1fb8>
 200b188:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 200b18c:	e0bfc417 	ldw	r2,-240(fp)
 200b190:	00a1c83a 	sub	r16,zero,r2
 200b194:	0400310e 	bge	zero,r16,200b25c <___vfprintf_internal_r+0x171c>
 200b198:	00001706 	br	200b1f8 <___vfprintf_internal_r+0x16b8>
 200b19c:	008080b4 	movhi	r2,514
 200b1a0:	108a1f84 	addi	r2,r2,10366
 200b1a4:	88800015 	stw	r2,0(r17)
 200b1a8:	00800404 	movi	r2,16
 200b1ac:	88800115 	stw	r2,4(r17)
 200b1b0:	e0bfca17 	ldw	r2,-216(fp)
 200b1b4:	10800404 	addi	r2,r2,16
 200b1b8:	e0bfca15 	stw	r2,-216(fp)
 200b1bc:	8c400204 	addi	r17,r17,8
 200b1c0:	e0bfc917 	ldw	r2,-220(fp)
 200b1c4:	10800044 	addi	r2,r2,1
 200b1c8:	e0bfc915 	stw	r2,-220(fp)
 200b1cc:	e0bfc917 	ldw	r2,-220(fp)
 200b1d0:	10800210 	cmplti	r2,r2,8
 200b1d4:	1000071e 	bne	r2,zero,200b1f4 <___vfprintf_internal_r+0x16b4>
 200b1d8:	e0bfc804 	addi	r2,fp,-224
 200b1dc:	100d883a 	mov	r6,r2
 200b1e0:	e17fe717 	ldw	r5,-100(fp)
 200b1e4:	e13fe617 	ldw	r4,-104(fp)
 200b1e8:	20139c80 	call	20139c8 <__sprint_r>
 200b1ec:	1002441e 	bne	r2,zero,200bb00 <___vfprintf_internal_r+0x1fc0>
 200b1f0:	e47fcb04 	addi	r17,fp,-212
 200b1f4:	843ffc04 	addi	r16,r16,-16
 200b1f8:	80800448 	cmpgei	r2,r16,17
 200b1fc:	103fe71e 	bne	r2,zero,200b19c <___vfprintf_internal_r+0x165c>
 200b200:	008080b4 	movhi	r2,514
 200b204:	108a1f84 	addi	r2,r2,10366
 200b208:	88800015 	stw	r2,0(r17)
 200b20c:	8005883a 	mov	r2,r16
 200b210:	88800115 	stw	r2,4(r17)
 200b214:	e0bfca17 	ldw	r2,-216(fp)
 200b218:	8007883a 	mov	r3,r16
 200b21c:	10c5883a 	add	r2,r2,r3
 200b220:	e0bfca15 	stw	r2,-216(fp)
 200b224:	8c400204 	addi	r17,r17,8
 200b228:	e0bfc917 	ldw	r2,-220(fp)
 200b22c:	10800044 	addi	r2,r2,1
 200b230:	e0bfc915 	stw	r2,-220(fp)
 200b234:	e0bfc917 	ldw	r2,-220(fp)
 200b238:	10800210 	cmplti	r2,r2,8
 200b23c:	1000071e 	bne	r2,zero,200b25c <___vfprintf_internal_r+0x171c>
 200b240:	e0bfc804 	addi	r2,fp,-224
 200b244:	100d883a 	mov	r6,r2
 200b248:	e17fe717 	ldw	r5,-100(fp)
 200b24c:	e13fe617 	ldw	r4,-104(fp)
 200b250:	20139c80 	call	20139c8 <__sprint_r>
 200b254:	10022c1e 	bne	r2,zero,200bb08 <___vfprintf_internal_r+0x1fc8>
 200b258:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 200b25c:	8c800015 	stw	r18,0(r17)
 200b260:	e0bfc717 	ldw	r2,-228(fp)
 200b264:	88800115 	stw	r2,4(r17)
 200b268:	e0bfca17 	ldw	r2,-216(fp)
 200b26c:	e0ffc717 	ldw	r3,-228(fp)
 200b270:	10c5883a 	add	r2,r2,r3
 200b274:	e0bfca15 	stw	r2,-216(fp)
 200b278:	8c400204 	addi	r17,r17,8
 200b27c:	e0bfc917 	ldw	r2,-220(fp)
 200b280:	10800044 	addi	r2,r2,1
 200b284:	e0bfc915 	stw	r2,-220(fp)
 200b288:	e0bfc917 	ldw	r2,-220(fp)
 200b28c:	10800210 	cmplti	r2,r2,8
 200b290:	10019e1e 	bne	r2,zero,200b90c <___vfprintf_internal_r+0x1dcc>
 200b294:	e0bfc804 	addi	r2,fp,-224
 200b298:	100d883a 	mov	r6,r2
 200b29c:	e17fe717 	ldw	r5,-100(fp)
 200b2a0:	e13fe617 	ldw	r4,-104(fp)
 200b2a4:	20139c80 	call	20139c8 <__sprint_r>
 200b2a8:	1002191e 	bne	r2,zero,200bb10 <___vfprintf_internal_r+0x1fd0>
 200b2ac:	e47fcb04 	addi	r17,fp,-212
 200b2b0:	00019606 	br	200b90c <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 200b2b4:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 200b2b8:	e0bfc717 	ldw	r2,-228(fp)
 200b2bc:	1007883a 	mov	r3,r2
 200b2c0:	e0bfc017 	ldw	r2,-256(fp)
 200b2c4:	10c5883a 	add	r2,r2,r3
 200b2c8:	1007883a 	mov	r3,r2
 200b2cc:	9005883a 	mov	r2,r18
 200b2d0:	1885c83a 	sub	r2,r3,r2
 200b2d4:	e0bfb915 	stw	r2,-284(fp)
 200b2d8:	e0bfb917 	ldw	r2,-284(fp)
 200b2dc:	e0ffb017 	ldw	r3,-320(fp)
 200b2e0:	1880020e 	bge	r3,r2,200b2ec <___vfprintf_internal_r+0x17ac>
 200b2e4:	e0bfb017 	ldw	r2,-320(fp)
 200b2e8:	e0bfb915 	stw	r2,-284(fp)
 200b2ec:	e0bfb917 	ldw	r2,-284(fp)
 200b2f0:	0080150e 	bge	zero,r2,200b348 <___vfprintf_internal_r+0x1808>
 200b2f4:	8c800015 	stw	r18,0(r17)
 200b2f8:	e0bfb917 	ldw	r2,-284(fp)
 200b2fc:	88800115 	stw	r2,4(r17)
 200b300:	e0ffca17 	ldw	r3,-216(fp)
 200b304:	e0bfb917 	ldw	r2,-284(fp)
 200b308:	1885883a 	add	r2,r3,r2
 200b30c:	e0bfca15 	stw	r2,-216(fp)
 200b310:	8c400204 	addi	r17,r17,8
 200b314:	e0bfc917 	ldw	r2,-220(fp)
 200b318:	10800044 	addi	r2,r2,1
 200b31c:	e0bfc915 	stw	r2,-220(fp)
 200b320:	e0bfc917 	ldw	r2,-220(fp)
 200b324:	10800210 	cmplti	r2,r2,8
 200b328:	1000071e 	bne	r2,zero,200b348 <___vfprintf_internal_r+0x1808>
 200b32c:	e0bfc804 	addi	r2,fp,-224
 200b330:	100d883a 	mov	r6,r2
 200b334:	e17fe717 	ldw	r5,-100(fp)
 200b338:	e13fe617 	ldw	r4,-104(fp)
 200b33c:	20139c80 	call	20139c8 <__sprint_r>
 200b340:	1001f51e 	bne	r2,zero,200bb18 <___vfprintf_internal_r+0x1fd8>
 200b344:	e47fcb04 	addi	r17,fp,-212
 200b348:	e0bfb917 	ldw	r2,-284(fp)
 200b34c:	1000010e 	bge	r2,zero,200b354 <___vfprintf_internal_r+0x1814>
 200b350:	0005883a 	mov	r2,zero
 200b354:	e0ffb017 	ldw	r3,-320(fp)
 200b358:	1885c83a 	sub	r2,r3,r2
 200b35c:	e0bfb915 	stw	r2,-284(fp)
 200b360:	e0bfb917 	ldw	r2,-284(fp)
 200b364:	0080340e 	bge	zero,r2,200b438 <___vfprintf_internal_r+0x18f8>
 200b368:	00001906 	br	200b3d0 <___vfprintf_internal_r+0x1890>
 200b36c:	008080b4 	movhi	r2,514
 200b370:	108a1f84 	addi	r2,r2,10366
 200b374:	88800015 	stw	r2,0(r17)
 200b378:	00800404 	movi	r2,16
 200b37c:	88800115 	stw	r2,4(r17)
 200b380:	e0bfca17 	ldw	r2,-216(fp)
 200b384:	10800404 	addi	r2,r2,16
 200b388:	e0bfca15 	stw	r2,-216(fp)
 200b38c:	8c400204 	addi	r17,r17,8
 200b390:	e0bfc917 	ldw	r2,-220(fp)
 200b394:	10800044 	addi	r2,r2,1
 200b398:	e0bfc915 	stw	r2,-220(fp)
 200b39c:	e0bfc917 	ldw	r2,-220(fp)
 200b3a0:	10800210 	cmplti	r2,r2,8
 200b3a4:	1000071e 	bne	r2,zero,200b3c4 <___vfprintf_internal_r+0x1884>
 200b3a8:	e0bfc804 	addi	r2,fp,-224
 200b3ac:	100d883a 	mov	r6,r2
 200b3b0:	e17fe717 	ldw	r5,-100(fp)
 200b3b4:	e13fe617 	ldw	r4,-104(fp)
 200b3b8:	20139c80 	call	20139c8 <__sprint_r>
 200b3bc:	1001d81e 	bne	r2,zero,200bb20 <___vfprintf_internal_r+0x1fe0>
 200b3c0:	e47fcb04 	addi	r17,fp,-212
 200b3c4:	e0bfb917 	ldw	r2,-284(fp)
 200b3c8:	10bffc04 	addi	r2,r2,-16
 200b3cc:	e0bfb915 	stw	r2,-284(fp)
 200b3d0:	e0bfb917 	ldw	r2,-284(fp)
 200b3d4:	10800448 	cmpgei	r2,r2,17
 200b3d8:	103fe41e 	bne	r2,zero,200b36c <___vfprintf_internal_r+0x182c>
 200b3dc:	008080b4 	movhi	r2,514
 200b3e0:	108a1f84 	addi	r2,r2,10366
 200b3e4:	88800015 	stw	r2,0(r17)
 200b3e8:	e0bfb917 	ldw	r2,-284(fp)
 200b3ec:	88800115 	stw	r2,4(r17)
 200b3f0:	e0ffca17 	ldw	r3,-216(fp)
 200b3f4:	e0bfb917 	ldw	r2,-284(fp)
 200b3f8:	1885883a 	add	r2,r3,r2
 200b3fc:	e0bfca15 	stw	r2,-216(fp)
 200b400:	8c400204 	addi	r17,r17,8
 200b404:	e0bfc917 	ldw	r2,-220(fp)
 200b408:	10800044 	addi	r2,r2,1
 200b40c:	e0bfc915 	stw	r2,-220(fp)
 200b410:	e0bfc917 	ldw	r2,-220(fp)
 200b414:	10800210 	cmplti	r2,r2,8
 200b418:	1000071e 	bne	r2,zero,200b438 <___vfprintf_internal_r+0x18f8>
 200b41c:	e0bfc804 	addi	r2,fp,-224
 200b420:	100d883a 	mov	r6,r2
 200b424:	e17fe717 	ldw	r5,-100(fp)
 200b428:	e13fe617 	ldw	r4,-104(fp)
 200b42c:	20139c80 	call	20139c8 <__sprint_r>
 200b430:	1001bd1e 	bne	r2,zero,200bb28 <___vfprintf_internal_r+0x1fe8>
 200b434:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 200b438:	e0bfb017 	ldw	r2,-320(fp)
 200b43c:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 200b440:	e0ffc417 	ldw	r3,-240(fp)
 200b444:	e0bfc717 	ldw	r2,-228(fp)
 200b448:	18800216 	blt	r3,r2,200b454 <___vfprintf_internal_r+0x1914>
 200b44c:	9880004c 	andi	r2,r19,1
 200b450:	10001626 	beq	r2,zero,200b4ac <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 200b454:	e0bfbb17 	ldw	r2,-276(fp)
 200b458:	88800015 	stw	r2,0(r17)
 200b45c:	e0bfbc17 	ldw	r2,-272(fp)
 200b460:	88800115 	stw	r2,4(r17)
 200b464:	e0ffca17 	ldw	r3,-216(fp)
 200b468:	e0bfbc17 	ldw	r2,-272(fp)
 200b46c:	1885883a 	add	r2,r3,r2
 200b470:	e0bfca15 	stw	r2,-216(fp)
 200b474:	8c400204 	addi	r17,r17,8
 200b478:	e0bfc917 	ldw	r2,-220(fp)
 200b47c:	10800044 	addi	r2,r2,1
 200b480:	e0bfc915 	stw	r2,-220(fp)
 200b484:	e0bfc917 	ldw	r2,-220(fp)
 200b488:	10800210 	cmplti	r2,r2,8
 200b48c:	1000071e 	bne	r2,zero,200b4ac <___vfprintf_internal_r+0x196c>
 200b490:	e0bfc804 	addi	r2,fp,-224
 200b494:	100d883a 	mov	r6,r2
 200b498:	e17fe717 	ldw	r5,-100(fp)
 200b49c:	e13fe617 	ldw	r4,-104(fp)
 200b4a0:	20139c80 	call	20139c8 <__sprint_r>
 200b4a4:	1001a21e 	bne	r2,zero,200bb30 <___vfprintf_internal_r+0x1ff0>
 200b4a8:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 200b4ac:	e0bfc717 	ldw	r2,-228(fp)
 200b4b0:	1007883a 	mov	r3,r2
 200b4b4:	e0bfc017 	ldw	r2,-256(fp)
 200b4b8:	10c5883a 	add	r2,r2,r3
 200b4bc:	1007883a 	mov	r3,r2
 200b4c0:	9005883a 	mov	r2,r18
 200b4c4:	1885c83a 	sub	r2,r3,r2
 200b4c8:	e0bfba15 	stw	r2,-280(fp)
 200b4cc:	e0ffc717 	ldw	r3,-228(fp)
 200b4d0:	e0bfc417 	ldw	r2,-240(fp)
 200b4d4:	1887c83a 	sub	r3,r3,r2
 200b4d8:	e0bfba17 	ldw	r2,-280(fp)
 200b4dc:	1880040e 	bge	r3,r2,200b4f0 <___vfprintf_internal_r+0x19b0>
 200b4e0:	e0ffc717 	ldw	r3,-228(fp)
 200b4e4:	e0bfc417 	ldw	r2,-240(fp)
 200b4e8:	1885c83a 	sub	r2,r3,r2
 200b4ec:	e0bfba15 	stw	r2,-280(fp)
 200b4f0:	e0bfba17 	ldw	r2,-280(fp)
 200b4f4:	0080150e 	bge	zero,r2,200b54c <___vfprintf_internal_r+0x1a0c>
 200b4f8:	8c800015 	stw	r18,0(r17)
 200b4fc:	e0bfba17 	ldw	r2,-280(fp)
 200b500:	88800115 	stw	r2,4(r17)
 200b504:	e0ffca17 	ldw	r3,-216(fp)
 200b508:	e0bfba17 	ldw	r2,-280(fp)
 200b50c:	1885883a 	add	r2,r3,r2
 200b510:	e0bfca15 	stw	r2,-216(fp)
 200b514:	8c400204 	addi	r17,r17,8
 200b518:	e0bfc917 	ldw	r2,-220(fp)
 200b51c:	10800044 	addi	r2,r2,1
 200b520:	e0bfc915 	stw	r2,-220(fp)
 200b524:	e0bfc917 	ldw	r2,-220(fp)
 200b528:	10800210 	cmplti	r2,r2,8
 200b52c:	1000071e 	bne	r2,zero,200b54c <___vfprintf_internal_r+0x1a0c>
 200b530:	e0bfc804 	addi	r2,fp,-224
 200b534:	100d883a 	mov	r6,r2
 200b538:	e17fe717 	ldw	r5,-100(fp)
 200b53c:	e13fe617 	ldw	r4,-104(fp)
 200b540:	20139c80 	call	20139c8 <__sprint_r>
 200b544:	10017c1e 	bne	r2,zero,200bb38 <___vfprintf_internal_r+0x1ff8>
 200b548:	e47fcb04 	addi	r17,fp,-212
 200b54c:	e0ffc717 	ldw	r3,-228(fp)
 200b550:	e0bfc417 	ldw	r2,-240(fp)
 200b554:	1887c83a 	sub	r3,r3,r2
 200b558:	e0bfba17 	ldw	r2,-280(fp)
 200b55c:	1000010e 	bge	r2,zero,200b564 <___vfprintf_internal_r+0x1a24>
 200b560:	0005883a 	mov	r2,zero
 200b564:	1885c83a 	sub	r2,r3,r2
 200b568:	e0bfba15 	stw	r2,-280(fp)
 200b56c:	e0bfba17 	ldw	r2,-280(fp)
 200b570:	0080e60e 	bge	zero,r2,200b90c <___vfprintf_internal_r+0x1dcc>
 200b574:	00001906 	br	200b5dc <___vfprintf_internal_r+0x1a9c>
 200b578:	008080b4 	movhi	r2,514
 200b57c:	108a1f84 	addi	r2,r2,10366
 200b580:	88800015 	stw	r2,0(r17)
 200b584:	00800404 	movi	r2,16
 200b588:	88800115 	stw	r2,4(r17)
 200b58c:	e0bfca17 	ldw	r2,-216(fp)
 200b590:	10800404 	addi	r2,r2,16
 200b594:	e0bfca15 	stw	r2,-216(fp)
 200b598:	8c400204 	addi	r17,r17,8
 200b59c:	e0bfc917 	ldw	r2,-220(fp)
 200b5a0:	10800044 	addi	r2,r2,1
 200b5a4:	e0bfc915 	stw	r2,-220(fp)
 200b5a8:	e0bfc917 	ldw	r2,-220(fp)
 200b5ac:	10800210 	cmplti	r2,r2,8
 200b5b0:	1000071e 	bne	r2,zero,200b5d0 <___vfprintf_internal_r+0x1a90>
 200b5b4:	e0bfc804 	addi	r2,fp,-224
 200b5b8:	100d883a 	mov	r6,r2
 200b5bc:	e17fe717 	ldw	r5,-100(fp)
 200b5c0:	e13fe617 	ldw	r4,-104(fp)
 200b5c4:	20139c80 	call	20139c8 <__sprint_r>
 200b5c8:	10015d1e 	bne	r2,zero,200bb40 <___vfprintf_internal_r+0x2000>
 200b5cc:	e47fcb04 	addi	r17,fp,-212
 200b5d0:	e0bfba17 	ldw	r2,-280(fp)
 200b5d4:	10bffc04 	addi	r2,r2,-16
 200b5d8:	e0bfba15 	stw	r2,-280(fp)
 200b5dc:	e0bfba17 	ldw	r2,-280(fp)
 200b5e0:	10800448 	cmpgei	r2,r2,17
 200b5e4:	103fe41e 	bne	r2,zero,200b578 <___vfprintf_internal_r+0x1a38>
 200b5e8:	008080b4 	movhi	r2,514
 200b5ec:	108a1f84 	addi	r2,r2,10366
 200b5f0:	88800015 	stw	r2,0(r17)
 200b5f4:	e0bfba17 	ldw	r2,-280(fp)
 200b5f8:	88800115 	stw	r2,4(r17)
 200b5fc:	e0ffca17 	ldw	r3,-216(fp)
 200b600:	e0bfba17 	ldw	r2,-280(fp)
 200b604:	1885883a 	add	r2,r3,r2
 200b608:	e0bfca15 	stw	r2,-216(fp)
 200b60c:	8c400204 	addi	r17,r17,8
 200b610:	e0bfc917 	ldw	r2,-220(fp)
 200b614:	10800044 	addi	r2,r2,1
 200b618:	e0bfc915 	stw	r2,-220(fp)
 200b61c:	e0bfc917 	ldw	r2,-220(fp)
 200b620:	10800210 	cmplti	r2,r2,8
 200b624:	1000b91e 	bne	r2,zero,200b90c <___vfprintf_internal_r+0x1dcc>
 200b628:	e0bfc804 	addi	r2,fp,-224
 200b62c:	100d883a 	mov	r6,r2
 200b630:	e17fe717 	ldw	r5,-100(fp)
 200b634:	e13fe617 	ldw	r4,-104(fp)
 200b638:	20139c80 	call	20139c8 <__sprint_r>
 200b63c:	1001421e 	bne	r2,zero,200bb48 <___vfprintf_internal_r+0x2008>
 200b640:	e47fcb04 	addi	r17,fp,-212
 200b644:	0000b106 	br	200b90c <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 200b648:	e0bfc717 	ldw	r2,-228(fp)
 200b64c:	10800088 	cmpgei	r2,r2,2
 200b650:	1000021e 	bne	r2,zero,200b65c <___vfprintf_internal_r+0x1b1c>
 200b654:	9880004c 	andi	r2,r19,1
 200b658:	10008026 	beq	r2,zero,200b85c <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 200b65c:	8c800015 	stw	r18,0(r17)
 200b660:	00800044 	movi	r2,1
 200b664:	88800115 	stw	r2,4(r17)
 200b668:	e0bfca17 	ldw	r2,-216(fp)
 200b66c:	10800044 	addi	r2,r2,1
 200b670:	e0bfca15 	stw	r2,-216(fp)
 200b674:	8c400204 	addi	r17,r17,8
 200b678:	e0bfc917 	ldw	r2,-220(fp)
 200b67c:	10800044 	addi	r2,r2,1
 200b680:	e0bfc915 	stw	r2,-220(fp)
 200b684:	e0bfc917 	ldw	r2,-220(fp)
 200b688:	10800210 	cmplti	r2,r2,8
 200b68c:	1000071e 	bne	r2,zero,200b6ac <___vfprintf_internal_r+0x1b6c>
 200b690:	e0bfc804 	addi	r2,fp,-224
 200b694:	100d883a 	mov	r6,r2
 200b698:	e17fe717 	ldw	r5,-100(fp)
 200b69c:	e13fe617 	ldw	r4,-104(fp)
 200b6a0:	20139c80 	call	20139c8 <__sprint_r>
 200b6a4:	10012a1e 	bne	r2,zero,200bb50 <___vfprintf_internal_r+0x2010>
 200b6a8:	e47fcb04 	addi	r17,fp,-212
					cp++;
 200b6ac:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 200b6b0:	e0bfbb17 	ldw	r2,-276(fp)
 200b6b4:	88800015 	stw	r2,0(r17)
 200b6b8:	e0bfbc17 	ldw	r2,-272(fp)
 200b6bc:	88800115 	stw	r2,4(r17)
 200b6c0:	e0ffca17 	ldw	r3,-216(fp)
 200b6c4:	e0bfbc17 	ldw	r2,-272(fp)
 200b6c8:	1885883a 	add	r2,r3,r2
 200b6cc:	e0bfca15 	stw	r2,-216(fp)
 200b6d0:	8c400204 	addi	r17,r17,8
 200b6d4:	e0bfc917 	ldw	r2,-220(fp)
 200b6d8:	10800044 	addi	r2,r2,1
 200b6dc:	e0bfc915 	stw	r2,-220(fp)
 200b6e0:	e0bfc917 	ldw	r2,-220(fp)
 200b6e4:	10800210 	cmplti	r2,r2,8
 200b6e8:	1000071e 	bne	r2,zero,200b708 <___vfprintf_internal_r+0x1bc8>
 200b6ec:	e0bfc804 	addi	r2,fp,-224
 200b6f0:	100d883a 	mov	r6,r2
 200b6f4:	e17fe717 	ldw	r5,-100(fp)
 200b6f8:	e13fe617 	ldw	r4,-104(fp)
 200b6fc:	20139c80 	call	20139c8 <__sprint_r>
 200b700:	1001151e 	bne	r2,zero,200bb58 <___vfprintf_internal_r+0x2018>
 200b704:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 200b708:	e0bfc217 	ldw	r2,-248(fp)
 200b70c:	e0ffc317 	ldw	r3,-244(fp)
 200b710:	000d883a 	mov	r6,zero
 200b714:	000f883a 	mov	r7,zero
 200b718:	1009883a 	mov	r4,r2
 200b71c:	180b883a 	mov	r5,r3
 200b720:	2007dfc0 	call	2007dfc <__eqdf2>
 200b724:	10001826 	beq	r2,zero,200b788 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 200b728:	8c800015 	stw	r18,0(r17)
 200b72c:	e0bfc717 	ldw	r2,-228(fp)
 200b730:	10bfffc4 	addi	r2,r2,-1
 200b734:	88800115 	stw	r2,4(r17)
 200b738:	e0bfca17 	ldw	r2,-216(fp)
 200b73c:	e0ffc717 	ldw	r3,-228(fp)
 200b740:	10c5883a 	add	r2,r2,r3
 200b744:	10bfffc4 	addi	r2,r2,-1
 200b748:	e0bfca15 	stw	r2,-216(fp)
 200b74c:	8c400204 	addi	r17,r17,8
 200b750:	e0bfc917 	ldw	r2,-220(fp)
 200b754:	10800044 	addi	r2,r2,1
 200b758:	e0bfc915 	stw	r2,-220(fp)
 200b75c:	e0bfc917 	ldw	r2,-220(fp)
 200b760:	10800210 	cmplti	r2,r2,8
 200b764:	1000521e 	bne	r2,zero,200b8b0 <___vfprintf_internal_r+0x1d70>
 200b768:	e0bfc804 	addi	r2,fp,-224
 200b76c:	100d883a 	mov	r6,r2
 200b770:	e17fe717 	ldw	r5,-100(fp)
 200b774:	e13fe617 	ldw	r4,-104(fp)
 200b778:	20139c80 	call	20139c8 <__sprint_r>
 200b77c:	1000f81e 	bne	r2,zero,200bb60 <___vfprintf_internal_r+0x2020>
 200b780:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200b784:	00004a06 	br	200b8b0 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 200b788:	e0bfc717 	ldw	r2,-228(fp)
 200b78c:	143fffc4 	addi	r16,r2,-1
 200b790:	0400470e 	bge	zero,r16,200b8b0 <___vfprintf_internal_r+0x1d70>
 200b794:	00001706 	br	200b7f4 <___vfprintf_internal_r+0x1cb4>
 200b798:	008080b4 	movhi	r2,514
 200b79c:	108a1f84 	addi	r2,r2,10366
 200b7a0:	88800015 	stw	r2,0(r17)
 200b7a4:	00800404 	movi	r2,16
 200b7a8:	88800115 	stw	r2,4(r17)
 200b7ac:	e0bfca17 	ldw	r2,-216(fp)
 200b7b0:	10800404 	addi	r2,r2,16
 200b7b4:	e0bfca15 	stw	r2,-216(fp)
 200b7b8:	8c400204 	addi	r17,r17,8
 200b7bc:	e0bfc917 	ldw	r2,-220(fp)
 200b7c0:	10800044 	addi	r2,r2,1
 200b7c4:	e0bfc915 	stw	r2,-220(fp)
 200b7c8:	e0bfc917 	ldw	r2,-220(fp)
 200b7cc:	10800210 	cmplti	r2,r2,8
 200b7d0:	1000071e 	bne	r2,zero,200b7f0 <___vfprintf_internal_r+0x1cb0>
 200b7d4:	e0bfc804 	addi	r2,fp,-224
 200b7d8:	100d883a 	mov	r6,r2
 200b7dc:	e17fe717 	ldw	r5,-100(fp)
 200b7e0:	e13fe617 	ldw	r4,-104(fp)
 200b7e4:	20139c80 	call	20139c8 <__sprint_r>
 200b7e8:	1000df1e 	bne	r2,zero,200bb68 <___vfprintf_internal_r+0x2028>
 200b7ec:	e47fcb04 	addi	r17,fp,-212
 200b7f0:	843ffc04 	addi	r16,r16,-16
 200b7f4:	80800448 	cmpgei	r2,r16,17
 200b7f8:	103fe71e 	bne	r2,zero,200b798 <___vfprintf_internal_r+0x1c58>
 200b7fc:	008080b4 	movhi	r2,514
 200b800:	108a1f84 	addi	r2,r2,10366
 200b804:	88800015 	stw	r2,0(r17)
 200b808:	8005883a 	mov	r2,r16
 200b80c:	88800115 	stw	r2,4(r17)
 200b810:	e0bfca17 	ldw	r2,-216(fp)
 200b814:	8007883a 	mov	r3,r16
 200b818:	10c5883a 	add	r2,r2,r3
 200b81c:	e0bfca15 	stw	r2,-216(fp)
 200b820:	8c400204 	addi	r17,r17,8
 200b824:	e0bfc917 	ldw	r2,-220(fp)
 200b828:	10800044 	addi	r2,r2,1
 200b82c:	e0bfc915 	stw	r2,-220(fp)
 200b830:	e0bfc917 	ldw	r2,-220(fp)
 200b834:	10800210 	cmplti	r2,r2,8
 200b838:	10001d1e 	bne	r2,zero,200b8b0 <___vfprintf_internal_r+0x1d70>
 200b83c:	e0bfc804 	addi	r2,fp,-224
 200b840:	100d883a 	mov	r6,r2
 200b844:	e17fe717 	ldw	r5,-100(fp)
 200b848:	e13fe617 	ldw	r4,-104(fp)
 200b84c:	20139c80 	call	20139c8 <__sprint_r>
 200b850:	1000c71e 	bne	r2,zero,200bb70 <___vfprintf_internal_r+0x2030>
 200b854:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200b858:	00001506 	br	200b8b0 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 200b85c:	8c800015 	stw	r18,0(r17)
 200b860:	00800044 	movi	r2,1
 200b864:	88800115 	stw	r2,4(r17)
 200b868:	e0bfca17 	ldw	r2,-216(fp)
 200b86c:	10800044 	addi	r2,r2,1
 200b870:	e0bfca15 	stw	r2,-216(fp)
 200b874:	8c400204 	addi	r17,r17,8
 200b878:	e0bfc917 	ldw	r2,-220(fp)
 200b87c:	10800044 	addi	r2,r2,1
 200b880:	e0bfc915 	stw	r2,-220(fp)
 200b884:	e0bfc917 	ldw	r2,-220(fp)
 200b888:	10800210 	cmplti	r2,r2,8
 200b88c:	1000091e 	bne	r2,zero,200b8b4 <___vfprintf_internal_r+0x1d74>
 200b890:	e0bfc804 	addi	r2,fp,-224
 200b894:	100d883a 	mov	r6,r2
 200b898:	e17fe717 	ldw	r5,-100(fp)
 200b89c:	e13fe617 	ldw	r4,-104(fp)
 200b8a0:	20139c80 	call	20139c8 <__sprint_r>
 200b8a4:	1000b41e 	bne	r2,zero,200bb78 <___vfprintf_internal_r+0x2038>
 200b8a8:	e47fcb04 	addi	r17,fp,-212
 200b8ac:	00000106 	br	200b8b4 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200b8b0:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 200b8b4:	e0bfc504 	addi	r2,fp,-236
 200b8b8:	88800015 	stw	r2,0(r17)
 200b8bc:	e0bfaf17 	ldw	r2,-324(fp)
 200b8c0:	88800115 	stw	r2,4(r17)
 200b8c4:	e0ffca17 	ldw	r3,-216(fp)
 200b8c8:	e0bfaf17 	ldw	r2,-324(fp)
 200b8cc:	1885883a 	add	r2,r3,r2
 200b8d0:	e0bfca15 	stw	r2,-216(fp)
 200b8d4:	8c400204 	addi	r17,r17,8
 200b8d8:	e0bfc917 	ldw	r2,-220(fp)
 200b8dc:	10800044 	addi	r2,r2,1
 200b8e0:	e0bfc915 	stw	r2,-220(fp)
 200b8e4:	e0bfc917 	ldw	r2,-220(fp)
 200b8e8:	10800210 	cmplti	r2,r2,8
 200b8ec:	1000071e 	bne	r2,zero,200b90c <___vfprintf_internal_r+0x1dcc>
 200b8f0:	e0bfc804 	addi	r2,fp,-224
 200b8f4:	100d883a 	mov	r6,r2
 200b8f8:	e17fe717 	ldw	r5,-100(fp)
 200b8fc:	e13fe617 	ldw	r4,-104(fp)
 200b900:	20139c80 	call	20139c8 <__sprint_r>
 200b904:	10009e1e 	bne	r2,zero,200bb80 <___vfprintf_internal_r+0x2040>
 200b908:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 200b90c:	9880010c 	andi	r2,r19,4
 200b910:	10003526 	beq	r2,zero,200b9e8 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 200b914:	e0ffad17 	ldw	r3,-332(fp)
 200b918:	e0bfb517 	ldw	r2,-300(fp)
 200b91c:	18a1c83a 	sub	r16,r3,r2
 200b920:	0400310e 	bge	zero,r16,200b9e8 <___vfprintf_internal_r+0x1ea8>
 200b924:	00001706 	br	200b984 <___vfprintf_internal_r+0x1e44>
 200b928:	008080b4 	movhi	r2,514
 200b92c:	108a1b84 	addi	r2,r2,10350
 200b930:	88800015 	stw	r2,0(r17)
 200b934:	00800404 	movi	r2,16
 200b938:	88800115 	stw	r2,4(r17)
 200b93c:	e0bfca17 	ldw	r2,-216(fp)
 200b940:	10800404 	addi	r2,r2,16
 200b944:	e0bfca15 	stw	r2,-216(fp)
 200b948:	8c400204 	addi	r17,r17,8
 200b94c:	e0bfc917 	ldw	r2,-220(fp)
 200b950:	10800044 	addi	r2,r2,1
 200b954:	e0bfc915 	stw	r2,-220(fp)
 200b958:	e0bfc917 	ldw	r2,-220(fp)
 200b95c:	10800210 	cmplti	r2,r2,8
 200b960:	1000071e 	bne	r2,zero,200b980 <___vfprintf_internal_r+0x1e40>
 200b964:	e0bfc804 	addi	r2,fp,-224
 200b968:	100d883a 	mov	r6,r2
 200b96c:	e17fe717 	ldw	r5,-100(fp)
 200b970:	e13fe617 	ldw	r4,-104(fp)
 200b974:	20139c80 	call	20139c8 <__sprint_r>
 200b978:	1000831e 	bne	r2,zero,200bb88 <___vfprintf_internal_r+0x2048>
 200b97c:	e47fcb04 	addi	r17,fp,-212
 200b980:	843ffc04 	addi	r16,r16,-16
 200b984:	80800448 	cmpgei	r2,r16,17
 200b988:	103fe71e 	bne	r2,zero,200b928 <___vfprintf_internal_r+0x1de8>
 200b98c:	008080b4 	movhi	r2,514
 200b990:	108a1b84 	addi	r2,r2,10350
 200b994:	88800015 	stw	r2,0(r17)
 200b998:	8005883a 	mov	r2,r16
 200b99c:	88800115 	stw	r2,4(r17)
 200b9a0:	e0bfca17 	ldw	r2,-216(fp)
 200b9a4:	8007883a 	mov	r3,r16
 200b9a8:	10c5883a 	add	r2,r2,r3
 200b9ac:	e0bfca15 	stw	r2,-216(fp)
 200b9b0:	8c400204 	addi	r17,r17,8
 200b9b4:	e0bfc917 	ldw	r2,-220(fp)
 200b9b8:	10800044 	addi	r2,r2,1
 200b9bc:	e0bfc915 	stw	r2,-220(fp)
 200b9c0:	e0bfc917 	ldw	r2,-220(fp)
 200b9c4:	10800210 	cmplti	r2,r2,8
 200b9c8:	1000071e 	bne	r2,zero,200b9e8 <___vfprintf_internal_r+0x1ea8>
 200b9cc:	e0bfc804 	addi	r2,fp,-224
 200b9d0:	100d883a 	mov	r6,r2
 200b9d4:	e17fe717 	ldw	r5,-100(fp)
 200b9d8:	e13fe617 	ldw	r4,-104(fp)
 200b9dc:	20139c80 	call	20139c8 <__sprint_r>
 200b9e0:	10006b1e 	bne	r2,zero,200bb90 <___vfprintf_internal_r+0x2050>
 200b9e4:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 200b9e8:	e0ffad17 	ldw	r3,-332(fp)
 200b9ec:	e0bfb517 	ldw	r2,-300(fp)
 200b9f0:	10c0010e 	bge	r2,r3,200b9f8 <___vfprintf_internal_r+0x1eb8>
 200b9f4:	1805883a 	mov	r2,r3
 200b9f8:	e0ffac17 	ldw	r3,-336(fp)
 200b9fc:	1885883a 	add	r2,r3,r2
 200ba00:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 200ba04:	e0bfca17 	ldw	r2,-216(fp)
 200ba08:	10000626 	beq	r2,zero,200ba24 <___vfprintf_internal_r+0x1ee4>
 200ba0c:	e0bfc804 	addi	r2,fp,-224
 200ba10:	100d883a 	mov	r6,r2
 200ba14:	e17fe717 	ldw	r5,-100(fp)
 200ba18:	e13fe617 	ldw	r4,-104(fp)
 200ba1c:	20139c80 	call	20139c8 <__sprint_r>
 200ba20:	10005d1e 	bne	r2,zero,200bb98 <___vfprintf_internal_r+0x2058>
 200ba24:	e03fc915 	stw	zero,-220(fp)
 200ba28:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 200ba2c:	e0bfb817 	ldw	r2,-288(fp)
 200ba30:	1038a026 	beq	r2,zero,2009cb4 <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 200ba34:	e17fb817 	ldw	r5,-288(fp)
 200ba38:	e13fe617 	ldw	r4,-104(fp)
 200ba3c:	200e9cc0 	call	200e9cc <_free_r>
			malloc_buf = NULL;
 200ba40:	e03fb815 	stw	zero,-288(fp)
		}
	}
 200ba44:	00389b06 	br	2009cb4 <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 200ba48:	0001883a 	nop
 200ba4c:	00000106 	br	200ba54 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 200ba50:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200ba54:	e0bfca17 	ldw	r2,-216(fp)
 200ba58:	10000626 	beq	r2,zero,200ba74 <___vfprintf_internal_r+0x1f34>
 200ba5c:	e0bfc804 	addi	r2,fp,-224
 200ba60:	100d883a 	mov	r6,r2
 200ba64:	e17fe717 	ldw	r5,-100(fp)
 200ba68:	e13fe617 	ldw	r4,-104(fp)
 200ba6c:	20139c80 	call	20139c8 <__sprint_r>
 200ba70:	10004b1e 	bne	r2,zero,200bba0 <___vfprintf_internal_r+0x2060>
 200ba74:	e03fc915 	stw	zero,-220(fp)
 200ba78:	e47fcb04 	addi	r17,fp,-212
 200ba7c:	00004906 	br	200bba4 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 200ba80:	0001883a 	nop
 200ba84:	00004706 	br	200bba4 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 200ba88:	0001883a 	nop
 200ba8c:	00004506 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200ba90:	0001883a 	nop
 200ba94:	00004306 	br	200bba4 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 200ba98:	0001883a 	nop
 200ba9c:	00004106 	br	200bba4 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 200baa0:	0001883a 	nop
 200baa4:	00003f06 	br	200bba4 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 200baa8:	0001883a 	nop
 200baac:	00003d06 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bab0:	0001883a 	nop
 200bab4:	00003b06 	br	200bba4 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200bab8:	0001883a 	nop
 200babc:	00003906 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bac0:	0001883a 	nop
 200bac4:	00003706 	br	200bba4 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 200bac8:	0001883a 	nop
 200bacc:	00003506 	br	200bba4 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 200bad0:	0001883a 	nop
 200bad4:	00003306 	br	200bba4 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 200bad8:	0001883a 	nop
 200badc:	00003106 	br	200bba4 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 200bae0:	0001883a 	nop
 200bae4:	00002f06 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bae8:	0001883a 	nop
 200baec:	00002d06 	br	200bba4 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 200baf0:	0001883a 	nop
 200baf4:	00002b06 	br	200bba4 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 200baf8:	0001883a 	nop
 200bafc:	00002906 	br	200bba4 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 200bb00:	0001883a 	nop
 200bb04:	00002706 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bb08:	0001883a 	nop
 200bb0c:	00002506 	br	200bba4 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 200bb10:	0001883a 	nop
 200bb14:	00002306 	br	200bba4 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 200bb18:	0001883a 	nop
 200bb1c:	00002106 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bb20:	0001883a 	nop
 200bb24:	00001f06 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bb28:	0001883a 	nop
 200bb2c:	00001d06 	br	200bba4 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 200bb30:	0001883a 	nop
 200bb34:	00001b06 	br	200bba4 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 200bb38:	0001883a 	nop
 200bb3c:	00001906 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bb40:	0001883a 	nop
 200bb44:	00001706 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bb48:	0001883a 	nop
 200bb4c:	00001506 	br	200bba4 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 200bb50:	0001883a 	nop
 200bb54:	00001306 	br	200bba4 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 200bb58:	0001883a 	nop
 200bb5c:	00001106 	br	200bba4 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 200bb60:	0001883a 	nop
 200bb64:	00000f06 	br	200bba4 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 200bb68:	0001883a 	nop
 200bb6c:	00000d06 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bb70:	0001883a 	nop
 200bb74:	00000b06 	br	200bba4 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 200bb78:	0001883a 	nop
 200bb7c:	00000906 	br	200bba4 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 200bb80:	0001883a 	nop
 200bb84:	00000706 	br	200bba4 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 200bb88:	0001883a 	nop
 200bb8c:	00000506 	br	200bba4 <___vfprintf_internal_r+0x2064>
 200bb90:	0001883a 	nop
 200bb94:	00000306 	br	200bba4 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 200bb98:	0001883a 	nop
 200bb9c:	00000106 	br	200bba4 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200bba0:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 200bba4:	e0bfb817 	ldw	r2,-288(fp)
 200bba8:	10000326 	beq	r2,zero,200bbb8 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 200bbac:	e17fb817 	ldw	r5,-288(fp)
 200bbb0:	e13fe617 	ldw	r4,-104(fp)
 200bbb4:	200e9cc0 	call	200e9cc <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 200bbb8:	e0bfe717 	ldw	r2,-100(fp)
 200bbbc:	1080030b 	ldhu	r2,12(r2)
 200bbc0:	10bfffcc 	andi	r2,r2,65535
 200bbc4:	1080100c 	andi	r2,r2,64
 200bbc8:	1000021e 	bne	r2,zero,200bbd4 <___vfprintf_internal_r+0x2094>
 200bbcc:	e0bfac17 	ldw	r2,-336(fp)
 200bbd0:	00000206 	br	200bbdc <___vfprintf_internal_r+0x209c>
 200bbd4:	00bfffc4 	movi	r2,-1
 200bbd8:	0001883a 	nop
	/* NOTREACHED */
}
 200bbdc:	e6fff804 	addi	sp,fp,-32
 200bbe0:	dfc00917 	ldw	ra,36(sp)
 200bbe4:	df000817 	ldw	fp,32(sp)
 200bbe8:	ddc00717 	ldw	r23,28(sp)
 200bbec:	dd800617 	ldw	r22,24(sp)
 200bbf0:	dd400517 	ldw	r21,20(sp)
 200bbf4:	dd000417 	ldw	r20,16(sp)
 200bbf8:	dcc00317 	ldw	r19,12(sp)
 200bbfc:	dc800217 	ldw	r18,8(sp)
 200bc00:	dc400117 	ldw	r17,4(sp)
 200bc04:	dc000017 	ldw	r16,0(sp)
 200bc08:	dec00a04 	addi	sp,sp,40
 200bc0c:	f800283a 	ret

0200bc10 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 200bc10:	deffef04 	addi	sp,sp,-68
 200bc14:	dfc01015 	stw	ra,64(sp)
 200bc18:	df000f15 	stw	fp,60(sp)
 200bc1c:	df000f04 	addi	fp,sp,60
 200bc20:	e13ffc15 	stw	r4,-16(fp)
 200bc24:	e17ffd15 	stw	r5,-12(fp)
 200bc28:	e1bffe15 	stw	r6,-8(fp)
 200bc2c:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 200bc30:	e0bffd17 	ldw	r2,-12(fp)
 200bc34:	e0bffa15 	stw	r2,-24(fp)
 200bc38:	e0bffe17 	ldw	r2,-8(fp)
 200bc3c:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 200bc40:	e0bffb17 	ldw	r2,-20(fp)
 200bc44:	1000090e 	bge	r2,zero,200bc6c <cvt+0x5c>
		value = -value;
 200bc48:	e0bffd17 	ldw	r2,-12(fp)
 200bc4c:	e0bffd15 	stw	r2,-12(fp)
 200bc50:	e0bffe17 	ldw	r2,-8(fp)
 200bc54:	10a0003c 	xorhi	r2,r2,32768
 200bc58:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 200bc5c:	e0800317 	ldw	r2,12(fp)
 200bc60:	00c00b44 	movi	r3,45
 200bc64:	10c00005 	stb	r3,0(r2)
 200bc68:	00000206 	br	200bc74 <cvt+0x64>
	} else
		*sign = '\000';
 200bc6c:	e0800317 	ldw	r2,12(fp)
 200bc70:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 200bc74:	e0800517 	ldw	r2,20(fp)
 200bc78:	108019a0 	cmpeqi	r2,r2,102
 200bc7c:	1000031e 	bne	r2,zero,200bc8c <cvt+0x7c>
 200bc80:	e0800517 	ldw	r2,20(fp)
 200bc84:	10801198 	cmpnei	r2,r2,70
 200bc88:	1000031e 	bne	r2,zero,200bc98 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 200bc8c:	008000c4 	movi	r2,3
 200bc90:	e0bff515 	stw	r2,-44(fp)
 200bc94:	00000b06 	br	200bcc4 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 200bc98:	e0800517 	ldw	r2,20(fp)
 200bc9c:	10801960 	cmpeqi	r2,r2,101
 200bca0:	1000031e 	bne	r2,zero,200bcb0 <cvt+0xa0>
 200bca4:	e0800517 	ldw	r2,20(fp)
 200bca8:	10801158 	cmpnei	r2,r2,69
 200bcac:	1000031e 	bne	r2,zero,200bcbc <cvt+0xac>
			ndigits++;
 200bcb0:	e0bfff17 	ldw	r2,-4(fp)
 200bcb4:	10800044 	addi	r2,r2,1
 200bcb8:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 200bcbc:	00800084 	movi	r2,2
 200bcc0:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 200bcc4:	e0bff904 	addi	r2,fp,-28
 200bcc8:	d8800315 	stw	r2,12(sp)
 200bccc:	e0bff804 	addi	r2,fp,-32
 200bcd0:	d8800215 	stw	r2,8(sp)
 200bcd4:	e0800417 	ldw	r2,16(fp)
 200bcd8:	d8800115 	stw	r2,4(sp)
 200bcdc:	e0bfff17 	ldw	r2,-4(fp)
 200bce0:	d8800015 	stw	r2,0(sp)
 200bce4:	e1fff517 	ldw	r7,-44(fp)
 200bce8:	e17ffd17 	ldw	r5,-12(fp)
 200bcec:	e1bffe17 	ldw	r6,-8(fp)
 200bcf0:	e13ffc17 	ldw	r4,-16(fp)
 200bcf4:	200c4b00 	call	200c4b0 <_dtoa_r>
 200bcf8:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 200bcfc:	e0800517 	ldw	r2,20(fp)
 200bd00:	108019e0 	cmpeqi	r2,r2,103
 200bd04:	1000031e 	bne	r2,zero,200bd14 <cvt+0x104>
 200bd08:	e0800517 	ldw	r2,20(fp)
 200bd0c:	108011d8 	cmpnei	r2,r2,71
 200bd10:	1000031e 	bne	r2,zero,200bd20 <cvt+0x110>
 200bd14:	e0800217 	ldw	r2,8(fp)
 200bd18:	1080004c 	andi	r2,r2,1
 200bd1c:	10003326 	beq	r2,zero,200bdec <cvt+0x1dc>
		bp = digits + ndigits;
 200bd20:	e0bfff17 	ldw	r2,-4(fp)
 200bd24:	e0fff717 	ldw	r3,-36(fp)
 200bd28:	1885883a 	add	r2,r3,r2
 200bd2c:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 200bd30:	e0800517 	ldw	r2,20(fp)
 200bd34:	108019a0 	cmpeqi	r2,r2,102
 200bd38:	1000031e 	bne	r2,zero,200bd48 <cvt+0x138>
 200bd3c:	e0800517 	ldw	r2,20(fp)
 200bd40:	10801198 	cmpnei	r2,r2,70
 200bd44:	1000181e 	bne	r2,zero,200bda8 <cvt+0x198>
			if (*digits == '0' && value)
 200bd48:	e0bff717 	ldw	r2,-36(fp)
 200bd4c:	10800003 	ldbu	r2,0(r2)
 200bd50:	10803fcc 	andi	r2,r2,255
 200bd54:	1080201c 	xori	r2,r2,128
 200bd58:	10bfe004 	addi	r2,r2,-128
 200bd5c:	10800c18 	cmpnei	r2,r2,48
 200bd60:	10000b1e 	bne	r2,zero,200bd90 <cvt+0x180>
 200bd64:	000d883a 	mov	r6,zero
 200bd68:	000f883a 	mov	r7,zero
 200bd6c:	e13ffd17 	ldw	r4,-12(fp)
 200bd70:	e17ffe17 	ldw	r5,-8(fp)
 200bd74:	2007dfc0 	call	2007dfc <__eqdf2>
 200bd78:	10000526 	beq	r2,zero,200bd90 <cvt+0x180>
				*decpt = -ndigits + 1;
 200bd7c:	00c00044 	movi	r3,1
 200bd80:	e0bfff17 	ldw	r2,-4(fp)
 200bd84:	1887c83a 	sub	r3,r3,r2
 200bd88:	e0800417 	ldw	r2,16(fp)
 200bd8c:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 200bd90:	e0800417 	ldw	r2,16(fp)
 200bd94:	10800017 	ldw	r2,0(r2)
 200bd98:	1007883a 	mov	r3,r2
 200bd9c:	e0bff617 	ldw	r2,-40(fp)
 200bda0:	10c5883a 	add	r2,r2,r3
 200bda4:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 200bda8:	000d883a 	mov	r6,zero
 200bdac:	000f883a 	mov	r7,zero
 200bdb0:	e13ffd17 	ldw	r4,-12(fp)
 200bdb4:	e17ffe17 	ldw	r5,-8(fp)
 200bdb8:	2007dfc0 	call	2007dfc <__eqdf2>
 200bdbc:	1000081e 	bne	r2,zero,200bde0 <cvt+0x1d0>
			rve = bp;
 200bdc0:	e0bff617 	ldw	r2,-40(fp)
 200bdc4:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 200bdc8:	00000506 	br	200bde0 <cvt+0x1d0>
			*rve++ = '0';
 200bdcc:	e0bff917 	ldw	r2,-28(fp)
 200bdd0:	10c00044 	addi	r3,r2,1
 200bdd4:	e0fff915 	stw	r3,-28(fp)
 200bdd8:	00c00c04 	movi	r3,48
 200bddc:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 200bde0:	e0fff917 	ldw	r3,-28(fp)
 200bde4:	e0bff617 	ldw	r2,-40(fp)
 200bde8:	18bff836 	bltu	r3,r2,200bdcc <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 200bdec:	e0bff917 	ldw	r2,-28(fp)
 200bdf0:	1007883a 	mov	r3,r2
 200bdf4:	e0bff717 	ldw	r2,-36(fp)
 200bdf8:	1887c83a 	sub	r3,r3,r2
 200bdfc:	e0800617 	ldw	r2,24(fp)
 200be00:	10c00015 	stw	r3,0(r2)
	return (digits);
 200be04:	e0bff717 	ldw	r2,-36(fp)
}
 200be08:	e037883a 	mov	sp,fp
 200be0c:	dfc00117 	ldw	ra,4(sp)
 200be10:	df000017 	ldw	fp,0(sp)
 200be14:	dec00204 	addi	sp,sp,8
 200be18:	f800283a 	ret

0200be1c <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 200be1c:	defff704 	addi	sp,sp,-36
 200be20:	dfc00815 	stw	ra,32(sp)
 200be24:	df000715 	stw	fp,28(sp)
 200be28:	dc400615 	stw	r17,24(sp)
 200be2c:	dc000515 	stw	r16,20(sp)
 200be30:	df000704 	addi	fp,sp,28
 200be34:	e13ffb15 	stw	r4,-20(fp)
 200be38:	e17ffc15 	stw	r5,-16(fp)
 200be3c:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 200be40:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 200be44:	8805883a 	mov	r2,r17
 200be48:	14400044 	addi	r17,r2,1
 200be4c:	e0fffd17 	ldw	r3,-12(fp)
 200be50:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 200be54:	e0bffc17 	ldw	r2,-16(fp)
 200be58:	1000080e 	bge	r2,zero,200be7c <exponent+0x60>
		exp = -exp;
 200be5c:	e0bffc17 	ldw	r2,-16(fp)
 200be60:	0085c83a 	sub	r2,zero,r2
 200be64:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 200be68:	8805883a 	mov	r2,r17
 200be6c:	14400044 	addi	r17,r2,1
 200be70:	00c00b44 	movi	r3,45
 200be74:	10c00005 	stb	r3,0(r2)
 200be78:	00000406 	br	200be8c <exponent+0x70>
	}
	else
		*p++ = '+';
 200be7c:	8805883a 	mov	r2,r17
 200be80:	14400044 	addi	r17,r2,1
 200be84:	00c00ac4 	movi	r3,43
 200be88:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 200be8c:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 200be90:	e0bffc17 	ldw	r2,-16(fp)
 200be94:	10800290 	cmplti	r2,r2,10
 200be98:	10001d1e 	bne	r2,zero,200bf10 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 200be9c:	843fffc4 	addi	r16,r16,-1
 200bea0:	e0bffc17 	ldw	r2,-16(fp)
 200bea4:	01400284 	movi	r5,10
 200bea8:	1009883a 	mov	r4,r2
 200beac:	2006b380 	call	2006b38 <__modsi3>
 200beb0:	10800c04 	addi	r2,r2,48
 200beb4:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 200beb8:	e0bffc17 	ldw	r2,-16(fp)
 200bebc:	01400284 	movi	r5,10
 200bec0:	1009883a 	mov	r4,r2
 200bec4:	2006ab40 	call	2006ab4 <__divsi3>
 200bec8:	e0bffc15 	stw	r2,-16(fp)
 200becc:	e0bffc17 	ldw	r2,-16(fp)
 200bed0:	10800288 	cmpgei	r2,r2,10
 200bed4:	103ff11e 	bne	r2,zero,200be9c <exponent+0x80>
		*--t = to_char (exp);
 200bed8:	843fffc4 	addi	r16,r16,-1
 200bedc:	e0bffc17 	ldw	r2,-16(fp)
 200bee0:	10800c04 	addi	r2,r2,48
 200bee4:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 200bee8:	00000606 	br	200bf04 <exponent+0xe8>
 200beec:	8805883a 	mov	r2,r17
 200bef0:	14400044 	addi	r17,r2,1
 200bef4:	8007883a 	mov	r3,r16
 200bef8:	1c000044 	addi	r16,r3,1
 200befc:	18c00003 	ldbu	r3,0(r3)
 200bf00:	10c00005 	stb	r3,0(r2)
 200bf04:	e0bffac4 	addi	r2,fp,-21
 200bf08:	80bff836 	bltu	r16,r2,200beec <exponent+0xd0>
 200bf0c:	00000906 	br	200bf34 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 200bf10:	8805883a 	mov	r2,r17
 200bf14:	14400044 	addi	r17,r2,1
 200bf18:	00c00c04 	movi	r3,48
 200bf1c:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 200bf20:	8805883a 	mov	r2,r17
 200bf24:	14400044 	addi	r17,r2,1
 200bf28:	e0fffc17 	ldw	r3,-16(fp)
 200bf2c:	18c00c04 	addi	r3,r3,48
 200bf30:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 200bf34:	8807883a 	mov	r3,r17
 200bf38:	e0bffb17 	ldw	r2,-20(fp)
 200bf3c:	1885c83a 	sub	r2,r3,r2
}
 200bf40:	e6fffe04 	addi	sp,fp,-8
 200bf44:	dfc00317 	ldw	ra,12(sp)
 200bf48:	df000217 	ldw	fp,8(sp)
 200bf4c:	dc400117 	ldw	r17,4(sp)
 200bf50:	dc000017 	ldw	r16,0(sp)
 200bf54:	dec00404 	addi	sp,sp,16
 200bf58:	f800283a 	ret

0200bf5c <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200bf5c:	defffb04 	addi	sp,sp,-20
 200bf60:	dfc00415 	stw	ra,16(sp)
 200bf64:	df000315 	stw	fp,12(sp)
 200bf68:	dc000215 	stw	r16,8(sp)
 200bf6c:	df000304 	addi	fp,sp,12
 200bf70:	e13ffe15 	stw	r4,-8(fp)
 200bf74:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 200bf78:	d0a03017 	ldw	r2,-32576(gp)
 200bf7c:	e0bffd15 	stw	r2,-12(fp)
 200bf80:	e0bffd17 	ldw	r2,-12(fp)
 200bf84:	10000526 	beq	r2,zero,200bf9c <__swsetup_r+0x40>
 200bf88:	e0bffd17 	ldw	r2,-12(fp)
 200bf8c:	10800e17 	ldw	r2,56(r2)
 200bf90:	1000021e 	bne	r2,zero,200bf9c <__swsetup_r+0x40>
 200bf94:	e13ffd17 	ldw	r4,-12(fp)
 200bf98:	200e7ac0 	call	200e7ac <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 200bf9c:	8080030b 	ldhu	r2,12(r16)
 200bfa0:	10bfffcc 	andi	r2,r2,65535
 200bfa4:	1080020c 	andi	r2,r2,8
 200bfa8:	1000241e 	bne	r2,zero,200c03c <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 200bfac:	8080030b 	ldhu	r2,12(r16)
 200bfb0:	10bfffcc 	andi	r2,r2,65535
 200bfb4:	1080040c 	andi	r2,r2,16
 200bfb8:	1000081e 	bne	r2,zero,200bfdc <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 200bfbc:	e0bffe17 	ldw	r2,-8(fp)
 200bfc0:	00c00244 	movi	r3,9
 200bfc4:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 200bfc8:	8080030b 	ldhu	r2,12(r16)
 200bfcc:	10801014 	ori	r2,r2,64
 200bfd0:	8080030d 	sth	r2,12(r16)
	  return EOF;
 200bfd4:	00bfffc4 	movi	r2,-1
 200bfd8:	00004206 	br	200c0e4 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 200bfdc:	8080030b 	ldhu	r2,12(r16)
 200bfe0:	10bfffcc 	andi	r2,r2,65535
 200bfe4:	1080010c 	andi	r2,r2,4
 200bfe8:	10001126 	beq	r2,zero,200c030 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 200bfec:	80800c17 	ldw	r2,48(r16)
 200bff0:	10000826 	beq	r2,zero,200c014 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 200bff4:	80c00c17 	ldw	r3,48(r16)
 200bff8:	80801004 	addi	r2,r16,64
 200bffc:	18800426 	beq	r3,r2,200c010 <__swsetup_r+0xb4>
 200c000:	80800c17 	ldw	r2,48(r16)
 200c004:	100b883a 	mov	r5,r2
 200c008:	e13ffe17 	ldw	r4,-8(fp)
 200c00c:	200e9cc0 	call	200e9cc <_free_r>
 200c010:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 200c014:	80c0030b 	ldhu	r3,12(r16)
 200c018:	00bff6c4 	movi	r2,-37
 200c01c:	1884703a 	and	r2,r3,r2
 200c020:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 200c024:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 200c028:	80800417 	ldw	r2,16(r16)
 200c02c:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 200c030:	8080030b 	ldhu	r2,12(r16)
 200c034:	10800214 	ori	r2,r2,8
 200c038:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 200c03c:	80800417 	ldw	r2,16(r16)
 200c040:	10000b1e 	bne	r2,zero,200c070 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 200c044:	8080030b 	ldhu	r2,12(r16)
 200c048:	10bfffcc 	andi	r2,r2,65535
 200c04c:	1080800c 	andi	r2,r2,512
 200c050:	10000426 	beq	r2,zero,200c064 <__swsetup_r+0x108>
 200c054:	8080030b 	ldhu	r2,12(r16)
 200c058:	10bfffcc 	andi	r2,r2,65535
 200c05c:	1080200c 	andi	r2,r2,128
 200c060:	10000326 	beq	r2,zero,200c070 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 200c064:	800b883a 	mov	r5,r16
 200c068:	e13ffe17 	ldw	r4,-8(fp)
 200c06c:	200fa2c0 	call	200fa2c <__smakebuf_r>

  if (fp->_flags & __SLBF)
 200c070:	8080030b 	ldhu	r2,12(r16)
 200c074:	10bfffcc 	andi	r2,r2,65535
 200c078:	1080004c 	andi	r2,r2,1
 200c07c:	10000526 	beq	r2,zero,200c094 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 200c080:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 200c084:	80800517 	ldw	r2,20(r16)
 200c088:	0085c83a 	sub	r2,zero,r2
 200c08c:	80800615 	stw	r2,24(r16)
 200c090:	00000806 	br	200c0b4 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 200c094:	8080030b 	ldhu	r2,12(r16)
 200c098:	10bfffcc 	andi	r2,r2,65535
 200c09c:	1080008c 	andi	r2,r2,2
 200c0a0:	1000021e 	bne	r2,zero,200c0ac <__swsetup_r+0x150>
 200c0a4:	80800517 	ldw	r2,20(r16)
 200c0a8:	00000106 	br	200c0b0 <__swsetup_r+0x154>
 200c0ac:	0005883a 	mov	r2,zero
 200c0b0:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 200c0b4:	80800417 	ldw	r2,16(r16)
 200c0b8:	1000091e 	bne	r2,zero,200c0e0 <__swsetup_r+0x184>
 200c0bc:	8080030b 	ldhu	r2,12(r16)
 200c0c0:	10bfffcc 	andi	r2,r2,65535
 200c0c4:	1080200c 	andi	r2,r2,128
 200c0c8:	10000526 	beq	r2,zero,200c0e0 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 200c0cc:	8080030b 	ldhu	r2,12(r16)
 200c0d0:	10801014 	ori	r2,r2,64
 200c0d4:	8080030d 	sth	r2,12(r16)
      return EOF;
 200c0d8:	00bfffc4 	movi	r2,-1
 200c0dc:	00000106 	br	200c0e4 <__swsetup_r+0x188>
    }
  return 0;
 200c0e0:	0005883a 	mov	r2,zero
}
 200c0e4:	e6ffff04 	addi	sp,fp,-4
 200c0e8:	dfc00217 	ldw	ra,8(sp)
 200c0ec:	df000117 	ldw	fp,4(sp)
 200c0f0:	dc000017 	ldw	r16,0(sp)
 200c0f4:	dec00304 	addi	sp,sp,12
 200c0f8:	f800283a 	ret

0200c0fc <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 200c0fc:	deffef04 	addi	sp,sp,-68
 200c100:	dfc01015 	stw	ra,64(sp)
 200c104:	df000f15 	stw	fp,60(sp)
 200c108:	df000f04 	addi	fp,sp,60
 200c10c:	e13ffe15 	stw	r4,-8(fp)
 200c110:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 200c114:	e0bfff17 	ldw	r2,-4(fp)
 200c118:	10800417 	ldw	r2,16(r2)
 200c11c:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 200c120:	e0bffe17 	ldw	r2,-8(fp)
 200c124:	10c00417 	ldw	r3,16(r2)
 200c128:	e0bff117 	ldw	r2,-60(fp)
 200c12c:	1880020e 	bge	r3,r2,200c138 <quorem+0x3c>
    return 0;
 200c130:	0005883a 	mov	r2,zero
 200c134:	0000d906 	br	200c49c <quorem+0x3a0>
  sx = S->_x;
 200c138:	e0bfff17 	ldw	r2,-4(fp)
 200c13c:	10800504 	addi	r2,r2,20
 200c140:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 200c144:	e0bff117 	ldw	r2,-60(fp)
 200c148:	10bfffc4 	addi	r2,r2,-1
 200c14c:	e0bff115 	stw	r2,-60(fp)
 200c150:	e0bff117 	ldw	r2,-60(fp)
 200c154:	1085883a 	add	r2,r2,r2
 200c158:	1085883a 	add	r2,r2,r2
 200c15c:	1007883a 	mov	r3,r2
 200c160:	e0bff717 	ldw	r2,-36(fp)
 200c164:	10c5883a 	add	r2,r2,r3
 200c168:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 200c16c:	e0bffe17 	ldw	r2,-8(fp)
 200c170:	10800504 	addi	r2,r2,20
 200c174:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 200c178:	e0bff117 	ldw	r2,-60(fp)
 200c17c:	1085883a 	add	r2,r2,r2
 200c180:	1085883a 	add	r2,r2,r2
 200c184:	1007883a 	mov	r3,r2
 200c188:	e0bff517 	ldw	r2,-44(fp)
 200c18c:	10c5883a 	add	r2,r2,r3
 200c190:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 200c194:	e0bff617 	ldw	r2,-40(fp)
 200c198:	10c00017 	ldw	r3,0(r2)
 200c19c:	e0bff817 	ldw	r2,-32(fp)
 200c1a0:	10800017 	ldw	r2,0(r2)
 200c1a4:	10800044 	addi	r2,r2,1
 200c1a8:	100b883a 	mov	r5,r2
 200c1ac:	1809883a 	mov	r4,r3
 200c1b0:	2006bac0 	call	2006bac <__udivsi3>
 200c1b4:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 200c1b8:	e0bff417 	ldw	r2,-48(fp)
 200c1bc:	10005326 	beq	r2,zero,200c30c <quorem+0x210>
    {
      borrow = 0;
 200c1c0:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200c1c4:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 200c1c8:	e0bff717 	ldw	r2,-36(fp)
 200c1cc:	10c00104 	addi	r3,r2,4
 200c1d0:	e0fff715 	stw	r3,-36(fp)
 200c1d4:	10800017 	ldw	r2,0(r2)
 200c1d8:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 200c1dc:	e0bff917 	ldw	r2,-28(fp)
 200c1e0:	10ffffcc 	andi	r3,r2,65535
 200c1e4:	e0bff417 	ldw	r2,-48(fp)
 200c1e8:	1887383a 	mul	r3,r3,r2
 200c1ec:	e0bff317 	ldw	r2,-52(fp)
 200c1f0:	1885883a 	add	r2,r3,r2
 200c1f4:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 200c1f8:	e0bff917 	ldw	r2,-28(fp)
 200c1fc:	1006d43a 	srli	r3,r2,16
 200c200:	e0bff417 	ldw	r2,-48(fp)
 200c204:	1887383a 	mul	r3,r3,r2
 200c208:	e0bffa17 	ldw	r2,-24(fp)
 200c20c:	1004d43a 	srli	r2,r2,16
 200c210:	1885883a 	add	r2,r3,r2
 200c214:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 200c218:	e0bffb17 	ldw	r2,-20(fp)
 200c21c:	1004d43a 	srli	r2,r2,16
 200c220:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200c224:	e0bff517 	ldw	r2,-44(fp)
 200c228:	10800017 	ldw	r2,0(r2)
 200c22c:	10ffffcc 	andi	r3,r2,65535
 200c230:	e0bffa17 	ldw	r2,-24(fp)
 200c234:	10bfffcc 	andi	r2,r2,65535
 200c238:	1887c83a 	sub	r3,r3,r2
 200c23c:	e0bff217 	ldw	r2,-56(fp)
 200c240:	1885883a 	add	r2,r3,r2
 200c244:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 200c248:	e0bffc17 	ldw	r2,-16(fp)
 200c24c:	1005d43a 	srai	r2,r2,16
 200c250:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200c254:	e0bff517 	ldw	r2,-44(fp)
 200c258:	10800017 	ldw	r2,0(r2)
 200c25c:	1006d43a 	srli	r3,r2,16
 200c260:	e0bffb17 	ldw	r2,-20(fp)
 200c264:	10bfffcc 	andi	r2,r2,65535
 200c268:	1887c83a 	sub	r3,r3,r2
 200c26c:	e0bff217 	ldw	r2,-56(fp)
 200c270:	1885883a 	add	r2,r3,r2
 200c274:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 200c278:	e0bffd17 	ldw	r2,-12(fp)
 200c27c:	1005d43a 	srai	r2,r2,16
 200c280:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200c284:	e0bff517 	ldw	r2,-44(fp)
 200c288:	10c00104 	addi	r3,r2,4
 200c28c:	e0fff515 	stw	r3,-44(fp)
 200c290:	e0fffd17 	ldw	r3,-12(fp)
 200c294:	1808943a 	slli	r4,r3,16
 200c298:	e0fffc17 	ldw	r3,-16(fp)
 200c29c:	18ffffcc 	andi	r3,r3,65535
 200c2a0:	20c6b03a 	or	r3,r4,r3
 200c2a4:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 200c2a8:	e0bff717 	ldw	r2,-36(fp)
 200c2ac:	e0fff817 	ldw	r3,-32(fp)
 200c2b0:	18bfc52e 	bgeu	r3,r2,200c1c8 <quorem+0xcc>
      if (!*bxe)
 200c2b4:	e0bff617 	ldw	r2,-40(fp)
 200c2b8:	10800017 	ldw	r2,0(r2)
 200c2bc:	1000131e 	bne	r2,zero,200c30c <quorem+0x210>
	{
	  bx = b->_x;
 200c2c0:	e0bffe17 	ldw	r2,-8(fp)
 200c2c4:	10800504 	addi	r2,r2,20
 200c2c8:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 200c2cc:	00000306 	br	200c2dc <quorem+0x1e0>
	    --n;
 200c2d0:	e0bff117 	ldw	r2,-60(fp)
 200c2d4:	10bfffc4 	addi	r2,r2,-1
 200c2d8:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 200c2dc:	e0bff617 	ldw	r2,-40(fp)
 200c2e0:	10bfff04 	addi	r2,r2,-4
 200c2e4:	e0bff615 	stw	r2,-40(fp)
 200c2e8:	e0bff617 	ldw	r2,-40(fp)
 200c2ec:	e0fff517 	ldw	r3,-44(fp)
 200c2f0:	1880032e 	bgeu	r3,r2,200c300 <quorem+0x204>
 200c2f4:	e0bff617 	ldw	r2,-40(fp)
 200c2f8:	10800017 	ldw	r2,0(r2)
 200c2fc:	103ff426 	beq	r2,zero,200c2d0 <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 200c300:	e0bffe17 	ldw	r2,-8(fp)
 200c304:	e0fff117 	ldw	r3,-60(fp)
 200c308:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 200c30c:	e17fff17 	ldw	r5,-4(fp)
 200c310:	e13ffe17 	ldw	r4,-8(fp)
 200c314:	2011d2c0 	call	2011d2c <__mcmp>
 200c318:	10005f16 	blt	r2,zero,200c498 <quorem+0x39c>
    {
      q++;
 200c31c:	e0bff417 	ldw	r2,-48(fp)
 200c320:	10800044 	addi	r2,r2,1
 200c324:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 200c328:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200c32c:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 200c330:	e0bffe17 	ldw	r2,-8(fp)
 200c334:	10800504 	addi	r2,r2,20
 200c338:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 200c33c:	e0bfff17 	ldw	r2,-4(fp)
 200c340:	10800504 	addi	r2,r2,20
 200c344:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 200c348:	e0bff717 	ldw	r2,-36(fp)
 200c34c:	10c00104 	addi	r3,r2,4
 200c350:	e0fff715 	stw	r3,-36(fp)
 200c354:	10800017 	ldw	r2,0(r2)
 200c358:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 200c35c:	e0bff917 	ldw	r2,-28(fp)
 200c360:	10ffffcc 	andi	r3,r2,65535
 200c364:	e0bff317 	ldw	r2,-52(fp)
 200c368:	1885883a 	add	r2,r3,r2
 200c36c:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 200c370:	e0bff917 	ldw	r2,-28(fp)
 200c374:	1006d43a 	srli	r3,r2,16
 200c378:	e0bffa17 	ldw	r2,-24(fp)
 200c37c:	1004d43a 	srli	r2,r2,16
 200c380:	1885883a 	add	r2,r3,r2
 200c384:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 200c388:	e0bffb17 	ldw	r2,-20(fp)
 200c38c:	1004d43a 	srli	r2,r2,16
 200c390:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200c394:	e0bff517 	ldw	r2,-44(fp)
 200c398:	10800017 	ldw	r2,0(r2)
 200c39c:	10ffffcc 	andi	r3,r2,65535
 200c3a0:	e0bffa17 	ldw	r2,-24(fp)
 200c3a4:	10bfffcc 	andi	r2,r2,65535
 200c3a8:	1887c83a 	sub	r3,r3,r2
 200c3ac:	e0bff217 	ldw	r2,-56(fp)
 200c3b0:	1885883a 	add	r2,r3,r2
 200c3b4:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 200c3b8:	e0bffc17 	ldw	r2,-16(fp)
 200c3bc:	1005d43a 	srai	r2,r2,16
 200c3c0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200c3c4:	e0bff517 	ldw	r2,-44(fp)
 200c3c8:	10800017 	ldw	r2,0(r2)
 200c3cc:	1006d43a 	srli	r3,r2,16
 200c3d0:	e0bffb17 	ldw	r2,-20(fp)
 200c3d4:	10bfffcc 	andi	r2,r2,65535
 200c3d8:	1887c83a 	sub	r3,r3,r2
 200c3dc:	e0bff217 	ldw	r2,-56(fp)
 200c3e0:	1885883a 	add	r2,r3,r2
 200c3e4:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 200c3e8:	e0bffd17 	ldw	r2,-12(fp)
 200c3ec:	1005d43a 	srai	r2,r2,16
 200c3f0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200c3f4:	e0bff517 	ldw	r2,-44(fp)
 200c3f8:	10c00104 	addi	r3,r2,4
 200c3fc:	e0fff515 	stw	r3,-44(fp)
 200c400:	e0fffd17 	ldw	r3,-12(fp)
 200c404:	1808943a 	slli	r4,r3,16
 200c408:	e0fffc17 	ldw	r3,-16(fp)
 200c40c:	18ffffcc 	andi	r3,r3,65535
 200c410:	20c6b03a 	or	r3,r4,r3
 200c414:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 200c418:	e0bff717 	ldw	r2,-36(fp)
 200c41c:	e0fff817 	ldw	r3,-32(fp)
 200c420:	18bfc92e 	bgeu	r3,r2,200c348 <quorem+0x24c>
      bx = b->_x;
 200c424:	e0bffe17 	ldw	r2,-8(fp)
 200c428:	10800504 	addi	r2,r2,20
 200c42c:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 200c430:	e0bff117 	ldw	r2,-60(fp)
 200c434:	1085883a 	add	r2,r2,r2
 200c438:	1085883a 	add	r2,r2,r2
 200c43c:	1007883a 	mov	r3,r2
 200c440:	e0bff517 	ldw	r2,-44(fp)
 200c444:	10c5883a 	add	r2,r2,r3
 200c448:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 200c44c:	e0bff617 	ldw	r2,-40(fp)
 200c450:	10800017 	ldw	r2,0(r2)
 200c454:	1000101e 	bne	r2,zero,200c498 <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 200c458:	00000306 	br	200c468 <quorem+0x36c>
	    --n;
 200c45c:	e0bff117 	ldw	r2,-60(fp)
 200c460:	10bfffc4 	addi	r2,r2,-1
 200c464:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 200c468:	e0bff617 	ldw	r2,-40(fp)
 200c46c:	10bfff04 	addi	r2,r2,-4
 200c470:	e0bff615 	stw	r2,-40(fp)
 200c474:	e0bff617 	ldw	r2,-40(fp)
 200c478:	e0fff517 	ldw	r3,-44(fp)
 200c47c:	1880032e 	bgeu	r3,r2,200c48c <quorem+0x390>
 200c480:	e0bff617 	ldw	r2,-40(fp)
 200c484:	10800017 	ldw	r2,0(r2)
 200c488:	103ff426 	beq	r2,zero,200c45c <quorem+0x360>
	    --n;
	  b->_wds = n;
 200c48c:	e0bffe17 	ldw	r2,-8(fp)
 200c490:	e0fff117 	ldw	r3,-60(fp)
 200c494:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 200c498:	e0bff417 	ldw	r2,-48(fp)
}
 200c49c:	e037883a 	mov	sp,fp
 200c4a0:	dfc00117 	ldw	ra,4(sp)
 200c4a4:	df000017 	ldw	fp,0(sp)
 200c4a8:	dec00204 	addi	sp,sp,8
 200c4ac:	f800283a 	ret

0200c4b0 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 200c4b0:	deffcc04 	addi	sp,sp,-208
 200c4b4:	dfc03315 	stw	ra,204(sp)
 200c4b8:	df003215 	stw	fp,200(sp)
 200c4bc:	dcc03115 	stw	r19,196(sp)
 200c4c0:	dc803015 	stw	r18,192(sp)
 200c4c4:	dc402f15 	stw	r17,188(sp)
 200c4c8:	dc002e15 	stw	r16,184(sp)
 200c4cc:	df003204 	addi	fp,sp,200
 200c4d0:	e13ff815 	stw	r4,-32(fp)
 200c4d4:	e17ff915 	stw	r5,-28(fp)
 200c4d8:	e1bffa15 	stw	r6,-24(fp)
 200c4dc:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 200c4e0:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 200c4e4:	e0bff917 	ldw	r2,-28(fp)
 200c4e8:	e0bff215 	stw	r2,-56(fp)
 200c4ec:	e0bffa17 	ldw	r2,-24(fp)
 200c4f0:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 200c4f4:	e0bff817 	ldw	r2,-32(fp)
 200c4f8:	10801017 	ldw	r2,64(r2)
 200c4fc:	10001326 	beq	r2,zero,200c54c <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 200c500:	e0bff817 	ldw	r2,-32(fp)
 200c504:	10801017 	ldw	r2,64(r2)
 200c508:	e0fff817 	ldw	r3,-32(fp)
 200c50c:	18c01117 	ldw	r3,68(r3)
 200c510:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 200c514:	e0bff817 	ldw	r2,-32(fp)
 200c518:	10801017 	ldw	r2,64(r2)
 200c51c:	e0fff817 	ldw	r3,-32(fp)
 200c520:	18c01117 	ldw	r3,68(r3)
 200c524:	01000044 	movi	r4,1
 200c528:	20c6983a 	sll	r3,r4,r3
 200c52c:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 200c530:	e0bff817 	ldw	r2,-32(fp)
 200c534:	10801017 	ldw	r2,64(r2)
 200c538:	100b883a 	mov	r5,r2
 200c53c:	e13ff817 	ldw	r4,-32(fp)
 200c540:	201107c0 	call	201107c <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 200c544:	e0bff817 	ldw	r2,-32(fp)
 200c548:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 200c54c:	e0bff317 	ldw	r2,-52(fp)
 200c550:	1000090e 	bge	r2,zero,200c578 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 200c554:	e0800417 	ldw	r2,16(fp)
 200c558:	00c00044 	movi	r3,1
 200c55c:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 200c560:	e0fff317 	ldw	r3,-52(fp)
 200c564:	00a00034 	movhi	r2,32768
 200c568:	10bfffc4 	addi	r2,r2,-1
 200c56c:	1884703a 	and	r2,r3,r2
 200c570:	e0bff315 	stw	r2,-52(fp)
 200c574:	00000206 	br	200c580 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 200c578:	e0800417 	ldw	r2,16(fp)
 200c57c:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 200c580:	e0bff317 	ldw	r2,-52(fp)
 200c584:	10dffc2c 	andhi	r3,r2,32752
 200c588:	009ffc34 	movhi	r2,32752
 200c58c:	1880221e 	bne	r3,r2,200c618 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 200c590:	e0800317 	ldw	r2,12(fp)
 200c594:	00c9c3c4 	movi	r3,9999
 200c598:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 200c59c:	e0bff217 	ldw	r2,-56(fp)
 200c5a0:	1000081e 	bne	r2,zero,200c5c4 <_dtoa_r+0x114>
 200c5a4:	e0fff317 	ldw	r3,-52(fp)
 200c5a8:	00800434 	movhi	r2,16
 200c5ac:	10bfffc4 	addi	r2,r2,-1
 200c5b0:	1884703a 	and	r2,r3,r2
 200c5b4:	1000031e 	bne	r2,zero,200c5c4 <_dtoa_r+0x114>
 200c5b8:	008080b4 	movhi	r2,514
 200c5bc:	108a2404 	addi	r2,r2,10384
 200c5c0:	00000206 	br	200c5cc <_dtoa_r+0x11c>
 200c5c4:	008080b4 	movhi	r2,514
 200c5c8:	108a2704 	addi	r2,r2,10396
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 200c5cc:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 200c5d0:	e0800517 	ldw	r2,20(fp)
 200c5d4:	10000e26 	beq	r2,zero,200c610 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 200c5d8:	e0bfe717 	ldw	r2,-100(fp)
 200c5dc:	108000c4 	addi	r2,r2,3
 200c5e0:	10800003 	ldbu	r2,0(r2)
 200c5e4:	10803fcc 	andi	r2,r2,255
 200c5e8:	1080201c 	xori	r2,r2,128
 200c5ec:	10bfe004 	addi	r2,r2,-128
 200c5f0:	10000326 	beq	r2,zero,200c600 <_dtoa_r+0x150>
 200c5f4:	e0bfe717 	ldw	r2,-100(fp)
 200c5f8:	10800204 	addi	r2,r2,8
 200c5fc:	00000206 	br	200c608 <_dtoa_r+0x158>
 200c600:	e0bfe717 	ldw	r2,-100(fp)
 200c604:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 200c608:	e0c00517 	ldw	r3,20(fp)
 200c60c:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 200c610:	e0bfe717 	ldw	r2,-100(fp)
 200c614:	00067b06 	br	200e004 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 200c618:	e0bff217 	ldw	r2,-56(fp)
 200c61c:	e0fff317 	ldw	r3,-52(fp)
 200c620:	000d883a 	mov	r6,zero
 200c624:	000f883a 	mov	r7,zero
 200c628:	1009883a 	mov	r4,r2
 200c62c:	180b883a 	mov	r5,r3
 200c630:	2007dfc0 	call	2007dfc <__eqdf2>
 200c634:	10000e1e 	bne	r2,zero,200c670 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 200c638:	e0800317 	ldw	r2,12(fp)
 200c63c:	00c00044 	movi	r3,1
 200c640:	10c00015 	stw	r3,0(r2)
      s = "0";
 200c644:	008080b4 	movhi	r2,514
 200c648:	108a2804 	addi	r2,r2,10400
 200c64c:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 200c650:	e0800517 	ldw	r2,20(fp)
 200c654:	10000426 	beq	r2,zero,200c668 <_dtoa_r+0x1b8>
	*rve = s + 1;
 200c658:	e0bfe717 	ldw	r2,-100(fp)
 200c65c:	10c00044 	addi	r3,r2,1
 200c660:	e0800517 	ldw	r2,20(fp)
 200c664:	10c00015 	stw	r3,0(r2)
      return s;
 200c668:	e0bfe717 	ldw	r2,-100(fp)
 200c66c:	00066506 	br	200e004 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 200c670:	e0bff217 	ldw	r2,-56(fp)
 200c674:	e0fff317 	ldw	r3,-52(fp)
 200c678:	e17ff104 	addi	r5,fp,-60
 200c67c:	e13ff004 	addi	r4,fp,-64
 200c680:	d9000015 	stw	r4,0(sp)
 200c684:	280f883a 	mov	r7,r5
 200c688:	100b883a 	mov	r5,r2
 200c68c:	180d883a 	mov	r6,r3
 200c690:	e13ff817 	ldw	r4,-32(fp)
 200c694:	20123b40 	call	20123b4 <__d2b>
 200c698:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 200c69c:	e0bff317 	ldw	r2,-52(fp)
 200c6a0:	1004d53a 	srli	r2,r2,20
 200c6a4:	1081ffcc 	andi	r2,r2,2047
 200c6a8:	e0bfd215 	stw	r2,-184(fp)
 200c6ac:	e0bfd217 	ldw	r2,-184(fp)
 200c6b0:	10001126 	beq	r2,zero,200c6f8 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 200c6b4:	e0bff217 	ldw	r2,-56(fp)
 200c6b8:	e0fff317 	ldw	r3,-52(fp)
 200c6bc:	e0bff415 	stw	r2,-48(fp)
 200c6c0:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 200c6c4:	e0fff517 	ldw	r3,-44(fp)
 200c6c8:	00800434 	movhi	r2,16
 200c6cc:	10bfffc4 	addi	r2,r2,-1
 200c6d0:	1884703a 	and	r2,r3,r2
 200c6d4:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 200c6d8:	e0bff517 	ldw	r2,-44(fp)
 200c6dc:	108ffc34 	orhi	r2,r2,16368
 200c6e0:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 200c6e4:	e0bfd217 	ldw	r2,-184(fp)
 200c6e8:	10bf0044 	addi	r2,r2,-1023
 200c6ec:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 200c6f0:	e03fe015 	stw	zero,-128(fp)
 200c6f4:	00002806 	br	200c798 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 200c6f8:	e0fff017 	ldw	r3,-64(fp)
 200c6fc:	e0bff117 	ldw	r2,-60(fp)
 200c700:	1885883a 	add	r2,r3,r2
 200c704:	10810c84 	addi	r2,r2,1074
 200c708:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 200c70c:	e0bfd217 	ldw	r2,-184(fp)
 200c710:	10800850 	cmplti	r2,r2,33
 200c714:	10000b1e 	bne	r2,zero,200c744 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 200c718:	e0fff317 	ldw	r3,-52(fp)
 200c71c:	01001004 	movi	r4,64
 200c720:	e0bfd217 	ldw	r2,-184(fp)
 200c724:	2085c83a 	sub	r2,r4,r2
 200c728:	1886983a 	sll	r3,r3,r2
 200c72c:	e13ff217 	ldw	r4,-56(fp)
 200c730:	e0bfd217 	ldw	r2,-184(fp)
 200c734:	10bff804 	addi	r2,r2,-32
 200c738:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 200c73c:	1884b03a 	or	r2,r3,r2
 200c740:	00000506 	br	200c758 <_dtoa_r+0x2a8>
 200c744:	e0fff217 	ldw	r3,-56(fp)
 200c748:	01000804 	movi	r4,32
 200c74c:	e0bfd217 	ldw	r2,-184(fp)
 200c750:	2085c83a 	sub	r2,r4,r2
 200c754:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 200c758:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 200c75c:	e13fe817 	ldw	r4,-96(fp)
 200c760:	20167680 	call	2016768 <__floatunsidf>
 200c764:	1009883a 	mov	r4,r2
 200c768:	180b883a 	mov	r5,r3
 200c76c:	e13ff415 	stw	r4,-48(fp)
 200c770:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 200c774:	e0fff517 	ldw	r3,-44(fp)
 200c778:	00bf8434 	movhi	r2,65040
 200c77c:	1885883a 	add	r2,r3,r2
 200c780:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 200c784:	e0bfd217 	ldw	r2,-184(fp)
 200c788:	10bef344 	addi	r2,r2,-1075
 200c78c:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 200c790:	00800044 	movi	r2,1
 200c794:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 200c798:	e0bff417 	ldw	r2,-48(fp)
 200c79c:	e0fff517 	ldw	r3,-44(fp)
 200c7a0:	000d883a 	mov	r6,zero
 200c7a4:	01cffe34 	movhi	r7,16376
 200c7a8:	1009883a 	mov	r4,r2
 200c7ac:	180b883a 	mov	r5,r3
 200c7b0:	200876c0 	call	200876c <__subdf3>
 200c7b4:	1009883a 	mov	r4,r2
 200c7b8:	180b883a 	mov	r5,r3
 200c7bc:	2005883a 	mov	r2,r4
 200c7c0:	2807883a 	mov	r3,r5
 200c7c4:	0198dbf4 	movhi	r6,25455
 200c7c8:	3190d844 	addi	r6,r6,17249
 200c7cc:	01cff4f4 	movhi	r7,16339
 200c7d0:	39e1e9c4 	addi	r7,r7,-30809
 200c7d4:	1009883a 	mov	r4,r2
 200c7d8:	180b883a 	mov	r5,r3
 200c7dc:	20080540 	call	2008054 <__muldf3>
 200c7e0:	1009883a 	mov	r4,r2
 200c7e4:	180b883a 	mov	r5,r3
 200c7e8:	2005883a 	mov	r2,r4
 200c7ec:	2807883a 	mov	r3,r5
 200c7f0:	01a2d874 	movhi	r6,35681
 200c7f4:	31b22cc4 	addi	r6,r6,-14157
 200c7f8:	01cff1f4 	movhi	r7,16327
 200c7fc:	39e28a04 	addi	r7,r7,-30168
 200c800:	1009883a 	mov	r4,r2
 200c804:	180b883a 	mov	r5,r3
 200c808:	2006c680 	call	2006c68 <__adddf3>
 200c80c:	1009883a 	mov	r4,r2
 200c810:	180b883a 	mov	r5,r3
 200c814:	2025883a 	mov	r18,r4
 200c818:	2827883a 	mov	r19,r5
 200c81c:	e13fd217 	ldw	r4,-184(fp)
 200c820:	201668c0 	call	201668c <__floatsidf>
 200c824:	1011883a 	mov	r8,r2
 200c828:	1813883a 	mov	r9,r3
 200c82c:	019427f4 	movhi	r6,20639
 200c830:	319e7ec4 	addi	r6,r6,31227
 200c834:	01cff4f4 	movhi	r7,16339
 200c838:	39d104c4 	addi	r7,r7,17427
 200c83c:	4009883a 	mov	r4,r8
 200c840:	480b883a 	mov	r5,r9
 200c844:	20080540 	call	2008054 <__muldf3>
 200c848:	1009883a 	mov	r4,r2
 200c84c:	180b883a 	mov	r5,r3
 200c850:	2005883a 	mov	r2,r4
 200c854:	2807883a 	mov	r3,r5
 200c858:	100d883a 	mov	r6,r2
 200c85c:	180f883a 	mov	r7,r3
 200c860:	9009883a 	mov	r4,r18
 200c864:	980b883a 	mov	r5,r19
 200c868:	2006c680 	call	2006c68 <__adddf3>
 200c86c:	1009883a 	mov	r4,r2
 200c870:	180b883a 	mov	r5,r3
 200c874:	e13fe515 	stw	r4,-108(fp)
 200c878:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 200c87c:	e13fe517 	ldw	r4,-108(fp)
 200c880:	e17fe617 	ldw	r5,-104(fp)
 200c884:	201660c0 	call	201660c <__fixdfsi>
 200c888:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 200c88c:	000d883a 	mov	r6,zero
 200c890:	000f883a 	mov	r7,zero
 200c894:	e13fe517 	ldw	r4,-108(fp)
 200c898:	e17fe617 	ldw	r5,-104(fp)
 200c89c:	2007f600 	call	2007f60 <__ledf2>
 200c8a0:	10000d0e 	bge	r2,zero,200c8d8 <_dtoa_r+0x428>
 200c8a4:	e13fd717 	ldw	r4,-164(fp)
 200c8a8:	201668c0 	call	201668c <__floatsidf>
 200c8ac:	1011883a 	mov	r8,r2
 200c8b0:	1813883a 	mov	r9,r3
 200c8b4:	e1bfe517 	ldw	r6,-108(fp)
 200c8b8:	e1ffe617 	ldw	r7,-104(fp)
 200c8bc:	4009883a 	mov	r4,r8
 200c8c0:	480b883a 	mov	r5,r9
 200c8c4:	2007dfc0 	call	2007dfc <__eqdf2>
 200c8c8:	10000326 	beq	r2,zero,200c8d8 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 200c8cc:	e0bfd717 	ldw	r2,-164(fp)
 200c8d0:	10bfffc4 	addi	r2,r2,-1
 200c8d4:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 200c8d8:	00800044 	movi	r2,1
 200c8dc:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 200c8e0:	e0bfd717 	ldw	r2,-164(fp)
 200c8e4:	10001616 	blt	r2,zero,200c940 <_dtoa_r+0x490>
 200c8e8:	e0bfd717 	ldw	r2,-164(fp)
 200c8ec:	108005c8 	cmpgei	r2,r2,23
 200c8f0:	1000131e 	bne	r2,zero,200c940 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 200c8f4:	e0bff217 	ldw	r2,-56(fp)
 200c8f8:	e0fff317 	ldw	r3,-52(fp)
 200c8fc:	010080b4 	movhi	r4,514
 200c900:	210a2e04 	addi	r4,r4,10424
 200c904:	e17fd717 	ldw	r5,-164(fp)
 200c908:	280a90fa 	slli	r5,r5,3
 200c90c:	214d883a 	add	r6,r4,r5
 200c910:	31000017 	ldw	r4,0(r6)
 200c914:	31400117 	ldw	r5,4(r6)
 200c918:	200d883a 	mov	r6,r4
 200c91c:	280f883a 	mov	r7,r5
 200c920:	1009883a 	mov	r4,r2
 200c924:	180b883a 	mov	r5,r3
 200c928:	2007f600 	call	2007f60 <__ledf2>
 200c92c:	1000030e 	bge	r2,zero,200c93c <_dtoa_r+0x48c>
	k--;
 200c930:	e0bfd717 	ldw	r2,-164(fp)
 200c934:	10bfffc4 	addi	r2,r2,-1
 200c938:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 200c93c:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 200c940:	e0fff017 	ldw	r3,-64(fp)
 200c944:	e0bfd217 	ldw	r2,-184(fp)
 200c948:	1885c83a 	sub	r2,r3,r2
 200c94c:	10bfffc4 	addi	r2,r2,-1
 200c950:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 200c954:	e0bfd617 	ldw	r2,-168(fp)
 200c958:	10000416 	blt	r2,zero,200c96c <_dtoa_r+0x4bc>
    {
      b2 = 0;
 200c95c:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 200c960:	e0bfd617 	ldw	r2,-168(fp)
 200c964:	e0bfdc15 	stw	r2,-144(fp)
 200c968:	00000406 	br	200c97c <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 200c96c:	e0bfd617 	ldw	r2,-168(fp)
 200c970:	0085c83a 	sub	r2,zero,r2
 200c974:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 200c978:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 200c97c:	e0bfd717 	ldw	r2,-164(fp)
 200c980:	10000816 	blt	r2,zero,200c9a4 <_dtoa_r+0x4f4>
    {
      b5 = 0;
 200c984:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 200c988:	e0bfd717 	ldw	r2,-164(fp)
 200c98c:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 200c990:	e0ffdc17 	ldw	r3,-144(fp)
 200c994:	e0bfd717 	ldw	r2,-164(fp)
 200c998:	1885883a 	add	r2,r3,r2
 200c99c:	e0bfdc15 	stw	r2,-144(fp)
 200c9a0:	00000806 	br	200c9c4 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 200c9a4:	e0ffcf17 	ldw	r3,-196(fp)
 200c9a8:	e0bfd717 	ldw	r2,-164(fp)
 200c9ac:	1885c83a 	sub	r2,r3,r2
 200c9b0:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 200c9b4:	e0bfd717 	ldw	r2,-164(fp)
 200c9b8:	0085c83a 	sub	r2,zero,r2
 200c9bc:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 200c9c0:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 200c9c4:	e0bffb17 	ldw	r2,-20(fp)
 200c9c8:	10000316 	blt	r2,zero,200c9d8 <_dtoa_r+0x528>
 200c9cc:	e0bffb17 	ldw	r2,-20(fp)
 200c9d0:	10800290 	cmplti	r2,r2,10
 200c9d4:	1000011e 	bne	r2,zero,200c9dc <_dtoa_r+0x52c>
    mode = 0;
 200c9d8:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 200c9dc:	00800044 	movi	r2,1
 200c9e0:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 200c9e4:	e0bffb17 	ldw	r2,-20(fp)
 200c9e8:	10800190 	cmplti	r2,r2,6
 200c9ec:	1000041e 	bne	r2,zero,200ca00 <_dtoa_r+0x550>
    {
      mode -= 4;
 200c9f0:	e0bffb17 	ldw	r2,-20(fp)
 200c9f4:	10bfff04 	addi	r2,r2,-4
 200c9f8:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 200c9fc:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 200ca00:	00800044 	movi	r2,1
 200ca04:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 200ca08:	00bfffc4 	movi	r2,-1
 200ca0c:	e0bfd515 	stw	r2,-172(fp)
 200ca10:	e0bfd517 	ldw	r2,-172(fp)
 200ca14:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 200ca18:	e0bffb17 	ldw	r2,-20(fp)
 200ca1c:	108001a8 	cmpgeui	r2,r2,6
 200ca20:	10002c1e 	bne	r2,zero,200cad4 <_dtoa_r+0x624>
 200ca24:	e0bffb17 	ldw	r2,-20(fp)
 200ca28:	100690ba 	slli	r3,r2,2
 200ca2c:	00808074 	movhi	r2,513
 200ca30:	10b29004 	addi	r2,r2,-13760
 200ca34:	1885883a 	add	r2,r3,r2
 200ca38:	10800017 	ldw	r2,0(r2)
 200ca3c:	1000683a 	jmp	r2
 200ca40:	0200ca58 	cmpnei	r8,zero,809
 200ca44:	0200ca58 	cmpnei	r8,zero,809
 200ca48:	0200ca68 	cmpgeui	r8,zero,809
 200ca4c:	0200ca98 	cmpnei	r8,zero,810
 200ca50:	0200ca6c 	andhi	r8,zero,809
 200ca54:	0200ca9c 	xori	r8,zero,810
    {
    case 0:
    case 1:
      i = 18;
 200ca58:	00800484 	movi	r2,18
 200ca5c:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 200ca60:	e0000215 	stw	zero,8(fp)
      break;
 200ca64:	00001b06 	br	200cad4 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 200ca68:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 200ca6c:	e0800217 	ldw	r2,8(fp)
 200ca70:	00800216 	blt	zero,r2,200ca7c <_dtoa_r+0x5cc>
	ndigits = 1;
 200ca74:	00800044 	movi	r2,1
 200ca78:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 200ca7c:	e0800217 	ldw	r2,8(fp)
 200ca80:	e0bfd215 	stw	r2,-184(fp)
 200ca84:	e0bfd217 	ldw	r2,-184(fp)
 200ca88:	e0bfd515 	stw	r2,-172(fp)
 200ca8c:	e0bfd517 	ldw	r2,-172(fp)
 200ca90:	e0bfd415 	stw	r2,-176(fp)
      break;
 200ca94:	00000f06 	br	200cad4 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 200ca98:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 200ca9c:	e0c00217 	ldw	r3,8(fp)
 200caa0:	e0bfd717 	ldw	r2,-164(fp)
 200caa4:	1885883a 	add	r2,r3,r2
 200caa8:	10800044 	addi	r2,r2,1
 200caac:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 200cab0:	e0bfd217 	ldw	r2,-184(fp)
 200cab4:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 200cab8:	e0bfd217 	ldw	r2,-184(fp)
 200cabc:	10bfffc4 	addi	r2,r2,-1
 200cac0:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 200cac4:	e0bfd217 	ldw	r2,-184(fp)
 200cac8:	00800216 	blt	zero,r2,200cad4 <_dtoa_r+0x624>
	i = 1;
 200cacc:	00800044 	movi	r2,1
 200cad0:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 200cad4:	00800104 	movi	r2,4
 200cad8:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200cadc:	e0bff817 	ldw	r2,-32(fp)
 200cae0:	10001115 	stw	zero,68(r2)
 200cae4:	00000806 	br	200cb08 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 200cae8:	e0bff817 	ldw	r2,-32(fp)
 200caec:	10801117 	ldw	r2,68(r2)
 200caf0:	10c00044 	addi	r3,r2,1
 200caf4:	e0bff817 	ldw	r2,-32(fp)
 200caf8:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 200cafc:	e0bfd617 	ldw	r2,-168(fp)
 200cb00:	1085883a 	add	r2,r2,r2
 200cb04:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200cb08:	e0bfd617 	ldw	r2,-168(fp)
 200cb0c:	10800504 	addi	r2,r2,20
 200cb10:	e0ffd217 	ldw	r3,-184(fp)
 200cb14:	18bff42e 	bgeu	r3,r2,200cae8 <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 200cb18:	e0bff817 	ldw	r2,-32(fp)
 200cb1c:	10801117 	ldw	r2,68(r2)
 200cb20:	100b883a 	mov	r5,r2
 200cb24:	e13ff817 	ldw	r4,-32(fp)
 200cb28:	2010f4c0 	call	2010f4c <_Balloc>
 200cb2c:	1007883a 	mov	r3,r2
 200cb30:	e0bff817 	ldw	r2,-32(fp)
 200cb34:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 200cb38:	e0bff817 	ldw	r2,-32(fp)
 200cb3c:	10801017 	ldw	r2,64(r2)
 200cb40:	e0bfe915 	stw	r2,-92(fp)
 200cb44:	e0bfe917 	ldw	r2,-92(fp)
 200cb48:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 200cb4c:	e0bfd417 	ldw	r2,-176(fp)
 200cb50:	10021616 	blt	r2,zero,200d3ac <_dtoa_r+0xefc>
 200cb54:	e0bfd417 	ldw	r2,-176(fp)
 200cb58:	108003c8 	cmpgei	r2,r2,15
 200cb5c:	1002131e 	bne	r2,zero,200d3ac <_dtoa_r+0xefc>
 200cb60:	e0bfdf17 	ldw	r2,-132(fp)
 200cb64:	10021126 	beq	r2,zero,200d3ac <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 200cb68:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 200cb6c:	e0bff217 	ldw	r2,-56(fp)
 200cb70:	e0fff317 	ldw	r3,-52(fp)
 200cb74:	e0bff415 	stw	r2,-48(fp)
 200cb78:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 200cb7c:	e0bfd717 	ldw	r2,-164(fp)
 200cb80:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 200cb84:	e0bfd417 	ldw	r2,-176(fp)
 200cb88:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 200cb8c:	00800084 	movi	r2,2
 200cb90:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 200cb94:	e0bfd717 	ldw	r2,-164(fp)
 200cb98:	0080540e 	bge	zero,r2,200ccec <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 200cb9c:	e0bfd717 	ldw	r2,-164(fp)
 200cba0:	10c003cc 	andi	r3,r2,15
 200cba4:	008080b4 	movhi	r2,514
 200cba8:	108a2e04 	addi	r2,r2,10424
 200cbac:	180690fa 	slli	r3,r3,3
 200cbb0:	10c5883a 	add	r2,r2,r3
 200cbb4:	10c00017 	ldw	r3,0(r2)
 200cbb8:	e0ffe515 	stw	r3,-108(fp)
 200cbbc:	10800117 	ldw	r2,4(r2)
 200cbc0:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 200cbc4:	e0bfd717 	ldw	r2,-164(fp)
 200cbc8:	1005d13a 	srai	r2,r2,4
 200cbcc:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 200cbd0:	e0bfd617 	ldw	r2,-168(fp)
 200cbd4:	1080040c 	andi	r2,r2,16
 200cbd8:	10003426 	beq	r2,zero,200ccac <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 200cbdc:	e0bfd617 	ldw	r2,-168(fp)
 200cbe0:	108003cc 	andi	r2,r2,15
 200cbe4:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 200cbe8:	e0bff217 	ldw	r2,-56(fp)
 200cbec:	e0fff317 	ldw	r3,-52(fp)
 200cbf0:	018080b4 	movhi	r6,514
 200cbf4:	318a6004 	addi	r6,r6,10624
 200cbf8:	31000817 	ldw	r4,32(r6)
 200cbfc:	31400917 	ldw	r5,36(r6)
 200cc00:	200d883a 	mov	r6,r4
 200cc04:	280f883a 	mov	r7,r5
 200cc08:	1009883a 	mov	r4,r2
 200cc0c:	180b883a 	mov	r5,r3
 200cc10:	20075140 	call	2007514 <__divdf3>
 200cc14:	1009883a 	mov	r4,r2
 200cc18:	180b883a 	mov	r5,r3
 200cc1c:	2005883a 	mov	r2,r4
 200cc20:	2807883a 	mov	r3,r5
 200cc24:	e0bff215 	stw	r2,-56(fp)
 200cc28:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 200cc2c:	e0bfd317 	ldw	r2,-180(fp)
 200cc30:	10800044 	addi	r2,r2,1
 200cc34:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 200cc38:	00001c06 	br	200ccac <_dtoa_r+0x7fc>
	    if (j & 1)
 200cc3c:	e0bfd617 	ldw	r2,-168(fp)
 200cc40:	1080004c 	andi	r2,r2,1
 200cc44:	10001326 	beq	r2,zero,200cc94 <_dtoa_r+0x7e4>
	      {
		ieps++;
 200cc48:	e0bfd317 	ldw	r2,-180(fp)
 200cc4c:	10800044 	addi	r2,r2,1
 200cc50:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 200cc54:	008080b4 	movhi	r2,514
 200cc58:	108a6004 	addi	r2,r2,10624
 200cc5c:	e0ffd217 	ldw	r3,-184(fp)
 200cc60:	180690fa 	slli	r3,r3,3
 200cc64:	10c9883a 	add	r4,r2,r3
 200cc68:	20800017 	ldw	r2,0(r4)
 200cc6c:	20c00117 	ldw	r3,4(r4)
 200cc70:	100d883a 	mov	r6,r2
 200cc74:	180f883a 	mov	r7,r3
 200cc78:	e13fe517 	ldw	r4,-108(fp)
 200cc7c:	e17fe617 	ldw	r5,-104(fp)
 200cc80:	20080540 	call	2008054 <__muldf3>
 200cc84:	1009883a 	mov	r4,r2
 200cc88:	180b883a 	mov	r5,r3
 200cc8c:	e13fe515 	stw	r4,-108(fp)
 200cc90:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 200cc94:	e0bfd617 	ldw	r2,-168(fp)
 200cc98:	1005d07a 	srai	r2,r2,1
 200cc9c:	e0bfd615 	stw	r2,-168(fp)
 200cca0:	e0bfd217 	ldw	r2,-184(fp)
 200cca4:	10800044 	addi	r2,r2,1
 200cca8:	e0bfd215 	stw	r2,-184(fp)
 200ccac:	e0bfd617 	ldw	r2,-168(fp)
 200ccb0:	103fe21e 	bne	r2,zero,200cc3c <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 200ccb4:	e0bff217 	ldw	r2,-56(fp)
 200ccb8:	e0fff317 	ldw	r3,-52(fp)
 200ccbc:	e1bfe517 	ldw	r6,-108(fp)
 200ccc0:	e1ffe617 	ldw	r7,-104(fp)
 200ccc4:	1009883a 	mov	r4,r2
 200ccc8:	180b883a 	mov	r5,r3
 200cccc:	20075140 	call	2007514 <__divdf3>
 200ccd0:	1009883a 	mov	r4,r2
 200ccd4:	180b883a 	mov	r5,r3
 200ccd8:	2005883a 	mov	r2,r4
 200ccdc:	2807883a 	mov	r3,r5
 200cce0:	e0bff215 	stw	r2,-56(fp)
 200cce4:	e0fff315 	stw	r3,-52(fp)
 200cce8:	00004006 	br	200cdec <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 200ccec:	e0bfd717 	ldw	r2,-164(fp)
 200ccf0:	0085c83a 	sub	r2,zero,r2
 200ccf4:	e0bfec15 	stw	r2,-80(fp)
 200ccf8:	e0bfec17 	ldw	r2,-80(fp)
 200ccfc:	10003b26 	beq	r2,zero,200cdec <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 200cd00:	e0bff217 	ldw	r2,-56(fp)
 200cd04:	e0fff317 	ldw	r3,-52(fp)
 200cd08:	e13fec17 	ldw	r4,-80(fp)
 200cd0c:	214003cc 	andi	r5,r4,15
 200cd10:	010080b4 	movhi	r4,514
 200cd14:	210a2e04 	addi	r4,r4,10424
 200cd18:	280a90fa 	slli	r5,r5,3
 200cd1c:	214d883a 	add	r6,r4,r5
 200cd20:	31000017 	ldw	r4,0(r6)
 200cd24:	31400117 	ldw	r5,4(r6)
 200cd28:	200d883a 	mov	r6,r4
 200cd2c:	280f883a 	mov	r7,r5
 200cd30:	1009883a 	mov	r4,r2
 200cd34:	180b883a 	mov	r5,r3
 200cd38:	20080540 	call	2008054 <__muldf3>
 200cd3c:	1009883a 	mov	r4,r2
 200cd40:	180b883a 	mov	r5,r3
 200cd44:	2005883a 	mov	r2,r4
 200cd48:	2807883a 	mov	r3,r5
 200cd4c:	e0bff215 	stw	r2,-56(fp)
 200cd50:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200cd54:	e0bfec17 	ldw	r2,-80(fp)
 200cd58:	1005d13a 	srai	r2,r2,4
 200cd5c:	e0bfd615 	stw	r2,-168(fp)
 200cd60:	00002006 	br	200cde4 <_dtoa_r+0x934>
	    if (j & 1)
 200cd64:	e0bfd617 	ldw	r2,-168(fp)
 200cd68:	1080004c 	andi	r2,r2,1
 200cd6c:	10001726 	beq	r2,zero,200cdcc <_dtoa_r+0x91c>
	      {
		ieps++;
 200cd70:	e0bfd317 	ldw	r2,-180(fp)
 200cd74:	10800044 	addi	r2,r2,1
 200cd78:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 200cd7c:	e0bff217 	ldw	r2,-56(fp)
 200cd80:	e0fff317 	ldw	r3,-52(fp)
 200cd84:	010080b4 	movhi	r4,514
 200cd88:	210a6004 	addi	r4,r4,10624
 200cd8c:	e17fd217 	ldw	r5,-184(fp)
 200cd90:	280a90fa 	slli	r5,r5,3
 200cd94:	214d883a 	add	r6,r4,r5
 200cd98:	31000017 	ldw	r4,0(r6)
 200cd9c:	31400117 	ldw	r5,4(r6)
 200cda0:	200d883a 	mov	r6,r4
 200cda4:	280f883a 	mov	r7,r5
 200cda8:	1009883a 	mov	r4,r2
 200cdac:	180b883a 	mov	r5,r3
 200cdb0:	20080540 	call	2008054 <__muldf3>
 200cdb4:	1009883a 	mov	r4,r2
 200cdb8:	180b883a 	mov	r5,r3
 200cdbc:	2005883a 	mov	r2,r4
 200cdc0:	2807883a 	mov	r3,r5
 200cdc4:	e0bff215 	stw	r2,-56(fp)
 200cdc8:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200cdcc:	e0bfd617 	ldw	r2,-168(fp)
 200cdd0:	1005d07a 	srai	r2,r2,1
 200cdd4:	e0bfd615 	stw	r2,-168(fp)
 200cdd8:	e0bfd217 	ldw	r2,-184(fp)
 200cddc:	10800044 	addi	r2,r2,1
 200cde0:	e0bfd215 	stw	r2,-184(fp)
 200cde4:	e0bfd617 	ldw	r2,-168(fp)
 200cde8:	103fde1e 	bne	r2,zero,200cd64 <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 200cdec:	e0bfd817 	ldw	r2,-160(fp)
 200cdf0:	10002126 	beq	r2,zero,200ce78 <_dtoa_r+0x9c8>
 200cdf4:	e0bff217 	ldw	r2,-56(fp)
 200cdf8:	e0fff317 	ldw	r3,-52(fp)
 200cdfc:	000d883a 	mov	r6,zero
 200ce00:	01cffc34 	movhi	r7,16368
 200ce04:	1009883a 	mov	r4,r2
 200ce08:	180b883a 	mov	r5,r3
 200ce0c:	2007f600 	call	2007f60 <__ledf2>
 200ce10:	1000190e 	bge	r2,zero,200ce78 <_dtoa_r+0x9c8>
 200ce14:	e0bfd417 	ldw	r2,-176(fp)
 200ce18:	0080170e 	bge	zero,r2,200ce78 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 200ce1c:	e0bfd517 	ldw	r2,-172(fp)
 200ce20:	0081550e 	bge	zero,r2,200d378 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 200ce24:	e0bfd517 	ldw	r2,-172(fp)
 200ce28:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 200ce2c:	e0bfd717 	ldw	r2,-164(fp)
 200ce30:	10bfffc4 	addi	r2,r2,-1
 200ce34:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 200ce38:	e0bff217 	ldw	r2,-56(fp)
 200ce3c:	e0fff317 	ldw	r3,-52(fp)
 200ce40:	000d883a 	mov	r6,zero
 200ce44:	01d00934 	movhi	r7,16420
 200ce48:	1009883a 	mov	r4,r2
 200ce4c:	180b883a 	mov	r5,r3
 200ce50:	20080540 	call	2008054 <__muldf3>
 200ce54:	1009883a 	mov	r4,r2
 200ce58:	180b883a 	mov	r5,r3
 200ce5c:	2005883a 	mov	r2,r4
 200ce60:	2807883a 	mov	r3,r5
 200ce64:	e0bff215 	stw	r2,-56(fp)
 200ce68:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 200ce6c:	e0bfd317 	ldw	r2,-180(fp)
 200ce70:	10800044 	addi	r2,r2,1
 200ce74:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 200ce78:	e13fd317 	ldw	r4,-180(fp)
 200ce7c:	201668c0 	call	201668c <__floatsidf>
 200ce80:	1011883a 	mov	r8,r2
 200ce84:	1813883a 	mov	r9,r3
 200ce88:	e0bff217 	ldw	r2,-56(fp)
 200ce8c:	e0fff317 	ldw	r3,-52(fp)
 200ce90:	100d883a 	mov	r6,r2
 200ce94:	180f883a 	mov	r7,r3
 200ce98:	4009883a 	mov	r4,r8
 200ce9c:	480b883a 	mov	r5,r9
 200cea0:	20080540 	call	2008054 <__muldf3>
 200cea4:	1009883a 	mov	r4,r2
 200cea8:	180b883a 	mov	r5,r3
 200ceac:	2005883a 	mov	r2,r4
 200ceb0:	2807883a 	mov	r3,r5
 200ceb4:	000d883a 	mov	r6,zero
 200ceb8:	01d00734 	movhi	r7,16412
 200cebc:	1009883a 	mov	r4,r2
 200cec0:	180b883a 	mov	r5,r3
 200cec4:	2006c680 	call	2006c68 <__adddf3>
 200cec8:	1009883a 	mov	r4,r2
 200cecc:	180b883a 	mov	r5,r3
 200ced0:	2005883a 	mov	r2,r4
 200ced4:	2807883a 	mov	r3,r5
 200ced8:	e0bff615 	stw	r2,-40(fp)
 200cedc:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 200cee0:	e0fff717 	ldw	r3,-36(fp)
 200cee4:	00bf3034 	movhi	r2,64704
 200cee8:	1885883a 	add	r2,r3,r2
 200ceec:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 200cef0:	e0bfd417 	ldw	r2,-176(fp)
 200cef4:	1000271e 	bne	r2,zero,200cf94 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 200cef8:	e03fe315 	stw	zero,-116(fp)
 200cefc:	e0bfe317 	ldw	r2,-116(fp)
 200cf00:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 200cf04:	e0bff217 	ldw	r2,-56(fp)
 200cf08:	e0fff317 	ldw	r3,-52(fp)
 200cf0c:	000d883a 	mov	r6,zero
 200cf10:	01d00534 	movhi	r7,16404
 200cf14:	1009883a 	mov	r4,r2
 200cf18:	180b883a 	mov	r5,r3
 200cf1c:	200876c0 	call	200876c <__subdf3>
 200cf20:	1009883a 	mov	r4,r2
 200cf24:	180b883a 	mov	r5,r3
 200cf28:	2005883a 	mov	r2,r4
 200cf2c:	2807883a 	mov	r3,r5
 200cf30:	e0bff215 	stw	r2,-56(fp)
 200cf34:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 200cf38:	e0bff217 	ldw	r2,-56(fp)
 200cf3c:	e0fff317 	ldw	r3,-52(fp)
 200cf40:	e13ff617 	ldw	r4,-40(fp)
 200cf44:	e17ff717 	ldw	r5,-36(fp)
 200cf48:	200d883a 	mov	r6,r4
 200cf4c:	280f883a 	mov	r7,r5
 200cf50:	1009883a 	mov	r4,r2
 200cf54:	180b883a 	mov	r5,r3
 200cf58:	2007e840 	call	2007e84 <__gedf2>
 200cf5c:	0082eb16 	blt	zero,r2,200db0c <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 200cf60:	e23ff217 	ldw	r8,-56(fp)
 200cf64:	e27ff317 	ldw	r9,-52(fp)
 200cf68:	e0bff617 	ldw	r2,-40(fp)
 200cf6c:	e0fff717 	ldw	r3,-36(fp)
 200cf70:	1021883a 	mov	r16,r2
 200cf74:	1c60003c 	xorhi	r17,r3,32768
 200cf78:	800d883a 	mov	r6,r16
 200cf7c:	880f883a 	mov	r7,r17
 200cf80:	4009883a 	mov	r4,r8
 200cf84:	480b883a 	mov	r5,r9
 200cf88:	2007f600 	call	2007f60 <__ledf2>
 200cf8c:	1002da16 	blt	r2,zero,200daf8 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 200cf90:	0000fc06 	br	200d384 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 200cf94:	e0bfd917 	ldw	r2,-156(fp)
 200cf98:	10007a26 	beq	r2,zero,200d184 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 200cf9c:	e0bfd417 	ldw	r2,-176(fp)
 200cfa0:	10ffffc4 	addi	r3,r2,-1
 200cfa4:	008080b4 	movhi	r2,514
 200cfa8:	108a2e04 	addi	r2,r2,10424
 200cfac:	180690fa 	slli	r3,r3,3
 200cfb0:	10c9883a 	add	r4,r2,r3
 200cfb4:	20800017 	ldw	r2,0(r4)
 200cfb8:	20c00117 	ldw	r3,4(r4)
 200cfbc:	100d883a 	mov	r6,r2
 200cfc0:	180f883a 	mov	r7,r3
 200cfc4:	0009883a 	mov	r4,zero
 200cfc8:	014ff834 	movhi	r5,16352
 200cfcc:	20075140 	call	2007514 <__divdf3>
 200cfd0:	1009883a 	mov	r4,r2
 200cfd4:	180b883a 	mov	r5,r3
 200cfd8:	2011883a 	mov	r8,r4
 200cfdc:	2813883a 	mov	r9,r5
 200cfe0:	e0bff617 	ldw	r2,-40(fp)
 200cfe4:	e0fff717 	ldw	r3,-36(fp)
 200cfe8:	100d883a 	mov	r6,r2
 200cfec:	180f883a 	mov	r7,r3
 200cff0:	4009883a 	mov	r4,r8
 200cff4:	480b883a 	mov	r5,r9
 200cff8:	200876c0 	call	200876c <__subdf3>
 200cffc:	1009883a 	mov	r4,r2
 200d000:	180b883a 	mov	r5,r3
 200d004:	2005883a 	mov	r2,r4
 200d008:	2807883a 	mov	r3,r5
 200d00c:	e0bff615 	stw	r2,-40(fp)
 200d010:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 200d014:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 200d018:	e0bff217 	ldw	r2,-56(fp)
 200d01c:	e0fff317 	ldw	r3,-52(fp)
 200d020:	1009883a 	mov	r4,r2
 200d024:	180b883a 	mov	r5,r3
 200d028:	201660c0 	call	201660c <__fixdfsi>
 200d02c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200d030:	e43ff217 	ldw	r16,-56(fp)
 200d034:	e47ff317 	ldw	r17,-52(fp)
 200d038:	e13fed17 	ldw	r4,-76(fp)
 200d03c:	201668c0 	call	201668c <__floatsidf>
 200d040:	1009883a 	mov	r4,r2
 200d044:	180b883a 	mov	r5,r3
 200d048:	200d883a 	mov	r6,r4
 200d04c:	280f883a 	mov	r7,r5
 200d050:	8009883a 	mov	r4,r16
 200d054:	880b883a 	mov	r5,r17
 200d058:	200876c0 	call	200876c <__subdf3>
 200d05c:	1009883a 	mov	r4,r2
 200d060:	180b883a 	mov	r5,r3
 200d064:	2005883a 	mov	r2,r4
 200d068:	2807883a 	mov	r3,r5
 200d06c:	e0bff215 	stw	r2,-56(fp)
 200d070:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200d074:	e0bfe717 	ldw	r2,-100(fp)
 200d078:	10c00044 	addi	r3,r2,1
 200d07c:	e0ffe715 	stw	r3,-100(fp)
 200d080:	e0ffed17 	ldw	r3,-76(fp)
 200d084:	18c00c04 	addi	r3,r3,48
 200d088:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 200d08c:	e0bff217 	ldw	r2,-56(fp)
 200d090:	e0fff317 	ldw	r3,-52(fp)
 200d094:	e13ff617 	ldw	r4,-40(fp)
 200d098:	e17ff717 	ldw	r5,-36(fp)
 200d09c:	200d883a 	mov	r6,r4
 200d0a0:	280f883a 	mov	r7,r5
 200d0a4:	1009883a 	mov	r4,r2
 200d0a8:	180b883a 	mov	r5,r3
 200d0ac:	2007f600 	call	2007f60 <__ledf2>
 200d0b0:	1003c416 	blt	r2,zero,200dfc4 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 200d0b4:	e0bff217 	ldw	r2,-56(fp)
 200d0b8:	e0fff317 	ldw	r3,-52(fp)
 200d0bc:	100d883a 	mov	r6,r2
 200d0c0:	180f883a 	mov	r7,r3
 200d0c4:	0009883a 	mov	r4,zero
 200d0c8:	014ffc34 	movhi	r5,16368
 200d0cc:	200876c0 	call	200876c <__subdf3>
 200d0d0:	1009883a 	mov	r4,r2
 200d0d4:	180b883a 	mov	r5,r3
 200d0d8:	2011883a 	mov	r8,r4
 200d0dc:	2813883a 	mov	r9,r5
 200d0e0:	e0bff617 	ldw	r2,-40(fp)
 200d0e4:	e0fff717 	ldw	r3,-36(fp)
 200d0e8:	100d883a 	mov	r6,r2
 200d0ec:	180f883a 	mov	r7,r3
 200d0f0:	4009883a 	mov	r4,r8
 200d0f4:	480b883a 	mov	r5,r9
 200d0f8:	2007f600 	call	2007f60 <__ledf2>
 200d0fc:	10012916 	blt	r2,zero,200d5a4 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 200d100:	e0bfd217 	ldw	r2,-184(fp)
 200d104:	10800044 	addi	r2,r2,1
 200d108:	e0bfd215 	stw	r2,-184(fp)
 200d10c:	e0ffd217 	ldw	r3,-184(fp)
 200d110:	e0bfd417 	ldw	r2,-176(fp)
 200d114:	18809a0e 	bge	r3,r2,200d380 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 200d118:	e0bff617 	ldw	r2,-40(fp)
 200d11c:	e0fff717 	ldw	r3,-36(fp)
 200d120:	000d883a 	mov	r6,zero
 200d124:	01d00934 	movhi	r7,16420
 200d128:	1009883a 	mov	r4,r2
 200d12c:	180b883a 	mov	r5,r3
 200d130:	20080540 	call	2008054 <__muldf3>
 200d134:	1009883a 	mov	r4,r2
 200d138:	180b883a 	mov	r5,r3
 200d13c:	2005883a 	mov	r2,r4
 200d140:	2807883a 	mov	r3,r5
 200d144:	e0bff615 	stw	r2,-40(fp)
 200d148:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 200d14c:	e0bff217 	ldw	r2,-56(fp)
 200d150:	e0fff317 	ldw	r3,-52(fp)
 200d154:	000d883a 	mov	r6,zero
 200d158:	01d00934 	movhi	r7,16420
 200d15c:	1009883a 	mov	r4,r2
 200d160:	180b883a 	mov	r5,r3
 200d164:	20080540 	call	2008054 <__muldf3>
 200d168:	1009883a 	mov	r4,r2
 200d16c:	180b883a 	mov	r5,r3
 200d170:	2005883a 	mov	r2,r4
 200d174:	2807883a 	mov	r3,r5
 200d178:	e0bff215 	stw	r2,-56(fp)
 200d17c:	e0fff315 	stw	r3,-52(fp)
	    }
 200d180:	003fa506 	br	200d018 <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 200d184:	e0bff617 	ldw	r2,-40(fp)
 200d188:	e0fff717 	ldw	r3,-36(fp)
 200d18c:	e13fd417 	ldw	r4,-176(fp)
 200d190:	217fffc4 	addi	r5,r4,-1
 200d194:	010080b4 	movhi	r4,514
 200d198:	210a2e04 	addi	r4,r4,10424
 200d19c:	280a90fa 	slli	r5,r5,3
 200d1a0:	214d883a 	add	r6,r4,r5
 200d1a4:	31000017 	ldw	r4,0(r6)
 200d1a8:	31400117 	ldw	r5,4(r6)
 200d1ac:	200d883a 	mov	r6,r4
 200d1b0:	280f883a 	mov	r7,r5
 200d1b4:	1009883a 	mov	r4,r2
 200d1b8:	180b883a 	mov	r5,r3
 200d1bc:	20080540 	call	2008054 <__muldf3>
 200d1c0:	1009883a 	mov	r4,r2
 200d1c4:	180b883a 	mov	r5,r3
 200d1c8:	2005883a 	mov	r2,r4
 200d1cc:	2807883a 	mov	r3,r5
 200d1d0:	e0bff615 	stw	r2,-40(fp)
 200d1d4:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 200d1d8:	00800044 	movi	r2,1
 200d1dc:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 200d1e0:	e0bff217 	ldw	r2,-56(fp)
 200d1e4:	e0fff317 	ldw	r3,-52(fp)
 200d1e8:	1009883a 	mov	r4,r2
 200d1ec:	180b883a 	mov	r5,r3
 200d1f0:	201660c0 	call	201660c <__fixdfsi>
 200d1f4:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200d1f8:	e43ff217 	ldw	r16,-56(fp)
 200d1fc:	e47ff317 	ldw	r17,-52(fp)
 200d200:	e13fed17 	ldw	r4,-76(fp)
 200d204:	201668c0 	call	201668c <__floatsidf>
 200d208:	1009883a 	mov	r4,r2
 200d20c:	180b883a 	mov	r5,r3
 200d210:	200d883a 	mov	r6,r4
 200d214:	280f883a 	mov	r7,r5
 200d218:	8009883a 	mov	r4,r16
 200d21c:	880b883a 	mov	r5,r17
 200d220:	200876c0 	call	200876c <__subdf3>
 200d224:	1009883a 	mov	r4,r2
 200d228:	180b883a 	mov	r5,r3
 200d22c:	2005883a 	mov	r2,r4
 200d230:	2807883a 	mov	r3,r5
 200d234:	e0bff215 	stw	r2,-56(fp)
 200d238:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200d23c:	e0bfe717 	ldw	r2,-100(fp)
 200d240:	10c00044 	addi	r3,r2,1
 200d244:	e0ffe715 	stw	r3,-100(fp)
 200d248:	e0ffed17 	ldw	r3,-76(fp)
 200d24c:	18c00c04 	addi	r3,r3,48
 200d250:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 200d254:	e0ffd217 	ldw	r3,-184(fp)
 200d258:	e0bfd417 	ldw	r2,-176(fp)
 200d25c:	1880351e 	bne	r3,r2,200d334 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 200d260:	e43ff217 	ldw	r16,-56(fp)
 200d264:	e47ff317 	ldw	r17,-52(fp)
 200d268:	e0bff617 	ldw	r2,-40(fp)
 200d26c:	e0fff717 	ldw	r3,-36(fp)
 200d270:	000d883a 	mov	r6,zero
 200d274:	01cff834 	movhi	r7,16352
 200d278:	1009883a 	mov	r4,r2
 200d27c:	180b883a 	mov	r5,r3
 200d280:	2006c680 	call	2006c68 <__adddf3>
 200d284:	1009883a 	mov	r4,r2
 200d288:	180b883a 	mov	r5,r3
 200d28c:	2005883a 	mov	r2,r4
 200d290:	2807883a 	mov	r3,r5
 200d294:	100d883a 	mov	r6,r2
 200d298:	180f883a 	mov	r7,r3
 200d29c:	8009883a 	mov	r4,r16
 200d2a0:	880b883a 	mov	r5,r17
 200d2a4:	2007e840 	call	2007e84 <__gedf2>
 200d2a8:	0080c016 	blt	zero,r2,200d5ac <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 200d2ac:	e43ff217 	ldw	r16,-56(fp)
 200d2b0:	e47ff317 	ldw	r17,-52(fp)
 200d2b4:	e0bff617 	ldw	r2,-40(fp)
 200d2b8:	e0fff717 	ldw	r3,-36(fp)
 200d2bc:	100d883a 	mov	r6,r2
 200d2c0:	180f883a 	mov	r7,r3
 200d2c4:	0009883a 	mov	r4,zero
 200d2c8:	014ff834 	movhi	r5,16352
 200d2cc:	200876c0 	call	200876c <__subdf3>
 200d2d0:	1009883a 	mov	r4,r2
 200d2d4:	180b883a 	mov	r5,r3
 200d2d8:	2005883a 	mov	r2,r4
 200d2dc:	2807883a 	mov	r3,r5
 200d2e0:	100d883a 	mov	r6,r2
 200d2e4:	180f883a 	mov	r7,r3
 200d2e8:	8009883a 	mov	r4,r16
 200d2ec:	880b883a 	mov	r5,r17
 200d2f0:	2007f600 	call	2007f60 <__ledf2>
 200d2f4:	10000116 	blt	r2,zero,200d2fc <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 200d2f8:	00002206 	br	200d384 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 200d2fc:	e0bfe717 	ldw	r2,-100(fp)
 200d300:	10bfffc4 	addi	r2,r2,-1
 200d304:	e0bfe715 	stw	r2,-100(fp)
 200d308:	e0bfe717 	ldw	r2,-100(fp)
 200d30c:	10800003 	ldbu	r2,0(r2)
 200d310:	10803fcc 	andi	r2,r2,255
 200d314:	1080201c 	xori	r2,r2,128
 200d318:	10bfe004 	addi	r2,r2,-128
 200d31c:	10800c20 	cmpeqi	r2,r2,48
 200d320:	103ff61e 	bne	r2,zero,200d2fc <_dtoa_r+0xe4c>
		      s++;
 200d324:	e0bfe717 	ldw	r2,-100(fp)
 200d328:	10800044 	addi	r2,r2,1
 200d32c:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 200d330:	00032506 	br	200dfc8 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 200d334:	e0bfd217 	ldw	r2,-184(fp)
 200d338:	10800044 	addi	r2,r2,1
 200d33c:	e0bfd215 	stw	r2,-184(fp)
 200d340:	e0bff217 	ldw	r2,-56(fp)
 200d344:	e0fff317 	ldw	r3,-52(fp)
 200d348:	000d883a 	mov	r6,zero
 200d34c:	01d00934 	movhi	r7,16420
 200d350:	1009883a 	mov	r4,r2
 200d354:	180b883a 	mov	r5,r3
 200d358:	20080540 	call	2008054 <__muldf3>
 200d35c:	1009883a 	mov	r4,r2
 200d360:	180b883a 	mov	r5,r3
 200d364:	2005883a 	mov	r2,r4
 200d368:	2807883a 	mov	r3,r5
 200d36c:	e0bff215 	stw	r2,-56(fp)
 200d370:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 200d374:	003f9a06 	br	200d1e0 <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 200d378:	0001883a 	nop
 200d37c:	00000106 	br	200d384 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 200d380:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 200d384:	e0bfe917 	ldw	r2,-92(fp)
 200d388:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 200d38c:	e0bff417 	ldw	r2,-48(fp)
 200d390:	e0fff517 	ldw	r3,-44(fp)
 200d394:	e0bff215 	stw	r2,-56(fp)
 200d398:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 200d39c:	e0bfea17 	ldw	r2,-88(fp)
 200d3a0:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 200d3a4:	e0bfeb17 	ldw	r2,-84(fp)
 200d3a8:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 200d3ac:	e0bff117 	ldw	r2,-60(fp)
 200d3b0:	1000b816 	blt	r2,zero,200d694 <_dtoa_r+0x11e4>
 200d3b4:	e0bfd717 	ldw	r2,-164(fp)
 200d3b8:	108003c8 	cmpgei	r2,r2,15
 200d3bc:	1000b51e 	bne	r2,zero,200d694 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 200d3c0:	008080b4 	movhi	r2,514
 200d3c4:	108a2e04 	addi	r2,r2,10424
 200d3c8:	e0ffd717 	ldw	r3,-164(fp)
 200d3cc:	180690fa 	slli	r3,r3,3
 200d3d0:	10c5883a 	add	r2,r2,r3
 200d3d4:	10c00017 	ldw	r3,0(r2)
 200d3d8:	e0ffe515 	stw	r3,-108(fp)
 200d3dc:	10800117 	ldw	r2,4(r2)
 200d3e0:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 200d3e4:	e0800217 	ldw	r2,8(fp)
 200d3e8:	1000190e 	bge	r2,zero,200d450 <_dtoa_r+0xfa0>
 200d3ec:	e0bfd417 	ldw	r2,-176(fp)
 200d3f0:	00801716 	blt	zero,r2,200d450 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 200d3f4:	e03fe315 	stw	zero,-116(fp)
 200d3f8:	e0bfe317 	ldw	r2,-116(fp)
 200d3fc:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 200d400:	e0bfd417 	ldw	r2,-176(fp)
 200d404:	1001bd16 	blt	r2,zero,200dafc <_dtoa_r+0x164c>
 200d408:	e43ff217 	ldw	r16,-56(fp)
 200d40c:	e47ff317 	ldw	r17,-52(fp)
 200d410:	000d883a 	mov	r6,zero
 200d414:	01d00534 	movhi	r7,16404
 200d418:	e13fe517 	ldw	r4,-108(fp)
 200d41c:	e17fe617 	ldw	r5,-104(fp)
 200d420:	20080540 	call	2008054 <__muldf3>
 200d424:	1009883a 	mov	r4,r2
 200d428:	180b883a 	mov	r5,r3
 200d42c:	2005883a 	mov	r2,r4
 200d430:	2807883a 	mov	r3,r5
 200d434:	100d883a 	mov	r6,r2
 200d438:	180f883a 	mov	r7,r3
 200d43c:	8009883a 	mov	r4,r16
 200d440:	880b883a 	mov	r5,r17
 200d444:	2007f600 	call	2007f60 <__ledf2>
 200d448:	0081ac0e 	bge	zero,r2,200dafc <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 200d44c:	0001b006 	br	200db10 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 200d450:	00800044 	movi	r2,1
 200d454:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 200d458:	e0bff217 	ldw	r2,-56(fp)
 200d45c:	e0fff317 	ldw	r3,-52(fp)
 200d460:	e1bfe517 	ldw	r6,-108(fp)
 200d464:	e1ffe617 	ldw	r7,-104(fp)
 200d468:	1009883a 	mov	r4,r2
 200d46c:	180b883a 	mov	r5,r3
 200d470:	20075140 	call	2007514 <__divdf3>
 200d474:	1009883a 	mov	r4,r2
 200d478:	180b883a 	mov	r5,r3
 200d47c:	2005883a 	mov	r2,r4
 200d480:	2807883a 	mov	r3,r5
 200d484:	1009883a 	mov	r4,r2
 200d488:	180b883a 	mov	r5,r3
 200d48c:	201660c0 	call	201660c <__fixdfsi>
 200d490:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 200d494:	e43ff217 	ldw	r16,-56(fp)
 200d498:	e47ff317 	ldw	r17,-52(fp)
 200d49c:	e13fed17 	ldw	r4,-76(fp)
 200d4a0:	201668c0 	call	201668c <__floatsidf>
 200d4a4:	1011883a 	mov	r8,r2
 200d4a8:	1813883a 	mov	r9,r3
 200d4ac:	e1bfe517 	ldw	r6,-108(fp)
 200d4b0:	e1ffe617 	ldw	r7,-104(fp)
 200d4b4:	4009883a 	mov	r4,r8
 200d4b8:	480b883a 	mov	r5,r9
 200d4bc:	20080540 	call	2008054 <__muldf3>
 200d4c0:	1009883a 	mov	r4,r2
 200d4c4:	180b883a 	mov	r5,r3
 200d4c8:	2005883a 	mov	r2,r4
 200d4cc:	2807883a 	mov	r3,r5
 200d4d0:	100d883a 	mov	r6,r2
 200d4d4:	180f883a 	mov	r7,r3
 200d4d8:	8009883a 	mov	r4,r16
 200d4dc:	880b883a 	mov	r5,r17
 200d4e0:	200876c0 	call	200876c <__subdf3>
 200d4e4:	1009883a 	mov	r4,r2
 200d4e8:	180b883a 	mov	r5,r3
 200d4ec:	2005883a 	mov	r2,r4
 200d4f0:	2807883a 	mov	r3,r5
 200d4f4:	e0bff215 	stw	r2,-56(fp)
 200d4f8:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 200d4fc:	e0bfe717 	ldw	r2,-100(fp)
 200d500:	10c00044 	addi	r3,r2,1
 200d504:	e0ffe715 	stw	r3,-100(fp)
 200d508:	e0ffed17 	ldw	r3,-76(fp)
 200d50c:	18c00c04 	addi	r3,r3,48
 200d510:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 200d514:	e0ffd217 	ldw	r3,-184(fp)
 200d518:	e0bfd417 	ldw	r2,-176(fp)
 200d51c:	1880401e 	bne	r3,r2,200d620 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 200d520:	e0bff217 	ldw	r2,-56(fp)
 200d524:	e0fff317 	ldw	r3,-52(fp)
 200d528:	100d883a 	mov	r6,r2
 200d52c:	180f883a 	mov	r7,r3
 200d530:	1009883a 	mov	r4,r2
 200d534:	180b883a 	mov	r5,r3
 200d538:	2006c680 	call	2006c68 <__adddf3>
 200d53c:	1009883a 	mov	r4,r2
 200d540:	180b883a 	mov	r5,r3
 200d544:	2005883a 	mov	r2,r4
 200d548:	2807883a 	mov	r3,r5
 200d54c:	e0bff215 	stw	r2,-56(fp)
 200d550:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 200d554:	e0bff217 	ldw	r2,-56(fp)
 200d558:	e0fff317 	ldw	r3,-52(fp)
 200d55c:	e1bfe517 	ldw	r6,-108(fp)
 200d560:	e1ffe617 	ldw	r7,-104(fp)
 200d564:	1009883a 	mov	r4,r2
 200d568:	180b883a 	mov	r5,r3
 200d56c:	2007e840 	call	2007e84 <__gedf2>
 200d570:	00801a16 	blt	zero,r2,200d5dc <_dtoa_r+0x112c>
 200d574:	e0bff217 	ldw	r2,-56(fp)
 200d578:	e0fff317 	ldw	r3,-52(fp)
 200d57c:	e1bfe517 	ldw	r6,-108(fp)
 200d580:	e1ffe617 	ldw	r7,-104(fp)
 200d584:	1009883a 	mov	r4,r2
 200d588:	180b883a 	mov	r5,r3
 200d58c:	2007dfc0 	call	2007dfc <__eqdf2>
 200d590:	10003c1e 	bne	r2,zero,200d684 <_dtoa_r+0x11d4>
 200d594:	e0bfed17 	ldw	r2,-76(fp)
 200d598:	1080004c 	andi	r2,r2,1
 200d59c:	10003926 	beq	r2,zero,200d684 <_dtoa_r+0x11d4>
 200d5a0:	00000e06 	br	200d5dc <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 200d5a4:	0001883a 	nop
 200d5a8:	00000c06 	br	200d5dc <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 200d5ac:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 200d5b0:	00000a06 	br	200d5dc <_dtoa_r+0x112c>
		    if (s == s0)
 200d5b4:	e0ffe717 	ldw	r3,-100(fp)
 200d5b8:	e0bfe917 	ldw	r2,-92(fp)
 200d5bc:	1880071e 	bne	r3,r2,200d5dc <_dtoa_r+0x112c>
		      {
			k++;
 200d5c0:	e0bfd717 	ldw	r2,-164(fp)
 200d5c4:	10800044 	addi	r2,r2,1
 200d5c8:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 200d5cc:	e0bfe717 	ldw	r2,-100(fp)
 200d5d0:	00c00c04 	movi	r3,48
 200d5d4:	10c00005 	stb	r3,0(r2)
			break;
 200d5d8:	00000a06 	br	200d604 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 200d5dc:	e0bfe717 	ldw	r2,-100(fp)
 200d5e0:	10bfffc4 	addi	r2,r2,-1
 200d5e4:	e0bfe715 	stw	r2,-100(fp)
 200d5e8:	e0bfe717 	ldw	r2,-100(fp)
 200d5ec:	10800003 	ldbu	r2,0(r2)
 200d5f0:	10803fcc 	andi	r2,r2,255
 200d5f4:	1080201c 	xori	r2,r2,128
 200d5f8:	10bfe004 	addi	r2,r2,-128
 200d5fc:	10800e60 	cmpeqi	r2,r2,57
 200d600:	103fec1e 	bne	r2,zero,200d5b4 <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 200d604:	e0bfe717 	ldw	r2,-100(fp)
 200d608:	10c00044 	addi	r3,r2,1
 200d60c:	e0ffe715 	stw	r3,-100(fp)
 200d610:	10c00003 	ldbu	r3,0(r2)
 200d614:	18c00044 	addi	r3,r3,1
 200d618:	10c00005 	stb	r3,0(r2)
		}
	      break;
 200d61c:	00001906 	br	200d684 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 200d620:	e0bff217 	ldw	r2,-56(fp)
 200d624:	e0fff317 	ldw	r3,-52(fp)
 200d628:	000d883a 	mov	r6,zero
 200d62c:	01d00934 	movhi	r7,16420
 200d630:	1009883a 	mov	r4,r2
 200d634:	180b883a 	mov	r5,r3
 200d638:	20080540 	call	2008054 <__muldf3>
 200d63c:	1009883a 	mov	r4,r2
 200d640:	180b883a 	mov	r5,r3
 200d644:	2005883a 	mov	r2,r4
 200d648:	2807883a 	mov	r3,r5
 200d64c:	e0bff215 	stw	r2,-56(fp)
 200d650:	e0fff315 	stw	r3,-52(fp)
 200d654:	e0bff217 	ldw	r2,-56(fp)
 200d658:	e0fff317 	ldw	r3,-52(fp)
 200d65c:	000d883a 	mov	r6,zero
 200d660:	000f883a 	mov	r7,zero
 200d664:	1009883a 	mov	r4,r2
 200d668:	180b883a 	mov	r5,r3
 200d66c:	2007dfc0 	call	2007dfc <__eqdf2>
 200d670:	10000626 	beq	r2,zero,200d68c <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 200d674:	e0bfd217 	ldw	r2,-184(fp)
 200d678:	10800044 	addi	r2,r2,1
 200d67c:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 200d680:	003f7506 	br	200d458 <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 200d684:	0001883a 	nop
 200d688:	00024f06 	br	200dfc8 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 200d68c:	0001883a 	nop
	}
      goto ret1;
 200d690:	00024d06 	br	200dfc8 <_dtoa_r+0x1b18>
    }

  m2 = b2;
 200d694:	e0bfcf17 	ldw	r2,-196(fp)
 200d698:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 200d69c:	e0bfd017 	ldw	r2,-192(fp)
 200d6a0:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 200d6a4:	e03fe215 	stw	zero,-120(fp)
 200d6a8:	e0bfe217 	ldw	r2,-120(fp)
 200d6ac:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 200d6b0:	e0bfd917 	ldw	r2,-156(fp)
 200d6b4:	10003a26 	beq	r2,zero,200d7a0 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 200d6b8:	e0bffb17 	ldw	r2,-20(fp)
 200d6bc:	10800088 	cmpgei	r2,r2,2
 200d6c0:	10000a1e 	bne	r2,zero,200d6ec <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 200d6c4:	e0bfe017 	ldw	r2,-128(fp)
 200d6c8:	10000326 	beq	r2,zero,200d6d8 <_dtoa_r+0x1228>
 200d6cc:	e0bff117 	ldw	r2,-60(fp)
 200d6d0:	10810cc4 	addi	r2,r2,1075
 200d6d4:	00000306 	br	200d6e4 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 200d6d8:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 200d6dc:	00c00d84 	movi	r3,54
 200d6e0:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 200d6e4:	e0bfd215 	stw	r2,-184(fp)
 200d6e8:	00002106 	br	200d770 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 200d6ec:	e0bfd417 	ldw	r2,-176(fp)
 200d6f0:	10bfffc4 	addi	r2,r2,-1
 200d6f4:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 200d6f8:	e0ffdb17 	ldw	r3,-148(fp)
 200d6fc:	e0bfd617 	ldw	r2,-168(fp)
 200d700:	18800516 	blt	r3,r2,200d718 <_dtoa_r+0x1268>
	    m5 -= j;
 200d704:	e0ffdb17 	ldw	r3,-148(fp)
 200d708:	e0bfd617 	ldw	r2,-168(fp)
 200d70c:	1885c83a 	sub	r2,r3,r2
 200d710:	e0bfdb15 	stw	r2,-148(fp)
 200d714:	00000d06 	br	200d74c <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 200d718:	e0ffd617 	ldw	r3,-168(fp)
 200d71c:	e0bfdb17 	ldw	r2,-148(fp)
 200d720:	1885c83a 	sub	r2,r3,r2
 200d724:	e0bfd615 	stw	r2,-168(fp)
 200d728:	e0bfd617 	ldw	r2,-168(fp)
 200d72c:	e0ffdd17 	ldw	r3,-140(fp)
 200d730:	1885883a 	add	r2,r3,r2
 200d734:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 200d738:	e0ffd017 	ldw	r3,-192(fp)
 200d73c:	e0bfd617 	ldw	r2,-168(fp)
 200d740:	1885883a 	add	r2,r3,r2
 200d744:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 200d748:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 200d74c:	e0bfd417 	ldw	r2,-176(fp)
 200d750:	e0bfd215 	stw	r2,-184(fp)
 200d754:	e0bfd217 	ldw	r2,-184(fp)
 200d758:	1000050e 	bge	r2,zero,200d770 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 200d75c:	e0ffda17 	ldw	r3,-152(fp)
 200d760:	e0bfd217 	ldw	r2,-184(fp)
 200d764:	1885c83a 	sub	r2,r3,r2
 200d768:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 200d76c:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 200d770:	e0ffcf17 	ldw	r3,-196(fp)
 200d774:	e0bfd217 	ldw	r2,-184(fp)
 200d778:	1885883a 	add	r2,r3,r2
 200d77c:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 200d780:	e0ffdc17 	ldw	r3,-144(fp)
 200d784:	e0bfd217 	ldw	r2,-184(fp)
 200d788:	1885883a 	add	r2,r3,r2
 200d78c:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 200d790:	01400044 	movi	r5,1
 200d794:	e13ff817 	ldw	r4,-32(fp)
 200d798:	20115940 	call	2011594 <__i2b>
 200d79c:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 200d7a0:	e0bfda17 	ldw	r2,-152(fp)
 200d7a4:	0080130e 	bge	zero,r2,200d7f4 <_dtoa_r+0x1344>
 200d7a8:	e0bfdc17 	ldw	r2,-144(fp)
 200d7ac:	0080110e 	bge	zero,r2,200d7f4 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 200d7b0:	e0ffda17 	ldw	r3,-152(fp)
 200d7b4:	e0bfdc17 	ldw	r2,-144(fp)
 200d7b8:	1880010e 	bge	r3,r2,200d7c0 <_dtoa_r+0x1310>
 200d7bc:	1805883a 	mov	r2,r3
 200d7c0:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 200d7c4:	e0ffcf17 	ldw	r3,-196(fp)
 200d7c8:	e0bfd217 	ldw	r2,-184(fp)
 200d7cc:	1885c83a 	sub	r2,r3,r2
 200d7d0:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 200d7d4:	e0ffda17 	ldw	r3,-152(fp)
 200d7d8:	e0bfd217 	ldw	r2,-184(fp)
 200d7dc:	1885c83a 	sub	r2,r3,r2
 200d7e0:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 200d7e4:	e0ffdc17 	ldw	r3,-144(fp)
 200d7e8:	e0bfd217 	ldw	r2,-184(fp)
 200d7ec:	1885c83a 	sub	r2,r3,r2
 200d7f0:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 200d7f4:	e0bfd017 	ldw	r2,-192(fp)
 200d7f8:	0080240e 	bge	zero,r2,200d88c <_dtoa_r+0x13dc>
    {
      if (leftright)
 200d7fc:	e0bfd917 	ldw	r2,-156(fp)
 200d800:	10001d26 	beq	r2,zero,200d878 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 200d804:	e0bfdb17 	ldw	r2,-148(fp)
 200d808:	00800f0e 	bge	zero,r2,200d848 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 200d80c:	e1bfdb17 	ldw	r6,-148(fp)
 200d810:	e17fe317 	ldw	r5,-116(fp)
 200d814:	e13ff817 	ldw	r4,-32(fp)
 200d818:	20119bc0 	call	20119bc <__pow5mult>
 200d81c:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 200d820:	e1bfe117 	ldw	r6,-124(fp)
 200d824:	e17fe317 	ldw	r5,-116(fp)
 200d828:	e13ff817 	ldw	r4,-32(fp)
 200d82c:	20115ec0 	call	20115ec <__multiply>
 200d830:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 200d834:	e17fe117 	ldw	r5,-124(fp)
 200d838:	e13ff817 	ldw	r4,-32(fp)
 200d83c:	201107c0 	call	201107c <_Bfree>
	      b = b1;
 200d840:	e0bfee17 	ldw	r2,-72(fp)
 200d844:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 200d848:	e0ffd017 	ldw	r3,-192(fp)
 200d84c:	e0bfdb17 	ldw	r2,-148(fp)
 200d850:	1885c83a 	sub	r2,r3,r2
 200d854:	e0bfd615 	stw	r2,-168(fp)
 200d858:	e0bfd617 	ldw	r2,-168(fp)
 200d85c:	10000b26 	beq	r2,zero,200d88c <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 200d860:	e1bfd617 	ldw	r6,-168(fp)
 200d864:	e17fe117 	ldw	r5,-124(fp)
 200d868:	e13ff817 	ldw	r4,-32(fp)
 200d86c:	20119bc0 	call	20119bc <__pow5mult>
 200d870:	e0bfe115 	stw	r2,-124(fp)
 200d874:	00000506 	br	200d88c <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 200d878:	e1bfd017 	ldw	r6,-192(fp)
 200d87c:	e17fe117 	ldw	r5,-124(fp)
 200d880:	e13ff817 	ldw	r4,-32(fp)
 200d884:	20119bc0 	call	20119bc <__pow5mult>
 200d888:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 200d88c:	01400044 	movi	r5,1
 200d890:	e13ff817 	ldw	r4,-32(fp)
 200d894:	20115940 	call	2011594 <__i2b>
 200d898:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 200d89c:	e0bfdd17 	ldw	r2,-140(fp)
 200d8a0:	0080050e 	bge	zero,r2,200d8b8 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 200d8a4:	e1bfdd17 	ldw	r6,-140(fp)
 200d8a8:	e17fe417 	ldw	r5,-112(fp)
 200d8ac:	e13ff817 	ldw	r4,-32(fp)
 200d8b0:	20119bc0 	call	20119bc <__pow5mult>
 200d8b4:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 200d8b8:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 200d8bc:	e0bffb17 	ldw	r2,-20(fp)
 200d8c0:	10800088 	cmpgei	r2,r2,2
 200d8c4:	1000121e 	bne	r2,zero,200d910 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 200d8c8:	e0bff217 	ldw	r2,-56(fp)
 200d8cc:	1000101e 	bne	r2,zero,200d910 <_dtoa_r+0x1460>
 200d8d0:	e0fff317 	ldw	r3,-52(fp)
 200d8d4:	00800434 	movhi	r2,16
 200d8d8:	10bfffc4 	addi	r2,r2,-1
 200d8dc:	1884703a 	and	r2,r3,r2
 200d8e0:	10000b1e 	bne	r2,zero,200d910 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 200d8e4:	e0bff317 	ldw	r2,-52(fp)
 200d8e8:	109ffc2c 	andhi	r2,r2,32752
 200d8ec:	10000826 	beq	r2,zero,200d910 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 200d8f0:	e0bfcf17 	ldw	r2,-196(fp)
 200d8f4:	10800044 	addi	r2,r2,1
 200d8f8:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 200d8fc:	e0bfdc17 	ldw	r2,-144(fp)
 200d900:	10800044 	addi	r2,r2,1
 200d904:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 200d908:	00800044 	movi	r2,1
 200d90c:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 200d910:	e0bfdd17 	ldw	r2,-140(fp)
 200d914:	10000f26 	beq	r2,zero,200d954 <_dtoa_r+0x14a4>
 200d918:	e0bfe417 	ldw	r2,-112(fp)
 200d91c:	10800417 	ldw	r2,16(r2)
 200d920:	10bfffc4 	addi	r2,r2,-1
 200d924:	e0ffe417 	ldw	r3,-112(fp)
 200d928:	10800144 	addi	r2,r2,5
 200d92c:	1085883a 	add	r2,r2,r2
 200d930:	1085883a 	add	r2,r2,r2
 200d934:	1885883a 	add	r2,r3,r2
 200d938:	10800017 	ldw	r2,0(r2)
 200d93c:	1009883a 	mov	r4,r2
 200d940:	20114180 	call	2011418 <__hi0bits>
 200d944:	1007883a 	mov	r3,r2
 200d948:	00800804 	movi	r2,32
 200d94c:	10c5c83a 	sub	r2,r2,r3
 200d950:	00000106 	br	200d958 <_dtoa_r+0x14a8>
 200d954:	00800044 	movi	r2,1
 200d958:	e0ffdc17 	ldw	r3,-144(fp)
 200d95c:	10c5883a 	add	r2,r2,r3
 200d960:	108007cc 	andi	r2,r2,31
 200d964:	e0bfd215 	stw	r2,-184(fp)
 200d968:	e0bfd217 	ldw	r2,-184(fp)
 200d96c:	10000426 	beq	r2,zero,200d980 <_dtoa_r+0x14d0>
    i = 32 - i;
 200d970:	00c00804 	movi	r3,32
 200d974:	e0bfd217 	ldw	r2,-184(fp)
 200d978:	1885c83a 	sub	r2,r3,r2
 200d97c:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 200d980:	e0bfd217 	ldw	r2,-184(fp)
 200d984:	10800150 	cmplti	r2,r2,5
 200d988:	1000101e 	bne	r2,zero,200d9cc <_dtoa_r+0x151c>
    {
      i -= 4;
 200d98c:	e0bfd217 	ldw	r2,-184(fp)
 200d990:	10bfff04 	addi	r2,r2,-4
 200d994:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200d998:	e0ffcf17 	ldw	r3,-196(fp)
 200d99c:	e0bfd217 	ldw	r2,-184(fp)
 200d9a0:	1885883a 	add	r2,r3,r2
 200d9a4:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 200d9a8:	e0ffda17 	ldw	r3,-152(fp)
 200d9ac:	e0bfd217 	ldw	r2,-184(fp)
 200d9b0:	1885883a 	add	r2,r3,r2
 200d9b4:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 200d9b8:	e0ffdc17 	ldw	r3,-144(fp)
 200d9bc:	e0bfd217 	ldw	r2,-184(fp)
 200d9c0:	1885883a 	add	r2,r3,r2
 200d9c4:	e0bfdc15 	stw	r2,-144(fp)
 200d9c8:	00001206 	br	200da14 <_dtoa_r+0x1564>
    }
  else if (i < 4)
 200d9cc:	e0bfd217 	ldw	r2,-184(fp)
 200d9d0:	10800108 	cmpgei	r2,r2,4
 200d9d4:	10000f1e 	bne	r2,zero,200da14 <_dtoa_r+0x1564>
    {
      i += 28;
 200d9d8:	e0bfd217 	ldw	r2,-184(fp)
 200d9dc:	10800704 	addi	r2,r2,28
 200d9e0:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200d9e4:	e0ffcf17 	ldw	r3,-196(fp)
 200d9e8:	e0bfd217 	ldw	r2,-184(fp)
 200d9ec:	1885883a 	add	r2,r3,r2
 200d9f0:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 200d9f4:	e0ffda17 	ldw	r3,-152(fp)
 200d9f8:	e0bfd217 	ldw	r2,-184(fp)
 200d9fc:	1885883a 	add	r2,r3,r2
 200da00:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 200da04:	e0ffdc17 	ldw	r3,-144(fp)
 200da08:	e0bfd217 	ldw	r2,-184(fp)
 200da0c:	1885883a 	add	r2,r3,r2
 200da10:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 200da14:	e0bfcf17 	ldw	r2,-196(fp)
 200da18:	0080050e 	bge	zero,r2,200da30 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 200da1c:	e1bfcf17 	ldw	r6,-196(fp)
 200da20:	e17fe117 	ldw	r5,-124(fp)
 200da24:	e13ff817 	ldw	r4,-32(fp)
 200da28:	2011b340 	call	2011b34 <__lshift>
 200da2c:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 200da30:	e0bfdc17 	ldw	r2,-144(fp)
 200da34:	0080050e 	bge	zero,r2,200da4c <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 200da38:	e1bfdc17 	ldw	r6,-144(fp)
 200da3c:	e17fe417 	ldw	r5,-112(fp)
 200da40:	e13ff817 	ldw	r4,-32(fp)
 200da44:	2011b340 	call	2011b34 <__lshift>
 200da48:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 200da4c:	e0bfd817 	ldw	r2,-160(fp)
 200da50:	10001726 	beq	r2,zero,200dab0 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 200da54:	e17fe417 	ldw	r5,-112(fp)
 200da58:	e13fe117 	ldw	r4,-124(fp)
 200da5c:	2011d2c0 	call	2011d2c <__mcmp>
 200da60:	1000130e 	bge	r2,zero,200dab0 <_dtoa_r+0x1600>
	{
	  k--;
 200da64:	e0bfd717 	ldw	r2,-164(fp)
 200da68:	10bfffc4 	addi	r2,r2,-1
 200da6c:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 200da70:	000f883a 	mov	r7,zero
 200da74:	01800284 	movi	r6,10
 200da78:	e17fe117 	ldw	r5,-124(fp)
 200da7c:	e13ff817 	ldw	r4,-32(fp)
 200da80:	20110f80 	call	20110f8 <__multadd>
 200da84:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 200da88:	e0bfd917 	ldw	r2,-156(fp)
 200da8c:	10000626 	beq	r2,zero,200daa8 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 200da90:	000f883a 	mov	r7,zero
 200da94:	01800284 	movi	r6,10
 200da98:	e17fe317 	ldw	r5,-116(fp)
 200da9c:	e13ff817 	ldw	r4,-32(fp)
 200daa0:	20110f80 	call	20110f8 <__multadd>
 200daa4:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 200daa8:	e0bfd517 	ldw	r2,-172(fp)
 200daac:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 200dab0:	e0bfd417 	ldw	r2,-176(fp)
 200dab4:	00801f16 	blt	zero,r2,200db34 <_dtoa_r+0x1684>
 200dab8:	e0bffb17 	ldw	r2,-20(fp)
 200dabc:	108000d0 	cmplti	r2,r2,3
 200dac0:	10001c1e 	bne	r2,zero,200db34 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 200dac4:	e0bfd417 	ldw	r2,-176(fp)
 200dac8:	10000c16 	blt	r2,zero,200dafc <_dtoa_r+0x164c>
 200dacc:	000f883a 	mov	r7,zero
 200dad0:	01800144 	movi	r6,5
 200dad4:	e17fe417 	ldw	r5,-112(fp)
 200dad8:	e13ff817 	ldw	r4,-32(fp)
 200dadc:	20110f80 	call	20110f8 <__multadd>
 200dae0:	e0bfe415 	stw	r2,-112(fp)
 200dae4:	e17fe417 	ldw	r5,-112(fp)
 200dae8:	e13fe117 	ldw	r4,-124(fp)
 200daec:	2011d2c0 	call	2011d2c <__mcmp>
 200daf0:	00800716 	blt	zero,r2,200db10 <_dtoa_r+0x1660>
 200daf4:	00000106 	br	200dafc <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 200daf8:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 200dafc:	e0800217 	ldw	r2,8(fp)
 200db00:	0084303a 	nor	r2,zero,r2
 200db04:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 200db08:	00011d06 	br	200df80 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 200db0c:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 200db10:	e0bfe717 	ldw	r2,-100(fp)
 200db14:	10c00044 	addi	r3,r2,1
 200db18:	e0ffe715 	stw	r3,-100(fp)
 200db1c:	00c00c44 	movi	r3,49
 200db20:	10c00005 	stb	r3,0(r2)
      k++;
 200db24:	e0bfd717 	ldw	r2,-164(fp)
 200db28:	10800044 	addi	r2,r2,1
 200db2c:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 200db30:	00011306 	br	200df80 <_dtoa_r+0x1ad0>
    }
  if (leftright)
 200db34:	e0bfd917 	ldw	r2,-156(fp)
 200db38:	1000ba26 	beq	r2,zero,200de24 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 200db3c:	e0bfda17 	ldw	r2,-152(fp)
 200db40:	0080050e 	bge	zero,r2,200db58 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 200db44:	e1bfda17 	ldw	r6,-152(fp)
 200db48:	e17fe317 	ldw	r5,-116(fp)
 200db4c:	e13ff817 	ldw	r4,-32(fp)
 200db50:	2011b340 	call	2011b34 <__lshift>
 200db54:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 200db58:	e0bfe317 	ldw	r2,-116(fp)
 200db5c:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 200db60:	e0bfde17 	ldw	r2,-136(fp)
 200db64:	10001826 	beq	r2,zero,200dbc8 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 200db68:	e0bfe317 	ldw	r2,-116(fp)
 200db6c:	10800117 	ldw	r2,4(r2)
 200db70:	100b883a 	mov	r5,r2
 200db74:	e13ff817 	ldw	r4,-32(fp)
 200db78:	2010f4c0 	call	2010f4c <_Balloc>
 200db7c:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 200db80:	e0bfe317 	ldw	r2,-116(fp)
 200db84:	10c00304 	addi	r3,r2,12
 200db88:	e0bfe217 	ldw	r2,-120(fp)
 200db8c:	11000304 	addi	r4,r2,12
 200db90:	e0bfe217 	ldw	r2,-120(fp)
 200db94:	10800417 	ldw	r2,16(r2)
 200db98:	10800084 	addi	r2,r2,2
 200db9c:	1085883a 	add	r2,r2,r2
 200dba0:	1085883a 	add	r2,r2,r2
 200dba4:	100d883a 	mov	r6,r2
 200dba8:	200b883a 	mov	r5,r4
 200dbac:	1809883a 	mov	r4,r3
 200dbb0:	20093a40 	call	20093a4 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 200dbb4:	01800044 	movi	r6,1
 200dbb8:	e17fe317 	ldw	r5,-116(fp)
 200dbbc:	e13ff817 	ldw	r4,-32(fp)
 200dbc0:	2011b340 	call	2011b34 <__lshift>
 200dbc4:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 200dbc8:	00800044 	movi	r2,1
 200dbcc:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 200dbd0:	e17fe417 	ldw	r5,-112(fp)
 200dbd4:	e13fe117 	ldw	r4,-124(fp)
 200dbd8:	200c0fc0 	call	200c0fc <quorem>
 200dbdc:	10800c04 	addi	r2,r2,48
 200dbe0:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 200dbe4:	e17fe217 	ldw	r5,-120(fp)
 200dbe8:	e13fe117 	ldw	r4,-124(fp)
 200dbec:	2011d2c0 	call	2011d2c <__mcmp>
 200dbf0:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 200dbf4:	e1bfe317 	ldw	r6,-116(fp)
 200dbf8:	e17fe417 	ldw	r5,-112(fp)
 200dbfc:	e13ff817 	ldw	r4,-32(fp)
 200dc00:	2011e400 	call	2011e40 <__mdiff>
 200dc04:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 200dc08:	e0bfef17 	ldw	r2,-68(fp)
 200dc0c:	10800317 	ldw	r2,12(r2)
 200dc10:	1000041e 	bne	r2,zero,200dc24 <_dtoa_r+0x1774>
 200dc14:	e17fef17 	ldw	r5,-68(fp)
 200dc18:	e13fe117 	ldw	r4,-124(fp)
 200dc1c:	2011d2c0 	call	2011d2c <__mcmp>
 200dc20:	00000106 	br	200dc28 <_dtoa_r+0x1778>
 200dc24:	00800044 	movi	r2,1
 200dc28:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 200dc2c:	e17fef17 	ldw	r5,-68(fp)
 200dc30:	e13ff817 	ldw	r4,-32(fp)
 200dc34:	201107c0 	call	201107c <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 200dc38:	e0bfec17 	ldw	r2,-80(fp)
 200dc3c:	1000131e 	bne	r2,zero,200dc8c <_dtoa_r+0x17dc>
 200dc40:	e0bffb17 	ldw	r2,-20(fp)
 200dc44:	1000111e 	bne	r2,zero,200dc8c <_dtoa_r+0x17dc>
 200dc48:	e0bff217 	ldw	r2,-56(fp)
 200dc4c:	1080004c 	andi	r2,r2,1
 200dc50:	10000e1e 	bne	r2,zero,200dc8c <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 200dc54:	e0bfd117 	ldw	r2,-188(fp)
 200dc58:	10800e58 	cmpnei	r2,r2,57
 200dc5c:	10003726 	beq	r2,zero,200dd3c <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 200dc60:	e0bfd617 	ldw	r2,-168(fp)
 200dc64:	0080030e 	bge	zero,r2,200dc74 <_dtoa_r+0x17c4>
		dig++;
 200dc68:	e0bfd117 	ldw	r2,-188(fp)
 200dc6c:	10800044 	addi	r2,r2,1
 200dc70:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 200dc74:	e0bfe717 	ldw	r2,-100(fp)
 200dc78:	10c00044 	addi	r3,r2,1
 200dc7c:	e0ffe715 	stw	r3,-100(fp)
 200dc80:	e0ffd117 	ldw	r3,-188(fp)
 200dc84:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200dc88:	0000bd06 	br	200df80 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 200dc8c:	e0bfd617 	ldw	r2,-168(fp)
 200dc90:	10000716 	blt	r2,zero,200dcb0 <_dtoa_r+0x1800>
 200dc94:	e0bfd617 	ldw	r2,-168(fp)
 200dc98:	1000221e 	bne	r2,zero,200dd24 <_dtoa_r+0x1874>
 200dc9c:	e0bffb17 	ldw	r2,-20(fp)
 200dca0:	1000201e 	bne	r2,zero,200dd24 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 200dca4:	e0bff217 	ldw	r2,-56(fp)
 200dca8:	1080004c 	andi	r2,r2,1
 200dcac:	10001d1e 	bne	r2,zero,200dd24 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 200dcb0:	e0bfec17 	ldw	r2,-80(fp)
 200dcb4:	0080150e 	bge	zero,r2,200dd0c <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 200dcb8:	01800044 	movi	r6,1
 200dcbc:	e17fe117 	ldw	r5,-124(fp)
 200dcc0:	e13ff817 	ldw	r4,-32(fp)
 200dcc4:	2011b340 	call	2011b34 <__lshift>
 200dcc8:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 200dccc:	e17fe417 	ldw	r5,-112(fp)
 200dcd0:	e13fe117 	ldw	r4,-124(fp)
 200dcd4:	2011d2c0 	call	2011d2c <__mcmp>
 200dcd8:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 200dcdc:	e0bfec17 	ldw	r2,-80(fp)
 200dce0:	00800516 	blt	zero,r2,200dcf8 <_dtoa_r+0x1848>
 200dce4:	e0bfec17 	ldw	r2,-80(fp)
 200dce8:	1000081e 	bne	r2,zero,200dd0c <_dtoa_r+0x185c>
 200dcec:	e0bfd117 	ldw	r2,-188(fp)
 200dcf0:	1080004c 	andi	r2,r2,1
 200dcf4:	10000526 	beq	r2,zero,200dd0c <_dtoa_r+0x185c>
		      && dig++ == '9')
 200dcf8:	e0bfd117 	ldw	r2,-188(fp)
 200dcfc:	10c00044 	addi	r3,r2,1
 200dd00:	e0ffd115 	stw	r3,-188(fp)
 200dd04:	10800e58 	cmpnei	r2,r2,57
 200dd08:	10000e26 	beq	r2,zero,200dd44 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 200dd0c:	e0bfe717 	ldw	r2,-100(fp)
 200dd10:	10c00044 	addi	r3,r2,1
 200dd14:	e0ffe715 	stw	r3,-100(fp)
 200dd18:	e0ffd117 	ldw	r3,-188(fp)
 200dd1c:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200dd20:	00009706 	br	200df80 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 200dd24:	e0bfec17 	ldw	r2,-80(fp)
 200dd28:	0080140e 	bge	zero,r2,200dd7c <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 200dd2c:	e0bfd117 	ldw	r2,-188(fp)
 200dd30:	10800e58 	cmpnei	r2,r2,57
 200dd34:	10000a1e 	bne	r2,zero,200dd60 <_dtoa_r+0x18b0>
 200dd38:	00000306 	br	200dd48 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 200dd3c:	0001883a 	nop
 200dd40:	00000106 	br	200dd48 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 200dd44:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 200dd48:	e0bfe717 	ldw	r2,-100(fp)
 200dd4c:	10c00044 	addi	r3,r2,1
 200dd50:	e0ffe715 	stw	r3,-100(fp)
 200dd54:	00c00e44 	movi	r3,57
 200dd58:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 200dd5c:	00005d06 	br	200ded4 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 200dd60:	e0bfe717 	ldw	r2,-100(fp)
 200dd64:	10c00044 	addi	r3,r2,1
 200dd68:	e0ffe715 	stw	r3,-100(fp)
 200dd6c:	e0ffd117 	ldw	r3,-188(fp)
 200dd70:	18c00044 	addi	r3,r3,1
 200dd74:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200dd78:	00008106 	br	200df80 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 200dd7c:	e0bfe717 	ldw	r2,-100(fp)
 200dd80:	10c00044 	addi	r3,r2,1
 200dd84:	e0ffe715 	stw	r3,-100(fp)
 200dd88:	e0ffd117 	ldw	r3,-188(fp)
 200dd8c:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 200dd90:	e0ffd217 	ldw	r3,-184(fp)
 200dd94:	e0bfd417 	ldw	r2,-176(fp)
 200dd98:	18803b26 	beq	r3,r2,200de88 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 200dd9c:	000f883a 	mov	r7,zero
 200dda0:	01800284 	movi	r6,10
 200dda4:	e17fe117 	ldw	r5,-124(fp)
 200dda8:	e13ff817 	ldw	r4,-32(fp)
 200ddac:	20110f80 	call	20110f8 <__multadd>
 200ddb0:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 200ddb4:	e0ffe217 	ldw	r3,-120(fp)
 200ddb8:	e0bfe317 	ldw	r2,-116(fp)
 200ddbc:	1880091e 	bne	r3,r2,200dde4 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 200ddc0:	000f883a 	mov	r7,zero
 200ddc4:	01800284 	movi	r6,10
 200ddc8:	e17fe317 	ldw	r5,-116(fp)
 200ddcc:	e13ff817 	ldw	r4,-32(fp)
 200ddd0:	20110f80 	call	20110f8 <__multadd>
 200ddd4:	e0bfe315 	stw	r2,-116(fp)
 200ddd8:	e0bfe317 	ldw	r2,-116(fp)
 200dddc:	e0bfe215 	stw	r2,-120(fp)
 200dde0:	00000c06 	br	200de14 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 200dde4:	000f883a 	mov	r7,zero
 200dde8:	01800284 	movi	r6,10
 200ddec:	e17fe217 	ldw	r5,-120(fp)
 200ddf0:	e13ff817 	ldw	r4,-32(fp)
 200ddf4:	20110f80 	call	20110f8 <__multadd>
 200ddf8:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 200ddfc:	000f883a 	mov	r7,zero
 200de00:	01800284 	movi	r6,10
 200de04:	e17fe317 	ldw	r5,-116(fp)
 200de08:	e13ff817 	ldw	r4,-32(fp)
 200de0c:	20110f80 	call	20110f8 <__multadd>
 200de10:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 200de14:	e0bfd217 	ldw	r2,-184(fp)
 200de18:	10800044 	addi	r2,r2,1
 200de1c:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 200de20:	003f6b06 	br	200dbd0 <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 200de24:	00800044 	movi	r2,1
 200de28:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 200de2c:	e43fe717 	ldw	r16,-100(fp)
 200de30:	80800044 	addi	r2,r16,1
 200de34:	e0bfe715 	stw	r2,-100(fp)
 200de38:	e17fe417 	ldw	r5,-112(fp)
 200de3c:	e13fe117 	ldw	r4,-124(fp)
 200de40:	200c0fc0 	call	200c0fc <quorem>
 200de44:	10800c04 	addi	r2,r2,48
 200de48:	e0bfd115 	stw	r2,-188(fp)
 200de4c:	e0bfd117 	ldw	r2,-188(fp)
 200de50:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 200de54:	e0ffd217 	ldw	r3,-184(fp)
 200de58:	e0bfd417 	ldw	r2,-176(fp)
 200de5c:	18800c0e 	bge	r3,r2,200de90 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 200de60:	000f883a 	mov	r7,zero
 200de64:	01800284 	movi	r6,10
 200de68:	e17fe117 	ldw	r5,-124(fp)
 200de6c:	e13ff817 	ldw	r4,-32(fp)
 200de70:	20110f80 	call	20110f8 <__multadd>
 200de74:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 200de78:	e0bfd217 	ldw	r2,-184(fp)
 200de7c:	10800044 	addi	r2,r2,1
 200de80:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 200de84:	003fe906 	br	200de2c <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 200de88:	0001883a 	nop
 200de8c:	00000106 	br	200de94 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 200de90:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 200de94:	01800044 	movi	r6,1
 200de98:	e17fe117 	ldw	r5,-124(fp)
 200de9c:	e13ff817 	ldw	r4,-32(fp)
 200dea0:	2011b340 	call	2011b34 <__lshift>
 200dea4:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 200dea8:	e17fe417 	ldw	r5,-112(fp)
 200deac:	e13fe117 	ldw	r4,-124(fp)
 200deb0:	2011d2c0 	call	2011d2c <__mcmp>
 200deb4:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 200deb8:	e0bfd617 	ldw	r2,-168(fp)
 200debc:	00801216 	blt	zero,r2,200df08 <_dtoa_r+0x1a58>
 200dec0:	e0bfd617 	ldw	r2,-168(fp)
 200dec4:	1000211e 	bne	r2,zero,200df4c <_dtoa_r+0x1a9c>
 200dec8:	e0bfd117 	ldw	r2,-188(fp)
 200decc:	1080004c 	andi	r2,r2,1
 200ded0:	10001e26 	beq	r2,zero,200df4c <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 200ded4:	00000c06 	br	200df08 <_dtoa_r+0x1a58>
	if (s == s0)
 200ded8:	e0ffe717 	ldw	r3,-100(fp)
 200dedc:	e0bfe917 	ldw	r2,-92(fp)
 200dee0:	1880091e 	bne	r3,r2,200df08 <_dtoa_r+0x1a58>
	  {
	    k++;
 200dee4:	e0bfd717 	ldw	r2,-164(fp)
 200dee8:	10800044 	addi	r2,r2,1
 200deec:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 200def0:	e0bfe717 	ldw	r2,-100(fp)
 200def4:	10c00044 	addi	r3,r2,1
 200def8:	e0ffe715 	stw	r3,-100(fp)
 200defc:	00c00c44 	movi	r3,49
 200df00:	10c00005 	stb	r3,0(r2)
	    goto ret;
 200df04:	00001e06 	br	200df80 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 200df08:	e0bfe717 	ldw	r2,-100(fp)
 200df0c:	10bfffc4 	addi	r2,r2,-1
 200df10:	e0bfe715 	stw	r2,-100(fp)
 200df14:	e0bfe717 	ldw	r2,-100(fp)
 200df18:	10800003 	ldbu	r2,0(r2)
 200df1c:	10803fcc 	andi	r2,r2,255
 200df20:	1080201c 	xori	r2,r2,128
 200df24:	10bfe004 	addi	r2,r2,-128
 200df28:	10800e60 	cmpeqi	r2,r2,57
 200df2c:	103fea1e 	bne	r2,zero,200ded8 <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 200df30:	e0bfe717 	ldw	r2,-100(fp)
 200df34:	10c00044 	addi	r3,r2,1
 200df38:	e0ffe715 	stw	r3,-100(fp)
 200df3c:	10c00003 	ldbu	r3,0(r2)
 200df40:	18c00044 	addi	r3,r3,1
 200df44:	10c00005 	stb	r3,0(r2)
 200df48:	00000d06 	br	200df80 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 200df4c:	e0bfe717 	ldw	r2,-100(fp)
 200df50:	10bfffc4 	addi	r2,r2,-1
 200df54:	e0bfe715 	stw	r2,-100(fp)
 200df58:	e0bfe717 	ldw	r2,-100(fp)
 200df5c:	10800003 	ldbu	r2,0(r2)
 200df60:	10803fcc 	andi	r2,r2,255
 200df64:	1080201c 	xori	r2,r2,128
 200df68:	10bfe004 	addi	r2,r2,-128
 200df6c:	10800c20 	cmpeqi	r2,r2,48
 200df70:	103ff61e 	bne	r2,zero,200df4c <_dtoa_r+0x1a9c>
      s++;
 200df74:	e0bfe717 	ldw	r2,-100(fp)
 200df78:	10800044 	addi	r2,r2,1
 200df7c:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 200df80:	e17fe417 	ldw	r5,-112(fp)
 200df84:	e13ff817 	ldw	r4,-32(fp)
 200df88:	201107c0 	call	201107c <_Bfree>
  if (mhi)
 200df8c:	e0bfe317 	ldw	r2,-116(fp)
 200df90:	10000d26 	beq	r2,zero,200dfc8 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 200df94:	e0bfe217 	ldw	r2,-120(fp)
 200df98:	10000626 	beq	r2,zero,200dfb4 <_dtoa_r+0x1b04>
 200df9c:	e0ffe217 	ldw	r3,-120(fp)
 200dfa0:	e0bfe317 	ldw	r2,-116(fp)
 200dfa4:	18800326 	beq	r3,r2,200dfb4 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 200dfa8:	e17fe217 	ldw	r5,-120(fp)
 200dfac:	e13ff817 	ldw	r4,-32(fp)
 200dfb0:	201107c0 	call	201107c <_Bfree>
      Bfree (ptr, mhi);
 200dfb4:	e17fe317 	ldw	r5,-116(fp)
 200dfb8:	e13ff817 	ldw	r4,-32(fp)
 200dfbc:	201107c0 	call	201107c <_Bfree>
 200dfc0:	00000106 	br	200dfc8 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 200dfc4:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 200dfc8:	e17fe117 	ldw	r5,-124(fp)
 200dfcc:	e13ff817 	ldw	r4,-32(fp)
 200dfd0:	201107c0 	call	201107c <_Bfree>
  *s = 0;
 200dfd4:	e0bfe717 	ldw	r2,-100(fp)
 200dfd8:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 200dfdc:	e0bfd717 	ldw	r2,-164(fp)
 200dfe0:	10c00044 	addi	r3,r2,1
 200dfe4:	e0800317 	ldw	r2,12(fp)
 200dfe8:	10c00015 	stw	r3,0(r2)
  if (rve)
 200dfec:	e0800517 	ldw	r2,20(fp)
 200dff0:	10000326 	beq	r2,zero,200e000 <_dtoa_r+0x1b50>
    *rve = s;
 200dff4:	e0800517 	ldw	r2,20(fp)
 200dff8:	e0ffe717 	ldw	r3,-100(fp)
 200dffc:	10c00015 	stw	r3,0(r2)
  return s0;
 200e000:	e0bfe917 	ldw	r2,-92(fp)
}
 200e004:	e6fffc04 	addi	sp,fp,-16
 200e008:	dfc00517 	ldw	ra,20(sp)
 200e00c:	df000417 	ldw	fp,16(sp)
 200e010:	dcc00317 	ldw	r19,12(sp)
 200e014:	dc800217 	ldw	r18,8(sp)
 200e018:	dc400117 	ldw	r17,4(sp)
 200e01c:	dc000017 	ldw	r16,0(sp)
 200e020:	dec00604 	addi	sp,sp,24
 200e024:	f800283a 	ret

0200e028 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200e028:	defff504 	addi	sp,sp,-44
 200e02c:	dfc00a15 	stw	ra,40(sp)
 200e030:	df000915 	stw	fp,36(sp)
 200e034:	dcc00815 	stw	r19,32(sp)
 200e038:	dc800715 	stw	r18,28(sp)
 200e03c:	dc400615 	stw	r17,24(sp)
 200e040:	dc000515 	stw	r16,20(sp)
 200e044:	df000904 	addi	fp,sp,36
 200e048:	e13ffb15 	stw	r4,-20(fp)
 200e04c:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 200e050:	8080030b 	ldhu	r2,12(r16)
 200e054:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 200e058:	e0bff90b 	ldhu	r2,-28(fp)
 200e05c:	10bfffcc 	andi	r2,r2,65535
 200e060:	1080020c 	andi	r2,r2,8
 200e064:	1000831e 	bne	r2,zero,200e274 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 200e068:	8080030b 	ldhu	r2,12(r16)
 200e06c:	10820014 	ori	r2,r2,2048
 200e070:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 200e074:	80800117 	ldw	r2,4(r16)
 200e078:	00800216 	blt	zero,r2,200e084 <__sflush_r+0x5c>
 200e07c:	80800f17 	ldw	r2,60(r16)
 200e080:	00807a0e 	bge	zero,r2,200e26c <__sflush_r+0x244>
 200e084:	80800a17 	ldw	r2,40(r16)
 200e088:	10007826 	beq	r2,zero,200e26c <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 200e08c:	e0bffb17 	ldw	r2,-20(fp)
 200e090:	10800017 	ldw	r2,0(r2)
 200e094:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 200e098:	e0bffb17 	ldw	r2,-20(fp)
 200e09c:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 200e0a0:	8080030b 	ldhu	r2,12(r16)
 200e0a4:	10bfffcc 	andi	r2,r2,65535
 200e0a8:	1084000c 	andi	r2,r2,4096
 200e0ac:	10000326 	beq	r2,zero,200e0bc <__sflush_r+0x94>
	    curoff = fp->_offset;
 200e0b0:	80801417 	ldw	r2,80(r16)
 200e0b4:	e0bff715 	stw	r2,-36(fp)
 200e0b8:	00002206 	br	200e144 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 200e0bc:	80800a17 	ldw	r2,40(r16)
 200e0c0:	80c00717 	ldw	r3,28(r16)
 200e0c4:	01c00044 	movi	r7,1
 200e0c8:	000d883a 	mov	r6,zero
 200e0cc:	180b883a 	mov	r5,r3
 200e0d0:	e13ffb17 	ldw	r4,-20(fp)
 200e0d4:	103ee83a 	callr	r2
 200e0d8:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 200e0dc:	e0bff717 	ldw	r2,-36(fp)
 200e0e0:	10bfffd8 	cmpnei	r2,r2,-1
 200e0e4:	1000171e 	bne	r2,zero,200e144 <__sflush_r+0x11c>
 200e0e8:	e0bffb17 	ldw	r2,-20(fp)
 200e0ec:	10800017 	ldw	r2,0(r2)
 200e0f0:	10001426 	beq	r2,zero,200e144 <__sflush_r+0x11c>
		{
		  int result = EOF;
 200e0f4:	00bfffc4 	movi	r2,-1
 200e0f8:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200e0fc:	e0bffb17 	ldw	r2,-20(fp)
 200e100:	10800017 	ldw	r2,0(r2)
 200e104:	10800760 	cmpeqi	r2,r2,29
 200e108:	1000041e 	bne	r2,zero,200e11c <__sflush_r+0xf4>
 200e10c:	e0bffb17 	ldw	r2,-20(fp)
 200e110:	10800017 	ldw	r2,0(r2)
 200e114:	10800598 	cmpnei	r2,r2,22
 200e118:	1000051e 	bne	r2,zero,200e130 <__sflush_r+0x108>
		    {
		      result = 0;
 200e11c:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 200e120:	e0bffb17 	ldw	r2,-20(fp)
 200e124:	e0fffa17 	ldw	r3,-24(fp)
 200e128:	10c00015 	stw	r3,0(r2)
 200e12c:	00000306 	br	200e13c <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 200e130:	8080030b 	ldhu	r2,12(r16)
 200e134:	10801014 	ori	r2,r2,64
 200e138:	8080030d 	sth	r2,12(r16)
		  return result;
 200e13c:	e0bff817 	ldw	r2,-32(fp)
 200e140:	00007106 	br	200e308 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 200e144:	8080030b 	ldhu	r2,12(r16)
 200e148:	10bfffcc 	andi	r2,r2,65535
 200e14c:	1080010c 	andi	r2,r2,4
 200e150:	10000a26 	beq	r2,zero,200e17c <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 200e154:	80800117 	ldw	r2,4(r16)
 200e158:	e0fff717 	ldw	r3,-36(fp)
 200e15c:	1885c83a 	sub	r2,r3,r2
 200e160:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 200e164:	80800c17 	ldw	r2,48(r16)
 200e168:	10000426 	beq	r2,zero,200e17c <__sflush_r+0x154>
                curoff -= fp->_ur;
 200e16c:	80800f17 	ldw	r2,60(r16)
 200e170:	e0fff717 	ldw	r3,-36(fp)
 200e174:	1885c83a 	sub	r2,r3,r2
 200e178:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 200e17c:	80800a17 	ldw	r2,40(r16)
 200e180:	80c00717 	ldw	r3,28(r16)
 200e184:	000f883a 	mov	r7,zero
 200e188:	e1bff717 	ldw	r6,-36(fp)
 200e18c:	180b883a 	mov	r5,r3
 200e190:	e13ffb17 	ldw	r4,-20(fp)
 200e194:	103ee83a 	callr	r2
 200e198:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 200e19c:	e0bff717 	ldw	r2,-36(fp)
 200e1a0:	10bfffd8 	cmpnei	r2,r2,-1
 200e1a4:	10000b1e 	bne	r2,zero,200e1d4 <__sflush_r+0x1ac>
 200e1a8:	e0bffb17 	ldw	r2,-20(fp)
 200e1ac:	10800017 	ldw	r2,0(r2)
 200e1b0:	10000826 	beq	r2,zero,200e1d4 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200e1b4:	e0bffb17 	ldw	r2,-20(fp)
 200e1b8:	10800017 	ldw	r2,0(r2)
 200e1bc:	10800760 	cmpeqi	r2,r2,29
 200e1c0:	1000041e 	bne	r2,zero,200e1d4 <__sflush_r+0x1ac>
 200e1c4:	e0bffb17 	ldw	r2,-20(fp)
 200e1c8:	10800017 	ldw	r2,0(r2)
 200e1cc:	10800598 	cmpnei	r2,r2,22
 200e1d0:	1000211e 	bne	r2,zero,200e258 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 200e1d4:	80c0030b 	ldhu	r3,12(r16)
 200e1d8:	00bdffc4 	movi	r2,-2049
 200e1dc:	1884703a 	and	r2,r3,r2
 200e1e0:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 200e1e4:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 200e1e8:	80800417 	ldw	r2,16(r16)
 200e1ec:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 200e1f0:	8080030b 	ldhu	r2,12(r16)
 200e1f4:	10bfffcc 	andi	r2,r2,65535
 200e1f8:	1084000c 	andi	r2,r2,4096
 200e1fc:	10000826 	beq	r2,zero,200e220 <__sflush_r+0x1f8>
 200e200:	e0bff717 	ldw	r2,-36(fp)
 200e204:	10bfffd8 	cmpnei	r2,r2,-1
 200e208:	1000031e 	bne	r2,zero,200e218 <__sflush_r+0x1f0>
 200e20c:	e0bffb17 	ldw	r2,-20(fp)
 200e210:	10800017 	ldw	r2,0(r2)
 200e214:	1000021e 	bne	r2,zero,200e220 <__sflush_r+0x1f8>
		fp->_offset = curoff;
 200e218:	e0bff717 	ldw	r2,-36(fp)
 200e21c:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 200e220:	e0bffb17 	ldw	r2,-20(fp)
 200e224:	e0fffa17 	ldw	r3,-24(fp)
 200e228:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 200e22c:	80800c17 	ldw	r2,48(r16)
 200e230:	10000e26 	beq	r2,zero,200e26c <__sflush_r+0x244>
		FREEUB (ptr, fp);
 200e234:	80c00c17 	ldw	r3,48(r16)
 200e238:	80801004 	addi	r2,r16,64
 200e23c:	18800426 	beq	r3,r2,200e250 <__sflush_r+0x228>
 200e240:	80800c17 	ldw	r2,48(r16)
 200e244:	100b883a 	mov	r5,r2
 200e248:	e13ffb17 	ldw	r4,-20(fp)
 200e24c:	200e9cc0 	call	200e9cc <_free_r>
 200e250:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 200e254:	00000506 	br	200e26c <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 200e258:	8080030b 	ldhu	r2,12(r16)
 200e25c:	10801014 	ori	r2,r2,64
 200e260:	8080030d 	sth	r2,12(r16)
	      return EOF;
 200e264:	00bfffc4 	movi	r2,-1
 200e268:	00002706 	br	200e308 <__sflush_r+0x2e0>
	    }
	}
      return 0;
 200e26c:	0005883a 	mov	r2,zero
 200e270:	00002506 	br	200e308 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 200e274:	84400417 	ldw	r17,16(r16)
 200e278:	8800021e 	bne	r17,zero,200e284 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 200e27c:	0005883a 	mov	r2,zero
 200e280:	00002106 	br	200e308 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 200e284:	80800017 	ldw	r2,0(r16)
 200e288:	1007883a 	mov	r3,r2
 200e28c:	8805883a 	mov	r2,r17
 200e290:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 200e294:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 200e298:	e0bff90b 	ldhu	r2,-28(fp)
 200e29c:	10bfffcc 	andi	r2,r2,65535
 200e2a0:	108000cc 	andi	r2,r2,3
 200e2a4:	1000021e 	bne	r2,zero,200e2b0 <__sflush_r+0x288>
 200e2a8:	80800517 	ldw	r2,20(r16)
 200e2ac:	00000106 	br	200e2b4 <__sflush_r+0x28c>
 200e2b0:	0005883a 	mov	r2,zero
 200e2b4:	80800215 	stw	r2,8(r16)

  while (n > 0)
 200e2b8:	00001106 	br	200e300 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 200e2bc:	80800917 	ldw	r2,36(r16)
 200e2c0:	80c00717 	ldw	r3,28(r16)
 200e2c4:	900f883a 	mov	r7,r18
 200e2c8:	880d883a 	mov	r6,r17
 200e2cc:	180b883a 	mov	r5,r3
 200e2d0:	e13ffb17 	ldw	r4,-20(fp)
 200e2d4:	103ee83a 	callr	r2
 200e2d8:	1027883a 	mov	r19,r2
      if (t <= 0)
 200e2dc:	04c00516 	blt	zero,r19,200e2f4 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 200e2e0:	8080030b 	ldhu	r2,12(r16)
 200e2e4:	10801014 	ori	r2,r2,64
 200e2e8:	8080030d 	sth	r2,12(r16)
          return EOF;
 200e2ec:	00bfffc4 	movi	r2,-1
 200e2f0:	00000506 	br	200e308 <__sflush_r+0x2e0>
	}
      p += t;
 200e2f4:	9805883a 	mov	r2,r19
 200e2f8:	88a3883a 	add	r17,r17,r2
      n -= t;
 200e2fc:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 200e300:	04bfee16 	blt	zero,r18,200e2bc <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 200e304:	0005883a 	mov	r2,zero
}
 200e308:	e6fffc04 	addi	sp,fp,-16
 200e30c:	dfc00517 	ldw	ra,20(sp)
 200e310:	df000417 	ldw	fp,16(sp)
 200e314:	dcc00317 	ldw	r19,12(sp)
 200e318:	dc800217 	ldw	r18,8(sp)
 200e31c:	dc400117 	ldw	r17,4(sp)
 200e320:	dc000017 	ldw	r16,0(sp)
 200e324:	dec00604 	addi	sp,sp,24
 200e328:	f800283a 	ret

0200e32c <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200e32c:	defffa04 	addi	sp,sp,-24
 200e330:	dfc00515 	stw	ra,20(sp)
 200e334:	df000415 	stw	fp,16(sp)
 200e338:	dc000315 	stw	r16,12(sp)
 200e33c:	df000404 	addi	fp,sp,16
 200e340:	e13ffe15 	stw	r4,-8(fp)
 200e344:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 200e348:	e0bffe17 	ldw	r2,-8(fp)
 200e34c:	e0bffc15 	stw	r2,-16(fp)
 200e350:	e0bffc17 	ldw	r2,-16(fp)
 200e354:	10000526 	beq	r2,zero,200e36c <_fflush_r+0x40>
 200e358:	e0bffc17 	ldw	r2,-16(fp)
 200e35c:	10800e17 	ldw	r2,56(r2)
 200e360:	1000021e 	bne	r2,zero,200e36c <_fflush_r+0x40>
 200e364:	e13ffc17 	ldw	r4,-16(fp)
 200e368:	200e7ac0 	call	200e7ac <__sinit>

  if (!fp->_flags)
 200e36c:	8080030b 	ldhu	r2,12(r16)
 200e370:	10bfffcc 	andi	r2,r2,65535
 200e374:	10a0001c 	xori	r2,r2,32768
 200e378:	10a00004 	addi	r2,r2,-32768
 200e37c:	1000021e 	bne	r2,zero,200e388 <_fflush_r+0x5c>
    return 0;
 200e380:	0005883a 	mov	r2,zero
 200e384:	00000506 	br	200e39c <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 200e388:	800b883a 	mov	r5,r16
 200e38c:	e13ffe17 	ldw	r4,-8(fp)
 200e390:	200e0280 	call	200e028 <__sflush_r>
 200e394:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 200e398:	e0bffd17 	ldw	r2,-12(fp)
}
 200e39c:	e6ffff04 	addi	sp,fp,-4
 200e3a0:	dfc00217 	ldw	ra,8(sp)
 200e3a4:	df000117 	ldw	fp,4(sp)
 200e3a8:	dc000017 	ldw	r16,0(sp)
 200e3ac:	dec00304 	addi	sp,sp,12
 200e3b0:	f800283a 	ret

0200e3b4 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 200e3b4:	defffe04 	addi	sp,sp,-8
 200e3b8:	dfc00115 	stw	ra,4(sp)
 200e3bc:	df000015 	stw	fp,0(sp)
 200e3c0:	d839883a 	mov	fp,sp
 200e3c4:	2005883a 	mov	r2,r4
  if (fp == NULL)
 200e3c8:	1000061e 	bne	r2,zero,200e3e4 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 200e3cc:	d0a03117 	ldw	r2,-32572(gp)
 200e3d0:	01408074 	movhi	r5,513
 200e3d4:	2978cb04 	addi	r5,r5,-7380
 200e3d8:	1009883a 	mov	r4,r2
 200e3dc:	200f7ac0 	call	200f7ac <_fwalk_reent>
 200e3e0:	00000406 	br	200e3f4 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 200e3e4:	d0e03017 	ldw	r3,-32576(gp)
 200e3e8:	100b883a 	mov	r5,r2
 200e3ec:	1809883a 	mov	r4,r3
 200e3f0:	200e32c0 	call	200e32c <_fflush_r>
}
 200e3f4:	e037883a 	mov	sp,fp
 200e3f8:	dfc00117 	ldw	ra,4(sp)
 200e3fc:	df000017 	ldw	fp,0(sp)
 200e400:	dec00204 	addi	sp,sp,8
 200e404:	f800283a 	ret

0200e408 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 200e408:	defffa04 	addi	sp,sp,-24
 200e40c:	dfc00515 	stw	ra,20(sp)
 200e410:	df000415 	stw	fp,16(sp)
 200e414:	df000404 	addi	fp,sp,16
 200e418:	e13ffc15 	stw	r4,-16(fp)
 200e41c:	e17ffd15 	stw	r5,-12(fp)
 200e420:	e1bffe15 	stw	r6,-8(fp)
 200e424:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 200e428:	e0bffc17 	ldw	r2,-16(fp)
 200e42c:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 200e430:	e0bffc17 	ldw	r2,-16(fp)
 200e434:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 200e438:	e0bffc17 	ldw	r2,-16(fp)
 200e43c:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 200e440:	e0bffd17 	ldw	r2,-12(fp)
 200e444:	1007883a 	mov	r3,r2
 200e448:	e0bffc17 	ldw	r2,-16(fp)
 200e44c:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 200e450:	e0bffc17 	ldw	r2,-16(fp)
 200e454:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 200e458:	e0bffe17 	ldw	r2,-8(fp)
 200e45c:	1007883a 	mov	r3,r2
 200e460:	e0bffc17 	ldw	r2,-16(fp)
 200e464:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 200e468:	e0bffc17 	ldw	r2,-16(fp)
 200e46c:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 200e470:	e0bffc17 	ldw	r2,-16(fp)
 200e474:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 200e478:	e0bffc17 	ldw	r2,-16(fp)
 200e47c:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 200e480:	e0bffc17 	ldw	r2,-16(fp)
 200e484:	10801704 	addi	r2,r2,92
 200e488:	01800204 	movi	r6,8
 200e48c:	000b883a 	mov	r5,zero
 200e490:	1009883a 	mov	r4,r2
 200e494:	200952c0 	call	200952c <memset>
  ptr->_cookie = ptr;
 200e498:	e0bffc17 	ldw	r2,-16(fp)
 200e49c:	e0fffc17 	ldw	r3,-16(fp)
 200e4a0:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 200e4a4:	e0fffc17 	ldw	r3,-16(fp)
 200e4a8:	00808074 	movhi	r2,513
 200e4ac:	108d8504 	addi	r2,r2,13844
 200e4b0:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 200e4b4:	e0fffc17 	ldw	r3,-16(fp)
 200e4b8:	00808074 	movhi	r2,513
 200e4bc:	108db804 	addi	r2,r2,14048
 200e4c0:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 200e4c4:	e0fffc17 	ldw	r3,-16(fp)
 200e4c8:	00808074 	movhi	r2,513
 200e4cc:	108de504 	addi	r2,r2,14228
 200e4d0:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 200e4d4:	e0fffc17 	ldw	r3,-16(fp)
 200e4d8:	00808074 	movhi	r2,513
 200e4dc:	108e0d04 	addi	r2,r2,14388
 200e4e0:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 200e4e4:	0001883a 	nop
 200e4e8:	e037883a 	mov	sp,fp
 200e4ec:	dfc00117 	ldw	ra,4(sp)
 200e4f0:	df000017 	ldw	fp,0(sp)
 200e4f4:	dec00204 	addi	sp,sp,8
 200e4f8:	f800283a 	ret

0200e4fc <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 200e4fc:	defffb04 	addi	sp,sp,-20
 200e500:	dfc00415 	stw	ra,16(sp)
 200e504:	df000315 	stw	fp,12(sp)
 200e508:	dc000215 	stw	r16,8(sp)
 200e50c:	df000304 	addi	fp,sp,12
 200e510:	e13ffe15 	stw	r4,-8(fp)
 200e514:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 200e518:	80bfffc4 	addi	r2,r16,-1
 200e51c:	10801a24 	muli	r2,r2,104
 200e520:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 200e524:	100b883a 	mov	r5,r2
 200e528:	e13ffe17 	ldw	r4,-8(fp)
 200e52c:	201000c0 	call	201000c <_malloc_r>
 200e530:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 200e534:	e0bffd17 	ldw	r2,-12(fp)
 200e538:	1000021e 	bne	r2,zero,200e544 <__sfmoreglue+0x48>
    return NULL;
 200e53c:	0005883a 	mov	r2,zero
 200e540:	00001106 	br	200e588 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 200e544:	e0bffd17 	ldw	r2,-12(fp)
 200e548:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 200e54c:	e0bffd17 	ldw	r2,-12(fp)
 200e550:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 200e554:	e0bffd17 	ldw	r2,-12(fp)
 200e558:	10c00304 	addi	r3,r2,12
 200e55c:	e0bffd17 	ldw	r2,-12(fp)
 200e560:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 200e564:	e0bffd17 	ldw	r2,-12(fp)
 200e568:	10800304 	addi	r2,r2,12
 200e56c:	8007883a 	mov	r3,r16
 200e570:	18c01a24 	muli	r3,r3,104
 200e574:	180d883a 	mov	r6,r3
 200e578:	000b883a 	mov	r5,zero
 200e57c:	1009883a 	mov	r4,r2
 200e580:	200952c0 	call	200952c <memset>
  return &g->glue;
 200e584:	e0bffd17 	ldw	r2,-12(fp)
}
 200e588:	e6ffff04 	addi	sp,fp,-4
 200e58c:	dfc00217 	ldw	ra,8(sp)
 200e590:	df000117 	ldw	fp,4(sp)
 200e594:	dc000017 	ldw	r16,0(sp)
 200e598:	dec00304 	addi	sp,sp,12
 200e59c:	f800283a 	ret

0200e5a0 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 200e5a0:	defffa04 	addi	sp,sp,-24
 200e5a4:	dfc00515 	stw	ra,20(sp)
 200e5a8:	df000415 	stw	fp,16(sp)
 200e5ac:	df000404 	addi	fp,sp,16
 200e5b0:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 200e5b4:	200e8840 	call	200e884 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 200e5b8:	d0a03117 	ldw	r2,-32572(gp)
 200e5bc:	10800e17 	ldw	r2,56(r2)
 200e5c0:	1000031e 	bne	r2,zero,200e5d0 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 200e5c4:	d0a03117 	ldw	r2,-32572(gp)
 200e5c8:	1009883a 	mov	r4,r2
 200e5cc:	200e7ac0 	call	200e7ac <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200e5d0:	d0a03117 	ldw	r2,-32572(gp)
 200e5d4:	1080b804 	addi	r2,r2,736
 200e5d8:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200e5dc:	e0bffe17 	ldw	r2,-8(fp)
 200e5e0:	10800217 	ldw	r2,8(r2)
 200e5e4:	e0bffc15 	stw	r2,-16(fp)
 200e5e8:	e0bffe17 	ldw	r2,-8(fp)
 200e5ec:	10800117 	ldw	r2,4(r2)
 200e5f0:	e0bffd15 	stw	r2,-12(fp)
 200e5f4:	00000906 	br	200e61c <__sfp+0x7c>
	if (fp->_flags == 0)
 200e5f8:	e0bffc17 	ldw	r2,-16(fp)
 200e5fc:	1080030b 	ldhu	r2,12(r2)
 200e600:	10bfffcc 	andi	r2,r2,65535
 200e604:	10a0001c 	xori	r2,r2,32768
 200e608:	10a00004 	addi	r2,r2,-32768
 200e60c:	10001f26 	beq	r2,zero,200e68c <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200e610:	e0bffc17 	ldw	r2,-16(fp)
 200e614:	10801a04 	addi	r2,r2,104
 200e618:	e0bffc15 	stw	r2,-16(fp)
 200e61c:	e0bffd17 	ldw	r2,-12(fp)
 200e620:	10bfffc4 	addi	r2,r2,-1
 200e624:	e0bffd15 	stw	r2,-12(fp)
 200e628:	e0bffd17 	ldw	r2,-12(fp)
 200e62c:	103ff20e 	bge	r2,zero,200e5f8 <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200e630:	e0bffe17 	ldw	r2,-8(fp)
 200e634:	10800017 	ldw	r2,0(r2)
 200e638:	1000091e 	bne	r2,zero,200e660 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 200e63c:	01400104 	movi	r5,4
 200e640:	e13fff17 	ldw	r4,-4(fp)
 200e644:	200e4fc0 	call	200e4fc <__sfmoreglue>
 200e648:	1007883a 	mov	r3,r2
 200e64c:	e0bffe17 	ldw	r2,-8(fp)
 200e650:	10c00015 	stw	r3,0(r2)
 200e654:	e0bffe17 	ldw	r2,-8(fp)
 200e658:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200e65c:	10000426 	beq	r2,zero,200e670 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200e660:	e0bffe17 	ldw	r2,-8(fp)
 200e664:	10800017 	ldw	r2,0(r2)
 200e668:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 200e66c:	003fdb06 	br	200e5dc <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 200e670:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 200e674:	200e8a40 	call	200e8a4 <__sfp_lock_release>
  d->_errno = ENOMEM;
 200e678:	e0bfff17 	ldw	r2,-4(fp)
 200e67c:	00c00304 	movi	r3,12
 200e680:	10c00015 	stw	r3,0(r2)
  return NULL;
 200e684:	0005883a 	mov	r2,zero
 200e688:	00002506 	br	200e720 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 200e68c:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 200e690:	e0bffc17 	ldw	r2,-16(fp)
 200e694:	00ffffc4 	movi	r3,-1
 200e698:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 200e69c:	e0bffc17 	ldw	r2,-16(fp)
 200e6a0:	00c00044 	movi	r3,1
 200e6a4:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 200e6a8:	e0bffc17 	ldw	r2,-16(fp)
 200e6ac:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 200e6b0:	200e8a40 	call	200e8a4 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 200e6b4:	e0bffc17 	ldw	r2,-16(fp)
 200e6b8:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 200e6bc:	e0bffc17 	ldw	r2,-16(fp)
 200e6c0:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 200e6c4:	e0bffc17 	ldw	r2,-16(fp)
 200e6c8:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 200e6cc:	e0bffc17 	ldw	r2,-16(fp)
 200e6d0:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 200e6d4:	e0bffc17 	ldw	r2,-16(fp)
 200e6d8:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 200e6dc:	e0bffc17 	ldw	r2,-16(fp)
 200e6e0:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 200e6e4:	e0bffc17 	ldw	r2,-16(fp)
 200e6e8:	10801704 	addi	r2,r2,92
 200e6ec:	01800204 	movi	r6,8
 200e6f0:	000b883a 	mov	r5,zero
 200e6f4:	1009883a 	mov	r4,r2
 200e6f8:	200952c0 	call	200952c <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 200e6fc:	e0bffc17 	ldw	r2,-16(fp)
 200e700:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 200e704:	e0bffc17 	ldw	r2,-16(fp)
 200e708:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 200e70c:	e0bffc17 	ldw	r2,-16(fp)
 200e710:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 200e714:	e0bffc17 	ldw	r2,-16(fp)
 200e718:	10001215 	stw	zero,72(r2)

  return fp;
 200e71c:	e0bffc17 	ldw	r2,-16(fp)
}
 200e720:	e037883a 	mov	sp,fp
 200e724:	dfc00117 	ldw	ra,4(sp)
 200e728:	df000017 	ldw	fp,0(sp)
 200e72c:	dec00204 	addi	sp,sp,8
 200e730:	f800283a 	ret

0200e734 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 200e734:	defffc04 	addi	sp,sp,-16
 200e738:	dfc00315 	stw	ra,12(sp)
 200e73c:	df000215 	stw	fp,8(sp)
 200e740:	df000204 	addi	fp,sp,8
 200e744:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 200e748:	00808074 	movhi	r2,513
 200e74c:	10944f04 	addi	r2,r2,20796
 200e750:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 200e754:	e17ffe17 	ldw	r5,-8(fp)
 200e758:	e13fff17 	ldw	r4,-4(fp)
 200e75c:	200f7ac0 	call	200f7ac <_fwalk_reent>
}
 200e760:	0001883a 	nop
 200e764:	e037883a 	mov	sp,fp
 200e768:	dfc00117 	ldw	ra,4(sp)
 200e76c:	df000017 	ldw	fp,0(sp)
 200e770:	dec00204 	addi	sp,sp,8
 200e774:	f800283a 	ret

0200e778 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 200e778:	defffe04 	addi	sp,sp,-8
 200e77c:	dfc00115 	stw	ra,4(sp)
 200e780:	df000015 	stw	fp,0(sp)
 200e784:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 200e788:	d0a03117 	ldw	r2,-32572(gp)
 200e78c:	1009883a 	mov	r4,r2
 200e790:	200e7340 	call	200e734 <_cleanup_r>
}
 200e794:	0001883a 	nop
 200e798:	e037883a 	mov	sp,fp
 200e79c:	dfc00117 	ldw	ra,4(sp)
 200e7a0:	df000017 	ldw	fp,0(sp)
 200e7a4:	dec00204 	addi	sp,sp,8
 200e7a8:	f800283a 	ret

0200e7ac <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 200e7ac:	defffd04 	addi	sp,sp,-12
 200e7b0:	dfc00215 	stw	ra,8(sp)
 200e7b4:	df000115 	stw	fp,4(sp)
 200e7b8:	df000104 	addi	fp,sp,4
 200e7bc:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 200e7c0:	200e8c40 	call	200e8c4 <__sinit_lock_acquire>

  if (s->__sdidinit)
 200e7c4:	e0bfff17 	ldw	r2,-4(fp)
 200e7c8:	10800e17 	ldw	r2,56(r2)
 200e7cc:	10000226 	beq	r2,zero,200e7d8 <__sinit+0x2c>
    {
      __sinit_lock_release ();
 200e7d0:	200e8e40 	call	200e8e4 <__sinit_lock_release>
      return;
 200e7d4:	00002606 	br	200e870 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 200e7d8:	e0ffff17 	ldw	r3,-4(fp)
 200e7dc:	00808074 	movhi	r2,513
 200e7e0:	10b9cd04 	addi	r2,r2,-6348
 200e7e4:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 200e7e8:	e0bfff17 	ldw	r2,-4(fp)
 200e7ec:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 200e7f0:	e0bfff17 	ldw	r2,-4(fp)
 200e7f4:	00c000c4 	movi	r3,3
 200e7f8:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 200e7fc:	e0bfff17 	ldw	r2,-4(fp)
 200e800:	10c0bb04 	addi	r3,r2,748
 200e804:	e0bfff17 	ldw	r2,-4(fp)
 200e808:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 200e80c:	e0bfff17 	ldw	r2,-4(fp)
 200e810:	10800117 	ldw	r2,4(r2)
 200e814:	e1ffff17 	ldw	r7,-4(fp)
 200e818:	000d883a 	mov	r6,zero
 200e81c:	01400104 	movi	r5,4
 200e820:	1009883a 	mov	r4,r2
 200e824:	200e4080 	call	200e408 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 200e828:	e0bfff17 	ldw	r2,-4(fp)
 200e82c:	10800217 	ldw	r2,8(r2)
 200e830:	e1ffff17 	ldw	r7,-4(fp)
 200e834:	01800044 	movi	r6,1
 200e838:	01400284 	movi	r5,10
 200e83c:	1009883a 	mov	r4,r2
 200e840:	200e4080 	call	200e408 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 200e844:	e0bfff17 	ldw	r2,-4(fp)
 200e848:	10800317 	ldw	r2,12(r2)
 200e84c:	e1ffff17 	ldw	r7,-4(fp)
 200e850:	01800084 	movi	r6,2
 200e854:	01400484 	movi	r5,18
 200e858:	1009883a 	mov	r4,r2
 200e85c:	200e4080 	call	200e408 <std>

  s->__sdidinit = 1;
 200e860:	e0bfff17 	ldw	r2,-4(fp)
 200e864:	00c00044 	movi	r3,1
 200e868:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 200e86c:	200e8e40 	call	200e8e4 <__sinit_lock_release>
}
 200e870:	e037883a 	mov	sp,fp
 200e874:	dfc00117 	ldw	ra,4(sp)
 200e878:	df000017 	ldw	fp,0(sp)
 200e87c:	dec00204 	addi	sp,sp,8
 200e880:	f800283a 	ret

0200e884 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 200e884:	deffff04 	addi	sp,sp,-4
 200e888:	df000015 	stw	fp,0(sp)
 200e88c:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 200e890:	0001883a 	nop
 200e894:	e037883a 	mov	sp,fp
 200e898:	df000017 	ldw	fp,0(sp)
 200e89c:	dec00104 	addi	sp,sp,4
 200e8a0:	f800283a 	ret

0200e8a4 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 200e8a4:	deffff04 	addi	sp,sp,-4
 200e8a8:	df000015 	stw	fp,0(sp)
 200e8ac:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 200e8b0:	0001883a 	nop
 200e8b4:	e037883a 	mov	sp,fp
 200e8b8:	df000017 	ldw	fp,0(sp)
 200e8bc:	dec00104 	addi	sp,sp,4
 200e8c0:	f800283a 	ret

0200e8c4 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 200e8c4:	deffff04 	addi	sp,sp,-4
 200e8c8:	df000015 	stw	fp,0(sp)
 200e8cc:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 200e8d0:	0001883a 	nop
 200e8d4:	e037883a 	mov	sp,fp
 200e8d8:	df000017 	ldw	fp,0(sp)
 200e8dc:	dec00104 	addi	sp,sp,4
 200e8e0:	f800283a 	ret

0200e8e4 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 200e8e4:	deffff04 	addi	sp,sp,-4
 200e8e8:	df000015 	stw	fp,0(sp)
 200e8ec:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 200e8f0:	0001883a 	nop
 200e8f4:	e037883a 	mov	sp,fp
 200e8f8:	df000017 	ldw	fp,0(sp)
 200e8fc:	dec00104 	addi	sp,sp,4
 200e900:	f800283a 	ret

0200e904 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 200e904:	defffe04 	addi	sp,sp,-8
 200e908:	df000115 	stw	fp,4(sp)
 200e90c:	df000104 	addi	fp,sp,4
 200e910:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 200e914:	0005883a 	mov	r2,zero
}
 200e918:	e037883a 	mov	sp,fp
 200e91c:	df000017 	ldw	fp,0(sp)
 200e920:	dec00104 	addi	sp,sp,4
 200e924:	f800283a 	ret

0200e928 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 200e928:	defffe04 	addi	sp,sp,-8
 200e92c:	df000115 	stw	fp,4(sp)
 200e930:	df000104 	addi	fp,sp,4
 200e934:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 200e938:	0005883a 	mov	r2,zero
}
 200e93c:	e037883a 	mov	sp,fp
 200e940:	df000017 	ldw	fp,0(sp)
 200e944:	dec00104 	addi	sp,sp,4
 200e948:	f800283a 	ret

0200e94c <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 200e94c:	defffe04 	addi	sp,sp,-8
 200e950:	dfc00115 	stw	ra,4(sp)
 200e954:	df000015 	stw	fp,0(sp)
 200e958:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 200e95c:	200e8840 	call	200e884 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 200e960:	d0a03017 	ldw	r2,-32576(gp)
 200e964:	01408074 	movhi	r5,513
 200e968:	297a4104 	addi	r5,r5,-5884
 200e96c:	1009883a 	mov	r4,r2
 200e970:	200f6d40 	call	200f6d4 <_fwalk>
}
 200e974:	0001883a 	nop
 200e978:	e037883a 	mov	sp,fp
 200e97c:	dfc00117 	ldw	ra,4(sp)
 200e980:	df000017 	ldw	fp,0(sp)
 200e984:	dec00204 	addi	sp,sp,8
 200e988:	f800283a 	ret

0200e98c <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 200e98c:	defffe04 	addi	sp,sp,-8
 200e990:	dfc00115 	stw	ra,4(sp)
 200e994:	df000015 	stw	fp,0(sp)
 200e998:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 200e99c:	d0a03017 	ldw	r2,-32576(gp)
 200e9a0:	01408074 	movhi	r5,513
 200e9a4:	297a4a04 	addi	r5,r5,-5848
 200e9a8:	1009883a 	mov	r4,r2
 200e9ac:	200f6d40 	call	200f6d4 <_fwalk>

  __sfp_lock_release ();
 200e9b0:	200e8a40 	call	200e8a4 <__sfp_lock_release>
}
 200e9b4:	0001883a 	nop
 200e9b8:	e037883a 	mov	sp,fp
 200e9bc:	dfc00117 	ldw	ra,4(sp)
 200e9c0:	df000017 	ldw	fp,0(sp)
 200e9c4:	dec00204 	addi	sp,sp,8
 200e9c8:	f800283a 	ret

0200e9cc <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 200e9cc:	defff204 	addi	sp,sp,-56
 200e9d0:	dfc00d15 	stw	ra,52(sp)
 200e9d4:	df000c15 	stw	fp,48(sp)
 200e9d8:	df000c04 	addi	fp,sp,48
 200e9dc:	e13ffe15 	stw	r4,-8(fp)
 200e9e0:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 200e9e4:	e0bfff17 	ldw	r2,-4(fp)
 200e9e8:	10014a26 	beq	r2,zero,200ef14 <_free_r+0x548>
    return;

  MALLOC_LOCK;
 200e9ec:	e13ffe17 	ldw	r4,-8(fp)
 200e9f0:	20172700 	call	2017270 <__malloc_lock>

  p = mem2chunk(mem);
 200e9f4:	e0bfff17 	ldw	r2,-4(fp)
 200e9f8:	10bffe04 	addi	r2,r2,-8
 200e9fc:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 200ea00:	e0bff417 	ldw	r2,-48(fp)
 200ea04:	10800117 	ldw	r2,4(r2)
 200ea08:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 200ea0c:	e0fff917 	ldw	r3,-28(fp)
 200ea10:	00bfff84 	movi	r2,-2
 200ea14:	1884703a 	and	r2,r3,r2
 200ea18:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 200ea1c:	e0fff417 	ldw	r3,-48(fp)
 200ea20:	e0bff517 	ldw	r2,-44(fp)
 200ea24:	1885883a 	add	r2,r3,r2
 200ea28:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 200ea2c:	e0bffa17 	ldw	r2,-24(fp)
 200ea30:	10c00117 	ldw	r3,4(r2)
 200ea34:	00bfff04 	movi	r2,-4
 200ea38:	1884703a 	and	r2,r3,r2
 200ea3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 200ea40:	008080b4 	movhi	r2,514
 200ea44:	108c2004 	addi	r2,r2,12416
 200ea48:	10c00217 	ldw	r3,8(r2)
 200ea4c:	e0bffa17 	ldw	r2,-24(fp)
 200ea50:	1880311e 	bne	r3,r2,200eb18 <_free_r+0x14c>
  {
    sz += nextsz;
 200ea54:	e0fff517 	ldw	r3,-44(fp)
 200ea58:	e0bffb17 	ldw	r2,-20(fp)
 200ea5c:	1885883a 	add	r2,r3,r2
 200ea60:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200ea64:	e0bff917 	ldw	r2,-28(fp)
 200ea68:	1080004c 	andi	r2,r2,1
 200ea6c:	1000181e 	bne	r2,zero,200ead0 <_free_r+0x104>
    {
      prevsz = p->prev_size;
 200ea70:	e0bff417 	ldw	r2,-48(fp)
 200ea74:	10800017 	ldw	r2,0(r2)
 200ea78:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 200ea7c:	e0bffc17 	ldw	r2,-16(fp)
 200ea80:	0085c83a 	sub	r2,zero,r2
 200ea84:	e0fff417 	ldw	r3,-48(fp)
 200ea88:	1885883a 	add	r2,r3,r2
 200ea8c:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 200ea90:	e0fff517 	ldw	r3,-44(fp)
 200ea94:	e0bffc17 	ldw	r2,-16(fp)
 200ea98:	1885883a 	add	r2,r3,r2
 200ea9c:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 200eaa0:	e0bff417 	ldw	r2,-48(fp)
 200eaa4:	10800317 	ldw	r2,12(r2)
 200eaa8:	e0bff615 	stw	r2,-40(fp)
 200eaac:	e0bff417 	ldw	r2,-48(fp)
 200eab0:	10800217 	ldw	r2,8(r2)
 200eab4:	e0bff715 	stw	r2,-36(fp)
 200eab8:	e0bff717 	ldw	r2,-36(fp)
 200eabc:	e0fff617 	ldw	r3,-40(fp)
 200eac0:	10c00315 	stw	r3,12(r2)
 200eac4:	e0bff617 	ldw	r2,-40(fp)
 200eac8:	e0fff717 	ldw	r3,-36(fp)
 200eacc:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 200ead0:	e0bff517 	ldw	r2,-44(fp)
 200ead4:	10c00054 	ori	r3,r2,1
 200ead8:	e0bff417 	ldw	r2,-48(fp)
 200eadc:	10c00115 	stw	r3,4(r2)
    top = p;
 200eae0:	008080b4 	movhi	r2,514
 200eae4:	108c2004 	addi	r2,r2,12416
 200eae8:	e0fff417 	ldw	r3,-48(fp)
 200eaec:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 200eaf0:	d0a03317 	ldw	r2,-32564(gp)
 200eaf4:	e0fff517 	ldw	r3,-44(fp)
 200eaf8:	18800436 	bltu	r3,r2,200eb0c <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 200eafc:	d0a79b17 	ldw	r2,-24980(gp)
 200eb00:	100b883a 	mov	r5,r2
 200eb04:	e13ffe17 	ldw	r4,-8(fp)
 200eb08:	200ef2c0 	call	200ef2c <_malloc_trim_r>
    MALLOC_UNLOCK;
 200eb0c:	e13ffe17 	ldw	r4,-8(fp)
 200eb10:	20173900 	call	2017390 <__malloc_unlock>
    return;
 200eb14:	00010006 	br	200ef18 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 200eb18:	e0bffa17 	ldw	r2,-24(fp)
 200eb1c:	e0fffb17 	ldw	r3,-20(fp)
 200eb20:	10c00115 	stw	r3,4(r2)

  islr = 0;
 200eb24:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200eb28:	e0bff917 	ldw	r2,-28(fp)
 200eb2c:	1080004c 	andi	r2,r2,1
 200eb30:	1000201e 	bne	r2,zero,200ebb4 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 200eb34:	e0bff417 	ldw	r2,-48(fp)
 200eb38:	10800017 	ldw	r2,0(r2)
 200eb3c:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 200eb40:	e0bffc17 	ldw	r2,-16(fp)
 200eb44:	0085c83a 	sub	r2,zero,r2
 200eb48:	e0fff417 	ldw	r3,-48(fp)
 200eb4c:	1885883a 	add	r2,r3,r2
 200eb50:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 200eb54:	e0fff517 	ldw	r3,-44(fp)
 200eb58:	e0bffc17 	ldw	r2,-16(fp)
 200eb5c:	1885883a 	add	r2,r3,r2
 200eb60:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 200eb64:	e0bff417 	ldw	r2,-48(fp)
 200eb68:	10c00217 	ldw	r3,8(r2)
 200eb6c:	008080b4 	movhi	r2,514
 200eb70:	108c2204 	addi	r2,r2,12424
 200eb74:	1880031e 	bne	r3,r2,200eb84 <_free_r+0x1b8>
      islr = 1;
 200eb78:	00800044 	movi	r2,1
 200eb7c:	e0bff815 	stw	r2,-32(fp)
 200eb80:	00000c06 	br	200ebb4 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 200eb84:	e0bff417 	ldw	r2,-48(fp)
 200eb88:	10800317 	ldw	r2,12(r2)
 200eb8c:	e0bff615 	stw	r2,-40(fp)
 200eb90:	e0bff417 	ldw	r2,-48(fp)
 200eb94:	10800217 	ldw	r2,8(r2)
 200eb98:	e0bff715 	stw	r2,-36(fp)
 200eb9c:	e0bff717 	ldw	r2,-36(fp)
 200eba0:	e0fff617 	ldw	r3,-40(fp)
 200eba4:	10c00315 	stw	r3,12(r2)
 200eba8:	e0bff617 	ldw	r2,-40(fp)
 200ebac:	e0fff717 	ldw	r3,-36(fp)
 200ebb0:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 200ebb4:	e0fffa17 	ldw	r3,-24(fp)
 200ebb8:	e0bffb17 	ldw	r2,-20(fp)
 200ebbc:	1885883a 	add	r2,r3,r2
 200ebc0:	10800117 	ldw	r2,4(r2)
 200ebc4:	1080004c 	andi	r2,r2,1
 200ebc8:	10002a1e 	bne	r2,zero,200ec74 <_free_r+0x2a8>
  {
    sz += nextsz;
 200ebcc:	e0fff517 	ldw	r3,-44(fp)
 200ebd0:	e0bffb17 	ldw	r2,-20(fp)
 200ebd4:	1885883a 	add	r2,r3,r2
 200ebd8:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 200ebdc:	e0bff817 	ldw	r2,-32(fp)
 200ebe0:	1000181e 	bne	r2,zero,200ec44 <_free_r+0x278>
 200ebe4:	e0bffa17 	ldw	r2,-24(fp)
 200ebe8:	10c00217 	ldw	r3,8(r2)
 200ebec:	008080b4 	movhi	r2,514
 200ebf0:	108c2204 	addi	r2,r2,12424
 200ebf4:	1880131e 	bne	r3,r2,200ec44 <_free_r+0x278>
    {
      islr = 1;
 200ebf8:	00800044 	movi	r2,1
 200ebfc:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 200ec00:	00c080b4 	movhi	r3,514
 200ec04:	18cc2204 	addi	r3,r3,12424
 200ec08:	008080b4 	movhi	r2,514
 200ec0c:	108c2204 	addi	r2,r2,12424
 200ec10:	e13ff417 	ldw	r4,-48(fp)
 200ec14:	11000315 	stw	r4,12(r2)
 200ec18:	10800317 	ldw	r2,12(r2)
 200ec1c:	18800215 	stw	r2,8(r3)
 200ec20:	008080b4 	movhi	r2,514
 200ec24:	108c2204 	addi	r2,r2,12424
 200ec28:	e0fff417 	ldw	r3,-48(fp)
 200ec2c:	18800315 	stw	r2,12(r3)
 200ec30:	e0bff417 	ldw	r2,-48(fp)
 200ec34:	10c00317 	ldw	r3,12(r2)
 200ec38:	e0bff417 	ldw	r2,-48(fp)
 200ec3c:	10c00215 	stw	r3,8(r2)
 200ec40:	00000c06 	br	200ec74 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 200ec44:	e0bffa17 	ldw	r2,-24(fp)
 200ec48:	10800317 	ldw	r2,12(r2)
 200ec4c:	e0bff615 	stw	r2,-40(fp)
 200ec50:	e0bffa17 	ldw	r2,-24(fp)
 200ec54:	10800217 	ldw	r2,8(r2)
 200ec58:	e0bff715 	stw	r2,-36(fp)
 200ec5c:	e0bff717 	ldw	r2,-36(fp)
 200ec60:	e0fff617 	ldw	r3,-40(fp)
 200ec64:	10c00315 	stw	r3,12(r2)
 200ec68:	e0bff617 	ldw	r2,-40(fp)
 200ec6c:	e0fff717 	ldw	r3,-36(fp)
 200ec70:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 200ec74:	e0bff517 	ldw	r2,-44(fp)
 200ec78:	10c00054 	ori	r3,r2,1
 200ec7c:	e0bff417 	ldw	r2,-48(fp)
 200ec80:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 200ec84:	e0fff417 	ldw	r3,-48(fp)
 200ec88:	e0bff517 	ldw	r2,-44(fp)
 200ec8c:	1885883a 	add	r2,r3,r2
 200ec90:	e0fff517 	ldw	r3,-44(fp)
 200ec94:	10c00015 	stw	r3,0(r2)
  if (!islr)
 200ec98:	e0bff817 	ldw	r2,-32(fp)
 200ec9c:	10009a1e 	bne	r2,zero,200ef08 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 200eca0:	e0bff517 	ldw	r2,-44(fp)
 200eca4:	10808028 	cmpgeui	r2,r2,512
 200eca8:	10002c1e 	bne	r2,zero,200ed5c <_free_r+0x390>
 200ecac:	e0bff517 	ldw	r2,-44(fp)
 200ecb0:	1004d0fa 	srli	r2,r2,3
 200ecb4:	e0bffd15 	stw	r2,-12(fp)
 200ecb8:	00c080b4 	movhi	r3,514
 200ecbc:	18cc2004 	addi	r3,r3,12416
 200ecc0:	008080b4 	movhi	r2,514
 200ecc4:	108c2004 	addi	r2,r2,12416
 200ecc8:	11000117 	ldw	r4,4(r2)
 200eccc:	e0bffd17 	ldw	r2,-12(fp)
 200ecd0:	1000010e 	bge	r2,zero,200ecd8 <_free_r+0x30c>
 200ecd4:	108000c4 	addi	r2,r2,3
 200ecd8:	1005d0ba 	srai	r2,r2,2
 200ecdc:	100b883a 	mov	r5,r2
 200ece0:	00800044 	movi	r2,1
 200ece4:	1144983a 	sll	r2,r2,r5
 200ece8:	2084b03a 	or	r2,r4,r2
 200ecec:	18800115 	stw	r2,4(r3)
 200ecf0:	e0bffd17 	ldw	r2,-12(fp)
 200ecf4:	10800044 	addi	r2,r2,1
 200ecf8:	1085883a 	add	r2,r2,r2
 200ecfc:	1085883a 	add	r2,r2,r2
 200ed00:	1087883a 	add	r3,r2,r2
 200ed04:	008080b4 	movhi	r2,514
 200ed08:	108c2004 	addi	r2,r2,12416
 200ed0c:	1885883a 	add	r2,r3,r2
 200ed10:	10bffe04 	addi	r2,r2,-8
 200ed14:	e0bff615 	stw	r2,-40(fp)
 200ed18:	e0bff617 	ldw	r2,-40(fp)
 200ed1c:	10800217 	ldw	r2,8(r2)
 200ed20:	e0bff715 	stw	r2,-36(fp)
 200ed24:	e0bff417 	ldw	r2,-48(fp)
 200ed28:	e0fff617 	ldw	r3,-40(fp)
 200ed2c:	10c00315 	stw	r3,12(r2)
 200ed30:	e0bff417 	ldw	r2,-48(fp)
 200ed34:	e0fff717 	ldw	r3,-36(fp)
 200ed38:	10c00215 	stw	r3,8(r2)
 200ed3c:	e0bff617 	ldw	r2,-40(fp)
 200ed40:	e0fff417 	ldw	r3,-48(fp)
 200ed44:	10c00215 	stw	r3,8(r2)
 200ed48:	e0bff617 	ldw	r2,-40(fp)
 200ed4c:	10c00217 	ldw	r3,8(r2)
 200ed50:	e0bff717 	ldw	r2,-36(fp)
 200ed54:	10c00315 	stw	r3,12(r2)
 200ed58:	00006b06 	br	200ef08 <_free_r+0x53c>
 200ed5c:	e0bff517 	ldw	r2,-44(fp)
 200ed60:	1004d27a 	srli	r2,r2,9
 200ed64:	1000031e 	bne	r2,zero,200ed74 <_free_r+0x3a8>
 200ed68:	e0bff517 	ldw	r2,-44(fp)
 200ed6c:	1004d0fa 	srli	r2,r2,3
 200ed70:	00002906 	br	200ee18 <_free_r+0x44c>
 200ed74:	e0bff517 	ldw	r2,-44(fp)
 200ed78:	1004d27a 	srli	r2,r2,9
 200ed7c:	10800168 	cmpgeui	r2,r2,5
 200ed80:	1000041e 	bne	r2,zero,200ed94 <_free_r+0x3c8>
 200ed84:	e0bff517 	ldw	r2,-44(fp)
 200ed88:	1004d1ba 	srli	r2,r2,6
 200ed8c:	10800e04 	addi	r2,r2,56
 200ed90:	00002106 	br	200ee18 <_free_r+0x44c>
 200ed94:	e0bff517 	ldw	r2,-44(fp)
 200ed98:	1004d27a 	srli	r2,r2,9
 200ed9c:	10800568 	cmpgeui	r2,r2,21
 200eda0:	1000041e 	bne	r2,zero,200edb4 <_free_r+0x3e8>
 200eda4:	e0bff517 	ldw	r2,-44(fp)
 200eda8:	1004d27a 	srli	r2,r2,9
 200edac:	108016c4 	addi	r2,r2,91
 200edb0:	00001906 	br	200ee18 <_free_r+0x44c>
 200edb4:	e0bff517 	ldw	r2,-44(fp)
 200edb8:	1004d27a 	srli	r2,r2,9
 200edbc:	10801568 	cmpgeui	r2,r2,85
 200edc0:	1000041e 	bne	r2,zero,200edd4 <_free_r+0x408>
 200edc4:	e0bff517 	ldw	r2,-44(fp)
 200edc8:	1004d33a 	srli	r2,r2,12
 200edcc:	10801b84 	addi	r2,r2,110
 200edd0:	00001106 	br	200ee18 <_free_r+0x44c>
 200edd4:	e0bff517 	ldw	r2,-44(fp)
 200edd8:	1004d27a 	srli	r2,r2,9
 200eddc:	10805568 	cmpgeui	r2,r2,341
 200ede0:	1000041e 	bne	r2,zero,200edf4 <_free_r+0x428>
 200ede4:	e0bff517 	ldw	r2,-44(fp)
 200ede8:	1004d3fa 	srli	r2,r2,15
 200edec:	10801dc4 	addi	r2,r2,119
 200edf0:	00000906 	br	200ee18 <_free_r+0x44c>
 200edf4:	e0bff517 	ldw	r2,-44(fp)
 200edf8:	1004d27a 	srli	r2,r2,9
 200edfc:	10815568 	cmpgeui	r2,r2,1365
 200ee00:	1000041e 	bne	r2,zero,200ee14 <_free_r+0x448>
 200ee04:	e0bff517 	ldw	r2,-44(fp)
 200ee08:	1004d4ba 	srli	r2,r2,18
 200ee0c:	10801f04 	addi	r2,r2,124
 200ee10:	00000106 	br	200ee18 <_free_r+0x44c>
 200ee14:	00801f84 	movi	r2,126
 200ee18:	e0bffd15 	stw	r2,-12(fp)
 200ee1c:	e0bffd17 	ldw	r2,-12(fp)
 200ee20:	10800044 	addi	r2,r2,1
 200ee24:	1085883a 	add	r2,r2,r2
 200ee28:	1085883a 	add	r2,r2,r2
 200ee2c:	1087883a 	add	r3,r2,r2
 200ee30:	008080b4 	movhi	r2,514
 200ee34:	108c2004 	addi	r2,r2,12416
 200ee38:	1885883a 	add	r2,r3,r2
 200ee3c:	10bffe04 	addi	r2,r2,-8
 200ee40:	e0bff615 	stw	r2,-40(fp)
 200ee44:	e0bff617 	ldw	r2,-40(fp)
 200ee48:	10800217 	ldw	r2,8(r2)
 200ee4c:	e0bff715 	stw	r2,-36(fp)
 200ee50:	e0fff717 	ldw	r3,-36(fp)
 200ee54:	e0bff617 	ldw	r2,-40(fp)
 200ee58:	1880121e 	bne	r3,r2,200eea4 <_free_r+0x4d8>
 200ee5c:	00c080b4 	movhi	r3,514
 200ee60:	18cc2004 	addi	r3,r3,12416
 200ee64:	008080b4 	movhi	r2,514
 200ee68:	108c2004 	addi	r2,r2,12416
 200ee6c:	11000117 	ldw	r4,4(r2)
 200ee70:	e0bffd17 	ldw	r2,-12(fp)
 200ee74:	1000010e 	bge	r2,zero,200ee7c <_free_r+0x4b0>
 200ee78:	108000c4 	addi	r2,r2,3
 200ee7c:	1005d0ba 	srai	r2,r2,2
 200ee80:	100b883a 	mov	r5,r2
 200ee84:	00800044 	movi	r2,1
 200ee88:	1144983a 	sll	r2,r2,r5
 200ee8c:	2084b03a 	or	r2,r4,r2
 200ee90:	18800115 	stw	r2,4(r3)
 200ee94:	00000f06 	br	200eed4 <_free_r+0x508>
 200ee98:	e0bff717 	ldw	r2,-36(fp)
 200ee9c:	10800217 	ldw	r2,8(r2)
 200eea0:	e0bff715 	stw	r2,-36(fp)
 200eea4:	e0fff717 	ldw	r3,-36(fp)
 200eea8:	e0bff617 	ldw	r2,-40(fp)
 200eeac:	18800626 	beq	r3,r2,200eec8 <_free_r+0x4fc>
 200eeb0:	e0bff717 	ldw	r2,-36(fp)
 200eeb4:	10c00117 	ldw	r3,4(r2)
 200eeb8:	00bfff04 	movi	r2,-4
 200eebc:	1884703a 	and	r2,r3,r2
 200eec0:	e0fff517 	ldw	r3,-44(fp)
 200eec4:	18bff436 	bltu	r3,r2,200ee98 <_free_r+0x4cc>
 200eec8:	e0bff717 	ldw	r2,-36(fp)
 200eecc:	10800317 	ldw	r2,12(r2)
 200eed0:	e0bff615 	stw	r2,-40(fp)
 200eed4:	e0bff417 	ldw	r2,-48(fp)
 200eed8:	e0fff617 	ldw	r3,-40(fp)
 200eedc:	10c00315 	stw	r3,12(r2)
 200eee0:	e0bff417 	ldw	r2,-48(fp)
 200eee4:	e0fff717 	ldw	r3,-36(fp)
 200eee8:	10c00215 	stw	r3,8(r2)
 200eeec:	e0bff617 	ldw	r2,-40(fp)
 200eef0:	e0fff417 	ldw	r3,-48(fp)
 200eef4:	10c00215 	stw	r3,8(r2)
 200eef8:	e0bff617 	ldw	r2,-40(fp)
 200eefc:	10c00217 	ldw	r3,8(r2)
 200ef00:	e0bff717 	ldw	r2,-36(fp)
 200ef04:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 200ef08:	e13ffe17 	ldw	r4,-8(fp)
 200ef0c:	20173900 	call	2017390 <__malloc_unlock>
 200ef10:	00000106 	br	200ef18 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 200ef14:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 200ef18:	e037883a 	mov	sp,fp
 200ef1c:	dfc00117 	ldw	ra,4(sp)
 200ef20:	df000017 	ldw	fp,0(sp)
 200ef24:	dec00204 	addi	sp,sp,8
 200ef28:	f800283a 	ret

0200ef2c <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 200ef2c:	defff704 	addi	sp,sp,-36
 200ef30:	dfc00815 	stw	ra,32(sp)
 200ef34:	df000715 	stw	fp,28(sp)
 200ef38:	df000704 	addi	fp,sp,28
 200ef3c:	e13ffe15 	stw	r4,-8(fp)
 200ef40:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 200ef44:	00840004 	movi	r2,4096
 200ef48:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 200ef4c:	e13ffe17 	ldw	r4,-8(fp)
 200ef50:	20172700 	call	2017270 <__malloc_lock>

  top_size = chunksize(top);
 200ef54:	008080b4 	movhi	r2,514
 200ef58:	108c2004 	addi	r2,r2,12416
 200ef5c:	10800217 	ldw	r2,8(r2)
 200ef60:	10800117 	ldw	r2,4(r2)
 200ef64:	1007883a 	mov	r3,r2
 200ef68:	00bfff04 	movi	r2,-4
 200ef6c:	1884703a 	and	r2,r3,r2
 200ef70:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 200ef74:	e0fffa17 	ldw	r3,-24(fp)
 200ef78:	e0bfff17 	ldw	r2,-4(fp)
 200ef7c:	1887c83a 	sub	r3,r3,r2
 200ef80:	e0bff917 	ldw	r2,-28(fp)
 200ef84:	1885883a 	add	r2,r3,r2
 200ef88:	10bffbc4 	addi	r2,r2,-17
 200ef8c:	e17ff917 	ldw	r5,-28(fp)
 200ef90:	1009883a 	mov	r4,r2
 200ef94:	2006bac0 	call	2006bac <__udivsi3>
 200ef98:	10ffffc4 	addi	r3,r2,-1
 200ef9c:	e0bff917 	ldw	r2,-28(fp)
 200efa0:	1885383a 	mul	r2,r3,r2
 200efa4:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 200efa8:	e0bff917 	ldw	r2,-28(fp)
 200efac:	e0fffb17 	ldw	r3,-20(fp)
 200efb0:	1880040e 	bge	r3,r2,200efc4 <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 200efb4:	e13ffe17 	ldw	r4,-8(fp)
 200efb8:	20173900 	call	2017390 <__malloc_unlock>
    return 0;
 200efbc:	0005883a 	mov	r2,zero
 200efc0:	00004806 	br	200f0e4 <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 200efc4:	000b883a 	mov	r5,zero
 200efc8:	e13ffe17 	ldw	r4,-8(fp)
 200efcc:	20135b40 	call	20135b4 <_sbrk_r>
 200efd0:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 200efd4:	008080b4 	movhi	r2,514
 200efd8:	108c2004 	addi	r2,r2,12416
 200efdc:	10c00217 	ldw	r3,8(r2)
 200efe0:	e0bffa17 	ldw	r2,-24(fp)
 200efe4:	1887883a 	add	r3,r3,r2
 200efe8:	e0bffc17 	ldw	r2,-16(fp)
 200efec:	18800426 	beq	r3,r2,200f000 <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 200eff0:	e13ffe17 	ldw	r4,-8(fp)
 200eff4:	20173900 	call	2017390 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 200eff8:	0005883a 	mov	r2,zero
 200effc:	00003906 	br	200f0e4 <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 200f000:	e0bffb17 	ldw	r2,-20(fp)
 200f004:	0085c83a 	sub	r2,zero,r2
 200f008:	100b883a 	mov	r5,r2
 200f00c:	e13ffe17 	ldw	r4,-8(fp)
 200f010:	20135b40 	call	20135b4 <_sbrk_r>
 200f014:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 200f018:	e0bffd17 	ldw	r2,-12(fp)
 200f01c:	10bfffd8 	cmpnei	r2,r2,-1
 200f020:	10001d1e 	bne	r2,zero,200f098 <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 200f024:	000b883a 	mov	r5,zero
 200f028:	e13ffe17 	ldw	r4,-8(fp)
 200f02c:	20135b40 	call	20135b4 <_sbrk_r>
 200f030:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 200f034:	e0fffc17 	ldw	r3,-16(fp)
 200f038:	008080b4 	movhi	r2,514
 200f03c:	108c2004 	addi	r2,r2,12416
 200f040:	10800217 	ldw	r2,8(r2)
 200f044:	1885c83a 	sub	r2,r3,r2
 200f048:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 200f04c:	e0bffa17 	ldw	r2,-24(fp)
 200f050:	10800410 	cmplti	r2,r2,16
 200f054:	10000c1e 	bne	r2,zero,200f088 <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 200f058:	e0bffc17 	ldw	r2,-16(fp)
 200f05c:	d0e03417 	ldw	r3,-32560(gp)
 200f060:	10c7c83a 	sub	r3,r2,r3
 200f064:	008080b4 	movhi	r2,514
 200f068:	10997204 	addi	r2,r2,26056
 200f06c:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 200f070:	008080b4 	movhi	r2,514
 200f074:	108c2004 	addi	r2,r2,12416
 200f078:	10800217 	ldw	r2,8(r2)
 200f07c:	e0fffa17 	ldw	r3,-24(fp)
 200f080:	18c00054 	ori	r3,r3,1
 200f084:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 200f088:	e13ffe17 	ldw	r4,-8(fp)
 200f08c:	20173900 	call	2017390 <__malloc_unlock>
        return 0; 
 200f090:	0005883a 	mov	r2,zero
 200f094:	00001306 	br	200f0e4 <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 200f098:	008080b4 	movhi	r2,514
 200f09c:	108c2004 	addi	r2,r2,12416
 200f0a0:	10800217 	ldw	r2,8(r2)
 200f0a4:	e13ffa17 	ldw	r4,-24(fp)
 200f0a8:	e0fffb17 	ldw	r3,-20(fp)
 200f0ac:	20c7c83a 	sub	r3,r4,r3
 200f0b0:	18c00054 	ori	r3,r3,1
 200f0b4:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 200f0b8:	008080b4 	movhi	r2,514
 200f0bc:	10997204 	addi	r2,r2,26056
 200f0c0:	10c00017 	ldw	r3,0(r2)
 200f0c4:	e0bffb17 	ldw	r2,-20(fp)
 200f0c8:	1887c83a 	sub	r3,r3,r2
 200f0cc:	008080b4 	movhi	r2,514
 200f0d0:	10997204 	addi	r2,r2,26056
 200f0d4:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 200f0d8:	e13ffe17 	ldw	r4,-8(fp)
 200f0dc:	20173900 	call	2017390 <__malloc_unlock>
        return 1;
 200f0e0:	00800044 	movi	r2,1
      }
    }
  }
}
 200f0e4:	e037883a 	mov	sp,fp
 200f0e8:	dfc00117 	ldw	ra,4(sp)
 200f0ec:	df000017 	ldw	fp,0(sp)
 200f0f0:	dec00204 	addi	sp,sp,8
 200f0f4:	f800283a 	ret

0200f0f8 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 200f0f8:	defff004 	addi	sp,sp,-64
 200f0fc:	dfc00f15 	stw	ra,60(sp)
 200f100:	df000e15 	stw	fp,56(sp)
 200f104:	dd800d15 	stw	r22,52(sp)
 200f108:	dd400c15 	stw	r21,48(sp)
 200f10c:	dd000b15 	stw	r20,44(sp)
 200f110:	dcc00a15 	stw	r19,40(sp)
 200f114:	dc800915 	stw	r18,36(sp)
 200f118:	dc400815 	stw	r17,32(sp)
 200f11c:	dc000715 	stw	r16,28(sp)
 200f120:	df000e04 	addi	fp,sp,56
 200f124:	e13ff815 	stw	r4,-32(fp)
 200f128:	2821883a 	mov	r16,r5
 200f12c:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 200f130:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 200f134:	ac800217 	ldw	r18,8(r21)
 200f138:	9000021e 	bne	r18,zero,200f144 <__sfvwrite_r+0x4c>
    return 0;
 200f13c:	0005883a 	mov	r2,zero
 200f140:	00015806 	br	200f6a4 <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 200f144:	8080030b 	ldhu	r2,12(r16)
 200f148:	10bfffcc 	andi	r2,r2,65535
 200f14c:	1080020c 	andi	r2,r2,8
 200f150:	10000226 	beq	r2,zero,200f15c <__sfvwrite_r+0x64>
 200f154:	80800417 	ldw	r2,16(r16)
 200f158:	1000061e 	bne	r2,zero,200f174 <__sfvwrite_r+0x7c>
 200f15c:	800b883a 	mov	r5,r16
 200f160:	e13ff817 	ldw	r4,-32(fp)
 200f164:	200bf5c0 	call	200bf5c <__swsetup_r>
 200f168:	10000226 	beq	r2,zero,200f174 <__sfvwrite_r+0x7c>
    return EOF;
 200f16c:	00bfffc4 	movi	r2,-1
 200f170:	00014c06 	br	200f6a4 <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 200f174:	ad000017 	ldw	r20,0(r21)
  len = 0;
 200f178:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 200f17c:	8080030b 	ldhu	r2,12(r16)
 200f180:	10bfffcc 	andi	r2,r2,65535
 200f184:	1080008c 	andi	r2,r2,2
 200f188:	10001f26 	beq	r2,zero,200f208 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 200f18c:	00000306 	br	200f19c <__sfvwrite_r+0xa4>
 200f190:	a4c00017 	ldw	r19,0(r20)
 200f194:	a4800117 	ldw	r18,4(r20)
 200f198:	a5000204 	addi	r20,r20,8
 200f19c:	903ffc26 	beq	r18,zero,200f190 <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 200f1a0:	82000917 	ldw	r8,36(r16)
 200f1a4:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 200f1a8:	9005883a 	mov	r2,r18
 200f1ac:	00e00034 	movhi	r3,32768
 200f1b0:	18ff0004 	addi	r3,r3,-1024
 200f1b4:	1880022e 	bgeu	r3,r2,200f1c0 <__sfvwrite_r+0xc8>
 200f1b8:	00a00034 	movhi	r2,32768
 200f1bc:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 200f1c0:	100f883a 	mov	r7,r2
 200f1c4:	980d883a 	mov	r6,r19
 200f1c8:	200b883a 	mov	r5,r4
 200f1cc:	e13ff817 	ldw	r4,-32(fp)
 200f1d0:	403ee83a 	callr	r8
 200f1d4:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 200f1d8:	0441290e 	bge	zero,r17,200f680 <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 200f1dc:	8805883a 	mov	r2,r17
 200f1e0:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200f1e4:	8805883a 	mov	r2,r17
 200f1e8:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200f1ec:	a8800217 	ldw	r2,8(r21)
 200f1f0:	8807883a 	mov	r3,r17
 200f1f4:	10c5c83a 	sub	r2,r2,r3
 200f1f8:	a8800215 	stw	r2,8(r21)
 200f1fc:	a8800217 	ldw	r2,8(r21)
 200f200:	103fe61e 	bne	r2,zero,200f19c <__sfvwrite_r+0xa4>
 200f204:	00011c06 	br	200f678 <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 200f208:	8080030b 	ldhu	r2,12(r16)
 200f20c:	10bfffcc 	andi	r2,r2,65535
 200f210:	1080004c 	andi	r2,r2,1
 200f214:	1000b51e 	bne	r2,zero,200f4ec <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 200f218:	00000306 	br	200f228 <__sfvwrite_r+0x130>
 200f21c:	a4c00017 	ldw	r19,0(r20)
 200f220:	a4800117 	ldw	r18,4(r20)
 200f224:	a5000204 	addi	r20,r20,8
 200f228:	903ffc26 	beq	r18,zero,200f21c <__sfvwrite_r+0x124>
	  w = fp->_w;
 200f22c:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 200f230:	8080030b 	ldhu	r2,12(r16)
 200f234:	10bfffcc 	andi	r2,r2,65535
 200f238:	1080800c 	andi	r2,r2,512
 200f23c:	10006b26 	beq	r2,zero,200f3ec <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 200f240:	8805883a 	mov	r2,r17
 200f244:	90805736 	bltu	r18,r2,200f3a4 <__sfvwrite_r+0x2ac>
 200f248:	8080030b 	ldhu	r2,12(r16)
 200f24c:	10bfffcc 	andi	r2,r2,65535
 200f250:	1081200c 	andi	r2,r2,1152
 200f254:	10005326 	beq	r2,zero,200f3a4 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 200f258:	80800017 	ldw	r2,0(r16)
 200f25c:	1007883a 	mov	r3,r2
 200f260:	80800417 	ldw	r2,16(r16)
 200f264:	1885c83a 	sub	r2,r3,r2
 200f268:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 200f26c:	80c00517 	ldw	r3,20(r16)
 200f270:	1805883a 	mov	r2,r3
 200f274:	1085883a 	add	r2,r2,r2
 200f278:	10c5883a 	add	r2,r2,r3
 200f27c:	1006d7fa 	srli	r3,r2,31
 200f280:	1885883a 	add	r2,r3,r2
 200f284:	1005d07a 	srai	r2,r2,1
 200f288:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 200f28c:	e0bff617 	ldw	r2,-40(fp)
 200f290:	1485883a 	add	r2,r2,r18
 200f294:	10800044 	addi	r2,r2,1
 200f298:	e0fff517 	ldw	r3,-44(fp)
 200f29c:	1880042e 	bgeu	r3,r2,200f2b0 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 200f2a0:	e0bff617 	ldw	r2,-40(fp)
 200f2a4:	1485883a 	add	r2,r2,r18
 200f2a8:	10800044 	addi	r2,r2,1
 200f2ac:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 200f2b0:	8080030b 	ldhu	r2,12(r16)
 200f2b4:	10bfffcc 	andi	r2,r2,65535
 200f2b8:	1081000c 	andi	r2,r2,1024
 200f2bc:	10001726 	beq	r2,zero,200f31c <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 200f2c0:	e0bff517 	ldw	r2,-44(fp)
 200f2c4:	100b883a 	mov	r5,r2
 200f2c8:	e13ff817 	ldw	r4,-32(fp)
 200f2cc:	201000c0 	call	201000c <_malloc_r>
 200f2d0:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 200f2d4:	e0bff417 	ldw	r2,-48(fp)
 200f2d8:	1000041e 	bne	r2,zero,200f2ec <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 200f2dc:	e0bff817 	ldw	r2,-32(fp)
 200f2e0:	00c00304 	movi	r3,12
 200f2e4:	10c00015 	stw	r3,0(r2)
			  goto err;
 200f2e8:	0000ea06 	br	200f694 <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 200f2ec:	80800417 	ldw	r2,16(r16)
 200f2f0:	e0fff617 	ldw	r3,-40(fp)
 200f2f4:	180d883a 	mov	r6,r3
 200f2f8:	100b883a 	mov	r5,r2
 200f2fc:	e13ff417 	ldw	r4,-48(fp)
 200f300:	20093a40 	call	20093a4 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 200f304:	80c0030b 	ldhu	r3,12(r16)
 200f308:	00bedfc4 	movi	r2,-1153
 200f30c:	1884703a 	and	r2,r3,r2
 200f310:	10802014 	ori	r2,r2,128
 200f314:	8080030d 	sth	r2,12(r16)
 200f318:	00001506 	br	200f370 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 200f31c:	80800417 	ldw	r2,16(r16)
 200f320:	e0fff517 	ldw	r3,-44(fp)
 200f324:	180d883a 	mov	r6,r3
 200f328:	100b883a 	mov	r5,r2
 200f32c:	e13ff817 	ldw	r4,-32(fp)
 200f330:	20129c40 	call	20129c4 <_realloc_r>
 200f334:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 200f338:	e0bff417 	ldw	r2,-48(fp)
 200f33c:	10000c1e 	bne	r2,zero,200f370 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 200f340:	80800417 	ldw	r2,16(r16)
 200f344:	100b883a 	mov	r5,r2
 200f348:	e13ff817 	ldw	r4,-32(fp)
 200f34c:	200e9cc0 	call	200e9cc <_free_r>
			  fp->_flags &=  ~__SMBF;
 200f350:	80c0030b 	ldhu	r3,12(r16)
 200f354:	00bfdfc4 	movi	r2,-129
 200f358:	1884703a 	and	r2,r3,r2
 200f35c:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 200f360:	e0bff817 	ldw	r2,-32(fp)
 200f364:	00c00304 	movi	r3,12
 200f368:	10c00015 	stw	r3,0(r2)
			  goto err;
 200f36c:	0000c906 	br	200f694 <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 200f370:	e0bff417 	ldw	r2,-48(fp)
 200f374:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 200f378:	e0bff617 	ldw	r2,-40(fp)
 200f37c:	e0fff417 	ldw	r3,-48(fp)
 200f380:	1885883a 	add	r2,r3,r2
 200f384:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 200f388:	e0bff517 	ldw	r2,-44(fp)
 200f38c:	80800515 	stw	r2,20(r16)
		  w = len;
 200f390:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 200f394:	e0fff517 	ldw	r3,-44(fp)
 200f398:	e0bff617 	ldw	r2,-40(fp)
 200f39c:	1885c83a 	sub	r2,r3,r2
 200f3a0:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 200f3a4:	8805883a 	mov	r2,r17
 200f3a8:	9080012e 	bgeu	r18,r2,200f3b0 <__sfvwrite_r+0x2b8>
		w = len;
 200f3ac:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 200f3b0:	80800017 	ldw	r2,0(r16)
 200f3b4:	8807883a 	mov	r3,r17
 200f3b8:	180d883a 	mov	r6,r3
 200f3bc:	980b883a 	mov	r5,r19
 200f3c0:	1009883a 	mov	r4,r2
 200f3c4:	2010d440 	call	2010d44 <memmove>
	      fp->_w -= w;
 200f3c8:	80800217 	ldw	r2,8(r16)
 200f3cc:	1445c83a 	sub	r2,r2,r17
 200f3d0:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200f3d4:	80800017 	ldw	r2,0(r16)
 200f3d8:	8807883a 	mov	r3,r17
 200f3dc:	10c5883a 	add	r2,r2,r3
 200f3e0:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 200f3e4:	9023883a 	mov	r17,r18
 200f3e8:	00003506 	br	200f4c0 <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 200f3ec:	80800017 	ldw	r2,0(r16)
 200f3f0:	80c00417 	ldw	r3,16(r16)
 200f3f4:	18800236 	bltu	r3,r2,200f400 <__sfvwrite_r+0x308>
 200f3f8:	80800517 	ldw	r2,20(r16)
 200f3fc:	9080182e 	bgeu	r18,r2,200f460 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 200f400:	8805883a 	mov	r2,r17
 200f404:	9080012e 	bgeu	r18,r2,200f40c <__sfvwrite_r+0x314>
 200f408:	9005883a 	mov	r2,r18
 200f40c:	1023883a 	mov	r17,r2
	      COPY (w);
 200f410:	80800017 	ldw	r2,0(r16)
 200f414:	8807883a 	mov	r3,r17
 200f418:	180d883a 	mov	r6,r3
 200f41c:	980b883a 	mov	r5,r19
 200f420:	1009883a 	mov	r4,r2
 200f424:	2010d440 	call	2010d44 <memmove>
	      fp->_w -= w;
 200f428:	80800217 	ldw	r2,8(r16)
 200f42c:	1445c83a 	sub	r2,r2,r17
 200f430:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200f434:	80800017 	ldw	r2,0(r16)
 200f438:	8807883a 	mov	r3,r17
 200f43c:	10c5883a 	add	r2,r2,r3
 200f440:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200f444:	80800217 	ldw	r2,8(r16)
 200f448:	10001c1e 	bne	r2,zero,200f4bc <__sfvwrite_r+0x3c4>
 200f44c:	800b883a 	mov	r5,r16
 200f450:	e13ff817 	ldw	r4,-32(fp)
 200f454:	200e32c0 	call	200e32c <_fflush_r>
 200f458:	10001826 	beq	r2,zero,200f4bc <__sfvwrite_r+0x3c4>
		goto err;
 200f45c:	00008d06 	br	200f694 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 200f460:	9005883a 	mov	r2,r18
 200f464:	00e00034 	movhi	r3,32768
 200f468:	10c00236 	bltu	r2,r3,200f474 <__sfvwrite_r+0x37c>
 200f46c:	00a00034 	movhi	r2,32768
 200f470:	10bfffc4 	addi	r2,r2,-1
 200f474:	1007883a 	mov	r3,r2
 200f478:	80800517 	ldw	r2,20(r16)
 200f47c:	100b883a 	mov	r5,r2
 200f480:	1809883a 	mov	r4,r3
 200f484:	2006ab40 	call	2006ab4 <__divsi3>
 200f488:	1007883a 	mov	r3,r2
 200f48c:	80800517 	ldw	r2,20(r16)
 200f490:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200f494:	80800917 	ldw	r2,36(r16)
 200f498:	80c00717 	ldw	r3,28(r16)
 200f49c:	880f883a 	mov	r7,r17
 200f4a0:	980d883a 	mov	r6,r19
 200f4a4:	180b883a 	mov	r5,r3
 200f4a8:	e13ff817 	ldw	r4,-32(fp)
 200f4ac:	103ee83a 	callr	r2
 200f4b0:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200f4b4:	0440740e 	bge	zero,r17,200f688 <__sfvwrite_r+0x590>
 200f4b8:	00000106 	br	200f4c0 <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200f4bc:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 200f4c0:	8805883a 	mov	r2,r17
 200f4c4:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200f4c8:	8805883a 	mov	r2,r17
 200f4cc:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200f4d0:	a8800217 	ldw	r2,8(r21)
 200f4d4:	8807883a 	mov	r3,r17
 200f4d8:	10c5c83a 	sub	r2,r2,r3
 200f4dc:	a8800215 	stw	r2,8(r21)
 200f4e0:	a8800217 	ldw	r2,8(r21)
 200f4e4:	103f501e 	bne	r2,zero,200f228 <__sfvwrite_r+0x130>
 200f4e8:	00006306 	br	200f678 <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 200f4ec:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 200f4f0:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 200f4f4:	00000406 	br	200f508 <__sfvwrite_r+0x410>
 200f4f8:	e03ff215 	stw	zero,-56(fp)
 200f4fc:	a4c00017 	ldw	r19,0(r20)
 200f500:	a4800117 	ldw	r18,4(r20)
 200f504:	a5000204 	addi	r20,r20,8
 200f508:	903ffb26 	beq	r18,zero,200f4f8 <__sfvwrite_r+0x400>
	  if (!nlknown)
 200f50c:	e0bff217 	ldw	r2,-56(fp)
 200f510:	1000111e 	bne	r2,zero,200f558 <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 200f514:	900d883a 	mov	r6,r18
 200f518:	01400284 	movi	r5,10
 200f51c:	9809883a 	mov	r4,r19
 200f520:	2010b880 	call	2010b88 <memchr>
 200f524:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 200f528:	e0bff717 	ldw	r2,-36(fp)
 200f52c:	10000626 	beq	r2,zero,200f548 <__sfvwrite_r+0x450>
 200f530:	e0bff717 	ldw	r2,-36(fp)
 200f534:	10800044 	addi	r2,r2,1
 200f538:	1007883a 	mov	r3,r2
 200f53c:	9805883a 	mov	r2,r19
 200f540:	1885c83a 	sub	r2,r3,r2
 200f544:	00000106 	br	200f54c <__sfvwrite_r+0x454>
 200f548:	90800044 	addi	r2,r18,1
 200f54c:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 200f550:	00800044 	movi	r2,1
 200f554:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 200f558:	e0bff317 	ldw	r2,-52(fp)
 200f55c:	9080012e 	bgeu	r18,r2,200f564 <__sfvwrite_r+0x46c>
 200f560:	9005883a 	mov	r2,r18
 200f564:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 200f568:	80c00217 	ldw	r3,8(r16)
 200f56c:	80800517 	ldw	r2,20(r16)
 200f570:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 200f574:	80800017 	ldw	r2,0(r16)
 200f578:	80c00417 	ldw	r3,16(r16)
 200f57c:	1880102e 	bgeu	r3,r2,200f5c0 <__sfvwrite_r+0x4c8>
 200f580:	8d800f0e 	bge	r17,r22,200f5c0 <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 200f584:	80800017 	ldw	r2,0(r16)
 200f588:	8807883a 	mov	r3,r17
 200f58c:	180d883a 	mov	r6,r3
 200f590:	980b883a 	mov	r5,r19
 200f594:	1009883a 	mov	r4,r2
 200f598:	2010d440 	call	2010d44 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 200f59c:	80800017 	ldw	r2,0(r16)
 200f5a0:	8807883a 	mov	r3,r17
 200f5a4:	10c5883a 	add	r2,r2,r3
 200f5a8:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 200f5ac:	800b883a 	mov	r5,r16
 200f5b0:	e13ff817 	ldw	r4,-32(fp)
 200f5b4:	200e32c0 	call	200e32c <_fflush_r>
 200f5b8:	10001b26 	beq	r2,zero,200f628 <__sfvwrite_r+0x530>
		goto err;
 200f5bc:	00003506 	br	200f694 <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 200f5c0:	84400517 	ldw	r17,20(r16)
 200f5c4:	b4400a16 	blt	r22,r17,200f5f0 <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200f5c8:	80800917 	ldw	r2,36(r16)
 200f5cc:	80c00717 	ldw	r3,28(r16)
 200f5d0:	880f883a 	mov	r7,r17
 200f5d4:	980d883a 	mov	r6,r19
 200f5d8:	180b883a 	mov	r5,r3
 200f5dc:	e13ff817 	ldw	r4,-32(fp)
 200f5e0:	103ee83a 	callr	r2
 200f5e4:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200f5e8:	04400f16 	blt	zero,r17,200f628 <__sfvwrite_r+0x530>
		goto err;
 200f5ec:	00002906 	br	200f694 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 200f5f0:	b023883a 	mov	r17,r22
	      COPY (w);
 200f5f4:	80800017 	ldw	r2,0(r16)
 200f5f8:	8807883a 	mov	r3,r17
 200f5fc:	180d883a 	mov	r6,r3
 200f600:	980b883a 	mov	r5,r19
 200f604:	1009883a 	mov	r4,r2
 200f608:	2010d440 	call	2010d44 <memmove>
	      fp->_w -= w;
 200f60c:	80800217 	ldw	r2,8(r16)
 200f610:	1445c83a 	sub	r2,r2,r17
 200f614:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200f618:	80800017 	ldw	r2,0(r16)
 200f61c:	8807883a 	mov	r3,r17
 200f620:	10c5883a 	add	r2,r2,r3
 200f624:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 200f628:	e0bff317 	ldw	r2,-52(fp)
 200f62c:	1445c83a 	sub	r2,r2,r17
 200f630:	e0bff315 	stw	r2,-52(fp)
 200f634:	e0bff317 	ldw	r2,-52(fp)
 200f638:	1000051e 	bne	r2,zero,200f650 <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 200f63c:	800b883a 	mov	r5,r16
 200f640:	e13ff817 	ldw	r4,-32(fp)
 200f644:	200e32c0 	call	200e32c <_fflush_r>
 200f648:	1000111e 	bne	r2,zero,200f690 <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 200f64c:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 200f650:	8805883a 	mov	r2,r17
 200f654:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200f658:	8805883a 	mov	r2,r17
 200f65c:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200f660:	a8800217 	ldw	r2,8(r21)
 200f664:	8807883a 	mov	r3,r17
 200f668:	10c5c83a 	sub	r2,r2,r3
 200f66c:	a8800215 	stw	r2,8(r21)
 200f670:	a8800217 	ldw	r2,8(r21)
 200f674:	103fa41e 	bne	r2,zero,200f508 <__sfvwrite_r+0x410>
    }
  return 0;
 200f678:	0005883a 	mov	r2,zero
 200f67c:	00000906 	br	200f6a4 <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 200f680:	0001883a 	nop
 200f684:	00000306 	br	200f694 <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 200f688:	0001883a 	nop
 200f68c:	00000106 	br	200f694 <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 200f690:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 200f694:	8080030b 	ldhu	r2,12(r16)
 200f698:	10801014 	ori	r2,r2,64
 200f69c:	8080030d 	sth	r2,12(r16)
  return EOF;
 200f6a0:	00bfffc4 	movi	r2,-1
}
 200f6a4:	e6fff904 	addi	sp,fp,-28
 200f6a8:	dfc00817 	ldw	ra,32(sp)
 200f6ac:	df000717 	ldw	fp,28(sp)
 200f6b0:	dd800617 	ldw	r22,24(sp)
 200f6b4:	dd400517 	ldw	r21,20(sp)
 200f6b8:	dd000417 	ldw	r20,16(sp)
 200f6bc:	dcc00317 	ldw	r19,12(sp)
 200f6c0:	dc800217 	ldw	r18,8(sp)
 200f6c4:	dc400117 	ldw	r17,4(sp)
 200f6c8:	dc000017 	ldw	r16,0(sp)
 200f6cc:	dec00904 	addi	sp,sp,36
 200f6d0:	f800283a 	ret

0200f6d4 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 200f6d4:	defff804 	addi	sp,sp,-32
 200f6d8:	dfc00715 	stw	ra,28(sp)
 200f6dc:	df000615 	stw	fp,24(sp)
 200f6e0:	dd000515 	stw	r20,20(sp)
 200f6e4:	dcc00415 	stw	r19,16(sp)
 200f6e8:	dc800315 	stw	r18,12(sp)
 200f6ec:	dc400215 	stw	r17,8(sp)
 200f6f0:	dc000115 	stw	r16,4(sp)
 200f6f4:	df000604 	addi	fp,sp,24
 200f6f8:	e13ffa15 	stw	r4,-24(fp)
 200f6fc:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200f700:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200f704:	e0bffa17 	ldw	r2,-24(fp)
 200f708:	1440b804 	addi	r17,r2,736
 200f70c:	00001b06 	br	200f77c <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200f710:	8c000217 	ldw	r16,8(r17)
 200f714:	8c800117 	ldw	r18,4(r17)
 200f718:	00001506 	br	200f770 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200f71c:	8080030b 	ldhu	r2,12(r16)
 200f720:	10bfffcc 	andi	r2,r2,65535
 200f724:	10a0001c 	xori	r2,r2,32768
 200f728:	10a00004 	addi	r2,r2,-32768
 200f72c:	10000f26 	beq	r2,zero,200f76c <_fwalk+0x98>
 200f730:	8080030b 	ldhu	r2,12(r16)
 200f734:	10bfffcc 	andi	r2,r2,65535
 200f738:	10a0001c 	xori	r2,r2,32768
 200f73c:	10a00004 	addi	r2,r2,-32768
 200f740:	10800060 	cmpeqi	r2,r2,1
 200f744:	1000091e 	bne	r2,zero,200f76c <_fwalk+0x98>
 200f748:	8080038b 	ldhu	r2,14(r16)
 200f74c:	10bfffcc 	andi	r2,r2,65535
 200f750:	10a0001c 	xori	r2,r2,32768
 200f754:	10a00004 	addi	r2,r2,-32768
 200f758:	10bfffe0 	cmpeqi	r2,r2,-1
 200f75c:	1000031e 	bne	r2,zero,200f76c <_fwalk+0x98>
	ret |= (*function) (fp);
 200f760:	8009883a 	mov	r4,r16
 200f764:	a03ee83a 	callr	r20
 200f768:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200f76c:	84001a04 	addi	r16,r16,104
 200f770:	94bfffc4 	addi	r18,r18,-1
 200f774:	903fe90e 	bge	r18,zero,200f71c <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200f778:	8c400017 	ldw	r17,0(r17)
 200f77c:	883fe41e 	bne	r17,zero,200f710 <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 200f780:	9805883a 	mov	r2,r19
}
 200f784:	e6fffb04 	addi	sp,fp,-20
 200f788:	dfc00617 	ldw	ra,24(sp)
 200f78c:	df000517 	ldw	fp,20(sp)
 200f790:	dd000417 	ldw	r20,16(sp)
 200f794:	dcc00317 	ldw	r19,12(sp)
 200f798:	dc800217 	ldw	r18,8(sp)
 200f79c:	dc400117 	ldw	r17,4(sp)
 200f7a0:	dc000017 	ldw	r16,0(sp)
 200f7a4:	dec00704 	addi	sp,sp,28
 200f7a8:	f800283a 	ret

0200f7ac <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 200f7ac:	defff804 	addi	sp,sp,-32
 200f7b0:	dfc00715 	stw	ra,28(sp)
 200f7b4:	df000615 	stw	fp,24(sp)
 200f7b8:	dd000515 	stw	r20,20(sp)
 200f7bc:	dcc00415 	stw	r19,16(sp)
 200f7c0:	dc800315 	stw	r18,12(sp)
 200f7c4:	dc400215 	stw	r17,8(sp)
 200f7c8:	dc000115 	stw	r16,4(sp)
 200f7cc:	df000604 	addi	fp,sp,24
 200f7d0:	e13ffa15 	stw	r4,-24(fp)
 200f7d4:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200f7d8:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200f7dc:	e0bffa17 	ldw	r2,-24(fp)
 200f7e0:	1440b804 	addi	r17,r2,736
 200f7e4:	00001c06 	br	200f858 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200f7e8:	8c000217 	ldw	r16,8(r17)
 200f7ec:	8c800117 	ldw	r18,4(r17)
 200f7f0:	00001606 	br	200f84c <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200f7f4:	8080030b 	ldhu	r2,12(r16)
 200f7f8:	10bfffcc 	andi	r2,r2,65535
 200f7fc:	10a0001c 	xori	r2,r2,32768
 200f800:	10a00004 	addi	r2,r2,-32768
 200f804:	10001026 	beq	r2,zero,200f848 <_fwalk_reent+0x9c>
 200f808:	8080030b 	ldhu	r2,12(r16)
 200f80c:	10bfffcc 	andi	r2,r2,65535
 200f810:	10a0001c 	xori	r2,r2,32768
 200f814:	10a00004 	addi	r2,r2,-32768
 200f818:	10800060 	cmpeqi	r2,r2,1
 200f81c:	10000a1e 	bne	r2,zero,200f848 <_fwalk_reent+0x9c>
 200f820:	8080038b 	ldhu	r2,14(r16)
 200f824:	10bfffcc 	andi	r2,r2,65535
 200f828:	10a0001c 	xori	r2,r2,32768
 200f82c:	10a00004 	addi	r2,r2,-32768
 200f830:	10bfffe0 	cmpeqi	r2,r2,-1
 200f834:	1000041e 	bne	r2,zero,200f848 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 200f838:	800b883a 	mov	r5,r16
 200f83c:	e13ffa17 	ldw	r4,-24(fp)
 200f840:	a03ee83a 	callr	r20
 200f844:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200f848:	84001a04 	addi	r16,r16,104
 200f84c:	94bfffc4 	addi	r18,r18,-1
 200f850:	903fe80e 	bge	r18,zero,200f7f4 <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200f854:	8c400017 	ldw	r17,0(r17)
 200f858:	883fe31e 	bne	r17,zero,200f7e8 <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 200f85c:	9805883a 	mov	r2,r19
}
 200f860:	e6fffb04 	addi	sp,fp,-20
 200f864:	dfc00617 	ldw	ra,24(sp)
 200f868:	df000517 	ldw	fp,20(sp)
 200f86c:	dd000417 	ldw	r20,16(sp)
 200f870:	dcc00317 	ldw	r19,12(sp)
 200f874:	dc800217 	ldw	r18,8(sp)
 200f878:	dc400117 	ldw	r17,4(sp)
 200f87c:	dc000017 	ldw	r16,0(sp)
 200f880:	dec00704 	addi	sp,sp,28
 200f884:	f800283a 	ret

0200f888 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 200f888:	defffb04 	addi	sp,sp,-20
 200f88c:	dfc00415 	stw	ra,16(sp)
 200f890:	df000315 	stw	fp,12(sp)
 200f894:	df000304 	addi	fp,sp,12
 200f898:	e13ffd15 	stw	r4,-12(fp)
 200f89c:	e17ffe15 	stw	r5,-8(fp)
 200f8a0:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 200f8a4:	e0bfff17 	ldw	r2,-4(fp)
 200f8a8:	10001126 	beq	r2,zero,200f8f0 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 200f8ac:	014080b4 	movhi	r5,514
 200f8b0:	294a2b04 	addi	r5,r5,10412
 200f8b4:	e13fff17 	ldw	r4,-4(fp)
 200f8b8:	20138880 	call	2013888 <strcmp>
 200f8bc:	10000c26 	beq	r2,zero,200f8f0 <_setlocale_r+0x68>
 200f8c0:	014080b4 	movhi	r5,514
 200f8c4:	294a2d04 	addi	r5,r5,10420
 200f8c8:	e13fff17 	ldw	r4,-4(fp)
 200f8cc:	20138880 	call	2013888 <strcmp>
 200f8d0:	10000726 	beq	r2,zero,200f8f0 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 200f8d4:	014080b4 	movhi	r5,514
 200f8d8:	294a2a04 	addi	r5,r5,10408
 200f8dc:	e13fff17 	ldw	r4,-4(fp)
 200f8e0:	20138880 	call	2013888 <strcmp>
 200f8e4:	10000226 	beq	r2,zero,200f8f0 <_setlocale_r+0x68>
        return NULL;
 200f8e8:	0005883a 	mov	r2,zero
 200f8ec:	00000206 	br	200f8f8 <_setlocale_r+0x70>
    }
  return "C";
 200f8f0:	008080b4 	movhi	r2,514
 200f8f4:	108a2d04 	addi	r2,r2,10420
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 200f8f8:	e037883a 	mov	sp,fp
 200f8fc:	dfc00117 	ldw	ra,4(sp)
 200f900:	df000017 	ldw	fp,0(sp)
 200f904:	dec00204 	addi	sp,sp,8
 200f908:	f800283a 	ret

0200f90c <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 200f90c:	deffff04 	addi	sp,sp,-4
 200f910:	df000015 	stw	fp,0(sp)
 200f914:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 200f918:	008080b4 	movhi	r2,514
 200f91c:	108c1004 	addi	r2,r2,12352
#endif
}
 200f920:	e037883a 	mov	sp,fp
 200f924:	df000017 	ldw	fp,0(sp)
 200f928:	dec00104 	addi	sp,sp,4
 200f92c:	f800283a 	ret

0200f930 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 200f930:	deffff04 	addi	sp,sp,-4
 200f934:	df000015 	stw	fp,0(sp)
 200f938:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 200f93c:	d0a03217 	ldw	r2,-32568(gp)
#endif
}
 200f940:	e037883a 	mov	sp,fp
 200f944:	df000017 	ldw	fp,0(sp)
 200f948:	dec00104 	addi	sp,sp,4
 200f94c:	f800283a 	ret

0200f950 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 200f950:	deffff04 	addi	sp,sp,-4
 200f954:	df000015 	stw	fp,0(sp)
 200f958:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 200f95c:	008080b4 	movhi	r2,514
 200f960:	108c1804 	addi	r2,r2,12384
#endif
}
 200f964:	e037883a 	mov	sp,fp
 200f968:	df000017 	ldw	fp,0(sp)
 200f96c:	dec00104 	addi	sp,sp,4
 200f970:	f800283a 	ret

0200f974 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 200f974:	deffff04 	addi	sp,sp,-4
 200f978:	df000015 	stw	fp,0(sp)
 200f97c:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 200f980:	d0a79a17 	ldw	r2,-24984(gp)
}
 200f984:	e037883a 	mov	sp,fp
 200f988:	df000017 	ldw	fp,0(sp)
 200f98c:	dec00104 	addi	sp,sp,4
 200f990:	f800283a 	ret

0200f994 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 200f994:	defffe04 	addi	sp,sp,-8
 200f998:	df000115 	stw	fp,4(sp)
 200f99c:	df000104 	addi	fp,sp,4
 200f9a0:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 200f9a4:	008080b4 	movhi	r2,514
 200f9a8:	108c0204 	addi	r2,r2,12296
}
 200f9ac:	e037883a 	mov	sp,fp
 200f9b0:	df000017 	ldw	fp,0(sp)
 200f9b4:	dec00104 	addi	sp,sp,4
 200f9b8:	f800283a 	ret

0200f9bc <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 200f9bc:	defffc04 	addi	sp,sp,-16
 200f9c0:	dfc00315 	stw	ra,12(sp)
 200f9c4:	df000215 	stw	fp,8(sp)
 200f9c8:	df000204 	addi	fp,sp,8
 200f9cc:	e13ffe15 	stw	r4,-8(fp)
 200f9d0:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 200f9d4:	d0a03017 	ldw	r2,-32576(gp)
 200f9d8:	e1bfff17 	ldw	r6,-4(fp)
 200f9dc:	e17ffe17 	ldw	r5,-8(fp)
 200f9e0:	1009883a 	mov	r4,r2
 200f9e4:	200f8880 	call	200f888 <_setlocale_r>
}
 200f9e8:	e037883a 	mov	sp,fp
 200f9ec:	dfc00117 	ldw	ra,4(sp)
 200f9f0:	df000017 	ldw	fp,0(sp)
 200f9f4:	dec00204 	addi	sp,sp,8
 200f9f8:	f800283a 	ret

0200f9fc <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 200f9fc:	defffe04 	addi	sp,sp,-8
 200fa00:	dfc00115 	stw	ra,4(sp)
 200fa04:	df000015 	stw	fp,0(sp)
 200fa08:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 200fa0c:	d0a03017 	ldw	r2,-32576(gp)
 200fa10:	1009883a 	mov	r4,r2
 200fa14:	200f9940 	call	200f994 <_localeconv_r>
}
 200fa18:	e037883a 	mov	sp,fp
 200fa1c:	dfc00117 	ldw	ra,4(sp)
 200fa20:	df000017 	ldw	fp,0(sp)
 200fa24:	dec00204 	addi	sp,sp,8
 200fa28:	f800283a 	ret

0200fa2c <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 200fa2c:	deffea04 	addi	sp,sp,-88
 200fa30:	dfc01515 	stw	ra,84(sp)
 200fa34:	df001415 	stw	fp,80(sp)
 200fa38:	dcc01315 	stw	r19,76(sp)
 200fa3c:	dc801215 	stw	r18,72(sp)
 200fa40:	dc401115 	stw	r17,68(sp)
 200fa44:	dc001015 	stw	r16,64(sp)
 200fa48:	df001404 	addi	fp,sp,80
 200fa4c:	e13ffb15 	stw	r4,-20(fp)
 200fa50:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 200fa54:	8080030b 	ldhu	r2,12(r16)
 200fa58:	10bfffcc 	andi	r2,r2,65535
 200fa5c:	1080008c 	andi	r2,r2,2
 200fa60:	10000726 	beq	r2,zero,200fa80 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 200fa64:	808010c4 	addi	r2,r16,67
 200fa68:	80800015 	stw	r2,0(r16)
 200fa6c:	80800017 	ldw	r2,0(r16)
 200fa70:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 200fa74:	00800044 	movi	r2,1
 200fa78:	80800515 	stw	r2,20(r16)
 200fa7c:	00006d06 	br	200fc34 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 200fa80:	8080038b 	ldhu	r2,14(r16)
 200fa84:	10bfffcc 	andi	r2,r2,65535
 200fa88:	10a0001c 	xori	r2,r2,32768
 200fa8c:	10a00004 	addi	r2,r2,-32768
 200fa90:	10000916 	blt	r2,zero,200fab8 <__smakebuf_r+0x8c>
 200fa94:	8080038b 	ldhu	r2,14(r16)
 200fa98:	10bfffcc 	andi	r2,r2,65535
 200fa9c:	10a0001c 	xori	r2,r2,32768
 200faa0:	10a00004 	addi	r2,r2,-32768
 200faa4:	e1bfec04 	addi	r6,fp,-80
 200faa8:	100b883a 	mov	r5,r2
 200faac:	e13ffb17 	ldw	r4,-20(fp)
 200fab0:	20155840 	call	2015584 <_fstat_r>
 200fab4:	10000c0e 	bge	r2,zero,200fae8 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 200fab8:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 200fabc:	8080030b 	ldhu	r2,12(r16)
 200fac0:	10bfffcc 	andi	r2,r2,65535
 200fac4:	1080200c 	andi	r2,r2,128
 200fac8:	10000226 	beq	r2,zero,200fad4 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 200facc:	04401004 	movi	r17,64
 200fad0:	00000106 	br	200fad8 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 200fad4:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 200fad8:	8080030b 	ldhu	r2,12(r16)
 200fadc:	10820014 	ori	r2,r2,2048
 200fae0:	8080030d 	sth	r2,12(r16)
 200fae4:	00001606 	br	200fb40 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 200fae8:	e0bfed17 	ldw	r2,-76(fp)
 200faec:	10bc000c 	andi	r2,r2,61440
 200faf0:	10880020 	cmpeqi	r2,r2,8192
 200faf4:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 200faf8:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 200fafc:	e0bfed17 	ldw	r2,-76(fp)
 200fb00:	10fc000c 	andi	r3,r2,61440
 200fb04:	00a00014 	movui	r2,32768
 200fb08:	18800a1e 	bne	r3,r2,200fb34 <__smakebuf_r+0x108>
 200fb0c:	80c00a17 	ldw	r3,40(r16)
 200fb10:	00808074 	movhi	r2,513
 200fb14:	108de504 	addi	r2,r2,14228
 200fb18:	1880061e 	bne	r3,r2,200fb34 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 200fb1c:	8080030b 	ldhu	r2,12(r16)
 200fb20:	10810014 	ori	r2,r2,1024
 200fb24:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 200fb28:	00810004 	movi	r2,1024
 200fb2c:	80801315 	stw	r2,76(r16)
 200fb30:	00000306 	br	200fb40 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 200fb34:	8080030b 	ldhu	r2,12(r16)
 200fb38:	10820014 	ori	r2,r2,2048
 200fb3c:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 200fb40:	90001126 	beq	r18,zero,200fb88 <__smakebuf_r+0x15c>
 200fb44:	8080038b 	ldhu	r2,14(r16)
 200fb48:	10bfffcc 	andi	r2,r2,65535
 200fb4c:	10a0001c 	xori	r2,r2,32768
 200fb50:	10a00004 	addi	r2,r2,-32768
 200fb54:	100b883a 	mov	r5,r2
 200fb58:	e13ffb17 	ldw	r4,-20(fp)
 200fb5c:	20155ec0 	call	20155ec <_isatty_r>
 200fb60:	10000926 	beq	r2,zero,200fb88 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 200fb64:	8080030b 	ldhu	r2,12(r16)
 200fb68:	10800054 	ori	r2,r2,1
 200fb6c:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 200fb70:	808010c4 	addi	r2,r16,67
 200fb74:	80800015 	stw	r2,0(r16)
 200fb78:	80800017 	ldw	r2,0(r16)
 200fb7c:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 200fb80:	00800044 	movi	r2,1
 200fb84:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 200fb88:	880b883a 	mov	r5,r17
 200fb8c:	e13ffb17 	ldw	r4,-20(fp)
 200fb90:	201000c0 	call	201000c <_malloc_r>
 200fb94:	1027883a 	mov	r19,r2
 200fb98:	98000e1e 	bne	r19,zero,200fbd4 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 200fb9c:	8080030b 	ldhu	r2,12(r16)
 200fba0:	10bfffcc 	andi	r2,r2,65535
 200fba4:	1080800c 	andi	r2,r2,512
 200fba8:	1000221e 	bne	r2,zero,200fc34 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 200fbac:	8080030b 	ldhu	r2,12(r16)
 200fbb0:	10800094 	ori	r2,r2,2
 200fbb4:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 200fbb8:	808010c4 	addi	r2,r16,67
 200fbbc:	80800015 	stw	r2,0(r16)
 200fbc0:	80800017 	ldw	r2,0(r16)
 200fbc4:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 200fbc8:	00800044 	movi	r2,1
 200fbcc:	80800515 	stw	r2,20(r16)
 200fbd0:	00001806 	br	200fc34 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 200fbd4:	e0fffb17 	ldw	r3,-20(fp)
 200fbd8:	00808074 	movhi	r2,513
 200fbdc:	10b9cd04 	addi	r2,r2,-6348
 200fbe0:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 200fbe4:	8080030b 	ldhu	r2,12(r16)
 200fbe8:	10802014 	ori	r2,r2,128
 200fbec:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 200fbf0:	84c00015 	stw	r19,0(r16)
 200fbf4:	80800017 	ldw	r2,0(r16)
 200fbf8:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 200fbfc:	8805883a 	mov	r2,r17
 200fc00:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 200fc04:	90000b26 	beq	r18,zero,200fc34 <__smakebuf_r+0x208>
 200fc08:	8080038b 	ldhu	r2,14(r16)
 200fc0c:	10bfffcc 	andi	r2,r2,65535
 200fc10:	10a0001c 	xori	r2,r2,32768
 200fc14:	10a00004 	addi	r2,r2,-32768
 200fc18:	100b883a 	mov	r5,r2
 200fc1c:	e13ffb17 	ldw	r4,-20(fp)
 200fc20:	20155ec0 	call	20155ec <_isatty_r>
 200fc24:	10000326 	beq	r2,zero,200fc34 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 200fc28:	8080030b 	ldhu	r2,12(r16)
 200fc2c:	10800054 	ori	r2,r2,1
 200fc30:	8080030d 	sth	r2,12(r16)
    }
}
 200fc34:	e6fffc04 	addi	sp,fp,-16
 200fc38:	dfc00517 	ldw	ra,20(sp)
 200fc3c:	df000417 	ldw	fp,16(sp)
 200fc40:	dcc00317 	ldw	r19,12(sp)
 200fc44:	dc800217 	ldw	r18,8(sp)
 200fc48:	dc400117 	ldw	r17,4(sp)
 200fc4c:	dc000017 	ldw	r16,0(sp)
 200fc50:	dec00604 	addi	sp,sp,24
 200fc54:	f800283a 	ret

0200fc58 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 200fc58:	defff104 	addi	sp,sp,-60
 200fc5c:	dfc00e15 	stw	ra,56(sp)
 200fc60:	df000d15 	stw	fp,52(sp)
 200fc64:	df000d04 	addi	fp,sp,52
 200fc68:	e13ffe15 	stw	r4,-8(fp)
 200fc6c:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 200fc70:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 200fc74:	008080b4 	movhi	r2,514
 200fc78:	108c2004 	addi	r2,r2,12416
 200fc7c:	10800217 	ldw	r2,8(r2)
 200fc80:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 200fc84:	e0bff817 	ldw	r2,-32(fp)
 200fc88:	10c00117 	ldw	r3,4(r2)
 200fc8c:	00bfff04 	movi	r2,-4
 200fc90:	1884703a 	and	r2,r3,r2
 200fc94:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 200fc98:	e0fff817 	ldw	r3,-32(fp)
 200fc9c:	e0bff917 	ldw	r2,-28(fp)
 200fca0:	1885883a 	add	r2,r3,r2
 200fca4:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 200fca8:	d0e79b17 	ldw	r3,-24980(gp)
 200fcac:	e0bfff17 	ldw	r2,-4(fp)
 200fcb0:	1885883a 	add	r2,r3,r2
 200fcb4:	10800404 	addi	r2,r2,16
 200fcb8:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 200fcbc:	00840004 	movi	r2,4096
 200fcc0:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 200fcc4:	d0a03417 	ldw	r2,-32560(gp)
 200fcc8:	10bfffe0 	cmpeqi	r2,r2,-1
 200fccc:	1000081e 	bne	r2,zero,200fcf0 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 200fcd0:	e0fffb17 	ldw	r3,-20(fp)
 200fcd4:	e0bff617 	ldw	r2,-40(fp)
 200fcd8:	1885883a 	add	r2,r3,r2
 200fcdc:	10ffffc4 	addi	r3,r2,-1
 200fce0:	e0bffb17 	ldw	r2,-20(fp)
 200fce4:	0085c83a 	sub	r2,zero,r2
 200fce8:	1884703a 	and	r2,r3,r2
 200fcec:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 200fcf0:	e0bff617 	ldw	r2,-40(fp)
 200fcf4:	100b883a 	mov	r5,r2
 200fcf8:	e13ffe17 	ldw	r4,-8(fp)
 200fcfc:	20135b40 	call	20135b4 <_sbrk_r>
 200fd00:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 200fd04:	e0bff317 	ldw	r2,-52(fp)
 200fd08:	10bfffe0 	cmpeqi	r2,r2,-1
 200fd0c:	1000b91e 	bne	r2,zero,200fff4 <malloc_extend_top+0x39c>
 200fd10:	e0fff317 	ldw	r3,-52(fp)
 200fd14:	e0bffa17 	ldw	r2,-24(fp)
 200fd18:	1880042e 	bgeu	r3,r2,200fd2c <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 200fd1c:	008080b4 	movhi	r2,514
 200fd20:	108c2004 	addi	r2,r2,12416
 200fd24:	e0fff817 	ldw	r3,-32(fp)
 200fd28:	1880b21e 	bne	r3,r2,200fff4 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 200fd2c:	008080b4 	movhi	r2,514
 200fd30:	10997204 	addi	r2,r2,26056
 200fd34:	10800017 	ldw	r2,0(r2)
 200fd38:	1007883a 	mov	r3,r2
 200fd3c:	e0bff617 	ldw	r2,-40(fp)
 200fd40:	1885883a 	add	r2,r3,r2
 200fd44:	1007883a 	mov	r3,r2
 200fd48:	008080b4 	movhi	r2,514
 200fd4c:	10997204 	addi	r2,r2,26056
 200fd50:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 200fd54:	e0fff317 	ldw	r3,-52(fp)
 200fd58:	e0bffa17 	ldw	r2,-24(fp)
 200fd5c:	1880101e 	bne	r3,r2,200fda0 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 200fd60:	e0bffb17 	ldw	r2,-20(fp)
 200fd64:	10ffffc4 	addi	r3,r2,-1
 200fd68:	e0bffa17 	ldw	r2,-24(fp)
 200fd6c:	1884703a 	and	r2,r3,r2
 200fd70:	10000b1e 	bne	r2,zero,200fda0 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 200fd74:	e0fff617 	ldw	r3,-40(fp)
 200fd78:	e0bff917 	ldw	r2,-28(fp)
 200fd7c:	1885883a 	add	r2,r3,r2
 200fd80:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200fd84:	008080b4 	movhi	r2,514
 200fd88:	108c2004 	addi	r2,r2,12416
 200fd8c:	10800217 	ldw	r2,8(r2)
 200fd90:	e0fffc17 	ldw	r3,-16(fp)
 200fd94:	18c00054 	ori	r3,r3,1
 200fd98:	10c00115 	stw	r3,4(r2)
 200fd9c:	00008006 	br	200ffa0 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 200fda0:	d0a03417 	ldw	r2,-32560(gp)
 200fda4:	10bfffd8 	cmpnei	r2,r2,-1
 200fda8:	1000031e 	bne	r2,zero,200fdb8 <malloc_extend_top+0x160>
      sbrk_base = brk;
 200fdac:	e0bff317 	ldw	r2,-52(fp)
 200fdb0:	d0a03415 	stw	r2,-32560(gp)
 200fdb4:	00000a06 	br	200fde0 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 200fdb8:	008080b4 	movhi	r2,514
 200fdbc:	10997204 	addi	r2,r2,26056
 200fdc0:	10c00017 	ldw	r3,0(r2)
 200fdc4:	e13ff317 	ldw	r4,-52(fp)
 200fdc8:	e0bffa17 	ldw	r2,-24(fp)
 200fdcc:	2085c83a 	sub	r2,r4,r2
 200fdd0:	1887883a 	add	r3,r3,r2
 200fdd4:	008080b4 	movhi	r2,514
 200fdd8:	10997204 	addi	r2,r2,26056
 200fddc:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 200fde0:	e0bff317 	ldw	r2,-52(fp)
 200fde4:	10800204 	addi	r2,r2,8
 200fde8:	108001cc 	andi	r2,r2,7
 200fdec:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 200fdf0:	e0bffd17 	ldw	r2,-12(fp)
 200fdf4:	10000926 	beq	r2,zero,200fe1c <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 200fdf8:	00c00204 	movi	r3,8
 200fdfc:	e0bffd17 	ldw	r2,-12(fp)
 200fe00:	1885c83a 	sub	r2,r3,r2
 200fe04:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 200fe08:	e0fff317 	ldw	r3,-52(fp)
 200fe0c:	e0bff417 	ldw	r2,-48(fp)
 200fe10:	1885883a 	add	r2,r3,r2
 200fe14:	e0bff315 	stw	r2,-52(fp)
 200fe18:	00000106 	br	200fe20 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 200fe1c:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 200fe20:	e0fff317 	ldw	r3,-52(fp)
 200fe24:	e0bff617 	ldw	r2,-40(fp)
 200fe28:	1885883a 	add	r2,r3,r2
 200fe2c:	1007883a 	mov	r3,r2
 200fe30:	e0bffb17 	ldw	r2,-20(fp)
 200fe34:	10bfffc4 	addi	r2,r2,-1
 200fe38:	1884703a 	and	r2,r3,r2
 200fe3c:	e0fffb17 	ldw	r3,-20(fp)
 200fe40:	1885c83a 	sub	r2,r3,r2
 200fe44:	e0fff417 	ldw	r3,-48(fp)
 200fe48:	1885883a 	add	r2,r3,r2
 200fe4c:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 200fe50:	e0bff417 	ldw	r2,-48(fp)
 200fe54:	100b883a 	mov	r5,r2
 200fe58:	e13ffe17 	ldw	r4,-8(fp)
 200fe5c:	20135b40 	call	20135b4 <_sbrk_r>
 200fe60:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 200fe64:	e0bff517 	ldw	r2,-44(fp)
 200fe68:	10bfffd8 	cmpnei	r2,r2,-1
 200fe6c:	1000051e 	bne	r2,zero,200fe84 <malloc_extend_top+0x22c>
      {
	correction = 0;
 200fe70:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 200fe74:	00800044 	movi	r2,1
 200fe78:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 200fe7c:	e0bff317 	ldw	r2,-52(fp)
 200fe80:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 200fe84:	008080b4 	movhi	r2,514
 200fe88:	10997204 	addi	r2,r2,26056
 200fe8c:	10800017 	ldw	r2,0(r2)
 200fe90:	1007883a 	mov	r3,r2
 200fe94:	e0bff417 	ldw	r2,-48(fp)
 200fe98:	1885883a 	add	r2,r3,r2
 200fe9c:	1007883a 	mov	r3,r2
 200fea0:	008080b4 	movhi	r2,514
 200fea4:	10997204 	addi	r2,r2,26056
 200fea8:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 200feac:	008080b4 	movhi	r2,514
 200feb0:	108c2004 	addi	r2,r2,12416
 200feb4:	e0fff317 	ldw	r3,-52(fp)
 200feb8:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 200febc:	e0fff517 	ldw	r3,-44(fp)
 200fec0:	e0bff317 	ldw	r2,-52(fp)
 200fec4:	1885c83a 	sub	r2,r3,r2
 200fec8:	1007883a 	mov	r3,r2
 200fecc:	e0bff417 	ldw	r2,-48(fp)
 200fed0:	1885883a 	add	r2,r3,r2
 200fed4:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200fed8:	008080b4 	movhi	r2,514
 200fedc:	108c2004 	addi	r2,r2,12416
 200fee0:	10800217 	ldw	r2,8(r2)
 200fee4:	e0fffc17 	ldw	r3,-16(fp)
 200fee8:	18c00054 	ori	r3,r3,1
 200feec:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 200fef0:	008080b4 	movhi	r2,514
 200fef4:	108c2004 	addi	r2,r2,12416
 200fef8:	e0fff817 	ldw	r3,-32(fp)
 200fefc:	18802826 	beq	r3,r2,200ffa0 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 200ff00:	e0bff917 	ldw	r2,-28(fp)
 200ff04:	10800428 	cmpgeui	r2,r2,16
 200ff08:	1000061e 	bne	r2,zero,200ff24 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 200ff0c:	008080b4 	movhi	r2,514
 200ff10:	108c2004 	addi	r2,r2,12416
 200ff14:	10800217 	ldw	r2,8(r2)
 200ff18:	00c00044 	movi	r3,1
 200ff1c:	10c00115 	stw	r3,4(r2)
        return;
 200ff20:	00003506 	br	200fff8 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 200ff24:	e0bff917 	ldw	r2,-28(fp)
 200ff28:	10fffd04 	addi	r3,r2,-12
 200ff2c:	00bffe04 	movi	r2,-8
 200ff30:	1884703a 	and	r2,r3,r2
 200ff34:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 200ff38:	e0bff817 	ldw	r2,-32(fp)
 200ff3c:	10800117 	ldw	r2,4(r2)
 200ff40:	10c0004c 	andi	r3,r2,1
 200ff44:	e0bff917 	ldw	r2,-28(fp)
 200ff48:	1886b03a 	or	r3,r3,r2
 200ff4c:	e0bff817 	ldw	r2,-32(fp)
 200ff50:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 200ff54:	e0fff817 	ldw	r3,-32(fp)
 200ff58:	e0bff917 	ldw	r2,-28(fp)
 200ff5c:	1885883a 	add	r2,r3,r2
 200ff60:	00c00144 	movi	r3,5
 200ff64:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 200ff68:	e0bff917 	ldw	r2,-28(fp)
 200ff6c:	10800104 	addi	r2,r2,4
 200ff70:	e0fff817 	ldw	r3,-32(fp)
 200ff74:	1885883a 	add	r2,r3,r2
 200ff78:	00c00144 	movi	r3,5
 200ff7c:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 200ff80:	e0bff917 	ldw	r2,-28(fp)
 200ff84:	10800430 	cmpltui	r2,r2,16
 200ff88:	1000051e 	bne	r2,zero,200ffa0 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 200ff8c:	e0bff817 	ldw	r2,-32(fp)
 200ff90:	10800204 	addi	r2,r2,8
 200ff94:	100b883a 	mov	r5,r2
 200ff98:	e13ffe17 	ldw	r4,-8(fp)
 200ff9c:	200e9cc0 	call	200e9cc <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 200ffa0:	008080b4 	movhi	r2,514
 200ffa4:	10997204 	addi	r2,r2,26056
 200ffa8:	10800017 	ldw	r2,0(r2)
 200ffac:	1007883a 	mov	r3,r2
 200ffb0:	d0a79c17 	ldw	r2,-24976(gp)
 200ffb4:	10c0042e 	bgeu	r2,r3,200ffc8 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 200ffb8:	008080b4 	movhi	r2,514
 200ffbc:	10997204 	addi	r2,r2,26056
 200ffc0:	10800017 	ldw	r2,0(r2)
 200ffc4:	d0a79c15 	stw	r2,-24976(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 200ffc8:	008080b4 	movhi	r2,514
 200ffcc:	10997204 	addi	r2,r2,26056
 200ffd0:	10800017 	ldw	r2,0(r2)
 200ffd4:	1007883a 	mov	r3,r2
 200ffd8:	d0a79d17 	ldw	r2,-24972(gp)
 200ffdc:	10c0062e 	bgeu	r2,r3,200fff8 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 200ffe0:	008080b4 	movhi	r2,514
 200ffe4:	10997204 	addi	r2,r2,26056
 200ffe8:	10800017 	ldw	r2,0(r2)
 200ffec:	d0a79d15 	stw	r2,-24972(gp)
 200fff0:	00000106 	br	200fff8 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 200fff4:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 200fff8:	e037883a 	mov	sp,fp
 200fffc:	dfc00117 	ldw	ra,4(sp)
 2010000:	df000017 	ldw	fp,0(sp)
 2010004:	dec00204 	addi	sp,sp,8
 2010008:	f800283a 	ret

0201000c <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 201000c:	deffef04 	addi	sp,sp,-68
 2010010:	dfc01015 	stw	ra,64(sp)
 2010014:	df000f15 	stw	fp,60(sp)
 2010018:	df000f04 	addi	fp,sp,60
 201001c:	e13ffe15 	stw	r4,-8(fp)
 2010020:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 2010024:	e0bfff17 	ldw	r2,-4(fp)
 2010028:	108002c4 	addi	r2,r2,11
 201002c:	108005f0 	cmpltui	r2,r2,23
 2010030:	1000051e 	bne	r2,zero,2010048 <_malloc_r+0x3c>
 2010034:	e0bfff17 	ldw	r2,-4(fp)
 2010038:	10c002c4 	addi	r3,r2,11
 201003c:	00bffe04 	movi	r2,-8
 2010040:	1884703a 	and	r2,r3,r2
 2010044:	00000106 	br	201004c <_malloc_r+0x40>
 2010048:	00800404 	movi	r2,16
 201004c:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 2010050:	e0bffa17 	ldw	r2,-24(fp)
 2010054:	10000316 	blt	r2,zero,2010064 <_malloc_r+0x58>
 2010058:	e0fffa17 	ldw	r3,-24(fp)
 201005c:	e0bfff17 	ldw	r2,-4(fp)
 2010060:	1880052e 	bgeu	r3,r2,2010078 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 2010064:	e0bffe17 	ldw	r2,-8(fp)
 2010068:	00c00304 	movi	r3,12
 201006c:	10c00015 	stw	r3,0(r2)
    return 0;
 2010070:	0005883a 	mov	r2,zero
 2010074:	0002bf06 	br	2010b74 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 2010078:	e13ffe17 	ldw	r4,-8(fp)
 201007c:	20172700 	call	2017270 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 2010080:	e0bffa17 	ldw	r2,-24(fp)
 2010084:	10807e28 	cmpgeui	r2,r2,504
 2010088:	10003f1e 	bne	r2,zero,2010188 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 201008c:	e0bffa17 	ldw	r2,-24(fp)
 2010090:	1004d0fa 	srli	r2,r2,3
 2010094:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 2010098:	e0bff217 	ldw	r2,-56(fp)
 201009c:	10800044 	addi	r2,r2,1
 20100a0:	1085883a 	add	r2,r2,r2
 20100a4:	1085883a 	add	r2,r2,r2
 20100a8:	1087883a 	add	r3,r2,r2
 20100ac:	008080b4 	movhi	r2,514
 20100b0:	108c2004 	addi	r2,r2,12416
 20100b4:	1885883a 	add	r2,r3,r2
 20100b8:	10bffe04 	addi	r2,r2,-8
 20100bc:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 20100c0:	e0bff917 	ldw	r2,-28(fp)
 20100c4:	10800317 	ldw	r2,12(r2)
 20100c8:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 20100cc:	e0fff117 	ldw	r3,-60(fp)
 20100d0:	e0bff917 	ldw	r2,-28(fp)
 20100d4:	1880061e 	bne	r3,r2,20100f0 <_malloc_r+0xe4>
    {
      q = next_bin(q);
 20100d8:	e0bff917 	ldw	r2,-28(fp)
 20100dc:	10800204 	addi	r2,r2,8
 20100e0:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 20100e4:	e0bff917 	ldw	r2,-28(fp)
 20100e8:	10800317 	ldw	r2,12(r2)
 20100ec:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 20100f0:	e0fff117 	ldw	r3,-60(fp)
 20100f4:	e0bff917 	ldw	r2,-28(fp)
 20100f8:	18801f26 	beq	r3,r2,2010178 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 20100fc:	e0bff117 	ldw	r2,-60(fp)
 2010100:	10c00117 	ldw	r3,4(r2)
 2010104:	00bfff04 	movi	r2,-4
 2010108:	1884703a 	and	r2,r3,r2
 201010c:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 2010110:	e0bff117 	ldw	r2,-60(fp)
 2010114:	10800317 	ldw	r2,12(r2)
 2010118:	e0bff815 	stw	r2,-32(fp)
 201011c:	e0bff117 	ldw	r2,-60(fp)
 2010120:	10800217 	ldw	r2,8(r2)
 2010124:	e0bff715 	stw	r2,-36(fp)
 2010128:	e0bff717 	ldw	r2,-36(fp)
 201012c:	e0fff817 	ldw	r3,-32(fp)
 2010130:	10c00315 	stw	r3,12(r2)
 2010134:	e0bff817 	ldw	r2,-32(fp)
 2010138:	e0fff717 	ldw	r3,-36(fp)
 201013c:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 2010140:	e0fff117 	ldw	r3,-60(fp)
 2010144:	e0bffb17 	ldw	r2,-20(fp)
 2010148:	1885883a 	add	r2,r3,r2
 201014c:	e13ff117 	ldw	r4,-60(fp)
 2010150:	e0fffb17 	ldw	r3,-20(fp)
 2010154:	20c7883a 	add	r3,r4,r3
 2010158:	18c00117 	ldw	r3,4(r3)
 201015c:	18c00054 	ori	r3,r3,1
 2010160:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 2010164:	e13ffe17 	ldw	r4,-8(fp)
 2010168:	20173900 	call	2017390 <__malloc_unlock>
      return chunk2mem(victim);
 201016c:	e0bff117 	ldw	r2,-60(fp)
 2010170:	10800204 	addi	r2,r2,8
 2010174:	00027f06 	br	2010b74 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 2010178:	e0bff217 	ldw	r2,-56(fp)
 201017c:	10800084 	addi	r2,r2,2
 2010180:	e0bff215 	stw	r2,-56(fp)
 2010184:	00007306 	br	2010354 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 2010188:	e0bffa17 	ldw	r2,-24(fp)
 201018c:	1004d27a 	srli	r2,r2,9
 2010190:	1000031e 	bne	r2,zero,20101a0 <_malloc_r+0x194>
 2010194:	e0bffa17 	ldw	r2,-24(fp)
 2010198:	1004d0fa 	srli	r2,r2,3
 201019c:	00002906 	br	2010244 <_malloc_r+0x238>
 20101a0:	e0bffa17 	ldw	r2,-24(fp)
 20101a4:	1004d27a 	srli	r2,r2,9
 20101a8:	10800168 	cmpgeui	r2,r2,5
 20101ac:	1000041e 	bne	r2,zero,20101c0 <_malloc_r+0x1b4>
 20101b0:	e0bffa17 	ldw	r2,-24(fp)
 20101b4:	1004d1ba 	srli	r2,r2,6
 20101b8:	10800e04 	addi	r2,r2,56
 20101bc:	00002106 	br	2010244 <_malloc_r+0x238>
 20101c0:	e0bffa17 	ldw	r2,-24(fp)
 20101c4:	1004d27a 	srli	r2,r2,9
 20101c8:	10800568 	cmpgeui	r2,r2,21
 20101cc:	1000041e 	bne	r2,zero,20101e0 <_malloc_r+0x1d4>
 20101d0:	e0bffa17 	ldw	r2,-24(fp)
 20101d4:	1004d27a 	srli	r2,r2,9
 20101d8:	108016c4 	addi	r2,r2,91
 20101dc:	00001906 	br	2010244 <_malloc_r+0x238>
 20101e0:	e0bffa17 	ldw	r2,-24(fp)
 20101e4:	1004d27a 	srli	r2,r2,9
 20101e8:	10801568 	cmpgeui	r2,r2,85
 20101ec:	1000041e 	bne	r2,zero,2010200 <_malloc_r+0x1f4>
 20101f0:	e0bffa17 	ldw	r2,-24(fp)
 20101f4:	1004d33a 	srli	r2,r2,12
 20101f8:	10801b84 	addi	r2,r2,110
 20101fc:	00001106 	br	2010244 <_malloc_r+0x238>
 2010200:	e0bffa17 	ldw	r2,-24(fp)
 2010204:	1004d27a 	srli	r2,r2,9
 2010208:	10805568 	cmpgeui	r2,r2,341
 201020c:	1000041e 	bne	r2,zero,2010220 <_malloc_r+0x214>
 2010210:	e0bffa17 	ldw	r2,-24(fp)
 2010214:	1004d3fa 	srli	r2,r2,15
 2010218:	10801dc4 	addi	r2,r2,119
 201021c:	00000906 	br	2010244 <_malloc_r+0x238>
 2010220:	e0bffa17 	ldw	r2,-24(fp)
 2010224:	1004d27a 	srli	r2,r2,9
 2010228:	10815568 	cmpgeui	r2,r2,1365
 201022c:	1000041e 	bne	r2,zero,2010240 <_malloc_r+0x234>
 2010230:	e0bffa17 	ldw	r2,-24(fp)
 2010234:	1004d4ba 	srli	r2,r2,18
 2010238:	10801f04 	addi	r2,r2,124
 201023c:	00000106 	br	2010244 <_malloc_r+0x238>
 2010240:	00801f84 	movi	r2,126
 2010244:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 2010248:	e0bff217 	ldw	r2,-56(fp)
 201024c:	10800044 	addi	r2,r2,1
 2010250:	1085883a 	add	r2,r2,r2
 2010254:	1085883a 	add	r2,r2,r2
 2010258:	1087883a 	add	r3,r2,r2
 201025c:	008080b4 	movhi	r2,514
 2010260:	108c2004 	addi	r2,r2,12416
 2010264:	1885883a 	add	r2,r3,r2
 2010268:	10bffe04 	addi	r2,r2,-8
 201026c:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 2010270:	e0bff317 	ldw	r2,-52(fp)
 2010274:	10800317 	ldw	r2,12(r2)
 2010278:	e0bff115 	stw	r2,-60(fp)
 201027c:	00002f06 	br	201033c <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 2010280:	e0bff117 	ldw	r2,-60(fp)
 2010284:	10c00117 	ldw	r3,4(r2)
 2010288:	00bfff04 	movi	r2,-4
 201028c:	1884703a 	and	r2,r3,r2
 2010290:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 2010294:	e0fffb17 	ldw	r3,-20(fp)
 2010298:	e0bffa17 	ldw	r2,-24(fp)
 201029c:	1885c83a 	sub	r2,r3,r2
 20102a0:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 20102a4:	e0bff417 	ldw	r2,-48(fp)
 20102a8:	10800410 	cmplti	r2,r2,16
 20102ac:	1000041e 	bne	r2,zero,20102c0 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 20102b0:	e0bff217 	ldw	r2,-56(fp)
 20102b4:	10bfffc4 	addi	r2,r2,-1
 20102b8:	e0bff215 	stw	r2,-56(fp)
        break;   
 20102bc:	00002206 	br	2010348 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 20102c0:	e0bff417 	ldw	r2,-48(fp)
 20102c4:	10001a16 	blt	r2,zero,2010330 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 20102c8:	e0bff117 	ldw	r2,-60(fp)
 20102cc:	10800317 	ldw	r2,12(r2)
 20102d0:	e0bff815 	stw	r2,-32(fp)
 20102d4:	e0bff117 	ldw	r2,-60(fp)
 20102d8:	10800217 	ldw	r2,8(r2)
 20102dc:	e0bff715 	stw	r2,-36(fp)
 20102e0:	e0bff717 	ldw	r2,-36(fp)
 20102e4:	e0fff817 	ldw	r3,-32(fp)
 20102e8:	10c00315 	stw	r3,12(r2)
 20102ec:	e0bff817 	ldw	r2,-32(fp)
 20102f0:	e0fff717 	ldw	r3,-36(fp)
 20102f4:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 20102f8:	e0fff117 	ldw	r3,-60(fp)
 20102fc:	e0bffb17 	ldw	r2,-20(fp)
 2010300:	1885883a 	add	r2,r3,r2
 2010304:	e13ff117 	ldw	r4,-60(fp)
 2010308:	e0fffb17 	ldw	r3,-20(fp)
 201030c:	20c7883a 	add	r3,r4,r3
 2010310:	18c00117 	ldw	r3,4(r3)
 2010314:	18c00054 	ori	r3,r3,1
 2010318:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 201031c:	e13ffe17 	ldw	r4,-8(fp)
 2010320:	20173900 	call	2017390 <__malloc_unlock>
        return chunk2mem(victim);
 2010324:	e0bff117 	ldw	r2,-60(fp)
 2010328:	10800204 	addi	r2,r2,8
 201032c:	00021106 	br	2010b74 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 2010330:	e0bff117 	ldw	r2,-60(fp)
 2010334:	10800317 	ldw	r2,12(r2)
 2010338:	e0bff115 	stw	r2,-60(fp)
 201033c:	e0fff117 	ldw	r3,-60(fp)
 2010340:	e0bff317 	ldw	r2,-52(fp)
 2010344:	18bfce1e 	bne	r3,r2,2010280 <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 2010348:	e0bff217 	ldw	r2,-56(fp)
 201034c:	10800044 	addi	r2,r2,1
 2010350:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 2010354:	008080b4 	movhi	r2,514
 2010358:	108c2204 	addi	r2,r2,12424
 201035c:	10800217 	ldw	r2,8(r2)
 2010360:	e0bff115 	stw	r2,-60(fp)
 2010364:	008080b4 	movhi	r2,514
 2010368:	108c2204 	addi	r2,r2,12424
 201036c:	e0fff117 	ldw	r3,-60(fp)
 2010370:	1880e626 	beq	r3,r2,201070c <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 2010374:	e0bff117 	ldw	r2,-60(fp)
 2010378:	10c00117 	ldw	r3,4(r2)
 201037c:	00bfff04 	movi	r2,-4
 2010380:	1884703a 	and	r2,r3,r2
 2010384:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 2010388:	e0fffb17 	ldw	r3,-20(fp)
 201038c:	e0bffa17 	ldw	r2,-24(fp)
 2010390:	1885c83a 	sub	r2,r3,r2
 2010394:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 2010398:	e0bff417 	ldw	r2,-48(fp)
 201039c:	10800410 	cmplti	r2,r2,16
 20103a0:	1000271e 	bne	r2,zero,2010440 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 20103a4:	e0fff117 	ldw	r3,-60(fp)
 20103a8:	e0bffa17 	ldw	r2,-24(fp)
 20103ac:	1885883a 	add	r2,r3,r2
 20103b0:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 20103b4:	e0bffa17 	ldw	r2,-24(fp)
 20103b8:	10c00054 	ori	r3,r2,1
 20103bc:	e0bff117 	ldw	r2,-60(fp)
 20103c0:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 20103c4:	00c080b4 	movhi	r3,514
 20103c8:	18cc2204 	addi	r3,r3,12424
 20103cc:	008080b4 	movhi	r2,514
 20103d0:	108c2204 	addi	r2,r2,12424
 20103d4:	e13ffc17 	ldw	r4,-16(fp)
 20103d8:	11000315 	stw	r4,12(r2)
 20103dc:	10800317 	ldw	r2,12(r2)
 20103e0:	18800215 	stw	r2,8(r3)
 20103e4:	008080b4 	movhi	r2,514
 20103e8:	108c2204 	addi	r2,r2,12424
 20103ec:	e0fffc17 	ldw	r3,-16(fp)
 20103f0:	18800315 	stw	r2,12(r3)
 20103f4:	e0bffc17 	ldw	r2,-16(fp)
 20103f8:	10c00317 	ldw	r3,12(r2)
 20103fc:	e0bffc17 	ldw	r2,-16(fp)
 2010400:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 2010404:	e0bff417 	ldw	r2,-48(fp)
 2010408:	10800054 	ori	r2,r2,1
 201040c:	1007883a 	mov	r3,r2
 2010410:	e0bffc17 	ldw	r2,-16(fp)
 2010414:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 2010418:	e0bff417 	ldw	r2,-48(fp)
 201041c:	e0fffc17 	ldw	r3,-16(fp)
 2010420:	1885883a 	add	r2,r3,r2
 2010424:	e0fff417 	ldw	r3,-48(fp)
 2010428:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 201042c:	e13ffe17 	ldw	r4,-8(fp)
 2010430:	20173900 	call	2017390 <__malloc_unlock>
      return chunk2mem(victim);
 2010434:	e0bff117 	ldw	r2,-60(fp)
 2010438:	10800204 	addi	r2,r2,8
 201043c:	0001cd06 	br	2010b74 <_malloc_r+0xb68>
    }

    clear_last_remainder;
 2010440:	00c080b4 	movhi	r3,514
 2010444:	18cc2204 	addi	r3,r3,12424
 2010448:	008080b4 	movhi	r2,514
 201044c:	108c2204 	addi	r2,r2,12424
 2010450:	010080b4 	movhi	r4,514
 2010454:	210c2204 	addi	r4,r4,12424
 2010458:	11000315 	stw	r4,12(r2)
 201045c:	10800317 	ldw	r2,12(r2)
 2010460:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 2010464:	e0bff417 	ldw	r2,-48(fp)
 2010468:	10000e16 	blt	r2,zero,20104a4 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 201046c:	e0fff117 	ldw	r3,-60(fp)
 2010470:	e0bffb17 	ldw	r2,-20(fp)
 2010474:	1885883a 	add	r2,r3,r2
 2010478:	e13ff117 	ldw	r4,-60(fp)
 201047c:	e0fffb17 	ldw	r3,-20(fp)
 2010480:	20c7883a 	add	r3,r4,r3
 2010484:	18c00117 	ldw	r3,4(r3)
 2010488:	18c00054 	ori	r3,r3,1
 201048c:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 2010490:	e13ffe17 	ldw	r4,-8(fp)
 2010494:	20173900 	call	2017390 <__malloc_unlock>
      return chunk2mem(victim);
 2010498:	e0bff117 	ldw	r2,-60(fp)
 201049c:	10800204 	addi	r2,r2,8
 20104a0:	0001b406 	br	2010b74 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 20104a4:	e0bffb17 	ldw	r2,-20(fp)
 20104a8:	10808028 	cmpgeui	r2,r2,512
 20104ac:	10002c1e 	bne	r2,zero,2010560 <_malloc_r+0x554>
 20104b0:	e0bffb17 	ldw	r2,-20(fp)
 20104b4:	1004d0fa 	srli	r2,r2,3
 20104b8:	e0bffd15 	stw	r2,-12(fp)
 20104bc:	00c080b4 	movhi	r3,514
 20104c0:	18cc2004 	addi	r3,r3,12416
 20104c4:	008080b4 	movhi	r2,514
 20104c8:	108c2004 	addi	r2,r2,12416
 20104cc:	11000117 	ldw	r4,4(r2)
 20104d0:	e0bffd17 	ldw	r2,-12(fp)
 20104d4:	1000010e 	bge	r2,zero,20104dc <_malloc_r+0x4d0>
 20104d8:	108000c4 	addi	r2,r2,3
 20104dc:	1005d0ba 	srai	r2,r2,2
 20104e0:	100b883a 	mov	r5,r2
 20104e4:	00800044 	movi	r2,1
 20104e8:	1144983a 	sll	r2,r2,r5
 20104ec:	2084b03a 	or	r2,r4,r2
 20104f0:	18800115 	stw	r2,4(r3)
 20104f4:	e0bffd17 	ldw	r2,-12(fp)
 20104f8:	10800044 	addi	r2,r2,1
 20104fc:	1085883a 	add	r2,r2,r2
 2010500:	1085883a 	add	r2,r2,r2
 2010504:	1087883a 	add	r3,r2,r2
 2010508:	008080b4 	movhi	r2,514
 201050c:	108c2004 	addi	r2,r2,12416
 2010510:	1885883a 	add	r2,r3,r2
 2010514:	10bffe04 	addi	r2,r2,-8
 2010518:	e0bff815 	stw	r2,-32(fp)
 201051c:	e0bff817 	ldw	r2,-32(fp)
 2010520:	10800217 	ldw	r2,8(r2)
 2010524:	e0bff715 	stw	r2,-36(fp)
 2010528:	e0bff117 	ldw	r2,-60(fp)
 201052c:	e0fff817 	ldw	r3,-32(fp)
 2010530:	10c00315 	stw	r3,12(r2)
 2010534:	e0bff117 	ldw	r2,-60(fp)
 2010538:	e0fff717 	ldw	r3,-36(fp)
 201053c:	10c00215 	stw	r3,8(r2)
 2010540:	e0bff817 	ldw	r2,-32(fp)
 2010544:	e0fff117 	ldw	r3,-60(fp)
 2010548:	10c00215 	stw	r3,8(r2)
 201054c:	e0bff817 	ldw	r2,-32(fp)
 2010550:	10c00217 	ldw	r3,8(r2)
 2010554:	e0bff717 	ldw	r2,-36(fp)
 2010558:	10c00315 	stw	r3,12(r2)
 201055c:	00006b06 	br	201070c <_malloc_r+0x700>
 2010560:	e0bffb17 	ldw	r2,-20(fp)
 2010564:	1004d27a 	srli	r2,r2,9
 2010568:	1000031e 	bne	r2,zero,2010578 <_malloc_r+0x56c>
 201056c:	e0bffb17 	ldw	r2,-20(fp)
 2010570:	1004d0fa 	srli	r2,r2,3
 2010574:	00002906 	br	201061c <_malloc_r+0x610>
 2010578:	e0bffb17 	ldw	r2,-20(fp)
 201057c:	1004d27a 	srli	r2,r2,9
 2010580:	10800168 	cmpgeui	r2,r2,5
 2010584:	1000041e 	bne	r2,zero,2010598 <_malloc_r+0x58c>
 2010588:	e0bffb17 	ldw	r2,-20(fp)
 201058c:	1004d1ba 	srli	r2,r2,6
 2010590:	10800e04 	addi	r2,r2,56
 2010594:	00002106 	br	201061c <_malloc_r+0x610>
 2010598:	e0bffb17 	ldw	r2,-20(fp)
 201059c:	1004d27a 	srli	r2,r2,9
 20105a0:	10800568 	cmpgeui	r2,r2,21
 20105a4:	1000041e 	bne	r2,zero,20105b8 <_malloc_r+0x5ac>
 20105a8:	e0bffb17 	ldw	r2,-20(fp)
 20105ac:	1004d27a 	srli	r2,r2,9
 20105b0:	108016c4 	addi	r2,r2,91
 20105b4:	00001906 	br	201061c <_malloc_r+0x610>
 20105b8:	e0bffb17 	ldw	r2,-20(fp)
 20105bc:	1004d27a 	srli	r2,r2,9
 20105c0:	10801568 	cmpgeui	r2,r2,85
 20105c4:	1000041e 	bne	r2,zero,20105d8 <_malloc_r+0x5cc>
 20105c8:	e0bffb17 	ldw	r2,-20(fp)
 20105cc:	1004d33a 	srli	r2,r2,12
 20105d0:	10801b84 	addi	r2,r2,110
 20105d4:	00001106 	br	201061c <_malloc_r+0x610>
 20105d8:	e0bffb17 	ldw	r2,-20(fp)
 20105dc:	1004d27a 	srli	r2,r2,9
 20105e0:	10805568 	cmpgeui	r2,r2,341
 20105e4:	1000041e 	bne	r2,zero,20105f8 <_malloc_r+0x5ec>
 20105e8:	e0bffb17 	ldw	r2,-20(fp)
 20105ec:	1004d3fa 	srli	r2,r2,15
 20105f0:	10801dc4 	addi	r2,r2,119
 20105f4:	00000906 	br	201061c <_malloc_r+0x610>
 20105f8:	e0bffb17 	ldw	r2,-20(fp)
 20105fc:	1004d27a 	srli	r2,r2,9
 2010600:	10815568 	cmpgeui	r2,r2,1365
 2010604:	1000041e 	bne	r2,zero,2010618 <_malloc_r+0x60c>
 2010608:	e0bffb17 	ldw	r2,-20(fp)
 201060c:	1004d4ba 	srli	r2,r2,18
 2010610:	10801f04 	addi	r2,r2,124
 2010614:	00000106 	br	201061c <_malloc_r+0x610>
 2010618:	00801f84 	movi	r2,126
 201061c:	e0bffd15 	stw	r2,-12(fp)
 2010620:	e0bffd17 	ldw	r2,-12(fp)
 2010624:	10800044 	addi	r2,r2,1
 2010628:	1085883a 	add	r2,r2,r2
 201062c:	1085883a 	add	r2,r2,r2
 2010630:	1087883a 	add	r3,r2,r2
 2010634:	008080b4 	movhi	r2,514
 2010638:	108c2004 	addi	r2,r2,12416
 201063c:	1885883a 	add	r2,r3,r2
 2010640:	10bffe04 	addi	r2,r2,-8
 2010644:	e0bff815 	stw	r2,-32(fp)
 2010648:	e0bff817 	ldw	r2,-32(fp)
 201064c:	10800217 	ldw	r2,8(r2)
 2010650:	e0bff715 	stw	r2,-36(fp)
 2010654:	e0fff717 	ldw	r3,-36(fp)
 2010658:	e0bff817 	ldw	r2,-32(fp)
 201065c:	1880121e 	bne	r3,r2,20106a8 <_malloc_r+0x69c>
 2010660:	00c080b4 	movhi	r3,514
 2010664:	18cc2004 	addi	r3,r3,12416
 2010668:	008080b4 	movhi	r2,514
 201066c:	108c2004 	addi	r2,r2,12416
 2010670:	11000117 	ldw	r4,4(r2)
 2010674:	e0bffd17 	ldw	r2,-12(fp)
 2010678:	1000010e 	bge	r2,zero,2010680 <_malloc_r+0x674>
 201067c:	108000c4 	addi	r2,r2,3
 2010680:	1005d0ba 	srai	r2,r2,2
 2010684:	100b883a 	mov	r5,r2
 2010688:	00800044 	movi	r2,1
 201068c:	1144983a 	sll	r2,r2,r5
 2010690:	2084b03a 	or	r2,r4,r2
 2010694:	18800115 	stw	r2,4(r3)
 2010698:	00000f06 	br	20106d8 <_malloc_r+0x6cc>
 201069c:	e0bff717 	ldw	r2,-36(fp)
 20106a0:	10800217 	ldw	r2,8(r2)
 20106a4:	e0bff715 	stw	r2,-36(fp)
 20106a8:	e0fff717 	ldw	r3,-36(fp)
 20106ac:	e0bff817 	ldw	r2,-32(fp)
 20106b0:	18800626 	beq	r3,r2,20106cc <_malloc_r+0x6c0>
 20106b4:	e0bff717 	ldw	r2,-36(fp)
 20106b8:	10c00117 	ldw	r3,4(r2)
 20106bc:	00bfff04 	movi	r2,-4
 20106c0:	1884703a 	and	r2,r3,r2
 20106c4:	e0fffb17 	ldw	r3,-20(fp)
 20106c8:	18bff436 	bltu	r3,r2,201069c <_malloc_r+0x690>
 20106cc:	e0bff717 	ldw	r2,-36(fp)
 20106d0:	10800317 	ldw	r2,12(r2)
 20106d4:	e0bff815 	stw	r2,-32(fp)
 20106d8:	e0bff117 	ldw	r2,-60(fp)
 20106dc:	e0fff817 	ldw	r3,-32(fp)
 20106e0:	10c00315 	stw	r3,12(r2)
 20106e4:	e0bff117 	ldw	r2,-60(fp)
 20106e8:	e0fff717 	ldw	r3,-36(fp)
 20106ec:	10c00215 	stw	r3,8(r2)
 20106f0:	e0bff817 	ldw	r2,-32(fp)
 20106f4:	e0fff117 	ldw	r3,-60(fp)
 20106f8:	10c00215 	stw	r3,8(r2)
 20106fc:	e0bff817 	ldw	r2,-32(fp)
 2010700:	10c00217 	ldw	r3,8(r2)
 2010704:	e0bff717 	ldw	r2,-36(fp)
 2010708:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 201070c:	e0bff217 	ldw	r2,-56(fp)
 2010710:	1000010e 	bge	r2,zero,2010718 <_malloc_r+0x70c>
 2010714:	108000c4 	addi	r2,r2,3
 2010718:	1005d0ba 	srai	r2,r2,2
 201071c:	1007883a 	mov	r3,r2
 2010720:	00800044 	movi	r2,1
 2010724:	10c4983a 	sll	r2,r2,r3
 2010728:	e0bff515 	stw	r2,-44(fp)
 201072c:	008080b4 	movhi	r2,514
 2010730:	108c2004 	addi	r2,r2,12416
 2010734:	10c00117 	ldw	r3,4(r2)
 2010738:	e0bff517 	ldw	r2,-44(fp)
 201073c:	1880c636 	bltu	r3,r2,2010a58 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 2010740:	008080b4 	movhi	r2,514
 2010744:	108c2004 	addi	r2,r2,12416
 2010748:	10c00117 	ldw	r3,4(r2)
 201074c:	e0bff517 	ldw	r2,-44(fp)
 2010750:	1884703a 	and	r2,r3,r2
 2010754:	1000151e 	bne	r2,zero,20107ac <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 2010758:	e0fff217 	ldw	r3,-56(fp)
 201075c:	00bfff04 	movi	r2,-4
 2010760:	1884703a 	and	r2,r3,r2
 2010764:	10800104 	addi	r2,r2,4
 2010768:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 201076c:	e0bff517 	ldw	r2,-44(fp)
 2010770:	1085883a 	add	r2,r2,r2
 2010774:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 2010778:	00000606 	br	2010794 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 201077c:	e0bff217 	ldw	r2,-56(fp)
 2010780:	10800104 	addi	r2,r2,4
 2010784:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 2010788:	e0bff517 	ldw	r2,-44(fp)
 201078c:	1085883a 	add	r2,r2,r2
 2010790:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 2010794:	008080b4 	movhi	r2,514
 2010798:	108c2004 	addi	r2,r2,12416
 201079c:	10c00117 	ldw	r3,4(r2)
 20107a0:	e0bff517 	ldw	r2,-44(fp)
 20107a4:	1884703a 	and	r2,r3,r2
 20107a8:	103ff426 	beq	r2,zero,201077c <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 20107ac:	e0bff217 	ldw	r2,-56(fp)
 20107b0:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 20107b4:	e0bff217 	ldw	r2,-56(fp)
 20107b8:	10800044 	addi	r2,r2,1
 20107bc:	1085883a 	add	r2,r2,r2
 20107c0:	1085883a 	add	r2,r2,r2
 20107c4:	1087883a 	add	r3,r2,r2
 20107c8:	008080b4 	movhi	r2,514
 20107cc:	108c2004 	addi	r2,r2,12416
 20107d0:	1885883a 	add	r2,r3,r2
 20107d4:	10bffe04 	addi	r2,r2,-8
 20107d8:	e0bff315 	stw	r2,-52(fp)
 20107dc:	e0bff317 	ldw	r2,-52(fp)
 20107e0:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 20107e4:	e0bff317 	ldw	r2,-52(fp)
 20107e8:	10800317 	ldw	r2,12(r2)
 20107ec:	e0bff115 	stw	r2,-60(fp)
 20107f0:	00005e06 	br	201096c <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 20107f4:	e0bff117 	ldw	r2,-60(fp)
 20107f8:	10c00117 	ldw	r3,4(r2)
 20107fc:	00bfff04 	movi	r2,-4
 2010800:	1884703a 	and	r2,r3,r2
 2010804:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 2010808:	e0fffb17 	ldw	r3,-20(fp)
 201080c:	e0bffa17 	ldw	r2,-24(fp)
 2010810:	1885c83a 	sub	r2,r3,r2
 2010814:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 2010818:	e0bff417 	ldw	r2,-48(fp)
 201081c:	10800410 	cmplti	r2,r2,16
 2010820:	1000331e 	bne	r2,zero,20108f0 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 2010824:	e0fff117 	ldw	r3,-60(fp)
 2010828:	e0bffa17 	ldw	r2,-24(fp)
 201082c:	1885883a 	add	r2,r3,r2
 2010830:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 2010834:	e0bffa17 	ldw	r2,-24(fp)
 2010838:	10c00054 	ori	r3,r2,1
 201083c:	e0bff117 	ldw	r2,-60(fp)
 2010840:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 2010844:	e0bff117 	ldw	r2,-60(fp)
 2010848:	10800317 	ldw	r2,12(r2)
 201084c:	e0bff815 	stw	r2,-32(fp)
 2010850:	e0bff117 	ldw	r2,-60(fp)
 2010854:	10800217 	ldw	r2,8(r2)
 2010858:	e0bff715 	stw	r2,-36(fp)
 201085c:	e0bff717 	ldw	r2,-36(fp)
 2010860:	e0fff817 	ldw	r3,-32(fp)
 2010864:	10c00315 	stw	r3,12(r2)
 2010868:	e0bff817 	ldw	r2,-32(fp)
 201086c:	e0fff717 	ldw	r3,-36(fp)
 2010870:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 2010874:	00c080b4 	movhi	r3,514
 2010878:	18cc2204 	addi	r3,r3,12424
 201087c:	008080b4 	movhi	r2,514
 2010880:	108c2204 	addi	r2,r2,12424
 2010884:	e13ffc17 	ldw	r4,-16(fp)
 2010888:	11000315 	stw	r4,12(r2)
 201088c:	10800317 	ldw	r2,12(r2)
 2010890:	18800215 	stw	r2,8(r3)
 2010894:	008080b4 	movhi	r2,514
 2010898:	108c2204 	addi	r2,r2,12424
 201089c:	e0fffc17 	ldw	r3,-16(fp)
 20108a0:	18800315 	stw	r2,12(r3)
 20108a4:	e0bffc17 	ldw	r2,-16(fp)
 20108a8:	10c00317 	ldw	r3,12(r2)
 20108ac:	e0bffc17 	ldw	r2,-16(fp)
 20108b0:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 20108b4:	e0bff417 	ldw	r2,-48(fp)
 20108b8:	10800054 	ori	r2,r2,1
 20108bc:	1007883a 	mov	r3,r2
 20108c0:	e0bffc17 	ldw	r2,-16(fp)
 20108c4:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 20108c8:	e0bff417 	ldw	r2,-48(fp)
 20108cc:	e0fffc17 	ldw	r3,-16(fp)
 20108d0:	1885883a 	add	r2,r3,r2
 20108d4:	e0fff417 	ldw	r3,-48(fp)
 20108d8:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 20108dc:	e13ffe17 	ldw	r4,-8(fp)
 20108e0:	20173900 	call	2017390 <__malloc_unlock>
            return chunk2mem(victim);
 20108e4:	e0bff117 	ldw	r2,-60(fp)
 20108e8:	10800204 	addi	r2,r2,8
 20108ec:	0000a106 	br	2010b74 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 20108f0:	e0bff417 	ldw	r2,-48(fp)
 20108f4:	10001a16 	blt	r2,zero,2010960 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 20108f8:	e0fff117 	ldw	r3,-60(fp)
 20108fc:	e0bffb17 	ldw	r2,-20(fp)
 2010900:	1885883a 	add	r2,r3,r2
 2010904:	e13ff117 	ldw	r4,-60(fp)
 2010908:	e0fffb17 	ldw	r3,-20(fp)
 201090c:	20c7883a 	add	r3,r4,r3
 2010910:	18c00117 	ldw	r3,4(r3)
 2010914:	18c00054 	ori	r3,r3,1
 2010918:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 201091c:	e0bff117 	ldw	r2,-60(fp)
 2010920:	10800317 	ldw	r2,12(r2)
 2010924:	e0bff815 	stw	r2,-32(fp)
 2010928:	e0bff117 	ldw	r2,-60(fp)
 201092c:	10800217 	ldw	r2,8(r2)
 2010930:	e0bff715 	stw	r2,-36(fp)
 2010934:	e0bff717 	ldw	r2,-36(fp)
 2010938:	e0fff817 	ldw	r3,-32(fp)
 201093c:	10c00315 	stw	r3,12(r2)
 2010940:	e0bff817 	ldw	r2,-32(fp)
 2010944:	e0fff717 	ldw	r3,-36(fp)
 2010948:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 201094c:	e13ffe17 	ldw	r4,-8(fp)
 2010950:	20173900 	call	2017390 <__malloc_unlock>
            return chunk2mem(victim);
 2010954:	e0bff117 	ldw	r2,-60(fp)
 2010958:	10800204 	addi	r2,r2,8
 201095c:	00008506 	br	2010b74 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 2010960:	e0bff117 	ldw	r2,-60(fp)
 2010964:	10800317 	ldw	r2,12(r2)
 2010968:	e0bff115 	stw	r2,-60(fp)
 201096c:	e0fff117 	ldw	r3,-60(fp)
 2010970:	e0bff317 	ldw	r2,-52(fp)
 2010974:	18bf9f1e 	bne	r3,r2,20107f4 <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 2010978:	e0bff317 	ldw	r2,-52(fp)
 201097c:	10800204 	addi	r2,r2,8
 2010980:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 2010984:	e0bff217 	ldw	r2,-56(fp)
 2010988:	10800044 	addi	r2,r2,1
 201098c:	e0bff215 	stw	r2,-56(fp)
 2010990:	e0bff217 	ldw	r2,-56(fp)
 2010994:	108000cc 	andi	r2,r2,3
 2010998:	103f921e 	bne	r2,zero,20107e4 <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 201099c:	e0bff617 	ldw	r2,-40(fp)
 20109a0:	108000cc 	andi	r2,r2,3
 20109a4:	10000a1e 	bne	r2,zero,20109d0 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 20109a8:	008080b4 	movhi	r2,514
 20109ac:	108c2004 	addi	r2,r2,12416
 20109b0:	00c080b4 	movhi	r3,514
 20109b4:	18cc2004 	addi	r3,r3,12416
 20109b8:	19000117 	ldw	r4,4(r3)
 20109bc:	e0fff517 	ldw	r3,-44(fp)
 20109c0:	00c6303a 	nor	r3,zero,r3
 20109c4:	20c6703a 	and	r3,r4,r3
 20109c8:	10c00115 	stw	r3,4(r2)
          break;
 20109cc:	00000a06 	br	20109f8 <_malloc_r+0x9ec>
        }
        --startidx;
 20109d0:	e0bff617 	ldw	r2,-40(fp)
 20109d4:	10bfffc4 	addi	r2,r2,-1
 20109d8:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 20109dc:	e0bff917 	ldw	r2,-28(fp)
 20109e0:	10bffe04 	addi	r2,r2,-8
 20109e4:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 20109e8:	e0bff917 	ldw	r2,-28(fp)
 20109ec:	10c00217 	ldw	r3,8(r2)
 20109f0:	e0bff917 	ldw	r2,-28(fp)
 20109f4:	18bfe926 	beq	r3,r2,201099c <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 20109f8:	e0bff517 	ldw	r2,-44(fp)
 20109fc:	1085883a 	add	r2,r2,r2
 2010a00:	e0bff515 	stw	r2,-44(fp)
 2010a04:	008080b4 	movhi	r2,514
 2010a08:	108c2004 	addi	r2,r2,12416
 2010a0c:	10c00117 	ldw	r3,4(r2)
 2010a10:	e0bff517 	ldw	r2,-44(fp)
 2010a14:	18801036 	bltu	r3,r2,2010a58 <_malloc_r+0xa4c>
 2010a18:	e0bff517 	ldw	r2,-44(fp)
 2010a1c:	10000e26 	beq	r2,zero,2010a58 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 2010a20:	00000606 	br	2010a3c <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 2010a24:	e0bff217 	ldw	r2,-56(fp)
 2010a28:	10800104 	addi	r2,r2,4
 2010a2c:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 2010a30:	e0bff517 	ldw	r2,-44(fp)
 2010a34:	1085883a 	add	r2,r2,r2
 2010a38:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 2010a3c:	008080b4 	movhi	r2,514
 2010a40:	108c2004 	addi	r2,r2,12416
 2010a44:	10c00117 	ldw	r3,4(r2)
 2010a48:	e0bff517 	ldw	r2,-44(fp)
 2010a4c:	1884703a 	and	r2,r3,r2
 2010a50:	103ff426 	beq	r2,zero,2010a24 <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 2010a54:	003f5506 	br	20107ac <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 2010a58:	008080b4 	movhi	r2,514
 2010a5c:	108c2004 	addi	r2,r2,12416
 2010a60:	10800217 	ldw	r2,8(r2)
 2010a64:	10c00117 	ldw	r3,4(r2)
 2010a68:	00bfff04 	movi	r2,-4
 2010a6c:	1886703a 	and	r3,r3,r2
 2010a70:	e0bffa17 	ldw	r2,-24(fp)
 2010a74:	1885c83a 	sub	r2,r3,r2
 2010a78:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 2010a7c:	008080b4 	movhi	r2,514
 2010a80:	108c2004 	addi	r2,r2,12416
 2010a84:	10800217 	ldw	r2,8(r2)
 2010a88:	10c00117 	ldw	r3,4(r2)
 2010a8c:	00bfff04 	movi	r2,-4
 2010a90:	1886703a 	and	r3,r3,r2
 2010a94:	e0bffa17 	ldw	r2,-24(fp)
 2010a98:	18800336 	bltu	r3,r2,2010aa8 <_malloc_r+0xa9c>
 2010a9c:	e0bff417 	ldw	r2,-48(fp)
 2010aa0:	10800408 	cmpgei	r2,r2,16
 2010aa4:	10001b1e 	bne	r2,zero,2010b14 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 2010aa8:	e17ffa17 	ldw	r5,-24(fp)
 2010aac:	e13ffe17 	ldw	r4,-8(fp)
 2010ab0:	200fc580 	call	200fc58 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 2010ab4:	008080b4 	movhi	r2,514
 2010ab8:	108c2004 	addi	r2,r2,12416
 2010abc:	10800217 	ldw	r2,8(r2)
 2010ac0:	10c00117 	ldw	r3,4(r2)
 2010ac4:	00bfff04 	movi	r2,-4
 2010ac8:	1886703a 	and	r3,r3,r2
 2010acc:	e0bffa17 	ldw	r2,-24(fp)
 2010ad0:	1885c83a 	sub	r2,r3,r2
 2010ad4:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 2010ad8:	008080b4 	movhi	r2,514
 2010adc:	108c2004 	addi	r2,r2,12416
 2010ae0:	10800217 	ldw	r2,8(r2)
 2010ae4:	10c00117 	ldw	r3,4(r2)
 2010ae8:	00bfff04 	movi	r2,-4
 2010aec:	1886703a 	and	r3,r3,r2
 2010af0:	e0bffa17 	ldw	r2,-24(fp)
 2010af4:	18800336 	bltu	r3,r2,2010b04 <_malloc_r+0xaf8>
 2010af8:	e0bff417 	ldw	r2,-48(fp)
 2010afc:	10800408 	cmpgei	r2,r2,16
 2010b00:	1000041e 	bne	r2,zero,2010b14 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 2010b04:	e13ffe17 	ldw	r4,-8(fp)
 2010b08:	20173900 	call	2017390 <__malloc_unlock>
      return 0; /* propagate failure */
 2010b0c:	0005883a 	mov	r2,zero
 2010b10:	00001806 	br	2010b74 <_malloc_r+0xb68>
    }
  }

  victim = top;
 2010b14:	008080b4 	movhi	r2,514
 2010b18:	108c2004 	addi	r2,r2,12416
 2010b1c:	10800217 	ldw	r2,8(r2)
 2010b20:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 2010b24:	e0bffa17 	ldw	r2,-24(fp)
 2010b28:	10c00054 	ori	r3,r2,1
 2010b2c:	e0bff117 	ldw	r2,-60(fp)
 2010b30:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 2010b34:	008080b4 	movhi	r2,514
 2010b38:	108c2004 	addi	r2,r2,12416
 2010b3c:	e13ff117 	ldw	r4,-60(fp)
 2010b40:	e0fffa17 	ldw	r3,-24(fp)
 2010b44:	20c7883a 	add	r3,r4,r3
 2010b48:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 2010b4c:	008080b4 	movhi	r2,514
 2010b50:	108c2004 	addi	r2,r2,12416
 2010b54:	10800217 	ldw	r2,8(r2)
 2010b58:	e0fff417 	ldw	r3,-48(fp)
 2010b5c:	18c00054 	ori	r3,r3,1
 2010b60:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 2010b64:	e13ffe17 	ldw	r4,-8(fp)
 2010b68:	20173900 	call	2017390 <__malloc_unlock>
  return chunk2mem(victim);
 2010b6c:	e0bff117 	ldw	r2,-60(fp)
 2010b70:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 2010b74:	e037883a 	mov	sp,fp
 2010b78:	dfc00117 	ldw	ra,4(sp)
 2010b7c:	df000017 	ldw	fp,0(sp)
 2010b80:	dec00204 	addi	sp,sp,8
 2010b84:	f800283a 	ret

02010b88 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 2010b88:	defff704 	addi	sp,sp,-36
 2010b8c:	df000815 	stw	fp,32(sp)
 2010b90:	df000804 	addi	fp,sp,32
 2010b94:	e13ffd15 	stw	r4,-12(fp)
 2010b98:	e17ffe15 	stw	r5,-8(fp)
 2010b9c:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 2010ba0:	e0bffd17 	ldw	r2,-12(fp)
 2010ba4:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 2010ba8:	e0bffe17 	ldw	r2,-8(fp)
 2010bac:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 2010bb0:	00001006 	br	2010bf4 <memchr+0x6c>
    {
      if (!length--)
 2010bb4:	e0bfff17 	ldw	r2,-4(fp)
 2010bb8:	10ffffc4 	addi	r3,r2,-1
 2010bbc:	e0ffff15 	stw	r3,-4(fp)
 2010bc0:	1000021e 	bne	r2,zero,2010bcc <memchr+0x44>
        return NULL;
 2010bc4:	0005883a 	mov	r2,zero
 2010bc8:	00005a06 	br	2010d34 <memchr+0x1ac>
      if (*src == d)
 2010bcc:	e0bff817 	ldw	r2,-32(fp)
 2010bd0:	10800003 	ldbu	r2,0(r2)
 2010bd4:	10c03fcc 	andi	r3,r2,255
 2010bd8:	e0bffc03 	ldbu	r2,-16(fp)
 2010bdc:	1880021e 	bne	r3,r2,2010be8 <memchr+0x60>
        return (void *) src;
 2010be0:	e0bff817 	ldw	r2,-32(fp)
 2010be4:	00005306 	br	2010d34 <memchr+0x1ac>
      src++;
 2010be8:	e0bff817 	ldw	r2,-32(fp)
 2010bec:	10800044 	addi	r2,r2,1
 2010bf0:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 2010bf4:	e0bff817 	ldw	r2,-32(fp)
 2010bf8:	108000cc 	andi	r2,r2,3
 2010bfc:	103fed1e 	bne	r2,zero,2010bb4 <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 2010c00:	e0bfff17 	ldw	r2,-4(fp)
 2010c04:	10800130 	cmpltui	r2,r2,4
 2010c08:	1000451e 	bne	r2,zero,2010d20 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 2010c0c:	e0bff817 	ldw	r2,-32(fp)
 2010c10:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 2010c14:	e0bffc03 	ldbu	r2,-16(fp)
 2010c18:	1006923a 	slli	r3,r2,8
 2010c1c:	e0bffc03 	ldbu	r2,-16(fp)
 2010c20:	1884b03a 	or	r2,r3,r2
 2010c24:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 2010c28:	e0bffa17 	ldw	r2,-24(fp)
 2010c2c:	1004943a 	slli	r2,r2,16
 2010c30:	e0fffa17 	ldw	r3,-24(fp)
 2010c34:	1884b03a 	or	r2,r3,r2
 2010c38:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2010c3c:	00800804 	movi	r2,32
 2010c40:	e0bffb15 	stw	r2,-20(fp)
 2010c44:	00000906 	br	2010c6c <memchr+0xe4>
        mask = (mask << i) | mask;
 2010c48:	e0fffa17 	ldw	r3,-24(fp)
 2010c4c:	e0bffb17 	ldw	r2,-20(fp)
 2010c50:	1884983a 	sll	r2,r3,r2
 2010c54:	e0fffa17 	ldw	r3,-24(fp)
 2010c58:	1884b03a 	or	r2,r3,r2
 2010c5c:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2010c60:	e0bffb17 	ldw	r2,-20(fp)
 2010c64:	1085883a 	add	r2,r2,r2
 2010c68:	e0bffb15 	stw	r2,-20(fp)
 2010c6c:	e0bffb17 	ldw	r2,-20(fp)
 2010c70:	10800830 	cmpltui	r2,r2,32
 2010c74:	103ff41e 	bne	r2,zero,2010c48 <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 2010c78:	00001706 	br	2010cd8 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 2010c7c:	e0bff917 	ldw	r2,-28(fp)
 2010c80:	10c00017 	ldw	r3,0(r2)
 2010c84:	e0bffa17 	ldw	r2,-24(fp)
 2010c88:	1886f03a 	xor	r3,r3,r2
 2010c8c:	00bfbff4 	movhi	r2,65279
 2010c90:	10bfbfc4 	addi	r2,r2,-257
 2010c94:	1887883a 	add	r3,r3,r2
 2010c98:	e0bff917 	ldw	r2,-28(fp)
 2010c9c:	11000017 	ldw	r4,0(r2)
 2010ca0:	e0bffa17 	ldw	r2,-24(fp)
 2010ca4:	2084f03a 	xor	r2,r4,r2
 2010ca8:	0084303a 	nor	r2,zero,r2
 2010cac:	1886703a 	and	r3,r3,r2
 2010cb0:	00a02074 	movhi	r2,32897
 2010cb4:	10a02004 	addi	r2,r2,-32640
 2010cb8:	1884703a 	and	r2,r3,r2
 2010cbc:	10000a1e 	bne	r2,zero,2010ce8 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 2010cc0:	e0bfff17 	ldw	r2,-4(fp)
 2010cc4:	10bfff04 	addi	r2,r2,-4
 2010cc8:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 2010ccc:	e0bff917 	ldw	r2,-28(fp)
 2010cd0:	10800104 	addi	r2,r2,4
 2010cd4:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 2010cd8:	e0bfff17 	ldw	r2,-4(fp)
 2010cdc:	10800128 	cmpgeui	r2,r2,4
 2010ce0:	103fe61e 	bne	r2,zero,2010c7c <memchr+0xf4>
 2010ce4:	00000106 	br	2010cec <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 2010ce8:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 2010cec:	e0bff917 	ldw	r2,-28(fp)
 2010cf0:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 2010cf4:	00000a06 	br	2010d20 <memchr+0x198>
    {
      if (*src == d)
 2010cf8:	e0bff817 	ldw	r2,-32(fp)
 2010cfc:	10800003 	ldbu	r2,0(r2)
 2010d00:	10c03fcc 	andi	r3,r2,255
 2010d04:	e0bffc03 	ldbu	r2,-16(fp)
 2010d08:	1880021e 	bne	r3,r2,2010d14 <memchr+0x18c>
        return (void *) src;
 2010d0c:	e0bff817 	ldw	r2,-32(fp)
 2010d10:	00000806 	br	2010d34 <memchr+0x1ac>
      src++;
 2010d14:	e0bff817 	ldw	r2,-32(fp)
 2010d18:	10800044 	addi	r2,r2,1
 2010d1c:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 2010d20:	e0bfff17 	ldw	r2,-4(fp)
 2010d24:	10ffffc4 	addi	r3,r2,-1
 2010d28:	e0ffff15 	stw	r3,-4(fp)
 2010d2c:	103ff21e 	bne	r2,zero,2010cf8 <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 2010d30:	0005883a 	mov	r2,zero
}
 2010d34:	e037883a 	mov	sp,fp
 2010d38:	df000017 	ldw	fp,0(sp)
 2010d3c:	dec00104 	addi	sp,sp,4
 2010d40:	f800283a 	ret

02010d44 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 2010d44:	defff804 	addi	sp,sp,-32
 2010d48:	df000715 	stw	fp,28(sp)
 2010d4c:	df000704 	addi	fp,sp,28
 2010d50:	e13ffd15 	stw	r4,-12(fp)
 2010d54:	e17ffe15 	stw	r5,-8(fp)
 2010d58:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 2010d5c:	e0bffd17 	ldw	r2,-12(fp)
 2010d60:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 2010d64:	e0bffe17 	ldw	r2,-8(fp)
 2010d68:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 2010d6c:	e0fffa17 	ldw	r3,-24(fp)
 2010d70:	e0bff917 	ldw	r2,-28(fp)
 2010d74:	18801d2e 	bgeu	r3,r2,2010dec <memmove+0xa8>
 2010d78:	e0fffa17 	ldw	r3,-24(fp)
 2010d7c:	e0bfff17 	ldw	r2,-4(fp)
 2010d80:	1885883a 	add	r2,r3,r2
 2010d84:	e0fff917 	ldw	r3,-28(fp)
 2010d88:	1880182e 	bgeu	r3,r2,2010dec <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 2010d8c:	e0fffa17 	ldw	r3,-24(fp)
 2010d90:	e0bfff17 	ldw	r2,-4(fp)
 2010d94:	1885883a 	add	r2,r3,r2
 2010d98:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 2010d9c:	e0fff917 	ldw	r3,-28(fp)
 2010da0:	e0bfff17 	ldw	r2,-4(fp)
 2010da4:	1885883a 	add	r2,r3,r2
 2010da8:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 2010dac:	00000a06 	br	2010dd8 <memmove+0x94>
	{
	  *--dst = *--src;
 2010db0:	e0bff917 	ldw	r2,-28(fp)
 2010db4:	10bfffc4 	addi	r2,r2,-1
 2010db8:	e0bff915 	stw	r2,-28(fp)
 2010dbc:	e0bffa17 	ldw	r2,-24(fp)
 2010dc0:	10bfffc4 	addi	r2,r2,-1
 2010dc4:	e0bffa15 	stw	r2,-24(fp)
 2010dc8:	e0bffa17 	ldw	r2,-24(fp)
 2010dcc:	10c00003 	ldbu	r3,0(r2)
 2010dd0:	e0bff917 	ldw	r2,-28(fp)
 2010dd4:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 2010dd8:	e0bfff17 	ldw	r2,-4(fp)
 2010ddc:	10ffffc4 	addi	r3,r2,-1
 2010de0:	e0ffff15 	stw	r3,-4(fp)
 2010de4:	103ff21e 	bne	r2,zero,2010db0 <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 2010de8:	00005306 	br	2010f38 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 2010dec:	e0bfff17 	ldw	r2,-4(fp)
 2010df0:	10800430 	cmpltui	r2,r2,16
 2010df4:	10004c1e 	bne	r2,zero,2010f28 <memmove+0x1e4>
 2010df8:	e0fffa17 	ldw	r3,-24(fp)
 2010dfc:	e0bff917 	ldw	r2,-28(fp)
 2010e00:	1884b03a 	or	r2,r3,r2
 2010e04:	108000cc 	andi	r2,r2,3
 2010e08:	1000471e 	bne	r2,zero,2010f28 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 2010e0c:	e0bff917 	ldw	r2,-28(fp)
 2010e10:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 2010e14:	e0bffa17 	ldw	r2,-24(fp)
 2010e18:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 2010e1c:	00002306 	br	2010eac <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 2010e20:	e0bffb17 	ldw	r2,-20(fp)
 2010e24:	10c00104 	addi	r3,r2,4
 2010e28:	e0fffb15 	stw	r3,-20(fp)
 2010e2c:	e0fffc17 	ldw	r3,-16(fp)
 2010e30:	19000104 	addi	r4,r3,4
 2010e34:	e13ffc15 	stw	r4,-16(fp)
 2010e38:	18c00017 	ldw	r3,0(r3)
 2010e3c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2010e40:	e0bffb17 	ldw	r2,-20(fp)
 2010e44:	10c00104 	addi	r3,r2,4
 2010e48:	e0fffb15 	stw	r3,-20(fp)
 2010e4c:	e0fffc17 	ldw	r3,-16(fp)
 2010e50:	19000104 	addi	r4,r3,4
 2010e54:	e13ffc15 	stw	r4,-16(fp)
 2010e58:	18c00017 	ldw	r3,0(r3)
 2010e5c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2010e60:	e0bffb17 	ldw	r2,-20(fp)
 2010e64:	10c00104 	addi	r3,r2,4
 2010e68:	e0fffb15 	stw	r3,-20(fp)
 2010e6c:	e0fffc17 	ldw	r3,-16(fp)
 2010e70:	19000104 	addi	r4,r3,4
 2010e74:	e13ffc15 	stw	r4,-16(fp)
 2010e78:	18c00017 	ldw	r3,0(r3)
 2010e7c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 2010e80:	e0bffb17 	ldw	r2,-20(fp)
 2010e84:	10c00104 	addi	r3,r2,4
 2010e88:	e0fffb15 	stw	r3,-20(fp)
 2010e8c:	e0fffc17 	ldw	r3,-16(fp)
 2010e90:	19000104 	addi	r4,r3,4
 2010e94:	e13ffc15 	stw	r4,-16(fp)
 2010e98:	18c00017 	ldw	r3,0(r3)
 2010e9c:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 2010ea0:	e0bfff17 	ldw	r2,-4(fp)
 2010ea4:	10bffc04 	addi	r2,r2,-16
 2010ea8:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 2010eac:	e0bfff17 	ldw	r2,-4(fp)
 2010eb0:	10800428 	cmpgeui	r2,r2,16
 2010eb4:	103fda1e 	bne	r2,zero,2010e20 <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 2010eb8:	00000b06 	br	2010ee8 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 2010ebc:	e0bffb17 	ldw	r2,-20(fp)
 2010ec0:	10c00104 	addi	r3,r2,4
 2010ec4:	e0fffb15 	stw	r3,-20(fp)
 2010ec8:	e0fffc17 	ldw	r3,-16(fp)
 2010ecc:	19000104 	addi	r4,r3,4
 2010ed0:	e13ffc15 	stw	r4,-16(fp)
 2010ed4:	18c00017 	ldw	r3,0(r3)
 2010ed8:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 2010edc:	e0bfff17 	ldw	r2,-4(fp)
 2010ee0:	10bfff04 	addi	r2,r2,-4
 2010ee4:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 2010ee8:	e0bfff17 	ldw	r2,-4(fp)
 2010eec:	10800128 	cmpgeui	r2,r2,4
 2010ef0:	103ff21e 	bne	r2,zero,2010ebc <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 2010ef4:	e0bffb17 	ldw	r2,-20(fp)
 2010ef8:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 2010efc:	e0bffc17 	ldw	r2,-16(fp)
 2010f00:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 2010f04:	00000806 	br	2010f28 <memmove+0x1e4>
        {
          *dst++ = *src++;
 2010f08:	e0bff917 	ldw	r2,-28(fp)
 2010f0c:	10c00044 	addi	r3,r2,1
 2010f10:	e0fff915 	stw	r3,-28(fp)
 2010f14:	e0fffa17 	ldw	r3,-24(fp)
 2010f18:	19000044 	addi	r4,r3,1
 2010f1c:	e13ffa15 	stw	r4,-24(fp)
 2010f20:	18c00003 	ldbu	r3,0(r3)
 2010f24:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 2010f28:	e0bfff17 	ldw	r2,-4(fp)
 2010f2c:	10ffffc4 	addi	r3,r2,-1
 2010f30:	e0ffff15 	stw	r3,-4(fp)
 2010f34:	103ff41e 	bne	r2,zero,2010f08 <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 2010f38:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2010f3c:	e037883a 	mov	sp,fp
 2010f40:	df000017 	ldw	fp,0(sp)
 2010f44:	dec00104 	addi	sp,sp,4
 2010f48:	f800283a 	ret

02010f4c <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 2010f4c:	defffa04 	addi	sp,sp,-24
 2010f50:	dfc00515 	stw	ra,20(sp)
 2010f54:	df000415 	stw	fp,16(sp)
 2010f58:	df000404 	addi	fp,sp,16
 2010f5c:	e13ffe15 	stw	r4,-8(fp)
 2010f60:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 2010f64:	e0bffe17 	ldw	r2,-8(fp)
 2010f68:	10801317 	ldw	r2,76(r2)
 2010f6c:	10000c1e 	bne	r2,zero,2010fa0 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 2010f70:	01800844 	movi	r6,33
 2010f74:	01400104 	movi	r5,4
 2010f78:	e13ffe17 	ldw	r4,-8(fp)
 2010f7c:	2014fd80 	call	2014fd8 <_calloc_r>
 2010f80:	1007883a 	mov	r3,r2
 2010f84:	e0bffe17 	ldw	r2,-8(fp)
 2010f88:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 2010f8c:	e0bffe17 	ldw	r2,-8(fp)
 2010f90:	10801317 	ldw	r2,76(r2)
 2010f94:	1000021e 	bne	r2,zero,2010fa0 <_Balloc+0x54>
	{
	  return NULL;
 2010f98:	0005883a 	mov	r2,zero
 2010f9c:	00003206 	br	2011068 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 2010fa0:	e0bffe17 	ldw	r2,-8(fp)
 2010fa4:	10c01317 	ldw	r3,76(r2)
 2010fa8:	e0bfff17 	ldw	r2,-4(fp)
 2010fac:	1085883a 	add	r2,r2,r2
 2010fb0:	1085883a 	add	r2,r2,r2
 2010fb4:	1885883a 	add	r2,r3,r2
 2010fb8:	10800017 	ldw	r2,0(r2)
 2010fbc:	e0bffc15 	stw	r2,-16(fp)
 2010fc0:	e0bffc17 	ldw	r2,-16(fp)
 2010fc4:	10000a26 	beq	r2,zero,2010ff0 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 2010fc8:	e0bffe17 	ldw	r2,-8(fp)
 2010fcc:	10c01317 	ldw	r3,76(r2)
 2010fd0:	e0bfff17 	ldw	r2,-4(fp)
 2010fd4:	1085883a 	add	r2,r2,r2
 2010fd8:	1085883a 	add	r2,r2,r2
 2010fdc:	1885883a 	add	r2,r3,r2
 2010fe0:	e0fffc17 	ldw	r3,-16(fp)
 2010fe4:	18c00017 	ldw	r3,0(r3)
 2010fe8:	10c00015 	stw	r3,0(r2)
 2010fec:	00001706 	br	201104c <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 2010ff0:	00c00044 	movi	r3,1
 2010ff4:	e0bfff17 	ldw	r2,-4(fp)
 2010ff8:	1884983a 	sll	r2,r3,r2
 2010ffc:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 2011000:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 2011004:	10800144 	addi	r2,r2,5
 2011008:	1085883a 	add	r2,r2,r2
 201100c:	1085883a 	add	r2,r2,r2
 2011010:	100d883a 	mov	r6,r2
 2011014:	01400044 	movi	r5,1
 2011018:	e13ffe17 	ldw	r4,-8(fp)
 201101c:	2014fd80 	call	2014fd8 <_calloc_r>
 2011020:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 2011024:	e0bffc17 	ldw	r2,-16(fp)
 2011028:	1000021e 	bne	r2,zero,2011034 <_Balloc+0xe8>
 201102c:	0005883a 	mov	r2,zero
 2011030:	00000d06 	br	2011068 <_Balloc+0x11c>
      rv->_k = k;
 2011034:	e0bffc17 	ldw	r2,-16(fp)
 2011038:	e0ffff17 	ldw	r3,-4(fp)
 201103c:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 2011040:	e0bffc17 	ldw	r2,-16(fp)
 2011044:	e0fffd17 	ldw	r3,-12(fp)
 2011048:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 201104c:	e0bffc17 	ldw	r2,-16(fp)
 2011050:	10000415 	stw	zero,16(r2)
 2011054:	e0bffc17 	ldw	r2,-16(fp)
 2011058:	10c00417 	ldw	r3,16(r2)
 201105c:	e0bffc17 	ldw	r2,-16(fp)
 2011060:	10c00315 	stw	r3,12(r2)
  return rv;
 2011064:	e0bffc17 	ldw	r2,-16(fp)
}
 2011068:	e037883a 	mov	sp,fp
 201106c:	dfc00117 	ldw	ra,4(sp)
 2011070:	df000017 	ldw	fp,0(sp)
 2011074:	dec00204 	addi	sp,sp,8
 2011078:	f800283a 	ret

0201107c <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 201107c:	defffd04 	addi	sp,sp,-12
 2011080:	df000215 	stw	fp,8(sp)
 2011084:	df000204 	addi	fp,sp,8
 2011088:	e13ffe15 	stw	r4,-8(fp)
 201108c:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 2011090:	e0bfff17 	ldw	r2,-4(fp)
 2011094:	10001326 	beq	r2,zero,20110e4 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 2011098:	e0bffe17 	ldw	r2,-8(fp)
 201109c:	10c01317 	ldw	r3,76(r2)
 20110a0:	e0bfff17 	ldw	r2,-4(fp)
 20110a4:	10800117 	ldw	r2,4(r2)
 20110a8:	1085883a 	add	r2,r2,r2
 20110ac:	1085883a 	add	r2,r2,r2
 20110b0:	1885883a 	add	r2,r3,r2
 20110b4:	10c00017 	ldw	r3,0(r2)
 20110b8:	e0bfff17 	ldw	r2,-4(fp)
 20110bc:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 20110c0:	e0bffe17 	ldw	r2,-8(fp)
 20110c4:	10c01317 	ldw	r3,76(r2)
 20110c8:	e0bfff17 	ldw	r2,-4(fp)
 20110cc:	10800117 	ldw	r2,4(r2)
 20110d0:	1085883a 	add	r2,r2,r2
 20110d4:	1085883a 	add	r2,r2,r2
 20110d8:	1885883a 	add	r2,r3,r2
 20110dc:	e0ffff17 	ldw	r3,-4(fp)
 20110e0:	10c00015 	stw	r3,0(r2)
    }
}
 20110e4:	0001883a 	nop
 20110e8:	e037883a 	mov	sp,fp
 20110ec:	df000017 	ldw	fp,0(sp)
 20110f0:	dec00104 	addi	sp,sp,4
 20110f4:	f800283a 	ret

020110f8 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 20110f8:	defff304 	addi	sp,sp,-52
 20110fc:	dfc00c15 	stw	ra,48(sp)
 2011100:	df000b15 	stw	fp,44(sp)
 2011104:	df000b04 	addi	fp,sp,44
 2011108:	e13ffc15 	stw	r4,-16(fp)
 201110c:	e17ffd15 	stw	r5,-12(fp)
 2011110:	e1bffe15 	stw	r6,-8(fp)
 2011114:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 2011118:	e0bffd17 	ldw	r2,-12(fp)
 201111c:	10800417 	ldw	r2,16(r2)
 2011120:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 2011124:	e0bffd17 	ldw	r2,-12(fp)
 2011128:	10800504 	addi	r2,r2,20
 201112c:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 2011130:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 2011134:	e0bff617 	ldw	r2,-40(fp)
 2011138:	10800017 	ldw	r2,0(r2)
 201113c:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 2011140:	e0bff817 	ldw	r2,-32(fp)
 2011144:	10ffffcc 	andi	r3,r2,65535
 2011148:	e0bffe17 	ldw	r2,-8(fp)
 201114c:	1887383a 	mul	r3,r3,r2
 2011150:	e0bfff17 	ldw	r2,-4(fp)
 2011154:	1885883a 	add	r2,r3,r2
 2011158:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 201115c:	e0bff817 	ldw	r2,-32(fp)
 2011160:	1006d43a 	srli	r3,r2,16
 2011164:	e0bffe17 	ldw	r2,-8(fp)
 2011168:	1887383a 	mul	r3,r3,r2
 201116c:	e0bff917 	ldw	r2,-28(fp)
 2011170:	1004d43a 	srli	r2,r2,16
 2011174:	1885883a 	add	r2,r3,r2
 2011178:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 201117c:	e0bffa17 	ldw	r2,-24(fp)
 2011180:	1004d43a 	srli	r2,r2,16
 2011184:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 2011188:	e0bff617 	ldw	r2,-40(fp)
 201118c:	10c00104 	addi	r3,r2,4
 2011190:	e0fff615 	stw	r3,-40(fp)
 2011194:	e0fffa17 	ldw	r3,-24(fp)
 2011198:	1808943a 	slli	r4,r3,16
 201119c:	e0fff917 	ldw	r3,-28(fp)
 20111a0:	18ffffcc 	andi	r3,r3,65535
 20111a4:	20c7883a 	add	r3,r4,r3
 20111a8:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 20111ac:	e0bff517 	ldw	r2,-44(fp)
 20111b0:	10800044 	addi	r2,r2,1
 20111b4:	e0bff515 	stw	r2,-44(fp)
 20111b8:	e0fff517 	ldw	r3,-44(fp)
 20111bc:	e0bff717 	ldw	r2,-36(fp)
 20111c0:	18bfdc16 	blt	r3,r2,2011134 <__multadd+0x3c>
  if (a)
 20111c4:	e0bfff17 	ldw	r2,-4(fp)
 20111c8:	10002a26 	beq	r2,zero,2011274 <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 20111cc:	e0bffd17 	ldw	r2,-12(fp)
 20111d0:	10800217 	ldw	r2,8(r2)
 20111d4:	e0fff717 	ldw	r3,-36(fp)
 20111d8:	18801916 	blt	r3,r2,2011240 <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 20111dc:	e0bffd17 	ldw	r2,-12(fp)
 20111e0:	10800117 	ldw	r2,4(r2)
 20111e4:	10800044 	addi	r2,r2,1
 20111e8:	100b883a 	mov	r5,r2
 20111ec:	e13ffc17 	ldw	r4,-16(fp)
 20111f0:	2010f4c0 	call	2010f4c <_Balloc>
 20111f4:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 20111f8:	e0bffb17 	ldw	r2,-20(fp)
 20111fc:	10c00304 	addi	r3,r2,12
 2011200:	e0bffd17 	ldw	r2,-12(fp)
 2011204:	11000304 	addi	r4,r2,12
 2011208:	e0bffd17 	ldw	r2,-12(fp)
 201120c:	10800417 	ldw	r2,16(r2)
 2011210:	10800084 	addi	r2,r2,2
 2011214:	1085883a 	add	r2,r2,r2
 2011218:	1085883a 	add	r2,r2,r2
 201121c:	100d883a 	mov	r6,r2
 2011220:	200b883a 	mov	r5,r4
 2011224:	1809883a 	mov	r4,r3
 2011228:	20093a40 	call	20093a4 <memcpy>
	  Bfree (ptr, b);
 201122c:	e17ffd17 	ldw	r5,-12(fp)
 2011230:	e13ffc17 	ldw	r4,-16(fp)
 2011234:	201107c0 	call	201107c <_Bfree>
	  b = b1;
 2011238:	e0bffb17 	ldw	r2,-20(fp)
 201123c:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 2011240:	e0bff717 	ldw	r2,-36(fp)
 2011244:	10c00044 	addi	r3,r2,1
 2011248:	e0fff715 	stw	r3,-36(fp)
 201124c:	e0ffff17 	ldw	r3,-4(fp)
 2011250:	e13ffd17 	ldw	r4,-12(fp)
 2011254:	10800144 	addi	r2,r2,5
 2011258:	1085883a 	add	r2,r2,r2
 201125c:	1085883a 	add	r2,r2,r2
 2011260:	2085883a 	add	r2,r4,r2
 2011264:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 2011268:	e0bffd17 	ldw	r2,-12(fp)
 201126c:	e0fff717 	ldw	r3,-36(fp)
 2011270:	10c00415 	stw	r3,16(r2)
    }
  return b;
 2011274:	e0bffd17 	ldw	r2,-12(fp)
}
 2011278:	e037883a 	mov	sp,fp
 201127c:	dfc00117 	ldw	ra,4(sp)
 2011280:	df000017 	ldw	fp,0(sp)
 2011284:	dec00204 	addi	sp,sp,8
 2011288:	f800283a 	ret

0201128c <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 201128c:	defff504 	addi	sp,sp,-44
 2011290:	dfc00a15 	stw	ra,40(sp)
 2011294:	df000915 	stw	fp,36(sp)
 2011298:	df000904 	addi	fp,sp,36
 201129c:	e13ffc15 	stw	r4,-16(fp)
 20112a0:	e17ffd15 	stw	r5,-12(fp)
 20112a4:	e1bffe15 	stw	r6,-8(fp)
 20112a8:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 20112ac:	e0bfff17 	ldw	r2,-4(fp)
 20112b0:	10800204 	addi	r2,r2,8
 20112b4:	01400244 	movi	r5,9
 20112b8:	1009883a 	mov	r4,r2
 20112bc:	2006ab40 	call	2006ab4 <__divsi3>
 20112c0:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 20112c4:	e03ff915 	stw	zero,-28(fp)
 20112c8:	00800044 	movi	r2,1
 20112cc:	e0bffa15 	stw	r2,-24(fp)
 20112d0:	00000606 	br	20112ec <__s2b+0x60>
 20112d4:	e0bffa17 	ldw	r2,-24(fp)
 20112d8:	1085883a 	add	r2,r2,r2
 20112dc:	e0bffa15 	stw	r2,-24(fp)
 20112e0:	e0bff917 	ldw	r2,-28(fp)
 20112e4:	10800044 	addi	r2,r2,1
 20112e8:	e0bff915 	stw	r2,-28(fp)
 20112ec:	e0bffb17 	ldw	r2,-20(fp)
 20112f0:	e0fffa17 	ldw	r3,-24(fp)
 20112f4:	18bff716 	blt	r3,r2,20112d4 <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 20112f8:	e17ff917 	ldw	r5,-28(fp)
 20112fc:	e13ffc17 	ldw	r4,-16(fp)
 2011300:	2010f4c0 	call	2010f4c <_Balloc>
 2011304:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 2011308:	e0bff717 	ldw	r2,-36(fp)
 201130c:	e0c00217 	ldw	r3,8(fp)
 2011310:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 2011314:	e0bff717 	ldw	r2,-36(fp)
 2011318:	00c00044 	movi	r3,1
 201131c:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 2011320:	00800244 	movi	r2,9
 2011324:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 2011328:	e0bffe17 	ldw	r2,-8(fp)
 201132c:	10800290 	cmplti	r2,r2,10
 2011330:	10001b1e 	bne	r2,zero,20113a0 <__s2b+0x114>
    {
      s += 9;
 2011334:	e0bffd17 	ldw	r2,-12(fp)
 2011338:	10800244 	addi	r2,r2,9
 201133c:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 2011340:	e0bffd17 	ldw	r2,-12(fp)
 2011344:	10c00044 	addi	r3,r2,1
 2011348:	e0fffd15 	stw	r3,-12(fp)
 201134c:	10800003 	ldbu	r2,0(r2)
 2011350:	10803fcc 	andi	r2,r2,255
 2011354:	1080201c 	xori	r2,r2,128
 2011358:	10bfe004 	addi	r2,r2,-128
 201135c:	10bff404 	addi	r2,r2,-48
 2011360:	100f883a 	mov	r7,r2
 2011364:	01800284 	movi	r6,10
 2011368:	e17ff717 	ldw	r5,-36(fp)
 201136c:	e13ffc17 	ldw	r4,-16(fp)
 2011370:	20110f80 	call	20110f8 <__multadd>
 2011374:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 2011378:	e0bff817 	ldw	r2,-32(fp)
 201137c:	10800044 	addi	r2,r2,1
 2011380:	e0bff815 	stw	r2,-32(fp)
 2011384:	e0fff817 	ldw	r3,-32(fp)
 2011388:	e0bffe17 	ldw	r2,-8(fp)
 201138c:	18bfec16 	blt	r3,r2,2011340 <__s2b+0xb4>
      s++;
 2011390:	e0bffd17 	ldw	r2,-12(fp)
 2011394:	10800044 	addi	r2,r2,1
 2011398:	e0bffd15 	stw	r2,-12(fp)
 201139c:	00001506 	br	20113f4 <__s2b+0x168>
    }
  else
    s += 10;
 20113a0:	e0bffd17 	ldw	r2,-12(fp)
 20113a4:	10800284 	addi	r2,r2,10
 20113a8:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 20113ac:	00001106 	br	20113f4 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 20113b0:	e0bffd17 	ldw	r2,-12(fp)
 20113b4:	10c00044 	addi	r3,r2,1
 20113b8:	e0fffd15 	stw	r3,-12(fp)
 20113bc:	10800003 	ldbu	r2,0(r2)
 20113c0:	10803fcc 	andi	r2,r2,255
 20113c4:	1080201c 	xori	r2,r2,128
 20113c8:	10bfe004 	addi	r2,r2,-128
 20113cc:	10bff404 	addi	r2,r2,-48
 20113d0:	100f883a 	mov	r7,r2
 20113d4:	01800284 	movi	r6,10
 20113d8:	e17ff717 	ldw	r5,-36(fp)
 20113dc:	e13ffc17 	ldw	r4,-16(fp)
 20113e0:	20110f80 	call	20110f8 <__multadd>
 20113e4:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 20113e8:	e0bff817 	ldw	r2,-32(fp)
 20113ec:	10800044 	addi	r2,r2,1
 20113f0:	e0bff815 	stw	r2,-32(fp)
 20113f4:	e0fff817 	ldw	r3,-32(fp)
 20113f8:	e0bfff17 	ldw	r2,-4(fp)
 20113fc:	18bfec16 	blt	r3,r2,20113b0 <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 2011400:	e0bff717 	ldw	r2,-36(fp)
}
 2011404:	e037883a 	mov	sp,fp
 2011408:	dfc00117 	ldw	ra,4(sp)
 201140c:	df000017 	ldw	fp,0(sp)
 2011410:	dec00204 	addi	sp,sp,8
 2011414:	f800283a 	ret

02011418 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 2011418:	defffe04 	addi	sp,sp,-8
 201141c:	df000115 	stw	fp,4(sp)
 2011420:	dc000015 	stw	r16,0(sp)
 2011424:	df000104 	addi	fp,sp,4
 2011428:	2005883a 	mov	r2,r4
  register int k = 0;
 201142c:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 2011430:	10ffffec 	andhi	r3,r2,65535
 2011434:	1800021e 	bne	r3,zero,2011440 <__hi0bits+0x28>
    {
      k = 16;
 2011438:	04000404 	movi	r16,16
      x <<= 16;
 201143c:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 2011440:	10ffc02c 	andhi	r3,r2,65280
 2011444:	1800021e 	bne	r3,zero,2011450 <__hi0bits+0x38>
    {
      k += 8;
 2011448:	84000204 	addi	r16,r16,8
      x <<= 8;
 201144c:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 2011450:	10fc002c 	andhi	r3,r2,61440
 2011454:	1800021e 	bne	r3,zero,2011460 <__hi0bits+0x48>
    {
      k += 4;
 2011458:	84000104 	addi	r16,r16,4
      x <<= 4;
 201145c:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 2011460:	10f0002c 	andhi	r3,r2,49152
 2011464:	1800031e 	bne	r3,zero,2011474 <__hi0bits+0x5c>
    {
      k += 2;
 2011468:	84000084 	addi	r16,r16,2
      x <<= 2;
 201146c:	1085883a 	add	r2,r2,r2
 2011470:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 2011474:	1007883a 	mov	r3,r2
 2011478:	18000516 	blt	r3,zero,2011490 <__hi0bits+0x78>
    {
      k++;
 201147c:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 2011480:	1090002c 	andhi	r2,r2,16384
 2011484:	1000021e 	bne	r2,zero,2011490 <__hi0bits+0x78>
	return 32;
 2011488:	00800804 	movi	r2,32
 201148c:	00000106 	br	2011494 <__hi0bits+0x7c>
    }
  return k;
 2011490:	8005883a 	mov	r2,r16
}
 2011494:	e6ffff04 	addi	sp,fp,-4
 2011498:	df000117 	ldw	fp,4(sp)
 201149c:	dc000017 	ldw	r16,0(sp)
 20114a0:	dec00204 	addi	sp,sp,8
 20114a4:	f800283a 	ret

020114a8 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 20114a8:	defffc04 	addi	sp,sp,-16
 20114ac:	df000315 	stw	fp,12(sp)
 20114b0:	dc400215 	stw	r17,8(sp)
 20114b4:	dc000115 	stw	r16,4(sp)
 20114b8:	df000304 	addi	fp,sp,12
 20114bc:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 20114c0:	e0bffd17 	ldw	r2,-12(fp)
 20114c4:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 20114c8:	808001cc 	andi	r2,r16,7
 20114cc:	10001026 	beq	r2,zero,2011510 <__lo0bits+0x68>
    {
      if (x & 1)
 20114d0:	8080004c 	andi	r2,r16,1
 20114d4:	10000226 	beq	r2,zero,20114e0 <__lo0bits+0x38>
	return 0;
 20114d8:	0005883a 	mov	r2,zero
 20114dc:	00002706 	br	201157c <__lo0bits+0xd4>
      if (x & 2)
 20114e0:	8080008c 	andi	r2,r16,2
 20114e4:	10000526 	beq	r2,zero,20114fc <__lo0bits+0x54>
	{
	  *y = x >> 1;
 20114e8:	8006d07a 	srli	r3,r16,1
 20114ec:	e0bffd17 	ldw	r2,-12(fp)
 20114f0:	10c00015 	stw	r3,0(r2)
	  return 1;
 20114f4:	00800044 	movi	r2,1
 20114f8:	00002006 	br	201157c <__lo0bits+0xd4>
	}
      *y = x >> 2;
 20114fc:	8006d0ba 	srli	r3,r16,2
 2011500:	e0bffd17 	ldw	r2,-12(fp)
 2011504:	10c00015 	stw	r3,0(r2)
      return 2;
 2011508:	00800084 	movi	r2,2
 201150c:	00001b06 	br	201157c <__lo0bits+0xd4>
    }
  k = 0;
 2011510:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 2011514:	80bfffcc 	andi	r2,r16,65535
 2011518:	1000021e 	bne	r2,zero,2011524 <__lo0bits+0x7c>
    {
      k = 16;
 201151c:	04400404 	movi	r17,16
      x >>= 16;
 2011520:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 2011524:	80803fcc 	andi	r2,r16,255
 2011528:	1000021e 	bne	r2,zero,2011534 <__lo0bits+0x8c>
    {
      k += 8;
 201152c:	8c400204 	addi	r17,r17,8
      x >>= 8;
 2011530:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 2011534:	808003cc 	andi	r2,r16,15
 2011538:	1000021e 	bne	r2,zero,2011544 <__lo0bits+0x9c>
    {
      k += 4;
 201153c:	8c400104 	addi	r17,r17,4
      x >>= 4;
 2011540:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 2011544:	808000cc 	andi	r2,r16,3
 2011548:	1000021e 	bne	r2,zero,2011554 <__lo0bits+0xac>
    {
      k += 2;
 201154c:	8c400084 	addi	r17,r17,2
      x >>= 2;
 2011550:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 2011554:	8080004c 	andi	r2,r16,1
 2011558:	1000051e 	bne	r2,zero,2011570 <__lo0bits+0xc8>
    {
      k++;
 201155c:	8c400044 	addi	r17,r17,1
      x >>= 1;
 2011560:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 2011564:	8000021e 	bne	r16,zero,2011570 <__lo0bits+0xc8>
	return 32;
 2011568:	00800804 	movi	r2,32
 201156c:	00000306 	br	201157c <__lo0bits+0xd4>
    }
  *y = x;
 2011570:	e0bffd17 	ldw	r2,-12(fp)
 2011574:	14000015 	stw	r16,0(r2)
  return k;
 2011578:	8805883a 	mov	r2,r17
}
 201157c:	e6fffe04 	addi	sp,fp,-8
 2011580:	df000217 	ldw	fp,8(sp)
 2011584:	dc400117 	ldw	r17,4(sp)
 2011588:	dc000017 	ldw	r16,0(sp)
 201158c:	dec00304 	addi	sp,sp,12
 2011590:	f800283a 	ret

02011594 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 2011594:	defffb04 	addi	sp,sp,-20
 2011598:	dfc00415 	stw	ra,16(sp)
 201159c:	df000315 	stw	fp,12(sp)
 20115a0:	df000304 	addi	fp,sp,12
 20115a4:	e13ffe15 	stw	r4,-8(fp)
 20115a8:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 20115ac:	01400044 	movi	r5,1
 20115b0:	e13ffe17 	ldw	r4,-8(fp)
 20115b4:	2010f4c0 	call	2010f4c <_Balloc>
 20115b8:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 20115bc:	e0ffff17 	ldw	r3,-4(fp)
 20115c0:	e0bffd17 	ldw	r2,-12(fp)
 20115c4:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 20115c8:	e0bffd17 	ldw	r2,-12(fp)
 20115cc:	00c00044 	movi	r3,1
 20115d0:	10c00415 	stw	r3,16(r2)
  return b;
 20115d4:	e0bffd17 	ldw	r2,-12(fp)
}
 20115d8:	e037883a 	mov	sp,fp
 20115dc:	dfc00117 	ldw	ra,4(sp)
 20115e0:	df000017 	ldw	fp,0(sp)
 20115e4:	dec00204 	addi	sp,sp,8
 20115e8:	f800283a 	ret

020115ec <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 20115ec:	deffeb04 	addi	sp,sp,-84
 20115f0:	dfc01415 	stw	ra,80(sp)
 20115f4:	df001315 	stw	fp,76(sp)
 20115f8:	df001304 	addi	fp,sp,76
 20115fc:	e13ffd15 	stw	r4,-12(fp)
 2011600:	e17ffe15 	stw	r5,-8(fp)
 2011604:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 2011608:	e0bffe17 	ldw	r2,-8(fp)
 201160c:	10c00417 	ldw	r3,16(r2)
 2011610:	e0bfff17 	ldw	r2,-4(fp)
 2011614:	10800417 	ldw	r2,16(r2)
 2011618:	1880060e 	bge	r3,r2,2011634 <__multiply+0x48>
    {
      c = a;
 201161c:	e0bffe17 	ldw	r2,-8(fp)
 2011620:	e0bff515 	stw	r2,-44(fp)
      a = b;
 2011624:	e0bfff17 	ldw	r2,-4(fp)
 2011628:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 201162c:	e0bff517 	ldw	r2,-44(fp)
 2011630:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 2011634:	e0bffe17 	ldw	r2,-8(fp)
 2011638:	10800117 	ldw	r2,4(r2)
 201163c:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 2011640:	e0bffe17 	ldw	r2,-8(fp)
 2011644:	10800417 	ldw	r2,16(r2)
 2011648:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 201164c:	e0bfff17 	ldw	r2,-4(fp)
 2011650:	10800417 	ldw	r2,16(r2)
 2011654:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 2011658:	e0fff617 	ldw	r3,-40(fp)
 201165c:	e0bff717 	ldw	r2,-36(fp)
 2011660:	1885883a 	add	r2,r3,r2
 2011664:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 2011668:	e0bffe17 	ldw	r2,-8(fp)
 201166c:	10c00217 	ldw	r3,8(r2)
 2011670:	e0bfee17 	ldw	r2,-72(fp)
 2011674:	1880030e 	bge	r3,r2,2011684 <__multiply+0x98>
    k++;
 2011678:	e0bfed17 	ldw	r2,-76(fp)
 201167c:	10800044 	addi	r2,r2,1
 2011680:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 2011684:	e17fed17 	ldw	r5,-76(fp)
 2011688:	e13ffd17 	ldw	r4,-12(fp)
 201168c:	2010f4c0 	call	2010f4c <_Balloc>
 2011690:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 2011694:	e0bff517 	ldw	r2,-44(fp)
 2011698:	10800504 	addi	r2,r2,20
 201169c:	e0bff015 	stw	r2,-64(fp)
 20116a0:	e0bfee17 	ldw	r2,-72(fp)
 20116a4:	1085883a 	add	r2,r2,r2
 20116a8:	1085883a 	add	r2,r2,r2
 20116ac:	1007883a 	mov	r3,r2
 20116b0:	e0bff017 	ldw	r2,-64(fp)
 20116b4:	10c5883a 	add	r2,r2,r3
 20116b8:	e0bff815 	stw	r2,-32(fp)
 20116bc:	00000506 	br	20116d4 <__multiply+0xe8>
    *x = 0;
 20116c0:	e0bff017 	ldw	r2,-64(fp)
 20116c4:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 20116c8:	e0bff017 	ldw	r2,-64(fp)
 20116cc:	10800104 	addi	r2,r2,4
 20116d0:	e0bff015 	stw	r2,-64(fp)
 20116d4:	e0fff017 	ldw	r3,-64(fp)
 20116d8:	e0bff817 	ldw	r2,-32(fp)
 20116dc:	18bff836 	bltu	r3,r2,20116c0 <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 20116e0:	e0bffe17 	ldw	r2,-8(fp)
 20116e4:	10800504 	addi	r2,r2,20
 20116e8:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 20116ec:	e0bff617 	ldw	r2,-40(fp)
 20116f0:	1085883a 	add	r2,r2,r2
 20116f4:	1085883a 	add	r2,r2,r2
 20116f8:	1007883a 	mov	r3,r2
 20116fc:	e0bff817 	ldw	r2,-32(fp)
 2011700:	10c5883a 	add	r2,r2,r3
 2011704:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 2011708:	e0bfff17 	ldw	r2,-4(fp)
 201170c:	10800504 	addi	r2,r2,20
 2011710:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 2011714:	e0bff717 	ldw	r2,-36(fp)
 2011718:	1085883a 	add	r2,r2,r2
 201171c:	1085883a 	add	r2,r2,r2
 2011720:	1007883a 	mov	r3,r2
 2011724:	e0bff117 	ldw	r2,-60(fp)
 2011728:	10c5883a 	add	r2,r2,r3
 201172c:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 2011730:	e0bff517 	ldw	r2,-44(fp)
 2011734:	10800504 	addi	r2,r2,20
 2011738:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 201173c:	00007d06 	br	2011934 <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 2011740:	e0bff117 	ldw	r2,-60(fp)
 2011744:	10800017 	ldw	r2,0(r2)
 2011748:	10bfffcc 	andi	r2,r2,65535
 201174c:	e0bffb15 	stw	r2,-20(fp)
 2011750:	e0bffb17 	ldw	r2,-20(fp)
 2011754:	10003426 	beq	r2,zero,2011828 <__multiply+0x23c>
	{
	  x = xa;
 2011758:	e0bff817 	ldw	r2,-32(fp)
 201175c:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 2011760:	e0bff317 	ldw	r2,-52(fp)
 2011764:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 2011768:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 201176c:	e0bff017 	ldw	r2,-64(fp)
 2011770:	10800017 	ldw	r2,0(r2)
 2011774:	10ffffcc 	andi	r3,r2,65535
 2011778:	e0bffb17 	ldw	r2,-20(fp)
 201177c:	1887383a 	mul	r3,r3,r2
 2011780:	e0bff217 	ldw	r2,-56(fp)
 2011784:	10800017 	ldw	r2,0(r2)
 2011788:	10bfffcc 	andi	r2,r2,65535
 201178c:	1887883a 	add	r3,r3,r2
 2011790:	e0bfef17 	ldw	r2,-68(fp)
 2011794:	1885883a 	add	r2,r3,r2
 2011798:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 201179c:	e0bffc17 	ldw	r2,-16(fp)
 20117a0:	1004d43a 	srli	r2,r2,16
 20117a4:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 20117a8:	e0bff017 	ldw	r2,-64(fp)
 20117ac:	10c00104 	addi	r3,r2,4
 20117b0:	e0fff015 	stw	r3,-64(fp)
 20117b4:	10800017 	ldw	r2,0(r2)
 20117b8:	1006d43a 	srli	r3,r2,16
 20117bc:	e0bffb17 	ldw	r2,-20(fp)
 20117c0:	1887383a 	mul	r3,r3,r2
 20117c4:	e0bff217 	ldw	r2,-56(fp)
 20117c8:	10800017 	ldw	r2,0(r2)
 20117cc:	1004d43a 	srli	r2,r2,16
 20117d0:	1887883a 	add	r3,r3,r2
 20117d4:	e0bfef17 	ldw	r2,-68(fp)
 20117d8:	1885883a 	add	r2,r3,r2
 20117dc:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 20117e0:	e0bff417 	ldw	r2,-48(fp)
 20117e4:	1004d43a 	srli	r2,r2,16
 20117e8:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 20117ec:	e0bff217 	ldw	r2,-56(fp)
 20117f0:	10c00104 	addi	r3,r2,4
 20117f4:	e0fff215 	stw	r3,-56(fp)
 20117f8:	e0fff417 	ldw	r3,-48(fp)
 20117fc:	1808943a 	slli	r4,r3,16
 2011800:	e0fffc17 	ldw	r3,-16(fp)
 2011804:	18ffffcc 	andi	r3,r3,65535
 2011808:	20c6b03a 	or	r3,r4,r3
 201180c:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 2011810:	e0fff017 	ldw	r3,-64(fp)
 2011814:	e0bff917 	ldw	r2,-28(fp)
 2011818:	18bfd436 	bltu	r3,r2,201176c <__multiply+0x180>
	  *xc = carry;
 201181c:	e0bff217 	ldw	r2,-56(fp)
 2011820:	e0ffef17 	ldw	r3,-68(fp)
 2011824:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 2011828:	e0bff117 	ldw	r2,-60(fp)
 201182c:	10800017 	ldw	r2,0(r2)
 2011830:	1004d43a 	srli	r2,r2,16
 2011834:	e0bffb15 	stw	r2,-20(fp)
 2011838:	e0bffb17 	ldw	r2,-20(fp)
 201183c:	10003726 	beq	r2,zero,201191c <__multiply+0x330>
	{
	  x = xa;
 2011840:	e0bff817 	ldw	r2,-32(fp)
 2011844:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 2011848:	e0bff317 	ldw	r2,-52(fp)
 201184c:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 2011850:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 2011854:	e0bff217 	ldw	r2,-56(fp)
 2011858:	10800017 	ldw	r2,0(r2)
 201185c:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 2011860:	e0bff017 	ldw	r2,-64(fp)
 2011864:	10800017 	ldw	r2,0(r2)
 2011868:	10ffffcc 	andi	r3,r2,65535
 201186c:	e0bffb17 	ldw	r2,-20(fp)
 2011870:	1887383a 	mul	r3,r3,r2
 2011874:	e0bff217 	ldw	r2,-56(fp)
 2011878:	10800017 	ldw	r2,0(r2)
 201187c:	1004d43a 	srli	r2,r2,16
 2011880:	1887883a 	add	r3,r3,r2
 2011884:	e0bfef17 	ldw	r2,-68(fp)
 2011888:	1885883a 	add	r2,r3,r2
 201188c:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 2011890:	e0bffc17 	ldw	r2,-16(fp)
 2011894:	1004d43a 	srli	r2,r2,16
 2011898:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 201189c:	e0bff217 	ldw	r2,-56(fp)
 20118a0:	10c00104 	addi	r3,r2,4
 20118a4:	e0fff215 	stw	r3,-56(fp)
 20118a8:	e0fffc17 	ldw	r3,-16(fp)
 20118ac:	1808943a 	slli	r4,r3,16
 20118b0:	e0fff417 	ldw	r3,-48(fp)
 20118b4:	18ffffcc 	andi	r3,r3,65535
 20118b8:	20c6b03a 	or	r3,r4,r3
 20118bc:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 20118c0:	e0bff017 	ldw	r2,-64(fp)
 20118c4:	10c00104 	addi	r3,r2,4
 20118c8:	e0fff015 	stw	r3,-64(fp)
 20118cc:	10800017 	ldw	r2,0(r2)
 20118d0:	1006d43a 	srli	r3,r2,16
 20118d4:	e0bffb17 	ldw	r2,-20(fp)
 20118d8:	1887383a 	mul	r3,r3,r2
 20118dc:	e0bff217 	ldw	r2,-56(fp)
 20118e0:	10800017 	ldw	r2,0(r2)
 20118e4:	10bfffcc 	andi	r2,r2,65535
 20118e8:	1887883a 	add	r3,r3,r2
 20118ec:	e0bfef17 	ldw	r2,-68(fp)
 20118f0:	1885883a 	add	r2,r3,r2
 20118f4:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 20118f8:	e0bff417 	ldw	r2,-48(fp)
 20118fc:	1004d43a 	srli	r2,r2,16
 2011900:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 2011904:	e0fff017 	ldw	r3,-64(fp)
 2011908:	e0bff917 	ldw	r2,-28(fp)
 201190c:	18bfd436 	bltu	r3,r2,2011860 <__multiply+0x274>
	  *xc = z2;
 2011910:	e0bff217 	ldw	r2,-56(fp)
 2011914:	e0fff417 	ldw	r3,-48(fp)
 2011918:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 201191c:	e0bff117 	ldw	r2,-60(fp)
 2011920:	10800104 	addi	r2,r2,4
 2011924:	e0bff115 	stw	r2,-60(fp)
 2011928:	e0bff317 	ldw	r2,-52(fp)
 201192c:	10800104 	addi	r2,r2,4
 2011930:	e0bff315 	stw	r2,-52(fp)
 2011934:	e0fff117 	ldw	r3,-60(fp)
 2011938:	e0bffa17 	ldw	r2,-24(fp)
 201193c:	18bf8036 	bltu	r3,r2,2011740 <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 2011940:	e0bff517 	ldw	r2,-44(fp)
 2011944:	10800504 	addi	r2,r2,20
 2011948:	e0bff315 	stw	r2,-52(fp)
 201194c:	e0bfee17 	ldw	r2,-72(fp)
 2011950:	1085883a 	add	r2,r2,r2
 2011954:	1085883a 	add	r2,r2,r2
 2011958:	1007883a 	mov	r3,r2
 201195c:	e0bff317 	ldw	r2,-52(fp)
 2011960:	10c5883a 	add	r2,r2,r3
 2011964:	e0bff215 	stw	r2,-56(fp)
 2011968:	00000306 	br	2011978 <__multiply+0x38c>
 201196c:	e0bfee17 	ldw	r2,-72(fp)
 2011970:	10bfffc4 	addi	r2,r2,-1
 2011974:	e0bfee15 	stw	r2,-72(fp)
 2011978:	e0bfee17 	ldw	r2,-72(fp)
 201197c:	0080060e 	bge	zero,r2,2011998 <__multiply+0x3ac>
 2011980:	e0bff217 	ldw	r2,-56(fp)
 2011984:	10bfff04 	addi	r2,r2,-4
 2011988:	e0bff215 	stw	r2,-56(fp)
 201198c:	e0bff217 	ldw	r2,-56(fp)
 2011990:	10800017 	ldw	r2,0(r2)
 2011994:	103ff526 	beq	r2,zero,201196c <__multiply+0x380>
  c->_wds = wc;
 2011998:	e0bff517 	ldw	r2,-44(fp)
 201199c:	e0ffee17 	ldw	r3,-72(fp)
 20119a0:	10c00415 	stw	r3,16(r2)
  return c;
 20119a4:	e0bff517 	ldw	r2,-44(fp)
}
 20119a8:	e037883a 	mov	sp,fp
 20119ac:	dfc00117 	ldw	ra,4(sp)
 20119b0:	df000017 	ldw	fp,0(sp)
 20119b4:	dec00204 	addi	sp,sp,8
 20119b8:	f800283a 	ret

020119bc <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 20119bc:	defff704 	addi	sp,sp,-36
 20119c0:	dfc00815 	stw	ra,32(sp)
 20119c4:	df000715 	stw	fp,28(sp)
 20119c8:	df000704 	addi	fp,sp,28
 20119cc:	e13ffd15 	stw	r4,-12(fp)
 20119d0:	e17ffe15 	stw	r5,-8(fp)
 20119d4:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 20119d8:	e0bfff17 	ldw	r2,-4(fp)
 20119dc:	108000cc 	andi	r2,r2,3
 20119e0:	e0bffb15 	stw	r2,-20(fp)
 20119e4:	e0bffb17 	ldw	r2,-20(fp)
 20119e8:	10000e26 	beq	r2,zero,2011a24 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 20119ec:	e0bffb17 	ldw	r2,-20(fp)
 20119f0:	10ffffc4 	addi	r3,r2,-1
 20119f4:	008080b4 	movhi	r2,514
 20119f8:	108a7404 	addi	r2,r2,10704
 20119fc:	18c7883a 	add	r3,r3,r3
 2011a00:	18c7883a 	add	r3,r3,r3
 2011a04:	10c5883a 	add	r2,r2,r3
 2011a08:	10800017 	ldw	r2,0(r2)
 2011a0c:	000f883a 	mov	r7,zero
 2011a10:	100d883a 	mov	r6,r2
 2011a14:	e17ffe17 	ldw	r5,-8(fp)
 2011a18:	e13ffd17 	ldw	r4,-12(fp)
 2011a1c:	20110f80 	call	20110f8 <__multadd>
 2011a20:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 2011a24:	e0bfff17 	ldw	r2,-4(fp)
 2011a28:	1005d0ba 	srai	r2,r2,2
 2011a2c:	e0bfff15 	stw	r2,-4(fp)
 2011a30:	e0bfff17 	ldw	r2,-4(fp)
 2011a34:	1000021e 	bne	r2,zero,2011a40 <__pow5mult+0x84>
    return b;
 2011a38:	e0bffe17 	ldw	r2,-8(fp)
 2011a3c:	00003806 	br	2011b20 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 2011a40:	e0bffd17 	ldw	r2,-12(fp)
 2011a44:	10801217 	ldw	r2,72(r2)
 2011a48:	e0bff915 	stw	r2,-28(fp)
 2011a4c:	e0bff917 	ldw	r2,-28(fp)
 2011a50:	10000b1e 	bne	r2,zero,2011a80 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 2011a54:	01409c44 	movi	r5,625
 2011a58:	e13ffd17 	ldw	r4,-12(fp)
 2011a5c:	20115940 	call	2011594 <__i2b>
 2011a60:	1007883a 	mov	r3,r2
 2011a64:	e0bffd17 	ldw	r2,-12(fp)
 2011a68:	10c01215 	stw	r3,72(r2)
 2011a6c:	e0bffd17 	ldw	r2,-12(fp)
 2011a70:	10801217 	ldw	r2,72(r2)
 2011a74:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 2011a78:	e0bff917 	ldw	r2,-28(fp)
 2011a7c:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 2011a80:	e0bfff17 	ldw	r2,-4(fp)
 2011a84:	1080004c 	andi	r2,r2,1
 2011a88:	10000a26 	beq	r2,zero,2011ab4 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 2011a8c:	e1bff917 	ldw	r6,-28(fp)
 2011a90:	e17ffe17 	ldw	r5,-8(fp)
 2011a94:	e13ffd17 	ldw	r4,-12(fp)
 2011a98:	20115ec0 	call	20115ec <__multiply>
 2011a9c:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 2011aa0:	e17ffe17 	ldw	r5,-8(fp)
 2011aa4:	e13ffd17 	ldw	r4,-12(fp)
 2011aa8:	201107c0 	call	201107c <_Bfree>
	  b = b1;
 2011aac:	e0bffc17 	ldw	r2,-16(fp)
 2011ab0:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 2011ab4:	e0bfff17 	ldw	r2,-4(fp)
 2011ab8:	1005d07a 	srai	r2,r2,1
 2011abc:	e0bfff15 	stw	r2,-4(fp)
 2011ac0:	e0bfff17 	ldw	r2,-4(fp)
 2011ac4:	10001426 	beq	r2,zero,2011b18 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 2011ac8:	e0bff917 	ldw	r2,-28(fp)
 2011acc:	10800017 	ldw	r2,0(r2)
 2011ad0:	e0bffa15 	stw	r2,-24(fp)
 2011ad4:	e0bffa17 	ldw	r2,-24(fp)
 2011ad8:	10000c1e 	bne	r2,zero,2011b0c <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 2011adc:	e1bff917 	ldw	r6,-28(fp)
 2011ae0:	e17ff917 	ldw	r5,-28(fp)
 2011ae4:	e13ffd17 	ldw	r4,-12(fp)
 2011ae8:	20115ec0 	call	20115ec <__multiply>
 2011aec:	1007883a 	mov	r3,r2
 2011af0:	e0bff917 	ldw	r2,-28(fp)
 2011af4:	10c00015 	stw	r3,0(r2)
 2011af8:	e0bff917 	ldw	r2,-28(fp)
 2011afc:	10800017 	ldw	r2,0(r2)
 2011b00:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 2011b04:	e0bffa17 	ldw	r2,-24(fp)
 2011b08:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 2011b0c:	e0bffa17 	ldw	r2,-24(fp)
 2011b10:	e0bff915 	stw	r2,-28(fp)
    }
 2011b14:	003fda06 	br	2011a80 <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 2011b18:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 2011b1c:	e0bffe17 	ldw	r2,-8(fp)
}
 2011b20:	e037883a 	mov	sp,fp
 2011b24:	dfc00117 	ldw	ra,4(sp)
 2011b28:	df000017 	ldw	fp,0(sp)
 2011b2c:	dec00204 	addi	sp,sp,8
 2011b30:	f800283a 	ret

02011b34 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 2011b34:	defff204 	addi	sp,sp,-56
 2011b38:	dfc00d15 	stw	ra,52(sp)
 2011b3c:	df000c15 	stw	fp,48(sp)
 2011b40:	df000c04 	addi	fp,sp,48
 2011b44:	e13ffd15 	stw	r4,-12(fp)
 2011b48:	e17ffe15 	stw	r5,-8(fp)
 2011b4c:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 2011b50:	e0bfff17 	ldw	r2,-4(fp)
 2011b54:	1005d17a 	srai	r2,r2,5
 2011b58:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 2011b5c:	e0bffe17 	ldw	r2,-8(fp)
 2011b60:	10800117 	ldw	r2,4(r2)
 2011b64:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 2011b68:	e0bffe17 	ldw	r2,-8(fp)
 2011b6c:	10c00417 	ldw	r3,16(r2)
 2011b70:	e0bffa17 	ldw	r2,-24(fp)
 2011b74:	1885883a 	add	r2,r3,r2
 2011b78:	10800044 	addi	r2,r2,1
 2011b7c:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 2011b80:	e0bffe17 	ldw	r2,-8(fp)
 2011b84:	10800217 	ldw	r2,8(r2)
 2011b88:	e0bff415 	stw	r2,-48(fp)
 2011b8c:	00000606 	br	2011ba8 <__lshift+0x74>
    k1++;
 2011b90:	e0bff517 	ldw	r2,-44(fp)
 2011b94:	10800044 	addi	r2,r2,1
 2011b98:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 2011b9c:	e0bff417 	ldw	r2,-48(fp)
 2011ba0:	1085883a 	add	r2,r2,r2
 2011ba4:	e0bff415 	stw	r2,-48(fp)
 2011ba8:	e0bff617 	ldw	r2,-40(fp)
 2011bac:	e0fff417 	ldw	r3,-48(fp)
 2011bb0:	18bff716 	blt	r3,r2,2011b90 <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 2011bb4:	e17ff517 	ldw	r5,-44(fp)
 2011bb8:	e13ffd17 	ldw	r4,-12(fp)
 2011bbc:	2010f4c0 	call	2010f4c <_Balloc>
 2011bc0:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 2011bc4:	e0bffb17 	ldw	r2,-20(fp)
 2011bc8:	10800504 	addi	r2,r2,20
 2011bcc:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 2011bd0:	e03ff415 	stw	zero,-48(fp)
 2011bd4:	00000706 	br	2011bf4 <__lshift+0xc0>
    *x1++ = 0;
 2011bd8:	e0bff817 	ldw	r2,-32(fp)
 2011bdc:	10c00104 	addi	r3,r2,4
 2011be0:	e0fff815 	stw	r3,-32(fp)
 2011be4:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 2011be8:	e0bff417 	ldw	r2,-48(fp)
 2011bec:	10800044 	addi	r2,r2,1
 2011bf0:	e0bff415 	stw	r2,-48(fp)
 2011bf4:	e0fff417 	ldw	r3,-48(fp)
 2011bf8:	e0bffa17 	ldw	r2,-24(fp)
 2011bfc:	18bff616 	blt	r3,r2,2011bd8 <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 2011c00:	e0bffe17 	ldw	r2,-8(fp)
 2011c04:	10800504 	addi	r2,r2,20
 2011c08:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 2011c0c:	e0bffe17 	ldw	r2,-8(fp)
 2011c10:	10800417 	ldw	r2,16(r2)
 2011c14:	1085883a 	add	r2,r2,r2
 2011c18:	1085883a 	add	r2,r2,r2
 2011c1c:	1007883a 	mov	r3,r2
 2011c20:	e0bff717 	ldw	r2,-36(fp)
 2011c24:	10c5883a 	add	r2,r2,r3
 2011c28:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 2011c2c:	e0bfff17 	ldw	r2,-4(fp)
 2011c30:	108007cc 	andi	r2,r2,31
 2011c34:	e0bfff15 	stw	r2,-4(fp)
 2011c38:	e0bfff17 	ldw	r2,-4(fp)
 2011c3c:	10002326 	beq	r2,zero,2011ccc <__lshift+0x198>
    {
      k1 = 32 - k;
 2011c40:	00c00804 	movi	r3,32
 2011c44:	e0bfff17 	ldw	r2,-4(fp)
 2011c48:	1885c83a 	sub	r2,r3,r2
 2011c4c:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 2011c50:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 2011c54:	e0bff817 	ldw	r2,-32(fp)
 2011c58:	10c00104 	addi	r3,r2,4
 2011c5c:	e0fff815 	stw	r3,-32(fp)
 2011c60:	e0fff717 	ldw	r3,-36(fp)
 2011c64:	19000017 	ldw	r4,0(r3)
 2011c68:	e0ffff17 	ldw	r3,-4(fp)
 2011c6c:	20c8983a 	sll	r4,r4,r3
 2011c70:	e0fff917 	ldw	r3,-28(fp)
 2011c74:	20c6b03a 	or	r3,r4,r3
 2011c78:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 2011c7c:	e0bff717 	ldw	r2,-36(fp)
 2011c80:	10c00104 	addi	r3,r2,4
 2011c84:	e0fff715 	stw	r3,-36(fp)
 2011c88:	10c00017 	ldw	r3,0(r2)
 2011c8c:	e0bff517 	ldw	r2,-44(fp)
 2011c90:	1884d83a 	srl	r2,r3,r2
 2011c94:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 2011c98:	e0fff717 	ldw	r3,-36(fp)
 2011c9c:	e0bffc17 	ldw	r2,-16(fp)
 2011ca0:	18bfec36 	bltu	r3,r2,2011c54 <__lshift+0x120>
      if ((*x1 = z) != 0)
 2011ca4:	e0bff817 	ldw	r2,-32(fp)
 2011ca8:	e0fff917 	ldw	r3,-28(fp)
 2011cac:	10c00015 	stw	r3,0(r2)
 2011cb0:	e0bff817 	ldw	r2,-32(fp)
 2011cb4:	10800017 	ldw	r2,0(r2)
 2011cb8:	10000f26 	beq	r2,zero,2011cf8 <__lshift+0x1c4>
	++n1;
 2011cbc:	e0bff617 	ldw	r2,-40(fp)
 2011cc0:	10800044 	addi	r2,r2,1
 2011cc4:	e0bff615 	stw	r2,-40(fp)
 2011cc8:	00000b06 	br	2011cf8 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 2011ccc:	e0bff817 	ldw	r2,-32(fp)
 2011cd0:	10c00104 	addi	r3,r2,4
 2011cd4:	e0fff815 	stw	r3,-32(fp)
 2011cd8:	e0fff717 	ldw	r3,-36(fp)
 2011cdc:	19000104 	addi	r4,r3,4
 2011ce0:	e13ff715 	stw	r4,-36(fp)
 2011ce4:	18c00017 	ldw	r3,0(r3)
 2011ce8:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 2011cec:	e0fff717 	ldw	r3,-36(fp)
 2011cf0:	e0bffc17 	ldw	r2,-16(fp)
 2011cf4:	18bff536 	bltu	r3,r2,2011ccc <__lshift+0x198>
  b1->_wds = n1 - 1;
 2011cf8:	e0bff617 	ldw	r2,-40(fp)
 2011cfc:	10ffffc4 	addi	r3,r2,-1
 2011d00:	e0bffb17 	ldw	r2,-20(fp)
 2011d04:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 2011d08:	e17ffe17 	ldw	r5,-8(fp)
 2011d0c:	e13ffd17 	ldw	r4,-12(fp)
 2011d10:	201107c0 	call	201107c <_Bfree>
  return b1;
 2011d14:	e0bffb17 	ldw	r2,-20(fp)
}
 2011d18:	e037883a 	mov	sp,fp
 2011d1c:	dfc00117 	ldw	ra,4(sp)
 2011d20:	df000017 	ldw	fp,0(sp)
 2011d24:	dec00204 	addi	sp,sp,8
 2011d28:	f800283a 	ret

02011d2c <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 2011d2c:	defff704 	addi	sp,sp,-36
 2011d30:	df000815 	stw	fp,32(sp)
 2011d34:	df000804 	addi	fp,sp,32
 2011d38:	e13ffe15 	stw	r4,-8(fp)
 2011d3c:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 2011d40:	e0bffe17 	ldw	r2,-8(fp)
 2011d44:	10800417 	ldw	r2,16(r2)
 2011d48:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 2011d4c:	e0bfff17 	ldw	r2,-4(fp)
 2011d50:	10800417 	ldw	r2,16(r2)
 2011d54:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 2011d58:	e0fffa17 	ldw	r3,-24(fp)
 2011d5c:	e0bffb17 	ldw	r2,-20(fp)
 2011d60:	1885c83a 	sub	r2,r3,r2
 2011d64:	e0bffa15 	stw	r2,-24(fp)
 2011d68:	e0bffa17 	ldw	r2,-24(fp)
 2011d6c:	10000226 	beq	r2,zero,2011d78 <__mcmp+0x4c>
    return i;
 2011d70:	e0bffa17 	ldw	r2,-24(fp)
 2011d74:	00002e06 	br	2011e30 <__mcmp+0x104>
  xa0 = a->_x;
 2011d78:	e0bffe17 	ldw	r2,-8(fp)
 2011d7c:	10800504 	addi	r2,r2,20
 2011d80:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 2011d84:	e0bffb17 	ldw	r2,-20(fp)
 2011d88:	1085883a 	add	r2,r2,r2
 2011d8c:	1085883a 	add	r2,r2,r2
 2011d90:	1007883a 	mov	r3,r2
 2011d94:	e0bffc17 	ldw	r2,-16(fp)
 2011d98:	10c5883a 	add	r2,r2,r3
 2011d9c:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 2011da0:	e0bfff17 	ldw	r2,-4(fp)
 2011da4:	10800504 	addi	r2,r2,20
 2011da8:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 2011dac:	e0bffb17 	ldw	r2,-20(fp)
 2011db0:	1085883a 	add	r2,r2,r2
 2011db4:	1085883a 	add	r2,r2,r2
 2011db8:	1007883a 	mov	r3,r2
 2011dbc:	e0bffd17 	ldw	r2,-12(fp)
 2011dc0:	10c5883a 	add	r2,r2,r3
 2011dc4:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 2011dc8:	e0bff817 	ldw	r2,-32(fp)
 2011dcc:	10bfff04 	addi	r2,r2,-4
 2011dd0:	e0bff815 	stw	r2,-32(fp)
 2011dd4:	e0bff817 	ldw	r2,-32(fp)
 2011dd8:	10c00017 	ldw	r3,0(r2)
 2011ddc:	e0bff917 	ldw	r2,-28(fp)
 2011de0:	10bfff04 	addi	r2,r2,-4
 2011de4:	e0bff915 	stw	r2,-28(fp)
 2011de8:	e0bff917 	ldw	r2,-28(fp)
 2011dec:	10800017 	ldw	r2,0(r2)
 2011df0:	18800926 	beq	r3,r2,2011e18 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 2011df4:	e0bff817 	ldw	r2,-32(fp)
 2011df8:	10c00017 	ldw	r3,0(r2)
 2011dfc:	e0bff917 	ldw	r2,-28(fp)
 2011e00:	10800017 	ldw	r2,0(r2)
 2011e04:	1880022e 	bgeu	r3,r2,2011e10 <__mcmp+0xe4>
 2011e08:	00bfffc4 	movi	r2,-1
 2011e0c:	00000806 	br	2011e30 <__mcmp+0x104>
 2011e10:	00800044 	movi	r2,1
 2011e14:	00000606 	br	2011e30 <__mcmp+0x104>
      if (xa <= xa0)
 2011e18:	e0bff817 	ldw	r2,-32(fp)
 2011e1c:	e0fffc17 	ldw	r3,-16(fp)
 2011e20:	1880012e 	bgeu	r3,r2,2011e28 <__mcmp+0xfc>
	break;
    }
 2011e24:	003fe806 	br	2011dc8 <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 2011e28:	0001883a 	nop
    }
  return 0;
 2011e2c:	0005883a 	mov	r2,zero
}
 2011e30:	e037883a 	mov	sp,fp
 2011e34:	df000017 	ldw	fp,0(sp)
 2011e38:	dec00104 	addi	sp,sp,4
 2011e3c:	f800283a 	ret

02011e40 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 2011e40:	deffef04 	addi	sp,sp,-68
 2011e44:	dfc01015 	stw	ra,64(sp)
 2011e48:	df000f15 	stw	fp,60(sp)
 2011e4c:	df000f04 	addi	fp,sp,60
 2011e50:	e13ffd15 	stw	r4,-12(fp)
 2011e54:	e17ffe15 	stw	r5,-8(fp)
 2011e58:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 2011e5c:	e17fff17 	ldw	r5,-4(fp)
 2011e60:	e13ffe17 	ldw	r4,-8(fp)
 2011e64:	2011d2c0 	call	2011d2c <__mcmp>
 2011e68:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 2011e6c:	e0bff117 	ldw	r2,-60(fp)
 2011e70:	10000b1e 	bne	r2,zero,2011ea0 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 2011e74:	000b883a 	mov	r5,zero
 2011e78:	e13ffd17 	ldw	r4,-12(fp)
 2011e7c:	2010f4c0 	call	2010f4c <_Balloc>
 2011e80:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 2011e84:	e0bff717 	ldw	r2,-36(fp)
 2011e88:	00c00044 	movi	r3,1
 2011e8c:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 2011e90:	e0bff717 	ldw	r2,-36(fp)
 2011e94:	10000515 	stw	zero,20(r2)
      return c;
 2011e98:	e0bff717 	ldw	r2,-36(fp)
 2011e9c:	00008c06 	br	20120d0 <__mdiff+0x290>
    }
  if (i < 0)
 2011ea0:	e0bff117 	ldw	r2,-60(fp)
 2011ea4:	1000090e 	bge	r2,zero,2011ecc <__mdiff+0x8c>
    {
      c = a;
 2011ea8:	e0bffe17 	ldw	r2,-8(fp)
 2011eac:	e0bff715 	stw	r2,-36(fp)
      a = b;
 2011eb0:	e0bfff17 	ldw	r2,-4(fp)
 2011eb4:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 2011eb8:	e0bff717 	ldw	r2,-36(fp)
 2011ebc:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 2011ec0:	00800044 	movi	r2,1
 2011ec4:	e0bff115 	stw	r2,-60(fp)
 2011ec8:	00000106 	br	2011ed0 <__mdiff+0x90>
    }
  else
    i = 0;
 2011ecc:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 2011ed0:	e0bffe17 	ldw	r2,-8(fp)
 2011ed4:	10800117 	ldw	r2,4(r2)
 2011ed8:	100b883a 	mov	r5,r2
 2011edc:	e13ffd17 	ldw	r4,-12(fp)
 2011ee0:	2010f4c0 	call	2010f4c <_Balloc>
 2011ee4:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 2011ee8:	e0bff717 	ldw	r2,-36(fp)
 2011eec:	e0fff117 	ldw	r3,-60(fp)
 2011ef0:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 2011ef4:	e0bffe17 	ldw	r2,-8(fp)
 2011ef8:	10800417 	ldw	r2,16(r2)
 2011efc:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 2011f00:	e0bffe17 	ldw	r2,-8(fp)
 2011f04:	10800504 	addi	r2,r2,20
 2011f08:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 2011f0c:	e0bff217 	ldw	r2,-56(fp)
 2011f10:	1085883a 	add	r2,r2,r2
 2011f14:	1085883a 	add	r2,r2,r2
 2011f18:	1007883a 	mov	r3,r2
 2011f1c:	e0bff417 	ldw	r2,-48(fp)
 2011f20:	10c5883a 	add	r2,r2,r3
 2011f24:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 2011f28:	e0bfff17 	ldw	r2,-4(fp)
 2011f2c:	10800417 	ldw	r2,16(r2)
 2011f30:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 2011f34:	e0bfff17 	ldw	r2,-4(fp)
 2011f38:	10800504 	addi	r2,r2,20
 2011f3c:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 2011f40:	e0bff917 	ldw	r2,-28(fp)
 2011f44:	1085883a 	add	r2,r2,r2
 2011f48:	1085883a 	add	r2,r2,r2
 2011f4c:	1007883a 	mov	r3,r2
 2011f50:	e0bff517 	ldw	r2,-44(fp)
 2011f54:	10c5883a 	add	r2,r2,r3
 2011f58:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 2011f5c:	e0bff717 	ldw	r2,-36(fp)
 2011f60:	10800504 	addi	r2,r2,20
 2011f64:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 2011f68:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 2011f6c:	e0bff417 	ldw	r2,-48(fp)
 2011f70:	10800017 	ldw	r2,0(r2)
 2011f74:	10ffffcc 	andi	r3,r2,65535
 2011f78:	e0bff517 	ldw	r2,-44(fp)
 2011f7c:	10800017 	ldw	r2,0(r2)
 2011f80:	10bfffcc 	andi	r2,r2,65535
 2011f84:	1887c83a 	sub	r3,r3,r2
 2011f88:	e0bff317 	ldw	r2,-52(fp)
 2011f8c:	1885883a 	add	r2,r3,r2
 2011f90:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 2011f94:	e0bffb17 	ldw	r2,-20(fp)
 2011f98:	1005d43a 	srai	r2,r2,16
 2011f9c:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 2011fa0:	e0bff417 	ldw	r2,-48(fp)
 2011fa4:	10c00104 	addi	r3,r2,4
 2011fa8:	e0fff415 	stw	r3,-48(fp)
 2011fac:	10800017 	ldw	r2,0(r2)
 2011fb0:	1006d43a 	srli	r3,r2,16
 2011fb4:	e0bff517 	ldw	r2,-44(fp)
 2011fb8:	11000104 	addi	r4,r2,4
 2011fbc:	e13ff515 	stw	r4,-44(fp)
 2011fc0:	10800017 	ldw	r2,0(r2)
 2011fc4:	1004d43a 	srli	r2,r2,16
 2011fc8:	1887c83a 	sub	r3,r3,r2
 2011fcc:	e0bff317 	ldw	r2,-52(fp)
 2011fd0:	1885883a 	add	r2,r3,r2
 2011fd4:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 2011fd8:	e0bffc17 	ldw	r2,-16(fp)
 2011fdc:	1005d43a 	srai	r2,r2,16
 2011fe0:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 2011fe4:	e0bff617 	ldw	r2,-40(fp)
 2011fe8:	10c00104 	addi	r3,r2,4
 2011fec:	e0fff615 	stw	r3,-40(fp)
 2011ff0:	e0fffc17 	ldw	r3,-16(fp)
 2011ff4:	1808943a 	slli	r4,r3,16
 2011ff8:	e0fffb17 	ldw	r3,-20(fp)
 2011ffc:	18ffffcc 	andi	r3,r3,65535
 2012000:	20c6b03a 	or	r3,r4,r3
 2012004:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 2012008:	e0fff517 	ldw	r3,-44(fp)
 201200c:	e0bffa17 	ldw	r2,-24(fp)
 2012010:	18bfd636 	bltu	r3,r2,2011f6c <__mdiff+0x12c>
  while (xa < xae)
 2012014:	00001d06 	br	201208c <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 2012018:	e0bff417 	ldw	r2,-48(fp)
 201201c:	10800017 	ldw	r2,0(r2)
 2012020:	10ffffcc 	andi	r3,r2,65535
 2012024:	e0bff317 	ldw	r2,-52(fp)
 2012028:	1885883a 	add	r2,r3,r2
 201202c:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 2012030:	e0bffb17 	ldw	r2,-20(fp)
 2012034:	1005d43a 	srai	r2,r2,16
 2012038:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 201203c:	e0bff417 	ldw	r2,-48(fp)
 2012040:	10c00104 	addi	r3,r2,4
 2012044:	e0fff415 	stw	r3,-48(fp)
 2012048:	10800017 	ldw	r2,0(r2)
 201204c:	1006d43a 	srli	r3,r2,16
 2012050:	e0bff317 	ldw	r2,-52(fp)
 2012054:	1885883a 	add	r2,r3,r2
 2012058:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 201205c:	e0bffc17 	ldw	r2,-16(fp)
 2012060:	1005d43a 	srai	r2,r2,16
 2012064:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 2012068:	e0bff617 	ldw	r2,-40(fp)
 201206c:	10c00104 	addi	r3,r2,4
 2012070:	e0fff615 	stw	r3,-40(fp)
 2012074:	e0fffc17 	ldw	r3,-16(fp)
 2012078:	1808943a 	slli	r4,r3,16
 201207c:	e0fffb17 	ldw	r3,-20(fp)
 2012080:	18ffffcc 	andi	r3,r3,65535
 2012084:	20c6b03a 	or	r3,r4,r3
 2012088:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 201208c:	e0fff417 	ldw	r3,-48(fp)
 2012090:	e0bff817 	ldw	r2,-32(fp)
 2012094:	18bfe036 	bltu	r3,r2,2012018 <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 2012098:	00000306 	br	20120a8 <__mdiff+0x268>
    wa--;
 201209c:	e0bff217 	ldw	r2,-56(fp)
 20120a0:	10bfffc4 	addi	r2,r2,-1
 20120a4:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 20120a8:	e0bff617 	ldw	r2,-40(fp)
 20120ac:	10bfff04 	addi	r2,r2,-4
 20120b0:	e0bff615 	stw	r2,-40(fp)
 20120b4:	e0bff617 	ldw	r2,-40(fp)
 20120b8:	10800017 	ldw	r2,0(r2)
 20120bc:	103ff726 	beq	r2,zero,201209c <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 20120c0:	e0bff717 	ldw	r2,-36(fp)
 20120c4:	e0fff217 	ldw	r3,-56(fp)
 20120c8:	10c00415 	stw	r3,16(r2)
  return c;
 20120cc:	e0bff717 	ldw	r2,-36(fp)
}
 20120d0:	e037883a 	mov	sp,fp
 20120d4:	dfc00117 	ldw	ra,4(sp)
 20120d8:	df000017 	ldw	fp,0(sp)
 20120dc:	dec00204 	addi	sp,sp,8
 20120e0:	f800283a 	ret

020120e4 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 20120e4:	defff804 	addi	sp,sp,-32
 20120e8:	df000715 	stw	fp,28(sp)
 20120ec:	dc000615 	stw	r16,24(sp)
 20120f0:	df000704 	addi	fp,sp,28
 20120f4:	e13ffd15 	stw	r4,-12(fp)
 20120f8:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 20120fc:	e0bffd17 	ldw	r2,-12(fp)
 2012100:	e0bff915 	stw	r2,-28(fp)
 2012104:	e0bffe17 	ldw	r2,-8(fp)
 2012108:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 201210c:	e0bffa17 	ldw	r2,-24(fp)
 2012110:	10dffc2c 	andhi	r3,r2,32752
 2012114:	00bf3034 	movhi	r2,64704
 2012118:	1885883a 	add	r2,r3,r2
 201211c:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 2012120:	0400040e 	bge	zero,r16,2012134 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 2012124:	8005883a 	mov	r2,r16
 2012128:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 201212c:	e03ffb15 	stw	zero,-20(fp)
 2012130:	00001406 	br	2012184 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 2012134:	0405c83a 	sub	r2,zero,r16
 2012138:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 201213c:	80800508 	cmpgei	r2,r16,20
 2012140:	1000051e 	bne	r2,zero,2012158 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 2012144:	00800234 	movhi	r2,8
 2012148:	1405d83a 	sra	r2,r2,r16
 201214c:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 2012150:	e03ffb15 	stw	zero,-20(fp)
 2012154:	00000b06 	br	2012184 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 2012158:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 201215c:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 2012160:	808007c8 	cmpgei	r2,r16,31
 2012164:	1000051e 	bne	r2,zero,201217c <__ulp+0x98>
 2012168:	008007c4 	movi	r2,31
 201216c:	1405c83a 	sub	r2,r2,r16
 2012170:	00c00044 	movi	r3,1
 2012174:	1884983a 	sll	r2,r3,r2
 2012178:	00000106 	br	2012180 <__ulp+0x9c>
 201217c:	00800044 	movi	r2,1
 2012180:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 2012184:	e0bffb17 	ldw	r2,-20(fp)
 2012188:	e0fffc17 	ldw	r3,-16(fp)
 201218c:	1009883a 	mov	r4,r2
 2012190:	180b883a 	mov	r5,r3
}
 2012194:	2005883a 	mov	r2,r4
 2012198:	2807883a 	mov	r3,r5
 201219c:	e6ffff04 	addi	sp,fp,-4
 20121a0:	df000117 	ldw	fp,4(sp)
 20121a4:	dc000017 	ldw	r16,0(sp)
 20121a8:	dec00204 	addi	sp,sp,8
 20121ac:	f800283a 	ret

020121b0 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 20121b0:	defff404 	addi	sp,sp,-48
 20121b4:	dfc00b15 	stw	ra,44(sp)
 20121b8:	df000a15 	stw	fp,40(sp)
 20121bc:	df000a04 	addi	fp,sp,40
 20121c0:	e13ffe15 	stw	r4,-8(fp)
 20121c4:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 20121c8:	e0bffe17 	ldw	r2,-8(fp)
 20121cc:	10800504 	addi	r2,r2,20
 20121d0:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 20121d4:	e0bffe17 	ldw	r2,-8(fp)
 20121d8:	10800417 	ldw	r2,16(r2)
 20121dc:	1085883a 	add	r2,r2,r2
 20121e0:	1085883a 	add	r2,r2,r2
 20121e4:	1007883a 	mov	r3,r2
 20121e8:	e0bff717 	ldw	r2,-36(fp)
 20121ec:	10c5883a 	add	r2,r2,r3
 20121f0:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 20121f4:	e0bff617 	ldw	r2,-40(fp)
 20121f8:	10bfff04 	addi	r2,r2,-4
 20121fc:	e0bff615 	stw	r2,-40(fp)
 2012200:	e0bff617 	ldw	r2,-40(fp)
 2012204:	10800017 	ldw	r2,0(r2)
 2012208:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 201220c:	e13ff817 	ldw	r4,-32(fp)
 2012210:	20114180 	call	2011418 <__hi0bits>
 2012214:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 2012218:	00c00804 	movi	r3,32
 201221c:	e0bff917 	ldw	r2,-28(fp)
 2012220:	1887c83a 	sub	r3,r3,r2
 2012224:	e0bfff17 	ldw	r2,-4(fp)
 2012228:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 201222c:	e0bff917 	ldw	r2,-28(fp)
 2012230:	108002c8 	cmpgei	r2,r2,11
 2012234:	10001e1e 	bne	r2,zero,20122b0 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 2012238:	00c002c4 	movi	r3,11
 201223c:	e0bff917 	ldw	r2,-28(fp)
 2012240:	1885c83a 	sub	r2,r3,r2
 2012244:	e0fff817 	ldw	r3,-32(fp)
 2012248:	1884d83a 	srl	r2,r3,r2
 201224c:	108ffc34 	orhi	r2,r2,16368
 2012250:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 2012254:	e0bff617 	ldw	r2,-40(fp)
 2012258:	e0fff717 	ldw	r3,-36(fp)
 201225c:	1880062e 	bgeu	r3,r2,2012278 <__b2d+0xc8>
 2012260:	e0bff617 	ldw	r2,-40(fp)
 2012264:	10bfff04 	addi	r2,r2,-4
 2012268:	e0bff615 	stw	r2,-40(fp)
 201226c:	e0bff617 	ldw	r2,-40(fp)
 2012270:	10800017 	ldw	r2,0(r2)
 2012274:	00000106 	br	201227c <__b2d+0xcc>
 2012278:	0005883a 	mov	r2,zero
 201227c:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 2012280:	e0bff917 	ldw	r2,-28(fp)
 2012284:	10800544 	addi	r2,r2,21
 2012288:	e0fff817 	ldw	r3,-32(fp)
 201228c:	1886983a 	sll	r3,r3,r2
 2012290:	010002c4 	movi	r4,11
 2012294:	e0bff917 	ldw	r2,-28(fp)
 2012298:	2085c83a 	sub	r2,r4,r2
 201229c:	e13ffa17 	ldw	r4,-24(fp)
 20122a0:	2084d83a 	srl	r2,r4,r2
 20122a4:	1884b03a 	or	r2,r3,r2
 20122a8:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 20122ac:	00003606 	br	2012388 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 20122b0:	e0bff617 	ldw	r2,-40(fp)
 20122b4:	e0fff717 	ldw	r3,-36(fp)
 20122b8:	1880062e 	bgeu	r3,r2,20122d4 <__b2d+0x124>
 20122bc:	e0bff617 	ldw	r2,-40(fp)
 20122c0:	10bfff04 	addi	r2,r2,-4
 20122c4:	e0bff615 	stw	r2,-40(fp)
 20122c8:	e0bff617 	ldw	r2,-40(fp)
 20122cc:	10800017 	ldw	r2,0(r2)
 20122d0:	00000106 	br	20122d8 <__b2d+0x128>
 20122d4:	0005883a 	mov	r2,zero
 20122d8:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 20122dc:	e0bff917 	ldw	r2,-28(fp)
 20122e0:	10bffd44 	addi	r2,r2,-11
 20122e4:	e0bff915 	stw	r2,-28(fp)
 20122e8:	e0bff917 	ldw	r2,-28(fp)
 20122ec:	10002126 	beq	r2,zero,2012374 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 20122f0:	e0fff817 	ldw	r3,-32(fp)
 20122f4:	e0bff917 	ldw	r2,-28(fp)
 20122f8:	1886983a 	sll	r3,r3,r2
 20122fc:	01000804 	movi	r4,32
 2012300:	e0bff917 	ldw	r2,-28(fp)
 2012304:	2085c83a 	sub	r2,r4,r2
 2012308:	e13ffb17 	ldw	r4,-20(fp)
 201230c:	2084d83a 	srl	r2,r4,r2
 2012310:	1884b03a 	or	r2,r3,r2
 2012314:	108ffc34 	orhi	r2,r2,16368
 2012318:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 201231c:	e0bff617 	ldw	r2,-40(fp)
 2012320:	e0fff717 	ldw	r3,-36(fp)
 2012324:	1880062e 	bgeu	r3,r2,2012340 <__b2d+0x190>
 2012328:	e0bff617 	ldw	r2,-40(fp)
 201232c:	10bfff04 	addi	r2,r2,-4
 2012330:	e0bff615 	stw	r2,-40(fp)
 2012334:	e0bff617 	ldw	r2,-40(fp)
 2012338:	10800017 	ldw	r2,0(r2)
 201233c:	00000106 	br	2012344 <__b2d+0x194>
 2012340:	0005883a 	mov	r2,zero
 2012344:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 2012348:	e0fffb17 	ldw	r3,-20(fp)
 201234c:	e0bff917 	ldw	r2,-28(fp)
 2012350:	1886983a 	sll	r3,r3,r2
 2012354:	01000804 	movi	r4,32
 2012358:	e0bff917 	ldw	r2,-28(fp)
 201235c:	2085c83a 	sub	r2,r4,r2
 2012360:	e13ff817 	ldw	r4,-32(fp)
 2012364:	2084d83a 	srl	r2,r4,r2
 2012368:	1884b03a 	or	r2,r3,r2
 201236c:	e0bffc15 	stw	r2,-16(fp)
 2012370:	00000506 	br	2012388 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 2012374:	e0bff817 	ldw	r2,-32(fp)
 2012378:	108ffc34 	orhi	r2,r2,16368
 201237c:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 2012380:	e0bffb17 	ldw	r2,-20(fp)
 2012384:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 2012388:	e0bffc17 	ldw	r2,-16(fp)
 201238c:	e0fffd17 	ldw	r3,-12(fp)
 2012390:	1009883a 	mov	r4,r2
 2012394:	180b883a 	mov	r5,r3
}
 2012398:	2005883a 	mov	r2,r4
 201239c:	2807883a 	mov	r3,r5
 20123a0:	e037883a 	mov	sp,fp
 20123a4:	dfc00117 	ldw	ra,4(sp)
 20123a8:	df000017 	ldw	fp,0(sp)
 20123ac:	dec00204 	addi	sp,sp,8
 20123b0:	f800283a 	ret

020123b4 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 20123b4:	defff004 	addi	sp,sp,-64
 20123b8:	dfc00f15 	stw	ra,60(sp)
 20123bc:	df000e15 	stw	fp,56(sp)
 20123c0:	dc000d15 	stw	r16,52(sp)
 20123c4:	df000e04 	addi	fp,sp,56
 20123c8:	e13ffb15 	stw	r4,-20(fp)
 20123cc:	e17ffc15 	stw	r5,-16(fp)
 20123d0:	e1bffd15 	stw	r6,-12(fp)
 20123d4:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 20123d8:	e0bffc17 	ldw	r2,-16(fp)
 20123dc:	e0bff715 	stw	r2,-36(fp)
 20123e0:	e0bffd17 	ldw	r2,-12(fp)
 20123e4:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 20123e8:	e0bffc17 	ldw	r2,-16(fp)
 20123ec:	e0bff715 	stw	r2,-36(fp)
 20123f0:	e0bffd17 	ldw	r2,-12(fp)
 20123f4:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 20123f8:	01400044 	movi	r5,1
 20123fc:	e13ffb17 	ldw	r4,-20(fp)
 2012400:	2010f4c0 	call	2010f4c <_Balloc>
 2012404:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 2012408:	e0bff417 	ldw	r2,-48(fp)
 201240c:	10800504 	addi	r2,r2,20
 2012410:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 2012414:	e0fff817 	ldw	r3,-32(fp)
 2012418:	00800434 	movhi	r2,16
 201241c:	10bfffc4 	addi	r2,r2,-1
 2012420:	1884703a 	and	r2,r3,r2
 2012424:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 2012428:	e0fff817 	ldw	r3,-32(fp)
 201242c:	00a00034 	movhi	r2,32768
 2012430:	10bfffc4 	addi	r2,r2,-1
 2012434:	1884703a 	and	r2,r3,r2
 2012438:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 201243c:	e0bff817 	ldw	r2,-32(fp)
 2012440:	1004d53a 	srli	r2,r2,20
 2012444:	e0bff615 	stw	r2,-40(fp)
 2012448:	e0bff617 	ldw	r2,-40(fp)
 201244c:	10000326 	beq	r2,zero,201245c <__d2b+0xa8>
    z |= Exp_msk1;
 2012450:	e0bffa17 	ldw	r2,-24(fp)
 2012454:	10800434 	orhi	r2,r2,16
 2012458:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 201245c:	e0bff717 	ldw	r2,-36(fp)
 2012460:	10002826 	beq	r2,zero,2012504 <__d2b+0x150>
    {
      y = d1;
 2012464:	e0bff717 	ldw	r2,-36(fp)
 2012468:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 201246c:	e0bff904 	addi	r2,fp,-28
 2012470:	1009883a 	mov	r4,r2
 2012474:	20114a80 	call	20114a8 <__lo0bits>
 2012478:	e0bff315 	stw	r2,-52(fp)
      if (k)
 201247c:	e0bff317 	ldw	r2,-52(fp)
 2012480:	10000e26 	beq	r2,zero,20124bc <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 2012484:	e0fffa17 	ldw	r3,-24(fp)
 2012488:	01000804 	movi	r4,32
 201248c:	e0bff317 	ldw	r2,-52(fp)
 2012490:	2085c83a 	sub	r2,r4,r2
 2012494:	1886983a 	sll	r3,r3,r2
 2012498:	e0bff917 	ldw	r2,-28(fp)
 201249c:	1886b03a 	or	r3,r3,r2
 20124a0:	e0bff517 	ldw	r2,-44(fp)
 20124a4:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 20124a8:	e0fffa17 	ldw	r3,-24(fp)
 20124ac:	e0bff317 	ldw	r2,-52(fp)
 20124b0:	1884d83a 	srl	r2,r3,r2
 20124b4:	e0bffa15 	stw	r2,-24(fp)
 20124b8:	00000306 	br	20124c8 <__d2b+0x114>
	}
      else
	x[0] = y;
 20124bc:	e0fff917 	ldw	r3,-28(fp)
 20124c0:	e0bff517 	ldw	r2,-44(fp)
 20124c4:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 20124c8:	e0bff517 	ldw	r2,-44(fp)
 20124cc:	10800104 	addi	r2,r2,4
 20124d0:	e0fffa17 	ldw	r3,-24(fp)
 20124d4:	10c00015 	stw	r3,0(r2)
 20124d8:	10800017 	ldw	r2,0(r2)
 20124dc:	10000226 	beq	r2,zero,20124e8 <__d2b+0x134>
 20124e0:	00800084 	movi	r2,2
 20124e4:	00000106 	br	20124ec <__d2b+0x138>
 20124e8:	00800044 	movi	r2,1
 20124ec:	e0fff417 	ldw	r3,-48(fp)
 20124f0:	18800415 	stw	r2,16(r3)
 20124f4:	e0bff417 	ldw	r2,-48(fp)
 20124f8:	10800417 	ldw	r2,16(r2)
 20124fc:	e0bff215 	stw	r2,-56(fp)
 2012500:	00001006 	br	2012544 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 2012504:	e0bffa04 	addi	r2,fp,-24
 2012508:	1009883a 	mov	r4,r2
 201250c:	20114a80 	call	20114a8 <__lo0bits>
 2012510:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 2012514:	e0fffa17 	ldw	r3,-24(fp)
 2012518:	e0bff517 	ldw	r2,-44(fp)
 201251c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 2012520:	e0bff417 	ldw	r2,-48(fp)
 2012524:	00c00044 	movi	r3,1
 2012528:	10c00415 	stw	r3,16(r2)
 201252c:	e0bff417 	ldw	r2,-48(fp)
 2012530:	10800417 	ldw	r2,16(r2)
 2012534:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 2012538:	e0bff317 	ldw	r2,-52(fp)
 201253c:	10800804 	addi	r2,r2,32
 2012540:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 2012544:	e0bff617 	ldw	r2,-40(fp)
 2012548:	10000c26 	beq	r2,zero,201257c <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 201254c:	e0bff617 	ldw	r2,-40(fp)
 2012550:	10fef344 	addi	r3,r2,-1075
 2012554:	e0bff317 	ldw	r2,-52(fp)
 2012558:	1887883a 	add	r3,r3,r2
 201255c:	e0bffe17 	ldw	r2,-8(fp)
 2012560:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 2012564:	00c00d44 	movi	r3,53
 2012568:	e0bff317 	ldw	r2,-52(fp)
 201256c:	1887c83a 	sub	r3,r3,r2
 2012570:	e0800217 	ldw	r2,8(fp)
 2012574:	10c00015 	stw	r3,0(r2)
 2012578:	00001706 	br	20125d8 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 201257c:	e0bff617 	ldw	r2,-40(fp)
 2012580:	10fef384 	addi	r3,r2,-1074
 2012584:	e0bff317 	ldw	r2,-52(fp)
 2012588:	1887883a 	add	r3,r3,r2
 201258c:	e0bffe17 	ldw	r2,-8(fp)
 2012590:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 2012594:	e0bff217 	ldw	r2,-56(fp)
 2012598:	1020917a 	slli	r16,r2,5
 201259c:	e0fff217 	ldw	r3,-56(fp)
 20125a0:	00900034 	movhi	r2,16384
 20125a4:	10bfffc4 	addi	r2,r2,-1
 20125a8:	1885883a 	add	r2,r3,r2
 20125ac:	1085883a 	add	r2,r2,r2
 20125b0:	1085883a 	add	r2,r2,r2
 20125b4:	1007883a 	mov	r3,r2
 20125b8:	e0bff517 	ldw	r2,-44(fp)
 20125bc:	10c5883a 	add	r2,r2,r3
 20125c0:	10800017 	ldw	r2,0(r2)
 20125c4:	1009883a 	mov	r4,r2
 20125c8:	20114180 	call	2011418 <__hi0bits>
 20125cc:	8087c83a 	sub	r3,r16,r2
 20125d0:	e0800217 	ldw	r2,8(fp)
 20125d4:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 20125d8:	e0bff417 	ldw	r2,-48(fp)
}
 20125dc:	e6ffff04 	addi	sp,fp,-4
 20125e0:	dfc00217 	ldw	ra,8(sp)
 20125e4:	df000117 	ldw	fp,4(sp)
 20125e8:	dc000017 	ldw	r16,0(sp)
 20125ec:	dec00304 	addi	sp,sp,12
 20125f0:	f800283a 	ret

020125f4 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 20125f4:	defff504 	addi	sp,sp,-44
 20125f8:	dfc00a15 	stw	ra,40(sp)
 20125fc:	df000915 	stw	fp,36(sp)
 2012600:	df000904 	addi	fp,sp,36
 2012604:	e13ffe15 	stw	r4,-8(fp)
 2012608:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 201260c:	e0bffc04 	addi	r2,fp,-16
 2012610:	100b883a 	mov	r5,r2
 2012614:	e13ffe17 	ldw	r4,-8(fp)
 2012618:	20121b00 	call	20121b0 <__b2d>
 201261c:	1009883a 	mov	r4,r2
 2012620:	180b883a 	mov	r5,r3
 2012624:	e13ff815 	stw	r4,-32(fp)
 2012628:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 201262c:	e0bffd04 	addi	r2,fp,-12
 2012630:	100b883a 	mov	r5,r2
 2012634:	e13fff17 	ldw	r4,-4(fp)
 2012638:	20121b00 	call	20121b0 <__b2d>
 201263c:	1009883a 	mov	r4,r2
 2012640:	180b883a 	mov	r5,r3
 2012644:	e13ffa15 	stw	r4,-24(fp)
 2012648:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 201264c:	e0fffc17 	ldw	r3,-16(fp)
 2012650:	e0bffd17 	ldw	r2,-12(fp)
 2012654:	1887c83a 	sub	r3,r3,r2
 2012658:	e0bffe17 	ldw	r2,-8(fp)
 201265c:	11000417 	ldw	r4,16(r2)
 2012660:	e0bfff17 	ldw	r2,-4(fp)
 2012664:	10800417 	ldw	r2,16(r2)
 2012668:	2085c83a 	sub	r2,r4,r2
 201266c:	1004917a 	slli	r2,r2,5
 2012670:	1885883a 	add	r2,r3,r2
 2012674:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 2012678:	e0bff717 	ldw	r2,-36(fp)
 201267c:	0080060e 	bge	zero,r2,2012698 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 2012680:	e0fff917 	ldw	r3,-28(fp)
 2012684:	e0bff717 	ldw	r2,-36(fp)
 2012688:	1004953a 	slli	r2,r2,20
 201268c:	1885883a 	add	r2,r3,r2
 2012690:	e0bff915 	stw	r2,-28(fp)
 2012694:	00000806 	br	20126b8 <__ratio+0xc4>
  else
    {
      k = -k;
 2012698:	e0bff717 	ldw	r2,-36(fp)
 201269c:	0085c83a 	sub	r2,zero,r2
 20126a0:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 20126a4:	e0fffb17 	ldw	r3,-20(fp)
 20126a8:	e0bff717 	ldw	r2,-36(fp)
 20126ac:	1004953a 	slli	r2,r2,20
 20126b0:	1885883a 	add	r2,r3,r2
 20126b4:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 20126b8:	e0bff817 	ldw	r2,-32(fp)
 20126bc:	e0fff917 	ldw	r3,-28(fp)
 20126c0:	e13ffa17 	ldw	r4,-24(fp)
 20126c4:	e17ffb17 	ldw	r5,-20(fp)
 20126c8:	200d883a 	mov	r6,r4
 20126cc:	280f883a 	mov	r7,r5
 20126d0:	1009883a 	mov	r4,r2
 20126d4:	180b883a 	mov	r5,r3
 20126d8:	20075140 	call	2007514 <__divdf3>
 20126dc:	100f883a 	mov	r7,r2
 20126e0:	1811883a 	mov	r8,r3
 20126e4:	380b883a 	mov	r5,r7
 20126e8:	400d883a 	mov	r6,r8
 20126ec:	2807883a 	mov	r3,r5
 20126f0:	3009883a 	mov	r4,r6
}
 20126f4:	1805883a 	mov	r2,r3
 20126f8:	2007883a 	mov	r3,r4
 20126fc:	e037883a 	mov	sp,fp
 2012700:	dfc00117 	ldw	ra,4(sp)
 2012704:	df000017 	ldw	fp,0(sp)
 2012708:	dec00204 	addi	sp,sp,8
 201270c:	f800283a 	ret

02012710 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 2012710:	defffb04 	addi	sp,sp,-20
 2012714:	dfc00415 	stw	ra,16(sp)
 2012718:	df000315 	stw	fp,12(sp)
 201271c:	df000304 	addi	fp,sp,12
 2012720:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 2012724:	e03ffd15 	stw	zero,-12(fp)
 2012728:	008ffc34 	movhi	r2,16368
 201272c:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 2012730:	e0bfff17 	ldw	r2,-4(fp)
 2012734:	10800608 	cmpgei	r2,r2,24
 2012738:	1000141e 	bne	r2,zero,201278c <_mprec_log10+0x7c>
    return tens[dig];
 201273c:	008080b4 	movhi	r2,514
 2012740:	108a2e04 	addi	r2,r2,10424
 2012744:	e0ffff17 	ldw	r3,-4(fp)
 2012748:	180690fa 	slli	r3,r3,3
 201274c:	10c9883a 	add	r4,r2,r3
 2012750:	20800017 	ldw	r2,0(r4)
 2012754:	20c00117 	ldw	r3,4(r4)
 2012758:	00001006 	br	201279c <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 201275c:	000d883a 	mov	r6,zero
 2012760:	01d00934 	movhi	r7,16420
 2012764:	e13ffd17 	ldw	r4,-12(fp)
 2012768:	e17ffe17 	ldw	r5,-8(fp)
 201276c:	20080540 	call	2008054 <__muldf3>
 2012770:	1009883a 	mov	r4,r2
 2012774:	180b883a 	mov	r5,r3
 2012778:	e13ffd15 	stw	r4,-12(fp)
 201277c:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 2012780:	e0bfff17 	ldw	r2,-4(fp)
 2012784:	10bfffc4 	addi	r2,r2,-1
 2012788:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 201278c:	e0bfff17 	ldw	r2,-4(fp)
 2012790:	00bff216 	blt	zero,r2,201275c <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 2012794:	e0bffd17 	ldw	r2,-12(fp)
 2012798:	e0fffe17 	ldw	r3,-8(fp)
 201279c:	1009883a 	mov	r4,r2
 20127a0:	180b883a 	mov	r5,r3
}
 20127a4:	2005883a 	mov	r2,r4
 20127a8:	2807883a 	mov	r3,r5
 20127ac:	e037883a 	mov	sp,fp
 20127b0:	dfc00117 	ldw	ra,4(sp)
 20127b4:	df000017 	ldw	fp,0(sp)
 20127b8:	dec00204 	addi	sp,sp,8
 20127bc:	f800283a 	ret

020127c0 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 20127c0:	defff904 	addi	sp,sp,-28
 20127c4:	df000615 	stw	fp,24(sp)
 20127c8:	df000604 	addi	fp,sp,24
 20127cc:	e13ffd15 	stw	r4,-12(fp)
 20127d0:	e17ffe15 	stw	r5,-8(fp)
 20127d4:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 20127d8:	e0bffe17 	ldw	r2,-8(fp)
 20127dc:	10bfffc4 	addi	r2,r2,-1
 20127e0:	1005d17a 	srai	r2,r2,5
 20127e4:	10800044 	addi	r2,r2,1
 20127e8:	1085883a 	add	r2,r2,r2
 20127ec:	1085883a 	add	r2,r2,r2
 20127f0:	1007883a 	mov	r3,r2
 20127f4:	e0bffd17 	ldw	r2,-12(fp)
 20127f8:	10c5883a 	add	r2,r2,r3
 20127fc:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 2012800:	e0bfff17 	ldw	r2,-4(fp)
 2012804:	10800504 	addi	r2,r2,20
 2012808:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 201280c:	e0bfff17 	ldw	r2,-4(fp)
 2012810:	10800417 	ldw	r2,16(r2)
 2012814:	1085883a 	add	r2,r2,r2
 2012818:	1085883a 	add	r2,r2,r2
 201281c:	1007883a 	mov	r3,r2
 2012820:	e0bffa17 	ldw	r2,-24(fp)
 2012824:	10c5883a 	add	r2,r2,r3
 2012828:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 201282c:	00000806 	br	2012850 <__copybits+0x90>
		*c++ = *x++;
 2012830:	e0bffd17 	ldw	r2,-12(fp)
 2012834:	10c00104 	addi	r3,r2,4
 2012838:	e0fffd15 	stw	r3,-12(fp)
 201283c:	e0fffa17 	ldw	r3,-24(fp)
 2012840:	19000104 	addi	r4,r3,4
 2012844:	e13ffa15 	stw	r4,-24(fp)
 2012848:	18c00017 	ldw	r3,0(r3)
 201284c:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 2012850:	e0fffa17 	ldw	r3,-24(fp)
 2012854:	e0bffc17 	ldw	r2,-16(fp)
 2012858:	18bff536 	bltu	r3,r2,2012830 <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 201285c:	00000406 	br	2012870 <__copybits+0xb0>
		*c++ = 0;
 2012860:	e0bffd17 	ldw	r2,-12(fp)
 2012864:	10c00104 	addi	r3,r2,4
 2012868:	e0fffd15 	stw	r3,-12(fp)
 201286c:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 2012870:	e0fffd17 	ldw	r3,-12(fp)
 2012874:	e0bffb17 	ldw	r2,-20(fp)
 2012878:	18bff936 	bltu	r3,r2,2012860 <__copybits+0xa0>
		*c++ = 0;
}
 201287c:	0001883a 	nop
 2012880:	e037883a 	mov	sp,fp
 2012884:	df000017 	ldw	fp,0(sp)
 2012888:	dec00104 	addi	sp,sp,4
 201288c:	f800283a 	ret

02012890 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 2012890:	defff704 	addi	sp,sp,-36
 2012894:	df000815 	stw	fp,32(sp)
 2012898:	df000804 	addi	fp,sp,32
 201289c:	e13ffe15 	stw	r4,-8(fp)
 20128a0:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 20128a4:	e0bffe17 	ldw	r2,-8(fp)
 20128a8:	10800504 	addi	r2,r2,20
 20128ac:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 20128b0:	e0bffe17 	ldw	r2,-8(fp)
 20128b4:	10800417 	ldw	r2,16(r2)
 20128b8:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 20128bc:	e0bfff17 	ldw	r2,-4(fp)
 20128c0:	1005d17a 	srai	r2,r2,5
 20128c4:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 20128c8:	e0bff817 	ldw	r2,-32(fp)
 20128cc:	e0fffa17 	ldw	r3,-24(fp)
 20128d0:	1880030e 	bge	r3,r2,20128e0 <__any_on+0x50>
		n = nwds;
 20128d4:	e0bffa17 	ldw	r2,-24(fp)
 20128d8:	e0bff815 	stw	r2,-32(fp)
 20128dc:	00001f06 	br	201295c <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 20128e0:	e0fff817 	ldw	r3,-32(fp)
 20128e4:	e0bffa17 	ldw	r2,-24(fp)
 20128e8:	18801c0e 	bge	r3,r2,201295c <__any_on+0xcc>
 20128ec:	e0bfff17 	ldw	r2,-4(fp)
 20128f0:	108007cc 	andi	r2,r2,31
 20128f4:	e0bfff15 	stw	r2,-4(fp)
 20128f8:	e0bfff17 	ldw	r2,-4(fp)
 20128fc:	10001726 	beq	r2,zero,201295c <__any_on+0xcc>
		x1 = x2 = x[n];
 2012900:	e0bff817 	ldw	r2,-32(fp)
 2012904:	1085883a 	add	r2,r2,r2
 2012908:	1085883a 	add	r2,r2,r2
 201290c:	1007883a 	mov	r3,r2
 2012910:	e0bff917 	ldw	r2,-28(fp)
 2012914:	10c5883a 	add	r2,r2,r3
 2012918:	10800017 	ldw	r2,0(r2)
 201291c:	e0bffb15 	stw	r2,-20(fp)
 2012920:	e0bffb17 	ldw	r2,-20(fp)
 2012924:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 2012928:	e0fffc17 	ldw	r3,-16(fp)
 201292c:	e0bfff17 	ldw	r2,-4(fp)
 2012930:	1884d83a 	srl	r2,r3,r2
 2012934:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 2012938:	e0fffc17 	ldw	r3,-16(fp)
 201293c:	e0bfff17 	ldw	r2,-4(fp)
 2012940:	1884983a 	sll	r2,r3,r2
 2012944:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 2012948:	e0fffc17 	ldw	r3,-16(fp)
 201294c:	e0bffb17 	ldw	r2,-20(fp)
 2012950:	18800226 	beq	r3,r2,201295c <__any_on+0xcc>
			return 1;
 2012954:	00800044 	movi	r2,1
 2012958:	00001606 	br	20129b4 <__any_on+0x124>
		}
	x0 = x;
 201295c:	e0bff917 	ldw	r2,-28(fp)
 2012960:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 2012964:	e0bff817 	ldw	r2,-32(fp)
 2012968:	1085883a 	add	r2,r2,r2
 201296c:	1085883a 	add	r2,r2,r2
 2012970:	1007883a 	mov	r3,r2
 2012974:	e0bff917 	ldw	r2,-28(fp)
 2012978:	10c5883a 	add	r2,r2,r3
 201297c:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 2012980:	00000806 	br	20129a4 <__any_on+0x114>
		if (*--x)
 2012984:	e0bff917 	ldw	r2,-28(fp)
 2012988:	10bfff04 	addi	r2,r2,-4
 201298c:	e0bff915 	stw	r2,-28(fp)
 2012990:	e0bff917 	ldw	r2,-28(fp)
 2012994:	10800017 	ldw	r2,0(r2)
 2012998:	10000226 	beq	r2,zero,20129a4 <__any_on+0x114>
			return 1;
 201299c:	00800044 	movi	r2,1
 20129a0:	00000406 	br	20129b4 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 20129a4:	e0bff917 	ldw	r2,-28(fp)
 20129a8:	e0fffd17 	ldw	r3,-12(fp)
 20129ac:	18bff536 	bltu	r3,r2,2012984 <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 20129b0:	0005883a 	mov	r2,zero
}
 20129b4:	e037883a 	mov	sp,fp
 20129b8:	df000017 	ldw	fp,0(sp)
 20129bc:	dec00104 	addi	sp,sp,4
 20129c0:	f800283a 	ret

020129c4 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 20129c4:	deffe104 	addi	sp,sp,-124
 20129c8:	dfc01e15 	stw	ra,120(sp)
 20129cc:	df001d15 	stw	fp,116(sp)
 20129d0:	df001d04 	addi	fp,sp,116
 20129d4:	e13ffd15 	stw	r4,-12(fp)
 20129d8:	e17ffe15 	stw	r5,-8(fp)
 20129dc:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 20129e0:	e0bffe17 	ldw	r2,-8(fp)
 20129e4:	1000041e 	bne	r2,zero,20129f8 <_realloc_r+0x34>
 20129e8:	e17fff17 	ldw	r5,-4(fp)
 20129ec:	e13ffd17 	ldw	r4,-12(fp)
 20129f0:	201000c0 	call	201000c <_malloc_r>
 20129f4:	0002ea06 	br	20135a0 <_realloc_r+0xbdc>

  MALLOC_LOCK;
 20129f8:	e13ffd17 	ldw	r4,-12(fp)
 20129fc:	20172700 	call	2017270 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 2012a00:	e0bffe17 	ldw	r2,-8(fp)
 2012a04:	10bffe04 	addi	r2,r2,-8
 2012a08:	e0bfef15 	stw	r2,-68(fp)
 2012a0c:	e0bfef17 	ldw	r2,-68(fp)
 2012a10:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 2012a14:	e0bfef17 	ldw	r2,-68(fp)
 2012a18:	10c00117 	ldw	r3,4(r2)
 2012a1c:	00bfff04 	movi	r2,-4
 2012a20:	1884703a 	and	r2,r3,r2
 2012a24:	e0bff015 	stw	r2,-64(fp)
 2012a28:	e0bff017 	ldw	r2,-64(fp)
 2012a2c:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 2012a30:	e0bfff17 	ldw	r2,-4(fp)
 2012a34:	108002c4 	addi	r2,r2,11
 2012a38:	108005f0 	cmpltui	r2,r2,23
 2012a3c:	1000051e 	bne	r2,zero,2012a54 <_realloc_r+0x90>
 2012a40:	e0bfff17 	ldw	r2,-4(fp)
 2012a44:	10c002c4 	addi	r3,r2,11
 2012a48:	00bffe04 	movi	r2,-8
 2012a4c:	1884703a 	and	r2,r3,r2
 2012a50:	00000106 	br	2012a58 <_realloc_r+0x94>
 2012a54:	00800404 	movi	r2,16
 2012a58:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 2012a5c:	e0bff117 	ldw	r2,-60(fp)
 2012a60:	10000316 	blt	r2,zero,2012a70 <_realloc_r+0xac>
 2012a64:	e0fff117 	ldw	r3,-60(fp)
 2012a68:	e0bfff17 	ldw	r2,-4(fp)
 2012a6c:	1880052e 	bgeu	r3,r2,2012a84 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 2012a70:	e0bffd17 	ldw	r2,-12(fp)
 2012a74:	00c00304 	movi	r3,12
 2012a78:	10c00015 	stw	r3,0(r2)
    return 0;
 2012a7c:	0005883a 	mov	r2,zero
 2012a80:	0002c706 	br	20135a0 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 2012a84:	e0fff017 	ldw	r3,-64(fp)
 2012a88:	e0bff117 	ldw	r2,-60(fp)
 2012a8c:	18828b0e 	bge	r3,r2,20134bc <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 2012a90:	e0ffef17 	ldw	r3,-68(fp)
 2012a94:	e0bff017 	ldw	r2,-64(fp)
 2012a98:	1885883a 	add	r2,r3,r2
 2012a9c:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 2012aa0:	008080b4 	movhi	r2,514
 2012aa4:	108c2004 	addi	r2,r2,12416
 2012aa8:	10c00217 	ldw	r3,8(r2)
 2012aac:	e0bfe517 	ldw	r2,-108(fp)
 2012ab0:	18800926 	beq	r3,r2,2012ad8 <_realloc_r+0x114>
 2012ab4:	e0bfe517 	ldw	r2,-108(fp)
 2012ab8:	10c00117 	ldw	r3,4(r2)
 2012abc:	00bfff84 	movi	r2,-2
 2012ac0:	1884703a 	and	r2,r3,r2
 2012ac4:	e0ffe517 	ldw	r3,-108(fp)
 2012ac8:	1885883a 	add	r2,r3,r2
 2012acc:	10800117 	ldw	r2,4(r2)
 2012ad0:	1080004c 	andi	r2,r2,1
 2012ad4:	1000461e 	bne	r2,zero,2012bf0 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 2012ad8:	e0bfe517 	ldw	r2,-108(fp)
 2012adc:	10c00117 	ldw	r3,4(r2)
 2012ae0:	00bfff04 	movi	r2,-4
 2012ae4:	1884703a 	and	r2,r3,r2
 2012ae8:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 2012aec:	008080b4 	movhi	r2,514
 2012af0:	108c2004 	addi	r2,r2,12416
 2012af4:	10c00217 	ldw	r3,8(r2)
 2012af8:	e0bfe517 	ldw	r2,-108(fp)
 2012afc:	1880251e 	bne	r3,r2,2012b94 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 2012b00:	e0ffe617 	ldw	r3,-104(fp)
 2012b04:	e0bfe417 	ldw	r2,-112(fp)
 2012b08:	1885883a 	add	r2,r3,r2
 2012b0c:	1007883a 	mov	r3,r2
 2012b10:	e0bff117 	ldw	r2,-60(fp)
 2012b14:	10800404 	addi	r2,r2,16
 2012b18:	18803816 	blt	r3,r2,2012bfc <_realloc_r+0x238>
        {
          newsize += nextsize;
 2012b1c:	e0ffe417 	ldw	r3,-112(fp)
 2012b20:	e0bfe617 	ldw	r2,-104(fp)
 2012b24:	1885883a 	add	r2,r3,r2
 2012b28:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 2012b2c:	008080b4 	movhi	r2,514
 2012b30:	108c2004 	addi	r2,r2,12416
 2012b34:	e13fef17 	ldw	r4,-68(fp)
 2012b38:	e0fff117 	ldw	r3,-60(fp)
 2012b3c:	20c7883a 	add	r3,r4,r3
 2012b40:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 2012b44:	008080b4 	movhi	r2,514
 2012b48:	108c2004 	addi	r2,r2,12416
 2012b4c:	10800217 	ldw	r2,8(r2)
 2012b50:	e13fe417 	ldw	r4,-112(fp)
 2012b54:	e0fff117 	ldw	r3,-60(fp)
 2012b58:	20c7c83a 	sub	r3,r4,r3
 2012b5c:	18c00054 	ori	r3,r3,1
 2012b60:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 2012b64:	e0bfef17 	ldw	r2,-68(fp)
 2012b68:	10800117 	ldw	r2,4(r2)
 2012b6c:	10c0004c 	andi	r3,r2,1
 2012b70:	e0bff117 	ldw	r2,-60(fp)
 2012b74:	1886b03a 	or	r3,r3,r2
 2012b78:	e0bfef17 	ldw	r2,-68(fp)
 2012b7c:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 2012b80:	e13ffd17 	ldw	r4,-12(fp)
 2012b84:	20173900 	call	2017390 <__malloc_unlock>
          return chunk2mem(oldp);
 2012b88:	e0bfef17 	ldw	r2,-68(fp)
 2012b8c:	10800204 	addi	r2,r2,8
 2012b90:	00028306 	br	20135a0 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 2012b94:	e0ffe617 	ldw	r3,-104(fp)
 2012b98:	e0bfe417 	ldw	r2,-112(fp)
 2012b9c:	1885883a 	add	r2,r3,r2
 2012ba0:	1007883a 	mov	r3,r2
 2012ba4:	e0bff117 	ldw	r2,-60(fp)
 2012ba8:	18801416 	blt	r3,r2,2012bfc <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 2012bac:	e0bfe517 	ldw	r2,-108(fp)
 2012bb0:	10800317 	ldw	r2,12(r2)
 2012bb4:	e0bff215 	stw	r2,-56(fp)
 2012bb8:	e0bfe517 	ldw	r2,-108(fp)
 2012bbc:	10800217 	ldw	r2,8(r2)
 2012bc0:	e0bff315 	stw	r2,-52(fp)
 2012bc4:	e0bff317 	ldw	r2,-52(fp)
 2012bc8:	e0fff217 	ldw	r3,-56(fp)
 2012bcc:	10c00315 	stw	r3,12(r2)
 2012bd0:	e0bff217 	ldw	r2,-56(fp)
 2012bd4:	e0fff317 	ldw	r3,-52(fp)
 2012bd8:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 2012bdc:	e0ffe417 	ldw	r3,-112(fp)
 2012be0:	e0bfe617 	ldw	r2,-104(fp)
 2012be4:	1885883a 	add	r2,r3,r2
 2012be8:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 2012bec:	00023306 	br	20134bc <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 2012bf0:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 2012bf4:	e03fe615 	stw	zero,-104(fp)
 2012bf8:	00000106 	br	2012c00 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 2012bfc:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 2012c00:	e0bfef17 	ldw	r2,-68(fp)
 2012c04:	10800117 	ldw	r2,4(r2)
 2012c08:	1080004c 	andi	r2,r2,1
 2012c0c:	1001a91e 	bne	r2,zero,20132b4 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 2012c10:	e0bfef17 	ldw	r2,-68(fp)
 2012c14:	10800017 	ldw	r2,0(r2)
 2012c18:	0085c83a 	sub	r2,zero,r2
 2012c1c:	e0ffef17 	ldw	r3,-68(fp)
 2012c20:	1885883a 	add	r2,r3,r2
 2012c24:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 2012c28:	e0bff417 	ldw	r2,-48(fp)
 2012c2c:	10c00117 	ldw	r3,4(r2)
 2012c30:	00bfff04 	movi	r2,-4
 2012c34:	1884703a 	and	r2,r3,r2
 2012c38:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 2012c3c:	e0bfe517 	ldw	r2,-108(fp)
 2012c40:	10012226 	beq	r2,zero,20130cc <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 2012c44:	008080b4 	movhi	r2,514
 2012c48:	108c2004 	addi	r2,r2,12416
 2012c4c:	10c00217 	ldw	r3,8(r2)
 2012c50:	e0bfe517 	ldw	r2,-108(fp)
 2012c54:	1880951e 	bne	r3,r2,2012eac <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 2012c58:	e0ffe617 	ldw	r3,-104(fp)
 2012c5c:	e0bff517 	ldw	r2,-44(fp)
 2012c60:	1887883a 	add	r3,r3,r2
 2012c64:	e0bfe417 	ldw	r2,-112(fp)
 2012c68:	1885883a 	add	r2,r3,r2
 2012c6c:	1007883a 	mov	r3,r2
 2012c70:	e0bff117 	ldw	r2,-60(fp)
 2012c74:	10800404 	addi	r2,r2,16
 2012c78:	18811416 	blt	r3,r2,20130cc <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 2012c7c:	e0bff417 	ldw	r2,-48(fp)
 2012c80:	10800317 	ldw	r2,12(r2)
 2012c84:	e0bff215 	stw	r2,-56(fp)
 2012c88:	e0bff417 	ldw	r2,-48(fp)
 2012c8c:	10800217 	ldw	r2,8(r2)
 2012c90:	e0bff315 	stw	r2,-52(fp)
 2012c94:	e0bff317 	ldw	r2,-52(fp)
 2012c98:	e0fff217 	ldw	r3,-56(fp)
 2012c9c:	10c00315 	stw	r3,12(r2)
 2012ca0:	e0bff217 	ldw	r2,-56(fp)
 2012ca4:	e0fff317 	ldw	r3,-52(fp)
 2012ca8:	10c00215 	stw	r3,8(r2)
            newp = prev;
 2012cac:	e0bff417 	ldw	r2,-48(fp)
 2012cb0:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 2012cb4:	e0fff517 	ldw	r3,-44(fp)
 2012cb8:	e0bfe617 	ldw	r2,-104(fp)
 2012cbc:	1885883a 	add	r2,r3,r2
 2012cc0:	e0ffe417 	ldw	r3,-112(fp)
 2012cc4:	1885883a 	add	r2,r3,r2
 2012cc8:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 2012ccc:	e0bfe317 	ldw	r2,-116(fp)
 2012cd0:	10800204 	addi	r2,r2,8
 2012cd4:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2012cd8:	e0bff017 	ldw	r2,-64(fp)
 2012cdc:	10bfff04 	addi	r2,r2,-4
 2012ce0:	e0bff715 	stw	r2,-36(fp)
 2012ce4:	e0bff717 	ldw	r2,-36(fp)
 2012ce8:	10800968 	cmpgeui	r2,r2,37
 2012cec:	1000521e 	bne	r2,zero,2012e38 <_realloc_r+0x474>
 2012cf0:	e0bffe17 	ldw	r2,-8(fp)
 2012cf4:	e0bfe715 	stw	r2,-100(fp)
 2012cf8:	e0bff617 	ldw	r2,-40(fp)
 2012cfc:	e0bfe815 	stw	r2,-96(fp)
 2012d00:	e0bff717 	ldw	r2,-36(fp)
 2012d04:	10800530 	cmpltui	r2,r2,20
 2012d08:	1000361e 	bne	r2,zero,2012de4 <_realloc_r+0x420>
 2012d0c:	e0bfe817 	ldw	r2,-96(fp)
 2012d10:	10c00104 	addi	r3,r2,4
 2012d14:	e0ffe815 	stw	r3,-96(fp)
 2012d18:	e0ffe717 	ldw	r3,-100(fp)
 2012d1c:	19000104 	addi	r4,r3,4
 2012d20:	e13fe715 	stw	r4,-100(fp)
 2012d24:	18c00017 	ldw	r3,0(r3)
 2012d28:	10c00015 	stw	r3,0(r2)
 2012d2c:	e0bfe817 	ldw	r2,-96(fp)
 2012d30:	10c00104 	addi	r3,r2,4
 2012d34:	e0ffe815 	stw	r3,-96(fp)
 2012d38:	e0ffe717 	ldw	r3,-100(fp)
 2012d3c:	19000104 	addi	r4,r3,4
 2012d40:	e13fe715 	stw	r4,-100(fp)
 2012d44:	18c00017 	ldw	r3,0(r3)
 2012d48:	10c00015 	stw	r3,0(r2)
 2012d4c:	e0bff717 	ldw	r2,-36(fp)
 2012d50:	10800730 	cmpltui	r2,r2,28
 2012d54:	1000231e 	bne	r2,zero,2012de4 <_realloc_r+0x420>
 2012d58:	e0bfe817 	ldw	r2,-96(fp)
 2012d5c:	10c00104 	addi	r3,r2,4
 2012d60:	e0ffe815 	stw	r3,-96(fp)
 2012d64:	e0ffe717 	ldw	r3,-100(fp)
 2012d68:	19000104 	addi	r4,r3,4
 2012d6c:	e13fe715 	stw	r4,-100(fp)
 2012d70:	18c00017 	ldw	r3,0(r3)
 2012d74:	10c00015 	stw	r3,0(r2)
 2012d78:	e0bfe817 	ldw	r2,-96(fp)
 2012d7c:	10c00104 	addi	r3,r2,4
 2012d80:	e0ffe815 	stw	r3,-96(fp)
 2012d84:	e0ffe717 	ldw	r3,-100(fp)
 2012d88:	19000104 	addi	r4,r3,4
 2012d8c:	e13fe715 	stw	r4,-100(fp)
 2012d90:	18c00017 	ldw	r3,0(r3)
 2012d94:	10c00015 	stw	r3,0(r2)
 2012d98:	e0bff717 	ldw	r2,-36(fp)
 2012d9c:	10800930 	cmpltui	r2,r2,36
 2012da0:	1000101e 	bne	r2,zero,2012de4 <_realloc_r+0x420>
 2012da4:	e0bfe817 	ldw	r2,-96(fp)
 2012da8:	10c00104 	addi	r3,r2,4
 2012dac:	e0ffe815 	stw	r3,-96(fp)
 2012db0:	e0ffe717 	ldw	r3,-100(fp)
 2012db4:	19000104 	addi	r4,r3,4
 2012db8:	e13fe715 	stw	r4,-100(fp)
 2012dbc:	18c00017 	ldw	r3,0(r3)
 2012dc0:	10c00015 	stw	r3,0(r2)
 2012dc4:	e0bfe817 	ldw	r2,-96(fp)
 2012dc8:	10c00104 	addi	r3,r2,4
 2012dcc:	e0ffe815 	stw	r3,-96(fp)
 2012dd0:	e0ffe717 	ldw	r3,-100(fp)
 2012dd4:	19000104 	addi	r4,r3,4
 2012dd8:	e13fe715 	stw	r4,-100(fp)
 2012ddc:	18c00017 	ldw	r3,0(r3)
 2012de0:	10c00015 	stw	r3,0(r2)
 2012de4:	e0bfe817 	ldw	r2,-96(fp)
 2012de8:	10c00104 	addi	r3,r2,4
 2012dec:	e0ffe815 	stw	r3,-96(fp)
 2012df0:	e0ffe717 	ldw	r3,-100(fp)
 2012df4:	19000104 	addi	r4,r3,4
 2012df8:	e13fe715 	stw	r4,-100(fp)
 2012dfc:	18c00017 	ldw	r3,0(r3)
 2012e00:	10c00015 	stw	r3,0(r2)
 2012e04:	e0bfe817 	ldw	r2,-96(fp)
 2012e08:	10c00104 	addi	r3,r2,4
 2012e0c:	e0ffe815 	stw	r3,-96(fp)
 2012e10:	e0ffe717 	ldw	r3,-100(fp)
 2012e14:	19000104 	addi	r4,r3,4
 2012e18:	e13fe715 	stw	r4,-100(fp)
 2012e1c:	18c00017 	ldw	r3,0(r3)
 2012e20:	10c00015 	stw	r3,0(r2)
 2012e24:	e0bfe717 	ldw	r2,-100(fp)
 2012e28:	10c00017 	ldw	r3,0(r2)
 2012e2c:	e0bfe817 	ldw	r2,-96(fp)
 2012e30:	10c00015 	stw	r3,0(r2)
 2012e34:	00000406 	br	2012e48 <_realloc_r+0x484>
 2012e38:	e1bff717 	ldw	r6,-36(fp)
 2012e3c:	e17ffe17 	ldw	r5,-8(fp)
 2012e40:	e13ff617 	ldw	r4,-40(fp)
 2012e44:	2010d440 	call	2010d44 <memmove>
            top = chunk_at_offset(newp, nb);
 2012e48:	008080b4 	movhi	r2,514
 2012e4c:	108c2004 	addi	r2,r2,12416
 2012e50:	e13fe317 	ldw	r4,-116(fp)
 2012e54:	e0fff117 	ldw	r3,-60(fp)
 2012e58:	20c7883a 	add	r3,r4,r3
 2012e5c:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 2012e60:	008080b4 	movhi	r2,514
 2012e64:	108c2004 	addi	r2,r2,12416
 2012e68:	10800217 	ldw	r2,8(r2)
 2012e6c:	e13fe417 	ldw	r4,-112(fp)
 2012e70:	e0fff117 	ldw	r3,-60(fp)
 2012e74:	20c7c83a 	sub	r3,r4,r3
 2012e78:	18c00054 	ori	r3,r3,1
 2012e7c:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 2012e80:	e0bfe317 	ldw	r2,-116(fp)
 2012e84:	10800117 	ldw	r2,4(r2)
 2012e88:	10c0004c 	andi	r3,r2,1
 2012e8c:	e0bff117 	ldw	r2,-60(fp)
 2012e90:	1886b03a 	or	r3,r3,r2
 2012e94:	e0bfe317 	ldw	r2,-116(fp)
 2012e98:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 2012e9c:	e13ffd17 	ldw	r4,-12(fp)
 2012ea0:	20173900 	call	2017390 <__malloc_unlock>
            return newmem;
 2012ea4:	e0bff617 	ldw	r2,-40(fp)
 2012ea8:	0001bd06 	br	20135a0 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 2012eac:	e0ffe617 	ldw	r3,-104(fp)
 2012eb0:	e0bff517 	ldw	r2,-44(fp)
 2012eb4:	1887883a 	add	r3,r3,r2
 2012eb8:	e0bfe417 	ldw	r2,-112(fp)
 2012ebc:	1885883a 	add	r2,r3,r2
 2012ec0:	1007883a 	mov	r3,r2
 2012ec4:	e0bff117 	ldw	r2,-60(fp)
 2012ec8:	18808016 	blt	r3,r2,20130cc <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 2012ecc:	e0bfe517 	ldw	r2,-108(fp)
 2012ed0:	10800317 	ldw	r2,12(r2)
 2012ed4:	e0bff215 	stw	r2,-56(fp)
 2012ed8:	e0bfe517 	ldw	r2,-108(fp)
 2012edc:	10800217 	ldw	r2,8(r2)
 2012ee0:	e0bff315 	stw	r2,-52(fp)
 2012ee4:	e0bff317 	ldw	r2,-52(fp)
 2012ee8:	e0fff217 	ldw	r3,-56(fp)
 2012eec:	10c00315 	stw	r3,12(r2)
 2012ef0:	e0bff217 	ldw	r2,-56(fp)
 2012ef4:	e0fff317 	ldw	r3,-52(fp)
 2012ef8:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 2012efc:	e0bff417 	ldw	r2,-48(fp)
 2012f00:	10800317 	ldw	r2,12(r2)
 2012f04:	e0bff215 	stw	r2,-56(fp)
 2012f08:	e0bff417 	ldw	r2,-48(fp)
 2012f0c:	10800217 	ldw	r2,8(r2)
 2012f10:	e0bff315 	stw	r2,-52(fp)
 2012f14:	e0bff317 	ldw	r2,-52(fp)
 2012f18:	e0fff217 	ldw	r3,-56(fp)
 2012f1c:	10c00315 	stw	r3,12(r2)
 2012f20:	e0bff217 	ldw	r2,-56(fp)
 2012f24:	e0fff317 	ldw	r3,-52(fp)
 2012f28:	10c00215 	stw	r3,8(r2)
          newp = prev;
 2012f2c:	e0bff417 	ldw	r2,-48(fp)
 2012f30:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 2012f34:	e0ffe617 	ldw	r3,-104(fp)
 2012f38:	e0bff517 	ldw	r2,-44(fp)
 2012f3c:	1885883a 	add	r2,r3,r2
 2012f40:	e0ffe417 	ldw	r3,-112(fp)
 2012f44:	1885883a 	add	r2,r3,r2
 2012f48:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 2012f4c:	e0bfe317 	ldw	r2,-116(fp)
 2012f50:	10800204 	addi	r2,r2,8
 2012f54:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2012f58:	e0bff017 	ldw	r2,-64(fp)
 2012f5c:	10bfff04 	addi	r2,r2,-4
 2012f60:	e0bff815 	stw	r2,-32(fp)
 2012f64:	e0bff817 	ldw	r2,-32(fp)
 2012f68:	10800968 	cmpgeui	r2,r2,37
 2012f6c:	1000521e 	bne	r2,zero,20130b8 <_realloc_r+0x6f4>
 2012f70:	e0bffe17 	ldw	r2,-8(fp)
 2012f74:	e0bfe915 	stw	r2,-92(fp)
 2012f78:	e0bff617 	ldw	r2,-40(fp)
 2012f7c:	e0bfea15 	stw	r2,-88(fp)
 2012f80:	e0bff817 	ldw	r2,-32(fp)
 2012f84:	10800530 	cmpltui	r2,r2,20
 2012f88:	1000361e 	bne	r2,zero,2013064 <_realloc_r+0x6a0>
 2012f8c:	e0bfea17 	ldw	r2,-88(fp)
 2012f90:	10c00104 	addi	r3,r2,4
 2012f94:	e0ffea15 	stw	r3,-88(fp)
 2012f98:	e0ffe917 	ldw	r3,-92(fp)
 2012f9c:	19000104 	addi	r4,r3,4
 2012fa0:	e13fe915 	stw	r4,-92(fp)
 2012fa4:	18c00017 	ldw	r3,0(r3)
 2012fa8:	10c00015 	stw	r3,0(r2)
 2012fac:	e0bfea17 	ldw	r2,-88(fp)
 2012fb0:	10c00104 	addi	r3,r2,4
 2012fb4:	e0ffea15 	stw	r3,-88(fp)
 2012fb8:	e0ffe917 	ldw	r3,-92(fp)
 2012fbc:	19000104 	addi	r4,r3,4
 2012fc0:	e13fe915 	stw	r4,-92(fp)
 2012fc4:	18c00017 	ldw	r3,0(r3)
 2012fc8:	10c00015 	stw	r3,0(r2)
 2012fcc:	e0bff817 	ldw	r2,-32(fp)
 2012fd0:	10800730 	cmpltui	r2,r2,28
 2012fd4:	1000231e 	bne	r2,zero,2013064 <_realloc_r+0x6a0>
 2012fd8:	e0bfea17 	ldw	r2,-88(fp)
 2012fdc:	10c00104 	addi	r3,r2,4
 2012fe0:	e0ffea15 	stw	r3,-88(fp)
 2012fe4:	e0ffe917 	ldw	r3,-92(fp)
 2012fe8:	19000104 	addi	r4,r3,4
 2012fec:	e13fe915 	stw	r4,-92(fp)
 2012ff0:	18c00017 	ldw	r3,0(r3)
 2012ff4:	10c00015 	stw	r3,0(r2)
 2012ff8:	e0bfea17 	ldw	r2,-88(fp)
 2012ffc:	10c00104 	addi	r3,r2,4
 2013000:	e0ffea15 	stw	r3,-88(fp)
 2013004:	e0ffe917 	ldw	r3,-92(fp)
 2013008:	19000104 	addi	r4,r3,4
 201300c:	e13fe915 	stw	r4,-92(fp)
 2013010:	18c00017 	ldw	r3,0(r3)
 2013014:	10c00015 	stw	r3,0(r2)
 2013018:	e0bff817 	ldw	r2,-32(fp)
 201301c:	10800930 	cmpltui	r2,r2,36
 2013020:	1000101e 	bne	r2,zero,2013064 <_realloc_r+0x6a0>
 2013024:	e0bfea17 	ldw	r2,-88(fp)
 2013028:	10c00104 	addi	r3,r2,4
 201302c:	e0ffea15 	stw	r3,-88(fp)
 2013030:	e0ffe917 	ldw	r3,-92(fp)
 2013034:	19000104 	addi	r4,r3,4
 2013038:	e13fe915 	stw	r4,-92(fp)
 201303c:	18c00017 	ldw	r3,0(r3)
 2013040:	10c00015 	stw	r3,0(r2)
 2013044:	e0bfea17 	ldw	r2,-88(fp)
 2013048:	10c00104 	addi	r3,r2,4
 201304c:	e0ffea15 	stw	r3,-88(fp)
 2013050:	e0ffe917 	ldw	r3,-92(fp)
 2013054:	19000104 	addi	r4,r3,4
 2013058:	e13fe915 	stw	r4,-92(fp)
 201305c:	18c00017 	ldw	r3,0(r3)
 2013060:	10c00015 	stw	r3,0(r2)
 2013064:	e0bfea17 	ldw	r2,-88(fp)
 2013068:	10c00104 	addi	r3,r2,4
 201306c:	e0ffea15 	stw	r3,-88(fp)
 2013070:	e0ffe917 	ldw	r3,-92(fp)
 2013074:	19000104 	addi	r4,r3,4
 2013078:	e13fe915 	stw	r4,-92(fp)
 201307c:	18c00017 	ldw	r3,0(r3)
 2013080:	10c00015 	stw	r3,0(r2)
 2013084:	e0bfea17 	ldw	r2,-88(fp)
 2013088:	10c00104 	addi	r3,r2,4
 201308c:	e0ffea15 	stw	r3,-88(fp)
 2013090:	e0ffe917 	ldw	r3,-92(fp)
 2013094:	19000104 	addi	r4,r3,4
 2013098:	e13fe915 	stw	r4,-92(fp)
 201309c:	18c00017 	ldw	r3,0(r3)
 20130a0:	10c00015 	stw	r3,0(r2)
 20130a4:	e0bfe917 	ldw	r2,-92(fp)
 20130a8:	10c00017 	ldw	r3,0(r2)
 20130ac:	e0bfea17 	ldw	r2,-88(fp)
 20130b0:	10c00015 	stw	r3,0(r2)
          goto split;
 20130b4:	00010106 	br	20134bc <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 20130b8:	e1bff817 	ldw	r6,-32(fp)
 20130bc:	e17ffe17 	ldw	r5,-8(fp)
 20130c0:	e13ff617 	ldw	r4,-40(fp)
 20130c4:	2010d440 	call	2010d44 <memmove>
          goto split;
 20130c8:	0000fc06 	br	20134bc <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 20130cc:	e0bff417 	ldw	r2,-48(fp)
 20130d0:	10007826 	beq	r2,zero,20132b4 <_realloc_r+0x8f0>
 20130d4:	e0fff517 	ldw	r3,-44(fp)
 20130d8:	e0bfe417 	ldw	r2,-112(fp)
 20130dc:	1885883a 	add	r2,r3,r2
 20130e0:	1007883a 	mov	r3,r2
 20130e4:	e0bff117 	ldw	r2,-60(fp)
 20130e8:	18807216 	blt	r3,r2,20132b4 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 20130ec:	e0bff417 	ldw	r2,-48(fp)
 20130f0:	10800317 	ldw	r2,12(r2)
 20130f4:	e0bff215 	stw	r2,-56(fp)
 20130f8:	e0bff417 	ldw	r2,-48(fp)
 20130fc:	10800217 	ldw	r2,8(r2)
 2013100:	e0bff315 	stw	r2,-52(fp)
 2013104:	e0bff317 	ldw	r2,-52(fp)
 2013108:	e0fff217 	ldw	r3,-56(fp)
 201310c:	10c00315 	stw	r3,12(r2)
 2013110:	e0bff217 	ldw	r2,-56(fp)
 2013114:	e0fff317 	ldw	r3,-52(fp)
 2013118:	10c00215 	stw	r3,8(r2)
        newp = prev;
 201311c:	e0bff417 	ldw	r2,-48(fp)
 2013120:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 2013124:	e0ffe417 	ldw	r3,-112(fp)
 2013128:	e0bff517 	ldw	r2,-44(fp)
 201312c:	1885883a 	add	r2,r3,r2
 2013130:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 2013134:	e0bfe317 	ldw	r2,-116(fp)
 2013138:	10800204 	addi	r2,r2,8
 201313c:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2013140:	e0bff017 	ldw	r2,-64(fp)
 2013144:	10bfff04 	addi	r2,r2,-4
 2013148:	e0bff915 	stw	r2,-28(fp)
 201314c:	e0bff917 	ldw	r2,-28(fp)
 2013150:	10800968 	cmpgeui	r2,r2,37
 2013154:	1000521e 	bne	r2,zero,20132a0 <_realloc_r+0x8dc>
 2013158:	e0bffe17 	ldw	r2,-8(fp)
 201315c:	e0bfeb15 	stw	r2,-84(fp)
 2013160:	e0bff617 	ldw	r2,-40(fp)
 2013164:	e0bfec15 	stw	r2,-80(fp)
 2013168:	e0bff917 	ldw	r2,-28(fp)
 201316c:	10800530 	cmpltui	r2,r2,20
 2013170:	1000361e 	bne	r2,zero,201324c <_realloc_r+0x888>
 2013174:	e0bfec17 	ldw	r2,-80(fp)
 2013178:	10c00104 	addi	r3,r2,4
 201317c:	e0ffec15 	stw	r3,-80(fp)
 2013180:	e0ffeb17 	ldw	r3,-84(fp)
 2013184:	19000104 	addi	r4,r3,4
 2013188:	e13feb15 	stw	r4,-84(fp)
 201318c:	18c00017 	ldw	r3,0(r3)
 2013190:	10c00015 	stw	r3,0(r2)
 2013194:	e0bfec17 	ldw	r2,-80(fp)
 2013198:	10c00104 	addi	r3,r2,4
 201319c:	e0ffec15 	stw	r3,-80(fp)
 20131a0:	e0ffeb17 	ldw	r3,-84(fp)
 20131a4:	19000104 	addi	r4,r3,4
 20131a8:	e13feb15 	stw	r4,-84(fp)
 20131ac:	18c00017 	ldw	r3,0(r3)
 20131b0:	10c00015 	stw	r3,0(r2)
 20131b4:	e0bff917 	ldw	r2,-28(fp)
 20131b8:	10800730 	cmpltui	r2,r2,28
 20131bc:	1000231e 	bne	r2,zero,201324c <_realloc_r+0x888>
 20131c0:	e0bfec17 	ldw	r2,-80(fp)
 20131c4:	10c00104 	addi	r3,r2,4
 20131c8:	e0ffec15 	stw	r3,-80(fp)
 20131cc:	e0ffeb17 	ldw	r3,-84(fp)
 20131d0:	19000104 	addi	r4,r3,4
 20131d4:	e13feb15 	stw	r4,-84(fp)
 20131d8:	18c00017 	ldw	r3,0(r3)
 20131dc:	10c00015 	stw	r3,0(r2)
 20131e0:	e0bfec17 	ldw	r2,-80(fp)
 20131e4:	10c00104 	addi	r3,r2,4
 20131e8:	e0ffec15 	stw	r3,-80(fp)
 20131ec:	e0ffeb17 	ldw	r3,-84(fp)
 20131f0:	19000104 	addi	r4,r3,4
 20131f4:	e13feb15 	stw	r4,-84(fp)
 20131f8:	18c00017 	ldw	r3,0(r3)
 20131fc:	10c00015 	stw	r3,0(r2)
 2013200:	e0bff917 	ldw	r2,-28(fp)
 2013204:	10800930 	cmpltui	r2,r2,36
 2013208:	1000101e 	bne	r2,zero,201324c <_realloc_r+0x888>
 201320c:	e0bfec17 	ldw	r2,-80(fp)
 2013210:	10c00104 	addi	r3,r2,4
 2013214:	e0ffec15 	stw	r3,-80(fp)
 2013218:	e0ffeb17 	ldw	r3,-84(fp)
 201321c:	19000104 	addi	r4,r3,4
 2013220:	e13feb15 	stw	r4,-84(fp)
 2013224:	18c00017 	ldw	r3,0(r3)
 2013228:	10c00015 	stw	r3,0(r2)
 201322c:	e0bfec17 	ldw	r2,-80(fp)
 2013230:	10c00104 	addi	r3,r2,4
 2013234:	e0ffec15 	stw	r3,-80(fp)
 2013238:	e0ffeb17 	ldw	r3,-84(fp)
 201323c:	19000104 	addi	r4,r3,4
 2013240:	e13feb15 	stw	r4,-84(fp)
 2013244:	18c00017 	ldw	r3,0(r3)
 2013248:	10c00015 	stw	r3,0(r2)
 201324c:	e0bfec17 	ldw	r2,-80(fp)
 2013250:	10c00104 	addi	r3,r2,4
 2013254:	e0ffec15 	stw	r3,-80(fp)
 2013258:	e0ffeb17 	ldw	r3,-84(fp)
 201325c:	19000104 	addi	r4,r3,4
 2013260:	e13feb15 	stw	r4,-84(fp)
 2013264:	18c00017 	ldw	r3,0(r3)
 2013268:	10c00015 	stw	r3,0(r2)
 201326c:	e0bfec17 	ldw	r2,-80(fp)
 2013270:	10c00104 	addi	r3,r2,4
 2013274:	e0ffec15 	stw	r3,-80(fp)
 2013278:	e0ffeb17 	ldw	r3,-84(fp)
 201327c:	19000104 	addi	r4,r3,4
 2013280:	e13feb15 	stw	r4,-84(fp)
 2013284:	18c00017 	ldw	r3,0(r3)
 2013288:	10c00015 	stw	r3,0(r2)
 201328c:	e0bfeb17 	ldw	r2,-84(fp)
 2013290:	10c00017 	ldw	r3,0(r2)
 2013294:	e0bfec17 	ldw	r2,-80(fp)
 2013298:	10c00015 	stw	r3,0(r2)
        goto split;
 201329c:	00008706 	br	20134bc <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 20132a0:	e1bff917 	ldw	r6,-28(fp)
 20132a4:	e17ffe17 	ldw	r5,-8(fp)
 20132a8:	e13ff617 	ldw	r4,-40(fp)
 20132ac:	2010d440 	call	2010d44 <memmove>
        goto split;
 20132b0:	00008206 	br	20134bc <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 20132b4:	e17fff17 	ldw	r5,-4(fp)
 20132b8:	e13ffd17 	ldw	r4,-12(fp)
 20132bc:	201000c0 	call	201000c <_malloc_r>
 20132c0:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 20132c4:	e0bff617 	ldw	r2,-40(fp)
 20132c8:	1000041e 	bne	r2,zero,20132dc <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 20132cc:	e13ffd17 	ldw	r4,-12(fp)
 20132d0:	20173900 	call	2017390 <__malloc_unlock>
      return 0;
 20132d4:	0005883a 	mov	r2,zero
 20132d8:	0000b106 	br	20135a0 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 20132dc:	e0bff617 	ldw	r2,-40(fp)
 20132e0:	10bffe04 	addi	r2,r2,-8
 20132e4:	e0bfe315 	stw	r2,-116(fp)
 20132e8:	e0bfef17 	ldw	r2,-68(fp)
 20132ec:	10c00117 	ldw	r3,4(r2)
 20132f0:	00bfff84 	movi	r2,-2
 20132f4:	1884703a 	and	r2,r3,r2
 20132f8:	e0ffef17 	ldw	r3,-68(fp)
 20132fc:	1885883a 	add	r2,r3,r2
 2013300:	e0ffe317 	ldw	r3,-116(fp)
 2013304:	18800a1e 	bne	r3,r2,2013330 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 2013308:	e0bfe317 	ldw	r2,-116(fp)
 201330c:	10c00117 	ldw	r3,4(r2)
 2013310:	00bfff04 	movi	r2,-4
 2013314:	1884703a 	and	r2,r3,r2
 2013318:	e0ffe417 	ldw	r3,-112(fp)
 201331c:	1885883a 	add	r2,r3,r2
 2013320:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 2013324:	e0bfef17 	ldw	r2,-68(fp)
 2013328:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 201332c:	00006306 	br	20134bc <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2013330:	e0bff017 	ldw	r2,-64(fp)
 2013334:	10bfff04 	addi	r2,r2,-4
 2013338:	e0bffa15 	stw	r2,-24(fp)
 201333c:	e0bffa17 	ldw	r2,-24(fp)
 2013340:	10800968 	cmpgeui	r2,r2,37
 2013344:	1000521e 	bne	r2,zero,2013490 <_realloc_r+0xacc>
 2013348:	e0bffe17 	ldw	r2,-8(fp)
 201334c:	e0bfed15 	stw	r2,-76(fp)
 2013350:	e0bff617 	ldw	r2,-40(fp)
 2013354:	e0bfee15 	stw	r2,-72(fp)
 2013358:	e0bffa17 	ldw	r2,-24(fp)
 201335c:	10800530 	cmpltui	r2,r2,20
 2013360:	1000361e 	bne	r2,zero,201343c <_realloc_r+0xa78>
 2013364:	e0bfee17 	ldw	r2,-72(fp)
 2013368:	10c00104 	addi	r3,r2,4
 201336c:	e0ffee15 	stw	r3,-72(fp)
 2013370:	e0ffed17 	ldw	r3,-76(fp)
 2013374:	19000104 	addi	r4,r3,4
 2013378:	e13fed15 	stw	r4,-76(fp)
 201337c:	18c00017 	ldw	r3,0(r3)
 2013380:	10c00015 	stw	r3,0(r2)
 2013384:	e0bfee17 	ldw	r2,-72(fp)
 2013388:	10c00104 	addi	r3,r2,4
 201338c:	e0ffee15 	stw	r3,-72(fp)
 2013390:	e0ffed17 	ldw	r3,-76(fp)
 2013394:	19000104 	addi	r4,r3,4
 2013398:	e13fed15 	stw	r4,-76(fp)
 201339c:	18c00017 	ldw	r3,0(r3)
 20133a0:	10c00015 	stw	r3,0(r2)
 20133a4:	e0bffa17 	ldw	r2,-24(fp)
 20133a8:	10800730 	cmpltui	r2,r2,28
 20133ac:	1000231e 	bne	r2,zero,201343c <_realloc_r+0xa78>
 20133b0:	e0bfee17 	ldw	r2,-72(fp)
 20133b4:	10c00104 	addi	r3,r2,4
 20133b8:	e0ffee15 	stw	r3,-72(fp)
 20133bc:	e0ffed17 	ldw	r3,-76(fp)
 20133c0:	19000104 	addi	r4,r3,4
 20133c4:	e13fed15 	stw	r4,-76(fp)
 20133c8:	18c00017 	ldw	r3,0(r3)
 20133cc:	10c00015 	stw	r3,0(r2)
 20133d0:	e0bfee17 	ldw	r2,-72(fp)
 20133d4:	10c00104 	addi	r3,r2,4
 20133d8:	e0ffee15 	stw	r3,-72(fp)
 20133dc:	e0ffed17 	ldw	r3,-76(fp)
 20133e0:	19000104 	addi	r4,r3,4
 20133e4:	e13fed15 	stw	r4,-76(fp)
 20133e8:	18c00017 	ldw	r3,0(r3)
 20133ec:	10c00015 	stw	r3,0(r2)
 20133f0:	e0bffa17 	ldw	r2,-24(fp)
 20133f4:	10800930 	cmpltui	r2,r2,36
 20133f8:	1000101e 	bne	r2,zero,201343c <_realloc_r+0xa78>
 20133fc:	e0bfee17 	ldw	r2,-72(fp)
 2013400:	10c00104 	addi	r3,r2,4
 2013404:	e0ffee15 	stw	r3,-72(fp)
 2013408:	e0ffed17 	ldw	r3,-76(fp)
 201340c:	19000104 	addi	r4,r3,4
 2013410:	e13fed15 	stw	r4,-76(fp)
 2013414:	18c00017 	ldw	r3,0(r3)
 2013418:	10c00015 	stw	r3,0(r2)
 201341c:	e0bfee17 	ldw	r2,-72(fp)
 2013420:	10c00104 	addi	r3,r2,4
 2013424:	e0ffee15 	stw	r3,-72(fp)
 2013428:	e0ffed17 	ldw	r3,-76(fp)
 201342c:	19000104 	addi	r4,r3,4
 2013430:	e13fed15 	stw	r4,-76(fp)
 2013434:	18c00017 	ldw	r3,0(r3)
 2013438:	10c00015 	stw	r3,0(r2)
 201343c:	e0bfee17 	ldw	r2,-72(fp)
 2013440:	10c00104 	addi	r3,r2,4
 2013444:	e0ffee15 	stw	r3,-72(fp)
 2013448:	e0ffed17 	ldw	r3,-76(fp)
 201344c:	19000104 	addi	r4,r3,4
 2013450:	e13fed15 	stw	r4,-76(fp)
 2013454:	18c00017 	ldw	r3,0(r3)
 2013458:	10c00015 	stw	r3,0(r2)
 201345c:	e0bfee17 	ldw	r2,-72(fp)
 2013460:	10c00104 	addi	r3,r2,4
 2013464:	e0ffee15 	stw	r3,-72(fp)
 2013468:	e0ffed17 	ldw	r3,-76(fp)
 201346c:	19000104 	addi	r4,r3,4
 2013470:	e13fed15 	stw	r4,-76(fp)
 2013474:	18c00017 	ldw	r3,0(r3)
 2013478:	10c00015 	stw	r3,0(r2)
 201347c:	e0bfed17 	ldw	r2,-76(fp)
 2013480:	10c00017 	ldw	r3,0(r2)
 2013484:	e0bfee17 	ldw	r2,-72(fp)
 2013488:	10c00015 	stw	r3,0(r2)
 201348c:	00000406 	br	20134a0 <_realloc_r+0xadc>
 2013490:	e1bffa17 	ldw	r6,-24(fp)
 2013494:	e17ffe17 	ldw	r5,-8(fp)
 2013498:	e13ff617 	ldw	r4,-40(fp)
 201349c:	2010d440 	call	2010d44 <memmove>
    fREe(RCALL oldmem);
 20134a0:	e17ffe17 	ldw	r5,-8(fp)
 20134a4:	e13ffd17 	ldw	r4,-12(fp)
 20134a8:	200e9cc0 	call	200e9cc <_free_r>
    MALLOC_UNLOCK;
 20134ac:	e13ffd17 	ldw	r4,-12(fp)
 20134b0:	20173900 	call	2017390 <__malloc_unlock>
    return newmem;
 20134b4:	e0bff617 	ldw	r2,-40(fp)
 20134b8:	00003906 	br	20135a0 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 20134bc:	e0ffe417 	ldw	r3,-112(fp)
 20134c0:	e0bff117 	ldw	r2,-60(fp)
 20134c4:	1885c83a 	sub	r2,r3,r2
 20134c8:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 20134cc:	e0bffb17 	ldw	r2,-20(fp)
 20134d0:	10800430 	cmpltui	r2,r2,16
 20134d4:	10001e1e 	bne	r2,zero,2013550 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 20134d8:	e0ffe317 	ldw	r3,-116(fp)
 20134dc:	e0bff117 	ldw	r2,-60(fp)
 20134e0:	1885883a 	add	r2,r3,r2
 20134e4:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 20134e8:	e0bfe317 	ldw	r2,-116(fp)
 20134ec:	10800117 	ldw	r2,4(r2)
 20134f0:	10c0004c 	andi	r3,r2,1
 20134f4:	e0bff117 	ldw	r2,-60(fp)
 20134f8:	1886b03a 	or	r3,r3,r2
 20134fc:	e0bfe317 	ldw	r2,-116(fp)
 2013500:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 2013504:	e0bffb17 	ldw	r2,-20(fp)
 2013508:	10c00054 	ori	r3,r2,1
 201350c:	e0bffc17 	ldw	r2,-16(fp)
 2013510:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 2013514:	e0fffc17 	ldw	r3,-16(fp)
 2013518:	e0bffb17 	ldw	r2,-20(fp)
 201351c:	1885883a 	add	r2,r3,r2
 2013520:	e13ffc17 	ldw	r4,-16(fp)
 2013524:	e0fffb17 	ldw	r3,-20(fp)
 2013528:	20c7883a 	add	r3,r4,r3
 201352c:	18c00117 	ldw	r3,4(r3)
 2013530:	18c00054 	ori	r3,r3,1
 2013534:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 2013538:	e0bffc17 	ldw	r2,-16(fp)
 201353c:	10800204 	addi	r2,r2,8
 2013540:	100b883a 	mov	r5,r2
 2013544:	e13ffd17 	ldw	r4,-12(fp)
 2013548:	200e9cc0 	call	200e9cc <_free_r>
 201354c:	00001006 	br	2013590 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 2013550:	e0bfe317 	ldw	r2,-116(fp)
 2013554:	10800117 	ldw	r2,4(r2)
 2013558:	10c0004c 	andi	r3,r2,1
 201355c:	e0bfe417 	ldw	r2,-112(fp)
 2013560:	1886b03a 	or	r3,r3,r2
 2013564:	e0bfe317 	ldw	r2,-116(fp)
 2013568:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 201356c:	e0ffe317 	ldw	r3,-116(fp)
 2013570:	e0bfe417 	ldw	r2,-112(fp)
 2013574:	1885883a 	add	r2,r3,r2
 2013578:	e13fe317 	ldw	r4,-116(fp)
 201357c:	e0ffe417 	ldw	r3,-112(fp)
 2013580:	20c7883a 	add	r3,r4,r3
 2013584:	18c00117 	ldw	r3,4(r3)
 2013588:	18c00054 	ori	r3,r3,1
 201358c:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 2013590:	e13ffd17 	ldw	r4,-12(fp)
 2013594:	20173900 	call	2017390 <__malloc_unlock>
  return chunk2mem(newp);
 2013598:	e0bfe317 	ldw	r2,-116(fp)
 201359c:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 20135a0:	e037883a 	mov	sp,fp
 20135a4:	dfc00117 	ldw	ra,4(sp)
 20135a8:	df000017 	ldw	fp,0(sp)
 20135ac:	dec00204 	addi	sp,sp,8
 20135b0:	f800283a 	ret

020135b4 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 20135b4:	defffb04 	addi	sp,sp,-20
 20135b8:	dfc00415 	stw	ra,16(sp)
 20135bc:	df000315 	stw	fp,12(sp)
 20135c0:	df000304 	addi	fp,sp,12
 20135c4:	e13ffe15 	stw	r4,-8(fp)
 20135c8:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 20135cc:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 20135d0:	e13fff17 	ldw	r4,-4(fp)
 20135d4:	2016f680 	call	2016f68 <sbrk>
 20135d8:	e0bffd15 	stw	r2,-12(fp)
 20135dc:	e0bffd17 	ldw	r2,-12(fp)
 20135e0:	10bfffd8 	cmpnei	r2,r2,-1
 20135e4:	1000051e 	bne	r2,zero,20135fc <_sbrk_r+0x48>
 20135e8:	d0a79e17 	ldw	r2,-24968(gp)
 20135ec:	10000326 	beq	r2,zero,20135fc <_sbrk_r+0x48>
    ptr->_errno = errno;
 20135f0:	d0e79e17 	ldw	r3,-24968(gp)
 20135f4:	e0bffe17 	ldw	r2,-8(fp)
 20135f8:	10c00015 	stw	r3,0(r2)
  return ret;
 20135fc:	e0bffd17 	ldw	r2,-12(fp)
}
 2013600:	e037883a 	mov	sp,fp
 2013604:	dfc00117 	ldw	ra,4(sp)
 2013608:	df000017 	ldw	fp,0(sp)
 201360c:	dec00204 	addi	sp,sp,8
 2013610:	f800283a 	ret

02013614 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 2013614:	defff804 	addi	sp,sp,-32
 2013618:	dfc00715 	stw	ra,28(sp)
 201361c:	df000615 	stw	fp,24(sp)
 2013620:	dc400515 	stw	r17,20(sp)
 2013624:	dc000415 	stw	r16,16(sp)
 2013628:	df000604 	addi	fp,sp,24
 201362c:	e13ffa15 	stw	r4,-24(fp)
 2013630:	e17ffb15 	stw	r5,-20(fp)
 2013634:	e1bffc15 	stw	r6,-16(fp)
 2013638:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 201363c:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 2013640:	8080038b 	ldhu	r2,14(r16)
 2013644:	10bfffcc 	andi	r2,r2,65535
 2013648:	10a0001c 	xori	r2,r2,32768
 201364c:	10a00004 	addi	r2,r2,-32768
 2013650:	e0fffd17 	ldw	r3,-12(fp)
 2013654:	180f883a 	mov	r7,r3
 2013658:	e1bffc17 	ldw	r6,-16(fp)
 201365c:	100b883a 	mov	r5,r2
 2013660:	e13ffa17 	ldw	r4,-24(fp)
 2013664:	20156bc0 	call	20156bc <_read_r>
 2013668:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 201366c:	88000416 	blt	r17,zero,2013680 <__sread+0x6c>
    fp->_offset += ret;
 2013670:	80801417 	ldw	r2,80(r16)
 2013674:	1445883a 	add	r2,r2,r17
 2013678:	80801415 	stw	r2,80(r16)
 201367c:	00000406 	br	2013690 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 2013680:	80c0030b 	ldhu	r3,12(r16)
 2013684:	00bbffc4 	movi	r2,-4097
 2013688:	1884703a 	and	r2,r3,r2
 201368c:	8080030d 	sth	r2,12(r16)
  return ret;
 2013690:	8805883a 	mov	r2,r17
}
 2013694:	e6fffe04 	addi	sp,fp,-8
 2013698:	dfc00317 	ldw	ra,12(sp)
 201369c:	df000217 	ldw	fp,8(sp)
 20136a0:	dc400117 	ldw	r17,4(sp)
 20136a4:	dc000017 	ldw	r16,0(sp)
 20136a8:	dec00404 	addi	sp,sp,16
 20136ac:	f800283a 	ret

020136b0 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 20136b0:	defffb04 	addi	sp,sp,-20
 20136b4:	df000415 	stw	fp,16(sp)
 20136b8:	df000404 	addi	fp,sp,16
 20136bc:	e13ffc15 	stw	r4,-16(fp)
 20136c0:	e17ffd15 	stw	r5,-12(fp)
 20136c4:	e1bffe15 	stw	r6,-8(fp)
 20136c8:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 20136cc:	0005883a 	mov	r2,zero
}
 20136d0:	e037883a 	mov	sp,fp
 20136d4:	df000017 	ldw	fp,0(sp)
 20136d8:	dec00104 	addi	sp,sp,4
 20136dc:	f800283a 	ret

020136e0 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 20136e0:	defff804 	addi	sp,sp,-32
 20136e4:	dfc00715 	stw	ra,28(sp)
 20136e8:	df000615 	stw	fp,24(sp)
 20136ec:	dc000515 	stw	r16,20(sp)
 20136f0:	df000604 	addi	fp,sp,24
 20136f4:	e13ffb15 	stw	r4,-20(fp)
 20136f8:	e17ffc15 	stw	r5,-16(fp)
 20136fc:	e1bffd15 	stw	r6,-12(fp)
 2013700:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 2013704:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 2013708:	8080030b 	ldhu	r2,12(r16)
 201370c:	10bfffcc 	andi	r2,r2,65535
 2013710:	1080400c 	andi	r2,r2,256
 2013714:	10000926 	beq	r2,zero,201373c <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 2013718:	8080038b 	ldhu	r2,14(r16)
 201371c:	10bfffcc 	andi	r2,r2,65535
 2013720:	10a0001c 	xori	r2,r2,32768
 2013724:	10a00004 	addi	r2,r2,-32768
 2013728:	01c00084 	movi	r7,2
 201372c:	000d883a 	mov	r6,zero
 2013730:	100b883a 	mov	r5,r2
 2013734:	e13ffb17 	ldw	r4,-20(fp)
 2013738:	201564c0 	call	201564c <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 201373c:	80c0030b 	ldhu	r3,12(r16)
 2013740:	00bbffc4 	movi	r2,-4097
 2013744:	1884703a 	and	r2,r3,r2
 2013748:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 201374c:	8080038b 	ldhu	r2,14(r16)
 2013750:	10bfffcc 	andi	r2,r2,65535
 2013754:	10a0001c 	xori	r2,r2,32768
 2013758:	10a00004 	addi	r2,r2,-32768
 201375c:	e0fffe17 	ldw	r3,-8(fp)
 2013760:	180f883a 	mov	r7,r3
 2013764:	e1bffd17 	ldw	r6,-12(fp)
 2013768:	100b883a 	mov	r5,r2
 201376c:	e13ffb17 	ldw	r4,-20(fp)
 2013770:	2014f080 	call	2014f08 <_write_r>
 2013774:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 2013778:	e0bffa17 	ldw	r2,-24(fp)
}
 201377c:	e6ffff04 	addi	sp,fp,-4
 2013780:	dfc00217 	ldw	ra,8(sp)
 2013784:	df000117 	ldw	fp,4(sp)
 2013788:	dc000017 	ldw	r16,0(sp)
 201378c:	dec00304 	addi	sp,sp,12
 2013790:	f800283a 	ret

02013794 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 2013794:	defff804 	addi	sp,sp,-32
 2013798:	dfc00715 	stw	ra,28(sp)
 201379c:	df000615 	stw	fp,24(sp)
 20137a0:	dc400515 	stw	r17,20(sp)
 20137a4:	dc000415 	stw	r16,16(sp)
 20137a8:	df000604 	addi	fp,sp,24
 20137ac:	e13ffa15 	stw	r4,-24(fp)
 20137b0:	e17ffb15 	stw	r5,-20(fp)
 20137b4:	e1bffc15 	stw	r6,-16(fp)
 20137b8:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 20137bc:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 20137c0:	8080038b 	ldhu	r2,14(r16)
 20137c4:	10bfffcc 	andi	r2,r2,65535
 20137c8:	10a0001c 	xori	r2,r2,32768
 20137cc:	10a00004 	addi	r2,r2,-32768
 20137d0:	e1fffd17 	ldw	r7,-12(fp)
 20137d4:	e1bffc17 	ldw	r6,-16(fp)
 20137d8:	100b883a 	mov	r5,r2
 20137dc:	e13ffa17 	ldw	r4,-24(fp)
 20137e0:	201564c0 	call	201564c <_lseek_r>
 20137e4:	1023883a 	mov	r17,r2
  if (ret == -1L)
 20137e8:	88bfffd8 	cmpnei	r2,r17,-1
 20137ec:	1000051e 	bne	r2,zero,2013804 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 20137f0:	80c0030b 	ldhu	r3,12(r16)
 20137f4:	00bbffc4 	movi	r2,-4097
 20137f8:	1884703a 	and	r2,r3,r2
 20137fc:	8080030d 	sth	r2,12(r16)
 2013800:	00000406 	br	2013814 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 2013804:	8080030b 	ldhu	r2,12(r16)
 2013808:	10840014 	ori	r2,r2,4096
 201380c:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 2013810:	84401415 	stw	r17,80(r16)
    }
  return ret;
 2013814:	8805883a 	mov	r2,r17
}
 2013818:	e6fffe04 	addi	sp,fp,-8
 201381c:	dfc00317 	ldw	ra,12(sp)
 2013820:	df000217 	ldw	fp,8(sp)
 2013824:	dc400117 	ldw	r17,4(sp)
 2013828:	dc000017 	ldw	r16,0(sp)
 201382c:	dec00404 	addi	sp,sp,16
 2013830:	f800283a 	ret

02013834 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 2013834:	defffb04 	addi	sp,sp,-20
 2013838:	dfc00415 	stw	ra,16(sp)
 201383c:	df000315 	stw	fp,12(sp)
 2013840:	df000304 	addi	fp,sp,12
 2013844:	e13ffe15 	stw	r4,-8(fp)
 2013848:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 201384c:	e0bfff17 	ldw	r2,-4(fp)
 2013850:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 2013854:	e0bffd17 	ldw	r2,-12(fp)
 2013858:	1080038b 	ldhu	r2,14(r2)
 201385c:	10bfffcc 	andi	r2,r2,65535
 2013860:	10a0001c 	xori	r2,r2,32768
 2013864:	10a00004 	addi	r2,r2,-32768
 2013868:	100b883a 	mov	r5,r2
 201386c:	e13ffe17 	ldw	r4,-8(fp)
 2013870:	2014f780 	call	2014f78 <_close_r>
}
 2013874:	e037883a 	mov	sp,fp
 2013878:	dfc00117 	ldw	ra,4(sp)
 201387c:	df000017 	ldw	fp,0(sp)
 2013880:	dec00204 	addi	sp,sp,8
 2013884:	f800283a 	ret

02013888 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 2013888:	defffb04 	addi	sp,sp,-20
 201388c:	df000415 	stw	fp,16(sp)
 2013890:	df000404 	addi	fp,sp,16
 2013894:	e13ffe15 	stw	r4,-8(fp)
 2013898:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 201389c:	e0fffe17 	ldw	r3,-8(fp)
 20138a0:	e0bfff17 	ldw	r2,-4(fp)
 20138a4:	1884b03a 	or	r2,r3,r2
 20138a8:	108000cc 	andi	r2,r2,3
 20138ac:	10002a1e 	bne	r2,zero,2013958 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 20138b0:	e0bffe17 	ldw	r2,-8(fp)
 20138b4:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 20138b8:	e0bfff17 	ldw	r2,-4(fp)
 20138bc:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 20138c0:	00001506 	br	2013918 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 20138c4:	e0bffc17 	ldw	r2,-16(fp)
 20138c8:	10c00017 	ldw	r3,0(r2)
 20138cc:	00bfbff4 	movhi	r2,65279
 20138d0:	10bfbfc4 	addi	r2,r2,-257
 20138d4:	1887883a 	add	r3,r3,r2
 20138d8:	e0bffc17 	ldw	r2,-16(fp)
 20138dc:	10800017 	ldw	r2,0(r2)
 20138e0:	0084303a 	nor	r2,zero,r2
 20138e4:	1886703a 	and	r3,r3,r2
 20138e8:	00a02074 	movhi	r2,32897
 20138ec:	10a02004 	addi	r2,r2,-32640
 20138f0:	1884703a 	and	r2,r3,r2
 20138f4:	10000226 	beq	r2,zero,2013900 <strcmp+0x78>
	    return 0;
 20138f8:	0005883a 	mov	r2,zero
 20138fc:	00002e06 	br	20139b8 <strcmp+0x130>

          a1++;
 2013900:	e0bffc17 	ldw	r2,-16(fp)
 2013904:	10800104 	addi	r2,r2,4
 2013908:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 201390c:	e0bffd17 	ldw	r2,-12(fp)
 2013910:	10800104 	addi	r2,r2,4
 2013914:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 2013918:	e0bffc17 	ldw	r2,-16(fp)
 201391c:	10c00017 	ldw	r3,0(r2)
 2013920:	e0bffd17 	ldw	r2,-12(fp)
 2013924:	10800017 	ldw	r2,0(r2)
 2013928:	18bfe626 	beq	r3,r2,20138c4 <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 201392c:	e0bffc17 	ldw	r2,-16(fp)
 2013930:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 2013934:	e0bffd17 	ldw	r2,-12(fp)
 2013938:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 201393c:	00000606 	br	2013958 <strcmp+0xd0>
    {
      s1++;
 2013940:	e0bffe17 	ldw	r2,-8(fp)
 2013944:	10800044 	addi	r2,r2,1
 2013948:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 201394c:	e0bfff17 	ldw	r2,-4(fp)
 2013950:	10800044 	addi	r2,r2,1
 2013954:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 2013958:	e0bffe17 	ldw	r2,-8(fp)
 201395c:	10800003 	ldbu	r2,0(r2)
 2013960:	10803fcc 	andi	r2,r2,255
 2013964:	1080201c 	xori	r2,r2,128
 2013968:	10bfe004 	addi	r2,r2,-128
 201396c:	10000b26 	beq	r2,zero,201399c <strcmp+0x114>
 2013970:	e0bffe17 	ldw	r2,-8(fp)
 2013974:	10c00003 	ldbu	r3,0(r2)
 2013978:	e0bfff17 	ldw	r2,-4(fp)
 201397c:	10800003 	ldbu	r2,0(r2)
 2013980:	18c03fcc 	andi	r3,r3,255
 2013984:	18c0201c 	xori	r3,r3,128
 2013988:	18ffe004 	addi	r3,r3,-128
 201398c:	10803fcc 	andi	r2,r2,255
 2013990:	1080201c 	xori	r2,r2,128
 2013994:	10bfe004 	addi	r2,r2,-128
 2013998:	18bfe926 	beq	r3,r2,2013940 <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 201399c:	e0bffe17 	ldw	r2,-8(fp)
 20139a0:	10800003 	ldbu	r2,0(r2)
 20139a4:	10c03fcc 	andi	r3,r2,255
 20139a8:	e0bfff17 	ldw	r2,-4(fp)
 20139ac:	10800003 	ldbu	r2,0(r2)
 20139b0:	10803fcc 	andi	r2,r2,255
 20139b4:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 20139b8:	e037883a 	mov	sp,fp
 20139bc:	df000017 	ldw	fp,0(sp)
 20139c0:	dec00104 	addi	sp,sp,4
 20139c4:	f800283a 	ret

020139c8 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 20139c8:	defff604 	addi	sp,sp,-40
 20139cc:	dfc00915 	stw	ra,36(sp)
 20139d0:	df000815 	stw	fp,32(sp)
 20139d4:	dc400715 	stw	r17,28(sp)
 20139d8:	dc000615 	stw	r16,24(sp)
 20139dc:	df000804 	addi	fp,sp,32
 20139e0:	e13ffc15 	stw	r4,-16(fp)
 20139e4:	e17ffd15 	stw	r5,-12(fp)
 20139e8:	3021883a 	mov	r16,r6
	register int err = 0;
 20139ec:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 20139f0:	80800217 	ldw	r2,8(r16)
 20139f4:	1000031e 	bne	r2,zero,2013a04 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 20139f8:	80000115 	stw	zero,4(r16)
		return (0);
 20139fc:	0005883a 	mov	r2,zero
 2013a00:	00003906 	br	2013ae8 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 2013a04:	e0bffd17 	ldw	r2,-12(fp)
 2013a08:	10801917 	ldw	r2,100(r2)
 2013a0c:	1088000c 	andi	r2,r2,8192
 2013a10:	10002d26 	beq	r2,zero,2013ac8 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 2013a14:	80800017 	ldw	r2,0(r16)
 2013a18:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 2013a1c:	00002706 	br	2013abc <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 2013a20:	e0bff817 	ldw	r2,-32(fp)
 2013a24:	10800017 	ldw	r2,0(r2)
 2013a28:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 2013a2c:	e0bff817 	ldw	r2,-32(fp)
 2013a30:	10800117 	ldw	r2,4(r2)
 2013a34:	1004d0ba 	srli	r2,r2,2
 2013a38:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 2013a3c:	e03ff915 	stw	zero,-28(fp)
 2013a40:	00001206 	br	2013a8c <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 2013a44:	e0bff917 	ldw	r2,-28(fp)
 2013a48:	1085883a 	add	r2,r2,r2
 2013a4c:	1085883a 	add	r2,r2,r2
 2013a50:	1007883a 	mov	r3,r2
 2013a54:	e0bffa17 	ldw	r2,-24(fp)
 2013a58:	10c5883a 	add	r2,r2,r3
 2013a5c:	10800017 	ldw	r2,0(r2)
 2013a60:	e1bffd17 	ldw	r6,-12(fp)
 2013a64:	100b883a 	mov	r5,r2
 2013a68:	e13ffc17 	ldw	r4,-16(fp)
 2013a6c:	20154940 	call	2015494 <_fputwc_r>
 2013a70:	10bfffd8 	cmpnei	r2,r2,-1
 2013a74:	1000021e 	bne	r2,zero,2013a80 <__sprint_r+0xb8>
					err = -1;
 2013a78:	047fffc4 	movi	r17,-1
					goto out;
 2013a7c:	00001706 	br	2013adc <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 2013a80:	e0bff917 	ldw	r2,-28(fp)
 2013a84:	10800044 	addi	r2,r2,1
 2013a88:	e0bff915 	stw	r2,-28(fp)
 2013a8c:	e0fff917 	ldw	r3,-28(fp)
 2013a90:	e0bffb17 	ldw	r2,-20(fp)
 2013a94:	18bfeb16 	blt	r3,r2,2013a44 <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 2013a98:	80c00217 	ldw	r3,8(r16)
 2013a9c:	e0bffb17 	ldw	r2,-20(fp)
 2013aa0:	1085883a 	add	r2,r2,r2
 2013aa4:	1085883a 	add	r2,r2,r2
 2013aa8:	1885c83a 	sub	r2,r3,r2
 2013aac:	80800215 	stw	r2,8(r16)
 2013ab0:	e0bff817 	ldw	r2,-32(fp)
 2013ab4:	10800204 	addi	r2,r2,8
 2013ab8:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 2013abc:	80800217 	ldw	r2,8(r16)
 2013ac0:	103fd71e 	bne	r2,zero,2013a20 <__sprint_r+0x58>
 2013ac4:	00000506 	br	2013adc <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 2013ac8:	800d883a 	mov	r6,r16
 2013acc:	e17ffd17 	ldw	r5,-12(fp)
 2013ad0:	e13ffc17 	ldw	r4,-16(fp)
 2013ad4:	200f0f80 	call	200f0f8 <__sfvwrite_r>
 2013ad8:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 2013adc:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 2013ae0:	80000115 	stw	zero,4(r16)
	return (err);
 2013ae4:	8805883a 	mov	r2,r17
}
 2013ae8:	e6fffe04 	addi	sp,fp,-8
 2013aec:	dfc00317 	ldw	ra,12(sp)
 2013af0:	df000217 	ldw	fp,8(sp)
 2013af4:	dc400117 	ldw	r17,4(sp)
 2013af8:	dc000017 	ldw	r16,0(sp)
 2013afc:	dec00404 	addi	sp,sp,16
 2013b00:	f800283a 	ret

02013b04 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 2013b04:	defedf04 	addi	sp,sp,-1156
 2013b08:	dfc12015 	stw	ra,1152(sp)
 2013b0c:	df011f15 	stw	fp,1148(sp)
 2013b10:	dc011e15 	stw	r16,1144(sp)
 2013b14:	df011f04 	addi	fp,sp,1148
 2013b18:	e13ffc15 	stw	r4,-16(fp)
 2013b1c:	2821883a 	mov	r16,r5
 2013b20:	e1bffd15 	stw	r6,-12(fp)
 2013b24:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2013b28:	80c0030b 	ldhu	r3,12(r16)
 2013b2c:	00bfff44 	movi	r2,-3
 2013b30:	1884703a 	and	r2,r3,r2
 2013b34:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2013b38:	80801917 	ldw	r2,100(r16)
 2013b3c:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 2013b40:	8080038b 	ldhu	r2,14(r16)
 2013b44:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2013b48:	80800717 	ldw	r2,28(r16)
 2013b4c:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 2013b50:	80800917 	ldw	r2,36(r16)
 2013b54:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2013b58:	e0befc04 	addi	r2,fp,-1040
 2013b5c:	e0bee215 	stw	r2,-1144(fp)
 2013b60:	e0bee217 	ldw	r2,-1144(fp)
 2013b64:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2013b68:	00810004 	movi	r2,1024
 2013b6c:	e0bee415 	stw	r2,-1136(fp)
 2013b70:	e0bee417 	ldw	r2,-1136(fp)
 2013b74:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2013b78:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2013b7c:	e0bee204 	addi	r2,fp,-1144
 2013b80:	e1fffe17 	ldw	r7,-8(fp)
 2013b84:	e1bffd17 	ldw	r6,-12(fp)
 2013b88:	100b883a 	mov	r5,r2
 2013b8c:	e13ffc17 	ldw	r4,-16(fp)
 2013b90:	2013c440 	call	2013c44 <___vfiprintf_internal_r>
 2013b94:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2013b98:	e0bee117 	ldw	r2,-1148(fp)
 2013b9c:	10000716 	blt	r2,zero,2013bbc <__sbprintf+0xb8>
 2013ba0:	e0bee204 	addi	r2,fp,-1144
 2013ba4:	100b883a 	mov	r5,r2
 2013ba8:	e13ffc17 	ldw	r4,-16(fp)
 2013bac:	200e32c0 	call	200e32c <_fflush_r>
 2013bb0:	10000226 	beq	r2,zero,2013bbc <__sbprintf+0xb8>
		ret = EOF;
 2013bb4:	00bfffc4 	movi	r2,-1
 2013bb8:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2013bbc:	e0bee50b 	ldhu	r2,-1132(fp)
 2013bc0:	10bfffcc 	andi	r2,r2,65535
 2013bc4:	1080100c 	andi	r2,r2,64
 2013bc8:	10000326 	beq	r2,zero,2013bd8 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 2013bcc:	8080030b 	ldhu	r2,12(r16)
 2013bd0:	10801014 	ori	r2,r2,64
 2013bd4:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 2013bd8:	e0bee117 	ldw	r2,-1148(fp)
}
 2013bdc:	e6ffff04 	addi	sp,fp,-4
 2013be0:	dfc00217 	ldw	ra,8(sp)
 2013be4:	df000117 	ldw	fp,4(sp)
 2013be8:	dc000017 	ldw	r16,0(sp)
 2013bec:	dec00304 	addi	sp,sp,12
 2013bf0:	f800283a 	ret

02013bf4 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 2013bf4:	defffa04 	addi	sp,sp,-24
 2013bf8:	dfc00515 	stw	ra,20(sp)
 2013bfc:	df000415 	stw	fp,16(sp)
 2013c00:	df000404 	addi	fp,sp,16
 2013c04:	e13ffd15 	stw	r4,-12(fp)
 2013c08:	e17ffe15 	stw	r5,-8(fp)
 2013c0c:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 2013c10:	d0a03017 	ldw	r2,-32576(gp)
 2013c14:	e1ffff17 	ldw	r7,-4(fp)
 2013c18:	e1bffe17 	ldw	r6,-8(fp)
 2013c1c:	e17ffd17 	ldw	r5,-12(fp)
 2013c20:	1009883a 	mov	r4,r2
 2013c24:	2013c440 	call	2013c44 <___vfiprintf_internal_r>
 2013c28:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2013c2c:	e0bffc17 	ldw	r2,-16(fp)
}
 2013c30:	e037883a 	mov	sp,fp
 2013c34:	dfc00117 	ldw	ra,4(sp)
 2013c38:	df000017 	ldw	fp,0(sp)
 2013c3c:	dec00204 	addi	sp,sp,8
 2013c40:	f800283a 	ret

02013c44 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 2013c44:	deffb704 	addi	sp,sp,-292
 2013c48:	dfc04815 	stw	ra,288(sp)
 2013c4c:	df004715 	stw	fp,284(sp)
 2013c50:	ddc04615 	stw	r23,280(sp)
 2013c54:	dd804515 	stw	r22,276(sp)
 2013c58:	dd404415 	stw	r21,272(sp)
 2013c5c:	dd004315 	stw	r20,268(sp)
 2013c60:	dcc04215 	stw	r19,264(sp)
 2013c64:	dc804115 	stw	r18,260(sp)
 2013c68:	dc404015 	stw	r17,256(sp)
 2013c6c:	dc003f15 	stw	r16,252(sp)
 2013c70:	df004704 	addi	fp,sp,284
 2013c74:	e13fe615 	stw	r4,-104(fp)
 2013c78:	e17fe715 	stw	r5,-100(fp)
 2013c7c:	e1bfe815 	stw	r6,-96(fp)
 2013c80:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2013c84:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2013c88:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 2013c8c:	e0bfe617 	ldw	r2,-104(fp)
 2013c90:	e0bfc415 	stw	r2,-240(fp)
 2013c94:	e0bfc417 	ldw	r2,-240(fp)
 2013c98:	10000526 	beq	r2,zero,2013cb0 <___vfiprintf_internal_r+0x6c>
 2013c9c:	e0bfc417 	ldw	r2,-240(fp)
 2013ca0:	10800e17 	ldw	r2,56(r2)
 2013ca4:	1000021e 	bne	r2,zero,2013cb0 <___vfiprintf_internal_r+0x6c>
 2013ca8:	e13fc417 	ldw	r4,-240(fp)
 2013cac:	200e7ac0 	call	200e7ac <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 2013cb0:	e0bfe717 	ldw	r2,-100(fp)
 2013cb4:	1080030b 	ldhu	r2,12(r2)
 2013cb8:	10bfffcc 	andi	r2,r2,65535
 2013cbc:	1088000c 	andi	r2,r2,8192
 2013cc0:	10000c1e 	bne	r2,zero,2013cf4 <___vfiprintf_internal_r+0xb0>
 2013cc4:	e0bfe717 	ldw	r2,-100(fp)
 2013cc8:	1080030b 	ldhu	r2,12(r2)
 2013ccc:	10880014 	ori	r2,r2,8192
 2013cd0:	1007883a 	mov	r3,r2
 2013cd4:	e0bfe717 	ldw	r2,-100(fp)
 2013cd8:	10c0030d 	sth	r3,12(r2)
 2013cdc:	e0bfe717 	ldw	r2,-100(fp)
 2013ce0:	10c01917 	ldw	r3,100(r2)
 2013ce4:	00b7ffc4 	movi	r2,-8193
 2013ce8:	1886703a 	and	r3,r3,r2
 2013cec:	e0bfe717 	ldw	r2,-100(fp)
 2013cf0:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 2013cf4:	e0bfe717 	ldw	r2,-100(fp)
 2013cf8:	1080030b 	ldhu	r2,12(r2)
 2013cfc:	10bfffcc 	andi	r2,r2,65535
 2013d00:	1080020c 	andi	r2,r2,8
 2013d04:	10000326 	beq	r2,zero,2013d14 <___vfiprintf_internal_r+0xd0>
 2013d08:	e0bfe717 	ldw	r2,-100(fp)
 2013d0c:	10800417 	ldw	r2,16(r2)
 2013d10:	1000061e 	bne	r2,zero,2013d2c <___vfiprintf_internal_r+0xe8>
 2013d14:	e17fe717 	ldw	r5,-100(fp)
 2013d18:	e13fe617 	ldw	r4,-104(fp)
 2013d1c:	200bf5c0 	call	200bf5c <__swsetup_r>
 2013d20:	10000226 	beq	r2,zero,2013d2c <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2013d24:	00bfffc4 	movi	r2,-1
 2013d28:	00046a06 	br	2014ed4 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2013d2c:	e0bfe717 	ldw	r2,-100(fp)
 2013d30:	1080030b 	ldhu	r2,12(r2)
 2013d34:	10bfffcc 	andi	r2,r2,65535
 2013d38:	1080068c 	andi	r2,r2,26
 2013d3c:	10800298 	cmpnei	r2,r2,10
 2013d40:	10000c1e 	bne	r2,zero,2013d74 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 2013d44:	e0bfe717 	ldw	r2,-100(fp)
 2013d48:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2013d4c:	10bfffcc 	andi	r2,r2,65535
 2013d50:	10a0001c 	xori	r2,r2,32768
 2013d54:	10a00004 	addi	r2,r2,-32768
 2013d58:	10000616 	blt	r2,zero,2013d74 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 2013d5c:	e1ffe917 	ldw	r7,-92(fp)
 2013d60:	e1bfe817 	ldw	r6,-96(fp)
 2013d64:	e17fe717 	ldw	r5,-100(fp)
 2013d68:	e13fe617 	ldw	r4,-104(fp)
 2013d6c:	2013b040 	call	2013b04 <__sbprintf>
 2013d70:	00045806 	br	2014ed4 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2013d74:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2013d78:	e4bfcb04 	addi	r18,fp,-212
 2013d7c:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 2013d80:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2013d84:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2013d88:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 2013d8c:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2013d90:	00000106 	br	2013d98 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 2013d94:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2013d98:	a8800003 	ldbu	r2,0(r21)
 2013d9c:	10803fcc 	andi	r2,r2,255
 2013da0:	1080201c 	xori	r2,r2,128
 2013da4:	10bfe004 	addi	r2,r2,-128
 2013da8:	10000626 	beq	r2,zero,2013dc4 <___vfiprintf_internal_r+0x180>
 2013dac:	a8800003 	ldbu	r2,0(r21)
 2013db0:	10803fcc 	andi	r2,r2,255
 2013db4:	1080201c 	xori	r2,r2,128
 2013db8:	10bfe004 	addi	r2,r2,-128
 2013dbc:	10800958 	cmpnei	r2,r2,37
 2013dc0:	103ff41e 	bne	r2,zero,2013d94 <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 2013dc4:	a807883a 	mov	r3,r21
 2013dc8:	a005883a 	mov	r2,r20
 2013dcc:	18a1c83a 	sub	r16,r3,r2
 2013dd0:	80001826 	beq	r16,zero,2013e34 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 2013dd4:	95000015 	stw	r20,0(r18)
 2013dd8:	8005883a 	mov	r2,r16
 2013ddc:	90800115 	stw	r2,4(r18)
 2013de0:	e0bfca17 	ldw	r2,-216(fp)
 2013de4:	8007883a 	mov	r3,r16
 2013de8:	10c5883a 	add	r2,r2,r3
 2013dec:	e0bfca15 	stw	r2,-216(fp)
 2013df0:	94800204 	addi	r18,r18,8
 2013df4:	e0bfc917 	ldw	r2,-220(fp)
 2013df8:	10800044 	addi	r2,r2,1
 2013dfc:	e0bfc915 	stw	r2,-220(fp)
 2013e00:	e0bfc917 	ldw	r2,-220(fp)
 2013e04:	10800210 	cmplti	r2,r2,8
 2013e08:	1000071e 	bne	r2,zero,2013e28 <___vfiprintf_internal_r+0x1e4>
 2013e0c:	e0bfc804 	addi	r2,fp,-224
 2013e10:	100d883a 	mov	r6,r2
 2013e14:	e17fe717 	ldw	r5,-100(fp)
 2013e18:	e13fe617 	ldw	r4,-104(fp)
 2013e1c:	20139c80 	call	20139c8 <__sprint_r>
 2013e20:	1004031e 	bne	r2,zero,2014e30 <___vfiprintf_internal_r+0x11ec>
 2013e24:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 2013e28:	e0bfb917 	ldw	r2,-284(fp)
 2013e2c:	1405883a 	add	r2,r2,r16
 2013e30:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2013e34:	a8800003 	ldbu	r2,0(r21)
 2013e38:	10803fcc 	andi	r2,r2,255
 2013e3c:	1080201c 	xori	r2,r2,128
 2013e40:	10bfe004 	addi	r2,r2,-128
 2013e44:	1003ec26 	beq	r2,zero,2014df8 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 2013e48:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 2013e4c:	ad400044 	addi	r21,r21,1

		flags = 0;
 2013e50:	0027883a 	mov	r19,zero
		dprec = 0;
 2013e54:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 2013e58:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 2013e5c:	00bfffc4 	movi	r2,-1
 2013e60:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 2013e64:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 2013e68:	a805883a 	mov	r2,r21
 2013e6c:	15400044 	addi	r21,r2,1
 2013e70:	10800003 	ldbu	r2,0(r2)
 2013e74:	14403fcc 	andi	r17,r2,255
 2013e78:	8c40201c 	xori	r17,r17,128
 2013e7c:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 2013e80:	88bff804 	addi	r2,r17,-32
 2013e84:	10c01668 	cmpgeui	r3,r2,89
 2013e88:	1802881e 	bne	r3,zero,20148ac <___vfiprintf_internal_r+0xc68>
 2013e8c:	100690ba 	slli	r3,r2,2
 2013e90:	00808074 	movhi	r2,513
 2013e94:	108fa904 	addi	r2,r2,16036
 2013e98:	1885883a 	add	r2,r3,r2
 2013e9c:	10800017 	ldw	r2,0(r2)
 2013ea0:	1000683a 	jmp	r2
 2013ea4:	02014008 	cmpgei	r8,zero,1280
 2013ea8:	020148ac 	andhi	r8,zero,1314
 2013eac:	020148ac 	andhi	r8,zero,1314
 2013eb0:	02014028 	cmpgeui	r8,zero,1280
 2013eb4:	020148ac 	andhi	r8,zero,1314
 2013eb8:	020148ac 	andhi	r8,zero,1314
 2013ebc:	020148ac 	andhi	r8,zero,1314
 2013ec0:	020148ac 	andhi	r8,zero,1314
 2013ec4:	020148ac 	andhi	r8,zero,1314
 2013ec8:	020148ac 	andhi	r8,zero,1314
 2013ecc:	02014030 	cmpltui	r8,zero,1280
 2013ed0:	02014064 	muli	r8,zero,1281
 2013ed4:	020148ac 	andhi	r8,zero,1314
 2013ed8:	0201405c 	xori	r8,zero,1281
 2013edc:	02014070 	cmpltui	r8,zero,1281
 2013ee0:	020148ac 	andhi	r8,zero,1314
 2013ee4:	02014104 	movi	r8,1284
 2013ee8:	0201410c 	andi	r8,zero,1284
 2013eec:	0201410c 	andi	r8,zero,1284
 2013ef0:	0201410c 	andi	r8,zero,1284
 2013ef4:	0201410c 	andi	r8,zero,1284
 2013ef8:	0201410c 	andi	r8,zero,1284
 2013efc:	0201410c 	andi	r8,zero,1284
 2013f00:	0201410c 	andi	r8,zero,1284
 2013f04:	0201410c 	andi	r8,zero,1284
 2013f08:	0201410c 	andi	r8,zero,1284
 2013f0c:	020148ac 	andhi	r8,zero,1314
 2013f10:	020148ac 	andhi	r8,zero,1314
 2013f14:	020148ac 	andhi	r8,zero,1314
 2013f18:	020148ac 	andhi	r8,zero,1314
 2013f1c:	020148ac 	andhi	r8,zero,1314
 2013f20:	020148ac 	andhi	r8,zero,1314
 2013f24:	020148ac 	andhi	r8,zero,1314
 2013f28:	020148ac 	andhi	r8,zero,1314
 2013f2c:	020148ac 	andhi	r8,zero,1314
 2013f30:	020148ac 	andhi	r8,zero,1314
 2013f34:	020141ac 	andhi	r8,zero,1286
 2013f38:	020148ac 	andhi	r8,zero,1314
 2013f3c:	020148ac 	andhi	r8,zero,1314
 2013f40:	020148ac 	andhi	r8,zero,1314
 2013f44:	020148ac 	andhi	r8,zero,1314
 2013f48:	020148ac 	andhi	r8,zero,1314
 2013f4c:	020148ac 	andhi	r8,zero,1314
 2013f50:	020148ac 	andhi	r8,zero,1314
 2013f54:	020148ac 	andhi	r8,zero,1314
 2013f58:	020148ac 	andhi	r8,zero,1314
 2013f5c:	020148ac 	andhi	r8,zero,1314
 2013f60:	0201434c 	andi	r8,zero,1293
 2013f64:	020148ac 	andhi	r8,zero,1314
 2013f68:	020148ac 	andhi	r8,zero,1314
 2013f6c:	020148ac 	andhi	r8,zero,1314
 2013f70:	020148ac 	andhi	r8,zero,1314
 2013f74:	020148ac 	andhi	r8,zero,1314
 2013f78:	020144c8 	cmpgei	r8,zero,1299
 2013f7c:	020148ac 	andhi	r8,zero,1314
 2013f80:	020148ac 	andhi	r8,zero,1314
 2013f84:	02014588 	cmpgei	r8,zero,1302
 2013f88:	020148ac 	andhi	r8,zero,1314
 2013f8c:	020148ac 	andhi	r8,zero,1314
 2013f90:	020148ac 	andhi	r8,zero,1314
 2013f94:	020148ac 	andhi	r8,zero,1314
 2013f98:	020148ac 	andhi	r8,zero,1314
 2013f9c:	020148ac 	andhi	r8,zero,1314
 2013fa0:	020148ac 	andhi	r8,zero,1314
 2013fa4:	020148ac 	andhi	r8,zero,1314
 2013fa8:	020148ac 	andhi	r8,zero,1314
 2013fac:	020148ac 	andhi	r8,zero,1314
 2013fb0:	02014184 	movi	r8,1286
 2013fb4:	020141b0 	cmpltui	r8,zero,1286
 2013fb8:	020148ac 	andhi	r8,zero,1314
 2013fbc:	020148ac 	andhi	r8,zero,1314
 2013fc0:	020148ac 	andhi	r8,zero,1314
 2013fc4:	02014148 	cmpgei	r8,zero,1285
 2013fc8:	020141b0 	cmpltui	r8,zero,1286
 2013fcc:	020148ac 	andhi	r8,zero,1314
 2013fd0:	020148ac 	andhi	r8,zero,1314
 2013fd4:	02014150 	cmplti	r8,zero,1285
 2013fd8:	020148ac 	andhi	r8,zero,1314
 2013fdc:	020142ac 	andhi	r8,zero,1290
 2013fe0:	02014350 	cmplti	r8,zero,1293
 2013fe4:	020143f0 	cmpltui	r8,zero,1295
 2013fe8:	0201417c 	xorhi	r8,zero,1285
 2013fec:	020148ac 	andhi	r8,zero,1314
 2013ff0:	02014438 	rdprs	r8,zero,1296
 2013ff4:	020148ac 	andhi	r8,zero,1314
 2013ff8:	020144cc 	andi	r8,zero,1299
 2013ffc:	020148ac 	andhi	r8,zero,1314
 2014000:	020148ac 	andhi	r8,zero,1314
 2014004:	02014598 	cmpnei	r8,zero,1302
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 2014008:	e0bfc703 	ldbu	r2,-228(fp)
 201400c:	10803fcc 	andi	r2,r2,255
 2014010:	1080201c 	xori	r2,r2,128
 2014014:	10bfe004 	addi	r2,r2,-128
 2014018:	103f931e 	bne	r2,zero,2013e68 <___vfiprintf_internal_r+0x224>
				sign = ' ';
 201401c:	00800804 	movi	r2,32
 2014020:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 2014024:	003f9006 	br	2013e68 <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 2014028:	9cc00054 	ori	r19,r19,1
			goto rflag;
 201402c:	003f8e06 	br	2013e68 <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 2014030:	e0bfe917 	ldw	r2,-92(fp)
 2014034:	10c00104 	addi	r3,r2,4
 2014038:	e0ffe915 	stw	r3,-92(fp)
 201403c:	10800017 	ldw	r2,0(r2)
 2014040:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2014044:	e0bfba17 	ldw	r2,-280(fp)
 2014048:	10000116 	blt	r2,zero,2014050 <___vfiprintf_internal_r+0x40c>
				goto rflag;
 201404c:	003f8606 	br	2013e68 <___vfiprintf_internal_r+0x224>
			width = -width;
 2014050:	e0bfba17 	ldw	r2,-280(fp)
 2014054:	0085c83a 	sub	r2,zero,r2
 2014058:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 201405c:	9cc00114 	ori	r19,r19,4
			goto rflag;
 2014060:	003f8106 	br	2013e68 <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 2014064:	00800ac4 	movi	r2,43
 2014068:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 201406c:	003f7e06 	br	2013e68 <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 2014070:	a805883a 	mov	r2,r21
 2014074:	15400044 	addi	r21,r2,1
 2014078:	10800003 	ldbu	r2,0(r2)
 201407c:	14403fcc 	andi	r17,r2,255
 2014080:	8c40201c 	xori	r17,r17,128
 2014084:	8c7fe004 	addi	r17,r17,-128
 2014088:	88800a98 	cmpnei	r2,r17,42
 201408c:	10000a1e 	bne	r2,zero,20140b8 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 2014090:	e0bfe917 	ldw	r2,-92(fp)
 2014094:	10c00104 	addi	r3,r2,4
 2014098:	e0ffe915 	stw	r3,-92(fp)
 201409c:	10800017 	ldw	r2,0(r2)
 20140a0:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 20140a4:	e0bfbb17 	ldw	r2,-276(fp)
 20140a8:	103f6f0e 	bge	r2,zero,2013e68 <___vfiprintf_internal_r+0x224>
					prec = -1;
 20140ac:	00bfffc4 	movi	r2,-1
 20140b0:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 20140b4:	003f6c06 	br	2013e68 <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 20140b8:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 20140bc:	00000906 	br	20140e4 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 20140c0:	80c002a4 	muli	r3,r16,10
 20140c4:	88bff404 	addi	r2,r17,-48
 20140c8:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 20140cc:	a805883a 	mov	r2,r21
 20140d0:	15400044 	addi	r21,r2,1
 20140d4:	10800003 	ldbu	r2,0(r2)
 20140d8:	14403fcc 	andi	r17,r2,255
 20140dc:	8c40201c 	xori	r17,r17,128
 20140e0:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 20140e4:	88bff404 	addi	r2,r17,-48
 20140e8:	108002b0 	cmpltui	r2,r2,10
 20140ec:	103ff41e 	bne	r2,zero,20140c0 <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 20140f0:	8005883a 	mov	r2,r16
 20140f4:	1000010e 	bge	r2,zero,20140fc <___vfiprintf_internal_r+0x4b8>
 20140f8:	00bfffc4 	movi	r2,-1
 20140fc:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 2014100:	003f5f06 	br	2013e80 <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 2014104:	9cc02014 	ori	r19,r19,128
			goto rflag;
 2014108:	003f5706 	br	2013e68 <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 201410c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 2014110:	80c002a4 	muli	r3,r16,10
 2014114:	88bff404 	addi	r2,r17,-48
 2014118:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 201411c:	a805883a 	mov	r2,r21
 2014120:	15400044 	addi	r21,r2,1
 2014124:	10800003 	ldbu	r2,0(r2)
 2014128:	14403fcc 	andi	r17,r2,255
 201412c:	8c40201c 	xori	r17,r17,128
 2014130:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 2014134:	88bff404 	addi	r2,r17,-48
 2014138:	108002b0 	cmpltui	r2,r2,10
 201413c:	103ff41e 	bne	r2,zero,2014110 <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2014140:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 2014144:	003f4e06 	br	2013e80 <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 2014148:	9cc01014 	ori	r19,r19,64
			goto rflag;
 201414c:	003f4606 	br	2013e68 <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 2014150:	a8800003 	ldbu	r2,0(r21)
 2014154:	10803fcc 	andi	r2,r2,255
 2014158:	1080201c 	xori	r2,r2,128
 201415c:	10bfe004 	addi	r2,r2,-128
 2014160:	10801b18 	cmpnei	r2,r2,108
 2014164:	1000031e 	bne	r2,zero,2014174 <___vfiprintf_internal_r+0x530>
				fmt++;
 2014168:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 201416c:	9cc00814 	ori	r19,r19,32
 2014170:	003f3d06 	br	2013e68 <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 2014174:	9cc00414 	ori	r19,r19,16
			goto rflag;
 2014178:	003f3b06 	br	2013e68 <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 201417c:	9cc00814 	ori	r19,r19,32
			goto rflag;
 2014180:	003f3906 	br	2013e68 <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 2014184:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 2014188:	e0bfe917 	ldw	r2,-92(fp)
 201418c:	10c00104 	addi	r3,r2,4
 2014190:	e0ffe915 	stw	r3,-92(fp)
 2014194:	10800017 	ldw	r2,0(r2)
 2014198:	a0800005 	stb	r2,0(r20)
				size = 1;
 201419c:	00800044 	movi	r2,1
 20141a0:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 20141a4:	e03fc705 	stb	zero,-228(fp)
			break;
 20141a8:	0001c806 	br	20148cc <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 20141ac:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 20141b0:	9880080c 	andi	r2,r19,32
 20141b4:	10000826 	beq	r2,zero,20141d8 <___vfiprintf_internal_r+0x594>
 20141b8:	e13fe917 	ldw	r4,-92(fp)
 20141bc:	20800204 	addi	r2,r4,8
 20141c0:	e0bfe915 	stw	r2,-92(fp)
 20141c4:	20800017 	ldw	r2,0(r4)
 20141c8:	20c00117 	ldw	r3,4(r4)
 20141cc:	e0bfea15 	stw	r2,-88(fp)
 20141d0:	e0ffeb15 	stw	r3,-84(fp)
 20141d4:	00001e06 	br	2014250 <___vfiprintf_internal_r+0x60c>
 20141d8:	9880040c 	andi	r2,r19,16
 20141dc:	10000826 	beq	r2,zero,2014200 <___vfiprintf_internal_r+0x5bc>
 20141e0:	e0bfe917 	ldw	r2,-92(fp)
 20141e4:	10c00104 	addi	r3,r2,4
 20141e8:	e0ffe915 	stw	r3,-92(fp)
 20141ec:	10800017 	ldw	r2,0(r2)
 20141f0:	e0bfea15 	stw	r2,-88(fp)
 20141f4:	1005d7fa 	srai	r2,r2,31
 20141f8:	e0bfeb15 	stw	r2,-84(fp)
 20141fc:	00001406 	br	2014250 <___vfiprintf_internal_r+0x60c>
 2014200:	9880100c 	andi	r2,r19,64
 2014204:	10000b26 	beq	r2,zero,2014234 <___vfiprintf_internal_r+0x5f0>
 2014208:	e0bfe917 	ldw	r2,-92(fp)
 201420c:	10c00104 	addi	r3,r2,4
 2014210:	e0ffe915 	stw	r3,-92(fp)
 2014214:	10800017 	ldw	r2,0(r2)
 2014218:	10bfffcc 	andi	r2,r2,65535
 201421c:	10a0001c 	xori	r2,r2,32768
 2014220:	10a00004 	addi	r2,r2,-32768
 2014224:	e0bfea15 	stw	r2,-88(fp)
 2014228:	1005d7fa 	srai	r2,r2,31
 201422c:	e0bfeb15 	stw	r2,-84(fp)
 2014230:	00000706 	br	2014250 <___vfiprintf_internal_r+0x60c>
 2014234:	e0bfe917 	ldw	r2,-92(fp)
 2014238:	10c00104 	addi	r3,r2,4
 201423c:	e0ffe915 	stw	r3,-92(fp)
 2014240:	10800017 	ldw	r2,0(r2)
 2014244:	e0bfea15 	stw	r2,-88(fp)
 2014248:	1005d7fa 	srai	r2,r2,31
 201424c:	e0bfeb15 	stw	r2,-84(fp)
 2014250:	e0bfea17 	ldw	r2,-88(fp)
 2014254:	e0bfbc15 	stw	r2,-272(fp)
 2014258:	e0ffeb17 	ldw	r3,-84(fp)
 201425c:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 2014260:	e0bfbc17 	ldw	r2,-272(fp)
 2014264:	e0ffbd17 	ldw	r3,-268(fp)
 2014268:	18000d0e 	bge	r3,zero,20142a0 <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 201426c:	000d883a 	mov	r6,zero
 2014270:	000f883a 	mov	r7,zero
 2014274:	e13fbc17 	ldw	r4,-272(fp)
 2014278:	e17fbd17 	ldw	r5,-268(fp)
 201427c:	3105c83a 	sub	r2,r6,r4
 2014280:	3091803a 	cmpltu	r8,r6,r2
 2014284:	3947c83a 	sub	r3,r7,r5
 2014288:	1a09c83a 	sub	r4,r3,r8
 201428c:	2007883a 	mov	r3,r4
 2014290:	e0bfbc15 	stw	r2,-272(fp)
 2014294:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 2014298:	00800b44 	movi	r2,45
 201429c:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 20142a0:	00800044 	movi	r2,1
 20142a4:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 20142a8:	0000f806 	br	201468c <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 20142ac:	9880080c 	andi	r2,r19,32
 20142b0:	10000d26 	beq	r2,zero,20142e8 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 20142b4:	e0bfe917 	ldw	r2,-92(fp)
 20142b8:	10c00104 	addi	r3,r2,4
 20142bc:	e0ffe915 	stw	r3,-92(fp)
 20142c0:	10800017 	ldw	r2,0(r2)
 20142c4:	e0ffb917 	ldw	r3,-284(fp)
 20142c8:	e0fff015 	stw	r3,-64(fp)
 20142cc:	1807d7fa 	srai	r3,r3,31
 20142d0:	e0fff115 	stw	r3,-60(fp)
 20142d4:	e0fff017 	ldw	r3,-64(fp)
 20142d8:	10c00015 	stw	r3,0(r2)
 20142dc:	e0fff117 	ldw	r3,-60(fp)
 20142e0:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 20142e4:	0002c306 	br	2014df4 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 20142e8:	9880040c 	andi	r2,r19,16
 20142ec:	10000726 	beq	r2,zero,201430c <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 20142f0:	e0bfe917 	ldw	r2,-92(fp)
 20142f4:	10c00104 	addi	r3,r2,4
 20142f8:	e0ffe915 	stw	r3,-92(fp)
 20142fc:	10800017 	ldw	r2,0(r2)
 2014300:	e0ffb917 	ldw	r3,-284(fp)
 2014304:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2014308:	0002ba06 	br	2014df4 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 201430c:	9880100c 	andi	r2,r19,64
 2014310:	10000726 	beq	r2,zero,2014330 <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2014314:	e0bfe917 	ldw	r2,-92(fp)
 2014318:	10c00104 	addi	r3,r2,4
 201431c:	e0ffe915 	stw	r3,-92(fp)
 2014320:	10800017 	ldw	r2,0(r2)
 2014324:	e0ffb917 	ldw	r3,-284(fp)
 2014328:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 201432c:	0002b106 	br	2014df4 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 2014330:	e0bfe917 	ldw	r2,-92(fp)
 2014334:	10c00104 	addi	r3,r2,4
 2014338:	e0ffe915 	stw	r3,-92(fp)
 201433c:	10800017 	ldw	r2,0(r2)
 2014340:	e0ffb917 	ldw	r3,-284(fp)
 2014344:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 2014348:	0002aa06 	br	2014df4 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 201434c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 2014350:	9880080c 	andi	r2,r19,32
 2014354:	10000626 	beq	r2,zero,2014370 <___vfiprintf_internal_r+0x72c>
 2014358:	e0bfe917 	ldw	r2,-92(fp)
 201435c:	10c00204 	addi	r3,r2,8
 2014360:	e0ffe915 	stw	r3,-92(fp)
 2014364:	15800017 	ldw	r22,0(r2)
 2014368:	15c00117 	ldw	r23,4(r2)
 201436c:	00001c06 	br	20143e0 <___vfiprintf_internal_r+0x79c>
 2014370:	9880040c 	andi	r2,r19,16
 2014374:	10000726 	beq	r2,zero,2014394 <___vfiprintf_internal_r+0x750>
 2014378:	e0bfe917 	ldw	r2,-92(fp)
 201437c:	10c00104 	addi	r3,r2,4
 2014380:	e0ffe915 	stw	r3,-92(fp)
 2014384:	10800017 	ldw	r2,0(r2)
 2014388:	102d883a 	mov	r22,r2
 201438c:	002f883a 	mov	r23,zero
 2014390:	00001306 	br	20143e0 <___vfiprintf_internal_r+0x79c>
 2014394:	9880100c 	andi	r2,r19,64
 2014398:	10000b26 	beq	r2,zero,20143c8 <___vfiprintf_internal_r+0x784>
 201439c:	e0bfe917 	ldw	r2,-92(fp)
 20143a0:	10c00104 	addi	r3,r2,4
 20143a4:	e0ffe915 	stw	r3,-92(fp)
 20143a8:	10800017 	ldw	r2,0(r2)
 20143ac:	e0bff215 	stw	r2,-56(fp)
 20143b0:	e03ff315 	stw	zero,-52(fp)
 20143b4:	e0bff217 	ldw	r2,-56(fp)
 20143b8:	15bfffcc 	andi	r22,r2,65535
 20143bc:	e0fff317 	ldw	r3,-52(fp)
 20143c0:	182e703a 	and	r23,r3,zero
 20143c4:	00000606 	br	20143e0 <___vfiprintf_internal_r+0x79c>
 20143c8:	e0bfe917 	ldw	r2,-92(fp)
 20143cc:	10c00104 	addi	r3,r2,4
 20143d0:	e0ffe915 	stw	r3,-92(fp)
 20143d4:	10800017 	ldw	r2,0(r2)
 20143d8:	102d883a 	mov	r22,r2
 20143dc:	002f883a 	mov	r23,zero
 20143e0:	e5bfbc15 	stw	r22,-272(fp)
 20143e4:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 20143e8:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 20143ec:	0000a606 	br	2014688 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 20143f0:	e0bfe917 	ldw	r2,-92(fp)
 20143f4:	10c00104 	addi	r3,r2,4
 20143f8:	e0ffe915 	stw	r3,-92(fp)
 20143fc:	10800017 	ldw	r2,0(r2)
 2014400:	e0bfbc15 	stw	r2,-272(fp)
 2014404:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 2014408:	00800084 	movi	r2,2
 201440c:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 2014410:	008080b4 	movhi	r2,514
 2014414:	108a7704 	addi	r2,r2,10716
 2014418:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 201441c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 2014420:	00800c04 	movi	r2,48
 2014424:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 2014428:	04401e04 	movi	r17,120
 201442c:	00801e04 	movi	r2,120
 2014430:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2014434:	00009406 	br	2014688 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 2014438:	e0bfe917 	ldw	r2,-92(fp)
 201443c:	10c00104 	addi	r3,r2,4
 2014440:	e0ffe915 	stw	r3,-92(fp)
 2014444:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 2014448:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 201444c:	a000081e 	bne	r20,zero,2014470 <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 2014450:	050080b4 	movhi	r20,514
 2014454:	a50a7c04 	addi	r20,r20,10736
				size = ((unsigned) prec > 6U) ? 6 : prec;
 2014458:	e0bfbb17 	ldw	r2,-276(fp)
 201445c:	10c001f0 	cmpltui	r3,r2,7
 2014460:	1800011e 	bne	r3,zero,2014468 <___vfiprintf_internal_r+0x824>
 2014464:	00800184 	movi	r2,6
 2014468:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 201446c:	00011706 	br	20148cc <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 2014470:	e0bfbb17 	ldw	r2,-276(fp)
 2014474:	10001016 	blt	r2,zero,20144b8 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 2014478:	e0bfbb17 	ldw	r2,-276(fp)
 201447c:	100d883a 	mov	r6,r2
 2014480:	000b883a 	mov	r5,zero
 2014484:	a009883a 	mov	r4,r20
 2014488:	2010b880 	call	2010b88 <memchr>
 201448c:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 2014490:	e0bfc617 	ldw	r2,-232(fp)
 2014494:	10000526 	beq	r2,zero,20144ac <___vfiprintf_internal_r+0x868>
					size = p - cp;
 2014498:	e0bfc617 	ldw	r2,-232(fp)
 201449c:	a007883a 	mov	r3,r20
 20144a0:	10c5c83a 	sub	r2,r2,r3
 20144a4:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 20144a8:	00010806 	br	20148cc <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 20144ac:	e0bfbb17 	ldw	r2,-276(fp)
 20144b0:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 20144b4:	00010506 	br	20148cc <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 20144b8:	a009883a 	mov	r4,r20
 20144bc:	200990c0 	call	200990c <strlen>
 20144c0:	e0bfc115 	stw	r2,-252(fp)

			break;
 20144c4:	00010106 	br	20148cc <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 20144c8:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 20144cc:	9880080c 	andi	r2,r19,32
 20144d0:	10000826 	beq	r2,zero,20144f4 <___vfiprintf_internal_r+0x8b0>
 20144d4:	e0bfe917 	ldw	r2,-92(fp)
 20144d8:	10c00204 	addi	r3,r2,8
 20144dc:	e0ffe915 	stw	r3,-92(fp)
 20144e0:	10c00017 	ldw	r3,0(r2)
 20144e4:	e0ffec15 	stw	r3,-80(fp)
 20144e8:	10c00117 	ldw	r3,4(r2)
 20144ec:	e0ffed15 	stw	r3,-76(fp)
 20144f0:	00001e06 	br	201456c <___vfiprintf_internal_r+0x928>
 20144f4:	9880040c 	andi	r2,r19,16
 20144f8:	10000726 	beq	r2,zero,2014518 <___vfiprintf_internal_r+0x8d4>
 20144fc:	e0bfe917 	ldw	r2,-92(fp)
 2014500:	10c00104 	addi	r3,r2,4
 2014504:	e0ffe915 	stw	r3,-92(fp)
 2014508:	10800017 	ldw	r2,0(r2)
 201450c:	e0bfec15 	stw	r2,-80(fp)
 2014510:	e03fed15 	stw	zero,-76(fp)
 2014514:	00001506 	br	201456c <___vfiprintf_internal_r+0x928>
 2014518:	9880100c 	andi	r2,r19,64
 201451c:	10000d26 	beq	r2,zero,2014554 <___vfiprintf_internal_r+0x910>
 2014520:	e0bfe917 	ldw	r2,-92(fp)
 2014524:	10c00104 	addi	r3,r2,4
 2014528:	e0ffe915 	stw	r3,-92(fp)
 201452c:	10800017 	ldw	r2,0(r2)
 2014530:	e0bff415 	stw	r2,-48(fp)
 2014534:	e03ff515 	stw	zero,-44(fp)
 2014538:	e0bff417 	ldw	r2,-48(fp)
 201453c:	10bfffcc 	andi	r2,r2,65535
 2014540:	e0bfec15 	stw	r2,-80(fp)
 2014544:	e0fff517 	ldw	r3,-44(fp)
 2014548:	1806703a 	and	r3,r3,zero
 201454c:	e0ffed15 	stw	r3,-76(fp)
 2014550:	00000606 	br	201456c <___vfiprintf_internal_r+0x928>
 2014554:	e0bfe917 	ldw	r2,-92(fp)
 2014558:	10c00104 	addi	r3,r2,4
 201455c:	e0ffe915 	stw	r3,-92(fp)
 2014560:	10800017 	ldw	r2,0(r2)
 2014564:	e0bfec15 	stw	r2,-80(fp)
 2014568:	e03fed15 	stw	zero,-76(fp)
 201456c:	e0bfec17 	ldw	r2,-80(fp)
 2014570:	e0bfbc15 	stw	r2,-272(fp)
 2014574:	e0ffed17 	ldw	r3,-76(fp)
 2014578:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 201457c:	00800044 	movi	r2,1
 2014580:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 2014584:	00004006 	br	2014688 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 2014588:	008080b4 	movhi	r2,514
 201458c:	108a7e04 	addi	r2,r2,10744
 2014590:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 2014594:	00000306 	br	20145a4 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 2014598:	008080b4 	movhi	r2,514
 201459c:	108a7704 	addi	r2,r2,10716
 20145a0:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 20145a4:	9880080c 	andi	r2,r19,32
 20145a8:	10000826 	beq	r2,zero,20145cc <___vfiprintf_internal_r+0x988>
 20145ac:	e0bfe917 	ldw	r2,-92(fp)
 20145b0:	10c00204 	addi	r3,r2,8
 20145b4:	e0ffe915 	stw	r3,-92(fp)
 20145b8:	10c00017 	ldw	r3,0(r2)
 20145bc:	e0ffee15 	stw	r3,-72(fp)
 20145c0:	10c00117 	ldw	r3,4(r2)
 20145c4:	e0ffef15 	stw	r3,-68(fp)
 20145c8:	00001e06 	br	2014644 <___vfiprintf_internal_r+0xa00>
 20145cc:	9880040c 	andi	r2,r19,16
 20145d0:	10000726 	beq	r2,zero,20145f0 <___vfiprintf_internal_r+0x9ac>
 20145d4:	e0bfe917 	ldw	r2,-92(fp)
 20145d8:	10c00104 	addi	r3,r2,4
 20145dc:	e0ffe915 	stw	r3,-92(fp)
 20145e0:	10800017 	ldw	r2,0(r2)
 20145e4:	e0bfee15 	stw	r2,-72(fp)
 20145e8:	e03fef15 	stw	zero,-68(fp)
 20145ec:	00001506 	br	2014644 <___vfiprintf_internal_r+0xa00>
 20145f0:	9880100c 	andi	r2,r19,64
 20145f4:	10000d26 	beq	r2,zero,201462c <___vfiprintf_internal_r+0x9e8>
 20145f8:	e0bfe917 	ldw	r2,-92(fp)
 20145fc:	10c00104 	addi	r3,r2,4
 2014600:	e0ffe915 	stw	r3,-92(fp)
 2014604:	10800017 	ldw	r2,0(r2)
 2014608:	e0bff615 	stw	r2,-40(fp)
 201460c:	e03ff715 	stw	zero,-36(fp)
 2014610:	e0bff617 	ldw	r2,-40(fp)
 2014614:	10bfffcc 	andi	r2,r2,65535
 2014618:	e0bfee15 	stw	r2,-72(fp)
 201461c:	e0fff717 	ldw	r3,-36(fp)
 2014620:	1806703a 	and	r3,r3,zero
 2014624:	e0ffef15 	stw	r3,-68(fp)
 2014628:	00000606 	br	2014644 <___vfiprintf_internal_r+0xa00>
 201462c:	e0bfe917 	ldw	r2,-92(fp)
 2014630:	10c00104 	addi	r3,r2,4
 2014634:	e0ffe915 	stw	r3,-92(fp)
 2014638:	10800017 	ldw	r2,0(r2)
 201463c:	e0bfee15 	stw	r2,-72(fp)
 2014640:	e03fef15 	stw	zero,-68(fp)
 2014644:	e0bfee17 	ldw	r2,-72(fp)
 2014648:	e0bfbc15 	stw	r2,-272(fp)
 201464c:	e0ffef17 	ldw	r3,-68(fp)
 2014650:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 2014654:	00800084 	movi	r2,2
 2014658:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 201465c:	9880004c 	andi	r2,r19,1
 2014660:	10000926 	beq	r2,zero,2014688 <___vfiprintf_internal_r+0xa44>
 2014664:	e0bfbc17 	ldw	r2,-272(fp)
 2014668:	e0ffbd17 	ldw	r3,-268(fp)
 201466c:	10c4b03a 	or	r2,r2,r3
 2014670:	10000526 	beq	r2,zero,2014688 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 2014674:	00800c04 	movi	r2,48
 2014678:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 201467c:	8805883a 	mov	r2,r17
 2014680:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 2014684:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 2014688:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 201468c:	e0bfbb17 	ldw	r2,-276(fp)
 2014690:	e0bfbf15 	stw	r2,-260(fp)
 2014694:	e0bfbf17 	ldw	r2,-260(fp)
 2014698:	10000216 	blt	r2,zero,20146a4 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 201469c:	00bfdfc4 	movi	r2,-129
 20146a0:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 20146a4:	e53fdb04 	addi	r20,fp,-148
 20146a8:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 20146ac:	e0bfbc17 	ldw	r2,-272(fp)
 20146b0:	e0ffbd17 	ldw	r3,-268(fp)
 20146b4:	10c4b03a 	or	r2,r2,r3
 20146b8:	1000021e 	bne	r2,zero,20146c4 <___vfiprintf_internal_r+0xa80>
 20146bc:	e0bfbb17 	ldw	r2,-276(fp)
 20146c0:	10006c26 	beq	r2,zero,2014874 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 20146c4:	e0bfbe03 	ldbu	r2,-264(fp)
 20146c8:	10c00060 	cmpeqi	r3,r2,1
 20146cc:	1800211e 	bne	r3,zero,2014754 <___vfiprintf_internal_r+0xb10>
 20146d0:	10c000a0 	cmpeqi	r3,r2,2
 20146d4:	1800491e 	bne	r3,zero,20147fc <___vfiprintf_internal_r+0xbb8>
 20146d8:	10005d1e 	bne	r2,zero,2014850 <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 20146dc:	a53fffc4 	addi	r20,r20,-1
 20146e0:	e0bfbc17 	ldw	r2,-272(fp)
 20146e4:	108001cc 	andi	r2,r2,7
 20146e8:	10800c04 	addi	r2,r2,48
 20146ec:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 20146f0:	e0bfbd17 	ldw	r2,-268(fp)
 20146f4:	1004977a 	slli	r2,r2,29
 20146f8:	e0ffbc17 	ldw	r3,-272(fp)
 20146fc:	1806d0fa 	srli	r3,r3,3
 2014700:	1884b03a 	or	r2,r3,r2
 2014704:	e0bfbc15 	stw	r2,-272(fp)
 2014708:	e0bfbd17 	ldw	r2,-268(fp)
 201470c:	1004d0fa 	srli	r2,r2,3
 2014710:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 2014714:	e0bfbc17 	ldw	r2,-272(fp)
 2014718:	e0ffbd17 	ldw	r3,-268(fp)
 201471c:	10c4b03a 	or	r2,r2,r3
 2014720:	103fee1e 	bne	r2,zero,20146dc <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 2014724:	9880004c 	andi	r2,r19,1
 2014728:	10005026 	beq	r2,zero,201486c <___vfiprintf_internal_r+0xc28>
 201472c:	a0800003 	ldbu	r2,0(r20)
 2014730:	10803fcc 	andi	r2,r2,255
 2014734:	1080201c 	xori	r2,r2,128
 2014738:	10bfe004 	addi	r2,r2,-128
 201473c:	10800c20 	cmpeqi	r2,r2,48
 2014740:	10004a1e 	bne	r2,zero,201486c <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 2014744:	a53fffc4 	addi	r20,r20,-1
 2014748:	00800c04 	movi	r2,48
 201474c:	a0800005 	stb	r2,0(r20)
					break;
 2014750:	00004606 	br	201486c <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 2014754:	e0bfbd17 	ldw	r2,-268(fp)
 2014758:	10000a1e 	bne	r2,zero,2014784 <___vfiprintf_internal_r+0xb40>
 201475c:	e0bfbd17 	ldw	r2,-268(fp)
 2014760:	1000031e 	bne	r2,zero,2014770 <___vfiprintf_internal_r+0xb2c>
 2014764:	e0bfbc17 	ldw	r2,-272(fp)
 2014768:	108002a8 	cmpgeui	r2,r2,10
 201476c:	1000051e 	bne	r2,zero,2014784 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 2014770:	a53fffc4 	addi	r20,r20,-1
 2014774:	e0bfbc17 	ldw	r2,-272(fp)
 2014778:	10800c04 	addi	r2,r2,48
 201477c:	a0800005 	stb	r2,0(r20)
						break;
 2014780:	00003b06 	br	2014870 <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 2014784:	a53fffc4 	addi	r20,r20,-1
 2014788:	e0bfbc17 	ldw	r2,-272(fp)
 201478c:	e0ffbd17 	ldw	r3,-268(fp)
 2014790:	01800284 	movi	r6,10
 2014794:	000f883a 	mov	r7,zero
 2014798:	1009883a 	mov	r4,r2
 201479c:	180b883a 	mov	r5,r3
 20147a0:	20160d40 	call	20160d4 <__umoddi3>
 20147a4:	1009883a 	mov	r4,r2
 20147a8:	180b883a 	mov	r5,r3
 20147ac:	2005883a 	mov	r2,r4
 20147b0:	2807883a 	mov	r3,r5
 20147b4:	10800c04 	addi	r2,r2,48
 20147b8:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 20147bc:	e0bfbc17 	ldw	r2,-272(fp)
 20147c0:	e0ffbd17 	ldw	r3,-268(fp)
 20147c4:	01800284 	movi	r6,10
 20147c8:	000f883a 	mov	r7,zero
 20147cc:	1009883a 	mov	r4,r2
 20147d0:	180b883a 	mov	r5,r3
 20147d4:	2015b5c0 	call	2015b5c <__udivdi3>
 20147d8:	1009883a 	mov	r4,r2
 20147dc:	180b883a 	mov	r5,r3
 20147e0:	e13fbc15 	stw	r4,-272(fp)
 20147e4:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 20147e8:	e0bfbc17 	ldw	r2,-272(fp)
 20147ec:	e0ffbd17 	ldw	r3,-268(fp)
 20147f0:	10c4b03a 	or	r2,r2,r3
 20147f4:	103fe31e 	bne	r2,zero,2014784 <___vfiprintf_internal_r+0xb40>
					break;
 20147f8:	00001d06 	br	2014870 <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 20147fc:	a53fffc4 	addi	r20,r20,-1
 2014800:	e0bfbc17 	ldw	r2,-272(fp)
 2014804:	108003cc 	andi	r2,r2,15
 2014808:	e0ffc217 	ldw	r3,-248(fp)
 201480c:	1885883a 	add	r2,r3,r2
 2014810:	10800003 	ldbu	r2,0(r2)
 2014814:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 2014818:	e0bfbd17 	ldw	r2,-268(fp)
 201481c:	1004973a 	slli	r2,r2,28
 2014820:	e0ffbc17 	ldw	r3,-272(fp)
 2014824:	1806d13a 	srli	r3,r3,4
 2014828:	1884b03a 	or	r2,r3,r2
 201482c:	e0bfbc15 	stw	r2,-272(fp)
 2014830:	e0bfbd17 	ldw	r2,-268(fp)
 2014834:	1004d13a 	srli	r2,r2,4
 2014838:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 201483c:	e0bfbc17 	ldw	r2,-272(fp)
 2014840:	e0ffbd17 	ldw	r3,-268(fp)
 2014844:	10c4b03a 	or	r2,r2,r3
 2014848:	103fec1e 	bne	r2,zero,20147fc <___vfiprintf_internal_r+0xbb8>
					break;
 201484c:	00000806 	br	2014870 <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 2014850:	050080b4 	movhi	r20,514
 2014854:	a50a8304 	addi	r20,r20,10764
					size = strlen (cp);
 2014858:	a009883a 	mov	r4,r20
 201485c:	200990c0 	call	200990c <strlen>
 2014860:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 2014864:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2014868:	00001806 	br	20148cc <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 201486c:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 2014870:	00000706 	br	2014890 <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 2014874:	e0bfbe03 	ldbu	r2,-264(fp)
 2014878:	1000051e 	bne	r2,zero,2014890 <___vfiprintf_internal_r+0xc4c>
 201487c:	9880004c 	andi	r2,r19,1
 2014880:	10000326 	beq	r2,zero,2014890 <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 2014884:	a53fffc4 	addi	r20,r20,-1
 2014888:	00800c04 	movi	r2,48
 201488c:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 2014890:	e0bfdb04 	addi	r2,fp,-148
 2014894:	10800a04 	addi	r2,r2,40
 2014898:	1007883a 	mov	r3,r2
 201489c:	a005883a 	mov	r2,r20
 20148a0:	1885c83a 	sub	r2,r3,r2
 20148a4:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 20148a8:	00000806 	br	20148cc <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 20148ac:	88015426 	beq	r17,zero,2014e00 <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 20148b0:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 20148b4:	8805883a 	mov	r2,r17
 20148b8:	a0800005 	stb	r2,0(r20)
			size = 1;
 20148bc:	00800044 	movi	r2,1
 20148c0:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 20148c4:	e03fc705 	stb	zero,-228(fp)
			break;
 20148c8:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 20148cc:	e0ffbf17 	ldw	r3,-260(fp)
 20148d0:	e0bfc117 	ldw	r2,-252(fp)
 20148d4:	10c0010e 	bge	r2,r3,20148dc <___vfiprintf_internal_r+0xc98>
 20148d8:	1805883a 	mov	r2,r3
 20148dc:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 20148e0:	e0bfc703 	ldbu	r2,-228(fp)
 20148e4:	10803fcc 	andi	r2,r2,255
 20148e8:	1080201c 	xori	r2,r2,128
 20148ec:	10bfe004 	addi	r2,r2,-128
 20148f0:	10000326 	beq	r2,zero,2014900 <___vfiprintf_internal_r+0xcbc>
			realsz++;
 20148f4:	e0bfc017 	ldw	r2,-256(fp)
 20148f8:	10800044 	addi	r2,r2,1
 20148fc:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 2014900:	9880008c 	andi	r2,r19,2
 2014904:	10000326 	beq	r2,zero,2014914 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 2014908:	e0bfc017 	ldw	r2,-256(fp)
 201490c:	10800084 	addi	r2,r2,2
 2014910:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 2014914:	9880210c 	andi	r2,r19,132
 2014918:	1000351e 	bne	r2,zero,20149f0 <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 201491c:	e0ffba17 	ldw	r3,-280(fp)
 2014920:	e0bfc017 	ldw	r2,-256(fp)
 2014924:	18a1c83a 	sub	r16,r3,r2
 2014928:	0400310e 	bge	zero,r16,20149f0 <___vfiprintf_internal_r+0xdac>
 201492c:	00001706 	br	201498c <___vfiprintf_internal_r+0xd48>
 2014930:	008080b4 	movhi	r2,514
 2014934:	108a8984 	addi	r2,r2,10790
 2014938:	90800015 	stw	r2,0(r18)
 201493c:	00800404 	movi	r2,16
 2014940:	90800115 	stw	r2,4(r18)
 2014944:	e0bfca17 	ldw	r2,-216(fp)
 2014948:	10800404 	addi	r2,r2,16
 201494c:	e0bfca15 	stw	r2,-216(fp)
 2014950:	94800204 	addi	r18,r18,8
 2014954:	e0bfc917 	ldw	r2,-220(fp)
 2014958:	10800044 	addi	r2,r2,1
 201495c:	e0bfc915 	stw	r2,-220(fp)
 2014960:	e0bfc917 	ldw	r2,-220(fp)
 2014964:	10800210 	cmplti	r2,r2,8
 2014968:	1000071e 	bne	r2,zero,2014988 <___vfiprintf_internal_r+0xd44>
 201496c:	e0bfc804 	addi	r2,fp,-224
 2014970:	100d883a 	mov	r6,r2
 2014974:	e17fe717 	ldw	r5,-100(fp)
 2014978:	e13fe617 	ldw	r4,-104(fp)
 201497c:	20139c80 	call	20139c8 <__sprint_r>
 2014980:	10012d1e 	bne	r2,zero,2014e38 <___vfiprintf_internal_r+0x11f4>
 2014984:	e4bfcb04 	addi	r18,fp,-212
 2014988:	843ffc04 	addi	r16,r16,-16
 201498c:	80800448 	cmpgei	r2,r16,17
 2014990:	103fe71e 	bne	r2,zero,2014930 <___vfiprintf_internal_r+0xcec>
 2014994:	008080b4 	movhi	r2,514
 2014998:	108a8984 	addi	r2,r2,10790
 201499c:	90800015 	stw	r2,0(r18)
 20149a0:	8005883a 	mov	r2,r16
 20149a4:	90800115 	stw	r2,4(r18)
 20149a8:	e0bfca17 	ldw	r2,-216(fp)
 20149ac:	8007883a 	mov	r3,r16
 20149b0:	10c5883a 	add	r2,r2,r3
 20149b4:	e0bfca15 	stw	r2,-216(fp)
 20149b8:	94800204 	addi	r18,r18,8
 20149bc:	e0bfc917 	ldw	r2,-220(fp)
 20149c0:	10800044 	addi	r2,r2,1
 20149c4:	e0bfc915 	stw	r2,-220(fp)
 20149c8:	e0bfc917 	ldw	r2,-220(fp)
 20149cc:	10800210 	cmplti	r2,r2,8
 20149d0:	1000071e 	bne	r2,zero,20149f0 <___vfiprintf_internal_r+0xdac>
 20149d4:	e0bfc804 	addi	r2,fp,-224
 20149d8:	100d883a 	mov	r6,r2
 20149dc:	e17fe717 	ldw	r5,-100(fp)
 20149e0:	e13fe617 	ldw	r4,-104(fp)
 20149e4:	20139c80 	call	20139c8 <__sprint_r>
 20149e8:	1001151e 	bne	r2,zero,2014e40 <___vfiprintf_internal_r+0x11fc>
 20149ec:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 20149f0:	e0bfc703 	ldbu	r2,-228(fp)
 20149f4:	10803fcc 	andi	r2,r2,255
 20149f8:	1080201c 	xori	r2,r2,128
 20149fc:	10bfe004 	addi	r2,r2,-128
 2014a00:	10001526 	beq	r2,zero,2014a58 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 2014a04:	e0bfc704 	addi	r2,fp,-228
 2014a08:	90800015 	stw	r2,0(r18)
 2014a0c:	00800044 	movi	r2,1
 2014a10:	90800115 	stw	r2,4(r18)
 2014a14:	e0bfca17 	ldw	r2,-216(fp)
 2014a18:	10800044 	addi	r2,r2,1
 2014a1c:	e0bfca15 	stw	r2,-216(fp)
 2014a20:	94800204 	addi	r18,r18,8
 2014a24:	e0bfc917 	ldw	r2,-220(fp)
 2014a28:	10800044 	addi	r2,r2,1
 2014a2c:	e0bfc915 	stw	r2,-220(fp)
 2014a30:	e0bfc917 	ldw	r2,-220(fp)
 2014a34:	10800210 	cmplti	r2,r2,8
 2014a38:	1000071e 	bne	r2,zero,2014a58 <___vfiprintf_internal_r+0xe14>
 2014a3c:	e0bfc804 	addi	r2,fp,-224
 2014a40:	100d883a 	mov	r6,r2
 2014a44:	e17fe717 	ldw	r5,-100(fp)
 2014a48:	e13fe617 	ldw	r4,-104(fp)
 2014a4c:	20139c80 	call	20139c8 <__sprint_r>
 2014a50:	1000fd1e 	bne	r2,zero,2014e48 <___vfiprintf_internal_r+0x1204>
 2014a54:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 2014a58:	9880008c 	andi	r2,r19,2
 2014a5c:	10001526 	beq	r2,zero,2014ab4 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 2014a60:	e0bfe504 	addi	r2,fp,-108
 2014a64:	90800015 	stw	r2,0(r18)
 2014a68:	00800084 	movi	r2,2
 2014a6c:	90800115 	stw	r2,4(r18)
 2014a70:	e0bfca17 	ldw	r2,-216(fp)
 2014a74:	10800084 	addi	r2,r2,2
 2014a78:	e0bfca15 	stw	r2,-216(fp)
 2014a7c:	94800204 	addi	r18,r18,8
 2014a80:	e0bfc917 	ldw	r2,-220(fp)
 2014a84:	10800044 	addi	r2,r2,1
 2014a88:	e0bfc915 	stw	r2,-220(fp)
 2014a8c:	e0bfc917 	ldw	r2,-220(fp)
 2014a90:	10800210 	cmplti	r2,r2,8
 2014a94:	1000071e 	bne	r2,zero,2014ab4 <___vfiprintf_internal_r+0xe70>
 2014a98:	e0bfc804 	addi	r2,fp,-224
 2014a9c:	100d883a 	mov	r6,r2
 2014aa0:	e17fe717 	ldw	r5,-100(fp)
 2014aa4:	e13fe617 	ldw	r4,-104(fp)
 2014aa8:	20139c80 	call	20139c8 <__sprint_r>
 2014aac:	1000e81e 	bne	r2,zero,2014e50 <___vfiprintf_internal_r+0x120c>
 2014ab0:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 2014ab4:	9880210c 	andi	r2,r19,132
 2014ab8:	10802018 	cmpnei	r2,r2,128
 2014abc:	1000351e 	bne	r2,zero,2014b94 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 2014ac0:	e0ffba17 	ldw	r3,-280(fp)
 2014ac4:	e0bfc017 	ldw	r2,-256(fp)
 2014ac8:	18a1c83a 	sub	r16,r3,r2
 2014acc:	0400310e 	bge	zero,r16,2014b94 <___vfiprintf_internal_r+0xf50>
 2014ad0:	00001706 	br	2014b30 <___vfiprintf_internal_r+0xeec>
 2014ad4:	008080b4 	movhi	r2,514
 2014ad8:	108a8d84 	addi	r2,r2,10806
 2014adc:	90800015 	stw	r2,0(r18)
 2014ae0:	00800404 	movi	r2,16
 2014ae4:	90800115 	stw	r2,4(r18)
 2014ae8:	e0bfca17 	ldw	r2,-216(fp)
 2014aec:	10800404 	addi	r2,r2,16
 2014af0:	e0bfca15 	stw	r2,-216(fp)
 2014af4:	94800204 	addi	r18,r18,8
 2014af8:	e0bfc917 	ldw	r2,-220(fp)
 2014afc:	10800044 	addi	r2,r2,1
 2014b00:	e0bfc915 	stw	r2,-220(fp)
 2014b04:	e0bfc917 	ldw	r2,-220(fp)
 2014b08:	10800210 	cmplti	r2,r2,8
 2014b0c:	1000071e 	bne	r2,zero,2014b2c <___vfiprintf_internal_r+0xee8>
 2014b10:	e0bfc804 	addi	r2,fp,-224
 2014b14:	100d883a 	mov	r6,r2
 2014b18:	e17fe717 	ldw	r5,-100(fp)
 2014b1c:	e13fe617 	ldw	r4,-104(fp)
 2014b20:	20139c80 	call	20139c8 <__sprint_r>
 2014b24:	1000cc1e 	bne	r2,zero,2014e58 <___vfiprintf_internal_r+0x1214>
 2014b28:	e4bfcb04 	addi	r18,fp,-212
 2014b2c:	843ffc04 	addi	r16,r16,-16
 2014b30:	80800448 	cmpgei	r2,r16,17
 2014b34:	103fe71e 	bne	r2,zero,2014ad4 <___vfiprintf_internal_r+0xe90>
 2014b38:	008080b4 	movhi	r2,514
 2014b3c:	108a8d84 	addi	r2,r2,10806
 2014b40:	90800015 	stw	r2,0(r18)
 2014b44:	8005883a 	mov	r2,r16
 2014b48:	90800115 	stw	r2,4(r18)
 2014b4c:	e0bfca17 	ldw	r2,-216(fp)
 2014b50:	8007883a 	mov	r3,r16
 2014b54:	10c5883a 	add	r2,r2,r3
 2014b58:	e0bfca15 	stw	r2,-216(fp)
 2014b5c:	94800204 	addi	r18,r18,8
 2014b60:	e0bfc917 	ldw	r2,-220(fp)
 2014b64:	10800044 	addi	r2,r2,1
 2014b68:	e0bfc915 	stw	r2,-220(fp)
 2014b6c:	e0bfc917 	ldw	r2,-220(fp)
 2014b70:	10800210 	cmplti	r2,r2,8
 2014b74:	1000071e 	bne	r2,zero,2014b94 <___vfiprintf_internal_r+0xf50>
 2014b78:	e0bfc804 	addi	r2,fp,-224
 2014b7c:	100d883a 	mov	r6,r2
 2014b80:	e17fe717 	ldw	r5,-100(fp)
 2014b84:	e13fe617 	ldw	r4,-104(fp)
 2014b88:	20139c80 	call	20139c8 <__sprint_r>
 2014b8c:	1000b41e 	bne	r2,zero,2014e60 <___vfiprintf_internal_r+0x121c>
 2014b90:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2014b94:	e0ffbf17 	ldw	r3,-260(fp)
 2014b98:	e0bfc117 	ldw	r2,-252(fp)
 2014b9c:	18a1c83a 	sub	r16,r3,r2
 2014ba0:	0400310e 	bge	zero,r16,2014c68 <___vfiprintf_internal_r+0x1024>
 2014ba4:	00001706 	br	2014c04 <___vfiprintf_internal_r+0xfc0>
 2014ba8:	008080b4 	movhi	r2,514
 2014bac:	108a8d84 	addi	r2,r2,10806
 2014bb0:	90800015 	stw	r2,0(r18)
 2014bb4:	00800404 	movi	r2,16
 2014bb8:	90800115 	stw	r2,4(r18)
 2014bbc:	e0bfca17 	ldw	r2,-216(fp)
 2014bc0:	10800404 	addi	r2,r2,16
 2014bc4:	e0bfca15 	stw	r2,-216(fp)
 2014bc8:	94800204 	addi	r18,r18,8
 2014bcc:	e0bfc917 	ldw	r2,-220(fp)
 2014bd0:	10800044 	addi	r2,r2,1
 2014bd4:	e0bfc915 	stw	r2,-220(fp)
 2014bd8:	e0bfc917 	ldw	r2,-220(fp)
 2014bdc:	10800210 	cmplti	r2,r2,8
 2014be0:	1000071e 	bne	r2,zero,2014c00 <___vfiprintf_internal_r+0xfbc>
 2014be4:	e0bfc804 	addi	r2,fp,-224
 2014be8:	100d883a 	mov	r6,r2
 2014bec:	e17fe717 	ldw	r5,-100(fp)
 2014bf0:	e13fe617 	ldw	r4,-104(fp)
 2014bf4:	20139c80 	call	20139c8 <__sprint_r>
 2014bf8:	10009b1e 	bne	r2,zero,2014e68 <___vfiprintf_internal_r+0x1224>
 2014bfc:	e4bfcb04 	addi	r18,fp,-212
 2014c00:	843ffc04 	addi	r16,r16,-16
 2014c04:	80800448 	cmpgei	r2,r16,17
 2014c08:	103fe71e 	bne	r2,zero,2014ba8 <___vfiprintf_internal_r+0xf64>
 2014c0c:	008080b4 	movhi	r2,514
 2014c10:	108a8d84 	addi	r2,r2,10806
 2014c14:	90800015 	stw	r2,0(r18)
 2014c18:	8005883a 	mov	r2,r16
 2014c1c:	90800115 	stw	r2,4(r18)
 2014c20:	e0bfca17 	ldw	r2,-216(fp)
 2014c24:	8007883a 	mov	r3,r16
 2014c28:	10c5883a 	add	r2,r2,r3
 2014c2c:	e0bfca15 	stw	r2,-216(fp)
 2014c30:	94800204 	addi	r18,r18,8
 2014c34:	e0bfc917 	ldw	r2,-220(fp)
 2014c38:	10800044 	addi	r2,r2,1
 2014c3c:	e0bfc915 	stw	r2,-220(fp)
 2014c40:	e0bfc917 	ldw	r2,-220(fp)
 2014c44:	10800210 	cmplti	r2,r2,8
 2014c48:	1000071e 	bne	r2,zero,2014c68 <___vfiprintf_internal_r+0x1024>
 2014c4c:	e0bfc804 	addi	r2,fp,-224
 2014c50:	100d883a 	mov	r6,r2
 2014c54:	e17fe717 	ldw	r5,-100(fp)
 2014c58:	e13fe617 	ldw	r4,-104(fp)
 2014c5c:	20139c80 	call	20139c8 <__sprint_r>
 2014c60:	1000831e 	bne	r2,zero,2014e70 <___vfiprintf_internal_r+0x122c>
 2014c64:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2014c68:	95000015 	stw	r20,0(r18)
 2014c6c:	e0bfc117 	ldw	r2,-252(fp)
 2014c70:	90800115 	stw	r2,4(r18)
 2014c74:	e0ffca17 	ldw	r3,-216(fp)
 2014c78:	e0bfc117 	ldw	r2,-252(fp)
 2014c7c:	1885883a 	add	r2,r3,r2
 2014c80:	e0bfca15 	stw	r2,-216(fp)
 2014c84:	94800204 	addi	r18,r18,8
 2014c88:	e0bfc917 	ldw	r2,-220(fp)
 2014c8c:	10800044 	addi	r2,r2,1
 2014c90:	e0bfc915 	stw	r2,-220(fp)
 2014c94:	e0bfc917 	ldw	r2,-220(fp)
 2014c98:	10800210 	cmplti	r2,r2,8
 2014c9c:	1000071e 	bne	r2,zero,2014cbc <___vfiprintf_internal_r+0x1078>
 2014ca0:	e0bfc804 	addi	r2,fp,-224
 2014ca4:	100d883a 	mov	r6,r2
 2014ca8:	e17fe717 	ldw	r5,-100(fp)
 2014cac:	e13fe617 	ldw	r4,-104(fp)
 2014cb0:	20139c80 	call	20139c8 <__sprint_r>
 2014cb4:	1000701e 	bne	r2,zero,2014e78 <___vfiprintf_internal_r+0x1234>
 2014cb8:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2014cbc:	9880010c 	andi	r2,r19,4
 2014cc0:	10003526 	beq	r2,zero,2014d98 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 2014cc4:	e0ffba17 	ldw	r3,-280(fp)
 2014cc8:	e0bfc017 	ldw	r2,-256(fp)
 2014ccc:	18a1c83a 	sub	r16,r3,r2
 2014cd0:	0400310e 	bge	zero,r16,2014d98 <___vfiprintf_internal_r+0x1154>
 2014cd4:	00001706 	br	2014d34 <___vfiprintf_internal_r+0x10f0>
 2014cd8:	008080b4 	movhi	r2,514
 2014cdc:	108a8984 	addi	r2,r2,10790
 2014ce0:	90800015 	stw	r2,0(r18)
 2014ce4:	00800404 	movi	r2,16
 2014ce8:	90800115 	stw	r2,4(r18)
 2014cec:	e0bfca17 	ldw	r2,-216(fp)
 2014cf0:	10800404 	addi	r2,r2,16
 2014cf4:	e0bfca15 	stw	r2,-216(fp)
 2014cf8:	94800204 	addi	r18,r18,8
 2014cfc:	e0bfc917 	ldw	r2,-220(fp)
 2014d00:	10800044 	addi	r2,r2,1
 2014d04:	e0bfc915 	stw	r2,-220(fp)
 2014d08:	e0bfc917 	ldw	r2,-220(fp)
 2014d0c:	10800210 	cmplti	r2,r2,8
 2014d10:	1000071e 	bne	r2,zero,2014d30 <___vfiprintf_internal_r+0x10ec>
 2014d14:	e0bfc804 	addi	r2,fp,-224
 2014d18:	100d883a 	mov	r6,r2
 2014d1c:	e17fe717 	ldw	r5,-100(fp)
 2014d20:	e13fe617 	ldw	r4,-104(fp)
 2014d24:	20139c80 	call	20139c8 <__sprint_r>
 2014d28:	1000551e 	bne	r2,zero,2014e80 <___vfiprintf_internal_r+0x123c>
 2014d2c:	e4bfcb04 	addi	r18,fp,-212
 2014d30:	843ffc04 	addi	r16,r16,-16
 2014d34:	80800448 	cmpgei	r2,r16,17
 2014d38:	103fe71e 	bne	r2,zero,2014cd8 <___vfiprintf_internal_r+0x1094>
 2014d3c:	008080b4 	movhi	r2,514
 2014d40:	108a8984 	addi	r2,r2,10790
 2014d44:	90800015 	stw	r2,0(r18)
 2014d48:	8005883a 	mov	r2,r16
 2014d4c:	90800115 	stw	r2,4(r18)
 2014d50:	e0bfca17 	ldw	r2,-216(fp)
 2014d54:	8007883a 	mov	r3,r16
 2014d58:	10c5883a 	add	r2,r2,r3
 2014d5c:	e0bfca15 	stw	r2,-216(fp)
 2014d60:	94800204 	addi	r18,r18,8
 2014d64:	e0bfc917 	ldw	r2,-220(fp)
 2014d68:	10800044 	addi	r2,r2,1
 2014d6c:	e0bfc915 	stw	r2,-220(fp)
 2014d70:	e0bfc917 	ldw	r2,-220(fp)
 2014d74:	10800210 	cmplti	r2,r2,8
 2014d78:	1000071e 	bne	r2,zero,2014d98 <___vfiprintf_internal_r+0x1154>
 2014d7c:	e0bfc804 	addi	r2,fp,-224
 2014d80:	100d883a 	mov	r6,r2
 2014d84:	e17fe717 	ldw	r5,-100(fp)
 2014d88:	e13fe617 	ldw	r4,-104(fp)
 2014d8c:	20139c80 	call	20139c8 <__sprint_r>
 2014d90:	10003d1e 	bne	r2,zero,2014e88 <___vfiprintf_internal_r+0x1244>
 2014d94:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2014d98:	e0ffba17 	ldw	r3,-280(fp)
 2014d9c:	e0bfc017 	ldw	r2,-256(fp)
 2014da0:	10c0010e 	bge	r2,r3,2014da8 <___vfiprintf_internal_r+0x1164>
 2014da4:	1805883a 	mov	r2,r3
 2014da8:	e0ffb917 	ldw	r3,-284(fp)
 2014dac:	1885883a 	add	r2,r3,r2
 2014db0:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 2014db4:	e0bfca17 	ldw	r2,-216(fp)
 2014db8:	10000626 	beq	r2,zero,2014dd4 <___vfiprintf_internal_r+0x1190>
 2014dbc:	e0bfc804 	addi	r2,fp,-224
 2014dc0:	100d883a 	mov	r6,r2
 2014dc4:	e17fe717 	ldw	r5,-100(fp)
 2014dc8:	e13fe617 	ldw	r4,-104(fp)
 2014dcc:	20139c80 	call	20139c8 <__sprint_r>
 2014dd0:	10002f1e 	bne	r2,zero,2014e90 <___vfiprintf_internal_r+0x124c>
 2014dd4:	e03fc915 	stw	zero,-220(fp)
 2014dd8:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 2014ddc:	e0bfc317 	ldw	r2,-244(fp)
 2014de0:	103bea26 	beq	r2,zero,2013d8c <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 2014de4:	e17fc317 	ldw	r5,-244(fp)
 2014de8:	e13fe617 	ldw	r4,-104(fp)
 2014dec:	200e9cc0 	call	200e9cc <_free_r>
			malloc_buf = NULL;
 2014df0:	e03fc315 	stw	zero,-244(fp)
		}
	}
 2014df4:	003be506 	br	2013d8c <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 2014df8:	0001883a 	nop
 2014dfc:	00000106 	br	2014e04 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2014e00:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2014e04:	e0bfca17 	ldw	r2,-216(fp)
 2014e08:	10000626 	beq	r2,zero,2014e24 <___vfiprintf_internal_r+0x11e0>
 2014e0c:	e0bfc804 	addi	r2,fp,-224
 2014e10:	100d883a 	mov	r6,r2
 2014e14:	e17fe717 	ldw	r5,-100(fp)
 2014e18:	e13fe617 	ldw	r4,-104(fp)
 2014e1c:	20139c80 	call	20139c8 <__sprint_r>
 2014e20:	10001d1e 	bne	r2,zero,2014e98 <___vfiprintf_internal_r+0x1254>
 2014e24:	e03fc915 	stw	zero,-220(fp)
 2014e28:	e4bfcb04 	addi	r18,fp,-212
 2014e2c:	00001b06 	br	2014e9c <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 2014e30:	0001883a 	nop
 2014e34:	00001906 	br	2014e9c <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 2014e38:	0001883a 	nop
 2014e3c:	00001706 	br	2014e9c <___vfiprintf_internal_r+0x1258>
 2014e40:	0001883a 	nop
 2014e44:	00001506 	br	2014e9c <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2014e48:	0001883a 	nop
 2014e4c:	00001306 	br	2014e9c <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2014e50:	0001883a 	nop
 2014e54:	00001106 	br	2014e9c <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2014e58:	0001883a 	nop
 2014e5c:	00000f06 	br	2014e9c <___vfiprintf_internal_r+0x1258>
 2014e60:	0001883a 	nop
 2014e64:	00000d06 	br	2014e9c <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2014e68:	0001883a 	nop
 2014e6c:	00000b06 	br	2014e9c <___vfiprintf_internal_r+0x1258>
 2014e70:	0001883a 	nop
 2014e74:	00000906 	br	2014e9c <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2014e78:	0001883a 	nop
 2014e7c:	00000706 	br	2014e9c <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 2014e80:	0001883a 	nop
 2014e84:	00000506 	br	2014e9c <___vfiprintf_internal_r+0x1258>
 2014e88:	0001883a 	nop
 2014e8c:	00000306 	br	2014e9c <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 2014e90:	0001883a 	nop
 2014e94:	00000106 	br	2014e9c <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2014e98:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 2014e9c:	e0bfc317 	ldw	r2,-244(fp)
 2014ea0:	10000326 	beq	r2,zero,2014eb0 <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 2014ea4:	e17fc317 	ldw	r5,-244(fp)
 2014ea8:	e13fe617 	ldw	r4,-104(fp)
 2014eac:	200e9cc0 	call	200e9cc <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 2014eb0:	e0bfe717 	ldw	r2,-100(fp)
 2014eb4:	1080030b 	ldhu	r2,12(r2)
 2014eb8:	10bfffcc 	andi	r2,r2,65535
 2014ebc:	1080100c 	andi	r2,r2,64
 2014ec0:	1000021e 	bne	r2,zero,2014ecc <___vfiprintf_internal_r+0x1288>
 2014ec4:	e0bfb917 	ldw	r2,-284(fp)
 2014ec8:	00000206 	br	2014ed4 <___vfiprintf_internal_r+0x1290>
 2014ecc:	00bfffc4 	movi	r2,-1
 2014ed0:	0001883a 	nop
	/* NOTREACHED */
}
 2014ed4:	e6fff804 	addi	sp,fp,-32
 2014ed8:	dfc00917 	ldw	ra,36(sp)
 2014edc:	df000817 	ldw	fp,32(sp)
 2014ee0:	ddc00717 	ldw	r23,28(sp)
 2014ee4:	dd800617 	ldw	r22,24(sp)
 2014ee8:	dd400517 	ldw	r21,20(sp)
 2014eec:	dd000417 	ldw	r20,16(sp)
 2014ef0:	dcc00317 	ldw	r19,12(sp)
 2014ef4:	dc800217 	ldw	r18,8(sp)
 2014ef8:	dc400117 	ldw	r17,4(sp)
 2014efc:	dc000017 	ldw	r16,0(sp)
 2014f00:	dec00a04 	addi	sp,sp,40
 2014f04:	f800283a 	ret

02014f08 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 2014f08:	defff904 	addi	sp,sp,-28
 2014f0c:	dfc00615 	stw	ra,24(sp)
 2014f10:	df000515 	stw	fp,20(sp)
 2014f14:	df000504 	addi	fp,sp,20
 2014f18:	e13ffc15 	stw	r4,-16(fp)
 2014f1c:	e17ffd15 	stw	r5,-12(fp)
 2014f20:	e1bffe15 	stw	r6,-8(fp)
 2014f24:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2014f28:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 2014f2c:	e1bfff17 	ldw	r6,-4(fp)
 2014f30:	e17ffe17 	ldw	r5,-8(fp)
 2014f34:	e13ffd17 	ldw	r4,-12(fp)
 2014f38:	20170540 	call	2017054 <write>
 2014f3c:	e0bffb15 	stw	r2,-20(fp)
 2014f40:	e0bffb17 	ldw	r2,-20(fp)
 2014f44:	10bfffd8 	cmpnei	r2,r2,-1
 2014f48:	1000051e 	bne	r2,zero,2014f60 <_write_r+0x58>
 2014f4c:	d0a79e17 	ldw	r2,-24968(gp)
 2014f50:	10000326 	beq	r2,zero,2014f60 <_write_r+0x58>
    ptr->_errno = errno;
 2014f54:	d0e79e17 	ldw	r3,-24968(gp)
 2014f58:	e0bffc17 	ldw	r2,-16(fp)
 2014f5c:	10c00015 	stw	r3,0(r2)
  return ret;
 2014f60:	e0bffb17 	ldw	r2,-20(fp)
}
 2014f64:	e037883a 	mov	sp,fp
 2014f68:	dfc00117 	ldw	ra,4(sp)
 2014f6c:	df000017 	ldw	fp,0(sp)
 2014f70:	dec00204 	addi	sp,sp,8
 2014f74:	f800283a 	ret

02014f78 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2014f78:	defffb04 	addi	sp,sp,-20
 2014f7c:	dfc00415 	stw	ra,16(sp)
 2014f80:	df000315 	stw	fp,12(sp)
 2014f84:	df000304 	addi	fp,sp,12
 2014f88:	e13ffe15 	stw	r4,-8(fp)
 2014f8c:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2014f90:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 2014f94:	e13fff17 	ldw	r4,-4(fp)
 2014f98:	201684c0 	call	201684c <close>
 2014f9c:	e0bffd15 	stw	r2,-12(fp)
 2014fa0:	e0bffd17 	ldw	r2,-12(fp)
 2014fa4:	10bfffd8 	cmpnei	r2,r2,-1
 2014fa8:	1000051e 	bne	r2,zero,2014fc0 <_close_r+0x48>
 2014fac:	d0a79e17 	ldw	r2,-24968(gp)
 2014fb0:	10000326 	beq	r2,zero,2014fc0 <_close_r+0x48>
    ptr->_errno = errno;
 2014fb4:	d0e79e17 	ldw	r3,-24968(gp)
 2014fb8:	e0bffe17 	ldw	r2,-8(fp)
 2014fbc:	10c00015 	stw	r3,0(r2)
  return ret;
 2014fc0:	e0bffd17 	ldw	r2,-12(fp)
}
 2014fc4:	e037883a 	mov	sp,fp
 2014fc8:	dfc00117 	ldw	ra,4(sp)
 2014fcc:	df000017 	ldw	fp,0(sp)
 2014fd0:	dec00204 	addi	sp,sp,8
 2014fd4:	f800283a 	ret

02014fd8 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 2014fd8:	defff504 	addi	sp,sp,-44
 2014fdc:	dfc00a15 	stw	ra,40(sp)
 2014fe0:	df000915 	stw	fp,36(sp)
 2014fe4:	df000904 	addi	fp,sp,36
 2014fe8:	e13ffd15 	stw	r4,-12(fp)
 2014fec:	e17ffe15 	stw	r5,-8(fp)
 2014ff0:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 2014ff4:	e0fffe17 	ldw	r3,-8(fp)
 2014ff8:	e0bfff17 	ldw	r2,-4(fp)
 2014ffc:	1885383a 	mul	r2,r3,r2
 2015000:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 2015004:	e17ff817 	ldw	r5,-32(fp)
 2015008:	e13ffd17 	ldw	r4,-12(fp)
 201500c:	201000c0 	call	201000c <_malloc_r>
 2015010:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 2015014:	e0bff917 	ldw	r2,-28(fp)
 2015018:	1000021e 	bne	r2,zero,2015024 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 201501c:	0005883a 	mov	r2,zero
 2015020:	00004106 	br	2015128 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 2015024:	e0bff917 	ldw	r2,-28(fp)
 2015028:	10bffe04 	addi	r2,r2,-8
 201502c:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 2015030:	e0bffa17 	ldw	r2,-24(fp)
 2015034:	10c00117 	ldw	r3,4(r2)
 2015038:	00bfff04 	movi	r2,-4
 201503c:	1884703a 	and	r2,r3,r2
 2015040:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 2015044:	e0bffb17 	ldw	r2,-20(fp)
 2015048:	10bfff04 	addi	r2,r2,-4
 201504c:	e0bffc15 	stw	r2,-16(fp)
 2015050:	e0bffc17 	ldw	r2,-16(fp)
 2015054:	10800968 	cmpgeui	r2,r2,37
 2015058:	10002e1e 	bne	r2,zero,2015114 <_calloc_r+0x13c>
 201505c:	e0bff917 	ldw	r2,-28(fp)
 2015060:	e0bff715 	stw	r2,-36(fp)
 2015064:	e0bffc17 	ldw	r2,-16(fp)
 2015068:	10800530 	cmpltui	r2,r2,20
 201506c:	10001e1e 	bne	r2,zero,20150e8 <_calloc_r+0x110>
 2015070:	e0bff717 	ldw	r2,-36(fp)
 2015074:	10c00104 	addi	r3,r2,4
 2015078:	e0fff715 	stw	r3,-36(fp)
 201507c:	10000015 	stw	zero,0(r2)
 2015080:	e0bff717 	ldw	r2,-36(fp)
 2015084:	10c00104 	addi	r3,r2,4
 2015088:	e0fff715 	stw	r3,-36(fp)
 201508c:	10000015 	stw	zero,0(r2)
 2015090:	e0bffc17 	ldw	r2,-16(fp)
 2015094:	10800730 	cmpltui	r2,r2,28
 2015098:	1000131e 	bne	r2,zero,20150e8 <_calloc_r+0x110>
 201509c:	e0bff717 	ldw	r2,-36(fp)
 20150a0:	10c00104 	addi	r3,r2,4
 20150a4:	e0fff715 	stw	r3,-36(fp)
 20150a8:	10000015 	stw	zero,0(r2)
 20150ac:	e0bff717 	ldw	r2,-36(fp)
 20150b0:	10c00104 	addi	r3,r2,4
 20150b4:	e0fff715 	stw	r3,-36(fp)
 20150b8:	10000015 	stw	zero,0(r2)
 20150bc:	e0bffc17 	ldw	r2,-16(fp)
 20150c0:	10800930 	cmpltui	r2,r2,36
 20150c4:	1000081e 	bne	r2,zero,20150e8 <_calloc_r+0x110>
 20150c8:	e0bff717 	ldw	r2,-36(fp)
 20150cc:	10c00104 	addi	r3,r2,4
 20150d0:	e0fff715 	stw	r3,-36(fp)
 20150d4:	10000015 	stw	zero,0(r2)
 20150d8:	e0bff717 	ldw	r2,-36(fp)
 20150dc:	10c00104 	addi	r3,r2,4
 20150e0:	e0fff715 	stw	r3,-36(fp)
 20150e4:	10000015 	stw	zero,0(r2)
 20150e8:	e0bff717 	ldw	r2,-36(fp)
 20150ec:	10c00104 	addi	r3,r2,4
 20150f0:	e0fff715 	stw	r3,-36(fp)
 20150f4:	10000015 	stw	zero,0(r2)
 20150f8:	e0bff717 	ldw	r2,-36(fp)
 20150fc:	10c00104 	addi	r3,r2,4
 2015100:	e0fff715 	stw	r3,-36(fp)
 2015104:	10000015 	stw	zero,0(r2)
 2015108:	e0bff717 	ldw	r2,-36(fp)
 201510c:	10000015 	stw	zero,0(r2)
 2015110:	00000406 	br	2015124 <_calloc_r+0x14c>
 2015114:	e1bffc17 	ldw	r6,-16(fp)
 2015118:	000b883a 	mov	r5,zero
 201511c:	e13ff917 	ldw	r4,-28(fp)
 2015120:	200952c0 	call	200952c <memset>
    return mem;
 2015124:	e0bff917 	ldw	r2,-28(fp)
  }
}
 2015128:	e037883a 	mov	sp,fp
 201512c:	dfc00117 	ldw	ra,4(sp)
 2015130:	df000017 	ldw	fp,0(sp)
 2015134:	dec00204 	addi	sp,sp,8
 2015138:	f800283a 	ret

0201513c <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 201513c:	defffa04 	addi	sp,sp,-24
 2015140:	dfc00515 	stw	ra,20(sp)
 2015144:	df000415 	stw	fp,16(sp)
 2015148:	dc000315 	stw	r16,12(sp)
 201514c:	df000404 	addi	fp,sp,16
 2015150:	e13ffe15 	stw	r4,-8(fp)
 2015154:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 2015158:	8000021e 	bne	r16,zero,2015164 <_fclose_r+0x28>
    return (0);			/* on NULL */
 201515c:	0005883a 	mov	r2,zero
 2015160:	00003b06 	br	2015250 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 2015164:	e0bffe17 	ldw	r2,-8(fp)
 2015168:	e0bffd15 	stw	r2,-12(fp)
 201516c:	e0bffd17 	ldw	r2,-12(fp)
 2015170:	10000526 	beq	r2,zero,2015188 <_fclose_r+0x4c>
 2015174:	e0bffd17 	ldw	r2,-12(fp)
 2015178:	10800e17 	ldw	r2,56(r2)
 201517c:	1000021e 	bne	r2,zero,2015188 <_fclose_r+0x4c>
 2015180:	e13ffd17 	ldw	r4,-12(fp)
 2015184:	200e7ac0 	call	200e7ac <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 2015188:	8080030b 	ldhu	r2,12(r16)
 201518c:	10bfffcc 	andi	r2,r2,65535
 2015190:	10a0001c 	xori	r2,r2,32768
 2015194:	10a00004 	addi	r2,r2,-32768
 2015198:	1000021e 	bne	r2,zero,20151a4 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 201519c:	0005883a 	mov	r2,zero
 20151a0:	00002b06 	br	2015250 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 20151a4:	800b883a 	mov	r5,r16
 20151a8:	e13ffe17 	ldw	r4,-8(fp)
 20151ac:	200e0280 	call	200e028 <__sflush_r>
 20151b0:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 20151b4:	80800b17 	ldw	r2,44(r16)
 20151b8:	10000826 	beq	r2,zero,20151dc <_fclose_r+0xa0>
 20151bc:	80800b17 	ldw	r2,44(r16)
 20151c0:	80c00717 	ldw	r3,28(r16)
 20151c4:	180b883a 	mov	r5,r3
 20151c8:	e13ffe17 	ldw	r4,-8(fp)
 20151cc:	103ee83a 	callr	r2
 20151d0:	1000020e 	bge	r2,zero,20151dc <_fclose_r+0xa0>
    r = EOF;
 20151d4:	00bfffc4 	movi	r2,-1
 20151d8:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 20151dc:	8080030b 	ldhu	r2,12(r16)
 20151e0:	10bfffcc 	andi	r2,r2,65535
 20151e4:	1080200c 	andi	r2,r2,128
 20151e8:	10000426 	beq	r2,zero,20151fc <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 20151ec:	80800417 	ldw	r2,16(r16)
 20151f0:	100b883a 	mov	r5,r2
 20151f4:	e13ffe17 	ldw	r4,-8(fp)
 20151f8:	200e9cc0 	call	200e9cc <_free_r>
  if (HASUB (fp))
 20151fc:	80800c17 	ldw	r2,48(r16)
 2015200:	10000826 	beq	r2,zero,2015224 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 2015204:	80c00c17 	ldw	r3,48(r16)
 2015208:	80801004 	addi	r2,r16,64
 201520c:	18800426 	beq	r3,r2,2015220 <_fclose_r+0xe4>
 2015210:	80800c17 	ldw	r2,48(r16)
 2015214:	100b883a 	mov	r5,r2
 2015218:	e13ffe17 	ldw	r4,-8(fp)
 201521c:	200e9cc0 	call	200e9cc <_free_r>
 2015220:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 2015224:	80801117 	ldw	r2,68(r16)
 2015228:	10000526 	beq	r2,zero,2015240 <_fclose_r+0x104>
    FREELB (rptr, fp);
 201522c:	80801117 	ldw	r2,68(r16)
 2015230:	100b883a 	mov	r5,r2
 2015234:	e13ffe17 	ldw	r4,-8(fp)
 2015238:	200e9cc0 	call	200e9cc <_free_r>
 201523c:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 2015240:	200e8840 	call	200e884 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 2015244:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 2015248:	200e8a40 	call	200e8a4 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 201524c:	e0bffc17 	ldw	r2,-16(fp)
}
 2015250:	e6ffff04 	addi	sp,fp,-4
 2015254:	dfc00217 	ldw	ra,8(sp)
 2015258:	df000117 	ldw	fp,4(sp)
 201525c:	dc000017 	ldw	r16,0(sp)
 2015260:	dec00304 	addi	sp,sp,12
 2015264:	f800283a 	ret

02015268 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 2015268:	defffe04 	addi	sp,sp,-8
 201526c:	dfc00115 	stw	ra,4(sp)
 2015270:	df000015 	stw	fp,0(sp)
 2015274:	d839883a 	mov	fp,sp
 2015278:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 201527c:	d0a03017 	ldw	r2,-32576(gp)
 2015280:	180b883a 	mov	r5,r3
 2015284:	1009883a 	mov	r4,r2
 2015288:	201513c0 	call	201513c <_fclose_r>
}
 201528c:	e037883a 	mov	sp,fp
 2015290:	dfc00117 	ldw	ra,4(sp)
 2015294:	df000017 	ldw	fp,0(sp)
 2015298:	dec00204 	addi	sp,sp,8
 201529c:	f800283a 	ret

020152a0 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 20152a0:	defff804 	addi	sp,sp,-32
 20152a4:	dfc00715 	stw	ra,28(sp)
 20152a8:	df000615 	stw	fp,24(sp)
 20152ac:	df000604 	addi	fp,sp,24
 20152b0:	e13ffd15 	stw	r4,-12(fp)
 20152b4:	e17ffe15 	stw	r5,-8(fp)
 20152b8:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 20152bc:	200f9300 	call	200f930 <__locale_mb_cur_max>
 20152c0:	10800058 	cmpnei	r2,r2,1
 20152c4:	10000a1e 	bne	r2,zero,20152f0 <__fputwc+0x50>
 20152c8:	e0bffe17 	ldw	r2,-8(fp)
 20152cc:	0080080e 	bge	zero,r2,20152f0 <__fputwc+0x50>
 20152d0:	e0bffe17 	ldw	r2,-8(fp)
 20152d4:	10804008 	cmpgei	r2,r2,256
 20152d8:	1000051e 	bne	r2,zero,20152f0 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 20152dc:	e0bffe17 	ldw	r2,-8(fp)
 20152e0:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 20152e4:	00800044 	movi	r2,1
 20152e8:	e0bffb15 	stw	r2,-20(fp)
 20152ec:	00001406 	br	2015340 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 20152f0:	e0bfff17 	ldw	r2,-4(fp)
 20152f4:	10c01704 	addi	r3,r2,92
 20152f8:	e0bffc04 	addi	r2,fp,-16
 20152fc:	180f883a 	mov	r7,r3
 2015300:	e1bffe17 	ldw	r6,-8(fp)
 2015304:	100b883a 	mov	r5,r2
 2015308:	e13ffd17 	ldw	r4,-12(fp)
 201530c:	20158d40 	call	20158d4 <_wcrtomb_r>
 2015310:	e0bffb15 	stw	r2,-20(fp)
 2015314:	e0bffb17 	ldw	r2,-20(fp)
 2015318:	10bfffd8 	cmpnei	r2,r2,-1
 201531c:	1000081e 	bne	r2,zero,2015340 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 2015320:	e0bfff17 	ldw	r2,-4(fp)
 2015324:	1080030b 	ldhu	r2,12(r2)
 2015328:	10801014 	ori	r2,r2,64
 201532c:	1007883a 	mov	r3,r2
 2015330:	e0bfff17 	ldw	r2,-4(fp)
 2015334:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 2015338:	00bfffc4 	movi	r2,-1
 201533c:	00005006 	br	2015480 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 2015340:	e03ffa15 	stw	zero,-24(fp)
 2015344:	00004a06 	br	2015470 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 2015348:	e0bfff17 	ldw	r2,-4(fp)
 201534c:	10800217 	ldw	r2,8(r2)
 2015350:	10ffffc4 	addi	r3,r2,-1
 2015354:	e0bfff17 	ldw	r2,-4(fp)
 2015358:	10c00215 	stw	r3,8(r2)
 201535c:	e0bfff17 	ldw	r2,-4(fp)
 2015360:	10800217 	ldw	r2,8(r2)
 2015364:	10002c0e 	bge	r2,zero,2015418 <__fputwc+0x178>
 2015368:	e0bfff17 	ldw	r2,-4(fp)
 201536c:	10c00217 	ldw	r3,8(r2)
 2015370:	e0bfff17 	ldw	r2,-4(fp)
 2015374:	10800617 	ldw	r2,24(r2)
 2015378:	18801c16 	blt	r3,r2,20153ec <__fputwc+0x14c>
 201537c:	e0bfff17 	ldw	r2,-4(fp)
 2015380:	10800017 	ldw	r2,0(r2)
 2015384:	e13ffc04 	addi	r4,fp,-16
 2015388:	e0fffa17 	ldw	r3,-24(fp)
 201538c:	20c7883a 	add	r3,r4,r3
 2015390:	18c00003 	ldbu	r3,0(r3)
 2015394:	10c00005 	stb	r3,0(r2)
 2015398:	e0bfff17 	ldw	r2,-4(fp)
 201539c:	10800017 	ldw	r2,0(r2)
 20153a0:	10800003 	ldbu	r2,0(r2)
 20153a4:	10803fcc 	andi	r2,r2,255
 20153a8:	108002a0 	cmpeqi	r2,r2,10
 20153ac:	1000091e 	bne	r2,zero,20153d4 <__fputwc+0x134>
 20153b0:	e0bfff17 	ldw	r2,-4(fp)
 20153b4:	10800017 	ldw	r2,0(r2)
 20153b8:	11000044 	addi	r4,r2,1
 20153bc:	e0ffff17 	ldw	r3,-4(fp)
 20153c0:	19000015 	stw	r4,0(r3)
 20153c4:	10800003 	ldbu	r2,0(r2)
 20153c8:	10803fcc 	andi	r2,r2,255
 20153cc:	10bfffe0 	cmpeqi	r2,r2,-1
 20153d0:	00002006 	br	2015454 <__fputwc+0x1b4>
 20153d4:	e1bfff17 	ldw	r6,-4(fp)
 20153d8:	01400284 	movi	r5,10
 20153dc:	e13ffd17 	ldw	r4,-12(fp)
 20153e0:	201572c0 	call	201572c <__swbuf_r>
 20153e4:	10bfffe0 	cmpeqi	r2,r2,-1
 20153e8:	00001a06 	br	2015454 <__fputwc+0x1b4>
 20153ec:	e0fffc04 	addi	r3,fp,-16
 20153f0:	e0bffa17 	ldw	r2,-24(fp)
 20153f4:	1885883a 	add	r2,r3,r2
 20153f8:	10800003 	ldbu	r2,0(r2)
 20153fc:	10803fcc 	andi	r2,r2,255
 2015400:	e1bfff17 	ldw	r6,-4(fp)
 2015404:	100b883a 	mov	r5,r2
 2015408:	e13ffd17 	ldw	r4,-12(fp)
 201540c:	201572c0 	call	201572c <__swbuf_r>
 2015410:	10bfffe0 	cmpeqi	r2,r2,-1
 2015414:	00000f06 	br	2015454 <__fputwc+0x1b4>
 2015418:	e0bfff17 	ldw	r2,-4(fp)
 201541c:	10800017 	ldw	r2,0(r2)
 2015420:	e13ffc04 	addi	r4,fp,-16
 2015424:	e0fffa17 	ldw	r3,-24(fp)
 2015428:	20c7883a 	add	r3,r4,r3
 201542c:	18c00003 	ldbu	r3,0(r3)
 2015430:	10c00005 	stb	r3,0(r2)
 2015434:	e0bfff17 	ldw	r2,-4(fp)
 2015438:	10800017 	ldw	r2,0(r2)
 201543c:	11000044 	addi	r4,r2,1
 2015440:	e0ffff17 	ldw	r3,-4(fp)
 2015444:	19000015 	stw	r4,0(r3)
 2015448:	10800003 	ldbu	r2,0(r2)
 201544c:	10803fcc 	andi	r2,r2,255
 2015450:	10bfffe0 	cmpeqi	r2,r2,-1
 2015454:	10803fcc 	andi	r2,r2,255
 2015458:	10000226 	beq	r2,zero,2015464 <__fputwc+0x1c4>
      return WEOF;
 201545c:	00bfffc4 	movi	r2,-1
 2015460:	00000706 	br	2015480 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 2015464:	e0bffa17 	ldw	r2,-24(fp)
 2015468:	10800044 	addi	r2,r2,1
 201546c:	e0bffa15 	stw	r2,-24(fp)
 2015470:	e0fffa17 	ldw	r3,-24(fp)
 2015474:	e0bffb17 	ldw	r2,-20(fp)
 2015478:	18bfb336 	bltu	r3,r2,2015348 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 201547c:	e0bffe17 	ldw	r2,-8(fp)
}
 2015480:	e037883a 	mov	sp,fp
 2015484:	dfc00117 	ldw	ra,4(sp)
 2015488:	df000017 	ldw	fp,0(sp)
 201548c:	dec00204 	addi	sp,sp,8
 2015490:	f800283a 	ret

02015494 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2015494:	defffa04 	addi	sp,sp,-24
 2015498:	dfc00515 	stw	ra,20(sp)
 201549c:	df000415 	stw	fp,16(sp)
 20154a0:	df000404 	addi	fp,sp,16
 20154a4:	e13ffd15 	stw	r4,-12(fp)
 20154a8:	e17ffe15 	stw	r5,-8(fp)
 20154ac:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 20154b0:	e0bfff17 	ldw	r2,-4(fp)
 20154b4:	1080030b 	ldhu	r2,12(r2)
 20154b8:	10bfffcc 	andi	r2,r2,65535
 20154bc:	1088000c 	andi	r2,r2,8192
 20154c0:	10000b1e 	bne	r2,zero,20154f0 <_fputwc_r+0x5c>
 20154c4:	e0bfff17 	ldw	r2,-4(fp)
 20154c8:	1080030b 	ldhu	r2,12(r2)
 20154cc:	10880014 	ori	r2,r2,8192
 20154d0:	1007883a 	mov	r3,r2
 20154d4:	e0bfff17 	ldw	r2,-4(fp)
 20154d8:	10c0030d 	sth	r3,12(r2)
 20154dc:	e0bfff17 	ldw	r2,-4(fp)
 20154e0:	10801917 	ldw	r2,100(r2)
 20154e4:	10c80014 	ori	r3,r2,8192
 20154e8:	e0bfff17 	ldw	r2,-4(fp)
 20154ec:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 20154f0:	e1bfff17 	ldw	r6,-4(fp)
 20154f4:	e17ffe17 	ldw	r5,-8(fp)
 20154f8:	e13ffd17 	ldw	r4,-12(fp)
 20154fc:	20152a00 	call	20152a0 <__fputwc>
 2015500:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 2015504:	e0bffc17 	ldw	r2,-16(fp)
}
 2015508:	e037883a 	mov	sp,fp
 201550c:	dfc00117 	ldw	ra,4(sp)
 2015510:	df000017 	ldw	fp,0(sp)
 2015514:	dec00204 	addi	sp,sp,8
 2015518:	f800283a 	ret

0201551c <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 201551c:	defffa04 	addi	sp,sp,-24
 2015520:	dfc00515 	stw	ra,20(sp)
 2015524:	df000415 	stw	fp,16(sp)
 2015528:	df000404 	addi	fp,sp,16
 201552c:	e13ffe15 	stw	r4,-8(fp)
 2015530:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 2015534:	d0a03017 	ldw	r2,-32576(gp)
 2015538:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 201553c:	e0bffc17 	ldw	r2,-16(fp)
 2015540:	e0bffd15 	stw	r2,-12(fp)
 2015544:	e0bffd17 	ldw	r2,-12(fp)
 2015548:	10000526 	beq	r2,zero,2015560 <fputwc+0x44>
 201554c:	e0bffd17 	ldw	r2,-12(fp)
 2015550:	10800e17 	ldw	r2,56(r2)
 2015554:	1000021e 	bne	r2,zero,2015560 <fputwc+0x44>
 2015558:	e13ffd17 	ldw	r4,-12(fp)
 201555c:	200e7ac0 	call	200e7ac <__sinit>
  return _fputwc_r (reent, wc, fp);
 2015560:	e1bfff17 	ldw	r6,-4(fp)
 2015564:	e17ffe17 	ldw	r5,-8(fp)
 2015568:	e13ffc17 	ldw	r4,-16(fp)
 201556c:	20154940 	call	2015494 <_fputwc_r>
}
 2015570:	e037883a 	mov	sp,fp
 2015574:	dfc00117 	ldw	ra,4(sp)
 2015578:	df000017 	ldw	fp,0(sp)
 201557c:	dec00204 	addi	sp,sp,8
 2015580:	f800283a 	ret

02015584 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 2015584:	defffa04 	addi	sp,sp,-24
 2015588:	dfc00515 	stw	ra,20(sp)
 201558c:	df000415 	stw	fp,16(sp)
 2015590:	df000404 	addi	fp,sp,16
 2015594:	e13ffd15 	stw	r4,-12(fp)
 2015598:	e17ffe15 	stw	r5,-8(fp)
 201559c:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 20155a0:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 20155a4:	e17fff17 	ldw	r5,-4(fp)
 20155a8:	e13ffe17 	ldw	r4,-8(fp)
 20155ac:	20169840 	call	2016984 <fstat>
 20155b0:	e0bffc15 	stw	r2,-16(fp)
 20155b4:	e0bffc17 	ldw	r2,-16(fp)
 20155b8:	10bfffd8 	cmpnei	r2,r2,-1
 20155bc:	1000051e 	bne	r2,zero,20155d4 <_fstat_r+0x50>
 20155c0:	d0a79e17 	ldw	r2,-24968(gp)
 20155c4:	10000326 	beq	r2,zero,20155d4 <_fstat_r+0x50>
    ptr->_errno = errno;
 20155c8:	d0e79e17 	ldw	r3,-24968(gp)
 20155cc:	e0bffd17 	ldw	r2,-12(fp)
 20155d0:	10c00015 	stw	r3,0(r2)
  return ret;
 20155d4:	e0bffc17 	ldw	r2,-16(fp)
}
 20155d8:	e037883a 	mov	sp,fp
 20155dc:	dfc00117 	ldw	ra,4(sp)
 20155e0:	df000017 	ldw	fp,0(sp)
 20155e4:	dec00204 	addi	sp,sp,8
 20155e8:	f800283a 	ret

020155ec <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 20155ec:	defffb04 	addi	sp,sp,-20
 20155f0:	dfc00415 	stw	ra,16(sp)
 20155f4:	df000315 	stw	fp,12(sp)
 20155f8:	df000304 	addi	fp,sp,12
 20155fc:	e13ffe15 	stw	r4,-8(fp)
 2015600:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2015604:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 2015608:	e13fff17 	ldw	r4,-4(fp)
 201560c:	2016a700 	call	2016a70 <isatty>
 2015610:	e0bffd15 	stw	r2,-12(fp)
 2015614:	e0bffd17 	ldw	r2,-12(fp)
 2015618:	10bfffd8 	cmpnei	r2,r2,-1
 201561c:	1000051e 	bne	r2,zero,2015634 <_isatty_r+0x48>
 2015620:	d0a79e17 	ldw	r2,-24968(gp)
 2015624:	10000326 	beq	r2,zero,2015634 <_isatty_r+0x48>
    ptr->_errno = errno;
 2015628:	d0e79e17 	ldw	r3,-24968(gp)
 201562c:	e0bffe17 	ldw	r2,-8(fp)
 2015630:	10c00015 	stw	r3,0(r2)
  return ret;
 2015634:	e0bffd17 	ldw	r2,-12(fp)
}
 2015638:	e037883a 	mov	sp,fp
 201563c:	dfc00117 	ldw	ra,4(sp)
 2015640:	df000017 	ldw	fp,0(sp)
 2015644:	dec00204 	addi	sp,sp,8
 2015648:	f800283a 	ret

0201564c <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 201564c:	defff904 	addi	sp,sp,-28
 2015650:	dfc00615 	stw	ra,24(sp)
 2015654:	df000515 	stw	fp,20(sp)
 2015658:	df000504 	addi	fp,sp,20
 201565c:	e13ffc15 	stw	r4,-16(fp)
 2015660:	e17ffd15 	stw	r5,-12(fp)
 2015664:	e1bffe15 	stw	r6,-8(fp)
 2015668:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 201566c:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 2015670:	e1bfff17 	ldw	r6,-4(fp)
 2015674:	e17ffe17 	ldw	r5,-8(fp)
 2015678:	e13ffd17 	ldw	r4,-12(fp)
 201567c:	2016c3c0 	call	2016c3c <lseek>
 2015680:	e0bffb15 	stw	r2,-20(fp)
 2015684:	e0bffb17 	ldw	r2,-20(fp)
 2015688:	10bfffd8 	cmpnei	r2,r2,-1
 201568c:	1000051e 	bne	r2,zero,20156a4 <_lseek_r+0x58>
 2015690:	d0a79e17 	ldw	r2,-24968(gp)
 2015694:	10000326 	beq	r2,zero,20156a4 <_lseek_r+0x58>
    ptr->_errno = errno;
 2015698:	d0e79e17 	ldw	r3,-24968(gp)
 201569c:	e0bffc17 	ldw	r2,-16(fp)
 20156a0:	10c00015 	stw	r3,0(r2)
  return ret;
 20156a4:	e0bffb17 	ldw	r2,-20(fp)
}
 20156a8:	e037883a 	mov	sp,fp
 20156ac:	dfc00117 	ldw	ra,4(sp)
 20156b0:	df000017 	ldw	fp,0(sp)
 20156b4:	dec00204 	addi	sp,sp,8
 20156b8:	f800283a 	ret

020156bc <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 20156bc:	defff904 	addi	sp,sp,-28
 20156c0:	dfc00615 	stw	ra,24(sp)
 20156c4:	df000515 	stw	fp,20(sp)
 20156c8:	df000504 	addi	fp,sp,20
 20156cc:	e13ffc15 	stw	r4,-16(fp)
 20156d0:	e17ffd15 	stw	r5,-12(fp)
 20156d4:	e1bffe15 	stw	r6,-8(fp)
 20156d8:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 20156dc:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 20156e0:	e1bfff17 	ldw	r6,-4(fp)
 20156e4:	e17ffe17 	ldw	r5,-8(fp)
 20156e8:	e13ffd17 	ldw	r4,-12(fp)
 20156ec:	2016e080 	call	2016e08 <read>
 20156f0:	e0bffb15 	stw	r2,-20(fp)
 20156f4:	e0bffb17 	ldw	r2,-20(fp)
 20156f8:	10bfffd8 	cmpnei	r2,r2,-1
 20156fc:	1000051e 	bne	r2,zero,2015714 <_read_r+0x58>
 2015700:	d0a79e17 	ldw	r2,-24968(gp)
 2015704:	10000326 	beq	r2,zero,2015714 <_read_r+0x58>
    ptr->_errno = errno;
 2015708:	d0e79e17 	ldw	r3,-24968(gp)
 201570c:	e0bffc17 	ldw	r2,-16(fp)
 2015710:	10c00015 	stw	r3,0(r2)
  return ret;
 2015714:	e0bffb17 	ldw	r2,-20(fp)
}
 2015718:	e037883a 	mov	sp,fp
 201571c:	dfc00117 	ldw	ra,4(sp)
 2015720:	df000017 	ldw	fp,0(sp)
 2015724:	dec00204 	addi	sp,sp,8
 2015728:	f800283a 	ret

0201572c <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 201572c:	defff904 	addi	sp,sp,-28
 2015730:	dfc00615 	stw	ra,24(sp)
 2015734:	df000515 	stw	fp,20(sp)
 2015738:	dc800415 	stw	r18,16(sp)
 201573c:	dc400315 	stw	r17,12(sp)
 2015740:	dc000215 	stw	r16,8(sp)
 2015744:	df000504 	addi	fp,sp,20
 2015748:	e13ffc15 	stw	r4,-16(fp)
 201574c:	2825883a 	mov	r18,r5
 2015750:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 2015754:	e0bffc17 	ldw	r2,-16(fp)
 2015758:	e0bffb15 	stw	r2,-20(fp)
 201575c:	e0bffb17 	ldw	r2,-20(fp)
 2015760:	10000526 	beq	r2,zero,2015778 <__swbuf_r+0x4c>
 2015764:	e0bffb17 	ldw	r2,-20(fp)
 2015768:	10800e17 	ldw	r2,56(r2)
 201576c:	1000021e 	bne	r2,zero,2015778 <__swbuf_r+0x4c>
 2015770:	e13ffb17 	ldw	r4,-20(fp)
 2015774:	200e7ac0 	call	200e7ac <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 2015778:	80800617 	ldw	r2,24(r16)
 201577c:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 2015780:	8080030b 	ldhu	r2,12(r16)
 2015784:	10bfffcc 	andi	r2,r2,65535
 2015788:	1080020c 	andi	r2,r2,8
 201578c:	10000226 	beq	r2,zero,2015798 <__swbuf_r+0x6c>
 2015790:	80800417 	ldw	r2,16(r16)
 2015794:	1000061e 	bne	r2,zero,20157b0 <__swbuf_r+0x84>
 2015798:	800b883a 	mov	r5,r16
 201579c:	e13ffc17 	ldw	r4,-16(fp)
 20157a0:	200bf5c0 	call	200bf5c <__swsetup_r>
 20157a4:	10000226 	beq	r2,zero,20157b0 <__swbuf_r+0x84>
    return EOF;
 20157a8:	00bfffc4 	movi	r2,-1
 20157ac:	00003106 	br	2015874 <__swbuf_r+0x148>
  c = (unsigned char) c;
 20157b0:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 20157b4:	8080030b 	ldhu	r2,12(r16)
 20157b8:	10bfffcc 	andi	r2,r2,65535
 20157bc:	1088000c 	andi	r2,r2,8192
 20157c0:	1000071e 	bne	r2,zero,20157e0 <__swbuf_r+0xb4>
 20157c4:	8080030b 	ldhu	r2,12(r16)
 20157c8:	10880014 	ori	r2,r2,8192
 20157cc:	8080030d 	sth	r2,12(r16)
 20157d0:	80c01917 	ldw	r3,100(r16)
 20157d4:	00b7ffc4 	movi	r2,-8193
 20157d8:	1884703a 	and	r2,r3,r2
 20157dc:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 20157e0:	80800017 	ldw	r2,0(r16)
 20157e4:	1007883a 	mov	r3,r2
 20157e8:	80800417 	ldw	r2,16(r16)
 20157ec:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 20157f0:	80800517 	ldw	r2,20(r16)
 20157f4:	88800716 	blt	r17,r2,2015814 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 20157f8:	800b883a 	mov	r5,r16
 20157fc:	e13ffc17 	ldw	r4,-16(fp)
 2015800:	200e32c0 	call	200e32c <_fflush_r>
 2015804:	10000226 	beq	r2,zero,2015810 <__swbuf_r+0xe4>
	return EOF;
 2015808:	00bfffc4 	movi	r2,-1
 201580c:	00001906 	br	2015874 <__swbuf_r+0x148>
      n = 0;
 2015810:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 2015814:	80800217 	ldw	r2,8(r16)
 2015818:	10bfffc4 	addi	r2,r2,-1
 201581c:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 2015820:	80800017 	ldw	r2,0(r16)
 2015824:	10c00044 	addi	r3,r2,1
 2015828:	80c00015 	stw	r3,0(r16)
 201582c:	9007883a 	mov	r3,r18
 2015830:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 2015834:	8c400044 	addi	r17,r17,1
 2015838:	80800517 	ldw	r2,20(r16)
 201583c:	88800626 	beq	r17,r2,2015858 <__swbuf_r+0x12c>
 2015840:	8080030b 	ldhu	r2,12(r16)
 2015844:	10bfffcc 	andi	r2,r2,65535
 2015848:	1080004c 	andi	r2,r2,1
 201584c:	10000826 	beq	r2,zero,2015870 <__swbuf_r+0x144>
 2015850:	90800298 	cmpnei	r2,r18,10
 2015854:	1000061e 	bne	r2,zero,2015870 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 2015858:	800b883a 	mov	r5,r16
 201585c:	e13ffc17 	ldw	r4,-16(fp)
 2015860:	200e32c0 	call	200e32c <_fflush_r>
 2015864:	10000226 	beq	r2,zero,2015870 <__swbuf_r+0x144>
      return EOF;
 2015868:	00bfffc4 	movi	r2,-1
 201586c:	00000106 	br	2015874 <__swbuf_r+0x148>
  return c;
 2015870:	9005883a 	mov	r2,r18
}
 2015874:	e6fffd04 	addi	sp,fp,-12
 2015878:	dfc00417 	ldw	ra,16(sp)
 201587c:	df000317 	ldw	fp,12(sp)
 2015880:	dc800217 	ldw	r18,8(sp)
 2015884:	dc400117 	ldw	r17,4(sp)
 2015888:	dc000017 	ldw	r16,0(sp)
 201588c:	dec00504 	addi	sp,sp,20
 2015890:	f800283a 	ret

02015894 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 2015894:	defffe04 	addi	sp,sp,-8
 2015898:	dfc00115 	stw	ra,4(sp)
 201589c:	df000015 	stw	fp,0(sp)
 20158a0:	d839883a 	mov	fp,sp
 20158a4:	2007883a 	mov	r3,r4
 20158a8:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 20158ac:	d0a03017 	ldw	r2,-32576(gp)
 20158b0:	200d883a 	mov	r6,r4
 20158b4:	180b883a 	mov	r5,r3
 20158b8:	1009883a 	mov	r4,r2
 20158bc:	201572c0 	call	201572c <__swbuf_r>
}
 20158c0:	e037883a 	mov	sp,fp
 20158c4:	dfc00117 	ldw	ra,4(sp)
 20158c8:	df000017 	ldw	fp,0(sp)
 20158cc:	dec00204 	addi	sp,sp,8
 20158d0:	f800283a 	ret

020158d4 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 20158d4:	defff404 	addi	sp,sp,-48
 20158d8:	dfc00b15 	stw	ra,44(sp)
 20158dc:	df000a15 	stw	fp,40(sp)
 20158e0:	dc000915 	stw	r16,36(sp)
 20158e4:	df000a04 	addi	fp,sp,40
 20158e8:	e13ffb15 	stw	r4,-20(fp)
 20158ec:	e17ffc15 	stw	r5,-16(fp)
 20158f0:	e1bffd15 	stw	r6,-12(fp)
 20158f4:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 20158f8:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 20158fc:	e0bffc17 	ldw	r2,-16(fp)
 2015900:	10000d1e 	bne	r2,zero,2015938 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 2015904:	d4203517 	ldw	r16,-32556(gp)
 2015908:	200f90c0 	call	200f90c <__locale_charset>
 201590c:	1009883a 	mov	r4,r2
 2015910:	e0fff804 	addi	r3,fp,-32
 2015914:	e0bffe17 	ldw	r2,-8(fp)
 2015918:	d8800015 	stw	r2,0(sp)
 201591c:	200f883a 	mov	r7,r4
 2015920:	000d883a 	mov	r6,zero
 2015924:	180b883a 	mov	r5,r3
 2015928:	e13ffb17 	ldw	r4,-20(fp)
 201592c:	803ee83a 	callr	r16
 2015930:	e0bff715 	stw	r2,-36(fp)
 2015934:	00000b06 	br	2015964 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 2015938:	d4203517 	ldw	r16,-32556(gp)
 201593c:	200f90c0 	call	200f90c <__locale_charset>
 2015940:	1007883a 	mov	r3,r2
 2015944:	e0bffe17 	ldw	r2,-8(fp)
 2015948:	d8800015 	stw	r2,0(sp)
 201594c:	180f883a 	mov	r7,r3
 2015950:	e1bffd17 	ldw	r6,-12(fp)
 2015954:	e17ffc17 	ldw	r5,-16(fp)
 2015958:	e13ffb17 	ldw	r4,-20(fp)
 201595c:	803ee83a 	callr	r16
 2015960:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2015964:	e0bff717 	ldw	r2,-36(fp)
 2015968:	10bfffd8 	cmpnei	r2,r2,-1
 201596c:	1000071e 	bne	r2,zero,201598c <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 2015970:	e0bffe17 	ldw	r2,-8(fp)
 2015974:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 2015978:	e0bffb17 	ldw	r2,-20(fp)
 201597c:	00c02284 	movi	r3,138
 2015980:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2015984:	00bfffc4 	movi	r2,-1
 2015988:	00000106 	br	2015990 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 201598c:	e0bff717 	ldw	r2,-36(fp)
}
 2015990:	e6ffff04 	addi	sp,fp,-4
 2015994:	dfc00217 	ldw	ra,8(sp)
 2015998:	df000117 	ldw	fp,4(sp)
 201599c:	dc000017 	ldw	r16,0(sp)
 20159a0:	dec00304 	addi	sp,sp,12
 20159a4:	f800283a 	ret

020159a8 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 20159a8:	defff404 	addi	sp,sp,-48
 20159ac:	dfc00b15 	stw	ra,44(sp)
 20159b0:	df000a15 	stw	fp,40(sp)
 20159b4:	dc000915 	stw	r16,36(sp)
 20159b8:	df000a04 	addi	fp,sp,40
 20159bc:	e13ffc15 	stw	r4,-16(fp)
 20159c0:	e17ffd15 	stw	r5,-12(fp)
 20159c4:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 20159c8:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 20159cc:	d0a03017 	ldw	r2,-32576(gp)
 20159d0:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 20159d4:	e0bffc17 	ldw	r2,-16(fp)
 20159d8:	10000d1e 	bne	r2,zero,2015a10 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 20159dc:	d4203517 	ldw	r16,-32556(gp)
 20159e0:	200f90c0 	call	200f90c <__locale_charset>
 20159e4:	1009883a 	mov	r4,r2
 20159e8:	e0fff904 	addi	r3,fp,-28
 20159ec:	e0bffe17 	ldw	r2,-8(fp)
 20159f0:	d8800015 	stw	r2,0(sp)
 20159f4:	200f883a 	mov	r7,r4
 20159f8:	000d883a 	mov	r6,zero
 20159fc:	180b883a 	mov	r5,r3
 2015a00:	e13ff817 	ldw	r4,-32(fp)
 2015a04:	803ee83a 	callr	r16
 2015a08:	e0bff715 	stw	r2,-36(fp)
 2015a0c:	00000b06 	br	2015a3c <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 2015a10:	d4203517 	ldw	r16,-32556(gp)
 2015a14:	200f90c0 	call	200f90c <__locale_charset>
 2015a18:	1007883a 	mov	r3,r2
 2015a1c:	e0bffe17 	ldw	r2,-8(fp)
 2015a20:	d8800015 	stw	r2,0(sp)
 2015a24:	180f883a 	mov	r7,r3
 2015a28:	e1bffd17 	ldw	r6,-12(fp)
 2015a2c:	e17ffc17 	ldw	r5,-16(fp)
 2015a30:	e13ff817 	ldw	r4,-32(fp)
 2015a34:	803ee83a 	callr	r16
 2015a38:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2015a3c:	e0bff717 	ldw	r2,-36(fp)
 2015a40:	10bfffd8 	cmpnei	r2,r2,-1
 2015a44:	1000071e 	bne	r2,zero,2015a64 <wcrtomb+0xbc>
    {
      ps->__count = 0;
 2015a48:	e0bffe17 	ldw	r2,-8(fp)
 2015a4c:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 2015a50:	e0bff817 	ldw	r2,-32(fp)
 2015a54:	00c02284 	movi	r3,138
 2015a58:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2015a5c:	00bfffc4 	movi	r2,-1
 2015a60:	00000106 	br	2015a68 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 2015a64:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2015a68:	e6ffff04 	addi	sp,fp,-4
 2015a6c:	dfc00217 	ldw	ra,8(sp)
 2015a70:	df000117 	ldw	fp,4(sp)
 2015a74:	dc000017 	ldw	r16,0(sp)
 2015a78:	dec00304 	addi	sp,sp,12
 2015a7c:	f800283a 	ret

02015a80 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 2015a80:	defff804 	addi	sp,sp,-32
 2015a84:	dfc00715 	stw	ra,28(sp)
 2015a88:	df000615 	stw	fp,24(sp)
 2015a8c:	dc000515 	stw	r16,20(sp)
 2015a90:	df000604 	addi	fp,sp,24
 2015a94:	e13ffb15 	stw	r4,-20(fp)
 2015a98:	e17ffc15 	stw	r5,-16(fp)
 2015a9c:	e1bffd15 	stw	r6,-12(fp)
 2015aa0:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 2015aa4:	d4203517 	ldw	r16,-32556(gp)
 2015aa8:	200f90c0 	call	200f90c <__locale_charset>
 2015aac:	1007883a 	mov	r3,r2
 2015ab0:	e0bffe17 	ldw	r2,-8(fp)
 2015ab4:	d8800015 	stw	r2,0(sp)
 2015ab8:	180f883a 	mov	r7,r3
 2015abc:	e1bffd17 	ldw	r6,-12(fp)
 2015ac0:	e17ffc17 	ldw	r5,-16(fp)
 2015ac4:	e13ffb17 	ldw	r4,-20(fp)
 2015ac8:	803ee83a 	callr	r16
}
 2015acc:	e6ffff04 	addi	sp,fp,-4
 2015ad0:	dfc00217 	ldw	ra,8(sp)
 2015ad4:	df000117 	ldw	fp,4(sp)
 2015ad8:	dc000017 	ldw	r16,0(sp)
 2015adc:	dec00304 	addi	sp,sp,12
 2015ae0:	f800283a 	ret

02015ae4 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 2015ae4:	defffa04 	addi	sp,sp,-24
 2015ae8:	df000515 	stw	fp,20(sp)
 2015aec:	df000504 	addi	fp,sp,20
 2015af0:	e13ffc15 	stw	r4,-16(fp)
 2015af4:	e17ffd15 	stw	r5,-12(fp)
 2015af8:	e1bffe15 	stw	r6,-8(fp)
 2015afc:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 2015b00:	e0bffe17 	ldw	r2,-8(fp)
 2015b04:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 2015b08:	e0bffd17 	ldw	r2,-12(fp)
 2015b0c:	1000021e 	bne	r2,zero,2015b18 <__ascii_wctomb+0x34>
    return 0;
 2015b10:	0005883a 	mov	r2,zero
 2015b14:	00000d06 	br	2015b4c <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 2015b18:	e0bffb17 	ldw	r2,-20(fp)
 2015b1c:	10804030 	cmpltui	r2,r2,256
 2015b20:	1000051e 	bne	r2,zero,2015b38 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 2015b24:	e0bffc17 	ldw	r2,-16(fp)
 2015b28:	00c02284 	movi	r3,138
 2015b2c:	10c00015 	stw	r3,0(r2)
      return -1;
 2015b30:	00bfffc4 	movi	r2,-1
 2015b34:	00000506 	br	2015b4c <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 2015b38:	e0bffb17 	ldw	r2,-20(fp)
 2015b3c:	1007883a 	mov	r3,r2
 2015b40:	e0bffd17 	ldw	r2,-12(fp)
 2015b44:	10c00005 	stb	r3,0(r2)
  return 1;
 2015b48:	00800044 	movi	r2,1
}
 2015b4c:	e037883a 	mov	sp,fp
 2015b50:	df000017 	ldw	fp,0(sp)
 2015b54:	dec00104 	addi	sp,sp,4
 2015b58:	f800283a 	ret

02015b5c <__udivdi3>:
 2015b5c:	defff504 	addi	sp,sp,-44
 2015b60:	dcc00415 	stw	r19,16(sp)
 2015b64:	dc000115 	stw	r16,4(sp)
 2015b68:	dfc00a15 	stw	ra,40(sp)
 2015b6c:	df000915 	stw	fp,36(sp)
 2015b70:	ddc00815 	stw	r23,32(sp)
 2015b74:	dd800715 	stw	r22,28(sp)
 2015b78:	dd400615 	stw	r21,24(sp)
 2015b7c:	dd000515 	stw	r20,20(sp)
 2015b80:	dc800315 	stw	r18,12(sp)
 2015b84:	dc400215 	stw	r17,8(sp)
 2015b88:	2027883a 	mov	r19,r4
 2015b8c:	2821883a 	mov	r16,r5
 2015b90:	3800411e 	bne	r7,zero,2015c98 <__udivdi3+0x13c>
 2015b94:	3023883a 	mov	r17,r6
 2015b98:	2025883a 	mov	r18,r4
 2015b9c:	2980522e 	bgeu	r5,r6,2015ce8 <__udivdi3+0x18c>
 2015ba0:	00bfffd4 	movui	r2,65535
 2015ba4:	282d883a 	mov	r22,r5
 2015ba8:	1180a836 	bltu	r2,r6,2015e4c <__udivdi3+0x2f0>
 2015bac:	00803fc4 	movi	r2,255
 2015bb0:	1185803a 	cmpltu	r2,r2,r6
 2015bb4:	100490fa 	slli	r2,r2,3
 2015bb8:	3086d83a 	srl	r3,r6,r2
 2015bbc:	010080b4 	movhi	r4,514
 2015bc0:	2109c204 	addi	r4,r4,9992
 2015bc4:	20c7883a 	add	r3,r4,r3
 2015bc8:	18c00003 	ldbu	r3,0(r3)
 2015bcc:	1885883a 	add	r2,r3,r2
 2015bd0:	00c00804 	movi	r3,32
 2015bd4:	1887c83a 	sub	r3,r3,r2
 2015bd8:	18000526 	beq	r3,zero,2015bf0 <__udivdi3+0x94>
 2015bdc:	80e0983a 	sll	r16,r16,r3
 2015be0:	9884d83a 	srl	r2,r19,r2
 2015be4:	30e2983a 	sll	r17,r6,r3
 2015be8:	98e4983a 	sll	r18,r19,r3
 2015bec:	142cb03a 	or	r22,r2,r16
 2015bf0:	882ad43a 	srli	r21,r17,16
 2015bf4:	b009883a 	mov	r4,r22
 2015bf8:	8d3fffcc 	andi	r20,r17,65535
 2015bfc:	a80b883a 	mov	r5,r21
 2015c00:	2006c100 	call	2006c10 <__umodsi3>
 2015c04:	b009883a 	mov	r4,r22
 2015c08:	a80b883a 	mov	r5,r21
 2015c0c:	1027883a 	mov	r19,r2
 2015c10:	2006bac0 	call	2006bac <__udivsi3>
 2015c14:	102d883a 	mov	r22,r2
 2015c18:	9826943a 	slli	r19,r19,16
 2015c1c:	9004d43a 	srli	r2,r18,16
 2015c20:	a5a1383a 	mul	r16,r20,r22
 2015c24:	14c4b03a 	or	r2,r2,r19
 2015c28:	1400052e 	bgeu	r2,r16,2015c40 <__udivdi3+0xe4>
 2015c2c:	1445883a 	add	r2,r2,r17
 2015c30:	b0ffffc4 	addi	r3,r22,-1
 2015c34:	14400136 	bltu	r2,r17,2015c3c <__udivdi3+0xe0>
 2015c38:	14012336 	bltu	r2,r16,20160c8 <__udivdi3+0x56c>
 2015c3c:	182d883a 	mov	r22,r3
 2015c40:	1421c83a 	sub	r16,r2,r16
 2015c44:	a80b883a 	mov	r5,r21
 2015c48:	8009883a 	mov	r4,r16
 2015c4c:	2006c100 	call	2006c10 <__umodsi3>
 2015c50:	1027883a 	mov	r19,r2
 2015c54:	a80b883a 	mov	r5,r21
 2015c58:	8009883a 	mov	r4,r16
 2015c5c:	2006bac0 	call	2006bac <__udivsi3>
 2015c60:	9826943a 	slli	r19,r19,16
 2015c64:	a0a9383a 	mul	r20,r20,r2
 2015c68:	94bfffcc 	andi	r18,r18,65535
 2015c6c:	94e4b03a 	or	r18,r18,r19
 2015c70:	9500052e 	bgeu	r18,r20,2015c88 <__udivdi3+0x12c>
 2015c74:	8ca5883a 	add	r18,r17,r18
 2015c78:	10ffffc4 	addi	r3,r2,-1
 2015c7c:	9440f136 	bltu	r18,r17,2016044 <__udivdi3+0x4e8>
 2015c80:	9500f02e 	bgeu	r18,r20,2016044 <__udivdi3+0x4e8>
 2015c84:	10bfff84 	addi	r2,r2,-2
 2015c88:	b00c943a 	slli	r6,r22,16
 2015c8c:	0007883a 	mov	r3,zero
 2015c90:	3084b03a 	or	r2,r6,r2
 2015c94:	00005906 	br	2015dfc <__udivdi3+0x2a0>
 2015c98:	29c05636 	bltu	r5,r7,2015df4 <__udivdi3+0x298>
 2015c9c:	00bfffd4 	movui	r2,65535
 2015ca0:	11c0622e 	bgeu	r2,r7,2015e2c <__udivdi3+0x2d0>
 2015ca4:	00804034 	movhi	r2,256
 2015ca8:	10bfffc4 	addi	r2,r2,-1
 2015cac:	11c0ee36 	bltu	r2,r7,2016068 <__udivdi3+0x50c>
 2015cb0:	00800404 	movi	r2,16
 2015cb4:	3886d83a 	srl	r3,r7,r2
 2015cb8:	010080b4 	movhi	r4,514
 2015cbc:	2109c204 	addi	r4,r4,9992
 2015cc0:	20c7883a 	add	r3,r4,r3
 2015cc4:	18c00003 	ldbu	r3,0(r3)
 2015cc8:	05400804 	movi	r21,32
 2015ccc:	1885883a 	add	r2,r3,r2
 2015cd0:	a8abc83a 	sub	r21,r21,r2
 2015cd4:	a800621e 	bne	r21,zero,2015e60 <__udivdi3+0x304>
 2015cd8:	3c00e936 	bltu	r7,r16,2016080 <__udivdi3+0x524>
 2015cdc:	9985403a 	cmpgeu	r2,r19,r6
 2015ce0:	0007883a 	mov	r3,zero
 2015ce4:	00004506 	br	2015dfc <__udivdi3+0x2a0>
 2015ce8:	3000041e 	bne	r6,zero,2015cfc <__udivdi3+0x1a0>
 2015cec:	000b883a 	mov	r5,zero
 2015cf0:	01000044 	movi	r4,1
 2015cf4:	2006bac0 	call	2006bac <__udivsi3>
 2015cf8:	1023883a 	mov	r17,r2
 2015cfc:	00bfffd4 	movui	r2,65535
 2015d00:	14404e2e 	bgeu	r2,r17,2015e3c <__udivdi3+0x2e0>
 2015d04:	00804034 	movhi	r2,256
 2015d08:	10bfffc4 	addi	r2,r2,-1
 2015d0c:	1440d836 	bltu	r2,r17,2016070 <__udivdi3+0x514>
 2015d10:	00800404 	movi	r2,16
 2015d14:	8886d83a 	srl	r3,r17,r2
 2015d18:	010080b4 	movhi	r4,514
 2015d1c:	2109c204 	addi	r4,r4,9992
 2015d20:	20c7883a 	add	r3,r4,r3
 2015d24:	18c00003 	ldbu	r3,0(r3)
 2015d28:	1885883a 	add	r2,r3,r2
 2015d2c:	00c00804 	movi	r3,32
 2015d30:	1887c83a 	sub	r3,r3,r2
 2015d34:	18008f1e 	bne	r3,zero,2015f74 <__udivdi3+0x418>
 2015d38:	882ad43a 	srli	r21,r17,16
 2015d3c:	8461c83a 	sub	r16,r16,r17
 2015d40:	8d3fffcc 	andi	r20,r17,65535
 2015d44:	00c00044 	movi	r3,1
 2015d48:	8009883a 	mov	r4,r16
 2015d4c:	a80b883a 	mov	r5,r21
 2015d50:	d8c00015 	stw	r3,0(sp)
 2015d54:	2006c100 	call	2006c10 <__umodsi3>
 2015d58:	8009883a 	mov	r4,r16
 2015d5c:	a80b883a 	mov	r5,r21
 2015d60:	1027883a 	mov	r19,r2
 2015d64:	2006bac0 	call	2006bac <__udivsi3>
 2015d68:	9826943a 	slli	r19,r19,16
 2015d6c:	9008d43a 	srli	r4,r18,16
 2015d70:	1521383a 	mul	r16,r2,r20
 2015d74:	102d883a 	mov	r22,r2
 2015d78:	24c8b03a 	or	r4,r4,r19
 2015d7c:	d8c00017 	ldw	r3,0(sp)
 2015d80:	2400052e 	bgeu	r4,r16,2015d98 <__udivdi3+0x23c>
 2015d84:	2449883a 	add	r4,r4,r17
 2015d88:	b0bfffc4 	addi	r2,r22,-1
 2015d8c:	24400136 	bltu	r4,r17,2015d94 <__udivdi3+0x238>
 2015d90:	2400ca36 	bltu	r4,r16,20160bc <__udivdi3+0x560>
 2015d94:	102d883a 	mov	r22,r2
 2015d98:	2421c83a 	sub	r16,r4,r16
 2015d9c:	a80b883a 	mov	r5,r21
 2015da0:	8009883a 	mov	r4,r16
 2015da4:	d8c00015 	stw	r3,0(sp)
 2015da8:	2006c100 	call	2006c10 <__umodsi3>
 2015dac:	1027883a 	mov	r19,r2
 2015db0:	a80b883a 	mov	r5,r21
 2015db4:	8009883a 	mov	r4,r16
 2015db8:	2006bac0 	call	2006bac <__udivsi3>
 2015dbc:	9826943a 	slli	r19,r19,16
 2015dc0:	1529383a 	mul	r20,r2,r20
 2015dc4:	94bfffcc 	andi	r18,r18,65535
 2015dc8:	94e4b03a 	or	r18,r18,r19
 2015dcc:	d8c00017 	ldw	r3,0(sp)
 2015dd0:	9500052e 	bgeu	r18,r20,2015de8 <__udivdi3+0x28c>
 2015dd4:	8ca5883a 	add	r18,r17,r18
 2015dd8:	113fffc4 	addi	r4,r2,-1
 2015ddc:	94409736 	bltu	r18,r17,201603c <__udivdi3+0x4e0>
 2015de0:	9500962e 	bgeu	r18,r20,201603c <__udivdi3+0x4e0>
 2015de4:	10bfff84 	addi	r2,r2,-2
 2015de8:	b00c943a 	slli	r6,r22,16
 2015dec:	3084b03a 	or	r2,r6,r2
 2015df0:	00000206 	br	2015dfc <__udivdi3+0x2a0>
 2015df4:	0007883a 	mov	r3,zero
 2015df8:	0005883a 	mov	r2,zero
 2015dfc:	dfc00a17 	ldw	ra,40(sp)
 2015e00:	df000917 	ldw	fp,36(sp)
 2015e04:	ddc00817 	ldw	r23,32(sp)
 2015e08:	dd800717 	ldw	r22,28(sp)
 2015e0c:	dd400617 	ldw	r21,24(sp)
 2015e10:	dd000517 	ldw	r20,20(sp)
 2015e14:	dcc00417 	ldw	r19,16(sp)
 2015e18:	dc800317 	ldw	r18,12(sp)
 2015e1c:	dc400217 	ldw	r17,8(sp)
 2015e20:	dc000117 	ldw	r16,4(sp)
 2015e24:	dec00b04 	addi	sp,sp,44
 2015e28:	f800283a 	ret
 2015e2c:	00803fc4 	movi	r2,255
 2015e30:	11c5803a 	cmpltu	r2,r2,r7
 2015e34:	100490fa 	slli	r2,r2,3
 2015e38:	003f9e06 	br	2015cb4 <__udivdi3+0x158>
 2015e3c:	00803fc4 	movi	r2,255
 2015e40:	1445803a 	cmpltu	r2,r2,r17
 2015e44:	100490fa 	slli	r2,r2,3
 2015e48:	003fb206 	br	2015d14 <__udivdi3+0x1b8>
 2015e4c:	00804034 	movhi	r2,256
 2015e50:	10bfffc4 	addi	r2,r2,-1
 2015e54:	11808836 	bltu	r2,r6,2016078 <__udivdi3+0x51c>
 2015e58:	00800404 	movi	r2,16
 2015e5c:	003f5606 	br	2015bb8 <__udivdi3+0x5c>
 2015e60:	30aed83a 	srl	r23,r6,r2
 2015e64:	3d4e983a 	sll	r7,r7,r21
 2015e68:	80acd83a 	srl	r22,r16,r2
 2015e6c:	9884d83a 	srl	r2,r19,r2
 2015e70:	3deeb03a 	or	r23,r7,r23
 2015e74:	b824d43a 	srli	r18,r23,16
 2015e78:	8560983a 	sll	r16,r16,r21
 2015e7c:	b009883a 	mov	r4,r22
 2015e80:	900b883a 	mov	r5,r18
 2015e84:	3568983a 	sll	r20,r6,r21
 2015e88:	1420b03a 	or	r16,r2,r16
 2015e8c:	2006c100 	call	2006c10 <__umodsi3>
 2015e90:	b009883a 	mov	r4,r22
 2015e94:	900b883a 	mov	r5,r18
 2015e98:	1023883a 	mov	r17,r2
 2015e9c:	2006bac0 	call	2006bac <__udivsi3>
 2015ea0:	8808943a 	slli	r4,r17,16
 2015ea4:	bf3fffcc 	andi	fp,r23,65535
 2015ea8:	8006d43a 	srli	r3,r16,16
 2015eac:	e0a3383a 	mul	r17,fp,r2
 2015eb0:	100d883a 	mov	r6,r2
 2015eb4:	1906b03a 	or	r3,r3,r4
 2015eb8:	1c40042e 	bgeu	r3,r17,2015ecc <__udivdi3+0x370>
 2015ebc:	1dc7883a 	add	r3,r3,r23
 2015ec0:	10bfffc4 	addi	r2,r2,-1
 2015ec4:	1dc0752e 	bgeu	r3,r23,201609c <__udivdi3+0x540>
 2015ec8:	100d883a 	mov	r6,r2
 2015ecc:	1c63c83a 	sub	r17,r3,r17
 2015ed0:	900b883a 	mov	r5,r18
 2015ed4:	8809883a 	mov	r4,r17
 2015ed8:	d9800015 	stw	r6,0(sp)
 2015edc:	2006c100 	call	2006c10 <__umodsi3>
 2015ee0:	102d883a 	mov	r22,r2
 2015ee4:	8809883a 	mov	r4,r17
 2015ee8:	900b883a 	mov	r5,r18
 2015eec:	2006bac0 	call	2006bac <__udivsi3>
 2015ef0:	b02c943a 	slli	r22,r22,16
 2015ef4:	e089383a 	mul	r4,fp,r2
 2015ef8:	843fffcc 	andi	r16,r16,65535
 2015efc:	85a0b03a 	or	r16,r16,r22
 2015f00:	d9800017 	ldw	r6,0(sp)
 2015f04:	8100042e 	bgeu	r16,r4,2015f18 <__udivdi3+0x3bc>
 2015f08:	85e1883a 	add	r16,r16,r23
 2015f0c:	10ffffc4 	addi	r3,r2,-1
 2015f10:	85c05e2e 	bgeu	r16,r23,201608c <__udivdi3+0x530>
 2015f14:	1805883a 	mov	r2,r3
 2015f18:	300c943a 	slli	r6,r6,16
 2015f1c:	a17fffcc 	andi	r5,r20,65535
 2015f20:	a028d43a 	srli	r20,r20,16
 2015f24:	3084b03a 	or	r2,r6,r2
 2015f28:	10ffffcc 	andi	r3,r2,65535
 2015f2c:	100cd43a 	srli	r6,r2,16
 2015f30:	194f383a 	mul	r7,r3,r5
 2015f34:	1d07383a 	mul	r3,r3,r20
 2015f38:	314b383a 	mul	r5,r6,r5
 2015f3c:	3810d43a 	srli	r8,r7,16
 2015f40:	8121c83a 	sub	r16,r16,r4
 2015f44:	1947883a 	add	r3,r3,r5
 2015f48:	40c7883a 	add	r3,r8,r3
 2015f4c:	350d383a 	mul	r6,r6,r20
 2015f50:	1940022e 	bgeu	r3,r5,2015f5c <__udivdi3+0x400>
 2015f54:	01000074 	movhi	r4,1
 2015f58:	310d883a 	add	r6,r6,r4
 2015f5c:	1828d43a 	srli	r20,r3,16
 2015f60:	a18d883a 	add	r6,r20,r6
 2015f64:	81803e36 	bltu	r16,r6,2016060 <__udivdi3+0x504>
 2015f68:	81803826 	beq	r16,r6,201604c <__udivdi3+0x4f0>
 2015f6c:	0007883a 	mov	r3,zero
 2015f70:	003fa206 	br	2015dfc <__udivdi3+0x2a0>
 2015f74:	88e2983a 	sll	r17,r17,r3
 2015f78:	80a8d83a 	srl	r20,r16,r2
 2015f7c:	80e0983a 	sll	r16,r16,r3
 2015f80:	882ad43a 	srli	r21,r17,16
 2015f84:	9884d83a 	srl	r2,r19,r2
 2015f88:	a009883a 	mov	r4,r20
 2015f8c:	a80b883a 	mov	r5,r21
 2015f90:	142eb03a 	or	r23,r2,r16
 2015f94:	98e4983a 	sll	r18,r19,r3
 2015f98:	2006c100 	call	2006c10 <__umodsi3>
 2015f9c:	a009883a 	mov	r4,r20
 2015fa0:	a80b883a 	mov	r5,r21
 2015fa4:	1021883a 	mov	r16,r2
 2015fa8:	2006bac0 	call	2006bac <__udivsi3>
 2015fac:	1039883a 	mov	fp,r2
 2015fb0:	8d3fffcc 	andi	r20,r17,65535
 2015fb4:	8020943a 	slli	r16,r16,16
 2015fb8:	b804d43a 	srli	r2,r23,16
 2015fbc:	a72d383a 	mul	r22,r20,fp
 2015fc0:	1404b03a 	or	r2,r2,r16
 2015fc4:	1580062e 	bgeu	r2,r22,2015fe0 <__udivdi3+0x484>
 2015fc8:	1445883a 	add	r2,r2,r17
 2015fcc:	e0ffffc4 	addi	r3,fp,-1
 2015fd0:	14403836 	bltu	r2,r17,20160b4 <__udivdi3+0x558>
 2015fd4:	1580372e 	bgeu	r2,r22,20160b4 <__udivdi3+0x558>
 2015fd8:	e73fff84 	addi	fp,fp,-2
 2015fdc:	1445883a 	add	r2,r2,r17
 2015fe0:	15adc83a 	sub	r22,r2,r22
 2015fe4:	a80b883a 	mov	r5,r21
 2015fe8:	b009883a 	mov	r4,r22
 2015fec:	2006c100 	call	2006c10 <__umodsi3>
 2015ff0:	1027883a 	mov	r19,r2
 2015ff4:	b009883a 	mov	r4,r22
 2015ff8:	a80b883a 	mov	r5,r21
 2015ffc:	2006bac0 	call	2006bac <__udivsi3>
 2016000:	9826943a 	slli	r19,r19,16
 2016004:	a0a1383a 	mul	r16,r20,r2
 2016008:	b93fffcc 	andi	r4,r23,65535
 201600c:	24c8b03a 	or	r4,r4,r19
 2016010:	2400062e 	bgeu	r4,r16,201602c <__udivdi3+0x4d0>
 2016014:	2449883a 	add	r4,r4,r17
 2016018:	10ffffc4 	addi	r3,r2,-1
 201601c:	24402336 	bltu	r4,r17,20160ac <__udivdi3+0x550>
 2016020:	2400222e 	bgeu	r4,r16,20160ac <__udivdi3+0x550>
 2016024:	10bfff84 	addi	r2,r2,-2
 2016028:	2449883a 	add	r4,r4,r17
 201602c:	e038943a 	slli	fp,fp,16
 2016030:	2421c83a 	sub	r16,r4,r16
 2016034:	e086b03a 	or	r3,fp,r2
 2016038:	003f4306 	br	2015d48 <__udivdi3+0x1ec>
 201603c:	2005883a 	mov	r2,r4
 2016040:	003f6906 	br	2015de8 <__udivdi3+0x28c>
 2016044:	1805883a 	mov	r2,r3
 2016048:	003f0f06 	br	2015c88 <__udivdi3+0x12c>
 201604c:	1806943a 	slli	r3,r3,16
 2016050:	9d66983a 	sll	r19,r19,r21
 2016054:	39ffffcc 	andi	r7,r7,65535
 2016058:	19c7883a 	add	r3,r3,r7
 201605c:	98ffc32e 	bgeu	r19,r3,2015f6c <__udivdi3+0x410>
 2016060:	10bfffc4 	addi	r2,r2,-1
 2016064:	003fc106 	br	2015f6c <__udivdi3+0x410>
 2016068:	00800604 	movi	r2,24
 201606c:	003f1106 	br	2015cb4 <__udivdi3+0x158>
 2016070:	00800604 	movi	r2,24
 2016074:	003f2706 	br	2015d14 <__udivdi3+0x1b8>
 2016078:	00800604 	movi	r2,24
 201607c:	003ece06 	br	2015bb8 <__udivdi3+0x5c>
 2016080:	0007883a 	mov	r3,zero
 2016084:	00800044 	movi	r2,1
 2016088:	003f5c06 	br	2015dfc <__udivdi3+0x2a0>
 201608c:	813fa12e 	bgeu	r16,r4,2015f14 <__udivdi3+0x3b8>
 2016090:	10bfff84 	addi	r2,r2,-2
 2016094:	85e1883a 	add	r16,r16,r23
 2016098:	003f9f06 	br	2015f18 <__udivdi3+0x3bc>
 201609c:	1c7f8a2e 	bgeu	r3,r17,2015ec8 <__udivdi3+0x36c>
 20160a0:	31bfff84 	addi	r6,r6,-2
 20160a4:	1dc7883a 	add	r3,r3,r23
 20160a8:	003f8806 	br	2015ecc <__udivdi3+0x370>
 20160ac:	1805883a 	mov	r2,r3
 20160b0:	003fde06 	br	201602c <__udivdi3+0x4d0>
 20160b4:	1839883a 	mov	fp,r3
 20160b8:	003fc906 	br	2015fe0 <__udivdi3+0x484>
 20160bc:	b5bfff84 	addi	r22,r22,-2
 20160c0:	2449883a 	add	r4,r4,r17
 20160c4:	003f3406 	br	2015d98 <__udivdi3+0x23c>
 20160c8:	b5bfff84 	addi	r22,r22,-2
 20160cc:	1445883a 	add	r2,r2,r17
 20160d0:	003edb06 	br	2015c40 <__udivdi3+0xe4>

020160d4 <__umoddi3>:
 20160d4:	defff404 	addi	sp,sp,-48
 20160d8:	df000a15 	stw	fp,40(sp)
 20160dc:	dc400315 	stw	r17,12(sp)
 20160e0:	dc000215 	stw	r16,8(sp)
 20160e4:	dfc00b15 	stw	ra,44(sp)
 20160e8:	ddc00915 	stw	r23,36(sp)
 20160ec:	dd800815 	stw	r22,32(sp)
 20160f0:	dd400715 	stw	r21,28(sp)
 20160f4:	dd000615 	stw	r20,24(sp)
 20160f8:	dcc00515 	stw	r19,20(sp)
 20160fc:	dc800415 	stw	r18,16(sp)
 2016100:	2021883a 	mov	r16,r4
 2016104:	2823883a 	mov	r17,r5
 2016108:	2839883a 	mov	fp,r5
 201610c:	38003c1e 	bne	r7,zero,2016200 <__umoddi3+0x12c>
 2016110:	3027883a 	mov	r19,r6
 2016114:	2029883a 	mov	r20,r4
 2016118:	2980512e 	bgeu	r5,r6,2016260 <__umoddi3+0x18c>
 201611c:	00bfffd4 	movui	r2,65535
 2016120:	11809a36 	bltu	r2,r6,201638c <__umoddi3+0x2b8>
 2016124:	01003fc4 	movi	r4,255
 2016128:	2189803a 	cmpltu	r4,r4,r6
 201612c:	200890fa 	slli	r4,r4,3
 2016130:	3104d83a 	srl	r2,r6,r4
 2016134:	00c080b4 	movhi	r3,514
 2016138:	18c9c204 	addi	r3,r3,9992
 201613c:	1885883a 	add	r2,r3,r2
 2016140:	10c00003 	ldbu	r3,0(r2)
 2016144:	00800804 	movi	r2,32
 2016148:	1909883a 	add	r4,r3,r4
 201614c:	1125c83a 	sub	r18,r2,r4
 2016150:	90000526 	beq	r18,zero,2016168 <__umoddi3+0x94>
 2016154:	8ca2983a 	sll	r17,r17,r18
 2016158:	8108d83a 	srl	r4,r16,r4
 201615c:	34a6983a 	sll	r19,r6,r18
 2016160:	84a8983a 	sll	r20,r16,r18
 2016164:	2478b03a 	or	fp,r4,r17
 2016168:	982ed43a 	srli	r23,r19,16
 201616c:	e009883a 	mov	r4,fp
 2016170:	9dbfffcc 	andi	r22,r19,65535
 2016174:	b80b883a 	mov	r5,r23
 2016178:	2006c100 	call	2006c10 <__umodsi3>
 201617c:	e009883a 	mov	r4,fp
 2016180:	b80b883a 	mov	r5,r23
 2016184:	102b883a 	mov	r21,r2
 2016188:	2006bac0 	call	2006bac <__udivsi3>
 201618c:	a806943a 	slli	r3,r21,16
 2016190:	a008d43a 	srli	r4,r20,16
 2016194:	b085383a 	mul	r2,r22,r2
 2016198:	20c8b03a 	or	r4,r4,r3
 201619c:	2080032e 	bgeu	r4,r2,20161ac <__umoddi3+0xd8>
 20161a0:	24c9883a 	add	r4,r4,r19
 20161a4:	24c00136 	bltu	r4,r19,20161ac <__umoddi3+0xd8>
 20161a8:	20811036 	bltu	r4,r2,20165ec <__umoddi3+0x518>
 20161ac:	20abc83a 	sub	r21,r4,r2
 20161b0:	b80b883a 	mov	r5,r23
 20161b4:	a809883a 	mov	r4,r21
 20161b8:	2006c100 	call	2006c10 <__umodsi3>
 20161bc:	1023883a 	mov	r17,r2
 20161c0:	b80b883a 	mov	r5,r23
 20161c4:	a809883a 	mov	r4,r21
 20161c8:	2006bac0 	call	2006bac <__udivsi3>
 20161cc:	8822943a 	slli	r17,r17,16
 20161d0:	b085383a 	mul	r2,r22,r2
 20161d4:	a0ffffcc 	andi	r3,r20,65535
 20161d8:	1c46b03a 	or	r3,r3,r17
 20161dc:	1880042e 	bgeu	r3,r2,20161f0 <__umoddi3+0x11c>
 20161e0:	1cc7883a 	add	r3,r3,r19
 20161e4:	1cc00236 	bltu	r3,r19,20161f0 <__umoddi3+0x11c>
 20161e8:	1880012e 	bgeu	r3,r2,20161f0 <__umoddi3+0x11c>
 20161ec:	1cc7883a 	add	r3,r3,r19
 20161f0:	1885c83a 	sub	r2,r3,r2
 20161f4:	1484d83a 	srl	r2,r2,r18
 20161f8:	0007883a 	mov	r3,zero
 20161fc:	00004f06 	br	201633c <__umoddi3+0x268>
 2016200:	29c04c36 	bltu	r5,r7,2016334 <__umoddi3+0x260>
 2016204:	00bfffd4 	movui	r2,65535
 2016208:	11c0582e 	bgeu	r2,r7,201636c <__umoddi3+0x298>
 201620c:	00804034 	movhi	r2,256
 2016210:	10bfffc4 	addi	r2,r2,-1
 2016214:	11c0e736 	bltu	r2,r7,20165b4 <__umoddi3+0x4e0>
 2016218:	01000404 	movi	r4,16
 201621c:	3904d83a 	srl	r2,r7,r4
 2016220:	00c080b4 	movhi	r3,514
 2016224:	18c9c204 	addi	r3,r3,9992
 2016228:	1885883a 	add	r2,r3,r2
 201622c:	14c00003 	ldbu	r19,0(r2)
 2016230:	00c00804 	movi	r3,32
 2016234:	9927883a 	add	r19,r19,r4
 2016238:	1ce9c83a 	sub	r20,r3,r19
 201623c:	a000581e 	bne	r20,zero,20163a0 <__umoddi3+0x2cc>
 2016240:	3c400136 	bltu	r7,r17,2016248 <__umoddi3+0x174>
 2016244:	8180eb36 	bltu	r16,r6,20165f4 <__umoddi3+0x520>
 2016248:	8185c83a 	sub	r2,r16,r6
 201624c:	89e3c83a 	sub	r17,r17,r7
 2016250:	8089803a 	cmpltu	r4,r16,r2
 2016254:	8939c83a 	sub	fp,r17,r4
 2016258:	e007883a 	mov	r3,fp
 201625c:	00003706 	br	201633c <__umoddi3+0x268>
 2016260:	3000041e 	bne	r6,zero,2016274 <__umoddi3+0x1a0>
 2016264:	000b883a 	mov	r5,zero
 2016268:	01000044 	movi	r4,1
 201626c:	2006bac0 	call	2006bac <__udivsi3>
 2016270:	1027883a 	mov	r19,r2
 2016274:	00bfffd4 	movui	r2,65535
 2016278:	14c0402e 	bgeu	r2,r19,201637c <__umoddi3+0x2a8>
 201627c:	00804034 	movhi	r2,256
 2016280:	10bfffc4 	addi	r2,r2,-1
 2016284:	14c0cd36 	bltu	r2,r19,20165bc <__umoddi3+0x4e8>
 2016288:	00800404 	movi	r2,16
 201628c:	9886d83a 	srl	r3,r19,r2
 2016290:	010080b4 	movhi	r4,514
 2016294:	2109c204 	addi	r4,r4,9992
 2016298:	20c7883a 	add	r3,r4,r3
 201629c:	18c00003 	ldbu	r3,0(r3)
 20162a0:	1887883a 	add	r3,r3,r2
 20162a4:	00800804 	movi	r2,32
 20162a8:	10e5c83a 	sub	r18,r2,r3
 20162ac:	9000901e 	bne	r18,zero,20164f0 <__umoddi3+0x41c>
 20162b0:	982cd43a 	srli	r22,r19,16
 20162b4:	8ce3c83a 	sub	r17,r17,r19
 20162b8:	9d7fffcc 	andi	r21,r19,65535
 20162bc:	b00b883a 	mov	r5,r22
 20162c0:	8809883a 	mov	r4,r17
 20162c4:	2006c100 	call	2006c10 <__umodsi3>
 20162c8:	8809883a 	mov	r4,r17
 20162cc:	b00b883a 	mov	r5,r22
 20162d0:	1021883a 	mov	r16,r2
 20162d4:	2006bac0 	call	2006bac <__udivsi3>
 20162d8:	8006943a 	slli	r3,r16,16
 20162dc:	a008d43a 	srli	r4,r20,16
 20162e0:	1545383a 	mul	r2,r2,r21
 20162e4:	20c8b03a 	or	r4,r4,r3
 20162e8:	2080042e 	bgeu	r4,r2,20162fc <__umoddi3+0x228>
 20162ec:	24c9883a 	add	r4,r4,r19
 20162f0:	24c00236 	bltu	r4,r19,20162fc <__umoddi3+0x228>
 20162f4:	2080012e 	bgeu	r4,r2,20162fc <__umoddi3+0x228>
 20162f8:	24c9883a 	add	r4,r4,r19
 20162fc:	20a1c83a 	sub	r16,r4,r2
 2016300:	b00b883a 	mov	r5,r22
 2016304:	8009883a 	mov	r4,r16
 2016308:	2006c100 	call	2006c10 <__umodsi3>
 201630c:	1023883a 	mov	r17,r2
 2016310:	b00b883a 	mov	r5,r22
 2016314:	8009883a 	mov	r4,r16
 2016318:	2006bac0 	call	2006bac <__udivsi3>
 201631c:	8822943a 	slli	r17,r17,16
 2016320:	1545383a 	mul	r2,r2,r21
 2016324:	a53fffcc 	andi	r20,r20,65535
 2016328:	a446b03a 	or	r3,r20,r17
 201632c:	18bfb02e 	bgeu	r3,r2,20161f0 <__umoddi3+0x11c>
 2016330:	003fab06 	br	20161e0 <__umoddi3+0x10c>
 2016334:	2005883a 	mov	r2,r4
 2016338:	2807883a 	mov	r3,r5
 201633c:	dfc00b17 	ldw	ra,44(sp)
 2016340:	df000a17 	ldw	fp,40(sp)
 2016344:	ddc00917 	ldw	r23,36(sp)
 2016348:	dd800817 	ldw	r22,32(sp)
 201634c:	dd400717 	ldw	r21,28(sp)
 2016350:	dd000617 	ldw	r20,24(sp)
 2016354:	dcc00517 	ldw	r19,20(sp)
 2016358:	dc800417 	ldw	r18,16(sp)
 201635c:	dc400317 	ldw	r17,12(sp)
 2016360:	dc000217 	ldw	r16,8(sp)
 2016364:	dec00c04 	addi	sp,sp,48
 2016368:	f800283a 	ret
 201636c:	04c03fc4 	movi	r19,255
 2016370:	99c9803a 	cmpltu	r4,r19,r7
 2016374:	200890fa 	slli	r4,r4,3
 2016378:	003fa806 	br	201621c <__umoddi3+0x148>
 201637c:	00803fc4 	movi	r2,255
 2016380:	14c5803a 	cmpltu	r2,r2,r19
 2016384:	100490fa 	slli	r2,r2,3
 2016388:	003fc006 	br	201628c <__umoddi3+0x1b8>
 201638c:	00804034 	movhi	r2,256
 2016390:	10bfffc4 	addi	r2,r2,-1
 2016394:	11808b36 	bltu	r2,r6,20165c4 <__umoddi3+0x4f0>
 2016398:	01000404 	movi	r4,16
 201639c:	003f6406 	br	2016130 <__umoddi3+0x5c>
 20163a0:	34c4d83a 	srl	r2,r6,r19
 20163a4:	3d0e983a 	sll	r7,r7,r20
 20163a8:	8cf8d83a 	srl	fp,r17,r19
 20163ac:	8d10983a 	sll	r8,r17,r20
 20163b0:	38aab03a 	or	r21,r7,r2
 20163b4:	a82cd43a 	srli	r22,r21,16
 20163b8:	84e2d83a 	srl	r17,r16,r19
 20163bc:	e009883a 	mov	r4,fp
 20163c0:	b00b883a 	mov	r5,r22
 20163c4:	8a22b03a 	or	r17,r17,r8
 20163c8:	3524983a 	sll	r18,r6,r20
 20163cc:	2006c100 	call	2006c10 <__umodsi3>
 20163d0:	e009883a 	mov	r4,fp
 20163d4:	b00b883a 	mov	r5,r22
 20163d8:	102f883a 	mov	r23,r2
 20163dc:	2006bac0 	call	2006bac <__udivsi3>
 20163e0:	100d883a 	mov	r6,r2
 20163e4:	b808943a 	slli	r4,r23,16
 20163e8:	aa3fffcc 	andi	r8,r21,65535
 20163ec:	8804d43a 	srli	r2,r17,16
 20163f0:	41af383a 	mul	r23,r8,r6
 20163f4:	8520983a 	sll	r16,r16,r20
 20163f8:	1104b03a 	or	r2,r2,r4
 20163fc:	15c0042e 	bgeu	r2,r23,2016410 <__umoddi3+0x33c>
 2016400:	1545883a 	add	r2,r2,r21
 2016404:	30ffffc4 	addi	r3,r6,-1
 2016408:	1540742e 	bgeu	r2,r21,20165dc <__umoddi3+0x508>
 201640c:	180d883a 	mov	r6,r3
 2016410:	15efc83a 	sub	r23,r2,r23
 2016414:	b00b883a 	mov	r5,r22
 2016418:	b809883a 	mov	r4,r23
 201641c:	d9800115 	stw	r6,4(sp)
 2016420:	da000015 	stw	r8,0(sp)
 2016424:	2006c100 	call	2006c10 <__umodsi3>
 2016428:	b00b883a 	mov	r5,r22
 201642c:	b809883a 	mov	r4,r23
 2016430:	1039883a 	mov	fp,r2
 2016434:	2006bac0 	call	2006bac <__udivsi3>
 2016438:	da000017 	ldw	r8,0(sp)
 201643c:	e038943a 	slli	fp,fp,16
 2016440:	100b883a 	mov	r5,r2
 2016444:	4089383a 	mul	r4,r8,r2
 2016448:	8a3fffcc 	andi	r8,r17,65535
 201644c:	4710b03a 	or	r8,r8,fp
 2016450:	d9800117 	ldw	r6,4(sp)
 2016454:	4100042e 	bgeu	r8,r4,2016468 <__umoddi3+0x394>
 2016458:	4551883a 	add	r8,r8,r21
 201645c:	10bfffc4 	addi	r2,r2,-1
 2016460:	45405a2e 	bgeu	r8,r21,20165cc <__umoddi3+0x4f8>
 2016464:	100b883a 	mov	r5,r2
 2016468:	300c943a 	slli	r6,r6,16
 201646c:	91ffffcc 	andi	r7,r18,65535
 2016470:	9004d43a 	srli	r2,r18,16
 2016474:	314cb03a 	or	r6,r6,r5
 2016478:	317fffcc 	andi	r5,r6,65535
 201647c:	300cd43a 	srli	r6,r6,16
 2016480:	29d3383a 	mul	r9,r5,r7
 2016484:	288b383a 	mul	r5,r5,r2
 2016488:	31cf383a 	mul	r7,r6,r7
 201648c:	4806d43a 	srli	r3,r9,16
 2016490:	4111c83a 	sub	r8,r8,r4
 2016494:	29cb883a 	add	r5,r5,r7
 2016498:	194b883a 	add	r5,r3,r5
 201649c:	3085383a 	mul	r2,r6,r2
 20164a0:	29c0022e 	bgeu	r5,r7,20164ac <__umoddi3+0x3d8>
 20164a4:	00c00074 	movhi	r3,1
 20164a8:	10c5883a 	add	r2,r2,r3
 20164ac:	2808d43a 	srli	r4,r5,16
 20164b0:	280a943a 	slli	r5,r5,16
 20164b4:	4a7fffcc 	andi	r9,r9,65535
 20164b8:	2085883a 	add	r2,r4,r2
 20164bc:	2a4b883a 	add	r5,r5,r9
 20164c0:	40803636 	bltu	r8,r2,201659c <__umoddi3+0x4c8>
 20164c4:	40804d26 	beq	r8,r2,20165fc <__umoddi3+0x528>
 20164c8:	4089c83a 	sub	r4,r8,r2
 20164cc:	280f883a 	mov	r7,r5
 20164d0:	81cfc83a 	sub	r7,r16,r7
 20164d4:	81c7803a 	cmpltu	r3,r16,r7
 20164d8:	20c7c83a 	sub	r3,r4,r3
 20164dc:	1cc4983a 	sll	r2,r3,r19
 20164e0:	3d0ed83a 	srl	r7,r7,r20
 20164e4:	1d06d83a 	srl	r3,r3,r20
 20164e8:	11c4b03a 	or	r2,r2,r7
 20164ec:	003f9306 	br	201633c <__umoddi3+0x268>
 20164f0:	9ca6983a 	sll	r19,r19,r18
 20164f4:	88e8d83a 	srl	r20,r17,r3
 20164f8:	80c4d83a 	srl	r2,r16,r3
 20164fc:	982cd43a 	srli	r22,r19,16
 2016500:	8ca2983a 	sll	r17,r17,r18
 2016504:	a009883a 	mov	r4,r20
 2016508:	b00b883a 	mov	r5,r22
 201650c:	1478b03a 	or	fp,r2,r17
 2016510:	2006c100 	call	2006c10 <__umodsi3>
 2016514:	a009883a 	mov	r4,r20
 2016518:	b00b883a 	mov	r5,r22
 201651c:	1023883a 	mov	r17,r2
 2016520:	2006bac0 	call	2006bac <__udivsi3>
 2016524:	9d7fffcc 	andi	r21,r19,65535
 2016528:	880a943a 	slli	r5,r17,16
 201652c:	e008d43a 	srli	r4,fp,16
 2016530:	a885383a 	mul	r2,r21,r2
 2016534:	84a8983a 	sll	r20,r16,r18
 2016538:	2148b03a 	or	r4,r4,r5
 201653c:	2080042e 	bgeu	r4,r2,2016550 <__umoddi3+0x47c>
 2016540:	24c9883a 	add	r4,r4,r19
 2016544:	24c00236 	bltu	r4,r19,2016550 <__umoddi3+0x47c>
 2016548:	2080012e 	bgeu	r4,r2,2016550 <__umoddi3+0x47c>
 201654c:	24c9883a 	add	r4,r4,r19
 2016550:	20a3c83a 	sub	r17,r4,r2
 2016554:	b00b883a 	mov	r5,r22
 2016558:	8809883a 	mov	r4,r17
 201655c:	2006c100 	call	2006c10 <__umodsi3>
 2016560:	102f883a 	mov	r23,r2
 2016564:	8809883a 	mov	r4,r17
 2016568:	b00b883a 	mov	r5,r22
 201656c:	2006bac0 	call	2006bac <__udivsi3>
 2016570:	b82e943a 	slli	r23,r23,16
 2016574:	a885383a 	mul	r2,r21,r2
 2016578:	e13fffcc 	andi	r4,fp,65535
 201657c:	25c8b03a 	or	r4,r4,r23
 2016580:	2080042e 	bgeu	r4,r2,2016594 <__umoddi3+0x4c0>
 2016584:	24c9883a 	add	r4,r4,r19
 2016588:	24c00236 	bltu	r4,r19,2016594 <__umoddi3+0x4c0>
 201658c:	2080012e 	bgeu	r4,r2,2016594 <__umoddi3+0x4c0>
 2016590:	24c9883a 	add	r4,r4,r19
 2016594:	20a3c83a 	sub	r17,r4,r2
 2016598:	003f4806 	br	20162bc <__umoddi3+0x1e8>
 201659c:	2c8fc83a 	sub	r7,r5,r18
 20165a0:	1545c83a 	sub	r2,r2,r21
 20165a4:	29cb803a 	cmpltu	r5,r5,r7
 20165a8:	1145c83a 	sub	r2,r2,r5
 20165ac:	4089c83a 	sub	r4,r8,r2
 20165b0:	003fc706 	br	20164d0 <__umoddi3+0x3fc>
 20165b4:	01000604 	movi	r4,24
 20165b8:	003f1806 	br	201621c <__umoddi3+0x148>
 20165bc:	00800604 	movi	r2,24
 20165c0:	003f3206 	br	201628c <__umoddi3+0x1b8>
 20165c4:	01000604 	movi	r4,24
 20165c8:	003ed906 	br	2016130 <__umoddi3+0x5c>
 20165cc:	413fa52e 	bgeu	r8,r4,2016464 <__umoddi3+0x390>
 20165d0:	297fff84 	addi	r5,r5,-2
 20165d4:	4551883a 	add	r8,r8,r21
 20165d8:	003fa306 	br	2016468 <__umoddi3+0x394>
 20165dc:	15ff8b2e 	bgeu	r2,r23,201640c <__umoddi3+0x338>
 20165e0:	31bfff84 	addi	r6,r6,-2
 20165e4:	1545883a 	add	r2,r2,r21
 20165e8:	003f8906 	br	2016410 <__umoddi3+0x33c>
 20165ec:	24c9883a 	add	r4,r4,r19
 20165f0:	003eee06 	br	20161ac <__umoddi3+0xd8>
 20165f4:	8005883a 	mov	r2,r16
 20165f8:	003f1706 	br	2016258 <__umoddi3+0x184>
 20165fc:	817fe736 	bltu	r16,r5,201659c <__umoddi3+0x4c8>
 2016600:	280f883a 	mov	r7,r5
 2016604:	0009883a 	mov	r4,zero
 2016608:	003fb106 	br	20164d0 <__umoddi3+0x3fc>

0201660c <__fixdfsi>:
 201660c:	280cd53a 	srli	r6,r5,20
 2016610:	00c00434 	movhi	r3,16
 2016614:	18ffffc4 	addi	r3,r3,-1
 2016618:	3181ffcc 	andi	r6,r6,2047
 201661c:	01c0ff84 	movi	r7,1022
 2016620:	28c6703a 	and	r3,r5,r3
 2016624:	280ad7fa 	srli	r5,r5,31
 2016628:	3980120e 	bge	r7,r6,2016674 <__fixdfsi+0x68>
 201662c:	00810744 	movi	r2,1053
 2016630:	11800c16 	blt	r2,r6,2016664 <__fixdfsi+0x58>
 2016634:	00810cc4 	movi	r2,1075
 2016638:	1185c83a 	sub	r2,r2,r6
 201663c:	01c007c4 	movi	r7,31
 2016640:	18c00434 	orhi	r3,r3,16
 2016644:	38800d16 	blt	r7,r2,201667c <__fixdfsi+0x70>
 2016648:	31befb44 	addi	r6,r6,-1043
 201664c:	2084d83a 	srl	r2,r4,r2
 2016650:	1986983a 	sll	r3,r3,r6
 2016654:	1884b03a 	or	r2,r3,r2
 2016658:	28000726 	beq	r5,zero,2016678 <__fixdfsi+0x6c>
 201665c:	0085c83a 	sub	r2,zero,r2
 2016660:	f800283a 	ret
 2016664:	00a00034 	movhi	r2,32768
 2016668:	10bfffc4 	addi	r2,r2,-1
 201666c:	2885883a 	add	r2,r5,r2
 2016670:	f800283a 	ret
 2016674:	0005883a 	mov	r2,zero
 2016678:	f800283a 	ret
 201667c:	008104c4 	movi	r2,1043
 2016680:	1185c83a 	sub	r2,r2,r6
 2016684:	1884d83a 	srl	r2,r3,r2
 2016688:	003ff306 	br	2016658 <__fixdfsi+0x4c>

0201668c <__floatsidf>:
 201668c:	defffd04 	addi	sp,sp,-12
 2016690:	dfc00215 	stw	ra,8(sp)
 2016694:	dc400115 	stw	r17,4(sp)
 2016698:	dc000015 	stw	r16,0(sp)
 201669c:	20002b26 	beq	r4,zero,201674c <__floatsidf+0xc0>
 20166a0:	2023883a 	mov	r17,r4
 20166a4:	2020d7fa 	srli	r16,r4,31
 20166a8:	20002d16 	blt	r4,zero,2016760 <__floatsidf+0xd4>
 20166ac:	8809883a 	mov	r4,r17
 20166b0:	20093200 	call	2009320 <__clzsi2>
 20166b4:	01410784 	movi	r5,1054
 20166b8:	288bc83a 	sub	r5,r5,r2
 20166bc:	01010cc4 	movi	r4,1075
 20166c0:	2149c83a 	sub	r4,r4,r5
 20166c4:	00c007c4 	movi	r3,31
 20166c8:	1900160e 	bge	r3,r4,2016724 <__floatsidf+0x98>
 20166cc:	00c104c4 	movi	r3,1043
 20166d0:	1947c83a 	sub	r3,r3,r5
 20166d4:	88c6983a 	sll	r3,r17,r3
 20166d8:	00800434 	movhi	r2,16
 20166dc:	10bfffc4 	addi	r2,r2,-1
 20166e0:	1886703a 	and	r3,r3,r2
 20166e4:	2941ffcc 	andi	r5,r5,2047
 20166e8:	800d883a 	mov	r6,r16
 20166ec:	0005883a 	mov	r2,zero
 20166f0:	280a953a 	slli	r5,r5,20
 20166f4:	31803fcc 	andi	r6,r6,255
 20166f8:	01000434 	movhi	r4,16
 20166fc:	300c97fa 	slli	r6,r6,31
 2016700:	213fffc4 	addi	r4,r4,-1
 2016704:	1906703a 	and	r3,r3,r4
 2016708:	1946b03a 	or	r3,r3,r5
 201670c:	1986b03a 	or	r3,r3,r6
 2016710:	dfc00217 	ldw	ra,8(sp)
 2016714:	dc400117 	ldw	r17,4(sp)
 2016718:	dc000017 	ldw	r16,0(sp)
 201671c:	dec00304 	addi	sp,sp,12
 2016720:	f800283a 	ret
 2016724:	00c002c4 	movi	r3,11
 2016728:	1887c83a 	sub	r3,r3,r2
 201672c:	88c6d83a 	srl	r3,r17,r3
 2016730:	8904983a 	sll	r2,r17,r4
 2016734:	01000434 	movhi	r4,16
 2016738:	213fffc4 	addi	r4,r4,-1
 201673c:	2941ffcc 	andi	r5,r5,2047
 2016740:	1906703a 	and	r3,r3,r4
 2016744:	800d883a 	mov	r6,r16
 2016748:	003fe906 	br	20166f0 <__floatsidf+0x64>
 201674c:	000d883a 	mov	r6,zero
 2016750:	000b883a 	mov	r5,zero
 2016754:	0007883a 	mov	r3,zero
 2016758:	0005883a 	mov	r2,zero
 201675c:	003fe406 	br	20166f0 <__floatsidf+0x64>
 2016760:	0123c83a 	sub	r17,zero,r4
 2016764:	003fd106 	br	20166ac <__floatsidf+0x20>

02016768 <__floatunsidf>:
 2016768:	defffe04 	addi	sp,sp,-8
 201676c:	dc000015 	stw	r16,0(sp)
 2016770:	dfc00115 	stw	ra,4(sp)
 2016774:	2021883a 	mov	r16,r4
 2016778:	20002226 	beq	r4,zero,2016804 <__floatunsidf+0x9c>
 201677c:	20093200 	call	2009320 <__clzsi2>
 2016780:	01010784 	movi	r4,1054
 2016784:	2089c83a 	sub	r4,r4,r2
 2016788:	01810cc4 	movi	r6,1075
 201678c:	310dc83a 	sub	r6,r6,r4
 2016790:	00c007c4 	movi	r3,31
 2016794:	1980120e 	bge	r3,r6,20167e0 <__floatunsidf+0x78>
 2016798:	00c104c4 	movi	r3,1043
 201679c:	1907c83a 	sub	r3,r3,r4
 20167a0:	80ca983a 	sll	r5,r16,r3
 20167a4:	00800434 	movhi	r2,16
 20167a8:	10bfffc4 	addi	r2,r2,-1
 20167ac:	2101ffcc 	andi	r4,r4,2047
 20167b0:	0021883a 	mov	r16,zero
 20167b4:	288a703a 	and	r5,r5,r2
 20167b8:	2008953a 	slli	r4,r4,20
 20167bc:	00c00434 	movhi	r3,16
 20167c0:	18ffffc4 	addi	r3,r3,-1
 20167c4:	28c6703a 	and	r3,r5,r3
 20167c8:	8005883a 	mov	r2,r16
 20167cc:	1906b03a 	or	r3,r3,r4
 20167d0:	dfc00117 	ldw	ra,4(sp)
 20167d4:	dc000017 	ldw	r16,0(sp)
 20167d8:	dec00204 	addi	sp,sp,8
 20167dc:	f800283a 	ret
 20167e0:	00c002c4 	movi	r3,11
 20167e4:	188bc83a 	sub	r5,r3,r2
 20167e8:	814ad83a 	srl	r5,r16,r5
 20167ec:	00c00434 	movhi	r3,16
 20167f0:	18ffffc4 	addi	r3,r3,-1
 20167f4:	81a0983a 	sll	r16,r16,r6
 20167f8:	2101ffcc 	andi	r4,r4,2047
 20167fc:	28ca703a 	and	r5,r5,r3
 2016800:	003fed06 	br	20167b8 <__floatunsidf+0x50>
 2016804:	0009883a 	mov	r4,zero
 2016808:	000b883a 	mov	r5,zero
 201680c:	003fea06 	br	20167b8 <__floatunsidf+0x50>

02016810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016810:	defffe04 	addi	sp,sp,-8
 2016814:	dfc00115 	stw	ra,4(sp)
 2016818:	df000015 	stw	fp,0(sp)
 201681c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016820:	d0a03b17 	ldw	r2,-32532(gp)
 2016824:	10000326 	beq	r2,zero,2016834 <alt_get_errno+0x24>
 2016828:	d0a03b17 	ldw	r2,-32532(gp)
 201682c:	103ee83a 	callr	r2
 2016830:	00000106 	br	2016838 <alt_get_errno+0x28>
 2016834:	d0a79e04 	addi	r2,gp,-24968
}
 2016838:	e037883a 	mov	sp,fp
 201683c:	dfc00117 	ldw	ra,4(sp)
 2016840:	df000017 	ldw	fp,0(sp)
 2016844:	dec00204 	addi	sp,sp,8
 2016848:	f800283a 	ret

0201684c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 201684c:	defffb04 	addi	sp,sp,-20
 2016850:	dfc00415 	stw	ra,16(sp)
 2016854:	df000315 	stw	fp,12(sp)
 2016858:	df000304 	addi	fp,sp,12
 201685c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2016860:	e0bfff17 	ldw	r2,-4(fp)
 2016864:	10000616 	blt	r2,zero,2016880 <close+0x34>
 2016868:	e0bfff17 	ldw	r2,-4(fp)
 201686c:	10c00324 	muli	r3,r2,12
 2016870:	008080b4 	movhi	r2,514
 2016874:	108d2c04 	addi	r2,r2,13488
 2016878:	1885883a 	add	r2,r3,r2
 201687c:	00000106 	br	2016884 <close+0x38>
 2016880:	0005883a 	mov	r2,zero
 2016884:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2016888:	e0bffd17 	ldw	r2,-12(fp)
 201688c:	10001926 	beq	r2,zero,20168f4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2016890:	e0bffd17 	ldw	r2,-12(fp)
 2016894:	10800017 	ldw	r2,0(r2)
 2016898:	10800417 	ldw	r2,16(r2)
 201689c:	10000626 	beq	r2,zero,20168b8 <close+0x6c>
 20168a0:	e0bffd17 	ldw	r2,-12(fp)
 20168a4:	10800017 	ldw	r2,0(r2)
 20168a8:	10800417 	ldw	r2,16(r2)
 20168ac:	e13ffd17 	ldw	r4,-12(fp)
 20168b0:	103ee83a 	callr	r2
 20168b4:	00000106 	br	20168bc <close+0x70>
 20168b8:	0005883a 	mov	r2,zero
 20168bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20168c0:	e13fff17 	ldw	r4,-4(fp)
 20168c4:	2016f040 	call	2016f04 <alt_release_fd>
    if (rval < 0)
 20168c8:	e0bffe17 	ldw	r2,-8(fp)
 20168cc:	1000070e 	bge	r2,zero,20168ec <close+0xa0>
    {
      ALT_ERRNO = -rval;
 20168d0:	20168100 	call	2016810 <alt_get_errno>
 20168d4:	1007883a 	mov	r3,r2
 20168d8:	e0bffe17 	ldw	r2,-8(fp)
 20168dc:	0085c83a 	sub	r2,zero,r2
 20168e0:	18800015 	stw	r2,0(r3)
      return -1;
 20168e4:	00bfffc4 	movi	r2,-1
 20168e8:	00000706 	br	2016908 <close+0xbc>
    }
    return 0;
 20168ec:	0005883a 	mov	r2,zero
 20168f0:	00000506 	br	2016908 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20168f4:	20168100 	call	2016810 <alt_get_errno>
 20168f8:	1007883a 	mov	r3,r2
 20168fc:	00801444 	movi	r2,81
 2016900:	18800015 	stw	r2,0(r3)
    return -1;
 2016904:	00bfffc4 	movi	r2,-1
  }
}
 2016908:	e037883a 	mov	sp,fp
 201690c:	dfc00117 	ldw	ra,4(sp)
 2016910:	df000017 	ldw	fp,0(sp)
 2016914:	dec00204 	addi	sp,sp,8
 2016918:	f800283a 	ret

0201691c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 201691c:	defffc04 	addi	sp,sp,-16
 2016920:	df000315 	stw	fp,12(sp)
 2016924:	df000304 	addi	fp,sp,12
 2016928:	e13ffd15 	stw	r4,-12(fp)
 201692c:	e17ffe15 	stw	r5,-8(fp)
 2016930:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2016934:	e0bfff17 	ldw	r2,-4(fp)
}
 2016938:	e037883a 	mov	sp,fp
 201693c:	df000017 	ldw	fp,0(sp)
 2016940:	dec00104 	addi	sp,sp,4
 2016944:	f800283a 	ret

02016948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016948:	defffe04 	addi	sp,sp,-8
 201694c:	dfc00115 	stw	ra,4(sp)
 2016950:	df000015 	stw	fp,0(sp)
 2016954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016958:	d0a03b17 	ldw	r2,-32532(gp)
 201695c:	10000326 	beq	r2,zero,201696c <alt_get_errno+0x24>
 2016960:	d0a03b17 	ldw	r2,-32532(gp)
 2016964:	103ee83a 	callr	r2
 2016968:	00000106 	br	2016970 <alt_get_errno+0x28>
 201696c:	d0a79e04 	addi	r2,gp,-24968
}
 2016970:	e037883a 	mov	sp,fp
 2016974:	dfc00117 	ldw	ra,4(sp)
 2016978:	df000017 	ldw	fp,0(sp)
 201697c:	dec00204 	addi	sp,sp,8
 2016980:	f800283a 	ret

02016984 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2016984:	defffb04 	addi	sp,sp,-20
 2016988:	dfc00415 	stw	ra,16(sp)
 201698c:	df000315 	stw	fp,12(sp)
 2016990:	df000304 	addi	fp,sp,12
 2016994:	e13ffe15 	stw	r4,-8(fp)
 2016998:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201699c:	e0bffe17 	ldw	r2,-8(fp)
 20169a0:	10000616 	blt	r2,zero,20169bc <fstat+0x38>
 20169a4:	e0bffe17 	ldw	r2,-8(fp)
 20169a8:	10c00324 	muli	r3,r2,12
 20169ac:	008080b4 	movhi	r2,514
 20169b0:	108d2c04 	addi	r2,r2,13488
 20169b4:	1885883a 	add	r2,r3,r2
 20169b8:	00000106 	br	20169c0 <fstat+0x3c>
 20169bc:	0005883a 	mov	r2,zero
 20169c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 20169c4:	e0bffd17 	ldw	r2,-12(fp)
 20169c8:	10001026 	beq	r2,zero,2016a0c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20169cc:	e0bffd17 	ldw	r2,-12(fp)
 20169d0:	10800017 	ldw	r2,0(r2)
 20169d4:	10800817 	ldw	r2,32(r2)
 20169d8:	10000726 	beq	r2,zero,20169f8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 20169dc:	e0bffd17 	ldw	r2,-12(fp)
 20169e0:	10800017 	ldw	r2,0(r2)
 20169e4:	10800817 	ldw	r2,32(r2)
 20169e8:	e17fff17 	ldw	r5,-4(fp)
 20169ec:	e13ffd17 	ldw	r4,-12(fp)
 20169f0:	103ee83a 	callr	r2
 20169f4:	00000a06 	br	2016a20 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20169f8:	e0bfff17 	ldw	r2,-4(fp)
 20169fc:	00c80004 	movi	r3,8192
 2016a00:	10c00115 	stw	r3,4(r2)
      return 0;
 2016a04:	0005883a 	mov	r2,zero
 2016a08:	00000506 	br	2016a20 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2016a0c:	20169480 	call	2016948 <alt_get_errno>
 2016a10:	1007883a 	mov	r3,r2
 2016a14:	00801444 	movi	r2,81
 2016a18:	18800015 	stw	r2,0(r3)
    return -1;
 2016a1c:	00bfffc4 	movi	r2,-1
  }
}
 2016a20:	e037883a 	mov	sp,fp
 2016a24:	dfc00117 	ldw	ra,4(sp)
 2016a28:	df000017 	ldw	fp,0(sp)
 2016a2c:	dec00204 	addi	sp,sp,8
 2016a30:	f800283a 	ret

02016a34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016a34:	defffe04 	addi	sp,sp,-8
 2016a38:	dfc00115 	stw	ra,4(sp)
 2016a3c:	df000015 	stw	fp,0(sp)
 2016a40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016a44:	d0a03b17 	ldw	r2,-32532(gp)
 2016a48:	10000326 	beq	r2,zero,2016a58 <alt_get_errno+0x24>
 2016a4c:	d0a03b17 	ldw	r2,-32532(gp)
 2016a50:	103ee83a 	callr	r2
 2016a54:	00000106 	br	2016a5c <alt_get_errno+0x28>
 2016a58:	d0a79e04 	addi	r2,gp,-24968
}
 2016a5c:	e037883a 	mov	sp,fp
 2016a60:	dfc00117 	ldw	ra,4(sp)
 2016a64:	df000017 	ldw	fp,0(sp)
 2016a68:	dec00204 	addi	sp,sp,8
 2016a6c:	f800283a 	ret

02016a70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2016a70:	deffed04 	addi	sp,sp,-76
 2016a74:	dfc01215 	stw	ra,72(sp)
 2016a78:	df001115 	stw	fp,68(sp)
 2016a7c:	df001104 	addi	fp,sp,68
 2016a80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016a84:	e0bfff17 	ldw	r2,-4(fp)
 2016a88:	10000616 	blt	r2,zero,2016aa4 <isatty+0x34>
 2016a8c:	e0bfff17 	ldw	r2,-4(fp)
 2016a90:	10c00324 	muli	r3,r2,12
 2016a94:	008080b4 	movhi	r2,514
 2016a98:	108d2c04 	addi	r2,r2,13488
 2016a9c:	1885883a 	add	r2,r3,r2
 2016aa0:	00000106 	br	2016aa8 <isatty+0x38>
 2016aa4:	0005883a 	mov	r2,zero
 2016aa8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2016aac:	e0bfef17 	ldw	r2,-68(fp)
 2016ab0:	10000e26 	beq	r2,zero,2016aec <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2016ab4:	e0bfef17 	ldw	r2,-68(fp)
 2016ab8:	10800017 	ldw	r2,0(r2)
 2016abc:	10800817 	ldw	r2,32(r2)
 2016ac0:	1000021e 	bne	r2,zero,2016acc <isatty+0x5c>
    {
      return 1;
 2016ac4:	00800044 	movi	r2,1
 2016ac8:	00000d06 	br	2016b00 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2016acc:	e0bff004 	addi	r2,fp,-64
 2016ad0:	100b883a 	mov	r5,r2
 2016ad4:	e13fff17 	ldw	r4,-4(fp)
 2016ad8:	20169840 	call	2016984 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2016adc:	e0bff117 	ldw	r2,-60(fp)
 2016ae0:	10880020 	cmpeqi	r2,r2,8192
 2016ae4:	10803fcc 	andi	r2,r2,255
 2016ae8:	00000506 	br	2016b00 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2016aec:	2016a340 	call	2016a34 <alt_get_errno>
 2016af0:	1007883a 	mov	r3,r2
 2016af4:	00801444 	movi	r2,81
 2016af8:	18800015 	stw	r2,0(r3)
    return 0;
 2016afc:	0005883a 	mov	r2,zero
  }
}
 2016b00:	e037883a 	mov	sp,fp
 2016b04:	dfc00117 	ldw	ra,4(sp)
 2016b08:	df000017 	ldw	fp,0(sp)
 2016b0c:	dec00204 	addi	sp,sp,8
 2016b10:	f800283a 	ret

02016b14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2016b14:	defffc04 	addi	sp,sp,-16
 2016b18:	df000315 	stw	fp,12(sp)
 2016b1c:	df000304 	addi	fp,sp,12
 2016b20:	e13ffd15 	stw	r4,-12(fp)
 2016b24:	e17ffe15 	stw	r5,-8(fp)
 2016b28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2016b2c:	e0fffe17 	ldw	r3,-8(fp)
 2016b30:	e0bffd17 	ldw	r2,-12(fp)
 2016b34:	18800c26 	beq	r3,r2,2016b68 <alt_load_section+0x54>
  {
    while( to != end )
 2016b38:	00000806 	br	2016b5c <alt_load_section+0x48>
    {
      *to++ = *from++;
 2016b3c:	e0bffe17 	ldw	r2,-8(fp)
 2016b40:	10c00104 	addi	r3,r2,4
 2016b44:	e0fffe15 	stw	r3,-8(fp)
 2016b48:	e0fffd17 	ldw	r3,-12(fp)
 2016b4c:	19000104 	addi	r4,r3,4
 2016b50:	e13ffd15 	stw	r4,-12(fp)
 2016b54:	18c00017 	ldw	r3,0(r3)
 2016b58:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2016b5c:	e0fffe17 	ldw	r3,-8(fp)
 2016b60:	e0bfff17 	ldw	r2,-4(fp)
 2016b64:	18bff51e 	bne	r3,r2,2016b3c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2016b68:	0001883a 	nop
 2016b6c:	e037883a 	mov	sp,fp
 2016b70:	df000017 	ldw	fp,0(sp)
 2016b74:	dec00104 	addi	sp,sp,4
 2016b78:	f800283a 	ret

02016b7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2016b7c:	defffe04 	addi	sp,sp,-8
 2016b80:	dfc00115 	stw	ra,4(sp)
 2016b84:	df000015 	stw	fp,0(sp)
 2016b88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2016b8c:	018080b4 	movhi	r6,514
 2016b90:	31921104 	addi	r6,r6,18500
 2016b94:	014080b4 	movhi	r5,514
 2016b98:	294aed04 	addi	r5,r5,11188
 2016b9c:	010080b4 	movhi	r4,514
 2016ba0:	21121104 	addi	r4,r4,18500
 2016ba4:	2016b140 	call	2016b14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2016ba8:	01808034 	movhi	r6,512
 2016bac:	31809204 	addi	r6,r6,584
 2016bb0:	01408034 	movhi	r5,512
 2016bb4:	29400804 	addi	r5,r5,32
 2016bb8:	01008034 	movhi	r4,512
 2016bbc:	21000804 	addi	r4,r4,32
 2016bc0:	2016b140 	call	2016b14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2016bc4:	018080b4 	movhi	r6,514
 2016bc8:	318aed04 	addi	r6,r6,11188
 2016bcc:	014080b4 	movhi	r5,514
 2016bd0:	2947fa04 	addi	r5,r5,8168
 2016bd4:	010080b4 	movhi	r4,514
 2016bd8:	2107fa04 	addi	r4,r4,8168
 2016bdc:	2016b140 	call	2016b14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2016be0:	2020ab00 	call	2020ab0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2016be4:	2020d280 	call	2020d28 <alt_icache_flush_all>
}
 2016be8:	0001883a 	nop
 2016bec:	e037883a 	mov	sp,fp
 2016bf0:	dfc00117 	ldw	ra,4(sp)
 2016bf4:	df000017 	ldw	fp,0(sp)
 2016bf8:	dec00204 	addi	sp,sp,8
 2016bfc:	f800283a 	ret

02016c00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016c00:	defffe04 	addi	sp,sp,-8
 2016c04:	dfc00115 	stw	ra,4(sp)
 2016c08:	df000015 	stw	fp,0(sp)
 2016c0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016c10:	d0a03b17 	ldw	r2,-32532(gp)
 2016c14:	10000326 	beq	r2,zero,2016c24 <alt_get_errno+0x24>
 2016c18:	d0a03b17 	ldw	r2,-32532(gp)
 2016c1c:	103ee83a 	callr	r2
 2016c20:	00000106 	br	2016c28 <alt_get_errno+0x28>
 2016c24:	d0a79e04 	addi	r2,gp,-24968
}
 2016c28:	e037883a 	mov	sp,fp
 2016c2c:	dfc00117 	ldw	ra,4(sp)
 2016c30:	df000017 	ldw	fp,0(sp)
 2016c34:	dec00204 	addi	sp,sp,8
 2016c38:	f800283a 	ret

02016c3c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2016c3c:	defff904 	addi	sp,sp,-28
 2016c40:	dfc00615 	stw	ra,24(sp)
 2016c44:	df000515 	stw	fp,20(sp)
 2016c48:	df000504 	addi	fp,sp,20
 2016c4c:	e13ffd15 	stw	r4,-12(fp)
 2016c50:	e17ffe15 	stw	r5,-8(fp)
 2016c54:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2016c58:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016c5c:	e0bffd17 	ldw	r2,-12(fp)
 2016c60:	10000616 	blt	r2,zero,2016c7c <lseek+0x40>
 2016c64:	e0bffd17 	ldw	r2,-12(fp)
 2016c68:	10c00324 	muli	r3,r2,12
 2016c6c:	008080b4 	movhi	r2,514
 2016c70:	108d2c04 	addi	r2,r2,13488
 2016c74:	1885883a 	add	r2,r3,r2
 2016c78:	00000106 	br	2016c80 <lseek+0x44>
 2016c7c:	0005883a 	mov	r2,zero
 2016c80:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2016c84:	e0bffc17 	ldw	r2,-16(fp)
 2016c88:	10001026 	beq	r2,zero,2016ccc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2016c8c:	e0bffc17 	ldw	r2,-16(fp)
 2016c90:	10800017 	ldw	r2,0(r2)
 2016c94:	10800717 	ldw	r2,28(r2)
 2016c98:	10000926 	beq	r2,zero,2016cc0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2016c9c:	e0bffc17 	ldw	r2,-16(fp)
 2016ca0:	10800017 	ldw	r2,0(r2)
 2016ca4:	10800717 	ldw	r2,28(r2)
 2016ca8:	e1bfff17 	ldw	r6,-4(fp)
 2016cac:	e17ffe17 	ldw	r5,-8(fp)
 2016cb0:	e13ffc17 	ldw	r4,-16(fp)
 2016cb4:	103ee83a 	callr	r2
 2016cb8:	e0bffb15 	stw	r2,-20(fp)
 2016cbc:	00000506 	br	2016cd4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2016cc0:	00bfde84 	movi	r2,-134
 2016cc4:	e0bffb15 	stw	r2,-20(fp)
 2016cc8:	00000206 	br	2016cd4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 2016ccc:	00bfebc4 	movi	r2,-81
 2016cd0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2016cd4:	e0bffb17 	ldw	r2,-20(fp)
 2016cd8:	1000070e 	bge	r2,zero,2016cf8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 2016cdc:	2016c000 	call	2016c00 <alt_get_errno>
 2016ce0:	1007883a 	mov	r3,r2
 2016ce4:	e0bffb17 	ldw	r2,-20(fp)
 2016ce8:	0085c83a 	sub	r2,zero,r2
 2016cec:	18800015 	stw	r2,0(r3)
    rc = -1;
 2016cf0:	00bfffc4 	movi	r2,-1
 2016cf4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2016cf8:	e0bffb17 	ldw	r2,-20(fp)
}
 2016cfc:	e037883a 	mov	sp,fp
 2016d00:	dfc00117 	ldw	ra,4(sp)
 2016d04:	df000017 	ldw	fp,0(sp)
 2016d08:	dec00204 	addi	sp,sp,8
 2016d0c:	f800283a 	ret

02016d10 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2016d10:	defff904 	addi	sp,sp,-28
 2016d14:	dfc00615 	stw	ra,24(sp)
 2016d18:	df000515 	stw	fp,20(sp)
 2016d1c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2016d20:	0009883a 	mov	r4,zero
 2016d24:	201f71c0 	call	201f71c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2016d28:	2017ccc0 	call	2017ccc <OSInit>
 2016d2c:	01000044 	movi	r4,1
 2016d30:	201d0e40 	call	201d0e4 <OSSemCreate>
 2016d34:	d0a7a415 	stw	r2,-24944(gp)
 2016d38:	01000044 	movi	r4,1
 2016d3c:	201d0e40 	call	201d0e4 <OSSemCreate>
 2016d40:	d0a7a615 	stw	r2,-24936(gp)
 2016d44:	d0a79f04 	addi	r2,gp,-24964
 2016d48:	e0bffc15 	stw	r2,-16(fp)
 2016d4c:	00800044 	movi	r2,1
 2016d50:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 2016d54:	e0bffd0b 	ldhu	r2,-12(fp)
 2016d58:	1009883a 	mov	r4,r2
 2016d5c:	201d0e40 	call	201d0e4 <OSSemCreate>
 2016d60:	1007883a 	mov	r3,r2
 2016d64:	e0bffc17 	ldw	r2,-16(fp)
 2016d68:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2016d6c:	201f7540 	call	201f754 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2016d70:	018080b4 	movhi	r6,514
 2016d74:	318a9504 	addi	r6,r6,10836
 2016d78:	014080b4 	movhi	r5,514
 2016d7c:	294a9504 	addi	r5,r5,10836
 2016d80:	010080b4 	movhi	r4,514
 2016d84:	210a9504 	addi	r4,r4,10836
 2016d88:	2020e200 	call	2020e20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2016d8c:	2020bd80 	call	2020bd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2016d90:	010080b4 	movhi	r4,514
 2016d94:	21030e04 	addi	r4,r4,3128
 2016d98:	2021aa00 	call	2021aa0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2016d9c:	d0a7a017 	ldw	r2,-24960(gp)
 2016da0:	d0e7a117 	ldw	r3,-24956(gp)
 2016da4:	d127a217 	ldw	r4,-24952(gp)
 2016da8:	200d883a 	mov	r6,r4
 2016dac:	180b883a 	mov	r5,r3
 2016db0:	1009883a 	mov	r4,r2
 2016db4:	2002e700 	call	2002e70 <main>
 2016db8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 2016dbc:	01000044 	movi	r4,1
 2016dc0:	201684c0 	call	201684c <close>
  exit (result);
 2016dc4:	e13ffb17 	ldw	r4,-20(fp)
 2016dc8:	2021adc0 	call	2021adc <exit>

02016dcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016dcc:	defffe04 	addi	sp,sp,-8
 2016dd0:	dfc00115 	stw	ra,4(sp)
 2016dd4:	df000015 	stw	fp,0(sp)
 2016dd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016ddc:	d0a03b17 	ldw	r2,-32532(gp)
 2016de0:	10000326 	beq	r2,zero,2016df0 <alt_get_errno+0x24>
 2016de4:	d0a03b17 	ldw	r2,-32532(gp)
 2016de8:	103ee83a 	callr	r2
 2016dec:	00000106 	br	2016df4 <alt_get_errno+0x28>
 2016df0:	d0a79e04 	addi	r2,gp,-24968
}
 2016df4:	e037883a 	mov	sp,fp
 2016df8:	dfc00117 	ldw	ra,4(sp)
 2016dfc:	df000017 	ldw	fp,0(sp)
 2016e00:	dec00204 	addi	sp,sp,8
 2016e04:	f800283a 	ret

02016e08 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2016e08:	defff904 	addi	sp,sp,-28
 2016e0c:	dfc00615 	stw	ra,24(sp)
 2016e10:	df000515 	stw	fp,20(sp)
 2016e14:	df000504 	addi	fp,sp,20
 2016e18:	e13ffd15 	stw	r4,-12(fp)
 2016e1c:	e17ffe15 	stw	r5,-8(fp)
 2016e20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2016e24:	e0bffd17 	ldw	r2,-12(fp)
 2016e28:	10000616 	blt	r2,zero,2016e44 <read+0x3c>
 2016e2c:	e0bffd17 	ldw	r2,-12(fp)
 2016e30:	10c00324 	muli	r3,r2,12
 2016e34:	008080b4 	movhi	r2,514
 2016e38:	108d2c04 	addi	r2,r2,13488
 2016e3c:	1885883a 	add	r2,r3,r2
 2016e40:	00000106 	br	2016e48 <read+0x40>
 2016e44:	0005883a 	mov	r2,zero
 2016e48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2016e4c:	e0bffb17 	ldw	r2,-20(fp)
 2016e50:	10002226 	beq	r2,zero,2016edc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2016e54:	e0bffb17 	ldw	r2,-20(fp)
 2016e58:	10800217 	ldw	r2,8(r2)
 2016e5c:	108000cc 	andi	r2,r2,3
 2016e60:	10800060 	cmpeqi	r2,r2,1
 2016e64:	1000181e 	bne	r2,zero,2016ec8 <read+0xc0>
        (fd->dev->read))
 2016e68:	e0bffb17 	ldw	r2,-20(fp)
 2016e6c:	10800017 	ldw	r2,0(r2)
 2016e70:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2016e74:	10001426 	beq	r2,zero,2016ec8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2016e78:	e0bffb17 	ldw	r2,-20(fp)
 2016e7c:	10800017 	ldw	r2,0(r2)
 2016e80:	10800517 	ldw	r2,20(r2)
 2016e84:	e0ffff17 	ldw	r3,-4(fp)
 2016e88:	180d883a 	mov	r6,r3
 2016e8c:	e17ffe17 	ldw	r5,-8(fp)
 2016e90:	e13ffb17 	ldw	r4,-20(fp)
 2016e94:	103ee83a 	callr	r2
 2016e98:	e0bffc15 	stw	r2,-16(fp)
 2016e9c:	e0bffc17 	ldw	r2,-16(fp)
 2016ea0:	1000070e 	bge	r2,zero,2016ec0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 2016ea4:	2016dcc0 	call	2016dcc <alt_get_errno>
 2016ea8:	1007883a 	mov	r3,r2
 2016eac:	e0bffc17 	ldw	r2,-16(fp)
 2016eb0:	0085c83a 	sub	r2,zero,r2
 2016eb4:	18800015 	stw	r2,0(r3)
          return -1;
 2016eb8:	00bfffc4 	movi	r2,-1
 2016ebc:	00000c06 	br	2016ef0 <read+0xe8>
        }
        return rval;
 2016ec0:	e0bffc17 	ldw	r2,-16(fp)
 2016ec4:	00000a06 	br	2016ef0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2016ec8:	2016dcc0 	call	2016dcc <alt_get_errno>
 2016ecc:	1007883a 	mov	r3,r2
 2016ed0:	00800344 	movi	r2,13
 2016ed4:	18800015 	stw	r2,0(r3)
 2016ed8:	00000406 	br	2016eec <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2016edc:	2016dcc0 	call	2016dcc <alt_get_errno>
 2016ee0:	1007883a 	mov	r3,r2
 2016ee4:	00801444 	movi	r2,81
 2016ee8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2016eec:	00bfffc4 	movi	r2,-1
}
 2016ef0:	e037883a 	mov	sp,fp
 2016ef4:	dfc00117 	ldw	ra,4(sp)
 2016ef8:	df000017 	ldw	fp,0(sp)
 2016efc:	dec00204 	addi	sp,sp,8
 2016f00:	f800283a 	ret

02016f04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2016f04:	defffe04 	addi	sp,sp,-8
 2016f08:	df000115 	stw	fp,4(sp)
 2016f0c:	df000104 	addi	fp,sp,4
 2016f10:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2016f14:	e0bfff17 	ldw	r2,-4(fp)
 2016f18:	108000d0 	cmplti	r2,r2,3
 2016f1c:	10000d1e 	bne	r2,zero,2016f54 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2016f20:	008080b4 	movhi	r2,514
 2016f24:	108d2c04 	addi	r2,r2,13488
 2016f28:	e0ffff17 	ldw	r3,-4(fp)
 2016f2c:	18c00324 	muli	r3,r3,12
 2016f30:	10c5883a 	add	r2,r2,r3
 2016f34:	10800204 	addi	r2,r2,8
 2016f38:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2016f3c:	008080b4 	movhi	r2,514
 2016f40:	108d2c04 	addi	r2,r2,13488
 2016f44:	e0ffff17 	ldw	r3,-4(fp)
 2016f48:	18c00324 	muli	r3,r3,12
 2016f4c:	10c5883a 	add	r2,r2,r3
 2016f50:	10000015 	stw	zero,0(r2)
  }
}
 2016f54:	0001883a 	nop
 2016f58:	e037883a 	mov	sp,fp
 2016f5c:	df000017 	ldw	fp,0(sp)
 2016f60:	dec00104 	addi	sp,sp,4
 2016f64:	f800283a 	ret

02016f68 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2016f68:	defff904 	addi	sp,sp,-28
 2016f6c:	df000615 	stw	fp,24(sp)
 2016f70:	df000604 	addi	fp,sp,24
 2016f74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016f78:	0005303a 	rdctl	r2,status
 2016f7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016f80:	e0fffe17 	ldw	r3,-8(fp)
 2016f84:	00bfff84 	movi	r2,-2
 2016f88:	1884703a 	and	r2,r3,r2
 2016f8c:	1001703a 	wrctl	status,r2
  
  return context;
 2016f90:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2016f94:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2016f98:	d0a03c17 	ldw	r2,-32528(gp)
 2016f9c:	10c000c4 	addi	r3,r2,3
 2016fa0:	00bfff04 	movi	r2,-4
 2016fa4:	1884703a 	and	r2,r3,r2
 2016fa8:	d0a03c15 	stw	r2,-32528(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2016fac:	d0e03c17 	ldw	r3,-32528(gp)
 2016fb0:	e0bfff17 	ldw	r2,-4(fp)
 2016fb4:	1887883a 	add	r3,r3,r2
 2016fb8:	00810034 	movhi	r2,1024
 2016fbc:	10800004 	addi	r2,r2,0
 2016fc0:	10c0062e 	bgeu	r2,r3,2016fdc <sbrk+0x74>
 2016fc4:	e0bffb17 	ldw	r2,-20(fp)
 2016fc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016fcc:	e0bffa17 	ldw	r2,-24(fp)
 2016fd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2016fd4:	00bfffc4 	movi	r2,-1
 2016fd8:	00000b06 	br	2017008 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2016fdc:	d0a03c17 	ldw	r2,-32528(gp)
 2016fe0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 2016fe4:	d0e03c17 	ldw	r3,-32528(gp)
 2016fe8:	e0bfff17 	ldw	r2,-4(fp)
 2016fec:	1885883a 	add	r2,r3,r2
 2016ff0:	d0a03c15 	stw	r2,-32528(gp)
 2016ff4:	e0bffb17 	ldw	r2,-20(fp)
 2016ff8:	e0bffc15 	stw	r2,-16(fp)
 2016ffc:	e0bffc17 	ldw	r2,-16(fp)
 2017000:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2017004:	e0bffd17 	ldw	r2,-12(fp)
} 
 2017008:	e037883a 	mov	sp,fp
 201700c:	df000017 	ldw	fp,0(sp)
 2017010:	dec00104 	addi	sp,sp,4
 2017014:	f800283a 	ret

02017018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017018:	defffe04 	addi	sp,sp,-8
 201701c:	dfc00115 	stw	ra,4(sp)
 2017020:	df000015 	stw	fp,0(sp)
 2017024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2017028:	d0a03b17 	ldw	r2,-32532(gp)
 201702c:	10000326 	beq	r2,zero,201703c <alt_get_errno+0x24>
 2017030:	d0a03b17 	ldw	r2,-32532(gp)
 2017034:	103ee83a 	callr	r2
 2017038:	00000106 	br	2017040 <alt_get_errno+0x28>
 201703c:	d0a79e04 	addi	r2,gp,-24968
}
 2017040:	e037883a 	mov	sp,fp
 2017044:	dfc00117 	ldw	ra,4(sp)
 2017048:	df000017 	ldw	fp,0(sp)
 201704c:	dec00204 	addi	sp,sp,8
 2017050:	f800283a 	ret

02017054 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2017054:	defff904 	addi	sp,sp,-28
 2017058:	dfc00615 	stw	ra,24(sp)
 201705c:	df000515 	stw	fp,20(sp)
 2017060:	df000504 	addi	fp,sp,20
 2017064:	e13ffd15 	stw	r4,-12(fp)
 2017068:	e17ffe15 	stw	r5,-8(fp)
 201706c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2017070:	e0bffd17 	ldw	r2,-12(fp)
 2017074:	10000616 	blt	r2,zero,2017090 <write+0x3c>
 2017078:	e0bffd17 	ldw	r2,-12(fp)
 201707c:	10c00324 	muli	r3,r2,12
 2017080:	008080b4 	movhi	r2,514
 2017084:	108d2c04 	addi	r2,r2,13488
 2017088:	1885883a 	add	r2,r3,r2
 201708c:	00000106 	br	2017094 <write+0x40>
 2017090:	0005883a 	mov	r2,zero
 2017094:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2017098:	e0bffb17 	ldw	r2,-20(fp)
 201709c:	10002126 	beq	r2,zero,2017124 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20170a0:	e0bffb17 	ldw	r2,-20(fp)
 20170a4:	10800217 	ldw	r2,8(r2)
 20170a8:	108000cc 	andi	r2,r2,3
 20170ac:	10001826 	beq	r2,zero,2017110 <write+0xbc>
 20170b0:	e0bffb17 	ldw	r2,-20(fp)
 20170b4:	10800017 	ldw	r2,0(r2)
 20170b8:	10800617 	ldw	r2,24(r2)
 20170bc:	10001426 	beq	r2,zero,2017110 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20170c0:	e0bffb17 	ldw	r2,-20(fp)
 20170c4:	10800017 	ldw	r2,0(r2)
 20170c8:	10800617 	ldw	r2,24(r2)
 20170cc:	e0ffff17 	ldw	r3,-4(fp)
 20170d0:	180d883a 	mov	r6,r3
 20170d4:	e17ffe17 	ldw	r5,-8(fp)
 20170d8:	e13ffb17 	ldw	r4,-20(fp)
 20170dc:	103ee83a 	callr	r2
 20170e0:	e0bffc15 	stw	r2,-16(fp)
 20170e4:	e0bffc17 	ldw	r2,-16(fp)
 20170e8:	1000070e 	bge	r2,zero,2017108 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 20170ec:	20170180 	call	2017018 <alt_get_errno>
 20170f0:	1007883a 	mov	r3,r2
 20170f4:	e0bffc17 	ldw	r2,-16(fp)
 20170f8:	0085c83a 	sub	r2,zero,r2
 20170fc:	18800015 	stw	r2,0(r3)
        return -1;
 2017100:	00bfffc4 	movi	r2,-1
 2017104:	00000c06 	br	2017138 <write+0xe4>
      }
      return rval;
 2017108:	e0bffc17 	ldw	r2,-16(fp)
 201710c:	00000a06 	br	2017138 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2017110:	20170180 	call	2017018 <alt_get_errno>
 2017114:	1007883a 	mov	r3,r2
 2017118:	00800344 	movi	r2,13
 201711c:	18800015 	stw	r2,0(r3)
 2017120:	00000406 	br	2017134 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2017124:	20170180 	call	2017018 <alt_get_errno>
 2017128:	1007883a 	mov	r3,r2
 201712c:	00801444 	movi	r2,81
 2017130:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2017134:	00bfffc4 	movi	r2,-1
}
 2017138:	e037883a 	mov	sp,fp
 201713c:	dfc00117 	ldw	ra,4(sp)
 2017140:	df000017 	ldw	fp,0(sp)
 2017144:	dec00204 	addi	sp,sp,8
 2017148:	f800283a 	ret

0201714c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 201714c:	deffdf04 	addi	sp,sp,-132
 2017150:	dfc02015 	stw	ra,128(sp)
 2017154:	df001f15 	stw	fp,124(sp)
 2017158:	df001f04 	addi	fp,sp,124
 201715c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2017160:	e0bfe204 	addi	r2,fp,-120
 2017164:	100b883a 	mov	r5,r2
 2017168:	01003fc4 	movi	r4,255
 201716c:	201f06c0 	call	201f06c <OSTaskQuery>
 2017170:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2017174:	e0bffe83 	ldbu	r2,-6(fp)
 2017178:	10803fcc 	andi	r2,r2,255
 201717c:	10001e1e 	bne	r2,zero,20171f8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2017180:	e0bfee83 	ldbu	r2,-70(fp)
 2017184:	10803fcc 	andi	r2,r2,255
 2017188:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 201718c:	d0a7a417 	ldw	r2,-24944(gp)
 2017190:	e0fffd04 	addi	r3,fp,-12
 2017194:	180b883a 	mov	r5,r3
 2017198:	1009883a 	mov	r4,r2
 201719c:	201d8840 	call	201d884 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 20171a0:	e0bffe43 	ldbu	r2,-7(fp)
 20171a4:	10803fcc 	andi	r2,r2,255
 20171a8:	10000726 	beq	r2,zero,20171c8 <__env_lock+0x7c>
 20171ac:	d0a03d17 	ldw	r2,-32524(gp)
 20171b0:	e0ffe117 	ldw	r3,-124(fp)
 20171b4:	1880041e 	bne	r3,r2,20171c8 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 20171b8:	d0a7a317 	ldw	r2,-24948(gp)
 20171bc:	10800044 	addi	r2,r2,1
 20171c0:	d0a7a315 	stw	r2,-24948(gp)
 20171c4:	00000a06 	br	20171f0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 20171c8:	d0a7a417 	ldw	r2,-24944(gp)
 20171cc:	e0fffe84 	addi	r3,fp,-6
 20171d0:	180d883a 	mov	r6,r3
 20171d4:	000b883a 	mov	r5,zero
 20171d8:	1009883a 	mov	r4,r2
 20171dc:	201d3fc0 	call	201d3fc <OSSemPend>
    locks  = 1;
 20171e0:	00800044 	movi	r2,1
 20171e4:	d0a7a315 	stw	r2,-24948(gp)
    lockid = id;
 20171e8:	e0bfe117 	ldw	r2,-124(fp)
 20171ec:	d0a03d15 	stw	r2,-32524(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 20171f0:	0001883a 	nop
 20171f4:	00000106 	br	20171fc <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 20171f8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 20171fc:	e037883a 	mov	sp,fp
 2017200:	dfc00117 	ldw	ra,4(sp)
 2017204:	df000017 	ldw	fp,0(sp)
 2017208:	dec00204 	addi	sp,sp,8
 201720c:	f800283a 	ret

02017210 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2017210:	defffd04 	addi	sp,sp,-12
 2017214:	dfc00215 	stw	ra,8(sp)
 2017218:	df000115 	stw	fp,4(sp)
 201721c:	df000104 	addi	fp,sp,4
 2017220:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2017224:	d0a7a317 	ldw	r2,-24948(gp)
 2017228:	10000b26 	beq	r2,zero,2017258 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 201722c:	d0a7a317 	ldw	r2,-24948(gp)
 2017230:	10bfffc4 	addi	r2,r2,-1
 2017234:	d0a7a315 	stw	r2,-24948(gp)
 2017238:	d0a7a317 	ldw	r2,-24948(gp)
 201723c:	1000071e 	bne	r2,zero,201725c <__env_unlock+0x4c>
  {
    lockid = -1;
 2017240:	00bfffc4 	movi	r2,-1
 2017244:	d0a03d15 	stw	r2,-32524(gp)
    OSSemPost( alt_envsem );
 2017248:	d0a7a417 	ldw	r2,-24944(gp)
 201724c:	1009883a 	mov	r4,r2
 2017250:	201d7740 	call	201d774 <OSSemPost>
 2017254:	00000106 	br	201725c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2017258:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 201725c:	e037883a 	mov	sp,fp
 2017260:	dfc00117 	ldw	ra,4(sp)
 2017264:	df000017 	ldw	fp,0(sp)
 2017268:	dec00204 	addi	sp,sp,8
 201726c:	f800283a 	ret

02017270 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2017270:	deffdb04 	addi	sp,sp,-148
 2017274:	dfc02415 	stw	ra,144(sp)
 2017278:	df002315 	stw	fp,140(sp)
 201727c:	df002304 	addi	fp,sp,140
 2017280:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017284:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2017288:	d0a7a743 	ldbu	r2,-24931(gp)
 201728c:	10803fcc 	andi	r2,r2,255
 2017290:	10800060 	cmpeqi	r2,r2,1
 2017294:	10003626 	beq	r2,zero,2017370 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2017298:	e0bfe204 	addi	r2,fp,-120
 201729c:	100b883a 	mov	r5,r2
 20172a0:	01003fc4 	movi	r4,255
 20172a4:	201f06c0 	call	201f06c <OSTaskQuery>
 20172a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 20172ac:	e0bffe83 	ldbu	r2,-6(fp)
 20172b0:	10803fcc 	andi	r2,r2,255
 20172b4:	1000301e 	bne	r2,zero,2017378 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 20172b8:	e0bfee83 	ldbu	r2,-70(fp)
 20172bc:	10803fcc 	andi	r2,r2,255
 20172c0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 20172c4:	d0a7a617 	ldw	r2,-24936(gp)
 20172c8:	e0fffd04 	addi	r3,fp,-12
 20172cc:	180b883a 	mov	r5,r3
 20172d0:	1009883a 	mov	r4,r2
 20172d4:	201d8840 	call	201d884 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20172d8:	0005303a 	rdctl	r2,status
 20172dc:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20172e0:	e0ffe117 	ldw	r3,-124(fp)
 20172e4:	00bfff84 	movi	r2,-2
 20172e8:	1884703a 	and	r2,r3,r2
 20172ec:	1001703a 	wrctl	status,r2
  
  return context;
 20172f0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 20172f4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 20172f8:	e0bffd0b 	ldhu	r2,-12(fp)
 20172fc:	10bfffcc 	andi	r2,r2,65535
 2017300:	10000b1e 	bne	r2,zero,2017330 <__malloc_lock+0xc0>
 2017304:	d0a03e17 	ldw	r2,-32520(gp)
 2017308:	e0ffde17 	ldw	r3,-136(fp)
 201730c:	1880081e 	bne	r3,r2,2017330 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 2017310:	d0a7a517 	ldw	r2,-24940(gp)
 2017314:	10800044 	addi	r2,r2,1
 2017318:	d0a7a515 	stw	r2,-24940(gp)
 201731c:	e0bfdd17 	ldw	r2,-140(fp)
 2017320:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017324:	e0bfdf17 	ldw	r2,-132(fp)
 2017328:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 201732c:	00000e06 	br	2017368 <__malloc_lock+0xf8>
 2017330:	e0bfdd17 	ldw	r2,-140(fp)
 2017334:	e0bfe015 	stw	r2,-128(fp)
 2017338:	e0bfe017 	ldw	r2,-128(fp)
 201733c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2017340:	d0a7a617 	ldw	r2,-24936(gp)
 2017344:	e0fffe84 	addi	r3,fp,-6
 2017348:	180d883a 	mov	r6,r3
 201734c:	000b883a 	mov	r5,zero
 2017350:	1009883a 	mov	r4,r2
 2017354:	201d3fc0 	call	201d3fc <OSSemPend>
    locks  = 1;
 2017358:	00800044 	movi	r2,1
 201735c:	d0a7a515 	stw	r2,-24940(gp)
    lockid = id;
 2017360:	e0bfde17 	ldw	r2,-136(fp)
 2017364:	d0a03e15 	stw	r2,-32520(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2017368:	0001883a 	nop
 201736c:	00000306 	br	201737c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 2017370:	0001883a 	nop
 2017374:	00000106 	br	201737c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2017378:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 201737c:	e037883a 	mov	sp,fp
 2017380:	dfc00117 	ldw	ra,4(sp)
 2017384:	df000017 	ldw	fp,0(sp)
 2017388:	dec00204 	addi	sp,sp,8
 201738c:	f800283a 	ret

02017390 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2017390:	defff804 	addi	sp,sp,-32
 2017394:	dfc00715 	stw	ra,28(sp)
 2017398:	df000615 	stw	fp,24(sp)
 201739c:	df000604 	addi	fp,sp,24
 20173a0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20173a4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 20173a8:	d0a7a743 	ldbu	r2,-24931(gp)
 20173ac:	10803fcc 	andi	r2,r2,255
 20173b0:	10800060 	cmpeqi	r2,r2,1
 20173b4:	10002326 	beq	r2,zero,2017444 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20173b8:	0005303a 	rdctl	r2,status
 20173bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20173c0:	e0fffe17 	ldw	r3,-8(fp)
 20173c4:	00bfff84 	movi	r2,-2
 20173c8:	1884703a 	and	r2,r3,r2
 20173cc:	1001703a 	wrctl	status,r2
  
  return context;
 20173d0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 20173d4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 20173d8:	d0a7a517 	ldw	r2,-24940(gp)
 20173dc:	1000051e 	bne	r2,zero,20173f4 <__malloc_unlock+0x64>
 20173e0:	e0bffa17 	ldw	r2,-24(fp)
 20173e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20173e8:	e0bffb17 	ldw	r2,-20(fp)
 20173ec:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 20173f0:	00001506 	br	2017448 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 20173f4:	d0a7a517 	ldw	r2,-24940(gp)
 20173f8:	10bfffc4 	addi	r2,r2,-1
 20173fc:	d0a7a515 	stw	r2,-24940(gp)
 2017400:	d0a7a517 	ldw	r2,-24940(gp)
 2017404:	10000a1e 	bne	r2,zero,2017430 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 2017408:	00bfffc4 	movi	r2,-1
 201740c:	d0a03e15 	stw	r2,-32520(gp)
 2017410:	e0bffa17 	ldw	r2,-24(fp)
 2017414:	e0bffc15 	stw	r2,-16(fp)
 2017418:	e0bffc17 	ldw	r2,-16(fp)
 201741c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2017420:	d0a7a617 	ldw	r2,-24936(gp)
 2017424:	1009883a 	mov	r4,r2
 2017428:	201d7740 	call	201d774 <OSSemPost>
 201742c:	00000606 	br	2017448 <__malloc_unlock+0xb8>
 2017430:	e0bffa17 	ldw	r2,-24(fp)
 2017434:	e0bffd15 	stw	r2,-12(fp)
 2017438:	e0bffd17 	ldw	r2,-12(fp)
 201743c:	1001703a 	wrctl	status,r2
 2017440:	00000106 	br	2017448 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2017444:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2017448:	e037883a 	mov	sp,fp
 201744c:	dfc00117 	ldw	ra,4(sp)
 2017450:	df000017 	ldw	fp,0(sp)
 2017454:	dec00204 	addi	sp,sp,8
 2017458:	f800283a 	ret

0201745c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 201745c:	defff704 	addi	sp,sp,-36
 2017460:	dfc00815 	stw	ra,32(sp)
 2017464:	df000715 	stw	fp,28(sp)
 2017468:	df000704 	addi	fp,sp,28
 201746c:	e13ffd15 	stw	r4,-12(fp)
 2017470:	e17ffe15 	stw	r5,-8(fp)
 2017474:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017478:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201747c:	e0bfff17 	ldw	r2,-4(fp)
 2017480:	1000021e 	bne	r2,zero,201748c <OSEventNameGet+0x30>
        return (0);
 2017484:	0005883a 	mov	r2,zero
 2017488:	00003706 	br	2017568 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 201748c:	e0bffd17 	ldw	r2,-12(fp)
 2017490:	1000051e 	bne	r2,zero,20174a8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2017494:	e0bfff17 	ldw	r2,-4(fp)
 2017498:	00c00104 	movi	r3,4
 201749c:	10c00005 	stb	r3,0(r2)
        return (0);
 20174a0:	0005883a 	mov	r2,zero
 20174a4:	00003006 	br	2017568 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20174a8:	e0bffe17 	ldw	r2,-8(fp)
 20174ac:	1000051e 	bne	r2,zero,20174c4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20174b0:	e0bfff17 	ldw	r2,-4(fp)
 20174b4:	00c00304 	movi	r3,12
 20174b8:	10c00005 	stb	r3,0(r2)
        return (0);
 20174bc:	0005883a 	mov	r2,zero
 20174c0:	00002906 	br	2017568 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20174c4:	d0a7b503 	ldbu	r2,-24876(gp)
 20174c8:	10803fcc 	andi	r2,r2,255
 20174cc:	10000526 	beq	r2,zero,20174e4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 20174d0:	e0bfff17 	ldw	r2,-4(fp)
 20174d4:	00c00444 	movi	r3,17
 20174d8:	10c00005 	stb	r3,0(r2)
        return (0);
 20174dc:	0005883a 	mov	r2,zero
 20174e0:	00002106 	br	2017568 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 20174e4:	e0bffd17 	ldw	r2,-12(fp)
 20174e8:	10800003 	ldbu	r2,0(r2)
 20174ec:	10803fcc 	andi	r2,r2,255
 20174f0:	10bfffc4 	addi	r2,r2,-1
 20174f4:	10800128 	cmpgeui	r2,r2,4
 20174f8:	10000526 	beq	r2,zero,2017510 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20174fc:	e0bfff17 	ldw	r2,-4(fp)
 2017500:	00c00044 	movi	r3,1
 2017504:	10c00005 	stb	r3,0(r2)
             return (0);
 2017508:	0005883a 	mov	r2,zero
 201750c:	00001606 	br	2017568 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2017510:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017514:	0005303a 	rdctl	r2,status
 2017518:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201751c:	e0fffb17 	ldw	r3,-20(fp)
 2017520:	00bfff84 	movi	r2,-2
 2017524:	1884703a 	and	r2,r3,r2
 2017528:	1001703a 	wrctl	status,r2
  
  return context;
 201752c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2017530:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2017534:	e0bffd17 	ldw	r2,-12(fp)
 2017538:	10800384 	addi	r2,r2,14
 201753c:	100b883a 	mov	r5,r2
 2017540:	e13ffe17 	ldw	r4,-8(fp)
 2017544:	2018ee00 	call	2018ee0 <OS_StrCopy>
 2017548:	e0bffa05 	stb	r2,-24(fp)
 201754c:	e0bff917 	ldw	r2,-28(fp)
 2017550:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017554:	e0bffc17 	ldw	r2,-16(fp)
 2017558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201755c:	e0bfff17 	ldw	r2,-4(fp)
 2017560:	10000005 	stb	zero,0(r2)
    return (len);
 2017564:	e0bffa03 	ldbu	r2,-24(fp)
}
 2017568:	e037883a 	mov	sp,fp
 201756c:	dfc00117 	ldw	ra,4(sp)
 2017570:	df000017 	ldw	fp,0(sp)
 2017574:	dec00204 	addi	sp,sp,8
 2017578:	f800283a 	ret

0201757c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 201757c:	defff604 	addi	sp,sp,-40
 2017580:	dfc00915 	stw	ra,36(sp)
 2017584:	df000815 	stw	fp,32(sp)
 2017588:	df000804 	addi	fp,sp,32
 201758c:	e13ffd15 	stw	r4,-12(fp)
 2017590:	e17ffe15 	stw	r5,-8(fp)
 2017594:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017598:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201759c:	e0bfff17 	ldw	r2,-4(fp)
 20175a0:	10004026 	beq	r2,zero,20176a4 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 20175a4:	e0bffd17 	ldw	r2,-12(fp)
 20175a8:	1000041e 	bne	r2,zero,20175bc <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 20175ac:	e0bfff17 	ldw	r2,-4(fp)
 20175b0:	00c00104 	movi	r3,4
 20175b4:	10c00005 	stb	r3,0(r2)
        return;
 20175b8:	00003b06 	br	20176a8 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20175bc:	e0bffe17 	ldw	r2,-8(fp)
 20175c0:	1000041e 	bne	r2,zero,20175d4 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20175c4:	e0bfff17 	ldw	r2,-4(fp)
 20175c8:	00c00304 	movi	r3,12
 20175cc:	10c00005 	stb	r3,0(r2)
        return;
 20175d0:	00003506 	br	20176a8 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20175d4:	d0a7b503 	ldbu	r2,-24876(gp)
 20175d8:	10803fcc 	andi	r2,r2,255
 20175dc:	10000426 	beq	r2,zero,20175f0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 20175e0:	e0bfff17 	ldw	r2,-4(fp)
 20175e4:	00c00484 	movi	r3,18
 20175e8:	10c00005 	stb	r3,0(r2)
        return;
 20175ec:	00002e06 	br	20176a8 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 20175f0:	e0bffd17 	ldw	r2,-12(fp)
 20175f4:	10800003 	ldbu	r2,0(r2)
 20175f8:	10803fcc 	andi	r2,r2,255
 20175fc:	10bfffc4 	addi	r2,r2,-1
 2017600:	10800128 	cmpgeui	r2,r2,4
 2017604:	10000426 	beq	r2,zero,2017618 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2017608:	e0bfff17 	ldw	r2,-4(fp)
 201760c:	00c00044 	movi	r3,1
 2017610:	10c00005 	stb	r3,0(r2)
             return;
 2017614:	00002406 	br	20176a8 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2017618:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201761c:	0005303a 	rdctl	r2,status
 2017620:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017624:	e0fffc17 	ldw	r3,-16(fp)
 2017628:	00bfff84 	movi	r2,-2
 201762c:	1884703a 	and	r2,r3,r2
 2017630:	1001703a 	wrctl	status,r2
  
  return context;
 2017634:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2017638:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 201763c:	e13ffe17 	ldw	r4,-8(fp)
 2017640:	2018f540 	call	2018f54 <OS_StrLen>
 2017644:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2017648:	e0bffa03 	ldbu	r2,-24(fp)
 201764c:	10800830 	cmpltui	r2,r2,32
 2017650:	1000081e 	bne	r2,zero,2017674 <OSEventNameSet+0xf8>
 2017654:	e0bff817 	ldw	r2,-32(fp)
 2017658:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201765c:	e0bff917 	ldw	r2,-28(fp)
 2017660:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2017664:	e0bfff17 	ldw	r2,-4(fp)
 2017668:	00c002c4 	movi	r3,11
 201766c:	10c00005 	stb	r3,0(r2)
        return;
 2017670:	00000d06 	br	20176a8 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2017674:	e0bffd17 	ldw	r2,-12(fp)
 2017678:	10800384 	addi	r2,r2,14
 201767c:	e17ffe17 	ldw	r5,-8(fp)
 2017680:	1009883a 	mov	r4,r2
 2017684:	2018ee00 	call	2018ee0 <OS_StrCopy>
 2017688:	e0bff817 	ldw	r2,-32(fp)
 201768c:	e0bffb15 	stw	r2,-20(fp)
 2017690:	e0bffb17 	ldw	r2,-20(fp)
 2017694:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017698:	e0bfff17 	ldw	r2,-4(fp)
 201769c:	10000005 	stb	zero,0(r2)
 20176a0:	00000106 	br	20176a8 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 20176a4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 20176a8:	e037883a 	mov	sp,fp
 20176ac:	dfc00117 	ldw	ra,4(sp)
 20176b0:	df000017 	ldw	fp,0(sp)
 20176b4:	dec00204 	addi	sp,sp,8
 20176b8:	f800283a 	ret

020176bc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 20176bc:	deffed04 	addi	sp,sp,-76
 20176c0:	dfc01215 	stw	ra,72(sp)
 20176c4:	df001115 	stw	fp,68(sp)
 20176c8:	df001104 	addi	fp,sp,68
 20176cc:	e13ffc15 	stw	r4,-16(fp)
 20176d0:	e17ffd15 	stw	r5,-12(fp)
 20176d4:	e1bffe15 	stw	r6,-8(fp)
 20176d8:	3805883a 	mov	r2,r7
 20176dc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 20176e0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 20176e4:	e0800217 	ldw	r2,8(fp)
 20176e8:	1000021e 	bne	r2,zero,20176f4 <OSEventPendMulti+0x38>
        return (0);
 20176ec:	0005883a 	mov	r2,zero
 20176f0:	00017106 	br	2017cb8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 20176f4:	e0bffc17 	ldw	r2,-16(fp)
 20176f8:	1000051e 	bne	r2,zero,2017710 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 20176fc:	e0800217 	ldw	r2,8(fp)
 2017700:	00c00104 	movi	r3,4
 2017704:	10c00005 	stb	r3,0(r2)
        return (0);
 2017708:	0005883a 	mov	r2,zero
 201770c:	00016a06 	br	2017cb8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2017710:	e0bffd17 	ldw	r2,-12(fp)
 2017714:	1000051e 	bne	r2,zero,201772c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2017718:	e0800217 	ldw	r2,8(fp)
 201771c:	00c00104 	movi	r3,4
 2017720:	10c00005 	stb	r3,0(r2)
        return (0);
 2017724:	0005883a 	mov	r2,zero
 2017728:	00016306 	br	2017cb8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 201772c:	e0bffe17 	ldw	r2,-8(fp)
 2017730:	1000051e 	bne	r2,zero,2017748 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2017734:	e0800217 	ldw	r2,8(fp)
 2017738:	00c00104 	movi	r3,4
 201773c:	10c00005 	stb	r3,0(r2)
        return (0);
 2017740:	0005883a 	mov	r2,zero
 2017744:	00015c06 	br	2017cb8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2017748:	e0bffd17 	ldw	r2,-12(fp)
 201774c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 2017750:	e0bffc17 	ldw	r2,-16(fp)
 2017754:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 2017758:	e0bfef17 	ldw	r2,-68(fp)
 201775c:	10800017 	ldw	r2,0(r2)
 2017760:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 2017764:	00001906 	br	20177cc <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2017768:	e0bff017 	ldw	r2,-64(fp)
 201776c:	10800003 	ldbu	r2,0(r2)
 2017770:	10803fcc 	andi	r2,r2,255
 2017774:	10c000a0 	cmpeqi	r3,r2,2
 2017778:	1800091e 	bne	r3,zero,20177a0 <OSEventPendMulti+0xe4>
 201777c:	10c000e0 	cmpeqi	r3,r2,3
 2017780:	1800091e 	bne	r3,zero,20177a8 <OSEventPendMulti+0xec>
 2017784:	10800060 	cmpeqi	r2,r2,1
 2017788:	1000091e 	bne	r2,zero,20177b0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 201778c:	e0800217 	ldw	r2,8(fp)
 2017790:	00c00044 	movi	r3,1
 2017794:	10c00005 	stb	r3,0(r2)
                 return (0);
 2017798:	0005883a 	mov	r2,zero
 201779c:	00014606 	br	2017cb8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 20177a0:	0001883a 	nop
 20177a4:	00000306 	br	20177b4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 20177a8:	0001883a 	nop
 20177ac:	00000106 	br	20177b4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 20177b0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 20177b4:	e0bfef17 	ldw	r2,-68(fp)
 20177b8:	10800104 	addi	r2,r2,4
 20177bc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 20177c0:	e0bfef17 	ldw	r2,-68(fp)
 20177c4:	10800017 	ldw	r2,0(r2)
 20177c8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 20177cc:	e0bff017 	ldw	r2,-64(fp)
 20177d0:	103fe51e 	bne	r2,zero,2017768 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 20177d4:	d0a7b503 	ldbu	r2,-24876(gp)
 20177d8:	10803fcc 	andi	r2,r2,255
 20177dc:	10000526 	beq	r2,zero,20177f4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 20177e0:	e0800217 	ldw	r2,8(fp)
 20177e4:	00c00084 	movi	r3,2
 20177e8:	10c00005 	stb	r3,0(r2)
        return (0);
 20177ec:	0005883a 	mov	r2,zero
 20177f0:	00013106 	br	2017cb8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 20177f4:	d0a7a703 	ldbu	r2,-24932(gp)
 20177f8:	10803fcc 	andi	r2,r2,255
 20177fc:	10000526 	beq	r2,zero,2017814 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 2017800:	e0800217 	ldw	r2,8(fp)
 2017804:	00c00344 	movi	r3,13
 2017808:	10c00005 	stb	r3,0(r2)
        return (0);
 201780c:	0005883a 	mov	r2,zero
 2017810:	00012906 	br	2017cb8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017814:	0005303a 	rdctl	r2,status
 2017818:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201781c:	e0fffb17 	ldw	r3,-20(fp)
 2017820:	00bfff84 	movi	r2,-2
 2017824:	1884703a 	and	r2,r3,r2
 2017828:	1001703a 	wrctl	status,r2
  
  return context;
 201782c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2017830:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 2017834:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2017838:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 201783c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 2017840:	e0bffc17 	ldw	r2,-16(fp)
 2017844:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2017848:	e0bfef17 	ldw	r2,-68(fp)
 201784c:	10800017 	ldw	r2,0(r2)
 2017850:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2017854:	00008106 	br	2017a5c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 2017858:	e0bff017 	ldw	r2,-64(fp)
 201785c:	10800003 	ldbu	r2,0(r2)
 2017860:	10803fcc 	andi	r2,r2,255
 2017864:	10c000a0 	cmpeqi	r3,r2,2
 2017868:	18003c1e 	bne	r3,zero,201795c <OSEventPendMulti+0x2a0>
 201786c:	10c000e0 	cmpeqi	r3,r2,3
 2017870:	1800031e 	bne	r3,zero,2017880 <OSEventPendMulti+0x1c4>
 2017874:	10800060 	cmpeqi	r2,r2,1
 2017878:	10001e1e 	bne	r2,zero,20178f4 <OSEventPendMulti+0x238>
 201787c:	00006606 	br	2017a18 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2017880:	e0bff017 	ldw	r2,-64(fp)
 2017884:	1080020b 	ldhu	r2,8(r2)
 2017888:	10bfffcc 	andi	r2,r2,65535
 201788c:	10001526 	beq	r2,zero,20178e4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2017890:	e0bff017 	ldw	r2,-64(fp)
 2017894:	1080020b 	ldhu	r2,8(r2)
 2017898:	10bfffc4 	addi	r2,r2,-1
 201789c:	1007883a 	mov	r3,r2
 20178a0:	e0bff017 	ldw	r2,-64(fp)
 20178a4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 20178a8:	e0bffd17 	ldw	r2,-12(fp)
 20178ac:	10c00104 	addi	r3,r2,4
 20178b0:	e0fffd15 	stw	r3,-12(fp)
 20178b4:	e0fff017 	ldw	r3,-64(fp)
 20178b8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 20178bc:	00800044 	movi	r2,1
 20178c0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 20178c4:	e0bffe17 	ldw	r2,-8(fp)
 20178c8:	10c00104 	addi	r3,r2,4
 20178cc:	e0fffe15 	stw	r3,-8(fp)
 20178d0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 20178d4:	e0bff18b 	ldhu	r2,-58(fp)
 20178d8:	10800044 	addi	r2,r2,1
 20178dc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 20178e0:	00005806 	br	2017a44 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 20178e4:	e0bff203 	ldbu	r2,-56(fp)
 20178e8:	10800054 	ori	r2,r2,1
 20178ec:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20178f0:	00005406 	br	2017a44 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20178f4:	e0bff017 	ldw	r2,-64(fp)
 20178f8:	10800117 	ldw	r2,4(r2)
 20178fc:	10001326 	beq	r2,zero,201794c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 2017900:	e0bffe17 	ldw	r2,-8(fp)
 2017904:	10c00104 	addi	r3,r2,4
 2017908:	e0fffe15 	stw	r3,-8(fp)
 201790c:	e0fff017 	ldw	r3,-64(fp)
 2017910:	18c00117 	ldw	r3,4(r3)
 2017914:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 2017918:	e0bff017 	ldw	r2,-64(fp)
 201791c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 2017920:	e0bffd17 	ldw	r2,-12(fp)
 2017924:	10c00104 	addi	r3,r2,4
 2017928:	e0fffd15 	stw	r3,-12(fp)
 201792c:	e0fff017 	ldw	r3,-64(fp)
 2017930:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 2017934:	00800044 	movi	r2,1
 2017938:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 201793c:	e0bff18b 	ldhu	r2,-58(fp)
 2017940:	10800044 	addi	r2,r2,1
 2017944:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2017948:	00003e06 	br	2017a44 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 201794c:	e0bff203 	ldbu	r2,-56(fp)
 2017950:	10800094 	ori	r2,r2,2
 2017954:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2017958:	00003a06 	br	2017a44 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 201795c:	e0bff017 	ldw	r2,-64(fp)
 2017960:	10800117 	ldw	r2,4(r2)
 2017964:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2017968:	e0bff517 	ldw	r2,-44(fp)
 201796c:	1080058b 	ldhu	r2,22(r2)
 2017970:	10bfffcc 	andi	r2,r2,65535
 2017974:	10002426 	beq	r2,zero,2017a08 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2017978:	e0bffe17 	ldw	r2,-8(fp)
 201797c:	10c00104 	addi	r3,r2,4
 2017980:	e0fffe15 	stw	r3,-8(fp)
 2017984:	e0fff517 	ldw	r3,-44(fp)
 2017988:	18c00417 	ldw	r3,16(r3)
 201798c:	19400104 	addi	r5,r3,4
 2017990:	e13ff517 	ldw	r4,-44(fp)
 2017994:	21400415 	stw	r5,16(r4)
 2017998:	18c00017 	ldw	r3,0(r3)
 201799c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 20179a0:	e0bff517 	ldw	r2,-44(fp)
 20179a4:	10c00417 	ldw	r3,16(r2)
 20179a8:	e0bff517 	ldw	r2,-44(fp)
 20179ac:	10800217 	ldw	r2,8(r2)
 20179b0:	1880041e 	bne	r3,r2,20179c4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 20179b4:	e0bff517 	ldw	r2,-44(fp)
 20179b8:	10c00117 	ldw	r3,4(r2)
 20179bc:	e0bff517 	ldw	r2,-44(fp)
 20179c0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 20179c4:	e0bff517 	ldw	r2,-44(fp)
 20179c8:	1080058b 	ldhu	r2,22(r2)
 20179cc:	10bfffc4 	addi	r2,r2,-1
 20179d0:	1007883a 	mov	r3,r2
 20179d4:	e0bff517 	ldw	r2,-44(fp)
 20179d8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 20179dc:	e0bffd17 	ldw	r2,-12(fp)
 20179e0:	10c00104 	addi	r3,r2,4
 20179e4:	e0fffd15 	stw	r3,-12(fp)
 20179e8:	e0fff017 	ldw	r3,-64(fp)
 20179ec:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 20179f0:	00800044 	movi	r2,1
 20179f4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20179f8:	e0bff18b 	ldhu	r2,-58(fp)
 20179fc:	10800044 	addi	r2,r2,1
 2017a00:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 2017a04:	00000f06 	br	2017a44 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 2017a08:	e0bff203 	ldbu	r2,-56(fp)
 2017a0c:	10800114 	ori	r2,r2,4
 2017a10:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2017a14:	00000b06 	br	2017a44 <OSEventPendMulti+0x388>
 2017a18:	e0bff317 	ldw	r2,-52(fp)
 2017a1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017a20:	e0bff417 	ldw	r2,-48(fp)
 2017a24:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2017a28:	e0bffd17 	ldw	r2,-12(fp)
 2017a2c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2017a30:	e0800217 	ldw	r2,8(fp)
 2017a34:	00c00044 	movi	r3,1
 2017a38:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 2017a3c:	e0bff18b 	ldhu	r2,-58(fp)
 2017a40:	00009d06 	br	2017cb8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 2017a44:	e0bfef17 	ldw	r2,-68(fp)
 2017a48:	10800104 	addi	r2,r2,4
 2017a4c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2017a50:	e0bfef17 	ldw	r2,-68(fp)
 2017a54:	10800017 	ldw	r2,0(r2)
 2017a58:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2017a5c:	e0bff017 	ldw	r2,-64(fp)
 2017a60:	103f7d1e 	bne	r2,zero,2017858 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 2017a64:	e0bff103 	ldbu	r2,-60(fp)
 2017a68:	10800058 	cmpnei	r2,r2,1
 2017a6c:	10000a1e 	bne	r2,zero,2017a98 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 2017a70:	e0bffd17 	ldw	r2,-12(fp)
 2017a74:	10000015 	stw	zero,0(r2)
 2017a78:	e0bff317 	ldw	r2,-52(fp)
 2017a7c:	e0bff615 	stw	r2,-40(fp)
 2017a80:	e0bff617 	ldw	r2,-40(fp)
 2017a84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2017a88:	e0800217 	ldw	r2,8(fp)
 2017a8c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2017a90:	e0bff18b 	ldhu	r2,-58(fp)
 2017a94:	00008806 	br	2017cb8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2017a98:	d0a7b617 	ldw	r2,-24872(gp)
 2017a9c:	d0e7b617 	ldw	r3,-24872(gp)
 2017aa0:	19000c03 	ldbu	r4,48(r3)
 2017aa4:	e0fff203 	ldbu	r3,-56(fp)
 2017aa8:	20c6b03a 	or	r3,r4,r3
 2017aac:	1809883a 	mov	r4,r3
 2017ab0:	00ffe004 	movi	r3,-128
 2017ab4:	20c6b03a 	or	r3,r4,r3
 2017ab8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2017abc:	d0a7b617 	ldw	r2,-24872(gp)
 2017ac0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 2017ac4:	d0a7b617 	ldw	r2,-24872(gp)
 2017ac8:	e0ffff0b 	ldhu	r3,-4(fp)
 2017acc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 2017ad0:	e13ffc17 	ldw	r4,-16(fp)
 2017ad4:	20185f80 	call	20185f8 <OS_EventTaskWaitMulti>
 2017ad8:	e0bff317 	ldw	r2,-52(fp)
 2017adc:	e0bff915 	stw	r2,-28(fp)
 2017ae0:	e0bff917 	ldw	r2,-28(fp)
 2017ae4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 2017ae8:	2018d9c0 	call	2018d9c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017aec:	0005303a 	rdctl	r2,status
 2017af0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017af4:	e0fff717 	ldw	r3,-36(fp)
 2017af8:	00bfff84 	movi	r2,-2
 2017afc:	1884703a 	and	r2,r3,r2
 2017b00:	1001703a 	wrctl	status,r2
  
  return context;
 2017b04:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 2017b08:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 2017b0c:	d0a7b617 	ldw	r2,-24872(gp)
 2017b10:	10800c43 	ldbu	r2,49(r2)
 2017b14:	10803fcc 	andi	r2,r2,255
 2017b18:	10000226 	beq	r2,zero,2017b24 <OSEventPendMulti+0x468>
 2017b1c:	108000a0 	cmpeqi	r2,r2,2
 2017b20:	10001826 	beq	r2,zero,2017b84 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 2017b24:	d0a7b617 	ldw	r2,-24872(gp)
 2017b28:	10800717 	ldw	r2,28(r2)
 2017b2c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2017b30:	e0bff017 	ldw	r2,-64(fp)
 2017b34:	10000b26 	beq	r2,zero,2017b64 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2017b38:	e0bffd17 	ldw	r2,-12(fp)
 2017b3c:	10c00104 	addi	r3,r2,4
 2017b40:	e0fffd15 	stw	r3,-12(fp)
 2017b44:	e0fff017 	ldw	r3,-64(fp)
 2017b48:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2017b4c:	e0bffd17 	ldw	r2,-12(fp)
 2017b50:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 2017b54:	e0bff18b 	ldhu	r2,-58(fp)
 2017b58:	10800044 	addi	r2,r2,1
 2017b5c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 2017b60:	00000d06 	br	2017b98 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 2017b64:	d0a7b617 	ldw	r2,-24872(gp)
 2017b68:	00c00044 	movi	r3,1
 2017b6c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2017b70:	d0a7b617 	ldw	r2,-24872(gp)
 2017b74:	e17ffc17 	ldw	r5,-16(fp)
 2017b78:	1009883a 	mov	r4,r2
 2017b7c:	20188000 	call	2018800 <OS_EventTaskRemoveMulti>
             }
			 break;
 2017b80:	00000506 	br	2017b98 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2017b84:	d0a7b617 	ldw	r2,-24872(gp)
 2017b88:	e17ffc17 	ldw	r5,-16(fp)
 2017b8c:	1009883a 	mov	r4,r2
 2017b90:	20188000 	call	2018800 <OS_EventTaskRemoveMulti>
             break;
 2017b94:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2017b98:	d0a7b617 	ldw	r2,-24872(gp)
 2017b9c:	10800c43 	ldbu	r2,49(r2)
 2017ba0:	10803fcc 	andi	r2,r2,255
 2017ba4:	10000326 	beq	r2,zero,2017bb4 <OSEventPendMulti+0x4f8>
 2017ba8:	108000a0 	cmpeqi	r2,r2,2
 2017bac:	1000231e 	bne	r2,zero,2017c3c <OSEventPendMulti+0x580>
 2017bb0:	00002a06 	br	2017c5c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 2017bb4:	e0bff017 	ldw	r2,-64(fp)
 2017bb8:	10800003 	ldbu	r2,0(r2)
 2017bbc:	10803fcc 	andi	r2,r2,255
 2017bc0:	0080100e 	bge	zero,r2,2017c04 <OSEventPendMulti+0x548>
 2017bc4:	10c000d0 	cmplti	r3,r2,3
 2017bc8:	1800071e 	bne	r3,zero,2017be8 <OSEventPendMulti+0x52c>
 2017bcc:	108000e0 	cmpeqi	r2,r2,3
 2017bd0:	10000c26 	beq	r2,zero,2017c04 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 2017bd4:	e0bffe17 	ldw	r2,-8(fp)
 2017bd8:	10c00104 	addi	r3,r2,4
 2017bdc:	e0fffe15 	stw	r3,-8(fp)
 2017be0:	10000015 	stw	zero,0(r2)
                      break;
 2017be4:	00001206 	br	2017c30 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 2017be8:	e0bffe17 	ldw	r2,-8(fp)
 2017bec:	10c00104 	addi	r3,r2,4
 2017bf0:	e0fffe15 	stw	r3,-8(fp)
 2017bf4:	d0e7b617 	ldw	r3,-24872(gp)
 2017bf8:	18c00917 	ldw	r3,36(r3)
 2017bfc:	10c00015 	stw	r3,0(r2)
                      break;
 2017c00:	00000b06 	br	2017c30 <OSEventPendMulti+0x574>
 2017c04:	e0bff317 	ldw	r2,-52(fp)
 2017c08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017c0c:	e0bff817 	ldw	r2,-32(fp)
 2017c10:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 2017c14:	e0bffd17 	ldw	r2,-12(fp)
 2017c18:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 2017c1c:	e0800217 	ldw	r2,8(fp)
 2017c20:	00c00044 	movi	r3,1
 2017c24:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 2017c28:	e0bff18b 	ldhu	r2,-58(fp)
 2017c2c:	00002206 	br	2017cb8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 2017c30:	e0800217 	ldw	r2,8(fp)
 2017c34:	10000005 	stb	zero,0(r2)
             break;
 2017c38:	00001006 	br	2017c7c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2017c3c:	e0bffe17 	ldw	r2,-8(fp)
 2017c40:	10c00104 	addi	r3,r2,4
 2017c44:	e0fffe15 	stw	r3,-8(fp)
 2017c48:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2017c4c:	e0800217 	ldw	r2,8(fp)
 2017c50:	00c00384 	movi	r3,14
 2017c54:	10c00005 	stb	r3,0(r2)
             break;
 2017c58:	00000806 	br	2017c7c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2017c5c:	e0bffe17 	ldw	r2,-8(fp)
 2017c60:	10c00104 	addi	r3,r2,4
 2017c64:	e0fffe15 	stw	r3,-8(fp)
 2017c68:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2017c6c:	e0800217 	ldw	r2,8(fp)
 2017c70:	00c00284 	movi	r3,10
 2017c74:	10c00005 	stb	r3,0(r2)
             break;
 2017c78:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2017c7c:	d0a7b617 	ldw	r2,-24872(gp)
 2017c80:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2017c84:	d0a7b617 	ldw	r2,-24872(gp)
 2017c88:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2017c8c:	d0a7b617 	ldw	r2,-24872(gp)
 2017c90:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2017c94:	d0a7b617 	ldw	r2,-24872(gp)
 2017c98:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2017c9c:	d0a7b617 	ldw	r2,-24872(gp)
 2017ca0:	10000915 	stw	zero,36(r2)
 2017ca4:	e0bff317 	ldw	r2,-52(fp)
 2017ca8:	e0bffa15 	stw	r2,-24(fp)
 2017cac:	e0bffa17 	ldw	r2,-24(fp)
 2017cb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2017cb4:	e0bff18b 	ldhu	r2,-58(fp)
}
 2017cb8:	e037883a 	mov	sp,fp
 2017cbc:	dfc00117 	ldw	ra,4(sp)
 2017cc0:	df000017 	ldw	fp,0(sp)
 2017cc4:	dec00204 	addi	sp,sp,8
 2017cc8:	f800283a 	ret

02017ccc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 2017ccc:	defffe04 	addi	sp,sp,-8
 2017cd0:	dfc00115 	stw	ra,4(sp)
 2017cd4:	df000015 	stw	fp,0(sp)
 2017cd8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 2017cdc:	202170c0 	call	202170c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 2017ce0:	2018a480 	call	2018a48 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 2017ce4:	2018a900 	call	2018a90 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 2017ce8:	2018bfc0 	call	2018bfc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 2017cec:	20189680 	call	2018968 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 2017cf0:	201aa9c0 	call	201aa9c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 2017cf4:	201be640 	call	201be64 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 2017cf8:	201cf8c0 	call	201cf8c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 2017cfc:	2018afc0 	call	2018afc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 2017d00:	2018b7c0 	call	2018b7c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 2017d04:	202172c0 	call	202172c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 2017d08:	20194700 	call	2019470 <OSDebugInit>
#endif
}
 2017d0c:	0001883a 	nop
 2017d10:	e037883a 	mov	sp,fp
 2017d14:	dfc00117 	ldw	ra,4(sp)
 2017d18:	df000017 	ldw	fp,0(sp)
 2017d1c:	dec00204 	addi	sp,sp,8
 2017d20:	f800283a 	ret

02017d24 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 2017d24:	deffff04 	addi	sp,sp,-4
 2017d28:	df000015 	stw	fp,0(sp)
 2017d2c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 2017d30:	d0a7a743 	ldbu	r2,-24931(gp)
 2017d34:	10803fcc 	andi	r2,r2,255
 2017d38:	10800058 	cmpnei	r2,r2,1
 2017d3c:	1000071e 	bne	r2,zero,2017d5c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 2017d40:	d0a7b503 	ldbu	r2,-24876(gp)
 2017d44:	10803fcc 	andi	r2,r2,255
 2017d48:	10803fe0 	cmpeqi	r2,r2,255
 2017d4c:	1000031e 	bne	r2,zero,2017d5c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2017d50:	d0a7b503 	ldbu	r2,-24876(gp)
 2017d54:	10800044 	addi	r2,r2,1
 2017d58:	d0a7b505 	stb	r2,-24876(gp)
        }
    }
}
 2017d5c:	0001883a 	nop
 2017d60:	e037883a 	mov	sp,fp
 2017d64:	df000017 	ldw	fp,0(sp)
 2017d68:	dec00104 	addi	sp,sp,4
 2017d6c:	f800283a 	ret

02017d70 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2017d70:	defffb04 	addi	sp,sp,-20
 2017d74:	dfc00415 	stw	ra,16(sp)
 2017d78:	df000315 	stw	fp,12(sp)
 2017d7c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017d80:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2017d84:	d0a7a743 	ldbu	r2,-24931(gp)
 2017d88:	10803fcc 	andi	r2,r2,255
 2017d8c:	10800058 	cmpnei	r2,r2,1
 2017d90:	10002f1e 	bne	r2,zero,2017e50 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017d94:	0005303a 	rdctl	r2,status
 2017d98:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017d9c:	e0ffff17 	ldw	r3,-4(fp)
 2017da0:	00bfff84 	movi	r2,-2
 2017da4:	1884703a 	and	r2,r3,r2
 2017da8:	1001703a 	wrctl	status,r2
  
  return context;
 2017dac:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2017db0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2017db4:	d0a7b503 	ldbu	r2,-24876(gp)
 2017db8:	10803fcc 	andi	r2,r2,255
 2017dbc:	10000326 	beq	r2,zero,2017dcc <OSIntExit+0x5c>
            OSIntNesting--;
 2017dc0:	d0a7b503 	ldbu	r2,-24876(gp)
 2017dc4:	10bfffc4 	addi	r2,r2,-1
 2017dc8:	d0a7b505 	stb	r2,-24876(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 2017dcc:	d0a7b503 	ldbu	r2,-24876(gp)
 2017dd0:	10803fcc 	andi	r2,r2,255
 2017dd4:	10001a1e 	bne	r2,zero,2017e40 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 2017dd8:	d0a7a703 	ldbu	r2,-24932(gp)
 2017ddc:	10803fcc 	andi	r2,r2,255
 2017de0:	1000171e 	bne	r2,zero,2017e40 <OSIntExit+0xd0>
                OS_SchedNew();
 2017de4:	2018e6c0 	call	2018e6c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 2017de8:	d0e7a903 	ldbu	r3,-24924(gp)
 2017dec:	d0a7a943 	ldbu	r2,-24923(gp)
 2017df0:	18c03fcc 	andi	r3,r3,255
 2017df4:	10803fcc 	andi	r2,r2,255
 2017df8:	18801126 	beq	r3,r2,2017e40 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 2017dfc:	d0a7a903 	ldbu	r2,-24924(gp)
 2017e00:	10c03fcc 	andi	r3,r2,255
 2017e04:	008080f4 	movhi	r2,515
 2017e08:	1085f004 	addi	r2,r2,6080
 2017e0c:	18c7883a 	add	r3,r3,r3
 2017e10:	18c7883a 	add	r3,r3,r3
 2017e14:	10c5883a 	add	r2,r2,r3
 2017e18:	10800017 	ldw	r2,0(r2)
 2017e1c:	d0a7b115 	stw	r2,-24892(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 2017e20:	d0a7b117 	ldw	r2,-24892(gp)
 2017e24:	10c00e17 	ldw	r3,56(r2)
 2017e28:	18c00044 	addi	r3,r3,1
 2017e2c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2017e30:	d0a7ac17 	ldw	r2,-24912(gp)
 2017e34:	10800044 	addi	r2,r2,1
 2017e38:	d0a7ac15 	stw	r2,-24912(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2017e3c:	20214380 	call	2021438 <OSCtxSw>
 2017e40:	e0bffd17 	ldw	r2,-12(fp)
 2017e44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017e48:	e0bffe17 	ldw	r2,-8(fp)
 2017e4c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2017e50:	0001883a 	nop
 2017e54:	e037883a 	mov	sp,fp
 2017e58:	dfc00117 	ldw	ra,4(sp)
 2017e5c:	df000017 	ldw	fp,0(sp)
 2017e60:	dec00204 	addi	sp,sp,8
 2017e64:	f800283a 	ret

02017e68 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2017e68:	defffc04 	addi	sp,sp,-16
 2017e6c:	df000315 	stw	fp,12(sp)
 2017e70:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017e74:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2017e78:	d0a7a743 	ldbu	r2,-24931(gp)
 2017e7c:	10803fcc 	andi	r2,r2,255
 2017e80:	10800058 	cmpnei	r2,r2,1
 2017e84:	1000161e 	bne	r2,zero,2017ee0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017e88:	0005303a 	rdctl	r2,status
 2017e8c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e90:	e0ffff17 	ldw	r3,-4(fp)
 2017e94:	00bfff84 	movi	r2,-2
 2017e98:	1884703a 	and	r2,r3,r2
 2017e9c:	1001703a 	wrctl	status,r2
  
  return context;
 2017ea0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2017ea4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2017ea8:	d0a7b503 	ldbu	r2,-24876(gp)
 2017eac:	10803fcc 	andi	r2,r2,255
 2017eb0:	1000071e 	bne	r2,zero,2017ed0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2017eb4:	d0a7a703 	ldbu	r2,-24932(gp)
 2017eb8:	10803fcc 	andi	r2,r2,255
 2017ebc:	10803fe0 	cmpeqi	r2,r2,255
 2017ec0:	1000031e 	bne	r2,zero,2017ed0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2017ec4:	d0a7a703 	ldbu	r2,-24932(gp)
 2017ec8:	10800044 	addi	r2,r2,1
 2017ecc:	d0a7a705 	stb	r2,-24932(gp)
 2017ed0:	e0bffd17 	ldw	r2,-12(fp)
 2017ed4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017ed8:	e0bffe17 	ldw	r2,-8(fp)
 2017edc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2017ee0:	0001883a 	nop
 2017ee4:	e037883a 	mov	sp,fp
 2017ee8:	df000017 	ldw	fp,0(sp)
 2017eec:	dec00104 	addi	sp,sp,4
 2017ef0:	f800283a 	ret

02017ef4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 2017ef4:	defff804 	addi	sp,sp,-32
 2017ef8:	dfc00715 	stw	ra,28(sp)
 2017efc:	df000615 	stw	fp,24(sp)
 2017f00:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017f04:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 2017f08:	d0a7a743 	ldbu	r2,-24931(gp)
 2017f0c:	10803fcc 	andi	r2,r2,255
 2017f10:	10800058 	cmpnei	r2,r2,1
 2017f14:	1000281e 	bne	r2,zero,2017fb8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017f18:	0005303a 	rdctl	r2,status
 2017f1c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017f20:	e0ffff17 	ldw	r3,-4(fp)
 2017f24:	00bfff84 	movi	r2,-2
 2017f28:	1884703a 	and	r2,r3,r2
 2017f2c:	1001703a 	wrctl	status,r2
  
  return context;
 2017f30:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2017f34:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2017f38:	d0a7a703 	ldbu	r2,-24932(gp)
 2017f3c:	10803fcc 	andi	r2,r2,255
 2017f40:	10001926 	beq	r2,zero,2017fa8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2017f44:	d0a7a703 	ldbu	r2,-24932(gp)
 2017f48:	10bfffc4 	addi	r2,r2,-1
 2017f4c:	d0a7a705 	stb	r2,-24932(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 2017f50:	d0a7a703 	ldbu	r2,-24932(gp)
 2017f54:	10803fcc 	andi	r2,r2,255
 2017f58:	10000e1e 	bne	r2,zero,2017f94 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2017f5c:	d0a7b503 	ldbu	r2,-24876(gp)
 2017f60:	10803fcc 	andi	r2,r2,255
 2017f64:	1000061e 	bne	r2,zero,2017f80 <OSSchedUnlock+0x8c>
 2017f68:	e0bffa17 	ldw	r2,-24(fp)
 2017f6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017f70:	e0bffb17 	ldw	r2,-20(fp)
 2017f74:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2017f78:	2018d9c0 	call	2018d9c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2017f7c:	00000e06 	br	2017fb8 <OSSchedUnlock+0xc4>
 2017f80:	e0bffa17 	ldw	r2,-24(fp)
 2017f84:	e0bffc15 	stw	r2,-16(fp)
 2017f88:	e0bffc17 	ldw	r2,-16(fp)
 2017f8c:	1001703a 	wrctl	status,r2
 2017f90:	00000906 	br	2017fb8 <OSSchedUnlock+0xc4>
 2017f94:	e0bffa17 	ldw	r2,-24(fp)
 2017f98:	e0bffd15 	stw	r2,-12(fp)
 2017f9c:	e0bffd17 	ldw	r2,-12(fp)
 2017fa0:	1001703a 	wrctl	status,r2
 2017fa4:	00000406 	br	2017fb8 <OSSchedUnlock+0xc4>
 2017fa8:	e0bffa17 	ldw	r2,-24(fp)
 2017fac:	e0bffe15 	stw	r2,-8(fp)
 2017fb0:	e0bffe17 	ldw	r2,-8(fp)
 2017fb4:	1001703a 	wrctl	status,r2
 2017fb8:	0001883a 	nop
 2017fbc:	e037883a 	mov	sp,fp
 2017fc0:	dfc00117 	ldw	ra,4(sp)
 2017fc4:	df000017 	ldw	fp,0(sp)
 2017fc8:	dec00204 	addi	sp,sp,8
 2017fcc:	f800283a 	ret

02017fd0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2017fd0:	defffe04 	addi	sp,sp,-8
 2017fd4:	dfc00115 	stw	ra,4(sp)
 2017fd8:	df000015 	stw	fp,0(sp)
 2017fdc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 2017fe0:	d0a7a743 	ldbu	r2,-24931(gp)
 2017fe4:	10803fcc 	andi	r2,r2,255
 2017fe8:	10000f1e 	bne	r2,zero,2018028 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 2017fec:	2018e6c0 	call	2018e6c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 2017ff0:	d0a7a903 	ldbu	r2,-24924(gp)
 2017ff4:	d0a7a945 	stb	r2,-24923(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 2017ff8:	d0a7a903 	ldbu	r2,-24924(gp)
 2017ffc:	10c03fcc 	andi	r3,r2,255
 2018000:	008080f4 	movhi	r2,515
 2018004:	1085f004 	addi	r2,r2,6080
 2018008:	18c7883a 	add	r3,r3,r3
 201800c:	18c7883a 	add	r3,r3,r3
 2018010:	10c5883a 	add	r2,r2,r3
 2018014:	10800017 	ldw	r2,0(r2)
 2018018:	d0a7b115 	stw	r2,-24892(gp)
        OSTCBCur      = OSTCBHighRdy;
 201801c:	d0a7b117 	ldw	r2,-24892(gp)
 2018020:	d0a7b615 	stw	r2,-24872(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2018024:	20214c40 	call	20214c4 <OSStartHighRdy>
    }
}
 2018028:	0001883a 	nop
 201802c:	e037883a 	mov	sp,fp
 2018030:	dfc00117 	ldw	ra,4(sp)
 2018034:	df000017 	ldw	fp,0(sp)
 2018038:	dec00204 	addi	sp,sp,8
 201803c:	f800283a 	ret

02018040 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2018040:	defff904 	addi	sp,sp,-28
 2018044:	dfc00615 	stw	ra,24(sp)
 2018048:	df000515 	stw	fp,20(sp)
 201804c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018050:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2018054:	01000084 	movi	r4,2
 2018058:	201f2000 	call	201f200 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201805c:	0005303a 	rdctl	r2,status
 2018060:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018064:	e0fffc17 	ldw	r3,-16(fp)
 2018068:	00bfff84 	movi	r2,-2
 201806c:	1884703a 	and	r2,r3,r2
 2018070:	1001703a 	wrctl	status,r2
  
  return context;
 2018074:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2018078:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 201807c:	d027a815 	stw	zero,-24928(gp)
 2018080:	e0bffb17 	ldw	r2,-20(fp)
 2018084:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018088:	e0bffd17 	ldw	r2,-12(fp)
 201808c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2018090:	01001904 	movi	r4,100
 2018094:	201f2000 	call	201f200 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018098:	0005303a 	rdctl	r2,status
 201809c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20180a0:	e0fffe17 	ldw	r3,-8(fp)
 20180a4:	00bfff84 	movi	r2,-2
 20180a8:	1884703a 	and	r2,r3,r2
 20180ac:	1001703a 	wrctl	status,r2
  
  return context;
 20180b0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 20180b4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 20180b8:	d0a7a817 	ldw	r2,-24928(gp)
 20180bc:	d0a7ad15 	stw	r2,-24908(gp)
    OSStatRdy    = OS_TRUE;
 20180c0:	00800044 	movi	r2,1
 20180c4:	d0a7b905 	stb	r2,-24860(gp)
 20180c8:	e0bffb17 	ldw	r2,-20(fp)
 20180cc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20180d0:	e0bfff17 	ldw	r2,-4(fp)
 20180d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 20180d8:	0001883a 	nop
 20180dc:	e037883a 	mov	sp,fp
 20180e0:	dfc00117 	ldw	ra,4(sp)
 20180e4:	df000017 	ldw	fp,0(sp)
 20180e8:	dec00204 	addi	sp,sp,8
 20180ec:	f800283a 	ret

020180f0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 20180f0:	defff704 	addi	sp,sp,-36
 20180f4:	dfc00815 	stw	ra,32(sp)
 20180f8:	df000715 	stw	fp,28(sp)
 20180fc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2018100:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2018104:	20216ec0 	call	20216ec <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018108:	0005303a 	rdctl	r2,status
 201810c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018110:	e0fffd17 	ldw	r3,-12(fp)
 2018114:	00bfff84 	movi	r2,-2
 2018118:	1884703a 	and	r2,r3,r2
 201811c:	1001703a 	wrctl	status,r2
  
  return context;
 2018120:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2018124:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2018128:	d0a7b717 	ldw	r2,-24868(gp)
 201812c:	10800044 	addi	r2,r2,1
 2018130:	d0a7b715 	stw	r2,-24868(gp)
 2018134:	e0bffb17 	ldw	r2,-20(fp)
 2018138:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201813c:	e0bfff17 	ldw	r2,-4(fp)
 2018140:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2018144:	d0a7a743 	ldbu	r2,-24931(gp)
 2018148:	10803fcc 	andi	r2,r2,255
 201814c:	10800058 	cmpnei	r2,r2,1
 2018150:	10006a1e 	bne	r2,zero,20182fc <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2018154:	d0a7ab03 	ldbu	r2,-24916(gp)
 2018158:	10803fcc 	andi	r2,r2,255
 201815c:	10c00060 	cmpeqi	r3,r2,1
 2018160:	1800061e 	bne	r3,zero,201817c <OSTimeTick+0x8c>
 2018164:	10c000a0 	cmpeqi	r3,r2,2
 2018168:	1800061e 	bne	r3,zero,2018184 <OSTimeTick+0x94>
 201816c:	10000a1e 	bne	r2,zero,2018198 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2018170:	00800044 	movi	r2,1
 2018174:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2018178:	00000b06 	br	20181a8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 201817c:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2018180:	00000906 	br	20181a8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2018184:	00800044 	movi	r2,1
 2018188:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 201818c:	00800044 	movi	r2,1
 2018190:	d0a7ab05 	stb	r2,-24916(gp)
                 break;
 2018194:	00000406 	br	20181a8 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2018198:	00800044 	movi	r2,1
 201819c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 20181a0:	d027ab05 	stb	zero,-24916(gp)
                 break;
 20181a4:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 20181a8:	e0bffa03 	ldbu	r2,-24(fp)
 20181ac:	10005226 	beq	r2,zero,20182f8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 20181b0:	d0a7aa17 	ldw	r2,-24920(gp)
 20181b4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 20181b8:	00004906 	br	20182e0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20181bc:	0005303a 	rdctl	r2,status
 20181c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20181c4:	e0fffc17 	ldw	r3,-16(fp)
 20181c8:	00bfff84 	movi	r2,-2
 20181cc:	1884703a 	and	r2,r3,r2
 20181d0:	1001703a 	wrctl	status,r2
  
  return context;
 20181d4:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 20181d8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 20181dc:	e0bff917 	ldw	r2,-28(fp)
 20181e0:	10800b8b 	ldhu	r2,46(r2)
 20181e4:	10bfffcc 	andi	r2,r2,65535
 20181e8:	10003626 	beq	r2,zero,20182c4 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 20181ec:	e0bff917 	ldw	r2,-28(fp)
 20181f0:	10800b8b 	ldhu	r2,46(r2)
 20181f4:	10bfffc4 	addi	r2,r2,-1
 20181f8:	1007883a 	mov	r3,r2
 20181fc:	e0bff917 	ldw	r2,-28(fp)
 2018200:	10c00b8d 	sth	r3,46(r2)
 2018204:	e0bff917 	ldw	r2,-28(fp)
 2018208:	10800b8b 	ldhu	r2,46(r2)
 201820c:	10bfffcc 	andi	r2,r2,65535
 2018210:	10002c1e 	bne	r2,zero,20182c4 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2018214:	e0bff917 	ldw	r2,-28(fp)
 2018218:	10800c03 	ldbu	r2,48(r2)
 201821c:	10803fcc 	andi	r2,r2,255
 2018220:	10800dcc 	andi	r2,r2,55
 2018224:	10000b26 	beq	r2,zero,2018254 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2018228:	e0bff917 	ldw	r2,-28(fp)
 201822c:	10c00c03 	ldbu	r3,48(r2)
 2018230:	00bff204 	movi	r2,-56
 2018234:	1884703a 	and	r2,r3,r2
 2018238:	1007883a 	mov	r3,r2
 201823c:	e0bff917 	ldw	r2,-28(fp)
 2018240:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2018244:	e0bff917 	ldw	r2,-28(fp)
 2018248:	00c00044 	movi	r3,1
 201824c:	10c00c45 	stb	r3,49(r2)
 2018250:	00000206 	br	201825c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2018254:	e0bff917 	ldw	r2,-28(fp)
 2018258:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 201825c:	e0bff917 	ldw	r2,-28(fp)
 2018260:	10800c03 	ldbu	r2,48(r2)
 2018264:	10803fcc 	andi	r2,r2,255
 2018268:	1080020c 	andi	r2,r2,8
 201826c:	1000151e 	bne	r2,zero,20182c4 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2018270:	e0bff917 	ldw	r2,-28(fp)
 2018274:	10c00d83 	ldbu	r3,54(r2)
 2018278:	d0a7b303 	ldbu	r2,-24884(gp)
 201827c:	1884b03a 	or	r2,r3,r2
 2018280:	d0a7b305 	stb	r2,-24884(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2018284:	e0bff917 	ldw	r2,-28(fp)
 2018288:	10800d03 	ldbu	r2,52(r2)
 201828c:	10c03fcc 	andi	r3,r2,255
 2018290:	e0bff917 	ldw	r2,-28(fp)
 2018294:	10800d03 	ldbu	r2,52(r2)
 2018298:	11003fcc 	andi	r4,r2,255
 201829c:	d0a7b344 	addi	r2,gp,-24883
 20182a0:	2085883a 	add	r2,r4,r2
 20182a4:	11000003 	ldbu	r4,0(r2)
 20182a8:	e0bff917 	ldw	r2,-28(fp)
 20182ac:	10800d43 	ldbu	r2,53(r2)
 20182b0:	2084b03a 	or	r2,r4,r2
 20182b4:	1009883a 	mov	r4,r2
 20182b8:	d0a7b344 	addi	r2,gp,-24883
 20182bc:	1885883a 	add	r2,r3,r2
 20182c0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 20182c4:	e0bff917 	ldw	r2,-28(fp)
 20182c8:	10800517 	ldw	r2,20(r2)
 20182cc:	e0bff915 	stw	r2,-28(fp)
 20182d0:	e0bffb17 	ldw	r2,-20(fp)
 20182d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20182d8:	e0bffe17 	ldw	r2,-8(fp)
 20182dc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 20182e0:	e0bff917 	ldw	r2,-28(fp)
 20182e4:	10800c83 	ldbu	r2,50(r2)
 20182e8:	10803fcc 	andi	r2,r2,255
 20182ec:	10800518 	cmpnei	r2,r2,20
 20182f0:	103fb21e 	bne	r2,zero,20181bc <OSTimeTick+0xcc>
 20182f4:	00000106 	br	20182fc <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 20182f8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 20182fc:	e037883a 	mov	sp,fp
 2018300:	dfc00117 	ldw	ra,4(sp)
 2018304:	df000017 	ldw	fp,0(sp)
 2018308:	dec00204 	addi	sp,sp,8
 201830c:	f800283a 	ret

02018310 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2018310:	deffff04 	addi	sp,sp,-4
 2018314:	df000015 	stw	fp,0(sp)
 2018318:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 201831c:	00804784 	movi	r2,286
}
 2018320:	e037883a 	mov	sp,fp
 2018324:	df000017 	ldw	fp,0(sp)
 2018328:	dec00104 	addi	sp,sp,4
 201832c:	f800283a 	ret

02018330 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2018330:	deffff04 	addi	sp,sp,-4
 2018334:	df000015 	stw	fp,0(sp)
 2018338:	d839883a 	mov	fp,sp
}
 201833c:	0001883a 	nop
 2018340:	e037883a 	mov	sp,fp
 2018344:	df000017 	ldw	fp,0(sp)
 2018348:	dec00104 	addi	sp,sp,4
 201834c:	f800283a 	ret

02018350 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2018350:	defff804 	addi	sp,sp,-32
 2018354:	dfc00715 	stw	ra,28(sp)
 2018358:	df000615 	stw	fp,24(sp)
 201835c:	df000604 	addi	fp,sp,24
 2018360:	e13ffc15 	stw	r4,-16(fp)
 2018364:	e17ffd15 	stw	r5,-12(fp)
 2018368:	3007883a 	mov	r3,r6
 201836c:	3805883a 	mov	r2,r7
 2018370:	e0fffe05 	stb	r3,-8(fp)
 2018374:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2018378:	e0bffc17 	ldw	r2,-16(fp)
 201837c:	10800283 	ldbu	r2,10(r2)
 2018380:	10c03fcc 	andi	r3,r2,255
 2018384:	008080b4 	movhi	r2,514
 2018388:	108a9904 	addi	r2,r2,10852
 201838c:	10c5883a 	add	r2,r2,r3
 2018390:	10800003 	ldbu	r2,0(r2)
 2018394:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2018398:	e0bffa03 	ldbu	r2,-24(fp)
 201839c:	e0fffc17 	ldw	r3,-16(fp)
 20183a0:	1885883a 	add	r2,r3,r2
 20183a4:	108002c4 	addi	r2,r2,11
 20183a8:	10800003 	ldbu	r2,0(r2)
 20183ac:	10c03fcc 	andi	r3,r2,255
 20183b0:	008080b4 	movhi	r2,514
 20183b4:	108a9904 	addi	r2,r2,10852
 20183b8:	10c5883a 	add	r2,r2,r3
 20183bc:	10800003 	ldbu	r2,0(r2)
 20183c0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 20183c4:	e0bffa03 	ldbu	r2,-24(fp)
 20183c8:	100490fa 	slli	r2,r2,3
 20183cc:	1007883a 	mov	r3,r2
 20183d0:	e0bffa43 	ldbu	r2,-23(fp)
 20183d4:	1885883a 	add	r2,r3,r2
 20183d8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 20183dc:	e0fffa83 	ldbu	r3,-22(fp)
 20183e0:	008080f4 	movhi	r2,515
 20183e4:	1085f004 	addi	r2,r2,6080
 20183e8:	18c7883a 	add	r3,r3,r3
 20183ec:	18c7883a 	add	r3,r3,r3
 20183f0:	10c5883a 	add	r2,r2,r3
 20183f4:	10800017 	ldw	r2,0(r2)
 20183f8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 20183fc:	e0bffb17 	ldw	r2,-20(fp)
 2018400:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2018404:	e0bffb17 	ldw	r2,-20(fp)
 2018408:	e0fffd17 	ldw	r3,-12(fp)
 201840c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2018410:	e0bffb17 	ldw	r2,-20(fp)
 2018414:	10800c03 	ldbu	r2,48(r2)
 2018418:	1007883a 	mov	r3,r2
 201841c:	e0bffe03 	ldbu	r2,-8(fp)
 2018420:	0084303a 	nor	r2,zero,r2
 2018424:	1884703a 	and	r2,r3,r2
 2018428:	1007883a 	mov	r3,r2
 201842c:	e0bffb17 	ldw	r2,-20(fp)
 2018430:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2018434:	e0bffb17 	ldw	r2,-20(fp)
 2018438:	e0ffff03 	ldbu	r3,-4(fp)
 201843c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2018440:	e0bffb17 	ldw	r2,-20(fp)
 2018444:	10800c03 	ldbu	r2,48(r2)
 2018448:	10803fcc 	andi	r2,r2,255
 201844c:	1080020c 	andi	r2,r2,8
 2018450:	1000111e 	bne	r2,zero,2018498 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2018454:	e0bffb17 	ldw	r2,-20(fp)
 2018458:	10c00d83 	ldbu	r3,54(r2)
 201845c:	d0a7b303 	ldbu	r2,-24884(gp)
 2018460:	1884b03a 	or	r2,r3,r2
 2018464:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2018468:	e0fffa03 	ldbu	r3,-24(fp)
 201846c:	e13ffa03 	ldbu	r4,-24(fp)
 2018470:	d0a7b344 	addi	r2,gp,-24883
 2018474:	2085883a 	add	r2,r4,r2
 2018478:	11000003 	ldbu	r4,0(r2)
 201847c:	e0bffb17 	ldw	r2,-20(fp)
 2018480:	10800d43 	ldbu	r2,53(r2)
 2018484:	2084b03a 	or	r2,r4,r2
 2018488:	1009883a 	mov	r4,r2
 201848c:	d0a7b344 	addi	r2,gp,-24883
 2018490:	1885883a 	add	r2,r3,r2
 2018494:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2018498:	e17ffc17 	ldw	r5,-16(fp)
 201849c:	e13ffb17 	ldw	r4,-20(fp)
 20184a0:	20187480 	call	2018748 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 20184a4:	e0bffb17 	ldw	r2,-20(fp)
 20184a8:	10800817 	ldw	r2,32(r2)
 20184ac:	10000826 	beq	r2,zero,20184d0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 20184b0:	e0bffb17 	ldw	r2,-20(fp)
 20184b4:	10800817 	ldw	r2,32(r2)
 20184b8:	100b883a 	mov	r5,r2
 20184bc:	e13ffb17 	ldw	r4,-20(fp)
 20184c0:	20188000 	call	2018800 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 20184c4:	e0bffb17 	ldw	r2,-20(fp)
 20184c8:	e0fffc17 	ldw	r3,-16(fp)
 20184cc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 20184d0:	e0bffa83 	ldbu	r2,-22(fp)
}
 20184d4:	e037883a 	mov	sp,fp
 20184d8:	dfc00117 	ldw	ra,4(sp)
 20184dc:	df000017 	ldw	fp,0(sp)
 20184e0:	dec00204 	addi	sp,sp,8
 20184e4:	f800283a 	ret

020184e8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 20184e8:	defffd04 	addi	sp,sp,-12
 20184ec:	df000215 	stw	fp,8(sp)
 20184f0:	df000204 	addi	fp,sp,8
 20184f4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 20184f8:	d0a7b617 	ldw	r2,-24872(gp)
 20184fc:	e0ffff17 	ldw	r3,-4(fp)
 2018500:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2018504:	d0a7b617 	ldw	r2,-24872(gp)
 2018508:	10800d03 	ldbu	r2,52(r2)
 201850c:	10803fcc 	andi	r2,r2,255
 2018510:	d0e7b617 	ldw	r3,-24872(gp)
 2018514:	18c00d03 	ldbu	r3,52(r3)
 2018518:	18c03fcc 	andi	r3,r3,255
 201851c:	e13fff17 	ldw	r4,-4(fp)
 2018520:	20c7883a 	add	r3,r4,r3
 2018524:	18c002c4 	addi	r3,r3,11
 2018528:	19000003 	ldbu	r4,0(r3)
 201852c:	d0e7b617 	ldw	r3,-24872(gp)
 2018530:	18c00d43 	ldbu	r3,53(r3)
 2018534:	20c6b03a 	or	r3,r4,r3
 2018538:	1809883a 	mov	r4,r3
 201853c:	e0ffff17 	ldw	r3,-4(fp)
 2018540:	1885883a 	add	r2,r3,r2
 2018544:	108002c4 	addi	r2,r2,11
 2018548:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 201854c:	e0bfff17 	ldw	r2,-4(fp)
 2018550:	10c00283 	ldbu	r3,10(r2)
 2018554:	d0a7b617 	ldw	r2,-24872(gp)
 2018558:	10800d83 	ldbu	r2,54(r2)
 201855c:	1884b03a 	or	r2,r3,r2
 2018560:	1007883a 	mov	r3,r2
 2018564:	e0bfff17 	ldw	r2,-4(fp)
 2018568:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 201856c:	d0a7b617 	ldw	r2,-24872(gp)
 2018570:	10800d03 	ldbu	r2,52(r2)
 2018574:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2018578:	e0fffe03 	ldbu	r3,-8(fp)
 201857c:	e13ffe03 	ldbu	r4,-8(fp)
 2018580:	d0a7b344 	addi	r2,gp,-24883
 2018584:	2085883a 	add	r2,r4,r2
 2018588:	10800003 	ldbu	r2,0(r2)
 201858c:	1009883a 	mov	r4,r2
 2018590:	d0a7b617 	ldw	r2,-24872(gp)
 2018594:	10800d43 	ldbu	r2,53(r2)
 2018598:	0084303a 	nor	r2,zero,r2
 201859c:	2084703a 	and	r2,r4,r2
 20185a0:	1009883a 	mov	r4,r2
 20185a4:	d0a7b344 	addi	r2,gp,-24883
 20185a8:	1885883a 	add	r2,r3,r2
 20185ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 20185b0:	e0fffe03 	ldbu	r3,-8(fp)
 20185b4:	d0a7b344 	addi	r2,gp,-24883
 20185b8:	1885883a 	add	r2,r3,r2
 20185bc:	10800003 	ldbu	r2,0(r2)
 20185c0:	10803fcc 	andi	r2,r2,255
 20185c4:	1000071e 	bne	r2,zero,20185e4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 20185c8:	d0a7b617 	ldw	r2,-24872(gp)
 20185cc:	10800d83 	ldbu	r2,54(r2)
 20185d0:	0084303a 	nor	r2,zero,r2
 20185d4:	1007883a 	mov	r3,r2
 20185d8:	d0a7b303 	ldbu	r2,-24884(gp)
 20185dc:	1884703a 	and	r2,r3,r2
 20185e0:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 20185e4:	0001883a 	nop
 20185e8:	e037883a 	mov	sp,fp
 20185ec:	df000017 	ldw	fp,0(sp)
 20185f0:	dec00104 	addi	sp,sp,4
 20185f4:	f800283a 	ret

020185f8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 20185f8:	defffb04 	addi	sp,sp,-20
 20185fc:	df000415 	stw	fp,16(sp)
 2018600:	df000404 	addi	fp,sp,16
 2018604:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2018608:	d0a7b617 	ldw	r2,-24872(gp)
 201860c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2018610:	d0a7b617 	ldw	r2,-24872(gp)
 2018614:	e0ffff17 	ldw	r3,-4(fp)
 2018618:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 201861c:	e0bfff17 	ldw	r2,-4(fp)
 2018620:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2018624:	e0bffc17 	ldw	r2,-16(fp)
 2018628:	10800017 	ldw	r2,0(r2)
 201862c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2018630:	00002006 	br	20186b4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2018634:	d0a7b617 	ldw	r2,-24872(gp)
 2018638:	10800d03 	ldbu	r2,52(r2)
 201863c:	10803fcc 	andi	r2,r2,255
 2018640:	d0e7b617 	ldw	r3,-24872(gp)
 2018644:	18c00d03 	ldbu	r3,52(r3)
 2018648:	18c03fcc 	andi	r3,r3,255
 201864c:	e13ffd17 	ldw	r4,-12(fp)
 2018650:	20c7883a 	add	r3,r4,r3
 2018654:	18c002c4 	addi	r3,r3,11
 2018658:	19000003 	ldbu	r4,0(r3)
 201865c:	d0e7b617 	ldw	r3,-24872(gp)
 2018660:	18c00d43 	ldbu	r3,53(r3)
 2018664:	20c6b03a 	or	r3,r4,r3
 2018668:	1809883a 	mov	r4,r3
 201866c:	e0fffd17 	ldw	r3,-12(fp)
 2018670:	1885883a 	add	r2,r3,r2
 2018674:	108002c4 	addi	r2,r2,11
 2018678:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 201867c:	e0bffd17 	ldw	r2,-12(fp)
 2018680:	10c00283 	ldbu	r3,10(r2)
 2018684:	d0a7b617 	ldw	r2,-24872(gp)
 2018688:	10800d83 	ldbu	r2,54(r2)
 201868c:	1884b03a 	or	r2,r3,r2
 2018690:	1007883a 	mov	r3,r2
 2018694:	e0bffd17 	ldw	r2,-12(fp)
 2018698:	10c00285 	stb	r3,10(r2)
        pevents++;
 201869c:	e0bffc17 	ldw	r2,-16(fp)
 20186a0:	10800104 	addi	r2,r2,4
 20186a4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 20186a8:	e0bffc17 	ldw	r2,-16(fp)
 20186ac:	10800017 	ldw	r2,0(r2)
 20186b0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 20186b4:	e0bffd17 	ldw	r2,-12(fp)
 20186b8:	103fde1e 	bne	r2,zero,2018634 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 20186bc:	d0a7b617 	ldw	r2,-24872(gp)
 20186c0:	10800d03 	ldbu	r2,52(r2)
 20186c4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 20186c8:	e0fffe03 	ldbu	r3,-8(fp)
 20186cc:	e13ffe03 	ldbu	r4,-8(fp)
 20186d0:	d0a7b344 	addi	r2,gp,-24883
 20186d4:	2085883a 	add	r2,r4,r2
 20186d8:	10800003 	ldbu	r2,0(r2)
 20186dc:	1009883a 	mov	r4,r2
 20186e0:	d0a7b617 	ldw	r2,-24872(gp)
 20186e4:	10800d43 	ldbu	r2,53(r2)
 20186e8:	0084303a 	nor	r2,zero,r2
 20186ec:	2084703a 	and	r2,r4,r2
 20186f0:	1009883a 	mov	r4,r2
 20186f4:	d0a7b344 	addi	r2,gp,-24883
 20186f8:	1885883a 	add	r2,r3,r2
 20186fc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2018700:	e0fffe03 	ldbu	r3,-8(fp)
 2018704:	d0a7b344 	addi	r2,gp,-24883
 2018708:	1885883a 	add	r2,r3,r2
 201870c:	10800003 	ldbu	r2,0(r2)
 2018710:	10803fcc 	andi	r2,r2,255
 2018714:	1000071e 	bne	r2,zero,2018734 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2018718:	d0a7b617 	ldw	r2,-24872(gp)
 201871c:	10800d83 	ldbu	r2,54(r2)
 2018720:	0084303a 	nor	r2,zero,r2
 2018724:	1007883a 	mov	r3,r2
 2018728:	d0a7b303 	ldbu	r2,-24884(gp)
 201872c:	1884703a 	and	r2,r3,r2
 2018730:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 2018734:	0001883a 	nop
 2018738:	e037883a 	mov	sp,fp
 201873c:	df000017 	ldw	fp,0(sp)
 2018740:	dec00104 	addi	sp,sp,4
 2018744:	f800283a 	ret

02018748 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2018748:	defffc04 	addi	sp,sp,-16
 201874c:	df000315 	stw	fp,12(sp)
 2018750:	df000304 	addi	fp,sp,12
 2018754:	e13ffe15 	stw	r4,-8(fp)
 2018758:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 201875c:	e0bffe17 	ldw	r2,-8(fp)
 2018760:	10800d03 	ldbu	r2,52(r2)
 2018764:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2018768:	e0bffd03 	ldbu	r2,-12(fp)
 201876c:	e0fffd03 	ldbu	r3,-12(fp)
 2018770:	e13fff17 	ldw	r4,-4(fp)
 2018774:	20c7883a 	add	r3,r4,r3
 2018778:	18c002c4 	addi	r3,r3,11
 201877c:	18c00003 	ldbu	r3,0(r3)
 2018780:	1809883a 	mov	r4,r3
 2018784:	e0fffe17 	ldw	r3,-8(fp)
 2018788:	18c00d43 	ldbu	r3,53(r3)
 201878c:	00c6303a 	nor	r3,zero,r3
 2018790:	20c6703a 	and	r3,r4,r3
 2018794:	1809883a 	mov	r4,r3
 2018798:	e0ffff17 	ldw	r3,-4(fp)
 201879c:	1885883a 	add	r2,r3,r2
 20187a0:	108002c4 	addi	r2,r2,11
 20187a4:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 20187a8:	e0bffd03 	ldbu	r2,-12(fp)
 20187ac:	e0ffff17 	ldw	r3,-4(fp)
 20187b0:	1885883a 	add	r2,r3,r2
 20187b4:	108002c4 	addi	r2,r2,11
 20187b8:	10800003 	ldbu	r2,0(r2)
 20187bc:	10803fcc 	andi	r2,r2,255
 20187c0:	10000a1e 	bne	r2,zero,20187ec <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 20187c4:	e0bfff17 	ldw	r2,-4(fp)
 20187c8:	10800283 	ldbu	r2,10(r2)
 20187cc:	1007883a 	mov	r3,r2
 20187d0:	e0bffe17 	ldw	r2,-8(fp)
 20187d4:	10800d83 	ldbu	r2,54(r2)
 20187d8:	0084303a 	nor	r2,zero,r2
 20187dc:	1884703a 	and	r2,r3,r2
 20187e0:	1007883a 	mov	r3,r2
 20187e4:	e0bfff17 	ldw	r2,-4(fp)
 20187e8:	10c00285 	stb	r3,10(r2)
    }
}
 20187ec:	0001883a 	nop
 20187f0:	e037883a 	mov	sp,fp
 20187f4:	df000017 	ldw	fp,0(sp)
 20187f8:	dec00104 	addi	sp,sp,4
 20187fc:	f800283a 	ret

02018800 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2018800:	defffa04 	addi	sp,sp,-24
 2018804:	df000515 	stw	fp,20(sp)
 2018808:	df000504 	addi	fp,sp,20
 201880c:	e13ffe15 	stw	r4,-8(fp)
 2018810:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2018814:	e0bffe17 	ldw	r2,-8(fp)
 2018818:	10800d03 	ldbu	r2,52(r2)
 201881c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2018820:	e0bffe17 	ldw	r2,-8(fp)
 2018824:	10800d83 	ldbu	r2,54(r2)
 2018828:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 201882c:	e0bffe17 	ldw	r2,-8(fp)
 2018830:	10800d43 	ldbu	r2,53(r2)
 2018834:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2018838:	e0bfff17 	ldw	r2,-4(fp)
 201883c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2018840:	e0bffb17 	ldw	r2,-20(fp)
 2018844:	10800017 	ldw	r2,0(r2)
 2018848:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 201884c:	00002506 	br	20188e4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 2018850:	e0bffd03 	ldbu	r2,-12(fp)
 2018854:	e0fffd03 	ldbu	r3,-12(fp)
 2018858:	e13ffc17 	ldw	r4,-16(fp)
 201885c:	20c7883a 	add	r3,r4,r3
 2018860:	18c002c4 	addi	r3,r3,11
 2018864:	18c00003 	ldbu	r3,0(r3)
 2018868:	1809883a 	mov	r4,r3
 201886c:	e0fffd83 	ldbu	r3,-10(fp)
 2018870:	00c6303a 	nor	r3,zero,r3
 2018874:	20c6703a 	and	r3,r4,r3
 2018878:	1809883a 	mov	r4,r3
 201887c:	e0fffc17 	ldw	r3,-16(fp)
 2018880:	1885883a 	add	r2,r3,r2
 2018884:	108002c4 	addi	r2,r2,11
 2018888:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 201888c:	e0bffd03 	ldbu	r2,-12(fp)
 2018890:	e0fffc17 	ldw	r3,-16(fp)
 2018894:	1885883a 	add	r2,r3,r2
 2018898:	108002c4 	addi	r2,r2,11
 201889c:	10800003 	ldbu	r2,0(r2)
 20188a0:	10803fcc 	andi	r2,r2,255
 20188a4:	1000091e 	bne	r2,zero,20188cc <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 20188a8:	e0bffc17 	ldw	r2,-16(fp)
 20188ac:	10800283 	ldbu	r2,10(r2)
 20188b0:	1007883a 	mov	r3,r2
 20188b4:	e0bffd43 	ldbu	r2,-11(fp)
 20188b8:	0084303a 	nor	r2,zero,r2
 20188bc:	1884703a 	and	r2,r3,r2
 20188c0:	1007883a 	mov	r3,r2
 20188c4:	e0bffc17 	ldw	r2,-16(fp)
 20188c8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 20188cc:	e0bffb17 	ldw	r2,-20(fp)
 20188d0:	10800104 	addi	r2,r2,4
 20188d4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 20188d8:	e0bffb17 	ldw	r2,-20(fp)
 20188dc:	10800017 	ldw	r2,0(r2)
 20188e0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20188e4:	e0bffc17 	ldw	r2,-16(fp)
 20188e8:	103fd91e 	bne	r2,zero,2018850 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 20188ec:	0001883a 	nop
 20188f0:	e037883a 	mov	sp,fp
 20188f4:	df000017 	ldw	fp,0(sp)
 20188f8:	dec00104 	addi	sp,sp,4
 20188fc:	f800283a 	ret

02018900 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 2018900:	defffc04 	addi	sp,sp,-16
 2018904:	df000315 	stw	fp,12(sp)
 2018908:	df000304 	addi	fp,sp,12
 201890c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2018910:	e0bfff17 	ldw	r2,-4(fp)
 2018914:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2018918:	e0bfff17 	ldw	r2,-4(fp)
 201891c:	108002c4 	addi	r2,r2,11
 2018920:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2018924:	e03ffe05 	stb	zero,-8(fp)
 2018928:	00000706 	br	2018948 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 201892c:	e0bffd17 	ldw	r2,-12(fp)
 2018930:	10c00044 	addi	r3,r2,1
 2018934:	e0fffd15 	stw	r3,-12(fp)
 2018938:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201893c:	e0bffe03 	ldbu	r2,-8(fp)
 2018940:	10800044 	addi	r2,r2,1
 2018944:	e0bffe05 	stb	r2,-8(fp)
 2018948:	e0bffe03 	ldbu	r2,-8(fp)
 201894c:	108000f0 	cmpltui	r2,r2,3
 2018950:	103ff61e 	bne	r2,zero,201892c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2018954:	0001883a 	nop
 2018958:	e037883a 	mov	sp,fp
 201895c:	df000017 	ldw	fp,0(sp)
 2018960:	dec00104 	addi	sp,sp,4
 2018964:	f800283a 	ret

02018968 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2018968:	defffb04 	addi	sp,sp,-20
 201896c:	dfc00415 	stw	ra,16(sp)
 2018970:	df000315 	stw	fp,12(sp)
 2018974:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2018978:	0142d004 	movi	r5,2880
 201897c:	010080f4 	movhi	r4,515
 2018980:	2101dc04 	addi	r4,r4,1904
 2018984:	2018ce00 	call	2018ce0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2018988:	008080f4 	movhi	r2,515
 201898c:	1081dc04 	addi	r2,r2,1904
 2018990:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2018994:	008080f4 	movhi	r2,515
 2018998:	1081e804 	addi	r2,r2,1952
 201899c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20189a0:	e03ffd0d 	sth	zero,-12(fp)
 20189a4:	00001306 	br	20189f4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 20189a8:	e0bffe17 	ldw	r2,-8(fp)
 20189ac:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 20189b0:	e0bffe17 	ldw	r2,-8(fp)
 20189b4:	e0ffff17 	ldw	r3,-4(fp)
 20189b8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 20189bc:	e0bffe17 	ldw	r2,-8(fp)
 20189c0:	00c00fc4 	movi	r3,63
 20189c4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20189c8:	e0bffe17 	ldw	r2,-8(fp)
 20189cc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 20189d0:	e0bffe17 	ldw	r2,-8(fp)
 20189d4:	10800c04 	addi	r2,r2,48
 20189d8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 20189dc:	e0bfff17 	ldw	r2,-4(fp)
 20189e0:	10800c04 	addi	r2,r2,48
 20189e4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20189e8:	e0bffd0b 	ldhu	r2,-12(fp)
 20189ec:	10800044 	addi	r2,r2,1
 20189f0:	e0bffd0d 	sth	r2,-12(fp)
 20189f4:	e0bffd0b 	ldhu	r2,-12(fp)
 20189f8:	10800ef0 	cmpltui	r2,r2,59
 20189fc:	103fea1e 	bne	r2,zero,20189a8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 2018a00:	e0bffe17 	ldw	r2,-8(fp)
 2018a04:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 2018a08:	e0bffe17 	ldw	r2,-8(fp)
 2018a0c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2018a10:	e0bffe17 	ldw	r2,-8(fp)
 2018a14:	00c00fc4 	movi	r3,63
 2018a18:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2018a1c:	e0bffe17 	ldw	r2,-8(fp)
 2018a20:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2018a24:	008080f4 	movhi	r2,515
 2018a28:	1081dc04 	addi	r2,r2,1904
 2018a2c:	d0a7b415 	stw	r2,-24880(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2018a30:	0001883a 	nop
 2018a34:	e037883a 	mov	sp,fp
 2018a38:	dfc00117 	ldw	ra,4(sp)
 2018a3c:	df000017 	ldw	fp,0(sp)
 2018a40:	dec00204 	addi	sp,sp,8
 2018a44:	f800283a 	ret

02018a48 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2018a48:	deffff04 	addi	sp,sp,-4
 2018a4c:	df000015 	stw	fp,0(sp)
 2018a50:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2018a54:	d027b715 	stw	zero,-24868(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2018a58:	d027b505 	stb	zero,-24876(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2018a5c:	d027a705 	stb	zero,-24932(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2018a60:	d027af45 	stb	zero,-24899(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2018a64:	d027a745 	stb	zero,-24931(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2018a68:	d027ac15 	stw	zero,-24912(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2018a6c:	d027a815 	stw	zero,-24928(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2018a70:	d027ba15 	stw	zero,-24856(gp)
    OSIdleCtrMax  = 0L;
 2018a74:	d027ad15 	stw	zero,-24908(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2018a78:	d027b905 	stb	zero,-24860(gp)
#endif
}
 2018a7c:	0001883a 	nop
 2018a80:	e037883a 	mov	sp,fp
 2018a84:	df000017 	ldw	fp,0(sp)
 2018a88:	dec00104 	addi	sp,sp,4
 2018a8c:	f800283a 	ret

02018a90 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2018a90:	defffd04 	addi	sp,sp,-12
 2018a94:	df000215 	stw	fp,8(sp)
 2018a98:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2018a9c:	d027b305 	stb	zero,-24884(gp)
    prdytbl       = &OSRdyTbl[0];
 2018aa0:	d0a7b344 	addi	r2,gp,-24883
 2018aa4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2018aa8:	e03ffe05 	stb	zero,-8(fp)
 2018aac:	00000706 	br	2018acc <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 2018ab0:	e0bfff17 	ldw	r2,-4(fp)
 2018ab4:	10c00044 	addi	r3,r2,1
 2018ab8:	e0ffff15 	stw	r3,-4(fp)
 2018abc:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2018ac0:	e0bffe03 	ldbu	r2,-8(fp)
 2018ac4:	10800044 	addi	r2,r2,1
 2018ac8:	e0bffe05 	stb	r2,-8(fp)
 2018acc:	e0bffe03 	ldbu	r2,-8(fp)
 2018ad0:	108000f0 	cmpltui	r2,r2,3
 2018ad4:	103ff61e 	bne	r2,zero,2018ab0 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 2018ad8:	d027a945 	stb	zero,-24923(gp)
    OSPrioHighRdy = 0;
 2018adc:	d027a905 	stb	zero,-24924(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 2018ae0:	d027b115 	stw	zero,-24892(gp)
    OSTCBCur      = (OS_TCB *)0;
 2018ae4:	d027b615 	stw	zero,-24872(gp)
}
 2018ae8:	0001883a 	nop
 2018aec:	e037883a 	mov	sp,fp
 2018af0:	df000017 	ldw	fp,0(sp)
 2018af4:	dec00104 	addi	sp,sp,4
 2018af8:	f800283a 	ret

02018afc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 2018afc:	defff804 	addi	sp,sp,-32
 2018b00:	dfc00715 	stw	ra,28(sp)
 2018b04:	df000615 	stw	fp,24(sp)
 2018b08:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 2018b0c:	008000c4 	movi	r2,3
 2018b10:	d8800415 	stw	r2,16(sp)
 2018b14:	d8000315 	stw	zero,12(sp)
 2018b18:	00808004 	movi	r2,512
 2018b1c:	d8800215 	stw	r2,8(sp)
 2018b20:	008080f4 	movhi	r2,515
 2018b24:	10bfdc04 	addi	r2,r2,-144
 2018b28:	d8800115 	stw	r2,4(sp)
 2018b2c:	00bfffd4 	movui	r2,65535
 2018b30:	d8800015 	stw	r2,0(sp)
 2018b34:	01c00504 	movi	r7,20
 2018b38:	018080f4 	movhi	r6,515
 2018b3c:	3181db04 	addi	r6,r6,1900
 2018b40:	000b883a 	mov	r5,zero
 2018b44:	010080b4 	movhi	r4,514
 2018b48:	2123ea04 	addi	r4,r4,-28760
 2018b4c:	201e1300 	call	201e130 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2018b50:	e1bfff04 	addi	r6,fp,-4
 2018b54:	014080b4 	movhi	r5,514
 2018b58:	294ad904 	addi	r5,r5,11108
 2018b5c:	01000504 	movi	r4,20
 2018b60:	201e9400 	call	201e940 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2018b64:	0001883a 	nop
 2018b68:	e037883a 	mov	sp,fp
 2018b6c:	dfc00117 	ldw	ra,4(sp)
 2018b70:	df000017 	ldw	fp,0(sp)
 2018b74:	dec00204 	addi	sp,sp,8
 2018b78:	f800283a 	ret

02018b7c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2018b7c:	defff804 	addi	sp,sp,-32
 2018b80:	dfc00715 	stw	ra,28(sp)
 2018b84:	df000615 	stw	fp,24(sp)
 2018b88:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2018b8c:	008000c4 	movi	r2,3
 2018b90:	d8800415 	stw	r2,16(sp)
 2018b94:	d8000315 	stw	zero,12(sp)
 2018b98:	00808004 	movi	r2,512
 2018b9c:	d8800215 	stw	r2,8(sp)
 2018ba0:	008080f4 	movhi	r2,515
 2018ba4:	10bd6404 	addi	r2,r2,-2672
 2018ba8:	d8800115 	stw	r2,4(sp)
 2018bac:	00bfff94 	movui	r2,65534
 2018bb0:	d8800015 	stw	r2,0(sp)
 2018bb4:	01c004c4 	movi	r7,19
 2018bb8:	018080f4 	movhi	r6,515
 2018bbc:	31bf6304 	addi	r6,r6,-628
 2018bc0:	000b883a 	mov	r5,zero
 2018bc4:	010080b4 	movhi	r4,514
 2018bc8:	21240104 	addi	r4,r4,-28668
 2018bcc:	201e1300 	call	201e130 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 2018bd0:	e1bfff04 	addi	r6,fp,-4
 2018bd4:	014080b4 	movhi	r5,514
 2018bd8:	294add04 	addi	r5,r5,11124
 2018bdc:	010004c4 	movi	r4,19
 2018be0:	201e9400 	call	201e940 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 2018be4:	0001883a 	nop
 2018be8:	e037883a 	mov	sp,fp
 2018bec:	dfc00117 	ldw	ra,4(sp)
 2018bf0:	df000017 	ldw	fp,0(sp)
 2018bf4:	dec00204 	addi	sp,sp,8
 2018bf8:	f800283a 	ret

02018bfc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 2018bfc:	defffb04 	addi	sp,sp,-20
 2018c00:	dfc00415 	stw	ra,16(sp)
 2018c04:	df000315 	stw	fp,12(sp)
 2018c08:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 2018c0c:	01414404 	movi	r5,1296
 2018c10:	010080f4 	movhi	r4,515
 2018c14:	2104ac04 	addi	r4,r4,4784
 2018c18:	2018ce00 	call	2018ce0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 2018c1c:	01401504 	movi	r5,84
 2018c20:	010080f4 	movhi	r4,515
 2018c24:	2105f004 	addi	r4,r4,6080
 2018c28:	2018ce00 	call	2018ce0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2018c2c:	008080f4 	movhi	r2,515
 2018c30:	1084ac04 	addi	r2,r2,4784
 2018c34:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2018c38:	008080f4 	movhi	r2,515
 2018c3c:	1084c704 	addi	r2,r2,4892
 2018c40:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2018c44:	e03ffd05 	stb	zero,-12(fp)
 2018c48:	00001106 	br	2018c90 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2018c4c:	e0bffe17 	ldw	r2,-8(fp)
 2018c50:	e0ffff17 	ldw	r3,-4(fp)
 2018c54:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2018c58:	e0bffe17 	ldw	r2,-8(fp)
 2018c5c:	00c00fc4 	movi	r3,63
 2018c60:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2018c64:	e0bffe17 	ldw	r2,-8(fp)
 2018c68:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2018c6c:	e0bffe17 	ldw	r2,-8(fp)
 2018c70:	10801b04 	addi	r2,r2,108
 2018c74:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2018c78:	e0bfff17 	ldw	r2,-4(fp)
 2018c7c:	10801b04 	addi	r2,r2,108
 2018c80:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2018c84:	e0bffd03 	ldbu	r2,-12(fp)
 2018c88:	10800044 	addi	r2,r2,1
 2018c8c:	e0bffd05 	stb	r2,-12(fp)
 2018c90:	e0bffd03 	ldbu	r2,-12(fp)
 2018c94:	108002f0 	cmpltui	r2,r2,11
 2018c98:	103fec1e 	bne	r2,zero,2018c4c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2018c9c:	e0bffe17 	ldw	r2,-8(fp)
 2018ca0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2018ca4:	e0bffe17 	ldw	r2,-8(fp)
 2018ca8:	00c00fc4 	movi	r3,63
 2018cac:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2018cb0:	e0bffe17 	ldw	r2,-8(fp)
 2018cb4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2018cb8:	d027aa15 	stw	zero,-24920(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 2018cbc:	008080f4 	movhi	r2,515
 2018cc0:	1084ac04 	addi	r2,r2,4784
 2018cc4:	d0a7ae15 	stw	r2,-24904(gp)
}
 2018cc8:	0001883a 	nop
 2018ccc:	e037883a 	mov	sp,fp
 2018cd0:	dfc00117 	ldw	ra,4(sp)
 2018cd4:	df000017 	ldw	fp,0(sp)
 2018cd8:	dec00204 	addi	sp,sp,8
 2018cdc:	f800283a 	ret

02018ce0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 2018ce0:	defffd04 	addi	sp,sp,-12
 2018ce4:	df000215 	stw	fp,8(sp)
 2018ce8:	df000204 	addi	fp,sp,8
 2018cec:	e13ffe15 	stw	r4,-8(fp)
 2018cf0:	2805883a 	mov	r2,r5
 2018cf4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2018cf8:	00000706 	br	2018d18 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 2018cfc:	e0bffe17 	ldw	r2,-8(fp)
 2018d00:	10c00044 	addi	r3,r2,1
 2018d04:	e0fffe15 	stw	r3,-8(fp)
 2018d08:	10000005 	stb	zero,0(r2)
        size--;
 2018d0c:	e0bfff0b 	ldhu	r2,-4(fp)
 2018d10:	10bfffc4 	addi	r2,r2,-1
 2018d14:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2018d18:	e0bfff0b 	ldhu	r2,-4(fp)
 2018d1c:	103ff71e 	bne	r2,zero,2018cfc <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2018d20:	0001883a 	nop
 2018d24:	e037883a 	mov	sp,fp
 2018d28:	df000017 	ldw	fp,0(sp)
 2018d2c:	dec00104 	addi	sp,sp,4
 2018d30:	f800283a 	ret

02018d34 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2018d34:	defffc04 	addi	sp,sp,-16
 2018d38:	df000315 	stw	fp,12(sp)
 2018d3c:	df000304 	addi	fp,sp,12
 2018d40:	e13ffd15 	stw	r4,-12(fp)
 2018d44:	e17ffe15 	stw	r5,-8(fp)
 2018d48:	3005883a 	mov	r2,r6
 2018d4c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2018d50:	00000b06 	br	2018d80 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 2018d54:	e0bffd17 	ldw	r2,-12(fp)
 2018d58:	10c00044 	addi	r3,r2,1
 2018d5c:	e0fffd15 	stw	r3,-12(fp)
 2018d60:	e0fffe17 	ldw	r3,-8(fp)
 2018d64:	19000044 	addi	r4,r3,1
 2018d68:	e13ffe15 	stw	r4,-8(fp)
 2018d6c:	18c00003 	ldbu	r3,0(r3)
 2018d70:	10c00005 	stb	r3,0(r2)
        size--;
 2018d74:	e0bfff0b 	ldhu	r2,-4(fp)
 2018d78:	10bfffc4 	addi	r2,r2,-1
 2018d7c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2018d80:	e0bfff0b 	ldhu	r2,-4(fp)
 2018d84:	103ff31e 	bne	r2,zero,2018d54 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2018d88:	0001883a 	nop
 2018d8c:	e037883a 	mov	sp,fp
 2018d90:	df000017 	ldw	fp,0(sp)
 2018d94:	dec00104 	addi	sp,sp,4
 2018d98:	f800283a 	ret

02018d9c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2018d9c:	defffb04 	addi	sp,sp,-20
 2018da0:	dfc00415 	stw	ra,16(sp)
 2018da4:	df000315 	stw	fp,12(sp)
 2018da8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2018dac:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018db0:	0005303a 	rdctl	r2,status
 2018db4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018db8:	e0ffff17 	ldw	r3,-4(fp)
 2018dbc:	00bfff84 	movi	r2,-2
 2018dc0:	1884703a 	and	r2,r3,r2
 2018dc4:	1001703a 	wrctl	status,r2
  
  return context;
 2018dc8:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 2018dcc:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2018dd0:	d0a7b503 	ldbu	r2,-24876(gp)
 2018dd4:	10803fcc 	andi	r2,r2,255
 2018dd8:	10001a1e 	bne	r2,zero,2018e44 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 2018ddc:	d0a7a703 	ldbu	r2,-24932(gp)
 2018de0:	10803fcc 	andi	r2,r2,255
 2018de4:	1000171e 	bne	r2,zero,2018e44 <OS_Sched+0xa8>
            OS_SchedNew();
 2018de8:	2018e6c0 	call	2018e6c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 2018dec:	d0e7a903 	ldbu	r3,-24924(gp)
 2018df0:	d0a7a943 	ldbu	r2,-24923(gp)
 2018df4:	18c03fcc 	andi	r3,r3,255
 2018df8:	10803fcc 	andi	r2,r2,255
 2018dfc:	18801126 	beq	r3,r2,2018e44 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2018e00:	d0a7a903 	ldbu	r2,-24924(gp)
 2018e04:	10c03fcc 	andi	r3,r2,255
 2018e08:	008080f4 	movhi	r2,515
 2018e0c:	1085f004 	addi	r2,r2,6080
 2018e10:	18c7883a 	add	r3,r3,r3
 2018e14:	18c7883a 	add	r3,r3,r3
 2018e18:	10c5883a 	add	r2,r2,r3
 2018e1c:	10800017 	ldw	r2,0(r2)
 2018e20:	d0a7b115 	stw	r2,-24892(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2018e24:	d0a7b117 	ldw	r2,-24892(gp)
 2018e28:	10c00e17 	ldw	r3,56(r2)
 2018e2c:	18c00044 	addi	r3,r3,1
 2018e30:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2018e34:	d0a7ac17 	ldw	r2,-24912(gp)
 2018e38:	10800044 	addi	r2,r2,1
 2018e3c:	d0a7ac15 	stw	r2,-24912(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2018e40:	20214380 	call	2021438 <OSCtxSw>
 2018e44:	e0bffd17 	ldw	r2,-12(fp)
 2018e48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018e4c:	e0bffe17 	ldw	r2,-8(fp)
 2018e50:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2018e54:	0001883a 	nop
 2018e58:	e037883a 	mov	sp,fp
 2018e5c:	dfc00117 	ldw	ra,4(sp)
 2018e60:	df000017 	ldw	fp,0(sp)
 2018e64:	dec00204 	addi	sp,sp,8
 2018e68:	f800283a 	ret

02018e6c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2018e6c:	defffe04 	addi	sp,sp,-8
 2018e70:	df000115 	stw	fp,4(sp)
 2018e74:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2018e78:	d0a7b303 	ldbu	r2,-24884(gp)
 2018e7c:	10c03fcc 	andi	r3,r2,255
 2018e80:	008080b4 	movhi	r2,514
 2018e84:	108a9904 	addi	r2,r2,10852
 2018e88:	10c5883a 	add	r2,r2,r3
 2018e8c:	10800003 	ldbu	r2,0(r2)
 2018e90:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2018e94:	e0bfff03 	ldbu	r2,-4(fp)
 2018e98:	100490fa 	slli	r2,r2,3
 2018e9c:	1009883a 	mov	r4,r2
 2018ea0:	e0ffff03 	ldbu	r3,-4(fp)
 2018ea4:	d0a7b344 	addi	r2,gp,-24883
 2018ea8:	1885883a 	add	r2,r3,r2
 2018eac:	10800003 	ldbu	r2,0(r2)
 2018eb0:	10c03fcc 	andi	r3,r2,255
 2018eb4:	008080b4 	movhi	r2,514
 2018eb8:	108a9904 	addi	r2,r2,10852
 2018ebc:	10c5883a 	add	r2,r2,r3
 2018ec0:	10800003 	ldbu	r2,0(r2)
 2018ec4:	2085883a 	add	r2,r4,r2
 2018ec8:	d0a7a905 	stb	r2,-24924(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 2018ecc:	0001883a 	nop
 2018ed0:	e037883a 	mov	sp,fp
 2018ed4:	df000017 	ldw	fp,0(sp)
 2018ed8:	dec00104 	addi	sp,sp,4
 2018edc:	f800283a 	ret

02018ee0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 2018ee0:	defffc04 	addi	sp,sp,-16
 2018ee4:	df000315 	stw	fp,12(sp)
 2018ee8:	df000304 	addi	fp,sp,12
 2018eec:	e13ffe15 	stw	r4,-8(fp)
 2018ef0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2018ef4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 2018ef8:	00000b06 	br	2018f28 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 2018efc:	e0bffe17 	ldw	r2,-8(fp)
 2018f00:	10c00044 	addi	r3,r2,1
 2018f04:	e0fffe15 	stw	r3,-8(fp)
 2018f08:	e0ffff17 	ldw	r3,-4(fp)
 2018f0c:	19000044 	addi	r4,r3,1
 2018f10:	e13fff15 	stw	r4,-4(fp)
 2018f14:	18c00003 	ldbu	r3,0(r3)
 2018f18:	10c00005 	stb	r3,0(r2)
        len++;
 2018f1c:	e0bffd03 	ldbu	r2,-12(fp)
 2018f20:	10800044 	addi	r2,r2,1
 2018f24:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2018f28:	e0bfff17 	ldw	r2,-4(fp)
 2018f2c:	10800003 	ldbu	r2,0(r2)
 2018f30:	10803fcc 	andi	r2,r2,255
 2018f34:	103ff11e 	bne	r2,zero,2018efc <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2018f38:	e0bffe17 	ldw	r2,-8(fp)
 2018f3c:	10000005 	stb	zero,0(r2)
    return (len);
 2018f40:	e0bffd03 	ldbu	r2,-12(fp)
}
 2018f44:	e037883a 	mov	sp,fp
 2018f48:	df000017 	ldw	fp,0(sp)
 2018f4c:	dec00104 	addi	sp,sp,4
 2018f50:	f800283a 	ret

02018f54 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2018f54:	defffd04 	addi	sp,sp,-12
 2018f58:	df000215 	stw	fp,8(sp)
 2018f5c:	df000204 	addi	fp,sp,8
 2018f60:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2018f64:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2018f68:	00000606 	br	2018f84 <OS_StrLen+0x30>
        psrc++;
 2018f6c:	e0bfff17 	ldw	r2,-4(fp)
 2018f70:	10800044 	addi	r2,r2,1
 2018f74:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2018f78:	e0bffe03 	ldbu	r2,-8(fp)
 2018f7c:	10800044 	addi	r2,r2,1
 2018f80:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2018f84:	e0bfff17 	ldw	r2,-4(fp)
 2018f88:	10800003 	ldbu	r2,0(r2)
 2018f8c:	10803fcc 	andi	r2,r2,255
 2018f90:	103ff61e 	bne	r2,zero,2018f6c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2018f94:	e0bffe03 	ldbu	r2,-8(fp)
}
 2018f98:	e037883a 	mov	sp,fp
 2018f9c:	df000017 	ldw	fp,0(sp)
 2018fa0:	dec00104 	addi	sp,sp,4
 2018fa4:	f800283a 	ret

02018fa8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2018fa8:	defffa04 	addi	sp,sp,-24
 2018fac:	dfc00515 	stw	ra,20(sp)
 2018fb0:	df000415 	stw	fp,16(sp)
 2018fb4:	df000404 	addi	fp,sp,16
 2018fb8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018fbc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018fc0:	0005303a 	rdctl	r2,status
 2018fc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018fc8:	e0fffd17 	ldw	r3,-12(fp)
 2018fcc:	00bfff84 	movi	r2,-2
 2018fd0:	1884703a 	and	r2,r3,r2
 2018fd4:	1001703a 	wrctl	status,r2
  
  return context;
 2018fd8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 2018fdc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 2018fe0:	d0a7a817 	ldw	r2,-24928(gp)
 2018fe4:	10800044 	addi	r2,r2,1
 2018fe8:	d0a7a815 	stw	r2,-24928(gp)
 2018fec:	e0bffc17 	ldw	r2,-16(fp)
 2018ff0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018ff4:	e0bffe17 	ldw	r2,-8(fp)
 2018ff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2018ffc:	202174c0 	call	202174c <OSTaskIdleHook>
    }
 2019000:	003fef06 	br	2018fc0 <OS_TaskIdle+0x18>

02019004 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2019004:	defffa04 	addi	sp,sp,-24
 2019008:	dfc00515 	stw	ra,20(sp)
 201900c:	df000415 	stw	fp,16(sp)
 2019010:	df000404 	addi	fp,sp,16
 2019014:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019018:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 201901c:	00000206 	br	2019028 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2019020:	01003204 	movi	r4,200
 2019024:	201f2000 	call	201f200 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2019028:	d0a7b903 	ldbu	r2,-24860(gp)
 201902c:	10803fcc 	andi	r2,r2,255
 2019030:	103ffb26 	beq	r2,zero,2019020 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2019034:	d0a7ad17 	ldw	r2,-24908(gp)
 2019038:	01401904 	movi	r5,100
 201903c:	1009883a 	mov	r4,r2
 2019040:	2006bac0 	call	2006bac <__udivsi3>
 2019044:	d0a7ad15 	stw	r2,-24908(gp)
    if (OSIdleCtrMax == 0L) {
 2019048:	d0a7ad17 	ldw	r2,-24908(gp)
 201904c:	1000031e 	bne	r2,zero,201905c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2019050:	d027af05 	stb	zero,-24900(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2019054:	01003fc4 	movi	r4,255
 2019058:	201ee880 	call	201ee88 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201905c:	0005303a 	rdctl	r2,status
 2019060:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019064:	e0fffd17 	ldw	r3,-12(fp)
 2019068:	00bfff84 	movi	r2,-2
 201906c:	1884703a 	and	r2,r3,r2
 2019070:	1001703a 	wrctl	status,r2
  
  return context;
 2019074:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2019078:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 201907c:	d0a7a817 	ldw	r2,-24928(gp)
 2019080:	d0a7ba15 	stw	r2,-24856(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2019084:	d027a815 	stw	zero,-24928(gp)
 2019088:	e0bffc17 	ldw	r2,-16(fp)
 201908c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019090:	e0bffe17 	ldw	r2,-8(fp)
 2019094:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2019098:	d0a7ba17 	ldw	r2,-24856(gp)
 201909c:	d0e7ad17 	ldw	r3,-24908(gp)
 20190a0:	180b883a 	mov	r5,r3
 20190a4:	1009883a 	mov	r4,r2
 20190a8:	2006bac0 	call	2006bac <__udivsi3>
 20190ac:	1007883a 	mov	r3,r2
 20190b0:	00801904 	movi	r2,100
 20190b4:	10c5c83a 	sub	r2,r2,r3
 20190b8:	d0a7af05 	stb	r2,-24900(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 20190bc:	20216cc0 	call	20216cc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 20190c0:	20190d00 	call	20190d0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 20190c4:	01001904 	movi	r4,100
 20190c8:	201f2000 	call	201f200 <OSTimeDly>
    }
 20190cc:	003fe306 	br	201905c <OS_TaskStat+0x58>

020190d0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 20190d0:	defffa04 	addi	sp,sp,-24
 20190d4:	dfc00515 	stw	ra,20(sp)
 20190d8:	df000415 	stw	fp,16(sp)
 20190dc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20190e0:	e03ffc05 	stb	zero,-16(fp)
 20190e4:	00002406 	br	2019178 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 20190e8:	e0bffc03 	ldbu	r2,-16(fp)
 20190ec:	e0fffe04 	addi	r3,fp,-8
 20190f0:	180b883a 	mov	r5,r3
 20190f4:	1009883a 	mov	r4,r2
 20190f8:	201ecc80 	call	201ecc8 <OSTaskStkChk>
 20190fc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2019100:	e0bffc43 	ldbu	r2,-15(fp)
 2019104:	1000191e 	bne	r2,zero,201916c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 2019108:	e0fffc03 	ldbu	r3,-16(fp)
 201910c:	008080f4 	movhi	r2,515
 2019110:	1085f004 	addi	r2,r2,6080
 2019114:	18c7883a 	add	r3,r3,r3
 2019118:	18c7883a 	add	r3,r3,r3
 201911c:	10c5883a 	add	r2,r2,r3
 2019120:	10800017 	ldw	r2,0(r2)
 2019124:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2019128:	e0bffd17 	ldw	r2,-12(fp)
 201912c:	10000f26 	beq	r2,zero,201916c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2019130:	e0bffd17 	ldw	r2,-12(fp)
 2019134:	10800060 	cmpeqi	r2,r2,1
 2019138:	10000c1e 	bne	r2,zero,201916c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 201913c:	e0bffd17 	ldw	r2,-12(fp)
 2019140:	10c00217 	ldw	r3,8(r2)
 2019144:	e0bffd17 	ldw	r2,-12(fp)
 2019148:	10800317 	ldw	r2,12(r2)
 201914c:	1085883a 	add	r2,r2,r2
 2019150:	1085883a 	add	r2,r2,r2
 2019154:	1887883a 	add	r3,r3,r2
 2019158:	e0bffd17 	ldw	r2,-12(fp)
 201915c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2019160:	e0ffff17 	ldw	r3,-4(fp)
 2019164:	e0bffd17 	ldw	r2,-12(fp)
 2019168:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 201916c:	e0bffc03 	ldbu	r2,-16(fp)
 2019170:	10800044 	addi	r2,r2,1
 2019174:	e0bffc05 	stb	r2,-16(fp)
 2019178:	e0bffc03 	ldbu	r2,-16(fp)
 201917c:	10800570 	cmpltui	r2,r2,21
 2019180:	103fd91e 	bne	r2,zero,20190e8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2019184:	0001883a 	nop
 2019188:	e037883a 	mov	sp,fp
 201918c:	dfc00117 	ldw	ra,4(sp)
 2019190:	df000017 	ldw	fp,0(sp)
 2019194:	dec00204 	addi	sp,sp,8
 2019198:	f800283a 	ret

0201919c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 201919c:	defff204 	addi	sp,sp,-56
 20191a0:	dfc00d15 	stw	ra,52(sp)
 20191a4:	df000c15 	stw	fp,48(sp)
 20191a8:	df000c04 	addi	fp,sp,48
 20191ac:	e17ffc15 	stw	r5,-16(fp)
 20191b0:	e1bffd15 	stw	r6,-12(fp)
 20191b4:	3807883a 	mov	r3,r7
 20191b8:	e0800417 	ldw	r2,16(fp)
 20191bc:	e13ffb05 	stb	r4,-20(fp)
 20191c0:	e0fffe0d 	sth	r3,-8(fp)
 20191c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20191c8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20191cc:	0005303a 	rdctl	r2,status
 20191d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20191d4:	e0fffa17 	ldw	r3,-24(fp)
 20191d8:	00bfff84 	movi	r2,-2
 20191dc:	1884703a 	and	r2,r3,r2
 20191e0:	1001703a 	wrctl	status,r2
  
  return context;
 20191e4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 20191e8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 20191ec:	d0a7ae17 	ldw	r2,-24904(gp)
 20191f0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 20191f4:	e0bff617 	ldw	r2,-40(fp)
 20191f8:	10009326 	beq	r2,zero,2019448 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 20191fc:	e0bff617 	ldw	r2,-40(fp)
 2019200:	10800517 	ldw	r2,20(r2)
 2019204:	d0a7ae15 	stw	r2,-24904(gp)
 2019208:	e0bff417 	ldw	r2,-48(fp)
 201920c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019210:	e0bff817 	ldw	r2,-32(fp)
 2019214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2019218:	e0bff617 	ldw	r2,-40(fp)
 201921c:	e0fffc17 	ldw	r3,-16(fp)
 2019220:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2019224:	e0bff617 	ldw	r2,-40(fp)
 2019228:	e0fffb03 	ldbu	r3,-20(fp)
 201922c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2019230:	e0bff617 	ldw	r2,-40(fp)
 2019234:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2019238:	e0bff617 	ldw	r2,-40(fp)
 201923c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2019240:	e0bff617 	ldw	r2,-40(fp)
 2019244:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2019248:	e0bff617 	ldw	r2,-40(fp)
 201924c:	e0c00317 	ldw	r3,12(fp)
 2019250:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2019254:	e0bff617 	ldw	r2,-40(fp)
 2019258:	e0c00217 	ldw	r3,8(fp)
 201925c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2019260:	e0bff617 	ldw	r2,-40(fp)
 2019264:	e0fffd17 	ldw	r3,-12(fp)
 2019268:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 201926c:	e0bff617 	ldw	r2,-40(fp)
 2019270:	e0ffff0b 	ldhu	r3,-4(fp)
 2019274:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2019278:	e0bff617 	ldw	r2,-40(fp)
 201927c:	e0fffe0b 	ldhu	r3,-8(fp)
 2019280:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2019284:	e0bff617 	ldw	r2,-40(fp)
 2019288:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 201928c:	e0bffb03 	ldbu	r2,-20(fp)
 2019290:	1004d0fa 	srli	r2,r2,3
 2019294:	1007883a 	mov	r3,r2
 2019298:	e0bff617 	ldw	r2,-40(fp)
 201929c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 20192a0:	e0bffb03 	ldbu	r2,-20(fp)
 20192a4:	108001cc 	andi	r2,r2,7
 20192a8:	1007883a 	mov	r3,r2
 20192ac:	e0bff617 	ldw	r2,-40(fp)
 20192b0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 20192b4:	e0bff617 	ldw	r2,-40(fp)
 20192b8:	10800d03 	ldbu	r2,52(r2)
 20192bc:	10803fcc 	andi	r2,r2,255
 20192c0:	00c00044 	movi	r3,1
 20192c4:	1884983a 	sll	r2,r3,r2
 20192c8:	1007883a 	mov	r3,r2
 20192cc:	e0bff617 	ldw	r2,-40(fp)
 20192d0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 20192d4:	e0bff617 	ldw	r2,-40(fp)
 20192d8:	10800cc3 	ldbu	r2,51(r2)
 20192dc:	10803fcc 	andi	r2,r2,255
 20192e0:	00c00044 	movi	r3,1
 20192e4:	1884983a 	sll	r2,r3,r2
 20192e8:	1007883a 	mov	r3,r2
 20192ec:	e0bff617 	ldw	r2,-40(fp)
 20192f0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 20192f4:	e0bff617 	ldw	r2,-40(fp)
 20192f8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 20192fc:	e0bff617 	ldw	r2,-40(fp)
 2019300:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2019304:	e0bff617 	ldw	r2,-40(fp)
 2019308:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 201930c:	e0bff617 	ldw	r2,-40(fp)
 2019310:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2019314:	e0bff617 	ldw	r2,-40(fp)
 2019318:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 201931c:	e0bff617 	ldw	r2,-40(fp)
 2019320:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2019324:	e0bff617 	ldw	r2,-40(fp)
 2019328:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 201932c:	e0bff617 	ldw	r2,-40(fp)
 2019330:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2019334:	e0bff617 	ldw	r2,-40(fp)
 2019338:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 201933c:	e0bff617 	ldw	r2,-40(fp)
 2019340:	00c00fc4 	movi	r3,63
 2019344:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2019348:	e0bff617 	ldw	r2,-40(fp)
 201934c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2019350:	e13ff617 	ldw	r4,-40(fp)
 2019354:	202176c0 	call	202176c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2019358:	e13ff617 	ldw	r4,-40(fp)
 201935c:	20216640 	call	2021664 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019360:	0005303a 	rdctl	r2,status
 2019364:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019368:	e0fff517 	ldw	r3,-44(fp)
 201936c:	00bfff84 	movi	r2,-2
 2019370:	1884703a 	and	r2,r3,r2
 2019374:	1001703a 	wrctl	status,r2
  
  return context;
 2019378:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 201937c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2019380:	e0fffb03 	ldbu	r3,-20(fp)
 2019384:	008080f4 	movhi	r2,515
 2019388:	1085f004 	addi	r2,r2,6080
 201938c:	18c7883a 	add	r3,r3,r3
 2019390:	18c7883a 	add	r3,r3,r3
 2019394:	10c5883a 	add	r2,r2,r3
 2019398:	e0fff617 	ldw	r3,-40(fp)
 201939c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 20193a0:	d0e7aa17 	ldw	r3,-24920(gp)
 20193a4:	e0bff617 	ldw	r2,-40(fp)
 20193a8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 20193ac:	e0bff617 	ldw	r2,-40(fp)
 20193b0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 20193b4:	d0a7aa17 	ldw	r2,-24920(gp)
 20193b8:	10000326 	beq	r2,zero,20193c8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 20193bc:	d0a7aa17 	ldw	r2,-24920(gp)
 20193c0:	e0fff617 	ldw	r3,-40(fp)
 20193c4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 20193c8:	e0bff617 	ldw	r2,-40(fp)
 20193cc:	d0a7aa15 	stw	r2,-24920(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 20193d0:	e0bff617 	ldw	r2,-40(fp)
 20193d4:	10c00d83 	ldbu	r3,54(r2)
 20193d8:	d0a7b303 	ldbu	r2,-24884(gp)
 20193dc:	1884b03a 	or	r2,r3,r2
 20193e0:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20193e4:	e0bff617 	ldw	r2,-40(fp)
 20193e8:	10800d03 	ldbu	r2,52(r2)
 20193ec:	10c03fcc 	andi	r3,r2,255
 20193f0:	e0bff617 	ldw	r2,-40(fp)
 20193f4:	10800d03 	ldbu	r2,52(r2)
 20193f8:	11003fcc 	andi	r4,r2,255
 20193fc:	d0a7b344 	addi	r2,gp,-24883
 2019400:	2085883a 	add	r2,r4,r2
 2019404:	11000003 	ldbu	r4,0(r2)
 2019408:	e0bff617 	ldw	r2,-40(fp)
 201940c:	10800d43 	ldbu	r2,53(r2)
 2019410:	2084b03a 	or	r2,r4,r2
 2019414:	1009883a 	mov	r4,r2
 2019418:	d0a7b344 	addi	r2,gp,-24883
 201941c:	1885883a 	add	r2,r3,r2
 2019420:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2019424:	d0a7af43 	ldbu	r2,-24899(gp)
 2019428:	10800044 	addi	r2,r2,1
 201942c:	d0a7af45 	stb	r2,-24899(gp)
 2019430:	e0bff417 	ldw	r2,-48(fp)
 2019434:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019438:	e0bff717 	ldw	r2,-36(fp)
 201943c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2019440:	0005883a 	mov	r2,zero
 2019444:	00000506 	br	201945c <OS_TCBInit+0x2c0>
 2019448:	e0bff417 	ldw	r2,-48(fp)
 201944c:	e0bff915 	stw	r2,-28(fp)
 2019450:	e0bff917 	ldw	r2,-28(fp)
 2019454:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2019458:	00801084 	movi	r2,66
}
 201945c:	e037883a 	mov	sp,fp
 2019460:	dfc00117 	ldw	ra,4(sp)
 2019464:	df000017 	ldw	fp,0(sp)
 2019468:	dec00204 	addi	sp,sp,8
 201946c:	f800283a 	ret

02019470 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2019470:	defffe04 	addi	sp,sp,-8
 2019474:	df000115 	stw	fp,4(sp)
 2019478:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 201947c:	d0a03f04 	addi	r2,gp,-32516
 2019480:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2019484:	d0a04004 	addi	r2,gp,-32512
 2019488:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 201948c:	d0a04184 	addi	r2,gp,-32506
 2019490:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2019494:	d0a04204 	addi	r2,gp,-32504
 2019498:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 201949c:	d0a04104 	addi	r2,gp,-32508
 20194a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 20194a4:	d0a04284 	addi	r2,gp,-32502
 20194a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 20194ac:	d0a04304 	addi	r2,gp,-32500
 20194b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 20194b4:	d0a04384 	addi	r2,gp,-32498
 20194b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 20194bc:	d0a04404 	addi	r2,gp,-32496
 20194c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 20194c4:	d0a04484 	addi	r2,gp,-32494
 20194c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 20194cc:	d0a04504 	addi	r2,gp,-32492
 20194d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 20194d4:	d0a04584 	addi	r2,gp,-32490
 20194d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 20194dc:	d0a04604 	addi	r2,gp,-32488
 20194e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 20194e4:	d0a04684 	addi	r2,gp,-32486
 20194e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 20194ec:	d0a04704 	addi	r2,gp,-32484
 20194f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 20194f4:	d0a04784 	addi	r2,gp,-32482
 20194f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 20194fc:	d0a04804 	addi	r2,gp,-32480
 2019500:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2019504:	d0a04884 	addi	r2,gp,-32478
 2019508:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 201950c:	d0a04904 	addi	r2,gp,-32476
 2019510:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2019514:	d0a04984 	addi	r2,gp,-32474
 2019518:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 201951c:	d0a04a04 	addi	r2,gp,-32472
 2019520:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2019524:	d0a04a84 	addi	r2,gp,-32470
 2019528:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 201952c:	d0a04b04 	addi	r2,gp,-32468
 2019530:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2019534:	d0a04b84 	addi	r2,gp,-32466
 2019538:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 201953c:	d0a04c04 	addi	r2,gp,-32464
 2019540:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2019544:	d0a04c84 	addi	r2,gp,-32462
 2019548:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 201954c:	d0a04d04 	addi	r2,gp,-32460
 2019550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2019554:	d0a04d84 	addi	r2,gp,-32458
 2019558:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 201955c:	d0a04e04 	addi	r2,gp,-32456
 2019560:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2019564:	d0a04e84 	addi	r2,gp,-32454
 2019568:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 201956c:	d0a04f04 	addi	r2,gp,-32452
 2019570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2019574:	d0a04f84 	addi	r2,gp,-32450
 2019578:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 201957c:	d0a05004 	addi	r2,gp,-32448
 2019580:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2019584:	d0a05084 	addi	r2,gp,-32446
 2019588:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 201958c:	d0a05104 	addi	r2,gp,-32444
 2019590:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2019594:	d0a05184 	addi	r2,gp,-32442
 2019598:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 201959c:	d0a05204 	addi	r2,gp,-32440
 20195a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 20195a4:	d0a05284 	addi	r2,gp,-32438
 20195a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 20195ac:	d0a05304 	addi	r2,gp,-32436
 20195b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 20195b4:	d0a05384 	addi	r2,gp,-32434
 20195b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 20195bc:	d0a05404 	addi	r2,gp,-32432
 20195c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 20195c4:	d0a05484 	addi	r2,gp,-32430
 20195c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 20195cc:	d0a05504 	addi	r2,gp,-32428
 20195d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 20195d4:	d0a05584 	addi	r2,gp,-32426
 20195d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 20195dc:	d0a05604 	addi	r2,gp,-32424
 20195e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 20195e4:	d0a05b04 	addi	r2,gp,-32404
 20195e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 20195ec:	0001883a 	nop
 20195f0:	e037883a 	mov	sp,fp
 20195f4:	df000017 	ldw	fp,0(sp)
 20195f8:	dec00104 	addi	sp,sp,4
 20195fc:	f800283a 	ret

02019600 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2019600:	defff204 	addi	sp,sp,-56
 2019604:	df000d15 	stw	fp,52(sp)
 2019608:	df000d04 	addi	fp,sp,52
 201960c:	e13ffc15 	stw	r4,-16(fp)
 2019610:	2807883a 	mov	r3,r5
 2019614:	3005883a 	mov	r2,r6
 2019618:	e1ffff15 	stw	r7,-4(fp)
 201961c:	e0fffd0d 	sth	r3,-12(fp)
 2019620:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2019624:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019628:	e0bfff17 	ldw	r2,-4(fp)
 201962c:	1000021e 	bne	r2,zero,2019638 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2019630:	0005883a 	mov	r2,zero
 2019634:	0000b006 	br	20198f8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2019638:	e0bffc17 	ldw	r2,-16(fp)
 201963c:	1000051e 	bne	r2,zero,2019654 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019640:	e0bfff17 	ldw	r2,-4(fp)
 2019644:	00c01b84 	movi	r3,110
 2019648:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201964c:	0005883a 	mov	r2,zero
 2019650:	0000a906 	br	20198f8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2019654:	e0bffc17 	ldw	r2,-16(fp)
 2019658:	10800003 	ldbu	r2,0(r2)
 201965c:	10803fcc 	andi	r2,r2,255
 2019660:	10800160 	cmpeqi	r2,r2,5
 2019664:	1000051e 	bne	r2,zero,201967c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2019668:	e0bfff17 	ldw	r2,-4(fp)
 201966c:	00c00044 	movi	r3,1
 2019670:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019674:	0005883a 	mov	r2,zero
 2019678:	00009f06 	br	20198f8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 201967c:	e0fffe03 	ldbu	r3,-8(fp)
 2019680:	00bfe004 	movi	r2,-128
 2019684:	1884703a 	and	r2,r3,r2
 2019688:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 201968c:	e0bff503 	ldbu	r2,-44(fp)
 2019690:	10000626 	beq	r2,zero,20196ac <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2019694:	e0bffe03 	ldbu	r2,-8(fp)
 2019698:	10801fcc 	andi	r2,r2,127
 201969c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 20196a0:	00800044 	movi	r2,1
 20196a4:	e0bff385 	stb	r2,-50(fp)
 20196a8:	00000106 	br	20196b0 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 20196ac:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 20196b0:	e0bfff17 	ldw	r2,-4(fp)
 20196b4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20196b8:	0005303a 	rdctl	r2,status
 20196bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20196c0:	e0fffb17 	ldw	r3,-20(fp)
 20196c4:	00bfff84 	movi	r2,-2
 20196c8:	1884703a 	and	r2,r3,r2
 20196cc:	1001703a 	wrctl	status,r2
  
  return context;
 20196d0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 20196d4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 20196d8:	e0bffe03 	ldbu	r2,-8(fp)
 20196dc:	10c00060 	cmpeqi	r3,r2,1
 20196e0:	18005f1e 	bne	r3,zero,2019860 <OSFlagAccept+0x260>
 20196e4:	10c00088 	cmpgei	r3,r2,2
 20196e8:	1800021e 	bne	r3,zero,20196f4 <OSFlagAccept+0xf4>
 20196ec:	10003f26 	beq	r2,zero,20197ec <OSFlagAccept+0x1ec>
 20196f0:	00007706 	br	20198d0 <OSFlagAccept+0x2d0>
 20196f4:	10c000a0 	cmpeqi	r3,r2,2
 20196f8:	1800031e 	bne	r3,zero,2019708 <OSFlagAccept+0x108>
 20196fc:	108000e0 	cmpeqi	r2,r2,3
 2019700:	10001e1e 	bne	r2,zero,201977c <OSFlagAccept+0x17c>
 2019704:	00007206 	br	20198d0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2019708:	e0bffc17 	ldw	r2,-16(fp)
 201970c:	10c0020b 	ldhu	r3,8(r2)
 2019710:	e0bffd0b 	ldhu	r2,-12(fp)
 2019714:	1884703a 	and	r2,r3,r2
 2019718:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201971c:	e0fff30b 	ldhu	r3,-52(fp)
 2019720:	e0bffd0b 	ldhu	r2,-12(fp)
 2019724:	18800d1e 	bne	r3,r2,201975c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019728:	e0bff383 	ldbu	r2,-50(fp)
 201972c:	10800058 	cmpnei	r2,r2,1
 2019730:	10000d1e 	bne	r2,zero,2019768 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2019734:	e0bffc17 	ldw	r2,-16(fp)
 2019738:	1080020b 	ldhu	r2,8(r2)
 201973c:	1007883a 	mov	r3,r2
 2019740:	e0bff30b 	ldhu	r2,-52(fp)
 2019744:	0084303a 	nor	r2,zero,r2
 2019748:	1884703a 	and	r2,r3,r2
 201974c:	1007883a 	mov	r3,r2
 2019750:	e0bffc17 	ldw	r2,-16(fp)
 2019754:	10c0020d 	sth	r3,8(r2)
 2019758:	00000306 	br	2019768 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201975c:	e0bfff17 	ldw	r2,-4(fp)
 2019760:	00c01c04 	movi	r3,112
 2019764:	10c00005 	stb	r3,0(r2)
 2019768:	e0bff417 	ldw	r2,-48(fp)
 201976c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019770:	e0bff617 	ldw	r2,-40(fp)
 2019774:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2019778:	00005e06 	br	20198f4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 201977c:	e0bffc17 	ldw	r2,-16(fp)
 2019780:	10c0020b 	ldhu	r3,8(r2)
 2019784:	e0bffd0b 	ldhu	r2,-12(fp)
 2019788:	1884703a 	and	r2,r3,r2
 201978c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2019790:	e0bff30b 	ldhu	r2,-52(fp)
 2019794:	10000d26 	beq	r2,zero,20197cc <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019798:	e0bff383 	ldbu	r2,-50(fp)
 201979c:	10800058 	cmpnei	r2,r2,1
 20197a0:	10000d1e 	bne	r2,zero,20197d8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 20197a4:	e0bffc17 	ldw	r2,-16(fp)
 20197a8:	1080020b 	ldhu	r2,8(r2)
 20197ac:	1007883a 	mov	r3,r2
 20197b0:	e0bff30b 	ldhu	r2,-52(fp)
 20197b4:	0084303a 	nor	r2,zero,r2
 20197b8:	1884703a 	and	r2,r3,r2
 20197bc:	1007883a 	mov	r3,r2
 20197c0:	e0bffc17 	ldw	r2,-16(fp)
 20197c4:	10c0020d 	sth	r3,8(r2)
 20197c8:	00000306 	br	20197d8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20197cc:	e0bfff17 	ldw	r2,-4(fp)
 20197d0:	00c01c04 	movi	r3,112
 20197d4:	10c00005 	stb	r3,0(r2)
 20197d8:	e0bff417 	ldw	r2,-48(fp)
 20197dc:	e0bff715 	stw	r2,-36(fp)
 20197e0:	e0bff717 	ldw	r2,-36(fp)
 20197e4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20197e8:	00004206 	br	20198f4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20197ec:	e0bffc17 	ldw	r2,-16(fp)
 20197f0:	1080020b 	ldhu	r2,8(r2)
 20197f4:	0084303a 	nor	r2,zero,r2
 20197f8:	1007883a 	mov	r3,r2
 20197fc:	e0bffd0b 	ldhu	r2,-12(fp)
 2019800:	1884703a 	and	r2,r3,r2
 2019804:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2019808:	e0fff30b 	ldhu	r3,-52(fp)
 201980c:	e0bffd0b 	ldhu	r2,-12(fp)
 2019810:	18800b1e 	bne	r3,r2,2019840 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019814:	e0bff383 	ldbu	r2,-50(fp)
 2019818:	10800058 	cmpnei	r2,r2,1
 201981c:	10000b1e 	bne	r2,zero,201984c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2019820:	e0bffc17 	ldw	r2,-16(fp)
 2019824:	10c0020b 	ldhu	r3,8(r2)
 2019828:	e0bff30b 	ldhu	r2,-52(fp)
 201982c:	1884b03a 	or	r2,r3,r2
 2019830:	1007883a 	mov	r3,r2
 2019834:	e0bffc17 	ldw	r2,-16(fp)
 2019838:	10c0020d 	sth	r3,8(r2)
 201983c:	00000306 	br	201984c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2019840:	e0bfff17 	ldw	r2,-4(fp)
 2019844:	00c01c04 	movi	r3,112
 2019848:	10c00005 	stb	r3,0(r2)
 201984c:	e0bff417 	ldw	r2,-48(fp)
 2019850:	e0bff815 	stw	r2,-32(fp)
 2019854:	e0bff817 	ldw	r2,-32(fp)
 2019858:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201985c:	00002506 	br	20198f4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2019860:	e0bffc17 	ldw	r2,-16(fp)
 2019864:	1080020b 	ldhu	r2,8(r2)
 2019868:	0084303a 	nor	r2,zero,r2
 201986c:	1007883a 	mov	r3,r2
 2019870:	e0bffd0b 	ldhu	r2,-12(fp)
 2019874:	1884703a 	and	r2,r3,r2
 2019878:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 201987c:	e0bff30b 	ldhu	r2,-52(fp)
 2019880:	10000b26 	beq	r2,zero,20198b0 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2019884:	e0bff383 	ldbu	r2,-50(fp)
 2019888:	10800058 	cmpnei	r2,r2,1
 201988c:	10000b1e 	bne	r2,zero,20198bc <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2019890:	e0bffc17 	ldw	r2,-16(fp)
 2019894:	10c0020b 	ldhu	r3,8(r2)
 2019898:	e0bff30b 	ldhu	r2,-52(fp)
 201989c:	1884b03a 	or	r2,r3,r2
 20198a0:	1007883a 	mov	r3,r2
 20198a4:	e0bffc17 	ldw	r2,-16(fp)
 20198a8:	10c0020d 	sth	r3,8(r2)
 20198ac:	00000306 	br	20198bc <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20198b0:	e0bfff17 	ldw	r2,-4(fp)
 20198b4:	00c01c04 	movi	r3,112
 20198b8:	10c00005 	stb	r3,0(r2)
 20198bc:	e0bff417 	ldw	r2,-48(fp)
 20198c0:	e0bff915 	stw	r2,-28(fp)
 20198c4:	e0bff917 	ldw	r2,-28(fp)
 20198c8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20198cc:	00000906 	br	20198f4 <OSFlagAccept+0x2f4>
 20198d0:	e0bff417 	ldw	r2,-48(fp)
 20198d4:	e0bffa15 	stw	r2,-24(fp)
 20198d8:	e0bffa17 	ldw	r2,-24(fp)
 20198dc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 20198e0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 20198e4:	e0bfff17 	ldw	r2,-4(fp)
 20198e8:	00c01bc4 	movi	r3,111
 20198ec:	10c00005 	stb	r3,0(r2)
             break;
 20198f0:	0001883a 	nop
    }
    return (flags_rdy);
 20198f4:	e0bff30b 	ldhu	r2,-52(fp)
}
 20198f8:	e037883a 	mov	sp,fp
 20198fc:	df000017 	ldw	fp,0(sp)
 2019900:	dec00104 	addi	sp,sp,4
 2019904:	f800283a 	ret

02019908 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 2019908:	defff804 	addi	sp,sp,-32
 201990c:	df000715 	stw	fp,28(sp)
 2019910:	df000704 	addi	fp,sp,28
 2019914:	2005883a 	mov	r2,r4
 2019918:	e17fff15 	stw	r5,-4(fp)
 201991c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2019920:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2019924:	e0bfff17 	ldw	r2,-4(fp)
 2019928:	1000021e 	bne	r2,zero,2019934 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 201992c:	0005883a 	mov	r2,zero
 2019930:	00003306 	br	2019a00 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2019934:	d0a7b503 	ldbu	r2,-24876(gp)
 2019938:	10803fcc 	andi	r2,r2,255
 201993c:	10000526 	beq	r2,zero,2019954 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2019940:	e0bfff17 	ldw	r2,-4(fp)
 2019944:	00c00404 	movi	r3,16
 2019948:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 201994c:	0005883a 	mov	r2,zero
 2019950:	00002b06 	br	2019a00 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019954:	0005303a 	rdctl	r2,status
 2019958:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201995c:	e0fffd17 	ldw	r3,-12(fp)
 2019960:	00bfff84 	movi	r2,-2
 2019964:	1884703a 	and	r2,r3,r2
 2019968:	1001703a 	wrctl	status,r2
  
  return context;
 201996c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2019970:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2019974:	d0a7b817 	ldw	r2,-24864(gp)
 2019978:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 201997c:	e0bffb17 	ldw	r2,-20(fp)
 2019980:	10001726 	beq	r2,zero,20199e0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 2019984:	d0a7b817 	ldw	r2,-24864(gp)
 2019988:	10800117 	ldw	r2,4(r2)
 201998c:	d0a7b815 	stw	r2,-24864(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2019990:	e0bffb17 	ldw	r2,-20(fp)
 2019994:	00c00144 	movi	r3,5
 2019998:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 201999c:	e0bffb17 	ldw	r2,-20(fp)
 20199a0:	e0fffe0b 	ldhu	r3,-8(fp)
 20199a4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 20199a8:	e0bffb17 	ldw	r2,-20(fp)
 20199ac:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 20199b0:	e0bffb17 	ldw	r2,-20(fp)
 20199b4:	00c00fc4 	movi	r3,63
 20199b8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20199bc:	e0bffb17 	ldw	r2,-20(fp)
 20199c0:	100002c5 	stb	zero,11(r2)
 20199c4:	e0bff917 	ldw	r2,-28(fp)
 20199c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20199cc:	e0bffa17 	ldw	r2,-24(fp)
 20199d0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 20199d4:	e0bfff17 	ldw	r2,-4(fp)
 20199d8:	10000005 	stb	zero,0(r2)
 20199dc:	00000706 	br	20199fc <OSFlagCreate+0xf4>
 20199e0:	e0bff917 	ldw	r2,-28(fp)
 20199e4:	e0bffc15 	stw	r2,-16(fp)
 20199e8:	e0bffc17 	ldw	r2,-16(fp)
 20199ec:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 20199f0:	e0bfff17 	ldw	r2,-4(fp)
 20199f4:	00c01c84 	movi	r3,114
 20199f8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 20199fc:	e0bffb17 	ldw	r2,-20(fp)
}
 2019a00:	e037883a 	mov	sp,fp
 2019a04:	df000017 	ldw	fp,0(sp)
 2019a08:	dec00104 	addi	sp,sp,4
 2019a0c:	f800283a 	ret

02019a10 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2019a10:	defff204 	addi	sp,sp,-56
 2019a14:	dfc00d15 	stw	ra,52(sp)
 2019a18:	df000c15 	stw	fp,48(sp)
 2019a1c:	df000c04 	addi	fp,sp,48
 2019a20:	e13ffd15 	stw	r4,-12(fp)
 2019a24:	2805883a 	mov	r2,r5
 2019a28:	e1bfff15 	stw	r6,-4(fp)
 2019a2c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2019a30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019a34:	e0bfff17 	ldw	r2,-4(fp)
 2019a38:	1000021e 	bne	r2,zero,2019a44 <OSFlagDel+0x34>
        return (pgrp);
 2019a3c:	e0bffd17 	ldw	r2,-12(fp)
 2019a40:	00008006 	br	2019c44 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2019a44:	e0bffd17 	ldw	r2,-12(fp)
 2019a48:	1000051e 	bne	r2,zero,2019a60 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019a4c:	e0bfff17 	ldw	r2,-4(fp)
 2019a50:	00c01b84 	movi	r3,110
 2019a54:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2019a58:	e0bffd17 	ldw	r2,-12(fp)
 2019a5c:	00007906 	br	2019c44 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019a60:	d0a7b503 	ldbu	r2,-24876(gp)
 2019a64:	10803fcc 	andi	r2,r2,255
 2019a68:	10000526 	beq	r2,zero,2019a80 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2019a6c:	e0bfff17 	ldw	r2,-4(fp)
 2019a70:	00c003c4 	movi	r3,15
 2019a74:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2019a78:	e0bffd17 	ldw	r2,-12(fp)
 2019a7c:	00007106 	br	2019c44 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2019a80:	e0bffd17 	ldw	r2,-12(fp)
 2019a84:	10800003 	ldbu	r2,0(r2)
 2019a88:	10803fcc 	andi	r2,r2,255
 2019a8c:	10800160 	cmpeqi	r2,r2,5
 2019a90:	1000051e 	bne	r2,zero,2019aa8 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 2019a94:	e0bfff17 	ldw	r2,-4(fp)
 2019a98:	00c00044 	movi	r3,1
 2019a9c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 2019aa0:	e0bffd17 	ldw	r2,-12(fp)
 2019aa4:	00006706 	br	2019c44 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019aa8:	0005303a 	rdctl	r2,status
 2019aac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019ab0:	e0fffc17 	ldw	r3,-16(fp)
 2019ab4:	00bfff84 	movi	r2,-2
 2019ab8:	1884703a 	and	r2,r3,r2
 2019abc:	1001703a 	wrctl	status,r2
  
  return context;
 2019ac0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019ac4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2019ac8:	e0bffd17 	ldw	r2,-12(fp)
 2019acc:	10800117 	ldw	r2,4(r2)
 2019ad0:	10000326 	beq	r2,zero,2019ae0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2019ad4:	00800044 	movi	r2,1
 2019ad8:	e0bff405 	stb	r2,-48(fp)
 2019adc:	00000106 	br	2019ae4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2019ae0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2019ae4:	e0bffe03 	ldbu	r2,-8(fp)
 2019ae8:	10000326 	beq	r2,zero,2019af8 <OSFlagDel+0xe8>
 2019aec:	10800060 	cmpeqi	r2,r2,1
 2019af0:	1000231e 	bne	r2,zero,2019b80 <OSFlagDel+0x170>
 2019af4:	00004806 	br	2019c18 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 2019af8:	e0bff403 	ldbu	r2,-48(fp)
 2019afc:	1000161e 	bne	r2,zero,2019b58 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2019b00:	e0bffd17 	ldw	r2,-12(fp)
 2019b04:	00c00fc4 	movi	r3,63
 2019b08:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2019b0c:	e0bffd17 	ldw	r2,-12(fp)
 2019b10:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2019b14:	e0bffd17 	ldw	r2,-12(fp)
 2019b18:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2019b1c:	d0e7b817 	ldw	r3,-24864(gp)
 2019b20:	e0bffd17 	ldw	r2,-12(fp)
 2019b24:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2019b28:	e0bffd17 	ldw	r2,-12(fp)
 2019b2c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2019b30:	e0bffd17 	ldw	r2,-12(fp)
 2019b34:	d0a7b815 	stw	r2,-24864(gp)
 2019b38:	e0bff717 	ldw	r2,-36(fp)
 2019b3c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019b40:	e0bff817 	ldw	r2,-32(fp)
 2019b44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2019b48:	e0bfff17 	ldw	r2,-4(fp)
 2019b4c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2019b50:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 2019b54:	00003a06 	br	2019c40 <OSFlagDel+0x230>
 2019b58:	e0bff717 	ldw	r2,-36(fp)
 2019b5c:	e0bff915 	stw	r2,-28(fp)
 2019b60:	e0bff917 	ldw	r2,-28(fp)
 2019b64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2019b68:	e0bfff17 	ldw	r2,-4(fp)
 2019b6c:	00c01244 	movi	r3,73
 2019b70:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 2019b74:	e0bffd17 	ldw	r2,-12(fp)
 2019b78:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2019b7c:	00003006 	br	2019c40 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2019b80:	e0bffd17 	ldw	r2,-12(fp)
 2019b84:	10800117 	ldw	r2,4(r2)
 2019b88:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2019b8c:	00000606 	br	2019ba8 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2019b90:	000b883a 	mov	r5,zero
 2019b94:	e13ff517 	ldw	r4,-44(fp)
 2019b98:	201ab7c0 	call	201ab7c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2019b9c:	e0bff517 	ldw	r2,-44(fp)
 2019ba0:	10800017 	ldw	r2,0(r2)
 2019ba4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2019ba8:	e0bff517 	ldw	r2,-44(fp)
 2019bac:	103ff81e 	bne	r2,zero,2019b90 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2019bb0:	e0bffd17 	ldw	r2,-12(fp)
 2019bb4:	00c00fc4 	movi	r3,63
 2019bb8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2019bbc:	e0bffd17 	ldw	r2,-12(fp)
 2019bc0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2019bc4:	e0bffd17 	ldw	r2,-12(fp)
 2019bc8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 2019bcc:	d0e7b817 	ldw	r3,-24864(gp)
 2019bd0:	e0bffd17 	ldw	r2,-12(fp)
 2019bd4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2019bd8:	e0bffd17 	ldw	r2,-12(fp)
 2019bdc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 2019be0:	e0bffd17 	ldw	r2,-12(fp)
 2019be4:	d0a7b815 	stw	r2,-24864(gp)
 2019be8:	e0bff717 	ldw	r2,-36(fp)
 2019bec:	e0bffa15 	stw	r2,-24(fp)
 2019bf0:	e0bffa17 	ldw	r2,-24(fp)
 2019bf4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2019bf8:	e0bff403 	ldbu	r2,-48(fp)
 2019bfc:	10800058 	cmpnei	r2,r2,1
 2019c00:	1000011e 	bne	r2,zero,2019c08 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2019c04:	2018d9c0 	call	2018d9c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 2019c08:	e0bfff17 	ldw	r2,-4(fp)
 2019c0c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2019c10:	e03ff615 	stw	zero,-40(fp)
             break;
 2019c14:	00000a06 	br	2019c40 <OSFlagDel+0x230>
 2019c18:	e0bff717 	ldw	r2,-36(fp)
 2019c1c:	e0bffb15 	stw	r2,-20(fp)
 2019c20:	e0bffb17 	ldw	r2,-20(fp)
 2019c24:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2019c28:	e0bfff17 	ldw	r2,-4(fp)
 2019c2c:	00c001c4 	movi	r3,7
 2019c30:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2019c34:	e0bffd17 	ldw	r2,-12(fp)
 2019c38:	e0bff615 	stw	r2,-40(fp)
             break;
 2019c3c:	0001883a 	nop
    }
    return (pgrp_return);
 2019c40:	e0bff617 	ldw	r2,-40(fp)
}
 2019c44:	e037883a 	mov	sp,fp
 2019c48:	dfc00117 	ldw	ra,4(sp)
 2019c4c:	df000017 	ldw	fp,0(sp)
 2019c50:	dec00204 	addi	sp,sp,8
 2019c54:	f800283a 	ret

02019c58 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2019c58:	defff604 	addi	sp,sp,-40
 2019c5c:	dfc00915 	stw	ra,36(sp)
 2019c60:	df000815 	stw	fp,32(sp)
 2019c64:	df000804 	addi	fp,sp,32
 2019c68:	e13ffd15 	stw	r4,-12(fp)
 2019c6c:	e17ffe15 	stw	r5,-8(fp)
 2019c70:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019c74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2019c78:	e0bfff17 	ldw	r2,-4(fp)
 2019c7c:	1000021e 	bne	r2,zero,2019c88 <OSFlagNameGet+0x30>
        return (0);
 2019c80:	0005883a 	mov	r2,zero
 2019c84:	00003906 	br	2019d6c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2019c88:	e0bffd17 	ldw	r2,-12(fp)
 2019c8c:	1000051e 	bne	r2,zero,2019ca4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019c90:	e0bfff17 	ldw	r2,-4(fp)
 2019c94:	00c01b84 	movi	r3,110
 2019c98:	10c00005 	stb	r3,0(r2)
        return (0);
 2019c9c:	0005883a 	mov	r2,zero
 2019ca0:	00003206 	br	2019d6c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2019ca4:	e0bffe17 	ldw	r2,-8(fp)
 2019ca8:	1000051e 	bne	r2,zero,2019cc0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2019cac:	e0bfff17 	ldw	r2,-4(fp)
 2019cb0:	00c00304 	movi	r3,12
 2019cb4:	10c00005 	stb	r3,0(r2)
        return (0);
 2019cb8:	0005883a 	mov	r2,zero
 2019cbc:	00002b06 	br	2019d6c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2019cc0:	d0a7b503 	ldbu	r2,-24876(gp)
 2019cc4:	10803fcc 	andi	r2,r2,255
 2019cc8:	10000526 	beq	r2,zero,2019ce0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2019ccc:	e0bfff17 	ldw	r2,-4(fp)
 2019cd0:	00c00444 	movi	r3,17
 2019cd4:	10c00005 	stb	r3,0(r2)
        return (0);
 2019cd8:	0005883a 	mov	r2,zero
 2019cdc:	00002306 	br	2019d6c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019ce0:	0005303a 	rdctl	r2,status
 2019ce4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019ce8:	e0fffc17 	ldw	r3,-16(fp)
 2019cec:	00bfff84 	movi	r2,-2
 2019cf0:	1884703a 	and	r2,r3,r2
 2019cf4:	1001703a 	wrctl	status,r2
  
  return context;
 2019cf8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019cfc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2019d00:	e0bffd17 	ldw	r2,-12(fp)
 2019d04:	10800003 	ldbu	r2,0(r2)
 2019d08:	10803fcc 	andi	r2,r2,255
 2019d0c:	10800160 	cmpeqi	r2,r2,5
 2019d10:	1000091e 	bne	r2,zero,2019d38 <OSFlagNameGet+0xe0>
 2019d14:	e0bff817 	ldw	r2,-32(fp)
 2019d18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019d1c:	e0bff917 	ldw	r2,-28(fp)
 2019d20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2019d24:	e0bfff17 	ldw	r2,-4(fp)
 2019d28:	00c00044 	movi	r3,1
 2019d2c:	10c00005 	stb	r3,0(r2)
        return (0);
 2019d30:	0005883a 	mov	r2,zero
 2019d34:	00000d06 	br	2019d6c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2019d38:	e0bffd17 	ldw	r2,-12(fp)
 2019d3c:	10800284 	addi	r2,r2,10
 2019d40:	100b883a 	mov	r5,r2
 2019d44:	e13ffe17 	ldw	r4,-8(fp)
 2019d48:	2018ee00 	call	2018ee0 <OS_StrCopy>
 2019d4c:	e0bffb05 	stb	r2,-20(fp)
 2019d50:	e0bff817 	ldw	r2,-32(fp)
 2019d54:	e0bffa15 	stw	r2,-24(fp)
 2019d58:	e0bffa17 	ldw	r2,-24(fp)
 2019d5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019d60:	e0bfff17 	ldw	r2,-4(fp)
 2019d64:	10000005 	stb	zero,0(r2)
    return (len);
 2019d68:	e0bffb03 	ldbu	r2,-20(fp)
}
 2019d6c:	e037883a 	mov	sp,fp
 2019d70:	dfc00117 	ldw	ra,4(sp)
 2019d74:	df000017 	ldw	fp,0(sp)
 2019d78:	dec00204 	addi	sp,sp,8
 2019d7c:	f800283a 	ret

02019d80 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2019d80:	defff504 	addi	sp,sp,-44
 2019d84:	dfc00a15 	stw	ra,40(sp)
 2019d88:	df000915 	stw	fp,36(sp)
 2019d8c:	df000904 	addi	fp,sp,36
 2019d90:	e13ffd15 	stw	r4,-12(fp)
 2019d94:	e17ffe15 	stw	r5,-8(fp)
 2019d98:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019d9c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2019da0:	e0bfff17 	ldw	r2,-4(fp)
 2019da4:	10004326 	beq	r2,zero,2019eb4 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2019da8:	e0bffd17 	ldw	r2,-12(fp)
 2019dac:	1000041e 	bne	r2,zero,2019dc0 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019db0:	e0bfff17 	ldw	r2,-4(fp)
 2019db4:	00c01b84 	movi	r3,110
 2019db8:	10c00005 	stb	r3,0(r2)
        return;
 2019dbc:	00003e06 	br	2019eb8 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2019dc0:	e0bffe17 	ldw	r2,-8(fp)
 2019dc4:	1000041e 	bne	r2,zero,2019dd8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2019dc8:	e0bfff17 	ldw	r2,-4(fp)
 2019dcc:	00c00304 	movi	r3,12
 2019dd0:	10c00005 	stb	r3,0(r2)
        return;
 2019dd4:	00003806 	br	2019eb8 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2019dd8:	d0a7b503 	ldbu	r2,-24876(gp)
 2019ddc:	10803fcc 	andi	r2,r2,255
 2019de0:	10000426 	beq	r2,zero,2019df4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2019de4:	e0bfff17 	ldw	r2,-4(fp)
 2019de8:	00c00484 	movi	r3,18
 2019dec:	10c00005 	stb	r3,0(r2)
        return;
 2019df0:	00003106 	br	2019eb8 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019df4:	0005303a 	rdctl	r2,status
 2019df8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019dfc:	e0fffc17 	ldw	r3,-16(fp)
 2019e00:	00bfff84 	movi	r2,-2
 2019e04:	1884703a 	and	r2,r3,r2
 2019e08:	1001703a 	wrctl	status,r2
  
  return context;
 2019e0c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019e10:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2019e14:	e0bffd17 	ldw	r2,-12(fp)
 2019e18:	10800003 	ldbu	r2,0(r2)
 2019e1c:	10803fcc 	andi	r2,r2,255
 2019e20:	10800160 	cmpeqi	r2,r2,5
 2019e24:	1000081e 	bne	r2,zero,2019e48 <OSFlagNameSet+0xc8>
 2019e28:	e0bff717 	ldw	r2,-36(fp)
 2019e2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019e30:	e0bff817 	ldw	r2,-32(fp)
 2019e34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2019e38:	e0bfff17 	ldw	r2,-4(fp)
 2019e3c:	00c00044 	movi	r3,1
 2019e40:	10c00005 	stb	r3,0(r2)
        return;
 2019e44:	00001c06 	br	2019eb8 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2019e48:	e13ffe17 	ldw	r4,-8(fp)
 2019e4c:	2018f540 	call	2018f54 <OS_StrLen>
 2019e50:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2019e54:	e0bffa03 	ldbu	r2,-24(fp)
 2019e58:	10800830 	cmpltui	r2,r2,32
 2019e5c:	1000081e 	bne	r2,zero,2019e80 <OSFlagNameSet+0x100>
 2019e60:	e0bff717 	ldw	r2,-36(fp)
 2019e64:	e0bff915 	stw	r2,-28(fp)
 2019e68:	e0bff917 	ldw	r2,-28(fp)
 2019e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2019e70:	e0bfff17 	ldw	r2,-4(fp)
 2019e74:	00c01cc4 	movi	r3,115
 2019e78:	10c00005 	stb	r3,0(r2)
        return;
 2019e7c:	00000e06 	br	2019eb8 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2019e80:	e0bffd17 	ldw	r2,-12(fp)
 2019e84:	10800284 	addi	r2,r2,10
 2019e88:	e17ffe17 	ldw	r5,-8(fp)
 2019e8c:	1009883a 	mov	r4,r2
 2019e90:	2018ee00 	call	2018ee0 <OS_StrCopy>
 2019e94:	e0bff717 	ldw	r2,-36(fp)
 2019e98:	e0bffb15 	stw	r2,-20(fp)
 2019e9c:	e0bffb17 	ldw	r2,-20(fp)
 2019ea0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019ea4:	e0bfff17 	ldw	r2,-4(fp)
 2019ea8:	10000005 	stb	zero,0(r2)
    return;
 2019eac:	0001883a 	nop
 2019eb0:	00000106 	br	2019eb8 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2019eb4:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2019eb8:	e037883a 	mov	sp,fp
 2019ebc:	dfc00117 	ldw	ra,4(sp)
 2019ec0:	df000017 	ldw	fp,0(sp)
 2019ec4:	dec00204 	addi	sp,sp,8
 2019ec8:	f800283a 	ret

02019ecc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 2019ecc:	deffe104 	addi	sp,sp,-124
 2019ed0:	dfc01e15 	stw	ra,120(sp)
 2019ed4:	df001d15 	stw	fp,116(sp)
 2019ed8:	df001d04 	addi	fp,sp,116
 2019edc:	e13ffc15 	stw	r4,-16(fp)
 2019ee0:	2809883a 	mov	r4,r5
 2019ee4:	3007883a 	mov	r3,r6
 2019ee8:	3805883a 	mov	r2,r7
 2019eec:	e13ffd0d 	sth	r4,-12(fp)
 2019ef0:	e0fffe05 	stb	r3,-8(fp)
 2019ef4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2019ef8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019efc:	e0800217 	ldw	r2,8(fp)
 2019f00:	1000021e 	bne	r2,zero,2019f0c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 2019f04:	0005883a 	mov	r2,zero
 2019f08:	00015906 	br	201a470 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2019f0c:	e0bffc17 	ldw	r2,-16(fp)
 2019f10:	1000051e 	bne	r2,zero,2019f28 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019f14:	e0800217 	ldw	r2,8(fp)
 2019f18:	00c01b84 	movi	r3,110
 2019f1c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019f20:	0005883a 	mov	r2,zero
 2019f24:	00015206 	br	201a470 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019f28:	d0a7b503 	ldbu	r2,-24876(gp)
 2019f2c:	10803fcc 	andi	r2,r2,255
 2019f30:	10000526 	beq	r2,zero,2019f48 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2019f34:	e0800217 	ldw	r2,8(fp)
 2019f38:	00c00084 	movi	r3,2
 2019f3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019f40:	0005883a 	mov	r2,zero
 2019f44:	00014a06 	br	201a470 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2019f48:	d0a7a703 	ldbu	r2,-24932(gp)
 2019f4c:	10803fcc 	andi	r2,r2,255
 2019f50:	10000526 	beq	r2,zero,2019f68 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2019f54:	e0800217 	ldw	r2,8(fp)
 2019f58:	00c00344 	movi	r3,13
 2019f5c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019f60:	0005883a 	mov	r2,zero
 2019f64:	00014206 	br	201a470 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2019f68:	e0bffc17 	ldw	r2,-16(fp)
 2019f6c:	10800003 	ldbu	r2,0(r2)
 2019f70:	10803fcc 	andi	r2,r2,255
 2019f74:	10800160 	cmpeqi	r2,r2,5
 2019f78:	1000051e 	bne	r2,zero,2019f90 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 2019f7c:	e0800217 	ldw	r2,8(fp)
 2019f80:	00c00044 	movi	r3,1
 2019f84:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019f88:	0005883a 	mov	r2,zero
 2019f8c:	00013806 	br	201a470 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2019f90:	e0fffe03 	ldbu	r3,-8(fp)
 2019f94:	00bfe004 	movi	r2,-128
 2019f98:	1884703a 	and	r2,r3,r2
 2019f9c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2019fa0:	e0bfe603 	ldbu	r2,-104(fp)
 2019fa4:	10000626 	beq	r2,zero,2019fc0 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2019fa8:	e0bffe03 	ldbu	r2,-8(fp)
 2019fac:	10801fcc 	andi	r2,r2,127
 2019fb0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2019fb4:	00800044 	movi	r2,1
 2019fb8:	e0bfe405 	stb	r2,-112(fp)
 2019fbc:	00000106 	br	2019fc4 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2019fc0:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019fc4:	0005303a 	rdctl	r2,status
 2019fc8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019fcc:	e0fff617 	ldw	r3,-40(fp)
 2019fd0:	00bfff84 	movi	r2,-2
 2019fd4:	1884703a 	and	r2,r3,r2
 2019fd8:	1001703a 	wrctl	status,r2
  
  return context;
 2019fdc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2019fe0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 2019fe4:	e0bffe03 	ldbu	r2,-8(fp)
 2019fe8:	10c00060 	cmpeqi	r3,r2,1
 2019fec:	1800921e 	bne	r3,zero,201a238 <OSFlagPend+0x36c>
 2019ff0:	10c00088 	cmpgei	r3,r2,2
 2019ff4:	1800021e 	bne	r3,zero,201a000 <OSFlagPend+0x134>
 2019ff8:	10006126 	beq	r2,zero,201a180 <OSFlagPend+0x2b4>
 2019ffc:	0000bb06 	br	201a2ec <OSFlagPend+0x420>
 201a000:	10c000a0 	cmpeqi	r3,r2,2
 201a004:	1800031e 	bne	r3,zero,201a014 <OSFlagPend+0x148>
 201a008:	108000e0 	cmpeqi	r2,r2,3
 201a00c:	10002f1e 	bne	r2,zero,201a0cc <OSFlagPend+0x200>
 201a010:	0000b606 	br	201a2ec <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 201a014:	e0bffc17 	ldw	r2,-16(fp)
 201a018:	10c0020b 	ldhu	r3,8(r2)
 201a01c:	e0bffd0b 	ldhu	r2,-12(fp)
 201a020:	1884703a 	and	r2,r3,r2
 201a024:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201a028:	e0ffe80b 	ldhu	r3,-96(fp)
 201a02c:	e0bffd0b 	ldhu	r2,-12(fp)
 201a030:	1880171e 	bne	r3,r2,201a090 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a034:	e0bfe403 	ldbu	r2,-112(fp)
 201a038:	10800058 	cmpnei	r2,r2,1
 201a03c:	1000091e 	bne	r2,zero,201a064 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 201a040:	e0bffc17 	ldw	r2,-16(fp)
 201a044:	1080020b 	ldhu	r2,8(r2)
 201a048:	1007883a 	mov	r3,r2
 201a04c:	e0bfe80b 	ldhu	r2,-96(fp)
 201a050:	0084303a 	nor	r2,zero,r2
 201a054:	1884703a 	and	r2,r3,r2
 201a058:	1007883a 	mov	r3,r2
 201a05c:	e0bffc17 	ldw	r2,-16(fp)
 201a060:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201a064:	d0a7b617 	ldw	r2,-24872(gp)
 201a068:	e0ffe80b 	ldhu	r3,-96(fp)
 201a06c:	10c00b0d 	sth	r3,44(r2)
 201a070:	e0bfe517 	ldw	r2,-108(fp)
 201a074:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a078:	e0bfe717 	ldw	r2,-100(fp)
 201a07c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201a080:	e0800217 	ldw	r2,8(fp)
 201a084:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201a088:	e0bfe80b 	ldhu	r2,-96(fp)
 201a08c:	0000f806 	br	201a470 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201a090:	e13ffd0b 	ldhu	r4,-12(fp)
 201a094:	e17ffe03 	ldbu	r5,-8(fp)
 201a098:	e0bfff0b 	ldhu	r2,-4(fp)
 201a09c:	e0fff704 	addi	r3,fp,-36
 201a0a0:	d8800015 	stw	r2,0(sp)
 201a0a4:	280f883a 	mov	r7,r5
 201a0a8:	200d883a 	mov	r6,r4
 201a0ac:	180b883a 	mov	r5,r3
 201a0b0:	e13ffc17 	ldw	r4,-16(fp)
 201a0b4:	201a93c0 	call	201a93c <OS_FlagBlock>
 201a0b8:	e0bfe517 	ldw	r2,-108(fp)
 201a0bc:	e0bfe915 	stw	r2,-92(fp)
 201a0c0:	e0bfe917 	ldw	r2,-92(fp)
 201a0c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201a0c8:	00009206 	br	201a314 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 201a0cc:	e0bffc17 	ldw	r2,-16(fp)
 201a0d0:	10c0020b 	ldhu	r3,8(r2)
 201a0d4:	e0bffd0b 	ldhu	r2,-12(fp)
 201a0d8:	1884703a 	and	r2,r3,r2
 201a0dc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 201a0e0:	e0bfe80b 	ldhu	r2,-96(fp)
 201a0e4:	10001726 	beq	r2,zero,201a144 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a0e8:	e0bfe403 	ldbu	r2,-112(fp)
 201a0ec:	10800058 	cmpnei	r2,r2,1
 201a0f0:	1000091e 	bne	r2,zero,201a118 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 201a0f4:	e0bffc17 	ldw	r2,-16(fp)
 201a0f8:	1080020b 	ldhu	r2,8(r2)
 201a0fc:	1007883a 	mov	r3,r2
 201a100:	e0bfe80b 	ldhu	r2,-96(fp)
 201a104:	0084303a 	nor	r2,zero,r2
 201a108:	1884703a 	and	r2,r3,r2
 201a10c:	1007883a 	mov	r3,r2
 201a110:	e0bffc17 	ldw	r2,-16(fp)
 201a114:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201a118:	d0a7b617 	ldw	r2,-24872(gp)
 201a11c:	e0ffe80b 	ldhu	r3,-96(fp)
 201a120:	10c00b0d 	sth	r3,44(r2)
 201a124:	e0bfe517 	ldw	r2,-108(fp)
 201a128:	e0bfea15 	stw	r2,-88(fp)
 201a12c:	e0bfea17 	ldw	r2,-88(fp)
 201a130:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201a134:	e0800217 	ldw	r2,8(fp)
 201a138:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201a13c:	e0bfe80b 	ldhu	r2,-96(fp)
 201a140:	0000cb06 	br	201a470 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201a144:	e13ffd0b 	ldhu	r4,-12(fp)
 201a148:	e17ffe03 	ldbu	r5,-8(fp)
 201a14c:	e0bfff0b 	ldhu	r2,-4(fp)
 201a150:	e0fff704 	addi	r3,fp,-36
 201a154:	d8800015 	stw	r2,0(sp)
 201a158:	280f883a 	mov	r7,r5
 201a15c:	200d883a 	mov	r6,r4
 201a160:	180b883a 	mov	r5,r3
 201a164:	e13ffc17 	ldw	r4,-16(fp)
 201a168:	201a93c0 	call	201a93c <OS_FlagBlock>
 201a16c:	e0bfe517 	ldw	r2,-108(fp)
 201a170:	e0bfeb15 	stw	r2,-84(fp)
 201a174:	e0bfeb17 	ldw	r2,-84(fp)
 201a178:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201a17c:	00006506 	br	201a314 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 201a180:	e0bffc17 	ldw	r2,-16(fp)
 201a184:	1080020b 	ldhu	r2,8(r2)
 201a188:	0084303a 	nor	r2,zero,r2
 201a18c:	1007883a 	mov	r3,r2
 201a190:	e0bffd0b 	ldhu	r2,-12(fp)
 201a194:	1884703a 	and	r2,r3,r2
 201a198:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201a19c:	e0ffe80b 	ldhu	r3,-96(fp)
 201a1a0:	e0bffd0b 	ldhu	r2,-12(fp)
 201a1a4:	1880151e 	bne	r3,r2,201a1fc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a1a8:	e0bfe403 	ldbu	r2,-112(fp)
 201a1ac:	10800058 	cmpnei	r2,r2,1
 201a1b0:	1000071e 	bne	r2,zero,201a1d0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 201a1b4:	e0bffc17 	ldw	r2,-16(fp)
 201a1b8:	10c0020b 	ldhu	r3,8(r2)
 201a1bc:	e0bfe80b 	ldhu	r2,-96(fp)
 201a1c0:	1884b03a 	or	r2,r3,r2
 201a1c4:	1007883a 	mov	r3,r2
 201a1c8:	e0bffc17 	ldw	r2,-16(fp)
 201a1cc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201a1d0:	d0a7b617 	ldw	r2,-24872(gp)
 201a1d4:	e0ffe80b 	ldhu	r3,-96(fp)
 201a1d8:	10c00b0d 	sth	r3,44(r2)
 201a1dc:	e0bfe517 	ldw	r2,-108(fp)
 201a1e0:	e0bfec15 	stw	r2,-80(fp)
 201a1e4:	e0bfec17 	ldw	r2,-80(fp)
 201a1e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201a1ec:	e0800217 	ldw	r2,8(fp)
 201a1f0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201a1f4:	e0bfe80b 	ldhu	r2,-96(fp)
 201a1f8:	00009d06 	br	201a470 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201a1fc:	e13ffd0b 	ldhu	r4,-12(fp)
 201a200:	e17ffe03 	ldbu	r5,-8(fp)
 201a204:	e0bfff0b 	ldhu	r2,-4(fp)
 201a208:	e0fff704 	addi	r3,fp,-36
 201a20c:	d8800015 	stw	r2,0(sp)
 201a210:	280f883a 	mov	r7,r5
 201a214:	200d883a 	mov	r6,r4
 201a218:	180b883a 	mov	r5,r3
 201a21c:	e13ffc17 	ldw	r4,-16(fp)
 201a220:	201a93c0 	call	201a93c <OS_FlagBlock>
 201a224:	e0bfe517 	ldw	r2,-108(fp)
 201a228:	e0bfed15 	stw	r2,-76(fp)
 201a22c:	e0bfed17 	ldw	r2,-76(fp)
 201a230:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201a234:	00003706 	br	201a314 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 201a238:	e0bffc17 	ldw	r2,-16(fp)
 201a23c:	1080020b 	ldhu	r2,8(r2)
 201a240:	0084303a 	nor	r2,zero,r2
 201a244:	1007883a 	mov	r3,r2
 201a248:	e0bffd0b 	ldhu	r2,-12(fp)
 201a24c:	1884703a 	and	r2,r3,r2
 201a250:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 201a254:	e0bfe80b 	ldhu	r2,-96(fp)
 201a258:	10001526 	beq	r2,zero,201a2b0 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a25c:	e0bfe403 	ldbu	r2,-112(fp)
 201a260:	10800058 	cmpnei	r2,r2,1
 201a264:	1000071e 	bne	r2,zero,201a284 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 201a268:	e0bffc17 	ldw	r2,-16(fp)
 201a26c:	10c0020b 	ldhu	r3,8(r2)
 201a270:	e0bfe80b 	ldhu	r2,-96(fp)
 201a274:	1884b03a 	or	r2,r3,r2
 201a278:	1007883a 	mov	r3,r2
 201a27c:	e0bffc17 	ldw	r2,-16(fp)
 201a280:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201a284:	d0a7b617 	ldw	r2,-24872(gp)
 201a288:	e0ffe80b 	ldhu	r3,-96(fp)
 201a28c:	10c00b0d 	sth	r3,44(r2)
 201a290:	e0bfe517 	ldw	r2,-108(fp)
 201a294:	e0bfee15 	stw	r2,-72(fp)
 201a298:	e0bfee17 	ldw	r2,-72(fp)
 201a29c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201a2a0:	e0800217 	ldw	r2,8(fp)
 201a2a4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201a2a8:	e0bfe80b 	ldhu	r2,-96(fp)
 201a2ac:	00007006 	br	201a470 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201a2b0:	e13ffd0b 	ldhu	r4,-12(fp)
 201a2b4:	e17ffe03 	ldbu	r5,-8(fp)
 201a2b8:	e0bfff0b 	ldhu	r2,-4(fp)
 201a2bc:	e0fff704 	addi	r3,fp,-36
 201a2c0:	d8800015 	stw	r2,0(sp)
 201a2c4:	280f883a 	mov	r7,r5
 201a2c8:	200d883a 	mov	r6,r4
 201a2cc:	180b883a 	mov	r5,r3
 201a2d0:	e13ffc17 	ldw	r4,-16(fp)
 201a2d4:	201a93c0 	call	201a93c <OS_FlagBlock>
 201a2d8:	e0bfe517 	ldw	r2,-108(fp)
 201a2dc:	e0bfef15 	stw	r2,-68(fp)
 201a2e0:	e0bfef17 	ldw	r2,-68(fp)
 201a2e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201a2e8:	00000a06 	br	201a314 <OSFlagPend+0x448>
 201a2ec:	e0bfe517 	ldw	r2,-108(fp)
 201a2f0:	e0bff015 	stw	r2,-64(fp)
 201a2f4:	e0bff017 	ldw	r2,-64(fp)
 201a2f8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 201a2fc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 201a300:	e0800217 	ldw	r2,8(fp)
 201a304:	00c01bc4 	movi	r3,111
 201a308:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 201a30c:	e0bfe80b 	ldhu	r2,-96(fp)
 201a310:	00005706 	br	201a470 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 201a314:	2018d9c0 	call	2018d9c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a318:	0005303a 	rdctl	r2,status
 201a31c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a320:	e0fff117 	ldw	r3,-60(fp)
 201a324:	00bfff84 	movi	r2,-2
 201a328:	1884703a 	and	r2,r3,r2
 201a32c:	1001703a 	wrctl	status,r2
  
  return context;
 201a330:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 201a334:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 201a338:	d0a7b617 	ldw	r2,-24872(gp)
 201a33c:	10800c43 	ldbu	r2,49(r2)
 201a340:	10803fcc 	andi	r2,r2,255
 201a344:	10001c26 	beq	r2,zero,201a3b8 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 201a348:	d0a7b617 	ldw	r2,-24872(gp)
 201a34c:	10800c43 	ldbu	r2,49(r2)
 201a350:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201a354:	d0a7b617 	ldw	r2,-24872(gp)
 201a358:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 201a35c:	e0bff704 	addi	r2,fp,-36
 201a360:	1009883a 	mov	r4,r2
 201a364:	201ac700 	call	201ac70 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 201a368:	d0a7b617 	ldw	r2,-24872(gp)
 201a36c:	10000c05 	stb	zero,48(r2)
 201a370:	e0bfe517 	ldw	r2,-108(fp)
 201a374:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a378:	e0bff217 	ldw	r2,-56(fp)
 201a37c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 201a380:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 201a384:	e0bff303 	ldbu	r2,-52(fp)
 201a388:	108000a0 	cmpeqi	r2,r2,2
 201a38c:	10000426 	beq	r2,zero,201a3a0 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 201a390:	e0800217 	ldw	r2,8(fp)
 201a394:	00c00384 	movi	r3,14
 201a398:	10c00005 	stb	r3,0(r2)
                 break;
 201a39c:	00000406 	br	201a3b0 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 201a3a0:	e0800217 	ldw	r2,8(fp)
 201a3a4:	00c00284 	movi	r3,10
 201a3a8:	10c00005 	stb	r3,0(r2)
                 break;
 201a3ac:	0001883a 	nop
        }
        return (flags_rdy);
 201a3b0:	e0bfe80b 	ldhu	r2,-96(fp)
 201a3b4:	00002e06 	br	201a470 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 201a3b8:	d0a7b617 	ldw	r2,-24872(gp)
 201a3bc:	10800b0b 	ldhu	r2,44(r2)
 201a3c0:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 201a3c4:	e0bfe403 	ldbu	r2,-112(fp)
 201a3c8:	10800058 	cmpnei	r2,r2,1
 201a3cc:	1000211e 	bne	r2,zero,201a454 <OSFlagPend+0x588>
        switch (wait_type) {
 201a3d0:	e0bffe03 	ldbu	r2,-8(fp)
 201a3d4:	10001616 	blt	r2,zero,201a430 <OSFlagPend+0x564>
 201a3d8:	10c00090 	cmplti	r3,r2,2
 201a3dc:	18000c1e 	bne	r3,zero,201a410 <OSFlagPend+0x544>
 201a3e0:	10800108 	cmpgei	r2,r2,4
 201a3e4:	1000121e 	bne	r2,zero,201a430 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 201a3e8:	e0bffc17 	ldw	r2,-16(fp)
 201a3ec:	1080020b 	ldhu	r2,8(r2)
 201a3f0:	1007883a 	mov	r3,r2
 201a3f4:	e0bfe80b 	ldhu	r2,-96(fp)
 201a3f8:	0084303a 	nor	r2,zero,r2
 201a3fc:	1884703a 	and	r2,r3,r2
 201a400:	1007883a 	mov	r3,r2
 201a404:	e0bffc17 	ldw	r2,-16(fp)
 201a408:	10c0020d 	sth	r3,8(r2)
                 break;
 201a40c:	00001106 	br	201a454 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 201a410:	e0bffc17 	ldw	r2,-16(fp)
 201a414:	10c0020b 	ldhu	r3,8(r2)
 201a418:	e0bfe80b 	ldhu	r2,-96(fp)
 201a41c:	1884b03a 	or	r2,r3,r2
 201a420:	1007883a 	mov	r3,r2
 201a424:	e0bffc17 	ldw	r2,-16(fp)
 201a428:	10c0020d 	sth	r3,8(r2)
                 break;
 201a42c:	00000906 	br	201a454 <OSFlagPend+0x588>
 201a430:	e0bfe517 	ldw	r2,-108(fp)
 201a434:	e0bff415 	stw	r2,-48(fp)
 201a438:	e0bff417 	ldw	r2,-48(fp)
 201a43c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 201a440:	e0800217 	ldw	r2,8(fp)
 201a444:	00c01bc4 	movi	r3,111
 201a448:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 201a44c:	0005883a 	mov	r2,zero
 201a450:	00000706 	br	201a470 <OSFlagPend+0x5a4>
 201a454:	e0bfe517 	ldw	r2,-108(fp)
 201a458:	e0bff515 	stw	r2,-44(fp)
 201a45c:	e0bff517 	ldw	r2,-44(fp)
 201a460:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 201a464:	e0800217 	ldw	r2,8(fp)
 201a468:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 201a46c:	e0bfe80b 	ldhu	r2,-96(fp)
}
 201a470:	e037883a 	mov	sp,fp
 201a474:	dfc00117 	ldw	ra,4(sp)
 201a478:	df000017 	ldw	fp,0(sp)
 201a47c:	dec00204 	addi	sp,sp,8
 201a480:	f800283a 	ret

0201a484 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 201a484:	defffb04 	addi	sp,sp,-20
 201a488:	df000415 	stw	fp,16(sp)
 201a48c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201a490:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a494:	0005303a 	rdctl	r2,status
 201a498:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a49c:	e0fffe17 	ldw	r3,-8(fp)
 201a4a0:	00bfff84 	movi	r2,-2
 201a4a4:	1884703a 	and	r2,r3,r2
 201a4a8:	1001703a 	wrctl	status,r2
  
  return context;
 201a4ac:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201a4b0:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 201a4b4:	d0a7b617 	ldw	r2,-24872(gp)
 201a4b8:	10800b0b 	ldhu	r2,44(r2)
 201a4bc:	e0bffd0d 	sth	r2,-12(fp)
 201a4c0:	e0bffc17 	ldw	r2,-16(fp)
 201a4c4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a4c8:	e0bfff17 	ldw	r2,-4(fp)
 201a4cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 201a4d0:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201a4d4:	e037883a 	mov	sp,fp
 201a4d8:	df000017 	ldw	fp,0(sp)
 201a4dc:	dec00104 	addi	sp,sp,4
 201a4e0:	f800283a 	ret

0201a4e4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 201a4e4:	deffef04 	addi	sp,sp,-68
 201a4e8:	dfc01015 	stw	ra,64(sp)
 201a4ec:	df000f15 	stw	fp,60(sp)
 201a4f0:	df000f04 	addi	fp,sp,60
 201a4f4:	e13ffc15 	stw	r4,-16(fp)
 201a4f8:	2807883a 	mov	r3,r5
 201a4fc:	3005883a 	mov	r2,r6
 201a500:	e1ffff15 	stw	r7,-4(fp)
 201a504:	e0fffd0d 	sth	r3,-12(fp)
 201a508:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 201a50c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201a510:	e0bfff17 	ldw	r2,-4(fp)
 201a514:	1000021e 	bne	r2,zero,201a520 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 201a518:	0005883a 	mov	r2,zero
 201a51c:	0000d106 	br	201a864 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 201a520:	e0bffc17 	ldw	r2,-16(fp)
 201a524:	1000051e 	bne	r2,zero,201a53c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201a528:	e0bfff17 	ldw	r2,-4(fp)
 201a52c:	00c01b84 	movi	r3,110
 201a530:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a534:	0005883a 	mov	r2,zero
 201a538:	0000ca06 	br	201a864 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 201a53c:	e0bffc17 	ldw	r2,-16(fp)
 201a540:	10800003 	ldbu	r2,0(r2)
 201a544:	10803fcc 	andi	r2,r2,255
 201a548:	10800160 	cmpeqi	r2,r2,5
 201a54c:	1000051e 	bne	r2,zero,201a564 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 201a550:	e0bfff17 	ldw	r2,-4(fp)
 201a554:	00c00044 	movi	r3,1
 201a558:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a55c:	0005883a 	mov	r2,zero
 201a560:	0000c006 	br	201a864 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a564:	0005303a 	rdctl	r2,status
 201a568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a56c:	e0fffb17 	ldw	r3,-20(fp)
 201a570:	00bfff84 	movi	r2,-2
 201a574:	1884703a 	and	r2,r3,r2
 201a578:	1001703a 	wrctl	status,r2
  
  return context;
 201a57c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 201a580:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 201a584:	e0bffe03 	ldbu	r2,-8(fp)
 201a588:	10000326 	beq	r2,zero,201a598 <OSFlagPost+0xb4>
 201a58c:	10800060 	cmpeqi	r2,r2,1
 201a590:	10000b1e 	bne	r2,zero,201a5c0 <OSFlagPost+0xdc>
 201a594:	00001206 	br	201a5e0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 201a598:	e0bffc17 	ldw	r2,-16(fp)
 201a59c:	1080020b 	ldhu	r2,8(r2)
 201a5a0:	1007883a 	mov	r3,r2
 201a5a4:	e0bffd0b 	ldhu	r2,-12(fp)
 201a5a8:	0084303a 	nor	r2,zero,r2
 201a5ac:	1884703a 	and	r2,r3,r2
 201a5b0:	1007883a 	mov	r3,r2
 201a5b4:	e0bffc17 	ldw	r2,-16(fp)
 201a5b8:	10c0020d 	sth	r3,8(r2)
             break;
 201a5bc:	00001106 	br	201a604 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 201a5c0:	e0bffc17 	ldw	r2,-16(fp)
 201a5c4:	10c0020b 	ldhu	r3,8(r2)
 201a5c8:	e0bffd0b 	ldhu	r2,-12(fp)
 201a5cc:	1884b03a 	or	r2,r3,r2
 201a5d0:	1007883a 	mov	r3,r2
 201a5d4:	e0bffc17 	ldw	r2,-16(fp)
 201a5d8:	10c0020d 	sth	r3,8(r2)
             break;
 201a5dc:	00000906 	br	201a604 <OSFlagPost+0x120>
 201a5e0:	e0bff317 	ldw	r2,-52(fp)
 201a5e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a5e8:	e0bff417 	ldw	r2,-48(fp)
 201a5ec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 201a5f0:	e0bfff17 	ldw	r2,-4(fp)
 201a5f4:	00c01c44 	movi	r3,113
 201a5f8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 201a5fc:	0005883a 	mov	r2,zero
 201a600:	00009806 	br	201a864 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 201a604:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201a608:	e0bffc17 	ldw	r2,-16(fp)
 201a60c:	10800117 	ldw	r2,4(r2)
 201a610:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 201a614:	00007706 	br	201a7f4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 201a618:	e0bff117 	ldw	r2,-60(fp)
 201a61c:	10800483 	ldbu	r2,18(r2)
 201a620:	10803fcc 	andi	r2,r2,255
 201a624:	10c00060 	cmpeqi	r3,r2,1
 201a628:	18004a1e 	bne	r3,zero,201a754 <OSFlagPost+0x270>
 201a62c:	10c00088 	cmpgei	r3,r2,2
 201a630:	1800021e 	bne	r3,zero,201a63c <OSFlagPost+0x158>
 201a634:	10002f26 	beq	r2,zero,201a6f4 <OSFlagPost+0x210>
 201a638:	00005b06 	br	201a7a8 <OSFlagPost+0x2c4>
 201a63c:	10c000a0 	cmpeqi	r3,r2,2
 201a640:	1800031e 	bne	r3,zero,201a650 <OSFlagPost+0x16c>
 201a644:	108000e0 	cmpeqi	r2,r2,3
 201a648:	1000171e 	bne	r2,zero,201a6a8 <OSFlagPost+0x1c4>
 201a64c:	00005606 	br	201a7a8 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201a650:	e0bffc17 	ldw	r2,-16(fp)
 201a654:	10c0020b 	ldhu	r3,8(r2)
 201a658:	e0bff117 	ldw	r2,-60(fp)
 201a65c:	1080040b 	ldhu	r2,16(r2)
 201a660:	1884703a 	and	r2,r3,r2
 201a664:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 201a668:	e0bff117 	ldw	r2,-60(fp)
 201a66c:	1080040b 	ldhu	r2,16(r2)
 201a670:	10ffffcc 	andi	r3,r2,65535
 201a674:	e0bff60b 	ldhu	r2,-40(fp)
 201a678:	1880541e 	bne	r3,r2,201a7cc <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201a67c:	e0bff60b 	ldhu	r2,-40(fp)
 201a680:	100b883a 	mov	r5,r2
 201a684:	e13ff117 	ldw	r4,-60(fp)
 201a688:	201ab7c0 	call	201ab7c <OS_FlagTaskRdy>
 201a68c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201a690:	e0bff683 	ldbu	r2,-38(fp)
 201a694:	10800058 	cmpnei	r2,r2,1
 201a698:	10004c1e 	bne	r2,zero,201a7cc <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201a69c:	00800044 	movi	r2,1
 201a6a0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201a6a4:	00004906 	br	201a7cc <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201a6a8:	e0bffc17 	ldw	r2,-16(fp)
 201a6ac:	10c0020b 	ldhu	r3,8(r2)
 201a6b0:	e0bff117 	ldw	r2,-60(fp)
 201a6b4:	1080040b 	ldhu	r2,16(r2)
 201a6b8:	1884703a 	and	r2,r3,r2
 201a6bc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201a6c0:	e0bff60b 	ldhu	r2,-40(fp)
 201a6c4:	10004326 	beq	r2,zero,201a7d4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201a6c8:	e0bff60b 	ldhu	r2,-40(fp)
 201a6cc:	100b883a 	mov	r5,r2
 201a6d0:	e13ff117 	ldw	r4,-60(fp)
 201a6d4:	201ab7c0 	call	201ab7c <OS_FlagTaskRdy>
 201a6d8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201a6dc:	e0bff683 	ldbu	r2,-38(fp)
 201a6e0:	10800058 	cmpnei	r2,r2,1
 201a6e4:	10003b1e 	bne	r2,zero,201a7d4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201a6e8:	00800044 	movi	r2,1
 201a6ec:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201a6f0:	00003806 	br	201a7d4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201a6f4:	e0bffc17 	ldw	r2,-16(fp)
 201a6f8:	1080020b 	ldhu	r2,8(r2)
 201a6fc:	0084303a 	nor	r2,zero,r2
 201a700:	1007883a 	mov	r3,r2
 201a704:	e0bff117 	ldw	r2,-60(fp)
 201a708:	1080040b 	ldhu	r2,16(r2)
 201a70c:	1884703a 	and	r2,r3,r2
 201a710:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 201a714:	e0bff117 	ldw	r2,-60(fp)
 201a718:	1080040b 	ldhu	r2,16(r2)
 201a71c:	10ffffcc 	andi	r3,r2,65535
 201a720:	e0bff60b 	ldhu	r2,-40(fp)
 201a724:	18802d1e 	bne	r3,r2,201a7dc <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201a728:	e0bff60b 	ldhu	r2,-40(fp)
 201a72c:	100b883a 	mov	r5,r2
 201a730:	e13ff117 	ldw	r4,-60(fp)
 201a734:	201ab7c0 	call	201ab7c <OS_FlagTaskRdy>
 201a738:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201a73c:	e0bff683 	ldbu	r2,-38(fp)
 201a740:	10800058 	cmpnei	r2,r2,1
 201a744:	1000251e 	bne	r2,zero,201a7dc <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201a748:	00800044 	movi	r2,1
 201a74c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201a750:	00002206 	br	201a7dc <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201a754:	e0bffc17 	ldw	r2,-16(fp)
 201a758:	1080020b 	ldhu	r2,8(r2)
 201a75c:	0084303a 	nor	r2,zero,r2
 201a760:	1007883a 	mov	r3,r2
 201a764:	e0bff117 	ldw	r2,-60(fp)
 201a768:	1080040b 	ldhu	r2,16(r2)
 201a76c:	1884703a 	and	r2,r3,r2
 201a770:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201a774:	e0bff60b 	ldhu	r2,-40(fp)
 201a778:	10001a26 	beq	r2,zero,201a7e4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201a77c:	e0bff60b 	ldhu	r2,-40(fp)
 201a780:	100b883a 	mov	r5,r2
 201a784:	e13ff117 	ldw	r4,-60(fp)
 201a788:	201ab7c0 	call	201ab7c <OS_FlagTaskRdy>
 201a78c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201a790:	e0bff683 	ldbu	r2,-38(fp)
 201a794:	10800058 	cmpnei	r2,r2,1
 201a798:	1000121e 	bne	r2,zero,201a7e4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201a79c:	00800044 	movi	r2,1
 201a7a0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201a7a4:	00000f06 	br	201a7e4 <OSFlagPost+0x300>
 201a7a8:	e0bff317 	ldw	r2,-52(fp)
 201a7ac:	e0bff515 	stw	r2,-44(fp)
 201a7b0:	e0bff517 	ldw	r2,-44(fp)
 201a7b4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 201a7b8:	e0bfff17 	ldw	r2,-4(fp)
 201a7bc:	00c01bc4 	movi	r3,111
 201a7c0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 201a7c4:	0005883a 	mov	r2,zero
 201a7c8:	00002606 	br	201a864 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201a7cc:	0001883a 	nop
 201a7d0:	00000506 	br	201a7e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201a7d4:	0001883a 	nop
 201a7d8:	00000306 	br	201a7e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201a7dc:	0001883a 	nop
 201a7e0:	00000106 	br	201a7e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201a7e4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 201a7e8:	e0bff117 	ldw	r2,-60(fp)
 201a7ec:	10800017 	ldw	r2,0(r2)
 201a7f0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 201a7f4:	e0bff117 	ldw	r2,-60(fp)
 201a7f8:	103f871e 	bne	r2,zero,201a618 <OSFlagPost+0x134>
 201a7fc:	e0bff317 	ldw	r2,-52(fp)
 201a800:	e0bff715 	stw	r2,-36(fp)
 201a804:	e0bff717 	ldw	r2,-36(fp)
 201a808:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 201a80c:	e0bff203 	ldbu	r2,-56(fp)
 201a810:	10800058 	cmpnei	r2,r2,1
 201a814:	1000011e 	bne	r2,zero,201a81c <OSFlagPost+0x338>
        OS_Sched();
 201a818:	2018d9c0 	call	2018d9c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a81c:	0005303a 	rdctl	r2,status
 201a820:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a824:	e0fffa17 	ldw	r3,-24(fp)
 201a828:	00bfff84 	movi	r2,-2
 201a82c:	1884703a 	and	r2,r3,r2
 201a830:	1001703a 	wrctl	status,r2
  
  return context;
 201a834:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 201a838:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 201a83c:	e0bffc17 	ldw	r2,-16(fp)
 201a840:	1080020b 	ldhu	r2,8(r2)
 201a844:	e0bff90d 	sth	r2,-28(fp)
 201a848:	e0bff317 	ldw	r2,-52(fp)
 201a84c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a850:	e0bff817 	ldw	r2,-32(fp)
 201a854:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 201a858:	e0bfff17 	ldw	r2,-4(fp)
 201a85c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 201a860:	e0bff90b 	ldhu	r2,-28(fp)
}
 201a864:	e037883a 	mov	sp,fp
 201a868:	dfc00117 	ldw	ra,4(sp)
 201a86c:	df000017 	ldw	fp,0(sp)
 201a870:	dec00204 	addi	sp,sp,8
 201a874:	f800283a 	ret

0201a878 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 201a878:	defff904 	addi	sp,sp,-28
 201a87c:	df000615 	stw	fp,24(sp)
 201a880:	df000604 	addi	fp,sp,24
 201a884:	e13ffe15 	stw	r4,-8(fp)
 201a888:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 201a88c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 201a890:	e0bfff17 	ldw	r2,-4(fp)
 201a894:	1000021e 	bne	r2,zero,201a8a0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 201a898:	0005883a 	mov	r2,zero
 201a89c:	00002306 	br	201a92c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 201a8a0:	e0bffe17 	ldw	r2,-8(fp)
 201a8a4:	1000051e 	bne	r2,zero,201a8bc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201a8a8:	e0bfff17 	ldw	r2,-4(fp)
 201a8ac:	00c01b84 	movi	r3,110
 201a8b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a8b4:	0005883a 	mov	r2,zero
 201a8b8:	00001c06 	br	201a92c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 201a8bc:	e0bffe17 	ldw	r2,-8(fp)
 201a8c0:	10800003 	ldbu	r2,0(r2)
 201a8c4:	10803fcc 	andi	r2,r2,255
 201a8c8:	10800160 	cmpeqi	r2,r2,5
 201a8cc:	1000051e 	bne	r2,zero,201a8e4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201a8d0:	e0bfff17 	ldw	r2,-4(fp)
 201a8d4:	00c00044 	movi	r3,1
 201a8d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a8dc:	0005883a 	mov	r2,zero
 201a8e0:	00001206 	br	201a92c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a8e4:	0005303a 	rdctl	r2,status
 201a8e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a8ec:	e0fffc17 	ldw	r3,-16(fp)
 201a8f0:	00bfff84 	movi	r2,-2
 201a8f4:	1884703a 	and	r2,r3,r2
 201a8f8:	1001703a 	wrctl	status,r2
  
  return context;
 201a8fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a900:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 201a904:	e0bffe17 	ldw	r2,-8(fp)
 201a908:	1080020b 	ldhu	r2,8(r2)
 201a90c:	e0bffb0d 	sth	r2,-20(fp)
 201a910:	e0bffa17 	ldw	r2,-24(fp)
 201a914:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a918:	e0bffd17 	ldw	r2,-12(fp)
 201a91c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201a920:	e0bfff17 	ldw	r2,-4(fp)
 201a924:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 201a928:	e0bffb0b 	ldhu	r2,-20(fp)
}
 201a92c:	e037883a 	mov	sp,fp
 201a930:	df000017 	ldw	fp,0(sp)
 201a934:	dec00104 	addi	sp,sp,4
 201a938:	f800283a 	ret

0201a93c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 201a93c:	defff804 	addi	sp,sp,-32
 201a940:	df000715 	stw	fp,28(sp)
 201a944:	df000704 	addi	fp,sp,28
 201a948:	e13ffb15 	stw	r4,-20(fp)
 201a94c:	e17ffc15 	stw	r5,-16(fp)
 201a950:	3009883a 	mov	r4,r6
 201a954:	3807883a 	mov	r3,r7
 201a958:	e0800117 	ldw	r2,4(fp)
 201a95c:	e13ffd0d 	sth	r4,-12(fp)
 201a960:	e0fffe05 	stb	r3,-8(fp)
 201a964:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 201a968:	d0a7b617 	ldw	r2,-24872(gp)
 201a96c:	d0e7b617 	ldw	r3,-24872(gp)
 201a970:	18c00c03 	ldbu	r3,48(r3)
 201a974:	18c00814 	ori	r3,r3,32
 201a978:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 201a97c:	d0a7b617 	ldw	r2,-24872(gp)
 201a980:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 201a984:	d0a7b617 	ldw	r2,-24872(gp)
 201a988:	e0ffff0b 	ldhu	r3,-4(fp)
 201a98c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 201a990:	d0a7b617 	ldw	r2,-24872(gp)
 201a994:	e0fffc17 	ldw	r3,-16(fp)
 201a998:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 201a99c:	e0bffc17 	ldw	r2,-16(fp)
 201a9a0:	e0fffd0b 	ldhu	r3,-12(fp)
 201a9a4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 201a9a8:	e0bffc17 	ldw	r2,-16(fp)
 201a9ac:	e0fffe03 	ldbu	r3,-8(fp)
 201a9b0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 201a9b4:	d0e7b617 	ldw	r3,-24872(gp)
 201a9b8:	e0bffc17 	ldw	r2,-16(fp)
 201a9bc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 201a9c0:	e0bffb17 	ldw	r2,-20(fp)
 201a9c4:	10c00117 	ldw	r3,4(r2)
 201a9c8:	e0bffc17 	ldw	r2,-16(fp)
 201a9cc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 201a9d0:	e0bffc17 	ldw	r2,-16(fp)
 201a9d4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 201a9d8:	e0bffc17 	ldw	r2,-16(fp)
 201a9dc:	e0fffb17 	ldw	r3,-20(fp)
 201a9e0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201a9e4:	e0bffb17 	ldw	r2,-20(fp)
 201a9e8:	10800117 	ldw	r2,4(r2)
 201a9ec:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 201a9f0:	e0bff917 	ldw	r2,-28(fp)
 201a9f4:	10000326 	beq	r2,zero,201aa04 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 201a9f8:	e0bff917 	ldw	r2,-28(fp)
 201a9fc:	e0fffc17 	ldw	r3,-16(fp)
 201aa00:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 201aa04:	e0bffb17 	ldw	r2,-20(fp)
 201aa08:	e0fffc17 	ldw	r3,-16(fp)
 201aa0c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 201aa10:	d0a7b617 	ldw	r2,-24872(gp)
 201aa14:	10800d03 	ldbu	r2,52(r2)
 201aa18:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201aa1c:	e0fffa03 	ldbu	r3,-24(fp)
 201aa20:	e13ffa03 	ldbu	r4,-24(fp)
 201aa24:	d0a7b344 	addi	r2,gp,-24883
 201aa28:	2085883a 	add	r2,r4,r2
 201aa2c:	10800003 	ldbu	r2,0(r2)
 201aa30:	1009883a 	mov	r4,r2
 201aa34:	d0a7b617 	ldw	r2,-24872(gp)
 201aa38:	10800d43 	ldbu	r2,53(r2)
 201aa3c:	0084303a 	nor	r2,zero,r2
 201aa40:	2084703a 	and	r2,r4,r2
 201aa44:	1009883a 	mov	r4,r2
 201aa48:	d0a7b344 	addi	r2,gp,-24883
 201aa4c:	1885883a 	add	r2,r3,r2
 201aa50:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 201aa54:	e0fffa03 	ldbu	r3,-24(fp)
 201aa58:	d0a7b344 	addi	r2,gp,-24883
 201aa5c:	1885883a 	add	r2,r3,r2
 201aa60:	10800003 	ldbu	r2,0(r2)
 201aa64:	10803fcc 	andi	r2,r2,255
 201aa68:	1000071e 	bne	r2,zero,201aa88 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201aa6c:	d0a7b617 	ldw	r2,-24872(gp)
 201aa70:	10800d83 	ldbu	r2,54(r2)
 201aa74:	0084303a 	nor	r2,zero,r2
 201aa78:	1007883a 	mov	r3,r2
 201aa7c:	d0a7b303 	ldbu	r2,-24884(gp)
 201aa80:	1884703a 	and	r2,r3,r2
 201aa84:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 201aa88:	0001883a 	nop
 201aa8c:	e037883a 	mov	sp,fp
 201aa90:	df000017 	ldw	fp,0(sp)
 201aa94:	dec00104 	addi	sp,sp,4
 201aa98:	f800283a 	ret

0201aa9c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 201aa9c:	defffb04 	addi	sp,sp,-20
 201aaa0:	dfc00415 	stw	ra,16(sp)
 201aaa4:	df000315 	stw	fp,12(sp)
 201aaa8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 201aaac:	0140dc04 	movi	r5,880
 201aab0:	010080f4 	movhi	r4,515
 201aab4:	21397c04 	addi	r4,r4,-6672
 201aab8:	2018ce00 	call	2018ce0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 201aabc:	008080f4 	movhi	r2,515
 201aac0:	10b97c04 	addi	r2,r2,-6672
 201aac4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 201aac8:	008080f4 	movhi	r2,515
 201aacc:	10b98704 	addi	r2,r2,-6628
 201aad0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201aad4:	e03ffd0d 	sth	zero,-12(fp)
 201aad8:	00001306 	br	201ab28 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201aadc:	e0bffe17 	ldw	r2,-8(fp)
 201aae0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 201aae4:	e0bffe17 	ldw	r2,-8(fp)
 201aae8:	e0ffff17 	ldw	r3,-4(fp)
 201aaec:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 201aaf0:	e0bffe17 	ldw	r2,-8(fp)
 201aaf4:	00c00fc4 	movi	r3,63
 201aaf8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201aafc:	e0bffe17 	ldw	r2,-8(fp)
 201ab00:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 201ab04:	e0bffe17 	ldw	r2,-8(fp)
 201ab08:	10800b04 	addi	r2,r2,44
 201ab0c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 201ab10:	e0bfff17 	ldw	r2,-4(fp)
 201ab14:	10800b04 	addi	r2,r2,44
 201ab18:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201ab1c:	e0bffd0b 	ldhu	r2,-12(fp)
 201ab20:	10800044 	addi	r2,r2,1
 201ab24:	e0bffd0d 	sth	r2,-12(fp)
 201ab28:	e0bffd0b 	ldhu	r2,-12(fp)
 201ab2c:	108004f0 	cmpltui	r2,r2,19
 201ab30:	103fea1e 	bne	r2,zero,201aadc <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201ab34:	e0bffe17 	ldw	r2,-8(fp)
 201ab38:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 201ab3c:	e0bffe17 	ldw	r2,-8(fp)
 201ab40:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 201ab44:	e0bffe17 	ldw	r2,-8(fp)
 201ab48:	00c00fc4 	movi	r3,63
 201ab4c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201ab50:	e0bffe17 	ldw	r2,-8(fp)
 201ab54:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 201ab58:	008080f4 	movhi	r2,515
 201ab5c:	10b97c04 	addi	r2,r2,-6672
 201ab60:	d0a7b815 	stw	r2,-24864(gp)
#endif
}
 201ab64:	0001883a 	nop
 201ab68:	e037883a 	mov	sp,fp
 201ab6c:	dfc00117 	ldw	ra,4(sp)
 201ab70:	df000017 	ldw	fp,0(sp)
 201ab74:	dec00204 	addi	sp,sp,8
 201ab78:	f800283a 	ret

0201ab7c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 201ab7c:	defffa04 	addi	sp,sp,-24
 201ab80:	dfc00515 	stw	ra,20(sp)
 201ab84:	df000415 	stw	fp,16(sp)
 201ab88:	df000404 	addi	fp,sp,16
 201ab8c:	e13ffe15 	stw	r4,-8(fp)
 201ab90:	2805883a 	mov	r2,r5
 201ab94:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 201ab98:	e0bffe17 	ldw	r2,-8(fp)
 201ab9c:	10800217 	ldw	r2,8(r2)
 201aba0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 201aba4:	e0bffd17 	ldw	r2,-12(fp)
 201aba8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 201abac:	e0bffd17 	ldw	r2,-12(fp)
 201abb0:	e0ffff0b 	ldhu	r3,-4(fp)
 201abb4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 201abb8:	e0bffd17 	ldw	r2,-12(fp)
 201abbc:	10c00c03 	ldbu	r3,48(r2)
 201abc0:	00bff7c4 	movi	r2,-33
 201abc4:	1884703a 	and	r2,r3,r2
 201abc8:	1007883a 	mov	r3,r2
 201abcc:	e0bffd17 	ldw	r2,-12(fp)
 201abd0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 201abd4:	e0bffd17 	ldw	r2,-12(fp)
 201abd8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 201abdc:	e0bffd17 	ldw	r2,-12(fp)
 201abe0:	10800c03 	ldbu	r2,48(r2)
 201abe4:	10803fcc 	andi	r2,r2,255
 201abe8:	1000181e 	bne	r2,zero,201ac4c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 201abec:	e0bffd17 	ldw	r2,-12(fp)
 201abf0:	10c00d83 	ldbu	r3,54(r2)
 201abf4:	d0a7b303 	ldbu	r2,-24884(gp)
 201abf8:	1884b03a 	or	r2,r3,r2
 201abfc:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201ac00:	e0bffd17 	ldw	r2,-12(fp)
 201ac04:	10800d03 	ldbu	r2,52(r2)
 201ac08:	10c03fcc 	andi	r3,r2,255
 201ac0c:	e0bffd17 	ldw	r2,-12(fp)
 201ac10:	10800d03 	ldbu	r2,52(r2)
 201ac14:	11003fcc 	andi	r4,r2,255
 201ac18:	d0a7b344 	addi	r2,gp,-24883
 201ac1c:	2085883a 	add	r2,r4,r2
 201ac20:	11000003 	ldbu	r4,0(r2)
 201ac24:	e0bffd17 	ldw	r2,-12(fp)
 201ac28:	10800d43 	ldbu	r2,53(r2)
 201ac2c:	2084b03a 	or	r2,r4,r2
 201ac30:	1009883a 	mov	r4,r2
 201ac34:	d0a7b344 	addi	r2,gp,-24883
 201ac38:	1885883a 	add	r2,r3,r2
 201ac3c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 201ac40:	00800044 	movi	r2,1
 201ac44:	e0bffc05 	stb	r2,-16(fp)
 201ac48:	00000106 	br	201ac50 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 201ac4c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 201ac50:	e13ffe17 	ldw	r4,-8(fp)
 201ac54:	201ac700 	call	201ac70 <OS_FlagUnlink>
    return (sched);
 201ac58:	e0bffc03 	ldbu	r2,-16(fp)
}
 201ac5c:	e037883a 	mov	sp,fp
 201ac60:	dfc00117 	ldw	ra,4(sp)
 201ac64:	df000017 	ldw	fp,0(sp)
 201ac68:	dec00204 	addi	sp,sp,8
 201ac6c:	f800283a 	ret

0201ac70 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 201ac70:	defffa04 	addi	sp,sp,-24
 201ac74:	df000515 	stw	fp,20(sp)
 201ac78:	df000504 	addi	fp,sp,20
 201ac7c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 201ac80:	e0bfff17 	ldw	r2,-4(fp)
 201ac84:	10800117 	ldw	r2,4(r2)
 201ac88:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 201ac8c:	e0bfff17 	ldw	r2,-4(fp)
 201ac90:	10800017 	ldw	r2,0(r2)
 201ac94:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 201ac98:	e0bffb17 	ldw	r2,-20(fp)
 201ac9c:	10000b1e 	bne	r2,zero,201accc <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 201aca0:	e0bfff17 	ldw	r2,-4(fp)
 201aca4:	10800317 	ldw	r2,12(r2)
 201aca8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 201acac:	e0bffd17 	ldw	r2,-12(fp)
 201acb0:	e0fffc17 	ldw	r3,-16(fp)
 201acb4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 201acb8:	e0bffc17 	ldw	r2,-16(fp)
 201acbc:	10000b26 	beq	r2,zero,201acec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 201acc0:	e0bffc17 	ldw	r2,-16(fp)
 201acc4:	10000115 	stw	zero,4(r2)
 201acc8:	00000806 	br	201acec <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 201accc:	e0bffb17 	ldw	r2,-20(fp)
 201acd0:	e0fffc17 	ldw	r3,-16(fp)
 201acd4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 201acd8:	e0bffc17 	ldw	r2,-16(fp)
 201acdc:	10000326 	beq	r2,zero,201acec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 201ace0:	e0bffc17 	ldw	r2,-16(fp)
 201ace4:	e0fffb17 	ldw	r3,-20(fp)
 201ace8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 201acec:	e0bfff17 	ldw	r2,-4(fp)
 201acf0:	10800217 	ldw	r2,8(r2)
 201acf4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 201acf8:	e0bffe17 	ldw	r2,-8(fp)
 201acfc:	10000a15 	stw	zero,40(r2)
#endif
}
 201ad00:	0001883a 	nop
 201ad04:	e037883a 	mov	sp,fp
 201ad08:	df000017 	ldw	fp,0(sp)
 201ad0c:	dec00104 	addi	sp,sp,4
 201ad10:	f800283a 	ret

0201ad14 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 201ad14:	defffa04 	addi	sp,sp,-24
 201ad18:	df000515 	stw	fp,20(sp)
 201ad1c:	df000504 	addi	fp,sp,20
 201ad20:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 201ad24:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 201ad28:	e0bfff17 	ldw	r2,-4(fp)
 201ad2c:	1000021e 	bne	r2,zero,201ad38 <OSMboxAccept+0x24>
        return ((void *)0);
 201ad30:	0005883a 	mov	r2,zero
 201ad34:	00001906 	br	201ad9c <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 201ad38:	e0bfff17 	ldw	r2,-4(fp)
 201ad3c:	10800003 	ldbu	r2,0(r2)
 201ad40:	10803fcc 	andi	r2,r2,255
 201ad44:	10800060 	cmpeqi	r2,r2,1
 201ad48:	1000021e 	bne	r2,zero,201ad54 <OSMboxAccept+0x40>
        return ((void *)0);
 201ad4c:	0005883a 	mov	r2,zero
 201ad50:	00001206 	br	201ad9c <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ad54:	0005303a 	rdctl	r2,status
 201ad58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ad5c:	e0fffd17 	ldw	r3,-12(fp)
 201ad60:	00bfff84 	movi	r2,-2
 201ad64:	1884703a 	and	r2,r3,r2
 201ad68:	1001703a 	wrctl	status,r2
  
  return context;
 201ad6c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201ad70:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 201ad74:	e0bfff17 	ldw	r2,-4(fp)
 201ad78:	10800117 	ldw	r2,4(r2)
 201ad7c:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 201ad80:	e0bfff17 	ldw	r2,-4(fp)
 201ad84:	10000115 	stw	zero,4(r2)
 201ad88:	e0bffb17 	ldw	r2,-20(fp)
 201ad8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ad90:	e0bffe17 	ldw	r2,-8(fp)
 201ad94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 201ad98:	e0bffc17 	ldw	r2,-16(fp)
}
 201ad9c:	e037883a 	mov	sp,fp
 201ada0:	df000017 	ldw	fp,0(sp)
 201ada4:	dec00104 	addi	sp,sp,4
 201ada8:	f800283a 	ret

0201adac <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 201adac:	defff904 	addi	sp,sp,-28
 201adb0:	dfc00615 	stw	ra,24(sp)
 201adb4:	df000515 	stw	fp,20(sp)
 201adb8:	df000504 	addi	fp,sp,20
 201adbc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201adc0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201adc4:	d0a7b503 	ldbu	r2,-24876(gp)
 201adc8:	10803fcc 	andi	r2,r2,255
 201adcc:	10000226 	beq	r2,zero,201add8 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 201add0:	0005883a 	mov	r2,zero
 201add4:	00002506 	br	201ae6c <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201add8:	0005303a 	rdctl	r2,status
 201addc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ade0:	e0fffe17 	ldw	r3,-8(fp)
 201ade4:	00bfff84 	movi	r2,-2
 201ade8:	1884703a 	and	r2,r3,r2
 201adec:	1001703a 	wrctl	status,r2
  
  return context;
 201adf0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201adf4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201adf8:	d0a7b417 	ldw	r2,-24880(gp)
 201adfc:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201ae00:	d0a7b417 	ldw	r2,-24880(gp)
 201ae04:	10000326 	beq	r2,zero,201ae14 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201ae08:	d0a7b417 	ldw	r2,-24880(gp)
 201ae0c:	10800117 	ldw	r2,4(r2)
 201ae10:	d0a7b415 	stw	r2,-24880(gp)
 201ae14:	e0bffb17 	ldw	r2,-20(fp)
 201ae18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ae1c:	e0bffc17 	ldw	r2,-16(fp)
 201ae20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 201ae24:	e0bffd17 	ldw	r2,-12(fp)
 201ae28:	10000f26 	beq	r2,zero,201ae68 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 201ae2c:	e0bffd17 	ldw	r2,-12(fp)
 201ae30:	00c00044 	movi	r3,1
 201ae34:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 201ae38:	e0bffd17 	ldw	r2,-12(fp)
 201ae3c:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 201ae40:	e0bffd17 	ldw	r2,-12(fp)
 201ae44:	e0ffff17 	ldw	r3,-4(fp)
 201ae48:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 201ae4c:	e0bffd17 	ldw	r2,-12(fp)
 201ae50:	00c00fc4 	movi	r3,63
 201ae54:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201ae58:	e0bffd17 	ldw	r2,-12(fp)
 201ae5c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 201ae60:	e13ffd17 	ldw	r4,-12(fp)
 201ae64:	20189000 	call	2018900 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 201ae68:	e0bffd17 	ldw	r2,-12(fp)
}
 201ae6c:	e037883a 	mov	sp,fp
 201ae70:	dfc00117 	ldw	ra,4(sp)
 201ae74:	df000017 	ldw	fp,0(sp)
 201ae78:	dec00204 	addi	sp,sp,8
 201ae7c:	f800283a 	ret

0201ae80 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201ae80:	defff304 	addi	sp,sp,-52
 201ae84:	dfc00c15 	stw	ra,48(sp)
 201ae88:	df000b15 	stw	fp,44(sp)
 201ae8c:	df000b04 	addi	fp,sp,44
 201ae90:	e13ffd15 	stw	r4,-12(fp)
 201ae94:	2805883a 	mov	r2,r5
 201ae98:	e1bfff15 	stw	r6,-4(fp)
 201ae9c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201aea0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201aea4:	e0bfff17 	ldw	r2,-4(fp)
 201aea8:	1000021e 	bne	r2,zero,201aeb4 <OSMboxDel+0x34>
        return (pevent);
 201aeac:	e0bffd17 	ldw	r2,-12(fp)
 201aeb0:	00007e06 	br	201b0ac <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201aeb4:	e0bffd17 	ldw	r2,-12(fp)
 201aeb8:	1000051e 	bne	r2,zero,201aed0 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201aebc:	e0bfff17 	ldw	r2,-4(fp)
 201aec0:	00c00104 	movi	r3,4
 201aec4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201aec8:	e0bffd17 	ldw	r2,-12(fp)
 201aecc:	00007706 	br	201b0ac <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201aed0:	e0bffd17 	ldw	r2,-12(fp)
 201aed4:	10800003 	ldbu	r2,0(r2)
 201aed8:	10803fcc 	andi	r2,r2,255
 201aedc:	10800060 	cmpeqi	r2,r2,1
 201aee0:	1000051e 	bne	r2,zero,201aef8 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201aee4:	e0bfff17 	ldw	r2,-4(fp)
 201aee8:	00c00044 	movi	r3,1
 201aeec:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201aef0:	e0bffd17 	ldw	r2,-12(fp)
 201aef4:	00006d06 	br	201b0ac <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201aef8:	d0a7b503 	ldbu	r2,-24876(gp)
 201aefc:	10803fcc 	andi	r2,r2,255
 201af00:	10000526 	beq	r2,zero,201af18 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201af04:	e0bfff17 	ldw	r2,-4(fp)
 201af08:	00c003c4 	movi	r3,15
 201af0c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201af10:	e0bffd17 	ldw	r2,-12(fp)
 201af14:	00006506 	br	201b0ac <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201af18:	0005303a 	rdctl	r2,status
 201af1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201af20:	e0fffc17 	ldw	r3,-16(fp)
 201af24:	00bfff84 	movi	r2,-2
 201af28:	1884703a 	and	r2,r3,r2
 201af2c:	1001703a 	wrctl	status,r2
  
  return context;
 201af30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201af34:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 201af38:	e0bffd17 	ldw	r2,-12(fp)
 201af3c:	10800283 	ldbu	r2,10(r2)
 201af40:	10803fcc 	andi	r2,r2,255
 201af44:	10000326 	beq	r2,zero,201af54 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201af48:	00800044 	movi	r2,1
 201af4c:	e0bff505 	stb	r2,-44(fp)
 201af50:	00000106 	br	201af58 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201af54:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201af58:	e0bffe03 	ldbu	r2,-8(fp)
 201af5c:	10000326 	beq	r2,zero,201af6c <OSMboxDel+0xec>
 201af60:	10800060 	cmpeqi	r2,r2,1
 201af64:	1000281e 	bne	r2,zero,201b008 <OSMboxDel+0x188>
 201af68:	00004506 	br	201b080 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 201af6c:	e0bff503 	ldbu	r2,-44(fp)
 201af70:	1000161e 	bne	r2,zero,201afcc <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201af74:	e0bffd17 	ldw	r2,-12(fp)
 201af78:	00c00fc4 	movi	r3,63
 201af7c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201af80:	e0bffd17 	ldw	r2,-12(fp)
 201af84:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 201af88:	e0bffd17 	ldw	r2,-12(fp)
 201af8c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 201af90:	d0e7b417 	ldw	r3,-24880(gp)
 201af94:	e0bffd17 	ldw	r2,-12(fp)
 201af98:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 201af9c:	e0bffd17 	ldw	r2,-12(fp)
 201afa0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 201afa4:	e0bffd17 	ldw	r2,-12(fp)
 201afa8:	d0a7b415 	stw	r2,-24880(gp)
 201afac:	e0bff717 	ldw	r2,-36(fp)
 201afb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201afb4:	e0bff817 	ldw	r2,-32(fp)
 201afb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 201afbc:	e0bfff17 	ldw	r2,-4(fp)
 201afc0:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 201afc4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 201afc8:	00003706 	br	201b0a8 <OSMboxDel+0x228>
 201afcc:	e0bff717 	ldw	r2,-36(fp)
 201afd0:	e0bff915 	stw	r2,-28(fp)
 201afd4:	e0bff917 	ldw	r2,-28(fp)
 201afd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 201afdc:	e0bfff17 	ldw	r2,-4(fp)
 201afe0:	00c01244 	movi	r3,73
 201afe4:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 201afe8:	e0bffd17 	ldw	r2,-12(fp)
 201afec:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201aff0:	00002d06 	br	201b0a8 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201aff4:	000f883a 	mov	r7,zero
 201aff8:	01800084 	movi	r6,2
 201affc:	000b883a 	mov	r5,zero
 201b000:	e13ffd17 	ldw	r4,-12(fp)
 201b004:	20183500 	call	2018350 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 201b008:	e0bffd17 	ldw	r2,-12(fp)
 201b00c:	10800283 	ldbu	r2,10(r2)
 201b010:	10803fcc 	andi	r2,r2,255
 201b014:	103ff71e 	bne	r2,zero,201aff4 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201b018:	e0bffd17 	ldw	r2,-12(fp)
 201b01c:	00c00fc4 	movi	r3,63
 201b020:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201b024:	e0bffd17 	ldw	r2,-12(fp)
 201b028:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201b02c:	e0bffd17 	ldw	r2,-12(fp)
 201b030:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201b034:	d0e7b417 	ldw	r3,-24880(gp)
 201b038:	e0bffd17 	ldw	r2,-12(fp)
 201b03c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201b040:	e0bffd17 	ldw	r2,-12(fp)
 201b044:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201b048:	e0bffd17 	ldw	r2,-12(fp)
 201b04c:	d0a7b415 	stw	r2,-24880(gp)
 201b050:	e0bff717 	ldw	r2,-36(fp)
 201b054:	e0bffa15 	stw	r2,-24(fp)
 201b058:	e0bffa17 	ldw	r2,-24(fp)
 201b05c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201b060:	e0bff503 	ldbu	r2,-44(fp)
 201b064:	10800058 	cmpnei	r2,r2,1
 201b068:	1000011e 	bne	r2,zero,201b070 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201b06c:	2018d9c0 	call	2018d9c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 201b070:	e0bfff17 	ldw	r2,-4(fp)
 201b074:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 201b078:	e03ff615 	stw	zero,-40(fp)
             break;
 201b07c:	00000a06 	br	201b0a8 <OSMboxDel+0x228>
 201b080:	e0bff717 	ldw	r2,-36(fp)
 201b084:	e0bffb15 	stw	r2,-20(fp)
 201b088:	e0bffb17 	ldw	r2,-20(fp)
 201b08c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 201b090:	e0bfff17 	ldw	r2,-4(fp)
 201b094:	00c001c4 	movi	r3,7
 201b098:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 201b09c:	e0bffd17 	ldw	r2,-12(fp)
 201b0a0:	e0bff615 	stw	r2,-40(fp)
             break;
 201b0a4:	0001883a 	nop
    }
    return (pevent_return);
 201b0a8:	e0bff617 	ldw	r2,-40(fp)
}
 201b0ac:	e037883a 	mov	sp,fp
 201b0b0:	dfc00117 	ldw	ra,4(sp)
 201b0b4:	df000017 	ldw	fp,0(sp)
 201b0b8:	dec00204 	addi	sp,sp,8
 201b0bc:	f800283a 	ret

0201b0c0 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201b0c0:	defff404 	addi	sp,sp,-48
 201b0c4:	dfc00b15 	stw	ra,44(sp)
 201b0c8:	df000a15 	stw	fp,40(sp)
 201b0cc:	df000a04 	addi	fp,sp,40
 201b0d0:	e13ffd15 	stw	r4,-12(fp)
 201b0d4:	2805883a 	mov	r2,r5
 201b0d8:	e1bfff15 	stw	r6,-4(fp)
 201b0dc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b0e0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201b0e4:	e0bfff17 	ldw	r2,-4(fp)
 201b0e8:	1000021e 	bne	r2,zero,201b0f4 <OSMboxPend+0x34>
        return ((void *)0);
 201b0ec:	0005883a 	mov	r2,zero
 201b0f0:	00007b06 	br	201b2e0 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201b0f4:	e0bffd17 	ldw	r2,-12(fp)
 201b0f8:	1000051e 	bne	r2,zero,201b110 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201b0fc:	e0bfff17 	ldw	r2,-4(fp)
 201b100:	00c00104 	movi	r3,4
 201b104:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b108:	0005883a 	mov	r2,zero
 201b10c:	00007406 	br	201b2e0 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201b110:	e0bffd17 	ldw	r2,-12(fp)
 201b114:	10800003 	ldbu	r2,0(r2)
 201b118:	10803fcc 	andi	r2,r2,255
 201b11c:	10800060 	cmpeqi	r2,r2,1
 201b120:	1000051e 	bne	r2,zero,201b138 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201b124:	e0bfff17 	ldw	r2,-4(fp)
 201b128:	00c00044 	movi	r3,1
 201b12c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b130:	0005883a 	mov	r2,zero
 201b134:	00006a06 	br	201b2e0 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201b138:	d0a7b503 	ldbu	r2,-24876(gp)
 201b13c:	10803fcc 	andi	r2,r2,255
 201b140:	10000526 	beq	r2,zero,201b158 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201b144:	e0bfff17 	ldw	r2,-4(fp)
 201b148:	00c00084 	movi	r3,2
 201b14c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b150:	0005883a 	mov	r2,zero
 201b154:	00006206 	br	201b2e0 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201b158:	d0a7a703 	ldbu	r2,-24932(gp)
 201b15c:	10803fcc 	andi	r2,r2,255
 201b160:	10000526 	beq	r2,zero,201b178 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201b164:	e0bfff17 	ldw	r2,-4(fp)
 201b168:	00c00344 	movi	r3,13
 201b16c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b170:	0005883a 	mov	r2,zero
 201b174:	00005a06 	br	201b2e0 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b178:	0005303a 	rdctl	r2,status
 201b17c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b180:	e0fffc17 	ldw	r3,-16(fp)
 201b184:	00bfff84 	movi	r2,-2
 201b188:	1884703a 	and	r2,r3,r2
 201b18c:	1001703a 	wrctl	status,r2
  
  return context;
 201b190:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b194:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 201b198:	e0bffd17 	ldw	r2,-12(fp)
 201b19c:	10800117 	ldw	r2,4(r2)
 201b1a0:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 201b1a4:	e0bff617 	ldw	r2,-40(fp)
 201b1a8:	10000a26 	beq	r2,zero,201b1d4 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 201b1ac:	e0bffd17 	ldw	r2,-12(fp)
 201b1b0:	10000115 	stw	zero,4(r2)
 201b1b4:	e0bff717 	ldw	r2,-36(fp)
 201b1b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b1bc:	e0bff817 	ldw	r2,-32(fp)
 201b1c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201b1c4:	e0bfff17 	ldw	r2,-4(fp)
 201b1c8:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 201b1cc:	e0bff617 	ldw	r2,-40(fp)
 201b1d0:	00004306 	br	201b2e0 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 201b1d4:	d0a7b617 	ldw	r2,-24872(gp)
 201b1d8:	d0e7b617 	ldw	r3,-24872(gp)
 201b1dc:	18c00c03 	ldbu	r3,48(r3)
 201b1e0:	18c00094 	ori	r3,r3,2
 201b1e4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201b1e8:	d0a7b617 	ldw	r2,-24872(gp)
 201b1ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 201b1f0:	d0a7b617 	ldw	r2,-24872(gp)
 201b1f4:	e0fffe0b 	ldhu	r3,-8(fp)
 201b1f8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201b1fc:	e13ffd17 	ldw	r4,-12(fp)
 201b200:	20184e80 	call	20184e8 <OS_EventTaskWait>
 201b204:	e0bff717 	ldw	r2,-36(fp)
 201b208:	e0bffb15 	stw	r2,-20(fp)
 201b20c:	e0bffb17 	ldw	r2,-20(fp)
 201b210:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 201b214:	2018d9c0 	call	2018d9c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b218:	0005303a 	rdctl	r2,status
 201b21c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b220:	e0fff917 	ldw	r3,-28(fp)
 201b224:	00bfff84 	movi	r2,-2
 201b228:	1884703a 	and	r2,r3,r2
 201b22c:	1001703a 	wrctl	status,r2
  
  return context;
 201b230:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201b234:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201b238:	d0a7b617 	ldw	r2,-24872(gp)
 201b23c:	10800c43 	ldbu	r2,49(r2)
 201b240:	10803fcc 	andi	r2,r2,255
 201b244:	10000326 	beq	r2,zero,201b254 <OSMboxPend+0x194>
 201b248:	108000a0 	cmpeqi	r2,r2,2
 201b24c:	1000071e 	bne	r2,zero,201b26c <OSMboxPend+0x1ac>
 201b250:	00000b06 	br	201b280 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 201b254:	d0a7b617 	ldw	r2,-24872(gp)
 201b258:	10800917 	ldw	r2,36(r2)
 201b25c:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 201b260:	e0bfff17 	ldw	r2,-4(fp)
 201b264:	10000005 	stb	zero,0(r2)
             break;
 201b268:	00000e06 	br	201b2a4 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201b26c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201b270:	e0bfff17 	ldw	r2,-4(fp)
 201b274:	00c00384 	movi	r3,14
 201b278:	10c00005 	stb	r3,0(r2)
             break;
 201b27c:	00000906 	br	201b2a4 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201b280:	d0a7b617 	ldw	r2,-24872(gp)
 201b284:	e17ffd17 	ldw	r5,-12(fp)
 201b288:	1009883a 	mov	r4,r2
 201b28c:	20187480 	call	2018748 <OS_EventTaskRemove>
             pmsg = (void *)0;
 201b290:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201b294:	e0bfff17 	ldw	r2,-4(fp)
 201b298:	00c00284 	movi	r3,10
 201b29c:	10c00005 	stb	r3,0(r2)
             break;
 201b2a0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201b2a4:	d0a7b617 	ldw	r2,-24872(gp)
 201b2a8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201b2ac:	d0a7b617 	ldw	r2,-24872(gp)
 201b2b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201b2b4:	d0a7b617 	ldw	r2,-24872(gp)
 201b2b8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201b2bc:	d0a7b617 	ldw	r2,-24872(gp)
 201b2c0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201b2c4:	d0a7b617 	ldw	r2,-24872(gp)
 201b2c8:	10000915 	stw	zero,36(r2)
 201b2cc:	e0bff717 	ldw	r2,-36(fp)
 201b2d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b2d4:	e0bffa17 	ldw	r2,-24(fp)
 201b2d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201b2dc:	e0bff617 	ldw	r2,-40(fp)
}
 201b2e0:	e037883a 	mov	sp,fp
 201b2e4:	dfc00117 	ldw	ra,4(sp)
 201b2e8:	df000017 	ldw	fp,0(sp)
 201b2ec:	dec00204 	addi	sp,sp,8
 201b2f0:	f800283a 	ret

0201b2f4 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201b2f4:	defff604 	addi	sp,sp,-40
 201b2f8:	dfc00915 	stw	ra,36(sp)
 201b2fc:	df000815 	stw	fp,32(sp)
 201b300:	df000804 	addi	fp,sp,32
 201b304:	e13ffd15 	stw	r4,-12(fp)
 201b308:	2805883a 	mov	r2,r5
 201b30c:	e1bfff15 	stw	r6,-4(fp)
 201b310:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201b314:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201b318:	e0bfff17 	ldw	r2,-4(fp)
 201b31c:	1000021e 	bne	r2,zero,201b328 <OSMboxPendAbort+0x34>
        return (0);
 201b320:	0005883a 	mov	r2,zero
 201b324:	00004906 	br	201b44c <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201b328:	e0bffd17 	ldw	r2,-12(fp)
 201b32c:	1000051e 	bne	r2,zero,201b344 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201b330:	e0bfff17 	ldw	r2,-4(fp)
 201b334:	00c00104 	movi	r3,4
 201b338:	10c00005 	stb	r3,0(r2)
        return (0);
 201b33c:	0005883a 	mov	r2,zero
 201b340:	00004206 	br	201b44c <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201b344:	e0bffd17 	ldw	r2,-12(fp)
 201b348:	10800003 	ldbu	r2,0(r2)
 201b34c:	10803fcc 	andi	r2,r2,255
 201b350:	10800060 	cmpeqi	r2,r2,1
 201b354:	1000051e 	bne	r2,zero,201b36c <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201b358:	e0bfff17 	ldw	r2,-4(fp)
 201b35c:	00c00044 	movi	r3,1
 201b360:	10c00005 	stb	r3,0(r2)
        return (0);
 201b364:	0005883a 	mov	r2,zero
 201b368:	00003806 	br	201b44c <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b36c:	0005303a 	rdctl	r2,status
 201b370:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b374:	e0fffc17 	ldw	r3,-16(fp)
 201b378:	00bfff84 	movi	r2,-2
 201b37c:	1884703a 	and	r2,r3,r2
 201b380:	1001703a 	wrctl	status,r2
  
  return context;
 201b384:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b388:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 201b38c:	e0bffd17 	ldw	r2,-12(fp)
 201b390:	10800283 	ldbu	r2,10(r2)
 201b394:	10803fcc 	andi	r2,r2,255
 201b398:	10002526 	beq	r2,zero,201b430 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 201b39c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201b3a0:	e0bffe03 	ldbu	r2,-8(fp)
 201b3a4:	10800060 	cmpeqi	r2,r2,1
 201b3a8:	10000e26 	beq	r2,zero,201b3e4 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 201b3ac:	00000806 	br	201b3d0 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 201b3b0:	01c00084 	movi	r7,2
 201b3b4:	01800084 	movi	r6,2
 201b3b8:	000b883a 	mov	r5,zero
 201b3bc:	e13ffd17 	ldw	r4,-12(fp)
 201b3c0:	20183500 	call	2018350 <OS_EventTaskRdy>
                     nbr_tasks++;
 201b3c4:	e0bff803 	ldbu	r2,-32(fp)
 201b3c8:	10800044 	addi	r2,r2,1
 201b3cc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 201b3d0:	e0bffd17 	ldw	r2,-12(fp)
 201b3d4:	10800283 	ldbu	r2,10(r2)
 201b3d8:	10803fcc 	andi	r2,r2,255
 201b3dc:	103ff41e 	bne	r2,zero,201b3b0 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201b3e0:	00000906 	br	201b408 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 201b3e4:	01c00084 	movi	r7,2
 201b3e8:	01800084 	movi	r6,2
 201b3ec:	000b883a 	mov	r5,zero
 201b3f0:	e13ffd17 	ldw	r4,-12(fp)
 201b3f4:	20183500 	call	2018350 <OS_EventTaskRdy>
                 nbr_tasks++;
 201b3f8:	e0bff803 	ldbu	r2,-32(fp)
 201b3fc:	10800044 	addi	r2,r2,1
 201b400:	e0bff805 	stb	r2,-32(fp)
                 break;
 201b404:	0001883a 	nop
 201b408:	e0bff917 	ldw	r2,-28(fp)
 201b40c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b410:	e0bffa17 	ldw	r2,-24(fp)
 201b414:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 201b418:	2018d9c0 	call	2018d9c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201b41c:	e0bfff17 	ldw	r2,-4(fp)
 201b420:	00c00384 	movi	r3,14
 201b424:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201b428:	e0bff803 	ldbu	r2,-32(fp)
 201b42c:	00000706 	br	201b44c <OSMboxPendAbort+0x158>
 201b430:	e0bff917 	ldw	r2,-28(fp)
 201b434:	e0bffb15 	stw	r2,-20(fp)
 201b438:	e0bffb17 	ldw	r2,-20(fp)
 201b43c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b440:	e0bfff17 	ldw	r2,-4(fp)
 201b444:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 201b448:	0005883a 	mov	r2,zero
}
 201b44c:	e037883a 	mov	sp,fp
 201b450:	dfc00117 	ldw	ra,4(sp)
 201b454:	df000017 	ldw	fp,0(sp)
 201b458:	dec00204 	addi	sp,sp,8
 201b45c:	f800283a 	ret

0201b460 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 201b460:	defff704 	addi	sp,sp,-36
 201b464:	dfc00815 	stw	ra,32(sp)
 201b468:	df000715 	stw	fp,28(sp)
 201b46c:	df000704 	addi	fp,sp,28
 201b470:	e13ffe15 	stw	r4,-8(fp)
 201b474:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b478:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201b47c:	e0bffe17 	ldw	r2,-8(fp)
 201b480:	1000021e 	bne	r2,zero,201b48c <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201b484:	00800104 	movi	r2,4
 201b488:	00003406 	br	201b55c <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201b48c:	e0bfff17 	ldw	r2,-4(fp)
 201b490:	1000021e 	bne	r2,zero,201b49c <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 201b494:	008000c4 	movi	r2,3
 201b498:	00003006 	br	201b55c <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201b49c:	e0bffe17 	ldw	r2,-8(fp)
 201b4a0:	10800003 	ldbu	r2,0(r2)
 201b4a4:	10803fcc 	andi	r2,r2,255
 201b4a8:	10800060 	cmpeqi	r2,r2,1
 201b4ac:	1000021e 	bne	r2,zero,201b4b8 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 201b4b0:	00800044 	movi	r2,1
 201b4b4:	00002906 	br	201b55c <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b4b8:	0005303a 	rdctl	r2,status
 201b4bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b4c0:	e0fffd17 	ldw	r3,-12(fp)
 201b4c4:	00bfff84 	movi	r2,-2
 201b4c8:	1884703a 	and	r2,r3,r2
 201b4cc:	1001703a 	wrctl	status,r2
  
  return context;
 201b4d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201b4d4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 201b4d8:	e0bffe17 	ldw	r2,-8(fp)
 201b4dc:	10800283 	ldbu	r2,10(r2)
 201b4e0:	10803fcc 	andi	r2,r2,255
 201b4e4:	10000c26 	beq	r2,zero,201b518 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201b4e8:	000f883a 	mov	r7,zero
 201b4ec:	01800084 	movi	r6,2
 201b4f0:	e17fff17 	ldw	r5,-4(fp)
 201b4f4:	e13ffe17 	ldw	r4,-8(fp)
 201b4f8:	20183500 	call	2018350 <OS_EventTaskRdy>
 201b4fc:	e0bff917 	ldw	r2,-28(fp)
 201b500:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b504:	e0bffa17 	ldw	r2,-24(fp)
 201b508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201b50c:	2018d9c0 	call	2018d9c <OS_Sched>
        return (OS_ERR_NONE);
 201b510:	0005883a 	mov	r2,zero
 201b514:	00001106 	br	201b55c <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201b518:	e0bffe17 	ldw	r2,-8(fp)
 201b51c:	10800117 	ldw	r2,4(r2)
 201b520:	10000626 	beq	r2,zero,201b53c <OSMboxPost+0xdc>
 201b524:	e0bff917 	ldw	r2,-28(fp)
 201b528:	e0bffb15 	stw	r2,-20(fp)
 201b52c:	e0bffb17 	ldw	r2,-20(fp)
 201b530:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201b534:	00800504 	movi	r2,20
 201b538:	00000806 	br	201b55c <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 201b53c:	e0bffe17 	ldw	r2,-8(fp)
 201b540:	e0ffff17 	ldw	r3,-4(fp)
 201b544:	10c00115 	stw	r3,4(r2)
 201b548:	e0bff917 	ldw	r2,-28(fp)
 201b54c:	e0bffc15 	stw	r2,-16(fp)
 201b550:	e0bffc17 	ldw	r2,-16(fp)
 201b554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b558:	0005883a 	mov	r2,zero
}
 201b55c:	e037883a 	mov	sp,fp
 201b560:	dfc00117 	ldw	ra,4(sp)
 201b564:	df000017 	ldw	fp,0(sp)
 201b568:	dec00204 	addi	sp,sp,8
 201b56c:	f800283a 	ret

0201b570 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201b570:	defff604 	addi	sp,sp,-40
 201b574:	dfc00915 	stw	ra,36(sp)
 201b578:	df000815 	stw	fp,32(sp)
 201b57c:	df000804 	addi	fp,sp,32
 201b580:	e13ffd15 	stw	r4,-12(fp)
 201b584:	e17ffe15 	stw	r5,-8(fp)
 201b588:	3005883a 	mov	r2,r6
 201b58c:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b590:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201b594:	e0bffd17 	ldw	r2,-12(fp)
 201b598:	1000021e 	bne	r2,zero,201b5a4 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201b59c:	00800104 	movi	r2,4
 201b5a0:	00004506 	br	201b6b8 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201b5a4:	e0bffe17 	ldw	r2,-8(fp)
 201b5a8:	1000021e 	bne	r2,zero,201b5b4 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 201b5ac:	008000c4 	movi	r2,3
 201b5b0:	00004106 	br	201b6b8 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201b5b4:	e0bffd17 	ldw	r2,-12(fp)
 201b5b8:	10800003 	ldbu	r2,0(r2)
 201b5bc:	10803fcc 	andi	r2,r2,255
 201b5c0:	10800060 	cmpeqi	r2,r2,1
 201b5c4:	1000021e 	bne	r2,zero,201b5d0 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 201b5c8:	00800044 	movi	r2,1
 201b5cc:	00003a06 	br	201b6b8 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b5d0:	0005303a 	rdctl	r2,status
 201b5d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b5d8:	e0fffc17 	ldw	r3,-16(fp)
 201b5dc:	00bfff84 	movi	r2,-2
 201b5e0:	1884703a 	and	r2,r3,r2
 201b5e4:	1001703a 	wrctl	status,r2
  
  return context;
 201b5e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b5ec:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 201b5f0:	e0bffd17 	ldw	r2,-12(fp)
 201b5f4:	10800283 	ldbu	r2,10(r2)
 201b5f8:	10803fcc 	andi	r2,r2,255
 201b5fc:	10001d26 	beq	r2,zero,201b674 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201b600:	e0bfff03 	ldbu	r2,-4(fp)
 201b604:	1080004c 	andi	r2,r2,1
 201b608:	10000b26 	beq	r2,zero,201b638 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201b60c:	00000506 	br	201b624 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201b610:	000f883a 	mov	r7,zero
 201b614:	01800084 	movi	r6,2
 201b618:	e17ffe17 	ldw	r5,-8(fp)
 201b61c:	e13ffd17 	ldw	r4,-12(fp)
 201b620:	20183500 	call	2018350 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201b624:	e0bffd17 	ldw	r2,-12(fp)
 201b628:	10800283 	ldbu	r2,10(r2)
 201b62c:	10803fcc 	andi	r2,r2,255
 201b630:	103ff71e 	bne	r2,zero,201b610 <OSMboxPostOpt+0xa0>
 201b634:	00000506 	br	201b64c <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201b638:	000f883a 	mov	r7,zero
 201b63c:	01800084 	movi	r6,2
 201b640:	e17ffe17 	ldw	r5,-8(fp)
 201b644:	e13ffd17 	ldw	r4,-12(fp)
 201b648:	20183500 	call	2018350 <OS_EventTaskRdy>
 201b64c:	e0bff817 	ldw	r2,-32(fp)
 201b650:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b654:	e0bff917 	ldw	r2,-28(fp)
 201b658:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 201b65c:	e0bfff03 	ldbu	r2,-4(fp)
 201b660:	1080010c 	andi	r2,r2,4
 201b664:	1000011e 	bne	r2,zero,201b66c <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 201b668:	2018d9c0 	call	2018d9c <OS_Sched>
        }
        return (OS_ERR_NONE);
 201b66c:	0005883a 	mov	r2,zero
 201b670:	00001106 	br	201b6b8 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201b674:	e0bffd17 	ldw	r2,-12(fp)
 201b678:	10800117 	ldw	r2,4(r2)
 201b67c:	10000626 	beq	r2,zero,201b698 <OSMboxPostOpt+0x128>
 201b680:	e0bff817 	ldw	r2,-32(fp)
 201b684:	e0bffa15 	stw	r2,-24(fp)
 201b688:	e0bffa17 	ldw	r2,-24(fp)
 201b68c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201b690:	00800504 	movi	r2,20
 201b694:	00000806 	br	201b6b8 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 201b698:	e0bffd17 	ldw	r2,-12(fp)
 201b69c:	e0fffe17 	ldw	r3,-8(fp)
 201b6a0:	10c00115 	stw	r3,4(r2)
 201b6a4:	e0bff817 	ldw	r2,-32(fp)
 201b6a8:	e0bffb15 	stw	r2,-20(fp)
 201b6ac:	e0bffb17 	ldw	r2,-20(fp)
 201b6b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b6b4:	0005883a 	mov	r2,zero
}
 201b6b8:	e037883a 	mov	sp,fp
 201b6bc:	dfc00117 	ldw	ra,4(sp)
 201b6c0:	df000017 	ldw	fp,0(sp)
 201b6c4:	dec00204 	addi	sp,sp,8
 201b6c8:	f800283a 	ret

0201b6cc <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 201b6cc:	defff704 	addi	sp,sp,-36
 201b6d0:	df000815 	stw	fp,32(sp)
 201b6d4:	df000804 	addi	fp,sp,32
 201b6d8:	e13ffe15 	stw	r4,-8(fp)
 201b6dc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201b6e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201b6e4:	e0bffe17 	ldw	r2,-8(fp)
 201b6e8:	1000021e 	bne	r2,zero,201b6f4 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201b6ec:	00800104 	movi	r2,4
 201b6f0:	00003606 	br	201b7cc <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 201b6f4:	e0bfff17 	ldw	r2,-4(fp)
 201b6f8:	1000021e 	bne	r2,zero,201b704 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201b6fc:	00800244 	movi	r2,9
 201b700:	00003206 	br	201b7cc <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201b704:	e0bffe17 	ldw	r2,-8(fp)
 201b708:	10800003 	ldbu	r2,0(r2)
 201b70c:	10803fcc 	andi	r2,r2,255
 201b710:	10800060 	cmpeqi	r2,r2,1
 201b714:	1000021e 	bne	r2,zero,201b720 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201b718:	00800044 	movi	r2,1
 201b71c:	00002b06 	br	201b7cc <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b720:	0005303a 	rdctl	r2,status
 201b724:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b728:	e0fffd17 	ldw	r3,-12(fp)
 201b72c:	00bfff84 	movi	r2,-2
 201b730:	1884703a 	and	r2,r3,r2
 201b734:	1001703a 	wrctl	status,r2
  
  return context;
 201b738:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201b73c:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 201b740:	e0bffe17 	ldw	r2,-8(fp)
 201b744:	10c00283 	ldbu	r3,10(r2)
 201b748:	e0bfff17 	ldw	r2,-4(fp)
 201b74c:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 201b750:	e0bffe17 	ldw	r2,-8(fp)
 201b754:	108002c4 	addi	r2,r2,11
 201b758:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 201b75c:	e0bfff17 	ldw	r2,-4(fp)
 201b760:	10800104 	addi	r2,r2,4
 201b764:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201b768:	e03ff805 	stb	zero,-32(fp)
 201b76c:	00000b06 	br	201b79c <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 201b770:	e0bffa17 	ldw	r2,-24(fp)
 201b774:	10c00044 	addi	r3,r2,1
 201b778:	e0fffa15 	stw	r3,-24(fp)
 201b77c:	e0fff917 	ldw	r3,-28(fp)
 201b780:	19000044 	addi	r4,r3,1
 201b784:	e13ff915 	stw	r4,-28(fp)
 201b788:	18c00003 	ldbu	r3,0(r3)
 201b78c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201b790:	e0bff803 	ldbu	r2,-32(fp)
 201b794:	10800044 	addi	r2,r2,1
 201b798:	e0bff805 	stb	r2,-32(fp)
 201b79c:	e0bff803 	ldbu	r2,-32(fp)
 201b7a0:	108000f0 	cmpltui	r2,r2,3
 201b7a4:	103ff21e 	bne	r2,zero,201b770 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 201b7a8:	e0bffe17 	ldw	r2,-8(fp)
 201b7ac:	10c00117 	ldw	r3,4(r2)
 201b7b0:	e0bfff17 	ldw	r2,-4(fp)
 201b7b4:	10c00015 	stw	r3,0(r2)
 201b7b8:	e0bffb17 	ldw	r2,-20(fp)
 201b7bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b7c0:	e0bffc17 	ldw	r2,-16(fp)
 201b7c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b7c8:	0005883a 	mov	r2,zero
}
 201b7cc:	e037883a 	mov	sp,fp
 201b7d0:	df000017 	ldw	fp,0(sp)
 201b7d4:	dec00104 	addi	sp,sp,4
 201b7d8:	f800283a 	ret

0201b7dc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 201b7dc:	defff404 	addi	sp,sp,-48
 201b7e0:	df000b15 	stw	fp,44(sp)
 201b7e4:	df000b04 	addi	fp,sp,44
 201b7e8:	e13ffc15 	stw	r4,-16(fp)
 201b7ec:	e17ffd15 	stw	r5,-12(fp)
 201b7f0:	e1bffe15 	stw	r6,-8(fp)
 201b7f4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b7f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201b7fc:	e0bfff17 	ldw	r2,-4(fp)
 201b800:	1000021e 	bne	r2,zero,201b80c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 201b804:	0005883a 	mov	r2,zero
 201b808:	00006506 	br	201b9a0 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 201b80c:	e0bffc17 	ldw	r2,-16(fp)
 201b810:	1000051e 	bne	r2,zero,201b828 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201b814:	e0bfff17 	ldw	r2,-4(fp)
 201b818:	00c01884 	movi	r3,98
 201b81c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b820:	0005883a 	mov	r2,zero
 201b824:	00005e06 	br	201b9a0 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 201b828:	e0bffc17 	ldw	r2,-16(fp)
 201b82c:	108000cc 	andi	r2,r2,3
 201b830:	10000526 	beq	r2,zero,201b848 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201b834:	e0bfff17 	ldw	r2,-4(fp)
 201b838:	00c01884 	movi	r3,98
 201b83c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b840:	0005883a 	mov	r2,zero
 201b844:	00005606 	br	201b9a0 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 201b848:	e0bffd17 	ldw	r2,-12(fp)
 201b84c:	108000a8 	cmpgeui	r2,r2,2
 201b850:	1000051e 	bne	r2,zero,201b868 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 201b854:	e0bfff17 	ldw	r2,-4(fp)
 201b858:	00c016c4 	movi	r3,91
 201b85c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b860:	0005883a 	mov	r2,zero
 201b864:	00004e06 	br	201b9a0 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 201b868:	e0bffe17 	ldw	r2,-8(fp)
 201b86c:	10800128 	cmpgeui	r2,r2,4
 201b870:	1000051e 	bne	r2,zero,201b888 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 201b874:	e0bfff17 	ldw	r2,-4(fp)
 201b878:	00c01704 	movi	r3,92
 201b87c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b880:	0005883a 	mov	r2,zero
 201b884:	00004606 	br	201b9a0 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b888:	0005303a 	rdctl	r2,status
 201b88c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b890:	e0fffb17 	ldw	r3,-20(fp)
 201b894:	00bfff84 	movi	r2,-2
 201b898:	1884703a 	and	r2,r3,r2
 201b89c:	1001703a 	wrctl	status,r2
  
  return context;
 201b8a0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b8a4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 201b8a8:	d0a7b017 	ldw	r2,-24896(gp)
 201b8ac:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 201b8b0:	d0a7b017 	ldw	r2,-24896(gp)
 201b8b4:	10000326 	beq	r2,zero,201b8c4 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 201b8b8:	d0a7b017 	ldw	r2,-24896(gp)
 201b8bc:	10800117 	ldw	r2,4(r2)
 201b8c0:	d0a7b015 	stw	r2,-24896(gp)
 201b8c4:	e0bff817 	ldw	r2,-32(fp)
 201b8c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b8cc:	e0bff917 	ldw	r2,-28(fp)
 201b8d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 201b8d4:	e0bffa17 	ldw	r2,-24(fp)
 201b8d8:	1000051e 	bne	r2,zero,201b8f0 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 201b8dc:	e0bfff17 	ldw	r2,-4(fp)
 201b8e0:	00c01684 	movi	r3,90
 201b8e4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201b8e8:	0005883a 	mov	r2,zero
 201b8ec:	00002c06 	br	201b9a0 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 201b8f0:	e0bffc17 	ldw	r2,-16(fp)
 201b8f4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 201b8f8:	e0fffc17 	ldw	r3,-16(fp)
 201b8fc:	e0bffe17 	ldw	r2,-8(fp)
 201b900:	1885883a 	add	r2,r3,r2
 201b904:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 201b908:	e03ff715 	stw	zero,-36(fp)
 201b90c:	00000c06 	br	201b940 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 201b910:	e0bff617 	ldw	r2,-40(fp)
 201b914:	e0fff517 	ldw	r3,-44(fp)
 201b918:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 201b91c:	e0bff517 	ldw	r2,-44(fp)
 201b920:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 201b924:	e0fff517 	ldw	r3,-44(fp)
 201b928:	e0bffe17 	ldw	r2,-8(fp)
 201b92c:	1885883a 	add	r2,r3,r2
 201b930:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 201b934:	e0bff717 	ldw	r2,-36(fp)
 201b938:	10800044 	addi	r2,r2,1
 201b93c:	e0bff715 	stw	r2,-36(fp)
 201b940:	e0bffd17 	ldw	r2,-12(fp)
 201b944:	10bfffc4 	addi	r2,r2,-1
 201b948:	e0fff717 	ldw	r3,-36(fp)
 201b94c:	18bff036 	bltu	r3,r2,201b910 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 201b950:	e0bff617 	ldw	r2,-40(fp)
 201b954:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 201b958:	e0bffa17 	ldw	r2,-24(fp)
 201b95c:	e0fffc17 	ldw	r3,-16(fp)
 201b960:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 201b964:	e0bffa17 	ldw	r2,-24(fp)
 201b968:	e0fffc17 	ldw	r3,-16(fp)
 201b96c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 201b970:	e0bffa17 	ldw	r2,-24(fp)
 201b974:	e0fffd17 	ldw	r3,-12(fp)
 201b978:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 201b97c:	e0bffa17 	ldw	r2,-24(fp)
 201b980:	e0fffd17 	ldw	r3,-12(fp)
 201b984:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 201b988:	e0bffa17 	ldw	r2,-24(fp)
 201b98c:	e0fffe17 	ldw	r3,-8(fp)
 201b990:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 201b994:	e0bfff17 	ldw	r2,-4(fp)
 201b998:	10000005 	stb	zero,0(r2)
    return (pmem);
 201b99c:	e0bffa17 	ldw	r2,-24(fp)
}
 201b9a0:	e037883a 	mov	sp,fp
 201b9a4:	df000017 	ldw	fp,0(sp)
 201b9a8:	dec00104 	addi	sp,sp,4
 201b9ac:	f800283a 	ret

0201b9b0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 201b9b0:	defff804 	addi	sp,sp,-32
 201b9b4:	df000715 	stw	fp,28(sp)
 201b9b8:	df000704 	addi	fp,sp,28
 201b9bc:	e13ffe15 	stw	r4,-8(fp)
 201b9c0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b9c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201b9c8:	e0bfff17 	ldw	r2,-4(fp)
 201b9cc:	1000021e 	bne	r2,zero,201b9d8 <OSMemGet+0x28>
        return ((void *)0);
 201b9d0:	0005883a 	mov	r2,zero
 201b9d4:	00002e06 	br	201ba90 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 201b9d8:	e0bffe17 	ldw	r2,-8(fp)
 201b9dc:	1000051e 	bne	r2,zero,201b9f4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201b9e0:	e0bfff17 	ldw	r2,-4(fp)
 201b9e4:	00c01804 	movi	r3,96
 201b9e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b9ec:	0005883a 	mov	r2,zero
 201b9f0:	00002706 	br	201ba90 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b9f4:	0005303a 	rdctl	r2,status
 201b9f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b9fc:	e0fffd17 	ldw	r3,-12(fp)
 201ba00:	00bfff84 	movi	r2,-2
 201ba04:	1884703a 	and	r2,r3,r2
 201ba08:	1001703a 	wrctl	status,r2
  
  return context;
 201ba0c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201ba10:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 201ba14:	e0bffe17 	ldw	r2,-8(fp)
 201ba18:	10800417 	ldw	r2,16(r2)
 201ba1c:	10001426 	beq	r2,zero,201ba70 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 201ba20:	e0bffe17 	ldw	r2,-8(fp)
 201ba24:	10800117 	ldw	r2,4(r2)
 201ba28:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 201ba2c:	e0bffb17 	ldw	r2,-20(fp)
 201ba30:	10c00017 	ldw	r3,0(r2)
 201ba34:	e0bffe17 	ldw	r2,-8(fp)
 201ba38:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 201ba3c:	e0bffe17 	ldw	r2,-8(fp)
 201ba40:	10800417 	ldw	r2,16(r2)
 201ba44:	10ffffc4 	addi	r3,r2,-1
 201ba48:	e0bffe17 	ldw	r2,-8(fp)
 201ba4c:	10c00415 	stw	r3,16(r2)
 201ba50:	e0bff917 	ldw	r2,-28(fp)
 201ba54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ba58:	e0bffa17 	ldw	r2,-24(fp)
 201ba5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 201ba60:	e0bfff17 	ldw	r2,-4(fp)
 201ba64:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 201ba68:	e0bffb17 	ldw	r2,-20(fp)
 201ba6c:	00000806 	br	201ba90 <OSMemGet+0xe0>
 201ba70:	e0bff917 	ldw	r2,-28(fp)
 201ba74:	e0bffc15 	stw	r2,-16(fp)
 201ba78:	e0bffc17 	ldw	r2,-16(fp)
 201ba7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 201ba80:	e0bfff17 	ldw	r2,-4(fp)
 201ba84:	00c01744 	movi	r3,93
 201ba88:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 201ba8c:	0005883a 	mov	r2,zero
}
 201ba90:	e037883a 	mov	sp,fp
 201ba94:	df000017 	ldw	fp,0(sp)
 201ba98:	dec00104 	addi	sp,sp,4
 201ba9c:	f800283a 	ret

0201baa0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201baa0:	defff704 	addi	sp,sp,-36
 201baa4:	dfc00815 	stw	ra,32(sp)
 201baa8:	df000715 	stw	fp,28(sp)
 201baac:	df000704 	addi	fp,sp,28
 201bab0:	e13ffd15 	stw	r4,-12(fp)
 201bab4:	e17ffe15 	stw	r5,-8(fp)
 201bab8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201babc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201bac0:	e0bfff17 	ldw	r2,-4(fp)
 201bac4:	1000021e 	bne	r2,zero,201bad0 <OSMemNameGet+0x30>
        return (0);
 201bac8:	0005883a 	mov	r2,zero
 201bacc:	00002b06 	br	201bb7c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 201bad0:	e0bffd17 	ldw	r2,-12(fp)
 201bad4:	1000051e 	bne	r2,zero,201baec <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201bad8:	e0bfff17 	ldw	r2,-4(fp)
 201badc:	00c01804 	movi	r3,96
 201bae0:	10c00005 	stb	r3,0(r2)
        return (0);
 201bae4:	0005883a 	mov	r2,zero
 201bae8:	00002406 	br	201bb7c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201baec:	e0bffe17 	ldw	r2,-8(fp)
 201baf0:	1000051e 	bne	r2,zero,201bb08 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201baf4:	e0bfff17 	ldw	r2,-4(fp)
 201baf8:	00c00304 	movi	r3,12
 201bafc:	10c00005 	stb	r3,0(r2)
        return (0);
 201bb00:	0005883a 	mov	r2,zero
 201bb04:	00001d06 	br	201bb7c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201bb08:	d0a7b503 	ldbu	r2,-24876(gp)
 201bb0c:	10803fcc 	andi	r2,r2,255
 201bb10:	10000526 	beq	r2,zero,201bb28 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 201bb14:	e0bfff17 	ldw	r2,-4(fp)
 201bb18:	00c00444 	movi	r3,17
 201bb1c:	10c00005 	stb	r3,0(r2)
        return (0);
 201bb20:	0005883a 	mov	r2,zero
 201bb24:	00001506 	br	201bb7c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bb28:	0005303a 	rdctl	r2,status
 201bb2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bb30:	e0fffb17 	ldw	r3,-20(fp)
 201bb34:	00bfff84 	movi	r2,-2
 201bb38:	1884703a 	and	r2,r3,r2
 201bb3c:	1001703a 	wrctl	status,r2
  
  return context;
 201bb40:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201bb44:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 201bb48:	e0bffd17 	ldw	r2,-12(fp)
 201bb4c:	10800504 	addi	r2,r2,20
 201bb50:	100b883a 	mov	r5,r2
 201bb54:	e13ffe17 	ldw	r4,-8(fp)
 201bb58:	2018ee00 	call	2018ee0 <OS_StrCopy>
 201bb5c:	e0bffa05 	stb	r2,-24(fp)
 201bb60:	e0bff917 	ldw	r2,-28(fp)
 201bb64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bb68:	e0bffc17 	ldw	r2,-16(fp)
 201bb6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201bb70:	e0bfff17 	ldw	r2,-4(fp)
 201bb74:	10000005 	stb	zero,0(r2)
    return (len);
 201bb78:	e0bffa03 	ldbu	r2,-24(fp)
}
 201bb7c:	e037883a 	mov	sp,fp
 201bb80:	dfc00117 	ldw	ra,4(sp)
 201bb84:	df000017 	ldw	fp,0(sp)
 201bb88:	dec00204 	addi	sp,sp,8
 201bb8c:	f800283a 	ret

0201bb90 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201bb90:	defff604 	addi	sp,sp,-40
 201bb94:	dfc00915 	stw	ra,36(sp)
 201bb98:	df000815 	stw	fp,32(sp)
 201bb9c:	df000804 	addi	fp,sp,32
 201bba0:	e13ffd15 	stw	r4,-12(fp)
 201bba4:	e17ffe15 	stw	r5,-8(fp)
 201bba8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bbac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201bbb0:	e0bfff17 	ldw	r2,-4(fp)
 201bbb4:	10003526 	beq	r2,zero,201bc8c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 201bbb8:	e0bffd17 	ldw	r2,-12(fp)
 201bbbc:	1000041e 	bne	r2,zero,201bbd0 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201bbc0:	e0bfff17 	ldw	r2,-4(fp)
 201bbc4:	00c01804 	movi	r3,96
 201bbc8:	10c00005 	stb	r3,0(r2)
        return;
 201bbcc:	00003006 	br	201bc90 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201bbd0:	e0bffe17 	ldw	r2,-8(fp)
 201bbd4:	1000041e 	bne	r2,zero,201bbe8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 201bbd8:	e0bfff17 	ldw	r2,-4(fp)
 201bbdc:	00c00304 	movi	r3,12
 201bbe0:	10c00005 	stb	r3,0(r2)
        return;
 201bbe4:	00002a06 	br	201bc90 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201bbe8:	d0a7b503 	ldbu	r2,-24876(gp)
 201bbec:	10803fcc 	andi	r2,r2,255
 201bbf0:	10000426 	beq	r2,zero,201bc04 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 201bbf4:	e0bfff17 	ldw	r2,-4(fp)
 201bbf8:	00c00484 	movi	r3,18
 201bbfc:	10c00005 	stb	r3,0(r2)
        return;
 201bc00:	00002306 	br	201bc90 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bc04:	0005303a 	rdctl	r2,status
 201bc08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bc0c:	e0fffc17 	ldw	r3,-16(fp)
 201bc10:	00bfff84 	movi	r2,-2
 201bc14:	1884703a 	and	r2,r3,r2
 201bc18:	1001703a 	wrctl	status,r2
  
  return context;
 201bc1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201bc20:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 201bc24:	e13ffe17 	ldw	r4,-8(fp)
 201bc28:	2018f540 	call	2018f54 <OS_StrLen>
 201bc2c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 201bc30:	e0bffa03 	ldbu	r2,-24(fp)
 201bc34:	10800830 	cmpltui	r2,r2,32
 201bc38:	1000081e 	bne	r2,zero,201bc5c <OSMemNameSet+0xcc>
 201bc3c:	e0bff817 	ldw	r2,-32(fp)
 201bc40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bc44:	e0bff917 	ldw	r2,-28(fp)
 201bc48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 201bc4c:	e0bfff17 	ldw	r2,-4(fp)
 201bc50:	00c018c4 	movi	r3,99
 201bc54:	10c00005 	stb	r3,0(r2)
        return;
 201bc58:	00000d06 	br	201bc90 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 201bc5c:	e0bffd17 	ldw	r2,-12(fp)
 201bc60:	10800504 	addi	r2,r2,20
 201bc64:	e17ffe17 	ldw	r5,-8(fp)
 201bc68:	1009883a 	mov	r4,r2
 201bc6c:	2018ee00 	call	2018ee0 <OS_StrCopy>
 201bc70:	e0bff817 	ldw	r2,-32(fp)
 201bc74:	e0bffb15 	stw	r2,-20(fp)
 201bc78:	e0bffb17 	ldw	r2,-20(fp)
 201bc7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201bc80:	e0bfff17 	ldw	r2,-4(fp)
 201bc84:	10000005 	stb	zero,0(r2)
 201bc88:	00000106 	br	201bc90 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201bc8c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201bc90:	e037883a 	mov	sp,fp
 201bc94:	dfc00117 	ldw	ra,4(sp)
 201bc98:	df000017 	ldw	fp,0(sp)
 201bc9c:	dec00204 	addi	sp,sp,8
 201bca0:	f800283a 	ret

0201bca4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 201bca4:	defff904 	addi	sp,sp,-28
 201bca8:	df000615 	stw	fp,24(sp)
 201bcac:	df000604 	addi	fp,sp,24
 201bcb0:	e13ffe15 	stw	r4,-8(fp)
 201bcb4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bcb8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201bcbc:	e0bffe17 	ldw	r2,-8(fp)
 201bcc0:	1000021e 	bne	r2,zero,201bccc <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201bcc4:	00801804 	movi	r2,96
 201bcc8:	00002806 	br	201bd6c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 201bccc:	e0bfff17 	ldw	r2,-4(fp)
 201bcd0:	1000021e 	bne	r2,zero,201bcdc <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 201bcd4:	008017c4 	movi	r2,95
 201bcd8:	00002406 	br	201bd6c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bcdc:	0005303a 	rdctl	r2,status
 201bce0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bce4:	e0fffd17 	ldw	r3,-12(fp)
 201bce8:	00bfff84 	movi	r2,-2
 201bcec:	1884703a 	and	r2,r3,r2
 201bcf0:	1001703a 	wrctl	status,r2
  
  return context;
 201bcf4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201bcf8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 201bcfc:	e0bffe17 	ldw	r2,-8(fp)
 201bd00:	10c00417 	ldw	r3,16(r2)
 201bd04:	e0bffe17 	ldw	r2,-8(fp)
 201bd08:	10800317 	ldw	r2,12(r2)
 201bd0c:	18800636 	bltu	r3,r2,201bd28 <OSMemPut+0x84>
 201bd10:	e0bffa17 	ldw	r2,-24(fp)
 201bd14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bd18:	e0bffb17 	ldw	r2,-20(fp)
 201bd1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 201bd20:	00801784 	movi	r2,94
 201bd24:	00001106 	br	201bd6c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 201bd28:	e0bffe17 	ldw	r2,-8(fp)
 201bd2c:	10c00117 	ldw	r3,4(r2)
 201bd30:	e0bfff17 	ldw	r2,-4(fp)
 201bd34:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 201bd38:	e0bffe17 	ldw	r2,-8(fp)
 201bd3c:	e0ffff17 	ldw	r3,-4(fp)
 201bd40:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 201bd44:	e0bffe17 	ldw	r2,-8(fp)
 201bd48:	10800417 	ldw	r2,16(r2)
 201bd4c:	10c00044 	addi	r3,r2,1
 201bd50:	e0bffe17 	ldw	r2,-8(fp)
 201bd54:	10c00415 	stw	r3,16(r2)
 201bd58:	e0bffa17 	ldw	r2,-24(fp)
 201bd5c:	e0bffc15 	stw	r2,-16(fp)
 201bd60:	e0bffc17 	ldw	r2,-16(fp)
 201bd64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 201bd68:	0005883a 	mov	r2,zero
}
 201bd6c:	e037883a 	mov	sp,fp
 201bd70:	df000017 	ldw	fp,0(sp)
 201bd74:	dec00104 	addi	sp,sp,4
 201bd78:	f800283a 	ret

0201bd7c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 201bd7c:	defffa04 	addi	sp,sp,-24
 201bd80:	df000515 	stw	fp,20(sp)
 201bd84:	df000504 	addi	fp,sp,20
 201bd88:	e13ffe15 	stw	r4,-8(fp)
 201bd8c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bd90:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201bd94:	e0bffe17 	ldw	r2,-8(fp)
 201bd98:	1000021e 	bne	r2,zero,201bda4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201bd9c:	00801804 	movi	r2,96
 201bda0:	00002c06 	br	201be54 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 201bda4:	e0bfff17 	ldw	r2,-4(fp)
 201bda8:	1000021e 	bne	r2,zero,201bdb4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 201bdac:	00801844 	movi	r2,97
 201bdb0:	00002806 	br	201be54 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bdb4:	0005303a 	rdctl	r2,status
 201bdb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bdbc:	e0fffc17 	ldw	r3,-16(fp)
 201bdc0:	00bfff84 	movi	r2,-2
 201bdc4:	1884703a 	and	r2,r3,r2
 201bdc8:	1001703a 	wrctl	status,r2
  
  return context;
 201bdcc:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201bdd0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 201bdd4:	e0bffe17 	ldw	r2,-8(fp)
 201bdd8:	10c00017 	ldw	r3,0(r2)
 201bddc:	e0bfff17 	ldw	r2,-4(fp)
 201bde0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 201bde4:	e0bffe17 	ldw	r2,-8(fp)
 201bde8:	10c00117 	ldw	r3,4(r2)
 201bdec:	e0bfff17 	ldw	r2,-4(fp)
 201bdf0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 201bdf4:	e0bffe17 	ldw	r2,-8(fp)
 201bdf8:	10c00217 	ldw	r3,8(r2)
 201bdfc:	e0bfff17 	ldw	r2,-4(fp)
 201be00:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 201be04:	e0bffe17 	ldw	r2,-8(fp)
 201be08:	10c00317 	ldw	r3,12(r2)
 201be0c:	e0bfff17 	ldw	r2,-4(fp)
 201be10:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 201be14:	e0bffe17 	ldw	r2,-8(fp)
 201be18:	10c00417 	ldw	r3,16(r2)
 201be1c:	e0bfff17 	ldw	r2,-4(fp)
 201be20:	10c00415 	stw	r3,16(r2)
 201be24:	e0bffb17 	ldw	r2,-20(fp)
 201be28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201be2c:	e0bffd17 	ldw	r2,-12(fp)
 201be30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 201be34:	e0bfff17 	ldw	r2,-4(fp)
 201be38:	10c00317 	ldw	r3,12(r2)
 201be3c:	e0bfff17 	ldw	r2,-4(fp)
 201be40:	10800417 	ldw	r2,16(r2)
 201be44:	1887c83a 	sub	r3,r3,r2
 201be48:	e0bfff17 	ldw	r2,-4(fp)
 201be4c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 201be50:	0005883a 	mov	r2,zero
}
 201be54:	e037883a 	mov	sp,fp
 201be58:	df000017 	ldw	fp,0(sp)
 201be5c:	dec00104 	addi	sp,sp,4
 201be60:	f800283a 	ret

0201be64 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 201be64:	defffc04 	addi	sp,sp,-16
 201be68:	dfc00315 	stw	ra,12(sp)
 201be6c:	df000215 	stw	fp,8(sp)
 201be70:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 201be74:	01430c04 	movi	r5,3120
 201be78:	010080f4 	movhi	r4,515
 201be7c:	213a5804 	addi	r4,r4,-5792
 201be80:	2018ce00 	call	2018ce0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 201be84:	008080f4 	movhi	r2,515
 201be88:	10ba5804 	addi	r2,r2,-5792
 201be8c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 201be90:	e03fff0d 	sth	zero,-4(fp)
 201be94:	00001306 	br	201bee4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 201be98:	e0bfff0b 	ldhu	r2,-4(fp)
 201be9c:	10800044 	addi	r2,r2,1
 201bea0:	10c00d24 	muli	r3,r2,52
 201bea4:	008080f4 	movhi	r2,515
 201bea8:	10ba5804 	addi	r2,r2,-5792
 201beac:	1887883a 	add	r3,r3,r2
 201beb0:	e0bffe17 	ldw	r2,-8(fp)
 201beb4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 201beb8:	e0bffe17 	ldw	r2,-8(fp)
 201bebc:	00c00fc4 	movi	r3,63
 201bec0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 201bec4:	e0bffe17 	ldw	r2,-8(fp)
 201bec8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 201becc:	e0bffe17 	ldw	r2,-8(fp)
 201bed0:	10800d04 	addi	r2,r2,52
 201bed4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 201bed8:	e0bfff0b 	ldhu	r2,-4(fp)
 201bedc:	10800044 	addi	r2,r2,1
 201bee0:	e0bfff0d 	sth	r2,-4(fp)
 201bee4:	e0bfff0b 	ldhu	r2,-4(fp)
 201bee8:	10800ef0 	cmpltui	r2,r2,59
 201beec:	103fea1e 	bne	r2,zero,201be98 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 201bef0:	e0bffe17 	ldw	r2,-8(fp)
 201bef4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 201bef8:	e0bffe17 	ldw	r2,-8(fp)
 201befc:	00c00fc4 	movi	r3,63
 201bf00:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 201bf04:	e0bffe17 	ldw	r2,-8(fp)
 201bf08:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 201bf0c:	008080f4 	movhi	r2,515
 201bf10:	10ba5804 	addi	r2,r2,-5792
 201bf14:	d0a7b015 	stw	r2,-24896(gp)
#endif
}
 201bf18:	0001883a 	nop
 201bf1c:	e037883a 	mov	sp,fp
 201bf20:	dfc00117 	ldw	ra,4(sp)
 201bf24:	df000017 	ldw	fp,0(sp)
 201bf28:	dec00204 	addi	sp,sp,8
 201bf2c:	f800283a 	ret

0201bf30 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 201bf30:	defff804 	addi	sp,sp,-32
 201bf34:	df000715 	stw	fp,28(sp)
 201bf38:	df000704 	addi	fp,sp,28
 201bf3c:	e13ffe15 	stw	r4,-8(fp)
 201bf40:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bf44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201bf48:	e0bfff17 	ldw	r2,-4(fp)
 201bf4c:	1000021e 	bne	r2,zero,201bf58 <OSQAccept+0x28>
        return ((void *)0);
 201bf50:	0005883a 	mov	r2,zero
 201bf54:	00004206 	br	201c060 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201bf58:	e0bffe17 	ldw	r2,-8(fp)
 201bf5c:	1000051e 	bne	r2,zero,201bf74 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201bf60:	e0bfff17 	ldw	r2,-4(fp)
 201bf64:	00c00104 	movi	r3,4
 201bf68:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201bf6c:	0005883a 	mov	r2,zero
 201bf70:	00003b06 	br	201c060 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201bf74:	e0bffe17 	ldw	r2,-8(fp)
 201bf78:	10800003 	ldbu	r2,0(r2)
 201bf7c:	10803fcc 	andi	r2,r2,255
 201bf80:	108000a0 	cmpeqi	r2,r2,2
 201bf84:	1000051e 	bne	r2,zero,201bf9c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201bf88:	e0bfff17 	ldw	r2,-4(fp)
 201bf8c:	00c00044 	movi	r3,1
 201bf90:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201bf94:	0005883a 	mov	r2,zero
 201bf98:	00003106 	br	201c060 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bf9c:	0005303a 	rdctl	r2,status
 201bfa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bfa4:	e0fffd17 	ldw	r3,-12(fp)
 201bfa8:	00bfff84 	movi	r2,-2
 201bfac:	1884703a 	and	r2,r3,r2
 201bfb0:	1001703a 	wrctl	status,r2
  
  return context;
 201bfb4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201bfb8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201bfbc:	e0bffe17 	ldw	r2,-8(fp)
 201bfc0:	10800117 	ldw	r2,4(r2)
 201bfc4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201bfc8:	e0bffc17 	ldw	r2,-16(fp)
 201bfcc:	1080058b 	ldhu	r2,22(r2)
 201bfd0:	10bfffcc 	andi	r2,r2,65535
 201bfd4:	10001926 	beq	r2,zero,201c03c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201bfd8:	e0bffc17 	ldw	r2,-16(fp)
 201bfdc:	10800417 	ldw	r2,16(r2)
 201bfe0:	11000104 	addi	r4,r2,4
 201bfe4:	e0fffc17 	ldw	r3,-16(fp)
 201bfe8:	19000415 	stw	r4,16(r3)
 201bfec:	10800017 	ldw	r2,0(r2)
 201bff0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201bff4:	e0bffc17 	ldw	r2,-16(fp)
 201bff8:	1080058b 	ldhu	r2,22(r2)
 201bffc:	10bfffc4 	addi	r2,r2,-1
 201c000:	1007883a 	mov	r3,r2
 201c004:	e0bffc17 	ldw	r2,-16(fp)
 201c008:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201c00c:	e0bffc17 	ldw	r2,-16(fp)
 201c010:	10c00417 	ldw	r3,16(r2)
 201c014:	e0bffc17 	ldw	r2,-16(fp)
 201c018:	10800217 	ldw	r2,8(r2)
 201c01c:	1880041e 	bne	r3,r2,201c030 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 201c020:	e0bffc17 	ldw	r2,-16(fp)
 201c024:	10c00117 	ldw	r3,4(r2)
 201c028:	e0bffc17 	ldw	r2,-16(fp)
 201c02c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 201c030:	e0bfff17 	ldw	r2,-4(fp)
 201c034:	10000005 	stb	zero,0(r2)
 201c038:	00000406 	br	201c04c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 201c03c:	e0bfff17 	ldw	r2,-4(fp)
 201c040:	00c007c4 	movi	r3,31
 201c044:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 201c048:	e03ff915 	stw	zero,-28(fp)
 201c04c:	e0bffa17 	ldw	r2,-24(fp)
 201c050:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c054:	e0bffb17 	ldw	r2,-20(fp)
 201c058:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 201c05c:	e0bff917 	ldw	r2,-28(fp)
}
 201c060:	e037883a 	mov	sp,fp
 201c064:	df000017 	ldw	fp,0(sp)
 201c068:	dec00104 	addi	sp,sp,4
 201c06c:	f800283a 	ret

0201c070 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 201c070:	defff404 	addi	sp,sp,-48
 201c074:	dfc00b15 	stw	ra,44(sp)
 201c078:	df000a15 	stw	fp,40(sp)
 201c07c:	df000a04 	addi	fp,sp,40
 201c080:	e13ffe15 	stw	r4,-8(fp)
 201c084:	2805883a 	mov	r2,r5
 201c088:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c08c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201c090:	d0a7b503 	ldbu	r2,-24876(gp)
 201c094:	10803fcc 	andi	r2,r2,255
 201c098:	10000226 	beq	r2,zero,201c0a4 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 201c09c:	0005883a 	mov	r2,zero
 201c0a0:	00005906 	br	201c208 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c0a4:	0005303a 	rdctl	r2,status
 201c0a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c0ac:	e0fffd17 	ldw	r3,-12(fp)
 201c0b0:	00bfff84 	movi	r2,-2
 201c0b4:	1884703a 	and	r2,r3,r2
 201c0b8:	1001703a 	wrctl	status,r2
  
  return context;
 201c0bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201c0c0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201c0c4:	d0a7b417 	ldw	r2,-24880(gp)
 201c0c8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201c0cc:	d0a7b417 	ldw	r2,-24880(gp)
 201c0d0:	10000326 	beq	r2,zero,201c0e0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201c0d4:	d0a7b417 	ldw	r2,-24880(gp)
 201c0d8:	10800117 	ldw	r2,4(r2)
 201c0dc:	d0a7b415 	stw	r2,-24880(gp)
 201c0e0:	e0bff717 	ldw	r2,-36(fp)
 201c0e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c0e8:	e0bff817 	ldw	r2,-32(fp)
 201c0ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 201c0f0:	e0bff617 	ldw	r2,-40(fp)
 201c0f4:	10004326 	beq	r2,zero,201c204 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c0f8:	0005303a 	rdctl	r2,status
 201c0fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c100:	e0fff917 	ldw	r3,-28(fp)
 201c104:	00bfff84 	movi	r2,-2
 201c108:	1884703a 	and	r2,r3,r2
 201c10c:	1001703a 	wrctl	status,r2
  
  return context;
 201c110:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 201c114:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 201c118:	d0a7b217 	ldw	r2,-24888(gp)
 201c11c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 201c120:	e0bffb17 	ldw	r2,-20(fp)
 201c124:	10002d26 	beq	r2,zero,201c1dc <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 201c128:	d0a7b217 	ldw	r2,-24888(gp)
 201c12c:	10800017 	ldw	r2,0(r2)
 201c130:	d0a7b215 	stw	r2,-24888(gp)
 201c134:	e0bff717 	ldw	r2,-36(fp)
 201c138:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c13c:	e0bffa17 	ldw	r2,-24(fp)
 201c140:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 201c144:	e0bffb17 	ldw	r2,-20(fp)
 201c148:	e0fffe17 	ldw	r3,-8(fp)
 201c14c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 201c150:	e0bfff0b 	ldhu	r2,-4(fp)
 201c154:	1085883a 	add	r2,r2,r2
 201c158:	1085883a 	add	r2,r2,r2
 201c15c:	1007883a 	mov	r3,r2
 201c160:	e0bffe17 	ldw	r2,-8(fp)
 201c164:	10c7883a 	add	r3,r2,r3
 201c168:	e0bffb17 	ldw	r2,-20(fp)
 201c16c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 201c170:	e0bffb17 	ldw	r2,-20(fp)
 201c174:	e0fffe17 	ldw	r3,-8(fp)
 201c178:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 201c17c:	e0bffb17 	ldw	r2,-20(fp)
 201c180:	e0fffe17 	ldw	r3,-8(fp)
 201c184:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 201c188:	e0bffb17 	ldw	r2,-20(fp)
 201c18c:	e0ffff0b 	ldhu	r3,-4(fp)
 201c190:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 201c194:	e0bffb17 	ldw	r2,-20(fp)
 201c198:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 201c19c:	e0bff617 	ldw	r2,-40(fp)
 201c1a0:	00c00084 	movi	r3,2
 201c1a4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 201c1a8:	e0bff617 	ldw	r2,-40(fp)
 201c1ac:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 201c1b0:	e0bff617 	ldw	r2,-40(fp)
 201c1b4:	e0fffb17 	ldw	r3,-20(fp)
 201c1b8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 201c1bc:	e0bff617 	ldw	r2,-40(fp)
 201c1c0:	00c00fc4 	movi	r3,63
 201c1c4:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 201c1c8:	e0bff617 	ldw	r2,-40(fp)
 201c1cc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 201c1d0:	e13ff617 	ldw	r4,-40(fp)
 201c1d4:	20189000 	call	2018900 <OS_EventWaitListInit>
 201c1d8:	00000a06 	br	201c204 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 201c1dc:	d0e7b417 	ldw	r3,-24880(gp)
 201c1e0:	e0bff617 	ldw	r2,-40(fp)
 201c1e4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 201c1e8:	e0bff617 	ldw	r2,-40(fp)
 201c1ec:	d0a7b415 	stw	r2,-24880(gp)
 201c1f0:	e0bff717 	ldw	r2,-36(fp)
 201c1f4:	e0bffc15 	stw	r2,-16(fp)
 201c1f8:	e0bffc17 	ldw	r2,-16(fp)
 201c1fc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 201c200:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 201c204:	e0bff617 	ldw	r2,-40(fp)
}
 201c208:	e037883a 	mov	sp,fp
 201c20c:	dfc00117 	ldw	ra,4(sp)
 201c210:	df000017 	ldw	fp,0(sp)
 201c214:	dec00204 	addi	sp,sp,8
 201c218:	f800283a 	ret

0201c21c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201c21c:	defff204 	addi	sp,sp,-56
 201c220:	dfc00d15 	stw	ra,52(sp)
 201c224:	df000c15 	stw	fp,48(sp)
 201c228:	df000c04 	addi	fp,sp,48
 201c22c:	e13ffd15 	stw	r4,-12(fp)
 201c230:	2805883a 	mov	r2,r5
 201c234:	e1bfff15 	stw	r6,-4(fp)
 201c238:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201c23c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201c240:	e0bfff17 	ldw	r2,-4(fp)
 201c244:	1000021e 	bne	r2,zero,201c250 <OSQDel+0x34>
        return (pevent);
 201c248:	e0bffd17 	ldw	r2,-12(fp)
 201c24c:	00008e06 	br	201c488 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201c250:	e0bffd17 	ldw	r2,-12(fp)
 201c254:	1000051e 	bne	r2,zero,201c26c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201c258:	e0bfff17 	ldw	r2,-4(fp)
 201c25c:	00c00104 	movi	r3,4
 201c260:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c264:	e0bffd17 	ldw	r2,-12(fp)
 201c268:	00008706 	br	201c488 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 201c26c:	e0bffd17 	ldw	r2,-12(fp)
 201c270:	10800003 	ldbu	r2,0(r2)
 201c274:	10803fcc 	andi	r2,r2,255
 201c278:	108000a0 	cmpeqi	r2,r2,2
 201c27c:	1000051e 	bne	r2,zero,201c294 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201c280:	e0bfff17 	ldw	r2,-4(fp)
 201c284:	00c00044 	movi	r3,1
 201c288:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c28c:	e0bffd17 	ldw	r2,-12(fp)
 201c290:	00007d06 	br	201c488 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201c294:	d0a7b503 	ldbu	r2,-24876(gp)
 201c298:	10803fcc 	andi	r2,r2,255
 201c29c:	10000526 	beq	r2,zero,201c2b4 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201c2a0:	e0bfff17 	ldw	r2,-4(fp)
 201c2a4:	00c003c4 	movi	r3,15
 201c2a8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201c2ac:	e0bffd17 	ldw	r2,-12(fp)
 201c2b0:	00007506 	br	201c488 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c2b4:	0005303a 	rdctl	r2,status
 201c2b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c2bc:	e0fffc17 	ldw	r3,-16(fp)
 201c2c0:	00bfff84 	movi	r2,-2
 201c2c4:	1884703a 	and	r2,r3,r2
 201c2c8:	1001703a 	wrctl	status,r2
  
  return context;
 201c2cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c2d0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 201c2d4:	e0bffd17 	ldw	r2,-12(fp)
 201c2d8:	10800283 	ldbu	r2,10(r2)
 201c2dc:	10803fcc 	andi	r2,r2,255
 201c2e0:	10000326 	beq	r2,zero,201c2f0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201c2e4:	00800044 	movi	r2,1
 201c2e8:	e0bff405 	stb	r2,-48(fp)
 201c2ec:	00000106 	br	201c2f4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201c2f0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 201c2f4:	e0bffe03 	ldbu	r2,-8(fp)
 201c2f8:	10000326 	beq	r2,zero,201c308 <OSQDel+0xec>
 201c2fc:	10800060 	cmpeqi	r2,r2,1
 201c300:	1000301e 	bne	r2,zero,201c3c4 <OSQDel+0x1a8>
 201c304:	00005506 	br	201c45c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 201c308:	e0bff403 	ldbu	r2,-48(fp)
 201c30c:	10001e1e 	bne	r2,zero,201c388 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201c310:	e0bffd17 	ldw	r2,-12(fp)
 201c314:	00c00fc4 	movi	r3,63
 201c318:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201c31c:	e0bffd17 	ldw	r2,-12(fp)
 201c320:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 201c324:	e0bffd17 	ldw	r2,-12(fp)
 201c328:	10800117 	ldw	r2,4(r2)
 201c32c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 201c330:	d0e7b217 	ldw	r3,-24888(gp)
 201c334:	e0bff817 	ldw	r2,-32(fp)
 201c338:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 201c33c:	e0bff817 	ldw	r2,-32(fp)
 201c340:	d0a7b215 	stw	r2,-24888(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201c344:	e0bffd17 	ldw	r2,-12(fp)
 201c348:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201c34c:	d0e7b417 	ldw	r3,-24880(gp)
 201c350:	e0bffd17 	ldw	r2,-12(fp)
 201c354:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201c358:	e0bffd17 	ldw	r2,-12(fp)
 201c35c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201c360:	e0bffd17 	ldw	r2,-12(fp)
 201c364:	d0a7b415 	stw	r2,-24880(gp)
 201c368:	e0bff617 	ldw	r2,-40(fp)
 201c36c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c370:	e0bff717 	ldw	r2,-36(fp)
 201c374:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201c378:	e0bfff17 	ldw	r2,-4(fp)
 201c37c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 201c380:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 201c384:	00003f06 	br	201c484 <OSQDel+0x268>
 201c388:	e0bff617 	ldw	r2,-40(fp)
 201c38c:	e0bff915 	stw	r2,-28(fp)
 201c390:	e0bff917 	ldw	r2,-28(fp)
 201c394:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201c398:	e0bfff17 	ldw	r2,-4(fp)
 201c39c:	00c01244 	movi	r3,73
 201c3a0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 201c3a4:	e0bffd17 	ldw	r2,-12(fp)
 201c3a8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 201c3ac:	00003506 	br	201c484 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 201c3b0:	000f883a 	mov	r7,zero
 201c3b4:	01800104 	movi	r6,4
 201c3b8:	000b883a 	mov	r5,zero
 201c3bc:	e13ffd17 	ldw	r4,-12(fp)
 201c3c0:	20183500 	call	2018350 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 201c3c4:	e0bffd17 	ldw	r2,-12(fp)
 201c3c8:	10800283 	ldbu	r2,10(r2)
 201c3cc:	10803fcc 	andi	r2,r2,255
 201c3d0:	103ff71e 	bne	r2,zero,201c3b0 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201c3d4:	e0bffd17 	ldw	r2,-12(fp)
 201c3d8:	00c00fc4 	movi	r3,63
 201c3dc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201c3e0:	e0bffd17 	ldw	r2,-12(fp)
 201c3e4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 201c3e8:	e0bffd17 	ldw	r2,-12(fp)
 201c3ec:	10800117 	ldw	r2,4(r2)
 201c3f0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 201c3f4:	d0e7b217 	ldw	r3,-24888(gp)
 201c3f8:	e0bff817 	ldw	r2,-32(fp)
 201c3fc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 201c400:	e0bff817 	ldw	r2,-32(fp)
 201c404:	d0a7b215 	stw	r2,-24888(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201c408:	e0bffd17 	ldw	r2,-12(fp)
 201c40c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201c410:	d0e7b417 	ldw	r3,-24880(gp)
 201c414:	e0bffd17 	ldw	r2,-12(fp)
 201c418:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201c41c:	e0bffd17 	ldw	r2,-12(fp)
 201c420:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201c424:	e0bffd17 	ldw	r2,-12(fp)
 201c428:	d0a7b415 	stw	r2,-24880(gp)
 201c42c:	e0bff617 	ldw	r2,-40(fp)
 201c430:	e0bffa15 	stw	r2,-24(fp)
 201c434:	e0bffa17 	ldw	r2,-24(fp)
 201c438:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201c43c:	e0bff403 	ldbu	r2,-48(fp)
 201c440:	10800058 	cmpnei	r2,r2,1
 201c444:	1000011e 	bne	r2,zero,201c44c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201c448:	2018d9c0 	call	2018d9c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201c44c:	e0bfff17 	ldw	r2,-4(fp)
 201c450:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 201c454:	e03ff515 	stw	zero,-44(fp)
             break;
 201c458:	00000a06 	br	201c484 <OSQDel+0x268>
 201c45c:	e0bff617 	ldw	r2,-40(fp)
 201c460:	e0bffb15 	stw	r2,-20(fp)
 201c464:	e0bffb17 	ldw	r2,-20(fp)
 201c468:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201c46c:	e0bfff17 	ldw	r2,-4(fp)
 201c470:	00c001c4 	movi	r3,7
 201c474:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201c478:	e0bffd17 	ldw	r2,-12(fp)
 201c47c:	e0bff515 	stw	r2,-44(fp)
             break;
 201c480:	0001883a 	nop
    }
    return (pevent_return);
 201c484:	e0bff517 	ldw	r2,-44(fp)
}
 201c488:	e037883a 	mov	sp,fp
 201c48c:	dfc00117 	ldw	ra,4(sp)
 201c490:	df000017 	ldw	fp,0(sp)
 201c494:	dec00204 	addi	sp,sp,8
 201c498:	f800283a 	ret

0201c49c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 201c49c:	defffa04 	addi	sp,sp,-24
 201c4a0:	df000515 	stw	fp,20(sp)
 201c4a4:	df000504 	addi	fp,sp,20
 201c4a8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201c4ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201c4b0:	e0bfff17 	ldw	r2,-4(fp)
 201c4b4:	1000021e 	bne	r2,zero,201c4c0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 201c4b8:	00800104 	movi	r2,4
 201c4bc:	00002106 	br	201c544 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201c4c0:	e0bfff17 	ldw	r2,-4(fp)
 201c4c4:	10800003 	ldbu	r2,0(r2)
 201c4c8:	10803fcc 	andi	r2,r2,255
 201c4cc:	108000a0 	cmpeqi	r2,r2,2
 201c4d0:	1000021e 	bne	r2,zero,201c4dc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 201c4d4:	00800044 	movi	r2,1
 201c4d8:	00001a06 	br	201c544 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c4dc:	0005303a 	rdctl	r2,status
 201c4e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c4e4:	e0fffd17 	ldw	r3,-12(fp)
 201c4e8:	00bfff84 	movi	r2,-2
 201c4ec:	1884703a 	and	r2,r3,r2
 201c4f0:	1001703a 	wrctl	status,r2
  
  return context;
 201c4f4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201c4f8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 201c4fc:	e0bfff17 	ldw	r2,-4(fp)
 201c500:	10800117 	ldw	r2,4(r2)
 201c504:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 201c508:	e0bffc17 	ldw	r2,-16(fp)
 201c50c:	10c00117 	ldw	r3,4(r2)
 201c510:	e0bffc17 	ldw	r2,-16(fp)
 201c514:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 201c518:	e0bffc17 	ldw	r2,-16(fp)
 201c51c:	10c00117 	ldw	r3,4(r2)
 201c520:	e0bffc17 	ldw	r2,-16(fp)
 201c524:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 201c528:	e0bffc17 	ldw	r2,-16(fp)
 201c52c:	1000058d 	sth	zero,22(r2)
 201c530:	e0bffb17 	ldw	r2,-20(fp)
 201c534:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c538:	e0bffe17 	ldw	r2,-8(fp)
 201c53c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c540:	0005883a 	mov	r2,zero
}
 201c544:	e037883a 	mov	sp,fp
 201c548:	df000017 	ldw	fp,0(sp)
 201c54c:	dec00104 	addi	sp,sp,4
 201c550:	f800283a 	ret

0201c554 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201c554:	defff304 	addi	sp,sp,-52
 201c558:	dfc00c15 	stw	ra,48(sp)
 201c55c:	df000b15 	stw	fp,44(sp)
 201c560:	df000b04 	addi	fp,sp,44
 201c564:	e13ffd15 	stw	r4,-12(fp)
 201c568:	2805883a 	mov	r2,r5
 201c56c:	e1bfff15 	stw	r6,-4(fp)
 201c570:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c574:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201c578:	e0bfff17 	ldw	r2,-4(fp)
 201c57c:	1000021e 	bne	r2,zero,201c588 <OSQPend+0x34>
        return ((void *)0);
 201c580:	0005883a 	mov	r2,zero
 201c584:	00009106 	br	201c7cc <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201c588:	e0bffd17 	ldw	r2,-12(fp)
 201c58c:	1000051e 	bne	r2,zero,201c5a4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201c590:	e0bfff17 	ldw	r2,-4(fp)
 201c594:	00c00104 	movi	r3,4
 201c598:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c59c:	0005883a 	mov	r2,zero
 201c5a0:	00008a06 	br	201c7cc <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201c5a4:	e0bffd17 	ldw	r2,-12(fp)
 201c5a8:	10800003 	ldbu	r2,0(r2)
 201c5ac:	10803fcc 	andi	r2,r2,255
 201c5b0:	108000a0 	cmpeqi	r2,r2,2
 201c5b4:	1000051e 	bne	r2,zero,201c5cc <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201c5b8:	e0bfff17 	ldw	r2,-4(fp)
 201c5bc:	00c00044 	movi	r3,1
 201c5c0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c5c4:	0005883a 	mov	r2,zero
 201c5c8:	00008006 	br	201c7cc <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201c5cc:	d0a7b503 	ldbu	r2,-24876(gp)
 201c5d0:	10803fcc 	andi	r2,r2,255
 201c5d4:	10000526 	beq	r2,zero,201c5ec <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 201c5d8:	e0bfff17 	ldw	r2,-4(fp)
 201c5dc:	00c00084 	movi	r3,2
 201c5e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c5e4:	0005883a 	mov	r2,zero
 201c5e8:	00007806 	br	201c7cc <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 201c5ec:	d0a7a703 	ldbu	r2,-24932(gp)
 201c5f0:	10803fcc 	andi	r2,r2,255
 201c5f4:	10000526 	beq	r2,zero,201c60c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 201c5f8:	e0bfff17 	ldw	r2,-4(fp)
 201c5fc:	00c00344 	movi	r3,13
 201c600:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c604:	0005883a 	mov	r2,zero
 201c608:	00007006 	br	201c7cc <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c60c:	0005303a 	rdctl	r2,status
 201c610:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c614:	e0fffc17 	ldw	r3,-16(fp)
 201c618:	00bfff84 	movi	r2,-2
 201c61c:	1884703a 	and	r2,r3,r2
 201c620:	1001703a 	wrctl	status,r2
  
  return context;
 201c624:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c628:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201c62c:	e0bffd17 	ldw	r2,-12(fp)
 201c630:	10800117 	ldw	r2,4(r2)
 201c634:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201c638:	e0bff817 	ldw	r2,-32(fp)
 201c63c:	1080058b 	ldhu	r2,22(r2)
 201c640:	10bfffcc 	andi	r2,r2,65535
 201c644:	10001e26 	beq	r2,zero,201c6c0 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201c648:	e0bff817 	ldw	r2,-32(fp)
 201c64c:	10800417 	ldw	r2,16(r2)
 201c650:	11000104 	addi	r4,r2,4
 201c654:	e0fff817 	ldw	r3,-32(fp)
 201c658:	19000415 	stw	r4,16(r3)
 201c65c:	10800017 	ldw	r2,0(r2)
 201c660:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201c664:	e0bff817 	ldw	r2,-32(fp)
 201c668:	1080058b 	ldhu	r2,22(r2)
 201c66c:	10bfffc4 	addi	r2,r2,-1
 201c670:	1007883a 	mov	r3,r2
 201c674:	e0bff817 	ldw	r2,-32(fp)
 201c678:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201c67c:	e0bff817 	ldw	r2,-32(fp)
 201c680:	10c00417 	ldw	r3,16(r2)
 201c684:	e0bff817 	ldw	r2,-32(fp)
 201c688:	10800217 	ldw	r2,8(r2)
 201c68c:	1880041e 	bne	r3,r2,201c6a0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 201c690:	e0bff817 	ldw	r2,-32(fp)
 201c694:	10c00117 	ldw	r3,4(r2)
 201c698:	e0bff817 	ldw	r2,-32(fp)
 201c69c:	10c00415 	stw	r3,16(r2)
 201c6a0:	e0bff617 	ldw	r2,-40(fp)
 201c6a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c6a8:	e0bff717 	ldw	r2,-36(fp)
 201c6ac:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201c6b0:	e0bfff17 	ldw	r2,-4(fp)
 201c6b4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 201c6b8:	e0bff517 	ldw	r2,-44(fp)
 201c6bc:	00004306 	br	201c7cc <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 201c6c0:	d0a7b617 	ldw	r2,-24872(gp)
 201c6c4:	d0e7b617 	ldw	r3,-24872(gp)
 201c6c8:	18c00c03 	ldbu	r3,48(r3)
 201c6cc:	18c00114 	ori	r3,r3,4
 201c6d0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201c6d4:	d0a7b617 	ldw	r2,-24872(gp)
 201c6d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 201c6dc:	d0a7b617 	ldw	r2,-24872(gp)
 201c6e0:	e0fffe0b 	ldhu	r3,-8(fp)
 201c6e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 201c6e8:	e13ffd17 	ldw	r4,-12(fp)
 201c6ec:	20184e80 	call	20184e8 <OS_EventTaskWait>
 201c6f0:	e0bff617 	ldw	r2,-40(fp)
 201c6f4:	e0bffb15 	stw	r2,-20(fp)
 201c6f8:	e0bffb17 	ldw	r2,-20(fp)
 201c6fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 201c700:	2018d9c0 	call	2018d9c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c704:	0005303a 	rdctl	r2,status
 201c708:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c70c:	e0fff917 	ldw	r3,-28(fp)
 201c710:	00bfff84 	movi	r2,-2
 201c714:	1884703a 	and	r2,r3,r2
 201c718:	1001703a 	wrctl	status,r2
  
  return context;
 201c71c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201c720:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201c724:	d0a7b617 	ldw	r2,-24872(gp)
 201c728:	10800c43 	ldbu	r2,49(r2)
 201c72c:	10803fcc 	andi	r2,r2,255
 201c730:	10000326 	beq	r2,zero,201c740 <OSQPend+0x1ec>
 201c734:	108000a0 	cmpeqi	r2,r2,2
 201c738:	1000071e 	bne	r2,zero,201c758 <OSQPend+0x204>
 201c73c:	00000b06 	br	201c76c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 201c740:	d0a7b617 	ldw	r2,-24872(gp)
 201c744:	10800917 	ldw	r2,36(r2)
 201c748:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 201c74c:	e0bfff17 	ldw	r2,-4(fp)
 201c750:	10000005 	stb	zero,0(r2)
             break;
 201c754:	00000e06 	br	201c790 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201c758:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201c75c:	e0bfff17 	ldw	r2,-4(fp)
 201c760:	00c00384 	movi	r3,14
 201c764:	10c00005 	stb	r3,0(r2)
             break;
 201c768:	00000906 	br	201c790 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201c76c:	d0a7b617 	ldw	r2,-24872(gp)
 201c770:	e17ffd17 	ldw	r5,-12(fp)
 201c774:	1009883a 	mov	r4,r2
 201c778:	20187480 	call	2018748 <OS_EventTaskRemove>
             pmsg = (void *)0;
 201c77c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201c780:	e0bfff17 	ldw	r2,-4(fp)
 201c784:	00c00284 	movi	r3,10
 201c788:	10c00005 	stb	r3,0(r2)
             break;
 201c78c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201c790:	d0a7b617 	ldw	r2,-24872(gp)
 201c794:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201c798:	d0a7b617 	ldw	r2,-24872(gp)
 201c79c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201c7a0:	d0a7b617 	ldw	r2,-24872(gp)
 201c7a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201c7a8:	d0a7b617 	ldw	r2,-24872(gp)
 201c7ac:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201c7b0:	d0a7b617 	ldw	r2,-24872(gp)
 201c7b4:	10000915 	stw	zero,36(r2)
 201c7b8:	e0bff617 	ldw	r2,-40(fp)
 201c7bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c7c0:	e0bffa17 	ldw	r2,-24(fp)
 201c7c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201c7c8:	e0bff517 	ldw	r2,-44(fp)
}
 201c7cc:	e037883a 	mov	sp,fp
 201c7d0:	dfc00117 	ldw	ra,4(sp)
 201c7d4:	df000017 	ldw	fp,0(sp)
 201c7d8:	dec00204 	addi	sp,sp,8
 201c7dc:	f800283a 	ret

0201c7e0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201c7e0:	defff604 	addi	sp,sp,-40
 201c7e4:	dfc00915 	stw	ra,36(sp)
 201c7e8:	df000815 	stw	fp,32(sp)
 201c7ec:	df000804 	addi	fp,sp,32
 201c7f0:	e13ffd15 	stw	r4,-12(fp)
 201c7f4:	2805883a 	mov	r2,r5
 201c7f8:	e1bfff15 	stw	r6,-4(fp)
 201c7fc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201c800:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201c804:	e0bfff17 	ldw	r2,-4(fp)
 201c808:	1000021e 	bne	r2,zero,201c814 <OSQPendAbort+0x34>
        return (0);
 201c80c:	0005883a 	mov	r2,zero
 201c810:	00004906 	br	201c938 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201c814:	e0bffd17 	ldw	r2,-12(fp)
 201c818:	1000051e 	bne	r2,zero,201c830 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201c81c:	e0bfff17 	ldw	r2,-4(fp)
 201c820:	00c00104 	movi	r3,4
 201c824:	10c00005 	stb	r3,0(r2)
        return (0);
 201c828:	0005883a 	mov	r2,zero
 201c82c:	00004206 	br	201c938 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 201c830:	e0bffd17 	ldw	r2,-12(fp)
 201c834:	10800003 	ldbu	r2,0(r2)
 201c838:	10803fcc 	andi	r2,r2,255
 201c83c:	108000a0 	cmpeqi	r2,r2,2
 201c840:	1000051e 	bne	r2,zero,201c858 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201c844:	e0bfff17 	ldw	r2,-4(fp)
 201c848:	00c00044 	movi	r3,1
 201c84c:	10c00005 	stb	r3,0(r2)
        return (0);
 201c850:	0005883a 	mov	r2,zero
 201c854:	00003806 	br	201c938 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c858:	0005303a 	rdctl	r2,status
 201c85c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c860:	e0fffc17 	ldw	r3,-16(fp)
 201c864:	00bfff84 	movi	r2,-2
 201c868:	1884703a 	and	r2,r3,r2
 201c86c:	1001703a 	wrctl	status,r2
  
  return context;
 201c870:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c874:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 201c878:	e0bffd17 	ldw	r2,-12(fp)
 201c87c:	10800283 	ldbu	r2,10(r2)
 201c880:	10803fcc 	andi	r2,r2,255
 201c884:	10002526 	beq	r2,zero,201c91c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 201c888:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201c88c:	e0bffe03 	ldbu	r2,-8(fp)
 201c890:	10800060 	cmpeqi	r2,r2,1
 201c894:	10000e26 	beq	r2,zero,201c8d0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201c898:	00000806 	br	201c8bc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201c89c:	01c00084 	movi	r7,2
 201c8a0:	01800104 	movi	r6,4
 201c8a4:	000b883a 	mov	r5,zero
 201c8a8:	e13ffd17 	ldw	r4,-12(fp)
 201c8ac:	20183500 	call	2018350 <OS_EventTaskRdy>
                     nbr_tasks++;
 201c8b0:	e0bff803 	ldbu	r2,-32(fp)
 201c8b4:	10800044 	addi	r2,r2,1
 201c8b8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201c8bc:	e0bffd17 	ldw	r2,-12(fp)
 201c8c0:	10800283 	ldbu	r2,10(r2)
 201c8c4:	10803fcc 	andi	r2,r2,255
 201c8c8:	103ff41e 	bne	r2,zero,201c89c <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201c8cc:	00000906 	br	201c8f4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201c8d0:	01c00084 	movi	r7,2
 201c8d4:	01800104 	movi	r6,4
 201c8d8:	000b883a 	mov	r5,zero
 201c8dc:	e13ffd17 	ldw	r4,-12(fp)
 201c8e0:	20183500 	call	2018350 <OS_EventTaskRdy>
                 nbr_tasks++;
 201c8e4:	e0bff803 	ldbu	r2,-32(fp)
 201c8e8:	10800044 	addi	r2,r2,1
 201c8ec:	e0bff805 	stb	r2,-32(fp)
                 break;
 201c8f0:	0001883a 	nop
 201c8f4:	e0bff917 	ldw	r2,-28(fp)
 201c8f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c8fc:	e0bffa17 	ldw	r2,-24(fp)
 201c900:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 201c904:	2018d9c0 	call	2018d9c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201c908:	e0bfff17 	ldw	r2,-4(fp)
 201c90c:	00c00384 	movi	r3,14
 201c910:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201c914:	e0bff803 	ldbu	r2,-32(fp)
 201c918:	00000706 	br	201c938 <OSQPendAbort+0x158>
 201c91c:	e0bff917 	ldw	r2,-28(fp)
 201c920:	e0bffb15 	stw	r2,-20(fp)
 201c924:	e0bffb17 	ldw	r2,-20(fp)
 201c928:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201c92c:	e0bfff17 	ldw	r2,-4(fp)
 201c930:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 201c934:	0005883a 	mov	r2,zero
}
 201c938:	e037883a 	mov	sp,fp
 201c93c:	dfc00117 	ldw	ra,4(sp)
 201c940:	df000017 	ldw	fp,0(sp)
 201c944:	dec00204 	addi	sp,sp,8
 201c948:	f800283a 	ret

0201c94c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 201c94c:	defff604 	addi	sp,sp,-40
 201c950:	dfc00915 	stw	ra,36(sp)
 201c954:	df000815 	stw	fp,32(sp)
 201c958:	df000804 	addi	fp,sp,32
 201c95c:	e13ffe15 	stw	r4,-8(fp)
 201c960:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201c964:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 201c968:	e0bffe17 	ldw	r2,-8(fp)
 201c96c:	1000021e 	bne	r2,zero,201c978 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201c970:	00800104 	movi	r2,4
 201c974:	00004a06 	br	201caa0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 201c978:	e0bffe17 	ldw	r2,-8(fp)
 201c97c:	10800003 	ldbu	r2,0(r2)
 201c980:	10803fcc 	andi	r2,r2,255
 201c984:	108000a0 	cmpeqi	r2,r2,2
 201c988:	1000021e 	bne	r2,zero,201c994 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 201c98c:	00800044 	movi	r2,1
 201c990:	00004306 	br	201caa0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c994:	0005303a 	rdctl	r2,status
 201c998:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c99c:	e0fffd17 	ldw	r3,-12(fp)
 201c9a0:	00bfff84 	movi	r2,-2
 201c9a4:	1884703a 	and	r2,r3,r2
 201c9a8:	1001703a 	wrctl	status,r2
  
  return context;
 201c9ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201c9b0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 201c9b4:	e0bffe17 	ldw	r2,-8(fp)
 201c9b8:	10800283 	ldbu	r2,10(r2)
 201c9bc:	10803fcc 	andi	r2,r2,255
 201c9c0:	10000c26 	beq	r2,zero,201c9f4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201c9c4:	000f883a 	mov	r7,zero
 201c9c8:	01800104 	movi	r6,4
 201c9cc:	e17fff17 	ldw	r5,-4(fp)
 201c9d0:	e13ffe17 	ldw	r4,-8(fp)
 201c9d4:	20183500 	call	2018350 <OS_EventTaskRdy>
 201c9d8:	e0bff817 	ldw	r2,-32(fp)
 201c9dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c9e0:	e0bff917 	ldw	r2,-28(fp)
 201c9e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 201c9e8:	2018d9c0 	call	2018d9c <OS_Sched>
        return (OS_ERR_NONE);
 201c9ec:	0005883a 	mov	r2,zero
 201c9f0:	00002b06 	br	201caa0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 201c9f4:	e0bffe17 	ldw	r2,-8(fp)
 201c9f8:	10800117 	ldw	r2,4(r2)
 201c9fc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 201ca00:	e0bffb17 	ldw	r2,-20(fp)
 201ca04:	10c0058b 	ldhu	r3,22(r2)
 201ca08:	e0bffb17 	ldw	r2,-20(fp)
 201ca0c:	1080050b 	ldhu	r2,20(r2)
 201ca10:	18ffffcc 	andi	r3,r3,65535
 201ca14:	10bfffcc 	andi	r2,r2,65535
 201ca18:	18800636 	bltu	r3,r2,201ca34 <OSQPost+0xe8>
 201ca1c:	e0bff817 	ldw	r2,-32(fp)
 201ca20:	e0bffa15 	stw	r2,-24(fp)
 201ca24:	e0bffa17 	ldw	r2,-24(fp)
 201ca28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201ca2c:	00800784 	movi	r2,30
 201ca30:	00001b06 	br	201caa0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 201ca34:	e0bffb17 	ldw	r2,-20(fp)
 201ca38:	10800317 	ldw	r2,12(r2)
 201ca3c:	11000104 	addi	r4,r2,4
 201ca40:	e0fffb17 	ldw	r3,-20(fp)
 201ca44:	19000315 	stw	r4,12(r3)
 201ca48:	e0ffff17 	ldw	r3,-4(fp)
 201ca4c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 201ca50:	e0bffb17 	ldw	r2,-20(fp)
 201ca54:	1080058b 	ldhu	r2,22(r2)
 201ca58:	10800044 	addi	r2,r2,1
 201ca5c:	1007883a 	mov	r3,r2
 201ca60:	e0bffb17 	ldw	r2,-20(fp)
 201ca64:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 201ca68:	e0bffb17 	ldw	r2,-20(fp)
 201ca6c:	10c00317 	ldw	r3,12(r2)
 201ca70:	e0bffb17 	ldw	r2,-20(fp)
 201ca74:	10800217 	ldw	r2,8(r2)
 201ca78:	1880041e 	bne	r3,r2,201ca8c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 201ca7c:	e0bffb17 	ldw	r2,-20(fp)
 201ca80:	10c00117 	ldw	r3,4(r2)
 201ca84:	e0bffb17 	ldw	r2,-20(fp)
 201ca88:	10c00315 	stw	r3,12(r2)
 201ca8c:	e0bff817 	ldw	r2,-32(fp)
 201ca90:	e0bffc15 	stw	r2,-16(fp)
 201ca94:	e0bffc17 	ldw	r2,-16(fp)
 201ca98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ca9c:	0005883a 	mov	r2,zero
}
 201caa0:	e037883a 	mov	sp,fp
 201caa4:	dfc00117 	ldw	ra,4(sp)
 201caa8:	df000017 	ldw	fp,0(sp)
 201caac:	dec00204 	addi	sp,sp,8
 201cab0:	f800283a 	ret

0201cab4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 201cab4:	defff604 	addi	sp,sp,-40
 201cab8:	dfc00915 	stw	ra,36(sp)
 201cabc:	df000815 	stw	fp,32(sp)
 201cac0:	df000804 	addi	fp,sp,32
 201cac4:	e13ffe15 	stw	r4,-8(fp)
 201cac8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201cacc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201cad0:	e0bffe17 	ldw	r2,-8(fp)
 201cad4:	1000021e 	bne	r2,zero,201cae0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201cad8:	00800104 	movi	r2,4
 201cadc:	00004c06 	br	201cc10 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201cae0:	e0bffe17 	ldw	r2,-8(fp)
 201cae4:	10800003 	ldbu	r2,0(r2)
 201cae8:	10803fcc 	andi	r2,r2,255
 201caec:	108000a0 	cmpeqi	r2,r2,2
 201caf0:	1000021e 	bne	r2,zero,201cafc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 201caf4:	00800044 	movi	r2,1
 201caf8:	00004506 	br	201cc10 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cafc:	0005303a 	rdctl	r2,status
 201cb00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cb04:	e0fffd17 	ldw	r3,-12(fp)
 201cb08:	00bfff84 	movi	r2,-2
 201cb0c:	1884703a 	and	r2,r3,r2
 201cb10:	1001703a 	wrctl	status,r2
  
  return context;
 201cb14:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201cb18:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 201cb1c:	e0bffe17 	ldw	r2,-8(fp)
 201cb20:	10800283 	ldbu	r2,10(r2)
 201cb24:	10803fcc 	andi	r2,r2,255
 201cb28:	10000c26 	beq	r2,zero,201cb5c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201cb2c:	000f883a 	mov	r7,zero
 201cb30:	01800104 	movi	r6,4
 201cb34:	e17fff17 	ldw	r5,-4(fp)
 201cb38:	e13ffe17 	ldw	r4,-8(fp)
 201cb3c:	20183500 	call	2018350 <OS_EventTaskRdy>
 201cb40:	e0bff817 	ldw	r2,-32(fp)
 201cb44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cb48:	e0bff917 	ldw	r2,-28(fp)
 201cb4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201cb50:	2018d9c0 	call	2018d9c <OS_Sched>
        return (OS_ERR_NONE);
 201cb54:	0005883a 	mov	r2,zero
 201cb58:	00002d06 	br	201cc10 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201cb5c:	e0bffe17 	ldw	r2,-8(fp)
 201cb60:	10800117 	ldw	r2,4(r2)
 201cb64:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201cb68:	e0bffb17 	ldw	r2,-20(fp)
 201cb6c:	10c0058b 	ldhu	r3,22(r2)
 201cb70:	e0bffb17 	ldw	r2,-20(fp)
 201cb74:	1080050b 	ldhu	r2,20(r2)
 201cb78:	18ffffcc 	andi	r3,r3,65535
 201cb7c:	10bfffcc 	andi	r2,r2,65535
 201cb80:	18800636 	bltu	r3,r2,201cb9c <OSQPostFront+0xe8>
 201cb84:	e0bff817 	ldw	r2,-32(fp)
 201cb88:	e0bffa15 	stw	r2,-24(fp)
 201cb8c:	e0bffa17 	ldw	r2,-24(fp)
 201cb90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201cb94:	00800784 	movi	r2,30
 201cb98:	00001d06 	br	201cc10 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 201cb9c:	e0bffb17 	ldw	r2,-20(fp)
 201cba0:	10c00417 	ldw	r3,16(r2)
 201cba4:	e0bffb17 	ldw	r2,-20(fp)
 201cba8:	10800117 	ldw	r2,4(r2)
 201cbac:	1880041e 	bne	r3,r2,201cbc0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 201cbb0:	e0bffb17 	ldw	r2,-20(fp)
 201cbb4:	10c00217 	ldw	r3,8(r2)
 201cbb8:	e0bffb17 	ldw	r2,-20(fp)
 201cbbc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 201cbc0:	e0bffb17 	ldw	r2,-20(fp)
 201cbc4:	10800417 	ldw	r2,16(r2)
 201cbc8:	10ffff04 	addi	r3,r2,-4
 201cbcc:	e0bffb17 	ldw	r2,-20(fp)
 201cbd0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 201cbd4:	e0bffb17 	ldw	r2,-20(fp)
 201cbd8:	10800417 	ldw	r2,16(r2)
 201cbdc:	e0ffff17 	ldw	r3,-4(fp)
 201cbe0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 201cbe4:	e0bffb17 	ldw	r2,-20(fp)
 201cbe8:	1080058b 	ldhu	r2,22(r2)
 201cbec:	10800044 	addi	r2,r2,1
 201cbf0:	1007883a 	mov	r3,r2
 201cbf4:	e0bffb17 	ldw	r2,-20(fp)
 201cbf8:	10c0058d 	sth	r3,22(r2)
 201cbfc:	e0bff817 	ldw	r2,-32(fp)
 201cc00:	e0bffc15 	stw	r2,-16(fp)
 201cc04:	e0bffc17 	ldw	r2,-16(fp)
 201cc08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201cc0c:	0005883a 	mov	r2,zero
}
 201cc10:	e037883a 	mov	sp,fp
 201cc14:	dfc00117 	ldw	ra,4(sp)
 201cc18:	df000017 	ldw	fp,0(sp)
 201cc1c:	dec00204 	addi	sp,sp,8
 201cc20:	f800283a 	ret

0201cc24 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201cc24:	defff504 	addi	sp,sp,-44
 201cc28:	dfc00a15 	stw	ra,40(sp)
 201cc2c:	df000915 	stw	fp,36(sp)
 201cc30:	df000904 	addi	fp,sp,36
 201cc34:	e13ffd15 	stw	r4,-12(fp)
 201cc38:	e17ffe15 	stw	r5,-8(fp)
 201cc3c:	3005883a 	mov	r2,r6
 201cc40:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201cc44:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201cc48:	e0bffd17 	ldw	r2,-12(fp)
 201cc4c:	1000021e 	bne	r2,zero,201cc58 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201cc50:	00800104 	movi	r2,4
 201cc54:	00007106 	br	201ce1c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201cc58:	e0bffd17 	ldw	r2,-12(fp)
 201cc5c:	10800003 	ldbu	r2,0(r2)
 201cc60:	10803fcc 	andi	r2,r2,255
 201cc64:	108000a0 	cmpeqi	r2,r2,2
 201cc68:	1000021e 	bne	r2,zero,201cc74 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 201cc6c:	00800044 	movi	r2,1
 201cc70:	00006a06 	br	201ce1c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cc74:	0005303a 	rdctl	r2,status
 201cc78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cc7c:	e0fffc17 	ldw	r3,-16(fp)
 201cc80:	00bfff84 	movi	r2,-2
 201cc84:	1884703a 	and	r2,r3,r2
 201cc88:	1001703a 	wrctl	status,r2
  
  return context;
 201cc8c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201cc90:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 201cc94:	e0bffd17 	ldw	r2,-12(fp)
 201cc98:	10800283 	ldbu	r2,10(r2)
 201cc9c:	10803fcc 	andi	r2,r2,255
 201cca0:	10001d26 	beq	r2,zero,201cd18 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201cca4:	e0bfff03 	ldbu	r2,-4(fp)
 201cca8:	1080004c 	andi	r2,r2,1
 201ccac:	10000b26 	beq	r2,zero,201ccdc <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201ccb0:	00000506 	br	201ccc8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201ccb4:	000f883a 	mov	r7,zero
 201ccb8:	01800104 	movi	r6,4
 201ccbc:	e17ffe17 	ldw	r5,-8(fp)
 201ccc0:	e13ffd17 	ldw	r4,-12(fp)
 201ccc4:	20183500 	call	2018350 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201ccc8:	e0bffd17 	ldw	r2,-12(fp)
 201cccc:	10800283 	ldbu	r2,10(r2)
 201ccd0:	10803fcc 	andi	r2,r2,255
 201ccd4:	103ff71e 	bne	r2,zero,201ccb4 <OSQPostOpt+0x90>
 201ccd8:	00000506 	br	201ccf0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201ccdc:	000f883a 	mov	r7,zero
 201cce0:	01800104 	movi	r6,4
 201cce4:	e17ffe17 	ldw	r5,-8(fp)
 201cce8:	e13ffd17 	ldw	r4,-12(fp)
 201ccec:	20183500 	call	2018350 <OS_EventTaskRdy>
 201ccf0:	e0bff717 	ldw	r2,-36(fp)
 201ccf4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ccf8:	e0bff817 	ldw	r2,-32(fp)
 201ccfc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 201cd00:	e0bfff03 	ldbu	r2,-4(fp)
 201cd04:	1080010c 	andi	r2,r2,4
 201cd08:	1000011e 	bne	r2,zero,201cd10 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 201cd0c:	2018d9c0 	call	2018d9c <OS_Sched>
        }
        return (OS_ERR_NONE);
 201cd10:	0005883a 	mov	r2,zero
 201cd14:	00004106 	br	201ce1c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201cd18:	e0bffd17 	ldw	r2,-12(fp)
 201cd1c:	10800117 	ldw	r2,4(r2)
 201cd20:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201cd24:	e0bffa17 	ldw	r2,-24(fp)
 201cd28:	10c0058b 	ldhu	r3,22(r2)
 201cd2c:	e0bffa17 	ldw	r2,-24(fp)
 201cd30:	1080050b 	ldhu	r2,20(r2)
 201cd34:	18ffffcc 	andi	r3,r3,65535
 201cd38:	10bfffcc 	andi	r2,r2,65535
 201cd3c:	18800636 	bltu	r3,r2,201cd58 <OSQPostOpt+0x134>
 201cd40:	e0bff717 	ldw	r2,-36(fp)
 201cd44:	e0bff915 	stw	r2,-28(fp)
 201cd48:	e0bff917 	ldw	r2,-28(fp)
 201cd4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201cd50:	00800784 	movi	r2,30
 201cd54:	00003106 	br	201ce1c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 201cd58:	e0bfff03 	ldbu	r2,-4(fp)
 201cd5c:	1080008c 	andi	r2,r2,2
 201cd60:	10001326 	beq	r2,zero,201cdb0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 201cd64:	e0bffa17 	ldw	r2,-24(fp)
 201cd68:	10c00417 	ldw	r3,16(r2)
 201cd6c:	e0bffa17 	ldw	r2,-24(fp)
 201cd70:	10800117 	ldw	r2,4(r2)
 201cd74:	1880041e 	bne	r3,r2,201cd88 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 201cd78:	e0bffa17 	ldw	r2,-24(fp)
 201cd7c:	10c00217 	ldw	r3,8(r2)
 201cd80:	e0bffa17 	ldw	r2,-24(fp)
 201cd84:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 201cd88:	e0bffa17 	ldw	r2,-24(fp)
 201cd8c:	10800417 	ldw	r2,16(r2)
 201cd90:	10ffff04 	addi	r3,r2,-4
 201cd94:	e0bffa17 	ldw	r2,-24(fp)
 201cd98:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 201cd9c:	e0bffa17 	ldw	r2,-24(fp)
 201cda0:	10800417 	ldw	r2,16(r2)
 201cda4:	e0fffe17 	ldw	r3,-8(fp)
 201cda8:	10c00015 	stw	r3,0(r2)
 201cdac:	00001006 	br	201cdf0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 201cdb0:	e0bffa17 	ldw	r2,-24(fp)
 201cdb4:	10800317 	ldw	r2,12(r2)
 201cdb8:	11000104 	addi	r4,r2,4
 201cdbc:	e0fffa17 	ldw	r3,-24(fp)
 201cdc0:	19000315 	stw	r4,12(r3)
 201cdc4:	e0fffe17 	ldw	r3,-8(fp)
 201cdc8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 201cdcc:	e0bffa17 	ldw	r2,-24(fp)
 201cdd0:	10c00317 	ldw	r3,12(r2)
 201cdd4:	e0bffa17 	ldw	r2,-24(fp)
 201cdd8:	10800217 	ldw	r2,8(r2)
 201cddc:	1880041e 	bne	r3,r2,201cdf0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 201cde0:	e0bffa17 	ldw	r2,-24(fp)
 201cde4:	10c00117 	ldw	r3,4(r2)
 201cde8:	e0bffa17 	ldw	r2,-24(fp)
 201cdec:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 201cdf0:	e0bffa17 	ldw	r2,-24(fp)
 201cdf4:	1080058b 	ldhu	r2,22(r2)
 201cdf8:	10800044 	addi	r2,r2,1
 201cdfc:	1007883a 	mov	r3,r2
 201ce00:	e0bffa17 	ldw	r2,-24(fp)
 201ce04:	10c0058d 	sth	r3,22(r2)
 201ce08:	e0bff717 	ldw	r2,-36(fp)
 201ce0c:	e0bffb15 	stw	r2,-20(fp)
 201ce10:	e0bffb17 	ldw	r2,-20(fp)
 201ce14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ce18:	0005883a 	mov	r2,zero
}
 201ce1c:	e037883a 	mov	sp,fp
 201ce20:	dfc00117 	ldw	ra,4(sp)
 201ce24:	df000017 	ldw	fp,0(sp)
 201ce28:	dec00204 	addi	sp,sp,8
 201ce2c:	f800283a 	ret

0201ce30 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 201ce30:	defff604 	addi	sp,sp,-40
 201ce34:	df000915 	stw	fp,36(sp)
 201ce38:	df000904 	addi	fp,sp,36
 201ce3c:	e13ffe15 	stw	r4,-8(fp)
 201ce40:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201ce44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 201ce48:	e0bffe17 	ldw	r2,-8(fp)
 201ce4c:	1000021e 	bne	r2,zero,201ce58 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201ce50:	00800104 	movi	r2,4
 201ce54:	00004906 	br	201cf7c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 201ce58:	e0bfff17 	ldw	r2,-4(fp)
 201ce5c:	1000021e 	bne	r2,zero,201ce68 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201ce60:	00800244 	movi	r2,9
 201ce64:	00004506 	br	201cf7c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 201ce68:	e0bffe17 	ldw	r2,-8(fp)
 201ce6c:	10800003 	ldbu	r2,0(r2)
 201ce70:	10803fcc 	andi	r2,r2,255
 201ce74:	108000a0 	cmpeqi	r2,r2,2
 201ce78:	1000021e 	bne	r2,zero,201ce84 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201ce7c:	00800044 	movi	r2,1
 201ce80:	00003e06 	br	201cf7c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ce84:	0005303a 	rdctl	r2,status
 201ce88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ce8c:	e0fffd17 	ldw	r3,-12(fp)
 201ce90:	00bfff84 	movi	r2,-2
 201ce94:	1884703a 	and	r2,r3,r2
 201ce98:	1001703a 	wrctl	status,r2
  
  return context;
 201ce9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201cea0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 201cea4:	e0bffe17 	ldw	r2,-8(fp)
 201cea8:	10c00283 	ldbu	r3,10(r2)
 201ceac:	e0bfff17 	ldw	r2,-4(fp)
 201ceb0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 201ceb4:	e0bffe17 	ldw	r2,-8(fp)
 201ceb8:	108002c4 	addi	r2,r2,11
 201cebc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 201cec0:	e0bfff17 	ldw	r2,-4(fp)
 201cec4:	10800204 	addi	r2,r2,8
 201cec8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201cecc:	e03ff705 	stb	zero,-36(fp)
 201ced0:	00000b06 	br	201cf00 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 201ced4:	e0bff917 	ldw	r2,-28(fp)
 201ced8:	10c00044 	addi	r3,r2,1
 201cedc:	e0fff915 	stw	r3,-28(fp)
 201cee0:	e0fff817 	ldw	r3,-32(fp)
 201cee4:	19000044 	addi	r4,r3,1
 201cee8:	e13ff815 	stw	r4,-32(fp)
 201ceec:	18c00003 	ldbu	r3,0(r3)
 201cef0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201cef4:	e0bff703 	ldbu	r2,-36(fp)
 201cef8:	10800044 	addi	r2,r2,1
 201cefc:	e0bff705 	stb	r2,-36(fp)
 201cf00:	e0bff703 	ldbu	r2,-36(fp)
 201cf04:	108000f0 	cmpltui	r2,r2,3
 201cf08:	103ff21e 	bne	r2,zero,201ced4 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 201cf0c:	e0bffe17 	ldw	r2,-8(fp)
 201cf10:	10800117 	ldw	r2,4(r2)
 201cf14:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 201cf18:	e0bffc17 	ldw	r2,-16(fp)
 201cf1c:	1080058b 	ldhu	r2,22(r2)
 201cf20:	10bfffcc 	andi	r2,r2,65535
 201cf24:	10000626 	beq	r2,zero,201cf40 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 201cf28:	e0bffc17 	ldw	r2,-16(fp)
 201cf2c:	10800417 	ldw	r2,16(r2)
 201cf30:	10c00017 	ldw	r3,0(r2)
 201cf34:	e0bfff17 	ldw	r2,-4(fp)
 201cf38:	10c00015 	stw	r3,0(r2)
 201cf3c:	00000206 	br	201cf48 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 201cf40:	e0bfff17 	ldw	r2,-4(fp)
 201cf44:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 201cf48:	e0bffc17 	ldw	r2,-16(fp)
 201cf4c:	10c0058b 	ldhu	r3,22(r2)
 201cf50:	e0bfff17 	ldw	r2,-4(fp)
 201cf54:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 201cf58:	e0bffc17 	ldw	r2,-16(fp)
 201cf5c:	10c0050b 	ldhu	r3,20(r2)
 201cf60:	e0bfff17 	ldw	r2,-4(fp)
 201cf64:	10c0018d 	sth	r3,6(r2)
 201cf68:	e0bffa17 	ldw	r2,-24(fp)
 201cf6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cf70:	e0bffb17 	ldw	r2,-20(fp)
 201cf74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201cf78:	0005883a 	mov	r2,zero
}
 201cf7c:	e037883a 	mov	sp,fp
 201cf80:	df000017 	ldw	fp,0(sp)
 201cf84:	dec00104 	addi	sp,sp,4
 201cf88:	f800283a 	ret

0201cf8c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 201cf8c:	defffb04 	addi	sp,sp,-20
 201cf90:	dfc00415 	stw	ra,16(sp)
 201cf94:	df000315 	stw	fp,12(sp)
 201cf98:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 201cf9c:	01407804 	movi	r5,480
 201cfa0:	010080f4 	movhi	r4,515
 201cfa4:	213f6404 	addi	r4,r4,-624
 201cfa8:	2018ce00 	call	2018ce0 <OS_MemClr>
    pq1 = &OSQTbl[0];
 201cfac:	008080f4 	movhi	r2,515
 201cfb0:	10bf6404 	addi	r2,r2,-624
 201cfb4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 201cfb8:	008080f4 	movhi	r2,515
 201cfbc:	10bf6a04 	addi	r2,r2,-600
 201cfc0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201cfc4:	e03ffd0d 	sth	zero,-12(fp)
 201cfc8:	00000c06 	br	201cffc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 201cfcc:	e0bffe17 	ldw	r2,-8(fp)
 201cfd0:	e0ffff17 	ldw	r3,-4(fp)
 201cfd4:	10c00015 	stw	r3,0(r2)
        pq1++;
 201cfd8:	e0bffe17 	ldw	r2,-8(fp)
 201cfdc:	10800604 	addi	r2,r2,24
 201cfe0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 201cfe4:	e0bfff17 	ldw	r2,-4(fp)
 201cfe8:	10800604 	addi	r2,r2,24
 201cfec:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201cff0:	e0bffd0b 	ldhu	r2,-12(fp)
 201cff4:	10800044 	addi	r2,r2,1
 201cff8:	e0bffd0d 	sth	r2,-12(fp)
 201cffc:	e0bffd0b 	ldhu	r2,-12(fp)
 201d000:	108004f0 	cmpltui	r2,r2,19
 201d004:	103ff11e 	bne	r2,zero,201cfcc <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 201d008:	e0bffe17 	ldw	r2,-8(fp)
 201d00c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 201d010:	008080f4 	movhi	r2,515
 201d014:	10bf6404 	addi	r2,r2,-624
 201d018:	d0a7b215 	stw	r2,-24888(gp)
#endif
}
 201d01c:	0001883a 	nop
 201d020:	e037883a 	mov	sp,fp
 201d024:	dfc00117 	ldw	ra,4(sp)
 201d028:	df000017 	ldw	fp,0(sp)
 201d02c:	dec00204 	addi	sp,sp,8
 201d030:	f800283a 	ret

0201d034 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 201d034:	defffa04 	addi	sp,sp,-24
 201d038:	df000515 	stw	fp,20(sp)
 201d03c:	df000504 	addi	fp,sp,20
 201d040:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d044:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d048:	e0bfff17 	ldw	r2,-4(fp)
 201d04c:	1000021e 	bne	r2,zero,201d058 <OSSemAccept+0x24>
        return (0);
 201d050:	0005883a 	mov	r2,zero
 201d054:	00001f06 	br	201d0d4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d058:	e0bfff17 	ldw	r2,-4(fp)
 201d05c:	10800003 	ldbu	r2,0(r2)
 201d060:	10803fcc 	andi	r2,r2,255
 201d064:	108000e0 	cmpeqi	r2,r2,3
 201d068:	1000021e 	bne	r2,zero,201d074 <OSSemAccept+0x40>
        return (0);
 201d06c:	0005883a 	mov	r2,zero
 201d070:	00001806 	br	201d0d4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d074:	0005303a 	rdctl	r2,status
 201d078:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d07c:	e0fffe17 	ldw	r3,-8(fp)
 201d080:	00bfff84 	movi	r2,-2
 201d084:	1884703a 	and	r2,r3,r2
 201d088:	1001703a 	wrctl	status,r2
  
  return context;
 201d08c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201d090:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 201d094:	e0bfff17 	ldw	r2,-4(fp)
 201d098:	1080020b 	ldhu	r2,8(r2)
 201d09c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 201d0a0:	e0bffd0b 	ldhu	r2,-12(fp)
 201d0a4:	10000626 	beq	r2,zero,201d0c0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 201d0a8:	e0bfff17 	ldw	r2,-4(fp)
 201d0ac:	1080020b 	ldhu	r2,8(r2)
 201d0b0:	10bfffc4 	addi	r2,r2,-1
 201d0b4:	1007883a 	mov	r3,r2
 201d0b8:	e0bfff17 	ldw	r2,-4(fp)
 201d0bc:	10c0020d 	sth	r3,8(r2)
 201d0c0:	e0bffb17 	ldw	r2,-20(fp)
 201d0c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d0c8:	e0bffc17 	ldw	r2,-16(fp)
 201d0cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 201d0d0:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201d0d4:	e037883a 	mov	sp,fp
 201d0d8:	df000017 	ldw	fp,0(sp)
 201d0dc:	dec00104 	addi	sp,sp,4
 201d0e0:	f800283a 	ret

0201d0e4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 201d0e4:	defff904 	addi	sp,sp,-28
 201d0e8:	dfc00615 	stw	ra,24(sp)
 201d0ec:	df000515 	stw	fp,20(sp)
 201d0f0:	df000504 	addi	fp,sp,20
 201d0f4:	2005883a 	mov	r2,r4
 201d0f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201d0fc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201d100:	d0a7b503 	ldbu	r2,-24876(gp)
 201d104:	10803fcc 	andi	r2,r2,255
 201d108:	10000226 	beq	r2,zero,201d114 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 201d10c:	0005883a 	mov	r2,zero
 201d110:	00002506 	br	201d1a8 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d114:	0005303a 	rdctl	r2,status
 201d118:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d11c:	e0fffe17 	ldw	r3,-8(fp)
 201d120:	00bfff84 	movi	r2,-2
 201d124:	1884703a 	and	r2,r3,r2
 201d128:	1001703a 	wrctl	status,r2
  
  return context;
 201d12c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201d130:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 201d134:	d0a7b417 	ldw	r2,-24880(gp)
 201d138:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 201d13c:	d0a7b417 	ldw	r2,-24880(gp)
 201d140:	10000326 	beq	r2,zero,201d150 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201d144:	d0a7b417 	ldw	r2,-24880(gp)
 201d148:	10800117 	ldw	r2,4(r2)
 201d14c:	d0a7b415 	stw	r2,-24880(gp)
 201d150:	e0bffb17 	ldw	r2,-20(fp)
 201d154:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d158:	e0bffc17 	ldw	r2,-16(fp)
 201d15c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 201d160:	e0bffd17 	ldw	r2,-12(fp)
 201d164:	10000f26 	beq	r2,zero,201d1a4 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 201d168:	e0bffd17 	ldw	r2,-12(fp)
 201d16c:	00c000c4 	movi	r3,3
 201d170:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 201d174:	e0bffd17 	ldw	r2,-12(fp)
 201d178:	e0ffff0b 	ldhu	r3,-4(fp)
 201d17c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 201d180:	e0bffd17 	ldw	r2,-12(fp)
 201d184:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 201d188:	e0bffd17 	ldw	r2,-12(fp)
 201d18c:	00c00fc4 	movi	r3,63
 201d190:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201d194:	e0bffd17 	ldw	r2,-12(fp)
 201d198:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 201d19c:	e13ffd17 	ldw	r4,-12(fp)
 201d1a0:	20189000 	call	2018900 <OS_EventWaitListInit>
    }
    return (pevent);
 201d1a4:	e0bffd17 	ldw	r2,-12(fp)
}
 201d1a8:	e037883a 	mov	sp,fp
 201d1ac:	dfc00117 	ldw	ra,4(sp)
 201d1b0:	df000017 	ldw	fp,0(sp)
 201d1b4:	dec00204 	addi	sp,sp,8
 201d1b8:	f800283a 	ret

0201d1bc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201d1bc:	defff304 	addi	sp,sp,-52
 201d1c0:	dfc00c15 	stw	ra,48(sp)
 201d1c4:	df000b15 	stw	fp,44(sp)
 201d1c8:	df000b04 	addi	fp,sp,44
 201d1cc:	e13ffd15 	stw	r4,-12(fp)
 201d1d0:	2805883a 	mov	r2,r5
 201d1d4:	e1bfff15 	stw	r6,-4(fp)
 201d1d8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201d1dc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201d1e0:	e0bfff17 	ldw	r2,-4(fp)
 201d1e4:	1000021e 	bne	r2,zero,201d1f0 <OSSemDel+0x34>
        return (pevent);
 201d1e8:	e0bffd17 	ldw	r2,-12(fp)
 201d1ec:	00007e06 	br	201d3e8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201d1f0:	e0bffd17 	ldw	r2,-12(fp)
 201d1f4:	1000051e 	bne	r2,zero,201d20c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201d1f8:	e0bfff17 	ldw	r2,-4(fp)
 201d1fc:	00c00104 	movi	r3,4
 201d200:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201d204:	e0bffd17 	ldw	r2,-12(fp)
 201d208:	00007706 	br	201d3e8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201d20c:	e0bffd17 	ldw	r2,-12(fp)
 201d210:	10800003 	ldbu	r2,0(r2)
 201d214:	10803fcc 	andi	r2,r2,255
 201d218:	108000e0 	cmpeqi	r2,r2,3
 201d21c:	1000051e 	bne	r2,zero,201d234 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201d220:	e0bfff17 	ldw	r2,-4(fp)
 201d224:	00c00044 	movi	r3,1
 201d228:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201d22c:	e0bffd17 	ldw	r2,-12(fp)
 201d230:	00006d06 	br	201d3e8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201d234:	d0a7b503 	ldbu	r2,-24876(gp)
 201d238:	10803fcc 	andi	r2,r2,255
 201d23c:	10000526 	beq	r2,zero,201d254 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 201d240:	e0bfff17 	ldw	r2,-4(fp)
 201d244:	00c003c4 	movi	r3,15
 201d248:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201d24c:	e0bffd17 	ldw	r2,-12(fp)
 201d250:	00006506 	br	201d3e8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d254:	0005303a 	rdctl	r2,status
 201d258:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d25c:	e0fffc17 	ldw	r3,-16(fp)
 201d260:	00bfff84 	movi	r2,-2
 201d264:	1884703a 	and	r2,r3,r2
 201d268:	1001703a 	wrctl	status,r2
  
  return context;
 201d26c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d270:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 201d274:	e0bffd17 	ldw	r2,-12(fp)
 201d278:	10800283 	ldbu	r2,10(r2)
 201d27c:	10803fcc 	andi	r2,r2,255
 201d280:	10000326 	beq	r2,zero,201d290 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201d284:	00800044 	movi	r2,1
 201d288:	e0bff505 	stb	r2,-44(fp)
 201d28c:	00000106 	br	201d294 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201d290:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201d294:	e0bffe03 	ldbu	r2,-8(fp)
 201d298:	10000326 	beq	r2,zero,201d2a8 <OSSemDel+0xec>
 201d29c:	10800060 	cmpeqi	r2,r2,1
 201d2a0:	1000281e 	bne	r2,zero,201d344 <OSSemDel+0x188>
 201d2a4:	00004506 	br	201d3bc <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 201d2a8:	e0bff503 	ldbu	r2,-44(fp)
 201d2ac:	1000161e 	bne	r2,zero,201d308 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201d2b0:	e0bffd17 	ldw	r2,-12(fp)
 201d2b4:	00c00fc4 	movi	r3,63
 201d2b8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201d2bc:	e0bffd17 	ldw	r2,-12(fp)
 201d2c0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201d2c4:	e0bffd17 	ldw	r2,-12(fp)
 201d2c8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201d2cc:	d0e7b417 	ldw	r3,-24880(gp)
 201d2d0:	e0bffd17 	ldw	r2,-12(fp)
 201d2d4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201d2d8:	e0bffd17 	ldw	r2,-12(fp)
 201d2dc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201d2e0:	e0bffd17 	ldw	r2,-12(fp)
 201d2e4:	d0a7b415 	stw	r2,-24880(gp)
 201d2e8:	e0bff717 	ldw	r2,-36(fp)
 201d2ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d2f0:	e0bff817 	ldw	r2,-32(fp)
 201d2f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201d2f8:	e0bfff17 	ldw	r2,-4(fp)
 201d2fc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 201d300:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 201d304:	00003706 	br	201d3e4 <OSSemDel+0x228>
 201d308:	e0bff717 	ldw	r2,-36(fp)
 201d30c:	e0bff915 	stw	r2,-28(fp)
 201d310:	e0bff917 	ldw	r2,-28(fp)
 201d314:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201d318:	e0bfff17 	ldw	r2,-4(fp)
 201d31c:	00c01244 	movi	r3,73
 201d320:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 201d324:	e0bffd17 	ldw	r2,-12(fp)
 201d328:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201d32c:	00002d06 	br	201d3e4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201d330:	000f883a 	mov	r7,zero
 201d334:	01800044 	movi	r6,1
 201d338:	000b883a 	mov	r5,zero
 201d33c:	e13ffd17 	ldw	r4,-12(fp)
 201d340:	20183500 	call	2018350 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 201d344:	e0bffd17 	ldw	r2,-12(fp)
 201d348:	10800283 	ldbu	r2,10(r2)
 201d34c:	10803fcc 	andi	r2,r2,255
 201d350:	103ff71e 	bne	r2,zero,201d330 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201d354:	e0bffd17 	ldw	r2,-12(fp)
 201d358:	00c00fc4 	movi	r3,63
 201d35c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201d360:	e0bffd17 	ldw	r2,-12(fp)
 201d364:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201d368:	e0bffd17 	ldw	r2,-12(fp)
 201d36c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201d370:	d0e7b417 	ldw	r3,-24880(gp)
 201d374:	e0bffd17 	ldw	r2,-12(fp)
 201d378:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201d37c:	e0bffd17 	ldw	r2,-12(fp)
 201d380:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201d384:	e0bffd17 	ldw	r2,-12(fp)
 201d388:	d0a7b415 	stw	r2,-24880(gp)
 201d38c:	e0bff717 	ldw	r2,-36(fp)
 201d390:	e0bffa15 	stw	r2,-24(fp)
 201d394:	e0bffa17 	ldw	r2,-24(fp)
 201d398:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201d39c:	e0bff503 	ldbu	r2,-44(fp)
 201d3a0:	10800058 	cmpnei	r2,r2,1
 201d3a4:	1000011e 	bne	r2,zero,201d3ac <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201d3a8:	2018d9c0 	call	2018d9c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201d3ac:	e0bfff17 	ldw	r2,-4(fp)
 201d3b0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 201d3b4:	e03ff615 	stw	zero,-40(fp)
             break;
 201d3b8:	00000a06 	br	201d3e4 <OSSemDel+0x228>
 201d3bc:	e0bff717 	ldw	r2,-36(fp)
 201d3c0:	e0bffb15 	stw	r2,-20(fp)
 201d3c4:	e0bffb17 	ldw	r2,-20(fp)
 201d3c8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201d3cc:	e0bfff17 	ldw	r2,-4(fp)
 201d3d0:	00c001c4 	movi	r3,7
 201d3d4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201d3d8:	e0bffd17 	ldw	r2,-12(fp)
 201d3dc:	e0bff615 	stw	r2,-40(fp)
             break;
 201d3e0:	0001883a 	nop
    }
    return (pevent_return);
 201d3e4:	e0bff617 	ldw	r2,-40(fp)
}
 201d3e8:	e037883a 	mov	sp,fp
 201d3ec:	dfc00117 	ldw	ra,4(sp)
 201d3f0:	df000017 	ldw	fp,0(sp)
 201d3f4:	dec00204 	addi	sp,sp,8
 201d3f8:	f800283a 	ret

0201d3fc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201d3fc:	defff504 	addi	sp,sp,-44
 201d400:	dfc00a15 	stw	ra,40(sp)
 201d404:	df000915 	stw	fp,36(sp)
 201d408:	df000904 	addi	fp,sp,36
 201d40c:	e13ffd15 	stw	r4,-12(fp)
 201d410:	2805883a 	mov	r2,r5
 201d414:	e1bfff15 	stw	r6,-4(fp)
 201d418:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d41c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201d420:	e0bfff17 	ldw	r2,-4(fp)
 201d424:	10007226 	beq	r2,zero,201d5f0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d428:	e0bffd17 	ldw	r2,-12(fp)
 201d42c:	1000041e 	bne	r2,zero,201d440 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201d430:	e0bfff17 	ldw	r2,-4(fp)
 201d434:	00c00104 	movi	r3,4
 201d438:	10c00005 	stb	r3,0(r2)
        return;
 201d43c:	00006d06 	br	201d5f4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d440:	e0bffd17 	ldw	r2,-12(fp)
 201d444:	10800003 	ldbu	r2,0(r2)
 201d448:	10803fcc 	andi	r2,r2,255
 201d44c:	108000e0 	cmpeqi	r2,r2,3
 201d450:	1000041e 	bne	r2,zero,201d464 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 201d454:	e0bfff17 	ldw	r2,-4(fp)
 201d458:	00c00044 	movi	r3,1
 201d45c:	10c00005 	stb	r3,0(r2)
        return;
 201d460:	00006406 	br	201d5f4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201d464:	d0a7b503 	ldbu	r2,-24876(gp)
 201d468:	10803fcc 	andi	r2,r2,255
 201d46c:	10000426 	beq	r2,zero,201d480 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201d470:	e0bfff17 	ldw	r2,-4(fp)
 201d474:	00c00084 	movi	r3,2
 201d478:	10c00005 	stb	r3,0(r2)
        return;
 201d47c:	00005d06 	br	201d5f4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201d480:	d0a7a703 	ldbu	r2,-24932(gp)
 201d484:	10803fcc 	andi	r2,r2,255
 201d488:	10000426 	beq	r2,zero,201d49c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201d48c:	e0bfff17 	ldw	r2,-4(fp)
 201d490:	00c00344 	movi	r3,13
 201d494:	10c00005 	stb	r3,0(r2)
        return;
 201d498:	00005606 	br	201d5f4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d49c:	0005303a 	rdctl	r2,status
 201d4a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d4a4:	e0fffc17 	ldw	r3,-16(fp)
 201d4a8:	00bfff84 	movi	r2,-2
 201d4ac:	1884703a 	and	r2,r3,r2
 201d4b0:	1001703a 	wrctl	status,r2
  
  return context;
 201d4b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d4b8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 201d4bc:	e0bffd17 	ldw	r2,-12(fp)
 201d4c0:	1080020b 	ldhu	r2,8(r2)
 201d4c4:	10bfffcc 	andi	r2,r2,65535
 201d4c8:	10000d26 	beq	r2,zero,201d500 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 201d4cc:	e0bffd17 	ldw	r2,-12(fp)
 201d4d0:	1080020b 	ldhu	r2,8(r2)
 201d4d4:	10bfffc4 	addi	r2,r2,-1
 201d4d8:	1007883a 	mov	r3,r2
 201d4dc:	e0bffd17 	ldw	r2,-12(fp)
 201d4e0:	10c0020d 	sth	r3,8(r2)
 201d4e4:	e0bff717 	ldw	r2,-36(fp)
 201d4e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d4ec:	e0bff817 	ldw	r2,-32(fp)
 201d4f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201d4f4:	e0bfff17 	ldw	r2,-4(fp)
 201d4f8:	10000005 	stb	zero,0(r2)
        return;
 201d4fc:	00003d06 	br	201d5f4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 201d500:	d0a7b617 	ldw	r2,-24872(gp)
 201d504:	d0e7b617 	ldw	r3,-24872(gp)
 201d508:	18c00c03 	ldbu	r3,48(r3)
 201d50c:	18c00054 	ori	r3,r3,1
 201d510:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201d514:	d0a7b617 	ldw	r2,-24872(gp)
 201d518:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 201d51c:	d0a7b617 	ldw	r2,-24872(gp)
 201d520:	e0fffe0b 	ldhu	r3,-8(fp)
 201d524:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201d528:	e13ffd17 	ldw	r4,-12(fp)
 201d52c:	20184e80 	call	20184e8 <OS_EventTaskWait>
 201d530:	e0bff717 	ldw	r2,-36(fp)
 201d534:	e0bffb15 	stw	r2,-20(fp)
 201d538:	e0bffb17 	ldw	r2,-20(fp)
 201d53c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 201d540:	2018d9c0 	call	2018d9c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d544:	0005303a 	rdctl	r2,status
 201d548:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d54c:	e0fff917 	ldw	r3,-28(fp)
 201d550:	00bfff84 	movi	r2,-2
 201d554:	1884703a 	and	r2,r3,r2
 201d558:	1001703a 	wrctl	status,r2
  
  return context;
 201d55c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201d560:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201d564:	d0a7b617 	ldw	r2,-24872(gp)
 201d568:	10800c43 	ldbu	r2,49(r2)
 201d56c:	10803fcc 	andi	r2,r2,255
 201d570:	10000326 	beq	r2,zero,201d580 <OSSemPend+0x184>
 201d574:	108000a0 	cmpeqi	r2,r2,2
 201d578:	1000041e 	bne	r2,zero,201d58c <OSSemPend+0x190>
 201d57c:	00000706 	br	201d59c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 201d580:	e0bfff17 	ldw	r2,-4(fp)
 201d584:	10000005 	stb	zero,0(r2)
             break;
 201d588:	00000c06 	br	201d5bc <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201d58c:	e0bfff17 	ldw	r2,-4(fp)
 201d590:	00c00384 	movi	r3,14
 201d594:	10c00005 	stb	r3,0(r2)
             break;
 201d598:	00000806 	br	201d5bc <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 201d59c:	d0a7b617 	ldw	r2,-24872(gp)
 201d5a0:	e17ffd17 	ldw	r5,-12(fp)
 201d5a4:	1009883a 	mov	r4,r2
 201d5a8:	20187480 	call	2018748 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201d5ac:	e0bfff17 	ldw	r2,-4(fp)
 201d5b0:	00c00284 	movi	r3,10
 201d5b4:	10c00005 	stb	r3,0(r2)
             break;
 201d5b8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201d5bc:	d0a7b617 	ldw	r2,-24872(gp)
 201d5c0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201d5c4:	d0a7b617 	ldw	r2,-24872(gp)
 201d5c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201d5cc:	d0a7b617 	ldw	r2,-24872(gp)
 201d5d0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201d5d4:	d0a7b617 	ldw	r2,-24872(gp)
 201d5d8:	10000815 	stw	zero,32(r2)
 201d5dc:	e0bff717 	ldw	r2,-36(fp)
 201d5e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d5e4:	e0bffa17 	ldw	r2,-24(fp)
 201d5e8:	1001703a 	wrctl	status,r2
 201d5ec:	00000106 	br	201d5f4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201d5f0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 201d5f4:	e037883a 	mov	sp,fp
 201d5f8:	dfc00117 	ldw	ra,4(sp)
 201d5fc:	df000017 	ldw	fp,0(sp)
 201d600:	dec00204 	addi	sp,sp,8
 201d604:	f800283a 	ret

0201d608 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201d608:	defff604 	addi	sp,sp,-40
 201d60c:	dfc00915 	stw	ra,36(sp)
 201d610:	df000815 	stw	fp,32(sp)
 201d614:	df000804 	addi	fp,sp,32
 201d618:	e13ffd15 	stw	r4,-12(fp)
 201d61c:	2805883a 	mov	r2,r5
 201d620:	e1bfff15 	stw	r6,-4(fp)
 201d624:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d628:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201d62c:	e0bfff17 	ldw	r2,-4(fp)
 201d630:	1000021e 	bne	r2,zero,201d63c <OSSemPendAbort+0x34>
        return (0);
 201d634:	0005883a 	mov	r2,zero
 201d638:	00004906 	br	201d760 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d63c:	e0bffd17 	ldw	r2,-12(fp)
 201d640:	1000051e 	bne	r2,zero,201d658 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201d644:	e0bfff17 	ldw	r2,-4(fp)
 201d648:	00c00104 	movi	r3,4
 201d64c:	10c00005 	stb	r3,0(r2)
        return (0);
 201d650:	0005883a 	mov	r2,zero
 201d654:	00004206 	br	201d760 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d658:	e0bffd17 	ldw	r2,-12(fp)
 201d65c:	10800003 	ldbu	r2,0(r2)
 201d660:	10803fcc 	andi	r2,r2,255
 201d664:	108000e0 	cmpeqi	r2,r2,3
 201d668:	1000051e 	bne	r2,zero,201d680 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201d66c:	e0bfff17 	ldw	r2,-4(fp)
 201d670:	00c00044 	movi	r3,1
 201d674:	10c00005 	stb	r3,0(r2)
        return (0);
 201d678:	0005883a 	mov	r2,zero
 201d67c:	00003806 	br	201d760 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d680:	0005303a 	rdctl	r2,status
 201d684:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d688:	e0fffc17 	ldw	r3,-16(fp)
 201d68c:	00bfff84 	movi	r2,-2
 201d690:	1884703a 	and	r2,r3,r2
 201d694:	1001703a 	wrctl	status,r2
  
  return context;
 201d698:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d69c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 201d6a0:	e0bffd17 	ldw	r2,-12(fp)
 201d6a4:	10800283 	ldbu	r2,10(r2)
 201d6a8:	10803fcc 	andi	r2,r2,255
 201d6ac:	10002526 	beq	r2,zero,201d744 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 201d6b0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201d6b4:	e0bffe03 	ldbu	r2,-8(fp)
 201d6b8:	10800060 	cmpeqi	r2,r2,1
 201d6bc:	10000e26 	beq	r2,zero,201d6f8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201d6c0:	00000806 	br	201d6e4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201d6c4:	01c00084 	movi	r7,2
 201d6c8:	01800044 	movi	r6,1
 201d6cc:	000b883a 	mov	r5,zero
 201d6d0:	e13ffd17 	ldw	r4,-12(fp)
 201d6d4:	20183500 	call	2018350 <OS_EventTaskRdy>
                     nbr_tasks++;
 201d6d8:	e0bff803 	ldbu	r2,-32(fp)
 201d6dc:	10800044 	addi	r2,r2,1
 201d6e0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201d6e4:	e0bffd17 	ldw	r2,-12(fp)
 201d6e8:	10800283 	ldbu	r2,10(r2)
 201d6ec:	10803fcc 	andi	r2,r2,255
 201d6f0:	103ff41e 	bne	r2,zero,201d6c4 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201d6f4:	00000906 	br	201d71c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201d6f8:	01c00084 	movi	r7,2
 201d6fc:	01800044 	movi	r6,1
 201d700:	000b883a 	mov	r5,zero
 201d704:	e13ffd17 	ldw	r4,-12(fp)
 201d708:	20183500 	call	2018350 <OS_EventTaskRdy>
                 nbr_tasks++;
 201d70c:	e0bff803 	ldbu	r2,-32(fp)
 201d710:	10800044 	addi	r2,r2,1
 201d714:	e0bff805 	stb	r2,-32(fp)
                 break;
 201d718:	0001883a 	nop
 201d71c:	e0bff917 	ldw	r2,-28(fp)
 201d720:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d724:	e0bffa17 	ldw	r2,-24(fp)
 201d728:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201d72c:	2018d9c0 	call	2018d9c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201d730:	e0bfff17 	ldw	r2,-4(fp)
 201d734:	00c00384 	movi	r3,14
 201d738:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201d73c:	e0bff803 	ldbu	r2,-32(fp)
 201d740:	00000706 	br	201d760 <OSSemPendAbort+0x158>
 201d744:	e0bff917 	ldw	r2,-28(fp)
 201d748:	e0bffb15 	stw	r2,-20(fp)
 201d74c:	e0bffb17 	ldw	r2,-20(fp)
 201d750:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201d754:	e0bfff17 	ldw	r2,-4(fp)
 201d758:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 201d75c:	0005883a 	mov	r2,zero
}
 201d760:	e037883a 	mov	sp,fp
 201d764:	dfc00117 	ldw	ra,4(sp)
 201d768:	df000017 	ldw	fp,0(sp)
 201d76c:	dec00204 	addi	sp,sp,8
 201d770:	f800283a 	ret

0201d774 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 201d774:	defff804 	addi	sp,sp,-32
 201d778:	dfc00715 	stw	ra,28(sp)
 201d77c:	df000615 	stw	fp,24(sp)
 201d780:	df000604 	addi	fp,sp,24
 201d784:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d788:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d78c:	e0bfff17 	ldw	r2,-4(fp)
 201d790:	1000021e 	bne	r2,zero,201d79c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 201d794:	00800104 	movi	r2,4
 201d798:	00003506 	br	201d870 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d79c:	e0bfff17 	ldw	r2,-4(fp)
 201d7a0:	10800003 	ldbu	r2,0(r2)
 201d7a4:	10803fcc 	andi	r2,r2,255
 201d7a8:	108000e0 	cmpeqi	r2,r2,3
 201d7ac:	1000021e 	bne	r2,zero,201d7b8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 201d7b0:	00800044 	movi	r2,1
 201d7b4:	00002e06 	br	201d870 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d7b8:	0005303a 	rdctl	r2,status
 201d7bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d7c0:	e0fffe17 	ldw	r3,-8(fp)
 201d7c4:	00bfff84 	movi	r2,-2
 201d7c8:	1884703a 	and	r2,r3,r2
 201d7cc:	1001703a 	wrctl	status,r2
  
  return context;
 201d7d0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201d7d4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 201d7d8:	e0bfff17 	ldw	r2,-4(fp)
 201d7dc:	10800283 	ldbu	r2,10(r2)
 201d7e0:	10803fcc 	andi	r2,r2,255
 201d7e4:	10000c26 	beq	r2,zero,201d818 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201d7e8:	000f883a 	mov	r7,zero
 201d7ec:	01800044 	movi	r6,1
 201d7f0:	000b883a 	mov	r5,zero
 201d7f4:	e13fff17 	ldw	r4,-4(fp)
 201d7f8:	20183500 	call	2018350 <OS_EventTaskRdy>
 201d7fc:	e0bffa17 	ldw	r2,-24(fp)
 201d800:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d804:	e0bffb17 	ldw	r2,-20(fp)
 201d808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201d80c:	2018d9c0 	call	2018d9c <OS_Sched>
        return (OS_ERR_NONE);
 201d810:	0005883a 	mov	r2,zero
 201d814:	00001606 	br	201d870 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 201d818:	e0bfff17 	ldw	r2,-4(fp)
 201d81c:	1080020b 	ldhu	r2,8(r2)
 201d820:	10ffffcc 	andi	r3,r2,65535
 201d824:	00bfffd4 	movui	r2,65535
 201d828:	18800c26 	beq	r3,r2,201d85c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201d82c:	e0bfff17 	ldw	r2,-4(fp)
 201d830:	1080020b 	ldhu	r2,8(r2)
 201d834:	10800044 	addi	r2,r2,1
 201d838:	1007883a 	mov	r3,r2
 201d83c:	e0bfff17 	ldw	r2,-4(fp)
 201d840:	10c0020d 	sth	r3,8(r2)
 201d844:	e0bffa17 	ldw	r2,-24(fp)
 201d848:	e0bffc15 	stw	r2,-16(fp)
 201d84c:	e0bffc17 	ldw	r2,-16(fp)
 201d850:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201d854:	0005883a 	mov	r2,zero
 201d858:	00000506 	br	201d870 <OSSemPost+0xfc>
 201d85c:	e0bffa17 	ldw	r2,-24(fp)
 201d860:	e0bffd15 	stw	r2,-12(fp)
 201d864:	e0bffd17 	ldw	r2,-12(fp)
 201d868:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 201d86c:	00800c84 	movi	r2,50
}
 201d870:	e037883a 	mov	sp,fp
 201d874:	dfc00117 	ldw	ra,4(sp)
 201d878:	df000017 	ldw	fp,0(sp)
 201d87c:	dec00204 	addi	sp,sp,8
 201d880:	f800283a 	ret

0201d884 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 201d884:	defff704 	addi	sp,sp,-36
 201d888:	df000815 	stw	fp,32(sp)
 201d88c:	df000804 	addi	fp,sp,32
 201d890:	e13ffe15 	stw	r4,-8(fp)
 201d894:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201d898:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201d89c:	e0bffe17 	ldw	r2,-8(fp)
 201d8a0:	1000021e 	bne	r2,zero,201d8ac <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201d8a4:	00800104 	movi	r2,4
 201d8a8:	00003606 	br	201d984 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201d8ac:	e0bfff17 	ldw	r2,-4(fp)
 201d8b0:	1000021e 	bne	r2,zero,201d8bc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201d8b4:	00800244 	movi	r2,9
 201d8b8:	00003206 	br	201d984 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201d8bc:	e0bffe17 	ldw	r2,-8(fp)
 201d8c0:	10800003 	ldbu	r2,0(r2)
 201d8c4:	10803fcc 	andi	r2,r2,255
 201d8c8:	108000e0 	cmpeqi	r2,r2,3
 201d8cc:	1000021e 	bne	r2,zero,201d8d8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201d8d0:	00800044 	movi	r2,1
 201d8d4:	00002b06 	br	201d984 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d8d8:	0005303a 	rdctl	r2,status
 201d8dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d8e0:	e0fffd17 	ldw	r3,-12(fp)
 201d8e4:	00bfff84 	movi	r2,-2
 201d8e8:	1884703a 	and	r2,r3,r2
 201d8ec:	1001703a 	wrctl	status,r2
  
  return context;
 201d8f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201d8f4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 201d8f8:	e0bffe17 	ldw	r2,-8(fp)
 201d8fc:	10c00283 	ldbu	r3,10(r2)
 201d900:	e0bfff17 	ldw	r2,-4(fp)
 201d904:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 201d908:	e0bffe17 	ldw	r2,-8(fp)
 201d90c:	108002c4 	addi	r2,r2,11
 201d910:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 201d914:	e0bfff17 	ldw	r2,-4(fp)
 201d918:	10800084 	addi	r2,r2,2
 201d91c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201d920:	e03ffa05 	stb	zero,-24(fp)
 201d924:	00000b06 	br	201d954 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 201d928:	e0bff917 	ldw	r2,-28(fp)
 201d92c:	10c00044 	addi	r3,r2,1
 201d930:	e0fff915 	stw	r3,-28(fp)
 201d934:	e0fff817 	ldw	r3,-32(fp)
 201d938:	19000044 	addi	r4,r3,1
 201d93c:	e13ff815 	stw	r4,-32(fp)
 201d940:	18c00003 	ldbu	r3,0(r3)
 201d944:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201d948:	e0bffa03 	ldbu	r2,-24(fp)
 201d94c:	10800044 	addi	r2,r2,1
 201d950:	e0bffa05 	stb	r2,-24(fp)
 201d954:	e0bffa03 	ldbu	r2,-24(fp)
 201d958:	108000f0 	cmpltui	r2,r2,3
 201d95c:	103ff21e 	bne	r2,zero,201d928 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201d960:	e0bffe17 	ldw	r2,-8(fp)
 201d964:	10c0020b 	ldhu	r3,8(r2)
 201d968:	e0bfff17 	ldw	r2,-4(fp)
 201d96c:	10c0000d 	sth	r3,0(r2)
 201d970:	e0bffb17 	ldw	r2,-20(fp)
 201d974:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d978:	e0bffc17 	ldw	r2,-16(fp)
 201d97c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201d980:	0005883a 	mov	r2,zero
}
 201d984:	e037883a 	mov	sp,fp
 201d988:	df000017 	ldw	fp,0(sp)
 201d98c:	dec00104 	addi	sp,sp,4
 201d990:	f800283a 	ret

0201d994 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 201d994:	defff904 	addi	sp,sp,-28
 201d998:	df000615 	stw	fp,24(sp)
 201d99c:	df000604 	addi	fp,sp,24
 201d9a0:	e13ffd15 	stw	r4,-12(fp)
 201d9a4:	2805883a 	mov	r2,r5
 201d9a8:	e1bfff15 	stw	r6,-4(fp)
 201d9ac:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d9b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201d9b4:	e0bfff17 	ldw	r2,-4(fp)
 201d9b8:	10003126 	beq	r2,zero,201da80 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d9bc:	e0bffd17 	ldw	r2,-12(fp)
 201d9c0:	1000041e 	bne	r2,zero,201d9d4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 201d9c4:	e0bfff17 	ldw	r2,-4(fp)
 201d9c8:	00c00104 	movi	r3,4
 201d9cc:	10c00005 	stb	r3,0(r2)
        return;
 201d9d0:	00002c06 	br	201da84 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d9d4:	e0bffd17 	ldw	r2,-12(fp)
 201d9d8:	10800003 	ldbu	r2,0(r2)
 201d9dc:	10803fcc 	andi	r2,r2,255
 201d9e0:	108000e0 	cmpeqi	r2,r2,3
 201d9e4:	1000041e 	bne	r2,zero,201d9f8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 201d9e8:	e0bfff17 	ldw	r2,-4(fp)
 201d9ec:	00c00044 	movi	r3,1
 201d9f0:	10c00005 	stb	r3,0(r2)
        return;
 201d9f4:	00002306 	br	201da84 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d9f8:	0005303a 	rdctl	r2,status
 201d9fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201da00:	e0fffc17 	ldw	r3,-16(fp)
 201da04:	00bfff84 	movi	r2,-2
 201da08:	1884703a 	and	r2,r3,r2
 201da0c:	1001703a 	wrctl	status,r2
  
  return context;
 201da10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201da14:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 201da18:	e0bfff17 	ldw	r2,-4(fp)
 201da1c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 201da20:	e0bffd17 	ldw	r2,-12(fp)
 201da24:	1080020b 	ldhu	r2,8(r2)
 201da28:	10bfffcc 	andi	r2,r2,65535
 201da2c:	10000426 	beq	r2,zero,201da40 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 201da30:	e0bffd17 	ldw	r2,-12(fp)
 201da34:	e0fffe0b 	ldhu	r3,-8(fp)
 201da38:	10c0020d 	sth	r3,8(r2)
 201da3c:	00000b06 	br	201da6c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201da40:	e0bffd17 	ldw	r2,-12(fp)
 201da44:	10800283 	ldbu	r2,10(r2)
 201da48:	10803fcc 	andi	r2,r2,255
 201da4c:	1000041e 	bne	r2,zero,201da60 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201da50:	e0bffd17 	ldw	r2,-12(fp)
 201da54:	e0fffe0b 	ldhu	r3,-8(fp)
 201da58:	10c0020d 	sth	r3,8(r2)
 201da5c:	00000306 	br	201da6c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201da60:	e0bfff17 	ldw	r2,-4(fp)
 201da64:	00c01244 	movi	r3,73
 201da68:	10c00005 	stb	r3,0(r2)
 201da6c:	e0bffa17 	ldw	r2,-24(fp)
 201da70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201da74:	e0bffb17 	ldw	r2,-20(fp)
 201da78:	1001703a 	wrctl	status,r2
 201da7c:	00000106 	br	201da84 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201da80:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 201da84:	e037883a 	mov	sp,fp
 201da88:	df000017 	ldw	fp,0(sp)
 201da8c:	dec00104 	addi	sp,sp,4
 201da90:	f800283a 	ret

0201da94 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 201da94:	defff104 	addi	sp,sp,-60
 201da98:	dfc00e15 	stw	ra,56(sp)
 201da9c:	df000d15 	stw	fp,52(sp)
 201daa0:	df000d04 	addi	fp,sp,52
 201daa4:	2007883a 	mov	r3,r4
 201daa8:	2805883a 	mov	r2,r5
 201daac:	e0fffe05 	stb	r3,-8(fp)
 201dab0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201dab4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201dab8:	e0bffe03 	ldbu	r2,-8(fp)
 201dabc:	10800530 	cmpltui	r2,r2,20
 201dac0:	1000051e 	bne	r2,zero,201dad8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 201dac4:	e0bffe03 	ldbu	r2,-8(fp)
 201dac8:	10803fe0 	cmpeqi	r2,r2,255
 201dacc:	1000021e 	bne	r2,zero,201dad8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 201dad0:	00800a84 	movi	r2,42
 201dad4:	00012606 	br	201df70 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201dad8:	e0bfff03 	ldbu	r2,-4(fp)
 201dadc:	10800530 	cmpltui	r2,r2,20
 201dae0:	1000021e 	bne	r2,zero,201daec <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 201dae4:	00800a84 	movi	r2,42
 201dae8:	00012106 	br	201df70 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201daec:	0005303a 	rdctl	r2,status
 201daf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201daf4:	e0fffd17 	ldw	r3,-12(fp)
 201daf8:	00bfff84 	movi	r2,-2
 201dafc:	1884703a 	and	r2,r3,r2
 201db00:	1001703a 	wrctl	status,r2
  
  return context;
 201db04:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201db08:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201db0c:	e0ffff03 	ldbu	r3,-4(fp)
 201db10:	008080f4 	movhi	r2,515
 201db14:	1085f004 	addi	r2,r2,6080
 201db18:	18c7883a 	add	r3,r3,r3
 201db1c:	18c7883a 	add	r3,r3,r3
 201db20:	10c5883a 	add	r2,r2,r3
 201db24:	10800017 	ldw	r2,0(r2)
 201db28:	10000626 	beq	r2,zero,201db44 <OSTaskChangePrio+0xb0>
 201db2c:	e0bff517 	ldw	r2,-44(fp)
 201db30:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201db34:	e0bff617 	ldw	r2,-40(fp)
 201db38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201db3c:	00800a04 	movi	r2,40
 201db40:	00010b06 	br	201df70 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 201db44:	e0bffe03 	ldbu	r2,-8(fp)
 201db48:	10803fd8 	cmpnei	r2,r2,255
 201db4c:	1000031e 	bne	r2,zero,201db5c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201db50:	d0a7b617 	ldw	r2,-24872(gp)
 201db54:	10800c83 	ldbu	r2,50(r2)
 201db58:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201db5c:	e0fffe03 	ldbu	r3,-8(fp)
 201db60:	008080f4 	movhi	r2,515
 201db64:	1085f004 	addi	r2,r2,6080
 201db68:	18c7883a 	add	r3,r3,r3
 201db6c:	18c7883a 	add	r3,r3,r3
 201db70:	10c5883a 	add	r2,r2,r3
 201db74:	10800017 	ldw	r2,0(r2)
 201db78:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201db7c:	e0bff817 	ldw	r2,-32(fp)
 201db80:	1000061e 	bne	r2,zero,201db9c <OSTaskChangePrio+0x108>
 201db84:	e0bff517 	ldw	r2,-44(fp)
 201db88:	e0bff715 	stw	r2,-36(fp)
 201db8c:	e0bff717 	ldw	r2,-36(fp)
 201db90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 201db94:	00800a44 	movi	r2,41
 201db98:	0000f506 	br	201df70 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 201db9c:	e0bff817 	ldw	r2,-32(fp)
 201dba0:	10800058 	cmpnei	r2,r2,1
 201dba4:	1000061e 	bne	r2,zero,201dbc0 <OSTaskChangePrio+0x12c>
 201dba8:	e0bff517 	ldw	r2,-44(fp)
 201dbac:	e0bff915 	stw	r2,-28(fp)
 201dbb0:	e0bff917 	ldw	r2,-28(fp)
 201dbb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 201dbb8:	008010c4 	movi	r2,67
 201dbbc:	0000ec06 	br	201df70 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201dbc0:	e0bfff03 	ldbu	r2,-4(fp)
 201dbc4:	1004d0fa 	srli	r2,r2,3
 201dbc8:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201dbcc:	e0bfff03 	ldbu	r2,-4(fp)
 201dbd0:	108001cc 	andi	r2,r2,7
 201dbd4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 201dbd8:	e0bffb03 	ldbu	r2,-20(fp)
 201dbdc:	00c00044 	movi	r3,1
 201dbe0:	1884983a 	sll	r2,r3,r2
 201dbe4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 201dbe8:	e0bffb43 	ldbu	r2,-19(fp)
 201dbec:	00c00044 	movi	r3,1
 201dbf0:	1884983a 	sll	r2,r3,r2
 201dbf4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 201dbf8:	e0fffe03 	ldbu	r3,-8(fp)
 201dbfc:	008080f4 	movhi	r2,515
 201dc00:	1085f004 	addi	r2,r2,6080
 201dc04:	18c7883a 	add	r3,r3,r3
 201dc08:	18c7883a 	add	r3,r3,r3
 201dc0c:	10c5883a 	add	r2,r2,r3
 201dc10:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 201dc14:	e0ffff03 	ldbu	r3,-4(fp)
 201dc18:	008080f4 	movhi	r2,515
 201dc1c:	1085f004 	addi	r2,r2,6080
 201dc20:	18c7883a 	add	r3,r3,r3
 201dc24:	18c7883a 	add	r3,r3,r3
 201dc28:	10c5883a 	add	r2,r2,r3
 201dc2c:	e0fff817 	ldw	r3,-32(fp)
 201dc30:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 201dc34:	e0bff817 	ldw	r2,-32(fp)
 201dc38:	10800d03 	ldbu	r2,52(r2)
 201dc3c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201dc40:	e0bff817 	ldw	r2,-32(fp)
 201dc44:	10800d83 	ldbu	r2,54(r2)
 201dc48:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201dc4c:	e0bff817 	ldw	r2,-32(fp)
 201dc50:	10800d43 	ldbu	r2,53(r2)
 201dc54:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 201dc58:	e0fffc03 	ldbu	r3,-16(fp)
 201dc5c:	d0a7b344 	addi	r2,gp,-24883
 201dc60:	1885883a 	add	r2,r3,r2
 201dc64:	10c00003 	ldbu	r3,0(r2)
 201dc68:	e0bffc83 	ldbu	r2,-14(fp)
 201dc6c:	1884703a 	and	r2,r3,r2
 201dc70:	10803fcc 	andi	r2,r2,255
 201dc74:	10002826 	beq	r2,zero,201dd18 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 201dc78:	e0fffc03 	ldbu	r3,-16(fp)
 201dc7c:	e13ffc03 	ldbu	r4,-16(fp)
 201dc80:	d0a7b344 	addi	r2,gp,-24883
 201dc84:	2085883a 	add	r2,r4,r2
 201dc88:	10800003 	ldbu	r2,0(r2)
 201dc8c:	1009883a 	mov	r4,r2
 201dc90:	e0bffc83 	ldbu	r2,-14(fp)
 201dc94:	0084303a 	nor	r2,zero,r2
 201dc98:	2084703a 	and	r2,r4,r2
 201dc9c:	1009883a 	mov	r4,r2
 201dca0:	d0a7b344 	addi	r2,gp,-24883
 201dca4:	1885883a 	add	r2,r3,r2
 201dca8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201dcac:	e0fffc03 	ldbu	r3,-16(fp)
 201dcb0:	d0a7b344 	addi	r2,gp,-24883
 201dcb4:	1885883a 	add	r2,r3,r2
 201dcb8:	10800003 	ldbu	r2,0(r2)
 201dcbc:	10803fcc 	andi	r2,r2,255
 201dcc0:	1000061e 	bne	r2,zero,201dcdc <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 201dcc4:	e0bffc43 	ldbu	r2,-15(fp)
 201dcc8:	0084303a 	nor	r2,zero,r2
 201dccc:	1007883a 	mov	r3,r2
 201dcd0:	d0a7b303 	ldbu	r2,-24884(gp)
 201dcd4:	1884703a 	and	r2,r3,r2
 201dcd8:	d0a7b305 	stb	r2,-24884(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201dcdc:	d0e7b303 	ldbu	r3,-24884(gp)
 201dce0:	e0bffb83 	ldbu	r2,-18(fp)
 201dce4:	1884b03a 	or	r2,r3,r2
 201dce8:	d0a7b305 	stb	r2,-24884(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201dcec:	e0fffb03 	ldbu	r3,-20(fp)
 201dcf0:	e13ffb03 	ldbu	r4,-20(fp)
 201dcf4:	d0a7b344 	addi	r2,gp,-24883
 201dcf8:	2085883a 	add	r2,r4,r2
 201dcfc:	11000003 	ldbu	r4,0(r2)
 201dd00:	e0bffbc3 	ldbu	r2,-17(fp)
 201dd04:	2084b03a 	or	r2,r4,r2
 201dd08:	1009883a 	mov	r4,r2
 201dd0c:	d0a7b344 	addi	r2,gp,-24883
 201dd10:	1885883a 	add	r2,r3,r2
 201dd14:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 201dd18:	e0bff817 	ldw	r2,-32(fp)
 201dd1c:	10800717 	ldw	r2,28(r2)
 201dd20:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 201dd24:	e0bff317 	ldw	r2,-52(fp)
 201dd28:	10003326 	beq	r2,zero,201ddf8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201dd2c:	e0bffc03 	ldbu	r2,-16(fp)
 201dd30:	e0fffc03 	ldbu	r3,-16(fp)
 201dd34:	e13ff317 	ldw	r4,-52(fp)
 201dd38:	20c7883a 	add	r3,r4,r3
 201dd3c:	18c002c4 	addi	r3,r3,11
 201dd40:	18c00003 	ldbu	r3,0(r3)
 201dd44:	1809883a 	mov	r4,r3
 201dd48:	e0fffc83 	ldbu	r3,-14(fp)
 201dd4c:	00c6303a 	nor	r3,zero,r3
 201dd50:	20c6703a 	and	r3,r4,r3
 201dd54:	1809883a 	mov	r4,r3
 201dd58:	e0fff317 	ldw	r3,-52(fp)
 201dd5c:	1885883a 	add	r2,r3,r2
 201dd60:	108002c4 	addi	r2,r2,11
 201dd64:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 201dd68:	e0bffc03 	ldbu	r2,-16(fp)
 201dd6c:	e0fff317 	ldw	r3,-52(fp)
 201dd70:	1885883a 	add	r2,r3,r2
 201dd74:	108002c4 	addi	r2,r2,11
 201dd78:	10800003 	ldbu	r2,0(r2)
 201dd7c:	10803fcc 	andi	r2,r2,255
 201dd80:	1000091e 	bne	r2,zero,201dda8 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 201dd84:	e0bff317 	ldw	r2,-52(fp)
 201dd88:	10800283 	ldbu	r2,10(r2)
 201dd8c:	1007883a 	mov	r3,r2
 201dd90:	e0bffc43 	ldbu	r2,-15(fp)
 201dd94:	0084303a 	nor	r2,zero,r2
 201dd98:	1884703a 	and	r2,r3,r2
 201dd9c:	1007883a 	mov	r3,r2
 201dda0:	e0bff317 	ldw	r2,-52(fp)
 201dda4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 201dda8:	e0bff317 	ldw	r2,-52(fp)
 201ddac:	10c00283 	ldbu	r3,10(r2)
 201ddb0:	e0bffb83 	ldbu	r2,-18(fp)
 201ddb4:	1884b03a 	or	r2,r3,r2
 201ddb8:	1007883a 	mov	r3,r2
 201ddbc:	e0bff317 	ldw	r2,-52(fp)
 201ddc0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 201ddc4:	e0bffb03 	ldbu	r2,-20(fp)
 201ddc8:	e0fffb03 	ldbu	r3,-20(fp)
 201ddcc:	e13ff317 	ldw	r4,-52(fp)
 201ddd0:	20c7883a 	add	r3,r4,r3
 201ddd4:	18c002c4 	addi	r3,r3,11
 201ddd8:	19000003 	ldbu	r4,0(r3)
 201dddc:	e0fffbc3 	ldbu	r3,-17(fp)
 201dde0:	20c6b03a 	or	r3,r4,r3
 201dde4:	1809883a 	mov	r4,r3
 201dde8:	e0fff317 	ldw	r3,-52(fp)
 201ddec:	1885883a 	add	r2,r3,r2
 201ddf0:	108002c4 	addi	r2,r2,11
 201ddf4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 201ddf8:	e0bff817 	ldw	r2,-32(fp)
 201ddfc:	10800817 	ldw	r2,32(r2)
 201de00:	10004226 	beq	r2,zero,201df0c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 201de04:	e0bff817 	ldw	r2,-32(fp)
 201de08:	10800817 	ldw	r2,32(r2)
 201de0c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 201de10:	e0bff417 	ldw	r2,-48(fp)
 201de14:	10800017 	ldw	r2,0(r2)
 201de18:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201de1c:	00003906 	br	201df04 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 201de20:	e0bffc03 	ldbu	r2,-16(fp)
 201de24:	e0fffc03 	ldbu	r3,-16(fp)
 201de28:	e13ff317 	ldw	r4,-52(fp)
 201de2c:	20c7883a 	add	r3,r4,r3
 201de30:	18c002c4 	addi	r3,r3,11
 201de34:	18c00003 	ldbu	r3,0(r3)
 201de38:	1809883a 	mov	r4,r3
 201de3c:	e0fffc83 	ldbu	r3,-14(fp)
 201de40:	00c6303a 	nor	r3,zero,r3
 201de44:	20c6703a 	and	r3,r4,r3
 201de48:	1809883a 	mov	r4,r3
 201de4c:	e0fff317 	ldw	r3,-52(fp)
 201de50:	1885883a 	add	r2,r3,r2
 201de54:	108002c4 	addi	r2,r2,11
 201de58:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201de5c:	e0bffc03 	ldbu	r2,-16(fp)
 201de60:	e0fff317 	ldw	r3,-52(fp)
 201de64:	1885883a 	add	r2,r3,r2
 201de68:	108002c4 	addi	r2,r2,11
 201de6c:	10800003 	ldbu	r2,0(r2)
 201de70:	10803fcc 	andi	r2,r2,255
 201de74:	1000091e 	bne	r2,zero,201de9c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 201de78:	e0bff317 	ldw	r2,-52(fp)
 201de7c:	10800283 	ldbu	r2,10(r2)
 201de80:	1007883a 	mov	r3,r2
 201de84:	e0bffc43 	ldbu	r2,-15(fp)
 201de88:	0084303a 	nor	r2,zero,r2
 201de8c:	1884703a 	and	r2,r3,r2
 201de90:	1007883a 	mov	r3,r2
 201de94:	e0bff317 	ldw	r2,-52(fp)
 201de98:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 201de9c:	e0bff317 	ldw	r2,-52(fp)
 201dea0:	10c00283 	ldbu	r3,10(r2)
 201dea4:	e0bffb83 	ldbu	r2,-18(fp)
 201dea8:	1884b03a 	or	r2,r3,r2
 201deac:	1007883a 	mov	r3,r2
 201deb0:	e0bff317 	ldw	r2,-52(fp)
 201deb4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 201deb8:	e0bffb03 	ldbu	r2,-20(fp)
 201debc:	e0fffb03 	ldbu	r3,-20(fp)
 201dec0:	e13ff317 	ldw	r4,-52(fp)
 201dec4:	20c7883a 	add	r3,r4,r3
 201dec8:	18c002c4 	addi	r3,r3,11
 201decc:	19000003 	ldbu	r4,0(r3)
 201ded0:	e0fffbc3 	ldbu	r3,-17(fp)
 201ded4:	20c6b03a 	or	r3,r4,r3
 201ded8:	1809883a 	mov	r4,r3
 201dedc:	e0fff317 	ldw	r3,-52(fp)
 201dee0:	1885883a 	add	r2,r3,r2
 201dee4:	108002c4 	addi	r2,r2,11
 201dee8:	11000005 	stb	r4,0(r2)
            pevents++;
 201deec:	e0bff417 	ldw	r2,-48(fp)
 201def0:	10800104 	addi	r2,r2,4
 201def4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 201def8:	e0bff417 	ldw	r2,-48(fp)
 201defc:	10800017 	ldw	r2,0(r2)
 201df00:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 201df04:	e0bff317 	ldw	r2,-52(fp)
 201df08:	103fc51e 	bne	r2,zero,201de20 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201df0c:	e0bff817 	ldw	r2,-32(fp)
 201df10:	e0ffff03 	ldbu	r3,-4(fp)
 201df14:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 201df18:	e0bff817 	ldw	r2,-32(fp)
 201df1c:	e0fffb03 	ldbu	r3,-20(fp)
 201df20:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 201df24:	e0bff817 	ldw	r2,-32(fp)
 201df28:	e0fffb43 	ldbu	r3,-19(fp)
 201df2c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 201df30:	e0bff817 	ldw	r2,-32(fp)
 201df34:	e0fffb83 	ldbu	r3,-18(fp)
 201df38:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201df3c:	e0bff817 	ldw	r2,-32(fp)
 201df40:	e0fffbc3 	ldbu	r3,-17(fp)
 201df44:	10c00d45 	stb	r3,53(r2)
 201df48:	e0bff517 	ldw	r2,-44(fp)
 201df4c:	e0bffa15 	stw	r2,-24(fp)
 201df50:	e0bffa17 	ldw	r2,-24(fp)
 201df54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201df58:	d0a7a743 	ldbu	r2,-24931(gp)
 201df5c:	10803fcc 	andi	r2,r2,255
 201df60:	10800058 	cmpnei	r2,r2,1
 201df64:	1000011e 	bne	r2,zero,201df6c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 201df68:	2018d9c0 	call	2018d9c <OS_Sched>
    }
    return (OS_ERR_NONE);
 201df6c:	0005883a 	mov	r2,zero
}
 201df70:	e037883a 	mov	sp,fp
 201df74:	dfc00117 	ldw	ra,4(sp)
 201df78:	df000017 	ldw	fp,0(sp)
 201df7c:	dec00204 	addi	sp,sp,8
 201df80:	f800283a 	ret

0201df84 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 201df84:	deffee04 	addi	sp,sp,-72
 201df88:	dfc01115 	stw	ra,68(sp)
 201df8c:	df001015 	stw	fp,64(sp)
 201df90:	df001004 	addi	fp,sp,64
 201df94:	e13ffc15 	stw	r4,-16(fp)
 201df98:	e17ffd15 	stw	r5,-12(fp)
 201df9c:	e1bffe15 	stw	r6,-8(fp)
 201dfa0:	3805883a 	mov	r2,r7
 201dfa4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201dfa8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201dfac:	e0bfff03 	ldbu	r2,-4(fp)
 201dfb0:	10800570 	cmpltui	r2,r2,21
 201dfb4:	1000021e 	bne	r2,zero,201dfc0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201dfb8:	00800a84 	movi	r2,42
 201dfbc:	00005706 	br	201e11c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201dfc0:	0005303a 	rdctl	r2,status
 201dfc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201dfc8:	e0fffb17 	ldw	r3,-20(fp)
 201dfcc:	00bfff84 	movi	r2,-2
 201dfd0:	1884703a 	and	r2,r3,r2
 201dfd4:	1001703a 	wrctl	status,r2
  
  return context;
 201dfd8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201dfdc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201dfe0:	d0a7b503 	ldbu	r2,-24876(gp)
 201dfe4:	10803fcc 	andi	r2,r2,255
 201dfe8:	10000626 	beq	r2,zero,201e004 <OSTaskCreate+0x80>
 201dfec:	e0bff317 	ldw	r2,-52(fp)
 201dff0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dff4:	e0bff417 	ldw	r2,-48(fp)
 201dff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201dffc:	00800f04 	movi	r2,60
 201e000:	00004606 	br	201e11c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201e004:	e0ffff03 	ldbu	r3,-4(fp)
 201e008:	008080f4 	movhi	r2,515
 201e00c:	1085f004 	addi	r2,r2,6080
 201e010:	18c7883a 	add	r3,r3,r3
 201e014:	18c7883a 	add	r3,r3,r3
 201e018:	10c5883a 	add	r2,r2,r3
 201e01c:	10800017 	ldw	r2,0(r2)
 201e020:	1000391e 	bne	r2,zero,201e108 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201e024:	e0ffff03 	ldbu	r3,-4(fp)
 201e028:	008080f4 	movhi	r2,515
 201e02c:	1085f004 	addi	r2,r2,6080
 201e030:	18c7883a 	add	r3,r3,r3
 201e034:	18c7883a 	add	r3,r3,r3
 201e038:	10c5883a 	add	r2,r2,r3
 201e03c:	00c00044 	movi	r3,1
 201e040:	10c00015 	stw	r3,0(r2)
 201e044:	e0bff317 	ldw	r2,-52(fp)
 201e048:	e0bff515 	stw	r2,-44(fp)
 201e04c:	e0bff517 	ldw	r2,-44(fp)
 201e050:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 201e054:	000f883a 	mov	r7,zero
 201e058:	e1bffe17 	ldw	r6,-8(fp)
 201e05c:	e17ffd17 	ldw	r5,-12(fp)
 201e060:	e13ffc17 	ldw	r4,-16(fp)
 201e064:	20215080 	call	2021508 <OSTaskStkInit>
 201e068:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 201e06c:	e0bfff03 	ldbu	r2,-4(fp)
 201e070:	d8000215 	stw	zero,8(sp)
 201e074:	d8000115 	stw	zero,4(sp)
 201e078:	d8000015 	stw	zero,0(sp)
 201e07c:	000f883a 	mov	r7,zero
 201e080:	000d883a 	mov	r6,zero
 201e084:	e17ff717 	ldw	r5,-36(fp)
 201e088:	1009883a 	mov	r4,r2
 201e08c:	201919c0 	call	201919c <OS_TCBInit>
 201e090:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 201e094:	e0bff803 	ldbu	r2,-32(fp)
 201e098:	1000061e 	bne	r2,zero,201e0b4 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 201e09c:	d0a7a743 	ldbu	r2,-24931(gp)
 201e0a0:	10803fcc 	andi	r2,r2,255
 201e0a4:	10800058 	cmpnei	r2,r2,1
 201e0a8:	1000151e 	bne	r2,zero,201e100 <OSTaskCreate+0x17c>
                OS_Sched();
 201e0ac:	2018d9c0 	call	2018d9c <OS_Sched>
 201e0b0:	00001306 	br	201e100 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e0b4:	0005303a 	rdctl	r2,status
 201e0b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e0bc:	e0fffa17 	ldw	r3,-24(fp)
 201e0c0:	00bfff84 	movi	r2,-2
 201e0c4:	1884703a 	and	r2,r3,r2
 201e0c8:	1001703a 	wrctl	status,r2
  
  return context;
 201e0cc:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201e0d0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 201e0d4:	e0ffff03 	ldbu	r3,-4(fp)
 201e0d8:	008080f4 	movhi	r2,515
 201e0dc:	1085f004 	addi	r2,r2,6080
 201e0e0:	18c7883a 	add	r3,r3,r3
 201e0e4:	18c7883a 	add	r3,r3,r3
 201e0e8:	10c5883a 	add	r2,r2,r3
 201e0ec:	10000015 	stw	zero,0(r2)
 201e0f0:	e0bff317 	ldw	r2,-52(fp)
 201e0f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e0f8:	e0bff617 	ldw	r2,-40(fp)
 201e0fc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201e100:	e0bff803 	ldbu	r2,-32(fp)
 201e104:	00000506 	br	201e11c <OSTaskCreate+0x198>
 201e108:	e0bff317 	ldw	r2,-52(fp)
 201e10c:	e0bff915 	stw	r2,-28(fp)
 201e110:	e0bff917 	ldw	r2,-28(fp)
 201e114:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201e118:	00800a04 	movi	r2,40
}
 201e11c:	e037883a 	mov	sp,fp
 201e120:	dfc00117 	ldw	ra,4(sp)
 201e124:	df000017 	ldw	fp,0(sp)
 201e128:	dec00204 	addi	sp,sp,8
 201e12c:	f800283a 	ret

0201e130 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 201e130:	deffec04 	addi	sp,sp,-80
 201e134:	dfc01315 	stw	ra,76(sp)
 201e138:	df001215 	stw	fp,72(sp)
 201e13c:	df001204 	addi	fp,sp,72
 201e140:	e13ffa15 	stw	r4,-24(fp)
 201e144:	e17ffb15 	stw	r5,-20(fp)
 201e148:	e1bffc15 	stw	r6,-16(fp)
 201e14c:	3809883a 	mov	r4,r7
 201e150:	e0c00217 	ldw	r3,8(fp)
 201e154:	e0800617 	ldw	r2,24(fp)
 201e158:	e13ffd05 	stb	r4,-12(fp)
 201e15c:	e0fffe0d 	sth	r3,-8(fp)
 201e160:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201e164:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201e168:	e0bffd03 	ldbu	r2,-12(fp)
 201e16c:	10800570 	cmpltui	r2,r2,21
 201e170:	1000021e 	bne	r2,zero,201e17c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 201e174:	00800a84 	movi	r2,42
 201e178:	00006106 	br	201e300 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e17c:	0005303a 	rdctl	r2,status
 201e180:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e184:	e0fff917 	ldw	r3,-28(fp)
 201e188:	00bfff84 	movi	r2,-2
 201e18c:	1884703a 	and	r2,r3,r2
 201e190:	1001703a 	wrctl	status,r2
  
  return context;
 201e194:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201e198:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201e19c:	d0a7b503 	ldbu	r2,-24876(gp)
 201e1a0:	10803fcc 	andi	r2,r2,255
 201e1a4:	10000626 	beq	r2,zero,201e1c0 <OSTaskCreateExt+0x90>
 201e1a8:	e0bff117 	ldw	r2,-60(fp)
 201e1ac:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e1b0:	e0bff217 	ldw	r2,-56(fp)
 201e1b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201e1b8:	00800f04 	movi	r2,60
 201e1bc:	00005006 	br	201e300 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201e1c0:	e0fffd03 	ldbu	r3,-12(fp)
 201e1c4:	008080f4 	movhi	r2,515
 201e1c8:	1085f004 	addi	r2,r2,6080
 201e1cc:	18c7883a 	add	r3,r3,r3
 201e1d0:	18c7883a 	add	r3,r3,r3
 201e1d4:	10c5883a 	add	r2,r2,r3
 201e1d8:	10800017 	ldw	r2,0(r2)
 201e1dc:	1000431e 	bne	r2,zero,201e2ec <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201e1e0:	e0fffd03 	ldbu	r3,-12(fp)
 201e1e4:	008080f4 	movhi	r2,515
 201e1e8:	1085f004 	addi	r2,r2,6080
 201e1ec:	18c7883a 	add	r3,r3,r3
 201e1f0:	18c7883a 	add	r3,r3,r3
 201e1f4:	10c5883a 	add	r2,r2,r3
 201e1f8:	00c00044 	movi	r3,1
 201e1fc:	10c00015 	stw	r3,0(r2)
 201e200:	e0bff117 	ldw	r2,-60(fp)
 201e204:	e0bff315 	stw	r2,-52(fp)
 201e208:	e0bff317 	ldw	r2,-52(fp)
 201e20c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 201e210:	e0bfff0b 	ldhu	r2,-4(fp)
 201e214:	100d883a 	mov	r6,r2
 201e218:	e1400417 	ldw	r5,16(fp)
 201e21c:	e1000317 	ldw	r4,12(fp)
 201e220:	201f1900 	call	201f190 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 201e224:	e0bfff0b 	ldhu	r2,-4(fp)
 201e228:	100f883a 	mov	r7,r2
 201e22c:	e1bffc17 	ldw	r6,-16(fp)
 201e230:	e17ffb17 	ldw	r5,-20(fp)
 201e234:	e13ffa17 	ldw	r4,-24(fp)
 201e238:	20215080 	call	2021508 <OSTaskStkInit>
 201e23c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 201e240:	e0fffd03 	ldbu	r3,-12(fp)
 201e244:	e13ffe0b 	ldhu	r4,-8(fp)
 201e248:	e0bfff0b 	ldhu	r2,-4(fp)
 201e24c:	d8800215 	stw	r2,8(sp)
 201e250:	e0800517 	ldw	r2,20(fp)
 201e254:	d8800115 	stw	r2,4(sp)
 201e258:	e0800417 	ldw	r2,16(fp)
 201e25c:	d8800015 	stw	r2,0(sp)
 201e260:	200f883a 	mov	r7,r4
 201e264:	e1800317 	ldw	r6,12(fp)
 201e268:	e17ff517 	ldw	r5,-44(fp)
 201e26c:	1809883a 	mov	r4,r3
 201e270:	201919c0 	call	201919c <OS_TCBInit>
 201e274:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 201e278:	e0bff603 	ldbu	r2,-40(fp)
 201e27c:	1000061e 	bne	r2,zero,201e298 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 201e280:	d0a7a743 	ldbu	r2,-24931(gp)
 201e284:	10803fcc 	andi	r2,r2,255
 201e288:	10800058 	cmpnei	r2,r2,1
 201e28c:	1000151e 	bne	r2,zero,201e2e4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 201e290:	2018d9c0 	call	2018d9c <OS_Sched>
 201e294:	00001306 	br	201e2e4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e298:	0005303a 	rdctl	r2,status
 201e29c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e2a0:	e0fff817 	ldw	r3,-32(fp)
 201e2a4:	00bfff84 	movi	r2,-2
 201e2a8:	1884703a 	and	r2,r3,r2
 201e2ac:	1001703a 	wrctl	status,r2
  
  return context;
 201e2b0:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201e2b4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201e2b8:	e0fffd03 	ldbu	r3,-12(fp)
 201e2bc:	008080f4 	movhi	r2,515
 201e2c0:	1085f004 	addi	r2,r2,6080
 201e2c4:	18c7883a 	add	r3,r3,r3
 201e2c8:	18c7883a 	add	r3,r3,r3
 201e2cc:	10c5883a 	add	r2,r2,r3
 201e2d0:	10000015 	stw	zero,0(r2)
 201e2d4:	e0bff117 	ldw	r2,-60(fp)
 201e2d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e2dc:	e0bff417 	ldw	r2,-48(fp)
 201e2e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201e2e4:	e0bff603 	ldbu	r2,-40(fp)
 201e2e8:	00000506 	br	201e300 <OSTaskCreateExt+0x1d0>
 201e2ec:	e0bff117 	ldw	r2,-60(fp)
 201e2f0:	e0bff715 	stw	r2,-36(fp)
 201e2f4:	e0bff717 	ldw	r2,-36(fp)
 201e2f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201e2fc:	00800a04 	movi	r2,40
}
 201e300:	e037883a 	mov	sp,fp
 201e304:	dfc00117 	ldw	ra,4(sp)
 201e308:	df000017 	ldw	fp,0(sp)
 201e30c:	dec00204 	addi	sp,sp,8
 201e310:	f800283a 	ret

0201e314 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201e314:	defff404 	addi	sp,sp,-48
 201e318:	dfc00b15 	stw	ra,44(sp)
 201e31c:	df000a15 	stw	fp,40(sp)
 201e320:	df000a04 	addi	fp,sp,40
 201e324:	2005883a 	mov	r2,r4
 201e328:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 201e32c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 201e330:	d0a7b503 	ldbu	r2,-24876(gp)
 201e334:	10803fcc 	andi	r2,r2,255
 201e338:	10000226 	beq	r2,zero,201e344 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 201e33c:	00801004 	movi	r2,64
 201e340:	0000c006 	br	201e644 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 201e344:	e0bfff03 	ldbu	r2,-4(fp)
 201e348:	10800518 	cmpnei	r2,r2,20
 201e34c:	1000021e 	bne	r2,zero,201e358 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 201e350:	00800f84 	movi	r2,62
 201e354:	0000bb06 	br	201e644 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201e358:	e0bfff03 	ldbu	r2,-4(fp)
 201e35c:	10800530 	cmpltui	r2,r2,20
 201e360:	1000051e 	bne	r2,zero,201e378 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 201e364:	e0bfff03 	ldbu	r2,-4(fp)
 201e368:	10803fe0 	cmpeqi	r2,r2,255
 201e36c:	1000021e 	bne	r2,zero,201e378 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 201e370:	00800a84 	movi	r2,42
 201e374:	0000b306 	br	201e644 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e378:	0005303a 	rdctl	r2,status
 201e37c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e380:	e0fffe17 	ldw	r3,-8(fp)
 201e384:	00bfff84 	movi	r2,-2
 201e388:	1884703a 	and	r2,r3,r2
 201e38c:	1001703a 	wrctl	status,r2
  
  return context;
 201e390:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201e394:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201e398:	e0bfff03 	ldbu	r2,-4(fp)
 201e39c:	10803fd8 	cmpnei	r2,r2,255
 201e3a0:	1000031e 	bne	r2,zero,201e3b0 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 201e3a4:	d0a7b617 	ldw	r2,-24872(gp)
 201e3a8:	10800c83 	ldbu	r2,50(r2)
 201e3ac:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201e3b0:	e0ffff03 	ldbu	r3,-4(fp)
 201e3b4:	008080f4 	movhi	r2,515
 201e3b8:	1085f004 	addi	r2,r2,6080
 201e3bc:	18c7883a 	add	r3,r3,r3
 201e3c0:	18c7883a 	add	r3,r3,r3
 201e3c4:	10c5883a 	add	r2,r2,r3
 201e3c8:	10800017 	ldw	r2,0(r2)
 201e3cc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201e3d0:	e0bff817 	ldw	r2,-32(fp)
 201e3d4:	1000061e 	bne	r2,zero,201e3f0 <OSTaskDel+0xdc>
 201e3d8:	e0bff617 	ldw	r2,-40(fp)
 201e3dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e3e0:	e0bff717 	ldw	r2,-36(fp)
 201e3e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201e3e8:	008010c4 	movi	r2,67
 201e3ec:	00009506 	br	201e644 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201e3f0:	e0bff817 	ldw	r2,-32(fp)
 201e3f4:	10800058 	cmpnei	r2,r2,1
 201e3f8:	1000061e 	bne	r2,zero,201e414 <OSTaskDel+0x100>
 201e3fc:	e0bff617 	ldw	r2,-40(fp)
 201e400:	e0bff915 	stw	r2,-28(fp)
 201e404:	e0bff917 	ldw	r2,-28(fp)
 201e408:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201e40c:	00800f44 	movi	r2,61
 201e410:	00008c06 	br	201e644 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 201e414:	e0bff817 	ldw	r2,-32(fp)
 201e418:	10800d03 	ldbu	r2,52(r2)
 201e41c:	10c03fcc 	andi	r3,r2,255
 201e420:	e0bff817 	ldw	r2,-32(fp)
 201e424:	10800d03 	ldbu	r2,52(r2)
 201e428:	11003fcc 	andi	r4,r2,255
 201e42c:	d0a7b344 	addi	r2,gp,-24883
 201e430:	2085883a 	add	r2,r4,r2
 201e434:	10800003 	ldbu	r2,0(r2)
 201e438:	1009883a 	mov	r4,r2
 201e43c:	e0bff817 	ldw	r2,-32(fp)
 201e440:	10800d43 	ldbu	r2,53(r2)
 201e444:	0084303a 	nor	r2,zero,r2
 201e448:	2084703a 	and	r2,r4,r2
 201e44c:	1009883a 	mov	r4,r2
 201e450:	d0a7b344 	addi	r2,gp,-24883
 201e454:	1885883a 	add	r2,r3,r2
 201e458:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 201e45c:	e0bff817 	ldw	r2,-32(fp)
 201e460:	10800d03 	ldbu	r2,52(r2)
 201e464:	10c03fcc 	andi	r3,r2,255
 201e468:	d0a7b344 	addi	r2,gp,-24883
 201e46c:	1885883a 	add	r2,r3,r2
 201e470:	10800003 	ldbu	r2,0(r2)
 201e474:	10803fcc 	andi	r2,r2,255
 201e478:	1000071e 	bne	r2,zero,201e498 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201e47c:	e0bff817 	ldw	r2,-32(fp)
 201e480:	10800d83 	ldbu	r2,54(r2)
 201e484:	0084303a 	nor	r2,zero,r2
 201e488:	1007883a 	mov	r3,r2
 201e48c:	d0a7b303 	ldbu	r2,-24884(gp)
 201e490:	1884703a 	and	r2,r3,r2
 201e494:	d0a7b305 	stb	r2,-24884(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201e498:	e0bff817 	ldw	r2,-32(fp)
 201e49c:	10800717 	ldw	r2,28(r2)
 201e4a0:	10000526 	beq	r2,zero,201e4b8 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201e4a4:	e0bff817 	ldw	r2,-32(fp)
 201e4a8:	10800717 	ldw	r2,28(r2)
 201e4ac:	100b883a 	mov	r5,r2
 201e4b0:	e13ff817 	ldw	r4,-32(fp)
 201e4b4:	20187480 	call	2018748 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201e4b8:	e0bff817 	ldw	r2,-32(fp)
 201e4bc:	10800817 	ldw	r2,32(r2)
 201e4c0:	10000526 	beq	r2,zero,201e4d8 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201e4c4:	e0bff817 	ldw	r2,-32(fp)
 201e4c8:	10800817 	ldw	r2,32(r2)
 201e4cc:	100b883a 	mov	r5,r2
 201e4d0:	e13ff817 	ldw	r4,-32(fp)
 201e4d4:	20188000 	call	2018800 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201e4d8:	e0bff817 	ldw	r2,-32(fp)
 201e4dc:	10800a17 	ldw	r2,40(r2)
 201e4e0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 201e4e4:	e0bffb17 	ldw	r2,-20(fp)
 201e4e8:	10000226 	beq	r2,zero,201e4f4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 201e4ec:	e13ffb17 	ldw	r4,-20(fp)
 201e4f0:	201ac700 	call	201ac70 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201e4f4:	e0bff817 	ldw	r2,-32(fp)
 201e4f8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 201e4fc:	e0bff817 	ldw	r2,-32(fp)
 201e500:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 201e504:	e0bff817 	ldw	r2,-32(fp)
 201e508:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 201e50c:	d0a7a703 	ldbu	r2,-24932(gp)
 201e510:	10803fcc 	andi	r2,r2,255
 201e514:	10803fe0 	cmpeqi	r2,r2,255
 201e518:	1000031e 	bne	r2,zero,201e528 <OSTaskDel+0x214>
        OSLockNesting++;
 201e51c:	d0a7a703 	ldbu	r2,-24932(gp)
 201e520:	10800044 	addi	r2,r2,1
 201e524:	d0a7a705 	stb	r2,-24932(gp)
 201e528:	e0bff617 	ldw	r2,-40(fp)
 201e52c:	e0bffd15 	stw	r2,-12(fp)
 201e530:	e0bffd17 	ldw	r2,-12(fp)
 201e534:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201e538:	20183300 	call	2018330 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e53c:	0005303a 	rdctl	r2,status
 201e540:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e544:	e0fffa17 	ldw	r3,-24(fp)
 201e548:	00bfff84 	movi	r2,-2
 201e54c:	1884703a 	and	r2,r3,r2
 201e550:	1001703a 	wrctl	status,r2
  
  return context;
 201e554:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201e558:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 201e55c:	d0a7a703 	ldbu	r2,-24932(gp)
 201e560:	10803fcc 	andi	r2,r2,255
 201e564:	10000326 	beq	r2,zero,201e574 <OSTaskDel+0x260>
        OSLockNesting--;
 201e568:	d0a7a703 	ldbu	r2,-24932(gp)
 201e56c:	10bfffc4 	addi	r2,r2,-1
 201e570:	d0a7a705 	stb	r2,-24932(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 201e574:	e13ff817 	ldw	r4,-32(fp)
 201e578:	20216880 	call	2021688 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 201e57c:	d0a7af43 	ldbu	r2,-24899(gp)
 201e580:	10bfffc4 	addi	r2,r2,-1
 201e584:	d0a7af45 	stb	r2,-24899(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201e588:	e0ffff03 	ldbu	r3,-4(fp)
 201e58c:	008080f4 	movhi	r2,515
 201e590:	1085f004 	addi	r2,r2,6080
 201e594:	18c7883a 	add	r3,r3,r3
 201e598:	18c7883a 	add	r3,r3,r3
 201e59c:	10c5883a 	add	r2,r2,r3
 201e5a0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201e5a4:	e0bff817 	ldw	r2,-32(fp)
 201e5a8:	10800617 	ldw	r2,24(r2)
 201e5ac:	1000071e 	bne	r2,zero,201e5cc <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 201e5b0:	e0bff817 	ldw	r2,-32(fp)
 201e5b4:	10800517 	ldw	r2,20(r2)
 201e5b8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201e5bc:	e0bff817 	ldw	r2,-32(fp)
 201e5c0:	10800517 	ldw	r2,20(r2)
 201e5c4:	d0a7aa15 	stw	r2,-24920(gp)
 201e5c8:	00000a06 	br	201e5f4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201e5cc:	e0bff817 	ldw	r2,-32(fp)
 201e5d0:	10800617 	ldw	r2,24(r2)
 201e5d4:	e0fff817 	ldw	r3,-32(fp)
 201e5d8:	18c00517 	ldw	r3,20(r3)
 201e5dc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 201e5e0:	e0bff817 	ldw	r2,-32(fp)
 201e5e4:	10800517 	ldw	r2,20(r2)
 201e5e8:	e0fff817 	ldw	r3,-32(fp)
 201e5ec:	18c00617 	ldw	r3,24(r3)
 201e5f0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 201e5f4:	d0e7ae17 	ldw	r3,-24904(gp)
 201e5f8:	e0bff817 	ldw	r2,-32(fp)
 201e5fc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201e600:	e0bff817 	ldw	r2,-32(fp)
 201e604:	d0a7ae15 	stw	r2,-24904(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201e608:	e0bff817 	ldw	r2,-32(fp)
 201e60c:	00c00fc4 	movi	r3,63
 201e610:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 201e614:	e0bff817 	ldw	r2,-32(fp)
 201e618:	10001345 	stb	zero,77(r2)
 201e61c:	e0bff617 	ldw	r2,-40(fp)
 201e620:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e624:	e0bffc17 	ldw	r2,-16(fp)
 201e628:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201e62c:	d0a7a743 	ldbu	r2,-24931(gp)
 201e630:	10803fcc 	andi	r2,r2,255
 201e634:	10800058 	cmpnei	r2,r2,1
 201e638:	1000011e 	bne	r2,zero,201e640 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 201e63c:	2018d9c0 	call	2018d9c <OS_Sched>
    }
    return (OS_ERR_NONE);
 201e640:	0005883a 	mov	r2,zero
}
 201e644:	e037883a 	mov	sp,fp
 201e648:	dfc00117 	ldw	ra,4(sp)
 201e64c:	df000017 	ldw	fp,0(sp)
 201e650:	dec00204 	addi	sp,sp,8
 201e654:	f800283a 	ret

0201e658 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201e658:	defff504 	addi	sp,sp,-44
 201e65c:	df000a15 	stw	fp,40(sp)
 201e660:	df000a04 	addi	fp,sp,40
 201e664:	2005883a 	mov	r2,r4
 201e668:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201e66c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201e670:	e0bfff03 	ldbu	r2,-4(fp)
 201e674:	10800518 	cmpnei	r2,r2,20
 201e678:	1000021e 	bne	r2,zero,201e684 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 201e67c:	00800f84 	movi	r2,62
 201e680:	00004506 	br	201e798 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201e684:	e0bfff03 	ldbu	r2,-4(fp)
 201e688:	10800530 	cmpltui	r2,r2,20
 201e68c:	1000051e 	bne	r2,zero,201e6a4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 201e690:	e0bfff03 	ldbu	r2,-4(fp)
 201e694:	10803fe0 	cmpeqi	r2,r2,255
 201e698:	1000021e 	bne	r2,zero,201e6a4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 201e69c:	00800a84 	movi	r2,42
 201e6a0:	00003d06 	br	201e798 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 201e6a4:	e0bfff03 	ldbu	r2,-4(fp)
 201e6a8:	10803fd8 	cmpnei	r2,r2,255
 201e6ac:	1000111e 	bne	r2,zero,201e6f4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e6b0:	0005303a 	rdctl	r2,status
 201e6b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e6b8:	e0fff917 	ldw	r3,-28(fp)
 201e6bc:	00bfff84 	movi	r2,-2
 201e6c0:	1884703a 	and	r2,r3,r2
 201e6c4:	1001703a 	wrctl	status,r2
  
  return context;
 201e6c8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201e6cc:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 201e6d0:	d0a7b617 	ldw	r2,-24872(gp)
 201e6d4:	10800dc3 	ldbu	r2,55(r2)
 201e6d8:	e0bff805 	stb	r2,-32(fp)
 201e6dc:	e0bff617 	ldw	r2,-40(fp)
 201e6e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e6e4:	e0bffe17 	ldw	r2,-8(fp)
 201e6e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201e6ec:	e0bff803 	ldbu	r2,-32(fp)
 201e6f0:	00002906 	br	201e798 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e6f4:	0005303a 	rdctl	r2,status
 201e6f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e6fc:	e0fff717 	ldw	r3,-36(fp)
 201e700:	00bfff84 	movi	r2,-2
 201e704:	1884703a 	and	r2,r3,r2
 201e708:	1001703a 	wrctl	status,r2
  
  return context;
 201e70c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 201e710:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201e714:	e0ffff03 	ldbu	r3,-4(fp)
 201e718:	008080f4 	movhi	r2,515
 201e71c:	1085f004 	addi	r2,r2,6080
 201e720:	18c7883a 	add	r3,r3,r3
 201e724:	18c7883a 	add	r3,r3,r3
 201e728:	10c5883a 	add	r2,r2,r3
 201e72c:	10800017 	ldw	r2,0(r2)
 201e730:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 201e734:	e0bffb17 	ldw	r2,-20(fp)
 201e738:	1000061e 	bne	r2,zero,201e754 <OSTaskDelReq+0xfc>
 201e73c:	e0bff617 	ldw	r2,-40(fp)
 201e740:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e744:	e0bffa17 	ldw	r2,-24(fp)
 201e748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 201e74c:	008010c4 	movi	r2,67
 201e750:	00001106 	br	201e798 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201e754:	e0bffb17 	ldw	r2,-20(fp)
 201e758:	10800058 	cmpnei	r2,r2,1
 201e75c:	1000061e 	bne	r2,zero,201e778 <OSTaskDelReq+0x120>
 201e760:	e0bff617 	ldw	r2,-40(fp)
 201e764:	e0bffc15 	stw	r2,-16(fp)
 201e768:	e0bffc17 	ldw	r2,-16(fp)
 201e76c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201e770:	00800f44 	movi	r2,61
 201e774:	00000806 	br	201e798 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201e778:	e0bffb17 	ldw	r2,-20(fp)
 201e77c:	00c00fc4 	movi	r3,63
 201e780:	10c00dc5 	stb	r3,55(r2)
 201e784:	e0bff617 	ldw	r2,-40(fp)
 201e788:	e0bffd15 	stw	r2,-12(fp)
 201e78c:	e0bffd17 	ldw	r2,-12(fp)
 201e790:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201e794:	0005883a 	mov	r2,zero
}
 201e798:	e037883a 	mov	sp,fp
 201e79c:	df000017 	ldw	fp,0(sp)
 201e7a0:	dec00104 	addi	sp,sp,4
 201e7a4:	f800283a 	ret

0201e7a8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201e7a8:	defff404 	addi	sp,sp,-48
 201e7ac:	dfc00b15 	stw	ra,44(sp)
 201e7b0:	df000a15 	stw	fp,40(sp)
 201e7b4:	df000a04 	addi	fp,sp,40
 201e7b8:	2005883a 	mov	r2,r4
 201e7bc:	e17ffe15 	stw	r5,-8(fp)
 201e7c0:	e1bfff15 	stw	r6,-4(fp)
 201e7c4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201e7c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201e7cc:	e0bfff17 	ldw	r2,-4(fp)
 201e7d0:	1000021e 	bne	r2,zero,201e7dc <OSTaskNameGet+0x34>
        return (0);
 201e7d4:	0005883a 	mov	r2,zero
 201e7d8:	00005406 	br	201e92c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201e7dc:	e0bffd03 	ldbu	r2,-12(fp)
 201e7e0:	10800570 	cmpltui	r2,r2,21
 201e7e4:	1000081e 	bne	r2,zero,201e808 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 201e7e8:	e0bffd03 	ldbu	r2,-12(fp)
 201e7ec:	10803fe0 	cmpeqi	r2,r2,255
 201e7f0:	1000051e 	bne	r2,zero,201e808 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 201e7f4:	e0bfff17 	ldw	r2,-4(fp)
 201e7f8:	00c00a84 	movi	r3,42
 201e7fc:	10c00005 	stb	r3,0(r2)
            return (0);
 201e800:	0005883a 	mov	r2,zero
 201e804:	00004906 	br	201e92c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 201e808:	e0bffe17 	ldw	r2,-8(fp)
 201e80c:	1000051e 	bne	r2,zero,201e824 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 201e810:	e0bfff17 	ldw	r2,-4(fp)
 201e814:	00c00304 	movi	r3,12
 201e818:	10c00005 	stb	r3,0(r2)
        return (0);
 201e81c:	0005883a 	mov	r2,zero
 201e820:	00004206 	br	201e92c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 201e824:	d0a7b503 	ldbu	r2,-24876(gp)
 201e828:	10803fcc 	andi	r2,r2,255
 201e82c:	10000526 	beq	r2,zero,201e844 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 201e830:	e0bfff17 	ldw	r2,-4(fp)
 201e834:	00c00444 	movi	r3,17
 201e838:	10c00005 	stb	r3,0(r2)
        return (0);
 201e83c:	0005883a 	mov	r2,zero
 201e840:	00003a06 	br	201e92c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e844:	0005303a 	rdctl	r2,status
 201e848:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e84c:	e0fffc17 	ldw	r3,-16(fp)
 201e850:	00bfff84 	movi	r2,-2
 201e854:	1884703a 	and	r2,r3,r2
 201e858:	1001703a 	wrctl	status,r2
  
  return context;
 201e85c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201e860:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 201e864:	e0bffd03 	ldbu	r2,-12(fp)
 201e868:	10803fd8 	cmpnei	r2,r2,255
 201e86c:	1000031e 	bne	r2,zero,201e87c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 201e870:	d0a7b617 	ldw	r2,-24872(gp)
 201e874:	10800c83 	ldbu	r2,50(r2)
 201e878:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201e87c:	e0fffd03 	ldbu	r3,-12(fp)
 201e880:	008080f4 	movhi	r2,515
 201e884:	1085f004 	addi	r2,r2,6080
 201e888:	18c7883a 	add	r3,r3,r3
 201e88c:	18c7883a 	add	r3,r3,r3
 201e890:	10c5883a 	add	r2,r2,r3
 201e894:	10800017 	ldw	r2,0(r2)
 201e898:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 201e89c:	e0bff817 	ldw	r2,-32(fp)
 201e8a0:	1000091e 	bne	r2,zero,201e8c8 <OSTaskNameGet+0x120>
 201e8a4:	e0bff617 	ldw	r2,-40(fp)
 201e8a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e8ac:	e0bff717 	ldw	r2,-36(fp)
 201e8b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201e8b4:	e0bfff17 	ldw	r2,-4(fp)
 201e8b8:	00c010c4 	movi	r3,67
 201e8bc:	10c00005 	stb	r3,0(r2)
        return (0);
 201e8c0:	0005883a 	mov	r2,zero
 201e8c4:	00001906 	br	201e92c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201e8c8:	e0bff817 	ldw	r2,-32(fp)
 201e8cc:	10800058 	cmpnei	r2,r2,1
 201e8d0:	1000091e 	bne	r2,zero,201e8f8 <OSTaskNameGet+0x150>
 201e8d4:	e0bff617 	ldw	r2,-40(fp)
 201e8d8:	e0bff915 	stw	r2,-28(fp)
 201e8dc:	e0bff917 	ldw	r2,-28(fp)
 201e8e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201e8e4:	e0bfff17 	ldw	r2,-4(fp)
 201e8e8:	00c010c4 	movi	r3,67
 201e8ec:	10c00005 	stb	r3,0(r2)
        return (0);
 201e8f0:	0005883a 	mov	r2,zero
 201e8f4:	00000d06 	br	201e92c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 201e8f8:	e0bff817 	ldw	r2,-32(fp)
 201e8fc:	10801304 	addi	r2,r2,76
 201e900:	100b883a 	mov	r5,r2
 201e904:	e13ffe17 	ldw	r4,-8(fp)
 201e908:	2018ee00 	call	2018ee0 <OS_StrCopy>
 201e90c:	e0bffb05 	stb	r2,-20(fp)
 201e910:	e0bff617 	ldw	r2,-40(fp)
 201e914:	e0bffa15 	stw	r2,-24(fp)
 201e918:	e0bffa17 	ldw	r2,-24(fp)
 201e91c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201e920:	e0bfff17 	ldw	r2,-4(fp)
 201e924:	10000005 	stb	zero,0(r2)
    return (len);
 201e928:	e0bffb03 	ldbu	r2,-20(fp)
}
 201e92c:	e037883a 	mov	sp,fp
 201e930:	dfc00117 	ldw	ra,4(sp)
 201e934:	df000017 	ldw	fp,0(sp)
 201e938:	dec00204 	addi	sp,sp,8
 201e93c:	f800283a 	ret

0201e940 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201e940:	defff304 	addi	sp,sp,-52
 201e944:	dfc00c15 	stw	ra,48(sp)
 201e948:	df000b15 	stw	fp,44(sp)
 201e94c:	df000b04 	addi	fp,sp,44
 201e950:	2005883a 	mov	r2,r4
 201e954:	e17ffe15 	stw	r5,-8(fp)
 201e958:	e1bfff15 	stw	r6,-4(fp)
 201e95c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201e960:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201e964:	e0bfff17 	ldw	r2,-4(fp)
 201e968:	10005c26 	beq	r2,zero,201eadc <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 201e96c:	e0bffd03 	ldbu	r2,-12(fp)
 201e970:	10800570 	cmpltui	r2,r2,21
 201e974:	1000071e 	bne	r2,zero,201e994 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 201e978:	e0bffd03 	ldbu	r2,-12(fp)
 201e97c:	10803fe0 	cmpeqi	r2,r2,255
 201e980:	1000041e 	bne	r2,zero,201e994 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 201e984:	e0bfff17 	ldw	r2,-4(fp)
 201e988:	00c00a84 	movi	r3,42
 201e98c:	10c00005 	stb	r3,0(r2)
            return;
 201e990:	00005306 	br	201eae0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 201e994:	e0bffe17 	ldw	r2,-8(fp)
 201e998:	1000041e 	bne	r2,zero,201e9ac <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 201e99c:	e0bfff17 	ldw	r2,-4(fp)
 201e9a0:	00c00304 	movi	r3,12
 201e9a4:	10c00005 	stb	r3,0(r2)
        return;
 201e9a8:	00004d06 	br	201eae0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201e9ac:	d0a7b503 	ldbu	r2,-24876(gp)
 201e9b0:	10803fcc 	andi	r2,r2,255
 201e9b4:	10000426 	beq	r2,zero,201e9c8 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 201e9b8:	e0bfff17 	ldw	r2,-4(fp)
 201e9bc:	00c00484 	movi	r3,18
 201e9c0:	10c00005 	stb	r3,0(r2)
        return;
 201e9c4:	00004606 	br	201eae0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e9c8:	0005303a 	rdctl	r2,status
 201e9cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e9d0:	e0fffc17 	ldw	r3,-16(fp)
 201e9d4:	00bfff84 	movi	r2,-2
 201e9d8:	1884703a 	and	r2,r3,r2
 201e9dc:	1001703a 	wrctl	status,r2
  
  return context;
 201e9e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201e9e4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201e9e8:	e0bffd03 	ldbu	r2,-12(fp)
 201e9ec:	10803fd8 	cmpnei	r2,r2,255
 201e9f0:	1000031e 	bne	r2,zero,201ea00 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 201e9f4:	d0a7b617 	ldw	r2,-24872(gp)
 201e9f8:	10800c83 	ldbu	r2,50(r2)
 201e9fc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ea00:	e0fffd03 	ldbu	r3,-12(fp)
 201ea04:	008080f4 	movhi	r2,515
 201ea08:	1085f004 	addi	r2,r2,6080
 201ea0c:	18c7883a 	add	r3,r3,r3
 201ea10:	18c7883a 	add	r3,r3,r3
 201ea14:	10c5883a 	add	r2,r2,r3
 201ea18:	10800017 	ldw	r2,0(r2)
 201ea1c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201ea20:	e0bff717 	ldw	r2,-36(fp)
 201ea24:	1000081e 	bne	r2,zero,201ea48 <OSTaskNameSet+0x108>
 201ea28:	e0bff517 	ldw	r2,-44(fp)
 201ea2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ea30:	e0bff617 	ldw	r2,-40(fp)
 201ea34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201ea38:	e0bfff17 	ldw	r2,-4(fp)
 201ea3c:	00c010c4 	movi	r3,67
 201ea40:	10c00005 	stb	r3,0(r2)
        return;
 201ea44:	00002606 	br	201eae0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 201ea48:	e0bff717 	ldw	r2,-36(fp)
 201ea4c:	10800058 	cmpnei	r2,r2,1
 201ea50:	1000081e 	bne	r2,zero,201ea74 <OSTaskNameSet+0x134>
 201ea54:	e0bff517 	ldw	r2,-44(fp)
 201ea58:	e0bff815 	stw	r2,-32(fp)
 201ea5c:	e0bff817 	ldw	r2,-32(fp)
 201ea60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201ea64:	e0bfff17 	ldw	r2,-4(fp)
 201ea68:	00c010c4 	movi	r3,67
 201ea6c:	10c00005 	stb	r3,0(r2)
        return;
 201ea70:	00001b06 	br	201eae0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 201ea74:	e13ffe17 	ldw	r4,-8(fp)
 201ea78:	2018f540 	call	2018f54 <OS_StrLen>
 201ea7c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201ea80:	e0bffa03 	ldbu	r2,-24(fp)
 201ea84:	10800830 	cmpltui	r2,r2,32
 201ea88:	1000081e 	bne	r2,zero,201eaac <OSTaskNameSet+0x16c>
 201ea8c:	e0bff517 	ldw	r2,-44(fp)
 201ea90:	e0bff915 	stw	r2,-28(fp)
 201ea94:	e0bff917 	ldw	r2,-28(fp)
 201ea98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 201ea9c:	e0bfff17 	ldw	r2,-4(fp)
 201eaa0:	00c01044 	movi	r3,65
 201eaa4:	10c00005 	stb	r3,0(r2)
        return;
 201eaa8:	00000d06 	br	201eae0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201eaac:	e0bff717 	ldw	r2,-36(fp)
 201eab0:	10801304 	addi	r2,r2,76
 201eab4:	e17ffe17 	ldw	r5,-8(fp)
 201eab8:	1009883a 	mov	r4,r2
 201eabc:	2018ee00 	call	2018ee0 <OS_StrCopy>
 201eac0:	e0bff517 	ldw	r2,-44(fp)
 201eac4:	e0bffb15 	stw	r2,-20(fp)
 201eac8:	e0bffb17 	ldw	r2,-20(fp)
 201eacc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201ead0:	e0bfff17 	ldw	r2,-4(fp)
 201ead4:	10000005 	stb	zero,0(r2)
 201ead8:	00000106 	br	201eae0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201eadc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201eae0:	e037883a 	mov	sp,fp
 201eae4:	dfc00117 	ldw	ra,4(sp)
 201eae8:	df000017 	ldw	fp,0(sp)
 201eaec:	dec00204 	addi	sp,sp,8
 201eaf0:	f800283a 	ret

0201eaf4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 201eaf4:	defff404 	addi	sp,sp,-48
 201eaf8:	dfc00b15 	stw	ra,44(sp)
 201eafc:	df000a15 	stw	fp,40(sp)
 201eb00:	df000a04 	addi	fp,sp,40
 201eb04:	2005883a 	mov	r2,r4
 201eb08:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201eb0c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201eb10:	e0bfff03 	ldbu	r2,-4(fp)
 201eb14:	10800530 	cmpltui	r2,r2,20
 201eb18:	1000021e 	bne	r2,zero,201eb24 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201eb1c:	00800a84 	movi	r2,42
 201eb20:	00006406 	br	201ecb4 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201eb24:	0005303a 	rdctl	r2,status
 201eb28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201eb2c:	e0fffe17 	ldw	r3,-8(fp)
 201eb30:	00bfff84 	movi	r2,-2
 201eb34:	1884703a 	and	r2,r3,r2
 201eb38:	1001703a 	wrctl	status,r2
  
  return context;
 201eb3c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201eb40:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201eb44:	e0ffff03 	ldbu	r3,-4(fp)
 201eb48:	008080f4 	movhi	r2,515
 201eb4c:	1085f004 	addi	r2,r2,6080
 201eb50:	18c7883a 	add	r3,r3,r3
 201eb54:	18c7883a 	add	r3,r3,r3
 201eb58:	10c5883a 	add	r2,r2,r3
 201eb5c:	10800017 	ldw	r2,0(r2)
 201eb60:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 201eb64:	e0bff817 	ldw	r2,-32(fp)
 201eb68:	1000061e 	bne	r2,zero,201eb84 <OSTaskResume+0x90>
 201eb6c:	e0bff617 	ldw	r2,-40(fp)
 201eb70:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201eb74:	e0bff717 	ldw	r2,-36(fp)
 201eb78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 201eb7c:	00801184 	movi	r2,70
 201eb80:	00004c06 	br	201ecb4 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 201eb84:	e0bff817 	ldw	r2,-32(fp)
 201eb88:	10800058 	cmpnei	r2,r2,1
 201eb8c:	1000061e 	bne	r2,zero,201eba8 <OSTaskResume+0xb4>
 201eb90:	e0bff617 	ldw	r2,-40(fp)
 201eb94:	e0bff915 	stw	r2,-28(fp)
 201eb98:	e0bff917 	ldw	r2,-28(fp)
 201eb9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201eba0:	008010c4 	movi	r2,67
 201eba4:	00004306 	br	201ecb4 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 201eba8:	e0bff817 	ldw	r2,-32(fp)
 201ebac:	10800c03 	ldbu	r2,48(r2)
 201ebb0:	10803fcc 	andi	r2,r2,255
 201ebb4:	1080020c 	andi	r2,r2,8
 201ebb8:	10003926 	beq	r2,zero,201eca0 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201ebbc:	e0bff817 	ldw	r2,-32(fp)
 201ebc0:	10c00c03 	ldbu	r3,48(r2)
 201ebc4:	00bffdc4 	movi	r2,-9
 201ebc8:	1884703a 	and	r2,r3,r2
 201ebcc:	1007883a 	mov	r3,r2
 201ebd0:	e0bff817 	ldw	r2,-32(fp)
 201ebd4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 201ebd8:	e0bff817 	ldw	r2,-32(fp)
 201ebdc:	10800c03 	ldbu	r2,48(r2)
 201ebe0:	10803fcc 	andi	r2,r2,255
 201ebe4:	1000281e 	bne	r2,zero,201ec88 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 201ebe8:	e0bff817 	ldw	r2,-32(fp)
 201ebec:	10800b8b 	ldhu	r2,46(r2)
 201ebf0:	10bfffcc 	andi	r2,r2,65535
 201ebf4:	10001f1e 	bne	r2,zero,201ec74 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 201ebf8:	e0bff817 	ldw	r2,-32(fp)
 201ebfc:	10c00d83 	ldbu	r3,54(r2)
 201ec00:	d0a7b303 	ldbu	r2,-24884(gp)
 201ec04:	1884b03a 	or	r2,r3,r2
 201ec08:	d0a7b305 	stb	r2,-24884(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201ec0c:	e0bff817 	ldw	r2,-32(fp)
 201ec10:	10800d03 	ldbu	r2,52(r2)
 201ec14:	10c03fcc 	andi	r3,r2,255
 201ec18:	e0bff817 	ldw	r2,-32(fp)
 201ec1c:	10800d03 	ldbu	r2,52(r2)
 201ec20:	11003fcc 	andi	r4,r2,255
 201ec24:	d0a7b344 	addi	r2,gp,-24883
 201ec28:	2085883a 	add	r2,r4,r2
 201ec2c:	11000003 	ldbu	r4,0(r2)
 201ec30:	e0bff817 	ldw	r2,-32(fp)
 201ec34:	10800d43 	ldbu	r2,53(r2)
 201ec38:	2084b03a 	or	r2,r4,r2
 201ec3c:	1009883a 	mov	r4,r2
 201ec40:	d0a7b344 	addi	r2,gp,-24883
 201ec44:	1885883a 	add	r2,r3,r2
 201ec48:	11000005 	stb	r4,0(r2)
 201ec4c:	e0bff617 	ldw	r2,-40(fp)
 201ec50:	e0bffa15 	stw	r2,-24(fp)
 201ec54:	e0bffa17 	ldw	r2,-24(fp)
 201ec58:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201ec5c:	d0a7a743 	ldbu	r2,-24931(gp)
 201ec60:	10803fcc 	andi	r2,r2,255
 201ec64:	10800058 	cmpnei	r2,r2,1
 201ec68:	10000b1e 	bne	r2,zero,201ec98 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 201ec6c:	2018d9c0 	call	2018d9c <OS_Sched>
 201ec70:	00000906 	br	201ec98 <OSTaskResume+0x1a4>
 201ec74:	e0bff617 	ldw	r2,-40(fp)
 201ec78:	e0bffb15 	stw	r2,-20(fp)
 201ec7c:	e0bffb17 	ldw	r2,-20(fp)
 201ec80:	1001703a 	wrctl	status,r2
 201ec84:	00000406 	br	201ec98 <OSTaskResume+0x1a4>
 201ec88:	e0bff617 	ldw	r2,-40(fp)
 201ec8c:	e0bffc15 	stw	r2,-16(fp)
 201ec90:	e0bffc17 	ldw	r2,-16(fp)
 201ec94:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 201ec98:	0005883a 	mov	r2,zero
 201ec9c:	00000506 	br	201ecb4 <OSTaskResume+0x1c0>
 201eca0:	e0bff617 	ldw	r2,-40(fp)
 201eca4:	e0bffd15 	stw	r2,-12(fp)
 201eca8:	e0bffd17 	ldw	r2,-12(fp)
 201ecac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201ecb0:	00801104 	movi	r2,68
}
 201ecb4:	e037883a 	mov	sp,fp
 201ecb8:	dfc00117 	ldw	ra,4(sp)
 201ecbc:	df000017 	ldw	fp,0(sp)
 201ecc0:	dec00204 	addi	sp,sp,8
 201ecc4:	f800283a 	ret

0201ecc8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 201ecc8:	defff304 	addi	sp,sp,-52
 201eccc:	df000c15 	stw	fp,48(sp)
 201ecd0:	df000c04 	addi	fp,sp,48
 201ecd4:	2005883a 	mov	r2,r4
 201ecd8:	e17fff15 	stw	r5,-4(fp)
 201ecdc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201ece0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 201ece4:	e0bffe03 	ldbu	r2,-8(fp)
 201ece8:	10800570 	cmpltui	r2,r2,21
 201ecec:	1000051e 	bne	r2,zero,201ed04 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201ecf0:	e0bffe03 	ldbu	r2,-8(fp)
 201ecf4:	10803fe0 	cmpeqi	r2,r2,255
 201ecf8:	1000021e 	bne	r2,zero,201ed04 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201ecfc:	00800a84 	movi	r2,42
 201ed00:	00005d06 	br	201ee78 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 201ed04:	e0bfff17 	ldw	r2,-4(fp)
 201ed08:	1000021e 	bne	r2,zero,201ed14 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201ed0c:	00800244 	movi	r2,9
 201ed10:	00005906 	br	201ee78 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 201ed14:	e0bfff17 	ldw	r2,-4(fp)
 201ed18:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201ed1c:	e0bfff17 	ldw	r2,-4(fp)
 201ed20:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ed24:	0005303a 	rdctl	r2,status
 201ed28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ed2c:	e0fffd17 	ldw	r3,-12(fp)
 201ed30:	00bfff84 	movi	r2,-2
 201ed34:	1884703a 	and	r2,r3,r2
 201ed38:	1001703a 	wrctl	status,r2
  
  return context;
 201ed3c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 201ed40:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 201ed44:	e0bffe03 	ldbu	r2,-8(fp)
 201ed48:	10803fd8 	cmpnei	r2,r2,255
 201ed4c:	1000031e 	bne	r2,zero,201ed5c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201ed50:	d0a7b617 	ldw	r2,-24872(gp)
 201ed54:	10800c83 	ldbu	r2,50(r2)
 201ed58:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ed5c:	e0fffe03 	ldbu	r3,-8(fp)
 201ed60:	008080f4 	movhi	r2,515
 201ed64:	1085f004 	addi	r2,r2,6080
 201ed68:	18c7883a 	add	r3,r3,r3
 201ed6c:	18c7883a 	add	r3,r3,r3
 201ed70:	10c5883a 	add	r2,r2,r3
 201ed74:	10800017 	ldw	r2,0(r2)
 201ed78:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 201ed7c:	e0bff817 	ldw	r2,-32(fp)
 201ed80:	1000061e 	bne	r2,zero,201ed9c <OSTaskStkChk+0xd4>
 201ed84:	e0bff617 	ldw	r2,-40(fp)
 201ed88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ed8c:	e0bff717 	ldw	r2,-36(fp)
 201ed90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201ed94:	008010c4 	movi	r2,67
 201ed98:	00003706 	br	201ee78 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201ed9c:	e0bff817 	ldw	r2,-32(fp)
 201eda0:	10800058 	cmpnei	r2,r2,1
 201eda4:	1000061e 	bne	r2,zero,201edc0 <OSTaskStkChk+0xf8>
 201eda8:	e0bff617 	ldw	r2,-40(fp)
 201edac:	e0bff915 	stw	r2,-28(fp)
 201edb0:	e0bff917 	ldw	r2,-28(fp)
 201edb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201edb8:	008010c4 	movi	r2,67
 201edbc:	00002e06 	br	201ee78 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201edc0:	e0bff817 	ldw	r2,-32(fp)
 201edc4:	1080040b 	ldhu	r2,16(r2)
 201edc8:	10bfffcc 	andi	r2,r2,65535
 201edcc:	1080004c 	andi	r2,r2,1
 201edd0:	1000061e 	bne	r2,zero,201edec <OSTaskStkChk+0x124>
 201edd4:	e0bff617 	ldw	r2,-40(fp)
 201edd8:	e0bffa15 	stw	r2,-24(fp)
 201eddc:	e0bffa17 	ldw	r2,-24(fp)
 201ede0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 201ede4:	00801144 	movi	r2,69
 201ede8:	00002306 	br	201ee78 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201edec:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 201edf0:	e0bff817 	ldw	r2,-32(fp)
 201edf4:	10800317 	ldw	r2,12(r2)
 201edf8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201edfc:	e0bff817 	ldw	r2,-32(fp)
 201ee00:	10800217 	ldw	r2,8(r2)
 201ee04:	e0bff415 	stw	r2,-48(fp)
 201ee08:	e0bff617 	ldw	r2,-40(fp)
 201ee0c:	e0bffb15 	stw	r2,-20(fp)
 201ee10:	e0bffb17 	ldw	r2,-20(fp)
 201ee14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201ee18:	00000306 	br	201ee28 <OSTaskStkChk+0x160>
        nfree++;
 201ee1c:	e0bff517 	ldw	r2,-44(fp)
 201ee20:	10800044 	addi	r2,r2,1
 201ee24:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201ee28:	e0bff417 	ldw	r2,-48(fp)
 201ee2c:	10c00104 	addi	r3,r2,4
 201ee30:	e0fff415 	stw	r3,-48(fp)
 201ee34:	10800017 	ldw	r2,0(r2)
 201ee38:	103ff826 	beq	r2,zero,201ee1c <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201ee3c:	e0bff517 	ldw	r2,-44(fp)
 201ee40:	1085883a 	add	r2,r2,r2
 201ee44:	1085883a 	add	r2,r2,r2
 201ee48:	1007883a 	mov	r3,r2
 201ee4c:	e0bfff17 	ldw	r2,-4(fp)
 201ee50:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 201ee54:	e0fffc17 	ldw	r3,-16(fp)
 201ee58:	e0bff517 	ldw	r2,-44(fp)
 201ee5c:	1885c83a 	sub	r2,r3,r2
 201ee60:	1085883a 	add	r2,r2,r2
 201ee64:	1085883a 	add	r2,r2,r2
 201ee68:	1007883a 	mov	r3,r2
 201ee6c:	e0bfff17 	ldw	r2,-4(fp)
 201ee70:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 201ee74:	0005883a 	mov	r2,zero
}
 201ee78:	e037883a 	mov	sp,fp
 201ee7c:	df000017 	ldw	fp,0(sp)
 201ee80:	dec00104 	addi	sp,sp,4
 201ee84:	f800283a 	ret

0201ee88 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 201ee88:	defff504 	addi	sp,sp,-44
 201ee8c:	dfc00a15 	stw	ra,40(sp)
 201ee90:	df000915 	stw	fp,36(sp)
 201ee94:	df000904 	addi	fp,sp,36
 201ee98:	2005883a 	mov	r2,r4
 201ee9c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201eea0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 201eea4:	e0bfff03 	ldbu	r2,-4(fp)
 201eea8:	10800518 	cmpnei	r2,r2,20
 201eeac:	1000021e 	bne	r2,zero,201eeb8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201eeb0:	008011c4 	movi	r2,71
 201eeb4:	00006806 	br	201f058 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201eeb8:	e0bfff03 	ldbu	r2,-4(fp)
 201eebc:	10800530 	cmpltui	r2,r2,20
 201eec0:	1000051e 	bne	r2,zero,201eed8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 201eec4:	e0bfff03 	ldbu	r2,-4(fp)
 201eec8:	10803fe0 	cmpeqi	r2,r2,255
 201eecc:	1000021e 	bne	r2,zero,201eed8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 201eed0:	00800a84 	movi	r2,42
 201eed4:	00006006 	br	201f058 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201eed8:	0005303a 	rdctl	r2,status
 201eedc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201eee0:	e0fffe17 	ldw	r3,-8(fp)
 201eee4:	00bfff84 	movi	r2,-2
 201eee8:	1884703a 	and	r2,r3,r2
 201eeec:	1001703a 	wrctl	status,r2
  
  return context;
 201eef0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 201eef4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 201eef8:	e0bfff03 	ldbu	r2,-4(fp)
 201eefc:	10803fd8 	cmpnei	r2,r2,255
 201ef00:	1000061e 	bne	r2,zero,201ef1c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201ef04:	d0a7b617 	ldw	r2,-24872(gp)
 201ef08:	10800c83 	ldbu	r2,50(r2)
 201ef0c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 201ef10:	00800044 	movi	r2,1
 201ef14:	e0bff705 	stb	r2,-36(fp)
 201ef18:	00000906 	br	201ef40 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201ef1c:	d0a7b617 	ldw	r2,-24872(gp)
 201ef20:	10800c83 	ldbu	r2,50(r2)
 201ef24:	10c03fcc 	andi	r3,r2,255
 201ef28:	e0bfff03 	ldbu	r2,-4(fp)
 201ef2c:	1880031e 	bne	r3,r2,201ef3c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 201ef30:	00800044 	movi	r2,1
 201ef34:	e0bff705 	stb	r2,-36(fp)
 201ef38:	00000106 	br	201ef40 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201ef3c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ef40:	e0ffff03 	ldbu	r3,-4(fp)
 201ef44:	008080f4 	movhi	r2,515
 201ef48:	1085f004 	addi	r2,r2,6080
 201ef4c:	18c7883a 	add	r3,r3,r3
 201ef50:	18c7883a 	add	r3,r3,r3
 201ef54:	10c5883a 	add	r2,r2,r3
 201ef58:	10800017 	ldw	r2,0(r2)
 201ef5c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201ef60:	e0bffa17 	ldw	r2,-24(fp)
 201ef64:	1000061e 	bne	r2,zero,201ef80 <OSTaskSuspend+0xf8>
 201ef68:	e0bff817 	ldw	r2,-32(fp)
 201ef6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ef70:	e0bff917 	ldw	r2,-28(fp)
 201ef74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201ef78:	00801204 	movi	r2,72
 201ef7c:	00003606 	br	201f058 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201ef80:	e0bffa17 	ldw	r2,-24(fp)
 201ef84:	10800058 	cmpnei	r2,r2,1
 201ef88:	1000061e 	bne	r2,zero,201efa4 <OSTaskSuspend+0x11c>
 201ef8c:	e0bff817 	ldw	r2,-32(fp)
 201ef90:	e0bffb15 	stw	r2,-20(fp)
 201ef94:	e0bffb17 	ldw	r2,-20(fp)
 201ef98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201ef9c:	008010c4 	movi	r2,67
 201efa0:	00002d06 	br	201f058 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 201efa4:	e0bffa17 	ldw	r2,-24(fp)
 201efa8:	10800d03 	ldbu	r2,52(r2)
 201efac:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201efb0:	e0fffd03 	ldbu	r3,-12(fp)
 201efb4:	e13ffd03 	ldbu	r4,-12(fp)
 201efb8:	d0a7b344 	addi	r2,gp,-24883
 201efbc:	2085883a 	add	r2,r4,r2
 201efc0:	10800003 	ldbu	r2,0(r2)
 201efc4:	1009883a 	mov	r4,r2
 201efc8:	e0bffa17 	ldw	r2,-24(fp)
 201efcc:	10800d43 	ldbu	r2,53(r2)
 201efd0:	0084303a 	nor	r2,zero,r2
 201efd4:	2084703a 	and	r2,r4,r2
 201efd8:	1009883a 	mov	r4,r2
 201efdc:	d0a7b344 	addi	r2,gp,-24883
 201efe0:	1885883a 	add	r2,r3,r2
 201efe4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 201efe8:	e0fffd03 	ldbu	r3,-12(fp)
 201efec:	d0a7b344 	addi	r2,gp,-24883
 201eff0:	1885883a 	add	r2,r3,r2
 201eff4:	10800003 	ldbu	r2,0(r2)
 201eff8:	10803fcc 	andi	r2,r2,255
 201effc:	1000071e 	bne	r2,zero,201f01c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 201f000:	e0bffa17 	ldw	r2,-24(fp)
 201f004:	10800d83 	ldbu	r2,54(r2)
 201f008:	0084303a 	nor	r2,zero,r2
 201f00c:	1007883a 	mov	r3,r2
 201f010:	d0a7b303 	ldbu	r2,-24884(gp)
 201f014:	1884703a 	and	r2,r3,r2
 201f018:	d0a7b305 	stb	r2,-24884(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201f01c:	e0bffa17 	ldw	r2,-24(fp)
 201f020:	10800c03 	ldbu	r2,48(r2)
 201f024:	10800214 	ori	r2,r2,8
 201f028:	1007883a 	mov	r3,r2
 201f02c:	e0bffa17 	ldw	r2,-24(fp)
 201f030:	10c00c05 	stb	r3,48(r2)
 201f034:	e0bff817 	ldw	r2,-32(fp)
 201f038:	e0bffc15 	stw	r2,-16(fp)
 201f03c:	e0bffc17 	ldw	r2,-16(fp)
 201f040:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 201f044:	e0bff703 	ldbu	r2,-36(fp)
 201f048:	10800058 	cmpnei	r2,r2,1
 201f04c:	1000011e 	bne	r2,zero,201f054 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 201f050:	2018d9c0 	call	2018d9c <OS_Sched>
    }
    return (OS_ERR_NONE);
 201f054:	0005883a 	mov	r2,zero
}
 201f058:	e037883a 	mov	sp,fp
 201f05c:	dfc00117 	ldw	ra,4(sp)
 201f060:	df000017 	ldw	fp,0(sp)
 201f064:	dec00204 	addi	sp,sp,8
 201f068:	f800283a 	ret

0201f06c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 201f06c:	defff604 	addi	sp,sp,-40
 201f070:	dfc00915 	stw	ra,36(sp)
 201f074:	df000815 	stw	fp,32(sp)
 201f078:	df000804 	addi	fp,sp,32
 201f07c:	2005883a 	mov	r2,r4
 201f080:	e17fff15 	stw	r5,-4(fp)
 201f084:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f088:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 201f08c:	e0bffe03 	ldbu	r2,-8(fp)
 201f090:	10800570 	cmpltui	r2,r2,21
 201f094:	1000051e 	bne	r2,zero,201f0ac <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201f098:	e0bffe03 	ldbu	r2,-8(fp)
 201f09c:	10803fe0 	cmpeqi	r2,r2,255
 201f0a0:	1000021e 	bne	r2,zero,201f0ac <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 201f0a4:	00800a84 	movi	r2,42
 201f0a8:	00003406 	br	201f17c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 201f0ac:	e0bfff17 	ldw	r2,-4(fp)
 201f0b0:	1000021e 	bne	r2,zero,201f0bc <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 201f0b4:	00800244 	movi	r2,9
 201f0b8:	00003006 	br	201f17c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f0bc:	0005303a 	rdctl	r2,status
 201f0c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f0c4:	e0fffd17 	ldw	r3,-12(fp)
 201f0c8:	00bfff84 	movi	r2,-2
 201f0cc:	1884703a 	and	r2,r3,r2
 201f0d0:	1001703a 	wrctl	status,r2
  
  return context;
 201f0d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201f0d8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201f0dc:	e0bffe03 	ldbu	r2,-8(fp)
 201f0e0:	10803fd8 	cmpnei	r2,r2,255
 201f0e4:	1000031e 	bne	r2,zero,201f0f4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 201f0e8:	d0a7b617 	ldw	r2,-24872(gp)
 201f0ec:	10800c83 	ldbu	r2,50(r2)
 201f0f0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201f0f4:	e0fffe03 	ldbu	r3,-8(fp)
 201f0f8:	008080f4 	movhi	r2,515
 201f0fc:	1085f004 	addi	r2,r2,6080
 201f100:	18c7883a 	add	r3,r3,r3
 201f104:	18c7883a 	add	r3,r3,r3
 201f108:	10c5883a 	add	r2,r2,r3
 201f10c:	10800017 	ldw	r2,0(r2)
 201f110:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201f114:	e0bffa17 	ldw	r2,-24(fp)
 201f118:	1000061e 	bne	r2,zero,201f134 <OSTaskQuery+0xc8>
 201f11c:	e0bff817 	ldw	r2,-32(fp)
 201f120:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f124:	e0bff917 	ldw	r2,-28(fp)
 201f128:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201f12c:	00800a44 	movi	r2,41
 201f130:	00001206 	br	201f17c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 201f134:	e0bffa17 	ldw	r2,-24(fp)
 201f138:	10800058 	cmpnei	r2,r2,1
 201f13c:	1000061e 	bne	r2,zero,201f158 <OSTaskQuery+0xec>
 201f140:	e0bff817 	ldw	r2,-32(fp)
 201f144:	e0bffb15 	stw	r2,-20(fp)
 201f148:	e0bffb17 	ldw	r2,-20(fp)
 201f14c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201f150:	008010c4 	movi	r2,67
 201f154:	00000906 	br	201f17c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201f158:	01801b04 	movi	r6,108
 201f15c:	e17ffa17 	ldw	r5,-24(fp)
 201f160:	e13fff17 	ldw	r4,-4(fp)
 201f164:	2018d340 	call	2018d34 <OS_MemCopy>
 201f168:	e0bff817 	ldw	r2,-32(fp)
 201f16c:	e0bffc15 	stw	r2,-16(fp)
 201f170:	e0bffc17 	ldw	r2,-16(fp)
 201f174:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201f178:	0005883a 	mov	r2,zero
}
 201f17c:	e037883a 	mov	sp,fp
 201f180:	dfc00117 	ldw	ra,4(sp)
 201f184:	df000017 	ldw	fp,0(sp)
 201f188:	dec00204 	addi	sp,sp,8
 201f18c:	f800283a 	ret

0201f190 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 201f190:	defffc04 	addi	sp,sp,-16
 201f194:	df000315 	stw	fp,12(sp)
 201f198:	df000304 	addi	fp,sp,12
 201f19c:	e13ffd15 	stw	r4,-12(fp)
 201f1a0:	e17ffe15 	stw	r5,-8(fp)
 201f1a4:	3005883a 	mov	r2,r6
 201f1a8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 201f1ac:	e0bfff0b 	ldhu	r2,-4(fp)
 201f1b0:	1080004c 	andi	r2,r2,1
 201f1b4:	10000d26 	beq	r2,zero,201f1ec <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201f1b8:	e0bfff0b 	ldhu	r2,-4(fp)
 201f1bc:	1080008c 	andi	r2,r2,2
 201f1c0:	10000a26 	beq	r2,zero,201f1ec <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201f1c4:	00000706 	br	201f1e4 <OS_TaskStkClr+0x54>
                size--;
 201f1c8:	e0bffe17 	ldw	r2,-8(fp)
 201f1cc:	10bfffc4 	addi	r2,r2,-1
 201f1d0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 201f1d4:	e0bffd17 	ldw	r2,-12(fp)
 201f1d8:	10c00104 	addi	r3,r2,4
 201f1dc:	e0fffd15 	stw	r3,-12(fp)
 201f1e0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201f1e4:	e0bffe17 	ldw	r2,-8(fp)
 201f1e8:	103ff71e 	bne	r2,zero,201f1c8 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 201f1ec:	0001883a 	nop
 201f1f0:	e037883a 	mov	sp,fp
 201f1f4:	df000017 	ldw	fp,0(sp)
 201f1f8:	dec00104 	addi	sp,sp,4
 201f1fc:	f800283a 	ret

0201f200 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 201f200:	defff904 	addi	sp,sp,-28
 201f204:	dfc00615 	stw	ra,24(sp)
 201f208:	df000515 	stw	fp,20(sp)
 201f20c:	df000504 	addi	fp,sp,20
 201f210:	2005883a 	mov	r2,r4
 201f214:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f218:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201f21c:	d0a7b503 	ldbu	r2,-24876(gp)
 201f220:	10803fcc 	andi	r2,r2,255
 201f224:	1000311e 	bne	r2,zero,201f2ec <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 201f228:	e0bfff0b 	ldhu	r2,-4(fp)
 201f22c:	10003026 	beq	r2,zero,201f2f0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f230:	0005303a 	rdctl	r2,status
 201f234:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f238:	e0fffe17 	ldw	r3,-8(fp)
 201f23c:	00bfff84 	movi	r2,-2
 201f240:	1884703a 	and	r2,r3,r2
 201f244:	1001703a 	wrctl	status,r2
  
  return context;
 201f248:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201f24c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201f250:	d0a7b617 	ldw	r2,-24872(gp)
 201f254:	10800d03 	ldbu	r2,52(r2)
 201f258:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201f25c:	e0fffd03 	ldbu	r3,-12(fp)
 201f260:	e13ffd03 	ldbu	r4,-12(fp)
 201f264:	d0a7b344 	addi	r2,gp,-24883
 201f268:	2085883a 	add	r2,r4,r2
 201f26c:	10800003 	ldbu	r2,0(r2)
 201f270:	1009883a 	mov	r4,r2
 201f274:	d0a7b617 	ldw	r2,-24872(gp)
 201f278:	10800d43 	ldbu	r2,53(r2)
 201f27c:	0084303a 	nor	r2,zero,r2
 201f280:	2084703a 	and	r2,r4,r2
 201f284:	1009883a 	mov	r4,r2
 201f288:	d0a7b344 	addi	r2,gp,-24883
 201f28c:	1885883a 	add	r2,r3,r2
 201f290:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 201f294:	e0fffd03 	ldbu	r3,-12(fp)
 201f298:	d0a7b344 	addi	r2,gp,-24883
 201f29c:	1885883a 	add	r2,r3,r2
 201f2a0:	10800003 	ldbu	r2,0(r2)
 201f2a4:	10803fcc 	andi	r2,r2,255
 201f2a8:	1000071e 	bne	r2,zero,201f2c8 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201f2ac:	d0a7b617 	ldw	r2,-24872(gp)
 201f2b0:	10800d83 	ldbu	r2,54(r2)
 201f2b4:	0084303a 	nor	r2,zero,r2
 201f2b8:	1007883a 	mov	r3,r2
 201f2bc:	d0a7b303 	ldbu	r2,-24884(gp)
 201f2c0:	1884703a 	and	r2,r3,r2
 201f2c4:	d0a7b305 	stb	r2,-24884(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201f2c8:	d0a7b617 	ldw	r2,-24872(gp)
 201f2cc:	e0ffff0b 	ldhu	r3,-4(fp)
 201f2d0:	10c00b8d 	sth	r3,46(r2)
 201f2d4:	e0bffb17 	ldw	r2,-20(fp)
 201f2d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f2dc:	e0bffc17 	ldw	r2,-16(fp)
 201f2e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 201f2e4:	2018d9c0 	call	2018d9c <OS_Sched>
 201f2e8:	00000106 	br	201f2f0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 201f2ec:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 201f2f0:	e037883a 	mov	sp,fp
 201f2f4:	dfc00117 	ldw	ra,4(sp)
 201f2f8:	df000017 	ldw	fp,0(sp)
 201f2fc:	dec00204 	addi	sp,sp,8
 201f300:	f800283a 	ret

0201f304 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 201f304:	defff704 	addi	sp,sp,-36
 201f308:	dfc00815 	stw	ra,32(sp)
 201f30c:	df000715 	stw	fp,28(sp)
 201f310:	dc000615 	stw	r16,24(sp)
 201f314:	df000704 	addi	fp,sp,28
 201f318:	2011883a 	mov	r8,r4
 201f31c:	2809883a 	mov	r4,r5
 201f320:	3007883a 	mov	r3,r6
 201f324:	3805883a 	mov	r2,r7
 201f328:	e23ffb05 	stb	r8,-20(fp)
 201f32c:	e13ffc05 	stb	r4,-16(fp)
 201f330:	e0fffd05 	stb	r3,-12(fp)
 201f334:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201f338:	d0a7b503 	ldbu	r2,-24876(gp)
 201f33c:	10803fcc 	andi	r2,r2,255
 201f340:	10000226 	beq	r2,zero,201f34c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 201f344:	00801544 	movi	r2,85
 201f348:	00003d06 	br	201f440 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 201f34c:	e0bffb03 	ldbu	r2,-20(fp)
 201f350:	1000081e 	bne	r2,zero,201f374 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 201f354:	e0bffc03 	ldbu	r2,-16(fp)
 201f358:	1000061e 	bne	r2,zero,201f374 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 201f35c:	e0bffd03 	ldbu	r2,-12(fp)
 201f360:	1000041e 	bne	r2,zero,201f374 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 201f364:	e0bffe0b 	ldhu	r2,-8(fp)
 201f368:	1000021e 	bne	r2,zero,201f374 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 201f36c:	00801504 	movi	r2,84
 201f370:	00003306 	br	201f440 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 201f374:	e0bffc03 	ldbu	r2,-16(fp)
 201f378:	10800f30 	cmpltui	r2,r2,60
 201f37c:	1000021e 	bne	r2,zero,201f388 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 201f380:	00801444 	movi	r2,81
 201f384:	00002e06 	br	201f440 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 201f388:	e0bffd03 	ldbu	r2,-12(fp)
 201f38c:	10800f30 	cmpltui	r2,r2,60
 201f390:	1000021e 	bne	r2,zero,201f39c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 201f394:	00801484 	movi	r2,82
 201f398:	00002906 	br	201f440 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 201f39c:	e0bffe0b 	ldhu	r2,-8(fp)
 201f3a0:	1080fa30 	cmpltui	r2,r2,1000
 201f3a4:	1000021e 	bne	r2,zero,201f3b0 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 201f3a8:	008014c4 	movi	r2,83
 201f3ac:	00002406 	br	201f440 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201f3b0:	e0bffb03 	ldbu	r2,-20(fp)
 201f3b4:	10c38424 	muli	r3,r2,3600
 201f3b8:	e0bffc03 	ldbu	r2,-16(fp)
 201f3bc:	10800f24 	muli	r2,r2,60
 201f3c0:	1887883a 	add	r3,r3,r2
 201f3c4:	e0bffd03 	ldbu	r2,-12(fp)
 201f3c8:	1885883a 	add	r2,r3,r2
 201f3cc:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 201f3d0:	e0bffe0b 	ldhu	r2,-8(fp)
 201f3d4:	1080fa24 	muli	r2,r2,1000
 201f3d8:	0140fa04 	movi	r5,1000
 201f3dc:	1009883a 	mov	r4,r2
 201f3e0:	2006bac0 	call	2006bac <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201f3e4:	8085883a 	add	r2,r16,r2
 201f3e8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 201f3ec:	e0bffa17 	ldw	r2,-24(fp)
 201f3f0:	1004d43a 	srli	r2,r2,16
 201f3f4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 201f3f8:	e0bffa17 	ldw	r2,-24(fp)
 201f3fc:	10bfffcc 	andi	r2,r2,65535
 201f400:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 201f404:	e0bffa17 	ldw	r2,-24(fp)
 201f408:	10bfffcc 	andi	r2,r2,65535
 201f40c:	1009883a 	mov	r4,r2
 201f410:	201f2000 	call	201f200 <OSTimeDly>
    while (loops > 0) {
 201f414:	00000706 	br	201f434 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 201f418:	01200014 	movui	r4,32768
 201f41c:	201f2000 	call	201f200 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201f420:	01200014 	movui	r4,32768
 201f424:	201f2000 	call	201f200 <OSTimeDly>
        loops--;
 201f428:	e0bff90b 	ldhu	r2,-28(fp)
 201f42c:	10bfffc4 	addi	r2,r2,-1
 201f430:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 201f434:	e0bff90b 	ldhu	r2,-28(fp)
 201f438:	103ff71e 	bne	r2,zero,201f418 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 201f43c:	0005883a 	mov	r2,zero
}
 201f440:	e6ffff04 	addi	sp,fp,-4
 201f444:	dfc00217 	ldw	ra,8(sp)
 201f448:	df000117 	ldw	fp,4(sp)
 201f44c:	dc000017 	ldw	r16,0(sp)
 201f450:	dec00304 	addi	sp,sp,12
 201f454:	f800283a 	ret

0201f458 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 201f458:	defff504 	addi	sp,sp,-44
 201f45c:	dfc00a15 	stw	ra,40(sp)
 201f460:	df000915 	stw	fp,36(sp)
 201f464:	df000904 	addi	fp,sp,36
 201f468:	2005883a 	mov	r2,r4
 201f46c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201f470:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 201f474:	e0bfff03 	ldbu	r2,-4(fp)
 201f478:	10800530 	cmpltui	r2,r2,20
 201f47c:	1000021e 	bne	r2,zero,201f488 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201f480:	00800a84 	movi	r2,42
 201f484:	00006406 	br	201f618 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f488:	0005303a 	rdctl	r2,status
 201f48c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f490:	e0fffe17 	ldw	r3,-8(fp)
 201f494:	00bfff84 	movi	r2,-2
 201f498:	1884703a 	and	r2,r3,r2
 201f49c:	1001703a 	wrctl	status,r2
  
  return context;
 201f4a0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201f4a4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 201f4a8:	e0ffff03 	ldbu	r3,-4(fp)
 201f4ac:	008080f4 	movhi	r2,515
 201f4b0:	1085f004 	addi	r2,r2,6080
 201f4b4:	18c7883a 	add	r3,r3,r3
 201f4b8:	18c7883a 	add	r3,r3,r3
 201f4bc:	10c5883a 	add	r2,r2,r3
 201f4c0:	10800017 	ldw	r2,0(r2)
 201f4c4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 201f4c8:	e0bff917 	ldw	r2,-28(fp)
 201f4cc:	1000061e 	bne	r2,zero,201f4e8 <OSTimeDlyResume+0x90>
 201f4d0:	e0bff717 	ldw	r2,-36(fp)
 201f4d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f4d8:	e0bff817 	ldw	r2,-32(fp)
 201f4dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201f4e0:	008010c4 	movi	r2,67
 201f4e4:	00004c06 	br	201f618 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201f4e8:	e0bff917 	ldw	r2,-28(fp)
 201f4ec:	10800058 	cmpnei	r2,r2,1
 201f4f0:	1000061e 	bne	r2,zero,201f50c <OSTimeDlyResume+0xb4>
 201f4f4:	e0bff717 	ldw	r2,-36(fp)
 201f4f8:	e0bffa15 	stw	r2,-24(fp)
 201f4fc:	e0bffa17 	ldw	r2,-24(fp)
 201f500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201f504:	008010c4 	movi	r2,67
 201f508:	00004306 	br	201f618 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 201f50c:	e0bff917 	ldw	r2,-28(fp)
 201f510:	10800b8b 	ldhu	r2,46(r2)
 201f514:	10bfffcc 	andi	r2,r2,65535
 201f518:	1000061e 	bne	r2,zero,201f534 <OSTimeDlyResume+0xdc>
 201f51c:	e0bff717 	ldw	r2,-36(fp)
 201f520:	e0bffb15 	stw	r2,-20(fp)
 201f524:	e0bffb17 	ldw	r2,-20(fp)
 201f528:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 201f52c:	00801404 	movi	r2,80
 201f530:	00003906 	br	201f618 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 201f534:	e0bff917 	ldw	r2,-28(fp)
 201f538:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 201f53c:	e0bff917 	ldw	r2,-28(fp)
 201f540:	10800c03 	ldbu	r2,48(r2)
 201f544:	10803fcc 	andi	r2,r2,255
 201f548:	10800dcc 	andi	r2,r2,55
 201f54c:	10000b26 	beq	r2,zero,201f57c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201f550:	e0bff917 	ldw	r2,-28(fp)
 201f554:	10c00c03 	ldbu	r3,48(r2)
 201f558:	00bff204 	movi	r2,-56
 201f55c:	1884703a 	and	r2,r3,r2
 201f560:	1007883a 	mov	r3,r2
 201f564:	e0bff917 	ldw	r2,-28(fp)
 201f568:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201f56c:	e0bff917 	ldw	r2,-28(fp)
 201f570:	00c00044 	movi	r3,1
 201f574:	10c00c45 	stb	r3,49(r2)
 201f578:	00000206 	br	201f584 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201f57c:	e0bff917 	ldw	r2,-28(fp)
 201f580:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 201f584:	e0bff917 	ldw	r2,-28(fp)
 201f588:	10800c03 	ldbu	r2,48(r2)
 201f58c:	10803fcc 	andi	r2,r2,255
 201f590:	1080020c 	andi	r2,r2,8
 201f594:	10001b1e 	bne	r2,zero,201f604 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201f598:	e0bff917 	ldw	r2,-28(fp)
 201f59c:	10c00d83 	ldbu	r3,54(r2)
 201f5a0:	d0a7b303 	ldbu	r2,-24884(gp)
 201f5a4:	1884b03a 	or	r2,r3,r2
 201f5a8:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201f5ac:	e0bff917 	ldw	r2,-28(fp)
 201f5b0:	10800d03 	ldbu	r2,52(r2)
 201f5b4:	10c03fcc 	andi	r3,r2,255
 201f5b8:	e0bff917 	ldw	r2,-28(fp)
 201f5bc:	10800d03 	ldbu	r2,52(r2)
 201f5c0:	11003fcc 	andi	r4,r2,255
 201f5c4:	d0a7b344 	addi	r2,gp,-24883
 201f5c8:	2085883a 	add	r2,r4,r2
 201f5cc:	11000003 	ldbu	r4,0(r2)
 201f5d0:	e0bff917 	ldw	r2,-28(fp)
 201f5d4:	10800d43 	ldbu	r2,53(r2)
 201f5d8:	2084b03a 	or	r2,r4,r2
 201f5dc:	1009883a 	mov	r4,r2
 201f5e0:	d0a7b344 	addi	r2,gp,-24883
 201f5e4:	1885883a 	add	r2,r3,r2
 201f5e8:	11000005 	stb	r4,0(r2)
 201f5ec:	e0bff717 	ldw	r2,-36(fp)
 201f5f0:	e0bffc15 	stw	r2,-16(fp)
 201f5f4:	e0bffc17 	ldw	r2,-16(fp)
 201f5f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201f5fc:	2018d9c0 	call	2018d9c <OS_Sched>
 201f600:	00000406 	br	201f614 <OSTimeDlyResume+0x1bc>
 201f604:	e0bff717 	ldw	r2,-36(fp)
 201f608:	e0bffd15 	stw	r2,-12(fp)
 201f60c:	e0bffd17 	ldw	r2,-12(fp)
 201f610:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201f614:	0005883a 	mov	r2,zero
}
 201f618:	e037883a 	mov	sp,fp
 201f61c:	dfc00117 	ldw	ra,4(sp)
 201f620:	df000017 	ldw	fp,0(sp)
 201f624:	dec00204 	addi	sp,sp,8
 201f628:	f800283a 	ret

0201f62c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201f62c:	defffb04 	addi	sp,sp,-20
 201f630:	df000415 	stw	fp,16(sp)
 201f634:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f638:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f63c:	0005303a 	rdctl	r2,status
 201f640:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f644:	e0fffe17 	ldw	r3,-8(fp)
 201f648:	00bfff84 	movi	r2,-2
 201f64c:	1884703a 	and	r2,r3,r2
 201f650:	1001703a 	wrctl	status,r2
  
  return context;
 201f654:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201f658:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 201f65c:	d0a7b717 	ldw	r2,-24868(gp)
 201f660:	e0bffd15 	stw	r2,-12(fp)
 201f664:	e0bffc17 	ldw	r2,-16(fp)
 201f668:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f66c:	e0bfff17 	ldw	r2,-4(fp)
 201f670:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201f674:	e0bffd17 	ldw	r2,-12(fp)
}
 201f678:	e037883a 	mov	sp,fp
 201f67c:	df000017 	ldw	fp,0(sp)
 201f680:	dec00104 	addi	sp,sp,4
 201f684:	f800283a 	ret

0201f688 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201f688:	defffb04 	addi	sp,sp,-20
 201f68c:	df000415 	stw	fp,16(sp)
 201f690:	df000404 	addi	fp,sp,16
 201f694:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f698:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f69c:	0005303a 	rdctl	r2,status
 201f6a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f6a4:	e0fffd17 	ldw	r3,-12(fp)
 201f6a8:	00bfff84 	movi	r2,-2
 201f6ac:	1884703a 	and	r2,r3,r2
 201f6b0:	1001703a 	wrctl	status,r2
  
  return context;
 201f6b4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201f6b8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 201f6bc:	e0bfff17 	ldw	r2,-4(fp)
 201f6c0:	d0a7b715 	stw	r2,-24868(gp)
 201f6c4:	e0bffc17 	ldw	r2,-16(fp)
 201f6c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f6cc:	e0bffe17 	ldw	r2,-8(fp)
 201f6d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201f6d4:	0001883a 	nop
 201f6d8:	e037883a 	mov	sp,fp
 201f6dc:	df000017 	ldw	fp,0(sp)
 201f6e0:	dec00104 	addi	sp,sp,4
 201f6e4:	f800283a 	ret

0201f6e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201f6e8:	defffd04 	addi	sp,sp,-12
 201f6ec:	dfc00215 	stw	ra,8(sp)
 201f6f0:	df000115 	stw	fp,4(sp)
 201f6f4:	df000104 	addi	fp,sp,4
 201f6f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201f6fc:	d1603804 	addi	r5,gp,-32544
 201f700:	e13fff17 	ldw	r4,-4(fp)
 201f704:	2020b340 	call	2020b34 <alt_dev_llist_insert>
}
 201f708:	e037883a 	mov	sp,fp
 201f70c:	dfc00117 	ldw	ra,4(sp)
 201f710:	df000017 	ldw	fp,0(sp)
 201f714:	dec00204 	addi	sp,sp,8
 201f718:	f800283a 	ret

0201f71c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201f71c:	defffd04 	addi	sp,sp,-12
 201f720:	dfc00215 	stw	ra,8(sp)
 201f724:	df000115 	stw	fp,4(sp)
 201f728:	df000104 	addi	fp,sp,4
 201f72c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201f730:	20214140 	call	2021414 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201f734:	00800044 	movi	r2,1
 201f738:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201f73c:	0001883a 	nop
 201f740:	e037883a 	mov	sp,fp
 201f744:	dfc00117 	ldw	ra,4(sp)
 201f748:	df000017 	ldw	fp,0(sp)
 201f74c:	dec00204 	addi	sp,sp,8
 201f750:	f800283a 	ret

0201f754 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201f754:	defffe04 	addi	sp,sp,-8
 201f758:	dfc00115 	stw	ra,4(sp)
 201f75c:	df000015 	stw	fp,0(sp)
 201f760:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 201f764:	01c0fa04 	movi	r7,1000
 201f768:	01800044 	movi	r6,1
 201f76c:	000b883a 	mov	r5,zero
 201f770:	0009883a 	mov	r4,zero
 201f774:	20205600 	call	2020560 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201f778:	000d883a 	mov	r6,zero
 201f77c:	000b883a 	mov	r5,zero
 201f780:	010080b4 	movhi	r4,514
 201f784:	210d9604 	addi	r4,r4,13912
 201f788:	201f9240 	call	201f924 <altera_avalon_jtag_uart_init>
 201f78c:	010080b4 	movhi	r4,514
 201f790:	210d8c04 	addi	r4,r4,13872
 201f794:	201f6e80 	call	201f6e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 201f798:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
 201f79c:	010080b4 	movhi	r4,514
 201f7a0:	2111a704 	addi	r4,r4,18076
 201f7a4:	201f6e80 	call	201f6e8 <alt_dev_reg>
}
 201f7a8:	0001883a 	nop
 201f7ac:	e037883a 	mov	sp,fp
 201f7b0:	dfc00117 	ldw	ra,4(sp)
 201f7b4:	df000017 	ldw	fp,0(sp)
 201f7b8:	dec00204 	addi	sp,sp,8
 201f7bc:	f800283a 	ret

0201f7c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201f7c0:	defffa04 	addi	sp,sp,-24
 201f7c4:	dfc00515 	stw	ra,20(sp)
 201f7c8:	df000415 	stw	fp,16(sp)
 201f7cc:	df000404 	addi	fp,sp,16
 201f7d0:	e13ffd15 	stw	r4,-12(fp)
 201f7d4:	e17ffe15 	stw	r5,-8(fp)
 201f7d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201f7dc:	e0bffd17 	ldw	r2,-12(fp)
 201f7e0:	10800017 	ldw	r2,0(r2)
 201f7e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201f7e8:	e0bffc17 	ldw	r2,-16(fp)
 201f7ec:	10c00a04 	addi	r3,r2,40
 201f7f0:	e0bffd17 	ldw	r2,-12(fp)
 201f7f4:	10800217 	ldw	r2,8(r2)
 201f7f8:	100f883a 	mov	r7,r2
 201f7fc:	e1bfff17 	ldw	r6,-4(fp)
 201f800:	e17ffe17 	ldw	r5,-8(fp)
 201f804:	1809883a 	mov	r4,r3
 201f808:	201ff640 	call	201ff64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 201f80c:	e037883a 	mov	sp,fp
 201f810:	dfc00117 	ldw	ra,4(sp)
 201f814:	df000017 	ldw	fp,0(sp)
 201f818:	dec00204 	addi	sp,sp,8
 201f81c:	f800283a 	ret

0201f820 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201f820:	defffa04 	addi	sp,sp,-24
 201f824:	dfc00515 	stw	ra,20(sp)
 201f828:	df000415 	stw	fp,16(sp)
 201f82c:	df000404 	addi	fp,sp,16
 201f830:	e13ffd15 	stw	r4,-12(fp)
 201f834:	e17ffe15 	stw	r5,-8(fp)
 201f838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201f83c:	e0bffd17 	ldw	r2,-12(fp)
 201f840:	10800017 	ldw	r2,0(r2)
 201f844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201f848:	e0bffc17 	ldw	r2,-16(fp)
 201f84c:	10c00a04 	addi	r3,r2,40
 201f850:	e0bffd17 	ldw	r2,-12(fp)
 201f854:	10800217 	ldw	r2,8(r2)
 201f858:	100f883a 	mov	r7,r2
 201f85c:	e1bfff17 	ldw	r6,-4(fp)
 201f860:	e17ffe17 	ldw	r5,-8(fp)
 201f864:	1809883a 	mov	r4,r3
 201f868:	20202200 	call	2020220 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201f86c:	e037883a 	mov	sp,fp
 201f870:	dfc00117 	ldw	ra,4(sp)
 201f874:	df000017 	ldw	fp,0(sp)
 201f878:	dec00204 	addi	sp,sp,8
 201f87c:	f800283a 	ret

0201f880 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 201f880:	defffc04 	addi	sp,sp,-16
 201f884:	dfc00315 	stw	ra,12(sp)
 201f888:	df000215 	stw	fp,8(sp)
 201f88c:	df000204 	addi	fp,sp,8
 201f890:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201f894:	e0bfff17 	ldw	r2,-4(fp)
 201f898:	10800017 	ldw	r2,0(r2)
 201f89c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 201f8a0:	e0bffe17 	ldw	r2,-8(fp)
 201f8a4:	10c00a04 	addi	r3,r2,40
 201f8a8:	e0bfff17 	ldw	r2,-4(fp)
 201f8ac:	10800217 	ldw	r2,8(r2)
 201f8b0:	100b883a 	mov	r5,r2
 201f8b4:	1809883a 	mov	r4,r3
 201f8b8:	201fe0c0 	call	201fe0c <altera_avalon_jtag_uart_close>
}
 201f8bc:	e037883a 	mov	sp,fp
 201f8c0:	dfc00117 	ldw	ra,4(sp)
 201f8c4:	df000017 	ldw	fp,0(sp)
 201f8c8:	dec00204 	addi	sp,sp,8
 201f8cc:	f800283a 	ret

0201f8d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201f8d0:	defffa04 	addi	sp,sp,-24
 201f8d4:	dfc00515 	stw	ra,20(sp)
 201f8d8:	df000415 	stw	fp,16(sp)
 201f8dc:	df000404 	addi	fp,sp,16
 201f8e0:	e13ffd15 	stw	r4,-12(fp)
 201f8e4:	e17ffe15 	stw	r5,-8(fp)
 201f8e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 201f8ec:	e0bffd17 	ldw	r2,-12(fp)
 201f8f0:	10800017 	ldw	r2,0(r2)
 201f8f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201f8f8:	e0bffc17 	ldw	r2,-16(fp)
 201f8fc:	10800a04 	addi	r2,r2,40
 201f900:	e1bfff17 	ldw	r6,-4(fp)
 201f904:	e17ffe17 	ldw	r5,-8(fp)
 201f908:	1009883a 	mov	r4,r2
 201f90c:	201fe740 	call	201fe74 <altera_avalon_jtag_uart_ioctl>
}
 201f910:	e037883a 	mov	sp,fp
 201f914:	dfc00117 	ldw	ra,4(sp)
 201f918:	df000017 	ldw	fp,0(sp)
 201f91c:	dec00204 	addi	sp,sp,8
 201f920:	f800283a 	ret

0201f924 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201f924:	defff204 	addi	sp,sp,-56
 201f928:	dfc00d15 	stw	ra,52(sp)
 201f92c:	df000c15 	stw	fp,48(sp)
 201f930:	df000c04 	addi	fp,sp,48
 201f934:	e13ff915 	stw	r4,-28(fp)
 201f938:	e17ffa15 	stw	r5,-24(fp)
 201f93c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201f940:	e0bff917 	ldw	r2,-28(fp)
 201f944:	10800c04 	addi	r2,r2,48
 201f948:	e0bff415 	stw	r2,-48(fp)
 201f94c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 201f950:	e0bff80b 	ldhu	r2,-32(fp)
 201f954:	e0fff884 	addi	r3,fp,-30
 201f958:	180b883a 	mov	r5,r3
 201f95c:	1009883a 	mov	r4,r2
 201f960:	20199080 	call	2019908 <OSFlagCreate>
 201f964:	1007883a 	mov	r3,r2
 201f968:	e0bff417 	ldw	r2,-48(fp)
 201f96c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 201f970:	e0bff917 	ldw	r2,-28(fp)
 201f974:	10800a04 	addi	r2,r2,40
 201f978:	e0bff515 	stw	r2,-44(fp)
 201f97c:	00800044 	movi	r2,1
 201f980:	e0bff78d 	sth	r2,-34(fp)
 201f984:	e0bff78b 	ldhu	r2,-34(fp)
 201f988:	1009883a 	mov	r4,r2
 201f98c:	201d0e40 	call	201d0e4 <OSSemCreate>
 201f990:	1007883a 	mov	r3,r2
 201f994:	e0bff517 	ldw	r2,-44(fp)
 201f998:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 201f99c:	e0bff917 	ldw	r2,-28(fp)
 201f9a0:	10800b04 	addi	r2,r2,44
 201f9a4:	e0bff615 	stw	r2,-40(fp)
 201f9a8:	00800044 	movi	r2,1
 201f9ac:	e0bff70d 	sth	r2,-36(fp)
 201f9b0:	e0bff70b 	ldhu	r2,-36(fp)
 201f9b4:	1009883a 	mov	r4,r2
 201f9b8:	201d0e40 	call	201d0e4 <OSSemCreate>
 201f9bc:	1007883a 	mov	r3,r2
 201f9c0:	e0bff617 	ldw	r2,-40(fp)
 201f9c4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201f9c8:	e0bff917 	ldw	r2,-28(fp)
 201f9cc:	00c00044 	movi	r3,1
 201f9d0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 201f9d4:	e0bff917 	ldw	r2,-28(fp)
 201f9d8:	10800017 	ldw	r2,0(r2)
 201f9dc:	10800104 	addi	r2,r2,4
 201f9e0:	1007883a 	mov	r3,r2
 201f9e4:	e0bff917 	ldw	r2,-28(fp)
 201f9e8:	10800817 	ldw	r2,32(r2)
 201f9ec:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 201f9f0:	e0bffb17 	ldw	r2,-20(fp)
 201f9f4:	018080b4 	movhi	r6,514
 201f9f8:	31be9804 	addi	r6,r6,-1440
 201f9fc:	e17ff917 	ldw	r5,-28(fp)
 201fa00:	1009883a 	mov	r4,r2
 201fa04:	2020e9c0 	call	2020e9c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201fa08:	e0bff917 	ldw	r2,-28(fp)
 201fa0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201fa10:	e0bff917 	ldw	r2,-28(fp)
 201fa14:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201fa18:	d0e7bc17 	ldw	r3,-24848(gp)
 201fa1c:	e1fff917 	ldw	r7,-28(fp)
 201fa20:	018080b4 	movhi	r6,514
 201fa24:	31bf4204 	addi	r6,r6,-760
 201fa28:	180b883a 	mov	r5,r3
 201fa2c:	1009883a 	mov	r4,r2
 201fa30:	20209840 	call	2020984 <alt_alarm_start>
 201fa34:	1000040e 	bge	r2,zero,201fa48 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201fa38:	e0fff917 	ldw	r3,-28(fp)
 201fa3c:	00a00034 	movhi	r2,32768
 201fa40:	10bfffc4 	addi	r2,r2,-1
 201fa44:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201fa48:	0001883a 	nop
 201fa4c:	e037883a 	mov	sp,fp
 201fa50:	dfc00117 	ldw	ra,4(sp)
 201fa54:	df000017 	ldw	fp,0(sp)
 201fa58:	dec00204 	addi	sp,sp,8
 201fa5c:	f800283a 	ret

0201fa60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201fa60:	defff104 	addi	sp,sp,-60
 201fa64:	dfc00e15 	stw	ra,56(sp)
 201fa68:	df000d15 	stw	fp,52(sp)
 201fa6c:	df000d04 	addi	fp,sp,52
 201fa70:	e13ffe15 	stw	r4,-8(fp)
 201fa74:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201fa78:	e0bffe17 	ldw	r2,-8(fp)
 201fa7c:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
 201fa80:	e0bff517 	ldw	r2,-44(fp)
 201fa84:	10800017 	ldw	r2,0(r2)
 201fa88:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201fa8c:	e0bff617 	ldw	r2,-40(fp)
 201fa90:	10800104 	addi	r2,r2,4
 201fa94:	10800037 	ldwio	r2,0(r2)
 201fa98:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201fa9c:	e0bff717 	ldw	r2,-36(fp)
 201faa0:	1080c00c 	andi	r2,r2,768
 201faa4:	10009126 	beq	r2,zero,201fcec <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201faa8:	e0bff717 	ldw	r2,-36(fp)
 201faac:	1080400c 	andi	r2,r2,256
 201fab0:	10004726 	beq	r2,zero,201fbd0 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201fab4:	00800074 	movhi	r2,1
 201fab8:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201fabc:	e0bff517 	ldw	r2,-44(fp)
 201fac0:	10800d17 	ldw	r2,52(r2)
 201fac4:	10800044 	addi	r2,r2,1
 201fac8:	1081ffcc 	andi	r2,r2,2047
 201facc:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 201fad0:	e0bff517 	ldw	r2,-44(fp)
 201fad4:	10c00e17 	ldw	r3,56(r2)
 201fad8:	e0bff817 	ldw	r2,-32(fp)
 201fadc:	18802726 	beq	r3,r2,201fb7c <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201fae0:	e0bff617 	ldw	r2,-40(fp)
 201fae4:	10800037 	ldwio	r2,0(r2)
 201fae8:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201faec:	e0bff317 	ldw	r2,-52(fp)
 201faf0:	10a0000c 	andi	r2,r2,32768
 201faf4:	10002326 	beq	r2,zero,201fb84 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201faf8:	e0bff517 	ldw	r2,-44(fp)
 201fafc:	10800d17 	ldw	r2,52(r2)
 201fb00:	e0fff317 	ldw	r3,-52(fp)
 201fb04:	1809883a 	mov	r4,r3
 201fb08:	e0fff517 	ldw	r3,-44(fp)
 201fb0c:	1885883a 	add	r2,r3,r2
 201fb10:	10801104 	addi	r2,r2,68
 201fb14:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201fb18:	e0bff517 	ldw	r2,-44(fp)
 201fb1c:	10800d17 	ldw	r2,52(r2)
 201fb20:	10800044 	addi	r2,r2,1
 201fb24:	10c1ffcc 	andi	r3,r2,2047
 201fb28:	e0bff517 	ldw	r2,-44(fp)
 201fb2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 201fb30:	e0bff517 	ldw	r2,-44(fp)
 201fb34:	10800c17 	ldw	r2,48(r2)
 201fb38:	e0bffa15 	stw	r2,-24(fp)
 201fb3c:	00800044 	movi	r2,1
 201fb40:	e0bffb0d 	sth	r2,-20(fp)
 201fb44:	00800044 	movi	r2,1
 201fb48:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201fb4c:	d0a7a743 	ldbu	r2,-24931(gp)
 201fb50:	10803fcc 	andi	r2,r2,255
 201fb54:	103fd926 	beq	r2,zero,201fabc <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
 201fb58:	e0bffb0b 	ldhu	r2,-20(fp)
 201fb5c:	e0fffb83 	ldbu	r3,-18(fp)
 201fb60:	e13ffcc4 	addi	r4,fp,-13
 201fb64:	200f883a 	mov	r7,r4
 201fb68:	180d883a 	mov	r6,r3
 201fb6c:	100b883a 	mov	r5,r2
 201fb70:	e13ffa17 	ldw	r4,-24(fp)
 201fb74:	201a4e40 	call	201a4e4 <OSFlagPost>
      }
 201fb78:	003fd006 	br	201fabc <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 201fb7c:	0001883a 	nop
 201fb80:	00000106 	br	201fb88 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 201fb84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 201fb88:	e0bff317 	ldw	r2,-52(fp)
 201fb8c:	10bfffec 	andhi	r2,r2,65535
 201fb90:	10000f26 	beq	r2,zero,201fbd0 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201fb94:	e0bff517 	ldw	r2,-44(fp)
 201fb98:	10c00817 	ldw	r3,32(r2)
 201fb9c:	00bfff84 	movi	r2,-2
 201fba0:	1886703a 	and	r3,r3,r2
 201fba4:	e0bff517 	ldw	r2,-44(fp)
 201fba8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201fbac:	e0bff617 	ldw	r2,-40(fp)
 201fbb0:	10800104 	addi	r2,r2,4
 201fbb4:	1007883a 	mov	r3,r2
 201fbb8:	e0bff517 	ldw	r2,-44(fp)
 201fbbc:	10800817 	ldw	r2,32(r2)
 201fbc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201fbc4:	e0bff617 	ldw	r2,-40(fp)
 201fbc8:	10800104 	addi	r2,r2,4
 201fbcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201fbd0:	e0bff717 	ldw	r2,-36(fp)
 201fbd4:	1080800c 	andi	r2,r2,512
 201fbd8:	103fac26 	beq	r2,zero,201fa8c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201fbdc:	e0bff717 	ldw	r2,-36(fp)
 201fbe0:	1004d43a 	srli	r2,r2,16
 201fbe4:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201fbe8:	00002606 	br	201fc84 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201fbec:	e0bff617 	ldw	r2,-40(fp)
 201fbf0:	e0fff517 	ldw	r3,-44(fp)
 201fbf4:	18c01017 	ldw	r3,64(r3)
 201fbf8:	e13ff517 	ldw	r4,-44(fp)
 201fbfc:	20c7883a 	add	r3,r4,r3
 201fc00:	18c21104 	addi	r3,r3,2116
 201fc04:	18c00003 	ldbu	r3,0(r3)
 201fc08:	18c03fcc 	andi	r3,r3,255
 201fc0c:	18c0201c 	xori	r3,r3,128
 201fc10:	18ffe004 	addi	r3,r3,-128
 201fc14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201fc18:	e0bff517 	ldw	r2,-44(fp)
 201fc1c:	10801017 	ldw	r2,64(r2)
 201fc20:	10800044 	addi	r2,r2,1
 201fc24:	10c1ffcc 	andi	r3,r2,2047
 201fc28:	e0bff517 	ldw	r2,-44(fp)
 201fc2c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 201fc30:	e0bff517 	ldw	r2,-44(fp)
 201fc34:	10800c17 	ldw	r2,48(r2)
 201fc38:	e0bff915 	stw	r2,-28(fp)
 201fc3c:	00800084 	movi	r2,2
 201fc40:	e0bffc0d 	sth	r2,-16(fp)
 201fc44:	00800044 	movi	r2,1
 201fc48:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201fc4c:	d0a7a743 	ldbu	r2,-24931(gp)
 201fc50:	10803fcc 	andi	r2,r2,255
 201fc54:	10000826 	beq	r2,zero,201fc78 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
 201fc58:	e0bffc0b 	ldhu	r2,-16(fp)
 201fc5c:	e0fffc83 	ldbu	r3,-14(fp)
 201fc60:	e13ffd04 	addi	r4,fp,-12
 201fc64:	200f883a 	mov	r7,r4
 201fc68:	180d883a 	mov	r6,r3
 201fc6c:	100b883a 	mov	r5,r2
 201fc70:	e13ff917 	ldw	r4,-28(fp)
 201fc74:	201a4e40 	call	201a4e4 <OSFlagPost>

        space--;
 201fc78:	e0bff417 	ldw	r2,-48(fp)
 201fc7c:	10bfffc4 	addi	r2,r2,-1
 201fc80:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 201fc84:	e0bff417 	ldw	r2,-48(fp)
 201fc88:	10000526 	beq	r2,zero,201fca0 <altera_avalon_jtag_uart_irq+0x240>
 201fc8c:	e0bff517 	ldw	r2,-44(fp)
 201fc90:	10c01017 	ldw	r3,64(r2)
 201fc94:	e0bff517 	ldw	r2,-44(fp)
 201fc98:	10800f17 	ldw	r2,60(r2)
 201fc9c:	18bfd31e 	bne	r3,r2,201fbec <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 201fca0:	e0bff417 	ldw	r2,-48(fp)
 201fca4:	103f7926 	beq	r2,zero,201fa8c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201fca8:	e0bff517 	ldw	r2,-44(fp)
 201fcac:	10c00817 	ldw	r3,32(r2)
 201fcb0:	00bfff44 	movi	r2,-3
 201fcb4:	1886703a 	and	r3,r3,r2
 201fcb8:	e0bff517 	ldw	r2,-44(fp)
 201fcbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201fcc0:	e0bff517 	ldw	r2,-44(fp)
 201fcc4:	10800017 	ldw	r2,0(r2)
 201fcc8:	10800104 	addi	r2,r2,4
 201fccc:	1007883a 	mov	r3,r2
 201fcd0:	e0bff517 	ldw	r2,-44(fp)
 201fcd4:	10800817 	ldw	r2,32(r2)
 201fcd8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201fcdc:	e0bff617 	ldw	r2,-40(fp)
 201fce0:	10800104 	addi	r2,r2,4
 201fce4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201fce8:	003f6806 	br	201fa8c <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 201fcec:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 201fcf0:	0001883a 	nop
 201fcf4:	e037883a 	mov	sp,fp
 201fcf8:	dfc00117 	ldw	ra,4(sp)
 201fcfc:	df000017 	ldw	fp,0(sp)
 201fd00:	dec00204 	addi	sp,sp,8
 201fd04:	f800283a 	ret

0201fd08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201fd08:	defff904 	addi	sp,sp,-28
 201fd0c:	dfc00615 	stw	ra,24(sp)
 201fd10:	df000515 	stw	fp,20(sp)
 201fd14:	df000504 	addi	fp,sp,20
 201fd18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201fd1c:	e0bfff17 	ldw	r2,-4(fp)
 201fd20:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201fd24:	e0bffb17 	ldw	r2,-20(fp)
 201fd28:	10800017 	ldw	r2,0(r2)
 201fd2c:	10800104 	addi	r2,r2,4
 201fd30:	10800037 	ldwio	r2,0(r2)
 201fd34:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201fd38:	e0bffc17 	ldw	r2,-16(fp)
 201fd3c:	1081000c 	andi	r2,r2,1024
 201fd40:	10000b26 	beq	r2,zero,201fd70 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 201fd44:	e0bffb17 	ldw	r2,-20(fp)
 201fd48:	10800017 	ldw	r2,0(r2)
 201fd4c:	10800104 	addi	r2,r2,4
 201fd50:	1007883a 	mov	r3,r2
 201fd54:	e0bffb17 	ldw	r2,-20(fp)
 201fd58:	10800817 	ldw	r2,32(r2)
 201fd5c:	10810014 	ori	r2,r2,1024
 201fd60:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 201fd64:	e0bffb17 	ldw	r2,-20(fp)
 201fd68:	10000915 	stw	zero,36(r2)
 201fd6c:	00002106 	br	201fdf4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201fd70:	e0bffb17 	ldw	r2,-20(fp)
 201fd74:	10c00917 	ldw	r3,36(r2)
 201fd78:	00a00034 	movhi	r2,32768
 201fd7c:	10bfff04 	addi	r2,r2,-4
 201fd80:	10c01c36 	bltu	r2,r3,201fdf4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 201fd84:	e0bffb17 	ldw	r2,-20(fp)
 201fd88:	10800917 	ldw	r2,36(r2)
 201fd8c:	10c00044 	addi	r3,r2,1
 201fd90:	e0bffb17 	ldw	r2,-20(fp)
 201fd94:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 201fd98:	e0bffb17 	ldw	r2,-20(fp)
 201fd9c:	10c00917 	ldw	r3,36(r2)
 201fda0:	e0bffb17 	ldw	r2,-20(fp)
 201fda4:	10800117 	ldw	r2,4(r2)
 201fda8:	18801236 	bltu	r3,r2,201fdf4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201fdac:	e0bffb17 	ldw	r2,-20(fp)
 201fdb0:	10800c17 	ldw	r2,48(r2)
 201fdb4:	e0bffd15 	stw	r2,-12(fp)
 201fdb8:	00800104 	movi	r2,4
 201fdbc:	e0bffe0d 	sth	r2,-8(fp)
 201fdc0:	00800044 	movi	r2,1
 201fdc4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201fdc8:	d0a7a743 	ldbu	r2,-24931(gp)
 201fdcc:	10803fcc 	andi	r2,r2,255
 201fdd0:	10000826 	beq	r2,zero,201fdf4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 201fdd4:	e0bffe0b 	ldhu	r2,-8(fp)
 201fdd8:	e0fffe83 	ldbu	r3,-6(fp)
 201fddc:	e13ffec4 	addi	r4,fp,-5
 201fde0:	200f883a 	mov	r7,r4
 201fde4:	180d883a 	mov	r6,r3
 201fde8:	100b883a 	mov	r5,r2
 201fdec:	e13ffd17 	ldw	r4,-12(fp)
 201fdf0:	201a4e40 	call	201a4e4 <OSFlagPost>
 201fdf4:	d0a7bc17 	ldw	r2,-24848(gp)
    }
  }

  return alt_ticks_per_second();
}
 201fdf8:	e037883a 	mov	sp,fp
 201fdfc:	dfc00117 	ldw	ra,4(sp)
 201fe00:	df000017 	ldw	fp,0(sp)
 201fe04:	dec00204 	addi	sp,sp,8
 201fe08:	f800283a 	ret

0201fe0c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 201fe0c:	defffd04 	addi	sp,sp,-12
 201fe10:	df000215 	stw	fp,8(sp)
 201fe14:	df000204 	addi	fp,sp,8
 201fe18:	e13ffe15 	stw	r4,-8(fp)
 201fe1c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201fe20:	00000506 	br	201fe38 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 201fe24:	e0bfff17 	ldw	r2,-4(fp)
 201fe28:	1090000c 	andi	r2,r2,16384
 201fe2c:	10000226 	beq	r2,zero,201fe38 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201fe30:	00bffd44 	movi	r2,-11
 201fe34:	00000b06 	br	201fe64 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201fe38:	e0bffe17 	ldw	r2,-8(fp)
 201fe3c:	10c01017 	ldw	r3,64(r2)
 201fe40:	e0bffe17 	ldw	r2,-8(fp)
 201fe44:	10800f17 	ldw	r2,60(r2)
 201fe48:	18800526 	beq	r3,r2,201fe60 <altera_avalon_jtag_uart_close+0x54>
 201fe4c:	e0bffe17 	ldw	r2,-8(fp)
 201fe50:	10c00917 	ldw	r3,36(r2)
 201fe54:	e0bffe17 	ldw	r2,-8(fp)
 201fe58:	10800117 	ldw	r2,4(r2)
 201fe5c:	18bff136 	bltu	r3,r2,201fe24 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201fe60:	0005883a 	mov	r2,zero
}
 201fe64:	e037883a 	mov	sp,fp
 201fe68:	df000017 	ldw	fp,0(sp)
 201fe6c:	dec00104 	addi	sp,sp,4
 201fe70:	f800283a 	ret

0201fe74 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201fe74:	defffa04 	addi	sp,sp,-24
 201fe78:	df000515 	stw	fp,20(sp)
 201fe7c:	df000504 	addi	fp,sp,20
 201fe80:	e13ffd15 	stw	r4,-12(fp)
 201fe84:	e17ffe15 	stw	r5,-8(fp)
 201fe88:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 201fe8c:	00bff9c4 	movi	r2,-25
 201fe90:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 201fe94:	e0bffe17 	ldw	r2,-8(fp)
 201fe98:	10da8060 	cmpeqi	r3,r2,27137
 201fe9c:	1800031e 	bne	r3,zero,201feac <altera_avalon_jtag_uart_ioctl+0x38>
 201fea0:	109a80a0 	cmpeqi	r2,r2,27138
 201fea4:	1000181e 	bne	r2,zero,201ff08 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 201fea8:	00002906 	br	201ff50 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201feac:	e0bffd17 	ldw	r2,-12(fp)
 201feb0:	10c00117 	ldw	r3,4(r2)
 201feb4:	00a00034 	movhi	r2,32768
 201feb8:	10bfffc4 	addi	r2,r2,-1
 201febc:	18802126 	beq	r3,r2,201ff44 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 201fec0:	e0bfff17 	ldw	r2,-4(fp)
 201fec4:	10800017 	ldw	r2,0(r2)
 201fec8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201fecc:	e0bffc17 	ldw	r2,-16(fp)
 201fed0:	10800090 	cmplti	r2,r2,2
 201fed4:	1000061e 	bne	r2,zero,201fef0 <altera_avalon_jtag_uart_ioctl+0x7c>
 201fed8:	e0fffc17 	ldw	r3,-16(fp)
 201fedc:	00a00034 	movhi	r2,32768
 201fee0:	10bfffc4 	addi	r2,r2,-1
 201fee4:	18800226 	beq	r3,r2,201fef0 <altera_avalon_jtag_uart_ioctl+0x7c>
 201fee8:	e0bffc17 	ldw	r2,-16(fp)
 201feec:	00000206 	br	201fef8 <altera_avalon_jtag_uart_ioctl+0x84>
 201fef0:	00a00034 	movhi	r2,32768
 201fef4:	10bfff84 	addi	r2,r2,-2
 201fef8:	e0fffd17 	ldw	r3,-12(fp)
 201fefc:	18800115 	stw	r2,4(r3)
      rc = 0;
 201ff00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201ff04:	00000f06 	br	201ff44 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201ff08:	e0bffd17 	ldw	r2,-12(fp)
 201ff0c:	10c00117 	ldw	r3,4(r2)
 201ff10:	00a00034 	movhi	r2,32768
 201ff14:	10bfffc4 	addi	r2,r2,-1
 201ff18:	18800c26 	beq	r3,r2,201ff4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201ff1c:	e0bffd17 	ldw	r2,-12(fp)
 201ff20:	10c00917 	ldw	r3,36(r2)
 201ff24:	e0bffd17 	ldw	r2,-12(fp)
 201ff28:	10800117 	ldw	r2,4(r2)
 201ff2c:	1885803a 	cmpltu	r2,r3,r2
 201ff30:	10c03fcc 	andi	r3,r2,255
 201ff34:	e0bfff17 	ldw	r2,-4(fp)
 201ff38:	10c00015 	stw	r3,0(r2)
      rc = 0;
 201ff3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201ff40:	00000206 	br	201ff4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201ff44:	0001883a 	nop
 201ff48:	00000106 	br	201ff50 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 201ff4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201ff50:	e0bffb17 	ldw	r2,-20(fp)
}
 201ff54:	e037883a 	mov	sp,fp
 201ff58:	df000017 	ldw	fp,0(sp)
 201ff5c:	dec00104 	addi	sp,sp,4
 201ff60:	f800283a 	ret

0201ff64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201ff64:	deffed04 	addi	sp,sp,-76
 201ff68:	dfc01215 	stw	ra,72(sp)
 201ff6c:	df001115 	stw	fp,68(sp)
 201ff70:	df001104 	addi	fp,sp,68
 201ff74:	e13ffc15 	stw	r4,-16(fp)
 201ff78:	e17ffd15 	stw	r5,-12(fp)
 201ff7c:	e1bffe15 	stw	r6,-8(fp)
 201ff80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 201ff84:	e0bffd17 	ldw	r2,-12(fp)
 201ff88:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201ff8c:	e0bffc17 	ldw	r2,-16(fp)
 201ff90:	10800a17 	ldw	r2,40(r2)
 201ff94:	e0bff815 	stw	r2,-32(fp)
 201ff98:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201ff9c:	e0bff90b 	ldhu	r2,-28(fp)
 201ffa0:	e0fffb04 	addi	r3,fp,-20
 201ffa4:	180d883a 	mov	r6,r3
 201ffa8:	100b883a 	mov	r5,r2
 201ffac:	e13ff817 	ldw	r4,-32(fp)
 201ffb0:	201d3fc0 	call	201d3fc <OSSemPend>

  while (space > 0)
 201ffb4:	00006106 	br	202013c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201ffb8:	e0bffc17 	ldw	r2,-16(fp)
 201ffbc:	10800d17 	ldw	r2,52(r2)
 201ffc0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 201ffc4:	e0bffc17 	ldw	r2,-16(fp)
 201ffc8:	10800e17 	ldw	r2,56(r2)
 201ffcc:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 201ffd0:	e0fff317 	ldw	r3,-52(fp)
 201ffd4:	e0bff417 	ldw	r2,-48(fp)
 201ffd8:	18800536 	bltu	r3,r2,201fff0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 201ffdc:	e0fff317 	ldw	r3,-52(fp)
 201ffe0:	e0bff417 	ldw	r2,-48(fp)
 201ffe4:	1885c83a 	sub	r2,r3,r2
 201ffe8:	e0bff115 	stw	r2,-60(fp)
 201ffec:	00000406 	br	2020000 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201fff0:	00c20004 	movi	r3,2048
 201fff4:	e0bff417 	ldw	r2,-48(fp)
 201fff8:	1885c83a 	sub	r2,r3,r2
 201fffc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 2020000:	e0bff117 	ldw	r2,-60(fp)
 2020004:	10001e26 	beq	r2,zero,2020080 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 2020008:	e0fffe17 	ldw	r3,-8(fp)
 202000c:	e0bff117 	ldw	r2,-60(fp)
 2020010:	1880022e 	bgeu	r3,r2,202001c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 2020014:	e0bffe17 	ldw	r2,-8(fp)
 2020018:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 202001c:	e0bffc17 	ldw	r2,-16(fp)
 2020020:	10c01104 	addi	r3,r2,68
 2020024:	e0bff417 	ldw	r2,-48(fp)
 2020028:	1885883a 	add	r2,r3,r2
 202002c:	e1bff117 	ldw	r6,-60(fp)
 2020030:	100b883a 	mov	r5,r2
 2020034:	e13ff017 	ldw	r4,-64(fp)
 2020038:	20093a40 	call	20093a4 <memcpy>
      ptr   += n;
 202003c:	e0fff017 	ldw	r3,-64(fp)
 2020040:	e0bff117 	ldw	r2,-60(fp)
 2020044:	1885883a 	add	r2,r3,r2
 2020048:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 202004c:	e0fffe17 	ldw	r3,-8(fp)
 2020050:	e0bff117 	ldw	r2,-60(fp)
 2020054:	1885c83a 	sub	r2,r3,r2
 2020058:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 202005c:	e0fff417 	ldw	r3,-48(fp)
 2020060:	e0bff117 	ldw	r2,-60(fp)
 2020064:	1885883a 	add	r2,r3,r2
 2020068:	10c1ffcc 	andi	r3,r2,2047
 202006c:	e0bffc17 	ldw	r2,-16(fp)
 2020070:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 2020074:	e0bffe17 	ldw	r2,-8(fp)
 2020078:	00bfcf16 	blt	zero,r2,201ffb8 <altera_avalon_jtag_uart_read+0x54>
 202007c:	00000106 	br	2020084 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2020080:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2020084:	e0fff017 	ldw	r3,-64(fp)
 2020088:	e0bffd17 	ldw	r2,-12(fp)
 202008c:	18802e1e 	bne	r3,r2,2020148 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2020090:	e0bfff17 	ldw	r2,-4(fp)
 2020094:	1090000c 	andi	r2,r2,16384
 2020098:	10002d1e 	bne	r2,zero,2020150 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 202009c:	d0a7a743 	ldbu	r2,-24931(gp)
 20200a0:	10803fcc 	andi	r2,r2,255
 20200a4:	10800058 	cmpnei	r2,r2,1
 20200a8:	1000161e 	bne	r2,zero,2020104 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 20200ac:	e0bffc17 	ldw	r2,-16(fp)
 20200b0:	10800c17 	ldw	r2,48(r2)
 20200b4:	e0bff215 	stw	r2,-56(fp)
 20200b8:	00800144 	movi	r2,5
 20200bc:	e0bff98d 	sth	r2,-26(fp)
 20200c0:	00bfe0c4 	movi	r2,-125
 20200c4:	e0bffa05 	stb	r2,-24(fp)
 20200c8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 20200cc:	d0a7a743 	ldbu	r2,-24931(gp)
 20200d0:	10803fcc 	andi	r2,r2,255
 20200d4:	10001526 	beq	r2,zero,202012c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 20200d8:	e0fff98b 	ldhu	r3,-26(fp)
 20200dc:	e13ffa03 	ldbu	r4,-24(fp)
 20200e0:	e17ffa8b 	ldhu	r5,-22(fp)
 20200e4:	e0bffb44 	addi	r2,fp,-19
 20200e8:	d8800015 	stw	r2,0(sp)
 20200ec:	280f883a 	mov	r7,r5
 20200f0:	200d883a 	mov	r6,r4
 20200f4:	180b883a 	mov	r5,r3
 20200f8:	e13ff217 	ldw	r4,-56(fp)
 20200fc:	2019ecc0 	call	2019ecc <OSFlagPend>
 2020100:	00000a06 	br	202012c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2020104:	0001883a 	nop
 2020108:	e0bffc17 	ldw	r2,-16(fp)
 202010c:	10c00d17 	ldw	r3,52(r2)
 2020110:	e0bff317 	ldw	r2,-52(fp)
 2020114:	1880051e 	bne	r3,r2,202012c <altera_avalon_jtag_uart_read+0x1c8>
 2020118:	e0bffc17 	ldw	r2,-16(fp)
 202011c:	10c00917 	ldw	r3,36(r2)
 2020120:	e0bffc17 	ldw	r2,-16(fp)
 2020124:	10800117 	ldw	r2,4(r2)
 2020128:	18bff736 	bltu	r3,r2,2020108 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 202012c:	e0bffc17 	ldw	r2,-16(fp)
 2020130:	10c00d17 	ldw	r3,52(r2)
 2020134:	e0bff317 	ldw	r2,-52(fp)
 2020138:	18800726 	beq	r3,r2,2020158 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 202013c:	e0bffe17 	ldw	r2,-8(fp)
 2020140:	00bf9d16 	blt	zero,r2,201ffb8 <altera_avalon_jtag_uart_read+0x54>
 2020144:	00000506 	br	202015c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2020148:	0001883a 	nop
 202014c:	00000306 	br	202015c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2020150:	0001883a 	nop
 2020154:	00000106 	br	202015c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2020158:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 202015c:	e0bffc17 	ldw	r2,-16(fp)
 2020160:	10800a17 	ldw	r2,40(r2)
 2020164:	1009883a 	mov	r4,r2
 2020168:	201d7740 	call	201d774 <OSSemPost>

  if (ptr != buffer)
 202016c:	e0fff017 	ldw	r3,-64(fp)
 2020170:	e0bffd17 	ldw	r2,-12(fp)
 2020174:	18801826 	beq	r3,r2,20201d8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020178:	0005303a 	rdctl	r2,status
 202017c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020180:	e0fff717 	ldw	r3,-36(fp)
 2020184:	00bfff84 	movi	r2,-2
 2020188:	1884703a 	and	r2,r3,r2
 202018c:	1001703a 	wrctl	status,r2
  
  return context;
 2020190:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2020194:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2020198:	e0bffc17 	ldw	r2,-16(fp)
 202019c:	10800817 	ldw	r2,32(r2)
 20201a0:	10c00054 	ori	r3,r2,1
 20201a4:	e0bffc17 	ldw	r2,-16(fp)
 20201a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20201ac:	e0bffc17 	ldw	r2,-16(fp)
 20201b0:	10800017 	ldw	r2,0(r2)
 20201b4:	10800104 	addi	r2,r2,4
 20201b8:	1007883a 	mov	r3,r2
 20201bc:	e0bffc17 	ldw	r2,-16(fp)
 20201c0:	10800817 	ldw	r2,32(r2)
 20201c4:	18800035 	stwio	r2,0(r3)
 20201c8:	e0bff617 	ldw	r2,-40(fp)
 20201cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20201d0:	e0bff517 	ldw	r2,-44(fp)
 20201d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 20201d8:	e0fff017 	ldw	r3,-64(fp)
 20201dc:	e0bffd17 	ldw	r2,-12(fp)
 20201e0:	18800426 	beq	r3,r2,20201f4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 20201e4:	e0fff017 	ldw	r3,-64(fp)
 20201e8:	e0bffd17 	ldw	r2,-12(fp)
 20201ec:	1885c83a 	sub	r2,r3,r2
 20201f0:	00000606 	br	202020c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 20201f4:	e0bfff17 	ldw	r2,-4(fp)
 20201f8:	1090000c 	andi	r2,r2,16384
 20201fc:	10000226 	beq	r2,zero,2020208 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 2020200:	00bffd44 	movi	r2,-11
 2020204:	00000106 	br	202020c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 2020208:	00bffec4 	movi	r2,-5
}
 202020c:	e037883a 	mov	sp,fp
 2020210:	dfc00117 	ldw	ra,4(sp)
 2020214:	df000017 	ldw	fp,0(sp)
 2020218:	dec00204 	addi	sp,sp,8
 202021c:	f800283a 	ret

02020220 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2020220:	deffed04 	addi	sp,sp,-76
 2020224:	dfc01215 	stw	ra,72(sp)
 2020228:	df001115 	stw	fp,68(sp)
 202022c:	df001104 	addi	fp,sp,68
 2020230:	e13ffc15 	stw	r4,-16(fp)
 2020234:	e17ffd15 	stw	r5,-12(fp)
 2020238:	e1bffe15 	stw	r6,-8(fp)
 202023c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2020240:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2020244:	e0bffd17 	ldw	r2,-12(fp)
 2020248:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 202024c:	e0bffc17 	ldw	r2,-16(fp)
 2020250:	10800b17 	ldw	r2,44(r2)
 2020254:	e0bff815 	stw	r2,-32(fp)
 2020258:	e03ff90d 	sth	zero,-28(fp)
 202025c:	e0bff90b 	ldhu	r2,-28(fp)
 2020260:	e0fffb44 	addi	r3,fp,-19
 2020264:	180d883a 	mov	r6,r3
 2020268:	100b883a 	mov	r5,r2
 202026c:	e13ff817 	ldw	r4,-32(fp)
 2020270:	201d3fc0 	call	201d3fc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2020274:	00003706 	br	2020354 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2020278:	e0bffc17 	ldw	r2,-16(fp)
 202027c:	10800f17 	ldw	r2,60(r2)
 2020280:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 2020284:	e0bffc17 	ldw	r2,-16(fp)
 2020288:	10801017 	ldw	r2,64(r2)
 202028c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 2020290:	e0fff417 	ldw	r3,-48(fp)
 2020294:	e0bff017 	ldw	r2,-64(fp)
 2020298:	1880062e 	bgeu	r3,r2,20202b4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 202029c:	e0fff017 	ldw	r3,-64(fp)
 20202a0:	e0bff417 	ldw	r2,-48(fp)
 20202a4:	1885c83a 	sub	r2,r3,r2
 20202a8:	10bfffc4 	addi	r2,r2,-1
 20202ac:	e0bff115 	stw	r2,-60(fp)
 20202b0:	00000b06 	br	20202e0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 20202b4:	e0bff017 	ldw	r2,-64(fp)
 20202b8:	10000526 	beq	r2,zero,20202d0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20202bc:	00c20004 	movi	r3,2048
 20202c0:	e0bff417 	ldw	r2,-48(fp)
 20202c4:	1885c83a 	sub	r2,r3,r2
 20202c8:	e0bff115 	stw	r2,-60(fp)
 20202cc:	00000406 	br	20202e0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 20202d0:	00c1ffc4 	movi	r3,2047
 20202d4:	e0bff417 	ldw	r2,-48(fp)
 20202d8:	1885c83a 	sub	r2,r3,r2
 20202dc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 20202e0:	e0bff117 	ldw	r2,-60(fp)
 20202e4:	10001e26 	beq	r2,zero,2020360 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 20202e8:	e0fffe17 	ldw	r3,-8(fp)
 20202ec:	e0bff117 	ldw	r2,-60(fp)
 20202f0:	1880022e 	bgeu	r3,r2,20202fc <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 20202f4:	e0bffe17 	ldw	r2,-8(fp)
 20202f8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 20202fc:	e0bffc17 	ldw	r2,-16(fp)
 2020300:	10c21104 	addi	r3,r2,2116
 2020304:	e0bff417 	ldw	r2,-48(fp)
 2020308:	1885883a 	add	r2,r3,r2
 202030c:	e1bff117 	ldw	r6,-60(fp)
 2020310:	e17ffd17 	ldw	r5,-12(fp)
 2020314:	1009883a 	mov	r4,r2
 2020318:	20093a40 	call	20093a4 <memcpy>
      ptr   += n;
 202031c:	e0fffd17 	ldw	r3,-12(fp)
 2020320:	e0bff117 	ldw	r2,-60(fp)
 2020324:	1885883a 	add	r2,r3,r2
 2020328:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 202032c:	e0fffe17 	ldw	r3,-8(fp)
 2020330:	e0bff117 	ldw	r2,-60(fp)
 2020334:	1885c83a 	sub	r2,r3,r2
 2020338:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 202033c:	e0fff417 	ldw	r3,-48(fp)
 2020340:	e0bff117 	ldw	r2,-60(fp)
 2020344:	1885883a 	add	r2,r3,r2
 2020348:	10c1ffcc 	andi	r3,r2,2047
 202034c:	e0bffc17 	ldw	r2,-16(fp)
 2020350:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2020354:	e0bffe17 	ldw	r2,-8(fp)
 2020358:	00bfc716 	blt	zero,r2,2020278 <altera_avalon_jtag_uart_write+0x58>
 202035c:	00000106 	br	2020364 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2020360:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020364:	0005303a 	rdctl	r2,status
 2020368:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 202036c:	e0fff717 	ldw	r3,-36(fp)
 2020370:	00bfff84 	movi	r2,-2
 2020374:	1884703a 	and	r2,r3,r2
 2020378:	1001703a 	wrctl	status,r2
  
  return context;
 202037c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2020380:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2020384:	e0bffc17 	ldw	r2,-16(fp)
 2020388:	10800817 	ldw	r2,32(r2)
 202038c:	10c00094 	ori	r3,r2,2
 2020390:	e0bffc17 	ldw	r2,-16(fp)
 2020394:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2020398:	e0bffc17 	ldw	r2,-16(fp)
 202039c:	10800017 	ldw	r2,0(r2)
 20203a0:	10800104 	addi	r2,r2,4
 20203a4:	1007883a 	mov	r3,r2
 20203a8:	e0bffc17 	ldw	r2,-16(fp)
 20203ac:	10800817 	ldw	r2,32(r2)
 20203b0:	18800035 	stwio	r2,0(r3)
 20203b4:	e0bff617 	ldw	r2,-40(fp)
 20203b8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20203bc:	e0bff317 	ldw	r2,-52(fp)
 20203c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20203c4:	e0bffe17 	ldw	r2,-8(fp)
 20203c8:	00802a0e 	bge	zero,r2,2020474 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 20203cc:	e0bfff17 	ldw	r2,-4(fp)
 20203d0:	1090000c 	andi	r2,r2,16384
 20203d4:	10002a1e 	bne	r2,zero,2020480 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 20203d8:	d0a7a743 	ldbu	r2,-24931(gp)
 20203dc:	10803fcc 	andi	r2,r2,255
 20203e0:	10800058 	cmpnei	r2,r2,1
 20203e4:	1000161e 	bne	r2,zero,2020440 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 20203e8:	e0bffc17 	ldw	r2,-16(fp)
 20203ec:	10800c17 	ldw	r2,48(r2)
 20203f0:	e0bff515 	stw	r2,-44(fp)
 20203f4:	00800184 	movi	r2,6
 20203f8:	e0bff98d 	sth	r2,-26(fp)
 20203fc:	00bfe0c4 	movi	r2,-125
 2020400:	e0bffa05 	stb	r2,-24(fp)
 2020404:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 2020408:	d0a7a743 	ldbu	r2,-24931(gp)
 202040c:	10803fcc 	andi	r2,r2,255
 2020410:	10001526 	beq	r2,zero,2020468 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2020414:	e0fff98b 	ldhu	r3,-26(fp)
 2020418:	e13ffa03 	ldbu	r4,-24(fp)
 202041c:	e17ffa8b 	ldhu	r5,-22(fp)
 2020420:	e0bffb04 	addi	r2,fp,-20
 2020424:	d8800015 	stw	r2,0(sp)
 2020428:	280f883a 	mov	r7,r5
 202042c:	200d883a 	mov	r6,r4
 2020430:	180b883a 	mov	r5,r3
 2020434:	e13ff517 	ldw	r4,-44(fp)
 2020438:	2019ecc0 	call	2019ecc <OSFlagPend>
 202043c:	00000a06 	br	2020468 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2020440:	0001883a 	nop
 2020444:	e0bffc17 	ldw	r2,-16(fp)
 2020448:	10c01017 	ldw	r3,64(r2)
 202044c:	e0bff017 	ldw	r2,-64(fp)
 2020450:	1880051e 	bne	r3,r2,2020468 <altera_avalon_jtag_uart_write+0x248>
 2020454:	e0bffc17 	ldw	r2,-16(fp)
 2020458:	10c00917 	ldw	r3,36(r2)
 202045c:	e0bffc17 	ldw	r2,-16(fp)
 2020460:	10800117 	ldw	r2,4(r2)
 2020464:	18bff736 	bltu	r3,r2,2020444 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2020468:	e0bffc17 	ldw	r2,-16(fp)
 202046c:	10800917 	ldw	r2,36(r2)
 2020470:	1000051e 	bne	r2,zero,2020488 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 2020474:	e0bffe17 	ldw	r2,-8(fp)
 2020478:	00bfb616 	blt	zero,r2,2020354 <altera_avalon_jtag_uart_write+0x134>
 202047c:	00000306 	br	202048c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2020480:	0001883a 	nop
 2020484:	00000106 	br	202048c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2020488:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 202048c:	e0bffc17 	ldw	r2,-16(fp)
 2020490:	10800b17 	ldw	r2,44(r2)
 2020494:	1009883a 	mov	r4,r2
 2020498:	201d7740 	call	201d774 <OSSemPost>

  if (ptr != start)
 202049c:	e0fffd17 	ldw	r3,-12(fp)
 20204a0:	e0bff217 	ldw	r2,-56(fp)
 20204a4:	18800426 	beq	r3,r2,20204b8 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 20204a8:	e0fffd17 	ldw	r3,-12(fp)
 20204ac:	e0bff217 	ldw	r2,-56(fp)
 20204b0:	1885c83a 	sub	r2,r3,r2
 20204b4:	00000606 	br	20204d0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 20204b8:	e0bfff17 	ldw	r2,-4(fp)
 20204bc:	1090000c 	andi	r2,r2,16384
 20204c0:	10000226 	beq	r2,zero,20204cc <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 20204c4:	00bffd44 	movi	r2,-11
 20204c8:	00000106 	br	20204d0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20204cc:	00bffec4 	movi	r2,-5
}
 20204d0:	e037883a 	mov	sp,fp
 20204d4:	dfc00117 	ldw	ra,4(sp)
 20204d8:	df000017 	ldw	fp,0(sp)
 20204dc:	dec00204 	addi	sp,sp,8
 20204e0:	f800283a 	ret

020204e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20204e4:	defff904 	addi	sp,sp,-28
 20204e8:	dfc00615 	stw	ra,24(sp)
 20204ec:	df000515 	stw	fp,20(sp)
 20204f0:	df000504 	addi	fp,sp,20
 20204f4:	e13ffe15 	stw	r4,-8(fp)
 20204f8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 20204fc:	0007883a 	mov	r3,zero
 2020500:	e0bffe17 	ldw	r2,-8(fp)
 2020504:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2020508:	e0bffe17 	ldw	r2,-8(fp)
 202050c:	10800104 	addi	r2,r2,4
 2020510:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020514:	0005303a 	rdctl	r2,status
 2020518:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 202051c:	e0fffc17 	ldw	r3,-16(fp)
 2020520:	00bfff84 	movi	r2,-2
 2020524:	1884703a 	and	r2,r3,r2
 2020528:	1001703a 	wrctl	status,r2
  
  return context;
 202052c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2020530:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 2020534:	202130c0 	call	202130c <alt_tick>
 2020538:	e0bffb17 	ldw	r2,-20(fp)
 202053c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020540:	e0bffd17 	ldw	r2,-12(fp)
 2020544:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2020548:	0001883a 	nop
 202054c:	e037883a 	mov	sp,fp
 2020550:	dfc00117 	ldw	ra,4(sp)
 2020554:	df000017 	ldw	fp,0(sp)
 2020558:	dec00204 	addi	sp,sp,8
 202055c:	f800283a 	ret

02020560 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2020560:	defff904 	addi	sp,sp,-28
 2020564:	dfc00615 	stw	ra,24(sp)
 2020568:	df000515 	stw	fp,20(sp)
 202056c:	df000504 	addi	fp,sp,20
 2020570:	e13ffc15 	stw	r4,-16(fp)
 2020574:	e17ffd15 	stw	r5,-12(fp)
 2020578:	e1bffe15 	stw	r6,-8(fp)
 202057c:	e1ffff15 	stw	r7,-4(fp)
 2020580:	e0bfff17 	ldw	r2,-4(fp)
 2020584:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2020588:	d0a7bc17 	ldw	r2,-24848(gp)
 202058c:	1000021e 	bne	r2,zero,2020598 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2020590:	e0bffb17 	ldw	r2,-20(fp)
 2020594:	d0a7bc15 	stw	r2,-24848(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2020598:	e0bffc17 	ldw	r2,-16(fp)
 202059c:	10800104 	addi	r2,r2,4
 20205a0:	00c001c4 	movi	r3,7
 20205a4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 20205a8:	018080b4 	movhi	r6,514
 20205ac:	31813904 	addi	r6,r6,1252
 20205b0:	e17ffc17 	ldw	r5,-16(fp)
 20205b4:	e13ffe17 	ldw	r4,-8(fp)
 20205b8:	2020e9c0 	call	2020e9c <alt_irq_register>
#endif  
}
 20205bc:	0001883a 	nop
 20205c0:	e037883a 	mov	sp,fp
 20205c4:	dfc00117 	ldw	ra,4(sp)
 20205c8:	df000017 	ldw	fp,0(sp)
 20205cc:	dec00204 	addi	sp,sp,8
 20205d0:	f800283a 	ret

020205d4 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 20205d4:	defffc04 	addi	sp,sp,-16
 20205d8:	dfc00315 	stw	ra,12(sp)
 20205dc:	df000215 	stw	fp,8(sp)
 20205e0:	df000204 	addi	fp,sp,8
 20205e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 20205e8:	d1603804 	addi	r5,gp,-32544
 20205ec:	e13fff17 	ldw	r4,-4(fp)
 20205f0:	2020c980 	call	2020c98 <alt_find_dev>
 20205f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 20205f8:	e0bffe17 	ldw	r2,-8(fp)
}
 20205fc:	e037883a 	mov	sp,fp
 2020600:	dfc00117 	ldw	ra,4(sp)
 2020604:	df000017 	ldw	fp,0(sp)
 2020608:	dec00204 	addi	sp,sp,8
 202060c:	f800283a 	ret

02020610 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 2020610:	defffd04 	addi	sp,sp,-12
 2020614:	df000215 	stw	fp,8(sp)
 2020618:	df000204 	addi	fp,sp,8
 202061c:	e13ffe15 	stw	r4,-8(fp)
 2020620:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 2020624:	e0bffe17 	ldw	r2,-8(fp)
 2020628:	10800a17 	ldw	r2,40(r2)
 202062c:	10800023 	ldbuio	r2,0(r2)
 2020630:	10803fcc 	andi	r2,r2,255
 2020634:	1007883a 	mov	r3,r2
 2020638:	e0bfff17 	ldw	r2,-4(fp)
 202063c:	10c00005 	stb	r3,0(r2)

	return 0;
 2020640:	0005883a 	mov	r2,zero
}
 2020644:	e037883a 	mov	sp,fp
 2020648:	df000017 	ldw	fp,0(sp)
 202064c:	dec00104 	addi	sp,sp,4
 2020650:	f800283a 	ret

02020654 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 2020654:	defffc04 	addi	sp,sp,-16
 2020658:	df000315 	stw	fp,12(sp)
 202065c:	df000304 	addi	fp,sp,12
 2020660:	e13ffd15 	stw	r4,-12(fp)
 2020664:	2805883a 	mov	r2,r5
 2020668:	e1bfff15 	stw	r6,-4(fp)
 202066c:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020670:	e0bffd17 	ldw	r2,-12(fp)
 2020674:	10800a17 	ldw	r2,40(r2)
 2020678:	1007883a 	mov	r3,r2
 202067c:	e0bffe03 	ldbu	r2,-8(fp)
 2020680:	10800fcc 	andi	r2,r2,63
 2020684:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2020688:	e0bffd17 	ldw	r2,-12(fp)
 202068c:	10800a17 	ldw	r2,40(r2)
 2020690:	10800044 	addi	r2,r2,1
 2020694:	10800023 	ldbuio	r2,0(r2)
 2020698:	10803fcc 	andi	r2,r2,255
 202069c:	1007883a 	mov	r3,r2
 20206a0:	e0bfff17 	ldw	r2,-4(fp)
 20206a4:	10c00005 	stb	r3,0(r2)

	return 0;
 20206a8:	0005883a 	mov	r2,zero
}
 20206ac:	e037883a 	mov	sp,fp
 20206b0:	df000017 	ldw	fp,0(sp)
 20206b4:	dec00104 	addi	sp,sp,4
 20206b8:	f800283a 	ret

020206bc <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 20206bc:	defffc04 	addi	sp,sp,-16
 20206c0:	df000315 	stw	fp,12(sp)
 20206c4:	df000304 	addi	fp,sp,12
 20206c8:	e13ffd15 	stw	r4,-12(fp)
 20206cc:	2807883a 	mov	r3,r5
 20206d0:	3005883a 	mov	r2,r6
 20206d4:	e0fffe05 	stb	r3,-8(fp)
 20206d8:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20206dc:	e0bffd17 	ldw	r2,-12(fp)
 20206e0:	10800a17 	ldw	r2,40(r2)
 20206e4:	1007883a 	mov	r3,r2
 20206e8:	e0bffe03 	ldbu	r2,-8(fp)
 20206ec:	10800fcc 	andi	r2,r2,63
 20206f0:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 20206f4:	e0bffd17 	ldw	r2,-12(fp)
 20206f8:	10800a17 	ldw	r2,40(r2)
 20206fc:	10800044 	addi	r2,r2,1
 2020700:	1007883a 	mov	r3,r2
 2020704:	e0bfff03 	ldbu	r2,-4(fp)
 2020708:	18800025 	stbio	r2,0(r3)

	return 0;
 202070c:	0005883a 	mov	r2,zero
}
 2020710:	e037883a 	mov	sp,fp
 2020714:	df000017 	ldw	fp,0(sp)
 2020718:	dec00104 	addi	sp,sp,4
 202071c:	f800283a 	ret

02020720 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 2020720:	defffd04 	addi	sp,sp,-12
 2020724:	df000215 	stw	fp,8(sp)
 2020728:	df000204 	addi	fp,sp,8
 202072c:	e13ffe15 	stw	r4,-8(fp)
 2020730:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020734:	e0bffe17 	ldw	r2,-8(fp)
 2020738:	10800a17 	ldw	r2,40(r2)
 202073c:	1007883a 	mov	r3,r2
 2020740:	00800c84 	movi	r2,50
 2020744:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2020748:	e0bffe17 	ldw	r2,-8(fp)
 202074c:	10800a17 	ldw	r2,40(r2)
 2020750:	10800044 	addi	r2,r2,1
 2020754:	10800023 	ldbuio	r2,0(r2)
 2020758:	10803fcc 	andi	r2,r2,255
 202075c:	10ffffcc 	andi	r3,r2,65535
 2020760:	e0bfff17 	ldw	r2,-4(fp)
 2020764:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020768:	e0bffe17 	ldw	r2,-8(fp)
 202076c:	10800a17 	ldw	r2,40(r2)
 2020770:	1007883a 	mov	r3,r2
 2020774:	00800cc4 	movi	r2,51
 2020778:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 202077c:	e0bffe17 	ldw	r2,-8(fp)
 2020780:	10800a17 	ldw	r2,40(r2)
 2020784:	10800044 	addi	r2,r2,1
 2020788:	10800023 	ldbuio	r2,0(r2)
 202078c:	10803fcc 	andi	r2,r2,255
 2020790:	10bfffcc 	andi	r2,r2,65535
 2020794:	1004923a 	slli	r2,r2,8
 2020798:	e0ffff17 	ldw	r3,-4(fp)
 202079c:	18c00017 	ldw	r3,0(r3)
 20207a0:	1885883a 	add	r2,r3,r2
 20207a4:	1007883a 	mov	r3,r2
 20207a8:	e0bfff17 	ldw	r2,-4(fp)
 20207ac:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 20207b0:	e0bfff17 	ldw	r2,-4(fp)
 20207b4:	10800017 	ldw	r2,0(r2)
 20207b8:	10a0000c 	andi	r2,r2,32768
 20207bc:	10000626 	beq	r2,zero,20207d8 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 20207c0:	e0bfff17 	ldw	r2,-4(fp)
 20207c4:	10800017 	ldw	r2,0(r2)
 20207c8:	10bffff4 	orhi	r2,r2,65535
 20207cc:	1007883a 	mov	r3,r2
 20207d0:	e0bfff17 	ldw	r2,-4(fp)
 20207d4:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 20207d8:	0005883a 	mov	r2,zero
}
 20207dc:	e037883a 	mov	sp,fp
 20207e0:	df000017 	ldw	fp,0(sp)
 20207e4:	dec00104 	addi	sp,sp,4
 20207e8:	f800283a 	ret

020207ec <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 20207ec:	defffd04 	addi	sp,sp,-12
 20207f0:	df000215 	stw	fp,8(sp)
 20207f4:	df000204 	addi	fp,sp,8
 20207f8:	e13ffe15 	stw	r4,-8(fp)
 20207fc:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020800:	e0bffe17 	ldw	r2,-8(fp)
 2020804:	10800a17 	ldw	r2,40(r2)
 2020808:	1007883a 	mov	r3,r2
 202080c:	00800d04 	movi	r2,52
 2020810:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2020814:	e0bffe17 	ldw	r2,-8(fp)
 2020818:	10800a17 	ldw	r2,40(r2)
 202081c:	10800044 	addi	r2,r2,1
 2020820:	10800023 	ldbuio	r2,0(r2)
 2020824:	10803fcc 	andi	r2,r2,255
 2020828:	10ffffcc 	andi	r3,r2,65535
 202082c:	e0bfff17 	ldw	r2,-4(fp)
 2020830:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020834:	e0bffe17 	ldw	r2,-8(fp)
 2020838:	10800a17 	ldw	r2,40(r2)
 202083c:	1007883a 	mov	r3,r2
 2020840:	00800d44 	movi	r2,53
 2020844:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2020848:	e0bffe17 	ldw	r2,-8(fp)
 202084c:	10800a17 	ldw	r2,40(r2)
 2020850:	10800044 	addi	r2,r2,1
 2020854:	10800023 	ldbuio	r2,0(r2)
 2020858:	10803fcc 	andi	r2,r2,255
 202085c:	10bfffcc 	andi	r2,r2,65535
 2020860:	1004923a 	slli	r2,r2,8
 2020864:	e0ffff17 	ldw	r3,-4(fp)
 2020868:	18c00017 	ldw	r3,0(r3)
 202086c:	1885883a 	add	r2,r3,r2
 2020870:	1007883a 	mov	r3,r2
 2020874:	e0bfff17 	ldw	r2,-4(fp)
 2020878:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 202087c:	e0bfff17 	ldw	r2,-4(fp)
 2020880:	10800017 	ldw	r2,0(r2)
 2020884:	10a0000c 	andi	r2,r2,32768
 2020888:	10000626 	beq	r2,zero,20208a4 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 202088c:	e0bfff17 	ldw	r2,-4(fp)
 2020890:	10800017 	ldw	r2,0(r2)
 2020894:	10bffff4 	orhi	r2,r2,65535
 2020898:	1007883a 	mov	r3,r2
 202089c:	e0bfff17 	ldw	r2,-4(fp)
 20208a0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 20208a4:	0005883a 	mov	r2,zero
}
 20208a8:	e037883a 	mov	sp,fp
 20208ac:	df000017 	ldw	fp,0(sp)
 20208b0:	dec00104 	addi	sp,sp,4
 20208b4:	f800283a 	ret

020208b8 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 20208b8:	defffd04 	addi	sp,sp,-12
 20208bc:	df000215 	stw	fp,8(sp)
 20208c0:	df000204 	addi	fp,sp,8
 20208c4:	e13ffe15 	stw	r4,-8(fp)
 20208c8:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20208cc:	e0bffe17 	ldw	r2,-8(fp)
 20208d0:	10800a17 	ldw	r2,40(r2)
 20208d4:	1007883a 	mov	r3,r2
 20208d8:	00800d84 	movi	r2,54
 20208dc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 20208e0:	e0bffe17 	ldw	r2,-8(fp)
 20208e4:	10800a17 	ldw	r2,40(r2)
 20208e8:	10800044 	addi	r2,r2,1
 20208ec:	10800023 	ldbuio	r2,0(r2)
 20208f0:	10803fcc 	andi	r2,r2,255
 20208f4:	10ffffcc 	andi	r3,r2,65535
 20208f8:	e0bfff17 	ldw	r2,-4(fp)
 20208fc:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020900:	e0bffe17 	ldw	r2,-8(fp)
 2020904:	10800a17 	ldw	r2,40(r2)
 2020908:	1007883a 	mov	r3,r2
 202090c:	00800dc4 	movi	r2,55
 2020910:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2020914:	e0bffe17 	ldw	r2,-8(fp)
 2020918:	10800a17 	ldw	r2,40(r2)
 202091c:	10800044 	addi	r2,r2,1
 2020920:	10800023 	ldbuio	r2,0(r2)
 2020924:	10803fcc 	andi	r2,r2,255
 2020928:	10bfffcc 	andi	r2,r2,65535
 202092c:	1004923a 	slli	r2,r2,8
 2020930:	e0ffff17 	ldw	r3,-4(fp)
 2020934:	18c00017 	ldw	r3,0(r3)
 2020938:	1885883a 	add	r2,r3,r2
 202093c:	1007883a 	mov	r3,r2
 2020940:	e0bfff17 	ldw	r2,-4(fp)
 2020944:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 2020948:	e0bfff17 	ldw	r2,-4(fp)
 202094c:	10800017 	ldw	r2,0(r2)
 2020950:	10a0000c 	andi	r2,r2,32768
 2020954:	10000626 	beq	r2,zero,2020970 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 2020958:	e0bfff17 	ldw	r2,-4(fp)
 202095c:	10800017 	ldw	r2,0(r2)
 2020960:	10bffff4 	orhi	r2,r2,65535
 2020964:	1007883a 	mov	r3,r2
 2020968:	e0bfff17 	ldw	r2,-4(fp)
 202096c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 2020970:	0005883a 	mov	r2,zero
}
 2020974:	e037883a 	mov	sp,fp
 2020978:	df000017 	ldw	fp,0(sp)
 202097c:	dec00104 	addi	sp,sp,4
 2020980:	f800283a 	ret

02020984 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2020984:	defff504 	addi	sp,sp,-44
 2020988:	df000a15 	stw	fp,40(sp)
 202098c:	df000a04 	addi	fp,sp,40
 2020990:	e13ffc15 	stw	r4,-16(fp)
 2020994:	e17ffd15 	stw	r5,-12(fp)
 2020998:	e1bffe15 	stw	r6,-8(fp)
 202099c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20209a0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20209a4:	d0a7bc17 	ldw	r2,-24848(gp)
  
  if (alt_ticks_per_second ())
 20209a8:	10003c26 	beq	r2,zero,2020a9c <alt_alarm_start+0x118>
  {
    if (alarm)
 20209ac:	e0bffc17 	ldw	r2,-16(fp)
 20209b0:	10003826 	beq	r2,zero,2020a94 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 20209b4:	e0bffc17 	ldw	r2,-16(fp)
 20209b8:	e0fffe17 	ldw	r3,-8(fp)
 20209bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20209c0:	e0bffc17 	ldw	r2,-16(fp)
 20209c4:	e0ffff17 	ldw	r3,-4(fp)
 20209c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20209cc:	0005303a 	rdctl	r2,status
 20209d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20209d4:	e0fff917 	ldw	r3,-28(fp)
 20209d8:	00bfff84 	movi	r2,-2
 20209dc:	1884703a 	and	r2,r3,r2
 20209e0:	1001703a 	wrctl	status,r2
  
  return context;
 20209e4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 20209e8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20209ec:	d0a7bd17 	ldw	r2,-24844(gp)
      
      current_nticks = alt_nticks();
 20209f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20209f4:	e0fffd17 	ldw	r3,-12(fp)
 20209f8:	e0bff617 	ldw	r2,-40(fp)
 20209fc:	1885883a 	add	r2,r3,r2
 2020a00:	10c00044 	addi	r3,r2,1
 2020a04:	e0bffc17 	ldw	r2,-16(fp)
 2020a08:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2020a0c:	e0bffc17 	ldw	r2,-16(fp)
 2020a10:	10c00217 	ldw	r3,8(r2)
 2020a14:	e0bff617 	ldw	r2,-40(fp)
 2020a18:	1880042e 	bgeu	r3,r2,2020a2c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2020a1c:	e0bffc17 	ldw	r2,-16(fp)
 2020a20:	00c00044 	movi	r3,1
 2020a24:	10c00405 	stb	r3,16(r2)
 2020a28:	00000206 	br	2020a34 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2020a2c:	e0bffc17 	ldw	r2,-16(fp)
 2020a30:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2020a34:	e0bffc17 	ldw	r2,-16(fp)
 2020a38:	d0e05d04 	addi	r3,gp,-32396
 2020a3c:	e0fffa15 	stw	r3,-24(fp)
 2020a40:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2020a44:	e0bffb17 	ldw	r2,-20(fp)
 2020a48:	e0fffa17 	ldw	r3,-24(fp)
 2020a4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2020a50:	e0bffa17 	ldw	r2,-24(fp)
 2020a54:	10c00017 	ldw	r3,0(r2)
 2020a58:	e0bffb17 	ldw	r2,-20(fp)
 2020a5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2020a60:	e0bffa17 	ldw	r2,-24(fp)
 2020a64:	10800017 	ldw	r2,0(r2)
 2020a68:	e0fffb17 	ldw	r3,-20(fp)
 2020a6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2020a70:	e0bffa17 	ldw	r2,-24(fp)
 2020a74:	e0fffb17 	ldw	r3,-20(fp)
 2020a78:	10c00015 	stw	r3,0(r2)
 2020a7c:	e0bff817 	ldw	r2,-32(fp)
 2020a80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020a84:	e0bff717 	ldw	r2,-36(fp)
 2020a88:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2020a8c:	0005883a 	mov	r2,zero
 2020a90:	00000306 	br	2020aa0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2020a94:	00bffa84 	movi	r2,-22
 2020a98:	00000106 	br	2020aa0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2020a9c:	00bfde84 	movi	r2,-134
  }
}
 2020aa0:	e037883a 	mov	sp,fp
 2020aa4:	df000017 	ldw	fp,0(sp)
 2020aa8:	dec00104 	addi	sp,sp,4
 2020aac:	f800283a 	ret

02020ab0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2020ab0:	defffe04 	addi	sp,sp,-8
 2020ab4:	df000115 	stw	fp,4(sp)
 2020ab8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2020abc:	e03fff15 	stw	zero,-4(fp)
 2020ac0:	00000506 	br	2020ad8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 2020ac4:	e0bfff17 	ldw	r2,-4(fp)
 2020ac8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2020acc:	e0bfff17 	ldw	r2,-4(fp)
 2020ad0:	10800804 	addi	r2,r2,32
 2020ad4:	e0bfff15 	stw	r2,-4(fp)
 2020ad8:	e0bfff17 	ldw	r2,-4(fp)
 2020adc:	10820030 	cmpltui	r2,r2,2048
 2020ae0:	103ff81e 	bne	r2,zero,2020ac4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2020ae4:	0001883a 	nop
 2020ae8:	e037883a 	mov	sp,fp
 2020aec:	df000017 	ldw	fp,0(sp)
 2020af0:	dec00104 	addi	sp,sp,4
 2020af4:	f800283a 	ret

02020af8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2020af8:	defffe04 	addi	sp,sp,-8
 2020afc:	dfc00115 	stw	ra,4(sp)
 2020b00:	df000015 	stw	fp,0(sp)
 2020b04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2020b08:	d0a03b17 	ldw	r2,-32532(gp)
 2020b0c:	10000326 	beq	r2,zero,2020b1c <alt_get_errno+0x24>
 2020b10:	d0a03b17 	ldw	r2,-32532(gp)
 2020b14:	103ee83a 	callr	r2
 2020b18:	00000106 	br	2020b20 <alt_get_errno+0x28>
 2020b1c:	d0a79e04 	addi	r2,gp,-24968
}
 2020b20:	e037883a 	mov	sp,fp
 2020b24:	dfc00117 	ldw	ra,4(sp)
 2020b28:	df000017 	ldw	fp,0(sp)
 2020b2c:	dec00204 	addi	sp,sp,8
 2020b30:	f800283a 	ret

02020b34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2020b34:	defffa04 	addi	sp,sp,-24
 2020b38:	dfc00515 	stw	ra,20(sp)
 2020b3c:	df000415 	stw	fp,16(sp)
 2020b40:	df000404 	addi	fp,sp,16
 2020b44:	e13ffe15 	stw	r4,-8(fp)
 2020b48:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2020b4c:	e0bffe17 	ldw	r2,-8(fp)
 2020b50:	10000326 	beq	r2,zero,2020b60 <alt_dev_llist_insert+0x2c>
 2020b54:	e0bffe17 	ldw	r2,-8(fp)
 2020b58:	10800217 	ldw	r2,8(r2)
 2020b5c:	1000061e 	bne	r2,zero,2020b78 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2020b60:	2020af80 	call	2020af8 <alt_get_errno>
 2020b64:	1007883a 	mov	r3,r2
 2020b68:	00800584 	movi	r2,22
 2020b6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2020b70:	00bffa84 	movi	r2,-22
 2020b74:	00001306 	br	2020bc4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2020b78:	e0bffe17 	ldw	r2,-8(fp)
 2020b7c:	e0ffff17 	ldw	r3,-4(fp)
 2020b80:	e0fffc15 	stw	r3,-16(fp)
 2020b84:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2020b88:	e0bffd17 	ldw	r2,-12(fp)
 2020b8c:	e0fffc17 	ldw	r3,-16(fp)
 2020b90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2020b94:	e0bffc17 	ldw	r2,-16(fp)
 2020b98:	10c00017 	ldw	r3,0(r2)
 2020b9c:	e0bffd17 	ldw	r2,-12(fp)
 2020ba0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2020ba4:	e0bffc17 	ldw	r2,-16(fp)
 2020ba8:	10800017 	ldw	r2,0(r2)
 2020bac:	e0fffd17 	ldw	r3,-12(fp)
 2020bb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2020bb4:	e0bffc17 	ldw	r2,-16(fp)
 2020bb8:	e0fffd17 	ldw	r3,-12(fp)
 2020bbc:	10c00015 	stw	r3,0(r2)

  return 0;  
 2020bc0:	0005883a 	mov	r2,zero
}
 2020bc4:	e037883a 	mov	sp,fp
 2020bc8:	dfc00117 	ldw	ra,4(sp)
 2020bcc:	df000017 	ldw	fp,0(sp)
 2020bd0:	dec00204 	addi	sp,sp,8
 2020bd4:	f800283a 	ret

02020bd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2020bd8:	defffd04 	addi	sp,sp,-12
 2020bdc:	dfc00215 	stw	ra,8(sp)
 2020be0:	df000115 	stw	fp,4(sp)
 2020be4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2020be8:	008080b4 	movhi	r2,514
 2020bec:	1087f904 	addi	r2,r2,8164
 2020bf0:	e0bfff15 	stw	r2,-4(fp)
 2020bf4:	00000606 	br	2020c10 <_do_ctors+0x38>
        (*ctor) (); 
 2020bf8:	e0bfff17 	ldw	r2,-4(fp)
 2020bfc:	10800017 	ldw	r2,0(r2)
 2020c00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2020c04:	e0bfff17 	ldw	r2,-4(fp)
 2020c08:	10bfff04 	addi	r2,r2,-4
 2020c0c:	e0bfff15 	stw	r2,-4(fp)
 2020c10:	e0ffff17 	ldw	r3,-4(fp)
 2020c14:	008080b4 	movhi	r2,514
 2020c18:	1087fa04 	addi	r2,r2,8168
 2020c1c:	18bff62e 	bgeu	r3,r2,2020bf8 <_do_ctors+0x20>
        (*ctor) (); 
}
 2020c20:	0001883a 	nop
 2020c24:	e037883a 	mov	sp,fp
 2020c28:	dfc00117 	ldw	ra,4(sp)
 2020c2c:	df000017 	ldw	fp,0(sp)
 2020c30:	dec00204 	addi	sp,sp,8
 2020c34:	f800283a 	ret

02020c38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2020c38:	defffd04 	addi	sp,sp,-12
 2020c3c:	dfc00215 	stw	ra,8(sp)
 2020c40:	df000115 	stw	fp,4(sp)
 2020c44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2020c48:	008080b4 	movhi	r2,514
 2020c4c:	1087f904 	addi	r2,r2,8164
 2020c50:	e0bfff15 	stw	r2,-4(fp)
 2020c54:	00000606 	br	2020c70 <_do_dtors+0x38>
        (*dtor) (); 
 2020c58:	e0bfff17 	ldw	r2,-4(fp)
 2020c5c:	10800017 	ldw	r2,0(r2)
 2020c60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2020c64:	e0bfff17 	ldw	r2,-4(fp)
 2020c68:	10bfff04 	addi	r2,r2,-4
 2020c6c:	e0bfff15 	stw	r2,-4(fp)
 2020c70:	e0ffff17 	ldw	r3,-4(fp)
 2020c74:	008080b4 	movhi	r2,514
 2020c78:	1087fa04 	addi	r2,r2,8168
 2020c7c:	18bff62e 	bgeu	r3,r2,2020c58 <_do_dtors+0x20>
        (*dtor) (); 
}
 2020c80:	0001883a 	nop
 2020c84:	e037883a 	mov	sp,fp
 2020c88:	dfc00117 	ldw	ra,4(sp)
 2020c8c:	df000017 	ldw	fp,0(sp)
 2020c90:	dec00204 	addi	sp,sp,8
 2020c94:	f800283a 	ret

02020c98 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2020c98:	defffa04 	addi	sp,sp,-24
 2020c9c:	dfc00515 	stw	ra,20(sp)
 2020ca0:	df000415 	stw	fp,16(sp)
 2020ca4:	df000404 	addi	fp,sp,16
 2020ca8:	e13ffe15 	stw	r4,-8(fp)
 2020cac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2020cb0:	e0bfff17 	ldw	r2,-4(fp)
 2020cb4:	10800017 	ldw	r2,0(r2)
 2020cb8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2020cbc:	e13ffe17 	ldw	r4,-8(fp)
 2020cc0:	200990c0 	call	200990c <strlen>
 2020cc4:	10800044 	addi	r2,r2,1
 2020cc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2020ccc:	00000d06 	br	2020d04 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2020cd0:	e0bffc17 	ldw	r2,-16(fp)
 2020cd4:	10800217 	ldw	r2,8(r2)
 2020cd8:	e0fffd17 	ldw	r3,-12(fp)
 2020cdc:	180d883a 	mov	r6,r3
 2020ce0:	e17ffe17 	ldw	r5,-8(fp)
 2020ce4:	1009883a 	mov	r4,r2
 2020ce8:	2021b240 	call	2021b24 <memcmp>
 2020cec:	1000021e 	bne	r2,zero,2020cf8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2020cf0:	e0bffc17 	ldw	r2,-16(fp)
 2020cf4:	00000706 	br	2020d14 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2020cf8:	e0bffc17 	ldw	r2,-16(fp)
 2020cfc:	10800017 	ldw	r2,0(r2)
 2020d00:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2020d04:	e0fffc17 	ldw	r3,-16(fp)
 2020d08:	e0bfff17 	ldw	r2,-4(fp)
 2020d0c:	18bff01e 	bne	r3,r2,2020cd0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2020d10:	0005883a 	mov	r2,zero
}
 2020d14:	e037883a 	mov	sp,fp
 2020d18:	dfc00117 	ldw	ra,4(sp)
 2020d1c:	df000017 	ldw	fp,0(sp)
 2020d20:	dec00204 	addi	sp,sp,8
 2020d24:	f800283a 	ret

02020d28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2020d28:	defffe04 	addi	sp,sp,-8
 2020d2c:	dfc00115 	stw	ra,4(sp)
 2020d30:	df000015 	stw	fp,0(sp)
 2020d34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2020d38:	01440004 	movi	r5,4096
 2020d3c:	0009883a 	mov	r4,zero
 2020d40:	20219740 	call	2021974 <alt_icache_flush>
#endif
}
 2020d44:	0001883a 	nop
 2020d48:	e037883a 	mov	sp,fp
 2020d4c:	dfc00117 	ldw	ra,4(sp)
 2020d50:	df000017 	ldw	fp,0(sp)
 2020d54:	dec00204 	addi	sp,sp,8
 2020d58:	f800283a 	ret

02020d5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2020d5c:	defff904 	addi	sp,sp,-28
 2020d60:	dfc00615 	stw	ra,24(sp)
 2020d64:	df000515 	stw	fp,20(sp)
 2020d68:	df000504 	addi	fp,sp,20
 2020d6c:	e13ffc15 	stw	r4,-16(fp)
 2020d70:	e17ffd15 	stw	r5,-12(fp)
 2020d74:	e1bffe15 	stw	r6,-8(fp)
 2020d78:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2020d7c:	e1bfff17 	ldw	r6,-4(fp)
 2020d80:	e17ffe17 	ldw	r5,-8(fp)
 2020d84:	e13ffd17 	ldw	r4,-12(fp)
 2020d88:	202111c0 	call	202111c <open>
 2020d8c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2020d90:	e0bffb17 	ldw	r2,-20(fp)
 2020d94:	10001c16 	blt	r2,zero,2020e08 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 2020d98:	008080b4 	movhi	r2,514
 2020d9c:	108d2c04 	addi	r2,r2,13488
 2020da0:	e0fffb17 	ldw	r3,-20(fp)
 2020da4:	18c00324 	muli	r3,r3,12
 2020da8:	10c5883a 	add	r2,r2,r3
 2020dac:	10c00017 	ldw	r3,0(r2)
 2020db0:	e0bffc17 	ldw	r2,-16(fp)
 2020db4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2020db8:	008080b4 	movhi	r2,514
 2020dbc:	108d2c04 	addi	r2,r2,13488
 2020dc0:	e0fffb17 	ldw	r3,-20(fp)
 2020dc4:	18c00324 	muli	r3,r3,12
 2020dc8:	10c5883a 	add	r2,r2,r3
 2020dcc:	10800104 	addi	r2,r2,4
 2020dd0:	10c00017 	ldw	r3,0(r2)
 2020dd4:	e0bffc17 	ldw	r2,-16(fp)
 2020dd8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2020ddc:	008080b4 	movhi	r2,514
 2020de0:	108d2c04 	addi	r2,r2,13488
 2020de4:	e0fffb17 	ldw	r3,-20(fp)
 2020de8:	18c00324 	muli	r3,r3,12
 2020dec:	10c5883a 	add	r2,r2,r3
 2020df0:	10800204 	addi	r2,r2,8
 2020df4:	10c00017 	ldw	r3,0(r2)
 2020df8:	e0bffc17 	ldw	r2,-16(fp)
 2020dfc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2020e00:	e13ffb17 	ldw	r4,-20(fp)
 2020e04:	2016f040 	call	2016f04 <alt_release_fd>
  }
} 
 2020e08:	0001883a 	nop
 2020e0c:	e037883a 	mov	sp,fp
 2020e10:	dfc00117 	ldw	ra,4(sp)
 2020e14:	df000017 	ldw	fp,0(sp)
 2020e18:	dec00204 	addi	sp,sp,8
 2020e1c:	f800283a 	ret

02020e20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2020e20:	defffb04 	addi	sp,sp,-20
 2020e24:	dfc00415 	stw	ra,16(sp)
 2020e28:	df000315 	stw	fp,12(sp)
 2020e2c:	df000304 	addi	fp,sp,12
 2020e30:	e13ffd15 	stw	r4,-12(fp)
 2020e34:	e17ffe15 	stw	r5,-8(fp)
 2020e38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2020e3c:	01c07fc4 	movi	r7,511
 2020e40:	01800044 	movi	r6,1
 2020e44:	e17ffd17 	ldw	r5,-12(fp)
 2020e48:	010080b4 	movhi	r4,514
 2020e4c:	210d2f04 	addi	r4,r4,13500
 2020e50:	2020d5c0 	call	2020d5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2020e54:	01c07fc4 	movi	r7,511
 2020e58:	000d883a 	mov	r6,zero
 2020e5c:	e17ffe17 	ldw	r5,-8(fp)
 2020e60:	010080b4 	movhi	r4,514
 2020e64:	210d2c04 	addi	r4,r4,13488
 2020e68:	2020d5c0 	call	2020d5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2020e6c:	01c07fc4 	movi	r7,511
 2020e70:	01800044 	movi	r6,1
 2020e74:	e17fff17 	ldw	r5,-4(fp)
 2020e78:	010080b4 	movhi	r4,514
 2020e7c:	210d3204 	addi	r4,r4,13512
 2020e80:	2020d5c0 	call	2020d5c <alt_open_fd>
}  
 2020e84:	0001883a 	nop
 2020e88:	e037883a 	mov	sp,fp
 2020e8c:	dfc00117 	ldw	ra,4(sp)
 2020e90:	df000017 	ldw	fp,0(sp)
 2020e94:	dec00204 	addi	sp,sp,8
 2020e98:	f800283a 	ret

02020e9c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 2020e9c:	defff004 	addi	sp,sp,-64
 2020ea0:	df000f15 	stw	fp,60(sp)
 2020ea4:	df000f04 	addi	fp,sp,60
 2020ea8:	e13ffd15 	stw	r4,-12(fp)
 2020eac:	e17ffe15 	stw	r5,-8(fp)
 2020eb0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 2020eb4:	00bffa84 	movi	r2,-22
 2020eb8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2020ebc:	e0bffd17 	ldw	r2,-12(fp)
 2020ec0:	10800828 	cmpgeui	r2,r2,32
 2020ec4:	1000501e 	bne	r2,zero,2021008 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020ec8:	0005303a 	rdctl	r2,status
 2020ecc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020ed0:	e0fff617 	ldw	r3,-40(fp)
 2020ed4:	00bfff84 	movi	r2,-2
 2020ed8:	1884703a 	and	r2,r3,r2
 2020edc:	1001703a 	wrctl	status,r2
  
  return context;
 2020ee0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 2020ee4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 2020ee8:	008080f4 	movhi	r2,515
 2020eec:	10860504 	addi	r2,r2,6164
 2020ef0:	e0fffd17 	ldw	r3,-12(fp)
 2020ef4:	180690fa 	slli	r3,r3,3
 2020ef8:	10c5883a 	add	r2,r2,r3
 2020efc:	e0ffff17 	ldw	r3,-4(fp)
 2020f00:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 2020f04:	008080f4 	movhi	r2,515
 2020f08:	10860504 	addi	r2,r2,6164
 2020f0c:	e0fffd17 	ldw	r3,-12(fp)
 2020f10:	180690fa 	slli	r3,r3,3
 2020f14:	10c5883a 	add	r2,r2,r3
 2020f18:	10800104 	addi	r2,r2,4
 2020f1c:	e0fffe17 	ldw	r3,-8(fp)
 2020f20:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 2020f24:	e0bfff17 	ldw	r2,-4(fp)
 2020f28:	10001926 	beq	r2,zero,2020f90 <alt_irq_register+0xf4>
 2020f2c:	e0bffd17 	ldw	r2,-12(fp)
 2020f30:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020f34:	0005303a 	rdctl	r2,status
 2020f38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020f3c:	e0fff717 	ldw	r3,-36(fp)
 2020f40:	00bfff84 	movi	r2,-2
 2020f44:	1884703a 	and	r2,r3,r2
 2020f48:	1001703a 	wrctl	status,r2
  
  return context;
 2020f4c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2020f50:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2020f54:	00c00044 	movi	r3,1
 2020f58:	e0bff217 	ldw	r2,-56(fp)
 2020f5c:	1884983a 	sll	r2,r3,r2
 2020f60:	1007883a 	mov	r3,r2
 2020f64:	d0a7bb17 	ldw	r2,-24852(gp)
 2020f68:	1884b03a 	or	r2,r3,r2
 2020f6c:	d0a7bb15 	stw	r2,-24852(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2020f70:	d0a7bb17 	ldw	r2,-24852(gp)
 2020f74:	100170fa 	wrctl	ienable,r2
 2020f78:	e0bff817 	ldw	r2,-32(fp)
 2020f7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020f80:	e0bff917 	ldw	r2,-28(fp)
 2020f84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2020f88:	0005883a 	mov	r2,zero
 2020f8c:	00001906 	br	2020ff4 <alt_irq_register+0x158>
 2020f90:	e0bffd17 	ldw	r2,-12(fp)
 2020f94:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020f98:	0005303a 	rdctl	r2,status
 2020f9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020fa0:	e0fffa17 	ldw	r3,-24(fp)
 2020fa4:	00bfff84 	movi	r2,-2
 2020fa8:	1884703a 	and	r2,r3,r2
 2020fac:	1001703a 	wrctl	status,r2
  
  return context;
 2020fb0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2020fb4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2020fb8:	00c00044 	movi	r3,1
 2020fbc:	e0bff417 	ldw	r2,-48(fp)
 2020fc0:	1884983a 	sll	r2,r3,r2
 2020fc4:	0084303a 	nor	r2,zero,r2
 2020fc8:	1007883a 	mov	r3,r2
 2020fcc:	d0a7bb17 	ldw	r2,-24852(gp)
 2020fd0:	1884703a 	and	r2,r3,r2
 2020fd4:	d0a7bb15 	stw	r2,-24852(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2020fd8:	d0a7bb17 	ldw	r2,-24852(gp)
 2020fdc:	100170fa 	wrctl	ienable,r2
 2020fe0:	e0bffb17 	ldw	r2,-20(fp)
 2020fe4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020fe8:	e0bffc17 	ldw	r2,-16(fp)
 2020fec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2020ff0:	0005883a 	mov	r2,zero
 2020ff4:	e0bff115 	stw	r2,-60(fp)
 2020ff8:	e0bff317 	ldw	r2,-52(fp)
 2020ffc:	e0bff515 	stw	r2,-44(fp)
 2021000:	e0bff517 	ldw	r2,-44(fp)
 2021004:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 2021008:	e0bff117 	ldw	r2,-60(fp)
}
 202100c:	e037883a 	mov	sp,fp
 2021010:	df000017 	ldw	fp,0(sp)
 2021014:	dec00104 	addi	sp,sp,4
 2021018:	f800283a 	ret

0202101c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 202101c:	defffe04 	addi	sp,sp,-8
 2021020:	dfc00115 	stw	ra,4(sp)
 2021024:	df000015 	stw	fp,0(sp)
 2021028:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 202102c:	d0a03b17 	ldw	r2,-32532(gp)
 2021030:	10000326 	beq	r2,zero,2021040 <alt_get_errno+0x24>
 2021034:	d0a03b17 	ldw	r2,-32532(gp)
 2021038:	103ee83a 	callr	r2
 202103c:	00000106 	br	2021044 <alt_get_errno+0x28>
 2021040:	d0a79e04 	addi	r2,gp,-24968
}
 2021044:	e037883a 	mov	sp,fp
 2021048:	dfc00117 	ldw	ra,4(sp)
 202104c:	df000017 	ldw	fp,0(sp)
 2021050:	dec00204 	addi	sp,sp,8
 2021054:	f800283a 	ret

02021058 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2021058:	defffd04 	addi	sp,sp,-12
 202105c:	df000215 	stw	fp,8(sp)
 2021060:	df000204 	addi	fp,sp,8
 2021064:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2021068:	e0bfff17 	ldw	r2,-4(fp)
 202106c:	10800217 	ldw	r2,8(r2)
 2021070:	10d00034 	orhi	r3,r2,16384
 2021074:	e0bfff17 	ldw	r2,-4(fp)
 2021078:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 202107c:	e03ffe15 	stw	zero,-8(fp)
 2021080:	00001d06 	br	20210f8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2021084:	008080b4 	movhi	r2,514
 2021088:	108d2c04 	addi	r2,r2,13488
 202108c:	e0fffe17 	ldw	r3,-8(fp)
 2021090:	18c00324 	muli	r3,r3,12
 2021094:	10c5883a 	add	r2,r2,r3
 2021098:	10c00017 	ldw	r3,0(r2)
 202109c:	e0bfff17 	ldw	r2,-4(fp)
 20210a0:	10800017 	ldw	r2,0(r2)
 20210a4:	1880111e 	bne	r3,r2,20210ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20210a8:	008080b4 	movhi	r2,514
 20210ac:	108d2c04 	addi	r2,r2,13488
 20210b0:	e0fffe17 	ldw	r3,-8(fp)
 20210b4:	18c00324 	muli	r3,r3,12
 20210b8:	10c5883a 	add	r2,r2,r3
 20210bc:	10800204 	addi	r2,r2,8
 20210c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20210c4:	1000090e 	bge	r2,zero,20210ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 20210c8:	e0bffe17 	ldw	r2,-8(fp)
 20210cc:	10c00324 	muli	r3,r2,12
 20210d0:	008080b4 	movhi	r2,514
 20210d4:	108d2c04 	addi	r2,r2,13488
 20210d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20210dc:	e0bfff17 	ldw	r2,-4(fp)
 20210e0:	18800226 	beq	r3,r2,20210ec <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 20210e4:	00bffcc4 	movi	r2,-13
 20210e8:	00000806 	br	202110c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20210ec:	e0bffe17 	ldw	r2,-8(fp)
 20210f0:	10800044 	addi	r2,r2,1
 20210f4:	e0bffe15 	stw	r2,-8(fp)
 20210f8:	d0a03a17 	ldw	r2,-32536(gp)
 20210fc:	1007883a 	mov	r3,r2
 2021100:	e0bffe17 	ldw	r2,-8(fp)
 2021104:	18bfdf2e 	bgeu	r3,r2,2021084 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2021108:	0005883a 	mov	r2,zero
}
 202110c:	e037883a 	mov	sp,fp
 2021110:	df000017 	ldw	fp,0(sp)
 2021114:	dec00104 	addi	sp,sp,4
 2021118:	f800283a 	ret

0202111c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 202111c:	defff604 	addi	sp,sp,-40
 2021120:	dfc00915 	stw	ra,36(sp)
 2021124:	df000815 	stw	fp,32(sp)
 2021128:	df000804 	addi	fp,sp,32
 202112c:	e13ffd15 	stw	r4,-12(fp)
 2021130:	e17ffe15 	stw	r5,-8(fp)
 2021134:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2021138:	00bfffc4 	movi	r2,-1
 202113c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2021140:	00bffb44 	movi	r2,-19
 2021144:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2021148:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 202114c:	d1603804 	addi	r5,gp,-32544
 2021150:	e13ffd17 	ldw	r4,-12(fp)
 2021154:	2020c980 	call	2020c98 <alt_find_dev>
 2021158:	e0bff815 	stw	r2,-32(fp)
 202115c:	e0bff817 	ldw	r2,-32(fp)
 2021160:	1000051e 	bne	r2,zero,2021178 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2021164:	e13ffd17 	ldw	r4,-12(fp)
 2021168:	20217900 	call	2021790 <alt_find_file>
 202116c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2021170:	00800044 	movi	r2,1
 2021174:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2021178:	e0bff817 	ldw	r2,-32(fp)
 202117c:	10002926 	beq	r2,zero,2021224 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2021180:	e13ff817 	ldw	r4,-32(fp)
 2021184:	20218980 	call	2021898 <alt_get_fd>
 2021188:	e0bff915 	stw	r2,-28(fp)
 202118c:	e0bff917 	ldw	r2,-28(fp)
 2021190:	1000030e 	bge	r2,zero,20211a0 <open+0x84>
    {
      status = index;
 2021194:	e0bff917 	ldw	r2,-28(fp)
 2021198:	e0bffa15 	stw	r2,-24(fp)
 202119c:	00002306 	br	202122c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 20211a0:	e0bff917 	ldw	r2,-28(fp)
 20211a4:	10c00324 	muli	r3,r2,12
 20211a8:	008080b4 	movhi	r2,514
 20211ac:	108d2c04 	addi	r2,r2,13488
 20211b0:	1885883a 	add	r2,r3,r2
 20211b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 20211b8:	e0fffe17 	ldw	r3,-8(fp)
 20211bc:	00900034 	movhi	r2,16384
 20211c0:	10bfffc4 	addi	r2,r2,-1
 20211c4:	1886703a 	and	r3,r3,r2
 20211c8:	e0bffc17 	ldw	r2,-16(fp)
 20211cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 20211d0:	e0bffb17 	ldw	r2,-20(fp)
 20211d4:	1000051e 	bne	r2,zero,20211ec <open+0xd0>
 20211d8:	e13ffc17 	ldw	r4,-16(fp)
 20211dc:	20210580 	call	2021058 <alt_file_locked>
 20211e0:	e0bffa15 	stw	r2,-24(fp)
 20211e4:	e0bffa17 	ldw	r2,-24(fp)
 20211e8:	10001016 	blt	r2,zero,202122c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 20211ec:	e0bff817 	ldw	r2,-32(fp)
 20211f0:	10800317 	ldw	r2,12(r2)
 20211f4:	10000826 	beq	r2,zero,2021218 <open+0xfc>
 20211f8:	e0bff817 	ldw	r2,-32(fp)
 20211fc:	10800317 	ldw	r2,12(r2)
 2021200:	e1ffff17 	ldw	r7,-4(fp)
 2021204:	e1bffe17 	ldw	r6,-8(fp)
 2021208:	e17ffd17 	ldw	r5,-12(fp)
 202120c:	e13ffc17 	ldw	r4,-16(fp)
 2021210:	103ee83a 	callr	r2
 2021214:	00000106 	br	202121c <open+0x100>
 2021218:	0005883a 	mov	r2,zero
 202121c:	e0bffa15 	stw	r2,-24(fp)
 2021220:	00000206 	br	202122c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2021224:	00bffb44 	movi	r2,-19
 2021228:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 202122c:	e0bffa17 	ldw	r2,-24(fp)
 2021230:	1000090e 	bge	r2,zero,2021258 <open+0x13c>
  {
    alt_release_fd (index);  
 2021234:	e13ff917 	ldw	r4,-28(fp)
 2021238:	2016f040 	call	2016f04 <alt_release_fd>
    ALT_ERRNO = -status;
 202123c:	202101c0 	call	202101c <alt_get_errno>
 2021240:	1007883a 	mov	r3,r2
 2021244:	e0bffa17 	ldw	r2,-24(fp)
 2021248:	0085c83a 	sub	r2,zero,r2
 202124c:	18800015 	stw	r2,0(r3)
    return -1;
 2021250:	00bfffc4 	movi	r2,-1
 2021254:	00000106 	br	202125c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2021258:	e0bff917 	ldw	r2,-28(fp)
}
 202125c:	e037883a 	mov	sp,fp
 2021260:	dfc00117 	ldw	ra,4(sp)
 2021264:	df000017 	ldw	fp,0(sp)
 2021268:	dec00204 	addi	sp,sp,8
 202126c:	f800283a 	ret

02021270 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2021270:	defffa04 	addi	sp,sp,-24
 2021274:	df000515 	stw	fp,20(sp)
 2021278:	df000504 	addi	fp,sp,20
 202127c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2021280:	0005303a 	rdctl	r2,status
 2021284:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2021288:	e0fffc17 	ldw	r3,-16(fp)
 202128c:	00bfff84 	movi	r2,-2
 2021290:	1884703a 	and	r2,r3,r2
 2021294:	1001703a 	wrctl	status,r2
  
  return context;
 2021298:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 202129c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 20212a0:	e0bfff17 	ldw	r2,-4(fp)
 20212a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 20212a8:	e0bffd17 	ldw	r2,-12(fp)
 20212ac:	10800017 	ldw	r2,0(r2)
 20212b0:	e0fffd17 	ldw	r3,-12(fp)
 20212b4:	18c00117 	ldw	r3,4(r3)
 20212b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 20212bc:	e0bffd17 	ldw	r2,-12(fp)
 20212c0:	10800117 	ldw	r2,4(r2)
 20212c4:	e0fffd17 	ldw	r3,-12(fp)
 20212c8:	18c00017 	ldw	r3,0(r3)
 20212cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 20212d0:	e0bffd17 	ldw	r2,-12(fp)
 20212d4:	e0fffd17 	ldw	r3,-12(fp)
 20212d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20212dc:	e0bffd17 	ldw	r2,-12(fp)
 20212e0:	e0fffd17 	ldw	r3,-12(fp)
 20212e4:	10c00015 	stw	r3,0(r2)
 20212e8:	e0bffb17 	ldw	r2,-20(fp)
 20212ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20212f0:	e0bffe17 	ldw	r2,-8(fp)
 20212f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20212f8:	0001883a 	nop
 20212fc:	e037883a 	mov	sp,fp
 2021300:	df000017 	ldw	fp,0(sp)
 2021304:	dec00104 	addi	sp,sp,4
 2021308:	f800283a 	ret

0202130c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 202130c:	defffb04 	addi	sp,sp,-20
 2021310:	dfc00415 	stw	ra,16(sp)
 2021314:	df000315 	stw	fp,12(sp)
 2021318:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 202131c:	d0a05d17 	ldw	r2,-32396(gp)
 2021320:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2021324:	d0a7bd17 	ldw	r2,-24844(gp)
 2021328:	10800044 	addi	r2,r2,1
 202132c:	d0a7bd15 	stw	r2,-24844(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2021330:	00002e06 	br	20213ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2021334:	e0bffd17 	ldw	r2,-12(fp)
 2021338:	10800017 	ldw	r2,0(r2)
 202133c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2021340:	e0bffd17 	ldw	r2,-12(fp)
 2021344:	10800403 	ldbu	r2,16(r2)
 2021348:	10803fcc 	andi	r2,r2,255
 202134c:	10000426 	beq	r2,zero,2021360 <alt_tick+0x54>
 2021350:	d0a7bd17 	ldw	r2,-24844(gp)
 2021354:	1000021e 	bne	r2,zero,2021360 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2021358:	e0bffd17 	ldw	r2,-12(fp)
 202135c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2021360:	e0bffd17 	ldw	r2,-12(fp)
 2021364:	10800217 	ldw	r2,8(r2)
 2021368:	d0e7bd17 	ldw	r3,-24844(gp)
 202136c:	18801d36 	bltu	r3,r2,20213e4 <alt_tick+0xd8>
 2021370:	e0bffd17 	ldw	r2,-12(fp)
 2021374:	10800403 	ldbu	r2,16(r2)
 2021378:	10803fcc 	andi	r2,r2,255
 202137c:	1000191e 	bne	r2,zero,20213e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2021380:	e0bffd17 	ldw	r2,-12(fp)
 2021384:	10800317 	ldw	r2,12(r2)
 2021388:	e0fffd17 	ldw	r3,-12(fp)
 202138c:	18c00517 	ldw	r3,20(r3)
 2021390:	1809883a 	mov	r4,r3
 2021394:	103ee83a 	callr	r2
 2021398:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 202139c:	e0bfff17 	ldw	r2,-4(fp)
 20213a0:	1000031e 	bne	r2,zero,20213b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 20213a4:	e13ffd17 	ldw	r4,-12(fp)
 20213a8:	20212700 	call	2021270 <alt_alarm_stop>
 20213ac:	00000d06 	br	20213e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 20213b0:	e0bffd17 	ldw	r2,-12(fp)
 20213b4:	10c00217 	ldw	r3,8(r2)
 20213b8:	e0bfff17 	ldw	r2,-4(fp)
 20213bc:	1887883a 	add	r3,r3,r2
 20213c0:	e0bffd17 	ldw	r2,-12(fp)
 20213c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20213c8:	e0bffd17 	ldw	r2,-12(fp)
 20213cc:	10c00217 	ldw	r3,8(r2)
 20213d0:	d0a7bd17 	ldw	r2,-24844(gp)
 20213d4:	1880032e 	bgeu	r3,r2,20213e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20213d8:	e0bffd17 	ldw	r2,-12(fp)
 20213dc:	00c00044 	movi	r3,1
 20213e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20213e4:	e0bffe17 	ldw	r2,-8(fp)
 20213e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20213ec:	e0fffd17 	ldw	r3,-12(fp)
 20213f0:	d0a05d04 	addi	r2,gp,-32396
 20213f4:	18bfcf1e 	bne	r3,r2,2021334 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20213f8:	20180f00 	call	20180f0 <OSTimeTick>
}
 20213fc:	0001883a 	nop
 2021400:	e037883a 	mov	sp,fp
 2021404:	dfc00117 	ldw	ra,4(sp)
 2021408:	df000017 	ldw	fp,0(sp)
 202140c:	dec00204 	addi	sp,sp,8
 2021410:	f800283a 	ret

02021414 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2021414:	deffff04 	addi	sp,sp,-4
 2021418:	df000015 	stw	fp,0(sp)
 202141c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2021420:	000170fa 	wrctl	ienable,zero
}
 2021424:	0001883a 	nop
 2021428:	e037883a 	mov	sp,fp
 202142c:	df000017 	ldw	fp,0(sp)
 2021430:	dec00104 	addi	sp,sp,4
 2021434:	f800283a 	ret

02021438 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 2021438:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 202143c:	d0e03017 	ldw	r3,-32576(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 2021440:	d127b617 	ldw	r4,-24872(gp)

      stw ra,  0(sp)
 2021444:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 2021448:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 202144c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 2021450:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 2021454:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 2021458:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 202145c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 2021460:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 2021464:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 2021468:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 202146c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 2021470:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2021474:	20216ac0 	call	20216ac <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 2021478:	d127b117 	ldw	r4,-24892(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 202147c:	d167a907 	ldb	r5,-24924(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 2021480:	d127b615 	stw	r4,-24872(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 2021484:	d167a945 	stb	r5,-24923(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 2021488:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 202148c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 2021490:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 2021494:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 2021498:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 202149c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 20214a0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 20214a4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 20214a8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 20214ac:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 20214b0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 20214b4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 20214b8:	d0e03015 	stw	r3,-32576(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 20214bc:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 20214c0:	f800283a 	ret

020214c4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 20214c4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 20214c8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 20214cc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 20214d0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 20214d4:	20216ac0 	call	20216ac <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 20214d8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 20214dc:	d4a7a745 	stb	r18,-24931(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 20214e0:	003fe506 	br	2021478 <OSCtxSw+0x40>

020214e4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 20214e4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 20214e8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 20214ec:	10800054 	ori	r2,r2,1
      wrctl status, r2
 20214f0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 20214f4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 20214f8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 20214fc:	dec00204 	addi	sp,sp,8

      callr r2
 2021500:	103ee83a 	callr	r2

      nop
 2021504:	0001883a 	nop

02021508 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 2021508:	defff704 	addi	sp,sp,-36
 202150c:	dfc00815 	stw	ra,32(sp)
 2021510:	df000715 	stw	fp,28(sp)
 2021514:	df000704 	addi	fp,sp,28
 2021518:	e13ffc15 	stw	r4,-16(fp)
 202151c:	e17ffd15 	stw	r5,-12(fp)
 2021520:	e1bffe15 	stw	r6,-8(fp)
 2021524:	3805883a 	mov	r2,r7
 2021528:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 202152c:	e0fffe17 	ldw	r3,-8(fp)
 2021530:	00bfff04 	movi	r2,-4
 2021534:	1884703a 	and	r2,r3,r2
 2021538:	10bef704 	addi	r2,r2,-1060
 202153c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 2021540:	01810904 	movi	r6,1060
 2021544:	000b883a 	mov	r5,zero
 2021548:	e13ff917 	ldw	r4,-28(fp)
 202154c:	200952c0 	call	200952c <memset>
 2021550:	e0bff917 	ldw	r2,-28(fp)
 2021554:	10c0bb04 	addi	r3,r2,748
 2021558:	e0bff917 	ldw	r2,-28(fp)
 202155c:	10c00115 	stw	r3,4(r2)
 2021560:	e0bff917 	ldw	r2,-28(fp)
 2021564:	10c0d504 	addi	r3,r2,852
 2021568:	e0bff917 	ldw	r2,-28(fp)
 202156c:	10c00215 	stw	r3,8(r2)
 2021570:	e0bff917 	ldw	r2,-28(fp)
 2021574:	10c0ef04 	addi	r3,r2,956
 2021578:	e0bff917 	ldw	r2,-28(fp)
 202157c:	10c00315 	stw	r3,12(r2)
 2021580:	e0fff917 	ldw	r3,-28(fp)
 2021584:	008080b4 	movhi	r2,514
 2021588:	108aec04 	addi	r2,r2,11184
 202158c:	18800d15 	stw	r2,52(r3)
 2021590:	e0bff917 	ldw	r2,-28(fp)
 2021594:	00c00044 	movi	r3,1
 2021598:	10c02915 	stw	r3,164(r2)
 202159c:	10002a15 	stw	zero,168(r2)
 20215a0:	e0bff917 	ldw	r2,-28(fp)
 20215a4:	00ccc384 	movi	r3,13070
 20215a8:	10c02b0d 	sth	r3,172(r2)
 20215ac:	e0bff917 	ldw	r2,-28(fp)
 20215b0:	00eaf344 	movi	r3,-21555
 20215b4:	10c02b8d 	sth	r3,174(r2)
 20215b8:	e0bff917 	ldw	r2,-28(fp)
 20215bc:	00c48d04 	movi	r3,4660
 20215c0:	10c02c0d 	sth	r3,176(r2)
 20215c4:	e0bff917 	ldw	r2,-28(fp)
 20215c8:	00f99b44 	movi	r3,-6547
 20215cc:	10c02c8d 	sth	r3,178(r2)
 20215d0:	e0bff917 	ldw	r2,-28(fp)
 20215d4:	00f7bb04 	movi	r3,-8468
 20215d8:	10c02d0d 	sth	r3,180(r2)
 20215dc:	e0bff917 	ldw	r2,-28(fp)
 20215e0:	00c00144 	movi	r3,5
 20215e4:	10c02d8d 	sth	r3,182(r2)
 20215e8:	e0bff917 	ldw	r2,-28(fp)
 20215ec:	00c002c4 	movi	r3,11
 20215f0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 20215f4:	e0bff917 	ldw	r2,-28(fp)
 20215f8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 20215fc:	e0bffa17 	ldw	r2,-24(fp)
 2021600:	10bff304 	addi	r2,r2,-52
 2021604:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 2021608:	e0bffb17 	ldw	r2,-20(fp)
 202160c:	10800c04 	addi	r2,r2,48
 2021610:	e0fffc17 	ldw	r3,-16(fp)
 2021614:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 2021618:	e0bffb17 	ldw	r2,-20(fp)
 202161c:	10800b04 	addi	r2,r2,44
 2021620:	e0fffd17 	ldw	r3,-12(fp)
 2021624:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 2021628:	e0bffb17 	ldw	r2,-20(fp)
 202162c:	10800a04 	addi	r2,r2,40
 2021630:	e0fff917 	ldw	r3,-28(fp)
 2021634:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 2021638:	008080b4 	movhi	r2,514
 202163c:	10853904 	addi	r2,r2,5348
 2021640:	10c00104 	addi	r3,r2,4
 2021644:	e0bffb17 	ldw	r2,-20(fp)
 2021648:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 202164c:	e0bffb17 	ldw	r2,-20(fp)
}
 2021650:	e037883a 	mov	sp,fp
 2021654:	dfc00117 	ldw	ra,4(sp)
 2021658:	df000017 	ldw	fp,0(sp)
 202165c:	dec00204 	addi	sp,sp,8
 2021660:	f800283a 	ret

02021664 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 2021664:	defffe04 	addi	sp,sp,-8
 2021668:	df000115 	stw	fp,4(sp)
 202166c:	df000104 	addi	fp,sp,4
 2021670:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 2021674:	0001883a 	nop
 2021678:	e037883a 	mov	sp,fp
 202167c:	df000017 	ldw	fp,0(sp)
 2021680:	dec00104 	addi	sp,sp,4
 2021684:	f800283a 	ret

02021688 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 2021688:	defffe04 	addi	sp,sp,-8
 202168c:	df000115 	stw	fp,4(sp)
 2021690:	df000104 	addi	fp,sp,4
 2021694:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 2021698:	0001883a 	nop
 202169c:	e037883a 	mov	sp,fp
 20216a0:	df000017 	ldw	fp,0(sp)
 20216a4:	dec00104 	addi	sp,sp,4
 20216a8:	f800283a 	ret

020216ac <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 20216ac:	deffff04 	addi	sp,sp,-4
 20216b0:	df000015 	stw	fp,0(sp)
 20216b4:	d839883a 	mov	fp,sp
}
 20216b8:	0001883a 	nop
 20216bc:	e037883a 	mov	sp,fp
 20216c0:	df000017 	ldw	fp,0(sp)
 20216c4:	dec00104 	addi	sp,sp,4
 20216c8:	f800283a 	ret

020216cc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 20216cc:	deffff04 	addi	sp,sp,-4
 20216d0:	df000015 	stw	fp,0(sp)
 20216d4:	d839883a 	mov	fp,sp
}
 20216d8:	0001883a 	nop
 20216dc:	e037883a 	mov	sp,fp
 20216e0:	df000017 	ldw	fp,0(sp)
 20216e4:	dec00104 	addi	sp,sp,4
 20216e8:	f800283a 	ret

020216ec <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 20216ec:	deffff04 	addi	sp,sp,-4
 20216f0:	df000015 	stw	fp,0(sp)
 20216f4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 20216f8:	0001883a 	nop
 20216fc:	e037883a 	mov	sp,fp
 2021700:	df000017 	ldw	fp,0(sp)
 2021704:	dec00104 	addi	sp,sp,4
 2021708:	f800283a 	ret

0202170c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 202170c:	deffff04 	addi	sp,sp,-4
 2021710:	df000015 	stw	fp,0(sp)
 2021714:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 2021718:	0001883a 	nop
 202171c:	e037883a 	mov	sp,fp
 2021720:	df000017 	ldw	fp,0(sp)
 2021724:	dec00104 	addi	sp,sp,4
 2021728:	f800283a 	ret

0202172c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 202172c:	deffff04 	addi	sp,sp,-4
 2021730:	df000015 	stw	fp,0(sp)
 2021734:	d839883a 	mov	fp,sp
}
 2021738:	0001883a 	nop
 202173c:	e037883a 	mov	sp,fp
 2021740:	df000017 	ldw	fp,0(sp)
 2021744:	dec00104 	addi	sp,sp,4
 2021748:	f800283a 	ret

0202174c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 202174c:	deffff04 	addi	sp,sp,-4
 2021750:	df000015 	stw	fp,0(sp)
 2021754:	d839883a 	mov	fp,sp
}
 2021758:	0001883a 	nop
 202175c:	e037883a 	mov	sp,fp
 2021760:	df000017 	ldw	fp,0(sp)
 2021764:	dec00104 	addi	sp,sp,4
 2021768:	f800283a 	ret

0202176c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 202176c:	defffe04 	addi	sp,sp,-8
 2021770:	df000115 	stw	fp,4(sp)
 2021774:	df000104 	addi	fp,sp,4
 2021778:	e13fff15 	stw	r4,-4(fp)
}
 202177c:	0001883a 	nop
 2021780:	e037883a 	mov	sp,fp
 2021784:	df000017 	ldw	fp,0(sp)
 2021788:	dec00104 	addi	sp,sp,4
 202178c:	f800283a 	ret

02021790 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2021790:	defffb04 	addi	sp,sp,-20
 2021794:	dfc00415 	stw	ra,16(sp)
 2021798:	df000315 	stw	fp,12(sp)
 202179c:	df000304 	addi	fp,sp,12
 20217a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20217a4:	d0a03617 	ldw	r2,-32552(gp)
 20217a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20217ac:	00003106 	br	2021874 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 20217b0:	e0bffd17 	ldw	r2,-12(fp)
 20217b4:	10800217 	ldw	r2,8(r2)
 20217b8:	1009883a 	mov	r4,r2
 20217bc:	200990c0 	call	200990c <strlen>
 20217c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20217c4:	e0bffd17 	ldw	r2,-12(fp)
 20217c8:	10c00217 	ldw	r3,8(r2)
 20217cc:	e0bffe17 	ldw	r2,-8(fp)
 20217d0:	10bfffc4 	addi	r2,r2,-1
 20217d4:	1885883a 	add	r2,r3,r2
 20217d8:	10800003 	ldbu	r2,0(r2)
 20217dc:	10803fcc 	andi	r2,r2,255
 20217e0:	1080201c 	xori	r2,r2,128
 20217e4:	10bfe004 	addi	r2,r2,-128
 20217e8:	10800bd8 	cmpnei	r2,r2,47
 20217ec:	1000031e 	bne	r2,zero,20217fc <alt_find_file+0x6c>
    {
      len -= 1;
 20217f0:	e0bffe17 	ldw	r2,-8(fp)
 20217f4:	10bfffc4 	addi	r2,r2,-1
 20217f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20217fc:	e0bffe17 	ldw	r2,-8(fp)
 2021800:	e0ffff17 	ldw	r3,-4(fp)
 2021804:	1885883a 	add	r2,r3,r2
 2021808:	10800003 	ldbu	r2,0(r2)
 202180c:	10803fcc 	andi	r2,r2,255
 2021810:	1080201c 	xori	r2,r2,128
 2021814:	10bfe004 	addi	r2,r2,-128
 2021818:	10800be0 	cmpeqi	r2,r2,47
 202181c:	1000081e 	bne	r2,zero,2021840 <alt_find_file+0xb0>
 2021820:	e0bffe17 	ldw	r2,-8(fp)
 2021824:	e0ffff17 	ldw	r3,-4(fp)
 2021828:	1885883a 	add	r2,r3,r2
 202182c:	10800003 	ldbu	r2,0(r2)
 2021830:	10803fcc 	andi	r2,r2,255
 2021834:	1080201c 	xori	r2,r2,128
 2021838:	10bfe004 	addi	r2,r2,-128
 202183c:	10000a1e 	bne	r2,zero,2021868 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2021840:	e0bffd17 	ldw	r2,-12(fp)
 2021844:	10800217 	ldw	r2,8(r2)
 2021848:	e0fffe17 	ldw	r3,-8(fp)
 202184c:	180d883a 	mov	r6,r3
 2021850:	e17fff17 	ldw	r5,-4(fp)
 2021854:	1009883a 	mov	r4,r2
 2021858:	2021b240 	call	2021b24 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 202185c:	1000021e 	bne	r2,zero,2021868 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2021860:	e0bffd17 	ldw	r2,-12(fp)
 2021864:	00000706 	br	2021884 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2021868:	e0bffd17 	ldw	r2,-12(fp)
 202186c:	10800017 	ldw	r2,0(r2)
 2021870:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2021874:	e0fffd17 	ldw	r3,-12(fp)
 2021878:	d0a03604 	addi	r2,gp,-32552
 202187c:	18bfcc1e 	bne	r3,r2,20217b0 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2021880:	0005883a 	mov	r2,zero
}
 2021884:	e037883a 	mov	sp,fp
 2021888:	dfc00117 	ldw	ra,4(sp)
 202188c:	df000017 	ldw	fp,0(sp)
 2021890:	dec00204 	addi	sp,sp,8
 2021894:	f800283a 	ret

02021898 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2021898:	defff904 	addi	sp,sp,-28
 202189c:	dfc00615 	stw	ra,24(sp)
 20218a0:	df000515 	stw	fp,20(sp)
 20218a4:	df000504 	addi	fp,sp,20
 20218a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 20218ac:	00bffa04 	movi	r2,-24
 20218b0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 20218b4:	d0a79f17 	ldw	r2,-24964(gp)
 20218b8:	e0bffd15 	stw	r2,-12(fp)
 20218bc:	e03ffe0d 	sth	zero,-8(fp)
 20218c0:	e0bffe0b 	ldhu	r2,-8(fp)
 20218c4:	e0fffe84 	addi	r3,fp,-6
 20218c8:	180d883a 	mov	r6,r3
 20218cc:	100b883a 	mov	r5,r2
 20218d0:	e13ffd17 	ldw	r4,-12(fp)
 20218d4:	201d3fc0 	call	201d3fc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20218d8:	e03ffb15 	stw	zero,-20(fp)
 20218dc:	00001906 	br	2021944 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 20218e0:	008080b4 	movhi	r2,514
 20218e4:	108d2c04 	addi	r2,r2,13488
 20218e8:	e0fffb17 	ldw	r3,-20(fp)
 20218ec:	18c00324 	muli	r3,r3,12
 20218f0:	10c5883a 	add	r2,r2,r3
 20218f4:	10800017 	ldw	r2,0(r2)
 20218f8:	10000f1e 	bne	r2,zero,2021938 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 20218fc:	008080b4 	movhi	r2,514
 2021900:	108d2c04 	addi	r2,r2,13488
 2021904:	e0fffb17 	ldw	r3,-20(fp)
 2021908:	18c00324 	muli	r3,r3,12
 202190c:	10c5883a 	add	r2,r2,r3
 2021910:	e0ffff17 	ldw	r3,-4(fp)
 2021914:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2021918:	d0e03a17 	ldw	r3,-32536(gp)
 202191c:	e0bffb17 	ldw	r2,-20(fp)
 2021920:	1880020e 	bge	r3,r2,202192c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 2021924:	e0bffb17 	ldw	r2,-20(fp)
 2021928:	d0a03a15 	stw	r2,-32536(gp)
      }
      rc = i;
 202192c:	e0bffb17 	ldw	r2,-20(fp)
 2021930:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 2021934:	00000606 	br	2021950 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2021938:	e0bffb17 	ldw	r2,-20(fp)
 202193c:	10800044 	addi	r2,r2,1
 2021940:	e0bffb15 	stw	r2,-20(fp)
 2021944:	e0bffb17 	ldw	r2,-20(fp)
 2021948:	10800810 	cmplti	r2,r2,32
 202194c:	103fe41e 	bne	r2,zero,20218e0 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 2021950:	d0a79f17 	ldw	r2,-24964(gp)
 2021954:	1009883a 	mov	r4,r2
 2021958:	201d7740 	call	201d774 <OSSemPost>

  return rc;
 202195c:	e0bffc17 	ldw	r2,-16(fp)
}
 2021960:	e037883a 	mov	sp,fp
 2021964:	dfc00117 	ldw	ra,4(sp)
 2021968:	df000017 	ldw	fp,0(sp)
 202196c:	dec00204 	addi	sp,sp,8
 2021970:	f800283a 	ret

02021974 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2021974:	defffb04 	addi	sp,sp,-20
 2021978:	df000415 	stw	fp,16(sp)
 202197c:	df000404 	addi	fp,sp,16
 2021980:	e13ffe15 	stw	r4,-8(fp)
 2021984:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2021988:	e0bfff17 	ldw	r2,-4(fp)
 202198c:	10840070 	cmpltui	r2,r2,4097
 2021990:	1000021e 	bne	r2,zero,202199c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2021994:	00840004 	movi	r2,4096
 2021998:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 202199c:	e0fffe17 	ldw	r3,-8(fp)
 20219a0:	e0bfff17 	ldw	r2,-4(fp)
 20219a4:	1885883a 	add	r2,r3,r2
 20219a8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 20219ac:	e0bffe17 	ldw	r2,-8(fp)
 20219b0:	e0bffc15 	stw	r2,-16(fp)
 20219b4:	00000506 	br	20219cc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 20219b8:	e0bffc17 	ldw	r2,-16(fp)
 20219bc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 20219c0:	e0bffc17 	ldw	r2,-16(fp)
 20219c4:	10800804 	addi	r2,r2,32
 20219c8:	e0bffc15 	stw	r2,-16(fp)
 20219cc:	e0fffc17 	ldw	r3,-16(fp)
 20219d0:	e0bffd17 	ldw	r2,-12(fp)
 20219d4:	18bff836 	bltu	r3,r2,20219b8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 20219d8:	e0bffe17 	ldw	r2,-8(fp)
 20219dc:	108007cc 	andi	r2,r2,31
 20219e0:	10000226 	beq	r2,zero,20219ec <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 20219e4:	e0bffc17 	ldw	r2,-16(fp)
 20219e8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 20219ec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 20219f0:	0001883a 	nop
 20219f4:	e037883a 	mov	sp,fp
 20219f8:	df000017 	ldw	fp,0(sp)
 20219fc:	dec00104 	addi	sp,sp,4
 2021a00:	f800283a 	ret

02021a04 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2021a04:	defffe04 	addi	sp,sp,-8
 2021a08:	df000115 	stw	fp,4(sp)
 2021a0c:	df000104 	addi	fp,sp,4
 2021a10:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2021a14:	e0bfff17 	ldw	r2,-4(fp)
 2021a18:	10bffe84 	addi	r2,r2,-6
 2021a1c:	10c00428 	cmpgeui	r3,r2,16
 2021a20:	18001a1e 	bne	r3,zero,2021a8c <alt_exception_cause_generated_bad_addr+0x88>
 2021a24:	100690ba 	slli	r3,r2,2
 2021a28:	008080b4 	movhi	r2,514
 2021a2c:	10868f04 	addi	r2,r2,6716
 2021a30:	1885883a 	add	r2,r3,r2
 2021a34:	10800017 	ldw	r2,0(r2)
 2021a38:	1000683a 	jmp	r2
 2021a3c:	02021a7c 	xorhi	r8,zero,2153
 2021a40:	02021a7c 	xorhi	r8,zero,2153
 2021a44:	02021a8c 	andi	r8,zero,2154
 2021a48:	02021a8c 	andi	r8,zero,2154
 2021a4c:	02021a8c 	andi	r8,zero,2154
 2021a50:	02021a7c 	xorhi	r8,zero,2153
 2021a54:	02021a84 	movi	r8,2154
 2021a58:	02021a8c 	andi	r8,zero,2154
 2021a5c:	02021a7c 	xorhi	r8,zero,2153
 2021a60:	02021a7c 	xorhi	r8,zero,2153
 2021a64:	02021a8c 	andi	r8,zero,2154
 2021a68:	02021a7c 	xorhi	r8,zero,2153
 2021a6c:	02021a84 	movi	r8,2154
 2021a70:	02021a8c 	andi	r8,zero,2154
 2021a74:	02021a8c 	andi	r8,zero,2154
 2021a78:	02021a7c 	xorhi	r8,zero,2153
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2021a7c:	00800044 	movi	r2,1
 2021a80:	00000306 	br	2021a90 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2021a84:	0005883a 	mov	r2,zero
 2021a88:	00000106 	br	2021a90 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2021a8c:	0005883a 	mov	r2,zero
  }
}
 2021a90:	e037883a 	mov	sp,fp
 2021a94:	df000017 	ldw	fp,0(sp)
 2021a98:	dec00104 	addi	sp,sp,4
 2021a9c:	f800283a 	ret

02021aa0 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 2021aa0:	defffd04 	addi	sp,sp,-12
 2021aa4:	dfc00215 	stw	ra,8(sp)
 2021aa8:	df000115 	stw	fp,4(sp)
 2021aac:	df000104 	addi	fp,sp,4
 2021ab0:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 2021ab4:	000f883a 	mov	r7,zero
 2021ab8:	000d883a 	mov	r6,zero
 2021abc:	e17fff17 	ldw	r5,-4(fp)
 2021ac0:	0009883a 	mov	r4,zero
 2021ac4:	2021c580 	call	2021c58 <__register_exitproc>
}
 2021ac8:	e037883a 	mov	sp,fp
 2021acc:	dfc00117 	ldw	ra,4(sp)
 2021ad0:	df000017 	ldw	fp,0(sp)
 2021ad4:	dec00204 	addi	sp,sp,8
 2021ad8:	f800283a 	ret

02021adc <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 2021adc:	defffd04 	addi	sp,sp,-12
 2021ae0:	dfc00215 	stw	ra,8(sp)
 2021ae4:	df000115 	stw	fp,4(sp)
 2021ae8:	df000104 	addi	fp,sp,4
 2021aec:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 2021af0:	000b883a 	mov	r5,zero
 2021af4:	e13fff17 	ldw	r4,-4(fp)
 2021af8:	2021dc80 	call	2021dc8 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 2021afc:	d0a03117 	ldw	r2,-32572(gp)
 2021b00:	10800f17 	ldw	r2,60(r2)
 2021b04:	10000526 	beq	r2,zero,2021b1c <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 2021b08:	d0a03117 	ldw	r2,-32572(gp)
 2021b0c:	10800f17 	ldw	r2,60(r2)
 2021b10:	d0e03117 	ldw	r3,-32572(gp)
 2021b14:	1809883a 	mov	r4,r3
 2021b18:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 2021b1c:	e13fff17 	ldw	r4,-4(fp)
 2021b20:	2021fb40 	call	2021fb4 <_exit>

02021b24 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 2021b24:	defff804 	addi	sp,sp,-32
 2021b28:	df000715 	stw	fp,28(sp)
 2021b2c:	df000704 	addi	fp,sp,28
 2021b30:	e13ffd15 	stw	r4,-12(fp)
 2021b34:	e17ffe15 	stw	r5,-8(fp)
 2021b38:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 2021b3c:	e0bffd17 	ldw	r2,-12(fp)
 2021b40:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 2021b44:	e0bffe17 	ldw	r2,-8(fp)
 2021b48:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 2021b4c:	e0bfff17 	ldw	r2,-4(fp)
 2021b50:	10800130 	cmpltui	r2,r2,4
 2021b54:	1000371e 	bne	r2,zero,2021c34 <memcmp+0x110>
 2021b58:	e0fff917 	ldw	r3,-28(fp)
 2021b5c:	e0bffa17 	ldw	r2,-24(fp)
 2021b60:	1884b03a 	or	r2,r3,r2
 2021b64:	108000cc 	andi	r2,r2,3
 2021b68:	1000321e 	bne	r2,zero,2021c34 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 2021b6c:	e0bff917 	ldw	r2,-28(fp)
 2021b70:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 2021b74:	e0bffa17 	ldw	r2,-24(fp)
 2021b78:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 2021b7c:	00000e06 	br	2021bb8 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 2021b80:	e0bffb17 	ldw	r2,-20(fp)
 2021b84:	10c00017 	ldw	r3,0(r2)
 2021b88:	e0bffc17 	ldw	r2,-16(fp)
 2021b8c:	10800017 	ldw	r2,0(r2)
 2021b90:	18800d1e 	bne	r3,r2,2021bc8 <memcmp+0xa4>
   	    break;
          a1++;
 2021b94:	e0bffb17 	ldw	r2,-20(fp)
 2021b98:	10800104 	addi	r2,r2,4
 2021b9c:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 2021ba0:	e0bffc17 	ldw	r2,-16(fp)
 2021ba4:	10800104 	addi	r2,r2,4
 2021ba8:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 2021bac:	e0bfff17 	ldw	r2,-4(fp)
 2021bb0:	10bfff04 	addi	r2,r2,-4
 2021bb4:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 2021bb8:	e0bfff17 	ldw	r2,-4(fp)
 2021bbc:	10800128 	cmpgeui	r2,r2,4
 2021bc0:	103fef1e 	bne	r2,zero,2021b80 <memcmp+0x5c>
 2021bc4:	00000106 	br	2021bcc <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 2021bc8:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 2021bcc:	e0bffb17 	ldw	r2,-20(fp)
 2021bd0:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 2021bd4:	e0bffc17 	ldw	r2,-16(fp)
 2021bd8:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 2021bdc:	00001506 	br	2021c34 <memcmp+0x110>
    {
      if (*s1 != *s2)
 2021be0:	e0bff917 	ldw	r2,-28(fp)
 2021be4:	10c00003 	ldbu	r3,0(r2)
 2021be8:	e0bffa17 	ldw	r2,-24(fp)
 2021bec:	10800003 	ldbu	r2,0(r2)
 2021bf0:	18c03fcc 	andi	r3,r3,255
 2021bf4:	10803fcc 	andi	r2,r2,255
 2021bf8:	18800826 	beq	r3,r2,2021c1c <memcmp+0xf8>
	return *s1 - *s2;
 2021bfc:	e0bff917 	ldw	r2,-28(fp)
 2021c00:	10800003 	ldbu	r2,0(r2)
 2021c04:	10c03fcc 	andi	r3,r2,255
 2021c08:	e0bffa17 	ldw	r2,-24(fp)
 2021c0c:	10800003 	ldbu	r2,0(r2)
 2021c10:	10803fcc 	andi	r2,r2,255
 2021c14:	1885c83a 	sub	r2,r3,r2
 2021c18:	00000b06 	br	2021c48 <memcmp+0x124>
      s1++;
 2021c1c:	e0bff917 	ldw	r2,-28(fp)
 2021c20:	10800044 	addi	r2,r2,1
 2021c24:	e0bff915 	stw	r2,-28(fp)
      s2++;
 2021c28:	e0bffa17 	ldw	r2,-24(fp)
 2021c2c:	10800044 	addi	r2,r2,1
 2021c30:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 2021c34:	e0bfff17 	ldw	r2,-4(fp)
 2021c38:	10ffffc4 	addi	r3,r2,-1
 2021c3c:	e0ffff15 	stw	r3,-4(fp)
 2021c40:	103fe71e 	bne	r2,zero,2021be0 <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 2021c44:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2021c48:	e037883a 	mov	sp,fp
 2021c4c:	df000017 	ldw	fp,0(sp)
 2021c50:	dec00104 	addi	sp,sp,4
 2021c54:	f800283a 	ret

02021c58 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 2021c58:	defff804 	addi	sp,sp,-32
 2021c5c:	dfc00715 	stw	ra,28(sp)
 2021c60:	df000615 	stw	fp,24(sp)
 2021c64:	dc000515 	stw	r16,20(sp)
 2021c68:	df000604 	addi	fp,sp,24
 2021c6c:	e13ffb15 	stw	r4,-20(fp)
 2021c70:	e17ffc15 	stw	r5,-16(fp)
 2021c74:	e1bffd15 	stw	r6,-12(fp)
 2021c78:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 2021c7c:	d0a03117 	ldw	r2,-32572(gp)
 2021c80:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 2021c84:	8000041e 	bne	r16,zero,2021c98 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 2021c88:	d0a03117 	ldw	r2,-32572(gp)
 2021c8c:	d0e03117 	ldw	r3,-32572(gp)
 2021c90:	1c005304 	addi	r16,r3,332
 2021c94:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 2021c98:	80800117 	ldw	r2,4(r16)
 2021c9c:	10800810 	cmplti	r2,r2,32
 2021ca0:	1000131e 	bne	r2,zero,2021cf0 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 2021ca4:	00800034 	movhi	r2,0
 2021ca8:	10800004 	addi	r2,r2,0
 2021cac:	1000021e 	bne	r2,zero,2021cb8 <__register_exitproc+0x60>
	return -1;
 2021cb0:	00bfffc4 	movi	r2,-1
 2021cb4:	00003e06 	br	2021db0 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 2021cb8:	01006404 	movi	r4,400
 2021cbc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 2021cc0:	1021883a 	mov	r16,r2
      if (p == NULL)
 2021cc4:	8000021e 	bne	r16,zero,2021cd0 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 2021cc8:	00bfffc4 	movi	r2,-1
 2021ccc:	00003806 	br	2021db0 <__register_exitproc+0x158>
	}
      p->_ind = 0;
 2021cd0:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 2021cd4:	d0a03117 	ldw	r2,-32572(gp)
 2021cd8:	10805217 	ldw	r2,328(r2)
 2021cdc:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 2021ce0:	d0a03117 	ldw	r2,-32572(gp)
 2021ce4:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 2021ce8:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 2021cec:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 2021cf0:	e0bffb17 	ldw	r2,-20(fp)
 2021cf4:	10002426 	beq	r2,zero,2021d88 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 2021cf8:	80802204 	addi	r2,r16,136
 2021cfc:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 2021d00:	80800117 	ldw	r2,4(r16)
 2021d04:	e0fffa17 	ldw	r3,-24(fp)
 2021d08:	1085883a 	add	r2,r2,r2
 2021d0c:	1085883a 	add	r2,r2,r2
 2021d10:	1885883a 	add	r2,r3,r2
 2021d14:	e0fffd17 	ldw	r3,-12(fp)
 2021d18:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 2021d1c:	e0bffa17 	ldw	r2,-24(fp)
 2021d20:	10804017 	ldw	r2,256(r2)
 2021d24:	80c00117 	ldw	r3,4(r16)
 2021d28:	01000044 	movi	r4,1
 2021d2c:	20c6983a 	sll	r3,r4,r3
 2021d30:	10c6b03a 	or	r3,r2,r3
 2021d34:	e0bffa17 	ldw	r2,-24(fp)
 2021d38:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 2021d3c:	80800117 	ldw	r2,4(r16)
 2021d40:	e0fffa17 	ldw	r3,-24(fp)
 2021d44:	10800804 	addi	r2,r2,32
 2021d48:	1085883a 	add	r2,r2,r2
 2021d4c:	1085883a 	add	r2,r2,r2
 2021d50:	1885883a 	add	r2,r3,r2
 2021d54:	e0fffe17 	ldw	r3,-8(fp)
 2021d58:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 2021d5c:	e0bffb17 	ldw	r2,-20(fp)
 2021d60:	10800098 	cmpnei	r2,r2,2
 2021d64:	1000081e 	bne	r2,zero,2021d88 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 2021d68:	e0bffa17 	ldw	r2,-24(fp)
 2021d6c:	10804117 	ldw	r2,260(r2)
 2021d70:	80c00117 	ldw	r3,4(r16)
 2021d74:	01000044 	movi	r4,1
 2021d78:	20c6983a 	sll	r3,r4,r3
 2021d7c:	10c6b03a 	or	r3,r2,r3
 2021d80:	e0bffa17 	ldw	r2,-24(fp)
 2021d84:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 2021d88:	80800117 	ldw	r2,4(r16)
 2021d8c:	10c00044 	addi	r3,r2,1
 2021d90:	80c00115 	stw	r3,4(r16)
 2021d94:	10800084 	addi	r2,r2,2
 2021d98:	1085883a 	add	r2,r2,r2
 2021d9c:	1085883a 	add	r2,r2,r2
 2021da0:	8085883a 	add	r2,r16,r2
 2021da4:	e0fffc17 	ldw	r3,-16(fp)
 2021da8:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 2021dac:	0005883a 	mov	r2,zero
}
 2021db0:	e6ffff04 	addi	sp,fp,-4
 2021db4:	dfc00217 	ldw	ra,8(sp)
 2021db8:	df000117 	ldw	fp,4(sp)
 2021dbc:	dc000017 	ldw	r16,0(sp)
 2021dc0:	dec00304 	addi	sp,sp,12
 2021dc4:	f800283a 	ret

02021dc8 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 2021dc8:	defff504 	addi	sp,sp,-44
 2021dcc:	dfc00a15 	stw	ra,40(sp)
 2021dd0:	df000915 	stw	fp,36(sp)
 2021dd4:	dc800815 	stw	r18,32(sp)
 2021dd8:	dc400715 	stw	r17,28(sp)
 2021ddc:	dc000615 	stw	r16,24(sp)
 2021de0:	df000904 	addi	fp,sp,36
 2021de4:	e13ffb15 	stw	r4,-20(fp)
 2021de8:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 2021dec:	d0a03117 	ldw	r2,-32572(gp)
 2021df0:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 2021df4:	d0a03117 	ldw	r2,-32572(gp)
 2021df8:	10805204 	addi	r2,r2,328
 2021dfc:	e0bff715 	stw	r2,-36(fp)
  while (p)
 2021e00:	00006006 	br	2021f84 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 2021e04:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 2021e08:	80800117 	ldw	r2,4(r16)
 2021e0c:	147fffc4 	addi	r17,r2,-1
 2021e10:	00004a06 	br	2021f3c <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 2021e14:	00800044 	movi	r2,1
 2021e18:	1444983a 	sll	r2,r2,r17
 2021e1c:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 2021e20:	e0bffc17 	ldw	r2,-16(fp)
 2021e24:	10000826 	beq	r2,zero,2021e48 <__call_exitprocs+0x80>
 2021e28:	90004026 	beq	r18,zero,2021f2c <__call_exitprocs+0x164>
 2021e2c:	88800804 	addi	r2,r17,32
 2021e30:	1085883a 	add	r2,r2,r2
 2021e34:	1085883a 	add	r2,r2,r2
 2021e38:	9085883a 	add	r2,r18,r2
 2021e3c:	10c00017 	ldw	r3,0(r2)
 2021e40:	e0bffc17 	ldw	r2,-16(fp)
 2021e44:	1880391e 	bne	r3,r2,2021f2c <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 2021e48:	88800084 	addi	r2,r17,2
 2021e4c:	1085883a 	add	r2,r2,r2
 2021e50:	1085883a 	add	r2,r2,r2
 2021e54:	8085883a 	add	r2,r16,r2
 2021e58:	10800017 	ldw	r2,0(r2)
 2021e5c:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 2021e60:	80800117 	ldw	r2,4(r16)
 2021e64:	10bfffc4 	addi	r2,r2,-1
 2021e68:	1440041e 	bne	r2,r17,2021e7c <__call_exitprocs+0xb4>
	    p->_ind--;
 2021e6c:	80800117 	ldw	r2,4(r16)
 2021e70:	10bfffc4 	addi	r2,r2,-1
 2021e74:	80800115 	stw	r2,4(r16)
 2021e78:	00000506 	br	2021e90 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 2021e7c:	88800084 	addi	r2,r17,2
 2021e80:	1085883a 	add	r2,r2,r2
 2021e84:	1085883a 	add	r2,r2,r2
 2021e88:	8085883a 	add	r2,r16,r2
 2021e8c:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 2021e90:	e0bff917 	ldw	r2,-28(fp)
 2021e94:	10002726 	beq	r2,zero,2021f34 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 2021e98:	80800117 	ldw	r2,4(r16)
 2021e9c:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 2021ea0:	90000426 	beq	r18,zero,2021eb4 <__call_exitprocs+0xec>
 2021ea4:	90c04017 	ldw	r3,256(r18)
 2021ea8:	e0bff817 	ldw	r2,-32(fp)
 2021eac:	1884703a 	and	r2,r3,r2
 2021eb0:	1000031e 	bne	r2,zero,2021ec0 <__call_exitprocs+0xf8>
	    fn ();
 2021eb4:	e0bff917 	ldw	r2,-28(fp)
 2021eb8:	103ee83a 	callr	r2
 2021ebc:	00001406 	br	2021f10 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 2021ec0:	90c04117 	ldw	r3,260(r18)
 2021ec4:	e0bff817 	ldw	r2,-32(fp)
 2021ec8:	1884703a 	and	r2,r3,r2
 2021ecc:	1000091e 	bne	r2,zero,2021ef4 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 2021ed0:	8c45883a 	add	r2,r17,r17
 2021ed4:	1085883a 	add	r2,r2,r2
 2021ed8:	9085883a 	add	r2,r18,r2
 2021edc:	10c00017 	ldw	r3,0(r2)
 2021ee0:	e0bff917 	ldw	r2,-28(fp)
 2021ee4:	180b883a 	mov	r5,r3
 2021ee8:	e13ffb17 	ldw	r4,-20(fp)
 2021eec:	103ee83a 	callr	r2
 2021ef0:	00000706 	br	2021f10 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 2021ef4:	8c45883a 	add	r2,r17,r17
 2021ef8:	1085883a 	add	r2,r2,r2
 2021efc:	9085883a 	add	r2,r18,r2
 2021f00:	10c00017 	ldw	r3,0(r2)
 2021f04:	e0bff917 	ldw	r2,-28(fp)
 2021f08:	1809883a 	mov	r4,r3
 2021f0c:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 2021f10:	80c00117 	ldw	r3,4(r16)
 2021f14:	e0bffa17 	ldw	r2,-24(fp)
 2021f18:	18bfb41e 	bne	r3,r2,2021dec <__call_exitprocs+0x24>
 2021f1c:	e0bff717 	ldw	r2,-36(fp)
 2021f20:	10800017 	ldw	r2,0(r2)
 2021f24:	143fb11e 	bne	r2,r16,2021dec <__call_exitprocs+0x24>
 2021f28:	00000306 	br	2021f38 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 2021f2c:	0001883a 	nop
 2021f30:	00000106 	br	2021f38 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 2021f34:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 2021f38:	8c7fffc4 	addi	r17,r17,-1
 2021f3c:	883fb50e 	bge	r17,zero,2021e14 <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 2021f40:	00800034 	movhi	r2,0
 2021f44:	10800004 	addi	r2,r2,0
 2021f48:	10001026 	beq	r2,zero,2021f8c <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 2021f4c:	80800117 	ldw	r2,4(r16)
 2021f50:	10000a1e 	bne	r2,zero,2021f7c <__call_exitprocs+0x1b4>
 2021f54:	80800017 	ldw	r2,0(r16)
 2021f58:	10000826 	beq	r2,zero,2021f7c <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 2021f5c:	80c00017 	ldw	r3,0(r16)
 2021f60:	e0bff717 	ldw	r2,-36(fp)
 2021f64:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 2021f68:	8009883a 	mov	r4,r16
 2021f6c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
	  p = *lastp;
 2021f70:	e0bff717 	ldw	r2,-36(fp)
 2021f74:	14000017 	ldw	r16,0(r2)
 2021f78:	00000206 	br	2021f84 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 2021f7c:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 2021f80:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 2021f84:	803f9f1e 	bne	r16,zero,2021e04 <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 2021f88:	00000106 	br	2021f90 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 2021f8c:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 2021f90:	0001883a 	nop
 2021f94:	e6fffd04 	addi	sp,fp,-12
 2021f98:	dfc00417 	ldw	ra,16(sp)
 2021f9c:	df000317 	ldw	fp,12(sp)
 2021fa0:	dc800217 	ldw	r18,8(sp)
 2021fa4:	dc400117 	ldw	r17,4(sp)
 2021fa8:	dc000017 	ldw	r16,0(sp)
 2021fac:	dec00504 	addi	sp,sp,20
 2021fb0:	f800283a 	ret

02021fb4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2021fb4:	defffd04 	addi	sp,sp,-12
 2021fb8:	df000215 	stw	fp,8(sp)
 2021fbc:	df000204 	addi	fp,sp,8
 2021fc0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2021fc4:	d027a745 	stb	zero,-24931(gp)
 2021fc8:	e0bfff17 	ldw	r2,-4(fp)
 2021fcc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2021fd0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2021fd4:	10000226 	beq	r2,zero,2021fe0 <_exit+0x2c>
    ALT_SIM_FAIL();
 2021fd8:	002af070 	cmpltui	zero,zero,43969
 2021fdc:	00000106 	br	2021fe4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2021fe0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2021fe4:	003fff06 	br	2021fe4 <_exit+0x30>
