
Projet-Master1.elf:     file format elf32-littlenios2
Projet-Master1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000248

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x000234b0 memsz 0x000234b0 flags r-x
    LOAD off    0x000244d0 vaddr 0x020234d0 paddr 0x02025160 align 2**12
         filesz 0x00001c90 memsz 0x00001c90 flags rw-
    LOAD off    0x00026df0 vaddr 0x02026df0 paddr 0x02026df0 align 2**12
         filesz 0x00000000 memsz 0x0000b440 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0002267c  02000248  02000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c0c  020228c4  020228c4  000238c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c90  020234d0  02025160  000244d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b440  02026df0  02026df0  00026df0  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  00026160  2**0
                  CONTENTS
  7 .sdram_controller 00000000  02032230  02032230  00026160  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00026160  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001320  00000000  00000000  00026188  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002ee82  00000000  00000000  000274a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b164  00000000  00000000  0005632a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fcba  00000000  00000000  0006148e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003ba0  00000000  00000000  00071148  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005e8c  00000000  00000000  00074ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009061  00000000  00000000  0007ab74  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00083bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014a8  00000000  00000000  00083c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008a922  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0008a928  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008a92b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008a92c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008a92d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008a931  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008a935  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008a939  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008a942  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008a94b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0008a954  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  0008a95d  2**0
                  CONTENTS, READONLY
 30 .jdi          00005000  00000000  00000000  0008a991  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006901b  00000000  00000000  0008f991  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000248 l    d  .text	00000000 .text
020228c4 l    d  .rodata	00000000 .rodata
020234d0 l    d  .rwdata	00000000 .rwdata
02026df0 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
02032230 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Projet-Master1_bsp//obj/HAL/src/crt0.o
02000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 physics.c
00000000 l    df *ABS*	00000000 s_fmin.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sf_cos.c
02024fe8 l     O .rwdata	00000004 one
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 wf_atan2.c
00000000 l    df *ABS*	00000000 e_sqrt.c
02024fec l     O .rwdata	00000008 one
02024ff4 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 ef_atan2.c
02024ffc l     O .rwdata	00000004 tiny
02025000 l     O .rwdata	00000004 zero
02025004 l     O .rwdata	00000004 pi_o_4
02025008 l     O .rwdata	00000004 pi_o_2
0202500c l     O .rwdata	00000004 pi
02025010 l     O .rwdata	00000004 pi_lo
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
02022c08 l     O .rodata	00000318 two_over_pi
02022f20 l     O .rodata	00000080 npio2_hw
02025014 l     O .rwdata	00000004 zero
02025018 l     O .rwdata	00000004 half
0202501c l     O .rwdata	00000004 two8
02025020 l     O .rwdata	00000004 invpio2
02025024 l     O .rwdata	00000004 pio2_1
02025028 l     O .rwdata	00000004 pio2_1t
0202502c l     O .rwdata	00000004 pio2_2
02025030 l     O .rwdata	00000004 pio2_2t
02025034 l     O .rwdata	00000004 pio2_3
02025038 l     O .rwdata	00000004 pio2_3t
00000000 l    df *ABS*	00000000 kf_cos.c
0202503c l     O .rwdata	00000004 one
02025040 l     O .rwdata	00000004 C1
02025044 l     O .rwdata	00000004 C2
02025048 l     O .rwdata	00000004 C3
0202504c l     O .rwdata	00000004 C4
02025050 l     O .rwdata	00000004 C5
02025054 l     O .rwdata	00000004 C6
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
02022fa0 l     O .rodata	0000000c init_jk
02022fac l     O .rodata	0000002c PIo2
02025058 l     O .rwdata	00000004 zero
0202505c l     O .rwdata	00000004 one
02025060 l     O .rwdata	00000004 two8
02025064 l     O .rwdata	00000004 twon8
00000000 l    df *ABS*	00000000 kf_sin.c
02025068 l     O .rwdata	00000004 half
0202506c l     O .rwdata	00000004 S1
02025070 l     O .rwdata	00000004 S2
02025074 l     O .rwdata	00000004 S3
02025078 l     O .rwdata	00000004 S4
0202507c l     O .rwdata	00000004 S5
02025080 l     O .rwdata	00000004 S6
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 sf_atan.c
02022fd8 l     O .rodata	00000010 atanhi
02022fe8 l     O .rodata	00000010 atanlo
02022ff8 l     O .rodata	0000002c aT
02025088 l     O .rwdata	00000004 one
0202508c l     O .rwdata	00000004 huge
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_floor.c
02025090 l     O .rwdata	00000004 huge
00000000 l    df *ABS*	00000000 sf_scalbn.c
02025094 l     O .rwdata	00000004 two25
02025098 l     O .rwdata	00000004 twom25
0202509c l     O .rwdata	00000004 huge
020250a0 l     O .rwdata	00000004 tiny
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
02023500 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200a2dc l     F .text	000000f0 __sbprintf
0200c4ec l     F .text	0000020c cvt
0200c6f8 l     F .text	00000140 exponent
0202318a l     O .rodata	00000010 blanks.4403
0202319a l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200c9d8 l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200ece4 l     F .text	000000f4 std
02026e38 l     O .bss	00000004 __sfp_lock
02026e3c l     O .bss	00000004 __sinit_lock
0200f1e0 l     F .text	00000024 __fp_lock
0200f204 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
02023924 l     O .rwdata	00000038 lconv
0202395c l     O .rwdata	00000020 lc_ctype_charset
0202397c l     O .rwdata	00000020 lc_message_charset
02026e4c l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
02010534 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
020232ec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
020143e0 l     F .text	000000f0 __sbprintf
02023342 l     O .rodata	00000010 blanks.4348
02023352 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
020170ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
020171f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02017224 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02017310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
020173f0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020174dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
020176a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020250d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
020178f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
020250d8 l     O .rwdata	00000004 lockid
02026e70 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
020250dc l     O .rwdata	00000004 lockid
02026e78 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02019324 l     F .text	00000048 OS_InitMisc
0201936c l     F .text	0000006c OS_InitRdyList
020194d8 l     F .text	000000e4 OS_InitTCBList
02019244 l     F .text	000000e0 OS_InitEventList
020193d8 l     F .text	00000080 OS_InitTaskIdle
02019458 l     F .text	00000080 OS_InitTaskStat
02019748 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0201b458 l     F .text	000000f4 OS_FlagTaskRdy
0201b218 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201ffc4 l     F .text	00000034 alt_dev_reg
02023f4c l     O .rwdata	0000106c jtag_uart
02024fb8 l     O .rwdata	0000002c accelerometer_spi_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0202033c l     F .text	000002a8 altera_avalon_jtag_uart_irq
020205e4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02020dc0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
020213d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02021638 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
020218f8 l     F .text	0000003c alt_get_errno
02021934 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02026ee0 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
02026edc g     O .bss	00000004 alt_instruction_exception_handler
02012fec g     F .text	000000b0 _mprec_log10
0202512a g     O .rwdata	00000002 OSTaskNameSize
0201316c g     F .text	00000134 __any_on
02015ec8 g     F .text	00000060 _isatty_r
020232c4 g     O .rodata	00000028 __mprec_tinytens
020175ec g     F .text	000000bc alt_main
02026df4 g     O .bss	00000004 MailBox9
0200a098 g     F .text	00000118 _puts_r
02032130 g     O .bss	00000100 alt_irq
02026df8 g     O .bss	00000004 MailBox6
02015f28 g     F .text	00000070 _lseek_r
0201c740 g     F .text	000000cc OS_MemInit
0200471c g     F .text	00000174 sqrt
02025160 g       *ABS*	00000000 __flash_rwdata_start
0201ff64 g     F .text	00000060 OSTimeSet
020086d8 g     F .text	00000088 .hidden __eqdf2
02017f98 g     F .text	00000610 OSEventPendMulti
02032230 g       *ABS*	00000000 __alt_heap_start
02021f40 g     F .text	00000024 OSTaskCreateHook
02026f0c g     O .bss	00002000 task1_stk
0200a030 g     F .text	00000068 printf
02025102 g     O .rwdata	00000002 OSMboxEn
02018600 g     F .text	0000004c OSIntEnter
020161b0 g     F .text	000000d4 _wcrtomb_r
02014070 g     F .text	000000a0 __sseek
0200f088 g     F .text	000000d8 __sinit
02016008 g     F .text	00000168 __swbuf_r
02025112 g     O .rwdata	00000002 OSQEn
02010164 g     F .text	00000084 _setlocale_r
0200edd8 g     F .text	000000a4 __sfmoreglue
02017c6c g     F .text	000000cc __malloc_unlock
02021fa8 g     F .text	00000020 OSTaskStatHook
02026e80 g     O .bss	00000001 OSLockNesting
02025150 g     O .rwdata	00000002 OSDataSize
02026e81 g     O .bss	00000001 OSRunning
02011620 g     F .text	00000208 memmove
02021fe8 g     F .text	00000020 OSInitHookBegin
02025148 g     O .rwdata	00000002 OSTmrSize
0200f054 g     F .text	00000034 _cleanup
02024fe4 g     O .rwdata	00000004 accel_name
02011828 g     F .text	00000130 _Balloc
02026dfc g     O .bss	00000004 MailBox13
02026e84 g     O .bss	00000004 OSIdleCtr
02008760 g     F .text	000000dc .hidden __gtdf2
02021cf0 g     F .text	00000024 altera_nios2_gen2_irq_init
02021dc0 g       .text	00000000 OSStartTsk
02009c60 g     F .text	00000020 __errno
02019a78 g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000001c __reset
0200532c g     F .text	00000674 __ieee754_rem_pio2f
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
02020ffc g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
0202514e g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
020250ee g     O .rwdata	00000002 OSEventSize
02026e88 g     O .bss	00000001 OSPrioHighRdy
02015e60 g     F .text	00000068 _fstat_r
02021f64 g     F .text	00000024 OSTaskDelHook
02026e5c g     O .bss	00000004 errno
02013f8c g     F .text	00000030 __seofread
02021da0 g       .text	00000000 OSStartHighRdy
0201ea0c g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0201ad60 g     F .text	00000060 OSFlagPendGetFlagsRdy
0202512e g     O .rwdata	00000002 OSTaskStatStkSize
02019edc g     F .text	00000308 OSFlagAccept
0201cd78 g     F .text	000000b8 OSQFlush
0201c80c g     F .text	00000140 OSQAccept
02026e68 g     O .bss	00000004 alt_argv
0202cfe4 g       *ABS*	00000000 _gp
0201e860 g     F .text	000001ac OSTaskCreate
020041f4 g     F .text	000000f4 damping
0201e370 g     F .text	000004f0 OSTaskChangePrio
02026e7c g     O .bss	00000004 alt_heapsem
02003670 g     F .text	000000cc task4
02019d4c g     F .text	00000190 OSDebugInit
0201ebf0 g     F .text	00000344 OSTaskDel
02023dcc g     O .rwdata	00000180 alt_fd_list
0202ef0c g     O .bss	00000370 OSFlagTbl
02019024 g     F .text	000000b8 OS_EventTaskRemove
02021574 g     F .text	00000090 alt_find_dev
02009c80 g     F .text	00000188 memcpy
02025118 g     O .rwdata	00000002 OSRdyTblSize
02026e00 g     O .bss	00000004 MailBox3
0200f010 g     F .text	00000044 _cleanup_r
02016f68 g     F .text	000000dc .hidden __floatsidf
020216fc g     F .text	0000007c alt_io_redirect
0200883c g     F .text	000000f4 .hidden __ltdf2
020228c4 g       *ABS*	00000000 __DTOR_END__
0200a1b0 g     F .text	00000038 puts
020222e0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02017d38 g     F .text	00000120 OSEventNameGet
020250fc g     O .rwdata	00000002 OSFlagMax
02004394 g     F .text	00000104 __fpclassifyd
02012ed0 g     F .text	0000011c __ratio
0201864c g     F .text	000000f8 OSIntExit
020144d0 g     F .text	00000050 __vfiprintf_internal
02025136 g     O .rwdata	00000002 OSTCBSize
02026e89 g     O .bss	00000001 OSPrioCur
02020840 g     F .text	000002bc altera_avalon_jtag_uart_read
02009fcc g     F .text	00000064 _printf_r
02007488 g     F .text	00000064 .hidden __udivsi3
0201734c g     F .text	000000a4 isatty
0202511c g     O .rwdata	00000002 OSStkWidth
020231d4 g     O .rodata	000000c8 __mprec_tens
02025110 g     O .rwdata	00000002 OSPtrSize
020101e8 g     F .text	00000024 __locale_charset
020250f0 g     O .rwdata	00000002 OSEventTblSize
02021d14 g       .text	00000000 OSCtxSw
02022250 g     F .text	00000090 alt_icache_flush
02026e50 g     O .bss	00000004 __malloc_top_pad
02026e8c g     O .bss	00000004 OSTCBList
02026e60 g     O .bss	00000004 alt_fd_list_lock
020250ac g     O .rwdata	00000004 __mb_cur_max
02010270 g     F .text	00000028 _localeconv_r
02011e70 g     F .text	00000058 __i2b
0200f9d4 g     F .text	000005dc __sfvwrite_r
0202f27c g     O .bss	00000c30 OSMemTbl
02026e90 g     O .bss	00000001 OSTickStepState
02013e90 g     F .text	00000060 _sbrk_r
02025114 g     O .rwdata	00000002 OSQMax
0202feac g     O .bss	00000800 OSTaskStatStk
0201c37c g     F .text	000000f0 OSMemNameGet
02006f48 g     F .text	00000058 fabsf
02028f0c g     O .bss	00002000 task4_stk
020250f4 g     O .rwdata	00000002 OSFlagEn
02015f98 g     F .text	00000070 _read_r
0202513a g     O .rwdata	00000002 OSTimeTickHookEn
0201d228 g     F .text	00000168 OSQPost
0201b54c g     F .text	000000a4 OS_FlagUnlink
020250cc g     O .rwdata	00000004 alt_max_fd
02019610 g     F .text	00000068 OS_MemCopy
02019678 g     F .text	000000d0 OS_Sched
02015a18 g     F .text	0000012c _fclose_r
0201c28c g     F .text	000000f0 OSMemGet
0201bfa8 g     F .text	00000110 OSMboxQuery
0201f21c g     F .text	000001b4 OSTaskNameSet
0200ec90 g     F .text	00000054 fflush
02026e54 g     O .bss	00000004 __malloc_max_sbrked_mem
02026e94 g     O .bss	00000004 OSCtxSwCtr
02021fc8 g     F .text	00000020 OSTimeTickHook
02021778 g     F .text	00000180 alt_irq_register
020250fe g     O .rwdata	00000002 OSFlagNameSize
02026e04 g     O .bss	00000004 AnimationFlagGrp
02009944 g     F .text	00000110 .hidden __extendsfdf2
020190dc g     F .text	00000100 OS_EventTaskRemoveMulti
02007544 g     F .text	000008ac .hidden __adddf3
02018ed4 g     F .text	00000150 OS_EventTaskWaitMulti
02012a8c g     F .text	00000204 __b2d
02025116 g     O .rwdata	00000002 OSQSize
020169b0 g     F .text	00000538 .hidden __umoddi3
02017518 g     F .text	000000d4 lseek
0201dcd8 g     F .text	0000020c OSSemPend
02025084 g     O .rwdata	00000004 __fdlib_version
02003c44 g     F .text	00000064 momentum
020250a8 g     O .rwdata	00000004 _global_impure_ptr
020132a0 g     F .text	00000bf0 _realloc_r
02006a04 g     F .text	0000016c __kernel_sinf
02025100 g     O .rwdata	00000002 OSLowestPrio
02032230 g       *ABS*	00000000 __bss_end
02022048 g     F .text	00000024 OSTCBInitHook
02025146 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
02021be8 g     F .text	00000108 alt_tick
0201bd3c g     F .text	00000110 OSMboxPost
02016438 g     F .text	00000578 .hidden __udivdi3
02015d70 g     F .text	00000088 _fputwc_r
020250e8 g     O .rwdata	00000002 OSEventEn
0202329c g     O .rodata	00000028 __mprec_bigtens
02011b68 g     F .text	0000018c __s2b
02025142 g     O .rwdata	00000002 OSTmrCfgNameSize
02017044 g     F .text	000000a8 .hidden __floatunsidf
02012608 g     F .text	00000114 __mcmp
02000330 g     F .text	00000054 x_uncompress
0200f228 g     F .text	00000040 __fp_lock_all
02026e08 g     O .bss	00000004 MailBox5
0201b378 g     F .text	000000e0 OS_FlagInit
02021b4c g     F .text	0000009c alt_alarm_stop
02025124 g     O .rwdata	00000002 OSTaskIdleStkSize
02004498 g     F .text	00000140 cosf
02026ed0 g     O .bss	00000004 alt_irq_active
0201d910 g     F .text	000000b0 OSSemAccept
0201c580 g     F .text	000000d8 OSMemPut
0201c0b8 g     F .text	000001d4 OSMemCreate
02026e98 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d8 alt_irq_handler
02023da4 g     O .rwdata	00000028 alt_dev_null
02025138 g     O .rwdata	00000002 OSTicksPerSec
02021d14 g       .text	00000000 OSIntCtxSw
0202138c g     F .text	00000048 alt_dcache_flush_all
02011cf4 g     F .text	00000090 __hi0bits
02016ee8 g     F .text	00000080 .hidden __fixdfsi
020059a0 g     F .text	000001c4 __kernel_cosf
02026e9c g     O .bss	00000004 OSTCBFreeList
02025160 g       *ABS*	00000000 __ram_rwdata_end
0201dee4 g     F .text	0000016c OSSemPendAbort
020250c4 g     O .rwdata	00000008 alt_dev_list
02017930 g     F .text	000000f8 write
02026e0c g     O .bss	00000004 ActivateTask4Grp
0202513c g     O .rwdata	00000002 OSVersionNbr
020234d0 g       *ABS*	00000000 __ram_rodata_end
02017260 g     F .text	000000b0 fstat
0200883c g     F .text	000000f4 .hidden __ledf2
020250e4 g     O .rwdata	00000004 OSEndiannessTest
02012298 g     F .text	00000178 __pow5mult
02014520 g     F .text	000012c4 ___vfiprintf_internal_r
02026e40 g     O .bss	00000004 __nlocale_changed
020074ec g     F .text	00000058 .hidden __umodsi3
020250f6 g     O .rwdata	00000002 OSFlagGrpSize
02032230 g       *ABS*	00000000 end
02020200 g     F .text	0000013c altera_avalon_jtag_uart_init
020198e0 g     F .text	000000cc OS_TaskStat
020001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
020228c4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02020e3c g     F .text	00000074 alt_avalon_timer_sc_init
02009bfc g     F .text	00000064 .hidden __clzsi2
02020afc g     F .text	000002c4 altera_avalon_jtag_uart_write
0200f160 g     F .text	00000020 __sfp_lock_acquire
02011464 g     F .text	000001bc memchr
020195bc g     F .text	00000054 OS_MemClr
0200a41c g     F .text	000020d0 ___vfprintf_internal_r
02021de4 g     F .text	0000015c OSTaskStkInit
020003e4 g     F .text	000003c0 task1
020234d0 g     O .rwdata	00000030 whole_list
0200f2a8 g     F .text	00000560 _free_r
0201020c g     F .text	00000020 __locale_mb_cur_max
02018c2c g     F .text	00000198 OS_EventTaskRdy
020226a4 g     F .text	000001ec __call_exitprocs
02026ea0 g     O .bss	00000001 OSCPUUsage
02026e44 g     O .bss	00000004 __mlocale_changed
020250b4 g     O .rwdata	00000004 __malloc_sbrk_base
02000248 g     F .text	0000004c _start
020007a4 g     F .text	000024f8 task2
02026ed4 g     O .bss	00000004 _alt_tick_rate
0201ce30 g     F .text	0000028c OSQPend
0201fadc g     F .text	00000104 OSTimeDly
02003aec g     F .text	00000158 borderCollide
02012410 g     F .text	000001f8 __lshift
02026ed8 g     O .bss	00000004 _alt_nticks
020176e4 g     F .text	000000fc read
02020030 g     F .text	0000006c alt_sys_init
02020eec g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
02022534 g     F .text	00000170 __register_exitproc
02026ea1 g     O .bss	00000001 OSTaskCtr
02026e10 g     O .bss	00000004 MailBox10
02026e14 g     O .bss	00000004 MailBox2
0201fbe0 g     F .text	00000154 OSTimeDlyHMSM
02011ec8 g     F .text	000003d0 __multiply
020206e8 g     F .text	00000068 altera_avalon_jtag_uart_close
020234d0 g       *ABS*	00000000 __ram_rwdata_start
020228c4 g       *ABS*	00000000 __ram_rodata_start
02026ee4 g     O .bss	00000028 __malloc_current_mallinfo
020250ea g     O .rwdata	00000002 OSEventMax
02012c90 g     F .text	00000240 __d2b
0201e050 g     F .text	00000110 OSSemPost
020187d0 g     F .text	000000dc OSSchedUnlock
020042e8 g     F .text	000000ac fmin
0202009c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02022174 g     F .text	000000dc alt_get_fd
02026ea4 g     O .bss	00000004 OSMemFreeList
0201891c g     F .text	000000b0 OSStatInit
0201b154 g     F .text	000000c4 OSFlagQuery
020210c8 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
02025120 g     O .rwdata	00000002 OSTaskCreateExtEn
02015854 g     F .text	00000060 _close_r
02026e18 g     O .bss	00000004 MailBox12
02022400 g     F .text	00000134 memcmp
02018c0c g     F .text	00000020 OS_Dummy
0202015c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02032230 g       *ABS*	00000000 __alt_stack_base
020201ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0200c838 g     F .text	000001a0 __swsetup_r
020306ac g     O .bss	000001e0 OSQTbl
02007df0 g     F .text	000008e8 .hidden __divdf3
0200ee7c g     F .text	00000194 __sfp
0201309c g     F .text	000000d0 __copybits
0202399c g     O .rwdata	00000408 __malloc_av_
0200f1c0 g     F .text	00000020 __sinit_lock_release
02026ea8 g     O .bss	00000004 OSTCBHighRdy
02008930 g     F .text	00000718 .hidden __muldf3
02013ef0 g     F .text	0000009c __sread
02026eac g     O .bss	00000004 OSQFreeList
0202206c g     F .text	00000108 alt_find_file
02021410 g     F .text	000000a4 alt_dev_llist_insert
02017b4c g     F .text	00000120 __malloc_lock
02017844 g     F .text	000000b0 sbrk
02007104 g     F .text	00000214 scalbnf
02017e58 g     F .text	00000140 OSEventNameSet
0200ec08 g     F .text	00000088 _fflush_r
020158b4 g     F .text	00000164 _calloc_r
02026eb0 g     O .bss	00000001 OSRdyGrp
02026df0 g       *ABS*	00000000 __bss_start
02009e08 g     F .text	000001c4 memset
0200373c g     F .text	0000023c main
02026e6c g     O .bss	00000004 alt_envp
02026e1c g     O .bss	00000004 MailBox8
02026e58 g     O .bss	00000004 __malloc_max_total_mem
020040f0 g     F .text	00000104 moveBall
020200fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02016170 g     F .text	00000040 __swbuf
02023380 g     O .rodata	00000100 OSUnMapTbl
0202511a g     O .rwdata	00000002 OSSemEn
0201adc0 g     F .text	00000394 OSFlagPost
02014110 g     F .text	00000054 __sclose
02006b70 g     F .text	00000068 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
02015b44 g     F .text	00000038 fclose
02018dc4 g     F .text	00000110 OS_EventTaskWait
0202af0c g     O .bss	00002000 task2_stk
02009a54 g     F .text	000001a8 .hidden __truncdfsf2
020199ac g     F .text	000000cc OS_TaskStatStkChk
0201ef34 g     F .text	00000150 OSTaskDelReq
0200cd8c g     F .text	00001b78 _dtoa_r
020108e8 g     F .text	00000b7c _malloc_r
020163c0 g     F .text	00000078 __ascii_wctomb
020250d0 g     O .rwdata	00000004 alt_errno
020188ac g     F .text	00000070 OSStart
0202cf0c g     O .bss	00002000 task3_stk
02017aec g     F .text	00000060 __env_unlock
0200ffb0 g     F .text	000000d8 _fwalk
0201f3d0 g     F .text	000001d4 OSTaskResume
0201c658 g     F .text	000000e8 OSMemQuery
0202512c g     O .rwdata	00000002 OSTaskStatEn
02025106 g     O .rwdata	00000002 OSMemMax
0201d390 g     F .text	00000170 OSQPostFront
02007390 g     F .text	00000084 .hidden __divsi3
02026eb1 g     O .bss	00000003 OSRdyTbl
020250e0 g     O .rwdata	00000002 OSDebugEn
0200f808 g     F .text	000001cc _malloc_trim_r
02026e20 g     O .bss	00000004 MailBox4
020228c4 g       *ABS*	00000000 __CTOR_END__
02026e24 g     O .bss	00000004 MailBox7
020250f8 g     O .rwdata	00000002 OSFlagNodeSize
02025140 g     O .rwdata	00000002 OSTmrCfgMax
02014164 g     F .text	00000140 strcmp
0201c94c g     F .text	000001ac OSQCreate
0201f084 g     F .text	00000198 OSTaskNameGet
020228c4 g       *ABS*	00000000 __flash_rodata_start
0201d500 g     F .text	0000020c OSQPostOpt
020189cc g     F .text	00000220 OSTimeTick
02025128 g     O .rwdata	00000002 OSTaskMax
020228c4 g       *ABS*	00000000 __DTOR_LIST__
0201d9c0 g     F .text	000000d8 OSSemCreate
0202514c g     O .rwdata	00000002 OSTmrWheelSize
020086d8 g     F .text	00000088 .hidden __nedf2
02025122 g     O .rwdata	00000002 OSTaskDelEn
0201e160 g     F .text	00000110 OSSemQuery
0201caf8 g     F .text	00000280 OSQDel
0201d0bc g     F .text	0000016c OSQPendAbort
0201fff8 g     F .text	00000038 alt_irq_init
020177e0 g     F .text	00000064 alt_release_fd
02007318 g     F .text	00000078 copysignf
02023024 g     O .rodata	00000100 .hidden __clz_tab
02026e48 g     O .bss	00000004 _PathLocale
0202237c g     F .text	0000003c atexit
020157e4 g     F .text	00000070 _write_r
02018744 g     F .text	0000008c OSSchedLock
02010298 g     F .text	00000040 setlocale
0201a1e4 g     F .text	00000108 OSFlagCreate
020250a4 g     O .rwdata	00000004 _impure_ptr
02026e64 g     O .bss	00000004 alt_argc
0200e904 g     F .text	00000304 __sflush_r
02004890 g     F .text	00000040 atan2f
02021514 g     F .text	00000060 _do_dtors
02010250 g     F .text	00000020 __locale_cjk_lang
020250f2 g     O .rwdata	00000002 OSEventMultiEn
0201a2ec g     F .text	00000248 OSFlagDel
02026eb4 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
0201bbd0 g     F .text	0000016c OSMboxPendAbort
02026df0 g     O .bss	00000004 accel_spi
020129c0 g     F .text	000000cc __ulp
02026e28 g     O .bss	00000004 MailBox11
0202513e g     O .rwdata	00000002 OSTmrEn
0201a7a8 g     F .text	000005b8 OSFlagPend
0200f268 g     F .text	00000040 __fp_unlock_all
020250bc g     O .rwdata	00000008 alt_fs_list
020197bc g     F .text	00000074 OS_StrCopy
020045d8 g     F .text	00000144 sinf
02025108 g     O .rwdata	00000002 OSMemNameSize
02022008 g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
02020eb0 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
02025134 g     O .rwdata	00000002 OSTCBPrioTblMax
020102d8 g     F .text	00000030 localeconv
020048d0 g     F .text	00000648 __ieee754_sqrt
02025130 g     O .rwdata	00000002 OSTaskStatStkChkEn
0201b688 g     F .text	000000d4 OSMboxCreate
02025104 g     O .rwdata	00000002 OSMemEn
0202510e g     O .rwdata	00000002 OSMutexEn
02025160 g       *ABS*	00000000 _edata
02003d68 g     F .text	00000388 collide_calc
02032230 g       *ABS*	00000000 _end
02026eb8 g     O .bss	00000001 OSIntNesting
02015b7c g     F .text	000001f4 __fputwc
02000248 g       *ABS*	00000000 __ram_exceptions_end
02020750 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0201fd34 g     F .text	000001d4 OSTimeDlyResume
0201a65c g     F .text	0000014c OSFlagNameSet
0201b99c g     F .text	00000234 OSMboxPend
02003978 g     F .text	00000174 whole_collide
0201f5a4 g     F .text	000001c0 OSTaskStkChk
0202510a g     O .rwdata	00000002 OSMemSize
02013fbc g     F .text	000000b4 __swrite
020250b0 g     O .rwdata	00000004 __malloc_trim_threshold
0201022c g     F .text	00000024 __locale_msgcharset
02026ebc g     O .bss	00000004 OSTCBCur
020223b8 g     F .text	00000048 exit
0202510c g     O .rwdata	00000002 OSMemTblSize
02010088 g     F .text	000000dc _fwalk_reent
02026e2c g     O .bss	00000004 MailBox1
0201271c g     F .text	000002a4 __mdiff
02007414 g     F .text	00000074 .hidden __modsi3
02021194 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
0201b5f0 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200f180 g     F .text	00000020 __sfp_lock_release
020185a8 g     F .text	00000058 OSInit
02006bd8 g     F .text	00000370 atanf
0201f948 g     F .text	00000124 OSTaskQuery
0201d868 g     F .text	000000a8 OS_QInit
02019830 g     F .text	00000054 OS_StrLen
0201c46c g     F .text	00000114 OSMemNameSet
02000294 g     F .text	0000009c compress
02025126 g     O .rwdata	00000002 OSTaskProfileEn
02026ec0 g     O .bss	00000004 OSTime
02026e30 g     O .bss	00000004 isActiveFlagGrp
0203088c g     O .bss	00000800 OSTaskIdleStk
02022890 g     F .text	00000034 _exit
02000384 g     F .text	00000060 y_uncompress
0201be4c g     F .text	0000015c OSMboxPostOpt
02005b64 g     F .text	00000ea0 __kernel_rem_pio2f
02021260 g     F .text	0000012c alt_alarm_start
0201a534 g     F .text	00000128 OSFlagNameGet
02003ca8 g     F .text	000000c0 detect_collide
0201ff08 g     F .text	0000005c OSTimeGet
02020f30 g     F .text	00000068 alt_up_accelerometer_spi_read
02020f98 g     F .text	00000064 alt_up_accelerometer_spi_write
02010308 g     F .text	0000022c __smakebuf_r
0200a1e8 g     F .text	000000f4 strlen
02021f88 g     F .text	00000020 OSTaskSwHook
020219f8 g     F .text	00000154 open
0203108c g     O .bss	00000b40 OSEventTbl
02008760 g     F .text	000000dc .hidden __gedf2
02031bcc g     O .bss	00000510 OSTCBTbl
0201e270 g     F .text	00000100 OSSemSet
020250b8 g     O .rwdata	00000004 __wctomb
02026e34 g     O .bss	00000004 StartGameGrp
020142a4 g     F .text	0000013c __sprint_r
02021604 g     F .text	00000034 alt_icache_flush_all
02006fa0 g     F .text	00000164 floorf
02025154 g     O .rwdata	00000004 alt_priority_mask
0201da98 g     F .text	00000240 OSSemDel
02026ec4 g     O .bss	00000004 OSFlagFreeList
02002c9c g     F .text	000009d4 task3
020250ec g     O .rwdata	00000002 OSEventNameSize
0201b75c g     F .text	00000240 OSMboxDel
0200a3cc g     F .text	00000050 __vfprintf_internal
02026ec8 g     O .bss	00000001 OSStatRdy
020320dc g     O .bss	00000054 OSTCBPrioTbl
0201635c g     F .text	00000064 _wctomb_r
02017a28 g     F .text	000000c4 __env_lock
02025132 g     O .rwdata	00000002 OSTaskSwHookEn
02009048 g     F .text	000008fc .hidden __subdf3
02011d84 g     F .text	000000ec __lo0bits
02025158 g     O .rwdata	00000008 alt_alarm_list
020250fa g     O .rwdata	00000002 OSFlagWidth
020214b4 g     F .text	00000060 _do_ctors
02016284 g     F .text	000000d8 wcrtomb
02017128 g     F .text	000000d0 close
02026e74 g     O .bss	00000004 alt_envsem
02026ecc g     O .bss	00000004 OSIdleCtrRun
02018bec g     F .text	00000020 OSVersion
02025144 g     O .rwdata	00000002 OSTmrCfgWheelSize
02017458 g     F .text	00000084 alt_load
0201fa6c g     F .text	00000070 OS_TaskStkClr
0202511e g     O .rwdata	00000002 OSTaskCreateEn
020191dc g     F .text	00000068 OS_EventWaitListInit
02015df8 g     F .text	00000068 fputwc
02022028 g     F .text	00000020 OSTaskIdleHook
0200f1a0 g     F .text	00000020 __sinit_lock_acquire
020119d4 g     F .text	00000194 __multadd
0201f764 g     F .text	000001e4 OSTaskSuspend
02011958 g     F .text	0000007c _Bfree
02004f18 g     F .text	00000414 __ieee754_atan2f
02019884 g     F .text	0000005c OS_TaskIdle
0202514a g     O .rwdata	00000002 OSTmrTblSize
0201d70c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409214 	ori	at,at,584
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d40 	call	20001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	20186000 	call	2018600 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001526 	beq	r2,zero,2000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 200013c:	008080f4 	movhi	r2,515
 2000140:	10884c04 	addi	r2,r2,8496
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080f4 	movhi	r2,515
 2000158:	10884c04 	addi	r2,r2,8496
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	e17ffd17 	ldw	r5,-12(fp)
 2000174:	1009883a 	mov	r4,r2
 2000178:	183ee83a 	callr	r3
#endif
        break;
 200017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000180:	0005313a 	rdctl	r2,ipending
 2000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000188:	e0bfff17 	ldw	r2,-4(fp)
 200018c:	00000706 	br	20001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 2000190:	e0bffc17 	ldw	r2,-16(fp)
 2000194:	1085883a 	add	r2,r2,r2
 2000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 200019c:	e0bffd17 	ldw	r2,-12(fp)
 20001a0:	10800044 	addi	r2,r2,1
 20001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a8:	003fe006 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001b0:	e0bffb17 	ldw	r2,-20(fp)
 20001b4:	103fda1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b8:	201864c0 	call	201864c <OSIntExit>
}
 20001bc:	0001883a 	nop
 20001c0:	e037883a 	mov	sp,fp
 20001c4:	dfc00117 	ldw	ra,4(sp)
 20001c8:	df000017 	ldw	fp,0(sp)
 20001cc:	dec00204 	addi	sp,sp,8
 20001d0:	f800283a 	ret

020001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d4:	defffb04 	addi	sp,sp,-20
 20001d8:	dfc00415 	stw	ra,16(sp)
 20001dc:	df000315 	stw	fp,12(sp)
 20001e0:	df000304 	addi	fp,sp,12
 20001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e8:	000531fa 	rdctl	r2,exception
 20001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001f0:	e0bffd17 	ldw	r2,-12(fp)
 20001f4:	10801f0c 	andi	r2,r2,124
 20001f8:	1004d0ba 	srli	r2,r2,2
 20001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 2000200:	0005333a 	rdctl	r2,badaddr
 2000204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000208:	d0a7be17 	ldw	r2,-24840(gp)
 200020c:	10000726 	beq	r2,zero,200022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 2000210:	d0a7be17 	ldw	r2,-24840(gp)
 2000214:	e0fffd17 	ldw	r3,-12(fp)
 2000218:	e1bffe17 	ldw	r6,-8(fp)
 200021c:	e17fff17 	ldw	r5,-4(fp)
 2000220:	1809883a 	mov	r4,r3
 2000224:	103ee83a 	callr	r2
 2000228:	00000206 	br	2000234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 200022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000230:	0005883a 	mov	r2,zero
}
 2000234:	e037883a 	mov	sp,fp
 2000238:	dfc00117 	ldw	ra,4(sp)
 200023c:	df000017 	ldw	fp,0(sp)
 2000240:	dec00204 	addi	sp,sp,8
 2000244:	f800283a 	ret

Disassembly of section .text:

02000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 200024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 2000250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000254:	00bffd16 	blt	zero,r2,200024c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000258:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 200025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000260:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000264:	d6b3f914 	ori	gp,gp,53220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000268:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 200026c:	109b7c14 	ori	r2,r2,28144

    movhi r3, %hi(__bss_end)
 2000270:	00c080f4 	movhi	r3,515
    ori r3, r3, %lo(__bss_end)
 2000274:	18c88c14 	ori	r3,r3,8752

    beq r2, r3, 1f
 2000278:	10c00326 	beq	r2,r3,2000288 <_start+0x40>

0:
    stw zero, (r2)
 200027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000284:	10fffd36 	bltu	r2,r3,200027c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000288:	20174580 	call	2017458 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 200028c:	20175ec0 	call	20175ec <alt_main>

02000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000290:	003fff06 	br	2000290 <alt_after_alt_main>

02000294 <compress>:
#define START_THE_GAME (OS_FLAGS) 0x0001

const char * accel_name = ACCELEROMETER_SPI_0_NAME;
alt_up_accelerometer_spi_dev * accel_spi = NULL;

int compress(int x, int y) {
 2000294:	defff904 	addi	sp,sp,-28
 2000298:	df000615 	stw	fp,24(sp)
 200029c:	df000604 	addi	fp,sp,24
 20002a0:	e13ffe15 	stw	r4,-8(fp)
 20002a4:	e17fff15 	stw	r5,-4(fp)
	int sign_x;
	int base_x = abs(x);
 20002a8:	e0bffe17 	ldw	r2,-8(fp)
 20002ac:	1000010e 	bge	r2,zero,20002b4 <compress+0x20>
 20002b0:	0085c83a 	sub	r2,zero,r2
 20002b4:	e0bffc15 	stw	r2,-16(fp)
	if (x >= 0)
 20002b8:	e0bffe17 	ldw	r2,-8(fp)
 20002bc:	10000216 	blt	r2,zero,20002c8 <compress+0x34>
		sign_x = 0;
 20002c0:	e03ffa15 	stw	zero,-24(fp)
 20002c4:	00000206 	br	20002d0 <compress+0x3c>
	else
		sign_x = 1;
 20002c8:	00800044 	movi	r2,1
 20002cc:	e0bffa15 	stw	r2,-24(fp)

	int sign_y;
	int base_y = abs(y);
 20002d0:	e0bfff17 	ldw	r2,-4(fp)
 20002d4:	1000010e 	bge	r2,zero,20002dc <compress+0x48>
 20002d8:	0085c83a 	sub	r2,zero,r2
 20002dc:	e0bffd15 	stw	r2,-12(fp)
	if (y >= 0)
 20002e0:	e0bfff17 	ldw	r2,-4(fp)
 20002e4:	10000216 	blt	r2,zero,20002f0 <compress+0x5c>
		sign_y = 0;
 20002e8:	e03ffb15 	stw	zero,-20(fp)
 20002ec:	00000206 	br	20002f8 <compress+0x64>
	else
		sign_y = 1;
 20002f0:	00800044 	movi	r2,1
 20002f4:	e0bffb15 	stw	r2,-20(fp)

	return (sign_y << 20) + (base_y << 11) + (sign_x << 10) + base_x;
 20002f8:	e0bffb17 	ldw	r2,-20(fp)
 20002fc:	1006953a 	slli	r3,r2,20
 2000300:	e0bffd17 	ldw	r2,-12(fp)
 2000304:	100492fa 	slli	r2,r2,11
 2000308:	1887883a 	add	r3,r3,r2
 200030c:	e0bffa17 	ldw	r2,-24(fp)
 2000310:	100492ba 	slli	r2,r2,10
 2000314:	1887883a 	add	r3,r3,r2
 2000318:	e0bffc17 	ldw	r2,-16(fp)
 200031c:	1885883a 	add	r2,r3,r2
}
 2000320:	e037883a 	mov	sp,fp
 2000324:	df000017 	ldw	fp,0(sp)
 2000328:	dec00104 	addi	sp,sp,4
 200032c:	f800283a 	ret

02000330 <x_uncompress>:

int x_uncompress(int number) {
 2000330:	defffc04 	addi	sp,sp,-16
 2000334:	df000315 	stw	fp,12(sp)
 2000338:	df000304 	addi	fp,sp,12
 200033c:	e13fff15 	stw	r4,-4(fp)
	int sign_x = (number & 0x400) >> 10;
 2000340:	e0bfff17 	ldw	r2,-4(fp)
 2000344:	1081000c 	andi	r2,r2,1024
 2000348:	1005d2ba 	srai	r2,r2,10
 200034c:	e0bffd15 	stw	r2,-12(fp)
	int base_x = (number) & 0x3FF;
 2000350:	e0bfff17 	ldw	r2,-4(fp)
 2000354:	1080ffcc 	andi	r2,r2,1023
 2000358:	e0bffe15 	stw	r2,-8(fp)
	if (sign_x == 0)
 200035c:	e0bffd17 	ldw	r2,-12(fp)
 2000360:	1000021e 	bne	r2,zero,200036c <x_uncompress+0x3c>
		return base_x;
 2000364:	e0bffe17 	ldw	r2,-8(fp)
 2000368:	00000206 	br	2000374 <x_uncompress+0x44>
	else
		return -base_x;
 200036c:	e0bffe17 	ldw	r2,-8(fp)
 2000370:	0085c83a 	sub	r2,zero,r2
}
 2000374:	e037883a 	mov	sp,fp
 2000378:	df000017 	ldw	fp,0(sp)
 200037c:	dec00104 	addi	sp,sp,4
 2000380:	f800283a 	ret

02000384 <y_uncompress>:

int y_uncompress(int number) {
 2000384:	defffc04 	addi	sp,sp,-16
 2000388:	df000315 	stw	fp,12(sp)
 200038c:	df000304 	addi	fp,sp,12
 2000390:	e13fff15 	stw	r4,-4(fp)
	int sign_y = (number & 0x100000) >> 20;
 2000394:	e0bfff17 	ldw	r2,-4(fp)
 2000398:	1080042c 	andhi	r2,r2,16
 200039c:	1005d53a 	srai	r2,r2,20
 20003a0:	e0bffd15 	stw	r2,-12(fp)
	int base_y = (number & 0xFF800) >> 11;
 20003a4:	e0ffff17 	ldw	r3,-4(fp)
 20003a8:	00800434 	movhi	r2,16
 20003ac:	10be0004 	addi	r2,r2,-2048
 20003b0:	1884703a 	and	r2,r3,r2
 20003b4:	1005d2fa 	srai	r2,r2,11
 20003b8:	e0bffe15 	stw	r2,-8(fp)
	if (sign_y == 0)
 20003bc:	e0bffd17 	ldw	r2,-12(fp)
 20003c0:	1000021e 	bne	r2,zero,20003cc <y_uncompress+0x48>
		return base_y;
 20003c4:	e0bffe17 	ldw	r2,-8(fp)
 20003c8:	00000206 	br	20003d4 <y_uncompress+0x50>
	else
		return -base_y;
 20003cc:	e0bffe17 	ldw	r2,-8(fp)
 20003d0:	0085c83a 	sub	r2,zero,r2
}
 20003d4:	e037883a 	mov	sp,fp
 20003d8:	df000017 	ldw	fp,0(sp)
 20003dc:	dec00104 	addi	sp,sp,4
 20003e0:	f800283a 	ret

020003e4 <task1>:

/*  */

void task1(void* pdata) {
 20003e4:	deffe704 	addi	sp,sp,-100
 20003e8:	dfc01815 	stw	ra,96(sp)
 20003ec:	df001715 	stw	fp,92(sp)
 20003f0:	df001704 	addi	fp,sp,92
 20003f4:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	int shoot = 0;
 20003f8:	e03fea15 	stw	zero,-88(fp)
	int x_axis, y_axis;

	//volatile int * MTL_controller = (int *) MTL_IP_BASE;
	int count_old = 0;
 20003fc:	e03ff115 	stw	zero,-60(fp)
	int count = 0;
 2000400:	e03feb15 	stw	zero,-84(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 2000404:	e03ff015 	stw	zero,-64(fp)

	while (1) {

		DEBUG_PRINT("[Task 1] wait for isActive\n");
 2000408:	010080b4 	movhi	r4,514
 200040c:	210a3804 	addi	r4,r4,10464
 2000410:	200a1b00 	call	200a1b0 <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE,
 2000414:	d0e79317 	ldw	r3,-25012(gp)
 2000418:	e0bff804 	addi	r2,fp,-32
 200041c:	d8800015 	stw	r2,0(sp)
 2000420:	000f883a 	mov	r7,zero
 2000424:	01802084 	movi	r6,130
 2000428:	01400044 	movi	r5,1
 200042c:	1809883a 	mov	r4,r3
 2000430:	201a7a80 	call	201a7a8 <OSFlagPend>
				OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err); // wait for a flag and consume it
		DEBUG_PRINT("[Task 1] flag consumed \n");
 2000434:	010080b4 	movhi	r4,514
 2000438:	210a3f04 	addi	r4,r4,10492
 200043c:	200a1b00 	call	200a1b0 <puts>
		IOWR(MTL_IP_BASE, 13, 0);
 2000440:	0007883a 	mov	r3,zero
 2000444:	008000b4 	movhi	r2,2
 2000448:	10800d04 	addi	r2,r2,52
 200044c:	10c00035 	stwio	r3,0(r2)
		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while (!gesture_detected)
 2000450:	00005106 	br	2000598 <task1+0x1b4>
		{
			count_old = count;
 2000454:	e0bfeb17 	ldw	r2,-84(fp)
 2000458:	e0bff115 	stw	r2,-60(fp)
			count = IORD(MTL_IP_BASE, 10); // récupère le nombre de doigts présent sur l'écran
 200045c:	008000b4 	movhi	r2,2
 2000460:	10800a04 	addi	r2,r2,40
 2000464:	10800037 	ldwio	r2,0(r2)
 2000468:	e0bfeb15 	stw	r2,-84(fp)
			int pos1 = IORD(MTL_IP_BASE, 11);
 200046c:	008000b4 	movhi	r2,2
 2000470:	10800b04 	addi	r2,r2,44
 2000474:	10800037 	ldwio	r2,0(r2)
 2000478:	e0bff215 	stw	r2,-56(fp)
			int pos2 = IORD(MTL_IP_BASE, 12);
 200047c:	008000b4 	movhi	r2,2
 2000480:	10800c04 	addi	r2,r2,48
 2000484:	10800037 	ldwio	r2,0(r2)
 2000488:	e0bff315 	stw	r2,-52(fp)
			if (count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 200048c:	e0bff117 	ldw	r2,-60(fp)
 2000490:	10800058 	cmpnei	r2,r2,1
 2000494:	1000121e 	bne	r2,zero,20004e0 <task1+0xfc>
 2000498:	e0bfeb17 	ldw	r2,-84(fp)
 200049c:	10800098 	cmpnei	r2,r2,2
 20004a0:	10000f1e 	bne	r2,zero,20004e0 <task1+0xfc>
					{
				DEBUG_PRINT("[Task 1] start gesture\n");
 20004a4:	010080b4 	movhi	r4,514
 20004a8:	210a4504 	addi	r4,r4,10516
 20004ac:	200a1b00 	call	200a1b0 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 20004b0:	e0bff217 	ldw	r2,-56(fp)
 20004b4:	1080ffcc 	andi	r2,r2,1023
 20004b8:	e0bfec15 	stw	r2,-80(fp)
				y1_gesture_start = pos1 >> 10;
 20004bc:	e0bff217 	ldw	r2,-56(fp)
 20004c0:	1005d2ba 	srai	r2,r2,10
 20004c4:	e0bfee15 	stw	r2,-72(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 20004c8:	e0bff317 	ldw	r2,-52(fp)
 20004cc:	1080ffcc 	andi	r2,r2,1023
 20004d0:	e0bff415 	stw	r2,-48(fp)
				y2_gesture_start = pos2 >> 10;
 20004d4:	e0bff317 	ldw	r2,-52(fp)
 20004d8:	1005d2ba 	srai	r2,r2,10
 20004dc:	e0bff515 	stw	r2,-44(fp)
			}
			if (count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 20004e0:	e0bff117 	ldw	r2,-60(fp)
 20004e4:	10800098 	cmpnei	r2,r2,2
 20004e8:	1000261e 	bne	r2,zero,2000584 <task1+0x1a0>
 20004ec:	e0bfeb17 	ldw	r2,-84(fp)
 20004f0:	10800058 	cmpnei	r2,r2,1
 20004f4:	1000231e 	bne	r2,zero,2000584 <task1+0x1a0>
					{
				DEBUG_PRINT("[Task 1] stop gesture\n");
 20004f8:	010080b4 	movhi	r4,514
 20004fc:	210a4b04 	addi	r4,r4,10540
 2000500:	200a1b00 	call	200a1b0 <puts>

				x1_gesture_stop = pos1 & 0x0003FF;
 2000504:	e0bff217 	ldw	r2,-56(fp)
 2000508:	1080ffcc 	andi	r2,r2,1023
 200050c:	e0bff615 	stw	r2,-40(fp)
				y1_gesture_stop = pos1 >> 10;
 2000510:	e0bff217 	ldw	r2,-56(fp)
 2000514:	1005d2ba 	srai	r2,r2,10
 2000518:	e0bff715 	stw	r2,-36(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 200051c:	e0bff317 	ldw	r2,-52(fp)
 2000520:	1080ffcc 	andi	r2,r2,1023
 2000524:	e0bfed15 	stw	r2,-76(fp)
				y2_gesture_stop = pos2 >> 10;
 2000528:	e0bff317 	ldw	r2,-52(fp)
 200052c:	1005d2ba 	srai	r2,r2,10
 2000530:	e0bfef15 	stw	r2,-68(fp)
				gesture_detected = (x1_gesture_start - 30 <= x1_gesture_stop
 2000534:	e0bfec17 	ldw	r2,-80(fp)
 2000538:	10bff884 	addi	r2,r2,-30
						&& x1_gesture_stop <= x1_gesture_start + 30)
						&& (y1_gesture_start - 30 <= y1_gesture_stop
 200053c:	e0fff617 	ldw	r3,-40(fp)
 2000540:	18800e16 	blt	r3,r2,200057c <task1+0x198>
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected = (x1_gesture_start - 30 <= x1_gesture_stop
						&& x1_gesture_stop <= x1_gesture_start + 30)
 2000544:	e0bfec17 	ldw	r2,-80(fp)
 2000548:	10c00784 	addi	r3,r2,30
 200054c:	e0bff617 	ldw	r2,-40(fp)
 2000550:	18800a16 	blt	r3,r2,200057c <task1+0x198>
						&& (y1_gesture_start - 30 <= y1_gesture_stop
 2000554:	e0bfee17 	ldw	r2,-72(fp)
 2000558:	10bff884 	addi	r2,r2,-30
 200055c:	e0fff717 	ldw	r3,-36(fp)
 2000560:	18800616 	blt	r3,r2,200057c <task1+0x198>
								&& y1_gesture_stop <= y1_gesture_start + 30);
 2000564:	e0bfee17 	ldw	r2,-72(fp)
 2000568:	10c00784 	addi	r3,r2,30
 200056c:	e0bff717 	ldw	r2,-36(fp)
 2000570:	18800216 	blt	r3,r2,200057c <task1+0x198>

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected = (x1_gesture_start - 30 <= x1_gesture_stop
						&& x1_gesture_stop <= x1_gesture_start + 30)
						&& (y1_gesture_start - 30 <= y1_gesture_stop
 2000574:	00800044 	movi	r2,1
 2000578:	00000106 	br	2000580 <task1+0x19c>
 200057c:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected = (x1_gesture_start - 30 <= x1_gesture_stop
 2000580:	e0bff015 	stw	r2,-64(fp)
						&& x1_gesture_stop <= x1_gesture_start + 30)
						&& (y1_gesture_start - 30 <= y1_gesture_stop
								&& y1_gesture_stop <= y1_gesture_start + 30);
			}

			OSTimeDlyHMSM(0,0,0,50);
 2000584:	01c00c84 	movi	r7,50
 2000588:	000d883a 	mov	r6,zero
 200058c:	000b883a 	mov	r5,zero
 2000590:	0009883a 	mov	r4,zero
 2000594:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>
		DEBUG_PRINT("[Task 1] flag consumed \n");
		IOWR(MTL_IP_BASE, 13, 0);
		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while (!gesture_detected)
 2000598:	e0bff017 	ldw	r2,-64(fp)
 200059c:	103fad26 	beq	r2,zero,2000454 <task1+0x70>

			//*(MTL_controller + 5) = (y1_gesture_start << 10) + x1_gesture_start;
			//*(MTL_controller + 6) = (y2_gesture_start << 10) + x2_gesture_start;
			//*(MTL_controller + 7) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}
		IOWR(MTL_IP_BASE, 13, 1);
 20005a0:	00c00044 	movi	r3,1
 20005a4:	008000b4 	movhi	r2,2
 20005a8:	10800d04 	addi	r2,r2,52
 20005ac:	10c00035 	stwio	r3,0(r2)

		count_old = 0;
 20005b0:	e03ff115 	stw	zero,-60(fp)
		count = 0;
 20005b4:	e03feb15 	stw	zero,-84(fp)
		shoot = 0;
 20005b8:	e03fea15 	stw	zero,-88(fp)
		int x = 446;
 20005bc:	00806f84 	movi	r2,446
 20005c0:	e0bffb15 	stw	r2,-20(fp)
		int y = 263;
 20005c4:	008041c4 	movi	r2,263
 20005c8:	e0bffc15 	stw	r2,-16(fp)
		IOWR(MTL_IP_BASE, 11, (y << 10) + x);
 20005cc:	e0bffc17 	ldw	r2,-16(fp)
 20005d0:	100692ba 	slli	r3,r2,10
 20005d4:	e0bffb17 	ldw	r2,-20(fp)
 20005d8:	1887883a 	add	r3,r3,r2
 20005dc:	008000b4 	movhi	r2,2
 20005e0:	10800b04 	addi	r2,r2,44
 20005e4:	10c00035 	stwio	r3,0(r2)
		OSTimeDlyHMSM(0, 0, 0, 500);
 20005e8:	01c07d04 	movi	r7,500
 20005ec:	000d883a 	mov	r6,zero
 20005f0:	000b883a 	mov	r5,zero
 20005f4:	0009883a 	mov	r4,zero
 20005f8:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>

		while (!shoot) {
 20005fc:	00003506 	br	20006d4 <task1+0x2f0>
			count_old = count;
 2000600:	e0bfeb17 	ldw	r2,-84(fp)
 2000604:	e0bff115 	stw	r2,-60(fp)
			count = IORD(MTL_IP_BASE, 10);
 2000608:	008000b4 	movhi	r2,2
 200060c:	10800a04 	addi	r2,r2,40
 2000610:	10800037 	ldwio	r2,0(r2)
 2000614:	e0bfeb15 	stw	r2,-84(fp)
			if (count_old == 0 && count == 1)
 2000618:	e0bff117 	ldw	r2,-60(fp)
 200061c:	1000061e 	bne	r2,zero,2000638 <task1+0x254>
 2000620:	e0bfeb17 	ldw	r2,-84(fp)
 2000624:	10800058 	cmpnei	r2,r2,1
 2000628:	1000031e 	bne	r2,zero,2000638 <task1+0x254>
				shoot = 1;
 200062c:	00800044 	movi	r2,1
 2000630:	e0bfea15 	stw	r2,-88(fp)
 2000634:	00002206 	br	20006c0 <task1+0x2dc>
			else {
				alt_up_accelerometer_spi_read_y_axis(accel_spi, &y_axis);
 2000638:	d0a78317 	ldw	r2,-25076(gp)
 200063c:	e0fffa04 	addi	r3,fp,-24
 2000640:	180b883a 	mov	r5,r3
 2000644:	1009883a 	mov	r4,r2
 2000648:	20210c80 	call	20210c8 <alt_up_accelerometer_spi_read_y_axis>
				alt_up_accelerometer_spi_read_x_axis(accel_spi, &x_axis);
 200064c:	d0a78317 	ldw	r2,-25076(gp)
 2000650:	e0fff904 	addi	r3,fp,-28
 2000654:	180b883a 	mov	r5,r3
 2000658:	1009883a 	mov	r4,r2
 200065c:	2020ffc0 	call	2020ffc <alt_up_accelerometer_spi_read_x_axis>
				//printf("Accelerometer : (%d, %d)\n",x_axis, y_axis);
				y += -(x_axis) / 10;
 2000660:	e0bff917 	ldw	r2,-28(fp)
 2000664:	0085c83a 	sub	r2,zero,r2
 2000668:	01400284 	movi	r5,10
 200066c:	1009883a 	mov	r4,r2
 2000670:	20073900 	call	2007390 <__divsi3>
 2000674:	1007883a 	mov	r3,r2
 2000678:	e0bffc17 	ldw	r2,-16(fp)
 200067c:	1885883a 	add	r2,r3,r2
 2000680:	e0bffc15 	stw	r2,-16(fp)
				x += y_axis / 10;
 2000684:	e0bffa17 	ldw	r2,-24(fp)
 2000688:	01400284 	movi	r5,10
 200068c:	1009883a 	mov	r4,r2
 2000690:	20073900 	call	2007390 <__divsi3>
 2000694:	1007883a 	mov	r3,r2
 2000698:	e0bffb17 	ldw	r2,-20(fp)
 200069c:	1885883a 	add	r2,r3,r2
 20006a0:	e0bffb15 	stw	r2,-20(fp)
				IOWR(MTL_IP_BASE, 11, (y << 10) + x);
 20006a4:	e0bffc17 	ldw	r2,-16(fp)
 20006a8:	100692ba 	slli	r3,r2,10
 20006ac:	e0bffb17 	ldw	r2,-20(fp)
 20006b0:	1887883a 	add	r3,r3,r2
 20006b4:	008000b4 	movhi	r2,2
 20006b8:	10800b04 	addi	r2,r2,44
 20006bc:	10c00035 	stwio	r3,0(r2)
				// play with the accelerometer

			}
			OSTimeDlyHMSM(0, 0, 0, 50);
 20006c0:	01c00c84 	movi	r7,50
 20006c4:	000d883a 	mov	r6,zero
 20006c8:	000b883a 	mov	r5,zero
 20006cc:	0009883a 	mov	r4,zero
 20006d0:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>
		int x = 446;
		int y = 263;
		IOWR(MTL_IP_BASE, 11, (y << 10) + x);
		OSTimeDlyHMSM(0, 0, 0, 500);

		while (!shoot) {
 20006d4:	e0bfea17 	ldw	r2,-88(fp)
 20006d8:	103fc926 	beq	r2,zero,2000600 <task1+0x21c>
				// play with the accelerometer

			}
			OSTimeDlyHMSM(0, 0, 0, 50);
		}
		IOWR(MTL_IP_BASE, 13, 0);
 20006dc:	0007883a 	mov	r3,zero
 20006e0:	008000b4 	movhi	r2,2
 20006e4:	10800d04 	addi	r2,r2,52
 20006e8:	10c00035 	stwio	r3,0(r2)

		int x_dir = (x2_gesture_stop - x1_gesture_start);
 20006ec:	e0ffed17 	ldw	r3,-76(fp)
 20006f0:	e0bfec17 	ldw	r2,-80(fp)
 20006f4:	1885c83a 	sub	r2,r3,r2
 20006f8:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 20006fc:	e0ffef17 	ldw	r3,-68(fp)
 2000700:	e0bfee17 	ldw	r2,-72(fp)
 2000704:	1885c83a 	sub	r2,r3,r2
 2000708:	e0bffe15 	stw	r2,-8(fp)
		DEBUG_PRINT("[Task 1] Send value : (%d, %d) - (%d, %d)\n", x_dir, y_dir,
 200070c:	e0fffd17 	ldw	r3,-12(fp)
 2000710:	e13ffe17 	ldw	r4,-8(fp)
 2000714:	e17ffb17 	ldw	r5,-20(fp)
 2000718:	e0bffc17 	ldw	r2,-16(fp)
 200071c:	d8800015 	stw	r2,0(sp)
 2000720:	280f883a 	mov	r7,r5
 2000724:	200d883a 	mov	r6,r4
 2000728:	180b883a 	mov	r5,r3
 200072c:	010080b4 	movhi	r4,514
 2000730:	210a5104 	addi	r4,r4,10564
 2000734:	200a0300 	call	200a030 <printf>
				x, y);
		OSMboxPost(MailBox1, &x_dir);
 2000738:	d0a79217 	ldw	r2,-25016(gp)
 200073c:	e0fffd04 	addi	r3,fp,-12
 2000740:	180b883a 	mov	r5,r3
 2000744:	1009883a 	mov	r4,r2
 2000748:	201bd3c0 	call	201bd3c <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 200074c:	d0a78c17 	ldw	r2,-25040(gp)
 2000750:	e0fffe04 	addi	r3,fp,-8
 2000754:	180b883a 	mov	r5,r3
 2000758:	1009883a 	mov	r4,r2
 200075c:	201bd3c0 	call	201bd3c <OSMboxPost>
		OSMboxPost(MailBox10, &x);
 2000760:	d0a78b17 	ldw	r2,-25044(gp)
 2000764:	e0fffb04 	addi	r3,fp,-20
 2000768:	180b883a 	mov	r5,r3
 200076c:	1009883a 	mov	r4,r2
 2000770:	201bd3c0 	call	201bd3c <OSMboxPost>
		OSMboxPost(MailBox11, &y);
 2000774:	d0a79117 	ldw	r2,-25020(gp)
 2000778:	e0fffc04 	addi	r3,fp,-16
 200077c:	180b883a 	mov	r5,r3
 2000780:	1009883a 	mov	r4,r2
 2000784:	201bd3c0 	call	201bd3c <OSMboxPost>
		gesture_detected = 0;
 2000788:	e03ff015 	stw	zero,-64(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 200078c:	01c07d04 	movi	r7,500
 2000790:	000d883a 	mov	r6,zero
 2000794:	000b883a 	mov	r5,zero
 2000798:	0009883a 	mov	r4,zero
 200079c:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>
	}
 20007a0:	003f1906 	br	2000408 <task1+0x24>

020007a4 <task2>:
}

void task2(void* pdata) {
 20007a4:	deff3304 	addi	sp,sp,-820
 20007a8:	dfc0cc15 	stw	ra,816(sp)
 20007ac:	df00cb15 	stw	fp,812(sp)
 20007b0:	dd40ca15 	stw	r21,808(sp)
 20007b4:	dd00c915 	stw	r20,804(sp)
 20007b8:	dcc0c815 	stw	r19,800(sp)
 20007bc:	dc80c715 	stw	r18,796(sp)
 20007c0:	dc40c615 	stw	r17,792(sp)
 20007c4:	dc00c515 	stw	r16,788(sp)
 20007c8:	df00cb04 	addi	fp,sp,812
 20007cc:	e13ff915 	stw	r4,-28(fp)

	INT8U err;
	INT8U opt_task2;
	volatile int * display = (int *) MTL_IP_BASE;
 20007d0:	008000b4 	movhi	r2,2
 20007d4:	e0bf3d15 	stw	r2,-780(fp)

	float ball[10][2] = {
 20007d8:	008080b4 	movhi	r2,514
 20007dc:	108a8904 	addi	r2,r2,10788
 20007e0:	e0ff4c04 	addi	r3,fp,-720
 20007e4:	1009883a 	mov	r4,r2
 20007e8:	00801404 	movi	r2,80
 20007ec:	100d883a 	mov	r6,r2
 20007f0:	200b883a 	mov	r5,r4
 20007f4:	1809883a 	mov	r4,r3
 20007f8:	2009c800 	call	2009c80 <memcpy>
			{ 626.0, 263.0 }, // black
			{ 603.0, 249.0 }, { 603.0, 277.0 }, { 626.0, 290.0 },
			{ 626.0, 236.0 }, { 649.0, 222.0 }, { 649.0, 249.0 },
			{ 649.0, 277.0 }, { 649.0, 304.0 } };

	IOWR(display, 1, ((int ) (ball[0][1]) << 10) + (int ) (ball[0][0]));
 20007fc:	e0bf3d17 	ldw	r2,-780(fp)
 2000800:	10800104 	addi	r2,r2,4
 2000804:	e0ff4d17 	ldw	r3,-716(fp)
 2000808:	1807fe72 	custom	249,r3,r3,zero
 200080c:	180892ba 	slli	r4,r3,10
 2000810:	e0ff4c17 	ldw	r3,-720(fp)
 2000814:	1807fe72 	custom	249,r3,r3,zero
 2000818:	20c7883a 	add	r3,r4,r3
 200081c:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 2, ((int ) (ball[1][1]) << 10) + (int ) (ball[1][0]));
 2000820:	e0bf3d17 	ldw	r2,-780(fp)
 2000824:	10800204 	addi	r2,r2,8
 2000828:	e0ff4f17 	ldw	r3,-708(fp)
 200082c:	1807fe72 	custom	249,r3,r3,zero
 2000830:	180892ba 	slli	r4,r3,10
 2000834:	e0ff4e17 	ldw	r3,-712(fp)
 2000838:	1807fe72 	custom	249,r3,r3,zero
 200083c:	20c7883a 	add	r3,r4,r3
 2000840:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 3, ((int ) (ball[2][1]) << 10) + (int ) (ball[2][0]));
 2000844:	e0bf3d17 	ldw	r2,-780(fp)
 2000848:	10800304 	addi	r2,r2,12
 200084c:	e0ff5117 	ldw	r3,-700(fp)
 2000850:	1807fe72 	custom	249,r3,r3,zero
 2000854:	180892ba 	slli	r4,r3,10
 2000858:	e0ff5017 	ldw	r3,-704(fp)
 200085c:	1807fe72 	custom	249,r3,r3,zero
 2000860:	20c7883a 	add	r3,r4,r3
 2000864:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 4, ((int ) (ball[3][1]) << 10) + (int ) (ball[3][0]));
 2000868:	e0bf3d17 	ldw	r2,-780(fp)
 200086c:	10800404 	addi	r2,r2,16
 2000870:	e0ff5317 	ldw	r3,-692(fp)
 2000874:	1807fe72 	custom	249,r3,r3,zero
 2000878:	180892ba 	slli	r4,r3,10
 200087c:	e0ff5217 	ldw	r3,-696(fp)
 2000880:	1807fe72 	custom	249,r3,r3,zero
 2000884:	20c7883a 	add	r3,r4,r3
 2000888:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 5, ((int ) (ball[4][1]) << 10) + (int ) (ball[4][0]));
 200088c:	e0bf3d17 	ldw	r2,-780(fp)
 2000890:	10800504 	addi	r2,r2,20
 2000894:	e0ff5517 	ldw	r3,-684(fp)
 2000898:	1807fe72 	custom	249,r3,r3,zero
 200089c:	180892ba 	slli	r4,r3,10
 20008a0:	e0ff5417 	ldw	r3,-688(fp)
 20008a4:	1807fe72 	custom	249,r3,r3,zero
 20008a8:	20c7883a 	add	r3,r4,r3
 20008ac:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 6, ((int ) (ball[5][1]) << 10) + (int ) (ball[5][0]));
 20008b0:	e0bf3d17 	ldw	r2,-780(fp)
 20008b4:	10800604 	addi	r2,r2,24
 20008b8:	e0ff5717 	ldw	r3,-676(fp)
 20008bc:	1807fe72 	custom	249,r3,r3,zero
 20008c0:	180892ba 	slli	r4,r3,10
 20008c4:	e0ff5617 	ldw	r3,-680(fp)
 20008c8:	1807fe72 	custom	249,r3,r3,zero
 20008cc:	20c7883a 	add	r3,r4,r3
 20008d0:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 7, ((int ) (ball[6][1]) << 10) + (int ) (ball[6][0]));
 20008d4:	e0bf3d17 	ldw	r2,-780(fp)
 20008d8:	10800704 	addi	r2,r2,28
 20008dc:	e0ff5917 	ldw	r3,-668(fp)
 20008e0:	1807fe72 	custom	249,r3,r3,zero
 20008e4:	180892ba 	slli	r4,r3,10
 20008e8:	e0ff5817 	ldw	r3,-672(fp)
 20008ec:	1807fe72 	custom	249,r3,r3,zero
 20008f0:	20c7883a 	add	r3,r4,r3
 20008f4:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 8, ((int ) (ball[7][1]) << 10) + (int ) (ball[7][0]));
 20008f8:	e0bf3d17 	ldw	r2,-780(fp)
 20008fc:	10800804 	addi	r2,r2,32
 2000900:	e0ff5b17 	ldw	r3,-660(fp)
 2000904:	1807fe72 	custom	249,r3,r3,zero
 2000908:	180892ba 	slli	r4,r3,10
 200090c:	e0ff5a17 	ldw	r3,-664(fp)
 2000910:	1807fe72 	custom	249,r3,r3,zero
 2000914:	20c7883a 	add	r3,r4,r3
 2000918:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 9, ((int ) (ball[8][1]) << 10) + (int ) (ball[8][0]));
 200091c:	e0bf3d17 	ldw	r2,-780(fp)
 2000920:	10800904 	addi	r2,r2,36
 2000924:	e0ff5d17 	ldw	r3,-652(fp)
 2000928:	1807fe72 	custom	249,r3,r3,zero
 200092c:	180892ba 	slli	r4,r3,10
 2000930:	e0ff5c17 	ldw	r3,-656(fp)
 2000934:	1807fe72 	custom	249,r3,r3,zero
 2000938:	20c7883a 	add	r3,r4,r3
 200093c:	10c00035 	stwio	r3,0(r2)
	IOWR(display, 10, ((int ) (ball[9][1]) << 10) + (int ) (ball[9][0]));
 2000940:	e0bf3d17 	ldw	r2,-780(fp)
 2000944:	10800a04 	addi	r2,r2,40
 2000948:	e0ff5f17 	ldw	r3,-644(fp)
 200094c:	1807fe72 	custom	249,r3,r3,zero
 2000950:	180892ba 	slli	r4,r3,10
 2000954:	e0ff5e17 	ldw	r3,-648(fp)
 2000958:	1807fe72 	custom	249,r3,r3,zero
 200095c:	20c7883a 	add	r3,r4,r3
 2000960:	10c00035 	stwio	r3,0(r2)

	int collision[45][2] = { { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, {
 2000964:	e0bf6004 	addi	r2,fp,-640
 2000968:	00c05a04 	movi	r3,360
 200096c:	180d883a 	mov	r6,r3
 2000970:	000b883a 	mov	r5,zero
 2000974:	1009883a 	mov	r4,r2
 2000978:	2009e080 	call	2009e08 <memset>
			{ 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 },
			{ 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 },
			{ 0, 0 }, { 0, 0 }, { 0, 0 } };

	while (1) {
		opt_task2 = OS_FLAG_SET;
 200097c:	00800044 	movi	r2,1
 2000980:	e0bf3e05 	stb	r2,-776(fp)
		OSFlagPost(AnimationFlagGrp, ANIMATION, opt_task2, &err);
 2000984:	d0a78817 	ldw	r2,-25056(gp)
 2000988:	e0ff3e03 	ldbu	r3,-776(fp)
 200098c:	e13f4b04 	addi	r4,fp,-724
 2000990:	200f883a 	mov	r7,r4
 2000994:	180d883a 	mov	r6,r3
 2000998:	01400044 	movi	r5,1
 200099c:	1009883a 	mov	r4,r2
 20009a0:	201adc00 	call	201adc0 <OSFlagPost>
		int *vector_x = OSMboxPend(MailBox4, 0, &err);
 20009a4:	d0a78f17 	ldw	r2,-25028(gp)
 20009a8:	e0ff4b04 	addi	r3,fp,-724
 20009ac:	180d883a 	mov	r6,r3
 20009b0:	000b883a 	mov	r5,zero
 20009b4:	1009883a 	mov	r4,r2
 20009b8:	201b99c0 	call	201b99c <OSMboxPend>
 20009bc:	e0bf3f15 	stw	r2,-772(fp)
		int *vector_y = OSMboxPend(MailBox5, 0, &err);
 20009c0:	d0a78917 	ldw	r2,-25052(gp)
 20009c4:	e0ff4b04 	addi	r3,fp,-724
 20009c8:	180d883a 	mov	r6,r3
 20009cc:	000b883a 	mov	r5,zero
 20009d0:	1009883a 	mov	r4,r2
 20009d4:	201b99c0 	call	201b99c <OSMboxPend>
 20009d8:	e0bf4015 	stw	r2,-768(fp)

		int *effect_x = OSMboxPend(MailBox12, 0, &err);
 20009dc:	d0a78d17 	ldw	r2,-25036(gp)
 20009e0:	e0ff4b04 	addi	r3,fp,-724
 20009e4:	180d883a 	mov	r6,r3
 20009e8:	000b883a 	mov	r5,zero
 20009ec:	1009883a 	mov	r4,r2
 20009f0:	201b99c0 	call	201b99c <OSMboxPend>
 20009f4:	e0bf4115 	stw	r2,-764(fp)
		int *effect_y = OSMboxPend(MailBox13, 0, &err);
 20009f8:	d0a78617 	ldw	r2,-25064(gp)
 20009fc:	e0ff4b04 	addi	r3,fp,-724
 2000a00:	180d883a 	mov	r6,r3
 2000a04:	000b883a 	mov	r5,zero
 2000a08:	1009883a 	mov	r4,r2
 2000a0c:	201b99c0 	call	201b99c <OSMboxPend>
 2000a10:	e0bf4215 	stw	r2,-760(fp)

		int *nbr_ball = OSMboxPend(MailBox8, 0, &err);
 2000a14:	d0a78e17 	ldw	r2,-25032(gp)
 2000a18:	e0ff4b04 	addi	r3,fp,-724
 2000a1c:	180d883a 	mov	r6,r3
 2000a20:	000b883a 	mov	r5,zero
 2000a24:	1009883a 	mov	r4,r2
 2000a28:	201b99c0 	call	201b99c <OSMboxPend>
 2000a2c:	e0bf4315 	stw	r2,-756(fp)

		int *reset = OSMboxPend(MailBox7,0, &err);
 2000a30:	d0a79017 	ldw	r2,-25024(gp)
 2000a34:	e0ff4b04 	addi	r3,fp,-724
 2000a38:	180d883a 	mov	r6,r3
 2000a3c:	000b883a 	mov	r5,zero
 2000a40:	1009883a 	mov	r4,r2
 2000a44:	201b99c0 	call	201b99c <OSMboxPend>
 2000a48:	e0bf4415 	stw	r2,-752(fp)

		if(*reset == 1){
 2000a4c:	e0bf4417 	ldw	r2,-752(fp)
 2000a50:	10800017 	ldw	r2,0(r2)
 2000a54:	10800058 	cmpnei	r2,r2,1
 2000a58:	1000931e 	bne	r2,zero,2000ca8 <task2+0x504>
			DEBUG_PRINT("Reset ball\n");
 2000a5c:	010080b4 	movhi	r4,514
 2000a60:	210a5c04 	addi	r4,r4,10608
 2000a64:	200a1b00 	call	200a1b0 <puts>
			ball[0][0] = 266.0;
 2000a68:	0090e174 	movhi	r2,17285
 2000a6c:	e0bf4c15 	stw	r2,-720(fp)
			ball[0][1] = 263.0;
 2000a70:	0090e134 	movhi	r2,17284
 2000a74:	10a00004 	addi	r2,r2,-32768
 2000a78:	e0bf4d15 	stw	r2,-716(fp)
			ball[1][0] = 626.0;
 2000a7c:	00910774 	movhi	r2,17437
 2000a80:	10a00004 	addi	r2,r2,-32768
 2000a84:	e0bf4e15 	stw	r2,-712(fp)
			ball[1][1] = 263.0;
 2000a88:	0090e134 	movhi	r2,17284
 2000a8c:	10a00004 	addi	r2,r2,-32768
 2000a90:	e0bf4f15 	stw	r2,-708(fp)
			ball[2][0] = 603.0;
 2000a94:	009105f4 	movhi	r2,17431
 2000a98:	10b00004 	addi	r2,r2,-16384
 2000a9c:	e0bf5015 	stw	r2,-704(fp)
			ball[2][1] = 249.0;
 2000aa0:	0090de74 	movhi	r2,17273
 2000aa4:	e0bf5115 	stw	r2,-700(fp)
			ball[3][0] = 603.0;
 2000aa8:	009105f4 	movhi	r2,17431
 2000aac:	10b00004 	addi	r2,r2,-16384
 2000ab0:	e0bf5215 	stw	r2,-696(fp)
			ball[3][1] = 277.0;
 2000ab4:	0090e2f4 	movhi	r2,17291
 2000ab8:	10a00004 	addi	r2,r2,-32768
 2000abc:	e0bf5315 	stw	r2,-692(fp)
			ball[4][0] = 626.0;
 2000ac0:	00910774 	movhi	r2,17437
 2000ac4:	10a00004 	addi	r2,r2,-32768
 2000ac8:	e0bf5415 	stw	r2,-688(fp)
			ball[4][1] = 290.0;
 2000acc:	0090e474 	movhi	r2,17297
 2000ad0:	e0bf5515 	stw	r2,-684(fp)
			ball[5][0] = 626.0;
 2000ad4:	00910774 	movhi	r2,17437
 2000ad8:	10a00004 	addi	r2,r2,-32768
 2000adc:	e0bf5615 	stw	r2,-680(fp)
			ball[5][1] = 236.0;
 2000ae0:	0090db34 	movhi	r2,17260
 2000ae4:	e0bf5715 	stw	r2,-676(fp)
			ball[6][0] = 649.0;
 2000ae8:	009108b4 	movhi	r2,17442
 2000aec:	10900004 	addi	r2,r2,16384
 2000af0:	e0bf5815 	stw	r2,-672(fp)
			ball[6][1] = 222.0;
 2000af4:	0090d7b4 	movhi	r2,17246
 2000af8:	e0bf5915 	stw	r2,-668(fp)
			ball[7][0] = 649.0;
 2000afc:	009108b4 	movhi	r2,17442
 2000b00:	10900004 	addi	r2,r2,16384
 2000b04:	e0bf5a15 	stw	r2,-664(fp)
			ball[7][1] = 249.0;
 2000b08:	0090de74 	movhi	r2,17273
 2000b0c:	e0bf5b15 	stw	r2,-660(fp)
			ball[8][0] = 649.0;
 2000b10:	009108b4 	movhi	r2,17442
 2000b14:	10900004 	addi	r2,r2,16384
 2000b18:	e0bf5c15 	stw	r2,-656(fp)
			ball[8][1] = 277.0;
 2000b1c:	0090e2f4 	movhi	r2,17291
 2000b20:	10a00004 	addi	r2,r2,-32768
 2000b24:	e0bf5d15 	stw	r2,-652(fp)
			ball[9][0] = 649.0;
 2000b28:	009108b4 	movhi	r2,17442
 2000b2c:	10900004 	addi	r2,r2,16384
 2000b30:	e0bf5e15 	stw	r2,-648(fp)
			ball[9][1] = 304.0;
 2000b34:	0090e634 	movhi	r2,17304
 2000b38:	e0bf5f15 	stw	r2,-644(fp)

			IOWR(display, 1, ((int ) (ball[0][1]) << 10) + (int ) (ball[0][0]));
 2000b3c:	e0bf3d17 	ldw	r2,-780(fp)
 2000b40:	10800104 	addi	r2,r2,4
 2000b44:	e0ff4d17 	ldw	r3,-716(fp)
 2000b48:	1807fe72 	custom	249,r3,r3,zero
 2000b4c:	180892ba 	slli	r4,r3,10
 2000b50:	e0ff4c17 	ldw	r3,-720(fp)
 2000b54:	1807fe72 	custom	249,r3,r3,zero
 2000b58:	20c7883a 	add	r3,r4,r3
 2000b5c:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 2, ((int ) (ball[1][1]) << 10) + (int ) (ball[1][0]));
 2000b60:	e0bf3d17 	ldw	r2,-780(fp)
 2000b64:	10800204 	addi	r2,r2,8
 2000b68:	e0ff4f17 	ldw	r3,-708(fp)
 2000b6c:	1807fe72 	custom	249,r3,r3,zero
 2000b70:	180892ba 	slli	r4,r3,10
 2000b74:	e0ff4e17 	ldw	r3,-712(fp)
 2000b78:	1807fe72 	custom	249,r3,r3,zero
 2000b7c:	20c7883a 	add	r3,r4,r3
 2000b80:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 3, ((int ) (ball[2][1]) << 10) + (int ) (ball[2][0]));
 2000b84:	e0bf3d17 	ldw	r2,-780(fp)
 2000b88:	10800304 	addi	r2,r2,12
 2000b8c:	e0ff5117 	ldw	r3,-700(fp)
 2000b90:	1807fe72 	custom	249,r3,r3,zero
 2000b94:	180892ba 	slli	r4,r3,10
 2000b98:	e0ff5017 	ldw	r3,-704(fp)
 2000b9c:	1807fe72 	custom	249,r3,r3,zero
 2000ba0:	20c7883a 	add	r3,r4,r3
 2000ba4:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 4, ((int ) (ball[3][1]) << 10) + (int ) (ball[3][0]));
 2000ba8:	e0bf3d17 	ldw	r2,-780(fp)
 2000bac:	10800404 	addi	r2,r2,16
 2000bb0:	e0ff5317 	ldw	r3,-692(fp)
 2000bb4:	1807fe72 	custom	249,r3,r3,zero
 2000bb8:	180892ba 	slli	r4,r3,10
 2000bbc:	e0ff5217 	ldw	r3,-696(fp)
 2000bc0:	1807fe72 	custom	249,r3,r3,zero
 2000bc4:	20c7883a 	add	r3,r4,r3
 2000bc8:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 5, ((int ) (ball[4][1]) << 10) + (int ) (ball[4][0]));
 2000bcc:	e0bf3d17 	ldw	r2,-780(fp)
 2000bd0:	10800504 	addi	r2,r2,20
 2000bd4:	e0ff5517 	ldw	r3,-684(fp)
 2000bd8:	1807fe72 	custom	249,r3,r3,zero
 2000bdc:	180892ba 	slli	r4,r3,10
 2000be0:	e0ff5417 	ldw	r3,-688(fp)
 2000be4:	1807fe72 	custom	249,r3,r3,zero
 2000be8:	20c7883a 	add	r3,r4,r3
 2000bec:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 6, ((int ) (ball[5][1]) << 10) + (int ) (ball[5][0]));
 2000bf0:	e0bf3d17 	ldw	r2,-780(fp)
 2000bf4:	10800604 	addi	r2,r2,24
 2000bf8:	e0ff5717 	ldw	r3,-676(fp)
 2000bfc:	1807fe72 	custom	249,r3,r3,zero
 2000c00:	180892ba 	slli	r4,r3,10
 2000c04:	e0ff5617 	ldw	r3,-680(fp)
 2000c08:	1807fe72 	custom	249,r3,r3,zero
 2000c0c:	20c7883a 	add	r3,r4,r3
 2000c10:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 7, ((int ) (ball[6][1]) << 10) + (int ) (ball[6][0]));
 2000c14:	e0bf3d17 	ldw	r2,-780(fp)
 2000c18:	10800704 	addi	r2,r2,28
 2000c1c:	e0ff5917 	ldw	r3,-668(fp)
 2000c20:	1807fe72 	custom	249,r3,r3,zero
 2000c24:	180892ba 	slli	r4,r3,10
 2000c28:	e0ff5817 	ldw	r3,-672(fp)
 2000c2c:	1807fe72 	custom	249,r3,r3,zero
 2000c30:	20c7883a 	add	r3,r4,r3
 2000c34:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 8, ((int ) (ball[7][1]) << 10) + (int ) (ball[7][0]));
 2000c38:	e0bf3d17 	ldw	r2,-780(fp)
 2000c3c:	10800804 	addi	r2,r2,32
 2000c40:	e0ff5b17 	ldw	r3,-660(fp)
 2000c44:	1807fe72 	custom	249,r3,r3,zero
 2000c48:	180892ba 	slli	r4,r3,10
 2000c4c:	e0ff5a17 	ldw	r3,-664(fp)
 2000c50:	1807fe72 	custom	249,r3,r3,zero
 2000c54:	20c7883a 	add	r3,r4,r3
 2000c58:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 9, ((int ) (ball[8][1]) << 10) + (int ) (ball[8][0]));
 2000c5c:	e0bf3d17 	ldw	r2,-780(fp)
 2000c60:	10800904 	addi	r2,r2,36
 2000c64:	e0ff5d17 	ldw	r3,-652(fp)
 2000c68:	1807fe72 	custom	249,r3,r3,zero
 2000c6c:	180892ba 	slli	r4,r3,10
 2000c70:	e0ff5c17 	ldw	r3,-656(fp)
 2000c74:	1807fe72 	custom	249,r3,r3,zero
 2000c78:	20c7883a 	add	r3,r4,r3
 2000c7c:	10c00035 	stwio	r3,0(r2)
			IOWR(display, 10, ((int ) (ball[9][1]) << 10) + (int ) (ball[9][0]));
 2000c80:	e0bf3d17 	ldw	r2,-780(fp)
 2000c84:	10800a04 	addi	r2,r2,40
 2000c88:	e0ff5f17 	ldw	r3,-644(fp)
 2000c8c:	1807fe72 	custom	249,r3,r3,zero
 2000c90:	180892ba 	slli	r4,r3,10
 2000c94:	e0ff5e17 	ldw	r3,-648(fp)
 2000c98:	1807fe72 	custom	249,r3,r3,zero
 2000c9c:	20c7883a 	add	r3,r4,r3
 2000ca0:	10c00035 	stwio	r3,0(r2)
 2000ca4:	003f3506 	br	200097c <task2+0x1d8>
		}
		else{

			int number_of_ball = *nbr_ball;
 2000ca8:	e0bf4317 	ldw	r2,-756(fp)
 2000cac:	10800017 	ldw	r2,0(r2)
 2000cb0:	e0bfba15 	stw	r2,-280(fp)

			float x = (float) *vector_x;
 2000cb4:	e0bf3f17 	ldw	r2,-772(fp)
 2000cb8:	10800017 	ldw	r2,0(r2)
 2000cbc:	1005feb2 	custom	250,r2,r2,zero
 2000cc0:	e0bf4515 	stw	r2,-748(fp)
			float y = (float) *vector_y;
 2000cc4:	e0bf4017 	ldw	r2,-768(fp)
 2000cc8:	10800017 	ldw	r2,0(r2)
 2000ccc:	1005feb2 	custom	250,r2,r2,zero
 2000cd0:	e0bf4615 	stw	r2,-744(fp)

			float length = sqrt(x * x + y * y);
 2000cd4:	e0ff4517 	ldw	r3,-748(fp)
 2000cd8:	e0bf4517 	ldw	r2,-748(fp)
 2000cdc:	1887ff32 	custom	252,r3,r3,r2
 2000ce0:	e13f4617 	ldw	r4,-744(fp)
 2000ce4:	e0bf4617 	ldw	r2,-744(fp)
 2000ce8:	2085ff32 	custom	252,r2,r4,r2
 2000cec:	1885ff72 	custom	253,r2,r3,r2
 2000cf0:	1009883a 	mov	r4,r2
 2000cf4:	20099440 	call	2009944 <__extendsfdf2>
 2000cf8:	100b883a 	mov	r5,r2
 2000cfc:	180d883a 	mov	r6,r3
 2000d00:	2809883a 	mov	r4,r5
 2000d04:	300b883a 	mov	r5,r6
 2000d08:	200471c0 	call	200471c <sqrt>
 2000d0c:	100b883a 	mov	r5,r2
 2000d10:	180d883a 	mov	r6,r3
 2000d14:	2809883a 	mov	r4,r5
 2000d18:	300b883a 	mov	r5,r6
 2000d1c:	2009a540 	call	2009a54 <__truncdfsf2>
 2000d20:	1007883a 	mov	r3,r2
 2000d24:	e0ff4715 	stw	r3,-740(fp)
			float direction[] = { x / length, y / length };
 2000d28:	e0ff4517 	ldw	r3,-748(fp)
 2000d2c:	e0bf4717 	ldw	r2,-740(fp)
 2000d30:	1885fff2 	custom	255,r2,r3,r2
 2000d34:	e0bfbb15 	stw	r2,-276(fp)
 2000d38:	e0ff4617 	ldw	r3,-744(fp)
 2000d3c:	e0bf4717 	ldw	r2,-740(fp)
 2000d40:	1885fff2 	custom	255,r2,r3,r2
 2000d44:	e0bfbc15 	stw	r2,-272(fp)
			float speed = fmin(length / 2.0, 400.0);
 2000d48:	e13f4717 	ldw	r4,-740(fp)
 2000d4c:	20099440 	call	2009944 <__extendsfdf2>
 2000d50:	1011883a 	mov	r8,r2
 2000d54:	1813883a 	mov	r9,r3
 2000d58:	000d883a 	mov	r6,zero
 2000d5c:	01d00034 	movhi	r7,16384
 2000d60:	4009883a 	mov	r4,r8
 2000d64:	480b883a 	mov	r5,r9
 2000d68:	2007df00 	call	2007df0 <__divdf3>
 2000d6c:	1009883a 	mov	r4,r2
 2000d70:	180b883a 	mov	r5,r3
 2000d74:	2005883a 	mov	r2,r4
 2000d78:	2807883a 	mov	r3,r5
 2000d7c:	000d883a 	mov	r6,zero
 2000d80:	01d01e74 	movhi	r7,16505
 2000d84:	1009883a 	mov	r4,r2
 2000d88:	180b883a 	mov	r5,r3
 2000d8c:	20042e80 	call	20042e8 <fmin>
 2000d90:	100b883a 	mov	r5,r2
 2000d94:	180d883a 	mov	r6,r3
 2000d98:	2809883a 	mov	r4,r5
 2000d9c:	300b883a 	mov	r5,r6
 2000da0:	2009a540 	call	2009a54 <__truncdfsf2>
 2000da4:	1007883a 	mov	r3,r2
 2000da8:	e0ff3b15 	stw	r3,-788(fp)

			float velocity[10][2] = { { direction[0] * speed / 80.0, direction[1]
 2000dac:	e0bfe504 	addi	r2,fp,-108
 2000db0:	00c01404 	movi	r3,80
 2000db4:	180d883a 	mov	r6,r3
 2000db8:	000b883a 	mov	r5,zero
 2000dbc:	1009883a 	mov	r4,r2
 2000dc0:	2009e080 	call	2009e08 <memset>
 2000dc4:	e0ffbb17 	ldw	r3,-276(fp)
 2000dc8:	e0bf3b17 	ldw	r2,-788(fp)
 2000dcc:	1887ff32 	custom	252,r3,r3,r2
 2000dd0:	0090a834 	movhi	r2,17056
 2000dd4:	1885fff2 	custom	255,r2,r3,r2
 2000dd8:	e0bfe515 	stw	r2,-108(fp)
 2000ddc:	e0ffbc17 	ldw	r3,-272(fp)
					* speed / 80.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, {
 2000de0:	e0bf3b17 	ldw	r2,-788(fp)
 2000de4:	1887ff32 	custom	252,r3,r3,r2

			float length = sqrt(x * x + y * y);
			float direction[] = { x / length, y / length };
			float speed = fmin(length / 2.0, 400.0);

			float velocity[10][2] = { { direction[0] * speed / 80.0, direction[1]
 2000de8:	0090a834 	movhi	r2,17056
 2000dec:	1885fff2 	custom	255,r2,r3,r2
 2000df0:	e0bfe615 	stw	r2,-104(fp)
					* speed / 80.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, {
					0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 },
					{ 0.0, 0.0 }, { 0.0, 0.0 } };

			DEBUG_PRINT(
 2000df4:	e0bf3f17 	ldw	r2,-772(fp)
 2000df8:	15000017 	ldw	r20,0(r2)
 2000dfc:	e0bf4017 	ldw	r2,-768(fp)
 2000e00:	15400017 	ldw	r21,0(r2)
 2000e04:	e13f3b17 	ldw	r4,-788(fp)
 2000e08:	20099440 	call	2009944 <__extendsfdf2>
 2000e0c:	1025883a 	mov	r18,r2
 2000e10:	1827883a 	mov	r19,r3
					"[Task 2] Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f) - (%d)",
					*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1], number_of_ball);
 2000e14:	e0bfe517 	ldw	r2,-108(fp)
			float velocity[10][2] = { { direction[0] * speed / 80.0, direction[1]
					* speed / 80.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, {
					0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 },
					{ 0.0, 0.0 }, { 0.0, 0.0 } };

			DEBUG_PRINT(
 2000e18:	1009883a 	mov	r4,r2
 2000e1c:	20099440 	call	2009944 <__extendsfdf2>
 2000e20:	1021883a 	mov	r16,r2
 2000e24:	1823883a 	mov	r17,r3
					"[Task 2] Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f) - (%d)",
					*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1], number_of_ball);
 2000e28:	e0bfe617 	ldw	r2,-104(fp)
			float velocity[10][2] = { { direction[0] * speed / 80.0, direction[1]
					* speed / 80.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, {
					0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 },
					{ 0.0, 0.0 }, { 0.0, 0.0 } };

			DEBUG_PRINT(
 2000e2c:	1009883a 	mov	r4,r2
 2000e30:	20099440 	call	2009944 <__extendsfdf2>
 2000e34:	1009883a 	mov	r4,r2
 2000e38:	180b883a 	mov	r5,r3
 2000e3c:	e0bfba17 	ldw	r2,-280(fp)
 2000e40:	d8800515 	stw	r2,20(sp)
 2000e44:	d9000315 	stw	r4,12(sp)
 2000e48:	d9400415 	stw	r5,16(sp)
 2000e4c:	dc000115 	stw	r16,4(sp)
 2000e50:	dc400215 	stw	r17,8(sp)
 2000e54:	dcc00015 	stw	r19,0(sp)
 2000e58:	900f883a 	mov	r7,r18
 2000e5c:	a80d883a 	mov	r6,r21
 2000e60:	a00b883a 	mov	r5,r20
 2000e64:	010080b4 	movhi	r4,514
 2000e68:	210a5f04 	addi	r4,r4,10620
 2000e6c:	200a0300 	call	200a030 <printf>
					"[Task 2] Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f) - (%d)",
					*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1], number_of_ball);
			DEBUG_PRINT(" effect : (%d, %d)\n", *effect_x, *effect_y);
 2000e70:	e0bf4117 	ldw	r2,-764(fp)
 2000e74:	10c00017 	ldw	r3,0(r2)
 2000e78:	e0bf4217 	ldw	r2,-760(fp)
 2000e7c:	10800017 	ldw	r2,0(r2)
 2000e80:	100d883a 	mov	r6,r2
 2000e84:	180b883a 	mov	r5,r3
 2000e88:	010080b4 	movhi	r4,514
 2000e8c:	210a7704 	addi	r4,r4,10716
 2000e90:	200a0300 	call	200a030 <printf>

			int border_collision[10][4] = { { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0,
 2000e94:	e0bfbd04 	addi	r2,fp,-268
 2000e98:	00c02804 	movi	r3,160
 2000e9c:	180d883a 	mov	r6,r3
 2000ea0:	000b883a 	mov	r5,zero
 2000ea4:	1009883a 	mov	r4,r2
 2000ea8:	2009e080 	call	2009e08 <memset>
					0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0,
					0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 } };
			float theta = atan2f((*effect_x - 446), (*effect_y - 263)); //+(3.14/2);
 2000eac:	e0bf4117 	ldw	r2,-764(fp)
 2000eb0:	10800017 	ldw	r2,0(r2)
 2000eb4:	10bf9084 	addi	r2,r2,-446
 2000eb8:	1007feb2 	custom	250,r3,r2,zero
 2000ebc:	e0bf4217 	ldw	r2,-760(fp)
 2000ec0:	10800017 	ldw	r2,0(r2)
 2000ec4:	10bfbe44 	addi	r2,r2,-263
 2000ec8:	1005feb2 	custom	250,r2,r2,zero
 2000ecc:	100b883a 	mov	r5,r2
 2000ed0:	1809883a 	mov	r4,r3
 2000ed4:	20048900 	call	2004890 <atan2f>
 2000ed8:	e0bf4815 	stw	r2,-736(fp)
			DEBUG_PRINT("theta : %f\n", theta);
 2000edc:	e13f4817 	ldw	r4,-736(fp)
 2000ee0:	20099440 	call	2009944 <__extendsfdf2>
 2000ee4:	100d883a 	mov	r6,r2
 2000ee8:	180f883a 	mov	r7,r3
 2000eec:	300b883a 	mov	r5,r6
 2000ef0:	380d883a 	mov	r6,r7
 2000ef4:	010080b4 	movhi	r4,514
 2000ef8:	210a7c04 	addi	r4,r4,10736
 2000efc:	200a0300 	call	200a030 <printf>
			int delay = 0;
 2000f00:	e03f4915 	stw	zero,-732(fp)
			float delta = 0;
 2000f04:	e03f3c15 	stw	zero,-784(fp)
			float dist = sqrtf(
 2000f08:	e0bf4117 	ldw	r2,-764(fp)
 2000f0c:	10800017 	ldw	r2,0(r2)
 2000f10:	10ff9084 	addi	r3,r2,-446
 2000f14:	e0bf4117 	ldw	r2,-764(fp)
 2000f18:	10800017 	ldw	r2,0(r2)
 2000f1c:	10bf9084 	addi	r2,r2,-446
 2000f20:	1887383a 	mul	r3,r3,r2
 2000f24:	e0bf4217 	ldw	r2,-760(fp)
 2000f28:	10800017 	ldw	r2,0(r2)
 2000f2c:	113fbe44 	addi	r4,r2,-263
 2000f30:	e0bf4217 	ldw	r2,-760(fp)
 2000f34:	10800017 	ldw	r2,0(r2)
 2000f38:	10bfbe44 	addi	r2,r2,-263
 2000f3c:	2085383a 	mul	r2,r4,r2
 2000f40:	1885883a 	add	r2,r3,r2
 2000f44:	1005feb2 	custom	250,r2,r2,zero
 2000f48:	1005fef2 	custom	251,r2,r2,zero
 2000f4c:	e0bf4a15 	stw	r2,-728(fp)
					(*effect_x - 446) * (*effect_x - 446)
							+ (*effect_y - 263) * (*effect_y - 263));
			while (speed >= 0.1) {
 2000f50:	00072d06 	br	2002c08 <task2+0x2464>
				//Border Collide

				borderCollide(ball[0], border_collision[0], velocity[0]);
 2000f54:	e13fe504 	addi	r4,fp,-108
 2000f58:	e0ffbd04 	addi	r3,fp,-268
 2000f5c:	e0bf4c04 	addi	r2,fp,-720
 2000f60:	200d883a 	mov	r6,r4
 2000f64:	180b883a 	mov	r5,r3
 2000f68:	1009883a 	mov	r4,r2
 2000f6c:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[1], border_collision[1], velocity[1]);
 2000f70:	e0bfe504 	addi	r2,fp,-108
 2000f74:	11000204 	addi	r4,r2,8
 2000f78:	e0bfbd04 	addi	r2,fp,-268
 2000f7c:	10c00404 	addi	r3,r2,16
 2000f80:	e0bf4c04 	addi	r2,fp,-720
 2000f84:	10800204 	addi	r2,r2,8
 2000f88:	200d883a 	mov	r6,r4
 2000f8c:	180b883a 	mov	r5,r3
 2000f90:	1009883a 	mov	r4,r2
 2000f94:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[2], border_collision[2], velocity[2]);
 2000f98:	e0bfe504 	addi	r2,fp,-108
 2000f9c:	11000404 	addi	r4,r2,16
 2000fa0:	e0bfbd04 	addi	r2,fp,-268
 2000fa4:	10c00804 	addi	r3,r2,32
 2000fa8:	e0bf4c04 	addi	r2,fp,-720
 2000fac:	10800404 	addi	r2,r2,16
 2000fb0:	200d883a 	mov	r6,r4
 2000fb4:	180b883a 	mov	r5,r3
 2000fb8:	1009883a 	mov	r4,r2
 2000fbc:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[3], border_collision[3], velocity[3]);
 2000fc0:	e0bfe504 	addi	r2,fp,-108
 2000fc4:	11000604 	addi	r4,r2,24
 2000fc8:	e0bfbd04 	addi	r2,fp,-268
 2000fcc:	10c00c04 	addi	r3,r2,48
 2000fd0:	e0bf4c04 	addi	r2,fp,-720
 2000fd4:	10800604 	addi	r2,r2,24
 2000fd8:	200d883a 	mov	r6,r4
 2000fdc:	180b883a 	mov	r5,r3
 2000fe0:	1009883a 	mov	r4,r2
 2000fe4:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[4], border_collision[4], velocity[4]);
 2000fe8:	e0bfe504 	addi	r2,fp,-108
 2000fec:	11000804 	addi	r4,r2,32
 2000ff0:	e0bfbd04 	addi	r2,fp,-268
 2000ff4:	10c01004 	addi	r3,r2,64
 2000ff8:	e0bf4c04 	addi	r2,fp,-720
 2000ffc:	10800804 	addi	r2,r2,32
 2001000:	200d883a 	mov	r6,r4
 2001004:	180b883a 	mov	r5,r3
 2001008:	1009883a 	mov	r4,r2
 200100c:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[5], border_collision[5], velocity[5]);
 2001010:	e0bfe504 	addi	r2,fp,-108
 2001014:	11000a04 	addi	r4,r2,40
 2001018:	e0bfbd04 	addi	r2,fp,-268
 200101c:	10c01404 	addi	r3,r2,80
 2001020:	e0bf4c04 	addi	r2,fp,-720
 2001024:	10800a04 	addi	r2,r2,40
 2001028:	200d883a 	mov	r6,r4
 200102c:	180b883a 	mov	r5,r3
 2001030:	1009883a 	mov	r4,r2
 2001034:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[6], border_collision[6], velocity[6]);
 2001038:	e0bfe504 	addi	r2,fp,-108
 200103c:	11000c04 	addi	r4,r2,48
 2001040:	e0bfbd04 	addi	r2,fp,-268
 2001044:	10c01804 	addi	r3,r2,96
 2001048:	e0bf4c04 	addi	r2,fp,-720
 200104c:	10800c04 	addi	r2,r2,48
 2001050:	200d883a 	mov	r6,r4
 2001054:	180b883a 	mov	r5,r3
 2001058:	1009883a 	mov	r4,r2
 200105c:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[7], border_collision[7], velocity[7]);
 2001060:	e0bfe504 	addi	r2,fp,-108
 2001064:	11000e04 	addi	r4,r2,56
 2001068:	e0bfbd04 	addi	r2,fp,-268
 200106c:	10c01c04 	addi	r3,r2,112
 2001070:	e0bf4c04 	addi	r2,fp,-720
 2001074:	10800e04 	addi	r2,r2,56
 2001078:	200d883a 	mov	r6,r4
 200107c:	180b883a 	mov	r5,r3
 2001080:	1009883a 	mov	r4,r2
 2001084:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[8], border_collision[8], velocity[8]);
 2001088:	e0bfe504 	addi	r2,fp,-108
 200108c:	11001004 	addi	r4,r2,64
 2001090:	e0bfbd04 	addi	r2,fp,-268
 2001094:	10c02004 	addi	r3,r2,128
 2001098:	e0bf4c04 	addi	r2,fp,-720
 200109c:	10801004 	addi	r2,r2,64
 20010a0:	200d883a 	mov	r6,r4
 20010a4:	180b883a 	mov	r5,r3
 20010a8:	1009883a 	mov	r4,r2
 20010ac:	2003aec0 	call	2003aec <borderCollide>
				borderCollide(ball[9], border_collision[9], velocity[9]);
 20010b0:	e0bfe504 	addi	r2,fp,-108
 20010b4:	11001204 	addi	r4,r2,72
 20010b8:	e0bfbd04 	addi	r2,fp,-268
 20010bc:	10c02404 	addi	r3,r2,144
 20010c0:	e0bf4c04 	addi	r2,fp,-720
 20010c4:	10801204 	addi	r2,r2,72
 20010c8:	200d883a 	mov	r6,r4
 20010cc:	180b883a 	mov	r5,r3
 20010d0:	1009883a 	mov	r4,r2
 20010d4:	2003aec0 	call	2003aec <borderCollide>

				//Move the ball

				//Move the ball
				//   printf("(Delta,theta), (%f,%f)\n",delta,theta);moveBall(ball[0], velocity[0],delta,1);
				if (theta > 0 && theta > 0.4 && dist > 20) {
 20010d8:	e0bf4817 	ldw	r2,-736(fp)
 20010dc:	0007883a 	mov	r3,zero
 20010e0:	10c5f972 	custom	229,r2,r2,r3
 20010e4:	10003d26 	beq	r2,zero,20011dc <task2+0xa38>
 20010e8:	e13f4817 	ldw	r4,-736(fp)
 20010ec:	20099440 	call	2009944 <__extendsfdf2>
 20010f0:	1011883a 	mov	r8,r2
 20010f4:	1813883a 	mov	r9,r3
 20010f8:	01a666b4 	movhi	r6,39322
 20010fc:	31a66684 	addi	r6,r6,-26214
 2001100:	01cff6b4 	movhi	r7,16346
 2001104:	39e66644 	addi	r7,r7,-26215
 2001108:	4009883a 	mov	r4,r8
 200110c:	480b883a 	mov	r5,r9
 2001110:	20087600 	call	2008760 <__gedf2>
 2001114:	0080310e 	bge	zero,r2,20011dc <task2+0xa38>
 2001118:	e0ff4a17 	ldw	r3,-728(fp)
 200111c:	00906834 	movhi	r2,16800
 2001120:	1885f972 	custom	229,r2,r3,r2
 2001124:	10002d26 	beq	r2,zero,20011dc <task2+0xa38>
					if (delta < theta) {
 2001128:	e0ff3c17 	ldw	r3,-784(fp)
 200112c:	e0bf4817 	ldw	r2,-736(fp)
 2001130:	1885f9f2 	custom	231,r2,r3,r2
 2001134:	10007126 	beq	r2,zero,20012fc <task2+0xb58>
						//printf("(Delta,theta), (%f,%f)\n",delta,theta);
						delta = delta + (0.00012667 * dist);
 2001138:	e13f3c17 	ldw	r4,-784(fp)
 200113c:	20099440 	call	2009944 <__extendsfdf2>
 2001140:	1021883a 	mov	r16,r2
 2001144:	1823883a 	mov	r17,r3
 2001148:	e13f4a17 	ldw	r4,-728(fp)
 200114c:	20099440 	call	2009944 <__extendsfdf2>
 2001150:	1011883a 	mov	r8,r2
 2001154:	1813883a 	mov	r9,r3
 2001158:	0180f234 	movhi	r6,968
 200115c:	31b82a84 	addi	r6,r6,-8022
 2001160:	01cfc874 	movhi	r7,16161
 2001164:	39e695c4 	addi	r7,r7,-26025
 2001168:	4009883a 	mov	r4,r8
 200116c:	480b883a 	mov	r5,r9
 2001170:	20089300 	call	2008930 <__muldf3>
 2001174:	1009883a 	mov	r4,r2
 2001178:	180b883a 	mov	r5,r3
 200117c:	2005883a 	mov	r2,r4
 2001180:	2807883a 	mov	r3,r5
 2001184:	100d883a 	mov	r6,r2
 2001188:	180f883a 	mov	r7,r3
 200118c:	8009883a 	mov	r4,r16
 2001190:	880b883a 	mov	r5,r17
 2001194:	20075440 	call	2007544 <__adddf3>
 2001198:	1009883a 	mov	r4,r2
 200119c:	180b883a 	mov	r5,r3
 20011a0:	2005883a 	mov	r2,r4
 20011a4:	2807883a 	mov	r3,r5
 20011a8:	1009883a 	mov	r4,r2
 20011ac:	180b883a 	mov	r5,r3
 20011b0:	2009a540 	call	2009a54 <__truncdfsf2>
 20011b4:	1007883a 	mov	r3,r2
 20011b8:	e0ff3c15 	stw	r3,-784(fp)
						moveBall(ball[0], velocity[0], delta, 1);
 20011bc:	e0ffe504 	addi	r3,fp,-108
 20011c0:	e0bf4c04 	addi	r2,fp,-720
 20011c4:	01c00044 	movi	r7,1
 20011c8:	e1bf3c17 	ldw	r6,-784(fp)
 20011cc:	180b883a 	mov	r5,r3
 20011d0:	1009883a 	mov	r4,r2
 20011d4:	20040f00 	call	20040f0 <moveBall>
				//Move the ball

				//Move the ball
				//   printf("(Delta,theta), (%f,%f)\n",delta,theta);moveBall(ball[0], velocity[0],delta,1);
				if (theta > 0 && theta > 0.4 && dist > 20) {
					if (delta < theta) {
 20011d8:	00004806 	br	20012fc <task2+0xb58>
						//printf("(Delta,theta), (%f,%f)\n",delta,theta);
						delta = delta + (0.00012667 * dist);
						moveBall(ball[0], velocity[0], delta, 1);
					}
				} else if (theta < 0 && theta < -0.4 && dist > 20) {
 20011dc:	e0bf4817 	ldw	r2,-736(fp)
 20011e0:	0007883a 	mov	r3,zero
 20011e4:	10c5f9f2 	custom	231,r2,r2,r3
 20011e8:	10003d26 	beq	r2,zero,20012e0 <task2+0xb3c>
 20011ec:	e13f4817 	ldw	r4,-736(fp)
 20011f0:	20099440 	call	2009944 <__extendsfdf2>
 20011f4:	1011883a 	mov	r8,r2
 20011f8:	1813883a 	mov	r9,r3
 20011fc:	01a666b4 	movhi	r6,39322
 2001200:	31a66684 	addi	r6,r6,-26214
 2001204:	01eff6b4 	movhi	r7,49114
 2001208:	39e66644 	addi	r7,r7,-26215
 200120c:	4009883a 	mov	r4,r8
 2001210:	480b883a 	mov	r5,r9
 2001214:	200883c0 	call	200883c <__ledf2>
 2001218:	1000310e 	bge	r2,zero,20012e0 <task2+0xb3c>
 200121c:	e0ff4a17 	ldw	r3,-728(fp)
 2001220:	00906834 	movhi	r2,16800
 2001224:	1885f972 	custom	229,r2,r3,r2
 2001228:	10002d26 	beq	r2,zero,20012e0 <task2+0xb3c>
					if (delta > theta) {
 200122c:	e0ff3c17 	ldw	r3,-784(fp)
 2001230:	e0bf4817 	ldw	r2,-736(fp)
 2001234:	1885f972 	custom	229,r2,r3,r2
 2001238:	10003026 	beq	r2,zero,20012fc <task2+0xb58>
						//printf("(Delta,theta), (%f,%f)\n",delta,theta);
						moveBall(ball[0], velocity[0], delta, 1);
 200123c:	e0ffe504 	addi	r3,fp,-108
 2001240:	e0bf4c04 	addi	r2,fp,-720
 2001244:	01c00044 	movi	r7,1
 2001248:	e1bf3c17 	ldw	r6,-784(fp)
 200124c:	180b883a 	mov	r5,r3
 2001250:	1009883a 	mov	r4,r2
 2001254:	20040f00 	call	20040f0 <moveBall>

						delta = delta - (0.00012667 * dist);
 2001258:	e13f3c17 	ldw	r4,-784(fp)
 200125c:	20099440 	call	2009944 <__extendsfdf2>
 2001260:	1021883a 	mov	r16,r2
 2001264:	1823883a 	mov	r17,r3
 2001268:	e13f4a17 	ldw	r4,-728(fp)
 200126c:	20099440 	call	2009944 <__extendsfdf2>
 2001270:	1011883a 	mov	r8,r2
 2001274:	1813883a 	mov	r9,r3
 2001278:	0180f234 	movhi	r6,968
 200127c:	31b82a84 	addi	r6,r6,-8022
 2001280:	01cfc874 	movhi	r7,16161
 2001284:	39e695c4 	addi	r7,r7,-26025
 2001288:	4009883a 	mov	r4,r8
 200128c:	480b883a 	mov	r5,r9
 2001290:	20089300 	call	2008930 <__muldf3>
 2001294:	1009883a 	mov	r4,r2
 2001298:	180b883a 	mov	r5,r3
 200129c:	2005883a 	mov	r2,r4
 20012a0:	2807883a 	mov	r3,r5
 20012a4:	100d883a 	mov	r6,r2
 20012a8:	180f883a 	mov	r7,r3
 20012ac:	8009883a 	mov	r4,r16
 20012b0:	880b883a 	mov	r5,r17
 20012b4:	20090480 	call	2009048 <__subdf3>
 20012b8:	1009883a 	mov	r4,r2
 20012bc:	180b883a 	mov	r5,r3
 20012c0:	2005883a 	mov	r2,r4
 20012c4:	2807883a 	mov	r3,r5
 20012c8:	1009883a 	mov	r4,r2
 20012cc:	180b883a 	mov	r5,r3
 20012d0:	2009a540 	call	2009a54 <__truncdfsf2>
 20012d4:	1007883a 	mov	r3,r2
 20012d8:	e0ff3c15 	stw	r3,-784(fp)
						//printf("(Delta,theta), (%f,%f)\n",delta,theta);
						delta = delta + (0.00012667 * dist);
						moveBall(ball[0], velocity[0], delta, 1);
					}
				} else if (theta < 0 && theta < -0.4 && dist > 20) {
					if (delta > theta) {
 20012dc:	00000706 	br	20012fc <task2+0xb58>
						moveBall(ball[0], velocity[0], delta, 1);

						delta = delta - (0.00012667 * dist);
					}
				} else {
					moveBall(ball[0], velocity[0], 0, 0);
 20012e0:	e0ffe504 	addi	r3,fp,-108
 20012e4:	e0bf4c04 	addi	r2,fp,-720
 20012e8:	000f883a 	mov	r7,zero
 20012ec:	000d883a 	mov	r6,zero
 20012f0:	180b883a 	mov	r5,r3
 20012f4:	1009883a 	mov	r4,r2
 20012f8:	20040f00 	call	20040f0 <moveBall>
				}
				moveBall(ball[1], velocity[1], 0, 0);
 20012fc:	e0bfe504 	addi	r2,fp,-108
 2001300:	10c00204 	addi	r3,r2,8
 2001304:	e0bf4c04 	addi	r2,fp,-720
 2001308:	10800204 	addi	r2,r2,8
 200130c:	000f883a 	mov	r7,zero
 2001310:	000d883a 	mov	r6,zero
 2001314:	180b883a 	mov	r5,r3
 2001318:	1009883a 	mov	r4,r2
 200131c:	20040f00 	call	20040f0 <moveBall>
				moveBall(ball[2], velocity[2], 0, 0);
 2001320:	e0bfe504 	addi	r2,fp,-108
 2001324:	10c00404 	addi	r3,r2,16
 2001328:	e0bf4c04 	addi	r2,fp,-720
 200132c:	10800404 	addi	r2,r2,16
 2001330:	000f883a 	mov	r7,zero
 2001334:	000d883a 	mov	r6,zero
 2001338:	180b883a 	mov	r5,r3
 200133c:	1009883a 	mov	r4,r2
 2001340:	20040f00 	call	20040f0 <moveBall>
				moveBall(ball[3], velocity[3], 0, 0);
 2001344:	e0bfe504 	addi	r2,fp,-108
 2001348:	10c00604 	addi	r3,r2,24
 200134c:	e0bf4c04 	addi	r2,fp,-720
 2001350:	10800604 	addi	r2,r2,24
 2001354:	000f883a 	mov	r7,zero
 2001358:	000d883a 	mov	r6,zero
 200135c:	180b883a 	mov	r5,r3
 2001360:	1009883a 	mov	r4,r2
 2001364:	20040f00 	call	20040f0 <moveBall>
				moveBall(ball[4], velocity[4], 0, 0);
 2001368:	e0bfe504 	addi	r2,fp,-108
 200136c:	10c00804 	addi	r3,r2,32
 2001370:	e0bf4c04 	addi	r2,fp,-720
 2001374:	10800804 	addi	r2,r2,32
 2001378:	000f883a 	mov	r7,zero
 200137c:	000d883a 	mov	r6,zero
 2001380:	180b883a 	mov	r5,r3
 2001384:	1009883a 	mov	r4,r2
 2001388:	20040f00 	call	20040f0 <moveBall>
				moveBall(ball[5], velocity[5], 0, 0);
 200138c:	e0bfe504 	addi	r2,fp,-108
 2001390:	10c00a04 	addi	r3,r2,40
 2001394:	e0bf4c04 	addi	r2,fp,-720
 2001398:	10800a04 	addi	r2,r2,40
 200139c:	000f883a 	mov	r7,zero
 20013a0:	000d883a 	mov	r6,zero
 20013a4:	180b883a 	mov	r5,r3
 20013a8:	1009883a 	mov	r4,r2
 20013ac:	20040f00 	call	20040f0 <moveBall>
				moveBall(ball[6], velocity[6], 0, 0);
 20013b0:	e0bfe504 	addi	r2,fp,-108
 20013b4:	10c00c04 	addi	r3,r2,48
 20013b8:	e0bf4c04 	addi	r2,fp,-720
 20013bc:	10800c04 	addi	r2,r2,48
 20013c0:	000f883a 	mov	r7,zero
 20013c4:	000d883a 	mov	r6,zero
 20013c8:	180b883a 	mov	r5,r3
 20013cc:	1009883a 	mov	r4,r2
 20013d0:	20040f00 	call	20040f0 <moveBall>
				moveBall(ball[7], velocity[7], 0, 0);
 20013d4:	e0bfe504 	addi	r2,fp,-108
 20013d8:	10c00e04 	addi	r3,r2,56
 20013dc:	e0bf4c04 	addi	r2,fp,-720
 20013e0:	10800e04 	addi	r2,r2,56
 20013e4:	000f883a 	mov	r7,zero
 20013e8:	000d883a 	mov	r6,zero
 20013ec:	180b883a 	mov	r5,r3
 20013f0:	1009883a 	mov	r4,r2
 20013f4:	20040f00 	call	20040f0 <moveBall>
				moveBall(ball[8], velocity[8], 0, 0);
 20013f8:	e0bfe504 	addi	r2,fp,-108
 20013fc:	10c01004 	addi	r3,r2,64
 2001400:	e0bf4c04 	addi	r2,fp,-720
 2001404:	10801004 	addi	r2,r2,64
 2001408:	000f883a 	mov	r7,zero
 200140c:	000d883a 	mov	r6,zero
 2001410:	180b883a 	mov	r5,r3
 2001414:	1009883a 	mov	r4,r2
 2001418:	20040f00 	call	20040f0 <moveBall>
				moveBall(ball[9], velocity[9], 0, 0);
 200141c:	e0bfe504 	addi	r2,fp,-108
 2001420:	10c01204 	addi	r3,r2,72
 2001424:	e0bf4c04 	addi	r2,fp,-720
 2001428:	10801204 	addi	r2,r2,72
 200142c:	000f883a 	mov	r7,zero
 2001430:	000d883a 	mov	r6,zero
 2001434:	180b883a 	mov	r5,r3
 2001438:	1009883a 	mov	r4,r2
 200143c:	20040f00 	call	20040f0 <moveBall>
				//Whole collision

				if (whole_collide(ball[1], velocity[1]))
 2001440:	e0bfe504 	addi	r2,fp,-108
 2001444:	10c00204 	addi	r3,r2,8
 2001448:	e0bf4c04 	addi	r2,fp,-720
 200144c:	10800204 	addi	r2,r2,8
 2001450:	180b883a 	mov	r5,r3
 2001454:	1009883a 	mov	r4,r2
 2001458:	20039780 	call	2003978 <whole_collide>
 200145c:	10000326 	beq	r2,zero,200146c <task2+0xcc8>
					number_of_ball -= 1;
 2001460:	e0bfba17 	ldw	r2,-280(fp)
 2001464:	10bfffc4 	addi	r2,r2,-1
 2001468:	e0bfba15 	stw	r2,-280(fp)
				if (whole_collide(ball[2], velocity[2]))
 200146c:	e0bfe504 	addi	r2,fp,-108
 2001470:	10c00404 	addi	r3,r2,16
 2001474:	e0bf4c04 	addi	r2,fp,-720
 2001478:	10800404 	addi	r2,r2,16
 200147c:	180b883a 	mov	r5,r3
 2001480:	1009883a 	mov	r4,r2
 2001484:	20039780 	call	2003978 <whole_collide>
 2001488:	10000326 	beq	r2,zero,2001498 <task2+0xcf4>
					number_of_ball -= 1;
 200148c:	e0bfba17 	ldw	r2,-280(fp)
 2001490:	10bfffc4 	addi	r2,r2,-1
 2001494:	e0bfba15 	stw	r2,-280(fp)
				if (whole_collide(ball[3], velocity[3]))
 2001498:	e0bfe504 	addi	r2,fp,-108
 200149c:	10c00604 	addi	r3,r2,24
 20014a0:	e0bf4c04 	addi	r2,fp,-720
 20014a4:	10800604 	addi	r2,r2,24
 20014a8:	180b883a 	mov	r5,r3
 20014ac:	1009883a 	mov	r4,r2
 20014b0:	20039780 	call	2003978 <whole_collide>
 20014b4:	10000326 	beq	r2,zero,20014c4 <task2+0xd20>
					number_of_ball -= 1;
 20014b8:	e0bfba17 	ldw	r2,-280(fp)
 20014bc:	10bfffc4 	addi	r2,r2,-1
 20014c0:	e0bfba15 	stw	r2,-280(fp)
				if (whole_collide(ball[4], velocity[4]))
 20014c4:	e0bfe504 	addi	r2,fp,-108
 20014c8:	10c00804 	addi	r3,r2,32
 20014cc:	e0bf4c04 	addi	r2,fp,-720
 20014d0:	10800804 	addi	r2,r2,32
 20014d4:	180b883a 	mov	r5,r3
 20014d8:	1009883a 	mov	r4,r2
 20014dc:	20039780 	call	2003978 <whole_collide>
 20014e0:	10000326 	beq	r2,zero,20014f0 <task2+0xd4c>
					number_of_ball -= 1;
 20014e4:	e0bfba17 	ldw	r2,-280(fp)
 20014e8:	10bfffc4 	addi	r2,r2,-1
 20014ec:	e0bfba15 	stw	r2,-280(fp)
				if (whole_collide(ball[5], velocity[5]))
 20014f0:	e0bfe504 	addi	r2,fp,-108
 20014f4:	10c00a04 	addi	r3,r2,40
 20014f8:	e0bf4c04 	addi	r2,fp,-720
 20014fc:	10800a04 	addi	r2,r2,40
 2001500:	180b883a 	mov	r5,r3
 2001504:	1009883a 	mov	r4,r2
 2001508:	20039780 	call	2003978 <whole_collide>
 200150c:	10000326 	beq	r2,zero,200151c <task2+0xd78>
					number_of_ball -= 1;
 2001510:	e0bfba17 	ldw	r2,-280(fp)
 2001514:	10bfffc4 	addi	r2,r2,-1
 2001518:	e0bfba15 	stw	r2,-280(fp)
				if (whole_collide(ball[6], velocity[6]))
 200151c:	e0bfe504 	addi	r2,fp,-108
 2001520:	10c00c04 	addi	r3,r2,48
 2001524:	e0bf4c04 	addi	r2,fp,-720
 2001528:	10800c04 	addi	r2,r2,48
 200152c:	180b883a 	mov	r5,r3
 2001530:	1009883a 	mov	r4,r2
 2001534:	20039780 	call	2003978 <whole_collide>
 2001538:	10000326 	beq	r2,zero,2001548 <task2+0xda4>
					number_of_ball -= 1;
 200153c:	e0bfba17 	ldw	r2,-280(fp)
 2001540:	10bfffc4 	addi	r2,r2,-1
 2001544:	e0bfba15 	stw	r2,-280(fp)
				if (whole_collide(ball[7], velocity[7]))
 2001548:	e0bfe504 	addi	r2,fp,-108
 200154c:	10c00e04 	addi	r3,r2,56
 2001550:	e0bf4c04 	addi	r2,fp,-720
 2001554:	10800e04 	addi	r2,r2,56
 2001558:	180b883a 	mov	r5,r3
 200155c:	1009883a 	mov	r4,r2
 2001560:	20039780 	call	2003978 <whole_collide>
 2001564:	10000326 	beq	r2,zero,2001574 <task2+0xdd0>
					number_of_ball -= 1;
 2001568:	e0bfba17 	ldw	r2,-280(fp)
 200156c:	10bfffc4 	addi	r2,r2,-1
 2001570:	e0bfba15 	stw	r2,-280(fp)
				if (whole_collide(ball[8], velocity[8]))
 2001574:	e0bfe504 	addi	r2,fp,-108
 2001578:	10c01004 	addi	r3,r2,64
 200157c:	e0bf4c04 	addi	r2,fp,-720
 2001580:	10801004 	addi	r2,r2,64
 2001584:	180b883a 	mov	r5,r3
 2001588:	1009883a 	mov	r4,r2
 200158c:	20039780 	call	2003978 <whole_collide>
 2001590:	10000326 	beq	r2,zero,20015a0 <task2+0xdfc>
					number_of_ball -= 1;
 2001594:	e0bfba17 	ldw	r2,-280(fp)
 2001598:	10bfffc4 	addi	r2,r2,-1
 200159c:	e0bfba15 	stw	r2,-280(fp)
				if (whole_collide(ball[9], velocity[9]))
 20015a0:	e0bfe504 	addi	r2,fp,-108
 20015a4:	10c01204 	addi	r3,r2,72
 20015a8:	e0bf4c04 	addi	r2,fp,-720
 20015ac:	10801204 	addi	r2,r2,72
 20015b0:	180b883a 	mov	r5,r3
 20015b4:	1009883a 	mov	r4,r2
 20015b8:	20039780 	call	2003978 <whole_collide>
 20015bc:	10000326 	beq	r2,zero,20015cc <task2+0xe28>
					number_of_ball -= 1;
 20015c0:	e0bfba17 	ldw	r2,-280(fp)
 20015c4:	10bfffc4 	addi	r2,r2,-1
 20015c8:	e0bfba15 	stw	r2,-280(fp)

				//Collision

				detect_collide(ball[0], ball[1], collision[0]);
 20015cc:	e13f6004 	addi	r4,fp,-640
 20015d0:	e0bf4c04 	addi	r2,fp,-720
 20015d4:	10c00204 	addi	r3,r2,8
 20015d8:	e0bf4c04 	addi	r2,fp,-720
 20015dc:	200d883a 	mov	r6,r4
 20015e0:	180b883a 	mov	r5,r3
 20015e4:	1009883a 	mov	r4,r2
 20015e8:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[0], ball[2], collision[1]);
 20015ec:	e0bf6004 	addi	r2,fp,-640
 20015f0:	11000204 	addi	r4,r2,8
 20015f4:	e0bf4c04 	addi	r2,fp,-720
 20015f8:	10c00404 	addi	r3,r2,16
 20015fc:	e0bf4c04 	addi	r2,fp,-720
 2001600:	200d883a 	mov	r6,r4
 2001604:	180b883a 	mov	r5,r3
 2001608:	1009883a 	mov	r4,r2
 200160c:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[0], ball[3], collision[2]);
 2001610:	e0bf6004 	addi	r2,fp,-640
 2001614:	11000404 	addi	r4,r2,16
 2001618:	e0bf4c04 	addi	r2,fp,-720
 200161c:	10c00604 	addi	r3,r2,24
 2001620:	e0bf4c04 	addi	r2,fp,-720
 2001624:	200d883a 	mov	r6,r4
 2001628:	180b883a 	mov	r5,r3
 200162c:	1009883a 	mov	r4,r2
 2001630:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[0], ball[4], collision[3]);
 2001634:	e0bf6004 	addi	r2,fp,-640
 2001638:	11000604 	addi	r4,r2,24
 200163c:	e0bf4c04 	addi	r2,fp,-720
 2001640:	10c00804 	addi	r3,r2,32
 2001644:	e0bf4c04 	addi	r2,fp,-720
 2001648:	200d883a 	mov	r6,r4
 200164c:	180b883a 	mov	r5,r3
 2001650:	1009883a 	mov	r4,r2
 2001654:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[0], ball[5], collision[4]);
 2001658:	e0bf6004 	addi	r2,fp,-640
 200165c:	11000804 	addi	r4,r2,32
 2001660:	e0bf4c04 	addi	r2,fp,-720
 2001664:	10c00a04 	addi	r3,r2,40
 2001668:	e0bf4c04 	addi	r2,fp,-720
 200166c:	200d883a 	mov	r6,r4
 2001670:	180b883a 	mov	r5,r3
 2001674:	1009883a 	mov	r4,r2
 2001678:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[0], ball[6], collision[5]);
 200167c:	e0bf6004 	addi	r2,fp,-640
 2001680:	11000a04 	addi	r4,r2,40
 2001684:	e0bf4c04 	addi	r2,fp,-720
 2001688:	10c00c04 	addi	r3,r2,48
 200168c:	e0bf4c04 	addi	r2,fp,-720
 2001690:	200d883a 	mov	r6,r4
 2001694:	180b883a 	mov	r5,r3
 2001698:	1009883a 	mov	r4,r2
 200169c:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[0], ball[7], collision[6]);
 20016a0:	e0bf6004 	addi	r2,fp,-640
 20016a4:	11000c04 	addi	r4,r2,48
 20016a8:	e0bf4c04 	addi	r2,fp,-720
 20016ac:	10c00e04 	addi	r3,r2,56
 20016b0:	e0bf4c04 	addi	r2,fp,-720
 20016b4:	200d883a 	mov	r6,r4
 20016b8:	180b883a 	mov	r5,r3
 20016bc:	1009883a 	mov	r4,r2
 20016c0:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[0], ball[8], collision[7]);
 20016c4:	e0bf6004 	addi	r2,fp,-640
 20016c8:	11000e04 	addi	r4,r2,56
 20016cc:	e0bf4c04 	addi	r2,fp,-720
 20016d0:	10c01004 	addi	r3,r2,64
 20016d4:	e0bf4c04 	addi	r2,fp,-720
 20016d8:	200d883a 	mov	r6,r4
 20016dc:	180b883a 	mov	r5,r3
 20016e0:	1009883a 	mov	r4,r2
 20016e4:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[0], ball[9], collision[8]);
 20016e8:	e0bf6004 	addi	r2,fp,-640
 20016ec:	11001004 	addi	r4,r2,64
 20016f0:	e0bf4c04 	addi	r2,fp,-720
 20016f4:	10c01204 	addi	r3,r2,72
 20016f8:	e0bf4c04 	addi	r2,fp,-720
 20016fc:	200d883a 	mov	r6,r4
 2001700:	180b883a 	mov	r5,r3
 2001704:	1009883a 	mov	r4,r2
 2001708:	2003ca80 	call	2003ca8 <detect_collide>

				detect_collide(ball[1], ball[2], collision[9]);
 200170c:	e0bf6004 	addi	r2,fp,-640
 2001710:	11001204 	addi	r4,r2,72
 2001714:	e0bf4c04 	addi	r2,fp,-720
 2001718:	10c00404 	addi	r3,r2,16
 200171c:	e0bf4c04 	addi	r2,fp,-720
 2001720:	10800204 	addi	r2,r2,8
 2001724:	200d883a 	mov	r6,r4
 2001728:	180b883a 	mov	r5,r3
 200172c:	1009883a 	mov	r4,r2
 2001730:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[1], ball[3], collision[10]);
 2001734:	e0bf6004 	addi	r2,fp,-640
 2001738:	11001404 	addi	r4,r2,80
 200173c:	e0bf4c04 	addi	r2,fp,-720
 2001740:	10c00604 	addi	r3,r2,24
 2001744:	e0bf4c04 	addi	r2,fp,-720
 2001748:	10800204 	addi	r2,r2,8
 200174c:	200d883a 	mov	r6,r4
 2001750:	180b883a 	mov	r5,r3
 2001754:	1009883a 	mov	r4,r2
 2001758:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[1], ball[4], collision[11]);
 200175c:	e0bf6004 	addi	r2,fp,-640
 2001760:	11001604 	addi	r4,r2,88
 2001764:	e0bf4c04 	addi	r2,fp,-720
 2001768:	10c00804 	addi	r3,r2,32
 200176c:	e0bf4c04 	addi	r2,fp,-720
 2001770:	10800204 	addi	r2,r2,8
 2001774:	200d883a 	mov	r6,r4
 2001778:	180b883a 	mov	r5,r3
 200177c:	1009883a 	mov	r4,r2
 2001780:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[1], ball[5], collision[12]);
 2001784:	e0bf6004 	addi	r2,fp,-640
 2001788:	11001804 	addi	r4,r2,96
 200178c:	e0bf4c04 	addi	r2,fp,-720
 2001790:	10c00a04 	addi	r3,r2,40
 2001794:	e0bf4c04 	addi	r2,fp,-720
 2001798:	10800204 	addi	r2,r2,8
 200179c:	200d883a 	mov	r6,r4
 20017a0:	180b883a 	mov	r5,r3
 20017a4:	1009883a 	mov	r4,r2
 20017a8:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[1], ball[6], collision[13]);
 20017ac:	e0bf6004 	addi	r2,fp,-640
 20017b0:	11001a04 	addi	r4,r2,104
 20017b4:	e0bf4c04 	addi	r2,fp,-720
 20017b8:	10c00c04 	addi	r3,r2,48
 20017bc:	e0bf4c04 	addi	r2,fp,-720
 20017c0:	10800204 	addi	r2,r2,8
 20017c4:	200d883a 	mov	r6,r4
 20017c8:	180b883a 	mov	r5,r3
 20017cc:	1009883a 	mov	r4,r2
 20017d0:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[1], ball[7], collision[14]);
 20017d4:	e0bf6004 	addi	r2,fp,-640
 20017d8:	11001c04 	addi	r4,r2,112
 20017dc:	e0bf4c04 	addi	r2,fp,-720
 20017e0:	10c00e04 	addi	r3,r2,56
 20017e4:	e0bf4c04 	addi	r2,fp,-720
 20017e8:	10800204 	addi	r2,r2,8
 20017ec:	200d883a 	mov	r6,r4
 20017f0:	180b883a 	mov	r5,r3
 20017f4:	1009883a 	mov	r4,r2
 20017f8:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[1], ball[8], collision[15]);
 20017fc:	e0bf6004 	addi	r2,fp,-640
 2001800:	11001e04 	addi	r4,r2,120
 2001804:	e0bf4c04 	addi	r2,fp,-720
 2001808:	10c01004 	addi	r3,r2,64
 200180c:	e0bf4c04 	addi	r2,fp,-720
 2001810:	10800204 	addi	r2,r2,8
 2001814:	200d883a 	mov	r6,r4
 2001818:	180b883a 	mov	r5,r3
 200181c:	1009883a 	mov	r4,r2
 2001820:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[1], ball[9], collision[16]);
 2001824:	e0bf6004 	addi	r2,fp,-640
 2001828:	11002004 	addi	r4,r2,128
 200182c:	e0bf4c04 	addi	r2,fp,-720
 2001830:	10c01204 	addi	r3,r2,72
 2001834:	e0bf4c04 	addi	r2,fp,-720
 2001838:	10800204 	addi	r2,r2,8
 200183c:	200d883a 	mov	r6,r4
 2001840:	180b883a 	mov	r5,r3
 2001844:	1009883a 	mov	r4,r2
 2001848:	2003ca80 	call	2003ca8 <detect_collide>

				detect_collide(ball[2], ball[3], collision[17]);
 200184c:	e0bf6004 	addi	r2,fp,-640
 2001850:	11002204 	addi	r4,r2,136
 2001854:	e0bf4c04 	addi	r2,fp,-720
 2001858:	10c00604 	addi	r3,r2,24
 200185c:	e0bf4c04 	addi	r2,fp,-720
 2001860:	10800404 	addi	r2,r2,16
 2001864:	200d883a 	mov	r6,r4
 2001868:	180b883a 	mov	r5,r3
 200186c:	1009883a 	mov	r4,r2
 2001870:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[2], ball[4], collision[18]);
 2001874:	e0bf6004 	addi	r2,fp,-640
 2001878:	11002404 	addi	r4,r2,144
 200187c:	e0bf4c04 	addi	r2,fp,-720
 2001880:	10c00804 	addi	r3,r2,32
 2001884:	e0bf4c04 	addi	r2,fp,-720
 2001888:	10800404 	addi	r2,r2,16
 200188c:	200d883a 	mov	r6,r4
 2001890:	180b883a 	mov	r5,r3
 2001894:	1009883a 	mov	r4,r2
 2001898:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[2], ball[5], collision[19]);
 200189c:	e0bf6004 	addi	r2,fp,-640
 20018a0:	11002604 	addi	r4,r2,152
 20018a4:	e0bf4c04 	addi	r2,fp,-720
 20018a8:	10c00a04 	addi	r3,r2,40
 20018ac:	e0bf4c04 	addi	r2,fp,-720
 20018b0:	10800404 	addi	r2,r2,16
 20018b4:	200d883a 	mov	r6,r4
 20018b8:	180b883a 	mov	r5,r3
 20018bc:	1009883a 	mov	r4,r2
 20018c0:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[2], ball[6], collision[20]);
 20018c4:	e0bf6004 	addi	r2,fp,-640
 20018c8:	11002804 	addi	r4,r2,160
 20018cc:	e0bf4c04 	addi	r2,fp,-720
 20018d0:	10c00c04 	addi	r3,r2,48
 20018d4:	e0bf4c04 	addi	r2,fp,-720
 20018d8:	10800404 	addi	r2,r2,16
 20018dc:	200d883a 	mov	r6,r4
 20018e0:	180b883a 	mov	r5,r3
 20018e4:	1009883a 	mov	r4,r2
 20018e8:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[2], ball[7], collision[21]);
 20018ec:	e0bf6004 	addi	r2,fp,-640
 20018f0:	11002a04 	addi	r4,r2,168
 20018f4:	e0bf4c04 	addi	r2,fp,-720
 20018f8:	10c00e04 	addi	r3,r2,56
 20018fc:	e0bf4c04 	addi	r2,fp,-720
 2001900:	10800404 	addi	r2,r2,16
 2001904:	200d883a 	mov	r6,r4
 2001908:	180b883a 	mov	r5,r3
 200190c:	1009883a 	mov	r4,r2
 2001910:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[2], ball[8], collision[22]);
 2001914:	e0bf6004 	addi	r2,fp,-640
 2001918:	11002c04 	addi	r4,r2,176
 200191c:	e0bf4c04 	addi	r2,fp,-720
 2001920:	10c01004 	addi	r3,r2,64
 2001924:	e0bf4c04 	addi	r2,fp,-720
 2001928:	10800404 	addi	r2,r2,16
 200192c:	200d883a 	mov	r6,r4
 2001930:	180b883a 	mov	r5,r3
 2001934:	1009883a 	mov	r4,r2
 2001938:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[2], ball[9], collision[23]);
 200193c:	e0bf6004 	addi	r2,fp,-640
 2001940:	11002e04 	addi	r4,r2,184
 2001944:	e0bf4c04 	addi	r2,fp,-720
 2001948:	10c01204 	addi	r3,r2,72
 200194c:	e0bf4c04 	addi	r2,fp,-720
 2001950:	10800404 	addi	r2,r2,16
 2001954:	200d883a 	mov	r6,r4
 2001958:	180b883a 	mov	r5,r3
 200195c:	1009883a 	mov	r4,r2
 2001960:	2003ca80 	call	2003ca8 <detect_collide>

				detect_collide(ball[3], ball[4], collision[24]);
 2001964:	e0bf6004 	addi	r2,fp,-640
 2001968:	11003004 	addi	r4,r2,192
 200196c:	e0bf4c04 	addi	r2,fp,-720
 2001970:	10c00804 	addi	r3,r2,32
 2001974:	e0bf4c04 	addi	r2,fp,-720
 2001978:	10800604 	addi	r2,r2,24
 200197c:	200d883a 	mov	r6,r4
 2001980:	180b883a 	mov	r5,r3
 2001984:	1009883a 	mov	r4,r2
 2001988:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[3], ball[5], collision[25]);
 200198c:	e0bf6004 	addi	r2,fp,-640
 2001990:	11003204 	addi	r4,r2,200
 2001994:	e0bf4c04 	addi	r2,fp,-720
 2001998:	10c00a04 	addi	r3,r2,40
 200199c:	e0bf4c04 	addi	r2,fp,-720
 20019a0:	10800604 	addi	r2,r2,24
 20019a4:	200d883a 	mov	r6,r4
 20019a8:	180b883a 	mov	r5,r3
 20019ac:	1009883a 	mov	r4,r2
 20019b0:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[3], ball[6], collision[26]);
 20019b4:	e0bf6004 	addi	r2,fp,-640
 20019b8:	11003404 	addi	r4,r2,208
 20019bc:	e0bf4c04 	addi	r2,fp,-720
 20019c0:	10c00c04 	addi	r3,r2,48
 20019c4:	e0bf4c04 	addi	r2,fp,-720
 20019c8:	10800604 	addi	r2,r2,24
 20019cc:	200d883a 	mov	r6,r4
 20019d0:	180b883a 	mov	r5,r3
 20019d4:	1009883a 	mov	r4,r2
 20019d8:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[3], ball[7], collision[27]);
 20019dc:	e0bf6004 	addi	r2,fp,-640
 20019e0:	11003604 	addi	r4,r2,216
 20019e4:	e0bf4c04 	addi	r2,fp,-720
 20019e8:	10c00e04 	addi	r3,r2,56
 20019ec:	e0bf4c04 	addi	r2,fp,-720
 20019f0:	10800604 	addi	r2,r2,24
 20019f4:	200d883a 	mov	r6,r4
 20019f8:	180b883a 	mov	r5,r3
 20019fc:	1009883a 	mov	r4,r2
 2001a00:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[3], ball[8], collision[28]);
 2001a04:	e0bf6004 	addi	r2,fp,-640
 2001a08:	11003804 	addi	r4,r2,224
 2001a0c:	e0bf4c04 	addi	r2,fp,-720
 2001a10:	10c01004 	addi	r3,r2,64
 2001a14:	e0bf4c04 	addi	r2,fp,-720
 2001a18:	10800604 	addi	r2,r2,24
 2001a1c:	200d883a 	mov	r6,r4
 2001a20:	180b883a 	mov	r5,r3
 2001a24:	1009883a 	mov	r4,r2
 2001a28:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[3], ball[9], collision[29]);
 2001a2c:	e0bf6004 	addi	r2,fp,-640
 2001a30:	11003a04 	addi	r4,r2,232
 2001a34:	e0bf4c04 	addi	r2,fp,-720
 2001a38:	10c01204 	addi	r3,r2,72
 2001a3c:	e0bf4c04 	addi	r2,fp,-720
 2001a40:	10800604 	addi	r2,r2,24
 2001a44:	200d883a 	mov	r6,r4
 2001a48:	180b883a 	mov	r5,r3
 2001a4c:	1009883a 	mov	r4,r2
 2001a50:	2003ca80 	call	2003ca8 <detect_collide>

				detect_collide(ball[4], ball[5], collision[30]);
 2001a54:	e0bf6004 	addi	r2,fp,-640
 2001a58:	11003c04 	addi	r4,r2,240
 2001a5c:	e0bf4c04 	addi	r2,fp,-720
 2001a60:	10c00a04 	addi	r3,r2,40
 2001a64:	e0bf4c04 	addi	r2,fp,-720
 2001a68:	10800804 	addi	r2,r2,32
 2001a6c:	200d883a 	mov	r6,r4
 2001a70:	180b883a 	mov	r5,r3
 2001a74:	1009883a 	mov	r4,r2
 2001a78:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[4], ball[6], collision[31]);
 2001a7c:	e0bf6004 	addi	r2,fp,-640
 2001a80:	11003e04 	addi	r4,r2,248
 2001a84:	e0bf4c04 	addi	r2,fp,-720
 2001a88:	10c00c04 	addi	r3,r2,48
 2001a8c:	e0bf4c04 	addi	r2,fp,-720
 2001a90:	10800804 	addi	r2,r2,32
 2001a94:	200d883a 	mov	r6,r4
 2001a98:	180b883a 	mov	r5,r3
 2001a9c:	1009883a 	mov	r4,r2
 2001aa0:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[4], ball[7], collision[32]);
 2001aa4:	e0bf6004 	addi	r2,fp,-640
 2001aa8:	11004004 	addi	r4,r2,256
 2001aac:	e0bf4c04 	addi	r2,fp,-720
 2001ab0:	10c00e04 	addi	r3,r2,56
 2001ab4:	e0bf4c04 	addi	r2,fp,-720
 2001ab8:	10800804 	addi	r2,r2,32
 2001abc:	200d883a 	mov	r6,r4
 2001ac0:	180b883a 	mov	r5,r3
 2001ac4:	1009883a 	mov	r4,r2
 2001ac8:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[4], ball[8], collision[33]);
 2001acc:	e0bf6004 	addi	r2,fp,-640
 2001ad0:	11004204 	addi	r4,r2,264
 2001ad4:	e0bf4c04 	addi	r2,fp,-720
 2001ad8:	10c01004 	addi	r3,r2,64
 2001adc:	e0bf4c04 	addi	r2,fp,-720
 2001ae0:	10800804 	addi	r2,r2,32
 2001ae4:	200d883a 	mov	r6,r4
 2001ae8:	180b883a 	mov	r5,r3
 2001aec:	1009883a 	mov	r4,r2
 2001af0:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[4], ball[9], collision[34]);
 2001af4:	e0bf6004 	addi	r2,fp,-640
 2001af8:	11004404 	addi	r4,r2,272
 2001afc:	e0bf4c04 	addi	r2,fp,-720
 2001b00:	10c01204 	addi	r3,r2,72
 2001b04:	e0bf4c04 	addi	r2,fp,-720
 2001b08:	10800804 	addi	r2,r2,32
 2001b0c:	200d883a 	mov	r6,r4
 2001b10:	180b883a 	mov	r5,r3
 2001b14:	1009883a 	mov	r4,r2
 2001b18:	2003ca80 	call	2003ca8 <detect_collide>

				detect_collide(ball[5], ball[6], collision[35]);
 2001b1c:	e0bf6004 	addi	r2,fp,-640
 2001b20:	11004604 	addi	r4,r2,280
 2001b24:	e0bf4c04 	addi	r2,fp,-720
 2001b28:	10c00c04 	addi	r3,r2,48
 2001b2c:	e0bf4c04 	addi	r2,fp,-720
 2001b30:	10800a04 	addi	r2,r2,40
 2001b34:	200d883a 	mov	r6,r4
 2001b38:	180b883a 	mov	r5,r3
 2001b3c:	1009883a 	mov	r4,r2
 2001b40:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[5], ball[7], collision[36]);
 2001b44:	e0bf6004 	addi	r2,fp,-640
 2001b48:	11004804 	addi	r4,r2,288
 2001b4c:	e0bf4c04 	addi	r2,fp,-720
 2001b50:	10c00e04 	addi	r3,r2,56
 2001b54:	e0bf4c04 	addi	r2,fp,-720
 2001b58:	10800a04 	addi	r2,r2,40
 2001b5c:	200d883a 	mov	r6,r4
 2001b60:	180b883a 	mov	r5,r3
 2001b64:	1009883a 	mov	r4,r2
 2001b68:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[5], ball[8], collision[37]);
 2001b6c:	e0bf6004 	addi	r2,fp,-640
 2001b70:	11004a04 	addi	r4,r2,296
 2001b74:	e0bf4c04 	addi	r2,fp,-720
 2001b78:	10c01004 	addi	r3,r2,64
 2001b7c:	e0bf4c04 	addi	r2,fp,-720
 2001b80:	10800a04 	addi	r2,r2,40
 2001b84:	200d883a 	mov	r6,r4
 2001b88:	180b883a 	mov	r5,r3
 2001b8c:	1009883a 	mov	r4,r2
 2001b90:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[5], ball[9], collision[38]);
 2001b94:	e0bf6004 	addi	r2,fp,-640
 2001b98:	11004c04 	addi	r4,r2,304
 2001b9c:	e0bf4c04 	addi	r2,fp,-720
 2001ba0:	10c01204 	addi	r3,r2,72
 2001ba4:	e0bf4c04 	addi	r2,fp,-720
 2001ba8:	10800a04 	addi	r2,r2,40
 2001bac:	200d883a 	mov	r6,r4
 2001bb0:	180b883a 	mov	r5,r3
 2001bb4:	1009883a 	mov	r4,r2
 2001bb8:	2003ca80 	call	2003ca8 <detect_collide>

				detect_collide(ball[6], ball[7], collision[39]);
 2001bbc:	e0bf6004 	addi	r2,fp,-640
 2001bc0:	11004e04 	addi	r4,r2,312
 2001bc4:	e0bf4c04 	addi	r2,fp,-720
 2001bc8:	10c00e04 	addi	r3,r2,56
 2001bcc:	e0bf4c04 	addi	r2,fp,-720
 2001bd0:	10800c04 	addi	r2,r2,48
 2001bd4:	200d883a 	mov	r6,r4
 2001bd8:	180b883a 	mov	r5,r3
 2001bdc:	1009883a 	mov	r4,r2
 2001be0:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[6], ball[8], collision[40]);
 2001be4:	e0bf6004 	addi	r2,fp,-640
 2001be8:	11005004 	addi	r4,r2,320
 2001bec:	e0bf4c04 	addi	r2,fp,-720
 2001bf0:	10c01004 	addi	r3,r2,64
 2001bf4:	e0bf4c04 	addi	r2,fp,-720
 2001bf8:	10800c04 	addi	r2,r2,48
 2001bfc:	200d883a 	mov	r6,r4
 2001c00:	180b883a 	mov	r5,r3
 2001c04:	1009883a 	mov	r4,r2
 2001c08:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[6], ball[9], collision[41]);
 2001c0c:	e0bf6004 	addi	r2,fp,-640
 2001c10:	11005204 	addi	r4,r2,328
 2001c14:	e0bf4c04 	addi	r2,fp,-720
 2001c18:	10c01204 	addi	r3,r2,72
 2001c1c:	e0bf4c04 	addi	r2,fp,-720
 2001c20:	10800c04 	addi	r2,r2,48
 2001c24:	200d883a 	mov	r6,r4
 2001c28:	180b883a 	mov	r5,r3
 2001c2c:	1009883a 	mov	r4,r2
 2001c30:	2003ca80 	call	2003ca8 <detect_collide>

				detect_collide(ball[7], ball[8], collision[42]);
 2001c34:	e0bf6004 	addi	r2,fp,-640
 2001c38:	11005404 	addi	r4,r2,336
 2001c3c:	e0bf4c04 	addi	r2,fp,-720
 2001c40:	10c01004 	addi	r3,r2,64
 2001c44:	e0bf4c04 	addi	r2,fp,-720
 2001c48:	10800e04 	addi	r2,r2,56
 2001c4c:	200d883a 	mov	r6,r4
 2001c50:	180b883a 	mov	r5,r3
 2001c54:	1009883a 	mov	r4,r2
 2001c58:	2003ca80 	call	2003ca8 <detect_collide>
				detect_collide(ball[7], ball[9], collision[43]);
 2001c5c:	e0bf6004 	addi	r2,fp,-640
 2001c60:	11005604 	addi	r4,r2,344
 2001c64:	e0bf4c04 	addi	r2,fp,-720
 2001c68:	10c01204 	addi	r3,r2,72
 2001c6c:	e0bf4c04 	addi	r2,fp,-720
 2001c70:	10800e04 	addi	r2,r2,56
 2001c74:	200d883a 	mov	r6,r4
 2001c78:	180b883a 	mov	r5,r3
 2001c7c:	1009883a 	mov	r4,r2
 2001c80:	2003ca80 	call	2003ca8 <detect_collide>

				detect_collide(ball[8], ball[9], collision[44]);
 2001c84:	e0bf6004 	addi	r2,fp,-640
 2001c88:	11005804 	addi	r4,r2,352
 2001c8c:	e0bf4c04 	addi	r2,fp,-720
 2001c90:	10c01204 	addi	r3,r2,72
 2001c94:	e0bf4c04 	addi	r2,fp,-720
 2001c98:	10801004 	addi	r2,r2,64
 2001c9c:	200d883a 	mov	r6,r4
 2001ca0:	180b883a 	mov	r5,r3
 2001ca4:	1009883a 	mov	r4,r2
 2001ca8:	2003ca80 	call	2003ca8 <detect_collide>

				//Calcul of collision

				collide_calc(ball[0], ball[1], velocity[0], velocity[1],
 2001cac:	e0bfe504 	addi	r2,fp,-108
 2001cb0:	11800204 	addi	r6,r2,8
 2001cb4:	e17fe504 	addi	r5,fp,-108
 2001cb8:	e0bf4c04 	addi	r2,fp,-720
 2001cbc:	11000204 	addi	r4,r2,8
 2001cc0:	e0ff4c04 	addi	r3,fp,-720
 2001cc4:	d8000115 	stw	zero,4(sp)
 2001cc8:	e0bf6004 	addi	r2,fp,-640
 2001ccc:	d8800015 	stw	r2,0(sp)
 2001cd0:	300f883a 	mov	r7,r6
 2001cd4:	280d883a 	mov	r6,r5
 2001cd8:	200b883a 	mov	r5,r4
 2001cdc:	1809883a 	mov	r4,r3
 2001ce0:	2003d680 	call	2003d68 <collide_calc>
						collision[0], 0);
				collide_calc(ball[0], ball[2], velocity[0], velocity[2],
 2001ce4:	e0bfe504 	addi	r2,fp,-108
 2001ce8:	11800404 	addi	r6,r2,16
 2001cec:	e17fe504 	addi	r5,fp,-108
 2001cf0:	e0bf4c04 	addi	r2,fp,-720
 2001cf4:	11000404 	addi	r4,r2,16
 2001cf8:	e0ff4c04 	addi	r3,fp,-720
 2001cfc:	00800044 	movi	r2,1
 2001d00:	d8800115 	stw	r2,4(sp)
 2001d04:	e0bf6004 	addi	r2,fp,-640
 2001d08:	10800204 	addi	r2,r2,8
 2001d0c:	d8800015 	stw	r2,0(sp)
 2001d10:	300f883a 	mov	r7,r6
 2001d14:	280d883a 	mov	r6,r5
 2001d18:	200b883a 	mov	r5,r4
 2001d1c:	1809883a 	mov	r4,r3
 2001d20:	2003d680 	call	2003d68 <collide_calc>
						collision[1], 1);
				collide_calc(ball[0], ball[3], velocity[0], velocity[3],
 2001d24:	e0bfe504 	addi	r2,fp,-108
 2001d28:	11800604 	addi	r6,r2,24
 2001d2c:	e17fe504 	addi	r5,fp,-108
 2001d30:	e0bf4c04 	addi	r2,fp,-720
 2001d34:	11000604 	addi	r4,r2,24
 2001d38:	e0ff4c04 	addi	r3,fp,-720
 2001d3c:	00800084 	movi	r2,2
 2001d40:	d8800115 	stw	r2,4(sp)
 2001d44:	e0bf6004 	addi	r2,fp,-640
 2001d48:	10800404 	addi	r2,r2,16
 2001d4c:	d8800015 	stw	r2,0(sp)
 2001d50:	300f883a 	mov	r7,r6
 2001d54:	280d883a 	mov	r6,r5
 2001d58:	200b883a 	mov	r5,r4
 2001d5c:	1809883a 	mov	r4,r3
 2001d60:	2003d680 	call	2003d68 <collide_calc>
						collision[2], 2);
				collide_calc(ball[0], ball[4], velocity[0], velocity[4],
 2001d64:	e0bfe504 	addi	r2,fp,-108
 2001d68:	11800804 	addi	r6,r2,32
 2001d6c:	e17fe504 	addi	r5,fp,-108
 2001d70:	e0bf4c04 	addi	r2,fp,-720
 2001d74:	11000804 	addi	r4,r2,32
 2001d78:	e0ff4c04 	addi	r3,fp,-720
 2001d7c:	008000c4 	movi	r2,3
 2001d80:	d8800115 	stw	r2,4(sp)
 2001d84:	e0bf6004 	addi	r2,fp,-640
 2001d88:	10800604 	addi	r2,r2,24
 2001d8c:	d8800015 	stw	r2,0(sp)
 2001d90:	300f883a 	mov	r7,r6
 2001d94:	280d883a 	mov	r6,r5
 2001d98:	200b883a 	mov	r5,r4
 2001d9c:	1809883a 	mov	r4,r3
 2001da0:	2003d680 	call	2003d68 <collide_calc>
						collision[3], 3);
				collide_calc(ball[0], ball[5], velocity[0], velocity[5],
 2001da4:	e0bfe504 	addi	r2,fp,-108
 2001da8:	11800a04 	addi	r6,r2,40
 2001dac:	e17fe504 	addi	r5,fp,-108
 2001db0:	e0bf4c04 	addi	r2,fp,-720
 2001db4:	11000a04 	addi	r4,r2,40
 2001db8:	e0ff4c04 	addi	r3,fp,-720
 2001dbc:	00800104 	movi	r2,4
 2001dc0:	d8800115 	stw	r2,4(sp)
 2001dc4:	e0bf6004 	addi	r2,fp,-640
 2001dc8:	10800804 	addi	r2,r2,32
 2001dcc:	d8800015 	stw	r2,0(sp)
 2001dd0:	300f883a 	mov	r7,r6
 2001dd4:	280d883a 	mov	r6,r5
 2001dd8:	200b883a 	mov	r5,r4
 2001ddc:	1809883a 	mov	r4,r3
 2001de0:	2003d680 	call	2003d68 <collide_calc>
						collision[4], 4);
				collide_calc(ball[0], ball[6], velocity[0], velocity[6],
 2001de4:	e0bfe504 	addi	r2,fp,-108
 2001de8:	11800c04 	addi	r6,r2,48
 2001dec:	e17fe504 	addi	r5,fp,-108
 2001df0:	e0bf4c04 	addi	r2,fp,-720
 2001df4:	11000c04 	addi	r4,r2,48
 2001df8:	e0ff4c04 	addi	r3,fp,-720
 2001dfc:	00800144 	movi	r2,5
 2001e00:	d8800115 	stw	r2,4(sp)
 2001e04:	e0bf6004 	addi	r2,fp,-640
 2001e08:	10800a04 	addi	r2,r2,40
 2001e0c:	d8800015 	stw	r2,0(sp)
 2001e10:	300f883a 	mov	r7,r6
 2001e14:	280d883a 	mov	r6,r5
 2001e18:	200b883a 	mov	r5,r4
 2001e1c:	1809883a 	mov	r4,r3
 2001e20:	2003d680 	call	2003d68 <collide_calc>
						collision[5], 5);
				collide_calc(ball[0], ball[7], velocity[0], velocity[7],
 2001e24:	e0bfe504 	addi	r2,fp,-108
 2001e28:	11800e04 	addi	r6,r2,56
 2001e2c:	e17fe504 	addi	r5,fp,-108
 2001e30:	e0bf4c04 	addi	r2,fp,-720
 2001e34:	11000e04 	addi	r4,r2,56
 2001e38:	e0ff4c04 	addi	r3,fp,-720
 2001e3c:	00800184 	movi	r2,6
 2001e40:	d8800115 	stw	r2,4(sp)
 2001e44:	e0bf6004 	addi	r2,fp,-640
 2001e48:	10800c04 	addi	r2,r2,48
 2001e4c:	d8800015 	stw	r2,0(sp)
 2001e50:	300f883a 	mov	r7,r6
 2001e54:	280d883a 	mov	r6,r5
 2001e58:	200b883a 	mov	r5,r4
 2001e5c:	1809883a 	mov	r4,r3
 2001e60:	2003d680 	call	2003d68 <collide_calc>
						collision[6], 6);
				collide_calc(ball[0], ball[8], velocity[0], velocity[8],
 2001e64:	e0bfe504 	addi	r2,fp,-108
 2001e68:	11801004 	addi	r6,r2,64
 2001e6c:	e17fe504 	addi	r5,fp,-108
 2001e70:	e0bf4c04 	addi	r2,fp,-720
 2001e74:	11001004 	addi	r4,r2,64
 2001e78:	e0ff4c04 	addi	r3,fp,-720
 2001e7c:	008001c4 	movi	r2,7
 2001e80:	d8800115 	stw	r2,4(sp)
 2001e84:	e0bf6004 	addi	r2,fp,-640
 2001e88:	10800e04 	addi	r2,r2,56
 2001e8c:	d8800015 	stw	r2,0(sp)
 2001e90:	300f883a 	mov	r7,r6
 2001e94:	280d883a 	mov	r6,r5
 2001e98:	200b883a 	mov	r5,r4
 2001e9c:	1809883a 	mov	r4,r3
 2001ea0:	2003d680 	call	2003d68 <collide_calc>
						collision[7], 7);
				collide_calc(ball[0], ball[9], velocity[0], velocity[9],
 2001ea4:	e0bfe504 	addi	r2,fp,-108
 2001ea8:	11801204 	addi	r6,r2,72
 2001eac:	e17fe504 	addi	r5,fp,-108
 2001eb0:	e0bf4c04 	addi	r2,fp,-720
 2001eb4:	11001204 	addi	r4,r2,72
 2001eb8:	e0ff4c04 	addi	r3,fp,-720
 2001ebc:	00800204 	movi	r2,8
 2001ec0:	d8800115 	stw	r2,4(sp)
 2001ec4:	e0bf6004 	addi	r2,fp,-640
 2001ec8:	10801004 	addi	r2,r2,64
 2001ecc:	d8800015 	stw	r2,0(sp)
 2001ed0:	300f883a 	mov	r7,r6
 2001ed4:	280d883a 	mov	r6,r5
 2001ed8:	200b883a 	mov	r5,r4
 2001edc:	1809883a 	mov	r4,r3
 2001ee0:	2003d680 	call	2003d68 <collide_calc>
						collision[8], 8);

				collide_calc(ball[1], ball[2], velocity[1], velocity[2],
 2001ee4:	e0bfe504 	addi	r2,fp,-108
 2001ee8:	11800404 	addi	r6,r2,16
 2001eec:	e0bfe504 	addi	r2,fp,-108
 2001ef0:	11400204 	addi	r5,r2,8
 2001ef4:	e0bf4c04 	addi	r2,fp,-720
 2001ef8:	11000404 	addi	r4,r2,16
 2001efc:	e0bf4c04 	addi	r2,fp,-720
 2001f00:	10c00204 	addi	r3,r2,8
 2001f04:	00800244 	movi	r2,9
 2001f08:	d8800115 	stw	r2,4(sp)
 2001f0c:	e0bf6004 	addi	r2,fp,-640
 2001f10:	10801204 	addi	r2,r2,72
 2001f14:	d8800015 	stw	r2,0(sp)
 2001f18:	300f883a 	mov	r7,r6
 2001f1c:	280d883a 	mov	r6,r5
 2001f20:	200b883a 	mov	r5,r4
 2001f24:	1809883a 	mov	r4,r3
 2001f28:	2003d680 	call	2003d68 <collide_calc>
						collision[9], 9);
				collide_calc(ball[1], ball[3], velocity[1], velocity[3],
 2001f2c:	e0bfe504 	addi	r2,fp,-108
 2001f30:	11800604 	addi	r6,r2,24
 2001f34:	e0bfe504 	addi	r2,fp,-108
 2001f38:	11400204 	addi	r5,r2,8
 2001f3c:	e0bf4c04 	addi	r2,fp,-720
 2001f40:	11000604 	addi	r4,r2,24
 2001f44:	e0bf4c04 	addi	r2,fp,-720
 2001f48:	10c00204 	addi	r3,r2,8
 2001f4c:	00800284 	movi	r2,10
 2001f50:	d8800115 	stw	r2,4(sp)
 2001f54:	e0bf6004 	addi	r2,fp,-640
 2001f58:	10801404 	addi	r2,r2,80
 2001f5c:	d8800015 	stw	r2,0(sp)
 2001f60:	300f883a 	mov	r7,r6
 2001f64:	280d883a 	mov	r6,r5
 2001f68:	200b883a 	mov	r5,r4
 2001f6c:	1809883a 	mov	r4,r3
 2001f70:	2003d680 	call	2003d68 <collide_calc>
						collision[10], 10);
				collide_calc(ball[1], ball[4], velocity[1], velocity[4],
 2001f74:	e0bfe504 	addi	r2,fp,-108
 2001f78:	11800804 	addi	r6,r2,32
 2001f7c:	e0bfe504 	addi	r2,fp,-108
 2001f80:	11400204 	addi	r5,r2,8
 2001f84:	e0bf4c04 	addi	r2,fp,-720
 2001f88:	11000804 	addi	r4,r2,32
 2001f8c:	e0bf4c04 	addi	r2,fp,-720
 2001f90:	10c00204 	addi	r3,r2,8
 2001f94:	008002c4 	movi	r2,11
 2001f98:	d8800115 	stw	r2,4(sp)
 2001f9c:	e0bf6004 	addi	r2,fp,-640
 2001fa0:	10801604 	addi	r2,r2,88
 2001fa4:	d8800015 	stw	r2,0(sp)
 2001fa8:	300f883a 	mov	r7,r6
 2001fac:	280d883a 	mov	r6,r5
 2001fb0:	200b883a 	mov	r5,r4
 2001fb4:	1809883a 	mov	r4,r3
 2001fb8:	2003d680 	call	2003d68 <collide_calc>
						collision[11], 11);
				collide_calc(ball[1], ball[5], velocity[1], velocity[5],
 2001fbc:	e0bfe504 	addi	r2,fp,-108
 2001fc0:	11800a04 	addi	r6,r2,40
 2001fc4:	e0bfe504 	addi	r2,fp,-108
 2001fc8:	11400204 	addi	r5,r2,8
 2001fcc:	e0bf4c04 	addi	r2,fp,-720
 2001fd0:	11000a04 	addi	r4,r2,40
 2001fd4:	e0bf4c04 	addi	r2,fp,-720
 2001fd8:	10c00204 	addi	r3,r2,8
 2001fdc:	00800304 	movi	r2,12
 2001fe0:	d8800115 	stw	r2,4(sp)
 2001fe4:	e0bf6004 	addi	r2,fp,-640
 2001fe8:	10801804 	addi	r2,r2,96
 2001fec:	d8800015 	stw	r2,0(sp)
 2001ff0:	300f883a 	mov	r7,r6
 2001ff4:	280d883a 	mov	r6,r5
 2001ff8:	200b883a 	mov	r5,r4
 2001ffc:	1809883a 	mov	r4,r3
 2002000:	2003d680 	call	2003d68 <collide_calc>
						collision[12], 12);
				collide_calc(ball[1], ball[6], velocity[1], velocity[6],
 2002004:	e0bfe504 	addi	r2,fp,-108
 2002008:	11800c04 	addi	r6,r2,48
 200200c:	e0bfe504 	addi	r2,fp,-108
 2002010:	11400204 	addi	r5,r2,8
 2002014:	e0bf4c04 	addi	r2,fp,-720
 2002018:	11000c04 	addi	r4,r2,48
 200201c:	e0bf4c04 	addi	r2,fp,-720
 2002020:	10c00204 	addi	r3,r2,8
 2002024:	00800344 	movi	r2,13
 2002028:	d8800115 	stw	r2,4(sp)
 200202c:	e0bf6004 	addi	r2,fp,-640
 2002030:	10801a04 	addi	r2,r2,104
 2002034:	d8800015 	stw	r2,0(sp)
 2002038:	300f883a 	mov	r7,r6
 200203c:	280d883a 	mov	r6,r5
 2002040:	200b883a 	mov	r5,r4
 2002044:	1809883a 	mov	r4,r3
 2002048:	2003d680 	call	2003d68 <collide_calc>
						collision[13], 13);
				collide_calc(ball[1], ball[7], velocity[1], velocity[7],
 200204c:	e0bfe504 	addi	r2,fp,-108
 2002050:	11800e04 	addi	r6,r2,56
 2002054:	e0bfe504 	addi	r2,fp,-108
 2002058:	11400204 	addi	r5,r2,8
 200205c:	e0bf4c04 	addi	r2,fp,-720
 2002060:	11000e04 	addi	r4,r2,56
 2002064:	e0bf4c04 	addi	r2,fp,-720
 2002068:	10c00204 	addi	r3,r2,8
 200206c:	00800384 	movi	r2,14
 2002070:	d8800115 	stw	r2,4(sp)
 2002074:	e0bf6004 	addi	r2,fp,-640
 2002078:	10801c04 	addi	r2,r2,112
 200207c:	d8800015 	stw	r2,0(sp)
 2002080:	300f883a 	mov	r7,r6
 2002084:	280d883a 	mov	r6,r5
 2002088:	200b883a 	mov	r5,r4
 200208c:	1809883a 	mov	r4,r3
 2002090:	2003d680 	call	2003d68 <collide_calc>
						collision[14], 14);
				collide_calc(ball[1], ball[8], velocity[1], velocity[8],
 2002094:	e0bfe504 	addi	r2,fp,-108
 2002098:	11801004 	addi	r6,r2,64
 200209c:	e0bfe504 	addi	r2,fp,-108
 20020a0:	11400204 	addi	r5,r2,8
 20020a4:	e0bf4c04 	addi	r2,fp,-720
 20020a8:	11001004 	addi	r4,r2,64
 20020ac:	e0bf4c04 	addi	r2,fp,-720
 20020b0:	10c00204 	addi	r3,r2,8
 20020b4:	008003c4 	movi	r2,15
 20020b8:	d8800115 	stw	r2,4(sp)
 20020bc:	e0bf6004 	addi	r2,fp,-640
 20020c0:	10801e04 	addi	r2,r2,120
 20020c4:	d8800015 	stw	r2,0(sp)
 20020c8:	300f883a 	mov	r7,r6
 20020cc:	280d883a 	mov	r6,r5
 20020d0:	200b883a 	mov	r5,r4
 20020d4:	1809883a 	mov	r4,r3
 20020d8:	2003d680 	call	2003d68 <collide_calc>
						collision[15], 15);
				collide_calc(ball[1], ball[9], velocity[1], velocity[9],
 20020dc:	e0bfe504 	addi	r2,fp,-108
 20020e0:	11801204 	addi	r6,r2,72
 20020e4:	e0bfe504 	addi	r2,fp,-108
 20020e8:	11400204 	addi	r5,r2,8
 20020ec:	e0bf4c04 	addi	r2,fp,-720
 20020f0:	11001204 	addi	r4,r2,72
 20020f4:	e0bf4c04 	addi	r2,fp,-720
 20020f8:	10c00204 	addi	r3,r2,8
 20020fc:	00800404 	movi	r2,16
 2002100:	d8800115 	stw	r2,4(sp)
 2002104:	e0bf6004 	addi	r2,fp,-640
 2002108:	10802004 	addi	r2,r2,128
 200210c:	d8800015 	stw	r2,0(sp)
 2002110:	300f883a 	mov	r7,r6
 2002114:	280d883a 	mov	r6,r5
 2002118:	200b883a 	mov	r5,r4
 200211c:	1809883a 	mov	r4,r3
 2002120:	2003d680 	call	2003d68 <collide_calc>
						collision[16], 16);

				collide_calc(ball[2], ball[3], velocity[2], velocity[3],
 2002124:	e0bfe504 	addi	r2,fp,-108
 2002128:	11800604 	addi	r6,r2,24
 200212c:	e0bfe504 	addi	r2,fp,-108
 2002130:	11400404 	addi	r5,r2,16
 2002134:	e0bf4c04 	addi	r2,fp,-720
 2002138:	11000604 	addi	r4,r2,24
 200213c:	e0bf4c04 	addi	r2,fp,-720
 2002140:	10c00404 	addi	r3,r2,16
 2002144:	00800444 	movi	r2,17
 2002148:	d8800115 	stw	r2,4(sp)
 200214c:	e0bf6004 	addi	r2,fp,-640
 2002150:	10802204 	addi	r2,r2,136
 2002154:	d8800015 	stw	r2,0(sp)
 2002158:	300f883a 	mov	r7,r6
 200215c:	280d883a 	mov	r6,r5
 2002160:	200b883a 	mov	r5,r4
 2002164:	1809883a 	mov	r4,r3
 2002168:	2003d680 	call	2003d68 <collide_calc>
						collision[17], 17);
				collide_calc(ball[2], ball[4], velocity[2], velocity[4],
 200216c:	e0bfe504 	addi	r2,fp,-108
 2002170:	11800804 	addi	r6,r2,32
 2002174:	e0bfe504 	addi	r2,fp,-108
 2002178:	11400404 	addi	r5,r2,16
 200217c:	e0bf4c04 	addi	r2,fp,-720
 2002180:	11000804 	addi	r4,r2,32
 2002184:	e0bf4c04 	addi	r2,fp,-720
 2002188:	10c00404 	addi	r3,r2,16
 200218c:	00800484 	movi	r2,18
 2002190:	d8800115 	stw	r2,4(sp)
 2002194:	e0bf6004 	addi	r2,fp,-640
 2002198:	10802404 	addi	r2,r2,144
 200219c:	d8800015 	stw	r2,0(sp)
 20021a0:	300f883a 	mov	r7,r6
 20021a4:	280d883a 	mov	r6,r5
 20021a8:	200b883a 	mov	r5,r4
 20021ac:	1809883a 	mov	r4,r3
 20021b0:	2003d680 	call	2003d68 <collide_calc>
						collision[18], 18);
				collide_calc(ball[2], ball[5], velocity[2], velocity[5],
 20021b4:	e0bfe504 	addi	r2,fp,-108
 20021b8:	11800a04 	addi	r6,r2,40
 20021bc:	e0bfe504 	addi	r2,fp,-108
 20021c0:	11400404 	addi	r5,r2,16
 20021c4:	e0bf4c04 	addi	r2,fp,-720
 20021c8:	11000a04 	addi	r4,r2,40
 20021cc:	e0bf4c04 	addi	r2,fp,-720
 20021d0:	10c00404 	addi	r3,r2,16
 20021d4:	008004c4 	movi	r2,19
 20021d8:	d8800115 	stw	r2,4(sp)
 20021dc:	e0bf6004 	addi	r2,fp,-640
 20021e0:	10802604 	addi	r2,r2,152
 20021e4:	d8800015 	stw	r2,0(sp)
 20021e8:	300f883a 	mov	r7,r6
 20021ec:	280d883a 	mov	r6,r5
 20021f0:	200b883a 	mov	r5,r4
 20021f4:	1809883a 	mov	r4,r3
 20021f8:	2003d680 	call	2003d68 <collide_calc>
						collision[19], 19);
				collide_calc(ball[2], ball[6], velocity[2], velocity[6],
 20021fc:	e0bfe504 	addi	r2,fp,-108
 2002200:	11800c04 	addi	r6,r2,48
 2002204:	e0bfe504 	addi	r2,fp,-108
 2002208:	11400404 	addi	r5,r2,16
 200220c:	e0bf4c04 	addi	r2,fp,-720
 2002210:	11000c04 	addi	r4,r2,48
 2002214:	e0bf4c04 	addi	r2,fp,-720
 2002218:	10c00404 	addi	r3,r2,16
 200221c:	00800504 	movi	r2,20
 2002220:	d8800115 	stw	r2,4(sp)
 2002224:	e0bf6004 	addi	r2,fp,-640
 2002228:	10802804 	addi	r2,r2,160
 200222c:	d8800015 	stw	r2,0(sp)
 2002230:	300f883a 	mov	r7,r6
 2002234:	280d883a 	mov	r6,r5
 2002238:	200b883a 	mov	r5,r4
 200223c:	1809883a 	mov	r4,r3
 2002240:	2003d680 	call	2003d68 <collide_calc>
						collision[20], 20);
				collide_calc(ball[2], ball[7], velocity[2], velocity[7],
 2002244:	e0bfe504 	addi	r2,fp,-108
 2002248:	11800e04 	addi	r6,r2,56
 200224c:	e0bfe504 	addi	r2,fp,-108
 2002250:	11400404 	addi	r5,r2,16
 2002254:	e0bf4c04 	addi	r2,fp,-720
 2002258:	11000e04 	addi	r4,r2,56
 200225c:	e0bf4c04 	addi	r2,fp,-720
 2002260:	10c00404 	addi	r3,r2,16
 2002264:	00800544 	movi	r2,21
 2002268:	d8800115 	stw	r2,4(sp)
 200226c:	e0bf6004 	addi	r2,fp,-640
 2002270:	10802a04 	addi	r2,r2,168
 2002274:	d8800015 	stw	r2,0(sp)
 2002278:	300f883a 	mov	r7,r6
 200227c:	280d883a 	mov	r6,r5
 2002280:	200b883a 	mov	r5,r4
 2002284:	1809883a 	mov	r4,r3
 2002288:	2003d680 	call	2003d68 <collide_calc>
						collision[21], 21);
				collide_calc(ball[2], ball[8], velocity[2], velocity[8],
 200228c:	e0bfe504 	addi	r2,fp,-108
 2002290:	11801004 	addi	r6,r2,64
 2002294:	e0bfe504 	addi	r2,fp,-108
 2002298:	11400404 	addi	r5,r2,16
 200229c:	e0bf4c04 	addi	r2,fp,-720
 20022a0:	11001004 	addi	r4,r2,64
 20022a4:	e0bf4c04 	addi	r2,fp,-720
 20022a8:	10c00404 	addi	r3,r2,16
 20022ac:	00800584 	movi	r2,22
 20022b0:	d8800115 	stw	r2,4(sp)
 20022b4:	e0bf6004 	addi	r2,fp,-640
 20022b8:	10802c04 	addi	r2,r2,176
 20022bc:	d8800015 	stw	r2,0(sp)
 20022c0:	300f883a 	mov	r7,r6
 20022c4:	280d883a 	mov	r6,r5
 20022c8:	200b883a 	mov	r5,r4
 20022cc:	1809883a 	mov	r4,r3
 20022d0:	2003d680 	call	2003d68 <collide_calc>
						collision[22], 22);
				collide_calc(ball[2], ball[9], velocity[2], velocity[9],
 20022d4:	e0bfe504 	addi	r2,fp,-108
 20022d8:	11801204 	addi	r6,r2,72
 20022dc:	e0bfe504 	addi	r2,fp,-108
 20022e0:	11400404 	addi	r5,r2,16
 20022e4:	e0bf4c04 	addi	r2,fp,-720
 20022e8:	11001204 	addi	r4,r2,72
 20022ec:	e0bf4c04 	addi	r2,fp,-720
 20022f0:	10c00404 	addi	r3,r2,16
 20022f4:	008005c4 	movi	r2,23
 20022f8:	d8800115 	stw	r2,4(sp)
 20022fc:	e0bf6004 	addi	r2,fp,-640
 2002300:	10802e04 	addi	r2,r2,184
 2002304:	d8800015 	stw	r2,0(sp)
 2002308:	300f883a 	mov	r7,r6
 200230c:	280d883a 	mov	r6,r5
 2002310:	200b883a 	mov	r5,r4
 2002314:	1809883a 	mov	r4,r3
 2002318:	2003d680 	call	2003d68 <collide_calc>
						collision[23], 23);

				collide_calc(ball[3], ball[4], velocity[3], velocity[4],
 200231c:	e0bfe504 	addi	r2,fp,-108
 2002320:	11800804 	addi	r6,r2,32
 2002324:	e0bfe504 	addi	r2,fp,-108
 2002328:	11400604 	addi	r5,r2,24
 200232c:	e0bf4c04 	addi	r2,fp,-720
 2002330:	11000804 	addi	r4,r2,32
 2002334:	e0bf4c04 	addi	r2,fp,-720
 2002338:	10c00604 	addi	r3,r2,24
 200233c:	00800604 	movi	r2,24
 2002340:	d8800115 	stw	r2,4(sp)
 2002344:	e0bf6004 	addi	r2,fp,-640
 2002348:	10803004 	addi	r2,r2,192
 200234c:	d8800015 	stw	r2,0(sp)
 2002350:	300f883a 	mov	r7,r6
 2002354:	280d883a 	mov	r6,r5
 2002358:	200b883a 	mov	r5,r4
 200235c:	1809883a 	mov	r4,r3
 2002360:	2003d680 	call	2003d68 <collide_calc>
						collision[24], 24);
				collide_calc(ball[3], ball[5], velocity[3], velocity[5],
 2002364:	e0bfe504 	addi	r2,fp,-108
 2002368:	11800a04 	addi	r6,r2,40
 200236c:	e0bfe504 	addi	r2,fp,-108
 2002370:	11400604 	addi	r5,r2,24
 2002374:	e0bf4c04 	addi	r2,fp,-720
 2002378:	11000a04 	addi	r4,r2,40
 200237c:	e0bf4c04 	addi	r2,fp,-720
 2002380:	10c00604 	addi	r3,r2,24
 2002384:	00800644 	movi	r2,25
 2002388:	d8800115 	stw	r2,4(sp)
 200238c:	e0bf6004 	addi	r2,fp,-640
 2002390:	10803204 	addi	r2,r2,200
 2002394:	d8800015 	stw	r2,0(sp)
 2002398:	300f883a 	mov	r7,r6
 200239c:	280d883a 	mov	r6,r5
 20023a0:	200b883a 	mov	r5,r4
 20023a4:	1809883a 	mov	r4,r3
 20023a8:	2003d680 	call	2003d68 <collide_calc>
						collision[25], 25);
				collide_calc(ball[3], ball[6], velocity[3], velocity[6],
 20023ac:	e0bfe504 	addi	r2,fp,-108
 20023b0:	11800c04 	addi	r6,r2,48
 20023b4:	e0bfe504 	addi	r2,fp,-108
 20023b8:	11400604 	addi	r5,r2,24
 20023bc:	e0bf4c04 	addi	r2,fp,-720
 20023c0:	11000c04 	addi	r4,r2,48
 20023c4:	e0bf4c04 	addi	r2,fp,-720
 20023c8:	10c00604 	addi	r3,r2,24
 20023cc:	00800684 	movi	r2,26
 20023d0:	d8800115 	stw	r2,4(sp)
 20023d4:	e0bf6004 	addi	r2,fp,-640
 20023d8:	10803404 	addi	r2,r2,208
 20023dc:	d8800015 	stw	r2,0(sp)
 20023e0:	300f883a 	mov	r7,r6
 20023e4:	280d883a 	mov	r6,r5
 20023e8:	200b883a 	mov	r5,r4
 20023ec:	1809883a 	mov	r4,r3
 20023f0:	2003d680 	call	2003d68 <collide_calc>
						collision[26], 26);
				collide_calc(ball[3], ball[7], velocity[3], velocity[7],
 20023f4:	e0bfe504 	addi	r2,fp,-108
 20023f8:	11800e04 	addi	r6,r2,56
 20023fc:	e0bfe504 	addi	r2,fp,-108
 2002400:	11400604 	addi	r5,r2,24
 2002404:	e0bf4c04 	addi	r2,fp,-720
 2002408:	11000e04 	addi	r4,r2,56
 200240c:	e0bf4c04 	addi	r2,fp,-720
 2002410:	10c00604 	addi	r3,r2,24
 2002414:	008006c4 	movi	r2,27
 2002418:	d8800115 	stw	r2,4(sp)
 200241c:	e0bf6004 	addi	r2,fp,-640
 2002420:	10803604 	addi	r2,r2,216
 2002424:	d8800015 	stw	r2,0(sp)
 2002428:	300f883a 	mov	r7,r6
 200242c:	280d883a 	mov	r6,r5
 2002430:	200b883a 	mov	r5,r4
 2002434:	1809883a 	mov	r4,r3
 2002438:	2003d680 	call	2003d68 <collide_calc>
						collision[27], 27);
				collide_calc(ball[3], ball[8], velocity[3], velocity[8],
 200243c:	e0bfe504 	addi	r2,fp,-108
 2002440:	11801004 	addi	r6,r2,64
 2002444:	e0bfe504 	addi	r2,fp,-108
 2002448:	11400604 	addi	r5,r2,24
 200244c:	e0bf4c04 	addi	r2,fp,-720
 2002450:	11001004 	addi	r4,r2,64
 2002454:	e0bf4c04 	addi	r2,fp,-720
 2002458:	10c00604 	addi	r3,r2,24
 200245c:	00800704 	movi	r2,28
 2002460:	d8800115 	stw	r2,4(sp)
 2002464:	e0bf6004 	addi	r2,fp,-640
 2002468:	10803804 	addi	r2,r2,224
 200246c:	d8800015 	stw	r2,0(sp)
 2002470:	300f883a 	mov	r7,r6
 2002474:	280d883a 	mov	r6,r5
 2002478:	200b883a 	mov	r5,r4
 200247c:	1809883a 	mov	r4,r3
 2002480:	2003d680 	call	2003d68 <collide_calc>
						collision[28], 28);
				collide_calc(ball[3], ball[9], velocity[3], velocity[9],
 2002484:	e0bfe504 	addi	r2,fp,-108
 2002488:	11801204 	addi	r6,r2,72
 200248c:	e0bfe504 	addi	r2,fp,-108
 2002490:	11400604 	addi	r5,r2,24
 2002494:	e0bf4c04 	addi	r2,fp,-720
 2002498:	11001204 	addi	r4,r2,72
 200249c:	e0bf4c04 	addi	r2,fp,-720
 20024a0:	10c00604 	addi	r3,r2,24
 20024a4:	00800744 	movi	r2,29
 20024a8:	d8800115 	stw	r2,4(sp)
 20024ac:	e0bf6004 	addi	r2,fp,-640
 20024b0:	10803a04 	addi	r2,r2,232
 20024b4:	d8800015 	stw	r2,0(sp)
 20024b8:	300f883a 	mov	r7,r6
 20024bc:	280d883a 	mov	r6,r5
 20024c0:	200b883a 	mov	r5,r4
 20024c4:	1809883a 	mov	r4,r3
 20024c8:	2003d680 	call	2003d68 <collide_calc>
						collision[29], 29);

				collide_calc(ball[4], ball[5], velocity[4], velocity[5],
 20024cc:	e0bfe504 	addi	r2,fp,-108
 20024d0:	11800a04 	addi	r6,r2,40
 20024d4:	e0bfe504 	addi	r2,fp,-108
 20024d8:	11400804 	addi	r5,r2,32
 20024dc:	e0bf4c04 	addi	r2,fp,-720
 20024e0:	11000a04 	addi	r4,r2,40
 20024e4:	e0bf4c04 	addi	r2,fp,-720
 20024e8:	10c00804 	addi	r3,r2,32
 20024ec:	00800784 	movi	r2,30
 20024f0:	d8800115 	stw	r2,4(sp)
 20024f4:	e0bf6004 	addi	r2,fp,-640
 20024f8:	10803c04 	addi	r2,r2,240
 20024fc:	d8800015 	stw	r2,0(sp)
 2002500:	300f883a 	mov	r7,r6
 2002504:	280d883a 	mov	r6,r5
 2002508:	200b883a 	mov	r5,r4
 200250c:	1809883a 	mov	r4,r3
 2002510:	2003d680 	call	2003d68 <collide_calc>
						collision[30], 30);
				collide_calc(ball[4], ball[6], velocity[4], velocity[6],
 2002514:	e0bfe504 	addi	r2,fp,-108
 2002518:	11800c04 	addi	r6,r2,48
 200251c:	e0bfe504 	addi	r2,fp,-108
 2002520:	11400804 	addi	r5,r2,32
 2002524:	e0bf4c04 	addi	r2,fp,-720
 2002528:	11000c04 	addi	r4,r2,48
 200252c:	e0bf4c04 	addi	r2,fp,-720
 2002530:	10c00804 	addi	r3,r2,32
 2002534:	008007c4 	movi	r2,31
 2002538:	d8800115 	stw	r2,4(sp)
 200253c:	e0bf6004 	addi	r2,fp,-640
 2002540:	10803e04 	addi	r2,r2,248
 2002544:	d8800015 	stw	r2,0(sp)
 2002548:	300f883a 	mov	r7,r6
 200254c:	280d883a 	mov	r6,r5
 2002550:	200b883a 	mov	r5,r4
 2002554:	1809883a 	mov	r4,r3
 2002558:	2003d680 	call	2003d68 <collide_calc>
						collision[31], 31);
				collide_calc(ball[4], ball[7], velocity[4], velocity[7],
 200255c:	e0bfe504 	addi	r2,fp,-108
 2002560:	11800e04 	addi	r6,r2,56
 2002564:	e0bfe504 	addi	r2,fp,-108
 2002568:	11400804 	addi	r5,r2,32
 200256c:	e0bf4c04 	addi	r2,fp,-720
 2002570:	11000e04 	addi	r4,r2,56
 2002574:	e0bf4c04 	addi	r2,fp,-720
 2002578:	10c00804 	addi	r3,r2,32
 200257c:	00800804 	movi	r2,32
 2002580:	d8800115 	stw	r2,4(sp)
 2002584:	e0bf6004 	addi	r2,fp,-640
 2002588:	10804004 	addi	r2,r2,256
 200258c:	d8800015 	stw	r2,0(sp)
 2002590:	300f883a 	mov	r7,r6
 2002594:	280d883a 	mov	r6,r5
 2002598:	200b883a 	mov	r5,r4
 200259c:	1809883a 	mov	r4,r3
 20025a0:	2003d680 	call	2003d68 <collide_calc>
						collision[32], 32);
				collide_calc(ball[4], ball[8], velocity[4], velocity[8],
 20025a4:	e0bfe504 	addi	r2,fp,-108
 20025a8:	11801004 	addi	r6,r2,64
 20025ac:	e0bfe504 	addi	r2,fp,-108
 20025b0:	11400804 	addi	r5,r2,32
 20025b4:	e0bf4c04 	addi	r2,fp,-720
 20025b8:	11001004 	addi	r4,r2,64
 20025bc:	e0bf4c04 	addi	r2,fp,-720
 20025c0:	10c00804 	addi	r3,r2,32
 20025c4:	00800844 	movi	r2,33
 20025c8:	d8800115 	stw	r2,4(sp)
 20025cc:	e0bf6004 	addi	r2,fp,-640
 20025d0:	10804204 	addi	r2,r2,264
 20025d4:	d8800015 	stw	r2,0(sp)
 20025d8:	300f883a 	mov	r7,r6
 20025dc:	280d883a 	mov	r6,r5
 20025e0:	200b883a 	mov	r5,r4
 20025e4:	1809883a 	mov	r4,r3
 20025e8:	2003d680 	call	2003d68 <collide_calc>
						collision[33], 33);
				collide_calc(ball[4], ball[9], velocity[4], velocity[9],
 20025ec:	e0bfe504 	addi	r2,fp,-108
 20025f0:	11801204 	addi	r6,r2,72
 20025f4:	e0bfe504 	addi	r2,fp,-108
 20025f8:	11400804 	addi	r5,r2,32
 20025fc:	e0bf4c04 	addi	r2,fp,-720
 2002600:	11001204 	addi	r4,r2,72
 2002604:	e0bf4c04 	addi	r2,fp,-720
 2002608:	10c00804 	addi	r3,r2,32
 200260c:	00800884 	movi	r2,34
 2002610:	d8800115 	stw	r2,4(sp)
 2002614:	e0bf6004 	addi	r2,fp,-640
 2002618:	10804404 	addi	r2,r2,272
 200261c:	d8800015 	stw	r2,0(sp)
 2002620:	300f883a 	mov	r7,r6
 2002624:	280d883a 	mov	r6,r5
 2002628:	200b883a 	mov	r5,r4
 200262c:	1809883a 	mov	r4,r3
 2002630:	2003d680 	call	2003d68 <collide_calc>
						collision[34], 34);

				collide_calc(ball[5], ball[6], velocity[5], velocity[6],
 2002634:	e0bfe504 	addi	r2,fp,-108
 2002638:	11800c04 	addi	r6,r2,48
 200263c:	e0bfe504 	addi	r2,fp,-108
 2002640:	11400a04 	addi	r5,r2,40
 2002644:	e0bf4c04 	addi	r2,fp,-720
 2002648:	11000c04 	addi	r4,r2,48
 200264c:	e0bf4c04 	addi	r2,fp,-720
 2002650:	10c00a04 	addi	r3,r2,40
 2002654:	008008c4 	movi	r2,35
 2002658:	d8800115 	stw	r2,4(sp)
 200265c:	e0bf6004 	addi	r2,fp,-640
 2002660:	10804604 	addi	r2,r2,280
 2002664:	d8800015 	stw	r2,0(sp)
 2002668:	300f883a 	mov	r7,r6
 200266c:	280d883a 	mov	r6,r5
 2002670:	200b883a 	mov	r5,r4
 2002674:	1809883a 	mov	r4,r3
 2002678:	2003d680 	call	2003d68 <collide_calc>
						collision[35], 35);
				collide_calc(ball[5], ball[7], velocity[5], velocity[7],
 200267c:	e0bfe504 	addi	r2,fp,-108
 2002680:	11800e04 	addi	r6,r2,56
 2002684:	e0bfe504 	addi	r2,fp,-108
 2002688:	11400a04 	addi	r5,r2,40
 200268c:	e0bf4c04 	addi	r2,fp,-720
 2002690:	11000e04 	addi	r4,r2,56
 2002694:	e0bf4c04 	addi	r2,fp,-720
 2002698:	10c00a04 	addi	r3,r2,40
 200269c:	00800904 	movi	r2,36
 20026a0:	d8800115 	stw	r2,4(sp)
 20026a4:	e0bf6004 	addi	r2,fp,-640
 20026a8:	10804804 	addi	r2,r2,288
 20026ac:	d8800015 	stw	r2,0(sp)
 20026b0:	300f883a 	mov	r7,r6
 20026b4:	280d883a 	mov	r6,r5
 20026b8:	200b883a 	mov	r5,r4
 20026bc:	1809883a 	mov	r4,r3
 20026c0:	2003d680 	call	2003d68 <collide_calc>
						collision[36], 36);
				collide_calc(ball[5], ball[8], velocity[5], velocity[8],
 20026c4:	e0bfe504 	addi	r2,fp,-108
 20026c8:	11801004 	addi	r6,r2,64
 20026cc:	e0bfe504 	addi	r2,fp,-108
 20026d0:	11400a04 	addi	r5,r2,40
 20026d4:	e0bf4c04 	addi	r2,fp,-720
 20026d8:	11001004 	addi	r4,r2,64
 20026dc:	e0bf4c04 	addi	r2,fp,-720
 20026e0:	10c00a04 	addi	r3,r2,40
 20026e4:	00800944 	movi	r2,37
 20026e8:	d8800115 	stw	r2,4(sp)
 20026ec:	e0bf6004 	addi	r2,fp,-640
 20026f0:	10804a04 	addi	r2,r2,296
 20026f4:	d8800015 	stw	r2,0(sp)
 20026f8:	300f883a 	mov	r7,r6
 20026fc:	280d883a 	mov	r6,r5
 2002700:	200b883a 	mov	r5,r4
 2002704:	1809883a 	mov	r4,r3
 2002708:	2003d680 	call	2003d68 <collide_calc>
						collision[37], 37);
				collide_calc(ball[5], ball[9], velocity[5], velocity[9],
 200270c:	e0bfe504 	addi	r2,fp,-108
 2002710:	11801204 	addi	r6,r2,72
 2002714:	e0bfe504 	addi	r2,fp,-108
 2002718:	11400a04 	addi	r5,r2,40
 200271c:	e0bf4c04 	addi	r2,fp,-720
 2002720:	11001204 	addi	r4,r2,72
 2002724:	e0bf4c04 	addi	r2,fp,-720
 2002728:	10c00a04 	addi	r3,r2,40
 200272c:	00800984 	movi	r2,38
 2002730:	d8800115 	stw	r2,4(sp)
 2002734:	e0bf6004 	addi	r2,fp,-640
 2002738:	10804c04 	addi	r2,r2,304
 200273c:	d8800015 	stw	r2,0(sp)
 2002740:	300f883a 	mov	r7,r6
 2002744:	280d883a 	mov	r6,r5
 2002748:	200b883a 	mov	r5,r4
 200274c:	1809883a 	mov	r4,r3
 2002750:	2003d680 	call	2003d68 <collide_calc>
						collision[38], 38);

				collide_calc(ball[6], ball[7], velocity[6], velocity[7],
 2002754:	e0bfe504 	addi	r2,fp,-108
 2002758:	11800e04 	addi	r6,r2,56
 200275c:	e0bfe504 	addi	r2,fp,-108
 2002760:	11400c04 	addi	r5,r2,48
 2002764:	e0bf4c04 	addi	r2,fp,-720
 2002768:	11000e04 	addi	r4,r2,56
 200276c:	e0bf4c04 	addi	r2,fp,-720
 2002770:	10c00c04 	addi	r3,r2,48
 2002774:	008009c4 	movi	r2,39
 2002778:	d8800115 	stw	r2,4(sp)
 200277c:	e0bf6004 	addi	r2,fp,-640
 2002780:	10804e04 	addi	r2,r2,312
 2002784:	d8800015 	stw	r2,0(sp)
 2002788:	300f883a 	mov	r7,r6
 200278c:	280d883a 	mov	r6,r5
 2002790:	200b883a 	mov	r5,r4
 2002794:	1809883a 	mov	r4,r3
 2002798:	2003d680 	call	2003d68 <collide_calc>
						collision[39], 39);
				collide_calc(ball[6], ball[8], velocity[6], velocity[8],
 200279c:	e0bfe504 	addi	r2,fp,-108
 20027a0:	11801004 	addi	r6,r2,64
 20027a4:	e0bfe504 	addi	r2,fp,-108
 20027a8:	11400c04 	addi	r5,r2,48
 20027ac:	e0bf4c04 	addi	r2,fp,-720
 20027b0:	11001004 	addi	r4,r2,64
 20027b4:	e0bf4c04 	addi	r2,fp,-720
 20027b8:	10c00c04 	addi	r3,r2,48
 20027bc:	00800a04 	movi	r2,40
 20027c0:	d8800115 	stw	r2,4(sp)
 20027c4:	e0bf6004 	addi	r2,fp,-640
 20027c8:	10805004 	addi	r2,r2,320
 20027cc:	d8800015 	stw	r2,0(sp)
 20027d0:	300f883a 	mov	r7,r6
 20027d4:	280d883a 	mov	r6,r5
 20027d8:	200b883a 	mov	r5,r4
 20027dc:	1809883a 	mov	r4,r3
 20027e0:	2003d680 	call	2003d68 <collide_calc>
						collision[40], 40);
				collide_calc(ball[6], ball[9], velocity[6], velocity[9],
 20027e4:	e0bfe504 	addi	r2,fp,-108
 20027e8:	11801204 	addi	r6,r2,72
 20027ec:	e0bfe504 	addi	r2,fp,-108
 20027f0:	11400c04 	addi	r5,r2,48
 20027f4:	e0bf4c04 	addi	r2,fp,-720
 20027f8:	11001204 	addi	r4,r2,72
 20027fc:	e0bf4c04 	addi	r2,fp,-720
 2002800:	10c00c04 	addi	r3,r2,48
 2002804:	00800a44 	movi	r2,41
 2002808:	d8800115 	stw	r2,4(sp)
 200280c:	e0bf6004 	addi	r2,fp,-640
 2002810:	10805204 	addi	r2,r2,328
 2002814:	d8800015 	stw	r2,0(sp)
 2002818:	300f883a 	mov	r7,r6
 200281c:	280d883a 	mov	r6,r5
 2002820:	200b883a 	mov	r5,r4
 2002824:	1809883a 	mov	r4,r3
 2002828:	2003d680 	call	2003d68 <collide_calc>
						collision[41], 41);

				collide_calc(ball[7], ball[8], velocity[7], velocity[8],
 200282c:	e0bfe504 	addi	r2,fp,-108
 2002830:	11801004 	addi	r6,r2,64
 2002834:	e0bfe504 	addi	r2,fp,-108
 2002838:	11400e04 	addi	r5,r2,56
 200283c:	e0bf4c04 	addi	r2,fp,-720
 2002840:	11001004 	addi	r4,r2,64
 2002844:	e0bf4c04 	addi	r2,fp,-720
 2002848:	10c00e04 	addi	r3,r2,56
 200284c:	00800a84 	movi	r2,42
 2002850:	d8800115 	stw	r2,4(sp)
 2002854:	e0bf6004 	addi	r2,fp,-640
 2002858:	10805404 	addi	r2,r2,336
 200285c:	d8800015 	stw	r2,0(sp)
 2002860:	300f883a 	mov	r7,r6
 2002864:	280d883a 	mov	r6,r5
 2002868:	200b883a 	mov	r5,r4
 200286c:	1809883a 	mov	r4,r3
 2002870:	2003d680 	call	2003d68 <collide_calc>
						collision[42], 42);
				collide_calc(ball[7], ball[9], velocity[7], velocity[9],
 2002874:	e0bfe504 	addi	r2,fp,-108
 2002878:	11801204 	addi	r6,r2,72
 200287c:	e0bfe504 	addi	r2,fp,-108
 2002880:	11400e04 	addi	r5,r2,56
 2002884:	e0bf4c04 	addi	r2,fp,-720
 2002888:	11001204 	addi	r4,r2,72
 200288c:	e0bf4c04 	addi	r2,fp,-720
 2002890:	10c00e04 	addi	r3,r2,56
 2002894:	00800ac4 	movi	r2,43
 2002898:	d8800115 	stw	r2,4(sp)
 200289c:	e0bf6004 	addi	r2,fp,-640
 20028a0:	10805604 	addi	r2,r2,344
 20028a4:	d8800015 	stw	r2,0(sp)
 20028a8:	300f883a 	mov	r7,r6
 20028ac:	280d883a 	mov	r6,r5
 20028b0:	200b883a 	mov	r5,r4
 20028b4:	1809883a 	mov	r4,r3
 20028b8:	2003d680 	call	2003d68 <collide_calc>
						collision[43], 43);

				collide_calc(ball[8], ball[9], velocity[7], velocity[9],
 20028bc:	e0bfe504 	addi	r2,fp,-108
 20028c0:	11801204 	addi	r6,r2,72
 20028c4:	e0bfe504 	addi	r2,fp,-108
 20028c8:	11400e04 	addi	r5,r2,56
 20028cc:	e0bf4c04 	addi	r2,fp,-720
 20028d0:	11001204 	addi	r4,r2,72
 20028d4:	e0bf4c04 	addi	r2,fp,-720
 20028d8:	10c01004 	addi	r3,r2,64
 20028dc:	00800b04 	movi	r2,44
 20028e0:	d8800115 	stw	r2,4(sp)
 20028e4:	e0bf6004 	addi	r2,fp,-640
 20028e8:	10805804 	addi	r2,r2,352
 20028ec:	d8800015 	stw	r2,0(sp)
 20028f0:	300f883a 	mov	r7,r6
 20028f4:	280d883a 	mov	r6,r5
 20028f8:	200b883a 	mov	r5,r4
 20028fc:	1809883a 	mov	r4,r3
 2002900:	2003d680 	call	2003d68 <collide_calc>
						collision[44], 44);

				// Damping factor

				damping(velocity[0]);
 2002904:	e0bfe504 	addi	r2,fp,-108
 2002908:	1009883a 	mov	r4,r2
 200290c:	20041f40 	call	20041f4 <damping>
				damping(velocity[1]);
 2002910:	e0bfe504 	addi	r2,fp,-108
 2002914:	10800204 	addi	r2,r2,8
 2002918:	1009883a 	mov	r4,r2
 200291c:	20041f40 	call	20041f4 <damping>
				damping(velocity[2]);
 2002920:	e0bfe504 	addi	r2,fp,-108
 2002924:	10800404 	addi	r2,r2,16
 2002928:	1009883a 	mov	r4,r2
 200292c:	20041f40 	call	20041f4 <damping>
				damping(velocity[3]);
 2002930:	e0bfe504 	addi	r2,fp,-108
 2002934:	10800604 	addi	r2,r2,24
 2002938:	1009883a 	mov	r4,r2
 200293c:	20041f40 	call	20041f4 <damping>
				damping(velocity[4]);
 2002940:	e0bfe504 	addi	r2,fp,-108
 2002944:	10800804 	addi	r2,r2,32
 2002948:	1009883a 	mov	r4,r2
 200294c:	20041f40 	call	20041f4 <damping>
				damping(velocity[5]);
 2002950:	e0bfe504 	addi	r2,fp,-108
 2002954:	10800a04 	addi	r2,r2,40
 2002958:	1009883a 	mov	r4,r2
 200295c:	20041f40 	call	20041f4 <damping>
				damping(velocity[6]);
 2002960:	e0bfe504 	addi	r2,fp,-108
 2002964:	10800c04 	addi	r2,r2,48
 2002968:	1009883a 	mov	r4,r2
 200296c:	20041f40 	call	20041f4 <damping>
				damping(velocity[7]);
 2002970:	e0bfe504 	addi	r2,fp,-108
 2002974:	10800e04 	addi	r2,r2,56
 2002978:	1009883a 	mov	r4,r2
 200297c:	20041f40 	call	20041f4 <damping>
				damping(velocity[8]);
 2002980:	e0bfe504 	addi	r2,fp,-108
 2002984:	10801004 	addi	r2,r2,64
 2002988:	1009883a 	mov	r4,r2
 200298c:	20041f40 	call	20041f4 <damping>
				damping(velocity[9]);
 2002990:	e0bfe504 	addi	r2,fp,-108
 2002994:	10801204 	addi	r2,r2,72
 2002998:	1009883a 	mov	r4,r2
 200299c:	20041f40 	call	20041f4 <damping>

				speed = momentum(velocity[0]) + momentum(velocity[1])
 20029a0:	e0bfe504 	addi	r2,fp,-108
 20029a4:	1009883a 	mov	r4,r2
 20029a8:	2003c440 	call	2003c44 <momentum>
 20029ac:	1021883a 	mov	r16,r2
 20029b0:	e0bfe504 	addi	r2,fp,-108
 20029b4:	10800204 	addi	r2,r2,8
 20029b8:	1009883a 	mov	r4,r2
 20029bc:	2003c440 	call	2003c44 <momentum>
 20029c0:	1007883a 	mov	r3,r2
 20029c4:	80e1ff72 	custom	253,r16,r16,r3
						+ momentum(velocity[2]) + momentum(velocity[3])
 20029c8:	e0bfe504 	addi	r2,fp,-108
 20029cc:	10800404 	addi	r2,r2,16
 20029d0:	1009883a 	mov	r4,r2
 20029d4:	2003c440 	call	2003c44 <momentum>
 20029d8:	1007883a 	mov	r3,r2
 20029dc:	80e1ff72 	custom	253,r16,r16,r3
 20029e0:	e0bfe504 	addi	r2,fp,-108
 20029e4:	10800604 	addi	r2,r2,24
 20029e8:	1009883a 	mov	r4,r2
 20029ec:	2003c440 	call	2003c44 <momentum>
 20029f0:	1007883a 	mov	r3,r2
 20029f4:	80e1ff72 	custom	253,r16,r16,r3
						+ momentum(velocity[4]) + momentum(velocity[5])
 20029f8:	e0bfe504 	addi	r2,fp,-108
 20029fc:	10800804 	addi	r2,r2,32
 2002a00:	1009883a 	mov	r4,r2
 2002a04:	2003c440 	call	2003c44 <momentum>
 2002a08:	1007883a 	mov	r3,r2
 2002a0c:	80e1ff72 	custom	253,r16,r16,r3
 2002a10:	e0bfe504 	addi	r2,fp,-108
 2002a14:	10800a04 	addi	r2,r2,40
 2002a18:	1009883a 	mov	r4,r2
 2002a1c:	2003c440 	call	2003c44 <momentum>
 2002a20:	1007883a 	mov	r3,r2
 2002a24:	80e1ff72 	custom	253,r16,r16,r3
						+ momentum(velocity[6]) + momentum(velocity[7])
 2002a28:	e0bfe504 	addi	r2,fp,-108
 2002a2c:	10800c04 	addi	r2,r2,48
 2002a30:	1009883a 	mov	r4,r2
 2002a34:	2003c440 	call	2003c44 <momentum>
 2002a38:	1007883a 	mov	r3,r2
 2002a3c:	80e1ff72 	custom	253,r16,r16,r3
 2002a40:	e0bfe504 	addi	r2,fp,-108
 2002a44:	10800e04 	addi	r2,r2,56
 2002a48:	1009883a 	mov	r4,r2
 2002a4c:	2003c440 	call	2003c44 <momentum>
 2002a50:	1007883a 	mov	r3,r2
 2002a54:	80e1ff72 	custom	253,r16,r16,r3
						+ momentum(velocity[8]) + momentum(velocity[9]);
 2002a58:	e0bfe504 	addi	r2,fp,-108
 2002a5c:	10801004 	addi	r2,r2,64
 2002a60:	1009883a 	mov	r4,r2
 2002a64:	2003c440 	call	2003c44 <momentum>
 2002a68:	1007883a 	mov	r3,r2
 2002a6c:	80e1ff72 	custom	253,r16,r16,r3
 2002a70:	e0bfe504 	addi	r2,fp,-108
 2002a74:	10801204 	addi	r2,r2,72
 2002a78:	1009883a 	mov	r4,r2
 2002a7c:	2003c440 	call	2003c44 <momentum>
 2002a80:	1007883a 	mov	r3,r2
				damping(velocity[6]);
				damping(velocity[7]);
				damping(velocity[8]);
				damping(velocity[9]);

				speed = momentum(velocity[0]) + momentum(velocity[1])
 2002a84:	80c5ff72 	custom	253,r2,r16,r3
 2002a88:	e0bf3b15 	stw	r2,-788(fp)
						+ momentum(velocity[2]) + momentum(velocity[3])
						+ momentum(velocity[4]) + momentum(velocity[5])
						+ momentum(velocity[6]) + momentum(velocity[7])
						+ momentum(velocity[8]) + momentum(velocity[9]);

				IOWR(display, 1, ((int ) (ball[0][1]) << 10) + (int ) (ball[0][0]));
 2002a8c:	e0bf3d17 	ldw	r2,-780(fp)
 2002a90:	10800104 	addi	r2,r2,4
 2002a94:	e0ff4d17 	ldw	r3,-716(fp)
 2002a98:	1807fe72 	custom	249,r3,r3,zero
 2002a9c:	180892ba 	slli	r4,r3,10
 2002aa0:	e0ff4c17 	ldw	r3,-720(fp)
 2002aa4:	1807fe72 	custom	249,r3,r3,zero
 2002aa8:	20c7883a 	add	r3,r4,r3
 2002aac:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 2, ((int ) (ball[1][1]) << 10) + (int ) (ball[1][0]));
 2002ab0:	e0bf3d17 	ldw	r2,-780(fp)
 2002ab4:	10800204 	addi	r2,r2,8
 2002ab8:	e0ff4f17 	ldw	r3,-708(fp)
 2002abc:	1807fe72 	custom	249,r3,r3,zero
 2002ac0:	180892ba 	slli	r4,r3,10
 2002ac4:	e0ff4e17 	ldw	r3,-712(fp)
 2002ac8:	1807fe72 	custom	249,r3,r3,zero
 2002acc:	20c7883a 	add	r3,r4,r3
 2002ad0:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 3, ((int ) (ball[2][1]) << 10) + (int ) (ball[2][0]));
 2002ad4:	e0bf3d17 	ldw	r2,-780(fp)
 2002ad8:	10800304 	addi	r2,r2,12
 2002adc:	e0ff5117 	ldw	r3,-700(fp)
 2002ae0:	1807fe72 	custom	249,r3,r3,zero
 2002ae4:	180892ba 	slli	r4,r3,10
 2002ae8:	e0ff5017 	ldw	r3,-704(fp)
 2002aec:	1807fe72 	custom	249,r3,r3,zero
 2002af0:	20c7883a 	add	r3,r4,r3
 2002af4:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 4, ((int ) (ball[3][1]) << 10) + (int ) (ball[3][0]));
 2002af8:	e0bf3d17 	ldw	r2,-780(fp)
 2002afc:	10800404 	addi	r2,r2,16
 2002b00:	e0ff5317 	ldw	r3,-692(fp)
 2002b04:	1807fe72 	custom	249,r3,r3,zero
 2002b08:	180892ba 	slli	r4,r3,10
 2002b0c:	e0ff5217 	ldw	r3,-696(fp)
 2002b10:	1807fe72 	custom	249,r3,r3,zero
 2002b14:	20c7883a 	add	r3,r4,r3
 2002b18:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 5, ((int ) (ball[4][1]) << 10) + (int ) (ball[4][0]));
 2002b1c:	e0bf3d17 	ldw	r2,-780(fp)
 2002b20:	10800504 	addi	r2,r2,20
 2002b24:	e0ff5517 	ldw	r3,-684(fp)
 2002b28:	1807fe72 	custom	249,r3,r3,zero
 2002b2c:	180892ba 	slli	r4,r3,10
 2002b30:	e0ff5417 	ldw	r3,-688(fp)
 2002b34:	1807fe72 	custom	249,r3,r3,zero
 2002b38:	20c7883a 	add	r3,r4,r3
 2002b3c:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 6, ((int ) (ball[5][1]) << 10) + (int ) (ball[5][0]));
 2002b40:	e0bf3d17 	ldw	r2,-780(fp)
 2002b44:	10800604 	addi	r2,r2,24
 2002b48:	e0ff5717 	ldw	r3,-676(fp)
 2002b4c:	1807fe72 	custom	249,r3,r3,zero
 2002b50:	180892ba 	slli	r4,r3,10
 2002b54:	e0ff5617 	ldw	r3,-680(fp)
 2002b58:	1807fe72 	custom	249,r3,r3,zero
 2002b5c:	20c7883a 	add	r3,r4,r3
 2002b60:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 7, ((int ) (ball[6][1]) << 10) + (int ) (ball[6][0]));
 2002b64:	e0bf3d17 	ldw	r2,-780(fp)
 2002b68:	10800704 	addi	r2,r2,28
 2002b6c:	e0ff5917 	ldw	r3,-668(fp)
 2002b70:	1807fe72 	custom	249,r3,r3,zero
 2002b74:	180892ba 	slli	r4,r3,10
 2002b78:	e0ff5817 	ldw	r3,-672(fp)
 2002b7c:	1807fe72 	custom	249,r3,r3,zero
 2002b80:	20c7883a 	add	r3,r4,r3
 2002b84:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 8, ((int ) (ball[7][1]) << 10) + (int ) (ball[7][0]));
 2002b88:	e0bf3d17 	ldw	r2,-780(fp)
 2002b8c:	10800804 	addi	r2,r2,32
 2002b90:	e0ff5b17 	ldw	r3,-660(fp)
 2002b94:	1807fe72 	custom	249,r3,r3,zero
 2002b98:	180892ba 	slli	r4,r3,10
 2002b9c:	e0ff5a17 	ldw	r3,-664(fp)
 2002ba0:	1807fe72 	custom	249,r3,r3,zero
 2002ba4:	20c7883a 	add	r3,r4,r3
 2002ba8:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 9, ((int ) (ball[8][1]) << 10) + (int ) (ball[8][0]));
 2002bac:	e0bf3d17 	ldw	r2,-780(fp)
 2002bb0:	10800904 	addi	r2,r2,36
 2002bb4:	e0ff5d17 	ldw	r3,-652(fp)
 2002bb8:	1807fe72 	custom	249,r3,r3,zero
 2002bbc:	180892ba 	slli	r4,r3,10
 2002bc0:	e0ff5c17 	ldw	r3,-656(fp)
 2002bc4:	1807fe72 	custom	249,r3,r3,zero
 2002bc8:	20c7883a 	add	r3,r4,r3
 2002bcc:	10c00035 	stwio	r3,0(r2)
				IOWR(display, 10,
 2002bd0:	e0bf3d17 	ldw	r2,-780(fp)
 2002bd4:	10800a04 	addi	r2,r2,40
 2002bd8:	e0ff5f17 	ldw	r3,-644(fp)
 2002bdc:	1807fe72 	custom	249,r3,r3,zero
 2002be0:	180892ba 	slli	r4,r3,10
 2002be4:	e0ff5e17 	ldw	r3,-648(fp)
 2002be8:	1807fe72 	custom	249,r3,r3,zero
 2002bec:	20c7883a 	add	r3,r4,r3
 2002bf0:	10c00035 	stwio	r3,0(r2)
						((int ) (ball[9][1]) << 10) + (int ) (ball[9][0]));
				OSTimeDlyHMSM(0, 0, 0, 4);
 2002bf4:	01c00104 	movi	r7,4
 2002bf8:	000d883a 	mov	r6,zero
 2002bfc:	000b883a 	mov	r5,zero
 2002c00:	0009883a 	mov	r4,zero
 2002c04:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>
			int delay = 0;
			float delta = 0;
			float dist = sqrtf(
					(*effect_x - 446) * (*effect_x - 446)
							+ (*effect_y - 263) * (*effect_y - 263));
			while (speed >= 0.1) {
 2002c08:	e13f3b17 	ldw	r4,-788(fp)
 2002c0c:	20099440 	call	2009944 <__extendsfdf2>
 2002c10:	1011883a 	mov	r8,r2
 2002c14:	1813883a 	mov	r9,r3
 2002c18:	01a666b4 	movhi	r6,39322
 2002c1c:	31a66684 	addi	r6,r6,-26214
 2002c20:	01cfeeb4 	movhi	r7,16314
 2002c24:	39e66644 	addi	r7,r7,-26215
 2002c28:	4009883a 	mov	r4,r8
 2002c2c:	480b883a 	mov	r5,r9
 2002c30:	20087600 	call	2008760 <__gedf2>
 2002c34:	1038c70e 	bge	r2,zero,2000f54 <task2+0x7b0>
						((int ) (ball[9][1]) << 10) + (int ) (ball[9][0]));
				OSTimeDlyHMSM(0, 0, 0, 4);

			}

			OSTimeDlyHMSM(0, 0, 0, 100);
 2002c38:	01c01904 	movi	r7,100
 2002c3c:	000d883a 	mov	r6,zero
 2002c40:	000b883a 	mov	r5,zero
 2002c44:	0009883a 	mov	r4,zero
 2002c48:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>

			opt_task2 = OS_FLAG_CLR;
 2002c4c:	e03f3e05 	stb	zero,-776(fp)
			OSFlagPost(AnimationFlagGrp, ANIMATION, opt_task2, &err);
 2002c50:	d0a78817 	ldw	r2,-25056(gp)
 2002c54:	e0ff3e03 	ldbu	r3,-776(fp)
 2002c58:	e13f4b04 	addi	r4,fp,-724
 2002c5c:	200f883a 	mov	r7,r4
 2002c60:	180d883a 	mov	r6,r3
 2002c64:	01400044 	movi	r5,1
 2002c68:	1009883a 	mov	r4,r2
 2002c6c:	201adc00 	call	201adc0 <OSFlagPost>

			OSMboxPost(MailBox6, &number_of_ball);
 2002c70:	d0a78517 	ldw	r2,-25068(gp)
 2002c74:	e0ffba04 	addi	r3,fp,-280
 2002c78:	180b883a 	mov	r5,r3
 2002c7c:	1009883a 	mov	r4,r2
 2002c80:	201bd3c0 	call	201bd3c <OSMboxPost>
			//OSMboxPost(MailBox7, &score);
			DEBUG_PRINT("[Task 2] Animation termine -> %i ball \n",number_of_ball);
 2002c84:	e0bfba17 	ldw	r2,-280(fp)
 2002c88:	100b883a 	mov	r5,r2
 2002c8c:	010080b4 	movhi	r4,514
 2002c90:	210a7f04 	addi	r4,r4,10748
 2002c94:	200a0300 	call	200a030 <printf>
		}
	}
 2002c98:	00373806 	br	200097c <task2+0x1d8>

02002c9c <task3>:
}

void task3(void* pdata) {
 2002c9c:	deffd804 	addi	sp,sp,-160
 2002ca0:	dfc02715 	stw	ra,156(sp)
 2002ca4:	df002615 	stw	fp,152(sp)
 2002ca8:	df002604 	addi	fp,sp,152
 2002cac:	e13fff15 	stw	r4,-4(fp)
	 int * turn_finish = (int *) MEM_NIOS_PI_BASE + 13; to RPi
	 int * game_finish = (int*) MEM_NIOS_PI_BASE+14; to RPi
	 int * time_out = (int*) MEM_NIOS_PI_BASE+15; from RPi
	 */
	//intermediate variable//
	IOWR(MEM_NIOS_PI_BASE, 0, 0);
 2002cb0:	0007883a 	mov	r3,zero
 2002cb4:	00800834 	movhi	r2,32
 2002cb8:	10c00035 	stwio	r3,0(r2)
	IOWR(MEM_NIOS_PI_BASE, 1, 0);
 2002cbc:	0007883a 	mov	r3,zero
 2002cc0:	00800834 	movhi	r2,32
 2002cc4:	10800104 	addi	r2,r2,4
 2002cc8:	10c00035 	stwio	r3,0(r2)
	IOWR(MEM_NIOS_PI_BASE, 2, 0);
 2002ccc:	0007883a 	mov	r3,zero
 2002cd0:	00800834 	movhi	r2,32
 2002cd4:	10800204 	addi	r2,r2,8
 2002cd8:	10c00035 	stwio	r3,0(r2)

	IOWR(MEM_NIOS_PI_BASE, 3, 0);
 2002cdc:	0007883a 	mov	r3,zero
 2002ce0:	00800834 	movhi	r2,32
 2002ce4:	10800304 	addi	r2,r2,12
 2002ce8:	10c00035 	stwio	r3,0(r2)

	IOWR(MEM_NIOS_PI_BASE, 7, 0);
 2002cec:	0007883a 	mov	r3,zero
 2002cf0:	00800834 	movhi	r2,32
 2002cf4:	10800704 	addi	r2,r2,28
 2002cf8:	10c00035 	stwio	r3,0(r2)

	int ready, first_player, game_finish, ready_send;
	int all_rdy;

	ready = 0;
 2002cfc:	e03fdc15 	stw	zero,-144(fp)
	first_player = 0;
 2002d00:	e03fdd15 	stw	zero,-140(fp)
	all_rdy = 0;
 2002d04:	e03fdf15 	stw	zero,-132(fp)
	game_finish = 0;
 2002d08:	e03fef15 	stw	zero,-68(fp)
	ready_send = 0;
 2002d0c:	e03fde15 	stw	zero,-136(fp)
	int number_of_ball = 10;
 2002d10:	00800284 	movi	r2,10
 2002d14:	e0bff015 	stw	r2,-64(fp)
	int time_out = 0;
 2002d18:	e03fe015 	stw	zero,-128(fp)
	int data_valid_from_task1 = 0;
 2002d1c:	e03fe115 	stw	zero,-124(fp)
	int dir_x, dir_y, ef_x, ef_y;
	int set_send;

	int val = IORD(GPIO_BASE, 0);
 2002d20:	00800834 	movhi	r2,32
 2002d24:	10810004 	addi	r2,r2,1024
 2002d28:	10800037 	ldwio	r2,0(r2)
 2002d2c:	e0bfe315 	stw	r2,-116(fp)
	DEBUG_PRINT("GPIO : %d\n",val);
 2002d30:	e17fe317 	ldw	r5,-116(fp)
 2002d34:	010080b4 	movhi	r4,514
 2002d38:	210a9d04 	addi	r4,r4,10868
 2002d3c:	200a0300 	call	200a030 <printf>
	IOWR(MTL_IP_BASE, 13, 4);
 2002d40:	00c00104 	movi	r3,4
 2002d44:	008000b4 	movhi	r2,2
 2002d48:	10800d04 	addi	r2,r2,52
 2002d4c:	10c00035 	stwio	r3,0(r2)
	while (!val) {
 2002d50:	00000906 	br	2002d78 <task3+0xdc>
		val = IORD(GPIO_BASE, 0);
 2002d54:	00800834 	movhi	r2,32
 2002d58:	10810004 	addi	r2,r2,1024
 2002d5c:	10800037 	ldwio	r2,0(r2)
 2002d60:	e0bfe315 	stw	r2,-116(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 2002d64:	01c07d04 	movi	r7,500
 2002d68:	000d883a 	mov	r6,zero
 2002d6c:	000b883a 	mov	r5,zero
 2002d70:	0009883a 	mov	r4,zero
 2002d74:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>
	int set_send;

	int val = IORD(GPIO_BASE, 0);
	DEBUG_PRINT("GPIO : %d\n",val);
	IOWR(MTL_IP_BASE, 13, 4);
	while (!val) {
 2002d78:	e0bfe317 	ldw	r2,-116(fp)
 2002d7c:	103ff526 	beq	r2,zero,2002d54 <task3+0xb8>
		OSTimeDlyHMSM(0, 0, 0, 500);
	}

	while (1) {

		ready = 0;
 2002d80:	e03fdc15 	stw	zero,-144(fp)
		first_player = 0;
 2002d84:	e03fdd15 	stw	zero,-140(fp)
		all_rdy = 0;
 2002d88:	e03fdf15 	stw	zero,-132(fp)
		game_finish = 0;
 2002d8c:	e03fef15 	stw	zero,-68(fp)
		ready_send = 0;
 2002d90:	e03fde15 	stw	zero,-136(fp)
		number_of_ball = 10;
 2002d94:	00800284 	movi	r2,10
 2002d98:	e0bff015 	stw	r2,-64(fp)
		time_out = 0;
 2002d9c:	e03fe015 	stw	zero,-128(fp)
		set_send = 0;
 2002da0:	e03fe215 	stw	zero,-120(fp)

		IOWR(MEM_NIOS_PI_BASE, 0, 0);
 2002da4:	0007883a 	mov	r3,zero
 2002da8:	00800834 	movhi	r2,32
 2002dac:	10c00035 	stwio	r3,0(r2)
		IOWR(MEM_NIOS_PI_BASE, 1, 0);
 2002db0:	0007883a 	mov	r3,zero
 2002db4:	00800834 	movhi	r2,32
 2002db8:	10800104 	addi	r2,r2,4
 2002dbc:	10c00035 	stwio	r3,0(r2)
		IOWR(MEM_NIOS_PI_BASE, 2, 0);
 2002dc0:	0007883a 	mov	r3,zero
 2002dc4:	00800834 	movhi	r2,32
 2002dc8:	10800204 	addi	r2,r2,8
 2002dcc:	10c00035 	stwio	r3,0(r2)

		IOWR(MEM_NIOS_PI_BASE, 3, 0);
 2002dd0:	0007883a 	mov	r3,zero
 2002dd4:	00800834 	movhi	r2,32
 2002dd8:	10800304 	addi	r2,r2,12
 2002ddc:	10c00035 	stwio	r3,0(r2)

		IOWR(MEM_NIOS_PI_BASE, 7, 0);
 2002de0:	0007883a 	mov	r3,zero
 2002de4:	00800834 	movhi	r2,32
 2002de8:	10800704 	addi	r2,r2,28
 2002dec:	10c00035 	stwio	r3,0(r2)


		/* Wait for first player */
		OSFlagPost(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_SET, &err);
 2002df0:	d0a78a17 	ldw	r2,-25048(gp)
 2002df4:	e0ffee04 	addi	r3,fp,-72
 2002df8:	180f883a 	mov	r7,r3
 2002dfc:	01800044 	movi	r6,1
 2002e00:	01400044 	movi	r5,1
 2002e04:	1009883a 	mov	r4,r2
 2002e08:	201adc00 	call	201adc0 <OSFlagPost>
		IOWR(MTL_IP_BASE, 13, 2);
 2002e0c:	00c00084 	movi	r3,2
 2002e10:	008000b4 	movhi	r2,2
 2002e14:	10800d04 	addi	r2,r2,52
 2002e18:	10c00035 	stwio	r3,0(r2)
		DEBUG_PRINT("[Task 3] Wait for first player\n");
 2002e1c:	010080b4 	movhi	r4,514
 2002e20:	210aa004 	addi	r4,r4,10880
 2002e24:	200a1b00 	call	200a1b0 <puts>
		while (!ready && !time_out) {
 2002e28:	00003506 	br	2002f00 <task3+0x264>
			int var = IORD(MEM_NIOS_PI_BASE, 1);
 2002e2c:	00800834 	movhi	r2,32
 2002e30:	10800104 	addi	r2,r2,4
 2002e34:	10800037 	ldwio	r2,0(r2)
 2002e38:	e0bfe415 	stw	r2,-112(fp)
			time_out = IORD(MEM_NIOS_PI_BASE, 15);
 2002e3c:	00800834 	movhi	r2,32
 2002e40:	10800f04 	addi	r2,r2,60
 2002e44:	10800037 	ldwio	r2,0(r2)
 2002e48:	e0bfe015 	stw	r2,-128(fp)
			if (time_out)
 2002e4c:	e0bfe017 	ldw	r2,-128(fp)
 2002e50:	10000426 	beq	r2,zero,2002e64 <task3+0x1c8>
				IOWR(MEM_NIOS_PI_BASE, 15, 0);
 2002e54:	0007883a 	mov	r3,zero
 2002e58:	00800834 	movhi	r2,32
 2002e5c:	10800f04 	addi	r2,r2,60
 2002e60:	10c00035 	stwio	r3,0(r2)
			if (var != 0) {
 2002e64:	e0bfe417 	ldw	r2,-112(fp)
 2002e68:	10000526 	beq	r2,zero,2002e80 <task3+0x1e4>
				ready = 1;
 2002e6c:	00800044 	movi	r2,1
 2002e70:	e0bfdc15 	stw	r2,-144(fp)
				first_player = var;
 2002e74:	e0bfe417 	ldw	r2,-112(fp)
 2002e78:	e0bfdd15 	stw	r2,-140(fp)
 2002e7c:	00001b06 	br	2002eec <task3+0x250>
			} else if (!time_out) {
 2002e80:	e0bfe017 	ldw	r2,-128(fp)
 2002e84:	1000191e 	bne	r2,zero,2002eec <task3+0x250>
				OS_FLAGS flag = OSFlagAccept(StartGameGrp, START_THE_GAME,
 2002e88:	d0a79417 	ldw	r2,-25008(gp)
 2002e8c:	e0ffee04 	addi	r3,fp,-72
 2002e90:	180f883a 	mov	r7,r3
 2002e94:	01802084 	movi	r6,130
 2002e98:	01400044 	movi	r5,1
 2002e9c:	1009883a 	mov	r4,r2
 2002ea0:	2019edc0 	call	2019edc <OSFlagAccept>
 2002ea4:	e0bfe50d 	sth	r2,-108(fp)
						OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, &err);
				if (flag == START_THE_GAME && !ready_send) {
 2002ea8:	e0bfe50b 	ldhu	r2,-108(fp)
 2002eac:	10800058 	cmpnei	r2,r2,1
 2002eb0:	10000e1e 	bne	r2,zero,2002eec <task3+0x250>
 2002eb4:	e0bfde17 	ldw	r2,-136(fp)
 2002eb8:	10000c1e 	bne	r2,zero,2002eec <task3+0x250>
					IOWR(MTL_IP_BASE, 13, 3);
 2002ebc:	00c000c4 	movi	r3,3
 2002ec0:	008000b4 	movhi	r2,2
 2002ec4:	10800d04 	addi	r2,r2,52
 2002ec8:	10c00035 	stwio	r3,0(r2)
					DEBUG_PRINT("[Task 3] Player touch the screen\n");
 2002ecc:	010080b4 	movhi	r4,514
 2002ed0:	210aa804 	addi	r4,r4,10912
 2002ed4:	200a1b00 	call	200a1b0 <puts>
					ready_send = 1;
 2002ed8:	00800044 	movi	r2,1
 2002edc:	e0bfde15 	stw	r2,-136(fp)
					IOWR(MEM_NIOS_PI_BASE, 0, ID1);
 2002ee0:	00c00084 	movi	r3,2
 2002ee4:	00800834 	movhi	r2,32
 2002ee8:	10c00035 	stwio	r3,0(r2)
				}
			}
			OSTimeDlyHMSM(0, 0, 0, 100);
 2002eec:	01c01904 	movi	r7,100
 2002ef0:	000d883a 	mov	r6,zero
 2002ef4:	000b883a 	mov	r5,zero
 2002ef8:	0009883a 	mov	r4,zero
 2002efc:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>

		/* Wait for first player */
		OSFlagPost(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_SET, &err);
		IOWR(MTL_IP_BASE, 13, 2);
		DEBUG_PRINT("[Task 3] Wait for first player\n");
		while (!ready && !time_out) {
 2002f00:	e0bfdc17 	ldw	r2,-144(fp)
 2002f04:	1000021e 	bne	r2,zero,2002f10 <task3+0x274>
 2002f08:	e0bfe017 	ldw	r2,-128(fp)
 2002f0c:	103fc726 	beq	r2,zero,2002e2c <task3+0x190>
					IOWR(MEM_NIOS_PI_BASE, 0, ID1);
				}
			}
			OSTimeDlyHMSM(0, 0, 0, 100);
		}
		IOWR(MTL_IP_BASE,13,3);
 2002f10:	00c000c4 	movi	r3,3
 2002f14:	008000b4 	movhi	r2,2
 2002f18:	10800d04 	addi	r2,r2,52
 2002f1c:	10c00035 	stwio	r3,0(r2)
		/* Wait for all player */
		DEBUG_PRINT("[Task 3] Wait for all player are ready \n");
 2002f20:	010080b4 	movhi	r4,514
 2002f24:	210ab104 	addi	r4,r4,10948
 2002f28:	200a1b00 	call	200a1b0 <puts>
		while (!all_rdy && !time_out) {
 2002f2c:	00001006 	br	2002f70 <task3+0x2d4>
			time_out = IORD(MEM_NIOS_PI_BASE, 15);
 2002f30:	00800834 	movhi	r2,32
 2002f34:	10800f04 	addi	r2,r2,60
 2002f38:	10800037 	ldwio	r2,0(r2)
 2002f3c:	e0bfe015 	stw	r2,-128(fp)
			if (time_out)
 2002f40:	e0bfe017 	ldw	r2,-128(fp)
 2002f44:	10000426 	beq	r2,zero,2002f58 <task3+0x2bc>
				IOWR(MEM_NIOS_PI_BASE, 15, 0);
 2002f48:	0007883a 	mov	r3,zero
 2002f4c:	00800834 	movhi	r2,32
 2002f50:	10800f04 	addi	r2,r2,60
 2002f54:	10c00035 	stwio	r3,0(r2)
			if (IORD(MEM_NIOS_PI_BASE, 2))
 2002f58:	00800834 	movhi	r2,32
 2002f5c:	10800204 	addi	r2,r2,8
 2002f60:	10800037 	ldwio	r2,0(r2)
 2002f64:	10000226 	beq	r2,zero,2002f70 <task3+0x2d4>
				all_rdy = 1;
 2002f68:	00800044 	movi	r2,1
 2002f6c:	e0bfdf15 	stw	r2,-132(fp)
			OSTimeDlyHMSM(0, 0, 0, 100);
		}
		IOWR(MTL_IP_BASE,13,3);
		/* Wait for all player */
		DEBUG_PRINT("[Task 3] Wait for all player are ready \n");
		while (!all_rdy && !time_out) {
 2002f70:	e0bfdf17 	ldw	r2,-132(fp)
 2002f74:	1000021e 	bne	r2,zero,2002f80 <task3+0x2e4>
 2002f78:	e0bfe017 	ldw	r2,-128(fp)
 2002f7c:	103fec26 	beq	r2,zero,2002f30 <task3+0x294>
				IOWR(MEM_NIOS_PI_BASE, 15, 0);
			if (IORD(MEM_NIOS_PI_BASE, 2))
				all_rdy = 1;
		}

		activePlayer = first_player;
 2002f80:	e0bfdd17 	ldw	r2,-140(fp)
 2002f84:	e0bfdb15 	stw	r2,-148(fp)
		game_finish = 0;
 2002f88:	e03fef15 	stw	zero,-68(fp)
		DEBUG_PRINT("[Task 3] the game can start\n");
 2002f8c:	010080b4 	movhi	r4,514
 2002f90:	210abb04 	addi	r4,r4,10988
 2002f94:	200a1b00 	call	200a1b0 <puts>
		IOWR(MTL_IP_BASE, 13, 0);
 2002f98:	0007883a 	mov	r3,zero
 2002f9c:	008000b4 	movhi	r2,2
 2002fa0:	10800d04 	addi	r2,r2,52
 2002fa4:	10c00035 	stwio	r3,0(r2)
		while (!game_finish && !time_out){
 2002fa8:	00018106 	br	20035b0 <task3+0x914>
			time_out = IORD(MEM_NIOS_PI_BASE, 15);
 2002fac:	00800834 	movhi	r2,32
 2002fb0:	10800f04 	addi	r2,r2,60
 2002fb4:	10800037 	ldwio	r2,0(r2)
 2002fb8:	e0bfe015 	stw	r2,-128(fp)
			//DEBUG_PRINT("Time out : %d\n",time_out);
			if (time_out)
 2002fbc:	e0bfe017 	ldw	r2,-128(fp)
 2002fc0:	10000426 	beq	r2,zero,2002fd4 <task3+0x338>
				IOWR(MEM_NIOS_PI_BASE, 15, 0);
 2002fc4:	0007883a 	mov	r3,zero
 2002fc8:	00800834 	movhi	r2,32
 2002fcc:	10800f04 	addi	r2,r2,60
 2002fd0:	10c00035 	stwio	r3,0(r2)
			//DEBUG_PRINT("Start loop %d\n", activePlayer);
			if (activePlayer == ID1) {
 2002fd4:	e0bfdb17 	ldw	r2,-148(fp)
 2002fd8:	10800098 	cmpnei	r2,r2,2
 2002fdc:	1000051e 	bne	r2,zero,2002ff4 <task3+0x358>
				IOWR(MTL_IP_BASE, 12, 1);
 2002fe0:	00c00044 	movi	r3,1
 2002fe4:	008000b4 	movhi	r2,2
 2002fe8:	10800c04 	addi	r2,r2,48
 2002fec:	10c00035 	stwio	r3,0(r2)
 2002ff0:	00000406 	br	2003004 <task3+0x368>
			} else {
				IOWR(MTL_IP_BASE, 12, 0);
 2002ff4:	0007883a 	mov	r3,zero
 2002ff8:	008000b4 	movhi	r2,2
 2002ffc:	10800c04 	addi	r2,r2,48
 2003000:	10c00035 	stwio	r3,0(r2)
			}
			if (activePlayer == ID1 && !IORD(MEM_NIOS_PI_BASE, 7)
 2003004:	e0bfdb17 	ldw	r2,-148(fp)
 2003008:	10800098 	cmpnei	r2,r2,2
 200300c:	1000e51e 	bne	r2,zero,20033a4 <task3+0x708>
 2003010:	00800834 	movhi	r2,32
 2003014:	10800704 	addi	r2,r2,28
 2003018:	10800037 	ldwio	r2,0(r2)
 200301c:	1000e11e 	bne	r2,zero,20033a4 <task3+0x708>
					&& !time_out) {
 2003020:	e0bfe017 	ldw	r2,-128(fp)
 2003024:	1000df1e 	bne	r2,zero,20033a4 <task3+0x708>
				if(!set_send){
 2003028:	e0bfe217 	ldw	r2,-120(fp)
 200302c:	1000091e 	bne	r2,zero,2003054 <task3+0x3b8>
					set_send = 1;
 2003030:	00800044 	movi	r2,1
 2003034:	e0bfe215 	stw	r2,-120(fp)
					OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 2003038:	d0a79317 	ldw	r2,-25012(gp)
 200303c:	e0ffee04 	addi	r3,fp,-72
 2003040:	180f883a 	mov	r7,r3
 2003044:	01800044 	movi	r6,1
 2003048:	01400044 	movi	r5,1
 200304c:	1009883a 	mov	r4,r2
 2003050:	201adc00 	call	201adc0 <OSFlagPost>
				}
				//DEBUG_PRINT("[Task 3] Wait for value from task 1\n");
				data_valid_from_task1 = 0;
 2003054:	e03fe115 	stw	zero,-124(fp)
				int *vector_x = (int *) OSMboxPend(MailBox1, 100, &err);
 2003058:	d0a79217 	ldw	r2,-25016(gp)
 200305c:	e0ffee04 	addi	r3,fp,-72
 2003060:	180d883a 	mov	r6,r3
 2003064:	01401904 	movi	r5,100
 2003068:	1009883a 	mov	r4,r2
 200306c:	201b99c0 	call	201b99c <OSMboxPend>
 2003070:	e0bfe615 	stw	r2,-104(fp)
				if(err == OS_ERR_TIMEOUT && dir_x == 0) data_valid_from_task1 = 1;
 2003074:	e0bfee03 	ldbu	r2,-72(fp)
 2003078:	10803fcc 	andi	r2,r2,255
 200307c:	10800298 	cmpnei	r2,r2,10
 2003080:	1000051e 	bne	r2,zero,2003098 <task3+0x3fc>
 2003084:	e0bff117 	ldw	r2,-60(fp)
 2003088:	1000031e 	bne	r2,zero,2003098 <task3+0x3fc>
 200308c:	00800044 	movi	r2,1
 2003090:	e0bfe115 	stw	r2,-124(fp)
 2003094:	00000806 	br	20030b8 <task3+0x41c>
				else if(err == OS_ERR_NONE && dir_x == 0) dir_x = *vector_x;
 2003098:	e0bfee03 	ldbu	r2,-72(fp)
 200309c:	10803fcc 	andi	r2,r2,255
 20030a0:	1000051e 	bne	r2,zero,20030b8 <task3+0x41c>
 20030a4:	e0bff117 	ldw	r2,-60(fp)
 20030a8:	1000031e 	bne	r2,zero,20030b8 <task3+0x41c>
 20030ac:	e0bfe617 	ldw	r2,-104(fp)
 20030b0:	10800017 	ldw	r2,0(r2)
 20030b4:	e0bff115 	stw	r2,-60(fp)
				int *vector_y = (int *) OSMboxPend(MailBox2, 100, &err);
 20030b8:	d0a78c17 	ldw	r2,-25040(gp)
 20030bc:	e0ffee04 	addi	r3,fp,-72
 20030c0:	180d883a 	mov	r6,r3
 20030c4:	01401904 	movi	r5,100
 20030c8:	1009883a 	mov	r4,r2
 20030cc:	201b99c0 	call	201b99c <OSMboxPend>
 20030d0:	e0bfe715 	stw	r2,-100(fp)
				if(err == OS_ERR_TIMEOUT && dir_y == 0) data_valid_from_task1 = 1;
 20030d4:	e0bfee03 	ldbu	r2,-72(fp)
 20030d8:	10803fcc 	andi	r2,r2,255
 20030dc:	10800298 	cmpnei	r2,r2,10
 20030e0:	1000051e 	bne	r2,zero,20030f8 <task3+0x45c>
 20030e4:	e0bff217 	ldw	r2,-56(fp)
 20030e8:	1000031e 	bne	r2,zero,20030f8 <task3+0x45c>
 20030ec:	00800044 	movi	r2,1
 20030f0:	e0bfe115 	stw	r2,-124(fp)
 20030f4:	00000806 	br	2003118 <task3+0x47c>
				else if(err == OS_ERR_NONE && dir_y == 0) dir_y = *vector_y;
 20030f8:	e0bfee03 	ldbu	r2,-72(fp)
 20030fc:	10803fcc 	andi	r2,r2,255
 2003100:	1000051e 	bne	r2,zero,2003118 <task3+0x47c>
 2003104:	e0bff217 	ldw	r2,-56(fp)
 2003108:	1000031e 	bne	r2,zero,2003118 <task3+0x47c>
 200310c:	e0bfe717 	ldw	r2,-100(fp)
 2003110:	10800017 	ldw	r2,0(r2)
 2003114:	e0bff215 	stw	r2,-56(fp)
				int *effect_x = (int *) OSMboxPend(MailBox10, 100, &err);
 2003118:	d0a78b17 	ldw	r2,-25044(gp)
 200311c:	e0ffee04 	addi	r3,fp,-72
 2003120:	180d883a 	mov	r6,r3
 2003124:	01401904 	movi	r5,100
 2003128:	1009883a 	mov	r4,r2
 200312c:	201b99c0 	call	201b99c <OSMboxPend>
 2003130:	e0bfe815 	stw	r2,-96(fp)
				if(err == OS_ERR_TIMEOUT && ef_x == 0) data_valid_from_task1 = 1;
 2003134:	e0bfee03 	ldbu	r2,-72(fp)
 2003138:	10803fcc 	andi	r2,r2,255
 200313c:	10800298 	cmpnei	r2,r2,10
 2003140:	1000051e 	bne	r2,zero,2003158 <task3+0x4bc>
 2003144:	e0bff317 	ldw	r2,-52(fp)
 2003148:	1000031e 	bne	r2,zero,2003158 <task3+0x4bc>
 200314c:	00800044 	movi	r2,1
 2003150:	e0bfe115 	stw	r2,-124(fp)
 2003154:	00000806 	br	2003178 <task3+0x4dc>
				else if(err == OS_ERR_NONE && ef_x == 0) ef_x = *effect_x;
 2003158:	e0bfee03 	ldbu	r2,-72(fp)
 200315c:	10803fcc 	andi	r2,r2,255
 2003160:	1000051e 	bne	r2,zero,2003178 <task3+0x4dc>
 2003164:	e0bff317 	ldw	r2,-52(fp)
 2003168:	1000031e 	bne	r2,zero,2003178 <task3+0x4dc>
 200316c:	e0bfe817 	ldw	r2,-96(fp)
 2003170:	10800017 	ldw	r2,0(r2)
 2003174:	e0bff315 	stw	r2,-52(fp)
				int *effect_y = (int *) OSMboxPend(MailBox11, 100, &err);
 2003178:	d0a79117 	ldw	r2,-25020(gp)
 200317c:	e0ffee04 	addi	r3,fp,-72
 2003180:	180d883a 	mov	r6,r3
 2003184:	01401904 	movi	r5,100
 2003188:	1009883a 	mov	r4,r2
 200318c:	201b99c0 	call	201b99c <OSMboxPend>
 2003190:	e0bfe915 	stw	r2,-92(fp)
				if(err == OS_ERR_TIMEOUT && ef_y == 0) data_valid_from_task1 = 1;
 2003194:	e0bfee03 	ldbu	r2,-72(fp)
 2003198:	10803fcc 	andi	r2,r2,255
 200319c:	10800298 	cmpnei	r2,r2,10
 20031a0:	1000051e 	bne	r2,zero,20031b8 <task3+0x51c>
 20031a4:	e0bff417 	ldw	r2,-48(fp)
 20031a8:	1000031e 	bne	r2,zero,20031b8 <task3+0x51c>
 20031ac:	00800044 	movi	r2,1
 20031b0:	e0bfe115 	stw	r2,-124(fp)
 20031b4:	00000806 	br	20031d8 <task3+0x53c>
				else if(err == OS_ERR_NONE && ef_y == 0) ef_y = *effect_y;
 20031b8:	e0bfee03 	ldbu	r2,-72(fp)
 20031bc:	10803fcc 	andi	r2,r2,255
 20031c0:	1000051e 	bne	r2,zero,20031d8 <task3+0x53c>
 20031c4:	e0bff417 	ldw	r2,-48(fp)
 20031c8:	1000031e 	bne	r2,zero,20031d8 <task3+0x53c>
 20031cc:	e0bfe917 	ldw	r2,-92(fp)
 20031d0:	10800017 	ldw	r2,0(r2)
 20031d4:	e0bff415 	stw	r2,-48(fp)

				if(!data_valid_from_task1){
 20031d8:	e0bfe117 	ldw	r2,-124(fp)
 20031dc:	1000f41e 	bne	r2,zero,20035b0 <task3+0x914>

					OSMboxPost(MailBox4, &dir_x);
 20031e0:	d0a78f17 	ldw	r2,-25028(gp)
 20031e4:	e0fff104 	addi	r3,fp,-60
 20031e8:	180b883a 	mov	r5,r3
 20031ec:	1009883a 	mov	r4,r2
 20031f0:	201bd3c0 	call	201bd3c <OSMboxPost>
					OSMboxPost(MailBox5, &dir_y);
 20031f4:	d0a78917 	ldw	r2,-25052(gp)
 20031f8:	e0fff204 	addi	r3,fp,-56
 20031fc:	180b883a 	mov	r5,r3
 2003200:	1009883a 	mov	r4,r2
 2003204:	201bd3c0 	call	201bd3c <OSMboxPost>
					OSMboxPost(MailBox12, &ef_x);
 2003208:	d0a78d17 	ldw	r2,-25036(gp)
 200320c:	e0fff304 	addi	r3,fp,-52
 2003210:	180b883a 	mov	r5,r3
 2003214:	1009883a 	mov	r4,r2
 2003218:	201bd3c0 	call	201bd3c <OSMboxPost>
					OSMboxPost(MailBox13, &ef_y);
 200321c:	d0a78617 	ldw	r2,-25064(gp)
 2003220:	e0fff404 	addi	r3,fp,-48
 2003224:	180b883a 	mov	r5,r3
 2003228:	1009883a 	mov	r4,r2
 200322c:	201bd3c0 	call	201bd3c <OSMboxPost>
					OSMboxPost(MailBox7, &game_finish);
 2003230:	d0a79017 	ldw	r2,-25024(gp)
 2003234:	e0ffef04 	addi	r3,fp,-68
 2003238:	180b883a 	mov	r5,r3
 200323c:	1009883a 	mov	r4,r2
 2003240:	201bd3c0 	call	201bd3c <OSMboxPost>

					OSMboxPost(MailBox8, &number_of_ball); //transmit nbr ball to task 2
 2003244:	d0a78e17 	ldw	r2,-25032(gp)
 2003248:	e0fff004 	addi	r3,fp,-64
 200324c:	180b883a 	mov	r5,r3
 2003250:	1009883a 	mov	r4,r2
 2003254:	201bd3c0 	call	201bd3c <OSMboxPost>

					DEBUG_PRINT("[Task 3] Send value to the SPI\n");
 2003258:	010080b4 	movhi	r4,514
 200325c:	210ac204 	addi	r4,r4,11016
 2003260:	200a1b00 	call	200a1b0 <puts>
					IOWR(MEM_NIOS_PI_BASE, 4, number_of_ball);
 2003264:	e0fff017 	ldw	r3,-64(fp)
 2003268:	00800834 	movhi	r2,32
 200326c:	10800404 	addi	r2,r2,16
 2003270:	10c00035 	stwio	r3,0(r2)
					IOWR(MEM_NIOS_PI_BASE, 5, compress(dir_x, dir_y));
 2003274:	e0bff117 	ldw	r2,-60(fp)
 2003278:	e0fff217 	ldw	r3,-56(fp)
 200327c:	180b883a 	mov	r5,r3
 2003280:	1009883a 	mov	r4,r2
 2003284:	20002940 	call	2000294 <compress>
 2003288:	1007883a 	mov	r3,r2
 200328c:	00800834 	movhi	r2,32
 2003290:	10800504 	addi	r2,r2,20
 2003294:	10c00035 	stwio	r3,0(r2)
					IOWR(MEM_NIOS_PI_BASE, 6, compress(ef_x, ef_y));
 2003298:	e0bff317 	ldw	r2,-52(fp)
 200329c:	e0fff417 	ldw	r3,-48(fp)
 20032a0:	180b883a 	mov	r5,r3
 20032a4:	1009883a 	mov	r4,r2
 20032a8:	20002940 	call	2000294 <compress>
 20032ac:	1007883a 	mov	r3,r2
 20032b0:	00800834 	movhi	r2,32
 20032b4:	10800604 	addi	r2,r2,24
 20032b8:	10c00035 	stwio	r3,0(r2)
					IOWR(MEM_NIOS_PI_BASE, 3, 1); //*isSend = 1; // value are available
 20032bc:	00c00044 	movi	r3,1
 20032c0:	00800834 	movhi	r2,32
 20032c4:	10800304 	addi	r2,r2,12
 20032c8:	10c00035 	stwio	r3,0(r2)

					//opt_task1 = OS_FLAG_CLR;
					//OSFlagPost(isActiveFlagGrp, IS_ACTIVE, opt_task1, &err);
					OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0,
 20032cc:	d0e78817 	ldw	r3,-25056(gp)
 20032d0:	e0bfee04 	addi	r2,fp,-72
 20032d4:	d8800015 	stw	r2,0(sp)
 20032d8:	000f883a 	mov	r7,zero
 20032dc:	000d883a 	mov	r6,zero
 20032e0:	01400044 	movi	r5,1
 20032e4:	1809883a 	mov	r4,r3
 20032e8:	201a7a80 	call	201a7a8 <OSFlagPend>
							&err);

					int *nbr_ball = (int *) OSMboxPend(MailBox6, 0, &err);
 20032ec:	d0a78517 	ldw	r2,-25068(gp)
 20032f0:	e0ffee04 	addi	r3,fp,-72
 20032f4:	180d883a 	mov	r6,r3
 20032f8:	000b883a 	mov	r5,zero
 20032fc:	1009883a 	mov	r4,r2
 2003300:	201b99c0 	call	201b99c <OSMboxPend>
 2003304:	e0bfea15 	stw	r2,-88(fp)
					number_of_ball = *nbr_ball;
 2003308:	e0bfea17 	ldw	r2,-88(fp)
 200330c:	10800017 	ldw	r2,0(r2)
 2003310:	e0bff015 	stw	r2,-64(fp)
					DEBUG_PRINT("[Task 3] Number of ball : %i\n", number_of_ball);
 2003314:	e0bff017 	ldw	r2,-64(fp)
 2003318:	100b883a 	mov	r5,r2
 200331c:	010080b4 	movhi	r4,514
 2003320:	210aca04 	addi	r4,r4,11048
 2003324:	200a0300 	call	200a030 <printf>
					activePlayer = ID2;
 2003328:	00800044 	movi	r2,1
 200332c:	e0bfdb15 	stw	r2,-148(fp)
					dir_x = 0;
 2003330:	e03ff115 	stw	zero,-60(fp)
					dir_y = 0;
 2003334:	e03ff215 	stw	zero,-56(fp)
					ef_x = 0;
 2003338:	e03ff315 	stw	zero,-52(fp)
					ef_y = 0;
 200333c:	e03ff415 	stw	zero,-48(fp)
					set_send = 0;
 2003340:	e03fe215 	stw	zero,-120(fp)

					game_finish = number_of_ball == 9;
 2003344:	e0bff017 	ldw	r2,-64(fp)
 2003348:	10800260 	cmpeqi	r2,r2,9
 200334c:	10803fcc 	andi	r2,r2,255
 2003350:	e0bfef15 	stw	r2,-68(fp)
					if (game_finish == 1) {
 2003354:	e0bfef17 	ldw	r2,-68(fp)
 2003358:	10800058 	cmpnei	r2,r2,1
 200335c:	1000081e 	bne	r2,zero,2003380 <task3+0x6e4>
						DEBUG_PRINT("game finish\n");
 2003360:	010080b4 	movhi	r4,514
 2003364:	210ad204 	addi	r4,r4,11080
 2003368:	200a1b00 	call	200a1b0 <puts>
						IOWR(MEM_NIOS_PI_BASE, 14, 1); // game finish
 200336c:	00c00044 	movi	r3,1
 2003370:	00800834 	movhi	r2,32
 2003374:	10800e04 	addi	r2,r2,56
 2003378:	10c00035 	stwio	r3,0(r2)
 200337c:	00000406 	br	2003390 <task3+0x6f4>
					} else {
						IOWR(MEM_NIOS_PI_BASE, 14, 0); // game not finish
 2003380:	0007883a 	mov	r3,zero
 2003384:	00800834 	movhi	r2,32
 2003388:	10800e04 	addi	r2,r2,56
 200338c:	10c00035 	stwio	r3,0(r2)
					}
					IOWR(MEM_NIOS_PI_BASE, 13, 1); // turn finish
 2003390:	00c00044 	movi	r3,1
 2003394:	00800834 	movhi	r2,32
 2003398:	10800d04 	addi	r2,r2,52
 200339c:	10c00035 	stwio	r3,0(r2)
				IOWR(MTL_IP_BASE, 12, 1);
			} else {
				IOWR(MTL_IP_BASE, 12, 0);
			}
			if (activePlayer == ID1 && !IORD(MEM_NIOS_PI_BASE, 7)
					&& !time_out) {
 20033a0:	00008306 	br	20035b0 <task3+0x914>
						IOWR(MEM_NIOS_PI_BASE, 14, 0); // game not finish
					}
					IOWR(MEM_NIOS_PI_BASE, 13, 1); // turn finish
				}

			} else if (activePlayer == ID2 && IORD(MEM_NIOS_PI_BASE, 7)
 20033a4:	e0bfdb17 	ldw	r2,-148(fp)
 20033a8:	10800058 	cmpnei	r2,r2,1
 20033ac:	1000801e 	bne	r2,zero,20035b0 <task3+0x914>
 20033b0:	00800834 	movhi	r2,32
 20033b4:	10800704 	addi	r2,r2,28
 20033b8:	10800037 	ldwio	r2,0(r2)
 20033bc:	10007c26 	beq	r2,zero,20035b0 <task3+0x914>
					&& !time_out) {
 20033c0:	e0bfe017 	ldw	r2,-128(fp)
 20033c4:	10007a1e 	bne	r2,zero,20035b0 <task3+0x914>
				DEBUG_PRINT(" -- network shoot : %d --\n",time_out);
 20033c8:	e17fe017 	ldw	r5,-128(fp)
 20033cc:	010080b4 	movhi	r4,514
 20033d0:	210ad504 	addi	r4,r4,11092
 20033d4:	200a0300 	call	200a030 <printf>

				int dir = (int) (IORD(MEM_NIOS_PI_BASE, 9));
 20033d8:	00800834 	movhi	r2,32
 20033dc:	10800904 	addi	r2,r2,36
 20033e0:	10800037 	ldwio	r2,0(r2)
 20033e4:	e0bfeb15 	stw	r2,-84(fp)
				int effect = (int) (IORD(MEM_NIOS_PI_BASE, 10));
 20033e8:	00800834 	movhi	r2,32
 20033ec:	10800a04 	addi	r2,r2,40
 20033f0:	10800037 	ldwio	r2,0(r2)
 20033f4:	e0bfec15 	stw	r2,-80(fp)

				int x = x_uncompress(dir);
 20033f8:	e13feb17 	ldw	r4,-84(fp)
 20033fc:	20003300 	call	2000330 <x_uncompress>
 2003400:	e0bffb15 	stw	r2,-20(fp)
				int y = y_uncompress(dir);
 2003404:	e13feb17 	ldw	r4,-84(fp)
 2003408:	20003840 	call	2000384 <y_uncompress>
 200340c:	e0bffc15 	stw	r2,-16(fp)

				int effect_x = x_uncompress(effect);
 2003410:	e13fec17 	ldw	r4,-80(fp)
 2003414:	20003300 	call	2000330 <x_uncompress>
 2003418:	e0bffd15 	stw	r2,-12(fp)
				int effect_y = y_uncompress(effect);
 200341c:	e13fec17 	ldw	r4,-80(fp)
 2003420:	20003840 	call	2000384 <y_uncompress>
 2003424:	e0bffe15 	stw	r2,-8(fp)

				DEBUG_PRINT("[Task 3] dir : %x \t effect : %x\n", dir, effect);
 2003428:	e1bfec17 	ldw	r6,-80(fp)
 200342c:	e17feb17 	ldw	r5,-84(fp)
 2003430:	010080b4 	movhi	r4,514
 2003434:	210adc04 	addi	r4,r4,11120
 2003438:	200a0300 	call	200a030 <printf>
				DEBUG_PRINT("[Task 3] %x - %x \t effect : (%d, %d)\n", x, y,
 200343c:	e0fffb17 	ldw	r3,-20(fp)
 2003440:	e13ffc17 	ldw	r4,-16(fp)
 2003444:	e17ffd17 	ldw	r5,-12(fp)
 2003448:	e0bffe17 	ldw	r2,-8(fp)
 200344c:	d8800015 	stw	r2,0(sp)
 2003450:	280f883a 	mov	r7,r5
 2003454:	200d883a 	mov	r6,r4
 2003458:	180b883a 	mov	r5,r3
 200345c:	010080b4 	movhi	r4,514
 2003460:	210ae504 	addi	r4,r4,11156
 2003464:	200a0300 	call	200a030 <printf>
						effect_x, effect_y);

				OSMboxPost(MailBox4, &x);
 2003468:	d0a78f17 	ldw	r2,-25028(gp)
 200346c:	e0fffb04 	addi	r3,fp,-20
 2003470:	180b883a 	mov	r5,r3
 2003474:	1009883a 	mov	r4,r2
 2003478:	201bd3c0 	call	201bd3c <OSMboxPost>
				OSMboxPost(MailBox5, &y);
 200347c:	d0a78917 	ldw	r2,-25052(gp)
 2003480:	e0fffc04 	addi	r3,fp,-16
 2003484:	180b883a 	mov	r5,r3
 2003488:	1009883a 	mov	r4,r2
 200348c:	201bd3c0 	call	201bd3c <OSMboxPost>
				OSMboxPost(MailBox7, &game_finish);
 2003490:	d0a79017 	ldw	r2,-25024(gp)
 2003494:	e0ffef04 	addi	r3,fp,-68
 2003498:	180b883a 	mov	r5,r3
 200349c:	1009883a 	mov	r4,r2
 20034a0:	201bd3c0 	call	201bd3c <OSMboxPost>
				OSMboxPost(MailBox8, &number_of_ball);
 20034a4:	d0a78e17 	ldw	r2,-25032(gp)
 20034a8:	e0fff004 	addi	r3,fp,-64
 20034ac:	180b883a 	mov	r5,r3
 20034b0:	1009883a 	mov	r4,r2
 20034b4:	201bd3c0 	call	201bd3c <OSMboxPost>
				OSMboxPost(MailBox12, &effect_x);
 20034b8:	d0a78d17 	ldw	r2,-25036(gp)
 20034bc:	e0fffd04 	addi	r3,fp,-12
 20034c0:	180b883a 	mov	r5,r3
 20034c4:	1009883a 	mov	r4,r2
 20034c8:	201bd3c0 	call	201bd3c <OSMboxPost>
				OSMboxPost(MailBox13, &effect_y);
 20034cc:	d0a78617 	ldw	r2,-25064(gp)
 20034d0:	e0fffe04 	addi	r3,fp,-8
 20034d4:	180b883a 	mov	r5,r3
 20034d8:	1009883a 	mov	r4,r2
 20034dc:	201bd3c0 	call	201bd3c <OSMboxPost>

				OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0,
 20034e0:	d0e78817 	ldw	r3,-25056(gp)
 20034e4:	e0bfee04 	addi	r2,fp,-72
 20034e8:	d8800015 	stw	r2,0(sp)
 20034ec:	000f883a 	mov	r7,zero
 20034f0:	000d883a 	mov	r6,zero
 20034f4:	01400044 	movi	r5,1
 20034f8:	1809883a 	mov	r4,r3
 20034fc:	201a7a80 	call	201a7a8 <OSFlagPend>
						&err);

				IOWR(MEM_NIOS_PI_BASE, 7, 0);
 2003500:	0007883a 	mov	r3,zero
 2003504:	00800834 	movhi	r2,32
 2003508:	10800704 	addi	r2,r2,28
 200350c:	10c00035 	stwio	r3,0(r2)
				activePlayer = ID1;
 2003510:	00800084 	movi	r2,2
 2003514:	e0bfdb15 	stw	r2,-148(fp)
				int *nbr_ball = (int *) OSMboxPend(MailBox6, 0, &err);
 2003518:	d0a78517 	ldw	r2,-25068(gp)
 200351c:	e0ffee04 	addi	r3,fp,-72
 2003520:	180d883a 	mov	r6,r3
 2003524:	000b883a 	mov	r5,zero
 2003528:	1009883a 	mov	r4,r2
 200352c:	201b99c0 	call	201b99c <OSMboxPend>
 2003530:	e0bfed15 	stw	r2,-76(fp)
				number_of_ball = *nbr_ball;
 2003534:	e0bfed17 	ldw	r2,-76(fp)
 2003538:	10800017 	ldw	r2,0(r2)
 200353c:	e0bff015 	stw	r2,-64(fp)
				//DEBUG_PRINT("[Task 3] Hello\n");
				DEBUG_PRINT("[Task 3] Number of ball : %i\n", number_of_ball);
 2003540:	e0bff017 	ldw	r2,-64(fp)
 2003544:	100b883a 	mov	r5,r2
 2003548:	010080b4 	movhi	r4,514
 200354c:	210aca04 	addi	r4,r4,11048
 2003550:	200a0300 	call	200a030 <printf>

				game_finish = number_of_ball == 9;
 2003554:	e0bff017 	ldw	r2,-64(fp)
 2003558:	10800260 	cmpeqi	r2,r2,9
 200355c:	10803fcc 	andi	r2,r2,255
 2003560:	e0bfef15 	stw	r2,-68(fp)
				if (game_finish == 1) {
 2003564:	e0bfef17 	ldw	r2,-68(fp)
 2003568:	10800058 	cmpnei	r2,r2,1
 200356c:	1000081e 	bne	r2,zero,2003590 <task3+0x8f4>
					DEBUG_PRINT("game finish\n");
 2003570:	010080b4 	movhi	r4,514
 2003574:	210ad204 	addi	r4,r4,11080
 2003578:	200a1b00 	call	200a1b0 <puts>
					IOWR(MEM_NIOS_PI_BASE, 14, 1); // game finish
 200357c:	00c00044 	movi	r3,1
 2003580:	00800834 	movhi	r2,32
 2003584:	10800e04 	addi	r2,r2,56
 2003588:	10c00035 	stwio	r3,0(r2)
 200358c:	00000406 	br	20035a0 <task3+0x904>
				} else {
					IOWR(MEM_NIOS_PI_BASE, 14, 0); // game not finish
 2003590:	0007883a 	mov	r3,zero
 2003594:	00800834 	movhi	r2,32
 2003598:	10800e04 	addi	r2,r2,56
 200359c:	10c00035 	stwio	r3,0(r2)
				}
				IOWR(MEM_NIOS_PI_BASE, 13, 1); // turn finish
 20035a0:	00c00044 	movi	r3,1
 20035a4:	00800834 	movhi	r2,32
 20035a8:	10800d04 	addi	r2,r2,52
 20035ac:	10c00035 	stwio	r3,0(r2)

		activePlayer = first_player;
		game_finish = 0;
		DEBUG_PRINT("[Task 3] the game can start\n");
		IOWR(MTL_IP_BASE, 13, 0);
		while (!game_finish && !time_out){
 20035b0:	e0bfef17 	ldw	r2,-68(fp)
 20035b4:	1000021e 	bne	r2,zero,20035c0 <task3+0x924>
 20035b8:	e0bfe017 	ldw	r2,-128(fp)
 20035bc:	103e7b26 	beq	r2,zero,2002fac <task3+0x310>
					IOWR(MEM_NIOS_PI_BASE, 14, 0); // game not finish
				}
				IOWR(MEM_NIOS_PI_BASE, 13, 1); // turn finish
			}
		}
		int a = 0;
 20035c0:	e03ff515 	stw	zero,-44(fp)
		int b = 0;
 20035c4:	e03ff615 	stw	zero,-40(fp)
		int c = 0;
 20035c8:	e03ff715 	stw	zero,-36(fp)
		int d = 0;
 20035cc:	e03ff815 	stw	zero,-32(fp)
		int e = 0;
 20035d0:	e03ff915 	stw	zero,-28(fp)
		int f = game_finish || time_out;
 20035d4:	e0bfef17 	ldw	r2,-68(fp)
 20035d8:	1000021e 	bne	r2,zero,20035e4 <task3+0x948>
 20035dc:	e0bfe017 	ldw	r2,-128(fp)
 20035e0:	10000226 	beq	r2,zero,20035ec <task3+0x950>
 20035e4:	00800044 	movi	r2,1
 20035e8:	00000106 	br	20035f0 <task3+0x954>
 20035ec:	0005883a 	mov	r2,zero
 20035f0:	e0bffa15 	stw	r2,-24(fp)
		OSMboxPost(MailBox4, &a);
 20035f4:	d0a78f17 	ldw	r2,-25028(gp)
 20035f8:	e0fff504 	addi	r3,fp,-44
 20035fc:	180b883a 	mov	r5,r3
 2003600:	1009883a 	mov	r4,r2
 2003604:	201bd3c0 	call	201bd3c <OSMboxPost>
		OSMboxPost(MailBox5, &b);
 2003608:	d0a78917 	ldw	r2,-25052(gp)
 200360c:	e0fff604 	addi	r3,fp,-40
 2003610:	180b883a 	mov	r5,r3
 2003614:	1009883a 	mov	r4,r2
 2003618:	201bd3c0 	call	201bd3c <OSMboxPost>
		OSMboxPost(MailBox7, &f);
 200361c:	d0a79017 	ldw	r2,-25024(gp)
 2003620:	e0fffa04 	addi	r3,fp,-24
 2003624:	180b883a 	mov	r5,r3
 2003628:	1009883a 	mov	r4,r2
 200362c:	201bd3c0 	call	201bd3c <OSMboxPost>
		OSMboxPost(MailBox8, &c);
 2003630:	d0a78e17 	ldw	r2,-25032(gp)
 2003634:	e0fff704 	addi	r3,fp,-36
 2003638:	180b883a 	mov	r5,r3
 200363c:	1009883a 	mov	r4,r2
 2003640:	201bd3c0 	call	201bd3c <OSMboxPost>
		OSMboxPost(MailBox12, &d);
 2003644:	d0a78d17 	ldw	r2,-25036(gp)
 2003648:	e0fff804 	addi	r3,fp,-32
 200364c:	180b883a 	mov	r5,r3
 2003650:	1009883a 	mov	r4,r2
 2003654:	201bd3c0 	call	201bd3c <OSMboxPost>
		OSMboxPost(MailBox13, &e);
 2003658:	d0a78617 	ldw	r2,-25064(gp)
 200365c:	e0fff904 	addi	r3,fp,-28
 2003660:	180b883a 	mov	r5,r3
 2003664:	1009883a 	mov	r4,r2
 2003668:	201bd3c0 	call	201bd3c <OSMboxPost>
	}
 200366c:	003dc406 	br	2002d80 <task3+0xe4>

02003670 <task4>:

}

void task4(void* pdata) {
 2003670:	defff704 	addi	sp,sp,-36
 2003674:	dfc00815 	stw	ra,32(sp)
 2003678:	df000715 	stw	fp,28(sp)
 200367c:	df000704 	addi	fp,sp,28
 2003680:	e13fff15 	stw	r4,-4(fp)

	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 2003684:	008000b4 	movhi	r2,2
 2003688:	e0bffc15 	stw	r2,-16(fp)

	int count = 0;
 200368c:	e03ffa15 	stw	zero,-24(fp)
	int count_old = 0;
 2003690:	e03ffd15 	stw	zero,-12(fp)

	int gesture_detected = 0;
 2003694:	e03ffb15 	stw	zero,-20(fp)

	INT8U err;
	//INT8U opt_task4;

	while (1) {
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4,
 2003698:	d0e78a17 	ldw	r3,-25048(gp)
 200369c:	e0bffe04 	addi	r2,fp,-8
 20036a0:	d8800015 	stw	r2,0(sp)
 20036a4:	000f883a 	mov	r7,zero
 20036a8:	01802084 	movi	r6,130
 20036ac:	01400044 	movi	r5,1
 20036b0:	1809883a 	mov	r4,r3
 20036b4:	201a7a80 	call	201a7a8 <OSFlagPend>
				OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err); // wait for a flag and consume it
		while (!gesture_detected) {
 20036b8:	00001006 	br	20036fc <task4+0x8c>
			count_old = count;
 20036bc:	e0bffa17 	ldw	r2,-24(fp)
 20036c0:	e0bffd15 	stw	r2,-12(fp)
			count = IORD(MTL_controller, 10); // récupère le nombre de doigts présent sur l'écran
 20036c4:	e0bffc17 	ldw	r2,-16(fp)
 20036c8:	10800a04 	addi	r2,r2,40
 20036cc:	10800037 	ldwio	r2,0(r2)
 20036d0:	e0bffa15 	stw	r2,-24(fp)
			if (count == 1 && count_old == 0) {
 20036d4:	e0bffa17 	ldw	r2,-24(fp)
 20036d8:	10800058 	cmpnei	r2,r2,1
 20036dc:	1000071e 	bne	r2,zero,20036fc <task4+0x8c>
 20036e0:	e0bffd17 	ldw	r2,-12(fp)
 20036e4:	1000051e 	bne	r2,zero,20036fc <task4+0x8c>
				DEBUG_PRINT("[Task 4] Player touch the screen\n");
 20036e8:	010080b4 	movhi	r4,514
 20036ec:	210aef04 	addi	r4,r4,11196
 20036f0:	200a1b00 	call	200a1b0 <puts>
				gesture_detected = 1;
 20036f4:	00800044 	movi	r2,1
 20036f8:	e0bffb15 	stw	r2,-20(fp)
	//INT8U opt_task4;

	while (1) {
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4,
				OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err); // wait for a flag and consume it
		while (!gesture_detected) {
 20036fc:	e0bffb17 	ldw	r2,-20(fp)
 2003700:	103fee26 	beq	r2,zero,20036bc <task4+0x4c>
			if (count == 1 && count_old == 0) {
				DEBUG_PRINT("[Task 4] Player touch the screen\n");
				gesture_detected = 1;
			}
		}
		gesture_detected = 0;
 2003704:	e03ffb15 	stw	zero,-20(fp)
		OSFlagPost(StartGameGrp, START_THE_GAME, OS_FLAG_SET, &err);
 2003708:	d0a79417 	ldw	r2,-25008(gp)
 200370c:	e0fffe04 	addi	r3,fp,-8
 2003710:	180f883a 	mov	r7,r3
 2003714:	01800044 	movi	r6,1
 2003718:	01400044 	movi	r5,1
 200371c:	1009883a 	mov	r4,r2
 2003720:	201adc00 	call	201adc0 <OSFlagPost>
		OSTimeDlyHMSM(0, 0, 0, 500);
 2003724:	01c07d04 	movi	r7,500
 2003728:	000d883a 	mov	r6,zero
 200372c:	000b883a 	mov	r5,zero
 2003730:	0009883a 	mov	r4,zero
 2003734:	201fbe00 	call	201fbe0 <OSTimeDlyHMSM>
	}
 2003738:	003fd706 	br	2003698 <task4+0x28>

0200373c <main>:

}

/* The main function creates two task and starts multi-tasking */
int main(void) {
 200373c:	defff804 	addi	sp,sp,-32
 2003740:	dfc00715 	stw	ra,28(sp)
 2003744:	df000615 	stw	fp,24(sp)
 2003748:	df000604 	addi	fp,sp,24
	INT8U err;

	IOWR(LED_BASE,0,1);
 200374c:	00c00044 	movi	r3,1
 2003750:	00800834 	movhi	r2,32
 2003754:	1080c004 	addi	r2,r2,768
 2003758:	10c00035 	stwio	r3,0(r2)

	MailBox1 = OSMboxCreate(NULL);
 200375c:	0009883a 	mov	r4,zero
 2003760:	201b6880 	call	201b688 <OSMboxCreate>
 2003764:	d0a79215 	stw	r2,-25016(gp)
	MailBox2 = OSMboxCreate(NULL);
 2003768:	0009883a 	mov	r4,zero
 200376c:	201b6880 	call	201b688 <OSMboxCreate>
 2003770:	d0a78c15 	stw	r2,-25040(gp)
	MailBox3 = OSMboxCreate(NULL);
 2003774:	0009883a 	mov	r4,zero
 2003778:	201b6880 	call	201b688 <OSMboxCreate>
 200377c:	d0a78715 	stw	r2,-25060(gp)

	MailBox4 = OSMboxCreate(NULL);
 2003780:	0009883a 	mov	r4,zero
 2003784:	201b6880 	call	201b688 <OSMboxCreate>
 2003788:	d0a78f15 	stw	r2,-25028(gp)
	MailBox5 = OSMboxCreate(NULL);
 200378c:	0009883a 	mov	r4,zero
 2003790:	201b6880 	call	201b688 <OSMboxCreate>
 2003794:	d0a78915 	stw	r2,-25052(gp)
	MailBox6 = OSMboxCreate(NULL);
 2003798:	0009883a 	mov	r4,zero
 200379c:	201b6880 	call	201b688 <OSMboxCreate>
 20037a0:	d0a78515 	stw	r2,-25068(gp)

	MailBox7 = OSMboxCreate(NULL);
 20037a4:	0009883a 	mov	r4,zero
 20037a8:	201b6880 	call	201b688 <OSMboxCreate>
 20037ac:	d0a79015 	stw	r2,-25024(gp)
	MailBox8 = OSMboxCreate(NULL);
 20037b0:	0009883a 	mov	r4,zero
 20037b4:	201b6880 	call	201b688 <OSMboxCreate>
 20037b8:	d0a78e15 	stw	r2,-25032(gp)
	MailBox9 = OSMboxCreate(NULL);
 20037bc:	0009883a 	mov	r4,zero
 20037c0:	201b6880 	call	201b688 <OSMboxCreate>
 20037c4:	d0a78415 	stw	r2,-25072(gp)

	MailBox10 = OSMboxCreate(NULL);
 20037c8:	0009883a 	mov	r4,zero
 20037cc:	201b6880 	call	201b688 <OSMboxCreate>
 20037d0:	d0a78b15 	stw	r2,-25044(gp)
	MailBox11 = OSMboxCreate(NULL);
 20037d4:	0009883a 	mov	r4,zero
 20037d8:	201b6880 	call	201b688 <OSMboxCreate>
 20037dc:	d0a79115 	stw	r2,-25020(gp)
	MailBox12 = OSMboxCreate(NULL);
 20037e0:	0009883a 	mov	r4,zero
 20037e4:	201b6880 	call	201b688 <OSMboxCreate>
 20037e8:	d0a78d15 	stw	r2,-25036(gp)
	MailBox13 = OSMboxCreate(NULL);
 20037ec:	0009883a 	mov	r4,zero
 20037f0:	201b6880 	call	201b688 <OSMboxCreate>
 20037f4:	d0a78615 	stw	r2,-25064(gp)

	isActiveFlagGrp = OSFlagCreate(0, &err);
 20037f8:	e17fff04 	addi	r5,fp,-4
 20037fc:	0009883a 	mov	r4,zero
 2003800:	201a1e40 	call	201a1e4 <OSFlagCreate>
 2003804:	d0a79315 	stw	r2,-25012(gp)
	AnimationFlagGrp = OSFlagCreate(0, &err);
 2003808:	e17fff04 	addi	r5,fp,-4
 200380c:	0009883a 	mov	r4,zero
 2003810:	201a1e40 	call	201a1e4 <OSFlagCreate>
 2003814:	d0a78815 	stw	r2,-25056(gp)
	ActivateTask4Grp = OSFlagCreate(0, &err);
 2003818:	e17fff04 	addi	r5,fp,-4
 200381c:	0009883a 	mov	r4,zero
 2003820:	201a1e40 	call	201a1e4 <OSFlagCreate>
 2003824:	d0a78a15 	stw	r2,-25048(gp)
	StartGameGrp = OSFlagCreate(0, &err);
 2003828:	e17fff04 	addi	r5,fp,-4
 200382c:	0009883a 	mov	r4,zero
 2003830:	201a1e40 	call	201a1e4 <OSFlagCreate>
 2003834:	d0a79415 	stw	r2,-25008(gp)

	accel_spi = alt_up_accelerometer_spi_open_dev(accel_name);
 2003838:	d0a00017 	ldw	r2,-32768(gp)
 200383c:	1009883a 	mov	r4,r2
 2003840:	2020eb00 	call	2020eb0 <alt_up_accelerometer_spi_open_dev>
 2003844:	d0a78315 	stw	r2,-25076(gp)
	if (accel_spi == NULL) {
 2003848:	d0a78317 	ldw	r2,-25076(gp)
 200384c:	1000031e 	bne	r2,zero,200385c <main+0x120>
		printf("Accelerometer device not found.\n");
 2003850:	010080b4 	movhi	r4,514
 2003854:	210af804 	addi	r4,r4,11232
 2003858:	200a1b00 	call	200a1b0 <puts>
	}

	OSTaskCreateExt(task1,
 200385c:	d8000415 	stw	zero,16(sp)
 2003860:	d8000315 	stw	zero,12(sp)
 2003864:	00820004 	movi	r2,2048
 2003868:	d8800215 	stw	r2,8(sp)
 200386c:	008080b4 	movhi	r2,514
 2003870:	109bc304 	addi	r2,r2,28428
 2003874:	d8800115 	stw	r2,4(sp)
 2003878:	00800044 	movi	r2,1
 200387c:	d8800015 	stw	r2,0(sp)
 2003880:	01c00044 	movi	r7,1
 2003884:	018080f4 	movhi	r6,515
 2003888:	31a3c204 	addi	r6,r6,-28920
 200388c:	000b883a 	mov	r5,zero
 2003890:	01008034 	movhi	r4,512
 2003894:	2100f904 	addi	r4,r4,996
 2003898:	201ea0c0 	call	201ea0c <OSTaskCreateExt>
	TASK1_PRIORITY,
	TASK1_PRIORITY, task1_stk,
	TASK_STACKSIZE,
	NULL, 0);

	OSTaskCreateExt(task2,
 200389c:	d8000415 	stw	zero,16(sp)
 20038a0:	d8000315 	stw	zero,12(sp)
 20038a4:	00820004 	movi	r2,2048
 20038a8:	d8800215 	stw	r2,8(sp)
 20038ac:	008080f4 	movhi	r2,515
 20038b0:	10abc304 	addi	r2,r2,-20724
 20038b4:	d8800115 	stw	r2,4(sp)
 20038b8:	00800084 	movi	r2,2
 20038bc:	d8800015 	stw	r2,0(sp)
 20038c0:	01c00084 	movi	r7,2
 20038c4:	018080f4 	movhi	r6,515
 20038c8:	31b3c204 	addi	r6,r6,-12536
 20038cc:	000b883a 	mov	r5,zero
 20038d0:	01008034 	movhi	r4,512
 20038d4:	2101e904 	addi	r4,r4,1956
 20038d8:	201ea0c0 	call	201ea0c <OSTaskCreateExt>
	NULL, (void *) &task2_stk[TASK_STACKSIZE - 1],
	TASK2_PRIORITY,
	TASK2_PRIORITY, task2_stk,
	TASK_STACKSIZE,
	NULL, 0);
	OSTaskCreateExt(task3,
 20038dc:	d8000415 	stw	zero,16(sp)
 20038e0:	d8000315 	stw	zero,12(sp)
 20038e4:	00820004 	movi	r2,2048
 20038e8:	d8800215 	stw	r2,8(sp)
 20038ec:	008080f4 	movhi	r2,515
 20038f0:	10b3c304 	addi	r2,r2,-12532
 20038f4:	d8800115 	stw	r2,4(sp)
 20038f8:	008000c4 	movi	r2,3
 20038fc:	d8800015 	stw	r2,0(sp)
 2003900:	01c000c4 	movi	r7,3
 2003904:	018080f4 	movhi	r6,515
 2003908:	31bbc204 	addi	r6,r6,-4344
 200390c:	000b883a 	mov	r5,zero
 2003910:	01008034 	movhi	r4,512
 2003914:	210b2704 	addi	r4,r4,11420
 2003918:	201ea0c0 	call	201ea0c <OSTaskCreateExt>
	NULL, (void *) &task3_stk[TASK_STACKSIZE - 1],
	TASK3_PRIORITY,
	TASK3_PRIORITY, task3_stk,
	TASK_STACKSIZE,
	NULL, 0);
	OSTaskCreateExt(task4,
 200391c:	d8000415 	stw	zero,16(sp)
 2003920:	d8000315 	stw	zero,12(sp)
 2003924:	00820004 	movi	r2,2048
 2003928:	d8800215 	stw	r2,8(sp)
 200392c:	008080f4 	movhi	r2,515
 2003930:	10a3c304 	addi	r2,r2,-28916
 2003934:	d8800115 	stw	r2,4(sp)
 2003938:	00800104 	movi	r2,4
 200393c:	d8800015 	stw	r2,0(sp)
 2003940:	01c00104 	movi	r7,4
 2003944:	018080f4 	movhi	r6,515
 2003948:	31abc204 	addi	r6,r6,-20728
 200394c:	000b883a 	mov	r5,zero
 2003950:	01008034 	movhi	r4,512
 2003954:	210d9c04 	addi	r4,r4,13936
 2003958:	201ea0c0 	call	201ea0c <OSTaskCreateExt>
	TASK4_PRIORITY,
	TASK4_PRIORITY, task4_stk,
	TASK_STACKSIZE,
	NULL, 0);

	OSStart();
 200395c:	20188ac0 	call	20188ac <OSStart>
	return 0;
 2003960:	0005883a 	mov	r2,zero
}
 2003964:	e037883a 	mov	sp,fp
 2003968:	dfc00117 	ldw	ra,4(sp)
 200396c:	df000017 	ldw	fp,0(sp)
 2003970:	dec00204 	addi	sp,sp,8
 2003974:	f800283a 	ret

02003978 <whole_collide>:
#include "physics.h"
#include <stdio.h>

int whole_list [6][2]={{86,63},{446,63},{806,63},{86,463},{446,463},{806,463}};

int whole_collide(float ball [2], float velocity [2]){
 2003978:	defff604 	addi	sp,sp,-40
 200397c:	dfc00915 	stw	ra,36(sp)
 2003980:	df000815 	stw	fp,32(sp)
 2003984:	df000804 	addi	fp,sp,32
 2003988:	e13ffe15 	stw	r4,-8(fp)
 200398c:	e17fff15 	stw	r5,-4(fp)
	float x = ball[0]+velocity[0];
 2003990:	e0bffe17 	ldw	r2,-8(fp)
 2003994:	10c00017 	ldw	r3,0(r2)
 2003998:	e13fff17 	ldw	r4,-4(fp)
 200399c:	20800017 	ldw	r2,0(r4)
 20039a0:	1885ff72 	custom	253,r2,r3,r2
 20039a4:	e0bffa15 	stw	r2,-24(fp)
	float y = ball[1]+velocity[1];
 20039a8:	e0bffe17 	ldw	r2,-8(fp)
 20039ac:	10800104 	addi	r2,r2,4
 20039b0:	10c00017 	ldw	r3,0(r2)
 20039b4:	e0bfff17 	ldw	r2,-4(fp)
 20039b8:	11000104 	addi	r4,r2,4
 20039bc:	20800017 	ldw	r2,0(r4)
 20039c0:	1885ff72 	custom	253,r2,r3,r2
 20039c4:	e0bffb15 	stw	r2,-20(fp)

	int collision = 0;
 20039c8:	e03ff815 	stw	zero,-32(fp)
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 20039cc:	e03ff915 	stw	zero,-28(fp)
 20039d0:	00003d06 	br	2003ac8 <whole_collide+0x150>
		float dx = whole_list[cnt][0]-x;
 20039d4:	008080b4 	movhi	r2,514
 20039d8:	108d3404 	addi	r2,r2,13520
 20039dc:	e0fff917 	ldw	r3,-28(fp)
 20039e0:	180690fa 	slli	r3,r3,3
 20039e4:	10c5883a 	add	r2,r2,r3
 20039e8:	10800017 	ldw	r2,0(r2)
 20039ec:	1007feb2 	custom	250,r3,r2,zero
 20039f0:	e0bffa17 	ldw	r2,-24(fp)
 20039f4:	1885ffb2 	custom	254,r2,r3,r2
 20039f8:	e0bffc15 	stw	r2,-16(fp)
		float dy = whole_list[cnt][1]-y;
 20039fc:	008080b4 	movhi	r2,514
 2003a00:	108d3404 	addi	r2,r2,13520
 2003a04:	e0fff917 	ldw	r3,-28(fp)
 2003a08:	180690fa 	slli	r3,r3,3
 2003a0c:	10c5883a 	add	r2,r2,r3
 2003a10:	10800104 	addi	r2,r2,4
 2003a14:	10800017 	ldw	r2,0(r2)
 2003a18:	1007feb2 	custom	250,r3,r2,zero
 2003a1c:	e0bffb17 	ldw	r2,-20(fp)
 2003a20:	1885ffb2 	custom	254,r2,r3,r2
 2003a24:	e0bffd15 	stw	r2,-12(fp)

		collision = collision || (dx*dx+dy*dy <= ((SIZE+WHOLE_SIZE)*(SIZE+WHOLE_SIZE)*0.85));
 2003a28:	e0bff817 	ldw	r2,-32(fp)
 2003a2c:	1000131e 	bne	r2,zero,2003a7c <whole_collide+0x104>
 2003a30:	e0fffc17 	ldw	r3,-16(fp)
 2003a34:	e0bffc17 	ldw	r2,-16(fp)
 2003a38:	1887ff32 	custom	252,r3,r3,r2
 2003a3c:	e13ffd17 	ldw	r4,-12(fp)
 2003a40:	e0bffd17 	ldw	r2,-12(fp)
 2003a44:	2085ff32 	custom	252,r2,r4,r2
 2003a48:	1885ff72 	custom	253,r2,r3,r2
 2003a4c:	1009883a 	mov	r4,r2
 2003a50:	20099440 	call	2009944 <__extendsfdf2>
 2003a54:	1011883a 	mov	r8,r2
 2003a58:	1813883a 	mov	r9,r3
 2003a5c:	01b33374 	movhi	r6,52429
 2003a60:	31b33344 	addi	r6,r6,-13107
 2003a64:	01d021b4 	movhi	r7,16518
 2003a68:	39d5b304 	addi	r7,r7,22220
 2003a6c:	4009883a 	mov	r4,r8
 2003a70:	480b883a 	mov	r5,r9
 2003a74:	200883c0 	call	200883c <__ledf2>
 2003a78:	00800216 	blt	zero,r2,2003a84 <whole_collide+0x10c>
 2003a7c:	00800044 	movi	r2,1
 2003a80:	00000106 	br	2003a88 <whole_collide+0x110>
 2003a84:	0005883a 	mov	r2,zero
 2003a88:	e0bff815 	stw	r2,-32(fp)

		if (collision){
 2003a8c:	e0bff817 	ldw	r2,-32(fp)
 2003a90:	10000a26 	beq	r2,zero,2003abc <whole_collide+0x144>
			ball[0]=0;
 2003a94:	e0bffe17 	ldw	r2,-8(fp)
 2003a98:	10000015 	stw	zero,0(r2)
			ball[1]=0;
 2003a9c:	e0bffe17 	ldw	r2,-8(fp)
 2003aa0:	10800104 	addi	r2,r2,4
 2003aa4:	10000015 	stw	zero,0(r2)
			velocity[0]=0;
 2003aa8:	e0bfff17 	ldw	r2,-4(fp)
 2003aac:	10000015 	stw	zero,0(r2)
			velocity[1]=0;
 2003ab0:	e0bfff17 	ldw	r2,-4(fp)
 2003ab4:	10800104 	addi	r2,r2,4
 2003ab8:	10000015 	stw	zero,0(r2)
	float y = ball[1]+velocity[1];

	int collision = 0;
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 2003abc:	e0bff917 	ldw	r2,-28(fp)
 2003ac0:	10800044 	addi	r2,r2,1
 2003ac4:	e0bff915 	stw	r2,-28(fp)
 2003ac8:	e0bff917 	ldw	r2,-28(fp)
 2003acc:	10800190 	cmplti	r2,r2,6
 2003ad0:	103fc01e 	bne	r2,zero,20039d4 <whole_collide+0x5c>
			ball[1]=0;
			velocity[0]=0;
			velocity[1]=0;
		}
	}
	return collision;
 2003ad4:	e0bff817 	ldw	r2,-32(fp)
}
 2003ad8:	e037883a 	mov	sp,fp
 2003adc:	dfc00117 	ldw	ra,4(sp)
 2003ae0:	df000017 	ldw	fp,0(sp)
 2003ae4:	dec00204 	addi	sp,sp,8
 2003ae8:	f800283a 	ret

02003aec <borderCollide>:


void borderCollide(float* ball, int* border_collision, float* velocity)
{
 2003aec:	defffa04 	addi	sp,sp,-24
 2003af0:	df000515 	stw	fp,20(sp)
 2003af4:	df000504 	addi	fp,sp,20
 2003af8:	e13ffd15 	stw	r4,-12(fp)
 2003afc:	e17ffe15 	stw	r5,-8(fp)
 2003b00:	e1bfff15 	stw	r6,-4(fp)
	int collide_x = 0;
 2003b04:	e03ffb15 	stw	zero,-20(fp)
	int collide_y = 0;
 2003b08:	e03ffc15 	stw	zero,-16(fp)
	collide_x = (ball[0] < BORDER_X + BORDER + SIZE || ball[0] > (MAX_X + BORDER_X)-(BORDER + SIZE));
 2003b0c:	e0bffd17 	ldw	r2,-12(fp)
 2003b10:	10c00017 	ldw	r3,0(r2)
 2003b14:	0090b1b4 	movhi	r2,17094
 2003b18:	1885f9f2 	custom	231,r2,r3,r2
 2003b1c:	1000061e 	bne	r2,zero,2003b38 <borderCollide+0x4c>
 2003b20:	e0bffd17 	ldw	r2,-12(fp)
 2003b24:	10c00017 	ldw	r3,0(r2)
 2003b28:	009111b4 	movhi	r2,17478
 2003b2c:	10900004 	addi	r2,r2,16384
 2003b30:	1885f972 	custom	229,r2,r3,r2
 2003b34:	10000226 	beq	r2,zero,2003b40 <borderCollide+0x54>
 2003b38:	00800044 	movi	r2,1
 2003b3c:	00000106 	br	2003b44 <borderCollide+0x58>
 2003b40:	0005883a 	mov	r2,zero
 2003b44:	e0bffb15 	stw	r2,-20(fp)
	collide_y = (ball[1] < BORDER_Y + BORDER + SIZE || ball[1] > (MAX_Y + BORDER_Y)-(BORDER + SIZE));
 2003b48:	e0bffd17 	ldw	r2,-12(fp)
 2003b4c:	10800104 	addi	r2,r2,4
 2003b50:	10c00017 	ldw	r3,0(r2)
 2003b54:	0090a634 	movhi	r2,17048
 2003b58:	1885f9f2 	custom	231,r2,r3,r2
 2003b5c:	1000061e 	bne	r2,zero,2003b78 <borderCollide+0x8c>
 2003b60:	e0bffd17 	ldw	r2,-12(fp)
 2003b64:	10800104 	addi	r2,r2,4
 2003b68:	10c00017 	ldw	r3,0(r2)
 2003b6c:	0090f874 	movhi	r2,17377
 2003b70:	1885f972 	custom	229,r2,r3,r2
 2003b74:	10000226 	beq	r2,zero,2003b80 <borderCollide+0x94>
 2003b78:	00800044 	movi	r2,1
 2003b7c:	00000106 	br	2003b84 <borderCollide+0x98>
 2003b80:	0005883a 	mov	r2,zero
 2003b84:	e0bffc15 	stw	r2,-16(fp)
	if(!border_collision[0] && collide_x)
 2003b88:	e0bffe17 	ldw	r2,-8(fp)
 2003b8c:	10800017 	ldw	r2,0(r2)
 2003b90:	1000081e 	bne	r2,zero,2003bb4 <borderCollide+0xc8>
 2003b94:	e0bffb17 	ldw	r2,-20(fp)
 2003b98:	10000626 	beq	r2,zero,2003bb4 <borderCollide+0xc8>
	{
		velocity[0] = 0 - velocity[0];
 2003b9c:	e0ffff17 	ldw	r3,-4(fp)
 2003ba0:	18800017 	ldw	r2,0(r3)
 2003ba4:	0007883a 	mov	r3,zero
 2003ba8:	1887ffb2 	custom	254,r3,r3,r2
 2003bac:	e0bfff17 	ldw	r2,-4(fp)
 2003bb0:	10c00015 	stw	r3,0(r2)
	}
	if(!border_collision[2] && collide_y)
 2003bb4:	e0bffe17 	ldw	r2,-8(fp)
 2003bb8:	10800204 	addi	r2,r2,8
 2003bbc:	10800017 	ldw	r2,0(r2)
 2003bc0:	10000a1e 	bne	r2,zero,2003bec <borderCollide+0x100>
 2003bc4:	e0bffc17 	ldw	r2,-16(fp)
 2003bc8:	10000826 	beq	r2,zero,2003bec <borderCollide+0x100>
	{
		velocity[1] = 0 - velocity[1];
 2003bcc:	e0bfff17 	ldw	r2,-4(fp)
 2003bd0:	10800104 	addi	r2,r2,4
 2003bd4:	e0ffff17 	ldw	r3,-4(fp)
 2003bd8:	19000104 	addi	r4,r3,4
 2003bdc:	20c00017 	ldw	r3,0(r4)
 2003be0:	0009883a 	mov	r4,zero
 2003be4:	20c7ffb2 	custom	254,r3,r4,r3
 2003be8:	10c00015 	stw	r3,0(r2)
	}

	border_collision[0] = border_collision[1];
 2003bec:	e0bffe17 	ldw	r2,-8(fp)
 2003bf0:	10c00117 	ldw	r3,4(r2)
 2003bf4:	e0bffe17 	ldw	r2,-8(fp)
 2003bf8:	10c00015 	stw	r3,0(r2)
	border_collision[1] = collide_x;
 2003bfc:	e0bffe17 	ldw	r2,-8(fp)
 2003c00:	10800104 	addi	r2,r2,4
 2003c04:	e0fffb17 	ldw	r3,-20(fp)
 2003c08:	10c00015 	stw	r3,0(r2)
	border_collision[2] = border_collision[3];
 2003c0c:	e0bffe17 	ldw	r2,-8(fp)
 2003c10:	10800204 	addi	r2,r2,8
 2003c14:	e0fffe17 	ldw	r3,-8(fp)
 2003c18:	18c00317 	ldw	r3,12(r3)
 2003c1c:	10c00015 	stw	r3,0(r2)
	border_collision[3] = collide_y;
 2003c20:	e0bffe17 	ldw	r2,-8(fp)
 2003c24:	10800304 	addi	r2,r2,12
 2003c28:	e0fffc17 	ldw	r3,-16(fp)
 2003c2c:	10c00015 	stw	r3,0(r2)
}
 2003c30:	0001883a 	nop
 2003c34:	e037883a 	mov	sp,fp
 2003c38:	df000017 	ldw	fp,0(sp)
 2003c3c:	dec00104 	addi	sp,sp,4
 2003c40:	f800283a 	ret

02003c44 <momentum>:

float momentum (float* velocity){
 2003c44:	defffd04 	addi	sp,sp,-12
 2003c48:	df000215 	stw	fp,8(sp)
 2003c4c:	df000204 	addi	fp,sp,8
 2003c50:	e13fff15 	stw	r4,-4(fp)
	float result=velocity[0]*velocity[0]+velocity[1]*velocity[1];
 2003c54:	e0bfff17 	ldw	r2,-4(fp)
 2003c58:	10c00017 	ldw	r3,0(r2)
 2003c5c:	e13fff17 	ldw	r4,-4(fp)
 2003c60:	20800017 	ldw	r2,0(r4)
 2003c64:	1887ff32 	custom	252,r3,r3,r2
 2003c68:	e0bfff17 	ldw	r2,-4(fp)
 2003c6c:	10800104 	addi	r2,r2,4
 2003c70:	11000017 	ldw	r4,0(r2)
 2003c74:	e0bfff17 	ldw	r2,-4(fp)
 2003c78:	11400104 	addi	r5,r2,4
 2003c7c:	28800017 	ldw	r2,0(r5)
 2003c80:	2085ff32 	custom	252,r2,r4,r2
 2003c84:	1885ff72 	custom	253,r2,r3,r2
 2003c88:	e0bffe15 	stw	r2,-8(fp)
	return result;
 2003c8c:	e0bffe17 	ldw	r2,-8(fp)
 2003c90:	1007883a 	mov	r3,r2
}
 2003c94:	1805883a 	mov	r2,r3
 2003c98:	e037883a 	mov	sp,fp
 2003c9c:	df000017 	ldw	fp,0(sp)
 2003ca0:	dec00104 	addi	sp,sp,4
 2003ca4:	f800283a 	ret

02003ca8 <detect_collide>:

void detect_collide(float* ball1, float* ball2, int* collision){
 2003ca8:	defff604 	addi	sp,sp,-40
 2003cac:	df000915 	stw	fp,36(sp)
 2003cb0:	df000904 	addi	fp,sp,36
 2003cb4:	e13ffd15 	stw	r4,-12(fp)
 2003cb8:	e17ffe15 	stw	r5,-8(fp)
 2003cbc:	e1bfff15 	stw	r6,-4(fp)
	collision[0]=collision[1];
 2003cc0:	e0bfff17 	ldw	r2,-4(fp)
 2003cc4:	10c00117 	ldw	r3,4(r2)
 2003cc8:	e0bfff17 	ldw	r2,-4(fp)
 2003ccc:	10c00015 	stw	r3,0(r2)

	float x1,y1,x2,y2,dx,dy;
	x1=ball1[0];
 2003cd0:	e0bffd17 	ldw	r2,-12(fp)
 2003cd4:	10800017 	ldw	r2,0(r2)
 2003cd8:	e0bff715 	stw	r2,-36(fp)
	x2=ball2[0];
 2003cdc:	e0bffe17 	ldw	r2,-8(fp)
 2003ce0:	10800017 	ldw	r2,0(r2)
 2003ce4:	e0bff815 	stw	r2,-32(fp)

	y1=ball1[1];
 2003ce8:	e0bffd17 	ldw	r2,-12(fp)
 2003cec:	10800117 	ldw	r2,4(r2)
 2003cf0:	e0bff915 	stw	r2,-28(fp)
	y2=ball2[1];
 2003cf4:	e0bffe17 	ldw	r2,-8(fp)
 2003cf8:	10800117 	ldw	r2,4(r2)
 2003cfc:	e0bffa15 	stw	r2,-24(fp)

	dx=x2-x1;
 2003d00:	e0fff817 	ldw	r3,-32(fp)
 2003d04:	e0bff717 	ldw	r2,-36(fp)
 2003d08:	1885ffb2 	custom	254,r2,r3,r2
 2003d0c:	e0bffb15 	stw	r2,-20(fp)
	dy=y2-y1;
 2003d10:	e0fffa17 	ldw	r3,-24(fp)
 2003d14:	e0bff917 	ldw	r2,-28(fp)
 2003d18:	1885ffb2 	custom	254,r2,r3,r2
 2003d1c:	e0bffc15 	stw	r2,-16(fp)
	collision[1]=dx*dx + dy*dy <= 4*SIZE*SIZE;
 2003d20:	e0bfff17 	ldw	r2,-4(fp)
 2003d24:	10800104 	addi	r2,r2,4
 2003d28:	e13ffb17 	ldw	r4,-20(fp)
 2003d2c:	e0fffb17 	ldw	r3,-20(fp)
 2003d30:	20c9ff32 	custom	252,r4,r4,r3
 2003d34:	e17ffc17 	ldw	r5,-16(fp)
 2003d38:	e0fffc17 	ldw	r3,-16(fp)
 2003d3c:	28c7ff32 	custom	252,r3,r5,r3
 2003d40:	20c9ff72 	custom	253,r4,r4,r3
 2003d44:	00d10a74 	movhi	r3,17449
 2003d48:	20c7f9b2 	custom	230,r3,r4,r3
 2003d4c:	18c03fcc 	andi	r3,r3,255
 2003d50:	10c00015 	stw	r3,0(r2)
}
 2003d54:	0001883a 	nop
 2003d58:	e037883a 	mov	sp,fp
 2003d5c:	df000017 	ldw	fp,0(sp)
 2003d60:	dec00104 	addi	sp,sp,4
 2003d64:	f800283a 	ret

02003d68 <collide_calc>:


void collide_calc(float* ball1, float* ball2,float* velocity1, float* velocity2, int* collision,int id){
 2003d68:	deffeb04 	addi	sp,sp,-84
 2003d6c:	dfc01415 	stw	ra,80(sp)
 2003d70:	df001315 	stw	fp,76(sp)
 2003d74:	dc401215 	stw	r17,72(sp)
 2003d78:	dc001115 	stw	r16,68(sp)
 2003d7c:	df001304 	addi	fp,sp,76
 2003d80:	e13ffa15 	stw	r4,-24(fp)
 2003d84:	e17ffb15 	stw	r5,-20(fp)
 2003d88:	e1bffc15 	stw	r6,-16(fp)
 2003d8c:	e1fffd15 	stw	r7,-12(fp)
	if ((!collision[0] && collision[1]) || (collision[0] && collision[1] && ball1[0]!=0 && ball1[1] && ball2[0] && ball2[1])){
 2003d90:	e0800217 	ldw	r2,8(fp)
 2003d94:	10800017 	ldw	r2,0(r2)
 2003d98:	1000041e 	bne	r2,zero,2003dac <collide_calc+0x44>
 2003d9c:	e0800217 	ldw	r2,8(fp)
 2003da0:	10800104 	addi	r2,r2,4
 2003da4:	10800017 	ldw	r2,0(r2)
 2003da8:	10001d1e 	bne	r2,zero,2003e20 <collide_calc+0xb8>
 2003dac:	e0800217 	ldw	r2,8(fp)
 2003db0:	10800017 	ldw	r2,0(r2)
 2003db4:	1000c626 	beq	r2,zero,20040d0 <collide_calc+0x368>
 2003db8:	e0800217 	ldw	r2,8(fp)
 2003dbc:	10800104 	addi	r2,r2,4
 2003dc0:	10800017 	ldw	r2,0(r2)
 2003dc4:	1000c226 	beq	r2,zero,20040d0 <collide_calc+0x368>
 2003dc8:	e0fffa17 	ldw	r3,-24(fp)
 2003dcc:	18800017 	ldw	r2,0(r3)
 2003dd0:	0007883a 	mov	r3,zero
 2003dd4:	10c5f8f2 	custom	227,r2,r2,r3
 2003dd8:	1000bd1e 	bne	r2,zero,20040d0 <collide_calc+0x368>
 2003ddc:	e0bffa17 	ldw	r2,-24(fp)
 2003de0:	10c00104 	addi	r3,r2,4
 2003de4:	18800017 	ldw	r2,0(r3)
 2003de8:	0007883a 	mov	r3,zero
 2003dec:	10c5f8f2 	custom	227,r2,r2,r3
 2003df0:	1000b71e 	bne	r2,zero,20040d0 <collide_calc+0x368>
 2003df4:	e0fffb17 	ldw	r3,-20(fp)
 2003df8:	18800017 	ldw	r2,0(r3)
 2003dfc:	0007883a 	mov	r3,zero
 2003e00:	10c5f8f2 	custom	227,r2,r2,r3
 2003e04:	1000b21e 	bne	r2,zero,20040d0 <collide_calc+0x368>
 2003e08:	e0bffb17 	ldw	r2,-20(fp)
 2003e0c:	10c00104 	addi	r3,r2,4
 2003e10:	18800017 	ldw	r2,0(r3)
 2003e14:	0007883a 	mov	r3,zero
 2003e18:	10c5f8f2 	custom	227,r2,r2,r3
 2003e1c:	1000ac1e 	bne	r2,zero,20040d0 <collide_calc+0x368>
		int sign;
		float v21 [2];
		float a;
		float dv;

		x1=ball1[0];
 2003e20:	e0bffa17 	ldw	r2,-24(fp)
 2003e24:	10800017 	ldw	r2,0(r2)
 2003e28:	e0bfef15 	stw	r2,-68(fp)
		x2=ball2[0];
 2003e2c:	e0bffb17 	ldw	r2,-20(fp)
 2003e30:	10800017 	ldw	r2,0(r2)
 2003e34:	e0bff015 	stw	r2,-64(fp)
		y1=ball1[1];
 2003e38:	e0bffa17 	ldw	r2,-24(fp)
 2003e3c:	10800117 	ldw	r2,4(r2)
 2003e40:	e0bff115 	stw	r2,-60(fp)
		y2=ball2[1];
 2003e44:	e0bffb17 	ldw	r2,-20(fp)
 2003e48:	10800117 	ldw	r2,4(r2)
 2003e4c:	e0bff215 	stw	r2,-56(fp)

		//m1=1.0;
		//m2=1.0;
		m21 = 1.0; // m1 = 1.0 / m2 = 1.0
 2003e50:	008fe034 	movhi	r2,16256
 2003e54:	e0bff315 	stw	r2,-52(fp)
		x21 = x2-x1;
 2003e58:	e0fff017 	ldw	r3,-64(fp)
 2003e5c:	e0bfef17 	ldw	r2,-68(fp)
 2003e60:	1885ffb2 	custom	254,r2,r3,r2
 2003e64:	e0bfed15 	stw	r2,-76(fp)
		y21 = y2-y1;
 2003e68:	e0fff217 	ldw	r3,-56(fp)
 2003e6c:	e0bff117 	ldw	r2,-60(fp)
 2003e70:	1885ffb2 	custom	254,r2,r3,r2
 2003e74:	e0bff415 	stw	r2,-48(fp)
		v21[0]=velocity2[0]-velocity1[0];
 2003e78:	e0bffd17 	ldw	r2,-12(fp)
 2003e7c:	10c00017 	ldw	r3,0(r2)
 2003e80:	e13ffc17 	ldw	r4,-16(fp)
 2003e84:	20800017 	ldw	r2,0(r4)
 2003e88:	1885ffb2 	custom	254,r2,r3,r2
 2003e8c:	e0bff815 	stw	r2,-32(fp)
		v21[1]=velocity2[1]-velocity1[1];
 2003e90:	e0bffd17 	ldw	r2,-12(fp)
 2003e94:	10800104 	addi	r2,r2,4
 2003e98:	10c00017 	ldw	r3,0(r2)
 2003e9c:	e0bffc17 	ldw	r2,-16(fp)
 2003ea0:	11000104 	addi	r4,r2,4
 2003ea4:	20800017 	ldw	r2,0(r4)
 2003ea8:	1885ffb2 	custom	254,r2,r3,r2
 2003eac:	e0bff915 	stw	r2,-28(fp)

		if ((v21[0]*x21 + v21[1]*y21) >=0){
 2003eb0:	e0fff817 	ldw	r3,-32(fp)
 2003eb4:	e0bfed17 	ldw	r2,-76(fp)
 2003eb8:	1887ff32 	custom	252,r3,r3,r2
 2003ebc:	e13ff917 	ldw	r4,-28(fp)
 2003ec0:	e0bff417 	ldw	r2,-48(fp)
 2003ec4:	2085ff32 	custom	252,r2,r4,r2
 2003ec8:	1885ff72 	custom	253,r2,r3,r2
 2003ecc:	0007883a 	mov	r3,zero
 2003ed0:	10c5f932 	custom	228,r2,r2,r3
 2003ed4:	10007e1e 	bne	r2,zero,20040d0 <collide_calc+0x368>
			//DEBUG_PRINT("error in collision\n");
		}
		else{
			fy21=0.000001*fabs(y21);
 2003ed8:	e0bff417 	ldw	r2,-48(fp)
 2003edc:	1005f832 	custom	224,r2,r2,zero
 2003ee0:	1009883a 	mov	r4,r2
 2003ee4:	20099440 	call	2009944 <__extendsfdf2>
 2003ee8:	1011883a 	mov	r8,r2
 2003eec:	1813883a 	mov	r9,r3
 2003ef0:	01a82db4 	movhi	r6,41142
 2003ef4:	31bb6344 	addi	r6,r6,-4723
 2003ef8:	01cfac74 	movhi	r7,16049
 2003efc:	39f1bdc4 	addi	r7,r7,-14601
 2003f00:	4009883a 	mov	r4,r8
 2003f04:	480b883a 	mov	r5,r9
 2003f08:	20089300 	call	2008930 <__muldf3>
 2003f0c:	1009883a 	mov	r4,r2
 2003f10:	180b883a 	mov	r5,r3
 2003f14:	2005883a 	mov	r2,r4
 2003f18:	2807883a 	mov	r3,r5
 2003f1c:	1009883a 	mov	r4,r2
 2003f20:	180b883a 	mov	r5,r3
 2003f24:	2009a540 	call	2009a54 <__truncdfsf2>
 2003f28:	1007883a 	mov	r3,r2
 2003f2c:	e0fff515 	stw	r3,-44(fp)
			if(fabs(x21) < fy21){
 2003f30:	e0bfed17 	ldw	r2,-76(fp)
 2003f34:	1007f832 	custom	224,r3,r2,zero
 2003f38:	e0bff517 	ldw	r2,-44(fp)
 2003f3c:	1885f9f2 	custom	231,r2,r3,r2
 2003f40:	10000e26 	beq	r2,zero,2003f7c <collide_calc+0x214>
				if (x21<0) sign = -1;
 2003f44:	e0bfed17 	ldw	r2,-76(fp)
 2003f48:	0007883a 	mov	r3,zero
 2003f4c:	10c5f9f2 	custom	231,r2,r2,r3
 2003f50:	10000326 	beq	r2,zero,2003f60 <collide_calc+0x1f8>
 2003f54:	00bfffc4 	movi	r2,-1
 2003f58:	e0bfee15 	stw	r2,-72(fp)
 2003f5c:	00000206 	br	2003f68 <collide_calc+0x200>
				else sign=1;
 2003f60:	00800044 	movi	r2,1
 2003f64:	e0bfee15 	stw	r2,-72(fp)
				x21=fy21*sign;
 2003f68:	e0bfee17 	ldw	r2,-72(fp)
 2003f6c:	1007feb2 	custom	250,r3,r2,zero
 2003f70:	e0bff517 	ldw	r2,-44(fp)
 2003f74:	1885ff32 	custom	252,r2,r3,r2
 2003f78:	e0bfed15 	stw	r2,-76(fp)
			}
			a=y21/x21;
 2003f7c:	e0fff417 	ldw	r3,-48(fp)
 2003f80:	e0bfed17 	ldw	r2,-76(fp)
 2003f84:	1885fff2 	custom	255,r2,r3,r2
 2003f88:	e0bff615 	stw	r2,-40(fp)
            dv = -2.0*(v21[0]+a*v21[1])/((1+a*a)*(1+m21));
 2003f8c:	e0fff817 	ldw	r3,-32(fp)
 2003f90:	e13ff917 	ldw	r4,-28(fp)
 2003f94:	e0bff617 	ldw	r2,-40(fp)
 2003f98:	2085ff32 	custom	252,r2,r4,r2
 2003f9c:	1885ff72 	custom	253,r2,r3,r2
 2003fa0:	1009883a 	mov	r4,r2
 2003fa4:	20099440 	call	2009944 <__extendsfdf2>
 2003fa8:	1011883a 	mov	r8,r2
 2003fac:	1813883a 	mov	r9,r3
 2003fb0:	000d883a 	mov	r6,zero
 2003fb4:	01f00034 	movhi	r7,49152
 2003fb8:	4009883a 	mov	r4,r8
 2003fbc:	480b883a 	mov	r5,r9
 2003fc0:	20089300 	call	2008930 <__muldf3>
 2003fc4:	1009883a 	mov	r4,r2
 2003fc8:	180b883a 	mov	r5,r3
 2003fcc:	2021883a 	mov	r16,r4
 2003fd0:	2823883a 	mov	r17,r5
 2003fd4:	e0fff617 	ldw	r3,-40(fp)
 2003fd8:	e0bff617 	ldw	r2,-40(fp)
 2003fdc:	1887ff32 	custom	252,r3,r3,r2
 2003fe0:	008fe034 	movhi	r2,16256
 2003fe4:	1887ff72 	custom	253,r3,r3,r2
 2003fe8:	e13ff317 	ldw	r4,-52(fp)
 2003fec:	008fe034 	movhi	r2,16256
 2003ff0:	2085ff72 	custom	253,r2,r4,r2
 2003ff4:	1885ff32 	custom	252,r2,r3,r2
 2003ff8:	1009883a 	mov	r4,r2
 2003ffc:	20099440 	call	2009944 <__extendsfdf2>
 2004000:	1009883a 	mov	r4,r2
 2004004:	180b883a 	mov	r5,r3
 2004008:	200d883a 	mov	r6,r4
 200400c:	280f883a 	mov	r7,r5
 2004010:	8009883a 	mov	r4,r16
 2004014:	880b883a 	mov	r5,r17
 2004018:	2007df00 	call	2007df0 <__divdf3>
 200401c:	1009883a 	mov	r4,r2
 2004020:	180b883a 	mov	r5,r3
 2004024:	2005883a 	mov	r2,r4
 2004028:	2807883a 	mov	r3,r5
 200402c:	1009883a 	mov	r4,r2
 2004030:	180b883a 	mov	r5,r3
 2004034:	2009a540 	call	2009a54 <__truncdfsf2>
 2004038:	1007883a 	mov	r3,r2
 200403c:	e0fff715 	stw	r3,-36(fp)
            velocity2[0] += dv;
 2004040:	e0bffd17 	ldw	r2,-12(fp)
 2004044:	10c00017 	ldw	r3,0(r2)
 2004048:	e0bff717 	ldw	r2,-36(fp)
 200404c:	1887ff72 	custom	253,r3,r3,r2
 2004050:	e0bffd17 	ldw	r2,-12(fp)
 2004054:	10c00015 	stw	r3,0(r2)
            velocity2[1] += a*dv;
 2004058:	e0bffd17 	ldw	r2,-12(fp)
 200405c:	10800104 	addi	r2,r2,4
 2004060:	e0fffd17 	ldw	r3,-12(fp)
 2004064:	18c00104 	addi	r3,r3,4
 2004068:	19000017 	ldw	r4,0(r3)
 200406c:	e17ff617 	ldw	r5,-40(fp)
 2004070:	e0fff717 	ldw	r3,-36(fp)
 2004074:	28c7ff32 	custom	252,r3,r5,r3
 2004078:	20c7ff72 	custom	253,r3,r4,r3
 200407c:	10c00015 	stw	r3,0(r2)

            velocity1[0] -= m21*dv;
 2004080:	e0bffc17 	ldw	r2,-16(fp)
 2004084:	10c00017 	ldw	r3,0(r2)
 2004088:	e13ff317 	ldw	r4,-52(fp)
 200408c:	e0bff717 	ldw	r2,-36(fp)
 2004090:	2085ff32 	custom	252,r2,r4,r2
 2004094:	1887ffb2 	custom	254,r3,r3,r2
 2004098:	e0bffc17 	ldw	r2,-16(fp)
 200409c:	10c00015 	stw	r3,0(r2)
            velocity1[1] -= a*m21*dv;
 20040a0:	e0bffc17 	ldw	r2,-16(fp)
 20040a4:	10800104 	addi	r2,r2,4
 20040a8:	e0fffc17 	ldw	r3,-16(fp)
 20040ac:	18c00104 	addi	r3,r3,4
 20040b0:	19000017 	ldw	r4,0(r3)
 20040b4:	e17ff617 	ldw	r5,-40(fp)
 20040b8:	e0fff317 	ldw	r3,-52(fp)
 20040bc:	28cbff32 	custom	252,r5,r5,r3
 20040c0:	e0fff717 	ldw	r3,-36(fp)
 20040c4:	28c7ff32 	custom	252,r3,r5,r3
 20040c8:	20c7ffb2 	custom	254,r3,r4,r3
 20040cc:	10c00015 	stw	r3,0(r2)
            //DEBUG_PRINT("collision - ball 1 [ %f, %f] - ball 2 [ %f, %f] - V1 [%f, %f] - V2 [%f,%f]\n", ball1[0],ball1[1],
            //					ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
		}
	}
}
 20040d0:	0001883a 	nop
 20040d4:	e6fffe04 	addi	sp,fp,-8
 20040d8:	dfc00317 	ldw	ra,12(sp)
 20040dc:	df000217 	ldw	fp,8(sp)
 20040e0:	dc400117 	ldw	r17,4(sp)
 20040e4:	dc000017 	ldw	r16,0(sp)
 20040e8:	dec00404 	addi	sp,sp,16
 20040ec:	f800283a 	ret

020040f0 <moveBall>:


void moveBall(float* ball, float* velocity, float theta, int neutre){
 20040f0:	defff704 	addi	sp,sp,-36
 20040f4:	dfc00815 	stw	ra,32(sp)
 20040f8:	df000715 	stw	fp,28(sp)
 20040fc:	dc800615 	stw	r18,24(sp)
 2004100:	dc400515 	stw	r17,20(sp)
 2004104:	dc000415 	stw	r16,16(sp)
 2004108:	df000704 	addi	fp,sp,28
 200410c:	e13ff915 	stw	r4,-28(fp)
 2004110:	e17ffa15 	stw	r5,-24(fp)
 2004114:	e1bffb15 	stw	r6,-20(fp)
 2004118:	e1fffc15 	stw	r7,-16(fp)
	if(neutre != 0)
 200411c:	e0bffc17 	ldw	r2,-16(fp)
 2004120:	10001a26 	beq	r2,zero,200418c <moveBall+0x9c>
	{
		ball[0] += velocity[0]*cosf(theta);
 2004124:	e0bff917 	ldw	r2,-28(fp)
 2004128:	14000017 	ldw	r16,0(r2)
 200412c:	e0bffa17 	ldw	r2,-24(fp)
 2004130:	14400017 	ldw	r17,0(r2)
 2004134:	e13ffb17 	ldw	r4,-20(fp)
 2004138:	20044980 	call	2004498 <cosf>
 200413c:	1007883a 	mov	r3,r2
 2004140:	88c5ff32 	custom	252,r2,r17,r3
 2004144:	8087ff72 	custom	253,r3,r16,r2
 2004148:	e0bff917 	ldw	r2,-28(fp)
 200414c:	10c00015 	stw	r3,0(r2)
		ball[1] += velocity[1]*sinf(theta);
 2004150:	e0bff917 	ldw	r2,-28(fp)
 2004154:	14000104 	addi	r16,r2,4
 2004158:	e0bff917 	ldw	r2,-28(fp)
 200415c:	10800104 	addi	r2,r2,4
 2004160:	14400017 	ldw	r17,0(r2)
 2004164:	e0bffa17 	ldw	r2,-24(fp)
 2004168:	10800104 	addi	r2,r2,4
 200416c:	14800017 	ldw	r18,0(r2)
 2004170:	e13ffb17 	ldw	r4,-20(fp)
 2004174:	20045d80 	call	20045d8 <sinf>
 2004178:	1007883a 	mov	r3,r2
 200417c:	90c5ff32 	custom	252,r2,r18,r3
 2004180:	8885ff72 	custom	253,r2,r17,r2
 2004184:	80800015 	stw	r2,0(r16)
	else
	{
		ball[0] += velocity[0];
		ball[1] += velocity[1];
	}
}
 2004188:	00001106 	br	20041d0 <moveBall+0xe0>
		ball[0] += velocity[0]*cosf(theta);
		ball[1] += velocity[1]*sinf(theta);
	}
	else
	{
		ball[0] += velocity[0];
 200418c:	e0bff917 	ldw	r2,-28(fp)
 2004190:	10c00017 	ldw	r3,0(r2)
 2004194:	e13ffa17 	ldw	r4,-24(fp)
 2004198:	20800017 	ldw	r2,0(r4)
 200419c:	1887ff72 	custom	253,r3,r3,r2
 20041a0:	e0bff917 	ldw	r2,-28(fp)
 20041a4:	10c00015 	stw	r3,0(r2)
		ball[1] += velocity[1];
 20041a8:	e0bff917 	ldw	r2,-28(fp)
 20041ac:	10800104 	addi	r2,r2,4
 20041b0:	e0fff917 	ldw	r3,-28(fp)
 20041b4:	18c00104 	addi	r3,r3,4
 20041b8:	19000017 	ldw	r4,0(r3)
 20041bc:	e0fffa17 	ldw	r3,-24(fp)
 20041c0:	19400104 	addi	r5,r3,4
 20041c4:	28c00017 	ldw	r3,0(r5)
 20041c8:	20c7ff72 	custom	253,r3,r4,r3
 20041cc:	10c00015 	stw	r3,0(r2)
	}
}
 20041d0:	0001883a 	nop
 20041d4:	e6fffd04 	addi	sp,fp,-12
 20041d8:	dfc00417 	ldw	ra,16(sp)
 20041dc:	df000317 	ldw	fp,12(sp)
 20041e0:	dc800217 	ldw	r18,8(sp)
 20041e4:	dc400117 	ldw	r17,4(sp)
 20041e8:	dc000017 	ldw	r16,0(sp)
 20041ec:	dec00504 	addi	sp,sp,20
 20041f0:	f800283a 	ret

020041f4 <damping>:


void damping(float* velocity){
 20041f4:	defffc04 	addi	sp,sp,-16
 20041f8:	dfc00315 	stw	ra,12(sp)
 20041fc:	df000215 	stw	fp,8(sp)
 2004200:	dc000115 	stw	r16,4(sp)
 2004204:	df000204 	addi	fp,sp,8
 2004208:	e13ffe15 	stw	r4,-8(fp)
	velocity[0] *= DAMPING;
 200420c:	e0bffe17 	ldw	r2,-8(fp)
 2004210:	10c00017 	ldw	r3,0(r2)
 2004214:	1809883a 	mov	r4,r3
 2004218:	20099440 	call	2009944 <__extendsfdf2>
 200421c:	1011883a 	mov	r8,r2
 2004220:	1813883a 	mov	r9,r3
 2004224:	018f5c74 	movhi	r6,15729
 2004228:	31a8f5c4 	addi	r6,r6,-23593
 200422c:	01cffc34 	movhi	r7,16368
 2004230:	39f5c284 	addi	r7,r7,-10486
 2004234:	4009883a 	mov	r4,r8
 2004238:	480b883a 	mov	r5,r9
 200423c:	20089300 	call	2008930 <__muldf3>
 2004240:	1009883a 	mov	r4,r2
 2004244:	180b883a 	mov	r5,r3
 2004248:	2005883a 	mov	r2,r4
 200424c:	2807883a 	mov	r3,r5
 2004250:	1009883a 	mov	r4,r2
 2004254:	180b883a 	mov	r5,r3
 2004258:	2009a540 	call	2009a54 <__truncdfsf2>
 200425c:	1007883a 	mov	r3,r2
 2004260:	e0bffe17 	ldw	r2,-8(fp)
 2004264:	10c00015 	stw	r3,0(r2)
	velocity[1] *= DAMPING;
 2004268:	e0bffe17 	ldw	r2,-8(fp)
 200426c:	14000104 	addi	r16,r2,4
 2004270:	e0bffe17 	ldw	r2,-8(fp)
 2004274:	10800104 	addi	r2,r2,4
 2004278:	10c00017 	ldw	r3,0(r2)
 200427c:	1809883a 	mov	r4,r3
 2004280:	20099440 	call	2009944 <__extendsfdf2>
 2004284:	1011883a 	mov	r8,r2
 2004288:	1813883a 	mov	r9,r3
 200428c:	018f5c74 	movhi	r6,15729
 2004290:	31a8f5c4 	addi	r6,r6,-23593
 2004294:	01cffc34 	movhi	r7,16368
 2004298:	39f5c284 	addi	r7,r7,-10486
 200429c:	4009883a 	mov	r4,r8
 20042a0:	480b883a 	mov	r5,r9
 20042a4:	20089300 	call	2008930 <__muldf3>
 20042a8:	1009883a 	mov	r4,r2
 20042ac:	180b883a 	mov	r5,r3
 20042b0:	2005883a 	mov	r2,r4
 20042b4:	2807883a 	mov	r3,r5
 20042b8:	1009883a 	mov	r4,r2
 20042bc:	180b883a 	mov	r5,r3
 20042c0:	2009a540 	call	2009a54 <__truncdfsf2>
 20042c4:	1007883a 	mov	r3,r2
 20042c8:	80c00015 	stw	r3,0(r16)
}
 20042cc:	0001883a 	nop
 20042d0:	e6ffff04 	addi	sp,fp,-4
 20042d4:	dfc00217 	ldw	ra,8(sp)
 20042d8:	df000117 	ldw	fp,4(sp)
 20042dc:	dc000017 	ldw	r16,0(sp)
 20042e0:	dec00304 	addi	sp,sp,12
 20042e4:	f800283a 	ret

020042e8 <fmin>:
#else
	double fmin(x,y)
	double x;
	double y;
#endif
{
 20042e8:	defffa04 	addi	sp,sp,-24
 20042ec:	dfc00515 	stw	ra,20(sp)
 20042f0:	df000415 	stw	fp,16(sp)
 20042f4:	df000404 	addi	fp,sp,16
 20042f8:	e13ffc15 	stw	r4,-16(fp)
 20042fc:	e17ffd15 	stw	r5,-12(fp)
 2004300:	e1bffe15 	stw	r6,-8(fp)
 2004304:	e1ffff15 	stw	r7,-4(fp)
  if (__fpclassifyd(x) == FP_NAN)
 2004308:	e13ffc17 	ldw	r4,-16(fp)
 200430c:	e17ffd17 	ldw	r5,-12(fp)
 2004310:	20043940 	call	2004394 <__fpclassifyd>
 2004314:	1000031e 	bne	r2,zero,2004324 <fmin+0x3c>
    return y;
 2004318:	e0bffe17 	ldw	r2,-8(fp)
 200431c:	e0ffff17 	ldw	r3,-4(fp)
 2004320:	00001306 	br	2004370 <fmin+0x88>
  if (__fpclassifyd(y) == FP_NAN)
 2004324:	e13ffe17 	ldw	r4,-8(fp)
 2004328:	e17fff17 	ldw	r5,-4(fp)
 200432c:	20043940 	call	2004394 <__fpclassifyd>
 2004330:	1000031e 	bne	r2,zero,2004340 <fmin+0x58>
    return x;
 2004334:	e0bffc17 	ldw	r2,-16(fp)
 2004338:	e0fffd17 	ldw	r3,-12(fp)
 200433c:	00000c06 	br	2004370 <fmin+0x88>
  
  return x < y ? x : y;
 2004340:	e1bffe17 	ldw	r6,-8(fp)
 2004344:	e1ffff17 	ldw	r7,-4(fp)
 2004348:	e13ffc17 	ldw	r4,-16(fp)
 200434c:	e17ffd17 	ldw	r5,-12(fp)
 2004350:	200883c0 	call	200883c <__ledf2>
 2004354:	1000030e 	bge	r2,zero,2004364 <fmin+0x7c>
 2004358:	e0bffc17 	ldw	r2,-16(fp)
 200435c:	e0fffd17 	ldw	r3,-12(fp)
 2004360:	00000206 	br	200436c <fmin+0x84>
 2004364:	e0bffe17 	ldw	r2,-8(fp)
 2004368:	e0ffff17 	ldw	r3,-4(fp)
 200436c:	0001883a 	nop
 2004370:	1009883a 	mov	r4,r2
 2004374:	180b883a 	mov	r5,r3
}
 2004378:	2005883a 	mov	r2,r4
 200437c:	2807883a 	mov	r3,r5
 2004380:	e037883a 	mov	sp,fp
 2004384:	dfc00117 	ldw	ra,4(sp)
 2004388:	df000017 	ldw	fp,0(sp)
 200438c:	dec00204 	addi	sp,sp,8
 2004390:	f800283a 	ret

02004394 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 2004394:	defff904 	addi	sp,sp,-28
 2004398:	df000615 	stw	fp,24(sp)
 200439c:	df000604 	addi	fp,sp,24
 20043a0:	e13ffe15 	stw	r4,-8(fp)
 20043a4:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 20043a8:	e0bffe17 	ldw	r2,-8(fp)
 20043ac:	e0bffc15 	stw	r2,-16(fp)
 20043b0:	e0bfff17 	ldw	r2,-4(fp)
 20043b4:	e0bffd15 	stw	r2,-12(fp)
 20043b8:	e0bffd17 	ldw	r2,-12(fp)
 20043bc:	e0bffa15 	stw	r2,-24(fp)
 20043c0:	e0bffc17 	ldw	r2,-16(fp)
 20043c4:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 20043c8:	e0bffa17 	ldw	r2,-24(fp)
 20043cc:	1000021e 	bne	r2,zero,20043d8 <__fpclassifyd+0x44>
 20043d0:	e0bffb17 	ldw	r2,-20(fp)
 20043d4:	10000526 	beq	r2,zero,20043ec <__fpclassifyd+0x58>
 20043d8:	e0fffa17 	ldw	r3,-24(fp)
 20043dc:	00a00034 	movhi	r2,32768
 20043e0:	1880041e 	bne	r3,r2,20043f4 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 20043e4:	e0bffb17 	ldw	r2,-20(fp)
 20043e8:	1000021e 	bne	r2,zero,20043f4 <__fpclassifyd+0x60>
    return FP_ZERO;
 20043ec:	00800084 	movi	r2,2
 20043f0:	00002506 	br	2004488 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 20043f4:	e0fffa17 	ldw	r3,-24(fp)
 20043f8:	00800434 	movhi	r2,16
 20043fc:	18800336 	bltu	r3,r2,200440c <__fpclassifyd+0x78>
 2004400:	e0fffa17 	ldw	r3,-24(fp)
 2004404:	009ffc34 	movhi	r2,32752
 2004408:	18800636 	bltu	r3,r2,2004424 <__fpclassifyd+0x90>
 200440c:	e0fffa17 	ldw	r3,-24(fp)
 2004410:	00a00434 	movhi	r2,32784
 2004414:	18800536 	bltu	r3,r2,200442c <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 2004418:	e0fffa17 	ldw	r3,-24(fp)
 200441c:	00bffc34 	movhi	r2,65520
 2004420:	1880022e 	bgeu	r3,r2,200442c <__fpclassifyd+0x98>
    return FP_NORMAL;
 2004424:	00800104 	movi	r2,4
 2004428:	00001706 	br	2004488 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 200442c:	e0fffa17 	ldw	r3,-24(fp)
 2004430:	00800434 	movhi	r2,16
 2004434:	18800536 	bltu	r3,r2,200444c <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2004438:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 200443c:	1000050e 	bge	r2,zero,2004454 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 2004440:	e0fffa17 	ldw	r3,-24(fp)
 2004444:	00a00434 	movhi	r2,32784
 2004448:	1880022e 	bgeu	r3,r2,2004454 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 200444c:	008000c4 	movi	r2,3
 2004450:	00000d06 	br	2004488 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 2004454:	e0fffa17 	ldw	r3,-24(fp)
 2004458:	009ffc34 	movhi	r2,32752
 200445c:	1880021e 	bne	r3,r2,2004468 <__fpclassifyd+0xd4>
 2004460:	e0bffb17 	ldw	r2,-20(fp)
 2004464:	10000526 	beq	r2,zero,200447c <__fpclassifyd+0xe8>
 2004468:	e0fffa17 	ldw	r3,-24(fp)
 200446c:	00bffc34 	movhi	r2,65520
 2004470:	1880041e 	bne	r3,r2,2004484 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 2004474:	e0bffb17 	ldw	r2,-20(fp)
 2004478:	1000021e 	bne	r2,zero,2004484 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 200447c:	00800044 	movi	r2,1
 2004480:	00000106 	br	2004488 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 2004484:	0005883a 	mov	r2,zero
}
 2004488:	e037883a 	mov	sp,fp
 200448c:	df000017 	ldw	fp,0(sp)
 2004490:	dec00104 	addi	sp,sp,4
 2004494:	f800283a 	ret

02004498 <cosf>:
	float cosf(float x)
#else
	float cosf(x)
	float x;
#endif
{
 2004498:	defff704 	addi	sp,sp,-36
 200449c:	dfc00815 	stw	ra,32(sp)
 20044a0:	df000715 	stw	fp,28(sp)
 20044a4:	df000704 	addi	fp,sp,28
 20044a8:	e13fff15 	stw	r4,-4(fp)
	float y[2],z=0.0;
 20044ac:	e03ff915 	stw	zero,-28(fp)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
 20044b0:	e0bfff17 	ldw	r2,-4(fp)
 20044b4:	e0bffe15 	stw	r2,-8(fp)
 20044b8:	e0bffe17 	ldw	r2,-8(fp)
 20044bc:	e0bffa15 	stw	r2,-24(fp)

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 20044c0:	e0fffa17 	ldw	r3,-24(fp)
 20044c4:	00a00034 	movhi	r2,32768
 20044c8:	10bfffc4 	addi	r2,r2,-1
 20044cc:	1884703a 	and	r2,r3,r2
 20044d0:	e0bffa15 	stw	r2,-24(fp)
	if(ix <= 0x3f490fd8) return __kernel_cosf(x,z);
 20044d4:	e0fffa17 	ldw	r3,-24(fp)
 20044d8:	008fd274 	movhi	r2,16201
 20044dc:	1083f604 	addi	r2,r2,4056
 20044e0:	10c00516 	blt	r2,r3,20044f8 <cosf+0x60>
 20044e4:	e17ff917 	ldw	r5,-28(fp)
 20044e8:	e13fff17 	ldw	r4,-4(fp)
 20044ec:	20059a00 	call	20059a0 <__kernel_cosf>
 20044f0:	1007883a 	mov	r3,r2
 20044f4:	00003206 	br	20045c0 <cosf+0x128>

    /* cos(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 20044f8:	e0fffa17 	ldw	r3,-24(fp)
 20044fc:	009fe034 	movhi	r2,32640
 2004500:	18800416 	blt	r3,r2,2004514 <cosf+0x7c>
 2004504:	e0ffff17 	ldw	r3,-4(fp)
 2004508:	e0bfff17 	ldw	r2,-4(fp)
 200450c:	1887ffb2 	custom	254,r3,r3,r2
 2004510:	00002b06 	br	20045c0 <cosf+0x128>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 2004514:	e0bffc04 	addi	r2,fp,-16
 2004518:	100b883a 	mov	r5,r2
 200451c:	e13fff17 	ldw	r4,-4(fp)
 2004520:	200532c0 	call	200532c <__ieee754_rem_pio2f>
 2004524:	e0bffb15 	stw	r2,-20(fp)
	    switch(n&3) {
 2004528:	e0bffb17 	ldw	r2,-20(fp)
 200452c:	108000cc 	andi	r2,r2,3
 2004530:	10c00060 	cmpeqi	r3,r2,1
 2004534:	18000a1e 	bne	r3,zero,2004560 <cosf+0xc8>
 2004538:	10c000a0 	cmpeqi	r3,r2,2
 200453c:	1800111e 	bne	r3,zero,2004584 <cosf+0xec>
 2004540:	1000181e 	bne	r2,zero,20045a4 <cosf+0x10c>
		case 0: return  __kernel_cosf(y[0],y[1]);
 2004544:	e0bffc17 	ldw	r2,-16(fp)
 2004548:	e0fffd17 	ldw	r3,-12(fp)
 200454c:	180b883a 	mov	r5,r3
 2004550:	1009883a 	mov	r4,r2
 2004554:	20059a00 	call	20059a0 <__kernel_cosf>
 2004558:	1007883a 	mov	r3,r2
 200455c:	00001806 	br	20045c0 <cosf+0x128>
		case 1: return -__kernel_sinf(y[0],y[1],1);
 2004560:	e0bffc17 	ldw	r2,-16(fp)
 2004564:	e0fffd17 	ldw	r3,-12(fp)
 2004568:	01800044 	movi	r6,1
 200456c:	180b883a 	mov	r5,r3
 2004570:	1009883a 	mov	r4,r2
 2004574:	2006a040 	call	2006a04 <__kernel_sinf>
 2004578:	1007883a 	mov	r3,r2
 200457c:	1807f872 	custom	225,r3,r3,zero
 2004580:	00000f06 	br	20045c0 <cosf+0x128>
		case 2: return -__kernel_cosf(y[0],y[1]);
 2004584:	e0bffc17 	ldw	r2,-16(fp)
 2004588:	e0fffd17 	ldw	r3,-12(fp)
 200458c:	180b883a 	mov	r5,r3
 2004590:	1009883a 	mov	r4,r2
 2004594:	20059a00 	call	20059a0 <__kernel_cosf>
 2004598:	1007883a 	mov	r3,r2
 200459c:	1807f872 	custom	225,r3,r3,zero
 20045a0:	00000706 	br	20045c0 <cosf+0x128>
		default:
		        return  __kernel_sinf(y[0],y[1],1);
 20045a4:	e0bffc17 	ldw	r2,-16(fp)
 20045a8:	e0fffd17 	ldw	r3,-12(fp)
 20045ac:	01800044 	movi	r6,1
 20045b0:	180b883a 	mov	r5,r3
 20045b4:	1009883a 	mov	r4,r2
 20045b8:	2006a040 	call	2006a04 <__kernel_sinf>
 20045bc:	1007883a 	mov	r3,r2
 20045c0:	1805883a 	mov	r2,r3
	    }
	}
}
 20045c4:	e037883a 	mov	sp,fp
 20045c8:	dfc00117 	ldw	ra,4(sp)
 20045cc:	df000017 	ldw	fp,0(sp)
 20045d0:	dec00204 	addi	sp,sp,8
 20045d4:	f800283a 	ret

020045d8 <sinf>:
	float sinf(float x)
#else
	float sinf(x)
	float x;
#endif
{
 20045d8:	defff704 	addi	sp,sp,-36
 20045dc:	dfc00815 	stw	ra,32(sp)
 20045e0:	df000715 	stw	fp,28(sp)
 20045e4:	df000704 	addi	fp,sp,28
 20045e8:	e13fff15 	stw	r4,-4(fp)
	float y[2],z=0.0;
 20045ec:	e03ff915 	stw	zero,-28(fp)
	__int32_t n,ix;

	GET_FLOAT_WORD(ix,x);
 20045f0:	e0bfff17 	ldw	r2,-4(fp)
 20045f4:	e0bffe15 	stw	r2,-8(fp)
 20045f8:	e0bffe17 	ldw	r2,-8(fp)
 20045fc:	e0bffa15 	stw	r2,-24(fp)

    /* |x| ~< pi/4 */
	ix &= 0x7fffffff;
 2004600:	e0fffa17 	ldw	r3,-24(fp)
 2004604:	00a00034 	movhi	r2,32768
 2004608:	10bfffc4 	addi	r2,r2,-1
 200460c:	1884703a 	and	r2,r3,r2
 2004610:	e0bffa15 	stw	r2,-24(fp)
	if(ix <= 0x3f490fd8) return __kernel_sinf(x,z,0);
 2004614:	e0fffa17 	ldw	r3,-24(fp)
 2004618:	008fd274 	movhi	r2,16201
 200461c:	1083f604 	addi	r2,r2,4056
 2004620:	10c00616 	blt	r2,r3,200463c <sinf+0x64>
 2004624:	000d883a 	mov	r6,zero
 2004628:	e17ff917 	ldw	r5,-28(fp)
 200462c:	e13fff17 	ldw	r4,-4(fp)
 2004630:	2006a040 	call	2006a04 <__kernel_sinf>
 2004634:	1007883a 	mov	r3,r2
 2004638:	00003206 	br	2004704 <sinf+0x12c>

    /* sin(Inf or NaN) is NaN */
	else if (!FLT_UWORD_IS_FINITE(ix)) return x-x;
 200463c:	e0fffa17 	ldw	r3,-24(fp)
 2004640:	009fe034 	movhi	r2,32640
 2004644:	18800416 	blt	r3,r2,2004658 <sinf+0x80>
 2004648:	e0ffff17 	ldw	r3,-4(fp)
 200464c:	e0bfff17 	ldw	r2,-4(fp)
 2004650:	1887ffb2 	custom	254,r3,r3,r2
 2004654:	00002b06 	br	2004704 <sinf+0x12c>

    /* argument reduction needed */
	else {
	    n = __ieee754_rem_pio2f(x,y);
 2004658:	e0bffc04 	addi	r2,fp,-16
 200465c:	100b883a 	mov	r5,r2
 2004660:	e13fff17 	ldw	r4,-4(fp)
 2004664:	200532c0 	call	200532c <__ieee754_rem_pio2f>
 2004668:	e0bffb15 	stw	r2,-20(fp)
	    switch(n&3) {
 200466c:	e0bffb17 	ldw	r2,-20(fp)
 2004670:	108000cc 	andi	r2,r2,3
 2004674:	10c00060 	cmpeqi	r3,r2,1
 2004678:	18000b1e 	bne	r3,zero,20046a8 <sinf+0xd0>
 200467c:	10c000a0 	cmpeqi	r3,r2,2
 2004680:	1800101e 	bne	r3,zero,20046c4 <sinf+0xec>
 2004684:	1000181e 	bne	r2,zero,20046e8 <sinf+0x110>
		case 0: return  __kernel_sinf(y[0],y[1],1);
 2004688:	e0bffc17 	ldw	r2,-16(fp)
 200468c:	e0fffd17 	ldw	r3,-12(fp)
 2004690:	01800044 	movi	r6,1
 2004694:	180b883a 	mov	r5,r3
 2004698:	1009883a 	mov	r4,r2
 200469c:	2006a040 	call	2006a04 <__kernel_sinf>
 20046a0:	1007883a 	mov	r3,r2
 20046a4:	00001706 	br	2004704 <sinf+0x12c>
		case 1: return  __kernel_cosf(y[0],y[1]);
 20046a8:	e0bffc17 	ldw	r2,-16(fp)
 20046ac:	e0fffd17 	ldw	r3,-12(fp)
 20046b0:	180b883a 	mov	r5,r3
 20046b4:	1009883a 	mov	r4,r2
 20046b8:	20059a00 	call	20059a0 <__kernel_cosf>
 20046bc:	1007883a 	mov	r3,r2
 20046c0:	00001006 	br	2004704 <sinf+0x12c>
		case 2: return -__kernel_sinf(y[0],y[1],1);
 20046c4:	e0bffc17 	ldw	r2,-16(fp)
 20046c8:	e0fffd17 	ldw	r3,-12(fp)
 20046cc:	01800044 	movi	r6,1
 20046d0:	180b883a 	mov	r5,r3
 20046d4:	1009883a 	mov	r4,r2
 20046d8:	2006a040 	call	2006a04 <__kernel_sinf>
 20046dc:	1007883a 	mov	r3,r2
 20046e0:	1807f872 	custom	225,r3,r3,zero
 20046e4:	00000706 	br	2004704 <sinf+0x12c>
		default:
			return -__kernel_cosf(y[0],y[1]);
 20046e8:	e0bffc17 	ldw	r2,-16(fp)
 20046ec:	e0fffd17 	ldw	r3,-12(fp)
 20046f0:	180b883a 	mov	r5,r3
 20046f4:	1009883a 	mov	r4,r2
 20046f8:	20059a00 	call	20059a0 <__kernel_cosf>
 20046fc:	1007883a 	mov	r3,r2
 2004700:	1807f872 	custom	225,r3,r3,zero
 2004704:	1805883a 	mov	r2,r3
	    }
	}
}
 2004708:	e037883a 	mov	sp,fp
 200470c:	dfc00117 	ldw	ra,4(sp)
 2004710:	df000017 	ldw	fp,0(sp)
 2004714:	dec00204 	addi	sp,sp,8
 2004718:	f800283a 	ret

0200471c <sqrt>:
	double sqrt(double x)		/* wrapper sqrt */
#else
	double sqrt(x)			/* wrapper sqrt */
	double x;
#endif
{
 200471c:	defff104 	addi	sp,sp,-60
 2004720:	dfc00e15 	stw	ra,56(sp)
 2004724:	df000d15 	stw	fp,52(sp)
 2004728:	df000d04 	addi	fp,sp,52
 200472c:	e13ffe15 	stw	r4,-8(fp)
 2004730:	e17fff15 	stw	r5,-4(fp)
#ifdef _IEEE_LIBM
	return __ieee754_sqrt(x);
#else
	struct exception exc;
	double z;
	z = __ieee754_sqrt(x);
 2004734:	e13ffe17 	ldw	r4,-8(fp)
 2004738:	e17fff17 	ldw	r5,-4(fp)
 200473c:	20048d00 	call	20048d0 <__ieee754_sqrt>
 2004740:	e0bff315 	stw	r2,-52(fp)
 2004744:	e0fff415 	stw	r3,-48(fp)
	if(_LIB_VERSION == _IEEE_ || isnan(x)) return z;
 2004748:	d0a02817 	ldw	r2,-32608(gp)
 200474c:	10bfffe0 	cmpeqi	r2,r2,-1
 2004750:	1000041e 	bne	r2,zero,2004764 <sqrt+0x48>
 2004754:	e13ffe17 	ldw	r4,-8(fp)
 2004758:	e17fff17 	ldw	r5,-4(fp)
 200475c:	20043940 	call	2004394 <__fpclassifyd>
 2004760:	1000031e 	bne	r2,zero,2004770 <sqrt+0x54>
 2004764:	e0bff317 	ldw	r2,-52(fp)
 2004768:	e0fff417 	ldw	r3,-48(fp)
 200476c:	00003f06 	br	200486c <sqrt+0x150>
	if(x<0.0) {
 2004770:	000d883a 	mov	r6,zero
 2004774:	000f883a 	mov	r7,zero
 2004778:	e13ffe17 	ldw	r4,-8(fp)
 200477c:	e17fff17 	ldw	r5,-4(fp)
 2004780:	200883c0 	call	200883c <__ledf2>
 2004784:	1000370e 	bge	r2,zero,2004864 <sqrt+0x148>
	  exc.type = DOMAIN;
 2004788:	00800044 	movi	r2,1
 200478c:	e0bff515 	stw	r2,-44(fp)
	  exc.name = "sqrt";
 2004790:	008080b4 	movhi	r2,514
 2004794:	108b0004 	addi	r2,r2,11264
 2004798:	e0bff615 	stw	r2,-40(fp)
	  exc.err = 0;
 200479c:	e03ffd15 	stw	zero,-12(fp)
	  exc.arg1 = exc.arg2 = x;
 20047a0:	e0bffe17 	ldw	r2,-8(fp)
 20047a4:	e0bff915 	stw	r2,-28(fp)
 20047a8:	e0bfff17 	ldw	r2,-4(fp)
 20047ac:	e0bffa15 	stw	r2,-24(fp)
 20047b0:	e0bff917 	ldw	r2,-28(fp)
 20047b4:	e0fffa17 	ldw	r3,-24(fp)
 20047b8:	e0bff715 	stw	r2,-36(fp)
 20047bc:	e0fff815 	stw	r3,-32(fp)
	  if (_LIB_VERSION == _SVID_)
 20047c0:	d0a02817 	ldw	r2,-32608(gp)
 20047c4:	1000031e 	bne	r2,zero,20047d4 <sqrt+0xb8>
	    exc.retval = 0.0;
 20047c8:	e03ffb15 	stw	zero,-20(fp)
 20047cc:	e03ffc15 	stw	zero,-16(fp)
 20047d0:	00000b06 	br	2004800 <sqrt+0xe4>
          else
            exc.retval = 0.0/0.0;
 20047d4:	000d883a 	mov	r6,zero
 20047d8:	000f883a 	mov	r7,zero
 20047dc:	0009883a 	mov	r4,zero
 20047e0:	000b883a 	mov	r5,zero
 20047e4:	2007df00 	call	2007df0 <__divdf3>
 20047e8:	1009883a 	mov	r4,r2
 20047ec:	180b883a 	mov	r5,r3
 20047f0:	2005883a 	mov	r2,r4
 20047f4:	2807883a 	mov	r3,r5
 20047f8:	e0bffb15 	stw	r2,-20(fp)
 20047fc:	e0fffc15 	stw	r3,-16(fp)
          if (_LIB_VERSION == _POSIX_)
 2004800:	d0a02817 	ldw	r2,-32608(gp)
 2004804:	10800098 	cmpnei	r2,r2,2
 2004808:	1000051e 	bne	r2,zero,2004820 <sqrt+0x104>
            errno = EDOM;
 200480c:	2009c600 	call	2009c60 <__errno>
 2004810:	1007883a 	mov	r3,r2
 2004814:	00800844 	movi	r2,33
 2004818:	18800015 	stw	r2,0(r3)
 200481c:	00000806 	br	2004840 <sqrt+0x124>
          else if (!matherr(&exc)) {
 2004820:	e0bff504 	addi	r2,fp,-44
 2004824:	1009883a 	mov	r4,r2
 2004828:	2006b700 	call	2006b70 <matherr>
 200482c:	1000041e 	bne	r2,zero,2004840 <sqrt+0x124>
            errno = EDOM;
 2004830:	2009c600 	call	2009c60 <__errno>
 2004834:	1007883a 	mov	r3,r2
 2004838:	00800844 	movi	r2,33
 200483c:	18800015 	stw	r2,0(r3)
          }
          if (exc.err != 0)
 2004840:	e0bffd17 	ldw	r2,-12(fp)
 2004844:	10000426 	beq	r2,zero,2004858 <sqrt+0x13c>
	    errno = exc.err;
 2004848:	2009c600 	call	2009c60 <__errno>
 200484c:	1007883a 	mov	r3,r2
 2004850:	e0bffd17 	ldw	r2,-12(fp)
 2004854:	18800015 	stw	r2,0(r3)
	  return exc.retval; 
 2004858:	e0bffb17 	ldw	r2,-20(fp)
 200485c:	e0fffc17 	ldw	r3,-16(fp)
 2004860:	00000206 	br	200486c <sqrt+0x150>
	} else
	    return z;
 2004864:	e0bff317 	ldw	r2,-52(fp)
 2004868:	e0fff417 	ldw	r3,-48(fp)
 200486c:	1009883a 	mov	r4,r2
 2004870:	180b883a 	mov	r5,r3
#endif
}
 2004874:	2005883a 	mov	r2,r4
 2004878:	2807883a 	mov	r3,r5
 200487c:	e037883a 	mov	sp,fp
 2004880:	dfc00117 	ldw	ra,4(sp)
 2004884:	df000017 	ldw	fp,0(sp)
 2004888:	dec00204 	addi	sp,sp,8
 200488c:	f800283a 	ret

02004890 <atan2f>:
	float atan2f(float y, float x)		/* wrapper atan2f */
#else
	float atan2f(y,x)			/* wrapper atan2 */
	float y,x;
#endif
{
 2004890:	defffc04 	addi	sp,sp,-16
 2004894:	dfc00315 	stw	ra,12(sp)
 2004898:	df000215 	stw	fp,8(sp)
 200489c:	df000204 	addi	fp,sp,8
 20048a0:	e13ffe15 	stw	r4,-8(fp)
 20048a4:	e17fff15 	stw	r5,-4(fp)
	return __ieee754_atan2f(y,x);
 20048a8:	e17fff17 	ldw	r5,-4(fp)
 20048ac:	e13ffe17 	ldw	r4,-8(fp)
 20048b0:	2004f180 	call	2004f18 <__ieee754_atan2f>
 20048b4:	1007883a 	mov	r3,r2
 20048b8:	1805883a 	mov	r2,r3
}
 20048bc:	e037883a 	mov	sp,fp
 20048c0:	dfc00117 	ldw	ra,4(sp)
 20048c4:	df000017 	ldw	fp,0(sp)
 20048c8:	dec00204 	addi	sp,sp,8
 20048cc:	f800283a 	ret

020048d0 <__ieee754_sqrt>:
	double __ieee754_sqrt(double x)
#else
	double __ieee754_sqrt(x)
	double x;
#endif
{
 20048d0:	deffe804 	addi	sp,sp,-96
 20048d4:	dfc01715 	stw	ra,92(sp)
 20048d8:	df001615 	stw	fp,88(sp)
 20048dc:	dc401515 	stw	r17,84(sp)
 20048e0:	dc001415 	stw	r16,80(sp)
 20048e4:	df001604 	addi	fp,sp,88
 20048e8:	e13ffc15 	stw	r4,-16(fp)
 20048ec:	e17ffd15 	stw	r5,-12(fp)
	double z;
	__int32_t sign = (int)0x80000000; 
 20048f0:	00a00034 	movhi	r2,32768
 20048f4:	e0bff315 	stw	r2,-52(fp)
	__uint32_t r,t1,s1,ix1,q1;
	__int32_t ix0,s0,q,m,t,i;

	EXTRACT_WORDS(ix0,ix1,x);
 20048f8:	e0bffc17 	ldw	r2,-16(fp)
 20048fc:	e0bff815 	stw	r2,-32(fp)
 2004900:	e0bffd17 	ldw	r2,-12(fp)
 2004904:	e0bff915 	stw	r2,-28(fp)
 2004908:	e0bff917 	ldw	r2,-28(fp)
 200490c:	e0bfee15 	stw	r2,-72(fp)
 2004910:	e0bff817 	ldw	r2,-32(fp)
 2004914:	e0bfec15 	stw	r2,-80(fp)

    /* take care of Inf and NaN */
	if((ix0&0x7ff00000)==0x7ff00000) {			
 2004918:	e0bfee17 	ldw	r2,-72(fp)
 200491c:	10dffc2c 	andhi	r3,r2,32752
 2004920:	009ffc34 	movhi	r2,32752
 2004924:	1880131e 	bne	r3,r2,2004974 <__ieee754_sqrt+0xa4>
	    return x*x+x;		/* sqrt(NaN)=NaN, sqrt(+inf)=+inf
 2004928:	e1bffc17 	ldw	r6,-16(fp)
 200492c:	e1fffd17 	ldw	r7,-12(fp)
 2004930:	e13ffc17 	ldw	r4,-16(fp)
 2004934:	e17ffd17 	ldw	r5,-12(fp)
 2004938:	20089300 	call	2008930 <__muldf3>
 200493c:	1009883a 	mov	r4,r2
 2004940:	180b883a 	mov	r5,r3
 2004944:	2005883a 	mov	r2,r4
 2004948:	2807883a 	mov	r3,r5
 200494c:	e1bffc17 	ldw	r6,-16(fp)
 2004950:	e1fffd17 	ldw	r7,-12(fp)
 2004954:	1009883a 	mov	r4,r2
 2004958:	180b883a 	mov	r5,r3
 200495c:	20075440 	call	2007544 <__adddf3>
 2004960:	1009883a 	mov	r4,r2
 2004964:	180b883a 	mov	r5,r3
 2004968:	2005883a 	mov	r2,r4
 200496c:	2807883a 	mov	r3,r5
 2004970:	00015e06 	br	2004eec <__ieee754_sqrt+0x61c>
					   sqrt(-inf)=sNaN */
	} 
    /* take care of zero */
	if(ix0<=0) {
 2004974:	e0bfee17 	ldw	r2,-72(fp)
 2004978:	00802916 	blt	zero,r2,2004a20 <__ieee754_sqrt+0x150>
	    if(((ix0&(~sign))|ix1)==0) return x;/* sqrt(+-0) = +-0 */
 200497c:	e0bff317 	ldw	r2,-52(fp)
 2004980:	0086303a 	nor	r3,zero,r2
 2004984:	e0bfee17 	ldw	r2,-72(fp)
 2004988:	1884703a 	and	r2,r3,r2
 200498c:	1007883a 	mov	r3,r2
 2004990:	e0bfec17 	ldw	r2,-80(fp)
 2004994:	1884b03a 	or	r2,r3,r2
 2004998:	1000031e 	bne	r2,zero,20049a8 <__ieee754_sqrt+0xd8>
 200499c:	e0bffc17 	ldw	r2,-16(fp)
 20049a0:	e0fffd17 	ldw	r3,-12(fp)
 20049a4:	00015106 	br	2004eec <__ieee754_sqrt+0x61c>
	    else if(ix0<0)
 20049a8:	e0bfee17 	ldw	r2,-72(fp)
 20049ac:	10001c0e 	bge	r2,zero,2004a20 <__ieee754_sqrt+0x150>
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
 20049b0:	e1bffc17 	ldw	r6,-16(fp)
 20049b4:	e1fffd17 	ldw	r7,-12(fp)
 20049b8:	e13ffc17 	ldw	r4,-16(fp)
 20049bc:	e17ffd17 	ldw	r5,-12(fp)
 20049c0:	20090480 	call	2009048 <__subdf3>
 20049c4:	1009883a 	mov	r4,r2
 20049c8:	180b883a 	mov	r5,r3
 20049cc:	2021883a 	mov	r16,r4
 20049d0:	2823883a 	mov	r17,r5
 20049d4:	e1bffc17 	ldw	r6,-16(fp)
 20049d8:	e1fffd17 	ldw	r7,-12(fp)
 20049dc:	e13ffc17 	ldw	r4,-16(fp)
 20049e0:	e17ffd17 	ldw	r5,-12(fp)
 20049e4:	20090480 	call	2009048 <__subdf3>
 20049e8:	1009883a 	mov	r4,r2
 20049ec:	180b883a 	mov	r5,r3
 20049f0:	2005883a 	mov	r2,r4
 20049f4:	2807883a 	mov	r3,r5
 20049f8:	100d883a 	mov	r6,r2
 20049fc:	180f883a 	mov	r7,r3
 2004a00:	8009883a 	mov	r4,r16
 2004a04:	880b883a 	mov	r5,r17
 2004a08:	2007df00 	call	2007df0 <__divdf3>
 2004a0c:	1009883a 	mov	r4,r2
 2004a10:	180b883a 	mov	r5,r3
 2004a14:	2005883a 	mov	r2,r4
 2004a18:	2807883a 	mov	r3,r5
 2004a1c:	00013306 	br	2004eec <__ieee754_sqrt+0x61c>
	}
    /* normalize x */
	m = (ix0>>20);
 2004a20:	e0bfee17 	ldw	r2,-72(fp)
 2004a24:	1005d53a 	srai	r2,r2,20
 2004a28:	e0bff115 	stw	r2,-60(fp)
	if(m==0) {				/* subnormal x */
 2004a2c:	e0bff117 	ldw	r2,-60(fp)
 2004a30:	10002a1e 	bne	r2,zero,2004adc <__ieee754_sqrt+0x20c>
	    while(ix0==0) {
 2004a34:	00000b06 	br	2004a64 <__ieee754_sqrt+0x194>
		m -= 21;
 2004a38:	e0bff117 	ldw	r2,-60(fp)
 2004a3c:	10bffac4 	addi	r2,r2,-21
 2004a40:	e0bff115 	stw	r2,-60(fp)
		ix0 |= (ix1>>11); ix1 <<= 21;
 2004a44:	e0bfec17 	ldw	r2,-80(fp)
 2004a48:	1006d2fa 	srli	r3,r2,11
 2004a4c:	e0bfee17 	ldw	r2,-72(fp)
 2004a50:	1884b03a 	or	r2,r3,r2
 2004a54:	e0bfee15 	stw	r2,-72(fp)
 2004a58:	e0bfec17 	ldw	r2,-80(fp)
 2004a5c:	1004957a 	slli	r2,r2,21
 2004a60:	e0bfec15 	stw	r2,-80(fp)
		return (x-x)/(x-x);		/* sqrt(-ve) = sNaN */
	}
    /* normalize x */
	m = (ix0>>20);
	if(m==0) {				/* subnormal x */
	    while(ix0==0) {
 2004a64:	e0bfee17 	ldw	r2,-72(fp)
 2004a68:	103ff326 	beq	r2,zero,2004a38 <__ieee754_sqrt+0x168>
		m -= 21;
		ix0 |= (ix1>>11); ix1 <<= 21;
	    }
	    for(i=0;(ix0&0x00100000)==0;i++) ix0<<=1;
 2004a6c:	e03ff215 	stw	zero,-56(fp)
 2004a70:	00000606 	br	2004a8c <__ieee754_sqrt+0x1bc>
 2004a74:	e0bfee17 	ldw	r2,-72(fp)
 2004a78:	1085883a 	add	r2,r2,r2
 2004a7c:	e0bfee15 	stw	r2,-72(fp)
 2004a80:	e0bff217 	ldw	r2,-56(fp)
 2004a84:	10800044 	addi	r2,r2,1
 2004a88:	e0bff215 	stw	r2,-56(fp)
 2004a8c:	e0bfee17 	ldw	r2,-72(fp)
 2004a90:	1080042c 	andhi	r2,r2,16
 2004a94:	103ff726 	beq	r2,zero,2004a74 <__ieee754_sqrt+0x1a4>
	    m -= i-1;
 2004a98:	e0bff217 	ldw	r2,-56(fp)
 2004a9c:	10bfffc4 	addi	r2,r2,-1
 2004aa0:	e0fff117 	ldw	r3,-60(fp)
 2004aa4:	1885c83a 	sub	r2,r3,r2
 2004aa8:	e0bff115 	stw	r2,-60(fp)
	    ix0 |= (ix1>>(32-i));
 2004aac:	00c00804 	movi	r3,32
 2004ab0:	e0bff217 	ldw	r2,-56(fp)
 2004ab4:	1885c83a 	sub	r2,r3,r2
 2004ab8:	e0ffec17 	ldw	r3,-80(fp)
 2004abc:	1886d83a 	srl	r3,r3,r2
 2004ac0:	e0bfee17 	ldw	r2,-72(fp)
 2004ac4:	1884b03a 	or	r2,r3,r2
 2004ac8:	e0bfee15 	stw	r2,-72(fp)
	    ix1 <<= i;
 2004acc:	e0ffec17 	ldw	r3,-80(fp)
 2004ad0:	e0bff217 	ldw	r2,-56(fp)
 2004ad4:	1884983a 	sll	r2,r3,r2
 2004ad8:	e0bfec15 	stw	r2,-80(fp)
	}
	m -= 1023;	/* unbias exponent */
 2004adc:	e0bff117 	ldw	r2,-60(fp)
 2004ae0:	10bf0044 	addi	r2,r2,-1023
 2004ae4:	e0bff115 	stw	r2,-60(fp)
	ix0 = (ix0&0x000fffff)|0x00100000;
 2004ae8:	e0ffee17 	ldw	r3,-72(fp)
 2004aec:	00800434 	movhi	r2,16
 2004af0:	10bfffc4 	addi	r2,r2,-1
 2004af4:	1884703a 	and	r2,r3,r2
 2004af8:	10800434 	orhi	r2,r2,16
 2004afc:	e0bfee15 	stw	r2,-72(fp)
	if(m&1){	/* odd m, double x to make it even */
 2004b00:	e0bff117 	ldw	r2,-60(fp)
 2004b04:	1080004c 	andi	r2,r2,1
 2004b08:	10000d26 	beq	r2,zero,2004b40 <__ieee754_sqrt+0x270>
	    ix0 += ix0 + ((ix1&sign)>>31);
 2004b0c:	e0fff317 	ldw	r3,-52(fp)
 2004b10:	e0bfec17 	ldw	r2,-80(fp)
 2004b14:	1884703a 	and	r2,r3,r2
 2004b18:	1006d7fa 	srli	r3,r2,31
 2004b1c:	e0bfee17 	ldw	r2,-72(fp)
 2004b20:	1887883a 	add	r3,r3,r2
 2004b24:	e0bfee17 	ldw	r2,-72(fp)
 2004b28:	1885883a 	add	r2,r3,r2
 2004b2c:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2004b30:	e0ffec17 	ldw	r3,-80(fp)
 2004b34:	e0bfec17 	ldw	r2,-80(fp)
 2004b38:	1885883a 	add	r2,r3,r2
 2004b3c:	e0bfec15 	stw	r2,-80(fp)
	}
	m >>= 1;	/* m = [m/2] */
 2004b40:	e0bff117 	ldw	r2,-60(fp)
 2004b44:	1005d07a 	srai	r2,r2,1
 2004b48:	e0bff115 	stw	r2,-60(fp)

    /* generate sqrt(x) bit by bit */
	ix0 += ix0 + ((ix1&sign)>>31);
 2004b4c:	e0fff317 	ldw	r3,-52(fp)
 2004b50:	e0bfec17 	ldw	r2,-80(fp)
 2004b54:	1884703a 	and	r2,r3,r2
 2004b58:	1006d7fa 	srli	r3,r2,31
 2004b5c:	e0bfee17 	ldw	r2,-72(fp)
 2004b60:	1887883a 	add	r3,r3,r2
 2004b64:	e0bfee17 	ldw	r2,-72(fp)
 2004b68:	1885883a 	add	r2,r3,r2
 2004b6c:	e0bfee15 	stw	r2,-72(fp)
	ix1 += ix1;
 2004b70:	e0ffec17 	ldw	r3,-80(fp)
 2004b74:	e0bfec17 	ldw	r2,-80(fp)
 2004b78:	1885883a 	add	r2,r3,r2
 2004b7c:	e0bfec15 	stw	r2,-80(fp)
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
 2004b80:	e03feb15 	stw	zero,-84(fp)
 2004b84:	e03fef15 	stw	zero,-68(fp)
 2004b88:	e0bfef17 	ldw	r2,-68(fp)
 2004b8c:	e0bfed15 	stw	r2,-76(fp)
 2004b90:	e0bfed17 	ldw	r2,-76(fp)
 2004b94:	e0bff015 	stw	r2,-64(fp)
	r = 0x00200000;		/* r = moving bit from right to left */
 2004b98:	00800834 	movhi	r2,32
 2004b9c:	e0bfea15 	stw	r2,-88(fp)

	while(r!=0) {
 2004ba0:	00002306 	br	2004c30 <__ieee754_sqrt+0x360>
	    t = s0+r; 
 2004ba4:	e0ffef17 	ldw	r3,-68(fp)
 2004ba8:	e0bfea17 	ldw	r2,-88(fp)
 2004bac:	1885883a 	add	r2,r3,r2
 2004bb0:	e0bff415 	stw	r2,-48(fp)
	    if(t<=ix0) { 
 2004bb4:	e0bff417 	ldw	r2,-48(fp)
 2004bb8:	e0ffee17 	ldw	r3,-72(fp)
 2004bbc:	18800c16 	blt	r3,r2,2004bf0 <__ieee754_sqrt+0x320>
		s0   = t+r; 
 2004bc0:	e0fff417 	ldw	r3,-48(fp)
 2004bc4:	e0bfea17 	ldw	r2,-88(fp)
 2004bc8:	1885883a 	add	r2,r3,r2
 2004bcc:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t; 
 2004bd0:	e0ffee17 	ldw	r3,-72(fp)
 2004bd4:	e0bff417 	ldw	r2,-48(fp)
 2004bd8:	1885c83a 	sub	r2,r3,r2
 2004bdc:	e0bfee15 	stw	r2,-72(fp)
		q   += r; 
 2004be0:	e0fff017 	ldw	r3,-64(fp)
 2004be4:	e0bfea17 	ldw	r2,-88(fp)
 2004be8:	1885883a 	add	r2,r3,r2
 2004bec:	e0bff015 	stw	r2,-64(fp)
	    } 
	    ix0 += ix0 + ((ix1&sign)>>31);
 2004bf0:	e0fff317 	ldw	r3,-52(fp)
 2004bf4:	e0bfec17 	ldw	r2,-80(fp)
 2004bf8:	1884703a 	and	r2,r3,r2
 2004bfc:	1006d7fa 	srli	r3,r2,31
 2004c00:	e0bfee17 	ldw	r2,-72(fp)
 2004c04:	1887883a 	add	r3,r3,r2
 2004c08:	e0bfee17 	ldw	r2,-72(fp)
 2004c0c:	1885883a 	add	r2,r3,r2
 2004c10:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2004c14:	e0ffec17 	ldw	r3,-80(fp)
 2004c18:	e0bfec17 	ldw	r2,-80(fp)
 2004c1c:	1885883a 	add	r2,r3,r2
 2004c20:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 2004c24:	e0bfea17 	ldw	r2,-88(fp)
 2004c28:	1004d07a 	srli	r2,r2,1
 2004c2c:	e0bfea15 	stw	r2,-88(fp)
	ix0 += ix0 + ((ix1&sign)>>31);
	ix1 += ix1;
	q = q1 = s0 = s1 = 0;	/* [q,q1] = sqrt(x) */
	r = 0x00200000;		/* r = moving bit from right to left */

	while(r!=0) {
 2004c30:	e0bfea17 	ldw	r2,-88(fp)
 2004c34:	103fdb1e 	bne	r2,zero,2004ba4 <__ieee754_sqrt+0x2d4>
	    ix0 += ix0 + ((ix1&sign)>>31);
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
 2004c38:	e0bff317 	ldw	r2,-52(fp)
 2004c3c:	e0bfea15 	stw	r2,-88(fp)
	while(r!=0) {
 2004c40:	00004106 	br	2004d48 <__ieee754_sqrt+0x478>
	    t1 = s1+r; 
 2004c44:	e0ffeb17 	ldw	r3,-84(fp)
 2004c48:	e0bfea17 	ldw	r2,-88(fp)
 2004c4c:	1885883a 	add	r2,r3,r2
 2004c50:	e0bff515 	stw	r2,-44(fp)
	    t  = s0;
 2004c54:	e0bfef17 	ldw	r2,-68(fp)
 2004c58:	e0bff415 	stw	r2,-48(fp)
	    if((t<ix0)||((t==ix0)&&(t1<=ix1))) { 
 2004c5c:	e0fff417 	ldw	r3,-48(fp)
 2004c60:	e0bfee17 	ldw	r2,-72(fp)
 2004c64:	18800616 	blt	r3,r2,2004c80 <__ieee754_sqrt+0x3b0>
 2004c68:	e0fff417 	ldw	r3,-48(fp)
 2004c6c:	e0bfee17 	ldw	r2,-72(fp)
 2004c70:	1880251e 	bne	r3,r2,2004d08 <__ieee754_sqrt+0x438>
 2004c74:	e0bff517 	ldw	r2,-44(fp)
 2004c78:	e0ffec17 	ldw	r3,-80(fp)
 2004c7c:	18802236 	bltu	r3,r2,2004d08 <__ieee754_sqrt+0x438>
		s1  = t1+r;
 2004c80:	e0fff517 	ldw	r3,-44(fp)
 2004c84:	e0bfea17 	ldw	r2,-88(fp)
 2004c88:	1885883a 	add	r2,r3,r2
 2004c8c:	e0bfeb15 	stw	r2,-84(fp)
		if(((t1&sign)==sign)&&(s1&sign)==0) s0 += 1;
 2004c90:	e0fff317 	ldw	r3,-52(fp)
 2004c94:	e0bff517 	ldw	r2,-44(fp)
 2004c98:	1886703a 	and	r3,r3,r2
 2004c9c:	e0bff317 	ldw	r2,-52(fp)
 2004ca0:	1880071e 	bne	r3,r2,2004cc0 <__ieee754_sqrt+0x3f0>
 2004ca4:	e0fff317 	ldw	r3,-52(fp)
 2004ca8:	e0bfeb17 	ldw	r2,-84(fp)
 2004cac:	1884703a 	and	r2,r3,r2
 2004cb0:	1000031e 	bne	r2,zero,2004cc0 <__ieee754_sqrt+0x3f0>
 2004cb4:	e0bfef17 	ldw	r2,-68(fp)
 2004cb8:	10800044 	addi	r2,r2,1
 2004cbc:	e0bfef15 	stw	r2,-68(fp)
		ix0 -= t;
 2004cc0:	e0ffee17 	ldw	r3,-72(fp)
 2004cc4:	e0bff417 	ldw	r2,-48(fp)
 2004cc8:	1885c83a 	sub	r2,r3,r2
 2004ccc:	e0bfee15 	stw	r2,-72(fp)
		if (ix1 < t1) ix0 -= 1;
 2004cd0:	e0ffec17 	ldw	r3,-80(fp)
 2004cd4:	e0bff517 	ldw	r2,-44(fp)
 2004cd8:	1880032e 	bgeu	r3,r2,2004ce8 <__ieee754_sqrt+0x418>
 2004cdc:	e0bfee17 	ldw	r2,-72(fp)
 2004ce0:	10bfffc4 	addi	r2,r2,-1
 2004ce4:	e0bfee15 	stw	r2,-72(fp)
		ix1 -= t1;
 2004ce8:	e0ffec17 	ldw	r3,-80(fp)
 2004cec:	e0bff517 	ldw	r2,-44(fp)
 2004cf0:	1885c83a 	sub	r2,r3,r2
 2004cf4:	e0bfec15 	stw	r2,-80(fp)
		q1  += r;
 2004cf8:	e0ffed17 	ldw	r3,-76(fp)
 2004cfc:	e0bfea17 	ldw	r2,-88(fp)
 2004d00:	1885883a 	add	r2,r3,r2
 2004d04:	e0bfed15 	stw	r2,-76(fp)
	    }
	    ix0 += ix0 + ((ix1&sign)>>31);
 2004d08:	e0fff317 	ldw	r3,-52(fp)
 2004d0c:	e0bfec17 	ldw	r2,-80(fp)
 2004d10:	1884703a 	and	r2,r3,r2
 2004d14:	1006d7fa 	srli	r3,r2,31
 2004d18:	e0bfee17 	ldw	r2,-72(fp)
 2004d1c:	1887883a 	add	r3,r3,r2
 2004d20:	e0bfee17 	ldw	r2,-72(fp)
 2004d24:	1885883a 	add	r2,r3,r2
 2004d28:	e0bfee15 	stw	r2,-72(fp)
	    ix1 += ix1;
 2004d2c:	e0ffec17 	ldw	r3,-80(fp)
 2004d30:	e0bfec17 	ldw	r2,-80(fp)
 2004d34:	1885883a 	add	r2,r3,r2
 2004d38:	e0bfec15 	stw	r2,-80(fp)
	    r>>=1;
 2004d3c:	e0bfea17 	ldw	r2,-88(fp)
 2004d40:	1004d07a 	srli	r2,r2,1
 2004d44:	e0bfea15 	stw	r2,-88(fp)
	    ix1 += ix1;
	    r>>=1;
	}

	r = sign;
	while(r!=0) {
 2004d48:	e0bfea17 	ldw	r2,-88(fp)
 2004d4c:	103fbd1e 	bne	r2,zero,2004c44 <__ieee754_sqrt+0x374>
	    ix1 += ix1;
	    r>>=1;
	}

    /* use floating add to find out rounding direction */
	if((ix0|ix1)!=0) {
 2004d50:	e0ffee17 	ldw	r3,-72(fp)
 2004d54:	e0bfec17 	ldw	r2,-80(fp)
 2004d58:	1884b03a 	or	r2,r3,r2
 2004d5c:	10004526 	beq	r2,zero,2004e74 <__ieee754_sqrt+0x5a4>
	    z = one-tiny; /* trigger inexact flag */
 2004d60:	0011883a 	mov	r8,zero
 2004d64:	024ffc34 	movhi	r9,16368
 2004d68:	00b0be74 	movhi	r2,49913
 2004d6c:	10bcd644 	addi	r2,r2,-3239
 2004d70:	00c06974 	movhi	r3,421
 2004d74:	18db87c4 	addi	r3,r3,28191
 2004d78:	100d883a 	mov	r6,r2
 2004d7c:	180f883a 	mov	r7,r3
 2004d80:	4009883a 	mov	r4,r8
 2004d84:	480b883a 	mov	r5,r9
 2004d88:	20090480 	call	2009048 <__subdf3>
 2004d8c:	1009883a 	mov	r4,r2
 2004d90:	180b883a 	mov	r5,r3
 2004d94:	e13ff615 	stw	r4,-40(fp)
 2004d98:	e17ff715 	stw	r5,-36(fp)
	    if (z>=one) {
 2004d9c:	0005883a 	mov	r2,zero
 2004da0:	00cffc34 	movhi	r3,16368
 2004da4:	100d883a 	mov	r6,r2
 2004da8:	180f883a 	mov	r7,r3
 2004dac:	e13ff617 	ldw	r4,-40(fp)
 2004db0:	e17ff717 	ldw	r5,-36(fp)
 2004db4:	20087600 	call	2008760 <__gedf2>
 2004db8:	10002e16 	blt	r2,zero,2004e74 <__ieee754_sqrt+0x5a4>
	        z = one+tiny;
 2004dbc:	0011883a 	mov	r8,zero
 2004dc0:	024ffc34 	movhi	r9,16368
 2004dc4:	00b0be74 	movhi	r2,49913
 2004dc8:	10bcd644 	addi	r2,r2,-3239
 2004dcc:	00c06974 	movhi	r3,421
 2004dd0:	18db87c4 	addi	r3,r3,28191
 2004dd4:	100d883a 	mov	r6,r2
 2004dd8:	180f883a 	mov	r7,r3
 2004ddc:	4009883a 	mov	r4,r8
 2004de0:	480b883a 	mov	r5,r9
 2004de4:	20075440 	call	2007544 <__adddf3>
 2004de8:	1009883a 	mov	r4,r2
 2004dec:	180b883a 	mov	r5,r3
 2004df0:	e13ff615 	stw	r4,-40(fp)
 2004df4:	e17ff715 	stw	r5,-36(fp)
	        if (q1==(__uint32_t)0xffffffff) { q1=0; q += 1;}
 2004df8:	e0bfed17 	ldw	r2,-76(fp)
 2004dfc:	10bfffd8 	cmpnei	r2,r2,-1
 2004e00:	1000051e 	bne	r2,zero,2004e18 <__ieee754_sqrt+0x548>
 2004e04:	e03fed15 	stw	zero,-76(fp)
 2004e08:	e0bff017 	ldw	r2,-64(fp)
 2004e0c:	10800044 	addi	r2,r2,1
 2004e10:	e0bff015 	stw	r2,-64(fp)
 2004e14:	00001706 	br	2004e74 <__ieee754_sqrt+0x5a4>
		else if (z>one) {
 2004e18:	0005883a 	mov	r2,zero
 2004e1c:	00cffc34 	movhi	r3,16368
 2004e20:	100d883a 	mov	r6,r2
 2004e24:	180f883a 	mov	r7,r3
 2004e28:	e13ff617 	ldw	r4,-40(fp)
 2004e2c:	e17ff717 	ldw	r5,-36(fp)
 2004e30:	20087600 	call	2008760 <__gedf2>
 2004e34:	00800a0e 	bge	zero,r2,2004e60 <__ieee754_sqrt+0x590>
		    if (q1==(__uint32_t)0xfffffffe) q+=1;
 2004e38:	e0bfed17 	ldw	r2,-76(fp)
 2004e3c:	10bfff98 	cmpnei	r2,r2,-2
 2004e40:	1000031e 	bne	r2,zero,2004e50 <__ieee754_sqrt+0x580>
 2004e44:	e0bff017 	ldw	r2,-64(fp)
 2004e48:	10800044 	addi	r2,r2,1
 2004e4c:	e0bff015 	stw	r2,-64(fp)
		    q1+=2; 
 2004e50:	e0bfed17 	ldw	r2,-76(fp)
 2004e54:	10800084 	addi	r2,r2,2
 2004e58:	e0bfed15 	stw	r2,-76(fp)
 2004e5c:	00000506 	br	2004e74 <__ieee754_sqrt+0x5a4>
		} else
	            q1 += (q1&1);
 2004e60:	e0bfed17 	ldw	r2,-76(fp)
 2004e64:	1080004c 	andi	r2,r2,1
 2004e68:	e0ffed17 	ldw	r3,-76(fp)
 2004e6c:	1885883a 	add	r2,r3,r2
 2004e70:	e0bfed15 	stw	r2,-76(fp)
	    }
	}
	ix0 = (q>>1)+0x3fe00000;
 2004e74:	e0bff017 	ldw	r2,-64(fp)
 2004e78:	1007d07a 	srai	r3,r2,1
 2004e7c:	008ff834 	movhi	r2,16352
 2004e80:	1885883a 	add	r2,r3,r2
 2004e84:	e0bfee15 	stw	r2,-72(fp)
	ix1 =  q1>>1;
 2004e88:	e0bfed17 	ldw	r2,-76(fp)
 2004e8c:	1004d07a 	srli	r2,r2,1
 2004e90:	e0bfec15 	stw	r2,-80(fp)
	if ((q&1)==1) ix1 |= sign;
 2004e94:	e0bff017 	ldw	r2,-64(fp)
 2004e98:	1080004c 	andi	r2,r2,1
 2004e9c:	10000426 	beq	r2,zero,2004eb0 <__ieee754_sqrt+0x5e0>
 2004ea0:	e0bff317 	ldw	r2,-52(fp)
 2004ea4:	e0ffec17 	ldw	r3,-80(fp)
 2004ea8:	1884b03a 	or	r2,r3,r2
 2004eac:	e0bfec15 	stw	r2,-80(fp)
	ix0 += (m <<20);
 2004eb0:	e0bff117 	ldw	r2,-60(fp)
 2004eb4:	1004953a 	slli	r2,r2,20
 2004eb8:	e0ffee17 	ldw	r3,-72(fp)
 2004ebc:	1885883a 	add	r2,r3,r2
 2004ec0:	e0bfee15 	stw	r2,-72(fp)
	INSERT_WORDS(z,ix0,ix1);
 2004ec4:	e0bfee17 	ldw	r2,-72(fp)
 2004ec8:	e0bffb15 	stw	r2,-20(fp)
 2004ecc:	e0bfec17 	ldw	r2,-80(fp)
 2004ed0:	e0bffa15 	stw	r2,-24(fp)
 2004ed4:	e0bffa17 	ldw	r2,-24(fp)
 2004ed8:	e0bff615 	stw	r2,-40(fp)
 2004edc:	e0bffb17 	ldw	r2,-20(fp)
 2004ee0:	e0bff715 	stw	r2,-36(fp)
	return z;
 2004ee4:	e0bff617 	ldw	r2,-40(fp)
 2004ee8:	e0fff717 	ldw	r3,-36(fp)
 2004eec:	1009883a 	mov	r4,r2
 2004ef0:	180b883a 	mov	r5,r3
}
 2004ef4:	2005883a 	mov	r2,r4
 2004ef8:	2807883a 	mov	r3,r5
 2004efc:	e6fffe04 	addi	sp,fp,-8
 2004f00:	dfc00317 	ldw	ra,12(sp)
 2004f04:	df000217 	ldw	fp,8(sp)
 2004f08:	dc400117 	ldw	r17,4(sp)
 2004f0c:	dc000017 	ldw	r16,0(sp)
 2004f10:	dec00404 	addi	sp,sp,16
 2004f14:	f800283a 	ret

02004f18 <__ieee754_atan2f>:
	float __ieee754_atan2f(float y, float x)
#else
	float __ieee754_atan2f(y,x)
	float  y,x;
#endif
{  
 2004f18:	defff004 	addi	sp,sp,-64
 2004f1c:	dfc00f15 	stw	ra,60(sp)
 2004f20:	df000e15 	stw	fp,56(sp)
 2004f24:	df000e04 	addi	fp,sp,56
 2004f28:	e13ffe15 	stw	r4,-8(fp)
 2004f2c:	e17fff15 	stw	r5,-4(fp)
	float z;
	__int32_t k,m,hx,hy,ix,iy;

	GET_FLOAT_WORD(hx,x);
 2004f30:	e0bfff17 	ldw	r2,-4(fp)
 2004f34:	e0bffa15 	stw	r2,-24(fp)
 2004f38:	e0bffa17 	ldw	r2,-24(fp)
 2004f3c:	e0bff315 	stw	r2,-52(fp)
	ix = hx&0x7fffffff;
 2004f40:	e0fff317 	ldw	r3,-52(fp)
 2004f44:	00a00034 	movhi	r2,32768
 2004f48:	10bfffc4 	addi	r2,r2,-1
 2004f4c:	1884703a 	and	r2,r3,r2
 2004f50:	e0bff415 	stw	r2,-48(fp)
	GET_FLOAT_WORD(hy,y);
 2004f54:	e0bffe17 	ldw	r2,-8(fp)
 2004f58:	e0bffb15 	stw	r2,-20(fp)
 2004f5c:	e0bffb17 	ldw	r2,-20(fp)
 2004f60:	e0bff515 	stw	r2,-44(fp)
	iy = hy&0x7fffffff;
 2004f64:	e0fff517 	ldw	r3,-44(fp)
 2004f68:	00a00034 	movhi	r2,32768
 2004f6c:	10bfffc4 	addi	r2,r2,-1
 2004f70:	1884703a 	and	r2,r3,r2
 2004f74:	e0bff615 	stw	r2,-40(fp)
	if(FLT_UWORD_IS_NAN(ix)||
 2004f78:	e0bff417 	ldw	r2,-48(fp)
 2004f7c:	00dfe034 	movhi	r3,32640
 2004f80:	18800316 	blt	r3,r2,2004f90 <__ieee754_atan2f+0x78>
 2004f84:	e0bff617 	ldw	r2,-40(fp)
 2004f88:	00dfe034 	movhi	r3,32640
 2004f8c:	1880040e 	bge	r3,r2,2004fa0 <__ieee754_atan2f+0x88>
	   FLT_UWORD_IS_NAN(iy))	/* x or y is NaN */
	   return x+y;
 2004f90:	e0ffff17 	ldw	r3,-4(fp)
 2004f94:	e0bffe17 	ldw	r2,-8(fp)
 2004f98:	1887ff72 	custom	253,r3,r3,r2
 2004f9c:	0000dd06 	br	2005314 <__ieee754_atan2f+0x3fc>
	if(hx==0x3f800000) return atanf(y);   /* x=1.0 */
 2004fa0:	e0fff317 	ldw	r3,-52(fp)
 2004fa4:	008fe034 	movhi	r2,16256
 2004fa8:	1880041e 	bne	r3,r2,2004fbc <__ieee754_atan2f+0xa4>
 2004fac:	e13ffe17 	ldw	r4,-8(fp)
 2004fb0:	2006bd80 	call	2006bd8 <atanf>
 2004fb4:	1007883a 	mov	r3,r2
 2004fb8:	0000d606 	br	2005314 <__ieee754_atan2f+0x3fc>
	m = ((hy>>31)&1)|((hx>>30)&2);	/* 2*sign(x)+sign(y) */
 2004fbc:	e0bff517 	ldw	r2,-44(fp)
 2004fc0:	1004d7fa 	srli	r2,r2,31
 2004fc4:	1007883a 	mov	r3,r2
 2004fc8:	e0bff317 	ldw	r2,-52(fp)
 2004fcc:	1005d7ba 	srai	r2,r2,30
 2004fd0:	1080008c 	andi	r2,r2,2
 2004fd4:	1884b03a 	or	r2,r3,r2
 2004fd8:	e0bff715 	stw	r2,-36(fp)

    /* when y = 0 */
	if(FLT_UWORD_IS_ZERO(iy)) {
 2004fdc:	e0bff617 	ldw	r2,-40(fp)
 2004fe0:	1000191e 	bne	r2,zero,2005048 <__ieee754_atan2f+0x130>
	    switch(m) {
 2004fe4:	e0bff717 	ldw	r2,-36(fp)
 2004fe8:	10c000a0 	cmpeqi	r3,r2,2
 2004fec:	1800091e 	bne	r3,zero,2005014 <__ieee754_atan2f+0xfc>
 2004ff0:	10c000c8 	cmpgei	r3,r2,3
 2004ff4:	1800021e 	bne	r3,zero,2005000 <__ieee754_atan2f+0xe8>
 2004ff8:	10001316 	blt	r2,zero,2005048 <__ieee754_atan2f+0x130>
 2004ffc:	00000306 	br	200500c <__ieee754_atan2f+0xf4>
 2005000:	108000e0 	cmpeqi	r2,r2,3
 2005004:	1000091e 	bne	r2,zero,200502c <__ieee754_atan2f+0x114>
 2005008:	00000f06 	br	2005048 <__ieee754_atan2f+0x130>
		case 0: 
		case 1: return y; 	/* atan(+-0,+anything)=+-0 */
 200500c:	e0fffe17 	ldw	r3,-8(fp)
 2005010:	0000c006 	br	2005314 <__ieee754_atan2f+0x3fc>
		case 2: return  pi+tiny;/* atan(+0,-anything) = pi */
 2005014:	00d01274 	movhi	r3,16457
 2005018:	18c3f6c4 	addi	r3,r3,4059
 200501c:	008368b4 	movhi	r2,3490
 2005020:	10909804 	addi	r2,r2,16992
 2005024:	1887ff72 	custom	253,r3,r3,r2
 2005028:	0000ba06 	br	2005314 <__ieee754_atan2f+0x3fc>
		case 3: return -pi-tiny;/* atan(-0,-anything) =-pi */
 200502c:	00901274 	movhi	r2,16457
 2005030:	1083f6c4 	addi	r2,r2,4059
 2005034:	1007f872 	custom	225,r3,r2,zero
 2005038:	008368b4 	movhi	r2,3490
 200503c:	10909804 	addi	r2,r2,16992
 2005040:	1887ffb2 	custom	254,r3,r3,r2
 2005044:	0000b306 	br	2005314 <__ieee754_atan2f+0x3fc>
	    }
	}
    /* when x = 0 */
	if(FLT_UWORD_IS_ZERO(ix)) return (hy<0)?  -pi_o_2-tiny: pi_o_2+tiny;
 2005048:	e0bff417 	ldw	r2,-48(fp)
 200504c:	10000f1e 	bne	r2,zero,200508c <__ieee754_atan2f+0x174>
 2005050:	e0bff517 	ldw	r2,-44(fp)
 2005054:	1000070e 	bge	r2,zero,2005074 <__ieee754_atan2f+0x15c>
 2005058:	008ff274 	movhi	r2,16329
 200505c:	1083f6c4 	addi	r2,r2,4059
 2005060:	1007f872 	custom	225,r3,r2,zero
 2005064:	008368b4 	movhi	r2,3490
 2005068:	10909804 	addi	r2,r2,16992
 200506c:	1887ffb2 	custom	254,r3,r3,r2
 2005070:	0000a806 	br	2005314 <__ieee754_atan2f+0x3fc>
 2005074:	00cff274 	movhi	r3,16329
 2005078:	18c3f6c4 	addi	r3,r3,4059
 200507c:	008368b4 	movhi	r2,3490
 2005080:	10909804 	addi	r2,r2,16992
 2005084:	1887ff72 	custom	253,r3,r3,r2
 2005088:	0000a206 	br	2005314 <__ieee754_atan2f+0x3fc>
	    
    /* when x is INF */
	if(FLT_UWORD_IS_INFINITE(ix)) {
 200508c:	e0fff417 	ldw	r3,-48(fp)
 2005090:	009fe034 	movhi	r2,32640
 2005094:	18804a1e 	bne	r3,r2,20051c0 <__ieee754_atan2f+0x2a8>
	    if(FLT_UWORD_IS_INFINITE(iy)) {
 2005098:	e0fff617 	ldw	r3,-40(fp)
 200509c:	009fe034 	movhi	r2,32640
 20050a0:	1880291e 	bne	r3,r2,2005148 <__ieee754_atan2f+0x230>
		switch(m) {
 20050a4:	e0bff717 	ldw	r2,-36(fp)
 20050a8:	10c00060 	cmpeqi	r3,r2,1
 20050ac:	18000f1e 	bne	r3,zero,20050ec <__ieee754_atan2f+0x1d4>
 20050b0:	10c00088 	cmpgei	r3,r2,2
 20050b4:	1800021e 	bne	r3,zero,20050c0 <__ieee754_atan2f+0x1a8>
 20050b8:	10000626 	beq	r2,zero,20050d4 <__ieee754_atan2f+0x1bc>
 20050bc:	00004006 	br	20051c0 <__ieee754_atan2f+0x2a8>
 20050c0:	10c000a0 	cmpeqi	r3,r2,2
 20050c4:	1800101e 	bne	r3,zero,2005108 <__ieee754_atan2f+0x1f0>
 20050c8:	108000e0 	cmpeqi	r2,r2,3
 20050cc:	1000161e 	bne	r2,zero,2005128 <__ieee754_atan2f+0x210>
 20050d0:	00003b06 	br	20051c0 <__ieee754_atan2f+0x2a8>
		    case 0: return  pi_o_4+tiny;/* atan(+INF,+INF) */
 20050d4:	00cfd274 	movhi	r3,16201
 20050d8:	18c3f6c4 	addi	r3,r3,4059
 20050dc:	008368b4 	movhi	r2,3490
 20050e0:	10909804 	addi	r2,r2,16992
 20050e4:	1887ff72 	custom	253,r3,r3,r2
 20050e8:	00008a06 	br	2005314 <__ieee754_atan2f+0x3fc>
		    case 1: return -pi_o_4-tiny;/* atan(-INF,+INF) */
 20050ec:	008fd274 	movhi	r2,16201
 20050f0:	1083f6c4 	addi	r2,r2,4059
 20050f4:	1007f872 	custom	225,r3,r2,zero
 20050f8:	008368b4 	movhi	r2,3490
 20050fc:	10909804 	addi	r2,r2,16992
 2005100:	1887ffb2 	custom	254,r3,r3,r2
 2005104:	00008306 	br	2005314 <__ieee754_atan2f+0x3fc>
		    case 2: return  (float)3.0*pi_o_4+tiny;/*atan(+INF,-INF)*/
 2005108:	008fd274 	movhi	r2,16201
 200510c:	1083f6c4 	addi	r2,r2,4059
 2005110:	00d01034 	movhi	r3,16448
 2005114:	10c7ff32 	custom	252,r3,r2,r3
 2005118:	008368b4 	movhi	r2,3490
 200511c:	10909804 	addi	r2,r2,16992
 2005120:	1887ff72 	custom	253,r3,r3,r2
 2005124:	00007b06 	br	2005314 <__ieee754_atan2f+0x3fc>
		    case 3: return (float)-3.0*pi_o_4-tiny;/*atan(-INF,-INF)*/
 2005128:	008fd274 	movhi	r2,16201
 200512c:	1083f6c4 	addi	r2,r2,4059
 2005130:	00f01034 	movhi	r3,49216
 2005134:	10c7ff32 	custom	252,r3,r2,r3
 2005138:	008368b4 	movhi	r2,3490
 200513c:	10909804 	addi	r2,r2,16992
 2005140:	1887ffb2 	custom	254,r3,r3,r2
 2005144:	00007306 	br	2005314 <__ieee754_atan2f+0x3fc>
		}
	    } else {
		switch(m) {
 2005148:	e0bff717 	ldw	r2,-36(fp)
 200514c:	10c00060 	cmpeqi	r3,r2,1
 2005150:	18000b1e 	bne	r3,zero,2005180 <__ieee754_atan2f+0x268>
 2005154:	10c00088 	cmpgei	r3,r2,2
 2005158:	1800021e 	bne	r3,zero,2005164 <__ieee754_atan2f+0x24c>
 200515c:	10000626 	beq	r2,zero,2005178 <__ieee754_atan2f+0x260>
 2005160:	00001706 	br	20051c0 <__ieee754_atan2f+0x2a8>
 2005164:	10c000a0 	cmpeqi	r3,r2,2
 2005168:	1800081e 	bne	r3,zero,200518c <__ieee754_atan2f+0x274>
 200516c:	108000e0 	cmpeqi	r2,r2,3
 2005170:	10000c1e 	bne	r2,zero,20051a4 <__ieee754_atan2f+0x28c>
 2005174:	00001206 	br	20051c0 <__ieee754_atan2f+0x2a8>
		    case 0: return  zero  ;	/* atan(+...,+INF) */
 2005178:	0007883a 	mov	r3,zero
 200517c:	00006506 	br	2005314 <__ieee754_atan2f+0x3fc>
		    case 1: return -zero  ;	/* atan(-...,+INF) */
 2005180:	0005883a 	mov	r2,zero
 2005184:	1007f872 	custom	225,r3,r2,zero
 2005188:	00006206 	br	2005314 <__ieee754_atan2f+0x3fc>
		    case 2: return  pi+tiny  ;	/* atan(+...,-INF) */
 200518c:	00d01274 	movhi	r3,16457
 2005190:	18c3f6c4 	addi	r3,r3,4059
 2005194:	008368b4 	movhi	r2,3490
 2005198:	10909804 	addi	r2,r2,16992
 200519c:	1887ff72 	custom	253,r3,r3,r2
 20051a0:	00005c06 	br	2005314 <__ieee754_atan2f+0x3fc>
		    case 3: return -pi-tiny  ;	/* atan(-...,-INF) */
 20051a4:	00901274 	movhi	r2,16457
 20051a8:	1083f6c4 	addi	r2,r2,4059
 20051ac:	1007f872 	custom	225,r3,r2,zero
 20051b0:	008368b4 	movhi	r2,3490
 20051b4:	10909804 	addi	r2,r2,16992
 20051b8:	1887ffb2 	custom	254,r3,r3,r2
 20051bc:	00005506 	br	2005314 <__ieee754_atan2f+0x3fc>
		}
	    }
	}
    /* when y is INF */
	if(FLT_UWORD_IS_INFINITE(iy)) return (hy<0)? -pi_o_2-tiny: pi_o_2+tiny;
 20051c0:	e0fff617 	ldw	r3,-40(fp)
 20051c4:	009fe034 	movhi	r2,32640
 20051c8:	18800f1e 	bne	r3,r2,2005208 <__ieee754_atan2f+0x2f0>
 20051cc:	e0bff517 	ldw	r2,-44(fp)
 20051d0:	1000070e 	bge	r2,zero,20051f0 <__ieee754_atan2f+0x2d8>
 20051d4:	008ff274 	movhi	r2,16329
 20051d8:	1083f6c4 	addi	r2,r2,4059
 20051dc:	1007f872 	custom	225,r3,r2,zero
 20051e0:	008368b4 	movhi	r2,3490
 20051e4:	10909804 	addi	r2,r2,16992
 20051e8:	1887ffb2 	custom	254,r3,r3,r2
 20051ec:	00004906 	br	2005314 <__ieee754_atan2f+0x3fc>
 20051f0:	00cff274 	movhi	r3,16329
 20051f4:	18c3f6c4 	addi	r3,r3,4059
 20051f8:	008368b4 	movhi	r2,3490
 20051fc:	10909804 	addi	r2,r2,16992
 2005200:	1887ff72 	custom	253,r3,r3,r2
 2005204:	00004306 	br	2005314 <__ieee754_atan2f+0x3fc>

    /* compute y/x */
	k = (iy-ix)>>23;
 2005208:	e0fff617 	ldw	r3,-40(fp)
 200520c:	e0bff417 	ldw	r2,-48(fp)
 2005210:	1885c83a 	sub	r2,r3,r2
 2005214:	1005d5fa 	srai	r2,r2,23
 2005218:	e0bff815 	stw	r2,-32(fp)
	if(k > 60) z=pi_o_2+(float)0.5*pi_lo; 	/* |y/x| >  2**60 */
 200521c:	e0bff817 	ldw	r2,-32(fp)
 2005220:	10800f50 	cmplti	r2,r2,61
 2005224:	1000091e 	bne	r2,zero,200524c <__ieee754_atan2f+0x334>
 2005228:	00acef34 	movhi	r2,46012
 200522c:	10af4b84 	addi	r2,r2,-17106
 2005230:	00cfc034 	movhi	r3,16128
 2005234:	10c7ff32 	custom	252,r3,r2,r3
 2005238:	008ff274 	movhi	r2,16329
 200523c:	1083f6c4 	addi	r2,r2,4059
 2005240:	1885ff72 	custom	253,r2,r3,r2
 2005244:	e0bff215 	stw	r2,-56(fp)
 2005248:	00001006 	br	200528c <__ieee754_atan2f+0x374>
	else if(hx<0&&k<-60) z=0.0; 	/* |y|/x < -2**60 */
 200524c:	e0bff317 	ldw	r2,-52(fp)
 2005250:	1000050e 	bge	r2,zero,2005268 <__ieee754_atan2f+0x350>
 2005254:	e0bff817 	ldw	r2,-32(fp)
 2005258:	10bff108 	cmpgei	r2,r2,-60
 200525c:	1000021e 	bne	r2,zero,2005268 <__ieee754_atan2f+0x350>
 2005260:	e03ff215 	stw	zero,-56(fp)
 2005264:	00000906 	br	200528c <__ieee754_atan2f+0x374>
	else z=atanf(fabsf(y/x));	/* safe to do y/x */
 2005268:	e0fffe17 	ldw	r3,-8(fp)
 200526c:	e0bfff17 	ldw	r2,-4(fp)
 2005270:	1885fff2 	custom	255,r2,r3,r2
 2005274:	1009883a 	mov	r4,r2
 2005278:	2006f480 	call	2006f48 <fabsf>
 200527c:	1007883a 	mov	r3,r2
 2005280:	1809883a 	mov	r4,r3
 2005284:	2006bd80 	call	2006bd8 <atanf>
 2005288:	e0bff215 	stw	r2,-56(fp)
	switch (m) {
 200528c:	e0bff717 	ldw	r2,-36(fp)
 2005290:	10c00060 	cmpeqi	r3,r2,1
 2005294:	1800051e 	bne	r3,zero,20052ac <__ieee754_atan2f+0x394>
 2005298:	10c000a0 	cmpeqi	r3,r2,2
 200529c:	18000e1e 	bne	r3,zero,20052d8 <__ieee754_atan2f+0x3c0>
 20052a0:	1000151e 	bne	r2,zero,20052f8 <__ieee754_atan2f+0x3e0>
	    case 0: return       z  ;	/* atan(+,+) */
 20052a4:	e0fff217 	ldw	r3,-56(fp)
 20052a8:	00001a06 	br	2005314 <__ieee754_atan2f+0x3fc>
	    case 1: {
	    	      __uint32_t zh;
		      GET_FLOAT_WORD(zh,z);
 20052ac:	e0bff217 	ldw	r2,-56(fp)
 20052b0:	e0bffc15 	stw	r2,-16(fp)
 20052b4:	e0bffc17 	ldw	r2,-16(fp)
 20052b8:	e0bff915 	stw	r2,-28(fp)
		      SET_FLOAT_WORD(z,zh ^ 0x80000000);
 20052bc:	e0bff917 	ldw	r2,-28(fp)
 20052c0:	10a0003c 	xorhi	r2,r2,32768
 20052c4:	e0bffd15 	stw	r2,-12(fp)
 20052c8:	e0bffd17 	ldw	r2,-12(fp)
 20052cc:	e0bff215 	stw	r2,-56(fp)
		    }
		    return       z  ;	/* atan(-,+) */
 20052d0:	e0fff217 	ldw	r3,-56(fp)
 20052d4:	00000f06 	br	2005314 <__ieee754_atan2f+0x3fc>
	    case 2: return  pi-(z-pi_lo);/* atan(+,-) */
 20052d8:	00901274 	movhi	r2,16457
 20052dc:	1083f6c4 	addi	r2,r2,4059
 20052e0:	00ecef34 	movhi	r3,46012
 20052e4:	18ef4b84 	addi	r3,r3,-17106
 20052e8:	e13ff217 	ldw	r4,-56(fp)
 20052ec:	20c7ffb2 	custom	254,r3,r4,r3
 20052f0:	10c7ffb2 	custom	254,r3,r2,r3
 20052f4:	00000706 	br	2005314 <__ieee754_atan2f+0x3fc>
	    default: /* case 3 */
	    	    return  (z-pi_lo)-pi;/* atan(-,-) */
 20052f8:	00acef34 	movhi	r2,46012
 20052fc:	10af4b84 	addi	r2,r2,-17106
 2005300:	e0fff217 	ldw	r3,-56(fp)
 2005304:	1887ffb2 	custom	254,r3,r3,r2
 2005308:	00901274 	movhi	r2,16457
 200530c:	1083f6c4 	addi	r2,r2,4059
 2005310:	1887ffb2 	custom	254,r3,r3,r2
 2005314:	1805883a 	mov	r2,r3
	}
}
 2005318:	e037883a 	mov	sp,fp
 200531c:	dfc00117 	ldw	ra,4(sp)
 2005320:	df000017 	ldw	fp,0(sp)
 2005324:	dec00204 	addi	sp,sp,8
 2005328:	f800283a 	ret

0200532c <__ieee754_rem_pio2f>:
	__int32_t __ieee754_rem_pio2f(float x, float *y)
#else
	__int32_t __ieee754_rem_pio2f(x,y)
	float x,y[];
#endif
{
 200532c:	deffe604 	addi	sp,sp,-104
 2005330:	dfc01915 	stw	ra,100(sp)
 2005334:	df001815 	stw	fp,96(sp)
 2005338:	df001804 	addi	fp,sp,96
 200533c:	e13ffe15 	stw	r4,-8(fp)
 2005340:	e17fff15 	stw	r5,-4(fp)
	float z,w,t,r,fn;
	float tx[3];
	__int32_t i,j,n,ix,hx;
	int e0,nx;

	GET_FLOAT_WORD(hx,x);
 2005344:	e0bffe17 	ldw	r2,-8(fp)
 2005348:	e0bffa15 	stw	r2,-24(fp)
 200534c:	e0bffa17 	ldw	r2,-24(fp)
 2005350:	e0bfef15 	stw	r2,-68(fp)
	ix = hx&0x7fffffff;
 2005354:	e0ffef17 	ldw	r3,-68(fp)
 2005358:	00a00034 	movhi	r2,32768
 200535c:	10bfffc4 	addi	r2,r2,-1
 2005360:	1884703a 	and	r2,r3,r2
 2005364:	e0bff015 	stw	r2,-64(fp)
	if(ix<=0x3f490fd8)   /* |x| ~<= pi/4 , no need for reduction */
 2005368:	e0fff017 	ldw	r3,-64(fp)
 200536c:	008fd274 	movhi	r2,16201
 2005370:	1083f604 	addi	r2,r2,4056
 2005374:	10c00816 	blt	r2,r3,2005398 <__ieee754_rem_pio2f+0x6c>
	    {y[0] = x; y[1] = 0; return 0;}
 2005378:	e0bfff17 	ldw	r2,-4(fp)
 200537c:	e0fffe17 	ldw	r3,-8(fp)
 2005380:	10c00015 	stw	r3,0(r2)
 2005384:	e0bfff17 	ldw	r2,-4(fp)
 2005388:	10800104 	addi	r2,r2,4
 200538c:	10000015 	stw	zero,0(r2)
 2005390:	0005883a 	mov	r2,zero
 2005394:	00017d06 	br	200598c <__ieee754_rem_pio2f+0x660>
	if(ix<0x4016cbe4) {  /* |x| < 3pi/4, special case with n=+-1 */
 2005398:	e0fff017 	ldw	r3,-64(fp)
 200539c:	009005f4 	movhi	r2,16407
 20053a0:	10b2f8c4 	addi	r2,r2,-13341
 20053a4:	10c06816 	blt	r2,r3,2005548 <__ieee754_rem_pio2f+0x21c>
	    if(hx>0) { 
 20053a8:	e0bfef17 	ldw	r2,-68(fp)
 20053ac:	0080330e 	bge	zero,r2,200547c <__ieee754_rem_pio2f+0x150>
		z = x - pio2_1;
 20053b0:	008ff274 	movhi	r2,16329
 20053b4:	1083e004 	addi	r2,r2,3968
 20053b8:	e0fffe17 	ldw	r3,-8(fp)
 20053bc:	1885ffb2 	custom	254,r2,r3,r2
 20053c0:	e0bfea15 	stw	r2,-88(fp)
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 20053c4:	e0fff017 	ldw	r3,-64(fp)
 20053c8:	00bffc04 	movi	r2,-16
 20053cc:	1886703a 	and	r3,r3,r2
 20053d0:	008ff274 	movhi	r2,16329
 20053d4:	1083f404 	addi	r2,r2,4048
 20053d8:	18801126 	beq	r3,r2,2005420 <__ieee754_rem_pio2f+0xf4>
		    y[0] = z - pio2_1t;
 20053dc:	008dcd74 	movhi	r2,14133
 20053e0:	109110c4 	addi	r2,r2,17475
 20053e4:	e0ffea17 	ldw	r3,-88(fp)
 20053e8:	1887ffb2 	custom	254,r3,r3,r2
 20053ec:	e0bfff17 	ldw	r2,-4(fp)
 20053f0:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])-pio2_1t;
 20053f4:	e0bfff17 	ldw	r2,-4(fp)
 20053f8:	10c00104 	addi	r3,r2,4
 20053fc:	e13fff17 	ldw	r4,-4(fp)
 2005400:	20800017 	ldw	r2,0(r4)
 2005404:	e13fea17 	ldw	r4,-88(fp)
 2005408:	2089ffb2 	custom	254,r4,r4,r2
 200540c:	008dcd74 	movhi	r2,14133
 2005410:	109110c4 	addi	r2,r2,17475
 2005414:	2085ffb2 	custom	254,r2,r4,r2
 2005418:	18800015 	stw	r2,0(r3)
 200541c:	00001506 	br	2005474 <__ieee754_rem_pio2f+0x148>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z -= pio2_2;
 2005420:	008dcd74 	movhi	r2,14133
 2005424:	10910004 	addi	r2,r2,17408
 2005428:	e0ffea17 	ldw	r3,-88(fp)
 200542c:	1885ffb2 	custom	254,r2,r3,r2
 2005430:	e0bfea15 	stw	r2,-88(fp)
		    y[0] = z - pio2_2t;
 2005434:	008ba1b4 	movhi	r2,11910
 2005438:	10a8c204 	addi	r2,r2,-23800
 200543c:	e0ffea17 	ldw	r3,-88(fp)
 2005440:	1887ffb2 	custom	254,r3,r3,r2
 2005444:	e0bfff17 	ldw	r2,-4(fp)
 2005448:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])-pio2_2t;
 200544c:	e0bfff17 	ldw	r2,-4(fp)
 2005450:	10c00104 	addi	r3,r2,4
 2005454:	e13fff17 	ldw	r4,-4(fp)
 2005458:	20800017 	ldw	r2,0(r4)
 200545c:	e13fea17 	ldw	r4,-88(fp)
 2005460:	2089ffb2 	custom	254,r4,r4,r2
 2005464:	008ba1b4 	movhi	r2,11910
 2005468:	10a8c204 	addi	r2,r2,-23800
 200546c:	2085ffb2 	custom	254,r2,r4,r2
 2005470:	18800015 	stw	r2,0(r3)
		}
		return 1;
 2005474:	00800044 	movi	r2,1
 2005478:	00014406 	br	200598c <__ieee754_rem_pio2f+0x660>
	    } else {	/* negative x */
		z = x + pio2_1;
 200547c:	008ff274 	movhi	r2,16329
 2005480:	1083e004 	addi	r2,r2,3968
 2005484:	e0fffe17 	ldw	r3,-8(fp)
 2005488:	1885ff72 	custom	253,r2,r3,r2
 200548c:	e0bfea15 	stw	r2,-88(fp)
		if((ix&0xfffffff0)!=0x3fc90fd0) { /* 24+24 bit pi OK */
 2005490:	e0fff017 	ldw	r3,-64(fp)
 2005494:	00bffc04 	movi	r2,-16
 2005498:	1886703a 	and	r3,r3,r2
 200549c:	008ff274 	movhi	r2,16329
 20054a0:	1083f404 	addi	r2,r2,4048
 20054a4:	18801126 	beq	r3,r2,20054ec <__ieee754_rem_pio2f+0x1c0>
		    y[0] = z + pio2_1t;
 20054a8:	008dcd74 	movhi	r2,14133
 20054ac:	109110c4 	addi	r2,r2,17475
 20054b0:	e0ffea17 	ldw	r3,-88(fp)
 20054b4:	10c7ff72 	custom	253,r3,r2,r3
 20054b8:	e0bfff17 	ldw	r2,-4(fp)
 20054bc:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])+pio2_1t;
 20054c0:	e0bfff17 	ldw	r2,-4(fp)
 20054c4:	10c00104 	addi	r3,r2,4
 20054c8:	e13fff17 	ldw	r4,-4(fp)
 20054cc:	20800017 	ldw	r2,0(r4)
 20054d0:	e13fea17 	ldw	r4,-88(fp)
 20054d4:	2089ffb2 	custom	254,r4,r4,r2
 20054d8:	008dcd74 	movhi	r2,14133
 20054dc:	109110c4 	addi	r2,r2,17475
 20054e0:	2085ff72 	custom	253,r2,r4,r2
 20054e4:	18800015 	stw	r2,0(r3)
 20054e8:	00001506 	br	2005540 <__ieee754_rem_pio2f+0x214>
		} else {		/* near pi/2, use 24+24+24 bit pi */
		    z += pio2_2;
 20054ec:	008dcd74 	movhi	r2,14133
 20054f0:	10910004 	addi	r2,r2,17408
 20054f4:	e0ffea17 	ldw	r3,-88(fp)
 20054f8:	1885ff72 	custom	253,r2,r3,r2
 20054fc:	e0bfea15 	stw	r2,-88(fp)
		    y[0] = z + pio2_2t;
 2005500:	008ba1b4 	movhi	r2,11910
 2005504:	10a8c204 	addi	r2,r2,-23800
 2005508:	e0ffea17 	ldw	r3,-88(fp)
 200550c:	10c7ff72 	custom	253,r3,r2,r3
 2005510:	e0bfff17 	ldw	r2,-4(fp)
 2005514:	10c00015 	stw	r3,0(r2)
		    y[1] = (z-y[0])+pio2_2t;
 2005518:	e0bfff17 	ldw	r2,-4(fp)
 200551c:	10c00104 	addi	r3,r2,4
 2005520:	e13fff17 	ldw	r4,-4(fp)
 2005524:	20800017 	ldw	r2,0(r4)
 2005528:	e13fea17 	ldw	r4,-88(fp)
 200552c:	2089ffb2 	custom	254,r4,r4,r2
 2005530:	008ba1b4 	movhi	r2,11910
 2005534:	10a8c204 	addi	r2,r2,-23800
 2005538:	2085ff72 	custom	253,r2,r4,r2
 200553c:	18800015 	stw	r2,0(r3)
		}
		return -1;
 2005540:	00bfffc4 	movi	r2,-1
 2005544:	00011106 	br	200598c <__ieee754_rem_pio2f+0x660>
	    }
	}
	if(ix<=0x43490f80) { /* |x| ~<= 2^7*(pi/2), medium size */
 2005548:	e0fff017 	ldw	r3,-64(fp)
 200554c:	0090d274 	movhi	r2,17225
 2005550:	1083e004 	addi	r2,r2,3968
 2005554:	10c0a516 	blt	r2,r3,20057ec <__ieee754_rem_pio2f+0x4c0>
	    t  = fabsf(x);
 2005558:	e13ffe17 	ldw	r4,-8(fp)
 200555c:	2006f480 	call	2006f48 <fabsf>
 2005560:	e0bff115 	stw	r2,-60(fp)
	    n  = (__int32_t) (t*invpio2+half);
 2005564:	008fc8f4 	movhi	r2,16163
 2005568:	10be6104 	addi	r2,r2,-1660
 200556c:	e0fff117 	ldw	r3,-60(fp)
 2005570:	10c7ff32 	custom	252,r3,r2,r3
 2005574:	008fc034 	movhi	r2,16128
 2005578:	1885ff72 	custom	253,r2,r3,r2
 200557c:	1005fe72 	custom	249,r2,r2,zero
 2005580:	e0bff215 	stw	r2,-56(fp)
	    fn = (float)n;
 2005584:	e0bff217 	ldw	r2,-56(fp)
 2005588:	1005feb2 	custom	250,r2,r2,zero
 200558c:	e0bff315 	stw	r2,-52(fp)
	    r  = t-fn*pio2_1;
 2005590:	008ff274 	movhi	r2,16329
 2005594:	1083e004 	addi	r2,r2,3968
 2005598:	e0fff317 	ldw	r3,-52(fp)
 200559c:	10c5ff32 	custom	252,r2,r2,r3
 20055a0:	e0fff117 	ldw	r3,-60(fp)
 20055a4:	1885ffb2 	custom	254,r2,r3,r2
 20055a8:	e0bfec15 	stw	r2,-80(fp)
	    w  = fn*pio2_1t;	/* 1st round good to 40 bit */
 20055ac:	008dcd74 	movhi	r2,14133
 20055b0:	109110c4 	addi	r2,r2,17475
 20055b4:	e0fff317 	ldw	r3,-52(fp)
 20055b8:	1885ff32 	custom	252,r2,r3,r2
 20055bc:	e0bfeb15 	stw	r2,-84(fp)
	    if(n<32&&(ix&0xffffff00)!=npio2_hw[n-1]) {	
 20055c0:	e0bff217 	ldw	r2,-56(fp)
 20055c4:	10800808 	cmpgei	r2,r2,32
 20055c8:	1000121e 	bne	r2,zero,2005614 <__ieee754_rem_pio2f+0x2e8>
 20055cc:	e0fff017 	ldw	r3,-64(fp)
 20055d0:	00bfc004 	movi	r2,-256
 20055d4:	1888703a 	and	r4,r3,r2
 20055d8:	e0bff217 	ldw	r2,-56(fp)
 20055dc:	10ffffc4 	addi	r3,r2,-1
 20055e0:	008080b4 	movhi	r2,514
 20055e4:	108bc804 	addi	r2,r2,12064
 20055e8:	18c7883a 	add	r3,r3,r3
 20055ec:	18c7883a 	add	r3,r3,r3
 20055f0:	10c5883a 	add	r2,r2,r3
 20055f4:	10800017 	ldw	r2,0(r2)
 20055f8:	20800626 	beq	r4,r2,2005614 <__ieee754_rem_pio2f+0x2e8>
		y[0] = r-w;	/* quick check no cancellation */
 20055fc:	e0ffec17 	ldw	r3,-80(fp)
 2005600:	e0bfeb17 	ldw	r2,-84(fp)
 2005604:	1887ffb2 	custom	254,r3,r3,r2
 2005608:	e0bfff17 	ldw	r2,-4(fp)
 200560c:	10c00015 	stw	r3,0(r2)
 2005610:	00005a06 	br	200577c <__ieee754_rem_pio2f+0x450>
	    } else {
	        __uint32_t high;
	        j  = ix>>23;
 2005614:	e0bff017 	ldw	r2,-64(fp)
 2005618:	1005d5fa 	srai	r2,r2,23
 200561c:	e0bff415 	stw	r2,-48(fp)
	        y[0] = r-w; 
 2005620:	e0ffec17 	ldw	r3,-80(fp)
 2005624:	e0bfeb17 	ldw	r2,-84(fp)
 2005628:	1887ffb2 	custom	254,r3,r3,r2
 200562c:	e0bfff17 	ldw	r2,-4(fp)
 2005630:	10c00015 	stw	r3,0(r2)
		GET_FLOAT_WORD(high,y[0]);
 2005634:	e0ffff17 	ldw	r3,-4(fp)
 2005638:	18800017 	ldw	r2,0(r3)
 200563c:	e0bffb15 	stw	r2,-20(fp)
 2005640:	e0bffb17 	ldw	r2,-20(fp)
 2005644:	e0bff515 	stw	r2,-44(fp)
	        i = j-((high>>23)&0xff);
 2005648:	e0fff417 	ldw	r3,-48(fp)
 200564c:	e0bff517 	ldw	r2,-44(fp)
 2005650:	1004d5fa 	srli	r2,r2,23
 2005654:	10803fcc 	andi	r2,r2,255
 2005658:	1885c83a 	sub	r2,r3,r2
 200565c:	e0bfed15 	stw	r2,-76(fp)
	        if(i>8) {  /* 2nd iteration needed, good to 57 */
 2005660:	e0bfed17 	ldw	r2,-76(fp)
 2005664:	10800250 	cmplti	r2,r2,9
 2005668:	1000441e 	bne	r2,zero,200577c <__ieee754_rem_pio2f+0x450>
		    t  = r;
 200566c:	e0bfec17 	ldw	r2,-80(fp)
 2005670:	e0bff115 	stw	r2,-60(fp)
		    w  = fn*pio2_2;	
 2005674:	008dcd74 	movhi	r2,14133
 2005678:	10910004 	addi	r2,r2,17408
 200567c:	e0fff317 	ldw	r3,-52(fp)
 2005680:	1885ff32 	custom	252,r2,r3,r2
 2005684:	e0bfeb15 	stw	r2,-84(fp)
		    r  = t-w;
 2005688:	e0fff117 	ldw	r3,-60(fp)
 200568c:	e0bfeb17 	ldw	r2,-84(fp)
 2005690:	1885ffb2 	custom	254,r2,r3,r2
 2005694:	e0bfec15 	stw	r2,-80(fp)
		    w  = fn*pio2_2t-((t-r)-w);	
 2005698:	008ba1b4 	movhi	r2,11910
 200569c:	10a8c204 	addi	r2,r2,-23800
 20056a0:	e0fff317 	ldw	r3,-52(fp)
 20056a4:	10c7ff32 	custom	252,r3,r2,r3
 20056a8:	e13ff117 	ldw	r4,-60(fp)
 20056ac:	e0bfec17 	ldw	r2,-80(fp)
 20056b0:	2089ffb2 	custom	254,r4,r4,r2
 20056b4:	e0bfeb17 	ldw	r2,-84(fp)
 20056b8:	2085ffb2 	custom	254,r2,r4,r2
 20056bc:	1885ffb2 	custom	254,r2,r3,r2
 20056c0:	e0bfeb15 	stw	r2,-84(fp)
		    y[0] = r-w;
 20056c4:	e0ffec17 	ldw	r3,-80(fp)
 20056c8:	e0bfeb17 	ldw	r2,-84(fp)
 20056cc:	1887ffb2 	custom	254,r3,r3,r2
 20056d0:	e0bfff17 	ldw	r2,-4(fp)
 20056d4:	10c00015 	stw	r3,0(r2)
		    GET_FLOAT_WORD(high,y[0]);
 20056d8:	e0ffff17 	ldw	r3,-4(fp)
 20056dc:	18800017 	ldw	r2,0(r3)
 20056e0:	e0bffc15 	stw	r2,-16(fp)
 20056e4:	e0bffc17 	ldw	r2,-16(fp)
 20056e8:	e0bff515 	stw	r2,-44(fp)
		    i = j-((high>>23)&0xff);
 20056ec:	e0fff417 	ldw	r3,-48(fp)
 20056f0:	e0bff517 	ldw	r2,-44(fp)
 20056f4:	1004d5fa 	srli	r2,r2,23
 20056f8:	10803fcc 	andi	r2,r2,255
 20056fc:	1885c83a 	sub	r2,r3,r2
 2005700:	e0bfed15 	stw	r2,-76(fp)
		    if(i>25)  {	/* 3rd iteration need, 74 bits acc */
 2005704:	e0bfed17 	ldw	r2,-76(fp)
 2005708:	10800690 	cmplti	r2,r2,26
 200570c:	10001b1e 	bne	r2,zero,200577c <__ieee754_rem_pio2f+0x450>
		    	t  = r;	/* will cover all possible cases */
 2005710:	e0bfec17 	ldw	r2,-80(fp)
 2005714:	e0bff115 	stw	r2,-60(fp)
		    	w  = fn*pio2_3;	
 2005718:	008ba1b4 	movhi	r2,11910
 200571c:	10a8c004 	addi	r2,r2,-23808
 2005720:	e0fff317 	ldw	r3,-52(fp)
 2005724:	1885ff32 	custom	252,r2,r3,r2
 2005728:	e0bfeb15 	stw	r2,-84(fp)
		    	r  = t-w;
 200572c:	e0fff117 	ldw	r3,-60(fp)
 2005730:	e0bfeb17 	ldw	r2,-84(fp)
 2005734:	1885ffb2 	custom	254,r2,r3,r2
 2005738:	e0bfec15 	stw	r2,-80(fp)
		    	w  = fn*pio2_3t-((t-r)-w);	
 200573c:	00892374 	movhi	r2,9357
 2005740:	108c4c84 	addi	r2,r2,12594
 2005744:	e0fff317 	ldw	r3,-52(fp)
 2005748:	10c7ff32 	custom	252,r3,r2,r3
 200574c:	e13ff117 	ldw	r4,-60(fp)
 2005750:	e0bfec17 	ldw	r2,-80(fp)
 2005754:	2089ffb2 	custom	254,r4,r4,r2
 2005758:	e0bfeb17 	ldw	r2,-84(fp)
 200575c:	2085ffb2 	custom	254,r2,r4,r2
 2005760:	1885ffb2 	custom	254,r2,r3,r2
 2005764:	e0bfeb15 	stw	r2,-84(fp)
		    	y[0] = r-w;
 2005768:	e0ffec17 	ldw	r3,-80(fp)
 200576c:	e0bfeb17 	ldw	r2,-84(fp)
 2005770:	1887ffb2 	custom	254,r3,r3,r2
 2005774:	e0bfff17 	ldw	r2,-4(fp)
 2005778:	10c00015 	stw	r3,0(r2)
		    }
		}
	    }
	    y[1] = (r-y[0])-w;
 200577c:	e0bfff17 	ldw	r2,-4(fp)
 2005780:	10800104 	addi	r2,r2,4
 2005784:	e13fff17 	ldw	r4,-4(fp)
 2005788:	20c00017 	ldw	r3,0(r4)
 200578c:	e13fec17 	ldw	r4,-80(fp)
 2005790:	20c9ffb2 	custom	254,r4,r4,r3
 2005794:	e0ffeb17 	ldw	r3,-84(fp)
 2005798:	20c7ffb2 	custom	254,r3,r4,r3
 200579c:	10c00015 	stw	r3,0(r2)
	    if(hx<0) 	{y[0] = -y[0]; y[1] = -y[1]; return -n;}
 20057a0:	e0bfef17 	ldw	r2,-68(fp)
 20057a4:	10000f0e 	bge	r2,zero,20057e4 <__ieee754_rem_pio2f+0x4b8>
 20057a8:	e0ffff17 	ldw	r3,-4(fp)
 20057ac:	18800017 	ldw	r2,0(r3)
 20057b0:	1007f872 	custom	225,r3,r2,zero
 20057b4:	e0bfff17 	ldw	r2,-4(fp)
 20057b8:	10c00015 	stw	r3,0(r2)
 20057bc:	e0bfff17 	ldw	r2,-4(fp)
 20057c0:	10800104 	addi	r2,r2,4
 20057c4:	e0ffff17 	ldw	r3,-4(fp)
 20057c8:	19000104 	addi	r4,r3,4
 20057cc:	20c00017 	ldw	r3,0(r4)
 20057d0:	1807f872 	custom	225,r3,r3,zero
 20057d4:	10c00015 	stw	r3,0(r2)
 20057d8:	e0bff217 	ldw	r2,-56(fp)
 20057dc:	0085c83a 	sub	r2,zero,r2
 20057e0:	00006a06 	br	200598c <__ieee754_rem_pio2f+0x660>
	    else	 return n;
 20057e4:	e0bff217 	ldw	r2,-56(fp)
 20057e8:	00006806 	br	200598c <__ieee754_rem_pio2f+0x660>
	}
    /* 
     * all other (large) arguments
     */
	if(!FLT_UWORD_IS_FINITE(ix)) {
 20057ec:	e0fff017 	ldw	r3,-64(fp)
 20057f0:	009fe034 	movhi	r2,32640
 20057f4:	18800b16 	blt	r3,r2,2005824 <__ieee754_rem_pio2f+0x4f8>
	    y[0]=y[1]=x-x; return 0;
 20057f8:	e0bfff17 	ldw	r2,-4(fp)
 20057fc:	10800104 	addi	r2,r2,4
 2005800:	e13ffe17 	ldw	r4,-8(fp)
 2005804:	e0fffe17 	ldw	r3,-8(fp)
 2005808:	20c7ffb2 	custom	254,r3,r4,r3
 200580c:	10c00015 	stw	r3,0(r2)
 2005810:	10c00017 	ldw	r3,0(r2)
 2005814:	e0bfff17 	ldw	r2,-4(fp)
 2005818:	10c00015 	stw	r3,0(r2)
 200581c:	0005883a 	mov	r2,zero
 2005820:	00005a06 	br	200598c <__ieee754_rem_pio2f+0x660>
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
 2005824:	e0bff017 	ldw	r2,-64(fp)
 2005828:	1005d5fa 	srai	r2,r2,23
 200582c:	10bfde84 	addi	r2,r2,-134
 2005830:	e0bff615 	stw	r2,-40(fp)
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
 2005834:	e0bff617 	ldw	r2,-40(fp)
 2005838:	100495fa 	slli	r2,r2,23
 200583c:	e0fff017 	ldw	r3,-64(fp)
 2005840:	1885c83a 	sub	r2,r3,r2
 2005844:	e0bffd15 	stw	r2,-12(fp)
 2005848:	e0bffd17 	ldw	r2,-12(fp)
 200584c:	e0bfea15 	stw	r2,-88(fp)
	for(i=0;i<2;i++) {
 2005850:	e03fed15 	stw	zero,-76(fp)
 2005854:	00001906 	br	20058bc <__ieee754_rem_pio2f+0x590>
		tx[i] = (float)((__int32_t)(z));
 2005858:	e0ffea17 	ldw	r3,-88(fp)
 200585c:	1805fe72 	custom	249,r2,r3,zero
 2005860:	1007feb2 	custom	250,r3,r2,zero
 2005864:	e0bfed17 	ldw	r2,-76(fp)
 2005868:	1085883a 	add	r2,r2,r2
 200586c:	1085883a 	add	r2,r2,r2
 2005870:	e13fea04 	addi	r4,fp,-88
 2005874:	2085883a 	add	r2,r4,r2
 2005878:	10800d04 	addi	r2,r2,52
 200587c:	10c00015 	stw	r3,0(r2)
		z     = (z-tx[i])*two8;
 2005880:	e0bfed17 	ldw	r2,-76(fp)
 2005884:	1085883a 	add	r2,r2,r2
 2005888:	1085883a 	add	r2,r2,r2
 200588c:	e0ffea04 	addi	r3,fp,-88
 2005890:	1885883a 	add	r2,r3,r2
 2005894:	10c00d04 	addi	r3,r2,52
 2005898:	18800017 	ldw	r2,0(r3)
 200589c:	e0ffea17 	ldw	r3,-88(fp)
 20058a0:	1887ffb2 	custom	254,r3,r3,r2
 20058a4:	0090e034 	movhi	r2,17280
 20058a8:	1885ff32 	custom	252,r2,r3,r2
 20058ac:	e0bfea15 	stw	r2,-88(fp)
	    y[0]=y[1]=x-x; return 0;
	}
    /* set z = scalbn(|x|,ilogb(x)-7) */
	e0 	= (int)((ix>>23)-134);	/* e0 = ilogb(z)-7; */
	SET_FLOAT_WORD(z, ix - ((__int32_t)e0<<23));
	for(i=0;i<2;i++) {
 20058b0:	e0bfed17 	ldw	r2,-76(fp)
 20058b4:	10800044 	addi	r2,r2,1
 20058b8:	e0bfed15 	stw	r2,-76(fp)
 20058bc:	e0bfed17 	ldw	r2,-76(fp)
 20058c0:	10800090 	cmplti	r2,r2,2
 20058c4:	103fe41e 	bne	r2,zero,2005858 <__ieee754_rem_pio2f+0x52c>
		tx[i] = (float)((__int32_t)(z));
		z     = (z-tx[i])*two8;
	}
	tx[2] = z;
 20058c8:	e0bfea17 	ldw	r2,-88(fp)
 20058cc:	e0bff915 	stw	r2,-28(fp)
	nx = 3;
 20058d0:	008000c4 	movi	r2,3
 20058d4:	e0bfee15 	stw	r2,-72(fp)
	while(tx[nx-1]==zero) nx--;	/* skip zero term */
 20058d8:	00000306 	br	20058e8 <__ieee754_rem_pio2f+0x5bc>
 20058dc:	e0bfee17 	ldw	r2,-72(fp)
 20058e0:	10bfffc4 	addi	r2,r2,-1
 20058e4:	e0bfee15 	stw	r2,-72(fp)
 20058e8:	e0bfee17 	ldw	r2,-72(fp)
 20058ec:	10bfffc4 	addi	r2,r2,-1
 20058f0:	1085883a 	add	r2,r2,r2
 20058f4:	1085883a 	add	r2,r2,r2
 20058f8:	e13fea04 	addi	r4,fp,-88
 20058fc:	2085883a 	add	r2,r4,r2
 2005900:	10c00d04 	addi	r3,r2,52
 2005904:	18800017 	ldw	r2,0(r3)
 2005908:	0007883a 	mov	r3,zero
 200590c:	10c5f8f2 	custom	227,r2,r2,r3
 2005910:	103ff21e 	bne	r2,zero,20058dc <__ieee754_rem_pio2f+0x5b0>
	n  =  __kernel_rem_pio2f(tx,y,e0,nx,2,two_over_pi);
 2005914:	e0fff704 	addi	r3,fp,-36
 2005918:	008080b4 	movhi	r2,514
 200591c:	108b0204 	addi	r2,r2,11272
 2005920:	d8800115 	stw	r2,4(sp)
 2005924:	00800084 	movi	r2,2
 2005928:	d8800015 	stw	r2,0(sp)
 200592c:	e1ffee17 	ldw	r7,-72(fp)
 2005930:	e1bff617 	ldw	r6,-40(fp)
 2005934:	e17fff17 	ldw	r5,-4(fp)
 2005938:	1809883a 	mov	r4,r3
 200593c:	2005b640 	call	2005b64 <__kernel_rem_pio2f>
 2005940:	e0bff215 	stw	r2,-56(fp)
	if(hx<0) {y[0] = -y[0]; y[1] = -y[1]; return -n;}
 2005944:	e0bfef17 	ldw	r2,-68(fp)
 2005948:	10000f0e 	bge	r2,zero,2005988 <__ieee754_rem_pio2f+0x65c>
 200594c:	e0ffff17 	ldw	r3,-4(fp)
 2005950:	18800017 	ldw	r2,0(r3)
 2005954:	1007f872 	custom	225,r3,r2,zero
 2005958:	e0bfff17 	ldw	r2,-4(fp)
 200595c:	10c00015 	stw	r3,0(r2)
 2005960:	e0bfff17 	ldw	r2,-4(fp)
 2005964:	10800104 	addi	r2,r2,4
 2005968:	e0ffff17 	ldw	r3,-4(fp)
 200596c:	19000104 	addi	r4,r3,4
 2005970:	20c00017 	ldw	r3,0(r4)
 2005974:	1807f872 	custom	225,r3,r3,zero
 2005978:	10c00015 	stw	r3,0(r2)
 200597c:	e0bff217 	ldw	r2,-56(fp)
 2005980:	0085c83a 	sub	r2,zero,r2
 2005984:	00000106 	br	200598c <__ieee754_rem_pio2f+0x660>
	return n;
 2005988:	e0bff217 	ldw	r2,-56(fp)
}
 200598c:	e037883a 	mov	sp,fp
 2005990:	dfc00117 	ldw	ra,4(sp)
 2005994:	df000017 	ldw	fp,0(sp)
 2005998:	dec00204 	addi	sp,sp,8
 200599c:	f800283a 	ret

020059a0 <__kernel_cosf>:
	float __kernel_cosf(float x, float y)
#else
	float __kernel_cosf(x, y)
	float x,y;
#endif
{
 20059a0:	defff504 	addi	sp,sp,-44
 20059a4:	df000a15 	stw	fp,40(sp)
 20059a8:	df000a04 	addi	fp,sp,40
 20059ac:	e13ffe15 	stw	r4,-8(fp)
 20059b0:	e17fff15 	stw	r5,-4(fp)
	float a,hz,z,r,qx;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
 20059b4:	e0bffe17 	ldw	r2,-8(fp)
 20059b8:	e0bffc15 	stw	r2,-16(fp)
 20059bc:	e0bffc17 	ldw	r2,-16(fp)
 20059c0:	e0bff715 	stw	r2,-36(fp)
	ix &= 0x7fffffff;			/* ix = |x|'s high word*/
 20059c4:	e0fff717 	ldw	r3,-36(fp)
 20059c8:	00a00034 	movhi	r2,32768
 20059cc:	10bfffc4 	addi	r2,r2,-1
 20059d0:	1884703a 	and	r2,r3,r2
 20059d4:	e0bff715 	stw	r2,-36(fp)
	if(ix<0x32000000) {			/* if x < 2**27 */
 20059d8:	e0fff717 	ldw	r3,-36(fp)
 20059dc:	008c8034 	movhi	r2,12800
 20059e0:	1880050e 	bge	r3,r2,20059f8 <__kernel_cosf+0x58>
	    if(((int)x)==0) return one;		/* generate inexact */
 20059e4:	e0fffe17 	ldw	r3,-8(fp)
 20059e8:	1805fe72 	custom	249,r2,r3,zero
 20059ec:	1000021e 	bne	r2,zero,20059f8 <__kernel_cosf+0x58>
 20059f0:	008fe034 	movhi	r2,16256
 20059f4:	00005506 	br	2005b4c <__kernel_cosf+0x1ac>
	}
	z  = x*x;
 20059f8:	e0fffe17 	ldw	r3,-8(fp)
 20059fc:	e0bffe17 	ldw	r2,-8(fp)
 2005a00:	1885ff32 	custom	252,r2,r3,r2
 2005a04:	e0bff815 	stw	r2,-32(fp)
	r  = z*(C1+z*(C2+z*(C3+z*(C4+z*(C5+z*C6)))));
 2005a08:	00ab5234 	movhi	r2,44360
 2005a0c:	10b5d384 	addi	r2,r2,-10418
 2005a10:	e0fff817 	ldw	r3,-32(fp)
 2005a14:	10c7ff32 	custom	252,r3,r2,r3
 2005a18:	008c43f4 	movhi	r2,12559
 2005a1c:	109d3d84 	addi	r2,r2,29942
 2005a20:	1887ff72 	custom	253,r3,r3,r2
 2005a24:	e0bff817 	ldw	r2,-32(fp)
 2005a28:	1887ff32 	custom	252,r3,r3,r2
 2005a2c:	00ad2534 	movhi	r2,46228
 2005a30:	10bc9f04 	addi	r2,r2,-3460
 2005a34:	1887ff72 	custom	253,r3,r3,r2
 2005a38:	e0bff817 	ldw	r2,-32(fp)
 2005a3c:	1887ff32 	custom	252,r3,r3,r2
 2005a40:	008df434 	movhi	r2,14288
 2005a44:	10834044 	addi	r2,r2,3329
 2005a48:	1887ff72 	custom	253,r3,r3,r2
 2005a4c:	e0bff817 	ldw	r2,-32(fp)
 2005a50:	1887ff32 	custom	252,r3,r3,r2
 2005a54:	00aeadb4 	movhi	r2,47798
 2005a58:	1082d844 	addi	r2,r2,2913
 2005a5c:	1887ff72 	custom	253,r3,r3,r2
 2005a60:	e0bff817 	ldw	r2,-32(fp)
 2005a64:	1887ff32 	custom	252,r3,r3,r2
 2005a68:	008f4af4 	movhi	r2,15659
 2005a6c:	10aaaac4 	addi	r2,r2,-21845
 2005a70:	1887ff72 	custom	253,r3,r3,r2
 2005a74:	e0bff817 	ldw	r2,-32(fp)
 2005a78:	1885ff32 	custom	252,r2,r3,r2
 2005a7c:	e0bff915 	stw	r2,-28(fp)
	if(ix < 0x3e99999a) 			/* if |x| < 0.3 */ 
 2005a80:	e0fff717 	ldw	r3,-36(fp)
 2005a84:	008fa6b4 	movhi	r2,16026
 2005a88:	10a66644 	addi	r2,r2,-26215
 2005a8c:	10c00e16 	blt	r2,r3,2005ac8 <__kernel_cosf+0x128>
	    return one - ((float)0.5*z - (z*r - x*y));
 2005a90:	00cfe034 	movhi	r3,16256
 2005a94:	e13ff817 	ldw	r4,-32(fp)
 2005a98:	008fc034 	movhi	r2,16128
 2005a9c:	2089ff32 	custom	252,r4,r4,r2
 2005aa0:	e17ff817 	ldw	r5,-32(fp)
 2005aa4:	e0bff917 	ldw	r2,-28(fp)
 2005aa8:	288bff32 	custom	252,r5,r5,r2
 2005aac:	e1bffe17 	ldw	r6,-8(fp)
 2005ab0:	e0bfff17 	ldw	r2,-4(fp)
 2005ab4:	3085ff32 	custom	252,r2,r6,r2
 2005ab8:	2885ffb2 	custom	254,r2,r5,r2
 2005abc:	2085ffb2 	custom	254,r2,r4,r2
 2005ac0:	1885ffb2 	custom	254,r2,r3,r2
 2005ac4:	00002106 	br	2005b4c <__kernel_cosf+0x1ac>
	else {
	    if(ix > 0x3f480000) {		/* x > 0.78125 */
 2005ac8:	e0bff717 	ldw	r2,-36(fp)
 2005acc:	00cfd234 	movhi	r3,16200
 2005ad0:	1880030e 	bge	r3,r2,2005ae0 <__kernel_cosf+0x140>
		qx = (float)0.28125;
 2005ad4:	008fa434 	movhi	r2,16016
 2005ad8:	e0bff615 	stw	r2,-40(fp)
 2005adc:	00000606 	br	2005af8 <__kernel_cosf+0x158>
	    } else {
	        SET_FLOAT_WORD(qx,ix-0x01000000);	/* x/4 */
 2005ae0:	e0fff717 	ldw	r3,-36(fp)
 2005ae4:	00bfc034 	movhi	r2,65280
 2005ae8:	1885883a 	add	r2,r3,r2
 2005aec:	e0bffd15 	stw	r2,-12(fp)
 2005af0:	e0bffd17 	ldw	r2,-12(fp)
 2005af4:	e0bff615 	stw	r2,-40(fp)
	    }
	    hz = (float)0.5*z-qx;
 2005af8:	e0fff817 	ldw	r3,-32(fp)
 2005afc:	008fc034 	movhi	r2,16128
 2005b00:	1887ff32 	custom	252,r3,r3,r2
 2005b04:	e0bff617 	ldw	r2,-40(fp)
 2005b08:	1885ffb2 	custom	254,r2,r3,r2
 2005b0c:	e0bffa15 	stw	r2,-24(fp)
	    a  = one-qx;
 2005b10:	00cfe034 	movhi	r3,16256
 2005b14:	e0bff617 	ldw	r2,-40(fp)
 2005b18:	1885ffb2 	custom	254,r2,r3,r2
 2005b1c:	e0bffb15 	stw	r2,-20(fp)
	    return a - (hz - (z*r-x*y));
 2005b20:	e0fff817 	ldw	r3,-32(fp)
 2005b24:	e0bff917 	ldw	r2,-28(fp)
 2005b28:	1887ff32 	custom	252,r3,r3,r2
 2005b2c:	e13ffe17 	ldw	r4,-8(fp)
 2005b30:	e0bfff17 	ldw	r2,-4(fp)
 2005b34:	2085ff32 	custom	252,r2,r4,r2
 2005b38:	1885ffb2 	custom	254,r2,r3,r2
 2005b3c:	e0fffa17 	ldw	r3,-24(fp)
 2005b40:	1885ffb2 	custom	254,r2,r3,r2
 2005b44:	e0fffb17 	ldw	r3,-20(fp)
 2005b48:	1885ffb2 	custom	254,r2,r3,r2
 2005b4c:	1007883a 	mov	r3,r2
	}
}
 2005b50:	1805883a 	mov	r2,r3
 2005b54:	e037883a 	mov	sp,fp
 2005b58:	df000017 	ldw	fp,0(sp)
 2005b5c:	dec00104 	addi	sp,sp,4
 2005b60:	f800283a 	ret

02005b64 <__kernel_rem_pio2f>:
	int __kernel_rem_pio2f(float *x, float *y, int e0, int nx, int prec, const __int32_t *ipio2) 
#else
	int __kernel_rem_pio2f(x,y,e0,nx,prec,ipio2) 	
	float x[], y[]; int e0,nx,prec; __int32_t ipio2[];
#endif
{
 2005b64:	deff9b04 	addi	sp,sp,-404
 2005b68:	dfc06415 	stw	ra,400(sp)
 2005b6c:	df006315 	stw	fp,396(sp)
 2005b70:	df006304 	addi	fp,sp,396
 2005b74:	e13ffc15 	stw	r4,-16(fp)
 2005b78:	e17ffd15 	stw	r5,-12(fp)
 2005b7c:	e1bffe15 	stw	r6,-8(fp)
 2005b80:	e1ffff15 	stw	r7,-4(fp)
	__int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
	float z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
	jk = init_jk[prec];
 2005b84:	008080b4 	movhi	r2,514
 2005b88:	108be804 	addi	r2,r2,12192
 2005b8c:	e0c00217 	ldw	r3,8(fp)
 2005b90:	18c7883a 	add	r3,r3,r3
 2005b94:	18c7883a 	add	r3,r3,r3
 2005b98:	10c5883a 	add	r2,r2,r3
 2005b9c:	10800017 	ldw	r2,0(r2)
 2005ba0:	e0bfa815 	stw	r2,-352(fp)
	jp = jk;
 2005ba4:	e0bfa817 	ldw	r2,-352(fp)
 2005ba8:	e0bfa915 	stw	r2,-348(fp)

    /* determine jx,jv,q0, note that 3>q0 */
	jx =  nx-1;
 2005bac:	e0bfff17 	ldw	r2,-4(fp)
 2005bb0:	10bfffc4 	addi	r2,r2,-1
 2005bb4:	e0bfaa15 	stw	r2,-344(fp)
	jv = (e0-3)/8; if(jv<0) jv=0;
 2005bb8:	e0bffe17 	ldw	r2,-8(fp)
 2005bbc:	10bfff44 	addi	r2,r2,-3
 2005bc0:	1000010e 	bge	r2,zero,2005bc8 <__kernel_rem_pio2f+0x64>
 2005bc4:	108001c4 	addi	r2,r2,7
 2005bc8:	1005d0fa 	srai	r2,r2,3
 2005bcc:	e0bf9e15 	stw	r2,-392(fp)
 2005bd0:	e0bf9e17 	ldw	r2,-392(fp)
 2005bd4:	1000010e 	bge	r2,zero,2005bdc <__kernel_rem_pio2f+0x78>
 2005bd8:	e03f9e15 	stw	zero,-392(fp)
	q0 =  e0-8*(jv+1);
 2005bdc:	e0bf9e17 	ldw	r2,-392(fp)
 2005be0:	10800044 	addi	r2,r2,1
 2005be4:	100490fa 	slli	r2,r2,3
 2005be8:	e0fffe17 	ldw	r3,-8(fp)
 2005bec:	1885c83a 	sub	r2,r3,r2
 2005bf0:	e0bfa415 	stw	r2,-368(fp)

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
 2005bf4:	e0ff9e17 	ldw	r3,-392(fp)
 2005bf8:	e0bfaa17 	ldw	r2,-344(fp)
 2005bfc:	1885c83a 	sub	r2,r3,r2
 2005c00:	e0bfa215 	stw	r2,-376(fp)
 2005c04:	e0ffaa17 	ldw	r3,-344(fp)
 2005c08:	e0bfa817 	ldw	r2,-352(fp)
 2005c0c:	1885883a 	add	r2,r3,r2
 2005c10:	e0bfab15 	stw	r2,-340(fp)
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];
 2005c14:	e03fa115 	stw	zero,-380(fp)
 2005c18:	00001906 	br	2005c80 <__kernel_rem_pio2f+0x11c>
 2005c1c:	e0bfa217 	ldw	r2,-376(fp)
 2005c20:	10000916 	blt	r2,zero,2005c48 <__kernel_rem_pio2f+0xe4>
 2005c24:	e0bfa217 	ldw	r2,-376(fp)
 2005c28:	1085883a 	add	r2,r2,r2
 2005c2c:	1085883a 	add	r2,r2,r2
 2005c30:	1007883a 	mov	r3,r2
 2005c34:	e0800317 	ldw	r2,12(fp)
 2005c38:	10c5883a 	add	r2,r2,r3
 2005c3c:	10800017 	ldw	r2,0(r2)
 2005c40:	1005feb2 	custom	250,r2,r2,zero
 2005c44:	00000106 	br	2005c4c <__kernel_rem_pio2f+0xe8>
 2005c48:	0005883a 	mov	r2,zero
 2005c4c:	e0ffa117 	ldw	r3,-380(fp)
 2005c50:	18c7883a 	add	r3,r3,r3
 2005c54:	18c7883a 	add	r3,r3,r3
 2005c58:	e13f9d04 	addi	r4,fp,-396
 2005c5c:	20c7883a 	add	r3,r4,r3
 2005c60:	18c02304 	addi	r3,r3,140
 2005c64:	18800015 	stw	r2,0(r3)
 2005c68:	e0bfa117 	ldw	r2,-380(fp)
 2005c6c:	10800044 	addi	r2,r2,1
 2005c70:	e0bfa115 	stw	r2,-380(fp)
 2005c74:	e0bfa217 	ldw	r2,-376(fp)
 2005c78:	10800044 	addi	r2,r2,1
 2005c7c:	e0bfa215 	stw	r2,-376(fp)
 2005c80:	e0bfa117 	ldw	r2,-380(fp)
 2005c84:	e0ffab17 	ldw	r3,-340(fp)
 2005c88:	18bfe40e 	bge	r3,r2,2005c1c <__kernel_rem_pio2f+0xb8>

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 2005c8c:	e03fa115 	stw	zero,-380(fp)
 2005c90:	00002a06 	br	2005d3c <__kernel_rem_pio2f+0x1d8>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
 2005c94:	e03fa215 	stw	zero,-376(fp)
 2005c98:	e03fa715 	stw	zero,-356(fp)
 2005c9c:	00001906 	br	2005d04 <__kernel_rem_pio2f+0x1a0>
 2005ca0:	e0bfa217 	ldw	r2,-376(fp)
 2005ca4:	1085883a 	add	r2,r2,r2
 2005ca8:	1085883a 	add	r2,r2,r2
 2005cac:	1007883a 	mov	r3,r2
 2005cb0:	e0bffc17 	ldw	r2,-16(fp)
 2005cb4:	10c5883a 	add	r2,r2,r3
 2005cb8:	10c00017 	ldw	r3,0(r2)
 2005cbc:	e13faa17 	ldw	r4,-344(fp)
 2005cc0:	e0bfa117 	ldw	r2,-380(fp)
 2005cc4:	2089883a 	add	r4,r4,r2
 2005cc8:	e0bfa217 	ldw	r2,-376(fp)
 2005ccc:	2085c83a 	sub	r2,r4,r2
 2005cd0:	1085883a 	add	r2,r2,r2
 2005cd4:	1085883a 	add	r2,r2,r2
 2005cd8:	e13f9d04 	addi	r4,fp,-396
 2005cdc:	2085883a 	add	r2,r4,r2
 2005ce0:	11002304 	addi	r4,r2,140
 2005ce4:	20800017 	ldw	r2,0(r4)
 2005ce8:	1885ff32 	custom	252,r2,r3,r2
 2005cec:	e0ffa717 	ldw	r3,-356(fp)
 2005cf0:	1885ff72 	custom	253,r2,r3,r2
 2005cf4:	e0bfa715 	stw	r2,-356(fp)
 2005cf8:	e0bfa217 	ldw	r2,-376(fp)
 2005cfc:	10800044 	addi	r2,r2,1
 2005d00:	e0bfa215 	stw	r2,-376(fp)
 2005d04:	e0bfa217 	ldw	r2,-376(fp)
 2005d08:	e0ffaa17 	ldw	r3,-344(fp)
 2005d0c:	18bfe40e 	bge	r3,r2,2005ca0 <__kernel_rem_pio2f+0x13c>
 2005d10:	e0bfa117 	ldw	r2,-380(fp)
 2005d14:	1085883a 	add	r2,r2,r2
 2005d18:	1085883a 	add	r2,r2,r2
 2005d1c:	e0ff9d04 	addi	r3,fp,-396
 2005d20:	1885883a 	add	r2,r3,r2
 2005d24:	10804b04 	addi	r2,r2,300
 2005d28:	e0ffa717 	ldw	r3,-356(fp)
 2005d2c:	10c00015 	stw	r3,0(r2)
    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
	j = jv-jx; m = jx+jk;
	for(i=0;i<=m;i++,j++) f[i] = (j<0)? zero : (float) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
	for (i=0;i<=jk;i++) {
 2005d30:	e0bfa117 	ldw	r2,-380(fp)
 2005d34:	10800044 	addi	r2,r2,1
 2005d38:	e0bfa115 	stw	r2,-380(fp)
 2005d3c:	e0bfa117 	ldw	r2,-380(fp)
 2005d40:	e0ffa817 	ldw	r3,-352(fp)
 2005d44:	18bfd30e 	bge	r3,r2,2005c94 <__kernel_rem_pio2f+0x130>
	    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j]; q[i] = fw;
	}

	jz = jk;
 2005d48:	e0bfa817 	ldw	r2,-352(fp)
 2005d4c:	e0bf9d15 	stw	r2,-396(fp)
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 2005d50:	e03fa115 	stw	zero,-380(fp)
 2005d54:	e0bf9d17 	ldw	r2,-396(fp)
 2005d58:	e0bfa215 	stw	r2,-376(fp)
 2005d5c:	e0bf9d17 	ldw	r2,-396(fp)
 2005d60:	1085883a 	add	r2,r2,r2
 2005d64:	1085883a 	add	r2,r2,r2
 2005d68:	e13f9d04 	addi	r4,fp,-396
 2005d6c:	2085883a 	add	r2,r4,r2
 2005d70:	10804b04 	addi	r2,r2,300
 2005d74:	10800017 	ldw	r2,0(r2)
 2005d78:	e0bfa615 	stw	r2,-360(fp)
 2005d7c:	00002406 	br	2005e10 <__kernel_rem_pio2f+0x2ac>
	    fw    =  (float)((__int32_t)(twon8* z));
 2005d80:	00cee034 	movhi	r3,15232
 2005d84:	e0bfa617 	ldw	r2,-360(fp)
 2005d88:	1885ff32 	custom	252,r2,r3,r2
 2005d8c:	1005fe72 	custom	249,r2,r2,zero
 2005d90:	1005feb2 	custom	250,r2,r2,zero
 2005d94:	e0bfa715 	stw	r2,-356(fp)
	    iq[i] =  (__int32_t)(z-two8*fw);
 2005d98:	00d0e034 	movhi	r3,17280
 2005d9c:	e0bfa717 	ldw	r2,-356(fp)
 2005da0:	1885ff32 	custom	252,r2,r3,r2
 2005da4:	e0ffa617 	ldw	r3,-360(fp)
 2005da8:	1885ffb2 	custom	254,r2,r3,r2
 2005dac:	1007fe72 	custom	249,r3,r2,zero
 2005db0:	e0bfa117 	ldw	r2,-380(fp)
 2005db4:	1085883a 	add	r2,r2,r2
 2005db8:	1085883a 	add	r2,r2,r2
 2005dbc:	e13f9d04 	addi	r4,fp,-396
 2005dc0:	2085883a 	add	r2,r4,r2
 2005dc4:	10800f04 	addi	r2,r2,60
 2005dc8:	10c00015 	stw	r3,0(r2)
	    z     =  q[j-1]+fw;
 2005dcc:	e0bfa217 	ldw	r2,-376(fp)
 2005dd0:	10bfffc4 	addi	r2,r2,-1
 2005dd4:	1085883a 	add	r2,r2,r2
 2005dd8:	1085883a 	add	r2,r2,r2
 2005ddc:	e0ff9d04 	addi	r3,fp,-396
 2005de0:	1885883a 	add	r2,r3,r2
 2005de4:	10804b04 	addi	r2,r2,300
 2005de8:	10c00017 	ldw	r3,0(r2)
 2005dec:	e0bfa717 	ldw	r2,-356(fp)
 2005df0:	1885ff72 	custom	253,r2,r3,r2
 2005df4:	e0bfa615 	stw	r2,-360(fp)
	}

	jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
	for(i=0,j=jz,z=q[jz];j>0;i++,j--) {
 2005df8:	e0bfa117 	ldw	r2,-380(fp)
 2005dfc:	10800044 	addi	r2,r2,1
 2005e00:	e0bfa115 	stw	r2,-380(fp)
 2005e04:	e0bfa217 	ldw	r2,-376(fp)
 2005e08:	10bfffc4 	addi	r2,r2,-1
 2005e0c:	e0bfa215 	stw	r2,-376(fp)
 2005e10:	e0bfa217 	ldw	r2,-376(fp)
 2005e14:	00bfda16 	blt	zero,r2,2005d80 <__kernel_rem_pio2f+0x21c>
	    iq[i] =  (__int32_t)(z-two8*fw);
	    z     =  q[j-1]+fw;
	}

    /* compute n */
	z  = scalbnf(z,(int)q0);	/* actual value of z */
 2005e18:	e17fa417 	ldw	r5,-368(fp)
 2005e1c:	e13fa617 	ldw	r4,-360(fp)
 2005e20:	20071040 	call	2007104 <scalbnf>
 2005e24:	e0bfa615 	stw	r2,-360(fp)
	z -= (float)8.0*floorf(z*(float)0.125);	/* trim off integer >= 8 */
 2005e28:	e0ffa617 	ldw	r3,-360(fp)
 2005e2c:	008f8034 	movhi	r2,15872
 2005e30:	1885ff32 	custom	252,r2,r3,r2
 2005e34:	1009883a 	mov	r4,r2
 2005e38:	2006fa00 	call	2006fa0 <floorf>
 2005e3c:	1007883a 	mov	r3,r2
 2005e40:	00904034 	movhi	r2,16640
 2005e44:	1885ff32 	custom	252,r2,r3,r2
 2005e48:	e0ffa617 	ldw	r3,-360(fp)
 2005e4c:	1885ffb2 	custom	254,r2,r3,r2
 2005e50:	e0bfa615 	stw	r2,-360(fp)
	n  = (__int32_t) z;
 2005e54:	e13fa617 	ldw	r4,-360(fp)
 2005e58:	2005fe72 	custom	249,r2,r4,zero
 2005e5c:	e0bfa015 	stw	r2,-384(fp)
	z -= (float)n;
 2005e60:	e0bfa017 	ldw	r2,-384(fp)
 2005e64:	1005feb2 	custom	250,r2,r2,zero
 2005e68:	e0ffa617 	ldw	r3,-360(fp)
 2005e6c:	1885ffb2 	custom	254,r2,r3,r2
 2005e70:	e0bfa615 	stw	r2,-360(fp)
	ih = 0;
 2005e74:	e03fa515 	stw	zero,-364(fp)
	if(q0>0) {	/* need iq[jz-1] to determine n */
 2005e78:	e0bfa417 	ldw	r2,-368(fp)
 2005e7c:	0080350e 	bge	zero,r2,2005f54 <__kernel_rem_pio2f+0x3f0>
	    i  = (iq[jz-1]>>(8-q0)); n += i;
 2005e80:	e0bf9d17 	ldw	r2,-396(fp)
 2005e84:	10bfffc4 	addi	r2,r2,-1
 2005e88:	1085883a 	add	r2,r2,r2
 2005e8c:	1085883a 	add	r2,r2,r2
 2005e90:	e0ff9d04 	addi	r3,fp,-396
 2005e94:	1885883a 	add	r2,r3,r2
 2005e98:	10800f04 	addi	r2,r2,60
 2005e9c:	10c00017 	ldw	r3,0(r2)
 2005ea0:	01000204 	movi	r4,8
 2005ea4:	e0bfa417 	ldw	r2,-368(fp)
 2005ea8:	2085c83a 	sub	r2,r4,r2
 2005eac:	1885d83a 	sra	r2,r3,r2
 2005eb0:	e0bfa115 	stw	r2,-380(fp)
 2005eb4:	e0ffa017 	ldw	r3,-384(fp)
 2005eb8:	e0bfa117 	ldw	r2,-380(fp)
 2005ebc:	1885883a 	add	r2,r3,r2
 2005ec0:	e0bfa015 	stw	r2,-384(fp)
	    iq[jz-1] -= i<<(8-q0);
 2005ec4:	e0bf9d17 	ldw	r2,-396(fp)
 2005ec8:	10bfffc4 	addi	r2,r2,-1
 2005ecc:	e0ff9d17 	ldw	r3,-396(fp)
 2005ed0:	18ffffc4 	addi	r3,r3,-1
 2005ed4:	18c7883a 	add	r3,r3,r3
 2005ed8:	18c7883a 	add	r3,r3,r3
 2005edc:	e13f9d04 	addi	r4,fp,-396
 2005ee0:	20c7883a 	add	r3,r4,r3
 2005ee4:	18c00f04 	addi	r3,r3,60
 2005ee8:	19000017 	ldw	r4,0(r3)
 2005eec:	01400204 	movi	r5,8
 2005ef0:	e0ffa417 	ldw	r3,-368(fp)
 2005ef4:	28c7c83a 	sub	r3,r5,r3
 2005ef8:	e17fa117 	ldw	r5,-380(fp)
 2005efc:	28c6983a 	sll	r3,r5,r3
 2005f00:	20c7c83a 	sub	r3,r4,r3
 2005f04:	1085883a 	add	r2,r2,r2
 2005f08:	1085883a 	add	r2,r2,r2
 2005f0c:	e13f9d04 	addi	r4,fp,-396
 2005f10:	2085883a 	add	r2,r4,r2
 2005f14:	10800f04 	addi	r2,r2,60
 2005f18:	10c00015 	stw	r3,0(r2)
	    ih = iq[jz-1]>>(7-q0);
 2005f1c:	e0bf9d17 	ldw	r2,-396(fp)
 2005f20:	10bfffc4 	addi	r2,r2,-1
 2005f24:	1085883a 	add	r2,r2,r2
 2005f28:	1085883a 	add	r2,r2,r2
 2005f2c:	e0ff9d04 	addi	r3,fp,-396
 2005f30:	1885883a 	add	r2,r3,r2
 2005f34:	10800f04 	addi	r2,r2,60
 2005f38:	10c00017 	ldw	r3,0(r2)
 2005f3c:	010001c4 	movi	r4,7
 2005f40:	e0bfa417 	ldw	r2,-368(fp)
 2005f44:	2085c83a 	sub	r2,r4,r2
 2005f48:	1885d83a 	sra	r2,r3,r2
 2005f4c:	e0bfa515 	stw	r2,-364(fp)
 2005f50:	00001306 	br	2005fa0 <__kernel_rem_pio2f+0x43c>
	} 
	else if(q0==0) ih = iq[jz-1]>>8;
 2005f54:	e0bfa417 	ldw	r2,-368(fp)
 2005f58:	10000b1e 	bne	r2,zero,2005f88 <__kernel_rem_pio2f+0x424>
 2005f5c:	e0bf9d17 	ldw	r2,-396(fp)
 2005f60:	10bfffc4 	addi	r2,r2,-1
 2005f64:	1085883a 	add	r2,r2,r2
 2005f68:	1085883a 	add	r2,r2,r2
 2005f6c:	e13f9d04 	addi	r4,fp,-396
 2005f70:	2085883a 	add	r2,r4,r2
 2005f74:	10800f04 	addi	r2,r2,60
 2005f78:	10800017 	ldw	r2,0(r2)
 2005f7c:	1005d23a 	srai	r2,r2,8
 2005f80:	e0bfa515 	stw	r2,-364(fp)
 2005f84:	00000606 	br	2005fa0 <__kernel_rem_pio2f+0x43c>
	else if(z>=(float)0.5) ih=2;
 2005f88:	e0ffa617 	ldw	r3,-360(fp)
 2005f8c:	008fc034 	movhi	r2,16128
 2005f90:	1885f932 	custom	228,r2,r3,r2
 2005f94:	10000226 	beq	r2,zero,2005fa0 <__kernel_rem_pio2f+0x43c>
 2005f98:	00800084 	movi	r2,2
 2005f9c:	e0bfa515 	stw	r2,-364(fp)

	if(ih>0) {	/* q > 0.5 */
 2005fa0:	e0bfa517 	ldw	r2,-364(fp)
 2005fa4:	00806c0e 	bge	zero,r2,2006158 <__kernel_rem_pio2f+0x5f4>
	    n += 1; carry = 0;
 2005fa8:	e0bfa017 	ldw	r2,-384(fp)
 2005fac:	10800044 	addi	r2,r2,1
 2005fb0:	e0bfa015 	stw	r2,-384(fp)
 2005fb4:	e03f9f15 	stw	zero,-388(fp)
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 2005fb8:	e03fa115 	stw	zero,-380(fp)
 2005fbc:	00002606 	br	2006058 <__kernel_rem_pio2f+0x4f4>
		j = iq[i];
 2005fc0:	e0bfa117 	ldw	r2,-380(fp)
 2005fc4:	1085883a 	add	r2,r2,r2
 2005fc8:	1085883a 	add	r2,r2,r2
 2005fcc:	e0ff9d04 	addi	r3,fp,-396
 2005fd0:	1885883a 	add	r2,r3,r2
 2005fd4:	10800f04 	addi	r2,r2,60
 2005fd8:	10800017 	ldw	r2,0(r2)
 2005fdc:	e0bfa215 	stw	r2,-376(fp)
		if(carry==0) {
 2005fe0:	e0bf9f17 	ldw	r2,-388(fp)
 2005fe4:	10000f1e 	bne	r2,zero,2006024 <__kernel_rem_pio2f+0x4c0>
		    if(j!=0) {
 2005fe8:	e0bfa217 	ldw	r2,-376(fp)
 2005fec:	10001726 	beq	r2,zero,200604c <__kernel_rem_pio2f+0x4e8>
			carry = 1; iq[i] = 0x100- j;
 2005ff0:	00800044 	movi	r2,1
 2005ff4:	e0bf9f15 	stw	r2,-388(fp)
 2005ff8:	00c04004 	movi	r3,256
 2005ffc:	e0bfa217 	ldw	r2,-376(fp)
 2006000:	1887c83a 	sub	r3,r3,r2
 2006004:	e0bfa117 	ldw	r2,-380(fp)
 2006008:	1085883a 	add	r2,r2,r2
 200600c:	1085883a 	add	r2,r2,r2
 2006010:	e13f9d04 	addi	r4,fp,-396
 2006014:	2085883a 	add	r2,r4,r2
 2006018:	10800f04 	addi	r2,r2,60
 200601c:	10c00015 	stw	r3,0(r2)
 2006020:	00000a06 	br	200604c <__kernel_rem_pio2f+0x4e8>
		    }
		} else  iq[i] = 0xff - j;
 2006024:	00c03fc4 	movi	r3,255
 2006028:	e0bfa217 	ldw	r2,-376(fp)
 200602c:	1887c83a 	sub	r3,r3,r2
 2006030:	e0bfa117 	ldw	r2,-380(fp)
 2006034:	1085883a 	add	r2,r2,r2
 2006038:	1085883a 	add	r2,r2,r2
 200603c:	e13f9d04 	addi	r4,fp,-396
 2006040:	2085883a 	add	r2,r4,r2
 2006044:	10800f04 	addi	r2,r2,60
 2006048:	10c00015 	stw	r3,0(r2)
	else if(q0==0) ih = iq[jz-1]>>8;
	else if(z>=(float)0.5) ih=2;

	if(ih>0) {	/* q > 0.5 */
	    n += 1; carry = 0;
	    for(i=0;i<jz ;i++) {	/* compute 1-q */
 200604c:	e0bfa117 	ldw	r2,-380(fp)
 2006050:	10800044 	addi	r2,r2,1
 2006054:	e0bfa115 	stw	r2,-380(fp)
 2006058:	e0ffa117 	ldw	r3,-380(fp)
 200605c:	e0bf9d17 	ldw	r2,-396(fp)
 2006060:	18bfd716 	blt	r3,r2,2005fc0 <__kernel_rem_pio2f+0x45c>
		    if(j!=0) {
			carry = 1; iq[i] = 0x100- j;
		    }
		} else  iq[i] = 0xff - j;
	    }
	    if(q0>0) {		/* rare case: chance is 1 in 12 */
 2006064:	e0bfa417 	ldw	r2,-368(fp)
 2006068:	00802a0e 	bge	zero,r2,2006114 <__kernel_rem_pio2f+0x5b0>
	        switch(q0) {
 200606c:	e0bfa417 	ldw	r2,-368(fp)
 2006070:	10c00060 	cmpeqi	r3,r2,1
 2006074:	1800031e 	bne	r3,zero,2006084 <__kernel_rem_pio2f+0x520>
 2006078:	108000a0 	cmpeqi	r2,r2,2
 200607c:	1000131e 	bne	r2,zero,20060cc <__kernel_rem_pio2f+0x568>
 2006080:	00002406 	br	2006114 <__kernel_rem_pio2f+0x5b0>
	        case 1:
	    	   iq[jz-1] &= 0x7f; break;
 2006084:	e0bf9d17 	ldw	r2,-396(fp)
 2006088:	10bfffc4 	addi	r2,r2,-1
 200608c:	e0ff9d17 	ldw	r3,-396(fp)
 2006090:	18ffffc4 	addi	r3,r3,-1
 2006094:	18c7883a 	add	r3,r3,r3
 2006098:	18c7883a 	add	r3,r3,r3
 200609c:	e13f9d04 	addi	r4,fp,-396
 20060a0:	20c7883a 	add	r3,r4,r3
 20060a4:	18c00f04 	addi	r3,r3,60
 20060a8:	18c00017 	ldw	r3,0(r3)
 20060ac:	18c01fcc 	andi	r3,r3,127
 20060b0:	1085883a 	add	r2,r2,r2
 20060b4:	1085883a 	add	r2,r2,r2
 20060b8:	e13f9d04 	addi	r4,fp,-396
 20060bc:	2085883a 	add	r2,r4,r2
 20060c0:	10800f04 	addi	r2,r2,60
 20060c4:	10c00015 	stw	r3,0(r2)
 20060c8:	00001206 	br	2006114 <__kernel_rem_pio2f+0x5b0>
	    	case 2:
	    	   iq[jz-1] &= 0x3f; break;
 20060cc:	e0bf9d17 	ldw	r2,-396(fp)
 20060d0:	10bfffc4 	addi	r2,r2,-1
 20060d4:	e0ff9d17 	ldw	r3,-396(fp)
 20060d8:	18ffffc4 	addi	r3,r3,-1
 20060dc:	18c7883a 	add	r3,r3,r3
 20060e0:	18c7883a 	add	r3,r3,r3
 20060e4:	e13f9d04 	addi	r4,fp,-396
 20060e8:	20c7883a 	add	r3,r4,r3
 20060ec:	18c00f04 	addi	r3,r3,60
 20060f0:	18c00017 	ldw	r3,0(r3)
 20060f4:	18c00fcc 	andi	r3,r3,63
 20060f8:	1085883a 	add	r2,r2,r2
 20060fc:	1085883a 	add	r2,r2,r2
 2006100:	e13f9d04 	addi	r4,fp,-396
 2006104:	2085883a 	add	r2,r4,r2
 2006108:	10800f04 	addi	r2,r2,60
 200610c:	10c00015 	stw	r3,0(r2)
 2006110:	0001883a 	nop
	        }
	    }
	    if(ih==2) {
 2006114:	e0bfa517 	ldw	r2,-364(fp)
 2006118:	10800098 	cmpnei	r2,r2,2
 200611c:	10000e1e 	bne	r2,zero,2006158 <__kernel_rem_pio2f+0x5f4>
		z = one - z;
 2006120:	00cfe034 	movhi	r3,16256
 2006124:	e0bfa617 	ldw	r2,-360(fp)
 2006128:	1885ffb2 	custom	254,r2,r3,r2
 200612c:	e0bfa615 	stw	r2,-360(fp)
		if(carry!=0) z -= scalbnf(one,(int)q0);
 2006130:	e0bf9f17 	ldw	r2,-388(fp)
 2006134:	10000826 	beq	r2,zero,2006158 <__kernel_rem_pio2f+0x5f4>
 2006138:	008fe034 	movhi	r2,16256
 200613c:	e17fa417 	ldw	r5,-368(fp)
 2006140:	1009883a 	mov	r4,r2
 2006144:	20071040 	call	2007104 <scalbnf>
 2006148:	1007883a 	mov	r3,r2
 200614c:	e0bfa617 	ldw	r2,-360(fp)
 2006150:	10c5ffb2 	custom	254,r2,r2,r3
 2006154:	e0bfa615 	stw	r2,-360(fp)
	    }
	}

    /* check if recomputation is needed */
	if(z==zero) {
 2006158:	0007883a 	mov	r3,zero
 200615c:	e0bfa617 	ldw	r2,-360(fp)
 2006160:	10c5f8b2 	custom	226,r2,r2,r3
 2006164:	1000721e 	bne	r2,zero,2006330 <__kernel_rem_pio2f+0x7cc>
	    j = 0;
 2006168:	e03fa215 	stw	zero,-376(fp)
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
 200616c:	e0bf9d17 	ldw	r2,-396(fp)
 2006170:	10bfffc4 	addi	r2,r2,-1
 2006174:	e0bfa115 	stw	r2,-380(fp)
 2006178:	00000d06 	br	20061b0 <__kernel_rem_pio2f+0x64c>
 200617c:	e0bfa117 	ldw	r2,-380(fp)
 2006180:	1085883a 	add	r2,r2,r2
 2006184:	1085883a 	add	r2,r2,r2
 2006188:	e0ff9d04 	addi	r3,fp,-396
 200618c:	1885883a 	add	r2,r3,r2
 2006190:	10800f04 	addi	r2,r2,60
 2006194:	10800017 	ldw	r2,0(r2)
 2006198:	e0ffa217 	ldw	r3,-376(fp)
 200619c:	1884b03a 	or	r2,r3,r2
 20061a0:	e0bfa215 	stw	r2,-376(fp)
 20061a4:	e0bfa117 	ldw	r2,-380(fp)
 20061a8:	10bfffc4 	addi	r2,r2,-1
 20061ac:	e0bfa115 	stw	r2,-380(fp)
 20061b0:	e0ffa117 	ldw	r3,-380(fp)
 20061b4:	e0bfa817 	ldw	r2,-352(fp)
 20061b8:	18bff00e 	bge	r3,r2,200617c <__kernel_rem_pio2f+0x618>
	    if(j==0) { /* need recomputation */
 20061bc:	e0bfa217 	ldw	r2,-376(fp)
 20061c0:	10005b1e 	bne	r2,zero,2006330 <__kernel_rem_pio2f+0x7cc>
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */
 20061c4:	00800044 	movi	r2,1
 20061c8:	e0bfa315 	stw	r2,-372(fp)
 20061cc:	00000306 	br	20061dc <__kernel_rem_pio2f+0x678>
 20061d0:	e0bfa317 	ldw	r2,-372(fp)
 20061d4:	10800044 	addi	r2,r2,1
 20061d8:	e0bfa315 	stw	r2,-372(fp)
 20061dc:	e0ffa817 	ldw	r3,-352(fp)
 20061e0:	e0bfa317 	ldw	r2,-372(fp)
 20061e4:	1885c83a 	sub	r2,r3,r2
 20061e8:	1085883a 	add	r2,r2,r2
 20061ec:	1085883a 	add	r2,r2,r2
 20061f0:	e13f9d04 	addi	r4,fp,-396
 20061f4:	2085883a 	add	r2,r4,r2
 20061f8:	10800f04 	addi	r2,r2,60
 20061fc:	10800017 	ldw	r2,0(r2)
 2006200:	103ff326 	beq	r2,zero,20061d0 <__kernel_rem_pio2f+0x66c>

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 2006204:	e0bf9d17 	ldw	r2,-396(fp)
 2006208:	10800044 	addi	r2,r2,1
 200620c:	e0bfa115 	stw	r2,-380(fp)
 2006210:	00003d06 	br	2006308 <__kernel_rem_pio2f+0x7a4>
		    f[jx+i] = (float) ipio2[jv+i];
 2006214:	e0ffaa17 	ldw	r3,-344(fp)
 2006218:	e0bfa117 	ldw	r2,-380(fp)
 200621c:	1885883a 	add	r2,r3,r2
 2006220:	e13f9e17 	ldw	r4,-392(fp)
 2006224:	e0ffa117 	ldw	r3,-380(fp)
 2006228:	20c7883a 	add	r3,r4,r3
 200622c:	18c7883a 	add	r3,r3,r3
 2006230:	18c7883a 	add	r3,r3,r3
 2006234:	1809883a 	mov	r4,r3
 2006238:	e0c00317 	ldw	r3,12(fp)
 200623c:	1907883a 	add	r3,r3,r4
 2006240:	18c00017 	ldw	r3,0(r3)
 2006244:	1807feb2 	custom	250,r3,r3,zero
 2006248:	1085883a 	add	r2,r2,r2
 200624c:	1085883a 	add	r2,r2,r2
 2006250:	e13f9d04 	addi	r4,fp,-396
 2006254:	2085883a 	add	r2,r4,r2
 2006258:	10802304 	addi	r2,r2,140
 200625c:	10c00015 	stw	r3,0(r2)
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
 2006260:	e03fa215 	stw	zero,-376(fp)
 2006264:	e03fa715 	stw	zero,-356(fp)
 2006268:	00001906 	br	20062d0 <__kernel_rem_pio2f+0x76c>
 200626c:	e0bfa217 	ldw	r2,-376(fp)
 2006270:	1085883a 	add	r2,r2,r2
 2006274:	1085883a 	add	r2,r2,r2
 2006278:	1007883a 	mov	r3,r2
 200627c:	e0bffc17 	ldw	r2,-16(fp)
 2006280:	10c5883a 	add	r2,r2,r3
 2006284:	10c00017 	ldw	r3,0(r2)
 2006288:	e13faa17 	ldw	r4,-344(fp)
 200628c:	e0bfa117 	ldw	r2,-380(fp)
 2006290:	2089883a 	add	r4,r4,r2
 2006294:	e0bfa217 	ldw	r2,-376(fp)
 2006298:	2085c83a 	sub	r2,r4,r2
 200629c:	1085883a 	add	r2,r2,r2
 20062a0:	1085883a 	add	r2,r2,r2
 20062a4:	e13f9d04 	addi	r4,fp,-396
 20062a8:	2085883a 	add	r2,r4,r2
 20062ac:	11002304 	addi	r4,r2,140
 20062b0:	20800017 	ldw	r2,0(r4)
 20062b4:	1885ff32 	custom	252,r2,r3,r2
 20062b8:	e0ffa717 	ldw	r3,-356(fp)
 20062bc:	1885ff72 	custom	253,r2,r3,r2
 20062c0:	e0bfa715 	stw	r2,-356(fp)
 20062c4:	e0bfa217 	ldw	r2,-376(fp)
 20062c8:	10800044 	addi	r2,r2,1
 20062cc:	e0bfa215 	stw	r2,-376(fp)
 20062d0:	e0bfa217 	ldw	r2,-376(fp)
 20062d4:	e0ffaa17 	ldw	r3,-344(fp)
 20062d8:	18bfe40e 	bge	r3,r2,200626c <__kernel_rem_pio2f+0x708>
		    q[i] = fw;
 20062dc:	e0bfa117 	ldw	r2,-380(fp)
 20062e0:	1085883a 	add	r2,r2,r2
 20062e4:	1085883a 	add	r2,r2,r2
 20062e8:	e0ff9d04 	addi	r3,fp,-396
 20062ec:	1885883a 	add	r2,r3,r2
 20062f0:	10804b04 	addi	r2,r2,300
 20062f4:	e0ffa717 	ldw	r3,-356(fp)
 20062f8:	10c00015 	stw	r3,0(r2)
	    j = 0;
	    for (i=jz-1;i>=jk;i--) j |= iq[i];
	    if(j==0) { /* need recomputation */
		for(k=1;iq[jk-k]==0;k++);   /* k = no. of terms needed */

		for(i=jz+1;i<=jz+k;i++) {   /* add q[jz+1] to q[jz+k] */
 20062fc:	e0bfa117 	ldw	r2,-380(fp)
 2006300:	10800044 	addi	r2,r2,1
 2006304:	e0bfa115 	stw	r2,-380(fp)
 2006308:	e0ff9d17 	ldw	r3,-396(fp)
 200630c:	e0bfa317 	ldw	r2,-372(fp)
 2006310:	1887883a 	add	r3,r3,r2
 2006314:	e0bfa117 	ldw	r2,-380(fp)
 2006318:	18bfbe0e 	bge	r3,r2,2006214 <__kernel_rem_pio2f+0x6b0>
		    f[jx+i] = (float) ipio2[jv+i];
		    for(j=0,fw=0.0;j<=jx;j++) fw += x[j]*f[jx+i-j];
		    q[i] = fw;
		}
		jz += k;
 200631c:	e0ff9d17 	ldw	r3,-396(fp)
 2006320:	e0bfa317 	ldw	r2,-372(fp)
 2006324:	1885883a 	add	r2,r3,r2
 2006328:	e0bf9d15 	stw	r2,-396(fp)
		goto recompute;
 200632c:	003e8806 	br	2005d50 <__kernel_rem_pio2f+0x1ec>
	    }
	}

    /* chop off zero terms */
	if(z==(float)0.0) {
 2006330:	e0bfa617 	ldw	r2,-360(fp)
 2006334:	0007883a 	mov	r3,zero
 2006338:	10c5f8b2 	custom	226,r2,r2,r3
 200633c:	1000161e 	bne	r2,zero,2006398 <__kernel_rem_pio2f+0x834>
	    jz -= 1; q0 -= 8;
 2006340:	e0bf9d17 	ldw	r2,-396(fp)
 2006344:	10bfffc4 	addi	r2,r2,-1
 2006348:	e0bf9d15 	stw	r2,-396(fp)
 200634c:	e0bfa417 	ldw	r2,-368(fp)
 2006350:	10bffe04 	addi	r2,r2,-8
 2006354:	e0bfa415 	stw	r2,-368(fp)
	    while(iq[jz]==0) { jz--; q0-=8;}
 2006358:	00000606 	br	2006374 <__kernel_rem_pio2f+0x810>
 200635c:	e0bf9d17 	ldw	r2,-396(fp)
 2006360:	10bfffc4 	addi	r2,r2,-1
 2006364:	e0bf9d15 	stw	r2,-396(fp)
 2006368:	e0bfa417 	ldw	r2,-368(fp)
 200636c:	10bffe04 	addi	r2,r2,-8
 2006370:	e0bfa415 	stw	r2,-368(fp)
 2006374:	e0bf9d17 	ldw	r2,-396(fp)
 2006378:	1085883a 	add	r2,r2,r2
 200637c:	1085883a 	add	r2,r2,r2
 2006380:	e13f9d04 	addi	r4,fp,-396
 2006384:	2085883a 	add	r2,r4,r2
 2006388:	10800f04 	addi	r2,r2,60
 200638c:	10800017 	ldw	r2,0(r2)
 2006390:	103ff226 	beq	r2,zero,200635c <__kernel_rem_pio2f+0x7f8>
 2006394:	00003606 	br	2006470 <__kernel_rem_pio2f+0x90c>
	} else { /* break z into 8-bit if necessary */
	    z = scalbnf(z,-(int)q0);
 2006398:	e0bfa417 	ldw	r2,-368(fp)
 200639c:	0085c83a 	sub	r2,zero,r2
 20063a0:	100b883a 	mov	r5,r2
 20063a4:	e13fa617 	ldw	r4,-360(fp)
 20063a8:	20071040 	call	2007104 <scalbnf>
 20063ac:	e0bfa615 	stw	r2,-360(fp)
	    if(z>=two8) { 
 20063b0:	0090e034 	movhi	r2,17280
 20063b4:	e0ffa617 	ldw	r3,-360(fp)
 20063b8:	1885f932 	custom	228,r2,r3,r2
 20063bc:	10002326 	beq	r2,zero,200644c <__kernel_rem_pio2f+0x8e8>
		fw = (float)((__int32_t)(twon8*z));
 20063c0:	00cee034 	movhi	r3,15232
 20063c4:	e0bfa617 	ldw	r2,-360(fp)
 20063c8:	1885ff32 	custom	252,r2,r3,r2
 20063cc:	1005fe72 	custom	249,r2,r2,zero
 20063d0:	1005feb2 	custom	250,r2,r2,zero
 20063d4:	e0bfa715 	stw	r2,-356(fp)
		iq[jz] = (__int32_t)(z-two8*fw);
 20063d8:	00d0e034 	movhi	r3,17280
 20063dc:	e0bfa717 	ldw	r2,-356(fp)
 20063e0:	1885ff32 	custom	252,r2,r3,r2
 20063e4:	e0ffa617 	ldw	r3,-360(fp)
 20063e8:	1885ffb2 	custom	254,r2,r3,r2
 20063ec:	1007fe72 	custom	249,r3,r2,zero
 20063f0:	e0bf9d17 	ldw	r2,-396(fp)
 20063f4:	1085883a 	add	r2,r2,r2
 20063f8:	1085883a 	add	r2,r2,r2
 20063fc:	e13f9d04 	addi	r4,fp,-396
 2006400:	2085883a 	add	r2,r4,r2
 2006404:	10800f04 	addi	r2,r2,60
 2006408:	10c00015 	stw	r3,0(r2)
		jz += 1; q0 += 8;
 200640c:	e0bf9d17 	ldw	r2,-396(fp)
 2006410:	10800044 	addi	r2,r2,1
 2006414:	e0bf9d15 	stw	r2,-396(fp)
 2006418:	e0bfa417 	ldw	r2,-368(fp)
 200641c:	10800204 	addi	r2,r2,8
 2006420:	e0bfa415 	stw	r2,-368(fp)
		iq[jz] = (__int32_t) fw;
 2006424:	e0bfa717 	ldw	r2,-356(fp)
 2006428:	1007fe72 	custom	249,r3,r2,zero
 200642c:	e0bf9d17 	ldw	r2,-396(fp)
 2006430:	1085883a 	add	r2,r2,r2
 2006434:	1085883a 	add	r2,r2,r2
 2006438:	e13f9d04 	addi	r4,fp,-396
 200643c:	2085883a 	add	r2,r4,r2
 2006440:	10800f04 	addi	r2,r2,60
 2006444:	10c00015 	stw	r3,0(r2)
 2006448:	00000906 	br	2006470 <__kernel_rem_pio2f+0x90c>
	    } else iq[jz] = (__int32_t) z ;
 200644c:	e0bfa617 	ldw	r2,-360(fp)
 2006450:	1007fe72 	custom	249,r3,r2,zero
 2006454:	e0bf9d17 	ldw	r2,-396(fp)
 2006458:	1085883a 	add	r2,r2,r2
 200645c:	1085883a 	add	r2,r2,r2
 2006460:	e13f9d04 	addi	r4,fp,-396
 2006464:	2085883a 	add	r2,r4,r2
 2006468:	10800f04 	addi	r2,r2,60
 200646c:	10c00015 	stw	r3,0(r2)
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
 2006470:	008fe034 	movhi	r2,16256
 2006474:	e17fa417 	ldw	r5,-368(fp)
 2006478:	1009883a 	mov	r4,r2
 200647c:	20071040 	call	2007104 <scalbnf>
 2006480:	e0bfa715 	stw	r2,-356(fp)
	for(i=jz;i>=0;i--) {
 2006484:	e0bf9d17 	ldw	r2,-396(fp)
 2006488:	e0bfa115 	stw	r2,-380(fp)
 200648c:	00001806 	br	20064f0 <__kernel_rem_pio2f+0x98c>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
 2006490:	e0bfa117 	ldw	r2,-380(fp)
 2006494:	1085883a 	add	r2,r2,r2
 2006498:	1085883a 	add	r2,r2,r2
 200649c:	e0ff9d04 	addi	r3,fp,-396
 20064a0:	1885883a 	add	r2,r3,r2
 20064a4:	10800f04 	addi	r2,r2,60
 20064a8:	10800017 	ldw	r2,0(r2)
 20064ac:	1007feb2 	custom	250,r3,r2,zero
 20064b0:	e0bfa717 	ldw	r2,-356(fp)
 20064b4:	1887ff32 	custom	252,r3,r3,r2
 20064b8:	e0bfa117 	ldw	r2,-380(fp)
 20064bc:	1085883a 	add	r2,r2,r2
 20064c0:	1085883a 	add	r2,r2,r2
 20064c4:	e13f9d04 	addi	r4,fp,-396
 20064c8:	2085883a 	add	r2,r4,r2
 20064cc:	10804b04 	addi	r2,r2,300
 20064d0:	10c00015 	stw	r3,0(r2)
 20064d4:	008ee034 	movhi	r2,15232
 20064d8:	e0ffa717 	ldw	r3,-356(fp)
 20064dc:	1885ff32 	custom	252,r2,r3,r2
 20064e0:	e0bfa715 	stw	r2,-356(fp)
	    } else iq[jz] = (__int32_t) z ;
	}

    /* convert integer "bit" chunk to floating-point value */
	fw = scalbnf(one,(int)q0);
	for(i=jz;i>=0;i--) {
 20064e4:	e0bfa117 	ldw	r2,-380(fp)
 20064e8:	10bfffc4 	addi	r2,r2,-1
 20064ec:	e0bfa115 	stw	r2,-380(fp)
 20064f0:	e0bfa117 	ldw	r2,-380(fp)
 20064f4:	103fe60e 	bge	r2,zero,2006490 <__kernel_rem_pio2f+0x92c>
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 20064f8:	e0bf9d17 	ldw	r2,-396(fp)
 20064fc:	e0bfa115 	stw	r2,-380(fp)
 2006500:	00002f06 	br	20065c0 <__kernel_rem_pio2f+0xa5c>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
 2006504:	e03fa715 	stw	zero,-356(fp)
 2006508:	e03fa315 	stw	zero,-372(fp)
 200650c:	00001706 	br	200656c <__kernel_rem_pio2f+0xa08>
 2006510:	008080b4 	movhi	r2,514
 2006514:	108beb04 	addi	r2,r2,12204
 2006518:	e0ffa317 	ldw	r3,-372(fp)
 200651c:	18c7883a 	add	r3,r3,r3
 2006520:	18c7883a 	add	r3,r3,r3
 2006524:	10c5883a 	add	r2,r2,r3
 2006528:	10c00017 	ldw	r3,0(r2)
 200652c:	e13fa117 	ldw	r4,-380(fp)
 2006530:	e0bfa317 	ldw	r2,-372(fp)
 2006534:	2085883a 	add	r2,r4,r2
 2006538:	1085883a 	add	r2,r2,r2
 200653c:	1085883a 	add	r2,r2,r2
 2006540:	e13f9d04 	addi	r4,fp,-396
 2006544:	2085883a 	add	r2,r4,r2
 2006548:	11004b04 	addi	r4,r2,300
 200654c:	20800017 	ldw	r2,0(r4)
 2006550:	1885ff32 	custom	252,r2,r3,r2
 2006554:	e0ffa717 	ldw	r3,-356(fp)
 2006558:	1885ff72 	custom	253,r2,r3,r2
 200655c:	e0bfa715 	stw	r2,-356(fp)
 2006560:	e0bfa317 	ldw	r2,-372(fp)
 2006564:	10800044 	addi	r2,r2,1
 2006568:	e0bfa315 	stw	r2,-372(fp)
 200656c:	e0bfa317 	ldw	r2,-372(fp)
 2006570:	e0ffa917 	ldw	r3,-348(fp)
 2006574:	18800516 	blt	r3,r2,200658c <__kernel_rem_pio2f+0xa28>
 2006578:	e0ff9d17 	ldw	r3,-396(fp)
 200657c:	e0bfa117 	ldw	r2,-380(fp)
 2006580:	1887c83a 	sub	r3,r3,r2
 2006584:	e0bfa317 	ldw	r2,-372(fp)
 2006588:	18bfe10e 	bge	r3,r2,2006510 <__kernel_rem_pio2f+0x9ac>
	    fq[jz-i] = fw;
 200658c:	e0ff9d17 	ldw	r3,-396(fp)
 2006590:	e0bfa117 	ldw	r2,-380(fp)
 2006594:	1885c83a 	sub	r2,r3,r2
 2006598:	1085883a 	add	r2,r2,r2
 200659c:	1085883a 	add	r2,r2,r2
 20065a0:	e0ff9d04 	addi	r3,fp,-396
 20065a4:	1885883a 	add	r2,r3,r2
 20065a8:	10803704 	addi	r2,r2,220
 20065ac:	e0ffa717 	ldw	r3,-356(fp)
 20065b0:	10c00015 	stw	r3,0(r2)
	for(i=jz;i>=0;i--) {
	    q[i] = fw*(float)iq[i]; fw*=twon8;
	}

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
	for(i=jz;i>=0;i--) {
 20065b4:	e0bfa117 	ldw	r2,-380(fp)
 20065b8:	10bfffc4 	addi	r2,r2,-1
 20065bc:	e0bfa115 	stw	r2,-380(fp)
 20065c0:	e0bfa117 	ldw	r2,-380(fp)
 20065c4:	103fcf0e 	bge	r2,zero,2006504 <__kernel_rem_pio2f+0x9a0>
	    for(fw=0.0,k=0;k<=jp&&k<=jz-i;k++) fw += PIo2[k]*q[i+k];
	    fq[jz-i] = fw;
	}

    /* compress fq[] into y[] */
	switch(prec) {
 20065c8:	e0800217 	ldw	r2,8(fp)
 20065cc:	10c000c8 	cmpgei	r3,r2,3
 20065d0:	1800031e 	bne	r3,zero,20065e0 <__kernel_rem_pio2f+0xa7c>
 20065d4:	00802116 	blt	zero,r2,200665c <__kernel_rem_pio2f+0xaf8>
 20065d8:	10000426 	beq	r2,zero,20065ec <__kernel_rem_pio2f+0xa88>
 20065dc:	00010206 	br	20069e8 <__kernel_rem_pio2f+0xe84>
 20065e0:	108000e0 	cmpeqi	r2,r2,3
 20065e4:	1000591e 	bne	r2,zero,200674c <__kernel_rem_pio2f+0xbe8>
 20065e8:	0000ff06 	br	20069e8 <__kernel_rem_pio2f+0xe84>
	    case 0:
		fw = 0.0;
 20065ec:	e03fa715 	stw	zero,-356(fp)
		for (i=jz;i>=0;i--) fw += fq[i];
 20065f0:	e0bf9d17 	ldw	r2,-396(fp)
 20065f4:	e0bfa115 	stw	r2,-380(fp)
 20065f8:	00000d06 	br	2006630 <__kernel_rem_pio2f+0xacc>
 20065fc:	e0bfa117 	ldw	r2,-380(fp)
 2006600:	1085883a 	add	r2,r2,r2
 2006604:	1085883a 	add	r2,r2,r2
 2006608:	e13f9d04 	addi	r4,fp,-396
 200660c:	2085883a 	add	r2,r4,r2
 2006610:	10c03704 	addi	r3,r2,220
 2006614:	18800017 	ldw	r2,0(r3)
 2006618:	e0ffa717 	ldw	r3,-356(fp)
 200661c:	1885ff72 	custom	253,r2,r3,r2
 2006620:	e0bfa715 	stw	r2,-356(fp)
 2006624:	e0bfa117 	ldw	r2,-380(fp)
 2006628:	10bfffc4 	addi	r2,r2,-1
 200662c:	e0bfa115 	stw	r2,-380(fp)
 2006630:	e0bfa117 	ldw	r2,-380(fp)
 2006634:	103ff10e 	bge	r2,zero,20065fc <__kernel_rem_pio2f+0xa98>
		y[0] = (ih==0)? fw: -fw; 
 2006638:	e0bfa517 	ldw	r2,-364(fp)
 200663c:	10000326 	beq	r2,zero,200664c <__kernel_rem_pio2f+0xae8>
 2006640:	e0bfa717 	ldw	r2,-356(fp)
 2006644:	1005f872 	custom	225,r2,r2,zero
 2006648:	00000106 	br	2006650 <__kernel_rem_pio2f+0xaec>
 200664c:	e0bfa717 	ldw	r2,-356(fp)
 2006650:	e0fffd17 	ldw	r3,-12(fp)
 2006654:	18800015 	stw	r2,0(r3)
		break;
 2006658:	0000e306 	br	20069e8 <__kernel_rem_pio2f+0xe84>
	    case 1:
	    case 2:
		fw = 0.0;
 200665c:	e03fa715 	stw	zero,-356(fp)
		for (i=jz;i>=0;i--) fw += fq[i]; 
 2006660:	e0bf9d17 	ldw	r2,-396(fp)
 2006664:	e0bfa115 	stw	r2,-380(fp)
 2006668:	00000d06 	br	20066a0 <__kernel_rem_pio2f+0xb3c>
 200666c:	e0bfa117 	ldw	r2,-380(fp)
 2006670:	1085883a 	add	r2,r2,r2
 2006674:	1085883a 	add	r2,r2,r2
 2006678:	e0ff9d04 	addi	r3,fp,-396
 200667c:	1885883a 	add	r2,r3,r2
 2006680:	10c03704 	addi	r3,r2,220
 2006684:	18800017 	ldw	r2,0(r3)
 2006688:	e0ffa717 	ldw	r3,-356(fp)
 200668c:	1885ff72 	custom	253,r2,r3,r2
 2006690:	e0bfa715 	stw	r2,-356(fp)
 2006694:	e0bfa117 	ldw	r2,-380(fp)
 2006698:	10bfffc4 	addi	r2,r2,-1
 200669c:	e0bfa115 	stw	r2,-380(fp)
 20066a0:	e0bfa117 	ldw	r2,-380(fp)
 20066a4:	103ff10e 	bge	r2,zero,200666c <__kernel_rem_pio2f+0xb08>
		y[0] = (ih==0)? fw: -fw; 
 20066a8:	e0bfa517 	ldw	r2,-364(fp)
 20066ac:	10000326 	beq	r2,zero,20066bc <__kernel_rem_pio2f+0xb58>
 20066b0:	e0bfa717 	ldw	r2,-356(fp)
 20066b4:	1005f872 	custom	225,r2,r2,zero
 20066b8:	00000106 	br	20066c0 <__kernel_rem_pio2f+0xb5c>
 20066bc:	e0bfa717 	ldw	r2,-356(fp)
 20066c0:	e0fffd17 	ldw	r3,-12(fp)
 20066c4:	18800015 	stw	r2,0(r3)
		fw = fq[0]-fw;
 20066c8:	e0ffd417 	ldw	r3,-176(fp)
 20066cc:	e0bfa717 	ldw	r2,-356(fp)
 20066d0:	1885ffb2 	custom	254,r2,r3,r2
 20066d4:	e0bfa715 	stw	r2,-356(fp)
		for (i=1;i<=jz;i++) fw += fq[i];
 20066d8:	00800044 	movi	r2,1
 20066dc:	e0bfa115 	stw	r2,-380(fp)
 20066e0:	00000d06 	br	2006718 <__kernel_rem_pio2f+0xbb4>
 20066e4:	e0bfa117 	ldw	r2,-380(fp)
 20066e8:	1085883a 	add	r2,r2,r2
 20066ec:	1085883a 	add	r2,r2,r2
 20066f0:	e13f9d04 	addi	r4,fp,-396
 20066f4:	2085883a 	add	r2,r4,r2
 20066f8:	10c03704 	addi	r3,r2,220
 20066fc:	18800017 	ldw	r2,0(r3)
 2006700:	e0ffa717 	ldw	r3,-356(fp)
 2006704:	1885ff72 	custom	253,r2,r3,r2
 2006708:	e0bfa715 	stw	r2,-356(fp)
 200670c:	e0bfa117 	ldw	r2,-380(fp)
 2006710:	10800044 	addi	r2,r2,1
 2006714:	e0bfa115 	stw	r2,-380(fp)
 2006718:	e0bfa117 	ldw	r2,-380(fp)
 200671c:	e0ff9d17 	ldw	r3,-396(fp)
 2006720:	18bff00e 	bge	r3,r2,20066e4 <__kernel_rem_pio2f+0xb80>
		y[1] = (ih==0)? fw: -fw; 
 2006724:	e0bffd17 	ldw	r2,-12(fp)
 2006728:	10c00104 	addi	r3,r2,4
 200672c:	e0bfa517 	ldw	r2,-364(fp)
 2006730:	10000326 	beq	r2,zero,2006740 <__kernel_rem_pio2f+0xbdc>
 2006734:	e0bfa717 	ldw	r2,-356(fp)
 2006738:	1005f872 	custom	225,r2,r2,zero
 200673c:	00000106 	br	2006744 <__kernel_rem_pio2f+0xbe0>
 2006740:	e0bfa717 	ldw	r2,-356(fp)
 2006744:	18800015 	stw	r2,0(r3)
		break;
 2006748:	0000a706 	br	20069e8 <__kernel_rem_pio2f+0xe84>
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 200674c:	e0bf9d17 	ldw	r2,-396(fp)
 2006750:	e0bfa115 	stw	r2,-380(fp)
 2006754:	00003606 	br	2006830 <__kernel_rem_pio2f+0xccc>
		    fw      = fq[i-1]+fq[i]; 
 2006758:	e0bfa117 	ldw	r2,-380(fp)
 200675c:	10bfffc4 	addi	r2,r2,-1
 2006760:	1085883a 	add	r2,r2,r2
 2006764:	1085883a 	add	r2,r2,r2
 2006768:	e0ff9d04 	addi	r3,fp,-396
 200676c:	1885883a 	add	r2,r3,r2
 2006770:	10803704 	addi	r2,r2,220
 2006774:	10c00017 	ldw	r3,0(r2)
 2006778:	e0bfa117 	ldw	r2,-380(fp)
 200677c:	1085883a 	add	r2,r2,r2
 2006780:	1085883a 	add	r2,r2,r2
 2006784:	e13f9d04 	addi	r4,fp,-396
 2006788:	2085883a 	add	r2,r4,r2
 200678c:	11003704 	addi	r4,r2,220
 2006790:	20800017 	ldw	r2,0(r4)
 2006794:	1885ff72 	custom	253,r2,r3,r2
 2006798:	e0bfa715 	stw	r2,-356(fp)
		    fq[i]  += fq[i-1]-fw;
 200679c:	e0bfa117 	ldw	r2,-380(fp)
 20067a0:	1085883a 	add	r2,r2,r2
 20067a4:	1085883a 	add	r2,r2,r2
 20067a8:	e0ff9d04 	addi	r3,fp,-396
 20067ac:	1885883a 	add	r2,r3,r2
 20067b0:	10803704 	addi	r2,r2,220
 20067b4:	10c00017 	ldw	r3,0(r2)
 20067b8:	e0bfa117 	ldw	r2,-380(fp)
 20067bc:	10bfffc4 	addi	r2,r2,-1
 20067c0:	1085883a 	add	r2,r2,r2
 20067c4:	1085883a 	add	r2,r2,r2
 20067c8:	e13f9d04 	addi	r4,fp,-396
 20067cc:	2085883a 	add	r2,r4,r2
 20067d0:	10803704 	addi	r2,r2,220
 20067d4:	11000017 	ldw	r4,0(r2)
 20067d8:	e0bfa717 	ldw	r2,-356(fp)
 20067dc:	2085ffb2 	custom	254,r2,r4,r2
 20067e0:	1887ff72 	custom	253,r3,r3,r2
 20067e4:	e0bfa117 	ldw	r2,-380(fp)
 20067e8:	1085883a 	add	r2,r2,r2
 20067ec:	1085883a 	add	r2,r2,r2
 20067f0:	e13f9d04 	addi	r4,fp,-396
 20067f4:	2085883a 	add	r2,r4,r2
 20067f8:	10803704 	addi	r2,r2,220
 20067fc:	10c00015 	stw	r3,0(r2)
		    fq[i-1] = fw;
 2006800:	e0bfa117 	ldw	r2,-380(fp)
 2006804:	10bfffc4 	addi	r2,r2,-1
 2006808:	1085883a 	add	r2,r2,r2
 200680c:	1085883a 	add	r2,r2,r2
 2006810:	e0ff9d04 	addi	r3,fp,-396
 2006814:	1885883a 	add	r2,r3,r2
 2006818:	10803704 	addi	r2,r2,220
 200681c:	e0ffa717 	ldw	r3,-356(fp)
 2006820:	10c00015 	stw	r3,0(r2)
		fw = fq[0]-fw;
		for (i=1;i<=jz;i++) fw += fq[i];
		y[1] = (ih==0)? fw: -fw; 
		break;
	    case 3:	/* painful */
		for (i=jz;i>0;i--) {
 2006824:	e0bfa117 	ldw	r2,-380(fp)
 2006828:	10bfffc4 	addi	r2,r2,-1
 200682c:	e0bfa115 	stw	r2,-380(fp)
 2006830:	e0bfa117 	ldw	r2,-380(fp)
 2006834:	00bfc816 	blt	zero,r2,2006758 <__kernel_rem_pio2f+0xbf4>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 2006838:	e0bf9d17 	ldw	r2,-396(fp)
 200683c:	e0bfa115 	stw	r2,-380(fp)
 2006840:	00003606 	br	200691c <__kernel_rem_pio2f+0xdb8>
		    fw      = fq[i-1]+fq[i]; 
 2006844:	e0bfa117 	ldw	r2,-380(fp)
 2006848:	10bfffc4 	addi	r2,r2,-1
 200684c:	1085883a 	add	r2,r2,r2
 2006850:	1085883a 	add	r2,r2,r2
 2006854:	e13f9d04 	addi	r4,fp,-396
 2006858:	2085883a 	add	r2,r4,r2
 200685c:	10803704 	addi	r2,r2,220
 2006860:	10c00017 	ldw	r3,0(r2)
 2006864:	e0bfa117 	ldw	r2,-380(fp)
 2006868:	1085883a 	add	r2,r2,r2
 200686c:	1085883a 	add	r2,r2,r2
 2006870:	e13f9d04 	addi	r4,fp,-396
 2006874:	2085883a 	add	r2,r4,r2
 2006878:	11003704 	addi	r4,r2,220
 200687c:	20800017 	ldw	r2,0(r4)
 2006880:	1885ff72 	custom	253,r2,r3,r2
 2006884:	e0bfa715 	stw	r2,-356(fp)
		    fq[i]  += fq[i-1]-fw;
 2006888:	e0bfa117 	ldw	r2,-380(fp)
 200688c:	1085883a 	add	r2,r2,r2
 2006890:	1085883a 	add	r2,r2,r2
 2006894:	e0ff9d04 	addi	r3,fp,-396
 2006898:	1885883a 	add	r2,r3,r2
 200689c:	10803704 	addi	r2,r2,220
 20068a0:	10c00017 	ldw	r3,0(r2)
 20068a4:	e0bfa117 	ldw	r2,-380(fp)
 20068a8:	10bfffc4 	addi	r2,r2,-1
 20068ac:	1085883a 	add	r2,r2,r2
 20068b0:	1085883a 	add	r2,r2,r2
 20068b4:	e13f9d04 	addi	r4,fp,-396
 20068b8:	2085883a 	add	r2,r4,r2
 20068bc:	10803704 	addi	r2,r2,220
 20068c0:	11000017 	ldw	r4,0(r2)
 20068c4:	e0bfa717 	ldw	r2,-356(fp)
 20068c8:	2085ffb2 	custom	254,r2,r4,r2
 20068cc:	1887ff72 	custom	253,r3,r3,r2
 20068d0:	e0bfa117 	ldw	r2,-380(fp)
 20068d4:	1085883a 	add	r2,r2,r2
 20068d8:	1085883a 	add	r2,r2,r2
 20068dc:	e13f9d04 	addi	r4,fp,-396
 20068e0:	2085883a 	add	r2,r4,r2
 20068e4:	10803704 	addi	r2,r2,220
 20068e8:	10c00015 	stw	r3,0(r2)
		    fq[i-1] = fw;
 20068ec:	e0bfa117 	ldw	r2,-380(fp)
 20068f0:	10bfffc4 	addi	r2,r2,-1
 20068f4:	1085883a 	add	r2,r2,r2
 20068f8:	1085883a 	add	r2,r2,r2
 20068fc:	e0ff9d04 	addi	r3,fp,-396
 2006900:	1885883a 	add	r2,r3,r2
 2006904:	10803704 	addi	r2,r2,220
 2006908:	e0ffa717 	ldw	r3,-356(fp)
 200690c:	10c00015 	stw	r3,0(r2)
		for (i=jz;i>0;i--) {
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (i=jz;i>1;i--) {
 2006910:	e0bfa117 	ldw	r2,-380(fp)
 2006914:	10bfffc4 	addi	r2,r2,-1
 2006918:	e0bfa115 	stw	r2,-380(fp)
 200691c:	e0bfa117 	ldw	r2,-380(fp)
 2006920:	10800088 	cmpgei	r2,r2,2
 2006924:	103fc71e 	bne	r2,zero,2006844 <__kernel_rem_pio2f+0xce0>
		    fw      = fq[i-1]+fq[i]; 
		    fq[i]  += fq[i-1]-fw;
		    fq[i-1] = fw;
		}
		for (fw=0.0,i=jz;i>=2;i--) fw += fq[i]; 
 2006928:	e03fa715 	stw	zero,-356(fp)
 200692c:	e0bf9d17 	ldw	r2,-396(fp)
 2006930:	e0bfa115 	stw	r2,-380(fp)
 2006934:	00000d06 	br	200696c <__kernel_rem_pio2f+0xe08>
 2006938:	e0bfa117 	ldw	r2,-380(fp)
 200693c:	1085883a 	add	r2,r2,r2
 2006940:	1085883a 	add	r2,r2,r2
 2006944:	e13f9d04 	addi	r4,fp,-396
 2006948:	2085883a 	add	r2,r4,r2
 200694c:	10c03704 	addi	r3,r2,220
 2006950:	18800017 	ldw	r2,0(r3)
 2006954:	e0ffa717 	ldw	r3,-356(fp)
 2006958:	1885ff72 	custom	253,r2,r3,r2
 200695c:	e0bfa715 	stw	r2,-356(fp)
 2006960:	e0bfa117 	ldw	r2,-380(fp)
 2006964:	10bfffc4 	addi	r2,r2,-1
 2006968:	e0bfa115 	stw	r2,-380(fp)
 200696c:	e0bfa117 	ldw	r2,-380(fp)
 2006970:	10800088 	cmpgei	r2,r2,2
 2006974:	103ff01e 	bne	r2,zero,2006938 <__kernel_rem_pio2f+0xdd4>
		if(ih==0) {
 2006978:	e0bfa517 	ldw	r2,-364(fp)
 200697c:	10000c1e 	bne	r2,zero,20069b0 <__kernel_rem_pio2f+0xe4c>
		    y[0] =  fq[0]; y[1] =  fq[1]; y[2] =  fw;
 2006980:	e0ffd417 	ldw	r3,-176(fp)
 2006984:	e0bffd17 	ldw	r2,-12(fp)
 2006988:	10c00015 	stw	r3,0(r2)
 200698c:	e0bffd17 	ldw	r2,-12(fp)
 2006990:	10800104 	addi	r2,r2,4
 2006994:	e0ffd517 	ldw	r3,-172(fp)
 2006998:	10c00015 	stw	r3,0(r2)
 200699c:	e0bffd17 	ldw	r2,-12(fp)
 20069a0:	10800204 	addi	r2,r2,8
 20069a4:	e0ffa717 	ldw	r3,-356(fp)
 20069a8:	10c00015 	stw	r3,0(r2)
 20069ac:	00000e06 	br	20069e8 <__kernel_rem_pio2f+0xe84>
		} else {
		    y[0] = -fq[0]; y[1] = -fq[1]; y[2] = -fw;
 20069b0:	e0bfd417 	ldw	r2,-176(fp)
 20069b4:	1007f872 	custom	225,r3,r2,zero
 20069b8:	e0bffd17 	ldw	r2,-12(fp)
 20069bc:	10c00015 	stw	r3,0(r2)
 20069c0:	e0bffd17 	ldw	r2,-12(fp)
 20069c4:	10800104 	addi	r2,r2,4
 20069c8:	e0ffd517 	ldw	r3,-172(fp)
 20069cc:	1807f872 	custom	225,r3,r3,zero
 20069d0:	10c00015 	stw	r3,0(r2)
 20069d4:	e0bffd17 	ldw	r2,-12(fp)
 20069d8:	10800204 	addi	r2,r2,8
 20069dc:	e0ffa717 	ldw	r3,-356(fp)
 20069e0:	1807f872 	custom	225,r3,r3,zero
 20069e4:	10c00015 	stw	r3,0(r2)
		}
	}
	return n&7;
 20069e8:	e0bfa017 	ldw	r2,-384(fp)
 20069ec:	108001cc 	andi	r2,r2,7
}
 20069f0:	e037883a 	mov	sp,fp
 20069f4:	dfc00117 	ldw	ra,4(sp)
 20069f8:	df000017 	ldw	fp,0(sp)
 20069fc:	dec00204 	addi	sp,sp,8
 2006a00:	f800283a 	ret

02006a04 <__kernel_sinf>:
	float __kernel_sinf(float x, float y, int iy)
#else
	float __kernel_sinf(x, y, iy)
	float x,y; int iy;		/* iy=0 if y is zero */
#endif
{
 2006a04:	defff704 	addi	sp,sp,-36
 2006a08:	df000815 	stw	fp,32(sp)
 2006a0c:	df000804 	addi	fp,sp,32
 2006a10:	e13ffd15 	stw	r4,-12(fp)
 2006a14:	e17ffe15 	stw	r5,-8(fp)
 2006a18:	e1bfff15 	stw	r6,-4(fp)
	float z,r,v;
	__int32_t ix;
	GET_FLOAT_WORD(ix,x);
 2006a1c:	e0bffd17 	ldw	r2,-12(fp)
 2006a20:	e0bffc15 	stw	r2,-16(fp)
 2006a24:	e0bffc17 	ldw	r2,-16(fp)
 2006a28:	e0bff815 	stw	r2,-32(fp)
	ix &= 0x7fffffff;			/* high word of x */
 2006a2c:	e0fff817 	ldw	r3,-32(fp)
 2006a30:	00a00034 	movhi	r2,32768
 2006a34:	10bfffc4 	addi	r2,r2,-1
 2006a38:	1884703a 	and	r2,r3,r2
 2006a3c:	e0bff815 	stw	r2,-32(fp)
	if(ix<0x32000000)			/* |x| < 2**-27 */
 2006a40:	e0fff817 	ldw	r3,-32(fp)
 2006a44:	008c8034 	movhi	r2,12800
 2006a48:	1880050e 	bge	r3,r2,2006a60 <__kernel_sinf+0x5c>
	   {if((int)x==0) return x;}		/* generate inexact */
 2006a4c:	e0fffd17 	ldw	r3,-12(fp)
 2006a50:	1805fe72 	custom	249,r2,r3,zero
 2006a54:	1000021e 	bne	r2,zero,2006a60 <__kernel_sinf+0x5c>
 2006a58:	e0bffd17 	ldw	r2,-12(fp)
 2006a5c:	00003e06 	br	2006b58 <__kernel_sinf+0x154>
	z	=  x*x;
 2006a60:	e0fffd17 	ldw	r3,-12(fp)
 2006a64:	e0bffd17 	ldw	r2,-12(fp)
 2006a68:	1885ff32 	custom	252,r2,r3,r2
 2006a6c:	e0bff915 	stw	r2,-28(fp)
	v	=  z*x;
 2006a70:	e0fff917 	ldw	r3,-28(fp)
 2006a74:	e0bffd17 	ldw	r2,-12(fp)
 2006a78:	1885ff32 	custom	252,r2,r3,r2
 2006a7c:	e0bffa15 	stw	r2,-24(fp)
	r	=  S2+z*(S3+z*(S4+z*(S5+z*S6)));
 2006a80:	008bcbf4 	movhi	r2,12079
 2006a84:	10b274c4 	addi	r2,r2,-13869
 2006a88:	e0fff917 	ldw	r3,-28(fp)
 2006a8c:	10c7ff32 	custom	252,r3,r2,r3
 2006a90:	00acb5f4 	movhi	r2,45783
 2006a94:	108bcd04 	addi	r2,r2,12084
 2006a98:	1887ff72 	custom	253,r3,r3,r2
 2006a9c:	e0bff917 	ldw	r2,-28(fp)
 2006aa0:	1887ff32 	custom	252,r3,r3,r2
 2006aa4:	008d8e74 	movhi	r2,13881
 2006aa8:	10bbc6c4 	addi	r2,r2,-4325
 2006aac:	1887ff72 	custom	253,r3,r3,r2
 2006ab0:	e0bff917 	ldw	r2,-28(fp)
 2006ab4:	1887ff32 	custom	252,r3,r3,r2
 2006ab8:	00ae5434 	movhi	r2,47440
 2006abc:	10834044 	addi	r2,r2,3329
 2006ac0:	1887ff72 	custom	253,r3,r3,r2
 2006ac4:	e0bff917 	ldw	r2,-28(fp)
 2006ac8:	1887ff32 	custom	252,r3,r3,r2
 2006acc:	008f0274 	movhi	r2,15369
 2006ad0:	10a22244 	addi	r2,r2,-30583
 2006ad4:	1885ff72 	custom	253,r2,r3,r2
 2006ad8:	e0bffb15 	stw	r2,-20(fp)
	if(iy==0) return x+v*(S1+z*r);
 2006adc:	e0bfff17 	ldw	r2,-4(fp)
 2006ae0:	10000b1e 	bne	r2,zero,2006b10 <__kernel_sinf+0x10c>
 2006ae4:	e0fff917 	ldw	r3,-28(fp)
 2006ae8:	e0bffb17 	ldw	r2,-20(fp)
 2006aec:	1887ff32 	custom	252,r3,r3,r2
 2006af0:	00af8af4 	movhi	r2,48683
 2006af4:	10aaaac4 	addi	r2,r2,-21845
 2006af8:	1887ff72 	custom	253,r3,r3,r2
 2006afc:	e0bffa17 	ldw	r2,-24(fp)
 2006b00:	1887ff32 	custom	252,r3,r3,r2
 2006b04:	e0bffd17 	ldw	r2,-12(fp)
 2006b08:	1885ff72 	custom	253,r2,r3,r2
 2006b0c:	00001206 	br	2006b58 <__kernel_sinf+0x154>
	else      return x-((z*(half*y-v*r)-y)-v*S1);
 2006b10:	00cfc034 	movhi	r3,16128
 2006b14:	e0bffe17 	ldw	r2,-8(fp)
 2006b18:	1887ff32 	custom	252,r3,r3,r2
 2006b1c:	e13ffa17 	ldw	r4,-24(fp)
 2006b20:	e0bffb17 	ldw	r2,-20(fp)
 2006b24:	2085ff32 	custom	252,r2,r4,r2
 2006b28:	1887ffb2 	custom	254,r3,r3,r2
 2006b2c:	e0bff917 	ldw	r2,-28(fp)
 2006b30:	1887ff32 	custom	252,r3,r3,r2
 2006b34:	e0bffe17 	ldw	r2,-8(fp)
 2006b38:	1887ffb2 	custom	254,r3,r3,r2
 2006b3c:	00af8af4 	movhi	r2,48683
 2006b40:	10aaaac4 	addi	r2,r2,-21845
 2006b44:	e13ffa17 	ldw	r4,-24(fp)
 2006b48:	1105ff32 	custom	252,r2,r2,r4
 2006b4c:	1885ffb2 	custom	254,r2,r3,r2
 2006b50:	e0fffd17 	ldw	r3,-12(fp)
 2006b54:	1885ffb2 	custom	254,r2,r3,r2
 2006b58:	1007883a 	mov	r3,r2
}
 2006b5c:	1805883a 	mov	r2,r3
 2006b60:	e037883a 	mov	sp,fp
 2006b64:	df000017 	ldw	fp,0(sp)
 2006b68:	dec00104 	addi	sp,sp,4
 2006b6c:	f800283a 	ret

02006b70 <matherr>:
	int matherr(struct exception *x)
#else
	int matherr(x)
	struct exception *x;
#endif
{
 2006b70:	defffc04 	addi	sp,sp,-16
 2006b74:	dfc00315 	stw	ra,12(sp)
 2006b78:	df000215 	stw	fp,8(sp)
 2006b7c:	df000204 	addi	fp,sp,8
 2006b80:	e13fff15 	stw	r4,-4(fp)
	int n=0;
 2006b84:	e03ffe15 	stw	zero,-8(fp)
	if(x->arg1!=x->arg1) return 0;
 2006b88:	e13fff17 	ldw	r4,-4(fp)
 2006b8c:	20800217 	ldw	r2,8(r4)
 2006b90:	20c00317 	ldw	r3,12(r4)
 2006b94:	e1bfff17 	ldw	r6,-4(fp)
 2006b98:	31000217 	ldw	r4,8(r6)
 2006b9c:	31400317 	ldw	r5,12(r6)
 2006ba0:	200d883a 	mov	r6,r4
 2006ba4:	280f883a 	mov	r7,r5
 2006ba8:	1009883a 	mov	r4,r2
 2006bac:	180b883a 	mov	r5,r3
 2006bb0:	20086d80 	call	20086d8 <__eqdf2>
 2006bb4:	10000226 	beq	r2,zero,2006bc0 <matherr+0x50>
 2006bb8:	0005883a 	mov	r2,zero
 2006bbc:	00000106 	br	2006bc4 <matherr+0x54>
	return n;
 2006bc0:	e0bffe17 	ldw	r2,-8(fp)
}
 2006bc4:	e037883a 	mov	sp,fp
 2006bc8:	dfc00117 	ldw	ra,4(sp)
 2006bcc:	df000017 	ldw	fp,0(sp)
 2006bd0:	dec00204 	addi	sp,sp,8
 2006bd4:	f800283a 	ret

02006bd8 <atanf>:
	float atanf(float x)
#else
	float atanf(x)
	float x;
#endif
{
 2006bd8:	defff504 	addi	sp,sp,-44
 2006bdc:	dfc00a15 	stw	ra,40(sp)
 2006be0:	df000915 	stw	fp,36(sp)
 2006be4:	df000904 	addi	fp,sp,36
 2006be8:	e13fff15 	stw	r4,-4(fp)
	float w,s1,s2,z;
	__int32_t ix,hx,id;

	GET_FLOAT_WORD(hx,x);
 2006bec:	e0bfff17 	ldw	r2,-4(fp)
 2006bf0:	e0bffe15 	stw	r2,-8(fp)
 2006bf4:	e0bffe17 	ldw	r2,-8(fp)
 2006bf8:	e0bff815 	stw	r2,-32(fp)
	ix = hx&0x7fffffff;
 2006bfc:	e0fff817 	ldw	r3,-32(fp)
 2006c00:	00a00034 	movhi	r2,32768
 2006c04:	10bfffc4 	addi	r2,r2,-1
 2006c08:	1884703a 	and	r2,r3,r2
 2006c0c:	e0bff915 	stw	r2,-28(fp)
	if(ix>=0x50800000) {	/* if |x| >= 2^34 */
 2006c10:	e0fff917 	ldw	r3,-28(fp)
 2006c14:	00942034 	movhi	r2,20608
 2006c18:	18801516 	blt	r3,r2,2006c70 <atanf+0x98>
	    if(FLT_UWORD_IS_NAN(ix))
 2006c1c:	e0bff917 	ldw	r2,-28(fp)
 2006c20:	00dfe034 	movhi	r3,32640
 2006c24:	1880030e 	bge	r3,r2,2006c34 <atanf+0x5c>
		return x+x;		/* NaN */
 2006c28:	e0bfff17 	ldw	r2,-4(fp)
 2006c2c:	1085ff72 	custom	253,r2,r2,r2
 2006c30:	0000be06 	br	2006f2c <atanf+0x354>
	    if(hx>0) return  atanhi[3]+atanlo[3];
 2006c34:	e0bff817 	ldw	r2,-32(fp)
 2006c38:	0080060e 	bge	zero,r2,2006c54 <atanf+0x7c>
 2006c3c:	00cff274 	movhi	r3,16329
 2006c40:	18c3f684 	addi	r3,r3,4058
 2006c44:	008ce8b4 	movhi	r2,13218
 2006c48:	10885a04 	addi	r2,r2,8552
 2006c4c:	1885ff72 	custom	253,r2,r3,r2
 2006c50:	0000b606 	br	2006f2c <atanf+0x354>
	    else     return -atanhi[3]-atanlo[3];
 2006c54:	008ff274 	movhi	r2,16329
 2006c58:	1083f684 	addi	r2,r2,4058
 2006c5c:	1007f872 	custom	225,r3,r2,zero
 2006c60:	008ce8b4 	movhi	r2,13218
 2006c64:	10885a04 	addi	r2,r2,8552
 2006c68:	1885ffb2 	custom	254,r2,r3,r2
 2006c6c:	0000af06 	br	2006f2c <atanf+0x354>
	} if (ix < 0x3ee00000) {	/* |x| < 0.4375 */
 2006c70:	e0fff917 	ldw	r3,-28(fp)
 2006c74:	008fb834 	movhi	r2,16096
 2006c78:	18800f0e 	bge	r3,r2,2006cb8 <atanf+0xe0>
	    if (ix < 0x31000000) {	/* |x| < 2^-29 */
 2006c7c:	e0fff917 	ldw	r3,-28(fp)
 2006c80:	008c4034 	movhi	r2,12544
 2006c84:	1880090e 	bge	r3,r2,2006cac <atanf+0xd4>
		if(huge+x>one) return x;	/* raise inexact */
 2006c88:	009c52b4 	movhi	r2,29002
 2006c8c:	10bcb284 	addi	r2,r2,-3382
 2006c90:	e0ffff17 	ldw	r3,-4(fp)
 2006c94:	10c7ff72 	custom	253,r3,r2,r3
 2006c98:	008fe034 	movhi	r2,16256
 2006c9c:	1885f972 	custom	229,r2,r3,r2
 2006ca0:	10000226 	beq	r2,zero,2006cac <atanf+0xd4>
 2006ca4:	e0bfff17 	ldw	r2,-4(fp)
 2006ca8:	0000a006 	br	2006f2c <atanf+0x354>
	    }
	    id = -1;
 2006cac:	00bfffc4 	movi	r2,-1
 2006cb0:	e0bff715 	stw	r2,-36(fp)
 2006cb4:	00003506 	br	2006d8c <atanf+0x1b4>
	} else {
	x = fabsf(x);
 2006cb8:	e13fff17 	ldw	r4,-4(fp)
 2006cbc:	2006f480 	call	2006f48 <fabsf>
 2006cc0:	e0bfff15 	stw	r2,-4(fp)
	if (ix < 0x3f980000) {		/* |x| < 1.1875 */
 2006cc4:	e0fff917 	ldw	r3,-28(fp)
 2006cc8:	008fe634 	movhi	r2,16280
 2006ccc:	1880190e 	bge	r3,r2,2006d34 <atanf+0x15c>
	    if (ix < 0x3f300000) {	/* 7/16 <=|x|<11/16 */
 2006cd0:	e0fff917 	ldw	r3,-28(fp)
 2006cd4:	008fcc34 	movhi	r2,16176
 2006cd8:	18800b0e 	bge	r3,r2,2006d08 <atanf+0x130>
		id = 0; x = ((float)2.0*x-one)/((float)2.0+x); 
 2006cdc:	e03ff715 	stw	zero,-36(fp)
 2006ce0:	e0bfff17 	ldw	r2,-4(fp)
 2006ce4:	1087ff72 	custom	253,r3,r2,r2
 2006ce8:	008fe034 	movhi	r2,16256
 2006cec:	1887ffb2 	custom	254,r3,r3,r2
 2006cf0:	e13fff17 	ldw	r4,-4(fp)
 2006cf4:	00900034 	movhi	r2,16384
 2006cf8:	2085ff72 	custom	253,r2,r4,r2
 2006cfc:	1885fff2 	custom	255,r2,r3,r2
 2006d00:	e0bfff15 	stw	r2,-4(fp)
 2006d04:	00002106 	br	2006d8c <atanf+0x1b4>
	    } else {			/* 11/16<=|x|< 19/16 */
		id = 1; x  = (x-one)/(x+one); 
 2006d08:	00800044 	movi	r2,1
 2006d0c:	e0bff715 	stw	r2,-36(fp)
 2006d10:	008fe034 	movhi	r2,16256
 2006d14:	e0ffff17 	ldw	r3,-4(fp)
 2006d18:	1887ffb2 	custom	254,r3,r3,r2
 2006d1c:	010fe034 	movhi	r4,16256
 2006d20:	e0bfff17 	ldw	r2,-4(fp)
 2006d24:	2085ff72 	custom	253,r2,r4,r2
 2006d28:	1885fff2 	custom	255,r2,r3,r2
 2006d2c:	e0bfff15 	stw	r2,-4(fp)
 2006d30:	00001606 	br	2006d8c <atanf+0x1b4>
	    }
	} else {
	    if (ix < 0x401c0000) {	/* |x| < 2.4375 */
 2006d34:	e0fff917 	ldw	r3,-28(fp)
 2006d38:	00900734 	movhi	r2,16412
 2006d3c:	18800d0e 	bge	r3,r2,2006d74 <atanf+0x19c>
		id = 2; x  = (x-(float)1.5)/(one+(float)1.5*x);
 2006d40:	00800084 	movi	r2,2
 2006d44:	e0bff715 	stw	r2,-36(fp)
 2006d48:	e0ffff17 	ldw	r3,-4(fp)
 2006d4c:	008ff034 	movhi	r2,16320
 2006d50:	1887ffb2 	custom	254,r3,r3,r2
 2006d54:	e13fff17 	ldw	r4,-4(fp)
 2006d58:	008ff034 	movhi	r2,16320
 2006d5c:	2089ff32 	custom	252,r4,r4,r2
 2006d60:	008fe034 	movhi	r2,16256
 2006d64:	2085ff72 	custom	253,r2,r4,r2
 2006d68:	1885fff2 	custom	255,r2,r3,r2
 2006d6c:	e0bfff15 	stw	r2,-4(fp)
 2006d70:	00000606 	br	2006d8c <atanf+0x1b4>
	    } else {			/* 2.4375 <= |x| < 2^66 */
		id = 3; x  = -(float)1.0/x;
 2006d74:	008000c4 	movi	r2,3
 2006d78:	e0bff715 	stw	r2,-36(fp)
 2006d7c:	00efe034 	movhi	r3,49024
 2006d80:	e0bfff17 	ldw	r2,-4(fp)
 2006d84:	1885fff2 	custom	255,r2,r3,r2
 2006d88:	e0bfff15 	stw	r2,-4(fp)
	    }
	}}
    /* end of argument reduction */
	z = x*x;
 2006d8c:	e0ffff17 	ldw	r3,-4(fp)
 2006d90:	e0bfff17 	ldw	r2,-4(fp)
 2006d94:	1885ff32 	custom	252,r2,r3,r2
 2006d98:	e0bffa15 	stw	r2,-24(fp)
	w = z*z;
 2006d9c:	e0fffa17 	ldw	r3,-24(fp)
 2006da0:	e0bffa17 	ldw	r2,-24(fp)
 2006da4:	1885ff32 	custom	252,r2,r3,r2
 2006da8:	e0bffb15 	stw	r2,-20(fp)
    /* break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly */
	s1 = z*(aT[0]+w*(aT[2]+w*(aT[4]+w*(aT[6]+w*(aT[8]+w*aT[10])))));
 2006dac:	008faaf4 	movhi	r2,16043
 2006db0:	10aaaac4 	addi	r2,r2,-21845
 2006db4:	00cf84b4 	movhi	r3,15890
 2006db8:	18d24944 	addi	r3,r3,18725
 2006dbc:	010f6eb4 	movhi	r4,15802
 2006dc0:	210b9b84 	addi	r4,r4,11886
 2006dc4:	014f6234 	movhi	r5,15752
 2006dc8:	295acd44 	addi	r5,r5,27445
 2006dcc:	018f5334 	movhi	r6,15692
 2006dd0:	31b69644 	addi	r6,r6,-9639
 2006dd4:	01cf2174 	movhi	r7,15493
 2006dd8:	39da75c4 	addi	r7,r7,27095
 2006ddc:	e23ffb17 	ldw	r8,-20(fp)
 2006de0:	3a0fff32 	custom	252,r7,r7,r8
 2006de4:	31cfff72 	custom	253,r7,r6,r7
 2006de8:	e1bffb17 	ldw	r6,-20(fp)
 2006dec:	398dff32 	custom	252,r6,r7,r6
 2006df0:	298dff72 	custom	253,r6,r5,r6
 2006df4:	e17ffb17 	ldw	r5,-20(fp)
 2006df8:	314bff32 	custom	252,r5,r6,r5
 2006dfc:	214bff72 	custom	253,r5,r4,r5
 2006e00:	e13ffb17 	ldw	r4,-20(fp)
 2006e04:	2909ff32 	custom	252,r4,r5,r4
 2006e08:	1909ff72 	custom	253,r4,r3,r4
 2006e0c:	e0fffb17 	ldw	r3,-20(fp)
 2006e10:	20c7ff32 	custom	252,r3,r4,r3
 2006e14:	10c7ff72 	custom	253,r3,r2,r3
 2006e18:	e0bffa17 	ldw	r2,-24(fp)
 2006e1c:	1885ff32 	custom	252,r2,r3,r2
 2006e20:	e0bffc15 	stw	r2,-16(fp)
	s2 = w*(aT[1]+w*(aT[3]+w*(aT[5]+w*(aT[7]+w*aT[9]))));
 2006e24:	00af9374 	movhi	r2,48717
 2006e28:	10b33344 	addi	r2,r2,-13107
 2006e2c:	00ef7934 	movhi	r3,48612
 2006e30:	18e38e04 	addi	r3,r3,-29128
 2006e34:	012f67b4 	movhi	r4,48542
 2006e38:	2121e544 	addi	r4,r4,-30827
 2006e3c:	016f5bf4 	movhi	r5,48495
 2006e40:	297c5ac4 	addi	r5,r5,-3733
 2006e44:	01af45b4 	movhi	r6,48406
 2006e48:	31a88844 	addi	r6,r6,-24031
 2006e4c:	e1fffb17 	ldw	r7,-20(fp)
 2006e50:	31cdff32 	custom	252,r6,r6,r7
 2006e54:	298dff72 	custom	253,r6,r5,r6
 2006e58:	e17ffb17 	ldw	r5,-20(fp)
 2006e5c:	314bff32 	custom	252,r5,r6,r5
 2006e60:	214bff72 	custom	253,r5,r4,r5
 2006e64:	e13ffb17 	ldw	r4,-20(fp)
 2006e68:	2909ff32 	custom	252,r4,r5,r4
 2006e6c:	1909ff72 	custom	253,r4,r3,r4
 2006e70:	e0fffb17 	ldw	r3,-20(fp)
 2006e74:	20c7ff32 	custom	252,r3,r4,r3
 2006e78:	10c7ff72 	custom	253,r3,r2,r3
 2006e7c:	e0bffb17 	ldw	r2,-20(fp)
 2006e80:	1885ff32 	custom	252,r2,r3,r2
 2006e84:	e0bffd15 	stw	r2,-12(fp)
	if (id<0) return x - x*(s1+s2);
 2006e88:	e0bff717 	ldw	r2,-36(fp)
 2006e8c:	1000080e 	bge	r2,zero,2006eb0 <atanf+0x2d8>
 2006e90:	e0fffc17 	ldw	r3,-16(fp)
 2006e94:	e0bffd17 	ldw	r2,-12(fp)
 2006e98:	1887ff72 	custom	253,r3,r3,r2
 2006e9c:	e0bfff17 	ldw	r2,-4(fp)
 2006ea0:	1885ff32 	custom	252,r2,r3,r2
 2006ea4:	e0ffff17 	ldw	r3,-4(fp)
 2006ea8:	1885ffb2 	custom	254,r2,r3,r2
 2006eac:	00001f06 	br	2006f2c <atanf+0x354>
	else {
	    z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
 2006eb0:	008080b4 	movhi	r2,514
 2006eb4:	108bf604 	addi	r2,r2,12248
 2006eb8:	e0fff717 	ldw	r3,-36(fp)
 2006ebc:	18c7883a 	add	r3,r3,r3
 2006ec0:	18c7883a 	add	r3,r3,r3
 2006ec4:	10c5883a 	add	r2,r2,r3
 2006ec8:	11000017 	ldw	r4,0(r2)
 2006ecc:	e0fffc17 	ldw	r3,-16(fp)
 2006ed0:	e0bffd17 	ldw	r2,-12(fp)
 2006ed4:	1887ff72 	custom	253,r3,r3,r2
 2006ed8:	e0bfff17 	ldw	r2,-4(fp)
 2006edc:	188bff32 	custom	252,r5,r3,r2
 2006ee0:	008080b4 	movhi	r2,514
 2006ee4:	108bfa04 	addi	r2,r2,12264
 2006ee8:	e0fff717 	ldw	r3,-36(fp)
 2006eec:	18c7883a 	add	r3,r3,r3
 2006ef0:	18c7883a 	add	r3,r3,r3
 2006ef4:	10c7883a 	add	r3,r2,r3
 2006ef8:	18800017 	ldw	r2,0(r3)
 2006efc:	2887ffb2 	custom	254,r3,r5,r2
 2006f00:	e0bfff17 	ldw	r2,-4(fp)
 2006f04:	1885ffb2 	custom	254,r2,r3,r2
 2006f08:	2085ffb2 	custom	254,r2,r4,r2
 2006f0c:	e0bffa15 	stw	r2,-24(fp)
	    return (hx<0)? -z:z;
 2006f10:	e0bff817 	ldw	r2,-32(fp)
 2006f14:	1000030e 	bge	r2,zero,2006f24 <atanf+0x34c>
 2006f18:	e0bffa17 	ldw	r2,-24(fp)
 2006f1c:	1005f872 	custom	225,r2,r2,zero
 2006f20:	00000106 	br	2006f28 <atanf+0x350>
 2006f24:	e0bffa17 	ldw	r2,-24(fp)
 2006f28:	0001883a 	nop
 2006f2c:	1007883a 	mov	r3,r2
	}
}
 2006f30:	1805883a 	mov	r2,r3
 2006f34:	e037883a 	mov	sp,fp
 2006f38:	dfc00117 	ldw	ra,4(sp)
 2006f3c:	df000017 	ldw	fp,0(sp)
 2006f40:	dec00204 	addi	sp,sp,8
 2006f44:	f800283a 	ret

02006f48 <fabsf>:
	float fabsf(float x)
#else
	float fabsf(x)
	float x;
#endif
{
 2006f48:	defffb04 	addi	sp,sp,-20
 2006f4c:	df000415 	stw	fp,16(sp)
 2006f50:	df000404 	addi	fp,sp,16
 2006f54:	e13fff15 	stw	r4,-4(fp)
	__uint32_t ix;
	GET_FLOAT_WORD(ix,x);
 2006f58:	e0bfff17 	ldw	r2,-4(fp)
 2006f5c:	e0bffd15 	stw	r2,-12(fp)
 2006f60:	e0bffd17 	ldw	r2,-12(fp)
 2006f64:	e0bffc15 	stw	r2,-16(fp)
	SET_FLOAT_WORD(x,ix&0x7fffffff);
 2006f68:	e0fffc17 	ldw	r3,-16(fp)
 2006f6c:	00a00034 	movhi	r2,32768
 2006f70:	10bfffc4 	addi	r2,r2,-1
 2006f74:	1884703a 	and	r2,r3,r2
 2006f78:	e0bffe15 	stw	r2,-8(fp)
 2006f7c:	e0bffe17 	ldw	r2,-8(fp)
 2006f80:	e0bfff15 	stw	r2,-4(fp)
        return x;
 2006f84:	e0bfff17 	ldw	r2,-4(fp)
 2006f88:	1007883a 	mov	r3,r2
}
 2006f8c:	1805883a 	mov	r2,r3
 2006f90:	e037883a 	mov	sp,fp
 2006f94:	df000017 	ldw	fp,0(sp)
 2006f98:	dec00104 	addi	sp,sp,4
 2006f9c:	f800283a 	ret

02006fa0 <floorf>:
	float floorf(float x)
#else
	float floorf(x)
	float x;
#endif
{
 2006fa0:	defff804 	addi	sp,sp,-32
 2006fa4:	df000715 	stw	fp,28(sp)
 2006fa8:	df000704 	addi	fp,sp,28
 2006fac:	e13fff15 	stw	r4,-4(fp)
	__int32_t i0,j0;
	__uint32_t i,ix;
	GET_FLOAT_WORD(i0,x);
 2006fb0:	e0bfff17 	ldw	r2,-4(fp)
 2006fb4:	e0bffd15 	stw	r2,-12(fp)
 2006fb8:	e0bffd17 	ldw	r2,-12(fp)
 2006fbc:	e0bff915 	stw	r2,-28(fp)
	ix = (i0&0x7fffffff);
 2006fc0:	e0fff917 	ldw	r3,-28(fp)
 2006fc4:	00a00034 	movhi	r2,32768
 2006fc8:	10bfffc4 	addi	r2,r2,-1
 2006fcc:	1884703a 	and	r2,r3,r2
 2006fd0:	e0bffa15 	stw	r2,-24(fp)
	j0 = (ix>>23)-0x7f;
 2006fd4:	e0bffa17 	ldw	r2,-24(fp)
 2006fd8:	1004d5fa 	srli	r2,r2,23
 2006fdc:	10bfe044 	addi	r2,r2,-127
 2006fe0:	e0bffb15 	stw	r2,-20(fp)
	if(j0<23) {
 2006fe4:	e0bffb17 	ldw	r2,-20(fp)
 2006fe8:	108005c8 	cmpgei	r2,r2,23
 2006fec:	1000321e 	bne	r2,zero,20070b8 <floorf+0x118>
	    if(j0<0) { 	/* raise inexact if x != 0 */
 2006ff0:	e0bffb17 	ldw	r2,-20(fp)
 2006ff4:	1000100e 	bge	r2,zero,2007038 <floorf+0x98>
		if(huge+x>(float)0.0) {/* return 0*sign(x) if |x|<1 */
 2006ff8:	009c52b4 	movhi	r2,29002
 2006ffc:	10bcb284 	addi	r2,r2,-3382
 2007000:	e0ffff17 	ldw	r3,-4(fp)
 2007004:	10c5ff72 	custom	253,r2,r2,r3
 2007008:	0007883a 	mov	r3,zero
 200700c:	10c5f972 	custom	229,r2,r2,r3
 2007010:	10003126 	beq	r2,zero,20070d8 <floorf+0x138>
		    if(i0>=0) {i0=0;} 
 2007014:	e0bff917 	ldw	r2,-28(fp)
 2007018:	10000216 	blt	r2,zero,2007024 <floorf+0x84>
 200701c:	e03ff915 	stw	zero,-28(fp)
 2007020:	00002d06 	br	20070d8 <floorf+0x138>
		    else if(!FLT_UWORD_IS_ZERO(ix))
 2007024:	e0bffa17 	ldw	r2,-24(fp)
 2007028:	10002b26 	beq	r2,zero,20070d8 <floorf+0x138>
			{ i0=0xbf800000;}
 200702c:	00afe034 	movhi	r2,49024
 2007030:	e0bff915 	stw	r2,-28(fp)
 2007034:	00002806 	br	20070d8 <floorf+0x138>
		}
	    } else {
		i = (0x007fffff)>>j0;
 2007038:	00802034 	movhi	r2,128
 200703c:	10bfffc4 	addi	r2,r2,-1
 2007040:	e0fffb17 	ldw	r3,-20(fp)
 2007044:	10c5d83a 	sra	r2,r2,r3
 2007048:	e0bffc15 	stw	r2,-16(fp)
		if((i0&i)==0) return x; /* x is integral */
 200704c:	e0fff917 	ldw	r3,-28(fp)
 2007050:	e0bffc17 	ldw	r2,-16(fp)
 2007054:	1884703a 	and	r2,r3,r2
 2007058:	1000021e 	bne	r2,zero,2007064 <floorf+0xc4>
 200705c:	e0bfff17 	ldw	r2,-4(fp)
 2007060:	00002206 	br	20070ec <floorf+0x14c>
		if(huge+x>(float)0.0) {	/* raise inexact flag */
 2007064:	009c52b4 	movhi	r2,29002
 2007068:	10bcb284 	addi	r2,r2,-3382
 200706c:	e0ffff17 	ldw	r3,-4(fp)
 2007070:	10c5ff72 	custom	253,r2,r2,r3
 2007074:	0007883a 	mov	r3,zero
 2007078:	10c5f972 	custom	229,r2,r2,r3
 200707c:	10001626 	beq	r2,zero,20070d8 <floorf+0x138>
		    if(i0<0) i0 += (0x00800000)>>j0;
 2007080:	e0bff917 	ldw	r2,-28(fp)
 2007084:	1000060e 	bge	r2,zero,20070a0 <floorf+0x100>
 2007088:	00c02034 	movhi	r3,128
 200708c:	e0bffb17 	ldw	r2,-20(fp)
 2007090:	1885d83a 	sra	r2,r3,r2
 2007094:	e0fff917 	ldw	r3,-28(fp)
 2007098:	1885883a 	add	r2,r3,r2
 200709c:	e0bff915 	stw	r2,-28(fp)
		    i0 &= (~i);
 20070a0:	e0bffc17 	ldw	r2,-16(fp)
 20070a4:	0086303a 	nor	r3,zero,r2
 20070a8:	e0bff917 	ldw	r2,-28(fp)
 20070ac:	1884703a 	and	r2,r3,r2
 20070b0:	e0bff915 	stw	r2,-28(fp)
 20070b4:	00000806 	br	20070d8 <floorf+0x138>
		}
	    }
	} else {
	    if(!FLT_UWORD_IS_FINITE(ix)) return x+x;	/* inf or NaN */
 20070b8:	e0fffa17 	ldw	r3,-24(fp)
 20070bc:	009fe034 	movhi	r2,32640
 20070c0:	18800336 	bltu	r3,r2,20070d0 <floorf+0x130>
 20070c4:	e0bfff17 	ldw	r2,-4(fp)
 20070c8:	1085ff72 	custom	253,r2,r2,r2
 20070cc:	00000706 	br	20070ec <floorf+0x14c>
	    else return x;		/* x is integral */
 20070d0:	e0bfff17 	ldw	r2,-4(fp)
 20070d4:	00000506 	br	20070ec <floorf+0x14c>
	}
	SET_FLOAT_WORD(x,i0);
 20070d8:	e0bff917 	ldw	r2,-28(fp)
 20070dc:	e0bffe15 	stw	r2,-8(fp)
 20070e0:	e0bffe17 	ldw	r2,-8(fp)
 20070e4:	e0bfff15 	stw	r2,-4(fp)
	return x;
 20070e8:	e0bfff17 	ldw	r2,-4(fp)
 20070ec:	1007883a 	mov	r3,r2
}
 20070f0:	1805883a 	mov	r2,r3
 20070f4:	e037883a 	mov	sp,fp
 20070f8:	df000017 	ldw	fp,0(sp)
 20070fc:	dec00104 	addi	sp,sp,4
 2007100:	f800283a 	ret

02007104 <scalbnf>:
	float scalbnf (float x, int n)
#else
	float scalbnf (x,n)
	float x; int n;
#endif
{
 2007104:	defff504 	addi	sp,sp,-44
 2007108:	dfc00a15 	stw	ra,40(sp)
 200710c:	df000915 	stw	fp,36(sp)
 2007110:	df000904 	addi	fp,sp,36
 2007114:	e13ffe15 	stw	r4,-8(fp)
 2007118:	e17fff15 	stw	r5,-4(fp)
	__int32_t  k,ix;
	__uint32_t hx;

	GET_FLOAT_WORD(ix,x);
 200711c:	e0bffe17 	ldw	r2,-8(fp)
 2007120:	e0bffa15 	stw	r2,-24(fp)
 2007124:	e0bffa17 	ldw	r2,-24(fp)
 2007128:	e0bff815 	stw	r2,-32(fp)
	hx = ix&0x7fffffff;
 200712c:	e0fff817 	ldw	r3,-32(fp)
 2007130:	00a00034 	movhi	r2,32768
 2007134:	10bfffc4 	addi	r2,r2,-1
 2007138:	1884703a 	and	r2,r3,r2
 200713c:	e0bff915 	stw	r2,-28(fp)
        k = hx>>23;		/* extract exponent */
 2007140:	e0bff917 	ldw	r2,-28(fp)
 2007144:	1004d5fa 	srli	r2,r2,23
 2007148:	e0bff715 	stw	r2,-36(fp)
	if (FLT_UWORD_IS_ZERO(hx))
 200714c:	e0bff917 	ldw	r2,-28(fp)
 2007150:	1000021e 	bne	r2,zero,200715c <scalbnf+0x58>
	    return x;
 2007154:	e0bffe17 	ldw	r2,-8(fp)
 2007158:	00006806 	br	20072fc <scalbnf+0x1f8>
        if (!FLT_UWORD_IS_FINITE(hx))
 200715c:	e0fff917 	ldw	r3,-28(fp)
 2007160:	009fe034 	movhi	r2,32640
 2007164:	18800336 	bltu	r3,r2,2007174 <scalbnf+0x70>
	    return x+x;		/* NaN or Inf */
 2007168:	e0bffe17 	ldw	r2,-8(fp)
 200716c:	1085ff72 	custom	253,r2,r2,r2
 2007170:	00006206 	br	20072fc <scalbnf+0x1f8>
        if (FLT_UWORD_IS_SUBNORMAL(hx)) {
 2007174:	e0fff917 	ldw	r3,-28(fp)
 2007178:	00802034 	movhi	r2,128
 200717c:	1880162e 	bgeu	r3,r2,20071d8 <scalbnf+0xd4>
	    x *= two25;
 2007180:	00930034 	movhi	r2,19456
 2007184:	e0fffe17 	ldw	r3,-8(fp)
 2007188:	1885ff32 	custom	252,r2,r3,r2
 200718c:	e0bffe15 	stw	r2,-8(fp)
	    GET_FLOAT_WORD(ix,x);
 2007190:	e0bffe17 	ldw	r2,-8(fp)
 2007194:	e0bffb15 	stw	r2,-20(fp)
 2007198:	e0bffb17 	ldw	r2,-20(fp)
 200719c:	e0bff815 	stw	r2,-32(fp)
	    k = ((ix&0x7f800000)>>23) - 25; 
 20071a0:	e0bff817 	ldw	r2,-32(fp)
 20071a4:	109fe02c 	andhi	r2,r2,32640
 20071a8:	1005d5fa 	srai	r2,r2,23
 20071ac:	10bff9c4 	addi	r2,r2,-25
 20071b0:	e0bff715 	stw	r2,-36(fp)
            if (n< -50000) return tiny*x; 	/*underflow*/
 20071b4:	e0ffff17 	ldw	r3,-4(fp)
 20071b8:	00bffff4 	movhi	r2,65535
 20071bc:	108f2c04 	addi	r2,r2,15536
 20071c0:	1880050e 	bge	r3,r2,20071d8 <scalbnf+0xd4>
 20071c4:	008368b4 	movhi	r2,3490
 20071c8:	10909804 	addi	r2,r2,16992
 20071cc:	e0fffe17 	ldw	r3,-8(fp)
 20071d0:	10c5ff32 	custom	252,r2,r2,r3
 20071d4:	00004906 	br	20072fc <scalbnf+0x1f8>
        }
        k = k+n; 
 20071d8:	e0fff717 	ldw	r3,-36(fp)
 20071dc:	e0bfff17 	ldw	r2,-4(fp)
 20071e0:	1885883a 	add	r2,r3,r2
 20071e4:	e0bff715 	stw	r2,-36(fp)
        if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
 20071e8:	e0bff717 	ldw	r2,-36(fp)
 20071ec:	10803fd0 	cmplti	r2,r2,255
 20071f0:	10000a1e 	bne	r2,zero,200721c <scalbnf+0x118>
 20071f4:	009c52b4 	movhi	r2,29002
 20071f8:	10bcb284 	addi	r2,r2,-3382
 20071fc:	e17ffe17 	ldw	r5,-8(fp)
 2007200:	1009883a 	mov	r4,r2
 2007204:	20073180 	call	2007318 <copysignf>
 2007208:	1007883a 	mov	r3,r2
 200720c:	009c52b4 	movhi	r2,29002
 2007210:	10bcb284 	addi	r2,r2,-3382
 2007214:	1885ff32 	custom	252,r2,r3,r2
 2007218:	00003806 	br	20072fc <scalbnf+0x1f8>
        if (k > 0) 				/* normal result */
 200721c:	e0bff717 	ldw	r2,-36(fp)
 2007220:	00800c0e 	bge	zero,r2,2007254 <scalbnf+0x150>
	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
 2007224:	e0fff817 	ldw	r3,-32(fp)
 2007228:	00a02034 	movhi	r2,32896
 200722c:	10bfffc4 	addi	r2,r2,-1
 2007230:	1884703a 	and	r2,r3,r2
 2007234:	e0fff717 	ldw	r3,-36(fp)
 2007238:	180695fa 	slli	r3,r3,23
 200723c:	10c4b03a 	or	r2,r2,r3
 2007240:	e0bffc15 	stw	r2,-16(fp)
 2007244:	e0bffc17 	ldw	r2,-16(fp)
 2007248:	e0bffe15 	stw	r2,-8(fp)
 200724c:	e0bffe17 	ldw	r2,-8(fp)
 2007250:	00002a06 	br	20072fc <scalbnf+0x1f8>
        if (k < FLT_SMALLEST_EXP) {
 2007254:	e0bff717 	ldw	r2,-36(fp)
 2007258:	10bffa88 	cmpgei	r2,r2,-22
 200725c:	1000171e 	bne	r2,zero,20072bc <scalbnf+0x1b8>
            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
 2007260:	e0bfff17 	ldw	r2,-4(fp)
 2007264:	00f0d414 	movui	r3,50000
 2007268:	18800a0e 	bge	r3,r2,2007294 <scalbnf+0x190>
		return huge*copysignf(huge,x);	/*overflow*/
 200726c:	009c52b4 	movhi	r2,29002
 2007270:	10bcb284 	addi	r2,r2,-3382
 2007274:	e17ffe17 	ldw	r5,-8(fp)
 2007278:	1009883a 	mov	r4,r2
 200727c:	20073180 	call	2007318 <copysignf>
 2007280:	1007883a 	mov	r3,r2
 2007284:	009c52b4 	movhi	r2,29002
 2007288:	10bcb284 	addi	r2,r2,-3382
 200728c:	1885ff32 	custom	252,r2,r3,r2
 2007290:	00001a06 	br	20072fc <scalbnf+0x1f8>
	    else return tiny*copysignf(tiny,x);	/*underflow*/
 2007294:	008368b4 	movhi	r2,3490
 2007298:	10909804 	addi	r2,r2,16992
 200729c:	e17ffe17 	ldw	r5,-8(fp)
 20072a0:	1009883a 	mov	r4,r2
 20072a4:	20073180 	call	2007318 <copysignf>
 20072a8:	1007883a 	mov	r3,r2
 20072ac:	008368b4 	movhi	r2,3490
 20072b0:	10909804 	addi	r2,r2,16992
 20072b4:	1885ff32 	custom	252,r2,r3,r2
 20072b8:	00001006 	br	20072fc <scalbnf+0x1f8>
        }
        k += 25;				/* subnormal result */
 20072bc:	e0bff717 	ldw	r2,-36(fp)
 20072c0:	10800644 	addi	r2,r2,25
 20072c4:	e0bff715 	stw	r2,-36(fp)
	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
 20072c8:	e0fff817 	ldw	r3,-32(fp)
 20072cc:	00a02034 	movhi	r2,32896
 20072d0:	10bfffc4 	addi	r2,r2,-1
 20072d4:	1884703a 	and	r2,r3,r2
 20072d8:	e0fff717 	ldw	r3,-36(fp)
 20072dc:	180695fa 	slli	r3,r3,23
 20072e0:	10c4b03a 	or	r2,r2,r3
 20072e4:	e0bffd15 	stw	r2,-12(fp)
 20072e8:	e0bffd17 	ldw	r2,-12(fp)
 20072ec:	e0bffe15 	stw	r2,-8(fp)
        return x*twom25;
 20072f0:	00ccc034 	movhi	r3,13056
 20072f4:	e0bffe17 	ldw	r2,-8(fp)
 20072f8:	1885ff32 	custom	252,r2,r3,r2
 20072fc:	1007883a 	mov	r3,r2
}
 2007300:	1805883a 	mov	r2,r3
 2007304:	e037883a 	mov	sp,fp
 2007308:	dfc00117 	ldw	ra,4(sp)
 200730c:	df000017 	ldw	fp,0(sp)
 2007310:	dec00204 	addi	sp,sp,8
 2007314:	f800283a 	ret

02007318 <copysignf>:
	float copysignf(float x, float y)
#else
	float copysignf(x,y)
	float x,y;
#endif
{
 2007318:	defff804 	addi	sp,sp,-32
 200731c:	df000715 	stw	fp,28(sp)
 2007320:	df000704 	addi	fp,sp,28
 2007324:	e13ffe15 	stw	r4,-8(fp)
 2007328:	e17fff15 	stw	r5,-4(fp)
	__uint32_t ix,iy;
	GET_FLOAT_WORD(ix,x);
 200732c:	e0bffe17 	ldw	r2,-8(fp)
 2007330:	e0bffb15 	stw	r2,-20(fp)
 2007334:	e0bffb17 	ldw	r2,-20(fp)
 2007338:	e0bff915 	stw	r2,-28(fp)
	GET_FLOAT_WORD(iy,y);
 200733c:	e0bfff17 	ldw	r2,-4(fp)
 2007340:	e0bffc15 	stw	r2,-16(fp)
 2007344:	e0bffc17 	ldw	r2,-16(fp)
 2007348:	e0bffa15 	stw	r2,-24(fp)
	SET_FLOAT_WORD(x,(ix&0x7fffffff)|(iy&0x80000000));
 200734c:	e0fff917 	ldw	r3,-28(fp)
 2007350:	00a00034 	movhi	r2,32768
 2007354:	10bfffc4 	addi	r2,r2,-1
 2007358:	1886703a 	and	r3,r3,r2
 200735c:	e0bffa17 	ldw	r2,-24(fp)
 2007360:	10a0002c 	andhi	r2,r2,32768
 2007364:	1884b03a 	or	r2,r3,r2
 2007368:	e0bffd15 	stw	r2,-12(fp)
 200736c:	e0bffd17 	ldw	r2,-12(fp)
 2007370:	e0bffe15 	stw	r2,-8(fp)
        return x;
 2007374:	e0bffe17 	ldw	r2,-8(fp)
 2007378:	1007883a 	mov	r3,r2
}
 200737c:	1805883a 	mov	r2,r3
 2007380:	e037883a 	mov	sp,fp
 2007384:	df000017 	ldw	fp,0(sp)
 2007388:	dec00104 	addi	sp,sp,4
 200738c:	f800283a 	ret

02007390 <__divsi3>:
 2007390:	20001b16 	blt	r4,zero,2007400 <__divsi3+0x70>
 2007394:	000f883a 	mov	r7,zero
 2007398:	28001616 	blt	r5,zero,20073f4 <__divsi3+0x64>
 200739c:	200d883a 	mov	r6,r4
 20073a0:	29001a2e 	bgeu	r5,r4,200740c <__divsi3+0x7c>
 20073a4:	00800804 	movi	r2,32
 20073a8:	00c00044 	movi	r3,1
 20073ac:	00000106 	br	20073b4 <__divsi3+0x24>
 20073b0:	10000d26 	beq	r2,zero,20073e8 <__divsi3+0x58>
 20073b4:	294b883a 	add	r5,r5,r5
 20073b8:	10bfffc4 	addi	r2,r2,-1
 20073bc:	18c7883a 	add	r3,r3,r3
 20073c0:	293ffb36 	bltu	r5,r4,20073b0 <__divsi3+0x20>
 20073c4:	0005883a 	mov	r2,zero
 20073c8:	18000726 	beq	r3,zero,20073e8 <__divsi3+0x58>
 20073cc:	0005883a 	mov	r2,zero
 20073d0:	31400236 	bltu	r6,r5,20073dc <__divsi3+0x4c>
 20073d4:	314dc83a 	sub	r6,r6,r5
 20073d8:	10c4b03a 	or	r2,r2,r3
 20073dc:	1806d07a 	srli	r3,r3,1
 20073e0:	280ad07a 	srli	r5,r5,1
 20073e4:	183ffa1e 	bne	r3,zero,20073d0 <__divsi3+0x40>
 20073e8:	38000126 	beq	r7,zero,20073f0 <__divsi3+0x60>
 20073ec:	0085c83a 	sub	r2,zero,r2
 20073f0:	f800283a 	ret
 20073f4:	014bc83a 	sub	r5,zero,r5
 20073f8:	39c0005c 	xori	r7,r7,1
 20073fc:	003fe706 	br	200739c <__divsi3+0xc>
 2007400:	0109c83a 	sub	r4,zero,r4
 2007404:	01c00044 	movi	r7,1
 2007408:	003fe306 	br	2007398 <__divsi3+0x8>
 200740c:	00c00044 	movi	r3,1
 2007410:	003fee06 	br	20073cc <__divsi3+0x3c>

02007414 <__modsi3>:
 2007414:	20001716 	blt	r4,zero,2007474 <__modsi3+0x60>
 2007418:	000f883a 	mov	r7,zero
 200741c:	2005883a 	mov	r2,r4
 2007420:	28001216 	blt	r5,zero,200746c <__modsi3+0x58>
 2007424:	2900162e 	bgeu	r5,r4,2007480 <__modsi3+0x6c>
 2007428:	01800804 	movi	r6,32
 200742c:	00c00044 	movi	r3,1
 2007430:	00000106 	br	2007438 <__modsi3+0x24>
 2007434:	30000a26 	beq	r6,zero,2007460 <__modsi3+0x4c>
 2007438:	294b883a 	add	r5,r5,r5
 200743c:	31bfffc4 	addi	r6,r6,-1
 2007440:	18c7883a 	add	r3,r3,r3
 2007444:	293ffb36 	bltu	r5,r4,2007434 <__modsi3+0x20>
 2007448:	18000526 	beq	r3,zero,2007460 <__modsi3+0x4c>
 200744c:	1806d07a 	srli	r3,r3,1
 2007450:	11400136 	bltu	r2,r5,2007458 <__modsi3+0x44>
 2007454:	1145c83a 	sub	r2,r2,r5
 2007458:	280ad07a 	srli	r5,r5,1
 200745c:	183ffb1e 	bne	r3,zero,200744c <__modsi3+0x38>
 2007460:	38000126 	beq	r7,zero,2007468 <__modsi3+0x54>
 2007464:	0085c83a 	sub	r2,zero,r2
 2007468:	f800283a 	ret
 200746c:	014bc83a 	sub	r5,zero,r5
 2007470:	003fec06 	br	2007424 <__modsi3+0x10>
 2007474:	0109c83a 	sub	r4,zero,r4
 2007478:	01c00044 	movi	r7,1
 200747c:	003fe706 	br	200741c <__modsi3+0x8>
 2007480:	00c00044 	movi	r3,1
 2007484:	003ff106 	br	200744c <__modsi3+0x38>

02007488 <__udivsi3>:
 2007488:	200d883a 	mov	r6,r4
 200748c:	2900152e 	bgeu	r5,r4,20074e4 <__udivsi3+0x5c>
 2007490:	28001416 	blt	r5,zero,20074e4 <__udivsi3+0x5c>
 2007494:	00800804 	movi	r2,32
 2007498:	00c00044 	movi	r3,1
 200749c:	00000206 	br	20074a8 <__udivsi3+0x20>
 20074a0:	10000e26 	beq	r2,zero,20074dc <__udivsi3+0x54>
 20074a4:	28000516 	blt	r5,zero,20074bc <__udivsi3+0x34>
 20074a8:	294b883a 	add	r5,r5,r5
 20074ac:	10bfffc4 	addi	r2,r2,-1
 20074b0:	18c7883a 	add	r3,r3,r3
 20074b4:	293ffa36 	bltu	r5,r4,20074a0 <__udivsi3+0x18>
 20074b8:	18000826 	beq	r3,zero,20074dc <__udivsi3+0x54>
 20074bc:	0005883a 	mov	r2,zero
 20074c0:	31400236 	bltu	r6,r5,20074cc <__udivsi3+0x44>
 20074c4:	314dc83a 	sub	r6,r6,r5
 20074c8:	10c4b03a 	or	r2,r2,r3
 20074cc:	1806d07a 	srli	r3,r3,1
 20074d0:	280ad07a 	srli	r5,r5,1
 20074d4:	183ffa1e 	bne	r3,zero,20074c0 <__udivsi3+0x38>
 20074d8:	f800283a 	ret
 20074dc:	0005883a 	mov	r2,zero
 20074e0:	f800283a 	ret
 20074e4:	00c00044 	movi	r3,1
 20074e8:	003ff406 	br	20074bc <__udivsi3+0x34>

020074ec <__umodsi3>:
 20074ec:	2005883a 	mov	r2,r4
 20074f0:	2900122e 	bgeu	r5,r4,200753c <__umodsi3+0x50>
 20074f4:	28001116 	blt	r5,zero,200753c <__umodsi3+0x50>
 20074f8:	01800804 	movi	r6,32
 20074fc:	00c00044 	movi	r3,1
 2007500:	00000206 	br	200750c <__umodsi3+0x20>
 2007504:	30000c26 	beq	r6,zero,2007538 <__umodsi3+0x4c>
 2007508:	28000516 	blt	r5,zero,2007520 <__umodsi3+0x34>
 200750c:	294b883a 	add	r5,r5,r5
 2007510:	31bfffc4 	addi	r6,r6,-1
 2007514:	18c7883a 	add	r3,r3,r3
 2007518:	293ffa36 	bltu	r5,r4,2007504 <__umodsi3+0x18>
 200751c:	18000626 	beq	r3,zero,2007538 <__umodsi3+0x4c>
 2007520:	1806d07a 	srli	r3,r3,1
 2007524:	11400136 	bltu	r2,r5,200752c <__umodsi3+0x40>
 2007528:	1145c83a 	sub	r2,r2,r5
 200752c:	280ad07a 	srli	r5,r5,1
 2007530:	183ffb1e 	bne	r3,zero,2007520 <__umodsi3+0x34>
 2007534:	f800283a 	ret
 2007538:	f800283a 	ret
 200753c:	00c00044 	movi	r3,1
 2007540:	003ff706 	br	2007520 <__umodsi3+0x34>

02007544 <__adddf3>:
 2007544:	02c00434 	movhi	r11,16
 2007548:	5affffc4 	addi	r11,r11,-1
 200754c:	2806d7fa 	srli	r3,r5,31
 2007550:	2ad4703a 	and	r10,r5,r11
 2007554:	3ad2703a 	and	r9,r7,r11
 2007558:	3804d53a 	srli	r2,r7,20
 200755c:	3018d77a 	srli	r12,r6,29
 2007560:	280ad53a 	srli	r5,r5,20
 2007564:	501490fa 	slli	r10,r10,3
 2007568:	2010d77a 	srli	r8,r4,29
 200756c:	481290fa 	slli	r9,r9,3
 2007570:	380ed7fa 	srli	r7,r7,31
 2007574:	defffb04 	addi	sp,sp,-20
 2007578:	dc800215 	stw	r18,8(sp)
 200757c:	dc400115 	stw	r17,4(sp)
 2007580:	dc000015 	stw	r16,0(sp)
 2007584:	dfc00415 	stw	ra,16(sp)
 2007588:	dcc00315 	stw	r19,12(sp)
 200758c:	1c803fcc 	andi	r18,r3,255
 2007590:	2c01ffcc 	andi	r16,r5,2047
 2007594:	5210b03a 	or	r8,r10,r8
 2007598:	202290fa 	slli	r17,r4,3
 200759c:	1081ffcc 	andi	r2,r2,2047
 20075a0:	4b12b03a 	or	r9,r9,r12
 20075a4:	300c90fa 	slli	r6,r6,3
 20075a8:	91c07526 	beq	r18,r7,2007780 <__adddf3+0x23c>
 20075ac:	8087c83a 	sub	r3,r16,r2
 20075b0:	00c0ab0e 	bge	zero,r3,2007860 <__adddf3+0x31c>
 20075b4:	10002a1e 	bne	r2,zero,2007660 <__adddf3+0x11c>
 20075b8:	4984b03a 	or	r2,r9,r6
 20075bc:	1000961e 	bne	r2,zero,2007818 <__adddf3+0x2d4>
 20075c0:	888001cc 	andi	r2,r17,7
 20075c4:	10000726 	beq	r2,zero,20075e4 <__adddf3+0xa0>
 20075c8:	888003cc 	andi	r2,r17,15
 20075cc:	00c00104 	movi	r3,4
 20075d0:	10c00426 	beq	r2,r3,20075e4 <__adddf3+0xa0>
 20075d4:	88c7883a 	add	r3,r17,r3
 20075d8:	1c63803a 	cmpltu	r17,r3,r17
 20075dc:	4451883a 	add	r8,r8,r17
 20075e0:	1823883a 	mov	r17,r3
 20075e4:	4080202c 	andhi	r2,r8,128
 20075e8:	10005926 	beq	r2,zero,2007750 <__adddf3+0x20c>
 20075ec:	84000044 	addi	r16,r16,1
 20075f0:	0081ffc4 	movi	r2,2047
 20075f4:	8080ba26 	beq	r16,r2,20078e0 <__adddf3+0x39c>
 20075f8:	00bfe034 	movhi	r2,65408
 20075fc:	10bfffc4 	addi	r2,r2,-1
 2007600:	4090703a 	and	r8,r8,r2
 2007604:	4004977a 	slli	r2,r8,29
 2007608:	4010927a 	slli	r8,r8,9
 200760c:	8822d0fa 	srli	r17,r17,3
 2007610:	8401ffcc 	andi	r16,r16,2047
 2007614:	4010d33a 	srli	r8,r8,12
 2007618:	9007883a 	mov	r3,r18
 200761c:	1444b03a 	or	r2,r2,r17
 2007620:	8401ffcc 	andi	r16,r16,2047
 2007624:	8020953a 	slli	r16,r16,20
 2007628:	18c03fcc 	andi	r3,r3,255
 200762c:	01000434 	movhi	r4,16
 2007630:	213fffc4 	addi	r4,r4,-1
 2007634:	180697fa 	slli	r3,r3,31
 2007638:	4110703a 	and	r8,r8,r4
 200763c:	4410b03a 	or	r8,r8,r16
 2007640:	40c6b03a 	or	r3,r8,r3
 2007644:	dfc00417 	ldw	ra,16(sp)
 2007648:	dcc00317 	ldw	r19,12(sp)
 200764c:	dc800217 	ldw	r18,8(sp)
 2007650:	dc400117 	ldw	r17,4(sp)
 2007654:	dc000017 	ldw	r16,0(sp)
 2007658:	dec00504 	addi	sp,sp,20
 200765c:	f800283a 	ret
 2007660:	0081ffc4 	movi	r2,2047
 2007664:	80bfd626 	beq	r16,r2,20075c0 <__adddf3+0x7c>
 2007668:	4a402034 	orhi	r9,r9,128
 200766c:	00800e04 	movi	r2,56
 2007670:	10c09f16 	blt	r2,r3,20078f0 <__adddf3+0x3ac>
 2007674:	008007c4 	movi	r2,31
 2007678:	10c0c216 	blt	r2,r3,2007984 <__adddf3+0x440>
 200767c:	00800804 	movi	r2,32
 2007680:	10c5c83a 	sub	r2,r2,r3
 2007684:	488a983a 	sll	r5,r9,r2
 2007688:	30c8d83a 	srl	r4,r6,r3
 200768c:	3084983a 	sll	r2,r6,r2
 2007690:	48c6d83a 	srl	r3,r9,r3
 2007694:	290cb03a 	or	r6,r5,r4
 2007698:	1004c03a 	cmpne	r2,r2,zero
 200769c:	308cb03a 	or	r6,r6,r2
 20076a0:	898dc83a 	sub	r6,r17,r6
 20076a4:	89a3803a 	cmpltu	r17,r17,r6
 20076a8:	40d1c83a 	sub	r8,r8,r3
 20076ac:	4451c83a 	sub	r8,r8,r17
 20076b0:	3023883a 	mov	r17,r6
 20076b4:	4080202c 	andhi	r2,r8,128
 20076b8:	10002326 	beq	r2,zero,2007748 <__adddf3+0x204>
 20076bc:	04c02034 	movhi	r19,128
 20076c0:	9cffffc4 	addi	r19,r19,-1
 20076c4:	44e6703a 	and	r19,r8,r19
 20076c8:	98007626 	beq	r19,zero,20078a4 <__adddf3+0x360>
 20076cc:	9809883a 	mov	r4,r19
 20076d0:	2009bfc0 	call	2009bfc <__clzsi2>
 20076d4:	10fffe04 	addi	r3,r2,-8
 20076d8:	010007c4 	movi	r4,31
 20076dc:	20c07716 	blt	r4,r3,20078bc <__adddf3+0x378>
 20076e0:	00800804 	movi	r2,32
 20076e4:	10c5c83a 	sub	r2,r2,r3
 20076e8:	8884d83a 	srl	r2,r17,r2
 20076ec:	98d0983a 	sll	r8,r19,r3
 20076f0:	88e2983a 	sll	r17,r17,r3
 20076f4:	1204b03a 	or	r2,r2,r8
 20076f8:	1c007416 	blt	r3,r16,20078cc <__adddf3+0x388>
 20076fc:	1c21c83a 	sub	r16,r3,r16
 2007700:	82000044 	addi	r8,r16,1
 2007704:	00c007c4 	movi	r3,31
 2007708:	1a009116 	blt	r3,r8,2007950 <__adddf3+0x40c>
 200770c:	00c00804 	movi	r3,32
 2007710:	1a07c83a 	sub	r3,r3,r8
 2007714:	8a08d83a 	srl	r4,r17,r8
 2007718:	88e2983a 	sll	r17,r17,r3
 200771c:	10c6983a 	sll	r3,r2,r3
 2007720:	1210d83a 	srl	r8,r2,r8
 2007724:	8804c03a 	cmpne	r2,r17,zero
 2007728:	1906b03a 	or	r3,r3,r4
 200772c:	18a2b03a 	or	r17,r3,r2
 2007730:	0021883a 	mov	r16,zero
 2007734:	003fa206 	br	20075c0 <__adddf3+0x7c>
 2007738:	1890b03a 	or	r8,r3,r2
 200773c:	40017d26 	beq	r8,zero,2007d34 <__adddf3+0x7f0>
 2007740:	1011883a 	mov	r8,r2
 2007744:	1823883a 	mov	r17,r3
 2007748:	888001cc 	andi	r2,r17,7
 200774c:	103f9e1e 	bne	r2,zero,20075c8 <__adddf3+0x84>
 2007750:	4004977a 	slli	r2,r8,29
 2007754:	8822d0fa 	srli	r17,r17,3
 2007758:	4010d0fa 	srli	r8,r8,3
 200775c:	9007883a 	mov	r3,r18
 2007760:	1444b03a 	or	r2,r2,r17
 2007764:	0101ffc4 	movi	r4,2047
 2007768:	81002426 	beq	r16,r4,20077fc <__adddf3+0x2b8>
 200776c:	8120703a 	and	r16,r16,r4
 2007770:	01000434 	movhi	r4,16
 2007774:	213fffc4 	addi	r4,r4,-1
 2007778:	4110703a 	and	r8,r8,r4
 200777c:	003fa806 	br	2007620 <__adddf3+0xdc>
 2007780:	8089c83a 	sub	r4,r16,r2
 2007784:	01005e0e 	bge	zero,r4,2007900 <__adddf3+0x3bc>
 2007788:	10002b26 	beq	r2,zero,2007838 <__adddf3+0x2f4>
 200778c:	0081ffc4 	movi	r2,2047
 2007790:	80bf8b26 	beq	r16,r2,20075c0 <__adddf3+0x7c>
 2007794:	4a402034 	orhi	r9,r9,128
 2007798:	00800e04 	movi	r2,56
 200779c:	1100a40e 	bge	r2,r4,2007a30 <__adddf3+0x4ec>
 20077a0:	498cb03a 	or	r6,r9,r6
 20077a4:	300ac03a 	cmpne	r5,r6,zero
 20077a8:	0013883a 	mov	r9,zero
 20077ac:	2c4b883a 	add	r5,r5,r17
 20077b0:	2c63803a 	cmpltu	r17,r5,r17
 20077b4:	4a11883a 	add	r8,r9,r8
 20077b8:	8a11883a 	add	r8,r17,r8
 20077bc:	2823883a 	mov	r17,r5
 20077c0:	4080202c 	andhi	r2,r8,128
 20077c4:	103fe026 	beq	r2,zero,2007748 <__adddf3+0x204>
 20077c8:	84000044 	addi	r16,r16,1
 20077cc:	0081ffc4 	movi	r2,2047
 20077d0:	8080d226 	beq	r16,r2,2007b1c <__adddf3+0x5d8>
 20077d4:	00bfe034 	movhi	r2,65408
 20077d8:	10bfffc4 	addi	r2,r2,-1
 20077dc:	4090703a 	and	r8,r8,r2
 20077e0:	880ad07a 	srli	r5,r17,1
 20077e4:	400897fa 	slli	r4,r8,31
 20077e8:	88c0004c 	andi	r3,r17,1
 20077ec:	28e2b03a 	or	r17,r5,r3
 20077f0:	4010d07a 	srli	r8,r8,1
 20077f4:	2462b03a 	or	r17,r4,r17
 20077f8:	003f7106 	br	20075c0 <__adddf3+0x7c>
 20077fc:	4088b03a 	or	r4,r8,r2
 2007800:	20014526 	beq	r4,zero,2007d18 <__adddf3+0x7d4>
 2007804:	01000434 	movhi	r4,16
 2007808:	42000234 	orhi	r8,r8,8
 200780c:	213fffc4 	addi	r4,r4,-1
 2007810:	4110703a 	and	r8,r8,r4
 2007814:	003f8206 	br	2007620 <__adddf3+0xdc>
 2007818:	18ffffc4 	addi	r3,r3,-1
 200781c:	1800491e 	bne	r3,zero,2007944 <__adddf3+0x400>
 2007820:	898bc83a 	sub	r5,r17,r6
 2007824:	8963803a 	cmpltu	r17,r17,r5
 2007828:	4251c83a 	sub	r8,r8,r9
 200782c:	4451c83a 	sub	r8,r8,r17
 2007830:	2823883a 	mov	r17,r5
 2007834:	003f9f06 	br	20076b4 <__adddf3+0x170>
 2007838:	4984b03a 	or	r2,r9,r6
 200783c:	103f6026 	beq	r2,zero,20075c0 <__adddf3+0x7c>
 2007840:	213fffc4 	addi	r4,r4,-1
 2007844:	2000931e 	bne	r4,zero,2007a94 <__adddf3+0x550>
 2007848:	898d883a 	add	r6,r17,r6
 200784c:	3463803a 	cmpltu	r17,r6,r17
 2007850:	4251883a 	add	r8,r8,r9
 2007854:	8a11883a 	add	r8,r17,r8
 2007858:	3023883a 	mov	r17,r6
 200785c:	003fd806 	br	20077c0 <__adddf3+0x27c>
 2007860:	1800541e 	bne	r3,zero,20079b4 <__adddf3+0x470>
 2007864:	80800044 	addi	r2,r16,1
 2007868:	1081ffcc 	andi	r2,r2,2047
 200786c:	00c00044 	movi	r3,1
 2007870:	1880a00e 	bge	r3,r2,2007af4 <__adddf3+0x5b0>
 2007874:	8989c83a 	sub	r4,r17,r6
 2007878:	8905803a 	cmpltu	r2,r17,r4
 200787c:	4267c83a 	sub	r19,r8,r9
 2007880:	98a7c83a 	sub	r19,r19,r2
 2007884:	9880202c 	andhi	r2,r19,128
 2007888:	10006326 	beq	r2,zero,2007a18 <__adddf3+0x4d4>
 200788c:	3463c83a 	sub	r17,r6,r17
 2007890:	4a07c83a 	sub	r3,r9,r8
 2007894:	344d803a 	cmpltu	r6,r6,r17
 2007898:	19a7c83a 	sub	r19,r3,r6
 200789c:	3825883a 	mov	r18,r7
 20078a0:	983f8a1e 	bne	r19,zero,20076cc <__adddf3+0x188>
 20078a4:	8809883a 	mov	r4,r17
 20078a8:	2009bfc0 	call	2009bfc <__clzsi2>
 20078ac:	10800804 	addi	r2,r2,32
 20078b0:	10fffe04 	addi	r3,r2,-8
 20078b4:	010007c4 	movi	r4,31
 20078b8:	20ff890e 	bge	r4,r3,20076e0 <__adddf3+0x19c>
 20078bc:	10bff604 	addi	r2,r2,-40
 20078c0:	8884983a 	sll	r2,r17,r2
 20078c4:	0023883a 	mov	r17,zero
 20078c8:	1c3f8c0e 	bge	r3,r16,20076fc <__adddf3+0x1b8>
 20078cc:	023fe034 	movhi	r8,65408
 20078d0:	423fffc4 	addi	r8,r8,-1
 20078d4:	80e1c83a 	sub	r16,r16,r3
 20078d8:	1210703a 	and	r8,r2,r8
 20078dc:	003f3806 	br	20075c0 <__adddf3+0x7c>
 20078e0:	9007883a 	mov	r3,r18
 20078e4:	0011883a 	mov	r8,zero
 20078e8:	0005883a 	mov	r2,zero
 20078ec:	003f4c06 	br	2007620 <__adddf3+0xdc>
 20078f0:	498cb03a 	or	r6,r9,r6
 20078f4:	300cc03a 	cmpne	r6,r6,zero
 20078f8:	0007883a 	mov	r3,zero
 20078fc:	003f6806 	br	20076a0 <__adddf3+0x15c>
 2007900:	20009c1e 	bne	r4,zero,2007b74 <__adddf3+0x630>
 2007904:	80800044 	addi	r2,r16,1
 2007908:	1141ffcc 	andi	r5,r2,2047
 200790c:	01000044 	movi	r4,1
 2007910:	2140670e 	bge	r4,r5,2007ab0 <__adddf3+0x56c>
 2007914:	0101ffc4 	movi	r4,2047
 2007918:	11007f26 	beq	r2,r4,2007b18 <__adddf3+0x5d4>
 200791c:	898d883a 	add	r6,r17,r6
 2007920:	4247883a 	add	r3,r8,r9
 2007924:	3451803a 	cmpltu	r8,r6,r17
 2007928:	40d1883a 	add	r8,r8,r3
 200792c:	402297fa 	slli	r17,r8,31
 2007930:	300cd07a 	srli	r6,r6,1
 2007934:	4010d07a 	srli	r8,r8,1
 2007938:	1021883a 	mov	r16,r2
 200793c:	89a2b03a 	or	r17,r17,r6
 2007940:	003f1f06 	br	20075c0 <__adddf3+0x7c>
 2007944:	0081ffc4 	movi	r2,2047
 2007948:	80bf481e 	bne	r16,r2,200766c <__adddf3+0x128>
 200794c:	003f1c06 	br	20075c0 <__adddf3+0x7c>
 2007950:	843ff844 	addi	r16,r16,-31
 2007954:	01000804 	movi	r4,32
 2007958:	1406d83a 	srl	r3,r2,r16
 200795c:	41005026 	beq	r8,r4,2007aa0 <__adddf3+0x55c>
 2007960:	01001004 	movi	r4,64
 2007964:	2211c83a 	sub	r8,r4,r8
 2007968:	1204983a 	sll	r2,r2,r8
 200796c:	88a2b03a 	or	r17,r17,r2
 2007970:	8822c03a 	cmpne	r17,r17,zero
 2007974:	1c62b03a 	or	r17,r3,r17
 2007978:	0011883a 	mov	r8,zero
 200797c:	0021883a 	mov	r16,zero
 2007980:	003f7106 	br	2007748 <__adddf3+0x204>
 2007984:	193ff804 	addi	r4,r3,-32
 2007988:	00800804 	movi	r2,32
 200798c:	4908d83a 	srl	r4,r9,r4
 2007990:	18804526 	beq	r3,r2,2007aa8 <__adddf3+0x564>
 2007994:	00801004 	movi	r2,64
 2007998:	10c5c83a 	sub	r2,r2,r3
 200799c:	4886983a 	sll	r3,r9,r2
 20079a0:	198cb03a 	or	r6,r3,r6
 20079a4:	300cc03a 	cmpne	r6,r6,zero
 20079a8:	218cb03a 	or	r6,r4,r6
 20079ac:	0007883a 	mov	r3,zero
 20079b0:	003f3b06 	br	20076a0 <__adddf3+0x15c>
 20079b4:	80002a26 	beq	r16,zero,2007a60 <__adddf3+0x51c>
 20079b8:	0101ffc4 	movi	r4,2047
 20079bc:	11006826 	beq	r2,r4,2007b60 <__adddf3+0x61c>
 20079c0:	00c7c83a 	sub	r3,zero,r3
 20079c4:	42002034 	orhi	r8,r8,128
 20079c8:	01000e04 	movi	r4,56
 20079cc:	20c07c16 	blt	r4,r3,2007bc0 <__adddf3+0x67c>
 20079d0:	010007c4 	movi	r4,31
 20079d4:	20c0da16 	blt	r4,r3,2007d40 <__adddf3+0x7fc>
 20079d8:	01000804 	movi	r4,32
 20079dc:	20c9c83a 	sub	r4,r4,r3
 20079e0:	4114983a 	sll	r10,r8,r4
 20079e4:	88cad83a 	srl	r5,r17,r3
 20079e8:	8908983a 	sll	r4,r17,r4
 20079ec:	40c6d83a 	srl	r3,r8,r3
 20079f0:	5162b03a 	or	r17,r10,r5
 20079f4:	2008c03a 	cmpne	r4,r4,zero
 20079f8:	8922b03a 	or	r17,r17,r4
 20079fc:	3463c83a 	sub	r17,r6,r17
 2007a00:	48c7c83a 	sub	r3,r9,r3
 2007a04:	344d803a 	cmpltu	r6,r6,r17
 2007a08:	1991c83a 	sub	r8,r3,r6
 2007a0c:	1021883a 	mov	r16,r2
 2007a10:	3825883a 	mov	r18,r7
 2007a14:	003f2706 	br	20076b4 <__adddf3+0x170>
 2007a18:	24d0b03a 	or	r8,r4,r19
 2007a1c:	40001b1e 	bne	r8,zero,2007a8c <__adddf3+0x548>
 2007a20:	0005883a 	mov	r2,zero
 2007a24:	0007883a 	mov	r3,zero
 2007a28:	0021883a 	mov	r16,zero
 2007a2c:	003f4d06 	br	2007764 <__adddf3+0x220>
 2007a30:	008007c4 	movi	r2,31
 2007a34:	11003c16 	blt	r2,r4,2007b28 <__adddf3+0x5e4>
 2007a38:	00800804 	movi	r2,32
 2007a3c:	1105c83a 	sub	r2,r2,r4
 2007a40:	488e983a 	sll	r7,r9,r2
 2007a44:	310ad83a 	srl	r5,r6,r4
 2007a48:	3084983a 	sll	r2,r6,r2
 2007a4c:	4912d83a 	srl	r9,r9,r4
 2007a50:	394ab03a 	or	r5,r7,r5
 2007a54:	1004c03a 	cmpne	r2,r2,zero
 2007a58:	288ab03a 	or	r5,r5,r2
 2007a5c:	003f5306 	br	20077ac <__adddf3+0x268>
 2007a60:	4448b03a 	or	r4,r8,r17
 2007a64:	20003e26 	beq	r4,zero,2007b60 <__adddf3+0x61c>
 2007a68:	00c6303a 	nor	r3,zero,r3
 2007a6c:	18003a1e 	bne	r3,zero,2007b58 <__adddf3+0x614>
 2007a70:	3463c83a 	sub	r17,r6,r17
 2007a74:	4a07c83a 	sub	r3,r9,r8
 2007a78:	344d803a 	cmpltu	r6,r6,r17
 2007a7c:	1991c83a 	sub	r8,r3,r6
 2007a80:	1021883a 	mov	r16,r2
 2007a84:	3825883a 	mov	r18,r7
 2007a88:	003f0a06 	br	20076b4 <__adddf3+0x170>
 2007a8c:	2023883a 	mov	r17,r4
 2007a90:	003f0d06 	br	20076c8 <__adddf3+0x184>
 2007a94:	0081ffc4 	movi	r2,2047
 2007a98:	80bf3f1e 	bne	r16,r2,2007798 <__adddf3+0x254>
 2007a9c:	003ec806 	br	20075c0 <__adddf3+0x7c>
 2007aa0:	0005883a 	mov	r2,zero
 2007aa4:	003fb106 	br	200796c <__adddf3+0x428>
 2007aa8:	0007883a 	mov	r3,zero
 2007aac:	003fbc06 	br	20079a0 <__adddf3+0x45c>
 2007ab0:	4444b03a 	or	r2,r8,r17
 2007ab4:	8000871e 	bne	r16,zero,2007cd4 <__adddf3+0x790>
 2007ab8:	1000ba26 	beq	r2,zero,2007da4 <__adddf3+0x860>
 2007abc:	4984b03a 	or	r2,r9,r6
 2007ac0:	103ebf26 	beq	r2,zero,20075c0 <__adddf3+0x7c>
 2007ac4:	8985883a 	add	r2,r17,r6
 2007ac8:	4247883a 	add	r3,r8,r9
 2007acc:	1451803a 	cmpltu	r8,r2,r17
 2007ad0:	40d1883a 	add	r8,r8,r3
 2007ad4:	40c0202c 	andhi	r3,r8,128
 2007ad8:	1023883a 	mov	r17,r2
 2007adc:	183f1a26 	beq	r3,zero,2007748 <__adddf3+0x204>
 2007ae0:	00bfe034 	movhi	r2,65408
 2007ae4:	10bfffc4 	addi	r2,r2,-1
 2007ae8:	2021883a 	mov	r16,r4
 2007aec:	4090703a 	and	r8,r8,r2
 2007af0:	003eb306 	br	20075c0 <__adddf3+0x7c>
 2007af4:	4444b03a 	or	r2,r8,r17
 2007af8:	8000291e 	bne	r16,zero,2007ba0 <__adddf3+0x65c>
 2007afc:	10004b1e 	bne	r2,zero,2007c2c <__adddf3+0x6e8>
 2007b00:	4990b03a 	or	r8,r9,r6
 2007b04:	40008b26 	beq	r8,zero,2007d34 <__adddf3+0x7f0>
 2007b08:	4811883a 	mov	r8,r9
 2007b0c:	3023883a 	mov	r17,r6
 2007b10:	3825883a 	mov	r18,r7
 2007b14:	003eaa06 	br	20075c0 <__adddf3+0x7c>
 2007b18:	1021883a 	mov	r16,r2
 2007b1c:	0011883a 	mov	r8,zero
 2007b20:	0005883a 	mov	r2,zero
 2007b24:	003f0f06 	br	2007764 <__adddf3+0x220>
 2007b28:	217ff804 	addi	r5,r4,-32
 2007b2c:	00800804 	movi	r2,32
 2007b30:	494ad83a 	srl	r5,r9,r5
 2007b34:	20807d26 	beq	r4,r2,2007d2c <__adddf3+0x7e8>
 2007b38:	00801004 	movi	r2,64
 2007b3c:	1109c83a 	sub	r4,r2,r4
 2007b40:	4912983a 	sll	r9,r9,r4
 2007b44:	498cb03a 	or	r6,r9,r6
 2007b48:	300cc03a 	cmpne	r6,r6,zero
 2007b4c:	298ab03a 	or	r5,r5,r6
 2007b50:	0013883a 	mov	r9,zero
 2007b54:	003f1506 	br	20077ac <__adddf3+0x268>
 2007b58:	0101ffc4 	movi	r4,2047
 2007b5c:	113f9a1e 	bne	r2,r4,20079c8 <__adddf3+0x484>
 2007b60:	4811883a 	mov	r8,r9
 2007b64:	3023883a 	mov	r17,r6
 2007b68:	1021883a 	mov	r16,r2
 2007b6c:	3825883a 	mov	r18,r7
 2007b70:	003e9306 	br	20075c0 <__adddf3+0x7c>
 2007b74:	8000161e 	bne	r16,zero,2007bd0 <__adddf3+0x68c>
 2007b78:	444ab03a 	or	r5,r8,r17
 2007b7c:	28005126 	beq	r5,zero,2007cc4 <__adddf3+0x780>
 2007b80:	0108303a 	nor	r4,zero,r4
 2007b84:	20004d1e 	bne	r4,zero,2007cbc <__adddf3+0x778>
 2007b88:	89a3883a 	add	r17,r17,r6
 2007b8c:	4253883a 	add	r9,r8,r9
 2007b90:	898d803a 	cmpltu	r6,r17,r6
 2007b94:	3251883a 	add	r8,r6,r9
 2007b98:	1021883a 	mov	r16,r2
 2007b9c:	003f0806 	br	20077c0 <__adddf3+0x27c>
 2007ba0:	1000301e 	bne	r2,zero,2007c64 <__adddf3+0x720>
 2007ba4:	4984b03a 	or	r2,r9,r6
 2007ba8:	10007126 	beq	r2,zero,2007d70 <__adddf3+0x82c>
 2007bac:	4811883a 	mov	r8,r9
 2007bb0:	3023883a 	mov	r17,r6
 2007bb4:	3825883a 	mov	r18,r7
 2007bb8:	0401ffc4 	movi	r16,2047
 2007bbc:	003e8006 	br	20075c0 <__adddf3+0x7c>
 2007bc0:	4462b03a 	or	r17,r8,r17
 2007bc4:	8822c03a 	cmpne	r17,r17,zero
 2007bc8:	0007883a 	mov	r3,zero
 2007bcc:	003f8b06 	br	20079fc <__adddf3+0x4b8>
 2007bd0:	0141ffc4 	movi	r5,2047
 2007bd4:	11403b26 	beq	r2,r5,2007cc4 <__adddf3+0x780>
 2007bd8:	0109c83a 	sub	r4,zero,r4
 2007bdc:	42002034 	orhi	r8,r8,128
 2007be0:	01400e04 	movi	r5,56
 2007be4:	29006716 	blt	r5,r4,2007d84 <__adddf3+0x840>
 2007be8:	014007c4 	movi	r5,31
 2007bec:	29007016 	blt	r5,r4,2007db0 <__adddf3+0x86c>
 2007bf0:	01400804 	movi	r5,32
 2007bf4:	290bc83a 	sub	r5,r5,r4
 2007bf8:	4154983a 	sll	r10,r8,r5
 2007bfc:	890ed83a 	srl	r7,r17,r4
 2007c00:	894a983a 	sll	r5,r17,r5
 2007c04:	4108d83a 	srl	r4,r8,r4
 2007c08:	51e2b03a 	or	r17,r10,r7
 2007c0c:	280ac03a 	cmpne	r5,r5,zero
 2007c10:	8962b03a 	or	r17,r17,r5
 2007c14:	89a3883a 	add	r17,r17,r6
 2007c18:	2253883a 	add	r9,r4,r9
 2007c1c:	898d803a 	cmpltu	r6,r17,r6
 2007c20:	3251883a 	add	r8,r6,r9
 2007c24:	1021883a 	mov	r16,r2
 2007c28:	003ee506 	br	20077c0 <__adddf3+0x27c>
 2007c2c:	4984b03a 	or	r2,r9,r6
 2007c30:	103e6326 	beq	r2,zero,20075c0 <__adddf3+0x7c>
 2007c34:	8987c83a 	sub	r3,r17,r6
 2007c38:	88c9803a 	cmpltu	r4,r17,r3
 2007c3c:	4245c83a 	sub	r2,r8,r9
 2007c40:	1105c83a 	sub	r2,r2,r4
 2007c44:	1100202c 	andhi	r4,r2,128
 2007c48:	203ebb26 	beq	r4,zero,2007738 <__adddf3+0x1f4>
 2007c4c:	3463c83a 	sub	r17,r6,r17
 2007c50:	4a07c83a 	sub	r3,r9,r8
 2007c54:	344d803a 	cmpltu	r6,r6,r17
 2007c58:	1991c83a 	sub	r8,r3,r6
 2007c5c:	3825883a 	mov	r18,r7
 2007c60:	003e5706 	br	20075c0 <__adddf3+0x7c>
 2007c64:	4984b03a 	or	r2,r9,r6
 2007c68:	10002e26 	beq	r2,zero,2007d24 <__adddf3+0x7e0>
 2007c6c:	4004d0fa 	srli	r2,r8,3
 2007c70:	8822d0fa 	srli	r17,r17,3
 2007c74:	4010977a 	slli	r8,r8,29
 2007c78:	10c0022c 	andhi	r3,r2,8
 2007c7c:	4462b03a 	or	r17,r8,r17
 2007c80:	18000826 	beq	r3,zero,2007ca4 <__adddf3+0x760>
 2007c84:	4808d0fa 	srli	r4,r9,3
 2007c88:	20c0022c 	andhi	r3,r4,8
 2007c8c:	1800051e 	bne	r3,zero,2007ca4 <__adddf3+0x760>
 2007c90:	300cd0fa 	srli	r6,r6,3
 2007c94:	4806977a 	slli	r3,r9,29
 2007c98:	2005883a 	mov	r2,r4
 2007c9c:	3825883a 	mov	r18,r7
 2007ca0:	19a2b03a 	or	r17,r3,r6
 2007ca4:	8810d77a 	srli	r8,r17,29
 2007ca8:	100490fa 	slli	r2,r2,3
 2007cac:	882290fa 	slli	r17,r17,3
 2007cb0:	0401ffc4 	movi	r16,2047
 2007cb4:	4090b03a 	or	r8,r8,r2
 2007cb8:	003e4106 	br	20075c0 <__adddf3+0x7c>
 2007cbc:	0141ffc4 	movi	r5,2047
 2007cc0:	117fc71e 	bne	r2,r5,2007be0 <__adddf3+0x69c>
 2007cc4:	4811883a 	mov	r8,r9
 2007cc8:	3023883a 	mov	r17,r6
 2007ccc:	1021883a 	mov	r16,r2
 2007cd0:	003e3b06 	br	20075c0 <__adddf3+0x7c>
 2007cd4:	10002f26 	beq	r2,zero,2007d94 <__adddf3+0x850>
 2007cd8:	4984b03a 	or	r2,r9,r6
 2007cdc:	10001126 	beq	r2,zero,2007d24 <__adddf3+0x7e0>
 2007ce0:	4004d0fa 	srli	r2,r8,3
 2007ce4:	8822d0fa 	srli	r17,r17,3
 2007ce8:	4010977a 	slli	r8,r8,29
 2007cec:	10c0022c 	andhi	r3,r2,8
 2007cf0:	4462b03a 	or	r17,r8,r17
 2007cf4:	183feb26 	beq	r3,zero,2007ca4 <__adddf3+0x760>
 2007cf8:	4808d0fa 	srli	r4,r9,3
 2007cfc:	20c0022c 	andhi	r3,r4,8
 2007d00:	183fe81e 	bne	r3,zero,2007ca4 <__adddf3+0x760>
 2007d04:	300cd0fa 	srli	r6,r6,3
 2007d08:	4806977a 	slli	r3,r9,29
 2007d0c:	2005883a 	mov	r2,r4
 2007d10:	19a2b03a 	or	r17,r3,r6
 2007d14:	003fe306 	br	2007ca4 <__adddf3+0x760>
 2007d18:	0011883a 	mov	r8,zero
 2007d1c:	0005883a 	mov	r2,zero
 2007d20:	003e3f06 	br	2007620 <__adddf3+0xdc>
 2007d24:	0401ffc4 	movi	r16,2047
 2007d28:	003e2506 	br	20075c0 <__adddf3+0x7c>
 2007d2c:	0013883a 	mov	r9,zero
 2007d30:	003f8406 	br	2007b44 <__adddf3+0x600>
 2007d34:	0005883a 	mov	r2,zero
 2007d38:	0007883a 	mov	r3,zero
 2007d3c:	003e8906 	br	2007764 <__adddf3+0x220>
 2007d40:	197ff804 	addi	r5,r3,-32
 2007d44:	01000804 	movi	r4,32
 2007d48:	414ad83a 	srl	r5,r8,r5
 2007d4c:	19002426 	beq	r3,r4,2007de0 <__adddf3+0x89c>
 2007d50:	01001004 	movi	r4,64
 2007d54:	20c7c83a 	sub	r3,r4,r3
 2007d58:	40c6983a 	sll	r3,r8,r3
 2007d5c:	1c46b03a 	or	r3,r3,r17
 2007d60:	1806c03a 	cmpne	r3,r3,zero
 2007d64:	28e2b03a 	or	r17,r5,r3
 2007d68:	0007883a 	mov	r3,zero
 2007d6c:	003f2306 	br	20079fc <__adddf3+0x4b8>
 2007d70:	0007883a 	mov	r3,zero
 2007d74:	5811883a 	mov	r8,r11
 2007d78:	00bfffc4 	movi	r2,-1
 2007d7c:	0401ffc4 	movi	r16,2047
 2007d80:	003e7806 	br	2007764 <__adddf3+0x220>
 2007d84:	4462b03a 	or	r17,r8,r17
 2007d88:	8822c03a 	cmpne	r17,r17,zero
 2007d8c:	0009883a 	mov	r4,zero
 2007d90:	003fa006 	br	2007c14 <__adddf3+0x6d0>
 2007d94:	4811883a 	mov	r8,r9
 2007d98:	3023883a 	mov	r17,r6
 2007d9c:	0401ffc4 	movi	r16,2047
 2007da0:	003e0706 	br	20075c0 <__adddf3+0x7c>
 2007da4:	4811883a 	mov	r8,r9
 2007da8:	3023883a 	mov	r17,r6
 2007dac:	003e0406 	br	20075c0 <__adddf3+0x7c>
 2007db0:	21fff804 	addi	r7,r4,-32
 2007db4:	01400804 	movi	r5,32
 2007db8:	41ced83a 	srl	r7,r8,r7
 2007dbc:	21400a26 	beq	r4,r5,2007de8 <__adddf3+0x8a4>
 2007dc0:	01401004 	movi	r5,64
 2007dc4:	2909c83a 	sub	r4,r5,r4
 2007dc8:	4108983a 	sll	r4,r8,r4
 2007dcc:	2448b03a 	or	r4,r4,r17
 2007dd0:	2008c03a 	cmpne	r4,r4,zero
 2007dd4:	3922b03a 	or	r17,r7,r4
 2007dd8:	0009883a 	mov	r4,zero
 2007ddc:	003f8d06 	br	2007c14 <__adddf3+0x6d0>
 2007de0:	0007883a 	mov	r3,zero
 2007de4:	003fdd06 	br	2007d5c <__adddf3+0x818>
 2007de8:	0009883a 	mov	r4,zero
 2007dec:	003ff706 	br	2007dcc <__adddf3+0x888>

02007df0 <__divdf3>:
 2007df0:	defff204 	addi	sp,sp,-56
 2007df4:	dd400915 	stw	r21,36(sp)
 2007df8:	282ad53a 	srli	r21,r5,20
 2007dfc:	dd000815 	stw	r20,32(sp)
 2007e00:	2828d7fa 	srli	r20,r5,31
 2007e04:	dc000415 	stw	r16,16(sp)
 2007e08:	04000434 	movhi	r16,16
 2007e0c:	df000c15 	stw	fp,48(sp)
 2007e10:	843fffc4 	addi	r16,r16,-1
 2007e14:	dfc00d15 	stw	ra,52(sp)
 2007e18:	ddc00b15 	stw	r23,44(sp)
 2007e1c:	dd800a15 	stw	r22,40(sp)
 2007e20:	dcc00715 	stw	r19,28(sp)
 2007e24:	dc800615 	stw	r18,24(sp)
 2007e28:	dc400515 	stw	r17,20(sp)
 2007e2c:	ad41ffcc 	andi	r21,r21,2047
 2007e30:	2c20703a 	and	r16,r5,r16
 2007e34:	a7003fcc 	andi	fp,r20,255
 2007e38:	a8006126 	beq	r21,zero,2007fc0 <__divdf3+0x1d0>
 2007e3c:	0081ffc4 	movi	r2,2047
 2007e40:	2025883a 	mov	r18,r4
 2007e44:	a8803726 	beq	r21,r2,2007f24 <__divdf3+0x134>
 2007e48:	80800434 	orhi	r2,r16,16
 2007e4c:	100490fa 	slli	r2,r2,3
 2007e50:	2020d77a 	srli	r16,r4,29
 2007e54:	202490fa 	slli	r18,r4,3
 2007e58:	ad7f0044 	addi	r21,r21,-1023
 2007e5c:	80a0b03a 	or	r16,r16,r2
 2007e60:	0027883a 	mov	r19,zero
 2007e64:	0013883a 	mov	r9,zero
 2007e68:	3804d53a 	srli	r2,r7,20
 2007e6c:	382cd7fa 	srli	r22,r7,31
 2007e70:	04400434 	movhi	r17,16
 2007e74:	8c7fffc4 	addi	r17,r17,-1
 2007e78:	1081ffcc 	andi	r2,r2,2047
 2007e7c:	3011883a 	mov	r8,r6
 2007e80:	3c62703a 	and	r17,r7,r17
 2007e84:	b5c03fcc 	andi	r23,r22,255
 2007e88:	10006c26 	beq	r2,zero,200803c <__divdf3+0x24c>
 2007e8c:	00c1ffc4 	movi	r3,2047
 2007e90:	10c06426 	beq	r2,r3,2008024 <__divdf3+0x234>
 2007e94:	88c00434 	orhi	r3,r17,16
 2007e98:	180690fa 	slli	r3,r3,3
 2007e9c:	3022d77a 	srli	r17,r6,29
 2007ea0:	301090fa 	slli	r8,r6,3
 2007ea4:	10bf0044 	addi	r2,r2,-1023
 2007ea8:	88e2b03a 	or	r17,r17,r3
 2007eac:	000f883a 	mov	r7,zero
 2007eb0:	a58cf03a 	xor	r6,r20,r22
 2007eb4:	3cc8b03a 	or	r4,r7,r19
 2007eb8:	a8abc83a 	sub	r21,r21,r2
 2007ebc:	008003c4 	movi	r2,15
 2007ec0:	3007883a 	mov	r3,r6
 2007ec4:	34c03fcc 	andi	r19,r6,255
 2007ec8:	11009036 	bltu	r2,r4,200810c <__divdf3+0x31c>
 2007ecc:	200890ba 	slli	r4,r4,2
 2007ed0:	00808034 	movhi	r2,512
 2007ed4:	109fb904 	addi	r2,r2,32484
 2007ed8:	2089883a 	add	r4,r4,r2
 2007edc:	20800017 	ldw	r2,0(r4)
 2007ee0:	1000683a 	jmp	r2
 2007ee4:	0200810c 	andi	r8,zero,516
 2007ee8:	02007f5c 	xori	r8,zero,509
 2007eec:	020080fc 	xorhi	r8,zero,515
 2007ef0:	02007f50 	cmplti	r8,zero,509
 2007ef4:	020080fc 	xorhi	r8,zero,515
 2007ef8:	020080d0 	cmplti	r8,zero,515
 2007efc:	020080fc 	xorhi	r8,zero,515
 2007f00:	02007f50 	cmplti	r8,zero,509
 2007f04:	02007f5c 	xori	r8,zero,509
 2007f08:	02007f5c 	xori	r8,zero,509
 2007f0c:	020080d0 	cmplti	r8,zero,515
 2007f10:	02007f50 	cmplti	r8,zero,509
 2007f14:	02007f40 	call	2007f4 <__alt_mem_mem_Nios_PI+0x7f4>
 2007f18:	02007f40 	call	2007f4 <__alt_mem_mem_Nios_PI+0x7f4>
 2007f1c:	02007f40 	call	2007f4 <__alt_mem_mem_Nios_PI+0x7f4>
 2007f20:	020083f0 	cmpltui	r8,zero,527
 2007f24:	2404b03a 	or	r2,r4,r16
 2007f28:	1000661e 	bne	r2,zero,20080c4 <__divdf3+0x2d4>
 2007f2c:	04c00204 	movi	r19,8
 2007f30:	0021883a 	mov	r16,zero
 2007f34:	0025883a 	mov	r18,zero
 2007f38:	02400084 	movi	r9,2
 2007f3c:	003fca06 	br	2007e68 <__divdf3+0x78>
 2007f40:	8023883a 	mov	r17,r16
 2007f44:	9011883a 	mov	r8,r18
 2007f48:	e02f883a 	mov	r23,fp
 2007f4c:	480f883a 	mov	r7,r9
 2007f50:	00800084 	movi	r2,2
 2007f54:	3881311e 	bne	r7,r2,200841c <__divdf3+0x62c>
 2007f58:	b827883a 	mov	r19,r23
 2007f5c:	98c0004c 	andi	r3,r19,1
 2007f60:	0081ffc4 	movi	r2,2047
 2007f64:	000b883a 	mov	r5,zero
 2007f68:	0025883a 	mov	r18,zero
 2007f6c:	1004953a 	slli	r2,r2,20
 2007f70:	18c03fcc 	andi	r3,r3,255
 2007f74:	04400434 	movhi	r17,16
 2007f78:	8c7fffc4 	addi	r17,r17,-1
 2007f7c:	180697fa 	slli	r3,r3,31
 2007f80:	2c4a703a 	and	r5,r5,r17
 2007f84:	288ab03a 	or	r5,r5,r2
 2007f88:	28c6b03a 	or	r3,r5,r3
 2007f8c:	9005883a 	mov	r2,r18
 2007f90:	dfc00d17 	ldw	ra,52(sp)
 2007f94:	df000c17 	ldw	fp,48(sp)
 2007f98:	ddc00b17 	ldw	r23,44(sp)
 2007f9c:	dd800a17 	ldw	r22,40(sp)
 2007fa0:	dd400917 	ldw	r21,36(sp)
 2007fa4:	dd000817 	ldw	r20,32(sp)
 2007fa8:	dcc00717 	ldw	r19,28(sp)
 2007fac:	dc800617 	ldw	r18,24(sp)
 2007fb0:	dc400517 	ldw	r17,20(sp)
 2007fb4:	dc000417 	ldw	r16,16(sp)
 2007fb8:	dec00e04 	addi	sp,sp,56
 2007fbc:	f800283a 	ret
 2007fc0:	2404b03a 	or	r2,r4,r16
 2007fc4:	2027883a 	mov	r19,r4
 2007fc8:	10003926 	beq	r2,zero,20080b0 <__divdf3+0x2c0>
 2007fcc:	80012e26 	beq	r16,zero,2008488 <__divdf3+0x698>
 2007fd0:	8009883a 	mov	r4,r16
 2007fd4:	d9800315 	stw	r6,12(sp)
 2007fd8:	d9c00215 	stw	r7,8(sp)
 2007fdc:	2009bfc0 	call	2009bfc <__clzsi2>
 2007fe0:	d9800317 	ldw	r6,12(sp)
 2007fe4:	d9c00217 	ldw	r7,8(sp)
 2007fe8:	113ffd44 	addi	r4,r2,-11
 2007fec:	00c00704 	movi	r3,28
 2007ff0:	19012116 	blt	r3,r4,2008478 <__divdf3+0x688>
 2007ff4:	00c00744 	movi	r3,29
 2007ff8:	147ffe04 	addi	r17,r2,-8
 2007ffc:	1907c83a 	sub	r3,r3,r4
 2008000:	8460983a 	sll	r16,r16,r17
 2008004:	98c6d83a 	srl	r3,r19,r3
 2008008:	9c64983a 	sll	r18,r19,r17
 200800c:	1c20b03a 	or	r16,r3,r16
 2008010:	1080fcc4 	addi	r2,r2,1011
 2008014:	00abc83a 	sub	r21,zero,r2
 2008018:	0027883a 	mov	r19,zero
 200801c:	0013883a 	mov	r9,zero
 2008020:	003f9106 	br	2007e68 <__divdf3+0x78>
 2008024:	3446b03a 	or	r3,r6,r17
 2008028:	18001f1e 	bne	r3,zero,20080a8 <__divdf3+0x2b8>
 200802c:	0023883a 	mov	r17,zero
 2008030:	0011883a 	mov	r8,zero
 2008034:	01c00084 	movi	r7,2
 2008038:	003f9d06 	br	2007eb0 <__divdf3+0xc0>
 200803c:	3446b03a 	or	r3,r6,r17
 2008040:	18001526 	beq	r3,zero,2008098 <__divdf3+0x2a8>
 2008044:	88011b26 	beq	r17,zero,20084b4 <__divdf3+0x6c4>
 2008048:	8809883a 	mov	r4,r17
 200804c:	d9800315 	stw	r6,12(sp)
 2008050:	da400115 	stw	r9,4(sp)
 2008054:	2009bfc0 	call	2009bfc <__clzsi2>
 2008058:	d9800317 	ldw	r6,12(sp)
 200805c:	da400117 	ldw	r9,4(sp)
 2008060:	113ffd44 	addi	r4,r2,-11
 2008064:	00c00704 	movi	r3,28
 2008068:	19010e16 	blt	r3,r4,20084a4 <__divdf3+0x6b4>
 200806c:	00c00744 	movi	r3,29
 2008070:	123ffe04 	addi	r8,r2,-8
 2008074:	1907c83a 	sub	r3,r3,r4
 2008078:	8a22983a 	sll	r17,r17,r8
 200807c:	30c6d83a 	srl	r3,r6,r3
 2008080:	3210983a 	sll	r8,r6,r8
 2008084:	1c62b03a 	or	r17,r3,r17
 2008088:	1080fcc4 	addi	r2,r2,1011
 200808c:	0085c83a 	sub	r2,zero,r2
 2008090:	000f883a 	mov	r7,zero
 2008094:	003f8606 	br	2007eb0 <__divdf3+0xc0>
 2008098:	0023883a 	mov	r17,zero
 200809c:	0011883a 	mov	r8,zero
 20080a0:	01c00044 	movi	r7,1
 20080a4:	003f8206 	br	2007eb0 <__divdf3+0xc0>
 20080a8:	01c000c4 	movi	r7,3
 20080ac:	003f8006 	br	2007eb0 <__divdf3+0xc0>
 20080b0:	04c00104 	movi	r19,4
 20080b4:	0021883a 	mov	r16,zero
 20080b8:	0025883a 	mov	r18,zero
 20080bc:	02400044 	movi	r9,1
 20080c0:	003f6906 	br	2007e68 <__divdf3+0x78>
 20080c4:	04c00304 	movi	r19,12
 20080c8:	024000c4 	movi	r9,3
 20080cc:	003f6606 	br	2007e68 <__divdf3+0x78>
 20080d0:	01400434 	movhi	r5,16
 20080d4:	0007883a 	mov	r3,zero
 20080d8:	297fffc4 	addi	r5,r5,-1
 20080dc:	04bfffc4 	movi	r18,-1
 20080e0:	0081ffc4 	movi	r2,2047
 20080e4:	003fa106 	br	2007f6c <__divdf3+0x17c>
 20080e8:	00c00044 	movi	r3,1
 20080ec:	1887c83a 	sub	r3,r3,r2
 20080f0:	01000e04 	movi	r4,56
 20080f4:	20c1210e 	bge	r4,r3,200857c <__divdf3+0x78c>
 20080f8:	98c0004c 	andi	r3,r19,1
 20080fc:	0005883a 	mov	r2,zero
 2008100:	000b883a 	mov	r5,zero
 2008104:	0025883a 	mov	r18,zero
 2008108:	003f9806 	br	2007f6c <__divdf3+0x17c>
 200810c:	8c00fd36 	bltu	r17,r16,2008504 <__divdf3+0x714>
 2008110:	8440fb26 	beq	r16,r17,2008500 <__divdf3+0x710>
 2008114:	8007883a 	mov	r3,r16
 2008118:	ad7fffc4 	addi	r21,r21,-1
 200811c:	0021883a 	mov	r16,zero
 2008120:	4004d63a 	srli	r2,r8,24
 2008124:	8822923a 	slli	r17,r17,8
 2008128:	1809883a 	mov	r4,r3
 200812c:	402c923a 	slli	r22,r8,8
 2008130:	88b8b03a 	or	fp,r17,r2
 2008134:	e028d43a 	srli	r20,fp,16
 2008138:	d8c00015 	stw	r3,0(sp)
 200813c:	e5ffffcc 	andi	r23,fp,65535
 2008140:	a00b883a 	mov	r5,r20
 2008144:	20074880 	call	2007488 <__udivsi3>
 2008148:	d8c00017 	ldw	r3,0(sp)
 200814c:	a00b883a 	mov	r5,r20
 2008150:	d8800315 	stw	r2,12(sp)
 2008154:	1809883a 	mov	r4,r3
 2008158:	20074ec0 	call	20074ec <__umodsi3>
 200815c:	d9800317 	ldw	r6,12(sp)
 2008160:	1006943a 	slli	r3,r2,16
 2008164:	9004d43a 	srli	r2,r18,16
 2008168:	b9a3383a 	mul	r17,r23,r6
 200816c:	10c4b03a 	or	r2,r2,r3
 2008170:	1440062e 	bgeu	r2,r17,200818c <__divdf3+0x39c>
 2008174:	1705883a 	add	r2,r2,fp
 2008178:	30ffffc4 	addi	r3,r6,-1
 200817c:	1700ee36 	bltu	r2,fp,2008538 <__divdf3+0x748>
 2008180:	1440ed2e 	bgeu	r2,r17,2008538 <__divdf3+0x748>
 2008184:	31bfff84 	addi	r6,r6,-2
 2008188:	1705883a 	add	r2,r2,fp
 200818c:	1463c83a 	sub	r17,r2,r17
 2008190:	a00b883a 	mov	r5,r20
 2008194:	8809883a 	mov	r4,r17
 2008198:	d9800315 	stw	r6,12(sp)
 200819c:	20074880 	call	2007488 <__udivsi3>
 20081a0:	a00b883a 	mov	r5,r20
 20081a4:	8809883a 	mov	r4,r17
 20081a8:	d8800215 	stw	r2,8(sp)
 20081ac:	20074ec0 	call	20074ec <__umodsi3>
 20081b0:	d9c00217 	ldw	r7,8(sp)
 20081b4:	1004943a 	slli	r2,r2,16
 20081b8:	94bfffcc 	andi	r18,r18,65535
 20081bc:	b9d1383a 	mul	r8,r23,r7
 20081c0:	90a4b03a 	or	r18,r18,r2
 20081c4:	d9800317 	ldw	r6,12(sp)
 20081c8:	9200062e 	bgeu	r18,r8,20081e4 <__divdf3+0x3f4>
 20081cc:	9725883a 	add	r18,r18,fp
 20081d0:	38bfffc4 	addi	r2,r7,-1
 20081d4:	9700d636 	bltu	r18,fp,2008530 <__divdf3+0x740>
 20081d8:	9200d52e 	bgeu	r18,r8,2008530 <__divdf3+0x740>
 20081dc:	39ffff84 	addi	r7,r7,-2
 20081e0:	9725883a 	add	r18,r18,fp
 20081e4:	3004943a 	slli	r2,r6,16
 20081e8:	b012d43a 	srli	r9,r22,16
 20081ec:	b1bfffcc 	andi	r6,r22,65535
 20081f0:	11e2b03a 	or	r17,r2,r7
 20081f4:	8806d43a 	srli	r3,r17,16
 20081f8:	893fffcc 	andi	r4,r17,65535
 20081fc:	218b383a 	mul	r5,r4,r6
 2008200:	30c5383a 	mul	r2,r6,r3
 2008204:	2249383a 	mul	r4,r4,r9
 2008208:	280ed43a 	srli	r7,r5,16
 200820c:	9225c83a 	sub	r18,r18,r8
 2008210:	2089883a 	add	r4,r4,r2
 2008214:	3909883a 	add	r4,r7,r4
 2008218:	1a47383a 	mul	r3,r3,r9
 200821c:	2080022e 	bgeu	r4,r2,2008228 <__divdf3+0x438>
 2008220:	00800074 	movhi	r2,1
 2008224:	1887883a 	add	r3,r3,r2
 2008228:	2004d43a 	srli	r2,r4,16
 200822c:	2008943a 	slli	r4,r4,16
 2008230:	297fffcc 	andi	r5,r5,65535
 2008234:	10c7883a 	add	r3,r2,r3
 2008238:	2149883a 	add	r4,r4,r5
 200823c:	90c0a536 	bltu	r18,r3,20084d4 <__divdf3+0x6e4>
 2008240:	90c0bf26 	beq	r18,r3,2008540 <__divdf3+0x750>
 2008244:	90c7c83a 	sub	r3,r18,r3
 2008248:	810fc83a 	sub	r7,r16,r4
 200824c:	81e5803a 	cmpltu	r18,r16,r7
 2008250:	1ca5c83a 	sub	r18,r3,r18
 2008254:	e480c126 	beq	fp,r18,200855c <__divdf3+0x76c>
 2008258:	a00b883a 	mov	r5,r20
 200825c:	9009883a 	mov	r4,r18
 2008260:	d9800315 	stw	r6,12(sp)
 2008264:	d9c00215 	stw	r7,8(sp)
 2008268:	da400115 	stw	r9,4(sp)
 200826c:	20074880 	call	2007488 <__udivsi3>
 2008270:	a00b883a 	mov	r5,r20
 2008274:	9009883a 	mov	r4,r18
 2008278:	d8800015 	stw	r2,0(sp)
 200827c:	20074ec0 	call	20074ec <__umodsi3>
 2008280:	d9c00217 	ldw	r7,8(sp)
 2008284:	da000017 	ldw	r8,0(sp)
 2008288:	1006943a 	slli	r3,r2,16
 200828c:	3804d43a 	srli	r2,r7,16
 2008290:	ba21383a 	mul	r16,r23,r8
 2008294:	d9800317 	ldw	r6,12(sp)
 2008298:	10c4b03a 	or	r2,r2,r3
 200829c:	da400117 	ldw	r9,4(sp)
 20082a0:	1400062e 	bgeu	r2,r16,20082bc <__divdf3+0x4cc>
 20082a4:	1705883a 	add	r2,r2,fp
 20082a8:	40ffffc4 	addi	r3,r8,-1
 20082ac:	1700ad36 	bltu	r2,fp,2008564 <__divdf3+0x774>
 20082b0:	1400ac2e 	bgeu	r2,r16,2008564 <__divdf3+0x774>
 20082b4:	423fff84 	addi	r8,r8,-2
 20082b8:	1705883a 	add	r2,r2,fp
 20082bc:	1421c83a 	sub	r16,r2,r16
 20082c0:	a00b883a 	mov	r5,r20
 20082c4:	8009883a 	mov	r4,r16
 20082c8:	d9800315 	stw	r6,12(sp)
 20082cc:	d9c00215 	stw	r7,8(sp)
 20082d0:	da000015 	stw	r8,0(sp)
 20082d4:	da400115 	stw	r9,4(sp)
 20082d8:	20074880 	call	2007488 <__udivsi3>
 20082dc:	8009883a 	mov	r4,r16
 20082e0:	a00b883a 	mov	r5,r20
 20082e4:	1025883a 	mov	r18,r2
 20082e8:	20074ec0 	call	20074ec <__umodsi3>
 20082ec:	d9c00217 	ldw	r7,8(sp)
 20082f0:	1004943a 	slli	r2,r2,16
 20082f4:	bcaf383a 	mul	r23,r23,r18
 20082f8:	393fffcc 	andi	r4,r7,65535
 20082fc:	2088b03a 	or	r4,r4,r2
 2008300:	d9800317 	ldw	r6,12(sp)
 2008304:	da000017 	ldw	r8,0(sp)
 2008308:	da400117 	ldw	r9,4(sp)
 200830c:	25c0062e 	bgeu	r4,r23,2008328 <__divdf3+0x538>
 2008310:	2709883a 	add	r4,r4,fp
 2008314:	90bfffc4 	addi	r2,r18,-1
 2008318:	27009436 	bltu	r4,fp,200856c <__divdf3+0x77c>
 200831c:	25c0932e 	bgeu	r4,r23,200856c <__divdf3+0x77c>
 2008320:	94bfff84 	addi	r18,r18,-2
 2008324:	2709883a 	add	r4,r4,fp
 2008328:	4004943a 	slli	r2,r8,16
 200832c:	25efc83a 	sub	r23,r4,r23
 2008330:	1490b03a 	or	r8,r2,r18
 2008334:	4008d43a 	srli	r4,r8,16
 2008338:	40ffffcc 	andi	r3,r8,65535
 200833c:	30c5383a 	mul	r2,r6,r3
 2008340:	1a47383a 	mul	r3,r3,r9
 2008344:	310d383a 	mul	r6,r6,r4
 2008348:	100ad43a 	srli	r5,r2,16
 200834c:	4913383a 	mul	r9,r9,r4
 2008350:	1987883a 	add	r3,r3,r6
 2008354:	28c7883a 	add	r3,r5,r3
 2008358:	1980022e 	bgeu	r3,r6,2008364 <__divdf3+0x574>
 200835c:	01000074 	movhi	r4,1
 2008360:	4913883a 	add	r9,r9,r4
 2008364:	1808d43a 	srli	r4,r3,16
 2008368:	1806943a 	slli	r3,r3,16
 200836c:	10bfffcc 	andi	r2,r2,65535
 2008370:	2253883a 	add	r9,r4,r9
 2008374:	1887883a 	add	r3,r3,r2
 2008378:	ba403836 	bltu	r23,r9,200845c <__divdf3+0x66c>
 200837c:	ba403626 	beq	r23,r9,2008458 <__divdf3+0x668>
 2008380:	42000054 	ori	r8,r8,1
 2008384:	a880ffc4 	addi	r2,r21,1023
 2008388:	00bf570e 	bge	zero,r2,20080e8 <__divdf3+0x2f8>
 200838c:	40c001cc 	andi	r3,r8,7
 2008390:	18000726 	beq	r3,zero,20083b0 <__divdf3+0x5c0>
 2008394:	40c003cc 	andi	r3,r8,15
 2008398:	01000104 	movi	r4,4
 200839c:	19000426 	beq	r3,r4,20083b0 <__divdf3+0x5c0>
 20083a0:	4107883a 	add	r3,r8,r4
 20083a4:	1a11803a 	cmpltu	r8,r3,r8
 20083a8:	8a23883a 	add	r17,r17,r8
 20083ac:	1811883a 	mov	r8,r3
 20083b0:	88c0402c 	andhi	r3,r17,256
 20083b4:	18000426 	beq	r3,zero,20083c8 <__divdf3+0x5d8>
 20083b8:	00ffc034 	movhi	r3,65280
 20083bc:	18ffffc4 	addi	r3,r3,-1
 20083c0:	a8810004 	addi	r2,r21,1024
 20083c4:	88e2703a 	and	r17,r17,r3
 20083c8:	00c1ff84 	movi	r3,2046
 20083cc:	18bee316 	blt	r3,r2,2007f5c <__divdf3+0x16c>
 20083d0:	8824977a 	slli	r18,r17,29
 20083d4:	4010d0fa 	srli	r8,r8,3
 20083d8:	8822927a 	slli	r17,r17,9
 20083dc:	1081ffcc 	andi	r2,r2,2047
 20083e0:	9224b03a 	or	r18,r18,r8
 20083e4:	880ad33a 	srli	r5,r17,12
 20083e8:	98c0004c 	andi	r3,r19,1
 20083ec:	003edf06 	br	2007f6c <__divdf3+0x17c>
 20083f0:	8080022c 	andhi	r2,r16,8
 20083f4:	10001226 	beq	r2,zero,2008440 <__divdf3+0x650>
 20083f8:	8880022c 	andhi	r2,r17,8
 20083fc:	1000101e 	bne	r2,zero,2008440 <__divdf3+0x650>
 2008400:	00800434 	movhi	r2,16
 2008404:	89400234 	orhi	r5,r17,8
 2008408:	10bfffc4 	addi	r2,r2,-1
 200840c:	b007883a 	mov	r3,r22
 2008410:	288a703a 	and	r5,r5,r2
 2008414:	4025883a 	mov	r18,r8
 2008418:	003f3106 	br	20080e0 <__divdf3+0x2f0>
 200841c:	008000c4 	movi	r2,3
 2008420:	3880a626 	beq	r7,r2,20086bc <__divdf3+0x8cc>
 2008424:	00800044 	movi	r2,1
 2008428:	3880521e 	bne	r7,r2,2008574 <__divdf3+0x784>
 200842c:	b807883a 	mov	r3,r23
 2008430:	0005883a 	mov	r2,zero
 2008434:	000b883a 	mov	r5,zero
 2008438:	0025883a 	mov	r18,zero
 200843c:	003ecb06 	br	2007f6c <__divdf3+0x17c>
 2008440:	00800434 	movhi	r2,16
 2008444:	81400234 	orhi	r5,r16,8
 2008448:	10bfffc4 	addi	r2,r2,-1
 200844c:	a007883a 	mov	r3,r20
 2008450:	288a703a 	and	r5,r5,r2
 2008454:	003f2206 	br	20080e0 <__divdf3+0x2f0>
 2008458:	183fca26 	beq	r3,zero,2008384 <__divdf3+0x594>
 200845c:	e5ef883a 	add	r23,fp,r23
 2008460:	40bfffc4 	addi	r2,r8,-1
 2008464:	bf00392e 	bgeu	r23,fp,200854c <__divdf3+0x75c>
 2008468:	1011883a 	mov	r8,r2
 200846c:	ba7fc41e 	bne	r23,r9,2008380 <__divdf3+0x590>
 2008470:	b0ffc31e 	bne	r22,r3,2008380 <__divdf3+0x590>
 2008474:	003fc306 	br	2008384 <__divdf3+0x594>
 2008478:	143ff604 	addi	r16,r2,-40
 200847c:	9c20983a 	sll	r16,r19,r16
 2008480:	0025883a 	mov	r18,zero
 2008484:	003ee206 	br	2008010 <__divdf3+0x220>
 2008488:	d9800315 	stw	r6,12(sp)
 200848c:	d9c00215 	stw	r7,8(sp)
 2008490:	2009bfc0 	call	2009bfc <__clzsi2>
 2008494:	10800804 	addi	r2,r2,32
 2008498:	d9c00217 	ldw	r7,8(sp)
 200849c:	d9800317 	ldw	r6,12(sp)
 20084a0:	003ed106 	br	2007fe8 <__divdf3+0x1f8>
 20084a4:	147ff604 	addi	r17,r2,-40
 20084a8:	3462983a 	sll	r17,r6,r17
 20084ac:	0011883a 	mov	r8,zero
 20084b0:	003ef506 	br	2008088 <__divdf3+0x298>
 20084b4:	3009883a 	mov	r4,r6
 20084b8:	d9800315 	stw	r6,12(sp)
 20084bc:	da400115 	stw	r9,4(sp)
 20084c0:	2009bfc0 	call	2009bfc <__clzsi2>
 20084c4:	10800804 	addi	r2,r2,32
 20084c8:	da400117 	ldw	r9,4(sp)
 20084cc:	d9800317 	ldw	r6,12(sp)
 20084d0:	003ee306 	br	2008060 <__divdf3+0x270>
 20084d4:	85a1883a 	add	r16,r16,r22
 20084d8:	8585803a 	cmpltu	r2,r16,r22
 20084dc:	1705883a 	add	r2,r2,fp
 20084e0:	14a5883a 	add	r18,r2,r18
 20084e4:	88bfffc4 	addi	r2,r17,-1
 20084e8:	e4800c2e 	bgeu	fp,r18,200851c <__divdf3+0x72c>
 20084ec:	90c03e36 	bltu	r18,r3,20085e8 <__divdf3+0x7f8>
 20084f0:	1c806926 	beq	r3,r18,2008698 <__divdf3+0x8a8>
 20084f4:	90c7c83a 	sub	r3,r18,r3
 20084f8:	1023883a 	mov	r17,r2
 20084fc:	003f5206 	br	2008248 <__divdf3+0x458>
 2008500:	923f0436 	bltu	r18,r8,2008114 <__divdf3+0x324>
 2008504:	800897fa 	slli	r4,r16,31
 2008508:	9004d07a 	srli	r2,r18,1
 200850c:	8006d07a 	srli	r3,r16,1
 2008510:	902097fa 	slli	r16,r18,31
 2008514:	20a4b03a 	or	r18,r4,r2
 2008518:	003f0106 	br	2008120 <__divdf3+0x330>
 200851c:	e4bff51e 	bne	fp,r18,20084f4 <__divdf3+0x704>
 2008520:	85bff22e 	bgeu	r16,r22,20084ec <__divdf3+0x6fc>
 2008524:	e0c7c83a 	sub	r3,fp,r3
 2008528:	1023883a 	mov	r17,r2
 200852c:	003f4606 	br	2008248 <__divdf3+0x458>
 2008530:	100f883a 	mov	r7,r2
 2008534:	003f2b06 	br	20081e4 <__divdf3+0x3f4>
 2008538:	180d883a 	mov	r6,r3
 200853c:	003f1306 	br	200818c <__divdf3+0x39c>
 2008540:	813fe436 	bltu	r16,r4,20084d4 <__divdf3+0x6e4>
 2008544:	0007883a 	mov	r3,zero
 2008548:	003f3f06 	br	2008248 <__divdf3+0x458>
 200854c:	ba402c36 	bltu	r23,r9,2008600 <__divdf3+0x810>
 2008550:	4dc05426 	beq	r9,r23,20086a4 <__divdf3+0x8b4>
 2008554:	1011883a 	mov	r8,r2
 2008558:	003f8906 	br	2008380 <__divdf3+0x590>
 200855c:	023fffc4 	movi	r8,-1
 2008560:	003f8806 	br	2008384 <__divdf3+0x594>
 2008564:	1811883a 	mov	r8,r3
 2008568:	003f5406 	br	20082bc <__divdf3+0x4cc>
 200856c:	1025883a 	mov	r18,r2
 2008570:	003f6d06 	br	2008328 <__divdf3+0x538>
 2008574:	b827883a 	mov	r19,r23
 2008578:	003f8206 	br	2008384 <__divdf3+0x594>
 200857c:	010007c4 	movi	r4,31
 2008580:	20c02616 	blt	r4,r3,200861c <__divdf3+0x82c>
 2008584:	00800804 	movi	r2,32
 2008588:	10c5c83a 	sub	r2,r2,r3
 200858c:	888a983a 	sll	r5,r17,r2
 2008590:	40c8d83a 	srl	r4,r8,r3
 2008594:	4084983a 	sll	r2,r8,r2
 2008598:	88e2d83a 	srl	r17,r17,r3
 200859c:	2906b03a 	or	r3,r5,r4
 20085a0:	1004c03a 	cmpne	r2,r2,zero
 20085a4:	1886b03a 	or	r3,r3,r2
 20085a8:	188001cc 	andi	r2,r3,7
 20085ac:	10000726 	beq	r2,zero,20085cc <__divdf3+0x7dc>
 20085b0:	188003cc 	andi	r2,r3,15
 20085b4:	01000104 	movi	r4,4
 20085b8:	11000426 	beq	r2,r4,20085cc <__divdf3+0x7dc>
 20085bc:	1805883a 	mov	r2,r3
 20085c0:	10c00104 	addi	r3,r2,4
 20085c4:	1885803a 	cmpltu	r2,r3,r2
 20085c8:	88a3883a 	add	r17,r17,r2
 20085cc:	8880202c 	andhi	r2,r17,128
 20085d0:	10002726 	beq	r2,zero,2008670 <__divdf3+0x880>
 20085d4:	98c0004c 	andi	r3,r19,1
 20085d8:	00800044 	movi	r2,1
 20085dc:	000b883a 	mov	r5,zero
 20085e0:	0025883a 	mov	r18,zero
 20085e4:	003e6106 	br	2007f6c <__divdf3+0x17c>
 20085e8:	85a1883a 	add	r16,r16,r22
 20085ec:	8585803a 	cmpltu	r2,r16,r22
 20085f0:	1705883a 	add	r2,r2,fp
 20085f4:	14a5883a 	add	r18,r2,r18
 20085f8:	8c7fff84 	addi	r17,r17,-2
 20085fc:	003f1106 	br	2008244 <__divdf3+0x454>
 2008600:	b589883a 	add	r4,r22,r22
 2008604:	25ad803a 	cmpltu	r22,r4,r22
 2008608:	b739883a 	add	fp,r22,fp
 200860c:	40bfff84 	addi	r2,r8,-2
 2008610:	bf2f883a 	add	r23,r23,fp
 2008614:	202d883a 	mov	r22,r4
 2008618:	003f9306 	br	2008468 <__divdf3+0x678>
 200861c:	013ff844 	movi	r4,-31
 2008620:	2085c83a 	sub	r2,r4,r2
 2008624:	8888d83a 	srl	r4,r17,r2
 2008628:	00800804 	movi	r2,32
 200862c:	18802126 	beq	r3,r2,20086b4 <__divdf3+0x8c4>
 2008630:	00801004 	movi	r2,64
 2008634:	10c5c83a 	sub	r2,r2,r3
 2008638:	8884983a 	sll	r2,r17,r2
 200863c:	1204b03a 	or	r2,r2,r8
 2008640:	1004c03a 	cmpne	r2,r2,zero
 2008644:	2084b03a 	or	r2,r4,r2
 2008648:	144001cc 	andi	r17,r2,7
 200864c:	88000d1e 	bne	r17,zero,2008684 <__divdf3+0x894>
 2008650:	000b883a 	mov	r5,zero
 2008654:	1024d0fa 	srli	r18,r2,3
 2008658:	98c0004c 	andi	r3,r19,1
 200865c:	0005883a 	mov	r2,zero
 2008660:	9464b03a 	or	r18,r18,r17
 2008664:	003e4106 	br	2007f6c <__divdf3+0x17c>
 2008668:	1007883a 	mov	r3,r2
 200866c:	0023883a 	mov	r17,zero
 2008670:	880a927a 	slli	r5,r17,9
 2008674:	1805883a 	mov	r2,r3
 2008678:	8822977a 	slli	r17,r17,29
 200867c:	280ad33a 	srli	r5,r5,12
 2008680:	003ff406 	br	2008654 <__divdf3+0x864>
 2008684:	10c003cc 	andi	r3,r2,15
 2008688:	01000104 	movi	r4,4
 200868c:	193ff626 	beq	r3,r4,2008668 <__divdf3+0x878>
 2008690:	0023883a 	mov	r17,zero
 2008694:	003fca06 	br	20085c0 <__divdf3+0x7d0>
 2008698:	813fd336 	bltu	r16,r4,20085e8 <__divdf3+0x7f8>
 200869c:	1023883a 	mov	r17,r2
 20086a0:	003fa806 	br	2008544 <__divdf3+0x754>
 20086a4:	b0ffd636 	bltu	r22,r3,2008600 <__divdf3+0x810>
 20086a8:	1011883a 	mov	r8,r2
 20086ac:	b0ff341e 	bne	r22,r3,2008380 <__divdf3+0x590>
 20086b0:	003f3406 	br	2008384 <__divdf3+0x594>
 20086b4:	0005883a 	mov	r2,zero
 20086b8:	003fe006 	br	200863c <__divdf3+0x84c>
 20086bc:	00800434 	movhi	r2,16
 20086c0:	89400234 	orhi	r5,r17,8
 20086c4:	10bfffc4 	addi	r2,r2,-1
 20086c8:	b807883a 	mov	r3,r23
 20086cc:	288a703a 	and	r5,r5,r2
 20086d0:	4025883a 	mov	r18,r8
 20086d4:	003e8206 	br	20080e0 <__divdf3+0x2f0>

020086d8 <__eqdf2>:
 20086d8:	2804d53a 	srli	r2,r5,20
 20086dc:	3806d53a 	srli	r3,r7,20
 20086e0:	02000434 	movhi	r8,16
 20086e4:	423fffc4 	addi	r8,r8,-1
 20086e8:	1081ffcc 	andi	r2,r2,2047
 20086ec:	0281ffc4 	movi	r10,2047
 20086f0:	2a12703a 	and	r9,r5,r8
 20086f4:	18c1ffcc 	andi	r3,r3,2047
 20086f8:	3a10703a 	and	r8,r7,r8
 20086fc:	280ad7fa 	srli	r5,r5,31
 2008700:	380ed7fa 	srli	r7,r7,31
 2008704:	12801026 	beq	r2,r10,2008748 <__eqdf2+0x70>
 2008708:	0281ffc4 	movi	r10,2047
 200870c:	1a800a26 	beq	r3,r10,2008738 <__eqdf2+0x60>
 2008710:	10c00226 	beq	r2,r3,200871c <__eqdf2+0x44>
 2008714:	00800044 	movi	r2,1
 2008718:	f800283a 	ret
 200871c:	4a3ffd1e 	bne	r9,r8,2008714 <__eqdf2+0x3c>
 2008720:	21bffc1e 	bne	r4,r6,2008714 <__eqdf2+0x3c>
 2008724:	29c00c26 	beq	r5,r7,2008758 <__eqdf2+0x80>
 2008728:	103ffa1e 	bne	r2,zero,2008714 <__eqdf2+0x3c>
 200872c:	2244b03a 	or	r2,r4,r9
 2008730:	1004c03a 	cmpne	r2,r2,zero
 2008734:	f800283a 	ret
 2008738:	3214b03a 	or	r10,r6,r8
 200873c:	503ff426 	beq	r10,zero,2008710 <__eqdf2+0x38>
 2008740:	00800044 	movi	r2,1
 2008744:	f800283a 	ret
 2008748:	2254b03a 	or	r10,r4,r9
 200874c:	503fee26 	beq	r10,zero,2008708 <__eqdf2+0x30>
 2008750:	00800044 	movi	r2,1
 2008754:	f800283a 	ret
 2008758:	0005883a 	mov	r2,zero
 200875c:	f800283a 	ret

02008760 <__gedf2>:
 2008760:	2804d53a 	srli	r2,r5,20
 2008764:	3806d53a 	srli	r3,r7,20
 2008768:	02000434 	movhi	r8,16
 200876c:	423fffc4 	addi	r8,r8,-1
 2008770:	1081ffcc 	andi	r2,r2,2047
 2008774:	0241ffc4 	movi	r9,2047
 2008778:	2a14703a 	and	r10,r5,r8
 200877c:	18c1ffcc 	andi	r3,r3,2047
 2008780:	3a10703a 	and	r8,r7,r8
 2008784:	280ad7fa 	srli	r5,r5,31
 2008788:	380ed7fa 	srli	r7,r7,31
 200878c:	12401d26 	beq	r2,r9,2008804 <__gedf2+0xa4>
 2008790:	0241ffc4 	movi	r9,2047
 2008794:	1a401226 	beq	r3,r9,20087e0 <__gedf2+0x80>
 2008798:	1000081e 	bne	r2,zero,20087bc <__gedf2+0x5c>
 200879c:	2296b03a 	or	r11,r4,r10
 20087a0:	5813003a 	cmpeq	r9,r11,zero
 20087a4:	1800091e 	bne	r3,zero,20087cc <__gedf2+0x6c>
 20087a8:	3218b03a 	or	r12,r6,r8
 20087ac:	6000071e 	bne	r12,zero,20087cc <__gedf2+0x6c>
 20087b0:	0005883a 	mov	r2,zero
 20087b4:	5800101e 	bne	r11,zero,20087f8 <__gedf2+0x98>
 20087b8:	f800283a 	ret
 20087bc:	18000c1e 	bne	r3,zero,20087f0 <__gedf2+0x90>
 20087c0:	3212b03a 	or	r9,r6,r8
 20087c4:	48000c26 	beq	r9,zero,20087f8 <__gedf2+0x98>
 20087c8:	0013883a 	mov	r9,zero
 20087cc:	39c03fcc 	andi	r7,r7,255
 20087d0:	48000826 	beq	r9,zero,20087f4 <__gedf2+0x94>
 20087d4:	38000926 	beq	r7,zero,20087fc <__gedf2+0x9c>
 20087d8:	00800044 	movi	r2,1
 20087dc:	f800283a 	ret
 20087e0:	3212b03a 	or	r9,r6,r8
 20087e4:	483fec26 	beq	r9,zero,2008798 <__gedf2+0x38>
 20087e8:	00bfff84 	movi	r2,-2
 20087ec:	f800283a 	ret
 20087f0:	39c03fcc 	andi	r7,r7,255
 20087f4:	29c00626 	beq	r5,r7,2008810 <__gedf2+0xb0>
 20087f8:	283ff726 	beq	r5,zero,20087d8 <__gedf2+0x78>
 20087fc:	00bfffc4 	movi	r2,-1
 2008800:	f800283a 	ret
 2008804:	2292b03a 	or	r9,r4,r10
 2008808:	483fe126 	beq	r9,zero,2008790 <__gedf2+0x30>
 200880c:	003ff606 	br	20087e8 <__gedf2+0x88>
 2008810:	18bff916 	blt	r3,r2,20087f8 <__gedf2+0x98>
 2008814:	10c00316 	blt	r2,r3,2008824 <__gedf2+0xc4>
 2008818:	42bff736 	bltu	r8,r10,20087f8 <__gedf2+0x98>
 200881c:	52000326 	beq	r10,r8,200882c <__gedf2+0xcc>
 2008820:	5200042e 	bgeu	r10,r8,2008834 <__gedf2+0xd4>
 2008824:	283fec1e 	bne	r5,zero,20087d8 <__gedf2+0x78>
 2008828:	003ff406 	br	20087fc <__gedf2+0x9c>
 200882c:	313ff236 	bltu	r6,r4,20087f8 <__gedf2+0x98>
 2008830:	21bffc36 	bltu	r4,r6,2008824 <__gedf2+0xc4>
 2008834:	0005883a 	mov	r2,zero
 2008838:	f800283a 	ret

0200883c <__ledf2>:
 200883c:	2804d53a 	srli	r2,r5,20
 2008840:	3810d53a 	srli	r8,r7,20
 2008844:	00c00434 	movhi	r3,16
 2008848:	18ffffc4 	addi	r3,r3,-1
 200884c:	1081ffcc 	andi	r2,r2,2047
 2008850:	0241ffc4 	movi	r9,2047
 2008854:	28d4703a 	and	r10,r5,r3
 2008858:	4201ffcc 	andi	r8,r8,2047
 200885c:	38c6703a 	and	r3,r7,r3
 2008860:	280ad7fa 	srli	r5,r5,31
 2008864:	380ed7fa 	srli	r7,r7,31
 2008868:	12401f26 	beq	r2,r9,20088e8 <__ledf2+0xac>
 200886c:	0241ffc4 	movi	r9,2047
 2008870:	42401426 	beq	r8,r9,20088c4 <__ledf2+0x88>
 2008874:	1000091e 	bne	r2,zero,200889c <__ledf2+0x60>
 2008878:	2296b03a 	or	r11,r4,r10
 200887c:	5813003a 	cmpeq	r9,r11,zero
 2008880:	29403fcc 	andi	r5,r5,255
 2008884:	40000a1e 	bne	r8,zero,20088b0 <__ledf2+0x74>
 2008888:	30d8b03a 	or	r12,r6,r3
 200888c:	6000081e 	bne	r12,zero,20088b0 <__ledf2+0x74>
 2008890:	0005883a 	mov	r2,zero
 2008894:	5800111e 	bne	r11,zero,20088dc <__ledf2+0xa0>
 2008898:	f800283a 	ret
 200889c:	29403fcc 	andi	r5,r5,255
 20088a0:	40000c1e 	bne	r8,zero,20088d4 <__ledf2+0x98>
 20088a4:	30d2b03a 	or	r9,r6,r3
 20088a8:	48000c26 	beq	r9,zero,20088dc <__ledf2+0xa0>
 20088ac:	0013883a 	mov	r9,zero
 20088b0:	39c03fcc 	andi	r7,r7,255
 20088b4:	48000826 	beq	r9,zero,20088d8 <__ledf2+0x9c>
 20088b8:	38001126 	beq	r7,zero,2008900 <__ledf2+0xc4>
 20088bc:	00800044 	movi	r2,1
 20088c0:	f800283a 	ret
 20088c4:	30d2b03a 	or	r9,r6,r3
 20088c8:	483fea26 	beq	r9,zero,2008874 <__ledf2+0x38>
 20088cc:	00800084 	movi	r2,2
 20088d0:	f800283a 	ret
 20088d4:	39c03fcc 	andi	r7,r7,255
 20088d8:	39400726 	beq	r7,r5,20088f8 <__ledf2+0xbc>
 20088dc:	2800081e 	bne	r5,zero,2008900 <__ledf2+0xc4>
 20088e0:	00800044 	movi	r2,1
 20088e4:	f800283a 	ret
 20088e8:	2292b03a 	or	r9,r4,r10
 20088ec:	483fdf26 	beq	r9,zero,200886c <__ledf2+0x30>
 20088f0:	00800084 	movi	r2,2
 20088f4:	f800283a 	ret
 20088f8:	4080030e 	bge	r8,r2,2008908 <__ledf2+0xcc>
 20088fc:	383fef26 	beq	r7,zero,20088bc <__ledf2+0x80>
 2008900:	00bfffc4 	movi	r2,-1
 2008904:	f800283a 	ret
 2008908:	123feb16 	blt	r2,r8,20088b8 <__ledf2+0x7c>
 200890c:	1abff336 	bltu	r3,r10,20088dc <__ledf2+0xa0>
 2008910:	50c00326 	beq	r10,r3,2008920 <__ledf2+0xe4>
 2008914:	50c0042e 	bgeu	r10,r3,2008928 <__ledf2+0xec>
 2008918:	283fe81e 	bne	r5,zero,20088bc <__ledf2+0x80>
 200891c:	003ff806 	br	2008900 <__ledf2+0xc4>
 2008920:	313fee36 	bltu	r6,r4,20088dc <__ledf2+0xa0>
 2008924:	21bffc36 	bltu	r4,r6,2008918 <__ledf2+0xdc>
 2008928:	0005883a 	mov	r2,zero
 200892c:	f800283a 	ret

02008930 <__muldf3>:
 2008930:	defff304 	addi	sp,sp,-52
 2008934:	2804d53a 	srli	r2,r5,20
 2008938:	dd800915 	stw	r22,36(sp)
 200893c:	282cd7fa 	srli	r22,r5,31
 2008940:	dc000315 	stw	r16,12(sp)
 2008944:	04000434 	movhi	r16,16
 2008948:	dd400815 	stw	r21,32(sp)
 200894c:	dc800515 	stw	r18,20(sp)
 2008950:	843fffc4 	addi	r16,r16,-1
 2008954:	dfc00c15 	stw	ra,48(sp)
 2008958:	df000b15 	stw	fp,44(sp)
 200895c:	ddc00a15 	stw	r23,40(sp)
 2008960:	dd000715 	stw	r20,28(sp)
 2008964:	dcc00615 	stw	r19,24(sp)
 2008968:	dc400415 	stw	r17,16(sp)
 200896c:	1481ffcc 	andi	r18,r2,2047
 2008970:	2c20703a 	and	r16,r5,r16
 2008974:	b02b883a 	mov	r21,r22
 2008978:	b2403fcc 	andi	r9,r22,255
 200897c:	90006026 	beq	r18,zero,2008b00 <__muldf3+0x1d0>
 2008980:	0081ffc4 	movi	r2,2047
 2008984:	2029883a 	mov	r20,r4
 2008988:	90803626 	beq	r18,r2,2008a64 <__muldf3+0x134>
 200898c:	80800434 	orhi	r2,r16,16
 2008990:	100490fa 	slli	r2,r2,3
 2008994:	2020d77a 	srli	r16,r4,29
 2008998:	202890fa 	slli	r20,r4,3
 200899c:	94bf0044 	addi	r18,r18,-1023
 20089a0:	80a0b03a 	or	r16,r16,r2
 20089a4:	0027883a 	mov	r19,zero
 20089a8:	0039883a 	mov	fp,zero
 20089ac:	3804d53a 	srli	r2,r7,20
 20089b0:	382ed7fa 	srli	r23,r7,31
 20089b4:	04400434 	movhi	r17,16
 20089b8:	8c7fffc4 	addi	r17,r17,-1
 20089bc:	1081ffcc 	andi	r2,r2,2047
 20089c0:	3011883a 	mov	r8,r6
 20089c4:	3c62703a 	and	r17,r7,r17
 20089c8:	ba803fcc 	andi	r10,r23,255
 20089cc:	10006d26 	beq	r2,zero,2008b84 <__muldf3+0x254>
 20089d0:	00c1ffc4 	movi	r3,2047
 20089d4:	10c06526 	beq	r2,r3,2008b6c <__muldf3+0x23c>
 20089d8:	88c00434 	orhi	r3,r17,16
 20089dc:	180690fa 	slli	r3,r3,3
 20089e0:	3022d77a 	srli	r17,r6,29
 20089e4:	301090fa 	slli	r8,r6,3
 20089e8:	10bf0044 	addi	r2,r2,-1023
 20089ec:	88e2b03a 	or	r17,r17,r3
 20089f0:	000b883a 	mov	r5,zero
 20089f4:	9085883a 	add	r2,r18,r2
 20089f8:	2cc8b03a 	or	r4,r5,r19
 20089fc:	00c003c4 	movi	r3,15
 2008a00:	bdacf03a 	xor	r22,r23,r22
 2008a04:	12c00044 	addi	r11,r2,1
 2008a08:	19009936 	bltu	r3,r4,2008c70 <__muldf3+0x340>
 2008a0c:	200890ba 	slli	r4,r4,2
 2008a10:	00c08074 	movhi	r3,513
 2008a14:	18e28904 	addi	r3,r3,-30172
 2008a18:	20c9883a 	add	r4,r4,r3
 2008a1c:	20c00017 	ldw	r3,0(r4)
 2008a20:	1800683a 	jmp	r3
 2008a24:	02008c70 	cmpltui	r8,zero,561
 2008a28:	02008a84 	movi	r8,554
 2008a2c:	02008a84 	movi	r8,554
 2008a30:	02008a80 	call	2008a8 <__alt_mem_mem_Nios_PI+0x8a8>
 2008a34:	02008c4c 	andi	r8,zero,561
 2008a38:	02008c4c 	andi	r8,zero,561
 2008a3c:	02008c34 	movhi	r8,560
 2008a40:	02008a80 	call	2008a8 <__alt_mem_mem_Nios_PI+0x8a8>
 2008a44:	02008c4c 	andi	r8,zero,561
 2008a48:	02008c34 	movhi	r8,560
 2008a4c:	02008c4c 	andi	r8,zero,561
 2008a50:	02008a80 	call	2008a8 <__alt_mem_mem_Nios_PI+0x8a8>
 2008a54:	02008c5c 	xori	r8,zero,561
 2008a58:	02008c5c 	xori	r8,zero,561
 2008a5c:	02008c5c 	xori	r8,zero,561
 2008a60:	02008e78 	rdprs	r8,zero,569
 2008a64:	2404b03a 	or	r2,r4,r16
 2008a68:	10006f1e 	bne	r2,zero,2008c28 <__muldf3+0x2f8>
 2008a6c:	04c00204 	movi	r19,8
 2008a70:	0021883a 	mov	r16,zero
 2008a74:	0029883a 	mov	r20,zero
 2008a78:	07000084 	movi	fp,2
 2008a7c:	003fcb06 	br	20089ac <__muldf3+0x7c>
 2008a80:	502d883a 	mov	r22,r10
 2008a84:	00800084 	movi	r2,2
 2008a88:	28805726 	beq	r5,r2,2008be8 <__muldf3+0x2b8>
 2008a8c:	008000c4 	movi	r2,3
 2008a90:	28816626 	beq	r5,r2,200902c <__muldf3+0x6fc>
 2008a94:	00800044 	movi	r2,1
 2008a98:	2881411e 	bne	r5,r2,2008fa0 <__muldf3+0x670>
 2008a9c:	b02b883a 	mov	r21,r22
 2008aa0:	0005883a 	mov	r2,zero
 2008aa4:	000b883a 	mov	r5,zero
 2008aa8:	0029883a 	mov	r20,zero
 2008aac:	1004953a 	slli	r2,r2,20
 2008ab0:	a8c03fcc 	andi	r3,r21,255
 2008ab4:	04400434 	movhi	r17,16
 2008ab8:	8c7fffc4 	addi	r17,r17,-1
 2008abc:	180697fa 	slli	r3,r3,31
 2008ac0:	2c4a703a 	and	r5,r5,r17
 2008ac4:	288ab03a 	or	r5,r5,r2
 2008ac8:	28c6b03a 	or	r3,r5,r3
 2008acc:	a005883a 	mov	r2,r20
 2008ad0:	dfc00c17 	ldw	ra,48(sp)
 2008ad4:	df000b17 	ldw	fp,44(sp)
 2008ad8:	ddc00a17 	ldw	r23,40(sp)
 2008adc:	dd800917 	ldw	r22,36(sp)
 2008ae0:	dd400817 	ldw	r21,32(sp)
 2008ae4:	dd000717 	ldw	r20,28(sp)
 2008ae8:	dcc00617 	ldw	r19,24(sp)
 2008aec:	dc800517 	ldw	r18,20(sp)
 2008af0:	dc400417 	ldw	r17,16(sp)
 2008af4:	dc000317 	ldw	r16,12(sp)
 2008af8:	dec00d04 	addi	sp,sp,52
 2008afc:	f800283a 	ret
 2008b00:	2404b03a 	or	r2,r4,r16
 2008b04:	2027883a 	mov	r19,r4
 2008b08:	10004226 	beq	r2,zero,2008c14 <__muldf3+0x2e4>
 2008b0c:	8000fc26 	beq	r16,zero,2008f00 <__muldf3+0x5d0>
 2008b10:	8009883a 	mov	r4,r16
 2008b14:	d9800215 	stw	r6,8(sp)
 2008b18:	d9c00015 	stw	r7,0(sp)
 2008b1c:	da400115 	stw	r9,4(sp)
 2008b20:	2009bfc0 	call	2009bfc <__clzsi2>
 2008b24:	d9800217 	ldw	r6,8(sp)
 2008b28:	d9c00017 	ldw	r7,0(sp)
 2008b2c:	da400117 	ldw	r9,4(sp)
 2008b30:	113ffd44 	addi	r4,r2,-11
 2008b34:	00c00704 	movi	r3,28
 2008b38:	1900ed16 	blt	r3,r4,2008ef0 <__muldf3+0x5c0>
 2008b3c:	00c00744 	movi	r3,29
 2008b40:	147ffe04 	addi	r17,r2,-8
 2008b44:	1907c83a 	sub	r3,r3,r4
 2008b48:	8460983a 	sll	r16,r16,r17
 2008b4c:	98c6d83a 	srl	r3,r19,r3
 2008b50:	9c68983a 	sll	r20,r19,r17
 2008b54:	1c20b03a 	or	r16,r3,r16
 2008b58:	1080fcc4 	addi	r2,r2,1011
 2008b5c:	00a5c83a 	sub	r18,zero,r2
 2008b60:	0027883a 	mov	r19,zero
 2008b64:	0039883a 	mov	fp,zero
 2008b68:	003f9006 	br	20089ac <__muldf3+0x7c>
 2008b6c:	3446b03a 	or	r3,r6,r17
 2008b70:	1800261e 	bne	r3,zero,2008c0c <__muldf3+0x2dc>
 2008b74:	0023883a 	mov	r17,zero
 2008b78:	0011883a 	mov	r8,zero
 2008b7c:	01400084 	movi	r5,2
 2008b80:	003f9c06 	br	20089f4 <__muldf3+0xc4>
 2008b84:	3446b03a 	or	r3,r6,r17
 2008b88:	18001c26 	beq	r3,zero,2008bfc <__muldf3+0x2cc>
 2008b8c:	8800ce26 	beq	r17,zero,2008ec8 <__muldf3+0x598>
 2008b90:	8809883a 	mov	r4,r17
 2008b94:	d9800215 	stw	r6,8(sp)
 2008b98:	da400115 	stw	r9,4(sp)
 2008b9c:	da800015 	stw	r10,0(sp)
 2008ba0:	2009bfc0 	call	2009bfc <__clzsi2>
 2008ba4:	d9800217 	ldw	r6,8(sp)
 2008ba8:	da400117 	ldw	r9,4(sp)
 2008bac:	da800017 	ldw	r10,0(sp)
 2008bb0:	113ffd44 	addi	r4,r2,-11
 2008bb4:	00c00704 	movi	r3,28
 2008bb8:	1900bf16 	blt	r3,r4,2008eb8 <__muldf3+0x588>
 2008bbc:	00c00744 	movi	r3,29
 2008bc0:	123ffe04 	addi	r8,r2,-8
 2008bc4:	1907c83a 	sub	r3,r3,r4
 2008bc8:	8a22983a 	sll	r17,r17,r8
 2008bcc:	30c6d83a 	srl	r3,r6,r3
 2008bd0:	3210983a 	sll	r8,r6,r8
 2008bd4:	1c62b03a 	or	r17,r3,r17
 2008bd8:	1080fcc4 	addi	r2,r2,1011
 2008bdc:	0085c83a 	sub	r2,zero,r2
 2008be0:	000b883a 	mov	r5,zero
 2008be4:	003f8306 	br	20089f4 <__muldf3+0xc4>
 2008be8:	b02b883a 	mov	r21,r22
 2008bec:	0081ffc4 	movi	r2,2047
 2008bf0:	000b883a 	mov	r5,zero
 2008bf4:	0029883a 	mov	r20,zero
 2008bf8:	003fac06 	br	2008aac <__muldf3+0x17c>
 2008bfc:	0023883a 	mov	r17,zero
 2008c00:	0011883a 	mov	r8,zero
 2008c04:	01400044 	movi	r5,1
 2008c08:	003f7a06 	br	20089f4 <__muldf3+0xc4>
 2008c0c:	014000c4 	movi	r5,3
 2008c10:	003f7806 	br	20089f4 <__muldf3+0xc4>
 2008c14:	04c00104 	movi	r19,4
 2008c18:	0021883a 	mov	r16,zero
 2008c1c:	0029883a 	mov	r20,zero
 2008c20:	07000044 	movi	fp,1
 2008c24:	003f6106 	br	20089ac <__muldf3+0x7c>
 2008c28:	04c00304 	movi	r19,12
 2008c2c:	070000c4 	movi	fp,3
 2008c30:	003f5e06 	br	20089ac <__muldf3+0x7c>
 2008c34:	01400434 	movhi	r5,16
 2008c38:	002b883a 	mov	r21,zero
 2008c3c:	297fffc4 	addi	r5,r5,-1
 2008c40:	053fffc4 	movi	r20,-1
 2008c44:	0081ffc4 	movi	r2,2047
 2008c48:	003f9806 	br	2008aac <__muldf3+0x17c>
 2008c4c:	8023883a 	mov	r17,r16
 2008c50:	a011883a 	mov	r8,r20
 2008c54:	e00b883a 	mov	r5,fp
 2008c58:	003f8a06 	br	2008a84 <__muldf3+0x154>
 2008c5c:	8023883a 	mov	r17,r16
 2008c60:	a011883a 	mov	r8,r20
 2008c64:	482d883a 	mov	r22,r9
 2008c68:	e00b883a 	mov	r5,fp
 2008c6c:	003f8506 	br	2008a84 <__muldf3+0x154>
 2008c70:	a00ad43a 	srli	r5,r20,16
 2008c74:	401ad43a 	srli	r13,r8,16
 2008c78:	a53fffcc 	andi	r20,r20,65535
 2008c7c:	423fffcc 	andi	r8,r8,65535
 2008c80:	4519383a 	mul	r12,r8,r20
 2008c84:	4147383a 	mul	r3,r8,r5
 2008c88:	6d09383a 	mul	r4,r13,r20
 2008c8c:	600cd43a 	srli	r6,r12,16
 2008c90:	2b5d383a 	mul	r14,r5,r13
 2008c94:	20c9883a 	add	r4,r4,r3
 2008c98:	310d883a 	add	r6,r6,r4
 2008c9c:	30c0022e 	bgeu	r6,r3,2008ca8 <__muldf3+0x378>
 2008ca0:	00c00074 	movhi	r3,1
 2008ca4:	70dd883a 	add	r14,r14,r3
 2008ca8:	8826d43a 	srli	r19,r17,16
 2008cac:	8bffffcc 	andi	r15,r17,65535
 2008cb0:	7d23383a 	mul	r17,r15,r20
 2008cb4:	7949383a 	mul	r4,r15,r5
 2008cb8:	9d29383a 	mul	r20,r19,r20
 2008cbc:	8814d43a 	srli	r10,r17,16
 2008cc0:	3012943a 	slli	r9,r6,16
 2008cc4:	a129883a 	add	r20,r20,r4
 2008cc8:	633fffcc 	andi	r12,r12,65535
 2008ccc:	5515883a 	add	r10,r10,r20
 2008cd0:	3006d43a 	srli	r3,r6,16
 2008cd4:	4b13883a 	add	r9,r9,r12
 2008cd8:	2ccb383a 	mul	r5,r5,r19
 2008cdc:	5100022e 	bgeu	r10,r4,2008ce8 <__muldf3+0x3b8>
 2008ce0:	01000074 	movhi	r4,1
 2008ce4:	290b883a 	add	r5,r5,r4
 2008ce8:	802ad43a 	srli	r21,r16,16
 2008cec:	843fffcc 	andi	r16,r16,65535
 2008cf0:	440d383a 	mul	r6,r8,r16
 2008cf4:	4565383a 	mul	r18,r8,r21
 2008cf8:	8349383a 	mul	r4,r16,r13
 2008cfc:	500e943a 	slli	r7,r10,16
 2008d00:	3010d43a 	srli	r8,r6,16
 2008d04:	5028d43a 	srli	r20,r10,16
 2008d08:	2489883a 	add	r4,r4,r18
 2008d0c:	8abfffcc 	andi	r10,r17,65535
 2008d10:	3a95883a 	add	r10,r7,r10
 2008d14:	4119883a 	add	r12,r8,r4
 2008d18:	a169883a 	add	r20,r20,r5
 2008d1c:	1a87883a 	add	r3,r3,r10
 2008d20:	6d5b383a 	mul	r13,r13,r21
 2008d24:	6480022e 	bgeu	r12,r18,2008d30 <__muldf3+0x400>
 2008d28:	01000074 	movhi	r4,1
 2008d2c:	691b883a 	add	r13,r13,r4
 2008d30:	7c25383a 	mul	r18,r15,r16
 2008d34:	7d4b383a 	mul	r5,r15,r21
 2008d38:	84cf383a 	mul	r7,r16,r19
 2008d3c:	901ed43a 	srli	r15,r18,16
 2008d40:	6008d43a 	srli	r4,r12,16
 2008d44:	6010943a 	slli	r8,r12,16
 2008d48:	394f883a 	add	r7,r7,r5
 2008d4c:	333fffcc 	andi	r12,r6,65535
 2008d50:	79df883a 	add	r15,r15,r7
 2008d54:	235b883a 	add	r13,r4,r13
 2008d58:	9d63383a 	mul	r17,r19,r21
 2008d5c:	4309883a 	add	r4,r8,r12
 2008d60:	7940022e 	bgeu	r15,r5,2008d6c <__muldf3+0x43c>
 2008d64:	01400074 	movhi	r5,1
 2008d68:	8963883a 	add	r17,r17,r5
 2008d6c:	780a943a 	slli	r5,r15,16
 2008d70:	91bfffcc 	andi	r6,r18,65535
 2008d74:	70c7883a 	add	r3,r14,r3
 2008d78:	298d883a 	add	r6,r5,r6
 2008d7c:	1a8f803a 	cmpltu	r7,r3,r10
 2008d80:	350b883a 	add	r5,r6,r20
 2008d84:	20c7883a 	add	r3,r4,r3
 2008d88:	3955883a 	add	r10,r7,r5
 2008d8c:	1909803a 	cmpltu	r4,r3,r4
 2008d90:	6a91883a 	add	r8,r13,r10
 2008d94:	780cd43a 	srli	r6,r15,16
 2008d98:	2219883a 	add	r12,r4,r8
 2008d9c:	2d0b803a 	cmpltu	r5,r5,r20
 2008da0:	51cf803a 	cmpltu	r7,r10,r7
 2008da4:	29ceb03a 	or	r7,r5,r7
 2008da8:	4351803a 	cmpltu	r8,r8,r13
 2008dac:	610b803a 	cmpltu	r5,r12,r4
 2008db0:	4148b03a 	or	r4,r8,r5
 2008db4:	398f883a 	add	r7,r7,r6
 2008db8:	3909883a 	add	r4,r7,r4
 2008dbc:	1810927a 	slli	r8,r3,9
 2008dc0:	2449883a 	add	r4,r4,r17
 2008dc4:	2008927a 	slli	r4,r4,9
 2008dc8:	6022d5fa 	srli	r17,r12,23
 2008dcc:	1806d5fa 	srli	r3,r3,23
 2008dd0:	4252b03a 	or	r9,r8,r9
 2008dd4:	600a927a 	slli	r5,r12,9
 2008dd8:	4810c03a 	cmpne	r8,r9,zero
 2008ddc:	2462b03a 	or	r17,r4,r17
 2008de0:	40c6b03a 	or	r3,r8,r3
 2008de4:	8900402c 	andhi	r4,r17,256
 2008de8:	1950b03a 	or	r8,r3,r5
 2008dec:	20000726 	beq	r4,zero,2008e0c <__muldf3+0x4dc>
 2008df0:	4006d07a 	srli	r3,r8,1
 2008df4:	880497fa 	slli	r2,r17,31
 2008df8:	4200004c 	andi	r8,r8,1
 2008dfc:	8822d07a 	srli	r17,r17,1
 2008e00:	1a10b03a 	or	r8,r3,r8
 2008e04:	1210b03a 	or	r8,r2,r8
 2008e08:	5805883a 	mov	r2,r11
 2008e0c:	1140ffc4 	addi	r5,r2,1023
 2008e10:	0140440e 	bge	zero,r5,2008f24 <__muldf3+0x5f4>
 2008e14:	40c001cc 	andi	r3,r8,7
 2008e18:	18000726 	beq	r3,zero,2008e38 <__muldf3+0x508>
 2008e1c:	40c003cc 	andi	r3,r8,15
 2008e20:	01000104 	movi	r4,4
 2008e24:	19000426 	beq	r3,r4,2008e38 <__muldf3+0x508>
 2008e28:	4107883a 	add	r3,r8,r4
 2008e2c:	1a11803a 	cmpltu	r8,r3,r8
 2008e30:	8a23883a 	add	r17,r17,r8
 2008e34:	1811883a 	mov	r8,r3
 2008e38:	88c0402c 	andhi	r3,r17,256
 2008e3c:	18000426 	beq	r3,zero,2008e50 <__muldf3+0x520>
 2008e40:	11410004 	addi	r5,r2,1024
 2008e44:	00bfc034 	movhi	r2,65280
 2008e48:	10bfffc4 	addi	r2,r2,-1
 2008e4c:	88a2703a 	and	r17,r17,r2
 2008e50:	0081ff84 	movi	r2,2046
 2008e54:	117f6416 	blt	r2,r5,2008be8 <__muldf3+0x2b8>
 2008e58:	8828977a 	slli	r20,r17,29
 2008e5c:	4010d0fa 	srli	r8,r8,3
 2008e60:	8822927a 	slli	r17,r17,9
 2008e64:	2881ffcc 	andi	r2,r5,2047
 2008e68:	a228b03a 	or	r20,r20,r8
 2008e6c:	880ad33a 	srli	r5,r17,12
 2008e70:	b02b883a 	mov	r21,r22
 2008e74:	003f0d06 	br	2008aac <__muldf3+0x17c>
 2008e78:	8080022c 	andhi	r2,r16,8
 2008e7c:	10000926 	beq	r2,zero,2008ea4 <__muldf3+0x574>
 2008e80:	8880022c 	andhi	r2,r17,8
 2008e84:	1000071e 	bne	r2,zero,2008ea4 <__muldf3+0x574>
 2008e88:	00800434 	movhi	r2,16
 2008e8c:	89400234 	orhi	r5,r17,8
 2008e90:	10bfffc4 	addi	r2,r2,-1
 2008e94:	b82b883a 	mov	r21,r23
 2008e98:	288a703a 	and	r5,r5,r2
 2008e9c:	4029883a 	mov	r20,r8
 2008ea0:	003f6806 	br	2008c44 <__muldf3+0x314>
 2008ea4:	00800434 	movhi	r2,16
 2008ea8:	81400234 	orhi	r5,r16,8
 2008eac:	10bfffc4 	addi	r2,r2,-1
 2008eb0:	288a703a 	and	r5,r5,r2
 2008eb4:	003f6306 	br	2008c44 <__muldf3+0x314>
 2008eb8:	147ff604 	addi	r17,r2,-40
 2008ebc:	3462983a 	sll	r17,r6,r17
 2008ec0:	0011883a 	mov	r8,zero
 2008ec4:	003f4406 	br	2008bd8 <__muldf3+0x2a8>
 2008ec8:	3009883a 	mov	r4,r6
 2008ecc:	d9800215 	stw	r6,8(sp)
 2008ed0:	da400115 	stw	r9,4(sp)
 2008ed4:	da800015 	stw	r10,0(sp)
 2008ed8:	2009bfc0 	call	2009bfc <__clzsi2>
 2008edc:	10800804 	addi	r2,r2,32
 2008ee0:	da800017 	ldw	r10,0(sp)
 2008ee4:	da400117 	ldw	r9,4(sp)
 2008ee8:	d9800217 	ldw	r6,8(sp)
 2008eec:	003f3006 	br	2008bb0 <__muldf3+0x280>
 2008ef0:	143ff604 	addi	r16,r2,-40
 2008ef4:	9c20983a 	sll	r16,r19,r16
 2008ef8:	0029883a 	mov	r20,zero
 2008efc:	003f1606 	br	2008b58 <__muldf3+0x228>
 2008f00:	d9800215 	stw	r6,8(sp)
 2008f04:	d9c00015 	stw	r7,0(sp)
 2008f08:	da400115 	stw	r9,4(sp)
 2008f0c:	2009bfc0 	call	2009bfc <__clzsi2>
 2008f10:	10800804 	addi	r2,r2,32
 2008f14:	da400117 	ldw	r9,4(sp)
 2008f18:	d9c00017 	ldw	r7,0(sp)
 2008f1c:	d9800217 	ldw	r6,8(sp)
 2008f20:	003f0306 	br	2008b30 <__muldf3+0x200>
 2008f24:	00c00044 	movi	r3,1
 2008f28:	1947c83a 	sub	r3,r3,r5
 2008f2c:	00800e04 	movi	r2,56
 2008f30:	10feda16 	blt	r2,r3,2008a9c <__muldf3+0x16c>
 2008f34:	008007c4 	movi	r2,31
 2008f38:	10c01b16 	blt	r2,r3,2008fa8 <__muldf3+0x678>
 2008f3c:	00800804 	movi	r2,32
 2008f40:	10c5c83a 	sub	r2,r2,r3
 2008f44:	888a983a 	sll	r5,r17,r2
 2008f48:	40c8d83a 	srl	r4,r8,r3
 2008f4c:	4084983a 	sll	r2,r8,r2
 2008f50:	88e2d83a 	srl	r17,r17,r3
 2008f54:	2906b03a 	or	r3,r5,r4
 2008f58:	1004c03a 	cmpne	r2,r2,zero
 2008f5c:	1886b03a 	or	r3,r3,r2
 2008f60:	188001cc 	andi	r2,r3,7
 2008f64:	10000726 	beq	r2,zero,2008f84 <__muldf3+0x654>
 2008f68:	188003cc 	andi	r2,r3,15
 2008f6c:	01000104 	movi	r4,4
 2008f70:	11000426 	beq	r2,r4,2008f84 <__muldf3+0x654>
 2008f74:	1805883a 	mov	r2,r3
 2008f78:	10c00104 	addi	r3,r2,4
 2008f7c:	1885803a 	cmpltu	r2,r3,r2
 2008f80:	88a3883a 	add	r17,r17,r2
 2008f84:	8880202c 	andhi	r2,r17,128
 2008f88:	10001c26 	beq	r2,zero,2008ffc <__muldf3+0x6cc>
 2008f8c:	b02b883a 	mov	r21,r22
 2008f90:	00800044 	movi	r2,1
 2008f94:	000b883a 	mov	r5,zero
 2008f98:	0029883a 	mov	r20,zero
 2008f9c:	003ec306 	br	2008aac <__muldf3+0x17c>
 2008fa0:	5805883a 	mov	r2,r11
 2008fa4:	003f9906 	br	2008e0c <__muldf3+0x4dc>
 2008fa8:	00bff844 	movi	r2,-31
 2008fac:	1145c83a 	sub	r2,r2,r5
 2008fb0:	8888d83a 	srl	r4,r17,r2
 2008fb4:	00800804 	movi	r2,32
 2008fb8:	18801a26 	beq	r3,r2,2009024 <__muldf3+0x6f4>
 2008fbc:	00801004 	movi	r2,64
 2008fc0:	10c5c83a 	sub	r2,r2,r3
 2008fc4:	8884983a 	sll	r2,r17,r2
 2008fc8:	1204b03a 	or	r2,r2,r8
 2008fcc:	1004c03a 	cmpne	r2,r2,zero
 2008fd0:	2084b03a 	or	r2,r4,r2
 2008fd4:	144001cc 	andi	r17,r2,7
 2008fd8:	88000d1e 	bne	r17,zero,2009010 <__muldf3+0x6e0>
 2008fdc:	000b883a 	mov	r5,zero
 2008fe0:	1028d0fa 	srli	r20,r2,3
 2008fe4:	b02b883a 	mov	r21,r22
 2008fe8:	0005883a 	mov	r2,zero
 2008fec:	a468b03a 	or	r20,r20,r17
 2008ff0:	003eae06 	br	2008aac <__muldf3+0x17c>
 2008ff4:	1007883a 	mov	r3,r2
 2008ff8:	0023883a 	mov	r17,zero
 2008ffc:	880a927a 	slli	r5,r17,9
 2009000:	1805883a 	mov	r2,r3
 2009004:	8822977a 	slli	r17,r17,29
 2009008:	280ad33a 	srli	r5,r5,12
 200900c:	003ff406 	br	2008fe0 <__muldf3+0x6b0>
 2009010:	10c003cc 	andi	r3,r2,15
 2009014:	01000104 	movi	r4,4
 2009018:	193ff626 	beq	r3,r4,2008ff4 <__muldf3+0x6c4>
 200901c:	0023883a 	mov	r17,zero
 2009020:	003fd506 	br	2008f78 <__muldf3+0x648>
 2009024:	0005883a 	mov	r2,zero
 2009028:	003fe706 	br	2008fc8 <__muldf3+0x698>
 200902c:	00800434 	movhi	r2,16
 2009030:	89400234 	orhi	r5,r17,8
 2009034:	10bfffc4 	addi	r2,r2,-1
 2009038:	b02b883a 	mov	r21,r22
 200903c:	288a703a 	and	r5,r5,r2
 2009040:	4029883a 	mov	r20,r8
 2009044:	003eff06 	br	2008c44 <__muldf3+0x314>

02009048 <__subdf3>:
 2009048:	02000434 	movhi	r8,16
 200904c:	423fffc4 	addi	r8,r8,-1
 2009050:	defffb04 	addi	sp,sp,-20
 2009054:	2a14703a 	and	r10,r5,r8
 2009058:	3812d53a 	srli	r9,r7,20
 200905c:	3a10703a 	and	r8,r7,r8
 2009060:	2006d77a 	srli	r3,r4,29
 2009064:	3004d77a 	srli	r2,r6,29
 2009068:	dc000015 	stw	r16,0(sp)
 200906c:	501490fa 	slli	r10,r10,3
 2009070:	2820d53a 	srli	r16,r5,20
 2009074:	401090fa 	slli	r8,r8,3
 2009078:	dc800215 	stw	r18,8(sp)
 200907c:	dc400115 	stw	r17,4(sp)
 2009080:	dfc00415 	stw	ra,16(sp)
 2009084:	202290fa 	slli	r17,r4,3
 2009088:	dcc00315 	stw	r19,12(sp)
 200908c:	4a41ffcc 	andi	r9,r9,2047
 2009090:	0101ffc4 	movi	r4,2047
 2009094:	2824d7fa 	srli	r18,r5,31
 2009098:	8401ffcc 	andi	r16,r16,2047
 200909c:	50c6b03a 	or	r3,r10,r3
 20090a0:	380ed7fa 	srli	r7,r7,31
 20090a4:	408ab03a 	or	r5,r8,r2
 20090a8:	300c90fa 	slli	r6,r6,3
 20090ac:	49009626 	beq	r9,r4,2009308 <__subdf3+0x2c0>
 20090b0:	39c0005c 	xori	r7,r7,1
 20090b4:	8245c83a 	sub	r2,r16,r9
 20090b8:	3c807426 	beq	r7,r18,200928c <__subdf3+0x244>
 20090bc:	0080af0e 	bge	zero,r2,200937c <__subdf3+0x334>
 20090c0:	48002a1e 	bne	r9,zero,200916c <__subdf3+0x124>
 20090c4:	2988b03a 	or	r4,r5,r6
 20090c8:	20009a1e 	bne	r4,zero,2009334 <__subdf3+0x2ec>
 20090cc:	888001cc 	andi	r2,r17,7
 20090d0:	10000726 	beq	r2,zero,20090f0 <__subdf3+0xa8>
 20090d4:	888003cc 	andi	r2,r17,15
 20090d8:	01000104 	movi	r4,4
 20090dc:	11000426 	beq	r2,r4,20090f0 <__subdf3+0xa8>
 20090e0:	890b883a 	add	r5,r17,r4
 20090e4:	2c63803a 	cmpltu	r17,r5,r17
 20090e8:	1c47883a 	add	r3,r3,r17
 20090ec:	2823883a 	mov	r17,r5
 20090f0:	1880202c 	andhi	r2,r3,128
 20090f4:	10005926 	beq	r2,zero,200925c <__subdf3+0x214>
 20090f8:	84000044 	addi	r16,r16,1
 20090fc:	0081ffc4 	movi	r2,2047
 2009100:	8080be26 	beq	r16,r2,20093fc <__subdf3+0x3b4>
 2009104:	017fe034 	movhi	r5,65408
 2009108:	297fffc4 	addi	r5,r5,-1
 200910c:	1946703a 	and	r3,r3,r5
 2009110:	1804977a 	slli	r2,r3,29
 2009114:	1806927a 	slli	r3,r3,9
 2009118:	8822d0fa 	srli	r17,r17,3
 200911c:	8401ffcc 	andi	r16,r16,2047
 2009120:	180ad33a 	srli	r5,r3,12
 2009124:	9100004c 	andi	r4,r18,1
 2009128:	1444b03a 	or	r2,r2,r17
 200912c:	80c1ffcc 	andi	r3,r16,2047
 2009130:	1820953a 	slli	r16,r3,20
 2009134:	20c03fcc 	andi	r3,r4,255
 2009138:	180897fa 	slli	r4,r3,31
 200913c:	00c00434 	movhi	r3,16
 2009140:	18ffffc4 	addi	r3,r3,-1
 2009144:	28c6703a 	and	r3,r5,r3
 2009148:	1c06b03a 	or	r3,r3,r16
 200914c:	1906b03a 	or	r3,r3,r4
 2009150:	dfc00417 	ldw	ra,16(sp)
 2009154:	dcc00317 	ldw	r19,12(sp)
 2009158:	dc800217 	ldw	r18,8(sp)
 200915c:	dc400117 	ldw	r17,4(sp)
 2009160:	dc000017 	ldw	r16,0(sp)
 2009164:	dec00504 	addi	sp,sp,20
 2009168:	f800283a 	ret
 200916c:	0101ffc4 	movi	r4,2047
 2009170:	813fd626 	beq	r16,r4,20090cc <__subdf3+0x84>
 2009174:	29402034 	orhi	r5,r5,128
 2009178:	01000e04 	movi	r4,56
 200917c:	2080a316 	blt	r4,r2,200940c <__subdf3+0x3c4>
 2009180:	010007c4 	movi	r4,31
 2009184:	2080c616 	blt	r4,r2,20094a0 <__subdf3+0x458>
 2009188:	01000804 	movi	r4,32
 200918c:	2089c83a 	sub	r4,r4,r2
 2009190:	2910983a 	sll	r8,r5,r4
 2009194:	308ed83a 	srl	r7,r6,r2
 2009198:	3108983a 	sll	r4,r6,r4
 200919c:	2884d83a 	srl	r2,r5,r2
 20091a0:	41ccb03a 	or	r6,r8,r7
 20091a4:	2008c03a 	cmpne	r4,r4,zero
 20091a8:	310cb03a 	or	r6,r6,r4
 20091ac:	898dc83a 	sub	r6,r17,r6
 20091b0:	89a3803a 	cmpltu	r17,r17,r6
 20091b4:	1887c83a 	sub	r3,r3,r2
 20091b8:	1c47c83a 	sub	r3,r3,r17
 20091bc:	3023883a 	mov	r17,r6
 20091c0:	1880202c 	andhi	r2,r3,128
 20091c4:	10002326 	beq	r2,zero,2009254 <__subdf3+0x20c>
 20091c8:	04c02034 	movhi	r19,128
 20091cc:	9cffffc4 	addi	r19,r19,-1
 20091d0:	1ce6703a 	and	r19,r3,r19
 20091d4:	98007a26 	beq	r19,zero,20093c0 <__subdf3+0x378>
 20091d8:	9809883a 	mov	r4,r19
 20091dc:	2009bfc0 	call	2009bfc <__clzsi2>
 20091e0:	113ffe04 	addi	r4,r2,-8
 20091e4:	00c007c4 	movi	r3,31
 20091e8:	19007b16 	blt	r3,r4,20093d8 <__subdf3+0x390>
 20091ec:	00800804 	movi	r2,32
 20091f0:	1105c83a 	sub	r2,r2,r4
 20091f4:	8884d83a 	srl	r2,r17,r2
 20091f8:	9906983a 	sll	r3,r19,r4
 20091fc:	8922983a 	sll	r17,r17,r4
 2009200:	10c4b03a 	or	r2,r2,r3
 2009204:	24007816 	blt	r4,r16,20093e8 <__subdf3+0x3a0>
 2009208:	2421c83a 	sub	r16,r4,r16
 200920c:	80c00044 	addi	r3,r16,1
 2009210:	010007c4 	movi	r4,31
 2009214:	20c09516 	blt	r4,r3,200946c <__subdf3+0x424>
 2009218:	01400804 	movi	r5,32
 200921c:	28cbc83a 	sub	r5,r5,r3
 2009220:	88c8d83a 	srl	r4,r17,r3
 2009224:	8962983a 	sll	r17,r17,r5
 2009228:	114a983a 	sll	r5,r2,r5
 200922c:	10c6d83a 	srl	r3,r2,r3
 2009230:	8804c03a 	cmpne	r2,r17,zero
 2009234:	290ab03a 	or	r5,r5,r4
 2009238:	28a2b03a 	or	r17,r5,r2
 200923c:	0021883a 	mov	r16,zero
 2009240:	003fa206 	br	20090cc <__subdf3+0x84>
 2009244:	2090b03a 	or	r8,r4,r2
 2009248:	40018e26 	beq	r8,zero,2009884 <__subdf3+0x83c>
 200924c:	1007883a 	mov	r3,r2
 2009250:	2023883a 	mov	r17,r4
 2009254:	888001cc 	andi	r2,r17,7
 2009258:	103f9e1e 	bne	r2,zero,20090d4 <__subdf3+0x8c>
 200925c:	1804977a 	slli	r2,r3,29
 2009260:	8822d0fa 	srli	r17,r17,3
 2009264:	1810d0fa 	srli	r8,r3,3
 2009268:	9100004c 	andi	r4,r18,1
 200926c:	1444b03a 	or	r2,r2,r17
 2009270:	00c1ffc4 	movi	r3,2047
 2009274:	80c02826 	beq	r16,r3,2009318 <__subdf3+0x2d0>
 2009278:	01400434 	movhi	r5,16
 200927c:	297fffc4 	addi	r5,r5,-1
 2009280:	80e0703a 	and	r16,r16,r3
 2009284:	414a703a 	and	r5,r8,r5
 2009288:	003fa806 	br	200912c <__subdf3+0xe4>
 200928c:	0080630e 	bge	zero,r2,200941c <__subdf3+0x3d4>
 2009290:	48003026 	beq	r9,zero,2009354 <__subdf3+0x30c>
 2009294:	0101ffc4 	movi	r4,2047
 2009298:	813f8c26 	beq	r16,r4,20090cc <__subdf3+0x84>
 200929c:	29402034 	orhi	r5,r5,128
 20092a0:	01000e04 	movi	r4,56
 20092a4:	2080a90e 	bge	r4,r2,200954c <__subdf3+0x504>
 20092a8:	298cb03a 	or	r6,r5,r6
 20092ac:	3012c03a 	cmpne	r9,r6,zero
 20092b0:	0005883a 	mov	r2,zero
 20092b4:	4c53883a 	add	r9,r9,r17
 20092b8:	4c63803a 	cmpltu	r17,r9,r17
 20092bc:	10c7883a 	add	r3,r2,r3
 20092c0:	88c7883a 	add	r3,r17,r3
 20092c4:	4823883a 	mov	r17,r9
 20092c8:	1880202c 	andhi	r2,r3,128
 20092cc:	1000d026 	beq	r2,zero,2009610 <__subdf3+0x5c8>
 20092d0:	84000044 	addi	r16,r16,1
 20092d4:	0081ffc4 	movi	r2,2047
 20092d8:	8080fe26 	beq	r16,r2,20096d4 <__subdf3+0x68c>
 20092dc:	00bfe034 	movhi	r2,65408
 20092e0:	10bfffc4 	addi	r2,r2,-1
 20092e4:	1886703a 	and	r3,r3,r2
 20092e8:	880ad07a 	srli	r5,r17,1
 20092ec:	180497fa 	slli	r2,r3,31
 20092f0:	8900004c 	andi	r4,r17,1
 20092f4:	2922b03a 	or	r17,r5,r4
 20092f8:	1806d07a 	srli	r3,r3,1
 20092fc:	1462b03a 	or	r17,r2,r17
 2009300:	3825883a 	mov	r18,r7
 2009304:	003f7106 	br	20090cc <__subdf3+0x84>
 2009308:	2984b03a 	or	r2,r5,r6
 200930c:	103f6826 	beq	r2,zero,20090b0 <__subdf3+0x68>
 2009310:	39c03fcc 	andi	r7,r7,255
 2009314:	003f6706 	br	20090b4 <__subdf3+0x6c>
 2009318:	4086b03a 	or	r3,r8,r2
 200931c:	18015226 	beq	r3,zero,2009868 <__subdf3+0x820>
 2009320:	00c00434 	movhi	r3,16
 2009324:	41400234 	orhi	r5,r8,8
 2009328:	18ffffc4 	addi	r3,r3,-1
 200932c:	28ca703a 	and	r5,r5,r3
 2009330:	003f7e06 	br	200912c <__subdf3+0xe4>
 2009334:	10bfffc4 	addi	r2,r2,-1
 2009338:	1000491e 	bne	r2,zero,2009460 <__subdf3+0x418>
 200933c:	898fc83a 	sub	r7,r17,r6
 2009340:	89e3803a 	cmpltu	r17,r17,r7
 2009344:	1947c83a 	sub	r3,r3,r5
 2009348:	1c47c83a 	sub	r3,r3,r17
 200934c:	3823883a 	mov	r17,r7
 2009350:	003f9b06 	br	20091c0 <__subdf3+0x178>
 2009354:	2988b03a 	or	r4,r5,r6
 2009358:	203f5c26 	beq	r4,zero,20090cc <__subdf3+0x84>
 200935c:	10bfffc4 	addi	r2,r2,-1
 2009360:	1000931e 	bne	r2,zero,20095b0 <__subdf3+0x568>
 2009364:	898d883a 	add	r6,r17,r6
 2009368:	3463803a 	cmpltu	r17,r6,r17
 200936c:	1947883a 	add	r3,r3,r5
 2009370:	88c7883a 	add	r3,r17,r3
 2009374:	3023883a 	mov	r17,r6
 2009378:	003fd306 	br	20092c8 <__subdf3+0x280>
 200937c:	1000541e 	bne	r2,zero,20094d0 <__subdf3+0x488>
 2009380:	80800044 	addi	r2,r16,1
 2009384:	1081ffcc 	andi	r2,r2,2047
 2009388:	01000044 	movi	r4,1
 200938c:	2080a20e 	bge	r4,r2,2009618 <__subdf3+0x5d0>
 2009390:	8989c83a 	sub	r4,r17,r6
 2009394:	8905803a 	cmpltu	r2,r17,r4
 2009398:	1967c83a 	sub	r19,r3,r5
 200939c:	98a7c83a 	sub	r19,r19,r2
 20093a0:	9880202c 	andhi	r2,r19,128
 20093a4:	10006326 	beq	r2,zero,2009534 <__subdf3+0x4ec>
 20093a8:	3463c83a 	sub	r17,r6,r17
 20093ac:	28c7c83a 	sub	r3,r5,r3
 20093b0:	344d803a 	cmpltu	r6,r6,r17
 20093b4:	19a7c83a 	sub	r19,r3,r6
 20093b8:	3825883a 	mov	r18,r7
 20093bc:	983f861e 	bne	r19,zero,20091d8 <__subdf3+0x190>
 20093c0:	8809883a 	mov	r4,r17
 20093c4:	2009bfc0 	call	2009bfc <__clzsi2>
 20093c8:	10800804 	addi	r2,r2,32
 20093cc:	113ffe04 	addi	r4,r2,-8
 20093d0:	00c007c4 	movi	r3,31
 20093d4:	193f850e 	bge	r3,r4,20091ec <__subdf3+0x1a4>
 20093d8:	10bff604 	addi	r2,r2,-40
 20093dc:	8884983a 	sll	r2,r17,r2
 20093e0:	0023883a 	mov	r17,zero
 20093e4:	243f880e 	bge	r4,r16,2009208 <__subdf3+0x1c0>
 20093e8:	00ffe034 	movhi	r3,65408
 20093ec:	18ffffc4 	addi	r3,r3,-1
 20093f0:	8121c83a 	sub	r16,r16,r4
 20093f4:	10c6703a 	and	r3,r2,r3
 20093f8:	003f3406 	br	20090cc <__subdf3+0x84>
 20093fc:	9100004c 	andi	r4,r18,1
 2009400:	000b883a 	mov	r5,zero
 2009404:	0005883a 	mov	r2,zero
 2009408:	003f4806 	br	200912c <__subdf3+0xe4>
 200940c:	298cb03a 	or	r6,r5,r6
 2009410:	300cc03a 	cmpne	r6,r6,zero
 2009414:	0005883a 	mov	r2,zero
 2009418:	003f6406 	br	20091ac <__subdf3+0x164>
 200941c:	10009a1e 	bne	r2,zero,2009688 <__subdf3+0x640>
 2009420:	82400044 	addi	r9,r16,1
 2009424:	4881ffcc 	andi	r2,r9,2047
 2009428:	02800044 	movi	r10,1
 200942c:	5080670e 	bge	r10,r2,20095cc <__subdf3+0x584>
 2009430:	0081ffc4 	movi	r2,2047
 2009434:	4880af26 	beq	r9,r2,20096f4 <__subdf3+0x6ac>
 2009438:	898d883a 	add	r6,r17,r6
 200943c:	1945883a 	add	r2,r3,r5
 2009440:	3447803a 	cmpltu	r3,r6,r17
 2009444:	1887883a 	add	r3,r3,r2
 2009448:	182297fa 	slli	r17,r3,31
 200944c:	300cd07a 	srli	r6,r6,1
 2009450:	1806d07a 	srli	r3,r3,1
 2009454:	4821883a 	mov	r16,r9
 2009458:	89a2b03a 	or	r17,r17,r6
 200945c:	003f1b06 	br	20090cc <__subdf3+0x84>
 2009460:	0101ffc4 	movi	r4,2047
 2009464:	813f441e 	bne	r16,r4,2009178 <__subdf3+0x130>
 2009468:	003f1806 	br	20090cc <__subdf3+0x84>
 200946c:	843ff844 	addi	r16,r16,-31
 2009470:	01400804 	movi	r5,32
 2009474:	1408d83a 	srl	r4,r2,r16
 2009478:	19405026 	beq	r3,r5,20095bc <__subdf3+0x574>
 200947c:	01401004 	movi	r5,64
 2009480:	28c7c83a 	sub	r3,r5,r3
 2009484:	10c4983a 	sll	r2,r2,r3
 2009488:	88a2b03a 	or	r17,r17,r2
 200948c:	8822c03a 	cmpne	r17,r17,zero
 2009490:	2462b03a 	or	r17,r4,r17
 2009494:	0007883a 	mov	r3,zero
 2009498:	0021883a 	mov	r16,zero
 200949c:	003f6d06 	br	2009254 <__subdf3+0x20c>
 20094a0:	11fff804 	addi	r7,r2,-32
 20094a4:	01000804 	movi	r4,32
 20094a8:	29ced83a 	srl	r7,r5,r7
 20094ac:	11004526 	beq	r2,r4,20095c4 <__subdf3+0x57c>
 20094b0:	01001004 	movi	r4,64
 20094b4:	2089c83a 	sub	r4,r4,r2
 20094b8:	2904983a 	sll	r2,r5,r4
 20094bc:	118cb03a 	or	r6,r2,r6
 20094c0:	300cc03a 	cmpne	r6,r6,zero
 20094c4:	398cb03a 	or	r6,r7,r6
 20094c8:	0005883a 	mov	r2,zero
 20094cc:	003f3706 	br	20091ac <__subdf3+0x164>
 20094d0:	80002a26 	beq	r16,zero,200957c <__subdf3+0x534>
 20094d4:	0101ffc4 	movi	r4,2047
 20094d8:	49006626 	beq	r9,r4,2009674 <__subdf3+0x62c>
 20094dc:	0085c83a 	sub	r2,zero,r2
 20094e0:	18c02034 	orhi	r3,r3,128
 20094e4:	01000e04 	movi	r4,56
 20094e8:	20807e16 	blt	r4,r2,20096e4 <__subdf3+0x69c>
 20094ec:	010007c4 	movi	r4,31
 20094f0:	2080e716 	blt	r4,r2,2009890 <__subdf3+0x848>
 20094f4:	01000804 	movi	r4,32
 20094f8:	2089c83a 	sub	r4,r4,r2
 20094fc:	1914983a 	sll	r10,r3,r4
 2009500:	8890d83a 	srl	r8,r17,r2
 2009504:	8908983a 	sll	r4,r17,r4
 2009508:	1884d83a 	srl	r2,r3,r2
 200950c:	5222b03a 	or	r17,r10,r8
 2009510:	2006c03a 	cmpne	r3,r4,zero
 2009514:	88e2b03a 	or	r17,r17,r3
 2009518:	3463c83a 	sub	r17,r6,r17
 200951c:	2885c83a 	sub	r2,r5,r2
 2009520:	344d803a 	cmpltu	r6,r6,r17
 2009524:	1187c83a 	sub	r3,r2,r6
 2009528:	4821883a 	mov	r16,r9
 200952c:	3825883a 	mov	r18,r7
 2009530:	003f2306 	br	20091c0 <__subdf3+0x178>
 2009534:	24d0b03a 	or	r8,r4,r19
 2009538:	40001b1e 	bne	r8,zero,20095a8 <__subdf3+0x560>
 200953c:	0005883a 	mov	r2,zero
 2009540:	0009883a 	mov	r4,zero
 2009544:	0021883a 	mov	r16,zero
 2009548:	003f4906 	br	2009270 <__subdf3+0x228>
 200954c:	010007c4 	movi	r4,31
 2009550:	20803a16 	blt	r4,r2,200963c <__subdf3+0x5f4>
 2009554:	01000804 	movi	r4,32
 2009558:	2089c83a 	sub	r4,r4,r2
 200955c:	2912983a 	sll	r9,r5,r4
 2009560:	3090d83a 	srl	r8,r6,r2
 2009564:	3108983a 	sll	r4,r6,r4
 2009568:	2884d83a 	srl	r2,r5,r2
 200956c:	4a12b03a 	or	r9,r9,r8
 2009570:	2008c03a 	cmpne	r4,r4,zero
 2009574:	4912b03a 	or	r9,r9,r4
 2009578:	003f4e06 	br	20092b4 <__subdf3+0x26c>
 200957c:	1c48b03a 	or	r4,r3,r17
 2009580:	20003c26 	beq	r4,zero,2009674 <__subdf3+0x62c>
 2009584:	0084303a 	nor	r2,zero,r2
 2009588:	1000381e 	bne	r2,zero,200966c <__subdf3+0x624>
 200958c:	3463c83a 	sub	r17,r6,r17
 2009590:	28c5c83a 	sub	r2,r5,r3
 2009594:	344d803a 	cmpltu	r6,r6,r17
 2009598:	1187c83a 	sub	r3,r2,r6
 200959c:	4821883a 	mov	r16,r9
 20095a0:	3825883a 	mov	r18,r7
 20095a4:	003f0606 	br	20091c0 <__subdf3+0x178>
 20095a8:	2023883a 	mov	r17,r4
 20095ac:	003f0906 	br	20091d4 <__subdf3+0x18c>
 20095b0:	0101ffc4 	movi	r4,2047
 20095b4:	813f3a1e 	bne	r16,r4,20092a0 <__subdf3+0x258>
 20095b8:	003ec406 	br	20090cc <__subdf3+0x84>
 20095bc:	0005883a 	mov	r2,zero
 20095c0:	003fb106 	br	2009488 <__subdf3+0x440>
 20095c4:	0005883a 	mov	r2,zero
 20095c8:	003fbc06 	br	20094bc <__subdf3+0x474>
 20095cc:	1c44b03a 	or	r2,r3,r17
 20095d0:	80008e1e 	bne	r16,zero,200980c <__subdf3+0x7c4>
 20095d4:	1000c826 	beq	r2,zero,20098f8 <__subdf3+0x8b0>
 20095d8:	2984b03a 	or	r2,r5,r6
 20095dc:	103ebb26 	beq	r2,zero,20090cc <__subdf3+0x84>
 20095e0:	8989883a 	add	r4,r17,r6
 20095e4:	1945883a 	add	r2,r3,r5
 20095e8:	2447803a 	cmpltu	r3,r4,r17
 20095ec:	1887883a 	add	r3,r3,r2
 20095f0:	1880202c 	andhi	r2,r3,128
 20095f4:	2023883a 	mov	r17,r4
 20095f8:	103f1626 	beq	r2,zero,2009254 <__subdf3+0x20c>
 20095fc:	00bfe034 	movhi	r2,65408
 2009600:	10bfffc4 	addi	r2,r2,-1
 2009604:	5021883a 	mov	r16,r10
 2009608:	1886703a 	and	r3,r3,r2
 200960c:	003eaf06 	br	20090cc <__subdf3+0x84>
 2009610:	3825883a 	mov	r18,r7
 2009614:	003f0f06 	br	2009254 <__subdf3+0x20c>
 2009618:	1c44b03a 	or	r2,r3,r17
 200961c:	8000251e 	bne	r16,zero,20096b4 <__subdf3+0x66c>
 2009620:	1000661e 	bne	r2,zero,20097bc <__subdf3+0x774>
 2009624:	2990b03a 	or	r8,r5,r6
 2009628:	40009626 	beq	r8,zero,2009884 <__subdf3+0x83c>
 200962c:	2807883a 	mov	r3,r5
 2009630:	3023883a 	mov	r17,r6
 2009634:	3825883a 	mov	r18,r7
 2009638:	003ea406 	br	20090cc <__subdf3+0x84>
 200963c:	127ff804 	addi	r9,r2,-32
 2009640:	01000804 	movi	r4,32
 2009644:	2a52d83a 	srl	r9,r5,r9
 2009648:	11008c26 	beq	r2,r4,200987c <__subdf3+0x834>
 200964c:	01001004 	movi	r4,64
 2009650:	2085c83a 	sub	r2,r4,r2
 2009654:	2884983a 	sll	r2,r5,r2
 2009658:	118cb03a 	or	r6,r2,r6
 200965c:	300cc03a 	cmpne	r6,r6,zero
 2009660:	4992b03a 	or	r9,r9,r6
 2009664:	0005883a 	mov	r2,zero
 2009668:	003f1206 	br	20092b4 <__subdf3+0x26c>
 200966c:	0101ffc4 	movi	r4,2047
 2009670:	493f9c1e 	bne	r9,r4,20094e4 <__subdf3+0x49c>
 2009674:	2807883a 	mov	r3,r5
 2009678:	3023883a 	mov	r17,r6
 200967c:	4821883a 	mov	r16,r9
 2009680:	3825883a 	mov	r18,r7
 2009684:	003e9106 	br	20090cc <__subdf3+0x84>
 2009688:	80001f1e 	bne	r16,zero,2009708 <__subdf3+0x6c0>
 200968c:	1c48b03a 	or	r4,r3,r17
 2009690:	20005a26 	beq	r4,zero,20097fc <__subdf3+0x7b4>
 2009694:	0084303a 	nor	r2,zero,r2
 2009698:	1000561e 	bne	r2,zero,20097f4 <__subdf3+0x7ac>
 200969c:	89a3883a 	add	r17,r17,r6
 20096a0:	1945883a 	add	r2,r3,r5
 20096a4:	898d803a 	cmpltu	r6,r17,r6
 20096a8:	3087883a 	add	r3,r6,r2
 20096ac:	4821883a 	mov	r16,r9
 20096b0:	003f0506 	br	20092c8 <__subdf3+0x280>
 20096b4:	10002b1e 	bne	r2,zero,2009764 <__subdf3+0x71c>
 20096b8:	2984b03a 	or	r2,r5,r6
 20096bc:	10008026 	beq	r2,zero,20098c0 <__subdf3+0x878>
 20096c0:	2807883a 	mov	r3,r5
 20096c4:	3023883a 	mov	r17,r6
 20096c8:	3825883a 	mov	r18,r7
 20096cc:	0401ffc4 	movi	r16,2047
 20096d0:	003e7e06 	br	20090cc <__subdf3+0x84>
 20096d4:	3809883a 	mov	r4,r7
 20096d8:	0011883a 	mov	r8,zero
 20096dc:	0005883a 	mov	r2,zero
 20096e0:	003ee306 	br	2009270 <__subdf3+0x228>
 20096e4:	1c62b03a 	or	r17,r3,r17
 20096e8:	8822c03a 	cmpne	r17,r17,zero
 20096ec:	0005883a 	mov	r2,zero
 20096f0:	003f8906 	br	2009518 <__subdf3+0x4d0>
 20096f4:	3809883a 	mov	r4,r7
 20096f8:	4821883a 	mov	r16,r9
 20096fc:	0011883a 	mov	r8,zero
 2009700:	0005883a 	mov	r2,zero
 2009704:	003eda06 	br	2009270 <__subdf3+0x228>
 2009708:	0101ffc4 	movi	r4,2047
 200970c:	49003b26 	beq	r9,r4,20097fc <__subdf3+0x7b4>
 2009710:	0085c83a 	sub	r2,zero,r2
 2009714:	18c02034 	orhi	r3,r3,128
 2009718:	01000e04 	movi	r4,56
 200971c:	20806e16 	blt	r4,r2,20098d8 <__subdf3+0x890>
 2009720:	010007c4 	movi	r4,31
 2009724:	20807716 	blt	r4,r2,2009904 <__subdf3+0x8bc>
 2009728:	01000804 	movi	r4,32
 200972c:	2089c83a 	sub	r4,r4,r2
 2009730:	1914983a 	sll	r10,r3,r4
 2009734:	8890d83a 	srl	r8,r17,r2
 2009738:	8908983a 	sll	r4,r17,r4
 200973c:	1884d83a 	srl	r2,r3,r2
 2009740:	5222b03a 	or	r17,r10,r8
 2009744:	2006c03a 	cmpne	r3,r4,zero
 2009748:	88e2b03a 	or	r17,r17,r3
 200974c:	89a3883a 	add	r17,r17,r6
 2009750:	1145883a 	add	r2,r2,r5
 2009754:	898d803a 	cmpltu	r6,r17,r6
 2009758:	3087883a 	add	r3,r6,r2
 200975c:	4821883a 	mov	r16,r9
 2009760:	003ed906 	br	20092c8 <__subdf3+0x280>
 2009764:	2984b03a 	or	r2,r5,r6
 2009768:	10004226 	beq	r2,zero,2009874 <__subdf3+0x82c>
 200976c:	1808d0fa 	srli	r4,r3,3
 2009770:	8822d0fa 	srli	r17,r17,3
 2009774:	1806977a 	slli	r3,r3,29
 2009778:	2080022c 	andhi	r2,r4,8
 200977c:	1c62b03a 	or	r17,r3,r17
 2009780:	10000826 	beq	r2,zero,20097a4 <__subdf3+0x75c>
 2009784:	2812d0fa 	srli	r9,r5,3
 2009788:	4880022c 	andhi	r2,r9,8
 200978c:	1000051e 	bne	r2,zero,20097a4 <__subdf3+0x75c>
 2009790:	300cd0fa 	srli	r6,r6,3
 2009794:	2804977a 	slli	r2,r5,29
 2009798:	4809883a 	mov	r4,r9
 200979c:	3825883a 	mov	r18,r7
 20097a0:	11a2b03a 	or	r17,r2,r6
 20097a4:	8806d77a 	srli	r3,r17,29
 20097a8:	200890fa 	slli	r4,r4,3
 20097ac:	882290fa 	slli	r17,r17,3
 20097b0:	0401ffc4 	movi	r16,2047
 20097b4:	1906b03a 	or	r3,r3,r4
 20097b8:	003e4406 	br	20090cc <__subdf3+0x84>
 20097bc:	2984b03a 	or	r2,r5,r6
 20097c0:	103e4226 	beq	r2,zero,20090cc <__subdf3+0x84>
 20097c4:	8989c83a 	sub	r4,r17,r6
 20097c8:	8911803a 	cmpltu	r8,r17,r4
 20097cc:	1945c83a 	sub	r2,r3,r5
 20097d0:	1205c83a 	sub	r2,r2,r8
 20097d4:	1200202c 	andhi	r8,r2,128
 20097d8:	403e9a26 	beq	r8,zero,2009244 <__subdf3+0x1fc>
 20097dc:	3463c83a 	sub	r17,r6,r17
 20097e0:	28c5c83a 	sub	r2,r5,r3
 20097e4:	344d803a 	cmpltu	r6,r6,r17
 20097e8:	1187c83a 	sub	r3,r2,r6
 20097ec:	3825883a 	mov	r18,r7
 20097f0:	003e3606 	br	20090cc <__subdf3+0x84>
 20097f4:	0101ffc4 	movi	r4,2047
 20097f8:	493fc71e 	bne	r9,r4,2009718 <__subdf3+0x6d0>
 20097fc:	2807883a 	mov	r3,r5
 2009800:	3023883a 	mov	r17,r6
 2009804:	4821883a 	mov	r16,r9
 2009808:	003e3006 	br	20090cc <__subdf3+0x84>
 200980c:	10003626 	beq	r2,zero,20098e8 <__subdf3+0x8a0>
 2009810:	2984b03a 	or	r2,r5,r6
 2009814:	10001726 	beq	r2,zero,2009874 <__subdf3+0x82c>
 2009818:	1808d0fa 	srli	r4,r3,3
 200981c:	8822d0fa 	srli	r17,r17,3
 2009820:	1806977a 	slli	r3,r3,29
 2009824:	2080022c 	andhi	r2,r4,8
 2009828:	1c62b03a 	or	r17,r3,r17
 200982c:	10000726 	beq	r2,zero,200984c <__subdf3+0x804>
 2009830:	2812d0fa 	srli	r9,r5,3
 2009834:	4880022c 	andhi	r2,r9,8
 2009838:	1000041e 	bne	r2,zero,200984c <__subdf3+0x804>
 200983c:	300cd0fa 	srli	r6,r6,3
 2009840:	2804977a 	slli	r2,r5,29
 2009844:	4809883a 	mov	r4,r9
 2009848:	11a2b03a 	or	r17,r2,r6
 200984c:	8806d77a 	srli	r3,r17,29
 2009850:	200890fa 	slli	r4,r4,3
 2009854:	882290fa 	slli	r17,r17,3
 2009858:	3825883a 	mov	r18,r7
 200985c:	1906b03a 	or	r3,r3,r4
 2009860:	0401ffc4 	movi	r16,2047
 2009864:	003e1906 	br	20090cc <__subdf3+0x84>
 2009868:	000b883a 	mov	r5,zero
 200986c:	0005883a 	mov	r2,zero
 2009870:	003e2e06 	br	200912c <__subdf3+0xe4>
 2009874:	0401ffc4 	movi	r16,2047
 2009878:	003e1406 	br	20090cc <__subdf3+0x84>
 200987c:	0005883a 	mov	r2,zero
 2009880:	003f7506 	br	2009658 <__subdf3+0x610>
 2009884:	0005883a 	mov	r2,zero
 2009888:	0009883a 	mov	r4,zero
 200988c:	003e7806 	br	2009270 <__subdf3+0x228>
 2009890:	123ff804 	addi	r8,r2,-32
 2009894:	01000804 	movi	r4,32
 2009898:	1a10d83a 	srl	r8,r3,r8
 200989c:	11002526 	beq	r2,r4,2009934 <__subdf3+0x8ec>
 20098a0:	01001004 	movi	r4,64
 20098a4:	2085c83a 	sub	r2,r4,r2
 20098a8:	1884983a 	sll	r2,r3,r2
 20098ac:	1444b03a 	or	r2,r2,r17
 20098b0:	1004c03a 	cmpne	r2,r2,zero
 20098b4:	40a2b03a 	or	r17,r8,r2
 20098b8:	0005883a 	mov	r2,zero
 20098bc:	003f1606 	br	2009518 <__subdf3+0x4d0>
 20098c0:	02000434 	movhi	r8,16
 20098c4:	0009883a 	mov	r4,zero
 20098c8:	423fffc4 	addi	r8,r8,-1
 20098cc:	00bfffc4 	movi	r2,-1
 20098d0:	0401ffc4 	movi	r16,2047
 20098d4:	003e6606 	br	2009270 <__subdf3+0x228>
 20098d8:	1c62b03a 	or	r17,r3,r17
 20098dc:	8822c03a 	cmpne	r17,r17,zero
 20098e0:	0005883a 	mov	r2,zero
 20098e4:	003f9906 	br	200974c <__subdf3+0x704>
 20098e8:	2807883a 	mov	r3,r5
 20098ec:	3023883a 	mov	r17,r6
 20098f0:	0401ffc4 	movi	r16,2047
 20098f4:	003df506 	br	20090cc <__subdf3+0x84>
 20098f8:	2807883a 	mov	r3,r5
 20098fc:	3023883a 	mov	r17,r6
 2009900:	003df206 	br	20090cc <__subdf3+0x84>
 2009904:	123ff804 	addi	r8,r2,-32
 2009908:	01000804 	movi	r4,32
 200990c:	1a10d83a 	srl	r8,r3,r8
 2009910:	11000a26 	beq	r2,r4,200993c <__subdf3+0x8f4>
 2009914:	01001004 	movi	r4,64
 2009918:	2085c83a 	sub	r2,r4,r2
 200991c:	1884983a 	sll	r2,r3,r2
 2009920:	1444b03a 	or	r2,r2,r17
 2009924:	1004c03a 	cmpne	r2,r2,zero
 2009928:	40a2b03a 	or	r17,r8,r2
 200992c:	0005883a 	mov	r2,zero
 2009930:	003f8606 	br	200974c <__subdf3+0x704>
 2009934:	0005883a 	mov	r2,zero
 2009938:	003fdc06 	br	20098ac <__subdf3+0x864>
 200993c:	0005883a 	mov	r2,zero
 2009940:	003ff706 	br	2009920 <__subdf3+0x8d8>

02009944 <__extendsfdf2>:
 2009944:	200ad5fa 	srli	r5,r4,23
 2009948:	defffd04 	addi	sp,sp,-12
 200994c:	dc400115 	stw	r17,4(sp)
 2009950:	29403fcc 	andi	r5,r5,255
 2009954:	29800044 	addi	r6,r5,1
 2009958:	04402034 	movhi	r17,128
 200995c:	dc000015 	stw	r16,0(sp)
 2009960:	8c7fffc4 	addi	r17,r17,-1
 2009964:	dfc00215 	stw	ra,8(sp)
 2009968:	31803fcc 	andi	r6,r6,255
 200996c:	00800044 	movi	r2,1
 2009970:	8922703a 	and	r17,r17,r4
 2009974:	2020d7fa 	srli	r16,r4,31
 2009978:	1180110e 	bge	r2,r6,20099c0 <__extendsfdf2+0x7c>
 200997c:	880cd0fa 	srli	r6,r17,3
 2009980:	8822977a 	slli	r17,r17,29
 2009984:	2940e004 	addi	r5,r5,896
 2009988:	2941ffcc 	andi	r5,r5,2047
 200998c:	2804953a 	slli	r2,r5,20
 2009990:	01400434 	movhi	r5,16
 2009994:	800697fa 	slli	r3,r16,31
 2009998:	297fffc4 	addi	r5,r5,-1
 200999c:	314a703a 	and	r5,r6,r5
 20099a0:	288ab03a 	or	r5,r5,r2
 20099a4:	28c6b03a 	or	r3,r5,r3
 20099a8:	8805883a 	mov	r2,r17
 20099ac:	dfc00217 	ldw	ra,8(sp)
 20099b0:	dc400117 	ldw	r17,4(sp)
 20099b4:	dc000017 	ldw	r16,0(sp)
 20099b8:	dec00304 	addi	sp,sp,12
 20099bc:	f800283a 	ret
 20099c0:	2800111e 	bne	r5,zero,2009a08 <__extendsfdf2+0xc4>
 20099c4:	88001c26 	beq	r17,zero,2009a38 <__extendsfdf2+0xf4>
 20099c8:	8809883a 	mov	r4,r17
 20099cc:	2009bfc0 	call	2009bfc <__clzsi2>
 20099d0:	00c00284 	movi	r3,10
 20099d4:	18801b16 	blt	r3,r2,2009a44 <__extendsfdf2+0x100>
 20099d8:	018002c4 	movi	r6,11
 20099dc:	308dc83a 	sub	r6,r6,r2
 20099e0:	11000544 	addi	r4,r2,21
 20099e4:	8986d83a 	srl	r3,r17,r6
 20099e8:	8922983a 	sll	r17,r17,r4
 20099ec:	0180e244 	movi	r6,905
 20099f0:	01400434 	movhi	r5,16
 20099f4:	3085c83a 	sub	r2,r6,r2
 20099f8:	297fffc4 	addi	r5,r5,-1
 20099fc:	194c703a 	and	r6,r3,r5
 2009a00:	1141ffcc 	andi	r5,r2,2047
 2009a04:	003fe006 	br	2009988 <__extendsfdf2+0x44>
 2009a08:	88000826 	beq	r17,zero,2009a2c <__extendsfdf2+0xe8>
 2009a0c:	880cd0fa 	srli	r6,r17,3
 2009a10:	00800434 	movhi	r2,16
 2009a14:	10bfffc4 	addi	r2,r2,-1
 2009a18:	31800234 	orhi	r6,r6,8
 2009a1c:	8822977a 	slli	r17,r17,29
 2009a20:	308c703a 	and	r6,r6,r2
 2009a24:	0141ffc4 	movi	r5,2047
 2009a28:	003fd706 	br	2009988 <__extendsfdf2+0x44>
 2009a2c:	0141ffc4 	movi	r5,2047
 2009a30:	000d883a 	mov	r6,zero
 2009a34:	003fd406 	br	2009988 <__extendsfdf2+0x44>
 2009a38:	000b883a 	mov	r5,zero
 2009a3c:	000d883a 	mov	r6,zero
 2009a40:	003fd106 	br	2009988 <__extendsfdf2+0x44>
 2009a44:	11bffd44 	addi	r6,r2,-11
 2009a48:	8986983a 	sll	r3,r17,r6
 2009a4c:	0023883a 	mov	r17,zero
 2009a50:	003fe606 	br	20099ec <__extendsfdf2+0xa8>

02009a54 <__truncdfsf2>:
 2009a54:	2810d53a 	srli	r8,r5,20
 2009a58:	01c00434 	movhi	r7,16
 2009a5c:	39ffffc4 	addi	r7,r7,-1
 2009a60:	29ce703a 	and	r7,r5,r7
 2009a64:	4201ffcc 	andi	r8,r8,2047
 2009a68:	380e90fa 	slli	r7,r7,3
 2009a6c:	200cd77a 	srli	r6,r4,29
 2009a70:	42400044 	addi	r9,r8,1
 2009a74:	4a41ffcc 	andi	r9,r9,2047
 2009a78:	00c00044 	movi	r3,1
 2009a7c:	280ad7fa 	srli	r5,r5,31
 2009a80:	31ceb03a 	or	r7,r6,r7
 2009a84:	200490fa 	slli	r2,r4,3
 2009a88:	1a40230e 	bge	r3,r9,2009b18 <__truncdfsf2+0xc4>
 2009a8c:	40ff2004 	addi	r3,r8,-896
 2009a90:	01803f84 	movi	r6,254
 2009a94:	30c01516 	blt	r6,r3,2009aec <__truncdfsf2+0x98>
 2009a98:	00c0380e 	bge	zero,r3,2009b7c <__truncdfsf2+0x128>
 2009a9c:	200c91ba 	slli	r6,r4,6
 2009aa0:	380e90fa 	slli	r7,r7,3
 2009aa4:	1004d77a 	srli	r2,r2,29
 2009aa8:	300cc03a 	cmpne	r6,r6,zero
 2009aac:	31ccb03a 	or	r6,r6,r7
 2009ab0:	308cb03a 	or	r6,r6,r2
 2009ab4:	308001cc 	andi	r2,r6,7
 2009ab8:	10000426 	beq	r2,zero,2009acc <__truncdfsf2+0x78>
 2009abc:	308003cc 	andi	r2,r6,15
 2009ac0:	01000104 	movi	r4,4
 2009ac4:	11000126 	beq	r2,r4,2009acc <__truncdfsf2+0x78>
 2009ac8:	31800104 	addi	r6,r6,4
 2009acc:	3081002c 	andhi	r2,r6,1024
 2009ad0:	10001626 	beq	r2,zero,2009b2c <__truncdfsf2+0xd8>
 2009ad4:	18c00044 	addi	r3,r3,1
 2009ad8:	00803fc4 	movi	r2,255
 2009adc:	18800326 	beq	r3,r2,2009aec <__truncdfsf2+0x98>
 2009ae0:	300c91ba 	slli	r6,r6,6
 2009ae4:	300cd27a 	srli	r6,r6,9
 2009ae8:	00000206 	br	2009af4 <__truncdfsf2+0xa0>
 2009aec:	00ffffc4 	movi	r3,-1
 2009af0:	000d883a 	mov	r6,zero
 2009af4:	18c03fcc 	andi	r3,r3,255
 2009af8:	180895fa 	slli	r4,r3,23
 2009afc:	00c02034 	movhi	r3,128
 2009b00:	280a97fa 	slli	r5,r5,31
 2009b04:	18ffffc4 	addi	r3,r3,-1
 2009b08:	30c6703a 	and	r3,r6,r3
 2009b0c:	1906b03a 	or	r3,r3,r4
 2009b10:	1944b03a 	or	r2,r3,r5
 2009b14:	f800283a 	ret
 2009b18:	40000b1e 	bne	r8,zero,2009b48 <__truncdfsf2+0xf4>
 2009b1c:	388cb03a 	or	r6,r7,r2
 2009b20:	0007883a 	mov	r3,zero
 2009b24:	30000426 	beq	r6,zero,2009b38 <__truncdfsf2+0xe4>
 2009b28:	01800144 	movi	r6,5
 2009b2c:	00803fc4 	movi	r2,255
 2009b30:	300cd0fa 	srli	r6,r6,3
 2009b34:	18800a26 	beq	r3,r2,2009b60 <__truncdfsf2+0x10c>
 2009b38:	00802034 	movhi	r2,128
 2009b3c:	10bfffc4 	addi	r2,r2,-1
 2009b40:	308c703a 	and	r6,r6,r2
 2009b44:	003feb06 	br	2009af4 <__truncdfsf2+0xa0>
 2009b48:	3888b03a 	or	r4,r7,r2
 2009b4c:	203fe726 	beq	r4,zero,2009aec <__truncdfsf2+0x98>
 2009b50:	380c90fa 	slli	r6,r7,3
 2009b54:	00c03fc4 	movi	r3,255
 2009b58:	31808034 	orhi	r6,r6,512
 2009b5c:	003fd506 	br	2009ab4 <__truncdfsf2+0x60>
 2009b60:	303fe226 	beq	r6,zero,2009aec <__truncdfsf2+0x98>
 2009b64:	00802034 	movhi	r2,128
 2009b68:	31801034 	orhi	r6,r6,64
 2009b6c:	10bfffc4 	addi	r2,r2,-1
 2009b70:	00ffffc4 	movi	r3,-1
 2009b74:	308c703a 	and	r6,r6,r2
 2009b78:	003fde06 	br	2009af4 <__truncdfsf2+0xa0>
 2009b7c:	013ffa44 	movi	r4,-23
 2009b80:	19000e16 	blt	r3,r4,2009bbc <__truncdfsf2+0x168>
 2009b84:	01000784 	movi	r4,30
 2009b88:	20c9c83a 	sub	r4,r4,r3
 2009b8c:	018007c4 	movi	r6,31
 2009b90:	39c02034 	orhi	r7,r7,128
 2009b94:	31000b16 	blt	r6,r4,2009bc4 <__truncdfsf2+0x170>
 2009b98:	423f2084 	addi	r8,r8,-894
 2009b9c:	120c983a 	sll	r6,r2,r8
 2009ba0:	3a0e983a 	sll	r7,r7,r8
 2009ba4:	1104d83a 	srl	r2,r2,r4
 2009ba8:	300cc03a 	cmpne	r6,r6,zero
 2009bac:	31ceb03a 	or	r7,r6,r7
 2009bb0:	388cb03a 	or	r6,r7,r2
 2009bb4:	0007883a 	mov	r3,zero
 2009bb8:	003fbe06 	br	2009ab4 <__truncdfsf2+0x60>
 2009bbc:	0007883a 	mov	r3,zero
 2009bc0:	003fd906 	br	2009b28 <__truncdfsf2+0xd4>
 2009bc4:	01bfff84 	movi	r6,-2
 2009bc8:	30cdc83a 	sub	r6,r6,r3
 2009bcc:	00c00804 	movi	r3,32
 2009bd0:	398cd83a 	srl	r6,r7,r6
 2009bd4:	20c00726 	beq	r4,r3,2009bf4 <__truncdfsf2+0x1a0>
 2009bd8:	423f2884 	addi	r8,r8,-862
 2009bdc:	3a0e983a 	sll	r7,r7,r8
 2009be0:	3884b03a 	or	r2,r7,r2
 2009be4:	1004c03a 	cmpne	r2,r2,zero
 2009be8:	118cb03a 	or	r6,r2,r6
 2009bec:	0007883a 	mov	r3,zero
 2009bf0:	003fb006 	br	2009ab4 <__truncdfsf2+0x60>
 2009bf4:	000f883a 	mov	r7,zero
 2009bf8:	003ff906 	br	2009be0 <__truncdfsf2+0x18c>

02009bfc <__clzsi2>:
 2009bfc:	00bfffd4 	movui	r2,65535
 2009c00:	11000536 	bltu	r2,r4,2009c18 <__clzsi2+0x1c>
 2009c04:	00803fc4 	movi	r2,255
 2009c08:	11000f36 	bltu	r2,r4,2009c48 <__clzsi2+0x4c>
 2009c0c:	00800804 	movi	r2,32
 2009c10:	0007883a 	mov	r3,zero
 2009c14:	00000506 	br	2009c2c <__clzsi2+0x30>
 2009c18:	00804034 	movhi	r2,256
 2009c1c:	10bfffc4 	addi	r2,r2,-1
 2009c20:	11000c2e 	bgeu	r2,r4,2009c54 <__clzsi2+0x58>
 2009c24:	00800204 	movi	r2,8
 2009c28:	00c00604 	movi	r3,24
 2009c2c:	20c8d83a 	srl	r4,r4,r3
 2009c30:	00c080b4 	movhi	r3,514
 2009c34:	18cc0904 	addi	r3,r3,12324
 2009c38:	1909883a 	add	r4,r3,r4
 2009c3c:	20c00003 	ldbu	r3,0(r4)
 2009c40:	10c5c83a 	sub	r2,r2,r3
 2009c44:	f800283a 	ret
 2009c48:	00800604 	movi	r2,24
 2009c4c:	00c00204 	movi	r3,8
 2009c50:	003ff606 	br	2009c2c <__clzsi2+0x30>
 2009c54:	00800404 	movi	r2,16
 2009c58:	1007883a 	mov	r3,r2
 2009c5c:	003ff306 	br	2009c2c <__clzsi2+0x30>

02009c60 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
 2009c60:	deffff04 	addi	sp,sp,-4
 2009c64:	df000015 	stw	fp,0(sp)
 2009c68:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
 2009c6c:	d0a03017 	ldw	r2,-32576(gp)
}
 2009c70:	e037883a 	mov	sp,fp
 2009c74:	df000017 	ldw	fp,0(sp)
 2009c78:	dec00104 	addi	sp,sp,4
 2009c7c:	f800283a 	ret

02009c80 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 2009c80:	defff804 	addi	sp,sp,-32
 2009c84:	df000715 	stw	fp,28(sp)
 2009c88:	df000704 	addi	fp,sp,28
 2009c8c:	e13ffd15 	stw	r4,-12(fp)
 2009c90:	e17ffe15 	stw	r5,-8(fp)
 2009c94:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 2009c98:	e0bffd17 	ldw	r2,-12(fp)
 2009c9c:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 2009ca0:	e0bffe17 	ldw	r2,-8(fp)
 2009ca4:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 2009ca8:	e0bfff17 	ldw	r2,-4(fp)
 2009cac:	10800430 	cmpltui	r2,r2,16
 2009cb0:	10004c1e 	bne	r2,zero,2009de4 <memcpy+0x164>
 2009cb4:	e0fffa17 	ldw	r3,-24(fp)
 2009cb8:	e0bff917 	ldw	r2,-28(fp)
 2009cbc:	1884b03a 	or	r2,r3,r2
 2009cc0:	108000cc 	andi	r2,r2,3
 2009cc4:	1000471e 	bne	r2,zero,2009de4 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 2009cc8:	e0bff917 	ldw	r2,-28(fp)
 2009ccc:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 2009cd0:	e0bffa17 	ldw	r2,-24(fp)
 2009cd4:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2009cd8:	00002306 	br	2009d68 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 2009cdc:	e0bffb17 	ldw	r2,-20(fp)
 2009ce0:	10c00104 	addi	r3,r2,4
 2009ce4:	e0fffb15 	stw	r3,-20(fp)
 2009ce8:	e0fffc17 	ldw	r3,-16(fp)
 2009cec:	19000104 	addi	r4,r3,4
 2009cf0:	e13ffc15 	stw	r4,-16(fp)
 2009cf4:	18c00017 	ldw	r3,0(r3)
 2009cf8:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2009cfc:	e0bffb17 	ldw	r2,-20(fp)
 2009d00:	10c00104 	addi	r3,r2,4
 2009d04:	e0fffb15 	stw	r3,-20(fp)
 2009d08:	e0fffc17 	ldw	r3,-16(fp)
 2009d0c:	19000104 	addi	r4,r3,4
 2009d10:	e13ffc15 	stw	r4,-16(fp)
 2009d14:	18c00017 	ldw	r3,0(r3)
 2009d18:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2009d1c:	e0bffb17 	ldw	r2,-20(fp)
 2009d20:	10c00104 	addi	r3,r2,4
 2009d24:	e0fffb15 	stw	r3,-20(fp)
 2009d28:	e0fffc17 	ldw	r3,-16(fp)
 2009d2c:	19000104 	addi	r4,r3,4
 2009d30:	e13ffc15 	stw	r4,-16(fp)
 2009d34:	18c00017 	ldw	r3,0(r3)
 2009d38:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2009d3c:	e0bffb17 	ldw	r2,-20(fp)
 2009d40:	10c00104 	addi	r3,r2,4
 2009d44:	e0fffb15 	stw	r3,-20(fp)
 2009d48:	e0fffc17 	ldw	r3,-16(fp)
 2009d4c:	19000104 	addi	r4,r3,4
 2009d50:	e13ffc15 	stw	r4,-16(fp)
 2009d54:	18c00017 	ldw	r3,0(r3)
 2009d58:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 2009d5c:	e0bfff17 	ldw	r2,-4(fp)
 2009d60:	10bffc04 	addi	r2,r2,-16
 2009d64:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2009d68:	e0bfff17 	ldw	r2,-4(fp)
 2009d6c:	10800428 	cmpgeui	r2,r2,16
 2009d70:	103fda1e 	bne	r2,zero,2009cdc <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2009d74:	00000b06 	br	2009da4 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 2009d78:	e0bffb17 	ldw	r2,-20(fp)
 2009d7c:	10c00104 	addi	r3,r2,4
 2009d80:	e0fffb15 	stw	r3,-20(fp)
 2009d84:	e0fffc17 	ldw	r3,-16(fp)
 2009d88:	19000104 	addi	r4,r3,4
 2009d8c:	e13ffc15 	stw	r4,-16(fp)
 2009d90:	18c00017 	ldw	r3,0(r3)
 2009d94:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 2009d98:	e0bfff17 	ldw	r2,-4(fp)
 2009d9c:	10bfff04 	addi	r2,r2,-4
 2009da0:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2009da4:	e0bfff17 	ldw	r2,-4(fp)
 2009da8:	10800128 	cmpgeui	r2,r2,4
 2009dac:	103ff21e 	bne	r2,zero,2009d78 <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 2009db0:	e0bffb17 	ldw	r2,-20(fp)
 2009db4:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 2009db8:	e0bffc17 	ldw	r2,-16(fp)
 2009dbc:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 2009dc0:	00000806 	br	2009de4 <memcpy+0x164>
    *dst++ = *src++;
 2009dc4:	e0bff917 	ldw	r2,-28(fp)
 2009dc8:	10c00044 	addi	r3,r2,1
 2009dcc:	e0fff915 	stw	r3,-28(fp)
 2009dd0:	e0fffa17 	ldw	r3,-24(fp)
 2009dd4:	19000044 	addi	r4,r3,1
 2009dd8:	e13ffa15 	stw	r4,-24(fp)
 2009ddc:	18c00003 	ldbu	r3,0(r3)
 2009de0:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 2009de4:	e0bfff17 	ldw	r2,-4(fp)
 2009de8:	10ffffc4 	addi	r3,r2,-1
 2009dec:	e0ffff15 	stw	r3,-4(fp)
 2009df0:	103ff41e 	bne	r2,zero,2009dc4 <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 2009df4:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2009df8:	e037883a 	mov	sp,fp
 2009dfc:	df000017 	ldw	fp,0(sp)
 2009e00:	dec00104 	addi	sp,sp,4
 2009e04:	f800283a 	ret

02009e08 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 2009e08:	defff704 	addi	sp,sp,-36
 2009e0c:	df000815 	stw	fp,32(sp)
 2009e10:	df000804 	addi	fp,sp,32
 2009e14:	e13ffd15 	stw	r4,-12(fp)
 2009e18:	e17ffe15 	stw	r5,-8(fp)
 2009e1c:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 2009e20:	e0bffd17 	ldw	r2,-12(fp)
 2009e24:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 2009e28:	e0bffe17 	ldw	r2,-8(fp)
 2009e2c:	10803fcc 	andi	r2,r2,255
 2009e30:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 2009e34:	00000c06 	br	2009e68 <memset+0x60>
    {
      if (n--)
 2009e38:	e0bfff17 	ldw	r2,-4(fp)
 2009e3c:	10ffffc4 	addi	r3,r2,-1
 2009e40:	e0ffff15 	stw	r3,-4(fp)
 2009e44:	10000626 	beq	r2,zero,2009e60 <memset+0x58>
        *s++ = (char) c;
 2009e48:	e0bff817 	ldw	r2,-32(fp)
 2009e4c:	10c00044 	addi	r3,r2,1
 2009e50:	e0fff815 	stw	r3,-32(fp)
 2009e54:	e0fffe17 	ldw	r3,-8(fp)
 2009e58:	10c00005 	stb	r3,0(r2)
 2009e5c:	00000206 	br	2009e68 <memset+0x60>
      else
        return m;
 2009e60:	e0bffd17 	ldw	r2,-12(fp)
 2009e64:	00005506 	br	2009fbc <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 2009e68:	e0bff817 	ldw	r2,-32(fp)
 2009e6c:	108000cc 	andi	r2,r2,3
 2009e70:	103ff11e 	bne	r2,zero,2009e38 <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 2009e74:	e0bfff17 	ldw	r2,-4(fp)
 2009e78:	10800130 	cmpltui	r2,r2,4
 2009e7c:	10004a1e 	bne	r2,zero,2009fa8 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 2009e80:	e0bff817 	ldw	r2,-32(fp)
 2009e84:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 2009e88:	e0bffc17 	ldw	r2,-16(fp)
 2009e8c:	1006923a 	slli	r3,r2,8
 2009e90:	e0bffc17 	ldw	r2,-16(fp)
 2009e94:	1884b03a 	or	r2,r3,r2
 2009e98:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 2009e9c:	e0bffa17 	ldw	r2,-24(fp)
 2009ea0:	1004943a 	slli	r2,r2,16
 2009ea4:	e0fffa17 	ldw	r3,-24(fp)
 2009ea8:	1884b03a 	or	r2,r3,r2
 2009eac:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2009eb0:	00800804 	movi	r2,32
 2009eb4:	e0bff915 	stw	r2,-28(fp)
 2009eb8:	00000906 	br	2009ee0 <memset+0xd8>
        buffer = (buffer << i) | buffer;
 2009ebc:	e0fffa17 	ldw	r3,-24(fp)
 2009ec0:	e0bff917 	ldw	r2,-28(fp)
 2009ec4:	1884983a 	sll	r2,r3,r2
 2009ec8:	e0fffa17 	ldw	r3,-24(fp)
 2009ecc:	1884b03a 	or	r2,r3,r2
 2009ed0:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2009ed4:	e0bff917 	ldw	r2,-28(fp)
 2009ed8:	1085883a 	add	r2,r2,r2
 2009edc:	e0bff915 	stw	r2,-28(fp)
 2009ee0:	e0bff917 	ldw	r2,-28(fp)
 2009ee4:	10800830 	cmpltui	r2,r2,32
 2009ee8:	103ff41e 	bne	r2,zero,2009ebc <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2009eec:	00001706 	br	2009f4c <memset+0x144>
        {
          *aligned_addr++ = buffer;
 2009ef0:	e0bffb17 	ldw	r2,-20(fp)
 2009ef4:	10c00104 	addi	r3,r2,4
 2009ef8:	e0fffb15 	stw	r3,-20(fp)
 2009efc:	e0fffa17 	ldw	r3,-24(fp)
 2009f00:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2009f04:	e0bffb17 	ldw	r2,-20(fp)
 2009f08:	10c00104 	addi	r3,r2,4
 2009f0c:	e0fffb15 	stw	r3,-20(fp)
 2009f10:	e0fffa17 	ldw	r3,-24(fp)
 2009f14:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2009f18:	e0bffb17 	ldw	r2,-20(fp)
 2009f1c:	10c00104 	addi	r3,r2,4
 2009f20:	e0fffb15 	stw	r3,-20(fp)
 2009f24:	e0fffa17 	ldw	r3,-24(fp)
 2009f28:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2009f2c:	e0bffb17 	ldw	r2,-20(fp)
 2009f30:	10c00104 	addi	r3,r2,4
 2009f34:	e0fffb15 	stw	r3,-20(fp)
 2009f38:	e0fffa17 	ldw	r3,-24(fp)
 2009f3c:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 2009f40:	e0bfff17 	ldw	r2,-4(fp)
 2009f44:	10bffc04 	addi	r2,r2,-16
 2009f48:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2009f4c:	e0bfff17 	ldw	r2,-4(fp)
 2009f50:	10800428 	cmpgeui	r2,r2,16
 2009f54:	103fe61e 	bne	r2,zero,2009ef0 <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2009f58:	00000806 	br	2009f7c <memset+0x174>
        {
          *aligned_addr++ = buffer;
 2009f5c:	e0bffb17 	ldw	r2,-20(fp)
 2009f60:	10c00104 	addi	r3,r2,4
 2009f64:	e0fffb15 	stw	r3,-20(fp)
 2009f68:	e0fffa17 	ldw	r3,-24(fp)
 2009f6c:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 2009f70:	e0bfff17 	ldw	r2,-4(fp)
 2009f74:	10bfff04 	addi	r2,r2,-4
 2009f78:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2009f7c:	e0bfff17 	ldw	r2,-4(fp)
 2009f80:	10800128 	cmpgeui	r2,r2,4
 2009f84:	103ff51e 	bne	r2,zero,2009f5c <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 2009f88:	e0bffb17 	ldw	r2,-20(fp)
 2009f8c:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2009f90:	00000506 	br	2009fa8 <memset+0x1a0>
    *s++ = (char) c;
 2009f94:	e0bff817 	ldw	r2,-32(fp)
 2009f98:	10c00044 	addi	r3,r2,1
 2009f9c:	e0fff815 	stw	r3,-32(fp)
 2009fa0:	e0fffe17 	ldw	r3,-8(fp)
 2009fa4:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2009fa8:	e0bfff17 	ldw	r2,-4(fp)
 2009fac:	10ffffc4 	addi	r3,r2,-1
 2009fb0:	e0ffff15 	stw	r3,-4(fp)
 2009fb4:	103ff71e 	bne	r2,zero,2009f94 <memset+0x18c>
    *s++ = (char) c;

  return m;
 2009fb8:	e0bffd17 	ldw	r2,-12(fp)
}
 2009fbc:	e037883a 	mov	sp,fp
 2009fc0:	df000017 	ldw	fp,0(sp)
 2009fc4:	dec00104 	addi	sp,sp,4
 2009fc8:	f800283a 	ret

02009fcc <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 2009fcc:	defff804 	addi	sp,sp,-32
 2009fd0:	dfc00515 	stw	ra,20(sp)
 2009fd4:	df000415 	stw	fp,16(sp)
 2009fd8:	df000404 	addi	fp,sp,16
 2009fdc:	e13ffe15 	stw	r4,-8(fp)
 2009fe0:	e17fff15 	stw	r5,-4(fp)
 2009fe4:	e1800215 	stw	r6,8(fp)
 2009fe8:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 2009fec:	e0800204 	addi	r2,fp,8
 2009ff0:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2009ff4:	e0bffe17 	ldw	r2,-8(fp)
 2009ff8:	10800217 	ldw	r2,8(r2)
 2009ffc:	e0fffd17 	ldw	r3,-12(fp)
 200a000:	180f883a 	mov	r7,r3
 200a004:	e1bfff17 	ldw	r6,-4(fp)
 200a008:	100b883a 	mov	r5,r2
 200a00c:	e13ffe17 	ldw	r4,-8(fp)
 200a010:	200a41c0 	call	200a41c <___vfprintf_internal_r>
 200a014:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 200a018:	e0bffc17 	ldw	r2,-16(fp)
}
 200a01c:	e037883a 	mov	sp,fp
 200a020:	dfc00117 	ldw	ra,4(sp)
 200a024:	df000017 	ldw	fp,0(sp)
 200a028:	dec00404 	addi	sp,sp,16
 200a02c:	f800283a 	ret

0200a030 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 200a030:	defff704 	addi	sp,sp,-36
 200a034:	dfc00515 	stw	ra,20(sp)
 200a038:	df000415 	stw	fp,16(sp)
 200a03c:	df000404 	addi	fp,sp,16
 200a040:	e13fff15 	stw	r4,-4(fp)
 200a044:	e1400215 	stw	r5,8(fp)
 200a048:	e1800315 	stw	r6,12(fp)
 200a04c:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 200a050:	d0a03017 	ldw	r2,-32576(gp)
 200a054:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 200a058:	e0800204 	addi	r2,fp,8
 200a05c:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 200a060:	d0a03017 	ldw	r2,-32576(gp)
 200a064:	10800217 	ldw	r2,8(r2)
 200a068:	e0fffe17 	ldw	r3,-8(fp)
 200a06c:	180d883a 	mov	r6,r3
 200a070:	e17fff17 	ldw	r5,-4(fp)
 200a074:	1009883a 	mov	r4,r2
 200a078:	200a3cc0 	call	200a3cc <__vfprintf_internal>
 200a07c:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 200a080:	e0bffd17 	ldw	r2,-12(fp)
}
 200a084:	e037883a 	mov	sp,fp
 200a088:	dfc00117 	ldw	ra,4(sp)
 200a08c:	df000017 	ldw	fp,0(sp)
 200a090:	dec00504 	addi	sp,sp,20
 200a094:	f800283a 	ret

0200a098 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 200a098:	defff104 	addi	sp,sp,-60
 200a09c:	dfc00e15 	stw	ra,56(sp)
 200a0a0:	df000d15 	stw	fp,52(sp)
 200a0a4:	df000d04 	addi	fp,sp,52
 200a0a8:	e13ffe15 	stw	r4,-8(fp)
 200a0ac:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 200a0b0:	e13fff17 	ldw	r4,-4(fp)
 200a0b4:	200a1e80 	call	200a1e8 <strlen>
 200a0b8:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 200a0bc:	e0bfff17 	ldw	r2,-4(fp)
 200a0c0:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 200a0c4:	e0bff317 	ldw	r2,-52(fp)
 200a0c8:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 200a0cc:	008080b4 	movhi	r2,514
 200a0d0:	108c4a04 	addi	r2,r2,12584
 200a0d4:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 200a0d8:	00800044 	movi	r2,1
 200a0dc:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 200a0e0:	e0bff317 	ldw	r2,-52(fp)
 200a0e4:	10800044 	addi	r2,r2,1
 200a0e8:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 200a0ec:	e0bffa04 	addi	r2,fp,-24
 200a0f0:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 200a0f4:	00800084 	movi	r2,2
 200a0f8:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 200a0fc:	e0bffe17 	ldw	r2,-8(fp)
 200a100:	e0bff415 	stw	r2,-48(fp)
 200a104:	e0bff417 	ldw	r2,-48(fp)
 200a108:	10000526 	beq	r2,zero,200a120 <_puts_r+0x88>
 200a10c:	e0bff417 	ldw	r2,-48(fp)
 200a110:	10800e17 	ldw	r2,56(r2)
 200a114:	1000021e 	bne	r2,zero,200a120 <_puts_r+0x88>
 200a118:	e13ff417 	ldw	r4,-48(fp)
 200a11c:	200f0880 	call	200f088 <__sinit>
  fp = _stdout_r (ptr);
 200a120:	e0bffe17 	ldw	r2,-8(fp)
 200a124:	10800217 	ldw	r2,8(r2)
 200a128:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 200a12c:	e0bff517 	ldw	r2,-44(fp)
 200a130:	1080030b 	ldhu	r2,12(r2)
 200a134:	10bfffcc 	andi	r2,r2,65535
 200a138:	1088000c 	andi	r2,r2,8192
 200a13c:	10000c1e 	bne	r2,zero,200a170 <_puts_r+0xd8>
 200a140:	e0bff517 	ldw	r2,-44(fp)
 200a144:	1080030b 	ldhu	r2,12(r2)
 200a148:	10880014 	ori	r2,r2,8192
 200a14c:	1007883a 	mov	r3,r2
 200a150:	e0bff517 	ldw	r2,-44(fp)
 200a154:	10c0030d 	sth	r3,12(r2)
 200a158:	e0bff517 	ldw	r2,-44(fp)
 200a15c:	10c01917 	ldw	r3,100(r2)
 200a160:	00b7ffc4 	movi	r2,-8193
 200a164:	1886703a 	and	r3,r3,r2
 200a168:	e0bff517 	ldw	r2,-44(fp)
 200a16c:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 200a170:	e0bff704 	addi	r2,fp,-36
 200a174:	100d883a 	mov	r6,r2
 200a178:	e17ff517 	ldw	r5,-44(fp)
 200a17c:	e13ffe17 	ldw	r4,-8(fp)
 200a180:	200f9d40 	call	200f9d4 <__sfvwrite_r>
 200a184:	10000226 	beq	r2,zero,200a190 <_puts_r+0xf8>
 200a188:	00bfffc4 	movi	r2,-1
 200a18c:	00000106 	br	200a194 <_puts_r+0xfc>
 200a190:	00800284 	movi	r2,10
 200a194:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 200a198:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 200a19c:	e037883a 	mov	sp,fp
 200a1a0:	dfc00117 	ldw	ra,4(sp)
 200a1a4:	df000017 	ldw	fp,0(sp)
 200a1a8:	dec00204 	addi	sp,sp,8
 200a1ac:	f800283a 	ret

0200a1b0 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 200a1b0:	defffd04 	addi	sp,sp,-12
 200a1b4:	dfc00215 	stw	ra,8(sp)
 200a1b8:	df000115 	stw	fp,4(sp)
 200a1bc:	df000104 	addi	fp,sp,4
 200a1c0:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 200a1c4:	d0a03017 	ldw	r2,-32576(gp)
 200a1c8:	e17fff17 	ldw	r5,-4(fp)
 200a1cc:	1009883a 	mov	r4,r2
 200a1d0:	200a0980 	call	200a098 <_puts_r>
}
 200a1d4:	e037883a 	mov	sp,fp
 200a1d8:	dfc00117 	ldw	ra,4(sp)
 200a1dc:	df000017 	ldw	fp,0(sp)
 200a1e0:	dec00204 	addi	sp,sp,8
 200a1e4:	f800283a 	ret

0200a1e8 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 200a1e8:	defffc04 	addi	sp,sp,-16
 200a1ec:	df000315 	stw	fp,12(sp)
 200a1f0:	df000304 	addi	fp,sp,12
 200a1f4:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 200a1f8:	e0bfff17 	ldw	r2,-4(fp)
 200a1fc:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 200a200:	00000d06 	br	200a238 <strlen+0x50>
    {
      if (!*str)
 200a204:	e0bfff17 	ldw	r2,-4(fp)
 200a208:	10800003 	ldbu	r2,0(r2)
 200a20c:	10803fcc 	andi	r2,r2,255
 200a210:	1080201c 	xori	r2,r2,128
 200a214:	10bfe004 	addi	r2,r2,-128
 200a218:	1000041e 	bne	r2,zero,200a22c <strlen+0x44>
	return str - start;
 200a21c:	e0ffff17 	ldw	r3,-4(fp)
 200a220:	e0bffe17 	ldw	r2,-8(fp)
 200a224:	1885c83a 	sub	r2,r3,r2
 200a228:	00002806 	br	200a2cc <strlen+0xe4>
      str++;
 200a22c:	e0bfff17 	ldw	r2,-4(fp)
 200a230:	10800044 	addi	r2,r2,1
 200a234:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 200a238:	e0bfff17 	ldw	r2,-4(fp)
 200a23c:	108000cc 	andi	r2,r2,3
 200a240:	103ff01e 	bne	r2,zero,200a204 <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 200a244:	e0bfff17 	ldw	r2,-4(fp)
 200a248:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 200a24c:	00000306 	br	200a25c <strlen+0x74>
    aligned_addr++;
 200a250:	e0bffd17 	ldw	r2,-12(fp)
 200a254:	10800104 	addi	r2,r2,4
 200a258:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 200a25c:	e0bffd17 	ldw	r2,-12(fp)
 200a260:	10c00017 	ldw	r3,0(r2)
 200a264:	00bfbff4 	movhi	r2,65279
 200a268:	10bfbfc4 	addi	r2,r2,-257
 200a26c:	1887883a 	add	r3,r3,r2
 200a270:	e0bffd17 	ldw	r2,-12(fp)
 200a274:	10800017 	ldw	r2,0(r2)
 200a278:	0084303a 	nor	r2,zero,r2
 200a27c:	1886703a 	and	r3,r3,r2
 200a280:	00a02074 	movhi	r2,32897
 200a284:	10a02004 	addi	r2,r2,-32640
 200a288:	1884703a 	and	r2,r3,r2
 200a28c:	103ff026 	beq	r2,zero,200a250 <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 200a290:	e0bffd17 	ldw	r2,-12(fp)
 200a294:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 200a298:	00000306 	br	200a2a8 <strlen+0xc0>
    str++;
 200a29c:	e0bfff17 	ldw	r2,-4(fp)
 200a2a0:	10800044 	addi	r2,r2,1
 200a2a4:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 200a2a8:	e0bfff17 	ldw	r2,-4(fp)
 200a2ac:	10800003 	ldbu	r2,0(r2)
 200a2b0:	10803fcc 	andi	r2,r2,255
 200a2b4:	1080201c 	xori	r2,r2,128
 200a2b8:	10bfe004 	addi	r2,r2,-128
 200a2bc:	103ff71e 	bne	r2,zero,200a29c <strlen+0xb4>
    str++;
  return str - start;
 200a2c0:	e0ffff17 	ldw	r3,-4(fp)
 200a2c4:	e0bffe17 	ldw	r2,-8(fp)
 200a2c8:	1885c83a 	sub	r2,r3,r2
}
 200a2cc:	e037883a 	mov	sp,fp
 200a2d0:	df000017 	ldw	fp,0(sp)
 200a2d4:	dec00104 	addi	sp,sp,4
 200a2d8:	f800283a 	ret

0200a2dc <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 200a2dc:	defedf04 	addi	sp,sp,-1156
 200a2e0:	dfc12015 	stw	ra,1152(sp)
 200a2e4:	df011f15 	stw	fp,1148(sp)
 200a2e8:	dc011e15 	stw	r16,1144(sp)
 200a2ec:	df011f04 	addi	fp,sp,1148
 200a2f0:	e13ffc15 	stw	r4,-16(fp)
 200a2f4:	2821883a 	mov	r16,r5
 200a2f8:	e1bffd15 	stw	r6,-12(fp)
 200a2fc:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 200a300:	80c0030b 	ldhu	r3,12(r16)
 200a304:	00bfff44 	movi	r2,-3
 200a308:	1884703a 	and	r2,r3,r2
 200a30c:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 200a310:	80801917 	ldw	r2,100(r16)
 200a314:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 200a318:	8080038b 	ldhu	r2,14(r16)
 200a31c:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 200a320:	80800717 	ldw	r2,28(r16)
 200a324:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 200a328:	80800917 	ldw	r2,36(r16)
 200a32c:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 200a330:	e0befc04 	addi	r2,fp,-1040
 200a334:	e0bee215 	stw	r2,-1144(fp)
 200a338:	e0bee217 	ldw	r2,-1144(fp)
 200a33c:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 200a340:	00810004 	movi	r2,1024
 200a344:	e0bee415 	stw	r2,-1136(fp)
 200a348:	e0bee417 	ldw	r2,-1136(fp)
 200a34c:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 200a350:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 200a354:	e0bee204 	addi	r2,fp,-1144
 200a358:	e1fffe17 	ldw	r7,-8(fp)
 200a35c:	e1bffd17 	ldw	r6,-12(fp)
 200a360:	100b883a 	mov	r5,r2
 200a364:	e13ffc17 	ldw	r4,-16(fp)
 200a368:	200a41c0 	call	200a41c <___vfprintf_internal_r>
 200a36c:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 200a370:	e0bee117 	ldw	r2,-1148(fp)
 200a374:	10000716 	blt	r2,zero,200a394 <__sbprintf+0xb8>
 200a378:	e0bee204 	addi	r2,fp,-1144
 200a37c:	100b883a 	mov	r5,r2
 200a380:	e13ffc17 	ldw	r4,-16(fp)
 200a384:	200ec080 	call	200ec08 <_fflush_r>
 200a388:	10000226 	beq	r2,zero,200a394 <__sbprintf+0xb8>
		ret = EOF;
 200a38c:	00bfffc4 	movi	r2,-1
 200a390:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 200a394:	e0bee50b 	ldhu	r2,-1132(fp)
 200a398:	10bfffcc 	andi	r2,r2,65535
 200a39c:	1080100c 	andi	r2,r2,64
 200a3a0:	10000326 	beq	r2,zero,200a3b0 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 200a3a4:	8080030b 	ldhu	r2,12(r16)
 200a3a8:	10801014 	ori	r2,r2,64
 200a3ac:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 200a3b0:	e0bee117 	ldw	r2,-1148(fp)
}
 200a3b4:	e6ffff04 	addi	sp,fp,-4
 200a3b8:	dfc00217 	ldw	ra,8(sp)
 200a3bc:	df000117 	ldw	fp,4(sp)
 200a3c0:	dc000017 	ldw	r16,0(sp)
 200a3c4:	dec00304 	addi	sp,sp,12
 200a3c8:	f800283a 	ret

0200a3cc <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 200a3cc:	defffa04 	addi	sp,sp,-24
 200a3d0:	dfc00515 	stw	ra,20(sp)
 200a3d4:	df000415 	stw	fp,16(sp)
 200a3d8:	df000404 	addi	fp,sp,16
 200a3dc:	e13ffd15 	stw	r4,-12(fp)
 200a3e0:	e17ffe15 	stw	r5,-8(fp)
 200a3e4:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 200a3e8:	d0a03017 	ldw	r2,-32576(gp)
 200a3ec:	e1ffff17 	ldw	r7,-4(fp)
 200a3f0:	e1bffe17 	ldw	r6,-8(fp)
 200a3f4:	e17ffd17 	ldw	r5,-12(fp)
 200a3f8:	1009883a 	mov	r4,r2
 200a3fc:	200a41c0 	call	200a41c <___vfprintf_internal_r>
 200a400:	e0bffc15 	stw	r2,-16(fp)
  return result;
 200a404:	e0bffc17 	ldw	r2,-16(fp)
}
 200a408:	e037883a 	mov	sp,fp
 200a40c:	dfc00117 	ldw	ra,4(sp)
 200a410:	df000017 	ldw	fp,0(sp)
 200a414:	dec00204 	addi	sp,sp,8
 200a418:	f800283a 	ret

0200a41c <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 200a41c:	deffa404 	addi	sp,sp,-368
 200a420:	dfc05b15 	stw	ra,364(sp)
 200a424:	df005a15 	stw	fp,360(sp)
 200a428:	ddc05915 	stw	r23,356(sp)
 200a42c:	dd805815 	stw	r22,352(sp)
 200a430:	dd405715 	stw	r21,348(sp)
 200a434:	dd005615 	stw	r20,344(sp)
 200a438:	dcc05515 	stw	r19,340(sp)
 200a43c:	dc805415 	stw	r18,336(sp)
 200a440:	dc405315 	stw	r17,332(sp)
 200a444:	dc005215 	stw	r16,328(sp)
 200a448:	df005a04 	addi	fp,sp,360
 200a44c:	e13fe615 	stw	r4,-104(fp)
 200a450:	e17fe715 	stw	r5,-100(fp)
 200a454:	e1bfe815 	stw	r6,-96(fp)
 200a458:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 200a45c:	e13fe617 	ldw	r4,-104(fp)
 200a460:	20102700 	call	2010270 <_localeconv_r>
 200a464:	10800017 	ldw	r2,0(r2)
 200a468:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 200a46c:	e13fbb17 	ldw	r4,-276(fp)
 200a470:	200a1e80 	call	200a1e8 <strlen>
 200a474:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 200a478:	e03fc215 	stw	zero,-248(fp)
 200a47c:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 200a480:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 200a484:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 200a488:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 200a48c:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 200a490:	e0bfe617 	ldw	r2,-104(fp)
 200a494:	e0bfbd15 	stw	r2,-268(fp)
 200a498:	e0bfbd17 	ldw	r2,-268(fp)
 200a49c:	10000526 	beq	r2,zero,200a4b4 <___vfprintf_internal_r+0x98>
 200a4a0:	e0bfbd17 	ldw	r2,-268(fp)
 200a4a4:	10800e17 	ldw	r2,56(r2)
 200a4a8:	1000021e 	bne	r2,zero,200a4b4 <___vfprintf_internal_r+0x98>
 200a4ac:	e13fbd17 	ldw	r4,-268(fp)
 200a4b0:	200f0880 	call	200f088 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 200a4b4:	e0bfe717 	ldw	r2,-100(fp)
 200a4b8:	1080030b 	ldhu	r2,12(r2)
 200a4bc:	10bfffcc 	andi	r2,r2,65535
 200a4c0:	1088000c 	andi	r2,r2,8192
 200a4c4:	10000c1e 	bne	r2,zero,200a4f8 <___vfprintf_internal_r+0xdc>
 200a4c8:	e0bfe717 	ldw	r2,-100(fp)
 200a4cc:	1080030b 	ldhu	r2,12(r2)
 200a4d0:	10880014 	ori	r2,r2,8192
 200a4d4:	1007883a 	mov	r3,r2
 200a4d8:	e0bfe717 	ldw	r2,-100(fp)
 200a4dc:	10c0030d 	sth	r3,12(r2)
 200a4e0:	e0bfe717 	ldw	r2,-100(fp)
 200a4e4:	10c01917 	ldw	r3,100(r2)
 200a4e8:	00b7ffc4 	movi	r2,-8193
 200a4ec:	1886703a 	and	r3,r3,r2
 200a4f0:	e0bfe717 	ldw	r2,-100(fp)
 200a4f4:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 200a4f8:	e0bfe717 	ldw	r2,-100(fp)
 200a4fc:	1080030b 	ldhu	r2,12(r2)
 200a500:	10bfffcc 	andi	r2,r2,65535
 200a504:	1080020c 	andi	r2,r2,8
 200a508:	10000326 	beq	r2,zero,200a518 <___vfprintf_internal_r+0xfc>
 200a50c:	e0bfe717 	ldw	r2,-100(fp)
 200a510:	10800417 	ldw	r2,16(r2)
 200a514:	1000061e 	bne	r2,zero,200a530 <___vfprintf_internal_r+0x114>
 200a518:	e17fe717 	ldw	r5,-100(fp)
 200a51c:	e13fe617 	ldw	r4,-104(fp)
 200a520:	200c8380 	call	200c838 <__swsetup_r>
 200a524:	10000226 	beq	r2,zero,200a530 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 200a528:	00bfffc4 	movi	r2,-1
 200a52c:	0007e206 	br	200c4b8 <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200a530:	e0bfe717 	ldw	r2,-100(fp)
 200a534:	1080030b 	ldhu	r2,12(r2)
 200a538:	10bfffcc 	andi	r2,r2,65535
 200a53c:	1080068c 	andi	r2,r2,26
 200a540:	10800298 	cmpnei	r2,r2,10
 200a544:	10000c1e 	bne	r2,zero,200a578 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 200a548:	e0bfe717 	ldw	r2,-100(fp)
 200a54c:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200a550:	10bfffcc 	andi	r2,r2,65535
 200a554:	10a0001c 	xori	r2,r2,32768
 200a558:	10a00004 	addi	r2,r2,-32768
 200a55c:	10000616 	blt	r2,zero,200a578 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 200a560:	e1ffe917 	ldw	r7,-92(fp)
 200a564:	e1bfe817 	ldw	r6,-96(fp)
 200a568:	e17fe717 	ldw	r5,-100(fp)
 200a56c:	e13fe617 	ldw	r4,-104(fp)
 200a570:	200a2dc0 	call	200a2dc <__sbprintf>
 200a574:	0007d006 	br	200c4b8 <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 200a578:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 200a57c:	e47fcb04 	addi	r17,fp,-212
 200a580:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 200a584:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 200a588:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 200a58c:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 200a590:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200a594:	00000106 	br	200a59c <___vfprintf_internal_r+0x180>
                    fmt += 1;
 200a598:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200a59c:	a8800003 	ldbu	r2,0(r21)
 200a5a0:	10803fcc 	andi	r2,r2,255
 200a5a4:	1080201c 	xori	r2,r2,128
 200a5a8:	10bfe004 	addi	r2,r2,-128
 200a5ac:	10000626 	beq	r2,zero,200a5c8 <___vfprintf_internal_r+0x1ac>
 200a5b0:	a8800003 	ldbu	r2,0(r21)
 200a5b4:	10803fcc 	andi	r2,r2,255
 200a5b8:	1080201c 	xori	r2,r2,128
 200a5bc:	10bfe004 	addi	r2,r2,-128
 200a5c0:	10800958 	cmpnei	r2,r2,37
 200a5c4:	103ff41e 	bne	r2,zero,200a598 <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 200a5c8:	a807883a 	mov	r3,r21
 200a5cc:	9005883a 	mov	r2,r18
 200a5d0:	18a1c83a 	sub	r16,r3,r2
 200a5d4:	80001826 	beq	r16,zero,200a638 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 200a5d8:	8c800015 	stw	r18,0(r17)
 200a5dc:	8005883a 	mov	r2,r16
 200a5e0:	88800115 	stw	r2,4(r17)
 200a5e4:	e0bfca17 	ldw	r2,-216(fp)
 200a5e8:	8007883a 	mov	r3,r16
 200a5ec:	10c5883a 	add	r2,r2,r3
 200a5f0:	e0bfca15 	stw	r2,-216(fp)
 200a5f4:	8c400204 	addi	r17,r17,8
 200a5f8:	e0bfc917 	ldw	r2,-220(fp)
 200a5fc:	10800044 	addi	r2,r2,1
 200a600:	e0bfc915 	stw	r2,-220(fp)
 200a604:	e0bfc917 	ldw	r2,-220(fp)
 200a608:	10800210 	cmplti	r2,r2,8
 200a60c:	1000071e 	bne	r2,zero,200a62c <___vfprintf_internal_r+0x210>
 200a610:	e0bfc804 	addi	r2,fp,-224
 200a614:	100d883a 	mov	r6,r2
 200a618:	e17fe717 	ldw	r5,-100(fp)
 200a61c:	e13fe617 	ldw	r4,-104(fp)
 200a620:	20142a40 	call	20142a4 <__sprint_r>
 200a624:	10074d1e 	bne	r2,zero,200c35c <___vfprintf_internal_r+0x1f40>
 200a628:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 200a62c:	e0bfac17 	ldw	r2,-336(fp)
 200a630:	1405883a 	add	r2,r2,r16
 200a634:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 200a638:	a8800003 	ldbu	r2,0(r21)
 200a63c:	10803fcc 	andi	r2,r2,255
 200a640:	1080201c 	xori	r2,r2,128
 200a644:	10bfe004 	addi	r2,r2,-128
 200a648:	10073626 	beq	r2,zero,200c324 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 200a64c:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 200a650:	ad400044 	addi	r21,r21,1

		flags = 0;
 200a654:	0027883a 	mov	r19,zero
		dprec = 0;
 200a658:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 200a65c:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 200a660:	00bfffc4 	movi	r2,-1
 200a664:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 200a668:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 200a66c:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 200a670:	a805883a 	mov	r2,r21
 200a674:	15400044 	addi	r21,r2,1
 200a678:	10800003 	ldbu	r2,0(r2)
 200a67c:	15003fcc 	andi	r20,r2,255
 200a680:	a500201c 	xori	r20,r20,128
 200a684:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 200a688:	a0bff804 	addi	r2,r20,-32
 200a68c:	10c01668 	cmpgeui	r3,r2,89
 200a690:	1803491e 	bne	r3,zero,200b3b8 <___vfprintf_internal_r+0xf9c>
 200a694:	100690ba 	slli	r3,r2,2
 200a698:	00808074 	movhi	r2,513
 200a69c:	10a9ab04 	addi	r2,r2,-22868
 200a6a0:	1885883a 	add	r2,r3,r2
 200a6a4:	10800017 	ldw	r2,0(r2)
 200a6a8:	1000683a 	jmp	r2
 200a6ac:	0200a810 	cmplti	r8,zero,672
 200a6b0:	0200b3b8 	rdprs	r8,zero,718
 200a6b4:	0200b3b8 	rdprs	r8,zero,718
 200a6b8:	0200a830 	cmpltui	r8,zero,672
 200a6bc:	0200b3b8 	rdprs	r8,zero,718
 200a6c0:	0200b3b8 	rdprs	r8,zero,718
 200a6c4:	0200b3b8 	rdprs	r8,zero,718
 200a6c8:	0200b3b8 	rdprs	r8,zero,718
 200a6cc:	0200b3b8 	rdprs	r8,zero,718
 200a6d0:	0200b3b8 	rdprs	r8,zero,718
 200a6d4:	0200a838 	rdprs	r8,zero,672
 200a6d8:	0200a86c 	andhi	r8,zero,673
 200a6dc:	0200b3b8 	rdprs	r8,zero,718
 200a6e0:	0200a864 	muli	r8,zero,673
 200a6e4:	0200a878 	rdprs	r8,zero,673
 200a6e8:	0200b3b8 	rdprs	r8,zero,718
 200a6ec:	0200a90c 	andi	r8,zero,676
 200a6f0:	0200a914 	movui	r8,676
 200a6f4:	0200a914 	movui	r8,676
 200a6f8:	0200a914 	movui	r8,676
 200a6fc:	0200a914 	movui	r8,676
 200a700:	0200a914 	movui	r8,676
 200a704:	0200a914 	movui	r8,676
 200a708:	0200a914 	movui	r8,676
 200a70c:	0200a914 	movui	r8,676
 200a710:	0200a914 	movui	r8,676
 200a714:	0200b3b8 	rdprs	r8,zero,718
 200a718:	0200b3b8 	rdprs	r8,zero,718
 200a71c:	0200b3b8 	rdprs	r8,zero,718
 200a720:	0200b3b8 	rdprs	r8,zero,718
 200a724:	0200b3b8 	rdprs	r8,zero,718
 200a728:	0200b3b8 	rdprs	r8,zero,718
 200a72c:	0200b3b8 	rdprs	r8,zero,718
 200a730:	0200b3b8 	rdprs	r8,zero,718
 200a734:	0200b3b8 	rdprs	r8,zero,718
 200a738:	0200b3b8 	rdprs	r8,zero,718
 200a73c:	0200a9bc 	xorhi	r8,zero,678
 200a740:	0200aabc 	xorhi	r8,zero,682
 200a744:	0200b3b8 	rdprs	r8,zero,718
 200a748:	0200aabc 	xorhi	r8,zero,682
 200a74c:	0200b3b8 	rdprs	r8,zero,718
 200a750:	0200b3b8 	rdprs	r8,zero,718
 200a754:	0200b3b8 	rdprs	r8,zero,718
 200a758:	0200b3b8 	rdprs	r8,zero,718
 200a75c:	0200a950 	cmplti	r8,zero,677
 200a760:	0200b3b8 	rdprs	r8,zero,718
 200a764:	0200b3b8 	rdprs	r8,zero,718
 200a768:	0200ae58 	cmpnei	r8,zero,697
 200a76c:	0200b3b8 	rdprs	r8,zero,718
 200a770:	0200b3b8 	rdprs	r8,zero,718
 200a774:	0200b3b8 	rdprs	r8,zero,718
 200a778:	0200b3b8 	rdprs	r8,zero,718
 200a77c:	0200b3b8 	rdprs	r8,zero,718
 200a780:	0200afd4 	movui	r8,703
 200a784:	0200b3b8 	rdprs	r8,zero,718
 200a788:	0200b3b8 	rdprs	r8,zero,718
 200a78c:	0200b094 	movui	r8,706
 200a790:	0200b3b8 	rdprs	r8,zero,718
 200a794:	0200b3b8 	rdprs	r8,zero,718
 200a798:	0200b3b8 	rdprs	r8,zero,718
 200a79c:	0200b3b8 	rdprs	r8,zero,718
 200a7a0:	0200b3b8 	rdprs	r8,zero,718
 200a7a4:	0200b3b8 	rdprs	r8,zero,718
 200a7a8:	0200b3b8 	rdprs	r8,zero,718
 200a7ac:	0200b3b8 	rdprs	r8,zero,718
 200a7b0:	0200b3b8 	rdprs	r8,zero,718
 200a7b4:	0200b3b8 	rdprs	r8,zero,718
 200a7b8:	0200a994 	movui	r8,678
 200a7bc:	0200a9c0 	call	200a9c <__alt_mem_mem_Nios_PI+0xa9c>
 200a7c0:	0200aabc 	xorhi	r8,zero,682
 200a7c4:	0200aabc 	xorhi	r8,zero,682
 200a7c8:	0200aabc 	xorhi	r8,zero,682
 200a7cc:	0200a958 	cmpnei	r8,zero,677
 200a7d0:	0200a9c0 	call	200a9c <__alt_mem_mem_Nios_PI+0xa9c>
 200a7d4:	0200b3b8 	rdprs	r8,zero,718
 200a7d8:	0200b3b8 	rdprs	r8,zero,718
 200a7dc:	0200a960 	cmpeqi	r8,zero,677
 200a7e0:	0200b3b8 	rdprs	r8,zero,718
 200a7e4:	0200adb8 	rdprs	r8,zero,694
 200a7e8:	0200ae5c 	xori	r8,zero,697
 200a7ec:	0200aefc 	xorhi	r8,zero,699
 200a7f0:	0200a98c 	andi	r8,zero,678
 200a7f4:	0200b3b8 	rdprs	r8,zero,718
 200a7f8:	0200af44 	movi	r8,701
 200a7fc:	0200b3b8 	rdprs	r8,zero,718
 200a800:	0200afd8 	cmpnei	r8,zero,703
 200a804:	0200b3b8 	rdprs	r8,zero,718
 200a808:	0200b3b8 	rdprs	r8,zero,718
 200a80c:	0200b0a4 	muli	r8,zero,706
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 200a810:	e0bfc103 	ldbu	r2,-252(fp)
 200a814:	10803fcc 	andi	r2,r2,255
 200a818:	1080201c 	xori	r2,r2,128
 200a81c:	10bfe004 	addi	r2,r2,-128
 200a820:	103f931e 	bne	r2,zero,200a670 <___vfprintf_internal_r+0x254>
				sign = ' ';
 200a824:	00800804 	movi	r2,32
 200a828:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 200a82c:	003f9006 	br	200a670 <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 200a830:	9cc00054 	ori	r19,r19,1
			goto rflag;
 200a834:	003f8e06 	br	200a670 <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 200a838:	e0bfe917 	ldw	r2,-92(fp)
 200a83c:	10c00104 	addi	r3,r2,4
 200a840:	e0ffe915 	stw	r3,-92(fp)
 200a844:	10800017 	ldw	r2,0(r2)
 200a848:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 200a84c:	e0bfad17 	ldw	r2,-332(fp)
 200a850:	10000116 	blt	r2,zero,200a858 <___vfprintf_internal_r+0x43c>
				goto rflag;
 200a854:	003f8606 	br	200a670 <___vfprintf_internal_r+0x254>
			width = -width;
 200a858:	e0bfad17 	ldw	r2,-332(fp)
 200a85c:	0085c83a 	sub	r2,zero,r2
 200a860:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 200a864:	9cc00114 	ori	r19,r19,4
			goto rflag;
 200a868:	003f8106 	br	200a670 <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 200a86c:	00800ac4 	movi	r2,43
 200a870:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 200a874:	003f7e06 	br	200a670 <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 200a878:	a805883a 	mov	r2,r21
 200a87c:	15400044 	addi	r21,r2,1
 200a880:	10800003 	ldbu	r2,0(r2)
 200a884:	15003fcc 	andi	r20,r2,255
 200a888:	a500201c 	xori	r20,r20,128
 200a88c:	a53fe004 	addi	r20,r20,-128
 200a890:	a0800a98 	cmpnei	r2,r20,42
 200a894:	10000a1e 	bne	r2,zero,200a8c0 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 200a898:	e0bfe917 	ldw	r2,-92(fp)
 200a89c:	10c00104 	addi	r3,r2,4
 200a8a0:	e0ffe915 	stw	r3,-92(fp)
 200a8a4:	10800017 	ldw	r2,0(r2)
 200a8a8:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 200a8ac:	e0bfae17 	ldw	r2,-328(fp)
 200a8b0:	103f6f0e 	bge	r2,zero,200a670 <___vfprintf_internal_r+0x254>
					prec = -1;
 200a8b4:	00bfffc4 	movi	r2,-1
 200a8b8:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 200a8bc:	003f6c06 	br	200a670 <___vfprintf_internal_r+0x254>
			}
			n = 0;
 200a8c0:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 200a8c4:	00000906 	br	200a8ec <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 200a8c8:	80c002a4 	muli	r3,r16,10
 200a8cc:	a0bff404 	addi	r2,r20,-48
 200a8d0:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200a8d4:	a805883a 	mov	r2,r21
 200a8d8:	15400044 	addi	r21,r2,1
 200a8dc:	10800003 	ldbu	r2,0(r2)
 200a8e0:	15003fcc 	andi	r20,r2,255
 200a8e4:	a500201c 	xori	r20,r20,128
 200a8e8:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 200a8ec:	a0bff404 	addi	r2,r20,-48
 200a8f0:	108002b0 	cmpltui	r2,r2,10
 200a8f4:	103ff41e 	bne	r2,zero,200a8c8 <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200a8f8:	8005883a 	mov	r2,r16
 200a8fc:	1000010e 	bge	r2,zero,200a904 <___vfprintf_internal_r+0x4e8>
 200a900:	00bfffc4 	movi	r2,-1
 200a904:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 200a908:	003f5f06 	br	200a688 <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 200a90c:	9cc02014 	ori	r19,r19,128
			goto rflag;
 200a910:	003f5706 	br	200a670 <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 200a914:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 200a918:	80c002a4 	muli	r3,r16,10
 200a91c:	a0bff404 	addi	r2,r20,-48
 200a920:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200a924:	a805883a 	mov	r2,r21
 200a928:	15400044 	addi	r21,r2,1
 200a92c:	10800003 	ldbu	r2,0(r2)
 200a930:	15003fcc 	andi	r20,r2,255
 200a934:	a500201c 	xori	r20,r20,128
 200a938:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 200a93c:	a0bff404 	addi	r2,r20,-48
 200a940:	108002b0 	cmpltui	r2,r2,10
 200a944:	103ff41e 	bne	r2,zero,200a918 <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 200a948:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 200a94c:	003f4e06 	br	200a688 <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 200a950:	9cc00214 	ori	r19,r19,8
			goto rflag;
 200a954:	003f4606 	br	200a670 <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 200a958:	9cc01014 	ori	r19,r19,64
			goto rflag;
 200a95c:	003f4406 	br	200a670 <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200a960:	a8800003 	ldbu	r2,0(r21)
 200a964:	10803fcc 	andi	r2,r2,255
 200a968:	1080201c 	xori	r2,r2,128
 200a96c:	10bfe004 	addi	r2,r2,-128
 200a970:	10801b18 	cmpnei	r2,r2,108
 200a974:	1000031e 	bne	r2,zero,200a984 <___vfprintf_internal_r+0x568>
				fmt++;
 200a978:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 200a97c:	9cc00814 	ori	r19,r19,32
 200a980:	003f3b06 	br	200a670 <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 200a984:	9cc00414 	ori	r19,r19,16
			goto rflag;
 200a988:	003f3906 	br	200a670 <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 200a98c:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200a990:	003f3706 	br	200a670 <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 200a994:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 200a998:	e0bfe917 	ldw	r2,-92(fp)
 200a99c:	10c00104 	addi	r3,r2,4
 200a9a0:	e0ffe915 	stw	r3,-92(fp)
 200a9a4:	10800017 	ldw	r2,0(r2)
 200a9a8:	90800005 	stb	r2,0(r18)
				size = 1;
 200a9ac:	00800044 	movi	r2,1
 200a9b0:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 200a9b4:	e03fc105 	stb	zero,-252(fp)
			break;
 200a9b8:	00028806 	br	200b3dc <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 200a9bc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200a9c0:	9880080c 	andi	r2,r19,32
 200a9c4:	10000826 	beq	r2,zero,200a9e8 <___vfprintf_internal_r+0x5cc>
 200a9c8:	e13fe917 	ldw	r4,-92(fp)
 200a9cc:	20800204 	addi	r2,r4,8
 200a9d0:	e0bfe915 	stw	r2,-92(fp)
 200a9d4:	20800017 	ldw	r2,0(r4)
 200a9d8:	20c00117 	ldw	r3,4(r4)
 200a9dc:	e0bfea15 	stw	r2,-88(fp)
 200a9e0:	e0ffeb15 	stw	r3,-84(fp)
 200a9e4:	00001e06 	br	200aa60 <___vfprintf_internal_r+0x644>
 200a9e8:	9880040c 	andi	r2,r19,16
 200a9ec:	10000826 	beq	r2,zero,200aa10 <___vfprintf_internal_r+0x5f4>
 200a9f0:	e0bfe917 	ldw	r2,-92(fp)
 200a9f4:	10c00104 	addi	r3,r2,4
 200a9f8:	e0ffe915 	stw	r3,-92(fp)
 200a9fc:	10800017 	ldw	r2,0(r2)
 200aa00:	e0bfea15 	stw	r2,-88(fp)
 200aa04:	1005d7fa 	srai	r2,r2,31
 200aa08:	e0bfeb15 	stw	r2,-84(fp)
 200aa0c:	00001406 	br	200aa60 <___vfprintf_internal_r+0x644>
 200aa10:	9880100c 	andi	r2,r19,64
 200aa14:	10000b26 	beq	r2,zero,200aa44 <___vfprintf_internal_r+0x628>
 200aa18:	e0bfe917 	ldw	r2,-92(fp)
 200aa1c:	10c00104 	addi	r3,r2,4
 200aa20:	e0ffe915 	stw	r3,-92(fp)
 200aa24:	10800017 	ldw	r2,0(r2)
 200aa28:	10bfffcc 	andi	r2,r2,65535
 200aa2c:	10a0001c 	xori	r2,r2,32768
 200aa30:	10a00004 	addi	r2,r2,-32768
 200aa34:	e0bfea15 	stw	r2,-88(fp)
 200aa38:	1005d7fa 	srai	r2,r2,31
 200aa3c:	e0bfeb15 	stw	r2,-84(fp)
 200aa40:	00000706 	br	200aa60 <___vfprintf_internal_r+0x644>
 200aa44:	e0bfe917 	ldw	r2,-92(fp)
 200aa48:	10c00104 	addi	r3,r2,4
 200aa4c:	e0ffe915 	stw	r3,-92(fp)
 200aa50:	10800017 	ldw	r2,0(r2)
 200aa54:	e0bfea15 	stw	r2,-88(fp)
 200aa58:	1005d7fa 	srai	r2,r2,31
 200aa5c:	e0bfeb15 	stw	r2,-84(fp)
 200aa60:	e0bfea17 	ldw	r2,-88(fp)
 200aa64:	e0bfb115 	stw	r2,-316(fp)
 200aa68:	e0ffeb17 	ldw	r3,-84(fp)
 200aa6c:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 200aa70:	e0bfb117 	ldw	r2,-316(fp)
 200aa74:	e0ffb217 	ldw	r3,-312(fp)
 200aa78:	18000d0e 	bge	r3,zero,200aab0 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 200aa7c:	000f883a 	mov	r7,zero
 200aa80:	0011883a 	mov	r8,zero
 200aa84:	e13fb117 	ldw	r4,-316(fp)
 200aa88:	e17fb217 	ldw	r5,-312(fp)
 200aa8c:	3905c83a 	sub	r2,r7,r4
 200aa90:	388d803a 	cmpltu	r6,r7,r2
 200aa94:	4147c83a 	sub	r3,r8,r5
 200aa98:	1989c83a 	sub	r4,r3,r6
 200aa9c:	2007883a 	mov	r3,r4
 200aaa0:	e0bfb115 	stw	r2,-316(fp)
 200aaa4:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 200aaa8:	00800b44 	movi	r2,45
 200aaac:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 200aab0:	00800044 	movi	r2,1
 200aab4:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 200aab8:	0001b706 	br	200b198 <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 200aabc:	9880020c 	andi	r2,r19,8
 200aac0:	10000826 	beq	r2,zero,200aae4 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 200aac4:	e13fe917 	ldw	r4,-92(fp)
 200aac8:	20800204 	addi	r2,r4,8
 200aacc:	e0bfe915 	stw	r2,-92(fp)
 200aad0:	20800017 	ldw	r2,0(r4)
 200aad4:	20c00117 	ldw	r3,4(r4)
 200aad8:	e0bfc215 	stw	r2,-248(fp)
 200aadc:	e0ffc315 	stw	r3,-244(fp)
 200aae0:	00000706 	br	200ab00 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 200aae4:	e13fe917 	ldw	r4,-92(fp)
 200aae8:	20800204 	addi	r2,r4,8
 200aaec:	e0bfe915 	stw	r2,-92(fp)
 200aaf0:	20800017 	ldw	r2,0(r4)
 200aaf4:	20c00117 	ldw	r3,4(r4)
 200aaf8:	e0bfc215 	stw	r2,-248(fp)
 200aafc:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 200ab00:	e0bfc217 	ldw	r2,-248(fp)
 200ab04:	e0ffc317 	ldw	r3,-244(fp)
 200ab08:	1009883a 	mov	r4,r2
 200ab0c:	180b883a 	mov	r5,r3
 200ab10:	20043940 	call	2004394 <__fpclassifyd>
 200ab14:	10800058 	cmpnei	r2,r2,1
 200ab18:	1000161e 	bne	r2,zero,200ab74 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 200ab1c:	e0bfc217 	ldw	r2,-248(fp)
 200ab20:	e0ffc317 	ldw	r3,-244(fp)
 200ab24:	000d883a 	mov	r6,zero
 200ab28:	000f883a 	mov	r7,zero
 200ab2c:	1009883a 	mov	r4,r2
 200ab30:	180b883a 	mov	r5,r3
 200ab34:	200883c0 	call	200883c <__ledf2>
 200ab38:	1000020e 	bge	r2,zero,200ab44 <___vfprintf_internal_r+0x728>
					sign = '-';
 200ab3c:	00800b44 	movi	r2,45
 200ab40:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 200ab44:	a0801208 	cmpgei	r2,r20,72
 200ab48:	1000031e 	bne	r2,zero,200ab58 <___vfprintf_internal_r+0x73c>
					cp = "INF";
 200ab4c:	048080b4 	movhi	r18,514
 200ab50:	948c4b04 	addi	r18,r18,12588
 200ab54:	00000206 	br	200ab60 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 200ab58:	048080b4 	movhi	r18,514
 200ab5c:	948c4c04 	addi	r18,r18,12592
				size = 3;
 200ab60:	008000c4 	movi	r2,3
 200ab64:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 200ab68:	00bfdfc4 	movi	r2,-129
 200ab6c:	98a6703a 	and	r19,r19,r2
				break;
 200ab70:	00021a06 	br	200b3dc <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 200ab74:	e0bfc217 	ldw	r2,-248(fp)
 200ab78:	e0ffc317 	ldw	r3,-244(fp)
 200ab7c:	1009883a 	mov	r4,r2
 200ab80:	180b883a 	mov	r5,r3
 200ab84:	20043940 	call	2004394 <__fpclassifyd>
 200ab88:	10000c1e 	bne	r2,zero,200abbc <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 200ab8c:	a0801208 	cmpgei	r2,r20,72
 200ab90:	1000031e 	bne	r2,zero,200aba0 <___vfprintf_internal_r+0x784>
					cp = "NAN";
 200ab94:	048080b4 	movhi	r18,514
 200ab98:	948c4d04 	addi	r18,r18,12596
 200ab9c:	00000206 	br	200aba8 <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 200aba0:	048080b4 	movhi	r18,514
 200aba4:	948c4e04 	addi	r18,r18,12600
				size = 3;
 200aba8:	008000c4 	movi	r2,3
 200abac:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 200abb0:	00bfdfc4 	movi	r2,-129
 200abb4:	98a6703a 	and	r19,r19,r2
				break;
 200abb8:	00020806 	br	200b3dc <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 200abbc:	e0bfae17 	ldw	r2,-328(fp)
 200abc0:	10bfffd8 	cmpnei	r2,r2,-1
 200abc4:	1000031e 	bne	r2,zero,200abd4 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 200abc8:	00800184 	movi	r2,6
 200abcc:	e0bfae15 	stw	r2,-328(fp)
 200abd0:	00000806 	br	200abf4 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 200abd4:	a08019e0 	cmpeqi	r2,r20,103
 200abd8:	1000021e 	bne	r2,zero,200abe4 <___vfprintf_internal_r+0x7c8>
 200abdc:	a08011d8 	cmpnei	r2,r20,71
 200abe0:	1000041e 	bne	r2,zero,200abf4 <___vfprintf_internal_r+0x7d8>
 200abe4:	e0bfae17 	ldw	r2,-328(fp)
 200abe8:	1000021e 	bne	r2,zero,200abf4 <___vfprintf_internal_r+0x7d8>
				prec = 1;
 200abec:	00800044 	movi	r2,1
 200abf0:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 200abf4:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 200abf8:	e0bfc217 	ldw	r2,-248(fp)
 200abfc:	e0ffc317 	ldw	r3,-244(fp)
 200ac00:	dc800515 	stw	r18,20(sp)
 200ac04:	e13fc704 	addi	r4,fp,-228
 200ac08:	d9000415 	stw	r4,16(sp)
 200ac0c:	dd000315 	stw	r20,12(sp)
 200ac10:	e13fc404 	addi	r4,fp,-240
 200ac14:	d9000215 	stw	r4,8(sp)
 200ac18:	e13fc144 	addi	r4,fp,-251
 200ac1c:	d9000115 	stw	r4,4(sp)
 200ac20:	dcc00015 	stw	r19,0(sp)
 200ac24:	e1ffae17 	ldw	r7,-328(fp)
 200ac28:	100b883a 	mov	r5,r2
 200ac2c:	180d883a 	mov	r6,r3
 200ac30:	e13fe617 	ldw	r4,-104(fp)
 200ac34:	200c4ec0 	call	200c4ec <cvt>
 200ac38:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 200ac3c:	a08019e0 	cmpeqi	r2,r20,103
 200ac40:	1000021e 	bne	r2,zero,200ac4c <___vfprintf_internal_r+0x830>
 200ac44:	a08011d8 	cmpnei	r2,r20,71
 200ac48:	1000091e 	bne	r2,zero,200ac70 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 200ac4c:	e0bfc417 	ldw	r2,-240(fp)
 200ac50:	10bfff50 	cmplti	r2,r2,-3
 200ac54:	1000031e 	bne	r2,zero,200ac64 <___vfprintf_internal_r+0x848>
 200ac58:	e0bfc417 	ldw	r2,-240(fp)
 200ac5c:	e0ffae17 	ldw	r3,-328(fp)
 200ac60:	1880020e 	bge	r3,r2,200ac6c <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 200ac64:	a53fff84 	addi	r20,r20,-2
 200ac68:	00000106 	br	200ac70 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 200ac6c:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 200ac70:	a0801988 	cmpgei	r2,r20,102
 200ac74:	1000171e 	bne	r2,zero,200acd4 <___vfprintf_internal_r+0x8b8>
				--expt;
 200ac78:	e0bfc417 	ldw	r2,-240(fp)
 200ac7c:	10bfffc4 	addi	r2,r2,-1
 200ac80:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 200ac84:	e0bfc417 	ldw	r2,-240(fp)
 200ac88:	e0ffc504 	addi	r3,fp,-236
 200ac8c:	a00d883a 	mov	r6,r20
 200ac90:	100b883a 	mov	r5,r2
 200ac94:	1809883a 	mov	r4,r3
 200ac98:	200c6f80 	call	200c6f8 <exponent>
 200ac9c:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 200aca0:	e0bfc717 	ldw	r2,-228(fp)
 200aca4:	e0ffaf17 	ldw	r3,-324(fp)
 200aca8:	1885883a 	add	r2,r3,r2
 200acac:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 200acb0:	e0bfc717 	ldw	r2,-228(fp)
 200acb4:	10800088 	cmpgei	r2,r2,2
 200acb8:	1000021e 	bne	r2,zero,200acc4 <___vfprintf_internal_r+0x8a8>
 200acbc:	9880004c 	andi	r2,r19,1
 200acc0:	10003526 	beq	r2,zero,200ad98 <___vfprintf_internal_r+0x97c>
					++size;
 200acc4:	e0bfb617 	ldw	r2,-296(fp)
 200acc8:	10800044 	addi	r2,r2,1
 200accc:	e0bfb615 	stw	r2,-296(fp)
 200acd0:	00003106 	br	200ad98 <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 200acd4:	a0801998 	cmpnei	r2,r20,102
 200acd8:	1000181e 	bne	r2,zero,200ad3c <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 200acdc:	e0bfc417 	ldw	r2,-240(fp)
 200ace0:	00800c0e 	bge	zero,r2,200ad14 <___vfprintf_internal_r+0x8f8>
						size = expt;
 200ace4:	e0bfc417 	ldw	r2,-240(fp)
 200ace8:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 200acec:	e0bfae17 	ldw	r2,-328(fp)
 200acf0:	1000021e 	bne	r2,zero,200acfc <___vfprintf_internal_r+0x8e0>
 200acf4:	9880004c 	andi	r2,r19,1
 200acf8:	10002526 	beq	r2,zero,200ad90 <___vfprintf_internal_r+0x974>
							size += prec + 1;
 200acfc:	e0bfae17 	ldw	r2,-328(fp)
 200ad00:	10800044 	addi	r2,r2,1
 200ad04:	e0ffb617 	ldw	r3,-296(fp)
 200ad08:	1885883a 	add	r2,r3,r2
 200ad0c:	e0bfb615 	stw	r2,-296(fp)
 200ad10:	00001f06 	br	200ad90 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 200ad14:	e0bfae17 	ldw	r2,-328(fp)
 200ad18:	1000021e 	bne	r2,zero,200ad24 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 200ad1c:	9880004c 	andi	r2,r19,1
 200ad20:	10000326 	beq	r2,zero,200ad30 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 200ad24:	e0bfae17 	ldw	r2,-328(fp)
 200ad28:	10800084 	addi	r2,r2,2
 200ad2c:	00000106 	br	200ad34 <___vfprintf_internal_r+0x918>
 200ad30:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 200ad34:	e0bfb615 	stw	r2,-296(fp)
 200ad38:	00001506 	br	200ad90 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 200ad3c:	e0ffc417 	ldw	r3,-240(fp)
 200ad40:	e0bfc717 	ldw	r2,-228(fp)
 200ad44:	18800816 	blt	r3,r2,200ad68 <___vfprintf_internal_r+0x94c>
					size = expt;
 200ad48:	e0bfc417 	ldw	r2,-240(fp)
 200ad4c:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 200ad50:	9880004c 	andi	r2,r19,1
 200ad54:	10000e26 	beq	r2,zero,200ad90 <___vfprintf_internal_r+0x974>
						++size;
 200ad58:	e0bfb617 	ldw	r2,-296(fp)
 200ad5c:	10800044 	addi	r2,r2,1
 200ad60:	e0bfb615 	stw	r2,-296(fp)
 200ad64:	00000a06 	br	200ad90 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 200ad68:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 200ad6c:	00800416 	blt	zero,r2,200ad80 <___vfprintf_internal_r+0x964>
 200ad70:	e0bfc417 	ldw	r2,-240(fp)
 200ad74:	00c00084 	movi	r3,2
 200ad78:	1885c83a 	sub	r2,r3,r2
 200ad7c:	00000106 	br	200ad84 <___vfprintf_internal_r+0x968>
 200ad80:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 200ad84:	e0ffc717 	ldw	r3,-228(fp)
 200ad88:	10c5883a 	add	r2,r2,r3
 200ad8c:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 200ad90:	e0bfc417 	ldw	r2,-240(fp)
 200ad94:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 200ad98:	e0bfc143 	ldbu	r2,-251(fp)
 200ad9c:	10803fcc 	andi	r2,r2,255
 200ada0:	1080201c 	xori	r2,r2,128
 200ada4:	10bfe004 	addi	r2,r2,-128
 200ada8:	10018b26 	beq	r2,zero,200b3d8 <___vfprintf_internal_r+0xfbc>
				sign = '-';
 200adac:	00800b44 	movi	r2,45
 200adb0:	e0bfc105 	stb	r2,-252(fp)
			break;
 200adb4:	00018806 	br	200b3d8 <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 200adb8:	9880080c 	andi	r2,r19,32
 200adbc:	10000d26 	beq	r2,zero,200adf4 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 200adc0:	e0bfe917 	ldw	r2,-92(fp)
 200adc4:	10c00104 	addi	r3,r2,4
 200adc8:	e0ffe915 	stw	r3,-92(fp)
 200adcc:	10800017 	ldw	r2,0(r2)
 200add0:	e0ffac17 	ldw	r3,-336(fp)
 200add4:	e0fff015 	stw	r3,-64(fp)
 200add8:	1807d7fa 	srai	r3,r3,31
 200addc:	e0fff115 	stw	r3,-60(fp)
 200ade0:	e0fff017 	ldw	r3,-64(fp)
 200ade4:	10c00015 	stw	r3,0(r2)
 200ade8:	e0fff117 	ldw	r3,-60(fp)
 200adec:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200adf0:	00054b06 	br	200c320 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200adf4:	9880040c 	andi	r2,r19,16
 200adf8:	10000726 	beq	r2,zero,200ae18 <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200adfc:	e0bfe917 	ldw	r2,-92(fp)
 200ae00:	10c00104 	addi	r3,r2,4
 200ae04:	e0ffe915 	stw	r3,-92(fp)
 200ae08:	10800017 	ldw	r2,0(r2)
 200ae0c:	e0ffac17 	ldw	r3,-336(fp)
 200ae10:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200ae14:	00054206 	br	200c320 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 200ae18:	9880100c 	andi	r2,r19,64
 200ae1c:	10000726 	beq	r2,zero,200ae3c <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 200ae20:	e0bfe917 	ldw	r2,-92(fp)
 200ae24:	10c00104 	addi	r3,r2,4
 200ae28:	e0ffe915 	stw	r3,-92(fp)
 200ae2c:	10800017 	ldw	r2,0(r2)
 200ae30:	e0ffac17 	ldw	r3,-336(fp)
 200ae34:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200ae38:	00053906 	br	200c320 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200ae3c:	e0bfe917 	ldw	r2,-92(fp)
 200ae40:	10c00104 	addi	r3,r2,4
 200ae44:	e0ffe915 	stw	r3,-92(fp)
 200ae48:	10800017 	ldw	r2,0(r2)
 200ae4c:	e0ffac17 	ldw	r3,-336(fp)
 200ae50:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200ae54:	00053206 	br	200c320 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 200ae58:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 200ae5c:	9880080c 	andi	r2,r19,32
 200ae60:	10000626 	beq	r2,zero,200ae7c <___vfprintf_internal_r+0xa60>
 200ae64:	e0bfe917 	ldw	r2,-92(fp)
 200ae68:	10c00204 	addi	r3,r2,8
 200ae6c:	e0ffe915 	stw	r3,-92(fp)
 200ae70:	15800017 	ldw	r22,0(r2)
 200ae74:	15c00117 	ldw	r23,4(r2)
 200ae78:	00001c06 	br	200aeec <___vfprintf_internal_r+0xad0>
 200ae7c:	9880040c 	andi	r2,r19,16
 200ae80:	10000726 	beq	r2,zero,200aea0 <___vfprintf_internal_r+0xa84>
 200ae84:	e0bfe917 	ldw	r2,-92(fp)
 200ae88:	10c00104 	addi	r3,r2,4
 200ae8c:	e0ffe915 	stw	r3,-92(fp)
 200ae90:	10800017 	ldw	r2,0(r2)
 200ae94:	102d883a 	mov	r22,r2
 200ae98:	002f883a 	mov	r23,zero
 200ae9c:	00001306 	br	200aeec <___vfprintf_internal_r+0xad0>
 200aea0:	9880100c 	andi	r2,r19,64
 200aea4:	10000b26 	beq	r2,zero,200aed4 <___vfprintf_internal_r+0xab8>
 200aea8:	e0bfe917 	ldw	r2,-92(fp)
 200aeac:	10c00104 	addi	r3,r2,4
 200aeb0:	e0ffe915 	stw	r3,-92(fp)
 200aeb4:	10800017 	ldw	r2,0(r2)
 200aeb8:	e0bff215 	stw	r2,-56(fp)
 200aebc:	e03ff315 	stw	zero,-52(fp)
 200aec0:	e0bff217 	ldw	r2,-56(fp)
 200aec4:	15bfffcc 	andi	r22,r2,65535
 200aec8:	e0fff317 	ldw	r3,-52(fp)
 200aecc:	182e703a 	and	r23,r3,zero
 200aed0:	00000606 	br	200aeec <___vfprintf_internal_r+0xad0>
 200aed4:	e0bfe917 	ldw	r2,-92(fp)
 200aed8:	10c00104 	addi	r3,r2,4
 200aedc:	e0ffe915 	stw	r3,-92(fp)
 200aee0:	10800017 	ldw	r2,0(r2)
 200aee4:	102d883a 	mov	r22,r2
 200aee8:	002f883a 	mov	r23,zero
 200aeec:	e5bfb115 	stw	r22,-316(fp)
 200aef0:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 200aef4:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 200aef8:	0000a606 	br	200b194 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200aefc:	e0bfe917 	ldw	r2,-92(fp)
 200af00:	10c00104 	addi	r3,r2,4
 200af04:	e0ffe915 	stw	r3,-92(fp)
 200af08:	10800017 	ldw	r2,0(r2)
 200af0c:	e0bfb115 	stw	r2,-316(fp)
 200af10:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 200af14:	00800084 	movi	r2,2
 200af18:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 200af1c:	008080b4 	movhi	r2,514
 200af20:	108c4f04 	addi	r2,r2,12604
 200af24:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 200af28:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200af2c:	00800c04 	movi	r2,48
 200af30:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200af34:	05001e04 	movi	r20,120
 200af38:	00801e04 	movi	r2,120
 200af3c:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 200af40:	00009406 	br	200b194 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200af44:	e0bfe917 	ldw	r2,-92(fp)
 200af48:	10c00104 	addi	r3,r2,4
 200af4c:	e0ffe915 	stw	r3,-92(fp)
 200af50:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200af54:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 200af58:	9000081e 	bne	r18,zero,200af7c <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 200af5c:	048080b4 	movhi	r18,514
 200af60:	948c5404 	addi	r18,r18,12624
				size = ((unsigned) prec > 6U) ? 6 : prec;
 200af64:	e0bfae17 	ldw	r2,-328(fp)
 200af68:	10c001f0 	cmpltui	r3,r2,7
 200af6c:	1800011e 	bne	r3,zero,200af74 <___vfprintf_internal_r+0xb58>
 200af70:	00800184 	movi	r2,6
 200af74:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200af78:	00011806 	br	200b3dc <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 200af7c:	e0bfae17 	ldw	r2,-328(fp)
 200af80:	10001016 	blt	r2,zero,200afc4 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 200af84:	e0bfae17 	ldw	r2,-328(fp)
 200af88:	100d883a 	mov	r6,r2
 200af8c:	000b883a 	mov	r5,zero
 200af90:	9009883a 	mov	r4,r18
 200af94:	20114640 	call	2011464 <memchr>
 200af98:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 200af9c:	e0bfbf17 	ldw	r2,-260(fp)
 200afa0:	10000526 	beq	r2,zero,200afb8 <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 200afa4:	e0bfbf17 	ldw	r2,-260(fp)
 200afa8:	9007883a 	mov	r3,r18
 200afac:	10c5c83a 	sub	r2,r2,r3
 200afb0:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200afb4:	00010906 	br	200b3dc <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 200afb8:	e0bfae17 	ldw	r2,-328(fp)
 200afbc:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 200afc0:	00010606 	br	200b3dc <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 200afc4:	9009883a 	mov	r4,r18
 200afc8:	200a1e80 	call	200a1e8 <strlen>
 200afcc:	e0bfb615 	stw	r2,-296(fp)

			break;
 200afd0:	00010206 	br	200b3dc <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 200afd4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 200afd8:	9880080c 	andi	r2,r19,32
 200afdc:	10000826 	beq	r2,zero,200b000 <___vfprintf_internal_r+0xbe4>
 200afe0:	e0bfe917 	ldw	r2,-92(fp)
 200afe4:	10c00204 	addi	r3,r2,8
 200afe8:	e0ffe915 	stw	r3,-92(fp)
 200afec:	10c00017 	ldw	r3,0(r2)
 200aff0:	e0ffec15 	stw	r3,-80(fp)
 200aff4:	10c00117 	ldw	r3,4(r2)
 200aff8:	e0ffed15 	stw	r3,-76(fp)
 200affc:	00001e06 	br	200b078 <___vfprintf_internal_r+0xc5c>
 200b000:	9880040c 	andi	r2,r19,16
 200b004:	10000726 	beq	r2,zero,200b024 <___vfprintf_internal_r+0xc08>
 200b008:	e0bfe917 	ldw	r2,-92(fp)
 200b00c:	10c00104 	addi	r3,r2,4
 200b010:	e0ffe915 	stw	r3,-92(fp)
 200b014:	10800017 	ldw	r2,0(r2)
 200b018:	e0bfec15 	stw	r2,-80(fp)
 200b01c:	e03fed15 	stw	zero,-76(fp)
 200b020:	00001506 	br	200b078 <___vfprintf_internal_r+0xc5c>
 200b024:	9880100c 	andi	r2,r19,64
 200b028:	10000d26 	beq	r2,zero,200b060 <___vfprintf_internal_r+0xc44>
 200b02c:	e0bfe917 	ldw	r2,-92(fp)
 200b030:	10c00104 	addi	r3,r2,4
 200b034:	e0ffe915 	stw	r3,-92(fp)
 200b038:	10800017 	ldw	r2,0(r2)
 200b03c:	e0bff415 	stw	r2,-48(fp)
 200b040:	e03ff515 	stw	zero,-44(fp)
 200b044:	e0bff417 	ldw	r2,-48(fp)
 200b048:	10bfffcc 	andi	r2,r2,65535
 200b04c:	e0bfec15 	stw	r2,-80(fp)
 200b050:	e0fff517 	ldw	r3,-44(fp)
 200b054:	1806703a 	and	r3,r3,zero
 200b058:	e0ffed15 	stw	r3,-76(fp)
 200b05c:	00000606 	br	200b078 <___vfprintf_internal_r+0xc5c>
 200b060:	e0bfe917 	ldw	r2,-92(fp)
 200b064:	10c00104 	addi	r3,r2,4
 200b068:	e0ffe915 	stw	r3,-92(fp)
 200b06c:	10800017 	ldw	r2,0(r2)
 200b070:	e0bfec15 	stw	r2,-80(fp)
 200b074:	e03fed15 	stw	zero,-76(fp)
 200b078:	e0bfec17 	ldw	r2,-80(fp)
 200b07c:	e0bfb115 	stw	r2,-316(fp)
 200b080:	e0ffed17 	ldw	r3,-76(fp)
 200b084:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 200b088:	00800044 	movi	r2,1
 200b08c:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 200b090:	00004006 	br	200b194 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 200b094:	008080b4 	movhi	r2,514
 200b098:	108c5604 	addi	r2,r2,12632
 200b09c:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 200b0a0:	00000306 	br	200b0b0 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 200b0a4:	008080b4 	movhi	r2,514
 200b0a8:	108c4f04 	addi	r2,r2,12604
 200b0ac:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 200b0b0:	9880080c 	andi	r2,r19,32
 200b0b4:	10000826 	beq	r2,zero,200b0d8 <___vfprintf_internal_r+0xcbc>
 200b0b8:	e0bfe917 	ldw	r2,-92(fp)
 200b0bc:	10c00204 	addi	r3,r2,8
 200b0c0:	e0ffe915 	stw	r3,-92(fp)
 200b0c4:	10c00017 	ldw	r3,0(r2)
 200b0c8:	e0ffee15 	stw	r3,-72(fp)
 200b0cc:	10c00117 	ldw	r3,4(r2)
 200b0d0:	e0ffef15 	stw	r3,-68(fp)
 200b0d4:	00001e06 	br	200b150 <___vfprintf_internal_r+0xd34>
 200b0d8:	9880040c 	andi	r2,r19,16
 200b0dc:	10000726 	beq	r2,zero,200b0fc <___vfprintf_internal_r+0xce0>
 200b0e0:	e0bfe917 	ldw	r2,-92(fp)
 200b0e4:	10c00104 	addi	r3,r2,4
 200b0e8:	e0ffe915 	stw	r3,-92(fp)
 200b0ec:	10800017 	ldw	r2,0(r2)
 200b0f0:	e0bfee15 	stw	r2,-72(fp)
 200b0f4:	e03fef15 	stw	zero,-68(fp)
 200b0f8:	00001506 	br	200b150 <___vfprintf_internal_r+0xd34>
 200b0fc:	9880100c 	andi	r2,r19,64
 200b100:	10000d26 	beq	r2,zero,200b138 <___vfprintf_internal_r+0xd1c>
 200b104:	e0bfe917 	ldw	r2,-92(fp)
 200b108:	10c00104 	addi	r3,r2,4
 200b10c:	e0ffe915 	stw	r3,-92(fp)
 200b110:	10800017 	ldw	r2,0(r2)
 200b114:	e0bff615 	stw	r2,-40(fp)
 200b118:	e03ff715 	stw	zero,-36(fp)
 200b11c:	e0bff617 	ldw	r2,-40(fp)
 200b120:	10bfffcc 	andi	r2,r2,65535
 200b124:	e0bfee15 	stw	r2,-72(fp)
 200b128:	e0fff717 	ldw	r3,-36(fp)
 200b12c:	1806703a 	and	r3,r3,zero
 200b130:	e0ffef15 	stw	r3,-68(fp)
 200b134:	00000606 	br	200b150 <___vfprintf_internal_r+0xd34>
 200b138:	e0bfe917 	ldw	r2,-92(fp)
 200b13c:	10c00104 	addi	r3,r2,4
 200b140:	e0ffe915 	stw	r3,-92(fp)
 200b144:	10800017 	ldw	r2,0(r2)
 200b148:	e0bfee15 	stw	r2,-72(fp)
 200b14c:	e03fef15 	stw	zero,-68(fp)
 200b150:	e0bfee17 	ldw	r2,-72(fp)
 200b154:	e0bfb115 	stw	r2,-316(fp)
 200b158:	e0ffef17 	ldw	r3,-68(fp)
 200b15c:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 200b160:	00800084 	movi	r2,2
 200b164:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 200b168:	9880004c 	andi	r2,r19,1
 200b16c:	10000926 	beq	r2,zero,200b194 <___vfprintf_internal_r+0xd78>
 200b170:	e0bfb117 	ldw	r2,-316(fp)
 200b174:	e0ffb217 	ldw	r3,-312(fp)
 200b178:	10c4b03a 	or	r2,r2,r3
 200b17c:	10000526 	beq	r2,zero,200b194 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 200b180:	00800c04 	movi	r2,48
 200b184:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200b188:	a005883a 	mov	r2,r20
 200b18c:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200b190:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 200b194:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200b198:	e0bfae17 	ldw	r2,-328(fp)
 200b19c:	e0bfb415 	stw	r2,-304(fp)
 200b1a0:	e0bfb417 	ldw	r2,-304(fp)
 200b1a4:	10000216 	blt	r2,zero,200b1b0 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 200b1a8:	00bfdfc4 	movi	r2,-129
 200b1ac:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200b1b0:	e4bfdb04 	addi	r18,fp,-148
 200b1b4:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 200b1b8:	e0bfb117 	ldw	r2,-316(fp)
 200b1bc:	e0ffb217 	ldw	r3,-312(fp)
 200b1c0:	10c4b03a 	or	r2,r2,r3
 200b1c4:	1000021e 	bne	r2,zero,200b1d0 <___vfprintf_internal_r+0xdb4>
 200b1c8:	e0bfae17 	ldw	r2,-328(fp)
 200b1cc:	10006c26 	beq	r2,zero,200b380 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 200b1d0:	e0bfb303 	ldbu	r2,-308(fp)
 200b1d4:	10c00060 	cmpeqi	r3,r2,1
 200b1d8:	1800211e 	bne	r3,zero,200b260 <___vfprintf_internal_r+0xe44>
 200b1dc:	10c000a0 	cmpeqi	r3,r2,2
 200b1e0:	1800491e 	bne	r3,zero,200b308 <___vfprintf_internal_r+0xeec>
 200b1e4:	10005d1e 	bne	r2,zero,200b35c <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200b1e8:	94bfffc4 	addi	r18,r18,-1
 200b1ec:	e0bfb117 	ldw	r2,-316(fp)
 200b1f0:	108001cc 	andi	r2,r2,7
 200b1f4:	10800c04 	addi	r2,r2,48
 200b1f8:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 200b1fc:	e0bfb217 	ldw	r2,-312(fp)
 200b200:	1004977a 	slli	r2,r2,29
 200b204:	e0ffb117 	ldw	r3,-316(fp)
 200b208:	1806d0fa 	srli	r3,r3,3
 200b20c:	1884b03a 	or	r2,r3,r2
 200b210:	e0bfb115 	stw	r2,-316(fp)
 200b214:	e0bfb217 	ldw	r2,-312(fp)
 200b218:	1004d0fa 	srli	r2,r2,3
 200b21c:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 200b220:	e0bfb117 	ldw	r2,-316(fp)
 200b224:	e0ffb217 	ldw	r3,-312(fp)
 200b228:	10c4b03a 	or	r2,r2,r3
 200b22c:	103fee1e 	bne	r2,zero,200b1e8 <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200b230:	9880004c 	andi	r2,r19,1
 200b234:	10005026 	beq	r2,zero,200b378 <___vfprintf_internal_r+0xf5c>
 200b238:	90800003 	ldbu	r2,0(r18)
 200b23c:	10803fcc 	andi	r2,r2,255
 200b240:	1080201c 	xori	r2,r2,128
 200b244:	10bfe004 	addi	r2,r2,-128
 200b248:	10800c20 	cmpeqi	r2,r2,48
 200b24c:	10004a1e 	bne	r2,zero,200b378 <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 200b250:	94bfffc4 	addi	r18,r18,-1
 200b254:	00800c04 	movi	r2,48
 200b258:	90800005 	stb	r2,0(r18)
					break;
 200b25c:	00004606 	br	200b378 <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 200b260:	e0bfb217 	ldw	r2,-312(fp)
 200b264:	10000a1e 	bne	r2,zero,200b290 <___vfprintf_internal_r+0xe74>
 200b268:	e0bfb217 	ldw	r2,-312(fp)
 200b26c:	1000031e 	bne	r2,zero,200b27c <___vfprintf_internal_r+0xe60>
 200b270:	e0bfb117 	ldw	r2,-316(fp)
 200b274:	108002a8 	cmpgeui	r2,r2,10
 200b278:	1000051e 	bne	r2,zero,200b290 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 200b27c:	94bfffc4 	addi	r18,r18,-1
 200b280:	e0bfb117 	ldw	r2,-316(fp)
 200b284:	10800c04 	addi	r2,r2,48
 200b288:	90800005 	stb	r2,0(r18)
						break;
 200b28c:	00003b06 	br	200b37c <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 200b290:	94bfffc4 	addi	r18,r18,-1
 200b294:	e0bfb117 	ldw	r2,-316(fp)
 200b298:	e0ffb217 	ldw	r3,-312(fp)
 200b29c:	01800284 	movi	r6,10
 200b2a0:	000f883a 	mov	r7,zero
 200b2a4:	1009883a 	mov	r4,r2
 200b2a8:	180b883a 	mov	r5,r3
 200b2ac:	20169b00 	call	20169b0 <__umoddi3>
 200b2b0:	1009883a 	mov	r4,r2
 200b2b4:	180b883a 	mov	r5,r3
 200b2b8:	2005883a 	mov	r2,r4
 200b2bc:	2807883a 	mov	r3,r5
 200b2c0:	10800c04 	addi	r2,r2,48
 200b2c4:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200b2c8:	e0bfb117 	ldw	r2,-316(fp)
 200b2cc:	e0ffb217 	ldw	r3,-312(fp)
 200b2d0:	01800284 	movi	r6,10
 200b2d4:	000f883a 	mov	r7,zero
 200b2d8:	1009883a 	mov	r4,r2
 200b2dc:	180b883a 	mov	r5,r3
 200b2e0:	20164380 	call	2016438 <__udivdi3>
 200b2e4:	1009883a 	mov	r4,r2
 200b2e8:	180b883a 	mov	r5,r3
 200b2ec:	e13fb115 	stw	r4,-316(fp)
 200b2f0:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 200b2f4:	e0bfb117 	ldw	r2,-316(fp)
 200b2f8:	e0ffb217 	ldw	r3,-312(fp)
 200b2fc:	10c4b03a 	or	r2,r2,r3
 200b300:	103fe31e 	bne	r2,zero,200b290 <___vfprintf_internal_r+0xe74>
					break;
 200b304:	00001d06 	br	200b37c <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200b308:	94bfffc4 	addi	r18,r18,-1
 200b30c:	e0bfb117 	ldw	r2,-316(fp)
 200b310:	108003cc 	andi	r2,r2,15
 200b314:	e0ffb717 	ldw	r3,-292(fp)
 200b318:	1885883a 	add	r2,r3,r2
 200b31c:	10800003 	ldbu	r2,0(r2)
 200b320:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 200b324:	e0bfb217 	ldw	r2,-312(fp)
 200b328:	1004973a 	slli	r2,r2,28
 200b32c:	e0ffb117 	ldw	r3,-316(fp)
 200b330:	1806d13a 	srli	r3,r3,4
 200b334:	1884b03a 	or	r2,r3,r2
 200b338:	e0bfb115 	stw	r2,-316(fp)
 200b33c:	e0bfb217 	ldw	r2,-312(fp)
 200b340:	1004d13a 	srli	r2,r2,4
 200b344:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 200b348:	e0bfb117 	ldw	r2,-316(fp)
 200b34c:	e0ffb217 	ldw	r3,-312(fp)
 200b350:	10c4b03a 	or	r2,r2,r3
 200b354:	103fec1e 	bne	r2,zero,200b308 <___vfprintf_internal_r+0xeec>
					break;
 200b358:	00000806 	br	200b37c <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 200b35c:	048080b4 	movhi	r18,514
 200b360:	948c5b04 	addi	r18,r18,12652
					size = strlen (cp);
 200b364:	9009883a 	mov	r4,r18
 200b368:	200a1e80 	call	200a1e8 <strlen>
 200b36c:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 200b370:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 200b374:	00001906 	br	200b3dc <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 200b378:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 200b37c:	00000706 	br	200b39c <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200b380:	e0bfb303 	ldbu	r2,-308(fp)
 200b384:	1000051e 	bne	r2,zero,200b39c <___vfprintf_internal_r+0xf80>
 200b388:	9880004c 	andi	r2,r19,1
 200b38c:	10000326 	beq	r2,zero,200b39c <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 200b390:	94bfffc4 	addi	r18,r18,-1
 200b394:	00800c04 	movi	r2,48
 200b398:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 200b39c:	e0bfdb04 	addi	r2,fp,-148
 200b3a0:	10800a04 	addi	r2,r2,40
 200b3a4:	1007883a 	mov	r3,r2
 200b3a8:	9005883a 	mov	r2,r18
 200b3ac:	1885c83a 	sub	r2,r3,r2
 200b3b0:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 200b3b4:	00000906 	br	200b3dc <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 200b3b8:	a003dc26 	beq	r20,zero,200c32c <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 200b3bc:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 200b3c0:	a005883a 	mov	r2,r20
 200b3c4:	90800005 	stb	r2,0(r18)
			size = 1;
 200b3c8:	00800044 	movi	r2,1
 200b3cc:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 200b3d0:	e03fc105 	stb	zero,-252(fp)
			break;
 200b3d4:	00000106 	br	200b3dc <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 200b3d8:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 200b3dc:	e0ffb417 	ldw	r3,-304(fp)
 200b3e0:	e0bfb617 	ldw	r2,-296(fp)
 200b3e4:	10c0010e 	bge	r2,r3,200b3ec <___vfprintf_internal_r+0xfd0>
 200b3e8:	1805883a 	mov	r2,r3
 200b3ec:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 200b3f0:	e0bfc103 	ldbu	r2,-252(fp)
 200b3f4:	10803fcc 	andi	r2,r2,255
 200b3f8:	1080201c 	xori	r2,r2,128
 200b3fc:	10bfe004 	addi	r2,r2,-128
 200b400:	10000326 	beq	r2,zero,200b410 <___vfprintf_internal_r+0xff4>
			realsz++;
 200b404:	e0bfb517 	ldw	r2,-300(fp)
 200b408:	10800044 	addi	r2,r2,1
 200b40c:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 200b410:	9880008c 	andi	r2,r19,2
 200b414:	10000326 	beq	r2,zero,200b424 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 200b418:	e0bfb517 	ldw	r2,-300(fp)
 200b41c:	10800084 	addi	r2,r2,2
 200b420:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 200b424:	9880210c 	andi	r2,r19,132
 200b428:	1000351e 	bne	r2,zero,200b500 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 200b42c:	e0ffad17 	ldw	r3,-332(fp)
 200b430:	e0bfb517 	ldw	r2,-300(fp)
 200b434:	18a1c83a 	sub	r16,r3,r2
 200b438:	0400310e 	bge	zero,r16,200b500 <___vfprintf_internal_r+0x10e4>
 200b43c:	00001706 	br	200b49c <___vfprintf_internal_r+0x1080>
 200b440:	008080b4 	movhi	r2,514
 200b444:	108c6284 	addi	r2,r2,12682
 200b448:	88800015 	stw	r2,0(r17)
 200b44c:	00800404 	movi	r2,16
 200b450:	88800115 	stw	r2,4(r17)
 200b454:	e0bfca17 	ldw	r2,-216(fp)
 200b458:	10800404 	addi	r2,r2,16
 200b45c:	e0bfca15 	stw	r2,-216(fp)
 200b460:	8c400204 	addi	r17,r17,8
 200b464:	e0bfc917 	ldw	r2,-220(fp)
 200b468:	10800044 	addi	r2,r2,1
 200b46c:	e0bfc915 	stw	r2,-220(fp)
 200b470:	e0bfc917 	ldw	r2,-220(fp)
 200b474:	10800210 	cmplti	r2,r2,8
 200b478:	1000071e 	bne	r2,zero,200b498 <___vfprintf_internal_r+0x107c>
 200b47c:	e0bfc804 	addi	r2,fp,-224
 200b480:	100d883a 	mov	r6,r2
 200b484:	e17fe717 	ldw	r5,-100(fp)
 200b488:	e13fe617 	ldw	r4,-104(fp)
 200b48c:	20142a40 	call	20142a4 <__sprint_r>
 200b490:	1003b41e 	bne	r2,zero,200c364 <___vfprintf_internal_r+0x1f48>
 200b494:	e47fcb04 	addi	r17,fp,-212
 200b498:	843ffc04 	addi	r16,r16,-16
 200b49c:	80800448 	cmpgei	r2,r16,17
 200b4a0:	103fe71e 	bne	r2,zero,200b440 <___vfprintf_internal_r+0x1024>
 200b4a4:	008080b4 	movhi	r2,514
 200b4a8:	108c6284 	addi	r2,r2,12682
 200b4ac:	88800015 	stw	r2,0(r17)
 200b4b0:	8005883a 	mov	r2,r16
 200b4b4:	88800115 	stw	r2,4(r17)
 200b4b8:	e0bfca17 	ldw	r2,-216(fp)
 200b4bc:	8007883a 	mov	r3,r16
 200b4c0:	10c5883a 	add	r2,r2,r3
 200b4c4:	e0bfca15 	stw	r2,-216(fp)
 200b4c8:	8c400204 	addi	r17,r17,8
 200b4cc:	e0bfc917 	ldw	r2,-220(fp)
 200b4d0:	10800044 	addi	r2,r2,1
 200b4d4:	e0bfc915 	stw	r2,-220(fp)
 200b4d8:	e0bfc917 	ldw	r2,-220(fp)
 200b4dc:	10800210 	cmplti	r2,r2,8
 200b4e0:	1000071e 	bne	r2,zero,200b500 <___vfprintf_internal_r+0x10e4>
 200b4e4:	e0bfc804 	addi	r2,fp,-224
 200b4e8:	100d883a 	mov	r6,r2
 200b4ec:	e17fe717 	ldw	r5,-100(fp)
 200b4f0:	e13fe617 	ldw	r4,-104(fp)
 200b4f4:	20142a40 	call	20142a4 <__sprint_r>
 200b4f8:	10039c1e 	bne	r2,zero,200c36c <___vfprintf_internal_r+0x1f50>
 200b4fc:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 200b500:	e0bfc103 	ldbu	r2,-252(fp)
 200b504:	10803fcc 	andi	r2,r2,255
 200b508:	1080201c 	xori	r2,r2,128
 200b50c:	10bfe004 	addi	r2,r2,-128
 200b510:	10001526 	beq	r2,zero,200b568 <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 200b514:	e0bfc104 	addi	r2,fp,-252
 200b518:	88800015 	stw	r2,0(r17)
 200b51c:	00800044 	movi	r2,1
 200b520:	88800115 	stw	r2,4(r17)
 200b524:	e0bfca17 	ldw	r2,-216(fp)
 200b528:	10800044 	addi	r2,r2,1
 200b52c:	e0bfca15 	stw	r2,-216(fp)
 200b530:	8c400204 	addi	r17,r17,8
 200b534:	e0bfc917 	ldw	r2,-220(fp)
 200b538:	10800044 	addi	r2,r2,1
 200b53c:	e0bfc915 	stw	r2,-220(fp)
 200b540:	e0bfc917 	ldw	r2,-220(fp)
 200b544:	10800210 	cmplti	r2,r2,8
 200b548:	1000071e 	bne	r2,zero,200b568 <___vfprintf_internal_r+0x114c>
 200b54c:	e0bfc804 	addi	r2,fp,-224
 200b550:	100d883a 	mov	r6,r2
 200b554:	e17fe717 	ldw	r5,-100(fp)
 200b558:	e13fe617 	ldw	r4,-104(fp)
 200b55c:	20142a40 	call	20142a4 <__sprint_r>
 200b560:	1003841e 	bne	r2,zero,200c374 <___vfprintf_internal_r+0x1f58>
 200b564:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 200b568:	9880008c 	andi	r2,r19,2
 200b56c:	10001526 	beq	r2,zero,200b5c4 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 200b570:	e0bfe504 	addi	r2,fp,-108
 200b574:	88800015 	stw	r2,0(r17)
 200b578:	00800084 	movi	r2,2
 200b57c:	88800115 	stw	r2,4(r17)
 200b580:	e0bfca17 	ldw	r2,-216(fp)
 200b584:	10800084 	addi	r2,r2,2
 200b588:	e0bfca15 	stw	r2,-216(fp)
 200b58c:	8c400204 	addi	r17,r17,8
 200b590:	e0bfc917 	ldw	r2,-220(fp)
 200b594:	10800044 	addi	r2,r2,1
 200b598:	e0bfc915 	stw	r2,-220(fp)
 200b59c:	e0bfc917 	ldw	r2,-220(fp)
 200b5a0:	10800210 	cmplti	r2,r2,8
 200b5a4:	1000071e 	bne	r2,zero,200b5c4 <___vfprintf_internal_r+0x11a8>
 200b5a8:	e0bfc804 	addi	r2,fp,-224
 200b5ac:	100d883a 	mov	r6,r2
 200b5b0:	e17fe717 	ldw	r5,-100(fp)
 200b5b4:	e13fe617 	ldw	r4,-104(fp)
 200b5b8:	20142a40 	call	20142a4 <__sprint_r>
 200b5bc:	10036f1e 	bne	r2,zero,200c37c <___vfprintf_internal_r+0x1f60>
 200b5c0:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 200b5c4:	9880210c 	andi	r2,r19,132
 200b5c8:	10802018 	cmpnei	r2,r2,128
 200b5cc:	1000351e 	bne	r2,zero,200b6a4 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 200b5d0:	e0ffad17 	ldw	r3,-332(fp)
 200b5d4:	e0bfb517 	ldw	r2,-300(fp)
 200b5d8:	18a1c83a 	sub	r16,r3,r2
 200b5dc:	0400310e 	bge	zero,r16,200b6a4 <___vfprintf_internal_r+0x1288>
 200b5e0:	00001706 	br	200b640 <___vfprintf_internal_r+0x1224>
 200b5e4:	008080b4 	movhi	r2,514
 200b5e8:	108c6684 	addi	r2,r2,12698
 200b5ec:	88800015 	stw	r2,0(r17)
 200b5f0:	00800404 	movi	r2,16
 200b5f4:	88800115 	stw	r2,4(r17)
 200b5f8:	e0bfca17 	ldw	r2,-216(fp)
 200b5fc:	10800404 	addi	r2,r2,16
 200b600:	e0bfca15 	stw	r2,-216(fp)
 200b604:	8c400204 	addi	r17,r17,8
 200b608:	e0bfc917 	ldw	r2,-220(fp)
 200b60c:	10800044 	addi	r2,r2,1
 200b610:	e0bfc915 	stw	r2,-220(fp)
 200b614:	e0bfc917 	ldw	r2,-220(fp)
 200b618:	10800210 	cmplti	r2,r2,8
 200b61c:	1000071e 	bne	r2,zero,200b63c <___vfprintf_internal_r+0x1220>
 200b620:	e0bfc804 	addi	r2,fp,-224
 200b624:	100d883a 	mov	r6,r2
 200b628:	e17fe717 	ldw	r5,-100(fp)
 200b62c:	e13fe617 	ldw	r4,-104(fp)
 200b630:	20142a40 	call	20142a4 <__sprint_r>
 200b634:	1003531e 	bne	r2,zero,200c384 <___vfprintf_internal_r+0x1f68>
 200b638:	e47fcb04 	addi	r17,fp,-212
 200b63c:	843ffc04 	addi	r16,r16,-16
 200b640:	80800448 	cmpgei	r2,r16,17
 200b644:	103fe71e 	bne	r2,zero,200b5e4 <___vfprintf_internal_r+0x11c8>
 200b648:	008080b4 	movhi	r2,514
 200b64c:	108c6684 	addi	r2,r2,12698
 200b650:	88800015 	stw	r2,0(r17)
 200b654:	8005883a 	mov	r2,r16
 200b658:	88800115 	stw	r2,4(r17)
 200b65c:	e0bfca17 	ldw	r2,-216(fp)
 200b660:	8007883a 	mov	r3,r16
 200b664:	10c5883a 	add	r2,r2,r3
 200b668:	e0bfca15 	stw	r2,-216(fp)
 200b66c:	8c400204 	addi	r17,r17,8
 200b670:	e0bfc917 	ldw	r2,-220(fp)
 200b674:	10800044 	addi	r2,r2,1
 200b678:	e0bfc915 	stw	r2,-220(fp)
 200b67c:	e0bfc917 	ldw	r2,-220(fp)
 200b680:	10800210 	cmplti	r2,r2,8
 200b684:	1000071e 	bne	r2,zero,200b6a4 <___vfprintf_internal_r+0x1288>
 200b688:	e0bfc804 	addi	r2,fp,-224
 200b68c:	100d883a 	mov	r6,r2
 200b690:	e17fe717 	ldw	r5,-100(fp)
 200b694:	e13fe617 	ldw	r4,-104(fp)
 200b698:	20142a40 	call	20142a4 <__sprint_r>
 200b69c:	10033b1e 	bne	r2,zero,200c38c <___vfprintf_internal_r+0x1f70>
 200b6a0:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200b6a4:	e0ffb417 	ldw	r3,-304(fp)
 200b6a8:	e0bfb617 	ldw	r2,-296(fp)
 200b6ac:	18a1c83a 	sub	r16,r3,r2
 200b6b0:	0400310e 	bge	zero,r16,200b778 <___vfprintf_internal_r+0x135c>
 200b6b4:	00001706 	br	200b714 <___vfprintf_internal_r+0x12f8>
 200b6b8:	008080b4 	movhi	r2,514
 200b6bc:	108c6684 	addi	r2,r2,12698
 200b6c0:	88800015 	stw	r2,0(r17)
 200b6c4:	00800404 	movi	r2,16
 200b6c8:	88800115 	stw	r2,4(r17)
 200b6cc:	e0bfca17 	ldw	r2,-216(fp)
 200b6d0:	10800404 	addi	r2,r2,16
 200b6d4:	e0bfca15 	stw	r2,-216(fp)
 200b6d8:	8c400204 	addi	r17,r17,8
 200b6dc:	e0bfc917 	ldw	r2,-220(fp)
 200b6e0:	10800044 	addi	r2,r2,1
 200b6e4:	e0bfc915 	stw	r2,-220(fp)
 200b6e8:	e0bfc917 	ldw	r2,-220(fp)
 200b6ec:	10800210 	cmplti	r2,r2,8
 200b6f0:	1000071e 	bne	r2,zero,200b710 <___vfprintf_internal_r+0x12f4>
 200b6f4:	e0bfc804 	addi	r2,fp,-224
 200b6f8:	100d883a 	mov	r6,r2
 200b6fc:	e17fe717 	ldw	r5,-100(fp)
 200b700:	e13fe617 	ldw	r4,-104(fp)
 200b704:	20142a40 	call	20142a4 <__sprint_r>
 200b708:	1003221e 	bne	r2,zero,200c394 <___vfprintf_internal_r+0x1f78>
 200b70c:	e47fcb04 	addi	r17,fp,-212
 200b710:	843ffc04 	addi	r16,r16,-16
 200b714:	80800448 	cmpgei	r2,r16,17
 200b718:	103fe71e 	bne	r2,zero,200b6b8 <___vfprintf_internal_r+0x129c>
 200b71c:	008080b4 	movhi	r2,514
 200b720:	108c6684 	addi	r2,r2,12698
 200b724:	88800015 	stw	r2,0(r17)
 200b728:	8005883a 	mov	r2,r16
 200b72c:	88800115 	stw	r2,4(r17)
 200b730:	e0bfca17 	ldw	r2,-216(fp)
 200b734:	8007883a 	mov	r3,r16
 200b738:	10c5883a 	add	r2,r2,r3
 200b73c:	e0bfca15 	stw	r2,-216(fp)
 200b740:	8c400204 	addi	r17,r17,8
 200b744:	e0bfc917 	ldw	r2,-220(fp)
 200b748:	10800044 	addi	r2,r2,1
 200b74c:	e0bfc915 	stw	r2,-220(fp)
 200b750:	e0bfc917 	ldw	r2,-220(fp)
 200b754:	10800210 	cmplti	r2,r2,8
 200b758:	1000071e 	bne	r2,zero,200b778 <___vfprintf_internal_r+0x135c>
 200b75c:	e0bfc804 	addi	r2,fp,-224
 200b760:	100d883a 	mov	r6,r2
 200b764:	e17fe717 	ldw	r5,-100(fp)
 200b768:	e13fe617 	ldw	r4,-104(fp)
 200b76c:	20142a40 	call	20142a4 <__sprint_r>
 200b770:	10030a1e 	bne	r2,zero,200c39c <___vfprintf_internal_r+0x1f80>
 200b774:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 200b778:	9880400c 	andi	r2,r19,256
 200b77c:	1000161e 	bne	r2,zero,200b7d8 <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 200b780:	8c800015 	stw	r18,0(r17)
 200b784:	e0bfb617 	ldw	r2,-296(fp)
 200b788:	88800115 	stw	r2,4(r17)
 200b78c:	e0ffca17 	ldw	r3,-216(fp)
 200b790:	e0bfb617 	ldw	r2,-296(fp)
 200b794:	1885883a 	add	r2,r3,r2
 200b798:	e0bfca15 	stw	r2,-216(fp)
 200b79c:	8c400204 	addi	r17,r17,8
 200b7a0:	e0bfc917 	ldw	r2,-220(fp)
 200b7a4:	10800044 	addi	r2,r2,1
 200b7a8:	e0bfc915 	stw	r2,-220(fp)
 200b7ac:	e0bfc917 	ldw	r2,-220(fp)
 200b7b0:	10800210 	cmplti	r2,r2,8
 200b7b4:	10028c1e 	bne	r2,zero,200c1e8 <___vfprintf_internal_r+0x1dcc>
 200b7b8:	e0bfc804 	addi	r2,fp,-224
 200b7bc:	100d883a 	mov	r6,r2
 200b7c0:	e17fe717 	ldw	r5,-100(fp)
 200b7c4:	e13fe617 	ldw	r4,-104(fp)
 200b7c8:	20142a40 	call	20142a4 <__sprint_r>
 200b7cc:	1002f51e 	bne	r2,zero,200c3a4 <___vfprintf_internal_r+0x1f88>
 200b7d0:	e47fcb04 	addi	r17,fp,-212
 200b7d4:	00028406 	br	200c1e8 <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 200b7d8:	a0801990 	cmplti	r2,r20,102
 200b7dc:	1001d11e 	bne	r2,zero,200bf24 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 200b7e0:	e0bfc217 	ldw	r2,-248(fp)
 200b7e4:	e0ffc317 	ldw	r3,-244(fp)
 200b7e8:	000d883a 	mov	r6,zero
 200b7ec:	000f883a 	mov	r7,zero
 200b7f0:	1009883a 	mov	r4,r2
 200b7f4:	180b883a 	mov	r5,r3
 200b7f8:	20086d80 	call	20086d8 <__eqdf2>
 200b7fc:	1000661e 	bne	r2,zero,200b998 <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 200b800:	008080b4 	movhi	r2,514
 200b804:	108c6204 	addi	r2,r2,12680
 200b808:	88800015 	stw	r2,0(r17)
 200b80c:	00800044 	movi	r2,1
 200b810:	88800115 	stw	r2,4(r17)
 200b814:	e0bfca17 	ldw	r2,-216(fp)
 200b818:	10800044 	addi	r2,r2,1
 200b81c:	e0bfca15 	stw	r2,-216(fp)
 200b820:	8c400204 	addi	r17,r17,8
 200b824:	e0bfc917 	ldw	r2,-220(fp)
 200b828:	10800044 	addi	r2,r2,1
 200b82c:	e0bfc915 	stw	r2,-220(fp)
 200b830:	e0bfc917 	ldw	r2,-220(fp)
 200b834:	10800210 	cmplti	r2,r2,8
 200b838:	1000071e 	bne	r2,zero,200b858 <___vfprintf_internal_r+0x143c>
 200b83c:	e0bfc804 	addi	r2,fp,-224
 200b840:	100d883a 	mov	r6,r2
 200b844:	e17fe717 	ldw	r5,-100(fp)
 200b848:	e13fe617 	ldw	r4,-104(fp)
 200b84c:	20142a40 	call	20142a4 <__sprint_r>
 200b850:	1002d61e 	bne	r2,zero,200c3ac <___vfprintf_internal_r+0x1f90>
 200b854:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 200b858:	e0ffc417 	ldw	r3,-240(fp)
 200b85c:	e0bfc717 	ldw	r2,-228(fp)
 200b860:	18800216 	blt	r3,r2,200b86c <___vfprintf_internal_r+0x1450>
 200b864:	9880004c 	andi	r2,r19,1
 200b868:	10025f26 	beq	r2,zero,200c1e8 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 200b86c:	e0bfbb17 	ldw	r2,-276(fp)
 200b870:	88800015 	stw	r2,0(r17)
 200b874:	e0bfbc17 	ldw	r2,-272(fp)
 200b878:	88800115 	stw	r2,4(r17)
 200b87c:	e0ffca17 	ldw	r3,-216(fp)
 200b880:	e0bfbc17 	ldw	r2,-272(fp)
 200b884:	1885883a 	add	r2,r3,r2
 200b888:	e0bfca15 	stw	r2,-216(fp)
 200b88c:	8c400204 	addi	r17,r17,8
 200b890:	e0bfc917 	ldw	r2,-220(fp)
 200b894:	10800044 	addi	r2,r2,1
 200b898:	e0bfc915 	stw	r2,-220(fp)
 200b89c:	e0bfc917 	ldw	r2,-220(fp)
 200b8a0:	10800210 	cmplti	r2,r2,8
 200b8a4:	1000071e 	bne	r2,zero,200b8c4 <___vfprintf_internal_r+0x14a8>
 200b8a8:	e0bfc804 	addi	r2,fp,-224
 200b8ac:	100d883a 	mov	r6,r2
 200b8b0:	e17fe717 	ldw	r5,-100(fp)
 200b8b4:	e13fe617 	ldw	r4,-104(fp)
 200b8b8:	20142a40 	call	20142a4 <__sprint_r>
 200b8bc:	1002bd1e 	bne	r2,zero,200c3b4 <___vfprintf_internal_r+0x1f98>
 200b8c0:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 200b8c4:	e0bfc717 	ldw	r2,-228(fp)
 200b8c8:	143fffc4 	addi	r16,r2,-1
 200b8cc:	0402460e 	bge	zero,r16,200c1e8 <___vfprintf_internal_r+0x1dcc>
 200b8d0:	00001706 	br	200b930 <___vfprintf_internal_r+0x1514>
 200b8d4:	008080b4 	movhi	r2,514
 200b8d8:	108c6684 	addi	r2,r2,12698
 200b8dc:	88800015 	stw	r2,0(r17)
 200b8e0:	00800404 	movi	r2,16
 200b8e4:	88800115 	stw	r2,4(r17)
 200b8e8:	e0bfca17 	ldw	r2,-216(fp)
 200b8ec:	10800404 	addi	r2,r2,16
 200b8f0:	e0bfca15 	stw	r2,-216(fp)
 200b8f4:	8c400204 	addi	r17,r17,8
 200b8f8:	e0bfc917 	ldw	r2,-220(fp)
 200b8fc:	10800044 	addi	r2,r2,1
 200b900:	e0bfc915 	stw	r2,-220(fp)
 200b904:	e0bfc917 	ldw	r2,-220(fp)
 200b908:	10800210 	cmplti	r2,r2,8
 200b90c:	1000071e 	bne	r2,zero,200b92c <___vfprintf_internal_r+0x1510>
 200b910:	e0bfc804 	addi	r2,fp,-224
 200b914:	100d883a 	mov	r6,r2
 200b918:	e17fe717 	ldw	r5,-100(fp)
 200b91c:	e13fe617 	ldw	r4,-104(fp)
 200b920:	20142a40 	call	20142a4 <__sprint_r>
 200b924:	1002a51e 	bne	r2,zero,200c3bc <___vfprintf_internal_r+0x1fa0>
 200b928:	e47fcb04 	addi	r17,fp,-212
 200b92c:	843ffc04 	addi	r16,r16,-16
 200b930:	80800448 	cmpgei	r2,r16,17
 200b934:	103fe71e 	bne	r2,zero,200b8d4 <___vfprintf_internal_r+0x14b8>
 200b938:	008080b4 	movhi	r2,514
 200b93c:	108c6684 	addi	r2,r2,12698
 200b940:	88800015 	stw	r2,0(r17)
 200b944:	8005883a 	mov	r2,r16
 200b948:	88800115 	stw	r2,4(r17)
 200b94c:	e0bfca17 	ldw	r2,-216(fp)
 200b950:	8007883a 	mov	r3,r16
 200b954:	10c5883a 	add	r2,r2,r3
 200b958:	e0bfca15 	stw	r2,-216(fp)
 200b95c:	8c400204 	addi	r17,r17,8
 200b960:	e0bfc917 	ldw	r2,-220(fp)
 200b964:	10800044 	addi	r2,r2,1
 200b968:	e0bfc915 	stw	r2,-220(fp)
 200b96c:	e0bfc917 	ldw	r2,-220(fp)
 200b970:	10800210 	cmplti	r2,r2,8
 200b974:	10021c1e 	bne	r2,zero,200c1e8 <___vfprintf_internal_r+0x1dcc>
 200b978:	e0bfc804 	addi	r2,fp,-224
 200b97c:	100d883a 	mov	r6,r2
 200b980:	e17fe717 	ldw	r5,-100(fp)
 200b984:	e13fe617 	ldw	r4,-104(fp)
 200b988:	20142a40 	call	20142a4 <__sprint_r>
 200b98c:	10028d1e 	bne	r2,zero,200c3c4 <___vfprintf_internal_r+0x1fa8>
 200b990:	e47fcb04 	addi	r17,fp,-212
 200b994:	00021406 	br	200c1e8 <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 200b998:	e0bfc417 	ldw	r2,-240(fp)
 200b99c:	00807c16 	blt	zero,r2,200bb90 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 200b9a0:	008080b4 	movhi	r2,514
 200b9a4:	108c6204 	addi	r2,r2,12680
 200b9a8:	88800015 	stw	r2,0(r17)
 200b9ac:	00800044 	movi	r2,1
 200b9b0:	88800115 	stw	r2,4(r17)
 200b9b4:	e0bfca17 	ldw	r2,-216(fp)
 200b9b8:	10800044 	addi	r2,r2,1
 200b9bc:	e0bfca15 	stw	r2,-216(fp)
 200b9c0:	8c400204 	addi	r17,r17,8
 200b9c4:	e0bfc917 	ldw	r2,-220(fp)
 200b9c8:	10800044 	addi	r2,r2,1
 200b9cc:	e0bfc915 	stw	r2,-220(fp)
 200b9d0:	e0bfc917 	ldw	r2,-220(fp)
 200b9d4:	10800210 	cmplti	r2,r2,8
 200b9d8:	1000071e 	bne	r2,zero,200b9f8 <___vfprintf_internal_r+0x15dc>
 200b9dc:	e0bfc804 	addi	r2,fp,-224
 200b9e0:	100d883a 	mov	r6,r2
 200b9e4:	e17fe717 	ldw	r5,-100(fp)
 200b9e8:	e13fe617 	ldw	r4,-104(fp)
 200b9ec:	20142a40 	call	20142a4 <__sprint_r>
 200b9f0:	1002761e 	bne	r2,zero,200c3cc <___vfprintf_internal_r+0x1fb0>
 200b9f4:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 200b9f8:	e0bfc417 	ldw	r2,-240(fp)
 200b9fc:	1000041e 	bne	r2,zero,200ba10 <___vfprintf_internal_r+0x15f4>
 200ba00:	e0bfc717 	ldw	r2,-228(fp)
 200ba04:	1000021e 	bne	r2,zero,200ba10 <___vfprintf_internal_r+0x15f4>
 200ba08:	9880004c 	andi	r2,r19,1
 200ba0c:	1001f626 	beq	r2,zero,200c1e8 <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 200ba10:	e0bfbb17 	ldw	r2,-276(fp)
 200ba14:	88800015 	stw	r2,0(r17)
 200ba18:	e0bfbc17 	ldw	r2,-272(fp)
 200ba1c:	88800115 	stw	r2,4(r17)
 200ba20:	e0ffca17 	ldw	r3,-216(fp)
 200ba24:	e0bfbc17 	ldw	r2,-272(fp)
 200ba28:	1885883a 	add	r2,r3,r2
 200ba2c:	e0bfca15 	stw	r2,-216(fp)
 200ba30:	8c400204 	addi	r17,r17,8
 200ba34:	e0bfc917 	ldw	r2,-220(fp)
 200ba38:	10800044 	addi	r2,r2,1
 200ba3c:	e0bfc915 	stw	r2,-220(fp)
 200ba40:	e0bfc917 	ldw	r2,-220(fp)
 200ba44:	10800210 	cmplti	r2,r2,8
 200ba48:	1000071e 	bne	r2,zero,200ba68 <___vfprintf_internal_r+0x164c>
 200ba4c:	e0bfc804 	addi	r2,fp,-224
 200ba50:	100d883a 	mov	r6,r2
 200ba54:	e17fe717 	ldw	r5,-100(fp)
 200ba58:	e13fe617 	ldw	r4,-104(fp)
 200ba5c:	20142a40 	call	20142a4 <__sprint_r>
 200ba60:	10025c1e 	bne	r2,zero,200c3d4 <___vfprintf_internal_r+0x1fb8>
 200ba64:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 200ba68:	e0bfc417 	ldw	r2,-240(fp)
 200ba6c:	00a1c83a 	sub	r16,zero,r2
 200ba70:	0400310e 	bge	zero,r16,200bb38 <___vfprintf_internal_r+0x171c>
 200ba74:	00001706 	br	200bad4 <___vfprintf_internal_r+0x16b8>
 200ba78:	008080b4 	movhi	r2,514
 200ba7c:	108c6684 	addi	r2,r2,12698
 200ba80:	88800015 	stw	r2,0(r17)
 200ba84:	00800404 	movi	r2,16
 200ba88:	88800115 	stw	r2,4(r17)
 200ba8c:	e0bfca17 	ldw	r2,-216(fp)
 200ba90:	10800404 	addi	r2,r2,16
 200ba94:	e0bfca15 	stw	r2,-216(fp)
 200ba98:	8c400204 	addi	r17,r17,8
 200ba9c:	e0bfc917 	ldw	r2,-220(fp)
 200baa0:	10800044 	addi	r2,r2,1
 200baa4:	e0bfc915 	stw	r2,-220(fp)
 200baa8:	e0bfc917 	ldw	r2,-220(fp)
 200baac:	10800210 	cmplti	r2,r2,8
 200bab0:	1000071e 	bne	r2,zero,200bad0 <___vfprintf_internal_r+0x16b4>
 200bab4:	e0bfc804 	addi	r2,fp,-224
 200bab8:	100d883a 	mov	r6,r2
 200babc:	e17fe717 	ldw	r5,-100(fp)
 200bac0:	e13fe617 	ldw	r4,-104(fp)
 200bac4:	20142a40 	call	20142a4 <__sprint_r>
 200bac8:	1002441e 	bne	r2,zero,200c3dc <___vfprintf_internal_r+0x1fc0>
 200bacc:	e47fcb04 	addi	r17,fp,-212
 200bad0:	843ffc04 	addi	r16,r16,-16
 200bad4:	80800448 	cmpgei	r2,r16,17
 200bad8:	103fe71e 	bne	r2,zero,200ba78 <___vfprintf_internal_r+0x165c>
 200badc:	008080b4 	movhi	r2,514
 200bae0:	108c6684 	addi	r2,r2,12698
 200bae4:	88800015 	stw	r2,0(r17)
 200bae8:	8005883a 	mov	r2,r16
 200baec:	88800115 	stw	r2,4(r17)
 200baf0:	e0bfca17 	ldw	r2,-216(fp)
 200baf4:	8007883a 	mov	r3,r16
 200baf8:	10c5883a 	add	r2,r2,r3
 200bafc:	e0bfca15 	stw	r2,-216(fp)
 200bb00:	8c400204 	addi	r17,r17,8
 200bb04:	e0bfc917 	ldw	r2,-220(fp)
 200bb08:	10800044 	addi	r2,r2,1
 200bb0c:	e0bfc915 	stw	r2,-220(fp)
 200bb10:	e0bfc917 	ldw	r2,-220(fp)
 200bb14:	10800210 	cmplti	r2,r2,8
 200bb18:	1000071e 	bne	r2,zero,200bb38 <___vfprintf_internal_r+0x171c>
 200bb1c:	e0bfc804 	addi	r2,fp,-224
 200bb20:	100d883a 	mov	r6,r2
 200bb24:	e17fe717 	ldw	r5,-100(fp)
 200bb28:	e13fe617 	ldw	r4,-104(fp)
 200bb2c:	20142a40 	call	20142a4 <__sprint_r>
 200bb30:	10022c1e 	bne	r2,zero,200c3e4 <___vfprintf_internal_r+0x1fc8>
 200bb34:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 200bb38:	8c800015 	stw	r18,0(r17)
 200bb3c:	e0bfc717 	ldw	r2,-228(fp)
 200bb40:	88800115 	stw	r2,4(r17)
 200bb44:	e0bfca17 	ldw	r2,-216(fp)
 200bb48:	e0ffc717 	ldw	r3,-228(fp)
 200bb4c:	10c5883a 	add	r2,r2,r3
 200bb50:	e0bfca15 	stw	r2,-216(fp)
 200bb54:	8c400204 	addi	r17,r17,8
 200bb58:	e0bfc917 	ldw	r2,-220(fp)
 200bb5c:	10800044 	addi	r2,r2,1
 200bb60:	e0bfc915 	stw	r2,-220(fp)
 200bb64:	e0bfc917 	ldw	r2,-220(fp)
 200bb68:	10800210 	cmplti	r2,r2,8
 200bb6c:	10019e1e 	bne	r2,zero,200c1e8 <___vfprintf_internal_r+0x1dcc>
 200bb70:	e0bfc804 	addi	r2,fp,-224
 200bb74:	100d883a 	mov	r6,r2
 200bb78:	e17fe717 	ldw	r5,-100(fp)
 200bb7c:	e13fe617 	ldw	r4,-104(fp)
 200bb80:	20142a40 	call	20142a4 <__sprint_r>
 200bb84:	1002191e 	bne	r2,zero,200c3ec <___vfprintf_internal_r+0x1fd0>
 200bb88:	e47fcb04 	addi	r17,fp,-212
 200bb8c:	00019606 	br	200c1e8 <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 200bb90:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 200bb94:	e0bfc717 	ldw	r2,-228(fp)
 200bb98:	1007883a 	mov	r3,r2
 200bb9c:	e0bfc017 	ldw	r2,-256(fp)
 200bba0:	10c5883a 	add	r2,r2,r3
 200bba4:	1007883a 	mov	r3,r2
 200bba8:	9005883a 	mov	r2,r18
 200bbac:	1885c83a 	sub	r2,r3,r2
 200bbb0:	e0bfb915 	stw	r2,-284(fp)
 200bbb4:	e0bfb917 	ldw	r2,-284(fp)
 200bbb8:	e0ffb017 	ldw	r3,-320(fp)
 200bbbc:	1880020e 	bge	r3,r2,200bbc8 <___vfprintf_internal_r+0x17ac>
 200bbc0:	e0bfb017 	ldw	r2,-320(fp)
 200bbc4:	e0bfb915 	stw	r2,-284(fp)
 200bbc8:	e0bfb917 	ldw	r2,-284(fp)
 200bbcc:	0080150e 	bge	zero,r2,200bc24 <___vfprintf_internal_r+0x1808>
 200bbd0:	8c800015 	stw	r18,0(r17)
 200bbd4:	e0bfb917 	ldw	r2,-284(fp)
 200bbd8:	88800115 	stw	r2,4(r17)
 200bbdc:	e0ffca17 	ldw	r3,-216(fp)
 200bbe0:	e0bfb917 	ldw	r2,-284(fp)
 200bbe4:	1885883a 	add	r2,r3,r2
 200bbe8:	e0bfca15 	stw	r2,-216(fp)
 200bbec:	8c400204 	addi	r17,r17,8
 200bbf0:	e0bfc917 	ldw	r2,-220(fp)
 200bbf4:	10800044 	addi	r2,r2,1
 200bbf8:	e0bfc915 	stw	r2,-220(fp)
 200bbfc:	e0bfc917 	ldw	r2,-220(fp)
 200bc00:	10800210 	cmplti	r2,r2,8
 200bc04:	1000071e 	bne	r2,zero,200bc24 <___vfprintf_internal_r+0x1808>
 200bc08:	e0bfc804 	addi	r2,fp,-224
 200bc0c:	100d883a 	mov	r6,r2
 200bc10:	e17fe717 	ldw	r5,-100(fp)
 200bc14:	e13fe617 	ldw	r4,-104(fp)
 200bc18:	20142a40 	call	20142a4 <__sprint_r>
 200bc1c:	1001f51e 	bne	r2,zero,200c3f4 <___vfprintf_internal_r+0x1fd8>
 200bc20:	e47fcb04 	addi	r17,fp,-212
 200bc24:	e0bfb917 	ldw	r2,-284(fp)
 200bc28:	1000010e 	bge	r2,zero,200bc30 <___vfprintf_internal_r+0x1814>
 200bc2c:	0005883a 	mov	r2,zero
 200bc30:	e0ffb017 	ldw	r3,-320(fp)
 200bc34:	1885c83a 	sub	r2,r3,r2
 200bc38:	e0bfb915 	stw	r2,-284(fp)
 200bc3c:	e0bfb917 	ldw	r2,-284(fp)
 200bc40:	0080340e 	bge	zero,r2,200bd14 <___vfprintf_internal_r+0x18f8>
 200bc44:	00001906 	br	200bcac <___vfprintf_internal_r+0x1890>
 200bc48:	008080b4 	movhi	r2,514
 200bc4c:	108c6684 	addi	r2,r2,12698
 200bc50:	88800015 	stw	r2,0(r17)
 200bc54:	00800404 	movi	r2,16
 200bc58:	88800115 	stw	r2,4(r17)
 200bc5c:	e0bfca17 	ldw	r2,-216(fp)
 200bc60:	10800404 	addi	r2,r2,16
 200bc64:	e0bfca15 	stw	r2,-216(fp)
 200bc68:	8c400204 	addi	r17,r17,8
 200bc6c:	e0bfc917 	ldw	r2,-220(fp)
 200bc70:	10800044 	addi	r2,r2,1
 200bc74:	e0bfc915 	stw	r2,-220(fp)
 200bc78:	e0bfc917 	ldw	r2,-220(fp)
 200bc7c:	10800210 	cmplti	r2,r2,8
 200bc80:	1000071e 	bne	r2,zero,200bca0 <___vfprintf_internal_r+0x1884>
 200bc84:	e0bfc804 	addi	r2,fp,-224
 200bc88:	100d883a 	mov	r6,r2
 200bc8c:	e17fe717 	ldw	r5,-100(fp)
 200bc90:	e13fe617 	ldw	r4,-104(fp)
 200bc94:	20142a40 	call	20142a4 <__sprint_r>
 200bc98:	1001d81e 	bne	r2,zero,200c3fc <___vfprintf_internal_r+0x1fe0>
 200bc9c:	e47fcb04 	addi	r17,fp,-212
 200bca0:	e0bfb917 	ldw	r2,-284(fp)
 200bca4:	10bffc04 	addi	r2,r2,-16
 200bca8:	e0bfb915 	stw	r2,-284(fp)
 200bcac:	e0bfb917 	ldw	r2,-284(fp)
 200bcb0:	10800448 	cmpgei	r2,r2,17
 200bcb4:	103fe41e 	bne	r2,zero,200bc48 <___vfprintf_internal_r+0x182c>
 200bcb8:	008080b4 	movhi	r2,514
 200bcbc:	108c6684 	addi	r2,r2,12698
 200bcc0:	88800015 	stw	r2,0(r17)
 200bcc4:	e0bfb917 	ldw	r2,-284(fp)
 200bcc8:	88800115 	stw	r2,4(r17)
 200bccc:	e0ffca17 	ldw	r3,-216(fp)
 200bcd0:	e0bfb917 	ldw	r2,-284(fp)
 200bcd4:	1885883a 	add	r2,r3,r2
 200bcd8:	e0bfca15 	stw	r2,-216(fp)
 200bcdc:	8c400204 	addi	r17,r17,8
 200bce0:	e0bfc917 	ldw	r2,-220(fp)
 200bce4:	10800044 	addi	r2,r2,1
 200bce8:	e0bfc915 	stw	r2,-220(fp)
 200bcec:	e0bfc917 	ldw	r2,-220(fp)
 200bcf0:	10800210 	cmplti	r2,r2,8
 200bcf4:	1000071e 	bne	r2,zero,200bd14 <___vfprintf_internal_r+0x18f8>
 200bcf8:	e0bfc804 	addi	r2,fp,-224
 200bcfc:	100d883a 	mov	r6,r2
 200bd00:	e17fe717 	ldw	r5,-100(fp)
 200bd04:	e13fe617 	ldw	r4,-104(fp)
 200bd08:	20142a40 	call	20142a4 <__sprint_r>
 200bd0c:	1001bd1e 	bne	r2,zero,200c404 <___vfprintf_internal_r+0x1fe8>
 200bd10:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 200bd14:	e0bfb017 	ldw	r2,-320(fp)
 200bd18:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 200bd1c:	e0ffc417 	ldw	r3,-240(fp)
 200bd20:	e0bfc717 	ldw	r2,-228(fp)
 200bd24:	18800216 	blt	r3,r2,200bd30 <___vfprintf_internal_r+0x1914>
 200bd28:	9880004c 	andi	r2,r19,1
 200bd2c:	10001626 	beq	r2,zero,200bd88 <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 200bd30:	e0bfbb17 	ldw	r2,-276(fp)
 200bd34:	88800015 	stw	r2,0(r17)
 200bd38:	e0bfbc17 	ldw	r2,-272(fp)
 200bd3c:	88800115 	stw	r2,4(r17)
 200bd40:	e0ffca17 	ldw	r3,-216(fp)
 200bd44:	e0bfbc17 	ldw	r2,-272(fp)
 200bd48:	1885883a 	add	r2,r3,r2
 200bd4c:	e0bfca15 	stw	r2,-216(fp)
 200bd50:	8c400204 	addi	r17,r17,8
 200bd54:	e0bfc917 	ldw	r2,-220(fp)
 200bd58:	10800044 	addi	r2,r2,1
 200bd5c:	e0bfc915 	stw	r2,-220(fp)
 200bd60:	e0bfc917 	ldw	r2,-220(fp)
 200bd64:	10800210 	cmplti	r2,r2,8
 200bd68:	1000071e 	bne	r2,zero,200bd88 <___vfprintf_internal_r+0x196c>
 200bd6c:	e0bfc804 	addi	r2,fp,-224
 200bd70:	100d883a 	mov	r6,r2
 200bd74:	e17fe717 	ldw	r5,-100(fp)
 200bd78:	e13fe617 	ldw	r4,-104(fp)
 200bd7c:	20142a40 	call	20142a4 <__sprint_r>
 200bd80:	1001a21e 	bne	r2,zero,200c40c <___vfprintf_internal_r+0x1ff0>
 200bd84:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 200bd88:	e0bfc717 	ldw	r2,-228(fp)
 200bd8c:	1007883a 	mov	r3,r2
 200bd90:	e0bfc017 	ldw	r2,-256(fp)
 200bd94:	10c5883a 	add	r2,r2,r3
 200bd98:	1007883a 	mov	r3,r2
 200bd9c:	9005883a 	mov	r2,r18
 200bda0:	1885c83a 	sub	r2,r3,r2
 200bda4:	e0bfba15 	stw	r2,-280(fp)
 200bda8:	e0ffc717 	ldw	r3,-228(fp)
 200bdac:	e0bfc417 	ldw	r2,-240(fp)
 200bdb0:	1887c83a 	sub	r3,r3,r2
 200bdb4:	e0bfba17 	ldw	r2,-280(fp)
 200bdb8:	1880040e 	bge	r3,r2,200bdcc <___vfprintf_internal_r+0x19b0>
 200bdbc:	e0ffc717 	ldw	r3,-228(fp)
 200bdc0:	e0bfc417 	ldw	r2,-240(fp)
 200bdc4:	1885c83a 	sub	r2,r3,r2
 200bdc8:	e0bfba15 	stw	r2,-280(fp)
 200bdcc:	e0bfba17 	ldw	r2,-280(fp)
 200bdd0:	0080150e 	bge	zero,r2,200be28 <___vfprintf_internal_r+0x1a0c>
 200bdd4:	8c800015 	stw	r18,0(r17)
 200bdd8:	e0bfba17 	ldw	r2,-280(fp)
 200bddc:	88800115 	stw	r2,4(r17)
 200bde0:	e0ffca17 	ldw	r3,-216(fp)
 200bde4:	e0bfba17 	ldw	r2,-280(fp)
 200bde8:	1885883a 	add	r2,r3,r2
 200bdec:	e0bfca15 	stw	r2,-216(fp)
 200bdf0:	8c400204 	addi	r17,r17,8
 200bdf4:	e0bfc917 	ldw	r2,-220(fp)
 200bdf8:	10800044 	addi	r2,r2,1
 200bdfc:	e0bfc915 	stw	r2,-220(fp)
 200be00:	e0bfc917 	ldw	r2,-220(fp)
 200be04:	10800210 	cmplti	r2,r2,8
 200be08:	1000071e 	bne	r2,zero,200be28 <___vfprintf_internal_r+0x1a0c>
 200be0c:	e0bfc804 	addi	r2,fp,-224
 200be10:	100d883a 	mov	r6,r2
 200be14:	e17fe717 	ldw	r5,-100(fp)
 200be18:	e13fe617 	ldw	r4,-104(fp)
 200be1c:	20142a40 	call	20142a4 <__sprint_r>
 200be20:	10017c1e 	bne	r2,zero,200c414 <___vfprintf_internal_r+0x1ff8>
 200be24:	e47fcb04 	addi	r17,fp,-212
 200be28:	e0ffc717 	ldw	r3,-228(fp)
 200be2c:	e0bfc417 	ldw	r2,-240(fp)
 200be30:	1887c83a 	sub	r3,r3,r2
 200be34:	e0bfba17 	ldw	r2,-280(fp)
 200be38:	1000010e 	bge	r2,zero,200be40 <___vfprintf_internal_r+0x1a24>
 200be3c:	0005883a 	mov	r2,zero
 200be40:	1885c83a 	sub	r2,r3,r2
 200be44:	e0bfba15 	stw	r2,-280(fp)
 200be48:	e0bfba17 	ldw	r2,-280(fp)
 200be4c:	0080e60e 	bge	zero,r2,200c1e8 <___vfprintf_internal_r+0x1dcc>
 200be50:	00001906 	br	200beb8 <___vfprintf_internal_r+0x1a9c>
 200be54:	008080b4 	movhi	r2,514
 200be58:	108c6684 	addi	r2,r2,12698
 200be5c:	88800015 	stw	r2,0(r17)
 200be60:	00800404 	movi	r2,16
 200be64:	88800115 	stw	r2,4(r17)
 200be68:	e0bfca17 	ldw	r2,-216(fp)
 200be6c:	10800404 	addi	r2,r2,16
 200be70:	e0bfca15 	stw	r2,-216(fp)
 200be74:	8c400204 	addi	r17,r17,8
 200be78:	e0bfc917 	ldw	r2,-220(fp)
 200be7c:	10800044 	addi	r2,r2,1
 200be80:	e0bfc915 	stw	r2,-220(fp)
 200be84:	e0bfc917 	ldw	r2,-220(fp)
 200be88:	10800210 	cmplti	r2,r2,8
 200be8c:	1000071e 	bne	r2,zero,200beac <___vfprintf_internal_r+0x1a90>
 200be90:	e0bfc804 	addi	r2,fp,-224
 200be94:	100d883a 	mov	r6,r2
 200be98:	e17fe717 	ldw	r5,-100(fp)
 200be9c:	e13fe617 	ldw	r4,-104(fp)
 200bea0:	20142a40 	call	20142a4 <__sprint_r>
 200bea4:	10015d1e 	bne	r2,zero,200c41c <___vfprintf_internal_r+0x2000>
 200bea8:	e47fcb04 	addi	r17,fp,-212
 200beac:	e0bfba17 	ldw	r2,-280(fp)
 200beb0:	10bffc04 	addi	r2,r2,-16
 200beb4:	e0bfba15 	stw	r2,-280(fp)
 200beb8:	e0bfba17 	ldw	r2,-280(fp)
 200bebc:	10800448 	cmpgei	r2,r2,17
 200bec0:	103fe41e 	bne	r2,zero,200be54 <___vfprintf_internal_r+0x1a38>
 200bec4:	008080b4 	movhi	r2,514
 200bec8:	108c6684 	addi	r2,r2,12698
 200becc:	88800015 	stw	r2,0(r17)
 200bed0:	e0bfba17 	ldw	r2,-280(fp)
 200bed4:	88800115 	stw	r2,4(r17)
 200bed8:	e0ffca17 	ldw	r3,-216(fp)
 200bedc:	e0bfba17 	ldw	r2,-280(fp)
 200bee0:	1885883a 	add	r2,r3,r2
 200bee4:	e0bfca15 	stw	r2,-216(fp)
 200bee8:	8c400204 	addi	r17,r17,8
 200beec:	e0bfc917 	ldw	r2,-220(fp)
 200bef0:	10800044 	addi	r2,r2,1
 200bef4:	e0bfc915 	stw	r2,-220(fp)
 200bef8:	e0bfc917 	ldw	r2,-220(fp)
 200befc:	10800210 	cmplti	r2,r2,8
 200bf00:	1000b91e 	bne	r2,zero,200c1e8 <___vfprintf_internal_r+0x1dcc>
 200bf04:	e0bfc804 	addi	r2,fp,-224
 200bf08:	100d883a 	mov	r6,r2
 200bf0c:	e17fe717 	ldw	r5,-100(fp)
 200bf10:	e13fe617 	ldw	r4,-104(fp)
 200bf14:	20142a40 	call	20142a4 <__sprint_r>
 200bf18:	1001421e 	bne	r2,zero,200c424 <___vfprintf_internal_r+0x2008>
 200bf1c:	e47fcb04 	addi	r17,fp,-212
 200bf20:	0000b106 	br	200c1e8 <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 200bf24:	e0bfc717 	ldw	r2,-228(fp)
 200bf28:	10800088 	cmpgei	r2,r2,2
 200bf2c:	1000021e 	bne	r2,zero,200bf38 <___vfprintf_internal_r+0x1b1c>
 200bf30:	9880004c 	andi	r2,r19,1
 200bf34:	10008026 	beq	r2,zero,200c138 <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 200bf38:	8c800015 	stw	r18,0(r17)
 200bf3c:	00800044 	movi	r2,1
 200bf40:	88800115 	stw	r2,4(r17)
 200bf44:	e0bfca17 	ldw	r2,-216(fp)
 200bf48:	10800044 	addi	r2,r2,1
 200bf4c:	e0bfca15 	stw	r2,-216(fp)
 200bf50:	8c400204 	addi	r17,r17,8
 200bf54:	e0bfc917 	ldw	r2,-220(fp)
 200bf58:	10800044 	addi	r2,r2,1
 200bf5c:	e0bfc915 	stw	r2,-220(fp)
 200bf60:	e0bfc917 	ldw	r2,-220(fp)
 200bf64:	10800210 	cmplti	r2,r2,8
 200bf68:	1000071e 	bne	r2,zero,200bf88 <___vfprintf_internal_r+0x1b6c>
 200bf6c:	e0bfc804 	addi	r2,fp,-224
 200bf70:	100d883a 	mov	r6,r2
 200bf74:	e17fe717 	ldw	r5,-100(fp)
 200bf78:	e13fe617 	ldw	r4,-104(fp)
 200bf7c:	20142a40 	call	20142a4 <__sprint_r>
 200bf80:	10012a1e 	bne	r2,zero,200c42c <___vfprintf_internal_r+0x2010>
 200bf84:	e47fcb04 	addi	r17,fp,-212
					cp++;
 200bf88:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 200bf8c:	e0bfbb17 	ldw	r2,-276(fp)
 200bf90:	88800015 	stw	r2,0(r17)
 200bf94:	e0bfbc17 	ldw	r2,-272(fp)
 200bf98:	88800115 	stw	r2,4(r17)
 200bf9c:	e0ffca17 	ldw	r3,-216(fp)
 200bfa0:	e0bfbc17 	ldw	r2,-272(fp)
 200bfa4:	1885883a 	add	r2,r3,r2
 200bfa8:	e0bfca15 	stw	r2,-216(fp)
 200bfac:	8c400204 	addi	r17,r17,8
 200bfb0:	e0bfc917 	ldw	r2,-220(fp)
 200bfb4:	10800044 	addi	r2,r2,1
 200bfb8:	e0bfc915 	stw	r2,-220(fp)
 200bfbc:	e0bfc917 	ldw	r2,-220(fp)
 200bfc0:	10800210 	cmplti	r2,r2,8
 200bfc4:	1000071e 	bne	r2,zero,200bfe4 <___vfprintf_internal_r+0x1bc8>
 200bfc8:	e0bfc804 	addi	r2,fp,-224
 200bfcc:	100d883a 	mov	r6,r2
 200bfd0:	e17fe717 	ldw	r5,-100(fp)
 200bfd4:	e13fe617 	ldw	r4,-104(fp)
 200bfd8:	20142a40 	call	20142a4 <__sprint_r>
 200bfdc:	1001151e 	bne	r2,zero,200c434 <___vfprintf_internal_r+0x2018>
 200bfe0:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 200bfe4:	e0bfc217 	ldw	r2,-248(fp)
 200bfe8:	e0ffc317 	ldw	r3,-244(fp)
 200bfec:	000d883a 	mov	r6,zero
 200bff0:	000f883a 	mov	r7,zero
 200bff4:	1009883a 	mov	r4,r2
 200bff8:	180b883a 	mov	r5,r3
 200bffc:	20086d80 	call	20086d8 <__eqdf2>
 200c000:	10001826 	beq	r2,zero,200c064 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 200c004:	8c800015 	stw	r18,0(r17)
 200c008:	e0bfc717 	ldw	r2,-228(fp)
 200c00c:	10bfffc4 	addi	r2,r2,-1
 200c010:	88800115 	stw	r2,4(r17)
 200c014:	e0bfca17 	ldw	r2,-216(fp)
 200c018:	e0ffc717 	ldw	r3,-228(fp)
 200c01c:	10c5883a 	add	r2,r2,r3
 200c020:	10bfffc4 	addi	r2,r2,-1
 200c024:	e0bfca15 	stw	r2,-216(fp)
 200c028:	8c400204 	addi	r17,r17,8
 200c02c:	e0bfc917 	ldw	r2,-220(fp)
 200c030:	10800044 	addi	r2,r2,1
 200c034:	e0bfc915 	stw	r2,-220(fp)
 200c038:	e0bfc917 	ldw	r2,-220(fp)
 200c03c:	10800210 	cmplti	r2,r2,8
 200c040:	1000521e 	bne	r2,zero,200c18c <___vfprintf_internal_r+0x1d70>
 200c044:	e0bfc804 	addi	r2,fp,-224
 200c048:	100d883a 	mov	r6,r2
 200c04c:	e17fe717 	ldw	r5,-100(fp)
 200c050:	e13fe617 	ldw	r4,-104(fp)
 200c054:	20142a40 	call	20142a4 <__sprint_r>
 200c058:	1000f81e 	bne	r2,zero,200c43c <___vfprintf_internal_r+0x2020>
 200c05c:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200c060:	00004a06 	br	200c18c <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 200c064:	e0bfc717 	ldw	r2,-228(fp)
 200c068:	143fffc4 	addi	r16,r2,-1
 200c06c:	0400470e 	bge	zero,r16,200c18c <___vfprintf_internal_r+0x1d70>
 200c070:	00001706 	br	200c0d0 <___vfprintf_internal_r+0x1cb4>
 200c074:	008080b4 	movhi	r2,514
 200c078:	108c6684 	addi	r2,r2,12698
 200c07c:	88800015 	stw	r2,0(r17)
 200c080:	00800404 	movi	r2,16
 200c084:	88800115 	stw	r2,4(r17)
 200c088:	e0bfca17 	ldw	r2,-216(fp)
 200c08c:	10800404 	addi	r2,r2,16
 200c090:	e0bfca15 	stw	r2,-216(fp)
 200c094:	8c400204 	addi	r17,r17,8
 200c098:	e0bfc917 	ldw	r2,-220(fp)
 200c09c:	10800044 	addi	r2,r2,1
 200c0a0:	e0bfc915 	stw	r2,-220(fp)
 200c0a4:	e0bfc917 	ldw	r2,-220(fp)
 200c0a8:	10800210 	cmplti	r2,r2,8
 200c0ac:	1000071e 	bne	r2,zero,200c0cc <___vfprintf_internal_r+0x1cb0>
 200c0b0:	e0bfc804 	addi	r2,fp,-224
 200c0b4:	100d883a 	mov	r6,r2
 200c0b8:	e17fe717 	ldw	r5,-100(fp)
 200c0bc:	e13fe617 	ldw	r4,-104(fp)
 200c0c0:	20142a40 	call	20142a4 <__sprint_r>
 200c0c4:	1000df1e 	bne	r2,zero,200c444 <___vfprintf_internal_r+0x2028>
 200c0c8:	e47fcb04 	addi	r17,fp,-212
 200c0cc:	843ffc04 	addi	r16,r16,-16
 200c0d0:	80800448 	cmpgei	r2,r16,17
 200c0d4:	103fe71e 	bne	r2,zero,200c074 <___vfprintf_internal_r+0x1c58>
 200c0d8:	008080b4 	movhi	r2,514
 200c0dc:	108c6684 	addi	r2,r2,12698
 200c0e0:	88800015 	stw	r2,0(r17)
 200c0e4:	8005883a 	mov	r2,r16
 200c0e8:	88800115 	stw	r2,4(r17)
 200c0ec:	e0bfca17 	ldw	r2,-216(fp)
 200c0f0:	8007883a 	mov	r3,r16
 200c0f4:	10c5883a 	add	r2,r2,r3
 200c0f8:	e0bfca15 	stw	r2,-216(fp)
 200c0fc:	8c400204 	addi	r17,r17,8
 200c100:	e0bfc917 	ldw	r2,-220(fp)
 200c104:	10800044 	addi	r2,r2,1
 200c108:	e0bfc915 	stw	r2,-220(fp)
 200c10c:	e0bfc917 	ldw	r2,-220(fp)
 200c110:	10800210 	cmplti	r2,r2,8
 200c114:	10001d1e 	bne	r2,zero,200c18c <___vfprintf_internal_r+0x1d70>
 200c118:	e0bfc804 	addi	r2,fp,-224
 200c11c:	100d883a 	mov	r6,r2
 200c120:	e17fe717 	ldw	r5,-100(fp)
 200c124:	e13fe617 	ldw	r4,-104(fp)
 200c128:	20142a40 	call	20142a4 <__sprint_r>
 200c12c:	1000c71e 	bne	r2,zero,200c44c <___vfprintf_internal_r+0x2030>
 200c130:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200c134:	00001506 	br	200c18c <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 200c138:	8c800015 	stw	r18,0(r17)
 200c13c:	00800044 	movi	r2,1
 200c140:	88800115 	stw	r2,4(r17)
 200c144:	e0bfca17 	ldw	r2,-216(fp)
 200c148:	10800044 	addi	r2,r2,1
 200c14c:	e0bfca15 	stw	r2,-216(fp)
 200c150:	8c400204 	addi	r17,r17,8
 200c154:	e0bfc917 	ldw	r2,-220(fp)
 200c158:	10800044 	addi	r2,r2,1
 200c15c:	e0bfc915 	stw	r2,-220(fp)
 200c160:	e0bfc917 	ldw	r2,-220(fp)
 200c164:	10800210 	cmplti	r2,r2,8
 200c168:	1000091e 	bne	r2,zero,200c190 <___vfprintf_internal_r+0x1d74>
 200c16c:	e0bfc804 	addi	r2,fp,-224
 200c170:	100d883a 	mov	r6,r2
 200c174:	e17fe717 	ldw	r5,-100(fp)
 200c178:	e13fe617 	ldw	r4,-104(fp)
 200c17c:	20142a40 	call	20142a4 <__sprint_r>
 200c180:	1000b41e 	bne	r2,zero,200c454 <___vfprintf_internal_r+0x2038>
 200c184:	e47fcb04 	addi	r17,fp,-212
 200c188:	00000106 	br	200c190 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 200c18c:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 200c190:	e0bfc504 	addi	r2,fp,-236
 200c194:	88800015 	stw	r2,0(r17)
 200c198:	e0bfaf17 	ldw	r2,-324(fp)
 200c19c:	88800115 	stw	r2,4(r17)
 200c1a0:	e0ffca17 	ldw	r3,-216(fp)
 200c1a4:	e0bfaf17 	ldw	r2,-324(fp)
 200c1a8:	1885883a 	add	r2,r3,r2
 200c1ac:	e0bfca15 	stw	r2,-216(fp)
 200c1b0:	8c400204 	addi	r17,r17,8
 200c1b4:	e0bfc917 	ldw	r2,-220(fp)
 200c1b8:	10800044 	addi	r2,r2,1
 200c1bc:	e0bfc915 	stw	r2,-220(fp)
 200c1c0:	e0bfc917 	ldw	r2,-220(fp)
 200c1c4:	10800210 	cmplti	r2,r2,8
 200c1c8:	1000071e 	bne	r2,zero,200c1e8 <___vfprintf_internal_r+0x1dcc>
 200c1cc:	e0bfc804 	addi	r2,fp,-224
 200c1d0:	100d883a 	mov	r6,r2
 200c1d4:	e17fe717 	ldw	r5,-100(fp)
 200c1d8:	e13fe617 	ldw	r4,-104(fp)
 200c1dc:	20142a40 	call	20142a4 <__sprint_r>
 200c1e0:	10009e1e 	bne	r2,zero,200c45c <___vfprintf_internal_r+0x2040>
 200c1e4:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 200c1e8:	9880010c 	andi	r2,r19,4
 200c1ec:	10003526 	beq	r2,zero,200c2c4 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 200c1f0:	e0ffad17 	ldw	r3,-332(fp)
 200c1f4:	e0bfb517 	ldw	r2,-300(fp)
 200c1f8:	18a1c83a 	sub	r16,r3,r2
 200c1fc:	0400310e 	bge	zero,r16,200c2c4 <___vfprintf_internal_r+0x1ea8>
 200c200:	00001706 	br	200c260 <___vfprintf_internal_r+0x1e44>
 200c204:	008080b4 	movhi	r2,514
 200c208:	108c6284 	addi	r2,r2,12682
 200c20c:	88800015 	stw	r2,0(r17)
 200c210:	00800404 	movi	r2,16
 200c214:	88800115 	stw	r2,4(r17)
 200c218:	e0bfca17 	ldw	r2,-216(fp)
 200c21c:	10800404 	addi	r2,r2,16
 200c220:	e0bfca15 	stw	r2,-216(fp)
 200c224:	8c400204 	addi	r17,r17,8
 200c228:	e0bfc917 	ldw	r2,-220(fp)
 200c22c:	10800044 	addi	r2,r2,1
 200c230:	e0bfc915 	stw	r2,-220(fp)
 200c234:	e0bfc917 	ldw	r2,-220(fp)
 200c238:	10800210 	cmplti	r2,r2,8
 200c23c:	1000071e 	bne	r2,zero,200c25c <___vfprintf_internal_r+0x1e40>
 200c240:	e0bfc804 	addi	r2,fp,-224
 200c244:	100d883a 	mov	r6,r2
 200c248:	e17fe717 	ldw	r5,-100(fp)
 200c24c:	e13fe617 	ldw	r4,-104(fp)
 200c250:	20142a40 	call	20142a4 <__sprint_r>
 200c254:	1000831e 	bne	r2,zero,200c464 <___vfprintf_internal_r+0x2048>
 200c258:	e47fcb04 	addi	r17,fp,-212
 200c25c:	843ffc04 	addi	r16,r16,-16
 200c260:	80800448 	cmpgei	r2,r16,17
 200c264:	103fe71e 	bne	r2,zero,200c204 <___vfprintf_internal_r+0x1de8>
 200c268:	008080b4 	movhi	r2,514
 200c26c:	108c6284 	addi	r2,r2,12682
 200c270:	88800015 	stw	r2,0(r17)
 200c274:	8005883a 	mov	r2,r16
 200c278:	88800115 	stw	r2,4(r17)
 200c27c:	e0bfca17 	ldw	r2,-216(fp)
 200c280:	8007883a 	mov	r3,r16
 200c284:	10c5883a 	add	r2,r2,r3
 200c288:	e0bfca15 	stw	r2,-216(fp)
 200c28c:	8c400204 	addi	r17,r17,8
 200c290:	e0bfc917 	ldw	r2,-220(fp)
 200c294:	10800044 	addi	r2,r2,1
 200c298:	e0bfc915 	stw	r2,-220(fp)
 200c29c:	e0bfc917 	ldw	r2,-220(fp)
 200c2a0:	10800210 	cmplti	r2,r2,8
 200c2a4:	1000071e 	bne	r2,zero,200c2c4 <___vfprintf_internal_r+0x1ea8>
 200c2a8:	e0bfc804 	addi	r2,fp,-224
 200c2ac:	100d883a 	mov	r6,r2
 200c2b0:	e17fe717 	ldw	r5,-100(fp)
 200c2b4:	e13fe617 	ldw	r4,-104(fp)
 200c2b8:	20142a40 	call	20142a4 <__sprint_r>
 200c2bc:	10006b1e 	bne	r2,zero,200c46c <___vfprintf_internal_r+0x2050>
 200c2c0:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 200c2c4:	e0ffad17 	ldw	r3,-332(fp)
 200c2c8:	e0bfb517 	ldw	r2,-300(fp)
 200c2cc:	10c0010e 	bge	r2,r3,200c2d4 <___vfprintf_internal_r+0x1eb8>
 200c2d0:	1805883a 	mov	r2,r3
 200c2d4:	e0ffac17 	ldw	r3,-336(fp)
 200c2d8:	1885883a 	add	r2,r3,r2
 200c2dc:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 200c2e0:	e0bfca17 	ldw	r2,-216(fp)
 200c2e4:	10000626 	beq	r2,zero,200c300 <___vfprintf_internal_r+0x1ee4>
 200c2e8:	e0bfc804 	addi	r2,fp,-224
 200c2ec:	100d883a 	mov	r6,r2
 200c2f0:	e17fe717 	ldw	r5,-100(fp)
 200c2f4:	e13fe617 	ldw	r4,-104(fp)
 200c2f8:	20142a40 	call	20142a4 <__sprint_r>
 200c2fc:	10005d1e 	bne	r2,zero,200c474 <___vfprintf_internal_r+0x2058>
 200c300:	e03fc915 	stw	zero,-220(fp)
 200c304:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 200c308:	e0bfb817 	ldw	r2,-288(fp)
 200c30c:	1038a026 	beq	r2,zero,200a590 <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 200c310:	e17fb817 	ldw	r5,-288(fp)
 200c314:	e13fe617 	ldw	r4,-104(fp)
 200c318:	200f2a80 	call	200f2a8 <_free_r>
			malloc_buf = NULL;
 200c31c:	e03fb815 	stw	zero,-288(fp)
		}
	}
 200c320:	00389b06 	br	200a590 <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 200c324:	0001883a 	nop
 200c328:	00000106 	br	200c330 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 200c32c:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200c330:	e0bfca17 	ldw	r2,-216(fp)
 200c334:	10000626 	beq	r2,zero,200c350 <___vfprintf_internal_r+0x1f34>
 200c338:	e0bfc804 	addi	r2,fp,-224
 200c33c:	100d883a 	mov	r6,r2
 200c340:	e17fe717 	ldw	r5,-100(fp)
 200c344:	e13fe617 	ldw	r4,-104(fp)
 200c348:	20142a40 	call	20142a4 <__sprint_r>
 200c34c:	10004b1e 	bne	r2,zero,200c47c <___vfprintf_internal_r+0x2060>
 200c350:	e03fc915 	stw	zero,-220(fp)
 200c354:	e47fcb04 	addi	r17,fp,-212
 200c358:	00004906 	br	200c480 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 200c35c:	0001883a 	nop
 200c360:	00004706 	br	200c480 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 200c364:	0001883a 	nop
 200c368:	00004506 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c36c:	0001883a 	nop
 200c370:	00004306 	br	200c480 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 200c374:	0001883a 	nop
 200c378:	00004106 	br	200c480 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 200c37c:	0001883a 	nop
 200c380:	00003f06 	br	200c480 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 200c384:	0001883a 	nop
 200c388:	00003d06 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c38c:	0001883a 	nop
 200c390:	00003b06 	br	200c480 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 200c394:	0001883a 	nop
 200c398:	00003906 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c39c:	0001883a 	nop
 200c3a0:	00003706 	br	200c480 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 200c3a4:	0001883a 	nop
 200c3a8:	00003506 	br	200c480 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 200c3ac:	0001883a 	nop
 200c3b0:	00003306 	br	200c480 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 200c3b4:	0001883a 	nop
 200c3b8:	00003106 	br	200c480 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 200c3bc:	0001883a 	nop
 200c3c0:	00002f06 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c3c4:	0001883a 	nop
 200c3c8:	00002d06 	br	200c480 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 200c3cc:	0001883a 	nop
 200c3d0:	00002b06 	br	200c480 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 200c3d4:	0001883a 	nop
 200c3d8:	00002906 	br	200c480 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 200c3dc:	0001883a 	nop
 200c3e0:	00002706 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c3e4:	0001883a 	nop
 200c3e8:	00002506 	br	200c480 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 200c3ec:	0001883a 	nop
 200c3f0:	00002306 	br	200c480 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 200c3f4:	0001883a 	nop
 200c3f8:	00002106 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c3fc:	0001883a 	nop
 200c400:	00001f06 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c404:	0001883a 	nop
 200c408:	00001d06 	br	200c480 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 200c40c:	0001883a 	nop
 200c410:	00001b06 	br	200c480 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 200c414:	0001883a 	nop
 200c418:	00001906 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c41c:	0001883a 	nop
 200c420:	00001706 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c424:	0001883a 	nop
 200c428:	00001506 	br	200c480 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 200c42c:	0001883a 	nop
 200c430:	00001306 	br	200c480 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 200c434:	0001883a 	nop
 200c438:	00001106 	br	200c480 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 200c43c:	0001883a 	nop
 200c440:	00000f06 	br	200c480 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 200c444:	0001883a 	nop
 200c448:	00000d06 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c44c:	0001883a 	nop
 200c450:	00000b06 	br	200c480 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 200c454:	0001883a 	nop
 200c458:	00000906 	br	200c480 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 200c45c:	0001883a 	nop
 200c460:	00000706 	br	200c480 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 200c464:	0001883a 	nop
 200c468:	00000506 	br	200c480 <___vfprintf_internal_r+0x2064>
 200c46c:	0001883a 	nop
 200c470:	00000306 	br	200c480 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 200c474:	0001883a 	nop
 200c478:	00000106 	br	200c480 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 200c47c:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 200c480:	e0bfb817 	ldw	r2,-288(fp)
 200c484:	10000326 	beq	r2,zero,200c494 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 200c488:	e17fb817 	ldw	r5,-288(fp)
 200c48c:	e13fe617 	ldw	r4,-104(fp)
 200c490:	200f2a80 	call	200f2a8 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 200c494:	e0bfe717 	ldw	r2,-100(fp)
 200c498:	1080030b 	ldhu	r2,12(r2)
 200c49c:	10bfffcc 	andi	r2,r2,65535
 200c4a0:	1080100c 	andi	r2,r2,64
 200c4a4:	1000021e 	bne	r2,zero,200c4b0 <___vfprintf_internal_r+0x2094>
 200c4a8:	e0bfac17 	ldw	r2,-336(fp)
 200c4ac:	00000206 	br	200c4b8 <___vfprintf_internal_r+0x209c>
 200c4b0:	00bfffc4 	movi	r2,-1
 200c4b4:	0001883a 	nop
	/* NOTREACHED */
}
 200c4b8:	e6fff804 	addi	sp,fp,-32
 200c4bc:	dfc00917 	ldw	ra,36(sp)
 200c4c0:	df000817 	ldw	fp,32(sp)
 200c4c4:	ddc00717 	ldw	r23,28(sp)
 200c4c8:	dd800617 	ldw	r22,24(sp)
 200c4cc:	dd400517 	ldw	r21,20(sp)
 200c4d0:	dd000417 	ldw	r20,16(sp)
 200c4d4:	dcc00317 	ldw	r19,12(sp)
 200c4d8:	dc800217 	ldw	r18,8(sp)
 200c4dc:	dc400117 	ldw	r17,4(sp)
 200c4e0:	dc000017 	ldw	r16,0(sp)
 200c4e4:	dec00a04 	addi	sp,sp,40
 200c4e8:	f800283a 	ret

0200c4ec <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 200c4ec:	deffef04 	addi	sp,sp,-68
 200c4f0:	dfc01015 	stw	ra,64(sp)
 200c4f4:	df000f15 	stw	fp,60(sp)
 200c4f8:	df000f04 	addi	fp,sp,60
 200c4fc:	e13ffc15 	stw	r4,-16(fp)
 200c500:	e17ffd15 	stw	r5,-12(fp)
 200c504:	e1bffe15 	stw	r6,-8(fp)
 200c508:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 200c50c:	e0bffd17 	ldw	r2,-12(fp)
 200c510:	e0bffa15 	stw	r2,-24(fp)
 200c514:	e0bffe17 	ldw	r2,-8(fp)
 200c518:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 200c51c:	e0bffb17 	ldw	r2,-20(fp)
 200c520:	1000090e 	bge	r2,zero,200c548 <cvt+0x5c>
		value = -value;
 200c524:	e0bffd17 	ldw	r2,-12(fp)
 200c528:	e0bffd15 	stw	r2,-12(fp)
 200c52c:	e0bffe17 	ldw	r2,-8(fp)
 200c530:	10a0003c 	xorhi	r2,r2,32768
 200c534:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 200c538:	e0800317 	ldw	r2,12(fp)
 200c53c:	00c00b44 	movi	r3,45
 200c540:	10c00005 	stb	r3,0(r2)
 200c544:	00000206 	br	200c550 <cvt+0x64>
	} else
		*sign = '\000';
 200c548:	e0800317 	ldw	r2,12(fp)
 200c54c:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 200c550:	e0800517 	ldw	r2,20(fp)
 200c554:	108019a0 	cmpeqi	r2,r2,102
 200c558:	1000031e 	bne	r2,zero,200c568 <cvt+0x7c>
 200c55c:	e0800517 	ldw	r2,20(fp)
 200c560:	10801198 	cmpnei	r2,r2,70
 200c564:	1000031e 	bne	r2,zero,200c574 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 200c568:	008000c4 	movi	r2,3
 200c56c:	e0bff515 	stw	r2,-44(fp)
 200c570:	00000b06 	br	200c5a0 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 200c574:	e0800517 	ldw	r2,20(fp)
 200c578:	10801960 	cmpeqi	r2,r2,101
 200c57c:	1000031e 	bne	r2,zero,200c58c <cvt+0xa0>
 200c580:	e0800517 	ldw	r2,20(fp)
 200c584:	10801158 	cmpnei	r2,r2,69
 200c588:	1000031e 	bne	r2,zero,200c598 <cvt+0xac>
			ndigits++;
 200c58c:	e0bfff17 	ldw	r2,-4(fp)
 200c590:	10800044 	addi	r2,r2,1
 200c594:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 200c598:	00800084 	movi	r2,2
 200c59c:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 200c5a0:	e0bff904 	addi	r2,fp,-28
 200c5a4:	d8800315 	stw	r2,12(sp)
 200c5a8:	e0bff804 	addi	r2,fp,-32
 200c5ac:	d8800215 	stw	r2,8(sp)
 200c5b0:	e0800417 	ldw	r2,16(fp)
 200c5b4:	d8800115 	stw	r2,4(sp)
 200c5b8:	e0bfff17 	ldw	r2,-4(fp)
 200c5bc:	d8800015 	stw	r2,0(sp)
 200c5c0:	e1fff517 	ldw	r7,-44(fp)
 200c5c4:	e17ffd17 	ldw	r5,-12(fp)
 200c5c8:	e1bffe17 	ldw	r6,-8(fp)
 200c5cc:	e13ffc17 	ldw	r4,-16(fp)
 200c5d0:	200cd8c0 	call	200cd8c <_dtoa_r>
 200c5d4:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 200c5d8:	e0800517 	ldw	r2,20(fp)
 200c5dc:	108019e0 	cmpeqi	r2,r2,103
 200c5e0:	1000031e 	bne	r2,zero,200c5f0 <cvt+0x104>
 200c5e4:	e0800517 	ldw	r2,20(fp)
 200c5e8:	108011d8 	cmpnei	r2,r2,71
 200c5ec:	1000031e 	bne	r2,zero,200c5fc <cvt+0x110>
 200c5f0:	e0800217 	ldw	r2,8(fp)
 200c5f4:	1080004c 	andi	r2,r2,1
 200c5f8:	10003326 	beq	r2,zero,200c6c8 <cvt+0x1dc>
		bp = digits + ndigits;
 200c5fc:	e0bfff17 	ldw	r2,-4(fp)
 200c600:	e0fff717 	ldw	r3,-36(fp)
 200c604:	1885883a 	add	r2,r3,r2
 200c608:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 200c60c:	e0800517 	ldw	r2,20(fp)
 200c610:	108019a0 	cmpeqi	r2,r2,102
 200c614:	1000031e 	bne	r2,zero,200c624 <cvt+0x138>
 200c618:	e0800517 	ldw	r2,20(fp)
 200c61c:	10801198 	cmpnei	r2,r2,70
 200c620:	1000181e 	bne	r2,zero,200c684 <cvt+0x198>
			if (*digits == '0' && value)
 200c624:	e0bff717 	ldw	r2,-36(fp)
 200c628:	10800003 	ldbu	r2,0(r2)
 200c62c:	10803fcc 	andi	r2,r2,255
 200c630:	1080201c 	xori	r2,r2,128
 200c634:	10bfe004 	addi	r2,r2,-128
 200c638:	10800c18 	cmpnei	r2,r2,48
 200c63c:	10000b1e 	bne	r2,zero,200c66c <cvt+0x180>
 200c640:	000d883a 	mov	r6,zero
 200c644:	000f883a 	mov	r7,zero
 200c648:	e13ffd17 	ldw	r4,-12(fp)
 200c64c:	e17ffe17 	ldw	r5,-8(fp)
 200c650:	20086d80 	call	20086d8 <__eqdf2>
 200c654:	10000526 	beq	r2,zero,200c66c <cvt+0x180>
				*decpt = -ndigits + 1;
 200c658:	00c00044 	movi	r3,1
 200c65c:	e0bfff17 	ldw	r2,-4(fp)
 200c660:	1887c83a 	sub	r3,r3,r2
 200c664:	e0800417 	ldw	r2,16(fp)
 200c668:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 200c66c:	e0800417 	ldw	r2,16(fp)
 200c670:	10800017 	ldw	r2,0(r2)
 200c674:	1007883a 	mov	r3,r2
 200c678:	e0bff617 	ldw	r2,-40(fp)
 200c67c:	10c5883a 	add	r2,r2,r3
 200c680:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 200c684:	000d883a 	mov	r6,zero
 200c688:	000f883a 	mov	r7,zero
 200c68c:	e13ffd17 	ldw	r4,-12(fp)
 200c690:	e17ffe17 	ldw	r5,-8(fp)
 200c694:	20086d80 	call	20086d8 <__eqdf2>
 200c698:	1000081e 	bne	r2,zero,200c6bc <cvt+0x1d0>
			rve = bp;
 200c69c:	e0bff617 	ldw	r2,-40(fp)
 200c6a0:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 200c6a4:	00000506 	br	200c6bc <cvt+0x1d0>
			*rve++ = '0';
 200c6a8:	e0bff917 	ldw	r2,-28(fp)
 200c6ac:	10c00044 	addi	r3,r2,1
 200c6b0:	e0fff915 	stw	r3,-28(fp)
 200c6b4:	00c00c04 	movi	r3,48
 200c6b8:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 200c6bc:	e0fff917 	ldw	r3,-28(fp)
 200c6c0:	e0bff617 	ldw	r2,-40(fp)
 200c6c4:	18bff836 	bltu	r3,r2,200c6a8 <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 200c6c8:	e0bff917 	ldw	r2,-28(fp)
 200c6cc:	1007883a 	mov	r3,r2
 200c6d0:	e0bff717 	ldw	r2,-36(fp)
 200c6d4:	1887c83a 	sub	r3,r3,r2
 200c6d8:	e0800617 	ldw	r2,24(fp)
 200c6dc:	10c00015 	stw	r3,0(r2)
	return (digits);
 200c6e0:	e0bff717 	ldw	r2,-36(fp)
}
 200c6e4:	e037883a 	mov	sp,fp
 200c6e8:	dfc00117 	ldw	ra,4(sp)
 200c6ec:	df000017 	ldw	fp,0(sp)
 200c6f0:	dec00204 	addi	sp,sp,8
 200c6f4:	f800283a 	ret

0200c6f8 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 200c6f8:	defff704 	addi	sp,sp,-36
 200c6fc:	dfc00815 	stw	ra,32(sp)
 200c700:	df000715 	stw	fp,28(sp)
 200c704:	dc400615 	stw	r17,24(sp)
 200c708:	dc000515 	stw	r16,20(sp)
 200c70c:	df000704 	addi	fp,sp,28
 200c710:	e13ffb15 	stw	r4,-20(fp)
 200c714:	e17ffc15 	stw	r5,-16(fp)
 200c718:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 200c71c:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 200c720:	8805883a 	mov	r2,r17
 200c724:	14400044 	addi	r17,r2,1
 200c728:	e0fffd17 	ldw	r3,-12(fp)
 200c72c:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 200c730:	e0bffc17 	ldw	r2,-16(fp)
 200c734:	1000080e 	bge	r2,zero,200c758 <exponent+0x60>
		exp = -exp;
 200c738:	e0bffc17 	ldw	r2,-16(fp)
 200c73c:	0085c83a 	sub	r2,zero,r2
 200c740:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 200c744:	8805883a 	mov	r2,r17
 200c748:	14400044 	addi	r17,r2,1
 200c74c:	00c00b44 	movi	r3,45
 200c750:	10c00005 	stb	r3,0(r2)
 200c754:	00000406 	br	200c768 <exponent+0x70>
	}
	else
		*p++ = '+';
 200c758:	8805883a 	mov	r2,r17
 200c75c:	14400044 	addi	r17,r2,1
 200c760:	00c00ac4 	movi	r3,43
 200c764:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 200c768:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 200c76c:	e0bffc17 	ldw	r2,-16(fp)
 200c770:	10800290 	cmplti	r2,r2,10
 200c774:	10001d1e 	bne	r2,zero,200c7ec <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 200c778:	843fffc4 	addi	r16,r16,-1
 200c77c:	e0bffc17 	ldw	r2,-16(fp)
 200c780:	01400284 	movi	r5,10
 200c784:	1009883a 	mov	r4,r2
 200c788:	20074140 	call	2007414 <__modsi3>
 200c78c:	10800c04 	addi	r2,r2,48
 200c790:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 200c794:	e0bffc17 	ldw	r2,-16(fp)
 200c798:	01400284 	movi	r5,10
 200c79c:	1009883a 	mov	r4,r2
 200c7a0:	20073900 	call	2007390 <__divsi3>
 200c7a4:	e0bffc15 	stw	r2,-16(fp)
 200c7a8:	e0bffc17 	ldw	r2,-16(fp)
 200c7ac:	10800288 	cmpgei	r2,r2,10
 200c7b0:	103ff11e 	bne	r2,zero,200c778 <exponent+0x80>
		*--t = to_char (exp);
 200c7b4:	843fffc4 	addi	r16,r16,-1
 200c7b8:	e0bffc17 	ldw	r2,-16(fp)
 200c7bc:	10800c04 	addi	r2,r2,48
 200c7c0:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 200c7c4:	00000606 	br	200c7e0 <exponent+0xe8>
 200c7c8:	8805883a 	mov	r2,r17
 200c7cc:	14400044 	addi	r17,r2,1
 200c7d0:	8007883a 	mov	r3,r16
 200c7d4:	1c000044 	addi	r16,r3,1
 200c7d8:	18c00003 	ldbu	r3,0(r3)
 200c7dc:	10c00005 	stb	r3,0(r2)
 200c7e0:	e0bffac4 	addi	r2,fp,-21
 200c7e4:	80bff836 	bltu	r16,r2,200c7c8 <exponent+0xd0>
 200c7e8:	00000906 	br	200c810 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 200c7ec:	8805883a 	mov	r2,r17
 200c7f0:	14400044 	addi	r17,r2,1
 200c7f4:	00c00c04 	movi	r3,48
 200c7f8:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 200c7fc:	8805883a 	mov	r2,r17
 200c800:	14400044 	addi	r17,r2,1
 200c804:	e0fffc17 	ldw	r3,-16(fp)
 200c808:	18c00c04 	addi	r3,r3,48
 200c80c:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 200c810:	8807883a 	mov	r3,r17
 200c814:	e0bffb17 	ldw	r2,-20(fp)
 200c818:	1885c83a 	sub	r2,r3,r2
}
 200c81c:	e6fffe04 	addi	sp,fp,-8
 200c820:	dfc00317 	ldw	ra,12(sp)
 200c824:	df000217 	ldw	fp,8(sp)
 200c828:	dc400117 	ldw	r17,4(sp)
 200c82c:	dc000017 	ldw	r16,0(sp)
 200c830:	dec00404 	addi	sp,sp,16
 200c834:	f800283a 	ret

0200c838 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200c838:	defffb04 	addi	sp,sp,-20
 200c83c:	dfc00415 	stw	ra,16(sp)
 200c840:	df000315 	stw	fp,12(sp)
 200c844:	dc000215 	stw	r16,8(sp)
 200c848:	df000304 	addi	fp,sp,12
 200c84c:	e13ffe15 	stw	r4,-8(fp)
 200c850:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 200c854:	d0a03017 	ldw	r2,-32576(gp)
 200c858:	e0bffd15 	stw	r2,-12(fp)
 200c85c:	e0bffd17 	ldw	r2,-12(fp)
 200c860:	10000526 	beq	r2,zero,200c878 <__swsetup_r+0x40>
 200c864:	e0bffd17 	ldw	r2,-12(fp)
 200c868:	10800e17 	ldw	r2,56(r2)
 200c86c:	1000021e 	bne	r2,zero,200c878 <__swsetup_r+0x40>
 200c870:	e13ffd17 	ldw	r4,-12(fp)
 200c874:	200f0880 	call	200f088 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 200c878:	8080030b 	ldhu	r2,12(r16)
 200c87c:	10bfffcc 	andi	r2,r2,65535
 200c880:	1080020c 	andi	r2,r2,8
 200c884:	1000241e 	bne	r2,zero,200c918 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 200c888:	8080030b 	ldhu	r2,12(r16)
 200c88c:	10bfffcc 	andi	r2,r2,65535
 200c890:	1080040c 	andi	r2,r2,16
 200c894:	1000081e 	bne	r2,zero,200c8b8 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 200c898:	e0bffe17 	ldw	r2,-8(fp)
 200c89c:	00c00244 	movi	r3,9
 200c8a0:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 200c8a4:	8080030b 	ldhu	r2,12(r16)
 200c8a8:	10801014 	ori	r2,r2,64
 200c8ac:	8080030d 	sth	r2,12(r16)
	  return EOF;
 200c8b0:	00bfffc4 	movi	r2,-1
 200c8b4:	00004206 	br	200c9c0 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 200c8b8:	8080030b 	ldhu	r2,12(r16)
 200c8bc:	10bfffcc 	andi	r2,r2,65535
 200c8c0:	1080010c 	andi	r2,r2,4
 200c8c4:	10001126 	beq	r2,zero,200c90c <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 200c8c8:	80800c17 	ldw	r2,48(r16)
 200c8cc:	10000826 	beq	r2,zero,200c8f0 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 200c8d0:	80c00c17 	ldw	r3,48(r16)
 200c8d4:	80801004 	addi	r2,r16,64
 200c8d8:	18800426 	beq	r3,r2,200c8ec <__swsetup_r+0xb4>
 200c8dc:	80800c17 	ldw	r2,48(r16)
 200c8e0:	100b883a 	mov	r5,r2
 200c8e4:	e13ffe17 	ldw	r4,-8(fp)
 200c8e8:	200f2a80 	call	200f2a8 <_free_r>
 200c8ec:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 200c8f0:	80c0030b 	ldhu	r3,12(r16)
 200c8f4:	00bff6c4 	movi	r2,-37
 200c8f8:	1884703a 	and	r2,r3,r2
 200c8fc:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 200c900:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 200c904:	80800417 	ldw	r2,16(r16)
 200c908:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 200c90c:	8080030b 	ldhu	r2,12(r16)
 200c910:	10800214 	ori	r2,r2,8
 200c914:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 200c918:	80800417 	ldw	r2,16(r16)
 200c91c:	10000b1e 	bne	r2,zero,200c94c <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 200c920:	8080030b 	ldhu	r2,12(r16)
 200c924:	10bfffcc 	andi	r2,r2,65535
 200c928:	1080800c 	andi	r2,r2,512
 200c92c:	10000426 	beq	r2,zero,200c940 <__swsetup_r+0x108>
 200c930:	8080030b 	ldhu	r2,12(r16)
 200c934:	10bfffcc 	andi	r2,r2,65535
 200c938:	1080200c 	andi	r2,r2,128
 200c93c:	10000326 	beq	r2,zero,200c94c <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 200c940:	800b883a 	mov	r5,r16
 200c944:	e13ffe17 	ldw	r4,-8(fp)
 200c948:	20103080 	call	2010308 <__smakebuf_r>

  if (fp->_flags & __SLBF)
 200c94c:	8080030b 	ldhu	r2,12(r16)
 200c950:	10bfffcc 	andi	r2,r2,65535
 200c954:	1080004c 	andi	r2,r2,1
 200c958:	10000526 	beq	r2,zero,200c970 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 200c95c:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 200c960:	80800517 	ldw	r2,20(r16)
 200c964:	0085c83a 	sub	r2,zero,r2
 200c968:	80800615 	stw	r2,24(r16)
 200c96c:	00000806 	br	200c990 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 200c970:	8080030b 	ldhu	r2,12(r16)
 200c974:	10bfffcc 	andi	r2,r2,65535
 200c978:	1080008c 	andi	r2,r2,2
 200c97c:	1000021e 	bne	r2,zero,200c988 <__swsetup_r+0x150>
 200c980:	80800517 	ldw	r2,20(r16)
 200c984:	00000106 	br	200c98c <__swsetup_r+0x154>
 200c988:	0005883a 	mov	r2,zero
 200c98c:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 200c990:	80800417 	ldw	r2,16(r16)
 200c994:	1000091e 	bne	r2,zero,200c9bc <__swsetup_r+0x184>
 200c998:	8080030b 	ldhu	r2,12(r16)
 200c99c:	10bfffcc 	andi	r2,r2,65535
 200c9a0:	1080200c 	andi	r2,r2,128
 200c9a4:	10000526 	beq	r2,zero,200c9bc <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 200c9a8:	8080030b 	ldhu	r2,12(r16)
 200c9ac:	10801014 	ori	r2,r2,64
 200c9b0:	8080030d 	sth	r2,12(r16)
      return EOF;
 200c9b4:	00bfffc4 	movi	r2,-1
 200c9b8:	00000106 	br	200c9c0 <__swsetup_r+0x188>
    }
  return 0;
 200c9bc:	0005883a 	mov	r2,zero
}
 200c9c0:	e6ffff04 	addi	sp,fp,-4
 200c9c4:	dfc00217 	ldw	ra,8(sp)
 200c9c8:	df000117 	ldw	fp,4(sp)
 200c9cc:	dc000017 	ldw	r16,0(sp)
 200c9d0:	dec00304 	addi	sp,sp,12
 200c9d4:	f800283a 	ret

0200c9d8 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 200c9d8:	deffef04 	addi	sp,sp,-68
 200c9dc:	dfc01015 	stw	ra,64(sp)
 200c9e0:	df000f15 	stw	fp,60(sp)
 200c9e4:	df000f04 	addi	fp,sp,60
 200c9e8:	e13ffe15 	stw	r4,-8(fp)
 200c9ec:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 200c9f0:	e0bfff17 	ldw	r2,-4(fp)
 200c9f4:	10800417 	ldw	r2,16(r2)
 200c9f8:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 200c9fc:	e0bffe17 	ldw	r2,-8(fp)
 200ca00:	10c00417 	ldw	r3,16(r2)
 200ca04:	e0bff117 	ldw	r2,-60(fp)
 200ca08:	1880020e 	bge	r3,r2,200ca14 <quorem+0x3c>
    return 0;
 200ca0c:	0005883a 	mov	r2,zero
 200ca10:	0000d906 	br	200cd78 <quorem+0x3a0>
  sx = S->_x;
 200ca14:	e0bfff17 	ldw	r2,-4(fp)
 200ca18:	10800504 	addi	r2,r2,20
 200ca1c:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 200ca20:	e0bff117 	ldw	r2,-60(fp)
 200ca24:	10bfffc4 	addi	r2,r2,-1
 200ca28:	e0bff115 	stw	r2,-60(fp)
 200ca2c:	e0bff117 	ldw	r2,-60(fp)
 200ca30:	1085883a 	add	r2,r2,r2
 200ca34:	1085883a 	add	r2,r2,r2
 200ca38:	1007883a 	mov	r3,r2
 200ca3c:	e0bff717 	ldw	r2,-36(fp)
 200ca40:	10c5883a 	add	r2,r2,r3
 200ca44:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 200ca48:	e0bffe17 	ldw	r2,-8(fp)
 200ca4c:	10800504 	addi	r2,r2,20
 200ca50:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 200ca54:	e0bff117 	ldw	r2,-60(fp)
 200ca58:	1085883a 	add	r2,r2,r2
 200ca5c:	1085883a 	add	r2,r2,r2
 200ca60:	1007883a 	mov	r3,r2
 200ca64:	e0bff517 	ldw	r2,-44(fp)
 200ca68:	10c5883a 	add	r2,r2,r3
 200ca6c:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 200ca70:	e0bff617 	ldw	r2,-40(fp)
 200ca74:	10c00017 	ldw	r3,0(r2)
 200ca78:	e0bff817 	ldw	r2,-32(fp)
 200ca7c:	10800017 	ldw	r2,0(r2)
 200ca80:	10800044 	addi	r2,r2,1
 200ca84:	100b883a 	mov	r5,r2
 200ca88:	1809883a 	mov	r4,r3
 200ca8c:	20074880 	call	2007488 <__udivsi3>
 200ca90:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 200ca94:	e0bff417 	ldw	r2,-48(fp)
 200ca98:	10005326 	beq	r2,zero,200cbe8 <quorem+0x210>
    {
      borrow = 0;
 200ca9c:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200caa0:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 200caa4:	e0bff717 	ldw	r2,-36(fp)
 200caa8:	10c00104 	addi	r3,r2,4
 200caac:	e0fff715 	stw	r3,-36(fp)
 200cab0:	10800017 	ldw	r2,0(r2)
 200cab4:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 200cab8:	e0bff917 	ldw	r2,-28(fp)
 200cabc:	10ffffcc 	andi	r3,r2,65535
 200cac0:	e0bff417 	ldw	r2,-48(fp)
 200cac4:	1887383a 	mul	r3,r3,r2
 200cac8:	e0bff317 	ldw	r2,-52(fp)
 200cacc:	1885883a 	add	r2,r3,r2
 200cad0:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 200cad4:	e0bff917 	ldw	r2,-28(fp)
 200cad8:	1006d43a 	srli	r3,r2,16
 200cadc:	e0bff417 	ldw	r2,-48(fp)
 200cae0:	1887383a 	mul	r3,r3,r2
 200cae4:	e0bffa17 	ldw	r2,-24(fp)
 200cae8:	1004d43a 	srli	r2,r2,16
 200caec:	1885883a 	add	r2,r3,r2
 200caf0:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 200caf4:	e0bffb17 	ldw	r2,-20(fp)
 200caf8:	1004d43a 	srli	r2,r2,16
 200cafc:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200cb00:	e0bff517 	ldw	r2,-44(fp)
 200cb04:	10800017 	ldw	r2,0(r2)
 200cb08:	10ffffcc 	andi	r3,r2,65535
 200cb0c:	e0bffa17 	ldw	r2,-24(fp)
 200cb10:	10bfffcc 	andi	r2,r2,65535
 200cb14:	1887c83a 	sub	r3,r3,r2
 200cb18:	e0bff217 	ldw	r2,-56(fp)
 200cb1c:	1885883a 	add	r2,r3,r2
 200cb20:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 200cb24:	e0bffc17 	ldw	r2,-16(fp)
 200cb28:	1005d43a 	srai	r2,r2,16
 200cb2c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200cb30:	e0bff517 	ldw	r2,-44(fp)
 200cb34:	10800017 	ldw	r2,0(r2)
 200cb38:	1006d43a 	srli	r3,r2,16
 200cb3c:	e0bffb17 	ldw	r2,-20(fp)
 200cb40:	10bfffcc 	andi	r2,r2,65535
 200cb44:	1887c83a 	sub	r3,r3,r2
 200cb48:	e0bff217 	ldw	r2,-56(fp)
 200cb4c:	1885883a 	add	r2,r3,r2
 200cb50:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 200cb54:	e0bffd17 	ldw	r2,-12(fp)
 200cb58:	1005d43a 	srai	r2,r2,16
 200cb5c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200cb60:	e0bff517 	ldw	r2,-44(fp)
 200cb64:	10c00104 	addi	r3,r2,4
 200cb68:	e0fff515 	stw	r3,-44(fp)
 200cb6c:	e0fffd17 	ldw	r3,-12(fp)
 200cb70:	1808943a 	slli	r4,r3,16
 200cb74:	e0fffc17 	ldw	r3,-16(fp)
 200cb78:	18ffffcc 	andi	r3,r3,65535
 200cb7c:	20c6b03a 	or	r3,r4,r3
 200cb80:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 200cb84:	e0bff717 	ldw	r2,-36(fp)
 200cb88:	e0fff817 	ldw	r3,-32(fp)
 200cb8c:	18bfc52e 	bgeu	r3,r2,200caa4 <quorem+0xcc>
      if (!*bxe)
 200cb90:	e0bff617 	ldw	r2,-40(fp)
 200cb94:	10800017 	ldw	r2,0(r2)
 200cb98:	1000131e 	bne	r2,zero,200cbe8 <quorem+0x210>
	{
	  bx = b->_x;
 200cb9c:	e0bffe17 	ldw	r2,-8(fp)
 200cba0:	10800504 	addi	r2,r2,20
 200cba4:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 200cba8:	00000306 	br	200cbb8 <quorem+0x1e0>
	    --n;
 200cbac:	e0bff117 	ldw	r2,-60(fp)
 200cbb0:	10bfffc4 	addi	r2,r2,-1
 200cbb4:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 200cbb8:	e0bff617 	ldw	r2,-40(fp)
 200cbbc:	10bfff04 	addi	r2,r2,-4
 200cbc0:	e0bff615 	stw	r2,-40(fp)
 200cbc4:	e0bff617 	ldw	r2,-40(fp)
 200cbc8:	e0fff517 	ldw	r3,-44(fp)
 200cbcc:	1880032e 	bgeu	r3,r2,200cbdc <quorem+0x204>
 200cbd0:	e0bff617 	ldw	r2,-40(fp)
 200cbd4:	10800017 	ldw	r2,0(r2)
 200cbd8:	103ff426 	beq	r2,zero,200cbac <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 200cbdc:	e0bffe17 	ldw	r2,-8(fp)
 200cbe0:	e0fff117 	ldw	r3,-60(fp)
 200cbe4:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 200cbe8:	e17fff17 	ldw	r5,-4(fp)
 200cbec:	e13ffe17 	ldw	r4,-8(fp)
 200cbf0:	20126080 	call	2012608 <__mcmp>
 200cbf4:	10005f16 	blt	r2,zero,200cd74 <quorem+0x39c>
    {
      q++;
 200cbf8:	e0bff417 	ldw	r2,-48(fp)
 200cbfc:	10800044 	addi	r2,r2,1
 200cc00:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 200cc04:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 200cc08:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 200cc0c:	e0bffe17 	ldw	r2,-8(fp)
 200cc10:	10800504 	addi	r2,r2,20
 200cc14:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 200cc18:	e0bfff17 	ldw	r2,-4(fp)
 200cc1c:	10800504 	addi	r2,r2,20
 200cc20:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 200cc24:	e0bff717 	ldw	r2,-36(fp)
 200cc28:	10c00104 	addi	r3,r2,4
 200cc2c:	e0fff715 	stw	r3,-36(fp)
 200cc30:	10800017 	ldw	r2,0(r2)
 200cc34:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 200cc38:	e0bff917 	ldw	r2,-28(fp)
 200cc3c:	10ffffcc 	andi	r3,r2,65535
 200cc40:	e0bff317 	ldw	r2,-52(fp)
 200cc44:	1885883a 	add	r2,r3,r2
 200cc48:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 200cc4c:	e0bff917 	ldw	r2,-28(fp)
 200cc50:	1006d43a 	srli	r3,r2,16
 200cc54:	e0bffa17 	ldw	r2,-24(fp)
 200cc58:	1004d43a 	srli	r2,r2,16
 200cc5c:	1885883a 	add	r2,r3,r2
 200cc60:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 200cc64:	e0bffb17 	ldw	r2,-20(fp)
 200cc68:	1004d43a 	srli	r2,r2,16
 200cc6c:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 200cc70:	e0bff517 	ldw	r2,-44(fp)
 200cc74:	10800017 	ldw	r2,0(r2)
 200cc78:	10ffffcc 	andi	r3,r2,65535
 200cc7c:	e0bffa17 	ldw	r2,-24(fp)
 200cc80:	10bfffcc 	andi	r2,r2,65535
 200cc84:	1887c83a 	sub	r3,r3,r2
 200cc88:	e0bff217 	ldw	r2,-56(fp)
 200cc8c:	1885883a 	add	r2,r3,r2
 200cc90:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 200cc94:	e0bffc17 	ldw	r2,-16(fp)
 200cc98:	1005d43a 	srai	r2,r2,16
 200cc9c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 200cca0:	e0bff517 	ldw	r2,-44(fp)
 200cca4:	10800017 	ldw	r2,0(r2)
 200cca8:	1006d43a 	srli	r3,r2,16
 200ccac:	e0bffb17 	ldw	r2,-20(fp)
 200ccb0:	10bfffcc 	andi	r2,r2,65535
 200ccb4:	1887c83a 	sub	r3,r3,r2
 200ccb8:	e0bff217 	ldw	r2,-56(fp)
 200ccbc:	1885883a 	add	r2,r3,r2
 200ccc0:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 200ccc4:	e0bffd17 	ldw	r2,-12(fp)
 200ccc8:	1005d43a 	srai	r2,r2,16
 200cccc:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 200ccd0:	e0bff517 	ldw	r2,-44(fp)
 200ccd4:	10c00104 	addi	r3,r2,4
 200ccd8:	e0fff515 	stw	r3,-44(fp)
 200ccdc:	e0fffd17 	ldw	r3,-12(fp)
 200cce0:	1808943a 	slli	r4,r3,16
 200cce4:	e0fffc17 	ldw	r3,-16(fp)
 200cce8:	18ffffcc 	andi	r3,r3,65535
 200ccec:	20c6b03a 	or	r3,r4,r3
 200ccf0:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 200ccf4:	e0bff717 	ldw	r2,-36(fp)
 200ccf8:	e0fff817 	ldw	r3,-32(fp)
 200ccfc:	18bfc92e 	bgeu	r3,r2,200cc24 <quorem+0x24c>
      bx = b->_x;
 200cd00:	e0bffe17 	ldw	r2,-8(fp)
 200cd04:	10800504 	addi	r2,r2,20
 200cd08:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 200cd0c:	e0bff117 	ldw	r2,-60(fp)
 200cd10:	1085883a 	add	r2,r2,r2
 200cd14:	1085883a 	add	r2,r2,r2
 200cd18:	1007883a 	mov	r3,r2
 200cd1c:	e0bff517 	ldw	r2,-44(fp)
 200cd20:	10c5883a 	add	r2,r2,r3
 200cd24:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 200cd28:	e0bff617 	ldw	r2,-40(fp)
 200cd2c:	10800017 	ldw	r2,0(r2)
 200cd30:	1000101e 	bne	r2,zero,200cd74 <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 200cd34:	00000306 	br	200cd44 <quorem+0x36c>
	    --n;
 200cd38:	e0bff117 	ldw	r2,-60(fp)
 200cd3c:	10bfffc4 	addi	r2,r2,-1
 200cd40:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 200cd44:	e0bff617 	ldw	r2,-40(fp)
 200cd48:	10bfff04 	addi	r2,r2,-4
 200cd4c:	e0bff615 	stw	r2,-40(fp)
 200cd50:	e0bff617 	ldw	r2,-40(fp)
 200cd54:	e0fff517 	ldw	r3,-44(fp)
 200cd58:	1880032e 	bgeu	r3,r2,200cd68 <quorem+0x390>
 200cd5c:	e0bff617 	ldw	r2,-40(fp)
 200cd60:	10800017 	ldw	r2,0(r2)
 200cd64:	103ff426 	beq	r2,zero,200cd38 <quorem+0x360>
	    --n;
	  b->_wds = n;
 200cd68:	e0bffe17 	ldw	r2,-8(fp)
 200cd6c:	e0fff117 	ldw	r3,-60(fp)
 200cd70:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 200cd74:	e0bff417 	ldw	r2,-48(fp)
}
 200cd78:	e037883a 	mov	sp,fp
 200cd7c:	dfc00117 	ldw	ra,4(sp)
 200cd80:	df000017 	ldw	fp,0(sp)
 200cd84:	dec00204 	addi	sp,sp,8
 200cd88:	f800283a 	ret

0200cd8c <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 200cd8c:	deffcc04 	addi	sp,sp,-208
 200cd90:	dfc03315 	stw	ra,204(sp)
 200cd94:	df003215 	stw	fp,200(sp)
 200cd98:	dcc03115 	stw	r19,196(sp)
 200cd9c:	dc803015 	stw	r18,192(sp)
 200cda0:	dc402f15 	stw	r17,188(sp)
 200cda4:	dc002e15 	stw	r16,184(sp)
 200cda8:	df003204 	addi	fp,sp,200
 200cdac:	e13ff815 	stw	r4,-32(fp)
 200cdb0:	e17ff915 	stw	r5,-28(fp)
 200cdb4:	e1bffa15 	stw	r6,-24(fp)
 200cdb8:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 200cdbc:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 200cdc0:	e0bff917 	ldw	r2,-28(fp)
 200cdc4:	e0bff215 	stw	r2,-56(fp)
 200cdc8:	e0bffa17 	ldw	r2,-24(fp)
 200cdcc:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 200cdd0:	e0bff817 	ldw	r2,-32(fp)
 200cdd4:	10801017 	ldw	r2,64(r2)
 200cdd8:	10001326 	beq	r2,zero,200ce28 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 200cddc:	e0bff817 	ldw	r2,-32(fp)
 200cde0:	10801017 	ldw	r2,64(r2)
 200cde4:	e0fff817 	ldw	r3,-32(fp)
 200cde8:	18c01117 	ldw	r3,68(r3)
 200cdec:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 200cdf0:	e0bff817 	ldw	r2,-32(fp)
 200cdf4:	10801017 	ldw	r2,64(r2)
 200cdf8:	e0fff817 	ldw	r3,-32(fp)
 200cdfc:	18c01117 	ldw	r3,68(r3)
 200ce00:	01000044 	movi	r4,1
 200ce04:	20c6983a 	sll	r3,r4,r3
 200ce08:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 200ce0c:	e0bff817 	ldw	r2,-32(fp)
 200ce10:	10801017 	ldw	r2,64(r2)
 200ce14:	100b883a 	mov	r5,r2
 200ce18:	e13ff817 	ldw	r4,-32(fp)
 200ce1c:	20119580 	call	2011958 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 200ce20:	e0bff817 	ldw	r2,-32(fp)
 200ce24:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 200ce28:	e0bff317 	ldw	r2,-52(fp)
 200ce2c:	1000090e 	bge	r2,zero,200ce54 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 200ce30:	e0800417 	ldw	r2,16(fp)
 200ce34:	00c00044 	movi	r3,1
 200ce38:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 200ce3c:	e0fff317 	ldw	r3,-52(fp)
 200ce40:	00a00034 	movhi	r2,32768
 200ce44:	10bfffc4 	addi	r2,r2,-1
 200ce48:	1884703a 	and	r2,r3,r2
 200ce4c:	e0bff315 	stw	r2,-52(fp)
 200ce50:	00000206 	br	200ce5c <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 200ce54:	e0800417 	ldw	r2,16(fp)
 200ce58:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 200ce5c:	e0bff317 	ldw	r2,-52(fp)
 200ce60:	10dffc2c 	andhi	r3,r2,32752
 200ce64:	009ffc34 	movhi	r2,32752
 200ce68:	1880221e 	bne	r3,r2,200cef4 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 200ce6c:	e0800317 	ldw	r2,12(fp)
 200ce70:	00c9c3c4 	movi	r3,9999
 200ce74:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 200ce78:	e0bff217 	ldw	r2,-56(fp)
 200ce7c:	1000081e 	bne	r2,zero,200cea0 <_dtoa_r+0x114>
 200ce80:	e0fff317 	ldw	r3,-52(fp)
 200ce84:	00800434 	movhi	r2,16
 200ce88:	10bfffc4 	addi	r2,r2,-1
 200ce8c:	1884703a 	and	r2,r3,r2
 200ce90:	1000031e 	bne	r2,zero,200cea0 <_dtoa_r+0x114>
 200ce94:	008080b4 	movhi	r2,514
 200ce98:	108c6b04 	addi	r2,r2,12716
 200ce9c:	00000206 	br	200cea8 <_dtoa_r+0x11c>
 200cea0:	008080b4 	movhi	r2,514
 200cea4:	108c6e04 	addi	r2,r2,12728
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 200cea8:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 200ceac:	e0800517 	ldw	r2,20(fp)
 200ceb0:	10000e26 	beq	r2,zero,200ceec <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 200ceb4:	e0bfe717 	ldw	r2,-100(fp)
 200ceb8:	108000c4 	addi	r2,r2,3
 200cebc:	10800003 	ldbu	r2,0(r2)
 200cec0:	10803fcc 	andi	r2,r2,255
 200cec4:	1080201c 	xori	r2,r2,128
 200cec8:	10bfe004 	addi	r2,r2,-128
 200cecc:	10000326 	beq	r2,zero,200cedc <_dtoa_r+0x150>
 200ced0:	e0bfe717 	ldw	r2,-100(fp)
 200ced4:	10800204 	addi	r2,r2,8
 200ced8:	00000206 	br	200cee4 <_dtoa_r+0x158>
 200cedc:	e0bfe717 	ldw	r2,-100(fp)
 200cee0:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 200cee4:	e0c00517 	ldw	r3,20(fp)
 200cee8:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 200ceec:	e0bfe717 	ldw	r2,-100(fp)
 200cef0:	00067b06 	br	200e8e0 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 200cef4:	e0bff217 	ldw	r2,-56(fp)
 200cef8:	e0fff317 	ldw	r3,-52(fp)
 200cefc:	000d883a 	mov	r6,zero
 200cf00:	000f883a 	mov	r7,zero
 200cf04:	1009883a 	mov	r4,r2
 200cf08:	180b883a 	mov	r5,r3
 200cf0c:	20086d80 	call	20086d8 <__eqdf2>
 200cf10:	10000e1e 	bne	r2,zero,200cf4c <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 200cf14:	e0800317 	ldw	r2,12(fp)
 200cf18:	00c00044 	movi	r3,1
 200cf1c:	10c00015 	stw	r3,0(r2)
      s = "0";
 200cf20:	008080b4 	movhi	r2,514
 200cf24:	108c6f04 	addi	r2,r2,12732
 200cf28:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 200cf2c:	e0800517 	ldw	r2,20(fp)
 200cf30:	10000426 	beq	r2,zero,200cf44 <_dtoa_r+0x1b8>
	*rve = s + 1;
 200cf34:	e0bfe717 	ldw	r2,-100(fp)
 200cf38:	10c00044 	addi	r3,r2,1
 200cf3c:	e0800517 	ldw	r2,20(fp)
 200cf40:	10c00015 	stw	r3,0(r2)
      return s;
 200cf44:	e0bfe717 	ldw	r2,-100(fp)
 200cf48:	00066506 	br	200e8e0 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 200cf4c:	e0bff217 	ldw	r2,-56(fp)
 200cf50:	e0fff317 	ldw	r3,-52(fp)
 200cf54:	e17ff104 	addi	r5,fp,-60
 200cf58:	e13ff004 	addi	r4,fp,-64
 200cf5c:	d9000015 	stw	r4,0(sp)
 200cf60:	280f883a 	mov	r7,r5
 200cf64:	100b883a 	mov	r5,r2
 200cf68:	180d883a 	mov	r6,r3
 200cf6c:	e13ff817 	ldw	r4,-32(fp)
 200cf70:	2012c900 	call	2012c90 <__d2b>
 200cf74:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 200cf78:	e0bff317 	ldw	r2,-52(fp)
 200cf7c:	1004d53a 	srli	r2,r2,20
 200cf80:	1081ffcc 	andi	r2,r2,2047
 200cf84:	e0bfd215 	stw	r2,-184(fp)
 200cf88:	e0bfd217 	ldw	r2,-184(fp)
 200cf8c:	10001126 	beq	r2,zero,200cfd4 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 200cf90:	e0bff217 	ldw	r2,-56(fp)
 200cf94:	e0fff317 	ldw	r3,-52(fp)
 200cf98:	e0bff415 	stw	r2,-48(fp)
 200cf9c:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 200cfa0:	e0fff517 	ldw	r3,-44(fp)
 200cfa4:	00800434 	movhi	r2,16
 200cfa8:	10bfffc4 	addi	r2,r2,-1
 200cfac:	1884703a 	and	r2,r3,r2
 200cfb0:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 200cfb4:	e0bff517 	ldw	r2,-44(fp)
 200cfb8:	108ffc34 	orhi	r2,r2,16368
 200cfbc:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 200cfc0:	e0bfd217 	ldw	r2,-184(fp)
 200cfc4:	10bf0044 	addi	r2,r2,-1023
 200cfc8:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 200cfcc:	e03fe015 	stw	zero,-128(fp)
 200cfd0:	00002806 	br	200d074 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 200cfd4:	e0fff017 	ldw	r3,-64(fp)
 200cfd8:	e0bff117 	ldw	r2,-60(fp)
 200cfdc:	1885883a 	add	r2,r3,r2
 200cfe0:	10810c84 	addi	r2,r2,1074
 200cfe4:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 200cfe8:	e0bfd217 	ldw	r2,-184(fp)
 200cfec:	10800850 	cmplti	r2,r2,33
 200cff0:	10000b1e 	bne	r2,zero,200d020 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 200cff4:	e0fff317 	ldw	r3,-52(fp)
 200cff8:	01001004 	movi	r4,64
 200cffc:	e0bfd217 	ldw	r2,-184(fp)
 200d000:	2085c83a 	sub	r2,r4,r2
 200d004:	1886983a 	sll	r3,r3,r2
 200d008:	e13ff217 	ldw	r4,-56(fp)
 200d00c:	e0bfd217 	ldw	r2,-184(fp)
 200d010:	10bff804 	addi	r2,r2,-32
 200d014:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 200d018:	1884b03a 	or	r2,r3,r2
 200d01c:	00000506 	br	200d034 <_dtoa_r+0x2a8>
 200d020:	e0fff217 	ldw	r3,-56(fp)
 200d024:	01000804 	movi	r4,32
 200d028:	e0bfd217 	ldw	r2,-184(fp)
 200d02c:	2085c83a 	sub	r2,r4,r2
 200d030:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 200d034:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 200d038:	e13fe817 	ldw	r4,-96(fp)
 200d03c:	20170440 	call	2017044 <__floatunsidf>
 200d040:	1009883a 	mov	r4,r2
 200d044:	180b883a 	mov	r5,r3
 200d048:	e13ff415 	stw	r4,-48(fp)
 200d04c:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 200d050:	e0fff517 	ldw	r3,-44(fp)
 200d054:	00bf8434 	movhi	r2,65040
 200d058:	1885883a 	add	r2,r3,r2
 200d05c:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 200d060:	e0bfd217 	ldw	r2,-184(fp)
 200d064:	10bef344 	addi	r2,r2,-1075
 200d068:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 200d06c:	00800044 	movi	r2,1
 200d070:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 200d074:	e0bff417 	ldw	r2,-48(fp)
 200d078:	e0fff517 	ldw	r3,-44(fp)
 200d07c:	000d883a 	mov	r6,zero
 200d080:	01cffe34 	movhi	r7,16376
 200d084:	1009883a 	mov	r4,r2
 200d088:	180b883a 	mov	r5,r3
 200d08c:	20090480 	call	2009048 <__subdf3>
 200d090:	1009883a 	mov	r4,r2
 200d094:	180b883a 	mov	r5,r3
 200d098:	2005883a 	mov	r2,r4
 200d09c:	2807883a 	mov	r3,r5
 200d0a0:	0198dbf4 	movhi	r6,25455
 200d0a4:	3190d844 	addi	r6,r6,17249
 200d0a8:	01cff4f4 	movhi	r7,16339
 200d0ac:	39e1e9c4 	addi	r7,r7,-30809
 200d0b0:	1009883a 	mov	r4,r2
 200d0b4:	180b883a 	mov	r5,r3
 200d0b8:	20089300 	call	2008930 <__muldf3>
 200d0bc:	1009883a 	mov	r4,r2
 200d0c0:	180b883a 	mov	r5,r3
 200d0c4:	2005883a 	mov	r2,r4
 200d0c8:	2807883a 	mov	r3,r5
 200d0cc:	01a2d874 	movhi	r6,35681
 200d0d0:	31b22cc4 	addi	r6,r6,-14157
 200d0d4:	01cff1f4 	movhi	r7,16327
 200d0d8:	39e28a04 	addi	r7,r7,-30168
 200d0dc:	1009883a 	mov	r4,r2
 200d0e0:	180b883a 	mov	r5,r3
 200d0e4:	20075440 	call	2007544 <__adddf3>
 200d0e8:	1009883a 	mov	r4,r2
 200d0ec:	180b883a 	mov	r5,r3
 200d0f0:	2025883a 	mov	r18,r4
 200d0f4:	2827883a 	mov	r19,r5
 200d0f8:	e13fd217 	ldw	r4,-184(fp)
 200d0fc:	2016f680 	call	2016f68 <__floatsidf>
 200d100:	1011883a 	mov	r8,r2
 200d104:	1813883a 	mov	r9,r3
 200d108:	019427f4 	movhi	r6,20639
 200d10c:	319e7ec4 	addi	r6,r6,31227
 200d110:	01cff4f4 	movhi	r7,16339
 200d114:	39d104c4 	addi	r7,r7,17427
 200d118:	4009883a 	mov	r4,r8
 200d11c:	480b883a 	mov	r5,r9
 200d120:	20089300 	call	2008930 <__muldf3>
 200d124:	1009883a 	mov	r4,r2
 200d128:	180b883a 	mov	r5,r3
 200d12c:	2005883a 	mov	r2,r4
 200d130:	2807883a 	mov	r3,r5
 200d134:	100d883a 	mov	r6,r2
 200d138:	180f883a 	mov	r7,r3
 200d13c:	9009883a 	mov	r4,r18
 200d140:	980b883a 	mov	r5,r19
 200d144:	20075440 	call	2007544 <__adddf3>
 200d148:	1009883a 	mov	r4,r2
 200d14c:	180b883a 	mov	r5,r3
 200d150:	e13fe515 	stw	r4,-108(fp)
 200d154:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 200d158:	e13fe517 	ldw	r4,-108(fp)
 200d15c:	e17fe617 	ldw	r5,-104(fp)
 200d160:	2016ee80 	call	2016ee8 <__fixdfsi>
 200d164:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 200d168:	000d883a 	mov	r6,zero
 200d16c:	000f883a 	mov	r7,zero
 200d170:	e13fe517 	ldw	r4,-108(fp)
 200d174:	e17fe617 	ldw	r5,-104(fp)
 200d178:	200883c0 	call	200883c <__ledf2>
 200d17c:	10000d0e 	bge	r2,zero,200d1b4 <_dtoa_r+0x428>
 200d180:	e13fd717 	ldw	r4,-164(fp)
 200d184:	2016f680 	call	2016f68 <__floatsidf>
 200d188:	1011883a 	mov	r8,r2
 200d18c:	1813883a 	mov	r9,r3
 200d190:	e1bfe517 	ldw	r6,-108(fp)
 200d194:	e1ffe617 	ldw	r7,-104(fp)
 200d198:	4009883a 	mov	r4,r8
 200d19c:	480b883a 	mov	r5,r9
 200d1a0:	20086d80 	call	20086d8 <__eqdf2>
 200d1a4:	10000326 	beq	r2,zero,200d1b4 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 200d1a8:	e0bfd717 	ldw	r2,-164(fp)
 200d1ac:	10bfffc4 	addi	r2,r2,-1
 200d1b0:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 200d1b4:	00800044 	movi	r2,1
 200d1b8:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 200d1bc:	e0bfd717 	ldw	r2,-164(fp)
 200d1c0:	10001616 	blt	r2,zero,200d21c <_dtoa_r+0x490>
 200d1c4:	e0bfd717 	ldw	r2,-164(fp)
 200d1c8:	108005c8 	cmpgei	r2,r2,23
 200d1cc:	1000131e 	bne	r2,zero,200d21c <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 200d1d0:	e0bff217 	ldw	r2,-56(fp)
 200d1d4:	e0fff317 	ldw	r3,-52(fp)
 200d1d8:	010080b4 	movhi	r4,514
 200d1dc:	210c7504 	addi	r4,r4,12756
 200d1e0:	e17fd717 	ldw	r5,-164(fp)
 200d1e4:	280a90fa 	slli	r5,r5,3
 200d1e8:	214d883a 	add	r6,r4,r5
 200d1ec:	31000017 	ldw	r4,0(r6)
 200d1f0:	31400117 	ldw	r5,4(r6)
 200d1f4:	200d883a 	mov	r6,r4
 200d1f8:	280f883a 	mov	r7,r5
 200d1fc:	1009883a 	mov	r4,r2
 200d200:	180b883a 	mov	r5,r3
 200d204:	200883c0 	call	200883c <__ledf2>
 200d208:	1000030e 	bge	r2,zero,200d218 <_dtoa_r+0x48c>
	k--;
 200d20c:	e0bfd717 	ldw	r2,-164(fp)
 200d210:	10bfffc4 	addi	r2,r2,-1
 200d214:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 200d218:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 200d21c:	e0fff017 	ldw	r3,-64(fp)
 200d220:	e0bfd217 	ldw	r2,-184(fp)
 200d224:	1885c83a 	sub	r2,r3,r2
 200d228:	10bfffc4 	addi	r2,r2,-1
 200d22c:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 200d230:	e0bfd617 	ldw	r2,-168(fp)
 200d234:	10000416 	blt	r2,zero,200d248 <_dtoa_r+0x4bc>
    {
      b2 = 0;
 200d238:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 200d23c:	e0bfd617 	ldw	r2,-168(fp)
 200d240:	e0bfdc15 	stw	r2,-144(fp)
 200d244:	00000406 	br	200d258 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 200d248:	e0bfd617 	ldw	r2,-168(fp)
 200d24c:	0085c83a 	sub	r2,zero,r2
 200d250:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 200d254:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 200d258:	e0bfd717 	ldw	r2,-164(fp)
 200d25c:	10000816 	blt	r2,zero,200d280 <_dtoa_r+0x4f4>
    {
      b5 = 0;
 200d260:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 200d264:	e0bfd717 	ldw	r2,-164(fp)
 200d268:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 200d26c:	e0ffdc17 	ldw	r3,-144(fp)
 200d270:	e0bfd717 	ldw	r2,-164(fp)
 200d274:	1885883a 	add	r2,r3,r2
 200d278:	e0bfdc15 	stw	r2,-144(fp)
 200d27c:	00000806 	br	200d2a0 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 200d280:	e0ffcf17 	ldw	r3,-196(fp)
 200d284:	e0bfd717 	ldw	r2,-164(fp)
 200d288:	1885c83a 	sub	r2,r3,r2
 200d28c:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 200d290:	e0bfd717 	ldw	r2,-164(fp)
 200d294:	0085c83a 	sub	r2,zero,r2
 200d298:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 200d29c:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 200d2a0:	e0bffb17 	ldw	r2,-20(fp)
 200d2a4:	10000316 	blt	r2,zero,200d2b4 <_dtoa_r+0x528>
 200d2a8:	e0bffb17 	ldw	r2,-20(fp)
 200d2ac:	10800290 	cmplti	r2,r2,10
 200d2b0:	1000011e 	bne	r2,zero,200d2b8 <_dtoa_r+0x52c>
    mode = 0;
 200d2b4:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 200d2b8:	00800044 	movi	r2,1
 200d2bc:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 200d2c0:	e0bffb17 	ldw	r2,-20(fp)
 200d2c4:	10800190 	cmplti	r2,r2,6
 200d2c8:	1000041e 	bne	r2,zero,200d2dc <_dtoa_r+0x550>
    {
      mode -= 4;
 200d2cc:	e0bffb17 	ldw	r2,-20(fp)
 200d2d0:	10bfff04 	addi	r2,r2,-4
 200d2d4:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 200d2d8:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 200d2dc:	00800044 	movi	r2,1
 200d2e0:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 200d2e4:	00bfffc4 	movi	r2,-1
 200d2e8:	e0bfd515 	stw	r2,-172(fp)
 200d2ec:	e0bfd517 	ldw	r2,-172(fp)
 200d2f0:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 200d2f4:	e0bffb17 	ldw	r2,-20(fp)
 200d2f8:	108001a8 	cmpgeui	r2,r2,6
 200d2fc:	10002c1e 	bne	r2,zero,200d3b0 <_dtoa_r+0x624>
 200d300:	e0bffb17 	ldw	r2,-20(fp)
 200d304:	100690ba 	slli	r3,r2,2
 200d308:	00808074 	movhi	r2,513
 200d30c:	10b4c704 	addi	r2,r2,-11492
 200d310:	1885883a 	add	r2,r3,r2
 200d314:	10800017 	ldw	r2,0(r2)
 200d318:	1000683a 	jmp	r2
 200d31c:	0200d334 	movhi	r8,844
 200d320:	0200d334 	movhi	r8,844
 200d324:	0200d344 	movi	r8,845
 200d328:	0200d374 	movhi	r8,845
 200d32c:	0200d348 	cmpgei	r8,zero,845
 200d330:	0200d378 	rdprs	r8,zero,845
    {
    case 0:
    case 1:
      i = 18;
 200d334:	00800484 	movi	r2,18
 200d338:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 200d33c:	e0000215 	stw	zero,8(fp)
      break;
 200d340:	00001b06 	br	200d3b0 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 200d344:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 200d348:	e0800217 	ldw	r2,8(fp)
 200d34c:	00800216 	blt	zero,r2,200d358 <_dtoa_r+0x5cc>
	ndigits = 1;
 200d350:	00800044 	movi	r2,1
 200d354:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 200d358:	e0800217 	ldw	r2,8(fp)
 200d35c:	e0bfd215 	stw	r2,-184(fp)
 200d360:	e0bfd217 	ldw	r2,-184(fp)
 200d364:	e0bfd515 	stw	r2,-172(fp)
 200d368:	e0bfd517 	ldw	r2,-172(fp)
 200d36c:	e0bfd415 	stw	r2,-176(fp)
      break;
 200d370:	00000f06 	br	200d3b0 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 200d374:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 200d378:	e0c00217 	ldw	r3,8(fp)
 200d37c:	e0bfd717 	ldw	r2,-164(fp)
 200d380:	1885883a 	add	r2,r3,r2
 200d384:	10800044 	addi	r2,r2,1
 200d388:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 200d38c:	e0bfd217 	ldw	r2,-184(fp)
 200d390:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 200d394:	e0bfd217 	ldw	r2,-184(fp)
 200d398:	10bfffc4 	addi	r2,r2,-1
 200d39c:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 200d3a0:	e0bfd217 	ldw	r2,-184(fp)
 200d3a4:	00800216 	blt	zero,r2,200d3b0 <_dtoa_r+0x624>
	i = 1;
 200d3a8:	00800044 	movi	r2,1
 200d3ac:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 200d3b0:	00800104 	movi	r2,4
 200d3b4:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200d3b8:	e0bff817 	ldw	r2,-32(fp)
 200d3bc:	10001115 	stw	zero,68(r2)
 200d3c0:	00000806 	br	200d3e4 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 200d3c4:	e0bff817 	ldw	r2,-32(fp)
 200d3c8:	10801117 	ldw	r2,68(r2)
 200d3cc:	10c00044 	addi	r3,r2,1
 200d3d0:	e0bff817 	ldw	r2,-32(fp)
 200d3d4:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 200d3d8:	e0bfd617 	ldw	r2,-168(fp)
 200d3dc:	1085883a 	add	r2,r2,r2
 200d3e0:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 200d3e4:	e0bfd617 	ldw	r2,-168(fp)
 200d3e8:	10800504 	addi	r2,r2,20
 200d3ec:	e0ffd217 	ldw	r3,-184(fp)
 200d3f0:	18bff42e 	bgeu	r3,r2,200d3c4 <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 200d3f4:	e0bff817 	ldw	r2,-32(fp)
 200d3f8:	10801117 	ldw	r2,68(r2)
 200d3fc:	100b883a 	mov	r5,r2
 200d400:	e13ff817 	ldw	r4,-32(fp)
 200d404:	20118280 	call	2011828 <_Balloc>
 200d408:	1007883a 	mov	r3,r2
 200d40c:	e0bff817 	ldw	r2,-32(fp)
 200d410:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 200d414:	e0bff817 	ldw	r2,-32(fp)
 200d418:	10801017 	ldw	r2,64(r2)
 200d41c:	e0bfe915 	stw	r2,-92(fp)
 200d420:	e0bfe917 	ldw	r2,-92(fp)
 200d424:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 200d428:	e0bfd417 	ldw	r2,-176(fp)
 200d42c:	10021616 	blt	r2,zero,200dc88 <_dtoa_r+0xefc>
 200d430:	e0bfd417 	ldw	r2,-176(fp)
 200d434:	108003c8 	cmpgei	r2,r2,15
 200d438:	1002131e 	bne	r2,zero,200dc88 <_dtoa_r+0xefc>
 200d43c:	e0bfdf17 	ldw	r2,-132(fp)
 200d440:	10021126 	beq	r2,zero,200dc88 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 200d444:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 200d448:	e0bff217 	ldw	r2,-56(fp)
 200d44c:	e0fff317 	ldw	r3,-52(fp)
 200d450:	e0bff415 	stw	r2,-48(fp)
 200d454:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 200d458:	e0bfd717 	ldw	r2,-164(fp)
 200d45c:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 200d460:	e0bfd417 	ldw	r2,-176(fp)
 200d464:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 200d468:	00800084 	movi	r2,2
 200d46c:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 200d470:	e0bfd717 	ldw	r2,-164(fp)
 200d474:	0080540e 	bge	zero,r2,200d5c8 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 200d478:	e0bfd717 	ldw	r2,-164(fp)
 200d47c:	10c003cc 	andi	r3,r2,15
 200d480:	008080b4 	movhi	r2,514
 200d484:	108c7504 	addi	r2,r2,12756
 200d488:	180690fa 	slli	r3,r3,3
 200d48c:	10c5883a 	add	r2,r2,r3
 200d490:	10c00017 	ldw	r3,0(r2)
 200d494:	e0ffe515 	stw	r3,-108(fp)
 200d498:	10800117 	ldw	r2,4(r2)
 200d49c:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 200d4a0:	e0bfd717 	ldw	r2,-164(fp)
 200d4a4:	1005d13a 	srai	r2,r2,4
 200d4a8:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 200d4ac:	e0bfd617 	ldw	r2,-168(fp)
 200d4b0:	1080040c 	andi	r2,r2,16
 200d4b4:	10003426 	beq	r2,zero,200d588 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 200d4b8:	e0bfd617 	ldw	r2,-168(fp)
 200d4bc:	108003cc 	andi	r2,r2,15
 200d4c0:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 200d4c4:	e0bff217 	ldw	r2,-56(fp)
 200d4c8:	e0fff317 	ldw	r3,-52(fp)
 200d4cc:	018080b4 	movhi	r6,514
 200d4d0:	318ca704 	addi	r6,r6,12956
 200d4d4:	31000817 	ldw	r4,32(r6)
 200d4d8:	31400917 	ldw	r5,36(r6)
 200d4dc:	200d883a 	mov	r6,r4
 200d4e0:	280f883a 	mov	r7,r5
 200d4e4:	1009883a 	mov	r4,r2
 200d4e8:	180b883a 	mov	r5,r3
 200d4ec:	2007df00 	call	2007df0 <__divdf3>
 200d4f0:	1009883a 	mov	r4,r2
 200d4f4:	180b883a 	mov	r5,r3
 200d4f8:	2005883a 	mov	r2,r4
 200d4fc:	2807883a 	mov	r3,r5
 200d500:	e0bff215 	stw	r2,-56(fp)
 200d504:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 200d508:	e0bfd317 	ldw	r2,-180(fp)
 200d50c:	10800044 	addi	r2,r2,1
 200d510:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 200d514:	00001c06 	br	200d588 <_dtoa_r+0x7fc>
	    if (j & 1)
 200d518:	e0bfd617 	ldw	r2,-168(fp)
 200d51c:	1080004c 	andi	r2,r2,1
 200d520:	10001326 	beq	r2,zero,200d570 <_dtoa_r+0x7e4>
	      {
		ieps++;
 200d524:	e0bfd317 	ldw	r2,-180(fp)
 200d528:	10800044 	addi	r2,r2,1
 200d52c:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 200d530:	008080b4 	movhi	r2,514
 200d534:	108ca704 	addi	r2,r2,12956
 200d538:	e0ffd217 	ldw	r3,-184(fp)
 200d53c:	180690fa 	slli	r3,r3,3
 200d540:	10c9883a 	add	r4,r2,r3
 200d544:	20800017 	ldw	r2,0(r4)
 200d548:	20c00117 	ldw	r3,4(r4)
 200d54c:	100d883a 	mov	r6,r2
 200d550:	180f883a 	mov	r7,r3
 200d554:	e13fe517 	ldw	r4,-108(fp)
 200d558:	e17fe617 	ldw	r5,-104(fp)
 200d55c:	20089300 	call	2008930 <__muldf3>
 200d560:	1009883a 	mov	r4,r2
 200d564:	180b883a 	mov	r5,r3
 200d568:	e13fe515 	stw	r4,-108(fp)
 200d56c:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 200d570:	e0bfd617 	ldw	r2,-168(fp)
 200d574:	1005d07a 	srai	r2,r2,1
 200d578:	e0bfd615 	stw	r2,-168(fp)
 200d57c:	e0bfd217 	ldw	r2,-184(fp)
 200d580:	10800044 	addi	r2,r2,1
 200d584:	e0bfd215 	stw	r2,-184(fp)
 200d588:	e0bfd617 	ldw	r2,-168(fp)
 200d58c:	103fe21e 	bne	r2,zero,200d518 <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 200d590:	e0bff217 	ldw	r2,-56(fp)
 200d594:	e0fff317 	ldw	r3,-52(fp)
 200d598:	e1bfe517 	ldw	r6,-108(fp)
 200d59c:	e1ffe617 	ldw	r7,-104(fp)
 200d5a0:	1009883a 	mov	r4,r2
 200d5a4:	180b883a 	mov	r5,r3
 200d5a8:	2007df00 	call	2007df0 <__divdf3>
 200d5ac:	1009883a 	mov	r4,r2
 200d5b0:	180b883a 	mov	r5,r3
 200d5b4:	2005883a 	mov	r2,r4
 200d5b8:	2807883a 	mov	r3,r5
 200d5bc:	e0bff215 	stw	r2,-56(fp)
 200d5c0:	e0fff315 	stw	r3,-52(fp)
 200d5c4:	00004006 	br	200d6c8 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 200d5c8:	e0bfd717 	ldw	r2,-164(fp)
 200d5cc:	0085c83a 	sub	r2,zero,r2
 200d5d0:	e0bfec15 	stw	r2,-80(fp)
 200d5d4:	e0bfec17 	ldw	r2,-80(fp)
 200d5d8:	10003b26 	beq	r2,zero,200d6c8 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 200d5dc:	e0bff217 	ldw	r2,-56(fp)
 200d5e0:	e0fff317 	ldw	r3,-52(fp)
 200d5e4:	e13fec17 	ldw	r4,-80(fp)
 200d5e8:	214003cc 	andi	r5,r4,15
 200d5ec:	010080b4 	movhi	r4,514
 200d5f0:	210c7504 	addi	r4,r4,12756
 200d5f4:	280a90fa 	slli	r5,r5,3
 200d5f8:	214d883a 	add	r6,r4,r5
 200d5fc:	31000017 	ldw	r4,0(r6)
 200d600:	31400117 	ldw	r5,4(r6)
 200d604:	200d883a 	mov	r6,r4
 200d608:	280f883a 	mov	r7,r5
 200d60c:	1009883a 	mov	r4,r2
 200d610:	180b883a 	mov	r5,r3
 200d614:	20089300 	call	2008930 <__muldf3>
 200d618:	1009883a 	mov	r4,r2
 200d61c:	180b883a 	mov	r5,r3
 200d620:	2005883a 	mov	r2,r4
 200d624:	2807883a 	mov	r3,r5
 200d628:	e0bff215 	stw	r2,-56(fp)
 200d62c:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200d630:	e0bfec17 	ldw	r2,-80(fp)
 200d634:	1005d13a 	srai	r2,r2,4
 200d638:	e0bfd615 	stw	r2,-168(fp)
 200d63c:	00002006 	br	200d6c0 <_dtoa_r+0x934>
	    if (j & 1)
 200d640:	e0bfd617 	ldw	r2,-168(fp)
 200d644:	1080004c 	andi	r2,r2,1
 200d648:	10001726 	beq	r2,zero,200d6a8 <_dtoa_r+0x91c>
	      {
		ieps++;
 200d64c:	e0bfd317 	ldw	r2,-180(fp)
 200d650:	10800044 	addi	r2,r2,1
 200d654:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 200d658:	e0bff217 	ldw	r2,-56(fp)
 200d65c:	e0fff317 	ldw	r3,-52(fp)
 200d660:	010080b4 	movhi	r4,514
 200d664:	210ca704 	addi	r4,r4,12956
 200d668:	e17fd217 	ldw	r5,-184(fp)
 200d66c:	280a90fa 	slli	r5,r5,3
 200d670:	214d883a 	add	r6,r4,r5
 200d674:	31000017 	ldw	r4,0(r6)
 200d678:	31400117 	ldw	r5,4(r6)
 200d67c:	200d883a 	mov	r6,r4
 200d680:	280f883a 	mov	r7,r5
 200d684:	1009883a 	mov	r4,r2
 200d688:	180b883a 	mov	r5,r3
 200d68c:	20089300 	call	2008930 <__muldf3>
 200d690:	1009883a 	mov	r4,r2
 200d694:	180b883a 	mov	r5,r3
 200d698:	2005883a 	mov	r2,r4
 200d69c:	2807883a 	mov	r3,r5
 200d6a0:	e0bff215 	stw	r2,-56(fp)
 200d6a4:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 200d6a8:	e0bfd617 	ldw	r2,-168(fp)
 200d6ac:	1005d07a 	srai	r2,r2,1
 200d6b0:	e0bfd615 	stw	r2,-168(fp)
 200d6b4:	e0bfd217 	ldw	r2,-184(fp)
 200d6b8:	10800044 	addi	r2,r2,1
 200d6bc:	e0bfd215 	stw	r2,-184(fp)
 200d6c0:	e0bfd617 	ldw	r2,-168(fp)
 200d6c4:	103fde1e 	bne	r2,zero,200d640 <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 200d6c8:	e0bfd817 	ldw	r2,-160(fp)
 200d6cc:	10002126 	beq	r2,zero,200d754 <_dtoa_r+0x9c8>
 200d6d0:	e0bff217 	ldw	r2,-56(fp)
 200d6d4:	e0fff317 	ldw	r3,-52(fp)
 200d6d8:	000d883a 	mov	r6,zero
 200d6dc:	01cffc34 	movhi	r7,16368
 200d6e0:	1009883a 	mov	r4,r2
 200d6e4:	180b883a 	mov	r5,r3
 200d6e8:	200883c0 	call	200883c <__ledf2>
 200d6ec:	1000190e 	bge	r2,zero,200d754 <_dtoa_r+0x9c8>
 200d6f0:	e0bfd417 	ldw	r2,-176(fp)
 200d6f4:	0080170e 	bge	zero,r2,200d754 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 200d6f8:	e0bfd517 	ldw	r2,-172(fp)
 200d6fc:	0081550e 	bge	zero,r2,200dc54 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 200d700:	e0bfd517 	ldw	r2,-172(fp)
 200d704:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 200d708:	e0bfd717 	ldw	r2,-164(fp)
 200d70c:	10bfffc4 	addi	r2,r2,-1
 200d710:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 200d714:	e0bff217 	ldw	r2,-56(fp)
 200d718:	e0fff317 	ldw	r3,-52(fp)
 200d71c:	000d883a 	mov	r6,zero
 200d720:	01d00934 	movhi	r7,16420
 200d724:	1009883a 	mov	r4,r2
 200d728:	180b883a 	mov	r5,r3
 200d72c:	20089300 	call	2008930 <__muldf3>
 200d730:	1009883a 	mov	r4,r2
 200d734:	180b883a 	mov	r5,r3
 200d738:	2005883a 	mov	r2,r4
 200d73c:	2807883a 	mov	r3,r5
 200d740:	e0bff215 	stw	r2,-56(fp)
 200d744:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 200d748:	e0bfd317 	ldw	r2,-180(fp)
 200d74c:	10800044 	addi	r2,r2,1
 200d750:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 200d754:	e13fd317 	ldw	r4,-180(fp)
 200d758:	2016f680 	call	2016f68 <__floatsidf>
 200d75c:	1011883a 	mov	r8,r2
 200d760:	1813883a 	mov	r9,r3
 200d764:	e0bff217 	ldw	r2,-56(fp)
 200d768:	e0fff317 	ldw	r3,-52(fp)
 200d76c:	100d883a 	mov	r6,r2
 200d770:	180f883a 	mov	r7,r3
 200d774:	4009883a 	mov	r4,r8
 200d778:	480b883a 	mov	r5,r9
 200d77c:	20089300 	call	2008930 <__muldf3>
 200d780:	1009883a 	mov	r4,r2
 200d784:	180b883a 	mov	r5,r3
 200d788:	2005883a 	mov	r2,r4
 200d78c:	2807883a 	mov	r3,r5
 200d790:	000d883a 	mov	r6,zero
 200d794:	01d00734 	movhi	r7,16412
 200d798:	1009883a 	mov	r4,r2
 200d79c:	180b883a 	mov	r5,r3
 200d7a0:	20075440 	call	2007544 <__adddf3>
 200d7a4:	1009883a 	mov	r4,r2
 200d7a8:	180b883a 	mov	r5,r3
 200d7ac:	2005883a 	mov	r2,r4
 200d7b0:	2807883a 	mov	r3,r5
 200d7b4:	e0bff615 	stw	r2,-40(fp)
 200d7b8:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 200d7bc:	e0fff717 	ldw	r3,-36(fp)
 200d7c0:	00bf3034 	movhi	r2,64704
 200d7c4:	1885883a 	add	r2,r3,r2
 200d7c8:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 200d7cc:	e0bfd417 	ldw	r2,-176(fp)
 200d7d0:	1000271e 	bne	r2,zero,200d870 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 200d7d4:	e03fe315 	stw	zero,-116(fp)
 200d7d8:	e0bfe317 	ldw	r2,-116(fp)
 200d7dc:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 200d7e0:	e0bff217 	ldw	r2,-56(fp)
 200d7e4:	e0fff317 	ldw	r3,-52(fp)
 200d7e8:	000d883a 	mov	r6,zero
 200d7ec:	01d00534 	movhi	r7,16404
 200d7f0:	1009883a 	mov	r4,r2
 200d7f4:	180b883a 	mov	r5,r3
 200d7f8:	20090480 	call	2009048 <__subdf3>
 200d7fc:	1009883a 	mov	r4,r2
 200d800:	180b883a 	mov	r5,r3
 200d804:	2005883a 	mov	r2,r4
 200d808:	2807883a 	mov	r3,r5
 200d80c:	e0bff215 	stw	r2,-56(fp)
 200d810:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 200d814:	e0bff217 	ldw	r2,-56(fp)
 200d818:	e0fff317 	ldw	r3,-52(fp)
 200d81c:	e13ff617 	ldw	r4,-40(fp)
 200d820:	e17ff717 	ldw	r5,-36(fp)
 200d824:	200d883a 	mov	r6,r4
 200d828:	280f883a 	mov	r7,r5
 200d82c:	1009883a 	mov	r4,r2
 200d830:	180b883a 	mov	r5,r3
 200d834:	20087600 	call	2008760 <__gedf2>
 200d838:	0082eb16 	blt	zero,r2,200e3e8 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 200d83c:	e23ff217 	ldw	r8,-56(fp)
 200d840:	e27ff317 	ldw	r9,-52(fp)
 200d844:	e0bff617 	ldw	r2,-40(fp)
 200d848:	e0fff717 	ldw	r3,-36(fp)
 200d84c:	1021883a 	mov	r16,r2
 200d850:	1c60003c 	xorhi	r17,r3,32768
 200d854:	800d883a 	mov	r6,r16
 200d858:	880f883a 	mov	r7,r17
 200d85c:	4009883a 	mov	r4,r8
 200d860:	480b883a 	mov	r5,r9
 200d864:	200883c0 	call	200883c <__ledf2>
 200d868:	1002da16 	blt	r2,zero,200e3d4 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 200d86c:	0000fc06 	br	200dc60 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 200d870:	e0bfd917 	ldw	r2,-156(fp)
 200d874:	10007a26 	beq	r2,zero,200da60 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 200d878:	e0bfd417 	ldw	r2,-176(fp)
 200d87c:	10ffffc4 	addi	r3,r2,-1
 200d880:	008080b4 	movhi	r2,514
 200d884:	108c7504 	addi	r2,r2,12756
 200d888:	180690fa 	slli	r3,r3,3
 200d88c:	10c9883a 	add	r4,r2,r3
 200d890:	20800017 	ldw	r2,0(r4)
 200d894:	20c00117 	ldw	r3,4(r4)
 200d898:	100d883a 	mov	r6,r2
 200d89c:	180f883a 	mov	r7,r3
 200d8a0:	0009883a 	mov	r4,zero
 200d8a4:	014ff834 	movhi	r5,16352
 200d8a8:	2007df00 	call	2007df0 <__divdf3>
 200d8ac:	1009883a 	mov	r4,r2
 200d8b0:	180b883a 	mov	r5,r3
 200d8b4:	2011883a 	mov	r8,r4
 200d8b8:	2813883a 	mov	r9,r5
 200d8bc:	e0bff617 	ldw	r2,-40(fp)
 200d8c0:	e0fff717 	ldw	r3,-36(fp)
 200d8c4:	100d883a 	mov	r6,r2
 200d8c8:	180f883a 	mov	r7,r3
 200d8cc:	4009883a 	mov	r4,r8
 200d8d0:	480b883a 	mov	r5,r9
 200d8d4:	20090480 	call	2009048 <__subdf3>
 200d8d8:	1009883a 	mov	r4,r2
 200d8dc:	180b883a 	mov	r5,r3
 200d8e0:	2005883a 	mov	r2,r4
 200d8e4:	2807883a 	mov	r3,r5
 200d8e8:	e0bff615 	stw	r2,-40(fp)
 200d8ec:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 200d8f0:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 200d8f4:	e0bff217 	ldw	r2,-56(fp)
 200d8f8:	e0fff317 	ldw	r3,-52(fp)
 200d8fc:	1009883a 	mov	r4,r2
 200d900:	180b883a 	mov	r5,r3
 200d904:	2016ee80 	call	2016ee8 <__fixdfsi>
 200d908:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200d90c:	e43ff217 	ldw	r16,-56(fp)
 200d910:	e47ff317 	ldw	r17,-52(fp)
 200d914:	e13fed17 	ldw	r4,-76(fp)
 200d918:	2016f680 	call	2016f68 <__floatsidf>
 200d91c:	1009883a 	mov	r4,r2
 200d920:	180b883a 	mov	r5,r3
 200d924:	200d883a 	mov	r6,r4
 200d928:	280f883a 	mov	r7,r5
 200d92c:	8009883a 	mov	r4,r16
 200d930:	880b883a 	mov	r5,r17
 200d934:	20090480 	call	2009048 <__subdf3>
 200d938:	1009883a 	mov	r4,r2
 200d93c:	180b883a 	mov	r5,r3
 200d940:	2005883a 	mov	r2,r4
 200d944:	2807883a 	mov	r3,r5
 200d948:	e0bff215 	stw	r2,-56(fp)
 200d94c:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200d950:	e0bfe717 	ldw	r2,-100(fp)
 200d954:	10c00044 	addi	r3,r2,1
 200d958:	e0ffe715 	stw	r3,-100(fp)
 200d95c:	e0ffed17 	ldw	r3,-76(fp)
 200d960:	18c00c04 	addi	r3,r3,48
 200d964:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 200d968:	e0bff217 	ldw	r2,-56(fp)
 200d96c:	e0fff317 	ldw	r3,-52(fp)
 200d970:	e13ff617 	ldw	r4,-40(fp)
 200d974:	e17ff717 	ldw	r5,-36(fp)
 200d978:	200d883a 	mov	r6,r4
 200d97c:	280f883a 	mov	r7,r5
 200d980:	1009883a 	mov	r4,r2
 200d984:	180b883a 	mov	r5,r3
 200d988:	200883c0 	call	200883c <__ledf2>
 200d98c:	1003c416 	blt	r2,zero,200e8a0 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 200d990:	e0bff217 	ldw	r2,-56(fp)
 200d994:	e0fff317 	ldw	r3,-52(fp)
 200d998:	100d883a 	mov	r6,r2
 200d99c:	180f883a 	mov	r7,r3
 200d9a0:	0009883a 	mov	r4,zero
 200d9a4:	014ffc34 	movhi	r5,16368
 200d9a8:	20090480 	call	2009048 <__subdf3>
 200d9ac:	1009883a 	mov	r4,r2
 200d9b0:	180b883a 	mov	r5,r3
 200d9b4:	2011883a 	mov	r8,r4
 200d9b8:	2813883a 	mov	r9,r5
 200d9bc:	e0bff617 	ldw	r2,-40(fp)
 200d9c0:	e0fff717 	ldw	r3,-36(fp)
 200d9c4:	100d883a 	mov	r6,r2
 200d9c8:	180f883a 	mov	r7,r3
 200d9cc:	4009883a 	mov	r4,r8
 200d9d0:	480b883a 	mov	r5,r9
 200d9d4:	200883c0 	call	200883c <__ledf2>
 200d9d8:	10012916 	blt	r2,zero,200de80 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 200d9dc:	e0bfd217 	ldw	r2,-184(fp)
 200d9e0:	10800044 	addi	r2,r2,1
 200d9e4:	e0bfd215 	stw	r2,-184(fp)
 200d9e8:	e0ffd217 	ldw	r3,-184(fp)
 200d9ec:	e0bfd417 	ldw	r2,-176(fp)
 200d9f0:	18809a0e 	bge	r3,r2,200dc5c <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 200d9f4:	e0bff617 	ldw	r2,-40(fp)
 200d9f8:	e0fff717 	ldw	r3,-36(fp)
 200d9fc:	000d883a 	mov	r6,zero
 200da00:	01d00934 	movhi	r7,16420
 200da04:	1009883a 	mov	r4,r2
 200da08:	180b883a 	mov	r5,r3
 200da0c:	20089300 	call	2008930 <__muldf3>
 200da10:	1009883a 	mov	r4,r2
 200da14:	180b883a 	mov	r5,r3
 200da18:	2005883a 	mov	r2,r4
 200da1c:	2807883a 	mov	r3,r5
 200da20:	e0bff615 	stw	r2,-40(fp)
 200da24:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 200da28:	e0bff217 	ldw	r2,-56(fp)
 200da2c:	e0fff317 	ldw	r3,-52(fp)
 200da30:	000d883a 	mov	r6,zero
 200da34:	01d00934 	movhi	r7,16420
 200da38:	1009883a 	mov	r4,r2
 200da3c:	180b883a 	mov	r5,r3
 200da40:	20089300 	call	2008930 <__muldf3>
 200da44:	1009883a 	mov	r4,r2
 200da48:	180b883a 	mov	r5,r3
 200da4c:	2005883a 	mov	r2,r4
 200da50:	2807883a 	mov	r3,r5
 200da54:	e0bff215 	stw	r2,-56(fp)
 200da58:	e0fff315 	stw	r3,-52(fp)
	    }
 200da5c:	003fa506 	br	200d8f4 <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 200da60:	e0bff617 	ldw	r2,-40(fp)
 200da64:	e0fff717 	ldw	r3,-36(fp)
 200da68:	e13fd417 	ldw	r4,-176(fp)
 200da6c:	217fffc4 	addi	r5,r4,-1
 200da70:	010080b4 	movhi	r4,514
 200da74:	210c7504 	addi	r4,r4,12756
 200da78:	280a90fa 	slli	r5,r5,3
 200da7c:	214d883a 	add	r6,r4,r5
 200da80:	31000017 	ldw	r4,0(r6)
 200da84:	31400117 	ldw	r5,4(r6)
 200da88:	200d883a 	mov	r6,r4
 200da8c:	280f883a 	mov	r7,r5
 200da90:	1009883a 	mov	r4,r2
 200da94:	180b883a 	mov	r5,r3
 200da98:	20089300 	call	2008930 <__muldf3>
 200da9c:	1009883a 	mov	r4,r2
 200daa0:	180b883a 	mov	r5,r3
 200daa4:	2005883a 	mov	r2,r4
 200daa8:	2807883a 	mov	r3,r5
 200daac:	e0bff615 	stw	r2,-40(fp)
 200dab0:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 200dab4:	00800044 	movi	r2,1
 200dab8:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 200dabc:	e0bff217 	ldw	r2,-56(fp)
 200dac0:	e0fff317 	ldw	r3,-52(fp)
 200dac4:	1009883a 	mov	r4,r2
 200dac8:	180b883a 	mov	r5,r3
 200dacc:	2016ee80 	call	2016ee8 <__fixdfsi>
 200dad0:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 200dad4:	e43ff217 	ldw	r16,-56(fp)
 200dad8:	e47ff317 	ldw	r17,-52(fp)
 200dadc:	e13fed17 	ldw	r4,-76(fp)
 200dae0:	2016f680 	call	2016f68 <__floatsidf>
 200dae4:	1009883a 	mov	r4,r2
 200dae8:	180b883a 	mov	r5,r3
 200daec:	200d883a 	mov	r6,r4
 200daf0:	280f883a 	mov	r7,r5
 200daf4:	8009883a 	mov	r4,r16
 200daf8:	880b883a 	mov	r5,r17
 200dafc:	20090480 	call	2009048 <__subdf3>
 200db00:	1009883a 	mov	r4,r2
 200db04:	180b883a 	mov	r5,r3
 200db08:	2005883a 	mov	r2,r4
 200db0c:	2807883a 	mov	r3,r5
 200db10:	e0bff215 	stw	r2,-56(fp)
 200db14:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200db18:	e0bfe717 	ldw	r2,-100(fp)
 200db1c:	10c00044 	addi	r3,r2,1
 200db20:	e0ffe715 	stw	r3,-100(fp)
 200db24:	e0ffed17 	ldw	r3,-76(fp)
 200db28:	18c00c04 	addi	r3,r3,48
 200db2c:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 200db30:	e0ffd217 	ldw	r3,-184(fp)
 200db34:	e0bfd417 	ldw	r2,-176(fp)
 200db38:	1880351e 	bne	r3,r2,200dc10 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 200db3c:	e43ff217 	ldw	r16,-56(fp)
 200db40:	e47ff317 	ldw	r17,-52(fp)
 200db44:	e0bff617 	ldw	r2,-40(fp)
 200db48:	e0fff717 	ldw	r3,-36(fp)
 200db4c:	000d883a 	mov	r6,zero
 200db50:	01cff834 	movhi	r7,16352
 200db54:	1009883a 	mov	r4,r2
 200db58:	180b883a 	mov	r5,r3
 200db5c:	20075440 	call	2007544 <__adddf3>
 200db60:	1009883a 	mov	r4,r2
 200db64:	180b883a 	mov	r5,r3
 200db68:	2005883a 	mov	r2,r4
 200db6c:	2807883a 	mov	r3,r5
 200db70:	100d883a 	mov	r6,r2
 200db74:	180f883a 	mov	r7,r3
 200db78:	8009883a 	mov	r4,r16
 200db7c:	880b883a 	mov	r5,r17
 200db80:	20087600 	call	2008760 <__gedf2>
 200db84:	0080c016 	blt	zero,r2,200de88 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 200db88:	e43ff217 	ldw	r16,-56(fp)
 200db8c:	e47ff317 	ldw	r17,-52(fp)
 200db90:	e0bff617 	ldw	r2,-40(fp)
 200db94:	e0fff717 	ldw	r3,-36(fp)
 200db98:	100d883a 	mov	r6,r2
 200db9c:	180f883a 	mov	r7,r3
 200dba0:	0009883a 	mov	r4,zero
 200dba4:	014ff834 	movhi	r5,16352
 200dba8:	20090480 	call	2009048 <__subdf3>
 200dbac:	1009883a 	mov	r4,r2
 200dbb0:	180b883a 	mov	r5,r3
 200dbb4:	2005883a 	mov	r2,r4
 200dbb8:	2807883a 	mov	r3,r5
 200dbbc:	100d883a 	mov	r6,r2
 200dbc0:	180f883a 	mov	r7,r3
 200dbc4:	8009883a 	mov	r4,r16
 200dbc8:	880b883a 	mov	r5,r17
 200dbcc:	200883c0 	call	200883c <__ledf2>
 200dbd0:	10000116 	blt	r2,zero,200dbd8 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 200dbd4:	00002206 	br	200dc60 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 200dbd8:	e0bfe717 	ldw	r2,-100(fp)
 200dbdc:	10bfffc4 	addi	r2,r2,-1
 200dbe0:	e0bfe715 	stw	r2,-100(fp)
 200dbe4:	e0bfe717 	ldw	r2,-100(fp)
 200dbe8:	10800003 	ldbu	r2,0(r2)
 200dbec:	10803fcc 	andi	r2,r2,255
 200dbf0:	1080201c 	xori	r2,r2,128
 200dbf4:	10bfe004 	addi	r2,r2,-128
 200dbf8:	10800c20 	cmpeqi	r2,r2,48
 200dbfc:	103ff61e 	bne	r2,zero,200dbd8 <_dtoa_r+0xe4c>
		      s++;
 200dc00:	e0bfe717 	ldw	r2,-100(fp)
 200dc04:	10800044 	addi	r2,r2,1
 200dc08:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 200dc0c:	00032506 	br	200e8a4 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 200dc10:	e0bfd217 	ldw	r2,-184(fp)
 200dc14:	10800044 	addi	r2,r2,1
 200dc18:	e0bfd215 	stw	r2,-184(fp)
 200dc1c:	e0bff217 	ldw	r2,-56(fp)
 200dc20:	e0fff317 	ldw	r3,-52(fp)
 200dc24:	000d883a 	mov	r6,zero
 200dc28:	01d00934 	movhi	r7,16420
 200dc2c:	1009883a 	mov	r4,r2
 200dc30:	180b883a 	mov	r5,r3
 200dc34:	20089300 	call	2008930 <__muldf3>
 200dc38:	1009883a 	mov	r4,r2
 200dc3c:	180b883a 	mov	r5,r3
 200dc40:	2005883a 	mov	r2,r4
 200dc44:	2807883a 	mov	r3,r5
 200dc48:	e0bff215 	stw	r2,-56(fp)
 200dc4c:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 200dc50:	003f9a06 	br	200dabc <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 200dc54:	0001883a 	nop
 200dc58:	00000106 	br	200dc60 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 200dc5c:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 200dc60:	e0bfe917 	ldw	r2,-92(fp)
 200dc64:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 200dc68:	e0bff417 	ldw	r2,-48(fp)
 200dc6c:	e0fff517 	ldw	r3,-44(fp)
 200dc70:	e0bff215 	stw	r2,-56(fp)
 200dc74:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 200dc78:	e0bfea17 	ldw	r2,-88(fp)
 200dc7c:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 200dc80:	e0bfeb17 	ldw	r2,-84(fp)
 200dc84:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 200dc88:	e0bff117 	ldw	r2,-60(fp)
 200dc8c:	1000b816 	blt	r2,zero,200df70 <_dtoa_r+0x11e4>
 200dc90:	e0bfd717 	ldw	r2,-164(fp)
 200dc94:	108003c8 	cmpgei	r2,r2,15
 200dc98:	1000b51e 	bne	r2,zero,200df70 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 200dc9c:	008080b4 	movhi	r2,514
 200dca0:	108c7504 	addi	r2,r2,12756
 200dca4:	e0ffd717 	ldw	r3,-164(fp)
 200dca8:	180690fa 	slli	r3,r3,3
 200dcac:	10c5883a 	add	r2,r2,r3
 200dcb0:	10c00017 	ldw	r3,0(r2)
 200dcb4:	e0ffe515 	stw	r3,-108(fp)
 200dcb8:	10800117 	ldw	r2,4(r2)
 200dcbc:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 200dcc0:	e0800217 	ldw	r2,8(fp)
 200dcc4:	1000190e 	bge	r2,zero,200dd2c <_dtoa_r+0xfa0>
 200dcc8:	e0bfd417 	ldw	r2,-176(fp)
 200dccc:	00801716 	blt	zero,r2,200dd2c <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 200dcd0:	e03fe315 	stw	zero,-116(fp)
 200dcd4:	e0bfe317 	ldw	r2,-116(fp)
 200dcd8:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 200dcdc:	e0bfd417 	ldw	r2,-176(fp)
 200dce0:	1001bd16 	blt	r2,zero,200e3d8 <_dtoa_r+0x164c>
 200dce4:	e43ff217 	ldw	r16,-56(fp)
 200dce8:	e47ff317 	ldw	r17,-52(fp)
 200dcec:	000d883a 	mov	r6,zero
 200dcf0:	01d00534 	movhi	r7,16404
 200dcf4:	e13fe517 	ldw	r4,-108(fp)
 200dcf8:	e17fe617 	ldw	r5,-104(fp)
 200dcfc:	20089300 	call	2008930 <__muldf3>
 200dd00:	1009883a 	mov	r4,r2
 200dd04:	180b883a 	mov	r5,r3
 200dd08:	2005883a 	mov	r2,r4
 200dd0c:	2807883a 	mov	r3,r5
 200dd10:	100d883a 	mov	r6,r2
 200dd14:	180f883a 	mov	r7,r3
 200dd18:	8009883a 	mov	r4,r16
 200dd1c:	880b883a 	mov	r5,r17
 200dd20:	200883c0 	call	200883c <__ledf2>
 200dd24:	0081ac0e 	bge	zero,r2,200e3d8 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 200dd28:	0001b006 	br	200e3ec <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 200dd2c:	00800044 	movi	r2,1
 200dd30:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 200dd34:	e0bff217 	ldw	r2,-56(fp)
 200dd38:	e0fff317 	ldw	r3,-52(fp)
 200dd3c:	e1bfe517 	ldw	r6,-108(fp)
 200dd40:	e1ffe617 	ldw	r7,-104(fp)
 200dd44:	1009883a 	mov	r4,r2
 200dd48:	180b883a 	mov	r5,r3
 200dd4c:	2007df00 	call	2007df0 <__divdf3>
 200dd50:	1009883a 	mov	r4,r2
 200dd54:	180b883a 	mov	r5,r3
 200dd58:	2005883a 	mov	r2,r4
 200dd5c:	2807883a 	mov	r3,r5
 200dd60:	1009883a 	mov	r4,r2
 200dd64:	180b883a 	mov	r5,r3
 200dd68:	2016ee80 	call	2016ee8 <__fixdfsi>
 200dd6c:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 200dd70:	e43ff217 	ldw	r16,-56(fp)
 200dd74:	e47ff317 	ldw	r17,-52(fp)
 200dd78:	e13fed17 	ldw	r4,-76(fp)
 200dd7c:	2016f680 	call	2016f68 <__floatsidf>
 200dd80:	1011883a 	mov	r8,r2
 200dd84:	1813883a 	mov	r9,r3
 200dd88:	e1bfe517 	ldw	r6,-108(fp)
 200dd8c:	e1ffe617 	ldw	r7,-104(fp)
 200dd90:	4009883a 	mov	r4,r8
 200dd94:	480b883a 	mov	r5,r9
 200dd98:	20089300 	call	2008930 <__muldf3>
 200dd9c:	1009883a 	mov	r4,r2
 200dda0:	180b883a 	mov	r5,r3
 200dda4:	2005883a 	mov	r2,r4
 200dda8:	2807883a 	mov	r3,r5
 200ddac:	100d883a 	mov	r6,r2
 200ddb0:	180f883a 	mov	r7,r3
 200ddb4:	8009883a 	mov	r4,r16
 200ddb8:	880b883a 	mov	r5,r17
 200ddbc:	20090480 	call	2009048 <__subdf3>
 200ddc0:	1009883a 	mov	r4,r2
 200ddc4:	180b883a 	mov	r5,r3
 200ddc8:	2005883a 	mov	r2,r4
 200ddcc:	2807883a 	mov	r3,r5
 200ddd0:	e0bff215 	stw	r2,-56(fp)
 200ddd4:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 200ddd8:	e0bfe717 	ldw	r2,-100(fp)
 200dddc:	10c00044 	addi	r3,r2,1
 200dde0:	e0ffe715 	stw	r3,-100(fp)
 200dde4:	e0ffed17 	ldw	r3,-76(fp)
 200dde8:	18c00c04 	addi	r3,r3,48
 200ddec:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 200ddf0:	e0ffd217 	ldw	r3,-184(fp)
 200ddf4:	e0bfd417 	ldw	r2,-176(fp)
 200ddf8:	1880401e 	bne	r3,r2,200defc <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 200ddfc:	e0bff217 	ldw	r2,-56(fp)
 200de00:	e0fff317 	ldw	r3,-52(fp)
 200de04:	100d883a 	mov	r6,r2
 200de08:	180f883a 	mov	r7,r3
 200de0c:	1009883a 	mov	r4,r2
 200de10:	180b883a 	mov	r5,r3
 200de14:	20075440 	call	2007544 <__adddf3>
 200de18:	1009883a 	mov	r4,r2
 200de1c:	180b883a 	mov	r5,r3
 200de20:	2005883a 	mov	r2,r4
 200de24:	2807883a 	mov	r3,r5
 200de28:	e0bff215 	stw	r2,-56(fp)
 200de2c:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 200de30:	e0bff217 	ldw	r2,-56(fp)
 200de34:	e0fff317 	ldw	r3,-52(fp)
 200de38:	e1bfe517 	ldw	r6,-108(fp)
 200de3c:	e1ffe617 	ldw	r7,-104(fp)
 200de40:	1009883a 	mov	r4,r2
 200de44:	180b883a 	mov	r5,r3
 200de48:	20087600 	call	2008760 <__gedf2>
 200de4c:	00801a16 	blt	zero,r2,200deb8 <_dtoa_r+0x112c>
 200de50:	e0bff217 	ldw	r2,-56(fp)
 200de54:	e0fff317 	ldw	r3,-52(fp)
 200de58:	e1bfe517 	ldw	r6,-108(fp)
 200de5c:	e1ffe617 	ldw	r7,-104(fp)
 200de60:	1009883a 	mov	r4,r2
 200de64:	180b883a 	mov	r5,r3
 200de68:	20086d80 	call	20086d8 <__eqdf2>
 200de6c:	10003c1e 	bne	r2,zero,200df60 <_dtoa_r+0x11d4>
 200de70:	e0bfed17 	ldw	r2,-76(fp)
 200de74:	1080004c 	andi	r2,r2,1
 200de78:	10003926 	beq	r2,zero,200df60 <_dtoa_r+0x11d4>
 200de7c:	00000e06 	br	200deb8 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 200de80:	0001883a 	nop
 200de84:	00000c06 	br	200deb8 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 200de88:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 200de8c:	00000a06 	br	200deb8 <_dtoa_r+0x112c>
		    if (s == s0)
 200de90:	e0ffe717 	ldw	r3,-100(fp)
 200de94:	e0bfe917 	ldw	r2,-92(fp)
 200de98:	1880071e 	bne	r3,r2,200deb8 <_dtoa_r+0x112c>
		      {
			k++;
 200de9c:	e0bfd717 	ldw	r2,-164(fp)
 200dea0:	10800044 	addi	r2,r2,1
 200dea4:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 200dea8:	e0bfe717 	ldw	r2,-100(fp)
 200deac:	00c00c04 	movi	r3,48
 200deb0:	10c00005 	stb	r3,0(r2)
			break;
 200deb4:	00000a06 	br	200dee0 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 200deb8:	e0bfe717 	ldw	r2,-100(fp)
 200debc:	10bfffc4 	addi	r2,r2,-1
 200dec0:	e0bfe715 	stw	r2,-100(fp)
 200dec4:	e0bfe717 	ldw	r2,-100(fp)
 200dec8:	10800003 	ldbu	r2,0(r2)
 200decc:	10803fcc 	andi	r2,r2,255
 200ded0:	1080201c 	xori	r2,r2,128
 200ded4:	10bfe004 	addi	r2,r2,-128
 200ded8:	10800e60 	cmpeqi	r2,r2,57
 200dedc:	103fec1e 	bne	r2,zero,200de90 <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 200dee0:	e0bfe717 	ldw	r2,-100(fp)
 200dee4:	10c00044 	addi	r3,r2,1
 200dee8:	e0ffe715 	stw	r3,-100(fp)
 200deec:	10c00003 	ldbu	r3,0(r2)
 200def0:	18c00044 	addi	r3,r3,1
 200def4:	10c00005 	stb	r3,0(r2)
		}
	      break;
 200def8:	00001906 	br	200df60 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 200defc:	e0bff217 	ldw	r2,-56(fp)
 200df00:	e0fff317 	ldw	r3,-52(fp)
 200df04:	000d883a 	mov	r6,zero
 200df08:	01d00934 	movhi	r7,16420
 200df0c:	1009883a 	mov	r4,r2
 200df10:	180b883a 	mov	r5,r3
 200df14:	20089300 	call	2008930 <__muldf3>
 200df18:	1009883a 	mov	r4,r2
 200df1c:	180b883a 	mov	r5,r3
 200df20:	2005883a 	mov	r2,r4
 200df24:	2807883a 	mov	r3,r5
 200df28:	e0bff215 	stw	r2,-56(fp)
 200df2c:	e0fff315 	stw	r3,-52(fp)
 200df30:	e0bff217 	ldw	r2,-56(fp)
 200df34:	e0fff317 	ldw	r3,-52(fp)
 200df38:	000d883a 	mov	r6,zero
 200df3c:	000f883a 	mov	r7,zero
 200df40:	1009883a 	mov	r4,r2
 200df44:	180b883a 	mov	r5,r3
 200df48:	20086d80 	call	20086d8 <__eqdf2>
 200df4c:	10000626 	beq	r2,zero,200df68 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 200df50:	e0bfd217 	ldw	r2,-184(fp)
 200df54:	10800044 	addi	r2,r2,1
 200df58:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 200df5c:	003f7506 	br	200dd34 <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 200df60:	0001883a 	nop
 200df64:	00024f06 	br	200e8a4 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 200df68:	0001883a 	nop
	}
      goto ret1;
 200df6c:	00024d06 	br	200e8a4 <_dtoa_r+0x1b18>
    }

  m2 = b2;
 200df70:	e0bfcf17 	ldw	r2,-196(fp)
 200df74:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 200df78:	e0bfd017 	ldw	r2,-192(fp)
 200df7c:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 200df80:	e03fe215 	stw	zero,-120(fp)
 200df84:	e0bfe217 	ldw	r2,-120(fp)
 200df88:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 200df8c:	e0bfd917 	ldw	r2,-156(fp)
 200df90:	10003a26 	beq	r2,zero,200e07c <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 200df94:	e0bffb17 	ldw	r2,-20(fp)
 200df98:	10800088 	cmpgei	r2,r2,2
 200df9c:	10000a1e 	bne	r2,zero,200dfc8 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 200dfa0:	e0bfe017 	ldw	r2,-128(fp)
 200dfa4:	10000326 	beq	r2,zero,200dfb4 <_dtoa_r+0x1228>
 200dfa8:	e0bff117 	ldw	r2,-60(fp)
 200dfac:	10810cc4 	addi	r2,r2,1075
 200dfb0:	00000306 	br	200dfc0 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 200dfb4:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 200dfb8:	00c00d84 	movi	r3,54
 200dfbc:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 200dfc0:	e0bfd215 	stw	r2,-184(fp)
 200dfc4:	00002106 	br	200e04c <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 200dfc8:	e0bfd417 	ldw	r2,-176(fp)
 200dfcc:	10bfffc4 	addi	r2,r2,-1
 200dfd0:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 200dfd4:	e0ffdb17 	ldw	r3,-148(fp)
 200dfd8:	e0bfd617 	ldw	r2,-168(fp)
 200dfdc:	18800516 	blt	r3,r2,200dff4 <_dtoa_r+0x1268>
	    m5 -= j;
 200dfe0:	e0ffdb17 	ldw	r3,-148(fp)
 200dfe4:	e0bfd617 	ldw	r2,-168(fp)
 200dfe8:	1885c83a 	sub	r2,r3,r2
 200dfec:	e0bfdb15 	stw	r2,-148(fp)
 200dff0:	00000d06 	br	200e028 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 200dff4:	e0ffd617 	ldw	r3,-168(fp)
 200dff8:	e0bfdb17 	ldw	r2,-148(fp)
 200dffc:	1885c83a 	sub	r2,r3,r2
 200e000:	e0bfd615 	stw	r2,-168(fp)
 200e004:	e0bfd617 	ldw	r2,-168(fp)
 200e008:	e0ffdd17 	ldw	r3,-140(fp)
 200e00c:	1885883a 	add	r2,r3,r2
 200e010:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 200e014:	e0ffd017 	ldw	r3,-192(fp)
 200e018:	e0bfd617 	ldw	r2,-168(fp)
 200e01c:	1885883a 	add	r2,r3,r2
 200e020:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 200e024:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 200e028:	e0bfd417 	ldw	r2,-176(fp)
 200e02c:	e0bfd215 	stw	r2,-184(fp)
 200e030:	e0bfd217 	ldw	r2,-184(fp)
 200e034:	1000050e 	bge	r2,zero,200e04c <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 200e038:	e0ffda17 	ldw	r3,-152(fp)
 200e03c:	e0bfd217 	ldw	r2,-184(fp)
 200e040:	1885c83a 	sub	r2,r3,r2
 200e044:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 200e048:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 200e04c:	e0ffcf17 	ldw	r3,-196(fp)
 200e050:	e0bfd217 	ldw	r2,-184(fp)
 200e054:	1885883a 	add	r2,r3,r2
 200e058:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 200e05c:	e0ffdc17 	ldw	r3,-144(fp)
 200e060:	e0bfd217 	ldw	r2,-184(fp)
 200e064:	1885883a 	add	r2,r3,r2
 200e068:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 200e06c:	01400044 	movi	r5,1
 200e070:	e13ff817 	ldw	r4,-32(fp)
 200e074:	2011e700 	call	2011e70 <__i2b>
 200e078:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 200e07c:	e0bfda17 	ldw	r2,-152(fp)
 200e080:	0080130e 	bge	zero,r2,200e0d0 <_dtoa_r+0x1344>
 200e084:	e0bfdc17 	ldw	r2,-144(fp)
 200e088:	0080110e 	bge	zero,r2,200e0d0 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 200e08c:	e0ffda17 	ldw	r3,-152(fp)
 200e090:	e0bfdc17 	ldw	r2,-144(fp)
 200e094:	1880010e 	bge	r3,r2,200e09c <_dtoa_r+0x1310>
 200e098:	1805883a 	mov	r2,r3
 200e09c:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 200e0a0:	e0ffcf17 	ldw	r3,-196(fp)
 200e0a4:	e0bfd217 	ldw	r2,-184(fp)
 200e0a8:	1885c83a 	sub	r2,r3,r2
 200e0ac:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 200e0b0:	e0ffda17 	ldw	r3,-152(fp)
 200e0b4:	e0bfd217 	ldw	r2,-184(fp)
 200e0b8:	1885c83a 	sub	r2,r3,r2
 200e0bc:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 200e0c0:	e0ffdc17 	ldw	r3,-144(fp)
 200e0c4:	e0bfd217 	ldw	r2,-184(fp)
 200e0c8:	1885c83a 	sub	r2,r3,r2
 200e0cc:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 200e0d0:	e0bfd017 	ldw	r2,-192(fp)
 200e0d4:	0080240e 	bge	zero,r2,200e168 <_dtoa_r+0x13dc>
    {
      if (leftright)
 200e0d8:	e0bfd917 	ldw	r2,-156(fp)
 200e0dc:	10001d26 	beq	r2,zero,200e154 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 200e0e0:	e0bfdb17 	ldw	r2,-148(fp)
 200e0e4:	00800f0e 	bge	zero,r2,200e124 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 200e0e8:	e1bfdb17 	ldw	r6,-148(fp)
 200e0ec:	e17fe317 	ldw	r5,-116(fp)
 200e0f0:	e13ff817 	ldw	r4,-32(fp)
 200e0f4:	20122980 	call	2012298 <__pow5mult>
 200e0f8:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 200e0fc:	e1bfe117 	ldw	r6,-124(fp)
 200e100:	e17fe317 	ldw	r5,-116(fp)
 200e104:	e13ff817 	ldw	r4,-32(fp)
 200e108:	2011ec80 	call	2011ec8 <__multiply>
 200e10c:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 200e110:	e17fe117 	ldw	r5,-124(fp)
 200e114:	e13ff817 	ldw	r4,-32(fp)
 200e118:	20119580 	call	2011958 <_Bfree>
	      b = b1;
 200e11c:	e0bfee17 	ldw	r2,-72(fp)
 200e120:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 200e124:	e0ffd017 	ldw	r3,-192(fp)
 200e128:	e0bfdb17 	ldw	r2,-148(fp)
 200e12c:	1885c83a 	sub	r2,r3,r2
 200e130:	e0bfd615 	stw	r2,-168(fp)
 200e134:	e0bfd617 	ldw	r2,-168(fp)
 200e138:	10000b26 	beq	r2,zero,200e168 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 200e13c:	e1bfd617 	ldw	r6,-168(fp)
 200e140:	e17fe117 	ldw	r5,-124(fp)
 200e144:	e13ff817 	ldw	r4,-32(fp)
 200e148:	20122980 	call	2012298 <__pow5mult>
 200e14c:	e0bfe115 	stw	r2,-124(fp)
 200e150:	00000506 	br	200e168 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 200e154:	e1bfd017 	ldw	r6,-192(fp)
 200e158:	e17fe117 	ldw	r5,-124(fp)
 200e15c:	e13ff817 	ldw	r4,-32(fp)
 200e160:	20122980 	call	2012298 <__pow5mult>
 200e164:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 200e168:	01400044 	movi	r5,1
 200e16c:	e13ff817 	ldw	r4,-32(fp)
 200e170:	2011e700 	call	2011e70 <__i2b>
 200e174:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 200e178:	e0bfdd17 	ldw	r2,-140(fp)
 200e17c:	0080050e 	bge	zero,r2,200e194 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 200e180:	e1bfdd17 	ldw	r6,-140(fp)
 200e184:	e17fe417 	ldw	r5,-112(fp)
 200e188:	e13ff817 	ldw	r4,-32(fp)
 200e18c:	20122980 	call	2012298 <__pow5mult>
 200e190:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 200e194:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 200e198:	e0bffb17 	ldw	r2,-20(fp)
 200e19c:	10800088 	cmpgei	r2,r2,2
 200e1a0:	1000121e 	bne	r2,zero,200e1ec <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 200e1a4:	e0bff217 	ldw	r2,-56(fp)
 200e1a8:	1000101e 	bne	r2,zero,200e1ec <_dtoa_r+0x1460>
 200e1ac:	e0fff317 	ldw	r3,-52(fp)
 200e1b0:	00800434 	movhi	r2,16
 200e1b4:	10bfffc4 	addi	r2,r2,-1
 200e1b8:	1884703a 	and	r2,r3,r2
 200e1bc:	10000b1e 	bne	r2,zero,200e1ec <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 200e1c0:	e0bff317 	ldw	r2,-52(fp)
 200e1c4:	109ffc2c 	andhi	r2,r2,32752
 200e1c8:	10000826 	beq	r2,zero,200e1ec <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 200e1cc:	e0bfcf17 	ldw	r2,-196(fp)
 200e1d0:	10800044 	addi	r2,r2,1
 200e1d4:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 200e1d8:	e0bfdc17 	ldw	r2,-144(fp)
 200e1dc:	10800044 	addi	r2,r2,1
 200e1e0:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 200e1e4:	00800044 	movi	r2,1
 200e1e8:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 200e1ec:	e0bfdd17 	ldw	r2,-140(fp)
 200e1f0:	10000f26 	beq	r2,zero,200e230 <_dtoa_r+0x14a4>
 200e1f4:	e0bfe417 	ldw	r2,-112(fp)
 200e1f8:	10800417 	ldw	r2,16(r2)
 200e1fc:	10bfffc4 	addi	r2,r2,-1
 200e200:	e0ffe417 	ldw	r3,-112(fp)
 200e204:	10800144 	addi	r2,r2,5
 200e208:	1085883a 	add	r2,r2,r2
 200e20c:	1085883a 	add	r2,r2,r2
 200e210:	1885883a 	add	r2,r3,r2
 200e214:	10800017 	ldw	r2,0(r2)
 200e218:	1009883a 	mov	r4,r2
 200e21c:	2011cf40 	call	2011cf4 <__hi0bits>
 200e220:	1007883a 	mov	r3,r2
 200e224:	00800804 	movi	r2,32
 200e228:	10c5c83a 	sub	r2,r2,r3
 200e22c:	00000106 	br	200e234 <_dtoa_r+0x14a8>
 200e230:	00800044 	movi	r2,1
 200e234:	e0ffdc17 	ldw	r3,-144(fp)
 200e238:	10c5883a 	add	r2,r2,r3
 200e23c:	108007cc 	andi	r2,r2,31
 200e240:	e0bfd215 	stw	r2,-184(fp)
 200e244:	e0bfd217 	ldw	r2,-184(fp)
 200e248:	10000426 	beq	r2,zero,200e25c <_dtoa_r+0x14d0>
    i = 32 - i;
 200e24c:	00c00804 	movi	r3,32
 200e250:	e0bfd217 	ldw	r2,-184(fp)
 200e254:	1885c83a 	sub	r2,r3,r2
 200e258:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 200e25c:	e0bfd217 	ldw	r2,-184(fp)
 200e260:	10800150 	cmplti	r2,r2,5
 200e264:	1000101e 	bne	r2,zero,200e2a8 <_dtoa_r+0x151c>
    {
      i -= 4;
 200e268:	e0bfd217 	ldw	r2,-184(fp)
 200e26c:	10bfff04 	addi	r2,r2,-4
 200e270:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200e274:	e0ffcf17 	ldw	r3,-196(fp)
 200e278:	e0bfd217 	ldw	r2,-184(fp)
 200e27c:	1885883a 	add	r2,r3,r2
 200e280:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 200e284:	e0ffda17 	ldw	r3,-152(fp)
 200e288:	e0bfd217 	ldw	r2,-184(fp)
 200e28c:	1885883a 	add	r2,r3,r2
 200e290:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 200e294:	e0ffdc17 	ldw	r3,-144(fp)
 200e298:	e0bfd217 	ldw	r2,-184(fp)
 200e29c:	1885883a 	add	r2,r3,r2
 200e2a0:	e0bfdc15 	stw	r2,-144(fp)
 200e2a4:	00001206 	br	200e2f0 <_dtoa_r+0x1564>
    }
  else if (i < 4)
 200e2a8:	e0bfd217 	ldw	r2,-184(fp)
 200e2ac:	10800108 	cmpgei	r2,r2,4
 200e2b0:	10000f1e 	bne	r2,zero,200e2f0 <_dtoa_r+0x1564>
    {
      i += 28;
 200e2b4:	e0bfd217 	ldw	r2,-184(fp)
 200e2b8:	10800704 	addi	r2,r2,28
 200e2bc:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 200e2c0:	e0ffcf17 	ldw	r3,-196(fp)
 200e2c4:	e0bfd217 	ldw	r2,-184(fp)
 200e2c8:	1885883a 	add	r2,r3,r2
 200e2cc:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 200e2d0:	e0ffda17 	ldw	r3,-152(fp)
 200e2d4:	e0bfd217 	ldw	r2,-184(fp)
 200e2d8:	1885883a 	add	r2,r3,r2
 200e2dc:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 200e2e0:	e0ffdc17 	ldw	r3,-144(fp)
 200e2e4:	e0bfd217 	ldw	r2,-184(fp)
 200e2e8:	1885883a 	add	r2,r3,r2
 200e2ec:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 200e2f0:	e0bfcf17 	ldw	r2,-196(fp)
 200e2f4:	0080050e 	bge	zero,r2,200e30c <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 200e2f8:	e1bfcf17 	ldw	r6,-196(fp)
 200e2fc:	e17fe117 	ldw	r5,-124(fp)
 200e300:	e13ff817 	ldw	r4,-32(fp)
 200e304:	20124100 	call	2012410 <__lshift>
 200e308:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 200e30c:	e0bfdc17 	ldw	r2,-144(fp)
 200e310:	0080050e 	bge	zero,r2,200e328 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 200e314:	e1bfdc17 	ldw	r6,-144(fp)
 200e318:	e17fe417 	ldw	r5,-112(fp)
 200e31c:	e13ff817 	ldw	r4,-32(fp)
 200e320:	20124100 	call	2012410 <__lshift>
 200e324:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 200e328:	e0bfd817 	ldw	r2,-160(fp)
 200e32c:	10001726 	beq	r2,zero,200e38c <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 200e330:	e17fe417 	ldw	r5,-112(fp)
 200e334:	e13fe117 	ldw	r4,-124(fp)
 200e338:	20126080 	call	2012608 <__mcmp>
 200e33c:	1000130e 	bge	r2,zero,200e38c <_dtoa_r+0x1600>
	{
	  k--;
 200e340:	e0bfd717 	ldw	r2,-164(fp)
 200e344:	10bfffc4 	addi	r2,r2,-1
 200e348:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 200e34c:	000f883a 	mov	r7,zero
 200e350:	01800284 	movi	r6,10
 200e354:	e17fe117 	ldw	r5,-124(fp)
 200e358:	e13ff817 	ldw	r4,-32(fp)
 200e35c:	20119d40 	call	20119d4 <__multadd>
 200e360:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 200e364:	e0bfd917 	ldw	r2,-156(fp)
 200e368:	10000626 	beq	r2,zero,200e384 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 200e36c:	000f883a 	mov	r7,zero
 200e370:	01800284 	movi	r6,10
 200e374:	e17fe317 	ldw	r5,-116(fp)
 200e378:	e13ff817 	ldw	r4,-32(fp)
 200e37c:	20119d40 	call	20119d4 <__multadd>
 200e380:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 200e384:	e0bfd517 	ldw	r2,-172(fp)
 200e388:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 200e38c:	e0bfd417 	ldw	r2,-176(fp)
 200e390:	00801f16 	blt	zero,r2,200e410 <_dtoa_r+0x1684>
 200e394:	e0bffb17 	ldw	r2,-20(fp)
 200e398:	108000d0 	cmplti	r2,r2,3
 200e39c:	10001c1e 	bne	r2,zero,200e410 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 200e3a0:	e0bfd417 	ldw	r2,-176(fp)
 200e3a4:	10000c16 	blt	r2,zero,200e3d8 <_dtoa_r+0x164c>
 200e3a8:	000f883a 	mov	r7,zero
 200e3ac:	01800144 	movi	r6,5
 200e3b0:	e17fe417 	ldw	r5,-112(fp)
 200e3b4:	e13ff817 	ldw	r4,-32(fp)
 200e3b8:	20119d40 	call	20119d4 <__multadd>
 200e3bc:	e0bfe415 	stw	r2,-112(fp)
 200e3c0:	e17fe417 	ldw	r5,-112(fp)
 200e3c4:	e13fe117 	ldw	r4,-124(fp)
 200e3c8:	20126080 	call	2012608 <__mcmp>
 200e3cc:	00800716 	blt	zero,r2,200e3ec <_dtoa_r+0x1660>
 200e3d0:	00000106 	br	200e3d8 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 200e3d4:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 200e3d8:	e0800217 	ldw	r2,8(fp)
 200e3dc:	0084303a 	nor	r2,zero,r2
 200e3e0:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 200e3e4:	00011d06 	br	200e85c <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 200e3e8:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 200e3ec:	e0bfe717 	ldw	r2,-100(fp)
 200e3f0:	10c00044 	addi	r3,r2,1
 200e3f4:	e0ffe715 	stw	r3,-100(fp)
 200e3f8:	00c00c44 	movi	r3,49
 200e3fc:	10c00005 	stb	r3,0(r2)
      k++;
 200e400:	e0bfd717 	ldw	r2,-164(fp)
 200e404:	10800044 	addi	r2,r2,1
 200e408:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 200e40c:	00011306 	br	200e85c <_dtoa_r+0x1ad0>
    }
  if (leftright)
 200e410:	e0bfd917 	ldw	r2,-156(fp)
 200e414:	1000ba26 	beq	r2,zero,200e700 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 200e418:	e0bfda17 	ldw	r2,-152(fp)
 200e41c:	0080050e 	bge	zero,r2,200e434 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 200e420:	e1bfda17 	ldw	r6,-152(fp)
 200e424:	e17fe317 	ldw	r5,-116(fp)
 200e428:	e13ff817 	ldw	r4,-32(fp)
 200e42c:	20124100 	call	2012410 <__lshift>
 200e430:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 200e434:	e0bfe317 	ldw	r2,-116(fp)
 200e438:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 200e43c:	e0bfde17 	ldw	r2,-136(fp)
 200e440:	10001826 	beq	r2,zero,200e4a4 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 200e444:	e0bfe317 	ldw	r2,-116(fp)
 200e448:	10800117 	ldw	r2,4(r2)
 200e44c:	100b883a 	mov	r5,r2
 200e450:	e13ff817 	ldw	r4,-32(fp)
 200e454:	20118280 	call	2011828 <_Balloc>
 200e458:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 200e45c:	e0bfe317 	ldw	r2,-116(fp)
 200e460:	10c00304 	addi	r3,r2,12
 200e464:	e0bfe217 	ldw	r2,-120(fp)
 200e468:	11000304 	addi	r4,r2,12
 200e46c:	e0bfe217 	ldw	r2,-120(fp)
 200e470:	10800417 	ldw	r2,16(r2)
 200e474:	10800084 	addi	r2,r2,2
 200e478:	1085883a 	add	r2,r2,r2
 200e47c:	1085883a 	add	r2,r2,r2
 200e480:	100d883a 	mov	r6,r2
 200e484:	200b883a 	mov	r5,r4
 200e488:	1809883a 	mov	r4,r3
 200e48c:	2009c800 	call	2009c80 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 200e490:	01800044 	movi	r6,1
 200e494:	e17fe317 	ldw	r5,-116(fp)
 200e498:	e13ff817 	ldw	r4,-32(fp)
 200e49c:	20124100 	call	2012410 <__lshift>
 200e4a0:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 200e4a4:	00800044 	movi	r2,1
 200e4a8:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 200e4ac:	e17fe417 	ldw	r5,-112(fp)
 200e4b0:	e13fe117 	ldw	r4,-124(fp)
 200e4b4:	200c9d80 	call	200c9d8 <quorem>
 200e4b8:	10800c04 	addi	r2,r2,48
 200e4bc:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 200e4c0:	e17fe217 	ldw	r5,-120(fp)
 200e4c4:	e13fe117 	ldw	r4,-124(fp)
 200e4c8:	20126080 	call	2012608 <__mcmp>
 200e4cc:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 200e4d0:	e1bfe317 	ldw	r6,-116(fp)
 200e4d4:	e17fe417 	ldw	r5,-112(fp)
 200e4d8:	e13ff817 	ldw	r4,-32(fp)
 200e4dc:	201271c0 	call	201271c <__mdiff>
 200e4e0:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 200e4e4:	e0bfef17 	ldw	r2,-68(fp)
 200e4e8:	10800317 	ldw	r2,12(r2)
 200e4ec:	1000041e 	bne	r2,zero,200e500 <_dtoa_r+0x1774>
 200e4f0:	e17fef17 	ldw	r5,-68(fp)
 200e4f4:	e13fe117 	ldw	r4,-124(fp)
 200e4f8:	20126080 	call	2012608 <__mcmp>
 200e4fc:	00000106 	br	200e504 <_dtoa_r+0x1778>
 200e500:	00800044 	movi	r2,1
 200e504:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 200e508:	e17fef17 	ldw	r5,-68(fp)
 200e50c:	e13ff817 	ldw	r4,-32(fp)
 200e510:	20119580 	call	2011958 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 200e514:	e0bfec17 	ldw	r2,-80(fp)
 200e518:	1000131e 	bne	r2,zero,200e568 <_dtoa_r+0x17dc>
 200e51c:	e0bffb17 	ldw	r2,-20(fp)
 200e520:	1000111e 	bne	r2,zero,200e568 <_dtoa_r+0x17dc>
 200e524:	e0bff217 	ldw	r2,-56(fp)
 200e528:	1080004c 	andi	r2,r2,1
 200e52c:	10000e1e 	bne	r2,zero,200e568 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 200e530:	e0bfd117 	ldw	r2,-188(fp)
 200e534:	10800e58 	cmpnei	r2,r2,57
 200e538:	10003726 	beq	r2,zero,200e618 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 200e53c:	e0bfd617 	ldw	r2,-168(fp)
 200e540:	0080030e 	bge	zero,r2,200e550 <_dtoa_r+0x17c4>
		dig++;
 200e544:	e0bfd117 	ldw	r2,-188(fp)
 200e548:	10800044 	addi	r2,r2,1
 200e54c:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 200e550:	e0bfe717 	ldw	r2,-100(fp)
 200e554:	10c00044 	addi	r3,r2,1
 200e558:	e0ffe715 	stw	r3,-100(fp)
 200e55c:	e0ffd117 	ldw	r3,-188(fp)
 200e560:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200e564:	0000bd06 	br	200e85c <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 200e568:	e0bfd617 	ldw	r2,-168(fp)
 200e56c:	10000716 	blt	r2,zero,200e58c <_dtoa_r+0x1800>
 200e570:	e0bfd617 	ldw	r2,-168(fp)
 200e574:	1000221e 	bne	r2,zero,200e600 <_dtoa_r+0x1874>
 200e578:	e0bffb17 	ldw	r2,-20(fp)
 200e57c:	1000201e 	bne	r2,zero,200e600 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 200e580:	e0bff217 	ldw	r2,-56(fp)
 200e584:	1080004c 	andi	r2,r2,1
 200e588:	10001d1e 	bne	r2,zero,200e600 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 200e58c:	e0bfec17 	ldw	r2,-80(fp)
 200e590:	0080150e 	bge	zero,r2,200e5e8 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 200e594:	01800044 	movi	r6,1
 200e598:	e17fe117 	ldw	r5,-124(fp)
 200e59c:	e13ff817 	ldw	r4,-32(fp)
 200e5a0:	20124100 	call	2012410 <__lshift>
 200e5a4:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 200e5a8:	e17fe417 	ldw	r5,-112(fp)
 200e5ac:	e13fe117 	ldw	r4,-124(fp)
 200e5b0:	20126080 	call	2012608 <__mcmp>
 200e5b4:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 200e5b8:	e0bfec17 	ldw	r2,-80(fp)
 200e5bc:	00800516 	blt	zero,r2,200e5d4 <_dtoa_r+0x1848>
 200e5c0:	e0bfec17 	ldw	r2,-80(fp)
 200e5c4:	1000081e 	bne	r2,zero,200e5e8 <_dtoa_r+0x185c>
 200e5c8:	e0bfd117 	ldw	r2,-188(fp)
 200e5cc:	1080004c 	andi	r2,r2,1
 200e5d0:	10000526 	beq	r2,zero,200e5e8 <_dtoa_r+0x185c>
		      && dig++ == '9')
 200e5d4:	e0bfd117 	ldw	r2,-188(fp)
 200e5d8:	10c00044 	addi	r3,r2,1
 200e5dc:	e0ffd115 	stw	r3,-188(fp)
 200e5e0:	10800e58 	cmpnei	r2,r2,57
 200e5e4:	10000e26 	beq	r2,zero,200e620 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 200e5e8:	e0bfe717 	ldw	r2,-100(fp)
 200e5ec:	10c00044 	addi	r3,r2,1
 200e5f0:	e0ffe715 	stw	r3,-100(fp)
 200e5f4:	e0ffd117 	ldw	r3,-188(fp)
 200e5f8:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200e5fc:	00009706 	br	200e85c <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 200e600:	e0bfec17 	ldw	r2,-80(fp)
 200e604:	0080140e 	bge	zero,r2,200e658 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 200e608:	e0bfd117 	ldw	r2,-188(fp)
 200e60c:	10800e58 	cmpnei	r2,r2,57
 200e610:	10000a1e 	bne	r2,zero,200e63c <_dtoa_r+0x18b0>
 200e614:	00000306 	br	200e624 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 200e618:	0001883a 	nop
 200e61c:	00000106 	br	200e624 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 200e620:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 200e624:	e0bfe717 	ldw	r2,-100(fp)
 200e628:	10c00044 	addi	r3,r2,1
 200e62c:	e0ffe715 	stw	r3,-100(fp)
 200e630:	00c00e44 	movi	r3,57
 200e634:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 200e638:	00005d06 	br	200e7b0 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 200e63c:	e0bfe717 	ldw	r2,-100(fp)
 200e640:	10c00044 	addi	r3,r2,1
 200e644:	e0ffe715 	stw	r3,-100(fp)
 200e648:	e0ffd117 	ldw	r3,-188(fp)
 200e64c:	18c00044 	addi	r3,r3,1
 200e650:	10c00005 	stb	r3,0(r2)
	      goto ret;
 200e654:	00008106 	br	200e85c <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 200e658:	e0bfe717 	ldw	r2,-100(fp)
 200e65c:	10c00044 	addi	r3,r2,1
 200e660:	e0ffe715 	stw	r3,-100(fp)
 200e664:	e0ffd117 	ldw	r3,-188(fp)
 200e668:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 200e66c:	e0ffd217 	ldw	r3,-184(fp)
 200e670:	e0bfd417 	ldw	r2,-176(fp)
 200e674:	18803b26 	beq	r3,r2,200e764 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 200e678:	000f883a 	mov	r7,zero
 200e67c:	01800284 	movi	r6,10
 200e680:	e17fe117 	ldw	r5,-124(fp)
 200e684:	e13ff817 	ldw	r4,-32(fp)
 200e688:	20119d40 	call	20119d4 <__multadd>
 200e68c:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 200e690:	e0ffe217 	ldw	r3,-120(fp)
 200e694:	e0bfe317 	ldw	r2,-116(fp)
 200e698:	1880091e 	bne	r3,r2,200e6c0 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 200e69c:	000f883a 	mov	r7,zero
 200e6a0:	01800284 	movi	r6,10
 200e6a4:	e17fe317 	ldw	r5,-116(fp)
 200e6a8:	e13ff817 	ldw	r4,-32(fp)
 200e6ac:	20119d40 	call	20119d4 <__multadd>
 200e6b0:	e0bfe315 	stw	r2,-116(fp)
 200e6b4:	e0bfe317 	ldw	r2,-116(fp)
 200e6b8:	e0bfe215 	stw	r2,-120(fp)
 200e6bc:	00000c06 	br	200e6f0 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 200e6c0:	000f883a 	mov	r7,zero
 200e6c4:	01800284 	movi	r6,10
 200e6c8:	e17fe217 	ldw	r5,-120(fp)
 200e6cc:	e13ff817 	ldw	r4,-32(fp)
 200e6d0:	20119d40 	call	20119d4 <__multadd>
 200e6d4:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 200e6d8:	000f883a 	mov	r7,zero
 200e6dc:	01800284 	movi	r6,10
 200e6e0:	e17fe317 	ldw	r5,-116(fp)
 200e6e4:	e13ff817 	ldw	r4,-32(fp)
 200e6e8:	20119d40 	call	20119d4 <__multadd>
 200e6ec:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 200e6f0:	e0bfd217 	ldw	r2,-184(fp)
 200e6f4:	10800044 	addi	r2,r2,1
 200e6f8:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 200e6fc:	003f6b06 	br	200e4ac <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 200e700:	00800044 	movi	r2,1
 200e704:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 200e708:	e43fe717 	ldw	r16,-100(fp)
 200e70c:	80800044 	addi	r2,r16,1
 200e710:	e0bfe715 	stw	r2,-100(fp)
 200e714:	e17fe417 	ldw	r5,-112(fp)
 200e718:	e13fe117 	ldw	r4,-124(fp)
 200e71c:	200c9d80 	call	200c9d8 <quorem>
 200e720:	10800c04 	addi	r2,r2,48
 200e724:	e0bfd115 	stw	r2,-188(fp)
 200e728:	e0bfd117 	ldw	r2,-188(fp)
 200e72c:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 200e730:	e0ffd217 	ldw	r3,-184(fp)
 200e734:	e0bfd417 	ldw	r2,-176(fp)
 200e738:	18800c0e 	bge	r3,r2,200e76c <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 200e73c:	000f883a 	mov	r7,zero
 200e740:	01800284 	movi	r6,10
 200e744:	e17fe117 	ldw	r5,-124(fp)
 200e748:	e13ff817 	ldw	r4,-32(fp)
 200e74c:	20119d40 	call	20119d4 <__multadd>
 200e750:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 200e754:	e0bfd217 	ldw	r2,-184(fp)
 200e758:	10800044 	addi	r2,r2,1
 200e75c:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 200e760:	003fe906 	br	200e708 <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 200e764:	0001883a 	nop
 200e768:	00000106 	br	200e770 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 200e76c:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 200e770:	01800044 	movi	r6,1
 200e774:	e17fe117 	ldw	r5,-124(fp)
 200e778:	e13ff817 	ldw	r4,-32(fp)
 200e77c:	20124100 	call	2012410 <__lshift>
 200e780:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 200e784:	e17fe417 	ldw	r5,-112(fp)
 200e788:	e13fe117 	ldw	r4,-124(fp)
 200e78c:	20126080 	call	2012608 <__mcmp>
 200e790:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 200e794:	e0bfd617 	ldw	r2,-168(fp)
 200e798:	00801216 	blt	zero,r2,200e7e4 <_dtoa_r+0x1a58>
 200e79c:	e0bfd617 	ldw	r2,-168(fp)
 200e7a0:	1000211e 	bne	r2,zero,200e828 <_dtoa_r+0x1a9c>
 200e7a4:	e0bfd117 	ldw	r2,-188(fp)
 200e7a8:	1080004c 	andi	r2,r2,1
 200e7ac:	10001e26 	beq	r2,zero,200e828 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 200e7b0:	00000c06 	br	200e7e4 <_dtoa_r+0x1a58>
	if (s == s0)
 200e7b4:	e0ffe717 	ldw	r3,-100(fp)
 200e7b8:	e0bfe917 	ldw	r2,-92(fp)
 200e7bc:	1880091e 	bne	r3,r2,200e7e4 <_dtoa_r+0x1a58>
	  {
	    k++;
 200e7c0:	e0bfd717 	ldw	r2,-164(fp)
 200e7c4:	10800044 	addi	r2,r2,1
 200e7c8:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 200e7cc:	e0bfe717 	ldw	r2,-100(fp)
 200e7d0:	10c00044 	addi	r3,r2,1
 200e7d4:	e0ffe715 	stw	r3,-100(fp)
 200e7d8:	00c00c44 	movi	r3,49
 200e7dc:	10c00005 	stb	r3,0(r2)
	    goto ret;
 200e7e0:	00001e06 	br	200e85c <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 200e7e4:	e0bfe717 	ldw	r2,-100(fp)
 200e7e8:	10bfffc4 	addi	r2,r2,-1
 200e7ec:	e0bfe715 	stw	r2,-100(fp)
 200e7f0:	e0bfe717 	ldw	r2,-100(fp)
 200e7f4:	10800003 	ldbu	r2,0(r2)
 200e7f8:	10803fcc 	andi	r2,r2,255
 200e7fc:	1080201c 	xori	r2,r2,128
 200e800:	10bfe004 	addi	r2,r2,-128
 200e804:	10800e60 	cmpeqi	r2,r2,57
 200e808:	103fea1e 	bne	r2,zero,200e7b4 <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 200e80c:	e0bfe717 	ldw	r2,-100(fp)
 200e810:	10c00044 	addi	r3,r2,1
 200e814:	e0ffe715 	stw	r3,-100(fp)
 200e818:	10c00003 	ldbu	r3,0(r2)
 200e81c:	18c00044 	addi	r3,r3,1
 200e820:	10c00005 	stb	r3,0(r2)
 200e824:	00000d06 	br	200e85c <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 200e828:	e0bfe717 	ldw	r2,-100(fp)
 200e82c:	10bfffc4 	addi	r2,r2,-1
 200e830:	e0bfe715 	stw	r2,-100(fp)
 200e834:	e0bfe717 	ldw	r2,-100(fp)
 200e838:	10800003 	ldbu	r2,0(r2)
 200e83c:	10803fcc 	andi	r2,r2,255
 200e840:	1080201c 	xori	r2,r2,128
 200e844:	10bfe004 	addi	r2,r2,-128
 200e848:	10800c20 	cmpeqi	r2,r2,48
 200e84c:	103ff61e 	bne	r2,zero,200e828 <_dtoa_r+0x1a9c>
      s++;
 200e850:	e0bfe717 	ldw	r2,-100(fp)
 200e854:	10800044 	addi	r2,r2,1
 200e858:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 200e85c:	e17fe417 	ldw	r5,-112(fp)
 200e860:	e13ff817 	ldw	r4,-32(fp)
 200e864:	20119580 	call	2011958 <_Bfree>
  if (mhi)
 200e868:	e0bfe317 	ldw	r2,-116(fp)
 200e86c:	10000d26 	beq	r2,zero,200e8a4 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 200e870:	e0bfe217 	ldw	r2,-120(fp)
 200e874:	10000626 	beq	r2,zero,200e890 <_dtoa_r+0x1b04>
 200e878:	e0ffe217 	ldw	r3,-120(fp)
 200e87c:	e0bfe317 	ldw	r2,-116(fp)
 200e880:	18800326 	beq	r3,r2,200e890 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 200e884:	e17fe217 	ldw	r5,-120(fp)
 200e888:	e13ff817 	ldw	r4,-32(fp)
 200e88c:	20119580 	call	2011958 <_Bfree>
      Bfree (ptr, mhi);
 200e890:	e17fe317 	ldw	r5,-116(fp)
 200e894:	e13ff817 	ldw	r4,-32(fp)
 200e898:	20119580 	call	2011958 <_Bfree>
 200e89c:	00000106 	br	200e8a4 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 200e8a0:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 200e8a4:	e17fe117 	ldw	r5,-124(fp)
 200e8a8:	e13ff817 	ldw	r4,-32(fp)
 200e8ac:	20119580 	call	2011958 <_Bfree>
  *s = 0;
 200e8b0:	e0bfe717 	ldw	r2,-100(fp)
 200e8b4:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 200e8b8:	e0bfd717 	ldw	r2,-164(fp)
 200e8bc:	10c00044 	addi	r3,r2,1
 200e8c0:	e0800317 	ldw	r2,12(fp)
 200e8c4:	10c00015 	stw	r3,0(r2)
  if (rve)
 200e8c8:	e0800517 	ldw	r2,20(fp)
 200e8cc:	10000326 	beq	r2,zero,200e8dc <_dtoa_r+0x1b50>
    *rve = s;
 200e8d0:	e0800517 	ldw	r2,20(fp)
 200e8d4:	e0ffe717 	ldw	r3,-100(fp)
 200e8d8:	10c00015 	stw	r3,0(r2)
  return s0;
 200e8dc:	e0bfe917 	ldw	r2,-92(fp)
}
 200e8e0:	e6fffc04 	addi	sp,fp,-16
 200e8e4:	dfc00517 	ldw	ra,20(sp)
 200e8e8:	df000417 	ldw	fp,16(sp)
 200e8ec:	dcc00317 	ldw	r19,12(sp)
 200e8f0:	dc800217 	ldw	r18,8(sp)
 200e8f4:	dc400117 	ldw	r17,4(sp)
 200e8f8:	dc000017 	ldw	r16,0(sp)
 200e8fc:	dec00604 	addi	sp,sp,24
 200e900:	f800283a 	ret

0200e904 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200e904:	defff504 	addi	sp,sp,-44
 200e908:	dfc00a15 	stw	ra,40(sp)
 200e90c:	df000915 	stw	fp,36(sp)
 200e910:	dcc00815 	stw	r19,32(sp)
 200e914:	dc800715 	stw	r18,28(sp)
 200e918:	dc400615 	stw	r17,24(sp)
 200e91c:	dc000515 	stw	r16,20(sp)
 200e920:	df000904 	addi	fp,sp,36
 200e924:	e13ffb15 	stw	r4,-20(fp)
 200e928:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 200e92c:	8080030b 	ldhu	r2,12(r16)
 200e930:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 200e934:	e0bff90b 	ldhu	r2,-28(fp)
 200e938:	10bfffcc 	andi	r2,r2,65535
 200e93c:	1080020c 	andi	r2,r2,8
 200e940:	1000831e 	bne	r2,zero,200eb50 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 200e944:	8080030b 	ldhu	r2,12(r16)
 200e948:	10820014 	ori	r2,r2,2048
 200e94c:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 200e950:	80800117 	ldw	r2,4(r16)
 200e954:	00800216 	blt	zero,r2,200e960 <__sflush_r+0x5c>
 200e958:	80800f17 	ldw	r2,60(r16)
 200e95c:	00807a0e 	bge	zero,r2,200eb48 <__sflush_r+0x244>
 200e960:	80800a17 	ldw	r2,40(r16)
 200e964:	10007826 	beq	r2,zero,200eb48 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 200e968:	e0bffb17 	ldw	r2,-20(fp)
 200e96c:	10800017 	ldw	r2,0(r2)
 200e970:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 200e974:	e0bffb17 	ldw	r2,-20(fp)
 200e978:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 200e97c:	8080030b 	ldhu	r2,12(r16)
 200e980:	10bfffcc 	andi	r2,r2,65535
 200e984:	1084000c 	andi	r2,r2,4096
 200e988:	10000326 	beq	r2,zero,200e998 <__sflush_r+0x94>
	    curoff = fp->_offset;
 200e98c:	80801417 	ldw	r2,80(r16)
 200e990:	e0bff715 	stw	r2,-36(fp)
 200e994:	00002206 	br	200ea20 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 200e998:	80800a17 	ldw	r2,40(r16)
 200e99c:	80c00717 	ldw	r3,28(r16)
 200e9a0:	01c00044 	movi	r7,1
 200e9a4:	000d883a 	mov	r6,zero
 200e9a8:	180b883a 	mov	r5,r3
 200e9ac:	e13ffb17 	ldw	r4,-20(fp)
 200e9b0:	103ee83a 	callr	r2
 200e9b4:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 200e9b8:	e0bff717 	ldw	r2,-36(fp)
 200e9bc:	10bfffd8 	cmpnei	r2,r2,-1
 200e9c0:	1000171e 	bne	r2,zero,200ea20 <__sflush_r+0x11c>
 200e9c4:	e0bffb17 	ldw	r2,-20(fp)
 200e9c8:	10800017 	ldw	r2,0(r2)
 200e9cc:	10001426 	beq	r2,zero,200ea20 <__sflush_r+0x11c>
		{
		  int result = EOF;
 200e9d0:	00bfffc4 	movi	r2,-1
 200e9d4:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200e9d8:	e0bffb17 	ldw	r2,-20(fp)
 200e9dc:	10800017 	ldw	r2,0(r2)
 200e9e0:	10800760 	cmpeqi	r2,r2,29
 200e9e4:	1000041e 	bne	r2,zero,200e9f8 <__sflush_r+0xf4>
 200e9e8:	e0bffb17 	ldw	r2,-20(fp)
 200e9ec:	10800017 	ldw	r2,0(r2)
 200e9f0:	10800598 	cmpnei	r2,r2,22
 200e9f4:	1000051e 	bne	r2,zero,200ea0c <__sflush_r+0x108>
		    {
		      result = 0;
 200e9f8:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 200e9fc:	e0bffb17 	ldw	r2,-20(fp)
 200ea00:	e0fffa17 	ldw	r3,-24(fp)
 200ea04:	10c00015 	stw	r3,0(r2)
 200ea08:	00000306 	br	200ea18 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 200ea0c:	8080030b 	ldhu	r2,12(r16)
 200ea10:	10801014 	ori	r2,r2,64
 200ea14:	8080030d 	sth	r2,12(r16)
		  return result;
 200ea18:	e0bff817 	ldw	r2,-32(fp)
 200ea1c:	00007106 	br	200ebe4 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 200ea20:	8080030b 	ldhu	r2,12(r16)
 200ea24:	10bfffcc 	andi	r2,r2,65535
 200ea28:	1080010c 	andi	r2,r2,4
 200ea2c:	10000a26 	beq	r2,zero,200ea58 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 200ea30:	80800117 	ldw	r2,4(r16)
 200ea34:	e0fff717 	ldw	r3,-36(fp)
 200ea38:	1885c83a 	sub	r2,r3,r2
 200ea3c:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 200ea40:	80800c17 	ldw	r2,48(r16)
 200ea44:	10000426 	beq	r2,zero,200ea58 <__sflush_r+0x154>
                curoff -= fp->_ur;
 200ea48:	80800f17 	ldw	r2,60(r16)
 200ea4c:	e0fff717 	ldw	r3,-36(fp)
 200ea50:	1885c83a 	sub	r2,r3,r2
 200ea54:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 200ea58:	80800a17 	ldw	r2,40(r16)
 200ea5c:	80c00717 	ldw	r3,28(r16)
 200ea60:	000f883a 	mov	r7,zero
 200ea64:	e1bff717 	ldw	r6,-36(fp)
 200ea68:	180b883a 	mov	r5,r3
 200ea6c:	e13ffb17 	ldw	r4,-20(fp)
 200ea70:	103ee83a 	callr	r2
 200ea74:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 200ea78:	e0bff717 	ldw	r2,-36(fp)
 200ea7c:	10bfffd8 	cmpnei	r2,r2,-1
 200ea80:	10000b1e 	bne	r2,zero,200eab0 <__sflush_r+0x1ac>
 200ea84:	e0bffb17 	ldw	r2,-20(fp)
 200ea88:	10800017 	ldw	r2,0(r2)
 200ea8c:	10000826 	beq	r2,zero,200eab0 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200ea90:	e0bffb17 	ldw	r2,-20(fp)
 200ea94:	10800017 	ldw	r2,0(r2)
 200ea98:	10800760 	cmpeqi	r2,r2,29
 200ea9c:	1000041e 	bne	r2,zero,200eab0 <__sflush_r+0x1ac>
 200eaa0:	e0bffb17 	ldw	r2,-20(fp)
 200eaa4:	10800017 	ldw	r2,0(r2)
 200eaa8:	10800598 	cmpnei	r2,r2,22
 200eaac:	1000211e 	bne	r2,zero,200eb34 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 200eab0:	80c0030b 	ldhu	r3,12(r16)
 200eab4:	00bdffc4 	movi	r2,-2049
 200eab8:	1884703a 	and	r2,r3,r2
 200eabc:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 200eac0:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 200eac4:	80800417 	ldw	r2,16(r16)
 200eac8:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 200eacc:	8080030b 	ldhu	r2,12(r16)
 200ead0:	10bfffcc 	andi	r2,r2,65535
 200ead4:	1084000c 	andi	r2,r2,4096
 200ead8:	10000826 	beq	r2,zero,200eafc <__sflush_r+0x1f8>
 200eadc:	e0bff717 	ldw	r2,-36(fp)
 200eae0:	10bfffd8 	cmpnei	r2,r2,-1
 200eae4:	1000031e 	bne	r2,zero,200eaf4 <__sflush_r+0x1f0>
 200eae8:	e0bffb17 	ldw	r2,-20(fp)
 200eaec:	10800017 	ldw	r2,0(r2)
 200eaf0:	1000021e 	bne	r2,zero,200eafc <__sflush_r+0x1f8>
		fp->_offset = curoff;
 200eaf4:	e0bff717 	ldw	r2,-36(fp)
 200eaf8:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 200eafc:	e0bffb17 	ldw	r2,-20(fp)
 200eb00:	e0fffa17 	ldw	r3,-24(fp)
 200eb04:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 200eb08:	80800c17 	ldw	r2,48(r16)
 200eb0c:	10000e26 	beq	r2,zero,200eb48 <__sflush_r+0x244>
		FREEUB (ptr, fp);
 200eb10:	80c00c17 	ldw	r3,48(r16)
 200eb14:	80801004 	addi	r2,r16,64
 200eb18:	18800426 	beq	r3,r2,200eb2c <__sflush_r+0x228>
 200eb1c:	80800c17 	ldw	r2,48(r16)
 200eb20:	100b883a 	mov	r5,r2
 200eb24:	e13ffb17 	ldw	r4,-20(fp)
 200eb28:	200f2a80 	call	200f2a8 <_free_r>
 200eb2c:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 200eb30:	00000506 	br	200eb48 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 200eb34:	8080030b 	ldhu	r2,12(r16)
 200eb38:	10801014 	ori	r2,r2,64
 200eb3c:	8080030d 	sth	r2,12(r16)
	      return EOF;
 200eb40:	00bfffc4 	movi	r2,-1
 200eb44:	00002706 	br	200ebe4 <__sflush_r+0x2e0>
	    }
	}
      return 0;
 200eb48:	0005883a 	mov	r2,zero
 200eb4c:	00002506 	br	200ebe4 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 200eb50:	84400417 	ldw	r17,16(r16)
 200eb54:	8800021e 	bne	r17,zero,200eb60 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 200eb58:	0005883a 	mov	r2,zero
 200eb5c:	00002106 	br	200ebe4 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 200eb60:	80800017 	ldw	r2,0(r16)
 200eb64:	1007883a 	mov	r3,r2
 200eb68:	8805883a 	mov	r2,r17
 200eb6c:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 200eb70:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 200eb74:	e0bff90b 	ldhu	r2,-28(fp)
 200eb78:	10bfffcc 	andi	r2,r2,65535
 200eb7c:	108000cc 	andi	r2,r2,3
 200eb80:	1000021e 	bne	r2,zero,200eb8c <__sflush_r+0x288>
 200eb84:	80800517 	ldw	r2,20(r16)
 200eb88:	00000106 	br	200eb90 <__sflush_r+0x28c>
 200eb8c:	0005883a 	mov	r2,zero
 200eb90:	80800215 	stw	r2,8(r16)

  while (n > 0)
 200eb94:	00001106 	br	200ebdc <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 200eb98:	80800917 	ldw	r2,36(r16)
 200eb9c:	80c00717 	ldw	r3,28(r16)
 200eba0:	900f883a 	mov	r7,r18
 200eba4:	880d883a 	mov	r6,r17
 200eba8:	180b883a 	mov	r5,r3
 200ebac:	e13ffb17 	ldw	r4,-20(fp)
 200ebb0:	103ee83a 	callr	r2
 200ebb4:	1027883a 	mov	r19,r2
      if (t <= 0)
 200ebb8:	04c00516 	blt	zero,r19,200ebd0 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 200ebbc:	8080030b 	ldhu	r2,12(r16)
 200ebc0:	10801014 	ori	r2,r2,64
 200ebc4:	8080030d 	sth	r2,12(r16)
          return EOF;
 200ebc8:	00bfffc4 	movi	r2,-1
 200ebcc:	00000506 	br	200ebe4 <__sflush_r+0x2e0>
	}
      p += t;
 200ebd0:	9805883a 	mov	r2,r19
 200ebd4:	88a3883a 	add	r17,r17,r2
      n -= t;
 200ebd8:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 200ebdc:	04bfee16 	blt	zero,r18,200eb98 <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 200ebe0:	0005883a 	mov	r2,zero
}
 200ebe4:	e6fffc04 	addi	sp,fp,-16
 200ebe8:	dfc00517 	ldw	ra,20(sp)
 200ebec:	df000417 	ldw	fp,16(sp)
 200ebf0:	dcc00317 	ldw	r19,12(sp)
 200ebf4:	dc800217 	ldw	r18,8(sp)
 200ebf8:	dc400117 	ldw	r17,4(sp)
 200ebfc:	dc000017 	ldw	r16,0(sp)
 200ec00:	dec00604 	addi	sp,sp,24
 200ec04:	f800283a 	ret

0200ec08 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200ec08:	defffa04 	addi	sp,sp,-24
 200ec0c:	dfc00515 	stw	ra,20(sp)
 200ec10:	df000415 	stw	fp,16(sp)
 200ec14:	dc000315 	stw	r16,12(sp)
 200ec18:	df000404 	addi	fp,sp,16
 200ec1c:	e13ffe15 	stw	r4,-8(fp)
 200ec20:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 200ec24:	e0bffe17 	ldw	r2,-8(fp)
 200ec28:	e0bffc15 	stw	r2,-16(fp)
 200ec2c:	e0bffc17 	ldw	r2,-16(fp)
 200ec30:	10000526 	beq	r2,zero,200ec48 <_fflush_r+0x40>
 200ec34:	e0bffc17 	ldw	r2,-16(fp)
 200ec38:	10800e17 	ldw	r2,56(r2)
 200ec3c:	1000021e 	bne	r2,zero,200ec48 <_fflush_r+0x40>
 200ec40:	e13ffc17 	ldw	r4,-16(fp)
 200ec44:	200f0880 	call	200f088 <__sinit>

  if (!fp->_flags)
 200ec48:	8080030b 	ldhu	r2,12(r16)
 200ec4c:	10bfffcc 	andi	r2,r2,65535
 200ec50:	10a0001c 	xori	r2,r2,32768
 200ec54:	10a00004 	addi	r2,r2,-32768
 200ec58:	1000021e 	bne	r2,zero,200ec64 <_fflush_r+0x5c>
    return 0;
 200ec5c:	0005883a 	mov	r2,zero
 200ec60:	00000506 	br	200ec78 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 200ec64:	800b883a 	mov	r5,r16
 200ec68:	e13ffe17 	ldw	r4,-8(fp)
 200ec6c:	200e9040 	call	200e904 <__sflush_r>
 200ec70:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 200ec74:	e0bffd17 	ldw	r2,-12(fp)
}
 200ec78:	e6ffff04 	addi	sp,fp,-4
 200ec7c:	dfc00217 	ldw	ra,8(sp)
 200ec80:	df000117 	ldw	fp,4(sp)
 200ec84:	dc000017 	ldw	r16,0(sp)
 200ec88:	dec00304 	addi	sp,sp,12
 200ec8c:	f800283a 	ret

0200ec90 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 200ec90:	defffe04 	addi	sp,sp,-8
 200ec94:	dfc00115 	stw	ra,4(sp)
 200ec98:	df000015 	stw	fp,0(sp)
 200ec9c:	d839883a 	mov	fp,sp
 200eca0:	2005883a 	mov	r2,r4
  if (fp == NULL)
 200eca4:	1000061e 	bne	r2,zero,200ecc0 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 200eca8:	d0a03117 	ldw	r2,-32572(gp)
 200ecac:	01408074 	movhi	r5,513
 200ecb0:	297b0204 	addi	r5,r5,-5112
 200ecb4:	1009883a 	mov	r4,r2
 200ecb8:	20100880 	call	2010088 <_fwalk_reent>
 200ecbc:	00000406 	br	200ecd0 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 200ecc0:	d0e03017 	ldw	r3,-32576(gp)
 200ecc4:	100b883a 	mov	r5,r2
 200ecc8:	1809883a 	mov	r4,r3
 200eccc:	200ec080 	call	200ec08 <_fflush_r>
}
 200ecd0:	e037883a 	mov	sp,fp
 200ecd4:	dfc00117 	ldw	ra,4(sp)
 200ecd8:	df000017 	ldw	fp,0(sp)
 200ecdc:	dec00204 	addi	sp,sp,8
 200ece0:	f800283a 	ret

0200ece4 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 200ece4:	defffa04 	addi	sp,sp,-24
 200ece8:	dfc00515 	stw	ra,20(sp)
 200ecec:	df000415 	stw	fp,16(sp)
 200ecf0:	df000404 	addi	fp,sp,16
 200ecf4:	e13ffc15 	stw	r4,-16(fp)
 200ecf8:	e17ffd15 	stw	r5,-12(fp)
 200ecfc:	e1bffe15 	stw	r6,-8(fp)
 200ed00:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 200ed04:	e0bffc17 	ldw	r2,-16(fp)
 200ed08:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 200ed0c:	e0bffc17 	ldw	r2,-16(fp)
 200ed10:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 200ed14:	e0bffc17 	ldw	r2,-16(fp)
 200ed18:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 200ed1c:	e0bffd17 	ldw	r2,-12(fp)
 200ed20:	1007883a 	mov	r3,r2
 200ed24:	e0bffc17 	ldw	r2,-16(fp)
 200ed28:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 200ed2c:	e0bffc17 	ldw	r2,-16(fp)
 200ed30:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 200ed34:	e0bffe17 	ldw	r2,-8(fp)
 200ed38:	1007883a 	mov	r3,r2
 200ed3c:	e0bffc17 	ldw	r2,-16(fp)
 200ed40:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 200ed44:	e0bffc17 	ldw	r2,-16(fp)
 200ed48:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 200ed4c:	e0bffc17 	ldw	r2,-16(fp)
 200ed50:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 200ed54:	e0bffc17 	ldw	r2,-16(fp)
 200ed58:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 200ed5c:	e0bffc17 	ldw	r2,-16(fp)
 200ed60:	10801704 	addi	r2,r2,92
 200ed64:	01800204 	movi	r6,8
 200ed68:	000b883a 	mov	r5,zero
 200ed6c:	1009883a 	mov	r4,r2
 200ed70:	2009e080 	call	2009e08 <memset>
  ptr->_cookie = ptr;
 200ed74:	e0bffc17 	ldw	r2,-16(fp)
 200ed78:	e0fffc17 	ldw	r3,-16(fp)
 200ed7c:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 200ed80:	e0fffc17 	ldw	r3,-16(fp)
 200ed84:	00808074 	movhi	r2,513
 200ed88:	108fbc04 	addi	r2,r2,16112
 200ed8c:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 200ed90:	e0fffc17 	ldw	r3,-16(fp)
 200ed94:	00808074 	movhi	r2,513
 200ed98:	108fef04 	addi	r2,r2,16316
 200ed9c:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 200eda0:	e0fffc17 	ldw	r3,-16(fp)
 200eda4:	00808074 	movhi	r2,513
 200eda8:	10901c04 	addi	r2,r2,16496
 200edac:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 200edb0:	e0fffc17 	ldw	r3,-16(fp)
 200edb4:	00808074 	movhi	r2,513
 200edb8:	10904404 	addi	r2,r2,16656
 200edbc:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 200edc0:	0001883a 	nop
 200edc4:	e037883a 	mov	sp,fp
 200edc8:	dfc00117 	ldw	ra,4(sp)
 200edcc:	df000017 	ldw	fp,0(sp)
 200edd0:	dec00204 	addi	sp,sp,8
 200edd4:	f800283a 	ret

0200edd8 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 200edd8:	defffb04 	addi	sp,sp,-20
 200eddc:	dfc00415 	stw	ra,16(sp)
 200ede0:	df000315 	stw	fp,12(sp)
 200ede4:	dc000215 	stw	r16,8(sp)
 200ede8:	df000304 	addi	fp,sp,12
 200edec:	e13ffe15 	stw	r4,-8(fp)
 200edf0:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 200edf4:	80bfffc4 	addi	r2,r16,-1
 200edf8:	10801a24 	muli	r2,r2,104
 200edfc:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 200ee00:	100b883a 	mov	r5,r2
 200ee04:	e13ffe17 	ldw	r4,-8(fp)
 200ee08:	20108e80 	call	20108e8 <_malloc_r>
 200ee0c:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 200ee10:	e0bffd17 	ldw	r2,-12(fp)
 200ee14:	1000021e 	bne	r2,zero,200ee20 <__sfmoreglue+0x48>
    return NULL;
 200ee18:	0005883a 	mov	r2,zero
 200ee1c:	00001106 	br	200ee64 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 200ee20:	e0bffd17 	ldw	r2,-12(fp)
 200ee24:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 200ee28:	e0bffd17 	ldw	r2,-12(fp)
 200ee2c:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 200ee30:	e0bffd17 	ldw	r2,-12(fp)
 200ee34:	10c00304 	addi	r3,r2,12
 200ee38:	e0bffd17 	ldw	r2,-12(fp)
 200ee3c:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 200ee40:	e0bffd17 	ldw	r2,-12(fp)
 200ee44:	10800304 	addi	r2,r2,12
 200ee48:	8007883a 	mov	r3,r16
 200ee4c:	18c01a24 	muli	r3,r3,104
 200ee50:	180d883a 	mov	r6,r3
 200ee54:	000b883a 	mov	r5,zero
 200ee58:	1009883a 	mov	r4,r2
 200ee5c:	2009e080 	call	2009e08 <memset>
  return &g->glue;
 200ee60:	e0bffd17 	ldw	r2,-12(fp)
}
 200ee64:	e6ffff04 	addi	sp,fp,-4
 200ee68:	dfc00217 	ldw	ra,8(sp)
 200ee6c:	df000117 	ldw	fp,4(sp)
 200ee70:	dc000017 	ldw	r16,0(sp)
 200ee74:	dec00304 	addi	sp,sp,12
 200ee78:	f800283a 	ret

0200ee7c <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 200ee7c:	defffa04 	addi	sp,sp,-24
 200ee80:	dfc00515 	stw	ra,20(sp)
 200ee84:	df000415 	stw	fp,16(sp)
 200ee88:	df000404 	addi	fp,sp,16
 200ee8c:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 200ee90:	200f1600 	call	200f160 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 200ee94:	d0a03117 	ldw	r2,-32572(gp)
 200ee98:	10800e17 	ldw	r2,56(r2)
 200ee9c:	1000031e 	bne	r2,zero,200eeac <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 200eea0:	d0a03117 	ldw	r2,-32572(gp)
 200eea4:	1009883a 	mov	r4,r2
 200eea8:	200f0880 	call	200f088 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200eeac:	d0a03117 	ldw	r2,-32572(gp)
 200eeb0:	1080b804 	addi	r2,r2,736
 200eeb4:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200eeb8:	e0bffe17 	ldw	r2,-8(fp)
 200eebc:	10800217 	ldw	r2,8(r2)
 200eec0:	e0bffc15 	stw	r2,-16(fp)
 200eec4:	e0bffe17 	ldw	r2,-8(fp)
 200eec8:	10800117 	ldw	r2,4(r2)
 200eecc:	e0bffd15 	stw	r2,-12(fp)
 200eed0:	00000906 	br	200eef8 <__sfp+0x7c>
	if (fp->_flags == 0)
 200eed4:	e0bffc17 	ldw	r2,-16(fp)
 200eed8:	1080030b 	ldhu	r2,12(r2)
 200eedc:	10bfffcc 	andi	r2,r2,65535
 200eee0:	10a0001c 	xori	r2,r2,32768
 200eee4:	10a00004 	addi	r2,r2,-32768
 200eee8:	10001f26 	beq	r2,zero,200ef68 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200eeec:	e0bffc17 	ldw	r2,-16(fp)
 200eef0:	10801a04 	addi	r2,r2,104
 200eef4:	e0bffc15 	stw	r2,-16(fp)
 200eef8:	e0bffd17 	ldw	r2,-12(fp)
 200eefc:	10bfffc4 	addi	r2,r2,-1
 200ef00:	e0bffd15 	stw	r2,-12(fp)
 200ef04:	e0bffd17 	ldw	r2,-12(fp)
 200ef08:	103ff20e 	bge	r2,zero,200eed4 <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200ef0c:	e0bffe17 	ldw	r2,-8(fp)
 200ef10:	10800017 	ldw	r2,0(r2)
 200ef14:	1000091e 	bne	r2,zero,200ef3c <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 200ef18:	01400104 	movi	r5,4
 200ef1c:	e13fff17 	ldw	r4,-4(fp)
 200ef20:	200edd80 	call	200edd8 <__sfmoreglue>
 200ef24:	1007883a 	mov	r3,r2
 200ef28:	e0bffe17 	ldw	r2,-8(fp)
 200ef2c:	10c00015 	stw	r3,0(r2)
 200ef30:	e0bffe17 	ldw	r2,-8(fp)
 200ef34:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 200ef38:	10000426 	beq	r2,zero,200ef4c <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 200ef3c:	e0bffe17 	ldw	r2,-8(fp)
 200ef40:	10800017 	ldw	r2,0(r2)
 200ef44:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 200ef48:	003fdb06 	br	200eeb8 <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 200ef4c:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 200ef50:	200f1800 	call	200f180 <__sfp_lock_release>
  d->_errno = ENOMEM;
 200ef54:	e0bfff17 	ldw	r2,-4(fp)
 200ef58:	00c00304 	movi	r3,12
 200ef5c:	10c00015 	stw	r3,0(r2)
  return NULL;
 200ef60:	0005883a 	mov	r2,zero
 200ef64:	00002506 	br	200effc <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 200ef68:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 200ef6c:	e0bffc17 	ldw	r2,-16(fp)
 200ef70:	00ffffc4 	movi	r3,-1
 200ef74:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 200ef78:	e0bffc17 	ldw	r2,-16(fp)
 200ef7c:	00c00044 	movi	r3,1
 200ef80:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 200ef84:	e0bffc17 	ldw	r2,-16(fp)
 200ef88:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 200ef8c:	200f1800 	call	200f180 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 200ef90:	e0bffc17 	ldw	r2,-16(fp)
 200ef94:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 200ef98:	e0bffc17 	ldw	r2,-16(fp)
 200ef9c:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 200efa0:	e0bffc17 	ldw	r2,-16(fp)
 200efa4:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 200efa8:	e0bffc17 	ldw	r2,-16(fp)
 200efac:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 200efb0:	e0bffc17 	ldw	r2,-16(fp)
 200efb4:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 200efb8:	e0bffc17 	ldw	r2,-16(fp)
 200efbc:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 200efc0:	e0bffc17 	ldw	r2,-16(fp)
 200efc4:	10801704 	addi	r2,r2,92
 200efc8:	01800204 	movi	r6,8
 200efcc:	000b883a 	mov	r5,zero
 200efd0:	1009883a 	mov	r4,r2
 200efd4:	2009e080 	call	2009e08 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 200efd8:	e0bffc17 	ldw	r2,-16(fp)
 200efdc:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 200efe0:	e0bffc17 	ldw	r2,-16(fp)
 200efe4:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 200efe8:	e0bffc17 	ldw	r2,-16(fp)
 200efec:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 200eff0:	e0bffc17 	ldw	r2,-16(fp)
 200eff4:	10001215 	stw	zero,72(r2)

  return fp;
 200eff8:	e0bffc17 	ldw	r2,-16(fp)
}
 200effc:	e037883a 	mov	sp,fp
 200f000:	dfc00117 	ldw	ra,4(sp)
 200f004:	df000017 	ldw	fp,0(sp)
 200f008:	dec00204 	addi	sp,sp,8
 200f00c:	f800283a 	ret

0200f010 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 200f010:	defffc04 	addi	sp,sp,-16
 200f014:	dfc00315 	stw	ra,12(sp)
 200f018:	df000215 	stw	fp,8(sp)
 200f01c:	df000204 	addi	fp,sp,8
 200f020:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 200f024:	00808074 	movhi	r2,513
 200f028:	10968604 	addi	r2,r2,23064
 200f02c:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 200f030:	e17ffe17 	ldw	r5,-8(fp)
 200f034:	e13fff17 	ldw	r4,-4(fp)
 200f038:	20100880 	call	2010088 <_fwalk_reent>
}
 200f03c:	0001883a 	nop
 200f040:	e037883a 	mov	sp,fp
 200f044:	dfc00117 	ldw	ra,4(sp)
 200f048:	df000017 	ldw	fp,0(sp)
 200f04c:	dec00204 	addi	sp,sp,8
 200f050:	f800283a 	ret

0200f054 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 200f054:	defffe04 	addi	sp,sp,-8
 200f058:	dfc00115 	stw	ra,4(sp)
 200f05c:	df000015 	stw	fp,0(sp)
 200f060:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 200f064:	d0a03117 	ldw	r2,-32572(gp)
 200f068:	1009883a 	mov	r4,r2
 200f06c:	200f0100 	call	200f010 <_cleanup_r>
}
 200f070:	0001883a 	nop
 200f074:	e037883a 	mov	sp,fp
 200f078:	dfc00117 	ldw	ra,4(sp)
 200f07c:	df000017 	ldw	fp,0(sp)
 200f080:	dec00204 	addi	sp,sp,8
 200f084:	f800283a 	ret

0200f088 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 200f088:	defffd04 	addi	sp,sp,-12
 200f08c:	dfc00215 	stw	ra,8(sp)
 200f090:	df000115 	stw	fp,4(sp)
 200f094:	df000104 	addi	fp,sp,4
 200f098:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 200f09c:	200f1a00 	call	200f1a0 <__sinit_lock_acquire>

  if (s->__sdidinit)
 200f0a0:	e0bfff17 	ldw	r2,-4(fp)
 200f0a4:	10800e17 	ldw	r2,56(r2)
 200f0a8:	10000226 	beq	r2,zero,200f0b4 <__sinit+0x2c>
    {
      __sinit_lock_release ();
 200f0ac:	200f1c00 	call	200f1c0 <__sinit_lock_release>
      return;
 200f0b0:	00002606 	br	200f14c <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 200f0b4:	e0ffff17 	ldw	r3,-4(fp)
 200f0b8:	00808074 	movhi	r2,513
 200f0bc:	10bc0404 	addi	r2,r2,-4080
 200f0c0:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 200f0c4:	e0bfff17 	ldw	r2,-4(fp)
 200f0c8:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 200f0cc:	e0bfff17 	ldw	r2,-4(fp)
 200f0d0:	00c000c4 	movi	r3,3
 200f0d4:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 200f0d8:	e0bfff17 	ldw	r2,-4(fp)
 200f0dc:	10c0bb04 	addi	r3,r2,748
 200f0e0:	e0bfff17 	ldw	r2,-4(fp)
 200f0e4:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 200f0e8:	e0bfff17 	ldw	r2,-4(fp)
 200f0ec:	10800117 	ldw	r2,4(r2)
 200f0f0:	e1ffff17 	ldw	r7,-4(fp)
 200f0f4:	000d883a 	mov	r6,zero
 200f0f8:	01400104 	movi	r5,4
 200f0fc:	1009883a 	mov	r4,r2
 200f100:	200ece40 	call	200ece4 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 200f104:	e0bfff17 	ldw	r2,-4(fp)
 200f108:	10800217 	ldw	r2,8(r2)
 200f10c:	e1ffff17 	ldw	r7,-4(fp)
 200f110:	01800044 	movi	r6,1
 200f114:	01400284 	movi	r5,10
 200f118:	1009883a 	mov	r4,r2
 200f11c:	200ece40 	call	200ece4 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 200f120:	e0bfff17 	ldw	r2,-4(fp)
 200f124:	10800317 	ldw	r2,12(r2)
 200f128:	e1ffff17 	ldw	r7,-4(fp)
 200f12c:	01800084 	movi	r6,2
 200f130:	01400484 	movi	r5,18
 200f134:	1009883a 	mov	r4,r2
 200f138:	200ece40 	call	200ece4 <std>

  s->__sdidinit = 1;
 200f13c:	e0bfff17 	ldw	r2,-4(fp)
 200f140:	00c00044 	movi	r3,1
 200f144:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 200f148:	200f1c00 	call	200f1c0 <__sinit_lock_release>
}
 200f14c:	e037883a 	mov	sp,fp
 200f150:	dfc00117 	ldw	ra,4(sp)
 200f154:	df000017 	ldw	fp,0(sp)
 200f158:	dec00204 	addi	sp,sp,8
 200f15c:	f800283a 	ret

0200f160 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 200f160:	deffff04 	addi	sp,sp,-4
 200f164:	df000015 	stw	fp,0(sp)
 200f168:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 200f16c:	0001883a 	nop
 200f170:	e037883a 	mov	sp,fp
 200f174:	df000017 	ldw	fp,0(sp)
 200f178:	dec00104 	addi	sp,sp,4
 200f17c:	f800283a 	ret

0200f180 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 200f180:	deffff04 	addi	sp,sp,-4
 200f184:	df000015 	stw	fp,0(sp)
 200f188:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 200f18c:	0001883a 	nop
 200f190:	e037883a 	mov	sp,fp
 200f194:	df000017 	ldw	fp,0(sp)
 200f198:	dec00104 	addi	sp,sp,4
 200f19c:	f800283a 	ret

0200f1a0 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 200f1a0:	deffff04 	addi	sp,sp,-4
 200f1a4:	df000015 	stw	fp,0(sp)
 200f1a8:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 200f1ac:	0001883a 	nop
 200f1b0:	e037883a 	mov	sp,fp
 200f1b4:	df000017 	ldw	fp,0(sp)
 200f1b8:	dec00104 	addi	sp,sp,4
 200f1bc:	f800283a 	ret

0200f1c0 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 200f1c0:	deffff04 	addi	sp,sp,-4
 200f1c4:	df000015 	stw	fp,0(sp)
 200f1c8:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 200f1cc:	0001883a 	nop
 200f1d0:	e037883a 	mov	sp,fp
 200f1d4:	df000017 	ldw	fp,0(sp)
 200f1d8:	dec00104 	addi	sp,sp,4
 200f1dc:	f800283a 	ret

0200f1e0 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 200f1e0:	defffe04 	addi	sp,sp,-8
 200f1e4:	df000115 	stw	fp,4(sp)
 200f1e8:	df000104 	addi	fp,sp,4
 200f1ec:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 200f1f0:	0005883a 	mov	r2,zero
}
 200f1f4:	e037883a 	mov	sp,fp
 200f1f8:	df000017 	ldw	fp,0(sp)
 200f1fc:	dec00104 	addi	sp,sp,4
 200f200:	f800283a 	ret

0200f204 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 200f204:	defffe04 	addi	sp,sp,-8
 200f208:	df000115 	stw	fp,4(sp)
 200f20c:	df000104 	addi	fp,sp,4
 200f210:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 200f214:	0005883a 	mov	r2,zero
}
 200f218:	e037883a 	mov	sp,fp
 200f21c:	df000017 	ldw	fp,0(sp)
 200f220:	dec00104 	addi	sp,sp,4
 200f224:	f800283a 	ret

0200f228 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 200f228:	defffe04 	addi	sp,sp,-8
 200f22c:	dfc00115 	stw	ra,4(sp)
 200f230:	df000015 	stw	fp,0(sp)
 200f234:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 200f238:	200f1600 	call	200f160 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 200f23c:	d0a03017 	ldw	r2,-32576(gp)
 200f240:	01408074 	movhi	r5,513
 200f244:	297c7804 	addi	r5,r5,-3616
 200f248:	1009883a 	mov	r4,r2
 200f24c:	200ffb00 	call	200ffb0 <_fwalk>
}
 200f250:	0001883a 	nop
 200f254:	e037883a 	mov	sp,fp
 200f258:	dfc00117 	ldw	ra,4(sp)
 200f25c:	df000017 	ldw	fp,0(sp)
 200f260:	dec00204 	addi	sp,sp,8
 200f264:	f800283a 	ret

0200f268 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 200f268:	defffe04 	addi	sp,sp,-8
 200f26c:	dfc00115 	stw	ra,4(sp)
 200f270:	df000015 	stw	fp,0(sp)
 200f274:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 200f278:	d0a03017 	ldw	r2,-32576(gp)
 200f27c:	01408074 	movhi	r5,513
 200f280:	297c8104 	addi	r5,r5,-3580
 200f284:	1009883a 	mov	r4,r2
 200f288:	200ffb00 	call	200ffb0 <_fwalk>

  __sfp_lock_release ();
 200f28c:	200f1800 	call	200f180 <__sfp_lock_release>
}
 200f290:	0001883a 	nop
 200f294:	e037883a 	mov	sp,fp
 200f298:	dfc00117 	ldw	ra,4(sp)
 200f29c:	df000017 	ldw	fp,0(sp)
 200f2a0:	dec00204 	addi	sp,sp,8
 200f2a4:	f800283a 	ret

0200f2a8 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 200f2a8:	defff204 	addi	sp,sp,-56
 200f2ac:	dfc00d15 	stw	ra,52(sp)
 200f2b0:	df000c15 	stw	fp,48(sp)
 200f2b4:	df000c04 	addi	fp,sp,48
 200f2b8:	e13ffe15 	stw	r4,-8(fp)
 200f2bc:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 200f2c0:	e0bfff17 	ldw	r2,-4(fp)
 200f2c4:	10014a26 	beq	r2,zero,200f7f0 <_free_r+0x548>
    return;

  MALLOC_LOCK;
 200f2c8:	e13ffe17 	ldw	r4,-8(fp)
 200f2cc:	2017b4c0 	call	2017b4c <__malloc_lock>

  p = mem2chunk(mem);
 200f2d0:	e0bfff17 	ldw	r2,-4(fp)
 200f2d4:	10bffe04 	addi	r2,r2,-8
 200f2d8:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 200f2dc:	e0bff417 	ldw	r2,-48(fp)
 200f2e0:	10800117 	ldw	r2,4(r2)
 200f2e4:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 200f2e8:	e0fff917 	ldw	r3,-28(fp)
 200f2ec:	00bfff84 	movi	r2,-2
 200f2f0:	1884703a 	and	r2,r3,r2
 200f2f4:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 200f2f8:	e0fff417 	ldw	r3,-48(fp)
 200f2fc:	e0bff517 	ldw	r2,-44(fp)
 200f300:	1885883a 	add	r2,r3,r2
 200f304:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 200f308:	e0bffa17 	ldw	r2,-24(fp)
 200f30c:	10c00117 	ldw	r3,4(r2)
 200f310:	00bfff04 	movi	r2,-4
 200f314:	1884703a 	and	r2,r3,r2
 200f318:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 200f31c:	008080b4 	movhi	r2,514
 200f320:	108e6704 	addi	r2,r2,14748
 200f324:	10c00217 	ldw	r3,8(r2)
 200f328:	e0bffa17 	ldw	r2,-24(fp)
 200f32c:	1880311e 	bne	r3,r2,200f3f4 <_free_r+0x14c>
  {
    sz += nextsz;
 200f330:	e0fff517 	ldw	r3,-44(fp)
 200f334:	e0bffb17 	ldw	r2,-20(fp)
 200f338:	1885883a 	add	r2,r3,r2
 200f33c:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200f340:	e0bff917 	ldw	r2,-28(fp)
 200f344:	1080004c 	andi	r2,r2,1
 200f348:	1000181e 	bne	r2,zero,200f3ac <_free_r+0x104>
    {
      prevsz = p->prev_size;
 200f34c:	e0bff417 	ldw	r2,-48(fp)
 200f350:	10800017 	ldw	r2,0(r2)
 200f354:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 200f358:	e0bffc17 	ldw	r2,-16(fp)
 200f35c:	0085c83a 	sub	r2,zero,r2
 200f360:	e0fff417 	ldw	r3,-48(fp)
 200f364:	1885883a 	add	r2,r3,r2
 200f368:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 200f36c:	e0fff517 	ldw	r3,-44(fp)
 200f370:	e0bffc17 	ldw	r2,-16(fp)
 200f374:	1885883a 	add	r2,r3,r2
 200f378:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 200f37c:	e0bff417 	ldw	r2,-48(fp)
 200f380:	10800317 	ldw	r2,12(r2)
 200f384:	e0bff615 	stw	r2,-40(fp)
 200f388:	e0bff417 	ldw	r2,-48(fp)
 200f38c:	10800217 	ldw	r2,8(r2)
 200f390:	e0bff715 	stw	r2,-36(fp)
 200f394:	e0bff717 	ldw	r2,-36(fp)
 200f398:	e0fff617 	ldw	r3,-40(fp)
 200f39c:	10c00315 	stw	r3,12(r2)
 200f3a0:	e0bff617 	ldw	r2,-40(fp)
 200f3a4:	e0fff717 	ldw	r3,-36(fp)
 200f3a8:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 200f3ac:	e0bff517 	ldw	r2,-44(fp)
 200f3b0:	10c00054 	ori	r3,r2,1
 200f3b4:	e0bff417 	ldw	r2,-48(fp)
 200f3b8:	10c00115 	stw	r3,4(r2)
    top = p;
 200f3bc:	008080b4 	movhi	r2,514
 200f3c0:	108e6704 	addi	r2,r2,14748
 200f3c4:	e0fff417 	ldw	r3,-48(fp)
 200f3c8:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 200f3cc:	d0a03317 	ldw	r2,-32564(gp)
 200f3d0:	e0fff517 	ldw	r3,-44(fp)
 200f3d4:	18800436 	bltu	r3,r2,200f3e8 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 200f3d8:	d0a79b17 	ldw	r2,-24980(gp)
 200f3dc:	100b883a 	mov	r5,r2
 200f3e0:	e13ffe17 	ldw	r4,-8(fp)
 200f3e4:	200f8080 	call	200f808 <_malloc_trim_r>
    MALLOC_UNLOCK;
 200f3e8:	e13ffe17 	ldw	r4,-8(fp)
 200f3ec:	2017c6c0 	call	2017c6c <__malloc_unlock>
    return;
 200f3f0:	00010006 	br	200f7f4 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 200f3f4:	e0bffa17 	ldw	r2,-24(fp)
 200f3f8:	e0fffb17 	ldw	r3,-20(fp)
 200f3fc:	10c00115 	stw	r3,4(r2)

  islr = 0;
 200f400:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200f404:	e0bff917 	ldw	r2,-28(fp)
 200f408:	1080004c 	andi	r2,r2,1
 200f40c:	1000201e 	bne	r2,zero,200f490 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 200f410:	e0bff417 	ldw	r2,-48(fp)
 200f414:	10800017 	ldw	r2,0(r2)
 200f418:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 200f41c:	e0bffc17 	ldw	r2,-16(fp)
 200f420:	0085c83a 	sub	r2,zero,r2
 200f424:	e0fff417 	ldw	r3,-48(fp)
 200f428:	1885883a 	add	r2,r3,r2
 200f42c:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 200f430:	e0fff517 	ldw	r3,-44(fp)
 200f434:	e0bffc17 	ldw	r2,-16(fp)
 200f438:	1885883a 	add	r2,r3,r2
 200f43c:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 200f440:	e0bff417 	ldw	r2,-48(fp)
 200f444:	10c00217 	ldw	r3,8(r2)
 200f448:	008080b4 	movhi	r2,514
 200f44c:	108e6904 	addi	r2,r2,14756
 200f450:	1880031e 	bne	r3,r2,200f460 <_free_r+0x1b8>
      islr = 1;
 200f454:	00800044 	movi	r2,1
 200f458:	e0bff815 	stw	r2,-32(fp)
 200f45c:	00000c06 	br	200f490 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 200f460:	e0bff417 	ldw	r2,-48(fp)
 200f464:	10800317 	ldw	r2,12(r2)
 200f468:	e0bff615 	stw	r2,-40(fp)
 200f46c:	e0bff417 	ldw	r2,-48(fp)
 200f470:	10800217 	ldw	r2,8(r2)
 200f474:	e0bff715 	stw	r2,-36(fp)
 200f478:	e0bff717 	ldw	r2,-36(fp)
 200f47c:	e0fff617 	ldw	r3,-40(fp)
 200f480:	10c00315 	stw	r3,12(r2)
 200f484:	e0bff617 	ldw	r2,-40(fp)
 200f488:	e0fff717 	ldw	r3,-36(fp)
 200f48c:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 200f490:	e0fffa17 	ldw	r3,-24(fp)
 200f494:	e0bffb17 	ldw	r2,-20(fp)
 200f498:	1885883a 	add	r2,r3,r2
 200f49c:	10800117 	ldw	r2,4(r2)
 200f4a0:	1080004c 	andi	r2,r2,1
 200f4a4:	10002a1e 	bne	r2,zero,200f550 <_free_r+0x2a8>
  {
    sz += nextsz;
 200f4a8:	e0fff517 	ldw	r3,-44(fp)
 200f4ac:	e0bffb17 	ldw	r2,-20(fp)
 200f4b0:	1885883a 	add	r2,r3,r2
 200f4b4:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 200f4b8:	e0bff817 	ldw	r2,-32(fp)
 200f4bc:	1000181e 	bne	r2,zero,200f520 <_free_r+0x278>
 200f4c0:	e0bffa17 	ldw	r2,-24(fp)
 200f4c4:	10c00217 	ldw	r3,8(r2)
 200f4c8:	008080b4 	movhi	r2,514
 200f4cc:	108e6904 	addi	r2,r2,14756
 200f4d0:	1880131e 	bne	r3,r2,200f520 <_free_r+0x278>
    {
      islr = 1;
 200f4d4:	00800044 	movi	r2,1
 200f4d8:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 200f4dc:	00c080b4 	movhi	r3,514
 200f4e0:	18ce6904 	addi	r3,r3,14756
 200f4e4:	008080b4 	movhi	r2,514
 200f4e8:	108e6904 	addi	r2,r2,14756
 200f4ec:	e13ff417 	ldw	r4,-48(fp)
 200f4f0:	11000315 	stw	r4,12(r2)
 200f4f4:	10800317 	ldw	r2,12(r2)
 200f4f8:	18800215 	stw	r2,8(r3)
 200f4fc:	008080b4 	movhi	r2,514
 200f500:	108e6904 	addi	r2,r2,14756
 200f504:	e0fff417 	ldw	r3,-48(fp)
 200f508:	18800315 	stw	r2,12(r3)
 200f50c:	e0bff417 	ldw	r2,-48(fp)
 200f510:	10c00317 	ldw	r3,12(r2)
 200f514:	e0bff417 	ldw	r2,-48(fp)
 200f518:	10c00215 	stw	r3,8(r2)
 200f51c:	00000c06 	br	200f550 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 200f520:	e0bffa17 	ldw	r2,-24(fp)
 200f524:	10800317 	ldw	r2,12(r2)
 200f528:	e0bff615 	stw	r2,-40(fp)
 200f52c:	e0bffa17 	ldw	r2,-24(fp)
 200f530:	10800217 	ldw	r2,8(r2)
 200f534:	e0bff715 	stw	r2,-36(fp)
 200f538:	e0bff717 	ldw	r2,-36(fp)
 200f53c:	e0fff617 	ldw	r3,-40(fp)
 200f540:	10c00315 	stw	r3,12(r2)
 200f544:	e0bff617 	ldw	r2,-40(fp)
 200f548:	e0fff717 	ldw	r3,-36(fp)
 200f54c:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 200f550:	e0bff517 	ldw	r2,-44(fp)
 200f554:	10c00054 	ori	r3,r2,1
 200f558:	e0bff417 	ldw	r2,-48(fp)
 200f55c:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 200f560:	e0fff417 	ldw	r3,-48(fp)
 200f564:	e0bff517 	ldw	r2,-44(fp)
 200f568:	1885883a 	add	r2,r3,r2
 200f56c:	e0fff517 	ldw	r3,-44(fp)
 200f570:	10c00015 	stw	r3,0(r2)
  if (!islr)
 200f574:	e0bff817 	ldw	r2,-32(fp)
 200f578:	10009a1e 	bne	r2,zero,200f7e4 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 200f57c:	e0bff517 	ldw	r2,-44(fp)
 200f580:	10808028 	cmpgeui	r2,r2,512
 200f584:	10002c1e 	bne	r2,zero,200f638 <_free_r+0x390>
 200f588:	e0bff517 	ldw	r2,-44(fp)
 200f58c:	1004d0fa 	srli	r2,r2,3
 200f590:	e0bffd15 	stw	r2,-12(fp)
 200f594:	00c080b4 	movhi	r3,514
 200f598:	18ce6704 	addi	r3,r3,14748
 200f59c:	008080b4 	movhi	r2,514
 200f5a0:	108e6704 	addi	r2,r2,14748
 200f5a4:	11000117 	ldw	r4,4(r2)
 200f5a8:	e0bffd17 	ldw	r2,-12(fp)
 200f5ac:	1000010e 	bge	r2,zero,200f5b4 <_free_r+0x30c>
 200f5b0:	108000c4 	addi	r2,r2,3
 200f5b4:	1005d0ba 	srai	r2,r2,2
 200f5b8:	100b883a 	mov	r5,r2
 200f5bc:	00800044 	movi	r2,1
 200f5c0:	1144983a 	sll	r2,r2,r5
 200f5c4:	2084b03a 	or	r2,r4,r2
 200f5c8:	18800115 	stw	r2,4(r3)
 200f5cc:	e0bffd17 	ldw	r2,-12(fp)
 200f5d0:	10800044 	addi	r2,r2,1
 200f5d4:	1085883a 	add	r2,r2,r2
 200f5d8:	1085883a 	add	r2,r2,r2
 200f5dc:	1087883a 	add	r3,r2,r2
 200f5e0:	008080b4 	movhi	r2,514
 200f5e4:	108e6704 	addi	r2,r2,14748
 200f5e8:	1885883a 	add	r2,r3,r2
 200f5ec:	10bffe04 	addi	r2,r2,-8
 200f5f0:	e0bff615 	stw	r2,-40(fp)
 200f5f4:	e0bff617 	ldw	r2,-40(fp)
 200f5f8:	10800217 	ldw	r2,8(r2)
 200f5fc:	e0bff715 	stw	r2,-36(fp)
 200f600:	e0bff417 	ldw	r2,-48(fp)
 200f604:	e0fff617 	ldw	r3,-40(fp)
 200f608:	10c00315 	stw	r3,12(r2)
 200f60c:	e0bff417 	ldw	r2,-48(fp)
 200f610:	e0fff717 	ldw	r3,-36(fp)
 200f614:	10c00215 	stw	r3,8(r2)
 200f618:	e0bff617 	ldw	r2,-40(fp)
 200f61c:	e0fff417 	ldw	r3,-48(fp)
 200f620:	10c00215 	stw	r3,8(r2)
 200f624:	e0bff617 	ldw	r2,-40(fp)
 200f628:	10c00217 	ldw	r3,8(r2)
 200f62c:	e0bff717 	ldw	r2,-36(fp)
 200f630:	10c00315 	stw	r3,12(r2)
 200f634:	00006b06 	br	200f7e4 <_free_r+0x53c>
 200f638:	e0bff517 	ldw	r2,-44(fp)
 200f63c:	1004d27a 	srli	r2,r2,9
 200f640:	1000031e 	bne	r2,zero,200f650 <_free_r+0x3a8>
 200f644:	e0bff517 	ldw	r2,-44(fp)
 200f648:	1004d0fa 	srli	r2,r2,3
 200f64c:	00002906 	br	200f6f4 <_free_r+0x44c>
 200f650:	e0bff517 	ldw	r2,-44(fp)
 200f654:	1004d27a 	srli	r2,r2,9
 200f658:	10800168 	cmpgeui	r2,r2,5
 200f65c:	1000041e 	bne	r2,zero,200f670 <_free_r+0x3c8>
 200f660:	e0bff517 	ldw	r2,-44(fp)
 200f664:	1004d1ba 	srli	r2,r2,6
 200f668:	10800e04 	addi	r2,r2,56
 200f66c:	00002106 	br	200f6f4 <_free_r+0x44c>
 200f670:	e0bff517 	ldw	r2,-44(fp)
 200f674:	1004d27a 	srli	r2,r2,9
 200f678:	10800568 	cmpgeui	r2,r2,21
 200f67c:	1000041e 	bne	r2,zero,200f690 <_free_r+0x3e8>
 200f680:	e0bff517 	ldw	r2,-44(fp)
 200f684:	1004d27a 	srli	r2,r2,9
 200f688:	108016c4 	addi	r2,r2,91
 200f68c:	00001906 	br	200f6f4 <_free_r+0x44c>
 200f690:	e0bff517 	ldw	r2,-44(fp)
 200f694:	1004d27a 	srli	r2,r2,9
 200f698:	10801568 	cmpgeui	r2,r2,85
 200f69c:	1000041e 	bne	r2,zero,200f6b0 <_free_r+0x408>
 200f6a0:	e0bff517 	ldw	r2,-44(fp)
 200f6a4:	1004d33a 	srli	r2,r2,12
 200f6a8:	10801b84 	addi	r2,r2,110
 200f6ac:	00001106 	br	200f6f4 <_free_r+0x44c>
 200f6b0:	e0bff517 	ldw	r2,-44(fp)
 200f6b4:	1004d27a 	srli	r2,r2,9
 200f6b8:	10805568 	cmpgeui	r2,r2,341
 200f6bc:	1000041e 	bne	r2,zero,200f6d0 <_free_r+0x428>
 200f6c0:	e0bff517 	ldw	r2,-44(fp)
 200f6c4:	1004d3fa 	srli	r2,r2,15
 200f6c8:	10801dc4 	addi	r2,r2,119
 200f6cc:	00000906 	br	200f6f4 <_free_r+0x44c>
 200f6d0:	e0bff517 	ldw	r2,-44(fp)
 200f6d4:	1004d27a 	srli	r2,r2,9
 200f6d8:	10815568 	cmpgeui	r2,r2,1365
 200f6dc:	1000041e 	bne	r2,zero,200f6f0 <_free_r+0x448>
 200f6e0:	e0bff517 	ldw	r2,-44(fp)
 200f6e4:	1004d4ba 	srli	r2,r2,18
 200f6e8:	10801f04 	addi	r2,r2,124
 200f6ec:	00000106 	br	200f6f4 <_free_r+0x44c>
 200f6f0:	00801f84 	movi	r2,126
 200f6f4:	e0bffd15 	stw	r2,-12(fp)
 200f6f8:	e0bffd17 	ldw	r2,-12(fp)
 200f6fc:	10800044 	addi	r2,r2,1
 200f700:	1085883a 	add	r2,r2,r2
 200f704:	1085883a 	add	r2,r2,r2
 200f708:	1087883a 	add	r3,r2,r2
 200f70c:	008080b4 	movhi	r2,514
 200f710:	108e6704 	addi	r2,r2,14748
 200f714:	1885883a 	add	r2,r3,r2
 200f718:	10bffe04 	addi	r2,r2,-8
 200f71c:	e0bff615 	stw	r2,-40(fp)
 200f720:	e0bff617 	ldw	r2,-40(fp)
 200f724:	10800217 	ldw	r2,8(r2)
 200f728:	e0bff715 	stw	r2,-36(fp)
 200f72c:	e0fff717 	ldw	r3,-36(fp)
 200f730:	e0bff617 	ldw	r2,-40(fp)
 200f734:	1880121e 	bne	r3,r2,200f780 <_free_r+0x4d8>
 200f738:	00c080b4 	movhi	r3,514
 200f73c:	18ce6704 	addi	r3,r3,14748
 200f740:	008080b4 	movhi	r2,514
 200f744:	108e6704 	addi	r2,r2,14748
 200f748:	11000117 	ldw	r4,4(r2)
 200f74c:	e0bffd17 	ldw	r2,-12(fp)
 200f750:	1000010e 	bge	r2,zero,200f758 <_free_r+0x4b0>
 200f754:	108000c4 	addi	r2,r2,3
 200f758:	1005d0ba 	srai	r2,r2,2
 200f75c:	100b883a 	mov	r5,r2
 200f760:	00800044 	movi	r2,1
 200f764:	1144983a 	sll	r2,r2,r5
 200f768:	2084b03a 	or	r2,r4,r2
 200f76c:	18800115 	stw	r2,4(r3)
 200f770:	00000f06 	br	200f7b0 <_free_r+0x508>
 200f774:	e0bff717 	ldw	r2,-36(fp)
 200f778:	10800217 	ldw	r2,8(r2)
 200f77c:	e0bff715 	stw	r2,-36(fp)
 200f780:	e0fff717 	ldw	r3,-36(fp)
 200f784:	e0bff617 	ldw	r2,-40(fp)
 200f788:	18800626 	beq	r3,r2,200f7a4 <_free_r+0x4fc>
 200f78c:	e0bff717 	ldw	r2,-36(fp)
 200f790:	10c00117 	ldw	r3,4(r2)
 200f794:	00bfff04 	movi	r2,-4
 200f798:	1884703a 	and	r2,r3,r2
 200f79c:	e0fff517 	ldw	r3,-44(fp)
 200f7a0:	18bff436 	bltu	r3,r2,200f774 <_free_r+0x4cc>
 200f7a4:	e0bff717 	ldw	r2,-36(fp)
 200f7a8:	10800317 	ldw	r2,12(r2)
 200f7ac:	e0bff615 	stw	r2,-40(fp)
 200f7b0:	e0bff417 	ldw	r2,-48(fp)
 200f7b4:	e0fff617 	ldw	r3,-40(fp)
 200f7b8:	10c00315 	stw	r3,12(r2)
 200f7bc:	e0bff417 	ldw	r2,-48(fp)
 200f7c0:	e0fff717 	ldw	r3,-36(fp)
 200f7c4:	10c00215 	stw	r3,8(r2)
 200f7c8:	e0bff617 	ldw	r2,-40(fp)
 200f7cc:	e0fff417 	ldw	r3,-48(fp)
 200f7d0:	10c00215 	stw	r3,8(r2)
 200f7d4:	e0bff617 	ldw	r2,-40(fp)
 200f7d8:	10c00217 	ldw	r3,8(r2)
 200f7dc:	e0bff717 	ldw	r2,-36(fp)
 200f7e0:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 200f7e4:	e13ffe17 	ldw	r4,-8(fp)
 200f7e8:	2017c6c0 	call	2017c6c <__malloc_unlock>
 200f7ec:	00000106 	br	200f7f4 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 200f7f0:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 200f7f4:	e037883a 	mov	sp,fp
 200f7f8:	dfc00117 	ldw	ra,4(sp)
 200f7fc:	df000017 	ldw	fp,0(sp)
 200f800:	dec00204 	addi	sp,sp,8
 200f804:	f800283a 	ret

0200f808 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 200f808:	defff704 	addi	sp,sp,-36
 200f80c:	dfc00815 	stw	ra,32(sp)
 200f810:	df000715 	stw	fp,28(sp)
 200f814:	df000704 	addi	fp,sp,28
 200f818:	e13ffe15 	stw	r4,-8(fp)
 200f81c:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 200f820:	00840004 	movi	r2,4096
 200f824:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 200f828:	e13ffe17 	ldw	r4,-8(fp)
 200f82c:	2017b4c0 	call	2017b4c <__malloc_lock>

  top_size = chunksize(top);
 200f830:	008080b4 	movhi	r2,514
 200f834:	108e6704 	addi	r2,r2,14748
 200f838:	10800217 	ldw	r2,8(r2)
 200f83c:	10800117 	ldw	r2,4(r2)
 200f840:	1007883a 	mov	r3,r2
 200f844:	00bfff04 	movi	r2,-4
 200f848:	1884703a 	and	r2,r3,r2
 200f84c:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 200f850:	e0fffa17 	ldw	r3,-24(fp)
 200f854:	e0bfff17 	ldw	r2,-4(fp)
 200f858:	1887c83a 	sub	r3,r3,r2
 200f85c:	e0bff917 	ldw	r2,-28(fp)
 200f860:	1885883a 	add	r2,r3,r2
 200f864:	10bffbc4 	addi	r2,r2,-17
 200f868:	e17ff917 	ldw	r5,-28(fp)
 200f86c:	1009883a 	mov	r4,r2
 200f870:	20074880 	call	2007488 <__udivsi3>
 200f874:	10ffffc4 	addi	r3,r2,-1
 200f878:	e0bff917 	ldw	r2,-28(fp)
 200f87c:	1885383a 	mul	r2,r3,r2
 200f880:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 200f884:	e0bff917 	ldw	r2,-28(fp)
 200f888:	e0fffb17 	ldw	r3,-20(fp)
 200f88c:	1880040e 	bge	r3,r2,200f8a0 <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 200f890:	e13ffe17 	ldw	r4,-8(fp)
 200f894:	2017c6c0 	call	2017c6c <__malloc_unlock>
    return 0;
 200f898:	0005883a 	mov	r2,zero
 200f89c:	00004806 	br	200f9c0 <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 200f8a0:	000b883a 	mov	r5,zero
 200f8a4:	e13ffe17 	ldw	r4,-8(fp)
 200f8a8:	2013e900 	call	2013e90 <_sbrk_r>
 200f8ac:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 200f8b0:	008080b4 	movhi	r2,514
 200f8b4:	108e6704 	addi	r2,r2,14748
 200f8b8:	10c00217 	ldw	r3,8(r2)
 200f8bc:	e0bffa17 	ldw	r2,-24(fp)
 200f8c0:	1887883a 	add	r3,r3,r2
 200f8c4:	e0bffc17 	ldw	r2,-16(fp)
 200f8c8:	18800426 	beq	r3,r2,200f8dc <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 200f8cc:	e13ffe17 	ldw	r4,-8(fp)
 200f8d0:	2017c6c0 	call	2017c6c <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 200f8d4:	0005883a 	mov	r2,zero
 200f8d8:	00003906 	br	200f9c0 <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 200f8dc:	e0bffb17 	ldw	r2,-20(fp)
 200f8e0:	0085c83a 	sub	r2,zero,r2
 200f8e4:	100b883a 	mov	r5,r2
 200f8e8:	e13ffe17 	ldw	r4,-8(fp)
 200f8ec:	2013e900 	call	2013e90 <_sbrk_r>
 200f8f0:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 200f8f4:	e0bffd17 	ldw	r2,-12(fp)
 200f8f8:	10bfffd8 	cmpnei	r2,r2,-1
 200f8fc:	10001d1e 	bne	r2,zero,200f974 <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 200f900:	000b883a 	mov	r5,zero
 200f904:	e13ffe17 	ldw	r4,-8(fp)
 200f908:	2013e900 	call	2013e90 <_sbrk_r>
 200f90c:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 200f910:	e0fffc17 	ldw	r3,-16(fp)
 200f914:	008080b4 	movhi	r2,514
 200f918:	108e6704 	addi	r2,r2,14748
 200f91c:	10800217 	ldw	r2,8(r2)
 200f920:	1885c83a 	sub	r2,r3,r2
 200f924:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 200f928:	e0bffa17 	ldw	r2,-24(fp)
 200f92c:	10800410 	cmplti	r2,r2,16
 200f930:	10000c1e 	bne	r2,zero,200f964 <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 200f934:	e0bffc17 	ldw	r2,-16(fp)
 200f938:	d0e03417 	ldw	r3,-32560(gp)
 200f93c:	10c7c83a 	sub	r3,r2,r3
 200f940:	008080b4 	movhi	r2,514
 200f944:	109bb904 	addi	r2,r2,28388
 200f948:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 200f94c:	008080b4 	movhi	r2,514
 200f950:	108e6704 	addi	r2,r2,14748
 200f954:	10800217 	ldw	r2,8(r2)
 200f958:	e0fffa17 	ldw	r3,-24(fp)
 200f95c:	18c00054 	ori	r3,r3,1
 200f960:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 200f964:	e13ffe17 	ldw	r4,-8(fp)
 200f968:	2017c6c0 	call	2017c6c <__malloc_unlock>
        return 0; 
 200f96c:	0005883a 	mov	r2,zero
 200f970:	00001306 	br	200f9c0 <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 200f974:	008080b4 	movhi	r2,514
 200f978:	108e6704 	addi	r2,r2,14748
 200f97c:	10800217 	ldw	r2,8(r2)
 200f980:	e13ffa17 	ldw	r4,-24(fp)
 200f984:	e0fffb17 	ldw	r3,-20(fp)
 200f988:	20c7c83a 	sub	r3,r4,r3
 200f98c:	18c00054 	ori	r3,r3,1
 200f990:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 200f994:	008080b4 	movhi	r2,514
 200f998:	109bb904 	addi	r2,r2,28388
 200f99c:	10c00017 	ldw	r3,0(r2)
 200f9a0:	e0bffb17 	ldw	r2,-20(fp)
 200f9a4:	1887c83a 	sub	r3,r3,r2
 200f9a8:	008080b4 	movhi	r2,514
 200f9ac:	109bb904 	addi	r2,r2,28388
 200f9b0:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 200f9b4:	e13ffe17 	ldw	r4,-8(fp)
 200f9b8:	2017c6c0 	call	2017c6c <__malloc_unlock>
        return 1;
 200f9bc:	00800044 	movi	r2,1
      }
    }
  }
}
 200f9c0:	e037883a 	mov	sp,fp
 200f9c4:	dfc00117 	ldw	ra,4(sp)
 200f9c8:	df000017 	ldw	fp,0(sp)
 200f9cc:	dec00204 	addi	sp,sp,8
 200f9d0:	f800283a 	ret

0200f9d4 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 200f9d4:	defff004 	addi	sp,sp,-64
 200f9d8:	dfc00f15 	stw	ra,60(sp)
 200f9dc:	df000e15 	stw	fp,56(sp)
 200f9e0:	dd800d15 	stw	r22,52(sp)
 200f9e4:	dd400c15 	stw	r21,48(sp)
 200f9e8:	dd000b15 	stw	r20,44(sp)
 200f9ec:	dcc00a15 	stw	r19,40(sp)
 200f9f0:	dc800915 	stw	r18,36(sp)
 200f9f4:	dc400815 	stw	r17,32(sp)
 200f9f8:	dc000715 	stw	r16,28(sp)
 200f9fc:	df000e04 	addi	fp,sp,56
 200fa00:	e13ff815 	stw	r4,-32(fp)
 200fa04:	2821883a 	mov	r16,r5
 200fa08:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 200fa0c:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 200fa10:	ac800217 	ldw	r18,8(r21)
 200fa14:	9000021e 	bne	r18,zero,200fa20 <__sfvwrite_r+0x4c>
    return 0;
 200fa18:	0005883a 	mov	r2,zero
 200fa1c:	00015806 	br	200ff80 <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 200fa20:	8080030b 	ldhu	r2,12(r16)
 200fa24:	10bfffcc 	andi	r2,r2,65535
 200fa28:	1080020c 	andi	r2,r2,8
 200fa2c:	10000226 	beq	r2,zero,200fa38 <__sfvwrite_r+0x64>
 200fa30:	80800417 	ldw	r2,16(r16)
 200fa34:	1000061e 	bne	r2,zero,200fa50 <__sfvwrite_r+0x7c>
 200fa38:	800b883a 	mov	r5,r16
 200fa3c:	e13ff817 	ldw	r4,-32(fp)
 200fa40:	200c8380 	call	200c838 <__swsetup_r>
 200fa44:	10000226 	beq	r2,zero,200fa50 <__sfvwrite_r+0x7c>
    return EOF;
 200fa48:	00bfffc4 	movi	r2,-1
 200fa4c:	00014c06 	br	200ff80 <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 200fa50:	ad000017 	ldw	r20,0(r21)
  len = 0;
 200fa54:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 200fa58:	8080030b 	ldhu	r2,12(r16)
 200fa5c:	10bfffcc 	andi	r2,r2,65535
 200fa60:	1080008c 	andi	r2,r2,2
 200fa64:	10001f26 	beq	r2,zero,200fae4 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 200fa68:	00000306 	br	200fa78 <__sfvwrite_r+0xa4>
 200fa6c:	a4c00017 	ldw	r19,0(r20)
 200fa70:	a4800117 	ldw	r18,4(r20)
 200fa74:	a5000204 	addi	r20,r20,8
 200fa78:	903ffc26 	beq	r18,zero,200fa6c <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 200fa7c:	82000917 	ldw	r8,36(r16)
 200fa80:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 200fa84:	9005883a 	mov	r2,r18
 200fa88:	00e00034 	movhi	r3,32768
 200fa8c:	18ff0004 	addi	r3,r3,-1024
 200fa90:	1880022e 	bgeu	r3,r2,200fa9c <__sfvwrite_r+0xc8>
 200fa94:	00a00034 	movhi	r2,32768
 200fa98:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 200fa9c:	100f883a 	mov	r7,r2
 200faa0:	980d883a 	mov	r6,r19
 200faa4:	200b883a 	mov	r5,r4
 200faa8:	e13ff817 	ldw	r4,-32(fp)
 200faac:	403ee83a 	callr	r8
 200fab0:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 200fab4:	0441290e 	bge	zero,r17,200ff5c <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 200fab8:	8805883a 	mov	r2,r17
 200fabc:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200fac0:	8805883a 	mov	r2,r17
 200fac4:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200fac8:	a8800217 	ldw	r2,8(r21)
 200facc:	8807883a 	mov	r3,r17
 200fad0:	10c5c83a 	sub	r2,r2,r3
 200fad4:	a8800215 	stw	r2,8(r21)
 200fad8:	a8800217 	ldw	r2,8(r21)
 200fadc:	103fe61e 	bne	r2,zero,200fa78 <__sfvwrite_r+0xa4>
 200fae0:	00011c06 	br	200ff54 <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 200fae4:	8080030b 	ldhu	r2,12(r16)
 200fae8:	10bfffcc 	andi	r2,r2,65535
 200faec:	1080004c 	andi	r2,r2,1
 200faf0:	1000b51e 	bne	r2,zero,200fdc8 <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 200faf4:	00000306 	br	200fb04 <__sfvwrite_r+0x130>
 200faf8:	a4c00017 	ldw	r19,0(r20)
 200fafc:	a4800117 	ldw	r18,4(r20)
 200fb00:	a5000204 	addi	r20,r20,8
 200fb04:	903ffc26 	beq	r18,zero,200faf8 <__sfvwrite_r+0x124>
	  w = fp->_w;
 200fb08:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 200fb0c:	8080030b 	ldhu	r2,12(r16)
 200fb10:	10bfffcc 	andi	r2,r2,65535
 200fb14:	1080800c 	andi	r2,r2,512
 200fb18:	10006b26 	beq	r2,zero,200fcc8 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 200fb1c:	8805883a 	mov	r2,r17
 200fb20:	90805736 	bltu	r18,r2,200fc80 <__sfvwrite_r+0x2ac>
 200fb24:	8080030b 	ldhu	r2,12(r16)
 200fb28:	10bfffcc 	andi	r2,r2,65535
 200fb2c:	1081200c 	andi	r2,r2,1152
 200fb30:	10005326 	beq	r2,zero,200fc80 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 200fb34:	80800017 	ldw	r2,0(r16)
 200fb38:	1007883a 	mov	r3,r2
 200fb3c:	80800417 	ldw	r2,16(r16)
 200fb40:	1885c83a 	sub	r2,r3,r2
 200fb44:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 200fb48:	80c00517 	ldw	r3,20(r16)
 200fb4c:	1805883a 	mov	r2,r3
 200fb50:	1085883a 	add	r2,r2,r2
 200fb54:	10c5883a 	add	r2,r2,r3
 200fb58:	1006d7fa 	srli	r3,r2,31
 200fb5c:	1885883a 	add	r2,r3,r2
 200fb60:	1005d07a 	srai	r2,r2,1
 200fb64:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 200fb68:	e0bff617 	ldw	r2,-40(fp)
 200fb6c:	1485883a 	add	r2,r2,r18
 200fb70:	10800044 	addi	r2,r2,1
 200fb74:	e0fff517 	ldw	r3,-44(fp)
 200fb78:	1880042e 	bgeu	r3,r2,200fb8c <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 200fb7c:	e0bff617 	ldw	r2,-40(fp)
 200fb80:	1485883a 	add	r2,r2,r18
 200fb84:	10800044 	addi	r2,r2,1
 200fb88:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 200fb8c:	8080030b 	ldhu	r2,12(r16)
 200fb90:	10bfffcc 	andi	r2,r2,65535
 200fb94:	1081000c 	andi	r2,r2,1024
 200fb98:	10001726 	beq	r2,zero,200fbf8 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 200fb9c:	e0bff517 	ldw	r2,-44(fp)
 200fba0:	100b883a 	mov	r5,r2
 200fba4:	e13ff817 	ldw	r4,-32(fp)
 200fba8:	20108e80 	call	20108e8 <_malloc_r>
 200fbac:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 200fbb0:	e0bff417 	ldw	r2,-48(fp)
 200fbb4:	1000041e 	bne	r2,zero,200fbc8 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 200fbb8:	e0bff817 	ldw	r2,-32(fp)
 200fbbc:	00c00304 	movi	r3,12
 200fbc0:	10c00015 	stw	r3,0(r2)
			  goto err;
 200fbc4:	0000ea06 	br	200ff70 <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 200fbc8:	80800417 	ldw	r2,16(r16)
 200fbcc:	e0fff617 	ldw	r3,-40(fp)
 200fbd0:	180d883a 	mov	r6,r3
 200fbd4:	100b883a 	mov	r5,r2
 200fbd8:	e13ff417 	ldw	r4,-48(fp)
 200fbdc:	2009c800 	call	2009c80 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 200fbe0:	80c0030b 	ldhu	r3,12(r16)
 200fbe4:	00bedfc4 	movi	r2,-1153
 200fbe8:	1884703a 	and	r2,r3,r2
 200fbec:	10802014 	ori	r2,r2,128
 200fbf0:	8080030d 	sth	r2,12(r16)
 200fbf4:	00001506 	br	200fc4c <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 200fbf8:	80800417 	ldw	r2,16(r16)
 200fbfc:	e0fff517 	ldw	r3,-44(fp)
 200fc00:	180d883a 	mov	r6,r3
 200fc04:	100b883a 	mov	r5,r2
 200fc08:	e13ff817 	ldw	r4,-32(fp)
 200fc0c:	20132a00 	call	20132a0 <_realloc_r>
 200fc10:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 200fc14:	e0bff417 	ldw	r2,-48(fp)
 200fc18:	10000c1e 	bne	r2,zero,200fc4c <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 200fc1c:	80800417 	ldw	r2,16(r16)
 200fc20:	100b883a 	mov	r5,r2
 200fc24:	e13ff817 	ldw	r4,-32(fp)
 200fc28:	200f2a80 	call	200f2a8 <_free_r>
			  fp->_flags &=  ~__SMBF;
 200fc2c:	80c0030b 	ldhu	r3,12(r16)
 200fc30:	00bfdfc4 	movi	r2,-129
 200fc34:	1884703a 	and	r2,r3,r2
 200fc38:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 200fc3c:	e0bff817 	ldw	r2,-32(fp)
 200fc40:	00c00304 	movi	r3,12
 200fc44:	10c00015 	stw	r3,0(r2)
			  goto err;
 200fc48:	0000c906 	br	200ff70 <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 200fc4c:	e0bff417 	ldw	r2,-48(fp)
 200fc50:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 200fc54:	e0bff617 	ldw	r2,-40(fp)
 200fc58:	e0fff417 	ldw	r3,-48(fp)
 200fc5c:	1885883a 	add	r2,r3,r2
 200fc60:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 200fc64:	e0bff517 	ldw	r2,-44(fp)
 200fc68:	80800515 	stw	r2,20(r16)
		  w = len;
 200fc6c:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 200fc70:	e0fff517 	ldw	r3,-44(fp)
 200fc74:	e0bff617 	ldw	r2,-40(fp)
 200fc78:	1885c83a 	sub	r2,r3,r2
 200fc7c:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 200fc80:	8805883a 	mov	r2,r17
 200fc84:	9080012e 	bgeu	r18,r2,200fc8c <__sfvwrite_r+0x2b8>
		w = len;
 200fc88:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 200fc8c:	80800017 	ldw	r2,0(r16)
 200fc90:	8807883a 	mov	r3,r17
 200fc94:	180d883a 	mov	r6,r3
 200fc98:	980b883a 	mov	r5,r19
 200fc9c:	1009883a 	mov	r4,r2
 200fca0:	20116200 	call	2011620 <memmove>
	      fp->_w -= w;
 200fca4:	80800217 	ldw	r2,8(r16)
 200fca8:	1445c83a 	sub	r2,r2,r17
 200fcac:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200fcb0:	80800017 	ldw	r2,0(r16)
 200fcb4:	8807883a 	mov	r3,r17
 200fcb8:	10c5883a 	add	r2,r2,r3
 200fcbc:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 200fcc0:	9023883a 	mov	r17,r18
 200fcc4:	00003506 	br	200fd9c <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 200fcc8:	80800017 	ldw	r2,0(r16)
 200fccc:	80c00417 	ldw	r3,16(r16)
 200fcd0:	18800236 	bltu	r3,r2,200fcdc <__sfvwrite_r+0x308>
 200fcd4:	80800517 	ldw	r2,20(r16)
 200fcd8:	9080182e 	bgeu	r18,r2,200fd3c <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 200fcdc:	8805883a 	mov	r2,r17
 200fce0:	9080012e 	bgeu	r18,r2,200fce8 <__sfvwrite_r+0x314>
 200fce4:	9005883a 	mov	r2,r18
 200fce8:	1023883a 	mov	r17,r2
	      COPY (w);
 200fcec:	80800017 	ldw	r2,0(r16)
 200fcf0:	8807883a 	mov	r3,r17
 200fcf4:	180d883a 	mov	r6,r3
 200fcf8:	980b883a 	mov	r5,r19
 200fcfc:	1009883a 	mov	r4,r2
 200fd00:	20116200 	call	2011620 <memmove>
	      fp->_w -= w;
 200fd04:	80800217 	ldw	r2,8(r16)
 200fd08:	1445c83a 	sub	r2,r2,r17
 200fd0c:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200fd10:	80800017 	ldw	r2,0(r16)
 200fd14:	8807883a 	mov	r3,r17
 200fd18:	10c5883a 	add	r2,r2,r3
 200fd1c:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200fd20:	80800217 	ldw	r2,8(r16)
 200fd24:	10001c1e 	bne	r2,zero,200fd98 <__sfvwrite_r+0x3c4>
 200fd28:	800b883a 	mov	r5,r16
 200fd2c:	e13ff817 	ldw	r4,-32(fp)
 200fd30:	200ec080 	call	200ec08 <_fflush_r>
 200fd34:	10001826 	beq	r2,zero,200fd98 <__sfvwrite_r+0x3c4>
		goto err;
 200fd38:	00008d06 	br	200ff70 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 200fd3c:	9005883a 	mov	r2,r18
 200fd40:	00e00034 	movhi	r3,32768
 200fd44:	10c00236 	bltu	r2,r3,200fd50 <__sfvwrite_r+0x37c>
 200fd48:	00a00034 	movhi	r2,32768
 200fd4c:	10bfffc4 	addi	r2,r2,-1
 200fd50:	1007883a 	mov	r3,r2
 200fd54:	80800517 	ldw	r2,20(r16)
 200fd58:	100b883a 	mov	r5,r2
 200fd5c:	1809883a 	mov	r4,r3
 200fd60:	20073900 	call	2007390 <__divsi3>
 200fd64:	1007883a 	mov	r3,r2
 200fd68:	80800517 	ldw	r2,20(r16)
 200fd6c:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200fd70:	80800917 	ldw	r2,36(r16)
 200fd74:	80c00717 	ldw	r3,28(r16)
 200fd78:	880f883a 	mov	r7,r17
 200fd7c:	980d883a 	mov	r6,r19
 200fd80:	180b883a 	mov	r5,r3
 200fd84:	e13ff817 	ldw	r4,-32(fp)
 200fd88:	103ee83a 	callr	r2
 200fd8c:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200fd90:	0440740e 	bge	zero,r17,200ff64 <__sfvwrite_r+0x590>
 200fd94:	00000106 	br	200fd9c <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200fd98:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 200fd9c:	8805883a 	mov	r2,r17
 200fda0:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200fda4:	8805883a 	mov	r2,r17
 200fda8:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200fdac:	a8800217 	ldw	r2,8(r21)
 200fdb0:	8807883a 	mov	r3,r17
 200fdb4:	10c5c83a 	sub	r2,r2,r3
 200fdb8:	a8800215 	stw	r2,8(r21)
 200fdbc:	a8800217 	ldw	r2,8(r21)
 200fdc0:	103f501e 	bne	r2,zero,200fb04 <__sfvwrite_r+0x130>
 200fdc4:	00006306 	br	200ff54 <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 200fdc8:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 200fdcc:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 200fdd0:	00000406 	br	200fde4 <__sfvwrite_r+0x410>
 200fdd4:	e03ff215 	stw	zero,-56(fp)
 200fdd8:	a4c00017 	ldw	r19,0(r20)
 200fddc:	a4800117 	ldw	r18,4(r20)
 200fde0:	a5000204 	addi	r20,r20,8
 200fde4:	903ffb26 	beq	r18,zero,200fdd4 <__sfvwrite_r+0x400>
	  if (!nlknown)
 200fde8:	e0bff217 	ldw	r2,-56(fp)
 200fdec:	1000111e 	bne	r2,zero,200fe34 <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 200fdf0:	900d883a 	mov	r6,r18
 200fdf4:	01400284 	movi	r5,10
 200fdf8:	9809883a 	mov	r4,r19
 200fdfc:	20114640 	call	2011464 <memchr>
 200fe00:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 200fe04:	e0bff717 	ldw	r2,-36(fp)
 200fe08:	10000626 	beq	r2,zero,200fe24 <__sfvwrite_r+0x450>
 200fe0c:	e0bff717 	ldw	r2,-36(fp)
 200fe10:	10800044 	addi	r2,r2,1
 200fe14:	1007883a 	mov	r3,r2
 200fe18:	9805883a 	mov	r2,r19
 200fe1c:	1885c83a 	sub	r2,r3,r2
 200fe20:	00000106 	br	200fe28 <__sfvwrite_r+0x454>
 200fe24:	90800044 	addi	r2,r18,1
 200fe28:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 200fe2c:	00800044 	movi	r2,1
 200fe30:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 200fe34:	e0bff317 	ldw	r2,-52(fp)
 200fe38:	9080012e 	bgeu	r18,r2,200fe40 <__sfvwrite_r+0x46c>
 200fe3c:	9005883a 	mov	r2,r18
 200fe40:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 200fe44:	80c00217 	ldw	r3,8(r16)
 200fe48:	80800517 	ldw	r2,20(r16)
 200fe4c:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 200fe50:	80800017 	ldw	r2,0(r16)
 200fe54:	80c00417 	ldw	r3,16(r16)
 200fe58:	1880102e 	bgeu	r3,r2,200fe9c <__sfvwrite_r+0x4c8>
 200fe5c:	8d800f0e 	bge	r17,r22,200fe9c <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 200fe60:	80800017 	ldw	r2,0(r16)
 200fe64:	8807883a 	mov	r3,r17
 200fe68:	180d883a 	mov	r6,r3
 200fe6c:	980b883a 	mov	r5,r19
 200fe70:	1009883a 	mov	r4,r2
 200fe74:	20116200 	call	2011620 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 200fe78:	80800017 	ldw	r2,0(r16)
 200fe7c:	8807883a 	mov	r3,r17
 200fe80:	10c5883a 	add	r2,r2,r3
 200fe84:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 200fe88:	800b883a 	mov	r5,r16
 200fe8c:	e13ff817 	ldw	r4,-32(fp)
 200fe90:	200ec080 	call	200ec08 <_fflush_r>
 200fe94:	10001b26 	beq	r2,zero,200ff04 <__sfvwrite_r+0x530>
		goto err;
 200fe98:	00003506 	br	200ff70 <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 200fe9c:	84400517 	ldw	r17,20(r16)
 200fea0:	b4400a16 	blt	r22,r17,200fecc <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200fea4:	80800917 	ldw	r2,36(r16)
 200fea8:	80c00717 	ldw	r3,28(r16)
 200feac:	880f883a 	mov	r7,r17
 200feb0:	980d883a 	mov	r6,r19
 200feb4:	180b883a 	mov	r5,r3
 200feb8:	e13ff817 	ldw	r4,-32(fp)
 200febc:	103ee83a 	callr	r2
 200fec0:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200fec4:	04400f16 	blt	zero,r17,200ff04 <__sfvwrite_r+0x530>
		goto err;
 200fec8:	00002906 	br	200ff70 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 200fecc:	b023883a 	mov	r17,r22
	      COPY (w);
 200fed0:	80800017 	ldw	r2,0(r16)
 200fed4:	8807883a 	mov	r3,r17
 200fed8:	180d883a 	mov	r6,r3
 200fedc:	980b883a 	mov	r5,r19
 200fee0:	1009883a 	mov	r4,r2
 200fee4:	20116200 	call	2011620 <memmove>
	      fp->_w -= w;
 200fee8:	80800217 	ldw	r2,8(r16)
 200feec:	1445c83a 	sub	r2,r2,r17
 200fef0:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200fef4:	80800017 	ldw	r2,0(r16)
 200fef8:	8807883a 	mov	r3,r17
 200fefc:	10c5883a 	add	r2,r2,r3
 200ff00:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 200ff04:	e0bff317 	ldw	r2,-52(fp)
 200ff08:	1445c83a 	sub	r2,r2,r17
 200ff0c:	e0bff315 	stw	r2,-52(fp)
 200ff10:	e0bff317 	ldw	r2,-52(fp)
 200ff14:	1000051e 	bne	r2,zero,200ff2c <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 200ff18:	800b883a 	mov	r5,r16
 200ff1c:	e13ff817 	ldw	r4,-32(fp)
 200ff20:	200ec080 	call	200ec08 <_fflush_r>
 200ff24:	1000111e 	bne	r2,zero,200ff6c <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 200ff28:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 200ff2c:	8805883a 	mov	r2,r17
 200ff30:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200ff34:	8805883a 	mov	r2,r17
 200ff38:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200ff3c:	a8800217 	ldw	r2,8(r21)
 200ff40:	8807883a 	mov	r3,r17
 200ff44:	10c5c83a 	sub	r2,r2,r3
 200ff48:	a8800215 	stw	r2,8(r21)
 200ff4c:	a8800217 	ldw	r2,8(r21)
 200ff50:	103fa41e 	bne	r2,zero,200fde4 <__sfvwrite_r+0x410>
    }
  return 0;
 200ff54:	0005883a 	mov	r2,zero
 200ff58:	00000906 	br	200ff80 <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 200ff5c:	0001883a 	nop
 200ff60:	00000306 	br	200ff70 <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 200ff64:	0001883a 	nop
 200ff68:	00000106 	br	200ff70 <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 200ff6c:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 200ff70:	8080030b 	ldhu	r2,12(r16)
 200ff74:	10801014 	ori	r2,r2,64
 200ff78:	8080030d 	sth	r2,12(r16)
  return EOF;
 200ff7c:	00bfffc4 	movi	r2,-1
}
 200ff80:	e6fff904 	addi	sp,fp,-28
 200ff84:	dfc00817 	ldw	ra,32(sp)
 200ff88:	df000717 	ldw	fp,28(sp)
 200ff8c:	dd800617 	ldw	r22,24(sp)
 200ff90:	dd400517 	ldw	r21,20(sp)
 200ff94:	dd000417 	ldw	r20,16(sp)
 200ff98:	dcc00317 	ldw	r19,12(sp)
 200ff9c:	dc800217 	ldw	r18,8(sp)
 200ffa0:	dc400117 	ldw	r17,4(sp)
 200ffa4:	dc000017 	ldw	r16,0(sp)
 200ffa8:	dec00904 	addi	sp,sp,36
 200ffac:	f800283a 	ret

0200ffb0 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 200ffb0:	defff804 	addi	sp,sp,-32
 200ffb4:	dfc00715 	stw	ra,28(sp)
 200ffb8:	df000615 	stw	fp,24(sp)
 200ffbc:	dd000515 	stw	r20,20(sp)
 200ffc0:	dcc00415 	stw	r19,16(sp)
 200ffc4:	dc800315 	stw	r18,12(sp)
 200ffc8:	dc400215 	stw	r17,8(sp)
 200ffcc:	dc000115 	stw	r16,4(sp)
 200ffd0:	df000604 	addi	fp,sp,24
 200ffd4:	e13ffa15 	stw	r4,-24(fp)
 200ffd8:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200ffdc:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200ffe0:	e0bffa17 	ldw	r2,-24(fp)
 200ffe4:	1440b804 	addi	r17,r2,736
 200ffe8:	00001b06 	br	2010058 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200ffec:	8c000217 	ldw	r16,8(r17)
 200fff0:	8c800117 	ldw	r18,4(r17)
 200fff4:	00001506 	br	201004c <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200fff8:	8080030b 	ldhu	r2,12(r16)
 200fffc:	10bfffcc 	andi	r2,r2,65535
 2010000:	10a0001c 	xori	r2,r2,32768
 2010004:	10a00004 	addi	r2,r2,-32768
 2010008:	10000f26 	beq	r2,zero,2010048 <_fwalk+0x98>
 201000c:	8080030b 	ldhu	r2,12(r16)
 2010010:	10bfffcc 	andi	r2,r2,65535
 2010014:	10a0001c 	xori	r2,r2,32768
 2010018:	10a00004 	addi	r2,r2,-32768
 201001c:	10800060 	cmpeqi	r2,r2,1
 2010020:	1000091e 	bne	r2,zero,2010048 <_fwalk+0x98>
 2010024:	8080038b 	ldhu	r2,14(r16)
 2010028:	10bfffcc 	andi	r2,r2,65535
 201002c:	10a0001c 	xori	r2,r2,32768
 2010030:	10a00004 	addi	r2,r2,-32768
 2010034:	10bfffe0 	cmpeqi	r2,r2,-1
 2010038:	1000031e 	bne	r2,zero,2010048 <_fwalk+0x98>
	ret |= (*function) (fp);
 201003c:	8009883a 	mov	r4,r16
 2010040:	a03ee83a 	callr	r20
 2010044:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2010048:	84001a04 	addi	r16,r16,104
 201004c:	94bfffc4 	addi	r18,r18,-1
 2010050:	903fe90e 	bge	r18,zero,200fff8 <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 2010054:	8c400017 	ldw	r17,0(r17)
 2010058:	883fe41e 	bne	r17,zero,200ffec <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 201005c:	9805883a 	mov	r2,r19
}
 2010060:	e6fffb04 	addi	sp,fp,-20
 2010064:	dfc00617 	ldw	ra,24(sp)
 2010068:	df000517 	ldw	fp,20(sp)
 201006c:	dd000417 	ldw	r20,16(sp)
 2010070:	dcc00317 	ldw	r19,12(sp)
 2010074:	dc800217 	ldw	r18,8(sp)
 2010078:	dc400117 	ldw	r17,4(sp)
 201007c:	dc000017 	ldw	r16,0(sp)
 2010080:	dec00704 	addi	sp,sp,28
 2010084:	f800283a 	ret

02010088 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 2010088:	defff804 	addi	sp,sp,-32
 201008c:	dfc00715 	stw	ra,28(sp)
 2010090:	df000615 	stw	fp,24(sp)
 2010094:	dd000515 	stw	r20,20(sp)
 2010098:	dcc00415 	stw	r19,16(sp)
 201009c:	dc800315 	stw	r18,12(sp)
 20100a0:	dc400215 	stw	r17,8(sp)
 20100a4:	dc000115 	stw	r16,4(sp)
 20100a8:	df000604 	addi	fp,sp,24
 20100ac:	e13ffa15 	stw	r4,-24(fp)
 20100b0:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 20100b4:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 20100b8:	e0bffa17 	ldw	r2,-24(fp)
 20100bc:	1440b804 	addi	r17,r2,736
 20100c0:	00001c06 	br	2010134 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 20100c4:	8c000217 	ldw	r16,8(r17)
 20100c8:	8c800117 	ldw	r18,4(r17)
 20100cc:	00001606 	br	2010128 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 20100d0:	8080030b 	ldhu	r2,12(r16)
 20100d4:	10bfffcc 	andi	r2,r2,65535
 20100d8:	10a0001c 	xori	r2,r2,32768
 20100dc:	10a00004 	addi	r2,r2,-32768
 20100e0:	10001026 	beq	r2,zero,2010124 <_fwalk_reent+0x9c>
 20100e4:	8080030b 	ldhu	r2,12(r16)
 20100e8:	10bfffcc 	andi	r2,r2,65535
 20100ec:	10a0001c 	xori	r2,r2,32768
 20100f0:	10a00004 	addi	r2,r2,-32768
 20100f4:	10800060 	cmpeqi	r2,r2,1
 20100f8:	10000a1e 	bne	r2,zero,2010124 <_fwalk_reent+0x9c>
 20100fc:	8080038b 	ldhu	r2,14(r16)
 2010100:	10bfffcc 	andi	r2,r2,65535
 2010104:	10a0001c 	xori	r2,r2,32768
 2010108:	10a00004 	addi	r2,r2,-32768
 201010c:	10bfffe0 	cmpeqi	r2,r2,-1
 2010110:	1000041e 	bne	r2,zero,2010124 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 2010114:	800b883a 	mov	r5,r16
 2010118:	e13ffa17 	ldw	r4,-24(fp)
 201011c:	a03ee83a 	callr	r20
 2010120:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2010124:	84001a04 	addi	r16,r16,104
 2010128:	94bfffc4 	addi	r18,r18,-1
 201012c:	903fe80e 	bge	r18,zero,20100d0 <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 2010130:	8c400017 	ldw	r17,0(r17)
 2010134:	883fe31e 	bne	r17,zero,20100c4 <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 2010138:	9805883a 	mov	r2,r19
}
 201013c:	e6fffb04 	addi	sp,fp,-20
 2010140:	dfc00617 	ldw	ra,24(sp)
 2010144:	df000517 	ldw	fp,20(sp)
 2010148:	dd000417 	ldw	r20,16(sp)
 201014c:	dcc00317 	ldw	r19,12(sp)
 2010150:	dc800217 	ldw	r18,8(sp)
 2010154:	dc400117 	ldw	r17,4(sp)
 2010158:	dc000017 	ldw	r16,0(sp)
 201015c:	dec00704 	addi	sp,sp,28
 2010160:	f800283a 	ret

02010164 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 2010164:	defffb04 	addi	sp,sp,-20
 2010168:	dfc00415 	stw	ra,16(sp)
 201016c:	df000315 	stw	fp,12(sp)
 2010170:	df000304 	addi	fp,sp,12
 2010174:	e13ffd15 	stw	r4,-12(fp)
 2010178:	e17ffe15 	stw	r5,-8(fp)
 201017c:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 2010180:	e0bfff17 	ldw	r2,-4(fp)
 2010184:	10001126 	beq	r2,zero,20101cc <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 2010188:	014080b4 	movhi	r5,514
 201018c:	294c7204 	addi	r5,r5,12744
 2010190:	e13fff17 	ldw	r4,-4(fp)
 2010194:	20141640 	call	2014164 <strcmp>
 2010198:	10000c26 	beq	r2,zero,20101cc <_setlocale_r+0x68>
 201019c:	014080b4 	movhi	r5,514
 20101a0:	294c7404 	addi	r5,r5,12752
 20101a4:	e13fff17 	ldw	r4,-4(fp)
 20101a8:	20141640 	call	2014164 <strcmp>
 20101ac:	10000726 	beq	r2,zero,20101cc <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 20101b0:	014080b4 	movhi	r5,514
 20101b4:	294c7104 	addi	r5,r5,12740
 20101b8:	e13fff17 	ldw	r4,-4(fp)
 20101bc:	20141640 	call	2014164 <strcmp>
 20101c0:	10000226 	beq	r2,zero,20101cc <_setlocale_r+0x68>
        return NULL;
 20101c4:	0005883a 	mov	r2,zero
 20101c8:	00000206 	br	20101d4 <_setlocale_r+0x70>
    }
  return "C";
 20101cc:	008080b4 	movhi	r2,514
 20101d0:	108c7404 	addi	r2,r2,12752
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 20101d4:	e037883a 	mov	sp,fp
 20101d8:	dfc00117 	ldw	ra,4(sp)
 20101dc:	df000017 	ldw	fp,0(sp)
 20101e0:	dec00204 	addi	sp,sp,8
 20101e4:	f800283a 	ret

020101e8 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 20101e8:	deffff04 	addi	sp,sp,-4
 20101ec:	df000015 	stw	fp,0(sp)
 20101f0:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 20101f4:	008080b4 	movhi	r2,514
 20101f8:	108e5704 	addi	r2,r2,14684
#endif
}
 20101fc:	e037883a 	mov	sp,fp
 2010200:	df000017 	ldw	fp,0(sp)
 2010204:	dec00104 	addi	sp,sp,4
 2010208:	f800283a 	ret

0201020c <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 201020c:	deffff04 	addi	sp,sp,-4
 2010210:	df000015 	stw	fp,0(sp)
 2010214:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 2010218:	d0a03217 	ldw	r2,-32568(gp)
#endif
}
 201021c:	e037883a 	mov	sp,fp
 2010220:	df000017 	ldw	fp,0(sp)
 2010224:	dec00104 	addi	sp,sp,4
 2010228:	f800283a 	ret

0201022c <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 201022c:	deffff04 	addi	sp,sp,-4
 2010230:	df000015 	stw	fp,0(sp)
 2010234:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 2010238:	008080b4 	movhi	r2,514
 201023c:	108e5f04 	addi	r2,r2,14716
#endif
}
 2010240:	e037883a 	mov	sp,fp
 2010244:	df000017 	ldw	fp,0(sp)
 2010248:	dec00104 	addi	sp,sp,4
 201024c:	f800283a 	ret

02010250 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 2010250:	deffff04 	addi	sp,sp,-4
 2010254:	df000015 	stw	fp,0(sp)
 2010258:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 201025c:	d0a79a17 	ldw	r2,-24984(gp)
}
 2010260:	e037883a 	mov	sp,fp
 2010264:	df000017 	ldw	fp,0(sp)
 2010268:	dec00104 	addi	sp,sp,4
 201026c:	f800283a 	ret

02010270 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 2010270:	defffe04 	addi	sp,sp,-8
 2010274:	df000115 	stw	fp,4(sp)
 2010278:	df000104 	addi	fp,sp,4
 201027c:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 2010280:	008080b4 	movhi	r2,514
 2010284:	108e4904 	addi	r2,r2,14628
}
 2010288:	e037883a 	mov	sp,fp
 201028c:	df000017 	ldw	fp,0(sp)
 2010290:	dec00104 	addi	sp,sp,4
 2010294:	f800283a 	ret

02010298 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 2010298:	defffc04 	addi	sp,sp,-16
 201029c:	dfc00315 	stw	ra,12(sp)
 20102a0:	df000215 	stw	fp,8(sp)
 20102a4:	df000204 	addi	fp,sp,8
 20102a8:	e13ffe15 	stw	r4,-8(fp)
 20102ac:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 20102b0:	d0a03017 	ldw	r2,-32576(gp)
 20102b4:	e1bfff17 	ldw	r6,-4(fp)
 20102b8:	e17ffe17 	ldw	r5,-8(fp)
 20102bc:	1009883a 	mov	r4,r2
 20102c0:	20101640 	call	2010164 <_setlocale_r>
}
 20102c4:	e037883a 	mov	sp,fp
 20102c8:	dfc00117 	ldw	ra,4(sp)
 20102cc:	df000017 	ldw	fp,0(sp)
 20102d0:	dec00204 	addi	sp,sp,8
 20102d4:	f800283a 	ret

020102d8 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 20102d8:	defffe04 	addi	sp,sp,-8
 20102dc:	dfc00115 	stw	ra,4(sp)
 20102e0:	df000015 	stw	fp,0(sp)
 20102e4:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 20102e8:	d0a03017 	ldw	r2,-32576(gp)
 20102ec:	1009883a 	mov	r4,r2
 20102f0:	20102700 	call	2010270 <_localeconv_r>
}
 20102f4:	e037883a 	mov	sp,fp
 20102f8:	dfc00117 	ldw	ra,4(sp)
 20102fc:	df000017 	ldw	fp,0(sp)
 2010300:	dec00204 	addi	sp,sp,8
 2010304:	f800283a 	ret

02010308 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 2010308:	deffea04 	addi	sp,sp,-88
 201030c:	dfc01515 	stw	ra,84(sp)
 2010310:	df001415 	stw	fp,80(sp)
 2010314:	dcc01315 	stw	r19,76(sp)
 2010318:	dc801215 	stw	r18,72(sp)
 201031c:	dc401115 	stw	r17,68(sp)
 2010320:	dc001015 	stw	r16,64(sp)
 2010324:	df001404 	addi	fp,sp,80
 2010328:	e13ffb15 	stw	r4,-20(fp)
 201032c:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 2010330:	8080030b 	ldhu	r2,12(r16)
 2010334:	10bfffcc 	andi	r2,r2,65535
 2010338:	1080008c 	andi	r2,r2,2
 201033c:	10000726 	beq	r2,zero,201035c <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 2010340:	808010c4 	addi	r2,r16,67
 2010344:	80800015 	stw	r2,0(r16)
 2010348:	80800017 	ldw	r2,0(r16)
 201034c:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 2010350:	00800044 	movi	r2,1
 2010354:	80800515 	stw	r2,20(r16)
 2010358:	00006d06 	br	2010510 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 201035c:	8080038b 	ldhu	r2,14(r16)
 2010360:	10bfffcc 	andi	r2,r2,65535
 2010364:	10a0001c 	xori	r2,r2,32768
 2010368:	10a00004 	addi	r2,r2,-32768
 201036c:	10000916 	blt	r2,zero,2010394 <__smakebuf_r+0x8c>
 2010370:	8080038b 	ldhu	r2,14(r16)
 2010374:	10bfffcc 	andi	r2,r2,65535
 2010378:	10a0001c 	xori	r2,r2,32768
 201037c:	10a00004 	addi	r2,r2,-32768
 2010380:	e1bfec04 	addi	r6,fp,-80
 2010384:	100b883a 	mov	r5,r2
 2010388:	e13ffb17 	ldw	r4,-20(fp)
 201038c:	2015e600 	call	2015e60 <_fstat_r>
 2010390:	10000c0e 	bge	r2,zero,20103c4 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 2010394:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 2010398:	8080030b 	ldhu	r2,12(r16)
 201039c:	10bfffcc 	andi	r2,r2,65535
 20103a0:	1080200c 	andi	r2,r2,128
 20103a4:	10000226 	beq	r2,zero,20103b0 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 20103a8:	04401004 	movi	r17,64
 20103ac:	00000106 	br	20103b4 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 20103b0:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 20103b4:	8080030b 	ldhu	r2,12(r16)
 20103b8:	10820014 	ori	r2,r2,2048
 20103bc:	8080030d 	sth	r2,12(r16)
 20103c0:	00001606 	br	201041c <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 20103c4:	e0bfed17 	ldw	r2,-76(fp)
 20103c8:	10bc000c 	andi	r2,r2,61440
 20103cc:	10880020 	cmpeqi	r2,r2,8192
 20103d0:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 20103d4:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 20103d8:	e0bfed17 	ldw	r2,-76(fp)
 20103dc:	10fc000c 	andi	r3,r2,61440
 20103e0:	00a00014 	movui	r2,32768
 20103e4:	18800a1e 	bne	r3,r2,2010410 <__smakebuf_r+0x108>
 20103e8:	80c00a17 	ldw	r3,40(r16)
 20103ec:	00808074 	movhi	r2,513
 20103f0:	10901c04 	addi	r2,r2,16496
 20103f4:	1880061e 	bne	r3,r2,2010410 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 20103f8:	8080030b 	ldhu	r2,12(r16)
 20103fc:	10810014 	ori	r2,r2,1024
 2010400:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 2010404:	00810004 	movi	r2,1024
 2010408:	80801315 	stw	r2,76(r16)
 201040c:	00000306 	br	201041c <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 2010410:	8080030b 	ldhu	r2,12(r16)
 2010414:	10820014 	ori	r2,r2,2048
 2010418:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 201041c:	90001126 	beq	r18,zero,2010464 <__smakebuf_r+0x15c>
 2010420:	8080038b 	ldhu	r2,14(r16)
 2010424:	10bfffcc 	andi	r2,r2,65535
 2010428:	10a0001c 	xori	r2,r2,32768
 201042c:	10a00004 	addi	r2,r2,-32768
 2010430:	100b883a 	mov	r5,r2
 2010434:	e13ffb17 	ldw	r4,-20(fp)
 2010438:	2015ec80 	call	2015ec8 <_isatty_r>
 201043c:	10000926 	beq	r2,zero,2010464 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 2010440:	8080030b 	ldhu	r2,12(r16)
 2010444:	10800054 	ori	r2,r2,1
 2010448:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 201044c:	808010c4 	addi	r2,r16,67
 2010450:	80800015 	stw	r2,0(r16)
 2010454:	80800017 	ldw	r2,0(r16)
 2010458:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 201045c:	00800044 	movi	r2,1
 2010460:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 2010464:	880b883a 	mov	r5,r17
 2010468:	e13ffb17 	ldw	r4,-20(fp)
 201046c:	20108e80 	call	20108e8 <_malloc_r>
 2010470:	1027883a 	mov	r19,r2
 2010474:	98000e1e 	bne	r19,zero,20104b0 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 2010478:	8080030b 	ldhu	r2,12(r16)
 201047c:	10bfffcc 	andi	r2,r2,65535
 2010480:	1080800c 	andi	r2,r2,512
 2010484:	1000221e 	bne	r2,zero,2010510 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 2010488:	8080030b 	ldhu	r2,12(r16)
 201048c:	10800094 	ori	r2,r2,2
 2010490:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 2010494:	808010c4 	addi	r2,r16,67
 2010498:	80800015 	stw	r2,0(r16)
 201049c:	80800017 	ldw	r2,0(r16)
 20104a0:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 20104a4:	00800044 	movi	r2,1
 20104a8:	80800515 	stw	r2,20(r16)
 20104ac:	00001806 	br	2010510 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 20104b0:	e0fffb17 	ldw	r3,-20(fp)
 20104b4:	00808074 	movhi	r2,513
 20104b8:	10bc0404 	addi	r2,r2,-4080
 20104bc:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 20104c0:	8080030b 	ldhu	r2,12(r16)
 20104c4:	10802014 	ori	r2,r2,128
 20104c8:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 20104cc:	84c00015 	stw	r19,0(r16)
 20104d0:	80800017 	ldw	r2,0(r16)
 20104d4:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 20104d8:	8805883a 	mov	r2,r17
 20104dc:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 20104e0:	90000b26 	beq	r18,zero,2010510 <__smakebuf_r+0x208>
 20104e4:	8080038b 	ldhu	r2,14(r16)
 20104e8:	10bfffcc 	andi	r2,r2,65535
 20104ec:	10a0001c 	xori	r2,r2,32768
 20104f0:	10a00004 	addi	r2,r2,-32768
 20104f4:	100b883a 	mov	r5,r2
 20104f8:	e13ffb17 	ldw	r4,-20(fp)
 20104fc:	2015ec80 	call	2015ec8 <_isatty_r>
 2010500:	10000326 	beq	r2,zero,2010510 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 2010504:	8080030b 	ldhu	r2,12(r16)
 2010508:	10800054 	ori	r2,r2,1
 201050c:	8080030d 	sth	r2,12(r16)
    }
}
 2010510:	e6fffc04 	addi	sp,fp,-16
 2010514:	dfc00517 	ldw	ra,20(sp)
 2010518:	df000417 	ldw	fp,16(sp)
 201051c:	dcc00317 	ldw	r19,12(sp)
 2010520:	dc800217 	ldw	r18,8(sp)
 2010524:	dc400117 	ldw	r17,4(sp)
 2010528:	dc000017 	ldw	r16,0(sp)
 201052c:	dec00604 	addi	sp,sp,24
 2010530:	f800283a 	ret

02010534 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 2010534:	defff104 	addi	sp,sp,-60
 2010538:	dfc00e15 	stw	ra,56(sp)
 201053c:	df000d15 	stw	fp,52(sp)
 2010540:	df000d04 	addi	fp,sp,52
 2010544:	e13ffe15 	stw	r4,-8(fp)
 2010548:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 201054c:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 2010550:	008080b4 	movhi	r2,514
 2010554:	108e6704 	addi	r2,r2,14748
 2010558:	10800217 	ldw	r2,8(r2)
 201055c:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 2010560:	e0bff817 	ldw	r2,-32(fp)
 2010564:	10c00117 	ldw	r3,4(r2)
 2010568:	00bfff04 	movi	r2,-4
 201056c:	1884703a 	and	r2,r3,r2
 2010570:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 2010574:	e0fff817 	ldw	r3,-32(fp)
 2010578:	e0bff917 	ldw	r2,-28(fp)
 201057c:	1885883a 	add	r2,r3,r2
 2010580:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 2010584:	d0e79b17 	ldw	r3,-24980(gp)
 2010588:	e0bfff17 	ldw	r2,-4(fp)
 201058c:	1885883a 	add	r2,r3,r2
 2010590:	10800404 	addi	r2,r2,16
 2010594:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 2010598:	00840004 	movi	r2,4096
 201059c:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 20105a0:	d0a03417 	ldw	r2,-32560(gp)
 20105a4:	10bfffe0 	cmpeqi	r2,r2,-1
 20105a8:	1000081e 	bne	r2,zero,20105cc <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 20105ac:	e0fffb17 	ldw	r3,-20(fp)
 20105b0:	e0bff617 	ldw	r2,-40(fp)
 20105b4:	1885883a 	add	r2,r3,r2
 20105b8:	10ffffc4 	addi	r3,r2,-1
 20105bc:	e0bffb17 	ldw	r2,-20(fp)
 20105c0:	0085c83a 	sub	r2,zero,r2
 20105c4:	1884703a 	and	r2,r3,r2
 20105c8:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 20105cc:	e0bff617 	ldw	r2,-40(fp)
 20105d0:	100b883a 	mov	r5,r2
 20105d4:	e13ffe17 	ldw	r4,-8(fp)
 20105d8:	2013e900 	call	2013e90 <_sbrk_r>
 20105dc:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 20105e0:	e0bff317 	ldw	r2,-52(fp)
 20105e4:	10bfffe0 	cmpeqi	r2,r2,-1
 20105e8:	1000b91e 	bne	r2,zero,20108d0 <malloc_extend_top+0x39c>
 20105ec:	e0fff317 	ldw	r3,-52(fp)
 20105f0:	e0bffa17 	ldw	r2,-24(fp)
 20105f4:	1880042e 	bgeu	r3,r2,2010608 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 20105f8:	008080b4 	movhi	r2,514
 20105fc:	108e6704 	addi	r2,r2,14748
 2010600:	e0fff817 	ldw	r3,-32(fp)
 2010604:	1880b21e 	bne	r3,r2,20108d0 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 2010608:	008080b4 	movhi	r2,514
 201060c:	109bb904 	addi	r2,r2,28388
 2010610:	10800017 	ldw	r2,0(r2)
 2010614:	1007883a 	mov	r3,r2
 2010618:	e0bff617 	ldw	r2,-40(fp)
 201061c:	1885883a 	add	r2,r3,r2
 2010620:	1007883a 	mov	r3,r2
 2010624:	008080b4 	movhi	r2,514
 2010628:	109bb904 	addi	r2,r2,28388
 201062c:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 2010630:	e0fff317 	ldw	r3,-52(fp)
 2010634:	e0bffa17 	ldw	r2,-24(fp)
 2010638:	1880101e 	bne	r3,r2,201067c <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 201063c:	e0bffb17 	ldw	r2,-20(fp)
 2010640:	10ffffc4 	addi	r3,r2,-1
 2010644:	e0bffa17 	ldw	r2,-24(fp)
 2010648:	1884703a 	and	r2,r3,r2
 201064c:	10000b1e 	bne	r2,zero,201067c <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 2010650:	e0fff617 	ldw	r3,-40(fp)
 2010654:	e0bff917 	ldw	r2,-28(fp)
 2010658:	1885883a 	add	r2,r3,r2
 201065c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 2010660:	008080b4 	movhi	r2,514
 2010664:	108e6704 	addi	r2,r2,14748
 2010668:	10800217 	ldw	r2,8(r2)
 201066c:	e0fffc17 	ldw	r3,-16(fp)
 2010670:	18c00054 	ori	r3,r3,1
 2010674:	10c00115 	stw	r3,4(r2)
 2010678:	00008006 	br	201087c <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 201067c:	d0a03417 	ldw	r2,-32560(gp)
 2010680:	10bfffd8 	cmpnei	r2,r2,-1
 2010684:	1000031e 	bne	r2,zero,2010694 <malloc_extend_top+0x160>
      sbrk_base = brk;
 2010688:	e0bff317 	ldw	r2,-52(fp)
 201068c:	d0a03415 	stw	r2,-32560(gp)
 2010690:	00000a06 	br	20106bc <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 2010694:	008080b4 	movhi	r2,514
 2010698:	109bb904 	addi	r2,r2,28388
 201069c:	10c00017 	ldw	r3,0(r2)
 20106a0:	e13ff317 	ldw	r4,-52(fp)
 20106a4:	e0bffa17 	ldw	r2,-24(fp)
 20106a8:	2085c83a 	sub	r2,r4,r2
 20106ac:	1887883a 	add	r3,r3,r2
 20106b0:	008080b4 	movhi	r2,514
 20106b4:	109bb904 	addi	r2,r2,28388
 20106b8:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 20106bc:	e0bff317 	ldw	r2,-52(fp)
 20106c0:	10800204 	addi	r2,r2,8
 20106c4:	108001cc 	andi	r2,r2,7
 20106c8:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 20106cc:	e0bffd17 	ldw	r2,-12(fp)
 20106d0:	10000926 	beq	r2,zero,20106f8 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 20106d4:	00c00204 	movi	r3,8
 20106d8:	e0bffd17 	ldw	r2,-12(fp)
 20106dc:	1885c83a 	sub	r2,r3,r2
 20106e0:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 20106e4:	e0fff317 	ldw	r3,-52(fp)
 20106e8:	e0bff417 	ldw	r2,-48(fp)
 20106ec:	1885883a 	add	r2,r3,r2
 20106f0:	e0bff315 	stw	r2,-52(fp)
 20106f4:	00000106 	br	20106fc <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 20106f8:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 20106fc:	e0fff317 	ldw	r3,-52(fp)
 2010700:	e0bff617 	ldw	r2,-40(fp)
 2010704:	1885883a 	add	r2,r3,r2
 2010708:	1007883a 	mov	r3,r2
 201070c:	e0bffb17 	ldw	r2,-20(fp)
 2010710:	10bfffc4 	addi	r2,r2,-1
 2010714:	1884703a 	and	r2,r3,r2
 2010718:	e0fffb17 	ldw	r3,-20(fp)
 201071c:	1885c83a 	sub	r2,r3,r2
 2010720:	e0fff417 	ldw	r3,-48(fp)
 2010724:	1885883a 	add	r2,r3,r2
 2010728:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 201072c:	e0bff417 	ldw	r2,-48(fp)
 2010730:	100b883a 	mov	r5,r2
 2010734:	e13ffe17 	ldw	r4,-8(fp)
 2010738:	2013e900 	call	2013e90 <_sbrk_r>
 201073c:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 2010740:	e0bff517 	ldw	r2,-44(fp)
 2010744:	10bfffd8 	cmpnei	r2,r2,-1
 2010748:	1000051e 	bne	r2,zero,2010760 <malloc_extend_top+0x22c>
      {
	correction = 0;
 201074c:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 2010750:	00800044 	movi	r2,1
 2010754:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 2010758:	e0bff317 	ldw	r2,-52(fp)
 201075c:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 2010760:	008080b4 	movhi	r2,514
 2010764:	109bb904 	addi	r2,r2,28388
 2010768:	10800017 	ldw	r2,0(r2)
 201076c:	1007883a 	mov	r3,r2
 2010770:	e0bff417 	ldw	r2,-48(fp)
 2010774:	1885883a 	add	r2,r3,r2
 2010778:	1007883a 	mov	r3,r2
 201077c:	008080b4 	movhi	r2,514
 2010780:	109bb904 	addi	r2,r2,28388
 2010784:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 2010788:	008080b4 	movhi	r2,514
 201078c:	108e6704 	addi	r2,r2,14748
 2010790:	e0fff317 	ldw	r3,-52(fp)
 2010794:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 2010798:	e0fff517 	ldw	r3,-44(fp)
 201079c:	e0bff317 	ldw	r2,-52(fp)
 20107a0:	1885c83a 	sub	r2,r3,r2
 20107a4:	1007883a 	mov	r3,r2
 20107a8:	e0bff417 	ldw	r2,-48(fp)
 20107ac:	1885883a 	add	r2,r3,r2
 20107b0:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 20107b4:	008080b4 	movhi	r2,514
 20107b8:	108e6704 	addi	r2,r2,14748
 20107bc:	10800217 	ldw	r2,8(r2)
 20107c0:	e0fffc17 	ldw	r3,-16(fp)
 20107c4:	18c00054 	ori	r3,r3,1
 20107c8:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 20107cc:	008080b4 	movhi	r2,514
 20107d0:	108e6704 	addi	r2,r2,14748
 20107d4:	e0fff817 	ldw	r3,-32(fp)
 20107d8:	18802826 	beq	r3,r2,201087c <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 20107dc:	e0bff917 	ldw	r2,-28(fp)
 20107e0:	10800428 	cmpgeui	r2,r2,16
 20107e4:	1000061e 	bne	r2,zero,2010800 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 20107e8:	008080b4 	movhi	r2,514
 20107ec:	108e6704 	addi	r2,r2,14748
 20107f0:	10800217 	ldw	r2,8(r2)
 20107f4:	00c00044 	movi	r3,1
 20107f8:	10c00115 	stw	r3,4(r2)
        return;
 20107fc:	00003506 	br	20108d4 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 2010800:	e0bff917 	ldw	r2,-28(fp)
 2010804:	10fffd04 	addi	r3,r2,-12
 2010808:	00bffe04 	movi	r2,-8
 201080c:	1884703a 	and	r2,r3,r2
 2010810:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 2010814:	e0bff817 	ldw	r2,-32(fp)
 2010818:	10800117 	ldw	r2,4(r2)
 201081c:	10c0004c 	andi	r3,r2,1
 2010820:	e0bff917 	ldw	r2,-28(fp)
 2010824:	1886b03a 	or	r3,r3,r2
 2010828:	e0bff817 	ldw	r2,-32(fp)
 201082c:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 2010830:	e0fff817 	ldw	r3,-32(fp)
 2010834:	e0bff917 	ldw	r2,-28(fp)
 2010838:	1885883a 	add	r2,r3,r2
 201083c:	00c00144 	movi	r3,5
 2010840:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 2010844:	e0bff917 	ldw	r2,-28(fp)
 2010848:	10800104 	addi	r2,r2,4
 201084c:	e0fff817 	ldw	r3,-32(fp)
 2010850:	1885883a 	add	r2,r3,r2
 2010854:	00c00144 	movi	r3,5
 2010858:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 201085c:	e0bff917 	ldw	r2,-28(fp)
 2010860:	10800430 	cmpltui	r2,r2,16
 2010864:	1000051e 	bne	r2,zero,201087c <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 2010868:	e0bff817 	ldw	r2,-32(fp)
 201086c:	10800204 	addi	r2,r2,8
 2010870:	100b883a 	mov	r5,r2
 2010874:	e13ffe17 	ldw	r4,-8(fp)
 2010878:	200f2a80 	call	200f2a8 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 201087c:	008080b4 	movhi	r2,514
 2010880:	109bb904 	addi	r2,r2,28388
 2010884:	10800017 	ldw	r2,0(r2)
 2010888:	1007883a 	mov	r3,r2
 201088c:	d0a79c17 	ldw	r2,-24976(gp)
 2010890:	10c0042e 	bgeu	r2,r3,20108a4 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 2010894:	008080b4 	movhi	r2,514
 2010898:	109bb904 	addi	r2,r2,28388
 201089c:	10800017 	ldw	r2,0(r2)
 20108a0:	d0a79c15 	stw	r2,-24976(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 20108a4:	008080b4 	movhi	r2,514
 20108a8:	109bb904 	addi	r2,r2,28388
 20108ac:	10800017 	ldw	r2,0(r2)
 20108b0:	1007883a 	mov	r3,r2
 20108b4:	d0a79d17 	ldw	r2,-24972(gp)
 20108b8:	10c0062e 	bgeu	r2,r3,20108d4 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 20108bc:	008080b4 	movhi	r2,514
 20108c0:	109bb904 	addi	r2,r2,28388
 20108c4:	10800017 	ldw	r2,0(r2)
 20108c8:	d0a79d15 	stw	r2,-24972(gp)
 20108cc:	00000106 	br	20108d4 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 20108d0:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 20108d4:	e037883a 	mov	sp,fp
 20108d8:	dfc00117 	ldw	ra,4(sp)
 20108dc:	df000017 	ldw	fp,0(sp)
 20108e0:	dec00204 	addi	sp,sp,8
 20108e4:	f800283a 	ret

020108e8 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 20108e8:	deffef04 	addi	sp,sp,-68
 20108ec:	dfc01015 	stw	ra,64(sp)
 20108f0:	df000f15 	stw	fp,60(sp)
 20108f4:	df000f04 	addi	fp,sp,60
 20108f8:	e13ffe15 	stw	r4,-8(fp)
 20108fc:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 2010900:	e0bfff17 	ldw	r2,-4(fp)
 2010904:	108002c4 	addi	r2,r2,11
 2010908:	108005f0 	cmpltui	r2,r2,23
 201090c:	1000051e 	bne	r2,zero,2010924 <_malloc_r+0x3c>
 2010910:	e0bfff17 	ldw	r2,-4(fp)
 2010914:	10c002c4 	addi	r3,r2,11
 2010918:	00bffe04 	movi	r2,-8
 201091c:	1884703a 	and	r2,r3,r2
 2010920:	00000106 	br	2010928 <_malloc_r+0x40>
 2010924:	00800404 	movi	r2,16
 2010928:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 201092c:	e0bffa17 	ldw	r2,-24(fp)
 2010930:	10000316 	blt	r2,zero,2010940 <_malloc_r+0x58>
 2010934:	e0fffa17 	ldw	r3,-24(fp)
 2010938:	e0bfff17 	ldw	r2,-4(fp)
 201093c:	1880052e 	bgeu	r3,r2,2010954 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 2010940:	e0bffe17 	ldw	r2,-8(fp)
 2010944:	00c00304 	movi	r3,12
 2010948:	10c00015 	stw	r3,0(r2)
    return 0;
 201094c:	0005883a 	mov	r2,zero
 2010950:	0002bf06 	br	2011450 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 2010954:	e13ffe17 	ldw	r4,-8(fp)
 2010958:	2017b4c0 	call	2017b4c <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 201095c:	e0bffa17 	ldw	r2,-24(fp)
 2010960:	10807e28 	cmpgeui	r2,r2,504
 2010964:	10003f1e 	bne	r2,zero,2010a64 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 2010968:	e0bffa17 	ldw	r2,-24(fp)
 201096c:	1004d0fa 	srli	r2,r2,3
 2010970:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 2010974:	e0bff217 	ldw	r2,-56(fp)
 2010978:	10800044 	addi	r2,r2,1
 201097c:	1085883a 	add	r2,r2,r2
 2010980:	1085883a 	add	r2,r2,r2
 2010984:	1087883a 	add	r3,r2,r2
 2010988:	008080b4 	movhi	r2,514
 201098c:	108e6704 	addi	r2,r2,14748
 2010990:	1885883a 	add	r2,r3,r2
 2010994:	10bffe04 	addi	r2,r2,-8
 2010998:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 201099c:	e0bff917 	ldw	r2,-28(fp)
 20109a0:	10800317 	ldw	r2,12(r2)
 20109a4:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 20109a8:	e0fff117 	ldw	r3,-60(fp)
 20109ac:	e0bff917 	ldw	r2,-28(fp)
 20109b0:	1880061e 	bne	r3,r2,20109cc <_malloc_r+0xe4>
    {
      q = next_bin(q);
 20109b4:	e0bff917 	ldw	r2,-28(fp)
 20109b8:	10800204 	addi	r2,r2,8
 20109bc:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 20109c0:	e0bff917 	ldw	r2,-28(fp)
 20109c4:	10800317 	ldw	r2,12(r2)
 20109c8:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 20109cc:	e0fff117 	ldw	r3,-60(fp)
 20109d0:	e0bff917 	ldw	r2,-28(fp)
 20109d4:	18801f26 	beq	r3,r2,2010a54 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 20109d8:	e0bff117 	ldw	r2,-60(fp)
 20109dc:	10c00117 	ldw	r3,4(r2)
 20109e0:	00bfff04 	movi	r2,-4
 20109e4:	1884703a 	and	r2,r3,r2
 20109e8:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 20109ec:	e0bff117 	ldw	r2,-60(fp)
 20109f0:	10800317 	ldw	r2,12(r2)
 20109f4:	e0bff815 	stw	r2,-32(fp)
 20109f8:	e0bff117 	ldw	r2,-60(fp)
 20109fc:	10800217 	ldw	r2,8(r2)
 2010a00:	e0bff715 	stw	r2,-36(fp)
 2010a04:	e0bff717 	ldw	r2,-36(fp)
 2010a08:	e0fff817 	ldw	r3,-32(fp)
 2010a0c:	10c00315 	stw	r3,12(r2)
 2010a10:	e0bff817 	ldw	r2,-32(fp)
 2010a14:	e0fff717 	ldw	r3,-36(fp)
 2010a18:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 2010a1c:	e0fff117 	ldw	r3,-60(fp)
 2010a20:	e0bffb17 	ldw	r2,-20(fp)
 2010a24:	1885883a 	add	r2,r3,r2
 2010a28:	e13ff117 	ldw	r4,-60(fp)
 2010a2c:	e0fffb17 	ldw	r3,-20(fp)
 2010a30:	20c7883a 	add	r3,r4,r3
 2010a34:	18c00117 	ldw	r3,4(r3)
 2010a38:	18c00054 	ori	r3,r3,1
 2010a3c:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 2010a40:	e13ffe17 	ldw	r4,-8(fp)
 2010a44:	2017c6c0 	call	2017c6c <__malloc_unlock>
      return chunk2mem(victim);
 2010a48:	e0bff117 	ldw	r2,-60(fp)
 2010a4c:	10800204 	addi	r2,r2,8
 2010a50:	00027f06 	br	2011450 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 2010a54:	e0bff217 	ldw	r2,-56(fp)
 2010a58:	10800084 	addi	r2,r2,2
 2010a5c:	e0bff215 	stw	r2,-56(fp)
 2010a60:	00007306 	br	2010c30 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 2010a64:	e0bffa17 	ldw	r2,-24(fp)
 2010a68:	1004d27a 	srli	r2,r2,9
 2010a6c:	1000031e 	bne	r2,zero,2010a7c <_malloc_r+0x194>
 2010a70:	e0bffa17 	ldw	r2,-24(fp)
 2010a74:	1004d0fa 	srli	r2,r2,3
 2010a78:	00002906 	br	2010b20 <_malloc_r+0x238>
 2010a7c:	e0bffa17 	ldw	r2,-24(fp)
 2010a80:	1004d27a 	srli	r2,r2,9
 2010a84:	10800168 	cmpgeui	r2,r2,5
 2010a88:	1000041e 	bne	r2,zero,2010a9c <_malloc_r+0x1b4>
 2010a8c:	e0bffa17 	ldw	r2,-24(fp)
 2010a90:	1004d1ba 	srli	r2,r2,6
 2010a94:	10800e04 	addi	r2,r2,56
 2010a98:	00002106 	br	2010b20 <_malloc_r+0x238>
 2010a9c:	e0bffa17 	ldw	r2,-24(fp)
 2010aa0:	1004d27a 	srli	r2,r2,9
 2010aa4:	10800568 	cmpgeui	r2,r2,21
 2010aa8:	1000041e 	bne	r2,zero,2010abc <_malloc_r+0x1d4>
 2010aac:	e0bffa17 	ldw	r2,-24(fp)
 2010ab0:	1004d27a 	srli	r2,r2,9
 2010ab4:	108016c4 	addi	r2,r2,91
 2010ab8:	00001906 	br	2010b20 <_malloc_r+0x238>
 2010abc:	e0bffa17 	ldw	r2,-24(fp)
 2010ac0:	1004d27a 	srli	r2,r2,9
 2010ac4:	10801568 	cmpgeui	r2,r2,85
 2010ac8:	1000041e 	bne	r2,zero,2010adc <_malloc_r+0x1f4>
 2010acc:	e0bffa17 	ldw	r2,-24(fp)
 2010ad0:	1004d33a 	srli	r2,r2,12
 2010ad4:	10801b84 	addi	r2,r2,110
 2010ad8:	00001106 	br	2010b20 <_malloc_r+0x238>
 2010adc:	e0bffa17 	ldw	r2,-24(fp)
 2010ae0:	1004d27a 	srli	r2,r2,9
 2010ae4:	10805568 	cmpgeui	r2,r2,341
 2010ae8:	1000041e 	bne	r2,zero,2010afc <_malloc_r+0x214>
 2010aec:	e0bffa17 	ldw	r2,-24(fp)
 2010af0:	1004d3fa 	srli	r2,r2,15
 2010af4:	10801dc4 	addi	r2,r2,119
 2010af8:	00000906 	br	2010b20 <_malloc_r+0x238>
 2010afc:	e0bffa17 	ldw	r2,-24(fp)
 2010b00:	1004d27a 	srli	r2,r2,9
 2010b04:	10815568 	cmpgeui	r2,r2,1365
 2010b08:	1000041e 	bne	r2,zero,2010b1c <_malloc_r+0x234>
 2010b0c:	e0bffa17 	ldw	r2,-24(fp)
 2010b10:	1004d4ba 	srli	r2,r2,18
 2010b14:	10801f04 	addi	r2,r2,124
 2010b18:	00000106 	br	2010b20 <_malloc_r+0x238>
 2010b1c:	00801f84 	movi	r2,126
 2010b20:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 2010b24:	e0bff217 	ldw	r2,-56(fp)
 2010b28:	10800044 	addi	r2,r2,1
 2010b2c:	1085883a 	add	r2,r2,r2
 2010b30:	1085883a 	add	r2,r2,r2
 2010b34:	1087883a 	add	r3,r2,r2
 2010b38:	008080b4 	movhi	r2,514
 2010b3c:	108e6704 	addi	r2,r2,14748
 2010b40:	1885883a 	add	r2,r3,r2
 2010b44:	10bffe04 	addi	r2,r2,-8
 2010b48:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 2010b4c:	e0bff317 	ldw	r2,-52(fp)
 2010b50:	10800317 	ldw	r2,12(r2)
 2010b54:	e0bff115 	stw	r2,-60(fp)
 2010b58:	00002f06 	br	2010c18 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 2010b5c:	e0bff117 	ldw	r2,-60(fp)
 2010b60:	10c00117 	ldw	r3,4(r2)
 2010b64:	00bfff04 	movi	r2,-4
 2010b68:	1884703a 	and	r2,r3,r2
 2010b6c:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 2010b70:	e0fffb17 	ldw	r3,-20(fp)
 2010b74:	e0bffa17 	ldw	r2,-24(fp)
 2010b78:	1885c83a 	sub	r2,r3,r2
 2010b7c:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 2010b80:	e0bff417 	ldw	r2,-48(fp)
 2010b84:	10800410 	cmplti	r2,r2,16
 2010b88:	1000041e 	bne	r2,zero,2010b9c <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 2010b8c:	e0bff217 	ldw	r2,-56(fp)
 2010b90:	10bfffc4 	addi	r2,r2,-1
 2010b94:	e0bff215 	stw	r2,-56(fp)
        break;   
 2010b98:	00002206 	br	2010c24 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 2010b9c:	e0bff417 	ldw	r2,-48(fp)
 2010ba0:	10001a16 	blt	r2,zero,2010c0c <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 2010ba4:	e0bff117 	ldw	r2,-60(fp)
 2010ba8:	10800317 	ldw	r2,12(r2)
 2010bac:	e0bff815 	stw	r2,-32(fp)
 2010bb0:	e0bff117 	ldw	r2,-60(fp)
 2010bb4:	10800217 	ldw	r2,8(r2)
 2010bb8:	e0bff715 	stw	r2,-36(fp)
 2010bbc:	e0bff717 	ldw	r2,-36(fp)
 2010bc0:	e0fff817 	ldw	r3,-32(fp)
 2010bc4:	10c00315 	stw	r3,12(r2)
 2010bc8:	e0bff817 	ldw	r2,-32(fp)
 2010bcc:	e0fff717 	ldw	r3,-36(fp)
 2010bd0:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 2010bd4:	e0fff117 	ldw	r3,-60(fp)
 2010bd8:	e0bffb17 	ldw	r2,-20(fp)
 2010bdc:	1885883a 	add	r2,r3,r2
 2010be0:	e13ff117 	ldw	r4,-60(fp)
 2010be4:	e0fffb17 	ldw	r3,-20(fp)
 2010be8:	20c7883a 	add	r3,r4,r3
 2010bec:	18c00117 	ldw	r3,4(r3)
 2010bf0:	18c00054 	ori	r3,r3,1
 2010bf4:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 2010bf8:	e13ffe17 	ldw	r4,-8(fp)
 2010bfc:	2017c6c0 	call	2017c6c <__malloc_unlock>
        return chunk2mem(victim);
 2010c00:	e0bff117 	ldw	r2,-60(fp)
 2010c04:	10800204 	addi	r2,r2,8
 2010c08:	00021106 	br	2011450 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 2010c0c:	e0bff117 	ldw	r2,-60(fp)
 2010c10:	10800317 	ldw	r2,12(r2)
 2010c14:	e0bff115 	stw	r2,-60(fp)
 2010c18:	e0fff117 	ldw	r3,-60(fp)
 2010c1c:	e0bff317 	ldw	r2,-52(fp)
 2010c20:	18bfce1e 	bne	r3,r2,2010b5c <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 2010c24:	e0bff217 	ldw	r2,-56(fp)
 2010c28:	10800044 	addi	r2,r2,1
 2010c2c:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 2010c30:	008080b4 	movhi	r2,514
 2010c34:	108e6904 	addi	r2,r2,14756
 2010c38:	10800217 	ldw	r2,8(r2)
 2010c3c:	e0bff115 	stw	r2,-60(fp)
 2010c40:	008080b4 	movhi	r2,514
 2010c44:	108e6904 	addi	r2,r2,14756
 2010c48:	e0fff117 	ldw	r3,-60(fp)
 2010c4c:	1880e626 	beq	r3,r2,2010fe8 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 2010c50:	e0bff117 	ldw	r2,-60(fp)
 2010c54:	10c00117 	ldw	r3,4(r2)
 2010c58:	00bfff04 	movi	r2,-4
 2010c5c:	1884703a 	and	r2,r3,r2
 2010c60:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 2010c64:	e0fffb17 	ldw	r3,-20(fp)
 2010c68:	e0bffa17 	ldw	r2,-24(fp)
 2010c6c:	1885c83a 	sub	r2,r3,r2
 2010c70:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 2010c74:	e0bff417 	ldw	r2,-48(fp)
 2010c78:	10800410 	cmplti	r2,r2,16
 2010c7c:	1000271e 	bne	r2,zero,2010d1c <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 2010c80:	e0fff117 	ldw	r3,-60(fp)
 2010c84:	e0bffa17 	ldw	r2,-24(fp)
 2010c88:	1885883a 	add	r2,r3,r2
 2010c8c:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 2010c90:	e0bffa17 	ldw	r2,-24(fp)
 2010c94:	10c00054 	ori	r3,r2,1
 2010c98:	e0bff117 	ldw	r2,-60(fp)
 2010c9c:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 2010ca0:	00c080b4 	movhi	r3,514
 2010ca4:	18ce6904 	addi	r3,r3,14756
 2010ca8:	008080b4 	movhi	r2,514
 2010cac:	108e6904 	addi	r2,r2,14756
 2010cb0:	e13ffc17 	ldw	r4,-16(fp)
 2010cb4:	11000315 	stw	r4,12(r2)
 2010cb8:	10800317 	ldw	r2,12(r2)
 2010cbc:	18800215 	stw	r2,8(r3)
 2010cc0:	008080b4 	movhi	r2,514
 2010cc4:	108e6904 	addi	r2,r2,14756
 2010cc8:	e0fffc17 	ldw	r3,-16(fp)
 2010ccc:	18800315 	stw	r2,12(r3)
 2010cd0:	e0bffc17 	ldw	r2,-16(fp)
 2010cd4:	10c00317 	ldw	r3,12(r2)
 2010cd8:	e0bffc17 	ldw	r2,-16(fp)
 2010cdc:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 2010ce0:	e0bff417 	ldw	r2,-48(fp)
 2010ce4:	10800054 	ori	r2,r2,1
 2010ce8:	1007883a 	mov	r3,r2
 2010cec:	e0bffc17 	ldw	r2,-16(fp)
 2010cf0:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 2010cf4:	e0bff417 	ldw	r2,-48(fp)
 2010cf8:	e0fffc17 	ldw	r3,-16(fp)
 2010cfc:	1885883a 	add	r2,r3,r2
 2010d00:	e0fff417 	ldw	r3,-48(fp)
 2010d04:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 2010d08:	e13ffe17 	ldw	r4,-8(fp)
 2010d0c:	2017c6c0 	call	2017c6c <__malloc_unlock>
      return chunk2mem(victim);
 2010d10:	e0bff117 	ldw	r2,-60(fp)
 2010d14:	10800204 	addi	r2,r2,8
 2010d18:	0001cd06 	br	2011450 <_malloc_r+0xb68>
    }

    clear_last_remainder;
 2010d1c:	00c080b4 	movhi	r3,514
 2010d20:	18ce6904 	addi	r3,r3,14756
 2010d24:	008080b4 	movhi	r2,514
 2010d28:	108e6904 	addi	r2,r2,14756
 2010d2c:	010080b4 	movhi	r4,514
 2010d30:	210e6904 	addi	r4,r4,14756
 2010d34:	11000315 	stw	r4,12(r2)
 2010d38:	10800317 	ldw	r2,12(r2)
 2010d3c:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 2010d40:	e0bff417 	ldw	r2,-48(fp)
 2010d44:	10000e16 	blt	r2,zero,2010d80 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 2010d48:	e0fff117 	ldw	r3,-60(fp)
 2010d4c:	e0bffb17 	ldw	r2,-20(fp)
 2010d50:	1885883a 	add	r2,r3,r2
 2010d54:	e13ff117 	ldw	r4,-60(fp)
 2010d58:	e0fffb17 	ldw	r3,-20(fp)
 2010d5c:	20c7883a 	add	r3,r4,r3
 2010d60:	18c00117 	ldw	r3,4(r3)
 2010d64:	18c00054 	ori	r3,r3,1
 2010d68:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 2010d6c:	e13ffe17 	ldw	r4,-8(fp)
 2010d70:	2017c6c0 	call	2017c6c <__malloc_unlock>
      return chunk2mem(victim);
 2010d74:	e0bff117 	ldw	r2,-60(fp)
 2010d78:	10800204 	addi	r2,r2,8
 2010d7c:	0001b406 	br	2011450 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 2010d80:	e0bffb17 	ldw	r2,-20(fp)
 2010d84:	10808028 	cmpgeui	r2,r2,512
 2010d88:	10002c1e 	bne	r2,zero,2010e3c <_malloc_r+0x554>
 2010d8c:	e0bffb17 	ldw	r2,-20(fp)
 2010d90:	1004d0fa 	srli	r2,r2,3
 2010d94:	e0bffd15 	stw	r2,-12(fp)
 2010d98:	00c080b4 	movhi	r3,514
 2010d9c:	18ce6704 	addi	r3,r3,14748
 2010da0:	008080b4 	movhi	r2,514
 2010da4:	108e6704 	addi	r2,r2,14748
 2010da8:	11000117 	ldw	r4,4(r2)
 2010dac:	e0bffd17 	ldw	r2,-12(fp)
 2010db0:	1000010e 	bge	r2,zero,2010db8 <_malloc_r+0x4d0>
 2010db4:	108000c4 	addi	r2,r2,3
 2010db8:	1005d0ba 	srai	r2,r2,2
 2010dbc:	100b883a 	mov	r5,r2
 2010dc0:	00800044 	movi	r2,1
 2010dc4:	1144983a 	sll	r2,r2,r5
 2010dc8:	2084b03a 	or	r2,r4,r2
 2010dcc:	18800115 	stw	r2,4(r3)
 2010dd0:	e0bffd17 	ldw	r2,-12(fp)
 2010dd4:	10800044 	addi	r2,r2,1
 2010dd8:	1085883a 	add	r2,r2,r2
 2010ddc:	1085883a 	add	r2,r2,r2
 2010de0:	1087883a 	add	r3,r2,r2
 2010de4:	008080b4 	movhi	r2,514
 2010de8:	108e6704 	addi	r2,r2,14748
 2010dec:	1885883a 	add	r2,r3,r2
 2010df0:	10bffe04 	addi	r2,r2,-8
 2010df4:	e0bff815 	stw	r2,-32(fp)
 2010df8:	e0bff817 	ldw	r2,-32(fp)
 2010dfc:	10800217 	ldw	r2,8(r2)
 2010e00:	e0bff715 	stw	r2,-36(fp)
 2010e04:	e0bff117 	ldw	r2,-60(fp)
 2010e08:	e0fff817 	ldw	r3,-32(fp)
 2010e0c:	10c00315 	stw	r3,12(r2)
 2010e10:	e0bff117 	ldw	r2,-60(fp)
 2010e14:	e0fff717 	ldw	r3,-36(fp)
 2010e18:	10c00215 	stw	r3,8(r2)
 2010e1c:	e0bff817 	ldw	r2,-32(fp)
 2010e20:	e0fff117 	ldw	r3,-60(fp)
 2010e24:	10c00215 	stw	r3,8(r2)
 2010e28:	e0bff817 	ldw	r2,-32(fp)
 2010e2c:	10c00217 	ldw	r3,8(r2)
 2010e30:	e0bff717 	ldw	r2,-36(fp)
 2010e34:	10c00315 	stw	r3,12(r2)
 2010e38:	00006b06 	br	2010fe8 <_malloc_r+0x700>
 2010e3c:	e0bffb17 	ldw	r2,-20(fp)
 2010e40:	1004d27a 	srli	r2,r2,9
 2010e44:	1000031e 	bne	r2,zero,2010e54 <_malloc_r+0x56c>
 2010e48:	e0bffb17 	ldw	r2,-20(fp)
 2010e4c:	1004d0fa 	srli	r2,r2,3
 2010e50:	00002906 	br	2010ef8 <_malloc_r+0x610>
 2010e54:	e0bffb17 	ldw	r2,-20(fp)
 2010e58:	1004d27a 	srli	r2,r2,9
 2010e5c:	10800168 	cmpgeui	r2,r2,5
 2010e60:	1000041e 	bne	r2,zero,2010e74 <_malloc_r+0x58c>
 2010e64:	e0bffb17 	ldw	r2,-20(fp)
 2010e68:	1004d1ba 	srli	r2,r2,6
 2010e6c:	10800e04 	addi	r2,r2,56
 2010e70:	00002106 	br	2010ef8 <_malloc_r+0x610>
 2010e74:	e0bffb17 	ldw	r2,-20(fp)
 2010e78:	1004d27a 	srli	r2,r2,9
 2010e7c:	10800568 	cmpgeui	r2,r2,21
 2010e80:	1000041e 	bne	r2,zero,2010e94 <_malloc_r+0x5ac>
 2010e84:	e0bffb17 	ldw	r2,-20(fp)
 2010e88:	1004d27a 	srli	r2,r2,9
 2010e8c:	108016c4 	addi	r2,r2,91
 2010e90:	00001906 	br	2010ef8 <_malloc_r+0x610>
 2010e94:	e0bffb17 	ldw	r2,-20(fp)
 2010e98:	1004d27a 	srli	r2,r2,9
 2010e9c:	10801568 	cmpgeui	r2,r2,85
 2010ea0:	1000041e 	bne	r2,zero,2010eb4 <_malloc_r+0x5cc>
 2010ea4:	e0bffb17 	ldw	r2,-20(fp)
 2010ea8:	1004d33a 	srli	r2,r2,12
 2010eac:	10801b84 	addi	r2,r2,110
 2010eb0:	00001106 	br	2010ef8 <_malloc_r+0x610>
 2010eb4:	e0bffb17 	ldw	r2,-20(fp)
 2010eb8:	1004d27a 	srli	r2,r2,9
 2010ebc:	10805568 	cmpgeui	r2,r2,341
 2010ec0:	1000041e 	bne	r2,zero,2010ed4 <_malloc_r+0x5ec>
 2010ec4:	e0bffb17 	ldw	r2,-20(fp)
 2010ec8:	1004d3fa 	srli	r2,r2,15
 2010ecc:	10801dc4 	addi	r2,r2,119
 2010ed0:	00000906 	br	2010ef8 <_malloc_r+0x610>
 2010ed4:	e0bffb17 	ldw	r2,-20(fp)
 2010ed8:	1004d27a 	srli	r2,r2,9
 2010edc:	10815568 	cmpgeui	r2,r2,1365
 2010ee0:	1000041e 	bne	r2,zero,2010ef4 <_malloc_r+0x60c>
 2010ee4:	e0bffb17 	ldw	r2,-20(fp)
 2010ee8:	1004d4ba 	srli	r2,r2,18
 2010eec:	10801f04 	addi	r2,r2,124
 2010ef0:	00000106 	br	2010ef8 <_malloc_r+0x610>
 2010ef4:	00801f84 	movi	r2,126
 2010ef8:	e0bffd15 	stw	r2,-12(fp)
 2010efc:	e0bffd17 	ldw	r2,-12(fp)
 2010f00:	10800044 	addi	r2,r2,1
 2010f04:	1085883a 	add	r2,r2,r2
 2010f08:	1085883a 	add	r2,r2,r2
 2010f0c:	1087883a 	add	r3,r2,r2
 2010f10:	008080b4 	movhi	r2,514
 2010f14:	108e6704 	addi	r2,r2,14748
 2010f18:	1885883a 	add	r2,r3,r2
 2010f1c:	10bffe04 	addi	r2,r2,-8
 2010f20:	e0bff815 	stw	r2,-32(fp)
 2010f24:	e0bff817 	ldw	r2,-32(fp)
 2010f28:	10800217 	ldw	r2,8(r2)
 2010f2c:	e0bff715 	stw	r2,-36(fp)
 2010f30:	e0fff717 	ldw	r3,-36(fp)
 2010f34:	e0bff817 	ldw	r2,-32(fp)
 2010f38:	1880121e 	bne	r3,r2,2010f84 <_malloc_r+0x69c>
 2010f3c:	00c080b4 	movhi	r3,514
 2010f40:	18ce6704 	addi	r3,r3,14748
 2010f44:	008080b4 	movhi	r2,514
 2010f48:	108e6704 	addi	r2,r2,14748
 2010f4c:	11000117 	ldw	r4,4(r2)
 2010f50:	e0bffd17 	ldw	r2,-12(fp)
 2010f54:	1000010e 	bge	r2,zero,2010f5c <_malloc_r+0x674>
 2010f58:	108000c4 	addi	r2,r2,3
 2010f5c:	1005d0ba 	srai	r2,r2,2
 2010f60:	100b883a 	mov	r5,r2
 2010f64:	00800044 	movi	r2,1
 2010f68:	1144983a 	sll	r2,r2,r5
 2010f6c:	2084b03a 	or	r2,r4,r2
 2010f70:	18800115 	stw	r2,4(r3)
 2010f74:	00000f06 	br	2010fb4 <_malloc_r+0x6cc>
 2010f78:	e0bff717 	ldw	r2,-36(fp)
 2010f7c:	10800217 	ldw	r2,8(r2)
 2010f80:	e0bff715 	stw	r2,-36(fp)
 2010f84:	e0fff717 	ldw	r3,-36(fp)
 2010f88:	e0bff817 	ldw	r2,-32(fp)
 2010f8c:	18800626 	beq	r3,r2,2010fa8 <_malloc_r+0x6c0>
 2010f90:	e0bff717 	ldw	r2,-36(fp)
 2010f94:	10c00117 	ldw	r3,4(r2)
 2010f98:	00bfff04 	movi	r2,-4
 2010f9c:	1884703a 	and	r2,r3,r2
 2010fa0:	e0fffb17 	ldw	r3,-20(fp)
 2010fa4:	18bff436 	bltu	r3,r2,2010f78 <_malloc_r+0x690>
 2010fa8:	e0bff717 	ldw	r2,-36(fp)
 2010fac:	10800317 	ldw	r2,12(r2)
 2010fb0:	e0bff815 	stw	r2,-32(fp)
 2010fb4:	e0bff117 	ldw	r2,-60(fp)
 2010fb8:	e0fff817 	ldw	r3,-32(fp)
 2010fbc:	10c00315 	stw	r3,12(r2)
 2010fc0:	e0bff117 	ldw	r2,-60(fp)
 2010fc4:	e0fff717 	ldw	r3,-36(fp)
 2010fc8:	10c00215 	stw	r3,8(r2)
 2010fcc:	e0bff817 	ldw	r2,-32(fp)
 2010fd0:	e0fff117 	ldw	r3,-60(fp)
 2010fd4:	10c00215 	stw	r3,8(r2)
 2010fd8:	e0bff817 	ldw	r2,-32(fp)
 2010fdc:	10c00217 	ldw	r3,8(r2)
 2010fe0:	e0bff717 	ldw	r2,-36(fp)
 2010fe4:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 2010fe8:	e0bff217 	ldw	r2,-56(fp)
 2010fec:	1000010e 	bge	r2,zero,2010ff4 <_malloc_r+0x70c>
 2010ff0:	108000c4 	addi	r2,r2,3
 2010ff4:	1005d0ba 	srai	r2,r2,2
 2010ff8:	1007883a 	mov	r3,r2
 2010ffc:	00800044 	movi	r2,1
 2011000:	10c4983a 	sll	r2,r2,r3
 2011004:	e0bff515 	stw	r2,-44(fp)
 2011008:	008080b4 	movhi	r2,514
 201100c:	108e6704 	addi	r2,r2,14748
 2011010:	10c00117 	ldw	r3,4(r2)
 2011014:	e0bff517 	ldw	r2,-44(fp)
 2011018:	1880c636 	bltu	r3,r2,2011334 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 201101c:	008080b4 	movhi	r2,514
 2011020:	108e6704 	addi	r2,r2,14748
 2011024:	10c00117 	ldw	r3,4(r2)
 2011028:	e0bff517 	ldw	r2,-44(fp)
 201102c:	1884703a 	and	r2,r3,r2
 2011030:	1000151e 	bne	r2,zero,2011088 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 2011034:	e0fff217 	ldw	r3,-56(fp)
 2011038:	00bfff04 	movi	r2,-4
 201103c:	1884703a 	and	r2,r3,r2
 2011040:	10800104 	addi	r2,r2,4
 2011044:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 2011048:	e0bff517 	ldw	r2,-44(fp)
 201104c:	1085883a 	add	r2,r2,r2
 2011050:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 2011054:	00000606 	br	2011070 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 2011058:	e0bff217 	ldw	r2,-56(fp)
 201105c:	10800104 	addi	r2,r2,4
 2011060:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 2011064:	e0bff517 	ldw	r2,-44(fp)
 2011068:	1085883a 	add	r2,r2,r2
 201106c:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 2011070:	008080b4 	movhi	r2,514
 2011074:	108e6704 	addi	r2,r2,14748
 2011078:	10c00117 	ldw	r3,4(r2)
 201107c:	e0bff517 	ldw	r2,-44(fp)
 2011080:	1884703a 	and	r2,r3,r2
 2011084:	103ff426 	beq	r2,zero,2011058 <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 2011088:	e0bff217 	ldw	r2,-56(fp)
 201108c:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 2011090:	e0bff217 	ldw	r2,-56(fp)
 2011094:	10800044 	addi	r2,r2,1
 2011098:	1085883a 	add	r2,r2,r2
 201109c:	1085883a 	add	r2,r2,r2
 20110a0:	1087883a 	add	r3,r2,r2
 20110a4:	008080b4 	movhi	r2,514
 20110a8:	108e6704 	addi	r2,r2,14748
 20110ac:	1885883a 	add	r2,r3,r2
 20110b0:	10bffe04 	addi	r2,r2,-8
 20110b4:	e0bff315 	stw	r2,-52(fp)
 20110b8:	e0bff317 	ldw	r2,-52(fp)
 20110bc:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 20110c0:	e0bff317 	ldw	r2,-52(fp)
 20110c4:	10800317 	ldw	r2,12(r2)
 20110c8:	e0bff115 	stw	r2,-60(fp)
 20110cc:	00005e06 	br	2011248 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 20110d0:	e0bff117 	ldw	r2,-60(fp)
 20110d4:	10c00117 	ldw	r3,4(r2)
 20110d8:	00bfff04 	movi	r2,-4
 20110dc:	1884703a 	and	r2,r3,r2
 20110e0:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 20110e4:	e0fffb17 	ldw	r3,-20(fp)
 20110e8:	e0bffa17 	ldw	r2,-24(fp)
 20110ec:	1885c83a 	sub	r2,r3,r2
 20110f0:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 20110f4:	e0bff417 	ldw	r2,-48(fp)
 20110f8:	10800410 	cmplti	r2,r2,16
 20110fc:	1000331e 	bne	r2,zero,20111cc <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 2011100:	e0fff117 	ldw	r3,-60(fp)
 2011104:	e0bffa17 	ldw	r2,-24(fp)
 2011108:	1885883a 	add	r2,r3,r2
 201110c:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 2011110:	e0bffa17 	ldw	r2,-24(fp)
 2011114:	10c00054 	ori	r3,r2,1
 2011118:	e0bff117 	ldw	r2,-60(fp)
 201111c:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 2011120:	e0bff117 	ldw	r2,-60(fp)
 2011124:	10800317 	ldw	r2,12(r2)
 2011128:	e0bff815 	stw	r2,-32(fp)
 201112c:	e0bff117 	ldw	r2,-60(fp)
 2011130:	10800217 	ldw	r2,8(r2)
 2011134:	e0bff715 	stw	r2,-36(fp)
 2011138:	e0bff717 	ldw	r2,-36(fp)
 201113c:	e0fff817 	ldw	r3,-32(fp)
 2011140:	10c00315 	stw	r3,12(r2)
 2011144:	e0bff817 	ldw	r2,-32(fp)
 2011148:	e0fff717 	ldw	r3,-36(fp)
 201114c:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 2011150:	00c080b4 	movhi	r3,514
 2011154:	18ce6904 	addi	r3,r3,14756
 2011158:	008080b4 	movhi	r2,514
 201115c:	108e6904 	addi	r2,r2,14756
 2011160:	e13ffc17 	ldw	r4,-16(fp)
 2011164:	11000315 	stw	r4,12(r2)
 2011168:	10800317 	ldw	r2,12(r2)
 201116c:	18800215 	stw	r2,8(r3)
 2011170:	008080b4 	movhi	r2,514
 2011174:	108e6904 	addi	r2,r2,14756
 2011178:	e0fffc17 	ldw	r3,-16(fp)
 201117c:	18800315 	stw	r2,12(r3)
 2011180:	e0bffc17 	ldw	r2,-16(fp)
 2011184:	10c00317 	ldw	r3,12(r2)
 2011188:	e0bffc17 	ldw	r2,-16(fp)
 201118c:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 2011190:	e0bff417 	ldw	r2,-48(fp)
 2011194:	10800054 	ori	r2,r2,1
 2011198:	1007883a 	mov	r3,r2
 201119c:	e0bffc17 	ldw	r2,-16(fp)
 20111a0:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 20111a4:	e0bff417 	ldw	r2,-48(fp)
 20111a8:	e0fffc17 	ldw	r3,-16(fp)
 20111ac:	1885883a 	add	r2,r3,r2
 20111b0:	e0fff417 	ldw	r3,-48(fp)
 20111b4:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 20111b8:	e13ffe17 	ldw	r4,-8(fp)
 20111bc:	2017c6c0 	call	2017c6c <__malloc_unlock>
            return chunk2mem(victim);
 20111c0:	e0bff117 	ldw	r2,-60(fp)
 20111c4:	10800204 	addi	r2,r2,8
 20111c8:	0000a106 	br	2011450 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 20111cc:	e0bff417 	ldw	r2,-48(fp)
 20111d0:	10001a16 	blt	r2,zero,201123c <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 20111d4:	e0fff117 	ldw	r3,-60(fp)
 20111d8:	e0bffb17 	ldw	r2,-20(fp)
 20111dc:	1885883a 	add	r2,r3,r2
 20111e0:	e13ff117 	ldw	r4,-60(fp)
 20111e4:	e0fffb17 	ldw	r3,-20(fp)
 20111e8:	20c7883a 	add	r3,r4,r3
 20111ec:	18c00117 	ldw	r3,4(r3)
 20111f0:	18c00054 	ori	r3,r3,1
 20111f4:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 20111f8:	e0bff117 	ldw	r2,-60(fp)
 20111fc:	10800317 	ldw	r2,12(r2)
 2011200:	e0bff815 	stw	r2,-32(fp)
 2011204:	e0bff117 	ldw	r2,-60(fp)
 2011208:	10800217 	ldw	r2,8(r2)
 201120c:	e0bff715 	stw	r2,-36(fp)
 2011210:	e0bff717 	ldw	r2,-36(fp)
 2011214:	e0fff817 	ldw	r3,-32(fp)
 2011218:	10c00315 	stw	r3,12(r2)
 201121c:	e0bff817 	ldw	r2,-32(fp)
 2011220:	e0fff717 	ldw	r3,-36(fp)
 2011224:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 2011228:	e13ffe17 	ldw	r4,-8(fp)
 201122c:	2017c6c0 	call	2017c6c <__malloc_unlock>
            return chunk2mem(victim);
 2011230:	e0bff117 	ldw	r2,-60(fp)
 2011234:	10800204 	addi	r2,r2,8
 2011238:	00008506 	br	2011450 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 201123c:	e0bff117 	ldw	r2,-60(fp)
 2011240:	10800317 	ldw	r2,12(r2)
 2011244:	e0bff115 	stw	r2,-60(fp)
 2011248:	e0fff117 	ldw	r3,-60(fp)
 201124c:	e0bff317 	ldw	r2,-52(fp)
 2011250:	18bf9f1e 	bne	r3,r2,20110d0 <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 2011254:	e0bff317 	ldw	r2,-52(fp)
 2011258:	10800204 	addi	r2,r2,8
 201125c:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 2011260:	e0bff217 	ldw	r2,-56(fp)
 2011264:	10800044 	addi	r2,r2,1
 2011268:	e0bff215 	stw	r2,-56(fp)
 201126c:	e0bff217 	ldw	r2,-56(fp)
 2011270:	108000cc 	andi	r2,r2,3
 2011274:	103f921e 	bne	r2,zero,20110c0 <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 2011278:	e0bff617 	ldw	r2,-40(fp)
 201127c:	108000cc 	andi	r2,r2,3
 2011280:	10000a1e 	bne	r2,zero,20112ac <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 2011284:	008080b4 	movhi	r2,514
 2011288:	108e6704 	addi	r2,r2,14748
 201128c:	00c080b4 	movhi	r3,514
 2011290:	18ce6704 	addi	r3,r3,14748
 2011294:	19000117 	ldw	r4,4(r3)
 2011298:	e0fff517 	ldw	r3,-44(fp)
 201129c:	00c6303a 	nor	r3,zero,r3
 20112a0:	20c6703a 	and	r3,r4,r3
 20112a4:	10c00115 	stw	r3,4(r2)
          break;
 20112a8:	00000a06 	br	20112d4 <_malloc_r+0x9ec>
        }
        --startidx;
 20112ac:	e0bff617 	ldw	r2,-40(fp)
 20112b0:	10bfffc4 	addi	r2,r2,-1
 20112b4:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 20112b8:	e0bff917 	ldw	r2,-28(fp)
 20112bc:	10bffe04 	addi	r2,r2,-8
 20112c0:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 20112c4:	e0bff917 	ldw	r2,-28(fp)
 20112c8:	10c00217 	ldw	r3,8(r2)
 20112cc:	e0bff917 	ldw	r2,-28(fp)
 20112d0:	18bfe926 	beq	r3,r2,2011278 <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 20112d4:	e0bff517 	ldw	r2,-44(fp)
 20112d8:	1085883a 	add	r2,r2,r2
 20112dc:	e0bff515 	stw	r2,-44(fp)
 20112e0:	008080b4 	movhi	r2,514
 20112e4:	108e6704 	addi	r2,r2,14748
 20112e8:	10c00117 	ldw	r3,4(r2)
 20112ec:	e0bff517 	ldw	r2,-44(fp)
 20112f0:	18801036 	bltu	r3,r2,2011334 <_malloc_r+0xa4c>
 20112f4:	e0bff517 	ldw	r2,-44(fp)
 20112f8:	10000e26 	beq	r2,zero,2011334 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 20112fc:	00000606 	br	2011318 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 2011300:	e0bff217 	ldw	r2,-56(fp)
 2011304:	10800104 	addi	r2,r2,4
 2011308:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 201130c:	e0bff517 	ldw	r2,-44(fp)
 2011310:	1085883a 	add	r2,r2,r2
 2011314:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 2011318:	008080b4 	movhi	r2,514
 201131c:	108e6704 	addi	r2,r2,14748
 2011320:	10c00117 	ldw	r3,4(r2)
 2011324:	e0bff517 	ldw	r2,-44(fp)
 2011328:	1884703a 	and	r2,r3,r2
 201132c:	103ff426 	beq	r2,zero,2011300 <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 2011330:	003f5506 	br	2011088 <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 2011334:	008080b4 	movhi	r2,514
 2011338:	108e6704 	addi	r2,r2,14748
 201133c:	10800217 	ldw	r2,8(r2)
 2011340:	10c00117 	ldw	r3,4(r2)
 2011344:	00bfff04 	movi	r2,-4
 2011348:	1886703a 	and	r3,r3,r2
 201134c:	e0bffa17 	ldw	r2,-24(fp)
 2011350:	1885c83a 	sub	r2,r3,r2
 2011354:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 2011358:	008080b4 	movhi	r2,514
 201135c:	108e6704 	addi	r2,r2,14748
 2011360:	10800217 	ldw	r2,8(r2)
 2011364:	10c00117 	ldw	r3,4(r2)
 2011368:	00bfff04 	movi	r2,-4
 201136c:	1886703a 	and	r3,r3,r2
 2011370:	e0bffa17 	ldw	r2,-24(fp)
 2011374:	18800336 	bltu	r3,r2,2011384 <_malloc_r+0xa9c>
 2011378:	e0bff417 	ldw	r2,-48(fp)
 201137c:	10800408 	cmpgei	r2,r2,16
 2011380:	10001b1e 	bne	r2,zero,20113f0 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 2011384:	e17ffa17 	ldw	r5,-24(fp)
 2011388:	e13ffe17 	ldw	r4,-8(fp)
 201138c:	20105340 	call	2010534 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 2011390:	008080b4 	movhi	r2,514
 2011394:	108e6704 	addi	r2,r2,14748
 2011398:	10800217 	ldw	r2,8(r2)
 201139c:	10c00117 	ldw	r3,4(r2)
 20113a0:	00bfff04 	movi	r2,-4
 20113a4:	1886703a 	and	r3,r3,r2
 20113a8:	e0bffa17 	ldw	r2,-24(fp)
 20113ac:	1885c83a 	sub	r2,r3,r2
 20113b0:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 20113b4:	008080b4 	movhi	r2,514
 20113b8:	108e6704 	addi	r2,r2,14748
 20113bc:	10800217 	ldw	r2,8(r2)
 20113c0:	10c00117 	ldw	r3,4(r2)
 20113c4:	00bfff04 	movi	r2,-4
 20113c8:	1886703a 	and	r3,r3,r2
 20113cc:	e0bffa17 	ldw	r2,-24(fp)
 20113d0:	18800336 	bltu	r3,r2,20113e0 <_malloc_r+0xaf8>
 20113d4:	e0bff417 	ldw	r2,-48(fp)
 20113d8:	10800408 	cmpgei	r2,r2,16
 20113dc:	1000041e 	bne	r2,zero,20113f0 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 20113e0:	e13ffe17 	ldw	r4,-8(fp)
 20113e4:	2017c6c0 	call	2017c6c <__malloc_unlock>
      return 0; /* propagate failure */
 20113e8:	0005883a 	mov	r2,zero
 20113ec:	00001806 	br	2011450 <_malloc_r+0xb68>
    }
  }

  victim = top;
 20113f0:	008080b4 	movhi	r2,514
 20113f4:	108e6704 	addi	r2,r2,14748
 20113f8:	10800217 	ldw	r2,8(r2)
 20113fc:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 2011400:	e0bffa17 	ldw	r2,-24(fp)
 2011404:	10c00054 	ori	r3,r2,1
 2011408:	e0bff117 	ldw	r2,-60(fp)
 201140c:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 2011410:	008080b4 	movhi	r2,514
 2011414:	108e6704 	addi	r2,r2,14748
 2011418:	e13ff117 	ldw	r4,-60(fp)
 201141c:	e0fffa17 	ldw	r3,-24(fp)
 2011420:	20c7883a 	add	r3,r4,r3
 2011424:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 2011428:	008080b4 	movhi	r2,514
 201142c:	108e6704 	addi	r2,r2,14748
 2011430:	10800217 	ldw	r2,8(r2)
 2011434:	e0fff417 	ldw	r3,-48(fp)
 2011438:	18c00054 	ori	r3,r3,1
 201143c:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 2011440:	e13ffe17 	ldw	r4,-8(fp)
 2011444:	2017c6c0 	call	2017c6c <__malloc_unlock>
  return chunk2mem(victim);
 2011448:	e0bff117 	ldw	r2,-60(fp)
 201144c:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 2011450:	e037883a 	mov	sp,fp
 2011454:	dfc00117 	ldw	ra,4(sp)
 2011458:	df000017 	ldw	fp,0(sp)
 201145c:	dec00204 	addi	sp,sp,8
 2011460:	f800283a 	ret

02011464 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 2011464:	defff704 	addi	sp,sp,-36
 2011468:	df000815 	stw	fp,32(sp)
 201146c:	df000804 	addi	fp,sp,32
 2011470:	e13ffd15 	stw	r4,-12(fp)
 2011474:	e17ffe15 	stw	r5,-8(fp)
 2011478:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 201147c:	e0bffd17 	ldw	r2,-12(fp)
 2011480:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 2011484:	e0bffe17 	ldw	r2,-8(fp)
 2011488:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 201148c:	00001006 	br	20114d0 <memchr+0x6c>
    {
      if (!length--)
 2011490:	e0bfff17 	ldw	r2,-4(fp)
 2011494:	10ffffc4 	addi	r3,r2,-1
 2011498:	e0ffff15 	stw	r3,-4(fp)
 201149c:	1000021e 	bne	r2,zero,20114a8 <memchr+0x44>
        return NULL;
 20114a0:	0005883a 	mov	r2,zero
 20114a4:	00005a06 	br	2011610 <memchr+0x1ac>
      if (*src == d)
 20114a8:	e0bff817 	ldw	r2,-32(fp)
 20114ac:	10800003 	ldbu	r2,0(r2)
 20114b0:	10c03fcc 	andi	r3,r2,255
 20114b4:	e0bffc03 	ldbu	r2,-16(fp)
 20114b8:	1880021e 	bne	r3,r2,20114c4 <memchr+0x60>
        return (void *) src;
 20114bc:	e0bff817 	ldw	r2,-32(fp)
 20114c0:	00005306 	br	2011610 <memchr+0x1ac>
      src++;
 20114c4:	e0bff817 	ldw	r2,-32(fp)
 20114c8:	10800044 	addi	r2,r2,1
 20114cc:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 20114d0:	e0bff817 	ldw	r2,-32(fp)
 20114d4:	108000cc 	andi	r2,r2,3
 20114d8:	103fed1e 	bne	r2,zero,2011490 <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 20114dc:	e0bfff17 	ldw	r2,-4(fp)
 20114e0:	10800130 	cmpltui	r2,r2,4
 20114e4:	1000451e 	bne	r2,zero,20115fc <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 20114e8:	e0bff817 	ldw	r2,-32(fp)
 20114ec:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 20114f0:	e0bffc03 	ldbu	r2,-16(fp)
 20114f4:	1006923a 	slli	r3,r2,8
 20114f8:	e0bffc03 	ldbu	r2,-16(fp)
 20114fc:	1884b03a 	or	r2,r3,r2
 2011500:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 2011504:	e0bffa17 	ldw	r2,-24(fp)
 2011508:	1004943a 	slli	r2,r2,16
 201150c:	e0fffa17 	ldw	r3,-24(fp)
 2011510:	1884b03a 	or	r2,r3,r2
 2011514:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2011518:	00800804 	movi	r2,32
 201151c:	e0bffb15 	stw	r2,-20(fp)
 2011520:	00000906 	br	2011548 <memchr+0xe4>
        mask = (mask << i) | mask;
 2011524:	e0fffa17 	ldw	r3,-24(fp)
 2011528:	e0bffb17 	ldw	r2,-20(fp)
 201152c:	1884983a 	sll	r2,r3,r2
 2011530:	e0fffa17 	ldw	r3,-24(fp)
 2011534:	1884b03a 	or	r2,r3,r2
 2011538:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 201153c:	e0bffb17 	ldw	r2,-20(fp)
 2011540:	1085883a 	add	r2,r2,r2
 2011544:	e0bffb15 	stw	r2,-20(fp)
 2011548:	e0bffb17 	ldw	r2,-20(fp)
 201154c:	10800830 	cmpltui	r2,r2,32
 2011550:	103ff41e 	bne	r2,zero,2011524 <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 2011554:	00001706 	br	20115b4 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 2011558:	e0bff917 	ldw	r2,-28(fp)
 201155c:	10c00017 	ldw	r3,0(r2)
 2011560:	e0bffa17 	ldw	r2,-24(fp)
 2011564:	1886f03a 	xor	r3,r3,r2
 2011568:	00bfbff4 	movhi	r2,65279
 201156c:	10bfbfc4 	addi	r2,r2,-257
 2011570:	1887883a 	add	r3,r3,r2
 2011574:	e0bff917 	ldw	r2,-28(fp)
 2011578:	11000017 	ldw	r4,0(r2)
 201157c:	e0bffa17 	ldw	r2,-24(fp)
 2011580:	2084f03a 	xor	r2,r4,r2
 2011584:	0084303a 	nor	r2,zero,r2
 2011588:	1886703a 	and	r3,r3,r2
 201158c:	00a02074 	movhi	r2,32897
 2011590:	10a02004 	addi	r2,r2,-32640
 2011594:	1884703a 	and	r2,r3,r2
 2011598:	10000a1e 	bne	r2,zero,20115c4 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 201159c:	e0bfff17 	ldw	r2,-4(fp)
 20115a0:	10bfff04 	addi	r2,r2,-4
 20115a4:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 20115a8:	e0bff917 	ldw	r2,-28(fp)
 20115ac:	10800104 	addi	r2,r2,4
 20115b0:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 20115b4:	e0bfff17 	ldw	r2,-4(fp)
 20115b8:	10800128 	cmpgeui	r2,r2,4
 20115bc:	103fe61e 	bne	r2,zero,2011558 <memchr+0xf4>
 20115c0:	00000106 	br	20115c8 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 20115c4:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 20115c8:	e0bff917 	ldw	r2,-28(fp)
 20115cc:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 20115d0:	00000a06 	br	20115fc <memchr+0x198>
    {
      if (*src == d)
 20115d4:	e0bff817 	ldw	r2,-32(fp)
 20115d8:	10800003 	ldbu	r2,0(r2)
 20115dc:	10c03fcc 	andi	r3,r2,255
 20115e0:	e0bffc03 	ldbu	r2,-16(fp)
 20115e4:	1880021e 	bne	r3,r2,20115f0 <memchr+0x18c>
        return (void *) src;
 20115e8:	e0bff817 	ldw	r2,-32(fp)
 20115ec:	00000806 	br	2011610 <memchr+0x1ac>
      src++;
 20115f0:	e0bff817 	ldw	r2,-32(fp)
 20115f4:	10800044 	addi	r2,r2,1
 20115f8:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 20115fc:	e0bfff17 	ldw	r2,-4(fp)
 2011600:	10ffffc4 	addi	r3,r2,-1
 2011604:	e0ffff15 	stw	r3,-4(fp)
 2011608:	103ff21e 	bne	r2,zero,20115d4 <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 201160c:	0005883a 	mov	r2,zero
}
 2011610:	e037883a 	mov	sp,fp
 2011614:	df000017 	ldw	fp,0(sp)
 2011618:	dec00104 	addi	sp,sp,4
 201161c:	f800283a 	ret

02011620 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 2011620:	defff804 	addi	sp,sp,-32
 2011624:	df000715 	stw	fp,28(sp)
 2011628:	df000704 	addi	fp,sp,28
 201162c:	e13ffd15 	stw	r4,-12(fp)
 2011630:	e17ffe15 	stw	r5,-8(fp)
 2011634:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 2011638:	e0bffd17 	ldw	r2,-12(fp)
 201163c:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 2011640:	e0bffe17 	ldw	r2,-8(fp)
 2011644:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 2011648:	e0fffa17 	ldw	r3,-24(fp)
 201164c:	e0bff917 	ldw	r2,-28(fp)
 2011650:	18801d2e 	bgeu	r3,r2,20116c8 <memmove+0xa8>
 2011654:	e0fffa17 	ldw	r3,-24(fp)
 2011658:	e0bfff17 	ldw	r2,-4(fp)
 201165c:	1885883a 	add	r2,r3,r2
 2011660:	e0fff917 	ldw	r3,-28(fp)
 2011664:	1880182e 	bgeu	r3,r2,20116c8 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 2011668:	e0fffa17 	ldw	r3,-24(fp)
 201166c:	e0bfff17 	ldw	r2,-4(fp)
 2011670:	1885883a 	add	r2,r3,r2
 2011674:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 2011678:	e0fff917 	ldw	r3,-28(fp)
 201167c:	e0bfff17 	ldw	r2,-4(fp)
 2011680:	1885883a 	add	r2,r3,r2
 2011684:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 2011688:	00000a06 	br	20116b4 <memmove+0x94>
	{
	  *--dst = *--src;
 201168c:	e0bff917 	ldw	r2,-28(fp)
 2011690:	10bfffc4 	addi	r2,r2,-1
 2011694:	e0bff915 	stw	r2,-28(fp)
 2011698:	e0bffa17 	ldw	r2,-24(fp)
 201169c:	10bfffc4 	addi	r2,r2,-1
 20116a0:	e0bffa15 	stw	r2,-24(fp)
 20116a4:	e0bffa17 	ldw	r2,-24(fp)
 20116a8:	10c00003 	ldbu	r3,0(r2)
 20116ac:	e0bff917 	ldw	r2,-28(fp)
 20116b0:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 20116b4:	e0bfff17 	ldw	r2,-4(fp)
 20116b8:	10ffffc4 	addi	r3,r2,-1
 20116bc:	e0ffff15 	stw	r3,-4(fp)
 20116c0:	103ff21e 	bne	r2,zero,201168c <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 20116c4:	00005306 	br	2011814 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 20116c8:	e0bfff17 	ldw	r2,-4(fp)
 20116cc:	10800430 	cmpltui	r2,r2,16
 20116d0:	10004c1e 	bne	r2,zero,2011804 <memmove+0x1e4>
 20116d4:	e0fffa17 	ldw	r3,-24(fp)
 20116d8:	e0bff917 	ldw	r2,-28(fp)
 20116dc:	1884b03a 	or	r2,r3,r2
 20116e0:	108000cc 	andi	r2,r2,3
 20116e4:	1000471e 	bne	r2,zero,2011804 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 20116e8:	e0bff917 	ldw	r2,-28(fp)
 20116ec:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 20116f0:	e0bffa17 	ldw	r2,-24(fp)
 20116f4:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 20116f8:	00002306 	br	2011788 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 20116fc:	e0bffb17 	ldw	r2,-20(fp)
 2011700:	10c00104 	addi	r3,r2,4
 2011704:	e0fffb15 	stw	r3,-20(fp)
 2011708:	e0fffc17 	ldw	r3,-16(fp)
 201170c:	19000104 	addi	r4,r3,4
 2011710:	e13ffc15 	stw	r4,-16(fp)
 2011714:	18c00017 	ldw	r3,0(r3)
 2011718:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 201171c:	e0bffb17 	ldw	r2,-20(fp)
 2011720:	10c00104 	addi	r3,r2,4
 2011724:	e0fffb15 	stw	r3,-20(fp)
 2011728:	e0fffc17 	ldw	r3,-16(fp)
 201172c:	19000104 	addi	r4,r3,4
 2011730:	e13ffc15 	stw	r4,-16(fp)
 2011734:	18c00017 	ldw	r3,0(r3)
 2011738:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 201173c:	e0bffb17 	ldw	r2,-20(fp)
 2011740:	10c00104 	addi	r3,r2,4
 2011744:	e0fffb15 	stw	r3,-20(fp)
 2011748:	e0fffc17 	ldw	r3,-16(fp)
 201174c:	19000104 	addi	r4,r3,4
 2011750:	e13ffc15 	stw	r4,-16(fp)
 2011754:	18c00017 	ldw	r3,0(r3)
 2011758:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 201175c:	e0bffb17 	ldw	r2,-20(fp)
 2011760:	10c00104 	addi	r3,r2,4
 2011764:	e0fffb15 	stw	r3,-20(fp)
 2011768:	e0fffc17 	ldw	r3,-16(fp)
 201176c:	19000104 	addi	r4,r3,4
 2011770:	e13ffc15 	stw	r4,-16(fp)
 2011774:	18c00017 	ldw	r3,0(r3)
 2011778:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 201177c:	e0bfff17 	ldw	r2,-4(fp)
 2011780:	10bffc04 	addi	r2,r2,-16
 2011784:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 2011788:	e0bfff17 	ldw	r2,-4(fp)
 201178c:	10800428 	cmpgeui	r2,r2,16
 2011790:	103fda1e 	bne	r2,zero,20116fc <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 2011794:	00000b06 	br	20117c4 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 2011798:	e0bffb17 	ldw	r2,-20(fp)
 201179c:	10c00104 	addi	r3,r2,4
 20117a0:	e0fffb15 	stw	r3,-20(fp)
 20117a4:	e0fffc17 	ldw	r3,-16(fp)
 20117a8:	19000104 	addi	r4,r3,4
 20117ac:	e13ffc15 	stw	r4,-16(fp)
 20117b0:	18c00017 	ldw	r3,0(r3)
 20117b4:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 20117b8:	e0bfff17 	ldw	r2,-4(fp)
 20117bc:	10bfff04 	addi	r2,r2,-4
 20117c0:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 20117c4:	e0bfff17 	ldw	r2,-4(fp)
 20117c8:	10800128 	cmpgeui	r2,r2,4
 20117cc:	103ff21e 	bne	r2,zero,2011798 <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 20117d0:	e0bffb17 	ldw	r2,-20(fp)
 20117d4:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 20117d8:	e0bffc17 	ldw	r2,-16(fp)
 20117dc:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 20117e0:	00000806 	br	2011804 <memmove+0x1e4>
        {
          *dst++ = *src++;
 20117e4:	e0bff917 	ldw	r2,-28(fp)
 20117e8:	10c00044 	addi	r3,r2,1
 20117ec:	e0fff915 	stw	r3,-28(fp)
 20117f0:	e0fffa17 	ldw	r3,-24(fp)
 20117f4:	19000044 	addi	r4,r3,1
 20117f8:	e13ffa15 	stw	r4,-24(fp)
 20117fc:	18c00003 	ldbu	r3,0(r3)
 2011800:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 2011804:	e0bfff17 	ldw	r2,-4(fp)
 2011808:	10ffffc4 	addi	r3,r2,-1
 201180c:	e0ffff15 	stw	r3,-4(fp)
 2011810:	103ff41e 	bne	r2,zero,20117e4 <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 2011814:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2011818:	e037883a 	mov	sp,fp
 201181c:	df000017 	ldw	fp,0(sp)
 2011820:	dec00104 	addi	sp,sp,4
 2011824:	f800283a 	ret

02011828 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 2011828:	defffa04 	addi	sp,sp,-24
 201182c:	dfc00515 	stw	ra,20(sp)
 2011830:	df000415 	stw	fp,16(sp)
 2011834:	df000404 	addi	fp,sp,16
 2011838:	e13ffe15 	stw	r4,-8(fp)
 201183c:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 2011840:	e0bffe17 	ldw	r2,-8(fp)
 2011844:	10801317 	ldw	r2,76(r2)
 2011848:	10000c1e 	bne	r2,zero,201187c <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 201184c:	01800844 	movi	r6,33
 2011850:	01400104 	movi	r5,4
 2011854:	e13ffe17 	ldw	r4,-8(fp)
 2011858:	20158b40 	call	20158b4 <_calloc_r>
 201185c:	1007883a 	mov	r3,r2
 2011860:	e0bffe17 	ldw	r2,-8(fp)
 2011864:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 2011868:	e0bffe17 	ldw	r2,-8(fp)
 201186c:	10801317 	ldw	r2,76(r2)
 2011870:	1000021e 	bne	r2,zero,201187c <_Balloc+0x54>
	{
	  return NULL;
 2011874:	0005883a 	mov	r2,zero
 2011878:	00003206 	br	2011944 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 201187c:	e0bffe17 	ldw	r2,-8(fp)
 2011880:	10c01317 	ldw	r3,76(r2)
 2011884:	e0bfff17 	ldw	r2,-4(fp)
 2011888:	1085883a 	add	r2,r2,r2
 201188c:	1085883a 	add	r2,r2,r2
 2011890:	1885883a 	add	r2,r3,r2
 2011894:	10800017 	ldw	r2,0(r2)
 2011898:	e0bffc15 	stw	r2,-16(fp)
 201189c:	e0bffc17 	ldw	r2,-16(fp)
 20118a0:	10000a26 	beq	r2,zero,20118cc <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 20118a4:	e0bffe17 	ldw	r2,-8(fp)
 20118a8:	10c01317 	ldw	r3,76(r2)
 20118ac:	e0bfff17 	ldw	r2,-4(fp)
 20118b0:	1085883a 	add	r2,r2,r2
 20118b4:	1085883a 	add	r2,r2,r2
 20118b8:	1885883a 	add	r2,r3,r2
 20118bc:	e0fffc17 	ldw	r3,-16(fp)
 20118c0:	18c00017 	ldw	r3,0(r3)
 20118c4:	10c00015 	stw	r3,0(r2)
 20118c8:	00001706 	br	2011928 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 20118cc:	00c00044 	movi	r3,1
 20118d0:	e0bfff17 	ldw	r2,-4(fp)
 20118d4:	1884983a 	sll	r2,r3,r2
 20118d8:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 20118dc:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 20118e0:	10800144 	addi	r2,r2,5
 20118e4:	1085883a 	add	r2,r2,r2
 20118e8:	1085883a 	add	r2,r2,r2
 20118ec:	100d883a 	mov	r6,r2
 20118f0:	01400044 	movi	r5,1
 20118f4:	e13ffe17 	ldw	r4,-8(fp)
 20118f8:	20158b40 	call	20158b4 <_calloc_r>
 20118fc:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 2011900:	e0bffc17 	ldw	r2,-16(fp)
 2011904:	1000021e 	bne	r2,zero,2011910 <_Balloc+0xe8>
 2011908:	0005883a 	mov	r2,zero
 201190c:	00000d06 	br	2011944 <_Balloc+0x11c>
      rv->_k = k;
 2011910:	e0bffc17 	ldw	r2,-16(fp)
 2011914:	e0ffff17 	ldw	r3,-4(fp)
 2011918:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 201191c:	e0bffc17 	ldw	r2,-16(fp)
 2011920:	e0fffd17 	ldw	r3,-12(fp)
 2011924:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 2011928:	e0bffc17 	ldw	r2,-16(fp)
 201192c:	10000415 	stw	zero,16(r2)
 2011930:	e0bffc17 	ldw	r2,-16(fp)
 2011934:	10c00417 	ldw	r3,16(r2)
 2011938:	e0bffc17 	ldw	r2,-16(fp)
 201193c:	10c00315 	stw	r3,12(r2)
  return rv;
 2011940:	e0bffc17 	ldw	r2,-16(fp)
}
 2011944:	e037883a 	mov	sp,fp
 2011948:	dfc00117 	ldw	ra,4(sp)
 201194c:	df000017 	ldw	fp,0(sp)
 2011950:	dec00204 	addi	sp,sp,8
 2011954:	f800283a 	ret

02011958 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 2011958:	defffd04 	addi	sp,sp,-12
 201195c:	df000215 	stw	fp,8(sp)
 2011960:	df000204 	addi	fp,sp,8
 2011964:	e13ffe15 	stw	r4,-8(fp)
 2011968:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 201196c:	e0bfff17 	ldw	r2,-4(fp)
 2011970:	10001326 	beq	r2,zero,20119c0 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 2011974:	e0bffe17 	ldw	r2,-8(fp)
 2011978:	10c01317 	ldw	r3,76(r2)
 201197c:	e0bfff17 	ldw	r2,-4(fp)
 2011980:	10800117 	ldw	r2,4(r2)
 2011984:	1085883a 	add	r2,r2,r2
 2011988:	1085883a 	add	r2,r2,r2
 201198c:	1885883a 	add	r2,r3,r2
 2011990:	10c00017 	ldw	r3,0(r2)
 2011994:	e0bfff17 	ldw	r2,-4(fp)
 2011998:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 201199c:	e0bffe17 	ldw	r2,-8(fp)
 20119a0:	10c01317 	ldw	r3,76(r2)
 20119a4:	e0bfff17 	ldw	r2,-4(fp)
 20119a8:	10800117 	ldw	r2,4(r2)
 20119ac:	1085883a 	add	r2,r2,r2
 20119b0:	1085883a 	add	r2,r2,r2
 20119b4:	1885883a 	add	r2,r3,r2
 20119b8:	e0ffff17 	ldw	r3,-4(fp)
 20119bc:	10c00015 	stw	r3,0(r2)
    }
}
 20119c0:	0001883a 	nop
 20119c4:	e037883a 	mov	sp,fp
 20119c8:	df000017 	ldw	fp,0(sp)
 20119cc:	dec00104 	addi	sp,sp,4
 20119d0:	f800283a 	ret

020119d4 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 20119d4:	defff304 	addi	sp,sp,-52
 20119d8:	dfc00c15 	stw	ra,48(sp)
 20119dc:	df000b15 	stw	fp,44(sp)
 20119e0:	df000b04 	addi	fp,sp,44
 20119e4:	e13ffc15 	stw	r4,-16(fp)
 20119e8:	e17ffd15 	stw	r5,-12(fp)
 20119ec:	e1bffe15 	stw	r6,-8(fp)
 20119f0:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 20119f4:	e0bffd17 	ldw	r2,-12(fp)
 20119f8:	10800417 	ldw	r2,16(r2)
 20119fc:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 2011a00:	e0bffd17 	ldw	r2,-12(fp)
 2011a04:	10800504 	addi	r2,r2,20
 2011a08:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 2011a0c:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 2011a10:	e0bff617 	ldw	r2,-40(fp)
 2011a14:	10800017 	ldw	r2,0(r2)
 2011a18:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 2011a1c:	e0bff817 	ldw	r2,-32(fp)
 2011a20:	10ffffcc 	andi	r3,r2,65535
 2011a24:	e0bffe17 	ldw	r2,-8(fp)
 2011a28:	1887383a 	mul	r3,r3,r2
 2011a2c:	e0bfff17 	ldw	r2,-4(fp)
 2011a30:	1885883a 	add	r2,r3,r2
 2011a34:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 2011a38:	e0bff817 	ldw	r2,-32(fp)
 2011a3c:	1006d43a 	srli	r3,r2,16
 2011a40:	e0bffe17 	ldw	r2,-8(fp)
 2011a44:	1887383a 	mul	r3,r3,r2
 2011a48:	e0bff917 	ldw	r2,-28(fp)
 2011a4c:	1004d43a 	srli	r2,r2,16
 2011a50:	1885883a 	add	r2,r3,r2
 2011a54:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 2011a58:	e0bffa17 	ldw	r2,-24(fp)
 2011a5c:	1004d43a 	srli	r2,r2,16
 2011a60:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 2011a64:	e0bff617 	ldw	r2,-40(fp)
 2011a68:	10c00104 	addi	r3,r2,4
 2011a6c:	e0fff615 	stw	r3,-40(fp)
 2011a70:	e0fffa17 	ldw	r3,-24(fp)
 2011a74:	1808943a 	slli	r4,r3,16
 2011a78:	e0fff917 	ldw	r3,-28(fp)
 2011a7c:	18ffffcc 	andi	r3,r3,65535
 2011a80:	20c7883a 	add	r3,r4,r3
 2011a84:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 2011a88:	e0bff517 	ldw	r2,-44(fp)
 2011a8c:	10800044 	addi	r2,r2,1
 2011a90:	e0bff515 	stw	r2,-44(fp)
 2011a94:	e0fff517 	ldw	r3,-44(fp)
 2011a98:	e0bff717 	ldw	r2,-36(fp)
 2011a9c:	18bfdc16 	blt	r3,r2,2011a10 <__multadd+0x3c>
  if (a)
 2011aa0:	e0bfff17 	ldw	r2,-4(fp)
 2011aa4:	10002a26 	beq	r2,zero,2011b50 <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 2011aa8:	e0bffd17 	ldw	r2,-12(fp)
 2011aac:	10800217 	ldw	r2,8(r2)
 2011ab0:	e0fff717 	ldw	r3,-36(fp)
 2011ab4:	18801916 	blt	r3,r2,2011b1c <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 2011ab8:	e0bffd17 	ldw	r2,-12(fp)
 2011abc:	10800117 	ldw	r2,4(r2)
 2011ac0:	10800044 	addi	r2,r2,1
 2011ac4:	100b883a 	mov	r5,r2
 2011ac8:	e13ffc17 	ldw	r4,-16(fp)
 2011acc:	20118280 	call	2011828 <_Balloc>
 2011ad0:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 2011ad4:	e0bffb17 	ldw	r2,-20(fp)
 2011ad8:	10c00304 	addi	r3,r2,12
 2011adc:	e0bffd17 	ldw	r2,-12(fp)
 2011ae0:	11000304 	addi	r4,r2,12
 2011ae4:	e0bffd17 	ldw	r2,-12(fp)
 2011ae8:	10800417 	ldw	r2,16(r2)
 2011aec:	10800084 	addi	r2,r2,2
 2011af0:	1085883a 	add	r2,r2,r2
 2011af4:	1085883a 	add	r2,r2,r2
 2011af8:	100d883a 	mov	r6,r2
 2011afc:	200b883a 	mov	r5,r4
 2011b00:	1809883a 	mov	r4,r3
 2011b04:	2009c800 	call	2009c80 <memcpy>
	  Bfree (ptr, b);
 2011b08:	e17ffd17 	ldw	r5,-12(fp)
 2011b0c:	e13ffc17 	ldw	r4,-16(fp)
 2011b10:	20119580 	call	2011958 <_Bfree>
	  b = b1;
 2011b14:	e0bffb17 	ldw	r2,-20(fp)
 2011b18:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 2011b1c:	e0bff717 	ldw	r2,-36(fp)
 2011b20:	10c00044 	addi	r3,r2,1
 2011b24:	e0fff715 	stw	r3,-36(fp)
 2011b28:	e0ffff17 	ldw	r3,-4(fp)
 2011b2c:	e13ffd17 	ldw	r4,-12(fp)
 2011b30:	10800144 	addi	r2,r2,5
 2011b34:	1085883a 	add	r2,r2,r2
 2011b38:	1085883a 	add	r2,r2,r2
 2011b3c:	2085883a 	add	r2,r4,r2
 2011b40:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 2011b44:	e0bffd17 	ldw	r2,-12(fp)
 2011b48:	e0fff717 	ldw	r3,-36(fp)
 2011b4c:	10c00415 	stw	r3,16(r2)
    }
  return b;
 2011b50:	e0bffd17 	ldw	r2,-12(fp)
}
 2011b54:	e037883a 	mov	sp,fp
 2011b58:	dfc00117 	ldw	ra,4(sp)
 2011b5c:	df000017 	ldw	fp,0(sp)
 2011b60:	dec00204 	addi	sp,sp,8
 2011b64:	f800283a 	ret

02011b68 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 2011b68:	defff504 	addi	sp,sp,-44
 2011b6c:	dfc00a15 	stw	ra,40(sp)
 2011b70:	df000915 	stw	fp,36(sp)
 2011b74:	df000904 	addi	fp,sp,36
 2011b78:	e13ffc15 	stw	r4,-16(fp)
 2011b7c:	e17ffd15 	stw	r5,-12(fp)
 2011b80:	e1bffe15 	stw	r6,-8(fp)
 2011b84:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 2011b88:	e0bfff17 	ldw	r2,-4(fp)
 2011b8c:	10800204 	addi	r2,r2,8
 2011b90:	01400244 	movi	r5,9
 2011b94:	1009883a 	mov	r4,r2
 2011b98:	20073900 	call	2007390 <__divsi3>
 2011b9c:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 2011ba0:	e03ff915 	stw	zero,-28(fp)
 2011ba4:	00800044 	movi	r2,1
 2011ba8:	e0bffa15 	stw	r2,-24(fp)
 2011bac:	00000606 	br	2011bc8 <__s2b+0x60>
 2011bb0:	e0bffa17 	ldw	r2,-24(fp)
 2011bb4:	1085883a 	add	r2,r2,r2
 2011bb8:	e0bffa15 	stw	r2,-24(fp)
 2011bbc:	e0bff917 	ldw	r2,-28(fp)
 2011bc0:	10800044 	addi	r2,r2,1
 2011bc4:	e0bff915 	stw	r2,-28(fp)
 2011bc8:	e0bffb17 	ldw	r2,-20(fp)
 2011bcc:	e0fffa17 	ldw	r3,-24(fp)
 2011bd0:	18bff716 	blt	r3,r2,2011bb0 <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 2011bd4:	e17ff917 	ldw	r5,-28(fp)
 2011bd8:	e13ffc17 	ldw	r4,-16(fp)
 2011bdc:	20118280 	call	2011828 <_Balloc>
 2011be0:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 2011be4:	e0bff717 	ldw	r2,-36(fp)
 2011be8:	e0c00217 	ldw	r3,8(fp)
 2011bec:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 2011bf0:	e0bff717 	ldw	r2,-36(fp)
 2011bf4:	00c00044 	movi	r3,1
 2011bf8:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 2011bfc:	00800244 	movi	r2,9
 2011c00:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 2011c04:	e0bffe17 	ldw	r2,-8(fp)
 2011c08:	10800290 	cmplti	r2,r2,10
 2011c0c:	10001b1e 	bne	r2,zero,2011c7c <__s2b+0x114>
    {
      s += 9;
 2011c10:	e0bffd17 	ldw	r2,-12(fp)
 2011c14:	10800244 	addi	r2,r2,9
 2011c18:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 2011c1c:	e0bffd17 	ldw	r2,-12(fp)
 2011c20:	10c00044 	addi	r3,r2,1
 2011c24:	e0fffd15 	stw	r3,-12(fp)
 2011c28:	10800003 	ldbu	r2,0(r2)
 2011c2c:	10803fcc 	andi	r2,r2,255
 2011c30:	1080201c 	xori	r2,r2,128
 2011c34:	10bfe004 	addi	r2,r2,-128
 2011c38:	10bff404 	addi	r2,r2,-48
 2011c3c:	100f883a 	mov	r7,r2
 2011c40:	01800284 	movi	r6,10
 2011c44:	e17ff717 	ldw	r5,-36(fp)
 2011c48:	e13ffc17 	ldw	r4,-16(fp)
 2011c4c:	20119d40 	call	20119d4 <__multadd>
 2011c50:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 2011c54:	e0bff817 	ldw	r2,-32(fp)
 2011c58:	10800044 	addi	r2,r2,1
 2011c5c:	e0bff815 	stw	r2,-32(fp)
 2011c60:	e0fff817 	ldw	r3,-32(fp)
 2011c64:	e0bffe17 	ldw	r2,-8(fp)
 2011c68:	18bfec16 	blt	r3,r2,2011c1c <__s2b+0xb4>
      s++;
 2011c6c:	e0bffd17 	ldw	r2,-12(fp)
 2011c70:	10800044 	addi	r2,r2,1
 2011c74:	e0bffd15 	stw	r2,-12(fp)
 2011c78:	00001506 	br	2011cd0 <__s2b+0x168>
    }
  else
    s += 10;
 2011c7c:	e0bffd17 	ldw	r2,-12(fp)
 2011c80:	10800284 	addi	r2,r2,10
 2011c84:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 2011c88:	00001106 	br	2011cd0 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 2011c8c:	e0bffd17 	ldw	r2,-12(fp)
 2011c90:	10c00044 	addi	r3,r2,1
 2011c94:	e0fffd15 	stw	r3,-12(fp)
 2011c98:	10800003 	ldbu	r2,0(r2)
 2011c9c:	10803fcc 	andi	r2,r2,255
 2011ca0:	1080201c 	xori	r2,r2,128
 2011ca4:	10bfe004 	addi	r2,r2,-128
 2011ca8:	10bff404 	addi	r2,r2,-48
 2011cac:	100f883a 	mov	r7,r2
 2011cb0:	01800284 	movi	r6,10
 2011cb4:	e17ff717 	ldw	r5,-36(fp)
 2011cb8:	e13ffc17 	ldw	r4,-16(fp)
 2011cbc:	20119d40 	call	20119d4 <__multadd>
 2011cc0:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 2011cc4:	e0bff817 	ldw	r2,-32(fp)
 2011cc8:	10800044 	addi	r2,r2,1
 2011ccc:	e0bff815 	stw	r2,-32(fp)
 2011cd0:	e0fff817 	ldw	r3,-32(fp)
 2011cd4:	e0bfff17 	ldw	r2,-4(fp)
 2011cd8:	18bfec16 	blt	r3,r2,2011c8c <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 2011cdc:	e0bff717 	ldw	r2,-36(fp)
}
 2011ce0:	e037883a 	mov	sp,fp
 2011ce4:	dfc00117 	ldw	ra,4(sp)
 2011ce8:	df000017 	ldw	fp,0(sp)
 2011cec:	dec00204 	addi	sp,sp,8
 2011cf0:	f800283a 	ret

02011cf4 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 2011cf4:	defffe04 	addi	sp,sp,-8
 2011cf8:	df000115 	stw	fp,4(sp)
 2011cfc:	dc000015 	stw	r16,0(sp)
 2011d00:	df000104 	addi	fp,sp,4
 2011d04:	2005883a 	mov	r2,r4
  register int k = 0;
 2011d08:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 2011d0c:	10ffffec 	andhi	r3,r2,65535
 2011d10:	1800021e 	bne	r3,zero,2011d1c <__hi0bits+0x28>
    {
      k = 16;
 2011d14:	04000404 	movi	r16,16
      x <<= 16;
 2011d18:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 2011d1c:	10ffc02c 	andhi	r3,r2,65280
 2011d20:	1800021e 	bne	r3,zero,2011d2c <__hi0bits+0x38>
    {
      k += 8;
 2011d24:	84000204 	addi	r16,r16,8
      x <<= 8;
 2011d28:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 2011d2c:	10fc002c 	andhi	r3,r2,61440
 2011d30:	1800021e 	bne	r3,zero,2011d3c <__hi0bits+0x48>
    {
      k += 4;
 2011d34:	84000104 	addi	r16,r16,4
      x <<= 4;
 2011d38:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 2011d3c:	10f0002c 	andhi	r3,r2,49152
 2011d40:	1800031e 	bne	r3,zero,2011d50 <__hi0bits+0x5c>
    {
      k += 2;
 2011d44:	84000084 	addi	r16,r16,2
      x <<= 2;
 2011d48:	1085883a 	add	r2,r2,r2
 2011d4c:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 2011d50:	1007883a 	mov	r3,r2
 2011d54:	18000516 	blt	r3,zero,2011d6c <__hi0bits+0x78>
    {
      k++;
 2011d58:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 2011d5c:	1090002c 	andhi	r2,r2,16384
 2011d60:	1000021e 	bne	r2,zero,2011d6c <__hi0bits+0x78>
	return 32;
 2011d64:	00800804 	movi	r2,32
 2011d68:	00000106 	br	2011d70 <__hi0bits+0x7c>
    }
  return k;
 2011d6c:	8005883a 	mov	r2,r16
}
 2011d70:	e6ffff04 	addi	sp,fp,-4
 2011d74:	df000117 	ldw	fp,4(sp)
 2011d78:	dc000017 	ldw	r16,0(sp)
 2011d7c:	dec00204 	addi	sp,sp,8
 2011d80:	f800283a 	ret

02011d84 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 2011d84:	defffc04 	addi	sp,sp,-16
 2011d88:	df000315 	stw	fp,12(sp)
 2011d8c:	dc400215 	stw	r17,8(sp)
 2011d90:	dc000115 	stw	r16,4(sp)
 2011d94:	df000304 	addi	fp,sp,12
 2011d98:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 2011d9c:	e0bffd17 	ldw	r2,-12(fp)
 2011da0:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 2011da4:	808001cc 	andi	r2,r16,7
 2011da8:	10001026 	beq	r2,zero,2011dec <__lo0bits+0x68>
    {
      if (x & 1)
 2011dac:	8080004c 	andi	r2,r16,1
 2011db0:	10000226 	beq	r2,zero,2011dbc <__lo0bits+0x38>
	return 0;
 2011db4:	0005883a 	mov	r2,zero
 2011db8:	00002706 	br	2011e58 <__lo0bits+0xd4>
      if (x & 2)
 2011dbc:	8080008c 	andi	r2,r16,2
 2011dc0:	10000526 	beq	r2,zero,2011dd8 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 2011dc4:	8006d07a 	srli	r3,r16,1
 2011dc8:	e0bffd17 	ldw	r2,-12(fp)
 2011dcc:	10c00015 	stw	r3,0(r2)
	  return 1;
 2011dd0:	00800044 	movi	r2,1
 2011dd4:	00002006 	br	2011e58 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 2011dd8:	8006d0ba 	srli	r3,r16,2
 2011ddc:	e0bffd17 	ldw	r2,-12(fp)
 2011de0:	10c00015 	stw	r3,0(r2)
      return 2;
 2011de4:	00800084 	movi	r2,2
 2011de8:	00001b06 	br	2011e58 <__lo0bits+0xd4>
    }
  k = 0;
 2011dec:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 2011df0:	80bfffcc 	andi	r2,r16,65535
 2011df4:	1000021e 	bne	r2,zero,2011e00 <__lo0bits+0x7c>
    {
      k = 16;
 2011df8:	04400404 	movi	r17,16
      x >>= 16;
 2011dfc:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 2011e00:	80803fcc 	andi	r2,r16,255
 2011e04:	1000021e 	bne	r2,zero,2011e10 <__lo0bits+0x8c>
    {
      k += 8;
 2011e08:	8c400204 	addi	r17,r17,8
      x >>= 8;
 2011e0c:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 2011e10:	808003cc 	andi	r2,r16,15
 2011e14:	1000021e 	bne	r2,zero,2011e20 <__lo0bits+0x9c>
    {
      k += 4;
 2011e18:	8c400104 	addi	r17,r17,4
      x >>= 4;
 2011e1c:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 2011e20:	808000cc 	andi	r2,r16,3
 2011e24:	1000021e 	bne	r2,zero,2011e30 <__lo0bits+0xac>
    {
      k += 2;
 2011e28:	8c400084 	addi	r17,r17,2
      x >>= 2;
 2011e2c:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 2011e30:	8080004c 	andi	r2,r16,1
 2011e34:	1000051e 	bne	r2,zero,2011e4c <__lo0bits+0xc8>
    {
      k++;
 2011e38:	8c400044 	addi	r17,r17,1
      x >>= 1;
 2011e3c:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 2011e40:	8000021e 	bne	r16,zero,2011e4c <__lo0bits+0xc8>
	return 32;
 2011e44:	00800804 	movi	r2,32
 2011e48:	00000306 	br	2011e58 <__lo0bits+0xd4>
    }
  *y = x;
 2011e4c:	e0bffd17 	ldw	r2,-12(fp)
 2011e50:	14000015 	stw	r16,0(r2)
  return k;
 2011e54:	8805883a 	mov	r2,r17
}
 2011e58:	e6fffe04 	addi	sp,fp,-8
 2011e5c:	df000217 	ldw	fp,8(sp)
 2011e60:	dc400117 	ldw	r17,4(sp)
 2011e64:	dc000017 	ldw	r16,0(sp)
 2011e68:	dec00304 	addi	sp,sp,12
 2011e6c:	f800283a 	ret

02011e70 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 2011e70:	defffb04 	addi	sp,sp,-20
 2011e74:	dfc00415 	stw	ra,16(sp)
 2011e78:	df000315 	stw	fp,12(sp)
 2011e7c:	df000304 	addi	fp,sp,12
 2011e80:	e13ffe15 	stw	r4,-8(fp)
 2011e84:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 2011e88:	01400044 	movi	r5,1
 2011e8c:	e13ffe17 	ldw	r4,-8(fp)
 2011e90:	20118280 	call	2011828 <_Balloc>
 2011e94:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 2011e98:	e0ffff17 	ldw	r3,-4(fp)
 2011e9c:	e0bffd17 	ldw	r2,-12(fp)
 2011ea0:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 2011ea4:	e0bffd17 	ldw	r2,-12(fp)
 2011ea8:	00c00044 	movi	r3,1
 2011eac:	10c00415 	stw	r3,16(r2)
  return b;
 2011eb0:	e0bffd17 	ldw	r2,-12(fp)
}
 2011eb4:	e037883a 	mov	sp,fp
 2011eb8:	dfc00117 	ldw	ra,4(sp)
 2011ebc:	df000017 	ldw	fp,0(sp)
 2011ec0:	dec00204 	addi	sp,sp,8
 2011ec4:	f800283a 	ret

02011ec8 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 2011ec8:	deffeb04 	addi	sp,sp,-84
 2011ecc:	dfc01415 	stw	ra,80(sp)
 2011ed0:	df001315 	stw	fp,76(sp)
 2011ed4:	df001304 	addi	fp,sp,76
 2011ed8:	e13ffd15 	stw	r4,-12(fp)
 2011edc:	e17ffe15 	stw	r5,-8(fp)
 2011ee0:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 2011ee4:	e0bffe17 	ldw	r2,-8(fp)
 2011ee8:	10c00417 	ldw	r3,16(r2)
 2011eec:	e0bfff17 	ldw	r2,-4(fp)
 2011ef0:	10800417 	ldw	r2,16(r2)
 2011ef4:	1880060e 	bge	r3,r2,2011f10 <__multiply+0x48>
    {
      c = a;
 2011ef8:	e0bffe17 	ldw	r2,-8(fp)
 2011efc:	e0bff515 	stw	r2,-44(fp)
      a = b;
 2011f00:	e0bfff17 	ldw	r2,-4(fp)
 2011f04:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 2011f08:	e0bff517 	ldw	r2,-44(fp)
 2011f0c:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 2011f10:	e0bffe17 	ldw	r2,-8(fp)
 2011f14:	10800117 	ldw	r2,4(r2)
 2011f18:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 2011f1c:	e0bffe17 	ldw	r2,-8(fp)
 2011f20:	10800417 	ldw	r2,16(r2)
 2011f24:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 2011f28:	e0bfff17 	ldw	r2,-4(fp)
 2011f2c:	10800417 	ldw	r2,16(r2)
 2011f30:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 2011f34:	e0fff617 	ldw	r3,-40(fp)
 2011f38:	e0bff717 	ldw	r2,-36(fp)
 2011f3c:	1885883a 	add	r2,r3,r2
 2011f40:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 2011f44:	e0bffe17 	ldw	r2,-8(fp)
 2011f48:	10c00217 	ldw	r3,8(r2)
 2011f4c:	e0bfee17 	ldw	r2,-72(fp)
 2011f50:	1880030e 	bge	r3,r2,2011f60 <__multiply+0x98>
    k++;
 2011f54:	e0bfed17 	ldw	r2,-76(fp)
 2011f58:	10800044 	addi	r2,r2,1
 2011f5c:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 2011f60:	e17fed17 	ldw	r5,-76(fp)
 2011f64:	e13ffd17 	ldw	r4,-12(fp)
 2011f68:	20118280 	call	2011828 <_Balloc>
 2011f6c:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 2011f70:	e0bff517 	ldw	r2,-44(fp)
 2011f74:	10800504 	addi	r2,r2,20
 2011f78:	e0bff015 	stw	r2,-64(fp)
 2011f7c:	e0bfee17 	ldw	r2,-72(fp)
 2011f80:	1085883a 	add	r2,r2,r2
 2011f84:	1085883a 	add	r2,r2,r2
 2011f88:	1007883a 	mov	r3,r2
 2011f8c:	e0bff017 	ldw	r2,-64(fp)
 2011f90:	10c5883a 	add	r2,r2,r3
 2011f94:	e0bff815 	stw	r2,-32(fp)
 2011f98:	00000506 	br	2011fb0 <__multiply+0xe8>
    *x = 0;
 2011f9c:	e0bff017 	ldw	r2,-64(fp)
 2011fa0:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 2011fa4:	e0bff017 	ldw	r2,-64(fp)
 2011fa8:	10800104 	addi	r2,r2,4
 2011fac:	e0bff015 	stw	r2,-64(fp)
 2011fb0:	e0fff017 	ldw	r3,-64(fp)
 2011fb4:	e0bff817 	ldw	r2,-32(fp)
 2011fb8:	18bff836 	bltu	r3,r2,2011f9c <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 2011fbc:	e0bffe17 	ldw	r2,-8(fp)
 2011fc0:	10800504 	addi	r2,r2,20
 2011fc4:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 2011fc8:	e0bff617 	ldw	r2,-40(fp)
 2011fcc:	1085883a 	add	r2,r2,r2
 2011fd0:	1085883a 	add	r2,r2,r2
 2011fd4:	1007883a 	mov	r3,r2
 2011fd8:	e0bff817 	ldw	r2,-32(fp)
 2011fdc:	10c5883a 	add	r2,r2,r3
 2011fe0:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 2011fe4:	e0bfff17 	ldw	r2,-4(fp)
 2011fe8:	10800504 	addi	r2,r2,20
 2011fec:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 2011ff0:	e0bff717 	ldw	r2,-36(fp)
 2011ff4:	1085883a 	add	r2,r2,r2
 2011ff8:	1085883a 	add	r2,r2,r2
 2011ffc:	1007883a 	mov	r3,r2
 2012000:	e0bff117 	ldw	r2,-60(fp)
 2012004:	10c5883a 	add	r2,r2,r3
 2012008:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 201200c:	e0bff517 	ldw	r2,-44(fp)
 2012010:	10800504 	addi	r2,r2,20
 2012014:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 2012018:	00007d06 	br	2012210 <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 201201c:	e0bff117 	ldw	r2,-60(fp)
 2012020:	10800017 	ldw	r2,0(r2)
 2012024:	10bfffcc 	andi	r2,r2,65535
 2012028:	e0bffb15 	stw	r2,-20(fp)
 201202c:	e0bffb17 	ldw	r2,-20(fp)
 2012030:	10003426 	beq	r2,zero,2012104 <__multiply+0x23c>
	{
	  x = xa;
 2012034:	e0bff817 	ldw	r2,-32(fp)
 2012038:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 201203c:	e0bff317 	ldw	r2,-52(fp)
 2012040:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 2012044:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 2012048:	e0bff017 	ldw	r2,-64(fp)
 201204c:	10800017 	ldw	r2,0(r2)
 2012050:	10ffffcc 	andi	r3,r2,65535
 2012054:	e0bffb17 	ldw	r2,-20(fp)
 2012058:	1887383a 	mul	r3,r3,r2
 201205c:	e0bff217 	ldw	r2,-56(fp)
 2012060:	10800017 	ldw	r2,0(r2)
 2012064:	10bfffcc 	andi	r2,r2,65535
 2012068:	1887883a 	add	r3,r3,r2
 201206c:	e0bfef17 	ldw	r2,-68(fp)
 2012070:	1885883a 	add	r2,r3,r2
 2012074:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 2012078:	e0bffc17 	ldw	r2,-16(fp)
 201207c:	1004d43a 	srli	r2,r2,16
 2012080:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 2012084:	e0bff017 	ldw	r2,-64(fp)
 2012088:	10c00104 	addi	r3,r2,4
 201208c:	e0fff015 	stw	r3,-64(fp)
 2012090:	10800017 	ldw	r2,0(r2)
 2012094:	1006d43a 	srli	r3,r2,16
 2012098:	e0bffb17 	ldw	r2,-20(fp)
 201209c:	1887383a 	mul	r3,r3,r2
 20120a0:	e0bff217 	ldw	r2,-56(fp)
 20120a4:	10800017 	ldw	r2,0(r2)
 20120a8:	1004d43a 	srli	r2,r2,16
 20120ac:	1887883a 	add	r3,r3,r2
 20120b0:	e0bfef17 	ldw	r2,-68(fp)
 20120b4:	1885883a 	add	r2,r3,r2
 20120b8:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 20120bc:	e0bff417 	ldw	r2,-48(fp)
 20120c0:	1004d43a 	srli	r2,r2,16
 20120c4:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 20120c8:	e0bff217 	ldw	r2,-56(fp)
 20120cc:	10c00104 	addi	r3,r2,4
 20120d0:	e0fff215 	stw	r3,-56(fp)
 20120d4:	e0fff417 	ldw	r3,-48(fp)
 20120d8:	1808943a 	slli	r4,r3,16
 20120dc:	e0fffc17 	ldw	r3,-16(fp)
 20120e0:	18ffffcc 	andi	r3,r3,65535
 20120e4:	20c6b03a 	or	r3,r4,r3
 20120e8:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 20120ec:	e0fff017 	ldw	r3,-64(fp)
 20120f0:	e0bff917 	ldw	r2,-28(fp)
 20120f4:	18bfd436 	bltu	r3,r2,2012048 <__multiply+0x180>
	  *xc = carry;
 20120f8:	e0bff217 	ldw	r2,-56(fp)
 20120fc:	e0ffef17 	ldw	r3,-68(fp)
 2012100:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 2012104:	e0bff117 	ldw	r2,-60(fp)
 2012108:	10800017 	ldw	r2,0(r2)
 201210c:	1004d43a 	srli	r2,r2,16
 2012110:	e0bffb15 	stw	r2,-20(fp)
 2012114:	e0bffb17 	ldw	r2,-20(fp)
 2012118:	10003726 	beq	r2,zero,20121f8 <__multiply+0x330>
	{
	  x = xa;
 201211c:	e0bff817 	ldw	r2,-32(fp)
 2012120:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 2012124:	e0bff317 	ldw	r2,-52(fp)
 2012128:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 201212c:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 2012130:	e0bff217 	ldw	r2,-56(fp)
 2012134:	10800017 	ldw	r2,0(r2)
 2012138:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 201213c:	e0bff017 	ldw	r2,-64(fp)
 2012140:	10800017 	ldw	r2,0(r2)
 2012144:	10ffffcc 	andi	r3,r2,65535
 2012148:	e0bffb17 	ldw	r2,-20(fp)
 201214c:	1887383a 	mul	r3,r3,r2
 2012150:	e0bff217 	ldw	r2,-56(fp)
 2012154:	10800017 	ldw	r2,0(r2)
 2012158:	1004d43a 	srli	r2,r2,16
 201215c:	1887883a 	add	r3,r3,r2
 2012160:	e0bfef17 	ldw	r2,-68(fp)
 2012164:	1885883a 	add	r2,r3,r2
 2012168:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 201216c:	e0bffc17 	ldw	r2,-16(fp)
 2012170:	1004d43a 	srli	r2,r2,16
 2012174:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 2012178:	e0bff217 	ldw	r2,-56(fp)
 201217c:	10c00104 	addi	r3,r2,4
 2012180:	e0fff215 	stw	r3,-56(fp)
 2012184:	e0fffc17 	ldw	r3,-16(fp)
 2012188:	1808943a 	slli	r4,r3,16
 201218c:	e0fff417 	ldw	r3,-48(fp)
 2012190:	18ffffcc 	andi	r3,r3,65535
 2012194:	20c6b03a 	or	r3,r4,r3
 2012198:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 201219c:	e0bff017 	ldw	r2,-64(fp)
 20121a0:	10c00104 	addi	r3,r2,4
 20121a4:	e0fff015 	stw	r3,-64(fp)
 20121a8:	10800017 	ldw	r2,0(r2)
 20121ac:	1006d43a 	srli	r3,r2,16
 20121b0:	e0bffb17 	ldw	r2,-20(fp)
 20121b4:	1887383a 	mul	r3,r3,r2
 20121b8:	e0bff217 	ldw	r2,-56(fp)
 20121bc:	10800017 	ldw	r2,0(r2)
 20121c0:	10bfffcc 	andi	r2,r2,65535
 20121c4:	1887883a 	add	r3,r3,r2
 20121c8:	e0bfef17 	ldw	r2,-68(fp)
 20121cc:	1885883a 	add	r2,r3,r2
 20121d0:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 20121d4:	e0bff417 	ldw	r2,-48(fp)
 20121d8:	1004d43a 	srli	r2,r2,16
 20121dc:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 20121e0:	e0fff017 	ldw	r3,-64(fp)
 20121e4:	e0bff917 	ldw	r2,-28(fp)
 20121e8:	18bfd436 	bltu	r3,r2,201213c <__multiply+0x274>
	  *xc = z2;
 20121ec:	e0bff217 	ldw	r2,-56(fp)
 20121f0:	e0fff417 	ldw	r3,-48(fp)
 20121f4:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 20121f8:	e0bff117 	ldw	r2,-60(fp)
 20121fc:	10800104 	addi	r2,r2,4
 2012200:	e0bff115 	stw	r2,-60(fp)
 2012204:	e0bff317 	ldw	r2,-52(fp)
 2012208:	10800104 	addi	r2,r2,4
 201220c:	e0bff315 	stw	r2,-52(fp)
 2012210:	e0fff117 	ldw	r3,-60(fp)
 2012214:	e0bffa17 	ldw	r2,-24(fp)
 2012218:	18bf8036 	bltu	r3,r2,201201c <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 201221c:	e0bff517 	ldw	r2,-44(fp)
 2012220:	10800504 	addi	r2,r2,20
 2012224:	e0bff315 	stw	r2,-52(fp)
 2012228:	e0bfee17 	ldw	r2,-72(fp)
 201222c:	1085883a 	add	r2,r2,r2
 2012230:	1085883a 	add	r2,r2,r2
 2012234:	1007883a 	mov	r3,r2
 2012238:	e0bff317 	ldw	r2,-52(fp)
 201223c:	10c5883a 	add	r2,r2,r3
 2012240:	e0bff215 	stw	r2,-56(fp)
 2012244:	00000306 	br	2012254 <__multiply+0x38c>
 2012248:	e0bfee17 	ldw	r2,-72(fp)
 201224c:	10bfffc4 	addi	r2,r2,-1
 2012250:	e0bfee15 	stw	r2,-72(fp)
 2012254:	e0bfee17 	ldw	r2,-72(fp)
 2012258:	0080060e 	bge	zero,r2,2012274 <__multiply+0x3ac>
 201225c:	e0bff217 	ldw	r2,-56(fp)
 2012260:	10bfff04 	addi	r2,r2,-4
 2012264:	e0bff215 	stw	r2,-56(fp)
 2012268:	e0bff217 	ldw	r2,-56(fp)
 201226c:	10800017 	ldw	r2,0(r2)
 2012270:	103ff526 	beq	r2,zero,2012248 <__multiply+0x380>
  c->_wds = wc;
 2012274:	e0bff517 	ldw	r2,-44(fp)
 2012278:	e0ffee17 	ldw	r3,-72(fp)
 201227c:	10c00415 	stw	r3,16(r2)
  return c;
 2012280:	e0bff517 	ldw	r2,-44(fp)
}
 2012284:	e037883a 	mov	sp,fp
 2012288:	dfc00117 	ldw	ra,4(sp)
 201228c:	df000017 	ldw	fp,0(sp)
 2012290:	dec00204 	addi	sp,sp,8
 2012294:	f800283a 	ret

02012298 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 2012298:	defff704 	addi	sp,sp,-36
 201229c:	dfc00815 	stw	ra,32(sp)
 20122a0:	df000715 	stw	fp,28(sp)
 20122a4:	df000704 	addi	fp,sp,28
 20122a8:	e13ffd15 	stw	r4,-12(fp)
 20122ac:	e17ffe15 	stw	r5,-8(fp)
 20122b0:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 20122b4:	e0bfff17 	ldw	r2,-4(fp)
 20122b8:	108000cc 	andi	r2,r2,3
 20122bc:	e0bffb15 	stw	r2,-20(fp)
 20122c0:	e0bffb17 	ldw	r2,-20(fp)
 20122c4:	10000e26 	beq	r2,zero,2012300 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 20122c8:	e0bffb17 	ldw	r2,-20(fp)
 20122cc:	10ffffc4 	addi	r3,r2,-1
 20122d0:	008080b4 	movhi	r2,514
 20122d4:	108cbb04 	addi	r2,r2,13036
 20122d8:	18c7883a 	add	r3,r3,r3
 20122dc:	18c7883a 	add	r3,r3,r3
 20122e0:	10c5883a 	add	r2,r2,r3
 20122e4:	10800017 	ldw	r2,0(r2)
 20122e8:	000f883a 	mov	r7,zero
 20122ec:	100d883a 	mov	r6,r2
 20122f0:	e17ffe17 	ldw	r5,-8(fp)
 20122f4:	e13ffd17 	ldw	r4,-12(fp)
 20122f8:	20119d40 	call	20119d4 <__multadd>
 20122fc:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 2012300:	e0bfff17 	ldw	r2,-4(fp)
 2012304:	1005d0ba 	srai	r2,r2,2
 2012308:	e0bfff15 	stw	r2,-4(fp)
 201230c:	e0bfff17 	ldw	r2,-4(fp)
 2012310:	1000021e 	bne	r2,zero,201231c <__pow5mult+0x84>
    return b;
 2012314:	e0bffe17 	ldw	r2,-8(fp)
 2012318:	00003806 	br	20123fc <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 201231c:	e0bffd17 	ldw	r2,-12(fp)
 2012320:	10801217 	ldw	r2,72(r2)
 2012324:	e0bff915 	stw	r2,-28(fp)
 2012328:	e0bff917 	ldw	r2,-28(fp)
 201232c:	10000b1e 	bne	r2,zero,201235c <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 2012330:	01409c44 	movi	r5,625
 2012334:	e13ffd17 	ldw	r4,-12(fp)
 2012338:	2011e700 	call	2011e70 <__i2b>
 201233c:	1007883a 	mov	r3,r2
 2012340:	e0bffd17 	ldw	r2,-12(fp)
 2012344:	10c01215 	stw	r3,72(r2)
 2012348:	e0bffd17 	ldw	r2,-12(fp)
 201234c:	10801217 	ldw	r2,72(r2)
 2012350:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 2012354:	e0bff917 	ldw	r2,-28(fp)
 2012358:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 201235c:	e0bfff17 	ldw	r2,-4(fp)
 2012360:	1080004c 	andi	r2,r2,1
 2012364:	10000a26 	beq	r2,zero,2012390 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 2012368:	e1bff917 	ldw	r6,-28(fp)
 201236c:	e17ffe17 	ldw	r5,-8(fp)
 2012370:	e13ffd17 	ldw	r4,-12(fp)
 2012374:	2011ec80 	call	2011ec8 <__multiply>
 2012378:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 201237c:	e17ffe17 	ldw	r5,-8(fp)
 2012380:	e13ffd17 	ldw	r4,-12(fp)
 2012384:	20119580 	call	2011958 <_Bfree>
	  b = b1;
 2012388:	e0bffc17 	ldw	r2,-16(fp)
 201238c:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 2012390:	e0bfff17 	ldw	r2,-4(fp)
 2012394:	1005d07a 	srai	r2,r2,1
 2012398:	e0bfff15 	stw	r2,-4(fp)
 201239c:	e0bfff17 	ldw	r2,-4(fp)
 20123a0:	10001426 	beq	r2,zero,20123f4 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 20123a4:	e0bff917 	ldw	r2,-28(fp)
 20123a8:	10800017 	ldw	r2,0(r2)
 20123ac:	e0bffa15 	stw	r2,-24(fp)
 20123b0:	e0bffa17 	ldw	r2,-24(fp)
 20123b4:	10000c1e 	bne	r2,zero,20123e8 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 20123b8:	e1bff917 	ldw	r6,-28(fp)
 20123bc:	e17ff917 	ldw	r5,-28(fp)
 20123c0:	e13ffd17 	ldw	r4,-12(fp)
 20123c4:	2011ec80 	call	2011ec8 <__multiply>
 20123c8:	1007883a 	mov	r3,r2
 20123cc:	e0bff917 	ldw	r2,-28(fp)
 20123d0:	10c00015 	stw	r3,0(r2)
 20123d4:	e0bff917 	ldw	r2,-28(fp)
 20123d8:	10800017 	ldw	r2,0(r2)
 20123dc:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 20123e0:	e0bffa17 	ldw	r2,-24(fp)
 20123e4:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 20123e8:	e0bffa17 	ldw	r2,-24(fp)
 20123ec:	e0bff915 	stw	r2,-28(fp)
    }
 20123f0:	003fda06 	br	201235c <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 20123f4:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 20123f8:	e0bffe17 	ldw	r2,-8(fp)
}
 20123fc:	e037883a 	mov	sp,fp
 2012400:	dfc00117 	ldw	ra,4(sp)
 2012404:	df000017 	ldw	fp,0(sp)
 2012408:	dec00204 	addi	sp,sp,8
 201240c:	f800283a 	ret

02012410 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 2012410:	defff204 	addi	sp,sp,-56
 2012414:	dfc00d15 	stw	ra,52(sp)
 2012418:	df000c15 	stw	fp,48(sp)
 201241c:	df000c04 	addi	fp,sp,48
 2012420:	e13ffd15 	stw	r4,-12(fp)
 2012424:	e17ffe15 	stw	r5,-8(fp)
 2012428:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 201242c:	e0bfff17 	ldw	r2,-4(fp)
 2012430:	1005d17a 	srai	r2,r2,5
 2012434:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 2012438:	e0bffe17 	ldw	r2,-8(fp)
 201243c:	10800117 	ldw	r2,4(r2)
 2012440:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 2012444:	e0bffe17 	ldw	r2,-8(fp)
 2012448:	10c00417 	ldw	r3,16(r2)
 201244c:	e0bffa17 	ldw	r2,-24(fp)
 2012450:	1885883a 	add	r2,r3,r2
 2012454:	10800044 	addi	r2,r2,1
 2012458:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 201245c:	e0bffe17 	ldw	r2,-8(fp)
 2012460:	10800217 	ldw	r2,8(r2)
 2012464:	e0bff415 	stw	r2,-48(fp)
 2012468:	00000606 	br	2012484 <__lshift+0x74>
    k1++;
 201246c:	e0bff517 	ldw	r2,-44(fp)
 2012470:	10800044 	addi	r2,r2,1
 2012474:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 2012478:	e0bff417 	ldw	r2,-48(fp)
 201247c:	1085883a 	add	r2,r2,r2
 2012480:	e0bff415 	stw	r2,-48(fp)
 2012484:	e0bff617 	ldw	r2,-40(fp)
 2012488:	e0fff417 	ldw	r3,-48(fp)
 201248c:	18bff716 	blt	r3,r2,201246c <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 2012490:	e17ff517 	ldw	r5,-44(fp)
 2012494:	e13ffd17 	ldw	r4,-12(fp)
 2012498:	20118280 	call	2011828 <_Balloc>
 201249c:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 20124a0:	e0bffb17 	ldw	r2,-20(fp)
 20124a4:	10800504 	addi	r2,r2,20
 20124a8:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 20124ac:	e03ff415 	stw	zero,-48(fp)
 20124b0:	00000706 	br	20124d0 <__lshift+0xc0>
    *x1++ = 0;
 20124b4:	e0bff817 	ldw	r2,-32(fp)
 20124b8:	10c00104 	addi	r3,r2,4
 20124bc:	e0fff815 	stw	r3,-32(fp)
 20124c0:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 20124c4:	e0bff417 	ldw	r2,-48(fp)
 20124c8:	10800044 	addi	r2,r2,1
 20124cc:	e0bff415 	stw	r2,-48(fp)
 20124d0:	e0fff417 	ldw	r3,-48(fp)
 20124d4:	e0bffa17 	ldw	r2,-24(fp)
 20124d8:	18bff616 	blt	r3,r2,20124b4 <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 20124dc:	e0bffe17 	ldw	r2,-8(fp)
 20124e0:	10800504 	addi	r2,r2,20
 20124e4:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 20124e8:	e0bffe17 	ldw	r2,-8(fp)
 20124ec:	10800417 	ldw	r2,16(r2)
 20124f0:	1085883a 	add	r2,r2,r2
 20124f4:	1085883a 	add	r2,r2,r2
 20124f8:	1007883a 	mov	r3,r2
 20124fc:	e0bff717 	ldw	r2,-36(fp)
 2012500:	10c5883a 	add	r2,r2,r3
 2012504:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 2012508:	e0bfff17 	ldw	r2,-4(fp)
 201250c:	108007cc 	andi	r2,r2,31
 2012510:	e0bfff15 	stw	r2,-4(fp)
 2012514:	e0bfff17 	ldw	r2,-4(fp)
 2012518:	10002326 	beq	r2,zero,20125a8 <__lshift+0x198>
    {
      k1 = 32 - k;
 201251c:	00c00804 	movi	r3,32
 2012520:	e0bfff17 	ldw	r2,-4(fp)
 2012524:	1885c83a 	sub	r2,r3,r2
 2012528:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 201252c:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 2012530:	e0bff817 	ldw	r2,-32(fp)
 2012534:	10c00104 	addi	r3,r2,4
 2012538:	e0fff815 	stw	r3,-32(fp)
 201253c:	e0fff717 	ldw	r3,-36(fp)
 2012540:	19000017 	ldw	r4,0(r3)
 2012544:	e0ffff17 	ldw	r3,-4(fp)
 2012548:	20c8983a 	sll	r4,r4,r3
 201254c:	e0fff917 	ldw	r3,-28(fp)
 2012550:	20c6b03a 	or	r3,r4,r3
 2012554:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 2012558:	e0bff717 	ldw	r2,-36(fp)
 201255c:	10c00104 	addi	r3,r2,4
 2012560:	e0fff715 	stw	r3,-36(fp)
 2012564:	10c00017 	ldw	r3,0(r2)
 2012568:	e0bff517 	ldw	r2,-44(fp)
 201256c:	1884d83a 	srl	r2,r3,r2
 2012570:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 2012574:	e0fff717 	ldw	r3,-36(fp)
 2012578:	e0bffc17 	ldw	r2,-16(fp)
 201257c:	18bfec36 	bltu	r3,r2,2012530 <__lshift+0x120>
      if ((*x1 = z) != 0)
 2012580:	e0bff817 	ldw	r2,-32(fp)
 2012584:	e0fff917 	ldw	r3,-28(fp)
 2012588:	10c00015 	stw	r3,0(r2)
 201258c:	e0bff817 	ldw	r2,-32(fp)
 2012590:	10800017 	ldw	r2,0(r2)
 2012594:	10000f26 	beq	r2,zero,20125d4 <__lshift+0x1c4>
	++n1;
 2012598:	e0bff617 	ldw	r2,-40(fp)
 201259c:	10800044 	addi	r2,r2,1
 20125a0:	e0bff615 	stw	r2,-40(fp)
 20125a4:	00000b06 	br	20125d4 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 20125a8:	e0bff817 	ldw	r2,-32(fp)
 20125ac:	10c00104 	addi	r3,r2,4
 20125b0:	e0fff815 	stw	r3,-32(fp)
 20125b4:	e0fff717 	ldw	r3,-36(fp)
 20125b8:	19000104 	addi	r4,r3,4
 20125bc:	e13ff715 	stw	r4,-36(fp)
 20125c0:	18c00017 	ldw	r3,0(r3)
 20125c4:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 20125c8:	e0fff717 	ldw	r3,-36(fp)
 20125cc:	e0bffc17 	ldw	r2,-16(fp)
 20125d0:	18bff536 	bltu	r3,r2,20125a8 <__lshift+0x198>
  b1->_wds = n1 - 1;
 20125d4:	e0bff617 	ldw	r2,-40(fp)
 20125d8:	10ffffc4 	addi	r3,r2,-1
 20125dc:	e0bffb17 	ldw	r2,-20(fp)
 20125e0:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 20125e4:	e17ffe17 	ldw	r5,-8(fp)
 20125e8:	e13ffd17 	ldw	r4,-12(fp)
 20125ec:	20119580 	call	2011958 <_Bfree>
  return b1;
 20125f0:	e0bffb17 	ldw	r2,-20(fp)
}
 20125f4:	e037883a 	mov	sp,fp
 20125f8:	dfc00117 	ldw	ra,4(sp)
 20125fc:	df000017 	ldw	fp,0(sp)
 2012600:	dec00204 	addi	sp,sp,8
 2012604:	f800283a 	ret

02012608 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 2012608:	defff704 	addi	sp,sp,-36
 201260c:	df000815 	stw	fp,32(sp)
 2012610:	df000804 	addi	fp,sp,32
 2012614:	e13ffe15 	stw	r4,-8(fp)
 2012618:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 201261c:	e0bffe17 	ldw	r2,-8(fp)
 2012620:	10800417 	ldw	r2,16(r2)
 2012624:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 2012628:	e0bfff17 	ldw	r2,-4(fp)
 201262c:	10800417 	ldw	r2,16(r2)
 2012630:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 2012634:	e0fffa17 	ldw	r3,-24(fp)
 2012638:	e0bffb17 	ldw	r2,-20(fp)
 201263c:	1885c83a 	sub	r2,r3,r2
 2012640:	e0bffa15 	stw	r2,-24(fp)
 2012644:	e0bffa17 	ldw	r2,-24(fp)
 2012648:	10000226 	beq	r2,zero,2012654 <__mcmp+0x4c>
    return i;
 201264c:	e0bffa17 	ldw	r2,-24(fp)
 2012650:	00002e06 	br	201270c <__mcmp+0x104>
  xa0 = a->_x;
 2012654:	e0bffe17 	ldw	r2,-8(fp)
 2012658:	10800504 	addi	r2,r2,20
 201265c:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 2012660:	e0bffb17 	ldw	r2,-20(fp)
 2012664:	1085883a 	add	r2,r2,r2
 2012668:	1085883a 	add	r2,r2,r2
 201266c:	1007883a 	mov	r3,r2
 2012670:	e0bffc17 	ldw	r2,-16(fp)
 2012674:	10c5883a 	add	r2,r2,r3
 2012678:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 201267c:	e0bfff17 	ldw	r2,-4(fp)
 2012680:	10800504 	addi	r2,r2,20
 2012684:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 2012688:	e0bffb17 	ldw	r2,-20(fp)
 201268c:	1085883a 	add	r2,r2,r2
 2012690:	1085883a 	add	r2,r2,r2
 2012694:	1007883a 	mov	r3,r2
 2012698:	e0bffd17 	ldw	r2,-12(fp)
 201269c:	10c5883a 	add	r2,r2,r3
 20126a0:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 20126a4:	e0bff817 	ldw	r2,-32(fp)
 20126a8:	10bfff04 	addi	r2,r2,-4
 20126ac:	e0bff815 	stw	r2,-32(fp)
 20126b0:	e0bff817 	ldw	r2,-32(fp)
 20126b4:	10c00017 	ldw	r3,0(r2)
 20126b8:	e0bff917 	ldw	r2,-28(fp)
 20126bc:	10bfff04 	addi	r2,r2,-4
 20126c0:	e0bff915 	stw	r2,-28(fp)
 20126c4:	e0bff917 	ldw	r2,-28(fp)
 20126c8:	10800017 	ldw	r2,0(r2)
 20126cc:	18800926 	beq	r3,r2,20126f4 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 20126d0:	e0bff817 	ldw	r2,-32(fp)
 20126d4:	10c00017 	ldw	r3,0(r2)
 20126d8:	e0bff917 	ldw	r2,-28(fp)
 20126dc:	10800017 	ldw	r2,0(r2)
 20126e0:	1880022e 	bgeu	r3,r2,20126ec <__mcmp+0xe4>
 20126e4:	00bfffc4 	movi	r2,-1
 20126e8:	00000806 	br	201270c <__mcmp+0x104>
 20126ec:	00800044 	movi	r2,1
 20126f0:	00000606 	br	201270c <__mcmp+0x104>
      if (xa <= xa0)
 20126f4:	e0bff817 	ldw	r2,-32(fp)
 20126f8:	e0fffc17 	ldw	r3,-16(fp)
 20126fc:	1880012e 	bgeu	r3,r2,2012704 <__mcmp+0xfc>
	break;
    }
 2012700:	003fe806 	br	20126a4 <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 2012704:	0001883a 	nop
    }
  return 0;
 2012708:	0005883a 	mov	r2,zero
}
 201270c:	e037883a 	mov	sp,fp
 2012710:	df000017 	ldw	fp,0(sp)
 2012714:	dec00104 	addi	sp,sp,4
 2012718:	f800283a 	ret

0201271c <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 201271c:	deffef04 	addi	sp,sp,-68
 2012720:	dfc01015 	stw	ra,64(sp)
 2012724:	df000f15 	stw	fp,60(sp)
 2012728:	df000f04 	addi	fp,sp,60
 201272c:	e13ffd15 	stw	r4,-12(fp)
 2012730:	e17ffe15 	stw	r5,-8(fp)
 2012734:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 2012738:	e17fff17 	ldw	r5,-4(fp)
 201273c:	e13ffe17 	ldw	r4,-8(fp)
 2012740:	20126080 	call	2012608 <__mcmp>
 2012744:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 2012748:	e0bff117 	ldw	r2,-60(fp)
 201274c:	10000b1e 	bne	r2,zero,201277c <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 2012750:	000b883a 	mov	r5,zero
 2012754:	e13ffd17 	ldw	r4,-12(fp)
 2012758:	20118280 	call	2011828 <_Balloc>
 201275c:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 2012760:	e0bff717 	ldw	r2,-36(fp)
 2012764:	00c00044 	movi	r3,1
 2012768:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 201276c:	e0bff717 	ldw	r2,-36(fp)
 2012770:	10000515 	stw	zero,20(r2)
      return c;
 2012774:	e0bff717 	ldw	r2,-36(fp)
 2012778:	00008c06 	br	20129ac <__mdiff+0x290>
    }
  if (i < 0)
 201277c:	e0bff117 	ldw	r2,-60(fp)
 2012780:	1000090e 	bge	r2,zero,20127a8 <__mdiff+0x8c>
    {
      c = a;
 2012784:	e0bffe17 	ldw	r2,-8(fp)
 2012788:	e0bff715 	stw	r2,-36(fp)
      a = b;
 201278c:	e0bfff17 	ldw	r2,-4(fp)
 2012790:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 2012794:	e0bff717 	ldw	r2,-36(fp)
 2012798:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 201279c:	00800044 	movi	r2,1
 20127a0:	e0bff115 	stw	r2,-60(fp)
 20127a4:	00000106 	br	20127ac <__mdiff+0x90>
    }
  else
    i = 0;
 20127a8:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 20127ac:	e0bffe17 	ldw	r2,-8(fp)
 20127b0:	10800117 	ldw	r2,4(r2)
 20127b4:	100b883a 	mov	r5,r2
 20127b8:	e13ffd17 	ldw	r4,-12(fp)
 20127bc:	20118280 	call	2011828 <_Balloc>
 20127c0:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 20127c4:	e0bff717 	ldw	r2,-36(fp)
 20127c8:	e0fff117 	ldw	r3,-60(fp)
 20127cc:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 20127d0:	e0bffe17 	ldw	r2,-8(fp)
 20127d4:	10800417 	ldw	r2,16(r2)
 20127d8:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 20127dc:	e0bffe17 	ldw	r2,-8(fp)
 20127e0:	10800504 	addi	r2,r2,20
 20127e4:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 20127e8:	e0bff217 	ldw	r2,-56(fp)
 20127ec:	1085883a 	add	r2,r2,r2
 20127f0:	1085883a 	add	r2,r2,r2
 20127f4:	1007883a 	mov	r3,r2
 20127f8:	e0bff417 	ldw	r2,-48(fp)
 20127fc:	10c5883a 	add	r2,r2,r3
 2012800:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 2012804:	e0bfff17 	ldw	r2,-4(fp)
 2012808:	10800417 	ldw	r2,16(r2)
 201280c:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 2012810:	e0bfff17 	ldw	r2,-4(fp)
 2012814:	10800504 	addi	r2,r2,20
 2012818:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 201281c:	e0bff917 	ldw	r2,-28(fp)
 2012820:	1085883a 	add	r2,r2,r2
 2012824:	1085883a 	add	r2,r2,r2
 2012828:	1007883a 	mov	r3,r2
 201282c:	e0bff517 	ldw	r2,-44(fp)
 2012830:	10c5883a 	add	r2,r2,r3
 2012834:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 2012838:	e0bff717 	ldw	r2,-36(fp)
 201283c:	10800504 	addi	r2,r2,20
 2012840:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 2012844:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 2012848:	e0bff417 	ldw	r2,-48(fp)
 201284c:	10800017 	ldw	r2,0(r2)
 2012850:	10ffffcc 	andi	r3,r2,65535
 2012854:	e0bff517 	ldw	r2,-44(fp)
 2012858:	10800017 	ldw	r2,0(r2)
 201285c:	10bfffcc 	andi	r2,r2,65535
 2012860:	1887c83a 	sub	r3,r3,r2
 2012864:	e0bff317 	ldw	r2,-52(fp)
 2012868:	1885883a 	add	r2,r3,r2
 201286c:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 2012870:	e0bffb17 	ldw	r2,-20(fp)
 2012874:	1005d43a 	srai	r2,r2,16
 2012878:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 201287c:	e0bff417 	ldw	r2,-48(fp)
 2012880:	10c00104 	addi	r3,r2,4
 2012884:	e0fff415 	stw	r3,-48(fp)
 2012888:	10800017 	ldw	r2,0(r2)
 201288c:	1006d43a 	srli	r3,r2,16
 2012890:	e0bff517 	ldw	r2,-44(fp)
 2012894:	11000104 	addi	r4,r2,4
 2012898:	e13ff515 	stw	r4,-44(fp)
 201289c:	10800017 	ldw	r2,0(r2)
 20128a0:	1004d43a 	srli	r2,r2,16
 20128a4:	1887c83a 	sub	r3,r3,r2
 20128a8:	e0bff317 	ldw	r2,-52(fp)
 20128ac:	1885883a 	add	r2,r3,r2
 20128b0:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 20128b4:	e0bffc17 	ldw	r2,-16(fp)
 20128b8:	1005d43a 	srai	r2,r2,16
 20128bc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 20128c0:	e0bff617 	ldw	r2,-40(fp)
 20128c4:	10c00104 	addi	r3,r2,4
 20128c8:	e0fff615 	stw	r3,-40(fp)
 20128cc:	e0fffc17 	ldw	r3,-16(fp)
 20128d0:	1808943a 	slli	r4,r3,16
 20128d4:	e0fffb17 	ldw	r3,-20(fp)
 20128d8:	18ffffcc 	andi	r3,r3,65535
 20128dc:	20c6b03a 	or	r3,r4,r3
 20128e0:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 20128e4:	e0fff517 	ldw	r3,-44(fp)
 20128e8:	e0bffa17 	ldw	r2,-24(fp)
 20128ec:	18bfd636 	bltu	r3,r2,2012848 <__mdiff+0x12c>
  while (xa < xae)
 20128f0:	00001d06 	br	2012968 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 20128f4:	e0bff417 	ldw	r2,-48(fp)
 20128f8:	10800017 	ldw	r2,0(r2)
 20128fc:	10ffffcc 	andi	r3,r2,65535
 2012900:	e0bff317 	ldw	r2,-52(fp)
 2012904:	1885883a 	add	r2,r3,r2
 2012908:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 201290c:	e0bffb17 	ldw	r2,-20(fp)
 2012910:	1005d43a 	srai	r2,r2,16
 2012914:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 2012918:	e0bff417 	ldw	r2,-48(fp)
 201291c:	10c00104 	addi	r3,r2,4
 2012920:	e0fff415 	stw	r3,-48(fp)
 2012924:	10800017 	ldw	r2,0(r2)
 2012928:	1006d43a 	srli	r3,r2,16
 201292c:	e0bff317 	ldw	r2,-52(fp)
 2012930:	1885883a 	add	r2,r3,r2
 2012934:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 2012938:	e0bffc17 	ldw	r2,-16(fp)
 201293c:	1005d43a 	srai	r2,r2,16
 2012940:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 2012944:	e0bff617 	ldw	r2,-40(fp)
 2012948:	10c00104 	addi	r3,r2,4
 201294c:	e0fff615 	stw	r3,-40(fp)
 2012950:	e0fffc17 	ldw	r3,-16(fp)
 2012954:	1808943a 	slli	r4,r3,16
 2012958:	e0fffb17 	ldw	r3,-20(fp)
 201295c:	18ffffcc 	andi	r3,r3,65535
 2012960:	20c6b03a 	or	r3,r4,r3
 2012964:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 2012968:	e0fff417 	ldw	r3,-48(fp)
 201296c:	e0bff817 	ldw	r2,-32(fp)
 2012970:	18bfe036 	bltu	r3,r2,20128f4 <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 2012974:	00000306 	br	2012984 <__mdiff+0x268>
    wa--;
 2012978:	e0bff217 	ldw	r2,-56(fp)
 201297c:	10bfffc4 	addi	r2,r2,-1
 2012980:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 2012984:	e0bff617 	ldw	r2,-40(fp)
 2012988:	10bfff04 	addi	r2,r2,-4
 201298c:	e0bff615 	stw	r2,-40(fp)
 2012990:	e0bff617 	ldw	r2,-40(fp)
 2012994:	10800017 	ldw	r2,0(r2)
 2012998:	103ff726 	beq	r2,zero,2012978 <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 201299c:	e0bff717 	ldw	r2,-36(fp)
 20129a0:	e0fff217 	ldw	r3,-56(fp)
 20129a4:	10c00415 	stw	r3,16(r2)
  return c;
 20129a8:	e0bff717 	ldw	r2,-36(fp)
}
 20129ac:	e037883a 	mov	sp,fp
 20129b0:	dfc00117 	ldw	ra,4(sp)
 20129b4:	df000017 	ldw	fp,0(sp)
 20129b8:	dec00204 	addi	sp,sp,8
 20129bc:	f800283a 	ret

020129c0 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 20129c0:	defff804 	addi	sp,sp,-32
 20129c4:	df000715 	stw	fp,28(sp)
 20129c8:	dc000615 	stw	r16,24(sp)
 20129cc:	df000704 	addi	fp,sp,28
 20129d0:	e13ffd15 	stw	r4,-12(fp)
 20129d4:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 20129d8:	e0bffd17 	ldw	r2,-12(fp)
 20129dc:	e0bff915 	stw	r2,-28(fp)
 20129e0:	e0bffe17 	ldw	r2,-8(fp)
 20129e4:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 20129e8:	e0bffa17 	ldw	r2,-24(fp)
 20129ec:	10dffc2c 	andhi	r3,r2,32752
 20129f0:	00bf3034 	movhi	r2,64704
 20129f4:	1885883a 	add	r2,r3,r2
 20129f8:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 20129fc:	0400040e 	bge	zero,r16,2012a10 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 2012a00:	8005883a 	mov	r2,r16
 2012a04:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 2012a08:	e03ffb15 	stw	zero,-20(fp)
 2012a0c:	00001406 	br	2012a60 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 2012a10:	0405c83a 	sub	r2,zero,r16
 2012a14:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 2012a18:	80800508 	cmpgei	r2,r16,20
 2012a1c:	1000051e 	bne	r2,zero,2012a34 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 2012a20:	00800234 	movhi	r2,8
 2012a24:	1405d83a 	sra	r2,r2,r16
 2012a28:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 2012a2c:	e03ffb15 	stw	zero,-20(fp)
 2012a30:	00000b06 	br	2012a60 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 2012a34:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 2012a38:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 2012a3c:	808007c8 	cmpgei	r2,r16,31
 2012a40:	1000051e 	bne	r2,zero,2012a58 <__ulp+0x98>
 2012a44:	008007c4 	movi	r2,31
 2012a48:	1405c83a 	sub	r2,r2,r16
 2012a4c:	00c00044 	movi	r3,1
 2012a50:	1884983a 	sll	r2,r3,r2
 2012a54:	00000106 	br	2012a5c <__ulp+0x9c>
 2012a58:	00800044 	movi	r2,1
 2012a5c:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 2012a60:	e0bffb17 	ldw	r2,-20(fp)
 2012a64:	e0fffc17 	ldw	r3,-16(fp)
 2012a68:	1009883a 	mov	r4,r2
 2012a6c:	180b883a 	mov	r5,r3
}
 2012a70:	2005883a 	mov	r2,r4
 2012a74:	2807883a 	mov	r3,r5
 2012a78:	e6ffff04 	addi	sp,fp,-4
 2012a7c:	df000117 	ldw	fp,4(sp)
 2012a80:	dc000017 	ldw	r16,0(sp)
 2012a84:	dec00204 	addi	sp,sp,8
 2012a88:	f800283a 	ret

02012a8c <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 2012a8c:	defff404 	addi	sp,sp,-48
 2012a90:	dfc00b15 	stw	ra,44(sp)
 2012a94:	df000a15 	stw	fp,40(sp)
 2012a98:	df000a04 	addi	fp,sp,40
 2012a9c:	e13ffe15 	stw	r4,-8(fp)
 2012aa0:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 2012aa4:	e0bffe17 	ldw	r2,-8(fp)
 2012aa8:	10800504 	addi	r2,r2,20
 2012aac:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 2012ab0:	e0bffe17 	ldw	r2,-8(fp)
 2012ab4:	10800417 	ldw	r2,16(r2)
 2012ab8:	1085883a 	add	r2,r2,r2
 2012abc:	1085883a 	add	r2,r2,r2
 2012ac0:	1007883a 	mov	r3,r2
 2012ac4:	e0bff717 	ldw	r2,-36(fp)
 2012ac8:	10c5883a 	add	r2,r2,r3
 2012acc:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 2012ad0:	e0bff617 	ldw	r2,-40(fp)
 2012ad4:	10bfff04 	addi	r2,r2,-4
 2012ad8:	e0bff615 	stw	r2,-40(fp)
 2012adc:	e0bff617 	ldw	r2,-40(fp)
 2012ae0:	10800017 	ldw	r2,0(r2)
 2012ae4:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 2012ae8:	e13ff817 	ldw	r4,-32(fp)
 2012aec:	2011cf40 	call	2011cf4 <__hi0bits>
 2012af0:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 2012af4:	00c00804 	movi	r3,32
 2012af8:	e0bff917 	ldw	r2,-28(fp)
 2012afc:	1887c83a 	sub	r3,r3,r2
 2012b00:	e0bfff17 	ldw	r2,-4(fp)
 2012b04:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 2012b08:	e0bff917 	ldw	r2,-28(fp)
 2012b0c:	108002c8 	cmpgei	r2,r2,11
 2012b10:	10001e1e 	bne	r2,zero,2012b8c <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 2012b14:	00c002c4 	movi	r3,11
 2012b18:	e0bff917 	ldw	r2,-28(fp)
 2012b1c:	1885c83a 	sub	r2,r3,r2
 2012b20:	e0fff817 	ldw	r3,-32(fp)
 2012b24:	1884d83a 	srl	r2,r3,r2
 2012b28:	108ffc34 	orhi	r2,r2,16368
 2012b2c:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 2012b30:	e0bff617 	ldw	r2,-40(fp)
 2012b34:	e0fff717 	ldw	r3,-36(fp)
 2012b38:	1880062e 	bgeu	r3,r2,2012b54 <__b2d+0xc8>
 2012b3c:	e0bff617 	ldw	r2,-40(fp)
 2012b40:	10bfff04 	addi	r2,r2,-4
 2012b44:	e0bff615 	stw	r2,-40(fp)
 2012b48:	e0bff617 	ldw	r2,-40(fp)
 2012b4c:	10800017 	ldw	r2,0(r2)
 2012b50:	00000106 	br	2012b58 <__b2d+0xcc>
 2012b54:	0005883a 	mov	r2,zero
 2012b58:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 2012b5c:	e0bff917 	ldw	r2,-28(fp)
 2012b60:	10800544 	addi	r2,r2,21
 2012b64:	e0fff817 	ldw	r3,-32(fp)
 2012b68:	1886983a 	sll	r3,r3,r2
 2012b6c:	010002c4 	movi	r4,11
 2012b70:	e0bff917 	ldw	r2,-28(fp)
 2012b74:	2085c83a 	sub	r2,r4,r2
 2012b78:	e13ffa17 	ldw	r4,-24(fp)
 2012b7c:	2084d83a 	srl	r2,r4,r2
 2012b80:	1884b03a 	or	r2,r3,r2
 2012b84:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 2012b88:	00003606 	br	2012c64 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 2012b8c:	e0bff617 	ldw	r2,-40(fp)
 2012b90:	e0fff717 	ldw	r3,-36(fp)
 2012b94:	1880062e 	bgeu	r3,r2,2012bb0 <__b2d+0x124>
 2012b98:	e0bff617 	ldw	r2,-40(fp)
 2012b9c:	10bfff04 	addi	r2,r2,-4
 2012ba0:	e0bff615 	stw	r2,-40(fp)
 2012ba4:	e0bff617 	ldw	r2,-40(fp)
 2012ba8:	10800017 	ldw	r2,0(r2)
 2012bac:	00000106 	br	2012bb4 <__b2d+0x128>
 2012bb0:	0005883a 	mov	r2,zero
 2012bb4:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 2012bb8:	e0bff917 	ldw	r2,-28(fp)
 2012bbc:	10bffd44 	addi	r2,r2,-11
 2012bc0:	e0bff915 	stw	r2,-28(fp)
 2012bc4:	e0bff917 	ldw	r2,-28(fp)
 2012bc8:	10002126 	beq	r2,zero,2012c50 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 2012bcc:	e0fff817 	ldw	r3,-32(fp)
 2012bd0:	e0bff917 	ldw	r2,-28(fp)
 2012bd4:	1886983a 	sll	r3,r3,r2
 2012bd8:	01000804 	movi	r4,32
 2012bdc:	e0bff917 	ldw	r2,-28(fp)
 2012be0:	2085c83a 	sub	r2,r4,r2
 2012be4:	e13ffb17 	ldw	r4,-20(fp)
 2012be8:	2084d83a 	srl	r2,r4,r2
 2012bec:	1884b03a 	or	r2,r3,r2
 2012bf0:	108ffc34 	orhi	r2,r2,16368
 2012bf4:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 2012bf8:	e0bff617 	ldw	r2,-40(fp)
 2012bfc:	e0fff717 	ldw	r3,-36(fp)
 2012c00:	1880062e 	bgeu	r3,r2,2012c1c <__b2d+0x190>
 2012c04:	e0bff617 	ldw	r2,-40(fp)
 2012c08:	10bfff04 	addi	r2,r2,-4
 2012c0c:	e0bff615 	stw	r2,-40(fp)
 2012c10:	e0bff617 	ldw	r2,-40(fp)
 2012c14:	10800017 	ldw	r2,0(r2)
 2012c18:	00000106 	br	2012c20 <__b2d+0x194>
 2012c1c:	0005883a 	mov	r2,zero
 2012c20:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 2012c24:	e0fffb17 	ldw	r3,-20(fp)
 2012c28:	e0bff917 	ldw	r2,-28(fp)
 2012c2c:	1886983a 	sll	r3,r3,r2
 2012c30:	01000804 	movi	r4,32
 2012c34:	e0bff917 	ldw	r2,-28(fp)
 2012c38:	2085c83a 	sub	r2,r4,r2
 2012c3c:	e13ff817 	ldw	r4,-32(fp)
 2012c40:	2084d83a 	srl	r2,r4,r2
 2012c44:	1884b03a 	or	r2,r3,r2
 2012c48:	e0bffc15 	stw	r2,-16(fp)
 2012c4c:	00000506 	br	2012c64 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 2012c50:	e0bff817 	ldw	r2,-32(fp)
 2012c54:	108ffc34 	orhi	r2,r2,16368
 2012c58:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 2012c5c:	e0bffb17 	ldw	r2,-20(fp)
 2012c60:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 2012c64:	e0bffc17 	ldw	r2,-16(fp)
 2012c68:	e0fffd17 	ldw	r3,-12(fp)
 2012c6c:	1009883a 	mov	r4,r2
 2012c70:	180b883a 	mov	r5,r3
}
 2012c74:	2005883a 	mov	r2,r4
 2012c78:	2807883a 	mov	r3,r5
 2012c7c:	e037883a 	mov	sp,fp
 2012c80:	dfc00117 	ldw	ra,4(sp)
 2012c84:	df000017 	ldw	fp,0(sp)
 2012c88:	dec00204 	addi	sp,sp,8
 2012c8c:	f800283a 	ret

02012c90 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 2012c90:	defff004 	addi	sp,sp,-64
 2012c94:	dfc00f15 	stw	ra,60(sp)
 2012c98:	df000e15 	stw	fp,56(sp)
 2012c9c:	dc000d15 	stw	r16,52(sp)
 2012ca0:	df000e04 	addi	fp,sp,56
 2012ca4:	e13ffb15 	stw	r4,-20(fp)
 2012ca8:	e17ffc15 	stw	r5,-16(fp)
 2012cac:	e1bffd15 	stw	r6,-12(fp)
 2012cb0:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 2012cb4:	e0bffc17 	ldw	r2,-16(fp)
 2012cb8:	e0bff715 	stw	r2,-36(fp)
 2012cbc:	e0bffd17 	ldw	r2,-12(fp)
 2012cc0:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 2012cc4:	e0bffc17 	ldw	r2,-16(fp)
 2012cc8:	e0bff715 	stw	r2,-36(fp)
 2012ccc:	e0bffd17 	ldw	r2,-12(fp)
 2012cd0:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 2012cd4:	01400044 	movi	r5,1
 2012cd8:	e13ffb17 	ldw	r4,-20(fp)
 2012cdc:	20118280 	call	2011828 <_Balloc>
 2012ce0:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 2012ce4:	e0bff417 	ldw	r2,-48(fp)
 2012ce8:	10800504 	addi	r2,r2,20
 2012cec:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 2012cf0:	e0fff817 	ldw	r3,-32(fp)
 2012cf4:	00800434 	movhi	r2,16
 2012cf8:	10bfffc4 	addi	r2,r2,-1
 2012cfc:	1884703a 	and	r2,r3,r2
 2012d00:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 2012d04:	e0fff817 	ldw	r3,-32(fp)
 2012d08:	00a00034 	movhi	r2,32768
 2012d0c:	10bfffc4 	addi	r2,r2,-1
 2012d10:	1884703a 	and	r2,r3,r2
 2012d14:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 2012d18:	e0bff817 	ldw	r2,-32(fp)
 2012d1c:	1004d53a 	srli	r2,r2,20
 2012d20:	e0bff615 	stw	r2,-40(fp)
 2012d24:	e0bff617 	ldw	r2,-40(fp)
 2012d28:	10000326 	beq	r2,zero,2012d38 <__d2b+0xa8>
    z |= Exp_msk1;
 2012d2c:	e0bffa17 	ldw	r2,-24(fp)
 2012d30:	10800434 	orhi	r2,r2,16
 2012d34:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 2012d38:	e0bff717 	ldw	r2,-36(fp)
 2012d3c:	10002826 	beq	r2,zero,2012de0 <__d2b+0x150>
    {
      y = d1;
 2012d40:	e0bff717 	ldw	r2,-36(fp)
 2012d44:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 2012d48:	e0bff904 	addi	r2,fp,-28
 2012d4c:	1009883a 	mov	r4,r2
 2012d50:	2011d840 	call	2011d84 <__lo0bits>
 2012d54:	e0bff315 	stw	r2,-52(fp)
      if (k)
 2012d58:	e0bff317 	ldw	r2,-52(fp)
 2012d5c:	10000e26 	beq	r2,zero,2012d98 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 2012d60:	e0fffa17 	ldw	r3,-24(fp)
 2012d64:	01000804 	movi	r4,32
 2012d68:	e0bff317 	ldw	r2,-52(fp)
 2012d6c:	2085c83a 	sub	r2,r4,r2
 2012d70:	1886983a 	sll	r3,r3,r2
 2012d74:	e0bff917 	ldw	r2,-28(fp)
 2012d78:	1886b03a 	or	r3,r3,r2
 2012d7c:	e0bff517 	ldw	r2,-44(fp)
 2012d80:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 2012d84:	e0fffa17 	ldw	r3,-24(fp)
 2012d88:	e0bff317 	ldw	r2,-52(fp)
 2012d8c:	1884d83a 	srl	r2,r3,r2
 2012d90:	e0bffa15 	stw	r2,-24(fp)
 2012d94:	00000306 	br	2012da4 <__d2b+0x114>
	}
      else
	x[0] = y;
 2012d98:	e0fff917 	ldw	r3,-28(fp)
 2012d9c:	e0bff517 	ldw	r2,-44(fp)
 2012da0:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 2012da4:	e0bff517 	ldw	r2,-44(fp)
 2012da8:	10800104 	addi	r2,r2,4
 2012dac:	e0fffa17 	ldw	r3,-24(fp)
 2012db0:	10c00015 	stw	r3,0(r2)
 2012db4:	10800017 	ldw	r2,0(r2)
 2012db8:	10000226 	beq	r2,zero,2012dc4 <__d2b+0x134>
 2012dbc:	00800084 	movi	r2,2
 2012dc0:	00000106 	br	2012dc8 <__d2b+0x138>
 2012dc4:	00800044 	movi	r2,1
 2012dc8:	e0fff417 	ldw	r3,-48(fp)
 2012dcc:	18800415 	stw	r2,16(r3)
 2012dd0:	e0bff417 	ldw	r2,-48(fp)
 2012dd4:	10800417 	ldw	r2,16(r2)
 2012dd8:	e0bff215 	stw	r2,-56(fp)
 2012ddc:	00001006 	br	2012e20 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 2012de0:	e0bffa04 	addi	r2,fp,-24
 2012de4:	1009883a 	mov	r4,r2
 2012de8:	2011d840 	call	2011d84 <__lo0bits>
 2012dec:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 2012df0:	e0fffa17 	ldw	r3,-24(fp)
 2012df4:	e0bff517 	ldw	r2,-44(fp)
 2012df8:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 2012dfc:	e0bff417 	ldw	r2,-48(fp)
 2012e00:	00c00044 	movi	r3,1
 2012e04:	10c00415 	stw	r3,16(r2)
 2012e08:	e0bff417 	ldw	r2,-48(fp)
 2012e0c:	10800417 	ldw	r2,16(r2)
 2012e10:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 2012e14:	e0bff317 	ldw	r2,-52(fp)
 2012e18:	10800804 	addi	r2,r2,32
 2012e1c:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 2012e20:	e0bff617 	ldw	r2,-40(fp)
 2012e24:	10000c26 	beq	r2,zero,2012e58 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 2012e28:	e0bff617 	ldw	r2,-40(fp)
 2012e2c:	10fef344 	addi	r3,r2,-1075
 2012e30:	e0bff317 	ldw	r2,-52(fp)
 2012e34:	1887883a 	add	r3,r3,r2
 2012e38:	e0bffe17 	ldw	r2,-8(fp)
 2012e3c:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 2012e40:	00c00d44 	movi	r3,53
 2012e44:	e0bff317 	ldw	r2,-52(fp)
 2012e48:	1887c83a 	sub	r3,r3,r2
 2012e4c:	e0800217 	ldw	r2,8(fp)
 2012e50:	10c00015 	stw	r3,0(r2)
 2012e54:	00001706 	br	2012eb4 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 2012e58:	e0bff617 	ldw	r2,-40(fp)
 2012e5c:	10fef384 	addi	r3,r2,-1074
 2012e60:	e0bff317 	ldw	r2,-52(fp)
 2012e64:	1887883a 	add	r3,r3,r2
 2012e68:	e0bffe17 	ldw	r2,-8(fp)
 2012e6c:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 2012e70:	e0bff217 	ldw	r2,-56(fp)
 2012e74:	1020917a 	slli	r16,r2,5
 2012e78:	e0fff217 	ldw	r3,-56(fp)
 2012e7c:	00900034 	movhi	r2,16384
 2012e80:	10bfffc4 	addi	r2,r2,-1
 2012e84:	1885883a 	add	r2,r3,r2
 2012e88:	1085883a 	add	r2,r2,r2
 2012e8c:	1085883a 	add	r2,r2,r2
 2012e90:	1007883a 	mov	r3,r2
 2012e94:	e0bff517 	ldw	r2,-44(fp)
 2012e98:	10c5883a 	add	r2,r2,r3
 2012e9c:	10800017 	ldw	r2,0(r2)
 2012ea0:	1009883a 	mov	r4,r2
 2012ea4:	2011cf40 	call	2011cf4 <__hi0bits>
 2012ea8:	8087c83a 	sub	r3,r16,r2
 2012eac:	e0800217 	ldw	r2,8(fp)
 2012eb0:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 2012eb4:	e0bff417 	ldw	r2,-48(fp)
}
 2012eb8:	e6ffff04 	addi	sp,fp,-4
 2012ebc:	dfc00217 	ldw	ra,8(sp)
 2012ec0:	df000117 	ldw	fp,4(sp)
 2012ec4:	dc000017 	ldw	r16,0(sp)
 2012ec8:	dec00304 	addi	sp,sp,12
 2012ecc:	f800283a 	ret

02012ed0 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 2012ed0:	defff504 	addi	sp,sp,-44
 2012ed4:	dfc00a15 	stw	ra,40(sp)
 2012ed8:	df000915 	stw	fp,36(sp)
 2012edc:	df000904 	addi	fp,sp,36
 2012ee0:	e13ffe15 	stw	r4,-8(fp)
 2012ee4:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 2012ee8:	e0bffc04 	addi	r2,fp,-16
 2012eec:	100b883a 	mov	r5,r2
 2012ef0:	e13ffe17 	ldw	r4,-8(fp)
 2012ef4:	2012a8c0 	call	2012a8c <__b2d>
 2012ef8:	1009883a 	mov	r4,r2
 2012efc:	180b883a 	mov	r5,r3
 2012f00:	e13ff815 	stw	r4,-32(fp)
 2012f04:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 2012f08:	e0bffd04 	addi	r2,fp,-12
 2012f0c:	100b883a 	mov	r5,r2
 2012f10:	e13fff17 	ldw	r4,-4(fp)
 2012f14:	2012a8c0 	call	2012a8c <__b2d>
 2012f18:	1009883a 	mov	r4,r2
 2012f1c:	180b883a 	mov	r5,r3
 2012f20:	e13ffa15 	stw	r4,-24(fp)
 2012f24:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 2012f28:	e0fffc17 	ldw	r3,-16(fp)
 2012f2c:	e0bffd17 	ldw	r2,-12(fp)
 2012f30:	1887c83a 	sub	r3,r3,r2
 2012f34:	e0bffe17 	ldw	r2,-8(fp)
 2012f38:	11000417 	ldw	r4,16(r2)
 2012f3c:	e0bfff17 	ldw	r2,-4(fp)
 2012f40:	10800417 	ldw	r2,16(r2)
 2012f44:	2085c83a 	sub	r2,r4,r2
 2012f48:	1004917a 	slli	r2,r2,5
 2012f4c:	1885883a 	add	r2,r3,r2
 2012f50:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 2012f54:	e0bff717 	ldw	r2,-36(fp)
 2012f58:	0080060e 	bge	zero,r2,2012f74 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 2012f5c:	e0fff917 	ldw	r3,-28(fp)
 2012f60:	e0bff717 	ldw	r2,-36(fp)
 2012f64:	1004953a 	slli	r2,r2,20
 2012f68:	1885883a 	add	r2,r3,r2
 2012f6c:	e0bff915 	stw	r2,-28(fp)
 2012f70:	00000806 	br	2012f94 <__ratio+0xc4>
  else
    {
      k = -k;
 2012f74:	e0bff717 	ldw	r2,-36(fp)
 2012f78:	0085c83a 	sub	r2,zero,r2
 2012f7c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 2012f80:	e0fffb17 	ldw	r3,-20(fp)
 2012f84:	e0bff717 	ldw	r2,-36(fp)
 2012f88:	1004953a 	slli	r2,r2,20
 2012f8c:	1885883a 	add	r2,r3,r2
 2012f90:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 2012f94:	e0bff817 	ldw	r2,-32(fp)
 2012f98:	e0fff917 	ldw	r3,-28(fp)
 2012f9c:	e13ffa17 	ldw	r4,-24(fp)
 2012fa0:	e17ffb17 	ldw	r5,-20(fp)
 2012fa4:	200d883a 	mov	r6,r4
 2012fa8:	280f883a 	mov	r7,r5
 2012fac:	1009883a 	mov	r4,r2
 2012fb0:	180b883a 	mov	r5,r3
 2012fb4:	2007df00 	call	2007df0 <__divdf3>
 2012fb8:	100f883a 	mov	r7,r2
 2012fbc:	1811883a 	mov	r8,r3
 2012fc0:	380b883a 	mov	r5,r7
 2012fc4:	400d883a 	mov	r6,r8
 2012fc8:	2807883a 	mov	r3,r5
 2012fcc:	3009883a 	mov	r4,r6
}
 2012fd0:	1805883a 	mov	r2,r3
 2012fd4:	2007883a 	mov	r3,r4
 2012fd8:	e037883a 	mov	sp,fp
 2012fdc:	dfc00117 	ldw	ra,4(sp)
 2012fe0:	df000017 	ldw	fp,0(sp)
 2012fe4:	dec00204 	addi	sp,sp,8
 2012fe8:	f800283a 	ret

02012fec <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 2012fec:	defffb04 	addi	sp,sp,-20
 2012ff0:	dfc00415 	stw	ra,16(sp)
 2012ff4:	df000315 	stw	fp,12(sp)
 2012ff8:	df000304 	addi	fp,sp,12
 2012ffc:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 2013000:	e03ffd15 	stw	zero,-12(fp)
 2013004:	008ffc34 	movhi	r2,16368
 2013008:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 201300c:	e0bfff17 	ldw	r2,-4(fp)
 2013010:	10800608 	cmpgei	r2,r2,24
 2013014:	1000141e 	bne	r2,zero,2013068 <_mprec_log10+0x7c>
    return tens[dig];
 2013018:	008080b4 	movhi	r2,514
 201301c:	108c7504 	addi	r2,r2,12756
 2013020:	e0ffff17 	ldw	r3,-4(fp)
 2013024:	180690fa 	slli	r3,r3,3
 2013028:	10c9883a 	add	r4,r2,r3
 201302c:	20800017 	ldw	r2,0(r4)
 2013030:	20c00117 	ldw	r3,4(r4)
 2013034:	00001006 	br	2013078 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 2013038:	000d883a 	mov	r6,zero
 201303c:	01d00934 	movhi	r7,16420
 2013040:	e13ffd17 	ldw	r4,-12(fp)
 2013044:	e17ffe17 	ldw	r5,-8(fp)
 2013048:	20089300 	call	2008930 <__muldf3>
 201304c:	1009883a 	mov	r4,r2
 2013050:	180b883a 	mov	r5,r3
 2013054:	e13ffd15 	stw	r4,-12(fp)
 2013058:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 201305c:	e0bfff17 	ldw	r2,-4(fp)
 2013060:	10bfffc4 	addi	r2,r2,-1
 2013064:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 2013068:	e0bfff17 	ldw	r2,-4(fp)
 201306c:	00bff216 	blt	zero,r2,2013038 <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 2013070:	e0bffd17 	ldw	r2,-12(fp)
 2013074:	e0fffe17 	ldw	r3,-8(fp)
 2013078:	1009883a 	mov	r4,r2
 201307c:	180b883a 	mov	r5,r3
}
 2013080:	2005883a 	mov	r2,r4
 2013084:	2807883a 	mov	r3,r5
 2013088:	e037883a 	mov	sp,fp
 201308c:	dfc00117 	ldw	ra,4(sp)
 2013090:	df000017 	ldw	fp,0(sp)
 2013094:	dec00204 	addi	sp,sp,8
 2013098:	f800283a 	ret

0201309c <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 201309c:	defff904 	addi	sp,sp,-28
 20130a0:	df000615 	stw	fp,24(sp)
 20130a4:	df000604 	addi	fp,sp,24
 20130a8:	e13ffd15 	stw	r4,-12(fp)
 20130ac:	e17ffe15 	stw	r5,-8(fp)
 20130b0:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 20130b4:	e0bffe17 	ldw	r2,-8(fp)
 20130b8:	10bfffc4 	addi	r2,r2,-1
 20130bc:	1005d17a 	srai	r2,r2,5
 20130c0:	10800044 	addi	r2,r2,1
 20130c4:	1085883a 	add	r2,r2,r2
 20130c8:	1085883a 	add	r2,r2,r2
 20130cc:	1007883a 	mov	r3,r2
 20130d0:	e0bffd17 	ldw	r2,-12(fp)
 20130d4:	10c5883a 	add	r2,r2,r3
 20130d8:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 20130dc:	e0bfff17 	ldw	r2,-4(fp)
 20130e0:	10800504 	addi	r2,r2,20
 20130e4:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 20130e8:	e0bfff17 	ldw	r2,-4(fp)
 20130ec:	10800417 	ldw	r2,16(r2)
 20130f0:	1085883a 	add	r2,r2,r2
 20130f4:	1085883a 	add	r2,r2,r2
 20130f8:	1007883a 	mov	r3,r2
 20130fc:	e0bffa17 	ldw	r2,-24(fp)
 2013100:	10c5883a 	add	r2,r2,r3
 2013104:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 2013108:	00000806 	br	201312c <__copybits+0x90>
		*c++ = *x++;
 201310c:	e0bffd17 	ldw	r2,-12(fp)
 2013110:	10c00104 	addi	r3,r2,4
 2013114:	e0fffd15 	stw	r3,-12(fp)
 2013118:	e0fffa17 	ldw	r3,-24(fp)
 201311c:	19000104 	addi	r4,r3,4
 2013120:	e13ffa15 	stw	r4,-24(fp)
 2013124:	18c00017 	ldw	r3,0(r3)
 2013128:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 201312c:	e0fffa17 	ldw	r3,-24(fp)
 2013130:	e0bffc17 	ldw	r2,-16(fp)
 2013134:	18bff536 	bltu	r3,r2,201310c <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 2013138:	00000406 	br	201314c <__copybits+0xb0>
		*c++ = 0;
 201313c:	e0bffd17 	ldw	r2,-12(fp)
 2013140:	10c00104 	addi	r3,r2,4
 2013144:	e0fffd15 	stw	r3,-12(fp)
 2013148:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 201314c:	e0fffd17 	ldw	r3,-12(fp)
 2013150:	e0bffb17 	ldw	r2,-20(fp)
 2013154:	18bff936 	bltu	r3,r2,201313c <__copybits+0xa0>
		*c++ = 0;
}
 2013158:	0001883a 	nop
 201315c:	e037883a 	mov	sp,fp
 2013160:	df000017 	ldw	fp,0(sp)
 2013164:	dec00104 	addi	sp,sp,4
 2013168:	f800283a 	ret

0201316c <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 201316c:	defff704 	addi	sp,sp,-36
 2013170:	df000815 	stw	fp,32(sp)
 2013174:	df000804 	addi	fp,sp,32
 2013178:	e13ffe15 	stw	r4,-8(fp)
 201317c:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 2013180:	e0bffe17 	ldw	r2,-8(fp)
 2013184:	10800504 	addi	r2,r2,20
 2013188:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 201318c:	e0bffe17 	ldw	r2,-8(fp)
 2013190:	10800417 	ldw	r2,16(r2)
 2013194:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 2013198:	e0bfff17 	ldw	r2,-4(fp)
 201319c:	1005d17a 	srai	r2,r2,5
 20131a0:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 20131a4:	e0bff817 	ldw	r2,-32(fp)
 20131a8:	e0fffa17 	ldw	r3,-24(fp)
 20131ac:	1880030e 	bge	r3,r2,20131bc <__any_on+0x50>
		n = nwds;
 20131b0:	e0bffa17 	ldw	r2,-24(fp)
 20131b4:	e0bff815 	stw	r2,-32(fp)
 20131b8:	00001f06 	br	2013238 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 20131bc:	e0fff817 	ldw	r3,-32(fp)
 20131c0:	e0bffa17 	ldw	r2,-24(fp)
 20131c4:	18801c0e 	bge	r3,r2,2013238 <__any_on+0xcc>
 20131c8:	e0bfff17 	ldw	r2,-4(fp)
 20131cc:	108007cc 	andi	r2,r2,31
 20131d0:	e0bfff15 	stw	r2,-4(fp)
 20131d4:	e0bfff17 	ldw	r2,-4(fp)
 20131d8:	10001726 	beq	r2,zero,2013238 <__any_on+0xcc>
		x1 = x2 = x[n];
 20131dc:	e0bff817 	ldw	r2,-32(fp)
 20131e0:	1085883a 	add	r2,r2,r2
 20131e4:	1085883a 	add	r2,r2,r2
 20131e8:	1007883a 	mov	r3,r2
 20131ec:	e0bff917 	ldw	r2,-28(fp)
 20131f0:	10c5883a 	add	r2,r2,r3
 20131f4:	10800017 	ldw	r2,0(r2)
 20131f8:	e0bffb15 	stw	r2,-20(fp)
 20131fc:	e0bffb17 	ldw	r2,-20(fp)
 2013200:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 2013204:	e0fffc17 	ldw	r3,-16(fp)
 2013208:	e0bfff17 	ldw	r2,-4(fp)
 201320c:	1884d83a 	srl	r2,r3,r2
 2013210:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 2013214:	e0fffc17 	ldw	r3,-16(fp)
 2013218:	e0bfff17 	ldw	r2,-4(fp)
 201321c:	1884983a 	sll	r2,r3,r2
 2013220:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 2013224:	e0fffc17 	ldw	r3,-16(fp)
 2013228:	e0bffb17 	ldw	r2,-20(fp)
 201322c:	18800226 	beq	r3,r2,2013238 <__any_on+0xcc>
			return 1;
 2013230:	00800044 	movi	r2,1
 2013234:	00001606 	br	2013290 <__any_on+0x124>
		}
	x0 = x;
 2013238:	e0bff917 	ldw	r2,-28(fp)
 201323c:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 2013240:	e0bff817 	ldw	r2,-32(fp)
 2013244:	1085883a 	add	r2,r2,r2
 2013248:	1085883a 	add	r2,r2,r2
 201324c:	1007883a 	mov	r3,r2
 2013250:	e0bff917 	ldw	r2,-28(fp)
 2013254:	10c5883a 	add	r2,r2,r3
 2013258:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 201325c:	00000806 	br	2013280 <__any_on+0x114>
		if (*--x)
 2013260:	e0bff917 	ldw	r2,-28(fp)
 2013264:	10bfff04 	addi	r2,r2,-4
 2013268:	e0bff915 	stw	r2,-28(fp)
 201326c:	e0bff917 	ldw	r2,-28(fp)
 2013270:	10800017 	ldw	r2,0(r2)
 2013274:	10000226 	beq	r2,zero,2013280 <__any_on+0x114>
			return 1;
 2013278:	00800044 	movi	r2,1
 201327c:	00000406 	br	2013290 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 2013280:	e0bff917 	ldw	r2,-28(fp)
 2013284:	e0fffd17 	ldw	r3,-12(fp)
 2013288:	18bff536 	bltu	r3,r2,2013260 <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 201328c:	0005883a 	mov	r2,zero
}
 2013290:	e037883a 	mov	sp,fp
 2013294:	df000017 	ldw	fp,0(sp)
 2013298:	dec00104 	addi	sp,sp,4
 201329c:	f800283a 	ret

020132a0 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 20132a0:	deffe104 	addi	sp,sp,-124
 20132a4:	dfc01e15 	stw	ra,120(sp)
 20132a8:	df001d15 	stw	fp,116(sp)
 20132ac:	df001d04 	addi	fp,sp,116
 20132b0:	e13ffd15 	stw	r4,-12(fp)
 20132b4:	e17ffe15 	stw	r5,-8(fp)
 20132b8:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 20132bc:	e0bffe17 	ldw	r2,-8(fp)
 20132c0:	1000041e 	bne	r2,zero,20132d4 <_realloc_r+0x34>
 20132c4:	e17fff17 	ldw	r5,-4(fp)
 20132c8:	e13ffd17 	ldw	r4,-12(fp)
 20132cc:	20108e80 	call	20108e8 <_malloc_r>
 20132d0:	0002ea06 	br	2013e7c <_realloc_r+0xbdc>

  MALLOC_LOCK;
 20132d4:	e13ffd17 	ldw	r4,-12(fp)
 20132d8:	2017b4c0 	call	2017b4c <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 20132dc:	e0bffe17 	ldw	r2,-8(fp)
 20132e0:	10bffe04 	addi	r2,r2,-8
 20132e4:	e0bfef15 	stw	r2,-68(fp)
 20132e8:	e0bfef17 	ldw	r2,-68(fp)
 20132ec:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 20132f0:	e0bfef17 	ldw	r2,-68(fp)
 20132f4:	10c00117 	ldw	r3,4(r2)
 20132f8:	00bfff04 	movi	r2,-4
 20132fc:	1884703a 	and	r2,r3,r2
 2013300:	e0bff015 	stw	r2,-64(fp)
 2013304:	e0bff017 	ldw	r2,-64(fp)
 2013308:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 201330c:	e0bfff17 	ldw	r2,-4(fp)
 2013310:	108002c4 	addi	r2,r2,11
 2013314:	108005f0 	cmpltui	r2,r2,23
 2013318:	1000051e 	bne	r2,zero,2013330 <_realloc_r+0x90>
 201331c:	e0bfff17 	ldw	r2,-4(fp)
 2013320:	10c002c4 	addi	r3,r2,11
 2013324:	00bffe04 	movi	r2,-8
 2013328:	1884703a 	and	r2,r3,r2
 201332c:	00000106 	br	2013334 <_realloc_r+0x94>
 2013330:	00800404 	movi	r2,16
 2013334:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 2013338:	e0bff117 	ldw	r2,-60(fp)
 201333c:	10000316 	blt	r2,zero,201334c <_realloc_r+0xac>
 2013340:	e0fff117 	ldw	r3,-60(fp)
 2013344:	e0bfff17 	ldw	r2,-4(fp)
 2013348:	1880052e 	bgeu	r3,r2,2013360 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 201334c:	e0bffd17 	ldw	r2,-12(fp)
 2013350:	00c00304 	movi	r3,12
 2013354:	10c00015 	stw	r3,0(r2)
    return 0;
 2013358:	0005883a 	mov	r2,zero
 201335c:	0002c706 	br	2013e7c <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 2013360:	e0fff017 	ldw	r3,-64(fp)
 2013364:	e0bff117 	ldw	r2,-60(fp)
 2013368:	18828b0e 	bge	r3,r2,2013d98 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 201336c:	e0ffef17 	ldw	r3,-68(fp)
 2013370:	e0bff017 	ldw	r2,-64(fp)
 2013374:	1885883a 	add	r2,r3,r2
 2013378:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 201337c:	008080b4 	movhi	r2,514
 2013380:	108e6704 	addi	r2,r2,14748
 2013384:	10c00217 	ldw	r3,8(r2)
 2013388:	e0bfe517 	ldw	r2,-108(fp)
 201338c:	18800926 	beq	r3,r2,20133b4 <_realloc_r+0x114>
 2013390:	e0bfe517 	ldw	r2,-108(fp)
 2013394:	10c00117 	ldw	r3,4(r2)
 2013398:	00bfff84 	movi	r2,-2
 201339c:	1884703a 	and	r2,r3,r2
 20133a0:	e0ffe517 	ldw	r3,-108(fp)
 20133a4:	1885883a 	add	r2,r3,r2
 20133a8:	10800117 	ldw	r2,4(r2)
 20133ac:	1080004c 	andi	r2,r2,1
 20133b0:	1000461e 	bne	r2,zero,20134cc <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 20133b4:	e0bfe517 	ldw	r2,-108(fp)
 20133b8:	10c00117 	ldw	r3,4(r2)
 20133bc:	00bfff04 	movi	r2,-4
 20133c0:	1884703a 	and	r2,r3,r2
 20133c4:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 20133c8:	008080b4 	movhi	r2,514
 20133cc:	108e6704 	addi	r2,r2,14748
 20133d0:	10c00217 	ldw	r3,8(r2)
 20133d4:	e0bfe517 	ldw	r2,-108(fp)
 20133d8:	1880251e 	bne	r3,r2,2013470 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 20133dc:	e0ffe617 	ldw	r3,-104(fp)
 20133e0:	e0bfe417 	ldw	r2,-112(fp)
 20133e4:	1885883a 	add	r2,r3,r2
 20133e8:	1007883a 	mov	r3,r2
 20133ec:	e0bff117 	ldw	r2,-60(fp)
 20133f0:	10800404 	addi	r2,r2,16
 20133f4:	18803816 	blt	r3,r2,20134d8 <_realloc_r+0x238>
        {
          newsize += nextsize;
 20133f8:	e0ffe417 	ldw	r3,-112(fp)
 20133fc:	e0bfe617 	ldw	r2,-104(fp)
 2013400:	1885883a 	add	r2,r3,r2
 2013404:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 2013408:	008080b4 	movhi	r2,514
 201340c:	108e6704 	addi	r2,r2,14748
 2013410:	e13fef17 	ldw	r4,-68(fp)
 2013414:	e0fff117 	ldw	r3,-60(fp)
 2013418:	20c7883a 	add	r3,r4,r3
 201341c:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 2013420:	008080b4 	movhi	r2,514
 2013424:	108e6704 	addi	r2,r2,14748
 2013428:	10800217 	ldw	r2,8(r2)
 201342c:	e13fe417 	ldw	r4,-112(fp)
 2013430:	e0fff117 	ldw	r3,-60(fp)
 2013434:	20c7c83a 	sub	r3,r4,r3
 2013438:	18c00054 	ori	r3,r3,1
 201343c:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 2013440:	e0bfef17 	ldw	r2,-68(fp)
 2013444:	10800117 	ldw	r2,4(r2)
 2013448:	10c0004c 	andi	r3,r2,1
 201344c:	e0bff117 	ldw	r2,-60(fp)
 2013450:	1886b03a 	or	r3,r3,r2
 2013454:	e0bfef17 	ldw	r2,-68(fp)
 2013458:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 201345c:	e13ffd17 	ldw	r4,-12(fp)
 2013460:	2017c6c0 	call	2017c6c <__malloc_unlock>
          return chunk2mem(oldp);
 2013464:	e0bfef17 	ldw	r2,-68(fp)
 2013468:	10800204 	addi	r2,r2,8
 201346c:	00028306 	br	2013e7c <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 2013470:	e0ffe617 	ldw	r3,-104(fp)
 2013474:	e0bfe417 	ldw	r2,-112(fp)
 2013478:	1885883a 	add	r2,r3,r2
 201347c:	1007883a 	mov	r3,r2
 2013480:	e0bff117 	ldw	r2,-60(fp)
 2013484:	18801416 	blt	r3,r2,20134d8 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 2013488:	e0bfe517 	ldw	r2,-108(fp)
 201348c:	10800317 	ldw	r2,12(r2)
 2013490:	e0bff215 	stw	r2,-56(fp)
 2013494:	e0bfe517 	ldw	r2,-108(fp)
 2013498:	10800217 	ldw	r2,8(r2)
 201349c:	e0bff315 	stw	r2,-52(fp)
 20134a0:	e0bff317 	ldw	r2,-52(fp)
 20134a4:	e0fff217 	ldw	r3,-56(fp)
 20134a8:	10c00315 	stw	r3,12(r2)
 20134ac:	e0bff217 	ldw	r2,-56(fp)
 20134b0:	e0fff317 	ldw	r3,-52(fp)
 20134b4:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 20134b8:	e0ffe417 	ldw	r3,-112(fp)
 20134bc:	e0bfe617 	ldw	r2,-104(fp)
 20134c0:	1885883a 	add	r2,r3,r2
 20134c4:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 20134c8:	00023306 	br	2013d98 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 20134cc:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 20134d0:	e03fe615 	stw	zero,-104(fp)
 20134d4:	00000106 	br	20134dc <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 20134d8:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 20134dc:	e0bfef17 	ldw	r2,-68(fp)
 20134e0:	10800117 	ldw	r2,4(r2)
 20134e4:	1080004c 	andi	r2,r2,1
 20134e8:	1001a91e 	bne	r2,zero,2013b90 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 20134ec:	e0bfef17 	ldw	r2,-68(fp)
 20134f0:	10800017 	ldw	r2,0(r2)
 20134f4:	0085c83a 	sub	r2,zero,r2
 20134f8:	e0ffef17 	ldw	r3,-68(fp)
 20134fc:	1885883a 	add	r2,r3,r2
 2013500:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 2013504:	e0bff417 	ldw	r2,-48(fp)
 2013508:	10c00117 	ldw	r3,4(r2)
 201350c:	00bfff04 	movi	r2,-4
 2013510:	1884703a 	and	r2,r3,r2
 2013514:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 2013518:	e0bfe517 	ldw	r2,-108(fp)
 201351c:	10012226 	beq	r2,zero,20139a8 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 2013520:	008080b4 	movhi	r2,514
 2013524:	108e6704 	addi	r2,r2,14748
 2013528:	10c00217 	ldw	r3,8(r2)
 201352c:	e0bfe517 	ldw	r2,-108(fp)
 2013530:	1880951e 	bne	r3,r2,2013788 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 2013534:	e0ffe617 	ldw	r3,-104(fp)
 2013538:	e0bff517 	ldw	r2,-44(fp)
 201353c:	1887883a 	add	r3,r3,r2
 2013540:	e0bfe417 	ldw	r2,-112(fp)
 2013544:	1885883a 	add	r2,r3,r2
 2013548:	1007883a 	mov	r3,r2
 201354c:	e0bff117 	ldw	r2,-60(fp)
 2013550:	10800404 	addi	r2,r2,16
 2013554:	18811416 	blt	r3,r2,20139a8 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 2013558:	e0bff417 	ldw	r2,-48(fp)
 201355c:	10800317 	ldw	r2,12(r2)
 2013560:	e0bff215 	stw	r2,-56(fp)
 2013564:	e0bff417 	ldw	r2,-48(fp)
 2013568:	10800217 	ldw	r2,8(r2)
 201356c:	e0bff315 	stw	r2,-52(fp)
 2013570:	e0bff317 	ldw	r2,-52(fp)
 2013574:	e0fff217 	ldw	r3,-56(fp)
 2013578:	10c00315 	stw	r3,12(r2)
 201357c:	e0bff217 	ldw	r2,-56(fp)
 2013580:	e0fff317 	ldw	r3,-52(fp)
 2013584:	10c00215 	stw	r3,8(r2)
            newp = prev;
 2013588:	e0bff417 	ldw	r2,-48(fp)
 201358c:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 2013590:	e0fff517 	ldw	r3,-44(fp)
 2013594:	e0bfe617 	ldw	r2,-104(fp)
 2013598:	1885883a 	add	r2,r3,r2
 201359c:	e0ffe417 	ldw	r3,-112(fp)
 20135a0:	1885883a 	add	r2,r3,r2
 20135a4:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 20135a8:	e0bfe317 	ldw	r2,-116(fp)
 20135ac:	10800204 	addi	r2,r2,8
 20135b0:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 20135b4:	e0bff017 	ldw	r2,-64(fp)
 20135b8:	10bfff04 	addi	r2,r2,-4
 20135bc:	e0bff715 	stw	r2,-36(fp)
 20135c0:	e0bff717 	ldw	r2,-36(fp)
 20135c4:	10800968 	cmpgeui	r2,r2,37
 20135c8:	1000521e 	bne	r2,zero,2013714 <_realloc_r+0x474>
 20135cc:	e0bffe17 	ldw	r2,-8(fp)
 20135d0:	e0bfe715 	stw	r2,-100(fp)
 20135d4:	e0bff617 	ldw	r2,-40(fp)
 20135d8:	e0bfe815 	stw	r2,-96(fp)
 20135dc:	e0bff717 	ldw	r2,-36(fp)
 20135e0:	10800530 	cmpltui	r2,r2,20
 20135e4:	1000361e 	bne	r2,zero,20136c0 <_realloc_r+0x420>
 20135e8:	e0bfe817 	ldw	r2,-96(fp)
 20135ec:	10c00104 	addi	r3,r2,4
 20135f0:	e0ffe815 	stw	r3,-96(fp)
 20135f4:	e0ffe717 	ldw	r3,-100(fp)
 20135f8:	19000104 	addi	r4,r3,4
 20135fc:	e13fe715 	stw	r4,-100(fp)
 2013600:	18c00017 	ldw	r3,0(r3)
 2013604:	10c00015 	stw	r3,0(r2)
 2013608:	e0bfe817 	ldw	r2,-96(fp)
 201360c:	10c00104 	addi	r3,r2,4
 2013610:	e0ffe815 	stw	r3,-96(fp)
 2013614:	e0ffe717 	ldw	r3,-100(fp)
 2013618:	19000104 	addi	r4,r3,4
 201361c:	e13fe715 	stw	r4,-100(fp)
 2013620:	18c00017 	ldw	r3,0(r3)
 2013624:	10c00015 	stw	r3,0(r2)
 2013628:	e0bff717 	ldw	r2,-36(fp)
 201362c:	10800730 	cmpltui	r2,r2,28
 2013630:	1000231e 	bne	r2,zero,20136c0 <_realloc_r+0x420>
 2013634:	e0bfe817 	ldw	r2,-96(fp)
 2013638:	10c00104 	addi	r3,r2,4
 201363c:	e0ffe815 	stw	r3,-96(fp)
 2013640:	e0ffe717 	ldw	r3,-100(fp)
 2013644:	19000104 	addi	r4,r3,4
 2013648:	e13fe715 	stw	r4,-100(fp)
 201364c:	18c00017 	ldw	r3,0(r3)
 2013650:	10c00015 	stw	r3,0(r2)
 2013654:	e0bfe817 	ldw	r2,-96(fp)
 2013658:	10c00104 	addi	r3,r2,4
 201365c:	e0ffe815 	stw	r3,-96(fp)
 2013660:	e0ffe717 	ldw	r3,-100(fp)
 2013664:	19000104 	addi	r4,r3,4
 2013668:	e13fe715 	stw	r4,-100(fp)
 201366c:	18c00017 	ldw	r3,0(r3)
 2013670:	10c00015 	stw	r3,0(r2)
 2013674:	e0bff717 	ldw	r2,-36(fp)
 2013678:	10800930 	cmpltui	r2,r2,36
 201367c:	1000101e 	bne	r2,zero,20136c0 <_realloc_r+0x420>
 2013680:	e0bfe817 	ldw	r2,-96(fp)
 2013684:	10c00104 	addi	r3,r2,4
 2013688:	e0ffe815 	stw	r3,-96(fp)
 201368c:	e0ffe717 	ldw	r3,-100(fp)
 2013690:	19000104 	addi	r4,r3,4
 2013694:	e13fe715 	stw	r4,-100(fp)
 2013698:	18c00017 	ldw	r3,0(r3)
 201369c:	10c00015 	stw	r3,0(r2)
 20136a0:	e0bfe817 	ldw	r2,-96(fp)
 20136a4:	10c00104 	addi	r3,r2,4
 20136a8:	e0ffe815 	stw	r3,-96(fp)
 20136ac:	e0ffe717 	ldw	r3,-100(fp)
 20136b0:	19000104 	addi	r4,r3,4
 20136b4:	e13fe715 	stw	r4,-100(fp)
 20136b8:	18c00017 	ldw	r3,0(r3)
 20136bc:	10c00015 	stw	r3,0(r2)
 20136c0:	e0bfe817 	ldw	r2,-96(fp)
 20136c4:	10c00104 	addi	r3,r2,4
 20136c8:	e0ffe815 	stw	r3,-96(fp)
 20136cc:	e0ffe717 	ldw	r3,-100(fp)
 20136d0:	19000104 	addi	r4,r3,4
 20136d4:	e13fe715 	stw	r4,-100(fp)
 20136d8:	18c00017 	ldw	r3,0(r3)
 20136dc:	10c00015 	stw	r3,0(r2)
 20136e0:	e0bfe817 	ldw	r2,-96(fp)
 20136e4:	10c00104 	addi	r3,r2,4
 20136e8:	e0ffe815 	stw	r3,-96(fp)
 20136ec:	e0ffe717 	ldw	r3,-100(fp)
 20136f0:	19000104 	addi	r4,r3,4
 20136f4:	e13fe715 	stw	r4,-100(fp)
 20136f8:	18c00017 	ldw	r3,0(r3)
 20136fc:	10c00015 	stw	r3,0(r2)
 2013700:	e0bfe717 	ldw	r2,-100(fp)
 2013704:	10c00017 	ldw	r3,0(r2)
 2013708:	e0bfe817 	ldw	r2,-96(fp)
 201370c:	10c00015 	stw	r3,0(r2)
 2013710:	00000406 	br	2013724 <_realloc_r+0x484>
 2013714:	e1bff717 	ldw	r6,-36(fp)
 2013718:	e17ffe17 	ldw	r5,-8(fp)
 201371c:	e13ff617 	ldw	r4,-40(fp)
 2013720:	20116200 	call	2011620 <memmove>
            top = chunk_at_offset(newp, nb);
 2013724:	008080b4 	movhi	r2,514
 2013728:	108e6704 	addi	r2,r2,14748
 201372c:	e13fe317 	ldw	r4,-116(fp)
 2013730:	e0fff117 	ldw	r3,-60(fp)
 2013734:	20c7883a 	add	r3,r4,r3
 2013738:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 201373c:	008080b4 	movhi	r2,514
 2013740:	108e6704 	addi	r2,r2,14748
 2013744:	10800217 	ldw	r2,8(r2)
 2013748:	e13fe417 	ldw	r4,-112(fp)
 201374c:	e0fff117 	ldw	r3,-60(fp)
 2013750:	20c7c83a 	sub	r3,r4,r3
 2013754:	18c00054 	ori	r3,r3,1
 2013758:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 201375c:	e0bfe317 	ldw	r2,-116(fp)
 2013760:	10800117 	ldw	r2,4(r2)
 2013764:	10c0004c 	andi	r3,r2,1
 2013768:	e0bff117 	ldw	r2,-60(fp)
 201376c:	1886b03a 	or	r3,r3,r2
 2013770:	e0bfe317 	ldw	r2,-116(fp)
 2013774:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 2013778:	e13ffd17 	ldw	r4,-12(fp)
 201377c:	2017c6c0 	call	2017c6c <__malloc_unlock>
            return newmem;
 2013780:	e0bff617 	ldw	r2,-40(fp)
 2013784:	0001bd06 	br	2013e7c <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 2013788:	e0ffe617 	ldw	r3,-104(fp)
 201378c:	e0bff517 	ldw	r2,-44(fp)
 2013790:	1887883a 	add	r3,r3,r2
 2013794:	e0bfe417 	ldw	r2,-112(fp)
 2013798:	1885883a 	add	r2,r3,r2
 201379c:	1007883a 	mov	r3,r2
 20137a0:	e0bff117 	ldw	r2,-60(fp)
 20137a4:	18808016 	blt	r3,r2,20139a8 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 20137a8:	e0bfe517 	ldw	r2,-108(fp)
 20137ac:	10800317 	ldw	r2,12(r2)
 20137b0:	e0bff215 	stw	r2,-56(fp)
 20137b4:	e0bfe517 	ldw	r2,-108(fp)
 20137b8:	10800217 	ldw	r2,8(r2)
 20137bc:	e0bff315 	stw	r2,-52(fp)
 20137c0:	e0bff317 	ldw	r2,-52(fp)
 20137c4:	e0fff217 	ldw	r3,-56(fp)
 20137c8:	10c00315 	stw	r3,12(r2)
 20137cc:	e0bff217 	ldw	r2,-56(fp)
 20137d0:	e0fff317 	ldw	r3,-52(fp)
 20137d4:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 20137d8:	e0bff417 	ldw	r2,-48(fp)
 20137dc:	10800317 	ldw	r2,12(r2)
 20137e0:	e0bff215 	stw	r2,-56(fp)
 20137e4:	e0bff417 	ldw	r2,-48(fp)
 20137e8:	10800217 	ldw	r2,8(r2)
 20137ec:	e0bff315 	stw	r2,-52(fp)
 20137f0:	e0bff317 	ldw	r2,-52(fp)
 20137f4:	e0fff217 	ldw	r3,-56(fp)
 20137f8:	10c00315 	stw	r3,12(r2)
 20137fc:	e0bff217 	ldw	r2,-56(fp)
 2013800:	e0fff317 	ldw	r3,-52(fp)
 2013804:	10c00215 	stw	r3,8(r2)
          newp = prev;
 2013808:	e0bff417 	ldw	r2,-48(fp)
 201380c:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 2013810:	e0ffe617 	ldw	r3,-104(fp)
 2013814:	e0bff517 	ldw	r2,-44(fp)
 2013818:	1885883a 	add	r2,r3,r2
 201381c:	e0ffe417 	ldw	r3,-112(fp)
 2013820:	1885883a 	add	r2,r3,r2
 2013824:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 2013828:	e0bfe317 	ldw	r2,-116(fp)
 201382c:	10800204 	addi	r2,r2,8
 2013830:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2013834:	e0bff017 	ldw	r2,-64(fp)
 2013838:	10bfff04 	addi	r2,r2,-4
 201383c:	e0bff815 	stw	r2,-32(fp)
 2013840:	e0bff817 	ldw	r2,-32(fp)
 2013844:	10800968 	cmpgeui	r2,r2,37
 2013848:	1000521e 	bne	r2,zero,2013994 <_realloc_r+0x6f4>
 201384c:	e0bffe17 	ldw	r2,-8(fp)
 2013850:	e0bfe915 	stw	r2,-92(fp)
 2013854:	e0bff617 	ldw	r2,-40(fp)
 2013858:	e0bfea15 	stw	r2,-88(fp)
 201385c:	e0bff817 	ldw	r2,-32(fp)
 2013860:	10800530 	cmpltui	r2,r2,20
 2013864:	1000361e 	bne	r2,zero,2013940 <_realloc_r+0x6a0>
 2013868:	e0bfea17 	ldw	r2,-88(fp)
 201386c:	10c00104 	addi	r3,r2,4
 2013870:	e0ffea15 	stw	r3,-88(fp)
 2013874:	e0ffe917 	ldw	r3,-92(fp)
 2013878:	19000104 	addi	r4,r3,4
 201387c:	e13fe915 	stw	r4,-92(fp)
 2013880:	18c00017 	ldw	r3,0(r3)
 2013884:	10c00015 	stw	r3,0(r2)
 2013888:	e0bfea17 	ldw	r2,-88(fp)
 201388c:	10c00104 	addi	r3,r2,4
 2013890:	e0ffea15 	stw	r3,-88(fp)
 2013894:	e0ffe917 	ldw	r3,-92(fp)
 2013898:	19000104 	addi	r4,r3,4
 201389c:	e13fe915 	stw	r4,-92(fp)
 20138a0:	18c00017 	ldw	r3,0(r3)
 20138a4:	10c00015 	stw	r3,0(r2)
 20138a8:	e0bff817 	ldw	r2,-32(fp)
 20138ac:	10800730 	cmpltui	r2,r2,28
 20138b0:	1000231e 	bne	r2,zero,2013940 <_realloc_r+0x6a0>
 20138b4:	e0bfea17 	ldw	r2,-88(fp)
 20138b8:	10c00104 	addi	r3,r2,4
 20138bc:	e0ffea15 	stw	r3,-88(fp)
 20138c0:	e0ffe917 	ldw	r3,-92(fp)
 20138c4:	19000104 	addi	r4,r3,4
 20138c8:	e13fe915 	stw	r4,-92(fp)
 20138cc:	18c00017 	ldw	r3,0(r3)
 20138d0:	10c00015 	stw	r3,0(r2)
 20138d4:	e0bfea17 	ldw	r2,-88(fp)
 20138d8:	10c00104 	addi	r3,r2,4
 20138dc:	e0ffea15 	stw	r3,-88(fp)
 20138e0:	e0ffe917 	ldw	r3,-92(fp)
 20138e4:	19000104 	addi	r4,r3,4
 20138e8:	e13fe915 	stw	r4,-92(fp)
 20138ec:	18c00017 	ldw	r3,0(r3)
 20138f0:	10c00015 	stw	r3,0(r2)
 20138f4:	e0bff817 	ldw	r2,-32(fp)
 20138f8:	10800930 	cmpltui	r2,r2,36
 20138fc:	1000101e 	bne	r2,zero,2013940 <_realloc_r+0x6a0>
 2013900:	e0bfea17 	ldw	r2,-88(fp)
 2013904:	10c00104 	addi	r3,r2,4
 2013908:	e0ffea15 	stw	r3,-88(fp)
 201390c:	e0ffe917 	ldw	r3,-92(fp)
 2013910:	19000104 	addi	r4,r3,4
 2013914:	e13fe915 	stw	r4,-92(fp)
 2013918:	18c00017 	ldw	r3,0(r3)
 201391c:	10c00015 	stw	r3,0(r2)
 2013920:	e0bfea17 	ldw	r2,-88(fp)
 2013924:	10c00104 	addi	r3,r2,4
 2013928:	e0ffea15 	stw	r3,-88(fp)
 201392c:	e0ffe917 	ldw	r3,-92(fp)
 2013930:	19000104 	addi	r4,r3,4
 2013934:	e13fe915 	stw	r4,-92(fp)
 2013938:	18c00017 	ldw	r3,0(r3)
 201393c:	10c00015 	stw	r3,0(r2)
 2013940:	e0bfea17 	ldw	r2,-88(fp)
 2013944:	10c00104 	addi	r3,r2,4
 2013948:	e0ffea15 	stw	r3,-88(fp)
 201394c:	e0ffe917 	ldw	r3,-92(fp)
 2013950:	19000104 	addi	r4,r3,4
 2013954:	e13fe915 	stw	r4,-92(fp)
 2013958:	18c00017 	ldw	r3,0(r3)
 201395c:	10c00015 	stw	r3,0(r2)
 2013960:	e0bfea17 	ldw	r2,-88(fp)
 2013964:	10c00104 	addi	r3,r2,4
 2013968:	e0ffea15 	stw	r3,-88(fp)
 201396c:	e0ffe917 	ldw	r3,-92(fp)
 2013970:	19000104 	addi	r4,r3,4
 2013974:	e13fe915 	stw	r4,-92(fp)
 2013978:	18c00017 	ldw	r3,0(r3)
 201397c:	10c00015 	stw	r3,0(r2)
 2013980:	e0bfe917 	ldw	r2,-92(fp)
 2013984:	10c00017 	ldw	r3,0(r2)
 2013988:	e0bfea17 	ldw	r2,-88(fp)
 201398c:	10c00015 	stw	r3,0(r2)
          goto split;
 2013990:	00010106 	br	2013d98 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2013994:	e1bff817 	ldw	r6,-32(fp)
 2013998:	e17ffe17 	ldw	r5,-8(fp)
 201399c:	e13ff617 	ldw	r4,-40(fp)
 20139a0:	20116200 	call	2011620 <memmove>
          goto split;
 20139a4:	0000fc06 	br	2013d98 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 20139a8:	e0bff417 	ldw	r2,-48(fp)
 20139ac:	10007826 	beq	r2,zero,2013b90 <_realloc_r+0x8f0>
 20139b0:	e0fff517 	ldw	r3,-44(fp)
 20139b4:	e0bfe417 	ldw	r2,-112(fp)
 20139b8:	1885883a 	add	r2,r3,r2
 20139bc:	1007883a 	mov	r3,r2
 20139c0:	e0bff117 	ldw	r2,-60(fp)
 20139c4:	18807216 	blt	r3,r2,2013b90 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 20139c8:	e0bff417 	ldw	r2,-48(fp)
 20139cc:	10800317 	ldw	r2,12(r2)
 20139d0:	e0bff215 	stw	r2,-56(fp)
 20139d4:	e0bff417 	ldw	r2,-48(fp)
 20139d8:	10800217 	ldw	r2,8(r2)
 20139dc:	e0bff315 	stw	r2,-52(fp)
 20139e0:	e0bff317 	ldw	r2,-52(fp)
 20139e4:	e0fff217 	ldw	r3,-56(fp)
 20139e8:	10c00315 	stw	r3,12(r2)
 20139ec:	e0bff217 	ldw	r2,-56(fp)
 20139f0:	e0fff317 	ldw	r3,-52(fp)
 20139f4:	10c00215 	stw	r3,8(r2)
        newp = prev;
 20139f8:	e0bff417 	ldw	r2,-48(fp)
 20139fc:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 2013a00:	e0ffe417 	ldw	r3,-112(fp)
 2013a04:	e0bff517 	ldw	r2,-44(fp)
 2013a08:	1885883a 	add	r2,r3,r2
 2013a0c:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 2013a10:	e0bfe317 	ldw	r2,-116(fp)
 2013a14:	10800204 	addi	r2,r2,8
 2013a18:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2013a1c:	e0bff017 	ldw	r2,-64(fp)
 2013a20:	10bfff04 	addi	r2,r2,-4
 2013a24:	e0bff915 	stw	r2,-28(fp)
 2013a28:	e0bff917 	ldw	r2,-28(fp)
 2013a2c:	10800968 	cmpgeui	r2,r2,37
 2013a30:	1000521e 	bne	r2,zero,2013b7c <_realloc_r+0x8dc>
 2013a34:	e0bffe17 	ldw	r2,-8(fp)
 2013a38:	e0bfeb15 	stw	r2,-84(fp)
 2013a3c:	e0bff617 	ldw	r2,-40(fp)
 2013a40:	e0bfec15 	stw	r2,-80(fp)
 2013a44:	e0bff917 	ldw	r2,-28(fp)
 2013a48:	10800530 	cmpltui	r2,r2,20
 2013a4c:	1000361e 	bne	r2,zero,2013b28 <_realloc_r+0x888>
 2013a50:	e0bfec17 	ldw	r2,-80(fp)
 2013a54:	10c00104 	addi	r3,r2,4
 2013a58:	e0ffec15 	stw	r3,-80(fp)
 2013a5c:	e0ffeb17 	ldw	r3,-84(fp)
 2013a60:	19000104 	addi	r4,r3,4
 2013a64:	e13feb15 	stw	r4,-84(fp)
 2013a68:	18c00017 	ldw	r3,0(r3)
 2013a6c:	10c00015 	stw	r3,0(r2)
 2013a70:	e0bfec17 	ldw	r2,-80(fp)
 2013a74:	10c00104 	addi	r3,r2,4
 2013a78:	e0ffec15 	stw	r3,-80(fp)
 2013a7c:	e0ffeb17 	ldw	r3,-84(fp)
 2013a80:	19000104 	addi	r4,r3,4
 2013a84:	e13feb15 	stw	r4,-84(fp)
 2013a88:	18c00017 	ldw	r3,0(r3)
 2013a8c:	10c00015 	stw	r3,0(r2)
 2013a90:	e0bff917 	ldw	r2,-28(fp)
 2013a94:	10800730 	cmpltui	r2,r2,28
 2013a98:	1000231e 	bne	r2,zero,2013b28 <_realloc_r+0x888>
 2013a9c:	e0bfec17 	ldw	r2,-80(fp)
 2013aa0:	10c00104 	addi	r3,r2,4
 2013aa4:	e0ffec15 	stw	r3,-80(fp)
 2013aa8:	e0ffeb17 	ldw	r3,-84(fp)
 2013aac:	19000104 	addi	r4,r3,4
 2013ab0:	e13feb15 	stw	r4,-84(fp)
 2013ab4:	18c00017 	ldw	r3,0(r3)
 2013ab8:	10c00015 	stw	r3,0(r2)
 2013abc:	e0bfec17 	ldw	r2,-80(fp)
 2013ac0:	10c00104 	addi	r3,r2,4
 2013ac4:	e0ffec15 	stw	r3,-80(fp)
 2013ac8:	e0ffeb17 	ldw	r3,-84(fp)
 2013acc:	19000104 	addi	r4,r3,4
 2013ad0:	e13feb15 	stw	r4,-84(fp)
 2013ad4:	18c00017 	ldw	r3,0(r3)
 2013ad8:	10c00015 	stw	r3,0(r2)
 2013adc:	e0bff917 	ldw	r2,-28(fp)
 2013ae0:	10800930 	cmpltui	r2,r2,36
 2013ae4:	1000101e 	bne	r2,zero,2013b28 <_realloc_r+0x888>
 2013ae8:	e0bfec17 	ldw	r2,-80(fp)
 2013aec:	10c00104 	addi	r3,r2,4
 2013af0:	e0ffec15 	stw	r3,-80(fp)
 2013af4:	e0ffeb17 	ldw	r3,-84(fp)
 2013af8:	19000104 	addi	r4,r3,4
 2013afc:	e13feb15 	stw	r4,-84(fp)
 2013b00:	18c00017 	ldw	r3,0(r3)
 2013b04:	10c00015 	stw	r3,0(r2)
 2013b08:	e0bfec17 	ldw	r2,-80(fp)
 2013b0c:	10c00104 	addi	r3,r2,4
 2013b10:	e0ffec15 	stw	r3,-80(fp)
 2013b14:	e0ffeb17 	ldw	r3,-84(fp)
 2013b18:	19000104 	addi	r4,r3,4
 2013b1c:	e13feb15 	stw	r4,-84(fp)
 2013b20:	18c00017 	ldw	r3,0(r3)
 2013b24:	10c00015 	stw	r3,0(r2)
 2013b28:	e0bfec17 	ldw	r2,-80(fp)
 2013b2c:	10c00104 	addi	r3,r2,4
 2013b30:	e0ffec15 	stw	r3,-80(fp)
 2013b34:	e0ffeb17 	ldw	r3,-84(fp)
 2013b38:	19000104 	addi	r4,r3,4
 2013b3c:	e13feb15 	stw	r4,-84(fp)
 2013b40:	18c00017 	ldw	r3,0(r3)
 2013b44:	10c00015 	stw	r3,0(r2)
 2013b48:	e0bfec17 	ldw	r2,-80(fp)
 2013b4c:	10c00104 	addi	r3,r2,4
 2013b50:	e0ffec15 	stw	r3,-80(fp)
 2013b54:	e0ffeb17 	ldw	r3,-84(fp)
 2013b58:	19000104 	addi	r4,r3,4
 2013b5c:	e13feb15 	stw	r4,-84(fp)
 2013b60:	18c00017 	ldw	r3,0(r3)
 2013b64:	10c00015 	stw	r3,0(r2)
 2013b68:	e0bfeb17 	ldw	r2,-84(fp)
 2013b6c:	10c00017 	ldw	r3,0(r2)
 2013b70:	e0bfec17 	ldw	r2,-80(fp)
 2013b74:	10c00015 	stw	r3,0(r2)
        goto split;
 2013b78:	00008706 	br	2013d98 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2013b7c:	e1bff917 	ldw	r6,-28(fp)
 2013b80:	e17ffe17 	ldw	r5,-8(fp)
 2013b84:	e13ff617 	ldw	r4,-40(fp)
 2013b88:	20116200 	call	2011620 <memmove>
        goto split;
 2013b8c:	00008206 	br	2013d98 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 2013b90:	e17fff17 	ldw	r5,-4(fp)
 2013b94:	e13ffd17 	ldw	r4,-12(fp)
 2013b98:	20108e80 	call	20108e8 <_malloc_r>
 2013b9c:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 2013ba0:	e0bff617 	ldw	r2,-40(fp)
 2013ba4:	1000041e 	bne	r2,zero,2013bb8 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 2013ba8:	e13ffd17 	ldw	r4,-12(fp)
 2013bac:	2017c6c0 	call	2017c6c <__malloc_unlock>
      return 0;
 2013bb0:	0005883a 	mov	r2,zero
 2013bb4:	0000b106 	br	2013e7c <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 2013bb8:	e0bff617 	ldw	r2,-40(fp)
 2013bbc:	10bffe04 	addi	r2,r2,-8
 2013bc0:	e0bfe315 	stw	r2,-116(fp)
 2013bc4:	e0bfef17 	ldw	r2,-68(fp)
 2013bc8:	10c00117 	ldw	r3,4(r2)
 2013bcc:	00bfff84 	movi	r2,-2
 2013bd0:	1884703a 	and	r2,r3,r2
 2013bd4:	e0ffef17 	ldw	r3,-68(fp)
 2013bd8:	1885883a 	add	r2,r3,r2
 2013bdc:	e0ffe317 	ldw	r3,-116(fp)
 2013be0:	18800a1e 	bne	r3,r2,2013c0c <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 2013be4:	e0bfe317 	ldw	r2,-116(fp)
 2013be8:	10c00117 	ldw	r3,4(r2)
 2013bec:	00bfff04 	movi	r2,-4
 2013bf0:	1884703a 	and	r2,r3,r2
 2013bf4:	e0ffe417 	ldw	r3,-112(fp)
 2013bf8:	1885883a 	add	r2,r3,r2
 2013bfc:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 2013c00:	e0bfef17 	ldw	r2,-68(fp)
 2013c04:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 2013c08:	00006306 	br	2013d98 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 2013c0c:	e0bff017 	ldw	r2,-64(fp)
 2013c10:	10bfff04 	addi	r2,r2,-4
 2013c14:	e0bffa15 	stw	r2,-24(fp)
 2013c18:	e0bffa17 	ldw	r2,-24(fp)
 2013c1c:	10800968 	cmpgeui	r2,r2,37
 2013c20:	1000521e 	bne	r2,zero,2013d6c <_realloc_r+0xacc>
 2013c24:	e0bffe17 	ldw	r2,-8(fp)
 2013c28:	e0bfed15 	stw	r2,-76(fp)
 2013c2c:	e0bff617 	ldw	r2,-40(fp)
 2013c30:	e0bfee15 	stw	r2,-72(fp)
 2013c34:	e0bffa17 	ldw	r2,-24(fp)
 2013c38:	10800530 	cmpltui	r2,r2,20
 2013c3c:	1000361e 	bne	r2,zero,2013d18 <_realloc_r+0xa78>
 2013c40:	e0bfee17 	ldw	r2,-72(fp)
 2013c44:	10c00104 	addi	r3,r2,4
 2013c48:	e0ffee15 	stw	r3,-72(fp)
 2013c4c:	e0ffed17 	ldw	r3,-76(fp)
 2013c50:	19000104 	addi	r4,r3,4
 2013c54:	e13fed15 	stw	r4,-76(fp)
 2013c58:	18c00017 	ldw	r3,0(r3)
 2013c5c:	10c00015 	stw	r3,0(r2)
 2013c60:	e0bfee17 	ldw	r2,-72(fp)
 2013c64:	10c00104 	addi	r3,r2,4
 2013c68:	e0ffee15 	stw	r3,-72(fp)
 2013c6c:	e0ffed17 	ldw	r3,-76(fp)
 2013c70:	19000104 	addi	r4,r3,4
 2013c74:	e13fed15 	stw	r4,-76(fp)
 2013c78:	18c00017 	ldw	r3,0(r3)
 2013c7c:	10c00015 	stw	r3,0(r2)
 2013c80:	e0bffa17 	ldw	r2,-24(fp)
 2013c84:	10800730 	cmpltui	r2,r2,28
 2013c88:	1000231e 	bne	r2,zero,2013d18 <_realloc_r+0xa78>
 2013c8c:	e0bfee17 	ldw	r2,-72(fp)
 2013c90:	10c00104 	addi	r3,r2,4
 2013c94:	e0ffee15 	stw	r3,-72(fp)
 2013c98:	e0ffed17 	ldw	r3,-76(fp)
 2013c9c:	19000104 	addi	r4,r3,4
 2013ca0:	e13fed15 	stw	r4,-76(fp)
 2013ca4:	18c00017 	ldw	r3,0(r3)
 2013ca8:	10c00015 	stw	r3,0(r2)
 2013cac:	e0bfee17 	ldw	r2,-72(fp)
 2013cb0:	10c00104 	addi	r3,r2,4
 2013cb4:	e0ffee15 	stw	r3,-72(fp)
 2013cb8:	e0ffed17 	ldw	r3,-76(fp)
 2013cbc:	19000104 	addi	r4,r3,4
 2013cc0:	e13fed15 	stw	r4,-76(fp)
 2013cc4:	18c00017 	ldw	r3,0(r3)
 2013cc8:	10c00015 	stw	r3,0(r2)
 2013ccc:	e0bffa17 	ldw	r2,-24(fp)
 2013cd0:	10800930 	cmpltui	r2,r2,36
 2013cd4:	1000101e 	bne	r2,zero,2013d18 <_realloc_r+0xa78>
 2013cd8:	e0bfee17 	ldw	r2,-72(fp)
 2013cdc:	10c00104 	addi	r3,r2,4
 2013ce0:	e0ffee15 	stw	r3,-72(fp)
 2013ce4:	e0ffed17 	ldw	r3,-76(fp)
 2013ce8:	19000104 	addi	r4,r3,4
 2013cec:	e13fed15 	stw	r4,-76(fp)
 2013cf0:	18c00017 	ldw	r3,0(r3)
 2013cf4:	10c00015 	stw	r3,0(r2)
 2013cf8:	e0bfee17 	ldw	r2,-72(fp)
 2013cfc:	10c00104 	addi	r3,r2,4
 2013d00:	e0ffee15 	stw	r3,-72(fp)
 2013d04:	e0ffed17 	ldw	r3,-76(fp)
 2013d08:	19000104 	addi	r4,r3,4
 2013d0c:	e13fed15 	stw	r4,-76(fp)
 2013d10:	18c00017 	ldw	r3,0(r3)
 2013d14:	10c00015 	stw	r3,0(r2)
 2013d18:	e0bfee17 	ldw	r2,-72(fp)
 2013d1c:	10c00104 	addi	r3,r2,4
 2013d20:	e0ffee15 	stw	r3,-72(fp)
 2013d24:	e0ffed17 	ldw	r3,-76(fp)
 2013d28:	19000104 	addi	r4,r3,4
 2013d2c:	e13fed15 	stw	r4,-76(fp)
 2013d30:	18c00017 	ldw	r3,0(r3)
 2013d34:	10c00015 	stw	r3,0(r2)
 2013d38:	e0bfee17 	ldw	r2,-72(fp)
 2013d3c:	10c00104 	addi	r3,r2,4
 2013d40:	e0ffee15 	stw	r3,-72(fp)
 2013d44:	e0ffed17 	ldw	r3,-76(fp)
 2013d48:	19000104 	addi	r4,r3,4
 2013d4c:	e13fed15 	stw	r4,-76(fp)
 2013d50:	18c00017 	ldw	r3,0(r3)
 2013d54:	10c00015 	stw	r3,0(r2)
 2013d58:	e0bfed17 	ldw	r2,-76(fp)
 2013d5c:	10c00017 	ldw	r3,0(r2)
 2013d60:	e0bfee17 	ldw	r2,-72(fp)
 2013d64:	10c00015 	stw	r3,0(r2)
 2013d68:	00000406 	br	2013d7c <_realloc_r+0xadc>
 2013d6c:	e1bffa17 	ldw	r6,-24(fp)
 2013d70:	e17ffe17 	ldw	r5,-8(fp)
 2013d74:	e13ff617 	ldw	r4,-40(fp)
 2013d78:	20116200 	call	2011620 <memmove>
    fREe(RCALL oldmem);
 2013d7c:	e17ffe17 	ldw	r5,-8(fp)
 2013d80:	e13ffd17 	ldw	r4,-12(fp)
 2013d84:	200f2a80 	call	200f2a8 <_free_r>
    MALLOC_UNLOCK;
 2013d88:	e13ffd17 	ldw	r4,-12(fp)
 2013d8c:	2017c6c0 	call	2017c6c <__malloc_unlock>
    return newmem;
 2013d90:	e0bff617 	ldw	r2,-40(fp)
 2013d94:	00003906 	br	2013e7c <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 2013d98:	e0ffe417 	ldw	r3,-112(fp)
 2013d9c:	e0bff117 	ldw	r2,-60(fp)
 2013da0:	1885c83a 	sub	r2,r3,r2
 2013da4:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 2013da8:	e0bffb17 	ldw	r2,-20(fp)
 2013dac:	10800430 	cmpltui	r2,r2,16
 2013db0:	10001e1e 	bne	r2,zero,2013e2c <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 2013db4:	e0ffe317 	ldw	r3,-116(fp)
 2013db8:	e0bff117 	ldw	r2,-60(fp)
 2013dbc:	1885883a 	add	r2,r3,r2
 2013dc0:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 2013dc4:	e0bfe317 	ldw	r2,-116(fp)
 2013dc8:	10800117 	ldw	r2,4(r2)
 2013dcc:	10c0004c 	andi	r3,r2,1
 2013dd0:	e0bff117 	ldw	r2,-60(fp)
 2013dd4:	1886b03a 	or	r3,r3,r2
 2013dd8:	e0bfe317 	ldw	r2,-116(fp)
 2013ddc:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 2013de0:	e0bffb17 	ldw	r2,-20(fp)
 2013de4:	10c00054 	ori	r3,r2,1
 2013de8:	e0bffc17 	ldw	r2,-16(fp)
 2013dec:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 2013df0:	e0fffc17 	ldw	r3,-16(fp)
 2013df4:	e0bffb17 	ldw	r2,-20(fp)
 2013df8:	1885883a 	add	r2,r3,r2
 2013dfc:	e13ffc17 	ldw	r4,-16(fp)
 2013e00:	e0fffb17 	ldw	r3,-20(fp)
 2013e04:	20c7883a 	add	r3,r4,r3
 2013e08:	18c00117 	ldw	r3,4(r3)
 2013e0c:	18c00054 	ori	r3,r3,1
 2013e10:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 2013e14:	e0bffc17 	ldw	r2,-16(fp)
 2013e18:	10800204 	addi	r2,r2,8
 2013e1c:	100b883a 	mov	r5,r2
 2013e20:	e13ffd17 	ldw	r4,-12(fp)
 2013e24:	200f2a80 	call	200f2a8 <_free_r>
 2013e28:	00001006 	br	2013e6c <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 2013e2c:	e0bfe317 	ldw	r2,-116(fp)
 2013e30:	10800117 	ldw	r2,4(r2)
 2013e34:	10c0004c 	andi	r3,r2,1
 2013e38:	e0bfe417 	ldw	r2,-112(fp)
 2013e3c:	1886b03a 	or	r3,r3,r2
 2013e40:	e0bfe317 	ldw	r2,-116(fp)
 2013e44:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 2013e48:	e0ffe317 	ldw	r3,-116(fp)
 2013e4c:	e0bfe417 	ldw	r2,-112(fp)
 2013e50:	1885883a 	add	r2,r3,r2
 2013e54:	e13fe317 	ldw	r4,-116(fp)
 2013e58:	e0ffe417 	ldw	r3,-112(fp)
 2013e5c:	20c7883a 	add	r3,r4,r3
 2013e60:	18c00117 	ldw	r3,4(r3)
 2013e64:	18c00054 	ori	r3,r3,1
 2013e68:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 2013e6c:	e13ffd17 	ldw	r4,-12(fp)
 2013e70:	2017c6c0 	call	2017c6c <__malloc_unlock>
  return chunk2mem(newp);
 2013e74:	e0bfe317 	ldw	r2,-116(fp)
 2013e78:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 2013e7c:	e037883a 	mov	sp,fp
 2013e80:	dfc00117 	ldw	ra,4(sp)
 2013e84:	df000017 	ldw	fp,0(sp)
 2013e88:	dec00204 	addi	sp,sp,8
 2013e8c:	f800283a 	ret

02013e90 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 2013e90:	defffb04 	addi	sp,sp,-20
 2013e94:	dfc00415 	stw	ra,16(sp)
 2013e98:	df000315 	stw	fp,12(sp)
 2013e9c:	df000304 	addi	fp,sp,12
 2013ea0:	e13ffe15 	stw	r4,-8(fp)
 2013ea4:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 2013ea8:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 2013eac:	e13fff17 	ldw	r4,-4(fp)
 2013eb0:	20178440 	call	2017844 <sbrk>
 2013eb4:	e0bffd15 	stw	r2,-12(fp)
 2013eb8:	e0bffd17 	ldw	r2,-12(fp)
 2013ebc:	10bfffd8 	cmpnei	r2,r2,-1
 2013ec0:	1000051e 	bne	r2,zero,2013ed8 <_sbrk_r+0x48>
 2013ec4:	d0a79e17 	ldw	r2,-24968(gp)
 2013ec8:	10000326 	beq	r2,zero,2013ed8 <_sbrk_r+0x48>
    ptr->_errno = errno;
 2013ecc:	d0e79e17 	ldw	r3,-24968(gp)
 2013ed0:	e0bffe17 	ldw	r2,-8(fp)
 2013ed4:	10c00015 	stw	r3,0(r2)
  return ret;
 2013ed8:	e0bffd17 	ldw	r2,-12(fp)
}
 2013edc:	e037883a 	mov	sp,fp
 2013ee0:	dfc00117 	ldw	ra,4(sp)
 2013ee4:	df000017 	ldw	fp,0(sp)
 2013ee8:	dec00204 	addi	sp,sp,8
 2013eec:	f800283a 	ret

02013ef0 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 2013ef0:	defff804 	addi	sp,sp,-32
 2013ef4:	dfc00715 	stw	ra,28(sp)
 2013ef8:	df000615 	stw	fp,24(sp)
 2013efc:	dc400515 	stw	r17,20(sp)
 2013f00:	dc000415 	stw	r16,16(sp)
 2013f04:	df000604 	addi	fp,sp,24
 2013f08:	e13ffa15 	stw	r4,-24(fp)
 2013f0c:	e17ffb15 	stw	r5,-20(fp)
 2013f10:	e1bffc15 	stw	r6,-16(fp)
 2013f14:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 2013f18:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 2013f1c:	8080038b 	ldhu	r2,14(r16)
 2013f20:	10bfffcc 	andi	r2,r2,65535
 2013f24:	10a0001c 	xori	r2,r2,32768
 2013f28:	10a00004 	addi	r2,r2,-32768
 2013f2c:	e0fffd17 	ldw	r3,-12(fp)
 2013f30:	180f883a 	mov	r7,r3
 2013f34:	e1bffc17 	ldw	r6,-16(fp)
 2013f38:	100b883a 	mov	r5,r2
 2013f3c:	e13ffa17 	ldw	r4,-24(fp)
 2013f40:	2015f980 	call	2015f98 <_read_r>
 2013f44:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 2013f48:	88000416 	blt	r17,zero,2013f5c <__sread+0x6c>
    fp->_offset += ret;
 2013f4c:	80801417 	ldw	r2,80(r16)
 2013f50:	1445883a 	add	r2,r2,r17
 2013f54:	80801415 	stw	r2,80(r16)
 2013f58:	00000406 	br	2013f6c <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 2013f5c:	80c0030b 	ldhu	r3,12(r16)
 2013f60:	00bbffc4 	movi	r2,-4097
 2013f64:	1884703a 	and	r2,r3,r2
 2013f68:	8080030d 	sth	r2,12(r16)
  return ret;
 2013f6c:	8805883a 	mov	r2,r17
}
 2013f70:	e6fffe04 	addi	sp,fp,-8
 2013f74:	dfc00317 	ldw	ra,12(sp)
 2013f78:	df000217 	ldw	fp,8(sp)
 2013f7c:	dc400117 	ldw	r17,4(sp)
 2013f80:	dc000017 	ldw	r16,0(sp)
 2013f84:	dec00404 	addi	sp,sp,16
 2013f88:	f800283a 	ret

02013f8c <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 2013f8c:	defffb04 	addi	sp,sp,-20
 2013f90:	df000415 	stw	fp,16(sp)
 2013f94:	df000404 	addi	fp,sp,16
 2013f98:	e13ffc15 	stw	r4,-16(fp)
 2013f9c:	e17ffd15 	stw	r5,-12(fp)
 2013fa0:	e1bffe15 	stw	r6,-8(fp)
 2013fa4:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 2013fa8:	0005883a 	mov	r2,zero
}
 2013fac:	e037883a 	mov	sp,fp
 2013fb0:	df000017 	ldw	fp,0(sp)
 2013fb4:	dec00104 	addi	sp,sp,4
 2013fb8:	f800283a 	ret

02013fbc <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 2013fbc:	defff804 	addi	sp,sp,-32
 2013fc0:	dfc00715 	stw	ra,28(sp)
 2013fc4:	df000615 	stw	fp,24(sp)
 2013fc8:	dc000515 	stw	r16,20(sp)
 2013fcc:	df000604 	addi	fp,sp,24
 2013fd0:	e13ffb15 	stw	r4,-20(fp)
 2013fd4:	e17ffc15 	stw	r5,-16(fp)
 2013fd8:	e1bffd15 	stw	r6,-12(fp)
 2013fdc:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 2013fe0:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 2013fe4:	8080030b 	ldhu	r2,12(r16)
 2013fe8:	10bfffcc 	andi	r2,r2,65535
 2013fec:	1080400c 	andi	r2,r2,256
 2013ff0:	10000926 	beq	r2,zero,2014018 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 2013ff4:	8080038b 	ldhu	r2,14(r16)
 2013ff8:	10bfffcc 	andi	r2,r2,65535
 2013ffc:	10a0001c 	xori	r2,r2,32768
 2014000:	10a00004 	addi	r2,r2,-32768
 2014004:	01c00084 	movi	r7,2
 2014008:	000d883a 	mov	r6,zero
 201400c:	100b883a 	mov	r5,r2
 2014010:	e13ffb17 	ldw	r4,-20(fp)
 2014014:	2015f280 	call	2015f28 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 2014018:	80c0030b 	ldhu	r3,12(r16)
 201401c:	00bbffc4 	movi	r2,-4097
 2014020:	1884703a 	and	r2,r3,r2
 2014024:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 2014028:	8080038b 	ldhu	r2,14(r16)
 201402c:	10bfffcc 	andi	r2,r2,65535
 2014030:	10a0001c 	xori	r2,r2,32768
 2014034:	10a00004 	addi	r2,r2,-32768
 2014038:	e0fffe17 	ldw	r3,-8(fp)
 201403c:	180f883a 	mov	r7,r3
 2014040:	e1bffd17 	ldw	r6,-12(fp)
 2014044:	100b883a 	mov	r5,r2
 2014048:	e13ffb17 	ldw	r4,-20(fp)
 201404c:	20157e40 	call	20157e4 <_write_r>
 2014050:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 2014054:	e0bffa17 	ldw	r2,-24(fp)
}
 2014058:	e6ffff04 	addi	sp,fp,-4
 201405c:	dfc00217 	ldw	ra,8(sp)
 2014060:	df000117 	ldw	fp,4(sp)
 2014064:	dc000017 	ldw	r16,0(sp)
 2014068:	dec00304 	addi	sp,sp,12
 201406c:	f800283a 	ret

02014070 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 2014070:	defff804 	addi	sp,sp,-32
 2014074:	dfc00715 	stw	ra,28(sp)
 2014078:	df000615 	stw	fp,24(sp)
 201407c:	dc400515 	stw	r17,20(sp)
 2014080:	dc000415 	stw	r16,16(sp)
 2014084:	df000604 	addi	fp,sp,24
 2014088:	e13ffa15 	stw	r4,-24(fp)
 201408c:	e17ffb15 	stw	r5,-20(fp)
 2014090:	e1bffc15 	stw	r6,-16(fp)
 2014094:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 2014098:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 201409c:	8080038b 	ldhu	r2,14(r16)
 20140a0:	10bfffcc 	andi	r2,r2,65535
 20140a4:	10a0001c 	xori	r2,r2,32768
 20140a8:	10a00004 	addi	r2,r2,-32768
 20140ac:	e1fffd17 	ldw	r7,-12(fp)
 20140b0:	e1bffc17 	ldw	r6,-16(fp)
 20140b4:	100b883a 	mov	r5,r2
 20140b8:	e13ffa17 	ldw	r4,-24(fp)
 20140bc:	2015f280 	call	2015f28 <_lseek_r>
 20140c0:	1023883a 	mov	r17,r2
  if (ret == -1L)
 20140c4:	88bfffd8 	cmpnei	r2,r17,-1
 20140c8:	1000051e 	bne	r2,zero,20140e0 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 20140cc:	80c0030b 	ldhu	r3,12(r16)
 20140d0:	00bbffc4 	movi	r2,-4097
 20140d4:	1884703a 	and	r2,r3,r2
 20140d8:	8080030d 	sth	r2,12(r16)
 20140dc:	00000406 	br	20140f0 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 20140e0:	8080030b 	ldhu	r2,12(r16)
 20140e4:	10840014 	ori	r2,r2,4096
 20140e8:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 20140ec:	84401415 	stw	r17,80(r16)
    }
  return ret;
 20140f0:	8805883a 	mov	r2,r17
}
 20140f4:	e6fffe04 	addi	sp,fp,-8
 20140f8:	dfc00317 	ldw	ra,12(sp)
 20140fc:	df000217 	ldw	fp,8(sp)
 2014100:	dc400117 	ldw	r17,4(sp)
 2014104:	dc000017 	ldw	r16,0(sp)
 2014108:	dec00404 	addi	sp,sp,16
 201410c:	f800283a 	ret

02014110 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 2014110:	defffb04 	addi	sp,sp,-20
 2014114:	dfc00415 	stw	ra,16(sp)
 2014118:	df000315 	stw	fp,12(sp)
 201411c:	df000304 	addi	fp,sp,12
 2014120:	e13ffe15 	stw	r4,-8(fp)
 2014124:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 2014128:	e0bfff17 	ldw	r2,-4(fp)
 201412c:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 2014130:	e0bffd17 	ldw	r2,-12(fp)
 2014134:	1080038b 	ldhu	r2,14(r2)
 2014138:	10bfffcc 	andi	r2,r2,65535
 201413c:	10a0001c 	xori	r2,r2,32768
 2014140:	10a00004 	addi	r2,r2,-32768
 2014144:	100b883a 	mov	r5,r2
 2014148:	e13ffe17 	ldw	r4,-8(fp)
 201414c:	20158540 	call	2015854 <_close_r>
}
 2014150:	e037883a 	mov	sp,fp
 2014154:	dfc00117 	ldw	ra,4(sp)
 2014158:	df000017 	ldw	fp,0(sp)
 201415c:	dec00204 	addi	sp,sp,8
 2014160:	f800283a 	ret

02014164 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 2014164:	defffb04 	addi	sp,sp,-20
 2014168:	df000415 	stw	fp,16(sp)
 201416c:	df000404 	addi	fp,sp,16
 2014170:	e13ffe15 	stw	r4,-8(fp)
 2014174:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 2014178:	e0fffe17 	ldw	r3,-8(fp)
 201417c:	e0bfff17 	ldw	r2,-4(fp)
 2014180:	1884b03a 	or	r2,r3,r2
 2014184:	108000cc 	andi	r2,r2,3
 2014188:	10002a1e 	bne	r2,zero,2014234 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 201418c:	e0bffe17 	ldw	r2,-8(fp)
 2014190:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 2014194:	e0bfff17 	ldw	r2,-4(fp)
 2014198:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 201419c:	00001506 	br	20141f4 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 20141a0:	e0bffc17 	ldw	r2,-16(fp)
 20141a4:	10c00017 	ldw	r3,0(r2)
 20141a8:	00bfbff4 	movhi	r2,65279
 20141ac:	10bfbfc4 	addi	r2,r2,-257
 20141b0:	1887883a 	add	r3,r3,r2
 20141b4:	e0bffc17 	ldw	r2,-16(fp)
 20141b8:	10800017 	ldw	r2,0(r2)
 20141bc:	0084303a 	nor	r2,zero,r2
 20141c0:	1886703a 	and	r3,r3,r2
 20141c4:	00a02074 	movhi	r2,32897
 20141c8:	10a02004 	addi	r2,r2,-32640
 20141cc:	1884703a 	and	r2,r3,r2
 20141d0:	10000226 	beq	r2,zero,20141dc <strcmp+0x78>
	    return 0;
 20141d4:	0005883a 	mov	r2,zero
 20141d8:	00002e06 	br	2014294 <strcmp+0x130>

          a1++;
 20141dc:	e0bffc17 	ldw	r2,-16(fp)
 20141e0:	10800104 	addi	r2,r2,4
 20141e4:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 20141e8:	e0bffd17 	ldw	r2,-12(fp)
 20141ec:	10800104 	addi	r2,r2,4
 20141f0:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 20141f4:	e0bffc17 	ldw	r2,-16(fp)
 20141f8:	10c00017 	ldw	r3,0(r2)
 20141fc:	e0bffd17 	ldw	r2,-12(fp)
 2014200:	10800017 	ldw	r2,0(r2)
 2014204:	18bfe626 	beq	r3,r2,20141a0 <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 2014208:	e0bffc17 	ldw	r2,-16(fp)
 201420c:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 2014210:	e0bffd17 	ldw	r2,-12(fp)
 2014214:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 2014218:	00000606 	br	2014234 <strcmp+0xd0>
    {
      s1++;
 201421c:	e0bffe17 	ldw	r2,-8(fp)
 2014220:	10800044 	addi	r2,r2,1
 2014224:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 2014228:	e0bfff17 	ldw	r2,-4(fp)
 201422c:	10800044 	addi	r2,r2,1
 2014230:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 2014234:	e0bffe17 	ldw	r2,-8(fp)
 2014238:	10800003 	ldbu	r2,0(r2)
 201423c:	10803fcc 	andi	r2,r2,255
 2014240:	1080201c 	xori	r2,r2,128
 2014244:	10bfe004 	addi	r2,r2,-128
 2014248:	10000b26 	beq	r2,zero,2014278 <strcmp+0x114>
 201424c:	e0bffe17 	ldw	r2,-8(fp)
 2014250:	10c00003 	ldbu	r3,0(r2)
 2014254:	e0bfff17 	ldw	r2,-4(fp)
 2014258:	10800003 	ldbu	r2,0(r2)
 201425c:	18c03fcc 	andi	r3,r3,255
 2014260:	18c0201c 	xori	r3,r3,128
 2014264:	18ffe004 	addi	r3,r3,-128
 2014268:	10803fcc 	andi	r2,r2,255
 201426c:	1080201c 	xori	r2,r2,128
 2014270:	10bfe004 	addi	r2,r2,-128
 2014274:	18bfe926 	beq	r3,r2,201421c <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 2014278:	e0bffe17 	ldw	r2,-8(fp)
 201427c:	10800003 	ldbu	r2,0(r2)
 2014280:	10c03fcc 	andi	r3,r2,255
 2014284:	e0bfff17 	ldw	r2,-4(fp)
 2014288:	10800003 	ldbu	r2,0(r2)
 201428c:	10803fcc 	andi	r2,r2,255
 2014290:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2014294:	e037883a 	mov	sp,fp
 2014298:	df000017 	ldw	fp,0(sp)
 201429c:	dec00104 	addi	sp,sp,4
 20142a0:	f800283a 	ret

020142a4 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 20142a4:	defff604 	addi	sp,sp,-40
 20142a8:	dfc00915 	stw	ra,36(sp)
 20142ac:	df000815 	stw	fp,32(sp)
 20142b0:	dc400715 	stw	r17,28(sp)
 20142b4:	dc000615 	stw	r16,24(sp)
 20142b8:	df000804 	addi	fp,sp,32
 20142bc:	e13ffc15 	stw	r4,-16(fp)
 20142c0:	e17ffd15 	stw	r5,-12(fp)
 20142c4:	3021883a 	mov	r16,r6
	register int err = 0;
 20142c8:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 20142cc:	80800217 	ldw	r2,8(r16)
 20142d0:	1000031e 	bne	r2,zero,20142e0 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 20142d4:	80000115 	stw	zero,4(r16)
		return (0);
 20142d8:	0005883a 	mov	r2,zero
 20142dc:	00003906 	br	20143c4 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 20142e0:	e0bffd17 	ldw	r2,-12(fp)
 20142e4:	10801917 	ldw	r2,100(r2)
 20142e8:	1088000c 	andi	r2,r2,8192
 20142ec:	10002d26 	beq	r2,zero,20143a4 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 20142f0:	80800017 	ldw	r2,0(r16)
 20142f4:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 20142f8:	00002706 	br	2014398 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 20142fc:	e0bff817 	ldw	r2,-32(fp)
 2014300:	10800017 	ldw	r2,0(r2)
 2014304:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 2014308:	e0bff817 	ldw	r2,-32(fp)
 201430c:	10800117 	ldw	r2,4(r2)
 2014310:	1004d0ba 	srli	r2,r2,2
 2014314:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 2014318:	e03ff915 	stw	zero,-28(fp)
 201431c:	00001206 	br	2014368 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 2014320:	e0bff917 	ldw	r2,-28(fp)
 2014324:	1085883a 	add	r2,r2,r2
 2014328:	1085883a 	add	r2,r2,r2
 201432c:	1007883a 	mov	r3,r2
 2014330:	e0bffa17 	ldw	r2,-24(fp)
 2014334:	10c5883a 	add	r2,r2,r3
 2014338:	10800017 	ldw	r2,0(r2)
 201433c:	e1bffd17 	ldw	r6,-12(fp)
 2014340:	100b883a 	mov	r5,r2
 2014344:	e13ffc17 	ldw	r4,-16(fp)
 2014348:	2015d700 	call	2015d70 <_fputwc_r>
 201434c:	10bfffd8 	cmpnei	r2,r2,-1
 2014350:	1000021e 	bne	r2,zero,201435c <__sprint_r+0xb8>
					err = -1;
 2014354:	047fffc4 	movi	r17,-1
					goto out;
 2014358:	00001706 	br	20143b8 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 201435c:	e0bff917 	ldw	r2,-28(fp)
 2014360:	10800044 	addi	r2,r2,1
 2014364:	e0bff915 	stw	r2,-28(fp)
 2014368:	e0fff917 	ldw	r3,-28(fp)
 201436c:	e0bffb17 	ldw	r2,-20(fp)
 2014370:	18bfeb16 	blt	r3,r2,2014320 <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 2014374:	80c00217 	ldw	r3,8(r16)
 2014378:	e0bffb17 	ldw	r2,-20(fp)
 201437c:	1085883a 	add	r2,r2,r2
 2014380:	1085883a 	add	r2,r2,r2
 2014384:	1885c83a 	sub	r2,r3,r2
 2014388:	80800215 	stw	r2,8(r16)
 201438c:	e0bff817 	ldw	r2,-32(fp)
 2014390:	10800204 	addi	r2,r2,8
 2014394:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 2014398:	80800217 	ldw	r2,8(r16)
 201439c:	103fd71e 	bne	r2,zero,20142fc <__sprint_r+0x58>
 20143a0:	00000506 	br	20143b8 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 20143a4:	800d883a 	mov	r6,r16
 20143a8:	e17ffd17 	ldw	r5,-12(fp)
 20143ac:	e13ffc17 	ldw	r4,-16(fp)
 20143b0:	200f9d40 	call	200f9d4 <__sfvwrite_r>
 20143b4:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 20143b8:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 20143bc:	80000115 	stw	zero,4(r16)
	return (err);
 20143c0:	8805883a 	mov	r2,r17
}
 20143c4:	e6fffe04 	addi	sp,fp,-8
 20143c8:	dfc00317 	ldw	ra,12(sp)
 20143cc:	df000217 	ldw	fp,8(sp)
 20143d0:	dc400117 	ldw	r17,4(sp)
 20143d4:	dc000017 	ldw	r16,0(sp)
 20143d8:	dec00404 	addi	sp,sp,16
 20143dc:	f800283a 	ret

020143e0 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 20143e0:	defedf04 	addi	sp,sp,-1156
 20143e4:	dfc12015 	stw	ra,1152(sp)
 20143e8:	df011f15 	stw	fp,1148(sp)
 20143ec:	dc011e15 	stw	r16,1144(sp)
 20143f0:	df011f04 	addi	fp,sp,1148
 20143f4:	e13ffc15 	stw	r4,-16(fp)
 20143f8:	2821883a 	mov	r16,r5
 20143fc:	e1bffd15 	stw	r6,-12(fp)
 2014400:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2014404:	80c0030b 	ldhu	r3,12(r16)
 2014408:	00bfff44 	movi	r2,-3
 201440c:	1884703a 	and	r2,r3,r2
 2014410:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2014414:	80801917 	ldw	r2,100(r16)
 2014418:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 201441c:	8080038b 	ldhu	r2,14(r16)
 2014420:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2014424:	80800717 	ldw	r2,28(r16)
 2014428:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 201442c:	80800917 	ldw	r2,36(r16)
 2014430:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2014434:	e0befc04 	addi	r2,fp,-1040
 2014438:	e0bee215 	stw	r2,-1144(fp)
 201443c:	e0bee217 	ldw	r2,-1144(fp)
 2014440:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2014444:	00810004 	movi	r2,1024
 2014448:	e0bee415 	stw	r2,-1136(fp)
 201444c:	e0bee417 	ldw	r2,-1136(fp)
 2014450:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2014454:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2014458:	e0bee204 	addi	r2,fp,-1144
 201445c:	e1fffe17 	ldw	r7,-8(fp)
 2014460:	e1bffd17 	ldw	r6,-12(fp)
 2014464:	100b883a 	mov	r5,r2
 2014468:	e13ffc17 	ldw	r4,-16(fp)
 201446c:	20145200 	call	2014520 <___vfiprintf_internal_r>
 2014470:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 2014474:	e0bee117 	ldw	r2,-1148(fp)
 2014478:	10000716 	blt	r2,zero,2014498 <__sbprintf+0xb8>
 201447c:	e0bee204 	addi	r2,fp,-1144
 2014480:	100b883a 	mov	r5,r2
 2014484:	e13ffc17 	ldw	r4,-16(fp)
 2014488:	200ec080 	call	200ec08 <_fflush_r>
 201448c:	10000226 	beq	r2,zero,2014498 <__sbprintf+0xb8>
		ret = EOF;
 2014490:	00bfffc4 	movi	r2,-1
 2014494:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 2014498:	e0bee50b 	ldhu	r2,-1132(fp)
 201449c:	10bfffcc 	andi	r2,r2,65535
 20144a0:	1080100c 	andi	r2,r2,64
 20144a4:	10000326 	beq	r2,zero,20144b4 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 20144a8:	8080030b 	ldhu	r2,12(r16)
 20144ac:	10801014 	ori	r2,r2,64
 20144b0:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 20144b4:	e0bee117 	ldw	r2,-1148(fp)
}
 20144b8:	e6ffff04 	addi	sp,fp,-4
 20144bc:	dfc00217 	ldw	ra,8(sp)
 20144c0:	df000117 	ldw	fp,4(sp)
 20144c4:	dc000017 	ldw	r16,0(sp)
 20144c8:	dec00304 	addi	sp,sp,12
 20144cc:	f800283a 	ret

020144d0 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 20144d0:	defffa04 	addi	sp,sp,-24
 20144d4:	dfc00515 	stw	ra,20(sp)
 20144d8:	df000415 	stw	fp,16(sp)
 20144dc:	df000404 	addi	fp,sp,16
 20144e0:	e13ffd15 	stw	r4,-12(fp)
 20144e4:	e17ffe15 	stw	r5,-8(fp)
 20144e8:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 20144ec:	d0a03017 	ldw	r2,-32576(gp)
 20144f0:	e1ffff17 	ldw	r7,-4(fp)
 20144f4:	e1bffe17 	ldw	r6,-8(fp)
 20144f8:	e17ffd17 	ldw	r5,-12(fp)
 20144fc:	1009883a 	mov	r4,r2
 2014500:	20145200 	call	2014520 <___vfiprintf_internal_r>
 2014504:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2014508:	e0bffc17 	ldw	r2,-16(fp)
}
 201450c:	e037883a 	mov	sp,fp
 2014510:	dfc00117 	ldw	ra,4(sp)
 2014514:	df000017 	ldw	fp,0(sp)
 2014518:	dec00204 	addi	sp,sp,8
 201451c:	f800283a 	ret

02014520 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 2014520:	deffb704 	addi	sp,sp,-292
 2014524:	dfc04815 	stw	ra,288(sp)
 2014528:	df004715 	stw	fp,284(sp)
 201452c:	ddc04615 	stw	r23,280(sp)
 2014530:	dd804515 	stw	r22,276(sp)
 2014534:	dd404415 	stw	r21,272(sp)
 2014538:	dd004315 	stw	r20,268(sp)
 201453c:	dcc04215 	stw	r19,264(sp)
 2014540:	dc804115 	stw	r18,260(sp)
 2014544:	dc404015 	stw	r17,256(sp)
 2014548:	dc003f15 	stw	r16,252(sp)
 201454c:	df004704 	addi	fp,sp,284
 2014550:	e13fe615 	stw	r4,-104(fp)
 2014554:	e17fe715 	stw	r5,-100(fp)
 2014558:	e1bfe815 	stw	r6,-96(fp)
 201455c:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 2014560:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 2014564:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 2014568:	e0bfe617 	ldw	r2,-104(fp)
 201456c:	e0bfc415 	stw	r2,-240(fp)
 2014570:	e0bfc417 	ldw	r2,-240(fp)
 2014574:	10000526 	beq	r2,zero,201458c <___vfiprintf_internal_r+0x6c>
 2014578:	e0bfc417 	ldw	r2,-240(fp)
 201457c:	10800e17 	ldw	r2,56(r2)
 2014580:	1000021e 	bne	r2,zero,201458c <___vfiprintf_internal_r+0x6c>
 2014584:	e13fc417 	ldw	r4,-240(fp)
 2014588:	200f0880 	call	200f088 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 201458c:	e0bfe717 	ldw	r2,-100(fp)
 2014590:	1080030b 	ldhu	r2,12(r2)
 2014594:	10bfffcc 	andi	r2,r2,65535
 2014598:	1088000c 	andi	r2,r2,8192
 201459c:	10000c1e 	bne	r2,zero,20145d0 <___vfiprintf_internal_r+0xb0>
 20145a0:	e0bfe717 	ldw	r2,-100(fp)
 20145a4:	1080030b 	ldhu	r2,12(r2)
 20145a8:	10880014 	ori	r2,r2,8192
 20145ac:	1007883a 	mov	r3,r2
 20145b0:	e0bfe717 	ldw	r2,-100(fp)
 20145b4:	10c0030d 	sth	r3,12(r2)
 20145b8:	e0bfe717 	ldw	r2,-100(fp)
 20145bc:	10c01917 	ldw	r3,100(r2)
 20145c0:	00b7ffc4 	movi	r2,-8193
 20145c4:	1886703a 	and	r3,r3,r2
 20145c8:	e0bfe717 	ldw	r2,-100(fp)
 20145cc:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 20145d0:	e0bfe717 	ldw	r2,-100(fp)
 20145d4:	1080030b 	ldhu	r2,12(r2)
 20145d8:	10bfffcc 	andi	r2,r2,65535
 20145dc:	1080020c 	andi	r2,r2,8
 20145e0:	10000326 	beq	r2,zero,20145f0 <___vfiprintf_internal_r+0xd0>
 20145e4:	e0bfe717 	ldw	r2,-100(fp)
 20145e8:	10800417 	ldw	r2,16(r2)
 20145ec:	1000061e 	bne	r2,zero,2014608 <___vfiprintf_internal_r+0xe8>
 20145f0:	e17fe717 	ldw	r5,-100(fp)
 20145f4:	e13fe617 	ldw	r4,-104(fp)
 20145f8:	200c8380 	call	200c838 <__swsetup_r>
 20145fc:	10000226 	beq	r2,zero,2014608 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 2014600:	00bfffc4 	movi	r2,-1
 2014604:	00046a06 	br	20157b0 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2014608:	e0bfe717 	ldw	r2,-100(fp)
 201460c:	1080030b 	ldhu	r2,12(r2)
 2014610:	10bfffcc 	andi	r2,r2,65535
 2014614:	1080068c 	andi	r2,r2,26
 2014618:	10800298 	cmpnei	r2,r2,10
 201461c:	10000c1e 	bne	r2,zero,2014650 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 2014620:	e0bfe717 	ldw	r2,-100(fp)
 2014624:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2014628:	10bfffcc 	andi	r2,r2,65535
 201462c:	10a0001c 	xori	r2,r2,32768
 2014630:	10a00004 	addi	r2,r2,-32768
 2014634:	10000616 	blt	r2,zero,2014650 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 2014638:	e1ffe917 	ldw	r7,-92(fp)
 201463c:	e1bfe817 	ldw	r6,-96(fp)
 2014640:	e17fe717 	ldw	r5,-100(fp)
 2014644:	e13fe617 	ldw	r4,-104(fp)
 2014648:	20143e00 	call	20143e0 <__sbprintf>
 201464c:	00045806 	br	20157b0 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 2014650:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 2014654:	e4bfcb04 	addi	r18,fp,-212
 2014658:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 201465c:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 2014660:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 2014664:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 2014668:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 201466c:	00000106 	br	2014674 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 2014670:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 2014674:	a8800003 	ldbu	r2,0(r21)
 2014678:	10803fcc 	andi	r2,r2,255
 201467c:	1080201c 	xori	r2,r2,128
 2014680:	10bfe004 	addi	r2,r2,-128
 2014684:	10000626 	beq	r2,zero,20146a0 <___vfiprintf_internal_r+0x180>
 2014688:	a8800003 	ldbu	r2,0(r21)
 201468c:	10803fcc 	andi	r2,r2,255
 2014690:	1080201c 	xori	r2,r2,128
 2014694:	10bfe004 	addi	r2,r2,-128
 2014698:	10800958 	cmpnei	r2,r2,37
 201469c:	103ff41e 	bne	r2,zero,2014670 <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 20146a0:	a807883a 	mov	r3,r21
 20146a4:	a005883a 	mov	r2,r20
 20146a8:	18a1c83a 	sub	r16,r3,r2
 20146ac:	80001826 	beq	r16,zero,2014710 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 20146b0:	95000015 	stw	r20,0(r18)
 20146b4:	8005883a 	mov	r2,r16
 20146b8:	90800115 	stw	r2,4(r18)
 20146bc:	e0bfca17 	ldw	r2,-216(fp)
 20146c0:	8007883a 	mov	r3,r16
 20146c4:	10c5883a 	add	r2,r2,r3
 20146c8:	e0bfca15 	stw	r2,-216(fp)
 20146cc:	94800204 	addi	r18,r18,8
 20146d0:	e0bfc917 	ldw	r2,-220(fp)
 20146d4:	10800044 	addi	r2,r2,1
 20146d8:	e0bfc915 	stw	r2,-220(fp)
 20146dc:	e0bfc917 	ldw	r2,-220(fp)
 20146e0:	10800210 	cmplti	r2,r2,8
 20146e4:	1000071e 	bne	r2,zero,2014704 <___vfiprintf_internal_r+0x1e4>
 20146e8:	e0bfc804 	addi	r2,fp,-224
 20146ec:	100d883a 	mov	r6,r2
 20146f0:	e17fe717 	ldw	r5,-100(fp)
 20146f4:	e13fe617 	ldw	r4,-104(fp)
 20146f8:	20142a40 	call	20142a4 <__sprint_r>
 20146fc:	1004031e 	bne	r2,zero,201570c <___vfiprintf_internal_r+0x11ec>
 2014700:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 2014704:	e0bfb917 	ldw	r2,-284(fp)
 2014708:	1405883a 	add	r2,r2,r16
 201470c:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 2014710:	a8800003 	ldbu	r2,0(r21)
 2014714:	10803fcc 	andi	r2,r2,255
 2014718:	1080201c 	xori	r2,r2,128
 201471c:	10bfe004 	addi	r2,r2,-128
 2014720:	1003ec26 	beq	r2,zero,20156d4 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 2014724:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 2014728:	ad400044 	addi	r21,r21,1

		flags = 0;
 201472c:	0027883a 	mov	r19,zero
		dprec = 0;
 2014730:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 2014734:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 2014738:	00bfffc4 	movi	r2,-1
 201473c:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 2014740:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 2014744:	a805883a 	mov	r2,r21
 2014748:	15400044 	addi	r21,r2,1
 201474c:	10800003 	ldbu	r2,0(r2)
 2014750:	14403fcc 	andi	r17,r2,255
 2014754:	8c40201c 	xori	r17,r17,128
 2014758:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 201475c:	88bff804 	addi	r2,r17,-32
 2014760:	10c01668 	cmpgeui	r3,r2,89
 2014764:	1802881e 	bne	r3,zero,2015188 <___vfiprintf_internal_r+0xc68>
 2014768:	100690ba 	slli	r3,r2,2
 201476c:	00808074 	movhi	r2,513
 2014770:	1091e004 	addi	r2,r2,18304
 2014774:	1885883a 	add	r2,r3,r2
 2014778:	10800017 	ldw	r2,0(r2)
 201477c:	1000683a 	jmp	r2
 2014780:	020148e4 	muli	r8,zero,1315
 2014784:	02015188 	cmpgei	r8,zero,1350
 2014788:	02015188 	cmpgei	r8,zero,1350
 201478c:	02014904 	movi	r8,1316
 2014790:	02015188 	cmpgei	r8,zero,1350
 2014794:	02015188 	cmpgei	r8,zero,1350
 2014798:	02015188 	cmpgei	r8,zero,1350
 201479c:	02015188 	cmpgei	r8,zero,1350
 20147a0:	02015188 	cmpgei	r8,zero,1350
 20147a4:	02015188 	cmpgei	r8,zero,1350
 20147a8:	0201490c 	andi	r8,zero,1316
 20147ac:	02014940 	call	201494 <__alt_mem_mem_Nios_PI+0x1494>
 20147b0:	02015188 	cmpgei	r8,zero,1350
 20147b4:	02014938 	rdprs	r8,zero,1316
 20147b8:	0201494c 	andi	r8,zero,1317
 20147bc:	02015188 	cmpgei	r8,zero,1350
 20147c0:	020149e0 	cmpeqi	r8,zero,1319
 20147c4:	020149e8 	cmpgeui	r8,zero,1319
 20147c8:	020149e8 	cmpgeui	r8,zero,1319
 20147cc:	020149e8 	cmpgeui	r8,zero,1319
 20147d0:	020149e8 	cmpgeui	r8,zero,1319
 20147d4:	020149e8 	cmpgeui	r8,zero,1319
 20147d8:	020149e8 	cmpgeui	r8,zero,1319
 20147dc:	020149e8 	cmpgeui	r8,zero,1319
 20147e0:	020149e8 	cmpgeui	r8,zero,1319
 20147e4:	020149e8 	cmpgeui	r8,zero,1319
 20147e8:	02015188 	cmpgei	r8,zero,1350
 20147ec:	02015188 	cmpgei	r8,zero,1350
 20147f0:	02015188 	cmpgei	r8,zero,1350
 20147f4:	02015188 	cmpgei	r8,zero,1350
 20147f8:	02015188 	cmpgei	r8,zero,1350
 20147fc:	02015188 	cmpgei	r8,zero,1350
 2014800:	02015188 	cmpgei	r8,zero,1350
 2014804:	02015188 	cmpgei	r8,zero,1350
 2014808:	02015188 	cmpgei	r8,zero,1350
 201480c:	02015188 	cmpgei	r8,zero,1350
 2014810:	02014a88 	cmpgei	r8,zero,1322
 2014814:	02015188 	cmpgei	r8,zero,1350
 2014818:	02015188 	cmpgei	r8,zero,1350
 201481c:	02015188 	cmpgei	r8,zero,1350
 2014820:	02015188 	cmpgei	r8,zero,1350
 2014824:	02015188 	cmpgei	r8,zero,1350
 2014828:	02015188 	cmpgei	r8,zero,1350
 201482c:	02015188 	cmpgei	r8,zero,1350
 2014830:	02015188 	cmpgei	r8,zero,1350
 2014834:	02015188 	cmpgei	r8,zero,1350
 2014838:	02015188 	cmpgei	r8,zero,1350
 201483c:	02014c28 	cmpgeui	r8,zero,1328
 2014840:	02015188 	cmpgei	r8,zero,1350
 2014844:	02015188 	cmpgei	r8,zero,1350
 2014848:	02015188 	cmpgei	r8,zero,1350
 201484c:	02015188 	cmpgei	r8,zero,1350
 2014850:	02015188 	cmpgei	r8,zero,1350
 2014854:	02014da4 	muli	r8,zero,1334
 2014858:	02015188 	cmpgei	r8,zero,1350
 201485c:	02015188 	cmpgei	r8,zero,1350
 2014860:	02014e64 	muli	r8,zero,1337
 2014864:	02015188 	cmpgei	r8,zero,1350
 2014868:	02015188 	cmpgei	r8,zero,1350
 201486c:	02015188 	cmpgei	r8,zero,1350
 2014870:	02015188 	cmpgei	r8,zero,1350
 2014874:	02015188 	cmpgei	r8,zero,1350
 2014878:	02015188 	cmpgei	r8,zero,1350
 201487c:	02015188 	cmpgei	r8,zero,1350
 2014880:	02015188 	cmpgei	r8,zero,1350
 2014884:	02015188 	cmpgei	r8,zero,1350
 2014888:	02015188 	cmpgei	r8,zero,1350
 201488c:	02014a60 	cmpeqi	r8,zero,1321
 2014890:	02014a8c 	andi	r8,zero,1322
 2014894:	02015188 	cmpgei	r8,zero,1350
 2014898:	02015188 	cmpgei	r8,zero,1350
 201489c:	02015188 	cmpgei	r8,zero,1350
 20148a0:	02014a24 	muli	r8,zero,1320
 20148a4:	02014a8c 	andi	r8,zero,1322
 20148a8:	02015188 	cmpgei	r8,zero,1350
 20148ac:	02015188 	cmpgei	r8,zero,1350
 20148b0:	02014a2c 	andhi	r8,zero,1320
 20148b4:	02015188 	cmpgei	r8,zero,1350
 20148b8:	02014b88 	cmpgei	r8,zero,1326
 20148bc:	02014c2c 	andhi	r8,zero,1328
 20148c0:	02014ccc 	andi	r8,zero,1331
 20148c4:	02014a58 	cmpnei	r8,zero,1321
 20148c8:	02015188 	cmpgei	r8,zero,1350
 20148cc:	02014d14 	movui	r8,1332
 20148d0:	02015188 	cmpgei	r8,zero,1350
 20148d4:	02014da8 	cmpgeui	r8,zero,1334
 20148d8:	02015188 	cmpgei	r8,zero,1350
 20148dc:	02015188 	cmpgei	r8,zero,1350
 20148e0:	02014e74 	movhi	r8,1337
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 20148e4:	e0bfc703 	ldbu	r2,-228(fp)
 20148e8:	10803fcc 	andi	r2,r2,255
 20148ec:	1080201c 	xori	r2,r2,128
 20148f0:	10bfe004 	addi	r2,r2,-128
 20148f4:	103f931e 	bne	r2,zero,2014744 <___vfiprintf_internal_r+0x224>
				sign = ' ';
 20148f8:	00800804 	movi	r2,32
 20148fc:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 2014900:	003f9006 	br	2014744 <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 2014904:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2014908:	003f8e06 	br	2014744 <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 201490c:	e0bfe917 	ldw	r2,-92(fp)
 2014910:	10c00104 	addi	r3,r2,4
 2014914:	e0ffe915 	stw	r3,-92(fp)
 2014918:	10800017 	ldw	r2,0(r2)
 201491c:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2014920:	e0bfba17 	ldw	r2,-280(fp)
 2014924:	10000116 	blt	r2,zero,201492c <___vfiprintf_internal_r+0x40c>
				goto rflag;
 2014928:	003f8606 	br	2014744 <___vfiprintf_internal_r+0x224>
			width = -width;
 201492c:	e0bfba17 	ldw	r2,-280(fp)
 2014930:	0085c83a 	sub	r2,zero,r2
 2014934:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 2014938:	9cc00114 	ori	r19,r19,4
			goto rflag;
 201493c:	003f8106 	br	2014744 <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 2014940:	00800ac4 	movi	r2,43
 2014944:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 2014948:	003f7e06 	br	2014744 <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 201494c:	a805883a 	mov	r2,r21
 2014950:	15400044 	addi	r21,r2,1
 2014954:	10800003 	ldbu	r2,0(r2)
 2014958:	14403fcc 	andi	r17,r2,255
 201495c:	8c40201c 	xori	r17,r17,128
 2014960:	8c7fe004 	addi	r17,r17,-128
 2014964:	88800a98 	cmpnei	r2,r17,42
 2014968:	10000a1e 	bne	r2,zero,2014994 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 201496c:	e0bfe917 	ldw	r2,-92(fp)
 2014970:	10c00104 	addi	r3,r2,4
 2014974:	e0ffe915 	stw	r3,-92(fp)
 2014978:	10800017 	ldw	r2,0(r2)
 201497c:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 2014980:	e0bfbb17 	ldw	r2,-276(fp)
 2014984:	103f6f0e 	bge	r2,zero,2014744 <___vfiprintf_internal_r+0x224>
					prec = -1;
 2014988:	00bfffc4 	movi	r2,-1
 201498c:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 2014990:	003f6c06 	br	2014744 <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 2014994:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 2014998:	00000906 	br	20149c0 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 201499c:	80c002a4 	muli	r3,r16,10
 20149a0:	88bff404 	addi	r2,r17,-48
 20149a4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 20149a8:	a805883a 	mov	r2,r21
 20149ac:	15400044 	addi	r21,r2,1
 20149b0:	10800003 	ldbu	r2,0(r2)
 20149b4:	14403fcc 	andi	r17,r2,255
 20149b8:	8c40201c 	xori	r17,r17,128
 20149bc:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 20149c0:	88bff404 	addi	r2,r17,-48
 20149c4:	108002b0 	cmpltui	r2,r2,10
 20149c8:	103ff41e 	bne	r2,zero,201499c <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 20149cc:	8005883a 	mov	r2,r16
 20149d0:	1000010e 	bge	r2,zero,20149d8 <___vfiprintf_internal_r+0x4b8>
 20149d4:	00bfffc4 	movi	r2,-1
 20149d8:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 20149dc:	003f5f06 	br	201475c <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 20149e0:	9cc02014 	ori	r19,r19,128
			goto rflag;
 20149e4:	003f5706 	br	2014744 <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 20149e8:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 20149ec:	80c002a4 	muli	r3,r16,10
 20149f0:	88bff404 	addi	r2,r17,-48
 20149f4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 20149f8:	a805883a 	mov	r2,r21
 20149fc:	15400044 	addi	r21,r2,1
 2014a00:	10800003 	ldbu	r2,0(r2)
 2014a04:	14403fcc 	andi	r17,r2,255
 2014a08:	8c40201c 	xori	r17,r17,128
 2014a0c:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 2014a10:	88bff404 	addi	r2,r17,-48
 2014a14:	108002b0 	cmpltui	r2,r2,10
 2014a18:	103ff41e 	bne	r2,zero,20149ec <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 2014a1c:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 2014a20:	003f4e06 	br	201475c <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 2014a24:	9cc01014 	ori	r19,r19,64
			goto rflag;
 2014a28:	003f4606 	br	2014744 <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 2014a2c:	a8800003 	ldbu	r2,0(r21)
 2014a30:	10803fcc 	andi	r2,r2,255
 2014a34:	1080201c 	xori	r2,r2,128
 2014a38:	10bfe004 	addi	r2,r2,-128
 2014a3c:	10801b18 	cmpnei	r2,r2,108
 2014a40:	1000031e 	bne	r2,zero,2014a50 <___vfiprintf_internal_r+0x530>
				fmt++;
 2014a44:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 2014a48:	9cc00814 	ori	r19,r19,32
 2014a4c:	003f3d06 	br	2014744 <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 2014a50:	9cc00414 	ori	r19,r19,16
			goto rflag;
 2014a54:	003f3b06 	br	2014744 <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 2014a58:	9cc00814 	ori	r19,r19,32
			goto rflag;
 2014a5c:	003f3906 	br	2014744 <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 2014a60:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 2014a64:	e0bfe917 	ldw	r2,-92(fp)
 2014a68:	10c00104 	addi	r3,r2,4
 2014a6c:	e0ffe915 	stw	r3,-92(fp)
 2014a70:	10800017 	ldw	r2,0(r2)
 2014a74:	a0800005 	stb	r2,0(r20)
				size = 1;
 2014a78:	00800044 	movi	r2,1
 2014a7c:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 2014a80:	e03fc705 	stb	zero,-228(fp)
			break;
 2014a84:	0001c806 	br	20151a8 <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 2014a88:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 2014a8c:	9880080c 	andi	r2,r19,32
 2014a90:	10000826 	beq	r2,zero,2014ab4 <___vfiprintf_internal_r+0x594>
 2014a94:	e13fe917 	ldw	r4,-92(fp)
 2014a98:	20800204 	addi	r2,r4,8
 2014a9c:	e0bfe915 	stw	r2,-92(fp)
 2014aa0:	20800017 	ldw	r2,0(r4)
 2014aa4:	20c00117 	ldw	r3,4(r4)
 2014aa8:	e0bfea15 	stw	r2,-88(fp)
 2014aac:	e0ffeb15 	stw	r3,-84(fp)
 2014ab0:	00001e06 	br	2014b2c <___vfiprintf_internal_r+0x60c>
 2014ab4:	9880040c 	andi	r2,r19,16
 2014ab8:	10000826 	beq	r2,zero,2014adc <___vfiprintf_internal_r+0x5bc>
 2014abc:	e0bfe917 	ldw	r2,-92(fp)
 2014ac0:	10c00104 	addi	r3,r2,4
 2014ac4:	e0ffe915 	stw	r3,-92(fp)
 2014ac8:	10800017 	ldw	r2,0(r2)
 2014acc:	e0bfea15 	stw	r2,-88(fp)
 2014ad0:	1005d7fa 	srai	r2,r2,31
 2014ad4:	e0bfeb15 	stw	r2,-84(fp)
 2014ad8:	00001406 	br	2014b2c <___vfiprintf_internal_r+0x60c>
 2014adc:	9880100c 	andi	r2,r19,64
 2014ae0:	10000b26 	beq	r2,zero,2014b10 <___vfiprintf_internal_r+0x5f0>
 2014ae4:	e0bfe917 	ldw	r2,-92(fp)
 2014ae8:	10c00104 	addi	r3,r2,4
 2014aec:	e0ffe915 	stw	r3,-92(fp)
 2014af0:	10800017 	ldw	r2,0(r2)
 2014af4:	10bfffcc 	andi	r2,r2,65535
 2014af8:	10a0001c 	xori	r2,r2,32768
 2014afc:	10a00004 	addi	r2,r2,-32768
 2014b00:	e0bfea15 	stw	r2,-88(fp)
 2014b04:	1005d7fa 	srai	r2,r2,31
 2014b08:	e0bfeb15 	stw	r2,-84(fp)
 2014b0c:	00000706 	br	2014b2c <___vfiprintf_internal_r+0x60c>
 2014b10:	e0bfe917 	ldw	r2,-92(fp)
 2014b14:	10c00104 	addi	r3,r2,4
 2014b18:	e0ffe915 	stw	r3,-92(fp)
 2014b1c:	10800017 	ldw	r2,0(r2)
 2014b20:	e0bfea15 	stw	r2,-88(fp)
 2014b24:	1005d7fa 	srai	r2,r2,31
 2014b28:	e0bfeb15 	stw	r2,-84(fp)
 2014b2c:	e0bfea17 	ldw	r2,-88(fp)
 2014b30:	e0bfbc15 	stw	r2,-272(fp)
 2014b34:	e0ffeb17 	ldw	r3,-84(fp)
 2014b38:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 2014b3c:	e0bfbc17 	ldw	r2,-272(fp)
 2014b40:	e0ffbd17 	ldw	r3,-268(fp)
 2014b44:	18000d0e 	bge	r3,zero,2014b7c <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 2014b48:	000d883a 	mov	r6,zero
 2014b4c:	000f883a 	mov	r7,zero
 2014b50:	e13fbc17 	ldw	r4,-272(fp)
 2014b54:	e17fbd17 	ldw	r5,-268(fp)
 2014b58:	3105c83a 	sub	r2,r6,r4
 2014b5c:	3091803a 	cmpltu	r8,r6,r2
 2014b60:	3947c83a 	sub	r3,r7,r5
 2014b64:	1a09c83a 	sub	r4,r3,r8
 2014b68:	2007883a 	mov	r3,r4
 2014b6c:	e0bfbc15 	stw	r2,-272(fp)
 2014b70:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 2014b74:	00800b44 	movi	r2,45
 2014b78:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 2014b7c:	00800044 	movi	r2,1
 2014b80:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 2014b84:	0000f806 	br	2014f68 <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 2014b88:	9880080c 	andi	r2,r19,32
 2014b8c:	10000d26 	beq	r2,zero,2014bc4 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 2014b90:	e0bfe917 	ldw	r2,-92(fp)
 2014b94:	10c00104 	addi	r3,r2,4
 2014b98:	e0ffe915 	stw	r3,-92(fp)
 2014b9c:	10800017 	ldw	r2,0(r2)
 2014ba0:	e0ffb917 	ldw	r3,-284(fp)
 2014ba4:	e0fff015 	stw	r3,-64(fp)
 2014ba8:	1807d7fa 	srai	r3,r3,31
 2014bac:	e0fff115 	stw	r3,-60(fp)
 2014bb0:	e0fff017 	ldw	r3,-64(fp)
 2014bb4:	10c00015 	stw	r3,0(r2)
 2014bb8:	e0fff117 	ldw	r3,-60(fp)
 2014bbc:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2014bc0:	0002c306 	br	20156d0 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 2014bc4:	9880040c 	andi	r2,r19,16
 2014bc8:	10000726 	beq	r2,zero,2014be8 <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 2014bcc:	e0bfe917 	ldw	r2,-92(fp)
 2014bd0:	10c00104 	addi	r3,r2,4
 2014bd4:	e0ffe915 	stw	r3,-92(fp)
 2014bd8:	10800017 	ldw	r2,0(r2)
 2014bdc:	e0ffb917 	ldw	r3,-284(fp)
 2014be0:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2014be4:	0002ba06 	br	20156d0 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 2014be8:	9880100c 	andi	r2,r19,64
 2014bec:	10000726 	beq	r2,zero,2014c0c <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2014bf0:	e0bfe917 	ldw	r2,-92(fp)
 2014bf4:	10c00104 	addi	r3,r2,4
 2014bf8:	e0ffe915 	stw	r3,-92(fp)
 2014bfc:	10800017 	ldw	r2,0(r2)
 2014c00:	e0ffb917 	ldw	r3,-284(fp)
 2014c04:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2014c08:	0002b106 	br	20156d0 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 2014c0c:	e0bfe917 	ldw	r2,-92(fp)
 2014c10:	10c00104 	addi	r3,r2,4
 2014c14:	e0ffe915 	stw	r3,-92(fp)
 2014c18:	10800017 	ldw	r2,0(r2)
 2014c1c:	e0ffb917 	ldw	r3,-284(fp)
 2014c20:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 2014c24:	0002aa06 	br	20156d0 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 2014c28:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 2014c2c:	9880080c 	andi	r2,r19,32
 2014c30:	10000626 	beq	r2,zero,2014c4c <___vfiprintf_internal_r+0x72c>
 2014c34:	e0bfe917 	ldw	r2,-92(fp)
 2014c38:	10c00204 	addi	r3,r2,8
 2014c3c:	e0ffe915 	stw	r3,-92(fp)
 2014c40:	15800017 	ldw	r22,0(r2)
 2014c44:	15c00117 	ldw	r23,4(r2)
 2014c48:	00001c06 	br	2014cbc <___vfiprintf_internal_r+0x79c>
 2014c4c:	9880040c 	andi	r2,r19,16
 2014c50:	10000726 	beq	r2,zero,2014c70 <___vfiprintf_internal_r+0x750>
 2014c54:	e0bfe917 	ldw	r2,-92(fp)
 2014c58:	10c00104 	addi	r3,r2,4
 2014c5c:	e0ffe915 	stw	r3,-92(fp)
 2014c60:	10800017 	ldw	r2,0(r2)
 2014c64:	102d883a 	mov	r22,r2
 2014c68:	002f883a 	mov	r23,zero
 2014c6c:	00001306 	br	2014cbc <___vfiprintf_internal_r+0x79c>
 2014c70:	9880100c 	andi	r2,r19,64
 2014c74:	10000b26 	beq	r2,zero,2014ca4 <___vfiprintf_internal_r+0x784>
 2014c78:	e0bfe917 	ldw	r2,-92(fp)
 2014c7c:	10c00104 	addi	r3,r2,4
 2014c80:	e0ffe915 	stw	r3,-92(fp)
 2014c84:	10800017 	ldw	r2,0(r2)
 2014c88:	e0bff215 	stw	r2,-56(fp)
 2014c8c:	e03ff315 	stw	zero,-52(fp)
 2014c90:	e0bff217 	ldw	r2,-56(fp)
 2014c94:	15bfffcc 	andi	r22,r2,65535
 2014c98:	e0fff317 	ldw	r3,-52(fp)
 2014c9c:	182e703a 	and	r23,r3,zero
 2014ca0:	00000606 	br	2014cbc <___vfiprintf_internal_r+0x79c>
 2014ca4:	e0bfe917 	ldw	r2,-92(fp)
 2014ca8:	10c00104 	addi	r3,r2,4
 2014cac:	e0ffe915 	stw	r3,-92(fp)
 2014cb0:	10800017 	ldw	r2,0(r2)
 2014cb4:	102d883a 	mov	r22,r2
 2014cb8:	002f883a 	mov	r23,zero
 2014cbc:	e5bfbc15 	stw	r22,-272(fp)
 2014cc0:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 2014cc4:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 2014cc8:	0000a606 	br	2014f64 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 2014ccc:	e0bfe917 	ldw	r2,-92(fp)
 2014cd0:	10c00104 	addi	r3,r2,4
 2014cd4:	e0ffe915 	stw	r3,-92(fp)
 2014cd8:	10800017 	ldw	r2,0(r2)
 2014cdc:	e0bfbc15 	stw	r2,-272(fp)
 2014ce0:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 2014ce4:	00800084 	movi	r2,2
 2014ce8:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 2014cec:	008080b4 	movhi	r2,514
 2014cf0:	108cbe04 	addi	r2,r2,13048
 2014cf4:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 2014cf8:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 2014cfc:	00800c04 	movi	r2,48
 2014d00:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 2014d04:	04401e04 	movi	r17,120
 2014d08:	00801e04 	movi	r2,120
 2014d0c:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2014d10:	00009406 	br	2014f64 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 2014d14:	e0bfe917 	ldw	r2,-92(fp)
 2014d18:	10c00104 	addi	r3,r2,4
 2014d1c:	e0ffe915 	stw	r3,-92(fp)
 2014d20:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 2014d24:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 2014d28:	a000081e 	bne	r20,zero,2014d4c <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 2014d2c:	050080b4 	movhi	r20,514
 2014d30:	a50cc304 	addi	r20,r20,13068
				size = ((unsigned) prec > 6U) ? 6 : prec;
 2014d34:	e0bfbb17 	ldw	r2,-276(fp)
 2014d38:	10c001f0 	cmpltui	r3,r2,7
 2014d3c:	1800011e 	bne	r3,zero,2014d44 <___vfiprintf_internal_r+0x824>
 2014d40:	00800184 	movi	r2,6
 2014d44:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2014d48:	00011706 	br	20151a8 <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 2014d4c:	e0bfbb17 	ldw	r2,-276(fp)
 2014d50:	10001016 	blt	r2,zero,2014d94 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 2014d54:	e0bfbb17 	ldw	r2,-276(fp)
 2014d58:	100d883a 	mov	r6,r2
 2014d5c:	000b883a 	mov	r5,zero
 2014d60:	a009883a 	mov	r4,r20
 2014d64:	20114640 	call	2011464 <memchr>
 2014d68:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 2014d6c:	e0bfc617 	ldw	r2,-232(fp)
 2014d70:	10000526 	beq	r2,zero,2014d88 <___vfiprintf_internal_r+0x868>
					size = p - cp;
 2014d74:	e0bfc617 	ldw	r2,-232(fp)
 2014d78:	a007883a 	mov	r3,r20
 2014d7c:	10c5c83a 	sub	r2,r2,r3
 2014d80:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2014d84:	00010806 	br	20151a8 <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 2014d88:	e0bfbb17 	ldw	r2,-276(fp)
 2014d8c:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 2014d90:	00010506 	br	20151a8 <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 2014d94:	a009883a 	mov	r4,r20
 2014d98:	200a1e80 	call	200a1e8 <strlen>
 2014d9c:	e0bfc115 	stw	r2,-252(fp)

			break;
 2014da0:	00010106 	br	20151a8 <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 2014da4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 2014da8:	9880080c 	andi	r2,r19,32
 2014dac:	10000826 	beq	r2,zero,2014dd0 <___vfiprintf_internal_r+0x8b0>
 2014db0:	e0bfe917 	ldw	r2,-92(fp)
 2014db4:	10c00204 	addi	r3,r2,8
 2014db8:	e0ffe915 	stw	r3,-92(fp)
 2014dbc:	10c00017 	ldw	r3,0(r2)
 2014dc0:	e0ffec15 	stw	r3,-80(fp)
 2014dc4:	10c00117 	ldw	r3,4(r2)
 2014dc8:	e0ffed15 	stw	r3,-76(fp)
 2014dcc:	00001e06 	br	2014e48 <___vfiprintf_internal_r+0x928>
 2014dd0:	9880040c 	andi	r2,r19,16
 2014dd4:	10000726 	beq	r2,zero,2014df4 <___vfiprintf_internal_r+0x8d4>
 2014dd8:	e0bfe917 	ldw	r2,-92(fp)
 2014ddc:	10c00104 	addi	r3,r2,4
 2014de0:	e0ffe915 	stw	r3,-92(fp)
 2014de4:	10800017 	ldw	r2,0(r2)
 2014de8:	e0bfec15 	stw	r2,-80(fp)
 2014dec:	e03fed15 	stw	zero,-76(fp)
 2014df0:	00001506 	br	2014e48 <___vfiprintf_internal_r+0x928>
 2014df4:	9880100c 	andi	r2,r19,64
 2014df8:	10000d26 	beq	r2,zero,2014e30 <___vfiprintf_internal_r+0x910>
 2014dfc:	e0bfe917 	ldw	r2,-92(fp)
 2014e00:	10c00104 	addi	r3,r2,4
 2014e04:	e0ffe915 	stw	r3,-92(fp)
 2014e08:	10800017 	ldw	r2,0(r2)
 2014e0c:	e0bff415 	stw	r2,-48(fp)
 2014e10:	e03ff515 	stw	zero,-44(fp)
 2014e14:	e0bff417 	ldw	r2,-48(fp)
 2014e18:	10bfffcc 	andi	r2,r2,65535
 2014e1c:	e0bfec15 	stw	r2,-80(fp)
 2014e20:	e0fff517 	ldw	r3,-44(fp)
 2014e24:	1806703a 	and	r3,r3,zero
 2014e28:	e0ffed15 	stw	r3,-76(fp)
 2014e2c:	00000606 	br	2014e48 <___vfiprintf_internal_r+0x928>
 2014e30:	e0bfe917 	ldw	r2,-92(fp)
 2014e34:	10c00104 	addi	r3,r2,4
 2014e38:	e0ffe915 	stw	r3,-92(fp)
 2014e3c:	10800017 	ldw	r2,0(r2)
 2014e40:	e0bfec15 	stw	r2,-80(fp)
 2014e44:	e03fed15 	stw	zero,-76(fp)
 2014e48:	e0bfec17 	ldw	r2,-80(fp)
 2014e4c:	e0bfbc15 	stw	r2,-272(fp)
 2014e50:	e0ffed17 	ldw	r3,-76(fp)
 2014e54:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 2014e58:	00800044 	movi	r2,1
 2014e5c:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 2014e60:	00004006 	br	2014f64 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 2014e64:	008080b4 	movhi	r2,514
 2014e68:	108cc504 	addi	r2,r2,13076
 2014e6c:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 2014e70:	00000306 	br	2014e80 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 2014e74:	008080b4 	movhi	r2,514
 2014e78:	108cbe04 	addi	r2,r2,13048
 2014e7c:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 2014e80:	9880080c 	andi	r2,r19,32
 2014e84:	10000826 	beq	r2,zero,2014ea8 <___vfiprintf_internal_r+0x988>
 2014e88:	e0bfe917 	ldw	r2,-92(fp)
 2014e8c:	10c00204 	addi	r3,r2,8
 2014e90:	e0ffe915 	stw	r3,-92(fp)
 2014e94:	10c00017 	ldw	r3,0(r2)
 2014e98:	e0ffee15 	stw	r3,-72(fp)
 2014e9c:	10c00117 	ldw	r3,4(r2)
 2014ea0:	e0ffef15 	stw	r3,-68(fp)
 2014ea4:	00001e06 	br	2014f20 <___vfiprintf_internal_r+0xa00>
 2014ea8:	9880040c 	andi	r2,r19,16
 2014eac:	10000726 	beq	r2,zero,2014ecc <___vfiprintf_internal_r+0x9ac>
 2014eb0:	e0bfe917 	ldw	r2,-92(fp)
 2014eb4:	10c00104 	addi	r3,r2,4
 2014eb8:	e0ffe915 	stw	r3,-92(fp)
 2014ebc:	10800017 	ldw	r2,0(r2)
 2014ec0:	e0bfee15 	stw	r2,-72(fp)
 2014ec4:	e03fef15 	stw	zero,-68(fp)
 2014ec8:	00001506 	br	2014f20 <___vfiprintf_internal_r+0xa00>
 2014ecc:	9880100c 	andi	r2,r19,64
 2014ed0:	10000d26 	beq	r2,zero,2014f08 <___vfiprintf_internal_r+0x9e8>
 2014ed4:	e0bfe917 	ldw	r2,-92(fp)
 2014ed8:	10c00104 	addi	r3,r2,4
 2014edc:	e0ffe915 	stw	r3,-92(fp)
 2014ee0:	10800017 	ldw	r2,0(r2)
 2014ee4:	e0bff615 	stw	r2,-40(fp)
 2014ee8:	e03ff715 	stw	zero,-36(fp)
 2014eec:	e0bff617 	ldw	r2,-40(fp)
 2014ef0:	10bfffcc 	andi	r2,r2,65535
 2014ef4:	e0bfee15 	stw	r2,-72(fp)
 2014ef8:	e0fff717 	ldw	r3,-36(fp)
 2014efc:	1806703a 	and	r3,r3,zero
 2014f00:	e0ffef15 	stw	r3,-68(fp)
 2014f04:	00000606 	br	2014f20 <___vfiprintf_internal_r+0xa00>
 2014f08:	e0bfe917 	ldw	r2,-92(fp)
 2014f0c:	10c00104 	addi	r3,r2,4
 2014f10:	e0ffe915 	stw	r3,-92(fp)
 2014f14:	10800017 	ldw	r2,0(r2)
 2014f18:	e0bfee15 	stw	r2,-72(fp)
 2014f1c:	e03fef15 	stw	zero,-68(fp)
 2014f20:	e0bfee17 	ldw	r2,-72(fp)
 2014f24:	e0bfbc15 	stw	r2,-272(fp)
 2014f28:	e0ffef17 	ldw	r3,-68(fp)
 2014f2c:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 2014f30:	00800084 	movi	r2,2
 2014f34:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 2014f38:	9880004c 	andi	r2,r19,1
 2014f3c:	10000926 	beq	r2,zero,2014f64 <___vfiprintf_internal_r+0xa44>
 2014f40:	e0bfbc17 	ldw	r2,-272(fp)
 2014f44:	e0ffbd17 	ldw	r3,-268(fp)
 2014f48:	10c4b03a 	or	r2,r2,r3
 2014f4c:	10000526 	beq	r2,zero,2014f64 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 2014f50:	00800c04 	movi	r2,48
 2014f54:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 2014f58:	8805883a 	mov	r2,r17
 2014f5c:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 2014f60:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 2014f64:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 2014f68:	e0bfbb17 	ldw	r2,-276(fp)
 2014f6c:	e0bfbf15 	stw	r2,-260(fp)
 2014f70:	e0bfbf17 	ldw	r2,-260(fp)
 2014f74:	10000216 	blt	r2,zero,2014f80 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 2014f78:	00bfdfc4 	movi	r2,-129
 2014f7c:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 2014f80:	e53fdb04 	addi	r20,fp,-148
 2014f84:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 2014f88:	e0bfbc17 	ldw	r2,-272(fp)
 2014f8c:	e0ffbd17 	ldw	r3,-268(fp)
 2014f90:	10c4b03a 	or	r2,r2,r3
 2014f94:	1000021e 	bne	r2,zero,2014fa0 <___vfiprintf_internal_r+0xa80>
 2014f98:	e0bfbb17 	ldw	r2,-276(fp)
 2014f9c:	10006c26 	beq	r2,zero,2015150 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 2014fa0:	e0bfbe03 	ldbu	r2,-264(fp)
 2014fa4:	10c00060 	cmpeqi	r3,r2,1
 2014fa8:	1800211e 	bne	r3,zero,2015030 <___vfiprintf_internal_r+0xb10>
 2014fac:	10c000a0 	cmpeqi	r3,r2,2
 2014fb0:	1800491e 	bne	r3,zero,20150d8 <___vfiprintf_internal_r+0xbb8>
 2014fb4:	10005d1e 	bne	r2,zero,201512c <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 2014fb8:	a53fffc4 	addi	r20,r20,-1
 2014fbc:	e0bfbc17 	ldw	r2,-272(fp)
 2014fc0:	108001cc 	andi	r2,r2,7
 2014fc4:	10800c04 	addi	r2,r2,48
 2014fc8:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 2014fcc:	e0bfbd17 	ldw	r2,-268(fp)
 2014fd0:	1004977a 	slli	r2,r2,29
 2014fd4:	e0ffbc17 	ldw	r3,-272(fp)
 2014fd8:	1806d0fa 	srli	r3,r3,3
 2014fdc:	1884b03a 	or	r2,r3,r2
 2014fe0:	e0bfbc15 	stw	r2,-272(fp)
 2014fe4:	e0bfbd17 	ldw	r2,-268(fp)
 2014fe8:	1004d0fa 	srli	r2,r2,3
 2014fec:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 2014ff0:	e0bfbc17 	ldw	r2,-272(fp)
 2014ff4:	e0ffbd17 	ldw	r3,-268(fp)
 2014ff8:	10c4b03a 	or	r2,r2,r3
 2014ffc:	103fee1e 	bne	r2,zero,2014fb8 <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 2015000:	9880004c 	andi	r2,r19,1
 2015004:	10005026 	beq	r2,zero,2015148 <___vfiprintf_internal_r+0xc28>
 2015008:	a0800003 	ldbu	r2,0(r20)
 201500c:	10803fcc 	andi	r2,r2,255
 2015010:	1080201c 	xori	r2,r2,128
 2015014:	10bfe004 	addi	r2,r2,-128
 2015018:	10800c20 	cmpeqi	r2,r2,48
 201501c:	10004a1e 	bne	r2,zero,2015148 <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 2015020:	a53fffc4 	addi	r20,r20,-1
 2015024:	00800c04 	movi	r2,48
 2015028:	a0800005 	stb	r2,0(r20)
					break;
 201502c:	00004606 	br	2015148 <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 2015030:	e0bfbd17 	ldw	r2,-268(fp)
 2015034:	10000a1e 	bne	r2,zero,2015060 <___vfiprintf_internal_r+0xb40>
 2015038:	e0bfbd17 	ldw	r2,-268(fp)
 201503c:	1000031e 	bne	r2,zero,201504c <___vfiprintf_internal_r+0xb2c>
 2015040:	e0bfbc17 	ldw	r2,-272(fp)
 2015044:	108002a8 	cmpgeui	r2,r2,10
 2015048:	1000051e 	bne	r2,zero,2015060 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 201504c:	a53fffc4 	addi	r20,r20,-1
 2015050:	e0bfbc17 	ldw	r2,-272(fp)
 2015054:	10800c04 	addi	r2,r2,48
 2015058:	a0800005 	stb	r2,0(r20)
						break;
 201505c:	00003b06 	br	201514c <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 2015060:	a53fffc4 	addi	r20,r20,-1
 2015064:	e0bfbc17 	ldw	r2,-272(fp)
 2015068:	e0ffbd17 	ldw	r3,-268(fp)
 201506c:	01800284 	movi	r6,10
 2015070:	000f883a 	mov	r7,zero
 2015074:	1009883a 	mov	r4,r2
 2015078:	180b883a 	mov	r5,r3
 201507c:	20169b00 	call	20169b0 <__umoddi3>
 2015080:	1009883a 	mov	r4,r2
 2015084:	180b883a 	mov	r5,r3
 2015088:	2005883a 	mov	r2,r4
 201508c:	2807883a 	mov	r3,r5
 2015090:	10800c04 	addi	r2,r2,48
 2015094:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 2015098:	e0bfbc17 	ldw	r2,-272(fp)
 201509c:	e0ffbd17 	ldw	r3,-268(fp)
 20150a0:	01800284 	movi	r6,10
 20150a4:	000f883a 	mov	r7,zero
 20150a8:	1009883a 	mov	r4,r2
 20150ac:	180b883a 	mov	r5,r3
 20150b0:	20164380 	call	2016438 <__udivdi3>
 20150b4:	1009883a 	mov	r4,r2
 20150b8:	180b883a 	mov	r5,r3
 20150bc:	e13fbc15 	stw	r4,-272(fp)
 20150c0:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 20150c4:	e0bfbc17 	ldw	r2,-272(fp)
 20150c8:	e0ffbd17 	ldw	r3,-268(fp)
 20150cc:	10c4b03a 	or	r2,r2,r3
 20150d0:	103fe31e 	bne	r2,zero,2015060 <___vfiprintf_internal_r+0xb40>
					break;
 20150d4:	00001d06 	br	201514c <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 20150d8:	a53fffc4 	addi	r20,r20,-1
 20150dc:	e0bfbc17 	ldw	r2,-272(fp)
 20150e0:	108003cc 	andi	r2,r2,15
 20150e4:	e0ffc217 	ldw	r3,-248(fp)
 20150e8:	1885883a 	add	r2,r3,r2
 20150ec:	10800003 	ldbu	r2,0(r2)
 20150f0:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 20150f4:	e0bfbd17 	ldw	r2,-268(fp)
 20150f8:	1004973a 	slli	r2,r2,28
 20150fc:	e0ffbc17 	ldw	r3,-272(fp)
 2015100:	1806d13a 	srli	r3,r3,4
 2015104:	1884b03a 	or	r2,r3,r2
 2015108:	e0bfbc15 	stw	r2,-272(fp)
 201510c:	e0bfbd17 	ldw	r2,-268(fp)
 2015110:	1004d13a 	srli	r2,r2,4
 2015114:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 2015118:	e0bfbc17 	ldw	r2,-272(fp)
 201511c:	e0ffbd17 	ldw	r3,-268(fp)
 2015120:	10c4b03a 	or	r2,r2,r3
 2015124:	103fec1e 	bne	r2,zero,20150d8 <___vfiprintf_internal_r+0xbb8>
					break;
 2015128:	00000806 	br	201514c <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 201512c:	050080b4 	movhi	r20,514
 2015130:	a50cca04 	addi	r20,r20,13096
					size = strlen (cp);
 2015134:	a009883a 	mov	r4,r20
 2015138:	200a1e80 	call	200a1e8 <strlen>
 201513c:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 2015140:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 2015144:	00001806 	br	20151a8 <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 2015148:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 201514c:	00000706 	br	201516c <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 2015150:	e0bfbe03 	ldbu	r2,-264(fp)
 2015154:	1000051e 	bne	r2,zero,201516c <___vfiprintf_internal_r+0xc4c>
 2015158:	9880004c 	andi	r2,r19,1
 201515c:	10000326 	beq	r2,zero,201516c <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 2015160:	a53fffc4 	addi	r20,r20,-1
 2015164:	00800c04 	movi	r2,48
 2015168:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 201516c:	e0bfdb04 	addi	r2,fp,-148
 2015170:	10800a04 	addi	r2,r2,40
 2015174:	1007883a 	mov	r3,r2
 2015178:	a005883a 	mov	r2,r20
 201517c:	1885c83a 	sub	r2,r3,r2
 2015180:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 2015184:	00000806 	br	20151a8 <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 2015188:	88015426 	beq	r17,zero,20156dc <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 201518c:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 2015190:	8805883a 	mov	r2,r17
 2015194:	a0800005 	stb	r2,0(r20)
			size = 1;
 2015198:	00800044 	movi	r2,1
 201519c:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 20151a0:	e03fc705 	stb	zero,-228(fp)
			break;
 20151a4:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 20151a8:	e0ffbf17 	ldw	r3,-260(fp)
 20151ac:	e0bfc117 	ldw	r2,-252(fp)
 20151b0:	10c0010e 	bge	r2,r3,20151b8 <___vfiprintf_internal_r+0xc98>
 20151b4:	1805883a 	mov	r2,r3
 20151b8:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 20151bc:	e0bfc703 	ldbu	r2,-228(fp)
 20151c0:	10803fcc 	andi	r2,r2,255
 20151c4:	1080201c 	xori	r2,r2,128
 20151c8:	10bfe004 	addi	r2,r2,-128
 20151cc:	10000326 	beq	r2,zero,20151dc <___vfiprintf_internal_r+0xcbc>
			realsz++;
 20151d0:	e0bfc017 	ldw	r2,-256(fp)
 20151d4:	10800044 	addi	r2,r2,1
 20151d8:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 20151dc:	9880008c 	andi	r2,r19,2
 20151e0:	10000326 	beq	r2,zero,20151f0 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 20151e4:	e0bfc017 	ldw	r2,-256(fp)
 20151e8:	10800084 	addi	r2,r2,2
 20151ec:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 20151f0:	9880210c 	andi	r2,r19,132
 20151f4:	1000351e 	bne	r2,zero,20152cc <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 20151f8:	e0ffba17 	ldw	r3,-280(fp)
 20151fc:	e0bfc017 	ldw	r2,-256(fp)
 2015200:	18a1c83a 	sub	r16,r3,r2
 2015204:	0400310e 	bge	zero,r16,20152cc <___vfiprintf_internal_r+0xdac>
 2015208:	00001706 	br	2015268 <___vfiprintf_internal_r+0xd48>
 201520c:	008080b4 	movhi	r2,514
 2015210:	108cd084 	addi	r2,r2,13122
 2015214:	90800015 	stw	r2,0(r18)
 2015218:	00800404 	movi	r2,16
 201521c:	90800115 	stw	r2,4(r18)
 2015220:	e0bfca17 	ldw	r2,-216(fp)
 2015224:	10800404 	addi	r2,r2,16
 2015228:	e0bfca15 	stw	r2,-216(fp)
 201522c:	94800204 	addi	r18,r18,8
 2015230:	e0bfc917 	ldw	r2,-220(fp)
 2015234:	10800044 	addi	r2,r2,1
 2015238:	e0bfc915 	stw	r2,-220(fp)
 201523c:	e0bfc917 	ldw	r2,-220(fp)
 2015240:	10800210 	cmplti	r2,r2,8
 2015244:	1000071e 	bne	r2,zero,2015264 <___vfiprintf_internal_r+0xd44>
 2015248:	e0bfc804 	addi	r2,fp,-224
 201524c:	100d883a 	mov	r6,r2
 2015250:	e17fe717 	ldw	r5,-100(fp)
 2015254:	e13fe617 	ldw	r4,-104(fp)
 2015258:	20142a40 	call	20142a4 <__sprint_r>
 201525c:	10012d1e 	bne	r2,zero,2015714 <___vfiprintf_internal_r+0x11f4>
 2015260:	e4bfcb04 	addi	r18,fp,-212
 2015264:	843ffc04 	addi	r16,r16,-16
 2015268:	80800448 	cmpgei	r2,r16,17
 201526c:	103fe71e 	bne	r2,zero,201520c <___vfiprintf_internal_r+0xcec>
 2015270:	008080b4 	movhi	r2,514
 2015274:	108cd084 	addi	r2,r2,13122
 2015278:	90800015 	stw	r2,0(r18)
 201527c:	8005883a 	mov	r2,r16
 2015280:	90800115 	stw	r2,4(r18)
 2015284:	e0bfca17 	ldw	r2,-216(fp)
 2015288:	8007883a 	mov	r3,r16
 201528c:	10c5883a 	add	r2,r2,r3
 2015290:	e0bfca15 	stw	r2,-216(fp)
 2015294:	94800204 	addi	r18,r18,8
 2015298:	e0bfc917 	ldw	r2,-220(fp)
 201529c:	10800044 	addi	r2,r2,1
 20152a0:	e0bfc915 	stw	r2,-220(fp)
 20152a4:	e0bfc917 	ldw	r2,-220(fp)
 20152a8:	10800210 	cmplti	r2,r2,8
 20152ac:	1000071e 	bne	r2,zero,20152cc <___vfiprintf_internal_r+0xdac>
 20152b0:	e0bfc804 	addi	r2,fp,-224
 20152b4:	100d883a 	mov	r6,r2
 20152b8:	e17fe717 	ldw	r5,-100(fp)
 20152bc:	e13fe617 	ldw	r4,-104(fp)
 20152c0:	20142a40 	call	20142a4 <__sprint_r>
 20152c4:	1001151e 	bne	r2,zero,201571c <___vfiprintf_internal_r+0x11fc>
 20152c8:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 20152cc:	e0bfc703 	ldbu	r2,-228(fp)
 20152d0:	10803fcc 	andi	r2,r2,255
 20152d4:	1080201c 	xori	r2,r2,128
 20152d8:	10bfe004 	addi	r2,r2,-128
 20152dc:	10001526 	beq	r2,zero,2015334 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 20152e0:	e0bfc704 	addi	r2,fp,-228
 20152e4:	90800015 	stw	r2,0(r18)
 20152e8:	00800044 	movi	r2,1
 20152ec:	90800115 	stw	r2,4(r18)
 20152f0:	e0bfca17 	ldw	r2,-216(fp)
 20152f4:	10800044 	addi	r2,r2,1
 20152f8:	e0bfca15 	stw	r2,-216(fp)
 20152fc:	94800204 	addi	r18,r18,8
 2015300:	e0bfc917 	ldw	r2,-220(fp)
 2015304:	10800044 	addi	r2,r2,1
 2015308:	e0bfc915 	stw	r2,-220(fp)
 201530c:	e0bfc917 	ldw	r2,-220(fp)
 2015310:	10800210 	cmplti	r2,r2,8
 2015314:	1000071e 	bne	r2,zero,2015334 <___vfiprintf_internal_r+0xe14>
 2015318:	e0bfc804 	addi	r2,fp,-224
 201531c:	100d883a 	mov	r6,r2
 2015320:	e17fe717 	ldw	r5,-100(fp)
 2015324:	e13fe617 	ldw	r4,-104(fp)
 2015328:	20142a40 	call	20142a4 <__sprint_r>
 201532c:	1000fd1e 	bne	r2,zero,2015724 <___vfiprintf_internal_r+0x1204>
 2015330:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 2015334:	9880008c 	andi	r2,r19,2
 2015338:	10001526 	beq	r2,zero,2015390 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 201533c:	e0bfe504 	addi	r2,fp,-108
 2015340:	90800015 	stw	r2,0(r18)
 2015344:	00800084 	movi	r2,2
 2015348:	90800115 	stw	r2,4(r18)
 201534c:	e0bfca17 	ldw	r2,-216(fp)
 2015350:	10800084 	addi	r2,r2,2
 2015354:	e0bfca15 	stw	r2,-216(fp)
 2015358:	94800204 	addi	r18,r18,8
 201535c:	e0bfc917 	ldw	r2,-220(fp)
 2015360:	10800044 	addi	r2,r2,1
 2015364:	e0bfc915 	stw	r2,-220(fp)
 2015368:	e0bfc917 	ldw	r2,-220(fp)
 201536c:	10800210 	cmplti	r2,r2,8
 2015370:	1000071e 	bne	r2,zero,2015390 <___vfiprintf_internal_r+0xe70>
 2015374:	e0bfc804 	addi	r2,fp,-224
 2015378:	100d883a 	mov	r6,r2
 201537c:	e17fe717 	ldw	r5,-100(fp)
 2015380:	e13fe617 	ldw	r4,-104(fp)
 2015384:	20142a40 	call	20142a4 <__sprint_r>
 2015388:	1000e81e 	bne	r2,zero,201572c <___vfiprintf_internal_r+0x120c>
 201538c:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 2015390:	9880210c 	andi	r2,r19,132
 2015394:	10802018 	cmpnei	r2,r2,128
 2015398:	1000351e 	bne	r2,zero,2015470 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 201539c:	e0ffba17 	ldw	r3,-280(fp)
 20153a0:	e0bfc017 	ldw	r2,-256(fp)
 20153a4:	18a1c83a 	sub	r16,r3,r2
 20153a8:	0400310e 	bge	zero,r16,2015470 <___vfiprintf_internal_r+0xf50>
 20153ac:	00001706 	br	201540c <___vfiprintf_internal_r+0xeec>
 20153b0:	008080b4 	movhi	r2,514
 20153b4:	108cd484 	addi	r2,r2,13138
 20153b8:	90800015 	stw	r2,0(r18)
 20153bc:	00800404 	movi	r2,16
 20153c0:	90800115 	stw	r2,4(r18)
 20153c4:	e0bfca17 	ldw	r2,-216(fp)
 20153c8:	10800404 	addi	r2,r2,16
 20153cc:	e0bfca15 	stw	r2,-216(fp)
 20153d0:	94800204 	addi	r18,r18,8
 20153d4:	e0bfc917 	ldw	r2,-220(fp)
 20153d8:	10800044 	addi	r2,r2,1
 20153dc:	e0bfc915 	stw	r2,-220(fp)
 20153e0:	e0bfc917 	ldw	r2,-220(fp)
 20153e4:	10800210 	cmplti	r2,r2,8
 20153e8:	1000071e 	bne	r2,zero,2015408 <___vfiprintf_internal_r+0xee8>
 20153ec:	e0bfc804 	addi	r2,fp,-224
 20153f0:	100d883a 	mov	r6,r2
 20153f4:	e17fe717 	ldw	r5,-100(fp)
 20153f8:	e13fe617 	ldw	r4,-104(fp)
 20153fc:	20142a40 	call	20142a4 <__sprint_r>
 2015400:	1000cc1e 	bne	r2,zero,2015734 <___vfiprintf_internal_r+0x1214>
 2015404:	e4bfcb04 	addi	r18,fp,-212
 2015408:	843ffc04 	addi	r16,r16,-16
 201540c:	80800448 	cmpgei	r2,r16,17
 2015410:	103fe71e 	bne	r2,zero,20153b0 <___vfiprintf_internal_r+0xe90>
 2015414:	008080b4 	movhi	r2,514
 2015418:	108cd484 	addi	r2,r2,13138
 201541c:	90800015 	stw	r2,0(r18)
 2015420:	8005883a 	mov	r2,r16
 2015424:	90800115 	stw	r2,4(r18)
 2015428:	e0bfca17 	ldw	r2,-216(fp)
 201542c:	8007883a 	mov	r3,r16
 2015430:	10c5883a 	add	r2,r2,r3
 2015434:	e0bfca15 	stw	r2,-216(fp)
 2015438:	94800204 	addi	r18,r18,8
 201543c:	e0bfc917 	ldw	r2,-220(fp)
 2015440:	10800044 	addi	r2,r2,1
 2015444:	e0bfc915 	stw	r2,-220(fp)
 2015448:	e0bfc917 	ldw	r2,-220(fp)
 201544c:	10800210 	cmplti	r2,r2,8
 2015450:	1000071e 	bne	r2,zero,2015470 <___vfiprintf_internal_r+0xf50>
 2015454:	e0bfc804 	addi	r2,fp,-224
 2015458:	100d883a 	mov	r6,r2
 201545c:	e17fe717 	ldw	r5,-100(fp)
 2015460:	e13fe617 	ldw	r4,-104(fp)
 2015464:	20142a40 	call	20142a4 <__sprint_r>
 2015468:	1000b41e 	bne	r2,zero,201573c <___vfiprintf_internal_r+0x121c>
 201546c:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2015470:	e0ffbf17 	ldw	r3,-260(fp)
 2015474:	e0bfc117 	ldw	r2,-252(fp)
 2015478:	18a1c83a 	sub	r16,r3,r2
 201547c:	0400310e 	bge	zero,r16,2015544 <___vfiprintf_internal_r+0x1024>
 2015480:	00001706 	br	20154e0 <___vfiprintf_internal_r+0xfc0>
 2015484:	008080b4 	movhi	r2,514
 2015488:	108cd484 	addi	r2,r2,13138
 201548c:	90800015 	stw	r2,0(r18)
 2015490:	00800404 	movi	r2,16
 2015494:	90800115 	stw	r2,4(r18)
 2015498:	e0bfca17 	ldw	r2,-216(fp)
 201549c:	10800404 	addi	r2,r2,16
 20154a0:	e0bfca15 	stw	r2,-216(fp)
 20154a4:	94800204 	addi	r18,r18,8
 20154a8:	e0bfc917 	ldw	r2,-220(fp)
 20154ac:	10800044 	addi	r2,r2,1
 20154b0:	e0bfc915 	stw	r2,-220(fp)
 20154b4:	e0bfc917 	ldw	r2,-220(fp)
 20154b8:	10800210 	cmplti	r2,r2,8
 20154bc:	1000071e 	bne	r2,zero,20154dc <___vfiprintf_internal_r+0xfbc>
 20154c0:	e0bfc804 	addi	r2,fp,-224
 20154c4:	100d883a 	mov	r6,r2
 20154c8:	e17fe717 	ldw	r5,-100(fp)
 20154cc:	e13fe617 	ldw	r4,-104(fp)
 20154d0:	20142a40 	call	20142a4 <__sprint_r>
 20154d4:	10009b1e 	bne	r2,zero,2015744 <___vfiprintf_internal_r+0x1224>
 20154d8:	e4bfcb04 	addi	r18,fp,-212
 20154dc:	843ffc04 	addi	r16,r16,-16
 20154e0:	80800448 	cmpgei	r2,r16,17
 20154e4:	103fe71e 	bne	r2,zero,2015484 <___vfiprintf_internal_r+0xf64>
 20154e8:	008080b4 	movhi	r2,514
 20154ec:	108cd484 	addi	r2,r2,13138
 20154f0:	90800015 	stw	r2,0(r18)
 20154f4:	8005883a 	mov	r2,r16
 20154f8:	90800115 	stw	r2,4(r18)
 20154fc:	e0bfca17 	ldw	r2,-216(fp)
 2015500:	8007883a 	mov	r3,r16
 2015504:	10c5883a 	add	r2,r2,r3
 2015508:	e0bfca15 	stw	r2,-216(fp)
 201550c:	94800204 	addi	r18,r18,8
 2015510:	e0bfc917 	ldw	r2,-220(fp)
 2015514:	10800044 	addi	r2,r2,1
 2015518:	e0bfc915 	stw	r2,-220(fp)
 201551c:	e0bfc917 	ldw	r2,-220(fp)
 2015520:	10800210 	cmplti	r2,r2,8
 2015524:	1000071e 	bne	r2,zero,2015544 <___vfiprintf_internal_r+0x1024>
 2015528:	e0bfc804 	addi	r2,fp,-224
 201552c:	100d883a 	mov	r6,r2
 2015530:	e17fe717 	ldw	r5,-100(fp)
 2015534:	e13fe617 	ldw	r4,-104(fp)
 2015538:	20142a40 	call	20142a4 <__sprint_r>
 201553c:	1000831e 	bne	r2,zero,201574c <___vfiprintf_internal_r+0x122c>
 2015540:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2015544:	95000015 	stw	r20,0(r18)
 2015548:	e0bfc117 	ldw	r2,-252(fp)
 201554c:	90800115 	stw	r2,4(r18)
 2015550:	e0ffca17 	ldw	r3,-216(fp)
 2015554:	e0bfc117 	ldw	r2,-252(fp)
 2015558:	1885883a 	add	r2,r3,r2
 201555c:	e0bfca15 	stw	r2,-216(fp)
 2015560:	94800204 	addi	r18,r18,8
 2015564:	e0bfc917 	ldw	r2,-220(fp)
 2015568:	10800044 	addi	r2,r2,1
 201556c:	e0bfc915 	stw	r2,-220(fp)
 2015570:	e0bfc917 	ldw	r2,-220(fp)
 2015574:	10800210 	cmplti	r2,r2,8
 2015578:	1000071e 	bne	r2,zero,2015598 <___vfiprintf_internal_r+0x1078>
 201557c:	e0bfc804 	addi	r2,fp,-224
 2015580:	100d883a 	mov	r6,r2
 2015584:	e17fe717 	ldw	r5,-100(fp)
 2015588:	e13fe617 	ldw	r4,-104(fp)
 201558c:	20142a40 	call	20142a4 <__sprint_r>
 2015590:	1000701e 	bne	r2,zero,2015754 <___vfiprintf_internal_r+0x1234>
 2015594:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 2015598:	9880010c 	andi	r2,r19,4
 201559c:	10003526 	beq	r2,zero,2015674 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 20155a0:	e0ffba17 	ldw	r3,-280(fp)
 20155a4:	e0bfc017 	ldw	r2,-256(fp)
 20155a8:	18a1c83a 	sub	r16,r3,r2
 20155ac:	0400310e 	bge	zero,r16,2015674 <___vfiprintf_internal_r+0x1154>
 20155b0:	00001706 	br	2015610 <___vfiprintf_internal_r+0x10f0>
 20155b4:	008080b4 	movhi	r2,514
 20155b8:	108cd084 	addi	r2,r2,13122
 20155bc:	90800015 	stw	r2,0(r18)
 20155c0:	00800404 	movi	r2,16
 20155c4:	90800115 	stw	r2,4(r18)
 20155c8:	e0bfca17 	ldw	r2,-216(fp)
 20155cc:	10800404 	addi	r2,r2,16
 20155d0:	e0bfca15 	stw	r2,-216(fp)
 20155d4:	94800204 	addi	r18,r18,8
 20155d8:	e0bfc917 	ldw	r2,-220(fp)
 20155dc:	10800044 	addi	r2,r2,1
 20155e0:	e0bfc915 	stw	r2,-220(fp)
 20155e4:	e0bfc917 	ldw	r2,-220(fp)
 20155e8:	10800210 	cmplti	r2,r2,8
 20155ec:	1000071e 	bne	r2,zero,201560c <___vfiprintf_internal_r+0x10ec>
 20155f0:	e0bfc804 	addi	r2,fp,-224
 20155f4:	100d883a 	mov	r6,r2
 20155f8:	e17fe717 	ldw	r5,-100(fp)
 20155fc:	e13fe617 	ldw	r4,-104(fp)
 2015600:	20142a40 	call	20142a4 <__sprint_r>
 2015604:	1000551e 	bne	r2,zero,201575c <___vfiprintf_internal_r+0x123c>
 2015608:	e4bfcb04 	addi	r18,fp,-212
 201560c:	843ffc04 	addi	r16,r16,-16
 2015610:	80800448 	cmpgei	r2,r16,17
 2015614:	103fe71e 	bne	r2,zero,20155b4 <___vfiprintf_internal_r+0x1094>
 2015618:	008080b4 	movhi	r2,514
 201561c:	108cd084 	addi	r2,r2,13122
 2015620:	90800015 	stw	r2,0(r18)
 2015624:	8005883a 	mov	r2,r16
 2015628:	90800115 	stw	r2,4(r18)
 201562c:	e0bfca17 	ldw	r2,-216(fp)
 2015630:	8007883a 	mov	r3,r16
 2015634:	10c5883a 	add	r2,r2,r3
 2015638:	e0bfca15 	stw	r2,-216(fp)
 201563c:	94800204 	addi	r18,r18,8
 2015640:	e0bfc917 	ldw	r2,-220(fp)
 2015644:	10800044 	addi	r2,r2,1
 2015648:	e0bfc915 	stw	r2,-220(fp)
 201564c:	e0bfc917 	ldw	r2,-220(fp)
 2015650:	10800210 	cmplti	r2,r2,8
 2015654:	1000071e 	bne	r2,zero,2015674 <___vfiprintf_internal_r+0x1154>
 2015658:	e0bfc804 	addi	r2,fp,-224
 201565c:	100d883a 	mov	r6,r2
 2015660:	e17fe717 	ldw	r5,-100(fp)
 2015664:	e13fe617 	ldw	r4,-104(fp)
 2015668:	20142a40 	call	20142a4 <__sprint_r>
 201566c:	10003d1e 	bne	r2,zero,2015764 <___vfiprintf_internal_r+0x1244>
 2015670:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2015674:	e0ffba17 	ldw	r3,-280(fp)
 2015678:	e0bfc017 	ldw	r2,-256(fp)
 201567c:	10c0010e 	bge	r2,r3,2015684 <___vfiprintf_internal_r+0x1164>
 2015680:	1805883a 	mov	r2,r3
 2015684:	e0ffb917 	ldw	r3,-284(fp)
 2015688:	1885883a 	add	r2,r3,r2
 201568c:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 2015690:	e0bfca17 	ldw	r2,-216(fp)
 2015694:	10000626 	beq	r2,zero,20156b0 <___vfiprintf_internal_r+0x1190>
 2015698:	e0bfc804 	addi	r2,fp,-224
 201569c:	100d883a 	mov	r6,r2
 20156a0:	e17fe717 	ldw	r5,-100(fp)
 20156a4:	e13fe617 	ldw	r4,-104(fp)
 20156a8:	20142a40 	call	20142a4 <__sprint_r>
 20156ac:	10002f1e 	bne	r2,zero,201576c <___vfiprintf_internal_r+0x124c>
 20156b0:	e03fc915 	stw	zero,-220(fp)
 20156b4:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 20156b8:	e0bfc317 	ldw	r2,-244(fp)
 20156bc:	103bea26 	beq	r2,zero,2014668 <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 20156c0:	e17fc317 	ldw	r5,-244(fp)
 20156c4:	e13fe617 	ldw	r4,-104(fp)
 20156c8:	200f2a80 	call	200f2a8 <_free_r>
			malloc_buf = NULL;
 20156cc:	e03fc315 	stw	zero,-244(fp)
		}
	}
 20156d0:	003be506 	br	2014668 <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 20156d4:	0001883a 	nop
 20156d8:	00000106 	br	20156e0 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 20156dc:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 20156e0:	e0bfca17 	ldw	r2,-216(fp)
 20156e4:	10000626 	beq	r2,zero,2015700 <___vfiprintf_internal_r+0x11e0>
 20156e8:	e0bfc804 	addi	r2,fp,-224
 20156ec:	100d883a 	mov	r6,r2
 20156f0:	e17fe717 	ldw	r5,-100(fp)
 20156f4:	e13fe617 	ldw	r4,-104(fp)
 20156f8:	20142a40 	call	20142a4 <__sprint_r>
 20156fc:	10001d1e 	bne	r2,zero,2015774 <___vfiprintf_internal_r+0x1254>
 2015700:	e03fc915 	stw	zero,-220(fp)
 2015704:	e4bfcb04 	addi	r18,fp,-212
 2015708:	00001b06 	br	2015778 <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 201570c:	0001883a 	nop
 2015710:	00001906 	br	2015778 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 2015714:	0001883a 	nop
 2015718:	00001706 	br	2015778 <___vfiprintf_internal_r+0x1258>
 201571c:	0001883a 	nop
 2015720:	00001506 	br	2015778 <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2015724:	0001883a 	nop
 2015728:	00001306 	br	2015778 <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 201572c:	0001883a 	nop
 2015730:	00001106 	br	2015778 <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2015734:	0001883a 	nop
 2015738:	00000f06 	br	2015778 <___vfiprintf_internal_r+0x1258>
 201573c:	0001883a 	nop
 2015740:	00000d06 	br	2015778 <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2015744:	0001883a 	nop
 2015748:	00000b06 	br	2015778 <___vfiprintf_internal_r+0x1258>
 201574c:	0001883a 	nop
 2015750:	00000906 	br	2015778 <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2015754:	0001883a 	nop
 2015758:	00000706 	br	2015778 <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 201575c:	0001883a 	nop
 2015760:	00000506 	br	2015778 <___vfiprintf_internal_r+0x1258>
 2015764:	0001883a 	nop
 2015768:	00000306 	br	2015778 <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 201576c:	0001883a 	nop
 2015770:	00000106 	br	2015778 <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2015774:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 2015778:	e0bfc317 	ldw	r2,-244(fp)
 201577c:	10000326 	beq	r2,zero,201578c <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 2015780:	e17fc317 	ldw	r5,-244(fp)
 2015784:	e13fe617 	ldw	r4,-104(fp)
 2015788:	200f2a80 	call	200f2a8 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 201578c:	e0bfe717 	ldw	r2,-100(fp)
 2015790:	1080030b 	ldhu	r2,12(r2)
 2015794:	10bfffcc 	andi	r2,r2,65535
 2015798:	1080100c 	andi	r2,r2,64
 201579c:	1000021e 	bne	r2,zero,20157a8 <___vfiprintf_internal_r+0x1288>
 20157a0:	e0bfb917 	ldw	r2,-284(fp)
 20157a4:	00000206 	br	20157b0 <___vfiprintf_internal_r+0x1290>
 20157a8:	00bfffc4 	movi	r2,-1
 20157ac:	0001883a 	nop
	/* NOTREACHED */
}
 20157b0:	e6fff804 	addi	sp,fp,-32
 20157b4:	dfc00917 	ldw	ra,36(sp)
 20157b8:	df000817 	ldw	fp,32(sp)
 20157bc:	ddc00717 	ldw	r23,28(sp)
 20157c0:	dd800617 	ldw	r22,24(sp)
 20157c4:	dd400517 	ldw	r21,20(sp)
 20157c8:	dd000417 	ldw	r20,16(sp)
 20157cc:	dcc00317 	ldw	r19,12(sp)
 20157d0:	dc800217 	ldw	r18,8(sp)
 20157d4:	dc400117 	ldw	r17,4(sp)
 20157d8:	dc000017 	ldw	r16,0(sp)
 20157dc:	dec00a04 	addi	sp,sp,40
 20157e0:	f800283a 	ret

020157e4 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 20157e4:	defff904 	addi	sp,sp,-28
 20157e8:	dfc00615 	stw	ra,24(sp)
 20157ec:	df000515 	stw	fp,20(sp)
 20157f0:	df000504 	addi	fp,sp,20
 20157f4:	e13ffc15 	stw	r4,-16(fp)
 20157f8:	e17ffd15 	stw	r5,-12(fp)
 20157fc:	e1bffe15 	stw	r6,-8(fp)
 2015800:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2015804:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 2015808:	e1bfff17 	ldw	r6,-4(fp)
 201580c:	e17ffe17 	ldw	r5,-8(fp)
 2015810:	e13ffd17 	ldw	r4,-12(fp)
 2015814:	20179300 	call	2017930 <write>
 2015818:	e0bffb15 	stw	r2,-20(fp)
 201581c:	e0bffb17 	ldw	r2,-20(fp)
 2015820:	10bfffd8 	cmpnei	r2,r2,-1
 2015824:	1000051e 	bne	r2,zero,201583c <_write_r+0x58>
 2015828:	d0a79e17 	ldw	r2,-24968(gp)
 201582c:	10000326 	beq	r2,zero,201583c <_write_r+0x58>
    ptr->_errno = errno;
 2015830:	d0e79e17 	ldw	r3,-24968(gp)
 2015834:	e0bffc17 	ldw	r2,-16(fp)
 2015838:	10c00015 	stw	r3,0(r2)
  return ret;
 201583c:	e0bffb17 	ldw	r2,-20(fp)
}
 2015840:	e037883a 	mov	sp,fp
 2015844:	dfc00117 	ldw	ra,4(sp)
 2015848:	df000017 	ldw	fp,0(sp)
 201584c:	dec00204 	addi	sp,sp,8
 2015850:	f800283a 	ret

02015854 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2015854:	defffb04 	addi	sp,sp,-20
 2015858:	dfc00415 	stw	ra,16(sp)
 201585c:	df000315 	stw	fp,12(sp)
 2015860:	df000304 	addi	fp,sp,12
 2015864:	e13ffe15 	stw	r4,-8(fp)
 2015868:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 201586c:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 2015870:	e13fff17 	ldw	r4,-4(fp)
 2015874:	20171280 	call	2017128 <close>
 2015878:	e0bffd15 	stw	r2,-12(fp)
 201587c:	e0bffd17 	ldw	r2,-12(fp)
 2015880:	10bfffd8 	cmpnei	r2,r2,-1
 2015884:	1000051e 	bne	r2,zero,201589c <_close_r+0x48>
 2015888:	d0a79e17 	ldw	r2,-24968(gp)
 201588c:	10000326 	beq	r2,zero,201589c <_close_r+0x48>
    ptr->_errno = errno;
 2015890:	d0e79e17 	ldw	r3,-24968(gp)
 2015894:	e0bffe17 	ldw	r2,-8(fp)
 2015898:	10c00015 	stw	r3,0(r2)
  return ret;
 201589c:	e0bffd17 	ldw	r2,-12(fp)
}
 20158a0:	e037883a 	mov	sp,fp
 20158a4:	dfc00117 	ldw	ra,4(sp)
 20158a8:	df000017 	ldw	fp,0(sp)
 20158ac:	dec00204 	addi	sp,sp,8
 20158b0:	f800283a 	ret

020158b4 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 20158b4:	defff504 	addi	sp,sp,-44
 20158b8:	dfc00a15 	stw	ra,40(sp)
 20158bc:	df000915 	stw	fp,36(sp)
 20158c0:	df000904 	addi	fp,sp,36
 20158c4:	e13ffd15 	stw	r4,-12(fp)
 20158c8:	e17ffe15 	stw	r5,-8(fp)
 20158cc:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 20158d0:	e0fffe17 	ldw	r3,-8(fp)
 20158d4:	e0bfff17 	ldw	r2,-4(fp)
 20158d8:	1885383a 	mul	r2,r3,r2
 20158dc:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 20158e0:	e17ff817 	ldw	r5,-32(fp)
 20158e4:	e13ffd17 	ldw	r4,-12(fp)
 20158e8:	20108e80 	call	20108e8 <_malloc_r>
 20158ec:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 20158f0:	e0bff917 	ldw	r2,-28(fp)
 20158f4:	1000021e 	bne	r2,zero,2015900 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 20158f8:	0005883a 	mov	r2,zero
 20158fc:	00004106 	br	2015a04 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 2015900:	e0bff917 	ldw	r2,-28(fp)
 2015904:	10bffe04 	addi	r2,r2,-8
 2015908:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 201590c:	e0bffa17 	ldw	r2,-24(fp)
 2015910:	10c00117 	ldw	r3,4(r2)
 2015914:	00bfff04 	movi	r2,-4
 2015918:	1884703a 	and	r2,r3,r2
 201591c:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 2015920:	e0bffb17 	ldw	r2,-20(fp)
 2015924:	10bfff04 	addi	r2,r2,-4
 2015928:	e0bffc15 	stw	r2,-16(fp)
 201592c:	e0bffc17 	ldw	r2,-16(fp)
 2015930:	10800968 	cmpgeui	r2,r2,37
 2015934:	10002e1e 	bne	r2,zero,20159f0 <_calloc_r+0x13c>
 2015938:	e0bff917 	ldw	r2,-28(fp)
 201593c:	e0bff715 	stw	r2,-36(fp)
 2015940:	e0bffc17 	ldw	r2,-16(fp)
 2015944:	10800530 	cmpltui	r2,r2,20
 2015948:	10001e1e 	bne	r2,zero,20159c4 <_calloc_r+0x110>
 201594c:	e0bff717 	ldw	r2,-36(fp)
 2015950:	10c00104 	addi	r3,r2,4
 2015954:	e0fff715 	stw	r3,-36(fp)
 2015958:	10000015 	stw	zero,0(r2)
 201595c:	e0bff717 	ldw	r2,-36(fp)
 2015960:	10c00104 	addi	r3,r2,4
 2015964:	e0fff715 	stw	r3,-36(fp)
 2015968:	10000015 	stw	zero,0(r2)
 201596c:	e0bffc17 	ldw	r2,-16(fp)
 2015970:	10800730 	cmpltui	r2,r2,28
 2015974:	1000131e 	bne	r2,zero,20159c4 <_calloc_r+0x110>
 2015978:	e0bff717 	ldw	r2,-36(fp)
 201597c:	10c00104 	addi	r3,r2,4
 2015980:	e0fff715 	stw	r3,-36(fp)
 2015984:	10000015 	stw	zero,0(r2)
 2015988:	e0bff717 	ldw	r2,-36(fp)
 201598c:	10c00104 	addi	r3,r2,4
 2015990:	e0fff715 	stw	r3,-36(fp)
 2015994:	10000015 	stw	zero,0(r2)
 2015998:	e0bffc17 	ldw	r2,-16(fp)
 201599c:	10800930 	cmpltui	r2,r2,36
 20159a0:	1000081e 	bne	r2,zero,20159c4 <_calloc_r+0x110>
 20159a4:	e0bff717 	ldw	r2,-36(fp)
 20159a8:	10c00104 	addi	r3,r2,4
 20159ac:	e0fff715 	stw	r3,-36(fp)
 20159b0:	10000015 	stw	zero,0(r2)
 20159b4:	e0bff717 	ldw	r2,-36(fp)
 20159b8:	10c00104 	addi	r3,r2,4
 20159bc:	e0fff715 	stw	r3,-36(fp)
 20159c0:	10000015 	stw	zero,0(r2)
 20159c4:	e0bff717 	ldw	r2,-36(fp)
 20159c8:	10c00104 	addi	r3,r2,4
 20159cc:	e0fff715 	stw	r3,-36(fp)
 20159d0:	10000015 	stw	zero,0(r2)
 20159d4:	e0bff717 	ldw	r2,-36(fp)
 20159d8:	10c00104 	addi	r3,r2,4
 20159dc:	e0fff715 	stw	r3,-36(fp)
 20159e0:	10000015 	stw	zero,0(r2)
 20159e4:	e0bff717 	ldw	r2,-36(fp)
 20159e8:	10000015 	stw	zero,0(r2)
 20159ec:	00000406 	br	2015a00 <_calloc_r+0x14c>
 20159f0:	e1bffc17 	ldw	r6,-16(fp)
 20159f4:	000b883a 	mov	r5,zero
 20159f8:	e13ff917 	ldw	r4,-28(fp)
 20159fc:	2009e080 	call	2009e08 <memset>
    return mem;
 2015a00:	e0bff917 	ldw	r2,-28(fp)
  }
}
 2015a04:	e037883a 	mov	sp,fp
 2015a08:	dfc00117 	ldw	ra,4(sp)
 2015a0c:	df000017 	ldw	fp,0(sp)
 2015a10:	dec00204 	addi	sp,sp,8
 2015a14:	f800283a 	ret

02015a18 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 2015a18:	defffa04 	addi	sp,sp,-24
 2015a1c:	dfc00515 	stw	ra,20(sp)
 2015a20:	df000415 	stw	fp,16(sp)
 2015a24:	dc000315 	stw	r16,12(sp)
 2015a28:	df000404 	addi	fp,sp,16
 2015a2c:	e13ffe15 	stw	r4,-8(fp)
 2015a30:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 2015a34:	8000021e 	bne	r16,zero,2015a40 <_fclose_r+0x28>
    return (0);			/* on NULL */
 2015a38:	0005883a 	mov	r2,zero
 2015a3c:	00003b06 	br	2015b2c <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 2015a40:	e0bffe17 	ldw	r2,-8(fp)
 2015a44:	e0bffd15 	stw	r2,-12(fp)
 2015a48:	e0bffd17 	ldw	r2,-12(fp)
 2015a4c:	10000526 	beq	r2,zero,2015a64 <_fclose_r+0x4c>
 2015a50:	e0bffd17 	ldw	r2,-12(fp)
 2015a54:	10800e17 	ldw	r2,56(r2)
 2015a58:	1000021e 	bne	r2,zero,2015a64 <_fclose_r+0x4c>
 2015a5c:	e13ffd17 	ldw	r4,-12(fp)
 2015a60:	200f0880 	call	200f088 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 2015a64:	8080030b 	ldhu	r2,12(r16)
 2015a68:	10bfffcc 	andi	r2,r2,65535
 2015a6c:	10a0001c 	xori	r2,r2,32768
 2015a70:	10a00004 	addi	r2,r2,-32768
 2015a74:	1000021e 	bne	r2,zero,2015a80 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 2015a78:	0005883a 	mov	r2,zero
 2015a7c:	00002b06 	br	2015b2c <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 2015a80:	800b883a 	mov	r5,r16
 2015a84:	e13ffe17 	ldw	r4,-8(fp)
 2015a88:	200e9040 	call	200e904 <__sflush_r>
 2015a8c:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 2015a90:	80800b17 	ldw	r2,44(r16)
 2015a94:	10000826 	beq	r2,zero,2015ab8 <_fclose_r+0xa0>
 2015a98:	80800b17 	ldw	r2,44(r16)
 2015a9c:	80c00717 	ldw	r3,28(r16)
 2015aa0:	180b883a 	mov	r5,r3
 2015aa4:	e13ffe17 	ldw	r4,-8(fp)
 2015aa8:	103ee83a 	callr	r2
 2015aac:	1000020e 	bge	r2,zero,2015ab8 <_fclose_r+0xa0>
    r = EOF;
 2015ab0:	00bfffc4 	movi	r2,-1
 2015ab4:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 2015ab8:	8080030b 	ldhu	r2,12(r16)
 2015abc:	10bfffcc 	andi	r2,r2,65535
 2015ac0:	1080200c 	andi	r2,r2,128
 2015ac4:	10000426 	beq	r2,zero,2015ad8 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 2015ac8:	80800417 	ldw	r2,16(r16)
 2015acc:	100b883a 	mov	r5,r2
 2015ad0:	e13ffe17 	ldw	r4,-8(fp)
 2015ad4:	200f2a80 	call	200f2a8 <_free_r>
  if (HASUB (fp))
 2015ad8:	80800c17 	ldw	r2,48(r16)
 2015adc:	10000826 	beq	r2,zero,2015b00 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 2015ae0:	80c00c17 	ldw	r3,48(r16)
 2015ae4:	80801004 	addi	r2,r16,64
 2015ae8:	18800426 	beq	r3,r2,2015afc <_fclose_r+0xe4>
 2015aec:	80800c17 	ldw	r2,48(r16)
 2015af0:	100b883a 	mov	r5,r2
 2015af4:	e13ffe17 	ldw	r4,-8(fp)
 2015af8:	200f2a80 	call	200f2a8 <_free_r>
 2015afc:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 2015b00:	80801117 	ldw	r2,68(r16)
 2015b04:	10000526 	beq	r2,zero,2015b1c <_fclose_r+0x104>
    FREELB (rptr, fp);
 2015b08:	80801117 	ldw	r2,68(r16)
 2015b0c:	100b883a 	mov	r5,r2
 2015b10:	e13ffe17 	ldw	r4,-8(fp)
 2015b14:	200f2a80 	call	200f2a8 <_free_r>
 2015b18:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 2015b1c:	200f1600 	call	200f160 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 2015b20:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 2015b24:	200f1800 	call	200f180 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 2015b28:	e0bffc17 	ldw	r2,-16(fp)
}
 2015b2c:	e6ffff04 	addi	sp,fp,-4
 2015b30:	dfc00217 	ldw	ra,8(sp)
 2015b34:	df000117 	ldw	fp,4(sp)
 2015b38:	dc000017 	ldw	r16,0(sp)
 2015b3c:	dec00304 	addi	sp,sp,12
 2015b40:	f800283a 	ret

02015b44 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 2015b44:	defffe04 	addi	sp,sp,-8
 2015b48:	dfc00115 	stw	ra,4(sp)
 2015b4c:	df000015 	stw	fp,0(sp)
 2015b50:	d839883a 	mov	fp,sp
 2015b54:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 2015b58:	d0a03017 	ldw	r2,-32576(gp)
 2015b5c:	180b883a 	mov	r5,r3
 2015b60:	1009883a 	mov	r4,r2
 2015b64:	2015a180 	call	2015a18 <_fclose_r>
}
 2015b68:	e037883a 	mov	sp,fp
 2015b6c:	dfc00117 	ldw	ra,4(sp)
 2015b70:	df000017 	ldw	fp,0(sp)
 2015b74:	dec00204 	addi	sp,sp,8
 2015b78:	f800283a 	ret

02015b7c <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2015b7c:	defff804 	addi	sp,sp,-32
 2015b80:	dfc00715 	stw	ra,28(sp)
 2015b84:	df000615 	stw	fp,24(sp)
 2015b88:	df000604 	addi	fp,sp,24
 2015b8c:	e13ffd15 	stw	r4,-12(fp)
 2015b90:	e17ffe15 	stw	r5,-8(fp)
 2015b94:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 2015b98:	201020c0 	call	201020c <__locale_mb_cur_max>
 2015b9c:	10800058 	cmpnei	r2,r2,1
 2015ba0:	10000a1e 	bne	r2,zero,2015bcc <__fputwc+0x50>
 2015ba4:	e0bffe17 	ldw	r2,-8(fp)
 2015ba8:	0080080e 	bge	zero,r2,2015bcc <__fputwc+0x50>
 2015bac:	e0bffe17 	ldw	r2,-8(fp)
 2015bb0:	10804008 	cmpgei	r2,r2,256
 2015bb4:	1000051e 	bne	r2,zero,2015bcc <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 2015bb8:	e0bffe17 	ldw	r2,-8(fp)
 2015bbc:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 2015bc0:	00800044 	movi	r2,1
 2015bc4:	e0bffb15 	stw	r2,-20(fp)
 2015bc8:	00001406 	br	2015c1c <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 2015bcc:	e0bfff17 	ldw	r2,-4(fp)
 2015bd0:	10c01704 	addi	r3,r2,92
 2015bd4:	e0bffc04 	addi	r2,fp,-16
 2015bd8:	180f883a 	mov	r7,r3
 2015bdc:	e1bffe17 	ldw	r6,-8(fp)
 2015be0:	100b883a 	mov	r5,r2
 2015be4:	e13ffd17 	ldw	r4,-12(fp)
 2015be8:	20161b00 	call	20161b0 <_wcrtomb_r>
 2015bec:	e0bffb15 	stw	r2,-20(fp)
 2015bf0:	e0bffb17 	ldw	r2,-20(fp)
 2015bf4:	10bfffd8 	cmpnei	r2,r2,-1
 2015bf8:	1000081e 	bne	r2,zero,2015c1c <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 2015bfc:	e0bfff17 	ldw	r2,-4(fp)
 2015c00:	1080030b 	ldhu	r2,12(r2)
 2015c04:	10801014 	ori	r2,r2,64
 2015c08:	1007883a 	mov	r3,r2
 2015c0c:	e0bfff17 	ldw	r2,-4(fp)
 2015c10:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 2015c14:	00bfffc4 	movi	r2,-1
 2015c18:	00005006 	br	2015d5c <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 2015c1c:	e03ffa15 	stw	zero,-24(fp)
 2015c20:	00004a06 	br	2015d4c <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 2015c24:	e0bfff17 	ldw	r2,-4(fp)
 2015c28:	10800217 	ldw	r2,8(r2)
 2015c2c:	10ffffc4 	addi	r3,r2,-1
 2015c30:	e0bfff17 	ldw	r2,-4(fp)
 2015c34:	10c00215 	stw	r3,8(r2)
 2015c38:	e0bfff17 	ldw	r2,-4(fp)
 2015c3c:	10800217 	ldw	r2,8(r2)
 2015c40:	10002c0e 	bge	r2,zero,2015cf4 <__fputwc+0x178>
 2015c44:	e0bfff17 	ldw	r2,-4(fp)
 2015c48:	10c00217 	ldw	r3,8(r2)
 2015c4c:	e0bfff17 	ldw	r2,-4(fp)
 2015c50:	10800617 	ldw	r2,24(r2)
 2015c54:	18801c16 	blt	r3,r2,2015cc8 <__fputwc+0x14c>
 2015c58:	e0bfff17 	ldw	r2,-4(fp)
 2015c5c:	10800017 	ldw	r2,0(r2)
 2015c60:	e13ffc04 	addi	r4,fp,-16
 2015c64:	e0fffa17 	ldw	r3,-24(fp)
 2015c68:	20c7883a 	add	r3,r4,r3
 2015c6c:	18c00003 	ldbu	r3,0(r3)
 2015c70:	10c00005 	stb	r3,0(r2)
 2015c74:	e0bfff17 	ldw	r2,-4(fp)
 2015c78:	10800017 	ldw	r2,0(r2)
 2015c7c:	10800003 	ldbu	r2,0(r2)
 2015c80:	10803fcc 	andi	r2,r2,255
 2015c84:	108002a0 	cmpeqi	r2,r2,10
 2015c88:	1000091e 	bne	r2,zero,2015cb0 <__fputwc+0x134>
 2015c8c:	e0bfff17 	ldw	r2,-4(fp)
 2015c90:	10800017 	ldw	r2,0(r2)
 2015c94:	11000044 	addi	r4,r2,1
 2015c98:	e0ffff17 	ldw	r3,-4(fp)
 2015c9c:	19000015 	stw	r4,0(r3)
 2015ca0:	10800003 	ldbu	r2,0(r2)
 2015ca4:	10803fcc 	andi	r2,r2,255
 2015ca8:	10bfffe0 	cmpeqi	r2,r2,-1
 2015cac:	00002006 	br	2015d30 <__fputwc+0x1b4>
 2015cb0:	e1bfff17 	ldw	r6,-4(fp)
 2015cb4:	01400284 	movi	r5,10
 2015cb8:	e13ffd17 	ldw	r4,-12(fp)
 2015cbc:	20160080 	call	2016008 <__swbuf_r>
 2015cc0:	10bfffe0 	cmpeqi	r2,r2,-1
 2015cc4:	00001a06 	br	2015d30 <__fputwc+0x1b4>
 2015cc8:	e0fffc04 	addi	r3,fp,-16
 2015ccc:	e0bffa17 	ldw	r2,-24(fp)
 2015cd0:	1885883a 	add	r2,r3,r2
 2015cd4:	10800003 	ldbu	r2,0(r2)
 2015cd8:	10803fcc 	andi	r2,r2,255
 2015cdc:	e1bfff17 	ldw	r6,-4(fp)
 2015ce0:	100b883a 	mov	r5,r2
 2015ce4:	e13ffd17 	ldw	r4,-12(fp)
 2015ce8:	20160080 	call	2016008 <__swbuf_r>
 2015cec:	10bfffe0 	cmpeqi	r2,r2,-1
 2015cf0:	00000f06 	br	2015d30 <__fputwc+0x1b4>
 2015cf4:	e0bfff17 	ldw	r2,-4(fp)
 2015cf8:	10800017 	ldw	r2,0(r2)
 2015cfc:	e13ffc04 	addi	r4,fp,-16
 2015d00:	e0fffa17 	ldw	r3,-24(fp)
 2015d04:	20c7883a 	add	r3,r4,r3
 2015d08:	18c00003 	ldbu	r3,0(r3)
 2015d0c:	10c00005 	stb	r3,0(r2)
 2015d10:	e0bfff17 	ldw	r2,-4(fp)
 2015d14:	10800017 	ldw	r2,0(r2)
 2015d18:	11000044 	addi	r4,r2,1
 2015d1c:	e0ffff17 	ldw	r3,-4(fp)
 2015d20:	19000015 	stw	r4,0(r3)
 2015d24:	10800003 	ldbu	r2,0(r2)
 2015d28:	10803fcc 	andi	r2,r2,255
 2015d2c:	10bfffe0 	cmpeqi	r2,r2,-1
 2015d30:	10803fcc 	andi	r2,r2,255
 2015d34:	10000226 	beq	r2,zero,2015d40 <__fputwc+0x1c4>
      return WEOF;
 2015d38:	00bfffc4 	movi	r2,-1
 2015d3c:	00000706 	br	2015d5c <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 2015d40:	e0bffa17 	ldw	r2,-24(fp)
 2015d44:	10800044 	addi	r2,r2,1
 2015d48:	e0bffa15 	stw	r2,-24(fp)
 2015d4c:	e0fffa17 	ldw	r3,-24(fp)
 2015d50:	e0bffb17 	ldw	r2,-20(fp)
 2015d54:	18bfb336 	bltu	r3,r2,2015c24 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 2015d58:	e0bffe17 	ldw	r2,-8(fp)
}
 2015d5c:	e037883a 	mov	sp,fp
 2015d60:	dfc00117 	ldw	ra,4(sp)
 2015d64:	df000017 	ldw	fp,0(sp)
 2015d68:	dec00204 	addi	sp,sp,8
 2015d6c:	f800283a 	ret

02015d70 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2015d70:	defffa04 	addi	sp,sp,-24
 2015d74:	dfc00515 	stw	ra,20(sp)
 2015d78:	df000415 	stw	fp,16(sp)
 2015d7c:	df000404 	addi	fp,sp,16
 2015d80:	e13ffd15 	stw	r4,-12(fp)
 2015d84:	e17ffe15 	stw	r5,-8(fp)
 2015d88:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 2015d8c:	e0bfff17 	ldw	r2,-4(fp)
 2015d90:	1080030b 	ldhu	r2,12(r2)
 2015d94:	10bfffcc 	andi	r2,r2,65535
 2015d98:	1088000c 	andi	r2,r2,8192
 2015d9c:	10000b1e 	bne	r2,zero,2015dcc <_fputwc_r+0x5c>
 2015da0:	e0bfff17 	ldw	r2,-4(fp)
 2015da4:	1080030b 	ldhu	r2,12(r2)
 2015da8:	10880014 	ori	r2,r2,8192
 2015dac:	1007883a 	mov	r3,r2
 2015db0:	e0bfff17 	ldw	r2,-4(fp)
 2015db4:	10c0030d 	sth	r3,12(r2)
 2015db8:	e0bfff17 	ldw	r2,-4(fp)
 2015dbc:	10801917 	ldw	r2,100(r2)
 2015dc0:	10c80014 	ori	r3,r2,8192
 2015dc4:	e0bfff17 	ldw	r2,-4(fp)
 2015dc8:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 2015dcc:	e1bfff17 	ldw	r6,-4(fp)
 2015dd0:	e17ffe17 	ldw	r5,-8(fp)
 2015dd4:	e13ffd17 	ldw	r4,-12(fp)
 2015dd8:	2015b7c0 	call	2015b7c <__fputwc>
 2015ddc:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 2015de0:	e0bffc17 	ldw	r2,-16(fp)
}
 2015de4:	e037883a 	mov	sp,fp
 2015de8:	dfc00117 	ldw	ra,4(sp)
 2015dec:	df000017 	ldw	fp,0(sp)
 2015df0:	dec00204 	addi	sp,sp,8
 2015df4:	f800283a 	ret

02015df8 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 2015df8:	defffa04 	addi	sp,sp,-24
 2015dfc:	dfc00515 	stw	ra,20(sp)
 2015e00:	df000415 	stw	fp,16(sp)
 2015e04:	df000404 	addi	fp,sp,16
 2015e08:	e13ffe15 	stw	r4,-8(fp)
 2015e0c:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 2015e10:	d0a03017 	ldw	r2,-32576(gp)
 2015e14:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 2015e18:	e0bffc17 	ldw	r2,-16(fp)
 2015e1c:	e0bffd15 	stw	r2,-12(fp)
 2015e20:	e0bffd17 	ldw	r2,-12(fp)
 2015e24:	10000526 	beq	r2,zero,2015e3c <fputwc+0x44>
 2015e28:	e0bffd17 	ldw	r2,-12(fp)
 2015e2c:	10800e17 	ldw	r2,56(r2)
 2015e30:	1000021e 	bne	r2,zero,2015e3c <fputwc+0x44>
 2015e34:	e13ffd17 	ldw	r4,-12(fp)
 2015e38:	200f0880 	call	200f088 <__sinit>
  return _fputwc_r (reent, wc, fp);
 2015e3c:	e1bfff17 	ldw	r6,-4(fp)
 2015e40:	e17ffe17 	ldw	r5,-8(fp)
 2015e44:	e13ffc17 	ldw	r4,-16(fp)
 2015e48:	2015d700 	call	2015d70 <_fputwc_r>
}
 2015e4c:	e037883a 	mov	sp,fp
 2015e50:	dfc00117 	ldw	ra,4(sp)
 2015e54:	df000017 	ldw	fp,0(sp)
 2015e58:	dec00204 	addi	sp,sp,8
 2015e5c:	f800283a 	ret

02015e60 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 2015e60:	defffa04 	addi	sp,sp,-24
 2015e64:	dfc00515 	stw	ra,20(sp)
 2015e68:	df000415 	stw	fp,16(sp)
 2015e6c:	df000404 	addi	fp,sp,16
 2015e70:	e13ffd15 	stw	r4,-12(fp)
 2015e74:	e17ffe15 	stw	r5,-8(fp)
 2015e78:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 2015e7c:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 2015e80:	e17fff17 	ldw	r5,-4(fp)
 2015e84:	e13ffe17 	ldw	r4,-8(fp)
 2015e88:	20172600 	call	2017260 <fstat>
 2015e8c:	e0bffc15 	stw	r2,-16(fp)
 2015e90:	e0bffc17 	ldw	r2,-16(fp)
 2015e94:	10bfffd8 	cmpnei	r2,r2,-1
 2015e98:	1000051e 	bne	r2,zero,2015eb0 <_fstat_r+0x50>
 2015e9c:	d0a79e17 	ldw	r2,-24968(gp)
 2015ea0:	10000326 	beq	r2,zero,2015eb0 <_fstat_r+0x50>
    ptr->_errno = errno;
 2015ea4:	d0e79e17 	ldw	r3,-24968(gp)
 2015ea8:	e0bffd17 	ldw	r2,-12(fp)
 2015eac:	10c00015 	stw	r3,0(r2)
  return ret;
 2015eb0:	e0bffc17 	ldw	r2,-16(fp)
}
 2015eb4:	e037883a 	mov	sp,fp
 2015eb8:	dfc00117 	ldw	ra,4(sp)
 2015ebc:	df000017 	ldw	fp,0(sp)
 2015ec0:	dec00204 	addi	sp,sp,8
 2015ec4:	f800283a 	ret

02015ec8 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2015ec8:	defffb04 	addi	sp,sp,-20
 2015ecc:	dfc00415 	stw	ra,16(sp)
 2015ed0:	df000315 	stw	fp,12(sp)
 2015ed4:	df000304 	addi	fp,sp,12
 2015ed8:	e13ffe15 	stw	r4,-8(fp)
 2015edc:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2015ee0:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 2015ee4:	e13fff17 	ldw	r4,-4(fp)
 2015ee8:	201734c0 	call	201734c <isatty>
 2015eec:	e0bffd15 	stw	r2,-12(fp)
 2015ef0:	e0bffd17 	ldw	r2,-12(fp)
 2015ef4:	10bfffd8 	cmpnei	r2,r2,-1
 2015ef8:	1000051e 	bne	r2,zero,2015f10 <_isatty_r+0x48>
 2015efc:	d0a79e17 	ldw	r2,-24968(gp)
 2015f00:	10000326 	beq	r2,zero,2015f10 <_isatty_r+0x48>
    ptr->_errno = errno;
 2015f04:	d0e79e17 	ldw	r3,-24968(gp)
 2015f08:	e0bffe17 	ldw	r2,-8(fp)
 2015f0c:	10c00015 	stw	r3,0(r2)
  return ret;
 2015f10:	e0bffd17 	ldw	r2,-12(fp)
}
 2015f14:	e037883a 	mov	sp,fp
 2015f18:	dfc00117 	ldw	ra,4(sp)
 2015f1c:	df000017 	ldw	fp,0(sp)
 2015f20:	dec00204 	addi	sp,sp,8
 2015f24:	f800283a 	ret

02015f28 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 2015f28:	defff904 	addi	sp,sp,-28
 2015f2c:	dfc00615 	stw	ra,24(sp)
 2015f30:	df000515 	stw	fp,20(sp)
 2015f34:	df000504 	addi	fp,sp,20
 2015f38:	e13ffc15 	stw	r4,-16(fp)
 2015f3c:	e17ffd15 	stw	r5,-12(fp)
 2015f40:	e1bffe15 	stw	r6,-8(fp)
 2015f44:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 2015f48:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 2015f4c:	e1bfff17 	ldw	r6,-4(fp)
 2015f50:	e17ffe17 	ldw	r5,-8(fp)
 2015f54:	e13ffd17 	ldw	r4,-12(fp)
 2015f58:	20175180 	call	2017518 <lseek>
 2015f5c:	e0bffb15 	stw	r2,-20(fp)
 2015f60:	e0bffb17 	ldw	r2,-20(fp)
 2015f64:	10bfffd8 	cmpnei	r2,r2,-1
 2015f68:	1000051e 	bne	r2,zero,2015f80 <_lseek_r+0x58>
 2015f6c:	d0a79e17 	ldw	r2,-24968(gp)
 2015f70:	10000326 	beq	r2,zero,2015f80 <_lseek_r+0x58>
    ptr->_errno = errno;
 2015f74:	d0e79e17 	ldw	r3,-24968(gp)
 2015f78:	e0bffc17 	ldw	r2,-16(fp)
 2015f7c:	10c00015 	stw	r3,0(r2)
  return ret;
 2015f80:	e0bffb17 	ldw	r2,-20(fp)
}
 2015f84:	e037883a 	mov	sp,fp
 2015f88:	dfc00117 	ldw	ra,4(sp)
 2015f8c:	df000017 	ldw	fp,0(sp)
 2015f90:	dec00204 	addi	sp,sp,8
 2015f94:	f800283a 	ret

02015f98 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 2015f98:	defff904 	addi	sp,sp,-28
 2015f9c:	dfc00615 	stw	ra,24(sp)
 2015fa0:	df000515 	stw	fp,20(sp)
 2015fa4:	df000504 	addi	fp,sp,20
 2015fa8:	e13ffc15 	stw	r4,-16(fp)
 2015fac:	e17ffd15 	stw	r5,-12(fp)
 2015fb0:	e1bffe15 	stw	r6,-8(fp)
 2015fb4:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2015fb8:	d0279e15 	stw	zero,-24968(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 2015fbc:	e1bfff17 	ldw	r6,-4(fp)
 2015fc0:	e17ffe17 	ldw	r5,-8(fp)
 2015fc4:	e13ffd17 	ldw	r4,-12(fp)
 2015fc8:	20176e40 	call	20176e4 <read>
 2015fcc:	e0bffb15 	stw	r2,-20(fp)
 2015fd0:	e0bffb17 	ldw	r2,-20(fp)
 2015fd4:	10bfffd8 	cmpnei	r2,r2,-1
 2015fd8:	1000051e 	bne	r2,zero,2015ff0 <_read_r+0x58>
 2015fdc:	d0a79e17 	ldw	r2,-24968(gp)
 2015fe0:	10000326 	beq	r2,zero,2015ff0 <_read_r+0x58>
    ptr->_errno = errno;
 2015fe4:	d0e79e17 	ldw	r3,-24968(gp)
 2015fe8:	e0bffc17 	ldw	r2,-16(fp)
 2015fec:	10c00015 	stw	r3,0(r2)
  return ret;
 2015ff0:	e0bffb17 	ldw	r2,-20(fp)
}
 2015ff4:	e037883a 	mov	sp,fp
 2015ff8:	dfc00117 	ldw	ra,4(sp)
 2015ffc:	df000017 	ldw	fp,0(sp)
 2016000:	dec00204 	addi	sp,sp,8
 2016004:	f800283a 	ret

02016008 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 2016008:	defff904 	addi	sp,sp,-28
 201600c:	dfc00615 	stw	ra,24(sp)
 2016010:	df000515 	stw	fp,20(sp)
 2016014:	dc800415 	stw	r18,16(sp)
 2016018:	dc400315 	stw	r17,12(sp)
 201601c:	dc000215 	stw	r16,8(sp)
 2016020:	df000504 	addi	fp,sp,20
 2016024:	e13ffc15 	stw	r4,-16(fp)
 2016028:	2825883a 	mov	r18,r5
 201602c:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 2016030:	e0bffc17 	ldw	r2,-16(fp)
 2016034:	e0bffb15 	stw	r2,-20(fp)
 2016038:	e0bffb17 	ldw	r2,-20(fp)
 201603c:	10000526 	beq	r2,zero,2016054 <__swbuf_r+0x4c>
 2016040:	e0bffb17 	ldw	r2,-20(fp)
 2016044:	10800e17 	ldw	r2,56(r2)
 2016048:	1000021e 	bne	r2,zero,2016054 <__swbuf_r+0x4c>
 201604c:	e13ffb17 	ldw	r4,-20(fp)
 2016050:	200f0880 	call	200f088 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 2016054:	80800617 	ldw	r2,24(r16)
 2016058:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 201605c:	8080030b 	ldhu	r2,12(r16)
 2016060:	10bfffcc 	andi	r2,r2,65535
 2016064:	1080020c 	andi	r2,r2,8
 2016068:	10000226 	beq	r2,zero,2016074 <__swbuf_r+0x6c>
 201606c:	80800417 	ldw	r2,16(r16)
 2016070:	1000061e 	bne	r2,zero,201608c <__swbuf_r+0x84>
 2016074:	800b883a 	mov	r5,r16
 2016078:	e13ffc17 	ldw	r4,-16(fp)
 201607c:	200c8380 	call	200c838 <__swsetup_r>
 2016080:	10000226 	beq	r2,zero,201608c <__swbuf_r+0x84>
    return EOF;
 2016084:	00bfffc4 	movi	r2,-1
 2016088:	00003106 	br	2016150 <__swbuf_r+0x148>
  c = (unsigned char) c;
 201608c:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 2016090:	8080030b 	ldhu	r2,12(r16)
 2016094:	10bfffcc 	andi	r2,r2,65535
 2016098:	1088000c 	andi	r2,r2,8192
 201609c:	1000071e 	bne	r2,zero,20160bc <__swbuf_r+0xb4>
 20160a0:	8080030b 	ldhu	r2,12(r16)
 20160a4:	10880014 	ori	r2,r2,8192
 20160a8:	8080030d 	sth	r2,12(r16)
 20160ac:	80c01917 	ldw	r3,100(r16)
 20160b0:	00b7ffc4 	movi	r2,-8193
 20160b4:	1884703a 	and	r2,r3,r2
 20160b8:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 20160bc:	80800017 	ldw	r2,0(r16)
 20160c0:	1007883a 	mov	r3,r2
 20160c4:	80800417 	ldw	r2,16(r16)
 20160c8:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 20160cc:	80800517 	ldw	r2,20(r16)
 20160d0:	88800716 	blt	r17,r2,20160f0 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 20160d4:	800b883a 	mov	r5,r16
 20160d8:	e13ffc17 	ldw	r4,-16(fp)
 20160dc:	200ec080 	call	200ec08 <_fflush_r>
 20160e0:	10000226 	beq	r2,zero,20160ec <__swbuf_r+0xe4>
	return EOF;
 20160e4:	00bfffc4 	movi	r2,-1
 20160e8:	00001906 	br	2016150 <__swbuf_r+0x148>
      n = 0;
 20160ec:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 20160f0:	80800217 	ldw	r2,8(r16)
 20160f4:	10bfffc4 	addi	r2,r2,-1
 20160f8:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 20160fc:	80800017 	ldw	r2,0(r16)
 2016100:	10c00044 	addi	r3,r2,1
 2016104:	80c00015 	stw	r3,0(r16)
 2016108:	9007883a 	mov	r3,r18
 201610c:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 2016110:	8c400044 	addi	r17,r17,1
 2016114:	80800517 	ldw	r2,20(r16)
 2016118:	88800626 	beq	r17,r2,2016134 <__swbuf_r+0x12c>
 201611c:	8080030b 	ldhu	r2,12(r16)
 2016120:	10bfffcc 	andi	r2,r2,65535
 2016124:	1080004c 	andi	r2,r2,1
 2016128:	10000826 	beq	r2,zero,201614c <__swbuf_r+0x144>
 201612c:	90800298 	cmpnei	r2,r18,10
 2016130:	1000061e 	bne	r2,zero,201614c <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 2016134:	800b883a 	mov	r5,r16
 2016138:	e13ffc17 	ldw	r4,-16(fp)
 201613c:	200ec080 	call	200ec08 <_fflush_r>
 2016140:	10000226 	beq	r2,zero,201614c <__swbuf_r+0x144>
      return EOF;
 2016144:	00bfffc4 	movi	r2,-1
 2016148:	00000106 	br	2016150 <__swbuf_r+0x148>
  return c;
 201614c:	9005883a 	mov	r2,r18
}
 2016150:	e6fffd04 	addi	sp,fp,-12
 2016154:	dfc00417 	ldw	ra,16(sp)
 2016158:	df000317 	ldw	fp,12(sp)
 201615c:	dc800217 	ldw	r18,8(sp)
 2016160:	dc400117 	ldw	r17,4(sp)
 2016164:	dc000017 	ldw	r16,0(sp)
 2016168:	dec00504 	addi	sp,sp,20
 201616c:	f800283a 	ret

02016170 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 2016170:	defffe04 	addi	sp,sp,-8
 2016174:	dfc00115 	stw	ra,4(sp)
 2016178:	df000015 	stw	fp,0(sp)
 201617c:	d839883a 	mov	fp,sp
 2016180:	2007883a 	mov	r3,r4
 2016184:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 2016188:	d0a03017 	ldw	r2,-32576(gp)
 201618c:	200d883a 	mov	r6,r4
 2016190:	180b883a 	mov	r5,r3
 2016194:	1009883a 	mov	r4,r2
 2016198:	20160080 	call	2016008 <__swbuf_r>
}
 201619c:	e037883a 	mov	sp,fp
 20161a0:	dfc00117 	ldw	ra,4(sp)
 20161a4:	df000017 	ldw	fp,0(sp)
 20161a8:	dec00204 	addi	sp,sp,8
 20161ac:	f800283a 	ret

020161b0 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 20161b0:	defff404 	addi	sp,sp,-48
 20161b4:	dfc00b15 	stw	ra,44(sp)
 20161b8:	df000a15 	stw	fp,40(sp)
 20161bc:	dc000915 	stw	r16,36(sp)
 20161c0:	df000a04 	addi	fp,sp,40
 20161c4:	e13ffb15 	stw	r4,-20(fp)
 20161c8:	e17ffc15 	stw	r5,-16(fp)
 20161cc:	e1bffd15 	stw	r6,-12(fp)
 20161d0:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 20161d4:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 20161d8:	e0bffc17 	ldw	r2,-16(fp)
 20161dc:	10000d1e 	bne	r2,zero,2016214 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 20161e0:	d4203517 	ldw	r16,-32556(gp)
 20161e4:	20101e80 	call	20101e8 <__locale_charset>
 20161e8:	1009883a 	mov	r4,r2
 20161ec:	e0fff804 	addi	r3,fp,-32
 20161f0:	e0bffe17 	ldw	r2,-8(fp)
 20161f4:	d8800015 	stw	r2,0(sp)
 20161f8:	200f883a 	mov	r7,r4
 20161fc:	000d883a 	mov	r6,zero
 2016200:	180b883a 	mov	r5,r3
 2016204:	e13ffb17 	ldw	r4,-20(fp)
 2016208:	803ee83a 	callr	r16
 201620c:	e0bff715 	stw	r2,-36(fp)
 2016210:	00000b06 	br	2016240 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 2016214:	d4203517 	ldw	r16,-32556(gp)
 2016218:	20101e80 	call	20101e8 <__locale_charset>
 201621c:	1007883a 	mov	r3,r2
 2016220:	e0bffe17 	ldw	r2,-8(fp)
 2016224:	d8800015 	stw	r2,0(sp)
 2016228:	180f883a 	mov	r7,r3
 201622c:	e1bffd17 	ldw	r6,-12(fp)
 2016230:	e17ffc17 	ldw	r5,-16(fp)
 2016234:	e13ffb17 	ldw	r4,-20(fp)
 2016238:	803ee83a 	callr	r16
 201623c:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2016240:	e0bff717 	ldw	r2,-36(fp)
 2016244:	10bfffd8 	cmpnei	r2,r2,-1
 2016248:	1000071e 	bne	r2,zero,2016268 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 201624c:	e0bffe17 	ldw	r2,-8(fp)
 2016250:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 2016254:	e0bffb17 	ldw	r2,-20(fp)
 2016258:	00c02284 	movi	r3,138
 201625c:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2016260:	00bfffc4 	movi	r2,-1
 2016264:	00000106 	br	201626c <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 2016268:	e0bff717 	ldw	r2,-36(fp)
}
 201626c:	e6ffff04 	addi	sp,fp,-4
 2016270:	dfc00217 	ldw	ra,8(sp)
 2016274:	df000117 	ldw	fp,4(sp)
 2016278:	dc000017 	ldw	r16,0(sp)
 201627c:	dec00304 	addi	sp,sp,12
 2016280:	f800283a 	ret

02016284 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 2016284:	defff404 	addi	sp,sp,-48
 2016288:	dfc00b15 	stw	ra,44(sp)
 201628c:	df000a15 	stw	fp,40(sp)
 2016290:	dc000915 	stw	r16,36(sp)
 2016294:	df000a04 	addi	fp,sp,40
 2016298:	e13ffc15 	stw	r4,-16(fp)
 201629c:	e17ffd15 	stw	r5,-12(fp)
 20162a0:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 20162a4:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 20162a8:	d0a03017 	ldw	r2,-32576(gp)
 20162ac:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 20162b0:	e0bffc17 	ldw	r2,-16(fp)
 20162b4:	10000d1e 	bne	r2,zero,20162ec <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 20162b8:	d4203517 	ldw	r16,-32556(gp)
 20162bc:	20101e80 	call	20101e8 <__locale_charset>
 20162c0:	1009883a 	mov	r4,r2
 20162c4:	e0fff904 	addi	r3,fp,-28
 20162c8:	e0bffe17 	ldw	r2,-8(fp)
 20162cc:	d8800015 	stw	r2,0(sp)
 20162d0:	200f883a 	mov	r7,r4
 20162d4:	000d883a 	mov	r6,zero
 20162d8:	180b883a 	mov	r5,r3
 20162dc:	e13ff817 	ldw	r4,-32(fp)
 20162e0:	803ee83a 	callr	r16
 20162e4:	e0bff715 	stw	r2,-36(fp)
 20162e8:	00000b06 	br	2016318 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 20162ec:	d4203517 	ldw	r16,-32556(gp)
 20162f0:	20101e80 	call	20101e8 <__locale_charset>
 20162f4:	1007883a 	mov	r3,r2
 20162f8:	e0bffe17 	ldw	r2,-8(fp)
 20162fc:	d8800015 	stw	r2,0(sp)
 2016300:	180f883a 	mov	r7,r3
 2016304:	e1bffd17 	ldw	r6,-12(fp)
 2016308:	e17ffc17 	ldw	r5,-16(fp)
 201630c:	e13ff817 	ldw	r4,-32(fp)
 2016310:	803ee83a 	callr	r16
 2016314:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2016318:	e0bff717 	ldw	r2,-36(fp)
 201631c:	10bfffd8 	cmpnei	r2,r2,-1
 2016320:	1000071e 	bne	r2,zero,2016340 <wcrtomb+0xbc>
    {
      ps->__count = 0;
 2016324:	e0bffe17 	ldw	r2,-8(fp)
 2016328:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 201632c:	e0bff817 	ldw	r2,-32(fp)
 2016330:	00c02284 	movi	r3,138
 2016334:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 2016338:	00bfffc4 	movi	r2,-1
 201633c:	00000106 	br	2016344 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 2016340:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2016344:	e6ffff04 	addi	sp,fp,-4
 2016348:	dfc00217 	ldw	ra,8(sp)
 201634c:	df000117 	ldw	fp,4(sp)
 2016350:	dc000017 	ldw	r16,0(sp)
 2016354:	dec00304 	addi	sp,sp,12
 2016358:	f800283a 	ret

0201635c <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 201635c:	defff804 	addi	sp,sp,-32
 2016360:	dfc00715 	stw	ra,28(sp)
 2016364:	df000615 	stw	fp,24(sp)
 2016368:	dc000515 	stw	r16,20(sp)
 201636c:	df000604 	addi	fp,sp,24
 2016370:	e13ffb15 	stw	r4,-20(fp)
 2016374:	e17ffc15 	stw	r5,-16(fp)
 2016378:	e1bffd15 	stw	r6,-12(fp)
 201637c:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 2016380:	d4203517 	ldw	r16,-32556(gp)
 2016384:	20101e80 	call	20101e8 <__locale_charset>
 2016388:	1007883a 	mov	r3,r2
 201638c:	e0bffe17 	ldw	r2,-8(fp)
 2016390:	d8800015 	stw	r2,0(sp)
 2016394:	180f883a 	mov	r7,r3
 2016398:	e1bffd17 	ldw	r6,-12(fp)
 201639c:	e17ffc17 	ldw	r5,-16(fp)
 20163a0:	e13ffb17 	ldw	r4,-20(fp)
 20163a4:	803ee83a 	callr	r16
}
 20163a8:	e6ffff04 	addi	sp,fp,-4
 20163ac:	dfc00217 	ldw	ra,8(sp)
 20163b0:	df000117 	ldw	fp,4(sp)
 20163b4:	dc000017 	ldw	r16,0(sp)
 20163b8:	dec00304 	addi	sp,sp,12
 20163bc:	f800283a 	ret

020163c0 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 20163c0:	defffa04 	addi	sp,sp,-24
 20163c4:	df000515 	stw	fp,20(sp)
 20163c8:	df000504 	addi	fp,sp,20
 20163cc:	e13ffc15 	stw	r4,-16(fp)
 20163d0:	e17ffd15 	stw	r5,-12(fp)
 20163d4:	e1bffe15 	stw	r6,-8(fp)
 20163d8:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 20163dc:	e0bffe17 	ldw	r2,-8(fp)
 20163e0:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 20163e4:	e0bffd17 	ldw	r2,-12(fp)
 20163e8:	1000021e 	bne	r2,zero,20163f4 <__ascii_wctomb+0x34>
    return 0;
 20163ec:	0005883a 	mov	r2,zero
 20163f0:	00000d06 	br	2016428 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 20163f4:	e0bffb17 	ldw	r2,-20(fp)
 20163f8:	10804030 	cmpltui	r2,r2,256
 20163fc:	1000051e 	bne	r2,zero,2016414 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 2016400:	e0bffc17 	ldw	r2,-16(fp)
 2016404:	00c02284 	movi	r3,138
 2016408:	10c00015 	stw	r3,0(r2)
      return -1;
 201640c:	00bfffc4 	movi	r2,-1
 2016410:	00000506 	br	2016428 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 2016414:	e0bffb17 	ldw	r2,-20(fp)
 2016418:	1007883a 	mov	r3,r2
 201641c:	e0bffd17 	ldw	r2,-12(fp)
 2016420:	10c00005 	stb	r3,0(r2)
  return 1;
 2016424:	00800044 	movi	r2,1
}
 2016428:	e037883a 	mov	sp,fp
 201642c:	df000017 	ldw	fp,0(sp)
 2016430:	dec00104 	addi	sp,sp,4
 2016434:	f800283a 	ret

02016438 <__udivdi3>:
 2016438:	defff504 	addi	sp,sp,-44
 201643c:	dcc00415 	stw	r19,16(sp)
 2016440:	dc000115 	stw	r16,4(sp)
 2016444:	dfc00a15 	stw	ra,40(sp)
 2016448:	df000915 	stw	fp,36(sp)
 201644c:	ddc00815 	stw	r23,32(sp)
 2016450:	dd800715 	stw	r22,28(sp)
 2016454:	dd400615 	stw	r21,24(sp)
 2016458:	dd000515 	stw	r20,20(sp)
 201645c:	dc800315 	stw	r18,12(sp)
 2016460:	dc400215 	stw	r17,8(sp)
 2016464:	2027883a 	mov	r19,r4
 2016468:	2821883a 	mov	r16,r5
 201646c:	3800411e 	bne	r7,zero,2016574 <__udivdi3+0x13c>
 2016470:	3023883a 	mov	r17,r6
 2016474:	2025883a 	mov	r18,r4
 2016478:	2980522e 	bgeu	r5,r6,20165c4 <__udivdi3+0x18c>
 201647c:	00bfffd4 	movui	r2,65535
 2016480:	282d883a 	mov	r22,r5
 2016484:	1180a836 	bltu	r2,r6,2016728 <__udivdi3+0x2f0>
 2016488:	00803fc4 	movi	r2,255
 201648c:	1185803a 	cmpltu	r2,r2,r6
 2016490:	100490fa 	slli	r2,r2,3
 2016494:	3086d83a 	srl	r3,r6,r2
 2016498:	010080b4 	movhi	r4,514
 201649c:	210c0904 	addi	r4,r4,12324
 20164a0:	20c7883a 	add	r3,r4,r3
 20164a4:	18c00003 	ldbu	r3,0(r3)
 20164a8:	1885883a 	add	r2,r3,r2
 20164ac:	00c00804 	movi	r3,32
 20164b0:	1887c83a 	sub	r3,r3,r2
 20164b4:	18000526 	beq	r3,zero,20164cc <__udivdi3+0x94>
 20164b8:	80e0983a 	sll	r16,r16,r3
 20164bc:	9884d83a 	srl	r2,r19,r2
 20164c0:	30e2983a 	sll	r17,r6,r3
 20164c4:	98e4983a 	sll	r18,r19,r3
 20164c8:	142cb03a 	or	r22,r2,r16
 20164cc:	882ad43a 	srli	r21,r17,16
 20164d0:	b009883a 	mov	r4,r22
 20164d4:	8d3fffcc 	andi	r20,r17,65535
 20164d8:	a80b883a 	mov	r5,r21
 20164dc:	20074ec0 	call	20074ec <__umodsi3>
 20164e0:	b009883a 	mov	r4,r22
 20164e4:	a80b883a 	mov	r5,r21
 20164e8:	1027883a 	mov	r19,r2
 20164ec:	20074880 	call	2007488 <__udivsi3>
 20164f0:	102d883a 	mov	r22,r2
 20164f4:	9826943a 	slli	r19,r19,16
 20164f8:	9004d43a 	srli	r2,r18,16
 20164fc:	a5a1383a 	mul	r16,r20,r22
 2016500:	14c4b03a 	or	r2,r2,r19
 2016504:	1400052e 	bgeu	r2,r16,201651c <__udivdi3+0xe4>
 2016508:	1445883a 	add	r2,r2,r17
 201650c:	b0ffffc4 	addi	r3,r22,-1
 2016510:	14400136 	bltu	r2,r17,2016518 <__udivdi3+0xe0>
 2016514:	14012336 	bltu	r2,r16,20169a4 <__udivdi3+0x56c>
 2016518:	182d883a 	mov	r22,r3
 201651c:	1421c83a 	sub	r16,r2,r16
 2016520:	a80b883a 	mov	r5,r21
 2016524:	8009883a 	mov	r4,r16
 2016528:	20074ec0 	call	20074ec <__umodsi3>
 201652c:	1027883a 	mov	r19,r2
 2016530:	a80b883a 	mov	r5,r21
 2016534:	8009883a 	mov	r4,r16
 2016538:	20074880 	call	2007488 <__udivsi3>
 201653c:	9826943a 	slli	r19,r19,16
 2016540:	a0a9383a 	mul	r20,r20,r2
 2016544:	94bfffcc 	andi	r18,r18,65535
 2016548:	94e4b03a 	or	r18,r18,r19
 201654c:	9500052e 	bgeu	r18,r20,2016564 <__udivdi3+0x12c>
 2016550:	8ca5883a 	add	r18,r17,r18
 2016554:	10ffffc4 	addi	r3,r2,-1
 2016558:	9440f136 	bltu	r18,r17,2016920 <__udivdi3+0x4e8>
 201655c:	9500f02e 	bgeu	r18,r20,2016920 <__udivdi3+0x4e8>
 2016560:	10bfff84 	addi	r2,r2,-2
 2016564:	b00c943a 	slli	r6,r22,16
 2016568:	0007883a 	mov	r3,zero
 201656c:	3084b03a 	or	r2,r6,r2
 2016570:	00005906 	br	20166d8 <__udivdi3+0x2a0>
 2016574:	29c05636 	bltu	r5,r7,20166d0 <__udivdi3+0x298>
 2016578:	00bfffd4 	movui	r2,65535
 201657c:	11c0622e 	bgeu	r2,r7,2016708 <__udivdi3+0x2d0>
 2016580:	00804034 	movhi	r2,256
 2016584:	10bfffc4 	addi	r2,r2,-1
 2016588:	11c0ee36 	bltu	r2,r7,2016944 <__udivdi3+0x50c>
 201658c:	00800404 	movi	r2,16
 2016590:	3886d83a 	srl	r3,r7,r2
 2016594:	010080b4 	movhi	r4,514
 2016598:	210c0904 	addi	r4,r4,12324
 201659c:	20c7883a 	add	r3,r4,r3
 20165a0:	18c00003 	ldbu	r3,0(r3)
 20165a4:	05400804 	movi	r21,32
 20165a8:	1885883a 	add	r2,r3,r2
 20165ac:	a8abc83a 	sub	r21,r21,r2
 20165b0:	a800621e 	bne	r21,zero,201673c <__udivdi3+0x304>
 20165b4:	3c00e936 	bltu	r7,r16,201695c <__udivdi3+0x524>
 20165b8:	9985403a 	cmpgeu	r2,r19,r6
 20165bc:	0007883a 	mov	r3,zero
 20165c0:	00004506 	br	20166d8 <__udivdi3+0x2a0>
 20165c4:	3000041e 	bne	r6,zero,20165d8 <__udivdi3+0x1a0>
 20165c8:	000b883a 	mov	r5,zero
 20165cc:	01000044 	movi	r4,1
 20165d0:	20074880 	call	2007488 <__udivsi3>
 20165d4:	1023883a 	mov	r17,r2
 20165d8:	00bfffd4 	movui	r2,65535
 20165dc:	14404e2e 	bgeu	r2,r17,2016718 <__udivdi3+0x2e0>
 20165e0:	00804034 	movhi	r2,256
 20165e4:	10bfffc4 	addi	r2,r2,-1
 20165e8:	1440d836 	bltu	r2,r17,201694c <__udivdi3+0x514>
 20165ec:	00800404 	movi	r2,16
 20165f0:	8886d83a 	srl	r3,r17,r2
 20165f4:	010080b4 	movhi	r4,514
 20165f8:	210c0904 	addi	r4,r4,12324
 20165fc:	20c7883a 	add	r3,r4,r3
 2016600:	18c00003 	ldbu	r3,0(r3)
 2016604:	1885883a 	add	r2,r3,r2
 2016608:	00c00804 	movi	r3,32
 201660c:	1887c83a 	sub	r3,r3,r2
 2016610:	18008f1e 	bne	r3,zero,2016850 <__udivdi3+0x418>
 2016614:	882ad43a 	srli	r21,r17,16
 2016618:	8461c83a 	sub	r16,r16,r17
 201661c:	8d3fffcc 	andi	r20,r17,65535
 2016620:	00c00044 	movi	r3,1
 2016624:	8009883a 	mov	r4,r16
 2016628:	a80b883a 	mov	r5,r21
 201662c:	d8c00015 	stw	r3,0(sp)
 2016630:	20074ec0 	call	20074ec <__umodsi3>
 2016634:	8009883a 	mov	r4,r16
 2016638:	a80b883a 	mov	r5,r21
 201663c:	1027883a 	mov	r19,r2
 2016640:	20074880 	call	2007488 <__udivsi3>
 2016644:	9826943a 	slli	r19,r19,16
 2016648:	9008d43a 	srli	r4,r18,16
 201664c:	1521383a 	mul	r16,r2,r20
 2016650:	102d883a 	mov	r22,r2
 2016654:	24c8b03a 	or	r4,r4,r19
 2016658:	d8c00017 	ldw	r3,0(sp)
 201665c:	2400052e 	bgeu	r4,r16,2016674 <__udivdi3+0x23c>
 2016660:	2449883a 	add	r4,r4,r17
 2016664:	b0bfffc4 	addi	r2,r22,-1
 2016668:	24400136 	bltu	r4,r17,2016670 <__udivdi3+0x238>
 201666c:	2400ca36 	bltu	r4,r16,2016998 <__udivdi3+0x560>
 2016670:	102d883a 	mov	r22,r2
 2016674:	2421c83a 	sub	r16,r4,r16
 2016678:	a80b883a 	mov	r5,r21
 201667c:	8009883a 	mov	r4,r16
 2016680:	d8c00015 	stw	r3,0(sp)
 2016684:	20074ec0 	call	20074ec <__umodsi3>
 2016688:	1027883a 	mov	r19,r2
 201668c:	a80b883a 	mov	r5,r21
 2016690:	8009883a 	mov	r4,r16
 2016694:	20074880 	call	2007488 <__udivsi3>
 2016698:	9826943a 	slli	r19,r19,16
 201669c:	1529383a 	mul	r20,r2,r20
 20166a0:	94bfffcc 	andi	r18,r18,65535
 20166a4:	94e4b03a 	or	r18,r18,r19
 20166a8:	d8c00017 	ldw	r3,0(sp)
 20166ac:	9500052e 	bgeu	r18,r20,20166c4 <__udivdi3+0x28c>
 20166b0:	8ca5883a 	add	r18,r17,r18
 20166b4:	113fffc4 	addi	r4,r2,-1
 20166b8:	94409736 	bltu	r18,r17,2016918 <__udivdi3+0x4e0>
 20166bc:	9500962e 	bgeu	r18,r20,2016918 <__udivdi3+0x4e0>
 20166c0:	10bfff84 	addi	r2,r2,-2
 20166c4:	b00c943a 	slli	r6,r22,16
 20166c8:	3084b03a 	or	r2,r6,r2
 20166cc:	00000206 	br	20166d8 <__udivdi3+0x2a0>
 20166d0:	0007883a 	mov	r3,zero
 20166d4:	0005883a 	mov	r2,zero
 20166d8:	dfc00a17 	ldw	ra,40(sp)
 20166dc:	df000917 	ldw	fp,36(sp)
 20166e0:	ddc00817 	ldw	r23,32(sp)
 20166e4:	dd800717 	ldw	r22,28(sp)
 20166e8:	dd400617 	ldw	r21,24(sp)
 20166ec:	dd000517 	ldw	r20,20(sp)
 20166f0:	dcc00417 	ldw	r19,16(sp)
 20166f4:	dc800317 	ldw	r18,12(sp)
 20166f8:	dc400217 	ldw	r17,8(sp)
 20166fc:	dc000117 	ldw	r16,4(sp)
 2016700:	dec00b04 	addi	sp,sp,44
 2016704:	f800283a 	ret
 2016708:	00803fc4 	movi	r2,255
 201670c:	11c5803a 	cmpltu	r2,r2,r7
 2016710:	100490fa 	slli	r2,r2,3
 2016714:	003f9e06 	br	2016590 <__udivdi3+0x158>
 2016718:	00803fc4 	movi	r2,255
 201671c:	1445803a 	cmpltu	r2,r2,r17
 2016720:	100490fa 	slli	r2,r2,3
 2016724:	003fb206 	br	20165f0 <__udivdi3+0x1b8>
 2016728:	00804034 	movhi	r2,256
 201672c:	10bfffc4 	addi	r2,r2,-1
 2016730:	11808836 	bltu	r2,r6,2016954 <__udivdi3+0x51c>
 2016734:	00800404 	movi	r2,16
 2016738:	003f5606 	br	2016494 <__udivdi3+0x5c>
 201673c:	30aed83a 	srl	r23,r6,r2
 2016740:	3d4e983a 	sll	r7,r7,r21
 2016744:	80acd83a 	srl	r22,r16,r2
 2016748:	9884d83a 	srl	r2,r19,r2
 201674c:	3deeb03a 	or	r23,r7,r23
 2016750:	b824d43a 	srli	r18,r23,16
 2016754:	8560983a 	sll	r16,r16,r21
 2016758:	b009883a 	mov	r4,r22
 201675c:	900b883a 	mov	r5,r18
 2016760:	3568983a 	sll	r20,r6,r21
 2016764:	1420b03a 	or	r16,r2,r16
 2016768:	20074ec0 	call	20074ec <__umodsi3>
 201676c:	b009883a 	mov	r4,r22
 2016770:	900b883a 	mov	r5,r18
 2016774:	1023883a 	mov	r17,r2
 2016778:	20074880 	call	2007488 <__udivsi3>
 201677c:	8808943a 	slli	r4,r17,16
 2016780:	bf3fffcc 	andi	fp,r23,65535
 2016784:	8006d43a 	srli	r3,r16,16
 2016788:	e0a3383a 	mul	r17,fp,r2
 201678c:	100d883a 	mov	r6,r2
 2016790:	1906b03a 	or	r3,r3,r4
 2016794:	1c40042e 	bgeu	r3,r17,20167a8 <__udivdi3+0x370>
 2016798:	1dc7883a 	add	r3,r3,r23
 201679c:	10bfffc4 	addi	r2,r2,-1
 20167a0:	1dc0752e 	bgeu	r3,r23,2016978 <__udivdi3+0x540>
 20167a4:	100d883a 	mov	r6,r2
 20167a8:	1c63c83a 	sub	r17,r3,r17
 20167ac:	900b883a 	mov	r5,r18
 20167b0:	8809883a 	mov	r4,r17
 20167b4:	d9800015 	stw	r6,0(sp)
 20167b8:	20074ec0 	call	20074ec <__umodsi3>
 20167bc:	102d883a 	mov	r22,r2
 20167c0:	8809883a 	mov	r4,r17
 20167c4:	900b883a 	mov	r5,r18
 20167c8:	20074880 	call	2007488 <__udivsi3>
 20167cc:	b02c943a 	slli	r22,r22,16
 20167d0:	e089383a 	mul	r4,fp,r2
 20167d4:	843fffcc 	andi	r16,r16,65535
 20167d8:	85a0b03a 	or	r16,r16,r22
 20167dc:	d9800017 	ldw	r6,0(sp)
 20167e0:	8100042e 	bgeu	r16,r4,20167f4 <__udivdi3+0x3bc>
 20167e4:	85e1883a 	add	r16,r16,r23
 20167e8:	10ffffc4 	addi	r3,r2,-1
 20167ec:	85c05e2e 	bgeu	r16,r23,2016968 <__udivdi3+0x530>
 20167f0:	1805883a 	mov	r2,r3
 20167f4:	300c943a 	slli	r6,r6,16
 20167f8:	a17fffcc 	andi	r5,r20,65535
 20167fc:	a028d43a 	srli	r20,r20,16
 2016800:	3084b03a 	or	r2,r6,r2
 2016804:	10ffffcc 	andi	r3,r2,65535
 2016808:	100cd43a 	srli	r6,r2,16
 201680c:	194f383a 	mul	r7,r3,r5
 2016810:	1d07383a 	mul	r3,r3,r20
 2016814:	314b383a 	mul	r5,r6,r5
 2016818:	3810d43a 	srli	r8,r7,16
 201681c:	8121c83a 	sub	r16,r16,r4
 2016820:	1947883a 	add	r3,r3,r5
 2016824:	40c7883a 	add	r3,r8,r3
 2016828:	350d383a 	mul	r6,r6,r20
 201682c:	1940022e 	bgeu	r3,r5,2016838 <__udivdi3+0x400>
 2016830:	01000074 	movhi	r4,1
 2016834:	310d883a 	add	r6,r6,r4
 2016838:	1828d43a 	srli	r20,r3,16
 201683c:	a18d883a 	add	r6,r20,r6
 2016840:	81803e36 	bltu	r16,r6,201693c <__udivdi3+0x504>
 2016844:	81803826 	beq	r16,r6,2016928 <__udivdi3+0x4f0>
 2016848:	0007883a 	mov	r3,zero
 201684c:	003fa206 	br	20166d8 <__udivdi3+0x2a0>
 2016850:	88e2983a 	sll	r17,r17,r3
 2016854:	80a8d83a 	srl	r20,r16,r2
 2016858:	80e0983a 	sll	r16,r16,r3
 201685c:	882ad43a 	srli	r21,r17,16
 2016860:	9884d83a 	srl	r2,r19,r2
 2016864:	a009883a 	mov	r4,r20
 2016868:	a80b883a 	mov	r5,r21
 201686c:	142eb03a 	or	r23,r2,r16
 2016870:	98e4983a 	sll	r18,r19,r3
 2016874:	20074ec0 	call	20074ec <__umodsi3>
 2016878:	a009883a 	mov	r4,r20
 201687c:	a80b883a 	mov	r5,r21
 2016880:	1021883a 	mov	r16,r2
 2016884:	20074880 	call	2007488 <__udivsi3>
 2016888:	1039883a 	mov	fp,r2
 201688c:	8d3fffcc 	andi	r20,r17,65535
 2016890:	8020943a 	slli	r16,r16,16
 2016894:	b804d43a 	srli	r2,r23,16
 2016898:	a72d383a 	mul	r22,r20,fp
 201689c:	1404b03a 	or	r2,r2,r16
 20168a0:	1580062e 	bgeu	r2,r22,20168bc <__udivdi3+0x484>
 20168a4:	1445883a 	add	r2,r2,r17
 20168a8:	e0ffffc4 	addi	r3,fp,-1
 20168ac:	14403836 	bltu	r2,r17,2016990 <__udivdi3+0x558>
 20168b0:	1580372e 	bgeu	r2,r22,2016990 <__udivdi3+0x558>
 20168b4:	e73fff84 	addi	fp,fp,-2
 20168b8:	1445883a 	add	r2,r2,r17
 20168bc:	15adc83a 	sub	r22,r2,r22
 20168c0:	a80b883a 	mov	r5,r21
 20168c4:	b009883a 	mov	r4,r22
 20168c8:	20074ec0 	call	20074ec <__umodsi3>
 20168cc:	1027883a 	mov	r19,r2
 20168d0:	b009883a 	mov	r4,r22
 20168d4:	a80b883a 	mov	r5,r21
 20168d8:	20074880 	call	2007488 <__udivsi3>
 20168dc:	9826943a 	slli	r19,r19,16
 20168e0:	a0a1383a 	mul	r16,r20,r2
 20168e4:	b93fffcc 	andi	r4,r23,65535
 20168e8:	24c8b03a 	or	r4,r4,r19
 20168ec:	2400062e 	bgeu	r4,r16,2016908 <__udivdi3+0x4d0>
 20168f0:	2449883a 	add	r4,r4,r17
 20168f4:	10ffffc4 	addi	r3,r2,-1
 20168f8:	24402336 	bltu	r4,r17,2016988 <__udivdi3+0x550>
 20168fc:	2400222e 	bgeu	r4,r16,2016988 <__udivdi3+0x550>
 2016900:	10bfff84 	addi	r2,r2,-2
 2016904:	2449883a 	add	r4,r4,r17
 2016908:	e038943a 	slli	fp,fp,16
 201690c:	2421c83a 	sub	r16,r4,r16
 2016910:	e086b03a 	or	r3,fp,r2
 2016914:	003f4306 	br	2016624 <__udivdi3+0x1ec>
 2016918:	2005883a 	mov	r2,r4
 201691c:	003f6906 	br	20166c4 <__udivdi3+0x28c>
 2016920:	1805883a 	mov	r2,r3
 2016924:	003f0f06 	br	2016564 <__udivdi3+0x12c>
 2016928:	1806943a 	slli	r3,r3,16
 201692c:	9d66983a 	sll	r19,r19,r21
 2016930:	39ffffcc 	andi	r7,r7,65535
 2016934:	19c7883a 	add	r3,r3,r7
 2016938:	98ffc32e 	bgeu	r19,r3,2016848 <__udivdi3+0x410>
 201693c:	10bfffc4 	addi	r2,r2,-1
 2016940:	003fc106 	br	2016848 <__udivdi3+0x410>
 2016944:	00800604 	movi	r2,24
 2016948:	003f1106 	br	2016590 <__udivdi3+0x158>
 201694c:	00800604 	movi	r2,24
 2016950:	003f2706 	br	20165f0 <__udivdi3+0x1b8>
 2016954:	00800604 	movi	r2,24
 2016958:	003ece06 	br	2016494 <__udivdi3+0x5c>
 201695c:	0007883a 	mov	r3,zero
 2016960:	00800044 	movi	r2,1
 2016964:	003f5c06 	br	20166d8 <__udivdi3+0x2a0>
 2016968:	813fa12e 	bgeu	r16,r4,20167f0 <__udivdi3+0x3b8>
 201696c:	10bfff84 	addi	r2,r2,-2
 2016970:	85e1883a 	add	r16,r16,r23
 2016974:	003f9f06 	br	20167f4 <__udivdi3+0x3bc>
 2016978:	1c7f8a2e 	bgeu	r3,r17,20167a4 <__udivdi3+0x36c>
 201697c:	31bfff84 	addi	r6,r6,-2
 2016980:	1dc7883a 	add	r3,r3,r23
 2016984:	003f8806 	br	20167a8 <__udivdi3+0x370>
 2016988:	1805883a 	mov	r2,r3
 201698c:	003fde06 	br	2016908 <__udivdi3+0x4d0>
 2016990:	1839883a 	mov	fp,r3
 2016994:	003fc906 	br	20168bc <__udivdi3+0x484>
 2016998:	b5bfff84 	addi	r22,r22,-2
 201699c:	2449883a 	add	r4,r4,r17
 20169a0:	003f3406 	br	2016674 <__udivdi3+0x23c>
 20169a4:	b5bfff84 	addi	r22,r22,-2
 20169a8:	1445883a 	add	r2,r2,r17
 20169ac:	003edb06 	br	201651c <__udivdi3+0xe4>

020169b0 <__umoddi3>:
 20169b0:	defff404 	addi	sp,sp,-48
 20169b4:	df000a15 	stw	fp,40(sp)
 20169b8:	dc400315 	stw	r17,12(sp)
 20169bc:	dc000215 	stw	r16,8(sp)
 20169c0:	dfc00b15 	stw	ra,44(sp)
 20169c4:	ddc00915 	stw	r23,36(sp)
 20169c8:	dd800815 	stw	r22,32(sp)
 20169cc:	dd400715 	stw	r21,28(sp)
 20169d0:	dd000615 	stw	r20,24(sp)
 20169d4:	dcc00515 	stw	r19,20(sp)
 20169d8:	dc800415 	stw	r18,16(sp)
 20169dc:	2021883a 	mov	r16,r4
 20169e0:	2823883a 	mov	r17,r5
 20169e4:	2839883a 	mov	fp,r5
 20169e8:	38003c1e 	bne	r7,zero,2016adc <__umoddi3+0x12c>
 20169ec:	3027883a 	mov	r19,r6
 20169f0:	2029883a 	mov	r20,r4
 20169f4:	2980512e 	bgeu	r5,r6,2016b3c <__umoddi3+0x18c>
 20169f8:	00bfffd4 	movui	r2,65535
 20169fc:	11809a36 	bltu	r2,r6,2016c68 <__umoddi3+0x2b8>
 2016a00:	01003fc4 	movi	r4,255
 2016a04:	2189803a 	cmpltu	r4,r4,r6
 2016a08:	200890fa 	slli	r4,r4,3
 2016a0c:	3104d83a 	srl	r2,r6,r4
 2016a10:	00c080b4 	movhi	r3,514
 2016a14:	18cc0904 	addi	r3,r3,12324
 2016a18:	1885883a 	add	r2,r3,r2
 2016a1c:	10c00003 	ldbu	r3,0(r2)
 2016a20:	00800804 	movi	r2,32
 2016a24:	1909883a 	add	r4,r3,r4
 2016a28:	1125c83a 	sub	r18,r2,r4
 2016a2c:	90000526 	beq	r18,zero,2016a44 <__umoddi3+0x94>
 2016a30:	8ca2983a 	sll	r17,r17,r18
 2016a34:	8108d83a 	srl	r4,r16,r4
 2016a38:	34a6983a 	sll	r19,r6,r18
 2016a3c:	84a8983a 	sll	r20,r16,r18
 2016a40:	2478b03a 	or	fp,r4,r17
 2016a44:	982ed43a 	srli	r23,r19,16
 2016a48:	e009883a 	mov	r4,fp
 2016a4c:	9dbfffcc 	andi	r22,r19,65535
 2016a50:	b80b883a 	mov	r5,r23
 2016a54:	20074ec0 	call	20074ec <__umodsi3>
 2016a58:	e009883a 	mov	r4,fp
 2016a5c:	b80b883a 	mov	r5,r23
 2016a60:	102b883a 	mov	r21,r2
 2016a64:	20074880 	call	2007488 <__udivsi3>
 2016a68:	a806943a 	slli	r3,r21,16
 2016a6c:	a008d43a 	srli	r4,r20,16
 2016a70:	b085383a 	mul	r2,r22,r2
 2016a74:	20c8b03a 	or	r4,r4,r3
 2016a78:	2080032e 	bgeu	r4,r2,2016a88 <__umoddi3+0xd8>
 2016a7c:	24c9883a 	add	r4,r4,r19
 2016a80:	24c00136 	bltu	r4,r19,2016a88 <__umoddi3+0xd8>
 2016a84:	20811036 	bltu	r4,r2,2016ec8 <__umoddi3+0x518>
 2016a88:	20abc83a 	sub	r21,r4,r2
 2016a8c:	b80b883a 	mov	r5,r23
 2016a90:	a809883a 	mov	r4,r21
 2016a94:	20074ec0 	call	20074ec <__umodsi3>
 2016a98:	1023883a 	mov	r17,r2
 2016a9c:	b80b883a 	mov	r5,r23
 2016aa0:	a809883a 	mov	r4,r21
 2016aa4:	20074880 	call	2007488 <__udivsi3>
 2016aa8:	8822943a 	slli	r17,r17,16
 2016aac:	b085383a 	mul	r2,r22,r2
 2016ab0:	a0ffffcc 	andi	r3,r20,65535
 2016ab4:	1c46b03a 	or	r3,r3,r17
 2016ab8:	1880042e 	bgeu	r3,r2,2016acc <__umoddi3+0x11c>
 2016abc:	1cc7883a 	add	r3,r3,r19
 2016ac0:	1cc00236 	bltu	r3,r19,2016acc <__umoddi3+0x11c>
 2016ac4:	1880012e 	bgeu	r3,r2,2016acc <__umoddi3+0x11c>
 2016ac8:	1cc7883a 	add	r3,r3,r19
 2016acc:	1885c83a 	sub	r2,r3,r2
 2016ad0:	1484d83a 	srl	r2,r2,r18
 2016ad4:	0007883a 	mov	r3,zero
 2016ad8:	00004f06 	br	2016c18 <__umoddi3+0x268>
 2016adc:	29c04c36 	bltu	r5,r7,2016c10 <__umoddi3+0x260>
 2016ae0:	00bfffd4 	movui	r2,65535
 2016ae4:	11c0582e 	bgeu	r2,r7,2016c48 <__umoddi3+0x298>
 2016ae8:	00804034 	movhi	r2,256
 2016aec:	10bfffc4 	addi	r2,r2,-1
 2016af0:	11c0e736 	bltu	r2,r7,2016e90 <__umoddi3+0x4e0>
 2016af4:	01000404 	movi	r4,16
 2016af8:	3904d83a 	srl	r2,r7,r4
 2016afc:	00c080b4 	movhi	r3,514
 2016b00:	18cc0904 	addi	r3,r3,12324
 2016b04:	1885883a 	add	r2,r3,r2
 2016b08:	14c00003 	ldbu	r19,0(r2)
 2016b0c:	00c00804 	movi	r3,32
 2016b10:	9927883a 	add	r19,r19,r4
 2016b14:	1ce9c83a 	sub	r20,r3,r19
 2016b18:	a000581e 	bne	r20,zero,2016c7c <__umoddi3+0x2cc>
 2016b1c:	3c400136 	bltu	r7,r17,2016b24 <__umoddi3+0x174>
 2016b20:	8180eb36 	bltu	r16,r6,2016ed0 <__umoddi3+0x520>
 2016b24:	8185c83a 	sub	r2,r16,r6
 2016b28:	89e3c83a 	sub	r17,r17,r7
 2016b2c:	8089803a 	cmpltu	r4,r16,r2
 2016b30:	8939c83a 	sub	fp,r17,r4
 2016b34:	e007883a 	mov	r3,fp
 2016b38:	00003706 	br	2016c18 <__umoddi3+0x268>
 2016b3c:	3000041e 	bne	r6,zero,2016b50 <__umoddi3+0x1a0>
 2016b40:	000b883a 	mov	r5,zero
 2016b44:	01000044 	movi	r4,1
 2016b48:	20074880 	call	2007488 <__udivsi3>
 2016b4c:	1027883a 	mov	r19,r2
 2016b50:	00bfffd4 	movui	r2,65535
 2016b54:	14c0402e 	bgeu	r2,r19,2016c58 <__umoddi3+0x2a8>
 2016b58:	00804034 	movhi	r2,256
 2016b5c:	10bfffc4 	addi	r2,r2,-1
 2016b60:	14c0cd36 	bltu	r2,r19,2016e98 <__umoddi3+0x4e8>
 2016b64:	00800404 	movi	r2,16
 2016b68:	9886d83a 	srl	r3,r19,r2
 2016b6c:	010080b4 	movhi	r4,514
 2016b70:	210c0904 	addi	r4,r4,12324
 2016b74:	20c7883a 	add	r3,r4,r3
 2016b78:	18c00003 	ldbu	r3,0(r3)
 2016b7c:	1887883a 	add	r3,r3,r2
 2016b80:	00800804 	movi	r2,32
 2016b84:	10e5c83a 	sub	r18,r2,r3
 2016b88:	9000901e 	bne	r18,zero,2016dcc <__umoddi3+0x41c>
 2016b8c:	982cd43a 	srli	r22,r19,16
 2016b90:	8ce3c83a 	sub	r17,r17,r19
 2016b94:	9d7fffcc 	andi	r21,r19,65535
 2016b98:	b00b883a 	mov	r5,r22
 2016b9c:	8809883a 	mov	r4,r17
 2016ba0:	20074ec0 	call	20074ec <__umodsi3>
 2016ba4:	8809883a 	mov	r4,r17
 2016ba8:	b00b883a 	mov	r5,r22
 2016bac:	1021883a 	mov	r16,r2
 2016bb0:	20074880 	call	2007488 <__udivsi3>
 2016bb4:	8006943a 	slli	r3,r16,16
 2016bb8:	a008d43a 	srli	r4,r20,16
 2016bbc:	1545383a 	mul	r2,r2,r21
 2016bc0:	20c8b03a 	or	r4,r4,r3
 2016bc4:	2080042e 	bgeu	r4,r2,2016bd8 <__umoddi3+0x228>
 2016bc8:	24c9883a 	add	r4,r4,r19
 2016bcc:	24c00236 	bltu	r4,r19,2016bd8 <__umoddi3+0x228>
 2016bd0:	2080012e 	bgeu	r4,r2,2016bd8 <__umoddi3+0x228>
 2016bd4:	24c9883a 	add	r4,r4,r19
 2016bd8:	20a1c83a 	sub	r16,r4,r2
 2016bdc:	b00b883a 	mov	r5,r22
 2016be0:	8009883a 	mov	r4,r16
 2016be4:	20074ec0 	call	20074ec <__umodsi3>
 2016be8:	1023883a 	mov	r17,r2
 2016bec:	b00b883a 	mov	r5,r22
 2016bf0:	8009883a 	mov	r4,r16
 2016bf4:	20074880 	call	2007488 <__udivsi3>
 2016bf8:	8822943a 	slli	r17,r17,16
 2016bfc:	1545383a 	mul	r2,r2,r21
 2016c00:	a53fffcc 	andi	r20,r20,65535
 2016c04:	a446b03a 	or	r3,r20,r17
 2016c08:	18bfb02e 	bgeu	r3,r2,2016acc <__umoddi3+0x11c>
 2016c0c:	003fab06 	br	2016abc <__umoddi3+0x10c>
 2016c10:	2005883a 	mov	r2,r4
 2016c14:	2807883a 	mov	r3,r5
 2016c18:	dfc00b17 	ldw	ra,44(sp)
 2016c1c:	df000a17 	ldw	fp,40(sp)
 2016c20:	ddc00917 	ldw	r23,36(sp)
 2016c24:	dd800817 	ldw	r22,32(sp)
 2016c28:	dd400717 	ldw	r21,28(sp)
 2016c2c:	dd000617 	ldw	r20,24(sp)
 2016c30:	dcc00517 	ldw	r19,20(sp)
 2016c34:	dc800417 	ldw	r18,16(sp)
 2016c38:	dc400317 	ldw	r17,12(sp)
 2016c3c:	dc000217 	ldw	r16,8(sp)
 2016c40:	dec00c04 	addi	sp,sp,48
 2016c44:	f800283a 	ret
 2016c48:	04c03fc4 	movi	r19,255
 2016c4c:	99c9803a 	cmpltu	r4,r19,r7
 2016c50:	200890fa 	slli	r4,r4,3
 2016c54:	003fa806 	br	2016af8 <__umoddi3+0x148>
 2016c58:	00803fc4 	movi	r2,255
 2016c5c:	14c5803a 	cmpltu	r2,r2,r19
 2016c60:	100490fa 	slli	r2,r2,3
 2016c64:	003fc006 	br	2016b68 <__umoddi3+0x1b8>
 2016c68:	00804034 	movhi	r2,256
 2016c6c:	10bfffc4 	addi	r2,r2,-1
 2016c70:	11808b36 	bltu	r2,r6,2016ea0 <__umoddi3+0x4f0>
 2016c74:	01000404 	movi	r4,16
 2016c78:	003f6406 	br	2016a0c <__umoddi3+0x5c>
 2016c7c:	34c4d83a 	srl	r2,r6,r19
 2016c80:	3d0e983a 	sll	r7,r7,r20
 2016c84:	8cf8d83a 	srl	fp,r17,r19
 2016c88:	8d10983a 	sll	r8,r17,r20
 2016c8c:	38aab03a 	or	r21,r7,r2
 2016c90:	a82cd43a 	srli	r22,r21,16
 2016c94:	84e2d83a 	srl	r17,r16,r19
 2016c98:	e009883a 	mov	r4,fp
 2016c9c:	b00b883a 	mov	r5,r22
 2016ca0:	8a22b03a 	or	r17,r17,r8
 2016ca4:	3524983a 	sll	r18,r6,r20
 2016ca8:	20074ec0 	call	20074ec <__umodsi3>
 2016cac:	e009883a 	mov	r4,fp
 2016cb0:	b00b883a 	mov	r5,r22
 2016cb4:	102f883a 	mov	r23,r2
 2016cb8:	20074880 	call	2007488 <__udivsi3>
 2016cbc:	100d883a 	mov	r6,r2
 2016cc0:	b808943a 	slli	r4,r23,16
 2016cc4:	aa3fffcc 	andi	r8,r21,65535
 2016cc8:	8804d43a 	srli	r2,r17,16
 2016ccc:	41af383a 	mul	r23,r8,r6
 2016cd0:	8520983a 	sll	r16,r16,r20
 2016cd4:	1104b03a 	or	r2,r2,r4
 2016cd8:	15c0042e 	bgeu	r2,r23,2016cec <__umoddi3+0x33c>
 2016cdc:	1545883a 	add	r2,r2,r21
 2016ce0:	30ffffc4 	addi	r3,r6,-1
 2016ce4:	1540742e 	bgeu	r2,r21,2016eb8 <__umoddi3+0x508>
 2016ce8:	180d883a 	mov	r6,r3
 2016cec:	15efc83a 	sub	r23,r2,r23
 2016cf0:	b00b883a 	mov	r5,r22
 2016cf4:	b809883a 	mov	r4,r23
 2016cf8:	d9800115 	stw	r6,4(sp)
 2016cfc:	da000015 	stw	r8,0(sp)
 2016d00:	20074ec0 	call	20074ec <__umodsi3>
 2016d04:	b00b883a 	mov	r5,r22
 2016d08:	b809883a 	mov	r4,r23
 2016d0c:	1039883a 	mov	fp,r2
 2016d10:	20074880 	call	2007488 <__udivsi3>
 2016d14:	da000017 	ldw	r8,0(sp)
 2016d18:	e038943a 	slli	fp,fp,16
 2016d1c:	100b883a 	mov	r5,r2
 2016d20:	4089383a 	mul	r4,r8,r2
 2016d24:	8a3fffcc 	andi	r8,r17,65535
 2016d28:	4710b03a 	or	r8,r8,fp
 2016d2c:	d9800117 	ldw	r6,4(sp)
 2016d30:	4100042e 	bgeu	r8,r4,2016d44 <__umoddi3+0x394>
 2016d34:	4551883a 	add	r8,r8,r21
 2016d38:	10bfffc4 	addi	r2,r2,-1
 2016d3c:	45405a2e 	bgeu	r8,r21,2016ea8 <__umoddi3+0x4f8>
 2016d40:	100b883a 	mov	r5,r2
 2016d44:	300c943a 	slli	r6,r6,16
 2016d48:	91ffffcc 	andi	r7,r18,65535
 2016d4c:	9004d43a 	srli	r2,r18,16
 2016d50:	314cb03a 	or	r6,r6,r5
 2016d54:	317fffcc 	andi	r5,r6,65535
 2016d58:	300cd43a 	srli	r6,r6,16
 2016d5c:	29d3383a 	mul	r9,r5,r7
 2016d60:	288b383a 	mul	r5,r5,r2
 2016d64:	31cf383a 	mul	r7,r6,r7
 2016d68:	4806d43a 	srli	r3,r9,16
 2016d6c:	4111c83a 	sub	r8,r8,r4
 2016d70:	29cb883a 	add	r5,r5,r7
 2016d74:	194b883a 	add	r5,r3,r5
 2016d78:	3085383a 	mul	r2,r6,r2
 2016d7c:	29c0022e 	bgeu	r5,r7,2016d88 <__umoddi3+0x3d8>
 2016d80:	00c00074 	movhi	r3,1
 2016d84:	10c5883a 	add	r2,r2,r3
 2016d88:	2808d43a 	srli	r4,r5,16
 2016d8c:	280a943a 	slli	r5,r5,16
 2016d90:	4a7fffcc 	andi	r9,r9,65535
 2016d94:	2085883a 	add	r2,r4,r2
 2016d98:	2a4b883a 	add	r5,r5,r9
 2016d9c:	40803636 	bltu	r8,r2,2016e78 <__umoddi3+0x4c8>
 2016da0:	40804d26 	beq	r8,r2,2016ed8 <__umoddi3+0x528>
 2016da4:	4089c83a 	sub	r4,r8,r2
 2016da8:	280f883a 	mov	r7,r5
 2016dac:	81cfc83a 	sub	r7,r16,r7
 2016db0:	81c7803a 	cmpltu	r3,r16,r7
 2016db4:	20c7c83a 	sub	r3,r4,r3
 2016db8:	1cc4983a 	sll	r2,r3,r19
 2016dbc:	3d0ed83a 	srl	r7,r7,r20
 2016dc0:	1d06d83a 	srl	r3,r3,r20
 2016dc4:	11c4b03a 	or	r2,r2,r7
 2016dc8:	003f9306 	br	2016c18 <__umoddi3+0x268>
 2016dcc:	9ca6983a 	sll	r19,r19,r18
 2016dd0:	88e8d83a 	srl	r20,r17,r3
 2016dd4:	80c4d83a 	srl	r2,r16,r3
 2016dd8:	982cd43a 	srli	r22,r19,16
 2016ddc:	8ca2983a 	sll	r17,r17,r18
 2016de0:	a009883a 	mov	r4,r20
 2016de4:	b00b883a 	mov	r5,r22
 2016de8:	1478b03a 	or	fp,r2,r17
 2016dec:	20074ec0 	call	20074ec <__umodsi3>
 2016df0:	a009883a 	mov	r4,r20
 2016df4:	b00b883a 	mov	r5,r22
 2016df8:	1023883a 	mov	r17,r2
 2016dfc:	20074880 	call	2007488 <__udivsi3>
 2016e00:	9d7fffcc 	andi	r21,r19,65535
 2016e04:	880a943a 	slli	r5,r17,16
 2016e08:	e008d43a 	srli	r4,fp,16
 2016e0c:	a885383a 	mul	r2,r21,r2
 2016e10:	84a8983a 	sll	r20,r16,r18
 2016e14:	2148b03a 	or	r4,r4,r5
 2016e18:	2080042e 	bgeu	r4,r2,2016e2c <__umoddi3+0x47c>
 2016e1c:	24c9883a 	add	r4,r4,r19
 2016e20:	24c00236 	bltu	r4,r19,2016e2c <__umoddi3+0x47c>
 2016e24:	2080012e 	bgeu	r4,r2,2016e2c <__umoddi3+0x47c>
 2016e28:	24c9883a 	add	r4,r4,r19
 2016e2c:	20a3c83a 	sub	r17,r4,r2
 2016e30:	b00b883a 	mov	r5,r22
 2016e34:	8809883a 	mov	r4,r17
 2016e38:	20074ec0 	call	20074ec <__umodsi3>
 2016e3c:	102f883a 	mov	r23,r2
 2016e40:	8809883a 	mov	r4,r17
 2016e44:	b00b883a 	mov	r5,r22
 2016e48:	20074880 	call	2007488 <__udivsi3>
 2016e4c:	b82e943a 	slli	r23,r23,16
 2016e50:	a885383a 	mul	r2,r21,r2
 2016e54:	e13fffcc 	andi	r4,fp,65535
 2016e58:	25c8b03a 	or	r4,r4,r23
 2016e5c:	2080042e 	bgeu	r4,r2,2016e70 <__umoddi3+0x4c0>
 2016e60:	24c9883a 	add	r4,r4,r19
 2016e64:	24c00236 	bltu	r4,r19,2016e70 <__umoddi3+0x4c0>
 2016e68:	2080012e 	bgeu	r4,r2,2016e70 <__umoddi3+0x4c0>
 2016e6c:	24c9883a 	add	r4,r4,r19
 2016e70:	20a3c83a 	sub	r17,r4,r2
 2016e74:	003f4806 	br	2016b98 <__umoddi3+0x1e8>
 2016e78:	2c8fc83a 	sub	r7,r5,r18
 2016e7c:	1545c83a 	sub	r2,r2,r21
 2016e80:	29cb803a 	cmpltu	r5,r5,r7
 2016e84:	1145c83a 	sub	r2,r2,r5
 2016e88:	4089c83a 	sub	r4,r8,r2
 2016e8c:	003fc706 	br	2016dac <__umoddi3+0x3fc>
 2016e90:	01000604 	movi	r4,24
 2016e94:	003f1806 	br	2016af8 <__umoddi3+0x148>
 2016e98:	00800604 	movi	r2,24
 2016e9c:	003f3206 	br	2016b68 <__umoddi3+0x1b8>
 2016ea0:	01000604 	movi	r4,24
 2016ea4:	003ed906 	br	2016a0c <__umoddi3+0x5c>
 2016ea8:	413fa52e 	bgeu	r8,r4,2016d40 <__umoddi3+0x390>
 2016eac:	297fff84 	addi	r5,r5,-2
 2016eb0:	4551883a 	add	r8,r8,r21
 2016eb4:	003fa306 	br	2016d44 <__umoddi3+0x394>
 2016eb8:	15ff8b2e 	bgeu	r2,r23,2016ce8 <__umoddi3+0x338>
 2016ebc:	31bfff84 	addi	r6,r6,-2
 2016ec0:	1545883a 	add	r2,r2,r21
 2016ec4:	003f8906 	br	2016cec <__umoddi3+0x33c>
 2016ec8:	24c9883a 	add	r4,r4,r19
 2016ecc:	003eee06 	br	2016a88 <__umoddi3+0xd8>
 2016ed0:	8005883a 	mov	r2,r16
 2016ed4:	003f1706 	br	2016b34 <__umoddi3+0x184>
 2016ed8:	817fe736 	bltu	r16,r5,2016e78 <__umoddi3+0x4c8>
 2016edc:	280f883a 	mov	r7,r5
 2016ee0:	0009883a 	mov	r4,zero
 2016ee4:	003fb106 	br	2016dac <__umoddi3+0x3fc>

02016ee8 <__fixdfsi>:
 2016ee8:	280cd53a 	srli	r6,r5,20
 2016eec:	00c00434 	movhi	r3,16
 2016ef0:	18ffffc4 	addi	r3,r3,-1
 2016ef4:	3181ffcc 	andi	r6,r6,2047
 2016ef8:	01c0ff84 	movi	r7,1022
 2016efc:	28c6703a 	and	r3,r5,r3
 2016f00:	280ad7fa 	srli	r5,r5,31
 2016f04:	3980120e 	bge	r7,r6,2016f50 <__fixdfsi+0x68>
 2016f08:	00810744 	movi	r2,1053
 2016f0c:	11800c16 	blt	r2,r6,2016f40 <__fixdfsi+0x58>
 2016f10:	00810cc4 	movi	r2,1075
 2016f14:	1185c83a 	sub	r2,r2,r6
 2016f18:	01c007c4 	movi	r7,31
 2016f1c:	18c00434 	orhi	r3,r3,16
 2016f20:	38800d16 	blt	r7,r2,2016f58 <__fixdfsi+0x70>
 2016f24:	31befb44 	addi	r6,r6,-1043
 2016f28:	2084d83a 	srl	r2,r4,r2
 2016f2c:	1986983a 	sll	r3,r3,r6
 2016f30:	1884b03a 	or	r2,r3,r2
 2016f34:	28000726 	beq	r5,zero,2016f54 <__fixdfsi+0x6c>
 2016f38:	0085c83a 	sub	r2,zero,r2
 2016f3c:	f800283a 	ret
 2016f40:	00a00034 	movhi	r2,32768
 2016f44:	10bfffc4 	addi	r2,r2,-1
 2016f48:	2885883a 	add	r2,r5,r2
 2016f4c:	f800283a 	ret
 2016f50:	0005883a 	mov	r2,zero
 2016f54:	f800283a 	ret
 2016f58:	008104c4 	movi	r2,1043
 2016f5c:	1185c83a 	sub	r2,r2,r6
 2016f60:	1884d83a 	srl	r2,r3,r2
 2016f64:	003ff306 	br	2016f34 <__fixdfsi+0x4c>

02016f68 <__floatsidf>:
 2016f68:	defffd04 	addi	sp,sp,-12
 2016f6c:	dfc00215 	stw	ra,8(sp)
 2016f70:	dc400115 	stw	r17,4(sp)
 2016f74:	dc000015 	stw	r16,0(sp)
 2016f78:	20002b26 	beq	r4,zero,2017028 <__floatsidf+0xc0>
 2016f7c:	2023883a 	mov	r17,r4
 2016f80:	2020d7fa 	srli	r16,r4,31
 2016f84:	20002d16 	blt	r4,zero,201703c <__floatsidf+0xd4>
 2016f88:	8809883a 	mov	r4,r17
 2016f8c:	2009bfc0 	call	2009bfc <__clzsi2>
 2016f90:	01410784 	movi	r5,1054
 2016f94:	288bc83a 	sub	r5,r5,r2
 2016f98:	01010cc4 	movi	r4,1075
 2016f9c:	2149c83a 	sub	r4,r4,r5
 2016fa0:	00c007c4 	movi	r3,31
 2016fa4:	1900160e 	bge	r3,r4,2017000 <__floatsidf+0x98>
 2016fa8:	00c104c4 	movi	r3,1043
 2016fac:	1947c83a 	sub	r3,r3,r5
 2016fb0:	88c6983a 	sll	r3,r17,r3
 2016fb4:	00800434 	movhi	r2,16
 2016fb8:	10bfffc4 	addi	r2,r2,-1
 2016fbc:	1886703a 	and	r3,r3,r2
 2016fc0:	2941ffcc 	andi	r5,r5,2047
 2016fc4:	800d883a 	mov	r6,r16
 2016fc8:	0005883a 	mov	r2,zero
 2016fcc:	280a953a 	slli	r5,r5,20
 2016fd0:	31803fcc 	andi	r6,r6,255
 2016fd4:	01000434 	movhi	r4,16
 2016fd8:	300c97fa 	slli	r6,r6,31
 2016fdc:	213fffc4 	addi	r4,r4,-1
 2016fe0:	1906703a 	and	r3,r3,r4
 2016fe4:	1946b03a 	or	r3,r3,r5
 2016fe8:	1986b03a 	or	r3,r3,r6
 2016fec:	dfc00217 	ldw	ra,8(sp)
 2016ff0:	dc400117 	ldw	r17,4(sp)
 2016ff4:	dc000017 	ldw	r16,0(sp)
 2016ff8:	dec00304 	addi	sp,sp,12
 2016ffc:	f800283a 	ret
 2017000:	00c002c4 	movi	r3,11
 2017004:	1887c83a 	sub	r3,r3,r2
 2017008:	88c6d83a 	srl	r3,r17,r3
 201700c:	8904983a 	sll	r2,r17,r4
 2017010:	01000434 	movhi	r4,16
 2017014:	213fffc4 	addi	r4,r4,-1
 2017018:	2941ffcc 	andi	r5,r5,2047
 201701c:	1906703a 	and	r3,r3,r4
 2017020:	800d883a 	mov	r6,r16
 2017024:	003fe906 	br	2016fcc <__floatsidf+0x64>
 2017028:	000d883a 	mov	r6,zero
 201702c:	000b883a 	mov	r5,zero
 2017030:	0007883a 	mov	r3,zero
 2017034:	0005883a 	mov	r2,zero
 2017038:	003fe406 	br	2016fcc <__floatsidf+0x64>
 201703c:	0123c83a 	sub	r17,zero,r4
 2017040:	003fd106 	br	2016f88 <__floatsidf+0x20>

02017044 <__floatunsidf>:
 2017044:	defffe04 	addi	sp,sp,-8
 2017048:	dc000015 	stw	r16,0(sp)
 201704c:	dfc00115 	stw	ra,4(sp)
 2017050:	2021883a 	mov	r16,r4
 2017054:	20002226 	beq	r4,zero,20170e0 <__floatunsidf+0x9c>
 2017058:	2009bfc0 	call	2009bfc <__clzsi2>
 201705c:	01010784 	movi	r4,1054
 2017060:	2089c83a 	sub	r4,r4,r2
 2017064:	01810cc4 	movi	r6,1075
 2017068:	310dc83a 	sub	r6,r6,r4
 201706c:	00c007c4 	movi	r3,31
 2017070:	1980120e 	bge	r3,r6,20170bc <__floatunsidf+0x78>
 2017074:	00c104c4 	movi	r3,1043
 2017078:	1907c83a 	sub	r3,r3,r4
 201707c:	80ca983a 	sll	r5,r16,r3
 2017080:	00800434 	movhi	r2,16
 2017084:	10bfffc4 	addi	r2,r2,-1
 2017088:	2101ffcc 	andi	r4,r4,2047
 201708c:	0021883a 	mov	r16,zero
 2017090:	288a703a 	and	r5,r5,r2
 2017094:	2008953a 	slli	r4,r4,20
 2017098:	00c00434 	movhi	r3,16
 201709c:	18ffffc4 	addi	r3,r3,-1
 20170a0:	28c6703a 	and	r3,r5,r3
 20170a4:	8005883a 	mov	r2,r16
 20170a8:	1906b03a 	or	r3,r3,r4
 20170ac:	dfc00117 	ldw	ra,4(sp)
 20170b0:	dc000017 	ldw	r16,0(sp)
 20170b4:	dec00204 	addi	sp,sp,8
 20170b8:	f800283a 	ret
 20170bc:	00c002c4 	movi	r3,11
 20170c0:	188bc83a 	sub	r5,r3,r2
 20170c4:	814ad83a 	srl	r5,r16,r5
 20170c8:	00c00434 	movhi	r3,16
 20170cc:	18ffffc4 	addi	r3,r3,-1
 20170d0:	81a0983a 	sll	r16,r16,r6
 20170d4:	2101ffcc 	andi	r4,r4,2047
 20170d8:	28ca703a 	and	r5,r5,r3
 20170dc:	003fed06 	br	2017094 <__floatunsidf+0x50>
 20170e0:	0009883a 	mov	r4,zero
 20170e4:	000b883a 	mov	r5,zero
 20170e8:	003fea06 	br	2017094 <__floatunsidf+0x50>

020170ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20170ec:	defffe04 	addi	sp,sp,-8
 20170f0:	dfc00115 	stw	ra,4(sp)
 20170f4:	df000015 	stw	fp,0(sp)
 20170f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20170fc:	d0a03b17 	ldw	r2,-32532(gp)
 2017100:	10000326 	beq	r2,zero,2017110 <alt_get_errno+0x24>
 2017104:	d0a03b17 	ldw	r2,-32532(gp)
 2017108:	103ee83a 	callr	r2
 201710c:	00000106 	br	2017114 <alt_get_errno+0x28>
 2017110:	d0a79e04 	addi	r2,gp,-24968
}
 2017114:	e037883a 	mov	sp,fp
 2017118:	dfc00117 	ldw	ra,4(sp)
 201711c:	df000017 	ldw	fp,0(sp)
 2017120:	dec00204 	addi	sp,sp,8
 2017124:	f800283a 	ret

02017128 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2017128:	defffb04 	addi	sp,sp,-20
 201712c:	dfc00415 	stw	ra,16(sp)
 2017130:	df000315 	stw	fp,12(sp)
 2017134:	df000304 	addi	fp,sp,12
 2017138:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 201713c:	e0bfff17 	ldw	r2,-4(fp)
 2017140:	10000616 	blt	r2,zero,201715c <close+0x34>
 2017144:	e0bfff17 	ldw	r2,-4(fp)
 2017148:	10c00324 	muli	r3,r2,12
 201714c:	008080b4 	movhi	r2,514
 2017150:	108f7304 	addi	r2,r2,15820
 2017154:	1885883a 	add	r2,r3,r2
 2017158:	00000106 	br	2017160 <close+0x38>
 201715c:	0005883a 	mov	r2,zero
 2017160:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2017164:	e0bffd17 	ldw	r2,-12(fp)
 2017168:	10001926 	beq	r2,zero,20171d0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 201716c:	e0bffd17 	ldw	r2,-12(fp)
 2017170:	10800017 	ldw	r2,0(r2)
 2017174:	10800417 	ldw	r2,16(r2)
 2017178:	10000626 	beq	r2,zero,2017194 <close+0x6c>
 201717c:	e0bffd17 	ldw	r2,-12(fp)
 2017180:	10800017 	ldw	r2,0(r2)
 2017184:	10800417 	ldw	r2,16(r2)
 2017188:	e13ffd17 	ldw	r4,-12(fp)
 201718c:	103ee83a 	callr	r2
 2017190:	00000106 	br	2017198 <close+0x70>
 2017194:	0005883a 	mov	r2,zero
 2017198:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 201719c:	e13fff17 	ldw	r4,-4(fp)
 20171a0:	20177e00 	call	20177e0 <alt_release_fd>
    if (rval < 0)
 20171a4:	e0bffe17 	ldw	r2,-8(fp)
 20171a8:	1000070e 	bge	r2,zero,20171c8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 20171ac:	20170ec0 	call	20170ec <alt_get_errno>
 20171b0:	1007883a 	mov	r3,r2
 20171b4:	e0bffe17 	ldw	r2,-8(fp)
 20171b8:	0085c83a 	sub	r2,zero,r2
 20171bc:	18800015 	stw	r2,0(r3)
      return -1;
 20171c0:	00bfffc4 	movi	r2,-1
 20171c4:	00000706 	br	20171e4 <close+0xbc>
    }
    return 0;
 20171c8:	0005883a 	mov	r2,zero
 20171cc:	00000506 	br	20171e4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20171d0:	20170ec0 	call	20170ec <alt_get_errno>
 20171d4:	1007883a 	mov	r3,r2
 20171d8:	00801444 	movi	r2,81
 20171dc:	18800015 	stw	r2,0(r3)
    return -1;
 20171e0:	00bfffc4 	movi	r2,-1
  }
}
 20171e4:	e037883a 	mov	sp,fp
 20171e8:	dfc00117 	ldw	ra,4(sp)
 20171ec:	df000017 	ldw	fp,0(sp)
 20171f0:	dec00204 	addi	sp,sp,8
 20171f4:	f800283a 	ret

020171f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 20171f8:	defffc04 	addi	sp,sp,-16
 20171fc:	df000315 	stw	fp,12(sp)
 2017200:	df000304 	addi	fp,sp,12
 2017204:	e13ffd15 	stw	r4,-12(fp)
 2017208:	e17ffe15 	stw	r5,-8(fp)
 201720c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2017210:	e0bfff17 	ldw	r2,-4(fp)
}
 2017214:	e037883a 	mov	sp,fp
 2017218:	df000017 	ldw	fp,0(sp)
 201721c:	dec00104 	addi	sp,sp,4
 2017220:	f800283a 	ret

02017224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017224:	defffe04 	addi	sp,sp,-8
 2017228:	dfc00115 	stw	ra,4(sp)
 201722c:	df000015 	stw	fp,0(sp)
 2017230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2017234:	d0a03b17 	ldw	r2,-32532(gp)
 2017238:	10000326 	beq	r2,zero,2017248 <alt_get_errno+0x24>
 201723c:	d0a03b17 	ldw	r2,-32532(gp)
 2017240:	103ee83a 	callr	r2
 2017244:	00000106 	br	201724c <alt_get_errno+0x28>
 2017248:	d0a79e04 	addi	r2,gp,-24968
}
 201724c:	e037883a 	mov	sp,fp
 2017250:	dfc00117 	ldw	ra,4(sp)
 2017254:	df000017 	ldw	fp,0(sp)
 2017258:	dec00204 	addi	sp,sp,8
 201725c:	f800283a 	ret

02017260 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2017260:	defffb04 	addi	sp,sp,-20
 2017264:	dfc00415 	stw	ra,16(sp)
 2017268:	df000315 	stw	fp,12(sp)
 201726c:	df000304 	addi	fp,sp,12
 2017270:	e13ffe15 	stw	r4,-8(fp)
 2017274:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2017278:	e0bffe17 	ldw	r2,-8(fp)
 201727c:	10000616 	blt	r2,zero,2017298 <fstat+0x38>
 2017280:	e0bffe17 	ldw	r2,-8(fp)
 2017284:	10c00324 	muli	r3,r2,12
 2017288:	008080b4 	movhi	r2,514
 201728c:	108f7304 	addi	r2,r2,15820
 2017290:	1885883a 	add	r2,r3,r2
 2017294:	00000106 	br	201729c <fstat+0x3c>
 2017298:	0005883a 	mov	r2,zero
 201729c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 20172a0:	e0bffd17 	ldw	r2,-12(fp)
 20172a4:	10001026 	beq	r2,zero,20172e8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20172a8:	e0bffd17 	ldw	r2,-12(fp)
 20172ac:	10800017 	ldw	r2,0(r2)
 20172b0:	10800817 	ldw	r2,32(r2)
 20172b4:	10000726 	beq	r2,zero,20172d4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 20172b8:	e0bffd17 	ldw	r2,-12(fp)
 20172bc:	10800017 	ldw	r2,0(r2)
 20172c0:	10800817 	ldw	r2,32(r2)
 20172c4:	e17fff17 	ldw	r5,-4(fp)
 20172c8:	e13ffd17 	ldw	r4,-12(fp)
 20172cc:	103ee83a 	callr	r2
 20172d0:	00000a06 	br	20172fc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20172d4:	e0bfff17 	ldw	r2,-4(fp)
 20172d8:	00c80004 	movi	r3,8192
 20172dc:	10c00115 	stw	r3,4(r2)
      return 0;
 20172e0:	0005883a 	mov	r2,zero
 20172e4:	00000506 	br	20172fc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20172e8:	20172240 	call	2017224 <alt_get_errno>
 20172ec:	1007883a 	mov	r3,r2
 20172f0:	00801444 	movi	r2,81
 20172f4:	18800015 	stw	r2,0(r3)
    return -1;
 20172f8:	00bfffc4 	movi	r2,-1
  }
}
 20172fc:	e037883a 	mov	sp,fp
 2017300:	dfc00117 	ldw	ra,4(sp)
 2017304:	df000017 	ldw	fp,0(sp)
 2017308:	dec00204 	addi	sp,sp,8
 201730c:	f800283a 	ret

02017310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017310:	defffe04 	addi	sp,sp,-8
 2017314:	dfc00115 	stw	ra,4(sp)
 2017318:	df000015 	stw	fp,0(sp)
 201731c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2017320:	d0a03b17 	ldw	r2,-32532(gp)
 2017324:	10000326 	beq	r2,zero,2017334 <alt_get_errno+0x24>
 2017328:	d0a03b17 	ldw	r2,-32532(gp)
 201732c:	103ee83a 	callr	r2
 2017330:	00000106 	br	2017338 <alt_get_errno+0x28>
 2017334:	d0a79e04 	addi	r2,gp,-24968
}
 2017338:	e037883a 	mov	sp,fp
 201733c:	dfc00117 	ldw	ra,4(sp)
 2017340:	df000017 	ldw	fp,0(sp)
 2017344:	dec00204 	addi	sp,sp,8
 2017348:	f800283a 	ret

0201734c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 201734c:	deffed04 	addi	sp,sp,-76
 2017350:	dfc01215 	stw	ra,72(sp)
 2017354:	df001115 	stw	fp,68(sp)
 2017358:	df001104 	addi	fp,sp,68
 201735c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2017360:	e0bfff17 	ldw	r2,-4(fp)
 2017364:	10000616 	blt	r2,zero,2017380 <isatty+0x34>
 2017368:	e0bfff17 	ldw	r2,-4(fp)
 201736c:	10c00324 	muli	r3,r2,12
 2017370:	008080b4 	movhi	r2,514
 2017374:	108f7304 	addi	r2,r2,15820
 2017378:	1885883a 	add	r2,r3,r2
 201737c:	00000106 	br	2017384 <isatty+0x38>
 2017380:	0005883a 	mov	r2,zero
 2017384:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2017388:	e0bfef17 	ldw	r2,-68(fp)
 201738c:	10000e26 	beq	r2,zero,20173c8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2017390:	e0bfef17 	ldw	r2,-68(fp)
 2017394:	10800017 	ldw	r2,0(r2)
 2017398:	10800817 	ldw	r2,32(r2)
 201739c:	1000021e 	bne	r2,zero,20173a8 <isatty+0x5c>
    {
      return 1;
 20173a0:	00800044 	movi	r2,1
 20173a4:	00000d06 	br	20173dc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 20173a8:	e0bff004 	addi	r2,fp,-64
 20173ac:	100b883a 	mov	r5,r2
 20173b0:	e13fff17 	ldw	r4,-4(fp)
 20173b4:	20172600 	call	2017260 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 20173b8:	e0bff117 	ldw	r2,-60(fp)
 20173bc:	10880020 	cmpeqi	r2,r2,8192
 20173c0:	10803fcc 	andi	r2,r2,255
 20173c4:	00000506 	br	20173dc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20173c8:	20173100 	call	2017310 <alt_get_errno>
 20173cc:	1007883a 	mov	r3,r2
 20173d0:	00801444 	movi	r2,81
 20173d4:	18800015 	stw	r2,0(r3)
    return 0;
 20173d8:	0005883a 	mov	r2,zero
  }
}
 20173dc:	e037883a 	mov	sp,fp
 20173e0:	dfc00117 	ldw	ra,4(sp)
 20173e4:	df000017 	ldw	fp,0(sp)
 20173e8:	dec00204 	addi	sp,sp,8
 20173ec:	f800283a 	ret

020173f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20173f0:	defffc04 	addi	sp,sp,-16
 20173f4:	df000315 	stw	fp,12(sp)
 20173f8:	df000304 	addi	fp,sp,12
 20173fc:	e13ffd15 	stw	r4,-12(fp)
 2017400:	e17ffe15 	stw	r5,-8(fp)
 2017404:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2017408:	e0fffe17 	ldw	r3,-8(fp)
 201740c:	e0bffd17 	ldw	r2,-12(fp)
 2017410:	18800c26 	beq	r3,r2,2017444 <alt_load_section+0x54>
  {
    while( to != end )
 2017414:	00000806 	br	2017438 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2017418:	e0bffe17 	ldw	r2,-8(fp)
 201741c:	10c00104 	addi	r3,r2,4
 2017420:	e0fffe15 	stw	r3,-8(fp)
 2017424:	e0fffd17 	ldw	r3,-12(fp)
 2017428:	19000104 	addi	r4,r3,4
 201742c:	e13ffd15 	stw	r4,-12(fp)
 2017430:	18c00017 	ldw	r3,0(r3)
 2017434:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2017438:	e0fffe17 	ldw	r3,-8(fp)
 201743c:	e0bfff17 	ldw	r2,-4(fp)
 2017440:	18bff51e 	bne	r3,r2,2017418 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2017444:	0001883a 	nop
 2017448:	e037883a 	mov	sp,fp
 201744c:	df000017 	ldw	fp,0(sp)
 2017450:	dec00104 	addi	sp,sp,4
 2017454:	f800283a 	ret

02017458 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2017458:	defffe04 	addi	sp,sp,-8
 201745c:	dfc00115 	stw	ra,4(sp)
 2017460:	df000015 	stw	fp,0(sp)
 2017464:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2017468:	018080b4 	movhi	r6,514
 201746c:	31945804 	addi	r6,r6,20832
 2017470:	014080b4 	movhi	r5,514
 2017474:	294d3404 	addi	r5,r5,13520
 2017478:	010080b4 	movhi	r4,514
 201747c:	21145804 	addi	r4,r4,20832
 2017480:	20173f00 	call	20173f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2017484:	01808034 	movhi	r6,512
 2017488:	31809204 	addi	r6,r6,584
 201748c:	01408034 	movhi	r5,512
 2017490:	29400804 	addi	r5,r5,32
 2017494:	01008034 	movhi	r4,512
 2017498:	21000804 	addi	r4,r4,32
 201749c:	20173f00 	call	20173f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20174a0:	018080b4 	movhi	r6,514
 20174a4:	318d3404 	addi	r6,r6,13520
 20174a8:	014080b4 	movhi	r5,514
 20174ac:	294a3104 	addi	r5,r5,10436
 20174b0:	010080b4 	movhi	r4,514
 20174b4:	210a3104 	addi	r4,r4,10436
 20174b8:	20173f00 	call	20173f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20174bc:	202138c0 	call	202138c <alt_dcache_flush_all>
  alt_icache_flush_all();
 20174c0:	20216040 	call	2021604 <alt_icache_flush_all>
}
 20174c4:	0001883a 	nop
 20174c8:	e037883a 	mov	sp,fp
 20174cc:	dfc00117 	ldw	ra,4(sp)
 20174d0:	df000017 	ldw	fp,0(sp)
 20174d4:	dec00204 	addi	sp,sp,8
 20174d8:	f800283a 	ret

020174dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20174dc:	defffe04 	addi	sp,sp,-8
 20174e0:	dfc00115 	stw	ra,4(sp)
 20174e4:	df000015 	stw	fp,0(sp)
 20174e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20174ec:	d0a03b17 	ldw	r2,-32532(gp)
 20174f0:	10000326 	beq	r2,zero,2017500 <alt_get_errno+0x24>
 20174f4:	d0a03b17 	ldw	r2,-32532(gp)
 20174f8:	103ee83a 	callr	r2
 20174fc:	00000106 	br	2017504 <alt_get_errno+0x28>
 2017500:	d0a79e04 	addi	r2,gp,-24968
}
 2017504:	e037883a 	mov	sp,fp
 2017508:	dfc00117 	ldw	ra,4(sp)
 201750c:	df000017 	ldw	fp,0(sp)
 2017510:	dec00204 	addi	sp,sp,8
 2017514:	f800283a 	ret

02017518 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2017518:	defff904 	addi	sp,sp,-28
 201751c:	dfc00615 	stw	ra,24(sp)
 2017520:	df000515 	stw	fp,20(sp)
 2017524:	df000504 	addi	fp,sp,20
 2017528:	e13ffd15 	stw	r4,-12(fp)
 201752c:	e17ffe15 	stw	r5,-8(fp)
 2017530:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2017534:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2017538:	e0bffd17 	ldw	r2,-12(fp)
 201753c:	10000616 	blt	r2,zero,2017558 <lseek+0x40>
 2017540:	e0bffd17 	ldw	r2,-12(fp)
 2017544:	10c00324 	muli	r3,r2,12
 2017548:	008080b4 	movhi	r2,514
 201754c:	108f7304 	addi	r2,r2,15820
 2017550:	1885883a 	add	r2,r3,r2
 2017554:	00000106 	br	201755c <lseek+0x44>
 2017558:	0005883a 	mov	r2,zero
 201755c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2017560:	e0bffc17 	ldw	r2,-16(fp)
 2017564:	10001026 	beq	r2,zero,20175a8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2017568:	e0bffc17 	ldw	r2,-16(fp)
 201756c:	10800017 	ldw	r2,0(r2)
 2017570:	10800717 	ldw	r2,28(r2)
 2017574:	10000926 	beq	r2,zero,201759c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2017578:	e0bffc17 	ldw	r2,-16(fp)
 201757c:	10800017 	ldw	r2,0(r2)
 2017580:	10800717 	ldw	r2,28(r2)
 2017584:	e1bfff17 	ldw	r6,-4(fp)
 2017588:	e17ffe17 	ldw	r5,-8(fp)
 201758c:	e13ffc17 	ldw	r4,-16(fp)
 2017590:	103ee83a 	callr	r2
 2017594:	e0bffb15 	stw	r2,-20(fp)
 2017598:	00000506 	br	20175b0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 201759c:	00bfde84 	movi	r2,-134
 20175a0:	e0bffb15 	stw	r2,-20(fp)
 20175a4:	00000206 	br	20175b0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 20175a8:	00bfebc4 	movi	r2,-81
 20175ac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 20175b0:	e0bffb17 	ldw	r2,-20(fp)
 20175b4:	1000070e 	bge	r2,zero,20175d4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 20175b8:	20174dc0 	call	20174dc <alt_get_errno>
 20175bc:	1007883a 	mov	r3,r2
 20175c0:	e0bffb17 	ldw	r2,-20(fp)
 20175c4:	0085c83a 	sub	r2,zero,r2
 20175c8:	18800015 	stw	r2,0(r3)
    rc = -1;
 20175cc:	00bfffc4 	movi	r2,-1
 20175d0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20175d4:	e0bffb17 	ldw	r2,-20(fp)
}
 20175d8:	e037883a 	mov	sp,fp
 20175dc:	dfc00117 	ldw	ra,4(sp)
 20175e0:	df000017 	ldw	fp,0(sp)
 20175e4:	dec00204 	addi	sp,sp,8
 20175e8:	f800283a 	ret

020175ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20175ec:	defff904 	addi	sp,sp,-28
 20175f0:	dfc00615 	stw	ra,24(sp)
 20175f4:	df000515 	stw	fp,20(sp)
 20175f8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20175fc:	0009883a 	mov	r4,zero
 2017600:	201fff80 	call	201fff8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2017604:	20185a80 	call	20185a8 <OSInit>
 2017608:	01000044 	movi	r4,1
 201760c:	201d9c00 	call	201d9c0 <OSSemCreate>
 2017610:	d0a7a415 	stw	r2,-24944(gp)
 2017614:	01000044 	movi	r4,1
 2017618:	201d9c00 	call	201d9c0 <OSSemCreate>
 201761c:	d0a7a615 	stw	r2,-24936(gp)
 2017620:	d0a79f04 	addi	r2,gp,-24964
 2017624:	e0bffc15 	stw	r2,-16(fp)
 2017628:	00800044 	movi	r2,1
 201762c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 2017630:	e0bffd0b 	ldhu	r2,-12(fp)
 2017634:	1009883a 	mov	r4,r2
 2017638:	201d9c00 	call	201d9c0 <OSSemCreate>
 201763c:	1007883a 	mov	r3,r2
 2017640:	e0bffc17 	ldw	r2,-16(fp)
 2017644:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2017648:	20200300 	call	2020030 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 201764c:	018080b4 	movhi	r6,514
 2017650:	318cdc04 	addi	r6,r6,13168
 2017654:	014080b4 	movhi	r5,514
 2017658:	294cdc04 	addi	r5,r5,13168
 201765c:	010080b4 	movhi	r4,514
 2017660:	210cdc04 	addi	r4,r4,13168
 2017664:	20216fc0 	call	20216fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2017668:	20214b40 	call	20214b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 201766c:	010080b4 	movhi	r4,514
 2017670:	21054504 	addi	r4,r4,5396
 2017674:	202237c0 	call	202237c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2017678:	d0a7a017 	ldw	r2,-24960(gp)
 201767c:	d0e7a117 	ldw	r3,-24956(gp)
 2017680:	d127a217 	ldw	r4,-24952(gp)
 2017684:	200d883a 	mov	r6,r4
 2017688:	180b883a 	mov	r5,r3
 201768c:	1009883a 	mov	r4,r2
 2017690:	200373c0 	call	200373c <main>
 2017694:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 2017698:	01000044 	movi	r4,1
 201769c:	20171280 	call	2017128 <close>
  exit (result);
 20176a0:	e13ffb17 	ldw	r4,-20(fp)
 20176a4:	20223b80 	call	20223b8 <exit>

020176a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20176a8:	defffe04 	addi	sp,sp,-8
 20176ac:	dfc00115 	stw	ra,4(sp)
 20176b0:	df000015 	stw	fp,0(sp)
 20176b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20176b8:	d0a03b17 	ldw	r2,-32532(gp)
 20176bc:	10000326 	beq	r2,zero,20176cc <alt_get_errno+0x24>
 20176c0:	d0a03b17 	ldw	r2,-32532(gp)
 20176c4:	103ee83a 	callr	r2
 20176c8:	00000106 	br	20176d0 <alt_get_errno+0x28>
 20176cc:	d0a79e04 	addi	r2,gp,-24968
}
 20176d0:	e037883a 	mov	sp,fp
 20176d4:	dfc00117 	ldw	ra,4(sp)
 20176d8:	df000017 	ldw	fp,0(sp)
 20176dc:	dec00204 	addi	sp,sp,8
 20176e0:	f800283a 	ret

020176e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20176e4:	defff904 	addi	sp,sp,-28
 20176e8:	dfc00615 	stw	ra,24(sp)
 20176ec:	df000515 	stw	fp,20(sp)
 20176f0:	df000504 	addi	fp,sp,20
 20176f4:	e13ffd15 	stw	r4,-12(fp)
 20176f8:	e17ffe15 	stw	r5,-8(fp)
 20176fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2017700:	e0bffd17 	ldw	r2,-12(fp)
 2017704:	10000616 	blt	r2,zero,2017720 <read+0x3c>
 2017708:	e0bffd17 	ldw	r2,-12(fp)
 201770c:	10c00324 	muli	r3,r2,12
 2017710:	008080b4 	movhi	r2,514
 2017714:	108f7304 	addi	r2,r2,15820
 2017718:	1885883a 	add	r2,r3,r2
 201771c:	00000106 	br	2017724 <read+0x40>
 2017720:	0005883a 	mov	r2,zero
 2017724:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2017728:	e0bffb17 	ldw	r2,-20(fp)
 201772c:	10002226 	beq	r2,zero,20177b8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2017730:	e0bffb17 	ldw	r2,-20(fp)
 2017734:	10800217 	ldw	r2,8(r2)
 2017738:	108000cc 	andi	r2,r2,3
 201773c:	10800060 	cmpeqi	r2,r2,1
 2017740:	1000181e 	bne	r2,zero,20177a4 <read+0xc0>
        (fd->dev->read))
 2017744:	e0bffb17 	ldw	r2,-20(fp)
 2017748:	10800017 	ldw	r2,0(r2)
 201774c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2017750:	10001426 	beq	r2,zero,20177a4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2017754:	e0bffb17 	ldw	r2,-20(fp)
 2017758:	10800017 	ldw	r2,0(r2)
 201775c:	10800517 	ldw	r2,20(r2)
 2017760:	e0ffff17 	ldw	r3,-4(fp)
 2017764:	180d883a 	mov	r6,r3
 2017768:	e17ffe17 	ldw	r5,-8(fp)
 201776c:	e13ffb17 	ldw	r4,-20(fp)
 2017770:	103ee83a 	callr	r2
 2017774:	e0bffc15 	stw	r2,-16(fp)
 2017778:	e0bffc17 	ldw	r2,-16(fp)
 201777c:	1000070e 	bge	r2,zero,201779c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 2017780:	20176a80 	call	20176a8 <alt_get_errno>
 2017784:	1007883a 	mov	r3,r2
 2017788:	e0bffc17 	ldw	r2,-16(fp)
 201778c:	0085c83a 	sub	r2,zero,r2
 2017790:	18800015 	stw	r2,0(r3)
          return -1;
 2017794:	00bfffc4 	movi	r2,-1
 2017798:	00000c06 	br	20177cc <read+0xe8>
        }
        return rval;
 201779c:	e0bffc17 	ldw	r2,-16(fp)
 20177a0:	00000a06 	br	20177cc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 20177a4:	20176a80 	call	20176a8 <alt_get_errno>
 20177a8:	1007883a 	mov	r3,r2
 20177ac:	00800344 	movi	r2,13
 20177b0:	18800015 	stw	r2,0(r3)
 20177b4:	00000406 	br	20177c8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20177b8:	20176a80 	call	20176a8 <alt_get_errno>
 20177bc:	1007883a 	mov	r3,r2
 20177c0:	00801444 	movi	r2,81
 20177c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20177c8:	00bfffc4 	movi	r2,-1
}
 20177cc:	e037883a 	mov	sp,fp
 20177d0:	dfc00117 	ldw	ra,4(sp)
 20177d4:	df000017 	ldw	fp,0(sp)
 20177d8:	dec00204 	addi	sp,sp,8
 20177dc:	f800283a 	ret

020177e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20177e0:	defffe04 	addi	sp,sp,-8
 20177e4:	df000115 	stw	fp,4(sp)
 20177e8:	df000104 	addi	fp,sp,4
 20177ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 20177f0:	e0bfff17 	ldw	r2,-4(fp)
 20177f4:	108000d0 	cmplti	r2,r2,3
 20177f8:	10000d1e 	bne	r2,zero,2017830 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 20177fc:	008080b4 	movhi	r2,514
 2017800:	108f7304 	addi	r2,r2,15820
 2017804:	e0ffff17 	ldw	r3,-4(fp)
 2017808:	18c00324 	muli	r3,r3,12
 201780c:	10c5883a 	add	r2,r2,r3
 2017810:	10800204 	addi	r2,r2,8
 2017814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2017818:	008080b4 	movhi	r2,514
 201781c:	108f7304 	addi	r2,r2,15820
 2017820:	e0ffff17 	ldw	r3,-4(fp)
 2017824:	18c00324 	muli	r3,r3,12
 2017828:	10c5883a 	add	r2,r2,r3
 201782c:	10000015 	stw	zero,0(r2)
  }
}
 2017830:	0001883a 	nop
 2017834:	e037883a 	mov	sp,fp
 2017838:	df000017 	ldw	fp,0(sp)
 201783c:	dec00104 	addi	sp,sp,4
 2017840:	f800283a 	ret

02017844 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2017844:	defff904 	addi	sp,sp,-28
 2017848:	df000615 	stw	fp,24(sp)
 201784c:	df000604 	addi	fp,sp,24
 2017850:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017854:	0005303a 	rdctl	r2,status
 2017858:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201785c:	e0fffe17 	ldw	r3,-8(fp)
 2017860:	00bfff84 	movi	r2,-2
 2017864:	1884703a 	and	r2,r3,r2
 2017868:	1001703a 	wrctl	status,r2
  
  return context;
 201786c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2017870:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2017874:	d0a03c17 	ldw	r2,-32528(gp)
 2017878:	10c000c4 	addi	r3,r2,3
 201787c:	00bfff04 	movi	r2,-4
 2017880:	1884703a 	and	r2,r3,r2
 2017884:	d0a03c15 	stw	r2,-32528(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2017888:	d0e03c17 	ldw	r3,-32528(gp)
 201788c:	e0bfff17 	ldw	r2,-4(fp)
 2017890:	1887883a 	add	r3,r3,r2
 2017894:	00810034 	movhi	r2,1024
 2017898:	10800004 	addi	r2,r2,0
 201789c:	10c0062e 	bgeu	r2,r3,20178b8 <sbrk+0x74>
 20178a0:	e0bffb17 	ldw	r2,-20(fp)
 20178a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20178a8:	e0bffa17 	ldw	r2,-24(fp)
 20178ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20178b0:	00bfffc4 	movi	r2,-1
 20178b4:	00000b06 	br	20178e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 20178b8:	d0a03c17 	ldw	r2,-32528(gp)
 20178bc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 20178c0:	d0e03c17 	ldw	r3,-32528(gp)
 20178c4:	e0bfff17 	ldw	r2,-4(fp)
 20178c8:	1885883a 	add	r2,r3,r2
 20178cc:	d0a03c15 	stw	r2,-32528(gp)
 20178d0:	e0bffb17 	ldw	r2,-20(fp)
 20178d4:	e0bffc15 	stw	r2,-16(fp)
 20178d8:	e0bffc17 	ldw	r2,-16(fp)
 20178dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20178e0:	e0bffd17 	ldw	r2,-12(fp)
} 
 20178e4:	e037883a 	mov	sp,fp
 20178e8:	df000017 	ldw	fp,0(sp)
 20178ec:	dec00104 	addi	sp,sp,4
 20178f0:	f800283a 	ret

020178f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20178f4:	defffe04 	addi	sp,sp,-8
 20178f8:	dfc00115 	stw	ra,4(sp)
 20178fc:	df000015 	stw	fp,0(sp)
 2017900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2017904:	d0a03b17 	ldw	r2,-32532(gp)
 2017908:	10000326 	beq	r2,zero,2017918 <alt_get_errno+0x24>
 201790c:	d0a03b17 	ldw	r2,-32532(gp)
 2017910:	103ee83a 	callr	r2
 2017914:	00000106 	br	201791c <alt_get_errno+0x28>
 2017918:	d0a79e04 	addi	r2,gp,-24968
}
 201791c:	e037883a 	mov	sp,fp
 2017920:	dfc00117 	ldw	ra,4(sp)
 2017924:	df000017 	ldw	fp,0(sp)
 2017928:	dec00204 	addi	sp,sp,8
 201792c:	f800283a 	ret

02017930 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2017930:	defff904 	addi	sp,sp,-28
 2017934:	dfc00615 	stw	ra,24(sp)
 2017938:	df000515 	stw	fp,20(sp)
 201793c:	df000504 	addi	fp,sp,20
 2017940:	e13ffd15 	stw	r4,-12(fp)
 2017944:	e17ffe15 	stw	r5,-8(fp)
 2017948:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201794c:	e0bffd17 	ldw	r2,-12(fp)
 2017950:	10000616 	blt	r2,zero,201796c <write+0x3c>
 2017954:	e0bffd17 	ldw	r2,-12(fp)
 2017958:	10c00324 	muli	r3,r2,12
 201795c:	008080b4 	movhi	r2,514
 2017960:	108f7304 	addi	r2,r2,15820
 2017964:	1885883a 	add	r2,r3,r2
 2017968:	00000106 	br	2017970 <write+0x40>
 201796c:	0005883a 	mov	r2,zero
 2017970:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2017974:	e0bffb17 	ldw	r2,-20(fp)
 2017978:	10002126 	beq	r2,zero,2017a00 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 201797c:	e0bffb17 	ldw	r2,-20(fp)
 2017980:	10800217 	ldw	r2,8(r2)
 2017984:	108000cc 	andi	r2,r2,3
 2017988:	10001826 	beq	r2,zero,20179ec <write+0xbc>
 201798c:	e0bffb17 	ldw	r2,-20(fp)
 2017990:	10800017 	ldw	r2,0(r2)
 2017994:	10800617 	ldw	r2,24(r2)
 2017998:	10001426 	beq	r2,zero,20179ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 201799c:	e0bffb17 	ldw	r2,-20(fp)
 20179a0:	10800017 	ldw	r2,0(r2)
 20179a4:	10800617 	ldw	r2,24(r2)
 20179a8:	e0ffff17 	ldw	r3,-4(fp)
 20179ac:	180d883a 	mov	r6,r3
 20179b0:	e17ffe17 	ldw	r5,-8(fp)
 20179b4:	e13ffb17 	ldw	r4,-20(fp)
 20179b8:	103ee83a 	callr	r2
 20179bc:	e0bffc15 	stw	r2,-16(fp)
 20179c0:	e0bffc17 	ldw	r2,-16(fp)
 20179c4:	1000070e 	bge	r2,zero,20179e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 20179c8:	20178f40 	call	20178f4 <alt_get_errno>
 20179cc:	1007883a 	mov	r3,r2
 20179d0:	e0bffc17 	ldw	r2,-16(fp)
 20179d4:	0085c83a 	sub	r2,zero,r2
 20179d8:	18800015 	stw	r2,0(r3)
        return -1;
 20179dc:	00bfffc4 	movi	r2,-1
 20179e0:	00000c06 	br	2017a14 <write+0xe4>
      }
      return rval;
 20179e4:	e0bffc17 	ldw	r2,-16(fp)
 20179e8:	00000a06 	br	2017a14 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20179ec:	20178f40 	call	20178f4 <alt_get_errno>
 20179f0:	1007883a 	mov	r3,r2
 20179f4:	00800344 	movi	r2,13
 20179f8:	18800015 	stw	r2,0(r3)
 20179fc:	00000406 	br	2017a10 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2017a00:	20178f40 	call	20178f4 <alt_get_errno>
 2017a04:	1007883a 	mov	r3,r2
 2017a08:	00801444 	movi	r2,81
 2017a0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2017a10:	00bfffc4 	movi	r2,-1
}
 2017a14:	e037883a 	mov	sp,fp
 2017a18:	dfc00117 	ldw	ra,4(sp)
 2017a1c:	df000017 	ldw	fp,0(sp)
 2017a20:	dec00204 	addi	sp,sp,8
 2017a24:	f800283a 	ret

02017a28 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2017a28:	deffdf04 	addi	sp,sp,-132
 2017a2c:	dfc02015 	stw	ra,128(sp)
 2017a30:	df001f15 	stw	fp,124(sp)
 2017a34:	df001f04 	addi	fp,sp,124
 2017a38:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2017a3c:	e0bfe204 	addi	r2,fp,-120
 2017a40:	100b883a 	mov	r5,r2
 2017a44:	01003fc4 	movi	r4,255
 2017a48:	201f9480 	call	201f948 <OSTaskQuery>
 2017a4c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2017a50:	e0bffe83 	ldbu	r2,-6(fp)
 2017a54:	10803fcc 	andi	r2,r2,255
 2017a58:	10001e1e 	bne	r2,zero,2017ad4 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2017a5c:	e0bfee83 	ldbu	r2,-70(fp)
 2017a60:	10803fcc 	andi	r2,r2,255
 2017a64:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2017a68:	d0a7a417 	ldw	r2,-24944(gp)
 2017a6c:	e0fffd04 	addi	r3,fp,-12
 2017a70:	180b883a 	mov	r5,r3
 2017a74:	1009883a 	mov	r4,r2
 2017a78:	201e1600 	call	201e160 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2017a7c:	e0bffe43 	ldbu	r2,-7(fp)
 2017a80:	10803fcc 	andi	r2,r2,255
 2017a84:	10000726 	beq	r2,zero,2017aa4 <__env_lock+0x7c>
 2017a88:	d0a03d17 	ldw	r2,-32524(gp)
 2017a8c:	e0ffe117 	ldw	r3,-124(fp)
 2017a90:	1880041e 	bne	r3,r2,2017aa4 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2017a94:	d0a7a317 	ldw	r2,-24948(gp)
 2017a98:	10800044 	addi	r2,r2,1
 2017a9c:	d0a7a315 	stw	r2,-24948(gp)
 2017aa0:	00000a06 	br	2017acc <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2017aa4:	d0a7a417 	ldw	r2,-24944(gp)
 2017aa8:	e0fffe84 	addi	r3,fp,-6
 2017aac:	180d883a 	mov	r6,r3
 2017ab0:	000b883a 	mov	r5,zero
 2017ab4:	1009883a 	mov	r4,r2
 2017ab8:	201dcd80 	call	201dcd8 <OSSemPend>
    locks  = 1;
 2017abc:	00800044 	movi	r2,1
 2017ac0:	d0a7a315 	stw	r2,-24948(gp)
    lockid = id;
 2017ac4:	e0bfe117 	ldw	r2,-124(fp)
 2017ac8:	d0a03d15 	stw	r2,-32524(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2017acc:	0001883a 	nop
 2017ad0:	00000106 	br	2017ad8 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2017ad4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2017ad8:	e037883a 	mov	sp,fp
 2017adc:	dfc00117 	ldw	ra,4(sp)
 2017ae0:	df000017 	ldw	fp,0(sp)
 2017ae4:	dec00204 	addi	sp,sp,8
 2017ae8:	f800283a 	ret

02017aec <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2017aec:	defffd04 	addi	sp,sp,-12
 2017af0:	dfc00215 	stw	ra,8(sp)
 2017af4:	df000115 	stw	fp,4(sp)
 2017af8:	df000104 	addi	fp,sp,4
 2017afc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2017b00:	d0a7a317 	ldw	r2,-24948(gp)
 2017b04:	10000b26 	beq	r2,zero,2017b34 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2017b08:	d0a7a317 	ldw	r2,-24948(gp)
 2017b0c:	10bfffc4 	addi	r2,r2,-1
 2017b10:	d0a7a315 	stw	r2,-24948(gp)
 2017b14:	d0a7a317 	ldw	r2,-24948(gp)
 2017b18:	1000071e 	bne	r2,zero,2017b38 <__env_unlock+0x4c>
  {
    lockid = -1;
 2017b1c:	00bfffc4 	movi	r2,-1
 2017b20:	d0a03d15 	stw	r2,-32524(gp)
    OSSemPost( alt_envsem );
 2017b24:	d0a7a417 	ldw	r2,-24944(gp)
 2017b28:	1009883a 	mov	r4,r2
 2017b2c:	201e0500 	call	201e050 <OSSemPost>
 2017b30:	00000106 	br	2017b38 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2017b34:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2017b38:	e037883a 	mov	sp,fp
 2017b3c:	dfc00117 	ldw	ra,4(sp)
 2017b40:	df000017 	ldw	fp,0(sp)
 2017b44:	dec00204 	addi	sp,sp,8
 2017b48:	f800283a 	ret

02017b4c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2017b4c:	deffdb04 	addi	sp,sp,-148
 2017b50:	dfc02415 	stw	ra,144(sp)
 2017b54:	df002315 	stw	fp,140(sp)
 2017b58:	df002304 	addi	fp,sp,140
 2017b5c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017b60:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2017b64:	d0a7a743 	ldbu	r2,-24931(gp)
 2017b68:	10803fcc 	andi	r2,r2,255
 2017b6c:	10800060 	cmpeqi	r2,r2,1
 2017b70:	10003626 	beq	r2,zero,2017c4c <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2017b74:	e0bfe204 	addi	r2,fp,-120
 2017b78:	100b883a 	mov	r5,r2
 2017b7c:	01003fc4 	movi	r4,255
 2017b80:	201f9480 	call	201f948 <OSTaskQuery>
 2017b84:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2017b88:	e0bffe83 	ldbu	r2,-6(fp)
 2017b8c:	10803fcc 	andi	r2,r2,255
 2017b90:	1000301e 	bne	r2,zero,2017c54 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 2017b94:	e0bfee83 	ldbu	r2,-70(fp)
 2017b98:	10803fcc 	andi	r2,r2,255
 2017b9c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 2017ba0:	d0a7a617 	ldw	r2,-24936(gp)
 2017ba4:	e0fffd04 	addi	r3,fp,-12
 2017ba8:	180b883a 	mov	r5,r3
 2017bac:	1009883a 	mov	r4,r2
 2017bb0:	201e1600 	call	201e160 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017bb4:	0005303a 	rdctl	r2,status
 2017bb8:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017bbc:	e0ffe117 	ldw	r3,-124(fp)
 2017bc0:	00bfff84 	movi	r2,-2
 2017bc4:	1884703a 	and	r2,r3,r2
 2017bc8:	1001703a 	wrctl	status,r2
  
  return context;
 2017bcc:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 2017bd0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2017bd4:	e0bffd0b 	ldhu	r2,-12(fp)
 2017bd8:	10bfffcc 	andi	r2,r2,65535
 2017bdc:	10000b1e 	bne	r2,zero,2017c0c <__malloc_lock+0xc0>
 2017be0:	d0a03e17 	ldw	r2,-32520(gp)
 2017be4:	e0ffde17 	ldw	r3,-136(fp)
 2017be8:	1880081e 	bne	r3,r2,2017c0c <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 2017bec:	d0a7a517 	ldw	r2,-24940(gp)
 2017bf0:	10800044 	addi	r2,r2,1
 2017bf4:	d0a7a515 	stw	r2,-24940(gp)
 2017bf8:	e0bfdd17 	ldw	r2,-140(fp)
 2017bfc:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017c00:	e0bfdf17 	ldw	r2,-132(fp)
 2017c04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2017c08:	00000e06 	br	2017c44 <__malloc_lock+0xf8>
 2017c0c:	e0bfdd17 	ldw	r2,-140(fp)
 2017c10:	e0bfe015 	stw	r2,-128(fp)
 2017c14:	e0bfe017 	ldw	r2,-128(fp)
 2017c18:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2017c1c:	d0a7a617 	ldw	r2,-24936(gp)
 2017c20:	e0fffe84 	addi	r3,fp,-6
 2017c24:	180d883a 	mov	r6,r3
 2017c28:	000b883a 	mov	r5,zero
 2017c2c:	1009883a 	mov	r4,r2
 2017c30:	201dcd80 	call	201dcd8 <OSSemPend>
    locks  = 1;
 2017c34:	00800044 	movi	r2,1
 2017c38:	d0a7a515 	stw	r2,-24940(gp)
    lockid = id;
 2017c3c:	e0bfde17 	ldw	r2,-136(fp)
 2017c40:	d0a03e15 	stw	r2,-32520(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2017c44:	0001883a 	nop
 2017c48:	00000306 	br	2017c58 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 2017c4c:	0001883a 	nop
 2017c50:	00000106 	br	2017c58 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2017c54:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2017c58:	e037883a 	mov	sp,fp
 2017c5c:	dfc00117 	ldw	ra,4(sp)
 2017c60:	df000017 	ldw	fp,0(sp)
 2017c64:	dec00204 	addi	sp,sp,8
 2017c68:	f800283a 	ret

02017c6c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2017c6c:	defff804 	addi	sp,sp,-32
 2017c70:	dfc00715 	stw	ra,28(sp)
 2017c74:	df000615 	stw	fp,24(sp)
 2017c78:	df000604 	addi	fp,sp,24
 2017c7c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017c80:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2017c84:	d0a7a743 	ldbu	r2,-24931(gp)
 2017c88:	10803fcc 	andi	r2,r2,255
 2017c8c:	10800060 	cmpeqi	r2,r2,1
 2017c90:	10002326 	beq	r2,zero,2017d20 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017c94:	0005303a 	rdctl	r2,status
 2017c98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017c9c:	e0fffe17 	ldw	r3,-8(fp)
 2017ca0:	00bfff84 	movi	r2,-2
 2017ca4:	1884703a 	and	r2,r3,r2
 2017ca8:	1001703a 	wrctl	status,r2
  
  return context;
 2017cac:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 2017cb0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 2017cb4:	d0a7a517 	ldw	r2,-24940(gp)
 2017cb8:	1000051e 	bne	r2,zero,2017cd0 <__malloc_unlock+0x64>
 2017cbc:	e0bffa17 	ldw	r2,-24(fp)
 2017cc0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017cc4:	e0bffb17 	ldw	r2,-20(fp)
 2017cc8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 2017ccc:	00001506 	br	2017d24 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 2017cd0:	d0a7a517 	ldw	r2,-24940(gp)
 2017cd4:	10bfffc4 	addi	r2,r2,-1
 2017cd8:	d0a7a515 	stw	r2,-24940(gp)
 2017cdc:	d0a7a517 	ldw	r2,-24940(gp)
 2017ce0:	10000a1e 	bne	r2,zero,2017d0c <__malloc_unlock+0xa0>
  {
    lockid = -1;
 2017ce4:	00bfffc4 	movi	r2,-1
 2017ce8:	d0a03e15 	stw	r2,-32520(gp)
 2017cec:	e0bffa17 	ldw	r2,-24(fp)
 2017cf0:	e0bffc15 	stw	r2,-16(fp)
 2017cf4:	e0bffc17 	ldw	r2,-16(fp)
 2017cf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2017cfc:	d0a7a617 	ldw	r2,-24936(gp)
 2017d00:	1009883a 	mov	r4,r2
 2017d04:	201e0500 	call	201e050 <OSSemPost>
 2017d08:	00000606 	br	2017d24 <__malloc_unlock+0xb8>
 2017d0c:	e0bffa17 	ldw	r2,-24(fp)
 2017d10:	e0bffd15 	stw	r2,-12(fp)
 2017d14:	e0bffd17 	ldw	r2,-12(fp)
 2017d18:	1001703a 	wrctl	status,r2
 2017d1c:	00000106 	br	2017d24 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2017d20:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2017d24:	e037883a 	mov	sp,fp
 2017d28:	dfc00117 	ldw	ra,4(sp)
 2017d2c:	df000017 	ldw	fp,0(sp)
 2017d30:	dec00204 	addi	sp,sp,8
 2017d34:	f800283a 	ret

02017d38 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2017d38:	defff704 	addi	sp,sp,-36
 2017d3c:	dfc00815 	stw	ra,32(sp)
 2017d40:	df000715 	stw	fp,28(sp)
 2017d44:	df000704 	addi	fp,sp,28
 2017d48:	e13ffd15 	stw	r4,-12(fp)
 2017d4c:	e17ffe15 	stw	r5,-8(fp)
 2017d50:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017d54:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2017d58:	e0bfff17 	ldw	r2,-4(fp)
 2017d5c:	1000021e 	bne	r2,zero,2017d68 <OSEventNameGet+0x30>
        return (0);
 2017d60:	0005883a 	mov	r2,zero
 2017d64:	00003706 	br	2017e44 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2017d68:	e0bffd17 	ldw	r2,-12(fp)
 2017d6c:	1000051e 	bne	r2,zero,2017d84 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2017d70:	e0bfff17 	ldw	r2,-4(fp)
 2017d74:	00c00104 	movi	r3,4
 2017d78:	10c00005 	stb	r3,0(r2)
        return (0);
 2017d7c:	0005883a 	mov	r2,zero
 2017d80:	00003006 	br	2017e44 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2017d84:	e0bffe17 	ldw	r2,-8(fp)
 2017d88:	1000051e 	bne	r2,zero,2017da0 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2017d8c:	e0bfff17 	ldw	r2,-4(fp)
 2017d90:	00c00304 	movi	r3,12
 2017d94:	10c00005 	stb	r3,0(r2)
        return (0);
 2017d98:	0005883a 	mov	r2,zero
 2017d9c:	00002906 	br	2017e44 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2017da0:	d0a7b503 	ldbu	r2,-24876(gp)
 2017da4:	10803fcc 	andi	r2,r2,255
 2017da8:	10000526 	beq	r2,zero,2017dc0 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 2017dac:	e0bfff17 	ldw	r2,-4(fp)
 2017db0:	00c00444 	movi	r3,17
 2017db4:	10c00005 	stb	r3,0(r2)
        return (0);
 2017db8:	0005883a 	mov	r2,zero
 2017dbc:	00002106 	br	2017e44 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 2017dc0:	e0bffd17 	ldw	r2,-12(fp)
 2017dc4:	10800003 	ldbu	r2,0(r2)
 2017dc8:	10803fcc 	andi	r2,r2,255
 2017dcc:	10bfffc4 	addi	r2,r2,-1
 2017dd0:	10800128 	cmpgeui	r2,r2,4
 2017dd4:	10000526 	beq	r2,zero,2017dec <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2017dd8:	e0bfff17 	ldw	r2,-4(fp)
 2017ddc:	00c00044 	movi	r3,1
 2017de0:	10c00005 	stb	r3,0(r2)
             return (0);
 2017de4:	0005883a 	mov	r2,zero
 2017de8:	00001606 	br	2017e44 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2017dec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017df0:	0005303a 	rdctl	r2,status
 2017df4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017df8:	e0fffb17 	ldw	r3,-20(fp)
 2017dfc:	00bfff84 	movi	r2,-2
 2017e00:	1884703a 	and	r2,r3,r2
 2017e04:	1001703a 	wrctl	status,r2
  
  return context;
 2017e08:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2017e0c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2017e10:	e0bffd17 	ldw	r2,-12(fp)
 2017e14:	10800384 	addi	r2,r2,14
 2017e18:	100b883a 	mov	r5,r2
 2017e1c:	e13ffe17 	ldw	r4,-8(fp)
 2017e20:	20197bc0 	call	20197bc <OS_StrCopy>
 2017e24:	e0bffa05 	stb	r2,-24(fp)
 2017e28:	e0bff917 	ldw	r2,-28(fp)
 2017e2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017e30:	e0bffc17 	ldw	r2,-16(fp)
 2017e34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017e38:	e0bfff17 	ldw	r2,-4(fp)
 2017e3c:	10000005 	stb	zero,0(r2)
    return (len);
 2017e40:	e0bffa03 	ldbu	r2,-24(fp)
}
 2017e44:	e037883a 	mov	sp,fp
 2017e48:	dfc00117 	ldw	ra,4(sp)
 2017e4c:	df000017 	ldw	fp,0(sp)
 2017e50:	dec00204 	addi	sp,sp,8
 2017e54:	f800283a 	ret

02017e58 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2017e58:	defff604 	addi	sp,sp,-40
 2017e5c:	dfc00915 	stw	ra,36(sp)
 2017e60:	df000815 	stw	fp,32(sp)
 2017e64:	df000804 	addi	fp,sp,32
 2017e68:	e13ffd15 	stw	r4,-12(fp)
 2017e6c:	e17ffe15 	stw	r5,-8(fp)
 2017e70:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017e74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2017e78:	e0bfff17 	ldw	r2,-4(fp)
 2017e7c:	10004026 	beq	r2,zero,2017f80 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2017e80:	e0bffd17 	ldw	r2,-12(fp)
 2017e84:	1000041e 	bne	r2,zero,2017e98 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2017e88:	e0bfff17 	ldw	r2,-4(fp)
 2017e8c:	00c00104 	movi	r3,4
 2017e90:	10c00005 	stb	r3,0(r2)
        return;
 2017e94:	00003b06 	br	2017f84 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2017e98:	e0bffe17 	ldw	r2,-8(fp)
 2017e9c:	1000041e 	bne	r2,zero,2017eb0 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2017ea0:	e0bfff17 	ldw	r2,-4(fp)
 2017ea4:	00c00304 	movi	r3,12
 2017ea8:	10c00005 	stb	r3,0(r2)
        return;
 2017eac:	00003506 	br	2017f84 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2017eb0:	d0a7b503 	ldbu	r2,-24876(gp)
 2017eb4:	10803fcc 	andi	r2,r2,255
 2017eb8:	10000426 	beq	r2,zero,2017ecc <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2017ebc:	e0bfff17 	ldw	r2,-4(fp)
 2017ec0:	00c00484 	movi	r3,18
 2017ec4:	10c00005 	stb	r3,0(r2)
        return;
 2017ec8:	00002e06 	br	2017f84 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 2017ecc:	e0bffd17 	ldw	r2,-12(fp)
 2017ed0:	10800003 	ldbu	r2,0(r2)
 2017ed4:	10803fcc 	andi	r2,r2,255
 2017ed8:	10bfffc4 	addi	r2,r2,-1
 2017edc:	10800128 	cmpgeui	r2,r2,4
 2017ee0:	10000426 	beq	r2,zero,2017ef4 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2017ee4:	e0bfff17 	ldw	r2,-4(fp)
 2017ee8:	00c00044 	movi	r3,1
 2017eec:	10c00005 	stb	r3,0(r2)
             return;
 2017ef0:	00002406 	br	2017f84 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2017ef4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ef8:	0005303a 	rdctl	r2,status
 2017efc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017f00:	e0fffc17 	ldw	r3,-16(fp)
 2017f04:	00bfff84 	movi	r2,-2
 2017f08:	1884703a 	and	r2,r3,r2
 2017f0c:	1001703a 	wrctl	status,r2
  
  return context;
 2017f10:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2017f14:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2017f18:	e13ffe17 	ldw	r4,-8(fp)
 2017f1c:	20198300 	call	2019830 <OS_StrLen>
 2017f20:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2017f24:	e0bffa03 	ldbu	r2,-24(fp)
 2017f28:	10800830 	cmpltui	r2,r2,32
 2017f2c:	1000081e 	bne	r2,zero,2017f50 <OSEventNameSet+0xf8>
 2017f30:	e0bff817 	ldw	r2,-32(fp)
 2017f34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017f38:	e0bff917 	ldw	r2,-28(fp)
 2017f3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2017f40:	e0bfff17 	ldw	r2,-4(fp)
 2017f44:	00c002c4 	movi	r3,11
 2017f48:	10c00005 	stb	r3,0(r2)
        return;
 2017f4c:	00000d06 	br	2017f84 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2017f50:	e0bffd17 	ldw	r2,-12(fp)
 2017f54:	10800384 	addi	r2,r2,14
 2017f58:	e17ffe17 	ldw	r5,-8(fp)
 2017f5c:	1009883a 	mov	r4,r2
 2017f60:	20197bc0 	call	20197bc <OS_StrCopy>
 2017f64:	e0bff817 	ldw	r2,-32(fp)
 2017f68:	e0bffb15 	stw	r2,-20(fp)
 2017f6c:	e0bffb17 	ldw	r2,-20(fp)
 2017f70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017f74:	e0bfff17 	ldw	r2,-4(fp)
 2017f78:	10000005 	stb	zero,0(r2)
 2017f7c:	00000106 	br	2017f84 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2017f80:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2017f84:	e037883a 	mov	sp,fp
 2017f88:	dfc00117 	ldw	ra,4(sp)
 2017f8c:	df000017 	ldw	fp,0(sp)
 2017f90:	dec00204 	addi	sp,sp,8
 2017f94:	f800283a 	ret

02017f98 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 2017f98:	deffed04 	addi	sp,sp,-76
 2017f9c:	dfc01215 	stw	ra,72(sp)
 2017fa0:	df001115 	stw	fp,68(sp)
 2017fa4:	df001104 	addi	fp,sp,68
 2017fa8:	e13ffc15 	stw	r4,-16(fp)
 2017fac:	e17ffd15 	stw	r5,-12(fp)
 2017fb0:	e1bffe15 	stw	r6,-8(fp)
 2017fb4:	3805883a 	mov	r2,r7
 2017fb8:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 2017fbc:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 2017fc0:	e0800217 	ldw	r2,8(fp)
 2017fc4:	1000021e 	bne	r2,zero,2017fd0 <OSEventPendMulti+0x38>
        return (0);
 2017fc8:	0005883a 	mov	r2,zero
 2017fcc:	00017106 	br	2018594 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 2017fd0:	e0bffc17 	ldw	r2,-16(fp)
 2017fd4:	1000051e 	bne	r2,zero,2017fec <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 2017fd8:	e0800217 	ldw	r2,8(fp)
 2017fdc:	00c00104 	movi	r3,4
 2017fe0:	10c00005 	stb	r3,0(r2)
        return (0);
 2017fe4:	0005883a 	mov	r2,zero
 2017fe8:	00016a06 	br	2018594 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2017fec:	e0bffd17 	ldw	r2,-12(fp)
 2017ff0:	1000051e 	bne	r2,zero,2018008 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2017ff4:	e0800217 	ldw	r2,8(fp)
 2017ff8:	00c00104 	movi	r3,4
 2017ffc:	10c00005 	stb	r3,0(r2)
        return (0);
 2018000:	0005883a 	mov	r2,zero
 2018004:	00016306 	br	2018594 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 2018008:	e0bffe17 	ldw	r2,-8(fp)
 201800c:	1000051e 	bne	r2,zero,2018024 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2018010:	e0800217 	ldw	r2,8(fp)
 2018014:	00c00104 	movi	r3,4
 2018018:	10c00005 	stb	r3,0(r2)
        return (0);
 201801c:	0005883a 	mov	r2,zero
 2018020:	00015c06 	br	2018594 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2018024:	e0bffd17 	ldw	r2,-12(fp)
 2018028:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 201802c:	e0bffc17 	ldw	r2,-16(fp)
 2018030:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 2018034:	e0bfef17 	ldw	r2,-68(fp)
 2018038:	10800017 	ldw	r2,0(r2)
 201803c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 2018040:	00001906 	br	20180a8 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2018044:	e0bff017 	ldw	r2,-64(fp)
 2018048:	10800003 	ldbu	r2,0(r2)
 201804c:	10803fcc 	andi	r2,r2,255
 2018050:	10c000a0 	cmpeqi	r3,r2,2
 2018054:	1800091e 	bne	r3,zero,201807c <OSEventPendMulti+0xe4>
 2018058:	10c000e0 	cmpeqi	r3,r2,3
 201805c:	1800091e 	bne	r3,zero,2018084 <OSEventPendMulti+0xec>
 2018060:	10800060 	cmpeqi	r2,r2,1
 2018064:	1000091e 	bne	r2,zero,201808c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 2018068:	e0800217 	ldw	r2,8(fp)
 201806c:	00c00044 	movi	r3,1
 2018070:	10c00005 	stb	r3,0(r2)
                 return (0);
 2018074:	0005883a 	mov	r2,zero
 2018078:	00014606 	br	2018594 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 201807c:	0001883a 	nop
 2018080:	00000306 	br	2018090 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 2018084:	0001883a 	nop
 2018088:	00000106 	br	2018090 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 201808c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 2018090:	e0bfef17 	ldw	r2,-68(fp)
 2018094:	10800104 	addi	r2,r2,4
 2018098:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 201809c:	e0bfef17 	ldw	r2,-68(fp)
 20180a0:	10800017 	ldw	r2,0(r2)
 20180a4:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 20180a8:	e0bff017 	ldw	r2,-64(fp)
 20180ac:	103fe51e 	bne	r2,zero,2018044 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 20180b0:	d0a7b503 	ldbu	r2,-24876(gp)
 20180b4:	10803fcc 	andi	r2,r2,255
 20180b8:	10000526 	beq	r2,zero,20180d0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 20180bc:	e0800217 	ldw	r2,8(fp)
 20180c0:	00c00084 	movi	r3,2
 20180c4:	10c00005 	stb	r3,0(r2)
        return (0);
 20180c8:	0005883a 	mov	r2,zero
 20180cc:	00013106 	br	2018594 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 20180d0:	d0a7a703 	ldbu	r2,-24932(gp)
 20180d4:	10803fcc 	andi	r2,r2,255
 20180d8:	10000526 	beq	r2,zero,20180f0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 20180dc:	e0800217 	ldw	r2,8(fp)
 20180e0:	00c00344 	movi	r3,13
 20180e4:	10c00005 	stb	r3,0(r2)
        return (0);
 20180e8:	0005883a 	mov	r2,zero
 20180ec:	00012906 	br	2018594 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20180f0:	0005303a 	rdctl	r2,status
 20180f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20180f8:	e0fffb17 	ldw	r3,-20(fp)
 20180fc:	00bfff84 	movi	r2,-2
 2018100:	1884703a 	and	r2,r3,r2
 2018104:	1001703a 	wrctl	status,r2
  
  return context;
 2018108:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201810c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 2018110:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2018114:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 2018118:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 201811c:	e0bffc17 	ldw	r2,-16(fp)
 2018120:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2018124:	e0bfef17 	ldw	r2,-68(fp)
 2018128:	10800017 	ldw	r2,0(r2)
 201812c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2018130:	00008106 	br	2018338 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 2018134:	e0bff017 	ldw	r2,-64(fp)
 2018138:	10800003 	ldbu	r2,0(r2)
 201813c:	10803fcc 	andi	r2,r2,255
 2018140:	10c000a0 	cmpeqi	r3,r2,2
 2018144:	18003c1e 	bne	r3,zero,2018238 <OSEventPendMulti+0x2a0>
 2018148:	10c000e0 	cmpeqi	r3,r2,3
 201814c:	1800031e 	bne	r3,zero,201815c <OSEventPendMulti+0x1c4>
 2018150:	10800060 	cmpeqi	r2,r2,1
 2018154:	10001e1e 	bne	r2,zero,20181d0 <OSEventPendMulti+0x238>
 2018158:	00006606 	br	20182f4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 201815c:	e0bff017 	ldw	r2,-64(fp)
 2018160:	1080020b 	ldhu	r2,8(r2)
 2018164:	10bfffcc 	andi	r2,r2,65535
 2018168:	10001526 	beq	r2,zero,20181c0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 201816c:	e0bff017 	ldw	r2,-64(fp)
 2018170:	1080020b 	ldhu	r2,8(r2)
 2018174:	10bfffc4 	addi	r2,r2,-1
 2018178:	1007883a 	mov	r3,r2
 201817c:	e0bff017 	ldw	r2,-64(fp)
 2018180:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2018184:	e0bffd17 	ldw	r2,-12(fp)
 2018188:	10c00104 	addi	r3,r2,4
 201818c:	e0fffd15 	stw	r3,-12(fp)
 2018190:	e0fff017 	ldw	r3,-64(fp)
 2018194:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 2018198:	00800044 	movi	r2,1
 201819c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 20181a0:	e0bffe17 	ldw	r2,-8(fp)
 20181a4:	10c00104 	addi	r3,r2,4
 20181a8:	e0fffe15 	stw	r3,-8(fp)
 20181ac:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 20181b0:	e0bff18b 	ldhu	r2,-58(fp)
 20181b4:	10800044 	addi	r2,r2,1
 20181b8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 20181bc:	00005806 	br	2018320 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 20181c0:	e0bff203 	ldbu	r2,-56(fp)
 20181c4:	10800054 	ori	r2,r2,1
 20181c8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20181cc:	00005406 	br	2018320 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20181d0:	e0bff017 	ldw	r2,-64(fp)
 20181d4:	10800117 	ldw	r2,4(r2)
 20181d8:	10001326 	beq	r2,zero,2018228 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 20181dc:	e0bffe17 	ldw	r2,-8(fp)
 20181e0:	10c00104 	addi	r3,r2,4
 20181e4:	e0fffe15 	stw	r3,-8(fp)
 20181e8:	e0fff017 	ldw	r3,-64(fp)
 20181ec:	18c00117 	ldw	r3,4(r3)
 20181f0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 20181f4:	e0bff017 	ldw	r2,-64(fp)
 20181f8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 20181fc:	e0bffd17 	ldw	r2,-12(fp)
 2018200:	10c00104 	addi	r3,r2,4
 2018204:	e0fffd15 	stw	r3,-12(fp)
 2018208:	e0fff017 	ldw	r3,-64(fp)
 201820c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 2018210:	00800044 	movi	r2,1
 2018214:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2018218:	e0bff18b 	ldhu	r2,-58(fp)
 201821c:	10800044 	addi	r2,r2,1
 2018220:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2018224:	00003e06 	br	2018320 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 2018228:	e0bff203 	ldbu	r2,-56(fp)
 201822c:	10800094 	ori	r2,r2,2
 2018230:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2018234:	00003a06 	br	2018320 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 2018238:	e0bff017 	ldw	r2,-64(fp)
 201823c:	10800117 	ldw	r2,4(r2)
 2018240:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2018244:	e0bff517 	ldw	r2,-44(fp)
 2018248:	1080058b 	ldhu	r2,22(r2)
 201824c:	10bfffcc 	andi	r2,r2,65535
 2018250:	10002426 	beq	r2,zero,20182e4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2018254:	e0bffe17 	ldw	r2,-8(fp)
 2018258:	10c00104 	addi	r3,r2,4
 201825c:	e0fffe15 	stw	r3,-8(fp)
 2018260:	e0fff517 	ldw	r3,-44(fp)
 2018264:	18c00417 	ldw	r3,16(r3)
 2018268:	19400104 	addi	r5,r3,4
 201826c:	e13ff517 	ldw	r4,-44(fp)
 2018270:	21400415 	stw	r5,16(r4)
 2018274:	18c00017 	ldw	r3,0(r3)
 2018278:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 201827c:	e0bff517 	ldw	r2,-44(fp)
 2018280:	10c00417 	ldw	r3,16(r2)
 2018284:	e0bff517 	ldw	r2,-44(fp)
 2018288:	10800217 	ldw	r2,8(r2)
 201828c:	1880041e 	bne	r3,r2,20182a0 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 2018290:	e0bff517 	ldw	r2,-44(fp)
 2018294:	10c00117 	ldw	r3,4(r2)
 2018298:	e0bff517 	ldw	r2,-44(fp)
 201829c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 20182a0:	e0bff517 	ldw	r2,-44(fp)
 20182a4:	1080058b 	ldhu	r2,22(r2)
 20182a8:	10bfffc4 	addi	r2,r2,-1
 20182ac:	1007883a 	mov	r3,r2
 20182b0:	e0bff517 	ldw	r2,-44(fp)
 20182b4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 20182b8:	e0bffd17 	ldw	r2,-12(fp)
 20182bc:	10c00104 	addi	r3,r2,4
 20182c0:	e0fffd15 	stw	r3,-12(fp)
 20182c4:	e0fff017 	ldw	r3,-64(fp)
 20182c8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 20182cc:	00800044 	movi	r2,1
 20182d0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 20182d4:	e0bff18b 	ldhu	r2,-58(fp)
 20182d8:	10800044 	addi	r2,r2,1
 20182dc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 20182e0:	00000f06 	br	2018320 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 20182e4:	e0bff203 	ldbu	r2,-56(fp)
 20182e8:	10800114 	ori	r2,r2,4
 20182ec:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20182f0:	00000b06 	br	2018320 <OSEventPendMulti+0x388>
 20182f4:	e0bff317 	ldw	r2,-52(fp)
 20182f8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20182fc:	e0bff417 	ldw	r2,-48(fp)
 2018300:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2018304:	e0bffd17 	ldw	r2,-12(fp)
 2018308:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 201830c:	e0800217 	ldw	r2,8(fp)
 2018310:	00c00044 	movi	r3,1
 2018314:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 2018318:	e0bff18b 	ldhu	r2,-58(fp)
 201831c:	00009d06 	br	2018594 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 2018320:	e0bfef17 	ldw	r2,-68(fp)
 2018324:	10800104 	addi	r2,r2,4
 2018328:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 201832c:	e0bfef17 	ldw	r2,-68(fp)
 2018330:	10800017 	ldw	r2,0(r2)
 2018334:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2018338:	e0bff017 	ldw	r2,-64(fp)
 201833c:	103f7d1e 	bne	r2,zero,2018134 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 2018340:	e0bff103 	ldbu	r2,-60(fp)
 2018344:	10800058 	cmpnei	r2,r2,1
 2018348:	10000a1e 	bne	r2,zero,2018374 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 201834c:	e0bffd17 	ldw	r2,-12(fp)
 2018350:	10000015 	stw	zero,0(r2)
 2018354:	e0bff317 	ldw	r2,-52(fp)
 2018358:	e0bff615 	stw	r2,-40(fp)
 201835c:	e0bff617 	ldw	r2,-40(fp)
 2018360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2018364:	e0800217 	ldw	r2,8(fp)
 2018368:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 201836c:	e0bff18b 	ldhu	r2,-58(fp)
 2018370:	00008806 	br	2018594 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2018374:	d0a7b617 	ldw	r2,-24872(gp)
 2018378:	d0e7b617 	ldw	r3,-24872(gp)
 201837c:	19000c03 	ldbu	r4,48(r3)
 2018380:	e0fff203 	ldbu	r3,-56(fp)
 2018384:	20c6b03a 	or	r3,r4,r3
 2018388:	1809883a 	mov	r4,r3
 201838c:	00ffe004 	movi	r3,-128
 2018390:	20c6b03a 	or	r3,r4,r3
 2018394:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2018398:	d0a7b617 	ldw	r2,-24872(gp)
 201839c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 20183a0:	d0a7b617 	ldw	r2,-24872(gp)
 20183a4:	e0ffff0b 	ldhu	r3,-4(fp)
 20183a8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 20183ac:	e13ffc17 	ldw	r4,-16(fp)
 20183b0:	2018ed40 	call	2018ed4 <OS_EventTaskWaitMulti>
 20183b4:	e0bff317 	ldw	r2,-52(fp)
 20183b8:	e0bff915 	stw	r2,-28(fp)
 20183bc:	e0bff917 	ldw	r2,-28(fp)
 20183c0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 20183c4:	20196780 	call	2019678 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20183c8:	0005303a 	rdctl	r2,status
 20183cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20183d0:	e0fff717 	ldw	r3,-36(fp)
 20183d4:	00bfff84 	movi	r2,-2
 20183d8:	1884703a 	and	r2,r3,r2
 20183dc:	1001703a 	wrctl	status,r2
  
  return context;
 20183e0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 20183e4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 20183e8:	d0a7b617 	ldw	r2,-24872(gp)
 20183ec:	10800c43 	ldbu	r2,49(r2)
 20183f0:	10803fcc 	andi	r2,r2,255
 20183f4:	10000226 	beq	r2,zero,2018400 <OSEventPendMulti+0x468>
 20183f8:	108000a0 	cmpeqi	r2,r2,2
 20183fc:	10001826 	beq	r2,zero,2018460 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 2018400:	d0a7b617 	ldw	r2,-24872(gp)
 2018404:	10800717 	ldw	r2,28(r2)
 2018408:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 201840c:	e0bff017 	ldw	r2,-64(fp)
 2018410:	10000b26 	beq	r2,zero,2018440 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2018414:	e0bffd17 	ldw	r2,-12(fp)
 2018418:	10c00104 	addi	r3,r2,4
 201841c:	e0fffd15 	stw	r3,-12(fp)
 2018420:	e0fff017 	ldw	r3,-64(fp)
 2018424:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2018428:	e0bffd17 	ldw	r2,-12(fp)
 201842c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 2018430:	e0bff18b 	ldhu	r2,-58(fp)
 2018434:	10800044 	addi	r2,r2,1
 2018438:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 201843c:	00000d06 	br	2018474 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 2018440:	d0a7b617 	ldw	r2,-24872(gp)
 2018444:	00c00044 	movi	r3,1
 2018448:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 201844c:	d0a7b617 	ldw	r2,-24872(gp)
 2018450:	e17ffc17 	ldw	r5,-16(fp)
 2018454:	1009883a 	mov	r4,r2
 2018458:	20190dc0 	call	20190dc <OS_EventTaskRemoveMulti>
             }
			 break;
 201845c:	00000506 	br	2018474 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2018460:	d0a7b617 	ldw	r2,-24872(gp)
 2018464:	e17ffc17 	ldw	r5,-16(fp)
 2018468:	1009883a 	mov	r4,r2
 201846c:	20190dc0 	call	20190dc <OS_EventTaskRemoveMulti>
             break;
 2018470:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2018474:	d0a7b617 	ldw	r2,-24872(gp)
 2018478:	10800c43 	ldbu	r2,49(r2)
 201847c:	10803fcc 	andi	r2,r2,255
 2018480:	10000326 	beq	r2,zero,2018490 <OSEventPendMulti+0x4f8>
 2018484:	108000a0 	cmpeqi	r2,r2,2
 2018488:	1000231e 	bne	r2,zero,2018518 <OSEventPendMulti+0x580>
 201848c:	00002a06 	br	2018538 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 2018490:	e0bff017 	ldw	r2,-64(fp)
 2018494:	10800003 	ldbu	r2,0(r2)
 2018498:	10803fcc 	andi	r2,r2,255
 201849c:	0080100e 	bge	zero,r2,20184e0 <OSEventPendMulti+0x548>
 20184a0:	10c000d0 	cmplti	r3,r2,3
 20184a4:	1800071e 	bne	r3,zero,20184c4 <OSEventPendMulti+0x52c>
 20184a8:	108000e0 	cmpeqi	r2,r2,3
 20184ac:	10000c26 	beq	r2,zero,20184e0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 20184b0:	e0bffe17 	ldw	r2,-8(fp)
 20184b4:	10c00104 	addi	r3,r2,4
 20184b8:	e0fffe15 	stw	r3,-8(fp)
 20184bc:	10000015 	stw	zero,0(r2)
                      break;
 20184c0:	00001206 	br	201850c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 20184c4:	e0bffe17 	ldw	r2,-8(fp)
 20184c8:	10c00104 	addi	r3,r2,4
 20184cc:	e0fffe15 	stw	r3,-8(fp)
 20184d0:	d0e7b617 	ldw	r3,-24872(gp)
 20184d4:	18c00917 	ldw	r3,36(r3)
 20184d8:	10c00015 	stw	r3,0(r2)
                      break;
 20184dc:	00000b06 	br	201850c <OSEventPendMulti+0x574>
 20184e0:	e0bff317 	ldw	r2,-52(fp)
 20184e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20184e8:	e0bff817 	ldw	r2,-32(fp)
 20184ec:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 20184f0:	e0bffd17 	ldw	r2,-12(fp)
 20184f4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 20184f8:	e0800217 	ldw	r2,8(fp)
 20184fc:	00c00044 	movi	r3,1
 2018500:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 2018504:	e0bff18b 	ldhu	r2,-58(fp)
 2018508:	00002206 	br	2018594 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 201850c:	e0800217 	ldw	r2,8(fp)
 2018510:	10000005 	stb	zero,0(r2)
             break;
 2018514:	00001006 	br	2018558 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2018518:	e0bffe17 	ldw	r2,-8(fp)
 201851c:	10c00104 	addi	r3,r2,4
 2018520:	e0fffe15 	stw	r3,-8(fp)
 2018524:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2018528:	e0800217 	ldw	r2,8(fp)
 201852c:	00c00384 	movi	r3,14
 2018530:	10c00005 	stb	r3,0(r2)
             break;
 2018534:	00000806 	br	2018558 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2018538:	e0bffe17 	ldw	r2,-8(fp)
 201853c:	10c00104 	addi	r3,r2,4
 2018540:	e0fffe15 	stw	r3,-8(fp)
 2018544:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2018548:	e0800217 	ldw	r2,8(fp)
 201854c:	00c00284 	movi	r3,10
 2018550:	10c00005 	stb	r3,0(r2)
             break;
 2018554:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2018558:	d0a7b617 	ldw	r2,-24872(gp)
 201855c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2018560:	d0a7b617 	ldw	r2,-24872(gp)
 2018564:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2018568:	d0a7b617 	ldw	r2,-24872(gp)
 201856c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2018570:	d0a7b617 	ldw	r2,-24872(gp)
 2018574:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2018578:	d0a7b617 	ldw	r2,-24872(gp)
 201857c:	10000915 	stw	zero,36(r2)
 2018580:	e0bff317 	ldw	r2,-52(fp)
 2018584:	e0bffa15 	stw	r2,-24(fp)
 2018588:	e0bffa17 	ldw	r2,-24(fp)
 201858c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2018590:	e0bff18b 	ldhu	r2,-58(fp)
}
 2018594:	e037883a 	mov	sp,fp
 2018598:	dfc00117 	ldw	ra,4(sp)
 201859c:	df000017 	ldw	fp,0(sp)
 20185a0:	dec00204 	addi	sp,sp,8
 20185a4:	f800283a 	ret

020185a8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 20185a8:	defffe04 	addi	sp,sp,-8
 20185ac:	dfc00115 	stw	ra,4(sp)
 20185b0:	df000015 	stw	fp,0(sp)
 20185b4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 20185b8:	2021fe80 	call	2021fe8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 20185bc:	20193240 	call	2019324 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 20185c0:	201936c0 	call	201936c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 20185c4:	20194d80 	call	20194d8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 20185c8:	20192440 	call	2019244 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 20185cc:	201b3780 	call	201b378 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 20185d0:	201c7400 	call	201c740 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 20185d4:	201d8680 	call	201d868 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 20185d8:	20193d80 	call	20193d8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 20185dc:	20194580 	call	2019458 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 20185e0:	20220080 	call	2022008 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 20185e4:	2019d4c0 	call	2019d4c <OSDebugInit>
#endif
}
 20185e8:	0001883a 	nop
 20185ec:	e037883a 	mov	sp,fp
 20185f0:	dfc00117 	ldw	ra,4(sp)
 20185f4:	df000017 	ldw	fp,0(sp)
 20185f8:	dec00204 	addi	sp,sp,8
 20185fc:	f800283a 	ret

02018600 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 2018600:	deffff04 	addi	sp,sp,-4
 2018604:	df000015 	stw	fp,0(sp)
 2018608:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 201860c:	d0a7a743 	ldbu	r2,-24931(gp)
 2018610:	10803fcc 	andi	r2,r2,255
 2018614:	10800058 	cmpnei	r2,r2,1
 2018618:	1000071e 	bne	r2,zero,2018638 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 201861c:	d0a7b503 	ldbu	r2,-24876(gp)
 2018620:	10803fcc 	andi	r2,r2,255
 2018624:	10803fe0 	cmpeqi	r2,r2,255
 2018628:	1000031e 	bne	r2,zero,2018638 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 201862c:	d0a7b503 	ldbu	r2,-24876(gp)
 2018630:	10800044 	addi	r2,r2,1
 2018634:	d0a7b505 	stb	r2,-24876(gp)
        }
    }
}
 2018638:	0001883a 	nop
 201863c:	e037883a 	mov	sp,fp
 2018640:	df000017 	ldw	fp,0(sp)
 2018644:	dec00104 	addi	sp,sp,4
 2018648:	f800283a 	ret

0201864c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 201864c:	defffb04 	addi	sp,sp,-20
 2018650:	dfc00415 	stw	ra,16(sp)
 2018654:	df000315 	stw	fp,12(sp)
 2018658:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201865c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2018660:	d0a7a743 	ldbu	r2,-24931(gp)
 2018664:	10803fcc 	andi	r2,r2,255
 2018668:	10800058 	cmpnei	r2,r2,1
 201866c:	10002f1e 	bne	r2,zero,201872c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018670:	0005303a 	rdctl	r2,status
 2018674:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018678:	e0ffff17 	ldw	r3,-4(fp)
 201867c:	00bfff84 	movi	r2,-2
 2018680:	1884703a 	and	r2,r3,r2
 2018684:	1001703a 	wrctl	status,r2
  
  return context;
 2018688:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 201868c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2018690:	d0a7b503 	ldbu	r2,-24876(gp)
 2018694:	10803fcc 	andi	r2,r2,255
 2018698:	10000326 	beq	r2,zero,20186a8 <OSIntExit+0x5c>
            OSIntNesting--;
 201869c:	d0a7b503 	ldbu	r2,-24876(gp)
 20186a0:	10bfffc4 	addi	r2,r2,-1
 20186a4:	d0a7b505 	stb	r2,-24876(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 20186a8:	d0a7b503 	ldbu	r2,-24876(gp)
 20186ac:	10803fcc 	andi	r2,r2,255
 20186b0:	10001a1e 	bne	r2,zero,201871c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 20186b4:	d0a7a703 	ldbu	r2,-24932(gp)
 20186b8:	10803fcc 	andi	r2,r2,255
 20186bc:	1000171e 	bne	r2,zero,201871c <OSIntExit+0xd0>
                OS_SchedNew();
 20186c0:	20197480 	call	2019748 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 20186c4:	d0e7a903 	ldbu	r3,-24924(gp)
 20186c8:	d0a7a943 	ldbu	r2,-24923(gp)
 20186cc:	18c03fcc 	andi	r3,r3,255
 20186d0:	10803fcc 	andi	r2,r2,255
 20186d4:	18801126 	beq	r3,r2,201871c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 20186d8:	d0a7a903 	ldbu	r2,-24924(gp)
 20186dc:	10c03fcc 	andi	r3,r2,255
 20186e0:	008080f4 	movhi	r2,515
 20186e4:	10883704 	addi	r2,r2,8412
 20186e8:	18c7883a 	add	r3,r3,r3
 20186ec:	18c7883a 	add	r3,r3,r3
 20186f0:	10c5883a 	add	r2,r2,r3
 20186f4:	10800017 	ldw	r2,0(r2)
 20186f8:	d0a7b115 	stw	r2,-24892(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 20186fc:	d0a7b117 	ldw	r2,-24892(gp)
 2018700:	10c00e17 	ldw	r3,56(r2)
 2018704:	18c00044 	addi	r3,r3,1
 2018708:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 201870c:	d0a7ac17 	ldw	r2,-24912(gp)
 2018710:	10800044 	addi	r2,r2,1
 2018714:	d0a7ac15 	stw	r2,-24912(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2018718:	2021d140 	call	2021d14 <OSCtxSw>
 201871c:	e0bffd17 	ldw	r2,-12(fp)
 2018720:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018724:	e0bffe17 	ldw	r2,-8(fp)
 2018728:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 201872c:	0001883a 	nop
 2018730:	e037883a 	mov	sp,fp
 2018734:	dfc00117 	ldw	ra,4(sp)
 2018738:	df000017 	ldw	fp,0(sp)
 201873c:	dec00204 	addi	sp,sp,8
 2018740:	f800283a 	ret

02018744 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2018744:	defffc04 	addi	sp,sp,-16
 2018748:	df000315 	stw	fp,12(sp)
 201874c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018750:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2018754:	d0a7a743 	ldbu	r2,-24931(gp)
 2018758:	10803fcc 	andi	r2,r2,255
 201875c:	10800058 	cmpnei	r2,r2,1
 2018760:	1000161e 	bne	r2,zero,20187bc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018764:	0005303a 	rdctl	r2,status
 2018768:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201876c:	e0ffff17 	ldw	r3,-4(fp)
 2018770:	00bfff84 	movi	r2,-2
 2018774:	1884703a 	and	r2,r3,r2
 2018778:	1001703a 	wrctl	status,r2
  
  return context;
 201877c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2018780:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2018784:	d0a7b503 	ldbu	r2,-24876(gp)
 2018788:	10803fcc 	andi	r2,r2,255
 201878c:	1000071e 	bne	r2,zero,20187ac <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2018790:	d0a7a703 	ldbu	r2,-24932(gp)
 2018794:	10803fcc 	andi	r2,r2,255
 2018798:	10803fe0 	cmpeqi	r2,r2,255
 201879c:	1000031e 	bne	r2,zero,20187ac <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 20187a0:	d0a7a703 	ldbu	r2,-24932(gp)
 20187a4:	10800044 	addi	r2,r2,1
 20187a8:	d0a7a705 	stb	r2,-24932(gp)
 20187ac:	e0bffd17 	ldw	r2,-12(fp)
 20187b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20187b4:	e0bffe17 	ldw	r2,-8(fp)
 20187b8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20187bc:	0001883a 	nop
 20187c0:	e037883a 	mov	sp,fp
 20187c4:	df000017 	ldw	fp,0(sp)
 20187c8:	dec00104 	addi	sp,sp,4
 20187cc:	f800283a 	ret

020187d0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 20187d0:	defff804 	addi	sp,sp,-32
 20187d4:	dfc00715 	stw	ra,28(sp)
 20187d8:	df000615 	stw	fp,24(sp)
 20187dc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20187e0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 20187e4:	d0a7a743 	ldbu	r2,-24931(gp)
 20187e8:	10803fcc 	andi	r2,r2,255
 20187ec:	10800058 	cmpnei	r2,r2,1
 20187f0:	1000281e 	bne	r2,zero,2018894 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20187f4:	0005303a 	rdctl	r2,status
 20187f8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20187fc:	e0ffff17 	ldw	r3,-4(fp)
 2018800:	00bfff84 	movi	r2,-2
 2018804:	1884703a 	and	r2,r3,r2
 2018808:	1001703a 	wrctl	status,r2
  
  return context;
 201880c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2018810:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2018814:	d0a7a703 	ldbu	r2,-24932(gp)
 2018818:	10803fcc 	andi	r2,r2,255
 201881c:	10001926 	beq	r2,zero,2018884 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2018820:	d0a7a703 	ldbu	r2,-24932(gp)
 2018824:	10bfffc4 	addi	r2,r2,-1
 2018828:	d0a7a705 	stb	r2,-24932(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 201882c:	d0a7a703 	ldbu	r2,-24932(gp)
 2018830:	10803fcc 	andi	r2,r2,255
 2018834:	10000e1e 	bne	r2,zero,2018870 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2018838:	d0a7b503 	ldbu	r2,-24876(gp)
 201883c:	10803fcc 	andi	r2,r2,255
 2018840:	1000061e 	bne	r2,zero,201885c <OSSchedUnlock+0x8c>
 2018844:	e0bffa17 	ldw	r2,-24(fp)
 2018848:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201884c:	e0bffb17 	ldw	r2,-20(fp)
 2018850:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2018854:	20196780 	call	2019678 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2018858:	00000e06 	br	2018894 <OSSchedUnlock+0xc4>
 201885c:	e0bffa17 	ldw	r2,-24(fp)
 2018860:	e0bffc15 	stw	r2,-16(fp)
 2018864:	e0bffc17 	ldw	r2,-16(fp)
 2018868:	1001703a 	wrctl	status,r2
 201886c:	00000906 	br	2018894 <OSSchedUnlock+0xc4>
 2018870:	e0bffa17 	ldw	r2,-24(fp)
 2018874:	e0bffd15 	stw	r2,-12(fp)
 2018878:	e0bffd17 	ldw	r2,-12(fp)
 201887c:	1001703a 	wrctl	status,r2
 2018880:	00000406 	br	2018894 <OSSchedUnlock+0xc4>
 2018884:	e0bffa17 	ldw	r2,-24(fp)
 2018888:	e0bffe15 	stw	r2,-8(fp)
 201888c:	e0bffe17 	ldw	r2,-8(fp)
 2018890:	1001703a 	wrctl	status,r2
 2018894:	0001883a 	nop
 2018898:	e037883a 	mov	sp,fp
 201889c:	dfc00117 	ldw	ra,4(sp)
 20188a0:	df000017 	ldw	fp,0(sp)
 20188a4:	dec00204 	addi	sp,sp,8
 20188a8:	f800283a 	ret

020188ac <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 20188ac:	defffe04 	addi	sp,sp,-8
 20188b0:	dfc00115 	stw	ra,4(sp)
 20188b4:	df000015 	stw	fp,0(sp)
 20188b8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 20188bc:	d0a7a743 	ldbu	r2,-24931(gp)
 20188c0:	10803fcc 	andi	r2,r2,255
 20188c4:	10000f1e 	bne	r2,zero,2018904 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 20188c8:	20197480 	call	2019748 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 20188cc:	d0a7a903 	ldbu	r2,-24924(gp)
 20188d0:	d0a7a945 	stb	r2,-24923(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 20188d4:	d0a7a903 	ldbu	r2,-24924(gp)
 20188d8:	10c03fcc 	andi	r3,r2,255
 20188dc:	008080f4 	movhi	r2,515
 20188e0:	10883704 	addi	r2,r2,8412
 20188e4:	18c7883a 	add	r3,r3,r3
 20188e8:	18c7883a 	add	r3,r3,r3
 20188ec:	10c5883a 	add	r2,r2,r3
 20188f0:	10800017 	ldw	r2,0(r2)
 20188f4:	d0a7b115 	stw	r2,-24892(gp)
        OSTCBCur      = OSTCBHighRdy;
 20188f8:	d0a7b117 	ldw	r2,-24892(gp)
 20188fc:	d0a7b615 	stw	r2,-24872(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2018900:	2021da00 	call	2021da0 <OSStartHighRdy>
    }
}
 2018904:	0001883a 	nop
 2018908:	e037883a 	mov	sp,fp
 201890c:	dfc00117 	ldw	ra,4(sp)
 2018910:	df000017 	ldw	fp,0(sp)
 2018914:	dec00204 	addi	sp,sp,8
 2018918:	f800283a 	ret

0201891c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 201891c:	defff904 	addi	sp,sp,-28
 2018920:	dfc00615 	stw	ra,24(sp)
 2018924:	df000515 	stw	fp,20(sp)
 2018928:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201892c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2018930:	01000084 	movi	r4,2
 2018934:	201fadc0 	call	201fadc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018938:	0005303a 	rdctl	r2,status
 201893c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018940:	e0fffc17 	ldw	r3,-16(fp)
 2018944:	00bfff84 	movi	r2,-2
 2018948:	1884703a 	and	r2,r3,r2
 201894c:	1001703a 	wrctl	status,r2
  
  return context;
 2018950:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2018954:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2018958:	d027a815 	stw	zero,-24928(gp)
 201895c:	e0bffb17 	ldw	r2,-20(fp)
 2018960:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018964:	e0bffd17 	ldw	r2,-12(fp)
 2018968:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 201896c:	01001904 	movi	r4,100
 2018970:	201fadc0 	call	201fadc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018974:	0005303a 	rdctl	r2,status
 2018978:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201897c:	e0fffe17 	ldw	r3,-8(fp)
 2018980:	00bfff84 	movi	r2,-2
 2018984:	1884703a 	and	r2,r3,r2
 2018988:	1001703a 	wrctl	status,r2
  
  return context;
 201898c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2018990:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2018994:	d0a7a817 	ldw	r2,-24928(gp)
 2018998:	d0a7ad15 	stw	r2,-24908(gp)
    OSStatRdy    = OS_TRUE;
 201899c:	00800044 	movi	r2,1
 20189a0:	d0a7b905 	stb	r2,-24860(gp)
 20189a4:	e0bffb17 	ldw	r2,-20(fp)
 20189a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20189ac:	e0bfff17 	ldw	r2,-4(fp)
 20189b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 20189b4:	0001883a 	nop
 20189b8:	e037883a 	mov	sp,fp
 20189bc:	dfc00117 	ldw	ra,4(sp)
 20189c0:	df000017 	ldw	fp,0(sp)
 20189c4:	dec00204 	addi	sp,sp,8
 20189c8:	f800283a 	ret

020189cc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 20189cc:	defff704 	addi	sp,sp,-36
 20189d0:	dfc00815 	stw	ra,32(sp)
 20189d4:	df000715 	stw	fp,28(sp)
 20189d8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20189dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 20189e0:	2021fc80 	call	2021fc8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20189e4:	0005303a 	rdctl	r2,status
 20189e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20189ec:	e0fffd17 	ldw	r3,-12(fp)
 20189f0:	00bfff84 	movi	r2,-2
 20189f4:	1884703a 	and	r2,r3,r2
 20189f8:	1001703a 	wrctl	status,r2
  
  return context;
 20189fc:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2018a00:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2018a04:	d0a7b717 	ldw	r2,-24868(gp)
 2018a08:	10800044 	addi	r2,r2,1
 2018a0c:	d0a7b715 	stw	r2,-24868(gp)
 2018a10:	e0bffb17 	ldw	r2,-20(fp)
 2018a14:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018a18:	e0bfff17 	ldw	r2,-4(fp)
 2018a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2018a20:	d0a7a743 	ldbu	r2,-24931(gp)
 2018a24:	10803fcc 	andi	r2,r2,255
 2018a28:	10800058 	cmpnei	r2,r2,1
 2018a2c:	10006a1e 	bne	r2,zero,2018bd8 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2018a30:	d0a7ab03 	ldbu	r2,-24916(gp)
 2018a34:	10803fcc 	andi	r2,r2,255
 2018a38:	10c00060 	cmpeqi	r3,r2,1
 2018a3c:	1800061e 	bne	r3,zero,2018a58 <OSTimeTick+0x8c>
 2018a40:	10c000a0 	cmpeqi	r3,r2,2
 2018a44:	1800061e 	bne	r3,zero,2018a60 <OSTimeTick+0x94>
 2018a48:	10000a1e 	bne	r2,zero,2018a74 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2018a4c:	00800044 	movi	r2,1
 2018a50:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2018a54:	00000b06 	br	2018a84 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2018a58:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2018a5c:	00000906 	br	2018a84 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2018a60:	00800044 	movi	r2,1
 2018a64:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2018a68:	00800044 	movi	r2,1
 2018a6c:	d0a7ab05 	stb	r2,-24916(gp)
                 break;
 2018a70:	00000406 	br	2018a84 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2018a74:	00800044 	movi	r2,1
 2018a78:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2018a7c:	d027ab05 	stb	zero,-24916(gp)
                 break;
 2018a80:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2018a84:	e0bffa03 	ldbu	r2,-24(fp)
 2018a88:	10005226 	beq	r2,zero,2018bd4 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2018a8c:	d0a7aa17 	ldw	r2,-24920(gp)
 2018a90:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2018a94:	00004906 	br	2018bbc <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018a98:	0005303a 	rdctl	r2,status
 2018a9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018aa0:	e0fffc17 	ldw	r3,-16(fp)
 2018aa4:	00bfff84 	movi	r2,-2
 2018aa8:	1884703a 	and	r2,r3,r2
 2018aac:	1001703a 	wrctl	status,r2
  
  return context;
 2018ab0:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 2018ab4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2018ab8:	e0bff917 	ldw	r2,-28(fp)
 2018abc:	10800b8b 	ldhu	r2,46(r2)
 2018ac0:	10bfffcc 	andi	r2,r2,65535
 2018ac4:	10003626 	beq	r2,zero,2018ba0 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2018ac8:	e0bff917 	ldw	r2,-28(fp)
 2018acc:	10800b8b 	ldhu	r2,46(r2)
 2018ad0:	10bfffc4 	addi	r2,r2,-1
 2018ad4:	1007883a 	mov	r3,r2
 2018ad8:	e0bff917 	ldw	r2,-28(fp)
 2018adc:	10c00b8d 	sth	r3,46(r2)
 2018ae0:	e0bff917 	ldw	r2,-28(fp)
 2018ae4:	10800b8b 	ldhu	r2,46(r2)
 2018ae8:	10bfffcc 	andi	r2,r2,65535
 2018aec:	10002c1e 	bne	r2,zero,2018ba0 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2018af0:	e0bff917 	ldw	r2,-28(fp)
 2018af4:	10800c03 	ldbu	r2,48(r2)
 2018af8:	10803fcc 	andi	r2,r2,255
 2018afc:	10800dcc 	andi	r2,r2,55
 2018b00:	10000b26 	beq	r2,zero,2018b30 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2018b04:	e0bff917 	ldw	r2,-28(fp)
 2018b08:	10c00c03 	ldbu	r3,48(r2)
 2018b0c:	00bff204 	movi	r2,-56
 2018b10:	1884703a 	and	r2,r3,r2
 2018b14:	1007883a 	mov	r3,r2
 2018b18:	e0bff917 	ldw	r2,-28(fp)
 2018b1c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2018b20:	e0bff917 	ldw	r2,-28(fp)
 2018b24:	00c00044 	movi	r3,1
 2018b28:	10c00c45 	stb	r3,49(r2)
 2018b2c:	00000206 	br	2018b38 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2018b30:	e0bff917 	ldw	r2,-28(fp)
 2018b34:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2018b38:	e0bff917 	ldw	r2,-28(fp)
 2018b3c:	10800c03 	ldbu	r2,48(r2)
 2018b40:	10803fcc 	andi	r2,r2,255
 2018b44:	1080020c 	andi	r2,r2,8
 2018b48:	1000151e 	bne	r2,zero,2018ba0 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2018b4c:	e0bff917 	ldw	r2,-28(fp)
 2018b50:	10c00d83 	ldbu	r3,54(r2)
 2018b54:	d0a7b303 	ldbu	r2,-24884(gp)
 2018b58:	1884b03a 	or	r2,r3,r2
 2018b5c:	d0a7b305 	stb	r2,-24884(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2018b60:	e0bff917 	ldw	r2,-28(fp)
 2018b64:	10800d03 	ldbu	r2,52(r2)
 2018b68:	10c03fcc 	andi	r3,r2,255
 2018b6c:	e0bff917 	ldw	r2,-28(fp)
 2018b70:	10800d03 	ldbu	r2,52(r2)
 2018b74:	11003fcc 	andi	r4,r2,255
 2018b78:	d0a7b344 	addi	r2,gp,-24883
 2018b7c:	2085883a 	add	r2,r4,r2
 2018b80:	11000003 	ldbu	r4,0(r2)
 2018b84:	e0bff917 	ldw	r2,-28(fp)
 2018b88:	10800d43 	ldbu	r2,53(r2)
 2018b8c:	2084b03a 	or	r2,r4,r2
 2018b90:	1009883a 	mov	r4,r2
 2018b94:	d0a7b344 	addi	r2,gp,-24883
 2018b98:	1885883a 	add	r2,r3,r2
 2018b9c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2018ba0:	e0bff917 	ldw	r2,-28(fp)
 2018ba4:	10800517 	ldw	r2,20(r2)
 2018ba8:	e0bff915 	stw	r2,-28(fp)
 2018bac:	e0bffb17 	ldw	r2,-20(fp)
 2018bb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018bb4:	e0bffe17 	ldw	r2,-8(fp)
 2018bb8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2018bbc:	e0bff917 	ldw	r2,-28(fp)
 2018bc0:	10800c83 	ldbu	r2,50(r2)
 2018bc4:	10803fcc 	andi	r2,r2,255
 2018bc8:	10800518 	cmpnei	r2,r2,20
 2018bcc:	103fb21e 	bne	r2,zero,2018a98 <OSTimeTick+0xcc>
 2018bd0:	00000106 	br	2018bd8 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 2018bd4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2018bd8:	e037883a 	mov	sp,fp
 2018bdc:	dfc00117 	ldw	ra,4(sp)
 2018be0:	df000017 	ldw	fp,0(sp)
 2018be4:	dec00204 	addi	sp,sp,8
 2018be8:	f800283a 	ret

02018bec <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2018bec:	deffff04 	addi	sp,sp,-4
 2018bf0:	df000015 	stw	fp,0(sp)
 2018bf4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2018bf8:	00804784 	movi	r2,286
}
 2018bfc:	e037883a 	mov	sp,fp
 2018c00:	df000017 	ldw	fp,0(sp)
 2018c04:	dec00104 	addi	sp,sp,4
 2018c08:	f800283a 	ret

02018c0c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2018c0c:	deffff04 	addi	sp,sp,-4
 2018c10:	df000015 	stw	fp,0(sp)
 2018c14:	d839883a 	mov	fp,sp
}
 2018c18:	0001883a 	nop
 2018c1c:	e037883a 	mov	sp,fp
 2018c20:	df000017 	ldw	fp,0(sp)
 2018c24:	dec00104 	addi	sp,sp,4
 2018c28:	f800283a 	ret

02018c2c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2018c2c:	defff804 	addi	sp,sp,-32
 2018c30:	dfc00715 	stw	ra,28(sp)
 2018c34:	df000615 	stw	fp,24(sp)
 2018c38:	df000604 	addi	fp,sp,24
 2018c3c:	e13ffc15 	stw	r4,-16(fp)
 2018c40:	e17ffd15 	stw	r5,-12(fp)
 2018c44:	3007883a 	mov	r3,r6
 2018c48:	3805883a 	mov	r2,r7
 2018c4c:	e0fffe05 	stb	r3,-8(fp)
 2018c50:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2018c54:	e0bffc17 	ldw	r2,-16(fp)
 2018c58:	10800283 	ldbu	r2,10(r2)
 2018c5c:	10c03fcc 	andi	r3,r2,255
 2018c60:	008080b4 	movhi	r2,514
 2018c64:	108ce004 	addi	r2,r2,13184
 2018c68:	10c5883a 	add	r2,r2,r3
 2018c6c:	10800003 	ldbu	r2,0(r2)
 2018c70:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2018c74:	e0bffa03 	ldbu	r2,-24(fp)
 2018c78:	e0fffc17 	ldw	r3,-16(fp)
 2018c7c:	1885883a 	add	r2,r3,r2
 2018c80:	108002c4 	addi	r2,r2,11
 2018c84:	10800003 	ldbu	r2,0(r2)
 2018c88:	10c03fcc 	andi	r3,r2,255
 2018c8c:	008080b4 	movhi	r2,514
 2018c90:	108ce004 	addi	r2,r2,13184
 2018c94:	10c5883a 	add	r2,r2,r3
 2018c98:	10800003 	ldbu	r2,0(r2)
 2018c9c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2018ca0:	e0bffa03 	ldbu	r2,-24(fp)
 2018ca4:	100490fa 	slli	r2,r2,3
 2018ca8:	1007883a 	mov	r3,r2
 2018cac:	e0bffa43 	ldbu	r2,-23(fp)
 2018cb0:	1885883a 	add	r2,r3,r2
 2018cb4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 2018cb8:	e0fffa83 	ldbu	r3,-22(fp)
 2018cbc:	008080f4 	movhi	r2,515
 2018cc0:	10883704 	addi	r2,r2,8412
 2018cc4:	18c7883a 	add	r3,r3,r3
 2018cc8:	18c7883a 	add	r3,r3,r3
 2018ccc:	10c5883a 	add	r2,r2,r3
 2018cd0:	10800017 	ldw	r2,0(r2)
 2018cd4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 2018cd8:	e0bffb17 	ldw	r2,-20(fp)
 2018cdc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2018ce0:	e0bffb17 	ldw	r2,-20(fp)
 2018ce4:	e0fffd17 	ldw	r3,-12(fp)
 2018ce8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2018cec:	e0bffb17 	ldw	r2,-20(fp)
 2018cf0:	10800c03 	ldbu	r2,48(r2)
 2018cf4:	1007883a 	mov	r3,r2
 2018cf8:	e0bffe03 	ldbu	r2,-8(fp)
 2018cfc:	0084303a 	nor	r2,zero,r2
 2018d00:	1884703a 	and	r2,r3,r2
 2018d04:	1007883a 	mov	r3,r2
 2018d08:	e0bffb17 	ldw	r2,-20(fp)
 2018d0c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2018d10:	e0bffb17 	ldw	r2,-20(fp)
 2018d14:	e0ffff03 	ldbu	r3,-4(fp)
 2018d18:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2018d1c:	e0bffb17 	ldw	r2,-20(fp)
 2018d20:	10800c03 	ldbu	r2,48(r2)
 2018d24:	10803fcc 	andi	r2,r2,255
 2018d28:	1080020c 	andi	r2,r2,8
 2018d2c:	1000111e 	bne	r2,zero,2018d74 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2018d30:	e0bffb17 	ldw	r2,-20(fp)
 2018d34:	10c00d83 	ldbu	r3,54(r2)
 2018d38:	d0a7b303 	ldbu	r2,-24884(gp)
 2018d3c:	1884b03a 	or	r2,r3,r2
 2018d40:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2018d44:	e0fffa03 	ldbu	r3,-24(fp)
 2018d48:	e13ffa03 	ldbu	r4,-24(fp)
 2018d4c:	d0a7b344 	addi	r2,gp,-24883
 2018d50:	2085883a 	add	r2,r4,r2
 2018d54:	11000003 	ldbu	r4,0(r2)
 2018d58:	e0bffb17 	ldw	r2,-20(fp)
 2018d5c:	10800d43 	ldbu	r2,53(r2)
 2018d60:	2084b03a 	or	r2,r4,r2
 2018d64:	1009883a 	mov	r4,r2
 2018d68:	d0a7b344 	addi	r2,gp,-24883
 2018d6c:	1885883a 	add	r2,r3,r2
 2018d70:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2018d74:	e17ffc17 	ldw	r5,-16(fp)
 2018d78:	e13ffb17 	ldw	r4,-20(fp)
 2018d7c:	20190240 	call	2019024 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2018d80:	e0bffb17 	ldw	r2,-20(fp)
 2018d84:	10800817 	ldw	r2,32(r2)
 2018d88:	10000826 	beq	r2,zero,2018dac <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2018d8c:	e0bffb17 	ldw	r2,-20(fp)
 2018d90:	10800817 	ldw	r2,32(r2)
 2018d94:	100b883a 	mov	r5,r2
 2018d98:	e13ffb17 	ldw	r4,-20(fp)
 2018d9c:	20190dc0 	call	20190dc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2018da0:	e0bffb17 	ldw	r2,-20(fp)
 2018da4:	e0fffc17 	ldw	r3,-16(fp)
 2018da8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 2018dac:	e0bffa83 	ldbu	r2,-22(fp)
}
 2018db0:	e037883a 	mov	sp,fp
 2018db4:	dfc00117 	ldw	ra,4(sp)
 2018db8:	df000017 	ldw	fp,0(sp)
 2018dbc:	dec00204 	addi	sp,sp,8
 2018dc0:	f800283a 	ret

02018dc4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 2018dc4:	defffd04 	addi	sp,sp,-12
 2018dc8:	df000215 	stw	fp,8(sp)
 2018dcc:	df000204 	addi	fp,sp,8
 2018dd0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 2018dd4:	d0a7b617 	ldw	r2,-24872(gp)
 2018dd8:	e0ffff17 	ldw	r3,-4(fp)
 2018ddc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2018de0:	d0a7b617 	ldw	r2,-24872(gp)
 2018de4:	10800d03 	ldbu	r2,52(r2)
 2018de8:	10803fcc 	andi	r2,r2,255
 2018dec:	d0e7b617 	ldw	r3,-24872(gp)
 2018df0:	18c00d03 	ldbu	r3,52(r3)
 2018df4:	18c03fcc 	andi	r3,r3,255
 2018df8:	e13fff17 	ldw	r4,-4(fp)
 2018dfc:	20c7883a 	add	r3,r4,r3
 2018e00:	18c002c4 	addi	r3,r3,11
 2018e04:	19000003 	ldbu	r4,0(r3)
 2018e08:	d0e7b617 	ldw	r3,-24872(gp)
 2018e0c:	18c00d43 	ldbu	r3,53(r3)
 2018e10:	20c6b03a 	or	r3,r4,r3
 2018e14:	1809883a 	mov	r4,r3
 2018e18:	e0ffff17 	ldw	r3,-4(fp)
 2018e1c:	1885883a 	add	r2,r3,r2
 2018e20:	108002c4 	addi	r2,r2,11
 2018e24:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2018e28:	e0bfff17 	ldw	r2,-4(fp)
 2018e2c:	10c00283 	ldbu	r3,10(r2)
 2018e30:	d0a7b617 	ldw	r2,-24872(gp)
 2018e34:	10800d83 	ldbu	r2,54(r2)
 2018e38:	1884b03a 	or	r2,r3,r2
 2018e3c:	1007883a 	mov	r3,r2
 2018e40:	e0bfff17 	ldw	r2,-4(fp)
 2018e44:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2018e48:	d0a7b617 	ldw	r2,-24872(gp)
 2018e4c:	10800d03 	ldbu	r2,52(r2)
 2018e50:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2018e54:	e0fffe03 	ldbu	r3,-8(fp)
 2018e58:	e13ffe03 	ldbu	r4,-8(fp)
 2018e5c:	d0a7b344 	addi	r2,gp,-24883
 2018e60:	2085883a 	add	r2,r4,r2
 2018e64:	10800003 	ldbu	r2,0(r2)
 2018e68:	1009883a 	mov	r4,r2
 2018e6c:	d0a7b617 	ldw	r2,-24872(gp)
 2018e70:	10800d43 	ldbu	r2,53(r2)
 2018e74:	0084303a 	nor	r2,zero,r2
 2018e78:	2084703a 	and	r2,r4,r2
 2018e7c:	1009883a 	mov	r4,r2
 2018e80:	d0a7b344 	addi	r2,gp,-24883
 2018e84:	1885883a 	add	r2,r3,r2
 2018e88:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2018e8c:	e0fffe03 	ldbu	r3,-8(fp)
 2018e90:	d0a7b344 	addi	r2,gp,-24883
 2018e94:	1885883a 	add	r2,r3,r2
 2018e98:	10800003 	ldbu	r2,0(r2)
 2018e9c:	10803fcc 	andi	r2,r2,255
 2018ea0:	1000071e 	bne	r2,zero,2018ec0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2018ea4:	d0a7b617 	ldw	r2,-24872(gp)
 2018ea8:	10800d83 	ldbu	r2,54(r2)
 2018eac:	0084303a 	nor	r2,zero,r2
 2018eb0:	1007883a 	mov	r3,r2
 2018eb4:	d0a7b303 	ldbu	r2,-24884(gp)
 2018eb8:	1884703a 	and	r2,r3,r2
 2018ebc:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 2018ec0:	0001883a 	nop
 2018ec4:	e037883a 	mov	sp,fp
 2018ec8:	df000017 	ldw	fp,0(sp)
 2018ecc:	dec00104 	addi	sp,sp,4
 2018ed0:	f800283a 	ret

02018ed4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 2018ed4:	defffb04 	addi	sp,sp,-20
 2018ed8:	df000415 	stw	fp,16(sp)
 2018edc:	df000404 	addi	fp,sp,16
 2018ee0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2018ee4:	d0a7b617 	ldw	r2,-24872(gp)
 2018ee8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2018eec:	d0a7b617 	ldw	r2,-24872(gp)
 2018ef0:	e0ffff17 	ldw	r3,-4(fp)
 2018ef4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2018ef8:	e0bfff17 	ldw	r2,-4(fp)
 2018efc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2018f00:	e0bffc17 	ldw	r2,-16(fp)
 2018f04:	10800017 	ldw	r2,0(r2)
 2018f08:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2018f0c:	00002006 	br	2018f90 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2018f10:	d0a7b617 	ldw	r2,-24872(gp)
 2018f14:	10800d03 	ldbu	r2,52(r2)
 2018f18:	10803fcc 	andi	r2,r2,255
 2018f1c:	d0e7b617 	ldw	r3,-24872(gp)
 2018f20:	18c00d03 	ldbu	r3,52(r3)
 2018f24:	18c03fcc 	andi	r3,r3,255
 2018f28:	e13ffd17 	ldw	r4,-12(fp)
 2018f2c:	20c7883a 	add	r3,r4,r3
 2018f30:	18c002c4 	addi	r3,r3,11
 2018f34:	19000003 	ldbu	r4,0(r3)
 2018f38:	d0e7b617 	ldw	r3,-24872(gp)
 2018f3c:	18c00d43 	ldbu	r3,53(r3)
 2018f40:	20c6b03a 	or	r3,r4,r3
 2018f44:	1809883a 	mov	r4,r3
 2018f48:	e0fffd17 	ldw	r3,-12(fp)
 2018f4c:	1885883a 	add	r2,r3,r2
 2018f50:	108002c4 	addi	r2,r2,11
 2018f54:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2018f58:	e0bffd17 	ldw	r2,-12(fp)
 2018f5c:	10c00283 	ldbu	r3,10(r2)
 2018f60:	d0a7b617 	ldw	r2,-24872(gp)
 2018f64:	10800d83 	ldbu	r2,54(r2)
 2018f68:	1884b03a 	or	r2,r3,r2
 2018f6c:	1007883a 	mov	r3,r2
 2018f70:	e0bffd17 	ldw	r2,-12(fp)
 2018f74:	10c00285 	stb	r3,10(r2)
        pevents++;
 2018f78:	e0bffc17 	ldw	r2,-16(fp)
 2018f7c:	10800104 	addi	r2,r2,4
 2018f80:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 2018f84:	e0bffc17 	ldw	r2,-16(fp)
 2018f88:	10800017 	ldw	r2,0(r2)
 2018f8c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2018f90:	e0bffd17 	ldw	r2,-12(fp)
 2018f94:	103fde1e 	bne	r2,zero,2018f10 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2018f98:	d0a7b617 	ldw	r2,-24872(gp)
 2018f9c:	10800d03 	ldbu	r2,52(r2)
 2018fa0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2018fa4:	e0fffe03 	ldbu	r3,-8(fp)
 2018fa8:	e13ffe03 	ldbu	r4,-8(fp)
 2018fac:	d0a7b344 	addi	r2,gp,-24883
 2018fb0:	2085883a 	add	r2,r4,r2
 2018fb4:	10800003 	ldbu	r2,0(r2)
 2018fb8:	1009883a 	mov	r4,r2
 2018fbc:	d0a7b617 	ldw	r2,-24872(gp)
 2018fc0:	10800d43 	ldbu	r2,53(r2)
 2018fc4:	0084303a 	nor	r2,zero,r2
 2018fc8:	2084703a 	and	r2,r4,r2
 2018fcc:	1009883a 	mov	r4,r2
 2018fd0:	d0a7b344 	addi	r2,gp,-24883
 2018fd4:	1885883a 	add	r2,r3,r2
 2018fd8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2018fdc:	e0fffe03 	ldbu	r3,-8(fp)
 2018fe0:	d0a7b344 	addi	r2,gp,-24883
 2018fe4:	1885883a 	add	r2,r3,r2
 2018fe8:	10800003 	ldbu	r2,0(r2)
 2018fec:	10803fcc 	andi	r2,r2,255
 2018ff0:	1000071e 	bne	r2,zero,2019010 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2018ff4:	d0a7b617 	ldw	r2,-24872(gp)
 2018ff8:	10800d83 	ldbu	r2,54(r2)
 2018ffc:	0084303a 	nor	r2,zero,r2
 2019000:	1007883a 	mov	r3,r2
 2019004:	d0a7b303 	ldbu	r2,-24884(gp)
 2019008:	1884703a 	and	r2,r3,r2
 201900c:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 2019010:	0001883a 	nop
 2019014:	e037883a 	mov	sp,fp
 2019018:	df000017 	ldw	fp,0(sp)
 201901c:	dec00104 	addi	sp,sp,4
 2019020:	f800283a 	ret

02019024 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2019024:	defffc04 	addi	sp,sp,-16
 2019028:	df000315 	stw	fp,12(sp)
 201902c:	df000304 	addi	fp,sp,12
 2019030:	e13ffe15 	stw	r4,-8(fp)
 2019034:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 2019038:	e0bffe17 	ldw	r2,-8(fp)
 201903c:	10800d03 	ldbu	r2,52(r2)
 2019040:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2019044:	e0bffd03 	ldbu	r2,-12(fp)
 2019048:	e0fffd03 	ldbu	r3,-12(fp)
 201904c:	e13fff17 	ldw	r4,-4(fp)
 2019050:	20c7883a 	add	r3,r4,r3
 2019054:	18c002c4 	addi	r3,r3,11
 2019058:	18c00003 	ldbu	r3,0(r3)
 201905c:	1809883a 	mov	r4,r3
 2019060:	e0fffe17 	ldw	r3,-8(fp)
 2019064:	18c00d43 	ldbu	r3,53(r3)
 2019068:	00c6303a 	nor	r3,zero,r3
 201906c:	20c6703a 	and	r3,r4,r3
 2019070:	1809883a 	mov	r4,r3
 2019074:	e0ffff17 	ldw	r3,-4(fp)
 2019078:	1885883a 	add	r2,r3,r2
 201907c:	108002c4 	addi	r2,r2,11
 2019080:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2019084:	e0bffd03 	ldbu	r2,-12(fp)
 2019088:	e0ffff17 	ldw	r3,-4(fp)
 201908c:	1885883a 	add	r2,r3,r2
 2019090:	108002c4 	addi	r2,r2,11
 2019094:	10800003 	ldbu	r2,0(r2)
 2019098:	10803fcc 	andi	r2,r2,255
 201909c:	10000a1e 	bne	r2,zero,20190c8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 20190a0:	e0bfff17 	ldw	r2,-4(fp)
 20190a4:	10800283 	ldbu	r2,10(r2)
 20190a8:	1007883a 	mov	r3,r2
 20190ac:	e0bffe17 	ldw	r2,-8(fp)
 20190b0:	10800d83 	ldbu	r2,54(r2)
 20190b4:	0084303a 	nor	r2,zero,r2
 20190b8:	1884703a 	and	r2,r3,r2
 20190bc:	1007883a 	mov	r3,r2
 20190c0:	e0bfff17 	ldw	r2,-4(fp)
 20190c4:	10c00285 	stb	r3,10(r2)
    }
}
 20190c8:	0001883a 	nop
 20190cc:	e037883a 	mov	sp,fp
 20190d0:	df000017 	ldw	fp,0(sp)
 20190d4:	dec00104 	addi	sp,sp,4
 20190d8:	f800283a 	ret

020190dc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 20190dc:	defffa04 	addi	sp,sp,-24
 20190e0:	df000515 	stw	fp,20(sp)
 20190e4:	df000504 	addi	fp,sp,20
 20190e8:	e13ffe15 	stw	r4,-8(fp)
 20190ec:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 20190f0:	e0bffe17 	ldw	r2,-8(fp)
 20190f4:	10800d03 	ldbu	r2,52(r2)
 20190f8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 20190fc:	e0bffe17 	ldw	r2,-8(fp)
 2019100:	10800d83 	ldbu	r2,54(r2)
 2019104:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 2019108:	e0bffe17 	ldw	r2,-8(fp)
 201910c:	10800d43 	ldbu	r2,53(r2)
 2019110:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2019114:	e0bfff17 	ldw	r2,-4(fp)
 2019118:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 201911c:	e0bffb17 	ldw	r2,-20(fp)
 2019120:	10800017 	ldw	r2,0(r2)
 2019124:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2019128:	00002506 	br	20191c0 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 201912c:	e0bffd03 	ldbu	r2,-12(fp)
 2019130:	e0fffd03 	ldbu	r3,-12(fp)
 2019134:	e13ffc17 	ldw	r4,-16(fp)
 2019138:	20c7883a 	add	r3,r4,r3
 201913c:	18c002c4 	addi	r3,r3,11
 2019140:	18c00003 	ldbu	r3,0(r3)
 2019144:	1809883a 	mov	r4,r3
 2019148:	e0fffd83 	ldbu	r3,-10(fp)
 201914c:	00c6303a 	nor	r3,zero,r3
 2019150:	20c6703a 	and	r3,r4,r3
 2019154:	1809883a 	mov	r4,r3
 2019158:	e0fffc17 	ldw	r3,-16(fp)
 201915c:	1885883a 	add	r2,r3,r2
 2019160:	108002c4 	addi	r2,r2,11
 2019164:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2019168:	e0bffd03 	ldbu	r2,-12(fp)
 201916c:	e0fffc17 	ldw	r3,-16(fp)
 2019170:	1885883a 	add	r2,r3,r2
 2019174:	108002c4 	addi	r2,r2,11
 2019178:	10800003 	ldbu	r2,0(r2)
 201917c:	10803fcc 	andi	r2,r2,255
 2019180:	1000091e 	bne	r2,zero,20191a8 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 2019184:	e0bffc17 	ldw	r2,-16(fp)
 2019188:	10800283 	ldbu	r2,10(r2)
 201918c:	1007883a 	mov	r3,r2
 2019190:	e0bffd43 	ldbu	r2,-11(fp)
 2019194:	0084303a 	nor	r2,zero,r2
 2019198:	1884703a 	and	r2,r3,r2
 201919c:	1007883a 	mov	r3,r2
 20191a0:	e0bffc17 	ldw	r2,-16(fp)
 20191a4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 20191a8:	e0bffb17 	ldw	r2,-20(fp)
 20191ac:	10800104 	addi	r2,r2,4
 20191b0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 20191b4:	e0bffb17 	ldw	r2,-20(fp)
 20191b8:	10800017 	ldw	r2,0(r2)
 20191bc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20191c0:	e0bffc17 	ldw	r2,-16(fp)
 20191c4:	103fd91e 	bne	r2,zero,201912c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 20191c8:	0001883a 	nop
 20191cc:	e037883a 	mov	sp,fp
 20191d0:	df000017 	ldw	fp,0(sp)
 20191d4:	dec00104 	addi	sp,sp,4
 20191d8:	f800283a 	ret

020191dc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 20191dc:	defffc04 	addi	sp,sp,-16
 20191e0:	df000315 	stw	fp,12(sp)
 20191e4:	df000304 	addi	fp,sp,12
 20191e8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 20191ec:	e0bfff17 	ldw	r2,-4(fp)
 20191f0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 20191f4:	e0bfff17 	ldw	r2,-4(fp)
 20191f8:	108002c4 	addi	r2,r2,11
 20191fc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2019200:	e03ffe05 	stb	zero,-8(fp)
 2019204:	00000706 	br	2019224 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 2019208:	e0bffd17 	ldw	r2,-12(fp)
 201920c:	10c00044 	addi	r3,r2,1
 2019210:	e0fffd15 	stw	r3,-12(fp)
 2019214:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2019218:	e0bffe03 	ldbu	r2,-8(fp)
 201921c:	10800044 	addi	r2,r2,1
 2019220:	e0bffe05 	stb	r2,-8(fp)
 2019224:	e0bffe03 	ldbu	r2,-8(fp)
 2019228:	108000f0 	cmpltui	r2,r2,3
 201922c:	103ff61e 	bne	r2,zero,2019208 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2019230:	0001883a 	nop
 2019234:	e037883a 	mov	sp,fp
 2019238:	df000017 	ldw	fp,0(sp)
 201923c:	dec00104 	addi	sp,sp,4
 2019240:	f800283a 	ret

02019244 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2019244:	defffb04 	addi	sp,sp,-20
 2019248:	dfc00415 	stw	ra,16(sp)
 201924c:	df000315 	stw	fp,12(sp)
 2019250:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2019254:	0142d004 	movi	r5,2880
 2019258:	010080f4 	movhi	r4,515
 201925c:	21042304 	addi	r4,r4,4236
 2019260:	20195bc0 	call	20195bc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2019264:	008080f4 	movhi	r2,515
 2019268:	10842304 	addi	r2,r2,4236
 201926c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2019270:	008080f4 	movhi	r2,515
 2019274:	10842f04 	addi	r2,r2,4284
 2019278:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 201927c:	e03ffd0d 	sth	zero,-12(fp)
 2019280:	00001306 	br	20192d0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019284:	e0bffe17 	ldw	r2,-8(fp)
 2019288:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 201928c:	e0bffe17 	ldw	r2,-8(fp)
 2019290:	e0ffff17 	ldw	r3,-4(fp)
 2019294:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 2019298:	e0bffe17 	ldw	r2,-8(fp)
 201929c:	00c00fc4 	movi	r3,63
 20192a0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20192a4:	e0bffe17 	ldw	r2,-8(fp)
 20192a8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 20192ac:	e0bffe17 	ldw	r2,-8(fp)
 20192b0:	10800c04 	addi	r2,r2,48
 20192b4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 20192b8:	e0bfff17 	ldw	r2,-4(fp)
 20192bc:	10800c04 	addi	r2,r2,48
 20192c0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20192c4:	e0bffd0b 	ldhu	r2,-12(fp)
 20192c8:	10800044 	addi	r2,r2,1
 20192cc:	e0bffd0d 	sth	r2,-12(fp)
 20192d0:	e0bffd0b 	ldhu	r2,-12(fp)
 20192d4:	10800ef0 	cmpltui	r2,r2,59
 20192d8:	103fea1e 	bne	r2,zero,2019284 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 20192dc:	e0bffe17 	ldw	r2,-8(fp)
 20192e0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 20192e4:	e0bffe17 	ldw	r2,-8(fp)
 20192e8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 20192ec:	e0bffe17 	ldw	r2,-8(fp)
 20192f0:	00c00fc4 	movi	r3,63
 20192f4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 20192f8:	e0bffe17 	ldw	r2,-8(fp)
 20192fc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2019300:	008080f4 	movhi	r2,515
 2019304:	10842304 	addi	r2,r2,4236
 2019308:	d0a7b415 	stw	r2,-24880(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 201930c:	0001883a 	nop
 2019310:	e037883a 	mov	sp,fp
 2019314:	dfc00117 	ldw	ra,4(sp)
 2019318:	df000017 	ldw	fp,0(sp)
 201931c:	dec00204 	addi	sp,sp,8
 2019320:	f800283a 	ret

02019324 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2019324:	deffff04 	addi	sp,sp,-4
 2019328:	df000015 	stw	fp,0(sp)
 201932c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2019330:	d027b715 	stw	zero,-24868(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2019334:	d027b505 	stb	zero,-24876(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2019338:	d027a705 	stb	zero,-24932(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 201933c:	d027af45 	stb	zero,-24899(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2019340:	d027a745 	stb	zero,-24931(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2019344:	d027ac15 	stw	zero,-24912(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2019348:	d027a815 	stw	zero,-24928(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 201934c:	d027ba15 	stw	zero,-24856(gp)
    OSIdleCtrMax  = 0L;
 2019350:	d027ad15 	stw	zero,-24908(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2019354:	d027b905 	stb	zero,-24860(gp)
#endif
}
 2019358:	0001883a 	nop
 201935c:	e037883a 	mov	sp,fp
 2019360:	df000017 	ldw	fp,0(sp)
 2019364:	dec00104 	addi	sp,sp,4
 2019368:	f800283a 	ret

0201936c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 201936c:	defffd04 	addi	sp,sp,-12
 2019370:	df000215 	stw	fp,8(sp)
 2019374:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2019378:	d027b305 	stb	zero,-24884(gp)
    prdytbl       = &OSRdyTbl[0];
 201937c:	d0a7b344 	addi	r2,gp,-24883
 2019380:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2019384:	e03ffe05 	stb	zero,-8(fp)
 2019388:	00000706 	br	20193a8 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 201938c:	e0bfff17 	ldw	r2,-4(fp)
 2019390:	10c00044 	addi	r3,r2,1
 2019394:	e0ffff15 	stw	r3,-4(fp)
 2019398:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 201939c:	e0bffe03 	ldbu	r2,-8(fp)
 20193a0:	10800044 	addi	r2,r2,1
 20193a4:	e0bffe05 	stb	r2,-8(fp)
 20193a8:	e0bffe03 	ldbu	r2,-8(fp)
 20193ac:	108000f0 	cmpltui	r2,r2,3
 20193b0:	103ff61e 	bne	r2,zero,201938c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 20193b4:	d027a945 	stb	zero,-24923(gp)
    OSPrioHighRdy = 0;
 20193b8:	d027a905 	stb	zero,-24924(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 20193bc:	d027b115 	stw	zero,-24892(gp)
    OSTCBCur      = (OS_TCB *)0;
 20193c0:	d027b615 	stw	zero,-24872(gp)
}
 20193c4:	0001883a 	nop
 20193c8:	e037883a 	mov	sp,fp
 20193cc:	df000017 	ldw	fp,0(sp)
 20193d0:	dec00104 	addi	sp,sp,4
 20193d4:	f800283a 	ret

020193d8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 20193d8:	defff804 	addi	sp,sp,-32
 20193dc:	dfc00715 	stw	ra,28(sp)
 20193e0:	df000615 	stw	fp,24(sp)
 20193e4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 20193e8:	008000c4 	movi	r2,3
 20193ec:	d8800415 	stw	r2,16(sp)
 20193f0:	d8000315 	stw	zero,12(sp)
 20193f4:	00808004 	movi	r2,512
 20193f8:	d8800215 	stw	r2,8(sp)
 20193fc:	008080f4 	movhi	r2,515
 2019400:	10822304 	addi	r2,r2,2188
 2019404:	d8800115 	stw	r2,4(sp)
 2019408:	00bfffd4 	movui	r2,65535
 201940c:	d8800015 	stw	r2,0(sp)
 2019410:	01c00504 	movi	r7,20
 2019414:	018080f4 	movhi	r6,515
 2019418:	31842204 	addi	r6,r6,4232
 201941c:	000b883a 	mov	r5,zero
 2019420:	010080b4 	movhi	r4,514
 2019424:	21262104 	addi	r4,r4,-26492
 2019428:	201ea0c0 	call	201ea0c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 201942c:	e1bfff04 	addi	r6,fp,-4
 2019430:	014080b4 	movhi	r5,514
 2019434:	294d2004 	addi	r5,r5,13440
 2019438:	01000504 	movi	r4,20
 201943c:	201f21c0 	call	201f21c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2019440:	0001883a 	nop
 2019444:	e037883a 	mov	sp,fp
 2019448:	dfc00117 	ldw	ra,4(sp)
 201944c:	df000017 	ldw	fp,0(sp)
 2019450:	dec00204 	addi	sp,sp,8
 2019454:	f800283a 	ret

02019458 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2019458:	defff804 	addi	sp,sp,-32
 201945c:	dfc00715 	stw	ra,28(sp)
 2019460:	df000615 	stw	fp,24(sp)
 2019464:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2019468:	008000c4 	movi	r2,3
 201946c:	d8800415 	stw	r2,16(sp)
 2019470:	d8000315 	stw	zero,12(sp)
 2019474:	00808004 	movi	r2,512
 2019478:	d8800215 	stw	r2,8(sp)
 201947c:	008080f4 	movhi	r2,515
 2019480:	10bfab04 	addi	r2,r2,-340
 2019484:	d8800115 	stw	r2,4(sp)
 2019488:	00bfff94 	movui	r2,65534
 201948c:	d8800015 	stw	r2,0(sp)
 2019490:	01c004c4 	movi	r7,19
 2019494:	018080f4 	movhi	r6,515
 2019498:	3181aa04 	addi	r6,r6,1704
 201949c:	000b883a 	mov	r5,zero
 20194a0:	010080b4 	movhi	r4,514
 20194a4:	21263804 	addi	r4,r4,-26400
 20194a8:	201ea0c0 	call	201ea0c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 20194ac:	e1bfff04 	addi	r6,fp,-4
 20194b0:	014080b4 	movhi	r5,514
 20194b4:	294d2404 	addi	r5,r5,13456
 20194b8:	010004c4 	movi	r4,19
 20194bc:	201f21c0 	call	201f21c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20194c0:	0001883a 	nop
 20194c4:	e037883a 	mov	sp,fp
 20194c8:	dfc00117 	ldw	ra,4(sp)
 20194cc:	df000017 	ldw	fp,0(sp)
 20194d0:	dec00204 	addi	sp,sp,8
 20194d4:	f800283a 	ret

020194d8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 20194d8:	defffb04 	addi	sp,sp,-20
 20194dc:	dfc00415 	stw	ra,16(sp)
 20194e0:	df000315 	stw	fp,12(sp)
 20194e4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 20194e8:	01414404 	movi	r5,1296
 20194ec:	010080f4 	movhi	r4,515
 20194f0:	2106f304 	addi	r4,r4,7116
 20194f4:	20195bc0 	call	20195bc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 20194f8:	01401504 	movi	r5,84
 20194fc:	010080f4 	movhi	r4,515
 2019500:	21083704 	addi	r4,r4,8412
 2019504:	20195bc0 	call	20195bc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2019508:	008080f4 	movhi	r2,515
 201950c:	1086f304 	addi	r2,r2,7116
 2019510:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2019514:	008080f4 	movhi	r2,515
 2019518:	10870e04 	addi	r2,r2,7224
 201951c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2019520:	e03ffd05 	stb	zero,-12(fp)
 2019524:	00001106 	br	201956c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2019528:	e0bffe17 	ldw	r2,-8(fp)
 201952c:	e0ffff17 	ldw	r3,-4(fp)
 2019530:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2019534:	e0bffe17 	ldw	r2,-8(fp)
 2019538:	00c00fc4 	movi	r3,63
 201953c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2019540:	e0bffe17 	ldw	r2,-8(fp)
 2019544:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2019548:	e0bffe17 	ldw	r2,-8(fp)
 201954c:	10801b04 	addi	r2,r2,108
 2019550:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2019554:	e0bfff17 	ldw	r2,-4(fp)
 2019558:	10801b04 	addi	r2,r2,108
 201955c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2019560:	e0bffd03 	ldbu	r2,-12(fp)
 2019564:	10800044 	addi	r2,r2,1
 2019568:	e0bffd05 	stb	r2,-12(fp)
 201956c:	e0bffd03 	ldbu	r2,-12(fp)
 2019570:	108002f0 	cmpltui	r2,r2,11
 2019574:	103fec1e 	bne	r2,zero,2019528 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2019578:	e0bffe17 	ldw	r2,-8(fp)
 201957c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2019580:	e0bffe17 	ldw	r2,-8(fp)
 2019584:	00c00fc4 	movi	r3,63
 2019588:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 201958c:	e0bffe17 	ldw	r2,-8(fp)
 2019590:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2019594:	d027aa15 	stw	zero,-24920(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 2019598:	008080f4 	movhi	r2,515
 201959c:	1086f304 	addi	r2,r2,7116
 20195a0:	d0a7ae15 	stw	r2,-24904(gp)
}
 20195a4:	0001883a 	nop
 20195a8:	e037883a 	mov	sp,fp
 20195ac:	dfc00117 	ldw	ra,4(sp)
 20195b0:	df000017 	ldw	fp,0(sp)
 20195b4:	dec00204 	addi	sp,sp,8
 20195b8:	f800283a 	ret

020195bc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 20195bc:	defffd04 	addi	sp,sp,-12
 20195c0:	df000215 	stw	fp,8(sp)
 20195c4:	df000204 	addi	fp,sp,8
 20195c8:	e13ffe15 	stw	r4,-8(fp)
 20195cc:	2805883a 	mov	r2,r5
 20195d0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20195d4:	00000706 	br	20195f4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 20195d8:	e0bffe17 	ldw	r2,-8(fp)
 20195dc:	10c00044 	addi	r3,r2,1
 20195e0:	e0fffe15 	stw	r3,-8(fp)
 20195e4:	10000005 	stb	zero,0(r2)
        size--;
 20195e8:	e0bfff0b 	ldhu	r2,-4(fp)
 20195ec:	10bfffc4 	addi	r2,r2,-1
 20195f0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 20195f4:	e0bfff0b 	ldhu	r2,-4(fp)
 20195f8:	103ff71e 	bne	r2,zero,20195d8 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 20195fc:	0001883a 	nop
 2019600:	e037883a 	mov	sp,fp
 2019604:	df000017 	ldw	fp,0(sp)
 2019608:	dec00104 	addi	sp,sp,4
 201960c:	f800283a 	ret

02019610 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2019610:	defffc04 	addi	sp,sp,-16
 2019614:	df000315 	stw	fp,12(sp)
 2019618:	df000304 	addi	fp,sp,12
 201961c:	e13ffd15 	stw	r4,-12(fp)
 2019620:	e17ffe15 	stw	r5,-8(fp)
 2019624:	3005883a 	mov	r2,r6
 2019628:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 201962c:	00000b06 	br	201965c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 2019630:	e0bffd17 	ldw	r2,-12(fp)
 2019634:	10c00044 	addi	r3,r2,1
 2019638:	e0fffd15 	stw	r3,-12(fp)
 201963c:	e0fffe17 	ldw	r3,-8(fp)
 2019640:	19000044 	addi	r4,r3,1
 2019644:	e13ffe15 	stw	r4,-8(fp)
 2019648:	18c00003 	ldbu	r3,0(r3)
 201964c:	10c00005 	stb	r3,0(r2)
        size--;
 2019650:	e0bfff0b 	ldhu	r2,-4(fp)
 2019654:	10bfffc4 	addi	r2,r2,-1
 2019658:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 201965c:	e0bfff0b 	ldhu	r2,-4(fp)
 2019660:	103ff31e 	bne	r2,zero,2019630 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 2019664:	0001883a 	nop
 2019668:	e037883a 	mov	sp,fp
 201966c:	df000017 	ldw	fp,0(sp)
 2019670:	dec00104 	addi	sp,sp,4
 2019674:	f800283a 	ret

02019678 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2019678:	defffb04 	addi	sp,sp,-20
 201967c:	dfc00415 	stw	ra,16(sp)
 2019680:	df000315 	stw	fp,12(sp)
 2019684:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2019688:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201968c:	0005303a 	rdctl	r2,status
 2019690:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019694:	e0ffff17 	ldw	r3,-4(fp)
 2019698:	00bfff84 	movi	r2,-2
 201969c:	1884703a 	and	r2,r3,r2
 20196a0:	1001703a 	wrctl	status,r2
  
  return context;
 20196a4:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 20196a8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 20196ac:	d0a7b503 	ldbu	r2,-24876(gp)
 20196b0:	10803fcc 	andi	r2,r2,255
 20196b4:	10001a1e 	bne	r2,zero,2019720 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 20196b8:	d0a7a703 	ldbu	r2,-24932(gp)
 20196bc:	10803fcc 	andi	r2,r2,255
 20196c0:	1000171e 	bne	r2,zero,2019720 <OS_Sched+0xa8>
            OS_SchedNew();
 20196c4:	20197480 	call	2019748 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 20196c8:	d0e7a903 	ldbu	r3,-24924(gp)
 20196cc:	d0a7a943 	ldbu	r2,-24923(gp)
 20196d0:	18c03fcc 	andi	r3,r3,255
 20196d4:	10803fcc 	andi	r2,r2,255
 20196d8:	18801126 	beq	r3,r2,2019720 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 20196dc:	d0a7a903 	ldbu	r2,-24924(gp)
 20196e0:	10c03fcc 	andi	r3,r2,255
 20196e4:	008080f4 	movhi	r2,515
 20196e8:	10883704 	addi	r2,r2,8412
 20196ec:	18c7883a 	add	r3,r3,r3
 20196f0:	18c7883a 	add	r3,r3,r3
 20196f4:	10c5883a 	add	r2,r2,r3
 20196f8:	10800017 	ldw	r2,0(r2)
 20196fc:	d0a7b115 	stw	r2,-24892(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2019700:	d0a7b117 	ldw	r2,-24892(gp)
 2019704:	10c00e17 	ldw	r3,56(r2)
 2019708:	18c00044 	addi	r3,r3,1
 201970c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2019710:	d0a7ac17 	ldw	r2,-24912(gp)
 2019714:	10800044 	addi	r2,r2,1
 2019718:	d0a7ac15 	stw	r2,-24912(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 201971c:	2021d140 	call	2021d14 <OSCtxSw>
 2019720:	e0bffd17 	ldw	r2,-12(fp)
 2019724:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019728:	e0bffe17 	ldw	r2,-8(fp)
 201972c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2019730:	0001883a 	nop
 2019734:	e037883a 	mov	sp,fp
 2019738:	dfc00117 	ldw	ra,4(sp)
 201973c:	df000017 	ldw	fp,0(sp)
 2019740:	dec00204 	addi	sp,sp,8
 2019744:	f800283a 	ret

02019748 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2019748:	defffe04 	addi	sp,sp,-8
 201974c:	df000115 	stw	fp,4(sp)
 2019750:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2019754:	d0a7b303 	ldbu	r2,-24884(gp)
 2019758:	10c03fcc 	andi	r3,r2,255
 201975c:	008080b4 	movhi	r2,514
 2019760:	108ce004 	addi	r2,r2,13184
 2019764:	10c5883a 	add	r2,r2,r3
 2019768:	10800003 	ldbu	r2,0(r2)
 201976c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2019770:	e0bfff03 	ldbu	r2,-4(fp)
 2019774:	100490fa 	slli	r2,r2,3
 2019778:	1009883a 	mov	r4,r2
 201977c:	e0ffff03 	ldbu	r3,-4(fp)
 2019780:	d0a7b344 	addi	r2,gp,-24883
 2019784:	1885883a 	add	r2,r3,r2
 2019788:	10800003 	ldbu	r2,0(r2)
 201978c:	10c03fcc 	andi	r3,r2,255
 2019790:	008080b4 	movhi	r2,514
 2019794:	108ce004 	addi	r2,r2,13184
 2019798:	10c5883a 	add	r2,r2,r3
 201979c:	10800003 	ldbu	r2,0(r2)
 20197a0:	2085883a 	add	r2,r4,r2
 20197a4:	d0a7a905 	stb	r2,-24924(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 20197a8:	0001883a 	nop
 20197ac:	e037883a 	mov	sp,fp
 20197b0:	df000017 	ldw	fp,0(sp)
 20197b4:	dec00104 	addi	sp,sp,4
 20197b8:	f800283a 	ret

020197bc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 20197bc:	defffc04 	addi	sp,sp,-16
 20197c0:	df000315 	stw	fp,12(sp)
 20197c4:	df000304 	addi	fp,sp,12
 20197c8:	e13ffe15 	stw	r4,-8(fp)
 20197cc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 20197d0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 20197d4:	00000b06 	br	2019804 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 20197d8:	e0bffe17 	ldw	r2,-8(fp)
 20197dc:	10c00044 	addi	r3,r2,1
 20197e0:	e0fffe15 	stw	r3,-8(fp)
 20197e4:	e0ffff17 	ldw	r3,-4(fp)
 20197e8:	19000044 	addi	r4,r3,1
 20197ec:	e13fff15 	stw	r4,-4(fp)
 20197f0:	18c00003 	ldbu	r3,0(r3)
 20197f4:	10c00005 	stb	r3,0(r2)
        len++;
 20197f8:	e0bffd03 	ldbu	r2,-12(fp)
 20197fc:	10800044 	addi	r2,r2,1
 2019800:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2019804:	e0bfff17 	ldw	r2,-4(fp)
 2019808:	10800003 	ldbu	r2,0(r2)
 201980c:	10803fcc 	andi	r2,r2,255
 2019810:	103ff11e 	bne	r2,zero,20197d8 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2019814:	e0bffe17 	ldw	r2,-8(fp)
 2019818:	10000005 	stb	zero,0(r2)
    return (len);
 201981c:	e0bffd03 	ldbu	r2,-12(fp)
}
 2019820:	e037883a 	mov	sp,fp
 2019824:	df000017 	ldw	fp,0(sp)
 2019828:	dec00104 	addi	sp,sp,4
 201982c:	f800283a 	ret

02019830 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2019830:	defffd04 	addi	sp,sp,-12
 2019834:	df000215 	stw	fp,8(sp)
 2019838:	df000204 	addi	fp,sp,8
 201983c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2019840:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2019844:	00000606 	br	2019860 <OS_StrLen+0x30>
        psrc++;
 2019848:	e0bfff17 	ldw	r2,-4(fp)
 201984c:	10800044 	addi	r2,r2,1
 2019850:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2019854:	e0bffe03 	ldbu	r2,-8(fp)
 2019858:	10800044 	addi	r2,r2,1
 201985c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2019860:	e0bfff17 	ldw	r2,-4(fp)
 2019864:	10800003 	ldbu	r2,0(r2)
 2019868:	10803fcc 	andi	r2,r2,255
 201986c:	103ff61e 	bne	r2,zero,2019848 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2019870:	e0bffe03 	ldbu	r2,-8(fp)
}
 2019874:	e037883a 	mov	sp,fp
 2019878:	df000017 	ldw	fp,0(sp)
 201987c:	dec00104 	addi	sp,sp,4
 2019880:	f800283a 	ret

02019884 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2019884:	defffa04 	addi	sp,sp,-24
 2019888:	dfc00515 	stw	ra,20(sp)
 201988c:	df000415 	stw	fp,16(sp)
 2019890:	df000404 	addi	fp,sp,16
 2019894:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2019898:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201989c:	0005303a 	rdctl	r2,status
 20198a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20198a4:	e0fffd17 	ldw	r3,-12(fp)
 20198a8:	00bfff84 	movi	r2,-2
 20198ac:	1884703a 	and	r2,r3,r2
 20198b0:	1001703a 	wrctl	status,r2
  
  return context;
 20198b4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 20198b8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 20198bc:	d0a7a817 	ldw	r2,-24928(gp)
 20198c0:	10800044 	addi	r2,r2,1
 20198c4:	d0a7a815 	stw	r2,-24928(gp)
 20198c8:	e0bffc17 	ldw	r2,-16(fp)
 20198cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20198d0:	e0bffe17 	ldw	r2,-8(fp)
 20198d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 20198d8:	20220280 	call	2022028 <OSTaskIdleHook>
    }
 20198dc:	003fef06 	br	201989c <OS_TaskIdle+0x18>

020198e0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 20198e0:	defffa04 	addi	sp,sp,-24
 20198e4:	dfc00515 	stw	ra,20(sp)
 20198e8:	df000415 	stw	fp,16(sp)
 20198ec:	df000404 	addi	fp,sp,16
 20198f0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20198f4:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20198f8:	00000206 	br	2019904 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 20198fc:	01003204 	movi	r4,200
 2019900:	201fadc0 	call	201fadc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2019904:	d0a7b903 	ldbu	r2,-24860(gp)
 2019908:	10803fcc 	andi	r2,r2,255
 201990c:	103ffb26 	beq	r2,zero,20198fc <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2019910:	d0a7ad17 	ldw	r2,-24908(gp)
 2019914:	01401904 	movi	r5,100
 2019918:	1009883a 	mov	r4,r2
 201991c:	20074880 	call	2007488 <__udivsi3>
 2019920:	d0a7ad15 	stw	r2,-24908(gp)
    if (OSIdleCtrMax == 0L) {
 2019924:	d0a7ad17 	ldw	r2,-24908(gp)
 2019928:	1000031e 	bne	r2,zero,2019938 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 201992c:	d027af05 	stb	zero,-24900(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2019930:	01003fc4 	movi	r4,255
 2019934:	201f7640 	call	201f764 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019938:	0005303a 	rdctl	r2,status
 201993c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019940:	e0fffd17 	ldw	r3,-12(fp)
 2019944:	00bfff84 	movi	r2,-2
 2019948:	1884703a 	and	r2,r3,r2
 201994c:	1001703a 	wrctl	status,r2
  
  return context;
 2019950:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2019954:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2019958:	d0a7a817 	ldw	r2,-24928(gp)
 201995c:	d0a7ba15 	stw	r2,-24856(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2019960:	d027a815 	stw	zero,-24928(gp)
 2019964:	e0bffc17 	ldw	r2,-16(fp)
 2019968:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201996c:	e0bffe17 	ldw	r2,-8(fp)
 2019970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2019974:	d0a7ba17 	ldw	r2,-24856(gp)
 2019978:	d0e7ad17 	ldw	r3,-24908(gp)
 201997c:	180b883a 	mov	r5,r3
 2019980:	1009883a 	mov	r4,r2
 2019984:	20074880 	call	2007488 <__udivsi3>
 2019988:	1007883a 	mov	r3,r2
 201998c:	00801904 	movi	r2,100
 2019990:	10c5c83a 	sub	r2,r2,r3
 2019994:	d0a7af05 	stb	r2,-24900(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2019998:	2021fa80 	call	2021fa8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 201999c:	20199ac0 	call	20199ac <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 20199a0:	01001904 	movi	r4,100
 20199a4:	201fadc0 	call	201fadc <OSTimeDly>
    }
 20199a8:	003fe306 	br	2019938 <OS_TaskStat+0x58>

020199ac <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 20199ac:	defffa04 	addi	sp,sp,-24
 20199b0:	dfc00515 	stw	ra,20(sp)
 20199b4:	df000415 	stw	fp,16(sp)
 20199b8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20199bc:	e03ffc05 	stb	zero,-16(fp)
 20199c0:	00002406 	br	2019a54 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 20199c4:	e0bffc03 	ldbu	r2,-16(fp)
 20199c8:	e0fffe04 	addi	r3,fp,-8
 20199cc:	180b883a 	mov	r5,r3
 20199d0:	1009883a 	mov	r4,r2
 20199d4:	201f5a40 	call	201f5a4 <OSTaskStkChk>
 20199d8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 20199dc:	e0bffc43 	ldbu	r2,-15(fp)
 20199e0:	1000191e 	bne	r2,zero,2019a48 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 20199e4:	e0fffc03 	ldbu	r3,-16(fp)
 20199e8:	008080f4 	movhi	r2,515
 20199ec:	10883704 	addi	r2,r2,8412
 20199f0:	18c7883a 	add	r3,r3,r3
 20199f4:	18c7883a 	add	r3,r3,r3
 20199f8:	10c5883a 	add	r2,r2,r3
 20199fc:	10800017 	ldw	r2,0(r2)
 2019a00:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2019a04:	e0bffd17 	ldw	r2,-12(fp)
 2019a08:	10000f26 	beq	r2,zero,2019a48 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2019a0c:	e0bffd17 	ldw	r2,-12(fp)
 2019a10:	10800060 	cmpeqi	r2,r2,1
 2019a14:	10000c1e 	bne	r2,zero,2019a48 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2019a18:	e0bffd17 	ldw	r2,-12(fp)
 2019a1c:	10c00217 	ldw	r3,8(r2)
 2019a20:	e0bffd17 	ldw	r2,-12(fp)
 2019a24:	10800317 	ldw	r2,12(r2)
 2019a28:	1085883a 	add	r2,r2,r2
 2019a2c:	1085883a 	add	r2,r2,r2
 2019a30:	1887883a 	add	r3,r3,r2
 2019a34:	e0bffd17 	ldw	r2,-12(fp)
 2019a38:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2019a3c:	e0ffff17 	ldw	r3,-4(fp)
 2019a40:	e0bffd17 	ldw	r2,-12(fp)
 2019a44:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2019a48:	e0bffc03 	ldbu	r2,-16(fp)
 2019a4c:	10800044 	addi	r2,r2,1
 2019a50:	e0bffc05 	stb	r2,-16(fp)
 2019a54:	e0bffc03 	ldbu	r2,-16(fp)
 2019a58:	10800570 	cmpltui	r2,r2,21
 2019a5c:	103fd91e 	bne	r2,zero,20199c4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2019a60:	0001883a 	nop
 2019a64:	e037883a 	mov	sp,fp
 2019a68:	dfc00117 	ldw	ra,4(sp)
 2019a6c:	df000017 	ldw	fp,0(sp)
 2019a70:	dec00204 	addi	sp,sp,8
 2019a74:	f800283a 	ret

02019a78 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2019a78:	defff204 	addi	sp,sp,-56
 2019a7c:	dfc00d15 	stw	ra,52(sp)
 2019a80:	df000c15 	stw	fp,48(sp)
 2019a84:	df000c04 	addi	fp,sp,48
 2019a88:	e17ffc15 	stw	r5,-16(fp)
 2019a8c:	e1bffd15 	stw	r6,-12(fp)
 2019a90:	3807883a 	mov	r3,r7
 2019a94:	e0800417 	ldw	r2,16(fp)
 2019a98:	e13ffb05 	stb	r4,-20(fp)
 2019a9c:	e0fffe0d 	sth	r3,-8(fp)
 2019aa0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2019aa4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019aa8:	0005303a 	rdctl	r2,status
 2019aac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019ab0:	e0fffa17 	ldw	r3,-24(fp)
 2019ab4:	00bfff84 	movi	r2,-2
 2019ab8:	1884703a 	and	r2,r3,r2
 2019abc:	1001703a 	wrctl	status,r2
  
  return context;
 2019ac0:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 2019ac4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2019ac8:	d0a7ae17 	ldw	r2,-24904(gp)
 2019acc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 2019ad0:	e0bff617 	ldw	r2,-40(fp)
 2019ad4:	10009326 	beq	r2,zero,2019d24 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2019ad8:	e0bff617 	ldw	r2,-40(fp)
 2019adc:	10800517 	ldw	r2,20(r2)
 2019ae0:	d0a7ae15 	stw	r2,-24904(gp)
 2019ae4:	e0bff417 	ldw	r2,-48(fp)
 2019ae8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019aec:	e0bff817 	ldw	r2,-32(fp)
 2019af0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2019af4:	e0bff617 	ldw	r2,-40(fp)
 2019af8:	e0fffc17 	ldw	r3,-16(fp)
 2019afc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2019b00:	e0bff617 	ldw	r2,-40(fp)
 2019b04:	e0fffb03 	ldbu	r3,-20(fp)
 2019b08:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2019b0c:	e0bff617 	ldw	r2,-40(fp)
 2019b10:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2019b14:	e0bff617 	ldw	r2,-40(fp)
 2019b18:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2019b1c:	e0bff617 	ldw	r2,-40(fp)
 2019b20:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2019b24:	e0bff617 	ldw	r2,-40(fp)
 2019b28:	e0c00317 	ldw	r3,12(fp)
 2019b2c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2019b30:	e0bff617 	ldw	r2,-40(fp)
 2019b34:	e0c00217 	ldw	r3,8(fp)
 2019b38:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2019b3c:	e0bff617 	ldw	r2,-40(fp)
 2019b40:	e0fffd17 	ldw	r3,-12(fp)
 2019b44:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2019b48:	e0bff617 	ldw	r2,-40(fp)
 2019b4c:	e0ffff0b 	ldhu	r3,-4(fp)
 2019b50:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2019b54:	e0bff617 	ldw	r2,-40(fp)
 2019b58:	e0fffe0b 	ldhu	r3,-8(fp)
 2019b5c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2019b60:	e0bff617 	ldw	r2,-40(fp)
 2019b64:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2019b68:	e0bffb03 	ldbu	r2,-20(fp)
 2019b6c:	1004d0fa 	srli	r2,r2,3
 2019b70:	1007883a 	mov	r3,r2
 2019b74:	e0bff617 	ldw	r2,-40(fp)
 2019b78:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2019b7c:	e0bffb03 	ldbu	r2,-20(fp)
 2019b80:	108001cc 	andi	r2,r2,7
 2019b84:	1007883a 	mov	r3,r2
 2019b88:	e0bff617 	ldw	r2,-40(fp)
 2019b8c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2019b90:	e0bff617 	ldw	r2,-40(fp)
 2019b94:	10800d03 	ldbu	r2,52(r2)
 2019b98:	10803fcc 	andi	r2,r2,255
 2019b9c:	00c00044 	movi	r3,1
 2019ba0:	1884983a 	sll	r2,r3,r2
 2019ba4:	1007883a 	mov	r3,r2
 2019ba8:	e0bff617 	ldw	r2,-40(fp)
 2019bac:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2019bb0:	e0bff617 	ldw	r2,-40(fp)
 2019bb4:	10800cc3 	ldbu	r2,51(r2)
 2019bb8:	10803fcc 	andi	r2,r2,255
 2019bbc:	00c00044 	movi	r3,1
 2019bc0:	1884983a 	sll	r2,r3,r2
 2019bc4:	1007883a 	mov	r3,r2
 2019bc8:	e0bff617 	ldw	r2,-40(fp)
 2019bcc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2019bd0:	e0bff617 	ldw	r2,-40(fp)
 2019bd4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2019bd8:	e0bff617 	ldw	r2,-40(fp)
 2019bdc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2019be0:	e0bff617 	ldw	r2,-40(fp)
 2019be4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2019be8:	e0bff617 	ldw	r2,-40(fp)
 2019bec:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2019bf0:	e0bff617 	ldw	r2,-40(fp)
 2019bf4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2019bf8:	e0bff617 	ldw	r2,-40(fp)
 2019bfc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2019c00:	e0bff617 	ldw	r2,-40(fp)
 2019c04:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2019c08:	e0bff617 	ldw	r2,-40(fp)
 2019c0c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2019c10:	e0bff617 	ldw	r2,-40(fp)
 2019c14:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2019c18:	e0bff617 	ldw	r2,-40(fp)
 2019c1c:	00c00fc4 	movi	r3,63
 2019c20:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2019c24:	e0bff617 	ldw	r2,-40(fp)
 2019c28:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2019c2c:	e13ff617 	ldw	r4,-40(fp)
 2019c30:	20220480 	call	2022048 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2019c34:	e13ff617 	ldw	r4,-40(fp)
 2019c38:	2021f400 	call	2021f40 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019c3c:	0005303a 	rdctl	r2,status
 2019c40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019c44:	e0fff517 	ldw	r3,-44(fp)
 2019c48:	00bfff84 	movi	r2,-2
 2019c4c:	1884703a 	and	r2,r3,r2
 2019c50:	1001703a 	wrctl	status,r2
  
  return context;
 2019c54:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2019c58:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2019c5c:	e0fffb03 	ldbu	r3,-20(fp)
 2019c60:	008080f4 	movhi	r2,515
 2019c64:	10883704 	addi	r2,r2,8412
 2019c68:	18c7883a 	add	r3,r3,r3
 2019c6c:	18c7883a 	add	r3,r3,r3
 2019c70:	10c5883a 	add	r2,r2,r3
 2019c74:	e0fff617 	ldw	r3,-40(fp)
 2019c78:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2019c7c:	d0e7aa17 	ldw	r3,-24920(gp)
 2019c80:	e0bff617 	ldw	r2,-40(fp)
 2019c84:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2019c88:	e0bff617 	ldw	r2,-40(fp)
 2019c8c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2019c90:	d0a7aa17 	ldw	r2,-24920(gp)
 2019c94:	10000326 	beq	r2,zero,2019ca4 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2019c98:	d0a7aa17 	ldw	r2,-24920(gp)
 2019c9c:	e0fff617 	ldw	r3,-40(fp)
 2019ca0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2019ca4:	e0bff617 	ldw	r2,-40(fp)
 2019ca8:	d0a7aa15 	stw	r2,-24920(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2019cac:	e0bff617 	ldw	r2,-40(fp)
 2019cb0:	10c00d83 	ldbu	r3,54(r2)
 2019cb4:	d0a7b303 	ldbu	r2,-24884(gp)
 2019cb8:	1884b03a 	or	r2,r3,r2
 2019cbc:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2019cc0:	e0bff617 	ldw	r2,-40(fp)
 2019cc4:	10800d03 	ldbu	r2,52(r2)
 2019cc8:	10c03fcc 	andi	r3,r2,255
 2019ccc:	e0bff617 	ldw	r2,-40(fp)
 2019cd0:	10800d03 	ldbu	r2,52(r2)
 2019cd4:	11003fcc 	andi	r4,r2,255
 2019cd8:	d0a7b344 	addi	r2,gp,-24883
 2019cdc:	2085883a 	add	r2,r4,r2
 2019ce0:	11000003 	ldbu	r4,0(r2)
 2019ce4:	e0bff617 	ldw	r2,-40(fp)
 2019ce8:	10800d43 	ldbu	r2,53(r2)
 2019cec:	2084b03a 	or	r2,r4,r2
 2019cf0:	1009883a 	mov	r4,r2
 2019cf4:	d0a7b344 	addi	r2,gp,-24883
 2019cf8:	1885883a 	add	r2,r3,r2
 2019cfc:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2019d00:	d0a7af43 	ldbu	r2,-24899(gp)
 2019d04:	10800044 	addi	r2,r2,1
 2019d08:	d0a7af45 	stb	r2,-24899(gp)
 2019d0c:	e0bff417 	ldw	r2,-48(fp)
 2019d10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019d14:	e0bff717 	ldw	r2,-36(fp)
 2019d18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2019d1c:	0005883a 	mov	r2,zero
 2019d20:	00000506 	br	2019d38 <OS_TCBInit+0x2c0>
 2019d24:	e0bff417 	ldw	r2,-48(fp)
 2019d28:	e0bff915 	stw	r2,-28(fp)
 2019d2c:	e0bff917 	ldw	r2,-28(fp)
 2019d30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2019d34:	00801084 	movi	r2,66
}
 2019d38:	e037883a 	mov	sp,fp
 2019d3c:	dfc00117 	ldw	ra,4(sp)
 2019d40:	df000017 	ldw	fp,0(sp)
 2019d44:	dec00204 	addi	sp,sp,8
 2019d48:	f800283a 	ret

02019d4c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2019d4c:	defffe04 	addi	sp,sp,-8
 2019d50:	df000115 	stw	fp,4(sp)
 2019d54:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2019d58:	d0a03f04 	addi	r2,gp,-32516
 2019d5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2019d60:	d0a04004 	addi	r2,gp,-32512
 2019d64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2019d68:	d0a04184 	addi	r2,gp,-32506
 2019d6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2019d70:	d0a04204 	addi	r2,gp,-32504
 2019d74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2019d78:	d0a04104 	addi	r2,gp,-32508
 2019d7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2019d80:	d0a04284 	addi	r2,gp,-32502
 2019d84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2019d88:	d0a04304 	addi	r2,gp,-32500
 2019d8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2019d90:	d0a04384 	addi	r2,gp,-32498
 2019d94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2019d98:	d0a04404 	addi	r2,gp,-32496
 2019d9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2019da0:	d0a04484 	addi	r2,gp,-32494
 2019da4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2019da8:	d0a04504 	addi	r2,gp,-32492
 2019dac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2019db0:	d0a04584 	addi	r2,gp,-32490
 2019db4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 2019db8:	d0a04604 	addi	r2,gp,-32488
 2019dbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2019dc0:	d0a04684 	addi	r2,gp,-32486
 2019dc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 2019dc8:	d0a04704 	addi	r2,gp,-32484
 2019dcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2019dd0:	d0a04784 	addi	r2,gp,-32482
 2019dd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 2019dd8:	d0a04804 	addi	r2,gp,-32480
 2019ddc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2019de0:	d0a04884 	addi	r2,gp,-32478
 2019de4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2019de8:	d0a04904 	addi	r2,gp,-32476
 2019dec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2019df0:	d0a04984 	addi	r2,gp,-32474
 2019df4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2019df8:	d0a04a04 	addi	r2,gp,-32472
 2019dfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2019e00:	d0a04a84 	addi	r2,gp,-32470
 2019e04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2019e08:	d0a04b04 	addi	r2,gp,-32468
 2019e0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2019e10:	d0a04b84 	addi	r2,gp,-32466
 2019e14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2019e18:	d0a04c04 	addi	r2,gp,-32464
 2019e1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2019e20:	d0a04c84 	addi	r2,gp,-32462
 2019e24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2019e28:	d0a04d04 	addi	r2,gp,-32460
 2019e2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2019e30:	d0a04d84 	addi	r2,gp,-32458
 2019e34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2019e38:	d0a04e04 	addi	r2,gp,-32456
 2019e3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2019e40:	d0a04e84 	addi	r2,gp,-32454
 2019e44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2019e48:	d0a04f04 	addi	r2,gp,-32452
 2019e4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2019e50:	d0a04f84 	addi	r2,gp,-32450
 2019e54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2019e58:	d0a05004 	addi	r2,gp,-32448
 2019e5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2019e60:	d0a05084 	addi	r2,gp,-32446
 2019e64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2019e68:	d0a05104 	addi	r2,gp,-32444
 2019e6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2019e70:	d0a05184 	addi	r2,gp,-32442
 2019e74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2019e78:	d0a05204 	addi	r2,gp,-32440
 2019e7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2019e80:	d0a05284 	addi	r2,gp,-32438
 2019e84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2019e88:	d0a05304 	addi	r2,gp,-32436
 2019e8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2019e90:	d0a05384 	addi	r2,gp,-32434
 2019e94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 2019e98:	d0a05404 	addi	r2,gp,-32432
 2019e9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2019ea0:	d0a05484 	addi	r2,gp,-32430
 2019ea4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 2019ea8:	d0a05504 	addi	r2,gp,-32428
 2019eac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2019eb0:	d0a05584 	addi	r2,gp,-32426
 2019eb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 2019eb8:	d0a05604 	addi	r2,gp,-32424
 2019ebc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2019ec0:	d0a05b04 	addi	r2,gp,-32404
 2019ec4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 2019ec8:	0001883a 	nop
 2019ecc:	e037883a 	mov	sp,fp
 2019ed0:	df000017 	ldw	fp,0(sp)
 2019ed4:	dec00104 	addi	sp,sp,4
 2019ed8:	f800283a 	ret

02019edc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2019edc:	defff204 	addi	sp,sp,-56
 2019ee0:	df000d15 	stw	fp,52(sp)
 2019ee4:	df000d04 	addi	fp,sp,52
 2019ee8:	e13ffc15 	stw	r4,-16(fp)
 2019eec:	2807883a 	mov	r3,r5
 2019ef0:	3005883a 	mov	r2,r6
 2019ef4:	e1ffff15 	stw	r7,-4(fp)
 2019ef8:	e0fffd0d 	sth	r3,-12(fp)
 2019efc:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2019f00:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019f04:	e0bfff17 	ldw	r2,-4(fp)
 2019f08:	1000021e 	bne	r2,zero,2019f14 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2019f0c:	0005883a 	mov	r2,zero
 2019f10:	0000b006 	br	201a1d4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2019f14:	e0bffc17 	ldw	r2,-16(fp)
 2019f18:	1000051e 	bne	r2,zero,2019f30 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2019f1c:	e0bfff17 	ldw	r2,-4(fp)
 2019f20:	00c01b84 	movi	r3,110
 2019f24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019f28:	0005883a 	mov	r2,zero
 2019f2c:	0000a906 	br	201a1d4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2019f30:	e0bffc17 	ldw	r2,-16(fp)
 2019f34:	10800003 	ldbu	r2,0(r2)
 2019f38:	10803fcc 	andi	r2,r2,255
 2019f3c:	10800160 	cmpeqi	r2,r2,5
 2019f40:	1000051e 	bne	r2,zero,2019f58 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2019f44:	e0bfff17 	ldw	r2,-4(fp)
 2019f48:	00c00044 	movi	r3,1
 2019f4c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2019f50:	0005883a 	mov	r2,zero
 2019f54:	00009f06 	br	201a1d4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2019f58:	e0fffe03 	ldbu	r3,-8(fp)
 2019f5c:	00bfe004 	movi	r2,-128
 2019f60:	1884703a 	and	r2,r3,r2
 2019f64:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2019f68:	e0bff503 	ldbu	r2,-44(fp)
 2019f6c:	10000626 	beq	r2,zero,2019f88 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2019f70:	e0bffe03 	ldbu	r2,-8(fp)
 2019f74:	10801fcc 	andi	r2,r2,127
 2019f78:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2019f7c:	00800044 	movi	r2,1
 2019f80:	e0bff385 	stb	r2,-50(fp)
 2019f84:	00000106 	br	2019f8c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2019f88:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2019f8c:	e0bfff17 	ldw	r2,-4(fp)
 2019f90:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019f94:	0005303a 	rdctl	r2,status
 2019f98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019f9c:	e0fffb17 	ldw	r3,-20(fp)
 2019fa0:	00bfff84 	movi	r2,-2
 2019fa4:	1884703a 	and	r2,r3,r2
 2019fa8:	1001703a 	wrctl	status,r2
  
  return context;
 2019fac:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2019fb0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 2019fb4:	e0bffe03 	ldbu	r2,-8(fp)
 2019fb8:	10c00060 	cmpeqi	r3,r2,1
 2019fbc:	18005f1e 	bne	r3,zero,201a13c <OSFlagAccept+0x260>
 2019fc0:	10c00088 	cmpgei	r3,r2,2
 2019fc4:	1800021e 	bne	r3,zero,2019fd0 <OSFlagAccept+0xf4>
 2019fc8:	10003f26 	beq	r2,zero,201a0c8 <OSFlagAccept+0x1ec>
 2019fcc:	00007706 	br	201a1ac <OSFlagAccept+0x2d0>
 2019fd0:	10c000a0 	cmpeqi	r3,r2,2
 2019fd4:	1800031e 	bne	r3,zero,2019fe4 <OSFlagAccept+0x108>
 2019fd8:	108000e0 	cmpeqi	r2,r2,3
 2019fdc:	10001e1e 	bne	r2,zero,201a058 <OSFlagAccept+0x17c>
 2019fe0:	00007206 	br	201a1ac <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2019fe4:	e0bffc17 	ldw	r2,-16(fp)
 2019fe8:	10c0020b 	ldhu	r3,8(r2)
 2019fec:	e0bffd0b 	ldhu	r2,-12(fp)
 2019ff0:	1884703a 	and	r2,r3,r2
 2019ff4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2019ff8:	e0fff30b 	ldhu	r3,-52(fp)
 2019ffc:	e0bffd0b 	ldhu	r2,-12(fp)
 201a000:	18800d1e 	bne	r3,r2,201a038 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a004:	e0bff383 	ldbu	r2,-50(fp)
 201a008:	10800058 	cmpnei	r2,r2,1
 201a00c:	10000d1e 	bne	r2,zero,201a044 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 201a010:	e0bffc17 	ldw	r2,-16(fp)
 201a014:	1080020b 	ldhu	r2,8(r2)
 201a018:	1007883a 	mov	r3,r2
 201a01c:	e0bff30b 	ldhu	r2,-52(fp)
 201a020:	0084303a 	nor	r2,zero,r2
 201a024:	1884703a 	and	r2,r3,r2
 201a028:	1007883a 	mov	r3,r2
 201a02c:	e0bffc17 	ldw	r2,-16(fp)
 201a030:	10c0020d 	sth	r3,8(r2)
 201a034:	00000306 	br	201a044 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201a038:	e0bfff17 	ldw	r2,-4(fp)
 201a03c:	00c01c04 	movi	r3,112
 201a040:	10c00005 	stb	r3,0(r2)
 201a044:	e0bff417 	ldw	r2,-48(fp)
 201a048:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a04c:	e0bff617 	ldw	r2,-40(fp)
 201a050:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201a054:	00005e06 	br	201a1d0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 201a058:	e0bffc17 	ldw	r2,-16(fp)
 201a05c:	10c0020b 	ldhu	r3,8(r2)
 201a060:	e0bffd0b 	ldhu	r2,-12(fp)
 201a064:	1884703a 	and	r2,r3,r2
 201a068:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 201a06c:	e0bff30b 	ldhu	r2,-52(fp)
 201a070:	10000d26 	beq	r2,zero,201a0a8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a074:	e0bff383 	ldbu	r2,-50(fp)
 201a078:	10800058 	cmpnei	r2,r2,1
 201a07c:	10000d1e 	bne	r2,zero,201a0b4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 201a080:	e0bffc17 	ldw	r2,-16(fp)
 201a084:	1080020b 	ldhu	r2,8(r2)
 201a088:	1007883a 	mov	r3,r2
 201a08c:	e0bff30b 	ldhu	r2,-52(fp)
 201a090:	0084303a 	nor	r2,zero,r2
 201a094:	1884703a 	and	r2,r3,r2
 201a098:	1007883a 	mov	r3,r2
 201a09c:	e0bffc17 	ldw	r2,-16(fp)
 201a0a0:	10c0020d 	sth	r3,8(r2)
 201a0a4:	00000306 	br	201a0b4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201a0a8:	e0bfff17 	ldw	r2,-4(fp)
 201a0ac:	00c01c04 	movi	r3,112
 201a0b0:	10c00005 	stb	r3,0(r2)
 201a0b4:	e0bff417 	ldw	r2,-48(fp)
 201a0b8:	e0bff715 	stw	r2,-36(fp)
 201a0bc:	e0bff717 	ldw	r2,-36(fp)
 201a0c0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201a0c4:	00004206 	br	201a1d0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 201a0c8:	e0bffc17 	ldw	r2,-16(fp)
 201a0cc:	1080020b 	ldhu	r2,8(r2)
 201a0d0:	0084303a 	nor	r2,zero,r2
 201a0d4:	1007883a 	mov	r3,r2
 201a0d8:	e0bffd0b 	ldhu	r2,-12(fp)
 201a0dc:	1884703a 	and	r2,r3,r2
 201a0e0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201a0e4:	e0fff30b 	ldhu	r3,-52(fp)
 201a0e8:	e0bffd0b 	ldhu	r2,-12(fp)
 201a0ec:	18800b1e 	bne	r3,r2,201a11c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a0f0:	e0bff383 	ldbu	r2,-50(fp)
 201a0f4:	10800058 	cmpnei	r2,r2,1
 201a0f8:	10000b1e 	bne	r2,zero,201a128 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 201a0fc:	e0bffc17 	ldw	r2,-16(fp)
 201a100:	10c0020b 	ldhu	r3,8(r2)
 201a104:	e0bff30b 	ldhu	r2,-52(fp)
 201a108:	1884b03a 	or	r2,r3,r2
 201a10c:	1007883a 	mov	r3,r2
 201a110:	e0bffc17 	ldw	r2,-16(fp)
 201a114:	10c0020d 	sth	r3,8(r2)
 201a118:	00000306 	br	201a128 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201a11c:	e0bfff17 	ldw	r2,-4(fp)
 201a120:	00c01c04 	movi	r3,112
 201a124:	10c00005 	stb	r3,0(r2)
 201a128:	e0bff417 	ldw	r2,-48(fp)
 201a12c:	e0bff815 	stw	r2,-32(fp)
 201a130:	e0bff817 	ldw	r2,-32(fp)
 201a134:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201a138:	00002506 	br	201a1d0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 201a13c:	e0bffc17 	ldw	r2,-16(fp)
 201a140:	1080020b 	ldhu	r2,8(r2)
 201a144:	0084303a 	nor	r2,zero,r2
 201a148:	1007883a 	mov	r3,r2
 201a14c:	e0bffd0b 	ldhu	r2,-12(fp)
 201a150:	1884703a 	and	r2,r3,r2
 201a154:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 201a158:	e0bff30b 	ldhu	r2,-52(fp)
 201a15c:	10000b26 	beq	r2,zero,201a18c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a160:	e0bff383 	ldbu	r2,-50(fp)
 201a164:	10800058 	cmpnei	r2,r2,1
 201a168:	10000b1e 	bne	r2,zero,201a198 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 201a16c:	e0bffc17 	ldw	r2,-16(fp)
 201a170:	10c0020b 	ldhu	r3,8(r2)
 201a174:	e0bff30b 	ldhu	r2,-52(fp)
 201a178:	1884b03a 	or	r2,r3,r2
 201a17c:	1007883a 	mov	r3,r2
 201a180:	e0bffc17 	ldw	r2,-16(fp)
 201a184:	10c0020d 	sth	r3,8(r2)
 201a188:	00000306 	br	201a198 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201a18c:	e0bfff17 	ldw	r2,-4(fp)
 201a190:	00c01c04 	movi	r3,112
 201a194:	10c00005 	stb	r3,0(r2)
 201a198:	e0bff417 	ldw	r2,-48(fp)
 201a19c:	e0bff915 	stw	r2,-28(fp)
 201a1a0:	e0bff917 	ldw	r2,-28(fp)
 201a1a4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201a1a8:	00000906 	br	201a1d0 <OSFlagAccept+0x2f4>
 201a1ac:	e0bff417 	ldw	r2,-48(fp)
 201a1b0:	e0bffa15 	stw	r2,-24(fp)
 201a1b4:	e0bffa17 	ldw	r2,-24(fp)
 201a1b8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 201a1bc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 201a1c0:	e0bfff17 	ldw	r2,-4(fp)
 201a1c4:	00c01bc4 	movi	r3,111
 201a1c8:	10c00005 	stb	r3,0(r2)
             break;
 201a1cc:	0001883a 	nop
    }
    return (flags_rdy);
 201a1d0:	e0bff30b 	ldhu	r2,-52(fp)
}
 201a1d4:	e037883a 	mov	sp,fp
 201a1d8:	df000017 	ldw	fp,0(sp)
 201a1dc:	dec00104 	addi	sp,sp,4
 201a1e0:	f800283a 	ret

0201a1e4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 201a1e4:	defff804 	addi	sp,sp,-32
 201a1e8:	df000715 	stw	fp,28(sp)
 201a1ec:	df000704 	addi	fp,sp,28
 201a1f0:	2005883a 	mov	r2,r4
 201a1f4:	e17fff15 	stw	r5,-4(fp)
 201a1f8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 201a1fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 201a200:	e0bfff17 	ldw	r2,-4(fp)
 201a204:	1000021e 	bne	r2,zero,201a210 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 201a208:	0005883a 	mov	r2,zero
 201a20c:	00003306 	br	201a2dc <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 201a210:	d0a7b503 	ldbu	r2,-24876(gp)
 201a214:	10803fcc 	andi	r2,r2,255
 201a218:	10000526 	beq	r2,zero,201a230 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 201a21c:	e0bfff17 	ldw	r2,-4(fp)
 201a220:	00c00404 	movi	r3,16
 201a224:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 201a228:	0005883a 	mov	r2,zero
 201a22c:	00002b06 	br	201a2dc <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a230:	0005303a 	rdctl	r2,status
 201a234:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a238:	e0fffd17 	ldw	r3,-12(fp)
 201a23c:	00bfff84 	movi	r2,-2
 201a240:	1884703a 	and	r2,r3,r2
 201a244:	1001703a 	wrctl	status,r2
  
  return context;
 201a248:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201a24c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 201a250:	d0a7b817 	ldw	r2,-24864(gp)
 201a254:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 201a258:	e0bffb17 	ldw	r2,-20(fp)
 201a25c:	10001726 	beq	r2,zero,201a2bc <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 201a260:	d0a7b817 	ldw	r2,-24864(gp)
 201a264:	10800117 	ldw	r2,4(r2)
 201a268:	d0a7b815 	stw	r2,-24864(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 201a26c:	e0bffb17 	ldw	r2,-20(fp)
 201a270:	00c00144 	movi	r3,5
 201a274:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 201a278:	e0bffb17 	ldw	r2,-20(fp)
 201a27c:	e0fffe0b 	ldhu	r3,-8(fp)
 201a280:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 201a284:	e0bffb17 	ldw	r2,-20(fp)
 201a288:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 201a28c:	e0bffb17 	ldw	r2,-20(fp)
 201a290:	00c00fc4 	movi	r3,63
 201a294:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201a298:	e0bffb17 	ldw	r2,-20(fp)
 201a29c:	100002c5 	stb	zero,11(r2)
 201a2a0:	e0bff917 	ldw	r2,-28(fp)
 201a2a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a2a8:	e0bffa17 	ldw	r2,-24(fp)
 201a2ac:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 201a2b0:	e0bfff17 	ldw	r2,-4(fp)
 201a2b4:	10000005 	stb	zero,0(r2)
 201a2b8:	00000706 	br	201a2d8 <OSFlagCreate+0xf4>
 201a2bc:	e0bff917 	ldw	r2,-28(fp)
 201a2c0:	e0bffc15 	stw	r2,-16(fp)
 201a2c4:	e0bffc17 	ldw	r2,-16(fp)
 201a2c8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 201a2cc:	e0bfff17 	ldw	r2,-4(fp)
 201a2d0:	00c01c84 	movi	r3,114
 201a2d4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 201a2d8:	e0bffb17 	ldw	r2,-20(fp)
}
 201a2dc:	e037883a 	mov	sp,fp
 201a2e0:	df000017 	ldw	fp,0(sp)
 201a2e4:	dec00104 	addi	sp,sp,4
 201a2e8:	f800283a 	ret

0201a2ec <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 201a2ec:	defff204 	addi	sp,sp,-56
 201a2f0:	dfc00d15 	stw	ra,52(sp)
 201a2f4:	df000c15 	stw	fp,48(sp)
 201a2f8:	df000c04 	addi	fp,sp,48
 201a2fc:	e13ffd15 	stw	r4,-12(fp)
 201a300:	2805883a 	mov	r2,r5
 201a304:	e1bfff15 	stw	r6,-4(fp)
 201a308:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201a30c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201a310:	e0bfff17 	ldw	r2,-4(fp)
 201a314:	1000021e 	bne	r2,zero,201a320 <OSFlagDel+0x34>
        return (pgrp);
 201a318:	e0bffd17 	ldw	r2,-12(fp)
 201a31c:	00008006 	br	201a520 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 201a320:	e0bffd17 	ldw	r2,-12(fp)
 201a324:	1000051e 	bne	r2,zero,201a33c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201a328:	e0bfff17 	ldw	r2,-4(fp)
 201a32c:	00c01b84 	movi	r3,110
 201a330:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 201a334:	e0bffd17 	ldw	r2,-12(fp)
 201a338:	00007906 	br	201a520 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201a33c:	d0a7b503 	ldbu	r2,-24876(gp)
 201a340:	10803fcc 	andi	r2,r2,255
 201a344:	10000526 	beq	r2,zero,201a35c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201a348:	e0bfff17 	ldw	r2,-4(fp)
 201a34c:	00c003c4 	movi	r3,15
 201a350:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 201a354:	e0bffd17 	ldw	r2,-12(fp)
 201a358:	00007106 	br	201a520 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 201a35c:	e0bffd17 	ldw	r2,-12(fp)
 201a360:	10800003 	ldbu	r2,0(r2)
 201a364:	10803fcc 	andi	r2,r2,255
 201a368:	10800160 	cmpeqi	r2,r2,5
 201a36c:	1000051e 	bne	r2,zero,201a384 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 201a370:	e0bfff17 	ldw	r2,-4(fp)
 201a374:	00c00044 	movi	r3,1
 201a378:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 201a37c:	e0bffd17 	ldw	r2,-12(fp)
 201a380:	00006706 	br	201a520 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a384:	0005303a 	rdctl	r2,status
 201a388:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a38c:	e0fffc17 	ldw	r3,-16(fp)
 201a390:	00bfff84 	movi	r2,-2
 201a394:	1884703a 	and	r2,r3,r2
 201a398:	1001703a 	wrctl	status,r2
  
  return context;
 201a39c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a3a0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 201a3a4:	e0bffd17 	ldw	r2,-12(fp)
 201a3a8:	10800117 	ldw	r2,4(r2)
 201a3ac:	10000326 	beq	r2,zero,201a3bc <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201a3b0:	00800044 	movi	r2,1
 201a3b4:	e0bff405 	stb	r2,-48(fp)
 201a3b8:	00000106 	br	201a3c0 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201a3bc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 201a3c0:	e0bffe03 	ldbu	r2,-8(fp)
 201a3c4:	10000326 	beq	r2,zero,201a3d4 <OSFlagDel+0xe8>
 201a3c8:	10800060 	cmpeqi	r2,r2,1
 201a3cc:	1000231e 	bne	r2,zero,201a45c <OSFlagDel+0x170>
 201a3d0:	00004806 	br	201a4f4 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 201a3d4:	e0bff403 	ldbu	r2,-48(fp)
 201a3d8:	1000161e 	bne	r2,zero,201a434 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 201a3dc:	e0bffd17 	ldw	r2,-12(fp)
 201a3e0:	00c00fc4 	movi	r3,63
 201a3e4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201a3e8:	e0bffd17 	ldw	r2,-12(fp)
 201a3ec:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201a3f0:	e0bffd17 	ldw	r2,-12(fp)
 201a3f4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 201a3f8:	d0e7b817 	ldw	r3,-24864(gp)
 201a3fc:	e0bffd17 	ldw	r2,-12(fp)
 201a400:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 201a404:	e0bffd17 	ldw	r2,-12(fp)
 201a408:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 201a40c:	e0bffd17 	ldw	r2,-12(fp)
 201a410:	d0a7b815 	stw	r2,-24864(gp)
 201a414:	e0bff717 	ldw	r2,-36(fp)
 201a418:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a41c:	e0bff817 	ldw	r2,-32(fp)
 201a420:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 201a424:	e0bfff17 	ldw	r2,-4(fp)
 201a428:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 201a42c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 201a430:	00003a06 	br	201a51c <OSFlagDel+0x230>
 201a434:	e0bff717 	ldw	r2,-36(fp)
 201a438:	e0bff915 	stw	r2,-28(fp)
 201a43c:	e0bff917 	ldw	r2,-28(fp)
 201a440:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 201a444:	e0bfff17 	ldw	r2,-4(fp)
 201a448:	00c01244 	movi	r3,73
 201a44c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 201a450:	e0bffd17 	ldw	r2,-12(fp)
 201a454:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201a458:	00003006 	br	201a51c <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201a45c:	e0bffd17 	ldw	r2,-12(fp)
 201a460:	10800117 	ldw	r2,4(r2)
 201a464:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 201a468:	00000606 	br	201a484 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 201a46c:	000b883a 	mov	r5,zero
 201a470:	e13ff517 	ldw	r4,-44(fp)
 201a474:	201b4580 	call	201b458 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 201a478:	e0bff517 	ldw	r2,-44(fp)
 201a47c:	10800017 	ldw	r2,0(r2)
 201a480:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 201a484:	e0bff517 	ldw	r2,-44(fp)
 201a488:	103ff81e 	bne	r2,zero,201a46c <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 201a48c:	e0bffd17 	ldw	r2,-12(fp)
 201a490:	00c00fc4 	movi	r3,63
 201a494:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201a498:	e0bffd17 	ldw	r2,-12(fp)
 201a49c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201a4a0:	e0bffd17 	ldw	r2,-12(fp)
 201a4a4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 201a4a8:	d0e7b817 	ldw	r3,-24864(gp)
 201a4ac:	e0bffd17 	ldw	r2,-12(fp)
 201a4b0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 201a4b4:	e0bffd17 	ldw	r2,-12(fp)
 201a4b8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 201a4bc:	e0bffd17 	ldw	r2,-12(fp)
 201a4c0:	d0a7b815 	stw	r2,-24864(gp)
 201a4c4:	e0bff717 	ldw	r2,-36(fp)
 201a4c8:	e0bffa15 	stw	r2,-24(fp)
 201a4cc:	e0bffa17 	ldw	r2,-24(fp)
 201a4d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201a4d4:	e0bff403 	ldbu	r2,-48(fp)
 201a4d8:	10800058 	cmpnei	r2,r2,1
 201a4dc:	1000011e 	bne	r2,zero,201a4e4 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201a4e0:	20196780 	call	2019678 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 201a4e4:	e0bfff17 	ldw	r2,-4(fp)
 201a4e8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 201a4ec:	e03ff615 	stw	zero,-40(fp)
             break;
 201a4f0:	00000a06 	br	201a51c <OSFlagDel+0x230>
 201a4f4:	e0bff717 	ldw	r2,-36(fp)
 201a4f8:	e0bffb15 	stw	r2,-20(fp)
 201a4fc:	e0bffb17 	ldw	r2,-20(fp)
 201a500:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 201a504:	e0bfff17 	ldw	r2,-4(fp)
 201a508:	00c001c4 	movi	r3,7
 201a50c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 201a510:	e0bffd17 	ldw	r2,-12(fp)
 201a514:	e0bff615 	stw	r2,-40(fp)
             break;
 201a518:	0001883a 	nop
    }
    return (pgrp_return);
 201a51c:	e0bff617 	ldw	r2,-40(fp)
}
 201a520:	e037883a 	mov	sp,fp
 201a524:	dfc00117 	ldw	ra,4(sp)
 201a528:	df000017 	ldw	fp,0(sp)
 201a52c:	dec00204 	addi	sp,sp,8
 201a530:	f800283a 	ret

0201a534 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 201a534:	defff604 	addi	sp,sp,-40
 201a538:	dfc00915 	stw	ra,36(sp)
 201a53c:	df000815 	stw	fp,32(sp)
 201a540:	df000804 	addi	fp,sp,32
 201a544:	e13ffd15 	stw	r4,-12(fp)
 201a548:	e17ffe15 	stw	r5,-8(fp)
 201a54c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201a550:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201a554:	e0bfff17 	ldw	r2,-4(fp)
 201a558:	1000021e 	bne	r2,zero,201a564 <OSFlagNameGet+0x30>
        return (0);
 201a55c:	0005883a 	mov	r2,zero
 201a560:	00003906 	br	201a648 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 201a564:	e0bffd17 	ldw	r2,-12(fp)
 201a568:	1000051e 	bne	r2,zero,201a580 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201a56c:	e0bfff17 	ldw	r2,-4(fp)
 201a570:	00c01b84 	movi	r3,110
 201a574:	10c00005 	stb	r3,0(r2)
        return (0);
 201a578:	0005883a 	mov	r2,zero
 201a57c:	00003206 	br	201a648 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201a580:	e0bffe17 	ldw	r2,-8(fp)
 201a584:	1000051e 	bne	r2,zero,201a59c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201a588:	e0bfff17 	ldw	r2,-4(fp)
 201a58c:	00c00304 	movi	r3,12
 201a590:	10c00005 	stb	r3,0(r2)
        return (0);
 201a594:	0005883a 	mov	r2,zero
 201a598:	00002b06 	br	201a648 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201a59c:	d0a7b503 	ldbu	r2,-24876(gp)
 201a5a0:	10803fcc 	andi	r2,r2,255
 201a5a4:	10000526 	beq	r2,zero,201a5bc <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 201a5a8:	e0bfff17 	ldw	r2,-4(fp)
 201a5ac:	00c00444 	movi	r3,17
 201a5b0:	10c00005 	stb	r3,0(r2)
        return (0);
 201a5b4:	0005883a 	mov	r2,zero
 201a5b8:	00002306 	br	201a648 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a5bc:	0005303a 	rdctl	r2,status
 201a5c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a5c4:	e0fffc17 	ldw	r3,-16(fp)
 201a5c8:	00bfff84 	movi	r2,-2
 201a5cc:	1884703a 	and	r2,r3,r2
 201a5d0:	1001703a 	wrctl	status,r2
  
  return context;
 201a5d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a5d8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 201a5dc:	e0bffd17 	ldw	r2,-12(fp)
 201a5e0:	10800003 	ldbu	r2,0(r2)
 201a5e4:	10803fcc 	andi	r2,r2,255
 201a5e8:	10800160 	cmpeqi	r2,r2,5
 201a5ec:	1000091e 	bne	r2,zero,201a614 <OSFlagNameGet+0xe0>
 201a5f0:	e0bff817 	ldw	r2,-32(fp)
 201a5f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a5f8:	e0bff917 	ldw	r2,-28(fp)
 201a5fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 201a600:	e0bfff17 	ldw	r2,-4(fp)
 201a604:	00c00044 	movi	r3,1
 201a608:	10c00005 	stb	r3,0(r2)
        return (0);
 201a60c:	0005883a 	mov	r2,zero
 201a610:	00000d06 	br	201a648 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 201a614:	e0bffd17 	ldw	r2,-12(fp)
 201a618:	10800284 	addi	r2,r2,10
 201a61c:	100b883a 	mov	r5,r2
 201a620:	e13ffe17 	ldw	r4,-8(fp)
 201a624:	20197bc0 	call	20197bc <OS_StrCopy>
 201a628:	e0bffb05 	stb	r2,-20(fp)
 201a62c:	e0bff817 	ldw	r2,-32(fp)
 201a630:	e0bffa15 	stw	r2,-24(fp)
 201a634:	e0bffa17 	ldw	r2,-24(fp)
 201a638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201a63c:	e0bfff17 	ldw	r2,-4(fp)
 201a640:	10000005 	stb	zero,0(r2)
    return (len);
 201a644:	e0bffb03 	ldbu	r2,-20(fp)
}
 201a648:	e037883a 	mov	sp,fp
 201a64c:	dfc00117 	ldw	ra,4(sp)
 201a650:	df000017 	ldw	fp,0(sp)
 201a654:	dec00204 	addi	sp,sp,8
 201a658:	f800283a 	ret

0201a65c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 201a65c:	defff504 	addi	sp,sp,-44
 201a660:	dfc00a15 	stw	ra,40(sp)
 201a664:	df000915 	stw	fp,36(sp)
 201a668:	df000904 	addi	fp,sp,36
 201a66c:	e13ffd15 	stw	r4,-12(fp)
 201a670:	e17ffe15 	stw	r5,-8(fp)
 201a674:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201a678:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201a67c:	e0bfff17 	ldw	r2,-4(fp)
 201a680:	10004326 	beq	r2,zero,201a790 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 201a684:	e0bffd17 	ldw	r2,-12(fp)
 201a688:	1000041e 	bne	r2,zero,201a69c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201a68c:	e0bfff17 	ldw	r2,-4(fp)
 201a690:	00c01b84 	movi	r3,110
 201a694:	10c00005 	stb	r3,0(r2)
        return;
 201a698:	00003e06 	br	201a794 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201a69c:	e0bffe17 	ldw	r2,-8(fp)
 201a6a0:	1000041e 	bne	r2,zero,201a6b4 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 201a6a4:	e0bfff17 	ldw	r2,-4(fp)
 201a6a8:	00c00304 	movi	r3,12
 201a6ac:	10c00005 	stb	r3,0(r2)
        return;
 201a6b0:	00003806 	br	201a794 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201a6b4:	d0a7b503 	ldbu	r2,-24876(gp)
 201a6b8:	10803fcc 	andi	r2,r2,255
 201a6bc:	10000426 	beq	r2,zero,201a6d0 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 201a6c0:	e0bfff17 	ldw	r2,-4(fp)
 201a6c4:	00c00484 	movi	r3,18
 201a6c8:	10c00005 	stb	r3,0(r2)
        return;
 201a6cc:	00003106 	br	201a794 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a6d0:	0005303a 	rdctl	r2,status
 201a6d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a6d8:	e0fffc17 	ldw	r3,-16(fp)
 201a6dc:	00bfff84 	movi	r2,-2
 201a6e0:	1884703a 	and	r2,r3,r2
 201a6e4:	1001703a 	wrctl	status,r2
  
  return context;
 201a6e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a6ec:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 201a6f0:	e0bffd17 	ldw	r2,-12(fp)
 201a6f4:	10800003 	ldbu	r2,0(r2)
 201a6f8:	10803fcc 	andi	r2,r2,255
 201a6fc:	10800160 	cmpeqi	r2,r2,5
 201a700:	1000081e 	bne	r2,zero,201a724 <OSFlagNameSet+0xc8>
 201a704:	e0bff717 	ldw	r2,-36(fp)
 201a708:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a70c:	e0bff817 	ldw	r2,-32(fp)
 201a710:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 201a714:	e0bfff17 	ldw	r2,-4(fp)
 201a718:	00c00044 	movi	r3,1
 201a71c:	10c00005 	stb	r3,0(r2)
        return;
 201a720:	00001c06 	br	201a794 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 201a724:	e13ffe17 	ldw	r4,-8(fp)
 201a728:	20198300 	call	2019830 <OS_StrLen>
 201a72c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 201a730:	e0bffa03 	ldbu	r2,-24(fp)
 201a734:	10800830 	cmpltui	r2,r2,32
 201a738:	1000081e 	bne	r2,zero,201a75c <OSFlagNameSet+0x100>
 201a73c:	e0bff717 	ldw	r2,-36(fp)
 201a740:	e0bff915 	stw	r2,-28(fp)
 201a744:	e0bff917 	ldw	r2,-28(fp)
 201a748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 201a74c:	e0bfff17 	ldw	r2,-4(fp)
 201a750:	00c01cc4 	movi	r3,115
 201a754:	10c00005 	stb	r3,0(r2)
        return;
 201a758:	00000e06 	br	201a794 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 201a75c:	e0bffd17 	ldw	r2,-12(fp)
 201a760:	10800284 	addi	r2,r2,10
 201a764:	e17ffe17 	ldw	r5,-8(fp)
 201a768:	1009883a 	mov	r4,r2
 201a76c:	20197bc0 	call	20197bc <OS_StrCopy>
 201a770:	e0bff717 	ldw	r2,-36(fp)
 201a774:	e0bffb15 	stw	r2,-20(fp)
 201a778:	e0bffb17 	ldw	r2,-20(fp)
 201a77c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201a780:	e0bfff17 	ldw	r2,-4(fp)
 201a784:	10000005 	stb	zero,0(r2)
    return;
 201a788:	0001883a 	nop
 201a78c:	00000106 	br	201a794 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201a790:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 201a794:	e037883a 	mov	sp,fp
 201a798:	dfc00117 	ldw	ra,4(sp)
 201a79c:	df000017 	ldw	fp,0(sp)
 201a7a0:	dec00204 	addi	sp,sp,8
 201a7a4:	f800283a 	ret

0201a7a8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 201a7a8:	deffe104 	addi	sp,sp,-124
 201a7ac:	dfc01e15 	stw	ra,120(sp)
 201a7b0:	df001d15 	stw	fp,116(sp)
 201a7b4:	df001d04 	addi	fp,sp,116
 201a7b8:	e13ffc15 	stw	r4,-16(fp)
 201a7bc:	2809883a 	mov	r4,r5
 201a7c0:	3007883a 	mov	r3,r6
 201a7c4:	3805883a 	mov	r2,r7
 201a7c8:	e13ffd0d 	sth	r4,-12(fp)
 201a7cc:	e0fffe05 	stb	r3,-8(fp)
 201a7d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201a7d4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201a7d8:	e0800217 	ldw	r2,8(fp)
 201a7dc:	1000021e 	bne	r2,zero,201a7e8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 201a7e0:	0005883a 	mov	r2,zero
 201a7e4:	00015906 	br	201ad4c <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 201a7e8:	e0bffc17 	ldw	r2,-16(fp)
 201a7ec:	1000051e 	bne	r2,zero,201a804 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201a7f0:	e0800217 	ldw	r2,8(fp)
 201a7f4:	00c01b84 	movi	r3,110
 201a7f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a7fc:	0005883a 	mov	r2,zero
 201a800:	00015206 	br	201ad4c <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201a804:	d0a7b503 	ldbu	r2,-24876(gp)
 201a808:	10803fcc 	andi	r2,r2,255
 201a80c:	10000526 	beq	r2,zero,201a824 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 201a810:	e0800217 	ldw	r2,8(fp)
 201a814:	00c00084 	movi	r3,2
 201a818:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a81c:	0005883a 	mov	r2,zero
 201a820:	00014a06 	br	201ad4c <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 201a824:	d0a7a703 	ldbu	r2,-24932(gp)
 201a828:	10803fcc 	andi	r2,r2,255
 201a82c:	10000526 	beq	r2,zero,201a844 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 201a830:	e0800217 	ldw	r2,8(fp)
 201a834:	00c00344 	movi	r3,13
 201a838:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a83c:	0005883a 	mov	r2,zero
 201a840:	00014206 	br	201ad4c <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 201a844:	e0bffc17 	ldw	r2,-16(fp)
 201a848:	10800003 	ldbu	r2,0(r2)
 201a84c:	10803fcc 	andi	r2,r2,255
 201a850:	10800160 	cmpeqi	r2,r2,5
 201a854:	1000051e 	bne	r2,zero,201a86c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 201a858:	e0800217 	ldw	r2,8(fp)
 201a85c:	00c00044 	movi	r3,1
 201a860:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201a864:	0005883a 	mov	r2,zero
 201a868:	00013806 	br	201ad4c <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 201a86c:	e0fffe03 	ldbu	r3,-8(fp)
 201a870:	00bfe004 	movi	r2,-128
 201a874:	1884703a 	and	r2,r3,r2
 201a878:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 201a87c:	e0bfe603 	ldbu	r2,-104(fp)
 201a880:	10000626 	beq	r2,zero,201a89c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 201a884:	e0bffe03 	ldbu	r2,-8(fp)
 201a888:	10801fcc 	andi	r2,r2,127
 201a88c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 201a890:	00800044 	movi	r2,1
 201a894:	e0bfe405 	stb	r2,-112(fp)
 201a898:	00000106 	br	201a8a0 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 201a89c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a8a0:	0005303a 	rdctl	r2,status
 201a8a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a8a8:	e0fff617 	ldw	r3,-40(fp)
 201a8ac:	00bfff84 	movi	r2,-2
 201a8b0:	1884703a 	and	r2,r3,r2
 201a8b4:	1001703a 	wrctl	status,r2
  
  return context;
 201a8b8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 201a8bc:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 201a8c0:	e0bffe03 	ldbu	r2,-8(fp)
 201a8c4:	10c00060 	cmpeqi	r3,r2,1
 201a8c8:	1800921e 	bne	r3,zero,201ab14 <OSFlagPend+0x36c>
 201a8cc:	10c00088 	cmpgei	r3,r2,2
 201a8d0:	1800021e 	bne	r3,zero,201a8dc <OSFlagPend+0x134>
 201a8d4:	10006126 	beq	r2,zero,201aa5c <OSFlagPend+0x2b4>
 201a8d8:	0000bb06 	br	201abc8 <OSFlagPend+0x420>
 201a8dc:	10c000a0 	cmpeqi	r3,r2,2
 201a8e0:	1800031e 	bne	r3,zero,201a8f0 <OSFlagPend+0x148>
 201a8e4:	108000e0 	cmpeqi	r2,r2,3
 201a8e8:	10002f1e 	bne	r2,zero,201a9a8 <OSFlagPend+0x200>
 201a8ec:	0000b606 	br	201abc8 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 201a8f0:	e0bffc17 	ldw	r2,-16(fp)
 201a8f4:	10c0020b 	ldhu	r3,8(r2)
 201a8f8:	e0bffd0b 	ldhu	r2,-12(fp)
 201a8fc:	1884703a 	and	r2,r3,r2
 201a900:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201a904:	e0ffe80b 	ldhu	r3,-96(fp)
 201a908:	e0bffd0b 	ldhu	r2,-12(fp)
 201a90c:	1880171e 	bne	r3,r2,201a96c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a910:	e0bfe403 	ldbu	r2,-112(fp)
 201a914:	10800058 	cmpnei	r2,r2,1
 201a918:	1000091e 	bne	r2,zero,201a940 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 201a91c:	e0bffc17 	ldw	r2,-16(fp)
 201a920:	1080020b 	ldhu	r2,8(r2)
 201a924:	1007883a 	mov	r3,r2
 201a928:	e0bfe80b 	ldhu	r2,-96(fp)
 201a92c:	0084303a 	nor	r2,zero,r2
 201a930:	1884703a 	and	r2,r3,r2
 201a934:	1007883a 	mov	r3,r2
 201a938:	e0bffc17 	ldw	r2,-16(fp)
 201a93c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201a940:	d0a7b617 	ldw	r2,-24872(gp)
 201a944:	e0ffe80b 	ldhu	r3,-96(fp)
 201a948:	10c00b0d 	sth	r3,44(r2)
 201a94c:	e0bfe517 	ldw	r2,-108(fp)
 201a950:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a954:	e0bfe717 	ldw	r2,-100(fp)
 201a958:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201a95c:	e0800217 	ldw	r2,8(fp)
 201a960:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201a964:	e0bfe80b 	ldhu	r2,-96(fp)
 201a968:	0000f806 	br	201ad4c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201a96c:	e13ffd0b 	ldhu	r4,-12(fp)
 201a970:	e17ffe03 	ldbu	r5,-8(fp)
 201a974:	e0bfff0b 	ldhu	r2,-4(fp)
 201a978:	e0fff704 	addi	r3,fp,-36
 201a97c:	d8800015 	stw	r2,0(sp)
 201a980:	280f883a 	mov	r7,r5
 201a984:	200d883a 	mov	r6,r4
 201a988:	180b883a 	mov	r5,r3
 201a98c:	e13ffc17 	ldw	r4,-16(fp)
 201a990:	201b2180 	call	201b218 <OS_FlagBlock>
 201a994:	e0bfe517 	ldw	r2,-108(fp)
 201a998:	e0bfe915 	stw	r2,-92(fp)
 201a99c:	e0bfe917 	ldw	r2,-92(fp)
 201a9a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201a9a4:	00009206 	br	201abf0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 201a9a8:	e0bffc17 	ldw	r2,-16(fp)
 201a9ac:	10c0020b 	ldhu	r3,8(r2)
 201a9b0:	e0bffd0b 	ldhu	r2,-12(fp)
 201a9b4:	1884703a 	and	r2,r3,r2
 201a9b8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 201a9bc:	e0bfe80b 	ldhu	r2,-96(fp)
 201a9c0:	10001726 	beq	r2,zero,201aa20 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201a9c4:	e0bfe403 	ldbu	r2,-112(fp)
 201a9c8:	10800058 	cmpnei	r2,r2,1
 201a9cc:	1000091e 	bne	r2,zero,201a9f4 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 201a9d0:	e0bffc17 	ldw	r2,-16(fp)
 201a9d4:	1080020b 	ldhu	r2,8(r2)
 201a9d8:	1007883a 	mov	r3,r2
 201a9dc:	e0bfe80b 	ldhu	r2,-96(fp)
 201a9e0:	0084303a 	nor	r2,zero,r2
 201a9e4:	1884703a 	and	r2,r3,r2
 201a9e8:	1007883a 	mov	r3,r2
 201a9ec:	e0bffc17 	ldw	r2,-16(fp)
 201a9f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201a9f4:	d0a7b617 	ldw	r2,-24872(gp)
 201a9f8:	e0ffe80b 	ldhu	r3,-96(fp)
 201a9fc:	10c00b0d 	sth	r3,44(r2)
 201aa00:	e0bfe517 	ldw	r2,-108(fp)
 201aa04:	e0bfea15 	stw	r2,-88(fp)
 201aa08:	e0bfea17 	ldw	r2,-88(fp)
 201aa0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201aa10:	e0800217 	ldw	r2,8(fp)
 201aa14:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201aa18:	e0bfe80b 	ldhu	r2,-96(fp)
 201aa1c:	0000cb06 	br	201ad4c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201aa20:	e13ffd0b 	ldhu	r4,-12(fp)
 201aa24:	e17ffe03 	ldbu	r5,-8(fp)
 201aa28:	e0bfff0b 	ldhu	r2,-4(fp)
 201aa2c:	e0fff704 	addi	r3,fp,-36
 201aa30:	d8800015 	stw	r2,0(sp)
 201aa34:	280f883a 	mov	r7,r5
 201aa38:	200d883a 	mov	r6,r4
 201aa3c:	180b883a 	mov	r5,r3
 201aa40:	e13ffc17 	ldw	r4,-16(fp)
 201aa44:	201b2180 	call	201b218 <OS_FlagBlock>
 201aa48:	e0bfe517 	ldw	r2,-108(fp)
 201aa4c:	e0bfeb15 	stw	r2,-84(fp)
 201aa50:	e0bfeb17 	ldw	r2,-84(fp)
 201aa54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201aa58:	00006506 	br	201abf0 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 201aa5c:	e0bffc17 	ldw	r2,-16(fp)
 201aa60:	1080020b 	ldhu	r2,8(r2)
 201aa64:	0084303a 	nor	r2,zero,r2
 201aa68:	1007883a 	mov	r3,r2
 201aa6c:	e0bffd0b 	ldhu	r2,-12(fp)
 201aa70:	1884703a 	and	r2,r3,r2
 201aa74:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201aa78:	e0ffe80b 	ldhu	r3,-96(fp)
 201aa7c:	e0bffd0b 	ldhu	r2,-12(fp)
 201aa80:	1880151e 	bne	r3,r2,201aad8 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201aa84:	e0bfe403 	ldbu	r2,-112(fp)
 201aa88:	10800058 	cmpnei	r2,r2,1
 201aa8c:	1000071e 	bne	r2,zero,201aaac <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 201aa90:	e0bffc17 	ldw	r2,-16(fp)
 201aa94:	10c0020b 	ldhu	r3,8(r2)
 201aa98:	e0bfe80b 	ldhu	r2,-96(fp)
 201aa9c:	1884b03a 	or	r2,r3,r2
 201aaa0:	1007883a 	mov	r3,r2
 201aaa4:	e0bffc17 	ldw	r2,-16(fp)
 201aaa8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201aaac:	d0a7b617 	ldw	r2,-24872(gp)
 201aab0:	e0ffe80b 	ldhu	r3,-96(fp)
 201aab4:	10c00b0d 	sth	r3,44(r2)
 201aab8:	e0bfe517 	ldw	r2,-108(fp)
 201aabc:	e0bfec15 	stw	r2,-80(fp)
 201aac0:	e0bfec17 	ldw	r2,-80(fp)
 201aac4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201aac8:	e0800217 	ldw	r2,8(fp)
 201aacc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201aad0:	e0bfe80b 	ldhu	r2,-96(fp)
 201aad4:	00009d06 	br	201ad4c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201aad8:	e13ffd0b 	ldhu	r4,-12(fp)
 201aadc:	e17ffe03 	ldbu	r5,-8(fp)
 201aae0:	e0bfff0b 	ldhu	r2,-4(fp)
 201aae4:	e0fff704 	addi	r3,fp,-36
 201aae8:	d8800015 	stw	r2,0(sp)
 201aaec:	280f883a 	mov	r7,r5
 201aaf0:	200d883a 	mov	r6,r4
 201aaf4:	180b883a 	mov	r5,r3
 201aaf8:	e13ffc17 	ldw	r4,-16(fp)
 201aafc:	201b2180 	call	201b218 <OS_FlagBlock>
 201ab00:	e0bfe517 	ldw	r2,-108(fp)
 201ab04:	e0bfed15 	stw	r2,-76(fp)
 201ab08:	e0bfed17 	ldw	r2,-76(fp)
 201ab0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201ab10:	00003706 	br	201abf0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 201ab14:	e0bffc17 	ldw	r2,-16(fp)
 201ab18:	1080020b 	ldhu	r2,8(r2)
 201ab1c:	0084303a 	nor	r2,zero,r2
 201ab20:	1007883a 	mov	r3,r2
 201ab24:	e0bffd0b 	ldhu	r2,-12(fp)
 201ab28:	1884703a 	and	r2,r3,r2
 201ab2c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 201ab30:	e0bfe80b 	ldhu	r2,-96(fp)
 201ab34:	10001526 	beq	r2,zero,201ab8c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201ab38:	e0bfe403 	ldbu	r2,-112(fp)
 201ab3c:	10800058 	cmpnei	r2,r2,1
 201ab40:	1000071e 	bne	r2,zero,201ab60 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 201ab44:	e0bffc17 	ldw	r2,-16(fp)
 201ab48:	10c0020b 	ldhu	r3,8(r2)
 201ab4c:	e0bfe80b 	ldhu	r2,-96(fp)
 201ab50:	1884b03a 	or	r2,r3,r2
 201ab54:	1007883a 	mov	r3,r2
 201ab58:	e0bffc17 	ldw	r2,-16(fp)
 201ab5c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201ab60:	d0a7b617 	ldw	r2,-24872(gp)
 201ab64:	e0ffe80b 	ldhu	r3,-96(fp)
 201ab68:	10c00b0d 	sth	r3,44(r2)
 201ab6c:	e0bfe517 	ldw	r2,-108(fp)
 201ab70:	e0bfee15 	stw	r2,-72(fp)
 201ab74:	e0bfee17 	ldw	r2,-72(fp)
 201ab78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201ab7c:	e0800217 	ldw	r2,8(fp)
 201ab80:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201ab84:	e0bfe80b 	ldhu	r2,-96(fp)
 201ab88:	00007006 	br	201ad4c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201ab8c:	e13ffd0b 	ldhu	r4,-12(fp)
 201ab90:	e17ffe03 	ldbu	r5,-8(fp)
 201ab94:	e0bfff0b 	ldhu	r2,-4(fp)
 201ab98:	e0fff704 	addi	r3,fp,-36
 201ab9c:	d8800015 	stw	r2,0(sp)
 201aba0:	280f883a 	mov	r7,r5
 201aba4:	200d883a 	mov	r6,r4
 201aba8:	180b883a 	mov	r5,r3
 201abac:	e13ffc17 	ldw	r4,-16(fp)
 201abb0:	201b2180 	call	201b218 <OS_FlagBlock>
 201abb4:	e0bfe517 	ldw	r2,-108(fp)
 201abb8:	e0bfef15 	stw	r2,-68(fp)
 201abbc:	e0bfef17 	ldw	r2,-68(fp)
 201abc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201abc4:	00000a06 	br	201abf0 <OSFlagPend+0x448>
 201abc8:	e0bfe517 	ldw	r2,-108(fp)
 201abcc:	e0bff015 	stw	r2,-64(fp)
 201abd0:	e0bff017 	ldw	r2,-64(fp)
 201abd4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 201abd8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 201abdc:	e0800217 	ldw	r2,8(fp)
 201abe0:	00c01bc4 	movi	r3,111
 201abe4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 201abe8:	e0bfe80b 	ldhu	r2,-96(fp)
 201abec:	00005706 	br	201ad4c <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 201abf0:	20196780 	call	2019678 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201abf4:	0005303a 	rdctl	r2,status
 201abf8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201abfc:	e0fff117 	ldw	r3,-60(fp)
 201ac00:	00bfff84 	movi	r2,-2
 201ac04:	1884703a 	and	r2,r3,r2
 201ac08:	1001703a 	wrctl	status,r2
  
  return context;
 201ac0c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 201ac10:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 201ac14:	d0a7b617 	ldw	r2,-24872(gp)
 201ac18:	10800c43 	ldbu	r2,49(r2)
 201ac1c:	10803fcc 	andi	r2,r2,255
 201ac20:	10001c26 	beq	r2,zero,201ac94 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 201ac24:	d0a7b617 	ldw	r2,-24872(gp)
 201ac28:	10800c43 	ldbu	r2,49(r2)
 201ac2c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201ac30:	d0a7b617 	ldw	r2,-24872(gp)
 201ac34:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 201ac38:	e0bff704 	addi	r2,fp,-36
 201ac3c:	1009883a 	mov	r4,r2
 201ac40:	201b54c0 	call	201b54c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 201ac44:	d0a7b617 	ldw	r2,-24872(gp)
 201ac48:	10000c05 	stb	zero,48(r2)
 201ac4c:	e0bfe517 	ldw	r2,-108(fp)
 201ac50:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ac54:	e0bff217 	ldw	r2,-56(fp)
 201ac58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 201ac5c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 201ac60:	e0bff303 	ldbu	r2,-52(fp)
 201ac64:	108000a0 	cmpeqi	r2,r2,2
 201ac68:	10000426 	beq	r2,zero,201ac7c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 201ac6c:	e0800217 	ldw	r2,8(fp)
 201ac70:	00c00384 	movi	r3,14
 201ac74:	10c00005 	stb	r3,0(r2)
                 break;
 201ac78:	00000406 	br	201ac8c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 201ac7c:	e0800217 	ldw	r2,8(fp)
 201ac80:	00c00284 	movi	r3,10
 201ac84:	10c00005 	stb	r3,0(r2)
                 break;
 201ac88:	0001883a 	nop
        }
        return (flags_rdy);
 201ac8c:	e0bfe80b 	ldhu	r2,-96(fp)
 201ac90:	00002e06 	br	201ad4c <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 201ac94:	d0a7b617 	ldw	r2,-24872(gp)
 201ac98:	10800b0b 	ldhu	r2,44(r2)
 201ac9c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 201aca0:	e0bfe403 	ldbu	r2,-112(fp)
 201aca4:	10800058 	cmpnei	r2,r2,1
 201aca8:	1000211e 	bne	r2,zero,201ad30 <OSFlagPend+0x588>
        switch (wait_type) {
 201acac:	e0bffe03 	ldbu	r2,-8(fp)
 201acb0:	10001616 	blt	r2,zero,201ad0c <OSFlagPend+0x564>
 201acb4:	10c00090 	cmplti	r3,r2,2
 201acb8:	18000c1e 	bne	r3,zero,201acec <OSFlagPend+0x544>
 201acbc:	10800108 	cmpgei	r2,r2,4
 201acc0:	1000121e 	bne	r2,zero,201ad0c <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 201acc4:	e0bffc17 	ldw	r2,-16(fp)
 201acc8:	1080020b 	ldhu	r2,8(r2)
 201accc:	1007883a 	mov	r3,r2
 201acd0:	e0bfe80b 	ldhu	r2,-96(fp)
 201acd4:	0084303a 	nor	r2,zero,r2
 201acd8:	1884703a 	and	r2,r3,r2
 201acdc:	1007883a 	mov	r3,r2
 201ace0:	e0bffc17 	ldw	r2,-16(fp)
 201ace4:	10c0020d 	sth	r3,8(r2)
                 break;
 201ace8:	00001106 	br	201ad30 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 201acec:	e0bffc17 	ldw	r2,-16(fp)
 201acf0:	10c0020b 	ldhu	r3,8(r2)
 201acf4:	e0bfe80b 	ldhu	r2,-96(fp)
 201acf8:	1884b03a 	or	r2,r3,r2
 201acfc:	1007883a 	mov	r3,r2
 201ad00:	e0bffc17 	ldw	r2,-16(fp)
 201ad04:	10c0020d 	sth	r3,8(r2)
                 break;
 201ad08:	00000906 	br	201ad30 <OSFlagPend+0x588>
 201ad0c:	e0bfe517 	ldw	r2,-108(fp)
 201ad10:	e0bff415 	stw	r2,-48(fp)
 201ad14:	e0bff417 	ldw	r2,-48(fp)
 201ad18:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 201ad1c:	e0800217 	ldw	r2,8(fp)
 201ad20:	00c01bc4 	movi	r3,111
 201ad24:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 201ad28:	0005883a 	mov	r2,zero
 201ad2c:	00000706 	br	201ad4c <OSFlagPend+0x5a4>
 201ad30:	e0bfe517 	ldw	r2,-108(fp)
 201ad34:	e0bff515 	stw	r2,-44(fp)
 201ad38:	e0bff517 	ldw	r2,-44(fp)
 201ad3c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 201ad40:	e0800217 	ldw	r2,8(fp)
 201ad44:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 201ad48:	e0bfe80b 	ldhu	r2,-96(fp)
}
 201ad4c:	e037883a 	mov	sp,fp
 201ad50:	dfc00117 	ldw	ra,4(sp)
 201ad54:	df000017 	ldw	fp,0(sp)
 201ad58:	dec00204 	addi	sp,sp,8
 201ad5c:	f800283a 	ret

0201ad60 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 201ad60:	defffb04 	addi	sp,sp,-20
 201ad64:	df000415 	stw	fp,16(sp)
 201ad68:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201ad6c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ad70:	0005303a 	rdctl	r2,status
 201ad74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ad78:	e0fffe17 	ldw	r3,-8(fp)
 201ad7c:	00bfff84 	movi	r2,-2
 201ad80:	1884703a 	and	r2,r3,r2
 201ad84:	1001703a 	wrctl	status,r2
  
  return context;
 201ad88:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201ad8c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 201ad90:	d0a7b617 	ldw	r2,-24872(gp)
 201ad94:	10800b0b 	ldhu	r2,44(r2)
 201ad98:	e0bffd0d 	sth	r2,-12(fp)
 201ad9c:	e0bffc17 	ldw	r2,-16(fp)
 201ada0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ada4:	e0bfff17 	ldw	r2,-4(fp)
 201ada8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 201adac:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201adb0:	e037883a 	mov	sp,fp
 201adb4:	df000017 	ldw	fp,0(sp)
 201adb8:	dec00104 	addi	sp,sp,4
 201adbc:	f800283a 	ret

0201adc0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 201adc0:	deffef04 	addi	sp,sp,-68
 201adc4:	dfc01015 	stw	ra,64(sp)
 201adc8:	df000f15 	stw	fp,60(sp)
 201adcc:	df000f04 	addi	fp,sp,60
 201add0:	e13ffc15 	stw	r4,-16(fp)
 201add4:	2807883a 	mov	r3,r5
 201add8:	3005883a 	mov	r2,r6
 201addc:	e1ffff15 	stw	r7,-4(fp)
 201ade0:	e0fffd0d 	sth	r3,-12(fp)
 201ade4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 201ade8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201adec:	e0bfff17 	ldw	r2,-4(fp)
 201adf0:	1000021e 	bne	r2,zero,201adfc <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 201adf4:	0005883a 	mov	r2,zero
 201adf8:	0000d106 	br	201b140 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 201adfc:	e0bffc17 	ldw	r2,-16(fp)
 201ae00:	1000051e 	bne	r2,zero,201ae18 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201ae04:	e0bfff17 	ldw	r2,-4(fp)
 201ae08:	00c01b84 	movi	r3,110
 201ae0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201ae10:	0005883a 	mov	r2,zero
 201ae14:	0000ca06 	br	201b140 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 201ae18:	e0bffc17 	ldw	r2,-16(fp)
 201ae1c:	10800003 	ldbu	r2,0(r2)
 201ae20:	10803fcc 	andi	r2,r2,255
 201ae24:	10800160 	cmpeqi	r2,r2,5
 201ae28:	1000051e 	bne	r2,zero,201ae40 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 201ae2c:	e0bfff17 	ldw	r2,-4(fp)
 201ae30:	00c00044 	movi	r3,1
 201ae34:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201ae38:	0005883a 	mov	r2,zero
 201ae3c:	0000c006 	br	201b140 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ae40:	0005303a 	rdctl	r2,status
 201ae44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ae48:	e0fffb17 	ldw	r3,-20(fp)
 201ae4c:	00bfff84 	movi	r2,-2
 201ae50:	1884703a 	and	r2,r3,r2
 201ae54:	1001703a 	wrctl	status,r2
  
  return context;
 201ae58:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 201ae5c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 201ae60:	e0bffe03 	ldbu	r2,-8(fp)
 201ae64:	10000326 	beq	r2,zero,201ae74 <OSFlagPost+0xb4>
 201ae68:	10800060 	cmpeqi	r2,r2,1
 201ae6c:	10000b1e 	bne	r2,zero,201ae9c <OSFlagPost+0xdc>
 201ae70:	00001206 	br	201aebc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 201ae74:	e0bffc17 	ldw	r2,-16(fp)
 201ae78:	1080020b 	ldhu	r2,8(r2)
 201ae7c:	1007883a 	mov	r3,r2
 201ae80:	e0bffd0b 	ldhu	r2,-12(fp)
 201ae84:	0084303a 	nor	r2,zero,r2
 201ae88:	1884703a 	and	r2,r3,r2
 201ae8c:	1007883a 	mov	r3,r2
 201ae90:	e0bffc17 	ldw	r2,-16(fp)
 201ae94:	10c0020d 	sth	r3,8(r2)
             break;
 201ae98:	00001106 	br	201aee0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 201ae9c:	e0bffc17 	ldw	r2,-16(fp)
 201aea0:	10c0020b 	ldhu	r3,8(r2)
 201aea4:	e0bffd0b 	ldhu	r2,-12(fp)
 201aea8:	1884b03a 	or	r2,r3,r2
 201aeac:	1007883a 	mov	r3,r2
 201aeb0:	e0bffc17 	ldw	r2,-16(fp)
 201aeb4:	10c0020d 	sth	r3,8(r2)
             break;
 201aeb8:	00000906 	br	201aee0 <OSFlagPost+0x120>
 201aebc:	e0bff317 	ldw	r2,-52(fp)
 201aec0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201aec4:	e0bff417 	ldw	r2,-48(fp)
 201aec8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 201aecc:	e0bfff17 	ldw	r2,-4(fp)
 201aed0:	00c01c44 	movi	r3,113
 201aed4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 201aed8:	0005883a 	mov	r2,zero
 201aedc:	00009806 	br	201b140 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 201aee0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201aee4:	e0bffc17 	ldw	r2,-16(fp)
 201aee8:	10800117 	ldw	r2,4(r2)
 201aeec:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 201aef0:	00007706 	br	201b0d0 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 201aef4:	e0bff117 	ldw	r2,-60(fp)
 201aef8:	10800483 	ldbu	r2,18(r2)
 201aefc:	10803fcc 	andi	r2,r2,255
 201af00:	10c00060 	cmpeqi	r3,r2,1
 201af04:	18004a1e 	bne	r3,zero,201b030 <OSFlagPost+0x270>
 201af08:	10c00088 	cmpgei	r3,r2,2
 201af0c:	1800021e 	bne	r3,zero,201af18 <OSFlagPost+0x158>
 201af10:	10002f26 	beq	r2,zero,201afd0 <OSFlagPost+0x210>
 201af14:	00005b06 	br	201b084 <OSFlagPost+0x2c4>
 201af18:	10c000a0 	cmpeqi	r3,r2,2
 201af1c:	1800031e 	bne	r3,zero,201af2c <OSFlagPost+0x16c>
 201af20:	108000e0 	cmpeqi	r2,r2,3
 201af24:	1000171e 	bne	r2,zero,201af84 <OSFlagPost+0x1c4>
 201af28:	00005606 	br	201b084 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201af2c:	e0bffc17 	ldw	r2,-16(fp)
 201af30:	10c0020b 	ldhu	r3,8(r2)
 201af34:	e0bff117 	ldw	r2,-60(fp)
 201af38:	1080040b 	ldhu	r2,16(r2)
 201af3c:	1884703a 	and	r2,r3,r2
 201af40:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 201af44:	e0bff117 	ldw	r2,-60(fp)
 201af48:	1080040b 	ldhu	r2,16(r2)
 201af4c:	10ffffcc 	andi	r3,r2,65535
 201af50:	e0bff60b 	ldhu	r2,-40(fp)
 201af54:	1880541e 	bne	r3,r2,201b0a8 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201af58:	e0bff60b 	ldhu	r2,-40(fp)
 201af5c:	100b883a 	mov	r5,r2
 201af60:	e13ff117 	ldw	r4,-60(fp)
 201af64:	201b4580 	call	201b458 <OS_FlagTaskRdy>
 201af68:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201af6c:	e0bff683 	ldbu	r2,-38(fp)
 201af70:	10800058 	cmpnei	r2,r2,1
 201af74:	10004c1e 	bne	r2,zero,201b0a8 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201af78:	00800044 	movi	r2,1
 201af7c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201af80:	00004906 	br	201b0a8 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201af84:	e0bffc17 	ldw	r2,-16(fp)
 201af88:	10c0020b 	ldhu	r3,8(r2)
 201af8c:	e0bff117 	ldw	r2,-60(fp)
 201af90:	1080040b 	ldhu	r2,16(r2)
 201af94:	1884703a 	and	r2,r3,r2
 201af98:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201af9c:	e0bff60b 	ldhu	r2,-40(fp)
 201afa0:	10004326 	beq	r2,zero,201b0b0 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201afa4:	e0bff60b 	ldhu	r2,-40(fp)
 201afa8:	100b883a 	mov	r5,r2
 201afac:	e13ff117 	ldw	r4,-60(fp)
 201afb0:	201b4580 	call	201b458 <OS_FlagTaskRdy>
 201afb4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201afb8:	e0bff683 	ldbu	r2,-38(fp)
 201afbc:	10800058 	cmpnei	r2,r2,1
 201afc0:	10003b1e 	bne	r2,zero,201b0b0 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201afc4:	00800044 	movi	r2,1
 201afc8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201afcc:	00003806 	br	201b0b0 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201afd0:	e0bffc17 	ldw	r2,-16(fp)
 201afd4:	1080020b 	ldhu	r2,8(r2)
 201afd8:	0084303a 	nor	r2,zero,r2
 201afdc:	1007883a 	mov	r3,r2
 201afe0:	e0bff117 	ldw	r2,-60(fp)
 201afe4:	1080040b 	ldhu	r2,16(r2)
 201afe8:	1884703a 	and	r2,r3,r2
 201afec:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 201aff0:	e0bff117 	ldw	r2,-60(fp)
 201aff4:	1080040b 	ldhu	r2,16(r2)
 201aff8:	10ffffcc 	andi	r3,r2,65535
 201affc:	e0bff60b 	ldhu	r2,-40(fp)
 201b000:	18802d1e 	bne	r3,r2,201b0b8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201b004:	e0bff60b 	ldhu	r2,-40(fp)
 201b008:	100b883a 	mov	r5,r2
 201b00c:	e13ff117 	ldw	r4,-60(fp)
 201b010:	201b4580 	call	201b458 <OS_FlagTaskRdy>
 201b014:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201b018:	e0bff683 	ldbu	r2,-38(fp)
 201b01c:	10800058 	cmpnei	r2,r2,1
 201b020:	1000251e 	bne	r2,zero,201b0b8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201b024:	00800044 	movi	r2,1
 201b028:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201b02c:	00002206 	br	201b0b8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201b030:	e0bffc17 	ldw	r2,-16(fp)
 201b034:	1080020b 	ldhu	r2,8(r2)
 201b038:	0084303a 	nor	r2,zero,r2
 201b03c:	1007883a 	mov	r3,r2
 201b040:	e0bff117 	ldw	r2,-60(fp)
 201b044:	1080040b 	ldhu	r2,16(r2)
 201b048:	1884703a 	and	r2,r3,r2
 201b04c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201b050:	e0bff60b 	ldhu	r2,-40(fp)
 201b054:	10001a26 	beq	r2,zero,201b0c0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 201b058:	e0bff60b 	ldhu	r2,-40(fp)
 201b05c:	100b883a 	mov	r5,r2
 201b060:	e13ff117 	ldw	r4,-60(fp)
 201b064:	201b4580 	call	201b458 <OS_FlagTaskRdy>
 201b068:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201b06c:	e0bff683 	ldbu	r2,-38(fp)
 201b070:	10800058 	cmpnei	r2,r2,1
 201b074:	1000121e 	bne	r2,zero,201b0c0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 201b078:	00800044 	movi	r2,1
 201b07c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 201b080:	00000f06 	br	201b0c0 <OSFlagPost+0x300>
 201b084:	e0bff317 	ldw	r2,-52(fp)
 201b088:	e0bff515 	stw	r2,-44(fp)
 201b08c:	e0bff517 	ldw	r2,-44(fp)
 201b090:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 201b094:	e0bfff17 	ldw	r2,-4(fp)
 201b098:	00c01bc4 	movi	r3,111
 201b09c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 201b0a0:	0005883a 	mov	r2,zero
 201b0a4:	00002606 	br	201b140 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201b0a8:	0001883a 	nop
 201b0ac:	00000506 	br	201b0c4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201b0b0:	0001883a 	nop
 201b0b4:	00000306 	br	201b0c4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201b0b8:	0001883a 	nop
 201b0bc:	00000106 	br	201b0c4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201b0c0:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 201b0c4:	e0bff117 	ldw	r2,-60(fp)
 201b0c8:	10800017 	ldw	r2,0(r2)
 201b0cc:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 201b0d0:	e0bff117 	ldw	r2,-60(fp)
 201b0d4:	103f871e 	bne	r2,zero,201aef4 <OSFlagPost+0x134>
 201b0d8:	e0bff317 	ldw	r2,-52(fp)
 201b0dc:	e0bff715 	stw	r2,-36(fp)
 201b0e0:	e0bff717 	ldw	r2,-36(fp)
 201b0e4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 201b0e8:	e0bff203 	ldbu	r2,-56(fp)
 201b0ec:	10800058 	cmpnei	r2,r2,1
 201b0f0:	1000011e 	bne	r2,zero,201b0f8 <OSFlagPost+0x338>
        OS_Sched();
 201b0f4:	20196780 	call	2019678 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b0f8:	0005303a 	rdctl	r2,status
 201b0fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b100:	e0fffa17 	ldw	r3,-24(fp)
 201b104:	00bfff84 	movi	r2,-2
 201b108:	1884703a 	and	r2,r3,r2
 201b10c:	1001703a 	wrctl	status,r2
  
  return context;
 201b110:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 201b114:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 201b118:	e0bffc17 	ldw	r2,-16(fp)
 201b11c:	1080020b 	ldhu	r2,8(r2)
 201b120:	e0bff90d 	sth	r2,-28(fp)
 201b124:	e0bff317 	ldw	r2,-52(fp)
 201b128:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b12c:	e0bff817 	ldw	r2,-32(fp)
 201b130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 201b134:	e0bfff17 	ldw	r2,-4(fp)
 201b138:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 201b13c:	e0bff90b 	ldhu	r2,-28(fp)
}
 201b140:	e037883a 	mov	sp,fp
 201b144:	dfc00117 	ldw	ra,4(sp)
 201b148:	df000017 	ldw	fp,0(sp)
 201b14c:	dec00204 	addi	sp,sp,8
 201b150:	f800283a 	ret

0201b154 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 201b154:	defff904 	addi	sp,sp,-28
 201b158:	df000615 	stw	fp,24(sp)
 201b15c:	df000604 	addi	fp,sp,24
 201b160:	e13ffe15 	stw	r4,-8(fp)
 201b164:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 201b168:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 201b16c:	e0bfff17 	ldw	r2,-4(fp)
 201b170:	1000021e 	bne	r2,zero,201b17c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 201b174:	0005883a 	mov	r2,zero
 201b178:	00002306 	br	201b208 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 201b17c:	e0bffe17 	ldw	r2,-8(fp)
 201b180:	1000051e 	bne	r2,zero,201b198 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201b184:	e0bfff17 	ldw	r2,-4(fp)
 201b188:	00c01b84 	movi	r3,110
 201b18c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201b190:	0005883a 	mov	r2,zero
 201b194:	00001c06 	br	201b208 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 201b198:	e0bffe17 	ldw	r2,-8(fp)
 201b19c:	10800003 	ldbu	r2,0(r2)
 201b1a0:	10803fcc 	andi	r2,r2,255
 201b1a4:	10800160 	cmpeqi	r2,r2,5
 201b1a8:	1000051e 	bne	r2,zero,201b1c0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201b1ac:	e0bfff17 	ldw	r2,-4(fp)
 201b1b0:	00c00044 	movi	r3,1
 201b1b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201b1b8:	0005883a 	mov	r2,zero
 201b1bc:	00001206 	br	201b208 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b1c0:	0005303a 	rdctl	r2,status
 201b1c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b1c8:	e0fffc17 	ldw	r3,-16(fp)
 201b1cc:	00bfff84 	movi	r2,-2
 201b1d0:	1884703a 	and	r2,r3,r2
 201b1d4:	1001703a 	wrctl	status,r2
  
  return context;
 201b1d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b1dc:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 201b1e0:	e0bffe17 	ldw	r2,-8(fp)
 201b1e4:	1080020b 	ldhu	r2,8(r2)
 201b1e8:	e0bffb0d 	sth	r2,-20(fp)
 201b1ec:	e0bffa17 	ldw	r2,-24(fp)
 201b1f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b1f4:	e0bffd17 	ldw	r2,-12(fp)
 201b1f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b1fc:	e0bfff17 	ldw	r2,-4(fp)
 201b200:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 201b204:	e0bffb0b 	ldhu	r2,-20(fp)
}
 201b208:	e037883a 	mov	sp,fp
 201b20c:	df000017 	ldw	fp,0(sp)
 201b210:	dec00104 	addi	sp,sp,4
 201b214:	f800283a 	ret

0201b218 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 201b218:	defff804 	addi	sp,sp,-32
 201b21c:	df000715 	stw	fp,28(sp)
 201b220:	df000704 	addi	fp,sp,28
 201b224:	e13ffb15 	stw	r4,-20(fp)
 201b228:	e17ffc15 	stw	r5,-16(fp)
 201b22c:	3009883a 	mov	r4,r6
 201b230:	3807883a 	mov	r3,r7
 201b234:	e0800117 	ldw	r2,4(fp)
 201b238:	e13ffd0d 	sth	r4,-12(fp)
 201b23c:	e0fffe05 	stb	r3,-8(fp)
 201b240:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 201b244:	d0a7b617 	ldw	r2,-24872(gp)
 201b248:	d0e7b617 	ldw	r3,-24872(gp)
 201b24c:	18c00c03 	ldbu	r3,48(r3)
 201b250:	18c00814 	ori	r3,r3,32
 201b254:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 201b258:	d0a7b617 	ldw	r2,-24872(gp)
 201b25c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 201b260:	d0a7b617 	ldw	r2,-24872(gp)
 201b264:	e0ffff0b 	ldhu	r3,-4(fp)
 201b268:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 201b26c:	d0a7b617 	ldw	r2,-24872(gp)
 201b270:	e0fffc17 	ldw	r3,-16(fp)
 201b274:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 201b278:	e0bffc17 	ldw	r2,-16(fp)
 201b27c:	e0fffd0b 	ldhu	r3,-12(fp)
 201b280:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 201b284:	e0bffc17 	ldw	r2,-16(fp)
 201b288:	e0fffe03 	ldbu	r3,-8(fp)
 201b28c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 201b290:	d0e7b617 	ldw	r3,-24872(gp)
 201b294:	e0bffc17 	ldw	r2,-16(fp)
 201b298:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 201b29c:	e0bffb17 	ldw	r2,-20(fp)
 201b2a0:	10c00117 	ldw	r3,4(r2)
 201b2a4:	e0bffc17 	ldw	r2,-16(fp)
 201b2a8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 201b2ac:	e0bffc17 	ldw	r2,-16(fp)
 201b2b0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 201b2b4:	e0bffc17 	ldw	r2,-16(fp)
 201b2b8:	e0fffb17 	ldw	r3,-20(fp)
 201b2bc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 201b2c0:	e0bffb17 	ldw	r2,-20(fp)
 201b2c4:	10800117 	ldw	r2,4(r2)
 201b2c8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 201b2cc:	e0bff917 	ldw	r2,-28(fp)
 201b2d0:	10000326 	beq	r2,zero,201b2e0 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 201b2d4:	e0bff917 	ldw	r2,-28(fp)
 201b2d8:	e0fffc17 	ldw	r3,-16(fp)
 201b2dc:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 201b2e0:	e0bffb17 	ldw	r2,-20(fp)
 201b2e4:	e0fffc17 	ldw	r3,-16(fp)
 201b2e8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 201b2ec:	d0a7b617 	ldw	r2,-24872(gp)
 201b2f0:	10800d03 	ldbu	r2,52(r2)
 201b2f4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201b2f8:	e0fffa03 	ldbu	r3,-24(fp)
 201b2fc:	e13ffa03 	ldbu	r4,-24(fp)
 201b300:	d0a7b344 	addi	r2,gp,-24883
 201b304:	2085883a 	add	r2,r4,r2
 201b308:	10800003 	ldbu	r2,0(r2)
 201b30c:	1009883a 	mov	r4,r2
 201b310:	d0a7b617 	ldw	r2,-24872(gp)
 201b314:	10800d43 	ldbu	r2,53(r2)
 201b318:	0084303a 	nor	r2,zero,r2
 201b31c:	2084703a 	and	r2,r4,r2
 201b320:	1009883a 	mov	r4,r2
 201b324:	d0a7b344 	addi	r2,gp,-24883
 201b328:	1885883a 	add	r2,r3,r2
 201b32c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 201b330:	e0fffa03 	ldbu	r3,-24(fp)
 201b334:	d0a7b344 	addi	r2,gp,-24883
 201b338:	1885883a 	add	r2,r3,r2
 201b33c:	10800003 	ldbu	r2,0(r2)
 201b340:	10803fcc 	andi	r2,r2,255
 201b344:	1000071e 	bne	r2,zero,201b364 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201b348:	d0a7b617 	ldw	r2,-24872(gp)
 201b34c:	10800d83 	ldbu	r2,54(r2)
 201b350:	0084303a 	nor	r2,zero,r2
 201b354:	1007883a 	mov	r3,r2
 201b358:	d0a7b303 	ldbu	r2,-24884(gp)
 201b35c:	1884703a 	and	r2,r3,r2
 201b360:	d0a7b305 	stb	r2,-24884(gp)
    }
}
 201b364:	0001883a 	nop
 201b368:	e037883a 	mov	sp,fp
 201b36c:	df000017 	ldw	fp,0(sp)
 201b370:	dec00104 	addi	sp,sp,4
 201b374:	f800283a 	ret

0201b378 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 201b378:	defffb04 	addi	sp,sp,-20
 201b37c:	dfc00415 	stw	ra,16(sp)
 201b380:	df000315 	stw	fp,12(sp)
 201b384:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 201b388:	0140dc04 	movi	r5,880
 201b38c:	010080f4 	movhi	r4,515
 201b390:	213bc304 	addi	r4,r4,-4340
 201b394:	20195bc0 	call	20195bc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 201b398:	008080f4 	movhi	r2,515
 201b39c:	10bbc304 	addi	r2,r2,-4340
 201b3a0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 201b3a4:	008080f4 	movhi	r2,515
 201b3a8:	10bbce04 	addi	r2,r2,-4296
 201b3ac:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201b3b0:	e03ffd0d 	sth	zero,-12(fp)
 201b3b4:	00001306 	br	201b404 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201b3b8:	e0bffe17 	ldw	r2,-8(fp)
 201b3bc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 201b3c0:	e0bffe17 	ldw	r2,-8(fp)
 201b3c4:	e0ffff17 	ldw	r3,-4(fp)
 201b3c8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 201b3cc:	e0bffe17 	ldw	r2,-8(fp)
 201b3d0:	00c00fc4 	movi	r3,63
 201b3d4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201b3d8:	e0bffe17 	ldw	r2,-8(fp)
 201b3dc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 201b3e0:	e0bffe17 	ldw	r2,-8(fp)
 201b3e4:	10800b04 	addi	r2,r2,44
 201b3e8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 201b3ec:	e0bfff17 	ldw	r2,-4(fp)
 201b3f0:	10800b04 	addi	r2,r2,44
 201b3f4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201b3f8:	e0bffd0b 	ldhu	r2,-12(fp)
 201b3fc:	10800044 	addi	r2,r2,1
 201b400:	e0bffd0d 	sth	r2,-12(fp)
 201b404:	e0bffd0b 	ldhu	r2,-12(fp)
 201b408:	108004f0 	cmpltui	r2,r2,19
 201b40c:	103fea1e 	bne	r2,zero,201b3b8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201b410:	e0bffe17 	ldw	r2,-8(fp)
 201b414:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 201b418:	e0bffe17 	ldw	r2,-8(fp)
 201b41c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 201b420:	e0bffe17 	ldw	r2,-8(fp)
 201b424:	00c00fc4 	movi	r3,63
 201b428:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201b42c:	e0bffe17 	ldw	r2,-8(fp)
 201b430:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 201b434:	008080f4 	movhi	r2,515
 201b438:	10bbc304 	addi	r2,r2,-4340
 201b43c:	d0a7b815 	stw	r2,-24864(gp)
#endif
}
 201b440:	0001883a 	nop
 201b444:	e037883a 	mov	sp,fp
 201b448:	dfc00117 	ldw	ra,4(sp)
 201b44c:	df000017 	ldw	fp,0(sp)
 201b450:	dec00204 	addi	sp,sp,8
 201b454:	f800283a 	ret

0201b458 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 201b458:	defffa04 	addi	sp,sp,-24
 201b45c:	dfc00515 	stw	ra,20(sp)
 201b460:	df000415 	stw	fp,16(sp)
 201b464:	df000404 	addi	fp,sp,16
 201b468:	e13ffe15 	stw	r4,-8(fp)
 201b46c:	2805883a 	mov	r2,r5
 201b470:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 201b474:	e0bffe17 	ldw	r2,-8(fp)
 201b478:	10800217 	ldw	r2,8(r2)
 201b47c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 201b480:	e0bffd17 	ldw	r2,-12(fp)
 201b484:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 201b488:	e0bffd17 	ldw	r2,-12(fp)
 201b48c:	e0ffff0b 	ldhu	r3,-4(fp)
 201b490:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 201b494:	e0bffd17 	ldw	r2,-12(fp)
 201b498:	10c00c03 	ldbu	r3,48(r2)
 201b49c:	00bff7c4 	movi	r2,-33
 201b4a0:	1884703a 	and	r2,r3,r2
 201b4a4:	1007883a 	mov	r3,r2
 201b4a8:	e0bffd17 	ldw	r2,-12(fp)
 201b4ac:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 201b4b0:	e0bffd17 	ldw	r2,-12(fp)
 201b4b4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 201b4b8:	e0bffd17 	ldw	r2,-12(fp)
 201b4bc:	10800c03 	ldbu	r2,48(r2)
 201b4c0:	10803fcc 	andi	r2,r2,255
 201b4c4:	1000181e 	bne	r2,zero,201b528 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 201b4c8:	e0bffd17 	ldw	r2,-12(fp)
 201b4cc:	10c00d83 	ldbu	r3,54(r2)
 201b4d0:	d0a7b303 	ldbu	r2,-24884(gp)
 201b4d4:	1884b03a 	or	r2,r3,r2
 201b4d8:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201b4dc:	e0bffd17 	ldw	r2,-12(fp)
 201b4e0:	10800d03 	ldbu	r2,52(r2)
 201b4e4:	10c03fcc 	andi	r3,r2,255
 201b4e8:	e0bffd17 	ldw	r2,-12(fp)
 201b4ec:	10800d03 	ldbu	r2,52(r2)
 201b4f0:	11003fcc 	andi	r4,r2,255
 201b4f4:	d0a7b344 	addi	r2,gp,-24883
 201b4f8:	2085883a 	add	r2,r4,r2
 201b4fc:	11000003 	ldbu	r4,0(r2)
 201b500:	e0bffd17 	ldw	r2,-12(fp)
 201b504:	10800d43 	ldbu	r2,53(r2)
 201b508:	2084b03a 	or	r2,r4,r2
 201b50c:	1009883a 	mov	r4,r2
 201b510:	d0a7b344 	addi	r2,gp,-24883
 201b514:	1885883a 	add	r2,r3,r2
 201b518:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 201b51c:	00800044 	movi	r2,1
 201b520:	e0bffc05 	stb	r2,-16(fp)
 201b524:	00000106 	br	201b52c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 201b528:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 201b52c:	e13ffe17 	ldw	r4,-8(fp)
 201b530:	201b54c0 	call	201b54c <OS_FlagUnlink>
    return (sched);
 201b534:	e0bffc03 	ldbu	r2,-16(fp)
}
 201b538:	e037883a 	mov	sp,fp
 201b53c:	dfc00117 	ldw	ra,4(sp)
 201b540:	df000017 	ldw	fp,0(sp)
 201b544:	dec00204 	addi	sp,sp,8
 201b548:	f800283a 	ret

0201b54c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 201b54c:	defffa04 	addi	sp,sp,-24
 201b550:	df000515 	stw	fp,20(sp)
 201b554:	df000504 	addi	fp,sp,20
 201b558:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 201b55c:	e0bfff17 	ldw	r2,-4(fp)
 201b560:	10800117 	ldw	r2,4(r2)
 201b564:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 201b568:	e0bfff17 	ldw	r2,-4(fp)
 201b56c:	10800017 	ldw	r2,0(r2)
 201b570:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 201b574:	e0bffb17 	ldw	r2,-20(fp)
 201b578:	10000b1e 	bne	r2,zero,201b5a8 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 201b57c:	e0bfff17 	ldw	r2,-4(fp)
 201b580:	10800317 	ldw	r2,12(r2)
 201b584:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 201b588:	e0bffd17 	ldw	r2,-12(fp)
 201b58c:	e0fffc17 	ldw	r3,-16(fp)
 201b590:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 201b594:	e0bffc17 	ldw	r2,-16(fp)
 201b598:	10000b26 	beq	r2,zero,201b5c8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 201b59c:	e0bffc17 	ldw	r2,-16(fp)
 201b5a0:	10000115 	stw	zero,4(r2)
 201b5a4:	00000806 	br	201b5c8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 201b5a8:	e0bffb17 	ldw	r2,-20(fp)
 201b5ac:	e0fffc17 	ldw	r3,-16(fp)
 201b5b0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 201b5b4:	e0bffc17 	ldw	r2,-16(fp)
 201b5b8:	10000326 	beq	r2,zero,201b5c8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 201b5bc:	e0bffc17 	ldw	r2,-16(fp)
 201b5c0:	e0fffb17 	ldw	r3,-20(fp)
 201b5c4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 201b5c8:	e0bfff17 	ldw	r2,-4(fp)
 201b5cc:	10800217 	ldw	r2,8(r2)
 201b5d0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 201b5d4:	e0bffe17 	ldw	r2,-8(fp)
 201b5d8:	10000a15 	stw	zero,40(r2)
#endif
}
 201b5dc:	0001883a 	nop
 201b5e0:	e037883a 	mov	sp,fp
 201b5e4:	df000017 	ldw	fp,0(sp)
 201b5e8:	dec00104 	addi	sp,sp,4
 201b5ec:	f800283a 	ret

0201b5f0 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 201b5f0:	defffa04 	addi	sp,sp,-24
 201b5f4:	df000515 	stw	fp,20(sp)
 201b5f8:	df000504 	addi	fp,sp,20
 201b5fc:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 201b600:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 201b604:	e0bfff17 	ldw	r2,-4(fp)
 201b608:	1000021e 	bne	r2,zero,201b614 <OSMboxAccept+0x24>
        return ((void *)0);
 201b60c:	0005883a 	mov	r2,zero
 201b610:	00001906 	br	201b678 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 201b614:	e0bfff17 	ldw	r2,-4(fp)
 201b618:	10800003 	ldbu	r2,0(r2)
 201b61c:	10803fcc 	andi	r2,r2,255
 201b620:	10800060 	cmpeqi	r2,r2,1
 201b624:	1000021e 	bne	r2,zero,201b630 <OSMboxAccept+0x40>
        return ((void *)0);
 201b628:	0005883a 	mov	r2,zero
 201b62c:	00001206 	br	201b678 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b630:	0005303a 	rdctl	r2,status
 201b634:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b638:	e0fffd17 	ldw	r3,-12(fp)
 201b63c:	00bfff84 	movi	r2,-2
 201b640:	1884703a 	and	r2,r3,r2
 201b644:	1001703a 	wrctl	status,r2
  
  return context;
 201b648:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201b64c:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 201b650:	e0bfff17 	ldw	r2,-4(fp)
 201b654:	10800117 	ldw	r2,4(r2)
 201b658:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 201b65c:	e0bfff17 	ldw	r2,-4(fp)
 201b660:	10000115 	stw	zero,4(r2)
 201b664:	e0bffb17 	ldw	r2,-20(fp)
 201b668:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b66c:	e0bffe17 	ldw	r2,-8(fp)
 201b670:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 201b674:	e0bffc17 	ldw	r2,-16(fp)
}
 201b678:	e037883a 	mov	sp,fp
 201b67c:	df000017 	ldw	fp,0(sp)
 201b680:	dec00104 	addi	sp,sp,4
 201b684:	f800283a 	ret

0201b688 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 201b688:	defff904 	addi	sp,sp,-28
 201b68c:	dfc00615 	stw	ra,24(sp)
 201b690:	df000515 	stw	fp,20(sp)
 201b694:	df000504 	addi	fp,sp,20
 201b698:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b69c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201b6a0:	d0a7b503 	ldbu	r2,-24876(gp)
 201b6a4:	10803fcc 	andi	r2,r2,255
 201b6a8:	10000226 	beq	r2,zero,201b6b4 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 201b6ac:	0005883a 	mov	r2,zero
 201b6b0:	00002506 	br	201b748 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b6b4:	0005303a 	rdctl	r2,status
 201b6b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b6bc:	e0fffe17 	ldw	r3,-8(fp)
 201b6c0:	00bfff84 	movi	r2,-2
 201b6c4:	1884703a 	and	r2,r3,r2
 201b6c8:	1001703a 	wrctl	status,r2
  
  return context;
 201b6cc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201b6d0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201b6d4:	d0a7b417 	ldw	r2,-24880(gp)
 201b6d8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201b6dc:	d0a7b417 	ldw	r2,-24880(gp)
 201b6e0:	10000326 	beq	r2,zero,201b6f0 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201b6e4:	d0a7b417 	ldw	r2,-24880(gp)
 201b6e8:	10800117 	ldw	r2,4(r2)
 201b6ec:	d0a7b415 	stw	r2,-24880(gp)
 201b6f0:	e0bffb17 	ldw	r2,-20(fp)
 201b6f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b6f8:	e0bffc17 	ldw	r2,-16(fp)
 201b6fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 201b700:	e0bffd17 	ldw	r2,-12(fp)
 201b704:	10000f26 	beq	r2,zero,201b744 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 201b708:	e0bffd17 	ldw	r2,-12(fp)
 201b70c:	00c00044 	movi	r3,1
 201b710:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 201b714:	e0bffd17 	ldw	r2,-12(fp)
 201b718:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 201b71c:	e0bffd17 	ldw	r2,-12(fp)
 201b720:	e0ffff17 	ldw	r3,-4(fp)
 201b724:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 201b728:	e0bffd17 	ldw	r2,-12(fp)
 201b72c:	00c00fc4 	movi	r3,63
 201b730:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201b734:	e0bffd17 	ldw	r2,-12(fp)
 201b738:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 201b73c:	e13ffd17 	ldw	r4,-12(fp)
 201b740:	20191dc0 	call	20191dc <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 201b744:	e0bffd17 	ldw	r2,-12(fp)
}
 201b748:	e037883a 	mov	sp,fp
 201b74c:	dfc00117 	ldw	ra,4(sp)
 201b750:	df000017 	ldw	fp,0(sp)
 201b754:	dec00204 	addi	sp,sp,8
 201b758:	f800283a 	ret

0201b75c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201b75c:	defff304 	addi	sp,sp,-52
 201b760:	dfc00c15 	stw	ra,48(sp)
 201b764:	df000b15 	stw	fp,44(sp)
 201b768:	df000b04 	addi	fp,sp,44
 201b76c:	e13ffd15 	stw	r4,-12(fp)
 201b770:	2805883a 	mov	r2,r5
 201b774:	e1bfff15 	stw	r6,-4(fp)
 201b778:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201b77c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201b780:	e0bfff17 	ldw	r2,-4(fp)
 201b784:	1000021e 	bne	r2,zero,201b790 <OSMboxDel+0x34>
        return (pevent);
 201b788:	e0bffd17 	ldw	r2,-12(fp)
 201b78c:	00007e06 	br	201b988 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201b790:	e0bffd17 	ldw	r2,-12(fp)
 201b794:	1000051e 	bne	r2,zero,201b7ac <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201b798:	e0bfff17 	ldw	r2,-4(fp)
 201b79c:	00c00104 	movi	r3,4
 201b7a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201b7a4:	e0bffd17 	ldw	r2,-12(fp)
 201b7a8:	00007706 	br	201b988 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201b7ac:	e0bffd17 	ldw	r2,-12(fp)
 201b7b0:	10800003 	ldbu	r2,0(r2)
 201b7b4:	10803fcc 	andi	r2,r2,255
 201b7b8:	10800060 	cmpeqi	r2,r2,1
 201b7bc:	1000051e 	bne	r2,zero,201b7d4 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201b7c0:	e0bfff17 	ldw	r2,-4(fp)
 201b7c4:	00c00044 	movi	r3,1
 201b7c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201b7cc:	e0bffd17 	ldw	r2,-12(fp)
 201b7d0:	00006d06 	br	201b988 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201b7d4:	d0a7b503 	ldbu	r2,-24876(gp)
 201b7d8:	10803fcc 	andi	r2,r2,255
 201b7dc:	10000526 	beq	r2,zero,201b7f4 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201b7e0:	e0bfff17 	ldw	r2,-4(fp)
 201b7e4:	00c003c4 	movi	r3,15
 201b7e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201b7ec:	e0bffd17 	ldw	r2,-12(fp)
 201b7f0:	00006506 	br	201b988 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b7f4:	0005303a 	rdctl	r2,status
 201b7f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b7fc:	e0fffc17 	ldw	r3,-16(fp)
 201b800:	00bfff84 	movi	r2,-2
 201b804:	1884703a 	and	r2,r3,r2
 201b808:	1001703a 	wrctl	status,r2
  
  return context;
 201b80c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b810:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 201b814:	e0bffd17 	ldw	r2,-12(fp)
 201b818:	10800283 	ldbu	r2,10(r2)
 201b81c:	10803fcc 	andi	r2,r2,255
 201b820:	10000326 	beq	r2,zero,201b830 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201b824:	00800044 	movi	r2,1
 201b828:	e0bff505 	stb	r2,-44(fp)
 201b82c:	00000106 	br	201b834 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201b830:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201b834:	e0bffe03 	ldbu	r2,-8(fp)
 201b838:	10000326 	beq	r2,zero,201b848 <OSMboxDel+0xec>
 201b83c:	10800060 	cmpeqi	r2,r2,1
 201b840:	1000281e 	bne	r2,zero,201b8e4 <OSMboxDel+0x188>
 201b844:	00004506 	br	201b95c <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 201b848:	e0bff503 	ldbu	r2,-44(fp)
 201b84c:	1000161e 	bne	r2,zero,201b8a8 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201b850:	e0bffd17 	ldw	r2,-12(fp)
 201b854:	00c00fc4 	movi	r3,63
 201b858:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201b85c:	e0bffd17 	ldw	r2,-12(fp)
 201b860:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 201b864:	e0bffd17 	ldw	r2,-12(fp)
 201b868:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 201b86c:	d0e7b417 	ldw	r3,-24880(gp)
 201b870:	e0bffd17 	ldw	r2,-12(fp)
 201b874:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 201b878:	e0bffd17 	ldw	r2,-12(fp)
 201b87c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 201b880:	e0bffd17 	ldw	r2,-12(fp)
 201b884:	d0a7b415 	stw	r2,-24880(gp)
 201b888:	e0bff717 	ldw	r2,-36(fp)
 201b88c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b890:	e0bff817 	ldw	r2,-32(fp)
 201b894:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 201b898:	e0bfff17 	ldw	r2,-4(fp)
 201b89c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 201b8a0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 201b8a4:	00003706 	br	201b984 <OSMboxDel+0x228>
 201b8a8:	e0bff717 	ldw	r2,-36(fp)
 201b8ac:	e0bff915 	stw	r2,-28(fp)
 201b8b0:	e0bff917 	ldw	r2,-28(fp)
 201b8b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 201b8b8:	e0bfff17 	ldw	r2,-4(fp)
 201b8bc:	00c01244 	movi	r3,73
 201b8c0:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 201b8c4:	e0bffd17 	ldw	r2,-12(fp)
 201b8c8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201b8cc:	00002d06 	br	201b984 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201b8d0:	000f883a 	mov	r7,zero
 201b8d4:	01800084 	movi	r6,2
 201b8d8:	000b883a 	mov	r5,zero
 201b8dc:	e13ffd17 	ldw	r4,-12(fp)
 201b8e0:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 201b8e4:	e0bffd17 	ldw	r2,-12(fp)
 201b8e8:	10800283 	ldbu	r2,10(r2)
 201b8ec:	10803fcc 	andi	r2,r2,255
 201b8f0:	103ff71e 	bne	r2,zero,201b8d0 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201b8f4:	e0bffd17 	ldw	r2,-12(fp)
 201b8f8:	00c00fc4 	movi	r3,63
 201b8fc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201b900:	e0bffd17 	ldw	r2,-12(fp)
 201b904:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201b908:	e0bffd17 	ldw	r2,-12(fp)
 201b90c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201b910:	d0e7b417 	ldw	r3,-24880(gp)
 201b914:	e0bffd17 	ldw	r2,-12(fp)
 201b918:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201b91c:	e0bffd17 	ldw	r2,-12(fp)
 201b920:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201b924:	e0bffd17 	ldw	r2,-12(fp)
 201b928:	d0a7b415 	stw	r2,-24880(gp)
 201b92c:	e0bff717 	ldw	r2,-36(fp)
 201b930:	e0bffa15 	stw	r2,-24(fp)
 201b934:	e0bffa17 	ldw	r2,-24(fp)
 201b938:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201b93c:	e0bff503 	ldbu	r2,-44(fp)
 201b940:	10800058 	cmpnei	r2,r2,1
 201b944:	1000011e 	bne	r2,zero,201b94c <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201b948:	20196780 	call	2019678 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 201b94c:	e0bfff17 	ldw	r2,-4(fp)
 201b950:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 201b954:	e03ff615 	stw	zero,-40(fp)
             break;
 201b958:	00000a06 	br	201b984 <OSMboxDel+0x228>
 201b95c:	e0bff717 	ldw	r2,-36(fp)
 201b960:	e0bffb15 	stw	r2,-20(fp)
 201b964:	e0bffb17 	ldw	r2,-20(fp)
 201b968:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 201b96c:	e0bfff17 	ldw	r2,-4(fp)
 201b970:	00c001c4 	movi	r3,7
 201b974:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 201b978:	e0bffd17 	ldw	r2,-12(fp)
 201b97c:	e0bff615 	stw	r2,-40(fp)
             break;
 201b980:	0001883a 	nop
    }
    return (pevent_return);
 201b984:	e0bff617 	ldw	r2,-40(fp)
}
 201b988:	e037883a 	mov	sp,fp
 201b98c:	dfc00117 	ldw	ra,4(sp)
 201b990:	df000017 	ldw	fp,0(sp)
 201b994:	dec00204 	addi	sp,sp,8
 201b998:	f800283a 	ret

0201b99c <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201b99c:	defff404 	addi	sp,sp,-48
 201b9a0:	dfc00b15 	stw	ra,44(sp)
 201b9a4:	df000a15 	stw	fp,40(sp)
 201b9a8:	df000a04 	addi	fp,sp,40
 201b9ac:	e13ffd15 	stw	r4,-12(fp)
 201b9b0:	2805883a 	mov	r2,r5
 201b9b4:	e1bfff15 	stw	r6,-4(fp)
 201b9b8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201b9bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201b9c0:	e0bfff17 	ldw	r2,-4(fp)
 201b9c4:	1000021e 	bne	r2,zero,201b9d0 <OSMboxPend+0x34>
        return ((void *)0);
 201b9c8:	0005883a 	mov	r2,zero
 201b9cc:	00007b06 	br	201bbbc <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201b9d0:	e0bffd17 	ldw	r2,-12(fp)
 201b9d4:	1000051e 	bne	r2,zero,201b9ec <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201b9d8:	e0bfff17 	ldw	r2,-4(fp)
 201b9dc:	00c00104 	movi	r3,4
 201b9e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201b9e4:	0005883a 	mov	r2,zero
 201b9e8:	00007406 	br	201bbbc <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201b9ec:	e0bffd17 	ldw	r2,-12(fp)
 201b9f0:	10800003 	ldbu	r2,0(r2)
 201b9f4:	10803fcc 	andi	r2,r2,255
 201b9f8:	10800060 	cmpeqi	r2,r2,1
 201b9fc:	1000051e 	bne	r2,zero,201ba14 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201ba00:	e0bfff17 	ldw	r2,-4(fp)
 201ba04:	00c00044 	movi	r3,1
 201ba08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201ba0c:	0005883a 	mov	r2,zero
 201ba10:	00006a06 	br	201bbbc <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201ba14:	d0a7b503 	ldbu	r2,-24876(gp)
 201ba18:	10803fcc 	andi	r2,r2,255
 201ba1c:	10000526 	beq	r2,zero,201ba34 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201ba20:	e0bfff17 	ldw	r2,-4(fp)
 201ba24:	00c00084 	movi	r3,2
 201ba28:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201ba2c:	0005883a 	mov	r2,zero
 201ba30:	00006206 	br	201bbbc <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201ba34:	d0a7a703 	ldbu	r2,-24932(gp)
 201ba38:	10803fcc 	andi	r2,r2,255
 201ba3c:	10000526 	beq	r2,zero,201ba54 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201ba40:	e0bfff17 	ldw	r2,-4(fp)
 201ba44:	00c00344 	movi	r3,13
 201ba48:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201ba4c:	0005883a 	mov	r2,zero
 201ba50:	00005a06 	br	201bbbc <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ba54:	0005303a 	rdctl	r2,status
 201ba58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ba5c:	e0fffc17 	ldw	r3,-16(fp)
 201ba60:	00bfff84 	movi	r2,-2
 201ba64:	1884703a 	and	r2,r3,r2
 201ba68:	1001703a 	wrctl	status,r2
  
  return context;
 201ba6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201ba70:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 201ba74:	e0bffd17 	ldw	r2,-12(fp)
 201ba78:	10800117 	ldw	r2,4(r2)
 201ba7c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 201ba80:	e0bff617 	ldw	r2,-40(fp)
 201ba84:	10000a26 	beq	r2,zero,201bab0 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 201ba88:	e0bffd17 	ldw	r2,-12(fp)
 201ba8c:	10000115 	stw	zero,4(r2)
 201ba90:	e0bff717 	ldw	r2,-36(fp)
 201ba94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ba98:	e0bff817 	ldw	r2,-32(fp)
 201ba9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201baa0:	e0bfff17 	ldw	r2,-4(fp)
 201baa4:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 201baa8:	e0bff617 	ldw	r2,-40(fp)
 201baac:	00004306 	br	201bbbc <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 201bab0:	d0a7b617 	ldw	r2,-24872(gp)
 201bab4:	d0e7b617 	ldw	r3,-24872(gp)
 201bab8:	18c00c03 	ldbu	r3,48(r3)
 201babc:	18c00094 	ori	r3,r3,2
 201bac0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201bac4:	d0a7b617 	ldw	r2,-24872(gp)
 201bac8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 201bacc:	d0a7b617 	ldw	r2,-24872(gp)
 201bad0:	e0fffe0b 	ldhu	r3,-8(fp)
 201bad4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201bad8:	e13ffd17 	ldw	r4,-12(fp)
 201badc:	2018dc40 	call	2018dc4 <OS_EventTaskWait>
 201bae0:	e0bff717 	ldw	r2,-36(fp)
 201bae4:	e0bffb15 	stw	r2,-20(fp)
 201bae8:	e0bffb17 	ldw	r2,-20(fp)
 201baec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 201baf0:	20196780 	call	2019678 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201baf4:	0005303a 	rdctl	r2,status
 201baf8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bafc:	e0fff917 	ldw	r3,-28(fp)
 201bb00:	00bfff84 	movi	r2,-2
 201bb04:	1884703a 	and	r2,r3,r2
 201bb08:	1001703a 	wrctl	status,r2
  
  return context;
 201bb0c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201bb10:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201bb14:	d0a7b617 	ldw	r2,-24872(gp)
 201bb18:	10800c43 	ldbu	r2,49(r2)
 201bb1c:	10803fcc 	andi	r2,r2,255
 201bb20:	10000326 	beq	r2,zero,201bb30 <OSMboxPend+0x194>
 201bb24:	108000a0 	cmpeqi	r2,r2,2
 201bb28:	1000071e 	bne	r2,zero,201bb48 <OSMboxPend+0x1ac>
 201bb2c:	00000b06 	br	201bb5c <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 201bb30:	d0a7b617 	ldw	r2,-24872(gp)
 201bb34:	10800917 	ldw	r2,36(r2)
 201bb38:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 201bb3c:	e0bfff17 	ldw	r2,-4(fp)
 201bb40:	10000005 	stb	zero,0(r2)
             break;
 201bb44:	00000e06 	br	201bb80 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201bb48:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201bb4c:	e0bfff17 	ldw	r2,-4(fp)
 201bb50:	00c00384 	movi	r3,14
 201bb54:	10c00005 	stb	r3,0(r2)
             break;
 201bb58:	00000906 	br	201bb80 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201bb5c:	d0a7b617 	ldw	r2,-24872(gp)
 201bb60:	e17ffd17 	ldw	r5,-12(fp)
 201bb64:	1009883a 	mov	r4,r2
 201bb68:	20190240 	call	2019024 <OS_EventTaskRemove>
             pmsg = (void *)0;
 201bb6c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201bb70:	e0bfff17 	ldw	r2,-4(fp)
 201bb74:	00c00284 	movi	r3,10
 201bb78:	10c00005 	stb	r3,0(r2)
             break;
 201bb7c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201bb80:	d0a7b617 	ldw	r2,-24872(gp)
 201bb84:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201bb88:	d0a7b617 	ldw	r2,-24872(gp)
 201bb8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201bb90:	d0a7b617 	ldw	r2,-24872(gp)
 201bb94:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201bb98:	d0a7b617 	ldw	r2,-24872(gp)
 201bb9c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201bba0:	d0a7b617 	ldw	r2,-24872(gp)
 201bba4:	10000915 	stw	zero,36(r2)
 201bba8:	e0bff717 	ldw	r2,-36(fp)
 201bbac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bbb0:	e0bffa17 	ldw	r2,-24(fp)
 201bbb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201bbb8:	e0bff617 	ldw	r2,-40(fp)
}
 201bbbc:	e037883a 	mov	sp,fp
 201bbc0:	dfc00117 	ldw	ra,4(sp)
 201bbc4:	df000017 	ldw	fp,0(sp)
 201bbc8:	dec00204 	addi	sp,sp,8
 201bbcc:	f800283a 	ret

0201bbd0 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201bbd0:	defff604 	addi	sp,sp,-40
 201bbd4:	dfc00915 	stw	ra,36(sp)
 201bbd8:	df000815 	stw	fp,32(sp)
 201bbdc:	df000804 	addi	fp,sp,32
 201bbe0:	e13ffd15 	stw	r4,-12(fp)
 201bbe4:	2805883a 	mov	r2,r5
 201bbe8:	e1bfff15 	stw	r6,-4(fp)
 201bbec:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201bbf0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201bbf4:	e0bfff17 	ldw	r2,-4(fp)
 201bbf8:	1000021e 	bne	r2,zero,201bc04 <OSMboxPendAbort+0x34>
        return (0);
 201bbfc:	0005883a 	mov	r2,zero
 201bc00:	00004906 	br	201bd28 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201bc04:	e0bffd17 	ldw	r2,-12(fp)
 201bc08:	1000051e 	bne	r2,zero,201bc20 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201bc0c:	e0bfff17 	ldw	r2,-4(fp)
 201bc10:	00c00104 	movi	r3,4
 201bc14:	10c00005 	stb	r3,0(r2)
        return (0);
 201bc18:	0005883a 	mov	r2,zero
 201bc1c:	00004206 	br	201bd28 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201bc20:	e0bffd17 	ldw	r2,-12(fp)
 201bc24:	10800003 	ldbu	r2,0(r2)
 201bc28:	10803fcc 	andi	r2,r2,255
 201bc2c:	10800060 	cmpeqi	r2,r2,1
 201bc30:	1000051e 	bne	r2,zero,201bc48 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201bc34:	e0bfff17 	ldw	r2,-4(fp)
 201bc38:	00c00044 	movi	r3,1
 201bc3c:	10c00005 	stb	r3,0(r2)
        return (0);
 201bc40:	0005883a 	mov	r2,zero
 201bc44:	00003806 	br	201bd28 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bc48:	0005303a 	rdctl	r2,status
 201bc4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bc50:	e0fffc17 	ldw	r3,-16(fp)
 201bc54:	00bfff84 	movi	r2,-2
 201bc58:	1884703a 	and	r2,r3,r2
 201bc5c:	1001703a 	wrctl	status,r2
  
  return context;
 201bc60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201bc64:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 201bc68:	e0bffd17 	ldw	r2,-12(fp)
 201bc6c:	10800283 	ldbu	r2,10(r2)
 201bc70:	10803fcc 	andi	r2,r2,255
 201bc74:	10002526 	beq	r2,zero,201bd0c <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 201bc78:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201bc7c:	e0bffe03 	ldbu	r2,-8(fp)
 201bc80:	10800060 	cmpeqi	r2,r2,1
 201bc84:	10000e26 	beq	r2,zero,201bcc0 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 201bc88:	00000806 	br	201bcac <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 201bc8c:	01c00084 	movi	r7,2
 201bc90:	01800084 	movi	r6,2
 201bc94:	000b883a 	mov	r5,zero
 201bc98:	e13ffd17 	ldw	r4,-12(fp)
 201bc9c:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                     nbr_tasks++;
 201bca0:	e0bff803 	ldbu	r2,-32(fp)
 201bca4:	10800044 	addi	r2,r2,1
 201bca8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 201bcac:	e0bffd17 	ldw	r2,-12(fp)
 201bcb0:	10800283 	ldbu	r2,10(r2)
 201bcb4:	10803fcc 	andi	r2,r2,255
 201bcb8:	103ff41e 	bne	r2,zero,201bc8c <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201bcbc:	00000906 	br	201bce4 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 201bcc0:	01c00084 	movi	r7,2
 201bcc4:	01800084 	movi	r6,2
 201bcc8:	000b883a 	mov	r5,zero
 201bccc:	e13ffd17 	ldw	r4,-12(fp)
 201bcd0:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                 nbr_tasks++;
 201bcd4:	e0bff803 	ldbu	r2,-32(fp)
 201bcd8:	10800044 	addi	r2,r2,1
 201bcdc:	e0bff805 	stb	r2,-32(fp)
                 break;
 201bce0:	0001883a 	nop
 201bce4:	e0bff917 	ldw	r2,-28(fp)
 201bce8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bcec:	e0bffa17 	ldw	r2,-24(fp)
 201bcf0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 201bcf4:	20196780 	call	2019678 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201bcf8:	e0bfff17 	ldw	r2,-4(fp)
 201bcfc:	00c00384 	movi	r3,14
 201bd00:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201bd04:	e0bff803 	ldbu	r2,-32(fp)
 201bd08:	00000706 	br	201bd28 <OSMboxPendAbort+0x158>
 201bd0c:	e0bff917 	ldw	r2,-28(fp)
 201bd10:	e0bffb15 	stw	r2,-20(fp)
 201bd14:	e0bffb17 	ldw	r2,-20(fp)
 201bd18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201bd1c:	e0bfff17 	ldw	r2,-4(fp)
 201bd20:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 201bd24:	0005883a 	mov	r2,zero
}
 201bd28:	e037883a 	mov	sp,fp
 201bd2c:	dfc00117 	ldw	ra,4(sp)
 201bd30:	df000017 	ldw	fp,0(sp)
 201bd34:	dec00204 	addi	sp,sp,8
 201bd38:	f800283a 	ret

0201bd3c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 201bd3c:	defff704 	addi	sp,sp,-36
 201bd40:	dfc00815 	stw	ra,32(sp)
 201bd44:	df000715 	stw	fp,28(sp)
 201bd48:	df000704 	addi	fp,sp,28
 201bd4c:	e13ffe15 	stw	r4,-8(fp)
 201bd50:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201bd54:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201bd58:	e0bffe17 	ldw	r2,-8(fp)
 201bd5c:	1000021e 	bne	r2,zero,201bd68 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201bd60:	00800104 	movi	r2,4
 201bd64:	00003406 	br	201be38 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201bd68:	e0bfff17 	ldw	r2,-4(fp)
 201bd6c:	1000021e 	bne	r2,zero,201bd78 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 201bd70:	008000c4 	movi	r2,3
 201bd74:	00003006 	br	201be38 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201bd78:	e0bffe17 	ldw	r2,-8(fp)
 201bd7c:	10800003 	ldbu	r2,0(r2)
 201bd80:	10803fcc 	andi	r2,r2,255
 201bd84:	10800060 	cmpeqi	r2,r2,1
 201bd88:	1000021e 	bne	r2,zero,201bd94 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 201bd8c:	00800044 	movi	r2,1
 201bd90:	00002906 	br	201be38 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bd94:	0005303a 	rdctl	r2,status
 201bd98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bd9c:	e0fffd17 	ldw	r3,-12(fp)
 201bda0:	00bfff84 	movi	r2,-2
 201bda4:	1884703a 	and	r2,r3,r2
 201bda8:	1001703a 	wrctl	status,r2
  
  return context;
 201bdac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201bdb0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 201bdb4:	e0bffe17 	ldw	r2,-8(fp)
 201bdb8:	10800283 	ldbu	r2,10(r2)
 201bdbc:	10803fcc 	andi	r2,r2,255
 201bdc0:	10000c26 	beq	r2,zero,201bdf4 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201bdc4:	000f883a 	mov	r7,zero
 201bdc8:	01800084 	movi	r6,2
 201bdcc:	e17fff17 	ldw	r5,-4(fp)
 201bdd0:	e13ffe17 	ldw	r4,-8(fp)
 201bdd4:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
 201bdd8:	e0bff917 	ldw	r2,-28(fp)
 201bddc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bde0:	e0bffa17 	ldw	r2,-24(fp)
 201bde4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201bde8:	20196780 	call	2019678 <OS_Sched>
        return (OS_ERR_NONE);
 201bdec:	0005883a 	mov	r2,zero
 201bdf0:	00001106 	br	201be38 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201bdf4:	e0bffe17 	ldw	r2,-8(fp)
 201bdf8:	10800117 	ldw	r2,4(r2)
 201bdfc:	10000626 	beq	r2,zero,201be18 <OSMboxPost+0xdc>
 201be00:	e0bff917 	ldw	r2,-28(fp)
 201be04:	e0bffb15 	stw	r2,-20(fp)
 201be08:	e0bffb17 	ldw	r2,-20(fp)
 201be0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201be10:	00800504 	movi	r2,20
 201be14:	00000806 	br	201be38 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 201be18:	e0bffe17 	ldw	r2,-8(fp)
 201be1c:	e0ffff17 	ldw	r3,-4(fp)
 201be20:	10c00115 	stw	r3,4(r2)
 201be24:	e0bff917 	ldw	r2,-28(fp)
 201be28:	e0bffc15 	stw	r2,-16(fp)
 201be2c:	e0bffc17 	ldw	r2,-16(fp)
 201be30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201be34:	0005883a 	mov	r2,zero
}
 201be38:	e037883a 	mov	sp,fp
 201be3c:	dfc00117 	ldw	ra,4(sp)
 201be40:	df000017 	ldw	fp,0(sp)
 201be44:	dec00204 	addi	sp,sp,8
 201be48:	f800283a 	ret

0201be4c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201be4c:	defff604 	addi	sp,sp,-40
 201be50:	dfc00915 	stw	ra,36(sp)
 201be54:	df000815 	stw	fp,32(sp)
 201be58:	df000804 	addi	fp,sp,32
 201be5c:	e13ffd15 	stw	r4,-12(fp)
 201be60:	e17ffe15 	stw	r5,-8(fp)
 201be64:	3005883a 	mov	r2,r6
 201be68:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201be6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201be70:	e0bffd17 	ldw	r2,-12(fp)
 201be74:	1000021e 	bne	r2,zero,201be80 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201be78:	00800104 	movi	r2,4
 201be7c:	00004506 	br	201bf94 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 201be80:	e0bffe17 	ldw	r2,-8(fp)
 201be84:	1000021e 	bne	r2,zero,201be90 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 201be88:	008000c4 	movi	r2,3
 201be8c:	00004106 	br	201bf94 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 201be90:	e0bffd17 	ldw	r2,-12(fp)
 201be94:	10800003 	ldbu	r2,0(r2)
 201be98:	10803fcc 	andi	r2,r2,255
 201be9c:	10800060 	cmpeqi	r2,r2,1
 201bea0:	1000021e 	bne	r2,zero,201beac <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 201bea4:	00800044 	movi	r2,1
 201bea8:	00003a06 	br	201bf94 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201beac:	0005303a 	rdctl	r2,status
 201beb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201beb4:	e0fffc17 	ldw	r3,-16(fp)
 201beb8:	00bfff84 	movi	r2,-2
 201bebc:	1884703a 	and	r2,r3,r2
 201bec0:	1001703a 	wrctl	status,r2
  
  return context;
 201bec4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201bec8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 201becc:	e0bffd17 	ldw	r2,-12(fp)
 201bed0:	10800283 	ldbu	r2,10(r2)
 201bed4:	10803fcc 	andi	r2,r2,255
 201bed8:	10001d26 	beq	r2,zero,201bf50 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201bedc:	e0bfff03 	ldbu	r2,-4(fp)
 201bee0:	1080004c 	andi	r2,r2,1
 201bee4:	10000b26 	beq	r2,zero,201bf14 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201bee8:	00000506 	br	201bf00 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201beec:	000f883a 	mov	r7,zero
 201bef0:	01800084 	movi	r6,2
 201bef4:	e17ffe17 	ldw	r5,-8(fp)
 201bef8:	e13ffd17 	ldw	r4,-12(fp)
 201befc:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 201bf00:	e0bffd17 	ldw	r2,-12(fp)
 201bf04:	10800283 	ldbu	r2,10(r2)
 201bf08:	10803fcc 	andi	r2,r2,255
 201bf0c:	103ff71e 	bne	r2,zero,201beec <OSMboxPostOpt+0xa0>
 201bf10:	00000506 	br	201bf28 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 201bf14:	000f883a 	mov	r7,zero
 201bf18:	01800084 	movi	r6,2
 201bf1c:	e17ffe17 	ldw	r5,-8(fp)
 201bf20:	e13ffd17 	ldw	r4,-12(fp)
 201bf24:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
 201bf28:	e0bff817 	ldw	r2,-32(fp)
 201bf2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bf30:	e0bff917 	ldw	r2,-28(fp)
 201bf34:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 201bf38:	e0bfff03 	ldbu	r2,-4(fp)
 201bf3c:	1080010c 	andi	r2,r2,4
 201bf40:	1000011e 	bne	r2,zero,201bf48 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 201bf44:	20196780 	call	2019678 <OS_Sched>
        }
        return (OS_ERR_NONE);
 201bf48:	0005883a 	mov	r2,zero
 201bf4c:	00001106 	br	201bf94 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 201bf50:	e0bffd17 	ldw	r2,-12(fp)
 201bf54:	10800117 	ldw	r2,4(r2)
 201bf58:	10000626 	beq	r2,zero,201bf74 <OSMboxPostOpt+0x128>
 201bf5c:	e0bff817 	ldw	r2,-32(fp)
 201bf60:	e0bffa15 	stw	r2,-24(fp)
 201bf64:	e0bffa17 	ldw	r2,-24(fp)
 201bf68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 201bf6c:	00800504 	movi	r2,20
 201bf70:	00000806 	br	201bf94 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 201bf74:	e0bffd17 	ldw	r2,-12(fp)
 201bf78:	e0fffe17 	ldw	r3,-8(fp)
 201bf7c:	10c00115 	stw	r3,4(r2)
 201bf80:	e0bff817 	ldw	r2,-32(fp)
 201bf84:	e0bffb15 	stw	r2,-20(fp)
 201bf88:	e0bffb17 	ldw	r2,-20(fp)
 201bf8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201bf90:	0005883a 	mov	r2,zero
}
 201bf94:	e037883a 	mov	sp,fp
 201bf98:	dfc00117 	ldw	ra,4(sp)
 201bf9c:	df000017 	ldw	fp,0(sp)
 201bfa0:	dec00204 	addi	sp,sp,8
 201bfa4:	f800283a 	ret

0201bfa8 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 201bfa8:	defff704 	addi	sp,sp,-36
 201bfac:	df000815 	stw	fp,32(sp)
 201bfb0:	df000804 	addi	fp,sp,32
 201bfb4:	e13ffe15 	stw	r4,-8(fp)
 201bfb8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201bfbc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201bfc0:	e0bffe17 	ldw	r2,-8(fp)
 201bfc4:	1000021e 	bne	r2,zero,201bfd0 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201bfc8:	00800104 	movi	r2,4
 201bfcc:	00003606 	br	201c0a8 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 201bfd0:	e0bfff17 	ldw	r2,-4(fp)
 201bfd4:	1000021e 	bne	r2,zero,201bfe0 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201bfd8:	00800244 	movi	r2,9
 201bfdc:	00003206 	br	201c0a8 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 201bfe0:	e0bffe17 	ldw	r2,-8(fp)
 201bfe4:	10800003 	ldbu	r2,0(r2)
 201bfe8:	10803fcc 	andi	r2,r2,255
 201bfec:	10800060 	cmpeqi	r2,r2,1
 201bff0:	1000021e 	bne	r2,zero,201bffc <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201bff4:	00800044 	movi	r2,1
 201bff8:	00002b06 	br	201c0a8 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bffc:	0005303a 	rdctl	r2,status
 201c000:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c004:	e0fffd17 	ldw	r3,-12(fp)
 201c008:	00bfff84 	movi	r2,-2
 201c00c:	1884703a 	and	r2,r3,r2
 201c010:	1001703a 	wrctl	status,r2
  
  return context;
 201c014:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201c018:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 201c01c:	e0bffe17 	ldw	r2,-8(fp)
 201c020:	10c00283 	ldbu	r3,10(r2)
 201c024:	e0bfff17 	ldw	r2,-4(fp)
 201c028:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 201c02c:	e0bffe17 	ldw	r2,-8(fp)
 201c030:	108002c4 	addi	r2,r2,11
 201c034:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 201c038:	e0bfff17 	ldw	r2,-4(fp)
 201c03c:	10800104 	addi	r2,r2,4
 201c040:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201c044:	e03ff805 	stb	zero,-32(fp)
 201c048:	00000b06 	br	201c078 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 201c04c:	e0bffa17 	ldw	r2,-24(fp)
 201c050:	10c00044 	addi	r3,r2,1
 201c054:	e0fffa15 	stw	r3,-24(fp)
 201c058:	e0fff917 	ldw	r3,-28(fp)
 201c05c:	19000044 	addi	r4,r3,1
 201c060:	e13ff915 	stw	r4,-28(fp)
 201c064:	18c00003 	ldbu	r3,0(r3)
 201c068:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201c06c:	e0bff803 	ldbu	r2,-32(fp)
 201c070:	10800044 	addi	r2,r2,1
 201c074:	e0bff805 	stb	r2,-32(fp)
 201c078:	e0bff803 	ldbu	r2,-32(fp)
 201c07c:	108000f0 	cmpltui	r2,r2,3
 201c080:	103ff21e 	bne	r2,zero,201c04c <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 201c084:	e0bffe17 	ldw	r2,-8(fp)
 201c088:	10c00117 	ldw	r3,4(r2)
 201c08c:	e0bfff17 	ldw	r2,-4(fp)
 201c090:	10c00015 	stw	r3,0(r2)
 201c094:	e0bffb17 	ldw	r2,-20(fp)
 201c098:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c09c:	e0bffc17 	ldw	r2,-16(fp)
 201c0a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c0a4:	0005883a 	mov	r2,zero
}
 201c0a8:	e037883a 	mov	sp,fp
 201c0ac:	df000017 	ldw	fp,0(sp)
 201c0b0:	dec00104 	addi	sp,sp,4
 201c0b4:	f800283a 	ret

0201c0b8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 201c0b8:	defff404 	addi	sp,sp,-48
 201c0bc:	df000b15 	stw	fp,44(sp)
 201c0c0:	df000b04 	addi	fp,sp,44
 201c0c4:	e13ffc15 	stw	r4,-16(fp)
 201c0c8:	e17ffd15 	stw	r5,-12(fp)
 201c0cc:	e1bffe15 	stw	r6,-8(fp)
 201c0d0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201c0d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201c0d8:	e0bfff17 	ldw	r2,-4(fp)
 201c0dc:	1000021e 	bne	r2,zero,201c0e8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 201c0e0:	0005883a 	mov	r2,zero
 201c0e4:	00006506 	br	201c27c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 201c0e8:	e0bffc17 	ldw	r2,-16(fp)
 201c0ec:	1000051e 	bne	r2,zero,201c104 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201c0f0:	e0bfff17 	ldw	r2,-4(fp)
 201c0f4:	00c01884 	movi	r3,98
 201c0f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201c0fc:	0005883a 	mov	r2,zero
 201c100:	00005e06 	br	201c27c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 201c104:	e0bffc17 	ldw	r2,-16(fp)
 201c108:	108000cc 	andi	r2,r2,3
 201c10c:	10000526 	beq	r2,zero,201c124 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201c110:	e0bfff17 	ldw	r2,-4(fp)
 201c114:	00c01884 	movi	r3,98
 201c118:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201c11c:	0005883a 	mov	r2,zero
 201c120:	00005606 	br	201c27c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 201c124:	e0bffd17 	ldw	r2,-12(fp)
 201c128:	108000a8 	cmpgeui	r2,r2,2
 201c12c:	1000051e 	bne	r2,zero,201c144 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 201c130:	e0bfff17 	ldw	r2,-4(fp)
 201c134:	00c016c4 	movi	r3,91
 201c138:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201c13c:	0005883a 	mov	r2,zero
 201c140:	00004e06 	br	201c27c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 201c144:	e0bffe17 	ldw	r2,-8(fp)
 201c148:	10800128 	cmpgeui	r2,r2,4
 201c14c:	1000051e 	bne	r2,zero,201c164 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 201c150:	e0bfff17 	ldw	r2,-4(fp)
 201c154:	00c01704 	movi	r3,92
 201c158:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201c15c:	0005883a 	mov	r2,zero
 201c160:	00004606 	br	201c27c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c164:	0005303a 	rdctl	r2,status
 201c168:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c16c:	e0fffb17 	ldw	r3,-20(fp)
 201c170:	00bfff84 	movi	r2,-2
 201c174:	1884703a 	and	r2,r3,r2
 201c178:	1001703a 	wrctl	status,r2
  
  return context;
 201c17c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201c180:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 201c184:	d0a7b017 	ldw	r2,-24896(gp)
 201c188:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 201c18c:	d0a7b017 	ldw	r2,-24896(gp)
 201c190:	10000326 	beq	r2,zero,201c1a0 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 201c194:	d0a7b017 	ldw	r2,-24896(gp)
 201c198:	10800117 	ldw	r2,4(r2)
 201c19c:	d0a7b015 	stw	r2,-24896(gp)
 201c1a0:	e0bff817 	ldw	r2,-32(fp)
 201c1a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c1a8:	e0bff917 	ldw	r2,-28(fp)
 201c1ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 201c1b0:	e0bffa17 	ldw	r2,-24(fp)
 201c1b4:	1000051e 	bne	r2,zero,201c1cc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 201c1b8:	e0bfff17 	ldw	r2,-4(fp)
 201c1bc:	00c01684 	movi	r3,90
 201c1c0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201c1c4:	0005883a 	mov	r2,zero
 201c1c8:	00002c06 	br	201c27c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 201c1cc:	e0bffc17 	ldw	r2,-16(fp)
 201c1d0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 201c1d4:	e0fffc17 	ldw	r3,-16(fp)
 201c1d8:	e0bffe17 	ldw	r2,-8(fp)
 201c1dc:	1885883a 	add	r2,r3,r2
 201c1e0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 201c1e4:	e03ff715 	stw	zero,-36(fp)
 201c1e8:	00000c06 	br	201c21c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 201c1ec:	e0bff617 	ldw	r2,-40(fp)
 201c1f0:	e0fff517 	ldw	r3,-44(fp)
 201c1f4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 201c1f8:	e0bff517 	ldw	r2,-44(fp)
 201c1fc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 201c200:	e0fff517 	ldw	r3,-44(fp)
 201c204:	e0bffe17 	ldw	r2,-8(fp)
 201c208:	1885883a 	add	r2,r3,r2
 201c20c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 201c210:	e0bff717 	ldw	r2,-36(fp)
 201c214:	10800044 	addi	r2,r2,1
 201c218:	e0bff715 	stw	r2,-36(fp)
 201c21c:	e0bffd17 	ldw	r2,-12(fp)
 201c220:	10bfffc4 	addi	r2,r2,-1
 201c224:	e0fff717 	ldw	r3,-36(fp)
 201c228:	18bff036 	bltu	r3,r2,201c1ec <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 201c22c:	e0bff617 	ldw	r2,-40(fp)
 201c230:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 201c234:	e0bffa17 	ldw	r2,-24(fp)
 201c238:	e0fffc17 	ldw	r3,-16(fp)
 201c23c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 201c240:	e0bffa17 	ldw	r2,-24(fp)
 201c244:	e0fffc17 	ldw	r3,-16(fp)
 201c248:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 201c24c:	e0bffa17 	ldw	r2,-24(fp)
 201c250:	e0fffd17 	ldw	r3,-12(fp)
 201c254:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 201c258:	e0bffa17 	ldw	r2,-24(fp)
 201c25c:	e0fffd17 	ldw	r3,-12(fp)
 201c260:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 201c264:	e0bffa17 	ldw	r2,-24(fp)
 201c268:	e0fffe17 	ldw	r3,-8(fp)
 201c26c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 201c270:	e0bfff17 	ldw	r2,-4(fp)
 201c274:	10000005 	stb	zero,0(r2)
    return (pmem);
 201c278:	e0bffa17 	ldw	r2,-24(fp)
}
 201c27c:	e037883a 	mov	sp,fp
 201c280:	df000017 	ldw	fp,0(sp)
 201c284:	dec00104 	addi	sp,sp,4
 201c288:	f800283a 	ret

0201c28c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 201c28c:	defff804 	addi	sp,sp,-32
 201c290:	df000715 	stw	fp,28(sp)
 201c294:	df000704 	addi	fp,sp,28
 201c298:	e13ffe15 	stw	r4,-8(fp)
 201c29c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201c2a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201c2a4:	e0bfff17 	ldw	r2,-4(fp)
 201c2a8:	1000021e 	bne	r2,zero,201c2b4 <OSMemGet+0x28>
        return ((void *)0);
 201c2ac:	0005883a 	mov	r2,zero
 201c2b0:	00002e06 	br	201c36c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 201c2b4:	e0bffe17 	ldw	r2,-8(fp)
 201c2b8:	1000051e 	bne	r2,zero,201c2d0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201c2bc:	e0bfff17 	ldw	r2,-4(fp)
 201c2c0:	00c01804 	movi	r3,96
 201c2c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c2c8:	0005883a 	mov	r2,zero
 201c2cc:	00002706 	br	201c36c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c2d0:	0005303a 	rdctl	r2,status
 201c2d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c2d8:	e0fffd17 	ldw	r3,-12(fp)
 201c2dc:	00bfff84 	movi	r2,-2
 201c2e0:	1884703a 	and	r2,r3,r2
 201c2e4:	1001703a 	wrctl	status,r2
  
  return context;
 201c2e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201c2ec:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 201c2f0:	e0bffe17 	ldw	r2,-8(fp)
 201c2f4:	10800417 	ldw	r2,16(r2)
 201c2f8:	10001426 	beq	r2,zero,201c34c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 201c2fc:	e0bffe17 	ldw	r2,-8(fp)
 201c300:	10800117 	ldw	r2,4(r2)
 201c304:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 201c308:	e0bffb17 	ldw	r2,-20(fp)
 201c30c:	10c00017 	ldw	r3,0(r2)
 201c310:	e0bffe17 	ldw	r2,-8(fp)
 201c314:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 201c318:	e0bffe17 	ldw	r2,-8(fp)
 201c31c:	10800417 	ldw	r2,16(r2)
 201c320:	10ffffc4 	addi	r3,r2,-1
 201c324:	e0bffe17 	ldw	r2,-8(fp)
 201c328:	10c00415 	stw	r3,16(r2)
 201c32c:	e0bff917 	ldw	r2,-28(fp)
 201c330:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c334:	e0bffa17 	ldw	r2,-24(fp)
 201c338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 201c33c:	e0bfff17 	ldw	r2,-4(fp)
 201c340:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 201c344:	e0bffb17 	ldw	r2,-20(fp)
 201c348:	00000806 	br	201c36c <OSMemGet+0xe0>
 201c34c:	e0bff917 	ldw	r2,-28(fp)
 201c350:	e0bffc15 	stw	r2,-16(fp)
 201c354:	e0bffc17 	ldw	r2,-16(fp)
 201c358:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 201c35c:	e0bfff17 	ldw	r2,-4(fp)
 201c360:	00c01744 	movi	r3,93
 201c364:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 201c368:	0005883a 	mov	r2,zero
}
 201c36c:	e037883a 	mov	sp,fp
 201c370:	df000017 	ldw	fp,0(sp)
 201c374:	dec00104 	addi	sp,sp,4
 201c378:	f800283a 	ret

0201c37c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201c37c:	defff704 	addi	sp,sp,-36
 201c380:	dfc00815 	stw	ra,32(sp)
 201c384:	df000715 	stw	fp,28(sp)
 201c388:	df000704 	addi	fp,sp,28
 201c38c:	e13ffd15 	stw	r4,-12(fp)
 201c390:	e17ffe15 	stw	r5,-8(fp)
 201c394:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c398:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201c39c:	e0bfff17 	ldw	r2,-4(fp)
 201c3a0:	1000021e 	bne	r2,zero,201c3ac <OSMemNameGet+0x30>
        return (0);
 201c3a4:	0005883a 	mov	r2,zero
 201c3a8:	00002b06 	br	201c458 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 201c3ac:	e0bffd17 	ldw	r2,-12(fp)
 201c3b0:	1000051e 	bne	r2,zero,201c3c8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201c3b4:	e0bfff17 	ldw	r2,-4(fp)
 201c3b8:	00c01804 	movi	r3,96
 201c3bc:	10c00005 	stb	r3,0(r2)
        return (0);
 201c3c0:	0005883a 	mov	r2,zero
 201c3c4:	00002406 	br	201c458 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201c3c8:	e0bffe17 	ldw	r2,-8(fp)
 201c3cc:	1000051e 	bne	r2,zero,201c3e4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 201c3d0:	e0bfff17 	ldw	r2,-4(fp)
 201c3d4:	00c00304 	movi	r3,12
 201c3d8:	10c00005 	stb	r3,0(r2)
        return (0);
 201c3dc:	0005883a 	mov	r2,zero
 201c3e0:	00001d06 	br	201c458 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201c3e4:	d0a7b503 	ldbu	r2,-24876(gp)
 201c3e8:	10803fcc 	andi	r2,r2,255
 201c3ec:	10000526 	beq	r2,zero,201c404 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 201c3f0:	e0bfff17 	ldw	r2,-4(fp)
 201c3f4:	00c00444 	movi	r3,17
 201c3f8:	10c00005 	stb	r3,0(r2)
        return (0);
 201c3fc:	0005883a 	mov	r2,zero
 201c400:	00001506 	br	201c458 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c404:	0005303a 	rdctl	r2,status
 201c408:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c40c:	e0fffb17 	ldw	r3,-20(fp)
 201c410:	00bfff84 	movi	r2,-2
 201c414:	1884703a 	and	r2,r3,r2
 201c418:	1001703a 	wrctl	status,r2
  
  return context;
 201c41c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201c420:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 201c424:	e0bffd17 	ldw	r2,-12(fp)
 201c428:	10800504 	addi	r2,r2,20
 201c42c:	100b883a 	mov	r5,r2
 201c430:	e13ffe17 	ldw	r4,-8(fp)
 201c434:	20197bc0 	call	20197bc <OS_StrCopy>
 201c438:	e0bffa05 	stb	r2,-24(fp)
 201c43c:	e0bff917 	ldw	r2,-28(fp)
 201c440:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c444:	e0bffc17 	ldw	r2,-16(fp)
 201c448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201c44c:	e0bfff17 	ldw	r2,-4(fp)
 201c450:	10000005 	stb	zero,0(r2)
    return (len);
 201c454:	e0bffa03 	ldbu	r2,-24(fp)
}
 201c458:	e037883a 	mov	sp,fp
 201c45c:	dfc00117 	ldw	ra,4(sp)
 201c460:	df000017 	ldw	fp,0(sp)
 201c464:	dec00204 	addi	sp,sp,8
 201c468:	f800283a 	ret

0201c46c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201c46c:	defff604 	addi	sp,sp,-40
 201c470:	dfc00915 	stw	ra,36(sp)
 201c474:	df000815 	stw	fp,32(sp)
 201c478:	df000804 	addi	fp,sp,32
 201c47c:	e13ffd15 	stw	r4,-12(fp)
 201c480:	e17ffe15 	stw	r5,-8(fp)
 201c484:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c488:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201c48c:	e0bfff17 	ldw	r2,-4(fp)
 201c490:	10003526 	beq	r2,zero,201c568 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 201c494:	e0bffd17 	ldw	r2,-12(fp)
 201c498:	1000041e 	bne	r2,zero,201c4ac <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201c49c:	e0bfff17 	ldw	r2,-4(fp)
 201c4a0:	00c01804 	movi	r3,96
 201c4a4:	10c00005 	stb	r3,0(r2)
        return;
 201c4a8:	00003006 	br	201c56c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201c4ac:	e0bffe17 	ldw	r2,-8(fp)
 201c4b0:	1000041e 	bne	r2,zero,201c4c4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 201c4b4:	e0bfff17 	ldw	r2,-4(fp)
 201c4b8:	00c00304 	movi	r3,12
 201c4bc:	10c00005 	stb	r3,0(r2)
        return;
 201c4c0:	00002a06 	br	201c56c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201c4c4:	d0a7b503 	ldbu	r2,-24876(gp)
 201c4c8:	10803fcc 	andi	r2,r2,255
 201c4cc:	10000426 	beq	r2,zero,201c4e0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 201c4d0:	e0bfff17 	ldw	r2,-4(fp)
 201c4d4:	00c00484 	movi	r3,18
 201c4d8:	10c00005 	stb	r3,0(r2)
        return;
 201c4dc:	00002306 	br	201c56c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c4e0:	0005303a 	rdctl	r2,status
 201c4e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c4e8:	e0fffc17 	ldw	r3,-16(fp)
 201c4ec:	00bfff84 	movi	r2,-2
 201c4f0:	1884703a 	and	r2,r3,r2
 201c4f4:	1001703a 	wrctl	status,r2
  
  return context;
 201c4f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201c4fc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 201c500:	e13ffe17 	ldw	r4,-8(fp)
 201c504:	20198300 	call	2019830 <OS_StrLen>
 201c508:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 201c50c:	e0bffa03 	ldbu	r2,-24(fp)
 201c510:	10800830 	cmpltui	r2,r2,32
 201c514:	1000081e 	bne	r2,zero,201c538 <OSMemNameSet+0xcc>
 201c518:	e0bff817 	ldw	r2,-32(fp)
 201c51c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c520:	e0bff917 	ldw	r2,-28(fp)
 201c524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 201c528:	e0bfff17 	ldw	r2,-4(fp)
 201c52c:	00c018c4 	movi	r3,99
 201c530:	10c00005 	stb	r3,0(r2)
        return;
 201c534:	00000d06 	br	201c56c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 201c538:	e0bffd17 	ldw	r2,-12(fp)
 201c53c:	10800504 	addi	r2,r2,20
 201c540:	e17ffe17 	ldw	r5,-8(fp)
 201c544:	1009883a 	mov	r4,r2
 201c548:	20197bc0 	call	20197bc <OS_StrCopy>
 201c54c:	e0bff817 	ldw	r2,-32(fp)
 201c550:	e0bffb15 	stw	r2,-20(fp)
 201c554:	e0bffb17 	ldw	r2,-20(fp)
 201c558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201c55c:	e0bfff17 	ldw	r2,-4(fp)
 201c560:	10000005 	stb	zero,0(r2)
 201c564:	00000106 	br	201c56c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 201c568:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201c56c:	e037883a 	mov	sp,fp
 201c570:	dfc00117 	ldw	ra,4(sp)
 201c574:	df000017 	ldw	fp,0(sp)
 201c578:	dec00204 	addi	sp,sp,8
 201c57c:	f800283a 	ret

0201c580 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 201c580:	defff904 	addi	sp,sp,-28
 201c584:	df000615 	stw	fp,24(sp)
 201c588:	df000604 	addi	fp,sp,24
 201c58c:	e13ffe15 	stw	r4,-8(fp)
 201c590:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c594:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201c598:	e0bffe17 	ldw	r2,-8(fp)
 201c59c:	1000021e 	bne	r2,zero,201c5a8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201c5a0:	00801804 	movi	r2,96
 201c5a4:	00002806 	br	201c648 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 201c5a8:	e0bfff17 	ldw	r2,-4(fp)
 201c5ac:	1000021e 	bne	r2,zero,201c5b8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 201c5b0:	008017c4 	movi	r2,95
 201c5b4:	00002406 	br	201c648 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c5b8:	0005303a 	rdctl	r2,status
 201c5bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c5c0:	e0fffd17 	ldw	r3,-12(fp)
 201c5c4:	00bfff84 	movi	r2,-2
 201c5c8:	1884703a 	and	r2,r3,r2
 201c5cc:	1001703a 	wrctl	status,r2
  
  return context;
 201c5d0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201c5d4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 201c5d8:	e0bffe17 	ldw	r2,-8(fp)
 201c5dc:	10c00417 	ldw	r3,16(r2)
 201c5e0:	e0bffe17 	ldw	r2,-8(fp)
 201c5e4:	10800317 	ldw	r2,12(r2)
 201c5e8:	18800636 	bltu	r3,r2,201c604 <OSMemPut+0x84>
 201c5ec:	e0bffa17 	ldw	r2,-24(fp)
 201c5f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c5f4:	e0bffb17 	ldw	r2,-20(fp)
 201c5f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 201c5fc:	00801784 	movi	r2,94
 201c600:	00001106 	br	201c648 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 201c604:	e0bffe17 	ldw	r2,-8(fp)
 201c608:	10c00117 	ldw	r3,4(r2)
 201c60c:	e0bfff17 	ldw	r2,-4(fp)
 201c610:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 201c614:	e0bffe17 	ldw	r2,-8(fp)
 201c618:	e0ffff17 	ldw	r3,-4(fp)
 201c61c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 201c620:	e0bffe17 	ldw	r2,-8(fp)
 201c624:	10800417 	ldw	r2,16(r2)
 201c628:	10c00044 	addi	r3,r2,1
 201c62c:	e0bffe17 	ldw	r2,-8(fp)
 201c630:	10c00415 	stw	r3,16(r2)
 201c634:	e0bffa17 	ldw	r2,-24(fp)
 201c638:	e0bffc15 	stw	r2,-16(fp)
 201c63c:	e0bffc17 	ldw	r2,-16(fp)
 201c640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 201c644:	0005883a 	mov	r2,zero
}
 201c648:	e037883a 	mov	sp,fp
 201c64c:	df000017 	ldw	fp,0(sp)
 201c650:	dec00104 	addi	sp,sp,4
 201c654:	f800283a 	ret

0201c658 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 201c658:	defffa04 	addi	sp,sp,-24
 201c65c:	df000515 	stw	fp,20(sp)
 201c660:	df000504 	addi	fp,sp,20
 201c664:	e13ffe15 	stw	r4,-8(fp)
 201c668:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c66c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201c670:	e0bffe17 	ldw	r2,-8(fp)
 201c674:	1000021e 	bne	r2,zero,201c680 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 201c678:	00801804 	movi	r2,96
 201c67c:	00002c06 	br	201c730 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 201c680:	e0bfff17 	ldw	r2,-4(fp)
 201c684:	1000021e 	bne	r2,zero,201c690 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 201c688:	00801844 	movi	r2,97
 201c68c:	00002806 	br	201c730 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c690:	0005303a 	rdctl	r2,status
 201c694:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c698:	e0fffc17 	ldw	r3,-16(fp)
 201c69c:	00bfff84 	movi	r2,-2
 201c6a0:	1884703a 	and	r2,r3,r2
 201c6a4:	1001703a 	wrctl	status,r2
  
  return context;
 201c6a8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201c6ac:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 201c6b0:	e0bffe17 	ldw	r2,-8(fp)
 201c6b4:	10c00017 	ldw	r3,0(r2)
 201c6b8:	e0bfff17 	ldw	r2,-4(fp)
 201c6bc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 201c6c0:	e0bffe17 	ldw	r2,-8(fp)
 201c6c4:	10c00117 	ldw	r3,4(r2)
 201c6c8:	e0bfff17 	ldw	r2,-4(fp)
 201c6cc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 201c6d0:	e0bffe17 	ldw	r2,-8(fp)
 201c6d4:	10c00217 	ldw	r3,8(r2)
 201c6d8:	e0bfff17 	ldw	r2,-4(fp)
 201c6dc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 201c6e0:	e0bffe17 	ldw	r2,-8(fp)
 201c6e4:	10c00317 	ldw	r3,12(r2)
 201c6e8:	e0bfff17 	ldw	r2,-4(fp)
 201c6ec:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 201c6f0:	e0bffe17 	ldw	r2,-8(fp)
 201c6f4:	10c00417 	ldw	r3,16(r2)
 201c6f8:	e0bfff17 	ldw	r2,-4(fp)
 201c6fc:	10c00415 	stw	r3,16(r2)
 201c700:	e0bffb17 	ldw	r2,-20(fp)
 201c704:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c708:	e0bffd17 	ldw	r2,-12(fp)
 201c70c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 201c710:	e0bfff17 	ldw	r2,-4(fp)
 201c714:	10c00317 	ldw	r3,12(r2)
 201c718:	e0bfff17 	ldw	r2,-4(fp)
 201c71c:	10800417 	ldw	r2,16(r2)
 201c720:	1887c83a 	sub	r3,r3,r2
 201c724:	e0bfff17 	ldw	r2,-4(fp)
 201c728:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 201c72c:	0005883a 	mov	r2,zero
}
 201c730:	e037883a 	mov	sp,fp
 201c734:	df000017 	ldw	fp,0(sp)
 201c738:	dec00104 	addi	sp,sp,4
 201c73c:	f800283a 	ret

0201c740 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 201c740:	defffc04 	addi	sp,sp,-16
 201c744:	dfc00315 	stw	ra,12(sp)
 201c748:	df000215 	stw	fp,8(sp)
 201c74c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 201c750:	01430c04 	movi	r5,3120
 201c754:	010080f4 	movhi	r4,515
 201c758:	213c9f04 	addi	r4,r4,-3460
 201c75c:	20195bc0 	call	20195bc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 201c760:	008080f4 	movhi	r2,515
 201c764:	10bc9f04 	addi	r2,r2,-3460
 201c768:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 201c76c:	e03fff0d 	sth	zero,-4(fp)
 201c770:	00001306 	br	201c7c0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 201c774:	e0bfff0b 	ldhu	r2,-4(fp)
 201c778:	10800044 	addi	r2,r2,1
 201c77c:	10c00d24 	muli	r3,r2,52
 201c780:	008080f4 	movhi	r2,515
 201c784:	10bc9f04 	addi	r2,r2,-3460
 201c788:	1887883a 	add	r3,r3,r2
 201c78c:	e0bffe17 	ldw	r2,-8(fp)
 201c790:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 201c794:	e0bffe17 	ldw	r2,-8(fp)
 201c798:	00c00fc4 	movi	r3,63
 201c79c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 201c7a0:	e0bffe17 	ldw	r2,-8(fp)
 201c7a4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 201c7a8:	e0bffe17 	ldw	r2,-8(fp)
 201c7ac:	10800d04 	addi	r2,r2,52
 201c7b0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 201c7b4:	e0bfff0b 	ldhu	r2,-4(fp)
 201c7b8:	10800044 	addi	r2,r2,1
 201c7bc:	e0bfff0d 	sth	r2,-4(fp)
 201c7c0:	e0bfff0b 	ldhu	r2,-4(fp)
 201c7c4:	10800ef0 	cmpltui	r2,r2,59
 201c7c8:	103fea1e 	bne	r2,zero,201c774 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 201c7cc:	e0bffe17 	ldw	r2,-8(fp)
 201c7d0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 201c7d4:	e0bffe17 	ldw	r2,-8(fp)
 201c7d8:	00c00fc4 	movi	r3,63
 201c7dc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 201c7e0:	e0bffe17 	ldw	r2,-8(fp)
 201c7e4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 201c7e8:	008080f4 	movhi	r2,515
 201c7ec:	10bc9f04 	addi	r2,r2,-3460
 201c7f0:	d0a7b015 	stw	r2,-24896(gp)
#endif
}
 201c7f4:	0001883a 	nop
 201c7f8:	e037883a 	mov	sp,fp
 201c7fc:	dfc00117 	ldw	ra,4(sp)
 201c800:	df000017 	ldw	fp,0(sp)
 201c804:	dec00204 	addi	sp,sp,8
 201c808:	f800283a 	ret

0201c80c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 201c80c:	defff804 	addi	sp,sp,-32
 201c810:	df000715 	stw	fp,28(sp)
 201c814:	df000704 	addi	fp,sp,28
 201c818:	e13ffe15 	stw	r4,-8(fp)
 201c81c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c820:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201c824:	e0bfff17 	ldw	r2,-4(fp)
 201c828:	1000021e 	bne	r2,zero,201c834 <OSQAccept+0x28>
        return ((void *)0);
 201c82c:	0005883a 	mov	r2,zero
 201c830:	00004206 	br	201c93c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201c834:	e0bffe17 	ldw	r2,-8(fp)
 201c838:	1000051e 	bne	r2,zero,201c850 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201c83c:	e0bfff17 	ldw	r2,-4(fp)
 201c840:	00c00104 	movi	r3,4
 201c844:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c848:	0005883a 	mov	r2,zero
 201c84c:	00003b06 	br	201c93c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201c850:	e0bffe17 	ldw	r2,-8(fp)
 201c854:	10800003 	ldbu	r2,0(r2)
 201c858:	10803fcc 	andi	r2,r2,255
 201c85c:	108000a0 	cmpeqi	r2,r2,2
 201c860:	1000051e 	bne	r2,zero,201c878 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201c864:	e0bfff17 	ldw	r2,-4(fp)
 201c868:	00c00044 	movi	r3,1
 201c86c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201c870:	0005883a 	mov	r2,zero
 201c874:	00003106 	br	201c93c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c878:	0005303a 	rdctl	r2,status
 201c87c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c880:	e0fffd17 	ldw	r3,-12(fp)
 201c884:	00bfff84 	movi	r2,-2
 201c888:	1884703a 	and	r2,r3,r2
 201c88c:	1001703a 	wrctl	status,r2
  
  return context;
 201c890:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201c894:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201c898:	e0bffe17 	ldw	r2,-8(fp)
 201c89c:	10800117 	ldw	r2,4(r2)
 201c8a0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201c8a4:	e0bffc17 	ldw	r2,-16(fp)
 201c8a8:	1080058b 	ldhu	r2,22(r2)
 201c8ac:	10bfffcc 	andi	r2,r2,65535
 201c8b0:	10001926 	beq	r2,zero,201c918 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201c8b4:	e0bffc17 	ldw	r2,-16(fp)
 201c8b8:	10800417 	ldw	r2,16(r2)
 201c8bc:	11000104 	addi	r4,r2,4
 201c8c0:	e0fffc17 	ldw	r3,-16(fp)
 201c8c4:	19000415 	stw	r4,16(r3)
 201c8c8:	10800017 	ldw	r2,0(r2)
 201c8cc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201c8d0:	e0bffc17 	ldw	r2,-16(fp)
 201c8d4:	1080058b 	ldhu	r2,22(r2)
 201c8d8:	10bfffc4 	addi	r2,r2,-1
 201c8dc:	1007883a 	mov	r3,r2
 201c8e0:	e0bffc17 	ldw	r2,-16(fp)
 201c8e4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201c8e8:	e0bffc17 	ldw	r2,-16(fp)
 201c8ec:	10c00417 	ldw	r3,16(r2)
 201c8f0:	e0bffc17 	ldw	r2,-16(fp)
 201c8f4:	10800217 	ldw	r2,8(r2)
 201c8f8:	1880041e 	bne	r3,r2,201c90c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 201c8fc:	e0bffc17 	ldw	r2,-16(fp)
 201c900:	10c00117 	ldw	r3,4(r2)
 201c904:	e0bffc17 	ldw	r2,-16(fp)
 201c908:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 201c90c:	e0bfff17 	ldw	r2,-4(fp)
 201c910:	10000005 	stb	zero,0(r2)
 201c914:	00000406 	br	201c928 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 201c918:	e0bfff17 	ldw	r2,-4(fp)
 201c91c:	00c007c4 	movi	r3,31
 201c920:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 201c924:	e03ff915 	stw	zero,-28(fp)
 201c928:	e0bffa17 	ldw	r2,-24(fp)
 201c92c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c930:	e0bffb17 	ldw	r2,-20(fp)
 201c934:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 201c938:	e0bff917 	ldw	r2,-28(fp)
}
 201c93c:	e037883a 	mov	sp,fp
 201c940:	df000017 	ldw	fp,0(sp)
 201c944:	dec00104 	addi	sp,sp,4
 201c948:	f800283a 	ret

0201c94c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 201c94c:	defff404 	addi	sp,sp,-48
 201c950:	dfc00b15 	stw	ra,44(sp)
 201c954:	df000a15 	stw	fp,40(sp)
 201c958:	df000a04 	addi	fp,sp,40
 201c95c:	e13ffe15 	stw	r4,-8(fp)
 201c960:	2805883a 	mov	r2,r5
 201c964:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c968:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201c96c:	d0a7b503 	ldbu	r2,-24876(gp)
 201c970:	10803fcc 	andi	r2,r2,255
 201c974:	10000226 	beq	r2,zero,201c980 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 201c978:	0005883a 	mov	r2,zero
 201c97c:	00005906 	br	201cae4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c980:	0005303a 	rdctl	r2,status
 201c984:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c988:	e0fffd17 	ldw	r3,-12(fp)
 201c98c:	00bfff84 	movi	r2,-2
 201c990:	1884703a 	and	r2,r3,r2
 201c994:	1001703a 	wrctl	status,r2
  
  return context;
 201c998:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201c99c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201c9a0:	d0a7b417 	ldw	r2,-24880(gp)
 201c9a4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201c9a8:	d0a7b417 	ldw	r2,-24880(gp)
 201c9ac:	10000326 	beq	r2,zero,201c9bc <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201c9b0:	d0a7b417 	ldw	r2,-24880(gp)
 201c9b4:	10800117 	ldw	r2,4(r2)
 201c9b8:	d0a7b415 	stw	r2,-24880(gp)
 201c9bc:	e0bff717 	ldw	r2,-36(fp)
 201c9c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c9c4:	e0bff817 	ldw	r2,-32(fp)
 201c9c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 201c9cc:	e0bff617 	ldw	r2,-40(fp)
 201c9d0:	10004326 	beq	r2,zero,201cae0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c9d4:	0005303a 	rdctl	r2,status
 201c9d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c9dc:	e0fff917 	ldw	r3,-28(fp)
 201c9e0:	00bfff84 	movi	r2,-2
 201c9e4:	1884703a 	and	r2,r3,r2
 201c9e8:	1001703a 	wrctl	status,r2
  
  return context;
 201c9ec:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 201c9f0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 201c9f4:	d0a7b217 	ldw	r2,-24888(gp)
 201c9f8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 201c9fc:	e0bffb17 	ldw	r2,-20(fp)
 201ca00:	10002d26 	beq	r2,zero,201cab8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 201ca04:	d0a7b217 	ldw	r2,-24888(gp)
 201ca08:	10800017 	ldw	r2,0(r2)
 201ca0c:	d0a7b215 	stw	r2,-24888(gp)
 201ca10:	e0bff717 	ldw	r2,-36(fp)
 201ca14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ca18:	e0bffa17 	ldw	r2,-24(fp)
 201ca1c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 201ca20:	e0bffb17 	ldw	r2,-20(fp)
 201ca24:	e0fffe17 	ldw	r3,-8(fp)
 201ca28:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 201ca2c:	e0bfff0b 	ldhu	r2,-4(fp)
 201ca30:	1085883a 	add	r2,r2,r2
 201ca34:	1085883a 	add	r2,r2,r2
 201ca38:	1007883a 	mov	r3,r2
 201ca3c:	e0bffe17 	ldw	r2,-8(fp)
 201ca40:	10c7883a 	add	r3,r2,r3
 201ca44:	e0bffb17 	ldw	r2,-20(fp)
 201ca48:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 201ca4c:	e0bffb17 	ldw	r2,-20(fp)
 201ca50:	e0fffe17 	ldw	r3,-8(fp)
 201ca54:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 201ca58:	e0bffb17 	ldw	r2,-20(fp)
 201ca5c:	e0fffe17 	ldw	r3,-8(fp)
 201ca60:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 201ca64:	e0bffb17 	ldw	r2,-20(fp)
 201ca68:	e0ffff0b 	ldhu	r3,-4(fp)
 201ca6c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 201ca70:	e0bffb17 	ldw	r2,-20(fp)
 201ca74:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 201ca78:	e0bff617 	ldw	r2,-40(fp)
 201ca7c:	00c00084 	movi	r3,2
 201ca80:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 201ca84:	e0bff617 	ldw	r2,-40(fp)
 201ca88:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 201ca8c:	e0bff617 	ldw	r2,-40(fp)
 201ca90:	e0fffb17 	ldw	r3,-20(fp)
 201ca94:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 201ca98:	e0bff617 	ldw	r2,-40(fp)
 201ca9c:	00c00fc4 	movi	r3,63
 201caa0:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 201caa4:	e0bff617 	ldw	r2,-40(fp)
 201caa8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 201caac:	e13ff617 	ldw	r4,-40(fp)
 201cab0:	20191dc0 	call	20191dc <OS_EventWaitListInit>
 201cab4:	00000a06 	br	201cae0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 201cab8:	d0e7b417 	ldw	r3,-24880(gp)
 201cabc:	e0bff617 	ldw	r2,-40(fp)
 201cac0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 201cac4:	e0bff617 	ldw	r2,-40(fp)
 201cac8:	d0a7b415 	stw	r2,-24880(gp)
 201cacc:	e0bff717 	ldw	r2,-36(fp)
 201cad0:	e0bffc15 	stw	r2,-16(fp)
 201cad4:	e0bffc17 	ldw	r2,-16(fp)
 201cad8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 201cadc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 201cae0:	e0bff617 	ldw	r2,-40(fp)
}
 201cae4:	e037883a 	mov	sp,fp
 201cae8:	dfc00117 	ldw	ra,4(sp)
 201caec:	df000017 	ldw	fp,0(sp)
 201caf0:	dec00204 	addi	sp,sp,8
 201caf4:	f800283a 	ret

0201caf8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201caf8:	defff204 	addi	sp,sp,-56
 201cafc:	dfc00d15 	stw	ra,52(sp)
 201cb00:	df000c15 	stw	fp,48(sp)
 201cb04:	df000c04 	addi	fp,sp,48
 201cb08:	e13ffd15 	stw	r4,-12(fp)
 201cb0c:	2805883a 	mov	r2,r5
 201cb10:	e1bfff15 	stw	r6,-4(fp)
 201cb14:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201cb18:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201cb1c:	e0bfff17 	ldw	r2,-4(fp)
 201cb20:	1000021e 	bne	r2,zero,201cb2c <OSQDel+0x34>
        return (pevent);
 201cb24:	e0bffd17 	ldw	r2,-12(fp)
 201cb28:	00008e06 	br	201cd64 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201cb2c:	e0bffd17 	ldw	r2,-12(fp)
 201cb30:	1000051e 	bne	r2,zero,201cb48 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201cb34:	e0bfff17 	ldw	r2,-4(fp)
 201cb38:	00c00104 	movi	r3,4
 201cb3c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201cb40:	e0bffd17 	ldw	r2,-12(fp)
 201cb44:	00008706 	br	201cd64 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 201cb48:	e0bffd17 	ldw	r2,-12(fp)
 201cb4c:	10800003 	ldbu	r2,0(r2)
 201cb50:	10803fcc 	andi	r2,r2,255
 201cb54:	108000a0 	cmpeqi	r2,r2,2
 201cb58:	1000051e 	bne	r2,zero,201cb70 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201cb5c:	e0bfff17 	ldw	r2,-4(fp)
 201cb60:	00c00044 	movi	r3,1
 201cb64:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201cb68:	e0bffd17 	ldw	r2,-12(fp)
 201cb6c:	00007d06 	br	201cd64 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201cb70:	d0a7b503 	ldbu	r2,-24876(gp)
 201cb74:	10803fcc 	andi	r2,r2,255
 201cb78:	10000526 	beq	r2,zero,201cb90 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 201cb7c:	e0bfff17 	ldw	r2,-4(fp)
 201cb80:	00c003c4 	movi	r3,15
 201cb84:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201cb88:	e0bffd17 	ldw	r2,-12(fp)
 201cb8c:	00007506 	br	201cd64 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cb90:	0005303a 	rdctl	r2,status
 201cb94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cb98:	e0fffc17 	ldw	r3,-16(fp)
 201cb9c:	00bfff84 	movi	r2,-2
 201cba0:	1884703a 	and	r2,r3,r2
 201cba4:	1001703a 	wrctl	status,r2
  
  return context;
 201cba8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201cbac:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 201cbb0:	e0bffd17 	ldw	r2,-12(fp)
 201cbb4:	10800283 	ldbu	r2,10(r2)
 201cbb8:	10803fcc 	andi	r2,r2,255
 201cbbc:	10000326 	beq	r2,zero,201cbcc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201cbc0:	00800044 	movi	r2,1
 201cbc4:	e0bff405 	stb	r2,-48(fp)
 201cbc8:	00000106 	br	201cbd0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201cbcc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 201cbd0:	e0bffe03 	ldbu	r2,-8(fp)
 201cbd4:	10000326 	beq	r2,zero,201cbe4 <OSQDel+0xec>
 201cbd8:	10800060 	cmpeqi	r2,r2,1
 201cbdc:	1000301e 	bne	r2,zero,201cca0 <OSQDel+0x1a8>
 201cbe0:	00005506 	br	201cd38 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 201cbe4:	e0bff403 	ldbu	r2,-48(fp)
 201cbe8:	10001e1e 	bne	r2,zero,201cc64 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201cbec:	e0bffd17 	ldw	r2,-12(fp)
 201cbf0:	00c00fc4 	movi	r3,63
 201cbf4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201cbf8:	e0bffd17 	ldw	r2,-12(fp)
 201cbfc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 201cc00:	e0bffd17 	ldw	r2,-12(fp)
 201cc04:	10800117 	ldw	r2,4(r2)
 201cc08:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 201cc0c:	d0e7b217 	ldw	r3,-24888(gp)
 201cc10:	e0bff817 	ldw	r2,-32(fp)
 201cc14:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 201cc18:	e0bff817 	ldw	r2,-32(fp)
 201cc1c:	d0a7b215 	stw	r2,-24888(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201cc20:	e0bffd17 	ldw	r2,-12(fp)
 201cc24:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201cc28:	d0e7b417 	ldw	r3,-24880(gp)
 201cc2c:	e0bffd17 	ldw	r2,-12(fp)
 201cc30:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201cc34:	e0bffd17 	ldw	r2,-12(fp)
 201cc38:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201cc3c:	e0bffd17 	ldw	r2,-12(fp)
 201cc40:	d0a7b415 	stw	r2,-24880(gp)
 201cc44:	e0bff617 	ldw	r2,-40(fp)
 201cc48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cc4c:	e0bff717 	ldw	r2,-36(fp)
 201cc50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201cc54:	e0bfff17 	ldw	r2,-4(fp)
 201cc58:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 201cc5c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 201cc60:	00003f06 	br	201cd60 <OSQDel+0x268>
 201cc64:	e0bff617 	ldw	r2,-40(fp)
 201cc68:	e0bff915 	stw	r2,-28(fp)
 201cc6c:	e0bff917 	ldw	r2,-28(fp)
 201cc70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201cc74:	e0bfff17 	ldw	r2,-4(fp)
 201cc78:	00c01244 	movi	r3,73
 201cc7c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 201cc80:	e0bffd17 	ldw	r2,-12(fp)
 201cc84:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 201cc88:	00003506 	br	201cd60 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 201cc8c:	000f883a 	mov	r7,zero
 201cc90:	01800104 	movi	r6,4
 201cc94:	000b883a 	mov	r5,zero
 201cc98:	e13ffd17 	ldw	r4,-12(fp)
 201cc9c:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 201cca0:	e0bffd17 	ldw	r2,-12(fp)
 201cca4:	10800283 	ldbu	r2,10(r2)
 201cca8:	10803fcc 	andi	r2,r2,255
 201ccac:	103ff71e 	bne	r2,zero,201cc8c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201ccb0:	e0bffd17 	ldw	r2,-12(fp)
 201ccb4:	00c00fc4 	movi	r3,63
 201ccb8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201ccbc:	e0bffd17 	ldw	r2,-12(fp)
 201ccc0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 201ccc4:	e0bffd17 	ldw	r2,-12(fp)
 201ccc8:	10800117 	ldw	r2,4(r2)
 201cccc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 201ccd0:	d0e7b217 	ldw	r3,-24888(gp)
 201ccd4:	e0bff817 	ldw	r2,-32(fp)
 201ccd8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 201ccdc:	e0bff817 	ldw	r2,-32(fp)
 201cce0:	d0a7b215 	stw	r2,-24888(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201cce4:	e0bffd17 	ldw	r2,-12(fp)
 201cce8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201ccec:	d0e7b417 	ldw	r3,-24880(gp)
 201ccf0:	e0bffd17 	ldw	r2,-12(fp)
 201ccf4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201ccf8:	e0bffd17 	ldw	r2,-12(fp)
 201ccfc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201cd00:	e0bffd17 	ldw	r2,-12(fp)
 201cd04:	d0a7b415 	stw	r2,-24880(gp)
 201cd08:	e0bff617 	ldw	r2,-40(fp)
 201cd0c:	e0bffa15 	stw	r2,-24(fp)
 201cd10:	e0bffa17 	ldw	r2,-24(fp)
 201cd14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201cd18:	e0bff403 	ldbu	r2,-48(fp)
 201cd1c:	10800058 	cmpnei	r2,r2,1
 201cd20:	1000011e 	bne	r2,zero,201cd28 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201cd24:	20196780 	call	2019678 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201cd28:	e0bfff17 	ldw	r2,-4(fp)
 201cd2c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 201cd30:	e03ff515 	stw	zero,-44(fp)
             break;
 201cd34:	00000a06 	br	201cd60 <OSQDel+0x268>
 201cd38:	e0bff617 	ldw	r2,-40(fp)
 201cd3c:	e0bffb15 	stw	r2,-20(fp)
 201cd40:	e0bffb17 	ldw	r2,-20(fp)
 201cd44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201cd48:	e0bfff17 	ldw	r2,-4(fp)
 201cd4c:	00c001c4 	movi	r3,7
 201cd50:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201cd54:	e0bffd17 	ldw	r2,-12(fp)
 201cd58:	e0bff515 	stw	r2,-44(fp)
             break;
 201cd5c:	0001883a 	nop
    }
    return (pevent_return);
 201cd60:	e0bff517 	ldw	r2,-44(fp)
}
 201cd64:	e037883a 	mov	sp,fp
 201cd68:	dfc00117 	ldw	ra,4(sp)
 201cd6c:	df000017 	ldw	fp,0(sp)
 201cd70:	dec00204 	addi	sp,sp,8
 201cd74:	f800283a 	ret

0201cd78 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 201cd78:	defffa04 	addi	sp,sp,-24
 201cd7c:	df000515 	stw	fp,20(sp)
 201cd80:	df000504 	addi	fp,sp,20
 201cd84:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201cd88:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201cd8c:	e0bfff17 	ldw	r2,-4(fp)
 201cd90:	1000021e 	bne	r2,zero,201cd9c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 201cd94:	00800104 	movi	r2,4
 201cd98:	00002106 	br	201ce20 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201cd9c:	e0bfff17 	ldw	r2,-4(fp)
 201cda0:	10800003 	ldbu	r2,0(r2)
 201cda4:	10803fcc 	andi	r2,r2,255
 201cda8:	108000a0 	cmpeqi	r2,r2,2
 201cdac:	1000021e 	bne	r2,zero,201cdb8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 201cdb0:	00800044 	movi	r2,1
 201cdb4:	00001a06 	br	201ce20 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cdb8:	0005303a 	rdctl	r2,status
 201cdbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cdc0:	e0fffd17 	ldw	r3,-12(fp)
 201cdc4:	00bfff84 	movi	r2,-2
 201cdc8:	1884703a 	and	r2,r3,r2
 201cdcc:	1001703a 	wrctl	status,r2
  
  return context;
 201cdd0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201cdd4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 201cdd8:	e0bfff17 	ldw	r2,-4(fp)
 201cddc:	10800117 	ldw	r2,4(r2)
 201cde0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 201cde4:	e0bffc17 	ldw	r2,-16(fp)
 201cde8:	10c00117 	ldw	r3,4(r2)
 201cdec:	e0bffc17 	ldw	r2,-16(fp)
 201cdf0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 201cdf4:	e0bffc17 	ldw	r2,-16(fp)
 201cdf8:	10c00117 	ldw	r3,4(r2)
 201cdfc:	e0bffc17 	ldw	r2,-16(fp)
 201ce00:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 201ce04:	e0bffc17 	ldw	r2,-16(fp)
 201ce08:	1000058d 	sth	zero,22(r2)
 201ce0c:	e0bffb17 	ldw	r2,-20(fp)
 201ce10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ce14:	e0bffe17 	ldw	r2,-8(fp)
 201ce18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ce1c:	0005883a 	mov	r2,zero
}
 201ce20:	e037883a 	mov	sp,fp
 201ce24:	df000017 	ldw	fp,0(sp)
 201ce28:	dec00104 	addi	sp,sp,4
 201ce2c:	f800283a 	ret

0201ce30 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201ce30:	defff304 	addi	sp,sp,-52
 201ce34:	dfc00c15 	stw	ra,48(sp)
 201ce38:	df000b15 	stw	fp,44(sp)
 201ce3c:	df000b04 	addi	fp,sp,44
 201ce40:	e13ffd15 	stw	r4,-12(fp)
 201ce44:	2805883a 	mov	r2,r5
 201ce48:	e1bfff15 	stw	r6,-4(fp)
 201ce4c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201ce50:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201ce54:	e0bfff17 	ldw	r2,-4(fp)
 201ce58:	1000021e 	bne	r2,zero,201ce64 <OSQPend+0x34>
        return ((void *)0);
 201ce5c:	0005883a 	mov	r2,zero
 201ce60:	00009106 	br	201d0a8 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201ce64:	e0bffd17 	ldw	r2,-12(fp)
 201ce68:	1000051e 	bne	r2,zero,201ce80 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201ce6c:	e0bfff17 	ldw	r2,-4(fp)
 201ce70:	00c00104 	movi	r3,4
 201ce74:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201ce78:	0005883a 	mov	r2,zero
 201ce7c:	00008a06 	br	201d0a8 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 201ce80:	e0bffd17 	ldw	r2,-12(fp)
 201ce84:	10800003 	ldbu	r2,0(r2)
 201ce88:	10803fcc 	andi	r2,r2,255
 201ce8c:	108000a0 	cmpeqi	r2,r2,2
 201ce90:	1000051e 	bne	r2,zero,201cea8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201ce94:	e0bfff17 	ldw	r2,-4(fp)
 201ce98:	00c00044 	movi	r3,1
 201ce9c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201cea0:	0005883a 	mov	r2,zero
 201cea4:	00008006 	br	201d0a8 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201cea8:	d0a7b503 	ldbu	r2,-24876(gp)
 201ceac:	10803fcc 	andi	r2,r2,255
 201ceb0:	10000526 	beq	r2,zero,201cec8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 201ceb4:	e0bfff17 	ldw	r2,-4(fp)
 201ceb8:	00c00084 	movi	r3,2
 201cebc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201cec0:	0005883a 	mov	r2,zero
 201cec4:	00007806 	br	201d0a8 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 201cec8:	d0a7a703 	ldbu	r2,-24932(gp)
 201cecc:	10803fcc 	andi	r2,r2,255
 201ced0:	10000526 	beq	r2,zero,201cee8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 201ced4:	e0bfff17 	ldw	r2,-4(fp)
 201ced8:	00c00344 	movi	r3,13
 201cedc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201cee0:	0005883a 	mov	r2,zero
 201cee4:	00007006 	br	201d0a8 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cee8:	0005303a 	rdctl	r2,status
 201ceec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cef0:	e0fffc17 	ldw	r3,-16(fp)
 201cef4:	00bfff84 	movi	r2,-2
 201cef8:	1884703a 	and	r2,r3,r2
 201cefc:	1001703a 	wrctl	status,r2
  
  return context;
 201cf00:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201cf04:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201cf08:	e0bffd17 	ldw	r2,-12(fp)
 201cf0c:	10800117 	ldw	r2,4(r2)
 201cf10:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 201cf14:	e0bff817 	ldw	r2,-32(fp)
 201cf18:	1080058b 	ldhu	r2,22(r2)
 201cf1c:	10bfffcc 	andi	r2,r2,65535
 201cf20:	10001e26 	beq	r2,zero,201cf9c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201cf24:	e0bff817 	ldw	r2,-32(fp)
 201cf28:	10800417 	ldw	r2,16(r2)
 201cf2c:	11000104 	addi	r4,r2,4
 201cf30:	e0fff817 	ldw	r3,-32(fp)
 201cf34:	19000415 	stw	r4,16(r3)
 201cf38:	10800017 	ldw	r2,0(r2)
 201cf3c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 201cf40:	e0bff817 	ldw	r2,-32(fp)
 201cf44:	1080058b 	ldhu	r2,22(r2)
 201cf48:	10bfffc4 	addi	r2,r2,-1
 201cf4c:	1007883a 	mov	r3,r2
 201cf50:	e0bff817 	ldw	r2,-32(fp)
 201cf54:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201cf58:	e0bff817 	ldw	r2,-32(fp)
 201cf5c:	10c00417 	ldw	r3,16(r2)
 201cf60:	e0bff817 	ldw	r2,-32(fp)
 201cf64:	10800217 	ldw	r2,8(r2)
 201cf68:	1880041e 	bne	r3,r2,201cf7c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 201cf6c:	e0bff817 	ldw	r2,-32(fp)
 201cf70:	10c00117 	ldw	r3,4(r2)
 201cf74:	e0bff817 	ldw	r2,-32(fp)
 201cf78:	10c00415 	stw	r3,16(r2)
 201cf7c:	e0bff617 	ldw	r2,-40(fp)
 201cf80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cf84:	e0bff717 	ldw	r2,-36(fp)
 201cf88:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201cf8c:	e0bfff17 	ldw	r2,-4(fp)
 201cf90:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 201cf94:	e0bff517 	ldw	r2,-44(fp)
 201cf98:	00004306 	br	201d0a8 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 201cf9c:	d0a7b617 	ldw	r2,-24872(gp)
 201cfa0:	d0e7b617 	ldw	r3,-24872(gp)
 201cfa4:	18c00c03 	ldbu	r3,48(r3)
 201cfa8:	18c00114 	ori	r3,r3,4
 201cfac:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201cfb0:	d0a7b617 	ldw	r2,-24872(gp)
 201cfb4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 201cfb8:	d0a7b617 	ldw	r2,-24872(gp)
 201cfbc:	e0fffe0b 	ldhu	r3,-8(fp)
 201cfc0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 201cfc4:	e13ffd17 	ldw	r4,-12(fp)
 201cfc8:	2018dc40 	call	2018dc4 <OS_EventTaskWait>
 201cfcc:	e0bff617 	ldw	r2,-40(fp)
 201cfd0:	e0bffb15 	stw	r2,-20(fp)
 201cfd4:	e0bffb17 	ldw	r2,-20(fp)
 201cfd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 201cfdc:	20196780 	call	2019678 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cfe0:	0005303a 	rdctl	r2,status
 201cfe4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cfe8:	e0fff917 	ldw	r3,-28(fp)
 201cfec:	00bfff84 	movi	r2,-2
 201cff0:	1884703a 	and	r2,r3,r2
 201cff4:	1001703a 	wrctl	status,r2
  
  return context;
 201cff8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201cffc:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201d000:	d0a7b617 	ldw	r2,-24872(gp)
 201d004:	10800c43 	ldbu	r2,49(r2)
 201d008:	10803fcc 	andi	r2,r2,255
 201d00c:	10000326 	beq	r2,zero,201d01c <OSQPend+0x1ec>
 201d010:	108000a0 	cmpeqi	r2,r2,2
 201d014:	1000071e 	bne	r2,zero,201d034 <OSQPend+0x204>
 201d018:	00000b06 	br	201d048 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 201d01c:	d0a7b617 	ldw	r2,-24872(gp)
 201d020:	10800917 	ldw	r2,36(r2)
 201d024:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 201d028:	e0bfff17 	ldw	r2,-4(fp)
 201d02c:	10000005 	stb	zero,0(r2)
             break;
 201d030:	00000e06 	br	201d06c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 201d034:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201d038:	e0bfff17 	ldw	r2,-4(fp)
 201d03c:	00c00384 	movi	r3,14
 201d040:	10c00005 	stb	r3,0(r2)
             break;
 201d044:	00000906 	br	201d06c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201d048:	d0a7b617 	ldw	r2,-24872(gp)
 201d04c:	e17ffd17 	ldw	r5,-12(fp)
 201d050:	1009883a 	mov	r4,r2
 201d054:	20190240 	call	2019024 <OS_EventTaskRemove>
             pmsg = (void *)0;
 201d058:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201d05c:	e0bfff17 	ldw	r2,-4(fp)
 201d060:	00c00284 	movi	r3,10
 201d064:	10c00005 	stb	r3,0(r2)
             break;
 201d068:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201d06c:	d0a7b617 	ldw	r2,-24872(gp)
 201d070:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201d074:	d0a7b617 	ldw	r2,-24872(gp)
 201d078:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201d07c:	d0a7b617 	ldw	r2,-24872(gp)
 201d080:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201d084:	d0a7b617 	ldw	r2,-24872(gp)
 201d088:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 201d08c:	d0a7b617 	ldw	r2,-24872(gp)
 201d090:	10000915 	stw	zero,36(r2)
 201d094:	e0bff617 	ldw	r2,-40(fp)
 201d098:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d09c:	e0bffa17 	ldw	r2,-24(fp)
 201d0a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 201d0a4:	e0bff517 	ldw	r2,-44(fp)
}
 201d0a8:	e037883a 	mov	sp,fp
 201d0ac:	dfc00117 	ldw	ra,4(sp)
 201d0b0:	df000017 	ldw	fp,0(sp)
 201d0b4:	dec00204 	addi	sp,sp,8
 201d0b8:	f800283a 	ret

0201d0bc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201d0bc:	defff604 	addi	sp,sp,-40
 201d0c0:	dfc00915 	stw	ra,36(sp)
 201d0c4:	df000815 	stw	fp,32(sp)
 201d0c8:	df000804 	addi	fp,sp,32
 201d0cc:	e13ffd15 	stw	r4,-12(fp)
 201d0d0:	2805883a 	mov	r2,r5
 201d0d4:	e1bfff15 	stw	r6,-4(fp)
 201d0d8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201d0dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201d0e0:	e0bfff17 	ldw	r2,-4(fp)
 201d0e4:	1000021e 	bne	r2,zero,201d0f0 <OSQPendAbort+0x34>
        return (0);
 201d0e8:	0005883a 	mov	r2,zero
 201d0ec:	00004906 	br	201d214 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201d0f0:	e0bffd17 	ldw	r2,-12(fp)
 201d0f4:	1000051e 	bne	r2,zero,201d10c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201d0f8:	e0bfff17 	ldw	r2,-4(fp)
 201d0fc:	00c00104 	movi	r3,4
 201d100:	10c00005 	stb	r3,0(r2)
        return (0);
 201d104:	0005883a 	mov	r2,zero
 201d108:	00004206 	br	201d214 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 201d10c:	e0bffd17 	ldw	r2,-12(fp)
 201d110:	10800003 	ldbu	r2,0(r2)
 201d114:	10803fcc 	andi	r2,r2,255
 201d118:	108000a0 	cmpeqi	r2,r2,2
 201d11c:	1000051e 	bne	r2,zero,201d134 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201d120:	e0bfff17 	ldw	r2,-4(fp)
 201d124:	00c00044 	movi	r3,1
 201d128:	10c00005 	stb	r3,0(r2)
        return (0);
 201d12c:	0005883a 	mov	r2,zero
 201d130:	00003806 	br	201d214 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d134:	0005303a 	rdctl	r2,status
 201d138:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d13c:	e0fffc17 	ldw	r3,-16(fp)
 201d140:	00bfff84 	movi	r2,-2
 201d144:	1884703a 	and	r2,r3,r2
 201d148:	1001703a 	wrctl	status,r2
  
  return context;
 201d14c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d150:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 201d154:	e0bffd17 	ldw	r2,-12(fp)
 201d158:	10800283 	ldbu	r2,10(r2)
 201d15c:	10803fcc 	andi	r2,r2,255
 201d160:	10002526 	beq	r2,zero,201d1f8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 201d164:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201d168:	e0bffe03 	ldbu	r2,-8(fp)
 201d16c:	10800060 	cmpeqi	r2,r2,1
 201d170:	10000e26 	beq	r2,zero,201d1ac <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201d174:	00000806 	br	201d198 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201d178:	01c00084 	movi	r7,2
 201d17c:	01800104 	movi	r6,4
 201d180:	000b883a 	mov	r5,zero
 201d184:	e13ffd17 	ldw	r4,-12(fp)
 201d188:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                     nbr_tasks++;
 201d18c:	e0bff803 	ldbu	r2,-32(fp)
 201d190:	10800044 	addi	r2,r2,1
 201d194:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201d198:	e0bffd17 	ldw	r2,-12(fp)
 201d19c:	10800283 	ldbu	r2,10(r2)
 201d1a0:	10803fcc 	andi	r2,r2,255
 201d1a4:	103ff41e 	bne	r2,zero,201d178 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201d1a8:	00000906 	br	201d1d0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201d1ac:	01c00084 	movi	r7,2
 201d1b0:	01800104 	movi	r6,4
 201d1b4:	000b883a 	mov	r5,zero
 201d1b8:	e13ffd17 	ldw	r4,-12(fp)
 201d1bc:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                 nbr_tasks++;
 201d1c0:	e0bff803 	ldbu	r2,-32(fp)
 201d1c4:	10800044 	addi	r2,r2,1
 201d1c8:	e0bff805 	stb	r2,-32(fp)
                 break;
 201d1cc:	0001883a 	nop
 201d1d0:	e0bff917 	ldw	r2,-28(fp)
 201d1d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d1d8:	e0bffa17 	ldw	r2,-24(fp)
 201d1dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 201d1e0:	20196780 	call	2019678 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201d1e4:	e0bfff17 	ldw	r2,-4(fp)
 201d1e8:	00c00384 	movi	r3,14
 201d1ec:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201d1f0:	e0bff803 	ldbu	r2,-32(fp)
 201d1f4:	00000706 	br	201d214 <OSQPendAbort+0x158>
 201d1f8:	e0bff917 	ldw	r2,-28(fp)
 201d1fc:	e0bffb15 	stw	r2,-20(fp)
 201d200:	e0bffb17 	ldw	r2,-20(fp)
 201d204:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201d208:	e0bfff17 	ldw	r2,-4(fp)
 201d20c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 201d210:	0005883a 	mov	r2,zero
}
 201d214:	e037883a 	mov	sp,fp
 201d218:	dfc00117 	ldw	ra,4(sp)
 201d21c:	df000017 	ldw	fp,0(sp)
 201d220:	dec00204 	addi	sp,sp,8
 201d224:	f800283a 	ret

0201d228 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 201d228:	defff604 	addi	sp,sp,-40
 201d22c:	dfc00915 	stw	ra,36(sp)
 201d230:	df000815 	stw	fp,32(sp)
 201d234:	df000804 	addi	fp,sp,32
 201d238:	e13ffe15 	stw	r4,-8(fp)
 201d23c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201d240:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 201d244:	e0bffe17 	ldw	r2,-8(fp)
 201d248:	1000021e 	bne	r2,zero,201d254 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201d24c:	00800104 	movi	r2,4
 201d250:	00004a06 	br	201d37c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 201d254:	e0bffe17 	ldw	r2,-8(fp)
 201d258:	10800003 	ldbu	r2,0(r2)
 201d25c:	10803fcc 	andi	r2,r2,255
 201d260:	108000a0 	cmpeqi	r2,r2,2
 201d264:	1000021e 	bne	r2,zero,201d270 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 201d268:	00800044 	movi	r2,1
 201d26c:	00004306 	br	201d37c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d270:	0005303a 	rdctl	r2,status
 201d274:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d278:	e0fffd17 	ldw	r3,-12(fp)
 201d27c:	00bfff84 	movi	r2,-2
 201d280:	1884703a 	and	r2,r3,r2
 201d284:	1001703a 	wrctl	status,r2
  
  return context;
 201d288:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201d28c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 201d290:	e0bffe17 	ldw	r2,-8(fp)
 201d294:	10800283 	ldbu	r2,10(r2)
 201d298:	10803fcc 	andi	r2,r2,255
 201d29c:	10000c26 	beq	r2,zero,201d2d0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201d2a0:	000f883a 	mov	r7,zero
 201d2a4:	01800104 	movi	r6,4
 201d2a8:	e17fff17 	ldw	r5,-4(fp)
 201d2ac:	e13ffe17 	ldw	r4,-8(fp)
 201d2b0:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
 201d2b4:	e0bff817 	ldw	r2,-32(fp)
 201d2b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d2bc:	e0bff917 	ldw	r2,-28(fp)
 201d2c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 201d2c4:	20196780 	call	2019678 <OS_Sched>
        return (OS_ERR_NONE);
 201d2c8:	0005883a 	mov	r2,zero
 201d2cc:	00002b06 	br	201d37c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 201d2d0:	e0bffe17 	ldw	r2,-8(fp)
 201d2d4:	10800117 	ldw	r2,4(r2)
 201d2d8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 201d2dc:	e0bffb17 	ldw	r2,-20(fp)
 201d2e0:	10c0058b 	ldhu	r3,22(r2)
 201d2e4:	e0bffb17 	ldw	r2,-20(fp)
 201d2e8:	1080050b 	ldhu	r2,20(r2)
 201d2ec:	18ffffcc 	andi	r3,r3,65535
 201d2f0:	10bfffcc 	andi	r2,r2,65535
 201d2f4:	18800636 	bltu	r3,r2,201d310 <OSQPost+0xe8>
 201d2f8:	e0bff817 	ldw	r2,-32(fp)
 201d2fc:	e0bffa15 	stw	r2,-24(fp)
 201d300:	e0bffa17 	ldw	r2,-24(fp)
 201d304:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201d308:	00800784 	movi	r2,30
 201d30c:	00001b06 	br	201d37c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 201d310:	e0bffb17 	ldw	r2,-20(fp)
 201d314:	10800317 	ldw	r2,12(r2)
 201d318:	11000104 	addi	r4,r2,4
 201d31c:	e0fffb17 	ldw	r3,-20(fp)
 201d320:	19000315 	stw	r4,12(r3)
 201d324:	e0ffff17 	ldw	r3,-4(fp)
 201d328:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 201d32c:	e0bffb17 	ldw	r2,-20(fp)
 201d330:	1080058b 	ldhu	r2,22(r2)
 201d334:	10800044 	addi	r2,r2,1
 201d338:	1007883a 	mov	r3,r2
 201d33c:	e0bffb17 	ldw	r2,-20(fp)
 201d340:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 201d344:	e0bffb17 	ldw	r2,-20(fp)
 201d348:	10c00317 	ldw	r3,12(r2)
 201d34c:	e0bffb17 	ldw	r2,-20(fp)
 201d350:	10800217 	ldw	r2,8(r2)
 201d354:	1880041e 	bne	r3,r2,201d368 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 201d358:	e0bffb17 	ldw	r2,-20(fp)
 201d35c:	10c00117 	ldw	r3,4(r2)
 201d360:	e0bffb17 	ldw	r2,-20(fp)
 201d364:	10c00315 	stw	r3,12(r2)
 201d368:	e0bff817 	ldw	r2,-32(fp)
 201d36c:	e0bffc15 	stw	r2,-16(fp)
 201d370:	e0bffc17 	ldw	r2,-16(fp)
 201d374:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201d378:	0005883a 	mov	r2,zero
}
 201d37c:	e037883a 	mov	sp,fp
 201d380:	dfc00117 	ldw	ra,4(sp)
 201d384:	df000017 	ldw	fp,0(sp)
 201d388:	dec00204 	addi	sp,sp,8
 201d38c:	f800283a 	ret

0201d390 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 201d390:	defff604 	addi	sp,sp,-40
 201d394:	dfc00915 	stw	ra,36(sp)
 201d398:	df000815 	stw	fp,32(sp)
 201d39c:	df000804 	addi	fp,sp,32
 201d3a0:	e13ffe15 	stw	r4,-8(fp)
 201d3a4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d3a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d3ac:	e0bffe17 	ldw	r2,-8(fp)
 201d3b0:	1000021e 	bne	r2,zero,201d3bc <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 201d3b4:	00800104 	movi	r2,4
 201d3b8:	00004c06 	br	201d4ec <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201d3bc:	e0bffe17 	ldw	r2,-8(fp)
 201d3c0:	10800003 	ldbu	r2,0(r2)
 201d3c4:	10803fcc 	andi	r2,r2,255
 201d3c8:	108000a0 	cmpeqi	r2,r2,2
 201d3cc:	1000021e 	bne	r2,zero,201d3d8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 201d3d0:	00800044 	movi	r2,1
 201d3d4:	00004506 	br	201d4ec <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d3d8:	0005303a 	rdctl	r2,status
 201d3dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d3e0:	e0fffd17 	ldw	r3,-12(fp)
 201d3e4:	00bfff84 	movi	r2,-2
 201d3e8:	1884703a 	and	r2,r3,r2
 201d3ec:	1001703a 	wrctl	status,r2
  
  return context;
 201d3f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201d3f4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 201d3f8:	e0bffe17 	ldw	r2,-8(fp)
 201d3fc:	10800283 	ldbu	r2,10(r2)
 201d400:	10803fcc 	andi	r2,r2,255
 201d404:	10000c26 	beq	r2,zero,201d438 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201d408:	000f883a 	mov	r7,zero
 201d40c:	01800104 	movi	r6,4
 201d410:	e17fff17 	ldw	r5,-4(fp)
 201d414:	e13ffe17 	ldw	r4,-8(fp)
 201d418:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
 201d41c:	e0bff817 	ldw	r2,-32(fp)
 201d420:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d424:	e0bff917 	ldw	r2,-28(fp)
 201d428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 201d42c:	20196780 	call	2019678 <OS_Sched>
        return (OS_ERR_NONE);
 201d430:	0005883a 	mov	r2,zero
 201d434:	00002d06 	br	201d4ec <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201d438:	e0bffe17 	ldw	r2,-8(fp)
 201d43c:	10800117 	ldw	r2,4(r2)
 201d440:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201d444:	e0bffb17 	ldw	r2,-20(fp)
 201d448:	10c0058b 	ldhu	r3,22(r2)
 201d44c:	e0bffb17 	ldw	r2,-20(fp)
 201d450:	1080050b 	ldhu	r2,20(r2)
 201d454:	18ffffcc 	andi	r3,r3,65535
 201d458:	10bfffcc 	andi	r2,r2,65535
 201d45c:	18800636 	bltu	r3,r2,201d478 <OSQPostFront+0xe8>
 201d460:	e0bff817 	ldw	r2,-32(fp)
 201d464:	e0bffa15 	stw	r2,-24(fp)
 201d468:	e0bffa17 	ldw	r2,-24(fp)
 201d46c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201d470:	00800784 	movi	r2,30
 201d474:	00001d06 	br	201d4ec <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 201d478:	e0bffb17 	ldw	r2,-20(fp)
 201d47c:	10c00417 	ldw	r3,16(r2)
 201d480:	e0bffb17 	ldw	r2,-20(fp)
 201d484:	10800117 	ldw	r2,4(r2)
 201d488:	1880041e 	bne	r3,r2,201d49c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 201d48c:	e0bffb17 	ldw	r2,-20(fp)
 201d490:	10c00217 	ldw	r3,8(r2)
 201d494:	e0bffb17 	ldw	r2,-20(fp)
 201d498:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 201d49c:	e0bffb17 	ldw	r2,-20(fp)
 201d4a0:	10800417 	ldw	r2,16(r2)
 201d4a4:	10ffff04 	addi	r3,r2,-4
 201d4a8:	e0bffb17 	ldw	r2,-20(fp)
 201d4ac:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 201d4b0:	e0bffb17 	ldw	r2,-20(fp)
 201d4b4:	10800417 	ldw	r2,16(r2)
 201d4b8:	e0ffff17 	ldw	r3,-4(fp)
 201d4bc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 201d4c0:	e0bffb17 	ldw	r2,-20(fp)
 201d4c4:	1080058b 	ldhu	r2,22(r2)
 201d4c8:	10800044 	addi	r2,r2,1
 201d4cc:	1007883a 	mov	r3,r2
 201d4d0:	e0bffb17 	ldw	r2,-20(fp)
 201d4d4:	10c0058d 	sth	r3,22(r2)
 201d4d8:	e0bff817 	ldw	r2,-32(fp)
 201d4dc:	e0bffc15 	stw	r2,-16(fp)
 201d4e0:	e0bffc17 	ldw	r2,-16(fp)
 201d4e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201d4e8:	0005883a 	mov	r2,zero
}
 201d4ec:	e037883a 	mov	sp,fp
 201d4f0:	dfc00117 	ldw	ra,4(sp)
 201d4f4:	df000017 	ldw	fp,0(sp)
 201d4f8:	dec00204 	addi	sp,sp,8
 201d4fc:	f800283a 	ret

0201d500 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 201d500:	defff504 	addi	sp,sp,-44
 201d504:	dfc00a15 	stw	ra,40(sp)
 201d508:	df000915 	stw	fp,36(sp)
 201d50c:	df000904 	addi	fp,sp,36
 201d510:	e13ffd15 	stw	r4,-12(fp)
 201d514:	e17ffe15 	stw	r5,-8(fp)
 201d518:	3005883a 	mov	r2,r6
 201d51c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d520:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d524:	e0bffd17 	ldw	r2,-12(fp)
 201d528:	1000021e 	bne	r2,zero,201d534 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 201d52c:	00800104 	movi	r2,4
 201d530:	00007106 	br	201d6f8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 201d534:	e0bffd17 	ldw	r2,-12(fp)
 201d538:	10800003 	ldbu	r2,0(r2)
 201d53c:	10803fcc 	andi	r2,r2,255
 201d540:	108000a0 	cmpeqi	r2,r2,2
 201d544:	1000021e 	bne	r2,zero,201d550 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 201d548:	00800044 	movi	r2,1
 201d54c:	00006a06 	br	201d6f8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d550:	0005303a 	rdctl	r2,status
 201d554:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d558:	e0fffc17 	ldw	r3,-16(fp)
 201d55c:	00bfff84 	movi	r2,-2
 201d560:	1884703a 	and	r2,r3,r2
 201d564:	1001703a 	wrctl	status,r2
  
  return context;
 201d568:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201d56c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 201d570:	e0bffd17 	ldw	r2,-12(fp)
 201d574:	10800283 	ldbu	r2,10(r2)
 201d578:	10803fcc 	andi	r2,r2,255
 201d57c:	10001d26 	beq	r2,zero,201d5f4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 201d580:	e0bfff03 	ldbu	r2,-4(fp)
 201d584:	1080004c 	andi	r2,r2,1
 201d588:	10000b26 	beq	r2,zero,201d5b8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201d58c:	00000506 	br	201d5a4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201d590:	000f883a 	mov	r7,zero
 201d594:	01800104 	movi	r6,4
 201d598:	e17ffe17 	ldw	r5,-8(fp)
 201d59c:	e13ffd17 	ldw	r4,-12(fp)
 201d5a0:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201d5a4:	e0bffd17 	ldw	r2,-12(fp)
 201d5a8:	10800283 	ldbu	r2,10(r2)
 201d5ac:	10803fcc 	andi	r2,r2,255
 201d5b0:	103ff71e 	bne	r2,zero,201d590 <OSQPostOpt+0x90>
 201d5b4:	00000506 	br	201d5cc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201d5b8:	000f883a 	mov	r7,zero
 201d5bc:	01800104 	movi	r6,4
 201d5c0:	e17ffe17 	ldw	r5,-8(fp)
 201d5c4:	e13ffd17 	ldw	r4,-12(fp)
 201d5c8:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
 201d5cc:	e0bff717 	ldw	r2,-36(fp)
 201d5d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d5d4:	e0bff817 	ldw	r2,-32(fp)
 201d5d8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 201d5dc:	e0bfff03 	ldbu	r2,-4(fp)
 201d5e0:	1080010c 	andi	r2,r2,4
 201d5e4:	1000011e 	bne	r2,zero,201d5ec <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 201d5e8:	20196780 	call	2019678 <OS_Sched>
        }
        return (OS_ERR_NONE);
 201d5ec:	0005883a 	mov	r2,zero
 201d5f0:	00004106 	br	201d6f8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201d5f4:	e0bffd17 	ldw	r2,-12(fp)
 201d5f8:	10800117 	ldw	r2,4(r2)
 201d5fc:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 201d600:	e0bffa17 	ldw	r2,-24(fp)
 201d604:	10c0058b 	ldhu	r3,22(r2)
 201d608:	e0bffa17 	ldw	r2,-24(fp)
 201d60c:	1080050b 	ldhu	r2,20(r2)
 201d610:	18ffffcc 	andi	r3,r3,65535
 201d614:	10bfffcc 	andi	r2,r2,65535
 201d618:	18800636 	bltu	r3,r2,201d634 <OSQPostOpt+0x134>
 201d61c:	e0bff717 	ldw	r2,-36(fp)
 201d620:	e0bff915 	stw	r2,-28(fp)
 201d624:	e0bff917 	ldw	r2,-28(fp)
 201d628:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201d62c:	00800784 	movi	r2,30
 201d630:	00003106 	br	201d6f8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 201d634:	e0bfff03 	ldbu	r2,-4(fp)
 201d638:	1080008c 	andi	r2,r2,2
 201d63c:	10001326 	beq	r2,zero,201d68c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 201d640:	e0bffa17 	ldw	r2,-24(fp)
 201d644:	10c00417 	ldw	r3,16(r2)
 201d648:	e0bffa17 	ldw	r2,-24(fp)
 201d64c:	10800117 	ldw	r2,4(r2)
 201d650:	1880041e 	bne	r3,r2,201d664 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 201d654:	e0bffa17 	ldw	r2,-24(fp)
 201d658:	10c00217 	ldw	r3,8(r2)
 201d65c:	e0bffa17 	ldw	r2,-24(fp)
 201d660:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 201d664:	e0bffa17 	ldw	r2,-24(fp)
 201d668:	10800417 	ldw	r2,16(r2)
 201d66c:	10ffff04 	addi	r3,r2,-4
 201d670:	e0bffa17 	ldw	r2,-24(fp)
 201d674:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 201d678:	e0bffa17 	ldw	r2,-24(fp)
 201d67c:	10800417 	ldw	r2,16(r2)
 201d680:	e0fffe17 	ldw	r3,-8(fp)
 201d684:	10c00015 	stw	r3,0(r2)
 201d688:	00001006 	br	201d6cc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 201d68c:	e0bffa17 	ldw	r2,-24(fp)
 201d690:	10800317 	ldw	r2,12(r2)
 201d694:	11000104 	addi	r4,r2,4
 201d698:	e0fffa17 	ldw	r3,-24(fp)
 201d69c:	19000315 	stw	r4,12(r3)
 201d6a0:	e0fffe17 	ldw	r3,-8(fp)
 201d6a4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 201d6a8:	e0bffa17 	ldw	r2,-24(fp)
 201d6ac:	10c00317 	ldw	r3,12(r2)
 201d6b0:	e0bffa17 	ldw	r2,-24(fp)
 201d6b4:	10800217 	ldw	r2,8(r2)
 201d6b8:	1880041e 	bne	r3,r2,201d6cc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 201d6bc:	e0bffa17 	ldw	r2,-24(fp)
 201d6c0:	10c00117 	ldw	r3,4(r2)
 201d6c4:	e0bffa17 	ldw	r2,-24(fp)
 201d6c8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 201d6cc:	e0bffa17 	ldw	r2,-24(fp)
 201d6d0:	1080058b 	ldhu	r2,22(r2)
 201d6d4:	10800044 	addi	r2,r2,1
 201d6d8:	1007883a 	mov	r3,r2
 201d6dc:	e0bffa17 	ldw	r2,-24(fp)
 201d6e0:	10c0058d 	sth	r3,22(r2)
 201d6e4:	e0bff717 	ldw	r2,-36(fp)
 201d6e8:	e0bffb15 	stw	r2,-20(fp)
 201d6ec:	e0bffb17 	ldw	r2,-20(fp)
 201d6f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201d6f4:	0005883a 	mov	r2,zero
}
 201d6f8:	e037883a 	mov	sp,fp
 201d6fc:	dfc00117 	ldw	ra,4(sp)
 201d700:	df000017 	ldw	fp,0(sp)
 201d704:	dec00204 	addi	sp,sp,8
 201d708:	f800283a 	ret

0201d70c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 201d70c:	defff604 	addi	sp,sp,-40
 201d710:	df000915 	stw	fp,36(sp)
 201d714:	df000904 	addi	fp,sp,36
 201d718:	e13ffe15 	stw	r4,-8(fp)
 201d71c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201d720:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 201d724:	e0bffe17 	ldw	r2,-8(fp)
 201d728:	1000021e 	bne	r2,zero,201d734 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201d72c:	00800104 	movi	r2,4
 201d730:	00004906 	br	201d858 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 201d734:	e0bfff17 	ldw	r2,-4(fp)
 201d738:	1000021e 	bne	r2,zero,201d744 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201d73c:	00800244 	movi	r2,9
 201d740:	00004506 	br	201d858 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 201d744:	e0bffe17 	ldw	r2,-8(fp)
 201d748:	10800003 	ldbu	r2,0(r2)
 201d74c:	10803fcc 	andi	r2,r2,255
 201d750:	108000a0 	cmpeqi	r2,r2,2
 201d754:	1000021e 	bne	r2,zero,201d760 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201d758:	00800044 	movi	r2,1
 201d75c:	00003e06 	br	201d858 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d760:	0005303a 	rdctl	r2,status
 201d764:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d768:	e0fffd17 	ldw	r3,-12(fp)
 201d76c:	00bfff84 	movi	r2,-2
 201d770:	1884703a 	and	r2,r3,r2
 201d774:	1001703a 	wrctl	status,r2
  
  return context;
 201d778:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201d77c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 201d780:	e0bffe17 	ldw	r2,-8(fp)
 201d784:	10c00283 	ldbu	r3,10(r2)
 201d788:	e0bfff17 	ldw	r2,-4(fp)
 201d78c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 201d790:	e0bffe17 	ldw	r2,-8(fp)
 201d794:	108002c4 	addi	r2,r2,11
 201d798:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 201d79c:	e0bfff17 	ldw	r2,-4(fp)
 201d7a0:	10800204 	addi	r2,r2,8
 201d7a4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201d7a8:	e03ff705 	stb	zero,-36(fp)
 201d7ac:	00000b06 	br	201d7dc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 201d7b0:	e0bff917 	ldw	r2,-28(fp)
 201d7b4:	10c00044 	addi	r3,r2,1
 201d7b8:	e0fff915 	stw	r3,-28(fp)
 201d7bc:	e0fff817 	ldw	r3,-32(fp)
 201d7c0:	19000044 	addi	r4,r3,1
 201d7c4:	e13ff815 	stw	r4,-32(fp)
 201d7c8:	18c00003 	ldbu	r3,0(r3)
 201d7cc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201d7d0:	e0bff703 	ldbu	r2,-36(fp)
 201d7d4:	10800044 	addi	r2,r2,1
 201d7d8:	e0bff705 	stb	r2,-36(fp)
 201d7dc:	e0bff703 	ldbu	r2,-36(fp)
 201d7e0:	108000f0 	cmpltui	r2,r2,3
 201d7e4:	103ff21e 	bne	r2,zero,201d7b0 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 201d7e8:	e0bffe17 	ldw	r2,-8(fp)
 201d7ec:	10800117 	ldw	r2,4(r2)
 201d7f0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 201d7f4:	e0bffc17 	ldw	r2,-16(fp)
 201d7f8:	1080058b 	ldhu	r2,22(r2)
 201d7fc:	10bfffcc 	andi	r2,r2,65535
 201d800:	10000626 	beq	r2,zero,201d81c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 201d804:	e0bffc17 	ldw	r2,-16(fp)
 201d808:	10800417 	ldw	r2,16(r2)
 201d80c:	10c00017 	ldw	r3,0(r2)
 201d810:	e0bfff17 	ldw	r2,-4(fp)
 201d814:	10c00015 	stw	r3,0(r2)
 201d818:	00000206 	br	201d824 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 201d81c:	e0bfff17 	ldw	r2,-4(fp)
 201d820:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 201d824:	e0bffc17 	ldw	r2,-16(fp)
 201d828:	10c0058b 	ldhu	r3,22(r2)
 201d82c:	e0bfff17 	ldw	r2,-4(fp)
 201d830:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 201d834:	e0bffc17 	ldw	r2,-16(fp)
 201d838:	10c0050b 	ldhu	r3,20(r2)
 201d83c:	e0bfff17 	ldw	r2,-4(fp)
 201d840:	10c0018d 	sth	r3,6(r2)
 201d844:	e0bffa17 	ldw	r2,-24(fp)
 201d848:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d84c:	e0bffb17 	ldw	r2,-20(fp)
 201d850:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201d854:	0005883a 	mov	r2,zero
}
 201d858:	e037883a 	mov	sp,fp
 201d85c:	df000017 	ldw	fp,0(sp)
 201d860:	dec00104 	addi	sp,sp,4
 201d864:	f800283a 	ret

0201d868 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 201d868:	defffb04 	addi	sp,sp,-20
 201d86c:	dfc00415 	stw	ra,16(sp)
 201d870:	df000315 	stw	fp,12(sp)
 201d874:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 201d878:	01407804 	movi	r5,480
 201d87c:	010080f4 	movhi	r4,515
 201d880:	2101ab04 	addi	r4,r4,1708
 201d884:	20195bc0 	call	20195bc <OS_MemClr>
    pq1 = &OSQTbl[0];
 201d888:	008080f4 	movhi	r2,515
 201d88c:	1081ab04 	addi	r2,r2,1708
 201d890:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 201d894:	008080f4 	movhi	r2,515
 201d898:	1081b104 	addi	r2,r2,1732
 201d89c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201d8a0:	e03ffd0d 	sth	zero,-12(fp)
 201d8a4:	00000c06 	br	201d8d8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 201d8a8:	e0bffe17 	ldw	r2,-8(fp)
 201d8ac:	e0ffff17 	ldw	r3,-4(fp)
 201d8b0:	10c00015 	stw	r3,0(r2)
        pq1++;
 201d8b4:	e0bffe17 	ldw	r2,-8(fp)
 201d8b8:	10800604 	addi	r2,r2,24
 201d8bc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 201d8c0:	e0bfff17 	ldw	r2,-4(fp)
 201d8c4:	10800604 	addi	r2,r2,24
 201d8c8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201d8cc:	e0bffd0b 	ldhu	r2,-12(fp)
 201d8d0:	10800044 	addi	r2,r2,1
 201d8d4:	e0bffd0d 	sth	r2,-12(fp)
 201d8d8:	e0bffd0b 	ldhu	r2,-12(fp)
 201d8dc:	108004f0 	cmpltui	r2,r2,19
 201d8e0:	103ff11e 	bne	r2,zero,201d8a8 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 201d8e4:	e0bffe17 	ldw	r2,-8(fp)
 201d8e8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 201d8ec:	008080f4 	movhi	r2,515
 201d8f0:	1081ab04 	addi	r2,r2,1708
 201d8f4:	d0a7b215 	stw	r2,-24888(gp)
#endif
}
 201d8f8:	0001883a 	nop
 201d8fc:	e037883a 	mov	sp,fp
 201d900:	dfc00117 	ldw	ra,4(sp)
 201d904:	df000017 	ldw	fp,0(sp)
 201d908:	dec00204 	addi	sp,sp,8
 201d90c:	f800283a 	ret

0201d910 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 201d910:	defffa04 	addi	sp,sp,-24
 201d914:	df000515 	stw	fp,20(sp)
 201d918:	df000504 	addi	fp,sp,20
 201d91c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201d920:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201d924:	e0bfff17 	ldw	r2,-4(fp)
 201d928:	1000021e 	bne	r2,zero,201d934 <OSSemAccept+0x24>
        return (0);
 201d92c:	0005883a 	mov	r2,zero
 201d930:	00001f06 	br	201d9b0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201d934:	e0bfff17 	ldw	r2,-4(fp)
 201d938:	10800003 	ldbu	r2,0(r2)
 201d93c:	10803fcc 	andi	r2,r2,255
 201d940:	108000e0 	cmpeqi	r2,r2,3
 201d944:	1000021e 	bne	r2,zero,201d950 <OSSemAccept+0x40>
        return (0);
 201d948:	0005883a 	mov	r2,zero
 201d94c:	00001806 	br	201d9b0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d950:	0005303a 	rdctl	r2,status
 201d954:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d958:	e0fffe17 	ldw	r3,-8(fp)
 201d95c:	00bfff84 	movi	r2,-2
 201d960:	1884703a 	and	r2,r3,r2
 201d964:	1001703a 	wrctl	status,r2
  
  return context;
 201d968:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201d96c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 201d970:	e0bfff17 	ldw	r2,-4(fp)
 201d974:	1080020b 	ldhu	r2,8(r2)
 201d978:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 201d97c:	e0bffd0b 	ldhu	r2,-12(fp)
 201d980:	10000626 	beq	r2,zero,201d99c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 201d984:	e0bfff17 	ldw	r2,-4(fp)
 201d988:	1080020b 	ldhu	r2,8(r2)
 201d98c:	10bfffc4 	addi	r2,r2,-1
 201d990:	1007883a 	mov	r3,r2
 201d994:	e0bfff17 	ldw	r2,-4(fp)
 201d998:	10c0020d 	sth	r3,8(r2)
 201d99c:	e0bffb17 	ldw	r2,-20(fp)
 201d9a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d9a4:	e0bffc17 	ldw	r2,-16(fp)
 201d9a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 201d9ac:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201d9b0:	e037883a 	mov	sp,fp
 201d9b4:	df000017 	ldw	fp,0(sp)
 201d9b8:	dec00104 	addi	sp,sp,4
 201d9bc:	f800283a 	ret

0201d9c0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 201d9c0:	defff904 	addi	sp,sp,-28
 201d9c4:	dfc00615 	stw	ra,24(sp)
 201d9c8:	df000515 	stw	fp,20(sp)
 201d9cc:	df000504 	addi	fp,sp,20
 201d9d0:	2005883a 	mov	r2,r4
 201d9d4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201d9d8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201d9dc:	d0a7b503 	ldbu	r2,-24876(gp)
 201d9e0:	10803fcc 	andi	r2,r2,255
 201d9e4:	10000226 	beq	r2,zero,201d9f0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 201d9e8:	0005883a 	mov	r2,zero
 201d9ec:	00002506 	br	201da84 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d9f0:	0005303a 	rdctl	r2,status
 201d9f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d9f8:	e0fffe17 	ldw	r3,-8(fp)
 201d9fc:	00bfff84 	movi	r2,-2
 201da00:	1884703a 	and	r2,r3,r2
 201da04:	1001703a 	wrctl	status,r2
  
  return context;
 201da08:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201da0c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 201da10:	d0a7b417 	ldw	r2,-24880(gp)
 201da14:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 201da18:	d0a7b417 	ldw	r2,-24880(gp)
 201da1c:	10000326 	beq	r2,zero,201da2c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201da20:	d0a7b417 	ldw	r2,-24880(gp)
 201da24:	10800117 	ldw	r2,4(r2)
 201da28:	d0a7b415 	stw	r2,-24880(gp)
 201da2c:	e0bffb17 	ldw	r2,-20(fp)
 201da30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201da34:	e0bffc17 	ldw	r2,-16(fp)
 201da38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 201da3c:	e0bffd17 	ldw	r2,-12(fp)
 201da40:	10000f26 	beq	r2,zero,201da80 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 201da44:	e0bffd17 	ldw	r2,-12(fp)
 201da48:	00c000c4 	movi	r3,3
 201da4c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 201da50:	e0bffd17 	ldw	r2,-12(fp)
 201da54:	e0ffff0b 	ldhu	r3,-4(fp)
 201da58:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 201da5c:	e0bffd17 	ldw	r2,-12(fp)
 201da60:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 201da64:	e0bffd17 	ldw	r2,-12(fp)
 201da68:	00c00fc4 	movi	r3,63
 201da6c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201da70:	e0bffd17 	ldw	r2,-12(fp)
 201da74:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 201da78:	e13ffd17 	ldw	r4,-12(fp)
 201da7c:	20191dc0 	call	20191dc <OS_EventWaitListInit>
    }
    return (pevent);
 201da80:	e0bffd17 	ldw	r2,-12(fp)
}
 201da84:	e037883a 	mov	sp,fp
 201da88:	dfc00117 	ldw	ra,4(sp)
 201da8c:	df000017 	ldw	fp,0(sp)
 201da90:	dec00204 	addi	sp,sp,8
 201da94:	f800283a 	ret

0201da98 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201da98:	defff304 	addi	sp,sp,-52
 201da9c:	dfc00c15 	stw	ra,48(sp)
 201daa0:	df000b15 	stw	fp,44(sp)
 201daa4:	df000b04 	addi	fp,sp,44
 201daa8:	e13ffd15 	stw	r4,-12(fp)
 201daac:	2805883a 	mov	r2,r5
 201dab0:	e1bfff15 	stw	r6,-4(fp)
 201dab4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201dab8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201dabc:	e0bfff17 	ldw	r2,-4(fp)
 201dac0:	1000021e 	bne	r2,zero,201dacc <OSSemDel+0x34>
        return (pevent);
 201dac4:	e0bffd17 	ldw	r2,-12(fp)
 201dac8:	00007e06 	br	201dcc4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201dacc:	e0bffd17 	ldw	r2,-12(fp)
 201dad0:	1000051e 	bne	r2,zero,201dae8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201dad4:	e0bfff17 	ldw	r2,-4(fp)
 201dad8:	00c00104 	movi	r3,4
 201dadc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201dae0:	e0bffd17 	ldw	r2,-12(fp)
 201dae4:	00007706 	br	201dcc4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201dae8:	e0bffd17 	ldw	r2,-12(fp)
 201daec:	10800003 	ldbu	r2,0(r2)
 201daf0:	10803fcc 	andi	r2,r2,255
 201daf4:	108000e0 	cmpeqi	r2,r2,3
 201daf8:	1000051e 	bne	r2,zero,201db10 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201dafc:	e0bfff17 	ldw	r2,-4(fp)
 201db00:	00c00044 	movi	r3,1
 201db04:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201db08:	e0bffd17 	ldw	r2,-12(fp)
 201db0c:	00006d06 	br	201dcc4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201db10:	d0a7b503 	ldbu	r2,-24876(gp)
 201db14:	10803fcc 	andi	r2,r2,255
 201db18:	10000526 	beq	r2,zero,201db30 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 201db1c:	e0bfff17 	ldw	r2,-4(fp)
 201db20:	00c003c4 	movi	r3,15
 201db24:	10c00005 	stb	r3,0(r2)
        return (pevent);
 201db28:	e0bffd17 	ldw	r2,-12(fp)
 201db2c:	00006506 	br	201dcc4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201db30:	0005303a 	rdctl	r2,status
 201db34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201db38:	e0fffc17 	ldw	r3,-16(fp)
 201db3c:	00bfff84 	movi	r2,-2
 201db40:	1884703a 	and	r2,r3,r2
 201db44:	1001703a 	wrctl	status,r2
  
  return context;
 201db48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201db4c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 201db50:	e0bffd17 	ldw	r2,-12(fp)
 201db54:	10800283 	ldbu	r2,10(r2)
 201db58:	10803fcc 	andi	r2,r2,255
 201db5c:	10000326 	beq	r2,zero,201db6c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201db60:	00800044 	movi	r2,1
 201db64:	e0bff505 	stb	r2,-44(fp)
 201db68:	00000106 	br	201db70 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201db6c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201db70:	e0bffe03 	ldbu	r2,-8(fp)
 201db74:	10000326 	beq	r2,zero,201db84 <OSSemDel+0xec>
 201db78:	10800060 	cmpeqi	r2,r2,1
 201db7c:	1000281e 	bne	r2,zero,201dc20 <OSSemDel+0x188>
 201db80:	00004506 	br	201dc98 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 201db84:	e0bff503 	ldbu	r2,-44(fp)
 201db88:	1000161e 	bne	r2,zero,201dbe4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201db8c:	e0bffd17 	ldw	r2,-12(fp)
 201db90:	00c00fc4 	movi	r3,63
 201db94:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201db98:	e0bffd17 	ldw	r2,-12(fp)
 201db9c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201dba0:	e0bffd17 	ldw	r2,-12(fp)
 201dba4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201dba8:	d0e7b417 	ldw	r3,-24880(gp)
 201dbac:	e0bffd17 	ldw	r2,-12(fp)
 201dbb0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201dbb4:	e0bffd17 	ldw	r2,-12(fp)
 201dbb8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201dbbc:	e0bffd17 	ldw	r2,-12(fp)
 201dbc0:	d0a7b415 	stw	r2,-24880(gp)
 201dbc4:	e0bff717 	ldw	r2,-36(fp)
 201dbc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dbcc:	e0bff817 	ldw	r2,-32(fp)
 201dbd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201dbd4:	e0bfff17 	ldw	r2,-4(fp)
 201dbd8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 201dbdc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 201dbe0:	00003706 	br	201dcc0 <OSSemDel+0x228>
 201dbe4:	e0bff717 	ldw	r2,-36(fp)
 201dbe8:	e0bff915 	stw	r2,-28(fp)
 201dbec:	e0bff917 	ldw	r2,-28(fp)
 201dbf0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201dbf4:	e0bfff17 	ldw	r2,-4(fp)
 201dbf8:	00c01244 	movi	r3,73
 201dbfc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 201dc00:	e0bffd17 	ldw	r2,-12(fp)
 201dc04:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 201dc08:	00002d06 	br	201dcc0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201dc0c:	000f883a 	mov	r7,zero
 201dc10:	01800044 	movi	r6,1
 201dc14:	000b883a 	mov	r5,zero
 201dc18:	e13ffd17 	ldw	r4,-12(fp)
 201dc1c:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 201dc20:	e0bffd17 	ldw	r2,-12(fp)
 201dc24:	10800283 	ldbu	r2,10(r2)
 201dc28:	10803fcc 	andi	r2,r2,255
 201dc2c:	103ff71e 	bne	r2,zero,201dc0c <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201dc30:	e0bffd17 	ldw	r2,-12(fp)
 201dc34:	00c00fc4 	movi	r3,63
 201dc38:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201dc3c:	e0bffd17 	ldw	r2,-12(fp)
 201dc40:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201dc44:	e0bffd17 	ldw	r2,-12(fp)
 201dc48:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201dc4c:	d0e7b417 	ldw	r3,-24880(gp)
 201dc50:	e0bffd17 	ldw	r2,-12(fp)
 201dc54:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201dc58:	e0bffd17 	ldw	r2,-12(fp)
 201dc5c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201dc60:	e0bffd17 	ldw	r2,-12(fp)
 201dc64:	d0a7b415 	stw	r2,-24880(gp)
 201dc68:	e0bff717 	ldw	r2,-36(fp)
 201dc6c:	e0bffa15 	stw	r2,-24(fp)
 201dc70:	e0bffa17 	ldw	r2,-24(fp)
 201dc74:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201dc78:	e0bff503 	ldbu	r2,-44(fp)
 201dc7c:	10800058 	cmpnei	r2,r2,1
 201dc80:	1000011e 	bne	r2,zero,201dc88 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201dc84:	20196780 	call	2019678 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201dc88:	e0bfff17 	ldw	r2,-4(fp)
 201dc8c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 201dc90:	e03ff615 	stw	zero,-40(fp)
             break;
 201dc94:	00000a06 	br	201dcc0 <OSSemDel+0x228>
 201dc98:	e0bff717 	ldw	r2,-36(fp)
 201dc9c:	e0bffb15 	stw	r2,-20(fp)
 201dca0:	e0bffb17 	ldw	r2,-20(fp)
 201dca4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201dca8:	e0bfff17 	ldw	r2,-4(fp)
 201dcac:	00c001c4 	movi	r3,7
 201dcb0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 201dcb4:	e0bffd17 	ldw	r2,-12(fp)
 201dcb8:	e0bff615 	stw	r2,-40(fp)
             break;
 201dcbc:	0001883a 	nop
    }
    return (pevent_return);
 201dcc0:	e0bff617 	ldw	r2,-40(fp)
}
 201dcc4:	e037883a 	mov	sp,fp
 201dcc8:	dfc00117 	ldw	ra,4(sp)
 201dccc:	df000017 	ldw	fp,0(sp)
 201dcd0:	dec00204 	addi	sp,sp,8
 201dcd4:	f800283a 	ret

0201dcd8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201dcd8:	defff504 	addi	sp,sp,-44
 201dcdc:	dfc00a15 	stw	ra,40(sp)
 201dce0:	df000915 	stw	fp,36(sp)
 201dce4:	df000904 	addi	fp,sp,36
 201dce8:	e13ffd15 	stw	r4,-12(fp)
 201dcec:	2805883a 	mov	r2,r5
 201dcf0:	e1bfff15 	stw	r6,-4(fp)
 201dcf4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201dcf8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201dcfc:	e0bfff17 	ldw	r2,-4(fp)
 201dd00:	10007226 	beq	r2,zero,201decc <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201dd04:	e0bffd17 	ldw	r2,-12(fp)
 201dd08:	1000041e 	bne	r2,zero,201dd1c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201dd0c:	e0bfff17 	ldw	r2,-4(fp)
 201dd10:	00c00104 	movi	r3,4
 201dd14:	10c00005 	stb	r3,0(r2)
        return;
 201dd18:	00006d06 	br	201ded0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201dd1c:	e0bffd17 	ldw	r2,-12(fp)
 201dd20:	10800003 	ldbu	r2,0(r2)
 201dd24:	10803fcc 	andi	r2,r2,255
 201dd28:	108000e0 	cmpeqi	r2,r2,3
 201dd2c:	1000041e 	bne	r2,zero,201dd40 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 201dd30:	e0bfff17 	ldw	r2,-4(fp)
 201dd34:	00c00044 	movi	r3,1
 201dd38:	10c00005 	stb	r3,0(r2)
        return;
 201dd3c:	00006406 	br	201ded0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201dd40:	d0a7b503 	ldbu	r2,-24876(gp)
 201dd44:	10803fcc 	andi	r2,r2,255
 201dd48:	10000426 	beq	r2,zero,201dd5c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201dd4c:	e0bfff17 	ldw	r2,-4(fp)
 201dd50:	00c00084 	movi	r3,2
 201dd54:	10c00005 	stb	r3,0(r2)
        return;
 201dd58:	00005d06 	br	201ded0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201dd5c:	d0a7a703 	ldbu	r2,-24932(gp)
 201dd60:	10803fcc 	andi	r2,r2,255
 201dd64:	10000426 	beq	r2,zero,201dd78 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201dd68:	e0bfff17 	ldw	r2,-4(fp)
 201dd6c:	00c00344 	movi	r3,13
 201dd70:	10c00005 	stb	r3,0(r2)
        return;
 201dd74:	00005606 	br	201ded0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201dd78:	0005303a 	rdctl	r2,status
 201dd7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201dd80:	e0fffc17 	ldw	r3,-16(fp)
 201dd84:	00bfff84 	movi	r2,-2
 201dd88:	1884703a 	and	r2,r3,r2
 201dd8c:	1001703a 	wrctl	status,r2
  
  return context;
 201dd90:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201dd94:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 201dd98:	e0bffd17 	ldw	r2,-12(fp)
 201dd9c:	1080020b 	ldhu	r2,8(r2)
 201dda0:	10bfffcc 	andi	r2,r2,65535
 201dda4:	10000d26 	beq	r2,zero,201dddc <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 201dda8:	e0bffd17 	ldw	r2,-12(fp)
 201ddac:	1080020b 	ldhu	r2,8(r2)
 201ddb0:	10bfffc4 	addi	r2,r2,-1
 201ddb4:	1007883a 	mov	r3,r2
 201ddb8:	e0bffd17 	ldw	r2,-12(fp)
 201ddbc:	10c0020d 	sth	r3,8(r2)
 201ddc0:	e0bff717 	ldw	r2,-36(fp)
 201ddc4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ddc8:	e0bff817 	ldw	r2,-32(fp)
 201ddcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201ddd0:	e0bfff17 	ldw	r2,-4(fp)
 201ddd4:	10000005 	stb	zero,0(r2)
        return;
 201ddd8:	00003d06 	br	201ded0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 201dddc:	d0a7b617 	ldw	r2,-24872(gp)
 201dde0:	d0e7b617 	ldw	r3,-24872(gp)
 201dde4:	18c00c03 	ldbu	r3,48(r3)
 201dde8:	18c00054 	ori	r3,r3,1
 201ddec:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201ddf0:	d0a7b617 	ldw	r2,-24872(gp)
 201ddf4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 201ddf8:	d0a7b617 	ldw	r2,-24872(gp)
 201ddfc:	e0fffe0b 	ldhu	r3,-8(fp)
 201de00:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201de04:	e13ffd17 	ldw	r4,-12(fp)
 201de08:	2018dc40 	call	2018dc4 <OS_EventTaskWait>
 201de0c:	e0bff717 	ldw	r2,-36(fp)
 201de10:	e0bffb15 	stw	r2,-20(fp)
 201de14:	e0bffb17 	ldw	r2,-20(fp)
 201de18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 201de1c:	20196780 	call	2019678 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201de20:	0005303a 	rdctl	r2,status
 201de24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201de28:	e0fff917 	ldw	r3,-28(fp)
 201de2c:	00bfff84 	movi	r2,-2
 201de30:	1884703a 	and	r2,r3,r2
 201de34:	1001703a 	wrctl	status,r2
  
  return context;
 201de38:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 201de3c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201de40:	d0a7b617 	ldw	r2,-24872(gp)
 201de44:	10800c43 	ldbu	r2,49(r2)
 201de48:	10803fcc 	andi	r2,r2,255
 201de4c:	10000326 	beq	r2,zero,201de5c <OSSemPend+0x184>
 201de50:	108000a0 	cmpeqi	r2,r2,2
 201de54:	1000041e 	bne	r2,zero,201de68 <OSSemPend+0x190>
 201de58:	00000706 	br	201de78 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 201de5c:	e0bfff17 	ldw	r2,-4(fp)
 201de60:	10000005 	stb	zero,0(r2)
             break;
 201de64:	00000c06 	br	201de98 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201de68:	e0bfff17 	ldw	r2,-4(fp)
 201de6c:	00c00384 	movi	r3,14
 201de70:	10c00005 	stb	r3,0(r2)
             break;
 201de74:	00000806 	br	201de98 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 201de78:	d0a7b617 	ldw	r2,-24872(gp)
 201de7c:	e17ffd17 	ldw	r5,-12(fp)
 201de80:	1009883a 	mov	r4,r2
 201de84:	20190240 	call	2019024 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201de88:	e0bfff17 	ldw	r2,-4(fp)
 201de8c:	00c00284 	movi	r3,10
 201de90:	10c00005 	stb	r3,0(r2)
             break;
 201de94:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201de98:	d0a7b617 	ldw	r2,-24872(gp)
 201de9c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201dea0:	d0a7b617 	ldw	r2,-24872(gp)
 201dea4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201dea8:	d0a7b617 	ldw	r2,-24872(gp)
 201deac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201deb0:	d0a7b617 	ldw	r2,-24872(gp)
 201deb4:	10000815 	stw	zero,32(r2)
 201deb8:	e0bff717 	ldw	r2,-36(fp)
 201debc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201dec0:	e0bffa17 	ldw	r2,-24(fp)
 201dec4:	1001703a 	wrctl	status,r2
 201dec8:	00000106 	br	201ded0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201decc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 201ded0:	e037883a 	mov	sp,fp
 201ded4:	dfc00117 	ldw	ra,4(sp)
 201ded8:	df000017 	ldw	fp,0(sp)
 201dedc:	dec00204 	addi	sp,sp,8
 201dee0:	f800283a 	ret

0201dee4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201dee4:	defff604 	addi	sp,sp,-40
 201dee8:	dfc00915 	stw	ra,36(sp)
 201deec:	df000815 	stw	fp,32(sp)
 201def0:	df000804 	addi	fp,sp,32
 201def4:	e13ffd15 	stw	r4,-12(fp)
 201def8:	2805883a 	mov	r2,r5
 201defc:	e1bfff15 	stw	r6,-4(fp)
 201df00:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201df04:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201df08:	e0bfff17 	ldw	r2,-4(fp)
 201df0c:	1000021e 	bne	r2,zero,201df18 <OSSemPendAbort+0x34>
        return (0);
 201df10:	0005883a 	mov	r2,zero
 201df14:	00004906 	br	201e03c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201df18:	e0bffd17 	ldw	r2,-12(fp)
 201df1c:	1000051e 	bne	r2,zero,201df34 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201df20:	e0bfff17 	ldw	r2,-4(fp)
 201df24:	00c00104 	movi	r3,4
 201df28:	10c00005 	stb	r3,0(r2)
        return (0);
 201df2c:	0005883a 	mov	r2,zero
 201df30:	00004206 	br	201e03c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201df34:	e0bffd17 	ldw	r2,-12(fp)
 201df38:	10800003 	ldbu	r2,0(r2)
 201df3c:	10803fcc 	andi	r2,r2,255
 201df40:	108000e0 	cmpeqi	r2,r2,3
 201df44:	1000051e 	bne	r2,zero,201df5c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 201df48:	e0bfff17 	ldw	r2,-4(fp)
 201df4c:	00c00044 	movi	r3,1
 201df50:	10c00005 	stb	r3,0(r2)
        return (0);
 201df54:	0005883a 	mov	r2,zero
 201df58:	00003806 	br	201e03c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201df5c:	0005303a 	rdctl	r2,status
 201df60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201df64:	e0fffc17 	ldw	r3,-16(fp)
 201df68:	00bfff84 	movi	r2,-2
 201df6c:	1884703a 	and	r2,r3,r2
 201df70:	1001703a 	wrctl	status,r2
  
  return context;
 201df74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201df78:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 201df7c:	e0bffd17 	ldw	r2,-12(fp)
 201df80:	10800283 	ldbu	r2,10(r2)
 201df84:	10803fcc 	andi	r2,r2,255
 201df88:	10002526 	beq	r2,zero,201e020 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 201df8c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201df90:	e0bffe03 	ldbu	r2,-8(fp)
 201df94:	10800060 	cmpeqi	r2,r2,1
 201df98:	10000e26 	beq	r2,zero,201dfd4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201df9c:	00000806 	br	201dfc0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201dfa0:	01c00084 	movi	r7,2
 201dfa4:	01800044 	movi	r6,1
 201dfa8:	000b883a 	mov	r5,zero
 201dfac:	e13ffd17 	ldw	r4,-12(fp)
 201dfb0:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                     nbr_tasks++;
 201dfb4:	e0bff803 	ldbu	r2,-32(fp)
 201dfb8:	10800044 	addi	r2,r2,1
 201dfbc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201dfc0:	e0bffd17 	ldw	r2,-12(fp)
 201dfc4:	10800283 	ldbu	r2,10(r2)
 201dfc8:	10803fcc 	andi	r2,r2,255
 201dfcc:	103ff41e 	bne	r2,zero,201dfa0 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201dfd0:	00000906 	br	201dff8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201dfd4:	01c00084 	movi	r7,2
 201dfd8:	01800044 	movi	r6,1
 201dfdc:	000b883a 	mov	r5,zero
 201dfe0:	e13ffd17 	ldw	r4,-12(fp)
 201dfe4:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
                 nbr_tasks++;
 201dfe8:	e0bff803 	ldbu	r2,-32(fp)
 201dfec:	10800044 	addi	r2,r2,1
 201dff0:	e0bff805 	stb	r2,-32(fp)
                 break;
 201dff4:	0001883a 	nop
 201dff8:	e0bff917 	ldw	r2,-28(fp)
 201dffc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e000:	e0bffa17 	ldw	r2,-24(fp)
 201e004:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201e008:	20196780 	call	2019678 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201e00c:	e0bfff17 	ldw	r2,-4(fp)
 201e010:	00c00384 	movi	r3,14
 201e014:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201e018:	e0bff803 	ldbu	r2,-32(fp)
 201e01c:	00000706 	br	201e03c <OSSemPendAbort+0x158>
 201e020:	e0bff917 	ldw	r2,-28(fp)
 201e024:	e0bffb15 	stw	r2,-20(fp)
 201e028:	e0bffb17 	ldw	r2,-20(fp)
 201e02c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201e030:	e0bfff17 	ldw	r2,-4(fp)
 201e034:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 201e038:	0005883a 	mov	r2,zero
}
 201e03c:	e037883a 	mov	sp,fp
 201e040:	dfc00117 	ldw	ra,4(sp)
 201e044:	df000017 	ldw	fp,0(sp)
 201e048:	dec00204 	addi	sp,sp,8
 201e04c:	f800283a 	ret

0201e050 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 201e050:	defff804 	addi	sp,sp,-32
 201e054:	dfc00715 	stw	ra,28(sp)
 201e058:	df000615 	stw	fp,24(sp)
 201e05c:	df000604 	addi	fp,sp,24
 201e060:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201e064:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201e068:	e0bfff17 	ldw	r2,-4(fp)
 201e06c:	1000021e 	bne	r2,zero,201e078 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 201e070:	00800104 	movi	r2,4
 201e074:	00003506 	br	201e14c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201e078:	e0bfff17 	ldw	r2,-4(fp)
 201e07c:	10800003 	ldbu	r2,0(r2)
 201e080:	10803fcc 	andi	r2,r2,255
 201e084:	108000e0 	cmpeqi	r2,r2,3
 201e088:	1000021e 	bne	r2,zero,201e094 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 201e08c:	00800044 	movi	r2,1
 201e090:	00002e06 	br	201e14c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e094:	0005303a 	rdctl	r2,status
 201e098:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e09c:	e0fffe17 	ldw	r3,-8(fp)
 201e0a0:	00bfff84 	movi	r2,-2
 201e0a4:	1884703a 	and	r2,r3,r2
 201e0a8:	1001703a 	wrctl	status,r2
  
  return context;
 201e0ac:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201e0b0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 201e0b4:	e0bfff17 	ldw	r2,-4(fp)
 201e0b8:	10800283 	ldbu	r2,10(r2)
 201e0bc:	10803fcc 	andi	r2,r2,255
 201e0c0:	10000c26 	beq	r2,zero,201e0f4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201e0c4:	000f883a 	mov	r7,zero
 201e0c8:	01800044 	movi	r6,1
 201e0cc:	000b883a 	mov	r5,zero
 201e0d0:	e13fff17 	ldw	r4,-4(fp)
 201e0d4:	2018c2c0 	call	2018c2c <OS_EventTaskRdy>
 201e0d8:	e0bffa17 	ldw	r2,-24(fp)
 201e0dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e0e0:	e0bffb17 	ldw	r2,-20(fp)
 201e0e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201e0e8:	20196780 	call	2019678 <OS_Sched>
        return (OS_ERR_NONE);
 201e0ec:	0005883a 	mov	r2,zero
 201e0f0:	00001606 	br	201e14c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 201e0f4:	e0bfff17 	ldw	r2,-4(fp)
 201e0f8:	1080020b 	ldhu	r2,8(r2)
 201e0fc:	10ffffcc 	andi	r3,r2,65535
 201e100:	00bfffd4 	movui	r2,65535
 201e104:	18800c26 	beq	r3,r2,201e138 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201e108:	e0bfff17 	ldw	r2,-4(fp)
 201e10c:	1080020b 	ldhu	r2,8(r2)
 201e110:	10800044 	addi	r2,r2,1
 201e114:	1007883a 	mov	r3,r2
 201e118:	e0bfff17 	ldw	r2,-4(fp)
 201e11c:	10c0020d 	sth	r3,8(r2)
 201e120:	e0bffa17 	ldw	r2,-24(fp)
 201e124:	e0bffc15 	stw	r2,-16(fp)
 201e128:	e0bffc17 	ldw	r2,-16(fp)
 201e12c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201e130:	0005883a 	mov	r2,zero
 201e134:	00000506 	br	201e14c <OSSemPost+0xfc>
 201e138:	e0bffa17 	ldw	r2,-24(fp)
 201e13c:	e0bffd15 	stw	r2,-12(fp)
 201e140:	e0bffd17 	ldw	r2,-12(fp)
 201e144:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 201e148:	00800c84 	movi	r2,50
}
 201e14c:	e037883a 	mov	sp,fp
 201e150:	dfc00117 	ldw	ra,4(sp)
 201e154:	df000017 	ldw	fp,0(sp)
 201e158:	dec00204 	addi	sp,sp,8
 201e15c:	f800283a 	ret

0201e160 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 201e160:	defff704 	addi	sp,sp,-36
 201e164:	df000815 	stw	fp,32(sp)
 201e168:	df000804 	addi	fp,sp,32
 201e16c:	e13ffe15 	stw	r4,-8(fp)
 201e170:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201e174:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201e178:	e0bffe17 	ldw	r2,-8(fp)
 201e17c:	1000021e 	bne	r2,zero,201e188 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201e180:	00800104 	movi	r2,4
 201e184:	00003606 	br	201e260 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201e188:	e0bfff17 	ldw	r2,-4(fp)
 201e18c:	1000021e 	bne	r2,zero,201e198 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201e190:	00800244 	movi	r2,9
 201e194:	00003206 	br	201e260 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201e198:	e0bffe17 	ldw	r2,-8(fp)
 201e19c:	10800003 	ldbu	r2,0(r2)
 201e1a0:	10803fcc 	andi	r2,r2,255
 201e1a4:	108000e0 	cmpeqi	r2,r2,3
 201e1a8:	1000021e 	bne	r2,zero,201e1b4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201e1ac:	00800044 	movi	r2,1
 201e1b0:	00002b06 	br	201e260 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e1b4:	0005303a 	rdctl	r2,status
 201e1b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e1bc:	e0fffd17 	ldw	r3,-12(fp)
 201e1c0:	00bfff84 	movi	r2,-2
 201e1c4:	1884703a 	and	r2,r3,r2
 201e1c8:	1001703a 	wrctl	status,r2
  
  return context;
 201e1cc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201e1d0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 201e1d4:	e0bffe17 	ldw	r2,-8(fp)
 201e1d8:	10c00283 	ldbu	r3,10(r2)
 201e1dc:	e0bfff17 	ldw	r2,-4(fp)
 201e1e0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 201e1e4:	e0bffe17 	ldw	r2,-8(fp)
 201e1e8:	108002c4 	addi	r2,r2,11
 201e1ec:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 201e1f0:	e0bfff17 	ldw	r2,-4(fp)
 201e1f4:	10800084 	addi	r2,r2,2
 201e1f8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201e1fc:	e03ffa05 	stb	zero,-24(fp)
 201e200:	00000b06 	br	201e230 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 201e204:	e0bff917 	ldw	r2,-28(fp)
 201e208:	10c00044 	addi	r3,r2,1
 201e20c:	e0fff915 	stw	r3,-28(fp)
 201e210:	e0fff817 	ldw	r3,-32(fp)
 201e214:	19000044 	addi	r4,r3,1
 201e218:	e13ff815 	stw	r4,-32(fp)
 201e21c:	18c00003 	ldbu	r3,0(r3)
 201e220:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201e224:	e0bffa03 	ldbu	r2,-24(fp)
 201e228:	10800044 	addi	r2,r2,1
 201e22c:	e0bffa05 	stb	r2,-24(fp)
 201e230:	e0bffa03 	ldbu	r2,-24(fp)
 201e234:	108000f0 	cmpltui	r2,r2,3
 201e238:	103ff21e 	bne	r2,zero,201e204 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201e23c:	e0bffe17 	ldw	r2,-8(fp)
 201e240:	10c0020b 	ldhu	r3,8(r2)
 201e244:	e0bfff17 	ldw	r2,-4(fp)
 201e248:	10c0000d 	sth	r3,0(r2)
 201e24c:	e0bffb17 	ldw	r2,-20(fp)
 201e250:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e254:	e0bffc17 	ldw	r2,-16(fp)
 201e258:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201e25c:	0005883a 	mov	r2,zero
}
 201e260:	e037883a 	mov	sp,fp
 201e264:	df000017 	ldw	fp,0(sp)
 201e268:	dec00104 	addi	sp,sp,4
 201e26c:	f800283a 	ret

0201e270 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 201e270:	defff904 	addi	sp,sp,-28
 201e274:	df000615 	stw	fp,24(sp)
 201e278:	df000604 	addi	fp,sp,24
 201e27c:	e13ffd15 	stw	r4,-12(fp)
 201e280:	2805883a 	mov	r2,r5
 201e284:	e1bfff15 	stw	r6,-4(fp)
 201e288:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201e28c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201e290:	e0bfff17 	ldw	r2,-4(fp)
 201e294:	10003126 	beq	r2,zero,201e35c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201e298:	e0bffd17 	ldw	r2,-12(fp)
 201e29c:	1000041e 	bne	r2,zero,201e2b0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 201e2a0:	e0bfff17 	ldw	r2,-4(fp)
 201e2a4:	00c00104 	movi	r3,4
 201e2a8:	10c00005 	stb	r3,0(r2)
        return;
 201e2ac:	00002c06 	br	201e360 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201e2b0:	e0bffd17 	ldw	r2,-12(fp)
 201e2b4:	10800003 	ldbu	r2,0(r2)
 201e2b8:	10803fcc 	andi	r2,r2,255
 201e2bc:	108000e0 	cmpeqi	r2,r2,3
 201e2c0:	1000041e 	bne	r2,zero,201e2d4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 201e2c4:	e0bfff17 	ldw	r2,-4(fp)
 201e2c8:	00c00044 	movi	r3,1
 201e2cc:	10c00005 	stb	r3,0(r2)
        return;
 201e2d0:	00002306 	br	201e360 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e2d4:	0005303a 	rdctl	r2,status
 201e2d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e2dc:	e0fffc17 	ldw	r3,-16(fp)
 201e2e0:	00bfff84 	movi	r2,-2
 201e2e4:	1884703a 	and	r2,r3,r2
 201e2e8:	1001703a 	wrctl	status,r2
  
  return context;
 201e2ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201e2f0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 201e2f4:	e0bfff17 	ldw	r2,-4(fp)
 201e2f8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 201e2fc:	e0bffd17 	ldw	r2,-12(fp)
 201e300:	1080020b 	ldhu	r2,8(r2)
 201e304:	10bfffcc 	andi	r2,r2,65535
 201e308:	10000426 	beq	r2,zero,201e31c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 201e30c:	e0bffd17 	ldw	r2,-12(fp)
 201e310:	e0fffe0b 	ldhu	r3,-8(fp)
 201e314:	10c0020d 	sth	r3,8(r2)
 201e318:	00000b06 	br	201e348 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201e31c:	e0bffd17 	ldw	r2,-12(fp)
 201e320:	10800283 	ldbu	r2,10(r2)
 201e324:	10803fcc 	andi	r2,r2,255
 201e328:	1000041e 	bne	r2,zero,201e33c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201e32c:	e0bffd17 	ldw	r2,-12(fp)
 201e330:	e0fffe0b 	ldhu	r3,-8(fp)
 201e334:	10c0020d 	sth	r3,8(r2)
 201e338:	00000306 	br	201e348 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201e33c:	e0bfff17 	ldw	r2,-4(fp)
 201e340:	00c01244 	movi	r3,73
 201e344:	10c00005 	stb	r3,0(r2)
 201e348:	e0bffa17 	ldw	r2,-24(fp)
 201e34c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e350:	e0bffb17 	ldw	r2,-20(fp)
 201e354:	1001703a 	wrctl	status,r2
 201e358:	00000106 	br	201e360 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201e35c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 201e360:	e037883a 	mov	sp,fp
 201e364:	df000017 	ldw	fp,0(sp)
 201e368:	dec00104 	addi	sp,sp,4
 201e36c:	f800283a 	ret

0201e370 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 201e370:	defff104 	addi	sp,sp,-60
 201e374:	dfc00e15 	stw	ra,56(sp)
 201e378:	df000d15 	stw	fp,52(sp)
 201e37c:	df000d04 	addi	fp,sp,52
 201e380:	2007883a 	mov	r3,r4
 201e384:	2805883a 	mov	r2,r5
 201e388:	e0fffe05 	stb	r3,-8(fp)
 201e38c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201e390:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201e394:	e0bffe03 	ldbu	r2,-8(fp)
 201e398:	10800530 	cmpltui	r2,r2,20
 201e39c:	1000051e 	bne	r2,zero,201e3b4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 201e3a0:	e0bffe03 	ldbu	r2,-8(fp)
 201e3a4:	10803fe0 	cmpeqi	r2,r2,255
 201e3a8:	1000021e 	bne	r2,zero,201e3b4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 201e3ac:	00800a84 	movi	r2,42
 201e3b0:	00012606 	br	201e84c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201e3b4:	e0bfff03 	ldbu	r2,-4(fp)
 201e3b8:	10800530 	cmpltui	r2,r2,20
 201e3bc:	1000021e 	bne	r2,zero,201e3c8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 201e3c0:	00800a84 	movi	r2,42
 201e3c4:	00012106 	br	201e84c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e3c8:	0005303a 	rdctl	r2,status
 201e3cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e3d0:	e0fffd17 	ldw	r3,-12(fp)
 201e3d4:	00bfff84 	movi	r2,-2
 201e3d8:	1884703a 	and	r2,r3,r2
 201e3dc:	1001703a 	wrctl	status,r2
  
  return context;
 201e3e0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201e3e4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201e3e8:	e0ffff03 	ldbu	r3,-4(fp)
 201e3ec:	008080f4 	movhi	r2,515
 201e3f0:	10883704 	addi	r2,r2,8412
 201e3f4:	18c7883a 	add	r3,r3,r3
 201e3f8:	18c7883a 	add	r3,r3,r3
 201e3fc:	10c5883a 	add	r2,r2,r3
 201e400:	10800017 	ldw	r2,0(r2)
 201e404:	10000626 	beq	r2,zero,201e420 <OSTaskChangePrio+0xb0>
 201e408:	e0bff517 	ldw	r2,-44(fp)
 201e40c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e410:	e0bff617 	ldw	r2,-40(fp)
 201e414:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201e418:	00800a04 	movi	r2,40
 201e41c:	00010b06 	br	201e84c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 201e420:	e0bffe03 	ldbu	r2,-8(fp)
 201e424:	10803fd8 	cmpnei	r2,r2,255
 201e428:	1000031e 	bne	r2,zero,201e438 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201e42c:	d0a7b617 	ldw	r2,-24872(gp)
 201e430:	10800c83 	ldbu	r2,50(r2)
 201e434:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201e438:	e0fffe03 	ldbu	r3,-8(fp)
 201e43c:	008080f4 	movhi	r2,515
 201e440:	10883704 	addi	r2,r2,8412
 201e444:	18c7883a 	add	r3,r3,r3
 201e448:	18c7883a 	add	r3,r3,r3
 201e44c:	10c5883a 	add	r2,r2,r3
 201e450:	10800017 	ldw	r2,0(r2)
 201e454:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201e458:	e0bff817 	ldw	r2,-32(fp)
 201e45c:	1000061e 	bne	r2,zero,201e478 <OSTaskChangePrio+0x108>
 201e460:	e0bff517 	ldw	r2,-44(fp)
 201e464:	e0bff715 	stw	r2,-36(fp)
 201e468:	e0bff717 	ldw	r2,-36(fp)
 201e46c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 201e470:	00800a44 	movi	r2,41
 201e474:	0000f506 	br	201e84c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 201e478:	e0bff817 	ldw	r2,-32(fp)
 201e47c:	10800058 	cmpnei	r2,r2,1
 201e480:	1000061e 	bne	r2,zero,201e49c <OSTaskChangePrio+0x12c>
 201e484:	e0bff517 	ldw	r2,-44(fp)
 201e488:	e0bff915 	stw	r2,-28(fp)
 201e48c:	e0bff917 	ldw	r2,-28(fp)
 201e490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 201e494:	008010c4 	movi	r2,67
 201e498:	0000ec06 	br	201e84c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201e49c:	e0bfff03 	ldbu	r2,-4(fp)
 201e4a0:	1004d0fa 	srli	r2,r2,3
 201e4a4:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201e4a8:	e0bfff03 	ldbu	r2,-4(fp)
 201e4ac:	108001cc 	andi	r2,r2,7
 201e4b0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 201e4b4:	e0bffb03 	ldbu	r2,-20(fp)
 201e4b8:	00c00044 	movi	r3,1
 201e4bc:	1884983a 	sll	r2,r3,r2
 201e4c0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 201e4c4:	e0bffb43 	ldbu	r2,-19(fp)
 201e4c8:	00c00044 	movi	r3,1
 201e4cc:	1884983a 	sll	r2,r3,r2
 201e4d0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 201e4d4:	e0fffe03 	ldbu	r3,-8(fp)
 201e4d8:	008080f4 	movhi	r2,515
 201e4dc:	10883704 	addi	r2,r2,8412
 201e4e0:	18c7883a 	add	r3,r3,r3
 201e4e4:	18c7883a 	add	r3,r3,r3
 201e4e8:	10c5883a 	add	r2,r2,r3
 201e4ec:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 201e4f0:	e0ffff03 	ldbu	r3,-4(fp)
 201e4f4:	008080f4 	movhi	r2,515
 201e4f8:	10883704 	addi	r2,r2,8412
 201e4fc:	18c7883a 	add	r3,r3,r3
 201e500:	18c7883a 	add	r3,r3,r3
 201e504:	10c5883a 	add	r2,r2,r3
 201e508:	e0fff817 	ldw	r3,-32(fp)
 201e50c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 201e510:	e0bff817 	ldw	r2,-32(fp)
 201e514:	10800d03 	ldbu	r2,52(r2)
 201e518:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201e51c:	e0bff817 	ldw	r2,-32(fp)
 201e520:	10800d83 	ldbu	r2,54(r2)
 201e524:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201e528:	e0bff817 	ldw	r2,-32(fp)
 201e52c:	10800d43 	ldbu	r2,53(r2)
 201e530:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 201e534:	e0fffc03 	ldbu	r3,-16(fp)
 201e538:	d0a7b344 	addi	r2,gp,-24883
 201e53c:	1885883a 	add	r2,r3,r2
 201e540:	10c00003 	ldbu	r3,0(r2)
 201e544:	e0bffc83 	ldbu	r2,-14(fp)
 201e548:	1884703a 	and	r2,r3,r2
 201e54c:	10803fcc 	andi	r2,r2,255
 201e550:	10002826 	beq	r2,zero,201e5f4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 201e554:	e0fffc03 	ldbu	r3,-16(fp)
 201e558:	e13ffc03 	ldbu	r4,-16(fp)
 201e55c:	d0a7b344 	addi	r2,gp,-24883
 201e560:	2085883a 	add	r2,r4,r2
 201e564:	10800003 	ldbu	r2,0(r2)
 201e568:	1009883a 	mov	r4,r2
 201e56c:	e0bffc83 	ldbu	r2,-14(fp)
 201e570:	0084303a 	nor	r2,zero,r2
 201e574:	2084703a 	and	r2,r4,r2
 201e578:	1009883a 	mov	r4,r2
 201e57c:	d0a7b344 	addi	r2,gp,-24883
 201e580:	1885883a 	add	r2,r3,r2
 201e584:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201e588:	e0fffc03 	ldbu	r3,-16(fp)
 201e58c:	d0a7b344 	addi	r2,gp,-24883
 201e590:	1885883a 	add	r2,r3,r2
 201e594:	10800003 	ldbu	r2,0(r2)
 201e598:	10803fcc 	andi	r2,r2,255
 201e59c:	1000061e 	bne	r2,zero,201e5b8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 201e5a0:	e0bffc43 	ldbu	r2,-15(fp)
 201e5a4:	0084303a 	nor	r2,zero,r2
 201e5a8:	1007883a 	mov	r3,r2
 201e5ac:	d0a7b303 	ldbu	r2,-24884(gp)
 201e5b0:	1884703a 	and	r2,r3,r2
 201e5b4:	d0a7b305 	stb	r2,-24884(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201e5b8:	d0e7b303 	ldbu	r3,-24884(gp)
 201e5bc:	e0bffb83 	ldbu	r2,-18(fp)
 201e5c0:	1884b03a 	or	r2,r3,r2
 201e5c4:	d0a7b305 	stb	r2,-24884(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201e5c8:	e0fffb03 	ldbu	r3,-20(fp)
 201e5cc:	e13ffb03 	ldbu	r4,-20(fp)
 201e5d0:	d0a7b344 	addi	r2,gp,-24883
 201e5d4:	2085883a 	add	r2,r4,r2
 201e5d8:	11000003 	ldbu	r4,0(r2)
 201e5dc:	e0bffbc3 	ldbu	r2,-17(fp)
 201e5e0:	2084b03a 	or	r2,r4,r2
 201e5e4:	1009883a 	mov	r4,r2
 201e5e8:	d0a7b344 	addi	r2,gp,-24883
 201e5ec:	1885883a 	add	r2,r3,r2
 201e5f0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 201e5f4:	e0bff817 	ldw	r2,-32(fp)
 201e5f8:	10800717 	ldw	r2,28(r2)
 201e5fc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 201e600:	e0bff317 	ldw	r2,-52(fp)
 201e604:	10003326 	beq	r2,zero,201e6d4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201e608:	e0bffc03 	ldbu	r2,-16(fp)
 201e60c:	e0fffc03 	ldbu	r3,-16(fp)
 201e610:	e13ff317 	ldw	r4,-52(fp)
 201e614:	20c7883a 	add	r3,r4,r3
 201e618:	18c002c4 	addi	r3,r3,11
 201e61c:	18c00003 	ldbu	r3,0(r3)
 201e620:	1809883a 	mov	r4,r3
 201e624:	e0fffc83 	ldbu	r3,-14(fp)
 201e628:	00c6303a 	nor	r3,zero,r3
 201e62c:	20c6703a 	and	r3,r4,r3
 201e630:	1809883a 	mov	r4,r3
 201e634:	e0fff317 	ldw	r3,-52(fp)
 201e638:	1885883a 	add	r2,r3,r2
 201e63c:	108002c4 	addi	r2,r2,11
 201e640:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 201e644:	e0bffc03 	ldbu	r2,-16(fp)
 201e648:	e0fff317 	ldw	r3,-52(fp)
 201e64c:	1885883a 	add	r2,r3,r2
 201e650:	108002c4 	addi	r2,r2,11
 201e654:	10800003 	ldbu	r2,0(r2)
 201e658:	10803fcc 	andi	r2,r2,255
 201e65c:	1000091e 	bne	r2,zero,201e684 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 201e660:	e0bff317 	ldw	r2,-52(fp)
 201e664:	10800283 	ldbu	r2,10(r2)
 201e668:	1007883a 	mov	r3,r2
 201e66c:	e0bffc43 	ldbu	r2,-15(fp)
 201e670:	0084303a 	nor	r2,zero,r2
 201e674:	1884703a 	and	r2,r3,r2
 201e678:	1007883a 	mov	r3,r2
 201e67c:	e0bff317 	ldw	r2,-52(fp)
 201e680:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 201e684:	e0bff317 	ldw	r2,-52(fp)
 201e688:	10c00283 	ldbu	r3,10(r2)
 201e68c:	e0bffb83 	ldbu	r2,-18(fp)
 201e690:	1884b03a 	or	r2,r3,r2
 201e694:	1007883a 	mov	r3,r2
 201e698:	e0bff317 	ldw	r2,-52(fp)
 201e69c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 201e6a0:	e0bffb03 	ldbu	r2,-20(fp)
 201e6a4:	e0fffb03 	ldbu	r3,-20(fp)
 201e6a8:	e13ff317 	ldw	r4,-52(fp)
 201e6ac:	20c7883a 	add	r3,r4,r3
 201e6b0:	18c002c4 	addi	r3,r3,11
 201e6b4:	19000003 	ldbu	r4,0(r3)
 201e6b8:	e0fffbc3 	ldbu	r3,-17(fp)
 201e6bc:	20c6b03a 	or	r3,r4,r3
 201e6c0:	1809883a 	mov	r4,r3
 201e6c4:	e0fff317 	ldw	r3,-52(fp)
 201e6c8:	1885883a 	add	r2,r3,r2
 201e6cc:	108002c4 	addi	r2,r2,11
 201e6d0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 201e6d4:	e0bff817 	ldw	r2,-32(fp)
 201e6d8:	10800817 	ldw	r2,32(r2)
 201e6dc:	10004226 	beq	r2,zero,201e7e8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 201e6e0:	e0bff817 	ldw	r2,-32(fp)
 201e6e4:	10800817 	ldw	r2,32(r2)
 201e6e8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 201e6ec:	e0bff417 	ldw	r2,-48(fp)
 201e6f0:	10800017 	ldw	r2,0(r2)
 201e6f4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201e6f8:	00003906 	br	201e7e0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 201e6fc:	e0bffc03 	ldbu	r2,-16(fp)
 201e700:	e0fffc03 	ldbu	r3,-16(fp)
 201e704:	e13ff317 	ldw	r4,-52(fp)
 201e708:	20c7883a 	add	r3,r4,r3
 201e70c:	18c002c4 	addi	r3,r3,11
 201e710:	18c00003 	ldbu	r3,0(r3)
 201e714:	1809883a 	mov	r4,r3
 201e718:	e0fffc83 	ldbu	r3,-14(fp)
 201e71c:	00c6303a 	nor	r3,zero,r3
 201e720:	20c6703a 	and	r3,r4,r3
 201e724:	1809883a 	mov	r4,r3
 201e728:	e0fff317 	ldw	r3,-52(fp)
 201e72c:	1885883a 	add	r2,r3,r2
 201e730:	108002c4 	addi	r2,r2,11
 201e734:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201e738:	e0bffc03 	ldbu	r2,-16(fp)
 201e73c:	e0fff317 	ldw	r3,-52(fp)
 201e740:	1885883a 	add	r2,r3,r2
 201e744:	108002c4 	addi	r2,r2,11
 201e748:	10800003 	ldbu	r2,0(r2)
 201e74c:	10803fcc 	andi	r2,r2,255
 201e750:	1000091e 	bne	r2,zero,201e778 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 201e754:	e0bff317 	ldw	r2,-52(fp)
 201e758:	10800283 	ldbu	r2,10(r2)
 201e75c:	1007883a 	mov	r3,r2
 201e760:	e0bffc43 	ldbu	r2,-15(fp)
 201e764:	0084303a 	nor	r2,zero,r2
 201e768:	1884703a 	and	r2,r3,r2
 201e76c:	1007883a 	mov	r3,r2
 201e770:	e0bff317 	ldw	r2,-52(fp)
 201e774:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 201e778:	e0bff317 	ldw	r2,-52(fp)
 201e77c:	10c00283 	ldbu	r3,10(r2)
 201e780:	e0bffb83 	ldbu	r2,-18(fp)
 201e784:	1884b03a 	or	r2,r3,r2
 201e788:	1007883a 	mov	r3,r2
 201e78c:	e0bff317 	ldw	r2,-52(fp)
 201e790:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 201e794:	e0bffb03 	ldbu	r2,-20(fp)
 201e798:	e0fffb03 	ldbu	r3,-20(fp)
 201e79c:	e13ff317 	ldw	r4,-52(fp)
 201e7a0:	20c7883a 	add	r3,r4,r3
 201e7a4:	18c002c4 	addi	r3,r3,11
 201e7a8:	19000003 	ldbu	r4,0(r3)
 201e7ac:	e0fffbc3 	ldbu	r3,-17(fp)
 201e7b0:	20c6b03a 	or	r3,r4,r3
 201e7b4:	1809883a 	mov	r4,r3
 201e7b8:	e0fff317 	ldw	r3,-52(fp)
 201e7bc:	1885883a 	add	r2,r3,r2
 201e7c0:	108002c4 	addi	r2,r2,11
 201e7c4:	11000005 	stb	r4,0(r2)
            pevents++;
 201e7c8:	e0bff417 	ldw	r2,-48(fp)
 201e7cc:	10800104 	addi	r2,r2,4
 201e7d0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 201e7d4:	e0bff417 	ldw	r2,-48(fp)
 201e7d8:	10800017 	ldw	r2,0(r2)
 201e7dc:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 201e7e0:	e0bff317 	ldw	r2,-52(fp)
 201e7e4:	103fc51e 	bne	r2,zero,201e6fc <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201e7e8:	e0bff817 	ldw	r2,-32(fp)
 201e7ec:	e0ffff03 	ldbu	r3,-4(fp)
 201e7f0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 201e7f4:	e0bff817 	ldw	r2,-32(fp)
 201e7f8:	e0fffb03 	ldbu	r3,-20(fp)
 201e7fc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 201e800:	e0bff817 	ldw	r2,-32(fp)
 201e804:	e0fffb43 	ldbu	r3,-19(fp)
 201e808:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 201e80c:	e0bff817 	ldw	r2,-32(fp)
 201e810:	e0fffb83 	ldbu	r3,-18(fp)
 201e814:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201e818:	e0bff817 	ldw	r2,-32(fp)
 201e81c:	e0fffbc3 	ldbu	r3,-17(fp)
 201e820:	10c00d45 	stb	r3,53(r2)
 201e824:	e0bff517 	ldw	r2,-44(fp)
 201e828:	e0bffa15 	stw	r2,-24(fp)
 201e82c:	e0bffa17 	ldw	r2,-24(fp)
 201e830:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201e834:	d0a7a743 	ldbu	r2,-24931(gp)
 201e838:	10803fcc 	andi	r2,r2,255
 201e83c:	10800058 	cmpnei	r2,r2,1
 201e840:	1000011e 	bne	r2,zero,201e848 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 201e844:	20196780 	call	2019678 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201e848:	0005883a 	mov	r2,zero
}
 201e84c:	e037883a 	mov	sp,fp
 201e850:	dfc00117 	ldw	ra,4(sp)
 201e854:	df000017 	ldw	fp,0(sp)
 201e858:	dec00204 	addi	sp,sp,8
 201e85c:	f800283a 	ret

0201e860 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 201e860:	deffee04 	addi	sp,sp,-72
 201e864:	dfc01115 	stw	ra,68(sp)
 201e868:	df001015 	stw	fp,64(sp)
 201e86c:	df001004 	addi	fp,sp,64
 201e870:	e13ffc15 	stw	r4,-16(fp)
 201e874:	e17ffd15 	stw	r5,-12(fp)
 201e878:	e1bffe15 	stw	r6,-8(fp)
 201e87c:	3805883a 	mov	r2,r7
 201e880:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201e884:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201e888:	e0bfff03 	ldbu	r2,-4(fp)
 201e88c:	10800570 	cmpltui	r2,r2,21
 201e890:	1000021e 	bne	r2,zero,201e89c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201e894:	00800a84 	movi	r2,42
 201e898:	00005706 	br	201e9f8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e89c:	0005303a 	rdctl	r2,status
 201e8a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e8a4:	e0fffb17 	ldw	r3,-20(fp)
 201e8a8:	00bfff84 	movi	r2,-2
 201e8ac:	1884703a 	and	r2,r3,r2
 201e8b0:	1001703a 	wrctl	status,r2
  
  return context;
 201e8b4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201e8b8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201e8bc:	d0a7b503 	ldbu	r2,-24876(gp)
 201e8c0:	10803fcc 	andi	r2,r2,255
 201e8c4:	10000626 	beq	r2,zero,201e8e0 <OSTaskCreate+0x80>
 201e8c8:	e0bff317 	ldw	r2,-52(fp)
 201e8cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e8d0:	e0bff417 	ldw	r2,-48(fp)
 201e8d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201e8d8:	00800f04 	movi	r2,60
 201e8dc:	00004606 	br	201e9f8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201e8e0:	e0ffff03 	ldbu	r3,-4(fp)
 201e8e4:	008080f4 	movhi	r2,515
 201e8e8:	10883704 	addi	r2,r2,8412
 201e8ec:	18c7883a 	add	r3,r3,r3
 201e8f0:	18c7883a 	add	r3,r3,r3
 201e8f4:	10c5883a 	add	r2,r2,r3
 201e8f8:	10800017 	ldw	r2,0(r2)
 201e8fc:	1000391e 	bne	r2,zero,201e9e4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201e900:	e0ffff03 	ldbu	r3,-4(fp)
 201e904:	008080f4 	movhi	r2,515
 201e908:	10883704 	addi	r2,r2,8412
 201e90c:	18c7883a 	add	r3,r3,r3
 201e910:	18c7883a 	add	r3,r3,r3
 201e914:	10c5883a 	add	r2,r2,r3
 201e918:	00c00044 	movi	r3,1
 201e91c:	10c00015 	stw	r3,0(r2)
 201e920:	e0bff317 	ldw	r2,-52(fp)
 201e924:	e0bff515 	stw	r2,-44(fp)
 201e928:	e0bff517 	ldw	r2,-44(fp)
 201e92c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 201e930:	000f883a 	mov	r7,zero
 201e934:	e1bffe17 	ldw	r6,-8(fp)
 201e938:	e17ffd17 	ldw	r5,-12(fp)
 201e93c:	e13ffc17 	ldw	r4,-16(fp)
 201e940:	2021de40 	call	2021de4 <OSTaskStkInit>
 201e944:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 201e948:	e0bfff03 	ldbu	r2,-4(fp)
 201e94c:	d8000215 	stw	zero,8(sp)
 201e950:	d8000115 	stw	zero,4(sp)
 201e954:	d8000015 	stw	zero,0(sp)
 201e958:	000f883a 	mov	r7,zero
 201e95c:	000d883a 	mov	r6,zero
 201e960:	e17ff717 	ldw	r5,-36(fp)
 201e964:	1009883a 	mov	r4,r2
 201e968:	2019a780 	call	2019a78 <OS_TCBInit>
 201e96c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 201e970:	e0bff803 	ldbu	r2,-32(fp)
 201e974:	1000061e 	bne	r2,zero,201e990 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 201e978:	d0a7a743 	ldbu	r2,-24931(gp)
 201e97c:	10803fcc 	andi	r2,r2,255
 201e980:	10800058 	cmpnei	r2,r2,1
 201e984:	1000151e 	bne	r2,zero,201e9dc <OSTaskCreate+0x17c>
                OS_Sched();
 201e988:	20196780 	call	2019678 <OS_Sched>
 201e98c:	00001306 	br	201e9dc <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e990:	0005303a 	rdctl	r2,status
 201e994:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e998:	e0fffa17 	ldw	r3,-24(fp)
 201e99c:	00bfff84 	movi	r2,-2
 201e9a0:	1884703a 	and	r2,r3,r2
 201e9a4:	1001703a 	wrctl	status,r2
  
  return context;
 201e9a8:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201e9ac:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 201e9b0:	e0ffff03 	ldbu	r3,-4(fp)
 201e9b4:	008080f4 	movhi	r2,515
 201e9b8:	10883704 	addi	r2,r2,8412
 201e9bc:	18c7883a 	add	r3,r3,r3
 201e9c0:	18c7883a 	add	r3,r3,r3
 201e9c4:	10c5883a 	add	r2,r2,r3
 201e9c8:	10000015 	stw	zero,0(r2)
 201e9cc:	e0bff317 	ldw	r2,-52(fp)
 201e9d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e9d4:	e0bff617 	ldw	r2,-40(fp)
 201e9d8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201e9dc:	e0bff803 	ldbu	r2,-32(fp)
 201e9e0:	00000506 	br	201e9f8 <OSTaskCreate+0x198>
 201e9e4:	e0bff317 	ldw	r2,-52(fp)
 201e9e8:	e0bff915 	stw	r2,-28(fp)
 201e9ec:	e0bff917 	ldw	r2,-28(fp)
 201e9f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201e9f4:	00800a04 	movi	r2,40
}
 201e9f8:	e037883a 	mov	sp,fp
 201e9fc:	dfc00117 	ldw	ra,4(sp)
 201ea00:	df000017 	ldw	fp,0(sp)
 201ea04:	dec00204 	addi	sp,sp,8
 201ea08:	f800283a 	ret

0201ea0c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 201ea0c:	deffec04 	addi	sp,sp,-80
 201ea10:	dfc01315 	stw	ra,76(sp)
 201ea14:	df001215 	stw	fp,72(sp)
 201ea18:	df001204 	addi	fp,sp,72
 201ea1c:	e13ffa15 	stw	r4,-24(fp)
 201ea20:	e17ffb15 	stw	r5,-20(fp)
 201ea24:	e1bffc15 	stw	r6,-16(fp)
 201ea28:	3809883a 	mov	r4,r7
 201ea2c:	e0c00217 	ldw	r3,8(fp)
 201ea30:	e0800617 	ldw	r2,24(fp)
 201ea34:	e13ffd05 	stb	r4,-12(fp)
 201ea38:	e0fffe0d 	sth	r3,-8(fp)
 201ea3c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201ea40:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201ea44:	e0bffd03 	ldbu	r2,-12(fp)
 201ea48:	10800570 	cmpltui	r2,r2,21
 201ea4c:	1000021e 	bne	r2,zero,201ea58 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 201ea50:	00800a84 	movi	r2,42
 201ea54:	00006106 	br	201ebdc <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ea58:	0005303a 	rdctl	r2,status
 201ea5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ea60:	e0fff917 	ldw	r3,-28(fp)
 201ea64:	00bfff84 	movi	r2,-2
 201ea68:	1884703a 	and	r2,r3,r2
 201ea6c:	1001703a 	wrctl	status,r2
  
  return context;
 201ea70:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201ea74:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201ea78:	d0a7b503 	ldbu	r2,-24876(gp)
 201ea7c:	10803fcc 	andi	r2,r2,255
 201ea80:	10000626 	beq	r2,zero,201ea9c <OSTaskCreateExt+0x90>
 201ea84:	e0bff117 	ldw	r2,-60(fp)
 201ea88:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ea8c:	e0bff217 	ldw	r2,-56(fp)
 201ea90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201ea94:	00800f04 	movi	r2,60
 201ea98:	00005006 	br	201ebdc <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201ea9c:	e0fffd03 	ldbu	r3,-12(fp)
 201eaa0:	008080f4 	movhi	r2,515
 201eaa4:	10883704 	addi	r2,r2,8412
 201eaa8:	18c7883a 	add	r3,r3,r3
 201eaac:	18c7883a 	add	r3,r3,r3
 201eab0:	10c5883a 	add	r2,r2,r3
 201eab4:	10800017 	ldw	r2,0(r2)
 201eab8:	1000431e 	bne	r2,zero,201ebc8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201eabc:	e0fffd03 	ldbu	r3,-12(fp)
 201eac0:	008080f4 	movhi	r2,515
 201eac4:	10883704 	addi	r2,r2,8412
 201eac8:	18c7883a 	add	r3,r3,r3
 201eacc:	18c7883a 	add	r3,r3,r3
 201ead0:	10c5883a 	add	r2,r2,r3
 201ead4:	00c00044 	movi	r3,1
 201ead8:	10c00015 	stw	r3,0(r2)
 201eadc:	e0bff117 	ldw	r2,-60(fp)
 201eae0:	e0bff315 	stw	r2,-52(fp)
 201eae4:	e0bff317 	ldw	r2,-52(fp)
 201eae8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 201eaec:	e0bfff0b 	ldhu	r2,-4(fp)
 201eaf0:	100d883a 	mov	r6,r2
 201eaf4:	e1400417 	ldw	r5,16(fp)
 201eaf8:	e1000317 	ldw	r4,12(fp)
 201eafc:	201fa6c0 	call	201fa6c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 201eb00:	e0bfff0b 	ldhu	r2,-4(fp)
 201eb04:	100f883a 	mov	r7,r2
 201eb08:	e1bffc17 	ldw	r6,-16(fp)
 201eb0c:	e17ffb17 	ldw	r5,-20(fp)
 201eb10:	e13ffa17 	ldw	r4,-24(fp)
 201eb14:	2021de40 	call	2021de4 <OSTaskStkInit>
 201eb18:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 201eb1c:	e0fffd03 	ldbu	r3,-12(fp)
 201eb20:	e13ffe0b 	ldhu	r4,-8(fp)
 201eb24:	e0bfff0b 	ldhu	r2,-4(fp)
 201eb28:	d8800215 	stw	r2,8(sp)
 201eb2c:	e0800517 	ldw	r2,20(fp)
 201eb30:	d8800115 	stw	r2,4(sp)
 201eb34:	e0800417 	ldw	r2,16(fp)
 201eb38:	d8800015 	stw	r2,0(sp)
 201eb3c:	200f883a 	mov	r7,r4
 201eb40:	e1800317 	ldw	r6,12(fp)
 201eb44:	e17ff517 	ldw	r5,-44(fp)
 201eb48:	1809883a 	mov	r4,r3
 201eb4c:	2019a780 	call	2019a78 <OS_TCBInit>
 201eb50:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 201eb54:	e0bff603 	ldbu	r2,-40(fp)
 201eb58:	1000061e 	bne	r2,zero,201eb74 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 201eb5c:	d0a7a743 	ldbu	r2,-24931(gp)
 201eb60:	10803fcc 	andi	r2,r2,255
 201eb64:	10800058 	cmpnei	r2,r2,1
 201eb68:	1000151e 	bne	r2,zero,201ebc0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 201eb6c:	20196780 	call	2019678 <OS_Sched>
 201eb70:	00001306 	br	201ebc0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201eb74:	0005303a 	rdctl	r2,status
 201eb78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201eb7c:	e0fff817 	ldw	r3,-32(fp)
 201eb80:	00bfff84 	movi	r2,-2
 201eb84:	1884703a 	and	r2,r3,r2
 201eb88:	1001703a 	wrctl	status,r2
  
  return context;
 201eb8c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201eb90:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201eb94:	e0fffd03 	ldbu	r3,-12(fp)
 201eb98:	008080f4 	movhi	r2,515
 201eb9c:	10883704 	addi	r2,r2,8412
 201eba0:	18c7883a 	add	r3,r3,r3
 201eba4:	18c7883a 	add	r3,r3,r3
 201eba8:	10c5883a 	add	r2,r2,r3
 201ebac:	10000015 	stw	zero,0(r2)
 201ebb0:	e0bff117 	ldw	r2,-60(fp)
 201ebb4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ebb8:	e0bff417 	ldw	r2,-48(fp)
 201ebbc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201ebc0:	e0bff603 	ldbu	r2,-40(fp)
 201ebc4:	00000506 	br	201ebdc <OSTaskCreateExt+0x1d0>
 201ebc8:	e0bff117 	ldw	r2,-60(fp)
 201ebcc:	e0bff715 	stw	r2,-36(fp)
 201ebd0:	e0bff717 	ldw	r2,-36(fp)
 201ebd4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201ebd8:	00800a04 	movi	r2,40
}
 201ebdc:	e037883a 	mov	sp,fp
 201ebe0:	dfc00117 	ldw	ra,4(sp)
 201ebe4:	df000017 	ldw	fp,0(sp)
 201ebe8:	dec00204 	addi	sp,sp,8
 201ebec:	f800283a 	ret

0201ebf0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201ebf0:	defff404 	addi	sp,sp,-48
 201ebf4:	dfc00b15 	stw	ra,44(sp)
 201ebf8:	df000a15 	stw	fp,40(sp)
 201ebfc:	df000a04 	addi	fp,sp,40
 201ec00:	2005883a 	mov	r2,r4
 201ec04:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 201ec08:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 201ec0c:	d0a7b503 	ldbu	r2,-24876(gp)
 201ec10:	10803fcc 	andi	r2,r2,255
 201ec14:	10000226 	beq	r2,zero,201ec20 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 201ec18:	00801004 	movi	r2,64
 201ec1c:	0000c006 	br	201ef20 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 201ec20:	e0bfff03 	ldbu	r2,-4(fp)
 201ec24:	10800518 	cmpnei	r2,r2,20
 201ec28:	1000021e 	bne	r2,zero,201ec34 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 201ec2c:	00800f84 	movi	r2,62
 201ec30:	0000bb06 	br	201ef20 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201ec34:	e0bfff03 	ldbu	r2,-4(fp)
 201ec38:	10800530 	cmpltui	r2,r2,20
 201ec3c:	1000051e 	bne	r2,zero,201ec54 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 201ec40:	e0bfff03 	ldbu	r2,-4(fp)
 201ec44:	10803fe0 	cmpeqi	r2,r2,255
 201ec48:	1000021e 	bne	r2,zero,201ec54 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 201ec4c:	00800a84 	movi	r2,42
 201ec50:	0000b306 	br	201ef20 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ec54:	0005303a 	rdctl	r2,status
 201ec58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ec5c:	e0fffe17 	ldw	r3,-8(fp)
 201ec60:	00bfff84 	movi	r2,-2
 201ec64:	1884703a 	and	r2,r3,r2
 201ec68:	1001703a 	wrctl	status,r2
  
  return context;
 201ec6c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201ec70:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201ec74:	e0bfff03 	ldbu	r2,-4(fp)
 201ec78:	10803fd8 	cmpnei	r2,r2,255
 201ec7c:	1000031e 	bne	r2,zero,201ec8c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 201ec80:	d0a7b617 	ldw	r2,-24872(gp)
 201ec84:	10800c83 	ldbu	r2,50(r2)
 201ec88:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ec8c:	e0ffff03 	ldbu	r3,-4(fp)
 201ec90:	008080f4 	movhi	r2,515
 201ec94:	10883704 	addi	r2,r2,8412
 201ec98:	18c7883a 	add	r3,r3,r3
 201ec9c:	18c7883a 	add	r3,r3,r3
 201eca0:	10c5883a 	add	r2,r2,r3
 201eca4:	10800017 	ldw	r2,0(r2)
 201eca8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201ecac:	e0bff817 	ldw	r2,-32(fp)
 201ecb0:	1000061e 	bne	r2,zero,201eccc <OSTaskDel+0xdc>
 201ecb4:	e0bff617 	ldw	r2,-40(fp)
 201ecb8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ecbc:	e0bff717 	ldw	r2,-36(fp)
 201ecc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201ecc4:	008010c4 	movi	r2,67
 201ecc8:	00009506 	br	201ef20 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201eccc:	e0bff817 	ldw	r2,-32(fp)
 201ecd0:	10800058 	cmpnei	r2,r2,1
 201ecd4:	1000061e 	bne	r2,zero,201ecf0 <OSTaskDel+0x100>
 201ecd8:	e0bff617 	ldw	r2,-40(fp)
 201ecdc:	e0bff915 	stw	r2,-28(fp)
 201ece0:	e0bff917 	ldw	r2,-28(fp)
 201ece4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201ece8:	00800f44 	movi	r2,61
 201ecec:	00008c06 	br	201ef20 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 201ecf0:	e0bff817 	ldw	r2,-32(fp)
 201ecf4:	10800d03 	ldbu	r2,52(r2)
 201ecf8:	10c03fcc 	andi	r3,r2,255
 201ecfc:	e0bff817 	ldw	r2,-32(fp)
 201ed00:	10800d03 	ldbu	r2,52(r2)
 201ed04:	11003fcc 	andi	r4,r2,255
 201ed08:	d0a7b344 	addi	r2,gp,-24883
 201ed0c:	2085883a 	add	r2,r4,r2
 201ed10:	10800003 	ldbu	r2,0(r2)
 201ed14:	1009883a 	mov	r4,r2
 201ed18:	e0bff817 	ldw	r2,-32(fp)
 201ed1c:	10800d43 	ldbu	r2,53(r2)
 201ed20:	0084303a 	nor	r2,zero,r2
 201ed24:	2084703a 	and	r2,r4,r2
 201ed28:	1009883a 	mov	r4,r2
 201ed2c:	d0a7b344 	addi	r2,gp,-24883
 201ed30:	1885883a 	add	r2,r3,r2
 201ed34:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 201ed38:	e0bff817 	ldw	r2,-32(fp)
 201ed3c:	10800d03 	ldbu	r2,52(r2)
 201ed40:	10c03fcc 	andi	r3,r2,255
 201ed44:	d0a7b344 	addi	r2,gp,-24883
 201ed48:	1885883a 	add	r2,r3,r2
 201ed4c:	10800003 	ldbu	r2,0(r2)
 201ed50:	10803fcc 	andi	r2,r2,255
 201ed54:	1000071e 	bne	r2,zero,201ed74 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201ed58:	e0bff817 	ldw	r2,-32(fp)
 201ed5c:	10800d83 	ldbu	r2,54(r2)
 201ed60:	0084303a 	nor	r2,zero,r2
 201ed64:	1007883a 	mov	r3,r2
 201ed68:	d0a7b303 	ldbu	r2,-24884(gp)
 201ed6c:	1884703a 	and	r2,r3,r2
 201ed70:	d0a7b305 	stb	r2,-24884(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201ed74:	e0bff817 	ldw	r2,-32(fp)
 201ed78:	10800717 	ldw	r2,28(r2)
 201ed7c:	10000526 	beq	r2,zero,201ed94 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201ed80:	e0bff817 	ldw	r2,-32(fp)
 201ed84:	10800717 	ldw	r2,28(r2)
 201ed88:	100b883a 	mov	r5,r2
 201ed8c:	e13ff817 	ldw	r4,-32(fp)
 201ed90:	20190240 	call	2019024 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201ed94:	e0bff817 	ldw	r2,-32(fp)
 201ed98:	10800817 	ldw	r2,32(r2)
 201ed9c:	10000526 	beq	r2,zero,201edb4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201eda0:	e0bff817 	ldw	r2,-32(fp)
 201eda4:	10800817 	ldw	r2,32(r2)
 201eda8:	100b883a 	mov	r5,r2
 201edac:	e13ff817 	ldw	r4,-32(fp)
 201edb0:	20190dc0 	call	20190dc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201edb4:	e0bff817 	ldw	r2,-32(fp)
 201edb8:	10800a17 	ldw	r2,40(r2)
 201edbc:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 201edc0:	e0bffb17 	ldw	r2,-20(fp)
 201edc4:	10000226 	beq	r2,zero,201edd0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 201edc8:	e13ffb17 	ldw	r4,-20(fp)
 201edcc:	201b54c0 	call	201b54c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201edd0:	e0bff817 	ldw	r2,-32(fp)
 201edd4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 201edd8:	e0bff817 	ldw	r2,-32(fp)
 201eddc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 201ede0:	e0bff817 	ldw	r2,-32(fp)
 201ede4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 201ede8:	d0a7a703 	ldbu	r2,-24932(gp)
 201edec:	10803fcc 	andi	r2,r2,255
 201edf0:	10803fe0 	cmpeqi	r2,r2,255
 201edf4:	1000031e 	bne	r2,zero,201ee04 <OSTaskDel+0x214>
        OSLockNesting++;
 201edf8:	d0a7a703 	ldbu	r2,-24932(gp)
 201edfc:	10800044 	addi	r2,r2,1
 201ee00:	d0a7a705 	stb	r2,-24932(gp)
 201ee04:	e0bff617 	ldw	r2,-40(fp)
 201ee08:	e0bffd15 	stw	r2,-12(fp)
 201ee0c:	e0bffd17 	ldw	r2,-12(fp)
 201ee10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201ee14:	2018c0c0 	call	2018c0c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ee18:	0005303a 	rdctl	r2,status
 201ee1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ee20:	e0fffa17 	ldw	r3,-24(fp)
 201ee24:	00bfff84 	movi	r2,-2
 201ee28:	1884703a 	and	r2,r3,r2
 201ee2c:	1001703a 	wrctl	status,r2
  
  return context;
 201ee30:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201ee34:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 201ee38:	d0a7a703 	ldbu	r2,-24932(gp)
 201ee3c:	10803fcc 	andi	r2,r2,255
 201ee40:	10000326 	beq	r2,zero,201ee50 <OSTaskDel+0x260>
        OSLockNesting--;
 201ee44:	d0a7a703 	ldbu	r2,-24932(gp)
 201ee48:	10bfffc4 	addi	r2,r2,-1
 201ee4c:	d0a7a705 	stb	r2,-24932(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 201ee50:	e13ff817 	ldw	r4,-32(fp)
 201ee54:	2021f640 	call	2021f64 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 201ee58:	d0a7af43 	ldbu	r2,-24899(gp)
 201ee5c:	10bfffc4 	addi	r2,r2,-1
 201ee60:	d0a7af45 	stb	r2,-24899(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201ee64:	e0ffff03 	ldbu	r3,-4(fp)
 201ee68:	008080f4 	movhi	r2,515
 201ee6c:	10883704 	addi	r2,r2,8412
 201ee70:	18c7883a 	add	r3,r3,r3
 201ee74:	18c7883a 	add	r3,r3,r3
 201ee78:	10c5883a 	add	r2,r2,r3
 201ee7c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201ee80:	e0bff817 	ldw	r2,-32(fp)
 201ee84:	10800617 	ldw	r2,24(r2)
 201ee88:	1000071e 	bne	r2,zero,201eea8 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 201ee8c:	e0bff817 	ldw	r2,-32(fp)
 201ee90:	10800517 	ldw	r2,20(r2)
 201ee94:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201ee98:	e0bff817 	ldw	r2,-32(fp)
 201ee9c:	10800517 	ldw	r2,20(r2)
 201eea0:	d0a7aa15 	stw	r2,-24920(gp)
 201eea4:	00000a06 	br	201eed0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201eea8:	e0bff817 	ldw	r2,-32(fp)
 201eeac:	10800617 	ldw	r2,24(r2)
 201eeb0:	e0fff817 	ldw	r3,-32(fp)
 201eeb4:	18c00517 	ldw	r3,20(r3)
 201eeb8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 201eebc:	e0bff817 	ldw	r2,-32(fp)
 201eec0:	10800517 	ldw	r2,20(r2)
 201eec4:	e0fff817 	ldw	r3,-32(fp)
 201eec8:	18c00617 	ldw	r3,24(r3)
 201eecc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 201eed0:	d0e7ae17 	ldw	r3,-24904(gp)
 201eed4:	e0bff817 	ldw	r2,-32(fp)
 201eed8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201eedc:	e0bff817 	ldw	r2,-32(fp)
 201eee0:	d0a7ae15 	stw	r2,-24904(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201eee4:	e0bff817 	ldw	r2,-32(fp)
 201eee8:	00c00fc4 	movi	r3,63
 201eeec:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 201eef0:	e0bff817 	ldw	r2,-32(fp)
 201eef4:	10001345 	stb	zero,77(r2)
 201eef8:	e0bff617 	ldw	r2,-40(fp)
 201eefc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ef00:	e0bffc17 	ldw	r2,-16(fp)
 201ef04:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201ef08:	d0a7a743 	ldbu	r2,-24931(gp)
 201ef0c:	10803fcc 	andi	r2,r2,255
 201ef10:	10800058 	cmpnei	r2,r2,1
 201ef14:	1000011e 	bne	r2,zero,201ef1c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 201ef18:	20196780 	call	2019678 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201ef1c:	0005883a 	mov	r2,zero
}
 201ef20:	e037883a 	mov	sp,fp
 201ef24:	dfc00117 	ldw	ra,4(sp)
 201ef28:	df000017 	ldw	fp,0(sp)
 201ef2c:	dec00204 	addi	sp,sp,8
 201ef30:	f800283a 	ret

0201ef34 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201ef34:	defff504 	addi	sp,sp,-44
 201ef38:	df000a15 	stw	fp,40(sp)
 201ef3c:	df000a04 	addi	fp,sp,40
 201ef40:	2005883a 	mov	r2,r4
 201ef44:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201ef48:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201ef4c:	e0bfff03 	ldbu	r2,-4(fp)
 201ef50:	10800518 	cmpnei	r2,r2,20
 201ef54:	1000021e 	bne	r2,zero,201ef60 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 201ef58:	00800f84 	movi	r2,62
 201ef5c:	00004506 	br	201f074 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201ef60:	e0bfff03 	ldbu	r2,-4(fp)
 201ef64:	10800530 	cmpltui	r2,r2,20
 201ef68:	1000051e 	bne	r2,zero,201ef80 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 201ef6c:	e0bfff03 	ldbu	r2,-4(fp)
 201ef70:	10803fe0 	cmpeqi	r2,r2,255
 201ef74:	1000021e 	bne	r2,zero,201ef80 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 201ef78:	00800a84 	movi	r2,42
 201ef7c:	00003d06 	br	201f074 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 201ef80:	e0bfff03 	ldbu	r2,-4(fp)
 201ef84:	10803fd8 	cmpnei	r2,r2,255
 201ef88:	1000111e 	bne	r2,zero,201efd0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ef8c:	0005303a 	rdctl	r2,status
 201ef90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ef94:	e0fff917 	ldw	r3,-28(fp)
 201ef98:	00bfff84 	movi	r2,-2
 201ef9c:	1884703a 	and	r2,r3,r2
 201efa0:	1001703a 	wrctl	status,r2
  
  return context;
 201efa4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201efa8:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 201efac:	d0a7b617 	ldw	r2,-24872(gp)
 201efb0:	10800dc3 	ldbu	r2,55(r2)
 201efb4:	e0bff805 	stb	r2,-32(fp)
 201efb8:	e0bff617 	ldw	r2,-40(fp)
 201efbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201efc0:	e0bffe17 	ldw	r2,-8(fp)
 201efc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201efc8:	e0bff803 	ldbu	r2,-32(fp)
 201efcc:	00002906 	br	201f074 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201efd0:	0005303a 	rdctl	r2,status
 201efd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201efd8:	e0fff717 	ldw	r3,-36(fp)
 201efdc:	00bfff84 	movi	r2,-2
 201efe0:	1884703a 	and	r2,r3,r2
 201efe4:	1001703a 	wrctl	status,r2
  
  return context;
 201efe8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 201efec:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201eff0:	e0ffff03 	ldbu	r3,-4(fp)
 201eff4:	008080f4 	movhi	r2,515
 201eff8:	10883704 	addi	r2,r2,8412
 201effc:	18c7883a 	add	r3,r3,r3
 201f000:	18c7883a 	add	r3,r3,r3
 201f004:	10c5883a 	add	r2,r2,r3
 201f008:	10800017 	ldw	r2,0(r2)
 201f00c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 201f010:	e0bffb17 	ldw	r2,-20(fp)
 201f014:	1000061e 	bne	r2,zero,201f030 <OSTaskDelReq+0xfc>
 201f018:	e0bff617 	ldw	r2,-40(fp)
 201f01c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f020:	e0bffa17 	ldw	r2,-24(fp)
 201f024:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 201f028:	008010c4 	movi	r2,67
 201f02c:	00001106 	br	201f074 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201f030:	e0bffb17 	ldw	r2,-20(fp)
 201f034:	10800058 	cmpnei	r2,r2,1
 201f038:	1000061e 	bne	r2,zero,201f054 <OSTaskDelReq+0x120>
 201f03c:	e0bff617 	ldw	r2,-40(fp)
 201f040:	e0bffc15 	stw	r2,-16(fp)
 201f044:	e0bffc17 	ldw	r2,-16(fp)
 201f048:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201f04c:	00800f44 	movi	r2,61
 201f050:	00000806 	br	201f074 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201f054:	e0bffb17 	ldw	r2,-20(fp)
 201f058:	00c00fc4 	movi	r3,63
 201f05c:	10c00dc5 	stb	r3,55(r2)
 201f060:	e0bff617 	ldw	r2,-40(fp)
 201f064:	e0bffd15 	stw	r2,-12(fp)
 201f068:	e0bffd17 	ldw	r2,-12(fp)
 201f06c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201f070:	0005883a 	mov	r2,zero
}
 201f074:	e037883a 	mov	sp,fp
 201f078:	df000017 	ldw	fp,0(sp)
 201f07c:	dec00104 	addi	sp,sp,4
 201f080:	f800283a 	ret

0201f084 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201f084:	defff404 	addi	sp,sp,-48
 201f088:	dfc00b15 	stw	ra,44(sp)
 201f08c:	df000a15 	stw	fp,40(sp)
 201f090:	df000a04 	addi	fp,sp,40
 201f094:	2005883a 	mov	r2,r4
 201f098:	e17ffe15 	stw	r5,-8(fp)
 201f09c:	e1bfff15 	stw	r6,-4(fp)
 201f0a0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201f0a4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201f0a8:	e0bfff17 	ldw	r2,-4(fp)
 201f0ac:	1000021e 	bne	r2,zero,201f0b8 <OSTaskNameGet+0x34>
        return (0);
 201f0b0:	0005883a 	mov	r2,zero
 201f0b4:	00005406 	br	201f208 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201f0b8:	e0bffd03 	ldbu	r2,-12(fp)
 201f0bc:	10800570 	cmpltui	r2,r2,21
 201f0c0:	1000081e 	bne	r2,zero,201f0e4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 201f0c4:	e0bffd03 	ldbu	r2,-12(fp)
 201f0c8:	10803fe0 	cmpeqi	r2,r2,255
 201f0cc:	1000051e 	bne	r2,zero,201f0e4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 201f0d0:	e0bfff17 	ldw	r2,-4(fp)
 201f0d4:	00c00a84 	movi	r3,42
 201f0d8:	10c00005 	stb	r3,0(r2)
            return (0);
 201f0dc:	0005883a 	mov	r2,zero
 201f0e0:	00004906 	br	201f208 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 201f0e4:	e0bffe17 	ldw	r2,-8(fp)
 201f0e8:	1000051e 	bne	r2,zero,201f100 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 201f0ec:	e0bfff17 	ldw	r2,-4(fp)
 201f0f0:	00c00304 	movi	r3,12
 201f0f4:	10c00005 	stb	r3,0(r2)
        return (0);
 201f0f8:	0005883a 	mov	r2,zero
 201f0fc:	00004206 	br	201f208 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 201f100:	d0a7b503 	ldbu	r2,-24876(gp)
 201f104:	10803fcc 	andi	r2,r2,255
 201f108:	10000526 	beq	r2,zero,201f120 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 201f10c:	e0bfff17 	ldw	r2,-4(fp)
 201f110:	00c00444 	movi	r3,17
 201f114:	10c00005 	stb	r3,0(r2)
        return (0);
 201f118:	0005883a 	mov	r2,zero
 201f11c:	00003a06 	br	201f208 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f120:	0005303a 	rdctl	r2,status
 201f124:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f128:	e0fffc17 	ldw	r3,-16(fp)
 201f12c:	00bfff84 	movi	r2,-2
 201f130:	1884703a 	and	r2,r3,r2
 201f134:	1001703a 	wrctl	status,r2
  
  return context;
 201f138:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201f13c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 201f140:	e0bffd03 	ldbu	r2,-12(fp)
 201f144:	10803fd8 	cmpnei	r2,r2,255
 201f148:	1000031e 	bne	r2,zero,201f158 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 201f14c:	d0a7b617 	ldw	r2,-24872(gp)
 201f150:	10800c83 	ldbu	r2,50(r2)
 201f154:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201f158:	e0fffd03 	ldbu	r3,-12(fp)
 201f15c:	008080f4 	movhi	r2,515
 201f160:	10883704 	addi	r2,r2,8412
 201f164:	18c7883a 	add	r3,r3,r3
 201f168:	18c7883a 	add	r3,r3,r3
 201f16c:	10c5883a 	add	r2,r2,r3
 201f170:	10800017 	ldw	r2,0(r2)
 201f174:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 201f178:	e0bff817 	ldw	r2,-32(fp)
 201f17c:	1000091e 	bne	r2,zero,201f1a4 <OSTaskNameGet+0x120>
 201f180:	e0bff617 	ldw	r2,-40(fp)
 201f184:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f188:	e0bff717 	ldw	r2,-36(fp)
 201f18c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201f190:	e0bfff17 	ldw	r2,-4(fp)
 201f194:	00c010c4 	movi	r3,67
 201f198:	10c00005 	stb	r3,0(r2)
        return (0);
 201f19c:	0005883a 	mov	r2,zero
 201f1a0:	00001906 	br	201f208 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201f1a4:	e0bff817 	ldw	r2,-32(fp)
 201f1a8:	10800058 	cmpnei	r2,r2,1
 201f1ac:	1000091e 	bne	r2,zero,201f1d4 <OSTaskNameGet+0x150>
 201f1b0:	e0bff617 	ldw	r2,-40(fp)
 201f1b4:	e0bff915 	stw	r2,-28(fp)
 201f1b8:	e0bff917 	ldw	r2,-28(fp)
 201f1bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201f1c0:	e0bfff17 	ldw	r2,-4(fp)
 201f1c4:	00c010c4 	movi	r3,67
 201f1c8:	10c00005 	stb	r3,0(r2)
        return (0);
 201f1cc:	0005883a 	mov	r2,zero
 201f1d0:	00000d06 	br	201f208 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 201f1d4:	e0bff817 	ldw	r2,-32(fp)
 201f1d8:	10801304 	addi	r2,r2,76
 201f1dc:	100b883a 	mov	r5,r2
 201f1e0:	e13ffe17 	ldw	r4,-8(fp)
 201f1e4:	20197bc0 	call	20197bc <OS_StrCopy>
 201f1e8:	e0bffb05 	stb	r2,-20(fp)
 201f1ec:	e0bff617 	ldw	r2,-40(fp)
 201f1f0:	e0bffa15 	stw	r2,-24(fp)
 201f1f4:	e0bffa17 	ldw	r2,-24(fp)
 201f1f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201f1fc:	e0bfff17 	ldw	r2,-4(fp)
 201f200:	10000005 	stb	zero,0(r2)
    return (len);
 201f204:	e0bffb03 	ldbu	r2,-20(fp)
}
 201f208:	e037883a 	mov	sp,fp
 201f20c:	dfc00117 	ldw	ra,4(sp)
 201f210:	df000017 	ldw	fp,0(sp)
 201f214:	dec00204 	addi	sp,sp,8
 201f218:	f800283a 	ret

0201f21c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201f21c:	defff304 	addi	sp,sp,-52
 201f220:	dfc00c15 	stw	ra,48(sp)
 201f224:	df000b15 	stw	fp,44(sp)
 201f228:	df000b04 	addi	fp,sp,44
 201f22c:	2005883a 	mov	r2,r4
 201f230:	e17ffe15 	stw	r5,-8(fp)
 201f234:	e1bfff15 	stw	r6,-4(fp)
 201f238:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201f23c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201f240:	e0bfff17 	ldw	r2,-4(fp)
 201f244:	10005c26 	beq	r2,zero,201f3b8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 201f248:	e0bffd03 	ldbu	r2,-12(fp)
 201f24c:	10800570 	cmpltui	r2,r2,21
 201f250:	1000071e 	bne	r2,zero,201f270 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 201f254:	e0bffd03 	ldbu	r2,-12(fp)
 201f258:	10803fe0 	cmpeqi	r2,r2,255
 201f25c:	1000041e 	bne	r2,zero,201f270 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 201f260:	e0bfff17 	ldw	r2,-4(fp)
 201f264:	00c00a84 	movi	r3,42
 201f268:	10c00005 	stb	r3,0(r2)
            return;
 201f26c:	00005306 	br	201f3bc <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 201f270:	e0bffe17 	ldw	r2,-8(fp)
 201f274:	1000041e 	bne	r2,zero,201f288 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 201f278:	e0bfff17 	ldw	r2,-4(fp)
 201f27c:	00c00304 	movi	r3,12
 201f280:	10c00005 	stb	r3,0(r2)
        return;
 201f284:	00004d06 	br	201f3bc <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201f288:	d0a7b503 	ldbu	r2,-24876(gp)
 201f28c:	10803fcc 	andi	r2,r2,255
 201f290:	10000426 	beq	r2,zero,201f2a4 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 201f294:	e0bfff17 	ldw	r2,-4(fp)
 201f298:	00c00484 	movi	r3,18
 201f29c:	10c00005 	stb	r3,0(r2)
        return;
 201f2a0:	00004606 	br	201f3bc <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f2a4:	0005303a 	rdctl	r2,status
 201f2a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f2ac:	e0fffc17 	ldw	r3,-16(fp)
 201f2b0:	00bfff84 	movi	r2,-2
 201f2b4:	1884703a 	and	r2,r3,r2
 201f2b8:	1001703a 	wrctl	status,r2
  
  return context;
 201f2bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201f2c0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201f2c4:	e0bffd03 	ldbu	r2,-12(fp)
 201f2c8:	10803fd8 	cmpnei	r2,r2,255
 201f2cc:	1000031e 	bne	r2,zero,201f2dc <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 201f2d0:	d0a7b617 	ldw	r2,-24872(gp)
 201f2d4:	10800c83 	ldbu	r2,50(r2)
 201f2d8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201f2dc:	e0fffd03 	ldbu	r3,-12(fp)
 201f2e0:	008080f4 	movhi	r2,515
 201f2e4:	10883704 	addi	r2,r2,8412
 201f2e8:	18c7883a 	add	r3,r3,r3
 201f2ec:	18c7883a 	add	r3,r3,r3
 201f2f0:	10c5883a 	add	r2,r2,r3
 201f2f4:	10800017 	ldw	r2,0(r2)
 201f2f8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201f2fc:	e0bff717 	ldw	r2,-36(fp)
 201f300:	1000081e 	bne	r2,zero,201f324 <OSTaskNameSet+0x108>
 201f304:	e0bff517 	ldw	r2,-44(fp)
 201f308:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f30c:	e0bff617 	ldw	r2,-40(fp)
 201f310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201f314:	e0bfff17 	ldw	r2,-4(fp)
 201f318:	00c010c4 	movi	r3,67
 201f31c:	10c00005 	stb	r3,0(r2)
        return;
 201f320:	00002606 	br	201f3bc <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 201f324:	e0bff717 	ldw	r2,-36(fp)
 201f328:	10800058 	cmpnei	r2,r2,1
 201f32c:	1000081e 	bne	r2,zero,201f350 <OSTaskNameSet+0x134>
 201f330:	e0bff517 	ldw	r2,-44(fp)
 201f334:	e0bff815 	stw	r2,-32(fp)
 201f338:	e0bff817 	ldw	r2,-32(fp)
 201f33c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201f340:	e0bfff17 	ldw	r2,-4(fp)
 201f344:	00c010c4 	movi	r3,67
 201f348:	10c00005 	stb	r3,0(r2)
        return;
 201f34c:	00001b06 	br	201f3bc <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 201f350:	e13ffe17 	ldw	r4,-8(fp)
 201f354:	20198300 	call	2019830 <OS_StrLen>
 201f358:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201f35c:	e0bffa03 	ldbu	r2,-24(fp)
 201f360:	10800830 	cmpltui	r2,r2,32
 201f364:	1000081e 	bne	r2,zero,201f388 <OSTaskNameSet+0x16c>
 201f368:	e0bff517 	ldw	r2,-44(fp)
 201f36c:	e0bff915 	stw	r2,-28(fp)
 201f370:	e0bff917 	ldw	r2,-28(fp)
 201f374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 201f378:	e0bfff17 	ldw	r2,-4(fp)
 201f37c:	00c01044 	movi	r3,65
 201f380:	10c00005 	stb	r3,0(r2)
        return;
 201f384:	00000d06 	br	201f3bc <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201f388:	e0bff717 	ldw	r2,-36(fp)
 201f38c:	10801304 	addi	r2,r2,76
 201f390:	e17ffe17 	ldw	r5,-8(fp)
 201f394:	1009883a 	mov	r4,r2
 201f398:	20197bc0 	call	20197bc <OS_StrCopy>
 201f39c:	e0bff517 	ldw	r2,-44(fp)
 201f3a0:	e0bffb15 	stw	r2,-20(fp)
 201f3a4:	e0bffb17 	ldw	r2,-20(fp)
 201f3a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201f3ac:	e0bfff17 	ldw	r2,-4(fp)
 201f3b0:	10000005 	stb	zero,0(r2)
 201f3b4:	00000106 	br	201f3bc <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201f3b8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201f3bc:	e037883a 	mov	sp,fp
 201f3c0:	dfc00117 	ldw	ra,4(sp)
 201f3c4:	df000017 	ldw	fp,0(sp)
 201f3c8:	dec00204 	addi	sp,sp,8
 201f3cc:	f800283a 	ret

0201f3d0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 201f3d0:	defff404 	addi	sp,sp,-48
 201f3d4:	dfc00b15 	stw	ra,44(sp)
 201f3d8:	df000a15 	stw	fp,40(sp)
 201f3dc:	df000a04 	addi	fp,sp,40
 201f3e0:	2005883a 	mov	r2,r4
 201f3e4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201f3e8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201f3ec:	e0bfff03 	ldbu	r2,-4(fp)
 201f3f0:	10800530 	cmpltui	r2,r2,20
 201f3f4:	1000021e 	bne	r2,zero,201f400 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201f3f8:	00800a84 	movi	r2,42
 201f3fc:	00006406 	br	201f590 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f400:	0005303a 	rdctl	r2,status
 201f404:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f408:	e0fffe17 	ldw	r3,-8(fp)
 201f40c:	00bfff84 	movi	r2,-2
 201f410:	1884703a 	and	r2,r3,r2
 201f414:	1001703a 	wrctl	status,r2
  
  return context;
 201f418:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201f41c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201f420:	e0ffff03 	ldbu	r3,-4(fp)
 201f424:	008080f4 	movhi	r2,515
 201f428:	10883704 	addi	r2,r2,8412
 201f42c:	18c7883a 	add	r3,r3,r3
 201f430:	18c7883a 	add	r3,r3,r3
 201f434:	10c5883a 	add	r2,r2,r3
 201f438:	10800017 	ldw	r2,0(r2)
 201f43c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 201f440:	e0bff817 	ldw	r2,-32(fp)
 201f444:	1000061e 	bne	r2,zero,201f460 <OSTaskResume+0x90>
 201f448:	e0bff617 	ldw	r2,-40(fp)
 201f44c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f450:	e0bff717 	ldw	r2,-36(fp)
 201f454:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 201f458:	00801184 	movi	r2,70
 201f45c:	00004c06 	br	201f590 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 201f460:	e0bff817 	ldw	r2,-32(fp)
 201f464:	10800058 	cmpnei	r2,r2,1
 201f468:	1000061e 	bne	r2,zero,201f484 <OSTaskResume+0xb4>
 201f46c:	e0bff617 	ldw	r2,-40(fp)
 201f470:	e0bff915 	stw	r2,-28(fp)
 201f474:	e0bff917 	ldw	r2,-28(fp)
 201f478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201f47c:	008010c4 	movi	r2,67
 201f480:	00004306 	br	201f590 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 201f484:	e0bff817 	ldw	r2,-32(fp)
 201f488:	10800c03 	ldbu	r2,48(r2)
 201f48c:	10803fcc 	andi	r2,r2,255
 201f490:	1080020c 	andi	r2,r2,8
 201f494:	10003926 	beq	r2,zero,201f57c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201f498:	e0bff817 	ldw	r2,-32(fp)
 201f49c:	10c00c03 	ldbu	r3,48(r2)
 201f4a0:	00bffdc4 	movi	r2,-9
 201f4a4:	1884703a 	and	r2,r3,r2
 201f4a8:	1007883a 	mov	r3,r2
 201f4ac:	e0bff817 	ldw	r2,-32(fp)
 201f4b0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 201f4b4:	e0bff817 	ldw	r2,-32(fp)
 201f4b8:	10800c03 	ldbu	r2,48(r2)
 201f4bc:	10803fcc 	andi	r2,r2,255
 201f4c0:	1000281e 	bne	r2,zero,201f564 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 201f4c4:	e0bff817 	ldw	r2,-32(fp)
 201f4c8:	10800b8b 	ldhu	r2,46(r2)
 201f4cc:	10bfffcc 	andi	r2,r2,65535
 201f4d0:	10001f1e 	bne	r2,zero,201f550 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 201f4d4:	e0bff817 	ldw	r2,-32(fp)
 201f4d8:	10c00d83 	ldbu	r3,54(r2)
 201f4dc:	d0a7b303 	ldbu	r2,-24884(gp)
 201f4e0:	1884b03a 	or	r2,r3,r2
 201f4e4:	d0a7b305 	stb	r2,-24884(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201f4e8:	e0bff817 	ldw	r2,-32(fp)
 201f4ec:	10800d03 	ldbu	r2,52(r2)
 201f4f0:	10c03fcc 	andi	r3,r2,255
 201f4f4:	e0bff817 	ldw	r2,-32(fp)
 201f4f8:	10800d03 	ldbu	r2,52(r2)
 201f4fc:	11003fcc 	andi	r4,r2,255
 201f500:	d0a7b344 	addi	r2,gp,-24883
 201f504:	2085883a 	add	r2,r4,r2
 201f508:	11000003 	ldbu	r4,0(r2)
 201f50c:	e0bff817 	ldw	r2,-32(fp)
 201f510:	10800d43 	ldbu	r2,53(r2)
 201f514:	2084b03a 	or	r2,r4,r2
 201f518:	1009883a 	mov	r4,r2
 201f51c:	d0a7b344 	addi	r2,gp,-24883
 201f520:	1885883a 	add	r2,r3,r2
 201f524:	11000005 	stb	r4,0(r2)
 201f528:	e0bff617 	ldw	r2,-40(fp)
 201f52c:	e0bffa15 	stw	r2,-24(fp)
 201f530:	e0bffa17 	ldw	r2,-24(fp)
 201f534:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201f538:	d0a7a743 	ldbu	r2,-24931(gp)
 201f53c:	10803fcc 	andi	r2,r2,255
 201f540:	10800058 	cmpnei	r2,r2,1
 201f544:	10000b1e 	bne	r2,zero,201f574 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 201f548:	20196780 	call	2019678 <OS_Sched>
 201f54c:	00000906 	br	201f574 <OSTaskResume+0x1a4>
 201f550:	e0bff617 	ldw	r2,-40(fp)
 201f554:	e0bffb15 	stw	r2,-20(fp)
 201f558:	e0bffb17 	ldw	r2,-20(fp)
 201f55c:	1001703a 	wrctl	status,r2
 201f560:	00000406 	br	201f574 <OSTaskResume+0x1a4>
 201f564:	e0bff617 	ldw	r2,-40(fp)
 201f568:	e0bffc15 	stw	r2,-16(fp)
 201f56c:	e0bffc17 	ldw	r2,-16(fp)
 201f570:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 201f574:	0005883a 	mov	r2,zero
 201f578:	00000506 	br	201f590 <OSTaskResume+0x1c0>
 201f57c:	e0bff617 	ldw	r2,-40(fp)
 201f580:	e0bffd15 	stw	r2,-12(fp)
 201f584:	e0bffd17 	ldw	r2,-12(fp)
 201f588:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201f58c:	00801104 	movi	r2,68
}
 201f590:	e037883a 	mov	sp,fp
 201f594:	dfc00117 	ldw	ra,4(sp)
 201f598:	df000017 	ldw	fp,0(sp)
 201f59c:	dec00204 	addi	sp,sp,8
 201f5a0:	f800283a 	ret

0201f5a4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 201f5a4:	defff304 	addi	sp,sp,-52
 201f5a8:	df000c15 	stw	fp,48(sp)
 201f5ac:	df000c04 	addi	fp,sp,48
 201f5b0:	2005883a 	mov	r2,r4
 201f5b4:	e17fff15 	stw	r5,-4(fp)
 201f5b8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201f5bc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 201f5c0:	e0bffe03 	ldbu	r2,-8(fp)
 201f5c4:	10800570 	cmpltui	r2,r2,21
 201f5c8:	1000051e 	bne	r2,zero,201f5e0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201f5cc:	e0bffe03 	ldbu	r2,-8(fp)
 201f5d0:	10803fe0 	cmpeqi	r2,r2,255
 201f5d4:	1000021e 	bne	r2,zero,201f5e0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201f5d8:	00800a84 	movi	r2,42
 201f5dc:	00005d06 	br	201f754 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 201f5e0:	e0bfff17 	ldw	r2,-4(fp)
 201f5e4:	1000021e 	bne	r2,zero,201f5f0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201f5e8:	00800244 	movi	r2,9
 201f5ec:	00005906 	br	201f754 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 201f5f0:	e0bfff17 	ldw	r2,-4(fp)
 201f5f4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201f5f8:	e0bfff17 	ldw	r2,-4(fp)
 201f5fc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f600:	0005303a 	rdctl	r2,status
 201f604:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f608:	e0fffd17 	ldw	r3,-12(fp)
 201f60c:	00bfff84 	movi	r2,-2
 201f610:	1884703a 	and	r2,r3,r2
 201f614:	1001703a 	wrctl	status,r2
  
  return context;
 201f618:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 201f61c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 201f620:	e0bffe03 	ldbu	r2,-8(fp)
 201f624:	10803fd8 	cmpnei	r2,r2,255
 201f628:	1000031e 	bne	r2,zero,201f638 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201f62c:	d0a7b617 	ldw	r2,-24872(gp)
 201f630:	10800c83 	ldbu	r2,50(r2)
 201f634:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201f638:	e0fffe03 	ldbu	r3,-8(fp)
 201f63c:	008080f4 	movhi	r2,515
 201f640:	10883704 	addi	r2,r2,8412
 201f644:	18c7883a 	add	r3,r3,r3
 201f648:	18c7883a 	add	r3,r3,r3
 201f64c:	10c5883a 	add	r2,r2,r3
 201f650:	10800017 	ldw	r2,0(r2)
 201f654:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 201f658:	e0bff817 	ldw	r2,-32(fp)
 201f65c:	1000061e 	bne	r2,zero,201f678 <OSTaskStkChk+0xd4>
 201f660:	e0bff617 	ldw	r2,-40(fp)
 201f664:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f668:	e0bff717 	ldw	r2,-36(fp)
 201f66c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201f670:	008010c4 	movi	r2,67
 201f674:	00003706 	br	201f754 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201f678:	e0bff817 	ldw	r2,-32(fp)
 201f67c:	10800058 	cmpnei	r2,r2,1
 201f680:	1000061e 	bne	r2,zero,201f69c <OSTaskStkChk+0xf8>
 201f684:	e0bff617 	ldw	r2,-40(fp)
 201f688:	e0bff915 	stw	r2,-28(fp)
 201f68c:	e0bff917 	ldw	r2,-28(fp)
 201f690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201f694:	008010c4 	movi	r2,67
 201f698:	00002e06 	br	201f754 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201f69c:	e0bff817 	ldw	r2,-32(fp)
 201f6a0:	1080040b 	ldhu	r2,16(r2)
 201f6a4:	10bfffcc 	andi	r2,r2,65535
 201f6a8:	1080004c 	andi	r2,r2,1
 201f6ac:	1000061e 	bne	r2,zero,201f6c8 <OSTaskStkChk+0x124>
 201f6b0:	e0bff617 	ldw	r2,-40(fp)
 201f6b4:	e0bffa15 	stw	r2,-24(fp)
 201f6b8:	e0bffa17 	ldw	r2,-24(fp)
 201f6bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 201f6c0:	00801144 	movi	r2,69
 201f6c4:	00002306 	br	201f754 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201f6c8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 201f6cc:	e0bff817 	ldw	r2,-32(fp)
 201f6d0:	10800317 	ldw	r2,12(r2)
 201f6d4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201f6d8:	e0bff817 	ldw	r2,-32(fp)
 201f6dc:	10800217 	ldw	r2,8(r2)
 201f6e0:	e0bff415 	stw	r2,-48(fp)
 201f6e4:	e0bff617 	ldw	r2,-40(fp)
 201f6e8:	e0bffb15 	stw	r2,-20(fp)
 201f6ec:	e0bffb17 	ldw	r2,-20(fp)
 201f6f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201f6f4:	00000306 	br	201f704 <OSTaskStkChk+0x160>
        nfree++;
 201f6f8:	e0bff517 	ldw	r2,-44(fp)
 201f6fc:	10800044 	addi	r2,r2,1
 201f700:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201f704:	e0bff417 	ldw	r2,-48(fp)
 201f708:	10c00104 	addi	r3,r2,4
 201f70c:	e0fff415 	stw	r3,-48(fp)
 201f710:	10800017 	ldw	r2,0(r2)
 201f714:	103ff826 	beq	r2,zero,201f6f8 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201f718:	e0bff517 	ldw	r2,-44(fp)
 201f71c:	1085883a 	add	r2,r2,r2
 201f720:	1085883a 	add	r2,r2,r2
 201f724:	1007883a 	mov	r3,r2
 201f728:	e0bfff17 	ldw	r2,-4(fp)
 201f72c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 201f730:	e0fffc17 	ldw	r3,-16(fp)
 201f734:	e0bff517 	ldw	r2,-44(fp)
 201f738:	1885c83a 	sub	r2,r3,r2
 201f73c:	1085883a 	add	r2,r2,r2
 201f740:	1085883a 	add	r2,r2,r2
 201f744:	1007883a 	mov	r3,r2
 201f748:	e0bfff17 	ldw	r2,-4(fp)
 201f74c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 201f750:	0005883a 	mov	r2,zero
}
 201f754:	e037883a 	mov	sp,fp
 201f758:	df000017 	ldw	fp,0(sp)
 201f75c:	dec00104 	addi	sp,sp,4
 201f760:	f800283a 	ret

0201f764 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 201f764:	defff504 	addi	sp,sp,-44
 201f768:	dfc00a15 	stw	ra,40(sp)
 201f76c:	df000915 	stw	fp,36(sp)
 201f770:	df000904 	addi	fp,sp,36
 201f774:	2005883a 	mov	r2,r4
 201f778:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f77c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 201f780:	e0bfff03 	ldbu	r2,-4(fp)
 201f784:	10800518 	cmpnei	r2,r2,20
 201f788:	1000021e 	bne	r2,zero,201f794 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201f78c:	008011c4 	movi	r2,71
 201f790:	00006806 	br	201f934 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201f794:	e0bfff03 	ldbu	r2,-4(fp)
 201f798:	10800530 	cmpltui	r2,r2,20
 201f79c:	1000051e 	bne	r2,zero,201f7b4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 201f7a0:	e0bfff03 	ldbu	r2,-4(fp)
 201f7a4:	10803fe0 	cmpeqi	r2,r2,255
 201f7a8:	1000021e 	bne	r2,zero,201f7b4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 201f7ac:	00800a84 	movi	r2,42
 201f7b0:	00006006 	br	201f934 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f7b4:	0005303a 	rdctl	r2,status
 201f7b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f7bc:	e0fffe17 	ldw	r3,-8(fp)
 201f7c0:	00bfff84 	movi	r2,-2
 201f7c4:	1884703a 	and	r2,r3,r2
 201f7c8:	1001703a 	wrctl	status,r2
  
  return context;
 201f7cc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 201f7d0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 201f7d4:	e0bfff03 	ldbu	r2,-4(fp)
 201f7d8:	10803fd8 	cmpnei	r2,r2,255
 201f7dc:	1000061e 	bne	r2,zero,201f7f8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201f7e0:	d0a7b617 	ldw	r2,-24872(gp)
 201f7e4:	10800c83 	ldbu	r2,50(r2)
 201f7e8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 201f7ec:	00800044 	movi	r2,1
 201f7f0:	e0bff705 	stb	r2,-36(fp)
 201f7f4:	00000906 	br	201f81c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201f7f8:	d0a7b617 	ldw	r2,-24872(gp)
 201f7fc:	10800c83 	ldbu	r2,50(r2)
 201f800:	10c03fcc 	andi	r3,r2,255
 201f804:	e0bfff03 	ldbu	r2,-4(fp)
 201f808:	1880031e 	bne	r3,r2,201f818 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 201f80c:	00800044 	movi	r2,1
 201f810:	e0bff705 	stb	r2,-36(fp)
 201f814:	00000106 	br	201f81c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201f818:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201f81c:	e0ffff03 	ldbu	r3,-4(fp)
 201f820:	008080f4 	movhi	r2,515
 201f824:	10883704 	addi	r2,r2,8412
 201f828:	18c7883a 	add	r3,r3,r3
 201f82c:	18c7883a 	add	r3,r3,r3
 201f830:	10c5883a 	add	r2,r2,r3
 201f834:	10800017 	ldw	r2,0(r2)
 201f838:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201f83c:	e0bffa17 	ldw	r2,-24(fp)
 201f840:	1000061e 	bne	r2,zero,201f85c <OSTaskSuspend+0xf8>
 201f844:	e0bff817 	ldw	r2,-32(fp)
 201f848:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f84c:	e0bff917 	ldw	r2,-28(fp)
 201f850:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201f854:	00801204 	movi	r2,72
 201f858:	00003606 	br	201f934 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201f85c:	e0bffa17 	ldw	r2,-24(fp)
 201f860:	10800058 	cmpnei	r2,r2,1
 201f864:	1000061e 	bne	r2,zero,201f880 <OSTaskSuspend+0x11c>
 201f868:	e0bff817 	ldw	r2,-32(fp)
 201f86c:	e0bffb15 	stw	r2,-20(fp)
 201f870:	e0bffb17 	ldw	r2,-20(fp)
 201f874:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201f878:	008010c4 	movi	r2,67
 201f87c:	00002d06 	br	201f934 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 201f880:	e0bffa17 	ldw	r2,-24(fp)
 201f884:	10800d03 	ldbu	r2,52(r2)
 201f888:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201f88c:	e0fffd03 	ldbu	r3,-12(fp)
 201f890:	e13ffd03 	ldbu	r4,-12(fp)
 201f894:	d0a7b344 	addi	r2,gp,-24883
 201f898:	2085883a 	add	r2,r4,r2
 201f89c:	10800003 	ldbu	r2,0(r2)
 201f8a0:	1009883a 	mov	r4,r2
 201f8a4:	e0bffa17 	ldw	r2,-24(fp)
 201f8a8:	10800d43 	ldbu	r2,53(r2)
 201f8ac:	0084303a 	nor	r2,zero,r2
 201f8b0:	2084703a 	and	r2,r4,r2
 201f8b4:	1009883a 	mov	r4,r2
 201f8b8:	d0a7b344 	addi	r2,gp,-24883
 201f8bc:	1885883a 	add	r2,r3,r2
 201f8c0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 201f8c4:	e0fffd03 	ldbu	r3,-12(fp)
 201f8c8:	d0a7b344 	addi	r2,gp,-24883
 201f8cc:	1885883a 	add	r2,r3,r2
 201f8d0:	10800003 	ldbu	r2,0(r2)
 201f8d4:	10803fcc 	andi	r2,r2,255
 201f8d8:	1000071e 	bne	r2,zero,201f8f8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 201f8dc:	e0bffa17 	ldw	r2,-24(fp)
 201f8e0:	10800d83 	ldbu	r2,54(r2)
 201f8e4:	0084303a 	nor	r2,zero,r2
 201f8e8:	1007883a 	mov	r3,r2
 201f8ec:	d0a7b303 	ldbu	r2,-24884(gp)
 201f8f0:	1884703a 	and	r2,r3,r2
 201f8f4:	d0a7b305 	stb	r2,-24884(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201f8f8:	e0bffa17 	ldw	r2,-24(fp)
 201f8fc:	10800c03 	ldbu	r2,48(r2)
 201f900:	10800214 	ori	r2,r2,8
 201f904:	1007883a 	mov	r3,r2
 201f908:	e0bffa17 	ldw	r2,-24(fp)
 201f90c:	10c00c05 	stb	r3,48(r2)
 201f910:	e0bff817 	ldw	r2,-32(fp)
 201f914:	e0bffc15 	stw	r2,-16(fp)
 201f918:	e0bffc17 	ldw	r2,-16(fp)
 201f91c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 201f920:	e0bff703 	ldbu	r2,-36(fp)
 201f924:	10800058 	cmpnei	r2,r2,1
 201f928:	1000011e 	bne	r2,zero,201f930 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 201f92c:	20196780 	call	2019678 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201f930:	0005883a 	mov	r2,zero
}
 201f934:	e037883a 	mov	sp,fp
 201f938:	dfc00117 	ldw	ra,4(sp)
 201f93c:	df000017 	ldw	fp,0(sp)
 201f940:	dec00204 	addi	sp,sp,8
 201f944:	f800283a 	ret

0201f948 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 201f948:	defff604 	addi	sp,sp,-40
 201f94c:	dfc00915 	stw	ra,36(sp)
 201f950:	df000815 	stw	fp,32(sp)
 201f954:	df000804 	addi	fp,sp,32
 201f958:	2005883a 	mov	r2,r4
 201f95c:	e17fff15 	stw	r5,-4(fp)
 201f960:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201f964:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 201f968:	e0bffe03 	ldbu	r2,-8(fp)
 201f96c:	10800570 	cmpltui	r2,r2,21
 201f970:	1000051e 	bne	r2,zero,201f988 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201f974:	e0bffe03 	ldbu	r2,-8(fp)
 201f978:	10803fe0 	cmpeqi	r2,r2,255
 201f97c:	1000021e 	bne	r2,zero,201f988 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 201f980:	00800a84 	movi	r2,42
 201f984:	00003406 	br	201fa58 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 201f988:	e0bfff17 	ldw	r2,-4(fp)
 201f98c:	1000021e 	bne	r2,zero,201f998 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 201f990:	00800244 	movi	r2,9
 201f994:	00003006 	br	201fa58 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f998:	0005303a 	rdctl	r2,status
 201f99c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f9a0:	e0fffd17 	ldw	r3,-12(fp)
 201f9a4:	00bfff84 	movi	r2,-2
 201f9a8:	1884703a 	and	r2,r3,r2
 201f9ac:	1001703a 	wrctl	status,r2
  
  return context;
 201f9b0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201f9b4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201f9b8:	e0bffe03 	ldbu	r2,-8(fp)
 201f9bc:	10803fd8 	cmpnei	r2,r2,255
 201f9c0:	1000031e 	bne	r2,zero,201f9d0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 201f9c4:	d0a7b617 	ldw	r2,-24872(gp)
 201f9c8:	10800c83 	ldbu	r2,50(r2)
 201f9cc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201f9d0:	e0fffe03 	ldbu	r3,-8(fp)
 201f9d4:	008080f4 	movhi	r2,515
 201f9d8:	10883704 	addi	r2,r2,8412
 201f9dc:	18c7883a 	add	r3,r3,r3
 201f9e0:	18c7883a 	add	r3,r3,r3
 201f9e4:	10c5883a 	add	r2,r2,r3
 201f9e8:	10800017 	ldw	r2,0(r2)
 201f9ec:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201f9f0:	e0bffa17 	ldw	r2,-24(fp)
 201f9f4:	1000061e 	bne	r2,zero,201fa10 <OSTaskQuery+0xc8>
 201f9f8:	e0bff817 	ldw	r2,-32(fp)
 201f9fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201fa00:	e0bff917 	ldw	r2,-28(fp)
 201fa04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201fa08:	00800a44 	movi	r2,41
 201fa0c:	00001206 	br	201fa58 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 201fa10:	e0bffa17 	ldw	r2,-24(fp)
 201fa14:	10800058 	cmpnei	r2,r2,1
 201fa18:	1000061e 	bne	r2,zero,201fa34 <OSTaskQuery+0xec>
 201fa1c:	e0bff817 	ldw	r2,-32(fp)
 201fa20:	e0bffb15 	stw	r2,-20(fp)
 201fa24:	e0bffb17 	ldw	r2,-20(fp)
 201fa28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201fa2c:	008010c4 	movi	r2,67
 201fa30:	00000906 	br	201fa58 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201fa34:	01801b04 	movi	r6,108
 201fa38:	e17ffa17 	ldw	r5,-24(fp)
 201fa3c:	e13fff17 	ldw	r4,-4(fp)
 201fa40:	20196100 	call	2019610 <OS_MemCopy>
 201fa44:	e0bff817 	ldw	r2,-32(fp)
 201fa48:	e0bffc15 	stw	r2,-16(fp)
 201fa4c:	e0bffc17 	ldw	r2,-16(fp)
 201fa50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201fa54:	0005883a 	mov	r2,zero
}
 201fa58:	e037883a 	mov	sp,fp
 201fa5c:	dfc00117 	ldw	ra,4(sp)
 201fa60:	df000017 	ldw	fp,0(sp)
 201fa64:	dec00204 	addi	sp,sp,8
 201fa68:	f800283a 	ret

0201fa6c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 201fa6c:	defffc04 	addi	sp,sp,-16
 201fa70:	df000315 	stw	fp,12(sp)
 201fa74:	df000304 	addi	fp,sp,12
 201fa78:	e13ffd15 	stw	r4,-12(fp)
 201fa7c:	e17ffe15 	stw	r5,-8(fp)
 201fa80:	3005883a 	mov	r2,r6
 201fa84:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 201fa88:	e0bfff0b 	ldhu	r2,-4(fp)
 201fa8c:	1080004c 	andi	r2,r2,1
 201fa90:	10000d26 	beq	r2,zero,201fac8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201fa94:	e0bfff0b 	ldhu	r2,-4(fp)
 201fa98:	1080008c 	andi	r2,r2,2
 201fa9c:	10000a26 	beq	r2,zero,201fac8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201faa0:	00000706 	br	201fac0 <OS_TaskStkClr+0x54>
                size--;
 201faa4:	e0bffe17 	ldw	r2,-8(fp)
 201faa8:	10bfffc4 	addi	r2,r2,-1
 201faac:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 201fab0:	e0bffd17 	ldw	r2,-12(fp)
 201fab4:	10c00104 	addi	r3,r2,4
 201fab8:	e0fffd15 	stw	r3,-12(fp)
 201fabc:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201fac0:	e0bffe17 	ldw	r2,-8(fp)
 201fac4:	103ff71e 	bne	r2,zero,201faa4 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 201fac8:	0001883a 	nop
 201facc:	e037883a 	mov	sp,fp
 201fad0:	df000017 	ldw	fp,0(sp)
 201fad4:	dec00104 	addi	sp,sp,4
 201fad8:	f800283a 	ret

0201fadc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 201fadc:	defff904 	addi	sp,sp,-28
 201fae0:	dfc00615 	stw	ra,24(sp)
 201fae4:	df000515 	stw	fp,20(sp)
 201fae8:	df000504 	addi	fp,sp,20
 201faec:	2005883a 	mov	r2,r4
 201faf0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201faf4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201faf8:	d0a7b503 	ldbu	r2,-24876(gp)
 201fafc:	10803fcc 	andi	r2,r2,255
 201fb00:	1000311e 	bne	r2,zero,201fbc8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 201fb04:	e0bfff0b 	ldhu	r2,-4(fp)
 201fb08:	10003026 	beq	r2,zero,201fbcc <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201fb0c:	0005303a 	rdctl	r2,status
 201fb10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201fb14:	e0fffe17 	ldw	r3,-8(fp)
 201fb18:	00bfff84 	movi	r2,-2
 201fb1c:	1884703a 	and	r2,r3,r2
 201fb20:	1001703a 	wrctl	status,r2
  
  return context;
 201fb24:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201fb28:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201fb2c:	d0a7b617 	ldw	r2,-24872(gp)
 201fb30:	10800d03 	ldbu	r2,52(r2)
 201fb34:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201fb38:	e0fffd03 	ldbu	r3,-12(fp)
 201fb3c:	e13ffd03 	ldbu	r4,-12(fp)
 201fb40:	d0a7b344 	addi	r2,gp,-24883
 201fb44:	2085883a 	add	r2,r4,r2
 201fb48:	10800003 	ldbu	r2,0(r2)
 201fb4c:	1009883a 	mov	r4,r2
 201fb50:	d0a7b617 	ldw	r2,-24872(gp)
 201fb54:	10800d43 	ldbu	r2,53(r2)
 201fb58:	0084303a 	nor	r2,zero,r2
 201fb5c:	2084703a 	and	r2,r4,r2
 201fb60:	1009883a 	mov	r4,r2
 201fb64:	d0a7b344 	addi	r2,gp,-24883
 201fb68:	1885883a 	add	r2,r3,r2
 201fb6c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 201fb70:	e0fffd03 	ldbu	r3,-12(fp)
 201fb74:	d0a7b344 	addi	r2,gp,-24883
 201fb78:	1885883a 	add	r2,r3,r2
 201fb7c:	10800003 	ldbu	r2,0(r2)
 201fb80:	10803fcc 	andi	r2,r2,255
 201fb84:	1000071e 	bne	r2,zero,201fba4 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201fb88:	d0a7b617 	ldw	r2,-24872(gp)
 201fb8c:	10800d83 	ldbu	r2,54(r2)
 201fb90:	0084303a 	nor	r2,zero,r2
 201fb94:	1007883a 	mov	r3,r2
 201fb98:	d0a7b303 	ldbu	r2,-24884(gp)
 201fb9c:	1884703a 	and	r2,r3,r2
 201fba0:	d0a7b305 	stb	r2,-24884(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201fba4:	d0a7b617 	ldw	r2,-24872(gp)
 201fba8:	e0ffff0b 	ldhu	r3,-4(fp)
 201fbac:	10c00b8d 	sth	r3,46(r2)
 201fbb0:	e0bffb17 	ldw	r2,-20(fp)
 201fbb4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201fbb8:	e0bffc17 	ldw	r2,-16(fp)
 201fbbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 201fbc0:	20196780 	call	2019678 <OS_Sched>
 201fbc4:	00000106 	br	201fbcc <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 201fbc8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 201fbcc:	e037883a 	mov	sp,fp
 201fbd0:	dfc00117 	ldw	ra,4(sp)
 201fbd4:	df000017 	ldw	fp,0(sp)
 201fbd8:	dec00204 	addi	sp,sp,8
 201fbdc:	f800283a 	ret

0201fbe0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 201fbe0:	defff704 	addi	sp,sp,-36
 201fbe4:	dfc00815 	stw	ra,32(sp)
 201fbe8:	df000715 	stw	fp,28(sp)
 201fbec:	dc000615 	stw	r16,24(sp)
 201fbf0:	df000704 	addi	fp,sp,28
 201fbf4:	2011883a 	mov	r8,r4
 201fbf8:	2809883a 	mov	r4,r5
 201fbfc:	3007883a 	mov	r3,r6
 201fc00:	3805883a 	mov	r2,r7
 201fc04:	e23ffb05 	stb	r8,-20(fp)
 201fc08:	e13ffc05 	stb	r4,-16(fp)
 201fc0c:	e0fffd05 	stb	r3,-12(fp)
 201fc10:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201fc14:	d0a7b503 	ldbu	r2,-24876(gp)
 201fc18:	10803fcc 	andi	r2,r2,255
 201fc1c:	10000226 	beq	r2,zero,201fc28 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 201fc20:	00801544 	movi	r2,85
 201fc24:	00003d06 	br	201fd1c <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 201fc28:	e0bffb03 	ldbu	r2,-20(fp)
 201fc2c:	1000081e 	bne	r2,zero,201fc50 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 201fc30:	e0bffc03 	ldbu	r2,-16(fp)
 201fc34:	1000061e 	bne	r2,zero,201fc50 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 201fc38:	e0bffd03 	ldbu	r2,-12(fp)
 201fc3c:	1000041e 	bne	r2,zero,201fc50 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 201fc40:	e0bffe0b 	ldhu	r2,-8(fp)
 201fc44:	1000021e 	bne	r2,zero,201fc50 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 201fc48:	00801504 	movi	r2,84
 201fc4c:	00003306 	br	201fd1c <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 201fc50:	e0bffc03 	ldbu	r2,-16(fp)
 201fc54:	10800f30 	cmpltui	r2,r2,60
 201fc58:	1000021e 	bne	r2,zero,201fc64 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 201fc5c:	00801444 	movi	r2,81
 201fc60:	00002e06 	br	201fd1c <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 201fc64:	e0bffd03 	ldbu	r2,-12(fp)
 201fc68:	10800f30 	cmpltui	r2,r2,60
 201fc6c:	1000021e 	bne	r2,zero,201fc78 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 201fc70:	00801484 	movi	r2,82
 201fc74:	00002906 	br	201fd1c <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 201fc78:	e0bffe0b 	ldhu	r2,-8(fp)
 201fc7c:	1080fa30 	cmpltui	r2,r2,1000
 201fc80:	1000021e 	bne	r2,zero,201fc8c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 201fc84:	008014c4 	movi	r2,83
 201fc88:	00002406 	br	201fd1c <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201fc8c:	e0bffb03 	ldbu	r2,-20(fp)
 201fc90:	10c38424 	muli	r3,r2,3600
 201fc94:	e0bffc03 	ldbu	r2,-16(fp)
 201fc98:	10800f24 	muli	r2,r2,60
 201fc9c:	1887883a 	add	r3,r3,r2
 201fca0:	e0bffd03 	ldbu	r2,-12(fp)
 201fca4:	1885883a 	add	r2,r3,r2
 201fca8:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 201fcac:	e0bffe0b 	ldhu	r2,-8(fp)
 201fcb0:	1080fa24 	muli	r2,r2,1000
 201fcb4:	0140fa04 	movi	r5,1000
 201fcb8:	1009883a 	mov	r4,r2
 201fcbc:	20074880 	call	2007488 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201fcc0:	8085883a 	add	r2,r16,r2
 201fcc4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 201fcc8:	e0bffa17 	ldw	r2,-24(fp)
 201fccc:	1004d43a 	srli	r2,r2,16
 201fcd0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 201fcd4:	e0bffa17 	ldw	r2,-24(fp)
 201fcd8:	10bfffcc 	andi	r2,r2,65535
 201fcdc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 201fce0:	e0bffa17 	ldw	r2,-24(fp)
 201fce4:	10bfffcc 	andi	r2,r2,65535
 201fce8:	1009883a 	mov	r4,r2
 201fcec:	201fadc0 	call	201fadc <OSTimeDly>
    while (loops > 0) {
 201fcf0:	00000706 	br	201fd10 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 201fcf4:	01200014 	movui	r4,32768
 201fcf8:	201fadc0 	call	201fadc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201fcfc:	01200014 	movui	r4,32768
 201fd00:	201fadc0 	call	201fadc <OSTimeDly>
        loops--;
 201fd04:	e0bff90b 	ldhu	r2,-28(fp)
 201fd08:	10bfffc4 	addi	r2,r2,-1
 201fd0c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 201fd10:	e0bff90b 	ldhu	r2,-28(fp)
 201fd14:	103ff71e 	bne	r2,zero,201fcf4 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 201fd18:	0005883a 	mov	r2,zero
}
 201fd1c:	e6ffff04 	addi	sp,fp,-4
 201fd20:	dfc00217 	ldw	ra,8(sp)
 201fd24:	df000117 	ldw	fp,4(sp)
 201fd28:	dc000017 	ldw	r16,0(sp)
 201fd2c:	dec00304 	addi	sp,sp,12
 201fd30:	f800283a 	ret

0201fd34 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 201fd34:	defff504 	addi	sp,sp,-44
 201fd38:	dfc00a15 	stw	ra,40(sp)
 201fd3c:	df000915 	stw	fp,36(sp)
 201fd40:	df000904 	addi	fp,sp,36
 201fd44:	2005883a 	mov	r2,r4
 201fd48:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201fd4c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 201fd50:	e0bfff03 	ldbu	r2,-4(fp)
 201fd54:	10800530 	cmpltui	r2,r2,20
 201fd58:	1000021e 	bne	r2,zero,201fd64 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201fd5c:	00800a84 	movi	r2,42
 201fd60:	00006406 	br	201fef4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201fd64:	0005303a 	rdctl	r2,status
 201fd68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201fd6c:	e0fffe17 	ldw	r3,-8(fp)
 201fd70:	00bfff84 	movi	r2,-2
 201fd74:	1884703a 	and	r2,r3,r2
 201fd78:	1001703a 	wrctl	status,r2
  
  return context;
 201fd7c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201fd80:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 201fd84:	e0ffff03 	ldbu	r3,-4(fp)
 201fd88:	008080f4 	movhi	r2,515
 201fd8c:	10883704 	addi	r2,r2,8412
 201fd90:	18c7883a 	add	r3,r3,r3
 201fd94:	18c7883a 	add	r3,r3,r3
 201fd98:	10c5883a 	add	r2,r2,r3
 201fd9c:	10800017 	ldw	r2,0(r2)
 201fda0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 201fda4:	e0bff917 	ldw	r2,-28(fp)
 201fda8:	1000061e 	bne	r2,zero,201fdc4 <OSTimeDlyResume+0x90>
 201fdac:	e0bff717 	ldw	r2,-36(fp)
 201fdb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201fdb4:	e0bff817 	ldw	r2,-32(fp)
 201fdb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201fdbc:	008010c4 	movi	r2,67
 201fdc0:	00004c06 	br	201fef4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201fdc4:	e0bff917 	ldw	r2,-28(fp)
 201fdc8:	10800058 	cmpnei	r2,r2,1
 201fdcc:	1000061e 	bne	r2,zero,201fde8 <OSTimeDlyResume+0xb4>
 201fdd0:	e0bff717 	ldw	r2,-36(fp)
 201fdd4:	e0bffa15 	stw	r2,-24(fp)
 201fdd8:	e0bffa17 	ldw	r2,-24(fp)
 201fddc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201fde0:	008010c4 	movi	r2,67
 201fde4:	00004306 	br	201fef4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 201fde8:	e0bff917 	ldw	r2,-28(fp)
 201fdec:	10800b8b 	ldhu	r2,46(r2)
 201fdf0:	10bfffcc 	andi	r2,r2,65535
 201fdf4:	1000061e 	bne	r2,zero,201fe10 <OSTimeDlyResume+0xdc>
 201fdf8:	e0bff717 	ldw	r2,-36(fp)
 201fdfc:	e0bffb15 	stw	r2,-20(fp)
 201fe00:	e0bffb17 	ldw	r2,-20(fp)
 201fe04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 201fe08:	00801404 	movi	r2,80
 201fe0c:	00003906 	br	201fef4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 201fe10:	e0bff917 	ldw	r2,-28(fp)
 201fe14:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 201fe18:	e0bff917 	ldw	r2,-28(fp)
 201fe1c:	10800c03 	ldbu	r2,48(r2)
 201fe20:	10803fcc 	andi	r2,r2,255
 201fe24:	10800dcc 	andi	r2,r2,55
 201fe28:	10000b26 	beq	r2,zero,201fe58 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201fe2c:	e0bff917 	ldw	r2,-28(fp)
 201fe30:	10c00c03 	ldbu	r3,48(r2)
 201fe34:	00bff204 	movi	r2,-56
 201fe38:	1884703a 	and	r2,r3,r2
 201fe3c:	1007883a 	mov	r3,r2
 201fe40:	e0bff917 	ldw	r2,-28(fp)
 201fe44:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201fe48:	e0bff917 	ldw	r2,-28(fp)
 201fe4c:	00c00044 	movi	r3,1
 201fe50:	10c00c45 	stb	r3,49(r2)
 201fe54:	00000206 	br	201fe60 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201fe58:	e0bff917 	ldw	r2,-28(fp)
 201fe5c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 201fe60:	e0bff917 	ldw	r2,-28(fp)
 201fe64:	10800c03 	ldbu	r2,48(r2)
 201fe68:	10803fcc 	andi	r2,r2,255
 201fe6c:	1080020c 	andi	r2,r2,8
 201fe70:	10001b1e 	bne	r2,zero,201fee0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201fe74:	e0bff917 	ldw	r2,-28(fp)
 201fe78:	10c00d83 	ldbu	r3,54(r2)
 201fe7c:	d0a7b303 	ldbu	r2,-24884(gp)
 201fe80:	1884b03a 	or	r2,r3,r2
 201fe84:	d0a7b305 	stb	r2,-24884(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201fe88:	e0bff917 	ldw	r2,-28(fp)
 201fe8c:	10800d03 	ldbu	r2,52(r2)
 201fe90:	10c03fcc 	andi	r3,r2,255
 201fe94:	e0bff917 	ldw	r2,-28(fp)
 201fe98:	10800d03 	ldbu	r2,52(r2)
 201fe9c:	11003fcc 	andi	r4,r2,255
 201fea0:	d0a7b344 	addi	r2,gp,-24883
 201fea4:	2085883a 	add	r2,r4,r2
 201fea8:	11000003 	ldbu	r4,0(r2)
 201feac:	e0bff917 	ldw	r2,-28(fp)
 201feb0:	10800d43 	ldbu	r2,53(r2)
 201feb4:	2084b03a 	or	r2,r4,r2
 201feb8:	1009883a 	mov	r4,r2
 201febc:	d0a7b344 	addi	r2,gp,-24883
 201fec0:	1885883a 	add	r2,r3,r2
 201fec4:	11000005 	stb	r4,0(r2)
 201fec8:	e0bff717 	ldw	r2,-36(fp)
 201fecc:	e0bffc15 	stw	r2,-16(fp)
 201fed0:	e0bffc17 	ldw	r2,-16(fp)
 201fed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201fed8:	20196780 	call	2019678 <OS_Sched>
 201fedc:	00000406 	br	201fef0 <OSTimeDlyResume+0x1bc>
 201fee0:	e0bff717 	ldw	r2,-36(fp)
 201fee4:	e0bffd15 	stw	r2,-12(fp)
 201fee8:	e0bffd17 	ldw	r2,-12(fp)
 201feec:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201fef0:	0005883a 	mov	r2,zero
}
 201fef4:	e037883a 	mov	sp,fp
 201fef8:	dfc00117 	ldw	ra,4(sp)
 201fefc:	df000017 	ldw	fp,0(sp)
 201ff00:	dec00204 	addi	sp,sp,8
 201ff04:	f800283a 	ret

0201ff08 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201ff08:	defffb04 	addi	sp,sp,-20
 201ff0c:	df000415 	stw	fp,16(sp)
 201ff10:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201ff14:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ff18:	0005303a 	rdctl	r2,status
 201ff1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ff20:	e0fffe17 	ldw	r3,-8(fp)
 201ff24:	00bfff84 	movi	r2,-2
 201ff28:	1884703a 	and	r2,r3,r2
 201ff2c:	1001703a 	wrctl	status,r2
  
  return context;
 201ff30:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201ff34:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 201ff38:	d0a7b717 	ldw	r2,-24868(gp)
 201ff3c:	e0bffd15 	stw	r2,-12(fp)
 201ff40:	e0bffc17 	ldw	r2,-16(fp)
 201ff44:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ff48:	e0bfff17 	ldw	r2,-4(fp)
 201ff4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201ff50:	e0bffd17 	ldw	r2,-12(fp)
}
 201ff54:	e037883a 	mov	sp,fp
 201ff58:	df000017 	ldw	fp,0(sp)
 201ff5c:	dec00104 	addi	sp,sp,4
 201ff60:	f800283a 	ret

0201ff64 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201ff64:	defffb04 	addi	sp,sp,-20
 201ff68:	df000415 	stw	fp,16(sp)
 201ff6c:	df000404 	addi	fp,sp,16
 201ff70:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201ff74:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ff78:	0005303a 	rdctl	r2,status
 201ff7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ff80:	e0fffd17 	ldw	r3,-12(fp)
 201ff84:	00bfff84 	movi	r2,-2
 201ff88:	1884703a 	and	r2,r3,r2
 201ff8c:	1001703a 	wrctl	status,r2
  
  return context;
 201ff90:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201ff94:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 201ff98:	e0bfff17 	ldw	r2,-4(fp)
 201ff9c:	d0a7b715 	stw	r2,-24868(gp)
 201ffa0:	e0bffc17 	ldw	r2,-16(fp)
 201ffa4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ffa8:	e0bffe17 	ldw	r2,-8(fp)
 201ffac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201ffb0:	0001883a 	nop
 201ffb4:	e037883a 	mov	sp,fp
 201ffb8:	df000017 	ldw	fp,0(sp)
 201ffbc:	dec00104 	addi	sp,sp,4
 201ffc0:	f800283a 	ret

0201ffc4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201ffc4:	defffd04 	addi	sp,sp,-12
 201ffc8:	dfc00215 	stw	ra,8(sp)
 201ffcc:	df000115 	stw	fp,4(sp)
 201ffd0:	df000104 	addi	fp,sp,4
 201ffd4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201ffd8:	d1603804 	addi	r5,gp,-32544
 201ffdc:	e13fff17 	ldw	r4,-4(fp)
 201ffe0:	20214100 	call	2021410 <alt_dev_llist_insert>
}
 201ffe4:	e037883a 	mov	sp,fp
 201ffe8:	dfc00117 	ldw	ra,4(sp)
 201ffec:	df000017 	ldw	fp,0(sp)
 201fff0:	dec00204 	addi	sp,sp,8
 201fff4:	f800283a 	ret

0201fff8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201fff8:	defffd04 	addi	sp,sp,-12
 201fffc:	dfc00215 	stw	ra,8(sp)
 2020000:	df000115 	stw	fp,4(sp)
 2020004:	df000104 	addi	fp,sp,4
 2020008:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 202000c:	2021cf00 	call	2021cf0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2020010:	00800044 	movi	r2,1
 2020014:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2020018:	0001883a 	nop
 202001c:	e037883a 	mov	sp,fp
 2020020:	dfc00117 	ldw	ra,4(sp)
 2020024:	df000017 	ldw	fp,0(sp)
 2020028:	dec00204 	addi	sp,sp,8
 202002c:	f800283a 	ret

02020030 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2020030:	defffe04 	addi	sp,sp,-8
 2020034:	dfc00115 	stw	ra,4(sp)
 2020038:	df000015 	stw	fp,0(sp)
 202003c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 2020040:	01c0fa04 	movi	r7,1000
 2020044:	01800044 	movi	r6,1
 2020048:	000b883a 	mov	r5,zero
 202004c:	0009883a 	mov	r4,zero
 2020050:	2020e3c0 	call	2020e3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2020054:	000d883a 	mov	r6,zero
 2020058:	000b883a 	mov	r5,zero
 202005c:	010080b4 	movhi	r4,514
 2020060:	210fdd04 	addi	r4,r4,16244
 2020064:	20202000 	call	2020200 <altera_avalon_jtag_uart_init>
 2020068:	010080b4 	movhi	r4,514
 202006c:	210fd304 	addi	r4,r4,16204
 2020070:	201ffc40 	call	201ffc4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 2020074:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
 2020078:	010080b4 	movhi	r4,514
 202007c:	2113ee04 	addi	r4,r4,20408
 2020080:	201ffc40 	call	201ffc4 <alt_dev_reg>
}
 2020084:	0001883a 	nop
 2020088:	e037883a 	mov	sp,fp
 202008c:	dfc00117 	ldw	ra,4(sp)
 2020090:	df000017 	ldw	fp,0(sp)
 2020094:	dec00204 	addi	sp,sp,8
 2020098:	f800283a 	ret

0202009c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 202009c:	defffa04 	addi	sp,sp,-24
 20200a0:	dfc00515 	stw	ra,20(sp)
 20200a4:	df000415 	stw	fp,16(sp)
 20200a8:	df000404 	addi	fp,sp,16
 20200ac:	e13ffd15 	stw	r4,-12(fp)
 20200b0:	e17ffe15 	stw	r5,-8(fp)
 20200b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20200b8:	e0bffd17 	ldw	r2,-12(fp)
 20200bc:	10800017 	ldw	r2,0(r2)
 20200c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20200c4:	e0bffc17 	ldw	r2,-16(fp)
 20200c8:	10c00a04 	addi	r3,r2,40
 20200cc:	e0bffd17 	ldw	r2,-12(fp)
 20200d0:	10800217 	ldw	r2,8(r2)
 20200d4:	100f883a 	mov	r7,r2
 20200d8:	e1bfff17 	ldw	r6,-4(fp)
 20200dc:	e17ffe17 	ldw	r5,-8(fp)
 20200e0:	1809883a 	mov	r4,r3
 20200e4:	20208400 	call	2020840 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20200e8:	e037883a 	mov	sp,fp
 20200ec:	dfc00117 	ldw	ra,4(sp)
 20200f0:	df000017 	ldw	fp,0(sp)
 20200f4:	dec00204 	addi	sp,sp,8
 20200f8:	f800283a 	ret

020200fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20200fc:	defffa04 	addi	sp,sp,-24
 2020100:	dfc00515 	stw	ra,20(sp)
 2020104:	df000415 	stw	fp,16(sp)
 2020108:	df000404 	addi	fp,sp,16
 202010c:	e13ffd15 	stw	r4,-12(fp)
 2020110:	e17ffe15 	stw	r5,-8(fp)
 2020114:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2020118:	e0bffd17 	ldw	r2,-12(fp)
 202011c:	10800017 	ldw	r2,0(r2)
 2020120:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2020124:	e0bffc17 	ldw	r2,-16(fp)
 2020128:	10c00a04 	addi	r3,r2,40
 202012c:	e0bffd17 	ldw	r2,-12(fp)
 2020130:	10800217 	ldw	r2,8(r2)
 2020134:	100f883a 	mov	r7,r2
 2020138:	e1bfff17 	ldw	r6,-4(fp)
 202013c:	e17ffe17 	ldw	r5,-8(fp)
 2020140:	1809883a 	mov	r4,r3
 2020144:	2020afc0 	call	2020afc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2020148:	e037883a 	mov	sp,fp
 202014c:	dfc00117 	ldw	ra,4(sp)
 2020150:	df000017 	ldw	fp,0(sp)
 2020154:	dec00204 	addi	sp,sp,8
 2020158:	f800283a 	ret

0202015c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 202015c:	defffc04 	addi	sp,sp,-16
 2020160:	dfc00315 	stw	ra,12(sp)
 2020164:	df000215 	stw	fp,8(sp)
 2020168:	df000204 	addi	fp,sp,8
 202016c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2020170:	e0bfff17 	ldw	r2,-4(fp)
 2020174:	10800017 	ldw	r2,0(r2)
 2020178:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 202017c:	e0bffe17 	ldw	r2,-8(fp)
 2020180:	10c00a04 	addi	r3,r2,40
 2020184:	e0bfff17 	ldw	r2,-4(fp)
 2020188:	10800217 	ldw	r2,8(r2)
 202018c:	100b883a 	mov	r5,r2
 2020190:	1809883a 	mov	r4,r3
 2020194:	20206e80 	call	20206e8 <altera_avalon_jtag_uart_close>
}
 2020198:	e037883a 	mov	sp,fp
 202019c:	dfc00117 	ldw	ra,4(sp)
 20201a0:	df000017 	ldw	fp,0(sp)
 20201a4:	dec00204 	addi	sp,sp,8
 20201a8:	f800283a 	ret

020201ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20201ac:	defffa04 	addi	sp,sp,-24
 20201b0:	dfc00515 	stw	ra,20(sp)
 20201b4:	df000415 	stw	fp,16(sp)
 20201b8:	df000404 	addi	fp,sp,16
 20201bc:	e13ffd15 	stw	r4,-12(fp)
 20201c0:	e17ffe15 	stw	r5,-8(fp)
 20201c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20201c8:	e0bffd17 	ldw	r2,-12(fp)
 20201cc:	10800017 	ldw	r2,0(r2)
 20201d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20201d4:	e0bffc17 	ldw	r2,-16(fp)
 20201d8:	10800a04 	addi	r2,r2,40
 20201dc:	e1bfff17 	ldw	r6,-4(fp)
 20201e0:	e17ffe17 	ldw	r5,-8(fp)
 20201e4:	1009883a 	mov	r4,r2
 20201e8:	20207500 	call	2020750 <altera_avalon_jtag_uart_ioctl>
}
 20201ec:	e037883a 	mov	sp,fp
 20201f0:	dfc00117 	ldw	ra,4(sp)
 20201f4:	df000017 	ldw	fp,0(sp)
 20201f8:	dec00204 	addi	sp,sp,8
 20201fc:	f800283a 	ret

02020200 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2020200:	defff204 	addi	sp,sp,-56
 2020204:	dfc00d15 	stw	ra,52(sp)
 2020208:	df000c15 	stw	fp,48(sp)
 202020c:	df000c04 	addi	fp,sp,48
 2020210:	e13ff915 	stw	r4,-28(fp)
 2020214:	e17ffa15 	stw	r5,-24(fp)
 2020218:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 202021c:	e0bff917 	ldw	r2,-28(fp)
 2020220:	10800c04 	addi	r2,r2,48
 2020224:	e0bff415 	stw	r2,-48(fp)
 2020228:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 202022c:	e0bff80b 	ldhu	r2,-32(fp)
 2020230:	e0fff884 	addi	r3,fp,-30
 2020234:	180b883a 	mov	r5,r3
 2020238:	1009883a 	mov	r4,r2
 202023c:	201a1e40 	call	201a1e4 <OSFlagCreate>
 2020240:	1007883a 	mov	r3,r2
 2020244:	e0bff417 	ldw	r2,-48(fp)
 2020248:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 202024c:	e0bff917 	ldw	r2,-28(fp)
 2020250:	10800a04 	addi	r2,r2,40
 2020254:	e0bff515 	stw	r2,-44(fp)
 2020258:	00800044 	movi	r2,1
 202025c:	e0bff78d 	sth	r2,-34(fp)
 2020260:	e0bff78b 	ldhu	r2,-34(fp)
 2020264:	1009883a 	mov	r4,r2
 2020268:	201d9c00 	call	201d9c0 <OSSemCreate>
 202026c:	1007883a 	mov	r3,r2
 2020270:	e0bff517 	ldw	r2,-44(fp)
 2020274:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 2020278:	e0bff917 	ldw	r2,-28(fp)
 202027c:	10800b04 	addi	r2,r2,44
 2020280:	e0bff615 	stw	r2,-40(fp)
 2020284:	00800044 	movi	r2,1
 2020288:	e0bff70d 	sth	r2,-36(fp)
 202028c:	e0bff70b 	ldhu	r2,-36(fp)
 2020290:	1009883a 	mov	r4,r2
 2020294:	201d9c00 	call	201d9c0 <OSSemCreate>
 2020298:	1007883a 	mov	r3,r2
 202029c:	e0bff617 	ldw	r2,-40(fp)
 20202a0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20202a4:	e0bff917 	ldw	r2,-28(fp)
 20202a8:	00c00044 	movi	r3,1
 20202ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20202b0:	e0bff917 	ldw	r2,-28(fp)
 20202b4:	10800017 	ldw	r2,0(r2)
 20202b8:	10800104 	addi	r2,r2,4
 20202bc:	1007883a 	mov	r3,r2
 20202c0:	e0bff917 	ldw	r2,-28(fp)
 20202c4:	10800817 	ldw	r2,32(r2)
 20202c8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 20202cc:	e0bffb17 	ldw	r2,-20(fp)
 20202d0:	018080b4 	movhi	r6,514
 20202d4:	3180cf04 	addi	r6,r6,828
 20202d8:	e17ff917 	ldw	r5,-28(fp)
 20202dc:	1009883a 	mov	r4,r2
 20202e0:	20217780 	call	2021778 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 20202e4:	e0bff917 	ldw	r2,-28(fp)
 20202e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 20202ec:	e0bff917 	ldw	r2,-28(fp)
 20202f0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20202f4:	d0e7bc17 	ldw	r3,-24848(gp)
 20202f8:	e1fff917 	ldw	r7,-28(fp)
 20202fc:	018080b4 	movhi	r6,514
 2020300:	31817904 	addi	r6,r6,1508
 2020304:	180b883a 	mov	r5,r3
 2020308:	1009883a 	mov	r4,r2
 202030c:	20212600 	call	2021260 <alt_alarm_start>
 2020310:	1000040e 	bge	r2,zero,2020324 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2020314:	e0fff917 	ldw	r3,-28(fp)
 2020318:	00a00034 	movhi	r2,32768
 202031c:	10bfffc4 	addi	r2,r2,-1
 2020320:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2020324:	0001883a 	nop
 2020328:	e037883a 	mov	sp,fp
 202032c:	dfc00117 	ldw	ra,4(sp)
 2020330:	df000017 	ldw	fp,0(sp)
 2020334:	dec00204 	addi	sp,sp,8
 2020338:	f800283a 	ret

0202033c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 202033c:	defff104 	addi	sp,sp,-60
 2020340:	dfc00e15 	stw	ra,56(sp)
 2020344:	df000d15 	stw	fp,52(sp)
 2020348:	df000d04 	addi	fp,sp,52
 202034c:	e13ffe15 	stw	r4,-8(fp)
 2020350:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2020354:	e0bffe17 	ldw	r2,-8(fp)
 2020358:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
 202035c:	e0bff517 	ldw	r2,-44(fp)
 2020360:	10800017 	ldw	r2,0(r2)
 2020364:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2020368:	e0bff617 	ldw	r2,-40(fp)
 202036c:	10800104 	addi	r2,r2,4
 2020370:	10800037 	ldwio	r2,0(r2)
 2020374:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2020378:	e0bff717 	ldw	r2,-36(fp)
 202037c:	1080c00c 	andi	r2,r2,768
 2020380:	10009126 	beq	r2,zero,20205c8 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2020384:	e0bff717 	ldw	r2,-36(fp)
 2020388:	1080400c 	andi	r2,r2,256
 202038c:	10004726 	beq	r2,zero,20204ac <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2020390:	00800074 	movhi	r2,1
 2020394:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2020398:	e0bff517 	ldw	r2,-44(fp)
 202039c:	10800d17 	ldw	r2,52(r2)
 20203a0:	10800044 	addi	r2,r2,1
 20203a4:	1081ffcc 	andi	r2,r2,2047
 20203a8:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 20203ac:	e0bff517 	ldw	r2,-44(fp)
 20203b0:	10c00e17 	ldw	r3,56(r2)
 20203b4:	e0bff817 	ldw	r2,-32(fp)
 20203b8:	18802726 	beq	r3,r2,2020458 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20203bc:	e0bff617 	ldw	r2,-40(fp)
 20203c0:	10800037 	ldwio	r2,0(r2)
 20203c4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 20203c8:	e0bff317 	ldw	r2,-52(fp)
 20203cc:	10a0000c 	andi	r2,r2,32768
 20203d0:	10002326 	beq	r2,zero,2020460 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 20203d4:	e0bff517 	ldw	r2,-44(fp)
 20203d8:	10800d17 	ldw	r2,52(r2)
 20203dc:	e0fff317 	ldw	r3,-52(fp)
 20203e0:	1809883a 	mov	r4,r3
 20203e4:	e0fff517 	ldw	r3,-44(fp)
 20203e8:	1885883a 	add	r2,r3,r2
 20203ec:	10801104 	addi	r2,r2,68
 20203f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20203f4:	e0bff517 	ldw	r2,-44(fp)
 20203f8:	10800d17 	ldw	r2,52(r2)
 20203fc:	10800044 	addi	r2,r2,1
 2020400:	10c1ffcc 	andi	r3,r2,2047
 2020404:	e0bff517 	ldw	r2,-44(fp)
 2020408:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 202040c:	e0bff517 	ldw	r2,-44(fp)
 2020410:	10800c17 	ldw	r2,48(r2)
 2020414:	e0bffa15 	stw	r2,-24(fp)
 2020418:	00800044 	movi	r2,1
 202041c:	e0bffb0d 	sth	r2,-20(fp)
 2020420:	00800044 	movi	r2,1
 2020424:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2020428:	d0a7a743 	ldbu	r2,-24931(gp)
 202042c:	10803fcc 	andi	r2,r2,255
 2020430:	103fd926 	beq	r2,zero,2020398 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
 2020434:	e0bffb0b 	ldhu	r2,-20(fp)
 2020438:	e0fffb83 	ldbu	r3,-18(fp)
 202043c:	e13ffcc4 	addi	r4,fp,-13
 2020440:	200f883a 	mov	r7,r4
 2020444:	180d883a 	mov	r6,r3
 2020448:	100b883a 	mov	r5,r2
 202044c:	e13ffa17 	ldw	r4,-24(fp)
 2020450:	201adc00 	call	201adc0 <OSFlagPost>
      }
 2020454:	003fd006 	br	2020398 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2020458:	0001883a 	nop
 202045c:	00000106 	br	2020464 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2020460:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2020464:	e0bff317 	ldw	r2,-52(fp)
 2020468:	10bfffec 	andhi	r2,r2,65535
 202046c:	10000f26 	beq	r2,zero,20204ac <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2020470:	e0bff517 	ldw	r2,-44(fp)
 2020474:	10c00817 	ldw	r3,32(r2)
 2020478:	00bfff84 	movi	r2,-2
 202047c:	1886703a 	and	r3,r3,r2
 2020480:	e0bff517 	ldw	r2,-44(fp)
 2020484:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2020488:	e0bff617 	ldw	r2,-40(fp)
 202048c:	10800104 	addi	r2,r2,4
 2020490:	1007883a 	mov	r3,r2
 2020494:	e0bff517 	ldw	r2,-44(fp)
 2020498:	10800817 	ldw	r2,32(r2)
 202049c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20204a0:	e0bff617 	ldw	r2,-40(fp)
 20204a4:	10800104 	addi	r2,r2,4
 20204a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20204ac:	e0bff717 	ldw	r2,-36(fp)
 20204b0:	1080800c 	andi	r2,r2,512
 20204b4:	103fac26 	beq	r2,zero,2020368 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20204b8:	e0bff717 	ldw	r2,-36(fp)
 20204bc:	1004d43a 	srli	r2,r2,16
 20204c0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20204c4:	00002606 	br	2020560 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20204c8:	e0bff617 	ldw	r2,-40(fp)
 20204cc:	e0fff517 	ldw	r3,-44(fp)
 20204d0:	18c01017 	ldw	r3,64(r3)
 20204d4:	e13ff517 	ldw	r4,-44(fp)
 20204d8:	20c7883a 	add	r3,r4,r3
 20204dc:	18c21104 	addi	r3,r3,2116
 20204e0:	18c00003 	ldbu	r3,0(r3)
 20204e4:	18c03fcc 	andi	r3,r3,255
 20204e8:	18c0201c 	xori	r3,r3,128
 20204ec:	18ffe004 	addi	r3,r3,-128
 20204f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20204f4:	e0bff517 	ldw	r2,-44(fp)
 20204f8:	10801017 	ldw	r2,64(r2)
 20204fc:	10800044 	addi	r2,r2,1
 2020500:	10c1ffcc 	andi	r3,r2,2047
 2020504:	e0bff517 	ldw	r2,-44(fp)
 2020508:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 202050c:	e0bff517 	ldw	r2,-44(fp)
 2020510:	10800c17 	ldw	r2,48(r2)
 2020514:	e0bff915 	stw	r2,-28(fp)
 2020518:	00800084 	movi	r2,2
 202051c:	e0bffc0d 	sth	r2,-16(fp)
 2020520:	00800044 	movi	r2,1
 2020524:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2020528:	d0a7a743 	ldbu	r2,-24931(gp)
 202052c:	10803fcc 	andi	r2,r2,255
 2020530:	10000826 	beq	r2,zero,2020554 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
 2020534:	e0bffc0b 	ldhu	r2,-16(fp)
 2020538:	e0fffc83 	ldbu	r3,-14(fp)
 202053c:	e13ffd04 	addi	r4,fp,-12
 2020540:	200f883a 	mov	r7,r4
 2020544:	180d883a 	mov	r6,r3
 2020548:	100b883a 	mov	r5,r2
 202054c:	e13ff917 	ldw	r4,-28(fp)
 2020550:	201adc00 	call	201adc0 <OSFlagPost>

        space--;
 2020554:	e0bff417 	ldw	r2,-48(fp)
 2020558:	10bfffc4 	addi	r2,r2,-1
 202055c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2020560:	e0bff417 	ldw	r2,-48(fp)
 2020564:	10000526 	beq	r2,zero,202057c <altera_avalon_jtag_uart_irq+0x240>
 2020568:	e0bff517 	ldw	r2,-44(fp)
 202056c:	10c01017 	ldw	r3,64(r2)
 2020570:	e0bff517 	ldw	r2,-44(fp)
 2020574:	10800f17 	ldw	r2,60(r2)
 2020578:	18bfd31e 	bne	r3,r2,20204c8 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 202057c:	e0bff417 	ldw	r2,-48(fp)
 2020580:	103f7926 	beq	r2,zero,2020368 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2020584:	e0bff517 	ldw	r2,-44(fp)
 2020588:	10c00817 	ldw	r3,32(r2)
 202058c:	00bfff44 	movi	r2,-3
 2020590:	1886703a 	and	r3,r3,r2
 2020594:	e0bff517 	ldw	r2,-44(fp)
 2020598:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 202059c:	e0bff517 	ldw	r2,-44(fp)
 20205a0:	10800017 	ldw	r2,0(r2)
 20205a4:	10800104 	addi	r2,r2,4
 20205a8:	1007883a 	mov	r3,r2
 20205ac:	e0bff517 	ldw	r2,-44(fp)
 20205b0:	10800817 	ldw	r2,32(r2)
 20205b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20205b8:	e0bff617 	ldw	r2,-40(fp)
 20205bc:	10800104 	addi	r2,r2,4
 20205c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20205c4:	003f6806 	br	2020368 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 20205c8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 20205cc:	0001883a 	nop
 20205d0:	e037883a 	mov	sp,fp
 20205d4:	dfc00117 	ldw	ra,4(sp)
 20205d8:	df000017 	ldw	fp,0(sp)
 20205dc:	dec00204 	addi	sp,sp,8
 20205e0:	f800283a 	ret

020205e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20205e4:	defff904 	addi	sp,sp,-28
 20205e8:	dfc00615 	stw	ra,24(sp)
 20205ec:	df000515 	stw	fp,20(sp)
 20205f0:	df000504 	addi	fp,sp,20
 20205f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 20205f8:	e0bfff17 	ldw	r2,-4(fp)
 20205fc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2020600:	e0bffb17 	ldw	r2,-20(fp)
 2020604:	10800017 	ldw	r2,0(r2)
 2020608:	10800104 	addi	r2,r2,4
 202060c:	10800037 	ldwio	r2,0(r2)
 2020610:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2020614:	e0bffc17 	ldw	r2,-16(fp)
 2020618:	1081000c 	andi	r2,r2,1024
 202061c:	10000b26 	beq	r2,zero,202064c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2020620:	e0bffb17 	ldw	r2,-20(fp)
 2020624:	10800017 	ldw	r2,0(r2)
 2020628:	10800104 	addi	r2,r2,4
 202062c:	1007883a 	mov	r3,r2
 2020630:	e0bffb17 	ldw	r2,-20(fp)
 2020634:	10800817 	ldw	r2,32(r2)
 2020638:	10810014 	ori	r2,r2,1024
 202063c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2020640:	e0bffb17 	ldw	r2,-20(fp)
 2020644:	10000915 	stw	zero,36(r2)
 2020648:	00002106 	br	20206d0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 202064c:	e0bffb17 	ldw	r2,-20(fp)
 2020650:	10c00917 	ldw	r3,36(r2)
 2020654:	00a00034 	movhi	r2,32768
 2020658:	10bfff04 	addi	r2,r2,-4
 202065c:	10c01c36 	bltu	r2,r3,20206d0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 2020660:	e0bffb17 	ldw	r2,-20(fp)
 2020664:	10800917 	ldw	r2,36(r2)
 2020668:	10c00044 	addi	r3,r2,1
 202066c:	e0bffb17 	ldw	r2,-20(fp)
 2020670:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 2020674:	e0bffb17 	ldw	r2,-20(fp)
 2020678:	10c00917 	ldw	r3,36(r2)
 202067c:	e0bffb17 	ldw	r2,-20(fp)
 2020680:	10800117 	ldw	r2,4(r2)
 2020684:	18801236 	bltu	r3,r2,20206d0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 2020688:	e0bffb17 	ldw	r2,-20(fp)
 202068c:	10800c17 	ldw	r2,48(r2)
 2020690:	e0bffd15 	stw	r2,-12(fp)
 2020694:	00800104 	movi	r2,4
 2020698:	e0bffe0d 	sth	r2,-8(fp)
 202069c:	00800044 	movi	r2,1
 20206a0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 20206a4:	d0a7a743 	ldbu	r2,-24931(gp)
 20206a8:	10803fcc 	andi	r2,r2,255
 20206ac:	10000826 	beq	r2,zero,20206d0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 20206b0:	e0bffe0b 	ldhu	r2,-8(fp)
 20206b4:	e0fffe83 	ldbu	r3,-6(fp)
 20206b8:	e13ffec4 	addi	r4,fp,-5
 20206bc:	200f883a 	mov	r7,r4
 20206c0:	180d883a 	mov	r6,r3
 20206c4:	100b883a 	mov	r5,r2
 20206c8:	e13ffd17 	ldw	r4,-12(fp)
 20206cc:	201adc00 	call	201adc0 <OSFlagPost>
 20206d0:	d0a7bc17 	ldw	r2,-24848(gp)
    }
  }

  return alt_ticks_per_second();
}
 20206d4:	e037883a 	mov	sp,fp
 20206d8:	dfc00117 	ldw	ra,4(sp)
 20206dc:	df000017 	ldw	fp,0(sp)
 20206e0:	dec00204 	addi	sp,sp,8
 20206e4:	f800283a 	ret

020206e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 20206e8:	defffd04 	addi	sp,sp,-12
 20206ec:	df000215 	stw	fp,8(sp)
 20206f0:	df000204 	addi	fp,sp,8
 20206f4:	e13ffe15 	stw	r4,-8(fp)
 20206f8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20206fc:	00000506 	br	2020714 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2020700:	e0bfff17 	ldw	r2,-4(fp)
 2020704:	1090000c 	andi	r2,r2,16384
 2020708:	10000226 	beq	r2,zero,2020714 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 202070c:	00bffd44 	movi	r2,-11
 2020710:	00000b06 	br	2020740 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2020714:	e0bffe17 	ldw	r2,-8(fp)
 2020718:	10c01017 	ldw	r3,64(r2)
 202071c:	e0bffe17 	ldw	r2,-8(fp)
 2020720:	10800f17 	ldw	r2,60(r2)
 2020724:	18800526 	beq	r3,r2,202073c <altera_avalon_jtag_uart_close+0x54>
 2020728:	e0bffe17 	ldw	r2,-8(fp)
 202072c:	10c00917 	ldw	r3,36(r2)
 2020730:	e0bffe17 	ldw	r2,-8(fp)
 2020734:	10800117 	ldw	r2,4(r2)
 2020738:	18bff136 	bltu	r3,r2,2020700 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 202073c:	0005883a 	mov	r2,zero
}
 2020740:	e037883a 	mov	sp,fp
 2020744:	df000017 	ldw	fp,0(sp)
 2020748:	dec00104 	addi	sp,sp,4
 202074c:	f800283a 	ret

02020750 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2020750:	defffa04 	addi	sp,sp,-24
 2020754:	df000515 	stw	fp,20(sp)
 2020758:	df000504 	addi	fp,sp,20
 202075c:	e13ffd15 	stw	r4,-12(fp)
 2020760:	e17ffe15 	stw	r5,-8(fp)
 2020764:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2020768:	00bff9c4 	movi	r2,-25
 202076c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2020770:	e0bffe17 	ldw	r2,-8(fp)
 2020774:	10da8060 	cmpeqi	r3,r2,27137
 2020778:	1800031e 	bne	r3,zero,2020788 <altera_avalon_jtag_uart_ioctl+0x38>
 202077c:	109a80a0 	cmpeqi	r2,r2,27138
 2020780:	1000181e 	bne	r2,zero,20207e4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 2020784:	00002906 	br	202082c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2020788:	e0bffd17 	ldw	r2,-12(fp)
 202078c:	10c00117 	ldw	r3,4(r2)
 2020790:	00a00034 	movhi	r2,32768
 2020794:	10bfffc4 	addi	r2,r2,-1
 2020798:	18802126 	beq	r3,r2,2020820 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 202079c:	e0bfff17 	ldw	r2,-4(fp)
 20207a0:	10800017 	ldw	r2,0(r2)
 20207a4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 20207a8:	e0bffc17 	ldw	r2,-16(fp)
 20207ac:	10800090 	cmplti	r2,r2,2
 20207b0:	1000061e 	bne	r2,zero,20207cc <altera_avalon_jtag_uart_ioctl+0x7c>
 20207b4:	e0fffc17 	ldw	r3,-16(fp)
 20207b8:	00a00034 	movhi	r2,32768
 20207bc:	10bfffc4 	addi	r2,r2,-1
 20207c0:	18800226 	beq	r3,r2,20207cc <altera_avalon_jtag_uart_ioctl+0x7c>
 20207c4:	e0bffc17 	ldw	r2,-16(fp)
 20207c8:	00000206 	br	20207d4 <altera_avalon_jtag_uart_ioctl+0x84>
 20207cc:	00a00034 	movhi	r2,32768
 20207d0:	10bfff84 	addi	r2,r2,-2
 20207d4:	e0fffd17 	ldw	r3,-12(fp)
 20207d8:	18800115 	stw	r2,4(r3)
      rc = 0;
 20207dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 20207e0:	00000f06 	br	2020820 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 20207e4:	e0bffd17 	ldw	r2,-12(fp)
 20207e8:	10c00117 	ldw	r3,4(r2)
 20207ec:	00a00034 	movhi	r2,32768
 20207f0:	10bfffc4 	addi	r2,r2,-1
 20207f4:	18800c26 	beq	r3,r2,2020828 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 20207f8:	e0bffd17 	ldw	r2,-12(fp)
 20207fc:	10c00917 	ldw	r3,36(r2)
 2020800:	e0bffd17 	ldw	r2,-12(fp)
 2020804:	10800117 	ldw	r2,4(r2)
 2020808:	1885803a 	cmpltu	r2,r3,r2
 202080c:	10c03fcc 	andi	r3,r2,255
 2020810:	e0bfff17 	ldw	r2,-4(fp)
 2020814:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2020818:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 202081c:	00000206 	br	2020828 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2020820:	0001883a 	nop
 2020824:	00000106 	br	202082c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2020828:	0001883a 	nop

  default:
    break;
  }

  return rc;
 202082c:	e0bffb17 	ldw	r2,-20(fp)
}
 2020830:	e037883a 	mov	sp,fp
 2020834:	df000017 	ldw	fp,0(sp)
 2020838:	dec00104 	addi	sp,sp,4
 202083c:	f800283a 	ret

02020840 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2020840:	deffed04 	addi	sp,sp,-76
 2020844:	dfc01215 	stw	ra,72(sp)
 2020848:	df001115 	stw	fp,68(sp)
 202084c:	df001104 	addi	fp,sp,68
 2020850:	e13ffc15 	stw	r4,-16(fp)
 2020854:	e17ffd15 	stw	r5,-12(fp)
 2020858:	e1bffe15 	stw	r6,-8(fp)
 202085c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2020860:	e0bffd17 	ldw	r2,-12(fp)
 2020864:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 2020868:	e0bffc17 	ldw	r2,-16(fp)
 202086c:	10800a17 	ldw	r2,40(r2)
 2020870:	e0bff815 	stw	r2,-32(fp)
 2020874:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 2020878:	e0bff90b 	ldhu	r2,-28(fp)
 202087c:	e0fffb04 	addi	r3,fp,-20
 2020880:	180d883a 	mov	r6,r3
 2020884:	100b883a 	mov	r5,r2
 2020888:	e13ff817 	ldw	r4,-32(fp)
 202088c:	201dcd80 	call	201dcd8 <OSSemPend>

  while (space > 0)
 2020890:	00006106 	br	2020a18 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2020894:	e0bffc17 	ldw	r2,-16(fp)
 2020898:	10800d17 	ldw	r2,52(r2)
 202089c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 20208a0:	e0bffc17 	ldw	r2,-16(fp)
 20208a4:	10800e17 	ldw	r2,56(r2)
 20208a8:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 20208ac:	e0fff317 	ldw	r3,-52(fp)
 20208b0:	e0bff417 	ldw	r2,-48(fp)
 20208b4:	18800536 	bltu	r3,r2,20208cc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 20208b8:	e0fff317 	ldw	r3,-52(fp)
 20208bc:	e0bff417 	ldw	r2,-48(fp)
 20208c0:	1885c83a 	sub	r2,r3,r2
 20208c4:	e0bff115 	stw	r2,-60(fp)
 20208c8:	00000406 	br	20208dc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 20208cc:	00c20004 	movi	r3,2048
 20208d0:	e0bff417 	ldw	r2,-48(fp)
 20208d4:	1885c83a 	sub	r2,r3,r2
 20208d8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 20208dc:	e0bff117 	ldw	r2,-60(fp)
 20208e0:	10001e26 	beq	r2,zero,202095c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 20208e4:	e0fffe17 	ldw	r3,-8(fp)
 20208e8:	e0bff117 	ldw	r2,-60(fp)
 20208ec:	1880022e 	bgeu	r3,r2,20208f8 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 20208f0:	e0bffe17 	ldw	r2,-8(fp)
 20208f4:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 20208f8:	e0bffc17 	ldw	r2,-16(fp)
 20208fc:	10c01104 	addi	r3,r2,68
 2020900:	e0bff417 	ldw	r2,-48(fp)
 2020904:	1885883a 	add	r2,r3,r2
 2020908:	e1bff117 	ldw	r6,-60(fp)
 202090c:	100b883a 	mov	r5,r2
 2020910:	e13ff017 	ldw	r4,-64(fp)
 2020914:	2009c800 	call	2009c80 <memcpy>
      ptr   += n;
 2020918:	e0fff017 	ldw	r3,-64(fp)
 202091c:	e0bff117 	ldw	r2,-60(fp)
 2020920:	1885883a 	add	r2,r3,r2
 2020924:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 2020928:	e0fffe17 	ldw	r3,-8(fp)
 202092c:	e0bff117 	ldw	r2,-60(fp)
 2020930:	1885c83a 	sub	r2,r3,r2
 2020934:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2020938:	e0fff417 	ldw	r3,-48(fp)
 202093c:	e0bff117 	ldw	r2,-60(fp)
 2020940:	1885883a 	add	r2,r3,r2
 2020944:	10c1ffcc 	andi	r3,r2,2047
 2020948:	e0bffc17 	ldw	r2,-16(fp)
 202094c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 2020950:	e0bffe17 	ldw	r2,-8(fp)
 2020954:	00bfcf16 	blt	zero,r2,2020894 <altera_avalon_jtag_uart_read+0x54>
 2020958:	00000106 	br	2020960 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 202095c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2020960:	e0fff017 	ldw	r3,-64(fp)
 2020964:	e0bffd17 	ldw	r2,-12(fp)
 2020968:	18802e1e 	bne	r3,r2,2020a24 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 202096c:	e0bfff17 	ldw	r2,-4(fp)
 2020970:	1090000c 	andi	r2,r2,16384
 2020974:	10002d1e 	bne	r2,zero,2020a2c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 2020978:	d0a7a743 	ldbu	r2,-24931(gp)
 202097c:	10803fcc 	andi	r2,r2,255
 2020980:	10800058 	cmpnei	r2,r2,1
 2020984:	1000161e 	bne	r2,zero,20209e0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 2020988:	e0bffc17 	ldw	r2,-16(fp)
 202098c:	10800c17 	ldw	r2,48(r2)
 2020990:	e0bff215 	stw	r2,-56(fp)
 2020994:	00800144 	movi	r2,5
 2020998:	e0bff98d 	sth	r2,-26(fp)
 202099c:	00bfe0c4 	movi	r2,-125
 20209a0:	e0bffa05 	stb	r2,-24(fp)
 20209a4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 20209a8:	d0a7a743 	ldbu	r2,-24931(gp)
 20209ac:	10803fcc 	andi	r2,r2,255
 20209b0:	10001526 	beq	r2,zero,2020a08 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 20209b4:	e0fff98b 	ldhu	r3,-26(fp)
 20209b8:	e13ffa03 	ldbu	r4,-24(fp)
 20209bc:	e17ffa8b 	ldhu	r5,-22(fp)
 20209c0:	e0bffb44 	addi	r2,fp,-19
 20209c4:	d8800015 	stw	r2,0(sp)
 20209c8:	280f883a 	mov	r7,r5
 20209cc:	200d883a 	mov	r6,r4
 20209d0:	180b883a 	mov	r5,r3
 20209d4:	e13ff217 	ldw	r4,-56(fp)
 20209d8:	201a7a80 	call	201a7a8 <OSFlagPend>
 20209dc:	00000a06 	br	2020a08 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20209e0:	0001883a 	nop
 20209e4:	e0bffc17 	ldw	r2,-16(fp)
 20209e8:	10c00d17 	ldw	r3,52(r2)
 20209ec:	e0bff317 	ldw	r2,-52(fp)
 20209f0:	1880051e 	bne	r3,r2,2020a08 <altera_avalon_jtag_uart_read+0x1c8>
 20209f4:	e0bffc17 	ldw	r2,-16(fp)
 20209f8:	10c00917 	ldw	r3,36(r2)
 20209fc:	e0bffc17 	ldw	r2,-16(fp)
 2020a00:	10800117 	ldw	r2,4(r2)
 2020a04:	18bff736 	bltu	r3,r2,20209e4 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2020a08:	e0bffc17 	ldw	r2,-16(fp)
 2020a0c:	10c00d17 	ldw	r3,52(r2)
 2020a10:	e0bff317 	ldw	r2,-52(fp)
 2020a14:	18800726 	beq	r3,r2,2020a34 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2020a18:	e0bffe17 	ldw	r2,-8(fp)
 2020a1c:	00bf9d16 	blt	zero,r2,2020894 <altera_avalon_jtag_uart_read+0x54>
 2020a20:	00000506 	br	2020a38 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2020a24:	0001883a 	nop
 2020a28:	00000306 	br	2020a38 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2020a2c:	0001883a 	nop
 2020a30:	00000106 	br	2020a38 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2020a34:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 2020a38:	e0bffc17 	ldw	r2,-16(fp)
 2020a3c:	10800a17 	ldw	r2,40(r2)
 2020a40:	1009883a 	mov	r4,r2
 2020a44:	201e0500 	call	201e050 <OSSemPost>

  if (ptr != buffer)
 2020a48:	e0fff017 	ldw	r3,-64(fp)
 2020a4c:	e0bffd17 	ldw	r2,-12(fp)
 2020a50:	18801826 	beq	r3,r2,2020ab4 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020a54:	0005303a 	rdctl	r2,status
 2020a58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020a5c:	e0fff717 	ldw	r3,-36(fp)
 2020a60:	00bfff84 	movi	r2,-2
 2020a64:	1884703a 	and	r2,r3,r2
 2020a68:	1001703a 	wrctl	status,r2
  
  return context;
 2020a6c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2020a70:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2020a74:	e0bffc17 	ldw	r2,-16(fp)
 2020a78:	10800817 	ldw	r2,32(r2)
 2020a7c:	10c00054 	ori	r3,r2,1
 2020a80:	e0bffc17 	ldw	r2,-16(fp)
 2020a84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2020a88:	e0bffc17 	ldw	r2,-16(fp)
 2020a8c:	10800017 	ldw	r2,0(r2)
 2020a90:	10800104 	addi	r2,r2,4
 2020a94:	1007883a 	mov	r3,r2
 2020a98:	e0bffc17 	ldw	r2,-16(fp)
 2020a9c:	10800817 	ldw	r2,32(r2)
 2020aa0:	18800035 	stwio	r2,0(r3)
 2020aa4:	e0bff617 	ldw	r2,-40(fp)
 2020aa8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020aac:	e0bff517 	ldw	r2,-44(fp)
 2020ab0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2020ab4:	e0fff017 	ldw	r3,-64(fp)
 2020ab8:	e0bffd17 	ldw	r2,-12(fp)
 2020abc:	18800426 	beq	r3,r2,2020ad0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 2020ac0:	e0fff017 	ldw	r3,-64(fp)
 2020ac4:	e0bffd17 	ldw	r2,-12(fp)
 2020ac8:	1885c83a 	sub	r2,r3,r2
 2020acc:	00000606 	br	2020ae8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 2020ad0:	e0bfff17 	ldw	r2,-4(fp)
 2020ad4:	1090000c 	andi	r2,r2,16384
 2020ad8:	10000226 	beq	r2,zero,2020ae4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 2020adc:	00bffd44 	movi	r2,-11
 2020ae0:	00000106 	br	2020ae8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 2020ae4:	00bffec4 	movi	r2,-5
}
 2020ae8:	e037883a 	mov	sp,fp
 2020aec:	dfc00117 	ldw	ra,4(sp)
 2020af0:	df000017 	ldw	fp,0(sp)
 2020af4:	dec00204 	addi	sp,sp,8
 2020af8:	f800283a 	ret

02020afc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2020afc:	deffed04 	addi	sp,sp,-76
 2020b00:	dfc01215 	stw	ra,72(sp)
 2020b04:	df001115 	stw	fp,68(sp)
 2020b08:	df001104 	addi	fp,sp,68
 2020b0c:	e13ffc15 	stw	r4,-16(fp)
 2020b10:	e17ffd15 	stw	r5,-12(fp)
 2020b14:	e1bffe15 	stw	r6,-8(fp)
 2020b18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2020b1c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2020b20:	e0bffd17 	ldw	r2,-12(fp)
 2020b24:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 2020b28:	e0bffc17 	ldw	r2,-16(fp)
 2020b2c:	10800b17 	ldw	r2,44(r2)
 2020b30:	e0bff815 	stw	r2,-32(fp)
 2020b34:	e03ff90d 	sth	zero,-28(fp)
 2020b38:	e0bff90b 	ldhu	r2,-28(fp)
 2020b3c:	e0fffb44 	addi	r3,fp,-19
 2020b40:	180d883a 	mov	r6,r3
 2020b44:	100b883a 	mov	r5,r2
 2020b48:	e13ff817 	ldw	r4,-32(fp)
 2020b4c:	201dcd80 	call	201dcd8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2020b50:	00003706 	br	2020c30 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2020b54:	e0bffc17 	ldw	r2,-16(fp)
 2020b58:	10800f17 	ldw	r2,60(r2)
 2020b5c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 2020b60:	e0bffc17 	ldw	r2,-16(fp)
 2020b64:	10801017 	ldw	r2,64(r2)
 2020b68:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 2020b6c:	e0fff417 	ldw	r3,-48(fp)
 2020b70:	e0bff017 	ldw	r2,-64(fp)
 2020b74:	1880062e 	bgeu	r3,r2,2020b90 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 2020b78:	e0fff017 	ldw	r3,-64(fp)
 2020b7c:	e0bff417 	ldw	r2,-48(fp)
 2020b80:	1885c83a 	sub	r2,r3,r2
 2020b84:	10bfffc4 	addi	r2,r2,-1
 2020b88:	e0bff115 	stw	r2,-60(fp)
 2020b8c:	00000b06 	br	2020bbc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 2020b90:	e0bff017 	ldw	r2,-64(fp)
 2020b94:	10000526 	beq	r2,zero,2020bac <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2020b98:	00c20004 	movi	r3,2048
 2020b9c:	e0bff417 	ldw	r2,-48(fp)
 2020ba0:	1885c83a 	sub	r2,r3,r2
 2020ba4:	e0bff115 	stw	r2,-60(fp)
 2020ba8:	00000406 	br	2020bbc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2020bac:	00c1ffc4 	movi	r3,2047
 2020bb0:	e0bff417 	ldw	r2,-48(fp)
 2020bb4:	1885c83a 	sub	r2,r3,r2
 2020bb8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 2020bbc:	e0bff117 	ldw	r2,-60(fp)
 2020bc0:	10001e26 	beq	r2,zero,2020c3c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 2020bc4:	e0fffe17 	ldw	r3,-8(fp)
 2020bc8:	e0bff117 	ldw	r2,-60(fp)
 2020bcc:	1880022e 	bgeu	r3,r2,2020bd8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 2020bd0:	e0bffe17 	ldw	r2,-8(fp)
 2020bd4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2020bd8:	e0bffc17 	ldw	r2,-16(fp)
 2020bdc:	10c21104 	addi	r3,r2,2116
 2020be0:	e0bff417 	ldw	r2,-48(fp)
 2020be4:	1885883a 	add	r2,r3,r2
 2020be8:	e1bff117 	ldw	r6,-60(fp)
 2020bec:	e17ffd17 	ldw	r5,-12(fp)
 2020bf0:	1009883a 	mov	r4,r2
 2020bf4:	2009c800 	call	2009c80 <memcpy>
      ptr   += n;
 2020bf8:	e0fffd17 	ldw	r3,-12(fp)
 2020bfc:	e0bff117 	ldw	r2,-60(fp)
 2020c00:	1885883a 	add	r2,r3,r2
 2020c04:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2020c08:	e0fffe17 	ldw	r3,-8(fp)
 2020c0c:	e0bff117 	ldw	r2,-60(fp)
 2020c10:	1885c83a 	sub	r2,r3,r2
 2020c14:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2020c18:	e0fff417 	ldw	r3,-48(fp)
 2020c1c:	e0bff117 	ldw	r2,-60(fp)
 2020c20:	1885883a 	add	r2,r3,r2
 2020c24:	10c1ffcc 	andi	r3,r2,2047
 2020c28:	e0bffc17 	ldw	r2,-16(fp)
 2020c2c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2020c30:	e0bffe17 	ldw	r2,-8(fp)
 2020c34:	00bfc716 	blt	zero,r2,2020b54 <altera_avalon_jtag_uart_write+0x58>
 2020c38:	00000106 	br	2020c40 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2020c3c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020c40:	0005303a 	rdctl	r2,status
 2020c44:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020c48:	e0fff717 	ldw	r3,-36(fp)
 2020c4c:	00bfff84 	movi	r2,-2
 2020c50:	1884703a 	and	r2,r3,r2
 2020c54:	1001703a 	wrctl	status,r2
  
  return context;
 2020c58:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2020c5c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2020c60:	e0bffc17 	ldw	r2,-16(fp)
 2020c64:	10800817 	ldw	r2,32(r2)
 2020c68:	10c00094 	ori	r3,r2,2
 2020c6c:	e0bffc17 	ldw	r2,-16(fp)
 2020c70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2020c74:	e0bffc17 	ldw	r2,-16(fp)
 2020c78:	10800017 	ldw	r2,0(r2)
 2020c7c:	10800104 	addi	r2,r2,4
 2020c80:	1007883a 	mov	r3,r2
 2020c84:	e0bffc17 	ldw	r2,-16(fp)
 2020c88:	10800817 	ldw	r2,32(r2)
 2020c8c:	18800035 	stwio	r2,0(r3)
 2020c90:	e0bff617 	ldw	r2,-40(fp)
 2020c94:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020c98:	e0bff317 	ldw	r2,-52(fp)
 2020c9c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2020ca0:	e0bffe17 	ldw	r2,-8(fp)
 2020ca4:	00802a0e 	bge	zero,r2,2020d50 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 2020ca8:	e0bfff17 	ldw	r2,-4(fp)
 2020cac:	1090000c 	andi	r2,r2,16384
 2020cb0:	10002a1e 	bne	r2,zero,2020d5c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 2020cb4:	d0a7a743 	ldbu	r2,-24931(gp)
 2020cb8:	10803fcc 	andi	r2,r2,255
 2020cbc:	10800058 	cmpnei	r2,r2,1
 2020cc0:	1000161e 	bne	r2,zero,2020d1c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 2020cc4:	e0bffc17 	ldw	r2,-16(fp)
 2020cc8:	10800c17 	ldw	r2,48(r2)
 2020ccc:	e0bff515 	stw	r2,-44(fp)
 2020cd0:	00800184 	movi	r2,6
 2020cd4:	e0bff98d 	sth	r2,-26(fp)
 2020cd8:	00bfe0c4 	movi	r2,-125
 2020cdc:	e0bffa05 	stb	r2,-24(fp)
 2020ce0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 2020ce4:	d0a7a743 	ldbu	r2,-24931(gp)
 2020ce8:	10803fcc 	andi	r2,r2,255
 2020cec:	10001526 	beq	r2,zero,2020d44 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2020cf0:	e0fff98b 	ldhu	r3,-26(fp)
 2020cf4:	e13ffa03 	ldbu	r4,-24(fp)
 2020cf8:	e17ffa8b 	ldhu	r5,-22(fp)
 2020cfc:	e0bffb04 	addi	r2,fp,-20
 2020d00:	d8800015 	stw	r2,0(sp)
 2020d04:	280f883a 	mov	r7,r5
 2020d08:	200d883a 	mov	r6,r4
 2020d0c:	180b883a 	mov	r5,r3
 2020d10:	e13ff517 	ldw	r4,-44(fp)
 2020d14:	201a7a80 	call	201a7a8 <OSFlagPend>
 2020d18:	00000a06 	br	2020d44 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2020d1c:	0001883a 	nop
 2020d20:	e0bffc17 	ldw	r2,-16(fp)
 2020d24:	10c01017 	ldw	r3,64(r2)
 2020d28:	e0bff017 	ldw	r2,-64(fp)
 2020d2c:	1880051e 	bne	r3,r2,2020d44 <altera_avalon_jtag_uart_write+0x248>
 2020d30:	e0bffc17 	ldw	r2,-16(fp)
 2020d34:	10c00917 	ldw	r3,36(r2)
 2020d38:	e0bffc17 	ldw	r2,-16(fp)
 2020d3c:	10800117 	ldw	r2,4(r2)
 2020d40:	18bff736 	bltu	r3,r2,2020d20 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2020d44:	e0bffc17 	ldw	r2,-16(fp)
 2020d48:	10800917 	ldw	r2,36(r2)
 2020d4c:	1000051e 	bne	r2,zero,2020d64 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 2020d50:	e0bffe17 	ldw	r2,-8(fp)
 2020d54:	00bfb616 	blt	zero,r2,2020c30 <altera_avalon_jtag_uart_write+0x134>
 2020d58:	00000306 	br	2020d68 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2020d5c:	0001883a 	nop
 2020d60:	00000106 	br	2020d68 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2020d64:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 2020d68:	e0bffc17 	ldw	r2,-16(fp)
 2020d6c:	10800b17 	ldw	r2,44(r2)
 2020d70:	1009883a 	mov	r4,r2
 2020d74:	201e0500 	call	201e050 <OSSemPost>

  if (ptr != start)
 2020d78:	e0fffd17 	ldw	r3,-12(fp)
 2020d7c:	e0bff217 	ldw	r2,-56(fp)
 2020d80:	18800426 	beq	r3,r2,2020d94 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 2020d84:	e0fffd17 	ldw	r3,-12(fp)
 2020d88:	e0bff217 	ldw	r2,-56(fp)
 2020d8c:	1885c83a 	sub	r2,r3,r2
 2020d90:	00000606 	br	2020dac <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 2020d94:	e0bfff17 	ldw	r2,-4(fp)
 2020d98:	1090000c 	andi	r2,r2,16384
 2020d9c:	10000226 	beq	r2,zero,2020da8 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 2020da0:	00bffd44 	movi	r2,-11
 2020da4:	00000106 	br	2020dac <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2020da8:	00bffec4 	movi	r2,-5
}
 2020dac:	e037883a 	mov	sp,fp
 2020db0:	dfc00117 	ldw	ra,4(sp)
 2020db4:	df000017 	ldw	fp,0(sp)
 2020db8:	dec00204 	addi	sp,sp,8
 2020dbc:	f800283a 	ret

02020dc0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2020dc0:	defff904 	addi	sp,sp,-28
 2020dc4:	dfc00615 	stw	ra,24(sp)
 2020dc8:	df000515 	stw	fp,20(sp)
 2020dcc:	df000504 	addi	fp,sp,20
 2020dd0:	e13ffe15 	stw	r4,-8(fp)
 2020dd4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2020dd8:	0007883a 	mov	r3,zero
 2020ddc:	e0bffe17 	ldw	r2,-8(fp)
 2020de0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2020de4:	e0bffe17 	ldw	r2,-8(fp)
 2020de8:	10800104 	addi	r2,r2,4
 2020dec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020df0:	0005303a 	rdctl	r2,status
 2020df4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020df8:	e0fffc17 	ldw	r3,-16(fp)
 2020dfc:	00bfff84 	movi	r2,-2
 2020e00:	1884703a 	and	r2,r3,r2
 2020e04:	1001703a 	wrctl	status,r2
  
  return context;
 2020e08:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2020e0c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 2020e10:	2021be80 	call	2021be8 <alt_tick>
 2020e14:	e0bffb17 	ldw	r2,-20(fp)
 2020e18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020e1c:	e0bffd17 	ldw	r2,-12(fp)
 2020e20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2020e24:	0001883a 	nop
 2020e28:	e037883a 	mov	sp,fp
 2020e2c:	dfc00117 	ldw	ra,4(sp)
 2020e30:	df000017 	ldw	fp,0(sp)
 2020e34:	dec00204 	addi	sp,sp,8
 2020e38:	f800283a 	ret

02020e3c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2020e3c:	defff904 	addi	sp,sp,-28
 2020e40:	dfc00615 	stw	ra,24(sp)
 2020e44:	df000515 	stw	fp,20(sp)
 2020e48:	df000504 	addi	fp,sp,20
 2020e4c:	e13ffc15 	stw	r4,-16(fp)
 2020e50:	e17ffd15 	stw	r5,-12(fp)
 2020e54:	e1bffe15 	stw	r6,-8(fp)
 2020e58:	e1ffff15 	stw	r7,-4(fp)
 2020e5c:	e0bfff17 	ldw	r2,-4(fp)
 2020e60:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2020e64:	d0a7bc17 	ldw	r2,-24848(gp)
 2020e68:	1000021e 	bne	r2,zero,2020e74 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2020e6c:	e0bffb17 	ldw	r2,-20(fp)
 2020e70:	d0a7bc15 	stw	r2,-24848(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2020e74:	e0bffc17 	ldw	r2,-16(fp)
 2020e78:	10800104 	addi	r2,r2,4
 2020e7c:	00c001c4 	movi	r3,7
 2020e80:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 2020e84:	018080b4 	movhi	r6,514
 2020e88:	31837004 	addi	r6,r6,3520
 2020e8c:	e17ffc17 	ldw	r5,-16(fp)
 2020e90:	e13ffe17 	ldw	r4,-8(fp)
 2020e94:	20217780 	call	2021778 <alt_irq_register>
#endif  
}
 2020e98:	0001883a 	nop
 2020e9c:	e037883a 	mov	sp,fp
 2020ea0:	dfc00117 	ldw	ra,4(sp)
 2020ea4:	df000017 	ldw	fp,0(sp)
 2020ea8:	dec00204 	addi	sp,sp,8
 2020eac:	f800283a 	ret

02020eb0 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 2020eb0:	defffc04 	addi	sp,sp,-16
 2020eb4:	dfc00315 	stw	ra,12(sp)
 2020eb8:	df000215 	stw	fp,8(sp)
 2020ebc:	df000204 	addi	fp,sp,8
 2020ec0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 2020ec4:	d1603804 	addi	r5,gp,-32544
 2020ec8:	e13fff17 	ldw	r4,-4(fp)
 2020ecc:	20215740 	call	2021574 <alt_find_dev>
 2020ed0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 2020ed4:	e0bffe17 	ldw	r2,-8(fp)
}
 2020ed8:	e037883a 	mov	sp,fp
 2020edc:	dfc00117 	ldw	ra,4(sp)
 2020ee0:	df000017 	ldw	fp,0(sp)
 2020ee4:	dec00204 	addi	sp,sp,8
 2020ee8:	f800283a 	ret

02020eec <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 2020eec:	defffd04 	addi	sp,sp,-12
 2020ef0:	df000215 	stw	fp,8(sp)
 2020ef4:	df000204 	addi	fp,sp,8
 2020ef8:	e13ffe15 	stw	r4,-8(fp)
 2020efc:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 2020f00:	e0bffe17 	ldw	r2,-8(fp)
 2020f04:	10800a17 	ldw	r2,40(r2)
 2020f08:	10800023 	ldbuio	r2,0(r2)
 2020f0c:	10803fcc 	andi	r2,r2,255
 2020f10:	1007883a 	mov	r3,r2
 2020f14:	e0bfff17 	ldw	r2,-4(fp)
 2020f18:	10c00005 	stb	r3,0(r2)

	return 0;
 2020f1c:	0005883a 	mov	r2,zero
}
 2020f20:	e037883a 	mov	sp,fp
 2020f24:	df000017 	ldw	fp,0(sp)
 2020f28:	dec00104 	addi	sp,sp,4
 2020f2c:	f800283a 	ret

02020f30 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 2020f30:	defffc04 	addi	sp,sp,-16
 2020f34:	df000315 	stw	fp,12(sp)
 2020f38:	df000304 	addi	fp,sp,12
 2020f3c:	e13ffd15 	stw	r4,-12(fp)
 2020f40:	2805883a 	mov	r2,r5
 2020f44:	e1bfff15 	stw	r6,-4(fp)
 2020f48:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020f4c:	e0bffd17 	ldw	r2,-12(fp)
 2020f50:	10800a17 	ldw	r2,40(r2)
 2020f54:	1007883a 	mov	r3,r2
 2020f58:	e0bffe03 	ldbu	r2,-8(fp)
 2020f5c:	10800fcc 	andi	r2,r2,63
 2020f60:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2020f64:	e0bffd17 	ldw	r2,-12(fp)
 2020f68:	10800a17 	ldw	r2,40(r2)
 2020f6c:	10800044 	addi	r2,r2,1
 2020f70:	10800023 	ldbuio	r2,0(r2)
 2020f74:	10803fcc 	andi	r2,r2,255
 2020f78:	1007883a 	mov	r3,r2
 2020f7c:	e0bfff17 	ldw	r2,-4(fp)
 2020f80:	10c00005 	stb	r3,0(r2)

	return 0;
 2020f84:	0005883a 	mov	r2,zero
}
 2020f88:	e037883a 	mov	sp,fp
 2020f8c:	df000017 	ldw	fp,0(sp)
 2020f90:	dec00104 	addi	sp,sp,4
 2020f94:	f800283a 	ret

02020f98 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 2020f98:	defffc04 	addi	sp,sp,-16
 2020f9c:	df000315 	stw	fp,12(sp)
 2020fa0:	df000304 	addi	fp,sp,12
 2020fa4:	e13ffd15 	stw	r4,-12(fp)
 2020fa8:	2807883a 	mov	r3,r5
 2020fac:	3005883a 	mov	r2,r6
 2020fb0:	e0fffe05 	stb	r3,-8(fp)
 2020fb4:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2020fb8:	e0bffd17 	ldw	r2,-12(fp)
 2020fbc:	10800a17 	ldw	r2,40(r2)
 2020fc0:	1007883a 	mov	r3,r2
 2020fc4:	e0bffe03 	ldbu	r2,-8(fp)
 2020fc8:	10800fcc 	andi	r2,r2,63
 2020fcc:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 2020fd0:	e0bffd17 	ldw	r2,-12(fp)
 2020fd4:	10800a17 	ldw	r2,40(r2)
 2020fd8:	10800044 	addi	r2,r2,1
 2020fdc:	1007883a 	mov	r3,r2
 2020fe0:	e0bfff03 	ldbu	r2,-4(fp)
 2020fe4:	18800025 	stbio	r2,0(r3)

	return 0;
 2020fe8:	0005883a 	mov	r2,zero
}
 2020fec:	e037883a 	mov	sp,fp
 2020ff0:	df000017 	ldw	fp,0(sp)
 2020ff4:	dec00104 	addi	sp,sp,4
 2020ff8:	f800283a 	ret

02020ffc <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 2020ffc:	defffd04 	addi	sp,sp,-12
 2021000:	df000215 	stw	fp,8(sp)
 2021004:	df000204 	addi	fp,sp,8
 2021008:	e13ffe15 	stw	r4,-8(fp)
 202100c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2021010:	e0bffe17 	ldw	r2,-8(fp)
 2021014:	10800a17 	ldw	r2,40(r2)
 2021018:	1007883a 	mov	r3,r2
 202101c:	00800c84 	movi	r2,50
 2021020:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 2021024:	e0bffe17 	ldw	r2,-8(fp)
 2021028:	10800a17 	ldw	r2,40(r2)
 202102c:	10800044 	addi	r2,r2,1
 2021030:	10800023 	ldbuio	r2,0(r2)
 2021034:	10803fcc 	andi	r2,r2,255
 2021038:	10ffffcc 	andi	r3,r2,65535
 202103c:	e0bfff17 	ldw	r2,-4(fp)
 2021040:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2021044:	e0bffe17 	ldw	r2,-8(fp)
 2021048:	10800a17 	ldw	r2,40(r2)
 202104c:	1007883a 	mov	r3,r2
 2021050:	00800cc4 	movi	r2,51
 2021054:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2021058:	e0bffe17 	ldw	r2,-8(fp)
 202105c:	10800a17 	ldw	r2,40(r2)
 2021060:	10800044 	addi	r2,r2,1
 2021064:	10800023 	ldbuio	r2,0(r2)
 2021068:	10803fcc 	andi	r2,r2,255
 202106c:	10bfffcc 	andi	r2,r2,65535
 2021070:	1004923a 	slli	r2,r2,8
 2021074:	e0ffff17 	ldw	r3,-4(fp)
 2021078:	18c00017 	ldw	r3,0(r3)
 202107c:	1885883a 	add	r2,r3,r2
 2021080:	1007883a 	mov	r3,r2
 2021084:	e0bfff17 	ldw	r2,-4(fp)
 2021088:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 202108c:	e0bfff17 	ldw	r2,-4(fp)
 2021090:	10800017 	ldw	r2,0(r2)
 2021094:	10a0000c 	andi	r2,r2,32768
 2021098:	10000626 	beq	r2,zero,20210b4 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 202109c:	e0bfff17 	ldw	r2,-4(fp)
 20210a0:	10800017 	ldw	r2,0(r2)
 20210a4:	10bffff4 	orhi	r2,r2,65535
 20210a8:	1007883a 	mov	r3,r2
 20210ac:	e0bfff17 	ldw	r2,-4(fp)
 20210b0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 20210b4:	0005883a 	mov	r2,zero
}
 20210b8:	e037883a 	mov	sp,fp
 20210bc:	df000017 	ldw	fp,0(sp)
 20210c0:	dec00104 	addi	sp,sp,4
 20210c4:	f800283a 	ret

020210c8 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 20210c8:	defffd04 	addi	sp,sp,-12
 20210cc:	df000215 	stw	fp,8(sp)
 20210d0:	df000204 	addi	fp,sp,8
 20210d4:	e13ffe15 	stw	r4,-8(fp)
 20210d8:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20210dc:	e0bffe17 	ldw	r2,-8(fp)
 20210e0:	10800a17 	ldw	r2,40(r2)
 20210e4:	1007883a 	mov	r3,r2
 20210e8:	00800d04 	movi	r2,52
 20210ec:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 20210f0:	e0bffe17 	ldw	r2,-8(fp)
 20210f4:	10800a17 	ldw	r2,40(r2)
 20210f8:	10800044 	addi	r2,r2,1
 20210fc:	10800023 	ldbuio	r2,0(r2)
 2021100:	10803fcc 	andi	r2,r2,255
 2021104:	10ffffcc 	andi	r3,r2,65535
 2021108:	e0bfff17 	ldw	r2,-4(fp)
 202110c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 2021110:	e0bffe17 	ldw	r2,-8(fp)
 2021114:	10800a17 	ldw	r2,40(r2)
 2021118:	1007883a 	mov	r3,r2
 202111c:	00800d44 	movi	r2,53
 2021120:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 2021124:	e0bffe17 	ldw	r2,-8(fp)
 2021128:	10800a17 	ldw	r2,40(r2)
 202112c:	10800044 	addi	r2,r2,1
 2021130:	10800023 	ldbuio	r2,0(r2)
 2021134:	10803fcc 	andi	r2,r2,255
 2021138:	10bfffcc 	andi	r2,r2,65535
 202113c:	1004923a 	slli	r2,r2,8
 2021140:	e0ffff17 	ldw	r3,-4(fp)
 2021144:	18c00017 	ldw	r3,0(r3)
 2021148:	1885883a 	add	r2,r3,r2
 202114c:	1007883a 	mov	r3,r2
 2021150:	e0bfff17 	ldw	r2,-4(fp)
 2021154:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 2021158:	e0bfff17 	ldw	r2,-4(fp)
 202115c:	10800017 	ldw	r2,0(r2)
 2021160:	10a0000c 	andi	r2,r2,32768
 2021164:	10000626 	beq	r2,zero,2021180 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 2021168:	e0bfff17 	ldw	r2,-4(fp)
 202116c:	10800017 	ldw	r2,0(r2)
 2021170:	10bffff4 	orhi	r2,r2,65535
 2021174:	1007883a 	mov	r3,r2
 2021178:	e0bfff17 	ldw	r2,-4(fp)
 202117c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 2021180:	0005883a 	mov	r2,zero
}
 2021184:	e037883a 	mov	sp,fp
 2021188:	df000017 	ldw	fp,0(sp)
 202118c:	dec00104 	addi	sp,sp,4
 2021190:	f800283a 	ret

02021194 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 2021194:	defffd04 	addi	sp,sp,-12
 2021198:	df000215 	stw	fp,8(sp)
 202119c:	df000204 	addi	fp,sp,8
 20211a0:	e13ffe15 	stw	r4,-8(fp)
 20211a4:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20211a8:	e0bffe17 	ldw	r2,-8(fp)
 20211ac:	10800a17 	ldw	r2,40(r2)
 20211b0:	1007883a 	mov	r3,r2
 20211b4:	00800d84 	movi	r2,54
 20211b8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 20211bc:	e0bffe17 	ldw	r2,-8(fp)
 20211c0:	10800a17 	ldw	r2,40(r2)
 20211c4:	10800044 	addi	r2,r2,1
 20211c8:	10800023 	ldbuio	r2,0(r2)
 20211cc:	10803fcc 	andi	r2,r2,255
 20211d0:	10ffffcc 	andi	r3,r2,65535
 20211d4:	e0bfff17 	ldw	r2,-4(fp)
 20211d8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 20211dc:	e0bffe17 	ldw	r2,-8(fp)
 20211e0:	10800a17 	ldw	r2,40(r2)
 20211e4:	1007883a 	mov	r3,r2
 20211e8:	00800dc4 	movi	r2,55
 20211ec:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 20211f0:	e0bffe17 	ldw	r2,-8(fp)
 20211f4:	10800a17 	ldw	r2,40(r2)
 20211f8:	10800044 	addi	r2,r2,1
 20211fc:	10800023 	ldbuio	r2,0(r2)
 2021200:	10803fcc 	andi	r2,r2,255
 2021204:	10bfffcc 	andi	r2,r2,65535
 2021208:	1004923a 	slli	r2,r2,8
 202120c:	e0ffff17 	ldw	r3,-4(fp)
 2021210:	18c00017 	ldw	r3,0(r3)
 2021214:	1885883a 	add	r2,r3,r2
 2021218:	1007883a 	mov	r3,r2
 202121c:	e0bfff17 	ldw	r2,-4(fp)
 2021220:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 2021224:	e0bfff17 	ldw	r2,-4(fp)
 2021228:	10800017 	ldw	r2,0(r2)
 202122c:	10a0000c 	andi	r2,r2,32768
 2021230:	10000626 	beq	r2,zero,202124c <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 2021234:	e0bfff17 	ldw	r2,-4(fp)
 2021238:	10800017 	ldw	r2,0(r2)
 202123c:	10bffff4 	orhi	r2,r2,65535
 2021240:	1007883a 	mov	r3,r2
 2021244:	e0bfff17 	ldw	r2,-4(fp)
 2021248:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 202124c:	0005883a 	mov	r2,zero
}
 2021250:	e037883a 	mov	sp,fp
 2021254:	df000017 	ldw	fp,0(sp)
 2021258:	dec00104 	addi	sp,sp,4
 202125c:	f800283a 	ret

02021260 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2021260:	defff504 	addi	sp,sp,-44
 2021264:	df000a15 	stw	fp,40(sp)
 2021268:	df000a04 	addi	fp,sp,40
 202126c:	e13ffc15 	stw	r4,-16(fp)
 2021270:	e17ffd15 	stw	r5,-12(fp)
 2021274:	e1bffe15 	stw	r6,-8(fp)
 2021278:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 202127c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2021280:	d0a7bc17 	ldw	r2,-24848(gp)
  
  if (alt_ticks_per_second ())
 2021284:	10003c26 	beq	r2,zero,2021378 <alt_alarm_start+0x118>
  {
    if (alarm)
 2021288:	e0bffc17 	ldw	r2,-16(fp)
 202128c:	10003826 	beq	r2,zero,2021370 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2021290:	e0bffc17 	ldw	r2,-16(fp)
 2021294:	e0fffe17 	ldw	r3,-8(fp)
 2021298:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 202129c:	e0bffc17 	ldw	r2,-16(fp)
 20212a0:	e0ffff17 	ldw	r3,-4(fp)
 20212a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20212a8:	0005303a 	rdctl	r2,status
 20212ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20212b0:	e0fff917 	ldw	r3,-28(fp)
 20212b4:	00bfff84 	movi	r2,-2
 20212b8:	1884703a 	and	r2,r3,r2
 20212bc:	1001703a 	wrctl	status,r2
  
  return context;
 20212c0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 20212c4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20212c8:	d0a7bd17 	ldw	r2,-24844(gp)
      
      current_nticks = alt_nticks();
 20212cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20212d0:	e0fffd17 	ldw	r3,-12(fp)
 20212d4:	e0bff617 	ldw	r2,-40(fp)
 20212d8:	1885883a 	add	r2,r3,r2
 20212dc:	10c00044 	addi	r3,r2,1
 20212e0:	e0bffc17 	ldw	r2,-16(fp)
 20212e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 20212e8:	e0bffc17 	ldw	r2,-16(fp)
 20212ec:	10c00217 	ldw	r3,8(r2)
 20212f0:	e0bff617 	ldw	r2,-40(fp)
 20212f4:	1880042e 	bgeu	r3,r2,2021308 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 20212f8:	e0bffc17 	ldw	r2,-16(fp)
 20212fc:	00c00044 	movi	r3,1
 2021300:	10c00405 	stb	r3,16(r2)
 2021304:	00000206 	br	2021310 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2021308:	e0bffc17 	ldw	r2,-16(fp)
 202130c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2021310:	e0bffc17 	ldw	r2,-16(fp)
 2021314:	d0e05d04 	addi	r3,gp,-32396
 2021318:	e0fffa15 	stw	r3,-24(fp)
 202131c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2021320:	e0bffb17 	ldw	r2,-20(fp)
 2021324:	e0fffa17 	ldw	r3,-24(fp)
 2021328:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 202132c:	e0bffa17 	ldw	r2,-24(fp)
 2021330:	10c00017 	ldw	r3,0(r2)
 2021334:	e0bffb17 	ldw	r2,-20(fp)
 2021338:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 202133c:	e0bffa17 	ldw	r2,-24(fp)
 2021340:	10800017 	ldw	r2,0(r2)
 2021344:	e0fffb17 	ldw	r3,-20(fp)
 2021348:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 202134c:	e0bffa17 	ldw	r2,-24(fp)
 2021350:	e0fffb17 	ldw	r3,-20(fp)
 2021354:	10c00015 	stw	r3,0(r2)
 2021358:	e0bff817 	ldw	r2,-32(fp)
 202135c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2021360:	e0bff717 	ldw	r2,-36(fp)
 2021364:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2021368:	0005883a 	mov	r2,zero
 202136c:	00000306 	br	202137c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2021370:	00bffa84 	movi	r2,-22
 2021374:	00000106 	br	202137c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2021378:	00bfde84 	movi	r2,-134
  }
}
 202137c:	e037883a 	mov	sp,fp
 2021380:	df000017 	ldw	fp,0(sp)
 2021384:	dec00104 	addi	sp,sp,4
 2021388:	f800283a 	ret

0202138c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 202138c:	defffe04 	addi	sp,sp,-8
 2021390:	df000115 	stw	fp,4(sp)
 2021394:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2021398:	e03fff15 	stw	zero,-4(fp)
 202139c:	00000506 	br	20213b4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 20213a0:	e0bfff17 	ldw	r2,-4(fp)
 20213a4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 20213a8:	e0bfff17 	ldw	r2,-4(fp)
 20213ac:	10800804 	addi	r2,r2,32
 20213b0:	e0bfff15 	stw	r2,-4(fp)
 20213b4:	e0bfff17 	ldw	r2,-4(fp)
 20213b8:	10820030 	cmpltui	r2,r2,2048
 20213bc:	103ff81e 	bne	r2,zero,20213a0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 20213c0:	0001883a 	nop
 20213c4:	e037883a 	mov	sp,fp
 20213c8:	df000017 	ldw	fp,0(sp)
 20213cc:	dec00104 	addi	sp,sp,4
 20213d0:	f800283a 	ret

020213d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20213d4:	defffe04 	addi	sp,sp,-8
 20213d8:	dfc00115 	stw	ra,4(sp)
 20213dc:	df000015 	stw	fp,0(sp)
 20213e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20213e4:	d0a03b17 	ldw	r2,-32532(gp)
 20213e8:	10000326 	beq	r2,zero,20213f8 <alt_get_errno+0x24>
 20213ec:	d0a03b17 	ldw	r2,-32532(gp)
 20213f0:	103ee83a 	callr	r2
 20213f4:	00000106 	br	20213fc <alt_get_errno+0x28>
 20213f8:	d0a79e04 	addi	r2,gp,-24968
}
 20213fc:	e037883a 	mov	sp,fp
 2021400:	dfc00117 	ldw	ra,4(sp)
 2021404:	df000017 	ldw	fp,0(sp)
 2021408:	dec00204 	addi	sp,sp,8
 202140c:	f800283a 	ret

02021410 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2021410:	defffa04 	addi	sp,sp,-24
 2021414:	dfc00515 	stw	ra,20(sp)
 2021418:	df000415 	stw	fp,16(sp)
 202141c:	df000404 	addi	fp,sp,16
 2021420:	e13ffe15 	stw	r4,-8(fp)
 2021424:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2021428:	e0bffe17 	ldw	r2,-8(fp)
 202142c:	10000326 	beq	r2,zero,202143c <alt_dev_llist_insert+0x2c>
 2021430:	e0bffe17 	ldw	r2,-8(fp)
 2021434:	10800217 	ldw	r2,8(r2)
 2021438:	1000061e 	bne	r2,zero,2021454 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 202143c:	20213d40 	call	20213d4 <alt_get_errno>
 2021440:	1007883a 	mov	r3,r2
 2021444:	00800584 	movi	r2,22
 2021448:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 202144c:	00bffa84 	movi	r2,-22
 2021450:	00001306 	br	20214a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2021454:	e0bffe17 	ldw	r2,-8(fp)
 2021458:	e0ffff17 	ldw	r3,-4(fp)
 202145c:	e0fffc15 	stw	r3,-16(fp)
 2021460:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2021464:	e0bffd17 	ldw	r2,-12(fp)
 2021468:	e0fffc17 	ldw	r3,-16(fp)
 202146c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2021470:	e0bffc17 	ldw	r2,-16(fp)
 2021474:	10c00017 	ldw	r3,0(r2)
 2021478:	e0bffd17 	ldw	r2,-12(fp)
 202147c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2021480:	e0bffc17 	ldw	r2,-16(fp)
 2021484:	10800017 	ldw	r2,0(r2)
 2021488:	e0fffd17 	ldw	r3,-12(fp)
 202148c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2021490:	e0bffc17 	ldw	r2,-16(fp)
 2021494:	e0fffd17 	ldw	r3,-12(fp)
 2021498:	10c00015 	stw	r3,0(r2)

  return 0;  
 202149c:	0005883a 	mov	r2,zero
}
 20214a0:	e037883a 	mov	sp,fp
 20214a4:	dfc00117 	ldw	ra,4(sp)
 20214a8:	df000017 	ldw	fp,0(sp)
 20214ac:	dec00204 	addi	sp,sp,8
 20214b0:	f800283a 	ret

020214b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20214b4:	defffd04 	addi	sp,sp,-12
 20214b8:	dfc00215 	stw	ra,8(sp)
 20214bc:	df000115 	stw	fp,4(sp)
 20214c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20214c4:	008080b4 	movhi	r2,514
 20214c8:	108a3004 	addi	r2,r2,10432
 20214cc:	e0bfff15 	stw	r2,-4(fp)
 20214d0:	00000606 	br	20214ec <_do_ctors+0x38>
        (*ctor) (); 
 20214d4:	e0bfff17 	ldw	r2,-4(fp)
 20214d8:	10800017 	ldw	r2,0(r2)
 20214dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20214e0:	e0bfff17 	ldw	r2,-4(fp)
 20214e4:	10bfff04 	addi	r2,r2,-4
 20214e8:	e0bfff15 	stw	r2,-4(fp)
 20214ec:	e0ffff17 	ldw	r3,-4(fp)
 20214f0:	008080b4 	movhi	r2,514
 20214f4:	108a3104 	addi	r2,r2,10436
 20214f8:	18bff62e 	bgeu	r3,r2,20214d4 <_do_ctors+0x20>
        (*ctor) (); 
}
 20214fc:	0001883a 	nop
 2021500:	e037883a 	mov	sp,fp
 2021504:	dfc00117 	ldw	ra,4(sp)
 2021508:	df000017 	ldw	fp,0(sp)
 202150c:	dec00204 	addi	sp,sp,8
 2021510:	f800283a 	ret

02021514 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2021514:	defffd04 	addi	sp,sp,-12
 2021518:	dfc00215 	stw	ra,8(sp)
 202151c:	df000115 	stw	fp,4(sp)
 2021520:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2021524:	008080b4 	movhi	r2,514
 2021528:	108a3004 	addi	r2,r2,10432
 202152c:	e0bfff15 	stw	r2,-4(fp)
 2021530:	00000606 	br	202154c <_do_dtors+0x38>
        (*dtor) (); 
 2021534:	e0bfff17 	ldw	r2,-4(fp)
 2021538:	10800017 	ldw	r2,0(r2)
 202153c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2021540:	e0bfff17 	ldw	r2,-4(fp)
 2021544:	10bfff04 	addi	r2,r2,-4
 2021548:	e0bfff15 	stw	r2,-4(fp)
 202154c:	e0ffff17 	ldw	r3,-4(fp)
 2021550:	008080b4 	movhi	r2,514
 2021554:	108a3104 	addi	r2,r2,10436
 2021558:	18bff62e 	bgeu	r3,r2,2021534 <_do_dtors+0x20>
        (*dtor) (); 
}
 202155c:	0001883a 	nop
 2021560:	e037883a 	mov	sp,fp
 2021564:	dfc00117 	ldw	ra,4(sp)
 2021568:	df000017 	ldw	fp,0(sp)
 202156c:	dec00204 	addi	sp,sp,8
 2021570:	f800283a 	ret

02021574 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2021574:	defffa04 	addi	sp,sp,-24
 2021578:	dfc00515 	stw	ra,20(sp)
 202157c:	df000415 	stw	fp,16(sp)
 2021580:	df000404 	addi	fp,sp,16
 2021584:	e13ffe15 	stw	r4,-8(fp)
 2021588:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 202158c:	e0bfff17 	ldw	r2,-4(fp)
 2021590:	10800017 	ldw	r2,0(r2)
 2021594:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2021598:	e13ffe17 	ldw	r4,-8(fp)
 202159c:	200a1e80 	call	200a1e8 <strlen>
 20215a0:	10800044 	addi	r2,r2,1
 20215a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20215a8:	00000d06 	br	20215e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20215ac:	e0bffc17 	ldw	r2,-16(fp)
 20215b0:	10800217 	ldw	r2,8(r2)
 20215b4:	e0fffd17 	ldw	r3,-12(fp)
 20215b8:	180d883a 	mov	r6,r3
 20215bc:	e17ffe17 	ldw	r5,-8(fp)
 20215c0:	1009883a 	mov	r4,r2
 20215c4:	20224000 	call	2022400 <memcmp>
 20215c8:	1000021e 	bne	r2,zero,20215d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20215cc:	e0bffc17 	ldw	r2,-16(fp)
 20215d0:	00000706 	br	20215f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 20215d4:	e0bffc17 	ldw	r2,-16(fp)
 20215d8:	10800017 	ldw	r2,0(r2)
 20215dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20215e0:	e0fffc17 	ldw	r3,-16(fp)
 20215e4:	e0bfff17 	ldw	r2,-4(fp)
 20215e8:	18bff01e 	bne	r3,r2,20215ac <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20215ec:	0005883a 	mov	r2,zero
}
 20215f0:	e037883a 	mov	sp,fp
 20215f4:	dfc00117 	ldw	ra,4(sp)
 20215f8:	df000017 	ldw	fp,0(sp)
 20215fc:	dec00204 	addi	sp,sp,8
 2021600:	f800283a 	ret

02021604 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2021604:	defffe04 	addi	sp,sp,-8
 2021608:	dfc00115 	stw	ra,4(sp)
 202160c:	df000015 	stw	fp,0(sp)
 2021610:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2021614:	01440004 	movi	r5,4096
 2021618:	0009883a 	mov	r4,zero
 202161c:	20222500 	call	2022250 <alt_icache_flush>
#endif
}
 2021620:	0001883a 	nop
 2021624:	e037883a 	mov	sp,fp
 2021628:	dfc00117 	ldw	ra,4(sp)
 202162c:	df000017 	ldw	fp,0(sp)
 2021630:	dec00204 	addi	sp,sp,8
 2021634:	f800283a 	ret

02021638 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2021638:	defff904 	addi	sp,sp,-28
 202163c:	dfc00615 	stw	ra,24(sp)
 2021640:	df000515 	stw	fp,20(sp)
 2021644:	df000504 	addi	fp,sp,20
 2021648:	e13ffc15 	stw	r4,-16(fp)
 202164c:	e17ffd15 	stw	r5,-12(fp)
 2021650:	e1bffe15 	stw	r6,-8(fp)
 2021654:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2021658:	e1bfff17 	ldw	r6,-4(fp)
 202165c:	e17ffe17 	ldw	r5,-8(fp)
 2021660:	e13ffd17 	ldw	r4,-12(fp)
 2021664:	20219f80 	call	20219f8 <open>
 2021668:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 202166c:	e0bffb17 	ldw	r2,-20(fp)
 2021670:	10001c16 	blt	r2,zero,20216e4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 2021674:	008080b4 	movhi	r2,514
 2021678:	108f7304 	addi	r2,r2,15820
 202167c:	e0fffb17 	ldw	r3,-20(fp)
 2021680:	18c00324 	muli	r3,r3,12
 2021684:	10c5883a 	add	r2,r2,r3
 2021688:	10c00017 	ldw	r3,0(r2)
 202168c:	e0bffc17 	ldw	r2,-16(fp)
 2021690:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2021694:	008080b4 	movhi	r2,514
 2021698:	108f7304 	addi	r2,r2,15820
 202169c:	e0fffb17 	ldw	r3,-20(fp)
 20216a0:	18c00324 	muli	r3,r3,12
 20216a4:	10c5883a 	add	r2,r2,r3
 20216a8:	10800104 	addi	r2,r2,4
 20216ac:	10c00017 	ldw	r3,0(r2)
 20216b0:	e0bffc17 	ldw	r2,-16(fp)
 20216b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20216b8:	008080b4 	movhi	r2,514
 20216bc:	108f7304 	addi	r2,r2,15820
 20216c0:	e0fffb17 	ldw	r3,-20(fp)
 20216c4:	18c00324 	muli	r3,r3,12
 20216c8:	10c5883a 	add	r2,r2,r3
 20216cc:	10800204 	addi	r2,r2,8
 20216d0:	10c00017 	ldw	r3,0(r2)
 20216d4:	e0bffc17 	ldw	r2,-16(fp)
 20216d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20216dc:	e13ffb17 	ldw	r4,-20(fp)
 20216e0:	20177e00 	call	20177e0 <alt_release_fd>
  }
} 
 20216e4:	0001883a 	nop
 20216e8:	e037883a 	mov	sp,fp
 20216ec:	dfc00117 	ldw	ra,4(sp)
 20216f0:	df000017 	ldw	fp,0(sp)
 20216f4:	dec00204 	addi	sp,sp,8
 20216f8:	f800283a 	ret

020216fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20216fc:	defffb04 	addi	sp,sp,-20
 2021700:	dfc00415 	stw	ra,16(sp)
 2021704:	df000315 	stw	fp,12(sp)
 2021708:	df000304 	addi	fp,sp,12
 202170c:	e13ffd15 	stw	r4,-12(fp)
 2021710:	e17ffe15 	stw	r5,-8(fp)
 2021714:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2021718:	01c07fc4 	movi	r7,511
 202171c:	01800044 	movi	r6,1
 2021720:	e17ffd17 	ldw	r5,-12(fp)
 2021724:	010080b4 	movhi	r4,514
 2021728:	210f7604 	addi	r4,r4,15832
 202172c:	20216380 	call	2021638 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2021730:	01c07fc4 	movi	r7,511
 2021734:	000d883a 	mov	r6,zero
 2021738:	e17ffe17 	ldw	r5,-8(fp)
 202173c:	010080b4 	movhi	r4,514
 2021740:	210f7304 	addi	r4,r4,15820
 2021744:	20216380 	call	2021638 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2021748:	01c07fc4 	movi	r7,511
 202174c:	01800044 	movi	r6,1
 2021750:	e17fff17 	ldw	r5,-4(fp)
 2021754:	010080b4 	movhi	r4,514
 2021758:	210f7904 	addi	r4,r4,15844
 202175c:	20216380 	call	2021638 <alt_open_fd>
}  
 2021760:	0001883a 	nop
 2021764:	e037883a 	mov	sp,fp
 2021768:	dfc00117 	ldw	ra,4(sp)
 202176c:	df000017 	ldw	fp,0(sp)
 2021770:	dec00204 	addi	sp,sp,8
 2021774:	f800283a 	ret

02021778 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 2021778:	defff004 	addi	sp,sp,-64
 202177c:	df000f15 	stw	fp,60(sp)
 2021780:	df000f04 	addi	fp,sp,60
 2021784:	e13ffd15 	stw	r4,-12(fp)
 2021788:	e17ffe15 	stw	r5,-8(fp)
 202178c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 2021790:	00bffa84 	movi	r2,-22
 2021794:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2021798:	e0bffd17 	ldw	r2,-12(fp)
 202179c:	10800828 	cmpgeui	r2,r2,32
 20217a0:	1000501e 	bne	r2,zero,20218e4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20217a4:	0005303a 	rdctl	r2,status
 20217a8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20217ac:	e0fff617 	ldw	r3,-40(fp)
 20217b0:	00bfff84 	movi	r2,-2
 20217b4:	1884703a 	and	r2,r3,r2
 20217b8:	1001703a 	wrctl	status,r2
  
  return context;
 20217bc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 20217c0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 20217c4:	008080f4 	movhi	r2,515
 20217c8:	10884c04 	addi	r2,r2,8496
 20217cc:	e0fffd17 	ldw	r3,-12(fp)
 20217d0:	180690fa 	slli	r3,r3,3
 20217d4:	10c5883a 	add	r2,r2,r3
 20217d8:	e0ffff17 	ldw	r3,-4(fp)
 20217dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 20217e0:	008080f4 	movhi	r2,515
 20217e4:	10884c04 	addi	r2,r2,8496
 20217e8:	e0fffd17 	ldw	r3,-12(fp)
 20217ec:	180690fa 	slli	r3,r3,3
 20217f0:	10c5883a 	add	r2,r2,r3
 20217f4:	10800104 	addi	r2,r2,4
 20217f8:	e0fffe17 	ldw	r3,-8(fp)
 20217fc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 2021800:	e0bfff17 	ldw	r2,-4(fp)
 2021804:	10001926 	beq	r2,zero,202186c <alt_irq_register+0xf4>
 2021808:	e0bffd17 	ldw	r2,-12(fp)
 202180c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2021810:	0005303a 	rdctl	r2,status
 2021814:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2021818:	e0fff717 	ldw	r3,-36(fp)
 202181c:	00bfff84 	movi	r2,-2
 2021820:	1884703a 	and	r2,r3,r2
 2021824:	1001703a 	wrctl	status,r2
  
  return context;
 2021828:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 202182c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2021830:	00c00044 	movi	r3,1
 2021834:	e0bff217 	ldw	r2,-56(fp)
 2021838:	1884983a 	sll	r2,r3,r2
 202183c:	1007883a 	mov	r3,r2
 2021840:	d0a7bb17 	ldw	r2,-24852(gp)
 2021844:	1884b03a 	or	r2,r3,r2
 2021848:	d0a7bb15 	stw	r2,-24852(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 202184c:	d0a7bb17 	ldw	r2,-24852(gp)
 2021850:	100170fa 	wrctl	ienable,r2
 2021854:	e0bff817 	ldw	r2,-32(fp)
 2021858:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 202185c:	e0bff917 	ldw	r2,-28(fp)
 2021860:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2021864:	0005883a 	mov	r2,zero
 2021868:	00001906 	br	20218d0 <alt_irq_register+0x158>
 202186c:	e0bffd17 	ldw	r2,-12(fp)
 2021870:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2021874:	0005303a 	rdctl	r2,status
 2021878:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 202187c:	e0fffa17 	ldw	r3,-24(fp)
 2021880:	00bfff84 	movi	r2,-2
 2021884:	1884703a 	and	r2,r3,r2
 2021888:	1001703a 	wrctl	status,r2
  
  return context;
 202188c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2021890:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2021894:	00c00044 	movi	r3,1
 2021898:	e0bff417 	ldw	r2,-48(fp)
 202189c:	1884983a 	sll	r2,r3,r2
 20218a0:	0084303a 	nor	r2,zero,r2
 20218a4:	1007883a 	mov	r3,r2
 20218a8:	d0a7bb17 	ldw	r2,-24852(gp)
 20218ac:	1884703a 	and	r2,r3,r2
 20218b0:	d0a7bb15 	stw	r2,-24852(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20218b4:	d0a7bb17 	ldw	r2,-24852(gp)
 20218b8:	100170fa 	wrctl	ienable,r2
 20218bc:	e0bffb17 	ldw	r2,-20(fp)
 20218c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20218c4:	e0bffc17 	ldw	r2,-16(fp)
 20218c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20218cc:	0005883a 	mov	r2,zero
 20218d0:	e0bff115 	stw	r2,-60(fp)
 20218d4:	e0bff317 	ldw	r2,-52(fp)
 20218d8:	e0bff515 	stw	r2,-44(fp)
 20218dc:	e0bff517 	ldw	r2,-44(fp)
 20218e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 20218e4:	e0bff117 	ldw	r2,-60(fp)
}
 20218e8:	e037883a 	mov	sp,fp
 20218ec:	df000017 	ldw	fp,0(sp)
 20218f0:	dec00104 	addi	sp,sp,4
 20218f4:	f800283a 	ret

020218f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20218f8:	defffe04 	addi	sp,sp,-8
 20218fc:	dfc00115 	stw	ra,4(sp)
 2021900:	df000015 	stw	fp,0(sp)
 2021904:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2021908:	d0a03b17 	ldw	r2,-32532(gp)
 202190c:	10000326 	beq	r2,zero,202191c <alt_get_errno+0x24>
 2021910:	d0a03b17 	ldw	r2,-32532(gp)
 2021914:	103ee83a 	callr	r2
 2021918:	00000106 	br	2021920 <alt_get_errno+0x28>
 202191c:	d0a79e04 	addi	r2,gp,-24968
}
 2021920:	e037883a 	mov	sp,fp
 2021924:	dfc00117 	ldw	ra,4(sp)
 2021928:	df000017 	ldw	fp,0(sp)
 202192c:	dec00204 	addi	sp,sp,8
 2021930:	f800283a 	ret

02021934 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2021934:	defffd04 	addi	sp,sp,-12
 2021938:	df000215 	stw	fp,8(sp)
 202193c:	df000204 	addi	fp,sp,8
 2021940:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2021944:	e0bfff17 	ldw	r2,-4(fp)
 2021948:	10800217 	ldw	r2,8(r2)
 202194c:	10d00034 	orhi	r3,r2,16384
 2021950:	e0bfff17 	ldw	r2,-4(fp)
 2021954:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2021958:	e03ffe15 	stw	zero,-8(fp)
 202195c:	00001d06 	br	20219d4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2021960:	008080b4 	movhi	r2,514
 2021964:	108f7304 	addi	r2,r2,15820
 2021968:	e0fffe17 	ldw	r3,-8(fp)
 202196c:	18c00324 	muli	r3,r3,12
 2021970:	10c5883a 	add	r2,r2,r3
 2021974:	10c00017 	ldw	r3,0(r2)
 2021978:	e0bfff17 	ldw	r2,-4(fp)
 202197c:	10800017 	ldw	r2,0(r2)
 2021980:	1880111e 	bne	r3,r2,20219c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2021984:	008080b4 	movhi	r2,514
 2021988:	108f7304 	addi	r2,r2,15820
 202198c:	e0fffe17 	ldw	r3,-8(fp)
 2021990:	18c00324 	muli	r3,r3,12
 2021994:	10c5883a 	add	r2,r2,r3
 2021998:	10800204 	addi	r2,r2,8
 202199c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20219a0:	1000090e 	bge	r2,zero,20219c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 20219a4:	e0bffe17 	ldw	r2,-8(fp)
 20219a8:	10c00324 	muli	r3,r2,12
 20219ac:	008080b4 	movhi	r2,514
 20219b0:	108f7304 	addi	r2,r2,15820
 20219b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20219b8:	e0bfff17 	ldw	r2,-4(fp)
 20219bc:	18800226 	beq	r3,r2,20219c8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 20219c0:	00bffcc4 	movi	r2,-13
 20219c4:	00000806 	br	20219e8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20219c8:	e0bffe17 	ldw	r2,-8(fp)
 20219cc:	10800044 	addi	r2,r2,1
 20219d0:	e0bffe15 	stw	r2,-8(fp)
 20219d4:	d0a03a17 	ldw	r2,-32536(gp)
 20219d8:	1007883a 	mov	r3,r2
 20219dc:	e0bffe17 	ldw	r2,-8(fp)
 20219e0:	18bfdf2e 	bgeu	r3,r2,2021960 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20219e4:	0005883a 	mov	r2,zero
}
 20219e8:	e037883a 	mov	sp,fp
 20219ec:	df000017 	ldw	fp,0(sp)
 20219f0:	dec00104 	addi	sp,sp,4
 20219f4:	f800283a 	ret

020219f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20219f8:	defff604 	addi	sp,sp,-40
 20219fc:	dfc00915 	stw	ra,36(sp)
 2021a00:	df000815 	stw	fp,32(sp)
 2021a04:	df000804 	addi	fp,sp,32
 2021a08:	e13ffd15 	stw	r4,-12(fp)
 2021a0c:	e17ffe15 	stw	r5,-8(fp)
 2021a10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2021a14:	00bfffc4 	movi	r2,-1
 2021a18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2021a1c:	00bffb44 	movi	r2,-19
 2021a20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2021a24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2021a28:	d1603804 	addi	r5,gp,-32544
 2021a2c:	e13ffd17 	ldw	r4,-12(fp)
 2021a30:	20215740 	call	2021574 <alt_find_dev>
 2021a34:	e0bff815 	stw	r2,-32(fp)
 2021a38:	e0bff817 	ldw	r2,-32(fp)
 2021a3c:	1000051e 	bne	r2,zero,2021a54 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2021a40:	e13ffd17 	ldw	r4,-12(fp)
 2021a44:	202206c0 	call	202206c <alt_find_file>
 2021a48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2021a4c:	00800044 	movi	r2,1
 2021a50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2021a54:	e0bff817 	ldw	r2,-32(fp)
 2021a58:	10002926 	beq	r2,zero,2021b00 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2021a5c:	e13ff817 	ldw	r4,-32(fp)
 2021a60:	20221740 	call	2022174 <alt_get_fd>
 2021a64:	e0bff915 	stw	r2,-28(fp)
 2021a68:	e0bff917 	ldw	r2,-28(fp)
 2021a6c:	1000030e 	bge	r2,zero,2021a7c <open+0x84>
    {
      status = index;
 2021a70:	e0bff917 	ldw	r2,-28(fp)
 2021a74:	e0bffa15 	stw	r2,-24(fp)
 2021a78:	00002306 	br	2021b08 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 2021a7c:	e0bff917 	ldw	r2,-28(fp)
 2021a80:	10c00324 	muli	r3,r2,12
 2021a84:	008080b4 	movhi	r2,514
 2021a88:	108f7304 	addi	r2,r2,15820
 2021a8c:	1885883a 	add	r2,r3,r2
 2021a90:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2021a94:	e0fffe17 	ldw	r3,-8(fp)
 2021a98:	00900034 	movhi	r2,16384
 2021a9c:	10bfffc4 	addi	r2,r2,-1
 2021aa0:	1886703a 	and	r3,r3,r2
 2021aa4:	e0bffc17 	ldw	r2,-16(fp)
 2021aa8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2021aac:	e0bffb17 	ldw	r2,-20(fp)
 2021ab0:	1000051e 	bne	r2,zero,2021ac8 <open+0xd0>
 2021ab4:	e13ffc17 	ldw	r4,-16(fp)
 2021ab8:	20219340 	call	2021934 <alt_file_locked>
 2021abc:	e0bffa15 	stw	r2,-24(fp)
 2021ac0:	e0bffa17 	ldw	r2,-24(fp)
 2021ac4:	10001016 	blt	r2,zero,2021b08 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2021ac8:	e0bff817 	ldw	r2,-32(fp)
 2021acc:	10800317 	ldw	r2,12(r2)
 2021ad0:	10000826 	beq	r2,zero,2021af4 <open+0xfc>
 2021ad4:	e0bff817 	ldw	r2,-32(fp)
 2021ad8:	10800317 	ldw	r2,12(r2)
 2021adc:	e1ffff17 	ldw	r7,-4(fp)
 2021ae0:	e1bffe17 	ldw	r6,-8(fp)
 2021ae4:	e17ffd17 	ldw	r5,-12(fp)
 2021ae8:	e13ffc17 	ldw	r4,-16(fp)
 2021aec:	103ee83a 	callr	r2
 2021af0:	00000106 	br	2021af8 <open+0x100>
 2021af4:	0005883a 	mov	r2,zero
 2021af8:	e0bffa15 	stw	r2,-24(fp)
 2021afc:	00000206 	br	2021b08 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2021b00:	00bffb44 	movi	r2,-19
 2021b04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2021b08:	e0bffa17 	ldw	r2,-24(fp)
 2021b0c:	1000090e 	bge	r2,zero,2021b34 <open+0x13c>
  {
    alt_release_fd (index);  
 2021b10:	e13ff917 	ldw	r4,-28(fp)
 2021b14:	20177e00 	call	20177e0 <alt_release_fd>
    ALT_ERRNO = -status;
 2021b18:	20218f80 	call	20218f8 <alt_get_errno>
 2021b1c:	1007883a 	mov	r3,r2
 2021b20:	e0bffa17 	ldw	r2,-24(fp)
 2021b24:	0085c83a 	sub	r2,zero,r2
 2021b28:	18800015 	stw	r2,0(r3)
    return -1;
 2021b2c:	00bfffc4 	movi	r2,-1
 2021b30:	00000106 	br	2021b38 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2021b34:	e0bff917 	ldw	r2,-28(fp)
}
 2021b38:	e037883a 	mov	sp,fp
 2021b3c:	dfc00117 	ldw	ra,4(sp)
 2021b40:	df000017 	ldw	fp,0(sp)
 2021b44:	dec00204 	addi	sp,sp,8
 2021b48:	f800283a 	ret

02021b4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2021b4c:	defffa04 	addi	sp,sp,-24
 2021b50:	df000515 	stw	fp,20(sp)
 2021b54:	df000504 	addi	fp,sp,20
 2021b58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2021b5c:	0005303a 	rdctl	r2,status
 2021b60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2021b64:	e0fffc17 	ldw	r3,-16(fp)
 2021b68:	00bfff84 	movi	r2,-2
 2021b6c:	1884703a 	and	r2,r3,r2
 2021b70:	1001703a 	wrctl	status,r2
  
  return context;
 2021b74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2021b78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2021b7c:	e0bfff17 	ldw	r2,-4(fp)
 2021b80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2021b84:	e0bffd17 	ldw	r2,-12(fp)
 2021b88:	10800017 	ldw	r2,0(r2)
 2021b8c:	e0fffd17 	ldw	r3,-12(fp)
 2021b90:	18c00117 	ldw	r3,4(r3)
 2021b94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2021b98:	e0bffd17 	ldw	r2,-12(fp)
 2021b9c:	10800117 	ldw	r2,4(r2)
 2021ba0:	e0fffd17 	ldw	r3,-12(fp)
 2021ba4:	18c00017 	ldw	r3,0(r3)
 2021ba8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2021bac:	e0bffd17 	ldw	r2,-12(fp)
 2021bb0:	e0fffd17 	ldw	r3,-12(fp)
 2021bb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2021bb8:	e0bffd17 	ldw	r2,-12(fp)
 2021bbc:	e0fffd17 	ldw	r3,-12(fp)
 2021bc0:	10c00015 	stw	r3,0(r2)
 2021bc4:	e0bffb17 	ldw	r2,-20(fp)
 2021bc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2021bcc:	e0bffe17 	ldw	r2,-8(fp)
 2021bd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2021bd4:	0001883a 	nop
 2021bd8:	e037883a 	mov	sp,fp
 2021bdc:	df000017 	ldw	fp,0(sp)
 2021be0:	dec00104 	addi	sp,sp,4
 2021be4:	f800283a 	ret

02021be8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2021be8:	defffb04 	addi	sp,sp,-20
 2021bec:	dfc00415 	stw	ra,16(sp)
 2021bf0:	df000315 	stw	fp,12(sp)
 2021bf4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2021bf8:	d0a05d17 	ldw	r2,-32396(gp)
 2021bfc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2021c00:	d0a7bd17 	ldw	r2,-24844(gp)
 2021c04:	10800044 	addi	r2,r2,1
 2021c08:	d0a7bd15 	stw	r2,-24844(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2021c0c:	00002e06 	br	2021cc8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2021c10:	e0bffd17 	ldw	r2,-12(fp)
 2021c14:	10800017 	ldw	r2,0(r2)
 2021c18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2021c1c:	e0bffd17 	ldw	r2,-12(fp)
 2021c20:	10800403 	ldbu	r2,16(r2)
 2021c24:	10803fcc 	andi	r2,r2,255
 2021c28:	10000426 	beq	r2,zero,2021c3c <alt_tick+0x54>
 2021c2c:	d0a7bd17 	ldw	r2,-24844(gp)
 2021c30:	1000021e 	bne	r2,zero,2021c3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2021c34:	e0bffd17 	ldw	r2,-12(fp)
 2021c38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2021c3c:	e0bffd17 	ldw	r2,-12(fp)
 2021c40:	10800217 	ldw	r2,8(r2)
 2021c44:	d0e7bd17 	ldw	r3,-24844(gp)
 2021c48:	18801d36 	bltu	r3,r2,2021cc0 <alt_tick+0xd8>
 2021c4c:	e0bffd17 	ldw	r2,-12(fp)
 2021c50:	10800403 	ldbu	r2,16(r2)
 2021c54:	10803fcc 	andi	r2,r2,255
 2021c58:	1000191e 	bne	r2,zero,2021cc0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2021c5c:	e0bffd17 	ldw	r2,-12(fp)
 2021c60:	10800317 	ldw	r2,12(r2)
 2021c64:	e0fffd17 	ldw	r3,-12(fp)
 2021c68:	18c00517 	ldw	r3,20(r3)
 2021c6c:	1809883a 	mov	r4,r3
 2021c70:	103ee83a 	callr	r2
 2021c74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2021c78:	e0bfff17 	ldw	r2,-4(fp)
 2021c7c:	1000031e 	bne	r2,zero,2021c8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2021c80:	e13ffd17 	ldw	r4,-12(fp)
 2021c84:	2021b4c0 	call	2021b4c <alt_alarm_stop>
 2021c88:	00000d06 	br	2021cc0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2021c8c:	e0bffd17 	ldw	r2,-12(fp)
 2021c90:	10c00217 	ldw	r3,8(r2)
 2021c94:	e0bfff17 	ldw	r2,-4(fp)
 2021c98:	1887883a 	add	r3,r3,r2
 2021c9c:	e0bffd17 	ldw	r2,-12(fp)
 2021ca0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2021ca4:	e0bffd17 	ldw	r2,-12(fp)
 2021ca8:	10c00217 	ldw	r3,8(r2)
 2021cac:	d0a7bd17 	ldw	r2,-24844(gp)
 2021cb0:	1880032e 	bgeu	r3,r2,2021cc0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2021cb4:	e0bffd17 	ldw	r2,-12(fp)
 2021cb8:	00c00044 	movi	r3,1
 2021cbc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2021cc0:	e0bffe17 	ldw	r2,-8(fp)
 2021cc4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2021cc8:	e0fffd17 	ldw	r3,-12(fp)
 2021ccc:	d0a05d04 	addi	r2,gp,-32396
 2021cd0:	18bfcf1e 	bne	r3,r2,2021c10 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2021cd4:	20189cc0 	call	20189cc <OSTimeTick>
}
 2021cd8:	0001883a 	nop
 2021cdc:	e037883a 	mov	sp,fp
 2021ce0:	dfc00117 	ldw	ra,4(sp)
 2021ce4:	df000017 	ldw	fp,0(sp)
 2021ce8:	dec00204 	addi	sp,sp,8
 2021cec:	f800283a 	ret

02021cf0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2021cf0:	deffff04 	addi	sp,sp,-4
 2021cf4:	df000015 	stw	fp,0(sp)
 2021cf8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2021cfc:	000170fa 	wrctl	ienable,zero
}
 2021d00:	0001883a 	nop
 2021d04:	e037883a 	mov	sp,fp
 2021d08:	df000017 	ldw	fp,0(sp)
 2021d0c:	dec00104 	addi	sp,sp,4
 2021d10:	f800283a 	ret

02021d14 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 2021d14:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 2021d18:	d0e03017 	ldw	r3,-32576(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 2021d1c:	d127b617 	ldw	r4,-24872(gp)

      stw ra,  0(sp)
 2021d20:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 2021d24:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 2021d28:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 2021d2c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 2021d30:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 2021d34:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 2021d38:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 2021d3c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 2021d40:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 2021d44:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 2021d48:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 2021d4c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2021d50:	2021f880 	call	2021f88 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 2021d54:	d127b117 	ldw	r4,-24892(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 2021d58:	d167a907 	ldb	r5,-24924(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 2021d5c:	d127b615 	stw	r4,-24872(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 2021d60:	d167a945 	stb	r5,-24923(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 2021d64:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 2021d68:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 2021d6c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 2021d70:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 2021d74:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 2021d78:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 2021d7c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 2021d80:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 2021d84:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 2021d88:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 2021d8c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 2021d90:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 2021d94:	d0e03015 	stw	r3,-32576(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 2021d98:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 2021d9c:	f800283a 	ret

02021da0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 2021da0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 2021da4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 2021da8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 2021dac:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2021db0:	2021f880 	call	2021f88 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 2021db4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 2021db8:	d4a7a745 	stb	r18,-24931(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 2021dbc:	003fe506 	br	2021d54 <OSCtxSw+0x40>

02021dc0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 2021dc0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 2021dc4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 2021dc8:	10800054 	ori	r2,r2,1
      wrctl status, r2
 2021dcc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 2021dd0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 2021dd4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 2021dd8:	dec00204 	addi	sp,sp,8

      callr r2
 2021ddc:	103ee83a 	callr	r2

      nop
 2021de0:	0001883a 	nop

02021de4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 2021de4:	defff704 	addi	sp,sp,-36
 2021de8:	dfc00815 	stw	ra,32(sp)
 2021dec:	df000715 	stw	fp,28(sp)
 2021df0:	df000704 	addi	fp,sp,28
 2021df4:	e13ffc15 	stw	r4,-16(fp)
 2021df8:	e17ffd15 	stw	r5,-12(fp)
 2021dfc:	e1bffe15 	stw	r6,-8(fp)
 2021e00:	3805883a 	mov	r2,r7
 2021e04:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 2021e08:	e0fffe17 	ldw	r3,-8(fp)
 2021e0c:	00bfff04 	movi	r2,-4
 2021e10:	1884703a 	and	r2,r3,r2
 2021e14:	10bef704 	addi	r2,r2,-1060
 2021e18:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 2021e1c:	01810904 	movi	r6,1060
 2021e20:	000b883a 	mov	r5,zero
 2021e24:	e13ff917 	ldw	r4,-28(fp)
 2021e28:	2009e080 	call	2009e08 <memset>
 2021e2c:	e0bff917 	ldw	r2,-28(fp)
 2021e30:	10c0bb04 	addi	r3,r2,748
 2021e34:	e0bff917 	ldw	r2,-28(fp)
 2021e38:	10c00115 	stw	r3,4(r2)
 2021e3c:	e0bff917 	ldw	r2,-28(fp)
 2021e40:	10c0d504 	addi	r3,r2,852
 2021e44:	e0bff917 	ldw	r2,-28(fp)
 2021e48:	10c00215 	stw	r3,8(r2)
 2021e4c:	e0bff917 	ldw	r2,-28(fp)
 2021e50:	10c0ef04 	addi	r3,r2,956
 2021e54:	e0bff917 	ldw	r2,-28(fp)
 2021e58:	10c00315 	stw	r3,12(r2)
 2021e5c:	e0fff917 	ldw	r3,-28(fp)
 2021e60:	008080b4 	movhi	r2,514
 2021e64:	108d3304 	addi	r2,r2,13516
 2021e68:	18800d15 	stw	r2,52(r3)
 2021e6c:	e0bff917 	ldw	r2,-28(fp)
 2021e70:	00c00044 	movi	r3,1
 2021e74:	10c02915 	stw	r3,164(r2)
 2021e78:	10002a15 	stw	zero,168(r2)
 2021e7c:	e0bff917 	ldw	r2,-28(fp)
 2021e80:	00ccc384 	movi	r3,13070
 2021e84:	10c02b0d 	sth	r3,172(r2)
 2021e88:	e0bff917 	ldw	r2,-28(fp)
 2021e8c:	00eaf344 	movi	r3,-21555
 2021e90:	10c02b8d 	sth	r3,174(r2)
 2021e94:	e0bff917 	ldw	r2,-28(fp)
 2021e98:	00c48d04 	movi	r3,4660
 2021e9c:	10c02c0d 	sth	r3,176(r2)
 2021ea0:	e0bff917 	ldw	r2,-28(fp)
 2021ea4:	00f99b44 	movi	r3,-6547
 2021ea8:	10c02c8d 	sth	r3,178(r2)
 2021eac:	e0bff917 	ldw	r2,-28(fp)
 2021eb0:	00f7bb04 	movi	r3,-8468
 2021eb4:	10c02d0d 	sth	r3,180(r2)
 2021eb8:	e0bff917 	ldw	r2,-28(fp)
 2021ebc:	00c00144 	movi	r3,5
 2021ec0:	10c02d8d 	sth	r3,182(r2)
 2021ec4:	e0bff917 	ldw	r2,-28(fp)
 2021ec8:	00c002c4 	movi	r3,11
 2021ecc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 2021ed0:	e0bff917 	ldw	r2,-28(fp)
 2021ed4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 2021ed8:	e0bffa17 	ldw	r2,-24(fp)
 2021edc:	10bff304 	addi	r2,r2,-52
 2021ee0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 2021ee4:	e0bffb17 	ldw	r2,-20(fp)
 2021ee8:	10800c04 	addi	r2,r2,48
 2021eec:	e0fffc17 	ldw	r3,-16(fp)
 2021ef0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 2021ef4:	e0bffb17 	ldw	r2,-20(fp)
 2021ef8:	10800b04 	addi	r2,r2,44
 2021efc:	e0fffd17 	ldw	r3,-12(fp)
 2021f00:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 2021f04:	e0bffb17 	ldw	r2,-20(fp)
 2021f08:	10800a04 	addi	r2,r2,40
 2021f0c:	e0fff917 	ldw	r3,-28(fp)
 2021f10:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 2021f14:	008080b4 	movhi	r2,514
 2021f18:	10877004 	addi	r2,r2,7616
 2021f1c:	10c00104 	addi	r3,r2,4
 2021f20:	e0bffb17 	ldw	r2,-20(fp)
 2021f24:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 2021f28:	e0bffb17 	ldw	r2,-20(fp)
}
 2021f2c:	e037883a 	mov	sp,fp
 2021f30:	dfc00117 	ldw	ra,4(sp)
 2021f34:	df000017 	ldw	fp,0(sp)
 2021f38:	dec00204 	addi	sp,sp,8
 2021f3c:	f800283a 	ret

02021f40 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 2021f40:	defffe04 	addi	sp,sp,-8
 2021f44:	df000115 	stw	fp,4(sp)
 2021f48:	df000104 	addi	fp,sp,4
 2021f4c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 2021f50:	0001883a 	nop
 2021f54:	e037883a 	mov	sp,fp
 2021f58:	df000017 	ldw	fp,0(sp)
 2021f5c:	dec00104 	addi	sp,sp,4
 2021f60:	f800283a 	ret

02021f64 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 2021f64:	defffe04 	addi	sp,sp,-8
 2021f68:	df000115 	stw	fp,4(sp)
 2021f6c:	df000104 	addi	fp,sp,4
 2021f70:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 2021f74:	0001883a 	nop
 2021f78:	e037883a 	mov	sp,fp
 2021f7c:	df000017 	ldw	fp,0(sp)
 2021f80:	dec00104 	addi	sp,sp,4
 2021f84:	f800283a 	ret

02021f88 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 2021f88:	deffff04 	addi	sp,sp,-4
 2021f8c:	df000015 	stw	fp,0(sp)
 2021f90:	d839883a 	mov	fp,sp
}
 2021f94:	0001883a 	nop
 2021f98:	e037883a 	mov	sp,fp
 2021f9c:	df000017 	ldw	fp,0(sp)
 2021fa0:	dec00104 	addi	sp,sp,4
 2021fa4:	f800283a 	ret

02021fa8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 2021fa8:	deffff04 	addi	sp,sp,-4
 2021fac:	df000015 	stw	fp,0(sp)
 2021fb0:	d839883a 	mov	fp,sp
}
 2021fb4:	0001883a 	nop
 2021fb8:	e037883a 	mov	sp,fp
 2021fbc:	df000017 	ldw	fp,0(sp)
 2021fc0:	dec00104 	addi	sp,sp,4
 2021fc4:	f800283a 	ret

02021fc8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 2021fc8:	deffff04 	addi	sp,sp,-4
 2021fcc:	df000015 	stw	fp,0(sp)
 2021fd0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 2021fd4:	0001883a 	nop
 2021fd8:	e037883a 	mov	sp,fp
 2021fdc:	df000017 	ldw	fp,0(sp)
 2021fe0:	dec00104 	addi	sp,sp,4
 2021fe4:	f800283a 	ret

02021fe8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 2021fe8:	deffff04 	addi	sp,sp,-4
 2021fec:	df000015 	stw	fp,0(sp)
 2021ff0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 2021ff4:	0001883a 	nop
 2021ff8:	e037883a 	mov	sp,fp
 2021ffc:	df000017 	ldw	fp,0(sp)
 2022000:	dec00104 	addi	sp,sp,4
 2022004:	f800283a 	ret

02022008 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 2022008:	deffff04 	addi	sp,sp,-4
 202200c:	df000015 	stw	fp,0(sp)
 2022010:	d839883a 	mov	fp,sp
}
 2022014:	0001883a 	nop
 2022018:	e037883a 	mov	sp,fp
 202201c:	df000017 	ldw	fp,0(sp)
 2022020:	dec00104 	addi	sp,sp,4
 2022024:	f800283a 	ret

02022028 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 2022028:	deffff04 	addi	sp,sp,-4
 202202c:	df000015 	stw	fp,0(sp)
 2022030:	d839883a 	mov	fp,sp
}
 2022034:	0001883a 	nop
 2022038:	e037883a 	mov	sp,fp
 202203c:	df000017 	ldw	fp,0(sp)
 2022040:	dec00104 	addi	sp,sp,4
 2022044:	f800283a 	ret

02022048 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 2022048:	defffe04 	addi	sp,sp,-8
 202204c:	df000115 	stw	fp,4(sp)
 2022050:	df000104 	addi	fp,sp,4
 2022054:	e13fff15 	stw	r4,-4(fp)
}
 2022058:	0001883a 	nop
 202205c:	e037883a 	mov	sp,fp
 2022060:	df000017 	ldw	fp,0(sp)
 2022064:	dec00104 	addi	sp,sp,4
 2022068:	f800283a 	ret

0202206c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 202206c:	defffb04 	addi	sp,sp,-20
 2022070:	dfc00415 	stw	ra,16(sp)
 2022074:	df000315 	stw	fp,12(sp)
 2022078:	df000304 	addi	fp,sp,12
 202207c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2022080:	d0a03617 	ldw	r2,-32552(gp)
 2022084:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2022088:	00003106 	br	2022150 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 202208c:	e0bffd17 	ldw	r2,-12(fp)
 2022090:	10800217 	ldw	r2,8(r2)
 2022094:	1009883a 	mov	r4,r2
 2022098:	200a1e80 	call	200a1e8 <strlen>
 202209c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20220a0:	e0bffd17 	ldw	r2,-12(fp)
 20220a4:	10c00217 	ldw	r3,8(r2)
 20220a8:	e0bffe17 	ldw	r2,-8(fp)
 20220ac:	10bfffc4 	addi	r2,r2,-1
 20220b0:	1885883a 	add	r2,r3,r2
 20220b4:	10800003 	ldbu	r2,0(r2)
 20220b8:	10803fcc 	andi	r2,r2,255
 20220bc:	1080201c 	xori	r2,r2,128
 20220c0:	10bfe004 	addi	r2,r2,-128
 20220c4:	10800bd8 	cmpnei	r2,r2,47
 20220c8:	1000031e 	bne	r2,zero,20220d8 <alt_find_file+0x6c>
    {
      len -= 1;
 20220cc:	e0bffe17 	ldw	r2,-8(fp)
 20220d0:	10bfffc4 	addi	r2,r2,-1
 20220d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20220d8:	e0bffe17 	ldw	r2,-8(fp)
 20220dc:	e0ffff17 	ldw	r3,-4(fp)
 20220e0:	1885883a 	add	r2,r3,r2
 20220e4:	10800003 	ldbu	r2,0(r2)
 20220e8:	10803fcc 	andi	r2,r2,255
 20220ec:	1080201c 	xori	r2,r2,128
 20220f0:	10bfe004 	addi	r2,r2,-128
 20220f4:	10800be0 	cmpeqi	r2,r2,47
 20220f8:	1000081e 	bne	r2,zero,202211c <alt_find_file+0xb0>
 20220fc:	e0bffe17 	ldw	r2,-8(fp)
 2022100:	e0ffff17 	ldw	r3,-4(fp)
 2022104:	1885883a 	add	r2,r3,r2
 2022108:	10800003 	ldbu	r2,0(r2)
 202210c:	10803fcc 	andi	r2,r2,255
 2022110:	1080201c 	xori	r2,r2,128
 2022114:	10bfe004 	addi	r2,r2,-128
 2022118:	10000a1e 	bne	r2,zero,2022144 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 202211c:	e0bffd17 	ldw	r2,-12(fp)
 2022120:	10800217 	ldw	r2,8(r2)
 2022124:	e0fffe17 	ldw	r3,-8(fp)
 2022128:	180d883a 	mov	r6,r3
 202212c:	e17fff17 	ldw	r5,-4(fp)
 2022130:	1009883a 	mov	r4,r2
 2022134:	20224000 	call	2022400 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2022138:	1000021e 	bne	r2,zero,2022144 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 202213c:	e0bffd17 	ldw	r2,-12(fp)
 2022140:	00000706 	br	2022160 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2022144:	e0bffd17 	ldw	r2,-12(fp)
 2022148:	10800017 	ldw	r2,0(r2)
 202214c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2022150:	e0fffd17 	ldw	r3,-12(fp)
 2022154:	d0a03604 	addi	r2,gp,-32552
 2022158:	18bfcc1e 	bne	r3,r2,202208c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 202215c:	0005883a 	mov	r2,zero
}
 2022160:	e037883a 	mov	sp,fp
 2022164:	dfc00117 	ldw	ra,4(sp)
 2022168:	df000017 	ldw	fp,0(sp)
 202216c:	dec00204 	addi	sp,sp,8
 2022170:	f800283a 	ret

02022174 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2022174:	defff904 	addi	sp,sp,-28
 2022178:	dfc00615 	stw	ra,24(sp)
 202217c:	df000515 	stw	fp,20(sp)
 2022180:	df000504 	addi	fp,sp,20
 2022184:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2022188:	00bffa04 	movi	r2,-24
 202218c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 2022190:	d0a79f17 	ldw	r2,-24964(gp)
 2022194:	e0bffd15 	stw	r2,-12(fp)
 2022198:	e03ffe0d 	sth	zero,-8(fp)
 202219c:	e0bffe0b 	ldhu	r2,-8(fp)
 20221a0:	e0fffe84 	addi	r3,fp,-6
 20221a4:	180d883a 	mov	r6,r3
 20221a8:	100b883a 	mov	r5,r2
 20221ac:	e13ffd17 	ldw	r4,-12(fp)
 20221b0:	201dcd80 	call	201dcd8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20221b4:	e03ffb15 	stw	zero,-20(fp)
 20221b8:	00001906 	br	2022220 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 20221bc:	008080b4 	movhi	r2,514
 20221c0:	108f7304 	addi	r2,r2,15820
 20221c4:	e0fffb17 	ldw	r3,-20(fp)
 20221c8:	18c00324 	muli	r3,r3,12
 20221cc:	10c5883a 	add	r2,r2,r3
 20221d0:	10800017 	ldw	r2,0(r2)
 20221d4:	10000f1e 	bne	r2,zero,2022214 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 20221d8:	008080b4 	movhi	r2,514
 20221dc:	108f7304 	addi	r2,r2,15820
 20221e0:	e0fffb17 	ldw	r3,-20(fp)
 20221e4:	18c00324 	muli	r3,r3,12
 20221e8:	10c5883a 	add	r2,r2,r3
 20221ec:	e0ffff17 	ldw	r3,-4(fp)
 20221f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20221f4:	d0e03a17 	ldw	r3,-32536(gp)
 20221f8:	e0bffb17 	ldw	r2,-20(fp)
 20221fc:	1880020e 	bge	r3,r2,2022208 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 2022200:	e0bffb17 	ldw	r2,-20(fp)
 2022204:	d0a03a15 	stw	r2,-32536(gp)
      }
      rc = i;
 2022208:	e0bffb17 	ldw	r2,-20(fp)
 202220c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 2022210:	00000606 	br	202222c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2022214:	e0bffb17 	ldw	r2,-20(fp)
 2022218:	10800044 	addi	r2,r2,1
 202221c:	e0bffb15 	stw	r2,-20(fp)
 2022220:	e0bffb17 	ldw	r2,-20(fp)
 2022224:	10800810 	cmplti	r2,r2,32
 2022228:	103fe41e 	bne	r2,zero,20221bc <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 202222c:	d0a79f17 	ldw	r2,-24964(gp)
 2022230:	1009883a 	mov	r4,r2
 2022234:	201e0500 	call	201e050 <OSSemPost>

  return rc;
 2022238:	e0bffc17 	ldw	r2,-16(fp)
}
 202223c:	e037883a 	mov	sp,fp
 2022240:	dfc00117 	ldw	ra,4(sp)
 2022244:	df000017 	ldw	fp,0(sp)
 2022248:	dec00204 	addi	sp,sp,8
 202224c:	f800283a 	ret

02022250 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2022250:	defffb04 	addi	sp,sp,-20
 2022254:	df000415 	stw	fp,16(sp)
 2022258:	df000404 	addi	fp,sp,16
 202225c:	e13ffe15 	stw	r4,-8(fp)
 2022260:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2022264:	e0bfff17 	ldw	r2,-4(fp)
 2022268:	10840070 	cmpltui	r2,r2,4097
 202226c:	1000021e 	bne	r2,zero,2022278 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2022270:	00840004 	movi	r2,4096
 2022274:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2022278:	e0fffe17 	ldw	r3,-8(fp)
 202227c:	e0bfff17 	ldw	r2,-4(fp)
 2022280:	1885883a 	add	r2,r3,r2
 2022284:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2022288:	e0bffe17 	ldw	r2,-8(fp)
 202228c:	e0bffc15 	stw	r2,-16(fp)
 2022290:	00000506 	br	20222a8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2022294:	e0bffc17 	ldw	r2,-16(fp)
 2022298:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 202229c:	e0bffc17 	ldw	r2,-16(fp)
 20222a0:	10800804 	addi	r2,r2,32
 20222a4:	e0bffc15 	stw	r2,-16(fp)
 20222a8:	e0fffc17 	ldw	r3,-16(fp)
 20222ac:	e0bffd17 	ldw	r2,-12(fp)
 20222b0:	18bff836 	bltu	r3,r2,2022294 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 20222b4:	e0bffe17 	ldw	r2,-8(fp)
 20222b8:	108007cc 	andi	r2,r2,31
 20222bc:	10000226 	beq	r2,zero,20222c8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 20222c0:	e0bffc17 	ldw	r2,-16(fp)
 20222c4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 20222c8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 20222cc:	0001883a 	nop
 20222d0:	e037883a 	mov	sp,fp
 20222d4:	df000017 	ldw	fp,0(sp)
 20222d8:	dec00104 	addi	sp,sp,4
 20222dc:	f800283a 	ret

020222e0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 20222e0:	defffe04 	addi	sp,sp,-8
 20222e4:	df000115 	stw	fp,4(sp)
 20222e8:	df000104 	addi	fp,sp,4
 20222ec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 20222f0:	e0bfff17 	ldw	r2,-4(fp)
 20222f4:	10bffe84 	addi	r2,r2,-6
 20222f8:	10c00428 	cmpgeui	r3,r2,16
 20222fc:	18001a1e 	bne	r3,zero,2022368 <alt_exception_cause_generated_bad_addr+0x88>
 2022300:	100690ba 	slli	r3,r2,2
 2022304:	008080b4 	movhi	r2,514
 2022308:	1088c604 	addi	r2,r2,8984
 202230c:	1885883a 	add	r2,r3,r2
 2022310:	10800017 	ldw	r2,0(r2)
 2022314:	1000683a 	jmp	r2
 2022318:	02022358 	cmpnei	r8,zero,2189
 202231c:	02022358 	cmpnei	r8,zero,2189
 2022320:	02022368 	cmpgeui	r8,zero,2189
 2022324:	02022368 	cmpgeui	r8,zero,2189
 2022328:	02022368 	cmpgeui	r8,zero,2189
 202232c:	02022358 	cmpnei	r8,zero,2189
 2022330:	02022360 	cmpeqi	r8,zero,2189
 2022334:	02022368 	cmpgeui	r8,zero,2189
 2022338:	02022358 	cmpnei	r8,zero,2189
 202233c:	02022358 	cmpnei	r8,zero,2189
 2022340:	02022368 	cmpgeui	r8,zero,2189
 2022344:	02022358 	cmpnei	r8,zero,2189
 2022348:	02022360 	cmpeqi	r8,zero,2189
 202234c:	02022368 	cmpgeui	r8,zero,2189
 2022350:	02022368 	cmpgeui	r8,zero,2189
 2022354:	02022358 	cmpnei	r8,zero,2189
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2022358:	00800044 	movi	r2,1
 202235c:	00000306 	br	202236c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2022360:	0005883a 	mov	r2,zero
 2022364:	00000106 	br	202236c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2022368:	0005883a 	mov	r2,zero
  }
}
 202236c:	e037883a 	mov	sp,fp
 2022370:	df000017 	ldw	fp,0(sp)
 2022374:	dec00104 	addi	sp,sp,4
 2022378:	f800283a 	ret

0202237c <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 202237c:	defffd04 	addi	sp,sp,-12
 2022380:	dfc00215 	stw	ra,8(sp)
 2022384:	df000115 	stw	fp,4(sp)
 2022388:	df000104 	addi	fp,sp,4
 202238c:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 2022390:	000f883a 	mov	r7,zero
 2022394:	000d883a 	mov	r6,zero
 2022398:	e17fff17 	ldw	r5,-4(fp)
 202239c:	0009883a 	mov	r4,zero
 20223a0:	20225340 	call	2022534 <__register_exitproc>
}
 20223a4:	e037883a 	mov	sp,fp
 20223a8:	dfc00117 	ldw	ra,4(sp)
 20223ac:	df000017 	ldw	fp,0(sp)
 20223b0:	dec00204 	addi	sp,sp,8
 20223b4:	f800283a 	ret

020223b8 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 20223b8:	defffd04 	addi	sp,sp,-12
 20223bc:	dfc00215 	stw	ra,8(sp)
 20223c0:	df000115 	stw	fp,4(sp)
 20223c4:	df000104 	addi	fp,sp,4
 20223c8:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 20223cc:	000b883a 	mov	r5,zero
 20223d0:	e13fff17 	ldw	r4,-4(fp)
 20223d4:	20226a40 	call	20226a4 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 20223d8:	d0a03117 	ldw	r2,-32572(gp)
 20223dc:	10800f17 	ldw	r2,60(r2)
 20223e0:	10000526 	beq	r2,zero,20223f8 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 20223e4:	d0a03117 	ldw	r2,-32572(gp)
 20223e8:	10800f17 	ldw	r2,60(r2)
 20223ec:	d0e03117 	ldw	r3,-32572(gp)
 20223f0:	1809883a 	mov	r4,r3
 20223f4:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 20223f8:	e13fff17 	ldw	r4,-4(fp)
 20223fc:	20228900 	call	2022890 <_exit>

02022400 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 2022400:	defff804 	addi	sp,sp,-32
 2022404:	df000715 	stw	fp,28(sp)
 2022408:	df000704 	addi	fp,sp,28
 202240c:	e13ffd15 	stw	r4,-12(fp)
 2022410:	e17ffe15 	stw	r5,-8(fp)
 2022414:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 2022418:	e0bffd17 	ldw	r2,-12(fp)
 202241c:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 2022420:	e0bffe17 	ldw	r2,-8(fp)
 2022424:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 2022428:	e0bfff17 	ldw	r2,-4(fp)
 202242c:	10800130 	cmpltui	r2,r2,4
 2022430:	1000371e 	bne	r2,zero,2022510 <memcmp+0x110>
 2022434:	e0fff917 	ldw	r3,-28(fp)
 2022438:	e0bffa17 	ldw	r2,-24(fp)
 202243c:	1884b03a 	or	r2,r3,r2
 2022440:	108000cc 	andi	r2,r2,3
 2022444:	1000321e 	bne	r2,zero,2022510 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 2022448:	e0bff917 	ldw	r2,-28(fp)
 202244c:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 2022450:	e0bffa17 	ldw	r2,-24(fp)
 2022454:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 2022458:	00000e06 	br	2022494 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 202245c:	e0bffb17 	ldw	r2,-20(fp)
 2022460:	10c00017 	ldw	r3,0(r2)
 2022464:	e0bffc17 	ldw	r2,-16(fp)
 2022468:	10800017 	ldw	r2,0(r2)
 202246c:	18800d1e 	bne	r3,r2,20224a4 <memcmp+0xa4>
   	    break;
          a1++;
 2022470:	e0bffb17 	ldw	r2,-20(fp)
 2022474:	10800104 	addi	r2,r2,4
 2022478:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 202247c:	e0bffc17 	ldw	r2,-16(fp)
 2022480:	10800104 	addi	r2,r2,4
 2022484:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 2022488:	e0bfff17 	ldw	r2,-4(fp)
 202248c:	10bfff04 	addi	r2,r2,-4
 2022490:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 2022494:	e0bfff17 	ldw	r2,-4(fp)
 2022498:	10800128 	cmpgeui	r2,r2,4
 202249c:	103fef1e 	bne	r2,zero,202245c <memcmp+0x5c>
 20224a0:	00000106 	br	20224a8 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 20224a4:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 20224a8:	e0bffb17 	ldw	r2,-20(fp)
 20224ac:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 20224b0:	e0bffc17 	ldw	r2,-16(fp)
 20224b4:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 20224b8:	00001506 	br	2022510 <memcmp+0x110>
    {
      if (*s1 != *s2)
 20224bc:	e0bff917 	ldw	r2,-28(fp)
 20224c0:	10c00003 	ldbu	r3,0(r2)
 20224c4:	e0bffa17 	ldw	r2,-24(fp)
 20224c8:	10800003 	ldbu	r2,0(r2)
 20224cc:	18c03fcc 	andi	r3,r3,255
 20224d0:	10803fcc 	andi	r2,r2,255
 20224d4:	18800826 	beq	r3,r2,20224f8 <memcmp+0xf8>
	return *s1 - *s2;
 20224d8:	e0bff917 	ldw	r2,-28(fp)
 20224dc:	10800003 	ldbu	r2,0(r2)
 20224e0:	10c03fcc 	andi	r3,r2,255
 20224e4:	e0bffa17 	ldw	r2,-24(fp)
 20224e8:	10800003 	ldbu	r2,0(r2)
 20224ec:	10803fcc 	andi	r2,r2,255
 20224f0:	1885c83a 	sub	r2,r3,r2
 20224f4:	00000b06 	br	2022524 <memcmp+0x124>
      s1++;
 20224f8:	e0bff917 	ldw	r2,-28(fp)
 20224fc:	10800044 	addi	r2,r2,1
 2022500:	e0bff915 	stw	r2,-28(fp)
      s2++;
 2022504:	e0bffa17 	ldw	r2,-24(fp)
 2022508:	10800044 	addi	r2,r2,1
 202250c:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 2022510:	e0bfff17 	ldw	r2,-4(fp)
 2022514:	10ffffc4 	addi	r3,r2,-1
 2022518:	e0ffff15 	stw	r3,-4(fp)
 202251c:	103fe71e 	bne	r2,zero,20224bc <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 2022520:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2022524:	e037883a 	mov	sp,fp
 2022528:	df000017 	ldw	fp,0(sp)
 202252c:	dec00104 	addi	sp,sp,4
 2022530:	f800283a 	ret

02022534 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 2022534:	defff804 	addi	sp,sp,-32
 2022538:	dfc00715 	stw	ra,28(sp)
 202253c:	df000615 	stw	fp,24(sp)
 2022540:	dc000515 	stw	r16,20(sp)
 2022544:	df000604 	addi	fp,sp,24
 2022548:	e13ffb15 	stw	r4,-20(fp)
 202254c:	e17ffc15 	stw	r5,-16(fp)
 2022550:	e1bffd15 	stw	r6,-12(fp)
 2022554:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 2022558:	d0a03117 	ldw	r2,-32572(gp)
 202255c:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 2022560:	8000041e 	bne	r16,zero,2022574 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 2022564:	d0a03117 	ldw	r2,-32572(gp)
 2022568:	d0e03117 	ldw	r3,-32572(gp)
 202256c:	1c005304 	addi	r16,r3,332
 2022570:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 2022574:	80800117 	ldw	r2,4(r16)
 2022578:	10800810 	cmplti	r2,r2,32
 202257c:	1000131e 	bne	r2,zero,20225cc <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 2022580:	00800034 	movhi	r2,0
 2022584:	10800004 	addi	r2,r2,0
 2022588:	1000021e 	bne	r2,zero,2022594 <__register_exitproc+0x60>
	return -1;
 202258c:	00bfffc4 	movi	r2,-1
 2022590:	00003e06 	br	202268c <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 2022594:	01006404 	movi	r4,400
 2022598:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 202259c:	1021883a 	mov	r16,r2
      if (p == NULL)
 20225a0:	8000021e 	bne	r16,zero,20225ac <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 20225a4:	00bfffc4 	movi	r2,-1
 20225a8:	00003806 	br	202268c <__register_exitproc+0x158>
	}
      p->_ind = 0;
 20225ac:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 20225b0:	d0a03117 	ldw	r2,-32572(gp)
 20225b4:	10805217 	ldw	r2,328(r2)
 20225b8:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 20225bc:	d0a03117 	ldw	r2,-32572(gp)
 20225c0:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 20225c4:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 20225c8:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 20225cc:	e0bffb17 	ldw	r2,-20(fp)
 20225d0:	10002426 	beq	r2,zero,2022664 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 20225d4:	80802204 	addi	r2,r16,136
 20225d8:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 20225dc:	80800117 	ldw	r2,4(r16)
 20225e0:	e0fffa17 	ldw	r3,-24(fp)
 20225e4:	1085883a 	add	r2,r2,r2
 20225e8:	1085883a 	add	r2,r2,r2
 20225ec:	1885883a 	add	r2,r3,r2
 20225f0:	e0fffd17 	ldw	r3,-12(fp)
 20225f4:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 20225f8:	e0bffa17 	ldw	r2,-24(fp)
 20225fc:	10804017 	ldw	r2,256(r2)
 2022600:	80c00117 	ldw	r3,4(r16)
 2022604:	01000044 	movi	r4,1
 2022608:	20c6983a 	sll	r3,r4,r3
 202260c:	10c6b03a 	or	r3,r2,r3
 2022610:	e0bffa17 	ldw	r2,-24(fp)
 2022614:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 2022618:	80800117 	ldw	r2,4(r16)
 202261c:	e0fffa17 	ldw	r3,-24(fp)
 2022620:	10800804 	addi	r2,r2,32
 2022624:	1085883a 	add	r2,r2,r2
 2022628:	1085883a 	add	r2,r2,r2
 202262c:	1885883a 	add	r2,r3,r2
 2022630:	e0fffe17 	ldw	r3,-8(fp)
 2022634:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 2022638:	e0bffb17 	ldw	r2,-20(fp)
 202263c:	10800098 	cmpnei	r2,r2,2
 2022640:	1000081e 	bne	r2,zero,2022664 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 2022644:	e0bffa17 	ldw	r2,-24(fp)
 2022648:	10804117 	ldw	r2,260(r2)
 202264c:	80c00117 	ldw	r3,4(r16)
 2022650:	01000044 	movi	r4,1
 2022654:	20c6983a 	sll	r3,r4,r3
 2022658:	10c6b03a 	or	r3,r2,r3
 202265c:	e0bffa17 	ldw	r2,-24(fp)
 2022660:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 2022664:	80800117 	ldw	r2,4(r16)
 2022668:	10c00044 	addi	r3,r2,1
 202266c:	80c00115 	stw	r3,4(r16)
 2022670:	10800084 	addi	r2,r2,2
 2022674:	1085883a 	add	r2,r2,r2
 2022678:	1085883a 	add	r2,r2,r2
 202267c:	8085883a 	add	r2,r16,r2
 2022680:	e0fffc17 	ldw	r3,-16(fp)
 2022684:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 2022688:	0005883a 	mov	r2,zero
}
 202268c:	e6ffff04 	addi	sp,fp,-4
 2022690:	dfc00217 	ldw	ra,8(sp)
 2022694:	df000117 	ldw	fp,4(sp)
 2022698:	dc000017 	ldw	r16,0(sp)
 202269c:	dec00304 	addi	sp,sp,12
 20226a0:	f800283a 	ret

020226a4 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 20226a4:	defff504 	addi	sp,sp,-44
 20226a8:	dfc00a15 	stw	ra,40(sp)
 20226ac:	df000915 	stw	fp,36(sp)
 20226b0:	dc800815 	stw	r18,32(sp)
 20226b4:	dc400715 	stw	r17,28(sp)
 20226b8:	dc000615 	stw	r16,24(sp)
 20226bc:	df000904 	addi	fp,sp,36
 20226c0:	e13ffb15 	stw	r4,-20(fp)
 20226c4:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 20226c8:	d0a03117 	ldw	r2,-32572(gp)
 20226cc:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 20226d0:	d0a03117 	ldw	r2,-32572(gp)
 20226d4:	10805204 	addi	r2,r2,328
 20226d8:	e0bff715 	stw	r2,-36(fp)
  while (p)
 20226dc:	00006006 	br	2022860 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 20226e0:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 20226e4:	80800117 	ldw	r2,4(r16)
 20226e8:	147fffc4 	addi	r17,r2,-1
 20226ec:	00004a06 	br	2022818 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 20226f0:	00800044 	movi	r2,1
 20226f4:	1444983a 	sll	r2,r2,r17
 20226f8:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 20226fc:	e0bffc17 	ldw	r2,-16(fp)
 2022700:	10000826 	beq	r2,zero,2022724 <__call_exitprocs+0x80>
 2022704:	90004026 	beq	r18,zero,2022808 <__call_exitprocs+0x164>
 2022708:	88800804 	addi	r2,r17,32
 202270c:	1085883a 	add	r2,r2,r2
 2022710:	1085883a 	add	r2,r2,r2
 2022714:	9085883a 	add	r2,r18,r2
 2022718:	10c00017 	ldw	r3,0(r2)
 202271c:	e0bffc17 	ldw	r2,-16(fp)
 2022720:	1880391e 	bne	r3,r2,2022808 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 2022724:	88800084 	addi	r2,r17,2
 2022728:	1085883a 	add	r2,r2,r2
 202272c:	1085883a 	add	r2,r2,r2
 2022730:	8085883a 	add	r2,r16,r2
 2022734:	10800017 	ldw	r2,0(r2)
 2022738:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 202273c:	80800117 	ldw	r2,4(r16)
 2022740:	10bfffc4 	addi	r2,r2,-1
 2022744:	1440041e 	bne	r2,r17,2022758 <__call_exitprocs+0xb4>
	    p->_ind--;
 2022748:	80800117 	ldw	r2,4(r16)
 202274c:	10bfffc4 	addi	r2,r2,-1
 2022750:	80800115 	stw	r2,4(r16)
 2022754:	00000506 	br	202276c <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 2022758:	88800084 	addi	r2,r17,2
 202275c:	1085883a 	add	r2,r2,r2
 2022760:	1085883a 	add	r2,r2,r2
 2022764:	8085883a 	add	r2,r16,r2
 2022768:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 202276c:	e0bff917 	ldw	r2,-28(fp)
 2022770:	10002726 	beq	r2,zero,2022810 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 2022774:	80800117 	ldw	r2,4(r16)
 2022778:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 202277c:	90000426 	beq	r18,zero,2022790 <__call_exitprocs+0xec>
 2022780:	90c04017 	ldw	r3,256(r18)
 2022784:	e0bff817 	ldw	r2,-32(fp)
 2022788:	1884703a 	and	r2,r3,r2
 202278c:	1000031e 	bne	r2,zero,202279c <__call_exitprocs+0xf8>
	    fn ();
 2022790:	e0bff917 	ldw	r2,-28(fp)
 2022794:	103ee83a 	callr	r2
 2022798:	00001406 	br	20227ec <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 202279c:	90c04117 	ldw	r3,260(r18)
 20227a0:	e0bff817 	ldw	r2,-32(fp)
 20227a4:	1884703a 	and	r2,r3,r2
 20227a8:	1000091e 	bne	r2,zero,20227d0 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 20227ac:	8c45883a 	add	r2,r17,r17
 20227b0:	1085883a 	add	r2,r2,r2
 20227b4:	9085883a 	add	r2,r18,r2
 20227b8:	10c00017 	ldw	r3,0(r2)
 20227bc:	e0bff917 	ldw	r2,-28(fp)
 20227c0:	180b883a 	mov	r5,r3
 20227c4:	e13ffb17 	ldw	r4,-20(fp)
 20227c8:	103ee83a 	callr	r2
 20227cc:	00000706 	br	20227ec <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 20227d0:	8c45883a 	add	r2,r17,r17
 20227d4:	1085883a 	add	r2,r2,r2
 20227d8:	9085883a 	add	r2,r18,r2
 20227dc:	10c00017 	ldw	r3,0(r2)
 20227e0:	e0bff917 	ldw	r2,-28(fp)
 20227e4:	1809883a 	mov	r4,r3
 20227e8:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 20227ec:	80c00117 	ldw	r3,4(r16)
 20227f0:	e0bffa17 	ldw	r2,-24(fp)
 20227f4:	18bfb41e 	bne	r3,r2,20226c8 <__call_exitprocs+0x24>
 20227f8:	e0bff717 	ldw	r2,-36(fp)
 20227fc:	10800017 	ldw	r2,0(r2)
 2022800:	143fb11e 	bne	r2,r16,20226c8 <__call_exitprocs+0x24>
 2022804:	00000306 	br	2022814 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 2022808:	0001883a 	nop
 202280c:	00000106 	br	2022814 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 2022810:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 2022814:	8c7fffc4 	addi	r17,r17,-1
 2022818:	883fb50e 	bge	r17,zero,20226f0 <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 202281c:	00800034 	movhi	r2,0
 2022820:	10800004 	addi	r2,r2,0
 2022824:	10001026 	beq	r2,zero,2022868 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 2022828:	80800117 	ldw	r2,4(r16)
 202282c:	10000a1e 	bne	r2,zero,2022858 <__call_exitprocs+0x1b4>
 2022830:	80800017 	ldw	r2,0(r16)
 2022834:	10000826 	beq	r2,zero,2022858 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 2022838:	80c00017 	ldw	r3,0(r16)
 202283c:	e0bff717 	ldw	r2,-36(fp)
 2022840:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 2022844:	8009883a 	mov	r4,r16
 2022848:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
	  p = *lastp;
 202284c:	e0bff717 	ldw	r2,-36(fp)
 2022850:	14000017 	ldw	r16,0(r2)
 2022854:	00000206 	br	2022860 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 2022858:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 202285c:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 2022860:	803f9f1e 	bne	r16,zero,20226e0 <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 2022864:	00000106 	br	202286c <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 2022868:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 202286c:	0001883a 	nop
 2022870:	e6fffd04 	addi	sp,fp,-12
 2022874:	dfc00417 	ldw	ra,16(sp)
 2022878:	df000317 	ldw	fp,12(sp)
 202287c:	dc800217 	ldw	r18,8(sp)
 2022880:	dc400117 	ldw	r17,4(sp)
 2022884:	dc000017 	ldw	r16,0(sp)
 2022888:	dec00504 	addi	sp,sp,20
 202288c:	f800283a 	ret

02022890 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2022890:	defffd04 	addi	sp,sp,-12
 2022894:	df000215 	stw	fp,8(sp)
 2022898:	df000204 	addi	fp,sp,8
 202289c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20228a0:	d027a745 	stb	zero,-24931(gp)
 20228a4:	e0bfff17 	ldw	r2,-4(fp)
 20228a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 20228ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20228b0:	10000226 	beq	r2,zero,20228bc <_exit+0x2c>
    ALT_SIM_FAIL();
 20228b4:	002af070 	cmpltui	zero,zero,43969
 20228b8:	00000106 	br	20228c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 20228bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20228c0:	003fff06 	br	20228c0 <_exit+0x30>
