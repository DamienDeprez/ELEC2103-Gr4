
Projet-Master1.elf:     file format elf32-littlenios2
Projet-Master1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000244

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001ed68 memsz 0x0001ed68 flags r-x
    LOAD off    0x0001fd88 vaddr 0x0201ed88 paddr 0x0202092c align 2**12
         filesz 0x00001ba4 memsz 0x00001ba4 flags rw-
    LOAD off    0x000224d0 vaddr 0x020224d0 paddr 0x020224d0 align 2**12
         filesz 0x00000000 memsz 0x0000b42c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e464  02000244  02000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006e0  0201e6a8  0201e6a8  0001f6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba4  0201ed88  0202092c  0001fd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b42c  020224d0  020224d0  000224d0  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  0002192c  2**0
                  CONTENTS
  7 .sdram_controller 00000000  0202d8fc  0202d8fc  0002192c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002192c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010e8  00000000  00000000  00021950  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002bcbf  00000000  00000000  00022a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a364  00000000  00000000  0004e6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000da73  00000000  00000000  00058a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003708  00000000  00000000  000664d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000544e  00000000  00000000  00069bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00009061  00000000  00000000  0006f026  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00078088  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001398  00000000  00000000  000780b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0007e322  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007e328  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e32b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e32c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007e32d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007e331  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007e335  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007e339  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007e342  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007e34b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0007e354  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  0007e35d  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d7f  00000000  00000000  0007e391  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000575f4  00000000  00000000  00082110  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000244 l    d  .text	00000000 .text
0201e6a8 l    d  .rodata	00000000 .rodata
0201ed88 l    d  .rwdata	00000000 .rwdata
020224d0 l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
0202d8fc l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Projet-Master1_bsp//obj/HAL/src/crt0.o
0200028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 physics.c
00000000 l    df *ABS*	00000000 s_fmin.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02005120 l     F .text	000000f0 __sbprintf
02007330 l     F .text	0000020c cvt
0200753c l     F .text	00000140 exponent
0201ea5a l     O .rodata	00000010 blanks.4403
0201ea6a l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200781c l     F .text	000003b4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02009b28 l     F .text	000000f4 std
02022504 l     O .bss	00000004 __sfp_lock
02022508 l     O .bss	00000004 __sinit_lock
0200a024 l     F .text	00000024 __fp_lock
0200a048 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0201edb8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0201f1dc l     O .rwdata	00000038 lconv
0201f214 l     O .rwdata	00000020 lc_ctype_charset
0201f234 l     O .rwdata	00000020 lc_message_charset
02022518 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0200b378 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0201ebc0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200f224 l     F .text	000000f0 __sbprintf
0201ec16 l     O .rodata	00000010 blanks.4348
0201ec26 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
02013160 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0201326c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02013298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02013384 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02013464 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02013550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0201371c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020208a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02013968 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
020208a4 l     O .rwdata	00000004 lockid
0202253c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
020208a8 l     O .rwdata	00000004 lockid
02022544 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02015398 l     F .text	00000048 OS_InitMisc
020153e0 l     F .text	0000006c OS_InitRdyList
0201554c l     F .text	000000e4 OS_InitTCBList
020152b8 l     F .text	000000e0 OS_InitEventList
0201544c l     F .text	00000080 OS_InitTaskIdle
020154cc l     F .text	00000080 OS_InitTaskStat
020157bc l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
020174cc l     F .text	000000f4 OS_FlagTaskRdy
0201728c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201c038 l     F .text	00000034 alt_dev_reg
0201f804 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201c3b0 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0201c654 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0201ce30 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201d098 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201d50c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0201d64c l     F .text	0000003c alt_get_errno
0201d688 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020225ac l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
020225a8 g     O .bss	00000004 alt_instruction_exception_handler
0200de30 g     F .text	000000b0 _mprec_log10
020208f6 g     O .rwdata	00000002 OSTaskNameSize
0200dfb0 g     F .text	00000134 __any_on
02010d0c g     F .text	00000060 _isatty_r
0201eb98 g     O .rodata	00000028 __mprec_tinytens
02013660 g     F .text	000000bc alt_main
020224d0 g     O .bss	00000004 MailBox9
02004edc g     F .text	00000118 _puts_r
0202d7fc g     O .bss	00000100 alt_irq
020224d4 g     O .bss	00000004 MailBox6
02010d6c g     F .text	00000070 _lseek_r
020187b4 g     F .text	000000cc OS_MemInit
0202092c g       *ABS*	00000000 __flash_rwdata_start
0201bfd8 g     F .text	00000060 OSTimeSet
020125d8 g     F .text	00000088 .hidden __eqdf2
0201400c g     F .text	00000610 OSEventPendMulti
0202d8fc g       *ABS*	00000000 __alt_heap_start
0201dc94 g     F .text	00000024 OSTaskCreateHook
020225d8 g     O .bss	00002000 task1_stk
02004e74 g     F .text	00000068 printf
020208ce g     O .rwdata	00000002 OSMboxEn
02014674 g     F .text	0000004c OSIntEnter
02010ff4 g     F .text	000000d4 _wcrtomb_r
0200eeb4 g     F .text	000000a0 __sseek
02009ecc g     F .text	000000d8 __sinit
02010e4c g     F .text	00000168 __swbuf_r
020208de g     O .rwdata	00000002 OSQEn
0200afa8 g     F .text	00000084 _setlocale_r
02009c1c g     F .text	000000a4 __sfmoreglue
02013ce0 g     F .text	000000cc __malloc_unlock
0201dcfc g     F .text	00000020 OSTaskStatHook
0202254c g     O .bss	00000001 OSLockNesting
0202091c g     O .rwdata	00000002 OSDataSize
0202254d g     O .bss	00000001 OSRunning
0200c464 g     F .text	00000208 memmove
0201dd3c g     F .text	00000020 OSInitHookBegin
02020914 g     O .rwdata	00000002 OSTmrSize
02009e98 g     F .text	00000034 _cleanup
0200c66c g     F .text	00000130 _Balloc
02022550 g     O .bss	00000004 OSIdleCtr
02003d0c g     F .text	000000dc .hidden __gtdf2
0201da44 g     F .text	00000024 altera_nios2_gen2_irq_init
0201db14 g       .text	00000000 OSStartTsk
02015aec g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000001c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
0202091a g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
020208ba g     O .rwdata	00000002 OSEventSize
02022554 g     O .bss	00000001 OSPrioHighRdy
02010ca4 g     F .text	00000068 _fstat_r
0201dcb8 g     F .text	00000024 OSTaskDelHook
02022528 g     O .bss	00000004 errno
0200edd0 g     F .text	00000030 __seofread
0201daf4 g       .text	00000000 OSStartHighRdy
0201aa80 g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02016dd4 g     F .text	00000060 OSFlagPendGetFlagsRdy
020208fa g     O .rwdata	00000002 OSTaskStatStkSize
02015f50 g     F .text	00000308 OSFlagAccept
02018dec g     F .text	000000b8 OSQFlush
02018880 g     F .text	00000140 OSQAccept
02022534 g     O .bss	00000004 alt_argv
02028870 g       *ABS*	00000000 _gp
0201a8d4 g     F .text	000001ac OSTaskCreate
02003180 g     F .text	000000f4 damping
0201a3e4 g     F .text	000004f0 OSTaskChangePrio
02022548 g     O .bss	00000004 alt_heapsem
02002704 g     F .text	000000cc task4
02015dc0 g     F .text	00000190 OSDebugInit
0201ac64 g     F .text	00000344 OSTaskDel
0201f684 g     O .rwdata	00000180 alt_fd_list
0202a5d8 g     O .bss	00000370 OSFlagTbl
02015098 g     F .text	000000b8 OS_EventTaskRemove
0201ddc0 g     F .text	00000090 alt_find_dev
02004ac4 g     F .text	00000188 memcpy
020208e4 g     O .rwdata	00000002 OSRdyTblSize
020224d8 g     O .bss	00000004 MailBox3
02009e54 g     F .text	00000044 _cleanup_r
02012fdc g     F .text	000000dc .hidden __floatsidf
0201d5d0 g     F .text	0000007c alt_io_redirect
02003de8 g     F .text	000000f4 .hidden __ltdf2
0201e6a8 g       *ABS*	00000000 __DTOR_END__
02004ff4 g     F .text	00000038 puts
0201e0c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02013dac g     F .text	00000120 OSEventNameGet
020208c8 g     O .rwdata	00000002 OSFlagMax
02003320 g     F .text	00000104 __fpclassifyd
0200dd14 g     F .text	0000011c __ratio
020146c0 g     F .text	000000f8 OSIntExit
0200f314 g     F .text	00000050 __vfiprintf_internal
02020902 g     O .rwdata	00000002 OSTCBSize
02022555 g     O .bss	00000001 OSPrioCur
0201c8b0 g     F .text	000002bc altera_avalon_jtag_uart_read
02004e10 g     F .text	00000064 _printf_r
02004a08 g     F .text	00000064 .hidden __udivsi3
020133c0 g     F .text	000000a4 isatty
020208e8 g     O .rwdata	00000002 OSStkWidth
0201eaa8 g     O .rodata	000000c8 __mprec_tens
020208dc g     O .rwdata	00000002 OSPtrSize
0200b02c g     F .text	00000024 __locale_charset
020208bc g     O .rwdata	00000002 OSEventTblSize
0201da68 g       .text	00000000 OSCtxSw
0201e034 g     F .text	00000090 alt_icache_flush
0202251c g     O .bss	00000004 __malloc_top_pad
02022558 g     O .bss	00000004 OSTCBList
0202252c g     O .bss	00000004 alt_fd_list_lock
02020878 g     O .rwdata	00000004 __mb_cur_max
0200b0b4 g     F .text	00000028 _localeconv_r
0200ccb4 g     F .text	00000058 __i2b
0200a818 g     F .text	000005dc __sfvwrite_r
0202a948 g     O .bss	00000c30 OSMemTbl
0202255c g     O .bss	00000001 OSTickStepState
0200ecd4 g     F .text	00000060 _sbrk_r
020208e0 g     O .rwdata	00000002 OSQMax
0202b578 g     O .bss	00000800 OSTaskStatStk
020183f0 g     F .text	000000f0 OSMemNameGet
020245d8 g     O .bss	00002000 task4_stk
020208c0 g     O .rwdata	00000002 OSFlagEn
02010ddc g     F .text	00000070 _read_r
02020906 g     O .rwdata	00000002 OSTimeTickHookEn
0201929c g     F .text	00000168 OSQPost
020175c0 g     F .text	000000a4 OS_FlagUnlink
02020898 g     O .rwdata	00000004 alt_max_fd
02015684 g     F .text	00000068 OS_MemCopy
020156ec g     F .text	000000d0 OS_Sched
0201085c g     F .text	0000012c _fclose_r
02018300 g     F .text	000000f0 OSMemGet
0201801c g     F .text	00000110 OSMboxQuery
0201b290 g     F .text	000001b4 OSTaskNameSet
02009ad4 g     F .text	00000054 fflush
02022520 g     O .bss	00000004 __malloc_max_sbrked_mem
02022560 g     O .bss	00000004 OSCtxSwCtr
0201dd1c g     F .text	00000020 OSTimeTickHook
020208ca g     O .rwdata	00000002 OSFlagNameSize
020224dc g     O .bss	00000004 AnimationFlagGrp
020045f4 g     F .text	00000110 .hidden __extendsfdf2
02015150 g     F .text	00000100 OS_EventTaskRemoveMulti
02011d2c g     F .text	000008ac .hidden __adddf3
02014f48 g     F .text	00000150 OS_EventTaskWaitMulti
0200d8d0 g     F .text	00000204 __b2d
020208e2 g     O .rwdata	00000002 OSQSize
020117f4 g     F .text	00000538 .hidden __umoddi3
0201358c g     F .text	000000d4 lseek
02019d4c g     F .text	0000020c OSSemPend
02002c68 g     F .text	00000064 momentum
02020874 g     O .rwdata	00000004 _global_impure_ptr
0200e0e4 g     F .text	00000bf0 _realloc_r
020208cc g     O .rwdata	00000002 OSLowestPrio
0202d8fc g       *ABS*	00000000 __bss_end
0201d41c g     F .text	000000f0 alt_iic_isr_register
0201dd9c g     F .text	00000024 OSTCBInitHook
02020912 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0201d93c g     F .text	00000108 alt_tick
02017db0 g     F .text	00000110 OSMboxPost
0201127c g     F .text	00000578 .hidden __udivdi3
02010bb4 g     F .text	00000088 _fputwc_r
020208b4 g     O .rwdata	00000002 OSEventEn
0201eb70 g     O .rodata	00000028 __mprec_bigtens
0200c9ac g     F .text	0000018c __s2b
0202090e g     O .rwdata	00000002 OSTmrCfgNameSize
020130b8 g     F .text	000000a8 .hidden __floatunsidf
0200d44c g     F .text	00000114 __mcmp
0200a06c g     F .text	00000040 __fp_lock_all
0201d3d0 g     F .text	0000004c alt_ic_irq_enabled
020224e0 g     O .bss	00000004 MailBox5
020173ec g     F .text	000000e0 OS_FlagInit
0201d8a0 g     F .text	0000009c alt_alarm_stop
020208f0 g     O .rwdata	00000002 OSTaskIdleStkSize
0202259c g     O .bss	00000004 alt_irq_active
02019984 g     F .text	000000b0 OSSemAccept
020185f4 g     F .text	000000d8 OSMemPut
0201812c g     F .text	000001d4 OSMemCreate
02022564 g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d4 alt_irq_handler
0201f65c g     O .rwdata	00000028 alt_dev_null
02020904 g     O .rwdata	00000002 OSTicksPerSec
0201da68 g       .text	00000000 OSIntCtxSw
0201d050 g     F .text	00000048 alt_dcache_flush_all
0200cb38 g     F .text	00000090 __hi0bits
02012f5c g     F .text	00000080 .hidden __fixdfsi
02022568 g     O .bss	00000004 OSTCBFreeList
0202092c g       *ABS*	00000000 __ram_rwdata_end
02019f58 g     F .text	0000016c OSSemPendAbort
02020890 g     O .rwdata	00000008 alt_dev_list
020139a4 g     F .text	000000f8 write
020224e4 g     O .bss	00000004 ActivateTask4Grp
02020908 g     O .rwdata	00000002 OSVersionNbr
0201ed88 g       *ABS*	00000000 __ram_rodata_end
020132d4 g     F .text	000000b0 fstat
02003de8 g     F .text	000000f4 .hidden __ledf2
020208b0 g     O .rwdata	00000004 OSEndiannessTest
0200d0dc g     F .text	00000178 __pow5mult
0200f364 g     F .text	000012c4 ___vfiprintf_internal_r
0202250c g     O .bss	00000004 __nlocale_changed
02004a6c g     F .text	00000058 .hidden __umodsi3
020208c2 g     O .rwdata	00000002 OSFlagGrpSize
0202d8fc g       *ABS*	00000000 end
0201c268 g     F .text	00000148 altera_avalon_jtag_uart_init
02015954 g     F .text	000000cc OS_TaskStat
020001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0201e6a8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0201cea8 g     F .text	0000007c alt_avalon_timer_sc_init
020048ac g     F .text	00000064 .hidden __clzsi2
0201cb6c g     F .text	000002c4 altera_avalon_jtag_uart_write
02009fa4 g     F .text	00000020 __sfp_lock_acquire
0200c2a8 g     F .text	000001bc memchr
02015630 g     F .text	00000054 OS_MemClr
02005260 g     F .text	000020d0 ___vfprintf_internal_r
0201db38 g     F .text	0000015c OSTaskStkInit
02000290 g     F .text	00000210 task1
0201ed88 g     O .rwdata	00000030 whole_list
0200a0ec g     F .text	00000560 _free_r
0200b050 g     F .text	00000020 __locale_mb_cur_max
02014ca0 g     F .text	00000198 OS_EventTaskRdy
0201e488 g     F .text	000001ec __call_exitprocs
0202256c g     O .bss	00000001 OSCPUUsage
02022510 g     O .bss	00000004 __mlocale_changed
02020880 g     O .rwdata	00000004 __malloc_sbrk_base
02000244 g     F .text	0000004c _start
020004a0 g     F .text	00001e5c task2
020225a0 g     O .bss	00000004 _alt_tick_rate
02018ea4 g     F .text	0000028c OSQPend
0201bb50 g     F .text	00000104 OSTimeDly
02002b10 g     F .text	00000158 borderCollide
0200d254 g     F .text	000001f8 __lshift
020225a4 g     O .bss	00000004 _alt_nticks
02013758 g     F .text	000000fc read
0201c0a4 g     F .text	00000060 alt_sys_init
0201e318 g     F .text	00000170 __register_exitproc
0202256d g     O .bss	00000001 OSTaskCtr
020224e8 g     O .bss	00000004 MailBox2
0201bc54 g     F .text	00000154 OSTimeDlyHMSM
0200cd0c g     F .text	000003d0 __multiply
0201c758 g     F .text	00000068 altera_avalon_jtag_uart_close
0201ed88 g       *ABS*	00000000 __ram_rwdata_start
0201e6a8 g       *ABS*	00000000 __ram_rodata_start
020225b0 g     O .bss	00000028 __malloc_current_mallinfo
020208b6 g     O .rwdata	00000002 OSEventMax
0200dad4 g     F .text	00000240 __d2b
0201a0c4 g     F .text	00000110 OSSemPost
02014844 g     F .text	000000dc OSSchedUnlock
02003274 g     F .text	000000ac fmin
0201c104 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0201df58 g     F .text	000000dc alt_get_fd
02022570 g     O .bss	00000004 OSMemFreeList
02014990 g     F .text	000000b0 OSStatInit
020171c8 g     F .text	000000c4 OSFlagQuery
020208ec g     O .rwdata	00000002 OSTaskCreateExtEn
02010698 g     F .text	00000060 _close_r
0201e1e4 g     F .text	00000134 memcmp
02014c80 g     F .text	00000020 OS_Dummy
0201c1c4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0202d8fc g       *ABS*	00000000 __alt_stack_base
0201c214 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0200767c g     F .text	000001a0 __swsetup_r
0202bd78 g     O .bss	000001e0 OSQTbl
02003424 g     F .text	000008e8 .hidden __divdf3
02009cc0 g     F .text	00000194 __sfp
0200dee0 g     F .text	000000d0 __copybits
0201f254 g     O .rwdata	00000408 __malloc_av_
0200a004 g     F .text	00000020 __sinit_lock_release
02022574 g     O .bss	00000004 OSTCBHighRdy
02003edc g     F .text	00000718 .hidden __muldf3
0200ed34 g     F .text	0000009c __sread
02022578 g     O .bss	00000004 OSQFreeList
0201de50 g     F .text	00000108 alt_find_file
0201d0d4 g     F .text	000000a4 alt_dev_llist_insert
02013bc0 g     F .text	00000120 __malloc_lock
020138b8 g     F .text	000000b0 sbrk
02013ecc g     F .text	00000140 OSEventNameSet
02009a4c g     F .text	00000088 _fflush_r
020106f8 g     F .text	00000164 _calloc_r
0202257c g     O .bss	00000001 OSRdyGrp
020224d0 g       *ABS*	00000000 __bss_start
02004c4c g     F .text	000001c4 memset
020027d0 g     F .text	000001cc main
02022538 g     O .bss	00000004 alt_envp
020224ec g     O .bss	00000004 MailBox8
02022524 g     O .bss	00000004 __malloc_max_total_mem
02003114 g     F .text	0000006c moveBall
0201c164 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02010fb4 g     F .text	00000040 __swbuf
0201ec54 g     O .rodata	00000100 OSUnMapTbl
020208e6 g     O .rwdata	00000002 OSSemEn
02016e34 g     F .text	00000394 OSFlagPost
0200ef54 g     F .text	00000054 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02010988 g     F .text	00000038 fclose
02014e38 g     F .text	00000110 OS_EventTaskWait
020265d8 g     O .bss	00002000 task2_stk
02004704 g     F .text	000001a8 .hidden __truncdfsf2
02015a20 g     F .text	000000cc OS_TaskStatStkChk
0201afa8 g     F .text	00000150 OSTaskDelReq
02007bd0 g     F .text	00001b78 _dtoa_r
0200b72c g     F .text	00000b7c _malloc_r
02011204 g     F .text	00000078 __ascii_wctomb
0202089c g     O .rwdata	00000004 alt_errno
02014920 g     F .text	00000070 OSStart
020285d8 g     O .bss	00002000 task3_stk
02013b60 g     F .text	00000060 __env_unlock
0200adf4 g     F .text	000000d8 _fwalk
0201b444 g     F .text	000001d4 OSTaskResume
020186cc g     F .text	000000e8 OSMemQuery
020208f8 g     O .rwdata	00000002 OSTaskStatEn
020208d2 g     O .rwdata	00000002 OSMemMax
02019404 g     F .text	00000170 OSQPostFront
02004910 g     F .text	00000084 .hidden __divsi3
0202257d g     O .bss	00000003 OSRdyTbl
020208ac g     O .rwdata	00000002 OSDebugEn
0200a64c g     F .text	000001cc _malloc_trim_r
020224f0 g     O .bss	00000004 MailBox4
0201e6a8 g       *ABS*	00000000 __CTOR_END__
020224f4 g     O .bss	00000004 MailBox7
020208c4 g     O .rwdata	00000002 OSFlagNodeSize
0202090c g     O .rwdata	00000002 OSTmrCfgMax
0200efa8 g     F .text	00000140 strcmp
020189c0 g     F .text	000001ac OSQCreate
0201b0f8 g     F .text	00000198 OSTaskNameGet
0201e6a8 g       *ABS*	00000000 __flash_rodata_start
02019574 g     F .text	0000020c OSQPostOpt
02014a40 g     F .text	00000220 OSTimeTick
020208f4 g     O .rwdata	00000002 OSTaskMax
0201e6a8 g       *ABS*	00000000 __DTOR_LIST__
02019a34 g     F .text	000000d8 OSSemCreate
02020918 g     O .rwdata	00000002 OSTmrWheelSize
020125d8 g     F .text	00000088 .hidden __nedf2
020208ee g     O .rwdata	00000002 OSTaskDelEn
0201a1d4 g     F .text	00000110 OSSemQuery
02018b6c g     F .text	00000280 OSQDel
02019130 g     F .text	0000016c OSQPendAbort
0201c06c g     F .text	00000038 alt_irq_init
02013854 g     F .text	00000064 alt_release_fd
0201e8f5 g     O .rodata	00000100 .hidden __clz_tab
02022514 g     O .bss	00000004 _PathLocale
0201e160 g     F .text	0000003c atexit
02010628 g     F .text	00000070 _write_r
020147b8 g     F .text	0000008c OSSchedLock
0200b0dc g     F .text	00000040 setlocale
02016258 g     F .text	00000108 OSFlagCreate
02020870 g     O .rwdata	00000004 _impure_ptr
02022530 g     O .bss	00000004 alt_argc
02009748 g     F .text	00000304 __sflush_r
0201d1d8 g     F .text	00000060 _do_dtors
0200b094 g     F .text	00000020 __locale_cjk_lang
020208be g     O .rwdata	00000002 OSEventMultiEn
02016360 g     F .text	00000248 OSFlagDel
02022580 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
02017c44 g     F .text	0000016c OSMboxPendAbort
0200d804 g     F .text	000000cc __ulp
0202090a g     O .rwdata	00000002 OSTmrEn
0201681c g     F .text	000005b8 OSFlagPend
0200a0ac g     F .text	00000040 __fp_unlock_all
02020888 g     O .rwdata	00000008 alt_fs_list
02015830 g     F .text	00000074 OS_StrCopy
020208d4 g     O .rwdata	00000002 OSMemNameSize
0201dd5c g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
02020900 g     O .rwdata	00000002 OSTCBPrioTblMax
0200b11c g     F .text	00000030 localeconv
020208fc g     O .rwdata	00000002 OSTaskStatStkChkEn
020176fc g     F .text	000000d4 OSMboxCreate
0201d26c g     F .text	00000050 alt_ic_isr_register
020208d0 g     O .rwdata	00000002 OSMemEn
020208da g     O .rwdata	00000002 OSMutexEn
0202092c g       *ABS*	00000000 _edata
02002d8c g     F .text	00000388 collide_calc
0202d8fc g       *ABS*	00000000 _end
02022584 g     O .bss	00000001 OSIntNesting
020109c0 g     F .text	000001f4 __fputwc
02000244 g       *ABS*	00000000 __ram_exceptions_end
0201c7c0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0201bda8 g     F .text	000001d4 OSTimeDlyResume
020166d0 g     F .text	0000014c OSFlagNameSet
02017a10 g     F .text	00000234 OSMboxPend
0200299c g     F .text	00000174 whole_collide
0201b618 g     F .text	000001c0 OSTaskStkChk
0201d344 g     F .text	0000008c alt_ic_irq_disable
020208d6 g     O .rwdata	00000002 OSMemSize
0200ee00 g     F .text	000000b4 __swrite
0202087c g     O .rwdata	00000004 __malloc_trim_threshold
0200b070 g     F .text	00000024 __locale_msgcharset
02022588 g     O .bss	00000004 OSTCBCur
0201e19c g     F .text	00000048 exit
020208d8 g     O .rwdata	00000002 OSMemTblSize
0200aecc g     F .text	000000dc _fwalk_reent
020224f8 g     O .bss	00000004 MailBox1
0200d560 g     F .text	000002a4 __mdiff
02004994 g     F .text	00000074 .hidden __modsi3
02017664 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02009fc4 g     F .text	00000020 __sfp_lock_release
0201461c g     F .text	00000058 OSInit
0201b9bc g     F .text	00000124 OSTaskQuery
020198dc g     F .text	000000a8 OS_QInit
020158a4 g     F .text	00000054 OS_StrLen
020184e0 g     F .text	00000114 OSMemNameSet
020208f2 g     O .rwdata	00000002 OSTaskProfileEn
0202258c g     O .bss	00000004 OSTime
020224fc g     O .bss	00000004 isActiveFlagGrp
0202bf58 g     O .bss	00000800 OSTaskIdleStk
0201e674 g     F .text	00000034 _exit
02017ec0 g     F .text	0000015c OSMboxPostOpt
0201cf24 g     F .text	0000012c alt_alarm_start
020165a8 g     F .text	00000128 OSFlagNameGet
02002ccc g     F .text	000000c0 detect_collide
0201bf7c g     F .text	0000005c OSTimeGet
0200b14c g     F .text	0000022c __smakebuf_r
0200502c g     F .text	000000f4 strlen
0201dcdc g     F .text	00000020 OSTaskSwHook
0201d74c g     F .text	00000154 open
0202c758 g     O .bss	00000b40 OSEventTbl
02003d0c g     F .text	000000dc .hidden __gedf2
0202d298 g     O .bss	00000510 OSTCBTbl
0201a2e4 g     F .text	00000100 OSSemSet
02020884 g     O .rwdata	00000004 __wctomb
02022500 g     O .bss	00000004 StartGameGrp
0200f0e8 g     F .text	0000013c __sprint_r
0201d238 g     F .text	00000034 alt_icache_flush_all
02020920 g     O .rwdata	00000004 alt_priority_mask
02019b0c g     F .text	00000240 OSSemDel
02022590 g     O .bss	00000004 OSFlagFreeList
020022fc g     F .text	00000408 task3
0201d2bc g     F .text	00000088 alt_ic_irq_enable
020208b8 g     O .rwdata	00000002 OSEventNameSize
020177d0 g     F .text	00000240 OSMboxDel
02005210 g     F .text	00000050 __vfprintf_internal
02022594 g     O .bss	00000001 OSStatRdy
0202d7a8 g     O .bss	00000054 OSTCBPrioTbl
020111a0 g     F .text	00000064 _wctomb_r
02013a9c g     F .text	000000c4 __env_lock
020208fe g     O .rwdata	00000002 OSTaskSwHookEn
02012660 g     F .text	000008fc .hidden __subdf3
0200cbc8 g     F .text	000000ec __lo0bits
02020924 g     O .rwdata	00000008 alt_alarm_list
020208c6 g     O .rwdata	00000002 OSFlagWidth
0201d178 g     F .text	00000060 _do_ctors
020110c8 g     F .text	000000d8 wcrtomb
0201319c g     F .text	000000d0 close
02022540 g     O .bss	00000004 alt_envsem
02022598 g     O .bss	00000004 OSIdleCtrRun
02014c60 g     F .text	00000020 OSVersion
02020910 g     O .rwdata	00000002 OSTmrCfgWheelSize
020134cc g     F .text	00000084 alt_load
0201bae0 g     F .text	00000070 OS_TaskStkClr
020208ea g     O .rwdata	00000002 OSTaskCreateEn
02015250 g     F .text	00000068 OS_EventWaitListInit
02010c3c g     F .text	00000068 fputwc
0201dd7c g     F .text	00000020 OSTaskIdleHook
02009fe4 g     F .text	00000020 __sinit_lock_acquire
0200c818 g     F .text	00000194 __multadd
0201b7d8 g     F .text	000001e4 OSTaskSuspend
0200c79c g     F .text	0000007c _Bfree
020158f8 g     F .text	0000005c OS_TaskIdle
02020916 g     O .rwdata	00000002 OSTmrTblSize
02019780 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409114 	ori	at,at,580
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	20146740 	call	2014674 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080f4 	movhi	r2,515
 2000140:	10b5ff04 	addi	r2,r2,-10244
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080f4 	movhi	r2,515
 2000158:	10b5ff04 	addi	r2,r2,-10244
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	20146c00 	call	20146c0 <OSIntExit>
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e4:	000531fa 	rdctl	r2,exception
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001ec:	e0bffd17 	ldw	r2,-12(fp)
 20001f0:	10801f0c 	andi	r2,r2,124
 20001f4:	1004d0ba 	srli	r2,r2,2
 20001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20001fc:	0005333a 	rdctl	r2,badaddr
 2000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000204:	d0a74e17 	ldw	r2,-25288(gp)
 2000208:	10000726 	beq	r2,zero,2000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200020c:	d0a74e17 	ldw	r2,-25288(gp)
 2000210:	e0fffd17 	ldw	r3,-12(fp)
 2000214:	e1bffe17 	ldw	r6,-8(fp)
 2000218:	e17fff17 	ldw	r5,-4(fp)
 200021c:	1809883a 	mov	r4,r3
 2000220:	103ee83a 	callr	r2
 2000224:	00000206 	br	2000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 200022c:	0005883a 	mov	r2,zero
}
 2000230:	e037883a 	mov	sp,fp
 2000234:	dfc00117 	ldw	ra,4(sp)
 2000238:	df000017 	ldw	fp,0(sp)
 200023c:	dec00204 	addi	sp,sp,8
 2000240:	f800283a 	ret

Disassembly of section .text:

02000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 2000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 200024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000250:	00bffd16 	blt	zero,r2,2000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 200025c:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000260:	d6a21c14 	ori	gp,gp,34928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000264:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 2000268:	10893414 	ori	r2,r2,9424

    movhi r3, %hi(__bss_end)
 200026c:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 2000270:	18f63f14 	ori	r3,r3,55548

    beq r2, r3, 1f
 2000274:	10c00326 	beq	r2,r3,2000284 <_start+0x40>

0:
    stw zero, (r2)
 2000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 200027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000280:	10fffd36 	bltu	r2,r3,2000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000284:	20134cc0 	call	20134cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000288:	20136600 	call	2013660 <alt_main>

0200028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 200028c:	003fff06 	br	200028c <alt_after_alt_main>

02000290 <task1>:


/*  */

void task1(void* pdata)
{
 2000290:	deffeb04 	addi	sp,sp,-84
 2000294:	dfc01415 	stw	ra,80(sp)
 2000298:	df001315 	stw	fp,76(sp)
 200029c:	df001304 	addi	fp,sp,76
 20002a0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 20002a4:	008000b4 	movhi	r2,2
 20002a8:	e0bff415 	stw	r2,-48(fp)
	int count_old = 0;
 20002ac:	e03ff515 	stw	zero,-44(fp)
	int count = 0;
 20002b0:	e03fee15 	stw	zero,-72(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 20002b4:	e03ff315 	stw	zero,-52(fp)

	while (1)
	{
        DEBUG_PRINT("[Task 1] wait for isActive\n");
 20002b8:	010080b4 	movhi	r4,514
 20002bc:	2139aa04 	addi	r4,r4,-6488
 20002c0:	2004ff40 	call	2004ff4 <puts>
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 20002c4:	d0e72317 	ldw	r3,-25460(gp)
 20002c8:	e0bffc04 	addi	r2,fp,-16
 20002cc:	d8800015 	stw	r2,0(sp)
 20002d0:	000f883a 	mov	r7,zero
 20002d4:	01802084 	movi	r6,130
 20002d8:	01400044 	movi	r5,1
 20002dc:	1809883a 	mov	r4,r3
 20002e0:	201681c0 	call	201681c <OSFlagPend>

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 20002e4:	00004c06 	br	2000418 <task1+0x188>
		{
			count_old = count;
 20002e8:	e0bfee17 	ldw	r2,-72(fp)
 20002ec:	e0bff515 	stw	r2,-44(fp)
			count = IORD(MTL_controller,10); // récupère le nombre de doigts présent sur l'écran
 20002f0:	e0bff417 	ldw	r2,-48(fp)
 20002f4:	10800a04 	addi	r2,r2,40
 20002f8:	10800037 	ldwio	r2,0(r2)
 20002fc:	e0bfee15 	stw	r2,-72(fp)
			int pos1 = IORD(MTL_controller,11);
 2000300:	e0bff417 	ldw	r2,-48(fp)
 2000304:	10800b04 	addi	r2,r2,44
 2000308:	10800037 	ldwio	r2,0(r2)
 200030c:	e0bff615 	stw	r2,-40(fp)
			int pos2 = IORD(MTL_controller,12);
 2000310:	e0bff417 	ldw	r2,-48(fp)
 2000314:	10800c04 	addi	r2,r2,48
 2000318:	10800037 	ldwio	r2,0(r2)
 200031c:	e0bff715 	stw	r2,-36(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 2000320:	e0bff517 	ldw	r2,-44(fp)
 2000324:	10800058 	cmpnei	r2,r2,1
 2000328:	1000121e 	bne	r2,zero,2000374 <task1+0xe4>
 200032c:	e0bfee17 	ldw	r2,-72(fp)
 2000330:	10800098 	cmpnei	r2,r2,2
 2000334:	10000f1e 	bne	r2,zero,2000374 <task1+0xe4>
			{
				DEBUG_PRINT("[Task 1] start gesture\n");
 2000338:	010080b4 	movhi	r4,514
 200033c:	2139b104 	addi	r4,r4,-6460
 2000340:	2004ff40 	call	2004ff4 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 2000344:	e0bff617 	ldw	r2,-40(fp)
 2000348:	1080ffcc 	andi	r2,r2,1023
 200034c:	e0bfef15 	stw	r2,-68(fp)
				y1_gesture_start = pos1 >> 10;
 2000350:	e0bff617 	ldw	r2,-40(fp)
 2000354:	1005d2ba 	srai	r2,r2,10
 2000358:	e0bff115 	stw	r2,-60(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 200035c:	e0bff717 	ldw	r2,-36(fp)
 2000360:	1080ffcc 	andi	r2,r2,1023
 2000364:	e0bff815 	stw	r2,-32(fp)
				y2_gesture_start = pos2 >> 10;
 2000368:	e0bff717 	ldw	r2,-36(fp)
 200036c:	1005d2ba 	srai	r2,r2,10
 2000370:	e0bff915 	stw	r2,-28(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000374:	e0bff517 	ldw	r2,-44(fp)
 2000378:	10800098 	cmpnei	r2,r2,2
 200037c:	1000261e 	bne	r2,zero,2000418 <task1+0x188>
 2000380:	e0bfee17 	ldw	r2,-72(fp)
 2000384:	10800058 	cmpnei	r2,r2,1
 2000388:	1000231e 	bne	r2,zero,2000418 <task1+0x188>
			{
				DEBUG_PRINT("[Task 1] stop gesture\n");
 200038c:	010080b4 	movhi	r4,514
 2000390:	2139b704 	addi	r4,r4,-6436
 2000394:	2004ff40 	call	2004ff4 <puts>

				x1_gesture_stop = pos1 & 0x0003FF;
 2000398:	e0bff617 	ldw	r2,-40(fp)
 200039c:	1080ffcc 	andi	r2,r2,1023
 20003a0:	e0bffa15 	stw	r2,-24(fp)
				y1_gesture_stop = pos1 >> 10;
 20003a4:	e0bff617 	ldw	r2,-40(fp)
 20003a8:	1005d2ba 	srai	r2,r2,10
 20003ac:	e0bffb15 	stw	r2,-20(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 20003b0:	e0bff717 	ldw	r2,-36(fp)
 20003b4:	1080ffcc 	andi	r2,r2,1023
 20003b8:	e0bff015 	stw	r2,-64(fp)
				y2_gesture_stop = pos2 >> 10;
 20003bc:	e0bff717 	ldw	r2,-36(fp)
 20003c0:	1005d2ba 	srai	r2,r2,10
 20003c4:	e0bff215 	stw	r2,-56(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003c8:	e0bfef17 	ldw	r2,-68(fp)
 20003cc:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003d0:	e0fffa17 	ldw	r3,-24(fp)
 20003d4:	18800e16 	blt	r3,r2,2000410 <task1+0x180>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003d8:	e0bfef17 	ldw	r2,-68(fp)
 20003dc:	10c00784 	addi	r3,r2,30
 20003e0:	e0bffa17 	ldw	r2,-24(fp)
 20003e4:	18800a16 	blt	r3,r2,2000410 <task1+0x180>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 20003e8:	e0bff117 	ldw	r2,-60(fp)
 20003ec:	10bff884 	addi	r2,r2,-30
 20003f0:	e0fffb17 	ldw	r3,-20(fp)
 20003f4:	18800616 	blt	r3,r2,2000410 <task1+0x180>
 20003f8:	e0bff117 	ldw	r2,-60(fp)
 20003fc:	10c00784 	addi	r3,r2,30
 2000400:	e0bffb17 	ldw	r2,-20(fp)
 2000404:	18800216 	blt	r3,r2,2000410 <task1+0x180>
 2000408:	00800044 	movi	r2,1
 200040c:	00000106 	br	2000414 <task1+0x184>
 2000410:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 2000414:	e0bff315 	stw	r2,-52(fp)
		OSFlagPend(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it

		/*
		 * Tant que le mouvement n'est pas terminé : On effectue la détection
		 */
		while(!gesture_detected)
 2000418:	e0bff317 	ldw	r2,-52(fp)
 200041c:	103fb226 	beq	r2,zero,20002e8 <task1+0x58>
			//*(MTL_controller + 5) = (y1_gesture_start << 10) + x1_gesture_start;
			//*(MTL_controller + 6) = (y2_gesture_start << 10) + x2_gesture_start;
			//*(MTL_controller + 7) = (y2_gesture_stop << 10) + x2_gesture_stop;
		}

		int x_dir = (x2_gesture_stop - x1_gesture_start);
 2000420:	e0fff017 	ldw	r3,-64(fp)
 2000424:	e0bfef17 	ldw	r2,-68(fp)
 2000428:	1885c83a 	sub	r2,r3,r2
 200042c:	e0bffd15 	stw	r2,-12(fp)
		int y_dir = (y2_gesture_stop - y1_gesture_start);
 2000430:	e0fff217 	ldw	r3,-56(fp)
 2000434:	e0bff117 	ldw	r2,-60(fp)
 2000438:	1885c83a 	sub	r2,r3,r2
 200043c:	e0bffe15 	stw	r2,-8(fp)
		DEBUG_PRINT("[Task 1] Send value : (%d, %d)\n", x_dir, y_dir);
 2000440:	e0bffd17 	ldw	r2,-12(fp)
 2000444:	e0fffe17 	ldw	r3,-8(fp)
 2000448:	180d883a 	mov	r6,r3
 200044c:	100b883a 	mov	r5,r2
 2000450:	010080b4 	movhi	r4,514
 2000454:	2139bd04 	addi	r4,r4,-6412
 2000458:	2004e740 	call	2004e74 <printf>
		OSMboxPost(MailBox1, &x_dir);
 200045c:	d0a72217 	ldw	r2,-25464(gp)
 2000460:	e0fffd04 	addi	r3,fp,-12
 2000464:	180b883a 	mov	r5,r3
 2000468:	1009883a 	mov	r4,r2
 200046c:	2017db00 	call	2017db0 <OSMboxPost>
		OSMboxPost(MailBox2, &y_dir);
 2000470:	d0a71e17 	ldw	r2,-25480(gp)
 2000474:	e0fffe04 	addi	r3,fp,-8
 2000478:	180b883a 	mov	r5,r3
 200047c:	1009883a 	mov	r4,r2
 2000480:	2017db00 	call	2017db0 <OSMboxPost>
		gesture_detected = 0;
 2000484:	e03ff315 	stw	zero,-52(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 2000488:	01c07d04 	movi	r7,500
 200048c:	000d883a 	mov	r6,zero
 2000490:	000b883a 	mov	r5,zero
 2000494:	0009883a 	mov	r4,zero
 2000498:	201bc540 	call	201bc54 <OSTimeDlyHMSM>
	}
 200049c:	003f8606 	br	20002b8 <task1+0x28>

020004a0 <task2>:
}

void task2(void* pdata)
{
 20004a0:	deff3c04 	addi	sp,sp,-784
 20004a4:	dfc0c315 	stw	ra,780(sp)
 20004a8:	df00c215 	stw	fp,776(sp)
 20004ac:	dd40c115 	stw	r21,772(sp)
 20004b0:	dd00c015 	stw	r20,768(sp)
 20004b4:	dcc0bf15 	stw	r19,764(sp)
 20004b8:	dc80be15 	stw	r18,760(sp)
 20004bc:	dc40bd15 	stw	r17,756(sp)
 20004c0:	dc00bc15 	stw	r16,752(sp)
 20004c4:	df00c204 	addi	fp,sp,776
 20004c8:	e13ff915 	stw	r4,-28(fp)

  INT8U err;
  INT8U opt_task2;
  volatile int * display = (int *) MTL_IP_BASE;
 20004cc:	008000b4 	movhi	r2,2
 20004d0:	e0bf4415 	stw	r2,-752(fp)

  float ball[10][2] =  {{266.0, 263.0}, // white
 20004d4:	008080b4 	movhi	r2,514
 20004d8:	10b9e304 	addi	r2,r2,-6260
 20004dc:	e0ff4d04 	addi	r3,fp,-716
 20004e0:	1009883a 	mov	r4,r2
 20004e4:	00801404 	movi	r2,80
 20004e8:	100d883a 	mov	r6,r2
 20004ec:	200b883a 	mov	r5,r4
 20004f0:	1809883a 	mov	r4,r3
 20004f4:	2004ac40 	call	2004ac4 <memcpy>
		  	  	  	  	{649.0, 222.0},
		  	  	  	  	{649.0, 249.0},
		  	  	  	  	{649.0, 277.0},
		  	  	  	  	{649.0, 304.0}};

  IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 20004f8:	e0bf4417 	ldw	r2,-752(fp)
 20004fc:	10800104 	addi	r2,r2,4
 2000500:	e0ff4e17 	ldw	r3,-712(fp)
 2000504:	1807fe72 	custom	249,r3,r3,zero
 2000508:	180892ba 	slli	r4,r3,10
 200050c:	e0ff4d17 	ldw	r3,-716(fp)
 2000510:	1807fe72 	custom	249,r3,r3,zero
 2000514:	20c7883a 	add	r3,r4,r3
 2000518:	10c00035 	stwio	r3,0(r2)
  IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 200051c:	e0bf4417 	ldw	r2,-752(fp)
 2000520:	10800204 	addi	r2,r2,8
 2000524:	e0ff5017 	ldw	r3,-704(fp)
 2000528:	1807fe72 	custom	249,r3,r3,zero
 200052c:	180892ba 	slli	r4,r3,10
 2000530:	e0ff4f17 	ldw	r3,-708(fp)
 2000534:	1807fe72 	custom	249,r3,r3,zero
 2000538:	20c7883a 	add	r3,r4,r3
 200053c:	10c00035 	stwio	r3,0(r2)
  IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 2000540:	e0bf4417 	ldw	r2,-752(fp)
 2000544:	10800304 	addi	r2,r2,12
 2000548:	e0ff5217 	ldw	r3,-696(fp)
 200054c:	1807fe72 	custom	249,r3,r3,zero
 2000550:	180892ba 	slli	r4,r3,10
 2000554:	e0ff5117 	ldw	r3,-700(fp)
 2000558:	1807fe72 	custom	249,r3,r3,zero
 200055c:	20c7883a 	add	r3,r4,r3
 2000560:	10c00035 	stwio	r3,0(r2)
  IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 2000564:	e0bf4417 	ldw	r2,-752(fp)
 2000568:	10800404 	addi	r2,r2,16
 200056c:	e0ff5417 	ldw	r3,-688(fp)
 2000570:	1807fe72 	custom	249,r3,r3,zero
 2000574:	180892ba 	slli	r4,r3,10
 2000578:	e0ff5317 	ldw	r3,-692(fp)
 200057c:	1807fe72 	custom	249,r3,r3,zero
 2000580:	20c7883a 	add	r3,r4,r3
 2000584:	10c00035 	stwio	r3,0(r2)
  IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2000588:	e0bf4417 	ldw	r2,-752(fp)
 200058c:	10800504 	addi	r2,r2,20
 2000590:	e0ff5617 	ldw	r3,-680(fp)
 2000594:	1807fe72 	custom	249,r3,r3,zero
 2000598:	180892ba 	slli	r4,r3,10
 200059c:	e0ff5517 	ldw	r3,-684(fp)
 20005a0:	1807fe72 	custom	249,r3,r3,zero
 20005a4:	20c7883a 	add	r3,r4,r3
 20005a8:	10c00035 	stwio	r3,0(r2)
  IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 20005ac:	e0bf4417 	ldw	r2,-752(fp)
 20005b0:	10800604 	addi	r2,r2,24
 20005b4:	e0ff5817 	ldw	r3,-672(fp)
 20005b8:	1807fe72 	custom	249,r3,r3,zero
 20005bc:	180892ba 	slli	r4,r3,10
 20005c0:	e0ff5717 	ldw	r3,-676(fp)
 20005c4:	1807fe72 	custom	249,r3,r3,zero
 20005c8:	20c7883a 	add	r3,r4,r3
 20005cc:	10c00035 	stwio	r3,0(r2)
  IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 20005d0:	e0bf4417 	ldw	r2,-752(fp)
 20005d4:	10800704 	addi	r2,r2,28
 20005d8:	e0ff5a17 	ldw	r3,-664(fp)
 20005dc:	1807fe72 	custom	249,r3,r3,zero
 20005e0:	180892ba 	slli	r4,r3,10
 20005e4:	e0ff5917 	ldw	r3,-668(fp)
 20005e8:	1807fe72 	custom	249,r3,r3,zero
 20005ec:	20c7883a 	add	r3,r4,r3
 20005f0:	10c00035 	stwio	r3,0(r2)
  IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 20005f4:	e0bf4417 	ldw	r2,-752(fp)
 20005f8:	10800804 	addi	r2,r2,32
 20005fc:	e0ff5c17 	ldw	r3,-656(fp)
 2000600:	1807fe72 	custom	249,r3,r3,zero
 2000604:	180892ba 	slli	r4,r3,10
 2000608:	e0ff5b17 	ldw	r3,-660(fp)
 200060c:	1807fe72 	custom	249,r3,r3,zero
 2000610:	20c7883a 	add	r3,r4,r3
 2000614:	10c00035 	stwio	r3,0(r2)
  IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 2000618:	e0bf4417 	ldw	r2,-752(fp)
 200061c:	10800904 	addi	r2,r2,36
 2000620:	e0ff5e17 	ldw	r3,-648(fp)
 2000624:	1807fe72 	custom	249,r3,r3,zero
 2000628:	180892ba 	slli	r4,r3,10
 200062c:	e0ff5d17 	ldw	r3,-652(fp)
 2000630:	1807fe72 	custom	249,r3,r3,zero
 2000634:	20c7883a 	add	r3,r4,r3
 2000638:	10c00035 	stwio	r3,0(r2)
  IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 200063c:	e0bf4417 	ldw	r2,-752(fp)
 2000640:	10800a04 	addi	r2,r2,40
 2000644:	e0ff6017 	ldw	r3,-640(fp)
 2000648:	1807fe72 	custom	249,r3,r3,zero
 200064c:	180892ba 	slli	r4,r3,10
 2000650:	e0ff5f17 	ldw	r3,-644(fp)
 2000654:	1807fe72 	custom	249,r3,r3,zero
 2000658:	20c7883a 	add	r3,r4,r3
 200065c:	10c00035 	stwio	r3,0(r2)

  int collision[45][2]={{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
 2000660:	e0bf6104 	addi	r2,fp,-636
 2000664:	00c05a04 	movi	r3,360
 2000668:	180d883a 	mov	r6,r3
 200066c:	000b883a 	mov	r5,zero
 2000670:	1009883a 	mov	r4,r2
 2000674:	2004c4c0 	call	2004c4c <memset>
  	  	  	  	        {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
  	  	  	         	{0,0},{0,0},{0,0},{0,0},{0,0}};

  while (1)
  {
   opt_task2= OS_FLAG_SET;
 2000678:	00800044 	movi	r2,1
 200067c:	e0bf4505 	stb	r2,-748(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 2000680:	d0a71b17 	ldw	r2,-25492(gp)
 2000684:	e0ff4503 	ldbu	r3,-748(fp)
 2000688:	e13f4c04 	addi	r4,fp,-720
 200068c:	200f883a 	mov	r7,r4
 2000690:	180d883a 	mov	r6,r3
 2000694:	01400044 	movi	r5,1
 2000698:	1009883a 	mov	r4,r2
 200069c:	2016e340 	call	2016e34 <OSFlagPost>
   int *vector_x = OSMboxPend(MailBox4,0,&err);
 20006a0:	d0a72017 	ldw	r2,-25472(gp)
 20006a4:	e0ff4c04 	addi	r3,fp,-720
 20006a8:	180d883a 	mov	r6,r3
 20006ac:	000b883a 	mov	r5,zero
 20006b0:	1009883a 	mov	r4,r2
 20006b4:	2017a100 	call	2017a10 <OSMboxPend>
 20006b8:	e0bf4615 	stw	r2,-744(fp)
   int *vector_y = OSMboxPend(MailBox5,0,&err);
 20006bc:	d0a71c17 	ldw	r2,-25488(gp)
 20006c0:	e0ff4c04 	addi	r3,fp,-720
 20006c4:	180d883a 	mov	r6,r3
 20006c8:	000b883a 	mov	r5,zero
 20006cc:	1009883a 	mov	r4,r2
 20006d0:	2017a100 	call	2017a10 <OSMboxPend>
 20006d4:	e0bf4715 	stw	r2,-740(fp)

   //int score = OSMboxPend(MailBox8,0,&err);
   int *nbr_ball = OSMboxPend(MailBox9,0,&err);
 20006d8:	d0a71817 	ldw	r2,-25504(gp)
 20006dc:	e0ff4c04 	addi	r3,fp,-720
 20006e0:	180d883a 	mov	r6,r3
 20006e4:	000b883a 	mov	r5,zero
 20006e8:	1009883a 	mov	r4,r2
 20006ec:	2017a100 	call	2017a10 <OSMboxPend>
 20006f0:	e0bf4815 	stw	r2,-736(fp)


   float x = (float) *vector_x;
 20006f4:	e0bf4617 	ldw	r2,-744(fp)
 20006f8:	10800017 	ldw	r2,0(r2)
 20006fc:	1005feb2 	custom	250,r2,r2,zero
 2000700:	e0bf4915 	stw	r2,-732(fp)
   float y = (float) *vector_y;
 2000704:	e0bf4717 	ldw	r2,-740(fp)
 2000708:	10800017 	ldw	r2,0(r2)
 200070c:	1005feb2 	custom	250,r2,r2,zero
 2000710:	e0bf4a15 	stw	r2,-728(fp)

   float length = sqrtf(x*x + y*y);
 2000714:	e0ff4917 	ldw	r3,-732(fp)
 2000718:	e0bf4917 	ldw	r2,-732(fp)
 200071c:	1887ff32 	custom	252,r3,r3,r2
 2000720:	e13f4a17 	ldw	r4,-728(fp)
 2000724:	e0bf4a17 	ldw	r2,-728(fp)
 2000728:	2085ff32 	custom	252,r2,r4,r2
 200072c:	1885ff72 	custom	253,r2,r3,r2
 2000730:	1005fef2 	custom	251,r2,r2,zero
 2000734:	e0bf4b15 	stw	r2,-724(fp)
   float direction [] = {x/length, y/length};
 2000738:	e0ff4917 	ldw	r3,-732(fp)
 200073c:	e0bf4b17 	ldw	r2,-724(fp)
 2000740:	1885fff2 	custom	255,r2,r3,r2
 2000744:	e0bfbb15 	stw	r2,-276(fp)
 2000748:	e0ff4a17 	ldw	r3,-728(fp)
 200074c:	e0bf4b17 	ldw	r2,-724(fp)
 2000750:	1885fff2 	custom	255,r2,r3,r2
 2000754:	e0bfbc15 	stw	r2,-272(fp)
   float speed = fmin(length / 2.0, 400.0);
 2000758:	e13f4b17 	ldw	r4,-724(fp)
 200075c:	20045f40 	call	20045f4 <__extendsfdf2>
 2000760:	1011883a 	mov	r8,r2
 2000764:	1813883a 	mov	r9,r3
 2000768:	000d883a 	mov	r6,zero
 200076c:	01d00034 	movhi	r7,16384
 2000770:	4009883a 	mov	r4,r8
 2000774:	480b883a 	mov	r5,r9
 2000778:	20034240 	call	2003424 <__divdf3>
 200077c:	1009883a 	mov	r4,r2
 2000780:	180b883a 	mov	r5,r3
 2000784:	2005883a 	mov	r2,r4
 2000788:	2807883a 	mov	r3,r5
 200078c:	000d883a 	mov	r6,zero
 2000790:	01d01e74 	movhi	r7,16505
 2000794:	1009883a 	mov	r4,r2
 2000798:	180b883a 	mov	r5,r3
 200079c:	20032740 	call	2003274 <fmin>
 20007a0:	100b883a 	mov	r5,r2
 20007a4:	180d883a 	mov	r6,r3
 20007a8:	2809883a 	mov	r4,r5
 20007ac:	300b883a 	mov	r5,r6
 20007b0:	20047040 	call	2004704 <__truncdfsf2>
 20007b4:	1007883a 	mov	r3,r2
 20007b8:	e0ff4315 	stw	r3,-756(fp)

   float velocity [10][2] = {{direction[0] * speed/80.0, direction[1] * speed/80.0},
 20007bc:	e0bfe504 	addi	r2,fp,-108
 20007c0:	00c01404 	movi	r3,80
 20007c4:	180d883a 	mov	r6,r3
 20007c8:	000b883a 	mov	r5,zero
 20007cc:	1009883a 	mov	r4,r2
 20007d0:	2004c4c0 	call	2004c4c <memset>
 20007d4:	e0ffbb17 	ldw	r3,-276(fp)
 20007d8:	e0bf4317 	ldw	r2,-756(fp)
 20007dc:	1887ff32 	custom	252,r3,r3,r2
 20007e0:	0090a834 	movhi	r2,17056
 20007e4:	1885fff2 	custom	255,r2,r3,r2
 20007e8:	e0bfe515 	stw	r2,-108(fp)
 20007ec:	e0ffbc17 	ldw	r3,-272(fp)
 20007f0:	e0bf4317 	ldw	r2,-756(fp)
 20007f4:	1887ff32 	custom	252,r3,r3,r2
 20007f8:	0090a834 	movhi	r2,17056
 20007fc:	1885fff2 	custom	255,r2,r3,r2
 2000800:	e0bfe615 	stw	r2,-104(fp)
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0},
		   	   	   	   	   	 {0.0, 0.0}};

   DEBUG_PRINT("[Task 2] Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)\n",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);
 2000804:	e0bf4617 	ldw	r2,-744(fp)
 2000808:	15000017 	ldw	r20,0(r2)
 200080c:	e0bf4717 	ldw	r2,-740(fp)
 2000810:	15400017 	ldw	r21,0(r2)
 2000814:	e13f4317 	ldw	r4,-756(fp)
 2000818:	20045f40 	call	20045f4 <__extendsfdf2>
 200081c:	1025883a 	mov	r18,r2
 2000820:	1827883a 	mov	r19,r3
 2000824:	e0bfe517 	ldw	r2,-108(fp)
 2000828:	1009883a 	mov	r4,r2
 200082c:	20045f40 	call	20045f4 <__extendsfdf2>
 2000830:	1021883a 	mov	r16,r2
 2000834:	1823883a 	mov	r17,r3
 2000838:	e0bfe617 	ldw	r2,-104(fp)
 200083c:	1009883a 	mov	r4,r2
 2000840:	20045f40 	call	20045f4 <__extendsfdf2>
 2000844:	1009883a 	mov	r4,r2
 2000848:	180b883a 	mov	r5,r3
 200084c:	d9000315 	stw	r4,12(sp)
 2000850:	d9400415 	stw	r5,16(sp)
 2000854:	dc000115 	stw	r16,4(sp)
 2000858:	dc400215 	stw	r17,8(sp)
 200085c:	dcc00015 	stw	r19,0(sp)
 2000860:	900f883a 	mov	r7,r18
 2000864:	a80d883a 	mov	r6,r21
 2000868:	a00b883a 	mov	r5,r20
 200086c:	010080b4 	movhi	r4,514
 2000870:	2139c504 	addi	r4,r4,-6380
 2000874:	2004e740 	call	2004e74 <printf>

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
 2000878:	e0bfbd04 	addi	r2,fp,-268
 200087c:	00c02804 	movi	r3,160
 2000880:	180d883a 	mov	r6,r3
 2000884:	000b883a 	mov	r5,zero
 2000888:	1009883a 	mov	r4,r2
 200088c:	2004c4c0 	call	2004c4c <memset>

   while(speed >= 0.1)
 2000890:	00067306 	br	2002260 <task2+0x1dc0>
   {
	   //Border Collide

	   borderCollide(ball[0], border_collision[0], velocity[0]);
 2000894:	e13fe504 	addi	r4,fp,-108
 2000898:	e0ffbd04 	addi	r3,fp,-268
 200089c:	e0bf4d04 	addi	r2,fp,-716
 20008a0:	200d883a 	mov	r6,r4
 20008a4:	180b883a 	mov	r5,r3
 20008a8:	1009883a 	mov	r4,r2
 20008ac:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[1], border_collision[1], velocity[1]);
 20008b0:	e0bfe504 	addi	r2,fp,-108
 20008b4:	11000204 	addi	r4,r2,8
 20008b8:	e0bfbd04 	addi	r2,fp,-268
 20008bc:	10c00404 	addi	r3,r2,16
 20008c0:	e0bf4d04 	addi	r2,fp,-716
 20008c4:	10800204 	addi	r2,r2,8
 20008c8:	200d883a 	mov	r6,r4
 20008cc:	180b883a 	mov	r5,r3
 20008d0:	1009883a 	mov	r4,r2
 20008d4:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[2], border_collision[2], velocity[2]);
 20008d8:	e0bfe504 	addi	r2,fp,-108
 20008dc:	11000404 	addi	r4,r2,16
 20008e0:	e0bfbd04 	addi	r2,fp,-268
 20008e4:	10c00804 	addi	r3,r2,32
 20008e8:	e0bf4d04 	addi	r2,fp,-716
 20008ec:	10800404 	addi	r2,r2,16
 20008f0:	200d883a 	mov	r6,r4
 20008f4:	180b883a 	mov	r5,r3
 20008f8:	1009883a 	mov	r4,r2
 20008fc:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[3], border_collision[3], velocity[3]);
 2000900:	e0bfe504 	addi	r2,fp,-108
 2000904:	11000604 	addi	r4,r2,24
 2000908:	e0bfbd04 	addi	r2,fp,-268
 200090c:	10c00c04 	addi	r3,r2,48
 2000910:	e0bf4d04 	addi	r2,fp,-716
 2000914:	10800604 	addi	r2,r2,24
 2000918:	200d883a 	mov	r6,r4
 200091c:	180b883a 	mov	r5,r3
 2000920:	1009883a 	mov	r4,r2
 2000924:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[4], border_collision[4], velocity[4]);
 2000928:	e0bfe504 	addi	r2,fp,-108
 200092c:	11000804 	addi	r4,r2,32
 2000930:	e0bfbd04 	addi	r2,fp,-268
 2000934:	10c01004 	addi	r3,r2,64
 2000938:	e0bf4d04 	addi	r2,fp,-716
 200093c:	10800804 	addi	r2,r2,32
 2000940:	200d883a 	mov	r6,r4
 2000944:	180b883a 	mov	r5,r3
 2000948:	1009883a 	mov	r4,r2
 200094c:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[5], border_collision[5], velocity[5]);
 2000950:	e0bfe504 	addi	r2,fp,-108
 2000954:	11000a04 	addi	r4,r2,40
 2000958:	e0bfbd04 	addi	r2,fp,-268
 200095c:	10c01404 	addi	r3,r2,80
 2000960:	e0bf4d04 	addi	r2,fp,-716
 2000964:	10800a04 	addi	r2,r2,40
 2000968:	200d883a 	mov	r6,r4
 200096c:	180b883a 	mov	r5,r3
 2000970:	1009883a 	mov	r4,r2
 2000974:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[6], border_collision[6], velocity[6]);
 2000978:	e0bfe504 	addi	r2,fp,-108
 200097c:	11000c04 	addi	r4,r2,48
 2000980:	e0bfbd04 	addi	r2,fp,-268
 2000984:	10c01804 	addi	r3,r2,96
 2000988:	e0bf4d04 	addi	r2,fp,-716
 200098c:	10800c04 	addi	r2,r2,48
 2000990:	200d883a 	mov	r6,r4
 2000994:	180b883a 	mov	r5,r3
 2000998:	1009883a 	mov	r4,r2
 200099c:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[7], border_collision[7], velocity[7]);
 20009a0:	e0bfe504 	addi	r2,fp,-108
 20009a4:	11000e04 	addi	r4,r2,56
 20009a8:	e0bfbd04 	addi	r2,fp,-268
 20009ac:	10c01c04 	addi	r3,r2,112
 20009b0:	e0bf4d04 	addi	r2,fp,-716
 20009b4:	10800e04 	addi	r2,r2,56
 20009b8:	200d883a 	mov	r6,r4
 20009bc:	180b883a 	mov	r5,r3
 20009c0:	1009883a 	mov	r4,r2
 20009c4:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[8], border_collision[8], velocity[8]);
 20009c8:	e0bfe504 	addi	r2,fp,-108
 20009cc:	11001004 	addi	r4,r2,64
 20009d0:	e0bfbd04 	addi	r2,fp,-268
 20009d4:	10c02004 	addi	r3,r2,128
 20009d8:	e0bf4d04 	addi	r2,fp,-716
 20009dc:	10801004 	addi	r2,r2,64
 20009e0:	200d883a 	mov	r6,r4
 20009e4:	180b883a 	mov	r5,r3
 20009e8:	1009883a 	mov	r4,r2
 20009ec:	2002b100 	call	2002b10 <borderCollide>
       borderCollide(ball[9], border_collision[9], velocity[9]);
 20009f0:	e0bfe504 	addi	r2,fp,-108
 20009f4:	11001204 	addi	r4,r2,72
 20009f8:	e0bfbd04 	addi	r2,fp,-268
 20009fc:	10c02404 	addi	r3,r2,144
 2000a00:	e0bf4d04 	addi	r2,fp,-716
 2000a04:	10801204 	addi	r2,r2,72
 2000a08:	200d883a 	mov	r6,r4
 2000a0c:	180b883a 	mov	r5,r3
 2000a10:	1009883a 	mov	r4,r2
 2000a14:	2002b100 	call	2002b10 <borderCollide>

       //Move the ball

       moveBall(ball[0], velocity[0]);
 2000a18:	e0ffe504 	addi	r3,fp,-108
 2000a1c:	e0bf4d04 	addi	r2,fp,-716
 2000a20:	180b883a 	mov	r5,r3
 2000a24:	1009883a 	mov	r4,r2
 2000a28:	20031140 	call	2003114 <moveBall>
       moveBall(ball[1], velocity[1]);
 2000a2c:	e0bfe504 	addi	r2,fp,-108
 2000a30:	10c00204 	addi	r3,r2,8
 2000a34:	e0bf4d04 	addi	r2,fp,-716
 2000a38:	10800204 	addi	r2,r2,8
 2000a3c:	180b883a 	mov	r5,r3
 2000a40:	1009883a 	mov	r4,r2
 2000a44:	20031140 	call	2003114 <moveBall>
       moveBall(ball[2], velocity[2]);
 2000a48:	e0bfe504 	addi	r2,fp,-108
 2000a4c:	10c00404 	addi	r3,r2,16
 2000a50:	e0bf4d04 	addi	r2,fp,-716
 2000a54:	10800404 	addi	r2,r2,16
 2000a58:	180b883a 	mov	r5,r3
 2000a5c:	1009883a 	mov	r4,r2
 2000a60:	20031140 	call	2003114 <moveBall>
       moveBall(ball[3], velocity[3]);
 2000a64:	e0bfe504 	addi	r2,fp,-108
 2000a68:	10c00604 	addi	r3,r2,24
 2000a6c:	e0bf4d04 	addi	r2,fp,-716
 2000a70:	10800604 	addi	r2,r2,24
 2000a74:	180b883a 	mov	r5,r3
 2000a78:	1009883a 	mov	r4,r2
 2000a7c:	20031140 	call	2003114 <moveBall>
       moveBall(ball[4], velocity[4]);
 2000a80:	e0bfe504 	addi	r2,fp,-108
 2000a84:	10c00804 	addi	r3,r2,32
 2000a88:	e0bf4d04 	addi	r2,fp,-716
 2000a8c:	10800804 	addi	r2,r2,32
 2000a90:	180b883a 	mov	r5,r3
 2000a94:	1009883a 	mov	r4,r2
 2000a98:	20031140 	call	2003114 <moveBall>
       moveBall(ball[5], velocity[5]);
 2000a9c:	e0bfe504 	addi	r2,fp,-108
 2000aa0:	10c00a04 	addi	r3,r2,40
 2000aa4:	e0bf4d04 	addi	r2,fp,-716
 2000aa8:	10800a04 	addi	r2,r2,40
 2000aac:	180b883a 	mov	r5,r3
 2000ab0:	1009883a 	mov	r4,r2
 2000ab4:	20031140 	call	2003114 <moveBall>
       moveBall(ball[6], velocity[6]);
 2000ab8:	e0bfe504 	addi	r2,fp,-108
 2000abc:	10c00c04 	addi	r3,r2,48
 2000ac0:	e0bf4d04 	addi	r2,fp,-716
 2000ac4:	10800c04 	addi	r2,r2,48
 2000ac8:	180b883a 	mov	r5,r3
 2000acc:	1009883a 	mov	r4,r2
 2000ad0:	20031140 	call	2003114 <moveBall>
       moveBall(ball[7], velocity[7]);
 2000ad4:	e0bfe504 	addi	r2,fp,-108
 2000ad8:	10c00e04 	addi	r3,r2,56
 2000adc:	e0bf4d04 	addi	r2,fp,-716
 2000ae0:	10800e04 	addi	r2,r2,56
 2000ae4:	180b883a 	mov	r5,r3
 2000ae8:	1009883a 	mov	r4,r2
 2000aec:	20031140 	call	2003114 <moveBall>
       moveBall(ball[8], velocity[8]);
 2000af0:	e0bfe504 	addi	r2,fp,-108
 2000af4:	10c01004 	addi	r3,r2,64
 2000af8:	e0bf4d04 	addi	r2,fp,-716
 2000afc:	10801004 	addi	r2,r2,64
 2000b00:	180b883a 	mov	r5,r3
 2000b04:	1009883a 	mov	r4,r2
 2000b08:	20031140 	call	2003114 <moveBall>
       moveBall(ball[9], velocity[9]);
 2000b0c:	e0bfe504 	addi	r2,fp,-108
 2000b10:	10c01204 	addi	r3,r2,72
 2000b14:	e0bf4d04 	addi	r2,fp,-716
 2000b18:	10801204 	addi	r2,r2,72
 2000b1c:	180b883a 	mov	r5,r3
 2000b20:	1009883a 	mov	r4,r2
 2000b24:	20031140 	call	2003114 <moveBall>

       //Whole collision

       whole_collide(ball[1],velocity[1]);
 2000b28:	e0bfe504 	addi	r2,fp,-108
 2000b2c:	10c00204 	addi	r3,r2,8
 2000b30:	e0bf4d04 	addi	r2,fp,-716
 2000b34:	10800204 	addi	r2,r2,8
 2000b38:	180b883a 	mov	r5,r3
 2000b3c:	1009883a 	mov	r4,r2
 2000b40:	200299c0 	call	200299c <whole_collide>
       whole_collide(ball[2],velocity[2]);
 2000b44:	e0bfe504 	addi	r2,fp,-108
 2000b48:	10c00404 	addi	r3,r2,16
 2000b4c:	e0bf4d04 	addi	r2,fp,-716
 2000b50:	10800404 	addi	r2,r2,16
 2000b54:	180b883a 	mov	r5,r3
 2000b58:	1009883a 	mov	r4,r2
 2000b5c:	200299c0 	call	200299c <whole_collide>
       whole_collide(ball[3],velocity[3]);
 2000b60:	e0bfe504 	addi	r2,fp,-108
 2000b64:	10c00604 	addi	r3,r2,24
 2000b68:	e0bf4d04 	addi	r2,fp,-716
 2000b6c:	10800604 	addi	r2,r2,24
 2000b70:	180b883a 	mov	r5,r3
 2000b74:	1009883a 	mov	r4,r2
 2000b78:	200299c0 	call	200299c <whole_collide>
       whole_collide(ball[4],velocity[4]);
 2000b7c:	e0bfe504 	addi	r2,fp,-108
 2000b80:	10c00804 	addi	r3,r2,32
 2000b84:	e0bf4d04 	addi	r2,fp,-716
 2000b88:	10800804 	addi	r2,r2,32
 2000b8c:	180b883a 	mov	r5,r3
 2000b90:	1009883a 	mov	r4,r2
 2000b94:	200299c0 	call	200299c <whole_collide>
       whole_collide(ball[5],velocity[5]);
 2000b98:	e0bfe504 	addi	r2,fp,-108
 2000b9c:	10c00a04 	addi	r3,r2,40
 2000ba0:	e0bf4d04 	addi	r2,fp,-716
 2000ba4:	10800a04 	addi	r2,r2,40
 2000ba8:	180b883a 	mov	r5,r3
 2000bac:	1009883a 	mov	r4,r2
 2000bb0:	200299c0 	call	200299c <whole_collide>
       whole_collide(ball[6],velocity[6]);
 2000bb4:	e0bfe504 	addi	r2,fp,-108
 2000bb8:	10c00c04 	addi	r3,r2,48
 2000bbc:	e0bf4d04 	addi	r2,fp,-716
 2000bc0:	10800c04 	addi	r2,r2,48
 2000bc4:	180b883a 	mov	r5,r3
 2000bc8:	1009883a 	mov	r4,r2
 2000bcc:	200299c0 	call	200299c <whole_collide>
       whole_collide(ball[7],velocity[7]);
 2000bd0:	e0bfe504 	addi	r2,fp,-108
 2000bd4:	10c00e04 	addi	r3,r2,56
 2000bd8:	e0bf4d04 	addi	r2,fp,-716
 2000bdc:	10800e04 	addi	r2,r2,56
 2000be0:	180b883a 	mov	r5,r3
 2000be4:	1009883a 	mov	r4,r2
 2000be8:	200299c0 	call	200299c <whole_collide>
       whole_collide(ball[8],velocity[8]);
 2000bec:	e0bfe504 	addi	r2,fp,-108
 2000bf0:	10c01004 	addi	r3,r2,64
 2000bf4:	e0bf4d04 	addi	r2,fp,-716
 2000bf8:	10801004 	addi	r2,r2,64
 2000bfc:	180b883a 	mov	r5,r3
 2000c00:	1009883a 	mov	r4,r2
 2000c04:	200299c0 	call	200299c <whole_collide>
       whole_collide(ball[9],velocity[9]);
 2000c08:	e0bfe504 	addi	r2,fp,-108
 2000c0c:	10c01204 	addi	r3,r2,72
 2000c10:	e0bf4d04 	addi	r2,fp,-716
 2000c14:	10801204 	addi	r2,r2,72
 2000c18:	180b883a 	mov	r5,r3
 2000c1c:	1009883a 	mov	r4,r2
 2000c20:	200299c0 	call	200299c <whole_collide>

       //Collision

       detect_collide(ball[0],ball[1],collision[0]);
 2000c24:	e13f6104 	addi	r4,fp,-636
 2000c28:	e0bf4d04 	addi	r2,fp,-716
 2000c2c:	10c00204 	addi	r3,r2,8
 2000c30:	e0bf4d04 	addi	r2,fp,-716
 2000c34:	200d883a 	mov	r6,r4
 2000c38:	180b883a 	mov	r5,r3
 2000c3c:	1009883a 	mov	r4,r2
 2000c40:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[0],ball[2],collision[1]);
 2000c44:	e0bf6104 	addi	r2,fp,-636
 2000c48:	11000204 	addi	r4,r2,8
 2000c4c:	e0bf4d04 	addi	r2,fp,-716
 2000c50:	10c00404 	addi	r3,r2,16
 2000c54:	e0bf4d04 	addi	r2,fp,-716
 2000c58:	200d883a 	mov	r6,r4
 2000c5c:	180b883a 	mov	r5,r3
 2000c60:	1009883a 	mov	r4,r2
 2000c64:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[0],ball[3],collision[2]);
 2000c68:	e0bf6104 	addi	r2,fp,-636
 2000c6c:	11000404 	addi	r4,r2,16
 2000c70:	e0bf4d04 	addi	r2,fp,-716
 2000c74:	10c00604 	addi	r3,r2,24
 2000c78:	e0bf4d04 	addi	r2,fp,-716
 2000c7c:	200d883a 	mov	r6,r4
 2000c80:	180b883a 	mov	r5,r3
 2000c84:	1009883a 	mov	r4,r2
 2000c88:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[0],ball[4],collision[3]);
 2000c8c:	e0bf6104 	addi	r2,fp,-636
 2000c90:	11000604 	addi	r4,r2,24
 2000c94:	e0bf4d04 	addi	r2,fp,-716
 2000c98:	10c00804 	addi	r3,r2,32
 2000c9c:	e0bf4d04 	addi	r2,fp,-716
 2000ca0:	200d883a 	mov	r6,r4
 2000ca4:	180b883a 	mov	r5,r3
 2000ca8:	1009883a 	mov	r4,r2
 2000cac:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[0],ball[5],collision[4]);
 2000cb0:	e0bf6104 	addi	r2,fp,-636
 2000cb4:	11000804 	addi	r4,r2,32
 2000cb8:	e0bf4d04 	addi	r2,fp,-716
 2000cbc:	10c00a04 	addi	r3,r2,40
 2000cc0:	e0bf4d04 	addi	r2,fp,-716
 2000cc4:	200d883a 	mov	r6,r4
 2000cc8:	180b883a 	mov	r5,r3
 2000ccc:	1009883a 	mov	r4,r2
 2000cd0:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[0],ball[6],collision[5]);
 2000cd4:	e0bf6104 	addi	r2,fp,-636
 2000cd8:	11000a04 	addi	r4,r2,40
 2000cdc:	e0bf4d04 	addi	r2,fp,-716
 2000ce0:	10c00c04 	addi	r3,r2,48
 2000ce4:	e0bf4d04 	addi	r2,fp,-716
 2000ce8:	200d883a 	mov	r6,r4
 2000cec:	180b883a 	mov	r5,r3
 2000cf0:	1009883a 	mov	r4,r2
 2000cf4:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[0],ball[7],collision[6]);
 2000cf8:	e0bf6104 	addi	r2,fp,-636
 2000cfc:	11000c04 	addi	r4,r2,48
 2000d00:	e0bf4d04 	addi	r2,fp,-716
 2000d04:	10c00e04 	addi	r3,r2,56
 2000d08:	e0bf4d04 	addi	r2,fp,-716
 2000d0c:	200d883a 	mov	r6,r4
 2000d10:	180b883a 	mov	r5,r3
 2000d14:	1009883a 	mov	r4,r2
 2000d18:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[0],ball[8],collision[7]);
 2000d1c:	e0bf6104 	addi	r2,fp,-636
 2000d20:	11000e04 	addi	r4,r2,56
 2000d24:	e0bf4d04 	addi	r2,fp,-716
 2000d28:	10c01004 	addi	r3,r2,64
 2000d2c:	e0bf4d04 	addi	r2,fp,-716
 2000d30:	200d883a 	mov	r6,r4
 2000d34:	180b883a 	mov	r5,r3
 2000d38:	1009883a 	mov	r4,r2
 2000d3c:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[0],ball[9],collision[8]);
 2000d40:	e0bf6104 	addi	r2,fp,-636
 2000d44:	11001004 	addi	r4,r2,64
 2000d48:	e0bf4d04 	addi	r2,fp,-716
 2000d4c:	10c01204 	addi	r3,r2,72
 2000d50:	e0bf4d04 	addi	r2,fp,-716
 2000d54:	200d883a 	mov	r6,r4
 2000d58:	180b883a 	mov	r5,r3
 2000d5c:	1009883a 	mov	r4,r2
 2000d60:	2002ccc0 	call	2002ccc <detect_collide>

       detect_collide(ball[1],ball[2],collision[9]);
 2000d64:	e0bf6104 	addi	r2,fp,-636
 2000d68:	11001204 	addi	r4,r2,72
 2000d6c:	e0bf4d04 	addi	r2,fp,-716
 2000d70:	10c00404 	addi	r3,r2,16
 2000d74:	e0bf4d04 	addi	r2,fp,-716
 2000d78:	10800204 	addi	r2,r2,8
 2000d7c:	200d883a 	mov	r6,r4
 2000d80:	180b883a 	mov	r5,r3
 2000d84:	1009883a 	mov	r4,r2
 2000d88:	2002ccc0 	call	2002ccc <detect_collide>
       detect_collide(ball[1],ball[3],collision[10]);
 2000d8c:	e0bf6104 	addi	r2,fp,-636
 2000d90:	11001404 	addi	r4,r2,80
 2000d94:	e0bf4d04 	addi	r2,fp,-716
 2000d98:	10c00604 	addi	r3,r2,24
 2000d9c:	e0bf4d04 	addi	r2,fp,-716
 2000da0:	10800204 	addi	r2,r2,8
 2000da4:	200d883a 	mov	r6,r4
 2000da8:	180b883a 	mov	r5,r3
 2000dac:	1009883a 	mov	r4,r2
 2000db0:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[1],ball[4],collision[11]);
 2000db4:	e0bf6104 	addi	r2,fp,-636
 2000db8:	11001604 	addi	r4,r2,88
 2000dbc:	e0bf4d04 	addi	r2,fp,-716
 2000dc0:	10c00804 	addi	r3,r2,32
 2000dc4:	e0bf4d04 	addi	r2,fp,-716
 2000dc8:	10800204 	addi	r2,r2,8
 2000dcc:	200d883a 	mov	r6,r4
 2000dd0:	180b883a 	mov	r5,r3
 2000dd4:	1009883a 	mov	r4,r2
 2000dd8:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[1],ball[5],collision[12]);
 2000ddc:	e0bf6104 	addi	r2,fp,-636
 2000de0:	11001804 	addi	r4,r2,96
 2000de4:	e0bf4d04 	addi	r2,fp,-716
 2000de8:	10c00a04 	addi	r3,r2,40
 2000dec:	e0bf4d04 	addi	r2,fp,-716
 2000df0:	10800204 	addi	r2,r2,8
 2000df4:	200d883a 	mov	r6,r4
 2000df8:	180b883a 	mov	r5,r3
 2000dfc:	1009883a 	mov	r4,r2
 2000e00:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[1],ball[6],collision[13]);
 2000e04:	e0bf6104 	addi	r2,fp,-636
 2000e08:	11001a04 	addi	r4,r2,104
 2000e0c:	e0bf4d04 	addi	r2,fp,-716
 2000e10:	10c00c04 	addi	r3,r2,48
 2000e14:	e0bf4d04 	addi	r2,fp,-716
 2000e18:	10800204 	addi	r2,r2,8
 2000e1c:	200d883a 	mov	r6,r4
 2000e20:	180b883a 	mov	r5,r3
 2000e24:	1009883a 	mov	r4,r2
 2000e28:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[1],ball[7],collision[14]);
 2000e2c:	e0bf6104 	addi	r2,fp,-636
 2000e30:	11001c04 	addi	r4,r2,112
 2000e34:	e0bf4d04 	addi	r2,fp,-716
 2000e38:	10c00e04 	addi	r3,r2,56
 2000e3c:	e0bf4d04 	addi	r2,fp,-716
 2000e40:	10800204 	addi	r2,r2,8
 2000e44:	200d883a 	mov	r6,r4
 2000e48:	180b883a 	mov	r5,r3
 2000e4c:	1009883a 	mov	r4,r2
 2000e50:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[1],ball[8],collision[15]);
 2000e54:	e0bf6104 	addi	r2,fp,-636
 2000e58:	11001e04 	addi	r4,r2,120
 2000e5c:	e0bf4d04 	addi	r2,fp,-716
 2000e60:	10c01004 	addi	r3,r2,64
 2000e64:	e0bf4d04 	addi	r2,fp,-716
 2000e68:	10800204 	addi	r2,r2,8
 2000e6c:	200d883a 	mov	r6,r4
 2000e70:	180b883a 	mov	r5,r3
 2000e74:	1009883a 	mov	r4,r2
 2000e78:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[1],ball[9],collision[16]);
 2000e7c:	e0bf6104 	addi	r2,fp,-636
 2000e80:	11002004 	addi	r4,r2,128
 2000e84:	e0bf4d04 	addi	r2,fp,-716
 2000e88:	10c01204 	addi	r3,r2,72
 2000e8c:	e0bf4d04 	addi	r2,fp,-716
 2000e90:	10800204 	addi	r2,r2,8
 2000e94:	200d883a 	mov	r6,r4
 2000e98:	180b883a 	mov	r5,r3
 2000e9c:	1009883a 	mov	r4,r2
 2000ea0:	2002ccc0 	call	2002ccc <detect_collide>

	   detect_collide(ball[2],ball[3],collision[17]);
 2000ea4:	e0bf6104 	addi	r2,fp,-636
 2000ea8:	11002204 	addi	r4,r2,136
 2000eac:	e0bf4d04 	addi	r2,fp,-716
 2000eb0:	10c00604 	addi	r3,r2,24
 2000eb4:	e0bf4d04 	addi	r2,fp,-716
 2000eb8:	10800404 	addi	r2,r2,16
 2000ebc:	200d883a 	mov	r6,r4
 2000ec0:	180b883a 	mov	r5,r3
 2000ec4:	1009883a 	mov	r4,r2
 2000ec8:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[2],ball[4],collision[18]);
 2000ecc:	e0bf6104 	addi	r2,fp,-636
 2000ed0:	11002404 	addi	r4,r2,144
 2000ed4:	e0bf4d04 	addi	r2,fp,-716
 2000ed8:	10c00804 	addi	r3,r2,32
 2000edc:	e0bf4d04 	addi	r2,fp,-716
 2000ee0:	10800404 	addi	r2,r2,16
 2000ee4:	200d883a 	mov	r6,r4
 2000ee8:	180b883a 	mov	r5,r3
 2000eec:	1009883a 	mov	r4,r2
 2000ef0:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[2],ball[5],collision[19]);
 2000ef4:	e0bf6104 	addi	r2,fp,-636
 2000ef8:	11002604 	addi	r4,r2,152
 2000efc:	e0bf4d04 	addi	r2,fp,-716
 2000f00:	10c00a04 	addi	r3,r2,40
 2000f04:	e0bf4d04 	addi	r2,fp,-716
 2000f08:	10800404 	addi	r2,r2,16
 2000f0c:	200d883a 	mov	r6,r4
 2000f10:	180b883a 	mov	r5,r3
 2000f14:	1009883a 	mov	r4,r2
 2000f18:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[2],ball[6],collision[20]);
 2000f1c:	e0bf6104 	addi	r2,fp,-636
 2000f20:	11002804 	addi	r4,r2,160
 2000f24:	e0bf4d04 	addi	r2,fp,-716
 2000f28:	10c00c04 	addi	r3,r2,48
 2000f2c:	e0bf4d04 	addi	r2,fp,-716
 2000f30:	10800404 	addi	r2,r2,16
 2000f34:	200d883a 	mov	r6,r4
 2000f38:	180b883a 	mov	r5,r3
 2000f3c:	1009883a 	mov	r4,r2
 2000f40:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[2],ball[7],collision[21]);
 2000f44:	e0bf6104 	addi	r2,fp,-636
 2000f48:	11002a04 	addi	r4,r2,168
 2000f4c:	e0bf4d04 	addi	r2,fp,-716
 2000f50:	10c00e04 	addi	r3,r2,56
 2000f54:	e0bf4d04 	addi	r2,fp,-716
 2000f58:	10800404 	addi	r2,r2,16
 2000f5c:	200d883a 	mov	r6,r4
 2000f60:	180b883a 	mov	r5,r3
 2000f64:	1009883a 	mov	r4,r2
 2000f68:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[2],ball[8],collision[22]);
 2000f6c:	e0bf6104 	addi	r2,fp,-636
 2000f70:	11002c04 	addi	r4,r2,176
 2000f74:	e0bf4d04 	addi	r2,fp,-716
 2000f78:	10c01004 	addi	r3,r2,64
 2000f7c:	e0bf4d04 	addi	r2,fp,-716
 2000f80:	10800404 	addi	r2,r2,16
 2000f84:	200d883a 	mov	r6,r4
 2000f88:	180b883a 	mov	r5,r3
 2000f8c:	1009883a 	mov	r4,r2
 2000f90:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[2],ball[9],collision[23]);
 2000f94:	e0bf6104 	addi	r2,fp,-636
 2000f98:	11002e04 	addi	r4,r2,184
 2000f9c:	e0bf4d04 	addi	r2,fp,-716
 2000fa0:	10c01204 	addi	r3,r2,72
 2000fa4:	e0bf4d04 	addi	r2,fp,-716
 2000fa8:	10800404 	addi	r2,r2,16
 2000fac:	200d883a 	mov	r6,r4
 2000fb0:	180b883a 	mov	r5,r3
 2000fb4:	1009883a 	mov	r4,r2
 2000fb8:	2002ccc0 	call	2002ccc <detect_collide>

	   detect_collide(ball[3],ball[4],collision[24]);
 2000fbc:	e0bf6104 	addi	r2,fp,-636
 2000fc0:	11003004 	addi	r4,r2,192
 2000fc4:	e0bf4d04 	addi	r2,fp,-716
 2000fc8:	10c00804 	addi	r3,r2,32
 2000fcc:	e0bf4d04 	addi	r2,fp,-716
 2000fd0:	10800604 	addi	r2,r2,24
 2000fd4:	200d883a 	mov	r6,r4
 2000fd8:	180b883a 	mov	r5,r3
 2000fdc:	1009883a 	mov	r4,r2
 2000fe0:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[3],ball[5],collision[25]);
 2000fe4:	e0bf6104 	addi	r2,fp,-636
 2000fe8:	11003204 	addi	r4,r2,200
 2000fec:	e0bf4d04 	addi	r2,fp,-716
 2000ff0:	10c00a04 	addi	r3,r2,40
 2000ff4:	e0bf4d04 	addi	r2,fp,-716
 2000ff8:	10800604 	addi	r2,r2,24
 2000ffc:	200d883a 	mov	r6,r4
 2001000:	180b883a 	mov	r5,r3
 2001004:	1009883a 	mov	r4,r2
 2001008:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[3],ball[6],collision[26]);
 200100c:	e0bf6104 	addi	r2,fp,-636
 2001010:	11003404 	addi	r4,r2,208
 2001014:	e0bf4d04 	addi	r2,fp,-716
 2001018:	10c00c04 	addi	r3,r2,48
 200101c:	e0bf4d04 	addi	r2,fp,-716
 2001020:	10800604 	addi	r2,r2,24
 2001024:	200d883a 	mov	r6,r4
 2001028:	180b883a 	mov	r5,r3
 200102c:	1009883a 	mov	r4,r2
 2001030:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[3],ball[7],collision[27]);
 2001034:	e0bf6104 	addi	r2,fp,-636
 2001038:	11003604 	addi	r4,r2,216
 200103c:	e0bf4d04 	addi	r2,fp,-716
 2001040:	10c00e04 	addi	r3,r2,56
 2001044:	e0bf4d04 	addi	r2,fp,-716
 2001048:	10800604 	addi	r2,r2,24
 200104c:	200d883a 	mov	r6,r4
 2001050:	180b883a 	mov	r5,r3
 2001054:	1009883a 	mov	r4,r2
 2001058:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[3],ball[8],collision[28]);
 200105c:	e0bf6104 	addi	r2,fp,-636
 2001060:	11003804 	addi	r4,r2,224
 2001064:	e0bf4d04 	addi	r2,fp,-716
 2001068:	10c01004 	addi	r3,r2,64
 200106c:	e0bf4d04 	addi	r2,fp,-716
 2001070:	10800604 	addi	r2,r2,24
 2001074:	200d883a 	mov	r6,r4
 2001078:	180b883a 	mov	r5,r3
 200107c:	1009883a 	mov	r4,r2
 2001080:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[3],ball[9],collision[29]);
 2001084:	e0bf6104 	addi	r2,fp,-636
 2001088:	11003a04 	addi	r4,r2,232
 200108c:	e0bf4d04 	addi	r2,fp,-716
 2001090:	10c01204 	addi	r3,r2,72
 2001094:	e0bf4d04 	addi	r2,fp,-716
 2001098:	10800604 	addi	r2,r2,24
 200109c:	200d883a 	mov	r6,r4
 20010a0:	180b883a 	mov	r5,r3
 20010a4:	1009883a 	mov	r4,r2
 20010a8:	2002ccc0 	call	2002ccc <detect_collide>

	   detect_collide(ball[4],ball[5],collision[30]);
 20010ac:	e0bf6104 	addi	r2,fp,-636
 20010b0:	11003c04 	addi	r4,r2,240
 20010b4:	e0bf4d04 	addi	r2,fp,-716
 20010b8:	10c00a04 	addi	r3,r2,40
 20010bc:	e0bf4d04 	addi	r2,fp,-716
 20010c0:	10800804 	addi	r2,r2,32
 20010c4:	200d883a 	mov	r6,r4
 20010c8:	180b883a 	mov	r5,r3
 20010cc:	1009883a 	mov	r4,r2
 20010d0:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[4],ball[6],collision[31]);
 20010d4:	e0bf6104 	addi	r2,fp,-636
 20010d8:	11003e04 	addi	r4,r2,248
 20010dc:	e0bf4d04 	addi	r2,fp,-716
 20010e0:	10c00c04 	addi	r3,r2,48
 20010e4:	e0bf4d04 	addi	r2,fp,-716
 20010e8:	10800804 	addi	r2,r2,32
 20010ec:	200d883a 	mov	r6,r4
 20010f0:	180b883a 	mov	r5,r3
 20010f4:	1009883a 	mov	r4,r2
 20010f8:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[4],ball[7],collision[32]);
 20010fc:	e0bf6104 	addi	r2,fp,-636
 2001100:	11004004 	addi	r4,r2,256
 2001104:	e0bf4d04 	addi	r2,fp,-716
 2001108:	10c00e04 	addi	r3,r2,56
 200110c:	e0bf4d04 	addi	r2,fp,-716
 2001110:	10800804 	addi	r2,r2,32
 2001114:	200d883a 	mov	r6,r4
 2001118:	180b883a 	mov	r5,r3
 200111c:	1009883a 	mov	r4,r2
 2001120:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[4],ball[8],collision[33]);
 2001124:	e0bf6104 	addi	r2,fp,-636
 2001128:	11004204 	addi	r4,r2,264
 200112c:	e0bf4d04 	addi	r2,fp,-716
 2001130:	10c01004 	addi	r3,r2,64
 2001134:	e0bf4d04 	addi	r2,fp,-716
 2001138:	10800804 	addi	r2,r2,32
 200113c:	200d883a 	mov	r6,r4
 2001140:	180b883a 	mov	r5,r3
 2001144:	1009883a 	mov	r4,r2
 2001148:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[4],ball[9],collision[34]);
 200114c:	e0bf6104 	addi	r2,fp,-636
 2001150:	11004404 	addi	r4,r2,272
 2001154:	e0bf4d04 	addi	r2,fp,-716
 2001158:	10c01204 	addi	r3,r2,72
 200115c:	e0bf4d04 	addi	r2,fp,-716
 2001160:	10800804 	addi	r2,r2,32
 2001164:	200d883a 	mov	r6,r4
 2001168:	180b883a 	mov	r5,r3
 200116c:	1009883a 	mov	r4,r2
 2001170:	2002ccc0 	call	2002ccc <detect_collide>

	   detect_collide(ball[5],ball[6],collision[35]);
 2001174:	e0bf6104 	addi	r2,fp,-636
 2001178:	11004604 	addi	r4,r2,280
 200117c:	e0bf4d04 	addi	r2,fp,-716
 2001180:	10c00c04 	addi	r3,r2,48
 2001184:	e0bf4d04 	addi	r2,fp,-716
 2001188:	10800a04 	addi	r2,r2,40
 200118c:	200d883a 	mov	r6,r4
 2001190:	180b883a 	mov	r5,r3
 2001194:	1009883a 	mov	r4,r2
 2001198:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[5],ball[7],collision[36]);
 200119c:	e0bf6104 	addi	r2,fp,-636
 20011a0:	11004804 	addi	r4,r2,288
 20011a4:	e0bf4d04 	addi	r2,fp,-716
 20011a8:	10c00e04 	addi	r3,r2,56
 20011ac:	e0bf4d04 	addi	r2,fp,-716
 20011b0:	10800a04 	addi	r2,r2,40
 20011b4:	200d883a 	mov	r6,r4
 20011b8:	180b883a 	mov	r5,r3
 20011bc:	1009883a 	mov	r4,r2
 20011c0:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[5],ball[8],collision[37]);
 20011c4:	e0bf6104 	addi	r2,fp,-636
 20011c8:	11004a04 	addi	r4,r2,296
 20011cc:	e0bf4d04 	addi	r2,fp,-716
 20011d0:	10c01004 	addi	r3,r2,64
 20011d4:	e0bf4d04 	addi	r2,fp,-716
 20011d8:	10800a04 	addi	r2,r2,40
 20011dc:	200d883a 	mov	r6,r4
 20011e0:	180b883a 	mov	r5,r3
 20011e4:	1009883a 	mov	r4,r2
 20011e8:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[5],ball[9],collision[38]);
 20011ec:	e0bf6104 	addi	r2,fp,-636
 20011f0:	11004c04 	addi	r4,r2,304
 20011f4:	e0bf4d04 	addi	r2,fp,-716
 20011f8:	10c01204 	addi	r3,r2,72
 20011fc:	e0bf4d04 	addi	r2,fp,-716
 2001200:	10800a04 	addi	r2,r2,40
 2001204:	200d883a 	mov	r6,r4
 2001208:	180b883a 	mov	r5,r3
 200120c:	1009883a 	mov	r4,r2
 2001210:	2002ccc0 	call	2002ccc <detect_collide>

	   detect_collide(ball[6],ball[7],collision[39]);
 2001214:	e0bf6104 	addi	r2,fp,-636
 2001218:	11004e04 	addi	r4,r2,312
 200121c:	e0bf4d04 	addi	r2,fp,-716
 2001220:	10c00e04 	addi	r3,r2,56
 2001224:	e0bf4d04 	addi	r2,fp,-716
 2001228:	10800c04 	addi	r2,r2,48
 200122c:	200d883a 	mov	r6,r4
 2001230:	180b883a 	mov	r5,r3
 2001234:	1009883a 	mov	r4,r2
 2001238:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[6],ball[8],collision[40]);
 200123c:	e0bf6104 	addi	r2,fp,-636
 2001240:	11005004 	addi	r4,r2,320
 2001244:	e0bf4d04 	addi	r2,fp,-716
 2001248:	10c01004 	addi	r3,r2,64
 200124c:	e0bf4d04 	addi	r2,fp,-716
 2001250:	10800c04 	addi	r2,r2,48
 2001254:	200d883a 	mov	r6,r4
 2001258:	180b883a 	mov	r5,r3
 200125c:	1009883a 	mov	r4,r2
 2001260:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[6],ball[9],collision[41]);
 2001264:	e0bf6104 	addi	r2,fp,-636
 2001268:	11005204 	addi	r4,r2,328
 200126c:	e0bf4d04 	addi	r2,fp,-716
 2001270:	10c01204 	addi	r3,r2,72
 2001274:	e0bf4d04 	addi	r2,fp,-716
 2001278:	10800c04 	addi	r2,r2,48
 200127c:	200d883a 	mov	r6,r4
 2001280:	180b883a 	mov	r5,r3
 2001284:	1009883a 	mov	r4,r2
 2001288:	2002ccc0 	call	2002ccc <detect_collide>

	   detect_collide(ball[7],ball[8],collision[42]);
 200128c:	e0bf6104 	addi	r2,fp,-636
 2001290:	11005404 	addi	r4,r2,336
 2001294:	e0bf4d04 	addi	r2,fp,-716
 2001298:	10c01004 	addi	r3,r2,64
 200129c:	e0bf4d04 	addi	r2,fp,-716
 20012a0:	10800e04 	addi	r2,r2,56
 20012a4:	200d883a 	mov	r6,r4
 20012a8:	180b883a 	mov	r5,r3
 20012ac:	1009883a 	mov	r4,r2
 20012b0:	2002ccc0 	call	2002ccc <detect_collide>
	   detect_collide(ball[7],ball[9],collision[43]);
 20012b4:	e0bf6104 	addi	r2,fp,-636
 20012b8:	11005604 	addi	r4,r2,344
 20012bc:	e0bf4d04 	addi	r2,fp,-716
 20012c0:	10c01204 	addi	r3,r2,72
 20012c4:	e0bf4d04 	addi	r2,fp,-716
 20012c8:	10800e04 	addi	r2,r2,56
 20012cc:	200d883a 	mov	r6,r4
 20012d0:	180b883a 	mov	r5,r3
 20012d4:	1009883a 	mov	r4,r2
 20012d8:	2002ccc0 	call	2002ccc <detect_collide>

	   detect_collide(ball[8],ball[9],collision[44]);
 20012dc:	e0bf6104 	addi	r2,fp,-636
 20012e0:	11005804 	addi	r4,r2,352
 20012e4:	e0bf4d04 	addi	r2,fp,-716
 20012e8:	10c01204 	addi	r3,r2,72
 20012ec:	e0bf4d04 	addi	r2,fp,-716
 20012f0:	10801004 	addi	r2,r2,64
 20012f4:	200d883a 	mov	r6,r4
 20012f8:	180b883a 	mov	r5,r3
 20012fc:	1009883a 	mov	r4,r2
 2001300:	2002ccc0 	call	2002ccc <detect_collide>

	   //Calcul of collision

  	   collide_calc(ball[0],ball[1],velocity[0],velocity[1],collision[0],0);
 2001304:	e0bfe504 	addi	r2,fp,-108
 2001308:	11800204 	addi	r6,r2,8
 200130c:	e17fe504 	addi	r5,fp,-108
 2001310:	e0bf4d04 	addi	r2,fp,-716
 2001314:	11000204 	addi	r4,r2,8
 2001318:	e0ff4d04 	addi	r3,fp,-716
 200131c:	d8000115 	stw	zero,4(sp)
 2001320:	e0bf6104 	addi	r2,fp,-636
 2001324:	d8800015 	stw	r2,0(sp)
 2001328:	300f883a 	mov	r7,r6
 200132c:	280d883a 	mov	r6,r5
 2001330:	200b883a 	mov	r5,r4
 2001334:	1809883a 	mov	r4,r3
 2001338:	2002d8c0 	call	2002d8c <collide_calc>
  	   collide_calc(ball[0],ball[2],velocity[0],velocity[2],collision[1],1);
 200133c:	e0bfe504 	addi	r2,fp,-108
 2001340:	11800404 	addi	r6,r2,16
 2001344:	e17fe504 	addi	r5,fp,-108
 2001348:	e0bf4d04 	addi	r2,fp,-716
 200134c:	11000404 	addi	r4,r2,16
 2001350:	e0ff4d04 	addi	r3,fp,-716
 2001354:	00800044 	movi	r2,1
 2001358:	d8800115 	stw	r2,4(sp)
 200135c:	e0bf6104 	addi	r2,fp,-636
 2001360:	10800204 	addi	r2,r2,8
 2001364:	d8800015 	stw	r2,0(sp)
 2001368:	300f883a 	mov	r7,r6
 200136c:	280d883a 	mov	r6,r5
 2001370:	200b883a 	mov	r5,r4
 2001374:	1809883a 	mov	r4,r3
 2001378:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[0],ball[3],velocity[0],velocity[3],collision[2],2);
 200137c:	e0bfe504 	addi	r2,fp,-108
 2001380:	11800604 	addi	r6,r2,24
 2001384:	e17fe504 	addi	r5,fp,-108
 2001388:	e0bf4d04 	addi	r2,fp,-716
 200138c:	11000604 	addi	r4,r2,24
 2001390:	e0ff4d04 	addi	r3,fp,-716
 2001394:	00800084 	movi	r2,2
 2001398:	d8800115 	stw	r2,4(sp)
 200139c:	e0bf6104 	addi	r2,fp,-636
 20013a0:	10800404 	addi	r2,r2,16
 20013a4:	d8800015 	stw	r2,0(sp)
 20013a8:	300f883a 	mov	r7,r6
 20013ac:	280d883a 	mov	r6,r5
 20013b0:	200b883a 	mov	r5,r4
 20013b4:	1809883a 	mov	r4,r3
 20013b8:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[0],ball[4],velocity[0],velocity[4],collision[3],3);
 20013bc:	e0bfe504 	addi	r2,fp,-108
 20013c0:	11800804 	addi	r6,r2,32
 20013c4:	e17fe504 	addi	r5,fp,-108
 20013c8:	e0bf4d04 	addi	r2,fp,-716
 20013cc:	11000804 	addi	r4,r2,32
 20013d0:	e0ff4d04 	addi	r3,fp,-716
 20013d4:	008000c4 	movi	r2,3
 20013d8:	d8800115 	stw	r2,4(sp)
 20013dc:	e0bf6104 	addi	r2,fp,-636
 20013e0:	10800604 	addi	r2,r2,24
 20013e4:	d8800015 	stw	r2,0(sp)
 20013e8:	300f883a 	mov	r7,r6
 20013ec:	280d883a 	mov	r6,r5
 20013f0:	200b883a 	mov	r5,r4
 20013f4:	1809883a 	mov	r4,r3
 20013f8:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[0],ball[5],velocity[0],velocity[5],collision[4],4);
 20013fc:	e0bfe504 	addi	r2,fp,-108
 2001400:	11800a04 	addi	r6,r2,40
 2001404:	e17fe504 	addi	r5,fp,-108
 2001408:	e0bf4d04 	addi	r2,fp,-716
 200140c:	11000a04 	addi	r4,r2,40
 2001410:	e0ff4d04 	addi	r3,fp,-716
 2001414:	00800104 	movi	r2,4
 2001418:	d8800115 	stw	r2,4(sp)
 200141c:	e0bf6104 	addi	r2,fp,-636
 2001420:	10800804 	addi	r2,r2,32
 2001424:	d8800015 	stw	r2,0(sp)
 2001428:	300f883a 	mov	r7,r6
 200142c:	280d883a 	mov	r6,r5
 2001430:	200b883a 	mov	r5,r4
 2001434:	1809883a 	mov	r4,r3
 2001438:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[0],ball[6],velocity[0],velocity[6],collision[5],5);
 200143c:	e0bfe504 	addi	r2,fp,-108
 2001440:	11800c04 	addi	r6,r2,48
 2001444:	e17fe504 	addi	r5,fp,-108
 2001448:	e0bf4d04 	addi	r2,fp,-716
 200144c:	11000c04 	addi	r4,r2,48
 2001450:	e0ff4d04 	addi	r3,fp,-716
 2001454:	00800144 	movi	r2,5
 2001458:	d8800115 	stw	r2,4(sp)
 200145c:	e0bf6104 	addi	r2,fp,-636
 2001460:	10800a04 	addi	r2,r2,40
 2001464:	d8800015 	stw	r2,0(sp)
 2001468:	300f883a 	mov	r7,r6
 200146c:	280d883a 	mov	r6,r5
 2001470:	200b883a 	mov	r5,r4
 2001474:	1809883a 	mov	r4,r3
 2001478:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[0],ball[7],velocity[0],velocity[7],collision[6],6);
 200147c:	e0bfe504 	addi	r2,fp,-108
 2001480:	11800e04 	addi	r6,r2,56
 2001484:	e17fe504 	addi	r5,fp,-108
 2001488:	e0bf4d04 	addi	r2,fp,-716
 200148c:	11000e04 	addi	r4,r2,56
 2001490:	e0ff4d04 	addi	r3,fp,-716
 2001494:	00800184 	movi	r2,6
 2001498:	d8800115 	stw	r2,4(sp)
 200149c:	e0bf6104 	addi	r2,fp,-636
 20014a0:	10800c04 	addi	r2,r2,48
 20014a4:	d8800015 	stw	r2,0(sp)
 20014a8:	300f883a 	mov	r7,r6
 20014ac:	280d883a 	mov	r6,r5
 20014b0:	200b883a 	mov	r5,r4
 20014b4:	1809883a 	mov	r4,r3
 20014b8:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[0],ball[8],velocity[0],velocity[8],collision[7],7);
 20014bc:	e0bfe504 	addi	r2,fp,-108
 20014c0:	11801004 	addi	r6,r2,64
 20014c4:	e17fe504 	addi	r5,fp,-108
 20014c8:	e0bf4d04 	addi	r2,fp,-716
 20014cc:	11001004 	addi	r4,r2,64
 20014d0:	e0ff4d04 	addi	r3,fp,-716
 20014d4:	008001c4 	movi	r2,7
 20014d8:	d8800115 	stw	r2,4(sp)
 20014dc:	e0bf6104 	addi	r2,fp,-636
 20014e0:	10800e04 	addi	r2,r2,56
 20014e4:	d8800015 	stw	r2,0(sp)
 20014e8:	300f883a 	mov	r7,r6
 20014ec:	280d883a 	mov	r6,r5
 20014f0:	200b883a 	mov	r5,r4
 20014f4:	1809883a 	mov	r4,r3
 20014f8:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[0],ball[9],velocity[0],velocity[9],collision[8],8);
 20014fc:	e0bfe504 	addi	r2,fp,-108
 2001500:	11801204 	addi	r6,r2,72
 2001504:	e17fe504 	addi	r5,fp,-108
 2001508:	e0bf4d04 	addi	r2,fp,-716
 200150c:	11001204 	addi	r4,r2,72
 2001510:	e0ff4d04 	addi	r3,fp,-716
 2001514:	00800204 	movi	r2,8
 2001518:	d8800115 	stw	r2,4(sp)
 200151c:	e0bf6104 	addi	r2,fp,-636
 2001520:	10801004 	addi	r2,r2,64
 2001524:	d8800015 	stw	r2,0(sp)
 2001528:	300f883a 	mov	r7,r6
 200152c:	280d883a 	mov	r6,r5
 2001530:	200b883a 	mov	r5,r4
 2001534:	1809883a 	mov	r4,r3
 2001538:	2002d8c0 	call	2002d8c <collide_calc>

	   collide_calc(ball[1],ball[2],velocity[1],velocity[2],collision[9],9);
 200153c:	e0bfe504 	addi	r2,fp,-108
 2001540:	11800404 	addi	r6,r2,16
 2001544:	e0bfe504 	addi	r2,fp,-108
 2001548:	11400204 	addi	r5,r2,8
 200154c:	e0bf4d04 	addi	r2,fp,-716
 2001550:	11000404 	addi	r4,r2,16
 2001554:	e0bf4d04 	addi	r2,fp,-716
 2001558:	10c00204 	addi	r3,r2,8
 200155c:	00800244 	movi	r2,9
 2001560:	d8800115 	stw	r2,4(sp)
 2001564:	e0bf6104 	addi	r2,fp,-636
 2001568:	10801204 	addi	r2,r2,72
 200156c:	d8800015 	stw	r2,0(sp)
 2001570:	300f883a 	mov	r7,r6
 2001574:	280d883a 	mov	r6,r5
 2001578:	200b883a 	mov	r5,r4
 200157c:	1809883a 	mov	r4,r3
 2001580:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[1],ball[3],velocity[1],velocity[3],collision[10],10);
 2001584:	e0bfe504 	addi	r2,fp,-108
 2001588:	11800604 	addi	r6,r2,24
 200158c:	e0bfe504 	addi	r2,fp,-108
 2001590:	11400204 	addi	r5,r2,8
 2001594:	e0bf4d04 	addi	r2,fp,-716
 2001598:	11000604 	addi	r4,r2,24
 200159c:	e0bf4d04 	addi	r2,fp,-716
 20015a0:	10c00204 	addi	r3,r2,8
 20015a4:	00800284 	movi	r2,10
 20015a8:	d8800115 	stw	r2,4(sp)
 20015ac:	e0bf6104 	addi	r2,fp,-636
 20015b0:	10801404 	addi	r2,r2,80
 20015b4:	d8800015 	stw	r2,0(sp)
 20015b8:	300f883a 	mov	r7,r6
 20015bc:	280d883a 	mov	r6,r5
 20015c0:	200b883a 	mov	r5,r4
 20015c4:	1809883a 	mov	r4,r3
 20015c8:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[1],ball[4],velocity[1],velocity[4],collision[11],11);
 20015cc:	e0bfe504 	addi	r2,fp,-108
 20015d0:	11800804 	addi	r6,r2,32
 20015d4:	e0bfe504 	addi	r2,fp,-108
 20015d8:	11400204 	addi	r5,r2,8
 20015dc:	e0bf4d04 	addi	r2,fp,-716
 20015e0:	11000804 	addi	r4,r2,32
 20015e4:	e0bf4d04 	addi	r2,fp,-716
 20015e8:	10c00204 	addi	r3,r2,8
 20015ec:	008002c4 	movi	r2,11
 20015f0:	d8800115 	stw	r2,4(sp)
 20015f4:	e0bf6104 	addi	r2,fp,-636
 20015f8:	10801604 	addi	r2,r2,88
 20015fc:	d8800015 	stw	r2,0(sp)
 2001600:	300f883a 	mov	r7,r6
 2001604:	280d883a 	mov	r6,r5
 2001608:	200b883a 	mov	r5,r4
 200160c:	1809883a 	mov	r4,r3
 2001610:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[1],ball[5],velocity[1],velocity[5],collision[12],12);
 2001614:	e0bfe504 	addi	r2,fp,-108
 2001618:	11800a04 	addi	r6,r2,40
 200161c:	e0bfe504 	addi	r2,fp,-108
 2001620:	11400204 	addi	r5,r2,8
 2001624:	e0bf4d04 	addi	r2,fp,-716
 2001628:	11000a04 	addi	r4,r2,40
 200162c:	e0bf4d04 	addi	r2,fp,-716
 2001630:	10c00204 	addi	r3,r2,8
 2001634:	00800304 	movi	r2,12
 2001638:	d8800115 	stw	r2,4(sp)
 200163c:	e0bf6104 	addi	r2,fp,-636
 2001640:	10801804 	addi	r2,r2,96
 2001644:	d8800015 	stw	r2,0(sp)
 2001648:	300f883a 	mov	r7,r6
 200164c:	280d883a 	mov	r6,r5
 2001650:	200b883a 	mov	r5,r4
 2001654:	1809883a 	mov	r4,r3
 2001658:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[1],ball[6],velocity[1],velocity[6],collision[13],13);
 200165c:	e0bfe504 	addi	r2,fp,-108
 2001660:	11800c04 	addi	r6,r2,48
 2001664:	e0bfe504 	addi	r2,fp,-108
 2001668:	11400204 	addi	r5,r2,8
 200166c:	e0bf4d04 	addi	r2,fp,-716
 2001670:	11000c04 	addi	r4,r2,48
 2001674:	e0bf4d04 	addi	r2,fp,-716
 2001678:	10c00204 	addi	r3,r2,8
 200167c:	00800344 	movi	r2,13
 2001680:	d8800115 	stw	r2,4(sp)
 2001684:	e0bf6104 	addi	r2,fp,-636
 2001688:	10801a04 	addi	r2,r2,104
 200168c:	d8800015 	stw	r2,0(sp)
 2001690:	300f883a 	mov	r7,r6
 2001694:	280d883a 	mov	r6,r5
 2001698:	200b883a 	mov	r5,r4
 200169c:	1809883a 	mov	r4,r3
 20016a0:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[1],ball[7],velocity[1],velocity[7],collision[14],14);
 20016a4:	e0bfe504 	addi	r2,fp,-108
 20016a8:	11800e04 	addi	r6,r2,56
 20016ac:	e0bfe504 	addi	r2,fp,-108
 20016b0:	11400204 	addi	r5,r2,8
 20016b4:	e0bf4d04 	addi	r2,fp,-716
 20016b8:	11000e04 	addi	r4,r2,56
 20016bc:	e0bf4d04 	addi	r2,fp,-716
 20016c0:	10c00204 	addi	r3,r2,8
 20016c4:	00800384 	movi	r2,14
 20016c8:	d8800115 	stw	r2,4(sp)
 20016cc:	e0bf6104 	addi	r2,fp,-636
 20016d0:	10801c04 	addi	r2,r2,112
 20016d4:	d8800015 	stw	r2,0(sp)
 20016d8:	300f883a 	mov	r7,r6
 20016dc:	280d883a 	mov	r6,r5
 20016e0:	200b883a 	mov	r5,r4
 20016e4:	1809883a 	mov	r4,r3
 20016e8:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[1],ball[8],velocity[1],velocity[8],collision[15],15);
 20016ec:	e0bfe504 	addi	r2,fp,-108
 20016f0:	11801004 	addi	r6,r2,64
 20016f4:	e0bfe504 	addi	r2,fp,-108
 20016f8:	11400204 	addi	r5,r2,8
 20016fc:	e0bf4d04 	addi	r2,fp,-716
 2001700:	11001004 	addi	r4,r2,64
 2001704:	e0bf4d04 	addi	r2,fp,-716
 2001708:	10c00204 	addi	r3,r2,8
 200170c:	008003c4 	movi	r2,15
 2001710:	d8800115 	stw	r2,4(sp)
 2001714:	e0bf6104 	addi	r2,fp,-636
 2001718:	10801e04 	addi	r2,r2,120
 200171c:	d8800015 	stw	r2,0(sp)
 2001720:	300f883a 	mov	r7,r6
 2001724:	280d883a 	mov	r6,r5
 2001728:	200b883a 	mov	r5,r4
 200172c:	1809883a 	mov	r4,r3
 2001730:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[1],ball[9],velocity[1],velocity[9],collision[16],16);
 2001734:	e0bfe504 	addi	r2,fp,-108
 2001738:	11801204 	addi	r6,r2,72
 200173c:	e0bfe504 	addi	r2,fp,-108
 2001740:	11400204 	addi	r5,r2,8
 2001744:	e0bf4d04 	addi	r2,fp,-716
 2001748:	11001204 	addi	r4,r2,72
 200174c:	e0bf4d04 	addi	r2,fp,-716
 2001750:	10c00204 	addi	r3,r2,8
 2001754:	00800404 	movi	r2,16
 2001758:	d8800115 	stw	r2,4(sp)
 200175c:	e0bf6104 	addi	r2,fp,-636
 2001760:	10802004 	addi	r2,r2,128
 2001764:	d8800015 	stw	r2,0(sp)
 2001768:	300f883a 	mov	r7,r6
 200176c:	280d883a 	mov	r6,r5
 2001770:	200b883a 	mov	r5,r4
 2001774:	1809883a 	mov	r4,r3
 2001778:	2002d8c0 	call	2002d8c <collide_calc>

	   collide_calc(ball[2],ball[3],velocity[2],velocity[3],collision[17],17);
 200177c:	e0bfe504 	addi	r2,fp,-108
 2001780:	11800604 	addi	r6,r2,24
 2001784:	e0bfe504 	addi	r2,fp,-108
 2001788:	11400404 	addi	r5,r2,16
 200178c:	e0bf4d04 	addi	r2,fp,-716
 2001790:	11000604 	addi	r4,r2,24
 2001794:	e0bf4d04 	addi	r2,fp,-716
 2001798:	10c00404 	addi	r3,r2,16
 200179c:	00800444 	movi	r2,17
 20017a0:	d8800115 	stw	r2,4(sp)
 20017a4:	e0bf6104 	addi	r2,fp,-636
 20017a8:	10802204 	addi	r2,r2,136
 20017ac:	d8800015 	stw	r2,0(sp)
 20017b0:	300f883a 	mov	r7,r6
 20017b4:	280d883a 	mov	r6,r5
 20017b8:	200b883a 	mov	r5,r4
 20017bc:	1809883a 	mov	r4,r3
 20017c0:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[2],ball[4],velocity[2],velocity[4],collision[18],18);
 20017c4:	e0bfe504 	addi	r2,fp,-108
 20017c8:	11800804 	addi	r6,r2,32
 20017cc:	e0bfe504 	addi	r2,fp,-108
 20017d0:	11400404 	addi	r5,r2,16
 20017d4:	e0bf4d04 	addi	r2,fp,-716
 20017d8:	11000804 	addi	r4,r2,32
 20017dc:	e0bf4d04 	addi	r2,fp,-716
 20017e0:	10c00404 	addi	r3,r2,16
 20017e4:	00800484 	movi	r2,18
 20017e8:	d8800115 	stw	r2,4(sp)
 20017ec:	e0bf6104 	addi	r2,fp,-636
 20017f0:	10802404 	addi	r2,r2,144
 20017f4:	d8800015 	stw	r2,0(sp)
 20017f8:	300f883a 	mov	r7,r6
 20017fc:	280d883a 	mov	r6,r5
 2001800:	200b883a 	mov	r5,r4
 2001804:	1809883a 	mov	r4,r3
 2001808:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[2],ball[5],velocity[2],velocity[5],collision[19],19);
 200180c:	e0bfe504 	addi	r2,fp,-108
 2001810:	11800a04 	addi	r6,r2,40
 2001814:	e0bfe504 	addi	r2,fp,-108
 2001818:	11400404 	addi	r5,r2,16
 200181c:	e0bf4d04 	addi	r2,fp,-716
 2001820:	11000a04 	addi	r4,r2,40
 2001824:	e0bf4d04 	addi	r2,fp,-716
 2001828:	10c00404 	addi	r3,r2,16
 200182c:	008004c4 	movi	r2,19
 2001830:	d8800115 	stw	r2,4(sp)
 2001834:	e0bf6104 	addi	r2,fp,-636
 2001838:	10802604 	addi	r2,r2,152
 200183c:	d8800015 	stw	r2,0(sp)
 2001840:	300f883a 	mov	r7,r6
 2001844:	280d883a 	mov	r6,r5
 2001848:	200b883a 	mov	r5,r4
 200184c:	1809883a 	mov	r4,r3
 2001850:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[2],ball[6],velocity[2],velocity[6],collision[20],20);
 2001854:	e0bfe504 	addi	r2,fp,-108
 2001858:	11800c04 	addi	r6,r2,48
 200185c:	e0bfe504 	addi	r2,fp,-108
 2001860:	11400404 	addi	r5,r2,16
 2001864:	e0bf4d04 	addi	r2,fp,-716
 2001868:	11000c04 	addi	r4,r2,48
 200186c:	e0bf4d04 	addi	r2,fp,-716
 2001870:	10c00404 	addi	r3,r2,16
 2001874:	00800504 	movi	r2,20
 2001878:	d8800115 	stw	r2,4(sp)
 200187c:	e0bf6104 	addi	r2,fp,-636
 2001880:	10802804 	addi	r2,r2,160
 2001884:	d8800015 	stw	r2,0(sp)
 2001888:	300f883a 	mov	r7,r6
 200188c:	280d883a 	mov	r6,r5
 2001890:	200b883a 	mov	r5,r4
 2001894:	1809883a 	mov	r4,r3
 2001898:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[2],ball[7],velocity[2],velocity[7],collision[21],21);
 200189c:	e0bfe504 	addi	r2,fp,-108
 20018a0:	11800e04 	addi	r6,r2,56
 20018a4:	e0bfe504 	addi	r2,fp,-108
 20018a8:	11400404 	addi	r5,r2,16
 20018ac:	e0bf4d04 	addi	r2,fp,-716
 20018b0:	11000e04 	addi	r4,r2,56
 20018b4:	e0bf4d04 	addi	r2,fp,-716
 20018b8:	10c00404 	addi	r3,r2,16
 20018bc:	00800544 	movi	r2,21
 20018c0:	d8800115 	stw	r2,4(sp)
 20018c4:	e0bf6104 	addi	r2,fp,-636
 20018c8:	10802a04 	addi	r2,r2,168
 20018cc:	d8800015 	stw	r2,0(sp)
 20018d0:	300f883a 	mov	r7,r6
 20018d4:	280d883a 	mov	r6,r5
 20018d8:	200b883a 	mov	r5,r4
 20018dc:	1809883a 	mov	r4,r3
 20018e0:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[2],ball[8],velocity[2],velocity[8],collision[22],22);
 20018e4:	e0bfe504 	addi	r2,fp,-108
 20018e8:	11801004 	addi	r6,r2,64
 20018ec:	e0bfe504 	addi	r2,fp,-108
 20018f0:	11400404 	addi	r5,r2,16
 20018f4:	e0bf4d04 	addi	r2,fp,-716
 20018f8:	11001004 	addi	r4,r2,64
 20018fc:	e0bf4d04 	addi	r2,fp,-716
 2001900:	10c00404 	addi	r3,r2,16
 2001904:	00800584 	movi	r2,22
 2001908:	d8800115 	stw	r2,4(sp)
 200190c:	e0bf6104 	addi	r2,fp,-636
 2001910:	10802c04 	addi	r2,r2,176
 2001914:	d8800015 	stw	r2,0(sp)
 2001918:	300f883a 	mov	r7,r6
 200191c:	280d883a 	mov	r6,r5
 2001920:	200b883a 	mov	r5,r4
 2001924:	1809883a 	mov	r4,r3
 2001928:	2002d8c0 	call	2002d8c <collide_calc>
       collide_calc(ball[2],ball[9],velocity[2],velocity[9],collision[23],23);
 200192c:	e0bfe504 	addi	r2,fp,-108
 2001930:	11801204 	addi	r6,r2,72
 2001934:	e0bfe504 	addi	r2,fp,-108
 2001938:	11400404 	addi	r5,r2,16
 200193c:	e0bf4d04 	addi	r2,fp,-716
 2001940:	11001204 	addi	r4,r2,72
 2001944:	e0bf4d04 	addi	r2,fp,-716
 2001948:	10c00404 	addi	r3,r2,16
 200194c:	008005c4 	movi	r2,23
 2001950:	d8800115 	stw	r2,4(sp)
 2001954:	e0bf6104 	addi	r2,fp,-636
 2001958:	10802e04 	addi	r2,r2,184
 200195c:	d8800015 	stw	r2,0(sp)
 2001960:	300f883a 	mov	r7,r6
 2001964:	280d883a 	mov	r6,r5
 2001968:	200b883a 	mov	r5,r4
 200196c:	1809883a 	mov	r4,r3
 2001970:	2002d8c0 	call	2002d8c <collide_calc>

       collide_calc(ball[3],ball[4],velocity[3],velocity[4],collision[24],24);
 2001974:	e0bfe504 	addi	r2,fp,-108
 2001978:	11800804 	addi	r6,r2,32
 200197c:	e0bfe504 	addi	r2,fp,-108
 2001980:	11400604 	addi	r5,r2,24
 2001984:	e0bf4d04 	addi	r2,fp,-716
 2001988:	11000804 	addi	r4,r2,32
 200198c:	e0bf4d04 	addi	r2,fp,-716
 2001990:	10c00604 	addi	r3,r2,24
 2001994:	00800604 	movi	r2,24
 2001998:	d8800115 	stw	r2,4(sp)
 200199c:	e0bf6104 	addi	r2,fp,-636
 20019a0:	10803004 	addi	r2,r2,192
 20019a4:	d8800015 	stw	r2,0(sp)
 20019a8:	300f883a 	mov	r7,r6
 20019ac:	280d883a 	mov	r6,r5
 20019b0:	200b883a 	mov	r5,r4
 20019b4:	1809883a 	mov	r4,r3
 20019b8:	2002d8c0 	call	2002d8c <collide_calc>
 	   collide_calc(ball[3],ball[5],velocity[3],velocity[5],collision[25],25);
 20019bc:	e0bfe504 	addi	r2,fp,-108
 20019c0:	11800a04 	addi	r6,r2,40
 20019c4:	e0bfe504 	addi	r2,fp,-108
 20019c8:	11400604 	addi	r5,r2,24
 20019cc:	e0bf4d04 	addi	r2,fp,-716
 20019d0:	11000a04 	addi	r4,r2,40
 20019d4:	e0bf4d04 	addi	r2,fp,-716
 20019d8:	10c00604 	addi	r3,r2,24
 20019dc:	00800644 	movi	r2,25
 20019e0:	d8800115 	stw	r2,4(sp)
 20019e4:	e0bf6104 	addi	r2,fp,-636
 20019e8:	10803204 	addi	r2,r2,200
 20019ec:	d8800015 	stw	r2,0(sp)
 20019f0:	300f883a 	mov	r7,r6
 20019f4:	280d883a 	mov	r6,r5
 20019f8:	200b883a 	mov	r5,r4
 20019fc:	1809883a 	mov	r4,r3
 2001a00:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[3],ball[6],velocity[3],velocity[6],collision[26],26);
 2001a04:	e0bfe504 	addi	r2,fp,-108
 2001a08:	11800c04 	addi	r6,r2,48
 2001a0c:	e0bfe504 	addi	r2,fp,-108
 2001a10:	11400604 	addi	r5,r2,24
 2001a14:	e0bf4d04 	addi	r2,fp,-716
 2001a18:	11000c04 	addi	r4,r2,48
 2001a1c:	e0bf4d04 	addi	r2,fp,-716
 2001a20:	10c00604 	addi	r3,r2,24
 2001a24:	00800684 	movi	r2,26
 2001a28:	d8800115 	stw	r2,4(sp)
 2001a2c:	e0bf6104 	addi	r2,fp,-636
 2001a30:	10803404 	addi	r2,r2,208
 2001a34:	d8800015 	stw	r2,0(sp)
 2001a38:	300f883a 	mov	r7,r6
 2001a3c:	280d883a 	mov	r6,r5
 2001a40:	200b883a 	mov	r5,r4
 2001a44:	1809883a 	mov	r4,r3
 2001a48:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[3],ball[7],velocity[3],velocity[7],collision[27],27);
 2001a4c:	e0bfe504 	addi	r2,fp,-108
 2001a50:	11800e04 	addi	r6,r2,56
 2001a54:	e0bfe504 	addi	r2,fp,-108
 2001a58:	11400604 	addi	r5,r2,24
 2001a5c:	e0bf4d04 	addi	r2,fp,-716
 2001a60:	11000e04 	addi	r4,r2,56
 2001a64:	e0bf4d04 	addi	r2,fp,-716
 2001a68:	10c00604 	addi	r3,r2,24
 2001a6c:	008006c4 	movi	r2,27
 2001a70:	d8800115 	stw	r2,4(sp)
 2001a74:	e0bf6104 	addi	r2,fp,-636
 2001a78:	10803604 	addi	r2,r2,216
 2001a7c:	d8800015 	stw	r2,0(sp)
 2001a80:	300f883a 	mov	r7,r6
 2001a84:	280d883a 	mov	r6,r5
 2001a88:	200b883a 	mov	r5,r4
 2001a8c:	1809883a 	mov	r4,r3
 2001a90:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[3],ball[8],velocity[3],velocity[8],collision[28],28);
 2001a94:	e0bfe504 	addi	r2,fp,-108
 2001a98:	11801004 	addi	r6,r2,64
 2001a9c:	e0bfe504 	addi	r2,fp,-108
 2001aa0:	11400604 	addi	r5,r2,24
 2001aa4:	e0bf4d04 	addi	r2,fp,-716
 2001aa8:	11001004 	addi	r4,r2,64
 2001aac:	e0bf4d04 	addi	r2,fp,-716
 2001ab0:	10c00604 	addi	r3,r2,24
 2001ab4:	00800704 	movi	r2,28
 2001ab8:	d8800115 	stw	r2,4(sp)
 2001abc:	e0bf6104 	addi	r2,fp,-636
 2001ac0:	10803804 	addi	r2,r2,224
 2001ac4:	d8800015 	stw	r2,0(sp)
 2001ac8:	300f883a 	mov	r7,r6
 2001acc:	280d883a 	mov	r6,r5
 2001ad0:	200b883a 	mov	r5,r4
 2001ad4:	1809883a 	mov	r4,r3
 2001ad8:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[3],ball[9],velocity[3],velocity[9],collision[29],29);
 2001adc:	e0bfe504 	addi	r2,fp,-108
 2001ae0:	11801204 	addi	r6,r2,72
 2001ae4:	e0bfe504 	addi	r2,fp,-108
 2001ae8:	11400604 	addi	r5,r2,24
 2001aec:	e0bf4d04 	addi	r2,fp,-716
 2001af0:	11001204 	addi	r4,r2,72
 2001af4:	e0bf4d04 	addi	r2,fp,-716
 2001af8:	10c00604 	addi	r3,r2,24
 2001afc:	00800744 	movi	r2,29
 2001b00:	d8800115 	stw	r2,4(sp)
 2001b04:	e0bf6104 	addi	r2,fp,-636
 2001b08:	10803a04 	addi	r2,r2,232
 2001b0c:	d8800015 	stw	r2,0(sp)
 2001b10:	300f883a 	mov	r7,r6
 2001b14:	280d883a 	mov	r6,r5
 2001b18:	200b883a 	mov	r5,r4
 2001b1c:	1809883a 	mov	r4,r3
 2001b20:	2002d8c0 	call	2002d8c <collide_calc>

	   collide_calc(ball[4],ball[5],velocity[4],velocity[5],collision[30],30);
 2001b24:	e0bfe504 	addi	r2,fp,-108
 2001b28:	11800a04 	addi	r6,r2,40
 2001b2c:	e0bfe504 	addi	r2,fp,-108
 2001b30:	11400804 	addi	r5,r2,32
 2001b34:	e0bf4d04 	addi	r2,fp,-716
 2001b38:	11000a04 	addi	r4,r2,40
 2001b3c:	e0bf4d04 	addi	r2,fp,-716
 2001b40:	10c00804 	addi	r3,r2,32
 2001b44:	00800784 	movi	r2,30
 2001b48:	d8800115 	stw	r2,4(sp)
 2001b4c:	e0bf6104 	addi	r2,fp,-636
 2001b50:	10803c04 	addi	r2,r2,240
 2001b54:	d8800015 	stw	r2,0(sp)
 2001b58:	300f883a 	mov	r7,r6
 2001b5c:	280d883a 	mov	r6,r5
 2001b60:	200b883a 	mov	r5,r4
 2001b64:	1809883a 	mov	r4,r3
 2001b68:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[4],ball[6],velocity[4],velocity[6],collision[31],31);
 2001b6c:	e0bfe504 	addi	r2,fp,-108
 2001b70:	11800c04 	addi	r6,r2,48
 2001b74:	e0bfe504 	addi	r2,fp,-108
 2001b78:	11400804 	addi	r5,r2,32
 2001b7c:	e0bf4d04 	addi	r2,fp,-716
 2001b80:	11000c04 	addi	r4,r2,48
 2001b84:	e0bf4d04 	addi	r2,fp,-716
 2001b88:	10c00804 	addi	r3,r2,32
 2001b8c:	008007c4 	movi	r2,31
 2001b90:	d8800115 	stw	r2,4(sp)
 2001b94:	e0bf6104 	addi	r2,fp,-636
 2001b98:	10803e04 	addi	r2,r2,248
 2001b9c:	d8800015 	stw	r2,0(sp)
 2001ba0:	300f883a 	mov	r7,r6
 2001ba4:	280d883a 	mov	r6,r5
 2001ba8:	200b883a 	mov	r5,r4
 2001bac:	1809883a 	mov	r4,r3
 2001bb0:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[4],ball[7],velocity[4],velocity[7],collision[32],32);
 2001bb4:	e0bfe504 	addi	r2,fp,-108
 2001bb8:	11800e04 	addi	r6,r2,56
 2001bbc:	e0bfe504 	addi	r2,fp,-108
 2001bc0:	11400804 	addi	r5,r2,32
 2001bc4:	e0bf4d04 	addi	r2,fp,-716
 2001bc8:	11000e04 	addi	r4,r2,56
 2001bcc:	e0bf4d04 	addi	r2,fp,-716
 2001bd0:	10c00804 	addi	r3,r2,32
 2001bd4:	00800804 	movi	r2,32
 2001bd8:	d8800115 	stw	r2,4(sp)
 2001bdc:	e0bf6104 	addi	r2,fp,-636
 2001be0:	10804004 	addi	r2,r2,256
 2001be4:	d8800015 	stw	r2,0(sp)
 2001be8:	300f883a 	mov	r7,r6
 2001bec:	280d883a 	mov	r6,r5
 2001bf0:	200b883a 	mov	r5,r4
 2001bf4:	1809883a 	mov	r4,r3
 2001bf8:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[4],ball[8],velocity[4],velocity[8],collision[33],33);
 2001bfc:	e0bfe504 	addi	r2,fp,-108
 2001c00:	11801004 	addi	r6,r2,64
 2001c04:	e0bfe504 	addi	r2,fp,-108
 2001c08:	11400804 	addi	r5,r2,32
 2001c0c:	e0bf4d04 	addi	r2,fp,-716
 2001c10:	11001004 	addi	r4,r2,64
 2001c14:	e0bf4d04 	addi	r2,fp,-716
 2001c18:	10c00804 	addi	r3,r2,32
 2001c1c:	00800844 	movi	r2,33
 2001c20:	d8800115 	stw	r2,4(sp)
 2001c24:	e0bf6104 	addi	r2,fp,-636
 2001c28:	10804204 	addi	r2,r2,264
 2001c2c:	d8800015 	stw	r2,0(sp)
 2001c30:	300f883a 	mov	r7,r6
 2001c34:	280d883a 	mov	r6,r5
 2001c38:	200b883a 	mov	r5,r4
 2001c3c:	1809883a 	mov	r4,r3
 2001c40:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[4],ball[9],velocity[4],velocity[9],collision[34],34);
 2001c44:	e0bfe504 	addi	r2,fp,-108
 2001c48:	11801204 	addi	r6,r2,72
 2001c4c:	e0bfe504 	addi	r2,fp,-108
 2001c50:	11400804 	addi	r5,r2,32
 2001c54:	e0bf4d04 	addi	r2,fp,-716
 2001c58:	11001204 	addi	r4,r2,72
 2001c5c:	e0bf4d04 	addi	r2,fp,-716
 2001c60:	10c00804 	addi	r3,r2,32
 2001c64:	00800884 	movi	r2,34
 2001c68:	d8800115 	stw	r2,4(sp)
 2001c6c:	e0bf6104 	addi	r2,fp,-636
 2001c70:	10804404 	addi	r2,r2,272
 2001c74:	d8800015 	stw	r2,0(sp)
 2001c78:	300f883a 	mov	r7,r6
 2001c7c:	280d883a 	mov	r6,r5
 2001c80:	200b883a 	mov	r5,r4
 2001c84:	1809883a 	mov	r4,r3
 2001c88:	2002d8c0 	call	2002d8c <collide_calc>

	   collide_calc(ball[5],ball[6],velocity[5],velocity[6],collision[35],35);
 2001c8c:	e0bfe504 	addi	r2,fp,-108
 2001c90:	11800c04 	addi	r6,r2,48
 2001c94:	e0bfe504 	addi	r2,fp,-108
 2001c98:	11400a04 	addi	r5,r2,40
 2001c9c:	e0bf4d04 	addi	r2,fp,-716
 2001ca0:	11000c04 	addi	r4,r2,48
 2001ca4:	e0bf4d04 	addi	r2,fp,-716
 2001ca8:	10c00a04 	addi	r3,r2,40
 2001cac:	008008c4 	movi	r2,35
 2001cb0:	d8800115 	stw	r2,4(sp)
 2001cb4:	e0bf6104 	addi	r2,fp,-636
 2001cb8:	10804604 	addi	r2,r2,280
 2001cbc:	d8800015 	stw	r2,0(sp)
 2001cc0:	300f883a 	mov	r7,r6
 2001cc4:	280d883a 	mov	r6,r5
 2001cc8:	200b883a 	mov	r5,r4
 2001ccc:	1809883a 	mov	r4,r3
 2001cd0:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[5],ball[7],velocity[5],velocity[7],collision[36],36);
 2001cd4:	e0bfe504 	addi	r2,fp,-108
 2001cd8:	11800e04 	addi	r6,r2,56
 2001cdc:	e0bfe504 	addi	r2,fp,-108
 2001ce0:	11400a04 	addi	r5,r2,40
 2001ce4:	e0bf4d04 	addi	r2,fp,-716
 2001ce8:	11000e04 	addi	r4,r2,56
 2001cec:	e0bf4d04 	addi	r2,fp,-716
 2001cf0:	10c00a04 	addi	r3,r2,40
 2001cf4:	00800904 	movi	r2,36
 2001cf8:	d8800115 	stw	r2,4(sp)
 2001cfc:	e0bf6104 	addi	r2,fp,-636
 2001d00:	10804804 	addi	r2,r2,288
 2001d04:	d8800015 	stw	r2,0(sp)
 2001d08:	300f883a 	mov	r7,r6
 2001d0c:	280d883a 	mov	r6,r5
 2001d10:	200b883a 	mov	r5,r4
 2001d14:	1809883a 	mov	r4,r3
 2001d18:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[5],ball[8],velocity[5],velocity[8],collision[37],37);
 2001d1c:	e0bfe504 	addi	r2,fp,-108
 2001d20:	11801004 	addi	r6,r2,64
 2001d24:	e0bfe504 	addi	r2,fp,-108
 2001d28:	11400a04 	addi	r5,r2,40
 2001d2c:	e0bf4d04 	addi	r2,fp,-716
 2001d30:	11001004 	addi	r4,r2,64
 2001d34:	e0bf4d04 	addi	r2,fp,-716
 2001d38:	10c00a04 	addi	r3,r2,40
 2001d3c:	00800944 	movi	r2,37
 2001d40:	d8800115 	stw	r2,4(sp)
 2001d44:	e0bf6104 	addi	r2,fp,-636
 2001d48:	10804a04 	addi	r2,r2,296
 2001d4c:	d8800015 	stw	r2,0(sp)
 2001d50:	300f883a 	mov	r7,r6
 2001d54:	280d883a 	mov	r6,r5
 2001d58:	200b883a 	mov	r5,r4
 2001d5c:	1809883a 	mov	r4,r3
 2001d60:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[5],ball[9],velocity[5],velocity[9],collision[38],38);
 2001d64:	e0bfe504 	addi	r2,fp,-108
 2001d68:	11801204 	addi	r6,r2,72
 2001d6c:	e0bfe504 	addi	r2,fp,-108
 2001d70:	11400a04 	addi	r5,r2,40
 2001d74:	e0bf4d04 	addi	r2,fp,-716
 2001d78:	11001204 	addi	r4,r2,72
 2001d7c:	e0bf4d04 	addi	r2,fp,-716
 2001d80:	10c00a04 	addi	r3,r2,40
 2001d84:	00800984 	movi	r2,38
 2001d88:	d8800115 	stw	r2,4(sp)
 2001d8c:	e0bf6104 	addi	r2,fp,-636
 2001d90:	10804c04 	addi	r2,r2,304
 2001d94:	d8800015 	stw	r2,0(sp)
 2001d98:	300f883a 	mov	r7,r6
 2001d9c:	280d883a 	mov	r6,r5
 2001da0:	200b883a 	mov	r5,r4
 2001da4:	1809883a 	mov	r4,r3
 2001da8:	2002d8c0 	call	2002d8c <collide_calc>

	   collide_calc(ball[6],ball[7],velocity[6],velocity[7],collision[39],39);
 2001dac:	e0bfe504 	addi	r2,fp,-108
 2001db0:	11800e04 	addi	r6,r2,56
 2001db4:	e0bfe504 	addi	r2,fp,-108
 2001db8:	11400c04 	addi	r5,r2,48
 2001dbc:	e0bf4d04 	addi	r2,fp,-716
 2001dc0:	11000e04 	addi	r4,r2,56
 2001dc4:	e0bf4d04 	addi	r2,fp,-716
 2001dc8:	10c00c04 	addi	r3,r2,48
 2001dcc:	008009c4 	movi	r2,39
 2001dd0:	d8800115 	stw	r2,4(sp)
 2001dd4:	e0bf6104 	addi	r2,fp,-636
 2001dd8:	10804e04 	addi	r2,r2,312
 2001ddc:	d8800015 	stw	r2,0(sp)
 2001de0:	300f883a 	mov	r7,r6
 2001de4:	280d883a 	mov	r6,r5
 2001de8:	200b883a 	mov	r5,r4
 2001dec:	1809883a 	mov	r4,r3
 2001df0:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[6],ball[8],velocity[6],velocity[8],collision[40],40);
 2001df4:	e0bfe504 	addi	r2,fp,-108
 2001df8:	11801004 	addi	r6,r2,64
 2001dfc:	e0bfe504 	addi	r2,fp,-108
 2001e00:	11400c04 	addi	r5,r2,48
 2001e04:	e0bf4d04 	addi	r2,fp,-716
 2001e08:	11001004 	addi	r4,r2,64
 2001e0c:	e0bf4d04 	addi	r2,fp,-716
 2001e10:	10c00c04 	addi	r3,r2,48
 2001e14:	00800a04 	movi	r2,40
 2001e18:	d8800115 	stw	r2,4(sp)
 2001e1c:	e0bf6104 	addi	r2,fp,-636
 2001e20:	10805004 	addi	r2,r2,320
 2001e24:	d8800015 	stw	r2,0(sp)
 2001e28:	300f883a 	mov	r7,r6
 2001e2c:	280d883a 	mov	r6,r5
 2001e30:	200b883a 	mov	r5,r4
 2001e34:	1809883a 	mov	r4,r3
 2001e38:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[6],ball[9],velocity[6],velocity[9],collision[41],41);
 2001e3c:	e0bfe504 	addi	r2,fp,-108
 2001e40:	11801204 	addi	r6,r2,72
 2001e44:	e0bfe504 	addi	r2,fp,-108
 2001e48:	11400c04 	addi	r5,r2,48
 2001e4c:	e0bf4d04 	addi	r2,fp,-716
 2001e50:	11001204 	addi	r4,r2,72
 2001e54:	e0bf4d04 	addi	r2,fp,-716
 2001e58:	10c00c04 	addi	r3,r2,48
 2001e5c:	00800a44 	movi	r2,41
 2001e60:	d8800115 	stw	r2,4(sp)
 2001e64:	e0bf6104 	addi	r2,fp,-636
 2001e68:	10805204 	addi	r2,r2,328
 2001e6c:	d8800015 	stw	r2,0(sp)
 2001e70:	300f883a 	mov	r7,r6
 2001e74:	280d883a 	mov	r6,r5
 2001e78:	200b883a 	mov	r5,r4
 2001e7c:	1809883a 	mov	r4,r3
 2001e80:	2002d8c0 	call	2002d8c <collide_calc>

	   collide_calc(ball[7],ball[8],velocity[7],velocity[8],collision[42],42);
 2001e84:	e0bfe504 	addi	r2,fp,-108
 2001e88:	11801004 	addi	r6,r2,64
 2001e8c:	e0bfe504 	addi	r2,fp,-108
 2001e90:	11400e04 	addi	r5,r2,56
 2001e94:	e0bf4d04 	addi	r2,fp,-716
 2001e98:	11001004 	addi	r4,r2,64
 2001e9c:	e0bf4d04 	addi	r2,fp,-716
 2001ea0:	10c00e04 	addi	r3,r2,56
 2001ea4:	00800a84 	movi	r2,42
 2001ea8:	d8800115 	stw	r2,4(sp)
 2001eac:	e0bf6104 	addi	r2,fp,-636
 2001eb0:	10805404 	addi	r2,r2,336
 2001eb4:	d8800015 	stw	r2,0(sp)
 2001eb8:	300f883a 	mov	r7,r6
 2001ebc:	280d883a 	mov	r6,r5
 2001ec0:	200b883a 	mov	r5,r4
 2001ec4:	1809883a 	mov	r4,r3
 2001ec8:	2002d8c0 	call	2002d8c <collide_calc>
	   collide_calc(ball[7],ball[9],velocity[7],velocity[9],collision[43],43);
 2001ecc:	e0bfe504 	addi	r2,fp,-108
 2001ed0:	11801204 	addi	r6,r2,72
 2001ed4:	e0bfe504 	addi	r2,fp,-108
 2001ed8:	11400e04 	addi	r5,r2,56
 2001edc:	e0bf4d04 	addi	r2,fp,-716
 2001ee0:	11001204 	addi	r4,r2,72
 2001ee4:	e0bf4d04 	addi	r2,fp,-716
 2001ee8:	10c00e04 	addi	r3,r2,56
 2001eec:	00800ac4 	movi	r2,43
 2001ef0:	d8800115 	stw	r2,4(sp)
 2001ef4:	e0bf6104 	addi	r2,fp,-636
 2001ef8:	10805604 	addi	r2,r2,344
 2001efc:	d8800015 	stw	r2,0(sp)
 2001f00:	300f883a 	mov	r7,r6
 2001f04:	280d883a 	mov	r6,r5
 2001f08:	200b883a 	mov	r5,r4
 2001f0c:	1809883a 	mov	r4,r3
 2001f10:	2002d8c0 	call	2002d8c <collide_calc>

	   collide_calc(ball[8],ball[9],velocity[7],velocity[9],collision[44],44);
 2001f14:	e0bfe504 	addi	r2,fp,-108
 2001f18:	11801204 	addi	r6,r2,72
 2001f1c:	e0bfe504 	addi	r2,fp,-108
 2001f20:	11400e04 	addi	r5,r2,56
 2001f24:	e0bf4d04 	addi	r2,fp,-716
 2001f28:	11001204 	addi	r4,r2,72
 2001f2c:	e0bf4d04 	addi	r2,fp,-716
 2001f30:	10c01004 	addi	r3,r2,64
 2001f34:	00800b04 	movi	r2,44
 2001f38:	d8800115 	stw	r2,4(sp)
 2001f3c:	e0bf6104 	addi	r2,fp,-636
 2001f40:	10805804 	addi	r2,r2,352
 2001f44:	d8800015 	stw	r2,0(sp)
 2001f48:	300f883a 	mov	r7,r6
 2001f4c:	280d883a 	mov	r6,r5
 2001f50:	200b883a 	mov	r5,r4
 2001f54:	1809883a 	mov	r4,r3
 2001f58:	2002d8c0 	call	2002d8c <collide_calc>


	   // Damping factor

  	   damping(velocity[0]);
 2001f5c:	e0bfe504 	addi	r2,fp,-108
 2001f60:	1009883a 	mov	r4,r2
 2001f64:	20031800 	call	2003180 <damping>
  	   damping(velocity[1]);
 2001f68:	e0bfe504 	addi	r2,fp,-108
 2001f6c:	10800204 	addi	r2,r2,8
 2001f70:	1009883a 	mov	r4,r2
 2001f74:	20031800 	call	2003180 <damping>
  	   damping(velocity[2]);
 2001f78:	e0bfe504 	addi	r2,fp,-108
 2001f7c:	10800404 	addi	r2,r2,16
 2001f80:	1009883a 	mov	r4,r2
 2001f84:	20031800 	call	2003180 <damping>
  	   damping(velocity[3]);
 2001f88:	e0bfe504 	addi	r2,fp,-108
 2001f8c:	10800604 	addi	r2,r2,24
 2001f90:	1009883a 	mov	r4,r2
 2001f94:	20031800 	call	2003180 <damping>
  	   damping(velocity[4]);
 2001f98:	e0bfe504 	addi	r2,fp,-108
 2001f9c:	10800804 	addi	r2,r2,32
 2001fa0:	1009883a 	mov	r4,r2
 2001fa4:	20031800 	call	2003180 <damping>
  	   damping(velocity[5]);
 2001fa8:	e0bfe504 	addi	r2,fp,-108
 2001fac:	10800a04 	addi	r2,r2,40
 2001fb0:	1009883a 	mov	r4,r2
 2001fb4:	20031800 	call	2003180 <damping>
  	   damping(velocity[6]);
 2001fb8:	e0bfe504 	addi	r2,fp,-108
 2001fbc:	10800c04 	addi	r2,r2,48
 2001fc0:	1009883a 	mov	r4,r2
 2001fc4:	20031800 	call	2003180 <damping>
  	   damping(velocity[7]);
 2001fc8:	e0bfe504 	addi	r2,fp,-108
 2001fcc:	10800e04 	addi	r2,r2,56
 2001fd0:	1009883a 	mov	r4,r2
 2001fd4:	20031800 	call	2003180 <damping>
  	   damping(velocity[8]);
 2001fd8:	e0bfe504 	addi	r2,fp,-108
 2001fdc:	10801004 	addi	r2,r2,64
 2001fe0:	1009883a 	mov	r4,r2
 2001fe4:	20031800 	call	2003180 <damping>
  	   damping(velocity[9]);
 2001fe8:	e0bfe504 	addi	r2,fp,-108
 2001fec:	10801204 	addi	r2,r2,72
 2001ff0:	1009883a 	mov	r4,r2
 2001ff4:	20031800 	call	2003180 <damping>

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 2001ff8:	e0bfe504 	addi	r2,fp,-108
 2001ffc:	1009883a 	mov	r4,r2
 2002000:	2002c680 	call	2002c68 <momentum>
 2002004:	1021883a 	mov	r16,r2
 2002008:	e0bfe504 	addi	r2,fp,-108
 200200c:	10800204 	addi	r2,r2,8
 2002010:	1009883a 	mov	r4,r2
 2002014:	2002c680 	call	2002c68 <momentum>
 2002018:	1007883a 	mov	r3,r2
 200201c:	80e1ff72 	custom	253,r16,r16,r3
 2002020:	e0bfe504 	addi	r2,fp,-108
 2002024:	10800404 	addi	r2,r2,16
 2002028:	1009883a 	mov	r4,r2
 200202c:	2002c680 	call	2002c68 <momentum>
 2002030:	1007883a 	mov	r3,r2
 2002034:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
 2002038:	e0bfe504 	addi	r2,fp,-108
 200203c:	10800604 	addi	r2,r2,24
 2002040:	1009883a 	mov	r4,r2
 2002044:	2002c680 	call	2002c68 <momentum>
 2002048:	1007883a 	mov	r3,r2
 200204c:	80e1ff72 	custom	253,r16,r16,r3
 2002050:	e0bfe504 	addi	r2,fp,-108
 2002054:	10800804 	addi	r2,r2,32
 2002058:	1009883a 	mov	r4,r2
 200205c:	2002c680 	call	2002c68 <momentum>
 2002060:	1007883a 	mov	r3,r2
 2002064:	80e1ff72 	custom	253,r16,r16,r3
 2002068:	e0bfe504 	addi	r2,fp,-108
 200206c:	10800a04 	addi	r2,r2,40
 2002070:	1009883a 	mov	r4,r2
 2002074:	2002c680 	call	2002c68 <momentum>
 2002078:	1007883a 	mov	r3,r2
 200207c:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
 2002080:	e0bfe504 	addi	r2,fp,-108
 2002084:	10800c04 	addi	r2,r2,48
 2002088:	1009883a 	mov	r4,r2
 200208c:	2002c680 	call	2002c68 <momentum>
 2002090:	1007883a 	mov	r3,r2
 2002094:	80e1ff72 	custom	253,r16,r16,r3
 2002098:	e0bfe504 	addi	r2,fp,-108
 200209c:	10800e04 	addi	r2,r2,56
 20020a0:	1009883a 	mov	r4,r2
 20020a4:	2002c680 	call	2002c68 <momentum>
 20020a8:	1007883a 	mov	r3,r2
 20020ac:	80e1ff72 	custom	253,r16,r16,r3
 20020b0:	e0bfe504 	addi	r2,fp,-108
 20020b4:	10801004 	addi	r2,r2,64
 20020b8:	1009883a 	mov	r4,r2
 20020bc:	2002c680 	call	2002c68 <momentum>
 20020c0:	1007883a 	mov	r3,r2
 20020c4:	80e1ff72 	custom	253,r16,r16,r3
    		+momentum(velocity[9]);
 20020c8:	e0bfe504 	addi	r2,fp,-108
 20020cc:	10801204 	addi	r2,r2,72
 20020d0:	1009883a 	mov	r4,r2
 20020d4:	2002c680 	call	2002c68 <momentum>
 20020d8:	1007883a 	mov	r3,r2
  	   damping(velocity[6]);
  	   damping(velocity[7]);
  	   damping(velocity[8]);
  	   damping(velocity[9]);

       speed=momentum(velocity[0])+momentum(velocity[1])+momentum(velocity[2])
 20020dc:	80c5ff72 	custom	253,r2,r16,r3
 20020e0:	e0bf4315 	stw	r2,-756(fp)
    		+momentum(velocity[3])+momentum(velocity[4])+momentum(velocity[5])
    		+momentum(velocity[6])+momentum(velocity[7])+momentum(velocity[8])
    		+momentum(velocity[9]);


       IOWR(display,1,((int)  (ball[0][1]) << 10) + (int) (ball[0][0]));
 20020e4:	e0bf4417 	ldw	r2,-752(fp)
 20020e8:	10800104 	addi	r2,r2,4
 20020ec:	e0ff4e17 	ldw	r3,-712(fp)
 20020f0:	1807fe72 	custom	249,r3,r3,zero
 20020f4:	180892ba 	slli	r4,r3,10
 20020f8:	e0ff4d17 	ldw	r3,-716(fp)
 20020fc:	1807fe72 	custom	249,r3,r3,zero
 2002100:	20c7883a 	add	r3,r4,r3
 2002104:	10c00035 	stwio	r3,0(r2)
       IOWR(display,2,((int)  (ball[1][1]) << 10) + (int) (ball[1][0]));
 2002108:	e0bf4417 	ldw	r2,-752(fp)
 200210c:	10800204 	addi	r2,r2,8
 2002110:	e0ff5017 	ldw	r3,-704(fp)
 2002114:	1807fe72 	custom	249,r3,r3,zero
 2002118:	180892ba 	slli	r4,r3,10
 200211c:	e0ff4f17 	ldw	r3,-708(fp)
 2002120:	1807fe72 	custom	249,r3,r3,zero
 2002124:	20c7883a 	add	r3,r4,r3
 2002128:	10c00035 	stwio	r3,0(r2)
       IOWR(display,3,((int)  (ball[2][1]) << 10) + (int) (ball[2][0]));
 200212c:	e0bf4417 	ldw	r2,-752(fp)
 2002130:	10800304 	addi	r2,r2,12
 2002134:	e0ff5217 	ldw	r3,-696(fp)
 2002138:	1807fe72 	custom	249,r3,r3,zero
 200213c:	180892ba 	slli	r4,r3,10
 2002140:	e0ff5117 	ldw	r3,-700(fp)
 2002144:	1807fe72 	custom	249,r3,r3,zero
 2002148:	20c7883a 	add	r3,r4,r3
 200214c:	10c00035 	stwio	r3,0(r2)
       IOWR(display,4,((int)  (ball[3][1]) << 10) + (int) (ball[3][0]));
 2002150:	e0bf4417 	ldw	r2,-752(fp)
 2002154:	10800404 	addi	r2,r2,16
 2002158:	e0ff5417 	ldw	r3,-688(fp)
 200215c:	1807fe72 	custom	249,r3,r3,zero
 2002160:	180892ba 	slli	r4,r3,10
 2002164:	e0ff5317 	ldw	r3,-692(fp)
 2002168:	1807fe72 	custom	249,r3,r3,zero
 200216c:	20c7883a 	add	r3,r4,r3
 2002170:	10c00035 	stwio	r3,0(r2)
       IOWR(display,5,((int)  (ball[4][1]) << 10) + (int) (ball[4][0]));
 2002174:	e0bf4417 	ldw	r2,-752(fp)
 2002178:	10800504 	addi	r2,r2,20
 200217c:	e0ff5617 	ldw	r3,-680(fp)
 2002180:	1807fe72 	custom	249,r3,r3,zero
 2002184:	180892ba 	slli	r4,r3,10
 2002188:	e0ff5517 	ldw	r3,-684(fp)
 200218c:	1807fe72 	custom	249,r3,r3,zero
 2002190:	20c7883a 	add	r3,r4,r3
 2002194:	10c00035 	stwio	r3,0(r2)
       IOWR(display,6,((int)  (ball[5][1]) << 10) + (int) (ball[5][0]));
 2002198:	e0bf4417 	ldw	r2,-752(fp)
 200219c:	10800604 	addi	r2,r2,24
 20021a0:	e0ff5817 	ldw	r3,-672(fp)
 20021a4:	1807fe72 	custom	249,r3,r3,zero
 20021a8:	180892ba 	slli	r4,r3,10
 20021ac:	e0ff5717 	ldw	r3,-676(fp)
 20021b0:	1807fe72 	custom	249,r3,r3,zero
 20021b4:	20c7883a 	add	r3,r4,r3
 20021b8:	10c00035 	stwio	r3,0(r2)
       IOWR(display,7,((int)  (ball[6][1]) << 10) + (int) (ball[6][0]));
 20021bc:	e0bf4417 	ldw	r2,-752(fp)
 20021c0:	10800704 	addi	r2,r2,28
 20021c4:	e0ff5a17 	ldw	r3,-664(fp)
 20021c8:	1807fe72 	custom	249,r3,r3,zero
 20021cc:	180892ba 	slli	r4,r3,10
 20021d0:	e0ff5917 	ldw	r3,-668(fp)
 20021d4:	1807fe72 	custom	249,r3,r3,zero
 20021d8:	20c7883a 	add	r3,r4,r3
 20021dc:	10c00035 	stwio	r3,0(r2)
       IOWR(display,8,((int)  (ball[7][1]) << 10) + (int) (ball[7][0]));
 20021e0:	e0bf4417 	ldw	r2,-752(fp)
 20021e4:	10800804 	addi	r2,r2,32
 20021e8:	e0ff5c17 	ldw	r3,-656(fp)
 20021ec:	1807fe72 	custom	249,r3,r3,zero
 20021f0:	180892ba 	slli	r4,r3,10
 20021f4:	e0ff5b17 	ldw	r3,-660(fp)
 20021f8:	1807fe72 	custom	249,r3,r3,zero
 20021fc:	20c7883a 	add	r3,r4,r3
 2002200:	10c00035 	stwio	r3,0(r2)
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
 2002204:	e0bf4417 	ldw	r2,-752(fp)
 2002208:	10800904 	addi	r2,r2,36
 200220c:	e0ff5e17 	ldw	r3,-648(fp)
 2002210:	1807fe72 	custom	249,r3,r3,zero
 2002214:	180892ba 	slli	r4,r3,10
 2002218:	e0ff5d17 	ldw	r3,-652(fp)
 200221c:	1807fe72 	custom	249,r3,r3,zero
 2002220:	20c7883a 	add	r3,r4,r3
 2002224:	10c00035 	stwio	r3,0(r2)
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
 2002228:	e0bf4417 	ldw	r2,-752(fp)
 200222c:	10800a04 	addi	r2,r2,40
 2002230:	e0ff6017 	ldw	r3,-640(fp)
 2002234:	1807fe72 	custom	249,r3,r3,zero
 2002238:	180892ba 	slli	r4,r3,10
 200223c:	e0ff5f17 	ldw	r3,-644(fp)
 2002240:	1807fe72 	custom	249,r3,r3,zero
 2002244:	20c7883a 	add	r3,r4,r3
 2002248:	10c00035 	stwio	r3,0(r2)
       OSTimeDlyHMSM(0, 0, 0, 4);
 200224c:	01c00104 	movi	r7,4
 2002250:	000d883a 	mov	r6,zero
 2002254:	000b883a 	mov	r5,zero
 2002258:	0009883a 	mov	r4,zero
 200225c:	201bc540 	call	201bc54 <OSTimeDlyHMSM>

   DEBUG_PRINT("[Task 2] Launch animation : (%d, %d) - initial speed : %f - initial velocity : (%f, %f)\n",*vector_x, *vector_y, speed, velocity[0][0], velocity[0][1]);

   int border_collision [10][4] = {{0, 0, 0, 0},{0, 0, 0, 0},{0,0,0,0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};

   while(speed >= 0.1)
 2002260:	e13f4317 	ldw	r4,-756(fp)
 2002264:	20045f40 	call	20045f4 <__extendsfdf2>
 2002268:	1011883a 	mov	r8,r2
 200226c:	1813883a 	mov	r9,r3
 2002270:	01a666b4 	movhi	r6,39322
 2002274:	31a66684 	addi	r6,r6,-26214
 2002278:	01cfeeb4 	movhi	r7,16314
 200227c:	39e66644 	addi	r7,r7,-26215
 2002280:	4009883a 	mov	r4,r8
 2002284:	480b883a 	mov	r5,r9
 2002288:	2003d0c0 	call	2003d0c <__gedf2>
 200228c:	1039810e 	bge	r2,zero,2000894 <task2+0x3f4>
       IOWR(display,9,((int)  (ball[8][1]) << 10) + (int) (ball[8][0]));
       IOWR(display,10,((int) (ball[9][1]) << 10) + (int) (ball[9][0]));
       OSTimeDlyHMSM(0, 0, 0, 4);

   }
   OSTimeDlyHMSM(0, 0, 0, 500);
 2002290:	01c07d04 	movi	r7,500
 2002294:	000d883a 	mov	r6,zero
 2002298:	000b883a 	mov	r5,zero
 200229c:	0009883a 	mov	r4,zero
 20022a0:	201bc540 	call	201bc54 <OSTimeDlyHMSM>

   DEBUG_PRINT("[Task 2] Animation termine\n");
 20022a4:	010080b4 	movhi	r4,514
 20022a8:	2139dc04 	addi	r4,r4,-6288
 20022ac:	2004ff40 	call	2004ff4 <puts>

   OSTimeDlyHMSM(0, 0, 0, 100);
 20022b0:	01c01904 	movi	r7,100
 20022b4:	000d883a 	mov	r6,zero
 20022b8:	000b883a 	mov	r5,zero
 20022bc:	0009883a 	mov	r4,zero
 20022c0:	201bc540 	call	201bc54 <OSTimeDlyHMSM>

   opt_task2= OS_FLAG_CLR;
 20022c4:	e03f4505 	stb	zero,-748(fp)
   OSFlagPost(AnimationFlagGrp,ANIMATION,opt_task2,&err);
 20022c8:	d0a71b17 	ldw	r2,-25492(gp)
 20022cc:	e0ff4503 	ldbu	r3,-748(fp)
 20022d0:	e13f4c04 	addi	r4,fp,-720
 20022d4:	200f883a 	mov	r7,r4
 20022d8:	180d883a 	mov	r6,r3
 20022dc:	01400044 	movi	r5,1
 20022e0:	1009883a 	mov	r4,r2
 20022e4:	2016e340 	call	2016e34 <OSFlagPost>

   OSMboxPost(MailBox6, nbr_ball);
 20022e8:	d0a71917 	ldw	r2,-25500(gp)
 20022ec:	e17f4817 	ldw	r5,-736(fp)
 20022f0:	1009883a 	mov	r4,r2
 20022f4:	2017db00 	call	2017db0 <OSMboxPost>
   //OSMboxPost(MailBox7, &score);

  }
 20022f8:	0038df06 	br	2000678 <task2+0x1d8>

020022fc <task3>:
}

void task3(void* pdata)
{
 20022fc:	deffee04 	addi	sp,sp,-72
 2002300:	dfc01115 	stw	ra,68(sp)
 2002304:	df001015 	stw	fp,64(sp)
 2002308:	df001004 	addi	fp,sp,64
 200230c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U opt_task1;

	int activePlayer;
	//int * nbr_ball;
	int score [2] = {0,0};
 2002310:	e03ffc15 	stw	zero,-16(fp)
 2002314:	e03ffd15 	stw	zero,-12(fp)
	int * XdirRec = (int*) MEM_NIOS_PI_BASE+11;
	int * YdirRec = (int*) MEM_NIOS_PI_BASE+12;
	*/
	//intermediate variable//

	IOWR(MEM_NIOS_PI_BASE,0,0);
 2002318:	0007883a 	mov	r3,zero
 200231c:	00800834 	movhi	r2,32
 2002320:	10c00035 	stwio	r3,0(r2)
	IOWR(MEM_NIOS_PI_BASE,1,0);
 2002324:	0007883a 	mov	r3,zero
 2002328:	00800834 	movhi	r2,32
 200232c:	10800104 	addi	r2,r2,4
 2002330:	10c00035 	stwio	r3,0(r2)
	IOWR(MEM_NIOS_PI_BASE,2,0);
 2002334:	0007883a 	mov	r3,zero
 2002338:	00800834 	movhi	r2,32
 200233c:	10800204 	addi	r2,r2,8
 2002340:	10c00035 	stwio	r3,0(r2)

	IOWR(MEM_NIOS_PI_BASE,3,0);
 2002344:	0007883a 	mov	r3,zero
 2002348:	00800834 	movhi	r2,32
 200234c:	10800304 	addi	r2,r2,12
 2002350:	10c00035 	stwio	r3,0(r2)

	IOWR(MEM_NIOS_PI_BASE,8,0);
 2002354:	0007883a 	mov	r3,zero
 2002358:	00800834 	movhi	r2,32
 200235c:	10800804 	addi	r2,r2,32
 2002360:	10c00035 	stwio	r3,0(r2)

	int ready,first_player,game_finish,ready_send;
	int all_rdy;

	ready=0;
 2002364:	e03ff215 	stw	zero,-56(fp)
	first_player=0;
 2002368:	e03ff315 	stw	zero,-52(fp)
	all_rdy=0;
 200236c:	e03ff515 	stw	zero,-44(fp)
	game_finish=0;
 2002370:	e03ff615 	stw	zero,-40(fp)
	ready_send=0;
 2002374:	e03ff415 	stw	zero,-48(fp)
	int number_of_ball = 10;
 2002378:	00800284 	movi	r2,10
 200237c:	e0bffe15 	stw	r2,-8(fp)

	while (1)
	{
		    OSFlagPost(ActivateTask4Grp,ACTIVATE_TASK4,OS_FLAG_SET,&err);
 2002380:	d0a71d17 	ldw	r2,-25484(gp)
 2002384:	e0fffb84 	addi	r3,fp,-18
 2002388:	180f883a 	mov	r7,r3
 200238c:	01800044 	movi	r6,1
 2002390:	01400044 	movi	r5,1
 2002394:	1009883a 	mov	r4,r2
 2002398:	2016e340 	call	2016e34 <OSFlagPost>
            DEBUG_PRINT("[Task 3] Wait for first player\n");
 200239c:	010080b4 	movhi	r4,514
 20023a0:	2139f704 	addi	r4,r4,-6180
 20023a4:	2004ff40 	call	2004ff4 <puts>
			while (!ready){
 20023a8:	00002506 	br	2002440 <task3+0x144>
				int var = IORD(MEM_NIOS_PI_BASE,1);
 20023ac:	00800834 	movhi	r2,32
 20023b0:	10800104 	addi	r2,r2,4
 20023b4:	10800037 	ldwio	r2,0(r2)
 20023b8:	e0bffa15 	stw	r2,-24(fp)
				if(var != 0){
 20023bc:	e0bffa17 	ldw	r2,-24(fp)
 20023c0:	10000526 	beq	r2,zero,20023d8 <task3+0xdc>
					ready = 1;
 20023c4:	00800044 	movi	r2,1
 20023c8:	e0bff215 	stw	r2,-56(fp)
					first_player = var;
 20023cc:	e0bffa17 	ldw	r2,-24(fp)
 20023d0:	e0bff315 	stw	r2,-52(fp)
 20023d4:	00001506 	br	200242c <task3+0x130>
				}
				else{
					OS_FLAGS flag = OSFlagAccept(StartGameGrp,START_THE_GAME,OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, &err);
 20023d8:	d0a72417 	ldw	r2,-25456(gp)
 20023dc:	e0fffb84 	addi	r3,fp,-18
 20023e0:	180f883a 	mov	r7,r3
 20023e4:	01802084 	movi	r6,130
 20023e8:	01400044 	movi	r5,1
 20023ec:	1009883a 	mov	r4,r2
 20023f0:	2015f500 	call	2015f50 <OSFlagAccept>
 20023f4:	e0bffb0d 	sth	r2,-20(fp)
					if (flag==START_THE_GAME && !ready_send){
 20023f8:	e0bffb0b 	ldhu	r2,-20(fp)
 20023fc:	10800058 	cmpnei	r2,r2,1
 2002400:	10000a1e 	bne	r2,zero,200242c <task3+0x130>
 2002404:	e0bff417 	ldw	r2,-48(fp)
 2002408:	1000081e 	bne	r2,zero,200242c <task3+0x130>
                        DEBUG_PRINT("[Task 3] Player touch the screen\n");
 200240c:	010080b4 	movhi	r4,514
 2002410:	2139ff04 	addi	r4,r4,-6148
 2002414:	2004ff40 	call	2004ff4 <puts>
						ready_send = 1;
 2002418:	00800044 	movi	r2,1
 200241c:	e0bff415 	stw	r2,-48(fp)
						IOWR(MEM_NIOS_PI_BASE,0,ID1);
 2002420:	00c00044 	movi	r3,1
 2002424:	00800834 	movhi	r2,32
 2002428:	10c00035 	stwio	r3,0(r2)
					}
				}
				OSTimeDlyHMSM(0, 0, 0, 100);
 200242c:	01c01904 	movi	r7,100
 2002430:	000d883a 	mov	r6,zero
 2002434:	000b883a 	mov	r5,zero
 2002438:	0009883a 	mov	r4,zero
 200243c:	201bc540 	call	201bc54 <OSTimeDlyHMSM>

	while (1)
	{
		    OSFlagPost(ActivateTask4Grp,ACTIVATE_TASK4,OS_FLAG_SET,&err);
            DEBUG_PRINT("[Task 3] Wait for first player\n");
			while (!ready){
 2002440:	e0bff217 	ldw	r2,-56(fp)
 2002444:	103fd926 	beq	r2,zero,20023ac <task3+0xb0>
					}
				}
				OSTimeDlyHMSM(0, 0, 0, 100);
			}

			DEBUG_PRINT("[Task 3] Wait for all player are ready \n");
 2002448:	010080b4 	movhi	r4,514
 200244c:	213a0804 	addi	r4,r4,-6112
 2002450:	2004ff40 	call	2004ff4 <puts>
			while(!all_rdy){
 2002454:	00000606 	br	2002470 <task3+0x174>
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
 2002458:	00800834 	movhi	r2,32
 200245c:	10800204 	addi	r2,r2,8
 2002460:	10800037 	ldwio	r2,0(r2)
 2002464:	10000226 	beq	r2,zero,2002470 <task3+0x174>
 2002468:	00800044 	movi	r2,1
 200246c:	e0bff515 	stw	r2,-44(fp)
				}
				OSTimeDlyHMSM(0, 0, 0, 100);
			}

			DEBUG_PRINT("[Task 3] Wait for all player are ready \n");
			while(!all_rdy){
 2002470:	e0bff517 	ldw	r2,-44(fp)
 2002474:	103ff826 	beq	r2,zero,2002458 <task3+0x15c>
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
			}
			activePlayer = first_player;
 2002478:	e0bff317 	ldw	r2,-52(fp)
 200247c:	e0bff115 	stw	r2,-60(fp)
			game_finish = 0;
 2002480:	e03ff615 	stw	zero,-40(fp)
			DEBUG_PRINT("[Task 3] the game can start\n");
 2002484:	010080b4 	movhi	r4,514
 2002488:	213a1204 	addi	r4,r4,-6072
 200248c:	2004ff40 	call	2004ff4 <puts>
			while(!game_finish){
 2002490:	00009906 	br	20026f8 <task3+0x3fc>
				if(activePlayer==ID1 && !IORD(MEM_NIOS_PI_BASE,8)){
 2002494:	e0bff117 	ldw	r2,-60(fp)
 2002498:	10800058 	cmpnei	r2,r2,1
 200249c:	10005b1e 	bne	r2,zero,200260c <task3+0x310>
 20024a0:	00800834 	movhi	r2,32
 20024a4:	10800804 	addi	r2,r2,32
 20024a8:	10800037 	ldwio	r2,0(r2)
 20024ac:	1000571e 	bne	r2,zero,200260c <task3+0x310>
						OSFlagPost(isActiveFlagGrp, IS_ACTIVE, OS_FLAG_SET, &err);
 20024b0:	d0a72317 	ldw	r2,-25460(gp)
 20024b4:	e0fffb84 	addi	r3,fp,-18
 20024b8:	180f883a 	mov	r7,r3
 20024bc:	01800044 	movi	r6,1
 20024c0:	01400044 	movi	r5,1
 20024c4:	1009883a 	mov	r4,r2
 20024c8:	2016e340 	call	2016e34 <OSFlagPost>
						DEBUG_PRINT("[Task 3] Wait for value from task 1\n");
 20024cc:	010080b4 	movhi	r4,514
 20024d0:	213a1904 	addi	r4,r4,-6044
 20024d4:	2004ff40 	call	2004ff4 <puts>
						int *vector_x = (int *) OSMboxPend(MailBox1,0,&err);
 20024d8:	d0a72217 	ldw	r2,-25464(gp)
 20024dc:	e0fffb84 	addi	r3,fp,-18
 20024e0:	180d883a 	mov	r6,r3
 20024e4:	000b883a 	mov	r5,zero
 20024e8:	1009883a 	mov	r4,r2
 20024ec:	2017a100 	call	2017a10 <OSMboxPend>
 20024f0:	e0bff715 	stw	r2,-36(fp)
						int *vector_y = (int *) OSMboxPend(MailBox2,0,&err);
 20024f4:	d0a71e17 	ldw	r2,-25480(gp)
 20024f8:	e0fffb84 	addi	r3,fp,-18
 20024fc:	180d883a 	mov	r6,r3
 2002500:	000b883a 	mov	r5,zero
 2002504:	1009883a 	mov	r4,r2
 2002508:	2017a100 	call	2017a10 <OSMboxPend>
 200250c:	e0bff815 	stw	r2,-32(fp)
						DEBUG_PRINT("[Task 3] Get value from task 1 : (%d, %d)\n",*vector_x, *vector_y);
 2002510:	e0bff717 	ldw	r2,-36(fp)
 2002514:	10c00017 	ldw	r3,0(r2)
 2002518:	e0bff817 	ldw	r2,-32(fp)
 200251c:	10800017 	ldw	r2,0(r2)
 2002520:	100d883a 	mov	r6,r2
 2002524:	180b883a 	mov	r5,r3
 2002528:	010080b4 	movhi	r4,514
 200252c:	213a2204 	addi	r4,r4,-6008
 2002530:	2004e740 	call	2004e74 <printf>

						OSMboxPost(MailBox4, vector_x);
 2002534:	d0a72017 	ldw	r2,-25472(gp)
 2002538:	e17ff717 	ldw	r5,-36(fp)
 200253c:	1009883a 	mov	r4,r2
 2002540:	2017db00 	call	2017db0 <OSMboxPost>
						OSMboxPost(MailBox5, vector_y);
 2002544:	d0a71c17 	ldw	r2,-25488(gp)
 2002548:	e17ff817 	ldw	r5,-32(fp)
 200254c:	1009883a 	mov	r4,r2
 2002550:	2017db00 	call	2017db0 <OSMboxPost>

						OSMboxPost(MailBox8, &number_of_ball);                 //transmit nbr ball to task 2
 2002554:	d0a71f17 	ldw	r2,-25476(gp)
 2002558:	e0fffe04 	addi	r3,fp,-8
 200255c:	180b883a 	mov	r5,r3
 2002560:	1009883a 	mov	r4,r2
 2002564:	2017db00 	call	2017db0 <OSMboxPost>
						//OSMboxPost(MailBox9, IORD(MEM_NIOS_PI_BASE,10));                //transmit score to task2

						DEBUG_PRINT("[Task 3] Send value to the SPI\n");
 2002568:	010080b4 	movhi	r4,514
 200256c:	213a2d04 	addi	r4,r4,-5964
 2002570:	2004ff40 	call	2004ff4 <puts>
						IOWR(MEM_NIOS_PI_BASE,4,number_of_ball);
 2002574:	e0fffe17 	ldw	r3,-8(fp)
 2002578:	00800834 	movhi	r2,32
 200257c:	10800404 	addi	r2,r2,16
 2002580:	10c00035 	stwio	r3,0(r2)
						//IOWR(MEM_NIOS_PI_BASE,5,*score);
						IOWR(MEM_NIOS_PI_BASE,6,*vector_x);
 2002584:	e0bff717 	ldw	r2,-36(fp)
 2002588:	10c00017 	ldw	r3,0(r2)
 200258c:	00800834 	movhi	r2,32
 2002590:	10800604 	addi	r2,r2,24
 2002594:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,7,*vector_y);
 2002598:	e0bff817 	ldw	r2,-32(fp)
 200259c:	10c00017 	ldw	r3,0(r2)
 20025a0:	00800834 	movhi	r2,32
 20025a4:	10800704 	addi	r2,r2,28
 20025a8:	10c00035 	stwio	r3,0(r2)
						IOWR(MEM_NIOS_PI_BASE,3,1);             						//*isSend = 1; // value are available
 20025ac:	00c00044 	movi	r3,1
 20025b0:	00800834 	movhi	r2,32
 20025b4:	10800304 	addi	r2,r2,12
 20025b8:	10c00035 	stwio	r3,0(r2)

						opt_task1=OS_FLAG_CLR;
 20025bc:	e03ff905 	stb	zero,-28(fp)
						OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 20025c0:	d0a72317 	ldw	r2,-25460(gp)
 20025c4:	e0fff903 	ldbu	r3,-28(fp)
 20025c8:	e13ffb84 	addi	r4,fp,-18
 20025cc:	200f883a 	mov	r7,r4
 20025d0:	180d883a 	mov	r6,r3
 20025d4:	01400044 	movi	r5,1
 20025d8:	1009883a 	mov	r4,r2
 20025dc:	2016e340 	call	2016e34 <OSFlagPost>
						OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 20025e0:	d0e71b17 	ldw	r3,-25492(gp)
 20025e4:	e0bffb84 	addi	r2,fp,-18
 20025e8:	d8800015 	stw	r2,0(sp)
 20025ec:	000f883a 	mov	r7,zero
 20025f0:	000d883a 	mov	r6,zero
 20025f4:	01400044 	movi	r5,1
 20025f8:	1809883a 	mov	r4,r3
 20025fc:	201681c0 	call	201681c <OSFlagPend>

						//*nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
						//*score = (int *) OSMboxPend(MailBox7,0,&err);

						activePlayer = ID2;
 2002600:	00800084 	movi	r2,2
 2002604:	e0bff115 	stw	r2,-60(fp)
			}
			activePlayer = first_player;
			game_finish = 0;
			DEBUG_PRINT("[Task 3] the game can start\n");
			while(!game_finish){
				if(activePlayer==ID1 && !IORD(MEM_NIOS_PI_BASE,8)){
 2002608:	00003b06 	br	20026f8 <task3+0x3fc>
						//*score = (int *) OSMboxPend(MailBox7,0,&err);

						activePlayer = ID2;

				}
				else if(activePlayer == ID2 && IORD(MEM_NIOS_PI_BASE,8)){
 200260c:	e0bff117 	ldw	r2,-60(fp)
 2002610:	10800098 	cmpnei	r2,r2,2
 2002614:	1000381e 	bne	r2,zero,20026f8 <task3+0x3fc>
 2002618:	00800834 	movhi	r2,32
 200261c:	10800804 	addi	r2,r2,32
 2002620:	10800037 	ldwio	r2,0(r2)
 2002624:	10003426 	beq	r2,zero,20026f8 <task3+0x3fc>

						OSMboxPost(MailBox4, IORD(MEM_NIOS_PI_BASE,11));
 2002628:	d0e72017 	ldw	r3,-25472(gp)
 200262c:	00800834 	movhi	r2,32
 2002630:	10800b04 	addi	r2,r2,44
 2002634:	10800037 	ldwio	r2,0(r2)
 2002638:	100b883a 	mov	r5,r2
 200263c:	1809883a 	mov	r4,r3
 2002640:	2017db00 	call	2017db0 <OSMboxPost>
						OSMboxPost(MailBox5, IORD(MEM_NIOS_PI_BASE,12));
 2002644:	d0e71c17 	ldw	r3,-25488(gp)
 2002648:	00800834 	movhi	r2,32
 200264c:	10800c04 	addi	r2,r2,48
 2002650:	10800037 	ldwio	r2,0(r2)
 2002654:	100b883a 	mov	r5,r2
 2002658:	1809883a 	mov	r4,r3
 200265c:	2017db00 	call	2017db0 <OSMboxPost>
						OSMboxPost(MailBox8, IORD(MEM_NIOS_PI_BASE,9));
 2002660:	d0e71f17 	ldw	r3,-25476(gp)
 2002664:	00800834 	movhi	r2,32
 2002668:	10800904 	addi	r2,r2,36
 200266c:	10800037 	ldwio	r2,0(r2)
 2002670:	100b883a 	mov	r5,r2
 2002674:	1809883a 	mov	r4,r3
 2002678:	2017db00 	call	2017db0 <OSMboxPost>
						OSMboxPost(MailBox9, IORD(MEM_NIOS_PI_BASE,10));
 200267c:	d0e71817 	ldw	r3,-25504(gp)
 2002680:	00800834 	movhi	r2,32
 2002684:	10800a04 	addi	r2,r2,40
 2002688:	10800037 	ldwio	r2,0(r2)
 200268c:	100b883a 	mov	r5,r2
 2002690:	1809883a 	mov	r4,r3
 2002694:	2017db00 	call	2017db0 <OSMboxPost>

						OSFlagPend(AnimationFlagGrp, ANIMATION, OS_FLAG_WAIT_CLR_ALL, 0, &err);
 2002698:	d0e71b17 	ldw	r3,-25492(gp)
 200269c:	e0bffb84 	addi	r2,fp,-18
 20026a0:	d8800015 	stw	r2,0(sp)
 20026a4:	000f883a 	mov	r7,zero
 20026a8:	000d883a 	mov	r6,zero
 20026ac:	01400044 	movi	r5,1
 20026b0:	1809883a 	mov	r4,r3
 20026b4:	201681c0 	call	201681c <OSFlagPend>
						opt_task1=OS_FLAG_SET;
 20026b8:	00800044 	movi	r2,1
 20026bc:	e0bff905 	stb	r2,-28(fp)
						OSFlagPost(isActiveFlagGrp,IS_ACTIVE,opt_task1,&err);
 20026c0:	d0a72317 	ldw	r2,-25460(gp)
 20026c4:	e0fff903 	ldbu	r3,-28(fp)
 20026c8:	e13ffb84 	addi	r4,fp,-18
 20026cc:	200f883a 	mov	r7,r4
 20026d0:	180d883a 	mov	r6,r3
 20026d4:	01400044 	movi	r5,1
 20026d8:	1009883a 	mov	r4,r2
 20026dc:	2016e340 	call	2016e34 <OSFlagPost>

						IOWR(MEM_NIOS_PI_BASE,8,0);
 20026e0:	0007883a 	mov	r3,zero
 20026e4:	00800834 	movhi	r2,32
 20026e8:	10800804 	addi	r2,r2,32
 20026ec:	10c00035 	stwio	r3,0(r2)
						activePlayer = ID1;
 20026f0:	00800044 	movi	r2,1
 20026f4:	e0bff115 	stw	r2,-60(fp)
				if (IORD(MEM_NIOS_PI_BASE,2)) all_rdy = 1;
			}
			activePlayer = first_player;
			game_finish = 0;
			DEBUG_PRINT("[Task 3] the game can start\n");
			while(!game_finish){
 20026f8:	e0bff617 	ldw	r2,-40(fp)
 20026fc:	103f6526 	beq	r2,zero,2002494 <task3+0x198>
						//*nbr_ball = (int *) OSMboxPend(MailBox6,0,&err);
						//*score = (int *) OSMboxPend(MailBox7,0,&err);
				}
			}

	}
 2002700:	003f1f06 	br	2002380 <task3+0x84>

02002704 <task4>:

}

void task4(void* pdata)
{
 2002704:	defff704 	addi	sp,sp,-36
 2002708:	dfc00815 	stw	ra,32(sp)
 200270c:	df000715 	stw	fp,28(sp)
 2002710:	df000704 	addi	fp,sp,28
 2002714:	e13fff15 	stw	r4,-4(fp)

	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 2002718:	008000b4 	movhi	r2,2
 200271c:	e0bffc15 	stw	r2,-16(fp)

	int count = 0;
 2002720:	e03ffa15 	stw	zero,-24(fp)
	int count_old = 0;
 2002724:	e03ffd15 	stw	zero,-12(fp)

    int gesture_detected = 0;
 2002728:	e03ffb15 	stw	zero,-20(fp)

	INT8U err;
	//INT8U opt_task4;

	while(1){
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
 200272c:	d0e71d17 	ldw	r3,-25484(gp)
 2002730:	e0bffe04 	addi	r2,fp,-8
 2002734:	d8800015 	stw	r2,0(sp)
 2002738:	000f883a 	mov	r7,zero
 200273c:	01802084 	movi	r6,130
 2002740:	01400044 	movi	r5,1
 2002744:	1809883a 	mov	r4,r3
 2002748:	201681c0 	call	201681c <OSFlagPend>
        while(!gesture_detected){
 200274c:	00001006 	br	2002790 <task4+0x8c>
        count_old = count;
 2002750:	e0bffa17 	ldw	r2,-24(fp)
 2002754:	e0bffd15 	stw	r2,-12(fp)
        count = IORD(MTL_controller,10); // récupère le nombre de doigts présent sur l'écran
 2002758:	e0bffc17 	ldw	r2,-16(fp)
 200275c:	10800a04 	addi	r2,r2,40
 2002760:	10800037 	ldwio	r2,0(r2)
 2002764:	e0bffa15 	stw	r2,-24(fp)
		    if (count == 1 && count_old == 0){
 2002768:	e0bffa17 	ldw	r2,-24(fp)
 200276c:	10800058 	cmpnei	r2,r2,1
 2002770:	1000071e 	bne	r2,zero,2002790 <task4+0x8c>
 2002774:	e0bffd17 	ldw	r2,-12(fp)
 2002778:	1000051e 	bne	r2,zero,2002790 <task4+0x8c>
                DEBUG_PRINT("[Task 4] Player touch the screen\n");
 200277c:	010080b4 	movhi	r4,514
 2002780:	213a3504 	addi	r4,r4,-5932
 2002784:	2004ff40 	call	2004ff4 <puts>
    			gesture_detected = 1;
 2002788:	00800044 	movi	r2,1
 200278c:	e0bffb15 	stw	r2,-20(fp)
	INT8U err;
	//INT8U opt_task4;

	while(1){
		OSFlagPend(ActivateTask4Grp, ACTIVATE_TASK4, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0,&err); // wait for a flag and consume it
        while(!gesture_detected){
 2002790:	e0bffb17 	ldw	r2,-20(fp)
 2002794:	103fee26 	beq	r2,zero,2002750 <task4+0x4c>
		    if (count == 1 && count_old == 0){
                DEBUG_PRINT("[Task 4] Player touch the screen\n");
    			gesture_detected = 1;
            }
		}
        gesture_detected = 0;
 2002798:	e03ffb15 	stw	zero,-20(fp)
        OSFlagPost(StartGameGrp,START_THE_GAME,OS_FLAG_SET,&err);
 200279c:	d0a72417 	ldw	r2,-25456(gp)
 20027a0:	e0fffe04 	addi	r3,fp,-8
 20027a4:	180f883a 	mov	r7,r3
 20027a8:	01800044 	movi	r6,1
 20027ac:	01400044 	movi	r5,1
 20027b0:	1009883a 	mov	r4,r2
 20027b4:	2016e340 	call	2016e34 <OSFlagPost>
        OSTimeDlyHMSM(0, 0, 0, 500);
 20027b8:	01c07d04 	movi	r7,500
 20027bc:	000d883a 	mov	r6,zero
 20027c0:	000b883a 	mov	r5,zero
 20027c4:	0009883a 	mov	r4,zero
 20027c8:	201bc540 	call	201bc54 <OSTimeDlyHMSM>
	}
 20027cc:	003fd706 	br	200272c <task4+0x28>

020027d0 <main>:
}


/* The main function creates two task and starts multi-tasking */
int main(void)
{
 20027d0:	defff804 	addi	sp,sp,-32
 20027d4:	dfc00715 	stw	ra,28(sp)
 20027d8:	df000615 	stw	fp,24(sp)
 20027dc:	df000604 	addi	fp,sp,24
	INT8U err;

  MailBox1 = OSMboxCreate(NULL);
 20027e0:	0009883a 	mov	r4,zero
 20027e4:	20176fc0 	call	20176fc <OSMboxCreate>
 20027e8:	d0a72215 	stw	r2,-25464(gp)
  MailBox2 = OSMboxCreate(NULL);
 20027ec:	0009883a 	mov	r4,zero
 20027f0:	20176fc0 	call	20176fc <OSMboxCreate>
 20027f4:	d0a71e15 	stw	r2,-25480(gp)
  MailBox3 = OSMboxCreate(NULL);
 20027f8:	0009883a 	mov	r4,zero
 20027fc:	20176fc0 	call	20176fc <OSMboxCreate>
 2002800:	d0a71a15 	stw	r2,-25496(gp)

  MailBox4 = OSMboxCreate(NULL);
 2002804:	0009883a 	mov	r4,zero
 2002808:	20176fc0 	call	20176fc <OSMboxCreate>
 200280c:	d0a72015 	stw	r2,-25472(gp)
  MailBox5 = OSMboxCreate(NULL);
 2002810:	0009883a 	mov	r4,zero
 2002814:	20176fc0 	call	20176fc <OSMboxCreate>
 2002818:	d0a71c15 	stw	r2,-25488(gp)
  MailBox6 = OSMboxCreate(NULL);
 200281c:	0009883a 	mov	r4,zero
 2002820:	20176fc0 	call	20176fc <OSMboxCreate>
 2002824:	d0a71915 	stw	r2,-25500(gp)


  MailBox7 = OSMboxCreate(NULL);
 2002828:	0009883a 	mov	r4,zero
 200282c:	20176fc0 	call	20176fc <OSMboxCreate>
 2002830:	d0a72115 	stw	r2,-25468(gp)
  MailBox8 = OSMboxCreate(NULL);
 2002834:	0009883a 	mov	r4,zero
 2002838:	20176fc0 	call	20176fc <OSMboxCreate>
 200283c:	d0a71f15 	stw	r2,-25476(gp)

  isActiveFlagGrp = OSFlagCreate(0, &err);
 2002840:	e17fff04 	addi	r5,fp,-4
 2002844:	0009883a 	mov	r4,zero
 2002848:	20162580 	call	2016258 <OSFlagCreate>
 200284c:	d0a72315 	stw	r2,-25460(gp)
  AnimationFlagGrp = OSFlagCreate(0, &err);
 2002850:	e17fff04 	addi	r5,fp,-4
 2002854:	0009883a 	mov	r4,zero
 2002858:	20162580 	call	2016258 <OSFlagCreate>
 200285c:	d0a71b15 	stw	r2,-25492(gp)
  ActivateTask4Grp = OSFlagCreate(0,&err);
 2002860:	e17fff04 	addi	r5,fp,-4
 2002864:	0009883a 	mov	r4,zero
 2002868:	20162580 	call	2016258 <OSFlagCreate>
 200286c:	d0a71d15 	stw	r2,-25484(gp)
  StartGameGrp = OSFlagCreate(0,&err);
 2002870:	e17fff04 	addi	r5,fp,-4
 2002874:	0009883a 	mov	r4,zero
 2002878:	20162580 	call	2016258 <OSFlagCreate>
 200287c:	d0a72415 	stw	r2,-25456(gp)


  OSTaskCreateExt(task1,
 2002880:	d8000415 	stw	zero,16(sp)
 2002884:	d8000315 	stw	zero,12(sp)
 2002888:	00820004 	movi	r2,2048
 200288c:	d8800215 	stw	r2,8(sp)
 2002890:	008080b4 	movhi	r2,514
 2002894:	10897604 	addi	r2,r2,9688
 2002898:	d8800115 	stw	r2,4(sp)
 200289c:	00800044 	movi	r2,1
 20028a0:	d8800015 	stw	r2,0(sp)
 20028a4:	01c00044 	movi	r7,1
 20028a8:	018080b4 	movhi	r6,514
 20028ac:	31917504 	addi	r6,r6,17876
 20028b0:	000b883a 	mov	r5,zero
 20028b4:	01008034 	movhi	r4,512
 20028b8:	2100a404 	addi	r4,r4,656
 20028bc:	201aa800 	call	201aa80 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(task2,
 20028c0:	d8000415 	stw	zero,16(sp)
 20028c4:	d8000315 	stw	zero,12(sp)
 20028c8:	00820004 	movi	r2,2048
 20028cc:	d8800215 	stw	r2,8(sp)
 20028d0:	008080b4 	movhi	r2,514
 20028d4:	10997604 	addi	r2,r2,26072
 20028d8:	d8800115 	stw	r2,4(sp)
 20028dc:	00800084 	movi	r2,2
 20028e0:	d8800015 	stw	r2,0(sp)
 20028e4:	01c00084 	movi	r7,2
 20028e8:	018080f4 	movhi	r6,515
 20028ec:	31a17504 	addi	r6,r6,-31276
 20028f0:	000b883a 	mov	r5,zero
 20028f4:	01008034 	movhi	r4,512
 20028f8:	21012804 	addi	r4,r4,1184
 20028fc:	201aa800 	call	201aa80 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSTaskCreateExt(task3,
 2002900:	d8000415 	stw	zero,16(sp)
 2002904:	d8000315 	stw	zero,12(sp)
 2002908:	00820004 	movi	r2,2048
 200290c:	d8800215 	stw	r2,8(sp)
 2002910:	008080f4 	movhi	r2,515
 2002914:	10a17604 	addi	r2,r2,-31272
 2002918:	d8800115 	stw	r2,4(sp)
 200291c:	008000c4 	movi	r2,3
 2002920:	d8800015 	stw	r2,0(sp)
 2002924:	01c000c4 	movi	r7,3
 2002928:	018080f4 	movhi	r6,515
 200292c:	31a97504 	addi	r6,r6,-23084
 2002930:	000b883a 	mov	r5,zero
 2002934:	01008034 	movhi	r4,512
 2002938:	2108bf04 	addi	r4,r4,8956
 200293c:	201aa800 	call	201aa80 <OSTaskCreateExt>
                   TASK3_PRIORITY,
                   task3_stk,
                   TASK_STACKSIZE,
                   NULL,
                   0);
  OSTaskCreateExt(task4,
 2002940:	d8000415 	stw	zero,16(sp)
 2002944:	d8000315 	stw	zero,12(sp)
 2002948:	00820004 	movi	r2,2048
 200294c:	d8800215 	stw	r2,8(sp)
 2002950:	008080b4 	movhi	r2,514
 2002954:	10917604 	addi	r2,r2,17880
 2002958:	d8800115 	stw	r2,4(sp)
 200295c:	00800104 	movi	r2,4
 2002960:	d8800015 	stw	r2,0(sp)
 2002964:	01c00104 	movi	r7,4
 2002968:	018080b4 	movhi	r6,514
 200296c:	31997504 	addi	r6,r6,26068
 2002970:	000b883a 	mov	r5,zero
 2002974:	01008034 	movhi	r4,512
 2002978:	2109c104 	addi	r4,r4,9988
 200297c:	201aa800 	call	201aa80 <OSTaskCreateExt>
                     TASK_STACKSIZE,
                     NULL,
                     0);


  OSStart();
 2002980:	20149200 	call	2014920 <OSStart>
  return 0;
 2002984:	0005883a 	mov	r2,zero
}
 2002988:	e037883a 	mov	sp,fp
 200298c:	dfc00117 	ldw	ra,4(sp)
 2002990:	df000017 	ldw	fp,0(sp)
 2002994:	dec00204 	addi	sp,sp,8
 2002998:	f800283a 	ret

0200299c <whole_collide>:
#include "physics.h"
#include <stdio.h>

int whole_list [6][2]={{86,63},{446,63},{806,63},{86,463},{446,463},{806,463}};

int whole_collide(float ball [2], float velocity [2]){
 200299c:	defff604 	addi	sp,sp,-40
 20029a0:	dfc00915 	stw	ra,36(sp)
 20029a4:	df000815 	stw	fp,32(sp)
 20029a8:	df000804 	addi	fp,sp,32
 20029ac:	e13ffe15 	stw	r4,-8(fp)
 20029b0:	e17fff15 	stw	r5,-4(fp)
	float x = ball[0]+velocity[0];
 20029b4:	e0bffe17 	ldw	r2,-8(fp)
 20029b8:	10c00017 	ldw	r3,0(r2)
 20029bc:	e13fff17 	ldw	r4,-4(fp)
 20029c0:	20800017 	ldw	r2,0(r4)
 20029c4:	1885ff72 	custom	253,r2,r3,r2
 20029c8:	e0bffa15 	stw	r2,-24(fp)
	float y = ball[1]+velocity[1];
 20029cc:	e0bffe17 	ldw	r2,-8(fp)
 20029d0:	10800104 	addi	r2,r2,4
 20029d4:	10c00017 	ldw	r3,0(r2)
 20029d8:	e0bfff17 	ldw	r2,-4(fp)
 20029dc:	11000104 	addi	r4,r2,4
 20029e0:	20800017 	ldw	r2,0(r4)
 20029e4:	1885ff72 	custom	253,r2,r3,r2
 20029e8:	e0bffb15 	stw	r2,-20(fp)

	int collision = 0;
 20029ec:	e03ff815 	stw	zero,-32(fp)
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 20029f0:	e03ff915 	stw	zero,-28(fp)
 20029f4:	00003d06 	br	2002aec <whole_collide+0x150>
		float dx = whole_list[cnt][0]-x;
 20029f8:	008080b4 	movhi	r2,514
 20029fc:	10bb6204 	addi	r2,r2,-4728
 2002a00:	e0fff917 	ldw	r3,-28(fp)
 2002a04:	180690fa 	slli	r3,r3,3
 2002a08:	10c5883a 	add	r2,r2,r3
 2002a0c:	10800017 	ldw	r2,0(r2)
 2002a10:	1007feb2 	custom	250,r3,r2,zero
 2002a14:	e0bffa17 	ldw	r2,-24(fp)
 2002a18:	1885ffb2 	custom	254,r2,r3,r2
 2002a1c:	e0bffc15 	stw	r2,-16(fp)
		float dy = whole_list[cnt][1]-y;
 2002a20:	008080b4 	movhi	r2,514
 2002a24:	10bb6204 	addi	r2,r2,-4728
 2002a28:	e0fff917 	ldw	r3,-28(fp)
 2002a2c:	180690fa 	slli	r3,r3,3
 2002a30:	10c5883a 	add	r2,r2,r3
 2002a34:	10800104 	addi	r2,r2,4
 2002a38:	10800017 	ldw	r2,0(r2)
 2002a3c:	1007feb2 	custom	250,r3,r2,zero
 2002a40:	e0bffb17 	ldw	r2,-20(fp)
 2002a44:	1885ffb2 	custom	254,r2,r3,r2
 2002a48:	e0bffd15 	stw	r2,-12(fp)

		collision = collision || (dx*dx+dy*dy <= ((SIZE+WHOLE_SIZE)*(SIZE+WHOLE_SIZE)*0.85));
 2002a4c:	e0bff817 	ldw	r2,-32(fp)
 2002a50:	1000131e 	bne	r2,zero,2002aa0 <whole_collide+0x104>
 2002a54:	e0fffc17 	ldw	r3,-16(fp)
 2002a58:	e0bffc17 	ldw	r2,-16(fp)
 2002a5c:	1887ff32 	custom	252,r3,r3,r2
 2002a60:	e13ffd17 	ldw	r4,-12(fp)
 2002a64:	e0bffd17 	ldw	r2,-12(fp)
 2002a68:	2085ff32 	custom	252,r2,r4,r2
 2002a6c:	1885ff72 	custom	253,r2,r3,r2
 2002a70:	1009883a 	mov	r4,r2
 2002a74:	20045f40 	call	20045f4 <__extendsfdf2>
 2002a78:	1011883a 	mov	r8,r2
 2002a7c:	1813883a 	mov	r9,r3
 2002a80:	01b33374 	movhi	r6,52429
 2002a84:	31b33344 	addi	r6,r6,-13107
 2002a88:	01d021b4 	movhi	r7,16518
 2002a8c:	39d5b304 	addi	r7,r7,22220
 2002a90:	4009883a 	mov	r4,r8
 2002a94:	480b883a 	mov	r5,r9
 2002a98:	2003de80 	call	2003de8 <__ledf2>
 2002a9c:	00800216 	blt	zero,r2,2002aa8 <whole_collide+0x10c>
 2002aa0:	00800044 	movi	r2,1
 2002aa4:	00000106 	br	2002aac <whole_collide+0x110>
 2002aa8:	0005883a 	mov	r2,zero
 2002aac:	e0bff815 	stw	r2,-32(fp)

		if (collision){
 2002ab0:	e0bff817 	ldw	r2,-32(fp)
 2002ab4:	10000a26 	beq	r2,zero,2002ae0 <whole_collide+0x144>
			ball[0]=0;
 2002ab8:	e0bffe17 	ldw	r2,-8(fp)
 2002abc:	10000015 	stw	zero,0(r2)
			ball[1]=0;
 2002ac0:	e0bffe17 	ldw	r2,-8(fp)
 2002ac4:	10800104 	addi	r2,r2,4
 2002ac8:	10000015 	stw	zero,0(r2)
			velocity[0]=0;
 2002acc:	e0bfff17 	ldw	r2,-4(fp)
 2002ad0:	10000015 	stw	zero,0(r2)
			velocity[1]=0;
 2002ad4:	e0bfff17 	ldw	r2,-4(fp)
 2002ad8:	10800104 	addi	r2,r2,4
 2002adc:	10000015 	stw	zero,0(r2)
	float y = ball[1]+velocity[1];

	int collision = 0;
	int cnt;

	for (cnt=0;cnt<6;cnt++){
 2002ae0:	e0bff917 	ldw	r2,-28(fp)
 2002ae4:	10800044 	addi	r2,r2,1
 2002ae8:	e0bff915 	stw	r2,-28(fp)
 2002aec:	e0bff917 	ldw	r2,-28(fp)
 2002af0:	10800190 	cmplti	r2,r2,6
 2002af4:	103fc01e 	bne	r2,zero,20029f8 <whole_collide+0x5c>
			ball[1]=0;
			velocity[0]=0;
			velocity[1]=0;
		}
	}
	return collision;
 2002af8:	e0bff817 	ldw	r2,-32(fp)
}
 2002afc:	e037883a 	mov	sp,fp
 2002b00:	dfc00117 	ldw	ra,4(sp)
 2002b04:	df000017 	ldw	fp,0(sp)
 2002b08:	dec00204 	addi	sp,sp,8
 2002b0c:	f800283a 	ret

02002b10 <borderCollide>:


void borderCollide(float* ball, int* border_collision, float* velocity)
{
 2002b10:	defffa04 	addi	sp,sp,-24
 2002b14:	df000515 	stw	fp,20(sp)
 2002b18:	df000504 	addi	fp,sp,20
 2002b1c:	e13ffd15 	stw	r4,-12(fp)
 2002b20:	e17ffe15 	stw	r5,-8(fp)
 2002b24:	e1bfff15 	stw	r6,-4(fp)
	int collide_x = 0;
 2002b28:	e03ffb15 	stw	zero,-20(fp)
	int collide_y = 0;
 2002b2c:	e03ffc15 	stw	zero,-16(fp)
	collide_x = (ball[0] < BORDER_X + BORDER + SIZE || ball[0] > (MAX_X + BORDER_X)-(BORDER + SIZE));
 2002b30:	e0bffd17 	ldw	r2,-12(fp)
 2002b34:	10c00017 	ldw	r3,0(r2)
 2002b38:	0090b1b4 	movhi	r2,17094
 2002b3c:	1885f9f2 	custom	231,r2,r3,r2
 2002b40:	1000061e 	bne	r2,zero,2002b5c <borderCollide+0x4c>
 2002b44:	e0bffd17 	ldw	r2,-12(fp)
 2002b48:	10c00017 	ldw	r3,0(r2)
 2002b4c:	009111b4 	movhi	r2,17478
 2002b50:	10900004 	addi	r2,r2,16384
 2002b54:	1885f972 	custom	229,r2,r3,r2
 2002b58:	10000226 	beq	r2,zero,2002b64 <borderCollide+0x54>
 2002b5c:	00800044 	movi	r2,1
 2002b60:	00000106 	br	2002b68 <borderCollide+0x58>
 2002b64:	0005883a 	mov	r2,zero
 2002b68:	e0bffb15 	stw	r2,-20(fp)
	collide_y = (ball[1] < BORDER_Y + BORDER + SIZE || ball[1] > (MAX_Y + BORDER_Y)-(BORDER + SIZE));
 2002b6c:	e0bffd17 	ldw	r2,-12(fp)
 2002b70:	10800104 	addi	r2,r2,4
 2002b74:	10c00017 	ldw	r3,0(r2)
 2002b78:	0090a634 	movhi	r2,17048
 2002b7c:	1885f9f2 	custom	231,r2,r3,r2
 2002b80:	1000061e 	bne	r2,zero,2002b9c <borderCollide+0x8c>
 2002b84:	e0bffd17 	ldw	r2,-12(fp)
 2002b88:	10800104 	addi	r2,r2,4
 2002b8c:	10c00017 	ldw	r3,0(r2)
 2002b90:	0090f874 	movhi	r2,17377
 2002b94:	1885f972 	custom	229,r2,r3,r2
 2002b98:	10000226 	beq	r2,zero,2002ba4 <borderCollide+0x94>
 2002b9c:	00800044 	movi	r2,1
 2002ba0:	00000106 	br	2002ba8 <borderCollide+0x98>
 2002ba4:	0005883a 	mov	r2,zero
 2002ba8:	e0bffc15 	stw	r2,-16(fp)
	if(!border_collision[0] && collide_x)
 2002bac:	e0bffe17 	ldw	r2,-8(fp)
 2002bb0:	10800017 	ldw	r2,0(r2)
 2002bb4:	1000081e 	bne	r2,zero,2002bd8 <borderCollide+0xc8>
 2002bb8:	e0bffb17 	ldw	r2,-20(fp)
 2002bbc:	10000626 	beq	r2,zero,2002bd8 <borderCollide+0xc8>
	{
		velocity[0] = 0 - velocity[0];
 2002bc0:	e0ffff17 	ldw	r3,-4(fp)
 2002bc4:	18800017 	ldw	r2,0(r3)
 2002bc8:	0007883a 	mov	r3,zero
 2002bcc:	1887ffb2 	custom	254,r3,r3,r2
 2002bd0:	e0bfff17 	ldw	r2,-4(fp)
 2002bd4:	10c00015 	stw	r3,0(r2)
	}
	if(!border_collision[2] && collide_y)
 2002bd8:	e0bffe17 	ldw	r2,-8(fp)
 2002bdc:	10800204 	addi	r2,r2,8
 2002be0:	10800017 	ldw	r2,0(r2)
 2002be4:	10000a1e 	bne	r2,zero,2002c10 <borderCollide+0x100>
 2002be8:	e0bffc17 	ldw	r2,-16(fp)
 2002bec:	10000826 	beq	r2,zero,2002c10 <borderCollide+0x100>
	{
		velocity[1] = 0 - velocity[1];
 2002bf0:	e0bfff17 	ldw	r2,-4(fp)
 2002bf4:	10800104 	addi	r2,r2,4
 2002bf8:	e0ffff17 	ldw	r3,-4(fp)
 2002bfc:	19000104 	addi	r4,r3,4
 2002c00:	20c00017 	ldw	r3,0(r4)
 2002c04:	0009883a 	mov	r4,zero
 2002c08:	20c7ffb2 	custom	254,r3,r4,r3
 2002c0c:	10c00015 	stw	r3,0(r2)
	}

	border_collision[0] = border_collision[1];
 2002c10:	e0bffe17 	ldw	r2,-8(fp)
 2002c14:	10c00117 	ldw	r3,4(r2)
 2002c18:	e0bffe17 	ldw	r2,-8(fp)
 2002c1c:	10c00015 	stw	r3,0(r2)
	border_collision[1] = collide_x;
 2002c20:	e0bffe17 	ldw	r2,-8(fp)
 2002c24:	10800104 	addi	r2,r2,4
 2002c28:	e0fffb17 	ldw	r3,-20(fp)
 2002c2c:	10c00015 	stw	r3,0(r2)
	border_collision[2] = border_collision[3];
 2002c30:	e0bffe17 	ldw	r2,-8(fp)
 2002c34:	10800204 	addi	r2,r2,8
 2002c38:	e0fffe17 	ldw	r3,-8(fp)
 2002c3c:	18c00317 	ldw	r3,12(r3)
 2002c40:	10c00015 	stw	r3,0(r2)
	border_collision[3] = collide_y;
 2002c44:	e0bffe17 	ldw	r2,-8(fp)
 2002c48:	10800304 	addi	r2,r2,12
 2002c4c:	e0fffc17 	ldw	r3,-16(fp)
 2002c50:	10c00015 	stw	r3,0(r2)
}
 2002c54:	0001883a 	nop
 2002c58:	e037883a 	mov	sp,fp
 2002c5c:	df000017 	ldw	fp,0(sp)
 2002c60:	dec00104 	addi	sp,sp,4
 2002c64:	f800283a 	ret

02002c68 <momentum>:

float momentum (float* velocity){
 2002c68:	defffd04 	addi	sp,sp,-12
 2002c6c:	df000215 	stw	fp,8(sp)
 2002c70:	df000204 	addi	fp,sp,8
 2002c74:	e13fff15 	stw	r4,-4(fp)
	float result=velocity[0]*velocity[0]+velocity[1]*velocity[1];
 2002c78:	e0bfff17 	ldw	r2,-4(fp)
 2002c7c:	10c00017 	ldw	r3,0(r2)
 2002c80:	e13fff17 	ldw	r4,-4(fp)
 2002c84:	20800017 	ldw	r2,0(r4)
 2002c88:	1887ff32 	custom	252,r3,r3,r2
 2002c8c:	e0bfff17 	ldw	r2,-4(fp)
 2002c90:	10800104 	addi	r2,r2,4
 2002c94:	11000017 	ldw	r4,0(r2)
 2002c98:	e0bfff17 	ldw	r2,-4(fp)
 2002c9c:	11400104 	addi	r5,r2,4
 2002ca0:	28800017 	ldw	r2,0(r5)
 2002ca4:	2085ff32 	custom	252,r2,r4,r2
 2002ca8:	1885ff72 	custom	253,r2,r3,r2
 2002cac:	e0bffe15 	stw	r2,-8(fp)
	return result;
 2002cb0:	e0bffe17 	ldw	r2,-8(fp)
 2002cb4:	1007883a 	mov	r3,r2
}
 2002cb8:	1805883a 	mov	r2,r3
 2002cbc:	e037883a 	mov	sp,fp
 2002cc0:	df000017 	ldw	fp,0(sp)
 2002cc4:	dec00104 	addi	sp,sp,4
 2002cc8:	f800283a 	ret

02002ccc <detect_collide>:

void detect_collide(float* ball1, float* ball2, int* collision){
 2002ccc:	defff604 	addi	sp,sp,-40
 2002cd0:	df000915 	stw	fp,36(sp)
 2002cd4:	df000904 	addi	fp,sp,36
 2002cd8:	e13ffd15 	stw	r4,-12(fp)
 2002cdc:	e17ffe15 	stw	r5,-8(fp)
 2002ce0:	e1bfff15 	stw	r6,-4(fp)
	collision[0]=collision[1];
 2002ce4:	e0bfff17 	ldw	r2,-4(fp)
 2002ce8:	10c00117 	ldw	r3,4(r2)
 2002cec:	e0bfff17 	ldw	r2,-4(fp)
 2002cf0:	10c00015 	stw	r3,0(r2)

	float x1,y1,x2,y2,dx,dy;
	x1=ball1[0];
 2002cf4:	e0bffd17 	ldw	r2,-12(fp)
 2002cf8:	10800017 	ldw	r2,0(r2)
 2002cfc:	e0bff715 	stw	r2,-36(fp)
	x2=ball2[0];
 2002d00:	e0bffe17 	ldw	r2,-8(fp)
 2002d04:	10800017 	ldw	r2,0(r2)
 2002d08:	e0bff815 	stw	r2,-32(fp)

	y1=ball1[1];
 2002d0c:	e0bffd17 	ldw	r2,-12(fp)
 2002d10:	10800117 	ldw	r2,4(r2)
 2002d14:	e0bff915 	stw	r2,-28(fp)
	y2=ball2[1];
 2002d18:	e0bffe17 	ldw	r2,-8(fp)
 2002d1c:	10800117 	ldw	r2,4(r2)
 2002d20:	e0bffa15 	stw	r2,-24(fp)

	dx=x2-x1;
 2002d24:	e0fff817 	ldw	r3,-32(fp)
 2002d28:	e0bff717 	ldw	r2,-36(fp)
 2002d2c:	1885ffb2 	custom	254,r2,r3,r2
 2002d30:	e0bffb15 	stw	r2,-20(fp)
	dy=y2-y1;
 2002d34:	e0fffa17 	ldw	r3,-24(fp)
 2002d38:	e0bff917 	ldw	r2,-28(fp)
 2002d3c:	1885ffb2 	custom	254,r2,r3,r2
 2002d40:	e0bffc15 	stw	r2,-16(fp)
	collision[1]=dx*dx + dy*dy <= 4*SIZE*SIZE;
 2002d44:	e0bfff17 	ldw	r2,-4(fp)
 2002d48:	10800104 	addi	r2,r2,4
 2002d4c:	e13ffb17 	ldw	r4,-20(fp)
 2002d50:	e0fffb17 	ldw	r3,-20(fp)
 2002d54:	20c9ff32 	custom	252,r4,r4,r3
 2002d58:	e17ffc17 	ldw	r5,-16(fp)
 2002d5c:	e0fffc17 	ldw	r3,-16(fp)
 2002d60:	28c7ff32 	custom	252,r3,r5,r3
 2002d64:	20c9ff72 	custom	253,r4,r4,r3
 2002d68:	00d10a74 	movhi	r3,17449
 2002d6c:	20c7f9b2 	custom	230,r3,r4,r3
 2002d70:	18c03fcc 	andi	r3,r3,255
 2002d74:	10c00015 	stw	r3,0(r2)
}
 2002d78:	0001883a 	nop
 2002d7c:	e037883a 	mov	sp,fp
 2002d80:	df000017 	ldw	fp,0(sp)
 2002d84:	dec00104 	addi	sp,sp,4
 2002d88:	f800283a 	ret

02002d8c <collide_calc>:


void collide_calc(float* ball1, float* ball2,float* velocity1, float* velocity2, int* collision,int id){
 2002d8c:	deffeb04 	addi	sp,sp,-84
 2002d90:	dfc01415 	stw	ra,80(sp)
 2002d94:	df001315 	stw	fp,76(sp)
 2002d98:	dc401215 	stw	r17,72(sp)
 2002d9c:	dc001115 	stw	r16,68(sp)
 2002da0:	df001304 	addi	fp,sp,76
 2002da4:	e13ffa15 	stw	r4,-24(fp)
 2002da8:	e17ffb15 	stw	r5,-20(fp)
 2002dac:	e1bffc15 	stw	r6,-16(fp)
 2002db0:	e1fffd15 	stw	r7,-12(fp)
	if ((!collision[0] && collision[1]) || (collision[0] && collision[1] && ball1[0]!=0 && ball1[1] && ball2[0] && ball2[1])){
 2002db4:	e0800217 	ldw	r2,8(fp)
 2002db8:	10800017 	ldw	r2,0(r2)
 2002dbc:	1000041e 	bne	r2,zero,2002dd0 <collide_calc+0x44>
 2002dc0:	e0800217 	ldw	r2,8(fp)
 2002dc4:	10800104 	addi	r2,r2,4
 2002dc8:	10800017 	ldw	r2,0(r2)
 2002dcc:	10001d1e 	bne	r2,zero,2002e44 <collide_calc+0xb8>
 2002dd0:	e0800217 	ldw	r2,8(fp)
 2002dd4:	10800017 	ldw	r2,0(r2)
 2002dd8:	1000c626 	beq	r2,zero,20030f4 <collide_calc+0x368>
 2002ddc:	e0800217 	ldw	r2,8(fp)
 2002de0:	10800104 	addi	r2,r2,4
 2002de4:	10800017 	ldw	r2,0(r2)
 2002de8:	1000c226 	beq	r2,zero,20030f4 <collide_calc+0x368>
 2002dec:	e0fffa17 	ldw	r3,-24(fp)
 2002df0:	18800017 	ldw	r2,0(r3)
 2002df4:	0007883a 	mov	r3,zero
 2002df8:	10c5f8f2 	custom	227,r2,r2,r3
 2002dfc:	1000bd1e 	bne	r2,zero,20030f4 <collide_calc+0x368>
 2002e00:	e0bffa17 	ldw	r2,-24(fp)
 2002e04:	10c00104 	addi	r3,r2,4
 2002e08:	18800017 	ldw	r2,0(r3)
 2002e0c:	0007883a 	mov	r3,zero
 2002e10:	10c5f8f2 	custom	227,r2,r2,r3
 2002e14:	1000b71e 	bne	r2,zero,20030f4 <collide_calc+0x368>
 2002e18:	e0fffb17 	ldw	r3,-20(fp)
 2002e1c:	18800017 	ldw	r2,0(r3)
 2002e20:	0007883a 	mov	r3,zero
 2002e24:	10c5f8f2 	custom	227,r2,r2,r3
 2002e28:	1000b21e 	bne	r2,zero,20030f4 <collide_calc+0x368>
 2002e2c:	e0bffb17 	ldw	r2,-20(fp)
 2002e30:	10c00104 	addi	r3,r2,4
 2002e34:	18800017 	ldw	r2,0(r3)
 2002e38:	0007883a 	mov	r3,zero
 2002e3c:	10c5f8f2 	custom	227,r2,r2,r3
 2002e40:	1000ac1e 	bne	r2,zero,20030f4 <collide_calc+0x368>
		int sign;
		float v21 [2];
		float a;
		float dv;

		x1=ball1[0];
 2002e44:	e0bffa17 	ldw	r2,-24(fp)
 2002e48:	10800017 	ldw	r2,0(r2)
 2002e4c:	e0bfef15 	stw	r2,-68(fp)
		x2=ball2[0];
 2002e50:	e0bffb17 	ldw	r2,-20(fp)
 2002e54:	10800017 	ldw	r2,0(r2)
 2002e58:	e0bff015 	stw	r2,-64(fp)
		y1=ball1[1];
 2002e5c:	e0bffa17 	ldw	r2,-24(fp)
 2002e60:	10800117 	ldw	r2,4(r2)
 2002e64:	e0bff115 	stw	r2,-60(fp)
		y2=ball2[1];
 2002e68:	e0bffb17 	ldw	r2,-20(fp)
 2002e6c:	10800117 	ldw	r2,4(r2)
 2002e70:	e0bff215 	stw	r2,-56(fp)

		//m1=1.0;
		//m2=1.0;
		m21 = 1.0; // m1 = 1.0 / m2 = 1.0
 2002e74:	008fe034 	movhi	r2,16256
 2002e78:	e0bff315 	stw	r2,-52(fp)
		x21 = x2-x1;
 2002e7c:	e0fff017 	ldw	r3,-64(fp)
 2002e80:	e0bfef17 	ldw	r2,-68(fp)
 2002e84:	1885ffb2 	custom	254,r2,r3,r2
 2002e88:	e0bfed15 	stw	r2,-76(fp)
		y21 = y2-y1;
 2002e8c:	e0fff217 	ldw	r3,-56(fp)
 2002e90:	e0bff117 	ldw	r2,-60(fp)
 2002e94:	1885ffb2 	custom	254,r2,r3,r2
 2002e98:	e0bff415 	stw	r2,-48(fp)
		v21[0]=velocity2[0]-velocity1[0];
 2002e9c:	e0bffd17 	ldw	r2,-12(fp)
 2002ea0:	10c00017 	ldw	r3,0(r2)
 2002ea4:	e13ffc17 	ldw	r4,-16(fp)
 2002ea8:	20800017 	ldw	r2,0(r4)
 2002eac:	1885ffb2 	custom	254,r2,r3,r2
 2002eb0:	e0bff815 	stw	r2,-32(fp)
		v21[1]=velocity2[1]-velocity1[1];
 2002eb4:	e0bffd17 	ldw	r2,-12(fp)
 2002eb8:	10800104 	addi	r2,r2,4
 2002ebc:	10c00017 	ldw	r3,0(r2)
 2002ec0:	e0bffc17 	ldw	r2,-16(fp)
 2002ec4:	11000104 	addi	r4,r2,4
 2002ec8:	20800017 	ldw	r2,0(r4)
 2002ecc:	1885ffb2 	custom	254,r2,r3,r2
 2002ed0:	e0bff915 	stw	r2,-28(fp)

		if ((v21[0]*x21 + v21[1]*y21) >=0){
 2002ed4:	e0fff817 	ldw	r3,-32(fp)
 2002ed8:	e0bfed17 	ldw	r2,-76(fp)
 2002edc:	1887ff32 	custom	252,r3,r3,r2
 2002ee0:	e13ff917 	ldw	r4,-28(fp)
 2002ee4:	e0bff417 	ldw	r2,-48(fp)
 2002ee8:	2085ff32 	custom	252,r2,r4,r2
 2002eec:	1885ff72 	custom	253,r2,r3,r2
 2002ef0:	0007883a 	mov	r3,zero
 2002ef4:	10c5f932 	custom	228,r2,r2,r3
 2002ef8:	10007e1e 	bne	r2,zero,20030f4 <collide_calc+0x368>
			//DEBUG_PRINT("error in collision\n");
			//DEBUG_PRINT("collision id: %d - ball1 [ %.2f, %.2f] - ball2 [ %.2f, %.2f] - V1 [%.2f, %.2f] - V2 [%.2f,%.2f]\n",id, ball1[0],ball1[1],
					//ball2[0],ball2[1],velocity1[0] , velocity1[1],velocity2[0],velocity2[1]);
		}
		else{
			fy21=0.000001*fabs(y21);
 2002efc:	e0bff417 	ldw	r2,-48(fp)
 2002f00:	1005f832 	custom	224,r2,r2,zero
 2002f04:	1009883a 	mov	r4,r2
 2002f08:	20045f40 	call	20045f4 <__extendsfdf2>
 2002f0c:	1011883a 	mov	r8,r2
 2002f10:	1813883a 	mov	r9,r3
 2002f14:	01a82db4 	movhi	r6,41142
 2002f18:	31bb6344 	addi	r6,r6,-4723
 2002f1c:	01cfac74 	movhi	r7,16049
 2002f20:	39f1bdc4 	addi	r7,r7,-14601
 2002f24:	4009883a 	mov	r4,r8
 2002f28:	480b883a 	mov	r5,r9
 2002f2c:	2003edc0 	call	2003edc <__muldf3>
 2002f30:	1009883a 	mov	r4,r2
 2002f34:	180b883a 	mov	r5,r3
 2002f38:	2005883a 	mov	r2,r4
 2002f3c:	2807883a 	mov	r3,r5
 2002f40:	1009883a 	mov	r4,r2
 2002f44:	180b883a 	mov	r5,r3
 2002f48:	20047040 	call	2004704 <__truncdfsf2>
 2002f4c:	1007883a 	mov	r3,r2
 2002f50:	e0fff515 	stw	r3,-44(fp)
			if(fabs(x21) < fy21){
 2002f54:	e0bfed17 	ldw	r2,-76(fp)
 2002f58:	1007f832 	custom	224,r3,r2,zero
 2002f5c:	e0bff517 	ldw	r2,-44(fp)
 2002f60:	1885f9f2 	custom	231,r2,r3,r2
 2002f64:	10000e26 	beq	r2,zero,2002fa0 <collide_calc+0x214>
				if (x21<0) sign = -1;
 2002f68:	e0bfed17 	ldw	r2,-76(fp)
 2002f6c:	0007883a 	mov	r3,zero
 2002f70:	10c5f9f2 	custom	231,r2,r2,r3
 2002f74:	10000326 	beq	r2,zero,2002f84 <collide_calc+0x1f8>
 2002f78:	00bfffc4 	movi	r2,-1
 2002f7c:	e0bfee15 	stw	r2,-72(fp)
 2002f80:	00000206 	br	2002f8c <collide_calc+0x200>
				else sign=1;
 2002f84:	00800044 	movi	r2,1
 2002f88:	e0bfee15 	stw	r2,-72(fp)
				x21=fy21*sign;
 2002f8c:	e0bfee17 	ldw	r2,-72(fp)
 2002f90:	1007feb2 	custom	250,r3,r2,zero
 2002f94:	e0bff517 	ldw	r2,-44(fp)
 2002f98:	1885ff32 	custom	252,r2,r3,r2
 2002f9c:	e0bfed15 	stw	r2,-76(fp)
			}
			a=y21/x21;
 2002fa0:	e0fff417 	ldw	r3,-48(fp)
 2002fa4:	e0bfed17 	ldw	r2,-76(fp)
 2002fa8:	1885fff2 	custom	255,r2,r3,r2
 2002fac:	e0bff615 	stw	r2,-40(fp)
            dv = -2.0*(v21[0]+a*v21[1])/((1+a*a)*(1+m21));
 2002fb0:	e0fff817 	ldw	r3,-32(fp)
 2002fb4:	e13ff917 	ldw	r4,-28(fp)
 2002fb8:	e0bff617 	ldw	r2,-40(fp)
 2002fbc:	2085ff32 	custom	252,r2,r4,r2
 2002fc0:	1885ff72 	custom	253,r2,r3,r2
 2002fc4:	1009883a 	mov	r4,r2
 2002fc8:	20045f40 	call	20045f4 <__extendsfdf2>
 2002fcc:	1011883a 	mov	r8,r2
 2002fd0:	1813883a 	mov	r9,r3
 2002fd4:	000d883a 	mov	r6,zero
 2002fd8:	01f00034 	movhi	r7,49152
 2002fdc:	4009883a 	mov	r4,r8
 2002fe0:	480b883a 	mov	r5,r9
 2002fe4:	2003edc0 	call	2003edc <__muldf3>
 2002fe8:	1009883a 	mov	r4,r2
 2002fec:	180b883a 	mov	r5,r3
 2002ff0:	2021883a 	mov	r16,r4
 2002ff4:	2823883a 	mov	r17,r5
 2002ff8:	e0fff617 	ldw	r3,-40(fp)
 2002ffc:	e0bff617 	ldw	r2,-40(fp)
 2003000:	1887ff32 	custom	252,r3,r3,r2
 2003004:	008fe034 	movhi	r2,16256
 2003008:	1887ff72 	custom	253,r3,r3,r2
 200300c:	e13ff317 	ldw	r4,-52(fp)
 2003010:	008fe034 	movhi	r2,16256
 2003014:	2085ff72 	custom	253,r2,r4,r2
 2003018:	1885ff32 	custom	252,r2,r3,r2
 200301c:	1009883a 	mov	r4,r2
 2003020:	20045f40 	call	20045f4 <__extendsfdf2>
 2003024:	1009883a 	mov	r4,r2
 2003028:	180b883a 	mov	r5,r3
 200302c:	200d883a 	mov	r6,r4
 2003030:	280f883a 	mov	r7,r5
 2003034:	8009883a 	mov	r4,r16
 2003038:	880b883a 	mov	r5,r17
 200303c:	20034240 	call	2003424 <__divdf3>
 2003040:	1009883a 	mov	r4,r2
 2003044:	180b883a 	mov	r5,r3
 2003048:	2005883a 	mov	r2,r4
 200304c:	2807883a 	mov	r3,r5
 2003050:	1009883a 	mov	r4,r2
 2003054:	180b883a 	mov	r5,r3
 2003058:	20047040 	call	2004704 <__truncdfsf2>
 200305c:	1007883a 	mov	r3,r2
 2003060:	e0fff715 	stw	r3,-36(fp)
            velocity2[0] += dv;
 2003064:	e0bffd17 	ldw	r2,-12(fp)
 2003068:	10c00017 	ldw	r3,0(r2)
 200306c:	e0bff717 	ldw	r2,-36(fp)
 2003070:	1887ff72 	custom	253,r3,r3,r2
 2003074:	e0bffd17 	ldw	r2,-12(fp)
 2003078:	10c00015 	stw	r3,0(r2)
            velocity2[1] += a*dv;
 200307c:	e0bffd17 	ldw	r2,-12(fp)
 2003080:	10800104 	addi	r2,r2,4
 2003084:	e0fffd17 	ldw	r3,-12(fp)
 2003088:	18c00104 	addi	r3,r3,4
 200308c:	19000017 	ldw	r4,0(r3)
 2003090:	e17ff617 	ldw	r5,-40(fp)
 2003094:	e0fff717 	ldw	r3,-36(fp)
 2003098:	28c7ff32 	custom	252,r3,r5,r3
 200309c:	20c7ff72 	custom	253,r3,r4,r3
 20030a0:	10c00015 	stw	r3,0(r2)

            velocity1[0] -= m21*dv;
 20030a4:	e0bffc17 	ldw	r2,-16(fp)
 20030a8:	10c00017 	ldw	r3,0(r2)
 20030ac:	e13ff317 	ldw	r4,-52(fp)
 20030b0:	e0bff717 	ldw	r2,-36(fp)
 20030b4:	2085ff32 	custom	252,r2,r4,r2
 20030b8:	1887ffb2 	custom	254,r3,r3,r2
 20030bc:	e0bffc17 	ldw	r2,-16(fp)
 20030c0:	10c00015 	stw	r3,0(r2)
            velocity1[1] -= a*m21*dv;
 20030c4:	e0bffc17 	ldw	r2,-16(fp)
 20030c8:	10800104 	addi	r2,r2,4
 20030cc:	e0fffc17 	ldw	r3,-16(fp)
 20030d0:	18c00104 	addi	r3,r3,4
 20030d4:	19000017 	ldw	r4,0(r3)
 20030d8:	e17ff617 	ldw	r5,-40(fp)
 20030dc:	e0fff317 	ldw	r3,-52(fp)
 20030e0:	28cbff32 	custom	252,r5,r5,r3
 20030e4:	e0fff717 	ldw	r3,-36(fp)
 20030e8:	28c7ff32 	custom	252,r3,r5,r3
 20030ec:	20c7ffb2 	custom	254,r3,r4,r3
 20030f0:	10c00015 	stw	r3,0(r2)
		}
	}
}
 20030f4:	0001883a 	nop
 20030f8:	e6fffe04 	addi	sp,fp,-8
 20030fc:	dfc00317 	ldw	ra,12(sp)
 2003100:	df000217 	ldw	fp,8(sp)
 2003104:	dc400117 	ldw	r17,4(sp)
 2003108:	dc000017 	ldw	r16,0(sp)
 200310c:	dec00404 	addi	sp,sp,16
 2003110:	f800283a 	ret

02003114 <moveBall>:


void moveBall(float* ball, float* velocity){
 2003114:	defffd04 	addi	sp,sp,-12
 2003118:	df000215 	stw	fp,8(sp)
 200311c:	df000204 	addi	fp,sp,8
 2003120:	e13ffe15 	stw	r4,-8(fp)
 2003124:	e17fff15 	stw	r5,-4(fp)
	ball[0] += velocity[0];
 2003128:	e0bffe17 	ldw	r2,-8(fp)
 200312c:	10c00017 	ldw	r3,0(r2)
 2003130:	e13fff17 	ldw	r4,-4(fp)
 2003134:	20800017 	ldw	r2,0(r4)
 2003138:	1887ff72 	custom	253,r3,r3,r2
 200313c:	e0bffe17 	ldw	r2,-8(fp)
 2003140:	10c00015 	stw	r3,0(r2)
	ball[1] += velocity[1];
 2003144:	e0bffe17 	ldw	r2,-8(fp)
 2003148:	10800104 	addi	r2,r2,4
 200314c:	e0fffe17 	ldw	r3,-8(fp)
 2003150:	18c00104 	addi	r3,r3,4
 2003154:	19000017 	ldw	r4,0(r3)
 2003158:	e0ffff17 	ldw	r3,-4(fp)
 200315c:	19400104 	addi	r5,r3,4
 2003160:	28c00017 	ldw	r3,0(r5)
 2003164:	20c7ff72 	custom	253,r3,r4,r3
 2003168:	10c00015 	stw	r3,0(r2)
}
 200316c:	0001883a 	nop
 2003170:	e037883a 	mov	sp,fp
 2003174:	df000017 	ldw	fp,0(sp)
 2003178:	dec00104 	addi	sp,sp,4
 200317c:	f800283a 	ret

02003180 <damping>:


void damping(float* velocity){
 2003180:	defffc04 	addi	sp,sp,-16
 2003184:	dfc00315 	stw	ra,12(sp)
 2003188:	df000215 	stw	fp,8(sp)
 200318c:	dc000115 	stw	r16,4(sp)
 2003190:	df000204 	addi	fp,sp,8
 2003194:	e13ffe15 	stw	r4,-8(fp)
	velocity[0] *= DAMPING;
 2003198:	e0bffe17 	ldw	r2,-8(fp)
 200319c:	10c00017 	ldw	r3,0(r2)
 20031a0:	1809883a 	mov	r4,r3
 20031a4:	20045f40 	call	20045f4 <__extendsfdf2>
 20031a8:	1011883a 	mov	r8,r2
 20031ac:	1813883a 	mov	r9,r3
 20031b0:	018f5c74 	movhi	r6,15729
 20031b4:	31a8f5c4 	addi	r6,r6,-23593
 20031b8:	01cffc34 	movhi	r7,16368
 20031bc:	39f5c284 	addi	r7,r7,-10486
 20031c0:	4009883a 	mov	r4,r8
 20031c4:	480b883a 	mov	r5,r9
 20031c8:	2003edc0 	call	2003edc <__muldf3>
 20031cc:	1009883a 	mov	r4,r2
 20031d0:	180b883a 	mov	r5,r3
 20031d4:	2005883a 	mov	r2,r4
 20031d8:	2807883a 	mov	r3,r5
 20031dc:	1009883a 	mov	r4,r2
 20031e0:	180b883a 	mov	r5,r3
 20031e4:	20047040 	call	2004704 <__truncdfsf2>
 20031e8:	1007883a 	mov	r3,r2
 20031ec:	e0bffe17 	ldw	r2,-8(fp)
 20031f0:	10c00015 	stw	r3,0(r2)
	velocity[1] *= DAMPING;
 20031f4:	e0bffe17 	ldw	r2,-8(fp)
 20031f8:	14000104 	addi	r16,r2,4
 20031fc:	e0bffe17 	ldw	r2,-8(fp)
 2003200:	10800104 	addi	r2,r2,4
 2003204:	10c00017 	ldw	r3,0(r2)
 2003208:	1809883a 	mov	r4,r3
 200320c:	20045f40 	call	20045f4 <__extendsfdf2>
 2003210:	1011883a 	mov	r8,r2
 2003214:	1813883a 	mov	r9,r3
 2003218:	018f5c74 	movhi	r6,15729
 200321c:	31a8f5c4 	addi	r6,r6,-23593
 2003220:	01cffc34 	movhi	r7,16368
 2003224:	39f5c284 	addi	r7,r7,-10486
 2003228:	4009883a 	mov	r4,r8
 200322c:	480b883a 	mov	r5,r9
 2003230:	2003edc0 	call	2003edc <__muldf3>
 2003234:	1009883a 	mov	r4,r2
 2003238:	180b883a 	mov	r5,r3
 200323c:	2005883a 	mov	r2,r4
 2003240:	2807883a 	mov	r3,r5
 2003244:	1009883a 	mov	r4,r2
 2003248:	180b883a 	mov	r5,r3
 200324c:	20047040 	call	2004704 <__truncdfsf2>
 2003250:	1007883a 	mov	r3,r2
 2003254:	80c00015 	stw	r3,0(r16)
}
 2003258:	0001883a 	nop
 200325c:	e6ffff04 	addi	sp,fp,-4
 2003260:	dfc00217 	ldw	ra,8(sp)
 2003264:	df000117 	ldw	fp,4(sp)
 2003268:	dc000017 	ldw	r16,0(sp)
 200326c:	dec00304 	addi	sp,sp,12
 2003270:	f800283a 	ret

02003274 <fmin>:
#else
	double fmin(x,y)
	double x;
	double y;
#endif
{
 2003274:	defffa04 	addi	sp,sp,-24
 2003278:	dfc00515 	stw	ra,20(sp)
 200327c:	df000415 	stw	fp,16(sp)
 2003280:	df000404 	addi	fp,sp,16
 2003284:	e13ffc15 	stw	r4,-16(fp)
 2003288:	e17ffd15 	stw	r5,-12(fp)
 200328c:	e1bffe15 	stw	r6,-8(fp)
 2003290:	e1ffff15 	stw	r7,-4(fp)
  if (__fpclassifyd(x) == FP_NAN)
 2003294:	e13ffc17 	ldw	r4,-16(fp)
 2003298:	e17ffd17 	ldw	r5,-12(fp)
 200329c:	20033200 	call	2003320 <__fpclassifyd>
 20032a0:	1000031e 	bne	r2,zero,20032b0 <fmin+0x3c>
    return y;
 20032a4:	e0bffe17 	ldw	r2,-8(fp)
 20032a8:	e0ffff17 	ldw	r3,-4(fp)
 20032ac:	00001306 	br	20032fc <fmin+0x88>
  if (__fpclassifyd(y) == FP_NAN)
 20032b0:	e13ffe17 	ldw	r4,-8(fp)
 20032b4:	e17fff17 	ldw	r5,-4(fp)
 20032b8:	20033200 	call	2003320 <__fpclassifyd>
 20032bc:	1000031e 	bne	r2,zero,20032cc <fmin+0x58>
    return x;
 20032c0:	e0bffc17 	ldw	r2,-16(fp)
 20032c4:	e0fffd17 	ldw	r3,-12(fp)
 20032c8:	00000c06 	br	20032fc <fmin+0x88>
  
  return x < y ? x : y;
 20032cc:	e1bffe17 	ldw	r6,-8(fp)
 20032d0:	e1ffff17 	ldw	r7,-4(fp)
 20032d4:	e13ffc17 	ldw	r4,-16(fp)
 20032d8:	e17ffd17 	ldw	r5,-12(fp)
 20032dc:	2003de80 	call	2003de8 <__ledf2>
 20032e0:	1000030e 	bge	r2,zero,20032f0 <fmin+0x7c>
 20032e4:	e0bffc17 	ldw	r2,-16(fp)
 20032e8:	e0fffd17 	ldw	r3,-12(fp)
 20032ec:	00000206 	br	20032f8 <fmin+0x84>
 20032f0:	e0bffe17 	ldw	r2,-8(fp)
 20032f4:	e0ffff17 	ldw	r3,-4(fp)
 20032f8:	0001883a 	nop
 20032fc:	1009883a 	mov	r4,r2
 2003300:	180b883a 	mov	r5,r3
}
 2003304:	2005883a 	mov	r2,r4
 2003308:	2807883a 	mov	r3,r5
 200330c:	e037883a 	mov	sp,fp
 2003310:	dfc00117 	ldw	ra,4(sp)
 2003314:	df000017 	ldw	fp,0(sp)
 2003318:	dec00204 	addi	sp,sp,8
 200331c:	f800283a 	ret

02003320 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
 2003320:	defff904 	addi	sp,sp,-28
 2003324:	df000615 	stw	fp,24(sp)
 2003328:	df000604 	addi	fp,sp,24
 200332c:	e13ffe15 	stw	r4,-8(fp)
 2003330:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
 2003334:	e0bffe17 	ldw	r2,-8(fp)
 2003338:	e0bffc15 	stw	r2,-16(fp)
 200333c:	e0bfff17 	ldw	r2,-4(fp)
 2003340:	e0bffd15 	stw	r2,-12(fp)
 2003344:	e0bffd17 	ldw	r2,-12(fp)
 2003348:	e0bffa15 	stw	r2,-24(fp)
 200334c:	e0bffc17 	ldw	r2,-16(fp)
 2003350:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
 2003354:	e0bffa17 	ldw	r2,-24(fp)
 2003358:	1000021e 	bne	r2,zero,2003364 <__fpclassifyd+0x44>
 200335c:	e0bffb17 	ldw	r2,-20(fp)
 2003360:	10000526 	beq	r2,zero,2003378 <__fpclassifyd+0x58>
 2003364:	e0fffa17 	ldw	r3,-24(fp)
 2003368:	00a00034 	movhi	r2,32768
 200336c:	1880041e 	bne	r3,r2,2003380 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
 2003370:	e0bffb17 	ldw	r2,-20(fp)
 2003374:	1000021e 	bne	r2,zero,2003380 <__fpclassifyd+0x60>
    return FP_ZERO;
 2003378:	00800084 	movi	r2,2
 200337c:	00002506 	br	2003414 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
 2003380:	e0fffa17 	ldw	r3,-24(fp)
 2003384:	00800434 	movhi	r2,16
 2003388:	18800336 	bltu	r3,r2,2003398 <__fpclassifyd+0x78>
 200338c:	e0fffa17 	ldw	r3,-24(fp)
 2003390:	009ffc34 	movhi	r2,32752
 2003394:	18800636 	bltu	r3,r2,20033b0 <__fpclassifyd+0x90>
 2003398:	e0fffa17 	ldw	r3,-24(fp)
 200339c:	00a00434 	movhi	r2,32784
 20033a0:	18800536 	bltu	r3,r2,20033b8 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
 20033a4:	e0fffa17 	ldw	r3,-24(fp)
 20033a8:	00bffc34 	movhi	r2,65520
 20033ac:	1880022e 	bgeu	r3,r2,20033b8 <__fpclassifyd+0x98>
    return FP_NORMAL;
 20033b0:	00800104 	movi	r2,4
 20033b4:	00001706 	br	2003414 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 20033b8:	e0fffa17 	ldw	r3,-24(fp)
 20033bc:	00800434 	movhi	r2,16
 20033c0:	18800536 	bltu	r3,r2,20033d8 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 20033c4:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
 20033c8:	1000050e 	bge	r2,zero,20033e0 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
 20033cc:	e0fffa17 	ldw	r3,-24(fp)
 20033d0:	00a00434 	movhi	r2,32784
 20033d4:	1880022e 	bgeu	r3,r2,20033e0 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
 20033d8:	008000c4 	movi	r2,3
 20033dc:	00000d06 	br	2003414 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
 20033e0:	e0fffa17 	ldw	r3,-24(fp)
 20033e4:	009ffc34 	movhi	r2,32752
 20033e8:	1880021e 	bne	r3,r2,20033f4 <__fpclassifyd+0xd4>
 20033ec:	e0bffb17 	ldw	r2,-20(fp)
 20033f0:	10000526 	beq	r2,zero,2003408 <__fpclassifyd+0xe8>
 20033f4:	e0fffa17 	ldw	r3,-24(fp)
 20033f8:	00bffc34 	movhi	r2,65520
 20033fc:	1880041e 	bne	r3,r2,2003410 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
 2003400:	e0bffb17 	ldw	r2,-20(fp)
 2003404:	1000021e 	bne	r2,zero,2003410 <__fpclassifyd+0xf0>
    return FP_INFINITE;
 2003408:	00800044 	movi	r2,1
 200340c:	00000106 	br	2003414 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
 2003410:	0005883a 	mov	r2,zero
}
 2003414:	e037883a 	mov	sp,fp
 2003418:	df000017 	ldw	fp,0(sp)
 200341c:	dec00104 	addi	sp,sp,4
 2003420:	f800283a 	ret

02003424 <__divdf3>:
 2003424:	defff204 	addi	sp,sp,-56
 2003428:	dd400915 	stw	r21,36(sp)
 200342c:	282ad53a 	srli	r21,r5,20
 2003430:	dd000815 	stw	r20,32(sp)
 2003434:	2828d7fa 	srli	r20,r5,31
 2003438:	dc000415 	stw	r16,16(sp)
 200343c:	04000434 	movhi	r16,16
 2003440:	df000c15 	stw	fp,48(sp)
 2003444:	843fffc4 	addi	r16,r16,-1
 2003448:	dfc00d15 	stw	ra,52(sp)
 200344c:	ddc00b15 	stw	r23,44(sp)
 2003450:	dd800a15 	stw	r22,40(sp)
 2003454:	dcc00715 	stw	r19,28(sp)
 2003458:	dc800615 	stw	r18,24(sp)
 200345c:	dc400515 	stw	r17,20(sp)
 2003460:	ad41ffcc 	andi	r21,r21,2047
 2003464:	2c20703a 	and	r16,r5,r16
 2003468:	a7003fcc 	andi	fp,r20,255
 200346c:	a8006126 	beq	r21,zero,20035f4 <__divdf3+0x1d0>
 2003470:	0081ffc4 	movi	r2,2047
 2003474:	2025883a 	mov	r18,r4
 2003478:	a8803726 	beq	r21,r2,2003558 <__divdf3+0x134>
 200347c:	80800434 	orhi	r2,r16,16
 2003480:	100490fa 	slli	r2,r2,3
 2003484:	2020d77a 	srli	r16,r4,29
 2003488:	202490fa 	slli	r18,r4,3
 200348c:	ad7f0044 	addi	r21,r21,-1023
 2003490:	80a0b03a 	or	r16,r16,r2
 2003494:	0027883a 	mov	r19,zero
 2003498:	0013883a 	mov	r9,zero
 200349c:	3804d53a 	srli	r2,r7,20
 20034a0:	382cd7fa 	srli	r22,r7,31
 20034a4:	04400434 	movhi	r17,16
 20034a8:	8c7fffc4 	addi	r17,r17,-1
 20034ac:	1081ffcc 	andi	r2,r2,2047
 20034b0:	3011883a 	mov	r8,r6
 20034b4:	3c62703a 	and	r17,r7,r17
 20034b8:	b5c03fcc 	andi	r23,r22,255
 20034bc:	10006c26 	beq	r2,zero,2003670 <__divdf3+0x24c>
 20034c0:	00c1ffc4 	movi	r3,2047
 20034c4:	10c06426 	beq	r2,r3,2003658 <__divdf3+0x234>
 20034c8:	88c00434 	orhi	r3,r17,16
 20034cc:	180690fa 	slli	r3,r3,3
 20034d0:	3022d77a 	srli	r17,r6,29
 20034d4:	301090fa 	slli	r8,r6,3
 20034d8:	10bf0044 	addi	r2,r2,-1023
 20034dc:	88e2b03a 	or	r17,r17,r3
 20034e0:	000f883a 	mov	r7,zero
 20034e4:	a58cf03a 	xor	r6,r20,r22
 20034e8:	3cc8b03a 	or	r4,r7,r19
 20034ec:	a8abc83a 	sub	r21,r21,r2
 20034f0:	008003c4 	movi	r2,15
 20034f4:	3007883a 	mov	r3,r6
 20034f8:	34c03fcc 	andi	r19,r6,255
 20034fc:	11009036 	bltu	r2,r4,2003740 <__divdf3+0x31c>
 2003500:	200890ba 	slli	r4,r4,2
 2003504:	00808034 	movhi	r2,512
 2003508:	108d4604 	addi	r2,r2,13592
 200350c:	2089883a 	add	r4,r4,r2
 2003510:	20800017 	ldw	r2,0(r4)
 2003514:	1000683a 	jmp	r2
 2003518:	02003740 	call	200374 <__alt_mem_mem_Nios_PI+0x374>
 200351c:	02003590 	cmplti	r8,zero,214
 2003520:	02003730 	cmpltui	r8,zero,220
 2003524:	02003584 	movi	r8,214
 2003528:	02003730 	cmpltui	r8,zero,220
 200352c:	02003704 	movi	r8,220
 2003530:	02003730 	cmpltui	r8,zero,220
 2003534:	02003584 	movi	r8,214
 2003538:	02003590 	cmplti	r8,zero,214
 200353c:	02003590 	cmplti	r8,zero,214
 2003540:	02003704 	movi	r8,220
 2003544:	02003584 	movi	r8,214
 2003548:	02003574 	movhi	r8,213
 200354c:	02003574 	movhi	r8,213
 2003550:	02003574 	movhi	r8,213
 2003554:	02003a24 	muli	r8,zero,232
 2003558:	2404b03a 	or	r2,r4,r16
 200355c:	1000661e 	bne	r2,zero,20036f8 <__divdf3+0x2d4>
 2003560:	04c00204 	movi	r19,8
 2003564:	0021883a 	mov	r16,zero
 2003568:	0025883a 	mov	r18,zero
 200356c:	02400084 	movi	r9,2
 2003570:	003fca06 	br	200349c <__divdf3+0x78>
 2003574:	8023883a 	mov	r17,r16
 2003578:	9011883a 	mov	r8,r18
 200357c:	e02f883a 	mov	r23,fp
 2003580:	480f883a 	mov	r7,r9
 2003584:	00800084 	movi	r2,2
 2003588:	3881311e 	bne	r7,r2,2003a50 <__divdf3+0x62c>
 200358c:	b827883a 	mov	r19,r23
 2003590:	98c0004c 	andi	r3,r19,1
 2003594:	0081ffc4 	movi	r2,2047
 2003598:	000b883a 	mov	r5,zero
 200359c:	0025883a 	mov	r18,zero
 20035a0:	1004953a 	slli	r2,r2,20
 20035a4:	18c03fcc 	andi	r3,r3,255
 20035a8:	04400434 	movhi	r17,16
 20035ac:	8c7fffc4 	addi	r17,r17,-1
 20035b0:	180697fa 	slli	r3,r3,31
 20035b4:	2c4a703a 	and	r5,r5,r17
 20035b8:	288ab03a 	or	r5,r5,r2
 20035bc:	28c6b03a 	or	r3,r5,r3
 20035c0:	9005883a 	mov	r2,r18
 20035c4:	dfc00d17 	ldw	ra,52(sp)
 20035c8:	df000c17 	ldw	fp,48(sp)
 20035cc:	ddc00b17 	ldw	r23,44(sp)
 20035d0:	dd800a17 	ldw	r22,40(sp)
 20035d4:	dd400917 	ldw	r21,36(sp)
 20035d8:	dd000817 	ldw	r20,32(sp)
 20035dc:	dcc00717 	ldw	r19,28(sp)
 20035e0:	dc800617 	ldw	r18,24(sp)
 20035e4:	dc400517 	ldw	r17,20(sp)
 20035e8:	dc000417 	ldw	r16,16(sp)
 20035ec:	dec00e04 	addi	sp,sp,56
 20035f0:	f800283a 	ret
 20035f4:	2404b03a 	or	r2,r4,r16
 20035f8:	2027883a 	mov	r19,r4
 20035fc:	10003926 	beq	r2,zero,20036e4 <__divdf3+0x2c0>
 2003600:	80012e26 	beq	r16,zero,2003abc <__divdf3+0x698>
 2003604:	8009883a 	mov	r4,r16
 2003608:	d9800315 	stw	r6,12(sp)
 200360c:	d9c00215 	stw	r7,8(sp)
 2003610:	20048ac0 	call	20048ac <__clzsi2>
 2003614:	d9800317 	ldw	r6,12(sp)
 2003618:	d9c00217 	ldw	r7,8(sp)
 200361c:	113ffd44 	addi	r4,r2,-11
 2003620:	00c00704 	movi	r3,28
 2003624:	19012116 	blt	r3,r4,2003aac <__divdf3+0x688>
 2003628:	00c00744 	movi	r3,29
 200362c:	147ffe04 	addi	r17,r2,-8
 2003630:	1907c83a 	sub	r3,r3,r4
 2003634:	8460983a 	sll	r16,r16,r17
 2003638:	98c6d83a 	srl	r3,r19,r3
 200363c:	9c64983a 	sll	r18,r19,r17
 2003640:	1c20b03a 	or	r16,r3,r16
 2003644:	1080fcc4 	addi	r2,r2,1011
 2003648:	00abc83a 	sub	r21,zero,r2
 200364c:	0027883a 	mov	r19,zero
 2003650:	0013883a 	mov	r9,zero
 2003654:	003f9106 	br	200349c <__divdf3+0x78>
 2003658:	3446b03a 	or	r3,r6,r17
 200365c:	18001f1e 	bne	r3,zero,20036dc <__divdf3+0x2b8>
 2003660:	0023883a 	mov	r17,zero
 2003664:	0011883a 	mov	r8,zero
 2003668:	01c00084 	movi	r7,2
 200366c:	003f9d06 	br	20034e4 <__divdf3+0xc0>
 2003670:	3446b03a 	or	r3,r6,r17
 2003674:	18001526 	beq	r3,zero,20036cc <__divdf3+0x2a8>
 2003678:	88011b26 	beq	r17,zero,2003ae8 <__divdf3+0x6c4>
 200367c:	8809883a 	mov	r4,r17
 2003680:	d9800315 	stw	r6,12(sp)
 2003684:	da400115 	stw	r9,4(sp)
 2003688:	20048ac0 	call	20048ac <__clzsi2>
 200368c:	d9800317 	ldw	r6,12(sp)
 2003690:	da400117 	ldw	r9,4(sp)
 2003694:	113ffd44 	addi	r4,r2,-11
 2003698:	00c00704 	movi	r3,28
 200369c:	19010e16 	blt	r3,r4,2003ad8 <__divdf3+0x6b4>
 20036a0:	00c00744 	movi	r3,29
 20036a4:	123ffe04 	addi	r8,r2,-8
 20036a8:	1907c83a 	sub	r3,r3,r4
 20036ac:	8a22983a 	sll	r17,r17,r8
 20036b0:	30c6d83a 	srl	r3,r6,r3
 20036b4:	3210983a 	sll	r8,r6,r8
 20036b8:	1c62b03a 	or	r17,r3,r17
 20036bc:	1080fcc4 	addi	r2,r2,1011
 20036c0:	0085c83a 	sub	r2,zero,r2
 20036c4:	000f883a 	mov	r7,zero
 20036c8:	003f8606 	br	20034e4 <__divdf3+0xc0>
 20036cc:	0023883a 	mov	r17,zero
 20036d0:	0011883a 	mov	r8,zero
 20036d4:	01c00044 	movi	r7,1
 20036d8:	003f8206 	br	20034e4 <__divdf3+0xc0>
 20036dc:	01c000c4 	movi	r7,3
 20036e0:	003f8006 	br	20034e4 <__divdf3+0xc0>
 20036e4:	04c00104 	movi	r19,4
 20036e8:	0021883a 	mov	r16,zero
 20036ec:	0025883a 	mov	r18,zero
 20036f0:	02400044 	movi	r9,1
 20036f4:	003f6906 	br	200349c <__divdf3+0x78>
 20036f8:	04c00304 	movi	r19,12
 20036fc:	024000c4 	movi	r9,3
 2003700:	003f6606 	br	200349c <__divdf3+0x78>
 2003704:	01400434 	movhi	r5,16
 2003708:	0007883a 	mov	r3,zero
 200370c:	297fffc4 	addi	r5,r5,-1
 2003710:	04bfffc4 	movi	r18,-1
 2003714:	0081ffc4 	movi	r2,2047
 2003718:	003fa106 	br	20035a0 <__divdf3+0x17c>
 200371c:	00c00044 	movi	r3,1
 2003720:	1887c83a 	sub	r3,r3,r2
 2003724:	01000e04 	movi	r4,56
 2003728:	20c1210e 	bge	r4,r3,2003bb0 <__divdf3+0x78c>
 200372c:	98c0004c 	andi	r3,r19,1
 2003730:	0005883a 	mov	r2,zero
 2003734:	000b883a 	mov	r5,zero
 2003738:	0025883a 	mov	r18,zero
 200373c:	003f9806 	br	20035a0 <__divdf3+0x17c>
 2003740:	8c00fd36 	bltu	r17,r16,2003b38 <__divdf3+0x714>
 2003744:	8440fb26 	beq	r16,r17,2003b34 <__divdf3+0x710>
 2003748:	8007883a 	mov	r3,r16
 200374c:	ad7fffc4 	addi	r21,r21,-1
 2003750:	0021883a 	mov	r16,zero
 2003754:	4004d63a 	srli	r2,r8,24
 2003758:	8822923a 	slli	r17,r17,8
 200375c:	1809883a 	mov	r4,r3
 2003760:	402c923a 	slli	r22,r8,8
 2003764:	88b8b03a 	or	fp,r17,r2
 2003768:	e028d43a 	srli	r20,fp,16
 200376c:	d8c00015 	stw	r3,0(sp)
 2003770:	e5ffffcc 	andi	r23,fp,65535
 2003774:	a00b883a 	mov	r5,r20
 2003778:	2004a080 	call	2004a08 <__udivsi3>
 200377c:	d8c00017 	ldw	r3,0(sp)
 2003780:	a00b883a 	mov	r5,r20
 2003784:	d8800315 	stw	r2,12(sp)
 2003788:	1809883a 	mov	r4,r3
 200378c:	2004a6c0 	call	2004a6c <__umodsi3>
 2003790:	d9800317 	ldw	r6,12(sp)
 2003794:	1006943a 	slli	r3,r2,16
 2003798:	9004d43a 	srli	r2,r18,16
 200379c:	b9a3383a 	mul	r17,r23,r6
 20037a0:	10c4b03a 	or	r2,r2,r3
 20037a4:	1440062e 	bgeu	r2,r17,20037c0 <__divdf3+0x39c>
 20037a8:	1705883a 	add	r2,r2,fp
 20037ac:	30ffffc4 	addi	r3,r6,-1
 20037b0:	1700ee36 	bltu	r2,fp,2003b6c <__divdf3+0x748>
 20037b4:	1440ed2e 	bgeu	r2,r17,2003b6c <__divdf3+0x748>
 20037b8:	31bfff84 	addi	r6,r6,-2
 20037bc:	1705883a 	add	r2,r2,fp
 20037c0:	1463c83a 	sub	r17,r2,r17
 20037c4:	a00b883a 	mov	r5,r20
 20037c8:	8809883a 	mov	r4,r17
 20037cc:	d9800315 	stw	r6,12(sp)
 20037d0:	2004a080 	call	2004a08 <__udivsi3>
 20037d4:	a00b883a 	mov	r5,r20
 20037d8:	8809883a 	mov	r4,r17
 20037dc:	d8800215 	stw	r2,8(sp)
 20037e0:	2004a6c0 	call	2004a6c <__umodsi3>
 20037e4:	d9c00217 	ldw	r7,8(sp)
 20037e8:	1004943a 	slli	r2,r2,16
 20037ec:	94bfffcc 	andi	r18,r18,65535
 20037f0:	b9d1383a 	mul	r8,r23,r7
 20037f4:	90a4b03a 	or	r18,r18,r2
 20037f8:	d9800317 	ldw	r6,12(sp)
 20037fc:	9200062e 	bgeu	r18,r8,2003818 <__divdf3+0x3f4>
 2003800:	9725883a 	add	r18,r18,fp
 2003804:	38bfffc4 	addi	r2,r7,-1
 2003808:	9700d636 	bltu	r18,fp,2003b64 <__divdf3+0x740>
 200380c:	9200d52e 	bgeu	r18,r8,2003b64 <__divdf3+0x740>
 2003810:	39ffff84 	addi	r7,r7,-2
 2003814:	9725883a 	add	r18,r18,fp
 2003818:	3004943a 	slli	r2,r6,16
 200381c:	b012d43a 	srli	r9,r22,16
 2003820:	b1bfffcc 	andi	r6,r22,65535
 2003824:	11e2b03a 	or	r17,r2,r7
 2003828:	8806d43a 	srli	r3,r17,16
 200382c:	893fffcc 	andi	r4,r17,65535
 2003830:	218b383a 	mul	r5,r4,r6
 2003834:	30c5383a 	mul	r2,r6,r3
 2003838:	2249383a 	mul	r4,r4,r9
 200383c:	280ed43a 	srli	r7,r5,16
 2003840:	9225c83a 	sub	r18,r18,r8
 2003844:	2089883a 	add	r4,r4,r2
 2003848:	3909883a 	add	r4,r7,r4
 200384c:	1a47383a 	mul	r3,r3,r9
 2003850:	2080022e 	bgeu	r4,r2,200385c <__divdf3+0x438>
 2003854:	00800074 	movhi	r2,1
 2003858:	1887883a 	add	r3,r3,r2
 200385c:	2004d43a 	srli	r2,r4,16
 2003860:	2008943a 	slli	r4,r4,16
 2003864:	297fffcc 	andi	r5,r5,65535
 2003868:	10c7883a 	add	r3,r2,r3
 200386c:	2149883a 	add	r4,r4,r5
 2003870:	90c0a536 	bltu	r18,r3,2003b08 <__divdf3+0x6e4>
 2003874:	90c0bf26 	beq	r18,r3,2003b74 <__divdf3+0x750>
 2003878:	90c7c83a 	sub	r3,r18,r3
 200387c:	810fc83a 	sub	r7,r16,r4
 2003880:	81e5803a 	cmpltu	r18,r16,r7
 2003884:	1ca5c83a 	sub	r18,r3,r18
 2003888:	e480c126 	beq	fp,r18,2003b90 <__divdf3+0x76c>
 200388c:	a00b883a 	mov	r5,r20
 2003890:	9009883a 	mov	r4,r18
 2003894:	d9800315 	stw	r6,12(sp)
 2003898:	d9c00215 	stw	r7,8(sp)
 200389c:	da400115 	stw	r9,4(sp)
 20038a0:	2004a080 	call	2004a08 <__udivsi3>
 20038a4:	a00b883a 	mov	r5,r20
 20038a8:	9009883a 	mov	r4,r18
 20038ac:	d8800015 	stw	r2,0(sp)
 20038b0:	2004a6c0 	call	2004a6c <__umodsi3>
 20038b4:	d9c00217 	ldw	r7,8(sp)
 20038b8:	da000017 	ldw	r8,0(sp)
 20038bc:	1006943a 	slli	r3,r2,16
 20038c0:	3804d43a 	srli	r2,r7,16
 20038c4:	ba21383a 	mul	r16,r23,r8
 20038c8:	d9800317 	ldw	r6,12(sp)
 20038cc:	10c4b03a 	or	r2,r2,r3
 20038d0:	da400117 	ldw	r9,4(sp)
 20038d4:	1400062e 	bgeu	r2,r16,20038f0 <__divdf3+0x4cc>
 20038d8:	1705883a 	add	r2,r2,fp
 20038dc:	40ffffc4 	addi	r3,r8,-1
 20038e0:	1700ad36 	bltu	r2,fp,2003b98 <__divdf3+0x774>
 20038e4:	1400ac2e 	bgeu	r2,r16,2003b98 <__divdf3+0x774>
 20038e8:	423fff84 	addi	r8,r8,-2
 20038ec:	1705883a 	add	r2,r2,fp
 20038f0:	1421c83a 	sub	r16,r2,r16
 20038f4:	a00b883a 	mov	r5,r20
 20038f8:	8009883a 	mov	r4,r16
 20038fc:	d9800315 	stw	r6,12(sp)
 2003900:	d9c00215 	stw	r7,8(sp)
 2003904:	da000015 	stw	r8,0(sp)
 2003908:	da400115 	stw	r9,4(sp)
 200390c:	2004a080 	call	2004a08 <__udivsi3>
 2003910:	8009883a 	mov	r4,r16
 2003914:	a00b883a 	mov	r5,r20
 2003918:	1025883a 	mov	r18,r2
 200391c:	2004a6c0 	call	2004a6c <__umodsi3>
 2003920:	d9c00217 	ldw	r7,8(sp)
 2003924:	1004943a 	slli	r2,r2,16
 2003928:	bcaf383a 	mul	r23,r23,r18
 200392c:	393fffcc 	andi	r4,r7,65535
 2003930:	2088b03a 	or	r4,r4,r2
 2003934:	d9800317 	ldw	r6,12(sp)
 2003938:	da000017 	ldw	r8,0(sp)
 200393c:	da400117 	ldw	r9,4(sp)
 2003940:	25c0062e 	bgeu	r4,r23,200395c <__divdf3+0x538>
 2003944:	2709883a 	add	r4,r4,fp
 2003948:	90bfffc4 	addi	r2,r18,-1
 200394c:	27009436 	bltu	r4,fp,2003ba0 <__divdf3+0x77c>
 2003950:	25c0932e 	bgeu	r4,r23,2003ba0 <__divdf3+0x77c>
 2003954:	94bfff84 	addi	r18,r18,-2
 2003958:	2709883a 	add	r4,r4,fp
 200395c:	4004943a 	slli	r2,r8,16
 2003960:	25efc83a 	sub	r23,r4,r23
 2003964:	1490b03a 	or	r8,r2,r18
 2003968:	4008d43a 	srli	r4,r8,16
 200396c:	40ffffcc 	andi	r3,r8,65535
 2003970:	30c5383a 	mul	r2,r6,r3
 2003974:	1a47383a 	mul	r3,r3,r9
 2003978:	310d383a 	mul	r6,r6,r4
 200397c:	100ad43a 	srli	r5,r2,16
 2003980:	4913383a 	mul	r9,r9,r4
 2003984:	1987883a 	add	r3,r3,r6
 2003988:	28c7883a 	add	r3,r5,r3
 200398c:	1980022e 	bgeu	r3,r6,2003998 <__divdf3+0x574>
 2003990:	01000074 	movhi	r4,1
 2003994:	4913883a 	add	r9,r9,r4
 2003998:	1808d43a 	srli	r4,r3,16
 200399c:	1806943a 	slli	r3,r3,16
 20039a0:	10bfffcc 	andi	r2,r2,65535
 20039a4:	2253883a 	add	r9,r4,r9
 20039a8:	1887883a 	add	r3,r3,r2
 20039ac:	ba403836 	bltu	r23,r9,2003a90 <__divdf3+0x66c>
 20039b0:	ba403626 	beq	r23,r9,2003a8c <__divdf3+0x668>
 20039b4:	42000054 	ori	r8,r8,1
 20039b8:	a880ffc4 	addi	r2,r21,1023
 20039bc:	00bf570e 	bge	zero,r2,200371c <__divdf3+0x2f8>
 20039c0:	40c001cc 	andi	r3,r8,7
 20039c4:	18000726 	beq	r3,zero,20039e4 <__divdf3+0x5c0>
 20039c8:	40c003cc 	andi	r3,r8,15
 20039cc:	01000104 	movi	r4,4
 20039d0:	19000426 	beq	r3,r4,20039e4 <__divdf3+0x5c0>
 20039d4:	4107883a 	add	r3,r8,r4
 20039d8:	1a11803a 	cmpltu	r8,r3,r8
 20039dc:	8a23883a 	add	r17,r17,r8
 20039e0:	1811883a 	mov	r8,r3
 20039e4:	88c0402c 	andhi	r3,r17,256
 20039e8:	18000426 	beq	r3,zero,20039fc <__divdf3+0x5d8>
 20039ec:	00ffc034 	movhi	r3,65280
 20039f0:	18ffffc4 	addi	r3,r3,-1
 20039f4:	a8810004 	addi	r2,r21,1024
 20039f8:	88e2703a 	and	r17,r17,r3
 20039fc:	00c1ff84 	movi	r3,2046
 2003a00:	18bee316 	blt	r3,r2,2003590 <__divdf3+0x16c>
 2003a04:	8824977a 	slli	r18,r17,29
 2003a08:	4010d0fa 	srli	r8,r8,3
 2003a0c:	8822927a 	slli	r17,r17,9
 2003a10:	1081ffcc 	andi	r2,r2,2047
 2003a14:	9224b03a 	or	r18,r18,r8
 2003a18:	880ad33a 	srli	r5,r17,12
 2003a1c:	98c0004c 	andi	r3,r19,1
 2003a20:	003edf06 	br	20035a0 <__divdf3+0x17c>
 2003a24:	8080022c 	andhi	r2,r16,8
 2003a28:	10001226 	beq	r2,zero,2003a74 <__divdf3+0x650>
 2003a2c:	8880022c 	andhi	r2,r17,8
 2003a30:	1000101e 	bne	r2,zero,2003a74 <__divdf3+0x650>
 2003a34:	00800434 	movhi	r2,16
 2003a38:	89400234 	orhi	r5,r17,8
 2003a3c:	10bfffc4 	addi	r2,r2,-1
 2003a40:	b007883a 	mov	r3,r22
 2003a44:	288a703a 	and	r5,r5,r2
 2003a48:	4025883a 	mov	r18,r8
 2003a4c:	003f3106 	br	2003714 <__divdf3+0x2f0>
 2003a50:	008000c4 	movi	r2,3
 2003a54:	3880a626 	beq	r7,r2,2003cf0 <__divdf3+0x8cc>
 2003a58:	00800044 	movi	r2,1
 2003a5c:	3880521e 	bne	r7,r2,2003ba8 <__divdf3+0x784>
 2003a60:	b807883a 	mov	r3,r23
 2003a64:	0005883a 	mov	r2,zero
 2003a68:	000b883a 	mov	r5,zero
 2003a6c:	0025883a 	mov	r18,zero
 2003a70:	003ecb06 	br	20035a0 <__divdf3+0x17c>
 2003a74:	00800434 	movhi	r2,16
 2003a78:	81400234 	orhi	r5,r16,8
 2003a7c:	10bfffc4 	addi	r2,r2,-1
 2003a80:	a007883a 	mov	r3,r20
 2003a84:	288a703a 	and	r5,r5,r2
 2003a88:	003f2206 	br	2003714 <__divdf3+0x2f0>
 2003a8c:	183fca26 	beq	r3,zero,20039b8 <__divdf3+0x594>
 2003a90:	e5ef883a 	add	r23,fp,r23
 2003a94:	40bfffc4 	addi	r2,r8,-1
 2003a98:	bf00392e 	bgeu	r23,fp,2003b80 <__divdf3+0x75c>
 2003a9c:	1011883a 	mov	r8,r2
 2003aa0:	ba7fc41e 	bne	r23,r9,20039b4 <__divdf3+0x590>
 2003aa4:	b0ffc31e 	bne	r22,r3,20039b4 <__divdf3+0x590>
 2003aa8:	003fc306 	br	20039b8 <__divdf3+0x594>
 2003aac:	143ff604 	addi	r16,r2,-40
 2003ab0:	9c20983a 	sll	r16,r19,r16
 2003ab4:	0025883a 	mov	r18,zero
 2003ab8:	003ee206 	br	2003644 <__divdf3+0x220>
 2003abc:	d9800315 	stw	r6,12(sp)
 2003ac0:	d9c00215 	stw	r7,8(sp)
 2003ac4:	20048ac0 	call	20048ac <__clzsi2>
 2003ac8:	10800804 	addi	r2,r2,32
 2003acc:	d9c00217 	ldw	r7,8(sp)
 2003ad0:	d9800317 	ldw	r6,12(sp)
 2003ad4:	003ed106 	br	200361c <__divdf3+0x1f8>
 2003ad8:	147ff604 	addi	r17,r2,-40
 2003adc:	3462983a 	sll	r17,r6,r17
 2003ae0:	0011883a 	mov	r8,zero
 2003ae4:	003ef506 	br	20036bc <__divdf3+0x298>
 2003ae8:	3009883a 	mov	r4,r6
 2003aec:	d9800315 	stw	r6,12(sp)
 2003af0:	da400115 	stw	r9,4(sp)
 2003af4:	20048ac0 	call	20048ac <__clzsi2>
 2003af8:	10800804 	addi	r2,r2,32
 2003afc:	da400117 	ldw	r9,4(sp)
 2003b00:	d9800317 	ldw	r6,12(sp)
 2003b04:	003ee306 	br	2003694 <__divdf3+0x270>
 2003b08:	85a1883a 	add	r16,r16,r22
 2003b0c:	8585803a 	cmpltu	r2,r16,r22
 2003b10:	1705883a 	add	r2,r2,fp
 2003b14:	14a5883a 	add	r18,r2,r18
 2003b18:	88bfffc4 	addi	r2,r17,-1
 2003b1c:	e4800c2e 	bgeu	fp,r18,2003b50 <__divdf3+0x72c>
 2003b20:	90c03e36 	bltu	r18,r3,2003c1c <__divdf3+0x7f8>
 2003b24:	1c806926 	beq	r3,r18,2003ccc <__divdf3+0x8a8>
 2003b28:	90c7c83a 	sub	r3,r18,r3
 2003b2c:	1023883a 	mov	r17,r2
 2003b30:	003f5206 	br	200387c <__divdf3+0x458>
 2003b34:	923f0436 	bltu	r18,r8,2003748 <__divdf3+0x324>
 2003b38:	800897fa 	slli	r4,r16,31
 2003b3c:	9004d07a 	srli	r2,r18,1
 2003b40:	8006d07a 	srli	r3,r16,1
 2003b44:	902097fa 	slli	r16,r18,31
 2003b48:	20a4b03a 	or	r18,r4,r2
 2003b4c:	003f0106 	br	2003754 <__divdf3+0x330>
 2003b50:	e4bff51e 	bne	fp,r18,2003b28 <__divdf3+0x704>
 2003b54:	85bff22e 	bgeu	r16,r22,2003b20 <__divdf3+0x6fc>
 2003b58:	e0c7c83a 	sub	r3,fp,r3
 2003b5c:	1023883a 	mov	r17,r2
 2003b60:	003f4606 	br	200387c <__divdf3+0x458>
 2003b64:	100f883a 	mov	r7,r2
 2003b68:	003f2b06 	br	2003818 <__divdf3+0x3f4>
 2003b6c:	180d883a 	mov	r6,r3
 2003b70:	003f1306 	br	20037c0 <__divdf3+0x39c>
 2003b74:	813fe436 	bltu	r16,r4,2003b08 <__divdf3+0x6e4>
 2003b78:	0007883a 	mov	r3,zero
 2003b7c:	003f3f06 	br	200387c <__divdf3+0x458>
 2003b80:	ba402c36 	bltu	r23,r9,2003c34 <__divdf3+0x810>
 2003b84:	4dc05426 	beq	r9,r23,2003cd8 <__divdf3+0x8b4>
 2003b88:	1011883a 	mov	r8,r2
 2003b8c:	003f8906 	br	20039b4 <__divdf3+0x590>
 2003b90:	023fffc4 	movi	r8,-1
 2003b94:	003f8806 	br	20039b8 <__divdf3+0x594>
 2003b98:	1811883a 	mov	r8,r3
 2003b9c:	003f5406 	br	20038f0 <__divdf3+0x4cc>
 2003ba0:	1025883a 	mov	r18,r2
 2003ba4:	003f6d06 	br	200395c <__divdf3+0x538>
 2003ba8:	b827883a 	mov	r19,r23
 2003bac:	003f8206 	br	20039b8 <__divdf3+0x594>
 2003bb0:	010007c4 	movi	r4,31
 2003bb4:	20c02616 	blt	r4,r3,2003c50 <__divdf3+0x82c>
 2003bb8:	00800804 	movi	r2,32
 2003bbc:	10c5c83a 	sub	r2,r2,r3
 2003bc0:	888a983a 	sll	r5,r17,r2
 2003bc4:	40c8d83a 	srl	r4,r8,r3
 2003bc8:	4084983a 	sll	r2,r8,r2
 2003bcc:	88e2d83a 	srl	r17,r17,r3
 2003bd0:	2906b03a 	or	r3,r5,r4
 2003bd4:	1004c03a 	cmpne	r2,r2,zero
 2003bd8:	1886b03a 	or	r3,r3,r2
 2003bdc:	188001cc 	andi	r2,r3,7
 2003be0:	10000726 	beq	r2,zero,2003c00 <__divdf3+0x7dc>
 2003be4:	188003cc 	andi	r2,r3,15
 2003be8:	01000104 	movi	r4,4
 2003bec:	11000426 	beq	r2,r4,2003c00 <__divdf3+0x7dc>
 2003bf0:	1805883a 	mov	r2,r3
 2003bf4:	10c00104 	addi	r3,r2,4
 2003bf8:	1885803a 	cmpltu	r2,r3,r2
 2003bfc:	88a3883a 	add	r17,r17,r2
 2003c00:	8880202c 	andhi	r2,r17,128
 2003c04:	10002726 	beq	r2,zero,2003ca4 <__divdf3+0x880>
 2003c08:	98c0004c 	andi	r3,r19,1
 2003c0c:	00800044 	movi	r2,1
 2003c10:	000b883a 	mov	r5,zero
 2003c14:	0025883a 	mov	r18,zero
 2003c18:	003e6106 	br	20035a0 <__divdf3+0x17c>
 2003c1c:	85a1883a 	add	r16,r16,r22
 2003c20:	8585803a 	cmpltu	r2,r16,r22
 2003c24:	1705883a 	add	r2,r2,fp
 2003c28:	14a5883a 	add	r18,r2,r18
 2003c2c:	8c7fff84 	addi	r17,r17,-2
 2003c30:	003f1106 	br	2003878 <__divdf3+0x454>
 2003c34:	b589883a 	add	r4,r22,r22
 2003c38:	25ad803a 	cmpltu	r22,r4,r22
 2003c3c:	b739883a 	add	fp,r22,fp
 2003c40:	40bfff84 	addi	r2,r8,-2
 2003c44:	bf2f883a 	add	r23,r23,fp
 2003c48:	202d883a 	mov	r22,r4
 2003c4c:	003f9306 	br	2003a9c <__divdf3+0x678>
 2003c50:	013ff844 	movi	r4,-31
 2003c54:	2085c83a 	sub	r2,r4,r2
 2003c58:	8888d83a 	srl	r4,r17,r2
 2003c5c:	00800804 	movi	r2,32
 2003c60:	18802126 	beq	r3,r2,2003ce8 <__divdf3+0x8c4>
 2003c64:	00801004 	movi	r2,64
 2003c68:	10c5c83a 	sub	r2,r2,r3
 2003c6c:	8884983a 	sll	r2,r17,r2
 2003c70:	1204b03a 	or	r2,r2,r8
 2003c74:	1004c03a 	cmpne	r2,r2,zero
 2003c78:	2084b03a 	or	r2,r4,r2
 2003c7c:	144001cc 	andi	r17,r2,7
 2003c80:	88000d1e 	bne	r17,zero,2003cb8 <__divdf3+0x894>
 2003c84:	000b883a 	mov	r5,zero
 2003c88:	1024d0fa 	srli	r18,r2,3
 2003c8c:	98c0004c 	andi	r3,r19,1
 2003c90:	0005883a 	mov	r2,zero
 2003c94:	9464b03a 	or	r18,r18,r17
 2003c98:	003e4106 	br	20035a0 <__divdf3+0x17c>
 2003c9c:	1007883a 	mov	r3,r2
 2003ca0:	0023883a 	mov	r17,zero
 2003ca4:	880a927a 	slli	r5,r17,9
 2003ca8:	1805883a 	mov	r2,r3
 2003cac:	8822977a 	slli	r17,r17,29
 2003cb0:	280ad33a 	srli	r5,r5,12
 2003cb4:	003ff406 	br	2003c88 <__divdf3+0x864>
 2003cb8:	10c003cc 	andi	r3,r2,15
 2003cbc:	01000104 	movi	r4,4
 2003cc0:	193ff626 	beq	r3,r4,2003c9c <__divdf3+0x878>
 2003cc4:	0023883a 	mov	r17,zero
 2003cc8:	003fca06 	br	2003bf4 <__divdf3+0x7d0>
 2003ccc:	813fd336 	bltu	r16,r4,2003c1c <__divdf3+0x7f8>
 2003cd0:	1023883a 	mov	r17,r2
 2003cd4:	003fa806 	br	2003b78 <__divdf3+0x754>
 2003cd8:	b0ffd636 	bltu	r22,r3,2003c34 <__divdf3+0x810>
 2003cdc:	1011883a 	mov	r8,r2
 2003ce0:	b0ff341e 	bne	r22,r3,20039b4 <__divdf3+0x590>
 2003ce4:	003f3406 	br	20039b8 <__divdf3+0x594>
 2003ce8:	0005883a 	mov	r2,zero
 2003cec:	003fe006 	br	2003c70 <__divdf3+0x84c>
 2003cf0:	00800434 	movhi	r2,16
 2003cf4:	89400234 	orhi	r5,r17,8
 2003cf8:	10bfffc4 	addi	r2,r2,-1
 2003cfc:	b807883a 	mov	r3,r23
 2003d00:	288a703a 	and	r5,r5,r2
 2003d04:	4025883a 	mov	r18,r8
 2003d08:	003e8206 	br	2003714 <__divdf3+0x2f0>

02003d0c <__gedf2>:
 2003d0c:	2804d53a 	srli	r2,r5,20
 2003d10:	3806d53a 	srli	r3,r7,20
 2003d14:	02000434 	movhi	r8,16
 2003d18:	423fffc4 	addi	r8,r8,-1
 2003d1c:	1081ffcc 	andi	r2,r2,2047
 2003d20:	0241ffc4 	movi	r9,2047
 2003d24:	2a14703a 	and	r10,r5,r8
 2003d28:	18c1ffcc 	andi	r3,r3,2047
 2003d2c:	3a10703a 	and	r8,r7,r8
 2003d30:	280ad7fa 	srli	r5,r5,31
 2003d34:	380ed7fa 	srli	r7,r7,31
 2003d38:	12401d26 	beq	r2,r9,2003db0 <__gedf2+0xa4>
 2003d3c:	0241ffc4 	movi	r9,2047
 2003d40:	1a401226 	beq	r3,r9,2003d8c <__gedf2+0x80>
 2003d44:	1000081e 	bne	r2,zero,2003d68 <__gedf2+0x5c>
 2003d48:	2296b03a 	or	r11,r4,r10
 2003d4c:	5813003a 	cmpeq	r9,r11,zero
 2003d50:	1800091e 	bne	r3,zero,2003d78 <__gedf2+0x6c>
 2003d54:	3218b03a 	or	r12,r6,r8
 2003d58:	6000071e 	bne	r12,zero,2003d78 <__gedf2+0x6c>
 2003d5c:	0005883a 	mov	r2,zero
 2003d60:	5800101e 	bne	r11,zero,2003da4 <__gedf2+0x98>
 2003d64:	f800283a 	ret
 2003d68:	18000c1e 	bne	r3,zero,2003d9c <__gedf2+0x90>
 2003d6c:	3212b03a 	or	r9,r6,r8
 2003d70:	48000c26 	beq	r9,zero,2003da4 <__gedf2+0x98>
 2003d74:	0013883a 	mov	r9,zero
 2003d78:	39c03fcc 	andi	r7,r7,255
 2003d7c:	48000826 	beq	r9,zero,2003da0 <__gedf2+0x94>
 2003d80:	38000926 	beq	r7,zero,2003da8 <__gedf2+0x9c>
 2003d84:	00800044 	movi	r2,1
 2003d88:	f800283a 	ret
 2003d8c:	3212b03a 	or	r9,r6,r8
 2003d90:	483fec26 	beq	r9,zero,2003d44 <__gedf2+0x38>
 2003d94:	00bfff84 	movi	r2,-2
 2003d98:	f800283a 	ret
 2003d9c:	39c03fcc 	andi	r7,r7,255
 2003da0:	29c00626 	beq	r5,r7,2003dbc <__gedf2+0xb0>
 2003da4:	283ff726 	beq	r5,zero,2003d84 <__gedf2+0x78>
 2003da8:	00bfffc4 	movi	r2,-1
 2003dac:	f800283a 	ret
 2003db0:	2292b03a 	or	r9,r4,r10
 2003db4:	483fe126 	beq	r9,zero,2003d3c <__gedf2+0x30>
 2003db8:	003ff606 	br	2003d94 <__gedf2+0x88>
 2003dbc:	18bff916 	blt	r3,r2,2003da4 <__gedf2+0x98>
 2003dc0:	10c00316 	blt	r2,r3,2003dd0 <__gedf2+0xc4>
 2003dc4:	42bff736 	bltu	r8,r10,2003da4 <__gedf2+0x98>
 2003dc8:	52000326 	beq	r10,r8,2003dd8 <__gedf2+0xcc>
 2003dcc:	5200042e 	bgeu	r10,r8,2003de0 <__gedf2+0xd4>
 2003dd0:	283fec1e 	bne	r5,zero,2003d84 <__gedf2+0x78>
 2003dd4:	003ff406 	br	2003da8 <__gedf2+0x9c>
 2003dd8:	313ff236 	bltu	r6,r4,2003da4 <__gedf2+0x98>
 2003ddc:	21bffc36 	bltu	r4,r6,2003dd0 <__gedf2+0xc4>
 2003de0:	0005883a 	mov	r2,zero
 2003de4:	f800283a 	ret

02003de8 <__ledf2>:
 2003de8:	2804d53a 	srli	r2,r5,20
 2003dec:	3810d53a 	srli	r8,r7,20
 2003df0:	00c00434 	movhi	r3,16
 2003df4:	18ffffc4 	addi	r3,r3,-1
 2003df8:	1081ffcc 	andi	r2,r2,2047
 2003dfc:	0241ffc4 	movi	r9,2047
 2003e00:	28d4703a 	and	r10,r5,r3
 2003e04:	4201ffcc 	andi	r8,r8,2047
 2003e08:	38c6703a 	and	r3,r7,r3
 2003e0c:	280ad7fa 	srli	r5,r5,31
 2003e10:	380ed7fa 	srli	r7,r7,31
 2003e14:	12401f26 	beq	r2,r9,2003e94 <__ledf2+0xac>
 2003e18:	0241ffc4 	movi	r9,2047
 2003e1c:	42401426 	beq	r8,r9,2003e70 <__ledf2+0x88>
 2003e20:	1000091e 	bne	r2,zero,2003e48 <__ledf2+0x60>
 2003e24:	2296b03a 	or	r11,r4,r10
 2003e28:	5813003a 	cmpeq	r9,r11,zero
 2003e2c:	29403fcc 	andi	r5,r5,255
 2003e30:	40000a1e 	bne	r8,zero,2003e5c <__ledf2+0x74>
 2003e34:	30d8b03a 	or	r12,r6,r3
 2003e38:	6000081e 	bne	r12,zero,2003e5c <__ledf2+0x74>
 2003e3c:	0005883a 	mov	r2,zero
 2003e40:	5800111e 	bne	r11,zero,2003e88 <__ledf2+0xa0>
 2003e44:	f800283a 	ret
 2003e48:	29403fcc 	andi	r5,r5,255
 2003e4c:	40000c1e 	bne	r8,zero,2003e80 <__ledf2+0x98>
 2003e50:	30d2b03a 	or	r9,r6,r3
 2003e54:	48000c26 	beq	r9,zero,2003e88 <__ledf2+0xa0>
 2003e58:	0013883a 	mov	r9,zero
 2003e5c:	39c03fcc 	andi	r7,r7,255
 2003e60:	48000826 	beq	r9,zero,2003e84 <__ledf2+0x9c>
 2003e64:	38001126 	beq	r7,zero,2003eac <__ledf2+0xc4>
 2003e68:	00800044 	movi	r2,1
 2003e6c:	f800283a 	ret
 2003e70:	30d2b03a 	or	r9,r6,r3
 2003e74:	483fea26 	beq	r9,zero,2003e20 <__ledf2+0x38>
 2003e78:	00800084 	movi	r2,2
 2003e7c:	f800283a 	ret
 2003e80:	39c03fcc 	andi	r7,r7,255
 2003e84:	39400726 	beq	r7,r5,2003ea4 <__ledf2+0xbc>
 2003e88:	2800081e 	bne	r5,zero,2003eac <__ledf2+0xc4>
 2003e8c:	00800044 	movi	r2,1
 2003e90:	f800283a 	ret
 2003e94:	2292b03a 	or	r9,r4,r10
 2003e98:	483fdf26 	beq	r9,zero,2003e18 <__ledf2+0x30>
 2003e9c:	00800084 	movi	r2,2
 2003ea0:	f800283a 	ret
 2003ea4:	4080030e 	bge	r8,r2,2003eb4 <__ledf2+0xcc>
 2003ea8:	383fef26 	beq	r7,zero,2003e68 <__ledf2+0x80>
 2003eac:	00bfffc4 	movi	r2,-1
 2003eb0:	f800283a 	ret
 2003eb4:	123feb16 	blt	r2,r8,2003e64 <__ledf2+0x7c>
 2003eb8:	1abff336 	bltu	r3,r10,2003e88 <__ledf2+0xa0>
 2003ebc:	50c00326 	beq	r10,r3,2003ecc <__ledf2+0xe4>
 2003ec0:	50c0042e 	bgeu	r10,r3,2003ed4 <__ledf2+0xec>
 2003ec4:	283fe81e 	bne	r5,zero,2003e68 <__ledf2+0x80>
 2003ec8:	003ff806 	br	2003eac <__ledf2+0xc4>
 2003ecc:	313fee36 	bltu	r6,r4,2003e88 <__ledf2+0xa0>
 2003ed0:	21bffc36 	bltu	r4,r6,2003ec4 <__ledf2+0xdc>
 2003ed4:	0005883a 	mov	r2,zero
 2003ed8:	f800283a 	ret

02003edc <__muldf3>:
 2003edc:	defff304 	addi	sp,sp,-52
 2003ee0:	2804d53a 	srli	r2,r5,20
 2003ee4:	dd800915 	stw	r22,36(sp)
 2003ee8:	282cd7fa 	srli	r22,r5,31
 2003eec:	dc000315 	stw	r16,12(sp)
 2003ef0:	04000434 	movhi	r16,16
 2003ef4:	dd400815 	stw	r21,32(sp)
 2003ef8:	dc800515 	stw	r18,20(sp)
 2003efc:	843fffc4 	addi	r16,r16,-1
 2003f00:	dfc00c15 	stw	ra,48(sp)
 2003f04:	df000b15 	stw	fp,44(sp)
 2003f08:	ddc00a15 	stw	r23,40(sp)
 2003f0c:	dd000715 	stw	r20,28(sp)
 2003f10:	dcc00615 	stw	r19,24(sp)
 2003f14:	dc400415 	stw	r17,16(sp)
 2003f18:	1481ffcc 	andi	r18,r2,2047
 2003f1c:	2c20703a 	and	r16,r5,r16
 2003f20:	b02b883a 	mov	r21,r22
 2003f24:	b2403fcc 	andi	r9,r22,255
 2003f28:	90006026 	beq	r18,zero,20040ac <__muldf3+0x1d0>
 2003f2c:	0081ffc4 	movi	r2,2047
 2003f30:	2029883a 	mov	r20,r4
 2003f34:	90803626 	beq	r18,r2,2004010 <__muldf3+0x134>
 2003f38:	80800434 	orhi	r2,r16,16
 2003f3c:	100490fa 	slli	r2,r2,3
 2003f40:	2020d77a 	srli	r16,r4,29
 2003f44:	202890fa 	slli	r20,r4,3
 2003f48:	94bf0044 	addi	r18,r18,-1023
 2003f4c:	80a0b03a 	or	r16,r16,r2
 2003f50:	0027883a 	mov	r19,zero
 2003f54:	0039883a 	mov	fp,zero
 2003f58:	3804d53a 	srli	r2,r7,20
 2003f5c:	382ed7fa 	srli	r23,r7,31
 2003f60:	04400434 	movhi	r17,16
 2003f64:	8c7fffc4 	addi	r17,r17,-1
 2003f68:	1081ffcc 	andi	r2,r2,2047
 2003f6c:	3011883a 	mov	r8,r6
 2003f70:	3c62703a 	and	r17,r7,r17
 2003f74:	ba803fcc 	andi	r10,r23,255
 2003f78:	10006d26 	beq	r2,zero,2004130 <__muldf3+0x254>
 2003f7c:	00c1ffc4 	movi	r3,2047
 2003f80:	10c06526 	beq	r2,r3,2004118 <__muldf3+0x23c>
 2003f84:	88c00434 	orhi	r3,r17,16
 2003f88:	180690fa 	slli	r3,r3,3
 2003f8c:	3022d77a 	srli	r17,r6,29
 2003f90:	301090fa 	slli	r8,r6,3
 2003f94:	10bf0044 	addi	r2,r2,-1023
 2003f98:	88e2b03a 	or	r17,r17,r3
 2003f9c:	000b883a 	mov	r5,zero
 2003fa0:	9085883a 	add	r2,r18,r2
 2003fa4:	2cc8b03a 	or	r4,r5,r19
 2003fa8:	00c003c4 	movi	r3,15
 2003fac:	bdacf03a 	xor	r22,r23,r22
 2003fb0:	12c00044 	addi	r11,r2,1
 2003fb4:	19009936 	bltu	r3,r4,200421c <__muldf3+0x340>
 2003fb8:	200890ba 	slli	r4,r4,2
 2003fbc:	00c08034 	movhi	r3,512
 2003fc0:	18cff404 	addi	r3,r3,16336
 2003fc4:	20c9883a 	add	r4,r4,r3
 2003fc8:	20c00017 	ldw	r3,0(r4)
 2003fcc:	1800683a 	jmp	r3
 2003fd0:	0200421c 	xori	r8,zero,264
 2003fd4:	02004030 	cmpltui	r8,zero,256
 2003fd8:	02004030 	cmpltui	r8,zero,256
 2003fdc:	0200402c 	andhi	r8,zero,256
 2003fe0:	020041f8 	rdprs	r8,zero,263
 2003fe4:	020041f8 	rdprs	r8,zero,263
 2003fe8:	020041e0 	cmpeqi	r8,zero,263
 2003fec:	0200402c 	andhi	r8,zero,256
 2003ff0:	020041f8 	rdprs	r8,zero,263
 2003ff4:	020041e0 	cmpeqi	r8,zero,263
 2003ff8:	020041f8 	rdprs	r8,zero,263
 2003ffc:	0200402c 	andhi	r8,zero,256
 2004000:	02004208 	cmpgei	r8,zero,264
 2004004:	02004208 	cmpgei	r8,zero,264
 2004008:	02004208 	cmpgei	r8,zero,264
 200400c:	02004424 	muli	r8,zero,272
 2004010:	2404b03a 	or	r2,r4,r16
 2004014:	10006f1e 	bne	r2,zero,20041d4 <__muldf3+0x2f8>
 2004018:	04c00204 	movi	r19,8
 200401c:	0021883a 	mov	r16,zero
 2004020:	0029883a 	mov	r20,zero
 2004024:	07000084 	movi	fp,2
 2004028:	003fcb06 	br	2003f58 <__muldf3+0x7c>
 200402c:	502d883a 	mov	r22,r10
 2004030:	00800084 	movi	r2,2
 2004034:	28805726 	beq	r5,r2,2004194 <__muldf3+0x2b8>
 2004038:	008000c4 	movi	r2,3
 200403c:	28816626 	beq	r5,r2,20045d8 <__muldf3+0x6fc>
 2004040:	00800044 	movi	r2,1
 2004044:	2881411e 	bne	r5,r2,200454c <__muldf3+0x670>
 2004048:	b02b883a 	mov	r21,r22
 200404c:	0005883a 	mov	r2,zero
 2004050:	000b883a 	mov	r5,zero
 2004054:	0029883a 	mov	r20,zero
 2004058:	1004953a 	slli	r2,r2,20
 200405c:	a8c03fcc 	andi	r3,r21,255
 2004060:	04400434 	movhi	r17,16
 2004064:	8c7fffc4 	addi	r17,r17,-1
 2004068:	180697fa 	slli	r3,r3,31
 200406c:	2c4a703a 	and	r5,r5,r17
 2004070:	288ab03a 	or	r5,r5,r2
 2004074:	28c6b03a 	or	r3,r5,r3
 2004078:	a005883a 	mov	r2,r20
 200407c:	dfc00c17 	ldw	ra,48(sp)
 2004080:	df000b17 	ldw	fp,44(sp)
 2004084:	ddc00a17 	ldw	r23,40(sp)
 2004088:	dd800917 	ldw	r22,36(sp)
 200408c:	dd400817 	ldw	r21,32(sp)
 2004090:	dd000717 	ldw	r20,28(sp)
 2004094:	dcc00617 	ldw	r19,24(sp)
 2004098:	dc800517 	ldw	r18,20(sp)
 200409c:	dc400417 	ldw	r17,16(sp)
 20040a0:	dc000317 	ldw	r16,12(sp)
 20040a4:	dec00d04 	addi	sp,sp,52
 20040a8:	f800283a 	ret
 20040ac:	2404b03a 	or	r2,r4,r16
 20040b0:	2027883a 	mov	r19,r4
 20040b4:	10004226 	beq	r2,zero,20041c0 <__muldf3+0x2e4>
 20040b8:	8000fc26 	beq	r16,zero,20044ac <__muldf3+0x5d0>
 20040bc:	8009883a 	mov	r4,r16
 20040c0:	d9800215 	stw	r6,8(sp)
 20040c4:	d9c00015 	stw	r7,0(sp)
 20040c8:	da400115 	stw	r9,4(sp)
 20040cc:	20048ac0 	call	20048ac <__clzsi2>
 20040d0:	d9800217 	ldw	r6,8(sp)
 20040d4:	d9c00017 	ldw	r7,0(sp)
 20040d8:	da400117 	ldw	r9,4(sp)
 20040dc:	113ffd44 	addi	r4,r2,-11
 20040e0:	00c00704 	movi	r3,28
 20040e4:	1900ed16 	blt	r3,r4,200449c <__muldf3+0x5c0>
 20040e8:	00c00744 	movi	r3,29
 20040ec:	147ffe04 	addi	r17,r2,-8
 20040f0:	1907c83a 	sub	r3,r3,r4
 20040f4:	8460983a 	sll	r16,r16,r17
 20040f8:	98c6d83a 	srl	r3,r19,r3
 20040fc:	9c68983a 	sll	r20,r19,r17
 2004100:	1c20b03a 	or	r16,r3,r16
 2004104:	1080fcc4 	addi	r2,r2,1011
 2004108:	00a5c83a 	sub	r18,zero,r2
 200410c:	0027883a 	mov	r19,zero
 2004110:	0039883a 	mov	fp,zero
 2004114:	003f9006 	br	2003f58 <__muldf3+0x7c>
 2004118:	3446b03a 	or	r3,r6,r17
 200411c:	1800261e 	bne	r3,zero,20041b8 <__muldf3+0x2dc>
 2004120:	0023883a 	mov	r17,zero
 2004124:	0011883a 	mov	r8,zero
 2004128:	01400084 	movi	r5,2
 200412c:	003f9c06 	br	2003fa0 <__muldf3+0xc4>
 2004130:	3446b03a 	or	r3,r6,r17
 2004134:	18001c26 	beq	r3,zero,20041a8 <__muldf3+0x2cc>
 2004138:	8800ce26 	beq	r17,zero,2004474 <__muldf3+0x598>
 200413c:	8809883a 	mov	r4,r17
 2004140:	d9800215 	stw	r6,8(sp)
 2004144:	da400115 	stw	r9,4(sp)
 2004148:	da800015 	stw	r10,0(sp)
 200414c:	20048ac0 	call	20048ac <__clzsi2>
 2004150:	d9800217 	ldw	r6,8(sp)
 2004154:	da400117 	ldw	r9,4(sp)
 2004158:	da800017 	ldw	r10,0(sp)
 200415c:	113ffd44 	addi	r4,r2,-11
 2004160:	00c00704 	movi	r3,28
 2004164:	1900bf16 	blt	r3,r4,2004464 <__muldf3+0x588>
 2004168:	00c00744 	movi	r3,29
 200416c:	123ffe04 	addi	r8,r2,-8
 2004170:	1907c83a 	sub	r3,r3,r4
 2004174:	8a22983a 	sll	r17,r17,r8
 2004178:	30c6d83a 	srl	r3,r6,r3
 200417c:	3210983a 	sll	r8,r6,r8
 2004180:	1c62b03a 	or	r17,r3,r17
 2004184:	1080fcc4 	addi	r2,r2,1011
 2004188:	0085c83a 	sub	r2,zero,r2
 200418c:	000b883a 	mov	r5,zero
 2004190:	003f8306 	br	2003fa0 <__muldf3+0xc4>
 2004194:	b02b883a 	mov	r21,r22
 2004198:	0081ffc4 	movi	r2,2047
 200419c:	000b883a 	mov	r5,zero
 20041a0:	0029883a 	mov	r20,zero
 20041a4:	003fac06 	br	2004058 <__muldf3+0x17c>
 20041a8:	0023883a 	mov	r17,zero
 20041ac:	0011883a 	mov	r8,zero
 20041b0:	01400044 	movi	r5,1
 20041b4:	003f7a06 	br	2003fa0 <__muldf3+0xc4>
 20041b8:	014000c4 	movi	r5,3
 20041bc:	003f7806 	br	2003fa0 <__muldf3+0xc4>
 20041c0:	04c00104 	movi	r19,4
 20041c4:	0021883a 	mov	r16,zero
 20041c8:	0029883a 	mov	r20,zero
 20041cc:	07000044 	movi	fp,1
 20041d0:	003f6106 	br	2003f58 <__muldf3+0x7c>
 20041d4:	04c00304 	movi	r19,12
 20041d8:	070000c4 	movi	fp,3
 20041dc:	003f5e06 	br	2003f58 <__muldf3+0x7c>
 20041e0:	01400434 	movhi	r5,16
 20041e4:	002b883a 	mov	r21,zero
 20041e8:	297fffc4 	addi	r5,r5,-1
 20041ec:	053fffc4 	movi	r20,-1
 20041f0:	0081ffc4 	movi	r2,2047
 20041f4:	003f9806 	br	2004058 <__muldf3+0x17c>
 20041f8:	8023883a 	mov	r17,r16
 20041fc:	a011883a 	mov	r8,r20
 2004200:	e00b883a 	mov	r5,fp
 2004204:	003f8a06 	br	2004030 <__muldf3+0x154>
 2004208:	8023883a 	mov	r17,r16
 200420c:	a011883a 	mov	r8,r20
 2004210:	482d883a 	mov	r22,r9
 2004214:	e00b883a 	mov	r5,fp
 2004218:	003f8506 	br	2004030 <__muldf3+0x154>
 200421c:	a00ad43a 	srli	r5,r20,16
 2004220:	401ad43a 	srli	r13,r8,16
 2004224:	a53fffcc 	andi	r20,r20,65535
 2004228:	423fffcc 	andi	r8,r8,65535
 200422c:	4519383a 	mul	r12,r8,r20
 2004230:	4147383a 	mul	r3,r8,r5
 2004234:	6d09383a 	mul	r4,r13,r20
 2004238:	600cd43a 	srli	r6,r12,16
 200423c:	2b5d383a 	mul	r14,r5,r13
 2004240:	20c9883a 	add	r4,r4,r3
 2004244:	310d883a 	add	r6,r6,r4
 2004248:	30c0022e 	bgeu	r6,r3,2004254 <__muldf3+0x378>
 200424c:	00c00074 	movhi	r3,1
 2004250:	70dd883a 	add	r14,r14,r3
 2004254:	8826d43a 	srli	r19,r17,16
 2004258:	8bffffcc 	andi	r15,r17,65535
 200425c:	7d23383a 	mul	r17,r15,r20
 2004260:	7949383a 	mul	r4,r15,r5
 2004264:	9d29383a 	mul	r20,r19,r20
 2004268:	8814d43a 	srli	r10,r17,16
 200426c:	3012943a 	slli	r9,r6,16
 2004270:	a129883a 	add	r20,r20,r4
 2004274:	633fffcc 	andi	r12,r12,65535
 2004278:	5515883a 	add	r10,r10,r20
 200427c:	3006d43a 	srli	r3,r6,16
 2004280:	4b13883a 	add	r9,r9,r12
 2004284:	2ccb383a 	mul	r5,r5,r19
 2004288:	5100022e 	bgeu	r10,r4,2004294 <__muldf3+0x3b8>
 200428c:	01000074 	movhi	r4,1
 2004290:	290b883a 	add	r5,r5,r4
 2004294:	802ad43a 	srli	r21,r16,16
 2004298:	843fffcc 	andi	r16,r16,65535
 200429c:	440d383a 	mul	r6,r8,r16
 20042a0:	4565383a 	mul	r18,r8,r21
 20042a4:	8349383a 	mul	r4,r16,r13
 20042a8:	500e943a 	slli	r7,r10,16
 20042ac:	3010d43a 	srli	r8,r6,16
 20042b0:	5028d43a 	srli	r20,r10,16
 20042b4:	2489883a 	add	r4,r4,r18
 20042b8:	8abfffcc 	andi	r10,r17,65535
 20042bc:	3a95883a 	add	r10,r7,r10
 20042c0:	4119883a 	add	r12,r8,r4
 20042c4:	a169883a 	add	r20,r20,r5
 20042c8:	1a87883a 	add	r3,r3,r10
 20042cc:	6d5b383a 	mul	r13,r13,r21
 20042d0:	6480022e 	bgeu	r12,r18,20042dc <__muldf3+0x400>
 20042d4:	01000074 	movhi	r4,1
 20042d8:	691b883a 	add	r13,r13,r4
 20042dc:	7c25383a 	mul	r18,r15,r16
 20042e0:	7d4b383a 	mul	r5,r15,r21
 20042e4:	84cf383a 	mul	r7,r16,r19
 20042e8:	901ed43a 	srli	r15,r18,16
 20042ec:	6008d43a 	srli	r4,r12,16
 20042f0:	6010943a 	slli	r8,r12,16
 20042f4:	394f883a 	add	r7,r7,r5
 20042f8:	333fffcc 	andi	r12,r6,65535
 20042fc:	79df883a 	add	r15,r15,r7
 2004300:	235b883a 	add	r13,r4,r13
 2004304:	9d63383a 	mul	r17,r19,r21
 2004308:	4309883a 	add	r4,r8,r12
 200430c:	7940022e 	bgeu	r15,r5,2004318 <__muldf3+0x43c>
 2004310:	01400074 	movhi	r5,1
 2004314:	8963883a 	add	r17,r17,r5
 2004318:	780a943a 	slli	r5,r15,16
 200431c:	91bfffcc 	andi	r6,r18,65535
 2004320:	70c7883a 	add	r3,r14,r3
 2004324:	298d883a 	add	r6,r5,r6
 2004328:	1a8f803a 	cmpltu	r7,r3,r10
 200432c:	350b883a 	add	r5,r6,r20
 2004330:	20c7883a 	add	r3,r4,r3
 2004334:	3955883a 	add	r10,r7,r5
 2004338:	1909803a 	cmpltu	r4,r3,r4
 200433c:	6a91883a 	add	r8,r13,r10
 2004340:	780cd43a 	srli	r6,r15,16
 2004344:	2219883a 	add	r12,r4,r8
 2004348:	2d0b803a 	cmpltu	r5,r5,r20
 200434c:	51cf803a 	cmpltu	r7,r10,r7
 2004350:	29ceb03a 	or	r7,r5,r7
 2004354:	4351803a 	cmpltu	r8,r8,r13
 2004358:	610b803a 	cmpltu	r5,r12,r4
 200435c:	4148b03a 	or	r4,r8,r5
 2004360:	398f883a 	add	r7,r7,r6
 2004364:	3909883a 	add	r4,r7,r4
 2004368:	1810927a 	slli	r8,r3,9
 200436c:	2449883a 	add	r4,r4,r17
 2004370:	2008927a 	slli	r4,r4,9
 2004374:	6022d5fa 	srli	r17,r12,23
 2004378:	1806d5fa 	srli	r3,r3,23
 200437c:	4252b03a 	or	r9,r8,r9
 2004380:	600a927a 	slli	r5,r12,9
 2004384:	4810c03a 	cmpne	r8,r9,zero
 2004388:	2462b03a 	or	r17,r4,r17
 200438c:	40c6b03a 	or	r3,r8,r3
 2004390:	8900402c 	andhi	r4,r17,256
 2004394:	1950b03a 	or	r8,r3,r5
 2004398:	20000726 	beq	r4,zero,20043b8 <__muldf3+0x4dc>
 200439c:	4006d07a 	srli	r3,r8,1
 20043a0:	880497fa 	slli	r2,r17,31
 20043a4:	4200004c 	andi	r8,r8,1
 20043a8:	8822d07a 	srli	r17,r17,1
 20043ac:	1a10b03a 	or	r8,r3,r8
 20043b0:	1210b03a 	or	r8,r2,r8
 20043b4:	5805883a 	mov	r2,r11
 20043b8:	1140ffc4 	addi	r5,r2,1023
 20043bc:	0140440e 	bge	zero,r5,20044d0 <__muldf3+0x5f4>
 20043c0:	40c001cc 	andi	r3,r8,7
 20043c4:	18000726 	beq	r3,zero,20043e4 <__muldf3+0x508>
 20043c8:	40c003cc 	andi	r3,r8,15
 20043cc:	01000104 	movi	r4,4
 20043d0:	19000426 	beq	r3,r4,20043e4 <__muldf3+0x508>
 20043d4:	4107883a 	add	r3,r8,r4
 20043d8:	1a11803a 	cmpltu	r8,r3,r8
 20043dc:	8a23883a 	add	r17,r17,r8
 20043e0:	1811883a 	mov	r8,r3
 20043e4:	88c0402c 	andhi	r3,r17,256
 20043e8:	18000426 	beq	r3,zero,20043fc <__muldf3+0x520>
 20043ec:	11410004 	addi	r5,r2,1024
 20043f0:	00bfc034 	movhi	r2,65280
 20043f4:	10bfffc4 	addi	r2,r2,-1
 20043f8:	88a2703a 	and	r17,r17,r2
 20043fc:	0081ff84 	movi	r2,2046
 2004400:	117f6416 	blt	r2,r5,2004194 <__muldf3+0x2b8>
 2004404:	8828977a 	slli	r20,r17,29
 2004408:	4010d0fa 	srli	r8,r8,3
 200440c:	8822927a 	slli	r17,r17,9
 2004410:	2881ffcc 	andi	r2,r5,2047
 2004414:	a228b03a 	or	r20,r20,r8
 2004418:	880ad33a 	srli	r5,r17,12
 200441c:	b02b883a 	mov	r21,r22
 2004420:	003f0d06 	br	2004058 <__muldf3+0x17c>
 2004424:	8080022c 	andhi	r2,r16,8
 2004428:	10000926 	beq	r2,zero,2004450 <__muldf3+0x574>
 200442c:	8880022c 	andhi	r2,r17,8
 2004430:	1000071e 	bne	r2,zero,2004450 <__muldf3+0x574>
 2004434:	00800434 	movhi	r2,16
 2004438:	89400234 	orhi	r5,r17,8
 200443c:	10bfffc4 	addi	r2,r2,-1
 2004440:	b82b883a 	mov	r21,r23
 2004444:	288a703a 	and	r5,r5,r2
 2004448:	4029883a 	mov	r20,r8
 200444c:	003f6806 	br	20041f0 <__muldf3+0x314>
 2004450:	00800434 	movhi	r2,16
 2004454:	81400234 	orhi	r5,r16,8
 2004458:	10bfffc4 	addi	r2,r2,-1
 200445c:	288a703a 	and	r5,r5,r2
 2004460:	003f6306 	br	20041f0 <__muldf3+0x314>
 2004464:	147ff604 	addi	r17,r2,-40
 2004468:	3462983a 	sll	r17,r6,r17
 200446c:	0011883a 	mov	r8,zero
 2004470:	003f4406 	br	2004184 <__muldf3+0x2a8>
 2004474:	3009883a 	mov	r4,r6
 2004478:	d9800215 	stw	r6,8(sp)
 200447c:	da400115 	stw	r9,4(sp)
 2004480:	da800015 	stw	r10,0(sp)
 2004484:	20048ac0 	call	20048ac <__clzsi2>
 2004488:	10800804 	addi	r2,r2,32
 200448c:	da800017 	ldw	r10,0(sp)
 2004490:	da400117 	ldw	r9,4(sp)
 2004494:	d9800217 	ldw	r6,8(sp)
 2004498:	003f3006 	br	200415c <__muldf3+0x280>
 200449c:	143ff604 	addi	r16,r2,-40
 20044a0:	9c20983a 	sll	r16,r19,r16
 20044a4:	0029883a 	mov	r20,zero
 20044a8:	003f1606 	br	2004104 <__muldf3+0x228>
 20044ac:	d9800215 	stw	r6,8(sp)
 20044b0:	d9c00015 	stw	r7,0(sp)
 20044b4:	da400115 	stw	r9,4(sp)
 20044b8:	20048ac0 	call	20048ac <__clzsi2>
 20044bc:	10800804 	addi	r2,r2,32
 20044c0:	da400117 	ldw	r9,4(sp)
 20044c4:	d9c00017 	ldw	r7,0(sp)
 20044c8:	d9800217 	ldw	r6,8(sp)
 20044cc:	003f0306 	br	20040dc <__muldf3+0x200>
 20044d0:	00c00044 	movi	r3,1
 20044d4:	1947c83a 	sub	r3,r3,r5
 20044d8:	00800e04 	movi	r2,56
 20044dc:	10feda16 	blt	r2,r3,2004048 <__muldf3+0x16c>
 20044e0:	008007c4 	movi	r2,31
 20044e4:	10c01b16 	blt	r2,r3,2004554 <__muldf3+0x678>
 20044e8:	00800804 	movi	r2,32
 20044ec:	10c5c83a 	sub	r2,r2,r3
 20044f0:	888a983a 	sll	r5,r17,r2
 20044f4:	40c8d83a 	srl	r4,r8,r3
 20044f8:	4084983a 	sll	r2,r8,r2
 20044fc:	88e2d83a 	srl	r17,r17,r3
 2004500:	2906b03a 	or	r3,r5,r4
 2004504:	1004c03a 	cmpne	r2,r2,zero
 2004508:	1886b03a 	or	r3,r3,r2
 200450c:	188001cc 	andi	r2,r3,7
 2004510:	10000726 	beq	r2,zero,2004530 <__muldf3+0x654>
 2004514:	188003cc 	andi	r2,r3,15
 2004518:	01000104 	movi	r4,4
 200451c:	11000426 	beq	r2,r4,2004530 <__muldf3+0x654>
 2004520:	1805883a 	mov	r2,r3
 2004524:	10c00104 	addi	r3,r2,4
 2004528:	1885803a 	cmpltu	r2,r3,r2
 200452c:	88a3883a 	add	r17,r17,r2
 2004530:	8880202c 	andhi	r2,r17,128
 2004534:	10001c26 	beq	r2,zero,20045a8 <__muldf3+0x6cc>
 2004538:	b02b883a 	mov	r21,r22
 200453c:	00800044 	movi	r2,1
 2004540:	000b883a 	mov	r5,zero
 2004544:	0029883a 	mov	r20,zero
 2004548:	003ec306 	br	2004058 <__muldf3+0x17c>
 200454c:	5805883a 	mov	r2,r11
 2004550:	003f9906 	br	20043b8 <__muldf3+0x4dc>
 2004554:	00bff844 	movi	r2,-31
 2004558:	1145c83a 	sub	r2,r2,r5
 200455c:	8888d83a 	srl	r4,r17,r2
 2004560:	00800804 	movi	r2,32
 2004564:	18801a26 	beq	r3,r2,20045d0 <__muldf3+0x6f4>
 2004568:	00801004 	movi	r2,64
 200456c:	10c5c83a 	sub	r2,r2,r3
 2004570:	8884983a 	sll	r2,r17,r2
 2004574:	1204b03a 	or	r2,r2,r8
 2004578:	1004c03a 	cmpne	r2,r2,zero
 200457c:	2084b03a 	or	r2,r4,r2
 2004580:	144001cc 	andi	r17,r2,7
 2004584:	88000d1e 	bne	r17,zero,20045bc <__muldf3+0x6e0>
 2004588:	000b883a 	mov	r5,zero
 200458c:	1028d0fa 	srli	r20,r2,3
 2004590:	b02b883a 	mov	r21,r22
 2004594:	0005883a 	mov	r2,zero
 2004598:	a468b03a 	or	r20,r20,r17
 200459c:	003eae06 	br	2004058 <__muldf3+0x17c>
 20045a0:	1007883a 	mov	r3,r2
 20045a4:	0023883a 	mov	r17,zero
 20045a8:	880a927a 	slli	r5,r17,9
 20045ac:	1805883a 	mov	r2,r3
 20045b0:	8822977a 	slli	r17,r17,29
 20045b4:	280ad33a 	srli	r5,r5,12
 20045b8:	003ff406 	br	200458c <__muldf3+0x6b0>
 20045bc:	10c003cc 	andi	r3,r2,15
 20045c0:	01000104 	movi	r4,4
 20045c4:	193ff626 	beq	r3,r4,20045a0 <__muldf3+0x6c4>
 20045c8:	0023883a 	mov	r17,zero
 20045cc:	003fd506 	br	2004524 <__muldf3+0x648>
 20045d0:	0005883a 	mov	r2,zero
 20045d4:	003fe706 	br	2004574 <__muldf3+0x698>
 20045d8:	00800434 	movhi	r2,16
 20045dc:	89400234 	orhi	r5,r17,8
 20045e0:	10bfffc4 	addi	r2,r2,-1
 20045e4:	b02b883a 	mov	r21,r22
 20045e8:	288a703a 	and	r5,r5,r2
 20045ec:	4029883a 	mov	r20,r8
 20045f0:	003eff06 	br	20041f0 <__muldf3+0x314>

020045f4 <__extendsfdf2>:
 20045f4:	200ad5fa 	srli	r5,r4,23
 20045f8:	defffd04 	addi	sp,sp,-12
 20045fc:	dc400115 	stw	r17,4(sp)
 2004600:	29403fcc 	andi	r5,r5,255
 2004604:	29800044 	addi	r6,r5,1
 2004608:	04402034 	movhi	r17,128
 200460c:	dc000015 	stw	r16,0(sp)
 2004610:	8c7fffc4 	addi	r17,r17,-1
 2004614:	dfc00215 	stw	ra,8(sp)
 2004618:	31803fcc 	andi	r6,r6,255
 200461c:	00800044 	movi	r2,1
 2004620:	8922703a 	and	r17,r17,r4
 2004624:	2020d7fa 	srli	r16,r4,31
 2004628:	1180110e 	bge	r2,r6,2004670 <__extendsfdf2+0x7c>
 200462c:	880cd0fa 	srli	r6,r17,3
 2004630:	8822977a 	slli	r17,r17,29
 2004634:	2940e004 	addi	r5,r5,896
 2004638:	2941ffcc 	andi	r5,r5,2047
 200463c:	2804953a 	slli	r2,r5,20
 2004640:	01400434 	movhi	r5,16
 2004644:	800697fa 	slli	r3,r16,31
 2004648:	297fffc4 	addi	r5,r5,-1
 200464c:	314a703a 	and	r5,r6,r5
 2004650:	288ab03a 	or	r5,r5,r2
 2004654:	28c6b03a 	or	r3,r5,r3
 2004658:	8805883a 	mov	r2,r17
 200465c:	dfc00217 	ldw	ra,8(sp)
 2004660:	dc400117 	ldw	r17,4(sp)
 2004664:	dc000017 	ldw	r16,0(sp)
 2004668:	dec00304 	addi	sp,sp,12
 200466c:	f800283a 	ret
 2004670:	2800111e 	bne	r5,zero,20046b8 <__extendsfdf2+0xc4>
 2004674:	88001c26 	beq	r17,zero,20046e8 <__extendsfdf2+0xf4>
 2004678:	8809883a 	mov	r4,r17
 200467c:	20048ac0 	call	20048ac <__clzsi2>
 2004680:	00c00284 	movi	r3,10
 2004684:	18801b16 	blt	r3,r2,20046f4 <__extendsfdf2+0x100>
 2004688:	018002c4 	movi	r6,11
 200468c:	308dc83a 	sub	r6,r6,r2
 2004690:	11000544 	addi	r4,r2,21
 2004694:	8986d83a 	srl	r3,r17,r6
 2004698:	8922983a 	sll	r17,r17,r4
 200469c:	0180e244 	movi	r6,905
 20046a0:	01400434 	movhi	r5,16
 20046a4:	3085c83a 	sub	r2,r6,r2
 20046a8:	297fffc4 	addi	r5,r5,-1
 20046ac:	194c703a 	and	r6,r3,r5
 20046b0:	1141ffcc 	andi	r5,r2,2047
 20046b4:	003fe006 	br	2004638 <__extendsfdf2+0x44>
 20046b8:	88000826 	beq	r17,zero,20046dc <__extendsfdf2+0xe8>
 20046bc:	880cd0fa 	srli	r6,r17,3
 20046c0:	00800434 	movhi	r2,16
 20046c4:	10bfffc4 	addi	r2,r2,-1
 20046c8:	31800234 	orhi	r6,r6,8
 20046cc:	8822977a 	slli	r17,r17,29
 20046d0:	308c703a 	and	r6,r6,r2
 20046d4:	0141ffc4 	movi	r5,2047
 20046d8:	003fd706 	br	2004638 <__extendsfdf2+0x44>
 20046dc:	0141ffc4 	movi	r5,2047
 20046e0:	000d883a 	mov	r6,zero
 20046e4:	003fd406 	br	2004638 <__extendsfdf2+0x44>
 20046e8:	000b883a 	mov	r5,zero
 20046ec:	000d883a 	mov	r6,zero
 20046f0:	003fd106 	br	2004638 <__extendsfdf2+0x44>
 20046f4:	11bffd44 	addi	r6,r2,-11
 20046f8:	8986983a 	sll	r3,r17,r6
 20046fc:	0023883a 	mov	r17,zero
 2004700:	003fe606 	br	200469c <__extendsfdf2+0xa8>

02004704 <__truncdfsf2>:
 2004704:	2810d53a 	srli	r8,r5,20
 2004708:	01c00434 	movhi	r7,16
 200470c:	39ffffc4 	addi	r7,r7,-1
 2004710:	29ce703a 	and	r7,r5,r7
 2004714:	4201ffcc 	andi	r8,r8,2047
 2004718:	380e90fa 	slli	r7,r7,3
 200471c:	200cd77a 	srli	r6,r4,29
 2004720:	42400044 	addi	r9,r8,1
 2004724:	4a41ffcc 	andi	r9,r9,2047
 2004728:	00c00044 	movi	r3,1
 200472c:	280ad7fa 	srli	r5,r5,31
 2004730:	31ceb03a 	or	r7,r6,r7
 2004734:	200490fa 	slli	r2,r4,3
 2004738:	1a40230e 	bge	r3,r9,20047c8 <__truncdfsf2+0xc4>
 200473c:	40ff2004 	addi	r3,r8,-896
 2004740:	01803f84 	movi	r6,254
 2004744:	30c01516 	blt	r6,r3,200479c <__truncdfsf2+0x98>
 2004748:	00c0380e 	bge	zero,r3,200482c <__truncdfsf2+0x128>
 200474c:	200c91ba 	slli	r6,r4,6
 2004750:	380e90fa 	slli	r7,r7,3
 2004754:	1004d77a 	srli	r2,r2,29
 2004758:	300cc03a 	cmpne	r6,r6,zero
 200475c:	31ccb03a 	or	r6,r6,r7
 2004760:	308cb03a 	or	r6,r6,r2
 2004764:	308001cc 	andi	r2,r6,7
 2004768:	10000426 	beq	r2,zero,200477c <__truncdfsf2+0x78>
 200476c:	308003cc 	andi	r2,r6,15
 2004770:	01000104 	movi	r4,4
 2004774:	11000126 	beq	r2,r4,200477c <__truncdfsf2+0x78>
 2004778:	31800104 	addi	r6,r6,4
 200477c:	3081002c 	andhi	r2,r6,1024
 2004780:	10001626 	beq	r2,zero,20047dc <__truncdfsf2+0xd8>
 2004784:	18c00044 	addi	r3,r3,1
 2004788:	00803fc4 	movi	r2,255
 200478c:	18800326 	beq	r3,r2,200479c <__truncdfsf2+0x98>
 2004790:	300c91ba 	slli	r6,r6,6
 2004794:	300cd27a 	srli	r6,r6,9
 2004798:	00000206 	br	20047a4 <__truncdfsf2+0xa0>
 200479c:	00ffffc4 	movi	r3,-1
 20047a0:	000d883a 	mov	r6,zero
 20047a4:	18c03fcc 	andi	r3,r3,255
 20047a8:	180895fa 	slli	r4,r3,23
 20047ac:	00c02034 	movhi	r3,128
 20047b0:	280a97fa 	slli	r5,r5,31
 20047b4:	18ffffc4 	addi	r3,r3,-1
 20047b8:	30c6703a 	and	r3,r6,r3
 20047bc:	1906b03a 	or	r3,r3,r4
 20047c0:	1944b03a 	or	r2,r3,r5
 20047c4:	f800283a 	ret
 20047c8:	40000b1e 	bne	r8,zero,20047f8 <__truncdfsf2+0xf4>
 20047cc:	388cb03a 	or	r6,r7,r2
 20047d0:	0007883a 	mov	r3,zero
 20047d4:	30000426 	beq	r6,zero,20047e8 <__truncdfsf2+0xe4>
 20047d8:	01800144 	movi	r6,5
 20047dc:	00803fc4 	movi	r2,255
 20047e0:	300cd0fa 	srli	r6,r6,3
 20047e4:	18800a26 	beq	r3,r2,2004810 <__truncdfsf2+0x10c>
 20047e8:	00802034 	movhi	r2,128
 20047ec:	10bfffc4 	addi	r2,r2,-1
 20047f0:	308c703a 	and	r6,r6,r2
 20047f4:	003feb06 	br	20047a4 <__truncdfsf2+0xa0>
 20047f8:	3888b03a 	or	r4,r7,r2
 20047fc:	203fe726 	beq	r4,zero,200479c <__truncdfsf2+0x98>
 2004800:	380c90fa 	slli	r6,r7,3
 2004804:	00c03fc4 	movi	r3,255
 2004808:	31808034 	orhi	r6,r6,512
 200480c:	003fd506 	br	2004764 <__truncdfsf2+0x60>
 2004810:	303fe226 	beq	r6,zero,200479c <__truncdfsf2+0x98>
 2004814:	00802034 	movhi	r2,128
 2004818:	31801034 	orhi	r6,r6,64
 200481c:	10bfffc4 	addi	r2,r2,-1
 2004820:	00ffffc4 	movi	r3,-1
 2004824:	308c703a 	and	r6,r6,r2
 2004828:	003fde06 	br	20047a4 <__truncdfsf2+0xa0>
 200482c:	013ffa44 	movi	r4,-23
 2004830:	19000e16 	blt	r3,r4,200486c <__truncdfsf2+0x168>
 2004834:	01000784 	movi	r4,30
 2004838:	20c9c83a 	sub	r4,r4,r3
 200483c:	018007c4 	movi	r6,31
 2004840:	39c02034 	orhi	r7,r7,128
 2004844:	31000b16 	blt	r6,r4,2004874 <__truncdfsf2+0x170>
 2004848:	423f2084 	addi	r8,r8,-894
 200484c:	120c983a 	sll	r6,r2,r8
 2004850:	3a0e983a 	sll	r7,r7,r8
 2004854:	1104d83a 	srl	r2,r2,r4
 2004858:	300cc03a 	cmpne	r6,r6,zero
 200485c:	31ceb03a 	or	r7,r6,r7
 2004860:	388cb03a 	or	r6,r7,r2
 2004864:	0007883a 	mov	r3,zero
 2004868:	003fbe06 	br	2004764 <__truncdfsf2+0x60>
 200486c:	0007883a 	mov	r3,zero
 2004870:	003fd906 	br	20047d8 <__truncdfsf2+0xd4>
 2004874:	01bfff84 	movi	r6,-2
 2004878:	30cdc83a 	sub	r6,r6,r3
 200487c:	00c00804 	movi	r3,32
 2004880:	398cd83a 	srl	r6,r7,r6
 2004884:	20c00726 	beq	r4,r3,20048a4 <__truncdfsf2+0x1a0>
 2004888:	423f2884 	addi	r8,r8,-862
 200488c:	3a0e983a 	sll	r7,r7,r8
 2004890:	3884b03a 	or	r2,r7,r2
 2004894:	1004c03a 	cmpne	r2,r2,zero
 2004898:	118cb03a 	or	r6,r2,r6
 200489c:	0007883a 	mov	r3,zero
 20048a0:	003fb006 	br	2004764 <__truncdfsf2+0x60>
 20048a4:	000f883a 	mov	r7,zero
 20048a8:	003ff906 	br	2004890 <__truncdfsf2+0x18c>

020048ac <__clzsi2>:
 20048ac:	00bfffd4 	movui	r2,65535
 20048b0:	11000536 	bltu	r2,r4,20048c8 <__clzsi2+0x1c>
 20048b4:	00803fc4 	movi	r2,255
 20048b8:	11000f36 	bltu	r2,r4,20048f8 <__clzsi2+0x4c>
 20048bc:	00800804 	movi	r2,32
 20048c0:	0007883a 	mov	r3,zero
 20048c4:	00000506 	br	20048dc <__clzsi2+0x30>
 20048c8:	00804034 	movhi	r2,256
 20048cc:	10bfffc4 	addi	r2,r2,-1
 20048d0:	11000c2e 	bgeu	r2,r4,2004904 <__clzsi2+0x58>
 20048d4:	00800204 	movi	r2,8
 20048d8:	00c00604 	movi	r3,24
 20048dc:	20c8d83a 	srl	r4,r4,r3
 20048e0:	00c080b4 	movhi	r3,514
 20048e4:	18fa3d44 	addi	r3,r3,-5899
 20048e8:	1909883a 	add	r4,r3,r4
 20048ec:	20c00003 	ldbu	r3,0(r4)
 20048f0:	10c5c83a 	sub	r2,r2,r3
 20048f4:	f800283a 	ret
 20048f8:	00800604 	movi	r2,24
 20048fc:	00c00204 	movi	r3,8
 2004900:	003ff606 	br	20048dc <__clzsi2+0x30>
 2004904:	00800404 	movi	r2,16
 2004908:	1007883a 	mov	r3,r2
 200490c:	003ff306 	br	20048dc <__clzsi2+0x30>

02004910 <__divsi3>:
 2004910:	20001b16 	blt	r4,zero,2004980 <__divsi3+0x70>
 2004914:	000f883a 	mov	r7,zero
 2004918:	28001616 	blt	r5,zero,2004974 <__divsi3+0x64>
 200491c:	200d883a 	mov	r6,r4
 2004920:	29001a2e 	bgeu	r5,r4,200498c <__divsi3+0x7c>
 2004924:	00800804 	movi	r2,32
 2004928:	00c00044 	movi	r3,1
 200492c:	00000106 	br	2004934 <__divsi3+0x24>
 2004930:	10000d26 	beq	r2,zero,2004968 <__divsi3+0x58>
 2004934:	294b883a 	add	r5,r5,r5
 2004938:	10bfffc4 	addi	r2,r2,-1
 200493c:	18c7883a 	add	r3,r3,r3
 2004940:	293ffb36 	bltu	r5,r4,2004930 <__divsi3+0x20>
 2004944:	0005883a 	mov	r2,zero
 2004948:	18000726 	beq	r3,zero,2004968 <__divsi3+0x58>
 200494c:	0005883a 	mov	r2,zero
 2004950:	31400236 	bltu	r6,r5,200495c <__divsi3+0x4c>
 2004954:	314dc83a 	sub	r6,r6,r5
 2004958:	10c4b03a 	or	r2,r2,r3
 200495c:	1806d07a 	srli	r3,r3,1
 2004960:	280ad07a 	srli	r5,r5,1
 2004964:	183ffa1e 	bne	r3,zero,2004950 <__divsi3+0x40>
 2004968:	38000126 	beq	r7,zero,2004970 <__divsi3+0x60>
 200496c:	0085c83a 	sub	r2,zero,r2
 2004970:	f800283a 	ret
 2004974:	014bc83a 	sub	r5,zero,r5
 2004978:	39c0005c 	xori	r7,r7,1
 200497c:	003fe706 	br	200491c <__divsi3+0xc>
 2004980:	0109c83a 	sub	r4,zero,r4
 2004984:	01c00044 	movi	r7,1
 2004988:	003fe306 	br	2004918 <__divsi3+0x8>
 200498c:	00c00044 	movi	r3,1
 2004990:	003fee06 	br	200494c <__divsi3+0x3c>

02004994 <__modsi3>:
 2004994:	20001716 	blt	r4,zero,20049f4 <__modsi3+0x60>
 2004998:	000f883a 	mov	r7,zero
 200499c:	2005883a 	mov	r2,r4
 20049a0:	28001216 	blt	r5,zero,20049ec <__modsi3+0x58>
 20049a4:	2900162e 	bgeu	r5,r4,2004a00 <__modsi3+0x6c>
 20049a8:	01800804 	movi	r6,32
 20049ac:	00c00044 	movi	r3,1
 20049b0:	00000106 	br	20049b8 <__modsi3+0x24>
 20049b4:	30000a26 	beq	r6,zero,20049e0 <__modsi3+0x4c>
 20049b8:	294b883a 	add	r5,r5,r5
 20049bc:	31bfffc4 	addi	r6,r6,-1
 20049c0:	18c7883a 	add	r3,r3,r3
 20049c4:	293ffb36 	bltu	r5,r4,20049b4 <__modsi3+0x20>
 20049c8:	18000526 	beq	r3,zero,20049e0 <__modsi3+0x4c>
 20049cc:	1806d07a 	srli	r3,r3,1
 20049d0:	11400136 	bltu	r2,r5,20049d8 <__modsi3+0x44>
 20049d4:	1145c83a 	sub	r2,r2,r5
 20049d8:	280ad07a 	srli	r5,r5,1
 20049dc:	183ffb1e 	bne	r3,zero,20049cc <__modsi3+0x38>
 20049e0:	38000126 	beq	r7,zero,20049e8 <__modsi3+0x54>
 20049e4:	0085c83a 	sub	r2,zero,r2
 20049e8:	f800283a 	ret
 20049ec:	014bc83a 	sub	r5,zero,r5
 20049f0:	003fec06 	br	20049a4 <__modsi3+0x10>
 20049f4:	0109c83a 	sub	r4,zero,r4
 20049f8:	01c00044 	movi	r7,1
 20049fc:	003fe706 	br	200499c <__modsi3+0x8>
 2004a00:	00c00044 	movi	r3,1
 2004a04:	003ff106 	br	20049cc <__modsi3+0x38>

02004a08 <__udivsi3>:
 2004a08:	200d883a 	mov	r6,r4
 2004a0c:	2900152e 	bgeu	r5,r4,2004a64 <__udivsi3+0x5c>
 2004a10:	28001416 	blt	r5,zero,2004a64 <__udivsi3+0x5c>
 2004a14:	00800804 	movi	r2,32
 2004a18:	00c00044 	movi	r3,1
 2004a1c:	00000206 	br	2004a28 <__udivsi3+0x20>
 2004a20:	10000e26 	beq	r2,zero,2004a5c <__udivsi3+0x54>
 2004a24:	28000516 	blt	r5,zero,2004a3c <__udivsi3+0x34>
 2004a28:	294b883a 	add	r5,r5,r5
 2004a2c:	10bfffc4 	addi	r2,r2,-1
 2004a30:	18c7883a 	add	r3,r3,r3
 2004a34:	293ffa36 	bltu	r5,r4,2004a20 <__udivsi3+0x18>
 2004a38:	18000826 	beq	r3,zero,2004a5c <__udivsi3+0x54>
 2004a3c:	0005883a 	mov	r2,zero
 2004a40:	31400236 	bltu	r6,r5,2004a4c <__udivsi3+0x44>
 2004a44:	314dc83a 	sub	r6,r6,r5
 2004a48:	10c4b03a 	or	r2,r2,r3
 2004a4c:	1806d07a 	srli	r3,r3,1
 2004a50:	280ad07a 	srli	r5,r5,1
 2004a54:	183ffa1e 	bne	r3,zero,2004a40 <__udivsi3+0x38>
 2004a58:	f800283a 	ret
 2004a5c:	0005883a 	mov	r2,zero
 2004a60:	f800283a 	ret
 2004a64:	00c00044 	movi	r3,1
 2004a68:	003ff406 	br	2004a3c <__udivsi3+0x34>

02004a6c <__umodsi3>:
 2004a6c:	2005883a 	mov	r2,r4
 2004a70:	2900122e 	bgeu	r5,r4,2004abc <__umodsi3+0x50>
 2004a74:	28001116 	blt	r5,zero,2004abc <__umodsi3+0x50>
 2004a78:	01800804 	movi	r6,32
 2004a7c:	00c00044 	movi	r3,1
 2004a80:	00000206 	br	2004a8c <__umodsi3+0x20>
 2004a84:	30000c26 	beq	r6,zero,2004ab8 <__umodsi3+0x4c>
 2004a88:	28000516 	blt	r5,zero,2004aa0 <__umodsi3+0x34>
 2004a8c:	294b883a 	add	r5,r5,r5
 2004a90:	31bfffc4 	addi	r6,r6,-1
 2004a94:	18c7883a 	add	r3,r3,r3
 2004a98:	293ffa36 	bltu	r5,r4,2004a84 <__umodsi3+0x18>
 2004a9c:	18000626 	beq	r3,zero,2004ab8 <__umodsi3+0x4c>
 2004aa0:	1806d07a 	srli	r3,r3,1
 2004aa4:	11400136 	bltu	r2,r5,2004aac <__umodsi3+0x40>
 2004aa8:	1145c83a 	sub	r2,r2,r5
 2004aac:	280ad07a 	srli	r5,r5,1
 2004ab0:	183ffb1e 	bne	r3,zero,2004aa0 <__umodsi3+0x34>
 2004ab4:	f800283a 	ret
 2004ab8:	f800283a 	ret
 2004abc:	00c00044 	movi	r3,1
 2004ac0:	003ff706 	br	2004aa0 <__umodsi3+0x34>

02004ac4 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
 2004ac4:	defff804 	addi	sp,sp,-32
 2004ac8:	df000715 	stw	fp,28(sp)
 2004acc:	df000704 	addi	fp,sp,28
 2004ad0:	e13ffd15 	stw	r4,-12(fp)
 2004ad4:	e17ffe15 	stw	r5,-8(fp)
 2004ad8:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 2004adc:	e0bffd17 	ldw	r2,-12(fp)
 2004ae0:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
 2004ae4:	e0bffe17 	ldw	r2,-8(fp)
 2004ae8:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 2004aec:	e0bfff17 	ldw	r2,-4(fp)
 2004af0:	10800430 	cmpltui	r2,r2,16
 2004af4:	10004c1e 	bne	r2,zero,2004c28 <memcpy+0x164>
 2004af8:	e0fffa17 	ldw	r3,-24(fp)
 2004afc:	e0bff917 	ldw	r2,-28(fp)
 2004b00:	1884b03a 	or	r2,r3,r2
 2004b04:	108000cc 	andi	r2,r2,3
 2004b08:	1000471e 	bne	r2,zero,2004c28 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 2004b0c:	e0bff917 	ldw	r2,-28(fp)
 2004b10:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
 2004b14:	e0bffa17 	ldw	r2,-24(fp)
 2004b18:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2004b1c:	00002306 	br	2004bac <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 2004b20:	e0bffb17 	ldw	r2,-20(fp)
 2004b24:	10c00104 	addi	r3,r2,4
 2004b28:	e0fffb15 	stw	r3,-20(fp)
 2004b2c:	e0fffc17 	ldw	r3,-16(fp)
 2004b30:	19000104 	addi	r4,r3,4
 2004b34:	e13ffc15 	stw	r4,-16(fp)
 2004b38:	18c00017 	ldw	r3,0(r3)
 2004b3c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2004b40:	e0bffb17 	ldw	r2,-20(fp)
 2004b44:	10c00104 	addi	r3,r2,4
 2004b48:	e0fffb15 	stw	r3,-20(fp)
 2004b4c:	e0fffc17 	ldw	r3,-16(fp)
 2004b50:	19000104 	addi	r4,r3,4
 2004b54:	e13ffc15 	stw	r4,-16(fp)
 2004b58:	18c00017 	ldw	r3,0(r3)
 2004b5c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2004b60:	e0bffb17 	ldw	r2,-20(fp)
 2004b64:	10c00104 	addi	r3,r2,4
 2004b68:	e0fffb15 	stw	r3,-20(fp)
 2004b6c:	e0fffc17 	ldw	r3,-16(fp)
 2004b70:	19000104 	addi	r4,r3,4
 2004b74:	e13ffc15 	stw	r4,-16(fp)
 2004b78:	18c00017 	ldw	r3,0(r3)
 2004b7c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 2004b80:	e0bffb17 	ldw	r2,-20(fp)
 2004b84:	10c00104 	addi	r3,r2,4
 2004b88:	e0fffb15 	stw	r3,-20(fp)
 2004b8c:	e0fffc17 	ldw	r3,-16(fp)
 2004b90:	19000104 	addi	r4,r3,4
 2004b94:	e13ffc15 	stw	r4,-16(fp)
 2004b98:	18c00017 	ldw	r3,0(r3)
 2004b9c:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 2004ba0:	e0bfff17 	ldw	r2,-4(fp)
 2004ba4:	10bffc04 	addi	r2,r2,-16
 2004ba8:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 2004bac:	e0bfff17 	ldw	r2,-4(fp)
 2004bb0:	10800428 	cmpgeui	r2,r2,16
 2004bb4:	103fda1e 	bne	r2,zero,2004b20 <memcpy+0x5c>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2004bb8:	00000b06 	br	2004be8 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 2004bbc:	e0bffb17 	ldw	r2,-20(fp)
 2004bc0:	10c00104 	addi	r3,r2,4
 2004bc4:	e0fffb15 	stw	r3,-20(fp)
 2004bc8:	e0fffc17 	ldw	r3,-16(fp)
 2004bcc:	19000104 	addi	r4,r3,4
 2004bd0:	e13ffc15 	stw	r4,-16(fp)
 2004bd4:	18c00017 	ldw	r3,0(r3)
 2004bd8:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 2004bdc:	e0bfff17 	ldw	r2,-4(fp)
 2004be0:	10bfff04 	addi	r2,r2,-4
 2004be4:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 2004be8:	e0bfff17 	ldw	r2,-4(fp)
 2004bec:	10800128 	cmpgeui	r2,r2,4
 2004bf0:	103ff21e 	bne	r2,zero,2004bbc <memcpy+0xf8>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 2004bf4:	e0bffb17 	ldw	r2,-20(fp)
 2004bf8:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
 2004bfc:	e0bffc17 	ldw	r2,-16(fp)
 2004c00:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
 2004c04:	00000806 	br	2004c28 <memcpy+0x164>
    *dst++ = *src++;
 2004c08:	e0bff917 	ldw	r2,-28(fp)
 2004c0c:	10c00044 	addi	r3,r2,1
 2004c10:	e0fff915 	stw	r3,-28(fp)
 2004c14:	e0fffa17 	ldw	r3,-24(fp)
 2004c18:	19000044 	addi	r4,r3,1
 2004c1c:	e13ffa15 	stw	r4,-24(fp)
 2004c20:	18c00003 	ldbu	r3,0(r3)
 2004c24:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
 2004c28:	e0bfff17 	ldw	r2,-4(fp)
 2004c2c:	10ffffc4 	addi	r3,r2,-1
 2004c30:	e0ffff15 	stw	r3,-4(fp)
 2004c34:	103ff41e 	bne	r2,zero,2004c08 <memcpy+0x144>
    *dst++ = *src++;

  return dst0;
 2004c38:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2004c3c:	e037883a 	mov	sp,fp
 2004c40:	df000017 	ldw	fp,0(sp)
 2004c44:	dec00104 	addi	sp,sp,4
 2004c48:	f800283a 	ret

02004c4c <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
 2004c4c:	defff704 	addi	sp,sp,-36
 2004c50:	df000815 	stw	fp,32(sp)
 2004c54:	df000804 	addi	fp,sp,32
 2004c58:	e13ffd15 	stw	r4,-12(fp)
 2004c5c:	e17ffe15 	stw	r5,-8(fp)
 2004c60:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
 2004c64:	e0bffd17 	ldw	r2,-12(fp)
 2004c68:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 2004c6c:	e0bffe17 	ldw	r2,-8(fp)
 2004c70:	10803fcc 	andi	r2,r2,255
 2004c74:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 2004c78:	00000c06 	br	2004cac <memset+0x60>
    {
      if (n--)
 2004c7c:	e0bfff17 	ldw	r2,-4(fp)
 2004c80:	10ffffc4 	addi	r3,r2,-1
 2004c84:	e0ffff15 	stw	r3,-4(fp)
 2004c88:	10000626 	beq	r2,zero,2004ca4 <memset+0x58>
        *s++ = (char) c;
 2004c8c:	e0bff817 	ldw	r2,-32(fp)
 2004c90:	10c00044 	addi	r3,r2,1
 2004c94:	e0fff815 	stw	r3,-32(fp)
 2004c98:	e0fffe17 	ldw	r3,-8(fp)
 2004c9c:	10c00005 	stb	r3,0(r2)
 2004ca0:	00000206 	br	2004cac <memset+0x60>
      else
        return m;
 2004ca4:	e0bffd17 	ldw	r2,-12(fp)
 2004ca8:	00005506 	br	2004e00 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
 2004cac:	e0bff817 	ldw	r2,-32(fp)
 2004cb0:	108000cc 	andi	r2,r2,3
 2004cb4:	103ff11e 	bne	r2,zero,2004c7c <memset+0x30>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
 2004cb8:	e0bfff17 	ldw	r2,-4(fp)
 2004cbc:	10800130 	cmpltui	r2,r2,4
 2004cc0:	10004a1e 	bne	r2,zero,2004dec <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 2004cc4:	e0bff817 	ldw	r2,-32(fp)
 2004cc8:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 2004ccc:	e0bffc17 	ldw	r2,-16(fp)
 2004cd0:	1006923a 	slli	r3,r2,8
 2004cd4:	e0bffc17 	ldw	r2,-16(fp)
 2004cd8:	1884b03a 	or	r2,r3,r2
 2004cdc:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
 2004ce0:	e0bffa17 	ldw	r2,-24(fp)
 2004ce4:	1004943a 	slli	r2,r2,16
 2004ce8:	e0fffa17 	ldw	r3,-24(fp)
 2004cec:	1884b03a 	or	r2,r3,r2
 2004cf0:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2004cf4:	00800804 	movi	r2,32
 2004cf8:	e0bff915 	stw	r2,-28(fp)
 2004cfc:	00000906 	br	2004d24 <memset+0xd8>
        buffer = (buffer << i) | buffer;
 2004d00:	e0fffa17 	ldw	r3,-24(fp)
 2004d04:	e0bff917 	ldw	r2,-28(fp)
 2004d08:	1884983a 	sll	r2,r3,r2
 2004d0c:	e0fffa17 	ldw	r3,-24(fp)
 2004d10:	1884b03a 	or	r2,r3,r2
 2004d14:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 2004d18:	e0bff917 	ldw	r2,-28(fp)
 2004d1c:	1085883a 	add	r2,r2,r2
 2004d20:	e0bff915 	stw	r2,-28(fp)
 2004d24:	e0bff917 	ldw	r2,-28(fp)
 2004d28:	10800830 	cmpltui	r2,r2,32
 2004d2c:	103ff41e 	bne	r2,zero,2004d00 <memset+0xb4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2004d30:	00001706 	br	2004d90 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 2004d34:	e0bffb17 	ldw	r2,-20(fp)
 2004d38:	10c00104 	addi	r3,r2,4
 2004d3c:	e0fffb15 	stw	r3,-20(fp)
 2004d40:	e0fffa17 	ldw	r3,-24(fp)
 2004d44:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004d48:	e0bffb17 	ldw	r2,-20(fp)
 2004d4c:	10c00104 	addi	r3,r2,4
 2004d50:	e0fffb15 	stw	r3,-20(fp)
 2004d54:	e0fffa17 	ldw	r3,-24(fp)
 2004d58:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004d5c:	e0bffb17 	ldw	r2,-20(fp)
 2004d60:	10c00104 	addi	r3,r2,4
 2004d64:	e0fffb15 	stw	r3,-20(fp)
 2004d68:	e0fffa17 	ldw	r3,-24(fp)
 2004d6c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 2004d70:	e0bffb17 	ldw	r2,-20(fp)
 2004d74:	10c00104 	addi	r3,r2,4
 2004d78:	e0fffb15 	stw	r3,-20(fp)
 2004d7c:	e0fffa17 	ldw	r3,-24(fp)
 2004d80:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 2004d84:	e0bfff17 	ldw	r2,-4(fp)
 2004d88:	10bffc04 	addi	r2,r2,-16
 2004d8c:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 2004d90:	e0bfff17 	ldw	r2,-4(fp)
 2004d94:	10800428 	cmpgeui	r2,r2,16
 2004d98:	103fe61e 	bne	r2,zero,2004d34 <memset+0xe8>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2004d9c:	00000806 	br	2004dc0 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 2004da0:	e0bffb17 	ldw	r2,-20(fp)
 2004da4:	10c00104 	addi	r3,r2,4
 2004da8:	e0fffb15 	stw	r3,-20(fp)
 2004dac:	e0fffa17 	ldw	r3,-24(fp)
 2004db0:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 2004db4:	e0bfff17 	ldw	r2,-4(fp)
 2004db8:	10bfff04 	addi	r2,r2,-4
 2004dbc:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
 2004dc0:	e0bfff17 	ldw	r2,-4(fp)
 2004dc4:	10800128 	cmpgeui	r2,r2,4
 2004dc8:	103ff51e 	bne	r2,zero,2004da0 <memset+0x154>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 2004dcc:	e0bffb17 	ldw	r2,-20(fp)
 2004dd0:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2004dd4:	00000506 	br	2004dec <memset+0x1a0>
    *s++ = (char) c;
 2004dd8:	e0bff817 	ldw	r2,-32(fp)
 2004ddc:	10c00044 	addi	r3,r2,1
 2004de0:	e0fff815 	stw	r3,-32(fp)
 2004de4:	e0fffe17 	ldw	r3,-8(fp)
 2004de8:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 2004dec:	e0bfff17 	ldw	r2,-4(fp)
 2004df0:	10ffffc4 	addi	r3,r2,-1
 2004df4:	e0ffff15 	stw	r3,-4(fp)
 2004df8:	103ff71e 	bne	r2,zero,2004dd8 <memset+0x18c>
    *s++ = (char) c;

  return m;
 2004dfc:	e0bffd17 	ldw	r2,-12(fp)
}
 2004e00:	e037883a 	mov	sp,fp
 2004e04:	df000017 	ldw	fp,0(sp)
 2004e08:	dec00104 	addi	sp,sp,4
 2004e0c:	f800283a 	ret

02004e10 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
 2004e10:	defff804 	addi	sp,sp,-32
 2004e14:	dfc00515 	stw	ra,20(sp)
 2004e18:	df000415 	stw	fp,16(sp)
 2004e1c:	df000404 	addi	fp,sp,16
 2004e20:	e13ffe15 	stw	r4,-8(fp)
 2004e24:	e17fff15 	stw	r5,-4(fp)
 2004e28:	e1800215 	stw	r6,8(fp)
 2004e2c:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
 2004e30:	e0800204 	addi	r2,fp,8
 2004e34:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
 2004e38:	e0bffe17 	ldw	r2,-8(fp)
 2004e3c:	10800217 	ldw	r2,8(r2)
 2004e40:	e0fffd17 	ldw	r3,-12(fp)
 2004e44:	180f883a 	mov	r7,r3
 2004e48:	e1bfff17 	ldw	r6,-4(fp)
 2004e4c:	100b883a 	mov	r5,r2
 2004e50:	e13ffe17 	ldw	r4,-8(fp)
 2004e54:	20052600 	call	2005260 <___vfprintf_internal_r>
 2004e58:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
 2004e5c:	e0bffc17 	ldw	r2,-16(fp)
}
 2004e60:	e037883a 	mov	sp,fp
 2004e64:	dfc00117 	ldw	ra,4(sp)
 2004e68:	df000017 	ldw	fp,0(sp)
 2004e6c:	dec00404 	addi	sp,sp,16
 2004e70:	f800283a 	ret

02004e74 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
 2004e74:	defff704 	addi	sp,sp,-36
 2004e78:	dfc00515 	stw	ra,20(sp)
 2004e7c:	df000415 	stw	fp,16(sp)
 2004e80:	df000404 	addi	fp,sp,16
 2004e84:	e13fff15 	stw	r4,-4(fp)
 2004e88:	e1400215 	stw	r5,8(fp)
 2004e8c:	e1800315 	stw	r6,12(fp)
 2004e90:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 2004e94:	d0a00017 	ldw	r2,-32768(gp)
 2004e98:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 2004e9c:	e0800204 	addi	r2,fp,8
 2004ea0:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
 2004ea4:	d0a00017 	ldw	r2,-32768(gp)
 2004ea8:	10800217 	ldw	r2,8(r2)
 2004eac:	e0fffe17 	ldw	r3,-8(fp)
 2004eb0:	180d883a 	mov	r6,r3
 2004eb4:	e17fff17 	ldw	r5,-4(fp)
 2004eb8:	1009883a 	mov	r4,r2
 2004ebc:	20052100 	call	2005210 <__vfprintf_internal>
 2004ec0:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
 2004ec4:	e0bffd17 	ldw	r2,-12(fp)
}
 2004ec8:	e037883a 	mov	sp,fp
 2004ecc:	dfc00117 	ldw	ra,4(sp)
 2004ed0:	df000017 	ldw	fp,0(sp)
 2004ed4:	dec00504 	addi	sp,sp,20
 2004ed8:	f800283a 	ret

02004edc <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
 2004edc:	defff104 	addi	sp,sp,-60
 2004ee0:	dfc00e15 	stw	ra,56(sp)
 2004ee4:	df000d15 	stw	fp,52(sp)
 2004ee8:	df000d04 	addi	fp,sp,52
 2004eec:	e13ffe15 	stw	r4,-8(fp)
 2004ef0:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
 2004ef4:	e13fff17 	ldw	r4,-4(fp)
 2004ef8:	200502c0 	call	200502c <strlen>
 2004efc:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
 2004f00:	e0bfff17 	ldw	r2,-4(fp)
 2004f04:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
 2004f08:	e0bff317 	ldw	r2,-52(fp)
 2004f0c:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
 2004f10:	008080b4 	movhi	r2,514
 2004f14:	10ba7e04 	addi	r2,r2,-5640
 2004f18:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
 2004f1c:	00800044 	movi	r2,1
 2004f20:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
 2004f24:	e0bff317 	ldw	r2,-52(fp)
 2004f28:	10800044 	addi	r2,r2,1
 2004f2c:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
 2004f30:	e0bffa04 	addi	r2,fp,-24
 2004f34:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
 2004f38:	00800084 	movi	r2,2
 2004f3c:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
 2004f40:	e0bffe17 	ldw	r2,-8(fp)
 2004f44:	e0bff415 	stw	r2,-48(fp)
 2004f48:	e0bff417 	ldw	r2,-48(fp)
 2004f4c:	10000526 	beq	r2,zero,2004f64 <_puts_r+0x88>
 2004f50:	e0bff417 	ldw	r2,-48(fp)
 2004f54:	10800e17 	ldw	r2,56(r2)
 2004f58:	1000021e 	bne	r2,zero,2004f64 <_puts_r+0x88>
 2004f5c:	e13ff417 	ldw	r4,-48(fp)
 2004f60:	2009ecc0 	call	2009ecc <__sinit>
  fp = _stdout_r (ptr);
 2004f64:	e0bffe17 	ldw	r2,-8(fp)
 2004f68:	10800217 	ldw	r2,8(r2)
 2004f6c:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
 2004f70:	e0bff517 	ldw	r2,-44(fp)
 2004f74:	1080030b 	ldhu	r2,12(r2)
 2004f78:	10bfffcc 	andi	r2,r2,65535
 2004f7c:	1088000c 	andi	r2,r2,8192
 2004f80:	10000c1e 	bne	r2,zero,2004fb4 <_puts_r+0xd8>
 2004f84:	e0bff517 	ldw	r2,-44(fp)
 2004f88:	1080030b 	ldhu	r2,12(r2)
 2004f8c:	10880014 	ori	r2,r2,8192
 2004f90:	1007883a 	mov	r3,r2
 2004f94:	e0bff517 	ldw	r2,-44(fp)
 2004f98:	10c0030d 	sth	r3,12(r2)
 2004f9c:	e0bff517 	ldw	r2,-44(fp)
 2004fa0:	10c01917 	ldw	r3,100(r2)
 2004fa4:	00b7ffc4 	movi	r2,-8193
 2004fa8:	1886703a 	and	r3,r3,r2
 2004fac:	e0bff517 	ldw	r2,-44(fp)
 2004fb0:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
 2004fb4:	e0bff704 	addi	r2,fp,-36
 2004fb8:	100d883a 	mov	r6,r2
 2004fbc:	e17ff517 	ldw	r5,-44(fp)
 2004fc0:	e13ffe17 	ldw	r4,-8(fp)
 2004fc4:	200a8180 	call	200a818 <__sfvwrite_r>
 2004fc8:	10000226 	beq	r2,zero,2004fd4 <_puts_r+0xf8>
 2004fcc:	00bfffc4 	movi	r2,-1
 2004fd0:	00000106 	br	2004fd8 <_puts_r+0xfc>
 2004fd4:	00800284 	movi	r2,10
 2004fd8:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
 2004fdc:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
 2004fe0:	e037883a 	mov	sp,fp
 2004fe4:	dfc00117 	ldw	ra,4(sp)
 2004fe8:	df000017 	ldw	fp,0(sp)
 2004fec:	dec00204 	addi	sp,sp,8
 2004ff0:	f800283a 	ret

02004ff4 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
 2004ff4:	defffd04 	addi	sp,sp,-12
 2004ff8:	dfc00215 	stw	ra,8(sp)
 2004ffc:	df000115 	stw	fp,4(sp)
 2005000:	df000104 	addi	fp,sp,4
 2005004:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
 2005008:	d0a00017 	ldw	r2,-32768(gp)
 200500c:	e17fff17 	ldw	r5,-4(fp)
 2005010:	1009883a 	mov	r4,r2
 2005014:	2004edc0 	call	2004edc <_puts_r>
}
 2005018:	e037883a 	mov	sp,fp
 200501c:	dfc00117 	ldw	ra,4(sp)
 2005020:	df000017 	ldw	fp,0(sp)
 2005024:	dec00204 	addi	sp,sp,8
 2005028:	f800283a 	ret

0200502c <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
 200502c:	defffc04 	addi	sp,sp,-16
 2005030:	df000315 	stw	fp,12(sp)
 2005034:	df000304 	addi	fp,sp,12
 2005038:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
 200503c:	e0bfff17 	ldw	r2,-4(fp)
 2005040:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 2005044:	00000d06 	br	200507c <strlen+0x50>
    {
      if (!*str)
 2005048:	e0bfff17 	ldw	r2,-4(fp)
 200504c:	10800003 	ldbu	r2,0(r2)
 2005050:	10803fcc 	andi	r2,r2,255
 2005054:	1080201c 	xori	r2,r2,128
 2005058:	10bfe004 	addi	r2,r2,-128
 200505c:	1000041e 	bne	r2,zero,2005070 <strlen+0x44>
	return str - start;
 2005060:	e0ffff17 	ldw	r3,-4(fp)
 2005064:	e0bffe17 	ldw	r2,-8(fp)
 2005068:	1885c83a 	sub	r2,r3,r2
 200506c:	00002806 	br	2005110 <strlen+0xe4>
      str++;
 2005070:	e0bfff17 	ldw	r2,-4(fp)
 2005074:	10800044 	addi	r2,r2,1
 2005078:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 200507c:	e0bfff17 	ldw	r2,-4(fp)
 2005080:	108000cc 	andi	r2,r2,3
 2005084:	103ff01e 	bne	r2,zero,2005048 <strlen+0x1c>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 2005088:	e0bfff17 	ldw	r2,-4(fp)
 200508c:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
 2005090:	00000306 	br	20050a0 <strlen+0x74>
    aligned_addr++;
 2005094:	e0bffd17 	ldw	r2,-12(fp)
 2005098:	10800104 	addi	r2,r2,4
 200509c:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
 20050a0:	e0bffd17 	ldw	r2,-12(fp)
 20050a4:	10c00017 	ldw	r3,0(r2)
 20050a8:	00bfbff4 	movhi	r2,65279
 20050ac:	10bfbfc4 	addi	r2,r2,-257
 20050b0:	1887883a 	add	r3,r3,r2
 20050b4:	e0bffd17 	ldw	r2,-12(fp)
 20050b8:	10800017 	ldw	r2,0(r2)
 20050bc:	0084303a 	nor	r2,zero,r2
 20050c0:	1886703a 	and	r3,r3,r2
 20050c4:	00a02074 	movhi	r2,32897
 20050c8:	10a02004 	addi	r2,r2,-32640
 20050cc:	1884703a 	and	r2,r3,r2
 20050d0:	103ff026 	beq	r2,zero,2005094 <strlen+0x68>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 20050d4:	e0bffd17 	ldw	r2,-12(fp)
 20050d8:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 20050dc:	00000306 	br	20050ec <strlen+0xc0>
    str++;
 20050e0:	e0bfff17 	ldw	r2,-4(fp)
 20050e4:	10800044 	addi	r2,r2,1
 20050e8:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 20050ec:	e0bfff17 	ldw	r2,-4(fp)
 20050f0:	10800003 	ldbu	r2,0(r2)
 20050f4:	10803fcc 	andi	r2,r2,255
 20050f8:	1080201c 	xori	r2,r2,128
 20050fc:	10bfe004 	addi	r2,r2,-128
 2005100:	103ff71e 	bne	r2,zero,20050e0 <strlen+0xb4>
    str++;
  return str - start;
 2005104:	e0ffff17 	ldw	r3,-4(fp)
 2005108:	e0bffe17 	ldw	r2,-8(fp)
 200510c:	1885c83a 	sub	r2,r3,r2
}
 2005110:	e037883a 	mov	sp,fp
 2005114:	df000017 	ldw	fp,0(sp)
 2005118:	dec00104 	addi	sp,sp,4
 200511c:	f800283a 	ret

02005120 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 2005120:	defedf04 	addi	sp,sp,-1156
 2005124:	dfc12015 	stw	ra,1152(sp)
 2005128:	df011f15 	stw	fp,1148(sp)
 200512c:	dc011e15 	stw	r16,1144(sp)
 2005130:	df011f04 	addi	fp,sp,1148
 2005134:	e13ffc15 	stw	r4,-16(fp)
 2005138:	2821883a 	mov	r16,r5
 200513c:	e1bffd15 	stw	r6,-12(fp)
 2005140:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 2005144:	80c0030b 	ldhu	r3,12(r16)
 2005148:	00bfff44 	movi	r2,-3
 200514c:	1884703a 	and	r2,r3,r2
 2005150:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 2005154:	80801917 	ldw	r2,100(r16)
 2005158:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 200515c:	8080038b 	ldhu	r2,14(r16)
 2005160:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 2005164:	80800717 	ldw	r2,28(r16)
 2005168:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 200516c:	80800917 	ldw	r2,36(r16)
 2005170:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 2005174:	e0befc04 	addi	r2,fp,-1040
 2005178:	e0bee215 	stw	r2,-1144(fp)
 200517c:	e0bee217 	ldw	r2,-1144(fp)
 2005180:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 2005184:	00810004 	movi	r2,1024
 2005188:	e0bee415 	stw	r2,-1136(fp)
 200518c:	e0bee417 	ldw	r2,-1136(fp)
 2005190:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 2005194:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 2005198:	e0bee204 	addi	r2,fp,-1144
 200519c:	e1fffe17 	ldw	r7,-8(fp)
 20051a0:	e1bffd17 	ldw	r6,-12(fp)
 20051a4:	100b883a 	mov	r5,r2
 20051a8:	e13ffc17 	ldw	r4,-16(fp)
 20051ac:	20052600 	call	2005260 <___vfprintf_internal_r>
 20051b0:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 20051b4:	e0bee117 	ldw	r2,-1148(fp)
 20051b8:	10000716 	blt	r2,zero,20051d8 <__sbprintf+0xb8>
 20051bc:	e0bee204 	addi	r2,fp,-1144
 20051c0:	100b883a 	mov	r5,r2
 20051c4:	e13ffc17 	ldw	r4,-16(fp)
 20051c8:	2009a4c0 	call	2009a4c <_fflush_r>
 20051cc:	10000226 	beq	r2,zero,20051d8 <__sbprintf+0xb8>
		ret = EOF;
 20051d0:	00bfffc4 	movi	r2,-1
 20051d4:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 20051d8:	e0bee50b 	ldhu	r2,-1132(fp)
 20051dc:	10bfffcc 	andi	r2,r2,65535
 20051e0:	1080100c 	andi	r2,r2,64
 20051e4:	10000326 	beq	r2,zero,20051f4 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 20051e8:	8080030b 	ldhu	r2,12(r16)
 20051ec:	10801014 	ori	r2,r2,64
 20051f0:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 20051f4:	e0bee117 	ldw	r2,-1148(fp)
}
 20051f8:	e6ffff04 	addi	sp,fp,-4
 20051fc:	dfc00217 	ldw	ra,8(sp)
 2005200:	df000117 	ldw	fp,4(sp)
 2005204:	dc000017 	ldw	r16,0(sp)
 2005208:	dec00304 	addi	sp,sp,12
 200520c:	f800283a 	ret

02005210 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 2005210:	defffa04 	addi	sp,sp,-24
 2005214:	dfc00515 	stw	ra,20(sp)
 2005218:	df000415 	stw	fp,16(sp)
 200521c:	df000404 	addi	fp,sp,16
 2005220:	e13ffd15 	stw	r4,-12(fp)
 2005224:	e17ffe15 	stw	r5,-8(fp)
 2005228:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 200522c:	d0a00017 	ldw	r2,-32768(gp)
 2005230:	e1ffff17 	ldw	r7,-4(fp)
 2005234:	e1bffe17 	ldw	r6,-8(fp)
 2005238:	e17ffd17 	ldw	r5,-12(fp)
 200523c:	1009883a 	mov	r4,r2
 2005240:	20052600 	call	2005260 <___vfprintf_internal_r>
 2005244:	e0bffc15 	stw	r2,-16(fp)
  return result;
 2005248:	e0bffc17 	ldw	r2,-16(fp)
}
 200524c:	e037883a 	mov	sp,fp
 2005250:	dfc00117 	ldw	ra,4(sp)
 2005254:	df000017 	ldw	fp,0(sp)
 2005258:	dec00204 	addi	sp,sp,8
 200525c:	f800283a 	ret

02005260 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 2005260:	deffa404 	addi	sp,sp,-368
 2005264:	dfc05b15 	stw	ra,364(sp)
 2005268:	df005a15 	stw	fp,360(sp)
 200526c:	ddc05915 	stw	r23,356(sp)
 2005270:	dd805815 	stw	r22,352(sp)
 2005274:	dd405715 	stw	r21,348(sp)
 2005278:	dd005615 	stw	r20,344(sp)
 200527c:	dcc05515 	stw	r19,340(sp)
 2005280:	dc805415 	stw	r18,336(sp)
 2005284:	dc405315 	stw	r17,332(sp)
 2005288:	dc005215 	stw	r16,328(sp)
 200528c:	df005a04 	addi	fp,sp,360
 2005290:	e13fe615 	stw	r4,-104(fp)
 2005294:	e17fe715 	stw	r5,-100(fp)
 2005298:	e1bfe815 	stw	r6,-96(fp)
 200529c:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 20052a0:	e13fe617 	ldw	r4,-104(fp)
 20052a4:	200b0b40 	call	200b0b4 <_localeconv_r>
 20052a8:	10800017 	ldw	r2,0(r2)
 20052ac:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
 20052b0:	e13fbb17 	ldw	r4,-276(fp)
 20052b4:	200502c0 	call	200502c <strlen>
 20052b8:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 20052bc:	e03fc215 	stw	zero,-248(fp)
 20052c0:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 20052c4:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 20052c8:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 20052cc:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 20052d0:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 20052d4:	e0bfe617 	ldw	r2,-104(fp)
 20052d8:	e0bfbd15 	stw	r2,-268(fp)
 20052dc:	e0bfbd17 	ldw	r2,-268(fp)
 20052e0:	10000526 	beq	r2,zero,20052f8 <___vfprintf_internal_r+0x98>
 20052e4:	e0bfbd17 	ldw	r2,-268(fp)
 20052e8:	10800e17 	ldw	r2,56(r2)
 20052ec:	1000021e 	bne	r2,zero,20052f8 <___vfprintf_internal_r+0x98>
 20052f0:	e13fbd17 	ldw	r4,-268(fp)
 20052f4:	2009ecc0 	call	2009ecc <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 20052f8:	e0bfe717 	ldw	r2,-100(fp)
 20052fc:	1080030b 	ldhu	r2,12(r2)
 2005300:	10bfffcc 	andi	r2,r2,65535
 2005304:	1088000c 	andi	r2,r2,8192
 2005308:	10000c1e 	bne	r2,zero,200533c <___vfprintf_internal_r+0xdc>
 200530c:	e0bfe717 	ldw	r2,-100(fp)
 2005310:	1080030b 	ldhu	r2,12(r2)
 2005314:	10880014 	ori	r2,r2,8192
 2005318:	1007883a 	mov	r3,r2
 200531c:	e0bfe717 	ldw	r2,-100(fp)
 2005320:	10c0030d 	sth	r3,12(r2)
 2005324:	e0bfe717 	ldw	r2,-100(fp)
 2005328:	10c01917 	ldw	r3,100(r2)
 200532c:	00b7ffc4 	movi	r2,-8193
 2005330:	1886703a 	and	r3,r3,r2
 2005334:	e0bfe717 	ldw	r2,-100(fp)
 2005338:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 200533c:	e0bfe717 	ldw	r2,-100(fp)
 2005340:	1080030b 	ldhu	r2,12(r2)
 2005344:	10bfffcc 	andi	r2,r2,65535
 2005348:	1080020c 	andi	r2,r2,8
 200534c:	10000326 	beq	r2,zero,200535c <___vfprintf_internal_r+0xfc>
 2005350:	e0bfe717 	ldw	r2,-100(fp)
 2005354:	10800417 	ldw	r2,16(r2)
 2005358:	1000061e 	bne	r2,zero,2005374 <___vfprintf_internal_r+0x114>
 200535c:	e17fe717 	ldw	r5,-100(fp)
 2005360:	e13fe617 	ldw	r4,-104(fp)
 2005364:	200767c0 	call	200767c <__swsetup_r>
 2005368:	10000226 	beq	r2,zero,2005374 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 200536c:	00bfffc4 	movi	r2,-1
 2005370:	0007e206 	br	20072fc <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2005374:	e0bfe717 	ldw	r2,-100(fp)
 2005378:	1080030b 	ldhu	r2,12(r2)
 200537c:	10bfffcc 	andi	r2,r2,65535
 2005380:	1080068c 	andi	r2,r2,26
 2005384:	10800298 	cmpnei	r2,r2,10
 2005388:	10000c1e 	bne	r2,zero,20053bc <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
 200538c:	e0bfe717 	ldw	r2,-100(fp)
 2005390:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 2005394:	10bfffcc 	andi	r2,r2,65535
 2005398:	10a0001c 	xori	r2,r2,32768
 200539c:	10a00004 	addi	r2,r2,-32768
 20053a0:	10000616 	blt	r2,zero,20053bc <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 20053a4:	e1ffe917 	ldw	r7,-92(fp)
 20053a8:	e1bfe817 	ldw	r6,-96(fp)
 20053ac:	e17fe717 	ldw	r5,-100(fp)
 20053b0:	e13fe617 	ldw	r4,-104(fp)
 20053b4:	20051200 	call	2005120 <__sbprintf>
 20053b8:	0007d006 	br	20072fc <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 20053bc:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 20053c0:	e47fcb04 	addi	r17,fp,-212
 20053c4:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
 20053c8:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 20053cc:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 20053d0:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 20053d4:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 20053d8:	00000106 	br	20053e0 <___vfprintf_internal_r+0x180>
                    fmt += 1;
 20053dc:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 20053e0:	a8800003 	ldbu	r2,0(r21)
 20053e4:	10803fcc 	andi	r2,r2,255
 20053e8:	1080201c 	xori	r2,r2,128
 20053ec:	10bfe004 	addi	r2,r2,-128
 20053f0:	10000626 	beq	r2,zero,200540c <___vfprintf_internal_r+0x1ac>
 20053f4:	a8800003 	ldbu	r2,0(r21)
 20053f8:	10803fcc 	andi	r2,r2,255
 20053fc:	1080201c 	xori	r2,r2,128
 2005400:	10bfe004 	addi	r2,r2,-128
 2005404:	10800958 	cmpnei	r2,r2,37
 2005408:	103ff41e 	bne	r2,zero,20053dc <___vfprintf_internal_r+0x17c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 200540c:	a807883a 	mov	r3,r21
 2005410:	9005883a 	mov	r2,r18
 2005414:	18a1c83a 	sub	r16,r3,r2
 2005418:	80001826 	beq	r16,zero,200547c <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
 200541c:	8c800015 	stw	r18,0(r17)
 2005420:	8005883a 	mov	r2,r16
 2005424:	88800115 	stw	r2,4(r17)
 2005428:	e0bfca17 	ldw	r2,-216(fp)
 200542c:	8007883a 	mov	r3,r16
 2005430:	10c5883a 	add	r2,r2,r3
 2005434:	e0bfca15 	stw	r2,-216(fp)
 2005438:	8c400204 	addi	r17,r17,8
 200543c:	e0bfc917 	ldw	r2,-220(fp)
 2005440:	10800044 	addi	r2,r2,1
 2005444:	e0bfc915 	stw	r2,-220(fp)
 2005448:	e0bfc917 	ldw	r2,-220(fp)
 200544c:	10800210 	cmplti	r2,r2,8
 2005450:	1000071e 	bne	r2,zero,2005470 <___vfprintf_internal_r+0x210>
 2005454:	e0bfc804 	addi	r2,fp,-224
 2005458:	100d883a 	mov	r6,r2
 200545c:	e17fe717 	ldw	r5,-100(fp)
 2005460:	e13fe617 	ldw	r4,-104(fp)
 2005464:	200f0e80 	call	200f0e8 <__sprint_r>
 2005468:	10074d1e 	bne	r2,zero,20071a0 <___vfprintf_internal_r+0x1f40>
 200546c:	e47fcb04 	addi	r17,fp,-212
			ret += m;
 2005470:	e0bfac17 	ldw	r2,-336(fp)
 2005474:	1405883a 	add	r2,r2,r16
 2005478:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 200547c:	a8800003 	ldbu	r2,0(r21)
 2005480:	10803fcc 	andi	r2,r2,255
 2005484:	1080201c 	xori	r2,r2,128
 2005488:	10bfe004 	addi	r2,r2,-128
 200548c:	10073626 	beq	r2,zero,2007168 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
 2005490:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
 2005494:	ad400044 	addi	r21,r21,1

		flags = 0;
 2005498:	0027883a 	mov	r19,zero
		dprec = 0;
 200549c:	e03fb415 	stw	zero,-304(fp)
		width = 0;
 20054a0:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
 20054a4:	00bfffc4 	movi	r2,-1
 20054a8:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
 20054ac:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
 20054b0:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 20054b4:	a805883a 	mov	r2,r21
 20054b8:	15400044 	addi	r21,r2,1
 20054bc:	10800003 	ldbu	r2,0(r2)
 20054c0:	15003fcc 	andi	r20,r2,255
 20054c4:	a500201c 	xori	r20,r20,128
 20054c8:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
 20054cc:	a0bff804 	addi	r2,r20,-32
 20054d0:	10c01668 	cmpgeui	r3,r2,89
 20054d4:	1803491e 	bne	r3,zero,20061fc <___vfprintf_internal_r+0xf9c>
 20054d8:	100690ba 	slli	r3,r2,2
 20054dc:	00808034 	movhi	r2,512
 20054e0:	10953c04 	addi	r2,r2,21744
 20054e4:	1885883a 	add	r2,r3,r2
 20054e8:	10800017 	ldw	r2,0(r2)
 20054ec:	1000683a 	jmp	r2
 20054f0:	02005654 	movui	r8,345
 20054f4:	020061fc 	xorhi	r8,zero,391
 20054f8:	020061fc 	xorhi	r8,zero,391
 20054fc:	02005674 	movhi	r8,345
 2005500:	020061fc 	xorhi	r8,zero,391
 2005504:	020061fc 	xorhi	r8,zero,391
 2005508:	020061fc 	xorhi	r8,zero,391
 200550c:	020061fc 	xorhi	r8,zero,391
 2005510:	020061fc 	xorhi	r8,zero,391
 2005514:	020061fc 	xorhi	r8,zero,391
 2005518:	0200567c 	xorhi	r8,zero,345
 200551c:	020056b0 	cmpltui	r8,zero,346
 2005520:	020061fc 	xorhi	r8,zero,391
 2005524:	020056a8 	cmpgeui	r8,zero,346
 2005528:	020056bc 	xorhi	r8,zero,346
 200552c:	020061fc 	xorhi	r8,zero,391
 2005530:	02005750 	cmplti	r8,zero,349
 2005534:	02005758 	cmpnei	r8,zero,349
 2005538:	02005758 	cmpnei	r8,zero,349
 200553c:	02005758 	cmpnei	r8,zero,349
 2005540:	02005758 	cmpnei	r8,zero,349
 2005544:	02005758 	cmpnei	r8,zero,349
 2005548:	02005758 	cmpnei	r8,zero,349
 200554c:	02005758 	cmpnei	r8,zero,349
 2005550:	02005758 	cmpnei	r8,zero,349
 2005554:	02005758 	cmpnei	r8,zero,349
 2005558:	020061fc 	xorhi	r8,zero,391
 200555c:	020061fc 	xorhi	r8,zero,391
 2005560:	020061fc 	xorhi	r8,zero,391
 2005564:	020061fc 	xorhi	r8,zero,391
 2005568:	020061fc 	xorhi	r8,zero,391
 200556c:	020061fc 	xorhi	r8,zero,391
 2005570:	020061fc 	xorhi	r8,zero,391
 2005574:	020061fc 	xorhi	r8,zero,391
 2005578:	020061fc 	xorhi	r8,zero,391
 200557c:	020061fc 	xorhi	r8,zero,391
 2005580:	02005800 	call	200580 <__alt_mem_mem_Nios_PI+0x580>
 2005584:	02005900 	call	200590 <__alt_mem_mem_Nios_PI+0x590>
 2005588:	020061fc 	xorhi	r8,zero,391
 200558c:	02005900 	call	200590 <__alt_mem_mem_Nios_PI+0x590>
 2005590:	020061fc 	xorhi	r8,zero,391
 2005594:	020061fc 	xorhi	r8,zero,391
 2005598:	020061fc 	xorhi	r8,zero,391
 200559c:	020061fc 	xorhi	r8,zero,391
 20055a0:	02005794 	movui	r8,350
 20055a4:	020061fc 	xorhi	r8,zero,391
 20055a8:	020061fc 	xorhi	r8,zero,391
 20055ac:	02005c9c 	xori	r8,zero,370
 20055b0:	020061fc 	xorhi	r8,zero,391
 20055b4:	020061fc 	xorhi	r8,zero,391
 20055b8:	020061fc 	xorhi	r8,zero,391
 20055bc:	020061fc 	xorhi	r8,zero,391
 20055c0:	020061fc 	xorhi	r8,zero,391
 20055c4:	02005e18 	cmpnei	r8,zero,376
 20055c8:	020061fc 	xorhi	r8,zero,391
 20055cc:	020061fc 	xorhi	r8,zero,391
 20055d0:	02005ed8 	cmpnei	r8,zero,379
 20055d4:	020061fc 	xorhi	r8,zero,391
 20055d8:	020061fc 	xorhi	r8,zero,391
 20055dc:	020061fc 	xorhi	r8,zero,391
 20055e0:	020061fc 	xorhi	r8,zero,391
 20055e4:	020061fc 	xorhi	r8,zero,391
 20055e8:	020061fc 	xorhi	r8,zero,391
 20055ec:	020061fc 	xorhi	r8,zero,391
 20055f0:	020061fc 	xorhi	r8,zero,391
 20055f4:	020061fc 	xorhi	r8,zero,391
 20055f8:	020061fc 	xorhi	r8,zero,391
 20055fc:	020057d8 	cmpnei	r8,zero,351
 2005600:	02005804 	movi	r8,352
 2005604:	02005900 	call	200590 <__alt_mem_mem_Nios_PI+0x590>
 2005608:	02005900 	call	200590 <__alt_mem_mem_Nios_PI+0x590>
 200560c:	02005900 	call	200590 <__alt_mem_mem_Nios_PI+0x590>
 2005610:	0200579c 	xori	r8,zero,350
 2005614:	02005804 	movi	r8,352
 2005618:	020061fc 	xorhi	r8,zero,391
 200561c:	020061fc 	xorhi	r8,zero,391
 2005620:	020057a4 	muli	r8,zero,350
 2005624:	020061fc 	xorhi	r8,zero,391
 2005628:	02005bfc 	xorhi	r8,zero,367
 200562c:	02005ca0 	cmpeqi	r8,zero,370
 2005630:	02005d40 	call	2005d4 <__alt_mem_mem_Nios_PI+0x5d4>
 2005634:	020057d0 	cmplti	r8,zero,351
 2005638:	020061fc 	xorhi	r8,zero,391
 200563c:	02005d88 	cmpgei	r8,zero,374
 2005640:	020061fc 	xorhi	r8,zero,391
 2005644:	02005e1c 	xori	r8,zero,376
 2005648:	020061fc 	xorhi	r8,zero,391
 200564c:	020061fc 	xorhi	r8,zero,391
 2005650:	02005ee8 	cmpgeui	r8,zero,379
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 2005654:	e0bfc103 	ldbu	r2,-252(fp)
 2005658:	10803fcc 	andi	r2,r2,255
 200565c:	1080201c 	xori	r2,r2,128
 2005660:	10bfe004 	addi	r2,r2,-128
 2005664:	103f931e 	bne	r2,zero,20054b4 <___vfprintf_internal_r+0x254>
				sign = ' ';
 2005668:	00800804 	movi	r2,32
 200566c:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 2005670:	003f9006 	br	20054b4 <___vfprintf_internal_r+0x254>
		case '#':
			flags |= ALT;
 2005674:	9cc00054 	ori	r19,r19,1
			goto rflag;
 2005678:	003f8e06 	br	20054b4 <___vfprintf_internal_r+0x254>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 200567c:	e0bfe917 	ldw	r2,-92(fp)
 2005680:	10c00104 	addi	r3,r2,4
 2005684:	e0ffe915 	stw	r3,-92(fp)
 2005688:	10800017 	ldw	r2,0(r2)
 200568c:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 2005690:	e0bfad17 	ldw	r2,-332(fp)
 2005694:	10000116 	blt	r2,zero,200569c <___vfprintf_internal_r+0x43c>
				goto rflag;
 2005698:	003f8606 	br	20054b4 <___vfprintf_internal_r+0x254>
			width = -width;
 200569c:	e0bfad17 	ldw	r2,-332(fp)
 20056a0:	0085c83a 	sub	r2,zero,r2
 20056a4:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 20056a8:	9cc00114 	ori	r19,r19,4
			goto rflag;
 20056ac:	003f8106 	br	20054b4 <___vfprintf_internal_r+0x254>
		case '+':
			sign = '+';
 20056b0:	00800ac4 	movi	r2,43
 20056b4:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
 20056b8:	003f7e06 	br	20054b4 <___vfprintf_internal_r+0x254>
		case '.':
			if ((ch = *fmt++) == '*') {
 20056bc:	a805883a 	mov	r2,r21
 20056c0:	15400044 	addi	r21,r2,1
 20056c4:	10800003 	ldbu	r2,0(r2)
 20056c8:	15003fcc 	andi	r20,r2,255
 20056cc:	a500201c 	xori	r20,r20,128
 20056d0:	a53fe004 	addi	r20,r20,-128
 20056d4:	a0800a98 	cmpnei	r2,r20,42
 20056d8:	10000a1e 	bne	r2,zero,2005704 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 20056dc:	e0bfe917 	ldw	r2,-92(fp)
 20056e0:	10c00104 	addi	r3,r2,4
 20056e4:	e0ffe915 	stw	r3,-92(fp)
 20056e8:	10800017 	ldw	r2,0(r2)
 20056ec:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 20056f0:	e0bfae17 	ldw	r2,-328(fp)
 20056f4:	103f6f0e 	bge	r2,zero,20054b4 <___vfprintf_internal_r+0x254>
					prec = -1;
 20056f8:	00bfffc4 	movi	r2,-1
 20056fc:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
 2005700:	003f6c06 	br	20054b4 <___vfprintf_internal_r+0x254>
			}
			n = 0;
 2005704:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 2005708:	00000906 	br	2005730 <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
 200570c:	80c002a4 	muli	r3,r16,10
 2005710:	a0bff404 	addi	r2,r20,-48
 2005714:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2005718:	a805883a 	mov	r2,r21
 200571c:	15400044 	addi	r21,r2,1
 2005720:	10800003 	ldbu	r2,0(r2)
 2005724:	15003fcc 	andi	r20,r2,255
 2005728:	a500201c 	xori	r20,r20,128
 200572c:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 2005730:	a0bff404 	addi	r2,r20,-48
 2005734:	108002b0 	cmpltui	r2,r2,10
 2005738:	103ff41e 	bne	r2,zero,200570c <___vfprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200573c:	8005883a 	mov	r2,r16
 2005740:	1000010e 	bge	r2,zero,2005748 <___vfprintf_internal_r+0x4e8>
 2005744:	00bfffc4 	movi	r2,-1
 2005748:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
 200574c:	003f5f06 	br	20054cc <___vfprintf_internal_r+0x26c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 2005750:	9cc02014 	ori	r19,r19,128
			goto rflag;
 2005754:	003f5706 	br	20054b4 <___vfprintf_internal_r+0x254>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 2005758:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 200575c:	80c002a4 	muli	r3,r16,10
 2005760:	a0bff404 	addi	r2,r20,-48
 2005764:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 2005768:	a805883a 	mov	r2,r21
 200576c:	15400044 	addi	r21,r2,1
 2005770:	10800003 	ldbu	r2,0(r2)
 2005774:	15003fcc 	andi	r20,r2,255
 2005778:	a500201c 	xori	r20,r20,128
 200577c:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 2005780:	a0bff404 	addi	r2,r20,-48
 2005784:	108002b0 	cmpltui	r2,r2,10
 2005788:	103ff41e 	bne	r2,zero,200575c <___vfprintf_internal_r+0x4fc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 200578c:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
 2005790:	003f4e06 	br	20054cc <___vfprintf_internal_r+0x26c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 2005794:	9cc00214 	ori	r19,r19,8
			goto rflag;
 2005798:	003f4606 	br	20054b4 <___vfprintf_internal_r+0x254>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 200579c:	9cc01014 	ori	r19,r19,64
			goto rflag;
 20057a0:	003f4406 	br	20054b4 <___vfprintf_internal_r+0x254>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 20057a4:	a8800003 	ldbu	r2,0(r21)
 20057a8:	10803fcc 	andi	r2,r2,255
 20057ac:	1080201c 	xori	r2,r2,128
 20057b0:	10bfe004 	addi	r2,r2,-128
 20057b4:	10801b18 	cmpnei	r2,r2,108
 20057b8:	1000031e 	bne	r2,zero,20057c8 <___vfprintf_internal_r+0x568>
				fmt++;
 20057bc:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 20057c0:	9cc00814 	ori	r19,r19,32
 20057c4:	003f3b06 	br	20054b4 <___vfprintf_internal_r+0x254>
			} else
#endif
				flags |= LONGINT;
 20057c8:	9cc00414 	ori	r19,r19,16
			goto rflag;
 20057cc:	003f3906 	br	20054b4 <___vfprintf_internal_r+0x254>
		case 'q': /* extension */
			flags |= QUADINT;
 20057d0:	9cc00814 	ori	r19,r19,32
			goto rflag;
 20057d4:	003f3706 	br	20054b4 <___vfprintf_internal_r+0x254>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 20057d8:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 20057dc:	e0bfe917 	ldw	r2,-92(fp)
 20057e0:	10c00104 	addi	r3,r2,4
 20057e4:	e0ffe915 	stw	r3,-92(fp)
 20057e8:	10800017 	ldw	r2,0(r2)
 20057ec:	90800005 	stb	r2,0(r18)
				size = 1;
 20057f0:	00800044 	movi	r2,1
 20057f4:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
 20057f8:	e03fc105 	stb	zero,-252(fp)
			break;
 20057fc:	00028806 	br	2006220 <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
 2005800:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 2005804:	9880080c 	andi	r2,r19,32
 2005808:	10000826 	beq	r2,zero,200582c <___vfprintf_internal_r+0x5cc>
 200580c:	e13fe917 	ldw	r4,-92(fp)
 2005810:	20800204 	addi	r2,r4,8
 2005814:	e0bfe915 	stw	r2,-92(fp)
 2005818:	20800017 	ldw	r2,0(r4)
 200581c:	20c00117 	ldw	r3,4(r4)
 2005820:	e0bfea15 	stw	r2,-88(fp)
 2005824:	e0ffeb15 	stw	r3,-84(fp)
 2005828:	00001e06 	br	20058a4 <___vfprintf_internal_r+0x644>
 200582c:	9880040c 	andi	r2,r19,16
 2005830:	10000826 	beq	r2,zero,2005854 <___vfprintf_internal_r+0x5f4>
 2005834:	e0bfe917 	ldw	r2,-92(fp)
 2005838:	10c00104 	addi	r3,r2,4
 200583c:	e0ffe915 	stw	r3,-92(fp)
 2005840:	10800017 	ldw	r2,0(r2)
 2005844:	e0bfea15 	stw	r2,-88(fp)
 2005848:	1005d7fa 	srai	r2,r2,31
 200584c:	e0bfeb15 	stw	r2,-84(fp)
 2005850:	00001406 	br	20058a4 <___vfprintf_internal_r+0x644>
 2005854:	9880100c 	andi	r2,r19,64
 2005858:	10000b26 	beq	r2,zero,2005888 <___vfprintf_internal_r+0x628>
 200585c:	e0bfe917 	ldw	r2,-92(fp)
 2005860:	10c00104 	addi	r3,r2,4
 2005864:	e0ffe915 	stw	r3,-92(fp)
 2005868:	10800017 	ldw	r2,0(r2)
 200586c:	10bfffcc 	andi	r2,r2,65535
 2005870:	10a0001c 	xori	r2,r2,32768
 2005874:	10a00004 	addi	r2,r2,-32768
 2005878:	e0bfea15 	stw	r2,-88(fp)
 200587c:	1005d7fa 	srai	r2,r2,31
 2005880:	e0bfeb15 	stw	r2,-84(fp)
 2005884:	00000706 	br	20058a4 <___vfprintf_internal_r+0x644>
 2005888:	e0bfe917 	ldw	r2,-92(fp)
 200588c:	10c00104 	addi	r3,r2,4
 2005890:	e0ffe915 	stw	r3,-92(fp)
 2005894:	10800017 	ldw	r2,0(r2)
 2005898:	e0bfea15 	stw	r2,-88(fp)
 200589c:	1005d7fa 	srai	r2,r2,31
 20058a0:	e0bfeb15 	stw	r2,-84(fp)
 20058a4:	e0bfea17 	ldw	r2,-88(fp)
 20058a8:	e0bfb115 	stw	r2,-316(fp)
 20058ac:	e0ffeb17 	ldw	r3,-84(fp)
 20058b0:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 20058b4:	e0bfb117 	ldw	r2,-316(fp)
 20058b8:	e0ffb217 	ldw	r3,-312(fp)
 20058bc:	18000d0e 	bge	r3,zero,20058f4 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 20058c0:	000f883a 	mov	r7,zero
 20058c4:	0011883a 	mov	r8,zero
 20058c8:	e13fb117 	ldw	r4,-316(fp)
 20058cc:	e17fb217 	ldw	r5,-312(fp)
 20058d0:	3905c83a 	sub	r2,r7,r4
 20058d4:	388d803a 	cmpltu	r6,r7,r2
 20058d8:	4147c83a 	sub	r3,r8,r5
 20058dc:	1989c83a 	sub	r4,r3,r6
 20058e0:	2007883a 	mov	r3,r4
 20058e4:	e0bfb115 	stw	r2,-316(fp)
 20058e8:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
 20058ec:	00800b44 	movi	r2,45
 20058f0:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
 20058f4:	00800044 	movi	r2,1
 20058f8:	e0bfb305 	stb	r2,-308(fp)
			goto number;
 20058fc:	0001b706 	br	2005fdc <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 2005900:	9880020c 	andi	r2,r19,8
 2005904:	10000826 	beq	r2,zero,2005928 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 2005908:	e13fe917 	ldw	r4,-92(fp)
 200590c:	20800204 	addi	r2,r4,8
 2005910:	e0bfe915 	stw	r2,-92(fp)
 2005914:	20800017 	ldw	r2,0(r4)
 2005918:	20c00117 	ldw	r3,4(r4)
 200591c:	e0bfc215 	stw	r2,-248(fp)
 2005920:	e0ffc315 	stw	r3,-244(fp)
 2005924:	00000706 	br	2005944 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 2005928:	e13fe917 	ldw	r4,-92(fp)
 200592c:	20800204 	addi	r2,r4,8
 2005930:	e0bfe915 	stw	r2,-92(fp)
 2005934:	20800017 	ldw	r2,0(r4)
 2005938:	20c00117 	ldw	r3,4(r4)
 200593c:	e0bfc215 	stw	r2,-248(fp)
 2005940:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 2005944:	e0bfc217 	ldw	r2,-248(fp)
 2005948:	e0ffc317 	ldw	r3,-244(fp)
 200594c:	1009883a 	mov	r4,r2
 2005950:	180b883a 	mov	r5,r3
 2005954:	20033200 	call	2003320 <__fpclassifyd>
 2005958:	10800058 	cmpnei	r2,r2,1
 200595c:	1000161e 	bne	r2,zero,20059b8 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
 2005960:	e0bfc217 	ldw	r2,-248(fp)
 2005964:	e0ffc317 	ldw	r3,-244(fp)
 2005968:	000d883a 	mov	r6,zero
 200596c:	000f883a 	mov	r7,zero
 2005970:	1009883a 	mov	r4,r2
 2005974:	180b883a 	mov	r5,r3
 2005978:	2003de80 	call	2003de8 <__ledf2>
 200597c:	1000020e 	bge	r2,zero,2005988 <___vfprintf_internal_r+0x728>
					sign = '-';
 2005980:	00800b44 	movi	r2,45
 2005984:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 2005988:	a0801208 	cmpgei	r2,r20,72
 200598c:	1000031e 	bne	r2,zero,200599c <___vfprintf_internal_r+0x73c>
					cp = "INF";
 2005990:	048080b4 	movhi	r18,514
 2005994:	94ba7f04 	addi	r18,r18,-5636
 2005998:	00000206 	br	20059a4 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
 200599c:	048080b4 	movhi	r18,514
 20059a0:	94ba8004 	addi	r18,r18,-5632
				size = 3;
 20059a4:	008000c4 	movi	r2,3
 20059a8:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 20059ac:	00bfdfc4 	movi	r2,-129
 20059b0:	98a6703a 	and	r19,r19,r2
				break;
 20059b4:	00021a06 	br	2006220 <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
 20059b8:	e0bfc217 	ldw	r2,-248(fp)
 20059bc:	e0ffc317 	ldw	r3,-244(fp)
 20059c0:	1009883a 	mov	r4,r2
 20059c4:	180b883a 	mov	r5,r3
 20059c8:	20033200 	call	2003320 <__fpclassifyd>
 20059cc:	10000c1e 	bne	r2,zero,2005a00 <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 20059d0:	a0801208 	cmpgei	r2,r20,72
 20059d4:	1000031e 	bne	r2,zero,20059e4 <___vfprintf_internal_r+0x784>
					cp = "NAN";
 20059d8:	048080b4 	movhi	r18,514
 20059dc:	94ba8104 	addi	r18,r18,-5628
 20059e0:	00000206 	br	20059ec <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
 20059e4:	048080b4 	movhi	r18,514
 20059e8:	94ba8204 	addi	r18,r18,-5624
				size = 3;
 20059ec:	008000c4 	movi	r2,3
 20059f0:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
 20059f4:	00bfdfc4 	movi	r2,-129
 20059f8:	98a6703a 	and	r19,r19,r2
				break;
 20059fc:	00020806 	br	2006220 <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 2005a00:	e0bfae17 	ldw	r2,-328(fp)
 2005a04:	10bfffd8 	cmpnei	r2,r2,-1
 2005a08:	1000031e 	bne	r2,zero,2005a18 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
 2005a0c:	00800184 	movi	r2,6
 2005a10:	e0bfae15 	stw	r2,-328(fp)
 2005a14:	00000806 	br	2005a38 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 2005a18:	a08019e0 	cmpeqi	r2,r20,103
 2005a1c:	1000021e 	bne	r2,zero,2005a28 <___vfprintf_internal_r+0x7c8>
 2005a20:	a08011d8 	cmpnei	r2,r20,71
 2005a24:	1000041e 	bne	r2,zero,2005a38 <___vfprintf_internal_r+0x7d8>
 2005a28:	e0bfae17 	ldw	r2,-328(fp)
 2005a2c:	1000021e 	bne	r2,zero,2005a38 <___vfprintf_internal_r+0x7d8>
				prec = 1;
 2005a30:	00800044 	movi	r2,1
 2005a34:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
 2005a38:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 2005a3c:	e0bfc217 	ldw	r2,-248(fp)
 2005a40:	e0ffc317 	ldw	r3,-244(fp)
 2005a44:	dc800515 	stw	r18,20(sp)
 2005a48:	e13fc704 	addi	r4,fp,-228
 2005a4c:	d9000415 	stw	r4,16(sp)
 2005a50:	dd000315 	stw	r20,12(sp)
 2005a54:	e13fc404 	addi	r4,fp,-240
 2005a58:	d9000215 	stw	r4,8(sp)
 2005a5c:	e13fc144 	addi	r4,fp,-251
 2005a60:	d9000115 	stw	r4,4(sp)
 2005a64:	dcc00015 	stw	r19,0(sp)
 2005a68:	e1ffae17 	ldw	r7,-328(fp)
 2005a6c:	100b883a 	mov	r5,r2
 2005a70:	180d883a 	mov	r6,r3
 2005a74:	e13fe617 	ldw	r4,-104(fp)
 2005a78:	20073300 	call	2007330 <cvt>
 2005a7c:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 2005a80:	a08019e0 	cmpeqi	r2,r20,103
 2005a84:	1000021e 	bne	r2,zero,2005a90 <___vfprintf_internal_r+0x830>
 2005a88:	a08011d8 	cmpnei	r2,r20,71
 2005a8c:	1000091e 	bne	r2,zero,2005ab4 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
 2005a90:	e0bfc417 	ldw	r2,-240(fp)
 2005a94:	10bfff50 	cmplti	r2,r2,-3
 2005a98:	1000031e 	bne	r2,zero,2005aa8 <___vfprintf_internal_r+0x848>
 2005a9c:	e0bfc417 	ldw	r2,-240(fp)
 2005aa0:	e0ffae17 	ldw	r3,-328(fp)
 2005aa4:	1880020e 	bge	r3,r2,2005ab0 <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
 2005aa8:	a53fff84 	addi	r20,r20,-2
 2005aac:	00000106 	br	2005ab4 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
 2005ab0:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 2005ab4:	a0801988 	cmpgei	r2,r20,102
 2005ab8:	1000171e 	bne	r2,zero,2005b18 <___vfprintf_internal_r+0x8b8>
				--expt;
 2005abc:	e0bfc417 	ldw	r2,-240(fp)
 2005ac0:	10bfffc4 	addi	r2,r2,-1
 2005ac4:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
 2005ac8:	e0bfc417 	ldw	r2,-240(fp)
 2005acc:	e0ffc504 	addi	r3,fp,-236
 2005ad0:	a00d883a 	mov	r6,r20
 2005ad4:	100b883a 	mov	r5,r2
 2005ad8:	1809883a 	mov	r4,r3
 2005adc:	200753c0 	call	200753c <exponent>
 2005ae0:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
 2005ae4:	e0bfc717 	ldw	r2,-228(fp)
 2005ae8:	e0ffaf17 	ldw	r3,-324(fp)
 2005aec:	1885883a 	add	r2,r3,r2
 2005af0:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
 2005af4:	e0bfc717 	ldw	r2,-228(fp)
 2005af8:	10800088 	cmpgei	r2,r2,2
 2005afc:	1000021e 	bne	r2,zero,2005b08 <___vfprintf_internal_r+0x8a8>
 2005b00:	9880004c 	andi	r2,r19,1
 2005b04:	10003526 	beq	r2,zero,2005bdc <___vfprintf_internal_r+0x97c>
					++size;
 2005b08:	e0bfb617 	ldw	r2,-296(fp)
 2005b0c:	10800044 	addi	r2,r2,1
 2005b10:	e0bfb615 	stw	r2,-296(fp)
 2005b14:	00003106 	br	2005bdc <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 2005b18:	a0801998 	cmpnei	r2,r20,102
 2005b1c:	1000181e 	bne	r2,zero,2005b80 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
 2005b20:	e0bfc417 	ldw	r2,-240(fp)
 2005b24:	00800c0e 	bge	zero,r2,2005b58 <___vfprintf_internal_r+0x8f8>
						size = expt;
 2005b28:	e0bfc417 	ldw	r2,-240(fp)
 2005b2c:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
 2005b30:	e0bfae17 	ldw	r2,-328(fp)
 2005b34:	1000021e 	bne	r2,zero,2005b40 <___vfprintf_internal_r+0x8e0>
 2005b38:	9880004c 	andi	r2,r19,1
 2005b3c:	10002526 	beq	r2,zero,2005bd4 <___vfprintf_internal_r+0x974>
							size += prec + 1;
 2005b40:	e0bfae17 	ldw	r2,-328(fp)
 2005b44:	10800044 	addi	r2,r2,1
 2005b48:	e0ffb617 	ldw	r3,-296(fp)
 2005b4c:	1885883a 	add	r2,r3,r2
 2005b50:	e0bfb615 	stw	r2,-296(fp)
 2005b54:	00001f06 	br	2005bd4 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
 2005b58:	e0bfae17 	ldw	r2,-328(fp)
 2005b5c:	1000021e 	bne	r2,zero,2005b68 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2005b60:	9880004c 	andi	r2,r19,1
 2005b64:	10000326 	beq	r2,zero,2005b74 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
 2005b68:	e0bfae17 	ldw	r2,-328(fp)
 2005b6c:	10800084 	addi	r2,r2,2
 2005b70:	00000106 	br	2005b78 <___vfprintf_internal_r+0x918>
 2005b74:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
 2005b78:	e0bfb615 	stw	r2,-296(fp)
 2005b7c:	00001506 	br	2005bd4 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
 2005b80:	e0ffc417 	ldw	r3,-240(fp)
 2005b84:	e0bfc717 	ldw	r2,-228(fp)
 2005b88:	18800816 	blt	r3,r2,2005bac <___vfprintf_internal_r+0x94c>
					size = expt;
 2005b8c:	e0bfc417 	ldw	r2,-240(fp)
 2005b90:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
 2005b94:	9880004c 	andi	r2,r19,1
 2005b98:	10000e26 	beq	r2,zero,2005bd4 <___vfprintf_internal_r+0x974>
						++size;
 2005b9c:	e0bfb617 	ldw	r2,-296(fp)
 2005ba0:	10800044 	addi	r2,r2,1
 2005ba4:	e0bfb615 	stw	r2,-296(fp)
 2005ba8:	00000a06 	br	2005bd4 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
 2005bac:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
 2005bb0:	00800416 	blt	zero,r2,2005bc4 <___vfprintf_internal_r+0x964>
 2005bb4:	e0bfc417 	ldw	r2,-240(fp)
 2005bb8:	00c00084 	movi	r3,2
 2005bbc:	1885c83a 	sub	r2,r3,r2
 2005bc0:	00000106 	br	2005bc8 <___vfprintf_internal_r+0x968>
 2005bc4:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
 2005bc8:	e0ffc717 	ldw	r3,-228(fp)
 2005bcc:	10c5883a 	add	r2,r2,r3
 2005bd0:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 2005bd4:	e0bfc417 	ldw	r2,-240(fp)
 2005bd8:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
 2005bdc:	e0bfc143 	ldbu	r2,-251(fp)
 2005be0:	10803fcc 	andi	r2,r2,255
 2005be4:	1080201c 	xori	r2,r2,128
 2005be8:	10bfe004 	addi	r2,r2,-128
 2005bec:	10018b26 	beq	r2,zero,200621c <___vfprintf_internal_r+0xfbc>
				sign = '-';
 2005bf0:	00800b44 	movi	r2,45
 2005bf4:	e0bfc105 	stb	r2,-252(fp)
			break;
 2005bf8:	00018806 	br	200621c <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 2005bfc:	9880080c 	andi	r2,r19,32
 2005c00:	10000d26 	beq	r2,zero,2005c38 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 2005c04:	e0bfe917 	ldw	r2,-92(fp)
 2005c08:	10c00104 	addi	r3,r2,4
 2005c0c:	e0ffe915 	stw	r3,-92(fp)
 2005c10:	10800017 	ldw	r2,0(r2)
 2005c14:	e0ffac17 	ldw	r3,-336(fp)
 2005c18:	e0fff015 	stw	r3,-64(fp)
 2005c1c:	1807d7fa 	srai	r3,r3,31
 2005c20:	e0fff115 	stw	r3,-60(fp)
 2005c24:	e0fff017 	ldw	r3,-64(fp)
 2005c28:	10c00015 	stw	r3,0(r2)
 2005c2c:	e0fff117 	ldw	r3,-60(fp)
 2005c30:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005c34:	00054b06 	br	2007164 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 2005c38:	9880040c 	andi	r2,r19,16
 2005c3c:	10000726 	beq	r2,zero,2005c5c <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 2005c40:	e0bfe917 	ldw	r2,-92(fp)
 2005c44:	10c00104 	addi	r3,r2,4
 2005c48:	e0ffe915 	stw	r3,-92(fp)
 2005c4c:	10800017 	ldw	r2,0(r2)
 2005c50:	e0ffac17 	ldw	r3,-336(fp)
 2005c54:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005c58:	00054206 	br	2007164 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 2005c5c:	9880100c 	andi	r2,r19,64
 2005c60:	10000726 	beq	r2,zero,2005c80 <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 2005c64:	e0bfe917 	ldw	r2,-92(fp)
 2005c68:	10c00104 	addi	r3,r2,4
 2005c6c:	e0ffe915 	stw	r3,-92(fp)
 2005c70:	10800017 	ldw	r2,0(r2)
 2005c74:	e0ffac17 	ldw	r3,-336(fp)
 2005c78:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 2005c7c:	00053906 	br	2007164 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 2005c80:	e0bfe917 	ldw	r2,-92(fp)
 2005c84:	10c00104 	addi	r3,r2,4
 2005c88:	e0ffe915 	stw	r3,-92(fp)
 2005c8c:	10800017 	ldw	r2,0(r2)
 2005c90:	e0ffac17 	ldw	r3,-336(fp)
 2005c94:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 2005c98:	00053206 	br	2007164 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
 2005c9c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 2005ca0:	9880080c 	andi	r2,r19,32
 2005ca4:	10000626 	beq	r2,zero,2005cc0 <___vfprintf_internal_r+0xa60>
 2005ca8:	e0bfe917 	ldw	r2,-92(fp)
 2005cac:	10c00204 	addi	r3,r2,8
 2005cb0:	e0ffe915 	stw	r3,-92(fp)
 2005cb4:	15800017 	ldw	r22,0(r2)
 2005cb8:	15c00117 	ldw	r23,4(r2)
 2005cbc:	00001c06 	br	2005d30 <___vfprintf_internal_r+0xad0>
 2005cc0:	9880040c 	andi	r2,r19,16
 2005cc4:	10000726 	beq	r2,zero,2005ce4 <___vfprintf_internal_r+0xa84>
 2005cc8:	e0bfe917 	ldw	r2,-92(fp)
 2005ccc:	10c00104 	addi	r3,r2,4
 2005cd0:	e0ffe915 	stw	r3,-92(fp)
 2005cd4:	10800017 	ldw	r2,0(r2)
 2005cd8:	102d883a 	mov	r22,r2
 2005cdc:	002f883a 	mov	r23,zero
 2005ce0:	00001306 	br	2005d30 <___vfprintf_internal_r+0xad0>
 2005ce4:	9880100c 	andi	r2,r19,64
 2005ce8:	10000b26 	beq	r2,zero,2005d18 <___vfprintf_internal_r+0xab8>
 2005cec:	e0bfe917 	ldw	r2,-92(fp)
 2005cf0:	10c00104 	addi	r3,r2,4
 2005cf4:	e0ffe915 	stw	r3,-92(fp)
 2005cf8:	10800017 	ldw	r2,0(r2)
 2005cfc:	e0bff215 	stw	r2,-56(fp)
 2005d00:	e03ff315 	stw	zero,-52(fp)
 2005d04:	e0bff217 	ldw	r2,-56(fp)
 2005d08:	15bfffcc 	andi	r22,r2,65535
 2005d0c:	e0fff317 	ldw	r3,-52(fp)
 2005d10:	182e703a 	and	r23,r3,zero
 2005d14:	00000606 	br	2005d30 <___vfprintf_internal_r+0xad0>
 2005d18:	e0bfe917 	ldw	r2,-92(fp)
 2005d1c:	10c00104 	addi	r3,r2,4
 2005d20:	e0ffe915 	stw	r3,-92(fp)
 2005d24:	10800017 	ldw	r2,0(r2)
 2005d28:	102d883a 	mov	r22,r2
 2005d2c:	002f883a 	mov	r23,zero
 2005d30:	e5bfb115 	stw	r22,-316(fp)
 2005d34:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
 2005d38:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 2005d3c:	0000a606 	br	2005fd8 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 2005d40:	e0bfe917 	ldw	r2,-92(fp)
 2005d44:	10c00104 	addi	r3,r2,4
 2005d48:	e0ffe915 	stw	r3,-92(fp)
 2005d4c:	10800017 	ldw	r2,0(r2)
 2005d50:	e0bfb115 	stw	r2,-316(fp)
 2005d54:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
 2005d58:	00800084 	movi	r2,2
 2005d5c:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
 2005d60:	008080b4 	movhi	r2,514
 2005d64:	10ba8304 	addi	r2,r2,-5620
 2005d68:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
 2005d6c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 2005d70:	00800c04 	movi	r2,48
 2005d74:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 2005d78:	05001e04 	movi	r20,120
 2005d7c:	00801e04 	movi	r2,120
 2005d80:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 2005d84:	00009406 	br	2005fd8 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 2005d88:	e0bfe917 	ldw	r2,-92(fp)
 2005d8c:	10c00104 	addi	r3,r2,4
 2005d90:	e0ffe915 	stw	r3,-92(fp)
 2005d94:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 2005d98:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 2005d9c:	9000081e 	bne	r18,zero,2005dc0 <___vfprintf_internal_r+0xb60>
				cp = "(null)";
 2005da0:	048080b4 	movhi	r18,514
 2005da4:	94ba8804 	addi	r18,r18,-5600
				size = ((unsigned) prec > 6U) ? 6 : prec;
 2005da8:	e0bfae17 	ldw	r2,-328(fp)
 2005dac:	10c001f0 	cmpltui	r3,r2,7
 2005db0:	1800011e 	bne	r3,zero,2005db8 <___vfprintf_internal_r+0xb58>
 2005db4:	00800184 	movi	r2,6
 2005db8:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2005dbc:	00011806 	br	2006220 <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 2005dc0:	e0bfae17 	ldw	r2,-328(fp)
 2005dc4:	10001016 	blt	r2,zero,2005e08 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 2005dc8:	e0bfae17 	ldw	r2,-328(fp)
 2005dcc:	100d883a 	mov	r6,r2
 2005dd0:	000b883a 	mov	r5,zero
 2005dd4:	9009883a 	mov	r4,r18
 2005dd8:	200c2a80 	call	200c2a8 <memchr>
 2005ddc:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
 2005de0:	e0bfbf17 	ldw	r2,-260(fp)
 2005de4:	10000526 	beq	r2,zero,2005dfc <___vfprintf_internal_r+0xb9c>
					size = p - cp;
 2005de8:	e0bfbf17 	ldw	r2,-260(fp)
 2005dec:	9007883a 	mov	r3,r18
 2005df0:	10c5c83a 	sub	r2,r2,r3
 2005df4:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 2005df8:	00010906 	br	2006220 <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 2005dfc:	e0bfae17 	ldw	r2,-328(fp)
 2005e00:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
 2005e04:	00010606 	br	2006220 <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 2005e08:	9009883a 	mov	r4,r18
 2005e0c:	200502c0 	call	200502c <strlen>
 2005e10:	e0bfb615 	stw	r2,-296(fp)

			break;
 2005e14:	00010206 	br	2006220 <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
 2005e18:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 2005e1c:	9880080c 	andi	r2,r19,32
 2005e20:	10000826 	beq	r2,zero,2005e44 <___vfprintf_internal_r+0xbe4>
 2005e24:	e0bfe917 	ldw	r2,-92(fp)
 2005e28:	10c00204 	addi	r3,r2,8
 2005e2c:	e0ffe915 	stw	r3,-92(fp)
 2005e30:	10c00017 	ldw	r3,0(r2)
 2005e34:	e0ffec15 	stw	r3,-80(fp)
 2005e38:	10c00117 	ldw	r3,4(r2)
 2005e3c:	e0ffed15 	stw	r3,-76(fp)
 2005e40:	00001e06 	br	2005ebc <___vfprintf_internal_r+0xc5c>
 2005e44:	9880040c 	andi	r2,r19,16
 2005e48:	10000726 	beq	r2,zero,2005e68 <___vfprintf_internal_r+0xc08>
 2005e4c:	e0bfe917 	ldw	r2,-92(fp)
 2005e50:	10c00104 	addi	r3,r2,4
 2005e54:	e0ffe915 	stw	r3,-92(fp)
 2005e58:	10800017 	ldw	r2,0(r2)
 2005e5c:	e0bfec15 	stw	r2,-80(fp)
 2005e60:	e03fed15 	stw	zero,-76(fp)
 2005e64:	00001506 	br	2005ebc <___vfprintf_internal_r+0xc5c>
 2005e68:	9880100c 	andi	r2,r19,64
 2005e6c:	10000d26 	beq	r2,zero,2005ea4 <___vfprintf_internal_r+0xc44>
 2005e70:	e0bfe917 	ldw	r2,-92(fp)
 2005e74:	10c00104 	addi	r3,r2,4
 2005e78:	e0ffe915 	stw	r3,-92(fp)
 2005e7c:	10800017 	ldw	r2,0(r2)
 2005e80:	e0bff415 	stw	r2,-48(fp)
 2005e84:	e03ff515 	stw	zero,-44(fp)
 2005e88:	e0bff417 	ldw	r2,-48(fp)
 2005e8c:	10bfffcc 	andi	r2,r2,65535
 2005e90:	e0bfec15 	stw	r2,-80(fp)
 2005e94:	e0fff517 	ldw	r3,-44(fp)
 2005e98:	1806703a 	and	r3,r3,zero
 2005e9c:	e0ffed15 	stw	r3,-76(fp)
 2005ea0:	00000606 	br	2005ebc <___vfprintf_internal_r+0xc5c>
 2005ea4:	e0bfe917 	ldw	r2,-92(fp)
 2005ea8:	10c00104 	addi	r3,r2,4
 2005eac:	e0ffe915 	stw	r3,-92(fp)
 2005eb0:	10800017 	ldw	r2,0(r2)
 2005eb4:	e0bfec15 	stw	r2,-80(fp)
 2005eb8:	e03fed15 	stw	zero,-76(fp)
 2005ebc:	e0bfec17 	ldw	r2,-80(fp)
 2005ec0:	e0bfb115 	stw	r2,-316(fp)
 2005ec4:	e0ffed17 	ldw	r3,-76(fp)
 2005ec8:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
 2005ecc:	00800044 	movi	r2,1
 2005ed0:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
 2005ed4:	00004006 	br	2005fd8 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
 2005ed8:	008080b4 	movhi	r2,514
 2005edc:	10ba8a04 	addi	r2,r2,-5592
 2005ee0:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
 2005ee4:	00000306 	br	2005ef4 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
 2005ee8:	008080b4 	movhi	r2,514
 2005eec:	10ba8304 	addi	r2,r2,-5620
 2005ef0:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
 2005ef4:	9880080c 	andi	r2,r19,32
 2005ef8:	10000826 	beq	r2,zero,2005f1c <___vfprintf_internal_r+0xcbc>
 2005efc:	e0bfe917 	ldw	r2,-92(fp)
 2005f00:	10c00204 	addi	r3,r2,8
 2005f04:	e0ffe915 	stw	r3,-92(fp)
 2005f08:	10c00017 	ldw	r3,0(r2)
 2005f0c:	e0ffee15 	stw	r3,-72(fp)
 2005f10:	10c00117 	ldw	r3,4(r2)
 2005f14:	e0ffef15 	stw	r3,-68(fp)
 2005f18:	00001e06 	br	2005f94 <___vfprintf_internal_r+0xd34>
 2005f1c:	9880040c 	andi	r2,r19,16
 2005f20:	10000726 	beq	r2,zero,2005f40 <___vfprintf_internal_r+0xce0>
 2005f24:	e0bfe917 	ldw	r2,-92(fp)
 2005f28:	10c00104 	addi	r3,r2,4
 2005f2c:	e0ffe915 	stw	r3,-92(fp)
 2005f30:	10800017 	ldw	r2,0(r2)
 2005f34:	e0bfee15 	stw	r2,-72(fp)
 2005f38:	e03fef15 	stw	zero,-68(fp)
 2005f3c:	00001506 	br	2005f94 <___vfprintf_internal_r+0xd34>
 2005f40:	9880100c 	andi	r2,r19,64
 2005f44:	10000d26 	beq	r2,zero,2005f7c <___vfprintf_internal_r+0xd1c>
 2005f48:	e0bfe917 	ldw	r2,-92(fp)
 2005f4c:	10c00104 	addi	r3,r2,4
 2005f50:	e0ffe915 	stw	r3,-92(fp)
 2005f54:	10800017 	ldw	r2,0(r2)
 2005f58:	e0bff615 	stw	r2,-40(fp)
 2005f5c:	e03ff715 	stw	zero,-36(fp)
 2005f60:	e0bff617 	ldw	r2,-40(fp)
 2005f64:	10bfffcc 	andi	r2,r2,65535
 2005f68:	e0bfee15 	stw	r2,-72(fp)
 2005f6c:	e0fff717 	ldw	r3,-36(fp)
 2005f70:	1806703a 	and	r3,r3,zero
 2005f74:	e0ffef15 	stw	r3,-68(fp)
 2005f78:	00000606 	br	2005f94 <___vfprintf_internal_r+0xd34>
 2005f7c:	e0bfe917 	ldw	r2,-92(fp)
 2005f80:	10c00104 	addi	r3,r2,4
 2005f84:	e0ffe915 	stw	r3,-92(fp)
 2005f88:	10800017 	ldw	r2,0(r2)
 2005f8c:	e0bfee15 	stw	r2,-72(fp)
 2005f90:	e03fef15 	stw	zero,-68(fp)
 2005f94:	e0bfee17 	ldw	r2,-72(fp)
 2005f98:	e0bfb115 	stw	r2,-316(fp)
 2005f9c:	e0ffef17 	ldw	r3,-68(fp)
 2005fa0:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
 2005fa4:	00800084 	movi	r2,2
 2005fa8:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 2005fac:	9880004c 	andi	r2,r19,1
 2005fb0:	10000926 	beq	r2,zero,2005fd8 <___vfprintf_internal_r+0xd78>
 2005fb4:	e0bfb117 	ldw	r2,-316(fp)
 2005fb8:	e0ffb217 	ldw	r3,-312(fp)
 2005fbc:	10c4b03a 	or	r2,r2,r3
 2005fc0:	10000526 	beq	r2,zero,2005fd8 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
 2005fc4:	00800c04 	movi	r2,48
 2005fc8:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 2005fcc:	a005883a 	mov	r2,r20
 2005fd0:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 2005fd4:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 2005fd8:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 2005fdc:	e0bfae17 	ldw	r2,-328(fp)
 2005fe0:	e0bfb415 	stw	r2,-304(fp)
 2005fe4:	e0bfb417 	ldw	r2,-304(fp)
 2005fe8:	10000216 	blt	r2,zero,2005ff4 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
 2005fec:	00bfdfc4 	movi	r2,-129
 2005ff0:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 2005ff4:	e4bfdb04 	addi	r18,fp,-148
 2005ff8:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 2005ffc:	e0bfb117 	ldw	r2,-316(fp)
 2006000:	e0ffb217 	ldw	r3,-312(fp)
 2006004:	10c4b03a 	or	r2,r2,r3
 2006008:	1000021e 	bne	r2,zero,2006014 <___vfprintf_internal_r+0xdb4>
 200600c:	e0bfae17 	ldw	r2,-328(fp)
 2006010:	10006c26 	beq	r2,zero,20061c4 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 2006014:	e0bfb303 	ldbu	r2,-308(fp)
 2006018:	10c00060 	cmpeqi	r3,r2,1
 200601c:	1800211e 	bne	r3,zero,20060a4 <___vfprintf_internal_r+0xe44>
 2006020:	10c000a0 	cmpeqi	r3,r2,2
 2006024:	1800491e 	bne	r3,zero,200614c <___vfprintf_internal_r+0xeec>
 2006028:	10005d1e 	bne	r2,zero,20061a0 <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200602c:	94bfffc4 	addi	r18,r18,-1
 2006030:	e0bfb117 	ldw	r2,-316(fp)
 2006034:	108001cc 	andi	r2,r2,7
 2006038:	10800c04 	addi	r2,r2,48
 200603c:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 2006040:	e0bfb217 	ldw	r2,-312(fp)
 2006044:	1004977a 	slli	r2,r2,29
 2006048:	e0ffb117 	ldw	r3,-316(fp)
 200604c:	1806d0fa 	srli	r3,r3,3
 2006050:	1884b03a 	or	r2,r3,r2
 2006054:	e0bfb115 	stw	r2,-316(fp)
 2006058:	e0bfb217 	ldw	r2,-312(fp)
 200605c:	1004d0fa 	srli	r2,r2,3
 2006060:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 2006064:	e0bfb117 	ldw	r2,-316(fp)
 2006068:	e0ffb217 	ldw	r3,-312(fp)
 200606c:	10c4b03a 	or	r2,r2,r3
 2006070:	103fee1e 	bne	r2,zero,200602c <___vfprintf_internal_r+0xdcc>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 2006074:	9880004c 	andi	r2,r19,1
 2006078:	10005026 	beq	r2,zero,20061bc <___vfprintf_internal_r+0xf5c>
 200607c:	90800003 	ldbu	r2,0(r18)
 2006080:	10803fcc 	andi	r2,r2,255
 2006084:	1080201c 	xori	r2,r2,128
 2006088:	10bfe004 	addi	r2,r2,-128
 200608c:	10800c20 	cmpeqi	r2,r2,48
 2006090:	10004a1e 	bne	r2,zero,20061bc <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
 2006094:	94bfffc4 	addi	r18,r18,-1
 2006098:	00800c04 	movi	r2,48
 200609c:	90800005 	stb	r2,0(r18)
					break;
 20060a0:	00004606 	br	20061bc <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 20060a4:	e0bfb217 	ldw	r2,-312(fp)
 20060a8:	10000a1e 	bne	r2,zero,20060d4 <___vfprintf_internal_r+0xe74>
 20060ac:	e0bfb217 	ldw	r2,-312(fp)
 20060b0:	1000031e 	bne	r2,zero,20060c0 <___vfprintf_internal_r+0xe60>
 20060b4:	e0bfb117 	ldw	r2,-316(fp)
 20060b8:	108002a8 	cmpgeui	r2,r2,10
 20060bc:	1000051e 	bne	r2,zero,20060d4 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
 20060c0:	94bfffc4 	addi	r18,r18,-1
 20060c4:	e0bfb117 	ldw	r2,-316(fp)
 20060c8:	10800c04 	addi	r2,r2,48
 20060cc:	90800005 	stb	r2,0(r18)
						break;
 20060d0:	00003b06 	br	20061c0 <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 20060d4:	94bfffc4 	addi	r18,r18,-1
 20060d8:	e0bfb117 	ldw	r2,-316(fp)
 20060dc:	e0ffb217 	ldw	r3,-312(fp)
 20060e0:	01800284 	movi	r6,10
 20060e4:	000f883a 	mov	r7,zero
 20060e8:	1009883a 	mov	r4,r2
 20060ec:	180b883a 	mov	r5,r3
 20060f0:	20117f40 	call	20117f4 <__umoddi3>
 20060f4:	1009883a 	mov	r4,r2
 20060f8:	180b883a 	mov	r5,r3
 20060fc:	2005883a 	mov	r2,r4
 2006100:	2807883a 	mov	r3,r5
 2006104:	10800c04 	addi	r2,r2,48
 2006108:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200610c:	e0bfb117 	ldw	r2,-316(fp)
 2006110:	e0ffb217 	ldw	r3,-312(fp)
 2006114:	01800284 	movi	r6,10
 2006118:	000f883a 	mov	r7,zero
 200611c:	1009883a 	mov	r4,r2
 2006120:	180b883a 	mov	r5,r3
 2006124:	201127c0 	call	201127c <__udivdi3>
 2006128:	1009883a 	mov	r4,r2
 200612c:	180b883a 	mov	r5,r3
 2006130:	e13fb115 	stw	r4,-316(fp)
 2006134:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
 2006138:	e0bfb117 	ldw	r2,-316(fp)
 200613c:	e0ffb217 	ldw	r3,-312(fp)
 2006140:	10c4b03a 	or	r2,r2,r3
 2006144:	103fe31e 	bne	r2,zero,20060d4 <___vfprintf_internal_r+0xe74>
					break;
 2006148:	00001d06 	br	20061c0 <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200614c:	94bfffc4 	addi	r18,r18,-1
 2006150:	e0bfb117 	ldw	r2,-316(fp)
 2006154:	108003cc 	andi	r2,r2,15
 2006158:	e0ffb717 	ldw	r3,-292(fp)
 200615c:	1885883a 	add	r2,r3,r2
 2006160:	10800003 	ldbu	r2,0(r2)
 2006164:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 2006168:	e0bfb217 	ldw	r2,-312(fp)
 200616c:	1004973a 	slli	r2,r2,28
 2006170:	e0ffb117 	ldw	r3,-316(fp)
 2006174:	1806d13a 	srli	r3,r3,4
 2006178:	1884b03a 	or	r2,r3,r2
 200617c:	e0bfb115 	stw	r2,-316(fp)
 2006180:	e0bfb217 	ldw	r2,-312(fp)
 2006184:	1004d13a 	srli	r2,r2,4
 2006188:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
 200618c:	e0bfb117 	ldw	r2,-316(fp)
 2006190:	e0ffb217 	ldw	r3,-312(fp)
 2006194:	10c4b03a 	or	r2,r2,r3
 2006198:	103fec1e 	bne	r2,zero,200614c <___vfprintf_internal_r+0xeec>
					break;
 200619c:	00000806 	br	20061c0 <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
 20061a0:	048080b4 	movhi	r18,514
 20061a4:	94ba8f04 	addi	r18,r18,-5572
					size = strlen (cp);
 20061a8:	9009883a 	mov	r4,r18
 20061ac:	200502c0 	call	200502c <strlen>
 20061b0:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
 20061b4:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 20061b8:	00001906 	br	2006220 <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 20061bc:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 20061c0:	00000706 	br	20061e0 <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 20061c4:	e0bfb303 	ldbu	r2,-308(fp)
 20061c8:	1000051e 	bne	r2,zero,20061e0 <___vfprintf_internal_r+0xf80>
 20061cc:	9880004c 	andi	r2,r19,1
 20061d0:	10000326 	beq	r2,zero,20061e0 <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
 20061d4:	94bfffc4 	addi	r18,r18,-1
 20061d8:	00800c04 	movi	r2,48
 20061dc:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
 20061e0:	e0bfdb04 	addi	r2,fp,-148
 20061e4:	10800a04 	addi	r2,r2,40
 20061e8:	1007883a 	mov	r3,r2
 20061ec:	9005883a 	mov	r2,r18
 20061f0:	1885c83a 	sub	r2,r3,r2
 20061f4:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
 20061f8:	00000906 	br	2006220 <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 20061fc:	a003dc26 	beq	r20,zero,2007170 <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 2006200:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
 2006204:	a005883a 	mov	r2,r20
 2006208:	90800005 	stb	r2,0(r18)
			size = 1;
 200620c:	00800044 	movi	r2,1
 2006210:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
 2006214:	e03fc105 	stb	zero,-252(fp)
			break;
 2006218:	00000106 	br	2006220 <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
 200621c:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 2006220:	e0ffb417 	ldw	r3,-304(fp)
 2006224:	e0bfb617 	ldw	r2,-296(fp)
 2006228:	10c0010e 	bge	r2,r3,2006230 <___vfprintf_internal_r+0xfd0>
 200622c:	1805883a 	mov	r2,r3
 2006230:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
 2006234:	e0bfc103 	ldbu	r2,-252(fp)
 2006238:	10803fcc 	andi	r2,r2,255
 200623c:	1080201c 	xori	r2,r2,128
 2006240:	10bfe004 	addi	r2,r2,-128
 2006244:	10000326 	beq	r2,zero,2006254 <___vfprintf_internal_r+0xff4>
			realsz++;
 2006248:	e0bfb517 	ldw	r2,-300(fp)
 200624c:	10800044 	addi	r2,r2,1
 2006250:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
 2006254:	9880008c 	andi	r2,r19,2
 2006258:	10000326 	beq	r2,zero,2006268 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
 200625c:	e0bfb517 	ldw	r2,-300(fp)
 2006260:	10800084 	addi	r2,r2,2
 2006264:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 2006268:	9880210c 	andi	r2,r19,132
 200626c:	1000351e 	bne	r2,zero,2006344 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
 2006270:	e0ffad17 	ldw	r3,-332(fp)
 2006274:	e0bfb517 	ldw	r2,-300(fp)
 2006278:	18a1c83a 	sub	r16,r3,r2
 200627c:	0400310e 	bge	zero,r16,2006344 <___vfprintf_internal_r+0x10e4>
 2006280:	00001706 	br	20062e0 <___vfprintf_internal_r+0x1080>
 2006284:	008080b4 	movhi	r2,514
 2006288:	10ba9684 	addi	r2,r2,-5542
 200628c:	88800015 	stw	r2,0(r17)
 2006290:	00800404 	movi	r2,16
 2006294:	88800115 	stw	r2,4(r17)
 2006298:	e0bfca17 	ldw	r2,-216(fp)
 200629c:	10800404 	addi	r2,r2,16
 20062a0:	e0bfca15 	stw	r2,-216(fp)
 20062a4:	8c400204 	addi	r17,r17,8
 20062a8:	e0bfc917 	ldw	r2,-220(fp)
 20062ac:	10800044 	addi	r2,r2,1
 20062b0:	e0bfc915 	stw	r2,-220(fp)
 20062b4:	e0bfc917 	ldw	r2,-220(fp)
 20062b8:	10800210 	cmplti	r2,r2,8
 20062bc:	1000071e 	bne	r2,zero,20062dc <___vfprintf_internal_r+0x107c>
 20062c0:	e0bfc804 	addi	r2,fp,-224
 20062c4:	100d883a 	mov	r6,r2
 20062c8:	e17fe717 	ldw	r5,-100(fp)
 20062cc:	e13fe617 	ldw	r4,-104(fp)
 20062d0:	200f0e80 	call	200f0e8 <__sprint_r>
 20062d4:	1003b41e 	bne	r2,zero,20071a8 <___vfprintf_internal_r+0x1f48>
 20062d8:	e47fcb04 	addi	r17,fp,-212
 20062dc:	843ffc04 	addi	r16,r16,-16
 20062e0:	80800448 	cmpgei	r2,r16,17
 20062e4:	103fe71e 	bne	r2,zero,2006284 <___vfprintf_internal_r+0x1024>
 20062e8:	008080b4 	movhi	r2,514
 20062ec:	10ba9684 	addi	r2,r2,-5542
 20062f0:	88800015 	stw	r2,0(r17)
 20062f4:	8005883a 	mov	r2,r16
 20062f8:	88800115 	stw	r2,4(r17)
 20062fc:	e0bfca17 	ldw	r2,-216(fp)
 2006300:	8007883a 	mov	r3,r16
 2006304:	10c5883a 	add	r2,r2,r3
 2006308:	e0bfca15 	stw	r2,-216(fp)
 200630c:	8c400204 	addi	r17,r17,8
 2006310:	e0bfc917 	ldw	r2,-220(fp)
 2006314:	10800044 	addi	r2,r2,1
 2006318:	e0bfc915 	stw	r2,-220(fp)
 200631c:	e0bfc917 	ldw	r2,-220(fp)
 2006320:	10800210 	cmplti	r2,r2,8
 2006324:	1000071e 	bne	r2,zero,2006344 <___vfprintf_internal_r+0x10e4>
 2006328:	e0bfc804 	addi	r2,fp,-224
 200632c:	100d883a 	mov	r6,r2
 2006330:	e17fe717 	ldw	r5,-100(fp)
 2006334:	e13fe617 	ldw	r4,-104(fp)
 2006338:	200f0e80 	call	200f0e8 <__sprint_r>
 200633c:	10039c1e 	bne	r2,zero,20071b0 <___vfprintf_internal_r+0x1f50>
 2006340:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
 2006344:	e0bfc103 	ldbu	r2,-252(fp)
 2006348:	10803fcc 	andi	r2,r2,255
 200634c:	1080201c 	xori	r2,r2,128
 2006350:	10bfe004 	addi	r2,r2,-128
 2006354:	10001526 	beq	r2,zero,20063ac <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
 2006358:	e0bfc104 	addi	r2,fp,-252
 200635c:	88800015 	stw	r2,0(r17)
 2006360:	00800044 	movi	r2,1
 2006364:	88800115 	stw	r2,4(r17)
 2006368:	e0bfca17 	ldw	r2,-216(fp)
 200636c:	10800044 	addi	r2,r2,1
 2006370:	e0bfca15 	stw	r2,-216(fp)
 2006374:	8c400204 	addi	r17,r17,8
 2006378:	e0bfc917 	ldw	r2,-220(fp)
 200637c:	10800044 	addi	r2,r2,1
 2006380:	e0bfc915 	stw	r2,-220(fp)
 2006384:	e0bfc917 	ldw	r2,-220(fp)
 2006388:	10800210 	cmplti	r2,r2,8
 200638c:	1000071e 	bne	r2,zero,20063ac <___vfprintf_internal_r+0x114c>
 2006390:	e0bfc804 	addi	r2,fp,-224
 2006394:	100d883a 	mov	r6,r2
 2006398:	e17fe717 	ldw	r5,-100(fp)
 200639c:	e13fe617 	ldw	r4,-104(fp)
 20063a0:	200f0e80 	call	200f0e8 <__sprint_r>
 20063a4:	1003841e 	bne	r2,zero,20071b8 <___vfprintf_internal_r+0x1f58>
 20063a8:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
 20063ac:	9880008c 	andi	r2,r19,2
 20063b0:	10001526 	beq	r2,zero,2006408 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
 20063b4:	e0bfe504 	addi	r2,fp,-108
 20063b8:	88800015 	stw	r2,0(r17)
 20063bc:	00800084 	movi	r2,2
 20063c0:	88800115 	stw	r2,4(r17)
 20063c4:	e0bfca17 	ldw	r2,-216(fp)
 20063c8:	10800084 	addi	r2,r2,2
 20063cc:	e0bfca15 	stw	r2,-216(fp)
 20063d0:	8c400204 	addi	r17,r17,8
 20063d4:	e0bfc917 	ldw	r2,-220(fp)
 20063d8:	10800044 	addi	r2,r2,1
 20063dc:	e0bfc915 	stw	r2,-220(fp)
 20063e0:	e0bfc917 	ldw	r2,-220(fp)
 20063e4:	10800210 	cmplti	r2,r2,8
 20063e8:	1000071e 	bne	r2,zero,2006408 <___vfprintf_internal_r+0x11a8>
 20063ec:	e0bfc804 	addi	r2,fp,-224
 20063f0:	100d883a 	mov	r6,r2
 20063f4:	e17fe717 	ldw	r5,-100(fp)
 20063f8:	e13fe617 	ldw	r4,-104(fp)
 20063fc:	200f0e80 	call	200f0e8 <__sprint_r>
 2006400:	10036f1e 	bne	r2,zero,20071c0 <___vfprintf_internal_r+0x1f60>
 2006404:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 2006408:	9880210c 	andi	r2,r19,132
 200640c:	10802018 	cmpnei	r2,r2,128
 2006410:	1000351e 	bne	r2,zero,20064e8 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
 2006414:	e0ffad17 	ldw	r3,-332(fp)
 2006418:	e0bfb517 	ldw	r2,-300(fp)
 200641c:	18a1c83a 	sub	r16,r3,r2
 2006420:	0400310e 	bge	zero,r16,20064e8 <___vfprintf_internal_r+0x1288>
 2006424:	00001706 	br	2006484 <___vfprintf_internal_r+0x1224>
 2006428:	008080b4 	movhi	r2,514
 200642c:	10ba9a84 	addi	r2,r2,-5526
 2006430:	88800015 	stw	r2,0(r17)
 2006434:	00800404 	movi	r2,16
 2006438:	88800115 	stw	r2,4(r17)
 200643c:	e0bfca17 	ldw	r2,-216(fp)
 2006440:	10800404 	addi	r2,r2,16
 2006444:	e0bfca15 	stw	r2,-216(fp)
 2006448:	8c400204 	addi	r17,r17,8
 200644c:	e0bfc917 	ldw	r2,-220(fp)
 2006450:	10800044 	addi	r2,r2,1
 2006454:	e0bfc915 	stw	r2,-220(fp)
 2006458:	e0bfc917 	ldw	r2,-220(fp)
 200645c:	10800210 	cmplti	r2,r2,8
 2006460:	1000071e 	bne	r2,zero,2006480 <___vfprintf_internal_r+0x1220>
 2006464:	e0bfc804 	addi	r2,fp,-224
 2006468:	100d883a 	mov	r6,r2
 200646c:	e17fe717 	ldw	r5,-100(fp)
 2006470:	e13fe617 	ldw	r4,-104(fp)
 2006474:	200f0e80 	call	200f0e8 <__sprint_r>
 2006478:	1003531e 	bne	r2,zero,20071c8 <___vfprintf_internal_r+0x1f68>
 200647c:	e47fcb04 	addi	r17,fp,-212
 2006480:	843ffc04 	addi	r16,r16,-16
 2006484:	80800448 	cmpgei	r2,r16,17
 2006488:	103fe71e 	bne	r2,zero,2006428 <___vfprintf_internal_r+0x11c8>
 200648c:	008080b4 	movhi	r2,514
 2006490:	10ba9a84 	addi	r2,r2,-5526
 2006494:	88800015 	stw	r2,0(r17)
 2006498:	8005883a 	mov	r2,r16
 200649c:	88800115 	stw	r2,4(r17)
 20064a0:	e0bfca17 	ldw	r2,-216(fp)
 20064a4:	8007883a 	mov	r3,r16
 20064a8:	10c5883a 	add	r2,r2,r3
 20064ac:	e0bfca15 	stw	r2,-216(fp)
 20064b0:	8c400204 	addi	r17,r17,8
 20064b4:	e0bfc917 	ldw	r2,-220(fp)
 20064b8:	10800044 	addi	r2,r2,1
 20064bc:	e0bfc915 	stw	r2,-220(fp)
 20064c0:	e0bfc917 	ldw	r2,-220(fp)
 20064c4:	10800210 	cmplti	r2,r2,8
 20064c8:	1000071e 	bne	r2,zero,20064e8 <___vfprintf_internal_r+0x1288>
 20064cc:	e0bfc804 	addi	r2,fp,-224
 20064d0:	100d883a 	mov	r6,r2
 20064d4:	e17fe717 	ldw	r5,-100(fp)
 20064d8:	e13fe617 	ldw	r4,-104(fp)
 20064dc:	200f0e80 	call	200f0e8 <__sprint_r>
 20064e0:	10033b1e 	bne	r2,zero,20071d0 <___vfprintf_internal_r+0x1f70>
 20064e4:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 20064e8:	e0ffb417 	ldw	r3,-304(fp)
 20064ec:	e0bfb617 	ldw	r2,-296(fp)
 20064f0:	18a1c83a 	sub	r16,r3,r2
 20064f4:	0400310e 	bge	zero,r16,20065bc <___vfprintf_internal_r+0x135c>
 20064f8:	00001706 	br	2006558 <___vfprintf_internal_r+0x12f8>
 20064fc:	008080b4 	movhi	r2,514
 2006500:	10ba9a84 	addi	r2,r2,-5526
 2006504:	88800015 	stw	r2,0(r17)
 2006508:	00800404 	movi	r2,16
 200650c:	88800115 	stw	r2,4(r17)
 2006510:	e0bfca17 	ldw	r2,-216(fp)
 2006514:	10800404 	addi	r2,r2,16
 2006518:	e0bfca15 	stw	r2,-216(fp)
 200651c:	8c400204 	addi	r17,r17,8
 2006520:	e0bfc917 	ldw	r2,-220(fp)
 2006524:	10800044 	addi	r2,r2,1
 2006528:	e0bfc915 	stw	r2,-220(fp)
 200652c:	e0bfc917 	ldw	r2,-220(fp)
 2006530:	10800210 	cmplti	r2,r2,8
 2006534:	1000071e 	bne	r2,zero,2006554 <___vfprintf_internal_r+0x12f4>
 2006538:	e0bfc804 	addi	r2,fp,-224
 200653c:	100d883a 	mov	r6,r2
 2006540:	e17fe717 	ldw	r5,-100(fp)
 2006544:	e13fe617 	ldw	r4,-104(fp)
 2006548:	200f0e80 	call	200f0e8 <__sprint_r>
 200654c:	1003221e 	bne	r2,zero,20071d8 <___vfprintf_internal_r+0x1f78>
 2006550:	e47fcb04 	addi	r17,fp,-212
 2006554:	843ffc04 	addi	r16,r16,-16
 2006558:	80800448 	cmpgei	r2,r16,17
 200655c:	103fe71e 	bne	r2,zero,20064fc <___vfprintf_internal_r+0x129c>
 2006560:	008080b4 	movhi	r2,514
 2006564:	10ba9a84 	addi	r2,r2,-5526
 2006568:	88800015 	stw	r2,0(r17)
 200656c:	8005883a 	mov	r2,r16
 2006570:	88800115 	stw	r2,4(r17)
 2006574:	e0bfca17 	ldw	r2,-216(fp)
 2006578:	8007883a 	mov	r3,r16
 200657c:	10c5883a 	add	r2,r2,r3
 2006580:	e0bfca15 	stw	r2,-216(fp)
 2006584:	8c400204 	addi	r17,r17,8
 2006588:	e0bfc917 	ldw	r2,-220(fp)
 200658c:	10800044 	addi	r2,r2,1
 2006590:	e0bfc915 	stw	r2,-220(fp)
 2006594:	e0bfc917 	ldw	r2,-220(fp)
 2006598:	10800210 	cmplti	r2,r2,8
 200659c:	1000071e 	bne	r2,zero,20065bc <___vfprintf_internal_r+0x135c>
 20065a0:	e0bfc804 	addi	r2,fp,-224
 20065a4:	100d883a 	mov	r6,r2
 20065a8:	e17fe717 	ldw	r5,-100(fp)
 20065ac:	e13fe617 	ldw	r4,-104(fp)
 20065b0:	200f0e80 	call	200f0e8 <__sprint_r>
 20065b4:	10030a1e 	bne	r2,zero,20071e0 <___vfprintf_internal_r+0x1f80>
 20065b8:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 20065bc:	9880400c 	andi	r2,r19,256
 20065c0:	1000161e 	bne	r2,zero,200661c <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
 20065c4:	8c800015 	stw	r18,0(r17)
 20065c8:	e0bfb617 	ldw	r2,-296(fp)
 20065cc:	88800115 	stw	r2,4(r17)
 20065d0:	e0ffca17 	ldw	r3,-216(fp)
 20065d4:	e0bfb617 	ldw	r2,-296(fp)
 20065d8:	1885883a 	add	r2,r3,r2
 20065dc:	e0bfca15 	stw	r2,-216(fp)
 20065e0:	8c400204 	addi	r17,r17,8
 20065e4:	e0bfc917 	ldw	r2,-220(fp)
 20065e8:	10800044 	addi	r2,r2,1
 20065ec:	e0bfc915 	stw	r2,-220(fp)
 20065f0:	e0bfc917 	ldw	r2,-220(fp)
 20065f4:	10800210 	cmplti	r2,r2,8
 20065f8:	10028c1e 	bne	r2,zero,200702c <___vfprintf_internal_r+0x1dcc>
 20065fc:	e0bfc804 	addi	r2,fp,-224
 2006600:	100d883a 	mov	r6,r2
 2006604:	e17fe717 	ldw	r5,-100(fp)
 2006608:	e13fe617 	ldw	r4,-104(fp)
 200660c:	200f0e80 	call	200f0e8 <__sprint_r>
 2006610:	1002f51e 	bne	r2,zero,20071e8 <___vfprintf_internal_r+0x1f88>
 2006614:	e47fcb04 	addi	r17,fp,-212
 2006618:	00028406 	br	200702c <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 200661c:	a0801990 	cmplti	r2,r20,102
 2006620:	1001d11e 	bne	r2,zero,2006d68 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
 2006624:	e0bfc217 	ldw	r2,-248(fp)
 2006628:	e0ffc317 	ldw	r3,-244(fp)
 200662c:	000d883a 	mov	r6,zero
 2006630:	000f883a 	mov	r7,zero
 2006634:	1009883a 	mov	r4,r2
 2006638:	180b883a 	mov	r5,r3
 200663c:	20125d80 	call	20125d8 <__eqdf2>
 2006640:	1000661e 	bne	r2,zero,20067dc <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 2006644:	008080b4 	movhi	r2,514
 2006648:	10ba9604 	addi	r2,r2,-5544
 200664c:	88800015 	stw	r2,0(r17)
 2006650:	00800044 	movi	r2,1
 2006654:	88800115 	stw	r2,4(r17)
 2006658:	e0bfca17 	ldw	r2,-216(fp)
 200665c:	10800044 	addi	r2,r2,1
 2006660:	e0bfca15 	stw	r2,-216(fp)
 2006664:	8c400204 	addi	r17,r17,8
 2006668:	e0bfc917 	ldw	r2,-220(fp)
 200666c:	10800044 	addi	r2,r2,1
 2006670:	e0bfc915 	stw	r2,-220(fp)
 2006674:	e0bfc917 	ldw	r2,-220(fp)
 2006678:	10800210 	cmplti	r2,r2,8
 200667c:	1000071e 	bne	r2,zero,200669c <___vfprintf_internal_r+0x143c>
 2006680:	e0bfc804 	addi	r2,fp,-224
 2006684:	100d883a 	mov	r6,r2
 2006688:	e17fe717 	ldw	r5,-100(fp)
 200668c:	e13fe617 	ldw	r4,-104(fp)
 2006690:	200f0e80 	call	200f0e8 <__sprint_r>
 2006694:	1002d61e 	bne	r2,zero,20071f0 <___vfprintf_internal_r+0x1f90>
 2006698:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
 200669c:	e0ffc417 	ldw	r3,-240(fp)
 20066a0:	e0bfc717 	ldw	r2,-228(fp)
 20066a4:	18800216 	blt	r3,r2,20066b0 <___vfprintf_internal_r+0x1450>
 20066a8:	9880004c 	andi	r2,r19,1
 20066ac:	10025f26 	beq	r2,zero,200702c <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 20066b0:	e0bfbb17 	ldw	r2,-276(fp)
 20066b4:	88800015 	stw	r2,0(r17)
 20066b8:	e0bfbc17 	ldw	r2,-272(fp)
 20066bc:	88800115 	stw	r2,4(r17)
 20066c0:	e0ffca17 	ldw	r3,-216(fp)
 20066c4:	e0bfbc17 	ldw	r2,-272(fp)
 20066c8:	1885883a 	add	r2,r3,r2
 20066cc:	e0bfca15 	stw	r2,-216(fp)
 20066d0:	8c400204 	addi	r17,r17,8
 20066d4:	e0bfc917 	ldw	r2,-220(fp)
 20066d8:	10800044 	addi	r2,r2,1
 20066dc:	e0bfc915 	stw	r2,-220(fp)
 20066e0:	e0bfc917 	ldw	r2,-220(fp)
 20066e4:	10800210 	cmplti	r2,r2,8
 20066e8:	1000071e 	bne	r2,zero,2006708 <___vfprintf_internal_r+0x14a8>
 20066ec:	e0bfc804 	addi	r2,fp,-224
 20066f0:	100d883a 	mov	r6,r2
 20066f4:	e17fe717 	ldw	r5,-100(fp)
 20066f8:	e13fe617 	ldw	r4,-104(fp)
 20066fc:	200f0e80 	call	200f0e8 <__sprint_r>
 2006700:	1002bd1e 	bne	r2,zero,20071f8 <___vfprintf_internal_r+0x1f98>
 2006704:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
 2006708:	e0bfc717 	ldw	r2,-228(fp)
 200670c:	143fffc4 	addi	r16,r2,-1
 2006710:	0402460e 	bge	zero,r16,200702c <___vfprintf_internal_r+0x1dcc>
 2006714:	00001706 	br	2006774 <___vfprintf_internal_r+0x1514>
 2006718:	008080b4 	movhi	r2,514
 200671c:	10ba9a84 	addi	r2,r2,-5526
 2006720:	88800015 	stw	r2,0(r17)
 2006724:	00800404 	movi	r2,16
 2006728:	88800115 	stw	r2,4(r17)
 200672c:	e0bfca17 	ldw	r2,-216(fp)
 2006730:	10800404 	addi	r2,r2,16
 2006734:	e0bfca15 	stw	r2,-216(fp)
 2006738:	8c400204 	addi	r17,r17,8
 200673c:	e0bfc917 	ldw	r2,-220(fp)
 2006740:	10800044 	addi	r2,r2,1
 2006744:	e0bfc915 	stw	r2,-220(fp)
 2006748:	e0bfc917 	ldw	r2,-220(fp)
 200674c:	10800210 	cmplti	r2,r2,8
 2006750:	1000071e 	bne	r2,zero,2006770 <___vfprintf_internal_r+0x1510>
 2006754:	e0bfc804 	addi	r2,fp,-224
 2006758:	100d883a 	mov	r6,r2
 200675c:	e17fe717 	ldw	r5,-100(fp)
 2006760:	e13fe617 	ldw	r4,-104(fp)
 2006764:	200f0e80 	call	200f0e8 <__sprint_r>
 2006768:	1002a51e 	bne	r2,zero,2007200 <___vfprintf_internal_r+0x1fa0>
 200676c:	e47fcb04 	addi	r17,fp,-212
 2006770:	843ffc04 	addi	r16,r16,-16
 2006774:	80800448 	cmpgei	r2,r16,17
 2006778:	103fe71e 	bne	r2,zero,2006718 <___vfprintf_internal_r+0x14b8>
 200677c:	008080b4 	movhi	r2,514
 2006780:	10ba9a84 	addi	r2,r2,-5526
 2006784:	88800015 	stw	r2,0(r17)
 2006788:	8005883a 	mov	r2,r16
 200678c:	88800115 	stw	r2,4(r17)
 2006790:	e0bfca17 	ldw	r2,-216(fp)
 2006794:	8007883a 	mov	r3,r16
 2006798:	10c5883a 	add	r2,r2,r3
 200679c:	e0bfca15 	stw	r2,-216(fp)
 20067a0:	8c400204 	addi	r17,r17,8
 20067a4:	e0bfc917 	ldw	r2,-220(fp)
 20067a8:	10800044 	addi	r2,r2,1
 20067ac:	e0bfc915 	stw	r2,-220(fp)
 20067b0:	e0bfc917 	ldw	r2,-220(fp)
 20067b4:	10800210 	cmplti	r2,r2,8
 20067b8:	10021c1e 	bne	r2,zero,200702c <___vfprintf_internal_r+0x1dcc>
 20067bc:	e0bfc804 	addi	r2,fp,-224
 20067c0:	100d883a 	mov	r6,r2
 20067c4:	e17fe717 	ldw	r5,-100(fp)
 20067c8:	e13fe617 	ldw	r4,-104(fp)
 20067cc:	200f0e80 	call	200f0e8 <__sprint_r>
 20067d0:	10028d1e 	bne	r2,zero,2007208 <___vfprintf_internal_r+0x1fa8>
 20067d4:	e47fcb04 	addi	r17,fp,-212
 20067d8:	00021406 	br	200702c <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
 20067dc:	e0bfc417 	ldw	r2,-240(fp)
 20067e0:	00807c16 	blt	zero,r2,20069d4 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
 20067e4:	008080b4 	movhi	r2,514
 20067e8:	10ba9604 	addi	r2,r2,-5544
 20067ec:	88800015 	stw	r2,0(r17)
 20067f0:	00800044 	movi	r2,1
 20067f4:	88800115 	stw	r2,4(r17)
 20067f8:	e0bfca17 	ldw	r2,-216(fp)
 20067fc:	10800044 	addi	r2,r2,1
 2006800:	e0bfca15 	stw	r2,-216(fp)
 2006804:	8c400204 	addi	r17,r17,8
 2006808:	e0bfc917 	ldw	r2,-220(fp)
 200680c:	10800044 	addi	r2,r2,1
 2006810:	e0bfc915 	stw	r2,-220(fp)
 2006814:	e0bfc917 	ldw	r2,-220(fp)
 2006818:	10800210 	cmplti	r2,r2,8
 200681c:	1000071e 	bne	r2,zero,200683c <___vfprintf_internal_r+0x15dc>
 2006820:	e0bfc804 	addi	r2,fp,-224
 2006824:	100d883a 	mov	r6,r2
 2006828:	e17fe717 	ldw	r5,-100(fp)
 200682c:	e13fe617 	ldw	r4,-104(fp)
 2006830:	200f0e80 	call	200f0e8 <__sprint_r>
 2006834:	1002761e 	bne	r2,zero,2007210 <___vfprintf_internal_r+0x1fb0>
 2006838:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
 200683c:	e0bfc417 	ldw	r2,-240(fp)
 2006840:	1000041e 	bne	r2,zero,2006854 <___vfprintf_internal_r+0x15f4>
 2006844:	e0bfc717 	ldw	r2,-228(fp)
 2006848:	1000021e 	bne	r2,zero,2006854 <___vfprintf_internal_r+0x15f4>
 200684c:	9880004c 	andi	r2,r19,1
 2006850:	1001f626 	beq	r2,zero,200702c <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
 2006854:	e0bfbb17 	ldw	r2,-276(fp)
 2006858:	88800015 	stw	r2,0(r17)
 200685c:	e0bfbc17 	ldw	r2,-272(fp)
 2006860:	88800115 	stw	r2,4(r17)
 2006864:	e0ffca17 	ldw	r3,-216(fp)
 2006868:	e0bfbc17 	ldw	r2,-272(fp)
 200686c:	1885883a 	add	r2,r3,r2
 2006870:	e0bfca15 	stw	r2,-216(fp)
 2006874:	8c400204 	addi	r17,r17,8
 2006878:	e0bfc917 	ldw	r2,-220(fp)
 200687c:	10800044 	addi	r2,r2,1
 2006880:	e0bfc915 	stw	r2,-220(fp)
 2006884:	e0bfc917 	ldw	r2,-220(fp)
 2006888:	10800210 	cmplti	r2,r2,8
 200688c:	1000071e 	bne	r2,zero,20068ac <___vfprintf_internal_r+0x164c>
 2006890:	e0bfc804 	addi	r2,fp,-224
 2006894:	100d883a 	mov	r6,r2
 2006898:	e17fe717 	ldw	r5,-100(fp)
 200689c:	e13fe617 	ldw	r4,-104(fp)
 20068a0:	200f0e80 	call	200f0e8 <__sprint_r>
 20068a4:	10025c1e 	bne	r2,zero,2007218 <___vfprintf_internal_r+0x1fb8>
 20068a8:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
 20068ac:	e0bfc417 	ldw	r2,-240(fp)
 20068b0:	00a1c83a 	sub	r16,zero,r2
 20068b4:	0400310e 	bge	zero,r16,200697c <___vfprintf_internal_r+0x171c>
 20068b8:	00001706 	br	2006918 <___vfprintf_internal_r+0x16b8>
 20068bc:	008080b4 	movhi	r2,514
 20068c0:	10ba9a84 	addi	r2,r2,-5526
 20068c4:	88800015 	stw	r2,0(r17)
 20068c8:	00800404 	movi	r2,16
 20068cc:	88800115 	stw	r2,4(r17)
 20068d0:	e0bfca17 	ldw	r2,-216(fp)
 20068d4:	10800404 	addi	r2,r2,16
 20068d8:	e0bfca15 	stw	r2,-216(fp)
 20068dc:	8c400204 	addi	r17,r17,8
 20068e0:	e0bfc917 	ldw	r2,-220(fp)
 20068e4:	10800044 	addi	r2,r2,1
 20068e8:	e0bfc915 	stw	r2,-220(fp)
 20068ec:	e0bfc917 	ldw	r2,-220(fp)
 20068f0:	10800210 	cmplti	r2,r2,8
 20068f4:	1000071e 	bne	r2,zero,2006914 <___vfprintf_internal_r+0x16b4>
 20068f8:	e0bfc804 	addi	r2,fp,-224
 20068fc:	100d883a 	mov	r6,r2
 2006900:	e17fe717 	ldw	r5,-100(fp)
 2006904:	e13fe617 	ldw	r4,-104(fp)
 2006908:	200f0e80 	call	200f0e8 <__sprint_r>
 200690c:	1002441e 	bne	r2,zero,2007220 <___vfprintf_internal_r+0x1fc0>
 2006910:	e47fcb04 	addi	r17,fp,-212
 2006914:	843ffc04 	addi	r16,r16,-16
 2006918:	80800448 	cmpgei	r2,r16,17
 200691c:	103fe71e 	bne	r2,zero,20068bc <___vfprintf_internal_r+0x165c>
 2006920:	008080b4 	movhi	r2,514
 2006924:	10ba9a84 	addi	r2,r2,-5526
 2006928:	88800015 	stw	r2,0(r17)
 200692c:	8005883a 	mov	r2,r16
 2006930:	88800115 	stw	r2,4(r17)
 2006934:	e0bfca17 	ldw	r2,-216(fp)
 2006938:	8007883a 	mov	r3,r16
 200693c:	10c5883a 	add	r2,r2,r3
 2006940:	e0bfca15 	stw	r2,-216(fp)
 2006944:	8c400204 	addi	r17,r17,8
 2006948:	e0bfc917 	ldw	r2,-220(fp)
 200694c:	10800044 	addi	r2,r2,1
 2006950:	e0bfc915 	stw	r2,-220(fp)
 2006954:	e0bfc917 	ldw	r2,-220(fp)
 2006958:	10800210 	cmplti	r2,r2,8
 200695c:	1000071e 	bne	r2,zero,200697c <___vfprintf_internal_r+0x171c>
 2006960:	e0bfc804 	addi	r2,fp,-224
 2006964:	100d883a 	mov	r6,r2
 2006968:	e17fe717 	ldw	r5,-100(fp)
 200696c:	e13fe617 	ldw	r4,-104(fp)
 2006970:	200f0e80 	call	200f0e8 <__sprint_r>
 2006974:	10022c1e 	bne	r2,zero,2007228 <___vfprintf_internal_r+0x1fc8>
 2006978:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
 200697c:	8c800015 	stw	r18,0(r17)
 2006980:	e0bfc717 	ldw	r2,-228(fp)
 2006984:	88800115 	stw	r2,4(r17)
 2006988:	e0bfca17 	ldw	r2,-216(fp)
 200698c:	e0ffc717 	ldw	r3,-228(fp)
 2006990:	10c5883a 	add	r2,r2,r3
 2006994:	e0bfca15 	stw	r2,-216(fp)
 2006998:	8c400204 	addi	r17,r17,8
 200699c:	e0bfc917 	ldw	r2,-220(fp)
 20069a0:	10800044 	addi	r2,r2,1
 20069a4:	e0bfc915 	stw	r2,-220(fp)
 20069a8:	e0bfc917 	ldw	r2,-220(fp)
 20069ac:	10800210 	cmplti	r2,r2,8
 20069b0:	10019e1e 	bne	r2,zero,200702c <___vfprintf_internal_r+0x1dcc>
 20069b4:	e0bfc804 	addi	r2,fp,-224
 20069b8:	100d883a 	mov	r6,r2
 20069bc:	e17fe717 	ldw	r5,-100(fp)
 20069c0:	e13fe617 	ldw	r4,-104(fp)
 20069c4:	200f0e80 	call	200f0e8 <__sprint_r>
 20069c8:	1002191e 	bne	r2,zero,2007230 <___vfprintf_internal_r+0x1fd0>
 20069cc:	e47fcb04 	addi	r17,fp,-212
 20069d0:	00019606 	br	200702c <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
 20069d4:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 20069d8:	e0bfc717 	ldw	r2,-228(fp)
 20069dc:	1007883a 	mov	r3,r2
 20069e0:	e0bfc017 	ldw	r2,-256(fp)
 20069e4:	10c5883a 	add	r2,r2,r3
 20069e8:	1007883a 	mov	r3,r2
 20069ec:	9005883a 	mov	r2,r18
 20069f0:	1885c83a 	sub	r2,r3,r2
 20069f4:	e0bfb915 	stw	r2,-284(fp)
 20069f8:	e0bfb917 	ldw	r2,-284(fp)
 20069fc:	e0ffb017 	ldw	r3,-320(fp)
 2006a00:	1880020e 	bge	r3,r2,2006a0c <___vfprintf_internal_r+0x17ac>
 2006a04:	e0bfb017 	ldw	r2,-320(fp)
 2006a08:	e0bfb915 	stw	r2,-284(fp)
 2006a0c:	e0bfb917 	ldw	r2,-284(fp)
 2006a10:	0080150e 	bge	zero,r2,2006a68 <___vfprintf_internal_r+0x1808>
 2006a14:	8c800015 	stw	r18,0(r17)
 2006a18:	e0bfb917 	ldw	r2,-284(fp)
 2006a1c:	88800115 	stw	r2,4(r17)
 2006a20:	e0ffca17 	ldw	r3,-216(fp)
 2006a24:	e0bfb917 	ldw	r2,-284(fp)
 2006a28:	1885883a 	add	r2,r3,r2
 2006a2c:	e0bfca15 	stw	r2,-216(fp)
 2006a30:	8c400204 	addi	r17,r17,8
 2006a34:	e0bfc917 	ldw	r2,-220(fp)
 2006a38:	10800044 	addi	r2,r2,1
 2006a3c:	e0bfc915 	stw	r2,-220(fp)
 2006a40:	e0bfc917 	ldw	r2,-220(fp)
 2006a44:	10800210 	cmplti	r2,r2,8
 2006a48:	1000071e 	bne	r2,zero,2006a68 <___vfprintf_internal_r+0x1808>
 2006a4c:	e0bfc804 	addi	r2,fp,-224
 2006a50:	100d883a 	mov	r6,r2
 2006a54:	e17fe717 	ldw	r5,-100(fp)
 2006a58:	e13fe617 	ldw	r4,-104(fp)
 2006a5c:	200f0e80 	call	200f0e8 <__sprint_r>
 2006a60:	1001f51e 	bne	r2,zero,2007238 <___vfprintf_internal_r+0x1fd8>
 2006a64:	e47fcb04 	addi	r17,fp,-212
 2006a68:	e0bfb917 	ldw	r2,-284(fp)
 2006a6c:	1000010e 	bge	r2,zero,2006a74 <___vfprintf_internal_r+0x1814>
 2006a70:	0005883a 	mov	r2,zero
 2006a74:	e0ffb017 	ldw	r3,-320(fp)
 2006a78:	1885c83a 	sub	r2,r3,r2
 2006a7c:	e0bfb915 	stw	r2,-284(fp)
 2006a80:	e0bfb917 	ldw	r2,-284(fp)
 2006a84:	0080340e 	bge	zero,r2,2006b58 <___vfprintf_internal_r+0x18f8>
 2006a88:	00001906 	br	2006af0 <___vfprintf_internal_r+0x1890>
 2006a8c:	008080b4 	movhi	r2,514
 2006a90:	10ba9a84 	addi	r2,r2,-5526
 2006a94:	88800015 	stw	r2,0(r17)
 2006a98:	00800404 	movi	r2,16
 2006a9c:	88800115 	stw	r2,4(r17)
 2006aa0:	e0bfca17 	ldw	r2,-216(fp)
 2006aa4:	10800404 	addi	r2,r2,16
 2006aa8:	e0bfca15 	stw	r2,-216(fp)
 2006aac:	8c400204 	addi	r17,r17,8
 2006ab0:	e0bfc917 	ldw	r2,-220(fp)
 2006ab4:	10800044 	addi	r2,r2,1
 2006ab8:	e0bfc915 	stw	r2,-220(fp)
 2006abc:	e0bfc917 	ldw	r2,-220(fp)
 2006ac0:	10800210 	cmplti	r2,r2,8
 2006ac4:	1000071e 	bne	r2,zero,2006ae4 <___vfprintf_internal_r+0x1884>
 2006ac8:	e0bfc804 	addi	r2,fp,-224
 2006acc:	100d883a 	mov	r6,r2
 2006ad0:	e17fe717 	ldw	r5,-100(fp)
 2006ad4:	e13fe617 	ldw	r4,-104(fp)
 2006ad8:	200f0e80 	call	200f0e8 <__sprint_r>
 2006adc:	1001d81e 	bne	r2,zero,2007240 <___vfprintf_internal_r+0x1fe0>
 2006ae0:	e47fcb04 	addi	r17,fp,-212
 2006ae4:	e0bfb917 	ldw	r2,-284(fp)
 2006ae8:	10bffc04 	addi	r2,r2,-16
 2006aec:	e0bfb915 	stw	r2,-284(fp)
 2006af0:	e0bfb917 	ldw	r2,-284(fp)
 2006af4:	10800448 	cmpgei	r2,r2,17
 2006af8:	103fe41e 	bne	r2,zero,2006a8c <___vfprintf_internal_r+0x182c>
 2006afc:	008080b4 	movhi	r2,514
 2006b00:	10ba9a84 	addi	r2,r2,-5526
 2006b04:	88800015 	stw	r2,0(r17)
 2006b08:	e0bfb917 	ldw	r2,-284(fp)
 2006b0c:	88800115 	stw	r2,4(r17)
 2006b10:	e0ffca17 	ldw	r3,-216(fp)
 2006b14:	e0bfb917 	ldw	r2,-284(fp)
 2006b18:	1885883a 	add	r2,r3,r2
 2006b1c:	e0bfca15 	stw	r2,-216(fp)
 2006b20:	8c400204 	addi	r17,r17,8
 2006b24:	e0bfc917 	ldw	r2,-220(fp)
 2006b28:	10800044 	addi	r2,r2,1
 2006b2c:	e0bfc915 	stw	r2,-220(fp)
 2006b30:	e0bfc917 	ldw	r2,-220(fp)
 2006b34:	10800210 	cmplti	r2,r2,8
 2006b38:	1000071e 	bne	r2,zero,2006b58 <___vfprintf_internal_r+0x18f8>
 2006b3c:	e0bfc804 	addi	r2,fp,-224
 2006b40:	100d883a 	mov	r6,r2
 2006b44:	e17fe717 	ldw	r5,-100(fp)
 2006b48:	e13fe617 	ldw	r4,-104(fp)
 2006b4c:	200f0e80 	call	200f0e8 <__sprint_r>
 2006b50:	1001bd1e 	bne	r2,zero,2007248 <___vfprintf_internal_r+0x1fe8>
 2006b54:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
 2006b58:	e0bfb017 	ldw	r2,-320(fp)
 2006b5c:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 2006b60:	e0ffc417 	ldw	r3,-240(fp)
 2006b64:	e0bfc717 	ldw	r2,-228(fp)
 2006b68:	18800216 	blt	r3,r2,2006b74 <___vfprintf_internal_r+0x1914>
 2006b6c:	9880004c 	andi	r2,r19,1
 2006b70:	10001626 	beq	r2,zero,2006bcc <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
 2006b74:	e0bfbb17 	ldw	r2,-276(fp)
 2006b78:	88800015 	stw	r2,0(r17)
 2006b7c:	e0bfbc17 	ldw	r2,-272(fp)
 2006b80:	88800115 	stw	r2,4(r17)
 2006b84:	e0ffca17 	ldw	r3,-216(fp)
 2006b88:	e0bfbc17 	ldw	r2,-272(fp)
 2006b8c:	1885883a 	add	r2,r3,r2
 2006b90:	e0bfca15 	stw	r2,-216(fp)
 2006b94:	8c400204 	addi	r17,r17,8
 2006b98:	e0bfc917 	ldw	r2,-220(fp)
 2006b9c:	10800044 	addi	r2,r2,1
 2006ba0:	e0bfc915 	stw	r2,-220(fp)
 2006ba4:	e0bfc917 	ldw	r2,-220(fp)
 2006ba8:	10800210 	cmplti	r2,r2,8
 2006bac:	1000071e 	bne	r2,zero,2006bcc <___vfprintf_internal_r+0x196c>
 2006bb0:	e0bfc804 	addi	r2,fp,-224
 2006bb4:	100d883a 	mov	r6,r2
 2006bb8:	e17fe717 	ldw	r5,-100(fp)
 2006bbc:	e13fe617 	ldw	r4,-104(fp)
 2006bc0:	200f0e80 	call	200f0e8 <__sprint_r>
 2006bc4:	1001a21e 	bne	r2,zero,2007250 <___vfprintf_internal_r+0x1ff0>
 2006bc8:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
 2006bcc:	e0bfc717 	ldw	r2,-228(fp)
 2006bd0:	1007883a 	mov	r3,r2
 2006bd4:	e0bfc017 	ldw	r2,-256(fp)
 2006bd8:	10c5883a 	add	r2,r2,r3
 2006bdc:	1007883a 	mov	r3,r2
 2006be0:	9005883a 	mov	r2,r18
 2006be4:	1885c83a 	sub	r2,r3,r2
 2006be8:	e0bfba15 	stw	r2,-280(fp)
 2006bec:	e0ffc717 	ldw	r3,-228(fp)
 2006bf0:	e0bfc417 	ldw	r2,-240(fp)
 2006bf4:	1887c83a 	sub	r3,r3,r2
 2006bf8:	e0bfba17 	ldw	r2,-280(fp)
 2006bfc:	1880040e 	bge	r3,r2,2006c10 <___vfprintf_internal_r+0x19b0>
 2006c00:	e0ffc717 	ldw	r3,-228(fp)
 2006c04:	e0bfc417 	ldw	r2,-240(fp)
 2006c08:	1885c83a 	sub	r2,r3,r2
 2006c0c:	e0bfba15 	stw	r2,-280(fp)
 2006c10:	e0bfba17 	ldw	r2,-280(fp)
 2006c14:	0080150e 	bge	zero,r2,2006c6c <___vfprintf_internal_r+0x1a0c>
 2006c18:	8c800015 	stw	r18,0(r17)
 2006c1c:	e0bfba17 	ldw	r2,-280(fp)
 2006c20:	88800115 	stw	r2,4(r17)
 2006c24:	e0ffca17 	ldw	r3,-216(fp)
 2006c28:	e0bfba17 	ldw	r2,-280(fp)
 2006c2c:	1885883a 	add	r2,r3,r2
 2006c30:	e0bfca15 	stw	r2,-216(fp)
 2006c34:	8c400204 	addi	r17,r17,8
 2006c38:	e0bfc917 	ldw	r2,-220(fp)
 2006c3c:	10800044 	addi	r2,r2,1
 2006c40:	e0bfc915 	stw	r2,-220(fp)
 2006c44:	e0bfc917 	ldw	r2,-220(fp)
 2006c48:	10800210 	cmplti	r2,r2,8
 2006c4c:	1000071e 	bne	r2,zero,2006c6c <___vfprintf_internal_r+0x1a0c>
 2006c50:	e0bfc804 	addi	r2,fp,-224
 2006c54:	100d883a 	mov	r6,r2
 2006c58:	e17fe717 	ldw	r5,-100(fp)
 2006c5c:	e13fe617 	ldw	r4,-104(fp)
 2006c60:	200f0e80 	call	200f0e8 <__sprint_r>
 2006c64:	10017c1e 	bne	r2,zero,2007258 <___vfprintf_internal_r+0x1ff8>
 2006c68:	e47fcb04 	addi	r17,fp,-212
 2006c6c:	e0ffc717 	ldw	r3,-228(fp)
 2006c70:	e0bfc417 	ldw	r2,-240(fp)
 2006c74:	1887c83a 	sub	r3,r3,r2
 2006c78:	e0bfba17 	ldw	r2,-280(fp)
 2006c7c:	1000010e 	bge	r2,zero,2006c84 <___vfprintf_internal_r+0x1a24>
 2006c80:	0005883a 	mov	r2,zero
 2006c84:	1885c83a 	sub	r2,r3,r2
 2006c88:	e0bfba15 	stw	r2,-280(fp)
 2006c8c:	e0bfba17 	ldw	r2,-280(fp)
 2006c90:	0080e60e 	bge	zero,r2,200702c <___vfprintf_internal_r+0x1dcc>
 2006c94:	00001906 	br	2006cfc <___vfprintf_internal_r+0x1a9c>
 2006c98:	008080b4 	movhi	r2,514
 2006c9c:	10ba9a84 	addi	r2,r2,-5526
 2006ca0:	88800015 	stw	r2,0(r17)
 2006ca4:	00800404 	movi	r2,16
 2006ca8:	88800115 	stw	r2,4(r17)
 2006cac:	e0bfca17 	ldw	r2,-216(fp)
 2006cb0:	10800404 	addi	r2,r2,16
 2006cb4:	e0bfca15 	stw	r2,-216(fp)
 2006cb8:	8c400204 	addi	r17,r17,8
 2006cbc:	e0bfc917 	ldw	r2,-220(fp)
 2006cc0:	10800044 	addi	r2,r2,1
 2006cc4:	e0bfc915 	stw	r2,-220(fp)
 2006cc8:	e0bfc917 	ldw	r2,-220(fp)
 2006ccc:	10800210 	cmplti	r2,r2,8
 2006cd0:	1000071e 	bne	r2,zero,2006cf0 <___vfprintf_internal_r+0x1a90>
 2006cd4:	e0bfc804 	addi	r2,fp,-224
 2006cd8:	100d883a 	mov	r6,r2
 2006cdc:	e17fe717 	ldw	r5,-100(fp)
 2006ce0:	e13fe617 	ldw	r4,-104(fp)
 2006ce4:	200f0e80 	call	200f0e8 <__sprint_r>
 2006ce8:	10015d1e 	bne	r2,zero,2007260 <___vfprintf_internal_r+0x2000>
 2006cec:	e47fcb04 	addi	r17,fp,-212
 2006cf0:	e0bfba17 	ldw	r2,-280(fp)
 2006cf4:	10bffc04 	addi	r2,r2,-16
 2006cf8:	e0bfba15 	stw	r2,-280(fp)
 2006cfc:	e0bfba17 	ldw	r2,-280(fp)
 2006d00:	10800448 	cmpgei	r2,r2,17
 2006d04:	103fe41e 	bne	r2,zero,2006c98 <___vfprintf_internal_r+0x1a38>
 2006d08:	008080b4 	movhi	r2,514
 2006d0c:	10ba9a84 	addi	r2,r2,-5526
 2006d10:	88800015 	stw	r2,0(r17)
 2006d14:	e0bfba17 	ldw	r2,-280(fp)
 2006d18:	88800115 	stw	r2,4(r17)
 2006d1c:	e0ffca17 	ldw	r3,-216(fp)
 2006d20:	e0bfba17 	ldw	r2,-280(fp)
 2006d24:	1885883a 	add	r2,r3,r2
 2006d28:	e0bfca15 	stw	r2,-216(fp)
 2006d2c:	8c400204 	addi	r17,r17,8
 2006d30:	e0bfc917 	ldw	r2,-220(fp)
 2006d34:	10800044 	addi	r2,r2,1
 2006d38:	e0bfc915 	stw	r2,-220(fp)
 2006d3c:	e0bfc917 	ldw	r2,-220(fp)
 2006d40:	10800210 	cmplti	r2,r2,8
 2006d44:	1000b91e 	bne	r2,zero,200702c <___vfprintf_internal_r+0x1dcc>
 2006d48:	e0bfc804 	addi	r2,fp,-224
 2006d4c:	100d883a 	mov	r6,r2
 2006d50:	e17fe717 	ldw	r5,-100(fp)
 2006d54:	e13fe617 	ldw	r4,-104(fp)
 2006d58:	200f0e80 	call	200f0e8 <__sprint_r>
 2006d5c:	1001421e 	bne	r2,zero,2007268 <___vfprintf_internal_r+0x2008>
 2006d60:	e47fcb04 	addi	r17,fp,-212
 2006d64:	0000b106 	br	200702c <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 2006d68:	e0bfc717 	ldw	r2,-228(fp)
 2006d6c:	10800088 	cmpgei	r2,r2,2
 2006d70:	1000021e 	bne	r2,zero,2006d7c <___vfprintf_internal_r+0x1b1c>
 2006d74:	9880004c 	andi	r2,r19,1
 2006d78:	10008026 	beq	r2,zero,2006f7c <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
 2006d7c:	8c800015 	stw	r18,0(r17)
 2006d80:	00800044 	movi	r2,1
 2006d84:	88800115 	stw	r2,4(r17)
 2006d88:	e0bfca17 	ldw	r2,-216(fp)
 2006d8c:	10800044 	addi	r2,r2,1
 2006d90:	e0bfca15 	stw	r2,-216(fp)
 2006d94:	8c400204 	addi	r17,r17,8
 2006d98:	e0bfc917 	ldw	r2,-220(fp)
 2006d9c:	10800044 	addi	r2,r2,1
 2006da0:	e0bfc915 	stw	r2,-220(fp)
 2006da4:	e0bfc917 	ldw	r2,-220(fp)
 2006da8:	10800210 	cmplti	r2,r2,8
 2006dac:	1000071e 	bne	r2,zero,2006dcc <___vfprintf_internal_r+0x1b6c>
 2006db0:	e0bfc804 	addi	r2,fp,-224
 2006db4:	100d883a 	mov	r6,r2
 2006db8:	e17fe717 	ldw	r5,-100(fp)
 2006dbc:	e13fe617 	ldw	r4,-104(fp)
 2006dc0:	200f0e80 	call	200f0e8 <__sprint_r>
 2006dc4:	10012a1e 	bne	r2,zero,2007270 <___vfprintf_internal_r+0x2010>
 2006dc8:	e47fcb04 	addi	r17,fp,-212
					cp++;
 2006dcc:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 2006dd0:	e0bfbb17 	ldw	r2,-276(fp)
 2006dd4:	88800015 	stw	r2,0(r17)
 2006dd8:	e0bfbc17 	ldw	r2,-272(fp)
 2006ddc:	88800115 	stw	r2,4(r17)
 2006de0:	e0ffca17 	ldw	r3,-216(fp)
 2006de4:	e0bfbc17 	ldw	r2,-272(fp)
 2006de8:	1885883a 	add	r2,r3,r2
 2006dec:	e0bfca15 	stw	r2,-216(fp)
 2006df0:	8c400204 	addi	r17,r17,8
 2006df4:	e0bfc917 	ldw	r2,-220(fp)
 2006df8:	10800044 	addi	r2,r2,1
 2006dfc:	e0bfc915 	stw	r2,-220(fp)
 2006e00:	e0bfc917 	ldw	r2,-220(fp)
 2006e04:	10800210 	cmplti	r2,r2,8
 2006e08:	1000071e 	bne	r2,zero,2006e28 <___vfprintf_internal_r+0x1bc8>
 2006e0c:	e0bfc804 	addi	r2,fp,-224
 2006e10:	100d883a 	mov	r6,r2
 2006e14:	e17fe717 	ldw	r5,-100(fp)
 2006e18:	e13fe617 	ldw	r4,-104(fp)
 2006e1c:	200f0e80 	call	200f0e8 <__sprint_r>
 2006e20:	1001151e 	bne	r2,zero,2007278 <___vfprintf_internal_r+0x2018>
 2006e24:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
 2006e28:	e0bfc217 	ldw	r2,-248(fp)
 2006e2c:	e0ffc317 	ldw	r3,-244(fp)
 2006e30:	000d883a 	mov	r6,zero
 2006e34:	000f883a 	mov	r7,zero
 2006e38:	1009883a 	mov	r4,r2
 2006e3c:	180b883a 	mov	r5,r3
 2006e40:	20125d80 	call	20125d8 <__eqdf2>
 2006e44:	10001826 	beq	r2,zero,2006ea8 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
 2006e48:	8c800015 	stw	r18,0(r17)
 2006e4c:	e0bfc717 	ldw	r2,-228(fp)
 2006e50:	10bfffc4 	addi	r2,r2,-1
 2006e54:	88800115 	stw	r2,4(r17)
 2006e58:	e0bfca17 	ldw	r2,-216(fp)
 2006e5c:	e0ffc717 	ldw	r3,-228(fp)
 2006e60:	10c5883a 	add	r2,r2,r3
 2006e64:	10bfffc4 	addi	r2,r2,-1
 2006e68:	e0bfca15 	stw	r2,-216(fp)
 2006e6c:	8c400204 	addi	r17,r17,8
 2006e70:	e0bfc917 	ldw	r2,-220(fp)
 2006e74:	10800044 	addi	r2,r2,1
 2006e78:	e0bfc915 	stw	r2,-220(fp)
 2006e7c:	e0bfc917 	ldw	r2,-220(fp)
 2006e80:	10800210 	cmplti	r2,r2,8
 2006e84:	1000521e 	bne	r2,zero,2006fd0 <___vfprintf_internal_r+0x1d70>
 2006e88:	e0bfc804 	addi	r2,fp,-224
 2006e8c:	100d883a 	mov	r6,r2
 2006e90:	e17fe717 	ldw	r5,-100(fp)
 2006e94:	e13fe617 	ldw	r4,-104(fp)
 2006e98:	200f0e80 	call	200f0e8 <__sprint_r>
 2006e9c:	1000f81e 	bne	r2,zero,2007280 <___vfprintf_internal_r+0x2020>
 2006ea0:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2006ea4:	00004a06 	br	2006fd0 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2006ea8:	e0bfc717 	ldw	r2,-228(fp)
 2006eac:	143fffc4 	addi	r16,r2,-1
 2006eb0:	0400470e 	bge	zero,r16,2006fd0 <___vfprintf_internal_r+0x1d70>
 2006eb4:	00001706 	br	2006f14 <___vfprintf_internal_r+0x1cb4>
 2006eb8:	008080b4 	movhi	r2,514
 2006ebc:	10ba9a84 	addi	r2,r2,-5526
 2006ec0:	88800015 	stw	r2,0(r17)
 2006ec4:	00800404 	movi	r2,16
 2006ec8:	88800115 	stw	r2,4(r17)
 2006ecc:	e0bfca17 	ldw	r2,-216(fp)
 2006ed0:	10800404 	addi	r2,r2,16
 2006ed4:	e0bfca15 	stw	r2,-216(fp)
 2006ed8:	8c400204 	addi	r17,r17,8
 2006edc:	e0bfc917 	ldw	r2,-220(fp)
 2006ee0:	10800044 	addi	r2,r2,1
 2006ee4:	e0bfc915 	stw	r2,-220(fp)
 2006ee8:	e0bfc917 	ldw	r2,-220(fp)
 2006eec:	10800210 	cmplti	r2,r2,8
 2006ef0:	1000071e 	bne	r2,zero,2006f10 <___vfprintf_internal_r+0x1cb0>
 2006ef4:	e0bfc804 	addi	r2,fp,-224
 2006ef8:	100d883a 	mov	r6,r2
 2006efc:	e17fe717 	ldw	r5,-100(fp)
 2006f00:	e13fe617 	ldw	r4,-104(fp)
 2006f04:	200f0e80 	call	200f0e8 <__sprint_r>
 2006f08:	1000df1e 	bne	r2,zero,2007288 <___vfprintf_internal_r+0x2028>
 2006f0c:	e47fcb04 	addi	r17,fp,-212
 2006f10:	843ffc04 	addi	r16,r16,-16
 2006f14:	80800448 	cmpgei	r2,r16,17
 2006f18:	103fe71e 	bne	r2,zero,2006eb8 <___vfprintf_internal_r+0x1c58>
 2006f1c:	008080b4 	movhi	r2,514
 2006f20:	10ba9a84 	addi	r2,r2,-5526
 2006f24:	88800015 	stw	r2,0(r17)
 2006f28:	8005883a 	mov	r2,r16
 2006f2c:	88800115 	stw	r2,4(r17)
 2006f30:	e0bfca17 	ldw	r2,-216(fp)
 2006f34:	8007883a 	mov	r3,r16
 2006f38:	10c5883a 	add	r2,r2,r3
 2006f3c:	e0bfca15 	stw	r2,-216(fp)
 2006f40:	8c400204 	addi	r17,r17,8
 2006f44:	e0bfc917 	ldw	r2,-220(fp)
 2006f48:	10800044 	addi	r2,r2,1
 2006f4c:	e0bfc915 	stw	r2,-220(fp)
 2006f50:	e0bfc917 	ldw	r2,-220(fp)
 2006f54:	10800210 	cmplti	r2,r2,8
 2006f58:	10001d1e 	bne	r2,zero,2006fd0 <___vfprintf_internal_r+0x1d70>
 2006f5c:	e0bfc804 	addi	r2,fp,-224
 2006f60:	100d883a 	mov	r6,r2
 2006f64:	e17fe717 	ldw	r5,-100(fp)
 2006f68:	e13fe617 	ldw	r4,-104(fp)
 2006f6c:	200f0e80 	call	200f0e8 <__sprint_r>
 2006f70:	1000c71e 	bne	r2,zero,2007290 <___vfprintf_internal_r+0x2030>
 2006f74:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2006f78:	00001506 	br	2006fd0 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
 2006f7c:	8c800015 	stw	r18,0(r17)
 2006f80:	00800044 	movi	r2,1
 2006f84:	88800115 	stw	r2,4(r17)
 2006f88:	e0bfca17 	ldw	r2,-216(fp)
 2006f8c:	10800044 	addi	r2,r2,1
 2006f90:	e0bfca15 	stw	r2,-216(fp)
 2006f94:	8c400204 	addi	r17,r17,8
 2006f98:	e0bfc917 	ldw	r2,-220(fp)
 2006f9c:	10800044 	addi	r2,r2,1
 2006fa0:	e0bfc915 	stw	r2,-220(fp)
 2006fa4:	e0bfc917 	ldw	r2,-220(fp)
 2006fa8:	10800210 	cmplti	r2,r2,8
 2006fac:	1000091e 	bne	r2,zero,2006fd4 <___vfprintf_internal_r+0x1d74>
 2006fb0:	e0bfc804 	addi	r2,fp,-224
 2006fb4:	100d883a 	mov	r6,r2
 2006fb8:	e17fe717 	ldw	r5,-100(fp)
 2006fbc:	e13fe617 	ldw	r4,-104(fp)
 2006fc0:	200f0e80 	call	200f0e8 <__sprint_r>
 2006fc4:	1000b41e 	bne	r2,zero,2007298 <___vfprintf_internal_r+0x2038>
 2006fc8:	e47fcb04 	addi	r17,fp,-212
 2006fcc:	00000106 	br	2006fd4 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
 2006fd0:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
 2006fd4:	e0bfc504 	addi	r2,fp,-236
 2006fd8:	88800015 	stw	r2,0(r17)
 2006fdc:	e0bfaf17 	ldw	r2,-324(fp)
 2006fe0:	88800115 	stw	r2,4(r17)
 2006fe4:	e0ffca17 	ldw	r3,-216(fp)
 2006fe8:	e0bfaf17 	ldw	r2,-324(fp)
 2006fec:	1885883a 	add	r2,r3,r2
 2006ff0:	e0bfca15 	stw	r2,-216(fp)
 2006ff4:	8c400204 	addi	r17,r17,8
 2006ff8:	e0bfc917 	ldw	r2,-220(fp)
 2006ffc:	10800044 	addi	r2,r2,1
 2007000:	e0bfc915 	stw	r2,-220(fp)
 2007004:	e0bfc917 	ldw	r2,-220(fp)
 2007008:	10800210 	cmplti	r2,r2,8
 200700c:	1000071e 	bne	r2,zero,200702c <___vfprintf_internal_r+0x1dcc>
 2007010:	e0bfc804 	addi	r2,fp,-224
 2007014:	100d883a 	mov	r6,r2
 2007018:	e17fe717 	ldw	r5,-100(fp)
 200701c:	e13fe617 	ldw	r4,-104(fp)
 2007020:	200f0e80 	call	200f0e8 <__sprint_r>
 2007024:	10009e1e 	bne	r2,zero,20072a0 <___vfprintf_internal_r+0x2040>
 2007028:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 200702c:	9880010c 	andi	r2,r19,4
 2007030:	10003526 	beq	r2,zero,2007108 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
 2007034:	e0ffad17 	ldw	r3,-332(fp)
 2007038:	e0bfb517 	ldw	r2,-300(fp)
 200703c:	18a1c83a 	sub	r16,r3,r2
 2007040:	0400310e 	bge	zero,r16,2007108 <___vfprintf_internal_r+0x1ea8>
 2007044:	00001706 	br	20070a4 <___vfprintf_internal_r+0x1e44>
 2007048:	008080b4 	movhi	r2,514
 200704c:	10ba9684 	addi	r2,r2,-5542
 2007050:	88800015 	stw	r2,0(r17)
 2007054:	00800404 	movi	r2,16
 2007058:	88800115 	stw	r2,4(r17)
 200705c:	e0bfca17 	ldw	r2,-216(fp)
 2007060:	10800404 	addi	r2,r2,16
 2007064:	e0bfca15 	stw	r2,-216(fp)
 2007068:	8c400204 	addi	r17,r17,8
 200706c:	e0bfc917 	ldw	r2,-220(fp)
 2007070:	10800044 	addi	r2,r2,1
 2007074:	e0bfc915 	stw	r2,-220(fp)
 2007078:	e0bfc917 	ldw	r2,-220(fp)
 200707c:	10800210 	cmplti	r2,r2,8
 2007080:	1000071e 	bne	r2,zero,20070a0 <___vfprintf_internal_r+0x1e40>
 2007084:	e0bfc804 	addi	r2,fp,-224
 2007088:	100d883a 	mov	r6,r2
 200708c:	e17fe717 	ldw	r5,-100(fp)
 2007090:	e13fe617 	ldw	r4,-104(fp)
 2007094:	200f0e80 	call	200f0e8 <__sprint_r>
 2007098:	1000831e 	bne	r2,zero,20072a8 <___vfprintf_internal_r+0x2048>
 200709c:	e47fcb04 	addi	r17,fp,-212
 20070a0:	843ffc04 	addi	r16,r16,-16
 20070a4:	80800448 	cmpgei	r2,r16,17
 20070a8:	103fe71e 	bne	r2,zero,2007048 <___vfprintf_internal_r+0x1de8>
 20070ac:	008080b4 	movhi	r2,514
 20070b0:	10ba9684 	addi	r2,r2,-5542
 20070b4:	88800015 	stw	r2,0(r17)
 20070b8:	8005883a 	mov	r2,r16
 20070bc:	88800115 	stw	r2,4(r17)
 20070c0:	e0bfca17 	ldw	r2,-216(fp)
 20070c4:	8007883a 	mov	r3,r16
 20070c8:	10c5883a 	add	r2,r2,r3
 20070cc:	e0bfca15 	stw	r2,-216(fp)
 20070d0:	8c400204 	addi	r17,r17,8
 20070d4:	e0bfc917 	ldw	r2,-220(fp)
 20070d8:	10800044 	addi	r2,r2,1
 20070dc:	e0bfc915 	stw	r2,-220(fp)
 20070e0:	e0bfc917 	ldw	r2,-220(fp)
 20070e4:	10800210 	cmplti	r2,r2,8
 20070e8:	1000071e 	bne	r2,zero,2007108 <___vfprintf_internal_r+0x1ea8>
 20070ec:	e0bfc804 	addi	r2,fp,-224
 20070f0:	100d883a 	mov	r6,r2
 20070f4:	e17fe717 	ldw	r5,-100(fp)
 20070f8:	e13fe617 	ldw	r4,-104(fp)
 20070fc:	200f0e80 	call	200f0e8 <__sprint_r>
 2007100:	10006b1e 	bne	r2,zero,20072b0 <___vfprintf_internal_r+0x2050>
 2007104:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 2007108:	e0ffad17 	ldw	r3,-332(fp)
 200710c:	e0bfb517 	ldw	r2,-300(fp)
 2007110:	10c0010e 	bge	r2,r3,2007118 <___vfprintf_internal_r+0x1eb8>
 2007114:	1805883a 	mov	r2,r3
 2007118:	e0ffac17 	ldw	r3,-336(fp)
 200711c:	1885883a 	add	r2,r3,r2
 2007120:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
 2007124:	e0bfca17 	ldw	r2,-216(fp)
 2007128:	10000626 	beq	r2,zero,2007144 <___vfprintf_internal_r+0x1ee4>
 200712c:	e0bfc804 	addi	r2,fp,-224
 2007130:	100d883a 	mov	r6,r2
 2007134:	e17fe717 	ldw	r5,-100(fp)
 2007138:	e13fe617 	ldw	r4,-104(fp)
 200713c:	200f0e80 	call	200f0e8 <__sprint_r>
 2007140:	10005d1e 	bne	r2,zero,20072b8 <___vfprintf_internal_r+0x2058>
 2007144:	e03fc915 	stw	zero,-220(fp)
 2007148:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
 200714c:	e0bfb817 	ldw	r2,-288(fp)
 2007150:	1038a026 	beq	r2,zero,20053d4 <___vfprintf_internal_r+0x174>
			_free_r (data, malloc_buf);
 2007154:	e17fb817 	ldw	r5,-288(fp)
 2007158:	e13fe617 	ldw	r4,-104(fp)
 200715c:	200a0ec0 	call	200a0ec <_free_r>
			malloc_buf = NULL;
 2007160:	e03fb815 	stw	zero,-288(fp)
		}
	}
 2007164:	00389b06 	br	20053d4 <___vfprintf_internal_r+0x174>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 2007168:	0001883a 	nop
 200716c:	00000106 	br	2007174 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2007170:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2007174:	e0bfca17 	ldw	r2,-216(fp)
 2007178:	10000626 	beq	r2,zero,2007194 <___vfprintf_internal_r+0x1f34>
 200717c:	e0bfc804 	addi	r2,fp,-224
 2007180:	100d883a 	mov	r6,r2
 2007184:	e17fe717 	ldw	r5,-100(fp)
 2007188:	e13fe617 	ldw	r4,-104(fp)
 200718c:	200f0e80 	call	200f0e8 <__sprint_r>
 2007190:	10004b1e 	bne	r2,zero,20072c0 <___vfprintf_internal_r+0x2060>
 2007194:	e03fc915 	stw	zero,-220(fp)
 2007198:	e47fcb04 	addi	r17,fp,-212
 200719c:	00004906 	br	20072c4 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 20071a0:	0001883a 	nop
 20071a4:	00004706 	br	20072c4 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 20071a8:	0001883a 	nop
 20071ac:	00004506 	br	20072c4 <___vfprintf_internal_r+0x2064>
 20071b0:	0001883a 	nop
 20071b4:	00004306 	br	20072c4 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 20071b8:	0001883a 	nop
 20071bc:	00004106 	br	20072c4 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 20071c0:	0001883a 	nop
 20071c4:	00003f06 	br	20072c4 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 20071c8:	0001883a 	nop
 20071cc:	00003d06 	br	20072c4 <___vfprintf_internal_r+0x2064>
 20071d0:	0001883a 	nop
 20071d4:	00003b06 	br	20072c4 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 20071d8:	0001883a 	nop
 20071dc:	00003906 	br	20072c4 <___vfprintf_internal_r+0x2064>
 20071e0:	0001883a 	nop
 20071e4:	00003706 	br	20072c4 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
 20071e8:	0001883a 	nop
 20071ec:	00003506 	br	20072c4 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 20071f0:	0001883a 	nop
 20071f4:	00003306 	br	20072c4 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 20071f8:	0001883a 	nop
 20071fc:	00003106 	br	20072c4 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
 2007200:	0001883a 	nop
 2007204:	00002f06 	br	20072c4 <___vfprintf_internal_r+0x2064>
 2007208:	0001883a 	nop
 200720c:	00002d06 	br	20072c4 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
 2007210:	0001883a 	nop
 2007214:	00002b06 	br	20072c4 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
 2007218:	0001883a 	nop
 200721c:	00002906 	br	20072c4 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
 2007220:	0001883a 	nop
 2007224:	00002706 	br	20072c4 <___vfprintf_internal_r+0x2064>
 2007228:	0001883a 	nop
 200722c:	00002506 	br	20072c4 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
 2007230:	0001883a 	nop
 2007234:	00002306 	br	20072c4 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
 2007238:	0001883a 	nop
 200723c:	00002106 	br	20072c4 <___vfprintf_internal_r+0x2064>
 2007240:	0001883a 	nop
 2007244:	00001f06 	br	20072c4 <___vfprintf_internal_r+0x2064>
 2007248:	0001883a 	nop
 200724c:	00001d06 	br	20072c4 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
 2007250:	0001883a 	nop
 2007254:	00001b06 	br	20072c4 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
 2007258:	0001883a 	nop
 200725c:	00001906 	br	20072c4 <___vfprintf_internal_r+0x2064>
 2007260:	0001883a 	nop
 2007264:	00001706 	br	20072c4 <___vfprintf_internal_r+0x2064>
 2007268:	0001883a 	nop
 200726c:	00001506 	br	20072c4 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
 2007270:	0001883a 	nop
 2007274:	00001306 	br	20072c4 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
 2007278:	0001883a 	nop
 200727c:	00001106 	br	20072c4 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
 2007280:	0001883a 	nop
 2007284:	00000f06 	br	20072c4 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 2007288:	0001883a 	nop
 200728c:	00000d06 	br	20072c4 <___vfprintf_internal_r+0x2064>
 2007290:	0001883a 	nop
 2007294:	00000b06 	br	20072c4 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
 2007298:	0001883a 	nop
 200729c:	00000906 	br	20072c4 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
 20072a0:	0001883a 	nop
 20072a4:	00000706 	br	20072c4 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 20072a8:	0001883a 	nop
 20072ac:	00000506 	br	20072c4 <___vfprintf_internal_r+0x2064>
 20072b0:	0001883a 	nop
 20072b4:	00000306 	br	20072c4 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 20072b8:	0001883a 	nop
 20072bc:	00000106 	br	20072c4 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 20072c0:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 20072c4:	e0bfb817 	ldw	r2,-288(fp)
 20072c8:	10000326 	beq	r2,zero,20072d8 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
 20072cc:	e17fb817 	ldw	r5,-288(fp)
 20072d0:	e13fe617 	ldw	r4,-104(fp)
 20072d4:	200a0ec0 	call	200a0ec <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 20072d8:	e0bfe717 	ldw	r2,-100(fp)
 20072dc:	1080030b 	ldhu	r2,12(r2)
 20072e0:	10bfffcc 	andi	r2,r2,65535
 20072e4:	1080100c 	andi	r2,r2,64
 20072e8:	1000021e 	bne	r2,zero,20072f4 <___vfprintf_internal_r+0x2094>
 20072ec:	e0bfac17 	ldw	r2,-336(fp)
 20072f0:	00000206 	br	20072fc <___vfprintf_internal_r+0x209c>
 20072f4:	00bfffc4 	movi	r2,-1
 20072f8:	0001883a 	nop
	/* NOTREACHED */
}
 20072fc:	e6fff804 	addi	sp,fp,-32
 2007300:	dfc00917 	ldw	ra,36(sp)
 2007304:	df000817 	ldw	fp,32(sp)
 2007308:	ddc00717 	ldw	r23,28(sp)
 200730c:	dd800617 	ldw	r22,24(sp)
 2007310:	dd400517 	ldw	r21,20(sp)
 2007314:	dd000417 	ldw	r20,16(sp)
 2007318:	dcc00317 	ldw	r19,12(sp)
 200731c:	dc800217 	ldw	r18,8(sp)
 2007320:	dc400117 	ldw	r17,4(sp)
 2007324:	dc000017 	ldw	r16,0(sp)
 2007328:	dec00a04 	addi	sp,sp,40
 200732c:	f800283a 	ret

02007330 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 2007330:	deffef04 	addi	sp,sp,-68
 2007334:	dfc01015 	stw	ra,64(sp)
 2007338:	df000f15 	stw	fp,60(sp)
 200733c:	df000f04 	addi	fp,sp,60
 2007340:	e13ffc15 	stw	r4,-16(fp)
 2007344:	e17ffd15 	stw	r5,-12(fp)
 2007348:	e1bffe15 	stw	r6,-8(fp)
 200734c:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 2007350:	e0bffd17 	ldw	r2,-12(fp)
 2007354:	e0bffa15 	stw	r2,-24(fp)
 2007358:	e0bffe17 	ldw	r2,-8(fp)
 200735c:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 2007360:	e0bffb17 	ldw	r2,-20(fp)
 2007364:	1000090e 	bge	r2,zero,200738c <cvt+0x5c>
		value = -value;
 2007368:	e0bffd17 	ldw	r2,-12(fp)
 200736c:	e0bffd15 	stw	r2,-12(fp)
 2007370:	e0bffe17 	ldw	r2,-8(fp)
 2007374:	10a0003c 	xorhi	r2,r2,32768
 2007378:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
 200737c:	e0800317 	ldw	r2,12(fp)
 2007380:	00c00b44 	movi	r3,45
 2007384:	10c00005 	stb	r3,0(r2)
 2007388:	00000206 	br	2007394 <cvt+0x64>
	} else
		*sign = '\000';
 200738c:	e0800317 	ldw	r2,12(fp)
 2007390:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 2007394:	e0800517 	ldw	r2,20(fp)
 2007398:	108019a0 	cmpeqi	r2,r2,102
 200739c:	1000031e 	bne	r2,zero,20073ac <cvt+0x7c>
 20073a0:	e0800517 	ldw	r2,20(fp)
 20073a4:	10801198 	cmpnei	r2,r2,70
 20073a8:	1000031e 	bne	r2,zero,20073b8 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 20073ac:	008000c4 	movi	r2,3
 20073b0:	e0bff515 	stw	r2,-44(fp)
 20073b4:	00000b06 	br	20073e4 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 20073b8:	e0800517 	ldw	r2,20(fp)
 20073bc:	10801960 	cmpeqi	r2,r2,101
 20073c0:	1000031e 	bne	r2,zero,20073d0 <cvt+0xa0>
 20073c4:	e0800517 	ldw	r2,20(fp)
 20073c8:	10801158 	cmpnei	r2,r2,69
 20073cc:	1000031e 	bne	r2,zero,20073dc <cvt+0xac>
			ndigits++;
 20073d0:	e0bfff17 	ldw	r2,-4(fp)
 20073d4:	10800044 	addi	r2,r2,1
 20073d8:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
 20073dc:	00800084 	movi	r2,2
 20073e0:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 20073e4:	e0bff904 	addi	r2,fp,-28
 20073e8:	d8800315 	stw	r2,12(sp)
 20073ec:	e0bff804 	addi	r2,fp,-32
 20073f0:	d8800215 	stw	r2,8(sp)
 20073f4:	e0800417 	ldw	r2,16(fp)
 20073f8:	d8800115 	stw	r2,4(sp)
 20073fc:	e0bfff17 	ldw	r2,-4(fp)
 2007400:	d8800015 	stw	r2,0(sp)
 2007404:	e1fff517 	ldw	r7,-44(fp)
 2007408:	e17ffd17 	ldw	r5,-12(fp)
 200740c:	e1bffe17 	ldw	r6,-8(fp)
 2007410:	e13ffc17 	ldw	r4,-16(fp)
 2007414:	2007bd00 	call	2007bd0 <_dtoa_r>
 2007418:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 200741c:	e0800517 	ldw	r2,20(fp)
 2007420:	108019e0 	cmpeqi	r2,r2,103
 2007424:	1000031e 	bne	r2,zero,2007434 <cvt+0x104>
 2007428:	e0800517 	ldw	r2,20(fp)
 200742c:	108011d8 	cmpnei	r2,r2,71
 2007430:	1000031e 	bne	r2,zero,2007440 <cvt+0x110>
 2007434:	e0800217 	ldw	r2,8(fp)
 2007438:	1080004c 	andi	r2,r2,1
 200743c:	10003326 	beq	r2,zero,200750c <cvt+0x1dc>
		bp = digits + ndigits;
 2007440:	e0bfff17 	ldw	r2,-4(fp)
 2007444:	e0fff717 	ldw	r3,-36(fp)
 2007448:	1885883a 	add	r2,r3,r2
 200744c:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
 2007450:	e0800517 	ldw	r2,20(fp)
 2007454:	108019a0 	cmpeqi	r2,r2,102
 2007458:	1000031e 	bne	r2,zero,2007468 <cvt+0x138>
 200745c:	e0800517 	ldw	r2,20(fp)
 2007460:	10801198 	cmpnei	r2,r2,70
 2007464:	1000181e 	bne	r2,zero,20074c8 <cvt+0x198>
			if (*digits == '0' && value)
 2007468:	e0bff717 	ldw	r2,-36(fp)
 200746c:	10800003 	ldbu	r2,0(r2)
 2007470:	10803fcc 	andi	r2,r2,255
 2007474:	1080201c 	xori	r2,r2,128
 2007478:	10bfe004 	addi	r2,r2,-128
 200747c:	10800c18 	cmpnei	r2,r2,48
 2007480:	10000b1e 	bne	r2,zero,20074b0 <cvt+0x180>
 2007484:	000d883a 	mov	r6,zero
 2007488:	000f883a 	mov	r7,zero
 200748c:	e13ffd17 	ldw	r4,-12(fp)
 2007490:	e17ffe17 	ldw	r5,-8(fp)
 2007494:	20125d80 	call	20125d8 <__eqdf2>
 2007498:	10000526 	beq	r2,zero,20074b0 <cvt+0x180>
				*decpt = -ndigits + 1;
 200749c:	00c00044 	movi	r3,1
 20074a0:	e0bfff17 	ldw	r2,-4(fp)
 20074a4:	1887c83a 	sub	r3,r3,r2
 20074a8:	e0800417 	ldw	r2,16(fp)
 20074ac:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 20074b0:	e0800417 	ldw	r2,16(fp)
 20074b4:	10800017 	ldw	r2,0(r2)
 20074b8:	1007883a 	mov	r3,r2
 20074bc:	e0bff617 	ldw	r2,-40(fp)
 20074c0:	10c5883a 	add	r2,r2,r3
 20074c4:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 20074c8:	000d883a 	mov	r6,zero
 20074cc:	000f883a 	mov	r7,zero
 20074d0:	e13ffd17 	ldw	r4,-12(fp)
 20074d4:	e17ffe17 	ldw	r5,-8(fp)
 20074d8:	20125d80 	call	20125d8 <__eqdf2>
 20074dc:	1000081e 	bne	r2,zero,2007500 <cvt+0x1d0>
			rve = bp;
 20074e0:	e0bff617 	ldw	r2,-40(fp)
 20074e4:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
 20074e8:	00000506 	br	2007500 <cvt+0x1d0>
			*rve++ = '0';
 20074ec:	e0bff917 	ldw	r2,-28(fp)
 20074f0:	10c00044 	addi	r3,r2,1
 20074f4:	e0fff915 	stw	r3,-28(fp)
 20074f8:	00c00c04 	movi	r3,48
 20074fc:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
 2007500:	e0fff917 	ldw	r3,-28(fp)
 2007504:	e0bff617 	ldw	r2,-40(fp)
 2007508:	18bff836 	bltu	r3,r2,20074ec <cvt+0x1bc>
			*rve++ = '0';
	}
	*length = rve - digits;
 200750c:	e0bff917 	ldw	r2,-28(fp)
 2007510:	1007883a 	mov	r3,r2
 2007514:	e0bff717 	ldw	r2,-36(fp)
 2007518:	1887c83a 	sub	r3,r3,r2
 200751c:	e0800617 	ldw	r2,24(fp)
 2007520:	10c00015 	stw	r3,0(r2)
	return (digits);
 2007524:	e0bff717 	ldw	r2,-36(fp)
}
 2007528:	e037883a 	mov	sp,fp
 200752c:	dfc00117 	ldw	ra,4(sp)
 2007530:	df000017 	ldw	fp,0(sp)
 2007534:	dec00204 	addi	sp,sp,8
 2007538:	f800283a 	ret

0200753c <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 200753c:	defff704 	addi	sp,sp,-36
 2007540:	dfc00815 	stw	ra,32(sp)
 2007544:	df000715 	stw	fp,28(sp)
 2007548:	dc400615 	stw	r17,24(sp)
 200754c:	dc000515 	stw	r16,20(sp)
 2007550:	df000704 	addi	fp,sp,28
 2007554:	e13ffb15 	stw	r4,-20(fp)
 2007558:	e17ffc15 	stw	r5,-16(fp)
 200755c:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 2007560:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 2007564:	8805883a 	mov	r2,r17
 2007568:	14400044 	addi	r17,r2,1
 200756c:	e0fffd17 	ldw	r3,-12(fp)
 2007570:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 2007574:	e0bffc17 	ldw	r2,-16(fp)
 2007578:	1000080e 	bge	r2,zero,200759c <exponent+0x60>
		exp = -exp;
 200757c:	e0bffc17 	ldw	r2,-16(fp)
 2007580:	0085c83a 	sub	r2,zero,r2
 2007584:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
 2007588:	8805883a 	mov	r2,r17
 200758c:	14400044 	addi	r17,r2,1
 2007590:	00c00b44 	movi	r3,45
 2007594:	10c00005 	stb	r3,0(r2)
 2007598:	00000406 	br	20075ac <exponent+0x70>
	}
	else
		*p++ = '+';
 200759c:	8805883a 	mov	r2,r17
 20075a0:	14400044 	addi	r17,r2,1
 20075a4:	00c00ac4 	movi	r3,43
 20075a8:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 20075ac:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
 20075b0:	e0bffc17 	ldw	r2,-16(fp)
 20075b4:	10800290 	cmplti	r2,r2,10
 20075b8:	10001d1e 	bne	r2,zero,2007630 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
 20075bc:	843fffc4 	addi	r16,r16,-1
 20075c0:	e0bffc17 	ldw	r2,-16(fp)
 20075c4:	01400284 	movi	r5,10
 20075c8:	1009883a 	mov	r4,r2
 20075cc:	20049940 	call	2004994 <__modsi3>
 20075d0:	10800c04 	addi	r2,r2,48
 20075d4:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 20075d8:	e0bffc17 	ldw	r2,-16(fp)
 20075dc:	01400284 	movi	r5,10
 20075e0:	1009883a 	mov	r4,r2
 20075e4:	20049100 	call	2004910 <__divsi3>
 20075e8:	e0bffc15 	stw	r2,-16(fp)
 20075ec:	e0bffc17 	ldw	r2,-16(fp)
 20075f0:	10800288 	cmpgei	r2,r2,10
 20075f4:	103ff11e 	bne	r2,zero,20075bc <exponent+0x80>
		*--t = to_char (exp);
 20075f8:	843fffc4 	addi	r16,r16,-1
 20075fc:	e0bffc17 	ldw	r2,-16(fp)
 2007600:	10800c04 	addi	r2,r2,48
 2007604:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 2007608:	00000606 	br	2007624 <exponent+0xe8>
 200760c:	8805883a 	mov	r2,r17
 2007610:	14400044 	addi	r17,r2,1
 2007614:	8007883a 	mov	r3,r16
 2007618:	1c000044 	addi	r16,r3,1
 200761c:	18c00003 	ldbu	r3,0(r3)
 2007620:	10c00005 	stb	r3,0(r2)
 2007624:	e0bffac4 	addi	r2,fp,-21
 2007628:	80bff836 	bltu	r16,r2,200760c <exponent+0xd0>
 200762c:	00000906 	br	2007654 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
 2007630:	8805883a 	mov	r2,r17
 2007634:	14400044 	addi	r17,r2,1
 2007638:	00c00c04 	movi	r3,48
 200763c:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 2007640:	8805883a 	mov	r2,r17
 2007644:	14400044 	addi	r17,r2,1
 2007648:	e0fffc17 	ldw	r3,-16(fp)
 200764c:	18c00c04 	addi	r3,r3,48
 2007650:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 2007654:	8807883a 	mov	r3,r17
 2007658:	e0bffb17 	ldw	r2,-20(fp)
 200765c:	1885c83a 	sub	r2,r3,r2
}
 2007660:	e6fffe04 	addi	sp,fp,-8
 2007664:	dfc00317 	ldw	ra,12(sp)
 2007668:	df000217 	ldw	fp,8(sp)
 200766c:	dc400117 	ldw	r17,4(sp)
 2007670:	dc000017 	ldw	r16,0(sp)
 2007674:	dec00404 	addi	sp,sp,16
 2007678:	f800283a 	ret

0200767c <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 200767c:	defffb04 	addi	sp,sp,-20
 2007680:	dfc00415 	stw	ra,16(sp)
 2007684:	df000315 	stw	fp,12(sp)
 2007688:	dc000215 	stw	r16,8(sp)
 200768c:	df000304 	addi	fp,sp,12
 2007690:	e13ffe15 	stw	r4,-8(fp)
 2007694:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 2007698:	d0a00017 	ldw	r2,-32768(gp)
 200769c:	e0bffd15 	stw	r2,-12(fp)
 20076a0:	e0bffd17 	ldw	r2,-12(fp)
 20076a4:	10000526 	beq	r2,zero,20076bc <__swsetup_r+0x40>
 20076a8:	e0bffd17 	ldw	r2,-12(fp)
 20076ac:	10800e17 	ldw	r2,56(r2)
 20076b0:	1000021e 	bne	r2,zero,20076bc <__swsetup_r+0x40>
 20076b4:	e13ffd17 	ldw	r4,-12(fp)
 20076b8:	2009ecc0 	call	2009ecc <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 20076bc:	8080030b 	ldhu	r2,12(r16)
 20076c0:	10bfffcc 	andi	r2,r2,65535
 20076c4:	1080020c 	andi	r2,r2,8
 20076c8:	1000241e 	bne	r2,zero,200775c <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 20076cc:	8080030b 	ldhu	r2,12(r16)
 20076d0:	10bfffcc 	andi	r2,r2,65535
 20076d4:	1080040c 	andi	r2,r2,16
 20076d8:	1000081e 	bne	r2,zero,20076fc <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 20076dc:	e0bffe17 	ldw	r2,-8(fp)
 20076e0:	00c00244 	movi	r3,9
 20076e4:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 20076e8:	8080030b 	ldhu	r2,12(r16)
 20076ec:	10801014 	ori	r2,r2,64
 20076f0:	8080030d 	sth	r2,12(r16)
	  return EOF;
 20076f4:	00bfffc4 	movi	r2,-1
 20076f8:	00004206 	br	2007804 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 20076fc:	8080030b 	ldhu	r2,12(r16)
 2007700:	10bfffcc 	andi	r2,r2,65535
 2007704:	1080010c 	andi	r2,r2,4
 2007708:	10001126 	beq	r2,zero,2007750 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 200770c:	80800c17 	ldw	r2,48(r16)
 2007710:	10000826 	beq	r2,zero,2007734 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 2007714:	80c00c17 	ldw	r3,48(r16)
 2007718:	80801004 	addi	r2,r16,64
 200771c:	18800426 	beq	r3,r2,2007730 <__swsetup_r+0xb4>
 2007720:	80800c17 	ldw	r2,48(r16)
 2007724:	100b883a 	mov	r5,r2
 2007728:	e13ffe17 	ldw	r4,-8(fp)
 200772c:	200a0ec0 	call	200a0ec <_free_r>
 2007730:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 2007734:	80c0030b 	ldhu	r3,12(r16)
 2007738:	00bff6c4 	movi	r2,-37
 200773c:	1884703a 	and	r2,r3,r2
 2007740:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 2007744:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 2007748:	80800417 	ldw	r2,16(r16)
 200774c:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 2007750:	8080030b 	ldhu	r2,12(r16)
 2007754:	10800214 	ori	r2,r2,8
 2007758:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 200775c:	80800417 	ldw	r2,16(r16)
 2007760:	10000b1e 	bne	r2,zero,2007790 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 2007764:	8080030b 	ldhu	r2,12(r16)
 2007768:	10bfffcc 	andi	r2,r2,65535
 200776c:	1080800c 	andi	r2,r2,512
 2007770:	10000426 	beq	r2,zero,2007784 <__swsetup_r+0x108>
 2007774:	8080030b 	ldhu	r2,12(r16)
 2007778:	10bfffcc 	andi	r2,r2,65535
 200777c:	1080200c 	andi	r2,r2,128
 2007780:	10000326 	beq	r2,zero,2007790 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 2007784:	800b883a 	mov	r5,r16
 2007788:	e13ffe17 	ldw	r4,-8(fp)
 200778c:	200b14c0 	call	200b14c <__smakebuf_r>

  if (fp->_flags & __SLBF)
 2007790:	8080030b 	ldhu	r2,12(r16)
 2007794:	10bfffcc 	andi	r2,r2,65535
 2007798:	1080004c 	andi	r2,r2,1
 200779c:	10000526 	beq	r2,zero,20077b4 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 20077a0:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 20077a4:	80800517 	ldw	r2,20(r16)
 20077a8:	0085c83a 	sub	r2,zero,r2
 20077ac:	80800615 	stw	r2,24(r16)
 20077b0:	00000806 	br	20077d4 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 20077b4:	8080030b 	ldhu	r2,12(r16)
 20077b8:	10bfffcc 	andi	r2,r2,65535
 20077bc:	1080008c 	andi	r2,r2,2
 20077c0:	1000021e 	bne	r2,zero,20077cc <__swsetup_r+0x150>
 20077c4:	80800517 	ldw	r2,20(r16)
 20077c8:	00000106 	br	20077d0 <__swsetup_r+0x154>
 20077cc:	0005883a 	mov	r2,zero
 20077d0:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 20077d4:	80800417 	ldw	r2,16(r16)
 20077d8:	1000091e 	bne	r2,zero,2007800 <__swsetup_r+0x184>
 20077dc:	8080030b 	ldhu	r2,12(r16)
 20077e0:	10bfffcc 	andi	r2,r2,65535
 20077e4:	1080200c 	andi	r2,r2,128
 20077e8:	10000526 	beq	r2,zero,2007800 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 20077ec:	8080030b 	ldhu	r2,12(r16)
 20077f0:	10801014 	ori	r2,r2,64
 20077f4:	8080030d 	sth	r2,12(r16)
      return EOF;
 20077f8:	00bfffc4 	movi	r2,-1
 20077fc:	00000106 	br	2007804 <__swsetup_r+0x188>
    }
  return 0;
 2007800:	0005883a 	mov	r2,zero
}
 2007804:	e6ffff04 	addi	sp,fp,-4
 2007808:	dfc00217 	ldw	ra,8(sp)
 200780c:	df000117 	ldw	fp,4(sp)
 2007810:	dc000017 	ldw	r16,0(sp)
 2007814:	dec00304 	addi	sp,sp,12
 2007818:	f800283a 	ret

0200781c <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
 200781c:	deffef04 	addi	sp,sp,-68
 2007820:	dfc01015 	stw	ra,64(sp)
 2007824:	df000f15 	stw	fp,60(sp)
 2007828:	df000f04 	addi	fp,sp,60
 200782c:	e13ffe15 	stw	r4,-8(fp)
 2007830:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 2007834:	e0bfff17 	ldw	r2,-4(fp)
 2007838:	10800417 	ldw	r2,16(r2)
 200783c:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 2007840:	e0bffe17 	ldw	r2,-8(fp)
 2007844:	10c00417 	ldw	r3,16(r2)
 2007848:	e0bff117 	ldw	r2,-60(fp)
 200784c:	1880020e 	bge	r3,r2,2007858 <quorem+0x3c>
    return 0;
 2007850:	0005883a 	mov	r2,zero
 2007854:	0000d906 	br	2007bbc <quorem+0x3a0>
  sx = S->_x;
 2007858:	e0bfff17 	ldw	r2,-4(fp)
 200785c:	10800504 	addi	r2,r2,20
 2007860:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
 2007864:	e0bff117 	ldw	r2,-60(fp)
 2007868:	10bfffc4 	addi	r2,r2,-1
 200786c:	e0bff115 	stw	r2,-60(fp)
 2007870:	e0bff117 	ldw	r2,-60(fp)
 2007874:	1085883a 	add	r2,r2,r2
 2007878:	1085883a 	add	r2,r2,r2
 200787c:	1007883a 	mov	r3,r2
 2007880:	e0bff717 	ldw	r2,-36(fp)
 2007884:	10c5883a 	add	r2,r2,r3
 2007888:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 200788c:	e0bffe17 	ldw	r2,-8(fp)
 2007890:	10800504 	addi	r2,r2,20
 2007894:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
 2007898:	e0bff117 	ldw	r2,-60(fp)
 200789c:	1085883a 	add	r2,r2,r2
 20078a0:	1085883a 	add	r2,r2,r2
 20078a4:	1007883a 	mov	r3,r2
 20078a8:	e0bff517 	ldw	r2,-44(fp)
 20078ac:	10c5883a 	add	r2,r2,r3
 20078b0:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 20078b4:	e0bff617 	ldw	r2,-40(fp)
 20078b8:	10c00017 	ldw	r3,0(r2)
 20078bc:	e0bff817 	ldw	r2,-32(fp)
 20078c0:	10800017 	ldw	r2,0(r2)
 20078c4:	10800044 	addi	r2,r2,1
 20078c8:	100b883a 	mov	r5,r2
 20078cc:	1809883a 	mov	r4,r3
 20078d0:	2004a080 	call	2004a08 <__udivsi3>
 20078d4:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 20078d8:	e0bff417 	ldw	r2,-48(fp)
 20078dc:	10005326 	beq	r2,zero,2007a2c <quorem+0x210>
    {
      borrow = 0;
 20078e0:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 20078e4:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 20078e8:	e0bff717 	ldw	r2,-36(fp)
 20078ec:	10c00104 	addi	r3,r2,4
 20078f0:	e0fff715 	stw	r3,-36(fp)
 20078f4:	10800017 	ldw	r2,0(r2)
 20078f8:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
 20078fc:	e0bff917 	ldw	r2,-28(fp)
 2007900:	10ffffcc 	andi	r3,r2,65535
 2007904:	e0bff417 	ldw	r2,-48(fp)
 2007908:	1887383a 	mul	r3,r3,r2
 200790c:	e0bff317 	ldw	r2,-52(fp)
 2007910:	1885883a 	add	r2,r3,r2
 2007914:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 2007918:	e0bff917 	ldw	r2,-28(fp)
 200791c:	1006d43a 	srli	r3,r2,16
 2007920:	e0bff417 	ldw	r2,-48(fp)
 2007924:	1887383a 	mul	r3,r3,r2
 2007928:	e0bffa17 	ldw	r2,-24(fp)
 200792c:	1004d43a 	srli	r2,r2,16
 2007930:	1885883a 	add	r2,r3,r2
 2007934:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 2007938:	e0bffb17 	ldw	r2,-20(fp)
 200793c:	1004d43a 	srli	r2,r2,16
 2007940:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 2007944:	e0bff517 	ldw	r2,-44(fp)
 2007948:	10800017 	ldw	r2,0(r2)
 200794c:	10ffffcc 	andi	r3,r2,65535
 2007950:	e0bffa17 	ldw	r2,-24(fp)
 2007954:	10bfffcc 	andi	r2,r2,65535
 2007958:	1887c83a 	sub	r3,r3,r2
 200795c:	e0bff217 	ldw	r2,-56(fp)
 2007960:	1885883a 	add	r2,r3,r2
 2007964:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 2007968:	e0bffc17 	ldw	r2,-16(fp)
 200796c:	1005d43a 	srai	r2,r2,16
 2007970:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 2007974:	e0bff517 	ldw	r2,-44(fp)
 2007978:	10800017 	ldw	r2,0(r2)
 200797c:	1006d43a 	srli	r3,r2,16
 2007980:	e0bffb17 	ldw	r2,-20(fp)
 2007984:	10bfffcc 	andi	r2,r2,65535
 2007988:	1887c83a 	sub	r3,r3,r2
 200798c:	e0bff217 	ldw	r2,-56(fp)
 2007990:	1885883a 	add	r2,r3,r2
 2007994:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2007998:	e0bffd17 	ldw	r2,-12(fp)
 200799c:	1005d43a 	srai	r2,r2,16
 20079a0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 20079a4:	e0bff517 	ldw	r2,-44(fp)
 20079a8:	10c00104 	addi	r3,r2,4
 20079ac:	e0fff515 	stw	r3,-44(fp)
 20079b0:	e0fffd17 	ldw	r3,-12(fp)
 20079b4:	1808943a 	slli	r4,r3,16
 20079b8:	e0fffc17 	ldw	r3,-16(fp)
 20079bc:	18ffffcc 	andi	r3,r3,65535
 20079c0:	20c6b03a 	or	r3,r4,r3
 20079c4:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 20079c8:	e0bff717 	ldw	r2,-36(fp)
 20079cc:	e0fff817 	ldw	r3,-32(fp)
 20079d0:	18bfc52e 	bgeu	r3,r2,20078e8 <quorem+0xcc>
      if (!*bxe)
 20079d4:	e0bff617 	ldw	r2,-40(fp)
 20079d8:	10800017 	ldw	r2,0(r2)
 20079dc:	1000131e 	bne	r2,zero,2007a2c <quorem+0x210>
	{
	  bx = b->_x;
 20079e0:	e0bffe17 	ldw	r2,-8(fp)
 20079e4:	10800504 	addi	r2,r2,20
 20079e8:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
 20079ec:	00000306 	br	20079fc <quorem+0x1e0>
	    --n;
 20079f0:	e0bff117 	ldw	r2,-60(fp)
 20079f4:	10bfffc4 	addi	r2,r2,-1
 20079f8:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
 20079fc:	e0bff617 	ldw	r2,-40(fp)
 2007a00:	10bfff04 	addi	r2,r2,-4
 2007a04:	e0bff615 	stw	r2,-40(fp)
 2007a08:	e0bff617 	ldw	r2,-40(fp)
 2007a0c:	e0fff517 	ldw	r3,-44(fp)
 2007a10:	1880032e 	bgeu	r3,r2,2007a20 <quorem+0x204>
 2007a14:	e0bff617 	ldw	r2,-40(fp)
 2007a18:	10800017 	ldw	r2,0(r2)
 2007a1c:	103ff426 	beq	r2,zero,20079f0 <quorem+0x1d4>
	    --n;
	  b->_wds = n;
 2007a20:	e0bffe17 	ldw	r2,-8(fp)
 2007a24:	e0fff117 	ldw	r3,-60(fp)
 2007a28:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 2007a2c:	e17fff17 	ldw	r5,-4(fp)
 2007a30:	e13ffe17 	ldw	r4,-8(fp)
 2007a34:	200d44c0 	call	200d44c <__mcmp>
 2007a38:	10005f16 	blt	r2,zero,2007bb8 <quorem+0x39c>
    {
      q++;
 2007a3c:	e0bff417 	ldw	r2,-48(fp)
 2007a40:	10800044 	addi	r2,r2,1
 2007a44:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
 2007a48:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
 2007a4c:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
 2007a50:	e0bffe17 	ldw	r2,-8(fp)
 2007a54:	10800504 	addi	r2,r2,20
 2007a58:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
 2007a5c:	e0bfff17 	ldw	r2,-4(fp)
 2007a60:	10800504 	addi	r2,r2,20
 2007a64:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 2007a68:	e0bff717 	ldw	r2,-36(fp)
 2007a6c:	10c00104 	addi	r3,r2,4
 2007a70:	e0fff715 	stw	r3,-36(fp)
 2007a74:	10800017 	ldw	r2,0(r2)
 2007a78:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
 2007a7c:	e0bff917 	ldw	r2,-28(fp)
 2007a80:	10ffffcc 	andi	r3,r2,65535
 2007a84:	e0bff317 	ldw	r2,-52(fp)
 2007a88:	1885883a 	add	r2,r3,r2
 2007a8c:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
 2007a90:	e0bff917 	ldw	r2,-28(fp)
 2007a94:	1006d43a 	srli	r3,r2,16
 2007a98:	e0bffa17 	ldw	r2,-24(fp)
 2007a9c:	1004d43a 	srli	r2,r2,16
 2007aa0:	1885883a 	add	r2,r3,r2
 2007aa4:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
 2007aa8:	e0bffb17 	ldw	r2,-20(fp)
 2007aac:	1004d43a 	srli	r2,r2,16
 2007ab0:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 2007ab4:	e0bff517 	ldw	r2,-44(fp)
 2007ab8:	10800017 	ldw	r2,0(r2)
 2007abc:	10ffffcc 	andi	r3,r2,65535
 2007ac0:	e0bffa17 	ldw	r2,-24(fp)
 2007ac4:	10bfffcc 	andi	r2,r2,65535
 2007ac8:	1887c83a 	sub	r3,r3,r2
 2007acc:	e0bff217 	ldw	r2,-56(fp)
 2007ad0:	1885883a 	add	r2,r3,r2
 2007ad4:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
 2007ad8:	e0bffc17 	ldw	r2,-16(fp)
 2007adc:	1005d43a 	srai	r2,r2,16
 2007ae0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 2007ae4:	e0bff517 	ldw	r2,-44(fp)
 2007ae8:	10800017 	ldw	r2,0(r2)
 2007aec:	1006d43a 	srli	r3,r2,16
 2007af0:	e0bffb17 	ldw	r2,-20(fp)
 2007af4:	10bfffcc 	andi	r2,r2,65535
 2007af8:	1887c83a 	sub	r3,r3,r2
 2007afc:	e0bff217 	ldw	r2,-56(fp)
 2007b00:	1885883a 	add	r2,r3,r2
 2007b04:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
 2007b08:	e0bffd17 	ldw	r2,-12(fp)
 2007b0c:	1005d43a 	srai	r2,r2,16
 2007b10:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 2007b14:	e0bff517 	ldw	r2,-44(fp)
 2007b18:	10c00104 	addi	r3,r2,4
 2007b1c:	e0fff515 	stw	r3,-44(fp)
 2007b20:	e0fffd17 	ldw	r3,-12(fp)
 2007b24:	1808943a 	slli	r4,r3,16
 2007b28:	e0fffc17 	ldw	r3,-16(fp)
 2007b2c:	18ffffcc 	andi	r3,r3,65535
 2007b30:	20c6b03a 	or	r3,r4,r3
 2007b34:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 2007b38:	e0bff717 	ldw	r2,-36(fp)
 2007b3c:	e0fff817 	ldw	r3,-32(fp)
 2007b40:	18bfc92e 	bgeu	r3,r2,2007a68 <quorem+0x24c>
      bx = b->_x;
 2007b44:	e0bffe17 	ldw	r2,-8(fp)
 2007b48:	10800504 	addi	r2,r2,20
 2007b4c:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
 2007b50:	e0bff117 	ldw	r2,-60(fp)
 2007b54:	1085883a 	add	r2,r2,r2
 2007b58:	1085883a 	add	r2,r2,r2
 2007b5c:	1007883a 	mov	r3,r2
 2007b60:	e0bff517 	ldw	r2,-44(fp)
 2007b64:	10c5883a 	add	r2,r2,r3
 2007b68:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
 2007b6c:	e0bff617 	ldw	r2,-40(fp)
 2007b70:	10800017 	ldw	r2,0(r2)
 2007b74:	1000101e 	bne	r2,zero,2007bb8 <quorem+0x39c>
	{
	  while (--bxe > bx && !*bxe)
 2007b78:	00000306 	br	2007b88 <quorem+0x36c>
	    --n;
 2007b7c:	e0bff117 	ldw	r2,-60(fp)
 2007b80:	10bfffc4 	addi	r2,r2,-1
 2007b84:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
 2007b88:	e0bff617 	ldw	r2,-40(fp)
 2007b8c:	10bfff04 	addi	r2,r2,-4
 2007b90:	e0bff615 	stw	r2,-40(fp)
 2007b94:	e0bff617 	ldw	r2,-40(fp)
 2007b98:	e0fff517 	ldw	r3,-44(fp)
 2007b9c:	1880032e 	bgeu	r3,r2,2007bac <quorem+0x390>
 2007ba0:	e0bff617 	ldw	r2,-40(fp)
 2007ba4:	10800017 	ldw	r2,0(r2)
 2007ba8:	103ff426 	beq	r2,zero,2007b7c <quorem+0x360>
	    --n;
	  b->_wds = n;
 2007bac:	e0bffe17 	ldw	r2,-8(fp)
 2007bb0:	e0fff117 	ldw	r3,-60(fp)
 2007bb4:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 2007bb8:	e0bff417 	ldw	r2,-48(fp)
}
 2007bbc:	e037883a 	mov	sp,fp
 2007bc0:	dfc00117 	ldw	ra,4(sp)
 2007bc4:	df000017 	ldw	fp,0(sp)
 2007bc8:	dec00204 	addi	sp,sp,8
 2007bcc:	f800283a 	ret

02007bd0 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
 2007bd0:	deffcc04 	addi	sp,sp,-208
 2007bd4:	dfc03315 	stw	ra,204(sp)
 2007bd8:	df003215 	stw	fp,200(sp)
 2007bdc:	dcc03115 	stw	r19,196(sp)
 2007be0:	dc803015 	stw	r18,192(sp)
 2007be4:	dc402f15 	stw	r17,188(sp)
 2007be8:	dc002e15 	stw	r16,184(sp)
 2007bec:	df003204 	addi	fp,sp,200
 2007bf0:	e13ff815 	stw	r4,-32(fp)
 2007bf4:	e17ff915 	stw	r5,-28(fp)
 2007bf8:	e1bffa15 	stw	r6,-24(fp)
 2007bfc:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 2007c00:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 2007c04:	e0bff917 	ldw	r2,-28(fp)
 2007c08:	e0bff215 	stw	r2,-56(fp)
 2007c0c:	e0bffa17 	ldw	r2,-24(fp)
 2007c10:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 2007c14:	e0bff817 	ldw	r2,-32(fp)
 2007c18:	10801017 	ldw	r2,64(r2)
 2007c1c:	10001326 	beq	r2,zero,2007c6c <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 2007c20:	e0bff817 	ldw	r2,-32(fp)
 2007c24:	10801017 	ldw	r2,64(r2)
 2007c28:	e0fff817 	ldw	r3,-32(fp)
 2007c2c:	18c01117 	ldw	r3,68(r3)
 2007c30:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 2007c34:	e0bff817 	ldw	r2,-32(fp)
 2007c38:	10801017 	ldw	r2,64(r2)
 2007c3c:	e0fff817 	ldw	r3,-32(fp)
 2007c40:	18c01117 	ldw	r3,68(r3)
 2007c44:	01000044 	movi	r4,1
 2007c48:	20c6983a 	sll	r3,r4,r3
 2007c4c:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 2007c50:	e0bff817 	ldw	r2,-32(fp)
 2007c54:	10801017 	ldw	r2,64(r2)
 2007c58:	100b883a 	mov	r5,r2
 2007c5c:	e13ff817 	ldw	r4,-32(fp)
 2007c60:	200c79c0 	call	200c79c <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 2007c64:	e0bff817 	ldw	r2,-32(fp)
 2007c68:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 2007c6c:	e0bff317 	ldw	r2,-52(fp)
 2007c70:	1000090e 	bge	r2,zero,2007c98 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 2007c74:	e0800417 	ldw	r2,16(fp)
 2007c78:	00c00044 	movi	r3,1
 2007c7c:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 2007c80:	e0fff317 	ldw	r3,-52(fp)
 2007c84:	00a00034 	movhi	r2,32768
 2007c88:	10bfffc4 	addi	r2,r2,-1
 2007c8c:	1884703a 	and	r2,r3,r2
 2007c90:	e0bff315 	stw	r2,-52(fp)
 2007c94:	00000206 	br	2007ca0 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 2007c98:	e0800417 	ldw	r2,16(fp)
 2007c9c:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 2007ca0:	e0bff317 	ldw	r2,-52(fp)
 2007ca4:	10dffc2c 	andhi	r3,r2,32752
 2007ca8:	009ffc34 	movhi	r2,32752
 2007cac:	1880221e 	bne	r3,r2,2007d38 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 2007cb0:	e0800317 	ldw	r2,12(fp)
 2007cb4:	00c9c3c4 	movi	r3,9999
 2007cb8:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 2007cbc:	e0bff217 	ldw	r2,-56(fp)
 2007cc0:	1000081e 	bne	r2,zero,2007ce4 <_dtoa_r+0x114>
 2007cc4:	e0fff317 	ldw	r3,-52(fp)
 2007cc8:	00800434 	movhi	r2,16
 2007ccc:	10bfffc4 	addi	r2,r2,-1
 2007cd0:	1884703a 	and	r2,r3,r2
 2007cd4:	1000031e 	bne	r2,zero,2007ce4 <_dtoa_r+0x114>
 2007cd8:	008080b4 	movhi	r2,514
 2007cdc:	10ba9f04 	addi	r2,r2,-5508
 2007ce0:	00000206 	br	2007cec <_dtoa_r+0x11c>
 2007ce4:	008080b4 	movhi	r2,514
 2007ce8:	10baa204 	addi	r2,r2,-5496
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
 2007cec:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
 2007cf0:	e0800517 	ldw	r2,20(fp)
 2007cf4:	10000e26 	beq	r2,zero,2007d30 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 2007cf8:	e0bfe717 	ldw	r2,-100(fp)
 2007cfc:	108000c4 	addi	r2,r2,3
 2007d00:	10800003 	ldbu	r2,0(r2)
 2007d04:	10803fcc 	andi	r2,r2,255
 2007d08:	1080201c 	xori	r2,r2,128
 2007d0c:	10bfe004 	addi	r2,r2,-128
 2007d10:	10000326 	beq	r2,zero,2007d20 <_dtoa_r+0x150>
 2007d14:	e0bfe717 	ldw	r2,-100(fp)
 2007d18:	10800204 	addi	r2,r2,8
 2007d1c:	00000206 	br	2007d28 <_dtoa_r+0x158>
 2007d20:	e0bfe717 	ldw	r2,-100(fp)
 2007d24:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
 2007d28:	e0c00517 	ldw	r3,20(fp)
 2007d2c:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
 2007d30:	e0bfe717 	ldw	r2,-100(fp)
 2007d34:	00067b06 	br	2009724 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 2007d38:	e0bff217 	ldw	r2,-56(fp)
 2007d3c:	e0fff317 	ldw	r3,-52(fp)
 2007d40:	000d883a 	mov	r6,zero
 2007d44:	000f883a 	mov	r7,zero
 2007d48:	1009883a 	mov	r4,r2
 2007d4c:	180b883a 	mov	r5,r3
 2007d50:	20125d80 	call	20125d8 <__eqdf2>
 2007d54:	10000e1e 	bne	r2,zero,2007d90 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 2007d58:	e0800317 	ldw	r2,12(fp)
 2007d5c:	00c00044 	movi	r3,1
 2007d60:	10c00015 	stw	r3,0(r2)
      s = "0";
 2007d64:	008080b4 	movhi	r2,514
 2007d68:	10baa304 	addi	r2,r2,-5492
 2007d6c:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
 2007d70:	e0800517 	ldw	r2,20(fp)
 2007d74:	10000426 	beq	r2,zero,2007d88 <_dtoa_r+0x1b8>
	*rve = s + 1;
 2007d78:	e0bfe717 	ldw	r2,-100(fp)
 2007d7c:	10c00044 	addi	r3,r2,1
 2007d80:	e0800517 	ldw	r2,20(fp)
 2007d84:	10c00015 	stw	r3,0(r2)
      return s;
 2007d88:	e0bfe717 	ldw	r2,-100(fp)
 2007d8c:	00066506 	br	2009724 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 2007d90:	e0bff217 	ldw	r2,-56(fp)
 2007d94:	e0fff317 	ldw	r3,-52(fp)
 2007d98:	e17ff104 	addi	r5,fp,-60
 2007d9c:	e13ff004 	addi	r4,fp,-64
 2007da0:	d9000015 	stw	r4,0(sp)
 2007da4:	280f883a 	mov	r7,r5
 2007da8:	100b883a 	mov	r5,r2
 2007dac:	180d883a 	mov	r6,r3
 2007db0:	e13ff817 	ldw	r4,-32(fp)
 2007db4:	200dad40 	call	200dad4 <__d2b>
 2007db8:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 2007dbc:	e0bff317 	ldw	r2,-52(fp)
 2007dc0:	1004d53a 	srli	r2,r2,20
 2007dc4:	1081ffcc 	andi	r2,r2,2047
 2007dc8:	e0bfd215 	stw	r2,-184(fp)
 2007dcc:	e0bfd217 	ldw	r2,-184(fp)
 2007dd0:	10001126 	beq	r2,zero,2007e18 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 2007dd4:	e0bff217 	ldw	r2,-56(fp)
 2007dd8:	e0fff317 	ldw	r3,-52(fp)
 2007ddc:	e0bff415 	stw	r2,-48(fp)
 2007de0:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
 2007de4:	e0fff517 	ldw	r3,-44(fp)
 2007de8:	00800434 	movhi	r2,16
 2007dec:	10bfffc4 	addi	r2,r2,-1
 2007df0:	1884703a 	and	r2,r3,r2
 2007df4:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
 2007df8:	e0bff517 	ldw	r2,-44(fp)
 2007dfc:	108ffc34 	orhi	r2,r2,16368
 2007e00:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 2007e04:	e0bfd217 	ldw	r2,-184(fp)
 2007e08:	10bf0044 	addi	r2,r2,-1023
 2007e0c:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 2007e10:	e03fe015 	stw	zero,-128(fp)
 2007e14:	00002806 	br	2007eb8 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 2007e18:	e0fff017 	ldw	r3,-64(fp)
 2007e1c:	e0bff117 	ldw	r2,-60(fp)
 2007e20:	1885883a 	add	r2,r3,r2
 2007e24:	10810c84 	addi	r2,r2,1074
 2007e28:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 2007e2c:	e0bfd217 	ldw	r2,-184(fp)
 2007e30:	10800850 	cmplti	r2,r2,33
 2007e34:	10000b1e 	bne	r2,zero,2007e64 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2007e38:	e0fff317 	ldw	r3,-52(fp)
 2007e3c:	01001004 	movi	r4,64
 2007e40:	e0bfd217 	ldw	r2,-184(fp)
 2007e44:	2085c83a 	sub	r2,r4,r2
 2007e48:	1886983a 	sll	r3,r3,r2
 2007e4c:	e13ff217 	ldw	r4,-56(fp)
 2007e50:	e0bfd217 	ldw	r2,-184(fp)
 2007e54:	10bff804 	addi	r2,r2,-32
 2007e58:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 2007e5c:	1884b03a 	or	r2,r3,r2
 2007e60:	00000506 	br	2007e78 <_dtoa_r+0x2a8>
 2007e64:	e0fff217 	ldw	r3,-56(fp)
 2007e68:	01000804 	movi	r4,32
 2007e6c:	e0bfd217 	ldw	r2,-184(fp)
 2007e70:	2085c83a 	sub	r2,r4,r2
 2007e74:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 2007e78:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
 2007e7c:	e13fe817 	ldw	r4,-96(fp)
 2007e80:	20130b80 	call	20130b8 <__floatunsidf>
 2007e84:	1009883a 	mov	r4,r2
 2007e88:	180b883a 	mov	r5,r3
 2007e8c:	e13ff415 	stw	r4,-48(fp)
 2007e90:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 2007e94:	e0fff517 	ldw	r3,-44(fp)
 2007e98:	00bf8434 	movhi	r2,65040
 2007e9c:	1885883a 	add	r2,r3,r2
 2007ea0:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 2007ea4:	e0bfd217 	ldw	r2,-184(fp)
 2007ea8:	10bef344 	addi	r2,r2,-1075
 2007eac:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
 2007eb0:	00800044 	movi	r2,1
 2007eb4:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 2007eb8:	e0bff417 	ldw	r2,-48(fp)
 2007ebc:	e0fff517 	ldw	r3,-44(fp)
 2007ec0:	000d883a 	mov	r6,zero
 2007ec4:	01cffe34 	movhi	r7,16376
 2007ec8:	1009883a 	mov	r4,r2
 2007ecc:	180b883a 	mov	r5,r3
 2007ed0:	20126600 	call	2012660 <__subdf3>
 2007ed4:	1009883a 	mov	r4,r2
 2007ed8:	180b883a 	mov	r5,r3
 2007edc:	2005883a 	mov	r2,r4
 2007ee0:	2807883a 	mov	r3,r5
 2007ee4:	0198dbf4 	movhi	r6,25455
 2007ee8:	3190d844 	addi	r6,r6,17249
 2007eec:	01cff4f4 	movhi	r7,16339
 2007ef0:	39e1e9c4 	addi	r7,r7,-30809
 2007ef4:	1009883a 	mov	r4,r2
 2007ef8:	180b883a 	mov	r5,r3
 2007efc:	2003edc0 	call	2003edc <__muldf3>
 2007f00:	1009883a 	mov	r4,r2
 2007f04:	180b883a 	mov	r5,r3
 2007f08:	2005883a 	mov	r2,r4
 2007f0c:	2807883a 	mov	r3,r5
 2007f10:	01a2d874 	movhi	r6,35681
 2007f14:	31b22cc4 	addi	r6,r6,-14157
 2007f18:	01cff1f4 	movhi	r7,16327
 2007f1c:	39e28a04 	addi	r7,r7,-30168
 2007f20:	1009883a 	mov	r4,r2
 2007f24:	180b883a 	mov	r5,r3
 2007f28:	2011d2c0 	call	2011d2c <__adddf3>
 2007f2c:	1009883a 	mov	r4,r2
 2007f30:	180b883a 	mov	r5,r3
 2007f34:	2025883a 	mov	r18,r4
 2007f38:	2827883a 	mov	r19,r5
 2007f3c:	e13fd217 	ldw	r4,-184(fp)
 2007f40:	2012fdc0 	call	2012fdc <__floatsidf>
 2007f44:	1011883a 	mov	r8,r2
 2007f48:	1813883a 	mov	r9,r3
 2007f4c:	019427f4 	movhi	r6,20639
 2007f50:	319e7ec4 	addi	r6,r6,31227
 2007f54:	01cff4f4 	movhi	r7,16339
 2007f58:	39d104c4 	addi	r7,r7,17427
 2007f5c:	4009883a 	mov	r4,r8
 2007f60:	480b883a 	mov	r5,r9
 2007f64:	2003edc0 	call	2003edc <__muldf3>
 2007f68:	1009883a 	mov	r4,r2
 2007f6c:	180b883a 	mov	r5,r3
 2007f70:	2005883a 	mov	r2,r4
 2007f74:	2807883a 	mov	r3,r5
 2007f78:	100d883a 	mov	r6,r2
 2007f7c:	180f883a 	mov	r7,r3
 2007f80:	9009883a 	mov	r4,r18
 2007f84:	980b883a 	mov	r5,r19
 2007f88:	2011d2c0 	call	2011d2c <__adddf3>
 2007f8c:	1009883a 	mov	r4,r2
 2007f90:	180b883a 	mov	r5,r3
 2007f94:	e13fe515 	stw	r4,-108(fp)
 2007f98:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
 2007f9c:	e13fe517 	ldw	r4,-108(fp)
 2007fa0:	e17fe617 	ldw	r5,-104(fp)
 2007fa4:	2012f5c0 	call	2012f5c <__fixdfsi>
 2007fa8:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
 2007fac:	000d883a 	mov	r6,zero
 2007fb0:	000f883a 	mov	r7,zero
 2007fb4:	e13fe517 	ldw	r4,-108(fp)
 2007fb8:	e17fe617 	ldw	r5,-104(fp)
 2007fbc:	2003de80 	call	2003de8 <__ledf2>
 2007fc0:	10000d0e 	bge	r2,zero,2007ff8 <_dtoa_r+0x428>
 2007fc4:	e13fd717 	ldw	r4,-164(fp)
 2007fc8:	2012fdc0 	call	2012fdc <__floatsidf>
 2007fcc:	1011883a 	mov	r8,r2
 2007fd0:	1813883a 	mov	r9,r3
 2007fd4:	e1bfe517 	ldw	r6,-108(fp)
 2007fd8:	e1ffe617 	ldw	r7,-104(fp)
 2007fdc:	4009883a 	mov	r4,r8
 2007fe0:	480b883a 	mov	r5,r9
 2007fe4:	20125d80 	call	20125d8 <__eqdf2>
 2007fe8:	10000326 	beq	r2,zero,2007ff8 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 2007fec:	e0bfd717 	ldw	r2,-164(fp)
 2007ff0:	10bfffc4 	addi	r2,r2,-1
 2007ff4:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
 2007ff8:	00800044 	movi	r2,1
 2007ffc:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
 2008000:	e0bfd717 	ldw	r2,-164(fp)
 2008004:	10001616 	blt	r2,zero,2008060 <_dtoa_r+0x490>
 2008008:	e0bfd717 	ldw	r2,-164(fp)
 200800c:	108005c8 	cmpgei	r2,r2,23
 2008010:	1000131e 	bne	r2,zero,2008060 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
 2008014:	e0bff217 	ldw	r2,-56(fp)
 2008018:	e0fff317 	ldw	r3,-52(fp)
 200801c:	010080b4 	movhi	r4,514
 2008020:	213aaa04 	addi	r4,r4,-5464
 2008024:	e17fd717 	ldw	r5,-164(fp)
 2008028:	280a90fa 	slli	r5,r5,3
 200802c:	214d883a 	add	r6,r4,r5
 2008030:	31000017 	ldw	r4,0(r6)
 2008034:	31400117 	ldw	r5,4(r6)
 2008038:	200d883a 	mov	r6,r4
 200803c:	280f883a 	mov	r7,r5
 2008040:	1009883a 	mov	r4,r2
 2008044:	180b883a 	mov	r5,r3
 2008048:	2003de80 	call	2003de8 <__ledf2>
 200804c:	1000030e 	bge	r2,zero,200805c <_dtoa_r+0x48c>
	k--;
 2008050:	e0bfd717 	ldw	r2,-164(fp)
 2008054:	10bfffc4 	addi	r2,r2,-1
 2008058:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
 200805c:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
 2008060:	e0fff017 	ldw	r3,-64(fp)
 2008064:	e0bfd217 	ldw	r2,-184(fp)
 2008068:	1885c83a 	sub	r2,r3,r2
 200806c:	10bfffc4 	addi	r2,r2,-1
 2008070:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
 2008074:	e0bfd617 	ldw	r2,-168(fp)
 2008078:	10000416 	blt	r2,zero,200808c <_dtoa_r+0x4bc>
    {
      b2 = 0;
 200807c:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
 2008080:	e0bfd617 	ldw	r2,-168(fp)
 2008084:	e0bfdc15 	stw	r2,-144(fp)
 2008088:	00000406 	br	200809c <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
 200808c:	e0bfd617 	ldw	r2,-168(fp)
 2008090:	0085c83a 	sub	r2,zero,r2
 2008094:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
 2008098:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
 200809c:	e0bfd717 	ldw	r2,-164(fp)
 20080a0:	10000816 	blt	r2,zero,20080c4 <_dtoa_r+0x4f4>
    {
      b5 = 0;
 20080a4:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
 20080a8:	e0bfd717 	ldw	r2,-164(fp)
 20080ac:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
 20080b0:	e0ffdc17 	ldw	r3,-144(fp)
 20080b4:	e0bfd717 	ldw	r2,-164(fp)
 20080b8:	1885883a 	add	r2,r3,r2
 20080bc:	e0bfdc15 	stw	r2,-144(fp)
 20080c0:	00000806 	br	20080e4 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
 20080c4:	e0ffcf17 	ldw	r3,-196(fp)
 20080c8:	e0bfd717 	ldw	r2,-164(fp)
 20080cc:	1885c83a 	sub	r2,r3,r2
 20080d0:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
 20080d4:	e0bfd717 	ldw	r2,-164(fp)
 20080d8:	0085c83a 	sub	r2,zero,r2
 20080dc:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
 20080e0:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
 20080e4:	e0bffb17 	ldw	r2,-20(fp)
 20080e8:	10000316 	blt	r2,zero,20080f8 <_dtoa_r+0x528>
 20080ec:	e0bffb17 	ldw	r2,-20(fp)
 20080f0:	10800290 	cmplti	r2,r2,10
 20080f4:	1000011e 	bne	r2,zero,20080fc <_dtoa_r+0x52c>
    mode = 0;
 20080f8:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
 20080fc:	00800044 	movi	r2,1
 2008100:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
 2008104:	e0bffb17 	ldw	r2,-20(fp)
 2008108:	10800190 	cmplti	r2,r2,6
 200810c:	1000041e 	bne	r2,zero,2008120 <_dtoa_r+0x550>
    {
      mode -= 4;
 2008110:	e0bffb17 	ldw	r2,-20(fp)
 2008114:	10bfff04 	addi	r2,r2,-4
 2008118:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
 200811c:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
 2008120:	00800044 	movi	r2,1
 2008124:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
 2008128:	00bfffc4 	movi	r2,-1
 200812c:	e0bfd515 	stw	r2,-172(fp)
 2008130:	e0bfd517 	ldw	r2,-172(fp)
 2008134:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
 2008138:	e0bffb17 	ldw	r2,-20(fp)
 200813c:	108001a8 	cmpgeui	r2,r2,6
 2008140:	10002c1e 	bne	r2,zero,20081f4 <_dtoa_r+0x624>
 2008144:	e0bffb17 	ldw	r2,-20(fp)
 2008148:	100690ba 	slli	r3,r2,2
 200814c:	00808074 	movhi	r2,513
 2008150:	10a05804 	addi	r2,r2,-32416
 2008154:	1885883a 	add	r2,r3,r2
 2008158:	10800017 	ldw	r2,0(r2)
 200815c:	1000683a 	jmp	r2
 2008160:	02008178 	rdprs	r8,zero,517
 2008164:	02008178 	rdprs	r8,zero,517
 2008168:	02008188 	cmpgei	r8,zero,518
 200816c:	020081b8 	rdprs	r8,zero,518
 2008170:	0200818c 	andi	r8,zero,518
 2008174:	020081bc 	xorhi	r8,zero,518
    {
    case 0:
    case 1:
      i = 18;
 2008178:	00800484 	movi	r2,18
 200817c:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
 2008180:	e0000215 	stw	zero,8(fp)
      break;
 2008184:	00001b06 	br	20081f4 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 2008188:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 200818c:	e0800217 	ldw	r2,8(fp)
 2008190:	00800216 	blt	zero,r2,200819c <_dtoa_r+0x5cc>
	ndigits = 1;
 2008194:	00800044 	movi	r2,1
 2008198:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 200819c:	e0800217 	ldw	r2,8(fp)
 20081a0:	e0bfd215 	stw	r2,-184(fp)
 20081a4:	e0bfd217 	ldw	r2,-184(fp)
 20081a8:	e0bfd515 	stw	r2,-172(fp)
 20081ac:	e0bfd517 	ldw	r2,-172(fp)
 20081b0:	e0bfd415 	stw	r2,-176(fp)
      break;
 20081b4:	00000f06 	br	20081f4 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 20081b8:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 20081bc:	e0c00217 	ldw	r3,8(fp)
 20081c0:	e0bfd717 	ldw	r2,-164(fp)
 20081c4:	1885883a 	add	r2,r3,r2
 20081c8:	10800044 	addi	r2,r2,1
 20081cc:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
 20081d0:	e0bfd217 	ldw	r2,-184(fp)
 20081d4:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
 20081d8:	e0bfd217 	ldw	r2,-184(fp)
 20081dc:	10bfffc4 	addi	r2,r2,-1
 20081e0:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
 20081e4:	e0bfd217 	ldw	r2,-184(fp)
 20081e8:	00800216 	blt	zero,r2,20081f4 <_dtoa_r+0x624>
	i = 1;
 20081ec:	00800044 	movi	r2,1
 20081f0:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
 20081f4:	00800104 	movi	r2,4
 20081f8:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 20081fc:	e0bff817 	ldw	r2,-32(fp)
 2008200:	10001115 	stw	zero,68(r2)
 2008204:	00000806 	br	2008228 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 2008208:	e0bff817 	ldw	r2,-32(fp)
 200820c:	10801117 	ldw	r2,68(r2)
 2008210:	10c00044 	addi	r3,r2,1
 2008214:	e0bff817 	ldw	r2,-32(fp)
 2008218:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
 200821c:	e0bfd617 	ldw	r2,-168(fp)
 2008220:	1085883a 	add	r2,r2,r2
 2008224:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 2008228:	e0bfd617 	ldw	r2,-168(fp)
 200822c:	10800504 	addi	r2,r2,20
 2008230:	e0ffd217 	ldw	r3,-184(fp)
 2008234:	18bff42e 	bgeu	r3,r2,2008208 <_dtoa_r+0x638>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
 2008238:	e0bff817 	ldw	r2,-32(fp)
 200823c:	10801117 	ldw	r2,68(r2)
 2008240:	100b883a 	mov	r5,r2
 2008244:	e13ff817 	ldw	r4,-32(fp)
 2008248:	200c66c0 	call	200c66c <_Balloc>
 200824c:	1007883a 	mov	r3,r2
 2008250:	e0bff817 	ldw	r2,-32(fp)
 2008254:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 2008258:	e0bff817 	ldw	r2,-32(fp)
 200825c:	10801017 	ldw	r2,64(r2)
 2008260:	e0bfe915 	stw	r2,-92(fp)
 2008264:	e0bfe917 	ldw	r2,-92(fp)
 2008268:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 200826c:	e0bfd417 	ldw	r2,-176(fp)
 2008270:	10021616 	blt	r2,zero,2008acc <_dtoa_r+0xefc>
 2008274:	e0bfd417 	ldw	r2,-176(fp)
 2008278:	108003c8 	cmpgei	r2,r2,15
 200827c:	1002131e 	bne	r2,zero,2008acc <_dtoa_r+0xefc>
 2008280:	e0bfdf17 	ldw	r2,-132(fp)
 2008284:	10021126 	beq	r2,zero,2008acc <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 2008288:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
 200828c:	e0bff217 	ldw	r2,-56(fp)
 2008290:	e0fff317 	ldw	r3,-52(fp)
 2008294:	e0bff415 	stw	r2,-48(fp)
 2008298:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
 200829c:	e0bfd717 	ldw	r2,-164(fp)
 20082a0:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
 20082a4:	e0bfd417 	ldw	r2,-176(fp)
 20082a8:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
 20082ac:	00800084 	movi	r2,2
 20082b0:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
 20082b4:	e0bfd717 	ldw	r2,-164(fp)
 20082b8:	0080540e 	bge	zero,r2,200840c <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
 20082bc:	e0bfd717 	ldw	r2,-164(fp)
 20082c0:	10c003cc 	andi	r3,r2,15
 20082c4:	008080b4 	movhi	r2,514
 20082c8:	10baaa04 	addi	r2,r2,-5464
 20082cc:	180690fa 	slli	r3,r3,3
 20082d0:	10c5883a 	add	r2,r2,r3
 20082d4:	10c00017 	ldw	r3,0(r2)
 20082d8:	e0ffe515 	stw	r3,-108(fp)
 20082dc:	10800117 	ldw	r2,4(r2)
 20082e0:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
 20082e4:	e0bfd717 	ldw	r2,-164(fp)
 20082e8:	1005d13a 	srai	r2,r2,4
 20082ec:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
 20082f0:	e0bfd617 	ldw	r2,-168(fp)
 20082f4:	1080040c 	andi	r2,r2,16
 20082f8:	10003426 	beq	r2,zero,20083cc <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 20082fc:	e0bfd617 	ldw	r2,-168(fp)
 2008300:	108003cc 	andi	r2,r2,15
 2008304:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
 2008308:	e0bff217 	ldw	r2,-56(fp)
 200830c:	e0fff317 	ldw	r3,-52(fp)
 2008310:	018080b4 	movhi	r6,514
 2008314:	31badc04 	addi	r6,r6,-5264
 2008318:	31000817 	ldw	r4,32(r6)
 200831c:	31400917 	ldw	r5,36(r6)
 2008320:	200d883a 	mov	r6,r4
 2008324:	280f883a 	mov	r7,r5
 2008328:	1009883a 	mov	r4,r2
 200832c:	180b883a 	mov	r5,r3
 2008330:	20034240 	call	2003424 <__divdf3>
 2008334:	1009883a 	mov	r4,r2
 2008338:	180b883a 	mov	r5,r3
 200833c:	2005883a 	mov	r2,r4
 2008340:	2807883a 	mov	r3,r5
 2008344:	e0bff215 	stw	r2,-56(fp)
 2008348:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
 200834c:	e0bfd317 	ldw	r2,-180(fp)
 2008350:	10800044 	addi	r2,r2,1
 2008354:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
 2008358:	00001c06 	br	20083cc <_dtoa_r+0x7fc>
	    if (j & 1)
 200835c:	e0bfd617 	ldw	r2,-168(fp)
 2008360:	1080004c 	andi	r2,r2,1
 2008364:	10001326 	beq	r2,zero,20083b4 <_dtoa_r+0x7e4>
	      {
		ieps++;
 2008368:	e0bfd317 	ldw	r2,-180(fp)
 200836c:	10800044 	addi	r2,r2,1
 2008370:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
 2008374:	008080b4 	movhi	r2,514
 2008378:	10badc04 	addi	r2,r2,-5264
 200837c:	e0ffd217 	ldw	r3,-184(fp)
 2008380:	180690fa 	slli	r3,r3,3
 2008384:	10c9883a 	add	r4,r2,r3
 2008388:	20800017 	ldw	r2,0(r4)
 200838c:	20c00117 	ldw	r3,4(r4)
 2008390:	100d883a 	mov	r6,r2
 2008394:	180f883a 	mov	r7,r3
 2008398:	e13fe517 	ldw	r4,-108(fp)
 200839c:	e17fe617 	ldw	r5,-104(fp)
 20083a0:	2003edc0 	call	2003edc <__muldf3>
 20083a4:	1009883a 	mov	r4,r2
 20083a8:	180b883a 	mov	r5,r3
 20083ac:	e13fe515 	stw	r4,-108(fp)
 20083b0:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
 20083b4:	e0bfd617 	ldw	r2,-168(fp)
 20083b8:	1005d07a 	srai	r2,r2,1
 20083bc:	e0bfd615 	stw	r2,-168(fp)
 20083c0:	e0bfd217 	ldw	r2,-184(fp)
 20083c4:	10800044 	addi	r2,r2,1
 20083c8:	e0bfd215 	stw	r2,-184(fp)
 20083cc:	e0bfd617 	ldw	r2,-168(fp)
 20083d0:	103fe21e 	bne	r2,zero,200835c <_dtoa_r+0x78c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
 20083d4:	e0bff217 	ldw	r2,-56(fp)
 20083d8:	e0fff317 	ldw	r3,-52(fp)
 20083dc:	e1bfe517 	ldw	r6,-108(fp)
 20083e0:	e1ffe617 	ldw	r7,-104(fp)
 20083e4:	1009883a 	mov	r4,r2
 20083e8:	180b883a 	mov	r5,r3
 20083ec:	20034240 	call	2003424 <__divdf3>
 20083f0:	1009883a 	mov	r4,r2
 20083f4:	180b883a 	mov	r5,r3
 20083f8:	2005883a 	mov	r2,r4
 20083fc:	2807883a 	mov	r3,r5
 2008400:	e0bff215 	stw	r2,-56(fp)
 2008404:	e0fff315 	stw	r3,-52(fp)
 2008408:	00004006 	br	200850c <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
 200840c:	e0bfd717 	ldw	r2,-164(fp)
 2008410:	0085c83a 	sub	r2,zero,r2
 2008414:	e0bfec15 	stw	r2,-80(fp)
 2008418:	e0bfec17 	ldw	r2,-80(fp)
 200841c:	10003b26 	beq	r2,zero,200850c <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
 2008420:	e0bff217 	ldw	r2,-56(fp)
 2008424:	e0fff317 	ldw	r3,-52(fp)
 2008428:	e13fec17 	ldw	r4,-80(fp)
 200842c:	214003cc 	andi	r5,r4,15
 2008430:	010080b4 	movhi	r4,514
 2008434:	213aaa04 	addi	r4,r4,-5464
 2008438:	280a90fa 	slli	r5,r5,3
 200843c:	214d883a 	add	r6,r4,r5
 2008440:	31000017 	ldw	r4,0(r6)
 2008444:	31400117 	ldw	r5,4(r6)
 2008448:	200d883a 	mov	r6,r4
 200844c:	280f883a 	mov	r7,r5
 2008450:	1009883a 	mov	r4,r2
 2008454:	180b883a 	mov	r5,r3
 2008458:	2003edc0 	call	2003edc <__muldf3>
 200845c:	1009883a 	mov	r4,r2
 2008460:	180b883a 	mov	r5,r3
 2008464:	2005883a 	mov	r2,r4
 2008468:	2807883a 	mov	r3,r5
 200846c:	e0bff215 	stw	r2,-56(fp)
 2008470:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 2008474:	e0bfec17 	ldw	r2,-80(fp)
 2008478:	1005d13a 	srai	r2,r2,4
 200847c:	e0bfd615 	stw	r2,-168(fp)
 2008480:	00002006 	br	2008504 <_dtoa_r+0x934>
	    if (j & 1)
 2008484:	e0bfd617 	ldw	r2,-168(fp)
 2008488:	1080004c 	andi	r2,r2,1
 200848c:	10001726 	beq	r2,zero,20084ec <_dtoa_r+0x91c>
	      {
		ieps++;
 2008490:	e0bfd317 	ldw	r2,-180(fp)
 2008494:	10800044 	addi	r2,r2,1
 2008498:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
 200849c:	e0bff217 	ldw	r2,-56(fp)
 20084a0:	e0fff317 	ldw	r3,-52(fp)
 20084a4:	010080b4 	movhi	r4,514
 20084a8:	213adc04 	addi	r4,r4,-5264
 20084ac:	e17fd217 	ldw	r5,-184(fp)
 20084b0:	280a90fa 	slli	r5,r5,3
 20084b4:	214d883a 	add	r6,r4,r5
 20084b8:	31000017 	ldw	r4,0(r6)
 20084bc:	31400117 	ldw	r5,4(r6)
 20084c0:	200d883a 	mov	r6,r4
 20084c4:	280f883a 	mov	r7,r5
 20084c8:	1009883a 	mov	r4,r2
 20084cc:	180b883a 	mov	r5,r3
 20084d0:	2003edc0 	call	2003edc <__muldf3>
 20084d4:	1009883a 	mov	r4,r2
 20084d8:	180b883a 	mov	r5,r3
 20084dc:	2005883a 	mov	r2,r4
 20084e0:	2807883a 	mov	r3,r5
 20084e4:	e0bff215 	stw	r2,-56(fp)
 20084e8:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
 20084ec:	e0bfd617 	ldw	r2,-168(fp)
 20084f0:	1005d07a 	srai	r2,r2,1
 20084f4:	e0bfd615 	stw	r2,-168(fp)
 20084f8:	e0bfd217 	ldw	r2,-184(fp)
 20084fc:	10800044 	addi	r2,r2,1
 2008500:	e0bfd215 	stw	r2,-184(fp)
 2008504:	e0bfd617 	ldw	r2,-168(fp)
 2008508:	103fde1e 	bne	r2,zero,2008484 <_dtoa_r+0x8b4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 200850c:	e0bfd817 	ldw	r2,-160(fp)
 2008510:	10002126 	beq	r2,zero,2008598 <_dtoa_r+0x9c8>
 2008514:	e0bff217 	ldw	r2,-56(fp)
 2008518:	e0fff317 	ldw	r3,-52(fp)
 200851c:	000d883a 	mov	r6,zero
 2008520:	01cffc34 	movhi	r7,16368
 2008524:	1009883a 	mov	r4,r2
 2008528:	180b883a 	mov	r5,r3
 200852c:	2003de80 	call	2003de8 <__ledf2>
 2008530:	1000190e 	bge	r2,zero,2008598 <_dtoa_r+0x9c8>
 2008534:	e0bfd417 	ldw	r2,-176(fp)
 2008538:	0080170e 	bge	zero,r2,2008598 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
 200853c:	e0bfd517 	ldw	r2,-172(fp)
 2008540:	0081550e 	bge	zero,r2,2008a98 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
 2008544:	e0bfd517 	ldw	r2,-172(fp)
 2008548:	e0bfd415 	stw	r2,-176(fp)
	  k--;
 200854c:	e0bfd717 	ldw	r2,-164(fp)
 2008550:	10bfffc4 	addi	r2,r2,-1
 2008554:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
 2008558:	e0bff217 	ldw	r2,-56(fp)
 200855c:	e0fff317 	ldw	r3,-52(fp)
 2008560:	000d883a 	mov	r6,zero
 2008564:	01d00934 	movhi	r7,16420
 2008568:	1009883a 	mov	r4,r2
 200856c:	180b883a 	mov	r5,r3
 2008570:	2003edc0 	call	2003edc <__muldf3>
 2008574:	1009883a 	mov	r4,r2
 2008578:	180b883a 	mov	r5,r3
 200857c:	2005883a 	mov	r2,r4
 2008580:	2807883a 	mov	r3,r5
 2008584:	e0bff215 	stw	r2,-56(fp)
 2008588:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
 200858c:	e0bfd317 	ldw	r2,-180(fp)
 2008590:	10800044 	addi	r2,r2,1
 2008594:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
 2008598:	e13fd317 	ldw	r4,-180(fp)
 200859c:	2012fdc0 	call	2012fdc <__floatsidf>
 20085a0:	1011883a 	mov	r8,r2
 20085a4:	1813883a 	mov	r9,r3
 20085a8:	e0bff217 	ldw	r2,-56(fp)
 20085ac:	e0fff317 	ldw	r3,-52(fp)
 20085b0:	100d883a 	mov	r6,r2
 20085b4:	180f883a 	mov	r7,r3
 20085b8:	4009883a 	mov	r4,r8
 20085bc:	480b883a 	mov	r5,r9
 20085c0:	2003edc0 	call	2003edc <__muldf3>
 20085c4:	1009883a 	mov	r4,r2
 20085c8:	180b883a 	mov	r5,r3
 20085cc:	2005883a 	mov	r2,r4
 20085d0:	2807883a 	mov	r3,r5
 20085d4:	000d883a 	mov	r6,zero
 20085d8:	01d00734 	movhi	r7,16412
 20085dc:	1009883a 	mov	r4,r2
 20085e0:	180b883a 	mov	r5,r3
 20085e4:	2011d2c0 	call	2011d2c <__adddf3>
 20085e8:	1009883a 	mov	r4,r2
 20085ec:	180b883a 	mov	r5,r3
 20085f0:	2005883a 	mov	r2,r4
 20085f4:	2807883a 	mov	r3,r5
 20085f8:	e0bff615 	stw	r2,-40(fp)
 20085fc:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 2008600:	e0fff717 	ldw	r3,-36(fp)
 2008604:	00bf3034 	movhi	r2,64704
 2008608:	1885883a 	add	r2,r3,r2
 200860c:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
 2008610:	e0bfd417 	ldw	r2,-176(fp)
 2008614:	1000271e 	bne	r2,zero,20086b4 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
 2008618:	e03fe315 	stw	zero,-116(fp)
 200861c:	e0bfe317 	ldw	r2,-116(fp)
 2008620:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
 2008624:	e0bff217 	ldw	r2,-56(fp)
 2008628:	e0fff317 	ldw	r3,-52(fp)
 200862c:	000d883a 	mov	r6,zero
 2008630:	01d00534 	movhi	r7,16404
 2008634:	1009883a 	mov	r4,r2
 2008638:	180b883a 	mov	r5,r3
 200863c:	20126600 	call	2012660 <__subdf3>
 2008640:	1009883a 	mov	r4,r2
 2008644:	180b883a 	mov	r5,r3
 2008648:	2005883a 	mov	r2,r4
 200864c:	2807883a 	mov	r3,r5
 2008650:	e0bff215 	stw	r2,-56(fp)
 2008654:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
 2008658:	e0bff217 	ldw	r2,-56(fp)
 200865c:	e0fff317 	ldw	r3,-52(fp)
 2008660:	e13ff617 	ldw	r4,-40(fp)
 2008664:	e17ff717 	ldw	r5,-36(fp)
 2008668:	200d883a 	mov	r6,r4
 200866c:	280f883a 	mov	r7,r5
 2008670:	1009883a 	mov	r4,r2
 2008674:	180b883a 	mov	r5,r3
 2008678:	2003d0c0 	call	2003d0c <__gedf2>
 200867c:	0082eb16 	blt	zero,r2,200922c <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
 2008680:	e23ff217 	ldw	r8,-56(fp)
 2008684:	e27ff317 	ldw	r9,-52(fp)
 2008688:	e0bff617 	ldw	r2,-40(fp)
 200868c:	e0fff717 	ldw	r3,-36(fp)
 2008690:	1021883a 	mov	r16,r2
 2008694:	1c60003c 	xorhi	r17,r3,32768
 2008698:	800d883a 	mov	r6,r16
 200869c:	880f883a 	mov	r7,r17
 20086a0:	4009883a 	mov	r4,r8
 20086a4:	480b883a 	mov	r5,r9
 20086a8:	2003de80 	call	2003de8 <__ledf2>
 20086ac:	1002da16 	blt	r2,zero,2009218 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
 20086b0:	0000fc06 	br	2008aa4 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
 20086b4:	e0bfd917 	ldw	r2,-156(fp)
 20086b8:	10007a26 	beq	r2,zero,20088a4 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 20086bc:	e0bfd417 	ldw	r2,-176(fp)
 20086c0:	10ffffc4 	addi	r3,r2,-1
 20086c4:	008080b4 	movhi	r2,514
 20086c8:	10baaa04 	addi	r2,r2,-5464
 20086cc:	180690fa 	slli	r3,r3,3
 20086d0:	10c9883a 	add	r4,r2,r3
 20086d4:	20800017 	ldw	r2,0(r4)
 20086d8:	20c00117 	ldw	r3,4(r4)
 20086dc:	100d883a 	mov	r6,r2
 20086e0:	180f883a 	mov	r7,r3
 20086e4:	0009883a 	mov	r4,zero
 20086e8:	014ff834 	movhi	r5,16352
 20086ec:	20034240 	call	2003424 <__divdf3>
 20086f0:	1009883a 	mov	r4,r2
 20086f4:	180b883a 	mov	r5,r3
 20086f8:	2011883a 	mov	r8,r4
 20086fc:	2813883a 	mov	r9,r5
 2008700:	e0bff617 	ldw	r2,-40(fp)
 2008704:	e0fff717 	ldw	r3,-36(fp)
 2008708:	100d883a 	mov	r6,r2
 200870c:	180f883a 	mov	r7,r3
 2008710:	4009883a 	mov	r4,r8
 2008714:	480b883a 	mov	r5,r9
 2008718:	20126600 	call	2012660 <__subdf3>
 200871c:	1009883a 	mov	r4,r2
 2008720:	180b883a 	mov	r5,r3
 2008724:	2005883a 	mov	r2,r4
 2008728:	2807883a 	mov	r3,r5
 200872c:	e0bff615 	stw	r2,-40(fp)
 2008730:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
 2008734:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
 2008738:	e0bff217 	ldw	r2,-56(fp)
 200873c:	e0fff317 	ldw	r3,-52(fp)
 2008740:	1009883a 	mov	r4,r2
 2008744:	180b883a 	mov	r5,r3
 2008748:	2012f5c0 	call	2012f5c <__fixdfsi>
 200874c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 2008750:	e43ff217 	ldw	r16,-56(fp)
 2008754:	e47ff317 	ldw	r17,-52(fp)
 2008758:	e13fed17 	ldw	r4,-76(fp)
 200875c:	2012fdc0 	call	2012fdc <__floatsidf>
 2008760:	1009883a 	mov	r4,r2
 2008764:	180b883a 	mov	r5,r3
 2008768:	200d883a 	mov	r6,r4
 200876c:	280f883a 	mov	r7,r5
 2008770:	8009883a 	mov	r4,r16
 2008774:	880b883a 	mov	r5,r17
 2008778:	20126600 	call	2012660 <__subdf3>
 200877c:	1009883a 	mov	r4,r2
 2008780:	180b883a 	mov	r5,r3
 2008784:	2005883a 	mov	r2,r4
 2008788:	2807883a 	mov	r3,r5
 200878c:	e0bff215 	stw	r2,-56(fp)
 2008790:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 2008794:	e0bfe717 	ldw	r2,-100(fp)
 2008798:	10c00044 	addi	r3,r2,1
 200879c:	e0ffe715 	stw	r3,-100(fp)
 20087a0:	e0ffed17 	ldw	r3,-76(fp)
 20087a4:	18c00c04 	addi	r3,r3,48
 20087a8:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 20087ac:	e0bff217 	ldw	r2,-56(fp)
 20087b0:	e0fff317 	ldw	r3,-52(fp)
 20087b4:	e13ff617 	ldw	r4,-40(fp)
 20087b8:	e17ff717 	ldw	r5,-36(fp)
 20087bc:	200d883a 	mov	r6,r4
 20087c0:	280f883a 	mov	r7,r5
 20087c4:	1009883a 	mov	r4,r2
 20087c8:	180b883a 	mov	r5,r3
 20087cc:	2003de80 	call	2003de8 <__ledf2>
 20087d0:	1003c416 	blt	r2,zero,20096e4 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
 20087d4:	e0bff217 	ldw	r2,-56(fp)
 20087d8:	e0fff317 	ldw	r3,-52(fp)
 20087dc:	100d883a 	mov	r6,r2
 20087e0:	180f883a 	mov	r7,r3
 20087e4:	0009883a 	mov	r4,zero
 20087e8:	014ffc34 	movhi	r5,16368
 20087ec:	20126600 	call	2012660 <__subdf3>
 20087f0:	1009883a 	mov	r4,r2
 20087f4:	180b883a 	mov	r5,r3
 20087f8:	2011883a 	mov	r8,r4
 20087fc:	2813883a 	mov	r9,r5
 2008800:	e0bff617 	ldw	r2,-40(fp)
 2008804:	e0fff717 	ldw	r3,-36(fp)
 2008808:	100d883a 	mov	r6,r2
 200880c:	180f883a 	mov	r7,r3
 2008810:	4009883a 	mov	r4,r8
 2008814:	480b883a 	mov	r5,r9
 2008818:	2003de80 	call	2003de8 <__ledf2>
 200881c:	10012916 	blt	r2,zero,2008cc4 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
 2008820:	e0bfd217 	ldw	r2,-184(fp)
 2008824:	10800044 	addi	r2,r2,1
 2008828:	e0bfd215 	stw	r2,-184(fp)
 200882c:	e0ffd217 	ldw	r3,-184(fp)
 2008830:	e0bfd417 	ldw	r2,-176(fp)
 2008834:	18809a0e 	bge	r3,r2,2008aa0 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
 2008838:	e0bff617 	ldw	r2,-40(fp)
 200883c:	e0fff717 	ldw	r3,-36(fp)
 2008840:	000d883a 	mov	r6,zero
 2008844:	01d00934 	movhi	r7,16420
 2008848:	1009883a 	mov	r4,r2
 200884c:	180b883a 	mov	r5,r3
 2008850:	2003edc0 	call	2003edc <__muldf3>
 2008854:	1009883a 	mov	r4,r2
 2008858:	180b883a 	mov	r5,r3
 200885c:	2005883a 	mov	r2,r4
 2008860:	2807883a 	mov	r3,r5
 2008864:	e0bff615 	stw	r2,-40(fp)
 2008868:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
 200886c:	e0bff217 	ldw	r2,-56(fp)
 2008870:	e0fff317 	ldw	r3,-52(fp)
 2008874:	000d883a 	mov	r6,zero
 2008878:	01d00934 	movhi	r7,16420
 200887c:	1009883a 	mov	r4,r2
 2008880:	180b883a 	mov	r5,r3
 2008884:	2003edc0 	call	2003edc <__muldf3>
 2008888:	1009883a 	mov	r4,r2
 200888c:	180b883a 	mov	r5,r3
 2008890:	2005883a 	mov	r2,r4
 2008894:	2807883a 	mov	r3,r5
 2008898:	e0bff215 	stw	r2,-56(fp)
 200889c:	e0fff315 	stw	r3,-52(fp)
	    }
 20088a0:	003fa506 	br	2008738 <_dtoa_r+0xb68>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 20088a4:	e0bff617 	ldw	r2,-40(fp)
 20088a8:	e0fff717 	ldw	r3,-36(fp)
 20088ac:	e13fd417 	ldw	r4,-176(fp)
 20088b0:	217fffc4 	addi	r5,r4,-1
 20088b4:	010080b4 	movhi	r4,514
 20088b8:	213aaa04 	addi	r4,r4,-5464
 20088bc:	280a90fa 	slli	r5,r5,3
 20088c0:	214d883a 	add	r6,r4,r5
 20088c4:	31000017 	ldw	r4,0(r6)
 20088c8:	31400117 	ldw	r5,4(r6)
 20088cc:	200d883a 	mov	r6,r4
 20088d0:	280f883a 	mov	r7,r5
 20088d4:	1009883a 	mov	r4,r2
 20088d8:	180b883a 	mov	r5,r3
 20088dc:	2003edc0 	call	2003edc <__muldf3>
 20088e0:	1009883a 	mov	r4,r2
 20088e4:	180b883a 	mov	r5,r3
 20088e8:	2005883a 	mov	r2,r4
 20088ec:	2807883a 	mov	r3,r5
 20088f0:	e0bff615 	stw	r2,-40(fp)
 20088f4:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
 20088f8:	00800044 	movi	r2,1
 20088fc:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
 2008900:	e0bff217 	ldw	r2,-56(fp)
 2008904:	e0fff317 	ldw	r3,-52(fp)
 2008908:	1009883a 	mov	r4,r2
 200890c:	180b883a 	mov	r5,r3
 2008910:	2012f5c0 	call	2012f5c <__fixdfsi>
 2008914:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
 2008918:	e43ff217 	ldw	r16,-56(fp)
 200891c:	e47ff317 	ldw	r17,-52(fp)
 2008920:	e13fed17 	ldw	r4,-76(fp)
 2008924:	2012fdc0 	call	2012fdc <__floatsidf>
 2008928:	1009883a 	mov	r4,r2
 200892c:	180b883a 	mov	r5,r3
 2008930:	200d883a 	mov	r6,r4
 2008934:	280f883a 	mov	r7,r5
 2008938:	8009883a 	mov	r4,r16
 200893c:	880b883a 	mov	r5,r17
 2008940:	20126600 	call	2012660 <__subdf3>
 2008944:	1009883a 	mov	r4,r2
 2008948:	180b883a 	mov	r5,r3
 200894c:	2005883a 	mov	r2,r4
 2008950:	2807883a 	mov	r3,r5
 2008954:	e0bff215 	stw	r2,-56(fp)
 2008958:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
 200895c:	e0bfe717 	ldw	r2,-100(fp)
 2008960:	10c00044 	addi	r3,r2,1
 2008964:	e0ffe715 	stw	r3,-100(fp)
 2008968:	e0ffed17 	ldw	r3,-76(fp)
 200896c:	18c00c04 	addi	r3,r3,48
 2008970:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 2008974:	e0ffd217 	ldw	r3,-184(fp)
 2008978:	e0bfd417 	ldw	r2,-176(fp)
 200897c:	1880351e 	bne	r3,r2,2008a54 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
 2008980:	e43ff217 	ldw	r16,-56(fp)
 2008984:	e47ff317 	ldw	r17,-52(fp)
 2008988:	e0bff617 	ldw	r2,-40(fp)
 200898c:	e0fff717 	ldw	r3,-36(fp)
 2008990:	000d883a 	mov	r6,zero
 2008994:	01cff834 	movhi	r7,16352
 2008998:	1009883a 	mov	r4,r2
 200899c:	180b883a 	mov	r5,r3
 20089a0:	2011d2c0 	call	2011d2c <__adddf3>
 20089a4:	1009883a 	mov	r4,r2
 20089a8:	180b883a 	mov	r5,r3
 20089ac:	2005883a 	mov	r2,r4
 20089b0:	2807883a 	mov	r3,r5
 20089b4:	100d883a 	mov	r6,r2
 20089b8:	180f883a 	mov	r7,r3
 20089bc:	8009883a 	mov	r4,r16
 20089c0:	880b883a 	mov	r5,r17
 20089c4:	2003d0c0 	call	2003d0c <__gedf2>
 20089c8:	0080c016 	blt	zero,r2,2008ccc <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 20089cc:	e43ff217 	ldw	r16,-56(fp)
 20089d0:	e47ff317 	ldw	r17,-52(fp)
 20089d4:	e0bff617 	ldw	r2,-40(fp)
 20089d8:	e0fff717 	ldw	r3,-36(fp)
 20089dc:	100d883a 	mov	r6,r2
 20089e0:	180f883a 	mov	r7,r3
 20089e4:	0009883a 	mov	r4,zero
 20089e8:	014ff834 	movhi	r5,16352
 20089ec:	20126600 	call	2012660 <__subdf3>
 20089f0:	1009883a 	mov	r4,r2
 20089f4:	180b883a 	mov	r5,r3
 20089f8:	2005883a 	mov	r2,r4
 20089fc:	2807883a 	mov	r3,r5
 2008a00:	100d883a 	mov	r6,r2
 2008a04:	180f883a 	mov	r7,r3
 2008a08:	8009883a 	mov	r4,r16
 2008a0c:	880b883a 	mov	r5,r17
 2008a10:	2003de80 	call	2003de8 <__ledf2>
 2008a14:	10000116 	blt	r2,zero,2008a1c <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 2008a18:	00002206 	br	2008aa4 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
 2008a1c:	e0bfe717 	ldw	r2,-100(fp)
 2008a20:	10bfffc4 	addi	r2,r2,-1
 2008a24:	e0bfe715 	stw	r2,-100(fp)
 2008a28:	e0bfe717 	ldw	r2,-100(fp)
 2008a2c:	10800003 	ldbu	r2,0(r2)
 2008a30:	10803fcc 	andi	r2,r2,255
 2008a34:	1080201c 	xori	r2,r2,128
 2008a38:	10bfe004 	addi	r2,r2,-128
 2008a3c:	10800c20 	cmpeqi	r2,r2,48
 2008a40:	103ff61e 	bne	r2,zero,2008a1c <_dtoa_r+0xe4c>
		      s++;
 2008a44:	e0bfe717 	ldw	r2,-100(fp)
 2008a48:	10800044 	addi	r2,r2,1
 2008a4c:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
 2008a50:	00032506 	br	20096e8 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
 2008a54:	e0bfd217 	ldw	r2,-184(fp)
 2008a58:	10800044 	addi	r2,r2,1
 2008a5c:	e0bfd215 	stw	r2,-184(fp)
 2008a60:	e0bff217 	ldw	r2,-56(fp)
 2008a64:	e0fff317 	ldw	r3,-52(fp)
 2008a68:	000d883a 	mov	r6,zero
 2008a6c:	01d00934 	movhi	r7,16420
 2008a70:	1009883a 	mov	r4,r2
 2008a74:	180b883a 	mov	r5,r3
 2008a78:	2003edc0 	call	2003edc <__muldf3>
 2008a7c:	1009883a 	mov	r4,r2
 2008a80:	180b883a 	mov	r5,r3
 2008a84:	2005883a 	mov	r2,r4
 2008a88:	2807883a 	mov	r3,r5
 2008a8c:	e0bff215 	stw	r2,-56(fp)
 2008a90:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
 2008a94:	003f9a06 	br	2008900 <_dtoa_r+0xd30>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
 2008a98:	0001883a 	nop
 2008a9c:	00000106 	br	2008aa4 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
 2008aa0:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 2008aa4:	e0bfe917 	ldw	r2,-92(fp)
 2008aa8:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
 2008aac:	e0bff417 	ldw	r2,-48(fp)
 2008ab0:	e0fff517 	ldw	r3,-44(fp)
 2008ab4:	e0bff215 	stw	r2,-56(fp)
 2008ab8:	e0fff315 	stw	r3,-52(fp)
      k = k0;
 2008abc:	e0bfea17 	ldw	r2,-88(fp)
 2008ac0:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
 2008ac4:	e0bfeb17 	ldw	r2,-84(fp)
 2008ac8:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 2008acc:	e0bff117 	ldw	r2,-60(fp)
 2008ad0:	1000b816 	blt	r2,zero,2008db4 <_dtoa_r+0x11e4>
 2008ad4:	e0bfd717 	ldw	r2,-164(fp)
 2008ad8:	108003c8 	cmpgei	r2,r2,15
 2008adc:	1000b51e 	bne	r2,zero,2008db4 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
 2008ae0:	008080b4 	movhi	r2,514
 2008ae4:	10baaa04 	addi	r2,r2,-5464
 2008ae8:	e0ffd717 	ldw	r3,-164(fp)
 2008aec:	180690fa 	slli	r3,r3,3
 2008af0:	10c5883a 	add	r2,r2,r3
 2008af4:	10c00017 	ldw	r3,0(r2)
 2008af8:	e0ffe515 	stw	r3,-108(fp)
 2008afc:	10800117 	ldw	r2,4(r2)
 2008b00:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
 2008b04:	e0800217 	ldw	r2,8(fp)
 2008b08:	1000190e 	bge	r2,zero,2008b70 <_dtoa_r+0xfa0>
 2008b0c:	e0bfd417 	ldw	r2,-176(fp)
 2008b10:	00801716 	blt	zero,r2,2008b70 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
 2008b14:	e03fe315 	stw	zero,-116(fp)
 2008b18:	e0bfe317 	ldw	r2,-116(fp)
 2008b1c:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 2008b20:	e0bfd417 	ldw	r2,-176(fp)
 2008b24:	1001bd16 	blt	r2,zero,200921c <_dtoa_r+0x164c>
 2008b28:	e43ff217 	ldw	r16,-56(fp)
 2008b2c:	e47ff317 	ldw	r17,-52(fp)
 2008b30:	000d883a 	mov	r6,zero
 2008b34:	01d00534 	movhi	r7,16404
 2008b38:	e13fe517 	ldw	r4,-108(fp)
 2008b3c:	e17fe617 	ldw	r5,-104(fp)
 2008b40:	2003edc0 	call	2003edc <__muldf3>
 2008b44:	1009883a 	mov	r4,r2
 2008b48:	180b883a 	mov	r5,r3
 2008b4c:	2005883a 	mov	r2,r4
 2008b50:	2807883a 	mov	r3,r5
 2008b54:	100d883a 	mov	r6,r2
 2008b58:	180f883a 	mov	r7,r3
 2008b5c:	8009883a 	mov	r4,r16
 2008b60:	880b883a 	mov	r5,r17
 2008b64:	2003de80 	call	2003de8 <__ledf2>
 2008b68:	0081ac0e 	bge	zero,r2,200921c <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
 2008b6c:	0001b006 	br	2009230 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
 2008b70:	00800044 	movi	r2,1
 2008b74:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
 2008b78:	e0bff217 	ldw	r2,-56(fp)
 2008b7c:	e0fff317 	ldw	r3,-52(fp)
 2008b80:	e1bfe517 	ldw	r6,-108(fp)
 2008b84:	e1ffe617 	ldw	r7,-104(fp)
 2008b88:	1009883a 	mov	r4,r2
 2008b8c:	180b883a 	mov	r5,r3
 2008b90:	20034240 	call	2003424 <__divdf3>
 2008b94:	1009883a 	mov	r4,r2
 2008b98:	180b883a 	mov	r5,r3
 2008b9c:	2005883a 	mov	r2,r4
 2008ba0:	2807883a 	mov	r3,r5
 2008ba4:	1009883a 	mov	r4,r2
 2008ba8:	180b883a 	mov	r5,r3
 2008bac:	2012f5c0 	call	2012f5c <__fixdfsi>
 2008bb0:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
 2008bb4:	e43ff217 	ldw	r16,-56(fp)
 2008bb8:	e47ff317 	ldw	r17,-52(fp)
 2008bbc:	e13fed17 	ldw	r4,-76(fp)
 2008bc0:	2012fdc0 	call	2012fdc <__floatsidf>
 2008bc4:	1011883a 	mov	r8,r2
 2008bc8:	1813883a 	mov	r9,r3
 2008bcc:	e1bfe517 	ldw	r6,-108(fp)
 2008bd0:	e1ffe617 	ldw	r7,-104(fp)
 2008bd4:	4009883a 	mov	r4,r8
 2008bd8:	480b883a 	mov	r5,r9
 2008bdc:	2003edc0 	call	2003edc <__muldf3>
 2008be0:	1009883a 	mov	r4,r2
 2008be4:	180b883a 	mov	r5,r3
 2008be8:	2005883a 	mov	r2,r4
 2008bec:	2807883a 	mov	r3,r5
 2008bf0:	100d883a 	mov	r6,r2
 2008bf4:	180f883a 	mov	r7,r3
 2008bf8:	8009883a 	mov	r4,r16
 2008bfc:	880b883a 	mov	r5,r17
 2008c00:	20126600 	call	2012660 <__subdf3>
 2008c04:	1009883a 	mov	r4,r2
 2008c08:	180b883a 	mov	r5,r3
 2008c0c:	2005883a 	mov	r2,r4
 2008c10:	2807883a 	mov	r3,r5
 2008c14:	e0bff215 	stw	r2,-56(fp)
 2008c18:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 2008c1c:	e0bfe717 	ldw	r2,-100(fp)
 2008c20:	10c00044 	addi	r3,r2,1
 2008c24:	e0ffe715 	stw	r3,-100(fp)
 2008c28:	e0ffed17 	ldw	r3,-76(fp)
 2008c2c:	18c00c04 	addi	r3,r3,48
 2008c30:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 2008c34:	e0ffd217 	ldw	r3,-184(fp)
 2008c38:	e0bfd417 	ldw	r2,-176(fp)
 2008c3c:	1880401e 	bne	r3,r2,2008d40 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
 2008c40:	e0bff217 	ldw	r2,-56(fp)
 2008c44:	e0fff317 	ldw	r3,-52(fp)
 2008c48:	100d883a 	mov	r6,r2
 2008c4c:	180f883a 	mov	r7,r3
 2008c50:	1009883a 	mov	r4,r2
 2008c54:	180b883a 	mov	r5,r3
 2008c58:	2011d2c0 	call	2011d2c <__adddf3>
 2008c5c:	1009883a 	mov	r4,r2
 2008c60:	180b883a 	mov	r5,r3
 2008c64:	2005883a 	mov	r2,r4
 2008c68:	2807883a 	mov	r3,r5
 2008c6c:	e0bff215 	stw	r2,-56(fp)
 2008c70:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 2008c74:	e0bff217 	ldw	r2,-56(fp)
 2008c78:	e0fff317 	ldw	r3,-52(fp)
 2008c7c:	e1bfe517 	ldw	r6,-108(fp)
 2008c80:	e1ffe617 	ldw	r7,-104(fp)
 2008c84:	1009883a 	mov	r4,r2
 2008c88:	180b883a 	mov	r5,r3
 2008c8c:	2003d0c0 	call	2003d0c <__gedf2>
 2008c90:	00801a16 	blt	zero,r2,2008cfc <_dtoa_r+0x112c>
 2008c94:	e0bff217 	ldw	r2,-56(fp)
 2008c98:	e0fff317 	ldw	r3,-52(fp)
 2008c9c:	e1bfe517 	ldw	r6,-108(fp)
 2008ca0:	e1ffe617 	ldw	r7,-104(fp)
 2008ca4:	1009883a 	mov	r4,r2
 2008ca8:	180b883a 	mov	r5,r3
 2008cac:	20125d80 	call	20125d8 <__eqdf2>
 2008cb0:	10003c1e 	bne	r2,zero,2008da4 <_dtoa_r+0x11d4>
 2008cb4:	e0bfed17 	ldw	r2,-76(fp)
 2008cb8:	1080004c 	andi	r2,r2,1
 2008cbc:	10003926 	beq	r2,zero,2008da4 <_dtoa_r+0x11d4>
 2008cc0:	00000e06 	br	2008cfc <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
 2008cc4:	0001883a 	nop
 2008cc8:	00000c06 	br	2008cfc <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
 2008ccc:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2008cd0:	00000a06 	br	2008cfc <_dtoa_r+0x112c>
		    if (s == s0)
 2008cd4:	e0ffe717 	ldw	r3,-100(fp)
 2008cd8:	e0bfe917 	ldw	r2,-92(fp)
 2008cdc:	1880071e 	bne	r3,r2,2008cfc <_dtoa_r+0x112c>
		      {
			k++;
 2008ce0:	e0bfd717 	ldw	r2,-164(fp)
 2008ce4:	10800044 	addi	r2,r2,1
 2008ce8:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
 2008cec:	e0bfe717 	ldw	r2,-100(fp)
 2008cf0:	00c00c04 	movi	r3,48
 2008cf4:	10c00005 	stb	r3,0(r2)
			break;
 2008cf8:	00000a06 	br	2008d24 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
 2008cfc:	e0bfe717 	ldw	r2,-100(fp)
 2008d00:	10bfffc4 	addi	r2,r2,-1
 2008d04:	e0bfe715 	stw	r2,-100(fp)
 2008d08:	e0bfe717 	ldw	r2,-100(fp)
 2008d0c:	10800003 	ldbu	r2,0(r2)
 2008d10:	10803fcc 	andi	r2,r2,255
 2008d14:	1080201c 	xori	r2,r2,128
 2008d18:	10bfe004 	addi	r2,r2,-128
 2008d1c:	10800e60 	cmpeqi	r2,r2,57
 2008d20:	103fec1e 	bne	r2,zero,2008cd4 <_dtoa_r+0x1104>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
 2008d24:	e0bfe717 	ldw	r2,-100(fp)
 2008d28:	10c00044 	addi	r3,r2,1
 2008d2c:	e0ffe715 	stw	r3,-100(fp)
 2008d30:	10c00003 	ldbu	r3,0(r2)
 2008d34:	18c00044 	addi	r3,r3,1
 2008d38:	10c00005 	stb	r3,0(r2)
		}
	      break;
 2008d3c:	00001906 	br	2008da4 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
 2008d40:	e0bff217 	ldw	r2,-56(fp)
 2008d44:	e0fff317 	ldw	r3,-52(fp)
 2008d48:	000d883a 	mov	r6,zero
 2008d4c:	01d00934 	movhi	r7,16420
 2008d50:	1009883a 	mov	r4,r2
 2008d54:	180b883a 	mov	r5,r3
 2008d58:	2003edc0 	call	2003edc <__muldf3>
 2008d5c:	1009883a 	mov	r4,r2
 2008d60:	180b883a 	mov	r5,r3
 2008d64:	2005883a 	mov	r2,r4
 2008d68:	2807883a 	mov	r3,r5
 2008d6c:	e0bff215 	stw	r2,-56(fp)
 2008d70:	e0fff315 	stw	r3,-52(fp)
 2008d74:	e0bff217 	ldw	r2,-56(fp)
 2008d78:	e0fff317 	ldw	r3,-52(fp)
 2008d7c:	000d883a 	mov	r6,zero
 2008d80:	000f883a 	mov	r7,zero
 2008d84:	1009883a 	mov	r4,r2
 2008d88:	180b883a 	mov	r5,r3
 2008d8c:	20125d80 	call	20125d8 <__eqdf2>
 2008d90:	10000626 	beq	r2,zero,2008dac <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
 2008d94:	e0bfd217 	ldw	r2,-184(fp)
 2008d98:	10800044 	addi	r2,r2,1
 2008d9c:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
 2008da0:	003f7506 	br	2008b78 <_dtoa_r+0xfa8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
 2008da4:	0001883a 	nop
 2008da8:	00024f06 	br	20096e8 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
 2008dac:	0001883a 	nop
	}
      goto ret1;
 2008db0:	00024d06 	br	20096e8 <_dtoa_r+0x1b18>
    }

  m2 = b2;
 2008db4:	e0bfcf17 	ldw	r2,-196(fp)
 2008db8:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
 2008dbc:	e0bfd017 	ldw	r2,-192(fp)
 2008dc0:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
 2008dc4:	e03fe215 	stw	zero,-120(fp)
 2008dc8:	e0bfe217 	ldw	r2,-120(fp)
 2008dcc:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
 2008dd0:	e0bfd917 	ldw	r2,-156(fp)
 2008dd4:	10003a26 	beq	r2,zero,2008ec0 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
 2008dd8:	e0bffb17 	ldw	r2,-20(fp)
 2008ddc:	10800088 	cmpgei	r2,r2,2
 2008de0:	10000a1e 	bne	r2,zero,2008e0c <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2008de4:	e0bfe017 	ldw	r2,-128(fp)
 2008de8:	10000326 	beq	r2,zero,2008df8 <_dtoa_r+0x1228>
 2008dec:	e0bff117 	ldw	r2,-60(fp)
 2008df0:	10810cc4 	addi	r2,r2,1075
 2008df4:	00000306 	br	2008e04 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 2008df8:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 2008dfc:	00c00d84 	movi	r3,54
 2008e00:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
 2008e04:	e0bfd215 	stw	r2,-184(fp)
 2008e08:	00002106 	br	2008e90 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
 2008e0c:	e0bfd417 	ldw	r2,-176(fp)
 2008e10:	10bfffc4 	addi	r2,r2,-1
 2008e14:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
 2008e18:	e0ffdb17 	ldw	r3,-148(fp)
 2008e1c:	e0bfd617 	ldw	r2,-168(fp)
 2008e20:	18800516 	blt	r3,r2,2008e38 <_dtoa_r+0x1268>
	    m5 -= j;
 2008e24:	e0ffdb17 	ldw	r3,-148(fp)
 2008e28:	e0bfd617 	ldw	r2,-168(fp)
 2008e2c:	1885c83a 	sub	r2,r3,r2
 2008e30:	e0bfdb15 	stw	r2,-148(fp)
 2008e34:	00000d06 	br	2008e6c <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
 2008e38:	e0ffd617 	ldw	r3,-168(fp)
 2008e3c:	e0bfdb17 	ldw	r2,-148(fp)
 2008e40:	1885c83a 	sub	r2,r3,r2
 2008e44:	e0bfd615 	stw	r2,-168(fp)
 2008e48:	e0bfd617 	ldw	r2,-168(fp)
 2008e4c:	e0ffdd17 	ldw	r3,-140(fp)
 2008e50:	1885883a 	add	r2,r3,r2
 2008e54:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
 2008e58:	e0ffd017 	ldw	r3,-192(fp)
 2008e5c:	e0bfd617 	ldw	r2,-168(fp)
 2008e60:	1885883a 	add	r2,r3,r2
 2008e64:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
 2008e68:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
 2008e6c:	e0bfd417 	ldw	r2,-176(fp)
 2008e70:	e0bfd215 	stw	r2,-184(fp)
 2008e74:	e0bfd217 	ldw	r2,-184(fp)
 2008e78:	1000050e 	bge	r2,zero,2008e90 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
 2008e7c:	e0ffda17 	ldw	r3,-152(fp)
 2008e80:	e0bfd217 	ldw	r2,-184(fp)
 2008e84:	1885c83a 	sub	r2,r3,r2
 2008e88:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
 2008e8c:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
 2008e90:	e0ffcf17 	ldw	r3,-196(fp)
 2008e94:	e0bfd217 	ldw	r2,-184(fp)
 2008e98:	1885883a 	add	r2,r3,r2
 2008e9c:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
 2008ea0:	e0ffdc17 	ldw	r3,-144(fp)
 2008ea4:	e0bfd217 	ldw	r2,-184(fp)
 2008ea8:	1885883a 	add	r2,r3,r2
 2008eac:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
 2008eb0:	01400044 	movi	r5,1
 2008eb4:	e13ff817 	ldw	r4,-32(fp)
 2008eb8:	200ccb40 	call	200ccb4 <__i2b>
 2008ebc:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
 2008ec0:	e0bfda17 	ldw	r2,-152(fp)
 2008ec4:	0080130e 	bge	zero,r2,2008f14 <_dtoa_r+0x1344>
 2008ec8:	e0bfdc17 	ldw	r2,-144(fp)
 2008ecc:	0080110e 	bge	zero,r2,2008f14 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
 2008ed0:	e0ffda17 	ldw	r3,-152(fp)
 2008ed4:	e0bfdc17 	ldw	r2,-144(fp)
 2008ed8:	1880010e 	bge	r3,r2,2008ee0 <_dtoa_r+0x1310>
 2008edc:	1805883a 	mov	r2,r3
 2008ee0:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
 2008ee4:	e0ffcf17 	ldw	r3,-196(fp)
 2008ee8:	e0bfd217 	ldw	r2,-184(fp)
 2008eec:	1885c83a 	sub	r2,r3,r2
 2008ef0:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
 2008ef4:	e0ffda17 	ldw	r3,-152(fp)
 2008ef8:	e0bfd217 	ldw	r2,-184(fp)
 2008efc:	1885c83a 	sub	r2,r3,r2
 2008f00:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
 2008f04:	e0ffdc17 	ldw	r3,-144(fp)
 2008f08:	e0bfd217 	ldw	r2,-184(fp)
 2008f0c:	1885c83a 	sub	r2,r3,r2
 2008f10:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
 2008f14:	e0bfd017 	ldw	r2,-192(fp)
 2008f18:	0080240e 	bge	zero,r2,2008fac <_dtoa_r+0x13dc>
    {
      if (leftright)
 2008f1c:	e0bfd917 	ldw	r2,-156(fp)
 2008f20:	10001d26 	beq	r2,zero,2008f98 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
 2008f24:	e0bfdb17 	ldw	r2,-148(fp)
 2008f28:	00800f0e 	bge	zero,r2,2008f68 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 2008f2c:	e1bfdb17 	ldw	r6,-148(fp)
 2008f30:	e17fe317 	ldw	r5,-116(fp)
 2008f34:	e13ff817 	ldw	r4,-32(fp)
 2008f38:	200d0dc0 	call	200d0dc <__pow5mult>
 2008f3c:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
 2008f40:	e1bfe117 	ldw	r6,-124(fp)
 2008f44:	e17fe317 	ldw	r5,-116(fp)
 2008f48:	e13ff817 	ldw	r4,-32(fp)
 2008f4c:	200cd0c0 	call	200cd0c <__multiply>
 2008f50:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
 2008f54:	e17fe117 	ldw	r5,-124(fp)
 2008f58:	e13ff817 	ldw	r4,-32(fp)
 2008f5c:	200c79c0 	call	200c79c <_Bfree>
	      b = b1;
 2008f60:	e0bfee17 	ldw	r2,-72(fp)
 2008f64:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
 2008f68:	e0ffd017 	ldw	r3,-192(fp)
 2008f6c:	e0bfdb17 	ldw	r2,-148(fp)
 2008f70:	1885c83a 	sub	r2,r3,r2
 2008f74:	e0bfd615 	stw	r2,-168(fp)
 2008f78:	e0bfd617 	ldw	r2,-168(fp)
 2008f7c:	10000b26 	beq	r2,zero,2008fac <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
 2008f80:	e1bfd617 	ldw	r6,-168(fp)
 2008f84:	e17fe117 	ldw	r5,-124(fp)
 2008f88:	e13ff817 	ldw	r4,-32(fp)
 2008f8c:	200d0dc0 	call	200d0dc <__pow5mult>
 2008f90:	e0bfe115 	stw	r2,-124(fp)
 2008f94:	00000506 	br	2008fac <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
 2008f98:	e1bfd017 	ldw	r6,-192(fp)
 2008f9c:	e17fe117 	ldw	r5,-124(fp)
 2008fa0:	e13ff817 	ldw	r4,-32(fp)
 2008fa4:	200d0dc0 	call	200d0dc <__pow5mult>
 2008fa8:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
 2008fac:	01400044 	movi	r5,1
 2008fb0:	e13ff817 	ldw	r4,-32(fp)
 2008fb4:	200ccb40 	call	200ccb4 <__i2b>
 2008fb8:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
 2008fbc:	e0bfdd17 	ldw	r2,-140(fp)
 2008fc0:	0080050e 	bge	zero,r2,2008fd8 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
 2008fc4:	e1bfdd17 	ldw	r6,-140(fp)
 2008fc8:	e17fe417 	ldw	r5,-112(fp)
 2008fcc:	e13ff817 	ldw	r4,-32(fp)
 2008fd0:	200d0dc0 	call	200d0dc <__pow5mult>
 2008fd4:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 2008fd8:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
 2008fdc:	e0bffb17 	ldw	r2,-20(fp)
 2008fe0:	10800088 	cmpgei	r2,r2,2
 2008fe4:	1000121e 	bne	r2,zero,2009030 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 2008fe8:	e0bff217 	ldw	r2,-56(fp)
 2008fec:	1000101e 	bne	r2,zero,2009030 <_dtoa_r+0x1460>
 2008ff0:	e0fff317 	ldw	r3,-52(fp)
 2008ff4:	00800434 	movhi	r2,16
 2008ff8:	10bfffc4 	addi	r2,r2,-1
 2008ffc:	1884703a 	and	r2,r3,r2
 2009000:	10000b1e 	bne	r2,zero,2009030 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 2009004:	e0bff317 	ldw	r2,-52(fp)
 2009008:	109ffc2c 	andhi	r2,r2,32752
 200900c:	10000826 	beq	r2,zero,2009030 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 2009010:	e0bfcf17 	ldw	r2,-196(fp)
 2009014:	10800044 	addi	r2,r2,1
 2009018:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
 200901c:	e0bfdc17 	ldw	r2,-144(fp)
 2009020:	10800044 	addi	r2,r2,1
 2009024:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
 2009028:	00800044 	movi	r2,1
 200902c:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 2009030:	e0bfdd17 	ldw	r2,-140(fp)
 2009034:	10000f26 	beq	r2,zero,2009074 <_dtoa_r+0x14a4>
 2009038:	e0bfe417 	ldw	r2,-112(fp)
 200903c:	10800417 	ldw	r2,16(r2)
 2009040:	10bfffc4 	addi	r2,r2,-1
 2009044:	e0ffe417 	ldw	r3,-112(fp)
 2009048:	10800144 	addi	r2,r2,5
 200904c:	1085883a 	add	r2,r2,r2
 2009050:	1085883a 	add	r2,r2,r2
 2009054:	1885883a 	add	r2,r3,r2
 2009058:	10800017 	ldw	r2,0(r2)
 200905c:	1009883a 	mov	r4,r2
 2009060:	200cb380 	call	200cb38 <__hi0bits>
 2009064:	1007883a 	mov	r3,r2
 2009068:	00800804 	movi	r2,32
 200906c:	10c5c83a 	sub	r2,r2,r3
 2009070:	00000106 	br	2009078 <_dtoa_r+0x14a8>
 2009074:	00800044 	movi	r2,1
 2009078:	e0ffdc17 	ldw	r3,-144(fp)
 200907c:	10c5883a 	add	r2,r2,r3
 2009080:	108007cc 	andi	r2,r2,31
 2009084:	e0bfd215 	stw	r2,-184(fp)
 2009088:	e0bfd217 	ldw	r2,-184(fp)
 200908c:	10000426 	beq	r2,zero,20090a0 <_dtoa_r+0x14d0>
    i = 32 - i;
 2009090:	00c00804 	movi	r3,32
 2009094:	e0bfd217 	ldw	r2,-184(fp)
 2009098:	1885c83a 	sub	r2,r3,r2
 200909c:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 20090a0:	e0bfd217 	ldw	r2,-184(fp)
 20090a4:	10800150 	cmplti	r2,r2,5
 20090a8:	1000101e 	bne	r2,zero,20090ec <_dtoa_r+0x151c>
    {
      i -= 4;
 20090ac:	e0bfd217 	ldw	r2,-184(fp)
 20090b0:	10bfff04 	addi	r2,r2,-4
 20090b4:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 20090b8:	e0ffcf17 	ldw	r3,-196(fp)
 20090bc:	e0bfd217 	ldw	r2,-184(fp)
 20090c0:	1885883a 	add	r2,r3,r2
 20090c4:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 20090c8:	e0ffda17 	ldw	r3,-152(fp)
 20090cc:	e0bfd217 	ldw	r2,-184(fp)
 20090d0:	1885883a 	add	r2,r3,r2
 20090d4:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 20090d8:	e0ffdc17 	ldw	r3,-144(fp)
 20090dc:	e0bfd217 	ldw	r2,-184(fp)
 20090e0:	1885883a 	add	r2,r3,r2
 20090e4:	e0bfdc15 	stw	r2,-144(fp)
 20090e8:	00001206 	br	2009134 <_dtoa_r+0x1564>
    }
  else if (i < 4)
 20090ec:	e0bfd217 	ldw	r2,-184(fp)
 20090f0:	10800108 	cmpgei	r2,r2,4
 20090f4:	10000f1e 	bne	r2,zero,2009134 <_dtoa_r+0x1564>
    {
      i += 28;
 20090f8:	e0bfd217 	ldw	r2,-184(fp)
 20090fc:	10800704 	addi	r2,r2,28
 2009100:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
 2009104:	e0ffcf17 	ldw	r3,-196(fp)
 2009108:	e0bfd217 	ldw	r2,-184(fp)
 200910c:	1885883a 	add	r2,r3,r2
 2009110:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
 2009114:	e0ffda17 	ldw	r3,-152(fp)
 2009118:	e0bfd217 	ldw	r2,-184(fp)
 200911c:	1885883a 	add	r2,r3,r2
 2009120:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
 2009124:	e0ffdc17 	ldw	r3,-144(fp)
 2009128:	e0bfd217 	ldw	r2,-184(fp)
 200912c:	1885883a 	add	r2,r3,r2
 2009130:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
 2009134:	e0bfcf17 	ldw	r2,-196(fp)
 2009138:	0080050e 	bge	zero,r2,2009150 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
 200913c:	e1bfcf17 	ldw	r6,-196(fp)
 2009140:	e17fe117 	ldw	r5,-124(fp)
 2009144:	e13ff817 	ldw	r4,-32(fp)
 2009148:	200d2540 	call	200d254 <__lshift>
 200914c:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
 2009150:	e0bfdc17 	ldw	r2,-144(fp)
 2009154:	0080050e 	bge	zero,r2,200916c <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
 2009158:	e1bfdc17 	ldw	r6,-144(fp)
 200915c:	e17fe417 	ldw	r5,-112(fp)
 2009160:	e13ff817 	ldw	r4,-32(fp)
 2009164:	200d2540 	call	200d254 <__lshift>
 2009168:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
 200916c:	e0bfd817 	ldw	r2,-160(fp)
 2009170:	10001726 	beq	r2,zero,20091d0 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
 2009174:	e17fe417 	ldw	r5,-112(fp)
 2009178:	e13fe117 	ldw	r4,-124(fp)
 200917c:	200d44c0 	call	200d44c <__mcmp>
 2009180:	1000130e 	bge	r2,zero,20091d0 <_dtoa_r+0x1600>
	{
	  k--;
 2009184:	e0bfd717 	ldw	r2,-164(fp)
 2009188:	10bfffc4 	addi	r2,r2,-1
 200918c:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 2009190:	000f883a 	mov	r7,zero
 2009194:	01800284 	movi	r6,10
 2009198:	e17fe117 	ldw	r5,-124(fp)
 200919c:	e13ff817 	ldw	r4,-32(fp)
 20091a0:	200c8180 	call	200c818 <__multadd>
 20091a4:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
 20091a8:	e0bfd917 	ldw	r2,-156(fp)
 20091ac:	10000626 	beq	r2,zero,20091c8 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
 20091b0:	000f883a 	mov	r7,zero
 20091b4:	01800284 	movi	r6,10
 20091b8:	e17fe317 	ldw	r5,-116(fp)
 20091bc:	e13ff817 	ldw	r4,-32(fp)
 20091c0:	200c8180 	call	200c818 <__multadd>
 20091c4:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
 20091c8:	e0bfd517 	ldw	r2,-172(fp)
 20091cc:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 20091d0:	e0bfd417 	ldw	r2,-176(fp)
 20091d4:	00801f16 	blt	zero,r2,2009254 <_dtoa_r+0x1684>
 20091d8:	e0bffb17 	ldw	r2,-20(fp)
 20091dc:	108000d0 	cmplti	r2,r2,3
 20091e0:	10001c1e 	bne	r2,zero,2009254 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 20091e4:	e0bfd417 	ldw	r2,-176(fp)
 20091e8:	10000c16 	blt	r2,zero,200921c <_dtoa_r+0x164c>
 20091ec:	000f883a 	mov	r7,zero
 20091f0:	01800144 	movi	r6,5
 20091f4:	e17fe417 	ldw	r5,-112(fp)
 20091f8:	e13ff817 	ldw	r4,-32(fp)
 20091fc:	200c8180 	call	200c818 <__multadd>
 2009200:	e0bfe415 	stw	r2,-112(fp)
 2009204:	e17fe417 	ldw	r5,-112(fp)
 2009208:	e13fe117 	ldw	r4,-124(fp)
 200920c:	200d44c0 	call	200d44c <__mcmp>
 2009210:	00800716 	blt	zero,r2,2009230 <_dtoa_r+0x1660>
 2009214:	00000106 	br	200921c <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
 2009218:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
 200921c:	e0800217 	ldw	r2,8(fp)
 2009220:	0084303a 	nor	r2,zero,r2
 2009224:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
 2009228:	00011d06 	br	20096a0 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
 200922c:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
 2009230:	e0bfe717 	ldw	r2,-100(fp)
 2009234:	10c00044 	addi	r3,r2,1
 2009238:	e0ffe715 	stw	r3,-100(fp)
 200923c:	00c00c44 	movi	r3,49
 2009240:	10c00005 	stb	r3,0(r2)
      k++;
 2009244:	e0bfd717 	ldw	r2,-164(fp)
 2009248:	10800044 	addi	r2,r2,1
 200924c:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
 2009250:	00011306 	br	20096a0 <_dtoa_r+0x1ad0>
    }
  if (leftright)
 2009254:	e0bfd917 	ldw	r2,-156(fp)
 2009258:	1000ba26 	beq	r2,zero,2009544 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
 200925c:	e0bfda17 	ldw	r2,-152(fp)
 2009260:	0080050e 	bge	zero,r2,2009278 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
 2009264:	e1bfda17 	ldw	r6,-152(fp)
 2009268:	e17fe317 	ldw	r5,-116(fp)
 200926c:	e13ff817 	ldw	r4,-32(fp)
 2009270:	200d2540 	call	200d254 <__lshift>
 2009274:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 2009278:	e0bfe317 	ldw	r2,-116(fp)
 200927c:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
 2009280:	e0bfde17 	ldw	r2,-136(fp)
 2009284:	10001826 	beq	r2,zero,20092e8 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
 2009288:	e0bfe317 	ldw	r2,-116(fp)
 200928c:	10800117 	ldw	r2,4(r2)
 2009290:	100b883a 	mov	r5,r2
 2009294:	e13ff817 	ldw	r4,-32(fp)
 2009298:	200c66c0 	call	200c66c <_Balloc>
 200929c:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
 20092a0:	e0bfe317 	ldw	r2,-116(fp)
 20092a4:	10c00304 	addi	r3,r2,12
 20092a8:	e0bfe217 	ldw	r2,-120(fp)
 20092ac:	11000304 	addi	r4,r2,12
 20092b0:	e0bfe217 	ldw	r2,-120(fp)
 20092b4:	10800417 	ldw	r2,16(r2)
 20092b8:	10800084 	addi	r2,r2,2
 20092bc:	1085883a 	add	r2,r2,r2
 20092c0:	1085883a 	add	r2,r2,r2
 20092c4:	100d883a 	mov	r6,r2
 20092c8:	200b883a 	mov	r5,r4
 20092cc:	1809883a 	mov	r4,r3
 20092d0:	2004ac40 	call	2004ac4 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 20092d4:	01800044 	movi	r6,1
 20092d8:	e17fe317 	ldw	r5,-116(fp)
 20092dc:	e13ff817 	ldw	r4,-32(fp)
 20092e0:	200d2540 	call	200d254 <__lshift>
 20092e4:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
 20092e8:	00800044 	movi	r2,1
 20092ec:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
 20092f0:	e17fe417 	ldw	r5,-112(fp)
 20092f4:	e13fe117 	ldw	r4,-124(fp)
 20092f8:	200781c0 	call	200781c <quorem>
 20092fc:	10800c04 	addi	r2,r2,48
 2009300:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 2009304:	e17fe217 	ldw	r5,-120(fp)
 2009308:	e13fe117 	ldw	r4,-124(fp)
 200930c:	200d44c0 	call	200d44c <__mcmp>
 2009310:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
 2009314:	e1bfe317 	ldw	r6,-116(fp)
 2009318:	e17fe417 	ldw	r5,-112(fp)
 200931c:	e13ff817 	ldw	r4,-32(fp)
 2009320:	200d5600 	call	200d560 <__mdiff>
 2009324:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 2009328:	e0bfef17 	ldw	r2,-68(fp)
 200932c:	10800317 	ldw	r2,12(r2)
 2009330:	1000041e 	bne	r2,zero,2009344 <_dtoa_r+0x1774>
 2009334:	e17fef17 	ldw	r5,-68(fp)
 2009338:	e13fe117 	ldw	r4,-124(fp)
 200933c:	200d44c0 	call	200d44c <__mcmp>
 2009340:	00000106 	br	2009348 <_dtoa_r+0x1778>
 2009344:	00800044 	movi	r2,1
 2009348:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
 200934c:	e17fef17 	ldw	r5,-68(fp)
 2009350:	e13ff817 	ldw	r4,-32(fp)
 2009354:	200c79c0 	call	200c79c <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 2009358:	e0bfec17 	ldw	r2,-80(fp)
 200935c:	1000131e 	bne	r2,zero,20093ac <_dtoa_r+0x17dc>
 2009360:	e0bffb17 	ldw	r2,-20(fp)
 2009364:	1000111e 	bne	r2,zero,20093ac <_dtoa_r+0x17dc>
 2009368:	e0bff217 	ldw	r2,-56(fp)
 200936c:	1080004c 	andi	r2,r2,1
 2009370:	10000e1e 	bne	r2,zero,20093ac <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
 2009374:	e0bfd117 	ldw	r2,-188(fp)
 2009378:	10800e58 	cmpnei	r2,r2,57
 200937c:	10003726 	beq	r2,zero,200945c <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
 2009380:	e0bfd617 	ldw	r2,-168(fp)
 2009384:	0080030e 	bge	zero,r2,2009394 <_dtoa_r+0x17c4>
		dig++;
 2009388:	e0bfd117 	ldw	r2,-188(fp)
 200938c:	10800044 	addi	r2,r2,1
 2009390:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
 2009394:	e0bfe717 	ldw	r2,-100(fp)
 2009398:	10c00044 	addi	r3,r2,1
 200939c:	e0ffe715 	stw	r3,-100(fp)
 20093a0:	e0ffd117 	ldw	r3,-188(fp)
 20093a4:	10c00005 	stb	r3,0(r2)
	      goto ret;
 20093a8:	0000bd06 	br	20096a0 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 20093ac:	e0bfd617 	ldw	r2,-168(fp)
 20093b0:	10000716 	blt	r2,zero,20093d0 <_dtoa_r+0x1800>
 20093b4:	e0bfd617 	ldw	r2,-168(fp)
 20093b8:	1000221e 	bne	r2,zero,2009444 <_dtoa_r+0x1874>
 20093bc:	e0bffb17 	ldw	r2,-20(fp)
 20093c0:	1000201e 	bne	r2,zero,2009444 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 20093c4:	e0bff217 	ldw	r2,-56(fp)
 20093c8:	1080004c 	andi	r2,r2,1
 20093cc:	10001d1e 	bne	r2,zero,2009444 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
 20093d0:	e0bfec17 	ldw	r2,-80(fp)
 20093d4:	0080150e 	bge	zero,r2,200942c <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
 20093d8:	01800044 	movi	r6,1
 20093dc:	e17fe117 	ldw	r5,-124(fp)
 20093e0:	e13ff817 	ldw	r4,-32(fp)
 20093e4:	200d2540 	call	200d254 <__lshift>
 20093e8:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
 20093ec:	e17fe417 	ldw	r5,-112(fp)
 20093f0:	e13fe117 	ldw	r4,-124(fp)
 20093f4:	200d44c0 	call	200d44c <__mcmp>
 20093f8:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 20093fc:	e0bfec17 	ldw	r2,-80(fp)
 2009400:	00800516 	blt	zero,r2,2009418 <_dtoa_r+0x1848>
 2009404:	e0bfec17 	ldw	r2,-80(fp)
 2009408:	1000081e 	bne	r2,zero,200942c <_dtoa_r+0x185c>
 200940c:	e0bfd117 	ldw	r2,-188(fp)
 2009410:	1080004c 	andi	r2,r2,1
 2009414:	10000526 	beq	r2,zero,200942c <_dtoa_r+0x185c>
		      && dig++ == '9')
 2009418:	e0bfd117 	ldw	r2,-188(fp)
 200941c:	10c00044 	addi	r3,r2,1
 2009420:	e0ffd115 	stw	r3,-188(fp)
 2009424:	10800e58 	cmpnei	r2,r2,57
 2009428:	10000e26 	beq	r2,zero,2009464 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
 200942c:	e0bfe717 	ldw	r2,-100(fp)
 2009430:	10c00044 	addi	r3,r2,1
 2009434:	e0ffe715 	stw	r3,-100(fp)
 2009438:	e0ffd117 	ldw	r3,-188(fp)
 200943c:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2009440:	00009706 	br	20096a0 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
 2009444:	e0bfec17 	ldw	r2,-80(fp)
 2009448:	0080140e 	bge	zero,r2,200949c <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
 200944c:	e0bfd117 	ldw	r2,-188(fp)
 2009450:	10800e58 	cmpnei	r2,r2,57
 2009454:	10000a1e 	bne	r2,zero,2009480 <_dtoa_r+0x18b0>
 2009458:	00000306 	br	2009468 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
 200945c:	0001883a 	nop
 2009460:	00000106 	br	2009468 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
 2009464:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
 2009468:	e0bfe717 	ldw	r2,-100(fp)
 200946c:	10c00044 	addi	r3,r2,1
 2009470:	e0ffe715 	stw	r3,-100(fp)
 2009474:	00c00e44 	movi	r3,57
 2009478:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 200947c:	00005d06 	br	20095f4 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
 2009480:	e0bfe717 	ldw	r2,-100(fp)
 2009484:	10c00044 	addi	r3,r2,1
 2009488:	e0ffe715 	stw	r3,-100(fp)
 200948c:	e0ffd117 	ldw	r3,-188(fp)
 2009490:	18c00044 	addi	r3,r3,1
 2009494:	10c00005 	stb	r3,0(r2)
	      goto ret;
 2009498:	00008106 	br	20096a0 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
 200949c:	e0bfe717 	ldw	r2,-100(fp)
 20094a0:	10c00044 	addi	r3,r2,1
 20094a4:	e0ffe715 	stw	r3,-100(fp)
 20094a8:	e0ffd117 	ldw	r3,-188(fp)
 20094ac:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 20094b0:	e0ffd217 	ldw	r3,-184(fp)
 20094b4:	e0bfd417 	ldw	r2,-176(fp)
 20094b8:	18803b26 	beq	r3,r2,20095a8 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
 20094bc:	000f883a 	mov	r7,zero
 20094c0:	01800284 	movi	r6,10
 20094c4:	e17fe117 	ldw	r5,-124(fp)
 20094c8:	e13ff817 	ldw	r4,-32(fp)
 20094cc:	200c8180 	call	200c818 <__multadd>
 20094d0:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
 20094d4:	e0ffe217 	ldw	r3,-120(fp)
 20094d8:	e0bfe317 	ldw	r2,-116(fp)
 20094dc:	1880091e 	bne	r3,r2,2009504 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 20094e0:	000f883a 	mov	r7,zero
 20094e4:	01800284 	movi	r6,10
 20094e8:	e17fe317 	ldw	r5,-116(fp)
 20094ec:	e13ff817 	ldw	r4,-32(fp)
 20094f0:	200c8180 	call	200c818 <__multadd>
 20094f4:	e0bfe315 	stw	r2,-116(fp)
 20094f8:	e0bfe317 	ldw	r2,-116(fp)
 20094fc:	e0bfe215 	stw	r2,-120(fp)
 2009500:	00000c06 	br	2009534 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 2009504:	000f883a 	mov	r7,zero
 2009508:	01800284 	movi	r6,10
 200950c:	e17fe217 	ldw	r5,-120(fp)
 2009510:	e13ff817 	ldw	r4,-32(fp)
 2009514:	200c8180 	call	200c818 <__multadd>
 2009518:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 200951c:	000f883a 	mov	r7,zero
 2009520:	01800284 	movi	r6,10
 2009524:	e17fe317 	ldw	r5,-116(fp)
 2009528:	e13ff817 	ldw	r4,-32(fp)
 200952c:	200c8180 	call	200c818 <__multadd>
 2009530:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
 2009534:	e0bfd217 	ldw	r2,-184(fp)
 2009538:	10800044 	addi	r2,r2,1
 200953c:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
 2009540:	003f6b06 	br	20092f0 <_dtoa_r+0x1720>
    }
  else
    for (i = 1;; i++)
 2009544:	00800044 	movi	r2,1
 2009548:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 200954c:	e43fe717 	ldw	r16,-100(fp)
 2009550:	80800044 	addi	r2,r16,1
 2009554:	e0bfe715 	stw	r2,-100(fp)
 2009558:	e17fe417 	ldw	r5,-112(fp)
 200955c:	e13fe117 	ldw	r4,-124(fp)
 2009560:	200781c0 	call	200781c <quorem>
 2009564:	10800c04 	addi	r2,r2,48
 2009568:	e0bfd115 	stw	r2,-188(fp)
 200956c:	e0bfd117 	ldw	r2,-188(fp)
 2009570:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
 2009574:	e0ffd217 	ldw	r3,-184(fp)
 2009578:	e0bfd417 	ldw	r2,-176(fp)
 200957c:	18800c0e 	bge	r3,r2,20095b0 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
 2009580:	000f883a 	mov	r7,zero
 2009584:	01800284 	movi	r6,10
 2009588:	e17fe117 	ldw	r5,-124(fp)
 200958c:	e13ff817 	ldw	r4,-32(fp)
 2009590:	200c8180 	call	200c818 <__multadd>
 2009594:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
 2009598:	e0bfd217 	ldw	r2,-184(fp)
 200959c:	10800044 	addi	r2,r2,1
 20095a0:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
 20095a4:	003fe906 	br	200954c <_dtoa_r+0x197c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
 20095a8:	0001883a 	nop
 20095ac:	00000106 	br	20095b4 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
 20095b0:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 20095b4:	01800044 	movi	r6,1
 20095b8:	e17fe117 	ldw	r5,-124(fp)
 20095bc:	e13ff817 	ldw	r4,-32(fp)
 20095c0:	200d2540 	call	200d254 <__lshift>
 20095c4:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
 20095c8:	e17fe417 	ldw	r5,-112(fp)
 20095cc:	e13fe117 	ldw	r4,-124(fp)
 20095d0:	200d44c0 	call	200d44c <__mcmp>
 20095d4:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 20095d8:	e0bfd617 	ldw	r2,-168(fp)
 20095dc:	00801216 	blt	zero,r2,2009628 <_dtoa_r+0x1a58>
 20095e0:	e0bfd617 	ldw	r2,-168(fp)
 20095e4:	1000211e 	bne	r2,zero,200966c <_dtoa_r+0x1a9c>
 20095e8:	e0bfd117 	ldw	r2,-188(fp)
 20095ec:	1080004c 	andi	r2,r2,1
 20095f0:	10001e26 	beq	r2,zero,200966c <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
 20095f4:	00000c06 	br	2009628 <_dtoa_r+0x1a58>
	if (s == s0)
 20095f8:	e0ffe717 	ldw	r3,-100(fp)
 20095fc:	e0bfe917 	ldw	r2,-92(fp)
 2009600:	1880091e 	bne	r3,r2,2009628 <_dtoa_r+0x1a58>
	  {
	    k++;
 2009604:	e0bfd717 	ldw	r2,-164(fp)
 2009608:	10800044 	addi	r2,r2,1
 200960c:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
 2009610:	e0bfe717 	ldw	r2,-100(fp)
 2009614:	10c00044 	addi	r3,r2,1
 2009618:	e0ffe715 	stw	r3,-100(fp)
 200961c:	00c00c44 	movi	r3,49
 2009620:	10c00005 	stb	r3,0(r2)
	    goto ret;
 2009624:	00001e06 	br	20096a0 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
 2009628:	e0bfe717 	ldw	r2,-100(fp)
 200962c:	10bfffc4 	addi	r2,r2,-1
 2009630:	e0bfe715 	stw	r2,-100(fp)
 2009634:	e0bfe717 	ldw	r2,-100(fp)
 2009638:	10800003 	ldbu	r2,0(r2)
 200963c:	10803fcc 	andi	r2,r2,255
 2009640:	1080201c 	xori	r2,r2,128
 2009644:	10bfe004 	addi	r2,r2,-128
 2009648:	10800e60 	cmpeqi	r2,r2,57
 200964c:	103fea1e 	bne	r2,zero,20095f8 <_dtoa_r+0x1a28>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
 2009650:	e0bfe717 	ldw	r2,-100(fp)
 2009654:	10c00044 	addi	r3,r2,1
 2009658:	e0ffe715 	stw	r3,-100(fp)
 200965c:	10c00003 	ldbu	r3,0(r2)
 2009660:	18c00044 	addi	r3,r3,1
 2009664:	10c00005 	stb	r3,0(r2)
 2009668:	00000d06 	br	20096a0 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
 200966c:	e0bfe717 	ldw	r2,-100(fp)
 2009670:	10bfffc4 	addi	r2,r2,-1
 2009674:	e0bfe715 	stw	r2,-100(fp)
 2009678:	e0bfe717 	ldw	r2,-100(fp)
 200967c:	10800003 	ldbu	r2,0(r2)
 2009680:	10803fcc 	andi	r2,r2,255
 2009684:	1080201c 	xori	r2,r2,128
 2009688:	10bfe004 	addi	r2,r2,-128
 200968c:	10800c20 	cmpeqi	r2,r2,48
 2009690:	103ff61e 	bne	r2,zero,200966c <_dtoa_r+0x1a9c>
      s++;
 2009694:	e0bfe717 	ldw	r2,-100(fp)
 2009698:	10800044 	addi	r2,r2,1
 200969c:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
 20096a0:	e17fe417 	ldw	r5,-112(fp)
 20096a4:	e13ff817 	ldw	r4,-32(fp)
 20096a8:	200c79c0 	call	200c79c <_Bfree>
  if (mhi)
 20096ac:	e0bfe317 	ldw	r2,-116(fp)
 20096b0:	10000d26 	beq	r2,zero,20096e8 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
 20096b4:	e0bfe217 	ldw	r2,-120(fp)
 20096b8:	10000626 	beq	r2,zero,20096d4 <_dtoa_r+0x1b04>
 20096bc:	e0ffe217 	ldw	r3,-120(fp)
 20096c0:	e0bfe317 	ldw	r2,-116(fp)
 20096c4:	18800326 	beq	r3,r2,20096d4 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
 20096c8:	e17fe217 	ldw	r5,-120(fp)
 20096cc:	e13ff817 	ldw	r4,-32(fp)
 20096d0:	200c79c0 	call	200c79c <_Bfree>
      Bfree (ptr, mhi);
 20096d4:	e17fe317 	ldw	r5,-116(fp)
 20096d8:	e13ff817 	ldw	r4,-32(fp)
 20096dc:	200c79c0 	call	200c79c <_Bfree>
 20096e0:	00000106 	br	20096e8 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
 20096e4:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
 20096e8:	e17fe117 	ldw	r5,-124(fp)
 20096ec:	e13ff817 	ldw	r4,-32(fp)
 20096f0:	200c79c0 	call	200c79c <_Bfree>
  *s = 0;
 20096f4:	e0bfe717 	ldw	r2,-100(fp)
 20096f8:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 20096fc:	e0bfd717 	ldw	r2,-164(fp)
 2009700:	10c00044 	addi	r3,r2,1
 2009704:	e0800317 	ldw	r2,12(fp)
 2009708:	10c00015 	stw	r3,0(r2)
  if (rve)
 200970c:	e0800517 	ldw	r2,20(fp)
 2009710:	10000326 	beq	r2,zero,2009720 <_dtoa_r+0x1b50>
    *rve = s;
 2009714:	e0800517 	ldw	r2,20(fp)
 2009718:	e0ffe717 	ldw	r3,-100(fp)
 200971c:	10c00015 	stw	r3,0(r2)
  return s0;
 2009720:	e0bfe917 	ldw	r2,-92(fp)
}
 2009724:	e6fffc04 	addi	sp,fp,-16
 2009728:	dfc00517 	ldw	ra,20(sp)
 200972c:	df000417 	ldw	fp,16(sp)
 2009730:	dcc00317 	ldw	r19,12(sp)
 2009734:	dc800217 	ldw	r18,8(sp)
 2009738:	dc400117 	ldw	r17,4(sp)
 200973c:	dc000017 	ldw	r16,0(sp)
 2009740:	dec00604 	addi	sp,sp,24
 2009744:	f800283a 	ret

02009748 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2009748:	defff504 	addi	sp,sp,-44
 200974c:	dfc00a15 	stw	ra,40(sp)
 2009750:	df000915 	stw	fp,36(sp)
 2009754:	dcc00815 	stw	r19,32(sp)
 2009758:	dc800715 	stw	r18,28(sp)
 200975c:	dc400615 	stw	r17,24(sp)
 2009760:	dc000515 	stw	r16,20(sp)
 2009764:	df000904 	addi	fp,sp,36
 2009768:	e13ffb15 	stw	r4,-20(fp)
 200976c:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 2009770:	8080030b 	ldhu	r2,12(r16)
 2009774:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
 2009778:	e0bff90b 	ldhu	r2,-28(fp)
 200977c:	10bfffcc 	andi	r2,r2,65535
 2009780:	1080020c 	andi	r2,r2,8
 2009784:	1000831e 	bne	r2,zero,2009994 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 2009788:	8080030b 	ldhu	r2,12(r16)
 200978c:	10820014 	ori	r2,r2,2048
 2009790:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 2009794:	80800117 	ldw	r2,4(r16)
 2009798:	00800216 	blt	zero,r2,20097a4 <__sflush_r+0x5c>
 200979c:	80800f17 	ldw	r2,60(r16)
 20097a0:	00807a0e 	bge	zero,r2,200998c <__sflush_r+0x244>
 20097a4:	80800a17 	ldw	r2,40(r16)
 20097a8:	10007826 	beq	r2,zero,200998c <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 20097ac:	e0bffb17 	ldw	r2,-20(fp)
 20097b0:	10800017 	ldw	r2,0(r2)
 20097b4:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
 20097b8:	e0bffb17 	ldw	r2,-20(fp)
 20097bc:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 20097c0:	8080030b 	ldhu	r2,12(r16)
 20097c4:	10bfffcc 	andi	r2,r2,65535
 20097c8:	1084000c 	andi	r2,r2,4096
 20097cc:	10000326 	beq	r2,zero,20097dc <__sflush_r+0x94>
	    curoff = fp->_offset;
 20097d0:	80801417 	ldw	r2,80(r16)
 20097d4:	e0bff715 	stw	r2,-36(fp)
 20097d8:	00002206 	br	2009864 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 20097dc:	80800a17 	ldw	r2,40(r16)
 20097e0:	80c00717 	ldw	r3,28(r16)
 20097e4:	01c00044 	movi	r7,1
 20097e8:	000d883a 	mov	r6,zero
 20097ec:	180b883a 	mov	r5,r3
 20097f0:	e13ffb17 	ldw	r4,-20(fp)
 20097f4:	103ee83a 	callr	r2
 20097f8:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 20097fc:	e0bff717 	ldw	r2,-36(fp)
 2009800:	10bfffd8 	cmpnei	r2,r2,-1
 2009804:	1000171e 	bne	r2,zero,2009864 <__sflush_r+0x11c>
 2009808:	e0bffb17 	ldw	r2,-20(fp)
 200980c:	10800017 	ldw	r2,0(r2)
 2009810:	10001426 	beq	r2,zero,2009864 <__sflush_r+0x11c>
		{
		  int result = EOF;
 2009814:	00bfffc4 	movi	r2,-1
 2009818:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 200981c:	e0bffb17 	ldw	r2,-20(fp)
 2009820:	10800017 	ldw	r2,0(r2)
 2009824:	10800760 	cmpeqi	r2,r2,29
 2009828:	1000041e 	bne	r2,zero,200983c <__sflush_r+0xf4>
 200982c:	e0bffb17 	ldw	r2,-20(fp)
 2009830:	10800017 	ldw	r2,0(r2)
 2009834:	10800598 	cmpnei	r2,r2,22
 2009838:	1000051e 	bne	r2,zero,2009850 <__sflush_r+0x108>
		    {
		      result = 0;
 200983c:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
 2009840:	e0bffb17 	ldw	r2,-20(fp)
 2009844:	e0fffa17 	ldw	r3,-24(fp)
 2009848:	10c00015 	stw	r3,0(r2)
 200984c:	00000306 	br	200985c <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 2009850:	8080030b 	ldhu	r2,12(r16)
 2009854:	10801014 	ori	r2,r2,64
 2009858:	8080030d 	sth	r2,12(r16)
		  return result;
 200985c:	e0bff817 	ldw	r2,-32(fp)
 2009860:	00007106 	br	2009a28 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
 2009864:	8080030b 	ldhu	r2,12(r16)
 2009868:	10bfffcc 	andi	r2,r2,65535
 200986c:	1080010c 	andi	r2,r2,4
 2009870:	10000a26 	beq	r2,zero,200989c <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 2009874:	80800117 	ldw	r2,4(r16)
 2009878:	e0fff717 	ldw	r3,-36(fp)
 200987c:	1885c83a 	sub	r2,r3,r2
 2009880:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
 2009884:	80800c17 	ldw	r2,48(r16)
 2009888:	10000426 	beq	r2,zero,200989c <__sflush_r+0x154>
                curoff -= fp->_ur;
 200988c:	80800f17 	ldw	r2,60(r16)
 2009890:	e0fff717 	ldw	r3,-36(fp)
 2009894:	1885c83a 	sub	r2,r3,r2
 2009898:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 200989c:	80800a17 	ldw	r2,40(r16)
 20098a0:	80c00717 	ldw	r3,28(r16)
 20098a4:	000f883a 	mov	r7,zero
 20098a8:	e1bff717 	ldw	r6,-36(fp)
 20098ac:	180b883a 	mov	r5,r3
 20098b0:	e13ffb17 	ldw	r4,-20(fp)
 20098b4:	103ee83a 	callr	r2
 20098b8:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
 20098bc:	e0bff717 	ldw	r2,-36(fp)
 20098c0:	10bfffd8 	cmpnei	r2,r2,-1
 20098c4:	10000b1e 	bne	r2,zero,20098f4 <__sflush_r+0x1ac>
 20098c8:	e0bffb17 	ldw	r2,-20(fp)
 20098cc:	10800017 	ldw	r2,0(r2)
 20098d0:	10000826 	beq	r2,zero,20098f4 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 20098d4:	e0bffb17 	ldw	r2,-20(fp)
 20098d8:	10800017 	ldw	r2,0(r2)
 20098dc:	10800760 	cmpeqi	r2,r2,29
 20098e0:	1000041e 	bne	r2,zero,20098f4 <__sflush_r+0x1ac>
 20098e4:	e0bffb17 	ldw	r2,-20(fp)
 20098e8:	10800017 	ldw	r2,0(r2)
 20098ec:	10800598 	cmpnei	r2,r2,22
 20098f0:	1000211e 	bne	r2,zero,2009978 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 20098f4:	80c0030b 	ldhu	r3,12(r16)
 20098f8:	00bdffc4 	movi	r2,-2049
 20098fc:	1884703a 	and	r2,r3,r2
 2009900:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 2009904:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 2009908:	80800417 	ldw	r2,16(r16)
 200990c:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 2009910:	8080030b 	ldhu	r2,12(r16)
 2009914:	10bfffcc 	andi	r2,r2,65535
 2009918:	1084000c 	andi	r2,r2,4096
 200991c:	10000826 	beq	r2,zero,2009940 <__sflush_r+0x1f8>
 2009920:	e0bff717 	ldw	r2,-36(fp)
 2009924:	10bfffd8 	cmpnei	r2,r2,-1
 2009928:	1000031e 	bne	r2,zero,2009938 <__sflush_r+0x1f0>
 200992c:	e0bffb17 	ldw	r2,-20(fp)
 2009930:	10800017 	ldw	r2,0(r2)
 2009934:	1000021e 	bne	r2,zero,2009940 <__sflush_r+0x1f8>
		fp->_offset = curoff;
 2009938:	e0bff717 	ldw	r2,-36(fp)
 200993c:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 2009940:	e0bffb17 	ldw	r2,-20(fp)
 2009944:	e0fffa17 	ldw	r3,-24(fp)
 2009948:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 200994c:	80800c17 	ldw	r2,48(r16)
 2009950:	10000e26 	beq	r2,zero,200998c <__sflush_r+0x244>
		FREEUB (ptr, fp);
 2009954:	80c00c17 	ldw	r3,48(r16)
 2009958:	80801004 	addi	r2,r16,64
 200995c:	18800426 	beq	r3,r2,2009970 <__sflush_r+0x228>
 2009960:	80800c17 	ldw	r2,48(r16)
 2009964:	100b883a 	mov	r5,r2
 2009968:	e13ffb17 	ldw	r4,-20(fp)
 200996c:	200a0ec0 	call	200a0ec <_free_r>
 2009970:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
 2009974:	00000506 	br	200998c <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 2009978:	8080030b 	ldhu	r2,12(r16)
 200997c:	10801014 	ori	r2,r2,64
 2009980:	8080030d 	sth	r2,12(r16)
	      return EOF;
 2009984:	00bfffc4 	movi	r2,-1
 2009988:	00002706 	br	2009a28 <__sflush_r+0x2e0>
	    }
	}
      return 0;
 200998c:	0005883a 	mov	r2,zero
 2009990:	00002506 	br	2009a28 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
 2009994:	84400417 	ldw	r17,16(r16)
 2009998:	8800021e 	bne	r17,zero,20099a4 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 200999c:	0005883a 	mov	r2,zero
 20099a0:	00002106 	br	2009a28 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
 20099a4:	80800017 	ldw	r2,0(r16)
 20099a8:	1007883a 	mov	r3,r2
 20099ac:	8805883a 	mov	r2,r17
 20099b0:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 20099b4:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 20099b8:	e0bff90b 	ldhu	r2,-28(fp)
 20099bc:	10bfffcc 	andi	r2,r2,65535
 20099c0:	108000cc 	andi	r2,r2,3
 20099c4:	1000021e 	bne	r2,zero,20099d0 <__sflush_r+0x288>
 20099c8:	80800517 	ldw	r2,20(r16)
 20099cc:	00000106 	br	20099d4 <__sflush_r+0x28c>
 20099d0:	0005883a 	mov	r2,zero
 20099d4:	80800215 	stw	r2,8(r16)

  while (n > 0)
 20099d8:	00001106 	br	2009a20 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 20099dc:	80800917 	ldw	r2,36(r16)
 20099e0:	80c00717 	ldw	r3,28(r16)
 20099e4:	900f883a 	mov	r7,r18
 20099e8:	880d883a 	mov	r6,r17
 20099ec:	180b883a 	mov	r5,r3
 20099f0:	e13ffb17 	ldw	r4,-20(fp)
 20099f4:	103ee83a 	callr	r2
 20099f8:	1027883a 	mov	r19,r2
      if (t <= 0)
 20099fc:	04c00516 	blt	zero,r19,2009a14 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
 2009a00:	8080030b 	ldhu	r2,12(r16)
 2009a04:	10801014 	ori	r2,r2,64
 2009a08:	8080030d 	sth	r2,12(r16)
          return EOF;
 2009a0c:	00bfffc4 	movi	r2,-1
 2009a10:	00000506 	br	2009a28 <__sflush_r+0x2e0>
	}
      p += t;
 2009a14:	9805883a 	mov	r2,r19
 2009a18:	88a3883a 	add	r17,r17,r2
      n -= t;
 2009a1c:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
 2009a20:	04bfee16 	blt	zero,r18,20099dc <__sflush_r+0x294>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
 2009a24:	0005883a 	mov	r2,zero
}
 2009a28:	e6fffc04 	addi	sp,fp,-16
 2009a2c:	dfc00517 	ldw	ra,20(sp)
 2009a30:	df000417 	ldw	fp,16(sp)
 2009a34:	dcc00317 	ldw	r19,12(sp)
 2009a38:	dc800217 	ldw	r18,8(sp)
 2009a3c:	dc400117 	ldw	r17,4(sp)
 2009a40:	dc000017 	ldw	r16,0(sp)
 2009a44:	dec00604 	addi	sp,sp,24
 2009a48:	f800283a 	ret

02009a4c <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
 2009a4c:	defffa04 	addi	sp,sp,-24
 2009a50:	dfc00515 	stw	ra,20(sp)
 2009a54:	df000415 	stw	fp,16(sp)
 2009a58:	dc000315 	stw	r16,12(sp)
 2009a5c:	df000404 	addi	fp,sp,16
 2009a60:	e13ffe15 	stw	r4,-8(fp)
 2009a64:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 2009a68:	e0bffe17 	ldw	r2,-8(fp)
 2009a6c:	e0bffc15 	stw	r2,-16(fp)
 2009a70:	e0bffc17 	ldw	r2,-16(fp)
 2009a74:	10000526 	beq	r2,zero,2009a8c <_fflush_r+0x40>
 2009a78:	e0bffc17 	ldw	r2,-16(fp)
 2009a7c:	10800e17 	ldw	r2,56(r2)
 2009a80:	1000021e 	bne	r2,zero,2009a8c <_fflush_r+0x40>
 2009a84:	e13ffc17 	ldw	r4,-16(fp)
 2009a88:	2009ecc0 	call	2009ecc <__sinit>

  if (!fp->_flags)
 2009a8c:	8080030b 	ldhu	r2,12(r16)
 2009a90:	10bfffcc 	andi	r2,r2,65535
 2009a94:	10a0001c 	xori	r2,r2,32768
 2009a98:	10a00004 	addi	r2,r2,-32768
 2009a9c:	1000021e 	bne	r2,zero,2009aa8 <_fflush_r+0x5c>
    return 0;
 2009aa0:	0005883a 	mov	r2,zero
 2009aa4:	00000506 	br	2009abc <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 2009aa8:	800b883a 	mov	r5,r16
 2009aac:	e13ffe17 	ldw	r4,-8(fp)
 2009ab0:	20097480 	call	2009748 <__sflush_r>
 2009ab4:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 2009ab8:	e0bffd17 	ldw	r2,-12(fp)
}
 2009abc:	e6ffff04 	addi	sp,fp,-4
 2009ac0:	dfc00217 	ldw	ra,8(sp)
 2009ac4:	df000117 	ldw	fp,4(sp)
 2009ac8:	dc000017 	ldw	r16,0(sp)
 2009acc:	dec00304 	addi	sp,sp,12
 2009ad0:	f800283a 	ret

02009ad4 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
 2009ad4:	defffe04 	addi	sp,sp,-8
 2009ad8:	dfc00115 	stw	ra,4(sp)
 2009adc:	df000015 	stw	fp,0(sp)
 2009ae0:	d839883a 	mov	fp,sp
 2009ae4:	2005883a 	mov	r2,r4
  if (fp == NULL)
 2009ae8:	1000061e 	bne	r2,zero,2009b04 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 2009aec:	d0a00117 	ldw	r2,-32764(gp)
 2009af0:	01408074 	movhi	r5,513
 2009af4:	29669304 	addi	r5,r5,-26036
 2009af8:	1009883a 	mov	r4,r2
 2009afc:	200aecc0 	call	200aecc <_fwalk_reent>
 2009b00:	00000406 	br	2009b14 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 2009b04:	d0e00017 	ldw	r3,-32768(gp)
 2009b08:	100b883a 	mov	r5,r2
 2009b0c:	1809883a 	mov	r4,r3
 2009b10:	2009a4c0 	call	2009a4c <_fflush_r>
}
 2009b14:	e037883a 	mov	sp,fp
 2009b18:	dfc00117 	ldw	ra,4(sp)
 2009b1c:	df000017 	ldw	fp,0(sp)
 2009b20:	dec00204 	addi	sp,sp,8
 2009b24:	f800283a 	ret

02009b28 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
 2009b28:	defffa04 	addi	sp,sp,-24
 2009b2c:	dfc00515 	stw	ra,20(sp)
 2009b30:	df000415 	stw	fp,16(sp)
 2009b34:	df000404 	addi	fp,sp,16
 2009b38:	e13ffc15 	stw	r4,-16(fp)
 2009b3c:	e17ffd15 	stw	r5,-12(fp)
 2009b40:	e1bffe15 	stw	r6,-8(fp)
 2009b44:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
 2009b48:	e0bffc17 	ldw	r2,-16(fp)
 2009b4c:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 2009b50:	e0bffc17 	ldw	r2,-16(fp)
 2009b54:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 2009b58:	e0bffc17 	ldw	r2,-16(fp)
 2009b5c:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 2009b60:	e0bffd17 	ldw	r2,-12(fp)
 2009b64:	1007883a 	mov	r3,r2
 2009b68:	e0bffc17 	ldw	r2,-16(fp)
 2009b6c:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 2009b70:	e0bffc17 	ldw	r2,-16(fp)
 2009b74:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 2009b78:	e0bffe17 	ldw	r2,-8(fp)
 2009b7c:	1007883a 	mov	r3,r2
 2009b80:	e0bffc17 	ldw	r2,-16(fp)
 2009b84:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 2009b88:	e0bffc17 	ldw	r2,-16(fp)
 2009b8c:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 2009b90:	e0bffc17 	ldw	r2,-16(fp)
 2009b94:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 2009b98:	e0bffc17 	ldw	r2,-16(fp)
 2009b9c:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 2009ba0:	e0bffc17 	ldw	r2,-16(fp)
 2009ba4:	10801704 	addi	r2,r2,92
 2009ba8:	01800204 	movi	r6,8
 2009bac:	000b883a 	mov	r5,zero
 2009bb0:	1009883a 	mov	r4,r2
 2009bb4:	2004c4c0 	call	2004c4c <memset>
  ptr->_cookie = ptr;
 2009bb8:	e0bffc17 	ldw	r2,-16(fp)
 2009bbc:	e0fffc17 	ldw	r3,-16(fp)
 2009bc0:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 2009bc4:	e0fffc17 	ldw	r3,-16(fp)
 2009bc8:	00808074 	movhi	r2,513
 2009bcc:	10bb4d04 	addi	r2,r2,-4812
 2009bd0:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 2009bd4:	e0fffc17 	ldw	r3,-16(fp)
 2009bd8:	00808074 	movhi	r2,513
 2009bdc:	10bb8004 	addi	r2,r2,-4608
 2009be0:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 2009be4:	e0fffc17 	ldw	r3,-16(fp)
 2009be8:	00808074 	movhi	r2,513
 2009bec:	10bbad04 	addi	r2,r2,-4428
 2009bf0:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 2009bf4:	e0fffc17 	ldw	r3,-16(fp)
 2009bf8:	00808074 	movhi	r2,513
 2009bfc:	10bbd504 	addi	r2,r2,-4268
 2009c00:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 2009c04:	0001883a 	nop
 2009c08:	e037883a 	mov	sp,fp
 2009c0c:	dfc00117 	ldw	ra,4(sp)
 2009c10:	df000017 	ldw	fp,0(sp)
 2009c14:	dec00204 	addi	sp,sp,8
 2009c18:	f800283a 	ret

02009c1c <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
 2009c1c:	defffb04 	addi	sp,sp,-20
 2009c20:	dfc00415 	stw	ra,16(sp)
 2009c24:	df000315 	stw	fp,12(sp)
 2009c28:	dc000215 	stw	r16,8(sp)
 2009c2c:	df000304 	addi	fp,sp,12
 2009c30:	e13ffe15 	stw	r4,-8(fp)
 2009c34:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 2009c38:	80bfffc4 	addi	r2,r16,-1
 2009c3c:	10801a24 	muli	r2,r2,104
 2009c40:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
 2009c44:	100b883a 	mov	r5,r2
 2009c48:	e13ffe17 	ldw	r4,-8(fp)
 2009c4c:	200b72c0 	call	200b72c <_malloc_r>
 2009c50:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
 2009c54:	e0bffd17 	ldw	r2,-12(fp)
 2009c58:	1000021e 	bne	r2,zero,2009c64 <__sfmoreglue+0x48>
    return NULL;
 2009c5c:	0005883a 	mov	r2,zero
 2009c60:	00001106 	br	2009ca8 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 2009c64:	e0bffd17 	ldw	r2,-12(fp)
 2009c68:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 2009c6c:	e0bffd17 	ldw	r2,-12(fp)
 2009c70:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 2009c74:	e0bffd17 	ldw	r2,-12(fp)
 2009c78:	10c00304 	addi	r3,r2,12
 2009c7c:	e0bffd17 	ldw	r2,-12(fp)
 2009c80:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 2009c84:	e0bffd17 	ldw	r2,-12(fp)
 2009c88:	10800304 	addi	r2,r2,12
 2009c8c:	8007883a 	mov	r3,r16
 2009c90:	18c01a24 	muli	r3,r3,104
 2009c94:	180d883a 	mov	r6,r3
 2009c98:	000b883a 	mov	r5,zero
 2009c9c:	1009883a 	mov	r4,r2
 2009ca0:	2004c4c0 	call	2004c4c <memset>
  return &g->glue;
 2009ca4:	e0bffd17 	ldw	r2,-12(fp)
}
 2009ca8:	e6ffff04 	addi	sp,fp,-4
 2009cac:	dfc00217 	ldw	ra,8(sp)
 2009cb0:	df000117 	ldw	fp,4(sp)
 2009cb4:	dc000017 	ldw	r16,0(sp)
 2009cb8:	dec00304 	addi	sp,sp,12
 2009cbc:	f800283a 	ret

02009cc0 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
 2009cc0:	defffa04 	addi	sp,sp,-24
 2009cc4:	dfc00515 	stw	ra,20(sp)
 2009cc8:	df000415 	stw	fp,16(sp)
 2009ccc:	df000404 	addi	fp,sp,16
 2009cd0:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 2009cd4:	2009fa40 	call	2009fa4 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 2009cd8:	d0a00117 	ldw	r2,-32764(gp)
 2009cdc:	10800e17 	ldw	r2,56(r2)
 2009ce0:	1000031e 	bne	r2,zero,2009cf0 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 2009ce4:	d0a00117 	ldw	r2,-32764(gp)
 2009ce8:	1009883a 	mov	r4,r2
 2009cec:	2009ecc0 	call	2009ecc <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 2009cf0:	d0a00117 	ldw	r2,-32764(gp)
 2009cf4:	1080b804 	addi	r2,r2,736
 2009cf8:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2009cfc:	e0bffe17 	ldw	r2,-8(fp)
 2009d00:	10800217 	ldw	r2,8(r2)
 2009d04:	e0bffc15 	stw	r2,-16(fp)
 2009d08:	e0bffe17 	ldw	r2,-8(fp)
 2009d0c:	10800117 	ldw	r2,4(r2)
 2009d10:	e0bffd15 	stw	r2,-12(fp)
 2009d14:	00000906 	br	2009d3c <__sfp+0x7c>
	if (fp->_flags == 0)
 2009d18:	e0bffc17 	ldw	r2,-16(fp)
 2009d1c:	1080030b 	ldhu	r2,12(r2)
 2009d20:	10bfffcc 	andi	r2,r2,65535
 2009d24:	10a0001c 	xori	r2,r2,32768
 2009d28:	10a00004 	addi	r2,r2,-32768
 2009d2c:	10001f26 	beq	r2,zero,2009dac <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 2009d30:	e0bffc17 	ldw	r2,-16(fp)
 2009d34:	10801a04 	addi	r2,r2,104
 2009d38:	e0bffc15 	stw	r2,-16(fp)
 2009d3c:	e0bffd17 	ldw	r2,-12(fp)
 2009d40:	10bfffc4 	addi	r2,r2,-1
 2009d44:	e0bffd15 	stw	r2,-12(fp)
 2009d48:	e0bffd17 	ldw	r2,-12(fp)
 2009d4c:	103ff20e 	bge	r2,zero,2009d18 <__sfp+0x58>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2009d50:	e0bffe17 	ldw	r2,-8(fp)
 2009d54:	10800017 	ldw	r2,0(r2)
 2009d58:	1000091e 	bne	r2,zero,2009d80 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 2009d5c:	01400104 	movi	r5,4
 2009d60:	e13fff17 	ldw	r4,-4(fp)
 2009d64:	2009c1c0 	call	2009c1c <__sfmoreglue>
 2009d68:	1007883a 	mov	r3,r2
 2009d6c:	e0bffe17 	ldw	r2,-8(fp)
 2009d70:	10c00015 	stw	r3,0(r2)
 2009d74:	e0bffe17 	ldw	r2,-8(fp)
 2009d78:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
 2009d7c:	10000426 	beq	r2,zero,2009d90 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 2009d80:	e0bffe17 	ldw	r2,-8(fp)
 2009d84:	10800017 	ldw	r2,0(r2)
 2009d88:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
 2009d8c:	003fdb06 	br	2009cfc <__sfp+0x3c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
 2009d90:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 2009d94:	2009fc40 	call	2009fc4 <__sfp_lock_release>
  d->_errno = ENOMEM;
 2009d98:	e0bfff17 	ldw	r2,-4(fp)
 2009d9c:	00c00304 	movi	r3,12
 2009da0:	10c00015 	stw	r3,0(r2)
  return NULL;
 2009da4:	0005883a 	mov	r2,zero
 2009da8:	00002506 	br	2009e40 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
 2009dac:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
 2009db0:	e0bffc17 	ldw	r2,-16(fp)
 2009db4:	00ffffc4 	movi	r3,-1
 2009db8:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 2009dbc:	e0bffc17 	ldw	r2,-16(fp)
 2009dc0:	00c00044 	movi	r3,1
 2009dc4:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 2009dc8:	e0bffc17 	ldw	r2,-16(fp)
 2009dcc:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 2009dd0:	2009fc40 	call	2009fc4 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 2009dd4:	e0bffc17 	ldw	r2,-16(fp)
 2009dd8:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 2009ddc:	e0bffc17 	ldw	r2,-16(fp)
 2009de0:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 2009de4:	e0bffc17 	ldw	r2,-16(fp)
 2009de8:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 2009dec:	e0bffc17 	ldw	r2,-16(fp)
 2009df0:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 2009df4:	e0bffc17 	ldw	r2,-16(fp)
 2009df8:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 2009dfc:	e0bffc17 	ldw	r2,-16(fp)
 2009e00:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 2009e04:	e0bffc17 	ldw	r2,-16(fp)
 2009e08:	10801704 	addi	r2,r2,92
 2009e0c:	01800204 	movi	r6,8
 2009e10:	000b883a 	mov	r5,zero
 2009e14:	1009883a 	mov	r4,r2
 2009e18:	2004c4c0 	call	2004c4c <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 2009e1c:	e0bffc17 	ldw	r2,-16(fp)
 2009e20:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 2009e24:	e0bffc17 	ldw	r2,-16(fp)
 2009e28:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 2009e2c:	e0bffc17 	ldw	r2,-16(fp)
 2009e30:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 2009e34:	e0bffc17 	ldw	r2,-16(fp)
 2009e38:	10001215 	stw	zero,72(r2)

  return fp;
 2009e3c:	e0bffc17 	ldw	r2,-16(fp)
}
 2009e40:	e037883a 	mov	sp,fp
 2009e44:	dfc00117 	ldw	ra,4(sp)
 2009e48:	df000017 	ldw	fp,0(sp)
 2009e4c:	dec00204 	addi	sp,sp,8
 2009e50:	f800283a 	ret

02009e54 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
 2009e54:	defffc04 	addi	sp,sp,-16
 2009e58:	dfc00315 	stw	ra,12(sp)
 2009e5c:	df000215 	stw	fp,8(sp)
 2009e60:	df000204 	addi	fp,sp,8
 2009e64:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 2009e68:	00808074 	movhi	r2,513
 2009e6c:	10821704 	addi	r2,r2,2140
 2009e70:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
 2009e74:	e17ffe17 	ldw	r5,-8(fp)
 2009e78:	e13fff17 	ldw	r4,-4(fp)
 2009e7c:	200aecc0 	call	200aecc <_fwalk_reent>
}
 2009e80:	0001883a 	nop
 2009e84:	e037883a 	mov	sp,fp
 2009e88:	dfc00117 	ldw	ra,4(sp)
 2009e8c:	df000017 	ldw	fp,0(sp)
 2009e90:	dec00204 	addi	sp,sp,8
 2009e94:	f800283a 	ret

02009e98 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
 2009e98:	defffe04 	addi	sp,sp,-8
 2009e9c:	dfc00115 	stw	ra,4(sp)
 2009ea0:	df000015 	stw	fp,0(sp)
 2009ea4:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 2009ea8:	d0a00117 	ldw	r2,-32764(gp)
 2009eac:	1009883a 	mov	r4,r2
 2009eb0:	2009e540 	call	2009e54 <_cleanup_r>
}
 2009eb4:	0001883a 	nop
 2009eb8:	e037883a 	mov	sp,fp
 2009ebc:	dfc00117 	ldw	ra,4(sp)
 2009ec0:	df000017 	ldw	fp,0(sp)
 2009ec4:	dec00204 	addi	sp,sp,8
 2009ec8:	f800283a 	ret

02009ecc <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
 2009ecc:	defffd04 	addi	sp,sp,-12
 2009ed0:	dfc00215 	stw	ra,8(sp)
 2009ed4:	df000115 	stw	fp,4(sp)
 2009ed8:	df000104 	addi	fp,sp,4
 2009edc:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 2009ee0:	2009fe40 	call	2009fe4 <__sinit_lock_acquire>

  if (s->__sdidinit)
 2009ee4:	e0bfff17 	ldw	r2,-4(fp)
 2009ee8:	10800e17 	ldw	r2,56(r2)
 2009eec:	10000226 	beq	r2,zero,2009ef8 <__sinit+0x2c>
    {
      __sinit_lock_release ();
 2009ef0:	200a0040 	call	200a004 <__sinit_lock_release>
      return;
 2009ef4:	00002606 	br	2009f90 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 2009ef8:	e0ffff17 	ldw	r3,-4(fp)
 2009efc:	00808074 	movhi	r2,513
 2009f00:	10a79504 	addi	r2,r2,-25004
 2009f04:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 2009f08:	e0bfff17 	ldw	r2,-4(fp)
 2009f0c:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
 2009f10:	e0bfff17 	ldw	r2,-4(fp)
 2009f14:	00c000c4 	movi	r3,3
 2009f18:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 2009f1c:	e0bfff17 	ldw	r2,-4(fp)
 2009f20:	10c0bb04 	addi	r3,r2,748
 2009f24:	e0bfff17 	ldw	r2,-4(fp)
 2009f28:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
 2009f2c:	e0bfff17 	ldw	r2,-4(fp)
 2009f30:	10800117 	ldw	r2,4(r2)
 2009f34:	e1ffff17 	ldw	r7,-4(fp)
 2009f38:	000d883a 	mov	r6,zero
 2009f3c:	01400104 	movi	r5,4
 2009f40:	1009883a 	mov	r4,r2
 2009f44:	2009b280 	call	2009b28 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
 2009f48:	e0bfff17 	ldw	r2,-4(fp)
 2009f4c:	10800217 	ldw	r2,8(r2)
 2009f50:	e1ffff17 	ldw	r7,-4(fp)
 2009f54:	01800044 	movi	r6,1
 2009f58:	01400284 	movi	r5,10
 2009f5c:	1009883a 	mov	r4,r2
 2009f60:	2009b280 	call	2009b28 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
 2009f64:	e0bfff17 	ldw	r2,-4(fp)
 2009f68:	10800317 	ldw	r2,12(r2)
 2009f6c:	e1ffff17 	ldw	r7,-4(fp)
 2009f70:	01800084 	movi	r6,2
 2009f74:	01400484 	movi	r5,18
 2009f78:	1009883a 	mov	r4,r2
 2009f7c:	2009b280 	call	2009b28 <std>

  s->__sdidinit = 1;
 2009f80:	e0bfff17 	ldw	r2,-4(fp)
 2009f84:	00c00044 	movi	r3,1
 2009f88:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 2009f8c:	200a0040 	call	200a004 <__sinit_lock_release>
}
 2009f90:	e037883a 	mov	sp,fp
 2009f94:	dfc00117 	ldw	ra,4(sp)
 2009f98:	df000017 	ldw	fp,0(sp)
 2009f9c:	dec00204 	addi	sp,sp,8
 2009fa0:	f800283a 	ret

02009fa4 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
 2009fa4:	deffff04 	addi	sp,sp,-4
 2009fa8:	df000015 	stw	fp,0(sp)
 2009fac:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
 2009fb0:	0001883a 	nop
 2009fb4:	e037883a 	mov	sp,fp
 2009fb8:	df000017 	ldw	fp,0(sp)
 2009fbc:	dec00104 	addi	sp,sp,4
 2009fc0:	f800283a 	ret

02009fc4 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
 2009fc4:	deffff04 	addi	sp,sp,-4
 2009fc8:	df000015 	stw	fp,0(sp)
 2009fcc:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
 2009fd0:	0001883a 	nop
 2009fd4:	e037883a 	mov	sp,fp
 2009fd8:	df000017 	ldw	fp,0(sp)
 2009fdc:	dec00104 	addi	sp,sp,4
 2009fe0:	f800283a 	ret

02009fe4 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
 2009fe4:	deffff04 	addi	sp,sp,-4
 2009fe8:	df000015 	stw	fp,0(sp)
 2009fec:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
 2009ff0:	0001883a 	nop
 2009ff4:	e037883a 	mov	sp,fp
 2009ff8:	df000017 	ldw	fp,0(sp)
 2009ffc:	dec00104 	addi	sp,sp,4
 200a000:	f800283a 	ret

0200a004 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
 200a004:	deffff04 	addi	sp,sp,-4
 200a008:	df000015 	stw	fp,0(sp)
 200a00c:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
 200a010:	0001883a 	nop
 200a014:	e037883a 	mov	sp,fp
 200a018:	df000017 	ldw	fp,0(sp)
 200a01c:	dec00104 	addi	sp,sp,4
 200a020:	f800283a 	ret

0200a024 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
 200a024:	defffe04 	addi	sp,sp,-8
 200a028:	df000115 	stw	fp,4(sp)
 200a02c:	df000104 	addi	fp,sp,4
 200a030:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
 200a034:	0005883a 	mov	r2,zero
}
 200a038:	e037883a 	mov	sp,fp
 200a03c:	df000017 	ldw	fp,0(sp)
 200a040:	dec00104 	addi	sp,sp,4
 200a044:	f800283a 	ret

0200a048 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
 200a048:	defffe04 	addi	sp,sp,-8
 200a04c:	df000115 	stw	fp,4(sp)
 200a050:	df000104 	addi	fp,sp,4
 200a054:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
 200a058:	0005883a 	mov	r2,zero
}
 200a05c:	e037883a 	mov	sp,fp
 200a060:	df000017 	ldw	fp,0(sp)
 200a064:	dec00104 	addi	sp,sp,4
 200a068:	f800283a 	ret

0200a06c <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
 200a06c:	defffe04 	addi	sp,sp,-8
 200a070:	dfc00115 	stw	ra,4(sp)
 200a074:	df000015 	stw	fp,0(sp)
 200a078:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 200a07c:	2009fa40 	call	2009fa4 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
 200a080:	d0a00017 	ldw	r2,-32768(gp)
 200a084:	01408074 	movhi	r5,513
 200a088:	29680904 	addi	r5,r5,-24540
 200a08c:	1009883a 	mov	r4,r2
 200a090:	200adf40 	call	200adf4 <_fwalk>
}
 200a094:	0001883a 	nop
 200a098:	e037883a 	mov	sp,fp
 200a09c:	dfc00117 	ldw	ra,4(sp)
 200a0a0:	df000017 	ldw	fp,0(sp)
 200a0a4:	dec00204 	addi	sp,sp,8
 200a0a8:	f800283a 	ret

0200a0ac <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
 200a0ac:	defffe04 	addi	sp,sp,-8
 200a0b0:	dfc00115 	stw	ra,4(sp)
 200a0b4:	df000015 	stw	fp,0(sp)
 200a0b8:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
 200a0bc:	d0a00017 	ldw	r2,-32768(gp)
 200a0c0:	01408074 	movhi	r5,513
 200a0c4:	29681204 	addi	r5,r5,-24504
 200a0c8:	1009883a 	mov	r4,r2
 200a0cc:	200adf40 	call	200adf4 <_fwalk>

  __sfp_lock_release ();
 200a0d0:	2009fc40 	call	2009fc4 <__sfp_lock_release>
}
 200a0d4:	0001883a 	nop
 200a0d8:	e037883a 	mov	sp,fp
 200a0dc:	dfc00117 	ldw	ra,4(sp)
 200a0e0:	df000017 	ldw	fp,0(sp)
 200a0e4:	dec00204 	addi	sp,sp,8
 200a0e8:	f800283a 	ret

0200a0ec <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 200a0ec:	defff204 	addi	sp,sp,-56
 200a0f0:	dfc00d15 	stw	ra,52(sp)
 200a0f4:	df000c15 	stw	fp,48(sp)
 200a0f8:	df000c04 	addi	fp,sp,48
 200a0fc:	e13ffe15 	stw	r4,-8(fp)
 200a100:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 200a104:	e0bfff17 	ldw	r2,-4(fp)
 200a108:	10014a26 	beq	r2,zero,200a634 <_free_r+0x548>
    return;

  MALLOC_LOCK;
 200a10c:	e13ffe17 	ldw	r4,-8(fp)
 200a110:	2013bc00 	call	2013bc0 <__malloc_lock>

  p = mem2chunk(mem);
 200a114:	e0bfff17 	ldw	r2,-4(fp)
 200a118:	10bffe04 	addi	r2,r2,-8
 200a11c:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
 200a120:	e0bff417 	ldw	r2,-48(fp)
 200a124:	10800117 	ldw	r2,4(r2)
 200a128:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 200a12c:	e0fff917 	ldw	r3,-28(fp)
 200a130:	00bfff84 	movi	r2,-2
 200a134:	1884703a 	and	r2,r3,r2
 200a138:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
 200a13c:	e0fff417 	ldw	r3,-48(fp)
 200a140:	e0bff517 	ldw	r2,-44(fp)
 200a144:	1885883a 	add	r2,r3,r2
 200a148:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
 200a14c:	e0bffa17 	ldw	r2,-24(fp)
 200a150:	10c00117 	ldw	r3,4(r2)
 200a154:	00bfff04 	movi	r2,-4
 200a158:	1884703a 	and	r2,r3,r2
 200a15c:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
 200a160:	008080b4 	movhi	r2,514
 200a164:	10bc9504 	addi	r2,r2,-3500
 200a168:	10c00217 	ldw	r3,8(r2)
 200a16c:	e0bffa17 	ldw	r2,-24(fp)
 200a170:	1880311e 	bne	r3,r2,200a238 <_free_r+0x14c>
  {
    sz += nextsz;
 200a174:	e0fff517 	ldw	r3,-44(fp)
 200a178:	e0bffb17 	ldw	r2,-20(fp)
 200a17c:	1885883a 	add	r2,r3,r2
 200a180:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200a184:	e0bff917 	ldw	r2,-28(fp)
 200a188:	1080004c 	andi	r2,r2,1
 200a18c:	1000181e 	bne	r2,zero,200a1f0 <_free_r+0x104>
    {
      prevsz = p->prev_size;
 200a190:	e0bff417 	ldw	r2,-48(fp)
 200a194:	10800017 	ldw	r2,0(r2)
 200a198:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
 200a19c:	e0bffc17 	ldw	r2,-16(fp)
 200a1a0:	0085c83a 	sub	r2,zero,r2
 200a1a4:	e0fff417 	ldw	r3,-48(fp)
 200a1a8:	1885883a 	add	r2,r3,r2
 200a1ac:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
 200a1b0:	e0fff517 	ldw	r3,-44(fp)
 200a1b4:	e0bffc17 	ldw	r2,-16(fp)
 200a1b8:	1885883a 	add	r2,r3,r2
 200a1bc:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
 200a1c0:	e0bff417 	ldw	r2,-48(fp)
 200a1c4:	10800317 	ldw	r2,12(r2)
 200a1c8:	e0bff615 	stw	r2,-40(fp)
 200a1cc:	e0bff417 	ldw	r2,-48(fp)
 200a1d0:	10800217 	ldw	r2,8(r2)
 200a1d4:	e0bff715 	stw	r2,-36(fp)
 200a1d8:	e0bff717 	ldw	r2,-36(fp)
 200a1dc:	e0fff617 	ldw	r3,-40(fp)
 200a1e0:	10c00315 	stw	r3,12(r2)
 200a1e4:	e0bff617 	ldw	r2,-40(fp)
 200a1e8:	e0fff717 	ldw	r3,-36(fp)
 200a1ec:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 200a1f0:	e0bff517 	ldw	r2,-44(fp)
 200a1f4:	10c00054 	ori	r3,r2,1
 200a1f8:	e0bff417 	ldw	r2,-48(fp)
 200a1fc:	10c00115 	stw	r3,4(r2)
    top = p;
 200a200:	008080b4 	movhi	r2,514
 200a204:	10bc9504 	addi	r2,r2,-3500
 200a208:	e0fff417 	ldw	r3,-48(fp)
 200a20c:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 200a210:	d0a00317 	ldw	r2,-32756(gp)
 200a214:	e0fff517 	ldw	r3,-44(fp)
 200a218:	18800436 	bltu	r3,r2,200a22c <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 200a21c:	d0a72b17 	ldw	r2,-25428(gp)
 200a220:	100b883a 	mov	r5,r2
 200a224:	e13ffe17 	ldw	r4,-8(fp)
 200a228:	200a64c0 	call	200a64c <_malloc_trim_r>
    MALLOC_UNLOCK;
 200a22c:	e13ffe17 	ldw	r4,-8(fp)
 200a230:	2013ce00 	call	2013ce0 <__malloc_unlock>
    return;
 200a234:	00010006 	br	200a638 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 200a238:	e0bffa17 	ldw	r2,-24(fp)
 200a23c:	e0fffb17 	ldw	r3,-20(fp)
 200a240:	10c00115 	stw	r3,4(r2)

  islr = 0;
 200a244:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 200a248:	e0bff917 	ldw	r2,-28(fp)
 200a24c:	1080004c 	andi	r2,r2,1
 200a250:	1000201e 	bne	r2,zero,200a2d4 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 200a254:	e0bff417 	ldw	r2,-48(fp)
 200a258:	10800017 	ldw	r2,0(r2)
 200a25c:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
 200a260:	e0bffc17 	ldw	r2,-16(fp)
 200a264:	0085c83a 	sub	r2,zero,r2
 200a268:	e0fff417 	ldw	r3,-48(fp)
 200a26c:	1885883a 	add	r2,r3,r2
 200a270:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
 200a274:	e0fff517 	ldw	r3,-44(fp)
 200a278:	e0bffc17 	ldw	r2,-16(fp)
 200a27c:	1885883a 	add	r2,r3,r2
 200a280:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 200a284:	e0bff417 	ldw	r2,-48(fp)
 200a288:	10c00217 	ldw	r3,8(r2)
 200a28c:	008080b4 	movhi	r2,514
 200a290:	10bc9704 	addi	r2,r2,-3492
 200a294:	1880031e 	bne	r3,r2,200a2a4 <_free_r+0x1b8>
      islr = 1;
 200a298:	00800044 	movi	r2,1
 200a29c:	e0bff815 	stw	r2,-32(fp)
 200a2a0:	00000c06 	br	200a2d4 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 200a2a4:	e0bff417 	ldw	r2,-48(fp)
 200a2a8:	10800317 	ldw	r2,12(r2)
 200a2ac:	e0bff615 	stw	r2,-40(fp)
 200a2b0:	e0bff417 	ldw	r2,-48(fp)
 200a2b4:	10800217 	ldw	r2,8(r2)
 200a2b8:	e0bff715 	stw	r2,-36(fp)
 200a2bc:	e0bff717 	ldw	r2,-36(fp)
 200a2c0:	e0fff617 	ldw	r3,-40(fp)
 200a2c4:	10c00315 	stw	r3,12(r2)
 200a2c8:	e0bff617 	ldw	r2,-40(fp)
 200a2cc:	e0fff717 	ldw	r3,-36(fp)
 200a2d0:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 200a2d4:	e0fffa17 	ldw	r3,-24(fp)
 200a2d8:	e0bffb17 	ldw	r2,-20(fp)
 200a2dc:	1885883a 	add	r2,r3,r2
 200a2e0:	10800117 	ldw	r2,4(r2)
 200a2e4:	1080004c 	andi	r2,r2,1
 200a2e8:	10002a1e 	bne	r2,zero,200a394 <_free_r+0x2a8>
  {
    sz += nextsz;
 200a2ec:	e0fff517 	ldw	r3,-44(fp)
 200a2f0:	e0bffb17 	ldw	r2,-20(fp)
 200a2f4:	1885883a 	add	r2,r3,r2
 200a2f8:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 200a2fc:	e0bff817 	ldw	r2,-32(fp)
 200a300:	1000181e 	bne	r2,zero,200a364 <_free_r+0x278>
 200a304:	e0bffa17 	ldw	r2,-24(fp)
 200a308:	10c00217 	ldw	r3,8(r2)
 200a30c:	008080b4 	movhi	r2,514
 200a310:	10bc9704 	addi	r2,r2,-3492
 200a314:	1880131e 	bne	r3,r2,200a364 <_free_r+0x278>
    {
      islr = 1;
 200a318:	00800044 	movi	r2,1
 200a31c:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
 200a320:	00c080b4 	movhi	r3,514
 200a324:	18fc9704 	addi	r3,r3,-3492
 200a328:	008080b4 	movhi	r2,514
 200a32c:	10bc9704 	addi	r2,r2,-3492
 200a330:	e13ff417 	ldw	r4,-48(fp)
 200a334:	11000315 	stw	r4,12(r2)
 200a338:	10800317 	ldw	r2,12(r2)
 200a33c:	18800215 	stw	r2,8(r3)
 200a340:	008080b4 	movhi	r2,514
 200a344:	10bc9704 	addi	r2,r2,-3492
 200a348:	e0fff417 	ldw	r3,-48(fp)
 200a34c:	18800315 	stw	r2,12(r3)
 200a350:	e0bff417 	ldw	r2,-48(fp)
 200a354:	10c00317 	ldw	r3,12(r2)
 200a358:	e0bff417 	ldw	r2,-48(fp)
 200a35c:	10c00215 	stw	r3,8(r2)
 200a360:	00000c06 	br	200a394 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 200a364:	e0bffa17 	ldw	r2,-24(fp)
 200a368:	10800317 	ldw	r2,12(r2)
 200a36c:	e0bff615 	stw	r2,-40(fp)
 200a370:	e0bffa17 	ldw	r2,-24(fp)
 200a374:	10800217 	ldw	r2,8(r2)
 200a378:	e0bff715 	stw	r2,-36(fp)
 200a37c:	e0bff717 	ldw	r2,-36(fp)
 200a380:	e0fff617 	ldw	r3,-40(fp)
 200a384:	10c00315 	stw	r3,12(r2)
 200a388:	e0bff617 	ldw	r2,-40(fp)
 200a38c:	e0fff717 	ldw	r3,-36(fp)
 200a390:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 200a394:	e0bff517 	ldw	r2,-44(fp)
 200a398:	10c00054 	ori	r3,r2,1
 200a39c:	e0bff417 	ldw	r2,-48(fp)
 200a3a0:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 200a3a4:	e0fff417 	ldw	r3,-48(fp)
 200a3a8:	e0bff517 	ldw	r2,-44(fp)
 200a3ac:	1885883a 	add	r2,r3,r2
 200a3b0:	e0fff517 	ldw	r3,-44(fp)
 200a3b4:	10c00015 	stw	r3,0(r2)
  if (!islr)
 200a3b8:	e0bff817 	ldw	r2,-32(fp)
 200a3bc:	10009a1e 	bne	r2,zero,200a628 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
 200a3c0:	e0bff517 	ldw	r2,-44(fp)
 200a3c4:	10808028 	cmpgeui	r2,r2,512
 200a3c8:	10002c1e 	bne	r2,zero,200a47c <_free_r+0x390>
 200a3cc:	e0bff517 	ldw	r2,-44(fp)
 200a3d0:	1004d0fa 	srli	r2,r2,3
 200a3d4:	e0bffd15 	stw	r2,-12(fp)
 200a3d8:	00c080b4 	movhi	r3,514
 200a3dc:	18fc9504 	addi	r3,r3,-3500
 200a3e0:	008080b4 	movhi	r2,514
 200a3e4:	10bc9504 	addi	r2,r2,-3500
 200a3e8:	11000117 	ldw	r4,4(r2)
 200a3ec:	e0bffd17 	ldw	r2,-12(fp)
 200a3f0:	1000010e 	bge	r2,zero,200a3f8 <_free_r+0x30c>
 200a3f4:	108000c4 	addi	r2,r2,3
 200a3f8:	1005d0ba 	srai	r2,r2,2
 200a3fc:	100b883a 	mov	r5,r2
 200a400:	00800044 	movi	r2,1
 200a404:	1144983a 	sll	r2,r2,r5
 200a408:	2084b03a 	or	r2,r4,r2
 200a40c:	18800115 	stw	r2,4(r3)
 200a410:	e0bffd17 	ldw	r2,-12(fp)
 200a414:	10800044 	addi	r2,r2,1
 200a418:	1085883a 	add	r2,r2,r2
 200a41c:	1085883a 	add	r2,r2,r2
 200a420:	1087883a 	add	r3,r2,r2
 200a424:	008080b4 	movhi	r2,514
 200a428:	10bc9504 	addi	r2,r2,-3500
 200a42c:	1885883a 	add	r2,r3,r2
 200a430:	10bffe04 	addi	r2,r2,-8
 200a434:	e0bff615 	stw	r2,-40(fp)
 200a438:	e0bff617 	ldw	r2,-40(fp)
 200a43c:	10800217 	ldw	r2,8(r2)
 200a440:	e0bff715 	stw	r2,-36(fp)
 200a444:	e0bff417 	ldw	r2,-48(fp)
 200a448:	e0fff617 	ldw	r3,-40(fp)
 200a44c:	10c00315 	stw	r3,12(r2)
 200a450:	e0bff417 	ldw	r2,-48(fp)
 200a454:	e0fff717 	ldw	r3,-36(fp)
 200a458:	10c00215 	stw	r3,8(r2)
 200a45c:	e0bff617 	ldw	r2,-40(fp)
 200a460:	e0fff417 	ldw	r3,-48(fp)
 200a464:	10c00215 	stw	r3,8(r2)
 200a468:	e0bff617 	ldw	r2,-40(fp)
 200a46c:	10c00217 	ldw	r3,8(r2)
 200a470:	e0bff717 	ldw	r2,-36(fp)
 200a474:	10c00315 	stw	r3,12(r2)
 200a478:	00006b06 	br	200a628 <_free_r+0x53c>
 200a47c:	e0bff517 	ldw	r2,-44(fp)
 200a480:	1004d27a 	srli	r2,r2,9
 200a484:	1000031e 	bne	r2,zero,200a494 <_free_r+0x3a8>
 200a488:	e0bff517 	ldw	r2,-44(fp)
 200a48c:	1004d0fa 	srli	r2,r2,3
 200a490:	00002906 	br	200a538 <_free_r+0x44c>
 200a494:	e0bff517 	ldw	r2,-44(fp)
 200a498:	1004d27a 	srli	r2,r2,9
 200a49c:	10800168 	cmpgeui	r2,r2,5
 200a4a0:	1000041e 	bne	r2,zero,200a4b4 <_free_r+0x3c8>
 200a4a4:	e0bff517 	ldw	r2,-44(fp)
 200a4a8:	1004d1ba 	srli	r2,r2,6
 200a4ac:	10800e04 	addi	r2,r2,56
 200a4b0:	00002106 	br	200a538 <_free_r+0x44c>
 200a4b4:	e0bff517 	ldw	r2,-44(fp)
 200a4b8:	1004d27a 	srli	r2,r2,9
 200a4bc:	10800568 	cmpgeui	r2,r2,21
 200a4c0:	1000041e 	bne	r2,zero,200a4d4 <_free_r+0x3e8>
 200a4c4:	e0bff517 	ldw	r2,-44(fp)
 200a4c8:	1004d27a 	srli	r2,r2,9
 200a4cc:	108016c4 	addi	r2,r2,91
 200a4d0:	00001906 	br	200a538 <_free_r+0x44c>
 200a4d4:	e0bff517 	ldw	r2,-44(fp)
 200a4d8:	1004d27a 	srli	r2,r2,9
 200a4dc:	10801568 	cmpgeui	r2,r2,85
 200a4e0:	1000041e 	bne	r2,zero,200a4f4 <_free_r+0x408>
 200a4e4:	e0bff517 	ldw	r2,-44(fp)
 200a4e8:	1004d33a 	srli	r2,r2,12
 200a4ec:	10801b84 	addi	r2,r2,110
 200a4f0:	00001106 	br	200a538 <_free_r+0x44c>
 200a4f4:	e0bff517 	ldw	r2,-44(fp)
 200a4f8:	1004d27a 	srli	r2,r2,9
 200a4fc:	10805568 	cmpgeui	r2,r2,341
 200a500:	1000041e 	bne	r2,zero,200a514 <_free_r+0x428>
 200a504:	e0bff517 	ldw	r2,-44(fp)
 200a508:	1004d3fa 	srli	r2,r2,15
 200a50c:	10801dc4 	addi	r2,r2,119
 200a510:	00000906 	br	200a538 <_free_r+0x44c>
 200a514:	e0bff517 	ldw	r2,-44(fp)
 200a518:	1004d27a 	srli	r2,r2,9
 200a51c:	10815568 	cmpgeui	r2,r2,1365
 200a520:	1000041e 	bne	r2,zero,200a534 <_free_r+0x448>
 200a524:	e0bff517 	ldw	r2,-44(fp)
 200a528:	1004d4ba 	srli	r2,r2,18
 200a52c:	10801f04 	addi	r2,r2,124
 200a530:	00000106 	br	200a538 <_free_r+0x44c>
 200a534:	00801f84 	movi	r2,126
 200a538:	e0bffd15 	stw	r2,-12(fp)
 200a53c:	e0bffd17 	ldw	r2,-12(fp)
 200a540:	10800044 	addi	r2,r2,1
 200a544:	1085883a 	add	r2,r2,r2
 200a548:	1085883a 	add	r2,r2,r2
 200a54c:	1087883a 	add	r3,r2,r2
 200a550:	008080b4 	movhi	r2,514
 200a554:	10bc9504 	addi	r2,r2,-3500
 200a558:	1885883a 	add	r2,r3,r2
 200a55c:	10bffe04 	addi	r2,r2,-8
 200a560:	e0bff615 	stw	r2,-40(fp)
 200a564:	e0bff617 	ldw	r2,-40(fp)
 200a568:	10800217 	ldw	r2,8(r2)
 200a56c:	e0bff715 	stw	r2,-36(fp)
 200a570:	e0fff717 	ldw	r3,-36(fp)
 200a574:	e0bff617 	ldw	r2,-40(fp)
 200a578:	1880121e 	bne	r3,r2,200a5c4 <_free_r+0x4d8>
 200a57c:	00c080b4 	movhi	r3,514
 200a580:	18fc9504 	addi	r3,r3,-3500
 200a584:	008080b4 	movhi	r2,514
 200a588:	10bc9504 	addi	r2,r2,-3500
 200a58c:	11000117 	ldw	r4,4(r2)
 200a590:	e0bffd17 	ldw	r2,-12(fp)
 200a594:	1000010e 	bge	r2,zero,200a59c <_free_r+0x4b0>
 200a598:	108000c4 	addi	r2,r2,3
 200a59c:	1005d0ba 	srai	r2,r2,2
 200a5a0:	100b883a 	mov	r5,r2
 200a5a4:	00800044 	movi	r2,1
 200a5a8:	1144983a 	sll	r2,r2,r5
 200a5ac:	2084b03a 	or	r2,r4,r2
 200a5b0:	18800115 	stw	r2,4(r3)
 200a5b4:	00000f06 	br	200a5f4 <_free_r+0x508>
 200a5b8:	e0bff717 	ldw	r2,-36(fp)
 200a5bc:	10800217 	ldw	r2,8(r2)
 200a5c0:	e0bff715 	stw	r2,-36(fp)
 200a5c4:	e0fff717 	ldw	r3,-36(fp)
 200a5c8:	e0bff617 	ldw	r2,-40(fp)
 200a5cc:	18800626 	beq	r3,r2,200a5e8 <_free_r+0x4fc>
 200a5d0:	e0bff717 	ldw	r2,-36(fp)
 200a5d4:	10c00117 	ldw	r3,4(r2)
 200a5d8:	00bfff04 	movi	r2,-4
 200a5dc:	1884703a 	and	r2,r3,r2
 200a5e0:	e0fff517 	ldw	r3,-44(fp)
 200a5e4:	18bff436 	bltu	r3,r2,200a5b8 <_free_r+0x4cc>
 200a5e8:	e0bff717 	ldw	r2,-36(fp)
 200a5ec:	10800317 	ldw	r2,12(r2)
 200a5f0:	e0bff615 	stw	r2,-40(fp)
 200a5f4:	e0bff417 	ldw	r2,-48(fp)
 200a5f8:	e0fff617 	ldw	r3,-40(fp)
 200a5fc:	10c00315 	stw	r3,12(r2)
 200a600:	e0bff417 	ldw	r2,-48(fp)
 200a604:	e0fff717 	ldw	r3,-36(fp)
 200a608:	10c00215 	stw	r3,8(r2)
 200a60c:	e0bff617 	ldw	r2,-40(fp)
 200a610:	e0fff417 	ldw	r3,-48(fp)
 200a614:	10c00215 	stw	r3,8(r2)
 200a618:	e0bff617 	ldw	r2,-40(fp)
 200a61c:	10c00217 	ldw	r3,8(r2)
 200a620:	e0bff717 	ldw	r2,-36(fp)
 200a624:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 200a628:	e13ffe17 	ldw	r4,-8(fp)
 200a62c:	2013ce00 	call	2013ce0 <__malloc_unlock>
 200a630:	00000106 	br	200a638 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
 200a634:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
 200a638:	e037883a 	mov	sp,fp
 200a63c:	dfc00117 	ldw	ra,4(sp)
 200a640:	df000017 	ldw	fp,0(sp)
 200a644:	dec00204 	addi	sp,sp,8
 200a648:	f800283a 	ret

0200a64c <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 200a64c:	defff704 	addi	sp,sp,-36
 200a650:	dfc00815 	stw	ra,32(sp)
 200a654:	df000715 	stw	fp,28(sp)
 200a658:	df000704 	addi	fp,sp,28
 200a65c:	e13ffe15 	stw	r4,-8(fp)
 200a660:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 200a664:	00840004 	movi	r2,4096
 200a668:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
 200a66c:	e13ffe17 	ldw	r4,-8(fp)
 200a670:	2013bc00 	call	2013bc0 <__malloc_lock>

  top_size = chunksize(top);
 200a674:	008080b4 	movhi	r2,514
 200a678:	10bc9504 	addi	r2,r2,-3500
 200a67c:	10800217 	ldw	r2,8(r2)
 200a680:	10800117 	ldw	r2,4(r2)
 200a684:	1007883a 	mov	r3,r2
 200a688:	00bfff04 	movi	r2,-4
 200a68c:	1884703a 	and	r2,r3,r2
 200a690:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 200a694:	e0fffa17 	ldw	r3,-24(fp)
 200a698:	e0bfff17 	ldw	r2,-4(fp)
 200a69c:	1887c83a 	sub	r3,r3,r2
 200a6a0:	e0bff917 	ldw	r2,-28(fp)
 200a6a4:	1885883a 	add	r2,r3,r2
 200a6a8:	10bffbc4 	addi	r2,r2,-17
 200a6ac:	e17ff917 	ldw	r5,-28(fp)
 200a6b0:	1009883a 	mov	r4,r2
 200a6b4:	2004a080 	call	2004a08 <__udivsi3>
 200a6b8:	10ffffc4 	addi	r3,r2,-1
 200a6bc:	e0bff917 	ldw	r2,-28(fp)
 200a6c0:	1885383a 	mul	r2,r3,r2
 200a6c4:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 200a6c8:	e0bff917 	ldw	r2,-28(fp)
 200a6cc:	e0fffb17 	ldw	r3,-20(fp)
 200a6d0:	1880040e 	bge	r3,r2,200a6e4 <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 200a6d4:	e13ffe17 	ldw	r4,-8(fp)
 200a6d8:	2013ce00 	call	2013ce0 <__malloc_unlock>
    return 0;
 200a6dc:	0005883a 	mov	r2,zero
 200a6e0:	00004806 	br	200a804 <_malloc_trim_r+0x1b8>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 200a6e4:	000b883a 	mov	r5,zero
 200a6e8:	e13ffe17 	ldw	r4,-8(fp)
 200a6ec:	200ecd40 	call	200ecd4 <_sbrk_r>
 200a6f0:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 200a6f4:	008080b4 	movhi	r2,514
 200a6f8:	10bc9504 	addi	r2,r2,-3500
 200a6fc:	10c00217 	ldw	r3,8(r2)
 200a700:	e0bffa17 	ldw	r2,-24(fp)
 200a704:	1887883a 	add	r3,r3,r2
 200a708:	e0bffc17 	ldw	r2,-16(fp)
 200a70c:	18800426 	beq	r3,r2,200a720 <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 200a710:	e13ffe17 	ldw	r4,-8(fp)
 200a714:	2013ce00 	call	2013ce0 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 200a718:	0005883a 	mov	r2,zero
 200a71c:	00003906 	br	200a804 <_malloc_trim_r+0x1b8>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 200a720:	e0bffb17 	ldw	r2,-20(fp)
 200a724:	0085c83a 	sub	r2,zero,r2
 200a728:	100b883a 	mov	r5,r2
 200a72c:	e13ffe17 	ldw	r4,-8(fp)
 200a730:	200ecd40 	call	200ecd4 <_sbrk_r>
 200a734:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 200a738:	e0bffd17 	ldw	r2,-12(fp)
 200a73c:	10bfffd8 	cmpnei	r2,r2,-1
 200a740:	10001d1e 	bne	r2,zero,200a7b8 <_malloc_trim_r+0x16c>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 200a744:	000b883a 	mov	r5,zero
 200a748:	e13ffe17 	ldw	r4,-8(fp)
 200a74c:	200ecd40 	call	200ecd4 <_sbrk_r>
 200a750:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 200a754:	e0fffc17 	ldw	r3,-16(fp)
 200a758:	008080b4 	movhi	r2,514
 200a75c:	10bc9504 	addi	r2,r2,-3500
 200a760:	10800217 	ldw	r2,8(r2)
 200a764:	1885c83a 	sub	r2,r3,r2
 200a768:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 200a76c:	e0bffa17 	ldw	r2,-24(fp)
 200a770:	10800410 	cmplti	r2,r2,16
 200a774:	10000c1e 	bne	r2,zero,200a7a8 <_malloc_trim_r+0x15c>
        {
          sbrked_mem = current_brk - sbrk_base;
 200a778:	e0bffc17 	ldw	r2,-16(fp)
 200a77c:	d0e00417 	ldw	r3,-32752(gp)
 200a780:	10c7c83a 	sub	r3,r2,r3
 200a784:	008080b4 	movhi	r2,514
 200a788:	10896c04 	addi	r2,r2,9648
 200a78c:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
 200a790:	008080b4 	movhi	r2,514
 200a794:	10bc9504 	addi	r2,r2,-3500
 200a798:	10800217 	ldw	r2,8(r2)
 200a79c:	e0fffa17 	ldw	r3,-24(fp)
 200a7a0:	18c00054 	ori	r3,r3,1
 200a7a4:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 200a7a8:	e13ffe17 	ldw	r4,-8(fp)
 200a7ac:	2013ce00 	call	2013ce0 <__malloc_unlock>
        return 0; 
 200a7b0:	0005883a 	mov	r2,zero
 200a7b4:	00001306 	br	200a804 <_malloc_trim_r+0x1b8>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 200a7b8:	008080b4 	movhi	r2,514
 200a7bc:	10bc9504 	addi	r2,r2,-3500
 200a7c0:	10800217 	ldw	r2,8(r2)
 200a7c4:	e13ffa17 	ldw	r4,-24(fp)
 200a7c8:	e0fffb17 	ldw	r3,-20(fp)
 200a7cc:	20c7c83a 	sub	r3,r4,r3
 200a7d0:	18c00054 	ori	r3,r3,1
 200a7d4:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 200a7d8:	008080b4 	movhi	r2,514
 200a7dc:	10896c04 	addi	r2,r2,9648
 200a7e0:	10c00017 	ldw	r3,0(r2)
 200a7e4:	e0bffb17 	ldw	r2,-20(fp)
 200a7e8:	1887c83a 	sub	r3,r3,r2
 200a7ec:	008080b4 	movhi	r2,514
 200a7f0:	10896c04 	addi	r2,r2,9648
 200a7f4:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 200a7f8:	e13ffe17 	ldw	r4,-8(fp)
 200a7fc:	2013ce00 	call	2013ce0 <__malloc_unlock>
        return 1;
 200a800:	00800044 	movi	r2,1
      }
    }
  }
}
 200a804:	e037883a 	mov	sp,fp
 200a808:	dfc00117 	ldw	ra,4(sp)
 200a80c:	df000017 	ldw	fp,0(sp)
 200a810:	dec00204 	addi	sp,sp,8
 200a814:	f800283a 	ret

0200a818 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
 200a818:	defff004 	addi	sp,sp,-64
 200a81c:	dfc00f15 	stw	ra,60(sp)
 200a820:	df000e15 	stw	fp,56(sp)
 200a824:	dd800d15 	stw	r22,52(sp)
 200a828:	dd400c15 	stw	r21,48(sp)
 200a82c:	dd000b15 	stw	r20,44(sp)
 200a830:	dcc00a15 	stw	r19,40(sp)
 200a834:	dc800915 	stw	r18,36(sp)
 200a838:	dc400815 	stw	r17,32(sp)
 200a83c:	dc000715 	stw	r16,28(sp)
 200a840:	df000e04 	addi	fp,sp,56
 200a844:	e13ff815 	stw	r4,-32(fp)
 200a848:	2821883a 	mov	r16,r5
 200a84c:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
 200a850:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 200a854:	ac800217 	ldw	r18,8(r21)
 200a858:	9000021e 	bne	r18,zero,200a864 <__sfvwrite_r+0x4c>
    return 0;
 200a85c:	0005883a 	mov	r2,zero
 200a860:	00015806 	br	200adc4 <__sfvwrite_r+0x5ac>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 200a864:	8080030b 	ldhu	r2,12(r16)
 200a868:	10bfffcc 	andi	r2,r2,65535
 200a86c:	1080020c 	andi	r2,r2,8
 200a870:	10000226 	beq	r2,zero,200a87c <__sfvwrite_r+0x64>
 200a874:	80800417 	ldw	r2,16(r16)
 200a878:	1000061e 	bne	r2,zero,200a894 <__sfvwrite_r+0x7c>
 200a87c:	800b883a 	mov	r5,r16
 200a880:	e13ff817 	ldw	r4,-32(fp)
 200a884:	200767c0 	call	200767c <__swsetup_r>
 200a888:	10000226 	beq	r2,zero,200a894 <__sfvwrite_r+0x7c>
    return EOF;
 200a88c:	00bfffc4 	movi	r2,-1
 200a890:	00014c06 	br	200adc4 <__sfvwrite_r+0x5ac>

  iov = uio->uio_iov;
 200a894:	ad000017 	ldw	r20,0(r21)
  len = 0;
 200a898:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 200a89c:	8080030b 	ldhu	r2,12(r16)
 200a8a0:	10bfffcc 	andi	r2,r2,65535
 200a8a4:	1080008c 	andi	r2,r2,2
 200a8a8:	10001f26 	beq	r2,zero,200a928 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 200a8ac:	00000306 	br	200a8bc <__sfvwrite_r+0xa4>
 200a8b0:	a4c00017 	ldw	r19,0(r20)
 200a8b4:	a4800117 	ldw	r18,4(r20)
 200a8b8:	a5000204 	addi	r20,r20,8
 200a8bc:	903ffc26 	beq	r18,zero,200a8b0 <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 200a8c0:	82000917 	ldw	r8,36(r16)
 200a8c4:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 200a8c8:	9005883a 	mov	r2,r18
 200a8cc:	00e00034 	movhi	r3,32768
 200a8d0:	18ff0004 	addi	r3,r3,-1024
 200a8d4:	1880022e 	bgeu	r3,r2,200a8e0 <__sfvwrite_r+0xc8>
 200a8d8:	00a00034 	movhi	r2,32768
 200a8dc:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
 200a8e0:	100f883a 	mov	r7,r2
 200a8e4:	980d883a 	mov	r6,r19
 200a8e8:	200b883a 	mov	r5,r4
 200a8ec:	e13ff817 	ldw	r4,-32(fp)
 200a8f0:	403ee83a 	callr	r8
 200a8f4:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
 200a8f8:	0441290e 	bge	zero,r17,200ada0 <__sfvwrite_r+0x588>
	    goto err;
	  p += w;
 200a8fc:	8805883a 	mov	r2,r17
 200a900:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200a904:	8805883a 	mov	r2,r17
 200a908:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200a90c:	a8800217 	ldw	r2,8(r21)
 200a910:	8807883a 	mov	r3,r17
 200a914:	10c5c83a 	sub	r2,r2,r3
 200a918:	a8800215 	stw	r2,8(r21)
 200a91c:	a8800217 	ldw	r2,8(r21)
 200a920:	103fe61e 	bne	r2,zero,200a8bc <__sfvwrite_r+0xa4>
 200a924:	00011c06 	br	200ad98 <__sfvwrite_r+0x580>
    }
  else if ((fp->_flags & __SLBF) == 0)
 200a928:	8080030b 	ldhu	r2,12(r16)
 200a92c:	10bfffcc 	andi	r2,r2,65535
 200a930:	1080004c 	andi	r2,r2,1
 200a934:	1000b51e 	bne	r2,zero,200ac0c <__sfvwrite_r+0x3f4>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 200a938:	00000306 	br	200a948 <__sfvwrite_r+0x130>
 200a93c:	a4c00017 	ldw	r19,0(r20)
 200a940:	a4800117 	ldw	r18,4(r20)
 200a944:	a5000204 	addi	r20,r20,8
 200a948:	903ffc26 	beq	r18,zero,200a93c <__sfvwrite_r+0x124>
	  w = fp->_w;
 200a94c:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 200a950:	8080030b 	ldhu	r2,12(r16)
 200a954:	10bfffcc 	andi	r2,r2,65535
 200a958:	1080800c 	andi	r2,r2,512
 200a95c:	10006b26 	beq	r2,zero,200ab0c <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 200a960:	8805883a 	mov	r2,r17
 200a964:	90805736 	bltu	r18,r2,200aac4 <__sfvwrite_r+0x2ac>
 200a968:	8080030b 	ldhu	r2,12(r16)
 200a96c:	10bfffcc 	andi	r2,r2,65535
 200a970:	1081200c 	andi	r2,r2,1152
 200a974:	10005326 	beq	r2,zero,200aac4 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 200a978:	80800017 	ldw	r2,0(r16)
 200a97c:	1007883a 	mov	r3,r2
 200a980:	80800417 	ldw	r2,16(r16)
 200a984:	1885c83a 	sub	r2,r3,r2
 200a988:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 200a98c:	80c00517 	ldw	r3,20(r16)
 200a990:	1805883a 	mov	r2,r3
 200a994:	1085883a 	add	r2,r2,r2
 200a998:	10c5883a 	add	r2,r2,r3
 200a99c:	1006d7fa 	srli	r3,r2,31
 200a9a0:	1885883a 	add	r2,r3,r2
 200a9a4:	1005d07a 	srai	r2,r2,1
 200a9a8:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 200a9ac:	e0bff617 	ldw	r2,-40(fp)
 200a9b0:	1485883a 	add	r2,r2,r18
 200a9b4:	10800044 	addi	r2,r2,1
 200a9b8:	e0fff517 	ldw	r3,-44(fp)
 200a9bc:	1880042e 	bgeu	r3,r2,200a9d0 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
 200a9c0:	e0bff617 	ldw	r2,-40(fp)
 200a9c4:	1485883a 	add	r2,r2,r18
 200a9c8:	10800044 	addi	r2,r2,1
 200a9cc:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 200a9d0:	8080030b 	ldhu	r2,12(r16)
 200a9d4:	10bfffcc 	andi	r2,r2,65535
 200a9d8:	1081000c 	andi	r2,r2,1024
 200a9dc:	10001726 	beq	r2,zero,200aa3c <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 200a9e0:	e0bff517 	ldw	r2,-44(fp)
 200a9e4:	100b883a 	mov	r5,r2
 200a9e8:	e13ff817 	ldw	r4,-32(fp)
 200a9ec:	200b72c0 	call	200b72c <_malloc_r>
 200a9f0:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
 200a9f4:	e0bff417 	ldw	r2,-48(fp)
 200a9f8:	1000041e 	bne	r2,zero,200aa0c <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
 200a9fc:	e0bff817 	ldw	r2,-32(fp)
 200aa00:	00c00304 	movi	r3,12
 200aa04:	10c00015 	stw	r3,0(r2)
			  goto err;
 200aa08:	0000ea06 	br	200adb4 <__sfvwrite_r+0x59c>
			}
		      memcpy (str, fp->_bf._base, curpos);
 200aa0c:	80800417 	ldw	r2,16(r16)
 200aa10:	e0fff617 	ldw	r3,-40(fp)
 200aa14:	180d883a 	mov	r6,r3
 200aa18:	100b883a 	mov	r5,r2
 200aa1c:	e13ff417 	ldw	r4,-48(fp)
 200aa20:	2004ac40 	call	2004ac4 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 200aa24:	80c0030b 	ldhu	r3,12(r16)
 200aa28:	00bedfc4 	movi	r2,-1153
 200aa2c:	1884703a 	and	r2,r3,r2
 200aa30:	10802014 	ori	r2,r2,128
 200aa34:	8080030d 	sth	r2,12(r16)
 200aa38:	00001506 	br	200aa90 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 200aa3c:	80800417 	ldw	r2,16(r16)
 200aa40:	e0fff517 	ldw	r3,-44(fp)
 200aa44:	180d883a 	mov	r6,r3
 200aa48:	100b883a 	mov	r5,r2
 200aa4c:	e13ff817 	ldw	r4,-32(fp)
 200aa50:	200e0e40 	call	200e0e4 <_realloc_r>
 200aa54:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
 200aa58:	e0bff417 	ldw	r2,-48(fp)
 200aa5c:	10000c1e 	bne	r2,zero,200aa90 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 200aa60:	80800417 	ldw	r2,16(r16)
 200aa64:	100b883a 	mov	r5,r2
 200aa68:	e13ff817 	ldw	r4,-32(fp)
 200aa6c:	200a0ec0 	call	200a0ec <_free_r>
			  fp->_flags &=  ~__SMBF;
 200aa70:	80c0030b 	ldhu	r3,12(r16)
 200aa74:	00bfdfc4 	movi	r2,-129
 200aa78:	1884703a 	and	r2,r3,r2
 200aa7c:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 200aa80:	e0bff817 	ldw	r2,-32(fp)
 200aa84:	00c00304 	movi	r3,12
 200aa88:	10c00015 	stw	r3,0(r2)
			  goto err;
 200aa8c:	0000c906 	br	200adb4 <__sfvwrite_r+0x59c>
			}
		    }
		  fp->_bf._base = str;
 200aa90:	e0bff417 	ldw	r2,-48(fp)
 200aa94:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 200aa98:	e0bff617 	ldw	r2,-40(fp)
 200aa9c:	e0fff417 	ldw	r3,-48(fp)
 200aaa0:	1885883a 	add	r2,r3,r2
 200aaa4:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 200aaa8:	e0bff517 	ldw	r2,-44(fp)
 200aaac:	80800515 	stw	r2,20(r16)
		  w = len;
 200aab0:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 200aab4:	e0fff517 	ldw	r3,-44(fp)
 200aab8:	e0bff617 	ldw	r2,-40(fp)
 200aabc:	1885c83a 	sub	r2,r3,r2
 200aac0:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 200aac4:	8805883a 	mov	r2,r17
 200aac8:	9080012e 	bgeu	r18,r2,200aad0 <__sfvwrite_r+0x2b8>
		w = len;
 200aacc:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 200aad0:	80800017 	ldw	r2,0(r16)
 200aad4:	8807883a 	mov	r3,r17
 200aad8:	180d883a 	mov	r6,r3
 200aadc:	980b883a 	mov	r5,r19
 200aae0:	1009883a 	mov	r4,r2
 200aae4:	200c4640 	call	200c464 <memmove>
	      fp->_w -= w;
 200aae8:	80800217 	ldw	r2,8(r16)
 200aaec:	1445c83a 	sub	r2,r2,r17
 200aaf0:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200aaf4:	80800017 	ldw	r2,0(r16)
 200aaf8:	8807883a 	mov	r3,r17
 200aafc:	10c5883a 	add	r2,r2,r3
 200ab00:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 200ab04:	9023883a 	mov	r17,r18
 200ab08:	00003506 	br	200abe0 <__sfvwrite_r+0x3c8>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 200ab0c:	80800017 	ldw	r2,0(r16)
 200ab10:	80c00417 	ldw	r3,16(r16)
 200ab14:	18800236 	bltu	r3,r2,200ab20 <__sfvwrite_r+0x308>
 200ab18:	80800517 	ldw	r2,20(r16)
 200ab1c:	9080182e 	bgeu	r18,r2,200ab80 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 200ab20:	8805883a 	mov	r2,r17
 200ab24:	9080012e 	bgeu	r18,r2,200ab2c <__sfvwrite_r+0x314>
 200ab28:	9005883a 	mov	r2,r18
 200ab2c:	1023883a 	mov	r17,r2
	      COPY (w);
 200ab30:	80800017 	ldw	r2,0(r16)
 200ab34:	8807883a 	mov	r3,r17
 200ab38:	180d883a 	mov	r6,r3
 200ab3c:	980b883a 	mov	r5,r19
 200ab40:	1009883a 	mov	r4,r2
 200ab44:	200c4640 	call	200c464 <memmove>
	      fp->_w -= w;
 200ab48:	80800217 	ldw	r2,8(r16)
 200ab4c:	1445c83a 	sub	r2,r2,r17
 200ab50:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200ab54:	80800017 	ldw	r2,0(r16)
 200ab58:	8807883a 	mov	r3,r17
 200ab5c:	10c5883a 	add	r2,r2,r3
 200ab60:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200ab64:	80800217 	ldw	r2,8(r16)
 200ab68:	10001c1e 	bne	r2,zero,200abdc <__sfvwrite_r+0x3c4>
 200ab6c:	800b883a 	mov	r5,r16
 200ab70:	e13ff817 	ldw	r4,-32(fp)
 200ab74:	2009a4c0 	call	2009a4c <_fflush_r>
 200ab78:	10001826 	beq	r2,zero,200abdc <__sfvwrite_r+0x3c4>
		goto err;
 200ab7c:	00008d06 	br	200adb4 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 200ab80:	9005883a 	mov	r2,r18
 200ab84:	00e00034 	movhi	r3,32768
 200ab88:	10c00236 	bltu	r2,r3,200ab94 <__sfvwrite_r+0x37c>
 200ab8c:	00a00034 	movhi	r2,32768
 200ab90:	10bfffc4 	addi	r2,r2,-1
 200ab94:	1007883a 	mov	r3,r2
 200ab98:	80800517 	ldw	r2,20(r16)
 200ab9c:	100b883a 	mov	r5,r2
 200aba0:	1809883a 	mov	r4,r3
 200aba4:	20049100 	call	2004910 <__divsi3>
 200aba8:	1007883a 	mov	r3,r2
 200abac:	80800517 	ldw	r2,20(r16)
 200abb0:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200abb4:	80800917 	ldw	r2,36(r16)
 200abb8:	80c00717 	ldw	r3,28(r16)
 200abbc:	880f883a 	mov	r7,r17
 200abc0:	980d883a 	mov	r6,r19
 200abc4:	180b883a 	mov	r5,r3
 200abc8:	e13ff817 	ldw	r4,-32(fp)
 200abcc:	103ee83a 	callr	r2
 200abd0:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200abd4:	0440740e 	bge	zero,r17,200ada8 <__sfvwrite_r+0x590>
 200abd8:	00000106 	br	200abe0 <__sfvwrite_r+0x3c8>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 200abdc:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
 200abe0:	8805883a 	mov	r2,r17
 200abe4:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200abe8:	8805883a 	mov	r2,r17
 200abec:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200abf0:	a8800217 	ldw	r2,8(r21)
 200abf4:	8807883a 	mov	r3,r17
 200abf8:	10c5c83a 	sub	r2,r2,r3
 200abfc:	a8800215 	stw	r2,8(r21)
 200ac00:	a8800217 	ldw	r2,8(r21)
 200ac04:	103f501e 	bne	r2,zero,200a948 <__sfvwrite_r+0x130>
 200ac08:	00006306 	br	200ad98 <__sfvwrite_r+0x580>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 200ac0c:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
 200ac10:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
 200ac14:	00000406 	br	200ac28 <__sfvwrite_r+0x410>
 200ac18:	e03ff215 	stw	zero,-56(fp)
 200ac1c:	a4c00017 	ldw	r19,0(r20)
 200ac20:	a4800117 	ldw	r18,4(r20)
 200ac24:	a5000204 	addi	r20,r20,8
 200ac28:	903ffb26 	beq	r18,zero,200ac18 <__sfvwrite_r+0x400>
	  if (!nlknown)
 200ac2c:	e0bff217 	ldw	r2,-56(fp)
 200ac30:	1000111e 	bne	r2,zero,200ac78 <__sfvwrite_r+0x460>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
 200ac34:	900d883a 	mov	r6,r18
 200ac38:	01400284 	movi	r5,10
 200ac3c:	9809883a 	mov	r4,r19
 200ac40:	200c2a80 	call	200c2a8 <memchr>
 200ac44:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 200ac48:	e0bff717 	ldw	r2,-36(fp)
 200ac4c:	10000626 	beq	r2,zero,200ac68 <__sfvwrite_r+0x450>
 200ac50:	e0bff717 	ldw	r2,-36(fp)
 200ac54:	10800044 	addi	r2,r2,1
 200ac58:	1007883a 	mov	r3,r2
 200ac5c:	9805883a 	mov	r2,r19
 200ac60:	1885c83a 	sub	r2,r3,r2
 200ac64:	00000106 	br	200ac6c <__sfvwrite_r+0x454>
 200ac68:	90800044 	addi	r2,r18,1
 200ac6c:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
 200ac70:	00800044 	movi	r2,1
 200ac74:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
 200ac78:	e0bff317 	ldw	r2,-52(fp)
 200ac7c:	9080012e 	bgeu	r18,r2,200ac84 <__sfvwrite_r+0x46c>
 200ac80:	9005883a 	mov	r2,r18
 200ac84:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 200ac88:	80c00217 	ldw	r3,8(r16)
 200ac8c:	80800517 	ldw	r2,20(r16)
 200ac90:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 200ac94:	80800017 	ldw	r2,0(r16)
 200ac98:	80c00417 	ldw	r3,16(r16)
 200ac9c:	1880102e 	bgeu	r3,r2,200ace0 <__sfvwrite_r+0x4c8>
 200aca0:	8d800f0e 	bge	r17,r22,200ace0 <__sfvwrite_r+0x4c8>
	    {
	      COPY (w);
 200aca4:	80800017 	ldw	r2,0(r16)
 200aca8:	8807883a 	mov	r3,r17
 200acac:	180d883a 	mov	r6,r3
 200acb0:	980b883a 	mov	r5,r19
 200acb4:	1009883a 	mov	r4,r2
 200acb8:	200c4640 	call	200c464 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 200acbc:	80800017 	ldw	r2,0(r16)
 200acc0:	8807883a 	mov	r3,r17
 200acc4:	10c5883a 	add	r2,r2,r3
 200acc8:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 200accc:	800b883a 	mov	r5,r16
 200acd0:	e13ff817 	ldw	r4,-32(fp)
 200acd4:	2009a4c0 	call	2009a4c <_fflush_r>
 200acd8:	10001b26 	beq	r2,zero,200ad48 <__sfvwrite_r+0x530>
		goto err;
 200acdc:	00003506 	br	200adb4 <__sfvwrite_r+0x59c>
	    }
	  else if (s >= (w = fp->_bf._size))
 200ace0:	84400517 	ldw	r17,20(r16)
 200ace4:	b4400a16 	blt	r22,r17,200ad10 <__sfvwrite_r+0x4f8>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 200ace8:	80800917 	ldw	r2,36(r16)
 200acec:	80c00717 	ldw	r3,28(r16)
 200acf0:	880f883a 	mov	r7,r17
 200acf4:	980d883a 	mov	r6,r19
 200acf8:	180b883a 	mov	r5,r3
 200acfc:	e13ff817 	ldw	r4,-32(fp)
 200ad00:	103ee83a 	callr	r2
 200ad04:	1023883a 	mov	r17,r2
	      if (w <= 0)
 200ad08:	04400f16 	blt	zero,r17,200ad48 <__sfvwrite_r+0x530>
		goto err;
 200ad0c:	00002906 	br	200adb4 <__sfvwrite_r+0x59c>
	    }
	  else
	    {
	      w = s;
 200ad10:	b023883a 	mov	r17,r22
	      COPY (w);
 200ad14:	80800017 	ldw	r2,0(r16)
 200ad18:	8807883a 	mov	r3,r17
 200ad1c:	180d883a 	mov	r6,r3
 200ad20:	980b883a 	mov	r5,r19
 200ad24:	1009883a 	mov	r4,r2
 200ad28:	200c4640 	call	200c464 <memmove>
	      fp->_w -= w;
 200ad2c:	80800217 	ldw	r2,8(r16)
 200ad30:	1445c83a 	sub	r2,r2,r17
 200ad34:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 200ad38:	80800017 	ldw	r2,0(r16)
 200ad3c:	8807883a 	mov	r3,r17
 200ad40:	10c5883a 	add	r2,r2,r3
 200ad44:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 200ad48:	e0bff317 	ldw	r2,-52(fp)
 200ad4c:	1445c83a 	sub	r2,r2,r17
 200ad50:	e0bff315 	stw	r2,-52(fp)
 200ad54:	e0bff317 	ldw	r2,-52(fp)
 200ad58:	1000051e 	bne	r2,zero,200ad70 <__sfvwrite_r+0x558>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 200ad5c:	800b883a 	mov	r5,r16
 200ad60:	e13ff817 	ldw	r4,-32(fp)
 200ad64:	2009a4c0 	call	2009a4c <_fflush_r>
 200ad68:	1000111e 	bne	r2,zero,200adb0 <__sfvwrite_r+0x598>
		goto err;
	      nlknown = 0;
 200ad6c:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
 200ad70:	8805883a 	mov	r2,r17
 200ad74:	98a7883a 	add	r19,r19,r2
	  len -= w;
 200ad78:	8805883a 	mov	r2,r17
 200ad7c:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 200ad80:	a8800217 	ldw	r2,8(r21)
 200ad84:	8807883a 	mov	r3,r17
 200ad88:	10c5c83a 	sub	r2,r2,r3
 200ad8c:	a8800215 	stw	r2,8(r21)
 200ad90:	a8800217 	ldw	r2,8(r21)
 200ad94:	103fa41e 	bne	r2,zero,200ac28 <__sfvwrite_r+0x410>
    }
  return 0;
 200ad98:	0005883a 	mov	r2,zero
 200ad9c:	00000906 	br	200adc4 <__sfvwrite_r+0x5ac>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
 200ada0:	0001883a 	nop
 200ada4:	00000306 	br	200adb4 <__sfvwrite_r+0x59c>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
 200ada8:	0001883a 	nop
 200adac:	00000106 	br	200adb4 <__sfvwrite_r+0x59c>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
 200adb0:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
 200adb4:	8080030b 	ldhu	r2,12(r16)
 200adb8:	10801014 	ori	r2,r2,64
 200adbc:	8080030d 	sth	r2,12(r16)
  return EOF;
 200adc0:	00bfffc4 	movi	r2,-1
}
 200adc4:	e6fff904 	addi	sp,fp,-28
 200adc8:	dfc00817 	ldw	ra,32(sp)
 200adcc:	df000717 	ldw	fp,28(sp)
 200add0:	dd800617 	ldw	r22,24(sp)
 200add4:	dd400517 	ldw	r21,20(sp)
 200add8:	dd000417 	ldw	r20,16(sp)
 200addc:	dcc00317 	ldw	r19,12(sp)
 200ade0:	dc800217 	ldw	r18,8(sp)
 200ade4:	dc400117 	ldw	r17,4(sp)
 200ade8:	dc000017 	ldw	r16,0(sp)
 200adec:	dec00904 	addi	sp,sp,36
 200adf0:	f800283a 	ret

0200adf4 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
 200adf4:	defff804 	addi	sp,sp,-32
 200adf8:	dfc00715 	stw	ra,28(sp)
 200adfc:	df000615 	stw	fp,24(sp)
 200ae00:	dd000515 	stw	r20,20(sp)
 200ae04:	dcc00415 	stw	r19,16(sp)
 200ae08:	dc800315 	stw	r18,12(sp)
 200ae0c:	dc400215 	stw	r17,8(sp)
 200ae10:	dc000115 	stw	r16,4(sp)
 200ae14:	df000604 	addi	fp,sp,24
 200ae18:	e13ffa15 	stw	r4,-24(fp)
 200ae1c:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200ae20:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200ae24:	e0bffa17 	ldw	r2,-24(fp)
 200ae28:	1440b804 	addi	r17,r2,736
 200ae2c:	00001b06 	br	200ae9c <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200ae30:	8c000217 	ldw	r16,8(r17)
 200ae34:	8c800117 	ldw	r18,4(r17)
 200ae38:	00001506 	br	200ae90 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200ae3c:	8080030b 	ldhu	r2,12(r16)
 200ae40:	10bfffcc 	andi	r2,r2,65535
 200ae44:	10a0001c 	xori	r2,r2,32768
 200ae48:	10a00004 	addi	r2,r2,-32768
 200ae4c:	10000f26 	beq	r2,zero,200ae8c <_fwalk+0x98>
 200ae50:	8080030b 	ldhu	r2,12(r16)
 200ae54:	10bfffcc 	andi	r2,r2,65535
 200ae58:	10a0001c 	xori	r2,r2,32768
 200ae5c:	10a00004 	addi	r2,r2,-32768
 200ae60:	10800060 	cmpeqi	r2,r2,1
 200ae64:	1000091e 	bne	r2,zero,200ae8c <_fwalk+0x98>
 200ae68:	8080038b 	ldhu	r2,14(r16)
 200ae6c:	10bfffcc 	andi	r2,r2,65535
 200ae70:	10a0001c 	xori	r2,r2,32768
 200ae74:	10a00004 	addi	r2,r2,-32768
 200ae78:	10bfffe0 	cmpeqi	r2,r2,-1
 200ae7c:	1000031e 	bne	r2,zero,200ae8c <_fwalk+0x98>
	ret |= (*function) (fp);
 200ae80:	8009883a 	mov	r4,r16
 200ae84:	a03ee83a 	callr	r20
 200ae88:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200ae8c:	84001a04 	addi	r16,r16,104
 200ae90:	94bfffc4 	addi	r18,r18,-1
 200ae94:	903fe90e 	bge	r18,zero,200ae3c <_fwalk+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200ae98:	8c400017 	ldw	r17,0(r17)
 200ae9c:	883fe41e 	bne	r17,zero,200ae30 <_fwalk+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
 200aea0:	9805883a 	mov	r2,r19
}
 200aea4:	e6fffb04 	addi	sp,fp,-20
 200aea8:	dfc00617 	ldw	ra,24(sp)
 200aeac:	df000517 	ldw	fp,20(sp)
 200aeb0:	dd000417 	ldw	r20,16(sp)
 200aeb4:	dcc00317 	ldw	r19,12(sp)
 200aeb8:	dc800217 	ldw	r18,8(sp)
 200aebc:	dc400117 	ldw	r17,4(sp)
 200aec0:	dc000017 	ldw	r16,0(sp)
 200aec4:	dec00704 	addi	sp,sp,28
 200aec8:	f800283a 	ret

0200aecc <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
 200aecc:	defff804 	addi	sp,sp,-32
 200aed0:	dfc00715 	stw	ra,28(sp)
 200aed4:	df000615 	stw	fp,24(sp)
 200aed8:	dd000515 	stw	r20,20(sp)
 200aedc:	dcc00415 	stw	r19,16(sp)
 200aee0:	dc800315 	stw	r18,12(sp)
 200aee4:	dc400215 	stw	r17,8(sp)
 200aee8:	dc000115 	stw	r16,4(sp)
 200aeec:	df000604 	addi	fp,sp,24
 200aef0:	e13ffa15 	stw	r4,-24(fp)
 200aef4:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 200aef8:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200aefc:	e0bffa17 	ldw	r2,-24(fp)
 200af00:	1440b804 	addi	r17,r2,736
 200af04:	00001c06 	br	200af78 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200af08:	8c000217 	ldw	r16,8(r17)
 200af0c:	8c800117 	ldw	r18,4(r17)
 200af10:	00001606 	br	200af6c <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 200af14:	8080030b 	ldhu	r2,12(r16)
 200af18:	10bfffcc 	andi	r2,r2,65535
 200af1c:	10a0001c 	xori	r2,r2,32768
 200af20:	10a00004 	addi	r2,r2,-32768
 200af24:	10001026 	beq	r2,zero,200af68 <_fwalk_reent+0x9c>
 200af28:	8080030b 	ldhu	r2,12(r16)
 200af2c:	10bfffcc 	andi	r2,r2,65535
 200af30:	10a0001c 	xori	r2,r2,32768
 200af34:	10a00004 	addi	r2,r2,-32768
 200af38:	10800060 	cmpeqi	r2,r2,1
 200af3c:	10000a1e 	bne	r2,zero,200af68 <_fwalk_reent+0x9c>
 200af40:	8080038b 	ldhu	r2,14(r16)
 200af44:	10bfffcc 	andi	r2,r2,65535
 200af48:	10a0001c 	xori	r2,r2,32768
 200af4c:	10a00004 	addi	r2,r2,-32768
 200af50:	10bfffe0 	cmpeqi	r2,r2,-1
 200af54:	1000041e 	bne	r2,zero,200af68 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 200af58:	800b883a 	mov	r5,r16
 200af5c:	e13ffa17 	ldw	r4,-24(fp)
 200af60:	a03ee83a 	callr	r20
 200af64:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 200af68:	84001a04 	addi	r16,r16,104
 200af6c:	94bfffc4 	addi	r18,r18,-1
 200af70:	903fe80e 	bge	r18,zero,200af14 <_fwalk_reent+0x48>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 200af74:	8c400017 	ldw	r17,0(r17)
 200af78:	883fe31e 	bne	r17,zero,200af08 <_fwalk_reent+0x3c>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
 200af7c:	9805883a 	mov	r2,r19
}
 200af80:	e6fffb04 	addi	sp,fp,-20
 200af84:	dfc00617 	ldw	ra,24(sp)
 200af88:	df000517 	ldw	fp,20(sp)
 200af8c:	dd000417 	ldw	r20,16(sp)
 200af90:	dcc00317 	ldw	r19,12(sp)
 200af94:	dc800217 	ldw	r18,8(sp)
 200af98:	dc400117 	ldw	r17,4(sp)
 200af9c:	dc000017 	ldw	r16,0(sp)
 200afa0:	dec00704 	addi	sp,sp,28
 200afa4:	f800283a 	ret

0200afa8 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
 200afa8:	defffb04 	addi	sp,sp,-20
 200afac:	dfc00415 	stw	ra,16(sp)
 200afb0:	df000315 	stw	fp,12(sp)
 200afb4:	df000304 	addi	fp,sp,12
 200afb8:	e13ffd15 	stw	r4,-12(fp)
 200afbc:	e17ffe15 	stw	r5,-8(fp)
 200afc0:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
 200afc4:	e0bfff17 	ldw	r2,-4(fp)
 200afc8:	10001126 	beq	r2,zero,200b010 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 200afcc:	014080b4 	movhi	r5,514
 200afd0:	297aa704 	addi	r5,r5,-5476
 200afd4:	e13fff17 	ldw	r4,-4(fp)
 200afd8:	200efa80 	call	200efa8 <strcmp>
 200afdc:	10000c26 	beq	r2,zero,200b010 <_setlocale_r+0x68>
 200afe0:	014080b4 	movhi	r5,514
 200afe4:	297aa904 	addi	r5,r5,-5468
 200afe8:	e13fff17 	ldw	r4,-4(fp)
 200afec:	200efa80 	call	200efa8 <strcmp>
 200aff0:	10000726 	beq	r2,zero,200b010 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
 200aff4:	014080b4 	movhi	r5,514
 200aff8:	297aa604 	addi	r5,r5,-5480
 200affc:	e13fff17 	ldw	r4,-4(fp)
 200b000:	200efa80 	call	200efa8 <strcmp>
 200b004:	10000226 	beq	r2,zero,200b010 <_setlocale_r+0x68>
        return NULL;
 200b008:	0005883a 	mov	r2,zero
 200b00c:	00000206 	br	200b018 <_setlocale_r+0x70>
    }
  return "C";
 200b010:	008080b4 	movhi	r2,514
 200b014:	10baa904 	addi	r2,r2,-5468
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
 200b018:	e037883a 	mov	sp,fp
 200b01c:	dfc00117 	ldw	ra,4(sp)
 200b020:	df000017 	ldw	fp,0(sp)
 200b024:	dec00204 	addi	sp,sp,8
 200b028:	f800283a 	ret

0200b02c <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
 200b02c:	deffff04 	addi	sp,sp,-4
 200b030:	df000015 	stw	fp,0(sp)
 200b034:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
 200b038:	008080b4 	movhi	r2,514
 200b03c:	10bc8504 	addi	r2,r2,-3564
#endif
}
 200b040:	e037883a 	mov	sp,fp
 200b044:	df000017 	ldw	fp,0(sp)
 200b048:	dec00104 	addi	sp,sp,4
 200b04c:	f800283a 	ret

0200b050 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
 200b050:	deffff04 	addi	sp,sp,-4
 200b054:	df000015 	stw	fp,0(sp)
 200b058:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
 200b05c:	d0a00217 	ldw	r2,-32760(gp)
#endif
}
 200b060:	e037883a 	mov	sp,fp
 200b064:	df000017 	ldw	fp,0(sp)
 200b068:	dec00104 	addi	sp,sp,4
 200b06c:	f800283a 	ret

0200b070 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
 200b070:	deffff04 	addi	sp,sp,-4
 200b074:	df000015 	stw	fp,0(sp)
 200b078:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
 200b07c:	008080b4 	movhi	r2,514
 200b080:	10bc8d04 	addi	r2,r2,-3532
#endif
}
 200b084:	e037883a 	mov	sp,fp
 200b088:	df000017 	ldw	fp,0(sp)
 200b08c:	dec00104 	addi	sp,sp,4
 200b090:	f800283a 	ret

0200b094 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
 200b094:	deffff04 	addi	sp,sp,-4
 200b098:	df000015 	stw	fp,0(sp)
 200b09c:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
 200b0a0:	d0a72a17 	ldw	r2,-25432(gp)
}
 200b0a4:	e037883a 	mov	sp,fp
 200b0a8:	df000017 	ldw	fp,0(sp)
 200b0ac:	dec00104 	addi	sp,sp,4
 200b0b0:	f800283a 	ret

0200b0b4 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
 200b0b4:	defffe04 	addi	sp,sp,-8
 200b0b8:	df000115 	stw	fp,4(sp)
 200b0bc:	df000104 	addi	fp,sp,4
 200b0c0:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
 200b0c4:	008080b4 	movhi	r2,514
 200b0c8:	10bc7704 	addi	r2,r2,-3620
}
 200b0cc:	e037883a 	mov	sp,fp
 200b0d0:	df000017 	ldw	fp,0(sp)
 200b0d4:	dec00104 	addi	sp,sp,4
 200b0d8:	f800283a 	ret

0200b0dc <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
 200b0dc:	defffc04 	addi	sp,sp,-16
 200b0e0:	dfc00315 	stw	ra,12(sp)
 200b0e4:	df000215 	stw	fp,8(sp)
 200b0e8:	df000204 	addi	fp,sp,8
 200b0ec:	e13ffe15 	stw	r4,-8(fp)
 200b0f0:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
 200b0f4:	d0a00017 	ldw	r2,-32768(gp)
 200b0f8:	e1bfff17 	ldw	r6,-4(fp)
 200b0fc:	e17ffe17 	ldw	r5,-8(fp)
 200b100:	1009883a 	mov	r4,r2
 200b104:	200afa80 	call	200afa8 <_setlocale_r>
}
 200b108:	e037883a 	mov	sp,fp
 200b10c:	dfc00117 	ldw	ra,4(sp)
 200b110:	df000017 	ldw	fp,0(sp)
 200b114:	dec00204 	addi	sp,sp,8
 200b118:	f800283a 	ret

0200b11c <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
 200b11c:	defffe04 	addi	sp,sp,-8
 200b120:	dfc00115 	stw	ra,4(sp)
 200b124:	df000015 	stw	fp,0(sp)
 200b128:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
 200b12c:	d0a00017 	ldw	r2,-32768(gp)
 200b130:	1009883a 	mov	r4,r2
 200b134:	200b0b40 	call	200b0b4 <_localeconv_r>
}
 200b138:	e037883a 	mov	sp,fp
 200b13c:	dfc00117 	ldw	ra,4(sp)
 200b140:	df000017 	ldw	fp,0(sp)
 200b144:	dec00204 	addi	sp,sp,8
 200b148:	f800283a 	ret

0200b14c <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
 200b14c:	deffea04 	addi	sp,sp,-88
 200b150:	dfc01515 	stw	ra,84(sp)
 200b154:	df001415 	stw	fp,80(sp)
 200b158:	dcc01315 	stw	r19,76(sp)
 200b15c:	dc801215 	stw	r18,72(sp)
 200b160:	dc401115 	stw	r17,68(sp)
 200b164:	dc001015 	stw	r16,64(sp)
 200b168:	df001404 	addi	fp,sp,80
 200b16c:	e13ffb15 	stw	r4,-20(fp)
 200b170:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
 200b174:	8080030b 	ldhu	r2,12(r16)
 200b178:	10bfffcc 	andi	r2,r2,65535
 200b17c:	1080008c 	andi	r2,r2,2
 200b180:	10000726 	beq	r2,zero,200b1a0 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 200b184:	808010c4 	addi	r2,r16,67
 200b188:	80800015 	stw	r2,0(r16)
 200b18c:	80800017 	ldw	r2,0(r16)
 200b190:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 200b194:	00800044 	movi	r2,1
 200b198:	80800515 	stw	r2,20(r16)
 200b19c:	00006d06 	br	200b354 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 200b1a0:	8080038b 	ldhu	r2,14(r16)
 200b1a4:	10bfffcc 	andi	r2,r2,65535
 200b1a8:	10a0001c 	xori	r2,r2,32768
 200b1ac:	10a00004 	addi	r2,r2,-32768
 200b1b0:	10000916 	blt	r2,zero,200b1d8 <__smakebuf_r+0x8c>
 200b1b4:	8080038b 	ldhu	r2,14(r16)
 200b1b8:	10bfffcc 	andi	r2,r2,65535
 200b1bc:	10a0001c 	xori	r2,r2,32768
 200b1c0:	10a00004 	addi	r2,r2,-32768
 200b1c4:	e1bfec04 	addi	r6,fp,-80
 200b1c8:	100b883a 	mov	r5,r2
 200b1cc:	e13ffb17 	ldw	r4,-20(fp)
 200b1d0:	2010ca40 	call	2010ca4 <_fstat_r>
 200b1d4:	10000c0e 	bge	r2,zero,200b208 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
 200b1d8:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 200b1dc:	8080030b 	ldhu	r2,12(r16)
 200b1e0:	10bfffcc 	andi	r2,r2,65535
 200b1e4:	1080200c 	andi	r2,r2,128
 200b1e8:	10000226 	beq	r2,zero,200b1f4 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
 200b1ec:	04401004 	movi	r17,64
 200b1f0:	00000106 	br	200b1f8 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
 200b1f4:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
 200b1f8:	8080030b 	ldhu	r2,12(r16)
 200b1fc:	10820014 	ori	r2,r2,2048
 200b200:	8080030d 	sth	r2,12(r16)
 200b204:	00001606 	br	200b260 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
 200b208:	e0bfed17 	ldw	r2,-76(fp)
 200b20c:	10bc000c 	andi	r2,r2,61440
 200b210:	10880020 	cmpeqi	r2,r2,8192
 200b214:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
 200b218:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
 200b21c:	e0bfed17 	ldw	r2,-76(fp)
 200b220:	10fc000c 	andi	r3,r2,61440
 200b224:	00a00014 	movui	r2,32768
 200b228:	18800a1e 	bne	r3,r2,200b254 <__smakebuf_r+0x108>
 200b22c:	80c00a17 	ldw	r3,40(r16)
 200b230:	00808074 	movhi	r2,513
 200b234:	10bbad04 	addi	r2,r2,-4428
 200b238:	1880061e 	bne	r3,r2,200b254 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
 200b23c:	8080030b 	ldhu	r2,12(r16)
 200b240:	10810014 	ori	r2,r2,1024
 200b244:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
 200b248:	00810004 	movi	r2,1024
 200b24c:	80801315 	stw	r2,76(r16)
 200b250:	00000306 	br	200b260 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
 200b254:	8080030b 	ldhu	r2,12(r16)
 200b258:	10820014 	ori	r2,r2,2048
 200b25c:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
 200b260:	90001126 	beq	r18,zero,200b2a8 <__smakebuf_r+0x15c>
 200b264:	8080038b 	ldhu	r2,14(r16)
 200b268:	10bfffcc 	andi	r2,r2,65535
 200b26c:	10a0001c 	xori	r2,r2,32768
 200b270:	10a00004 	addi	r2,r2,-32768
 200b274:	100b883a 	mov	r5,r2
 200b278:	e13ffb17 	ldw	r4,-20(fp)
 200b27c:	2010d0c0 	call	2010d0c <_isatty_r>
 200b280:	10000926 	beq	r2,zero,200b2a8 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
 200b284:	8080030b 	ldhu	r2,12(r16)
 200b288:	10800054 	ori	r2,r2,1
 200b28c:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
 200b290:	808010c4 	addi	r2,r16,67
 200b294:	80800015 	stw	r2,0(r16)
 200b298:	80800017 	ldw	r2,0(r16)
 200b29c:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
 200b2a0:	00800044 	movi	r2,1
 200b2a4:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
 200b2a8:	880b883a 	mov	r5,r17
 200b2ac:	e13ffb17 	ldw	r4,-20(fp)
 200b2b0:	200b72c0 	call	200b72c <_malloc_r>
 200b2b4:	1027883a 	mov	r19,r2
 200b2b8:	98000e1e 	bne	r19,zero,200b2f4 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
 200b2bc:	8080030b 	ldhu	r2,12(r16)
 200b2c0:	10bfffcc 	andi	r2,r2,65535
 200b2c4:	1080800c 	andi	r2,r2,512
 200b2c8:	1000221e 	bne	r2,zero,200b354 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
 200b2cc:	8080030b 	ldhu	r2,12(r16)
 200b2d0:	10800094 	ori	r2,r2,2
 200b2d4:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 200b2d8:	808010c4 	addi	r2,r16,67
 200b2dc:	80800015 	stw	r2,0(r16)
 200b2e0:	80800017 	ldw	r2,0(r16)
 200b2e4:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 200b2e8:	00800044 	movi	r2,1
 200b2ec:	80800515 	stw	r2,20(r16)
 200b2f0:	00001806 	br	200b354 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 200b2f4:	e0fffb17 	ldw	r3,-20(fp)
 200b2f8:	00808074 	movhi	r2,513
 200b2fc:	10a79504 	addi	r2,r2,-25004
 200b300:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 200b304:	8080030b 	ldhu	r2,12(r16)
 200b308:	10802014 	ori	r2,r2,128
 200b30c:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 200b310:	84c00015 	stw	r19,0(r16)
 200b314:	80800017 	ldw	r2,0(r16)
 200b318:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 200b31c:	8805883a 	mov	r2,r17
 200b320:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 200b324:	90000b26 	beq	r18,zero,200b354 <__smakebuf_r+0x208>
 200b328:	8080038b 	ldhu	r2,14(r16)
 200b32c:	10bfffcc 	andi	r2,r2,65535
 200b330:	10a0001c 	xori	r2,r2,32768
 200b334:	10a00004 	addi	r2,r2,-32768
 200b338:	100b883a 	mov	r5,r2
 200b33c:	e13ffb17 	ldw	r4,-20(fp)
 200b340:	2010d0c0 	call	2010d0c <_isatty_r>
 200b344:	10000326 	beq	r2,zero,200b354 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
 200b348:	8080030b 	ldhu	r2,12(r16)
 200b34c:	10800054 	ori	r2,r2,1
 200b350:	8080030d 	sth	r2,12(r16)
    }
}
 200b354:	e6fffc04 	addi	sp,fp,-16
 200b358:	dfc00517 	ldw	ra,20(sp)
 200b35c:	df000417 	ldw	fp,16(sp)
 200b360:	dcc00317 	ldw	r19,12(sp)
 200b364:	dc800217 	ldw	r18,8(sp)
 200b368:	dc400117 	ldw	r17,4(sp)
 200b36c:	dc000017 	ldw	r16,0(sp)
 200b370:	dec00604 	addi	sp,sp,24
 200b374:	f800283a 	ret

0200b378 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
 200b378:	defff104 	addi	sp,sp,-60
 200b37c:	dfc00e15 	stw	ra,56(sp)
 200b380:	df000d15 	stw	fp,52(sp)
 200b384:	df000d04 	addi	fp,sp,52
 200b388:	e13ffe15 	stw	r4,-8(fp)
 200b38c:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
 200b390:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
 200b394:	008080b4 	movhi	r2,514
 200b398:	10bc9504 	addi	r2,r2,-3500
 200b39c:	10800217 	ldw	r2,8(r2)
 200b3a0:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 200b3a4:	e0bff817 	ldw	r2,-32(fp)
 200b3a8:	10c00117 	ldw	r3,4(r2)
 200b3ac:	00bfff04 	movi	r2,-4
 200b3b0:	1884703a 	and	r2,r3,r2
 200b3b4:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 200b3b8:	e0fff817 	ldw	r3,-32(fp)
 200b3bc:	e0bff917 	ldw	r2,-28(fp)
 200b3c0:	1885883a 	add	r2,r3,r2
 200b3c4:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 200b3c8:	d0e72b17 	ldw	r3,-25428(gp)
 200b3cc:	e0bfff17 	ldw	r2,-4(fp)
 200b3d0:	1885883a 	add	r2,r3,r2
 200b3d4:	10800404 	addi	r2,r2,16
 200b3d8:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
 200b3dc:	00840004 	movi	r2,4096
 200b3e0:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
 200b3e4:	d0a00417 	ldw	r2,-32752(gp)
 200b3e8:	10bfffe0 	cmpeqi	r2,r2,-1
 200b3ec:	1000081e 	bne	r2,zero,200b410 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 200b3f0:	e0fffb17 	ldw	r3,-20(fp)
 200b3f4:	e0bff617 	ldw	r2,-40(fp)
 200b3f8:	1885883a 	add	r2,r3,r2
 200b3fc:	10ffffc4 	addi	r3,r2,-1
 200b400:	e0bffb17 	ldw	r2,-20(fp)
 200b404:	0085c83a 	sub	r2,zero,r2
 200b408:	1884703a 	and	r2,r3,r2
 200b40c:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
 200b410:	e0bff617 	ldw	r2,-40(fp)
 200b414:	100b883a 	mov	r5,r2
 200b418:	e13ffe17 	ldw	r4,-8(fp)
 200b41c:	200ecd40 	call	200ecd4 <_sbrk_r>
 200b420:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
 200b424:	e0bff317 	ldw	r2,-52(fp)
 200b428:	10bfffe0 	cmpeqi	r2,r2,-1
 200b42c:	1000b91e 	bne	r2,zero,200b714 <malloc_extend_top+0x39c>
 200b430:	e0fff317 	ldw	r3,-52(fp)
 200b434:	e0bffa17 	ldw	r2,-24(fp)
 200b438:	1880042e 	bgeu	r3,r2,200b44c <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 200b43c:	008080b4 	movhi	r2,514
 200b440:	10bc9504 	addi	r2,r2,-3500
 200b444:	e0fff817 	ldw	r3,-32(fp)
 200b448:	1880b21e 	bne	r3,r2,200b714 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
 200b44c:	008080b4 	movhi	r2,514
 200b450:	10896c04 	addi	r2,r2,9648
 200b454:	10800017 	ldw	r2,0(r2)
 200b458:	1007883a 	mov	r3,r2
 200b45c:	e0bff617 	ldw	r2,-40(fp)
 200b460:	1885883a 	add	r2,r3,r2
 200b464:	1007883a 	mov	r3,r2
 200b468:	008080b4 	movhi	r2,514
 200b46c:	10896c04 	addi	r2,r2,9648
 200b470:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
 200b474:	e0fff317 	ldw	r3,-52(fp)
 200b478:	e0bffa17 	ldw	r2,-24(fp)
 200b47c:	1880101e 	bne	r3,r2,200b4c0 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 200b480:	e0bffb17 	ldw	r2,-20(fp)
 200b484:	10ffffc4 	addi	r3,r2,-1
 200b488:	e0bffa17 	ldw	r2,-24(fp)
 200b48c:	1884703a 	and	r2,r3,r2
 200b490:	10000b1e 	bne	r2,zero,200b4c0 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
 200b494:	e0fff617 	ldw	r3,-40(fp)
 200b498:	e0bff917 	ldw	r2,-28(fp)
 200b49c:	1885883a 	add	r2,r3,r2
 200b4a0:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200b4a4:	008080b4 	movhi	r2,514
 200b4a8:	10bc9504 	addi	r2,r2,-3500
 200b4ac:	10800217 	ldw	r2,8(r2)
 200b4b0:	e0fffc17 	ldw	r3,-16(fp)
 200b4b4:	18c00054 	ori	r3,r3,1
 200b4b8:	10c00115 	stw	r3,4(r2)
 200b4bc:	00008006 	br	200b6c0 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 200b4c0:	d0a00417 	ldw	r2,-32752(gp)
 200b4c4:	10bfffd8 	cmpnei	r2,r2,-1
 200b4c8:	1000031e 	bne	r2,zero,200b4d8 <malloc_extend_top+0x160>
      sbrk_base = brk;
 200b4cc:	e0bff317 	ldw	r2,-52(fp)
 200b4d0:	d0a00415 	stw	r2,-32752(gp)
 200b4d4:	00000a06 	br	200b500 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
 200b4d8:	008080b4 	movhi	r2,514
 200b4dc:	10896c04 	addi	r2,r2,9648
 200b4e0:	10c00017 	ldw	r3,0(r2)
 200b4e4:	e13ff317 	ldw	r4,-52(fp)
 200b4e8:	e0bffa17 	ldw	r2,-24(fp)
 200b4ec:	2085c83a 	sub	r2,r4,r2
 200b4f0:	1887883a 	add	r3,r3,r2
 200b4f4:	008080b4 	movhi	r2,514
 200b4f8:	10896c04 	addi	r2,r2,9648
 200b4fc:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 200b500:	e0bff317 	ldw	r2,-52(fp)
 200b504:	10800204 	addi	r2,r2,8
 200b508:	108001cc 	andi	r2,r2,7
 200b50c:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
 200b510:	e0bffd17 	ldw	r2,-12(fp)
 200b514:	10000926 	beq	r2,zero,200b53c <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 200b518:	00c00204 	movi	r3,8
 200b51c:	e0bffd17 	ldw	r2,-12(fp)
 200b520:	1885c83a 	sub	r2,r3,r2
 200b524:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
 200b528:	e0fff317 	ldw	r3,-52(fp)
 200b52c:	e0bff417 	ldw	r2,-48(fp)
 200b530:	1885883a 	add	r2,r3,r2
 200b534:	e0bff315 	stw	r2,-52(fp)
 200b538:	00000106 	br	200b540 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
 200b53c:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 200b540:	e0fff317 	ldw	r3,-52(fp)
 200b544:	e0bff617 	ldw	r2,-40(fp)
 200b548:	1885883a 	add	r2,r3,r2
 200b54c:	1007883a 	mov	r3,r2
 200b550:	e0bffb17 	ldw	r2,-20(fp)
 200b554:	10bfffc4 	addi	r2,r2,-1
 200b558:	1884703a 	and	r2,r3,r2
 200b55c:	e0fffb17 	ldw	r3,-20(fp)
 200b560:	1885c83a 	sub	r2,r3,r2
 200b564:	e0fff417 	ldw	r3,-48(fp)
 200b568:	1885883a 	add	r2,r3,r2
 200b56c:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
 200b570:	e0bff417 	ldw	r2,-48(fp)
 200b574:	100b883a 	mov	r5,r2
 200b578:	e13ffe17 	ldw	r4,-8(fp)
 200b57c:	200ecd40 	call	200ecd4 <_sbrk_r>
 200b580:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 200b584:	e0bff517 	ldw	r2,-44(fp)
 200b588:	10bfffd8 	cmpnei	r2,r2,-1
 200b58c:	1000051e 	bne	r2,zero,200b5a4 <malloc_extend_top+0x22c>
      {
	correction = 0;
 200b590:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
 200b594:	00800044 	movi	r2,1
 200b598:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
 200b59c:	e0bff317 	ldw	r2,-52(fp)
 200b5a0:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
 200b5a4:	008080b4 	movhi	r2,514
 200b5a8:	10896c04 	addi	r2,r2,9648
 200b5ac:	10800017 	ldw	r2,0(r2)
 200b5b0:	1007883a 	mov	r3,r2
 200b5b4:	e0bff417 	ldw	r2,-48(fp)
 200b5b8:	1885883a 	add	r2,r3,r2
 200b5bc:	1007883a 	mov	r3,r2
 200b5c0:	008080b4 	movhi	r2,514
 200b5c4:	10896c04 	addi	r2,r2,9648
 200b5c8:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
 200b5cc:	008080b4 	movhi	r2,514
 200b5d0:	10bc9504 	addi	r2,r2,-3500
 200b5d4:	e0fff317 	ldw	r3,-52(fp)
 200b5d8:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 200b5dc:	e0fff517 	ldw	r3,-44(fp)
 200b5e0:	e0bff317 	ldw	r2,-52(fp)
 200b5e4:	1885c83a 	sub	r2,r3,r2
 200b5e8:	1007883a 	mov	r3,r2
 200b5ec:	e0bff417 	ldw	r2,-48(fp)
 200b5f0:	1885883a 	add	r2,r3,r2
 200b5f4:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
 200b5f8:	008080b4 	movhi	r2,514
 200b5fc:	10bc9504 	addi	r2,r2,-3500
 200b600:	10800217 	ldw	r2,8(r2)
 200b604:	e0fffc17 	ldw	r3,-16(fp)
 200b608:	18c00054 	ori	r3,r3,1
 200b60c:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
 200b610:	008080b4 	movhi	r2,514
 200b614:	10bc9504 	addi	r2,r2,-3500
 200b618:	e0fff817 	ldw	r3,-32(fp)
 200b61c:	18802826 	beq	r3,r2,200b6c0 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
 200b620:	e0bff917 	ldw	r2,-28(fp)
 200b624:	10800428 	cmpgeui	r2,r2,16
 200b628:	1000061e 	bne	r2,zero,200b644 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 200b62c:	008080b4 	movhi	r2,514
 200b630:	10bc9504 	addi	r2,r2,-3500
 200b634:	10800217 	ldw	r2,8(r2)
 200b638:	00c00044 	movi	r3,1
 200b63c:	10c00115 	stw	r3,4(r2)
        return;
 200b640:	00003506 	br	200b718 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 200b644:	e0bff917 	ldw	r2,-28(fp)
 200b648:	10fffd04 	addi	r3,r2,-12
 200b64c:	00bffe04 	movi	r2,-8
 200b650:	1884703a 	and	r2,r3,r2
 200b654:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 200b658:	e0bff817 	ldw	r2,-32(fp)
 200b65c:	10800117 	ldw	r2,4(r2)
 200b660:	10c0004c 	andi	r3,r2,1
 200b664:	e0bff917 	ldw	r2,-28(fp)
 200b668:	1886b03a 	or	r3,r3,r2
 200b66c:	e0bff817 	ldw	r2,-32(fp)
 200b670:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 200b674:	e0fff817 	ldw	r3,-32(fp)
 200b678:	e0bff917 	ldw	r2,-28(fp)
 200b67c:	1885883a 	add	r2,r3,r2
 200b680:	00c00144 	movi	r3,5
 200b684:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 200b688:	e0bff917 	ldw	r2,-28(fp)
 200b68c:	10800104 	addi	r2,r2,4
 200b690:	e0fff817 	ldw	r3,-32(fp)
 200b694:	1885883a 	add	r2,r3,r2
 200b698:	00c00144 	movi	r3,5
 200b69c:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
 200b6a0:	e0bff917 	ldw	r2,-28(fp)
 200b6a4:	10800430 	cmpltui	r2,r2,16
 200b6a8:	1000051e 	bne	r2,zero,200b6c0 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
 200b6ac:	e0bff817 	ldw	r2,-32(fp)
 200b6b0:	10800204 	addi	r2,r2,8
 200b6b4:	100b883a 	mov	r5,r2
 200b6b8:	e13ffe17 	ldw	r4,-8(fp)
 200b6bc:	200a0ec0 	call	200a0ec <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 200b6c0:	008080b4 	movhi	r2,514
 200b6c4:	10896c04 	addi	r2,r2,9648
 200b6c8:	10800017 	ldw	r2,0(r2)
 200b6cc:	1007883a 	mov	r3,r2
 200b6d0:	d0a72c17 	ldw	r2,-25424(gp)
 200b6d4:	10c0042e 	bgeu	r2,r3,200b6e8 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
 200b6d8:	008080b4 	movhi	r2,514
 200b6dc:	10896c04 	addi	r2,r2,9648
 200b6e0:	10800017 	ldw	r2,0(r2)
 200b6e4:	d0a72c15 	stw	r2,-25424(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 200b6e8:	008080b4 	movhi	r2,514
 200b6ec:	10896c04 	addi	r2,r2,9648
 200b6f0:	10800017 	ldw	r2,0(r2)
 200b6f4:	1007883a 	mov	r3,r2
 200b6f8:	d0a72d17 	ldw	r2,-25420(gp)
 200b6fc:	10c0062e 	bgeu	r2,r3,200b718 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
 200b700:	008080b4 	movhi	r2,514
 200b704:	10896c04 	addi	r2,r2,9648
 200b708:	10800017 	ldw	r2,0(r2)
 200b70c:	d0a72d15 	stw	r2,-25420(gp)
 200b710:	00000106 	br	200b718 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
 200b714:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
 200b718:	e037883a 	mov	sp,fp
 200b71c:	dfc00117 	ldw	ra,4(sp)
 200b720:	df000017 	ldw	fp,0(sp)
 200b724:	dec00204 	addi	sp,sp,8
 200b728:	f800283a 	ret

0200b72c <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
 200b72c:	deffef04 	addi	sp,sp,-68
 200b730:	dfc01015 	stw	ra,64(sp)
 200b734:	df000f15 	stw	fp,60(sp)
 200b738:	df000f04 	addi	fp,sp,60
 200b73c:	e13ffe15 	stw	r4,-8(fp)
 200b740:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 200b744:	e0bfff17 	ldw	r2,-4(fp)
 200b748:	108002c4 	addi	r2,r2,11
 200b74c:	108005f0 	cmpltui	r2,r2,23
 200b750:	1000051e 	bne	r2,zero,200b768 <_malloc_r+0x3c>
 200b754:	e0bfff17 	ldw	r2,-4(fp)
 200b758:	10c002c4 	addi	r3,r2,11
 200b75c:	00bffe04 	movi	r2,-8
 200b760:	1884703a 	and	r2,r3,r2
 200b764:	00000106 	br	200b76c <_malloc_r+0x40>
 200b768:	00800404 	movi	r2,16
 200b76c:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200b770:	e0bffa17 	ldw	r2,-24(fp)
 200b774:	10000316 	blt	r2,zero,200b784 <_malloc_r+0x58>
 200b778:	e0fffa17 	ldw	r3,-24(fp)
 200b77c:	e0bfff17 	ldw	r2,-4(fp)
 200b780:	1880052e 	bgeu	r3,r2,200b798 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
 200b784:	e0bffe17 	ldw	r2,-8(fp)
 200b788:	00c00304 	movi	r3,12
 200b78c:	10c00015 	stw	r3,0(r2)
    return 0;
 200b790:	0005883a 	mov	r2,zero
 200b794:	0002bf06 	br	200c294 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
 200b798:	e13ffe17 	ldw	r4,-8(fp)
 200b79c:	2013bc00 	call	2013bc0 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
 200b7a0:	e0bffa17 	ldw	r2,-24(fp)
 200b7a4:	10807e28 	cmpgeui	r2,r2,504
 200b7a8:	10003f1e 	bne	r2,zero,200b8a8 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
 200b7ac:	e0bffa17 	ldw	r2,-24(fp)
 200b7b0:	1004d0fa 	srli	r2,r2,3
 200b7b4:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
 200b7b8:	e0bff217 	ldw	r2,-56(fp)
 200b7bc:	10800044 	addi	r2,r2,1
 200b7c0:	1085883a 	add	r2,r2,r2
 200b7c4:	1085883a 	add	r2,r2,r2
 200b7c8:	1087883a 	add	r3,r2,r2
 200b7cc:	008080b4 	movhi	r2,514
 200b7d0:	10bc9504 	addi	r2,r2,-3500
 200b7d4:	1885883a 	add	r2,r3,r2
 200b7d8:	10bffe04 	addi	r2,r2,-8
 200b7dc:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
 200b7e0:	e0bff917 	ldw	r2,-28(fp)
 200b7e4:	10800317 	ldw	r2,12(r2)
 200b7e8:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
 200b7ec:	e0fff117 	ldw	r3,-60(fp)
 200b7f0:	e0bff917 	ldw	r2,-28(fp)
 200b7f4:	1880061e 	bne	r3,r2,200b810 <_malloc_r+0xe4>
    {
      q = next_bin(q);
 200b7f8:	e0bff917 	ldw	r2,-28(fp)
 200b7fc:	10800204 	addi	r2,r2,8
 200b800:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
 200b804:	e0bff917 	ldw	r2,-28(fp)
 200b808:	10800317 	ldw	r2,12(r2)
 200b80c:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
 200b810:	e0fff117 	ldw	r3,-60(fp)
 200b814:	e0bff917 	ldw	r2,-28(fp)
 200b818:	18801f26 	beq	r3,r2,200b898 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
 200b81c:	e0bff117 	ldw	r2,-60(fp)
 200b820:	10c00117 	ldw	r3,4(r2)
 200b824:	00bfff04 	movi	r2,-4
 200b828:	1884703a 	and	r2,r3,r2
 200b82c:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
 200b830:	e0bff117 	ldw	r2,-60(fp)
 200b834:	10800317 	ldw	r2,12(r2)
 200b838:	e0bff815 	stw	r2,-32(fp)
 200b83c:	e0bff117 	ldw	r2,-60(fp)
 200b840:	10800217 	ldw	r2,8(r2)
 200b844:	e0bff715 	stw	r2,-36(fp)
 200b848:	e0bff717 	ldw	r2,-36(fp)
 200b84c:	e0fff817 	ldw	r3,-32(fp)
 200b850:	10c00315 	stw	r3,12(r2)
 200b854:	e0bff817 	ldw	r2,-32(fp)
 200b858:	e0fff717 	ldw	r3,-36(fp)
 200b85c:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 200b860:	e0fff117 	ldw	r3,-60(fp)
 200b864:	e0bffb17 	ldw	r2,-20(fp)
 200b868:	1885883a 	add	r2,r3,r2
 200b86c:	e13ff117 	ldw	r4,-60(fp)
 200b870:	e0fffb17 	ldw	r3,-20(fp)
 200b874:	20c7883a 	add	r3,r4,r3
 200b878:	18c00117 	ldw	r3,4(r3)
 200b87c:	18c00054 	ori	r3,r3,1
 200b880:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200b884:	e13ffe17 	ldw	r4,-8(fp)
 200b888:	2013ce00 	call	2013ce0 <__malloc_unlock>
      return chunk2mem(victim);
 200b88c:	e0bff117 	ldw	r2,-60(fp)
 200b890:	10800204 	addi	r2,r2,8
 200b894:	00027f06 	br	200c294 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 200b898:	e0bff217 	ldw	r2,-56(fp)
 200b89c:	10800084 	addi	r2,r2,2
 200b8a0:	e0bff215 	stw	r2,-56(fp)
 200b8a4:	00007306 	br	200ba74 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
 200b8a8:	e0bffa17 	ldw	r2,-24(fp)
 200b8ac:	1004d27a 	srli	r2,r2,9
 200b8b0:	1000031e 	bne	r2,zero,200b8c0 <_malloc_r+0x194>
 200b8b4:	e0bffa17 	ldw	r2,-24(fp)
 200b8b8:	1004d0fa 	srli	r2,r2,3
 200b8bc:	00002906 	br	200b964 <_malloc_r+0x238>
 200b8c0:	e0bffa17 	ldw	r2,-24(fp)
 200b8c4:	1004d27a 	srli	r2,r2,9
 200b8c8:	10800168 	cmpgeui	r2,r2,5
 200b8cc:	1000041e 	bne	r2,zero,200b8e0 <_malloc_r+0x1b4>
 200b8d0:	e0bffa17 	ldw	r2,-24(fp)
 200b8d4:	1004d1ba 	srli	r2,r2,6
 200b8d8:	10800e04 	addi	r2,r2,56
 200b8dc:	00002106 	br	200b964 <_malloc_r+0x238>
 200b8e0:	e0bffa17 	ldw	r2,-24(fp)
 200b8e4:	1004d27a 	srli	r2,r2,9
 200b8e8:	10800568 	cmpgeui	r2,r2,21
 200b8ec:	1000041e 	bne	r2,zero,200b900 <_malloc_r+0x1d4>
 200b8f0:	e0bffa17 	ldw	r2,-24(fp)
 200b8f4:	1004d27a 	srli	r2,r2,9
 200b8f8:	108016c4 	addi	r2,r2,91
 200b8fc:	00001906 	br	200b964 <_malloc_r+0x238>
 200b900:	e0bffa17 	ldw	r2,-24(fp)
 200b904:	1004d27a 	srli	r2,r2,9
 200b908:	10801568 	cmpgeui	r2,r2,85
 200b90c:	1000041e 	bne	r2,zero,200b920 <_malloc_r+0x1f4>
 200b910:	e0bffa17 	ldw	r2,-24(fp)
 200b914:	1004d33a 	srli	r2,r2,12
 200b918:	10801b84 	addi	r2,r2,110
 200b91c:	00001106 	br	200b964 <_malloc_r+0x238>
 200b920:	e0bffa17 	ldw	r2,-24(fp)
 200b924:	1004d27a 	srli	r2,r2,9
 200b928:	10805568 	cmpgeui	r2,r2,341
 200b92c:	1000041e 	bne	r2,zero,200b940 <_malloc_r+0x214>
 200b930:	e0bffa17 	ldw	r2,-24(fp)
 200b934:	1004d3fa 	srli	r2,r2,15
 200b938:	10801dc4 	addi	r2,r2,119
 200b93c:	00000906 	br	200b964 <_malloc_r+0x238>
 200b940:	e0bffa17 	ldw	r2,-24(fp)
 200b944:	1004d27a 	srli	r2,r2,9
 200b948:	10815568 	cmpgeui	r2,r2,1365
 200b94c:	1000041e 	bne	r2,zero,200b960 <_malloc_r+0x234>
 200b950:	e0bffa17 	ldw	r2,-24(fp)
 200b954:	1004d4ba 	srli	r2,r2,18
 200b958:	10801f04 	addi	r2,r2,124
 200b95c:	00000106 	br	200b964 <_malloc_r+0x238>
 200b960:	00801f84 	movi	r2,126
 200b964:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
 200b968:	e0bff217 	ldw	r2,-56(fp)
 200b96c:	10800044 	addi	r2,r2,1
 200b970:	1085883a 	add	r2,r2,r2
 200b974:	1085883a 	add	r2,r2,r2
 200b978:	1087883a 	add	r3,r2,r2
 200b97c:	008080b4 	movhi	r2,514
 200b980:	10bc9504 	addi	r2,r2,-3500
 200b984:	1885883a 	add	r2,r3,r2
 200b988:	10bffe04 	addi	r2,r2,-8
 200b98c:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200b990:	e0bff317 	ldw	r2,-52(fp)
 200b994:	10800317 	ldw	r2,12(r2)
 200b998:	e0bff115 	stw	r2,-60(fp)
 200b99c:	00002f06 	br	200ba5c <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
 200b9a0:	e0bff117 	ldw	r2,-60(fp)
 200b9a4:	10c00117 	ldw	r3,4(r2)
 200b9a8:	00bfff04 	movi	r2,-4
 200b9ac:	1884703a 	and	r2,r3,r2
 200b9b0:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 200b9b4:	e0fffb17 	ldw	r3,-20(fp)
 200b9b8:	e0bffa17 	ldw	r2,-24(fp)
 200b9bc:	1885c83a 	sub	r2,r3,r2
 200b9c0:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
 200b9c4:	e0bff417 	ldw	r2,-48(fp)
 200b9c8:	10800410 	cmplti	r2,r2,16
 200b9cc:	1000041e 	bne	r2,zero,200b9e0 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
 200b9d0:	e0bff217 	ldw	r2,-56(fp)
 200b9d4:	10bfffc4 	addi	r2,r2,-1
 200b9d8:	e0bff215 	stw	r2,-56(fp)
        break;   
 200b9dc:	00002206 	br	200ba68 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
 200b9e0:	e0bff417 	ldw	r2,-48(fp)
 200b9e4:	10001a16 	blt	r2,zero,200ba50 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
 200b9e8:	e0bff117 	ldw	r2,-60(fp)
 200b9ec:	10800317 	ldw	r2,12(r2)
 200b9f0:	e0bff815 	stw	r2,-32(fp)
 200b9f4:	e0bff117 	ldw	r2,-60(fp)
 200b9f8:	10800217 	ldw	r2,8(r2)
 200b9fc:	e0bff715 	stw	r2,-36(fp)
 200ba00:	e0bff717 	ldw	r2,-36(fp)
 200ba04:	e0fff817 	ldw	r3,-32(fp)
 200ba08:	10c00315 	stw	r3,12(r2)
 200ba0c:	e0bff817 	ldw	r2,-32(fp)
 200ba10:	e0fff717 	ldw	r3,-36(fp)
 200ba14:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 200ba18:	e0fff117 	ldw	r3,-60(fp)
 200ba1c:	e0bffb17 	ldw	r2,-20(fp)
 200ba20:	1885883a 	add	r2,r3,r2
 200ba24:	e13ff117 	ldw	r4,-60(fp)
 200ba28:	e0fffb17 	ldw	r3,-20(fp)
 200ba2c:	20c7883a 	add	r3,r4,r3
 200ba30:	18c00117 	ldw	r3,4(r3)
 200ba34:	18c00054 	ori	r3,r3,1
 200ba38:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
 200ba3c:	e13ffe17 	ldw	r4,-8(fp)
 200ba40:	2013ce00 	call	2013ce0 <__malloc_unlock>
        return chunk2mem(victim);
 200ba44:	e0bff117 	ldw	r2,-60(fp)
 200ba48:	10800204 	addi	r2,r2,8
 200ba4c:	00021106 	br	200c294 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
 200ba50:	e0bff117 	ldw	r2,-60(fp)
 200ba54:	10800317 	ldw	r2,12(r2)
 200ba58:	e0bff115 	stw	r2,-60(fp)
 200ba5c:	e0fff117 	ldw	r3,-60(fp)
 200ba60:	e0bff317 	ldw	r2,-52(fp)
 200ba64:	18bfce1e 	bne	r3,r2,200b9a0 <_malloc_r+0x274>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
 200ba68:	e0bff217 	ldw	r2,-56(fp)
 200ba6c:	10800044 	addi	r2,r2,1
 200ba70:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
 200ba74:	008080b4 	movhi	r2,514
 200ba78:	10bc9704 	addi	r2,r2,-3492
 200ba7c:	10800217 	ldw	r2,8(r2)
 200ba80:	e0bff115 	stw	r2,-60(fp)
 200ba84:	008080b4 	movhi	r2,514
 200ba88:	10bc9704 	addi	r2,r2,-3492
 200ba8c:	e0fff117 	ldw	r3,-60(fp)
 200ba90:	1880e626 	beq	r3,r2,200be2c <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
 200ba94:	e0bff117 	ldw	r2,-60(fp)
 200ba98:	10c00117 	ldw	r3,4(r2)
 200ba9c:	00bfff04 	movi	r2,-4
 200baa0:	1884703a 	and	r2,r3,r2
 200baa4:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 200baa8:	e0fffb17 	ldw	r3,-20(fp)
 200baac:	e0bffa17 	ldw	r2,-24(fp)
 200bab0:	1885c83a 	sub	r2,r3,r2
 200bab4:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
 200bab8:	e0bff417 	ldw	r2,-48(fp)
 200babc:	10800410 	cmplti	r2,r2,16
 200bac0:	1000271e 	bne	r2,zero,200bb60 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
 200bac4:	e0fff117 	ldw	r3,-60(fp)
 200bac8:	e0bffa17 	ldw	r2,-24(fp)
 200bacc:	1885883a 	add	r2,r3,r2
 200bad0:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
 200bad4:	e0bffa17 	ldw	r2,-24(fp)
 200bad8:	10c00054 	ori	r3,r2,1
 200badc:	e0bff117 	ldw	r2,-60(fp)
 200bae0:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 200bae4:	00c080b4 	movhi	r3,514
 200bae8:	18fc9704 	addi	r3,r3,-3492
 200baec:	008080b4 	movhi	r2,514
 200baf0:	10bc9704 	addi	r2,r2,-3492
 200baf4:	e13ffc17 	ldw	r4,-16(fp)
 200baf8:	11000315 	stw	r4,12(r2)
 200bafc:	10800317 	ldw	r2,12(r2)
 200bb00:	18800215 	stw	r2,8(r3)
 200bb04:	008080b4 	movhi	r2,514
 200bb08:	10bc9704 	addi	r2,r2,-3492
 200bb0c:	e0fffc17 	ldw	r3,-16(fp)
 200bb10:	18800315 	stw	r2,12(r3)
 200bb14:	e0bffc17 	ldw	r2,-16(fp)
 200bb18:	10c00317 	ldw	r3,12(r2)
 200bb1c:	e0bffc17 	ldw	r2,-16(fp)
 200bb20:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 200bb24:	e0bff417 	ldw	r2,-48(fp)
 200bb28:	10800054 	ori	r2,r2,1
 200bb2c:	1007883a 	mov	r3,r2
 200bb30:	e0bffc17 	ldw	r2,-16(fp)
 200bb34:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 200bb38:	e0bff417 	ldw	r2,-48(fp)
 200bb3c:	e0fffc17 	ldw	r3,-16(fp)
 200bb40:	1885883a 	add	r2,r3,r2
 200bb44:	e0fff417 	ldw	r3,-48(fp)
 200bb48:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200bb4c:	e13ffe17 	ldw	r4,-8(fp)
 200bb50:	2013ce00 	call	2013ce0 <__malloc_unlock>
      return chunk2mem(victim);
 200bb54:	e0bff117 	ldw	r2,-60(fp)
 200bb58:	10800204 	addi	r2,r2,8
 200bb5c:	0001cd06 	br	200c294 <_malloc_r+0xb68>
    }

    clear_last_remainder;
 200bb60:	00c080b4 	movhi	r3,514
 200bb64:	18fc9704 	addi	r3,r3,-3492
 200bb68:	008080b4 	movhi	r2,514
 200bb6c:	10bc9704 	addi	r2,r2,-3492
 200bb70:	010080b4 	movhi	r4,514
 200bb74:	213c9704 	addi	r4,r4,-3492
 200bb78:	11000315 	stw	r4,12(r2)
 200bb7c:	10800317 	ldw	r2,12(r2)
 200bb80:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
 200bb84:	e0bff417 	ldw	r2,-48(fp)
 200bb88:	10000e16 	blt	r2,zero,200bbc4 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
 200bb8c:	e0fff117 	ldw	r3,-60(fp)
 200bb90:	e0bffb17 	ldw	r2,-20(fp)
 200bb94:	1885883a 	add	r2,r3,r2
 200bb98:	e13ff117 	ldw	r4,-60(fp)
 200bb9c:	e0fffb17 	ldw	r3,-20(fp)
 200bba0:	20c7883a 	add	r3,r4,r3
 200bba4:	18c00117 	ldw	r3,4(r3)
 200bba8:	18c00054 	ori	r3,r3,1
 200bbac:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
 200bbb0:	e13ffe17 	ldw	r4,-8(fp)
 200bbb4:	2013ce00 	call	2013ce0 <__malloc_unlock>
      return chunk2mem(victim);
 200bbb8:	e0bff117 	ldw	r2,-60(fp)
 200bbbc:	10800204 	addi	r2,r2,8
 200bbc0:	0001b406 	br	200c294 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
 200bbc4:	e0bffb17 	ldw	r2,-20(fp)
 200bbc8:	10808028 	cmpgeui	r2,r2,512
 200bbcc:	10002c1e 	bne	r2,zero,200bc80 <_malloc_r+0x554>
 200bbd0:	e0bffb17 	ldw	r2,-20(fp)
 200bbd4:	1004d0fa 	srli	r2,r2,3
 200bbd8:	e0bffd15 	stw	r2,-12(fp)
 200bbdc:	00c080b4 	movhi	r3,514
 200bbe0:	18fc9504 	addi	r3,r3,-3500
 200bbe4:	008080b4 	movhi	r2,514
 200bbe8:	10bc9504 	addi	r2,r2,-3500
 200bbec:	11000117 	ldw	r4,4(r2)
 200bbf0:	e0bffd17 	ldw	r2,-12(fp)
 200bbf4:	1000010e 	bge	r2,zero,200bbfc <_malloc_r+0x4d0>
 200bbf8:	108000c4 	addi	r2,r2,3
 200bbfc:	1005d0ba 	srai	r2,r2,2
 200bc00:	100b883a 	mov	r5,r2
 200bc04:	00800044 	movi	r2,1
 200bc08:	1144983a 	sll	r2,r2,r5
 200bc0c:	2084b03a 	or	r2,r4,r2
 200bc10:	18800115 	stw	r2,4(r3)
 200bc14:	e0bffd17 	ldw	r2,-12(fp)
 200bc18:	10800044 	addi	r2,r2,1
 200bc1c:	1085883a 	add	r2,r2,r2
 200bc20:	1085883a 	add	r2,r2,r2
 200bc24:	1087883a 	add	r3,r2,r2
 200bc28:	008080b4 	movhi	r2,514
 200bc2c:	10bc9504 	addi	r2,r2,-3500
 200bc30:	1885883a 	add	r2,r3,r2
 200bc34:	10bffe04 	addi	r2,r2,-8
 200bc38:	e0bff815 	stw	r2,-32(fp)
 200bc3c:	e0bff817 	ldw	r2,-32(fp)
 200bc40:	10800217 	ldw	r2,8(r2)
 200bc44:	e0bff715 	stw	r2,-36(fp)
 200bc48:	e0bff117 	ldw	r2,-60(fp)
 200bc4c:	e0fff817 	ldw	r3,-32(fp)
 200bc50:	10c00315 	stw	r3,12(r2)
 200bc54:	e0bff117 	ldw	r2,-60(fp)
 200bc58:	e0fff717 	ldw	r3,-36(fp)
 200bc5c:	10c00215 	stw	r3,8(r2)
 200bc60:	e0bff817 	ldw	r2,-32(fp)
 200bc64:	e0fff117 	ldw	r3,-60(fp)
 200bc68:	10c00215 	stw	r3,8(r2)
 200bc6c:	e0bff817 	ldw	r2,-32(fp)
 200bc70:	10c00217 	ldw	r3,8(r2)
 200bc74:	e0bff717 	ldw	r2,-36(fp)
 200bc78:	10c00315 	stw	r3,12(r2)
 200bc7c:	00006b06 	br	200be2c <_malloc_r+0x700>
 200bc80:	e0bffb17 	ldw	r2,-20(fp)
 200bc84:	1004d27a 	srli	r2,r2,9
 200bc88:	1000031e 	bne	r2,zero,200bc98 <_malloc_r+0x56c>
 200bc8c:	e0bffb17 	ldw	r2,-20(fp)
 200bc90:	1004d0fa 	srli	r2,r2,3
 200bc94:	00002906 	br	200bd3c <_malloc_r+0x610>
 200bc98:	e0bffb17 	ldw	r2,-20(fp)
 200bc9c:	1004d27a 	srli	r2,r2,9
 200bca0:	10800168 	cmpgeui	r2,r2,5
 200bca4:	1000041e 	bne	r2,zero,200bcb8 <_malloc_r+0x58c>
 200bca8:	e0bffb17 	ldw	r2,-20(fp)
 200bcac:	1004d1ba 	srli	r2,r2,6
 200bcb0:	10800e04 	addi	r2,r2,56
 200bcb4:	00002106 	br	200bd3c <_malloc_r+0x610>
 200bcb8:	e0bffb17 	ldw	r2,-20(fp)
 200bcbc:	1004d27a 	srli	r2,r2,9
 200bcc0:	10800568 	cmpgeui	r2,r2,21
 200bcc4:	1000041e 	bne	r2,zero,200bcd8 <_malloc_r+0x5ac>
 200bcc8:	e0bffb17 	ldw	r2,-20(fp)
 200bccc:	1004d27a 	srli	r2,r2,9
 200bcd0:	108016c4 	addi	r2,r2,91
 200bcd4:	00001906 	br	200bd3c <_malloc_r+0x610>
 200bcd8:	e0bffb17 	ldw	r2,-20(fp)
 200bcdc:	1004d27a 	srli	r2,r2,9
 200bce0:	10801568 	cmpgeui	r2,r2,85
 200bce4:	1000041e 	bne	r2,zero,200bcf8 <_malloc_r+0x5cc>
 200bce8:	e0bffb17 	ldw	r2,-20(fp)
 200bcec:	1004d33a 	srli	r2,r2,12
 200bcf0:	10801b84 	addi	r2,r2,110
 200bcf4:	00001106 	br	200bd3c <_malloc_r+0x610>
 200bcf8:	e0bffb17 	ldw	r2,-20(fp)
 200bcfc:	1004d27a 	srli	r2,r2,9
 200bd00:	10805568 	cmpgeui	r2,r2,341
 200bd04:	1000041e 	bne	r2,zero,200bd18 <_malloc_r+0x5ec>
 200bd08:	e0bffb17 	ldw	r2,-20(fp)
 200bd0c:	1004d3fa 	srli	r2,r2,15
 200bd10:	10801dc4 	addi	r2,r2,119
 200bd14:	00000906 	br	200bd3c <_malloc_r+0x610>
 200bd18:	e0bffb17 	ldw	r2,-20(fp)
 200bd1c:	1004d27a 	srli	r2,r2,9
 200bd20:	10815568 	cmpgeui	r2,r2,1365
 200bd24:	1000041e 	bne	r2,zero,200bd38 <_malloc_r+0x60c>
 200bd28:	e0bffb17 	ldw	r2,-20(fp)
 200bd2c:	1004d4ba 	srli	r2,r2,18
 200bd30:	10801f04 	addi	r2,r2,124
 200bd34:	00000106 	br	200bd3c <_malloc_r+0x610>
 200bd38:	00801f84 	movi	r2,126
 200bd3c:	e0bffd15 	stw	r2,-12(fp)
 200bd40:	e0bffd17 	ldw	r2,-12(fp)
 200bd44:	10800044 	addi	r2,r2,1
 200bd48:	1085883a 	add	r2,r2,r2
 200bd4c:	1085883a 	add	r2,r2,r2
 200bd50:	1087883a 	add	r3,r2,r2
 200bd54:	008080b4 	movhi	r2,514
 200bd58:	10bc9504 	addi	r2,r2,-3500
 200bd5c:	1885883a 	add	r2,r3,r2
 200bd60:	10bffe04 	addi	r2,r2,-8
 200bd64:	e0bff815 	stw	r2,-32(fp)
 200bd68:	e0bff817 	ldw	r2,-32(fp)
 200bd6c:	10800217 	ldw	r2,8(r2)
 200bd70:	e0bff715 	stw	r2,-36(fp)
 200bd74:	e0fff717 	ldw	r3,-36(fp)
 200bd78:	e0bff817 	ldw	r2,-32(fp)
 200bd7c:	1880121e 	bne	r3,r2,200bdc8 <_malloc_r+0x69c>
 200bd80:	00c080b4 	movhi	r3,514
 200bd84:	18fc9504 	addi	r3,r3,-3500
 200bd88:	008080b4 	movhi	r2,514
 200bd8c:	10bc9504 	addi	r2,r2,-3500
 200bd90:	11000117 	ldw	r4,4(r2)
 200bd94:	e0bffd17 	ldw	r2,-12(fp)
 200bd98:	1000010e 	bge	r2,zero,200bda0 <_malloc_r+0x674>
 200bd9c:	108000c4 	addi	r2,r2,3
 200bda0:	1005d0ba 	srai	r2,r2,2
 200bda4:	100b883a 	mov	r5,r2
 200bda8:	00800044 	movi	r2,1
 200bdac:	1144983a 	sll	r2,r2,r5
 200bdb0:	2084b03a 	or	r2,r4,r2
 200bdb4:	18800115 	stw	r2,4(r3)
 200bdb8:	00000f06 	br	200bdf8 <_malloc_r+0x6cc>
 200bdbc:	e0bff717 	ldw	r2,-36(fp)
 200bdc0:	10800217 	ldw	r2,8(r2)
 200bdc4:	e0bff715 	stw	r2,-36(fp)
 200bdc8:	e0fff717 	ldw	r3,-36(fp)
 200bdcc:	e0bff817 	ldw	r2,-32(fp)
 200bdd0:	18800626 	beq	r3,r2,200bdec <_malloc_r+0x6c0>
 200bdd4:	e0bff717 	ldw	r2,-36(fp)
 200bdd8:	10c00117 	ldw	r3,4(r2)
 200bddc:	00bfff04 	movi	r2,-4
 200bde0:	1884703a 	and	r2,r3,r2
 200bde4:	e0fffb17 	ldw	r3,-20(fp)
 200bde8:	18bff436 	bltu	r3,r2,200bdbc <_malloc_r+0x690>
 200bdec:	e0bff717 	ldw	r2,-36(fp)
 200bdf0:	10800317 	ldw	r2,12(r2)
 200bdf4:	e0bff815 	stw	r2,-32(fp)
 200bdf8:	e0bff117 	ldw	r2,-60(fp)
 200bdfc:	e0fff817 	ldw	r3,-32(fp)
 200be00:	10c00315 	stw	r3,12(r2)
 200be04:	e0bff117 	ldw	r2,-60(fp)
 200be08:	e0fff717 	ldw	r3,-36(fp)
 200be0c:	10c00215 	stw	r3,8(r2)
 200be10:	e0bff817 	ldw	r2,-32(fp)
 200be14:	e0fff117 	ldw	r3,-60(fp)
 200be18:	10c00215 	stw	r3,8(r2)
 200be1c:	e0bff817 	ldw	r2,-32(fp)
 200be20:	10c00217 	ldw	r3,8(r2)
 200be24:	e0bff717 	ldw	r2,-36(fp)
 200be28:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
 200be2c:	e0bff217 	ldw	r2,-56(fp)
 200be30:	1000010e 	bge	r2,zero,200be38 <_malloc_r+0x70c>
 200be34:	108000c4 	addi	r2,r2,3
 200be38:	1005d0ba 	srai	r2,r2,2
 200be3c:	1007883a 	mov	r3,r2
 200be40:	00800044 	movi	r2,1
 200be44:	10c4983a 	sll	r2,r2,r3
 200be48:	e0bff515 	stw	r2,-44(fp)
 200be4c:	008080b4 	movhi	r2,514
 200be50:	10bc9504 	addi	r2,r2,-3500
 200be54:	10c00117 	ldw	r3,4(r2)
 200be58:	e0bff517 	ldw	r2,-44(fp)
 200be5c:	1880c636 	bltu	r3,r2,200c178 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
 200be60:	008080b4 	movhi	r2,514
 200be64:	10bc9504 	addi	r2,r2,-3500
 200be68:	10c00117 	ldw	r3,4(r2)
 200be6c:	e0bff517 	ldw	r2,-44(fp)
 200be70:	1884703a 	and	r2,r3,r2
 200be74:	1000151e 	bne	r2,zero,200becc <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 200be78:	e0fff217 	ldw	r3,-56(fp)
 200be7c:	00bfff04 	movi	r2,-4
 200be80:	1884703a 	and	r2,r3,r2
 200be84:	10800104 	addi	r2,r2,4
 200be88:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
 200be8c:	e0bff517 	ldw	r2,-44(fp)
 200be90:	1085883a 	add	r2,r2,r2
 200be94:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
 200be98:	00000606 	br	200beb4 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
 200be9c:	e0bff217 	ldw	r2,-56(fp)
 200bea0:	10800104 	addi	r2,r2,4
 200bea4:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
 200bea8:	e0bff517 	ldw	r2,-44(fp)
 200beac:	1085883a 	add	r2,r2,r2
 200beb0:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
 200beb4:	008080b4 	movhi	r2,514
 200beb8:	10bc9504 	addi	r2,r2,-3500
 200bebc:	10c00117 	ldw	r3,4(r2)
 200bec0:	e0bff517 	ldw	r2,-44(fp)
 200bec4:	1884703a 	and	r2,r3,r2
 200bec8:	103ff426 	beq	r2,zero,200be9c <_malloc_r+0x770>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
 200becc:	e0bff217 	ldw	r2,-56(fp)
 200bed0:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
 200bed4:	e0bff217 	ldw	r2,-56(fp)
 200bed8:	10800044 	addi	r2,r2,1
 200bedc:	1085883a 	add	r2,r2,r2
 200bee0:	1085883a 	add	r2,r2,r2
 200bee4:	1087883a 	add	r3,r2,r2
 200bee8:	008080b4 	movhi	r2,514
 200beec:	10bc9504 	addi	r2,r2,-3500
 200bef0:	1885883a 	add	r2,r3,r2
 200bef4:	10bffe04 	addi	r2,r2,-8
 200bef8:	e0bff315 	stw	r2,-52(fp)
 200befc:	e0bff317 	ldw	r2,-52(fp)
 200bf00:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200bf04:	e0bff317 	ldw	r2,-52(fp)
 200bf08:	10800317 	ldw	r2,12(r2)
 200bf0c:	e0bff115 	stw	r2,-60(fp)
 200bf10:	00005e06 	br	200c08c <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
 200bf14:	e0bff117 	ldw	r2,-60(fp)
 200bf18:	10c00117 	ldw	r3,4(r2)
 200bf1c:	00bfff04 	movi	r2,-4
 200bf20:	1884703a 	and	r2,r3,r2
 200bf24:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 200bf28:	e0fffb17 	ldw	r3,-20(fp)
 200bf2c:	e0bffa17 	ldw	r2,-24(fp)
 200bf30:	1885c83a 	sub	r2,r3,r2
 200bf34:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
 200bf38:	e0bff417 	ldw	r2,-48(fp)
 200bf3c:	10800410 	cmplti	r2,r2,16
 200bf40:	1000331e 	bne	r2,zero,200c010 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
 200bf44:	e0fff117 	ldw	r3,-60(fp)
 200bf48:	e0bffa17 	ldw	r2,-24(fp)
 200bf4c:	1885883a 	add	r2,r3,r2
 200bf50:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
 200bf54:	e0bffa17 	ldw	r2,-24(fp)
 200bf58:	10c00054 	ori	r3,r2,1
 200bf5c:	e0bff117 	ldw	r2,-60(fp)
 200bf60:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200bf64:	e0bff117 	ldw	r2,-60(fp)
 200bf68:	10800317 	ldw	r2,12(r2)
 200bf6c:	e0bff815 	stw	r2,-32(fp)
 200bf70:	e0bff117 	ldw	r2,-60(fp)
 200bf74:	10800217 	ldw	r2,8(r2)
 200bf78:	e0bff715 	stw	r2,-36(fp)
 200bf7c:	e0bff717 	ldw	r2,-36(fp)
 200bf80:	e0fff817 	ldw	r3,-32(fp)
 200bf84:	10c00315 	stw	r3,12(r2)
 200bf88:	e0bff817 	ldw	r2,-32(fp)
 200bf8c:	e0fff717 	ldw	r3,-36(fp)
 200bf90:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 200bf94:	00c080b4 	movhi	r3,514
 200bf98:	18fc9704 	addi	r3,r3,-3492
 200bf9c:	008080b4 	movhi	r2,514
 200bfa0:	10bc9704 	addi	r2,r2,-3492
 200bfa4:	e13ffc17 	ldw	r4,-16(fp)
 200bfa8:	11000315 	stw	r4,12(r2)
 200bfac:	10800317 	ldw	r2,12(r2)
 200bfb0:	18800215 	stw	r2,8(r3)
 200bfb4:	008080b4 	movhi	r2,514
 200bfb8:	10bc9704 	addi	r2,r2,-3492
 200bfbc:	e0fffc17 	ldw	r3,-16(fp)
 200bfc0:	18800315 	stw	r2,12(r3)
 200bfc4:	e0bffc17 	ldw	r2,-16(fp)
 200bfc8:	10c00317 	ldw	r3,12(r2)
 200bfcc:	e0bffc17 	ldw	r2,-16(fp)
 200bfd0:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 200bfd4:	e0bff417 	ldw	r2,-48(fp)
 200bfd8:	10800054 	ori	r2,r2,1
 200bfdc:	1007883a 	mov	r3,r2
 200bfe0:	e0bffc17 	ldw	r2,-16(fp)
 200bfe4:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 200bfe8:	e0bff417 	ldw	r2,-48(fp)
 200bfec:	e0fffc17 	ldw	r3,-16(fp)
 200bff0:	1885883a 	add	r2,r3,r2
 200bff4:	e0fff417 	ldw	r3,-48(fp)
 200bff8:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200bffc:	e13ffe17 	ldw	r4,-8(fp)
 200c000:	2013ce00 	call	2013ce0 <__malloc_unlock>
            return chunk2mem(victim);
 200c004:	e0bff117 	ldw	r2,-60(fp)
 200c008:	10800204 	addi	r2,r2,8
 200c00c:	0000a106 	br	200c294 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
 200c010:	e0bff417 	ldw	r2,-48(fp)
 200c014:	10001a16 	blt	r2,zero,200c080 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
 200c018:	e0fff117 	ldw	r3,-60(fp)
 200c01c:	e0bffb17 	ldw	r2,-20(fp)
 200c020:	1885883a 	add	r2,r3,r2
 200c024:	e13ff117 	ldw	r4,-60(fp)
 200c028:	e0fffb17 	ldw	r3,-20(fp)
 200c02c:	20c7883a 	add	r3,r4,r3
 200c030:	18c00117 	ldw	r3,4(r3)
 200c034:	18c00054 	ori	r3,r3,1
 200c038:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 200c03c:	e0bff117 	ldw	r2,-60(fp)
 200c040:	10800317 	ldw	r2,12(r2)
 200c044:	e0bff815 	stw	r2,-32(fp)
 200c048:	e0bff117 	ldw	r2,-60(fp)
 200c04c:	10800217 	ldw	r2,8(r2)
 200c050:	e0bff715 	stw	r2,-36(fp)
 200c054:	e0bff717 	ldw	r2,-36(fp)
 200c058:	e0fff817 	ldw	r3,-32(fp)
 200c05c:	10c00315 	stw	r3,12(r2)
 200c060:	e0bff817 	ldw	r2,-32(fp)
 200c064:	e0fff717 	ldw	r3,-36(fp)
 200c068:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
 200c06c:	e13ffe17 	ldw	r4,-8(fp)
 200c070:	2013ce00 	call	2013ce0 <__malloc_unlock>
            return chunk2mem(victim);
 200c074:	e0bff117 	ldw	r2,-60(fp)
 200c078:	10800204 	addi	r2,r2,8
 200c07c:	00008506 	br	200c294 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
 200c080:	e0bff117 	ldw	r2,-60(fp)
 200c084:	10800317 	ldw	r2,12(r2)
 200c088:	e0bff115 	stw	r2,-60(fp)
 200c08c:	e0fff117 	ldw	r3,-60(fp)
 200c090:	e0bff317 	ldw	r2,-52(fp)
 200c094:	18bf9f1e 	bne	r3,r2,200bf14 <_malloc_r+0x7e8>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
 200c098:	e0bff317 	ldw	r2,-52(fp)
 200c09c:	10800204 	addi	r2,r2,8
 200c0a0:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 200c0a4:	e0bff217 	ldw	r2,-56(fp)
 200c0a8:	10800044 	addi	r2,r2,1
 200c0ac:	e0bff215 	stw	r2,-56(fp)
 200c0b0:	e0bff217 	ldw	r2,-56(fp)
 200c0b4:	108000cc 	andi	r2,r2,3
 200c0b8:	103f921e 	bne	r2,zero,200bf04 <_malloc_r+0x7d8>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 200c0bc:	e0bff617 	ldw	r2,-40(fp)
 200c0c0:	108000cc 	andi	r2,r2,3
 200c0c4:	10000a1e 	bne	r2,zero,200c0f0 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
 200c0c8:	008080b4 	movhi	r2,514
 200c0cc:	10bc9504 	addi	r2,r2,-3500
 200c0d0:	00c080b4 	movhi	r3,514
 200c0d4:	18fc9504 	addi	r3,r3,-3500
 200c0d8:	19000117 	ldw	r4,4(r3)
 200c0dc:	e0fff517 	ldw	r3,-44(fp)
 200c0e0:	00c6303a 	nor	r3,zero,r3
 200c0e4:	20c6703a 	and	r3,r4,r3
 200c0e8:	10c00115 	stw	r3,4(r2)
          break;
 200c0ec:	00000a06 	br	200c118 <_malloc_r+0x9ec>
        }
        --startidx;
 200c0f0:	e0bff617 	ldw	r2,-40(fp)
 200c0f4:	10bfffc4 	addi	r2,r2,-1
 200c0f8:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
 200c0fc:	e0bff917 	ldw	r2,-28(fp)
 200c100:	10bffe04 	addi	r2,r2,-8
 200c104:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
 200c108:	e0bff917 	ldw	r2,-28(fp)
 200c10c:	10c00217 	ldw	r3,8(r2)
 200c110:	e0bff917 	ldw	r2,-28(fp)
 200c114:	18bfe926 	beq	r3,r2,200c0bc <_malloc_r+0x990>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 200c118:	e0bff517 	ldw	r2,-44(fp)
 200c11c:	1085883a 	add	r2,r2,r2
 200c120:	e0bff515 	stw	r2,-44(fp)
 200c124:	008080b4 	movhi	r2,514
 200c128:	10bc9504 	addi	r2,r2,-3500
 200c12c:	10c00117 	ldw	r3,4(r2)
 200c130:	e0bff517 	ldw	r2,-44(fp)
 200c134:	18801036 	bltu	r3,r2,200c178 <_malloc_r+0xa4c>
 200c138:	e0bff517 	ldw	r2,-44(fp)
 200c13c:	10000e26 	beq	r2,zero,200c178 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
 200c140:	00000606 	br	200c15c <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
 200c144:	e0bff217 	ldw	r2,-56(fp)
 200c148:	10800104 	addi	r2,r2,4
 200c14c:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
 200c150:	e0bff517 	ldw	r2,-44(fp)
 200c154:	1085883a 	add	r2,r2,r2
 200c158:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
 200c15c:	008080b4 	movhi	r2,514
 200c160:	10bc9504 	addi	r2,r2,-3500
 200c164:	10c00117 	ldw	r3,4(r2)
 200c168:	e0bff517 	ldw	r2,-44(fp)
 200c16c:	1884703a 	and	r2,r3,r2
 200c170:	103ff426 	beq	r2,zero,200c144 <_malloc_r+0xa18>
          block <<= 1;
        }
      }
      else
        break;
    }
 200c174:	003f5506 	br	200becc <_malloc_r+0x7a0>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
 200c178:	008080b4 	movhi	r2,514
 200c17c:	10bc9504 	addi	r2,r2,-3500
 200c180:	10800217 	ldw	r2,8(r2)
 200c184:	10c00117 	ldw	r3,4(r2)
 200c188:	00bfff04 	movi	r2,-4
 200c18c:	1886703a 	and	r3,r3,r2
 200c190:	e0bffa17 	ldw	r2,-24(fp)
 200c194:	1885c83a 	sub	r2,r3,r2
 200c198:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200c19c:	008080b4 	movhi	r2,514
 200c1a0:	10bc9504 	addi	r2,r2,-3500
 200c1a4:	10800217 	ldw	r2,8(r2)
 200c1a8:	10c00117 	ldw	r3,4(r2)
 200c1ac:	00bfff04 	movi	r2,-4
 200c1b0:	1886703a 	and	r3,r3,r2
 200c1b4:	e0bffa17 	ldw	r2,-24(fp)
 200c1b8:	18800336 	bltu	r3,r2,200c1c8 <_malloc_r+0xa9c>
 200c1bc:	e0bff417 	ldw	r2,-48(fp)
 200c1c0:	10800408 	cmpgei	r2,r2,16
 200c1c4:	10001b1e 	bne	r2,zero,200c234 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
 200c1c8:	e17ffa17 	ldw	r5,-24(fp)
 200c1cc:	e13ffe17 	ldw	r4,-8(fp)
 200c1d0:	200b3780 	call	200b378 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 200c1d4:	008080b4 	movhi	r2,514
 200c1d8:	10bc9504 	addi	r2,r2,-3500
 200c1dc:	10800217 	ldw	r2,8(r2)
 200c1e0:	10c00117 	ldw	r3,4(r2)
 200c1e4:	00bfff04 	movi	r2,-4
 200c1e8:	1886703a 	and	r3,r3,r2
 200c1ec:	e0bffa17 	ldw	r2,-24(fp)
 200c1f0:	1885c83a 	sub	r2,r3,r2
 200c1f4:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 200c1f8:	008080b4 	movhi	r2,514
 200c1fc:	10bc9504 	addi	r2,r2,-3500
 200c200:	10800217 	ldw	r2,8(r2)
 200c204:	10c00117 	ldw	r3,4(r2)
 200c208:	00bfff04 	movi	r2,-4
 200c20c:	1886703a 	and	r3,r3,r2
 200c210:	e0bffa17 	ldw	r2,-24(fp)
 200c214:	18800336 	bltu	r3,r2,200c224 <_malloc_r+0xaf8>
 200c218:	e0bff417 	ldw	r2,-48(fp)
 200c21c:	10800408 	cmpgei	r2,r2,16
 200c220:	1000041e 	bne	r2,zero,200c234 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
 200c224:	e13ffe17 	ldw	r4,-8(fp)
 200c228:	2013ce00 	call	2013ce0 <__malloc_unlock>
      return 0; /* propagate failure */
 200c22c:	0005883a 	mov	r2,zero
 200c230:	00001806 	br	200c294 <_malloc_r+0xb68>
    }
  }

  victim = top;
 200c234:	008080b4 	movhi	r2,514
 200c238:	10bc9504 	addi	r2,r2,-3500
 200c23c:	10800217 	ldw	r2,8(r2)
 200c240:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
 200c244:	e0bffa17 	ldw	r2,-24(fp)
 200c248:	10c00054 	ori	r3,r2,1
 200c24c:	e0bff117 	ldw	r2,-60(fp)
 200c250:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 200c254:	008080b4 	movhi	r2,514
 200c258:	10bc9504 	addi	r2,r2,-3500
 200c25c:	e13ff117 	ldw	r4,-60(fp)
 200c260:	e0fffa17 	ldw	r3,-24(fp)
 200c264:	20c7883a 	add	r3,r4,r3
 200c268:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 200c26c:	008080b4 	movhi	r2,514
 200c270:	10bc9504 	addi	r2,r2,-3500
 200c274:	10800217 	ldw	r2,8(r2)
 200c278:	e0fff417 	ldw	r3,-48(fp)
 200c27c:	18c00054 	ori	r3,r3,1
 200c280:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
 200c284:	e13ffe17 	ldw	r4,-8(fp)
 200c288:	2013ce00 	call	2013ce0 <__malloc_unlock>
  return chunk2mem(victim);
 200c28c:	e0bff117 	ldw	r2,-60(fp)
 200c290:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200c294:	e037883a 	mov	sp,fp
 200c298:	dfc00117 	ldw	ra,4(sp)
 200c29c:	df000017 	ldw	fp,0(sp)
 200c2a0:	dec00204 	addi	sp,sp,8
 200c2a4:	f800283a 	ret

0200c2a8 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
 200c2a8:	defff704 	addi	sp,sp,-36
 200c2ac:	df000815 	stw	fp,32(sp)
 200c2b0:	df000804 	addi	fp,sp,32
 200c2b4:	e13ffd15 	stw	r4,-12(fp)
 200c2b8:	e17ffe15 	stw	r5,-8(fp)
 200c2bc:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
 200c2c0:	e0bffd17 	ldw	r2,-12(fp)
 200c2c4:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
 200c2c8:	e0bffe17 	ldw	r2,-8(fp)
 200c2cc:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200c2d0:	00001006 	br	200c314 <memchr+0x6c>
    {
      if (!length--)
 200c2d4:	e0bfff17 	ldw	r2,-4(fp)
 200c2d8:	10ffffc4 	addi	r3,r2,-1
 200c2dc:	e0ffff15 	stw	r3,-4(fp)
 200c2e0:	1000021e 	bne	r2,zero,200c2ec <memchr+0x44>
        return NULL;
 200c2e4:	0005883a 	mov	r2,zero
 200c2e8:	00005a06 	br	200c454 <memchr+0x1ac>
      if (*src == d)
 200c2ec:	e0bff817 	ldw	r2,-32(fp)
 200c2f0:	10800003 	ldbu	r2,0(r2)
 200c2f4:	10c03fcc 	andi	r3,r2,255
 200c2f8:	e0bffc03 	ldbu	r2,-16(fp)
 200c2fc:	1880021e 	bne	r3,r2,200c308 <memchr+0x60>
        return (void *) src;
 200c300:	e0bff817 	ldw	r2,-32(fp)
 200c304:	00005306 	br	200c454 <memchr+0x1ac>
      src++;
 200c308:	e0bff817 	ldw	r2,-32(fp)
 200c30c:	10800044 	addi	r2,r2,1
 200c310:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 200c314:	e0bff817 	ldw	r2,-32(fp)
 200c318:	108000cc 	andi	r2,r2,3
 200c31c:	103fed1e 	bne	r2,zero,200c2d4 <memchr+0x2c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
 200c320:	e0bfff17 	ldw	r2,-4(fp)
 200c324:	10800130 	cmpltui	r2,r2,4
 200c328:	1000451e 	bne	r2,zero,200c440 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 200c32c:	e0bff817 	ldw	r2,-32(fp)
 200c330:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
 200c334:	e0bffc03 	ldbu	r2,-16(fp)
 200c338:	1006923a 	slli	r3,r2,8
 200c33c:	e0bffc03 	ldbu	r2,-16(fp)
 200c340:	1884b03a 	or	r2,r3,r2
 200c344:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
 200c348:	e0bffa17 	ldw	r2,-24(fp)
 200c34c:	1004943a 	slli	r2,r2,16
 200c350:	e0fffa17 	ldw	r3,-24(fp)
 200c354:	1884b03a 	or	r2,r3,r2
 200c358:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200c35c:	00800804 	movi	r2,32
 200c360:	e0bffb15 	stw	r2,-20(fp)
 200c364:	00000906 	br	200c38c <memchr+0xe4>
        mask = (mask << i) | mask;
 200c368:	e0fffa17 	ldw	r3,-24(fp)
 200c36c:	e0bffb17 	ldw	r2,-20(fp)
 200c370:	1884983a 	sll	r2,r3,r2
 200c374:	e0fffa17 	ldw	r3,-24(fp)
 200c378:	1884b03a 	or	r2,r3,r2
 200c37c:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 200c380:	e0bffb17 	ldw	r2,-20(fp)
 200c384:	1085883a 	add	r2,r2,r2
 200c388:	e0bffb15 	stw	r2,-20(fp)
 200c38c:	e0bffb17 	ldw	r2,-20(fp)
 200c390:	10800830 	cmpltui	r2,r2,32
 200c394:	103ff41e 	bne	r2,zero,200c368 <memchr+0xc0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200c398:	00001706 	br	200c3f8 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 200c39c:	e0bff917 	ldw	r2,-28(fp)
 200c3a0:	10c00017 	ldw	r3,0(r2)
 200c3a4:	e0bffa17 	ldw	r2,-24(fp)
 200c3a8:	1886f03a 	xor	r3,r3,r2
 200c3ac:	00bfbff4 	movhi	r2,65279
 200c3b0:	10bfbfc4 	addi	r2,r2,-257
 200c3b4:	1887883a 	add	r3,r3,r2
 200c3b8:	e0bff917 	ldw	r2,-28(fp)
 200c3bc:	11000017 	ldw	r4,0(r2)
 200c3c0:	e0bffa17 	ldw	r2,-24(fp)
 200c3c4:	2084f03a 	xor	r2,r4,r2
 200c3c8:	0084303a 	nor	r2,zero,r2
 200c3cc:	1886703a 	and	r3,r3,r2
 200c3d0:	00a02074 	movhi	r2,32897
 200c3d4:	10a02004 	addi	r2,r2,-32640
 200c3d8:	1884703a 	and	r2,r3,r2
 200c3dc:	10000a1e 	bne	r2,zero,200c408 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 200c3e0:	e0bfff17 	ldw	r2,-4(fp)
 200c3e4:	10bfff04 	addi	r2,r2,-4
 200c3e8:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
 200c3ec:	e0bff917 	ldw	r2,-28(fp)
 200c3f0:	10800104 	addi	r2,r2,4
 200c3f4:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
 200c3f8:	e0bfff17 	ldw	r2,-4(fp)
 200c3fc:	10800128 	cmpgeui	r2,r2,4
 200c400:	103fe61e 	bne	r2,zero,200c39c <memchr+0xf4>
 200c404:	00000106 	br	200c40c <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
 200c408:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 200c40c:	e0bff917 	ldw	r2,-28(fp)
 200c410:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200c414:	00000a06 	br	200c440 <memchr+0x198>
    {
      if (*src == d)
 200c418:	e0bff817 	ldw	r2,-32(fp)
 200c41c:	10800003 	ldbu	r2,0(r2)
 200c420:	10c03fcc 	andi	r3,r2,255
 200c424:	e0bffc03 	ldbu	r2,-16(fp)
 200c428:	1880021e 	bne	r3,r2,200c434 <memchr+0x18c>
        return (void *) src;
 200c42c:	e0bff817 	ldw	r2,-32(fp)
 200c430:	00000806 	br	200c454 <memchr+0x1ac>
      src++;
 200c434:	e0bff817 	ldw	r2,-32(fp)
 200c438:	10800044 	addi	r2,r2,1
 200c43c:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 200c440:	e0bfff17 	ldw	r2,-4(fp)
 200c444:	10ffffc4 	addi	r3,r2,-1
 200c448:	e0ffff15 	stw	r3,-4(fp)
 200c44c:	103ff21e 	bne	r2,zero,200c418 <memchr+0x170>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
 200c450:	0005883a 	mov	r2,zero
}
 200c454:	e037883a 	mov	sp,fp
 200c458:	df000017 	ldw	fp,0(sp)
 200c45c:	dec00104 	addi	sp,sp,4
 200c460:	f800283a 	ret

0200c464 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
 200c464:	defff804 	addi	sp,sp,-32
 200c468:	df000715 	stw	fp,28(sp)
 200c46c:	df000704 	addi	fp,sp,28
 200c470:	e13ffd15 	stw	r4,-12(fp)
 200c474:	e17ffe15 	stw	r5,-8(fp)
 200c478:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 200c47c:	e0bffd17 	ldw	r2,-12(fp)
 200c480:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
 200c484:	e0bffe17 	ldw	r2,-8(fp)
 200c488:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200c48c:	e0fffa17 	ldw	r3,-24(fp)
 200c490:	e0bff917 	ldw	r2,-28(fp)
 200c494:	18801d2e 	bgeu	r3,r2,200c50c <memmove+0xa8>
 200c498:	e0fffa17 	ldw	r3,-24(fp)
 200c49c:	e0bfff17 	ldw	r2,-4(fp)
 200c4a0:	1885883a 	add	r2,r3,r2
 200c4a4:	e0fff917 	ldw	r3,-28(fp)
 200c4a8:	1880182e 	bgeu	r3,r2,200c50c <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 200c4ac:	e0fffa17 	ldw	r3,-24(fp)
 200c4b0:	e0bfff17 	ldw	r2,-4(fp)
 200c4b4:	1885883a 	add	r2,r3,r2
 200c4b8:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
 200c4bc:	e0fff917 	ldw	r3,-28(fp)
 200c4c0:	e0bfff17 	ldw	r2,-4(fp)
 200c4c4:	1885883a 	add	r2,r3,r2
 200c4c8:	e0bff915 	stw	r2,-28(fp)
      while (length--)
 200c4cc:	00000a06 	br	200c4f8 <memmove+0x94>
	{
	  *--dst = *--src;
 200c4d0:	e0bff917 	ldw	r2,-28(fp)
 200c4d4:	10bfffc4 	addi	r2,r2,-1
 200c4d8:	e0bff915 	stw	r2,-28(fp)
 200c4dc:	e0bffa17 	ldw	r2,-24(fp)
 200c4e0:	10bfffc4 	addi	r2,r2,-1
 200c4e4:	e0bffa15 	stw	r2,-24(fp)
 200c4e8:	e0bffa17 	ldw	r2,-24(fp)
 200c4ec:	10c00003 	ldbu	r3,0(r2)
 200c4f0:	e0bff917 	ldw	r2,-28(fp)
 200c4f4:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
 200c4f8:	e0bfff17 	ldw	r2,-4(fp)
 200c4fc:	10ffffc4 	addi	r3,r2,-1
 200c500:	e0ffff15 	stw	r3,-4(fp)
 200c504:	103ff21e 	bne	r2,zero,200c4d0 <memmove+0x6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
 200c508:	00005306 	br	200c658 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 200c50c:	e0bfff17 	ldw	r2,-4(fp)
 200c510:	10800430 	cmpltui	r2,r2,16
 200c514:	10004c1e 	bne	r2,zero,200c648 <memmove+0x1e4>
 200c518:	e0fffa17 	ldw	r3,-24(fp)
 200c51c:	e0bff917 	ldw	r2,-28(fp)
 200c520:	1884b03a 	or	r2,r3,r2
 200c524:	108000cc 	andi	r2,r2,3
 200c528:	1000471e 	bne	r2,zero,200c648 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 200c52c:	e0bff917 	ldw	r2,-28(fp)
 200c530:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
 200c534:	e0bffa17 	ldw	r2,-24(fp)
 200c538:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200c53c:	00002306 	br	200c5cc <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 200c540:	e0bffb17 	ldw	r2,-20(fp)
 200c544:	10c00104 	addi	r3,r2,4
 200c548:	e0fffb15 	stw	r3,-20(fp)
 200c54c:	e0fffc17 	ldw	r3,-16(fp)
 200c550:	19000104 	addi	r4,r3,4
 200c554:	e13ffc15 	stw	r4,-16(fp)
 200c558:	18c00017 	ldw	r3,0(r3)
 200c55c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c560:	e0bffb17 	ldw	r2,-20(fp)
 200c564:	10c00104 	addi	r3,r2,4
 200c568:	e0fffb15 	stw	r3,-20(fp)
 200c56c:	e0fffc17 	ldw	r3,-16(fp)
 200c570:	19000104 	addi	r4,r3,4
 200c574:	e13ffc15 	stw	r4,-16(fp)
 200c578:	18c00017 	ldw	r3,0(r3)
 200c57c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c580:	e0bffb17 	ldw	r2,-20(fp)
 200c584:	10c00104 	addi	r3,r2,4
 200c588:	e0fffb15 	stw	r3,-20(fp)
 200c58c:	e0fffc17 	ldw	r3,-16(fp)
 200c590:	19000104 	addi	r4,r3,4
 200c594:	e13ffc15 	stw	r4,-16(fp)
 200c598:	18c00017 	ldw	r3,0(r3)
 200c59c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 200c5a0:	e0bffb17 	ldw	r2,-20(fp)
 200c5a4:	10c00104 	addi	r3,r2,4
 200c5a8:	e0fffb15 	stw	r3,-20(fp)
 200c5ac:	e0fffc17 	ldw	r3,-16(fp)
 200c5b0:	19000104 	addi	r4,r3,4
 200c5b4:	e13ffc15 	stw	r4,-16(fp)
 200c5b8:	18c00017 	ldw	r3,0(r3)
 200c5bc:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 200c5c0:	e0bfff17 	ldw	r2,-4(fp)
 200c5c4:	10bffc04 	addi	r2,r2,-16
 200c5c8:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 200c5cc:	e0bfff17 	ldw	r2,-4(fp)
 200c5d0:	10800428 	cmpgeui	r2,r2,16
 200c5d4:	103fda1e 	bne	r2,zero,200c540 <memmove+0xdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200c5d8:	00000b06 	br	200c608 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 200c5dc:	e0bffb17 	ldw	r2,-20(fp)
 200c5e0:	10c00104 	addi	r3,r2,4
 200c5e4:	e0fffb15 	stw	r3,-20(fp)
 200c5e8:	e0fffc17 	ldw	r3,-16(fp)
 200c5ec:	19000104 	addi	r4,r3,4
 200c5f0:	e13ffc15 	stw	r4,-16(fp)
 200c5f4:	18c00017 	ldw	r3,0(r3)
 200c5f8:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 200c5fc:	e0bfff17 	ldw	r2,-4(fp)
 200c600:	10bfff04 	addi	r2,r2,-4
 200c604:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 200c608:	e0bfff17 	ldw	r2,-4(fp)
 200c60c:	10800128 	cmpgeui	r2,r2,4
 200c610:	103ff21e 	bne	r2,zero,200c5dc <memmove+0x178>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 200c614:	e0bffb17 	ldw	r2,-20(fp)
 200c618:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
 200c61c:	e0bffc17 	ldw	r2,-16(fp)
 200c620:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
 200c624:	00000806 	br	200c648 <memmove+0x1e4>
        {
          *dst++ = *src++;
 200c628:	e0bff917 	ldw	r2,-28(fp)
 200c62c:	10c00044 	addi	r3,r2,1
 200c630:	e0fff915 	stw	r3,-28(fp)
 200c634:	e0fffa17 	ldw	r3,-24(fp)
 200c638:	19000044 	addi	r4,r3,1
 200c63c:	e13ffa15 	stw	r4,-24(fp)
 200c640:	18c00003 	ldbu	r3,0(r3)
 200c644:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
 200c648:	e0bfff17 	ldw	r2,-4(fp)
 200c64c:	10ffffc4 	addi	r3,r2,-1
 200c650:	e0ffff15 	stw	r3,-4(fp)
 200c654:	103ff41e 	bne	r2,zero,200c628 <memmove+0x1c4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
 200c658:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200c65c:	e037883a 	mov	sp,fp
 200c660:	df000017 	ldw	fp,0(sp)
 200c664:	dec00104 	addi	sp,sp,4
 200c668:	f800283a 	ret

0200c66c <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
 200c66c:	defffa04 	addi	sp,sp,-24
 200c670:	dfc00515 	stw	ra,20(sp)
 200c674:	df000415 	stw	fp,16(sp)
 200c678:	df000404 	addi	fp,sp,16
 200c67c:	e13ffe15 	stw	r4,-8(fp)
 200c680:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 200c684:	e0bffe17 	ldw	r2,-8(fp)
 200c688:	10801317 	ldw	r2,76(r2)
 200c68c:	10000c1e 	bne	r2,zero,200c6c0 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 200c690:	01800844 	movi	r6,33
 200c694:	01400104 	movi	r5,4
 200c698:	e13ffe17 	ldw	r4,-8(fp)
 200c69c:	20106f80 	call	20106f8 <_calloc_r>
 200c6a0:	1007883a 	mov	r3,r2
 200c6a4:	e0bffe17 	ldw	r2,-8(fp)
 200c6a8:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 200c6ac:	e0bffe17 	ldw	r2,-8(fp)
 200c6b0:	10801317 	ldw	r2,76(r2)
 200c6b4:	1000021e 	bne	r2,zero,200c6c0 <_Balloc+0x54>
	{
	  return NULL;
 200c6b8:	0005883a 	mov	r2,zero
 200c6bc:	00003206 	br	200c788 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 200c6c0:	e0bffe17 	ldw	r2,-8(fp)
 200c6c4:	10c01317 	ldw	r3,76(r2)
 200c6c8:	e0bfff17 	ldw	r2,-4(fp)
 200c6cc:	1085883a 	add	r2,r2,r2
 200c6d0:	1085883a 	add	r2,r2,r2
 200c6d4:	1885883a 	add	r2,r3,r2
 200c6d8:	10800017 	ldw	r2,0(r2)
 200c6dc:	e0bffc15 	stw	r2,-16(fp)
 200c6e0:	e0bffc17 	ldw	r2,-16(fp)
 200c6e4:	10000a26 	beq	r2,zero,200c710 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 200c6e8:	e0bffe17 	ldw	r2,-8(fp)
 200c6ec:	10c01317 	ldw	r3,76(r2)
 200c6f0:	e0bfff17 	ldw	r2,-4(fp)
 200c6f4:	1085883a 	add	r2,r2,r2
 200c6f8:	1085883a 	add	r2,r2,r2
 200c6fc:	1885883a 	add	r2,r3,r2
 200c700:	e0fffc17 	ldw	r3,-16(fp)
 200c704:	18c00017 	ldw	r3,0(r3)
 200c708:	10c00015 	stw	r3,0(r2)
 200c70c:	00001706 	br	200c76c <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
 200c710:	00c00044 	movi	r3,1
 200c714:	e0bfff17 	ldw	r2,-4(fp)
 200c718:	1884983a 	sll	r2,r3,r2
 200c71c:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 200c720:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
 200c724:	10800144 	addi	r2,r2,5
 200c728:	1085883a 	add	r2,r2,r2
 200c72c:	1085883a 	add	r2,r2,r2
 200c730:	100d883a 	mov	r6,r2
 200c734:	01400044 	movi	r5,1
 200c738:	e13ffe17 	ldw	r4,-8(fp)
 200c73c:	20106f80 	call	20106f8 <_calloc_r>
 200c740:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 200c744:	e0bffc17 	ldw	r2,-16(fp)
 200c748:	1000021e 	bne	r2,zero,200c754 <_Balloc+0xe8>
 200c74c:	0005883a 	mov	r2,zero
 200c750:	00000d06 	br	200c788 <_Balloc+0x11c>
      rv->_k = k;
 200c754:	e0bffc17 	ldw	r2,-16(fp)
 200c758:	e0ffff17 	ldw	r3,-4(fp)
 200c75c:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 200c760:	e0bffc17 	ldw	r2,-16(fp)
 200c764:	e0fffd17 	ldw	r3,-12(fp)
 200c768:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 200c76c:	e0bffc17 	ldw	r2,-16(fp)
 200c770:	10000415 	stw	zero,16(r2)
 200c774:	e0bffc17 	ldw	r2,-16(fp)
 200c778:	10c00417 	ldw	r3,16(r2)
 200c77c:	e0bffc17 	ldw	r2,-16(fp)
 200c780:	10c00315 	stw	r3,12(r2)
  return rv;
 200c784:	e0bffc17 	ldw	r2,-16(fp)
}
 200c788:	e037883a 	mov	sp,fp
 200c78c:	dfc00117 	ldw	ra,4(sp)
 200c790:	df000017 	ldw	fp,0(sp)
 200c794:	dec00204 	addi	sp,sp,8
 200c798:	f800283a 	ret

0200c79c <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
 200c79c:	defffd04 	addi	sp,sp,-12
 200c7a0:	df000215 	stw	fp,8(sp)
 200c7a4:	df000204 	addi	fp,sp,8
 200c7a8:	e13ffe15 	stw	r4,-8(fp)
 200c7ac:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 200c7b0:	e0bfff17 	ldw	r2,-4(fp)
 200c7b4:	10001326 	beq	r2,zero,200c804 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 200c7b8:	e0bffe17 	ldw	r2,-8(fp)
 200c7bc:	10c01317 	ldw	r3,76(r2)
 200c7c0:	e0bfff17 	ldw	r2,-4(fp)
 200c7c4:	10800117 	ldw	r2,4(r2)
 200c7c8:	1085883a 	add	r2,r2,r2
 200c7cc:	1085883a 	add	r2,r2,r2
 200c7d0:	1885883a 	add	r2,r3,r2
 200c7d4:	10c00017 	ldw	r3,0(r2)
 200c7d8:	e0bfff17 	ldw	r2,-4(fp)
 200c7dc:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 200c7e0:	e0bffe17 	ldw	r2,-8(fp)
 200c7e4:	10c01317 	ldw	r3,76(r2)
 200c7e8:	e0bfff17 	ldw	r2,-4(fp)
 200c7ec:	10800117 	ldw	r2,4(r2)
 200c7f0:	1085883a 	add	r2,r2,r2
 200c7f4:	1085883a 	add	r2,r2,r2
 200c7f8:	1885883a 	add	r2,r3,r2
 200c7fc:	e0ffff17 	ldw	r3,-4(fp)
 200c800:	10c00015 	stw	r3,0(r2)
    }
}
 200c804:	0001883a 	nop
 200c808:	e037883a 	mov	sp,fp
 200c80c:	df000017 	ldw	fp,0(sp)
 200c810:	dec00104 	addi	sp,sp,4
 200c814:	f800283a 	ret

0200c818 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
 200c818:	defff304 	addi	sp,sp,-52
 200c81c:	dfc00c15 	stw	ra,48(sp)
 200c820:	df000b15 	stw	fp,44(sp)
 200c824:	df000b04 	addi	fp,sp,44
 200c828:	e13ffc15 	stw	r4,-16(fp)
 200c82c:	e17ffd15 	stw	r5,-12(fp)
 200c830:	e1bffe15 	stw	r6,-8(fp)
 200c834:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 200c838:	e0bffd17 	ldw	r2,-12(fp)
 200c83c:	10800417 	ldw	r2,16(r2)
 200c840:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
 200c844:	e0bffd17 	ldw	r2,-12(fp)
 200c848:	10800504 	addi	r2,r2,20
 200c84c:	e0bff615 	stw	r2,-40(fp)
  i = 0;
 200c850:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 200c854:	e0bff617 	ldw	r2,-40(fp)
 200c858:	10800017 	ldw	r2,0(r2)
 200c85c:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
 200c860:	e0bff817 	ldw	r2,-32(fp)
 200c864:	10ffffcc 	andi	r3,r2,65535
 200c868:	e0bffe17 	ldw	r2,-8(fp)
 200c86c:	1887383a 	mul	r3,r3,r2
 200c870:	e0bfff17 	ldw	r2,-4(fp)
 200c874:	1885883a 	add	r2,r3,r2
 200c878:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
 200c87c:	e0bff817 	ldw	r2,-32(fp)
 200c880:	1006d43a 	srli	r3,r2,16
 200c884:	e0bffe17 	ldw	r2,-8(fp)
 200c888:	1887383a 	mul	r3,r3,r2
 200c88c:	e0bff917 	ldw	r2,-28(fp)
 200c890:	1004d43a 	srli	r2,r2,16
 200c894:	1885883a 	add	r2,r3,r2
 200c898:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 200c89c:	e0bffa17 	ldw	r2,-24(fp)
 200c8a0:	1004d43a 	srli	r2,r2,16
 200c8a4:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
 200c8a8:	e0bff617 	ldw	r2,-40(fp)
 200c8ac:	10c00104 	addi	r3,r2,4
 200c8b0:	e0fff615 	stw	r3,-40(fp)
 200c8b4:	e0fffa17 	ldw	r3,-24(fp)
 200c8b8:	1808943a 	slli	r4,r3,16
 200c8bc:	e0fff917 	ldw	r3,-28(fp)
 200c8c0:	18ffffcc 	andi	r3,r3,65535
 200c8c4:	20c7883a 	add	r3,r4,r3
 200c8c8:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 200c8cc:	e0bff517 	ldw	r2,-44(fp)
 200c8d0:	10800044 	addi	r2,r2,1
 200c8d4:	e0bff515 	stw	r2,-44(fp)
 200c8d8:	e0fff517 	ldw	r3,-44(fp)
 200c8dc:	e0bff717 	ldw	r2,-36(fp)
 200c8e0:	18bfdc16 	blt	r3,r2,200c854 <__multadd+0x3c>
  if (a)
 200c8e4:	e0bfff17 	ldw	r2,-4(fp)
 200c8e8:	10002a26 	beq	r2,zero,200c994 <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
 200c8ec:	e0bffd17 	ldw	r2,-12(fp)
 200c8f0:	10800217 	ldw	r2,8(r2)
 200c8f4:	e0fff717 	ldw	r3,-36(fp)
 200c8f8:	18801916 	blt	r3,r2,200c960 <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
 200c8fc:	e0bffd17 	ldw	r2,-12(fp)
 200c900:	10800117 	ldw	r2,4(r2)
 200c904:	10800044 	addi	r2,r2,1
 200c908:	100b883a 	mov	r5,r2
 200c90c:	e13ffc17 	ldw	r4,-16(fp)
 200c910:	200c66c0 	call	200c66c <_Balloc>
 200c914:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
 200c918:	e0bffb17 	ldw	r2,-20(fp)
 200c91c:	10c00304 	addi	r3,r2,12
 200c920:	e0bffd17 	ldw	r2,-12(fp)
 200c924:	11000304 	addi	r4,r2,12
 200c928:	e0bffd17 	ldw	r2,-12(fp)
 200c92c:	10800417 	ldw	r2,16(r2)
 200c930:	10800084 	addi	r2,r2,2
 200c934:	1085883a 	add	r2,r2,r2
 200c938:	1085883a 	add	r2,r2,r2
 200c93c:	100d883a 	mov	r6,r2
 200c940:	200b883a 	mov	r5,r4
 200c944:	1809883a 	mov	r4,r3
 200c948:	2004ac40 	call	2004ac4 <memcpy>
	  Bfree (ptr, b);
 200c94c:	e17ffd17 	ldw	r5,-12(fp)
 200c950:	e13ffc17 	ldw	r4,-16(fp)
 200c954:	200c79c0 	call	200c79c <_Bfree>
	  b = b1;
 200c958:	e0bffb17 	ldw	r2,-20(fp)
 200c95c:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
 200c960:	e0bff717 	ldw	r2,-36(fp)
 200c964:	10c00044 	addi	r3,r2,1
 200c968:	e0fff715 	stw	r3,-36(fp)
 200c96c:	e0ffff17 	ldw	r3,-4(fp)
 200c970:	e13ffd17 	ldw	r4,-12(fp)
 200c974:	10800144 	addi	r2,r2,5
 200c978:	1085883a 	add	r2,r2,r2
 200c97c:	1085883a 	add	r2,r2,r2
 200c980:	2085883a 	add	r2,r4,r2
 200c984:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 200c988:	e0bffd17 	ldw	r2,-12(fp)
 200c98c:	e0fff717 	ldw	r3,-36(fp)
 200c990:	10c00415 	stw	r3,16(r2)
    }
  return b;
 200c994:	e0bffd17 	ldw	r2,-12(fp)
}
 200c998:	e037883a 	mov	sp,fp
 200c99c:	dfc00117 	ldw	ra,4(sp)
 200c9a0:	df000017 	ldw	fp,0(sp)
 200c9a4:	dec00204 	addi	sp,sp,8
 200c9a8:	f800283a 	ret

0200c9ac <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
 200c9ac:	defff504 	addi	sp,sp,-44
 200c9b0:	dfc00a15 	stw	ra,40(sp)
 200c9b4:	df000915 	stw	fp,36(sp)
 200c9b8:	df000904 	addi	fp,sp,36
 200c9bc:	e13ffc15 	stw	r4,-16(fp)
 200c9c0:	e17ffd15 	stw	r5,-12(fp)
 200c9c4:	e1bffe15 	stw	r6,-8(fp)
 200c9c8:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 200c9cc:	e0bfff17 	ldw	r2,-4(fp)
 200c9d0:	10800204 	addi	r2,r2,8
 200c9d4:	01400244 	movi	r5,9
 200c9d8:	1009883a 	mov	r4,r2
 200c9dc:	20049100 	call	2004910 <__divsi3>
 200c9e0:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 200c9e4:	e03ff915 	stw	zero,-28(fp)
 200c9e8:	00800044 	movi	r2,1
 200c9ec:	e0bffa15 	stw	r2,-24(fp)
 200c9f0:	00000606 	br	200ca0c <__s2b+0x60>
 200c9f4:	e0bffa17 	ldw	r2,-24(fp)
 200c9f8:	1085883a 	add	r2,r2,r2
 200c9fc:	e0bffa15 	stw	r2,-24(fp)
 200ca00:	e0bff917 	ldw	r2,-28(fp)
 200ca04:	10800044 	addi	r2,r2,1
 200ca08:	e0bff915 	stw	r2,-28(fp)
 200ca0c:	e0bffb17 	ldw	r2,-20(fp)
 200ca10:	e0fffa17 	ldw	r3,-24(fp)
 200ca14:	18bff716 	blt	r3,r2,200c9f4 <__s2b+0x48>
#ifdef Pack_32
  b = Balloc (ptr, k);
 200ca18:	e17ff917 	ldw	r5,-28(fp)
 200ca1c:	e13ffc17 	ldw	r4,-16(fp)
 200ca20:	200c66c0 	call	200c66c <_Balloc>
 200ca24:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
 200ca28:	e0bff717 	ldw	r2,-36(fp)
 200ca2c:	e0c00217 	ldw	r3,8(fp)
 200ca30:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200ca34:	e0bff717 	ldw	r2,-36(fp)
 200ca38:	00c00044 	movi	r3,1
 200ca3c:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 200ca40:	00800244 	movi	r2,9
 200ca44:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
 200ca48:	e0bffe17 	ldw	r2,-8(fp)
 200ca4c:	10800290 	cmplti	r2,r2,10
 200ca50:	10001b1e 	bne	r2,zero,200cac0 <__s2b+0x114>
    {
      s += 9;
 200ca54:	e0bffd17 	ldw	r2,-12(fp)
 200ca58:	10800244 	addi	r2,r2,9
 200ca5c:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 200ca60:	e0bffd17 	ldw	r2,-12(fp)
 200ca64:	10c00044 	addi	r3,r2,1
 200ca68:	e0fffd15 	stw	r3,-12(fp)
 200ca6c:	10800003 	ldbu	r2,0(r2)
 200ca70:	10803fcc 	andi	r2,r2,255
 200ca74:	1080201c 	xori	r2,r2,128
 200ca78:	10bfe004 	addi	r2,r2,-128
 200ca7c:	10bff404 	addi	r2,r2,-48
 200ca80:	100f883a 	mov	r7,r2
 200ca84:	01800284 	movi	r6,10
 200ca88:	e17ff717 	ldw	r5,-36(fp)
 200ca8c:	e13ffc17 	ldw	r4,-16(fp)
 200ca90:	200c8180 	call	200c818 <__multadd>
 200ca94:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
 200ca98:	e0bff817 	ldw	r2,-32(fp)
 200ca9c:	10800044 	addi	r2,r2,1
 200caa0:	e0bff815 	stw	r2,-32(fp)
 200caa4:	e0fff817 	ldw	r3,-32(fp)
 200caa8:	e0bffe17 	ldw	r2,-8(fp)
 200caac:	18bfec16 	blt	r3,r2,200ca60 <__s2b+0xb4>
      s++;
 200cab0:	e0bffd17 	ldw	r2,-12(fp)
 200cab4:	10800044 	addi	r2,r2,1
 200cab8:	e0bffd15 	stw	r2,-12(fp)
 200cabc:	00001506 	br	200cb14 <__s2b+0x168>
    }
  else
    s += 10;
 200cac0:	e0bffd17 	ldw	r2,-12(fp)
 200cac4:	10800284 	addi	r2,r2,10
 200cac8:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
 200cacc:	00001106 	br	200cb14 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
 200cad0:	e0bffd17 	ldw	r2,-12(fp)
 200cad4:	10c00044 	addi	r3,r2,1
 200cad8:	e0fffd15 	stw	r3,-12(fp)
 200cadc:	10800003 	ldbu	r2,0(r2)
 200cae0:	10803fcc 	andi	r2,r2,255
 200cae4:	1080201c 	xori	r2,r2,128
 200cae8:	10bfe004 	addi	r2,r2,-128
 200caec:	10bff404 	addi	r2,r2,-48
 200caf0:	100f883a 	mov	r7,r2
 200caf4:	01800284 	movi	r6,10
 200caf8:	e17ff717 	ldw	r5,-36(fp)
 200cafc:	e13ffc17 	ldw	r4,-16(fp)
 200cb00:	200c8180 	call	200c818 <__multadd>
 200cb04:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
 200cb08:	e0bff817 	ldw	r2,-32(fp)
 200cb0c:	10800044 	addi	r2,r2,1
 200cb10:	e0bff815 	stw	r2,-32(fp)
 200cb14:	e0fff817 	ldw	r3,-32(fp)
 200cb18:	e0bfff17 	ldw	r2,-4(fp)
 200cb1c:	18bfec16 	blt	r3,r2,200cad0 <__s2b+0x124>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
 200cb20:	e0bff717 	ldw	r2,-36(fp)
}
 200cb24:	e037883a 	mov	sp,fp
 200cb28:	dfc00117 	ldw	ra,4(sp)
 200cb2c:	df000017 	ldw	fp,0(sp)
 200cb30:	dec00204 	addi	sp,sp,8
 200cb34:	f800283a 	ret

0200cb38 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
 200cb38:	defffe04 	addi	sp,sp,-8
 200cb3c:	df000115 	stw	fp,4(sp)
 200cb40:	dc000015 	stw	r16,0(sp)
 200cb44:	df000104 	addi	fp,sp,4
 200cb48:	2005883a 	mov	r2,r4
  register int k = 0;
 200cb4c:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 200cb50:	10ffffec 	andhi	r3,r2,65535
 200cb54:	1800021e 	bne	r3,zero,200cb60 <__hi0bits+0x28>
    {
      k = 16;
 200cb58:	04000404 	movi	r16,16
      x <<= 16;
 200cb5c:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 200cb60:	10ffc02c 	andhi	r3,r2,65280
 200cb64:	1800021e 	bne	r3,zero,200cb70 <__hi0bits+0x38>
    {
      k += 8;
 200cb68:	84000204 	addi	r16,r16,8
      x <<= 8;
 200cb6c:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 200cb70:	10fc002c 	andhi	r3,r2,61440
 200cb74:	1800021e 	bne	r3,zero,200cb80 <__hi0bits+0x48>
    {
      k += 4;
 200cb78:	84000104 	addi	r16,r16,4
      x <<= 4;
 200cb7c:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 200cb80:	10f0002c 	andhi	r3,r2,49152
 200cb84:	1800031e 	bne	r3,zero,200cb94 <__hi0bits+0x5c>
    {
      k += 2;
 200cb88:	84000084 	addi	r16,r16,2
      x <<= 2;
 200cb8c:	1085883a 	add	r2,r2,r2
 200cb90:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
 200cb94:	1007883a 	mov	r3,r2
 200cb98:	18000516 	blt	r3,zero,200cbb0 <__hi0bits+0x78>
    {
      k++;
 200cb9c:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 200cba0:	1090002c 	andhi	r2,r2,16384
 200cba4:	1000021e 	bne	r2,zero,200cbb0 <__hi0bits+0x78>
	return 32;
 200cba8:	00800804 	movi	r2,32
 200cbac:	00000106 	br	200cbb4 <__hi0bits+0x7c>
    }
  return k;
 200cbb0:	8005883a 	mov	r2,r16
}
 200cbb4:	e6ffff04 	addi	sp,fp,-4
 200cbb8:	df000117 	ldw	fp,4(sp)
 200cbbc:	dc000017 	ldw	r16,0(sp)
 200cbc0:	dec00204 	addi	sp,sp,8
 200cbc4:	f800283a 	ret

0200cbc8 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
 200cbc8:	defffc04 	addi	sp,sp,-16
 200cbcc:	df000315 	stw	fp,12(sp)
 200cbd0:	dc400215 	stw	r17,8(sp)
 200cbd4:	dc000115 	stw	r16,4(sp)
 200cbd8:	df000304 	addi	fp,sp,12
 200cbdc:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 200cbe0:	e0bffd17 	ldw	r2,-12(fp)
 200cbe4:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 200cbe8:	808001cc 	andi	r2,r16,7
 200cbec:	10001026 	beq	r2,zero,200cc30 <__lo0bits+0x68>
    {
      if (x & 1)
 200cbf0:	8080004c 	andi	r2,r16,1
 200cbf4:	10000226 	beq	r2,zero,200cc00 <__lo0bits+0x38>
	return 0;
 200cbf8:	0005883a 	mov	r2,zero
 200cbfc:	00002706 	br	200cc9c <__lo0bits+0xd4>
      if (x & 2)
 200cc00:	8080008c 	andi	r2,r16,2
 200cc04:	10000526 	beq	r2,zero,200cc1c <__lo0bits+0x54>
	{
	  *y = x >> 1;
 200cc08:	8006d07a 	srli	r3,r16,1
 200cc0c:	e0bffd17 	ldw	r2,-12(fp)
 200cc10:	10c00015 	stw	r3,0(r2)
	  return 1;
 200cc14:	00800044 	movi	r2,1
 200cc18:	00002006 	br	200cc9c <__lo0bits+0xd4>
	}
      *y = x >> 2;
 200cc1c:	8006d0ba 	srli	r3,r16,2
 200cc20:	e0bffd17 	ldw	r2,-12(fp)
 200cc24:	10c00015 	stw	r3,0(r2)
      return 2;
 200cc28:	00800084 	movi	r2,2
 200cc2c:	00001b06 	br	200cc9c <__lo0bits+0xd4>
    }
  k = 0;
 200cc30:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 200cc34:	80bfffcc 	andi	r2,r16,65535
 200cc38:	1000021e 	bne	r2,zero,200cc44 <__lo0bits+0x7c>
    {
      k = 16;
 200cc3c:	04400404 	movi	r17,16
      x >>= 16;
 200cc40:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 200cc44:	80803fcc 	andi	r2,r16,255
 200cc48:	1000021e 	bne	r2,zero,200cc54 <__lo0bits+0x8c>
    {
      k += 8;
 200cc4c:	8c400204 	addi	r17,r17,8
      x >>= 8;
 200cc50:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 200cc54:	808003cc 	andi	r2,r16,15
 200cc58:	1000021e 	bne	r2,zero,200cc64 <__lo0bits+0x9c>
    {
      k += 4;
 200cc5c:	8c400104 	addi	r17,r17,4
      x >>= 4;
 200cc60:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 200cc64:	808000cc 	andi	r2,r16,3
 200cc68:	1000021e 	bne	r2,zero,200cc74 <__lo0bits+0xac>
    {
      k += 2;
 200cc6c:	8c400084 	addi	r17,r17,2
      x >>= 2;
 200cc70:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 200cc74:	8080004c 	andi	r2,r16,1
 200cc78:	1000051e 	bne	r2,zero,200cc90 <__lo0bits+0xc8>
    {
      k++;
 200cc7c:	8c400044 	addi	r17,r17,1
      x >>= 1;
 200cc80:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 200cc84:	8000021e 	bne	r16,zero,200cc90 <__lo0bits+0xc8>
	return 32;
 200cc88:	00800804 	movi	r2,32
 200cc8c:	00000306 	br	200cc9c <__lo0bits+0xd4>
    }
  *y = x;
 200cc90:	e0bffd17 	ldw	r2,-12(fp)
 200cc94:	14000015 	stw	r16,0(r2)
  return k;
 200cc98:	8805883a 	mov	r2,r17
}
 200cc9c:	e6fffe04 	addi	sp,fp,-8
 200cca0:	df000217 	ldw	fp,8(sp)
 200cca4:	dc400117 	ldw	r17,4(sp)
 200cca8:	dc000017 	ldw	r16,0(sp)
 200ccac:	dec00304 	addi	sp,sp,12
 200ccb0:	f800283a 	ret

0200ccb4 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
 200ccb4:	defffb04 	addi	sp,sp,-20
 200ccb8:	dfc00415 	stw	ra,16(sp)
 200ccbc:	df000315 	stw	fp,12(sp)
 200ccc0:	df000304 	addi	fp,sp,12
 200ccc4:	e13ffe15 	stw	r4,-8(fp)
 200ccc8:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
 200cccc:	01400044 	movi	r5,1
 200ccd0:	e13ffe17 	ldw	r4,-8(fp)
 200ccd4:	200c66c0 	call	200c66c <_Balloc>
 200ccd8:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
 200ccdc:	e0ffff17 	ldw	r3,-4(fp)
 200cce0:	e0bffd17 	ldw	r2,-12(fp)
 200cce4:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 200cce8:	e0bffd17 	ldw	r2,-12(fp)
 200ccec:	00c00044 	movi	r3,1
 200ccf0:	10c00415 	stw	r3,16(r2)
  return b;
 200ccf4:	e0bffd17 	ldw	r2,-12(fp)
}
 200ccf8:	e037883a 	mov	sp,fp
 200ccfc:	dfc00117 	ldw	ra,4(sp)
 200cd00:	df000017 	ldw	fp,0(sp)
 200cd04:	dec00204 	addi	sp,sp,8
 200cd08:	f800283a 	ret

0200cd0c <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
 200cd0c:	deffeb04 	addi	sp,sp,-84
 200cd10:	dfc01415 	stw	ra,80(sp)
 200cd14:	df001315 	stw	fp,76(sp)
 200cd18:	df001304 	addi	fp,sp,76
 200cd1c:	e13ffd15 	stw	r4,-12(fp)
 200cd20:	e17ffe15 	stw	r5,-8(fp)
 200cd24:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 200cd28:	e0bffe17 	ldw	r2,-8(fp)
 200cd2c:	10c00417 	ldw	r3,16(r2)
 200cd30:	e0bfff17 	ldw	r2,-4(fp)
 200cd34:	10800417 	ldw	r2,16(r2)
 200cd38:	1880060e 	bge	r3,r2,200cd54 <__multiply+0x48>
    {
      c = a;
 200cd3c:	e0bffe17 	ldw	r2,-8(fp)
 200cd40:	e0bff515 	stw	r2,-44(fp)
      a = b;
 200cd44:	e0bfff17 	ldw	r2,-4(fp)
 200cd48:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200cd4c:	e0bff517 	ldw	r2,-44(fp)
 200cd50:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
 200cd54:	e0bffe17 	ldw	r2,-8(fp)
 200cd58:	10800117 	ldw	r2,4(r2)
 200cd5c:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
 200cd60:	e0bffe17 	ldw	r2,-8(fp)
 200cd64:	10800417 	ldw	r2,16(r2)
 200cd68:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 200cd6c:	e0bfff17 	ldw	r2,-4(fp)
 200cd70:	10800417 	ldw	r2,16(r2)
 200cd74:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
 200cd78:	e0fff617 	ldw	r3,-40(fp)
 200cd7c:	e0bff717 	ldw	r2,-36(fp)
 200cd80:	1885883a 	add	r2,r3,r2
 200cd84:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
 200cd88:	e0bffe17 	ldw	r2,-8(fp)
 200cd8c:	10c00217 	ldw	r3,8(r2)
 200cd90:	e0bfee17 	ldw	r2,-72(fp)
 200cd94:	1880030e 	bge	r3,r2,200cda4 <__multiply+0x98>
    k++;
 200cd98:	e0bfed17 	ldw	r2,-76(fp)
 200cd9c:	10800044 	addi	r2,r2,1
 200cda0:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
 200cda4:	e17fed17 	ldw	r5,-76(fp)
 200cda8:	e13ffd17 	ldw	r4,-12(fp)
 200cdac:	200c66c0 	call	200c66c <_Balloc>
 200cdb0:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200cdb4:	e0bff517 	ldw	r2,-44(fp)
 200cdb8:	10800504 	addi	r2,r2,20
 200cdbc:	e0bff015 	stw	r2,-64(fp)
 200cdc0:	e0bfee17 	ldw	r2,-72(fp)
 200cdc4:	1085883a 	add	r2,r2,r2
 200cdc8:	1085883a 	add	r2,r2,r2
 200cdcc:	1007883a 	mov	r3,r2
 200cdd0:	e0bff017 	ldw	r2,-64(fp)
 200cdd4:	10c5883a 	add	r2,r2,r3
 200cdd8:	e0bff815 	stw	r2,-32(fp)
 200cddc:	00000506 	br	200cdf4 <__multiply+0xe8>
    *x = 0;
 200cde0:	e0bff017 	ldw	r2,-64(fp)
 200cde4:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
 200cde8:	e0bff017 	ldw	r2,-64(fp)
 200cdec:	10800104 	addi	r2,r2,4
 200cdf0:	e0bff015 	stw	r2,-64(fp)
 200cdf4:	e0fff017 	ldw	r3,-64(fp)
 200cdf8:	e0bff817 	ldw	r2,-32(fp)
 200cdfc:	18bff836 	bltu	r3,r2,200cde0 <__multiply+0xd4>
    *x = 0;
  xa = a->_x;
 200ce00:	e0bffe17 	ldw	r2,-8(fp)
 200ce04:	10800504 	addi	r2,r2,20
 200ce08:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
 200ce0c:	e0bff617 	ldw	r2,-40(fp)
 200ce10:	1085883a 	add	r2,r2,r2
 200ce14:	1085883a 	add	r2,r2,r2
 200ce18:	1007883a 	mov	r3,r2
 200ce1c:	e0bff817 	ldw	r2,-32(fp)
 200ce20:	10c5883a 	add	r2,r2,r3
 200ce24:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200ce28:	e0bfff17 	ldw	r2,-4(fp)
 200ce2c:	10800504 	addi	r2,r2,20
 200ce30:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
 200ce34:	e0bff717 	ldw	r2,-36(fp)
 200ce38:	1085883a 	add	r2,r2,r2
 200ce3c:	1085883a 	add	r2,r2,r2
 200ce40:	1007883a 	mov	r3,r2
 200ce44:	e0bff117 	ldw	r2,-60(fp)
 200ce48:	10c5883a 	add	r2,r2,r3
 200ce4c:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
 200ce50:	e0bff517 	ldw	r2,-44(fp)
 200ce54:	10800504 	addi	r2,r2,20
 200ce58:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200ce5c:	00007d06 	br	200d054 <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
 200ce60:	e0bff117 	ldw	r2,-60(fp)
 200ce64:	10800017 	ldw	r2,0(r2)
 200ce68:	10bfffcc 	andi	r2,r2,65535
 200ce6c:	e0bffb15 	stw	r2,-20(fp)
 200ce70:	e0bffb17 	ldw	r2,-20(fp)
 200ce74:	10003426 	beq	r2,zero,200cf48 <__multiply+0x23c>
	{
	  x = xa;
 200ce78:	e0bff817 	ldw	r2,-32(fp)
 200ce7c:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200ce80:	e0bff317 	ldw	r2,-52(fp)
 200ce84:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200ce88:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 200ce8c:	e0bff017 	ldw	r2,-64(fp)
 200ce90:	10800017 	ldw	r2,0(r2)
 200ce94:	10ffffcc 	andi	r3,r2,65535
 200ce98:	e0bffb17 	ldw	r2,-20(fp)
 200ce9c:	1887383a 	mul	r3,r3,r2
 200cea0:	e0bff217 	ldw	r2,-56(fp)
 200cea4:	10800017 	ldw	r2,0(r2)
 200cea8:	10bfffcc 	andi	r2,r2,65535
 200ceac:	1887883a 	add	r3,r3,r2
 200ceb0:	e0bfef17 	ldw	r2,-68(fp)
 200ceb4:	1885883a 	add	r2,r3,r2
 200ceb8:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200cebc:	e0bffc17 	ldw	r2,-16(fp)
 200cec0:	1004d43a 	srli	r2,r2,16
 200cec4:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 200cec8:	e0bff017 	ldw	r2,-64(fp)
 200cecc:	10c00104 	addi	r3,r2,4
 200ced0:	e0fff015 	stw	r3,-64(fp)
 200ced4:	10800017 	ldw	r2,0(r2)
 200ced8:	1006d43a 	srli	r3,r2,16
 200cedc:	e0bffb17 	ldw	r2,-20(fp)
 200cee0:	1887383a 	mul	r3,r3,r2
 200cee4:	e0bff217 	ldw	r2,-56(fp)
 200cee8:	10800017 	ldw	r2,0(r2)
 200ceec:	1004d43a 	srli	r2,r2,16
 200cef0:	1887883a 	add	r3,r3,r2
 200cef4:	e0bfef17 	ldw	r2,-68(fp)
 200cef8:	1885883a 	add	r2,r3,r2
 200cefc:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200cf00:	e0bff417 	ldw	r2,-48(fp)
 200cf04:	1004d43a 	srli	r2,r2,16
 200cf08:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
 200cf0c:	e0bff217 	ldw	r2,-56(fp)
 200cf10:	10c00104 	addi	r3,r2,4
 200cf14:	e0fff215 	stw	r3,-56(fp)
 200cf18:	e0fff417 	ldw	r3,-48(fp)
 200cf1c:	1808943a 	slli	r4,r3,16
 200cf20:	e0fffc17 	ldw	r3,-16(fp)
 200cf24:	18ffffcc 	andi	r3,r3,65535
 200cf28:	20c6b03a 	or	r3,r4,r3
 200cf2c:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 200cf30:	e0fff017 	ldw	r3,-64(fp)
 200cf34:	e0bff917 	ldw	r2,-28(fp)
 200cf38:	18bfd436 	bltu	r3,r2,200ce8c <__multiply+0x180>
	  *xc = carry;
 200cf3c:	e0bff217 	ldw	r2,-56(fp)
 200cf40:	e0ffef17 	ldw	r3,-68(fp)
 200cf44:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 200cf48:	e0bff117 	ldw	r2,-60(fp)
 200cf4c:	10800017 	ldw	r2,0(r2)
 200cf50:	1004d43a 	srli	r2,r2,16
 200cf54:	e0bffb15 	stw	r2,-20(fp)
 200cf58:	e0bffb17 	ldw	r2,-20(fp)
 200cf5c:	10003726 	beq	r2,zero,200d03c <__multiply+0x330>
	{
	  x = xa;
 200cf60:	e0bff817 	ldw	r2,-32(fp)
 200cf64:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
 200cf68:	e0bff317 	ldw	r2,-52(fp)
 200cf6c:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
 200cf70:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
 200cf74:	e0bff217 	ldw	r2,-56(fp)
 200cf78:	10800017 	ldw	r2,0(r2)
 200cf7c:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 200cf80:	e0bff017 	ldw	r2,-64(fp)
 200cf84:	10800017 	ldw	r2,0(r2)
 200cf88:	10ffffcc 	andi	r3,r2,65535
 200cf8c:	e0bffb17 	ldw	r2,-20(fp)
 200cf90:	1887383a 	mul	r3,r3,r2
 200cf94:	e0bff217 	ldw	r2,-56(fp)
 200cf98:	10800017 	ldw	r2,0(r2)
 200cf9c:	1004d43a 	srli	r2,r2,16
 200cfa0:	1887883a 	add	r3,r3,r2
 200cfa4:	e0bfef17 	ldw	r2,-68(fp)
 200cfa8:	1885883a 	add	r2,r3,r2
 200cfac:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
 200cfb0:	e0bffc17 	ldw	r2,-16(fp)
 200cfb4:	1004d43a 	srli	r2,r2,16
 200cfb8:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
 200cfbc:	e0bff217 	ldw	r2,-56(fp)
 200cfc0:	10c00104 	addi	r3,r2,4
 200cfc4:	e0fff215 	stw	r3,-56(fp)
 200cfc8:	e0fffc17 	ldw	r3,-16(fp)
 200cfcc:	1808943a 	slli	r4,r3,16
 200cfd0:	e0fff417 	ldw	r3,-48(fp)
 200cfd4:	18ffffcc 	andi	r3,r3,65535
 200cfd8:	20c6b03a 	or	r3,r4,r3
 200cfdc:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 200cfe0:	e0bff017 	ldw	r2,-64(fp)
 200cfe4:	10c00104 	addi	r3,r2,4
 200cfe8:	e0fff015 	stw	r3,-64(fp)
 200cfec:	10800017 	ldw	r2,0(r2)
 200cff0:	1006d43a 	srli	r3,r2,16
 200cff4:	e0bffb17 	ldw	r2,-20(fp)
 200cff8:	1887383a 	mul	r3,r3,r2
 200cffc:	e0bff217 	ldw	r2,-56(fp)
 200d000:	10800017 	ldw	r2,0(r2)
 200d004:	10bfffcc 	andi	r2,r2,65535
 200d008:	1887883a 	add	r3,r3,r2
 200d00c:	e0bfef17 	ldw	r2,-68(fp)
 200d010:	1885883a 	add	r2,r3,r2
 200d014:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
 200d018:	e0bff417 	ldw	r2,-48(fp)
 200d01c:	1004d43a 	srli	r2,r2,16
 200d020:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
 200d024:	e0fff017 	ldw	r3,-64(fp)
 200d028:	e0bff917 	ldw	r2,-28(fp)
 200d02c:	18bfd436 	bltu	r3,r2,200cf80 <__multiply+0x274>
	  *xc = z2;
 200d030:	e0bff217 	ldw	r2,-56(fp)
 200d034:	e0fff417 	ldw	r3,-48(fp)
 200d038:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 200d03c:	e0bff117 	ldw	r2,-60(fp)
 200d040:	10800104 	addi	r2,r2,4
 200d044:	e0bff115 	stw	r2,-60(fp)
 200d048:	e0bff317 	ldw	r2,-52(fp)
 200d04c:	10800104 	addi	r2,r2,4
 200d050:	e0bff315 	stw	r2,-52(fp)
 200d054:	e0fff117 	ldw	r3,-60(fp)
 200d058:	e0bffa17 	ldw	r2,-24(fp)
 200d05c:	18bf8036 	bltu	r3,r2,200ce60 <__multiply+0x154>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 200d060:	e0bff517 	ldw	r2,-44(fp)
 200d064:	10800504 	addi	r2,r2,20
 200d068:	e0bff315 	stw	r2,-52(fp)
 200d06c:	e0bfee17 	ldw	r2,-72(fp)
 200d070:	1085883a 	add	r2,r2,r2
 200d074:	1085883a 	add	r2,r2,r2
 200d078:	1007883a 	mov	r3,r2
 200d07c:	e0bff317 	ldw	r2,-52(fp)
 200d080:	10c5883a 	add	r2,r2,r3
 200d084:	e0bff215 	stw	r2,-56(fp)
 200d088:	00000306 	br	200d098 <__multiply+0x38c>
 200d08c:	e0bfee17 	ldw	r2,-72(fp)
 200d090:	10bfffc4 	addi	r2,r2,-1
 200d094:	e0bfee15 	stw	r2,-72(fp)
 200d098:	e0bfee17 	ldw	r2,-72(fp)
 200d09c:	0080060e 	bge	zero,r2,200d0b8 <__multiply+0x3ac>
 200d0a0:	e0bff217 	ldw	r2,-56(fp)
 200d0a4:	10bfff04 	addi	r2,r2,-4
 200d0a8:	e0bff215 	stw	r2,-56(fp)
 200d0ac:	e0bff217 	ldw	r2,-56(fp)
 200d0b0:	10800017 	ldw	r2,0(r2)
 200d0b4:	103ff526 	beq	r2,zero,200d08c <__multiply+0x380>
  c->_wds = wc;
 200d0b8:	e0bff517 	ldw	r2,-44(fp)
 200d0bc:	e0ffee17 	ldw	r3,-72(fp)
 200d0c0:	10c00415 	stw	r3,16(r2)
  return c;
 200d0c4:	e0bff517 	ldw	r2,-44(fp)
}
 200d0c8:	e037883a 	mov	sp,fp
 200d0cc:	dfc00117 	ldw	ra,4(sp)
 200d0d0:	df000017 	ldw	fp,0(sp)
 200d0d4:	dec00204 	addi	sp,sp,8
 200d0d8:	f800283a 	ret

0200d0dc <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200d0dc:	defff704 	addi	sp,sp,-36
 200d0e0:	dfc00815 	stw	ra,32(sp)
 200d0e4:	df000715 	stw	fp,28(sp)
 200d0e8:	df000704 	addi	fp,sp,28
 200d0ec:	e13ffd15 	stw	r4,-12(fp)
 200d0f0:	e17ffe15 	stw	r5,-8(fp)
 200d0f4:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 200d0f8:	e0bfff17 	ldw	r2,-4(fp)
 200d0fc:	108000cc 	andi	r2,r2,3
 200d100:	e0bffb15 	stw	r2,-20(fp)
 200d104:	e0bffb17 	ldw	r2,-20(fp)
 200d108:	10000e26 	beq	r2,zero,200d144 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
 200d10c:	e0bffb17 	ldw	r2,-20(fp)
 200d110:	10ffffc4 	addi	r3,r2,-1
 200d114:	008080b4 	movhi	r2,514
 200d118:	10baf004 	addi	r2,r2,-5184
 200d11c:	18c7883a 	add	r3,r3,r3
 200d120:	18c7883a 	add	r3,r3,r3
 200d124:	10c5883a 	add	r2,r2,r3
 200d128:	10800017 	ldw	r2,0(r2)
 200d12c:	000f883a 	mov	r7,zero
 200d130:	100d883a 	mov	r6,r2
 200d134:	e17ffe17 	ldw	r5,-8(fp)
 200d138:	e13ffd17 	ldw	r4,-12(fp)
 200d13c:	200c8180 	call	200c818 <__multadd>
 200d140:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
 200d144:	e0bfff17 	ldw	r2,-4(fp)
 200d148:	1005d0ba 	srai	r2,r2,2
 200d14c:	e0bfff15 	stw	r2,-4(fp)
 200d150:	e0bfff17 	ldw	r2,-4(fp)
 200d154:	1000021e 	bne	r2,zero,200d160 <__pow5mult+0x84>
    return b;
 200d158:	e0bffe17 	ldw	r2,-8(fp)
 200d15c:	00003806 	br	200d240 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 200d160:	e0bffd17 	ldw	r2,-12(fp)
 200d164:	10801217 	ldw	r2,72(r2)
 200d168:	e0bff915 	stw	r2,-28(fp)
 200d16c:	e0bff917 	ldw	r2,-28(fp)
 200d170:	10000b1e 	bne	r2,zero,200d1a0 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 200d174:	01409c44 	movi	r5,625
 200d178:	e13ffd17 	ldw	r4,-12(fp)
 200d17c:	200ccb40 	call	200ccb4 <__i2b>
 200d180:	1007883a 	mov	r3,r2
 200d184:	e0bffd17 	ldw	r2,-12(fp)
 200d188:	10c01215 	stw	r3,72(r2)
 200d18c:	e0bffd17 	ldw	r2,-12(fp)
 200d190:	10801217 	ldw	r2,72(r2)
 200d194:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
 200d198:	e0bff917 	ldw	r2,-28(fp)
 200d19c:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 200d1a0:	e0bfff17 	ldw	r2,-4(fp)
 200d1a4:	1080004c 	andi	r2,r2,1
 200d1a8:	10000a26 	beq	r2,zero,200d1d4 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
 200d1ac:	e1bff917 	ldw	r6,-28(fp)
 200d1b0:	e17ffe17 	ldw	r5,-8(fp)
 200d1b4:	e13ffd17 	ldw	r4,-12(fp)
 200d1b8:	200cd0c0 	call	200cd0c <__multiply>
 200d1bc:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 200d1c0:	e17ffe17 	ldw	r5,-8(fp)
 200d1c4:	e13ffd17 	ldw	r4,-12(fp)
 200d1c8:	200c79c0 	call	200c79c <_Bfree>
	  b = b1;
 200d1cc:	e0bffc17 	ldw	r2,-16(fp)
 200d1d0:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
 200d1d4:	e0bfff17 	ldw	r2,-4(fp)
 200d1d8:	1005d07a 	srai	r2,r2,1
 200d1dc:	e0bfff15 	stw	r2,-4(fp)
 200d1e0:	e0bfff17 	ldw	r2,-4(fp)
 200d1e4:	10001426 	beq	r2,zero,200d238 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
 200d1e8:	e0bff917 	ldw	r2,-28(fp)
 200d1ec:	10800017 	ldw	r2,0(r2)
 200d1f0:	e0bffa15 	stw	r2,-24(fp)
 200d1f4:	e0bffa17 	ldw	r2,-24(fp)
 200d1f8:	10000c1e 	bne	r2,zero,200d22c <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 200d1fc:	e1bff917 	ldw	r6,-28(fp)
 200d200:	e17ff917 	ldw	r5,-28(fp)
 200d204:	e13ffd17 	ldw	r4,-12(fp)
 200d208:	200cd0c0 	call	200cd0c <__multiply>
 200d20c:	1007883a 	mov	r3,r2
 200d210:	e0bff917 	ldw	r2,-28(fp)
 200d214:	10c00015 	stw	r3,0(r2)
 200d218:	e0bff917 	ldw	r2,-28(fp)
 200d21c:	10800017 	ldw	r2,0(r2)
 200d220:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
 200d224:	e0bffa17 	ldw	r2,-24(fp)
 200d228:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 200d22c:	e0bffa17 	ldw	r2,-24(fp)
 200d230:	e0bff915 	stw	r2,-28(fp)
    }
 200d234:	003fda06 	br	200d1a0 <__pow5mult+0xc4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
 200d238:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
 200d23c:	e0bffe17 	ldw	r2,-8(fp)
}
 200d240:	e037883a 	mov	sp,fp
 200d244:	dfc00117 	ldw	ra,4(sp)
 200d248:	df000017 	ldw	fp,0(sp)
 200d24c:	dec00204 	addi	sp,sp,8
 200d250:	f800283a 	ret

0200d254 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
 200d254:	defff204 	addi	sp,sp,-56
 200d258:	dfc00d15 	stw	ra,52(sp)
 200d25c:	df000c15 	stw	fp,48(sp)
 200d260:	df000c04 	addi	fp,sp,48
 200d264:	e13ffd15 	stw	r4,-12(fp)
 200d268:	e17ffe15 	stw	r5,-8(fp)
 200d26c:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 200d270:	e0bfff17 	ldw	r2,-4(fp)
 200d274:	1005d17a 	srai	r2,r2,5
 200d278:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 200d27c:	e0bffe17 	ldw	r2,-8(fp)
 200d280:	10800117 	ldw	r2,4(r2)
 200d284:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
 200d288:	e0bffe17 	ldw	r2,-8(fp)
 200d28c:	10c00417 	ldw	r3,16(r2)
 200d290:	e0bffa17 	ldw	r2,-24(fp)
 200d294:	1885883a 	add	r2,r3,r2
 200d298:	10800044 	addi	r2,r2,1
 200d29c:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200d2a0:	e0bffe17 	ldw	r2,-8(fp)
 200d2a4:	10800217 	ldw	r2,8(r2)
 200d2a8:	e0bff415 	stw	r2,-48(fp)
 200d2ac:	00000606 	br	200d2c8 <__lshift+0x74>
    k1++;
 200d2b0:	e0bff517 	ldw	r2,-44(fp)
 200d2b4:	10800044 	addi	r2,r2,1
 200d2b8:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
 200d2bc:	e0bff417 	ldw	r2,-48(fp)
 200d2c0:	1085883a 	add	r2,r2,r2
 200d2c4:	e0bff415 	stw	r2,-48(fp)
 200d2c8:	e0bff617 	ldw	r2,-40(fp)
 200d2cc:	e0fff417 	ldw	r3,-48(fp)
 200d2d0:	18bff716 	blt	r3,r2,200d2b0 <__lshift+0x5c>
    k1++;
  b1 = Balloc (ptr, k1);
 200d2d4:	e17ff517 	ldw	r5,-44(fp)
 200d2d8:	e13ffd17 	ldw	r4,-12(fp)
 200d2dc:	200c66c0 	call	200c66c <_Balloc>
 200d2e0:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
 200d2e4:	e0bffb17 	ldw	r2,-20(fp)
 200d2e8:	10800504 	addi	r2,r2,20
 200d2ec:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
 200d2f0:	e03ff415 	stw	zero,-48(fp)
 200d2f4:	00000706 	br	200d314 <__lshift+0xc0>
    *x1++ = 0;
 200d2f8:	e0bff817 	ldw	r2,-32(fp)
 200d2fc:	10c00104 	addi	r3,r2,4
 200d300:	e0fff815 	stw	r3,-32(fp)
 200d304:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
 200d308:	e0bff417 	ldw	r2,-48(fp)
 200d30c:	10800044 	addi	r2,r2,1
 200d310:	e0bff415 	stw	r2,-48(fp)
 200d314:	e0fff417 	ldw	r3,-48(fp)
 200d318:	e0bffa17 	ldw	r2,-24(fp)
 200d31c:	18bff616 	blt	r3,r2,200d2f8 <__lshift+0xa4>
    *x1++ = 0;
  x = b->_x;
 200d320:	e0bffe17 	ldw	r2,-8(fp)
 200d324:	10800504 	addi	r2,r2,20
 200d328:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
 200d32c:	e0bffe17 	ldw	r2,-8(fp)
 200d330:	10800417 	ldw	r2,16(r2)
 200d334:	1085883a 	add	r2,r2,r2
 200d338:	1085883a 	add	r2,r2,r2
 200d33c:	1007883a 	mov	r3,r2
 200d340:	e0bff717 	ldw	r2,-36(fp)
 200d344:	10c5883a 	add	r2,r2,r3
 200d348:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 200d34c:	e0bfff17 	ldw	r2,-4(fp)
 200d350:	108007cc 	andi	r2,r2,31
 200d354:	e0bfff15 	stw	r2,-4(fp)
 200d358:	e0bfff17 	ldw	r2,-4(fp)
 200d35c:	10002326 	beq	r2,zero,200d3ec <__lshift+0x198>
    {
      k1 = 32 - k;
 200d360:	00c00804 	movi	r3,32
 200d364:	e0bfff17 	ldw	r2,-4(fp)
 200d368:	1885c83a 	sub	r2,r3,r2
 200d36c:	e0bff515 	stw	r2,-44(fp)
      z = 0;
 200d370:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
 200d374:	e0bff817 	ldw	r2,-32(fp)
 200d378:	10c00104 	addi	r3,r2,4
 200d37c:	e0fff815 	stw	r3,-32(fp)
 200d380:	e0fff717 	ldw	r3,-36(fp)
 200d384:	19000017 	ldw	r4,0(r3)
 200d388:	e0ffff17 	ldw	r3,-4(fp)
 200d38c:	20c8983a 	sll	r4,r4,r3
 200d390:	e0fff917 	ldw	r3,-28(fp)
 200d394:	20c6b03a 	or	r3,r4,r3
 200d398:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 200d39c:	e0bff717 	ldw	r2,-36(fp)
 200d3a0:	10c00104 	addi	r3,r2,4
 200d3a4:	e0fff715 	stw	r3,-36(fp)
 200d3a8:	10c00017 	ldw	r3,0(r2)
 200d3ac:	e0bff517 	ldw	r2,-44(fp)
 200d3b0:	1884d83a 	srl	r2,r3,r2
 200d3b4:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
 200d3b8:	e0fff717 	ldw	r3,-36(fp)
 200d3bc:	e0bffc17 	ldw	r2,-16(fp)
 200d3c0:	18bfec36 	bltu	r3,r2,200d374 <__lshift+0x120>
      if ((*x1 = z) != 0)
 200d3c4:	e0bff817 	ldw	r2,-32(fp)
 200d3c8:	e0fff917 	ldw	r3,-28(fp)
 200d3cc:	10c00015 	stw	r3,0(r2)
 200d3d0:	e0bff817 	ldw	r2,-32(fp)
 200d3d4:	10800017 	ldw	r2,0(r2)
 200d3d8:	10000f26 	beq	r2,zero,200d418 <__lshift+0x1c4>
	++n1;
 200d3dc:	e0bff617 	ldw	r2,-40(fp)
 200d3e0:	10800044 	addi	r2,r2,1
 200d3e4:	e0bff615 	stw	r2,-40(fp)
 200d3e8:	00000b06 	br	200d418 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 200d3ec:	e0bff817 	ldw	r2,-32(fp)
 200d3f0:	10c00104 	addi	r3,r2,4
 200d3f4:	e0fff815 	stw	r3,-32(fp)
 200d3f8:	e0fff717 	ldw	r3,-36(fp)
 200d3fc:	19000104 	addi	r4,r3,4
 200d400:	e13ff715 	stw	r4,-36(fp)
 200d404:	18c00017 	ldw	r3,0(r3)
 200d408:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 200d40c:	e0fff717 	ldw	r3,-36(fp)
 200d410:	e0bffc17 	ldw	r2,-16(fp)
 200d414:	18bff536 	bltu	r3,r2,200d3ec <__lshift+0x198>
  b1->_wds = n1 - 1;
 200d418:	e0bff617 	ldw	r2,-40(fp)
 200d41c:	10ffffc4 	addi	r3,r2,-1
 200d420:	e0bffb17 	ldw	r2,-20(fp)
 200d424:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 200d428:	e17ffe17 	ldw	r5,-8(fp)
 200d42c:	e13ffd17 	ldw	r4,-12(fp)
 200d430:	200c79c0 	call	200c79c <_Bfree>
  return b1;
 200d434:	e0bffb17 	ldw	r2,-20(fp)
}
 200d438:	e037883a 	mov	sp,fp
 200d43c:	dfc00117 	ldw	ra,4(sp)
 200d440:	df000017 	ldw	fp,0(sp)
 200d444:	dec00204 	addi	sp,sp,8
 200d448:	f800283a 	ret

0200d44c <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
 200d44c:	defff704 	addi	sp,sp,-36
 200d450:	df000815 	stw	fp,32(sp)
 200d454:	df000804 	addi	fp,sp,32
 200d458:	e13ffe15 	stw	r4,-8(fp)
 200d45c:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 200d460:	e0bffe17 	ldw	r2,-8(fp)
 200d464:	10800417 	ldw	r2,16(r2)
 200d468:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
 200d46c:	e0bfff17 	ldw	r2,-4(fp)
 200d470:	10800417 	ldw	r2,16(r2)
 200d474:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 200d478:	e0fffa17 	ldw	r3,-24(fp)
 200d47c:	e0bffb17 	ldw	r2,-20(fp)
 200d480:	1885c83a 	sub	r2,r3,r2
 200d484:	e0bffa15 	stw	r2,-24(fp)
 200d488:	e0bffa17 	ldw	r2,-24(fp)
 200d48c:	10000226 	beq	r2,zero,200d498 <__mcmp+0x4c>
    return i;
 200d490:	e0bffa17 	ldw	r2,-24(fp)
 200d494:	00002e06 	br	200d550 <__mcmp+0x104>
  xa0 = a->_x;
 200d498:	e0bffe17 	ldw	r2,-8(fp)
 200d49c:	10800504 	addi	r2,r2,20
 200d4a0:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
 200d4a4:	e0bffb17 	ldw	r2,-20(fp)
 200d4a8:	1085883a 	add	r2,r2,r2
 200d4ac:	1085883a 	add	r2,r2,r2
 200d4b0:	1007883a 	mov	r3,r2
 200d4b4:	e0bffc17 	ldw	r2,-16(fp)
 200d4b8:	10c5883a 	add	r2,r2,r3
 200d4bc:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
 200d4c0:	e0bfff17 	ldw	r2,-4(fp)
 200d4c4:	10800504 	addi	r2,r2,20
 200d4c8:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
 200d4cc:	e0bffb17 	ldw	r2,-20(fp)
 200d4d0:	1085883a 	add	r2,r2,r2
 200d4d4:	1085883a 	add	r2,r2,r2
 200d4d8:	1007883a 	mov	r3,r2
 200d4dc:	e0bffd17 	ldw	r2,-12(fp)
 200d4e0:	10c5883a 	add	r2,r2,r3
 200d4e4:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 200d4e8:	e0bff817 	ldw	r2,-32(fp)
 200d4ec:	10bfff04 	addi	r2,r2,-4
 200d4f0:	e0bff815 	stw	r2,-32(fp)
 200d4f4:	e0bff817 	ldw	r2,-32(fp)
 200d4f8:	10c00017 	ldw	r3,0(r2)
 200d4fc:	e0bff917 	ldw	r2,-28(fp)
 200d500:	10bfff04 	addi	r2,r2,-4
 200d504:	e0bff915 	stw	r2,-28(fp)
 200d508:	e0bff917 	ldw	r2,-28(fp)
 200d50c:	10800017 	ldw	r2,0(r2)
 200d510:	18800926 	beq	r3,r2,200d538 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
 200d514:	e0bff817 	ldw	r2,-32(fp)
 200d518:	10c00017 	ldw	r3,0(r2)
 200d51c:	e0bff917 	ldw	r2,-28(fp)
 200d520:	10800017 	ldw	r2,0(r2)
 200d524:	1880022e 	bgeu	r3,r2,200d530 <__mcmp+0xe4>
 200d528:	00bfffc4 	movi	r2,-1
 200d52c:	00000806 	br	200d550 <__mcmp+0x104>
 200d530:	00800044 	movi	r2,1
 200d534:	00000606 	br	200d550 <__mcmp+0x104>
      if (xa <= xa0)
 200d538:	e0bff817 	ldw	r2,-32(fp)
 200d53c:	e0fffc17 	ldw	r3,-16(fp)
 200d540:	1880012e 	bgeu	r3,r2,200d548 <__mcmp+0xfc>
	break;
    }
 200d544:	003fe806 	br	200d4e8 <__mcmp+0x9c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
 200d548:	0001883a 	nop
    }
  return 0;
 200d54c:	0005883a 	mov	r2,zero
}
 200d550:	e037883a 	mov	sp,fp
 200d554:	df000017 	ldw	fp,0(sp)
 200d558:	dec00104 	addi	sp,sp,4
 200d55c:	f800283a 	ret

0200d560 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
 200d560:	deffef04 	addi	sp,sp,-68
 200d564:	dfc01015 	stw	ra,64(sp)
 200d568:	df000f15 	stw	fp,60(sp)
 200d56c:	df000f04 	addi	fp,sp,60
 200d570:	e13ffd15 	stw	r4,-12(fp)
 200d574:	e17ffe15 	stw	r5,-8(fp)
 200d578:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 200d57c:	e17fff17 	ldw	r5,-4(fp)
 200d580:	e13ffe17 	ldw	r4,-8(fp)
 200d584:	200d44c0 	call	200d44c <__mcmp>
 200d588:	e0bff115 	stw	r2,-60(fp)
  if (!i)
 200d58c:	e0bff117 	ldw	r2,-60(fp)
 200d590:	10000b1e 	bne	r2,zero,200d5c0 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
 200d594:	000b883a 	mov	r5,zero
 200d598:	e13ffd17 	ldw	r4,-12(fp)
 200d59c:	200c66c0 	call	200c66c <_Balloc>
 200d5a0:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
 200d5a4:	e0bff717 	ldw	r2,-36(fp)
 200d5a8:	00c00044 	movi	r3,1
 200d5ac:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 200d5b0:	e0bff717 	ldw	r2,-36(fp)
 200d5b4:	10000515 	stw	zero,20(r2)
      return c;
 200d5b8:	e0bff717 	ldw	r2,-36(fp)
 200d5bc:	00008c06 	br	200d7f0 <__mdiff+0x290>
    }
  if (i < 0)
 200d5c0:	e0bff117 	ldw	r2,-60(fp)
 200d5c4:	1000090e 	bge	r2,zero,200d5ec <__mdiff+0x8c>
    {
      c = a;
 200d5c8:	e0bffe17 	ldw	r2,-8(fp)
 200d5cc:	e0bff715 	stw	r2,-36(fp)
      a = b;
 200d5d0:	e0bfff17 	ldw	r2,-4(fp)
 200d5d4:	e0bffe15 	stw	r2,-8(fp)
      b = c;
 200d5d8:	e0bff717 	ldw	r2,-36(fp)
 200d5dc:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
 200d5e0:	00800044 	movi	r2,1
 200d5e4:	e0bff115 	stw	r2,-60(fp)
 200d5e8:	00000106 	br	200d5f0 <__mdiff+0x90>
    }
  else
    i = 0;
 200d5ec:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
 200d5f0:	e0bffe17 	ldw	r2,-8(fp)
 200d5f4:	10800117 	ldw	r2,4(r2)
 200d5f8:	100b883a 	mov	r5,r2
 200d5fc:	e13ffd17 	ldw	r4,-12(fp)
 200d600:	200c66c0 	call	200c66c <_Balloc>
 200d604:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
 200d608:	e0bff717 	ldw	r2,-36(fp)
 200d60c:	e0fff117 	ldw	r3,-60(fp)
 200d610:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 200d614:	e0bffe17 	ldw	r2,-8(fp)
 200d618:	10800417 	ldw	r2,16(r2)
 200d61c:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
 200d620:	e0bffe17 	ldw	r2,-8(fp)
 200d624:	10800504 	addi	r2,r2,20
 200d628:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
 200d62c:	e0bff217 	ldw	r2,-56(fp)
 200d630:	1085883a 	add	r2,r2,r2
 200d634:	1085883a 	add	r2,r2,r2
 200d638:	1007883a 	mov	r3,r2
 200d63c:	e0bff417 	ldw	r2,-48(fp)
 200d640:	10c5883a 	add	r2,r2,r3
 200d644:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
 200d648:	e0bfff17 	ldw	r2,-4(fp)
 200d64c:	10800417 	ldw	r2,16(r2)
 200d650:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
 200d654:	e0bfff17 	ldw	r2,-4(fp)
 200d658:	10800504 	addi	r2,r2,20
 200d65c:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
 200d660:	e0bff917 	ldw	r2,-28(fp)
 200d664:	1085883a 	add	r2,r2,r2
 200d668:	1085883a 	add	r2,r2,r2
 200d66c:	1007883a 	mov	r3,r2
 200d670:	e0bff517 	ldw	r2,-44(fp)
 200d674:	10c5883a 	add	r2,r2,r3
 200d678:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
 200d67c:	e0bff717 	ldw	r2,-36(fp)
 200d680:	10800504 	addi	r2,r2,20
 200d684:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
 200d688:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 200d68c:	e0bff417 	ldw	r2,-48(fp)
 200d690:	10800017 	ldw	r2,0(r2)
 200d694:	10ffffcc 	andi	r3,r2,65535
 200d698:	e0bff517 	ldw	r2,-44(fp)
 200d69c:	10800017 	ldw	r2,0(r2)
 200d6a0:	10bfffcc 	andi	r2,r2,65535
 200d6a4:	1887c83a 	sub	r3,r3,r2
 200d6a8:	e0bff317 	ldw	r2,-52(fp)
 200d6ac:	1885883a 	add	r2,r3,r2
 200d6b0:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200d6b4:	e0bffb17 	ldw	r2,-20(fp)
 200d6b8:	1005d43a 	srai	r2,r2,16
 200d6bc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 200d6c0:	e0bff417 	ldw	r2,-48(fp)
 200d6c4:	10c00104 	addi	r3,r2,4
 200d6c8:	e0fff415 	stw	r3,-48(fp)
 200d6cc:	10800017 	ldw	r2,0(r2)
 200d6d0:	1006d43a 	srli	r3,r2,16
 200d6d4:	e0bff517 	ldw	r2,-44(fp)
 200d6d8:	11000104 	addi	r4,r2,4
 200d6dc:	e13ff515 	stw	r4,-44(fp)
 200d6e0:	10800017 	ldw	r2,0(r2)
 200d6e4:	1004d43a 	srli	r2,r2,16
 200d6e8:	1887c83a 	sub	r3,r3,r2
 200d6ec:	e0bff317 	ldw	r2,-52(fp)
 200d6f0:	1885883a 	add	r2,r3,r2
 200d6f4:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 200d6f8:	e0bffc17 	ldw	r2,-16(fp)
 200d6fc:	1005d43a 	srai	r2,r2,16
 200d700:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200d704:	e0bff617 	ldw	r2,-40(fp)
 200d708:	10c00104 	addi	r3,r2,4
 200d70c:	e0fff615 	stw	r3,-40(fp)
 200d710:	e0fffc17 	ldw	r3,-16(fp)
 200d714:	1808943a 	slli	r4,r3,16
 200d718:	e0fffb17 	ldw	r3,-20(fp)
 200d71c:	18ffffcc 	andi	r3,r3,65535
 200d720:	20c6b03a 	or	r3,r4,r3
 200d724:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 200d728:	e0fff517 	ldw	r3,-44(fp)
 200d72c:	e0bffa17 	ldw	r2,-24(fp)
 200d730:	18bfd636 	bltu	r3,r2,200d68c <__mdiff+0x12c>
  while (xa < xae)
 200d734:	00001d06 	br	200d7ac <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
 200d738:	e0bff417 	ldw	r2,-48(fp)
 200d73c:	10800017 	ldw	r2,0(r2)
 200d740:	10ffffcc 	andi	r3,r2,65535
 200d744:	e0bff317 	ldw	r2,-52(fp)
 200d748:	1885883a 	add	r2,r3,r2
 200d74c:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
 200d750:	e0bffb17 	ldw	r2,-20(fp)
 200d754:	1005d43a 	srai	r2,r2,16
 200d758:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 200d75c:	e0bff417 	ldw	r2,-48(fp)
 200d760:	10c00104 	addi	r3,r2,4
 200d764:	e0fff415 	stw	r3,-48(fp)
 200d768:	10800017 	ldw	r2,0(r2)
 200d76c:	1006d43a 	srli	r3,r2,16
 200d770:	e0bff317 	ldw	r2,-52(fp)
 200d774:	1885883a 	add	r2,r3,r2
 200d778:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
 200d77c:	e0bffc17 	ldw	r2,-16(fp)
 200d780:	1005d43a 	srai	r2,r2,16
 200d784:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 200d788:	e0bff617 	ldw	r2,-40(fp)
 200d78c:	10c00104 	addi	r3,r2,4
 200d790:	e0fff615 	stw	r3,-40(fp)
 200d794:	e0fffc17 	ldw	r3,-16(fp)
 200d798:	1808943a 	slli	r4,r3,16
 200d79c:	e0fffb17 	ldw	r3,-20(fp)
 200d7a0:	18ffffcc 	andi	r3,r3,65535
 200d7a4:	20c6b03a 	or	r3,r4,r3
 200d7a8:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
 200d7ac:	e0fff417 	ldw	r3,-48(fp)
 200d7b0:	e0bff817 	ldw	r2,-32(fp)
 200d7b4:	18bfe036 	bltu	r3,r2,200d738 <__mdiff+0x1d8>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 200d7b8:	00000306 	br	200d7c8 <__mdiff+0x268>
    wa--;
 200d7bc:	e0bff217 	ldw	r2,-56(fp)
 200d7c0:	10bfffc4 	addi	r2,r2,-1
 200d7c4:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 200d7c8:	e0bff617 	ldw	r2,-40(fp)
 200d7cc:	10bfff04 	addi	r2,r2,-4
 200d7d0:	e0bff615 	stw	r2,-40(fp)
 200d7d4:	e0bff617 	ldw	r2,-40(fp)
 200d7d8:	10800017 	ldw	r2,0(r2)
 200d7dc:	103ff726 	beq	r2,zero,200d7bc <__mdiff+0x25c>
    wa--;
  c->_wds = wa;
 200d7e0:	e0bff717 	ldw	r2,-36(fp)
 200d7e4:	e0fff217 	ldw	r3,-56(fp)
 200d7e8:	10c00415 	stw	r3,16(r2)
  return c;
 200d7ec:	e0bff717 	ldw	r2,-36(fp)
}
 200d7f0:	e037883a 	mov	sp,fp
 200d7f4:	dfc00117 	ldw	ra,4(sp)
 200d7f8:	df000017 	ldw	fp,0(sp)
 200d7fc:	dec00204 	addi	sp,sp,8
 200d800:	f800283a 	ret

0200d804 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
 200d804:	defff804 	addi	sp,sp,-32
 200d808:	df000715 	stw	fp,28(sp)
 200d80c:	dc000615 	stw	r16,24(sp)
 200d810:	df000704 	addi	fp,sp,28
 200d814:	e13ffd15 	stw	r4,-12(fp)
 200d818:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 200d81c:	e0bffd17 	ldw	r2,-12(fp)
 200d820:	e0bff915 	stw	r2,-28(fp)
 200d824:	e0bffe17 	ldw	r2,-8(fp)
 200d828:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 200d82c:	e0bffa17 	ldw	r2,-24(fp)
 200d830:	10dffc2c 	andhi	r3,r2,32752
 200d834:	00bf3034 	movhi	r2,64704
 200d838:	1885883a 	add	r2,r3,r2
 200d83c:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 200d840:	0400040e 	bge	zero,r16,200d854 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 200d844:	8005883a 	mov	r2,r16
 200d848:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 200d84c:	e03ffb15 	stw	zero,-20(fp)
 200d850:	00001406 	br	200d8a4 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 200d854:	0405c83a 	sub	r2,zero,r16
 200d858:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 200d85c:	80800508 	cmpgei	r2,r16,20
 200d860:	1000051e 	bne	r2,zero,200d878 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 200d864:	00800234 	movhi	r2,8
 200d868:	1405d83a 	sra	r2,r2,r16
 200d86c:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 200d870:	e03ffb15 	stw	zero,-20(fp)
 200d874:	00000b06 	br	200d8a4 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
 200d878:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 200d87c:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 200d880:	808007c8 	cmpgei	r2,r16,31
 200d884:	1000051e 	bne	r2,zero,200d89c <__ulp+0x98>
 200d888:	008007c4 	movi	r2,31
 200d88c:	1405c83a 	sub	r2,r2,r16
 200d890:	00c00044 	movi	r3,1
 200d894:	1884983a 	sll	r2,r3,r2
 200d898:	00000106 	br	200d8a0 <__ulp+0x9c>
 200d89c:	00800044 	movi	r2,1
 200d8a0:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 200d8a4:	e0bffb17 	ldw	r2,-20(fp)
 200d8a8:	e0fffc17 	ldw	r3,-16(fp)
 200d8ac:	1009883a 	mov	r4,r2
 200d8b0:	180b883a 	mov	r5,r3
}
 200d8b4:	2005883a 	mov	r2,r4
 200d8b8:	2807883a 	mov	r3,r5
 200d8bc:	e6ffff04 	addi	sp,fp,-4
 200d8c0:	df000117 	ldw	fp,4(sp)
 200d8c4:	dc000017 	ldw	r16,0(sp)
 200d8c8:	dec00204 	addi	sp,sp,8
 200d8cc:	f800283a 	ret

0200d8d0 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
 200d8d0:	defff404 	addi	sp,sp,-48
 200d8d4:	dfc00b15 	stw	ra,44(sp)
 200d8d8:	df000a15 	stw	fp,40(sp)
 200d8dc:	df000a04 	addi	fp,sp,40
 200d8e0:	e13ffe15 	stw	r4,-8(fp)
 200d8e4:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 200d8e8:	e0bffe17 	ldw	r2,-8(fp)
 200d8ec:	10800504 	addi	r2,r2,20
 200d8f0:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
 200d8f4:	e0bffe17 	ldw	r2,-8(fp)
 200d8f8:	10800417 	ldw	r2,16(r2)
 200d8fc:	1085883a 	add	r2,r2,r2
 200d900:	1085883a 	add	r2,r2,r2
 200d904:	1007883a 	mov	r3,r2
 200d908:	e0bff717 	ldw	r2,-36(fp)
 200d90c:	10c5883a 	add	r2,r2,r3
 200d910:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
 200d914:	e0bff617 	ldw	r2,-40(fp)
 200d918:	10bfff04 	addi	r2,r2,-4
 200d91c:	e0bff615 	stw	r2,-40(fp)
 200d920:	e0bff617 	ldw	r2,-40(fp)
 200d924:	10800017 	ldw	r2,0(r2)
 200d928:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 200d92c:	e13ff817 	ldw	r4,-32(fp)
 200d930:	200cb380 	call	200cb38 <__hi0bits>
 200d934:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
 200d938:	00c00804 	movi	r3,32
 200d93c:	e0bff917 	ldw	r2,-28(fp)
 200d940:	1887c83a 	sub	r3,r3,r2
 200d944:	e0bfff17 	ldw	r2,-4(fp)
 200d948:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 200d94c:	e0bff917 	ldw	r2,-28(fp)
 200d950:	108002c8 	cmpgei	r2,r2,11
 200d954:	10001e1e 	bne	r2,zero,200d9d0 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 200d958:	00c002c4 	movi	r3,11
 200d95c:	e0bff917 	ldw	r2,-28(fp)
 200d960:	1885c83a 	sub	r2,r3,r2
 200d964:	e0fff817 	ldw	r3,-32(fp)
 200d968:	1884d83a 	srl	r2,r3,r2
 200d96c:	108ffc34 	orhi	r2,r2,16368
 200d970:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
 200d974:	e0bff617 	ldw	r2,-40(fp)
 200d978:	e0fff717 	ldw	r3,-36(fp)
 200d97c:	1880062e 	bgeu	r3,r2,200d998 <__b2d+0xc8>
 200d980:	e0bff617 	ldw	r2,-40(fp)
 200d984:	10bfff04 	addi	r2,r2,-4
 200d988:	e0bff615 	stw	r2,-40(fp)
 200d98c:	e0bff617 	ldw	r2,-40(fp)
 200d990:	10800017 	ldw	r2,0(r2)
 200d994:	00000106 	br	200d99c <__b2d+0xcc>
 200d998:	0005883a 	mov	r2,zero
 200d99c:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 200d9a0:	e0bff917 	ldw	r2,-28(fp)
 200d9a4:	10800544 	addi	r2,r2,21
 200d9a8:	e0fff817 	ldw	r3,-32(fp)
 200d9ac:	1886983a 	sll	r3,r3,r2
 200d9b0:	010002c4 	movi	r4,11
 200d9b4:	e0bff917 	ldw	r2,-28(fp)
 200d9b8:	2085c83a 	sub	r2,r4,r2
 200d9bc:	e13ffa17 	ldw	r4,-24(fp)
 200d9c0:	2084d83a 	srl	r2,r4,r2
 200d9c4:	1884b03a 	or	r2,r3,r2
 200d9c8:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
 200d9cc:	00003606 	br	200daa8 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
 200d9d0:	e0bff617 	ldw	r2,-40(fp)
 200d9d4:	e0fff717 	ldw	r3,-36(fp)
 200d9d8:	1880062e 	bgeu	r3,r2,200d9f4 <__b2d+0x124>
 200d9dc:	e0bff617 	ldw	r2,-40(fp)
 200d9e0:	10bfff04 	addi	r2,r2,-4
 200d9e4:	e0bff615 	stw	r2,-40(fp)
 200d9e8:	e0bff617 	ldw	r2,-40(fp)
 200d9ec:	10800017 	ldw	r2,0(r2)
 200d9f0:	00000106 	br	200d9f8 <__b2d+0x128>
 200d9f4:	0005883a 	mov	r2,zero
 200d9f8:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 200d9fc:	e0bff917 	ldw	r2,-28(fp)
 200da00:	10bffd44 	addi	r2,r2,-11
 200da04:	e0bff915 	stw	r2,-28(fp)
 200da08:	e0bff917 	ldw	r2,-28(fp)
 200da0c:	10002126 	beq	r2,zero,200da94 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 200da10:	e0fff817 	ldw	r3,-32(fp)
 200da14:	e0bff917 	ldw	r2,-28(fp)
 200da18:	1886983a 	sll	r3,r3,r2
 200da1c:	01000804 	movi	r4,32
 200da20:	e0bff917 	ldw	r2,-28(fp)
 200da24:	2085c83a 	sub	r2,r4,r2
 200da28:	e13ffb17 	ldw	r4,-20(fp)
 200da2c:	2084d83a 	srl	r2,r4,r2
 200da30:	1884b03a 	or	r2,r3,r2
 200da34:	108ffc34 	orhi	r2,r2,16368
 200da38:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
 200da3c:	e0bff617 	ldw	r2,-40(fp)
 200da40:	e0fff717 	ldw	r3,-36(fp)
 200da44:	1880062e 	bgeu	r3,r2,200da60 <__b2d+0x190>
 200da48:	e0bff617 	ldw	r2,-40(fp)
 200da4c:	10bfff04 	addi	r2,r2,-4
 200da50:	e0bff615 	stw	r2,-40(fp)
 200da54:	e0bff617 	ldw	r2,-40(fp)
 200da58:	10800017 	ldw	r2,0(r2)
 200da5c:	00000106 	br	200da64 <__b2d+0x194>
 200da60:	0005883a 	mov	r2,zero
 200da64:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 200da68:	e0fffb17 	ldw	r3,-20(fp)
 200da6c:	e0bff917 	ldw	r2,-28(fp)
 200da70:	1886983a 	sll	r3,r3,r2
 200da74:	01000804 	movi	r4,32
 200da78:	e0bff917 	ldw	r2,-28(fp)
 200da7c:	2085c83a 	sub	r2,r4,r2
 200da80:	e13ff817 	ldw	r4,-32(fp)
 200da84:	2084d83a 	srl	r2,r4,r2
 200da88:	1884b03a 	or	r2,r3,r2
 200da8c:	e0bffc15 	stw	r2,-16(fp)
 200da90:	00000506 	br	200daa8 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 200da94:	e0bff817 	ldw	r2,-32(fp)
 200da98:	108ffc34 	orhi	r2,r2,16368
 200da9c:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 200daa0:	e0bffb17 	ldw	r2,-20(fp)
 200daa4:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 200daa8:	e0bffc17 	ldw	r2,-16(fp)
 200daac:	e0fffd17 	ldw	r3,-12(fp)
 200dab0:	1009883a 	mov	r4,r2
 200dab4:	180b883a 	mov	r5,r3
}
 200dab8:	2005883a 	mov	r2,r4
 200dabc:	2807883a 	mov	r3,r5
 200dac0:	e037883a 	mov	sp,fp
 200dac4:	dfc00117 	ldw	ra,4(sp)
 200dac8:	df000017 	ldw	fp,0(sp)
 200dacc:	dec00204 	addi	sp,sp,8
 200dad0:	f800283a 	ret

0200dad4 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
 200dad4:	defff004 	addi	sp,sp,-64
 200dad8:	dfc00f15 	stw	ra,60(sp)
 200dadc:	df000e15 	stw	fp,56(sp)
 200dae0:	dc000d15 	stw	r16,52(sp)
 200dae4:	df000e04 	addi	fp,sp,56
 200dae8:	e13ffb15 	stw	r4,-20(fp)
 200daec:	e17ffc15 	stw	r5,-16(fp)
 200daf0:	e1bffd15 	stw	r6,-12(fp)
 200daf4:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 200daf8:	e0bffc17 	ldw	r2,-16(fp)
 200dafc:	e0bff715 	stw	r2,-36(fp)
 200db00:	e0bffd17 	ldw	r2,-12(fp)
 200db04:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 200db08:	e0bffc17 	ldw	r2,-16(fp)
 200db0c:	e0bff715 	stw	r2,-36(fp)
 200db10:	e0bffd17 	ldw	r2,-12(fp)
 200db14:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
 200db18:	01400044 	movi	r5,1
 200db1c:	e13ffb17 	ldw	r4,-20(fp)
 200db20:	200c66c0 	call	200c66c <_Balloc>
 200db24:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
 200db28:	e0bff417 	ldw	r2,-48(fp)
 200db2c:	10800504 	addi	r2,r2,20
 200db30:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
 200db34:	e0fff817 	ldw	r3,-32(fp)
 200db38:	00800434 	movhi	r2,16
 200db3c:	10bfffc4 	addi	r2,r2,-1
 200db40:	1884703a 	and	r2,r3,r2
 200db44:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 200db48:	e0fff817 	ldw	r3,-32(fp)
 200db4c:	00a00034 	movhi	r2,32768
 200db50:	10bfffc4 	addi	r2,r2,-1
 200db54:	1884703a 	and	r2,r3,r2
 200db58:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 200db5c:	e0bff817 	ldw	r2,-32(fp)
 200db60:	1004d53a 	srli	r2,r2,20
 200db64:	e0bff615 	stw	r2,-40(fp)
 200db68:	e0bff617 	ldw	r2,-40(fp)
 200db6c:	10000326 	beq	r2,zero,200db7c <__d2b+0xa8>
    z |= Exp_msk1;
 200db70:	e0bffa17 	ldw	r2,-24(fp)
 200db74:	10800434 	orhi	r2,r2,16
 200db78:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 200db7c:	e0bff717 	ldw	r2,-36(fp)
 200db80:	10002826 	beq	r2,zero,200dc24 <__d2b+0x150>
    {
      y = d1;
 200db84:	e0bff717 	ldw	r2,-36(fp)
 200db88:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
 200db8c:	e0bff904 	addi	r2,fp,-28
 200db90:	1009883a 	mov	r4,r2
 200db94:	200cbc80 	call	200cbc8 <__lo0bits>
 200db98:	e0bff315 	stw	r2,-52(fp)
      if (k)
 200db9c:	e0bff317 	ldw	r2,-52(fp)
 200dba0:	10000e26 	beq	r2,zero,200dbdc <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
 200dba4:	e0fffa17 	ldw	r3,-24(fp)
 200dba8:	01000804 	movi	r4,32
 200dbac:	e0bff317 	ldw	r2,-52(fp)
 200dbb0:	2085c83a 	sub	r2,r4,r2
 200dbb4:	1886983a 	sll	r3,r3,r2
 200dbb8:	e0bff917 	ldw	r2,-28(fp)
 200dbbc:	1886b03a 	or	r3,r3,r2
 200dbc0:	e0bff517 	ldw	r2,-44(fp)
 200dbc4:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 200dbc8:	e0fffa17 	ldw	r3,-24(fp)
 200dbcc:	e0bff317 	ldw	r2,-52(fp)
 200dbd0:	1884d83a 	srl	r2,r3,r2
 200dbd4:	e0bffa15 	stw	r2,-24(fp)
 200dbd8:	00000306 	br	200dbe8 <__d2b+0x114>
	}
      else
	x[0] = y;
 200dbdc:	e0fff917 	ldw	r3,-28(fp)
 200dbe0:	e0bff517 	ldw	r2,-44(fp)
 200dbe4:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 200dbe8:	e0bff517 	ldw	r2,-44(fp)
 200dbec:	10800104 	addi	r2,r2,4
 200dbf0:	e0fffa17 	ldw	r3,-24(fp)
 200dbf4:	10c00015 	stw	r3,0(r2)
 200dbf8:	10800017 	ldw	r2,0(r2)
 200dbfc:	10000226 	beq	r2,zero,200dc08 <__d2b+0x134>
 200dc00:	00800084 	movi	r2,2
 200dc04:	00000106 	br	200dc0c <__d2b+0x138>
 200dc08:	00800044 	movi	r2,1
 200dc0c:	e0fff417 	ldw	r3,-48(fp)
 200dc10:	18800415 	stw	r2,16(r3)
 200dc14:	e0bff417 	ldw	r2,-48(fp)
 200dc18:	10800417 	ldw	r2,16(r2)
 200dc1c:	e0bff215 	stw	r2,-56(fp)
 200dc20:	00001006 	br	200dc64 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 200dc24:	e0bffa04 	addi	r2,fp,-24
 200dc28:	1009883a 	mov	r4,r2
 200dc2c:	200cbc80 	call	200cbc8 <__lo0bits>
 200dc30:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
 200dc34:	e0fffa17 	ldw	r3,-24(fp)
 200dc38:	e0bff517 	ldw	r2,-44(fp)
 200dc3c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 200dc40:	e0bff417 	ldw	r2,-48(fp)
 200dc44:	00c00044 	movi	r3,1
 200dc48:	10c00415 	stw	r3,16(r2)
 200dc4c:	e0bff417 	ldw	r2,-48(fp)
 200dc50:	10800417 	ldw	r2,16(r2)
 200dc54:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 200dc58:	e0bff317 	ldw	r2,-52(fp)
 200dc5c:	10800804 	addi	r2,r2,32
 200dc60:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 200dc64:	e0bff617 	ldw	r2,-40(fp)
 200dc68:	10000c26 	beq	r2,zero,200dc9c <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 200dc6c:	e0bff617 	ldw	r2,-40(fp)
 200dc70:	10fef344 	addi	r3,r2,-1075
 200dc74:	e0bff317 	ldw	r2,-52(fp)
 200dc78:	1887883a 	add	r3,r3,r2
 200dc7c:	e0bffe17 	ldw	r2,-8(fp)
 200dc80:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 200dc84:	00c00d44 	movi	r3,53
 200dc88:	e0bff317 	ldw	r2,-52(fp)
 200dc8c:	1887c83a 	sub	r3,r3,r2
 200dc90:	e0800217 	ldw	r2,8(fp)
 200dc94:	10c00015 	stw	r3,0(r2)
 200dc98:	00001706 	br	200dcf8 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 200dc9c:	e0bff617 	ldw	r2,-40(fp)
 200dca0:	10fef384 	addi	r3,r2,-1074
 200dca4:	e0bff317 	ldw	r2,-52(fp)
 200dca8:	1887883a 	add	r3,r3,r2
 200dcac:	e0bffe17 	ldw	r2,-8(fp)
 200dcb0:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 200dcb4:	e0bff217 	ldw	r2,-56(fp)
 200dcb8:	1020917a 	slli	r16,r2,5
 200dcbc:	e0fff217 	ldw	r3,-56(fp)
 200dcc0:	00900034 	movhi	r2,16384
 200dcc4:	10bfffc4 	addi	r2,r2,-1
 200dcc8:	1885883a 	add	r2,r3,r2
 200dccc:	1085883a 	add	r2,r2,r2
 200dcd0:	1085883a 	add	r2,r2,r2
 200dcd4:	1007883a 	mov	r3,r2
 200dcd8:	e0bff517 	ldw	r2,-44(fp)
 200dcdc:	10c5883a 	add	r2,r2,r3
 200dce0:	10800017 	ldw	r2,0(r2)
 200dce4:	1009883a 	mov	r4,r2
 200dce8:	200cb380 	call	200cb38 <__hi0bits>
 200dcec:	8087c83a 	sub	r3,r16,r2
 200dcf0:	e0800217 	ldw	r2,8(fp)
 200dcf4:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 200dcf8:	e0bff417 	ldw	r2,-48(fp)
}
 200dcfc:	e6ffff04 	addi	sp,fp,-4
 200dd00:	dfc00217 	ldw	ra,8(sp)
 200dd04:	df000117 	ldw	fp,4(sp)
 200dd08:	dc000017 	ldw	r16,0(sp)
 200dd0c:	dec00304 	addi	sp,sp,12
 200dd10:	f800283a 	ret

0200dd14 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
 200dd14:	defff504 	addi	sp,sp,-44
 200dd18:	dfc00a15 	stw	ra,40(sp)
 200dd1c:	df000915 	stw	fp,36(sp)
 200dd20:	df000904 	addi	fp,sp,36
 200dd24:	e13ffe15 	stw	r4,-8(fp)
 200dd28:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 200dd2c:	e0bffc04 	addi	r2,fp,-16
 200dd30:	100b883a 	mov	r5,r2
 200dd34:	e13ffe17 	ldw	r4,-8(fp)
 200dd38:	200d8d00 	call	200d8d0 <__b2d>
 200dd3c:	1009883a 	mov	r4,r2
 200dd40:	180b883a 	mov	r5,r3
 200dd44:	e13ff815 	stw	r4,-32(fp)
 200dd48:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
 200dd4c:	e0bffd04 	addi	r2,fp,-12
 200dd50:	100b883a 	mov	r5,r2
 200dd54:	e13fff17 	ldw	r4,-4(fp)
 200dd58:	200d8d00 	call	200d8d0 <__b2d>
 200dd5c:	1009883a 	mov	r4,r2
 200dd60:	180b883a 	mov	r5,r3
 200dd64:	e13ffa15 	stw	r4,-24(fp)
 200dd68:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 200dd6c:	e0fffc17 	ldw	r3,-16(fp)
 200dd70:	e0bffd17 	ldw	r2,-12(fp)
 200dd74:	1887c83a 	sub	r3,r3,r2
 200dd78:	e0bffe17 	ldw	r2,-8(fp)
 200dd7c:	11000417 	ldw	r4,16(r2)
 200dd80:	e0bfff17 	ldw	r2,-4(fp)
 200dd84:	10800417 	ldw	r2,16(r2)
 200dd88:	2085c83a 	sub	r2,r4,r2
 200dd8c:	1004917a 	slli	r2,r2,5
 200dd90:	1885883a 	add	r2,r3,r2
 200dd94:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 200dd98:	e0bff717 	ldw	r2,-36(fp)
 200dd9c:	0080060e 	bge	zero,r2,200ddb8 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 200dda0:	e0fff917 	ldw	r3,-28(fp)
 200dda4:	e0bff717 	ldw	r2,-36(fp)
 200dda8:	1004953a 	slli	r2,r2,20
 200ddac:	1885883a 	add	r2,r3,r2
 200ddb0:	e0bff915 	stw	r2,-28(fp)
 200ddb4:	00000806 	br	200ddd8 <__ratio+0xc4>
  else
    {
      k = -k;
 200ddb8:	e0bff717 	ldw	r2,-36(fp)
 200ddbc:	0085c83a 	sub	r2,zero,r2
 200ddc0:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
 200ddc4:	e0fffb17 	ldw	r3,-20(fp)
 200ddc8:	e0bff717 	ldw	r2,-36(fp)
 200ddcc:	1004953a 	slli	r2,r2,20
 200ddd0:	1885883a 	add	r2,r3,r2
 200ddd4:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
 200ddd8:	e0bff817 	ldw	r2,-32(fp)
 200dddc:	e0fff917 	ldw	r3,-28(fp)
 200dde0:	e13ffa17 	ldw	r4,-24(fp)
 200dde4:	e17ffb17 	ldw	r5,-20(fp)
 200dde8:	200d883a 	mov	r6,r4
 200ddec:	280f883a 	mov	r7,r5
 200ddf0:	1009883a 	mov	r4,r2
 200ddf4:	180b883a 	mov	r5,r3
 200ddf8:	20034240 	call	2003424 <__divdf3>
 200ddfc:	100f883a 	mov	r7,r2
 200de00:	1811883a 	mov	r8,r3
 200de04:	380b883a 	mov	r5,r7
 200de08:	400d883a 	mov	r6,r8
 200de0c:	2807883a 	mov	r3,r5
 200de10:	3009883a 	mov	r4,r6
}
 200de14:	1805883a 	mov	r2,r3
 200de18:	2007883a 	mov	r3,r4
 200de1c:	e037883a 	mov	sp,fp
 200de20:	dfc00117 	ldw	ra,4(sp)
 200de24:	df000017 	ldw	fp,0(sp)
 200de28:	dec00204 	addi	sp,sp,8
 200de2c:	f800283a 	ret

0200de30 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
 200de30:	defffb04 	addi	sp,sp,-20
 200de34:	dfc00415 	stw	ra,16(sp)
 200de38:	df000315 	stw	fp,12(sp)
 200de3c:	df000304 	addi	fp,sp,12
 200de40:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
 200de44:	e03ffd15 	stw	zero,-12(fp)
 200de48:	008ffc34 	movhi	r2,16368
 200de4c:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
 200de50:	e0bfff17 	ldw	r2,-4(fp)
 200de54:	10800608 	cmpgei	r2,r2,24
 200de58:	1000141e 	bne	r2,zero,200deac <_mprec_log10+0x7c>
    return tens[dig];
 200de5c:	008080b4 	movhi	r2,514
 200de60:	10baaa04 	addi	r2,r2,-5464
 200de64:	e0ffff17 	ldw	r3,-4(fp)
 200de68:	180690fa 	slli	r3,r3,3
 200de6c:	10c9883a 	add	r4,r2,r3
 200de70:	20800017 	ldw	r2,0(r4)
 200de74:	20c00117 	ldw	r3,4(r4)
 200de78:	00001006 	br	200debc <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
 200de7c:	000d883a 	mov	r6,zero
 200de80:	01d00934 	movhi	r7,16420
 200de84:	e13ffd17 	ldw	r4,-12(fp)
 200de88:	e17ffe17 	ldw	r5,-8(fp)
 200de8c:	2003edc0 	call	2003edc <__muldf3>
 200de90:	1009883a 	mov	r4,r2
 200de94:	180b883a 	mov	r5,r3
 200de98:	e13ffd15 	stw	r4,-12(fp)
 200de9c:	e17ffe15 	stw	r5,-8(fp)
      dig--;
 200dea0:	e0bfff17 	ldw	r2,-4(fp)
 200dea4:	10bfffc4 	addi	r2,r2,-1
 200dea8:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
 200deac:	e0bfff17 	ldw	r2,-4(fp)
 200deb0:	00bff216 	blt	zero,r2,200de7c <_mprec_log10+0x4c>
    {
      v *= 10;
      dig--;
    }
  return v;
 200deb4:	e0bffd17 	ldw	r2,-12(fp)
 200deb8:	e0fffe17 	ldw	r3,-8(fp)
 200debc:	1009883a 	mov	r4,r2
 200dec0:	180b883a 	mov	r5,r3
}
 200dec4:	2005883a 	mov	r2,r4
 200dec8:	2807883a 	mov	r3,r5
 200decc:	e037883a 	mov	sp,fp
 200ded0:	dfc00117 	ldw	ra,4(sp)
 200ded4:	df000017 	ldw	fp,0(sp)
 200ded8:	dec00204 	addi	sp,sp,8
 200dedc:	f800283a 	ret

0200dee0 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
 200dee0:	defff904 	addi	sp,sp,-28
 200dee4:	df000615 	stw	fp,24(sp)
 200dee8:	df000604 	addi	fp,sp,24
 200deec:	e13ffd15 	stw	r4,-12(fp)
 200def0:	e17ffe15 	stw	r5,-8(fp)
 200def4:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 200def8:	e0bffe17 	ldw	r2,-8(fp)
 200defc:	10bfffc4 	addi	r2,r2,-1
 200df00:	1005d17a 	srai	r2,r2,5
 200df04:	10800044 	addi	r2,r2,1
 200df08:	1085883a 	add	r2,r2,r2
 200df0c:	1085883a 	add	r2,r2,r2
 200df10:	1007883a 	mov	r3,r2
 200df14:	e0bffd17 	ldw	r2,-12(fp)
 200df18:	10c5883a 	add	r2,r2,r3
 200df1c:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
 200df20:	e0bfff17 	ldw	r2,-4(fp)
 200df24:	10800504 	addi	r2,r2,20
 200df28:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 200df2c:	e0bfff17 	ldw	r2,-4(fp)
 200df30:	10800417 	ldw	r2,16(r2)
 200df34:	1085883a 	add	r2,r2,r2
 200df38:	1085883a 	add	r2,r2,r2
 200df3c:	1007883a 	mov	r3,r2
 200df40:	e0bffa17 	ldw	r2,-24(fp)
 200df44:	10c5883a 	add	r2,r2,r3
 200df48:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
 200df4c:	00000806 	br	200df70 <__copybits+0x90>
		*c++ = *x++;
 200df50:	e0bffd17 	ldw	r2,-12(fp)
 200df54:	10c00104 	addi	r3,r2,4
 200df58:	e0fffd15 	stw	r3,-12(fp)
 200df5c:	e0fffa17 	ldw	r3,-24(fp)
 200df60:	19000104 	addi	r4,r3,4
 200df64:	e13ffa15 	stw	r4,-24(fp)
 200df68:	18c00017 	ldw	r3,0(r3)
 200df6c:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
 200df70:	e0fffa17 	ldw	r3,-24(fp)
 200df74:	e0bffc17 	ldw	r2,-16(fp)
 200df78:	18bff536 	bltu	r3,r2,200df50 <__copybits+0x70>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 200df7c:	00000406 	br	200df90 <__copybits+0xb0>
		*c++ = 0;
 200df80:	e0bffd17 	ldw	r2,-12(fp)
 200df84:	10c00104 	addi	r3,r2,4
 200df88:	e0fffd15 	stw	r3,-12(fp)
 200df8c:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 200df90:	e0fffd17 	ldw	r3,-12(fp)
 200df94:	e0bffb17 	ldw	r2,-20(fp)
 200df98:	18bff936 	bltu	r3,r2,200df80 <__copybits+0xa0>
		*c++ = 0;
}
 200df9c:	0001883a 	nop
 200dfa0:	e037883a 	mov	sp,fp
 200dfa4:	df000017 	ldw	fp,0(sp)
 200dfa8:	dec00104 	addi	sp,sp,4
 200dfac:	f800283a 	ret

0200dfb0 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
 200dfb0:	defff704 	addi	sp,sp,-36
 200dfb4:	df000815 	stw	fp,32(sp)
 200dfb8:	df000804 	addi	fp,sp,32
 200dfbc:	e13ffe15 	stw	r4,-8(fp)
 200dfc0:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 200dfc4:	e0bffe17 	ldw	r2,-8(fp)
 200dfc8:	10800504 	addi	r2,r2,20
 200dfcc:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
 200dfd0:	e0bffe17 	ldw	r2,-8(fp)
 200dfd4:	10800417 	ldw	r2,16(r2)
 200dfd8:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
 200dfdc:	e0bfff17 	ldw	r2,-4(fp)
 200dfe0:	1005d17a 	srai	r2,r2,5
 200dfe4:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
 200dfe8:	e0bff817 	ldw	r2,-32(fp)
 200dfec:	e0fffa17 	ldw	r3,-24(fp)
 200dff0:	1880030e 	bge	r3,r2,200e000 <__any_on+0x50>
		n = nwds;
 200dff4:	e0bffa17 	ldw	r2,-24(fp)
 200dff8:	e0bff815 	stw	r2,-32(fp)
 200dffc:	00001f06 	br	200e07c <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
 200e000:	e0fff817 	ldw	r3,-32(fp)
 200e004:	e0bffa17 	ldw	r2,-24(fp)
 200e008:	18801c0e 	bge	r3,r2,200e07c <__any_on+0xcc>
 200e00c:	e0bfff17 	ldw	r2,-4(fp)
 200e010:	108007cc 	andi	r2,r2,31
 200e014:	e0bfff15 	stw	r2,-4(fp)
 200e018:	e0bfff17 	ldw	r2,-4(fp)
 200e01c:	10001726 	beq	r2,zero,200e07c <__any_on+0xcc>
		x1 = x2 = x[n];
 200e020:	e0bff817 	ldw	r2,-32(fp)
 200e024:	1085883a 	add	r2,r2,r2
 200e028:	1085883a 	add	r2,r2,r2
 200e02c:	1007883a 	mov	r3,r2
 200e030:	e0bff917 	ldw	r2,-28(fp)
 200e034:	10c5883a 	add	r2,r2,r3
 200e038:	10800017 	ldw	r2,0(r2)
 200e03c:	e0bffb15 	stw	r2,-20(fp)
 200e040:	e0bffb17 	ldw	r2,-20(fp)
 200e044:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
 200e048:	e0fffc17 	ldw	r3,-16(fp)
 200e04c:	e0bfff17 	ldw	r2,-4(fp)
 200e050:	1884d83a 	srl	r2,r3,r2
 200e054:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
 200e058:	e0fffc17 	ldw	r3,-16(fp)
 200e05c:	e0bfff17 	ldw	r2,-4(fp)
 200e060:	1884983a 	sll	r2,r3,r2
 200e064:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
 200e068:	e0fffc17 	ldw	r3,-16(fp)
 200e06c:	e0bffb17 	ldw	r2,-20(fp)
 200e070:	18800226 	beq	r3,r2,200e07c <__any_on+0xcc>
			return 1;
 200e074:	00800044 	movi	r2,1
 200e078:	00001606 	br	200e0d4 <__any_on+0x124>
		}
	x0 = x;
 200e07c:	e0bff917 	ldw	r2,-28(fp)
 200e080:	e0bffd15 	stw	r2,-12(fp)
	x += n;
 200e084:	e0bff817 	ldw	r2,-32(fp)
 200e088:	1085883a 	add	r2,r2,r2
 200e08c:	1085883a 	add	r2,r2,r2
 200e090:	1007883a 	mov	r3,r2
 200e094:	e0bff917 	ldw	r2,-28(fp)
 200e098:	10c5883a 	add	r2,r2,r3
 200e09c:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
 200e0a0:	00000806 	br	200e0c4 <__any_on+0x114>
		if (*--x)
 200e0a4:	e0bff917 	ldw	r2,-28(fp)
 200e0a8:	10bfff04 	addi	r2,r2,-4
 200e0ac:	e0bff915 	stw	r2,-28(fp)
 200e0b0:	e0bff917 	ldw	r2,-28(fp)
 200e0b4:	10800017 	ldw	r2,0(r2)
 200e0b8:	10000226 	beq	r2,zero,200e0c4 <__any_on+0x114>
			return 1;
 200e0bc:	00800044 	movi	r2,1
 200e0c0:	00000406 	br	200e0d4 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
 200e0c4:	e0bff917 	ldw	r2,-28(fp)
 200e0c8:	e0fffd17 	ldw	r3,-12(fp)
 200e0cc:	18bff536 	bltu	r3,r2,200e0a4 <__any_on+0xf4>
		if (*--x)
			return 1;
	return 0;
 200e0d0:	0005883a 	mov	r2,zero
}
 200e0d4:	e037883a 	mov	sp,fp
 200e0d8:	df000017 	ldw	fp,0(sp)
 200e0dc:	dec00104 	addi	sp,sp,4
 200e0e0:	f800283a 	ret

0200e0e4 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
 200e0e4:	deffe104 	addi	sp,sp,-124
 200e0e8:	dfc01e15 	stw	ra,120(sp)
 200e0ec:	df001d15 	stw	fp,116(sp)
 200e0f0:	df001d04 	addi	fp,sp,116
 200e0f4:	e13ffd15 	stw	r4,-12(fp)
 200e0f8:	e17ffe15 	stw	r5,-8(fp)
 200e0fc:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
 200e100:	e0bffe17 	ldw	r2,-8(fp)
 200e104:	1000041e 	bne	r2,zero,200e118 <_realloc_r+0x34>
 200e108:	e17fff17 	ldw	r5,-4(fp)
 200e10c:	e13ffd17 	ldw	r4,-12(fp)
 200e110:	200b72c0 	call	200b72c <_malloc_r>
 200e114:	0002ea06 	br	200ecc0 <_realloc_r+0xbdc>

  MALLOC_LOCK;
 200e118:	e13ffd17 	ldw	r4,-12(fp)
 200e11c:	2013bc00 	call	2013bc0 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
 200e120:	e0bffe17 	ldw	r2,-8(fp)
 200e124:	10bffe04 	addi	r2,r2,-8
 200e128:	e0bfef15 	stw	r2,-68(fp)
 200e12c:	e0bfef17 	ldw	r2,-68(fp)
 200e130:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
 200e134:	e0bfef17 	ldw	r2,-68(fp)
 200e138:	10c00117 	ldw	r3,4(r2)
 200e13c:	00bfff04 	movi	r2,-4
 200e140:	1884703a 	and	r2,r3,r2
 200e144:	e0bff015 	stw	r2,-64(fp)
 200e148:	e0bff017 	ldw	r2,-64(fp)
 200e14c:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
 200e150:	e0bfff17 	ldw	r2,-4(fp)
 200e154:	108002c4 	addi	r2,r2,11
 200e158:	108005f0 	cmpltui	r2,r2,23
 200e15c:	1000051e 	bne	r2,zero,200e174 <_realloc_r+0x90>
 200e160:	e0bfff17 	ldw	r2,-4(fp)
 200e164:	10c002c4 	addi	r3,r2,11
 200e168:	00bffe04 	movi	r2,-8
 200e16c:	1884703a 	and	r2,r3,r2
 200e170:	00000106 	br	200e178 <_realloc_r+0x94>
 200e174:	00800404 	movi	r2,16
 200e178:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
 200e17c:	e0bff117 	ldw	r2,-60(fp)
 200e180:	10000316 	blt	r2,zero,200e190 <_realloc_r+0xac>
 200e184:	e0fff117 	ldw	r3,-60(fp)
 200e188:	e0bfff17 	ldw	r2,-4(fp)
 200e18c:	1880052e 	bgeu	r3,r2,200e1a4 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
 200e190:	e0bffd17 	ldw	r2,-12(fp)
 200e194:	00c00304 	movi	r3,12
 200e198:	10c00015 	stw	r3,0(r2)
    return 0;
 200e19c:	0005883a 	mov	r2,zero
 200e1a0:	0002c706 	br	200ecc0 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
 200e1a4:	e0fff017 	ldw	r3,-64(fp)
 200e1a8:	e0bff117 	ldw	r2,-60(fp)
 200e1ac:	18828b0e 	bge	r3,r2,200ebdc <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
 200e1b0:	e0ffef17 	ldw	r3,-68(fp)
 200e1b4:	e0bff017 	ldw	r2,-64(fp)
 200e1b8:	1885883a 	add	r2,r3,r2
 200e1bc:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
 200e1c0:	008080b4 	movhi	r2,514
 200e1c4:	10bc9504 	addi	r2,r2,-3500
 200e1c8:	10c00217 	ldw	r3,8(r2)
 200e1cc:	e0bfe517 	ldw	r2,-108(fp)
 200e1d0:	18800926 	beq	r3,r2,200e1f8 <_realloc_r+0x114>
 200e1d4:	e0bfe517 	ldw	r2,-108(fp)
 200e1d8:	10c00117 	ldw	r3,4(r2)
 200e1dc:	00bfff84 	movi	r2,-2
 200e1e0:	1884703a 	and	r2,r3,r2
 200e1e4:	e0ffe517 	ldw	r3,-108(fp)
 200e1e8:	1885883a 	add	r2,r3,r2
 200e1ec:	10800117 	ldw	r2,4(r2)
 200e1f0:	1080004c 	andi	r2,r2,1
 200e1f4:	1000461e 	bne	r2,zero,200e310 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
 200e1f8:	e0bfe517 	ldw	r2,-108(fp)
 200e1fc:	10c00117 	ldw	r3,4(r2)
 200e200:	00bfff04 	movi	r2,-4
 200e204:	1884703a 	and	r2,r3,r2
 200e208:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
 200e20c:	008080b4 	movhi	r2,514
 200e210:	10bc9504 	addi	r2,r2,-3500
 200e214:	10c00217 	ldw	r3,8(r2)
 200e218:	e0bfe517 	ldw	r2,-108(fp)
 200e21c:	1880251e 	bne	r3,r2,200e2b4 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 200e220:	e0ffe617 	ldw	r3,-104(fp)
 200e224:	e0bfe417 	ldw	r2,-112(fp)
 200e228:	1885883a 	add	r2,r3,r2
 200e22c:	1007883a 	mov	r3,r2
 200e230:	e0bff117 	ldw	r2,-60(fp)
 200e234:	10800404 	addi	r2,r2,16
 200e238:	18803816 	blt	r3,r2,200e31c <_realloc_r+0x238>
        {
          newsize += nextsize;
 200e23c:	e0ffe417 	ldw	r3,-112(fp)
 200e240:	e0bfe617 	ldw	r2,-104(fp)
 200e244:	1885883a 	add	r2,r3,r2
 200e248:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
 200e24c:	008080b4 	movhi	r2,514
 200e250:	10bc9504 	addi	r2,r2,-3500
 200e254:	e13fef17 	ldw	r4,-68(fp)
 200e258:	e0fff117 	ldw	r3,-60(fp)
 200e25c:	20c7883a 	add	r3,r4,r3
 200e260:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 200e264:	008080b4 	movhi	r2,514
 200e268:	10bc9504 	addi	r2,r2,-3500
 200e26c:	10800217 	ldw	r2,8(r2)
 200e270:	e13fe417 	ldw	r4,-112(fp)
 200e274:	e0fff117 	ldw	r3,-60(fp)
 200e278:	20c7c83a 	sub	r3,r4,r3
 200e27c:	18c00054 	ori	r3,r3,1
 200e280:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 200e284:	e0bfef17 	ldw	r2,-68(fp)
 200e288:	10800117 	ldw	r2,4(r2)
 200e28c:	10c0004c 	andi	r3,r2,1
 200e290:	e0bff117 	ldw	r2,-60(fp)
 200e294:	1886b03a 	or	r3,r3,r2
 200e298:	e0bfef17 	ldw	r2,-68(fp)
 200e29c:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 200e2a0:	e13ffd17 	ldw	r4,-12(fp)
 200e2a4:	2013ce00 	call	2013ce0 <__malloc_unlock>
          return chunk2mem(oldp);
 200e2a8:	e0bfef17 	ldw	r2,-68(fp)
 200e2ac:	10800204 	addi	r2,r2,8
 200e2b0:	00028306 	br	200ecc0 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 200e2b4:	e0ffe617 	ldw	r3,-104(fp)
 200e2b8:	e0bfe417 	ldw	r2,-112(fp)
 200e2bc:	1885883a 	add	r2,r3,r2
 200e2c0:	1007883a 	mov	r3,r2
 200e2c4:	e0bff117 	ldw	r2,-60(fp)
 200e2c8:	18801416 	blt	r3,r2,200e31c <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
 200e2cc:	e0bfe517 	ldw	r2,-108(fp)
 200e2d0:	10800317 	ldw	r2,12(r2)
 200e2d4:	e0bff215 	stw	r2,-56(fp)
 200e2d8:	e0bfe517 	ldw	r2,-108(fp)
 200e2dc:	10800217 	ldw	r2,8(r2)
 200e2e0:	e0bff315 	stw	r2,-52(fp)
 200e2e4:	e0bff317 	ldw	r2,-52(fp)
 200e2e8:	e0fff217 	ldw	r3,-56(fp)
 200e2ec:	10c00315 	stw	r3,12(r2)
 200e2f0:	e0bff217 	ldw	r2,-56(fp)
 200e2f4:	e0fff317 	ldw	r3,-52(fp)
 200e2f8:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 200e2fc:	e0ffe417 	ldw	r3,-112(fp)
 200e300:	e0bfe617 	ldw	r2,-104(fp)
 200e304:	1885883a 	add	r2,r3,r2
 200e308:	e0bfe415 	stw	r2,-112(fp)
        goto split;
 200e30c:	00023306 	br	200ebdc <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
 200e310:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
 200e314:	e03fe615 	stw	zero,-104(fp)
 200e318:	00000106 	br	200e320 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
 200e31c:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
 200e320:	e0bfef17 	ldw	r2,-68(fp)
 200e324:	10800117 	ldw	r2,4(r2)
 200e328:	1080004c 	andi	r2,r2,1
 200e32c:	1001a91e 	bne	r2,zero,200e9d4 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
 200e330:	e0bfef17 	ldw	r2,-68(fp)
 200e334:	10800017 	ldw	r2,0(r2)
 200e338:	0085c83a 	sub	r2,zero,r2
 200e33c:	e0ffef17 	ldw	r3,-68(fp)
 200e340:	1885883a 	add	r2,r3,r2
 200e344:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
 200e348:	e0bff417 	ldw	r2,-48(fp)
 200e34c:	10c00117 	ldw	r3,4(r2)
 200e350:	00bfff04 	movi	r2,-4
 200e354:	1884703a 	and	r2,r3,r2
 200e358:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
 200e35c:	e0bfe517 	ldw	r2,-108(fp)
 200e360:	10012226 	beq	r2,zero,200e7ec <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
 200e364:	008080b4 	movhi	r2,514
 200e368:	10bc9504 	addi	r2,r2,-3500
 200e36c:	10c00217 	ldw	r3,8(r2)
 200e370:	e0bfe517 	ldw	r2,-108(fp)
 200e374:	1880951e 	bne	r3,r2,200e5cc <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 200e378:	e0ffe617 	ldw	r3,-104(fp)
 200e37c:	e0bff517 	ldw	r2,-44(fp)
 200e380:	1887883a 	add	r3,r3,r2
 200e384:	e0bfe417 	ldw	r2,-112(fp)
 200e388:	1885883a 	add	r2,r3,r2
 200e38c:	1007883a 	mov	r3,r2
 200e390:	e0bff117 	ldw	r2,-60(fp)
 200e394:	10800404 	addi	r2,r2,16
 200e398:	18811416 	blt	r3,r2,200e7ec <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
 200e39c:	e0bff417 	ldw	r2,-48(fp)
 200e3a0:	10800317 	ldw	r2,12(r2)
 200e3a4:	e0bff215 	stw	r2,-56(fp)
 200e3a8:	e0bff417 	ldw	r2,-48(fp)
 200e3ac:	10800217 	ldw	r2,8(r2)
 200e3b0:	e0bff315 	stw	r2,-52(fp)
 200e3b4:	e0bff317 	ldw	r2,-52(fp)
 200e3b8:	e0fff217 	ldw	r3,-56(fp)
 200e3bc:	10c00315 	stw	r3,12(r2)
 200e3c0:	e0bff217 	ldw	r2,-56(fp)
 200e3c4:	e0fff317 	ldw	r3,-52(fp)
 200e3c8:	10c00215 	stw	r3,8(r2)
            newp = prev;
 200e3cc:	e0bff417 	ldw	r2,-48(fp)
 200e3d0:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
 200e3d4:	e0fff517 	ldw	r3,-44(fp)
 200e3d8:	e0bfe617 	ldw	r2,-104(fp)
 200e3dc:	1885883a 	add	r2,r3,r2
 200e3e0:	e0ffe417 	ldw	r3,-112(fp)
 200e3e4:	1885883a 	add	r2,r3,r2
 200e3e8:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
 200e3ec:	e0bfe317 	ldw	r2,-116(fp)
 200e3f0:	10800204 	addi	r2,r2,8
 200e3f4:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e3f8:	e0bff017 	ldw	r2,-64(fp)
 200e3fc:	10bfff04 	addi	r2,r2,-4
 200e400:	e0bff715 	stw	r2,-36(fp)
 200e404:	e0bff717 	ldw	r2,-36(fp)
 200e408:	10800968 	cmpgeui	r2,r2,37
 200e40c:	1000521e 	bne	r2,zero,200e558 <_realloc_r+0x474>
 200e410:	e0bffe17 	ldw	r2,-8(fp)
 200e414:	e0bfe715 	stw	r2,-100(fp)
 200e418:	e0bff617 	ldw	r2,-40(fp)
 200e41c:	e0bfe815 	stw	r2,-96(fp)
 200e420:	e0bff717 	ldw	r2,-36(fp)
 200e424:	10800530 	cmpltui	r2,r2,20
 200e428:	1000361e 	bne	r2,zero,200e504 <_realloc_r+0x420>
 200e42c:	e0bfe817 	ldw	r2,-96(fp)
 200e430:	10c00104 	addi	r3,r2,4
 200e434:	e0ffe815 	stw	r3,-96(fp)
 200e438:	e0ffe717 	ldw	r3,-100(fp)
 200e43c:	19000104 	addi	r4,r3,4
 200e440:	e13fe715 	stw	r4,-100(fp)
 200e444:	18c00017 	ldw	r3,0(r3)
 200e448:	10c00015 	stw	r3,0(r2)
 200e44c:	e0bfe817 	ldw	r2,-96(fp)
 200e450:	10c00104 	addi	r3,r2,4
 200e454:	e0ffe815 	stw	r3,-96(fp)
 200e458:	e0ffe717 	ldw	r3,-100(fp)
 200e45c:	19000104 	addi	r4,r3,4
 200e460:	e13fe715 	stw	r4,-100(fp)
 200e464:	18c00017 	ldw	r3,0(r3)
 200e468:	10c00015 	stw	r3,0(r2)
 200e46c:	e0bff717 	ldw	r2,-36(fp)
 200e470:	10800730 	cmpltui	r2,r2,28
 200e474:	1000231e 	bne	r2,zero,200e504 <_realloc_r+0x420>
 200e478:	e0bfe817 	ldw	r2,-96(fp)
 200e47c:	10c00104 	addi	r3,r2,4
 200e480:	e0ffe815 	stw	r3,-96(fp)
 200e484:	e0ffe717 	ldw	r3,-100(fp)
 200e488:	19000104 	addi	r4,r3,4
 200e48c:	e13fe715 	stw	r4,-100(fp)
 200e490:	18c00017 	ldw	r3,0(r3)
 200e494:	10c00015 	stw	r3,0(r2)
 200e498:	e0bfe817 	ldw	r2,-96(fp)
 200e49c:	10c00104 	addi	r3,r2,4
 200e4a0:	e0ffe815 	stw	r3,-96(fp)
 200e4a4:	e0ffe717 	ldw	r3,-100(fp)
 200e4a8:	19000104 	addi	r4,r3,4
 200e4ac:	e13fe715 	stw	r4,-100(fp)
 200e4b0:	18c00017 	ldw	r3,0(r3)
 200e4b4:	10c00015 	stw	r3,0(r2)
 200e4b8:	e0bff717 	ldw	r2,-36(fp)
 200e4bc:	10800930 	cmpltui	r2,r2,36
 200e4c0:	1000101e 	bne	r2,zero,200e504 <_realloc_r+0x420>
 200e4c4:	e0bfe817 	ldw	r2,-96(fp)
 200e4c8:	10c00104 	addi	r3,r2,4
 200e4cc:	e0ffe815 	stw	r3,-96(fp)
 200e4d0:	e0ffe717 	ldw	r3,-100(fp)
 200e4d4:	19000104 	addi	r4,r3,4
 200e4d8:	e13fe715 	stw	r4,-100(fp)
 200e4dc:	18c00017 	ldw	r3,0(r3)
 200e4e0:	10c00015 	stw	r3,0(r2)
 200e4e4:	e0bfe817 	ldw	r2,-96(fp)
 200e4e8:	10c00104 	addi	r3,r2,4
 200e4ec:	e0ffe815 	stw	r3,-96(fp)
 200e4f0:	e0ffe717 	ldw	r3,-100(fp)
 200e4f4:	19000104 	addi	r4,r3,4
 200e4f8:	e13fe715 	stw	r4,-100(fp)
 200e4fc:	18c00017 	ldw	r3,0(r3)
 200e500:	10c00015 	stw	r3,0(r2)
 200e504:	e0bfe817 	ldw	r2,-96(fp)
 200e508:	10c00104 	addi	r3,r2,4
 200e50c:	e0ffe815 	stw	r3,-96(fp)
 200e510:	e0ffe717 	ldw	r3,-100(fp)
 200e514:	19000104 	addi	r4,r3,4
 200e518:	e13fe715 	stw	r4,-100(fp)
 200e51c:	18c00017 	ldw	r3,0(r3)
 200e520:	10c00015 	stw	r3,0(r2)
 200e524:	e0bfe817 	ldw	r2,-96(fp)
 200e528:	10c00104 	addi	r3,r2,4
 200e52c:	e0ffe815 	stw	r3,-96(fp)
 200e530:	e0ffe717 	ldw	r3,-100(fp)
 200e534:	19000104 	addi	r4,r3,4
 200e538:	e13fe715 	stw	r4,-100(fp)
 200e53c:	18c00017 	ldw	r3,0(r3)
 200e540:	10c00015 	stw	r3,0(r2)
 200e544:	e0bfe717 	ldw	r2,-100(fp)
 200e548:	10c00017 	ldw	r3,0(r2)
 200e54c:	e0bfe817 	ldw	r2,-96(fp)
 200e550:	10c00015 	stw	r3,0(r2)
 200e554:	00000406 	br	200e568 <_realloc_r+0x484>
 200e558:	e1bff717 	ldw	r6,-36(fp)
 200e55c:	e17ffe17 	ldw	r5,-8(fp)
 200e560:	e13ff617 	ldw	r4,-40(fp)
 200e564:	200c4640 	call	200c464 <memmove>
            top = chunk_at_offset(newp, nb);
 200e568:	008080b4 	movhi	r2,514
 200e56c:	10bc9504 	addi	r2,r2,-3500
 200e570:	e13fe317 	ldw	r4,-116(fp)
 200e574:	e0fff117 	ldw	r3,-60(fp)
 200e578:	20c7883a 	add	r3,r4,r3
 200e57c:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 200e580:	008080b4 	movhi	r2,514
 200e584:	10bc9504 	addi	r2,r2,-3500
 200e588:	10800217 	ldw	r2,8(r2)
 200e58c:	e13fe417 	ldw	r4,-112(fp)
 200e590:	e0fff117 	ldw	r3,-60(fp)
 200e594:	20c7c83a 	sub	r3,r4,r3
 200e598:	18c00054 	ori	r3,r3,1
 200e59c:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 200e5a0:	e0bfe317 	ldw	r2,-116(fp)
 200e5a4:	10800117 	ldw	r2,4(r2)
 200e5a8:	10c0004c 	andi	r3,r2,1
 200e5ac:	e0bff117 	ldw	r2,-60(fp)
 200e5b0:	1886b03a 	or	r3,r3,r2
 200e5b4:	e0bfe317 	ldw	r2,-116(fp)
 200e5b8:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 200e5bc:	e13ffd17 	ldw	r4,-12(fp)
 200e5c0:	2013ce00 	call	2013ce0 <__malloc_unlock>
            return newmem;
 200e5c4:	e0bff617 	ldw	r2,-40(fp)
 200e5c8:	0001bd06 	br	200ecc0 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 200e5cc:	e0ffe617 	ldw	r3,-104(fp)
 200e5d0:	e0bff517 	ldw	r2,-44(fp)
 200e5d4:	1887883a 	add	r3,r3,r2
 200e5d8:	e0bfe417 	ldw	r2,-112(fp)
 200e5dc:	1885883a 	add	r2,r3,r2
 200e5e0:	1007883a 	mov	r3,r2
 200e5e4:	e0bff117 	ldw	r2,-60(fp)
 200e5e8:	18808016 	blt	r3,r2,200e7ec <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
 200e5ec:	e0bfe517 	ldw	r2,-108(fp)
 200e5f0:	10800317 	ldw	r2,12(r2)
 200e5f4:	e0bff215 	stw	r2,-56(fp)
 200e5f8:	e0bfe517 	ldw	r2,-108(fp)
 200e5fc:	10800217 	ldw	r2,8(r2)
 200e600:	e0bff315 	stw	r2,-52(fp)
 200e604:	e0bff317 	ldw	r2,-52(fp)
 200e608:	e0fff217 	ldw	r3,-56(fp)
 200e60c:	10c00315 	stw	r3,12(r2)
 200e610:	e0bff217 	ldw	r2,-56(fp)
 200e614:	e0fff317 	ldw	r3,-52(fp)
 200e618:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 200e61c:	e0bff417 	ldw	r2,-48(fp)
 200e620:	10800317 	ldw	r2,12(r2)
 200e624:	e0bff215 	stw	r2,-56(fp)
 200e628:	e0bff417 	ldw	r2,-48(fp)
 200e62c:	10800217 	ldw	r2,8(r2)
 200e630:	e0bff315 	stw	r2,-52(fp)
 200e634:	e0bff317 	ldw	r2,-52(fp)
 200e638:	e0fff217 	ldw	r3,-56(fp)
 200e63c:	10c00315 	stw	r3,12(r2)
 200e640:	e0bff217 	ldw	r2,-56(fp)
 200e644:	e0fff317 	ldw	r3,-52(fp)
 200e648:	10c00215 	stw	r3,8(r2)
          newp = prev;
 200e64c:	e0bff417 	ldw	r2,-48(fp)
 200e650:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
 200e654:	e0ffe617 	ldw	r3,-104(fp)
 200e658:	e0bff517 	ldw	r2,-44(fp)
 200e65c:	1885883a 	add	r2,r3,r2
 200e660:	e0ffe417 	ldw	r3,-112(fp)
 200e664:	1885883a 	add	r2,r3,r2
 200e668:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
 200e66c:	e0bfe317 	ldw	r2,-116(fp)
 200e670:	10800204 	addi	r2,r2,8
 200e674:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e678:	e0bff017 	ldw	r2,-64(fp)
 200e67c:	10bfff04 	addi	r2,r2,-4
 200e680:	e0bff815 	stw	r2,-32(fp)
 200e684:	e0bff817 	ldw	r2,-32(fp)
 200e688:	10800968 	cmpgeui	r2,r2,37
 200e68c:	1000521e 	bne	r2,zero,200e7d8 <_realloc_r+0x6f4>
 200e690:	e0bffe17 	ldw	r2,-8(fp)
 200e694:	e0bfe915 	stw	r2,-92(fp)
 200e698:	e0bff617 	ldw	r2,-40(fp)
 200e69c:	e0bfea15 	stw	r2,-88(fp)
 200e6a0:	e0bff817 	ldw	r2,-32(fp)
 200e6a4:	10800530 	cmpltui	r2,r2,20
 200e6a8:	1000361e 	bne	r2,zero,200e784 <_realloc_r+0x6a0>
 200e6ac:	e0bfea17 	ldw	r2,-88(fp)
 200e6b0:	10c00104 	addi	r3,r2,4
 200e6b4:	e0ffea15 	stw	r3,-88(fp)
 200e6b8:	e0ffe917 	ldw	r3,-92(fp)
 200e6bc:	19000104 	addi	r4,r3,4
 200e6c0:	e13fe915 	stw	r4,-92(fp)
 200e6c4:	18c00017 	ldw	r3,0(r3)
 200e6c8:	10c00015 	stw	r3,0(r2)
 200e6cc:	e0bfea17 	ldw	r2,-88(fp)
 200e6d0:	10c00104 	addi	r3,r2,4
 200e6d4:	e0ffea15 	stw	r3,-88(fp)
 200e6d8:	e0ffe917 	ldw	r3,-92(fp)
 200e6dc:	19000104 	addi	r4,r3,4
 200e6e0:	e13fe915 	stw	r4,-92(fp)
 200e6e4:	18c00017 	ldw	r3,0(r3)
 200e6e8:	10c00015 	stw	r3,0(r2)
 200e6ec:	e0bff817 	ldw	r2,-32(fp)
 200e6f0:	10800730 	cmpltui	r2,r2,28
 200e6f4:	1000231e 	bne	r2,zero,200e784 <_realloc_r+0x6a0>
 200e6f8:	e0bfea17 	ldw	r2,-88(fp)
 200e6fc:	10c00104 	addi	r3,r2,4
 200e700:	e0ffea15 	stw	r3,-88(fp)
 200e704:	e0ffe917 	ldw	r3,-92(fp)
 200e708:	19000104 	addi	r4,r3,4
 200e70c:	e13fe915 	stw	r4,-92(fp)
 200e710:	18c00017 	ldw	r3,0(r3)
 200e714:	10c00015 	stw	r3,0(r2)
 200e718:	e0bfea17 	ldw	r2,-88(fp)
 200e71c:	10c00104 	addi	r3,r2,4
 200e720:	e0ffea15 	stw	r3,-88(fp)
 200e724:	e0ffe917 	ldw	r3,-92(fp)
 200e728:	19000104 	addi	r4,r3,4
 200e72c:	e13fe915 	stw	r4,-92(fp)
 200e730:	18c00017 	ldw	r3,0(r3)
 200e734:	10c00015 	stw	r3,0(r2)
 200e738:	e0bff817 	ldw	r2,-32(fp)
 200e73c:	10800930 	cmpltui	r2,r2,36
 200e740:	1000101e 	bne	r2,zero,200e784 <_realloc_r+0x6a0>
 200e744:	e0bfea17 	ldw	r2,-88(fp)
 200e748:	10c00104 	addi	r3,r2,4
 200e74c:	e0ffea15 	stw	r3,-88(fp)
 200e750:	e0ffe917 	ldw	r3,-92(fp)
 200e754:	19000104 	addi	r4,r3,4
 200e758:	e13fe915 	stw	r4,-92(fp)
 200e75c:	18c00017 	ldw	r3,0(r3)
 200e760:	10c00015 	stw	r3,0(r2)
 200e764:	e0bfea17 	ldw	r2,-88(fp)
 200e768:	10c00104 	addi	r3,r2,4
 200e76c:	e0ffea15 	stw	r3,-88(fp)
 200e770:	e0ffe917 	ldw	r3,-92(fp)
 200e774:	19000104 	addi	r4,r3,4
 200e778:	e13fe915 	stw	r4,-92(fp)
 200e77c:	18c00017 	ldw	r3,0(r3)
 200e780:	10c00015 	stw	r3,0(r2)
 200e784:	e0bfea17 	ldw	r2,-88(fp)
 200e788:	10c00104 	addi	r3,r2,4
 200e78c:	e0ffea15 	stw	r3,-88(fp)
 200e790:	e0ffe917 	ldw	r3,-92(fp)
 200e794:	19000104 	addi	r4,r3,4
 200e798:	e13fe915 	stw	r4,-92(fp)
 200e79c:	18c00017 	ldw	r3,0(r3)
 200e7a0:	10c00015 	stw	r3,0(r2)
 200e7a4:	e0bfea17 	ldw	r2,-88(fp)
 200e7a8:	10c00104 	addi	r3,r2,4
 200e7ac:	e0ffea15 	stw	r3,-88(fp)
 200e7b0:	e0ffe917 	ldw	r3,-92(fp)
 200e7b4:	19000104 	addi	r4,r3,4
 200e7b8:	e13fe915 	stw	r4,-92(fp)
 200e7bc:	18c00017 	ldw	r3,0(r3)
 200e7c0:	10c00015 	stw	r3,0(r2)
 200e7c4:	e0bfe917 	ldw	r2,-92(fp)
 200e7c8:	10c00017 	ldw	r3,0(r2)
 200e7cc:	e0bfea17 	ldw	r2,-88(fp)
 200e7d0:	10c00015 	stw	r3,0(r2)
          goto split;
 200e7d4:	00010106 	br	200ebdc <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e7d8:	e1bff817 	ldw	r6,-32(fp)
 200e7dc:	e17ffe17 	ldw	r5,-8(fp)
 200e7e0:	e13ff617 	ldw	r4,-40(fp)
 200e7e4:	200c4640 	call	200c464 <memmove>
          goto split;
 200e7e8:	0000fc06 	br	200ebdc <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 200e7ec:	e0bff417 	ldw	r2,-48(fp)
 200e7f0:	10007826 	beq	r2,zero,200e9d4 <_realloc_r+0x8f0>
 200e7f4:	e0fff517 	ldw	r3,-44(fp)
 200e7f8:	e0bfe417 	ldw	r2,-112(fp)
 200e7fc:	1885883a 	add	r2,r3,r2
 200e800:	1007883a 	mov	r3,r2
 200e804:	e0bff117 	ldw	r2,-60(fp)
 200e808:	18807216 	blt	r3,r2,200e9d4 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
 200e80c:	e0bff417 	ldw	r2,-48(fp)
 200e810:	10800317 	ldw	r2,12(r2)
 200e814:	e0bff215 	stw	r2,-56(fp)
 200e818:	e0bff417 	ldw	r2,-48(fp)
 200e81c:	10800217 	ldw	r2,8(r2)
 200e820:	e0bff315 	stw	r2,-52(fp)
 200e824:	e0bff317 	ldw	r2,-52(fp)
 200e828:	e0fff217 	ldw	r3,-56(fp)
 200e82c:	10c00315 	stw	r3,12(r2)
 200e830:	e0bff217 	ldw	r2,-56(fp)
 200e834:	e0fff317 	ldw	r3,-52(fp)
 200e838:	10c00215 	stw	r3,8(r2)
        newp = prev;
 200e83c:	e0bff417 	ldw	r2,-48(fp)
 200e840:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
 200e844:	e0ffe417 	ldw	r3,-112(fp)
 200e848:	e0bff517 	ldw	r2,-44(fp)
 200e84c:	1885883a 	add	r2,r3,r2
 200e850:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
 200e854:	e0bfe317 	ldw	r2,-116(fp)
 200e858:	10800204 	addi	r2,r2,8
 200e85c:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e860:	e0bff017 	ldw	r2,-64(fp)
 200e864:	10bfff04 	addi	r2,r2,-4
 200e868:	e0bff915 	stw	r2,-28(fp)
 200e86c:	e0bff917 	ldw	r2,-28(fp)
 200e870:	10800968 	cmpgeui	r2,r2,37
 200e874:	1000521e 	bne	r2,zero,200e9c0 <_realloc_r+0x8dc>
 200e878:	e0bffe17 	ldw	r2,-8(fp)
 200e87c:	e0bfeb15 	stw	r2,-84(fp)
 200e880:	e0bff617 	ldw	r2,-40(fp)
 200e884:	e0bfec15 	stw	r2,-80(fp)
 200e888:	e0bff917 	ldw	r2,-28(fp)
 200e88c:	10800530 	cmpltui	r2,r2,20
 200e890:	1000361e 	bne	r2,zero,200e96c <_realloc_r+0x888>
 200e894:	e0bfec17 	ldw	r2,-80(fp)
 200e898:	10c00104 	addi	r3,r2,4
 200e89c:	e0ffec15 	stw	r3,-80(fp)
 200e8a0:	e0ffeb17 	ldw	r3,-84(fp)
 200e8a4:	19000104 	addi	r4,r3,4
 200e8a8:	e13feb15 	stw	r4,-84(fp)
 200e8ac:	18c00017 	ldw	r3,0(r3)
 200e8b0:	10c00015 	stw	r3,0(r2)
 200e8b4:	e0bfec17 	ldw	r2,-80(fp)
 200e8b8:	10c00104 	addi	r3,r2,4
 200e8bc:	e0ffec15 	stw	r3,-80(fp)
 200e8c0:	e0ffeb17 	ldw	r3,-84(fp)
 200e8c4:	19000104 	addi	r4,r3,4
 200e8c8:	e13feb15 	stw	r4,-84(fp)
 200e8cc:	18c00017 	ldw	r3,0(r3)
 200e8d0:	10c00015 	stw	r3,0(r2)
 200e8d4:	e0bff917 	ldw	r2,-28(fp)
 200e8d8:	10800730 	cmpltui	r2,r2,28
 200e8dc:	1000231e 	bne	r2,zero,200e96c <_realloc_r+0x888>
 200e8e0:	e0bfec17 	ldw	r2,-80(fp)
 200e8e4:	10c00104 	addi	r3,r2,4
 200e8e8:	e0ffec15 	stw	r3,-80(fp)
 200e8ec:	e0ffeb17 	ldw	r3,-84(fp)
 200e8f0:	19000104 	addi	r4,r3,4
 200e8f4:	e13feb15 	stw	r4,-84(fp)
 200e8f8:	18c00017 	ldw	r3,0(r3)
 200e8fc:	10c00015 	stw	r3,0(r2)
 200e900:	e0bfec17 	ldw	r2,-80(fp)
 200e904:	10c00104 	addi	r3,r2,4
 200e908:	e0ffec15 	stw	r3,-80(fp)
 200e90c:	e0ffeb17 	ldw	r3,-84(fp)
 200e910:	19000104 	addi	r4,r3,4
 200e914:	e13feb15 	stw	r4,-84(fp)
 200e918:	18c00017 	ldw	r3,0(r3)
 200e91c:	10c00015 	stw	r3,0(r2)
 200e920:	e0bff917 	ldw	r2,-28(fp)
 200e924:	10800930 	cmpltui	r2,r2,36
 200e928:	1000101e 	bne	r2,zero,200e96c <_realloc_r+0x888>
 200e92c:	e0bfec17 	ldw	r2,-80(fp)
 200e930:	10c00104 	addi	r3,r2,4
 200e934:	e0ffec15 	stw	r3,-80(fp)
 200e938:	e0ffeb17 	ldw	r3,-84(fp)
 200e93c:	19000104 	addi	r4,r3,4
 200e940:	e13feb15 	stw	r4,-84(fp)
 200e944:	18c00017 	ldw	r3,0(r3)
 200e948:	10c00015 	stw	r3,0(r2)
 200e94c:	e0bfec17 	ldw	r2,-80(fp)
 200e950:	10c00104 	addi	r3,r2,4
 200e954:	e0ffec15 	stw	r3,-80(fp)
 200e958:	e0ffeb17 	ldw	r3,-84(fp)
 200e95c:	19000104 	addi	r4,r3,4
 200e960:	e13feb15 	stw	r4,-84(fp)
 200e964:	18c00017 	ldw	r3,0(r3)
 200e968:	10c00015 	stw	r3,0(r2)
 200e96c:	e0bfec17 	ldw	r2,-80(fp)
 200e970:	10c00104 	addi	r3,r2,4
 200e974:	e0ffec15 	stw	r3,-80(fp)
 200e978:	e0ffeb17 	ldw	r3,-84(fp)
 200e97c:	19000104 	addi	r4,r3,4
 200e980:	e13feb15 	stw	r4,-84(fp)
 200e984:	18c00017 	ldw	r3,0(r3)
 200e988:	10c00015 	stw	r3,0(r2)
 200e98c:	e0bfec17 	ldw	r2,-80(fp)
 200e990:	10c00104 	addi	r3,r2,4
 200e994:	e0ffec15 	stw	r3,-80(fp)
 200e998:	e0ffeb17 	ldw	r3,-84(fp)
 200e99c:	19000104 	addi	r4,r3,4
 200e9a0:	e13feb15 	stw	r4,-84(fp)
 200e9a4:	18c00017 	ldw	r3,0(r3)
 200e9a8:	10c00015 	stw	r3,0(r2)
 200e9ac:	e0bfeb17 	ldw	r2,-84(fp)
 200e9b0:	10c00017 	ldw	r3,0(r2)
 200e9b4:	e0bfec17 	ldw	r2,-80(fp)
 200e9b8:	10c00015 	stw	r3,0(r2)
        goto split;
 200e9bc:	00008706 	br	200ebdc <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200e9c0:	e1bff917 	ldw	r6,-28(fp)
 200e9c4:	e17ffe17 	ldw	r5,-8(fp)
 200e9c8:	e13ff617 	ldw	r4,-40(fp)
 200e9cc:	200c4640 	call	200c464 <memmove>
        goto split;
 200e9d0:	00008206 	br	200ebdc <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
 200e9d4:	e17fff17 	ldw	r5,-4(fp)
 200e9d8:	e13ffd17 	ldw	r4,-12(fp)
 200e9dc:	200b72c0 	call	200b72c <_malloc_r>
 200e9e0:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
 200e9e4:	e0bff617 	ldw	r2,-40(fp)
 200e9e8:	1000041e 	bne	r2,zero,200e9fc <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
 200e9ec:	e13ffd17 	ldw	r4,-12(fp)
 200e9f0:	2013ce00 	call	2013ce0 <__malloc_unlock>
      return 0;
 200e9f4:	0005883a 	mov	r2,zero
 200e9f8:	0000b106 	br	200ecc0 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 200e9fc:	e0bff617 	ldw	r2,-40(fp)
 200ea00:	10bffe04 	addi	r2,r2,-8
 200ea04:	e0bfe315 	stw	r2,-116(fp)
 200ea08:	e0bfef17 	ldw	r2,-68(fp)
 200ea0c:	10c00117 	ldw	r3,4(r2)
 200ea10:	00bfff84 	movi	r2,-2
 200ea14:	1884703a 	and	r2,r3,r2
 200ea18:	e0ffef17 	ldw	r3,-68(fp)
 200ea1c:	1885883a 	add	r2,r3,r2
 200ea20:	e0ffe317 	ldw	r3,-116(fp)
 200ea24:	18800a1e 	bne	r3,r2,200ea50 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
 200ea28:	e0bfe317 	ldw	r2,-116(fp)
 200ea2c:	10c00117 	ldw	r3,4(r2)
 200ea30:	00bfff04 	movi	r2,-4
 200ea34:	1884703a 	and	r2,r3,r2
 200ea38:	e0ffe417 	ldw	r3,-112(fp)
 200ea3c:	1885883a 	add	r2,r3,r2
 200ea40:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
 200ea44:	e0bfef17 	ldw	r2,-68(fp)
 200ea48:	e0bfe315 	stw	r2,-116(fp)
      goto split;
 200ea4c:	00006306 	br	200ebdc <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 200ea50:	e0bff017 	ldw	r2,-64(fp)
 200ea54:	10bfff04 	addi	r2,r2,-4
 200ea58:	e0bffa15 	stw	r2,-24(fp)
 200ea5c:	e0bffa17 	ldw	r2,-24(fp)
 200ea60:	10800968 	cmpgeui	r2,r2,37
 200ea64:	1000521e 	bne	r2,zero,200ebb0 <_realloc_r+0xacc>
 200ea68:	e0bffe17 	ldw	r2,-8(fp)
 200ea6c:	e0bfed15 	stw	r2,-76(fp)
 200ea70:	e0bff617 	ldw	r2,-40(fp)
 200ea74:	e0bfee15 	stw	r2,-72(fp)
 200ea78:	e0bffa17 	ldw	r2,-24(fp)
 200ea7c:	10800530 	cmpltui	r2,r2,20
 200ea80:	1000361e 	bne	r2,zero,200eb5c <_realloc_r+0xa78>
 200ea84:	e0bfee17 	ldw	r2,-72(fp)
 200ea88:	10c00104 	addi	r3,r2,4
 200ea8c:	e0ffee15 	stw	r3,-72(fp)
 200ea90:	e0ffed17 	ldw	r3,-76(fp)
 200ea94:	19000104 	addi	r4,r3,4
 200ea98:	e13fed15 	stw	r4,-76(fp)
 200ea9c:	18c00017 	ldw	r3,0(r3)
 200eaa0:	10c00015 	stw	r3,0(r2)
 200eaa4:	e0bfee17 	ldw	r2,-72(fp)
 200eaa8:	10c00104 	addi	r3,r2,4
 200eaac:	e0ffee15 	stw	r3,-72(fp)
 200eab0:	e0ffed17 	ldw	r3,-76(fp)
 200eab4:	19000104 	addi	r4,r3,4
 200eab8:	e13fed15 	stw	r4,-76(fp)
 200eabc:	18c00017 	ldw	r3,0(r3)
 200eac0:	10c00015 	stw	r3,0(r2)
 200eac4:	e0bffa17 	ldw	r2,-24(fp)
 200eac8:	10800730 	cmpltui	r2,r2,28
 200eacc:	1000231e 	bne	r2,zero,200eb5c <_realloc_r+0xa78>
 200ead0:	e0bfee17 	ldw	r2,-72(fp)
 200ead4:	10c00104 	addi	r3,r2,4
 200ead8:	e0ffee15 	stw	r3,-72(fp)
 200eadc:	e0ffed17 	ldw	r3,-76(fp)
 200eae0:	19000104 	addi	r4,r3,4
 200eae4:	e13fed15 	stw	r4,-76(fp)
 200eae8:	18c00017 	ldw	r3,0(r3)
 200eaec:	10c00015 	stw	r3,0(r2)
 200eaf0:	e0bfee17 	ldw	r2,-72(fp)
 200eaf4:	10c00104 	addi	r3,r2,4
 200eaf8:	e0ffee15 	stw	r3,-72(fp)
 200eafc:	e0ffed17 	ldw	r3,-76(fp)
 200eb00:	19000104 	addi	r4,r3,4
 200eb04:	e13fed15 	stw	r4,-76(fp)
 200eb08:	18c00017 	ldw	r3,0(r3)
 200eb0c:	10c00015 	stw	r3,0(r2)
 200eb10:	e0bffa17 	ldw	r2,-24(fp)
 200eb14:	10800930 	cmpltui	r2,r2,36
 200eb18:	1000101e 	bne	r2,zero,200eb5c <_realloc_r+0xa78>
 200eb1c:	e0bfee17 	ldw	r2,-72(fp)
 200eb20:	10c00104 	addi	r3,r2,4
 200eb24:	e0ffee15 	stw	r3,-72(fp)
 200eb28:	e0ffed17 	ldw	r3,-76(fp)
 200eb2c:	19000104 	addi	r4,r3,4
 200eb30:	e13fed15 	stw	r4,-76(fp)
 200eb34:	18c00017 	ldw	r3,0(r3)
 200eb38:	10c00015 	stw	r3,0(r2)
 200eb3c:	e0bfee17 	ldw	r2,-72(fp)
 200eb40:	10c00104 	addi	r3,r2,4
 200eb44:	e0ffee15 	stw	r3,-72(fp)
 200eb48:	e0ffed17 	ldw	r3,-76(fp)
 200eb4c:	19000104 	addi	r4,r3,4
 200eb50:	e13fed15 	stw	r4,-76(fp)
 200eb54:	18c00017 	ldw	r3,0(r3)
 200eb58:	10c00015 	stw	r3,0(r2)
 200eb5c:	e0bfee17 	ldw	r2,-72(fp)
 200eb60:	10c00104 	addi	r3,r2,4
 200eb64:	e0ffee15 	stw	r3,-72(fp)
 200eb68:	e0ffed17 	ldw	r3,-76(fp)
 200eb6c:	19000104 	addi	r4,r3,4
 200eb70:	e13fed15 	stw	r4,-76(fp)
 200eb74:	18c00017 	ldw	r3,0(r3)
 200eb78:	10c00015 	stw	r3,0(r2)
 200eb7c:	e0bfee17 	ldw	r2,-72(fp)
 200eb80:	10c00104 	addi	r3,r2,4
 200eb84:	e0ffee15 	stw	r3,-72(fp)
 200eb88:	e0ffed17 	ldw	r3,-76(fp)
 200eb8c:	19000104 	addi	r4,r3,4
 200eb90:	e13fed15 	stw	r4,-76(fp)
 200eb94:	18c00017 	ldw	r3,0(r3)
 200eb98:	10c00015 	stw	r3,0(r2)
 200eb9c:	e0bfed17 	ldw	r2,-76(fp)
 200eba0:	10c00017 	ldw	r3,0(r2)
 200eba4:	e0bfee17 	ldw	r2,-72(fp)
 200eba8:	10c00015 	stw	r3,0(r2)
 200ebac:	00000406 	br	200ebc0 <_realloc_r+0xadc>
 200ebb0:	e1bffa17 	ldw	r6,-24(fp)
 200ebb4:	e17ffe17 	ldw	r5,-8(fp)
 200ebb8:	e13ff617 	ldw	r4,-40(fp)
 200ebbc:	200c4640 	call	200c464 <memmove>
    fREe(RCALL oldmem);
 200ebc0:	e17ffe17 	ldw	r5,-8(fp)
 200ebc4:	e13ffd17 	ldw	r4,-12(fp)
 200ebc8:	200a0ec0 	call	200a0ec <_free_r>
    MALLOC_UNLOCK;
 200ebcc:	e13ffd17 	ldw	r4,-12(fp)
 200ebd0:	2013ce00 	call	2013ce0 <__malloc_unlock>
    return newmem;
 200ebd4:	e0bff617 	ldw	r2,-40(fp)
 200ebd8:	00003906 	br	200ecc0 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
 200ebdc:	e0ffe417 	ldw	r3,-112(fp)
 200ebe0:	e0bff117 	ldw	r2,-60(fp)
 200ebe4:	1885c83a 	sub	r2,r3,r2
 200ebe8:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 200ebec:	e0bffb17 	ldw	r2,-20(fp)
 200ebf0:	10800430 	cmpltui	r2,r2,16
 200ebf4:	10001e1e 	bne	r2,zero,200ec70 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
 200ebf8:	e0ffe317 	ldw	r3,-116(fp)
 200ebfc:	e0bff117 	ldw	r2,-60(fp)
 200ec00:	1885883a 	add	r2,r3,r2
 200ec04:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
 200ec08:	e0bfe317 	ldw	r2,-116(fp)
 200ec0c:	10800117 	ldw	r2,4(r2)
 200ec10:	10c0004c 	andi	r3,r2,1
 200ec14:	e0bff117 	ldw	r2,-60(fp)
 200ec18:	1886b03a 	or	r3,r3,r2
 200ec1c:	e0bfe317 	ldw	r2,-116(fp)
 200ec20:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 200ec24:	e0bffb17 	ldw	r2,-20(fp)
 200ec28:	10c00054 	ori	r3,r2,1
 200ec2c:	e0bffc17 	ldw	r2,-16(fp)
 200ec30:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 200ec34:	e0fffc17 	ldw	r3,-16(fp)
 200ec38:	e0bffb17 	ldw	r2,-20(fp)
 200ec3c:	1885883a 	add	r2,r3,r2
 200ec40:	e13ffc17 	ldw	r4,-16(fp)
 200ec44:	e0fffb17 	ldw	r3,-20(fp)
 200ec48:	20c7883a 	add	r3,r4,r3
 200ec4c:	18c00117 	ldw	r3,4(r3)
 200ec50:	18c00054 	ori	r3,r3,1
 200ec54:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 200ec58:	e0bffc17 	ldw	r2,-16(fp)
 200ec5c:	10800204 	addi	r2,r2,8
 200ec60:	100b883a 	mov	r5,r2
 200ec64:	e13ffd17 	ldw	r4,-12(fp)
 200ec68:	200a0ec0 	call	200a0ec <_free_r>
 200ec6c:	00001006 	br	200ecb0 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
 200ec70:	e0bfe317 	ldw	r2,-116(fp)
 200ec74:	10800117 	ldw	r2,4(r2)
 200ec78:	10c0004c 	andi	r3,r2,1
 200ec7c:	e0bfe417 	ldw	r2,-112(fp)
 200ec80:	1886b03a 	or	r3,r3,r2
 200ec84:	e0bfe317 	ldw	r2,-116(fp)
 200ec88:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 200ec8c:	e0ffe317 	ldw	r3,-116(fp)
 200ec90:	e0bfe417 	ldw	r2,-112(fp)
 200ec94:	1885883a 	add	r2,r3,r2
 200ec98:	e13fe317 	ldw	r4,-116(fp)
 200ec9c:	e0ffe417 	ldw	r3,-112(fp)
 200eca0:	20c7883a 	add	r3,r4,r3
 200eca4:	18c00117 	ldw	r3,4(r3)
 200eca8:	18c00054 	ori	r3,r3,1
 200ecac:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
 200ecb0:	e13ffd17 	ldw	r4,-12(fp)
 200ecb4:	2013ce00 	call	2013ce0 <__malloc_unlock>
  return chunk2mem(newp);
 200ecb8:	e0bfe317 	ldw	r2,-116(fp)
 200ecbc:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
 200ecc0:	e037883a 	mov	sp,fp
 200ecc4:	dfc00117 	ldw	ra,4(sp)
 200ecc8:	df000017 	ldw	fp,0(sp)
 200eccc:	dec00204 	addi	sp,sp,8
 200ecd0:	f800283a 	ret

0200ecd4 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
 200ecd4:	defffb04 	addi	sp,sp,-20
 200ecd8:	dfc00415 	stw	ra,16(sp)
 200ecdc:	df000315 	stw	fp,12(sp)
 200ece0:	df000304 	addi	fp,sp,12
 200ece4:	e13ffe15 	stw	r4,-8(fp)
 200ece8:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 200ecec:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 200ecf0:	e13fff17 	ldw	r4,-4(fp)
 200ecf4:	20138b80 	call	20138b8 <sbrk>
 200ecf8:	e0bffd15 	stw	r2,-12(fp)
 200ecfc:	e0bffd17 	ldw	r2,-12(fp)
 200ed00:	10bfffd8 	cmpnei	r2,r2,-1
 200ed04:	1000051e 	bne	r2,zero,200ed1c <_sbrk_r+0x48>
 200ed08:	d0a72e17 	ldw	r2,-25416(gp)
 200ed0c:	10000326 	beq	r2,zero,200ed1c <_sbrk_r+0x48>
    ptr->_errno = errno;
 200ed10:	d0e72e17 	ldw	r3,-25416(gp)
 200ed14:	e0bffe17 	ldw	r2,-8(fp)
 200ed18:	10c00015 	stw	r3,0(r2)
  return ret;
 200ed1c:	e0bffd17 	ldw	r2,-12(fp)
}
 200ed20:	e037883a 	mov	sp,fp
 200ed24:	dfc00117 	ldw	ra,4(sp)
 200ed28:	df000017 	ldw	fp,0(sp)
 200ed2c:	dec00204 	addi	sp,sp,8
 200ed30:	f800283a 	ret

0200ed34 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200ed34:	defff804 	addi	sp,sp,-32
 200ed38:	dfc00715 	stw	ra,28(sp)
 200ed3c:	df000615 	stw	fp,24(sp)
 200ed40:	dc400515 	stw	r17,20(sp)
 200ed44:	dc000415 	stw	r16,16(sp)
 200ed48:	df000604 	addi	fp,sp,24
 200ed4c:	e13ffa15 	stw	r4,-24(fp)
 200ed50:	e17ffb15 	stw	r5,-20(fp)
 200ed54:	e1bffc15 	stw	r6,-16(fp)
 200ed58:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200ed5c:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 200ed60:	8080038b 	ldhu	r2,14(r16)
 200ed64:	10bfffcc 	andi	r2,r2,65535
 200ed68:	10a0001c 	xori	r2,r2,32768
 200ed6c:	10a00004 	addi	r2,r2,-32768
 200ed70:	e0fffd17 	ldw	r3,-12(fp)
 200ed74:	180f883a 	mov	r7,r3
 200ed78:	e1bffc17 	ldw	r6,-16(fp)
 200ed7c:	100b883a 	mov	r5,r2
 200ed80:	e13ffa17 	ldw	r4,-24(fp)
 200ed84:	2010ddc0 	call	2010ddc <_read_r>
 200ed88:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 200ed8c:	88000416 	blt	r17,zero,200eda0 <__sread+0x6c>
    fp->_offset += ret;
 200ed90:	80801417 	ldw	r2,80(r16)
 200ed94:	1445883a 	add	r2,r2,r17
 200ed98:	80801415 	stw	r2,80(r16)
 200ed9c:	00000406 	br	200edb0 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 200eda0:	80c0030b 	ldhu	r3,12(r16)
 200eda4:	00bbffc4 	movi	r2,-4097
 200eda8:	1884703a 	and	r2,r3,r2
 200edac:	8080030d 	sth	r2,12(r16)
  return ret;
 200edb0:	8805883a 	mov	r2,r17
}
 200edb4:	e6fffe04 	addi	sp,fp,-8
 200edb8:	dfc00317 	ldw	ra,12(sp)
 200edbc:	df000217 	ldw	fp,8(sp)
 200edc0:	dc400117 	ldw	r17,4(sp)
 200edc4:	dc000017 	ldw	r16,0(sp)
 200edc8:	dec00404 	addi	sp,sp,16
 200edcc:	f800283a 	ret

0200edd0 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
 200edd0:	defffb04 	addi	sp,sp,-20
 200edd4:	df000415 	stw	fp,16(sp)
 200edd8:	df000404 	addi	fp,sp,16
 200eddc:	e13ffc15 	stw	r4,-16(fp)
 200ede0:	e17ffd15 	stw	r5,-12(fp)
 200ede4:	e1bffe15 	stw	r6,-8(fp)
 200ede8:	e1ffff15 	stw	r7,-4(fp)
  return 0;
 200edec:	0005883a 	mov	r2,zero
}
 200edf0:	e037883a 	mov	sp,fp
 200edf4:	df000017 	ldw	fp,0(sp)
 200edf8:	dec00104 	addi	sp,sp,4
 200edfc:	f800283a 	ret

0200ee00 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
 200ee00:	defff804 	addi	sp,sp,-32
 200ee04:	dfc00715 	stw	ra,28(sp)
 200ee08:	df000615 	stw	fp,24(sp)
 200ee0c:	dc000515 	stw	r16,20(sp)
 200ee10:	df000604 	addi	fp,sp,24
 200ee14:	e13ffb15 	stw	r4,-20(fp)
 200ee18:	e17ffc15 	stw	r5,-16(fp)
 200ee1c:	e1bffd15 	stw	r6,-12(fp)
 200ee20:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
 200ee24:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 200ee28:	8080030b 	ldhu	r2,12(r16)
 200ee2c:	10bfffcc 	andi	r2,r2,65535
 200ee30:	1080400c 	andi	r2,r2,256
 200ee34:	10000926 	beq	r2,zero,200ee5c <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 200ee38:	8080038b 	ldhu	r2,14(r16)
 200ee3c:	10bfffcc 	andi	r2,r2,65535
 200ee40:	10a0001c 	xori	r2,r2,32768
 200ee44:	10a00004 	addi	r2,r2,-32768
 200ee48:	01c00084 	movi	r7,2
 200ee4c:	000d883a 	mov	r6,zero
 200ee50:	100b883a 	mov	r5,r2
 200ee54:	e13ffb17 	ldw	r4,-20(fp)
 200ee58:	2010d6c0 	call	2010d6c <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 200ee5c:	80c0030b 	ldhu	r3,12(r16)
 200ee60:	00bbffc4 	movi	r2,-4097
 200ee64:	1884703a 	and	r2,r3,r2
 200ee68:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 200ee6c:	8080038b 	ldhu	r2,14(r16)
 200ee70:	10bfffcc 	andi	r2,r2,65535
 200ee74:	10a0001c 	xori	r2,r2,32768
 200ee78:	10a00004 	addi	r2,r2,-32768
 200ee7c:	e0fffe17 	ldw	r3,-8(fp)
 200ee80:	180f883a 	mov	r7,r3
 200ee84:	e1bffd17 	ldw	r6,-12(fp)
 200ee88:	100b883a 	mov	r5,r2
 200ee8c:	e13ffb17 	ldw	r4,-20(fp)
 200ee90:	20106280 	call	2010628 <_write_r>
 200ee94:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 200ee98:	e0bffa17 	ldw	r2,-24(fp)
}
 200ee9c:	e6ffff04 	addi	sp,fp,-4
 200eea0:	dfc00217 	ldw	ra,8(sp)
 200eea4:	df000117 	ldw	fp,4(sp)
 200eea8:	dc000017 	ldw	r16,0(sp)
 200eeac:	dec00304 	addi	sp,sp,12
 200eeb0:	f800283a 	ret

0200eeb4 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
 200eeb4:	defff804 	addi	sp,sp,-32
 200eeb8:	dfc00715 	stw	ra,28(sp)
 200eebc:	df000615 	stw	fp,24(sp)
 200eec0:	dc400515 	stw	r17,20(sp)
 200eec4:	dc000415 	stw	r16,16(sp)
 200eec8:	df000604 	addi	fp,sp,24
 200eecc:	e13ffa15 	stw	r4,-24(fp)
 200eed0:	e17ffb15 	stw	r5,-20(fp)
 200eed4:	e1bffc15 	stw	r6,-16(fp)
 200eed8:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
 200eedc:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 200eee0:	8080038b 	ldhu	r2,14(r16)
 200eee4:	10bfffcc 	andi	r2,r2,65535
 200eee8:	10a0001c 	xori	r2,r2,32768
 200eeec:	10a00004 	addi	r2,r2,-32768
 200eef0:	e1fffd17 	ldw	r7,-12(fp)
 200eef4:	e1bffc17 	ldw	r6,-16(fp)
 200eef8:	100b883a 	mov	r5,r2
 200eefc:	e13ffa17 	ldw	r4,-24(fp)
 200ef00:	2010d6c0 	call	2010d6c <_lseek_r>
 200ef04:	1023883a 	mov	r17,r2
  if (ret == -1L)
 200ef08:	88bfffd8 	cmpnei	r2,r17,-1
 200ef0c:	1000051e 	bne	r2,zero,200ef24 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 200ef10:	80c0030b 	ldhu	r3,12(r16)
 200ef14:	00bbffc4 	movi	r2,-4097
 200ef18:	1884703a 	and	r2,r3,r2
 200ef1c:	8080030d 	sth	r2,12(r16)
 200ef20:	00000406 	br	200ef34 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 200ef24:	8080030b 	ldhu	r2,12(r16)
 200ef28:	10840014 	ori	r2,r2,4096
 200ef2c:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 200ef30:	84401415 	stw	r17,80(r16)
    }
  return ret;
 200ef34:	8805883a 	mov	r2,r17
}
 200ef38:	e6fffe04 	addi	sp,fp,-8
 200ef3c:	dfc00317 	ldw	ra,12(sp)
 200ef40:	df000217 	ldw	fp,8(sp)
 200ef44:	dc400117 	ldw	r17,4(sp)
 200ef48:	dc000017 	ldw	r16,0(sp)
 200ef4c:	dec00404 	addi	sp,sp,16
 200ef50:	f800283a 	ret

0200ef54 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
 200ef54:	defffb04 	addi	sp,sp,-20
 200ef58:	dfc00415 	stw	ra,16(sp)
 200ef5c:	df000315 	stw	fp,12(sp)
 200ef60:	df000304 	addi	fp,sp,12
 200ef64:	e13ffe15 	stw	r4,-8(fp)
 200ef68:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
 200ef6c:	e0bfff17 	ldw	r2,-4(fp)
 200ef70:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
 200ef74:	e0bffd17 	ldw	r2,-12(fp)
 200ef78:	1080038b 	ldhu	r2,14(r2)
 200ef7c:	10bfffcc 	andi	r2,r2,65535
 200ef80:	10a0001c 	xori	r2,r2,32768
 200ef84:	10a00004 	addi	r2,r2,-32768
 200ef88:	100b883a 	mov	r5,r2
 200ef8c:	e13ffe17 	ldw	r4,-8(fp)
 200ef90:	20106980 	call	2010698 <_close_r>
}
 200ef94:	e037883a 	mov	sp,fp
 200ef98:	dfc00117 	ldw	ra,4(sp)
 200ef9c:	df000017 	ldw	fp,0(sp)
 200efa0:	dec00204 	addi	sp,sp,8
 200efa4:	f800283a 	ret

0200efa8 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
 200efa8:	defffb04 	addi	sp,sp,-20
 200efac:	df000415 	stw	fp,16(sp)
 200efb0:	df000404 	addi	fp,sp,16
 200efb4:	e13ffe15 	stw	r4,-8(fp)
 200efb8:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 200efbc:	e0fffe17 	ldw	r3,-8(fp)
 200efc0:	e0bfff17 	ldw	r2,-4(fp)
 200efc4:	1884b03a 	or	r2,r3,r2
 200efc8:	108000cc 	andi	r2,r2,3
 200efcc:	10002a1e 	bne	r2,zero,200f078 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 200efd0:	e0bffe17 	ldw	r2,-8(fp)
 200efd4:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
 200efd8:	e0bfff17 	ldw	r2,-4(fp)
 200efdc:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
 200efe0:	00001506 	br	200f038 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 200efe4:	e0bffc17 	ldw	r2,-16(fp)
 200efe8:	10c00017 	ldw	r3,0(r2)
 200efec:	00bfbff4 	movhi	r2,65279
 200eff0:	10bfbfc4 	addi	r2,r2,-257
 200eff4:	1887883a 	add	r3,r3,r2
 200eff8:	e0bffc17 	ldw	r2,-16(fp)
 200effc:	10800017 	ldw	r2,0(r2)
 200f000:	0084303a 	nor	r2,zero,r2
 200f004:	1886703a 	and	r3,r3,r2
 200f008:	00a02074 	movhi	r2,32897
 200f00c:	10a02004 	addi	r2,r2,-32640
 200f010:	1884703a 	and	r2,r3,r2
 200f014:	10000226 	beq	r2,zero,200f020 <strcmp+0x78>
	    return 0;
 200f018:	0005883a 	mov	r2,zero
 200f01c:	00002e06 	br	200f0d8 <strcmp+0x130>

          a1++;
 200f020:	e0bffc17 	ldw	r2,-16(fp)
 200f024:	10800104 	addi	r2,r2,4
 200f028:	e0bffc15 	stw	r2,-16(fp)
          a2++;
 200f02c:	e0bffd17 	ldw	r2,-12(fp)
 200f030:	10800104 	addi	r2,r2,4
 200f034:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
 200f038:	e0bffc17 	ldw	r2,-16(fp)
 200f03c:	10c00017 	ldw	r3,0(r2)
 200f040:	e0bffd17 	ldw	r2,-12(fp)
 200f044:	10800017 	ldw	r2,0(r2)
 200f048:	18bfe626 	beq	r3,r2,200efe4 <strcmp+0x3c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 200f04c:	e0bffc17 	ldw	r2,-16(fp)
 200f050:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
 200f054:	e0bffd17 	ldw	r2,-12(fp)
 200f058:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 200f05c:	00000606 	br	200f078 <strcmp+0xd0>
    {
      s1++;
 200f060:	e0bffe17 	ldw	r2,-8(fp)
 200f064:	10800044 	addi	r2,r2,1
 200f068:	e0bffe15 	stw	r2,-8(fp)
      s2++;
 200f06c:	e0bfff17 	ldw	r2,-4(fp)
 200f070:	10800044 	addi	r2,r2,1
 200f074:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
 200f078:	e0bffe17 	ldw	r2,-8(fp)
 200f07c:	10800003 	ldbu	r2,0(r2)
 200f080:	10803fcc 	andi	r2,r2,255
 200f084:	1080201c 	xori	r2,r2,128
 200f088:	10bfe004 	addi	r2,r2,-128
 200f08c:	10000b26 	beq	r2,zero,200f0bc <strcmp+0x114>
 200f090:	e0bffe17 	ldw	r2,-8(fp)
 200f094:	10c00003 	ldbu	r3,0(r2)
 200f098:	e0bfff17 	ldw	r2,-4(fp)
 200f09c:	10800003 	ldbu	r2,0(r2)
 200f0a0:	18c03fcc 	andi	r3,r3,255
 200f0a4:	18c0201c 	xori	r3,r3,128
 200f0a8:	18ffe004 	addi	r3,r3,-128
 200f0ac:	10803fcc 	andi	r2,r2,255
 200f0b0:	1080201c 	xori	r2,r2,128
 200f0b4:	10bfe004 	addi	r2,r2,-128
 200f0b8:	18bfe926 	beq	r3,r2,200f060 <strcmp+0xb8>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 200f0bc:	e0bffe17 	ldw	r2,-8(fp)
 200f0c0:	10800003 	ldbu	r2,0(r2)
 200f0c4:	10c03fcc 	andi	r3,r2,255
 200f0c8:	e0bfff17 	ldw	r2,-4(fp)
 200f0cc:	10800003 	ldbu	r2,0(r2)
 200f0d0:	10803fcc 	andi	r2,r2,255
 200f0d4:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 200f0d8:	e037883a 	mov	sp,fp
 200f0dc:	df000017 	ldw	fp,0(sp)
 200f0e0:	dec00104 	addi	sp,sp,4
 200f0e4:	f800283a 	ret

0200f0e8 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
 200f0e8:	defff604 	addi	sp,sp,-40
 200f0ec:	dfc00915 	stw	ra,36(sp)
 200f0f0:	df000815 	stw	fp,32(sp)
 200f0f4:	dc400715 	stw	r17,28(sp)
 200f0f8:	dc000615 	stw	r16,24(sp)
 200f0fc:	df000804 	addi	fp,sp,32
 200f100:	e13ffc15 	stw	r4,-16(fp)
 200f104:	e17ffd15 	stw	r5,-12(fp)
 200f108:	3021883a 	mov	r16,r6
	register int err = 0;
 200f10c:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
 200f110:	80800217 	ldw	r2,8(r16)
 200f114:	1000031e 	bne	r2,zero,200f124 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 200f118:	80000115 	stw	zero,4(r16)
		return (0);
 200f11c:	0005883a 	mov	r2,zero
 200f120:	00003906 	br	200f208 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
 200f124:	e0bffd17 	ldw	r2,-12(fp)
 200f128:	10801917 	ldw	r2,100(r2)
 200f12c:	1088000c 	andi	r2,r2,8192
 200f130:	10002d26 	beq	r2,zero,200f1e8 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
 200f134:	80800017 	ldw	r2,0(r16)
 200f138:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
 200f13c:	00002706 	br	200f1dc <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
 200f140:	e0bff817 	ldw	r2,-32(fp)
 200f144:	10800017 	ldw	r2,0(r2)
 200f148:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
 200f14c:	e0bff817 	ldw	r2,-32(fp)
 200f150:	10800117 	ldw	r2,4(r2)
 200f154:	1004d0ba 	srli	r2,r2,2
 200f158:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
 200f15c:	e03ff915 	stw	zero,-28(fp)
 200f160:	00001206 	br	200f1ac <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 200f164:	e0bff917 	ldw	r2,-28(fp)
 200f168:	1085883a 	add	r2,r2,r2
 200f16c:	1085883a 	add	r2,r2,r2
 200f170:	1007883a 	mov	r3,r2
 200f174:	e0bffa17 	ldw	r2,-24(fp)
 200f178:	10c5883a 	add	r2,r2,r3
 200f17c:	10800017 	ldw	r2,0(r2)
 200f180:	e1bffd17 	ldw	r6,-12(fp)
 200f184:	100b883a 	mov	r5,r2
 200f188:	e13ffc17 	ldw	r4,-16(fp)
 200f18c:	2010bb40 	call	2010bb4 <_fputwc_r>
 200f190:	10bfffd8 	cmpnei	r2,r2,-1
 200f194:	1000021e 	bne	r2,zero,200f1a0 <__sprint_r+0xb8>
					err = -1;
 200f198:	047fffc4 	movi	r17,-1
					goto out;
 200f19c:	00001706 	br	200f1fc <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
 200f1a0:	e0bff917 	ldw	r2,-28(fp)
 200f1a4:	10800044 	addi	r2,r2,1
 200f1a8:	e0bff915 	stw	r2,-28(fp)
 200f1ac:	e0fff917 	ldw	r3,-28(fp)
 200f1b0:	e0bffb17 	ldw	r2,-20(fp)
 200f1b4:	18bfeb16 	blt	r3,r2,200f164 <__sprint_r+0x7c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 200f1b8:	80c00217 	ldw	r3,8(r16)
 200f1bc:	e0bffb17 	ldw	r2,-20(fp)
 200f1c0:	1085883a 	add	r2,r2,r2
 200f1c4:	1085883a 	add	r2,r2,r2
 200f1c8:	1885c83a 	sub	r2,r3,r2
 200f1cc:	80800215 	stw	r2,8(r16)
 200f1d0:	e0bff817 	ldw	r2,-32(fp)
 200f1d4:	10800204 	addi	r2,r2,8
 200f1d8:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
 200f1dc:	80800217 	ldw	r2,8(r16)
 200f1e0:	103fd71e 	bne	r2,zero,200f140 <__sprint_r+0x58>
 200f1e4:	00000506 	br	200f1fc <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
 200f1e8:	800d883a 	mov	r6,r16
 200f1ec:	e17ffd17 	ldw	r5,-12(fp)
 200f1f0:	e13ffc17 	ldw	r4,-16(fp)
 200f1f4:	200a8180 	call	200a818 <__sfvwrite_r>
 200f1f8:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
 200f1fc:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 200f200:	80000115 	stw	zero,4(r16)
	return (err);
 200f204:	8805883a 	mov	r2,r17
}
 200f208:	e6fffe04 	addi	sp,fp,-8
 200f20c:	dfc00317 	ldw	ra,12(sp)
 200f210:	df000217 	ldw	fp,8(sp)
 200f214:	dc400117 	ldw	r17,4(sp)
 200f218:	dc000017 	ldw	r16,0(sp)
 200f21c:	dec00404 	addi	sp,sp,16
 200f220:	f800283a 	ret

0200f224 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
 200f224:	defedf04 	addi	sp,sp,-1156
 200f228:	dfc12015 	stw	ra,1152(sp)
 200f22c:	df011f15 	stw	fp,1148(sp)
 200f230:	dc011e15 	stw	r16,1144(sp)
 200f234:	df011f04 	addi	fp,sp,1148
 200f238:	e13ffc15 	stw	r4,-16(fp)
 200f23c:	2821883a 	mov	r16,r5
 200f240:	e1bffd15 	stw	r6,-12(fp)
 200f244:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 200f248:	80c0030b 	ldhu	r3,12(r16)
 200f24c:	00bfff44 	movi	r2,-3
 200f250:	1884703a 	and	r2,r3,r2
 200f254:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
 200f258:	80801917 	ldw	r2,100(r16)
 200f25c:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
 200f260:	8080038b 	ldhu	r2,14(r16)
 200f264:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
 200f268:	80800717 	ldw	r2,28(r16)
 200f26c:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
 200f270:	80800917 	ldw	r2,36(r16)
 200f274:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 200f278:	e0befc04 	addi	r2,fp,-1040
 200f27c:	e0bee215 	stw	r2,-1144(fp)
 200f280:	e0bee217 	ldw	r2,-1144(fp)
 200f284:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
 200f288:	00810004 	movi	r2,1024
 200f28c:	e0bee415 	stw	r2,-1136(fp)
 200f290:	e0bee417 	ldw	r2,-1136(fp)
 200f294:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 200f298:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 200f29c:	e0bee204 	addi	r2,fp,-1144
 200f2a0:	e1fffe17 	ldw	r7,-8(fp)
 200f2a4:	e1bffd17 	ldw	r6,-12(fp)
 200f2a8:	100b883a 	mov	r5,r2
 200f2ac:	e13ffc17 	ldw	r4,-16(fp)
 200f2b0:	200f3640 	call	200f364 <___vfiprintf_internal_r>
 200f2b4:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 200f2b8:	e0bee117 	ldw	r2,-1148(fp)
 200f2bc:	10000716 	blt	r2,zero,200f2dc <__sbprintf+0xb8>
 200f2c0:	e0bee204 	addi	r2,fp,-1144
 200f2c4:	100b883a 	mov	r5,r2
 200f2c8:	e13ffc17 	ldw	r4,-16(fp)
 200f2cc:	2009a4c0 	call	2009a4c <_fflush_r>
 200f2d0:	10000226 	beq	r2,zero,200f2dc <__sbprintf+0xb8>
		ret = EOF;
 200f2d4:	00bfffc4 	movi	r2,-1
 200f2d8:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
 200f2dc:	e0bee50b 	ldhu	r2,-1132(fp)
 200f2e0:	10bfffcc 	andi	r2,r2,65535
 200f2e4:	1080100c 	andi	r2,r2,64
 200f2e8:	10000326 	beq	r2,zero,200f2f8 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 200f2ec:	8080030b 	ldhu	r2,12(r16)
 200f2f0:	10801014 	ori	r2,r2,64
 200f2f4:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 200f2f8:	e0bee117 	ldw	r2,-1148(fp)
}
 200f2fc:	e6ffff04 	addi	sp,fp,-4
 200f300:	dfc00217 	ldw	ra,8(sp)
 200f304:	df000117 	ldw	fp,4(sp)
 200f308:	dc000017 	ldw	r16,0(sp)
 200f30c:	dec00304 	addi	sp,sp,12
 200f310:	f800283a 	ret

0200f314 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
 200f314:	defffa04 	addi	sp,sp,-24
 200f318:	dfc00515 	stw	ra,20(sp)
 200f31c:	df000415 	stw	fp,16(sp)
 200f320:	df000404 	addi	fp,sp,16
 200f324:	e13ffd15 	stw	r4,-12(fp)
 200f328:	e17ffe15 	stw	r5,-8(fp)
 200f32c:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 200f330:	d0a00017 	ldw	r2,-32768(gp)
 200f334:	e1ffff17 	ldw	r7,-4(fp)
 200f338:	e1bffe17 	ldw	r6,-8(fp)
 200f33c:	e17ffd17 	ldw	r5,-12(fp)
 200f340:	1009883a 	mov	r4,r2
 200f344:	200f3640 	call	200f364 <___vfiprintf_internal_r>
 200f348:	e0bffc15 	stw	r2,-16(fp)
  return result;
 200f34c:	e0bffc17 	ldw	r2,-16(fp)
}
 200f350:	e037883a 	mov	sp,fp
 200f354:	dfc00117 	ldw	ra,4(sp)
 200f358:	df000017 	ldw	fp,0(sp)
 200f35c:	dec00204 	addi	sp,sp,8
 200f360:	f800283a 	ret

0200f364 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
 200f364:	deffb704 	addi	sp,sp,-292
 200f368:	dfc04815 	stw	ra,288(sp)
 200f36c:	df004715 	stw	fp,284(sp)
 200f370:	ddc04615 	stw	r23,280(sp)
 200f374:	dd804515 	stw	r22,276(sp)
 200f378:	dd404415 	stw	r21,272(sp)
 200f37c:	dd004315 	stw	r20,268(sp)
 200f380:	dcc04215 	stw	r19,264(sp)
 200f384:	dc804115 	stw	r18,260(sp)
 200f388:	dc404015 	stw	r17,256(sp)
 200f38c:	dc003f15 	stw	r16,252(sp)
 200f390:	df004704 	addi	fp,sp,284
 200f394:	e13fe615 	stw	r4,-104(fp)
 200f398:	e17fe715 	stw	r5,-100(fp)
 200f39c:	e1bfe815 	stw	r6,-96(fp)
 200f3a0:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 200f3a4:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 200f3a8:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 200f3ac:	e0bfe617 	ldw	r2,-104(fp)
 200f3b0:	e0bfc415 	stw	r2,-240(fp)
 200f3b4:	e0bfc417 	ldw	r2,-240(fp)
 200f3b8:	10000526 	beq	r2,zero,200f3d0 <___vfiprintf_internal_r+0x6c>
 200f3bc:	e0bfc417 	ldw	r2,-240(fp)
 200f3c0:	10800e17 	ldw	r2,56(r2)
 200f3c4:	1000021e 	bne	r2,zero,200f3d0 <___vfiprintf_internal_r+0x6c>
 200f3c8:	e13fc417 	ldw	r4,-240(fp)
 200f3cc:	2009ecc0 	call	2009ecc <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 200f3d0:	e0bfe717 	ldw	r2,-100(fp)
 200f3d4:	1080030b 	ldhu	r2,12(r2)
 200f3d8:	10bfffcc 	andi	r2,r2,65535
 200f3dc:	1088000c 	andi	r2,r2,8192
 200f3e0:	10000c1e 	bne	r2,zero,200f414 <___vfiprintf_internal_r+0xb0>
 200f3e4:	e0bfe717 	ldw	r2,-100(fp)
 200f3e8:	1080030b 	ldhu	r2,12(r2)
 200f3ec:	10880014 	ori	r2,r2,8192
 200f3f0:	1007883a 	mov	r3,r2
 200f3f4:	e0bfe717 	ldw	r2,-100(fp)
 200f3f8:	10c0030d 	sth	r3,12(r2)
 200f3fc:	e0bfe717 	ldw	r2,-100(fp)
 200f400:	10c01917 	ldw	r3,100(r2)
 200f404:	00b7ffc4 	movi	r2,-8193
 200f408:	1886703a 	and	r3,r3,r2
 200f40c:	e0bfe717 	ldw	r2,-100(fp)
 200f410:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 200f414:	e0bfe717 	ldw	r2,-100(fp)
 200f418:	1080030b 	ldhu	r2,12(r2)
 200f41c:	10bfffcc 	andi	r2,r2,65535
 200f420:	1080020c 	andi	r2,r2,8
 200f424:	10000326 	beq	r2,zero,200f434 <___vfiprintf_internal_r+0xd0>
 200f428:	e0bfe717 	ldw	r2,-100(fp)
 200f42c:	10800417 	ldw	r2,16(r2)
 200f430:	1000061e 	bne	r2,zero,200f44c <___vfiprintf_internal_r+0xe8>
 200f434:	e17fe717 	ldw	r5,-100(fp)
 200f438:	e13fe617 	ldw	r4,-104(fp)
 200f43c:	200767c0 	call	200767c <__swsetup_r>
 200f440:	10000226 	beq	r2,zero,200f44c <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
 200f444:	00bfffc4 	movi	r2,-1
 200f448:	00046a06 	br	20105f4 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200f44c:	e0bfe717 	ldw	r2,-100(fp)
 200f450:	1080030b 	ldhu	r2,12(r2)
 200f454:	10bfffcc 	andi	r2,r2,65535
 200f458:	1080068c 	andi	r2,r2,26
 200f45c:	10800298 	cmpnei	r2,r2,10
 200f460:	10000c1e 	bne	r2,zero,200f494 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
 200f464:	e0bfe717 	ldw	r2,-100(fp)
 200f468:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 200f46c:	10bfffcc 	andi	r2,r2,65535
 200f470:	10a0001c 	xori	r2,r2,32768
 200f474:	10a00004 	addi	r2,r2,-32768
 200f478:	10000616 	blt	r2,zero,200f494 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 200f47c:	e1ffe917 	ldw	r7,-92(fp)
 200f480:	e1bfe817 	ldw	r6,-96(fp)
 200f484:	e17fe717 	ldw	r5,-100(fp)
 200f488:	e13fe617 	ldw	r4,-104(fp)
 200f48c:	200f2240 	call	200f224 <__sbprintf>
 200f490:	00045806 	br	20105f4 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 200f494:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 200f498:	e4bfcb04 	addi	r18,fp,-212
 200f49c:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
 200f4a0:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
 200f4a4:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
 200f4a8:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 200f4ac:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200f4b0:	00000106 	br	200f4b8 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
 200f4b4:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 200f4b8:	a8800003 	ldbu	r2,0(r21)
 200f4bc:	10803fcc 	andi	r2,r2,255
 200f4c0:	1080201c 	xori	r2,r2,128
 200f4c4:	10bfe004 	addi	r2,r2,-128
 200f4c8:	10000626 	beq	r2,zero,200f4e4 <___vfiprintf_internal_r+0x180>
 200f4cc:	a8800003 	ldbu	r2,0(r21)
 200f4d0:	10803fcc 	andi	r2,r2,255
 200f4d4:	1080201c 	xori	r2,r2,128
 200f4d8:	10bfe004 	addi	r2,r2,-128
 200f4dc:	10800958 	cmpnei	r2,r2,37
 200f4e0:	103ff41e 	bne	r2,zero,200f4b4 <___vfiprintf_internal_r+0x150>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
 200f4e4:	a807883a 	mov	r3,r21
 200f4e8:	a005883a 	mov	r2,r20
 200f4ec:	18a1c83a 	sub	r16,r3,r2
 200f4f0:	80001826 	beq	r16,zero,200f554 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
 200f4f4:	95000015 	stw	r20,0(r18)
 200f4f8:	8005883a 	mov	r2,r16
 200f4fc:	90800115 	stw	r2,4(r18)
 200f500:	e0bfca17 	ldw	r2,-216(fp)
 200f504:	8007883a 	mov	r3,r16
 200f508:	10c5883a 	add	r2,r2,r3
 200f50c:	e0bfca15 	stw	r2,-216(fp)
 200f510:	94800204 	addi	r18,r18,8
 200f514:	e0bfc917 	ldw	r2,-220(fp)
 200f518:	10800044 	addi	r2,r2,1
 200f51c:	e0bfc915 	stw	r2,-220(fp)
 200f520:	e0bfc917 	ldw	r2,-220(fp)
 200f524:	10800210 	cmplti	r2,r2,8
 200f528:	1000071e 	bne	r2,zero,200f548 <___vfiprintf_internal_r+0x1e4>
 200f52c:	e0bfc804 	addi	r2,fp,-224
 200f530:	100d883a 	mov	r6,r2
 200f534:	e17fe717 	ldw	r5,-100(fp)
 200f538:	e13fe617 	ldw	r4,-104(fp)
 200f53c:	200f0e80 	call	200f0e8 <__sprint_r>
 200f540:	1004031e 	bne	r2,zero,2010550 <___vfiprintf_internal_r+0x11ec>
 200f544:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
 200f548:	e0bfb917 	ldw	r2,-284(fp)
 200f54c:	1405883a 	add	r2,r2,r16
 200f550:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 200f554:	a8800003 	ldbu	r2,0(r21)
 200f558:	10803fcc 	andi	r2,r2,255
 200f55c:	1080201c 	xori	r2,r2,128
 200f560:	10bfe004 	addi	r2,r2,-128
 200f564:	1003ec26 	beq	r2,zero,2010518 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
 200f568:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
 200f56c:	ad400044 	addi	r21,r21,1

		flags = 0;
 200f570:	0027883a 	mov	r19,zero
		dprec = 0;
 200f574:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
 200f578:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
 200f57c:	00bfffc4 	movi	r2,-1
 200f580:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
 200f584:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 200f588:	a805883a 	mov	r2,r21
 200f58c:	15400044 	addi	r21,r2,1
 200f590:	10800003 	ldbu	r2,0(r2)
 200f594:	14403fcc 	andi	r17,r2,255
 200f598:	8c40201c 	xori	r17,r17,128
 200f59c:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
 200f5a0:	88bff804 	addi	r2,r17,-32
 200f5a4:	10c01668 	cmpgeui	r3,r2,89
 200f5a8:	1802881e 	bne	r3,zero,200ffcc <___vfiprintf_internal_r+0xc68>
 200f5ac:	100690ba 	slli	r3,r2,2
 200f5b0:	00808074 	movhi	r2,513
 200f5b4:	10bd7104 	addi	r2,r2,-2620
 200f5b8:	1885883a 	add	r2,r3,r2
 200f5bc:	10800017 	ldw	r2,0(r2)
 200f5c0:	1000683a 	jmp	r2
 200f5c4:	0200f728 	cmpgeui	r8,zero,988
 200f5c8:	0200ffcc 	andi	r8,zero,1023
 200f5cc:	0200ffcc 	andi	r8,zero,1023
 200f5d0:	0200f748 	cmpgei	r8,zero,989
 200f5d4:	0200ffcc 	andi	r8,zero,1023
 200f5d8:	0200ffcc 	andi	r8,zero,1023
 200f5dc:	0200ffcc 	andi	r8,zero,1023
 200f5e0:	0200ffcc 	andi	r8,zero,1023
 200f5e4:	0200ffcc 	andi	r8,zero,1023
 200f5e8:	0200ffcc 	andi	r8,zero,1023
 200f5ec:	0200f750 	cmplti	r8,zero,989
 200f5f0:	0200f784 	movi	r8,990
 200f5f4:	0200ffcc 	andi	r8,zero,1023
 200f5f8:	0200f77c 	xorhi	r8,zero,989
 200f5fc:	0200f790 	cmplti	r8,zero,990
 200f600:	0200ffcc 	andi	r8,zero,1023
 200f604:	0200f824 	muli	r8,zero,992
 200f608:	0200f82c 	andhi	r8,zero,992
 200f60c:	0200f82c 	andhi	r8,zero,992
 200f610:	0200f82c 	andhi	r8,zero,992
 200f614:	0200f82c 	andhi	r8,zero,992
 200f618:	0200f82c 	andhi	r8,zero,992
 200f61c:	0200f82c 	andhi	r8,zero,992
 200f620:	0200f82c 	andhi	r8,zero,992
 200f624:	0200f82c 	andhi	r8,zero,992
 200f628:	0200f82c 	andhi	r8,zero,992
 200f62c:	0200ffcc 	andi	r8,zero,1023
 200f630:	0200ffcc 	andi	r8,zero,1023
 200f634:	0200ffcc 	andi	r8,zero,1023
 200f638:	0200ffcc 	andi	r8,zero,1023
 200f63c:	0200ffcc 	andi	r8,zero,1023
 200f640:	0200ffcc 	andi	r8,zero,1023
 200f644:	0200ffcc 	andi	r8,zero,1023
 200f648:	0200ffcc 	andi	r8,zero,1023
 200f64c:	0200ffcc 	andi	r8,zero,1023
 200f650:	0200ffcc 	andi	r8,zero,1023
 200f654:	0200f8cc 	andi	r8,zero,995
 200f658:	0200ffcc 	andi	r8,zero,1023
 200f65c:	0200ffcc 	andi	r8,zero,1023
 200f660:	0200ffcc 	andi	r8,zero,1023
 200f664:	0200ffcc 	andi	r8,zero,1023
 200f668:	0200ffcc 	andi	r8,zero,1023
 200f66c:	0200ffcc 	andi	r8,zero,1023
 200f670:	0200ffcc 	andi	r8,zero,1023
 200f674:	0200ffcc 	andi	r8,zero,1023
 200f678:	0200ffcc 	andi	r8,zero,1023
 200f67c:	0200ffcc 	andi	r8,zero,1023
 200f680:	0200fa6c 	andhi	r8,zero,1001
 200f684:	0200ffcc 	andi	r8,zero,1023
 200f688:	0200ffcc 	andi	r8,zero,1023
 200f68c:	0200ffcc 	andi	r8,zero,1023
 200f690:	0200ffcc 	andi	r8,zero,1023
 200f694:	0200ffcc 	andi	r8,zero,1023
 200f698:	0200fbe8 	cmpgeui	r8,zero,1007
 200f69c:	0200ffcc 	andi	r8,zero,1023
 200f6a0:	0200ffcc 	andi	r8,zero,1023
 200f6a4:	0200fca8 	cmpgeui	r8,zero,1010
 200f6a8:	0200ffcc 	andi	r8,zero,1023
 200f6ac:	0200ffcc 	andi	r8,zero,1023
 200f6b0:	0200ffcc 	andi	r8,zero,1023
 200f6b4:	0200ffcc 	andi	r8,zero,1023
 200f6b8:	0200ffcc 	andi	r8,zero,1023
 200f6bc:	0200ffcc 	andi	r8,zero,1023
 200f6c0:	0200ffcc 	andi	r8,zero,1023
 200f6c4:	0200ffcc 	andi	r8,zero,1023
 200f6c8:	0200ffcc 	andi	r8,zero,1023
 200f6cc:	0200ffcc 	andi	r8,zero,1023
 200f6d0:	0200f8a4 	muli	r8,zero,994
 200f6d4:	0200f8d0 	cmplti	r8,zero,995
 200f6d8:	0200ffcc 	andi	r8,zero,1023
 200f6dc:	0200ffcc 	andi	r8,zero,1023
 200f6e0:	0200ffcc 	andi	r8,zero,1023
 200f6e4:	0200f868 	cmpgeui	r8,zero,993
 200f6e8:	0200f8d0 	cmplti	r8,zero,995
 200f6ec:	0200ffcc 	andi	r8,zero,1023
 200f6f0:	0200ffcc 	andi	r8,zero,1023
 200f6f4:	0200f870 	cmpltui	r8,zero,993
 200f6f8:	0200ffcc 	andi	r8,zero,1023
 200f6fc:	0200f9cc 	andi	r8,zero,999
 200f700:	0200fa70 	cmpltui	r8,zero,1001
 200f704:	0200fb10 	cmplti	r8,zero,1004
 200f708:	0200f89c 	xori	r8,zero,994
 200f70c:	0200ffcc 	andi	r8,zero,1023
 200f710:	0200fb58 	cmpnei	r8,zero,1005
 200f714:	0200ffcc 	andi	r8,zero,1023
 200f718:	0200fbec 	andhi	r8,zero,1007
 200f71c:	0200ffcc 	andi	r8,zero,1023
 200f720:	0200ffcc 	andi	r8,zero,1023
 200f724:	0200fcb8 	rdprs	r8,zero,1010
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 200f728:	e0bfc703 	ldbu	r2,-228(fp)
 200f72c:	10803fcc 	andi	r2,r2,255
 200f730:	1080201c 	xori	r2,r2,128
 200f734:	10bfe004 	addi	r2,r2,-128
 200f738:	103f931e 	bne	r2,zero,200f588 <___vfiprintf_internal_r+0x224>
				sign = ' ';
 200f73c:	00800804 	movi	r2,32
 200f740:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200f744:	003f9006 	br	200f588 <___vfiprintf_internal_r+0x224>
		case '#':
			flags |= ALT;
 200f748:	9cc00054 	ori	r19,r19,1
			goto rflag;
 200f74c:	003f8e06 	br	200f588 <___vfiprintf_internal_r+0x224>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 200f750:	e0bfe917 	ldw	r2,-92(fp)
 200f754:	10c00104 	addi	r3,r2,4
 200f758:	e0ffe915 	stw	r3,-92(fp)
 200f75c:	10800017 	ldw	r2,0(r2)
 200f760:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 200f764:	e0bfba17 	ldw	r2,-280(fp)
 200f768:	10000116 	blt	r2,zero,200f770 <___vfiprintf_internal_r+0x40c>
				goto rflag;
 200f76c:	003f8606 	br	200f588 <___vfiprintf_internal_r+0x224>
			width = -width;
 200f770:	e0bfba17 	ldw	r2,-280(fp)
 200f774:	0085c83a 	sub	r2,zero,r2
 200f778:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 200f77c:	9cc00114 	ori	r19,r19,4
			goto rflag;
 200f780:	003f8106 	br	200f588 <___vfiprintf_internal_r+0x224>
		case '+':
			sign = '+';
 200f784:	00800ac4 	movi	r2,43
 200f788:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
 200f78c:	003f7e06 	br	200f588 <___vfiprintf_internal_r+0x224>
		case '.':
			if ((ch = *fmt++) == '*') {
 200f790:	a805883a 	mov	r2,r21
 200f794:	15400044 	addi	r21,r2,1
 200f798:	10800003 	ldbu	r2,0(r2)
 200f79c:	14403fcc 	andi	r17,r2,255
 200f7a0:	8c40201c 	xori	r17,r17,128
 200f7a4:	8c7fe004 	addi	r17,r17,-128
 200f7a8:	88800a98 	cmpnei	r2,r17,42
 200f7ac:	10000a1e 	bne	r2,zero,200f7d8 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 200f7b0:	e0bfe917 	ldw	r2,-92(fp)
 200f7b4:	10c00104 	addi	r3,r2,4
 200f7b8:	e0ffe915 	stw	r3,-92(fp)
 200f7bc:	10800017 	ldw	r2,0(r2)
 200f7c0:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 200f7c4:	e0bfbb17 	ldw	r2,-276(fp)
 200f7c8:	103f6f0e 	bge	r2,zero,200f588 <___vfiprintf_internal_r+0x224>
					prec = -1;
 200f7cc:	00bfffc4 	movi	r2,-1
 200f7d0:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
 200f7d4:	003f6c06 	br	200f588 <___vfiprintf_internal_r+0x224>
			}
			n = 0;
 200f7d8:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
 200f7dc:	00000906 	br	200f804 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
 200f7e0:	80c002a4 	muli	r3,r16,10
 200f7e4:	88bff404 	addi	r2,r17,-48
 200f7e8:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200f7ec:	a805883a 	mov	r2,r21
 200f7f0:	15400044 	addi	r21,r2,1
 200f7f4:	10800003 	ldbu	r2,0(r2)
 200f7f8:	14403fcc 	andi	r17,r2,255
 200f7fc:	8c40201c 	xori	r17,r17,128
 200f800:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
 200f804:	88bff404 	addi	r2,r17,-48
 200f808:	108002b0 	cmpltui	r2,r2,10
 200f80c:	103ff41e 	bne	r2,zero,200f7e0 <___vfiprintf_internal_r+0x47c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
 200f810:	8005883a 	mov	r2,r16
 200f814:	1000010e 	bge	r2,zero,200f81c <___vfiprintf_internal_r+0x4b8>
 200f818:	00bfffc4 	movi	r2,-1
 200f81c:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
 200f820:	003f5f06 	br	200f5a0 <___vfiprintf_internal_r+0x23c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 200f824:	9cc02014 	ori	r19,r19,128
			goto rflag;
 200f828:	003f5706 	br	200f588 <___vfiprintf_internal_r+0x224>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 200f82c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
 200f830:	80c002a4 	muli	r3,r16,10
 200f834:	88bff404 	addi	r2,r17,-48
 200f838:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
 200f83c:	a805883a 	mov	r2,r21
 200f840:	15400044 	addi	r21,r2,1
 200f844:	10800003 	ldbu	r2,0(r2)
 200f848:	14403fcc 	andi	r17,r2,255
 200f84c:	8c40201c 	xori	r17,r17,128
 200f850:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
 200f854:	88bff404 	addi	r2,r17,-48
 200f858:	108002b0 	cmpltui	r2,r2,10
 200f85c:	103ff41e 	bne	r2,zero,200f830 <___vfiprintf_internal_r+0x4cc>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 200f860:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
 200f864:	003f4e06 	br	200f5a0 <___vfiprintf_internal_r+0x23c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 200f868:	9cc01014 	ori	r19,r19,64
			goto rflag;
 200f86c:	003f4606 	br	200f588 <___vfiprintf_internal_r+0x224>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 200f870:	a8800003 	ldbu	r2,0(r21)
 200f874:	10803fcc 	andi	r2,r2,255
 200f878:	1080201c 	xori	r2,r2,128
 200f87c:	10bfe004 	addi	r2,r2,-128
 200f880:	10801b18 	cmpnei	r2,r2,108
 200f884:	1000031e 	bne	r2,zero,200f894 <___vfiprintf_internal_r+0x530>
				fmt++;
 200f888:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 200f88c:	9cc00814 	ori	r19,r19,32
 200f890:	003f3d06 	br	200f588 <___vfiprintf_internal_r+0x224>
			} else
#endif
				flags |= LONGINT;
 200f894:	9cc00414 	ori	r19,r19,16
			goto rflag;
 200f898:	003f3b06 	br	200f588 <___vfiprintf_internal_r+0x224>
		case 'q': /* extension */
			flags |= QUADINT;
 200f89c:	9cc00814 	ori	r19,r19,32
			goto rflag;
 200f8a0:	003f3906 	br	200f588 <___vfiprintf_internal_r+0x224>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 200f8a4:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 200f8a8:	e0bfe917 	ldw	r2,-92(fp)
 200f8ac:	10c00104 	addi	r3,r2,4
 200f8b0:	e0ffe915 	stw	r3,-92(fp)
 200f8b4:	10800017 	ldw	r2,0(r2)
 200f8b8:	a0800005 	stb	r2,0(r20)
				size = 1;
 200f8bc:	00800044 	movi	r2,1
 200f8c0:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
 200f8c4:	e03fc705 	stb	zero,-228(fp)
			break;
 200f8c8:	0001c806 	br	200ffec <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
 200f8cc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 200f8d0:	9880080c 	andi	r2,r19,32
 200f8d4:	10000826 	beq	r2,zero,200f8f8 <___vfiprintf_internal_r+0x594>
 200f8d8:	e13fe917 	ldw	r4,-92(fp)
 200f8dc:	20800204 	addi	r2,r4,8
 200f8e0:	e0bfe915 	stw	r2,-92(fp)
 200f8e4:	20800017 	ldw	r2,0(r4)
 200f8e8:	20c00117 	ldw	r3,4(r4)
 200f8ec:	e0bfea15 	stw	r2,-88(fp)
 200f8f0:	e0ffeb15 	stw	r3,-84(fp)
 200f8f4:	00001e06 	br	200f970 <___vfiprintf_internal_r+0x60c>
 200f8f8:	9880040c 	andi	r2,r19,16
 200f8fc:	10000826 	beq	r2,zero,200f920 <___vfiprintf_internal_r+0x5bc>
 200f900:	e0bfe917 	ldw	r2,-92(fp)
 200f904:	10c00104 	addi	r3,r2,4
 200f908:	e0ffe915 	stw	r3,-92(fp)
 200f90c:	10800017 	ldw	r2,0(r2)
 200f910:	e0bfea15 	stw	r2,-88(fp)
 200f914:	1005d7fa 	srai	r2,r2,31
 200f918:	e0bfeb15 	stw	r2,-84(fp)
 200f91c:	00001406 	br	200f970 <___vfiprintf_internal_r+0x60c>
 200f920:	9880100c 	andi	r2,r19,64
 200f924:	10000b26 	beq	r2,zero,200f954 <___vfiprintf_internal_r+0x5f0>
 200f928:	e0bfe917 	ldw	r2,-92(fp)
 200f92c:	10c00104 	addi	r3,r2,4
 200f930:	e0ffe915 	stw	r3,-92(fp)
 200f934:	10800017 	ldw	r2,0(r2)
 200f938:	10bfffcc 	andi	r2,r2,65535
 200f93c:	10a0001c 	xori	r2,r2,32768
 200f940:	10a00004 	addi	r2,r2,-32768
 200f944:	e0bfea15 	stw	r2,-88(fp)
 200f948:	1005d7fa 	srai	r2,r2,31
 200f94c:	e0bfeb15 	stw	r2,-84(fp)
 200f950:	00000706 	br	200f970 <___vfiprintf_internal_r+0x60c>
 200f954:	e0bfe917 	ldw	r2,-92(fp)
 200f958:	10c00104 	addi	r3,r2,4
 200f95c:	e0ffe915 	stw	r3,-92(fp)
 200f960:	10800017 	ldw	r2,0(r2)
 200f964:	e0bfea15 	stw	r2,-88(fp)
 200f968:	1005d7fa 	srai	r2,r2,31
 200f96c:	e0bfeb15 	stw	r2,-84(fp)
 200f970:	e0bfea17 	ldw	r2,-88(fp)
 200f974:	e0bfbc15 	stw	r2,-272(fp)
 200f978:	e0ffeb17 	ldw	r3,-84(fp)
 200f97c:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 200f980:	e0bfbc17 	ldw	r2,-272(fp)
 200f984:	e0ffbd17 	ldw	r3,-268(fp)
 200f988:	18000d0e 	bge	r3,zero,200f9c0 <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 200f98c:	000d883a 	mov	r6,zero
 200f990:	000f883a 	mov	r7,zero
 200f994:	e13fbc17 	ldw	r4,-272(fp)
 200f998:	e17fbd17 	ldw	r5,-268(fp)
 200f99c:	3105c83a 	sub	r2,r6,r4
 200f9a0:	3091803a 	cmpltu	r8,r6,r2
 200f9a4:	3947c83a 	sub	r3,r7,r5
 200f9a8:	1a09c83a 	sub	r4,r3,r8
 200f9ac:	2007883a 	mov	r3,r4
 200f9b0:	e0bfbc15 	stw	r2,-272(fp)
 200f9b4:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
 200f9b8:	00800b44 	movi	r2,45
 200f9bc:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
 200f9c0:	00800044 	movi	r2,1
 200f9c4:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
 200f9c8:	0000f806 	br	200fdac <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 200f9cc:	9880080c 	andi	r2,r19,32
 200f9d0:	10000d26 	beq	r2,zero,200fa08 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 200f9d4:	e0bfe917 	ldw	r2,-92(fp)
 200f9d8:	10c00104 	addi	r3,r2,4
 200f9dc:	e0ffe915 	stw	r3,-92(fp)
 200f9e0:	10800017 	ldw	r2,0(r2)
 200f9e4:	e0ffb917 	ldw	r3,-284(fp)
 200f9e8:	e0fff015 	stw	r3,-64(fp)
 200f9ec:	1807d7fa 	srai	r3,r3,31
 200f9f0:	e0fff115 	stw	r3,-60(fp)
 200f9f4:	e0fff017 	ldw	r3,-64(fp)
 200f9f8:	10c00015 	stw	r3,0(r2)
 200f9fc:	e0fff117 	ldw	r3,-60(fp)
 200fa00:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200fa04:	0002c306 	br	2010514 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
 200fa08:	9880040c 	andi	r2,r19,16
 200fa0c:	10000726 	beq	r2,zero,200fa2c <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 200fa10:	e0bfe917 	ldw	r2,-92(fp)
 200fa14:	10c00104 	addi	r3,r2,4
 200fa18:	e0ffe915 	stw	r3,-92(fp)
 200fa1c:	10800017 	ldw	r2,0(r2)
 200fa20:	e0ffb917 	ldw	r3,-284(fp)
 200fa24:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200fa28:	0002ba06 	br	2010514 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
 200fa2c:	9880100c 	andi	r2,r19,64
 200fa30:	10000726 	beq	r2,zero,200fa50 <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 200fa34:	e0bfe917 	ldw	r2,-92(fp)
 200fa38:	10c00104 	addi	r3,r2,4
 200fa3c:	e0ffe915 	stw	r3,-92(fp)
 200fa40:	10800017 	ldw	r2,0(r2)
 200fa44:	e0ffb917 	ldw	r3,-284(fp)
 200fa48:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 200fa4c:	0002b106 	br	2010514 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
 200fa50:	e0bfe917 	ldw	r2,-92(fp)
 200fa54:	10c00104 	addi	r3,r2,4
 200fa58:	e0ffe915 	stw	r3,-92(fp)
 200fa5c:	10800017 	ldw	r2,0(r2)
 200fa60:	e0ffb917 	ldw	r3,-284(fp)
 200fa64:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 200fa68:	0002aa06 	br	2010514 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
 200fa6c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 200fa70:	9880080c 	andi	r2,r19,32
 200fa74:	10000626 	beq	r2,zero,200fa90 <___vfiprintf_internal_r+0x72c>
 200fa78:	e0bfe917 	ldw	r2,-92(fp)
 200fa7c:	10c00204 	addi	r3,r2,8
 200fa80:	e0ffe915 	stw	r3,-92(fp)
 200fa84:	15800017 	ldw	r22,0(r2)
 200fa88:	15c00117 	ldw	r23,4(r2)
 200fa8c:	00001c06 	br	200fb00 <___vfiprintf_internal_r+0x79c>
 200fa90:	9880040c 	andi	r2,r19,16
 200fa94:	10000726 	beq	r2,zero,200fab4 <___vfiprintf_internal_r+0x750>
 200fa98:	e0bfe917 	ldw	r2,-92(fp)
 200fa9c:	10c00104 	addi	r3,r2,4
 200faa0:	e0ffe915 	stw	r3,-92(fp)
 200faa4:	10800017 	ldw	r2,0(r2)
 200faa8:	102d883a 	mov	r22,r2
 200faac:	002f883a 	mov	r23,zero
 200fab0:	00001306 	br	200fb00 <___vfiprintf_internal_r+0x79c>
 200fab4:	9880100c 	andi	r2,r19,64
 200fab8:	10000b26 	beq	r2,zero,200fae8 <___vfiprintf_internal_r+0x784>
 200fabc:	e0bfe917 	ldw	r2,-92(fp)
 200fac0:	10c00104 	addi	r3,r2,4
 200fac4:	e0ffe915 	stw	r3,-92(fp)
 200fac8:	10800017 	ldw	r2,0(r2)
 200facc:	e0bff215 	stw	r2,-56(fp)
 200fad0:	e03ff315 	stw	zero,-52(fp)
 200fad4:	e0bff217 	ldw	r2,-56(fp)
 200fad8:	15bfffcc 	andi	r22,r2,65535
 200fadc:	e0fff317 	ldw	r3,-52(fp)
 200fae0:	182e703a 	and	r23,r3,zero
 200fae4:	00000606 	br	200fb00 <___vfiprintf_internal_r+0x79c>
 200fae8:	e0bfe917 	ldw	r2,-92(fp)
 200faec:	10c00104 	addi	r3,r2,4
 200faf0:	e0ffe915 	stw	r3,-92(fp)
 200faf4:	10800017 	ldw	r2,0(r2)
 200faf8:	102d883a 	mov	r22,r2
 200fafc:	002f883a 	mov	r23,zero
 200fb00:	e5bfbc15 	stw	r22,-272(fp)
 200fb04:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
 200fb08:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 200fb0c:	0000a606 	br	200fda8 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 200fb10:	e0bfe917 	ldw	r2,-92(fp)
 200fb14:	10c00104 	addi	r3,r2,4
 200fb18:	e0ffe915 	stw	r3,-92(fp)
 200fb1c:	10800017 	ldw	r2,0(r2)
 200fb20:	e0bfbc15 	stw	r2,-272(fp)
 200fb24:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
 200fb28:	00800084 	movi	r2,2
 200fb2c:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
 200fb30:	008080b4 	movhi	r2,514
 200fb34:	10baf304 	addi	r2,r2,-5172
 200fb38:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
 200fb3c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
 200fb40:	00800c04 	movi	r2,48
 200fb44:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
 200fb48:	04401e04 	movi	r17,120
 200fb4c:	00801e04 	movi	r2,120
 200fb50:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
 200fb54:	00009406 	br	200fda8 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 200fb58:	e0bfe917 	ldw	r2,-92(fp)
 200fb5c:	10c00104 	addi	r3,r2,4
 200fb60:	e0ffe915 	stw	r3,-92(fp)
 200fb64:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 200fb68:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 200fb6c:	a000081e 	bne	r20,zero,200fb90 <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
 200fb70:	050080b4 	movhi	r20,514
 200fb74:	a53af804 	addi	r20,r20,-5152
				size = ((unsigned) prec > 6U) ? 6 : prec;
 200fb78:	e0bfbb17 	ldw	r2,-276(fp)
 200fb7c:	10c001f0 	cmpltui	r3,r2,7
 200fb80:	1800011e 	bne	r3,zero,200fb88 <___vfiprintf_internal_r+0x824>
 200fb84:	00800184 	movi	r2,6
 200fb88:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200fb8c:	00011706 	br	200ffec <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
 200fb90:	e0bfbb17 	ldw	r2,-276(fp)
 200fb94:	10001016 	blt	r2,zero,200fbd8 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
 200fb98:	e0bfbb17 	ldw	r2,-276(fp)
 200fb9c:	100d883a 	mov	r6,r2
 200fba0:	000b883a 	mov	r5,zero
 200fba4:	a009883a 	mov	r4,r20
 200fba8:	200c2a80 	call	200c2a8 <memchr>
 200fbac:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
 200fbb0:	e0bfc617 	ldw	r2,-232(fp)
 200fbb4:	10000526 	beq	r2,zero,200fbcc <___vfiprintf_internal_r+0x868>
					size = p - cp;
 200fbb8:	e0bfc617 	ldw	r2,-232(fp)
 200fbbc:	a007883a 	mov	r3,r20
 200fbc0:	10c5c83a 	sub	r2,r2,r3
 200fbc4:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 200fbc8:	00010806 	br	200ffec <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
 200fbcc:	e0bfbb17 	ldw	r2,-276(fp)
 200fbd0:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
 200fbd4:	00010506 	br	200ffec <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
 200fbd8:	a009883a 	mov	r4,r20
 200fbdc:	200502c0 	call	200502c <strlen>
 200fbe0:	e0bfc115 	stw	r2,-252(fp)

			break;
 200fbe4:	00010106 	br	200ffec <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
 200fbe8:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 200fbec:	9880080c 	andi	r2,r19,32
 200fbf0:	10000826 	beq	r2,zero,200fc14 <___vfiprintf_internal_r+0x8b0>
 200fbf4:	e0bfe917 	ldw	r2,-92(fp)
 200fbf8:	10c00204 	addi	r3,r2,8
 200fbfc:	e0ffe915 	stw	r3,-92(fp)
 200fc00:	10c00017 	ldw	r3,0(r2)
 200fc04:	e0ffec15 	stw	r3,-80(fp)
 200fc08:	10c00117 	ldw	r3,4(r2)
 200fc0c:	e0ffed15 	stw	r3,-76(fp)
 200fc10:	00001e06 	br	200fc8c <___vfiprintf_internal_r+0x928>
 200fc14:	9880040c 	andi	r2,r19,16
 200fc18:	10000726 	beq	r2,zero,200fc38 <___vfiprintf_internal_r+0x8d4>
 200fc1c:	e0bfe917 	ldw	r2,-92(fp)
 200fc20:	10c00104 	addi	r3,r2,4
 200fc24:	e0ffe915 	stw	r3,-92(fp)
 200fc28:	10800017 	ldw	r2,0(r2)
 200fc2c:	e0bfec15 	stw	r2,-80(fp)
 200fc30:	e03fed15 	stw	zero,-76(fp)
 200fc34:	00001506 	br	200fc8c <___vfiprintf_internal_r+0x928>
 200fc38:	9880100c 	andi	r2,r19,64
 200fc3c:	10000d26 	beq	r2,zero,200fc74 <___vfiprintf_internal_r+0x910>
 200fc40:	e0bfe917 	ldw	r2,-92(fp)
 200fc44:	10c00104 	addi	r3,r2,4
 200fc48:	e0ffe915 	stw	r3,-92(fp)
 200fc4c:	10800017 	ldw	r2,0(r2)
 200fc50:	e0bff415 	stw	r2,-48(fp)
 200fc54:	e03ff515 	stw	zero,-44(fp)
 200fc58:	e0bff417 	ldw	r2,-48(fp)
 200fc5c:	10bfffcc 	andi	r2,r2,65535
 200fc60:	e0bfec15 	stw	r2,-80(fp)
 200fc64:	e0fff517 	ldw	r3,-44(fp)
 200fc68:	1806703a 	and	r3,r3,zero
 200fc6c:	e0ffed15 	stw	r3,-76(fp)
 200fc70:	00000606 	br	200fc8c <___vfiprintf_internal_r+0x928>
 200fc74:	e0bfe917 	ldw	r2,-92(fp)
 200fc78:	10c00104 	addi	r3,r2,4
 200fc7c:	e0ffe915 	stw	r3,-92(fp)
 200fc80:	10800017 	ldw	r2,0(r2)
 200fc84:	e0bfec15 	stw	r2,-80(fp)
 200fc88:	e03fed15 	stw	zero,-76(fp)
 200fc8c:	e0bfec17 	ldw	r2,-80(fp)
 200fc90:	e0bfbc15 	stw	r2,-272(fp)
 200fc94:	e0ffed17 	ldw	r3,-76(fp)
 200fc98:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
 200fc9c:	00800044 	movi	r2,1
 200fca0:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
 200fca4:	00004006 	br	200fda8 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
 200fca8:	008080b4 	movhi	r2,514
 200fcac:	10bafa04 	addi	r2,r2,-5144
 200fcb0:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
 200fcb4:	00000306 	br	200fcc4 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
 200fcb8:	008080b4 	movhi	r2,514
 200fcbc:	10baf304 	addi	r2,r2,-5172
 200fcc0:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
 200fcc4:	9880080c 	andi	r2,r19,32
 200fcc8:	10000826 	beq	r2,zero,200fcec <___vfiprintf_internal_r+0x988>
 200fccc:	e0bfe917 	ldw	r2,-92(fp)
 200fcd0:	10c00204 	addi	r3,r2,8
 200fcd4:	e0ffe915 	stw	r3,-92(fp)
 200fcd8:	10c00017 	ldw	r3,0(r2)
 200fcdc:	e0ffee15 	stw	r3,-72(fp)
 200fce0:	10c00117 	ldw	r3,4(r2)
 200fce4:	e0ffef15 	stw	r3,-68(fp)
 200fce8:	00001e06 	br	200fd64 <___vfiprintf_internal_r+0xa00>
 200fcec:	9880040c 	andi	r2,r19,16
 200fcf0:	10000726 	beq	r2,zero,200fd10 <___vfiprintf_internal_r+0x9ac>
 200fcf4:	e0bfe917 	ldw	r2,-92(fp)
 200fcf8:	10c00104 	addi	r3,r2,4
 200fcfc:	e0ffe915 	stw	r3,-92(fp)
 200fd00:	10800017 	ldw	r2,0(r2)
 200fd04:	e0bfee15 	stw	r2,-72(fp)
 200fd08:	e03fef15 	stw	zero,-68(fp)
 200fd0c:	00001506 	br	200fd64 <___vfiprintf_internal_r+0xa00>
 200fd10:	9880100c 	andi	r2,r19,64
 200fd14:	10000d26 	beq	r2,zero,200fd4c <___vfiprintf_internal_r+0x9e8>
 200fd18:	e0bfe917 	ldw	r2,-92(fp)
 200fd1c:	10c00104 	addi	r3,r2,4
 200fd20:	e0ffe915 	stw	r3,-92(fp)
 200fd24:	10800017 	ldw	r2,0(r2)
 200fd28:	e0bff615 	stw	r2,-40(fp)
 200fd2c:	e03ff715 	stw	zero,-36(fp)
 200fd30:	e0bff617 	ldw	r2,-40(fp)
 200fd34:	10bfffcc 	andi	r2,r2,65535
 200fd38:	e0bfee15 	stw	r2,-72(fp)
 200fd3c:	e0fff717 	ldw	r3,-36(fp)
 200fd40:	1806703a 	and	r3,r3,zero
 200fd44:	e0ffef15 	stw	r3,-68(fp)
 200fd48:	00000606 	br	200fd64 <___vfiprintf_internal_r+0xa00>
 200fd4c:	e0bfe917 	ldw	r2,-92(fp)
 200fd50:	10c00104 	addi	r3,r2,4
 200fd54:	e0ffe915 	stw	r3,-92(fp)
 200fd58:	10800017 	ldw	r2,0(r2)
 200fd5c:	e0bfee15 	stw	r2,-72(fp)
 200fd60:	e03fef15 	stw	zero,-68(fp)
 200fd64:	e0bfee17 	ldw	r2,-72(fp)
 200fd68:	e0bfbc15 	stw	r2,-272(fp)
 200fd6c:	e0ffef17 	ldw	r3,-68(fp)
 200fd70:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
 200fd74:	00800084 	movi	r2,2
 200fd78:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 200fd7c:	9880004c 	andi	r2,r19,1
 200fd80:	10000926 	beq	r2,zero,200fda8 <___vfiprintf_internal_r+0xa44>
 200fd84:	e0bfbc17 	ldw	r2,-272(fp)
 200fd88:	e0ffbd17 	ldw	r3,-268(fp)
 200fd8c:	10c4b03a 	or	r2,r2,r3
 200fd90:	10000526 	beq	r2,zero,200fda8 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
 200fd94:	00800c04 	movi	r2,48
 200fd98:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
 200fd9c:	8805883a 	mov	r2,r17
 200fda0:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
 200fda4:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 200fda8:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 200fdac:	e0bfbb17 	ldw	r2,-276(fp)
 200fdb0:	e0bfbf15 	stw	r2,-260(fp)
 200fdb4:	e0bfbf17 	ldw	r2,-260(fp)
 200fdb8:	10000216 	blt	r2,zero,200fdc4 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
 200fdbc:	00bfdfc4 	movi	r2,-129
 200fdc0:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 200fdc4:	e53fdb04 	addi	r20,fp,-148
 200fdc8:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
 200fdcc:	e0bfbc17 	ldw	r2,-272(fp)
 200fdd0:	e0ffbd17 	ldw	r3,-268(fp)
 200fdd4:	10c4b03a 	or	r2,r2,r3
 200fdd8:	1000021e 	bne	r2,zero,200fde4 <___vfiprintf_internal_r+0xa80>
 200fddc:	e0bfbb17 	ldw	r2,-276(fp)
 200fde0:	10006c26 	beq	r2,zero,200ff94 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
 200fde4:	e0bfbe03 	ldbu	r2,-264(fp)
 200fde8:	10c00060 	cmpeqi	r3,r2,1
 200fdec:	1800211e 	bne	r3,zero,200fe74 <___vfiprintf_internal_r+0xb10>
 200fdf0:	10c000a0 	cmpeqi	r3,r2,2
 200fdf4:	1800491e 	bne	r3,zero,200ff1c <___vfiprintf_internal_r+0xbb8>
 200fdf8:	10005d1e 	bne	r2,zero,200ff70 <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
 200fdfc:	a53fffc4 	addi	r20,r20,-1
 200fe00:	e0bfbc17 	ldw	r2,-272(fp)
 200fe04:	108001cc 	andi	r2,r2,7
 200fe08:	10800c04 	addi	r2,r2,48
 200fe0c:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
 200fe10:	e0bfbd17 	ldw	r2,-268(fp)
 200fe14:	1004977a 	slli	r2,r2,29
 200fe18:	e0ffbc17 	ldw	r3,-272(fp)
 200fe1c:	1806d0fa 	srli	r3,r3,3
 200fe20:	1884b03a 	or	r2,r3,r2
 200fe24:	e0bfbc15 	stw	r2,-272(fp)
 200fe28:	e0bfbd17 	ldw	r2,-268(fp)
 200fe2c:	1004d0fa 	srli	r2,r2,3
 200fe30:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200fe34:	e0bfbc17 	ldw	r2,-272(fp)
 200fe38:	e0ffbd17 	ldw	r3,-268(fp)
 200fe3c:	10c4b03a 	or	r2,r2,r3
 200fe40:	103fee1e 	bne	r2,zero,200fdfc <___vfiprintf_internal_r+0xa98>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 200fe44:	9880004c 	andi	r2,r19,1
 200fe48:	10005026 	beq	r2,zero,200ff8c <___vfiprintf_internal_r+0xc28>
 200fe4c:	a0800003 	ldbu	r2,0(r20)
 200fe50:	10803fcc 	andi	r2,r2,255
 200fe54:	1080201c 	xori	r2,r2,128
 200fe58:	10bfe004 	addi	r2,r2,-128
 200fe5c:	10800c20 	cmpeqi	r2,r2,48
 200fe60:	10004a1e 	bne	r2,zero,200ff8c <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
 200fe64:	a53fffc4 	addi	r20,r20,-1
 200fe68:	00800c04 	movi	r2,48
 200fe6c:	a0800005 	stb	r2,0(r20)
					break;
 200fe70:	00004606 	br	200ff8c <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 200fe74:	e0bfbd17 	ldw	r2,-268(fp)
 200fe78:	10000a1e 	bne	r2,zero,200fea4 <___vfiprintf_internal_r+0xb40>
 200fe7c:	e0bfbd17 	ldw	r2,-268(fp)
 200fe80:	1000031e 	bne	r2,zero,200fe90 <___vfiprintf_internal_r+0xb2c>
 200fe84:	e0bfbc17 	ldw	r2,-272(fp)
 200fe88:	108002a8 	cmpgeui	r2,r2,10
 200fe8c:	1000051e 	bne	r2,zero,200fea4 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
 200fe90:	a53fffc4 	addi	r20,r20,-1
 200fe94:	e0bfbc17 	ldw	r2,-272(fp)
 200fe98:	10800c04 	addi	r2,r2,48
 200fe9c:	a0800005 	stb	r2,0(r20)
						break;
 200fea0:	00003b06 	br	200ff90 <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 200fea4:	a53fffc4 	addi	r20,r20,-1
 200fea8:	e0bfbc17 	ldw	r2,-272(fp)
 200feac:	e0ffbd17 	ldw	r3,-268(fp)
 200feb0:	01800284 	movi	r6,10
 200feb4:	000f883a 	mov	r7,zero
 200feb8:	1009883a 	mov	r4,r2
 200febc:	180b883a 	mov	r5,r3
 200fec0:	20117f40 	call	20117f4 <__umoddi3>
 200fec4:	1009883a 	mov	r4,r2
 200fec8:	180b883a 	mov	r5,r3
 200fecc:	2005883a 	mov	r2,r4
 200fed0:	2807883a 	mov	r3,r5
 200fed4:	10800c04 	addi	r2,r2,48
 200fed8:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 200fedc:	e0bfbc17 	ldw	r2,-272(fp)
 200fee0:	e0ffbd17 	ldw	r3,-268(fp)
 200fee4:	01800284 	movi	r6,10
 200fee8:	000f883a 	mov	r7,zero
 200feec:	1009883a 	mov	r4,r2
 200fef0:	180b883a 	mov	r5,r3
 200fef4:	201127c0 	call	201127c <__udivdi3>
 200fef8:	1009883a 	mov	r4,r2
 200fefc:	180b883a 	mov	r5,r3
 200ff00:	e13fbc15 	stw	r4,-272(fp)
 200ff04:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
 200ff08:	e0bfbc17 	ldw	r2,-272(fp)
 200ff0c:	e0ffbd17 	ldw	r3,-268(fp)
 200ff10:	10c4b03a 	or	r2,r2,r3
 200ff14:	103fe31e 	bne	r2,zero,200fea4 <___vfiprintf_internal_r+0xb40>
					break;
 200ff18:	00001d06 	br	200ff90 <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
 200ff1c:	a53fffc4 	addi	r20,r20,-1
 200ff20:	e0bfbc17 	ldw	r2,-272(fp)
 200ff24:	108003cc 	andi	r2,r2,15
 200ff28:	e0ffc217 	ldw	r3,-248(fp)
 200ff2c:	1885883a 	add	r2,r3,r2
 200ff30:	10800003 	ldbu	r2,0(r2)
 200ff34:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
 200ff38:	e0bfbd17 	ldw	r2,-268(fp)
 200ff3c:	1004973a 	slli	r2,r2,28
 200ff40:	e0ffbc17 	ldw	r3,-272(fp)
 200ff44:	1806d13a 	srli	r3,r3,4
 200ff48:	1884b03a 	or	r2,r3,r2
 200ff4c:	e0bfbc15 	stw	r2,-272(fp)
 200ff50:	e0bfbd17 	ldw	r2,-268(fp)
 200ff54:	1004d13a 	srli	r2,r2,4
 200ff58:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
 200ff5c:	e0bfbc17 	ldw	r2,-272(fp)
 200ff60:	e0ffbd17 	ldw	r3,-268(fp)
 200ff64:	10c4b03a 	or	r2,r2,r3
 200ff68:	103fec1e 	bne	r2,zero,200ff1c <___vfiprintf_internal_r+0xbb8>
					break;
 200ff6c:	00000806 	br	200ff90 <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
 200ff70:	050080b4 	movhi	r20,514
 200ff74:	a53aff04 	addi	r20,r20,-5124
					size = strlen (cp);
 200ff78:	a009883a 	mov	r4,r20
 200ff7c:	200502c0 	call	200502c <strlen>
 200ff80:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
 200ff84:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 200ff88:	00001806 	br	200ffec <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
 200ff8c:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
 200ff90:	00000706 	br	200ffb0 <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
 200ff94:	e0bfbe03 	ldbu	r2,-264(fp)
 200ff98:	1000051e 	bne	r2,zero,200ffb0 <___vfiprintf_internal_r+0xc4c>
 200ff9c:	9880004c 	andi	r2,r19,1
 200ffa0:	10000326 	beq	r2,zero,200ffb0 <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
 200ffa4:	a53fffc4 	addi	r20,r20,-1
 200ffa8:	00800c04 	movi	r2,48
 200ffac:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
 200ffb0:	e0bfdb04 	addi	r2,fp,-148
 200ffb4:	10800a04 	addi	r2,r2,40
 200ffb8:	1007883a 	mov	r3,r2
 200ffbc:	a005883a 	mov	r2,r20
 200ffc0:	1885c83a 	sub	r2,r3,r2
 200ffc4:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
 200ffc8:	00000806 	br	200ffec <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 200ffcc:	88015426 	beq	r17,zero,2010520 <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 200ffd0:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
 200ffd4:	8805883a 	mov	r2,r17
 200ffd8:	a0800005 	stb	r2,0(r20)
			size = 1;
 200ffdc:	00800044 	movi	r2,1
 200ffe0:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
 200ffe4:	e03fc705 	stb	zero,-228(fp)
			break;
 200ffe8:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 200ffec:	e0ffbf17 	ldw	r3,-260(fp)
 200fff0:	e0bfc117 	ldw	r2,-252(fp)
 200fff4:	10c0010e 	bge	r2,r3,200fffc <___vfiprintf_internal_r+0xc98>
 200fff8:	1805883a 	mov	r2,r3
 200fffc:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
 2010000:	e0bfc703 	ldbu	r2,-228(fp)
 2010004:	10803fcc 	andi	r2,r2,255
 2010008:	1080201c 	xori	r2,r2,128
 201000c:	10bfe004 	addi	r2,r2,-128
 2010010:	10000326 	beq	r2,zero,2010020 <___vfiprintf_internal_r+0xcbc>
			realsz++;
 2010014:	e0bfc017 	ldw	r2,-256(fp)
 2010018:	10800044 	addi	r2,r2,1
 201001c:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
 2010020:	9880008c 	andi	r2,r19,2
 2010024:	10000326 	beq	r2,zero,2010034 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
 2010028:	e0bfc017 	ldw	r2,-256(fp)
 201002c:	10800084 	addi	r2,r2,2
 2010030:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 2010034:	9880210c 	andi	r2,r19,132
 2010038:	1000351e 	bne	r2,zero,2010110 <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
 201003c:	e0ffba17 	ldw	r3,-280(fp)
 2010040:	e0bfc017 	ldw	r2,-256(fp)
 2010044:	18a1c83a 	sub	r16,r3,r2
 2010048:	0400310e 	bge	zero,r16,2010110 <___vfiprintf_internal_r+0xdac>
 201004c:	00001706 	br	20100ac <___vfiprintf_internal_r+0xd48>
 2010050:	008080b4 	movhi	r2,514
 2010054:	10bb0584 	addi	r2,r2,-5098
 2010058:	90800015 	stw	r2,0(r18)
 201005c:	00800404 	movi	r2,16
 2010060:	90800115 	stw	r2,4(r18)
 2010064:	e0bfca17 	ldw	r2,-216(fp)
 2010068:	10800404 	addi	r2,r2,16
 201006c:	e0bfca15 	stw	r2,-216(fp)
 2010070:	94800204 	addi	r18,r18,8
 2010074:	e0bfc917 	ldw	r2,-220(fp)
 2010078:	10800044 	addi	r2,r2,1
 201007c:	e0bfc915 	stw	r2,-220(fp)
 2010080:	e0bfc917 	ldw	r2,-220(fp)
 2010084:	10800210 	cmplti	r2,r2,8
 2010088:	1000071e 	bne	r2,zero,20100a8 <___vfiprintf_internal_r+0xd44>
 201008c:	e0bfc804 	addi	r2,fp,-224
 2010090:	100d883a 	mov	r6,r2
 2010094:	e17fe717 	ldw	r5,-100(fp)
 2010098:	e13fe617 	ldw	r4,-104(fp)
 201009c:	200f0e80 	call	200f0e8 <__sprint_r>
 20100a0:	10012d1e 	bne	r2,zero,2010558 <___vfiprintf_internal_r+0x11f4>
 20100a4:	e4bfcb04 	addi	r18,fp,-212
 20100a8:	843ffc04 	addi	r16,r16,-16
 20100ac:	80800448 	cmpgei	r2,r16,17
 20100b0:	103fe71e 	bne	r2,zero,2010050 <___vfiprintf_internal_r+0xcec>
 20100b4:	008080b4 	movhi	r2,514
 20100b8:	10bb0584 	addi	r2,r2,-5098
 20100bc:	90800015 	stw	r2,0(r18)
 20100c0:	8005883a 	mov	r2,r16
 20100c4:	90800115 	stw	r2,4(r18)
 20100c8:	e0bfca17 	ldw	r2,-216(fp)
 20100cc:	8007883a 	mov	r3,r16
 20100d0:	10c5883a 	add	r2,r2,r3
 20100d4:	e0bfca15 	stw	r2,-216(fp)
 20100d8:	94800204 	addi	r18,r18,8
 20100dc:	e0bfc917 	ldw	r2,-220(fp)
 20100e0:	10800044 	addi	r2,r2,1
 20100e4:	e0bfc915 	stw	r2,-220(fp)
 20100e8:	e0bfc917 	ldw	r2,-220(fp)
 20100ec:	10800210 	cmplti	r2,r2,8
 20100f0:	1000071e 	bne	r2,zero,2010110 <___vfiprintf_internal_r+0xdac>
 20100f4:	e0bfc804 	addi	r2,fp,-224
 20100f8:	100d883a 	mov	r6,r2
 20100fc:	e17fe717 	ldw	r5,-100(fp)
 2010100:	e13fe617 	ldw	r4,-104(fp)
 2010104:	200f0e80 	call	200f0e8 <__sprint_r>
 2010108:	1001151e 	bne	r2,zero,2010560 <___vfiprintf_internal_r+0x11fc>
 201010c:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
 2010110:	e0bfc703 	ldbu	r2,-228(fp)
 2010114:	10803fcc 	andi	r2,r2,255
 2010118:	1080201c 	xori	r2,r2,128
 201011c:	10bfe004 	addi	r2,r2,-128
 2010120:	10001526 	beq	r2,zero,2010178 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
 2010124:	e0bfc704 	addi	r2,fp,-228
 2010128:	90800015 	stw	r2,0(r18)
 201012c:	00800044 	movi	r2,1
 2010130:	90800115 	stw	r2,4(r18)
 2010134:	e0bfca17 	ldw	r2,-216(fp)
 2010138:	10800044 	addi	r2,r2,1
 201013c:	e0bfca15 	stw	r2,-216(fp)
 2010140:	94800204 	addi	r18,r18,8
 2010144:	e0bfc917 	ldw	r2,-220(fp)
 2010148:	10800044 	addi	r2,r2,1
 201014c:	e0bfc915 	stw	r2,-220(fp)
 2010150:	e0bfc917 	ldw	r2,-220(fp)
 2010154:	10800210 	cmplti	r2,r2,8
 2010158:	1000071e 	bne	r2,zero,2010178 <___vfiprintf_internal_r+0xe14>
 201015c:	e0bfc804 	addi	r2,fp,-224
 2010160:	100d883a 	mov	r6,r2
 2010164:	e17fe717 	ldw	r5,-100(fp)
 2010168:	e13fe617 	ldw	r4,-104(fp)
 201016c:	200f0e80 	call	200f0e8 <__sprint_r>
 2010170:	1000fd1e 	bne	r2,zero,2010568 <___vfiprintf_internal_r+0x1204>
 2010174:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
 2010178:	9880008c 	andi	r2,r19,2
 201017c:	10001526 	beq	r2,zero,20101d4 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
 2010180:	e0bfe504 	addi	r2,fp,-108
 2010184:	90800015 	stw	r2,0(r18)
 2010188:	00800084 	movi	r2,2
 201018c:	90800115 	stw	r2,4(r18)
 2010190:	e0bfca17 	ldw	r2,-216(fp)
 2010194:	10800084 	addi	r2,r2,2
 2010198:	e0bfca15 	stw	r2,-216(fp)
 201019c:	94800204 	addi	r18,r18,8
 20101a0:	e0bfc917 	ldw	r2,-220(fp)
 20101a4:	10800044 	addi	r2,r2,1
 20101a8:	e0bfc915 	stw	r2,-220(fp)
 20101ac:	e0bfc917 	ldw	r2,-220(fp)
 20101b0:	10800210 	cmplti	r2,r2,8
 20101b4:	1000071e 	bne	r2,zero,20101d4 <___vfiprintf_internal_r+0xe70>
 20101b8:	e0bfc804 	addi	r2,fp,-224
 20101bc:	100d883a 	mov	r6,r2
 20101c0:	e17fe717 	ldw	r5,-100(fp)
 20101c4:	e13fe617 	ldw	r4,-104(fp)
 20101c8:	200f0e80 	call	200f0e8 <__sprint_r>
 20101cc:	1000e81e 	bne	r2,zero,2010570 <___vfiprintf_internal_r+0x120c>
 20101d0:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 20101d4:	9880210c 	andi	r2,r19,132
 20101d8:	10802018 	cmpnei	r2,r2,128
 20101dc:	1000351e 	bne	r2,zero,20102b4 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
 20101e0:	e0ffba17 	ldw	r3,-280(fp)
 20101e4:	e0bfc017 	ldw	r2,-256(fp)
 20101e8:	18a1c83a 	sub	r16,r3,r2
 20101ec:	0400310e 	bge	zero,r16,20102b4 <___vfiprintf_internal_r+0xf50>
 20101f0:	00001706 	br	2010250 <___vfiprintf_internal_r+0xeec>
 20101f4:	008080b4 	movhi	r2,514
 20101f8:	10bb0984 	addi	r2,r2,-5082
 20101fc:	90800015 	stw	r2,0(r18)
 2010200:	00800404 	movi	r2,16
 2010204:	90800115 	stw	r2,4(r18)
 2010208:	e0bfca17 	ldw	r2,-216(fp)
 201020c:	10800404 	addi	r2,r2,16
 2010210:	e0bfca15 	stw	r2,-216(fp)
 2010214:	94800204 	addi	r18,r18,8
 2010218:	e0bfc917 	ldw	r2,-220(fp)
 201021c:	10800044 	addi	r2,r2,1
 2010220:	e0bfc915 	stw	r2,-220(fp)
 2010224:	e0bfc917 	ldw	r2,-220(fp)
 2010228:	10800210 	cmplti	r2,r2,8
 201022c:	1000071e 	bne	r2,zero,201024c <___vfiprintf_internal_r+0xee8>
 2010230:	e0bfc804 	addi	r2,fp,-224
 2010234:	100d883a 	mov	r6,r2
 2010238:	e17fe717 	ldw	r5,-100(fp)
 201023c:	e13fe617 	ldw	r4,-104(fp)
 2010240:	200f0e80 	call	200f0e8 <__sprint_r>
 2010244:	1000cc1e 	bne	r2,zero,2010578 <___vfiprintf_internal_r+0x1214>
 2010248:	e4bfcb04 	addi	r18,fp,-212
 201024c:	843ffc04 	addi	r16,r16,-16
 2010250:	80800448 	cmpgei	r2,r16,17
 2010254:	103fe71e 	bne	r2,zero,20101f4 <___vfiprintf_internal_r+0xe90>
 2010258:	008080b4 	movhi	r2,514
 201025c:	10bb0984 	addi	r2,r2,-5082
 2010260:	90800015 	stw	r2,0(r18)
 2010264:	8005883a 	mov	r2,r16
 2010268:	90800115 	stw	r2,4(r18)
 201026c:	e0bfca17 	ldw	r2,-216(fp)
 2010270:	8007883a 	mov	r3,r16
 2010274:	10c5883a 	add	r2,r2,r3
 2010278:	e0bfca15 	stw	r2,-216(fp)
 201027c:	94800204 	addi	r18,r18,8
 2010280:	e0bfc917 	ldw	r2,-220(fp)
 2010284:	10800044 	addi	r2,r2,1
 2010288:	e0bfc915 	stw	r2,-220(fp)
 201028c:	e0bfc917 	ldw	r2,-220(fp)
 2010290:	10800210 	cmplti	r2,r2,8
 2010294:	1000071e 	bne	r2,zero,20102b4 <___vfiprintf_internal_r+0xf50>
 2010298:	e0bfc804 	addi	r2,fp,-224
 201029c:	100d883a 	mov	r6,r2
 20102a0:	e17fe717 	ldw	r5,-100(fp)
 20102a4:	e13fe617 	ldw	r4,-104(fp)
 20102a8:	200f0e80 	call	200f0e8 <__sprint_r>
 20102ac:	1000b41e 	bne	r2,zero,2010580 <___vfiprintf_internal_r+0x121c>
 20102b0:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 20102b4:	e0ffbf17 	ldw	r3,-260(fp)
 20102b8:	e0bfc117 	ldw	r2,-252(fp)
 20102bc:	18a1c83a 	sub	r16,r3,r2
 20102c0:	0400310e 	bge	zero,r16,2010388 <___vfiprintf_internal_r+0x1024>
 20102c4:	00001706 	br	2010324 <___vfiprintf_internal_r+0xfc0>
 20102c8:	008080b4 	movhi	r2,514
 20102cc:	10bb0984 	addi	r2,r2,-5082
 20102d0:	90800015 	stw	r2,0(r18)
 20102d4:	00800404 	movi	r2,16
 20102d8:	90800115 	stw	r2,4(r18)
 20102dc:	e0bfca17 	ldw	r2,-216(fp)
 20102e0:	10800404 	addi	r2,r2,16
 20102e4:	e0bfca15 	stw	r2,-216(fp)
 20102e8:	94800204 	addi	r18,r18,8
 20102ec:	e0bfc917 	ldw	r2,-220(fp)
 20102f0:	10800044 	addi	r2,r2,1
 20102f4:	e0bfc915 	stw	r2,-220(fp)
 20102f8:	e0bfc917 	ldw	r2,-220(fp)
 20102fc:	10800210 	cmplti	r2,r2,8
 2010300:	1000071e 	bne	r2,zero,2010320 <___vfiprintf_internal_r+0xfbc>
 2010304:	e0bfc804 	addi	r2,fp,-224
 2010308:	100d883a 	mov	r6,r2
 201030c:	e17fe717 	ldw	r5,-100(fp)
 2010310:	e13fe617 	ldw	r4,-104(fp)
 2010314:	200f0e80 	call	200f0e8 <__sprint_r>
 2010318:	10009b1e 	bne	r2,zero,2010588 <___vfiprintf_internal_r+0x1224>
 201031c:	e4bfcb04 	addi	r18,fp,-212
 2010320:	843ffc04 	addi	r16,r16,-16
 2010324:	80800448 	cmpgei	r2,r16,17
 2010328:	103fe71e 	bne	r2,zero,20102c8 <___vfiprintf_internal_r+0xf64>
 201032c:	008080b4 	movhi	r2,514
 2010330:	10bb0984 	addi	r2,r2,-5082
 2010334:	90800015 	stw	r2,0(r18)
 2010338:	8005883a 	mov	r2,r16
 201033c:	90800115 	stw	r2,4(r18)
 2010340:	e0bfca17 	ldw	r2,-216(fp)
 2010344:	8007883a 	mov	r3,r16
 2010348:	10c5883a 	add	r2,r2,r3
 201034c:	e0bfca15 	stw	r2,-216(fp)
 2010350:	94800204 	addi	r18,r18,8
 2010354:	e0bfc917 	ldw	r2,-220(fp)
 2010358:	10800044 	addi	r2,r2,1
 201035c:	e0bfc915 	stw	r2,-220(fp)
 2010360:	e0bfc917 	ldw	r2,-220(fp)
 2010364:	10800210 	cmplti	r2,r2,8
 2010368:	1000071e 	bne	r2,zero,2010388 <___vfiprintf_internal_r+0x1024>
 201036c:	e0bfc804 	addi	r2,fp,-224
 2010370:	100d883a 	mov	r6,r2
 2010374:	e17fe717 	ldw	r5,-100(fp)
 2010378:	e13fe617 	ldw	r4,-104(fp)
 201037c:	200f0e80 	call	200f0e8 <__sprint_r>
 2010380:	1000831e 	bne	r2,zero,2010590 <___vfiprintf_internal_r+0x122c>
 2010384:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2010388:	95000015 	stw	r20,0(r18)
 201038c:	e0bfc117 	ldw	r2,-252(fp)
 2010390:	90800115 	stw	r2,4(r18)
 2010394:	e0ffca17 	ldw	r3,-216(fp)
 2010398:	e0bfc117 	ldw	r2,-252(fp)
 201039c:	1885883a 	add	r2,r3,r2
 20103a0:	e0bfca15 	stw	r2,-216(fp)
 20103a4:	94800204 	addi	r18,r18,8
 20103a8:	e0bfc917 	ldw	r2,-220(fp)
 20103ac:	10800044 	addi	r2,r2,1
 20103b0:	e0bfc915 	stw	r2,-220(fp)
 20103b4:	e0bfc917 	ldw	r2,-220(fp)
 20103b8:	10800210 	cmplti	r2,r2,8
 20103bc:	1000071e 	bne	r2,zero,20103dc <___vfiprintf_internal_r+0x1078>
 20103c0:	e0bfc804 	addi	r2,fp,-224
 20103c4:	100d883a 	mov	r6,r2
 20103c8:	e17fe717 	ldw	r5,-100(fp)
 20103cc:	e13fe617 	ldw	r4,-104(fp)
 20103d0:	200f0e80 	call	200f0e8 <__sprint_r>
 20103d4:	1000701e 	bne	r2,zero,2010598 <___vfiprintf_internal_r+0x1234>
 20103d8:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 20103dc:	9880010c 	andi	r2,r19,4
 20103e0:	10003526 	beq	r2,zero,20104b8 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
 20103e4:	e0ffba17 	ldw	r3,-280(fp)
 20103e8:	e0bfc017 	ldw	r2,-256(fp)
 20103ec:	18a1c83a 	sub	r16,r3,r2
 20103f0:	0400310e 	bge	zero,r16,20104b8 <___vfiprintf_internal_r+0x1154>
 20103f4:	00001706 	br	2010454 <___vfiprintf_internal_r+0x10f0>
 20103f8:	008080b4 	movhi	r2,514
 20103fc:	10bb0584 	addi	r2,r2,-5098
 2010400:	90800015 	stw	r2,0(r18)
 2010404:	00800404 	movi	r2,16
 2010408:	90800115 	stw	r2,4(r18)
 201040c:	e0bfca17 	ldw	r2,-216(fp)
 2010410:	10800404 	addi	r2,r2,16
 2010414:	e0bfca15 	stw	r2,-216(fp)
 2010418:	94800204 	addi	r18,r18,8
 201041c:	e0bfc917 	ldw	r2,-220(fp)
 2010420:	10800044 	addi	r2,r2,1
 2010424:	e0bfc915 	stw	r2,-220(fp)
 2010428:	e0bfc917 	ldw	r2,-220(fp)
 201042c:	10800210 	cmplti	r2,r2,8
 2010430:	1000071e 	bne	r2,zero,2010450 <___vfiprintf_internal_r+0x10ec>
 2010434:	e0bfc804 	addi	r2,fp,-224
 2010438:	100d883a 	mov	r6,r2
 201043c:	e17fe717 	ldw	r5,-100(fp)
 2010440:	e13fe617 	ldw	r4,-104(fp)
 2010444:	200f0e80 	call	200f0e8 <__sprint_r>
 2010448:	1000551e 	bne	r2,zero,20105a0 <___vfiprintf_internal_r+0x123c>
 201044c:	e4bfcb04 	addi	r18,fp,-212
 2010450:	843ffc04 	addi	r16,r16,-16
 2010454:	80800448 	cmpgei	r2,r16,17
 2010458:	103fe71e 	bne	r2,zero,20103f8 <___vfiprintf_internal_r+0x1094>
 201045c:	008080b4 	movhi	r2,514
 2010460:	10bb0584 	addi	r2,r2,-5098
 2010464:	90800015 	stw	r2,0(r18)
 2010468:	8005883a 	mov	r2,r16
 201046c:	90800115 	stw	r2,4(r18)
 2010470:	e0bfca17 	ldw	r2,-216(fp)
 2010474:	8007883a 	mov	r3,r16
 2010478:	10c5883a 	add	r2,r2,r3
 201047c:	e0bfca15 	stw	r2,-216(fp)
 2010480:	94800204 	addi	r18,r18,8
 2010484:	e0bfc917 	ldw	r2,-220(fp)
 2010488:	10800044 	addi	r2,r2,1
 201048c:	e0bfc915 	stw	r2,-220(fp)
 2010490:	e0bfc917 	ldw	r2,-220(fp)
 2010494:	10800210 	cmplti	r2,r2,8
 2010498:	1000071e 	bne	r2,zero,20104b8 <___vfiprintf_internal_r+0x1154>
 201049c:	e0bfc804 	addi	r2,fp,-224
 20104a0:	100d883a 	mov	r6,r2
 20104a4:	e17fe717 	ldw	r5,-100(fp)
 20104a8:	e13fe617 	ldw	r4,-104(fp)
 20104ac:	200f0e80 	call	200f0e8 <__sprint_r>
 20104b0:	10003d1e 	bne	r2,zero,20105a8 <___vfiprintf_internal_r+0x1244>
 20104b4:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 20104b8:	e0ffba17 	ldw	r3,-280(fp)
 20104bc:	e0bfc017 	ldw	r2,-256(fp)
 20104c0:	10c0010e 	bge	r2,r3,20104c8 <___vfiprintf_internal_r+0x1164>
 20104c4:	1805883a 	mov	r2,r3
 20104c8:	e0ffb917 	ldw	r3,-284(fp)
 20104cc:	1885883a 	add	r2,r3,r2
 20104d0:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
 20104d4:	e0bfca17 	ldw	r2,-216(fp)
 20104d8:	10000626 	beq	r2,zero,20104f4 <___vfiprintf_internal_r+0x1190>
 20104dc:	e0bfc804 	addi	r2,fp,-224
 20104e0:	100d883a 	mov	r6,r2
 20104e4:	e17fe717 	ldw	r5,-100(fp)
 20104e8:	e13fe617 	ldw	r4,-104(fp)
 20104ec:	200f0e80 	call	200f0e8 <__sprint_r>
 20104f0:	10002f1e 	bne	r2,zero,20105b0 <___vfiprintf_internal_r+0x124c>
 20104f4:	e03fc915 	stw	zero,-220(fp)
 20104f8:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
 20104fc:	e0bfc317 	ldw	r2,-244(fp)
 2010500:	103bea26 	beq	r2,zero,200f4ac <___vfiprintf_internal_r+0x148>
			_free_r (data, malloc_buf);
 2010504:	e17fc317 	ldw	r5,-244(fp)
 2010508:	e13fe617 	ldw	r4,-104(fp)
 201050c:	200a0ec0 	call	200a0ec <_free_r>
			malloc_buf = NULL;
 2010510:	e03fc315 	stw	zero,-244(fp)
		}
	}
 2010514:	003be506 	br	200f4ac <___vfiprintf_internal_r+0x148>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
 2010518:	0001883a 	nop
 201051c:	00000106 	br	2010524 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
 2010520:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 2010524:	e0bfca17 	ldw	r2,-216(fp)
 2010528:	10000626 	beq	r2,zero,2010544 <___vfiprintf_internal_r+0x11e0>
 201052c:	e0bfc804 	addi	r2,fp,-224
 2010530:	100d883a 	mov	r6,r2
 2010534:	e17fe717 	ldw	r5,-100(fp)
 2010538:	e13fe617 	ldw	r4,-104(fp)
 201053c:	200f0e80 	call	200f0e8 <__sprint_r>
 2010540:	10001d1e 	bne	r2,zero,20105b8 <___vfiprintf_internal_r+0x1254>
 2010544:	e03fc915 	stw	zero,-220(fp)
 2010548:	e4bfcb04 	addi	r18,fp,-212
 201054c:	00001b06 	br	20105bc <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
 2010550:	0001883a 	nop
 2010554:	00001906 	br	20105bc <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
 2010558:	0001883a 	nop
 201055c:	00001706 	br	20105bc <___vfiprintf_internal_r+0x1258>
 2010560:	0001883a 	nop
 2010564:	00001506 	br	20105bc <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
 2010568:	0001883a 	nop
 201056c:	00001306 	br	20105bc <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
 2010570:	0001883a 	nop
 2010574:	00001106 	br	20105bc <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
 2010578:	0001883a 	nop
 201057c:	00000f06 	br	20105bc <___vfiprintf_internal_r+0x1258>
 2010580:	0001883a 	nop
 2010584:	00000d06 	br	20105bc <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 2010588:	0001883a 	nop
 201058c:	00000b06 	br	20105bc <___vfiprintf_internal_r+0x1258>
 2010590:	0001883a 	nop
 2010594:	00000906 	br	20105bc <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
 2010598:	0001883a 	nop
 201059c:	00000706 	br	20105bc <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
 20105a0:	0001883a 	nop
 20105a4:	00000506 	br	20105bc <___vfiprintf_internal_r+0x1258>
 20105a8:	0001883a 	nop
 20105ac:	00000306 	br	20105bc <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
 20105b0:	0001883a 	nop
 20105b4:	00000106 	br	20105bc <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
 20105b8:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 20105bc:	e0bfc317 	ldw	r2,-244(fp)
 20105c0:	10000326 	beq	r2,zero,20105d0 <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
 20105c4:	e17fc317 	ldw	r5,-244(fp)
 20105c8:	e13fe617 	ldw	r4,-104(fp)
 20105cc:	200a0ec0 	call	200a0ec <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 20105d0:	e0bfe717 	ldw	r2,-100(fp)
 20105d4:	1080030b 	ldhu	r2,12(r2)
 20105d8:	10bfffcc 	andi	r2,r2,65535
 20105dc:	1080100c 	andi	r2,r2,64
 20105e0:	1000021e 	bne	r2,zero,20105ec <___vfiprintf_internal_r+0x1288>
 20105e4:	e0bfb917 	ldw	r2,-284(fp)
 20105e8:	00000206 	br	20105f4 <___vfiprintf_internal_r+0x1290>
 20105ec:	00bfffc4 	movi	r2,-1
 20105f0:	0001883a 	nop
	/* NOTREACHED */
}
 20105f4:	e6fff804 	addi	sp,fp,-32
 20105f8:	dfc00917 	ldw	ra,36(sp)
 20105fc:	df000817 	ldw	fp,32(sp)
 2010600:	ddc00717 	ldw	r23,28(sp)
 2010604:	dd800617 	ldw	r22,24(sp)
 2010608:	dd400517 	ldw	r21,20(sp)
 201060c:	dd000417 	ldw	r20,16(sp)
 2010610:	dcc00317 	ldw	r19,12(sp)
 2010614:	dc800217 	ldw	r18,8(sp)
 2010618:	dc400117 	ldw	r17,4(sp)
 201061c:	dc000017 	ldw	r16,0(sp)
 2010620:	dec00a04 	addi	sp,sp,40
 2010624:	f800283a 	ret

02010628 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
 2010628:	defff904 	addi	sp,sp,-28
 201062c:	dfc00615 	stw	ra,24(sp)
 2010630:	df000515 	stw	fp,20(sp)
 2010634:	df000504 	addi	fp,sp,20
 2010638:	e13ffc15 	stw	r4,-16(fp)
 201063c:	e17ffd15 	stw	r5,-12(fp)
 2010640:	e1bffe15 	stw	r6,-8(fp)
 2010644:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2010648:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 201064c:	e1bfff17 	ldw	r6,-4(fp)
 2010650:	e17ffe17 	ldw	r5,-8(fp)
 2010654:	e13ffd17 	ldw	r4,-12(fp)
 2010658:	20139a40 	call	20139a4 <write>
 201065c:	e0bffb15 	stw	r2,-20(fp)
 2010660:	e0bffb17 	ldw	r2,-20(fp)
 2010664:	10bfffd8 	cmpnei	r2,r2,-1
 2010668:	1000051e 	bne	r2,zero,2010680 <_write_r+0x58>
 201066c:	d0a72e17 	ldw	r2,-25416(gp)
 2010670:	10000326 	beq	r2,zero,2010680 <_write_r+0x58>
    ptr->_errno = errno;
 2010674:	d0e72e17 	ldw	r3,-25416(gp)
 2010678:	e0bffc17 	ldw	r2,-16(fp)
 201067c:	10c00015 	stw	r3,0(r2)
  return ret;
 2010680:	e0bffb17 	ldw	r2,-20(fp)
}
 2010684:	e037883a 	mov	sp,fp
 2010688:	dfc00117 	ldw	ra,4(sp)
 201068c:	df000017 	ldw	fp,0(sp)
 2010690:	dec00204 	addi	sp,sp,8
 2010694:	f800283a 	ret

02010698 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2010698:	defffb04 	addi	sp,sp,-20
 201069c:	dfc00415 	stw	ra,16(sp)
 20106a0:	df000315 	stw	fp,12(sp)
 20106a4:	df000304 	addi	fp,sp,12
 20106a8:	e13ffe15 	stw	r4,-8(fp)
 20106ac:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 20106b0:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 20106b4:	e13fff17 	ldw	r4,-4(fp)
 20106b8:	201319c0 	call	201319c <close>
 20106bc:	e0bffd15 	stw	r2,-12(fp)
 20106c0:	e0bffd17 	ldw	r2,-12(fp)
 20106c4:	10bfffd8 	cmpnei	r2,r2,-1
 20106c8:	1000051e 	bne	r2,zero,20106e0 <_close_r+0x48>
 20106cc:	d0a72e17 	ldw	r2,-25416(gp)
 20106d0:	10000326 	beq	r2,zero,20106e0 <_close_r+0x48>
    ptr->_errno = errno;
 20106d4:	d0e72e17 	ldw	r3,-25416(gp)
 20106d8:	e0bffe17 	ldw	r2,-8(fp)
 20106dc:	10c00015 	stw	r3,0(r2)
  return ret;
 20106e0:	e0bffd17 	ldw	r2,-12(fp)
}
 20106e4:	e037883a 	mov	sp,fp
 20106e8:	dfc00117 	ldw	ra,4(sp)
 20106ec:	df000017 	ldw	fp,0(sp)
 20106f0:	dec00204 	addi	sp,sp,8
 20106f4:	f800283a 	ret

020106f8 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
 20106f8:	defff504 	addi	sp,sp,-44
 20106fc:	dfc00a15 	stw	ra,40(sp)
 2010700:	df000915 	stw	fp,36(sp)
 2010704:	df000904 	addi	fp,sp,36
 2010708:	e13ffd15 	stw	r4,-12(fp)
 201070c:	e17ffe15 	stw	r5,-8(fp)
 2010710:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
 2010714:	e0fffe17 	ldw	r3,-8(fp)
 2010718:	e0bfff17 	ldw	r2,-4(fp)
 201071c:	1885383a 	mul	r2,r3,r2
 2010720:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
 2010724:	e17ff817 	ldw	r5,-32(fp)
 2010728:	e13ffd17 	ldw	r4,-12(fp)
 201072c:	200b72c0 	call	200b72c <_malloc_r>
 2010730:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
 2010734:	e0bff917 	ldw	r2,-28(fp)
 2010738:	1000021e 	bne	r2,zero,2010744 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
 201073c:	0005883a 	mov	r2,zero
 2010740:	00004106 	br	2010848 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
 2010744:	e0bff917 	ldw	r2,-28(fp)
 2010748:	10bffe04 	addi	r2,r2,-8
 201074c:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
 2010750:	e0bffa17 	ldw	r2,-24(fp)
 2010754:	10c00117 	ldw	r3,4(r2)
 2010758:	00bfff04 	movi	r2,-4
 201075c:	1884703a 	and	r2,r3,r2
 2010760:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
 2010764:	e0bffb17 	ldw	r2,-20(fp)
 2010768:	10bfff04 	addi	r2,r2,-4
 201076c:	e0bffc15 	stw	r2,-16(fp)
 2010770:	e0bffc17 	ldw	r2,-16(fp)
 2010774:	10800968 	cmpgeui	r2,r2,37
 2010778:	10002e1e 	bne	r2,zero,2010834 <_calloc_r+0x13c>
 201077c:	e0bff917 	ldw	r2,-28(fp)
 2010780:	e0bff715 	stw	r2,-36(fp)
 2010784:	e0bffc17 	ldw	r2,-16(fp)
 2010788:	10800530 	cmpltui	r2,r2,20
 201078c:	10001e1e 	bne	r2,zero,2010808 <_calloc_r+0x110>
 2010790:	e0bff717 	ldw	r2,-36(fp)
 2010794:	10c00104 	addi	r3,r2,4
 2010798:	e0fff715 	stw	r3,-36(fp)
 201079c:	10000015 	stw	zero,0(r2)
 20107a0:	e0bff717 	ldw	r2,-36(fp)
 20107a4:	10c00104 	addi	r3,r2,4
 20107a8:	e0fff715 	stw	r3,-36(fp)
 20107ac:	10000015 	stw	zero,0(r2)
 20107b0:	e0bffc17 	ldw	r2,-16(fp)
 20107b4:	10800730 	cmpltui	r2,r2,28
 20107b8:	1000131e 	bne	r2,zero,2010808 <_calloc_r+0x110>
 20107bc:	e0bff717 	ldw	r2,-36(fp)
 20107c0:	10c00104 	addi	r3,r2,4
 20107c4:	e0fff715 	stw	r3,-36(fp)
 20107c8:	10000015 	stw	zero,0(r2)
 20107cc:	e0bff717 	ldw	r2,-36(fp)
 20107d0:	10c00104 	addi	r3,r2,4
 20107d4:	e0fff715 	stw	r3,-36(fp)
 20107d8:	10000015 	stw	zero,0(r2)
 20107dc:	e0bffc17 	ldw	r2,-16(fp)
 20107e0:	10800930 	cmpltui	r2,r2,36
 20107e4:	1000081e 	bne	r2,zero,2010808 <_calloc_r+0x110>
 20107e8:	e0bff717 	ldw	r2,-36(fp)
 20107ec:	10c00104 	addi	r3,r2,4
 20107f0:	e0fff715 	stw	r3,-36(fp)
 20107f4:	10000015 	stw	zero,0(r2)
 20107f8:	e0bff717 	ldw	r2,-36(fp)
 20107fc:	10c00104 	addi	r3,r2,4
 2010800:	e0fff715 	stw	r3,-36(fp)
 2010804:	10000015 	stw	zero,0(r2)
 2010808:	e0bff717 	ldw	r2,-36(fp)
 201080c:	10c00104 	addi	r3,r2,4
 2010810:	e0fff715 	stw	r3,-36(fp)
 2010814:	10000015 	stw	zero,0(r2)
 2010818:	e0bff717 	ldw	r2,-36(fp)
 201081c:	10c00104 	addi	r3,r2,4
 2010820:	e0fff715 	stw	r3,-36(fp)
 2010824:	10000015 	stw	zero,0(r2)
 2010828:	e0bff717 	ldw	r2,-36(fp)
 201082c:	10000015 	stw	zero,0(r2)
 2010830:	00000406 	br	2010844 <_calloc_r+0x14c>
 2010834:	e1bffc17 	ldw	r6,-16(fp)
 2010838:	000b883a 	mov	r5,zero
 201083c:	e13ff917 	ldw	r4,-28(fp)
 2010840:	2004c4c0 	call	2004c4c <memset>
    return mem;
 2010844:	e0bff917 	ldw	r2,-28(fp)
  }
}
 2010848:	e037883a 	mov	sp,fp
 201084c:	dfc00117 	ldw	ra,4(sp)
 2010850:	df000017 	ldw	fp,0(sp)
 2010854:	dec00204 	addi	sp,sp,8
 2010858:	f800283a 	ret

0201085c <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
 201085c:	defffa04 	addi	sp,sp,-24
 2010860:	dfc00515 	stw	ra,20(sp)
 2010864:	df000415 	stw	fp,16(sp)
 2010868:	dc000315 	stw	r16,12(sp)
 201086c:	df000404 	addi	fp,sp,16
 2010870:	e13ffe15 	stw	r4,-8(fp)
 2010874:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 2010878:	8000021e 	bne	r16,zero,2010884 <_fclose_r+0x28>
    return (0);			/* on NULL */
 201087c:	0005883a 	mov	r2,zero
 2010880:	00003b06 	br	2010970 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 2010884:	e0bffe17 	ldw	r2,-8(fp)
 2010888:	e0bffd15 	stw	r2,-12(fp)
 201088c:	e0bffd17 	ldw	r2,-12(fp)
 2010890:	10000526 	beq	r2,zero,20108a8 <_fclose_r+0x4c>
 2010894:	e0bffd17 	ldw	r2,-12(fp)
 2010898:	10800e17 	ldw	r2,56(r2)
 201089c:	1000021e 	bne	r2,zero,20108a8 <_fclose_r+0x4c>
 20108a0:	e13ffd17 	ldw	r4,-12(fp)
 20108a4:	2009ecc0 	call	2009ecc <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 20108a8:	8080030b 	ldhu	r2,12(r16)
 20108ac:	10bfffcc 	andi	r2,r2,65535
 20108b0:	10a0001c 	xori	r2,r2,32768
 20108b4:	10a00004 	addi	r2,r2,-32768
 20108b8:	1000021e 	bne	r2,zero,20108c4 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 20108bc:	0005883a 	mov	r2,zero
 20108c0:	00002b06 	br	2010970 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 20108c4:	800b883a 	mov	r5,r16
 20108c8:	e13ffe17 	ldw	r4,-8(fp)
 20108cc:	20097480 	call	2009748 <__sflush_r>
 20108d0:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 20108d4:	80800b17 	ldw	r2,44(r16)
 20108d8:	10000826 	beq	r2,zero,20108fc <_fclose_r+0xa0>
 20108dc:	80800b17 	ldw	r2,44(r16)
 20108e0:	80c00717 	ldw	r3,28(r16)
 20108e4:	180b883a 	mov	r5,r3
 20108e8:	e13ffe17 	ldw	r4,-8(fp)
 20108ec:	103ee83a 	callr	r2
 20108f0:	1000020e 	bge	r2,zero,20108fc <_fclose_r+0xa0>
    r = EOF;
 20108f4:	00bfffc4 	movi	r2,-1
 20108f8:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
 20108fc:	8080030b 	ldhu	r2,12(r16)
 2010900:	10bfffcc 	andi	r2,r2,65535
 2010904:	1080200c 	andi	r2,r2,128
 2010908:	10000426 	beq	r2,zero,201091c <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 201090c:	80800417 	ldw	r2,16(r16)
 2010910:	100b883a 	mov	r5,r2
 2010914:	e13ffe17 	ldw	r4,-8(fp)
 2010918:	200a0ec0 	call	200a0ec <_free_r>
  if (HASUB (fp))
 201091c:	80800c17 	ldw	r2,48(r16)
 2010920:	10000826 	beq	r2,zero,2010944 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 2010924:	80c00c17 	ldw	r3,48(r16)
 2010928:	80801004 	addi	r2,r16,64
 201092c:	18800426 	beq	r3,r2,2010940 <_fclose_r+0xe4>
 2010930:	80800c17 	ldw	r2,48(r16)
 2010934:	100b883a 	mov	r5,r2
 2010938:	e13ffe17 	ldw	r4,-8(fp)
 201093c:	200a0ec0 	call	200a0ec <_free_r>
 2010940:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 2010944:	80801117 	ldw	r2,68(r16)
 2010948:	10000526 	beq	r2,zero,2010960 <_fclose_r+0x104>
    FREELB (rptr, fp);
 201094c:	80801117 	ldw	r2,68(r16)
 2010950:	100b883a 	mov	r5,r2
 2010954:	e13ffe17 	ldw	r4,-8(fp)
 2010958:	200a0ec0 	call	200a0ec <_free_r>
 201095c:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 2010960:	2009fa40 	call	2009fa4 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 2010964:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 2010968:	2009fc40 	call	2009fc4 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 201096c:	e0bffc17 	ldw	r2,-16(fp)
}
 2010970:	e6ffff04 	addi	sp,fp,-4
 2010974:	dfc00217 	ldw	ra,8(sp)
 2010978:	df000117 	ldw	fp,4(sp)
 201097c:	dc000017 	ldw	r16,0(sp)
 2010980:	dec00304 	addi	sp,sp,12
 2010984:	f800283a 	ret

02010988 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
 2010988:	defffe04 	addi	sp,sp,-8
 201098c:	dfc00115 	stw	ra,4(sp)
 2010990:	df000015 	stw	fp,0(sp)
 2010994:	d839883a 	mov	fp,sp
 2010998:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 201099c:	d0a00017 	ldw	r2,-32768(gp)
 20109a0:	180b883a 	mov	r5,r3
 20109a4:	1009883a 	mov	r4,r2
 20109a8:	201085c0 	call	201085c <_fclose_r>
}
 20109ac:	e037883a 	mov	sp,fp
 20109b0:	dfc00117 	ldw	ra,4(sp)
 20109b4:	df000017 	ldw	fp,0(sp)
 20109b8:	dec00204 	addi	sp,sp,8
 20109bc:	f800283a 	ret

020109c0 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 20109c0:	defff804 	addi	sp,sp,-32
 20109c4:	dfc00715 	stw	ra,28(sp)
 20109c8:	df000615 	stw	fp,24(sp)
 20109cc:	df000604 	addi	fp,sp,24
 20109d0:	e13ffd15 	stw	r4,-12(fp)
 20109d4:	e17ffe15 	stw	r5,-8(fp)
 20109d8:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 20109dc:	200b0500 	call	200b050 <__locale_mb_cur_max>
 20109e0:	10800058 	cmpnei	r2,r2,1
 20109e4:	10000a1e 	bne	r2,zero,2010a10 <__fputwc+0x50>
 20109e8:	e0bffe17 	ldw	r2,-8(fp)
 20109ec:	0080080e 	bge	zero,r2,2010a10 <__fputwc+0x50>
 20109f0:	e0bffe17 	ldw	r2,-8(fp)
 20109f4:	10804008 	cmpgei	r2,r2,256
 20109f8:	1000051e 	bne	r2,zero,2010a10 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 20109fc:	e0bffe17 	ldw	r2,-8(fp)
 2010a00:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
 2010a04:	00800044 	movi	r2,1
 2010a08:	e0bffb15 	stw	r2,-20(fp)
 2010a0c:	00001406 	br	2010a60 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 2010a10:	e0bfff17 	ldw	r2,-4(fp)
 2010a14:	10c01704 	addi	r3,r2,92
 2010a18:	e0bffc04 	addi	r2,fp,-16
 2010a1c:	180f883a 	mov	r7,r3
 2010a20:	e1bffe17 	ldw	r6,-8(fp)
 2010a24:	100b883a 	mov	r5,r2
 2010a28:	e13ffd17 	ldw	r4,-12(fp)
 2010a2c:	2010ff40 	call	2010ff4 <_wcrtomb_r>
 2010a30:	e0bffb15 	stw	r2,-20(fp)
 2010a34:	e0bffb17 	ldw	r2,-20(fp)
 2010a38:	10bfffd8 	cmpnei	r2,r2,-1
 2010a3c:	1000081e 	bne	r2,zero,2010a60 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 2010a40:	e0bfff17 	ldw	r2,-4(fp)
 2010a44:	1080030b 	ldhu	r2,12(r2)
 2010a48:	10801014 	ori	r2,r2,64
 2010a4c:	1007883a 	mov	r3,r2
 2010a50:	e0bfff17 	ldw	r2,-4(fp)
 2010a54:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 2010a58:	00bfffc4 	movi	r2,-1
 2010a5c:	00005006 	br	2010ba0 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
 2010a60:	e03ffa15 	stw	zero,-24(fp)
 2010a64:	00004a06 	br	2010b90 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 2010a68:	e0bfff17 	ldw	r2,-4(fp)
 2010a6c:	10800217 	ldw	r2,8(r2)
 2010a70:	10ffffc4 	addi	r3,r2,-1
 2010a74:	e0bfff17 	ldw	r2,-4(fp)
 2010a78:	10c00215 	stw	r3,8(r2)
 2010a7c:	e0bfff17 	ldw	r2,-4(fp)
 2010a80:	10800217 	ldw	r2,8(r2)
 2010a84:	10002c0e 	bge	r2,zero,2010b38 <__fputwc+0x178>
 2010a88:	e0bfff17 	ldw	r2,-4(fp)
 2010a8c:	10c00217 	ldw	r3,8(r2)
 2010a90:	e0bfff17 	ldw	r2,-4(fp)
 2010a94:	10800617 	ldw	r2,24(r2)
 2010a98:	18801c16 	blt	r3,r2,2010b0c <__fputwc+0x14c>
 2010a9c:	e0bfff17 	ldw	r2,-4(fp)
 2010aa0:	10800017 	ldw	r2,0(r2)
 2010aa4:	e13ffc04 	addi	r4,fp,-16
 2010aa8:	e0fffa17 	ldw	r3,-24(fp)
 2010aac:	20c7883a 	add	r3,r4,r3
 2010ab0:	18c00003 	ldbu	r3,0(r3)
 2010ab4:	10c00005 	stb	r3,0(r2)
 2010ab8:	e0bfff17 	ldw	r2,-4(fp)
 2010abc:	10800017 	ldw	r2,0(r2)
 2010ac0:	10800003 	ldbu	r2,0(r2)
 2010ac4:	10803fcc 	andi	r2,r2,255
 2010ac8:	108002a0 	cmpeqi	r2,r2,10
 2010acc:	1000091e 	bne	r2,zero,2010af4 <__fputwc+0x134>
 2010ad0:	e0bfff17 	ldw	r2,-4(fp)
 2010ad4:	10800017 	ldw	r2,0(r2)
 2010ad8:	11000044 	addi	r4,r2,1
 2010adc:	e0ffff17 	ldw	r3,-4(fp)
 2010ae0:	19000015 	stw	r4,0(r3)
 2010ae4:	10800003 	ldbu	r2,0(r2)
 2010ae8:	10803fcc 	andi	r2,r2,255
 2010aec:	10bfffe0 	cmpeqi	r2,r2,-1
 2010af0:	00002006 	br	2010b74 <__fputwc+0x1b4>
 2010af4:	e1bfff17 	ldw	r6,-4(fp)
 2010af8:	01400284 	movi	r5,10
 2010afc:	e13ffd17 	ldw	r4,-12(fp)
 2010b00:	2010e4c0 	call	2010e4c <__swbuf_r>
 2010b04:	10bfffe0 	cmpeqi	r2,r2,-1
 2010b08:	00001a06 	br	2010b74 <__fputwc+0x1b4>
 2010b0c:	e0fffc04 	addi	r3,fp,-16
 2010b10:	e0bffa17 	ldw	r2,-24(fp)
 2010b14:	1885883a 	add	r2,r3,r2
 2010b18:	10800003 	ldbu	r2,0(r2)
 2010b1c:	10803fcc 	andi	r2,r2,255
 2010b20:	e1bfff17 	ldw	r6,-4(fp)
 2010b24:	100b883a 	mov	r5,r2
 2010b28:	e13ffd17 	ldw	r4,-12(fp)
 2010b2c:	2010e4c0 	call	2010e4c <__swbuf_r>
 2010b30:	10bfffe0 	cmpeqi	r2,r2,-1
 2010b34:	00000f06 	br	2010b74 <__fputwc+0x1b4>
 2010b38:	e0bfff17 	ldw	r2,-4(fp)
 2010b3c:	10800017 	ldw	r2,0(r2)
 2010b40:	e13ffc04 	addi	r4,fp,-16
 2010b44:	e0fffa17 	ldw	r3,-24(fp)
 2010b48:	20c7883a 	add	r3,r4,r3
 2010b4c:	18c00003 	ldbu	r3,0(r3)
 2010b50:	10c00005 	stb	r3,0(r2)
 2010b54:	e0bfff17 	ldw	r2,-4(fp)
 2010b58:	10800017 	ldw	r2,0(r2)
 2010b5c:	11000044 	addi	r4,r2,1
 2010b60:	e0ffff17 	ldw	r3,-4(fp)
 2010b64:	19000015 	stw	r4,0(r3)
 2010b68:	10800003 	ldbu	r2,0(r2)
 2010b6c:	10803fcc 	andi	r2,r2,255
 2010b70:	10bfffe0 	cmpeqi	r2,r2,-1
 2010b74:	10803fcc 	andi	r2,r2,255
 2010b78:	10000226 	beq	r2,zero,2010b84 <__fputwc+0x1c4>
      return WEOF;
 2010b7c:	00bfffc4 	movi	r2,-1
 2010b80:	00000706 	br	2010ba0 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
 2010b84:	e0bffa17 	ldw	r2,-24(fp)
 2010b88:	10800044 	addi	r2,r2,1
 2010b8c:	e0bffa15 	stw	r2,-24(fp)
 2010b90:	e0fffa17 	ldw	r3,-24(fp)
 2010b94:	e0bffb17 	ldw	r2,-20(fp)
 2010b98:	18bfb336 	bltu	r3,r2,2010a68 <__fputwc+0xa8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
 2010b9c:	e0bffe17 	ldw	r2,-8(fp)
}
 2010ba0:	e037883a 	mov	sp,fp
 2010ba4:	dfc00117 	ldw	ra,4(sp)
 2010ba8:	df000017 	ldw	fp,0(sp)
 2010bac:	dec00204 	addi	sp,sp,8
 2010bb0:	f800283a 	ret

02010bb4 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
 2010bb4:	defffa04 	addi	sp,sp,-24
 2010bb8:	dfc00515 	stw	ra,20(sp)
 2010bbc:	df000415 	stw	fp,16(sp)
 2010bc0:	df000404 	addi	fp,sp,16
 2010bc4:	e13ffd15 	stw	r4,-12(fp)
 2010bc8:	e17ffe15 	stw	r5,-8(fp)
 2010bcc:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 2010bd0:	e0bfff17 	ldw	r2,-4(fp)
 2010bd4:	1080030b 	ldhu	r2,12(r2)
 2010bd8:	10bfffcc 	andi	r2,r2,65535
 2010bdc:	1088000c 	andi	r2,r2,8192
 2010be0:	10000b1e 	bne	r2,zero,2010c10 <_fputwc_r+0x5c>
 2010be4:	e0bfff17 	ldw	r2,-4(fp)
 2010be8:	1080030b 	ldhu	r2,12(r2)
 2010bec:	10880014 	ori	r2,r2,8192
 2010bf0:	1007883a 	mov	r3,r2
 2010bf4:	e0bfff17 	ldw	r2,-4(fp)
 2010bf8:	10c0030d 	sth	r3,12(r2)
 2010bfc:	e0bfff17 	ldw	r2,-4(fp)
 2010c00:	10801917 	ldw	r2,100(r2)
 2010c04:	10c80014 	ori	r3,r2,8192
 2010c08:	e0bfff17 	ldw	r2,-4(fp)
 2010c0c:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 2010c10:	e1bfff17 	ldw	r6,-4(fp)
 2010c14:	e17ffe17 	ldw	r5,-8(fp)
 2010c18:	e13ffd17 	ldw	r4,-12(fp)
 2010c1c:	20109c00 	call	20109c0 <__fputwc>
 2010c20:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
 2010c24:	e0bffc17 	ldw	r2,-16(fp)
}
 2010c28:	e037883a 	mov	sp,fp
 2010c2c:	dfc00117 	ldw	ra,4(sp)
 2010c30:	df000017 	ldw	fp,0(sp)
 2010c34:	dec00204 	addi	sp,sp,8
 2010c38:	f800283a 	ret

02010c3c <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
 2010c3c:	defffa04 	addi	sp,sp,-24
 2010c40:	dfc00515 	stw	ra,20(sp)
 2010c44:	df000415 	stw	fp,16(sp)
 2010c48:	df000404 	addi	fp,sp,16
 2010c4c:	e13ffe15 	stw	r4,-8(fp)
 2010c50:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
 2010c54:	d0a00017 	ldw	r2,-32768(gp)
 2010c58:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
 2010c5c:	e0bffc17 	ldw	r2,-16(fp)
 2010c60:	e0bffd15 	stw	r2,-12(fp)
 2010c64:	e0bffd17 	ldw	r2,-12(fp)
 2010c68:	10000526 	beq	r2,zero,2010c80 <fputwc+0x44>
 2010c6c:	e0bffd17 	ldw	r2,-12(fp)
 2010c70:	10800e17 	ldw	r2,56(r2)
 2010c74:	1000021e 	bne	r2,zero,2010c80 <fputwc+0x44>
 2010c78:	e13ffd17 	ldw	r4,-12(fp)
 2010c7c:	2009ecc0 	call	2009ecc <__sinit>
  return _fputwc_r (reent, wc, fp);
 2010c80:	e1bfff17 	ldw	r6,-4(fp)
 2010c84:	e17ffe17 	ldw	r5,-8(fp)
 2010c88:	e13ffc17 	ldw	r4,-16(fp)
 2010c8c:	2010bb40 	call	2010bb4 <_fputwc_r>
}
 2010c90:	e037883a 	mov	sp,fp
 2010c94:	dfc00117 	ldw	ra,4(sp)
 2010c98:	df000017 	ldw	fp,0(sp)
 2010c9c:	dec00204 	addi	sp,sp,8
 2010ca0:	f800283a 	ret

02010ca4 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 2010ca4:	defffa04 	addi	sp,sp,-24
 2010ca8:	dfc00515 	stw	ra,20(sp)
 2010cac:	df000415 	stw	fp,16(sp)
 2010cb0:	df000404 	addi	fp,sp,16
 2010cb4:	e13ffd15 	stw	r4,-12(fp)
 2010cb8:	e17ffe15 	stw	r5,-8(fp)
 2010cbc:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
 2010cc0:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 2010cc4:	e17fff17 	ldw	r5,-4(fp)
 2010cc8:	e13ffe17 	ldw	r4,-8(fp)
 2010ccc:	20132d40 	call	20132d4 <fstat>
 2010cd0:	e0bffc15 	stw	r2,-16(fp)
 2010cd4:	e0bffc17 	ldw	r2,-16(fp)
 2010cd8:	10bfffd8 	cmpnei	r2,r2,-1
 2010cdc:	1000051e 	bne	r2,zero,2010cf4 <_fstat_r+0x50>
 2010ce0:	d0a72e17 	ldw	r2,-25416(gp)
 2010ce4:	10000326 	beq	r2,zero,2010cf4 <_fstat_r+0x50>
    ptr->_errno = errno;
 2010ce8:	d0e72e17 	ldw	r3,-25416(gp)
 2010cec:	e0bffd17 	ldw	r2,-12(fp)
 2010cf0:	10c00015 	stw	r3,0(r2)
  return ret;
 2010cf4:	e0bffc17 	ldw	r2,-16(fp)
}
 2010cf8:	e037883a 	mov	sp,fp
 2010cfc:	dfc00117 	ldw	ra,4(sp)
 2010d00:	df000017 	ldw	fp,0(sp)
 2010d04:	dec00204 	addi	sp,sp,8
 2010d08:	f800283a 	ret

02010d0c <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 2010d0c:	defffb04 	addi	sp,sp,-20
 2010d10:	dfc00415 	stw	ra,16(sp)
 2010d14:	df000315 	stw	fp,12(sp)
 2010d18:	df000304 	addi	fp,sp,12
 2010d1c:	e13ffe15 	stw	r4,-8(fp)
 2010d20:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
 2010d24:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 2010d28:	e13fff17 	ldw	r4,-4(fp)
 2010d2c:	20133c00 	call	20133c0 <isatty>
 2010d30:	e0bffd15 	stw	r2,-12(fp)
 2010d34:	e0bffd17 	ldw	r2,-12(fp)
 2010d38:	10bfffd8 	cmpnei	r2,r2,-1
 2010d3c:	1000051e 	bne	r2,zero,2010d54 <_isatty_r+0x48>
 2010d40:	d0a72e17 	ldw	r2,-25416(gp)
 2010d44:	10000326 	beq	r2,zero,2010d54 <_isatty_r+0x48>
    ptr->_errno = errno;
 2010d48:	d0e72e17 	ldw	r3,-25416(gp)
 2010d4c:	e0bffe17 	ldw	r2,-8(fp)
 2010d50:	10c00015 	stw	r3,0(r2)
  return ret;
 2010d54:	e0bffd17 	ldw	r2,-12(fp)
}
 2010d58:	e037883a 	mov	sp,fp
 2010d5c:	dfc00117 	ldw	ra,4(sp)
 2010d60:	df000017 	ldw	fp,0(sp)
 2010d64:	dec00204 	addi	sp,sp,8
 2010d68:	f800283a 	ret

02010d6c <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
 2010d6c:	defff904 	addi	sp,sp,-28
 2010d70:	dfc00615 	stw	ra,24(sp)
 2010d74:	df000515 	stw	fp,20(sp)
 2010d78:	df000504 	addi	fp,sp,20
 2010d7c:	e13ffc15 	stw	r4,-16(fp)
 2010d80:	e17ffd15 	stw	r5,-12(fp)
 2010d84:	e1bffe15 	stw	r6,-8(fp)
 2010d88:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
 2010d8c:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 2010d90:	e1bfff17 	ldw	r6,-4(fp)
 2010d94:	e17ffe17 	ldw	r5,-8(fp)
 2010d98:	e13ffd17 	ldw	r4,-12(fp)
 2010d9c:	201358c0 	call	201358c <lseek>
 2010da0:	e0bffb15 	stw	r2,-20(fp)
 2010da4:	e0bffb17 	ldw	r2,-20(fp)
 2010da8:	10bfffd8 	cmpnei	r2,r2,-1
 2010dac:	1000051e 	bne	r2,zero,2010dc4 <_lseek_r+0x58>
 2010db0:	d0a72e17 	ldw	r2,-25416(gp)
 2010db4:	10000326 	beq	r2,zero,2010dc4 <_lseek_r+0x58>
    ptr->_errno = errno;
 2010db8:	d0e72e17 	ldw	r3,-25416(gp)
 2010dbc:	e0bffc17 	ldw	r2,-16(fp)
 2010dc0:	10c00015 	stw	r3,0(r2)
  return ret;
 2010dc4:	e0bffb17 	ldw	r2,-20(fp)
}
 2010dc8:	e037883a 	mov	sp,fp
 2010dcc:	dfc00117 	ldw	ra,4(sp)
 2010dd0:	df000017 	ldw	fp,0(sp)
 2010dd4:	dec00204 	addi	sp,sp,8
 2010dd8:	f800283a 	ret

02010ddc <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
 2010ddc:	defff904 	addi	sp,sp,-28
 2010de0:	dfc00615 	stw	ra,24(sp)
 2010de4:	df000515 	stw	fp,20(sp)
 2010de8:	df000504 	addi	fp,sp,20
 2010dec:	e13ffc15 	stw	r4,-16(fp)
 2010df0:	e17ffd15 	stw	r5,-12(fp)
 2010df4:	e1bffe15 	stw	r6,-8(fp)
 2010df8:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
 2010dfc:	d0272e15 	stw	zero,-25416(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 2010e00:	e1bfff17 	ldw	r6,-4(fp)
 2010e04:	e17ffe17 	ldw	r5,-8(fp)
 2010e08:	e13ffd17 	ldw	r4,-12(fp)
 2010e0c:	20137580 	call	2013758 <read>
 2010e10:	e0bffb15 	stw	r2,-20(fp)
 2010e14:	e0bffb17 	ldw	r2,-20(fp)
 2010e18:	10bfffd8 	cmpnei	r2,r2,-1
 2010e1c:	1000051e 	bne	r2,zero,2010e34 <_read_r+0x58>
 2010e20:	d0a72e17 	ldw	r2,-25416(gp)
 2010e24:	10000326 	beq	r2,zero,2010e34 <_read_r+0x58>
    ptr->_errno = errno;
 2010e28:	d0e72e17 	ldw	r3,-25416(gp)
 2010e2c:	e0bffc17 	ldw	r2,-16(fp)
 2010e30:	10c00015 	stw	r3,0(r2)
  return ret;
 2010e34:	e0bffb17 	ldw	r2,-20(fp)
}
 2010e38:	e037883a 	mov	sp,fp
 2010e3c:	dfc00117 	ldw	ra,4(sp)
 2010e40:	df000017 	ldw	fp,0(sp)
 2010e44:	dec00204 	addi	sp,sp,8
 2010e48:	f800283a 	ret

02010e4c <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
 2010e4c:	defff904 	addi	sp,sp,-28
 2010e50:	dfc00615 	stw	ra,24(sp)
 2010e54:	df000515 	stw	fp,20(sp)
 2010e58:	dc800415 	stw	r18,16(sp)
 2010e5c:	dc400315 	stw	r17,12(sp)
 2010e60:	dc000215 	stw	r16,8(sp)
 2010e64:	df000504 	addi	fp,sp,20
 2010e68:	e13ffc15 	stw	r4,-16(fp)
 2010e6c:	2825883a 	mov	r18,r5
 2010e70:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 2010e74:	e0bffc17 	ldw	r2,-16(fp)
 2010e78:	e0bffb15 	stw	r2,-20(fp)
 2010e7c:	e0bffb17 	ldw	r2,-20(fp)
 2010e80:	10000526 	beq	r2,zero,2010e98 <__swbuf_r+0x4c>
 2010e84:	e0bffb17 	ldw	r2,-20(fp)
 2010e88:	10800e17 	ldw	r2,56(r2)
 2010e8c:	1000021e 	bne	r2,zero,2010e98 <__swbuf_r+0x4c>
 2010e90:	e13ffb17 	ldw	r4,-20(fp)
 2010e94:	2009ecc0 	call	2009ecc <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 2010e98:	80800617 	ldw	r2,24(r16)
 2010e9c:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 2010ea0:	8080030b 	ldhu	r2,12(r16)
 2010ea4:	10bfffcc 	andi	r2,r2,65535
 2010ea8:	1080020c 	andi	r2,r2,8
 2010eac:	10000226 	beq	r2,zero,2010eb8 <__swbuf_r+0x6c>
 2010eb0:	80800417 	ldw	r2,16(r16)
 2010eb4:	1000061e 	bne	r2,zero,2010ed0 <__swbuf_r+0x84>
 2010eb8:	800b883a 	mov	r5,r16
 2010ebc:	e13ffc17 	ldw	r4,-16(fp)
 2010ec0:	200767c0 	call	200767c <__swsetup_r>
 2010ec4:	10000226 	beq	r2,zero,2010ed0 <__swbuf_r+0x84>
    return EOF;
 2010ec8:	00bfffc4 	movi	r2,-1
 2010ecc:	00003106 	br	2010f94 <__swbuf_r+0x148>
  c = (unsigned char) c;
 2010ed0:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
 2010ed4:	8080030b 	ldhu	r2,12(r16)
 2010ed8:	10bfffcc 	andi	r2,r2,65535
 2010edc:	1088000c 	andi	r2,r2,8192
 2010ee0:	1000071e 	bne	r2,zero,2010f00 <__swbuf_r+0xb4>
 2010ee4:	8080030b 	ldhu	r2,12(r16)
 2010ee8:	10880014 	ori	r2,r2,8192
 2010eec:	8080030d 	sth	r2,12(r16)
 2010ef0:	80c01917 	ldw	r3,100(r16)
 2010ef4:	00b7ffc4 	movi	r2,-8193
 2010ef8:	1884703a 	and	r2,r3,r2
 2010efc:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 2010f00:	80800017 	ldw	r2,0(r16)
 2010f04:	1007883a 	mov	r3,r2
 2010f08:	80800417 	ldw	r2,16(r16)
 2010f0c:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 2010f10:	80800517 	ldw	r2,20(r16)
 2010f14:	88800716 	blt	r17,r2,2010f34 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 2010f18:	800b883a 	mov	r5,r16
 2010f1c:	e13ffc17 	ldw	r4,-16(fp)
 2010f20:	2009a4c0 	call	2009a4c <_fflush_r>
 2010f24:	10000226 	beq	r2,zero,2010f30 <__swbuf_r+0xe4>
	return EOF;
 2010f28:	00bfffc4 	movi	r2,-1
 2010f2c:	00001906 	br	2010f94 <__swbuf_r+0x148>
      n = 0;
 2010f30:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 2010f34:	80800217 	ldw	r2,8(r16)
 2010f38:	10bfffc4 	addi	r2,r2,-1
 2010f3c:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 2010f40:	80800017 	ldw	r2,0(r16)
 2010f44:	10c00044 	addi	r3,r2,1
 2010f48:	80c00015 	stw	r3,0(r16)
 2010f4c:	9007883a 	mov	r3,r18
 2010f50:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 2010f54:	8c400044 	addi	r17,r17,1
 2010f58:	80800517 	ldw	r2,20(r16)
 2010f5c:	88800626 	beq	r17,r2,2010f78 <__swbuf_r+0x12c>
 2010f60:	8080030b 	ldhu	r2,12(r16)
 2010f64:	10bfffcc 	andi	r2,r2,65535
 2010f68:	1080004c 	andi	r2,r2,1
 2010f6c:	10000826 	beq	r2,zero,2010f90 <__swbuf_r+0x144>
 2010f70:	90800298 	cmpnei	r2,r18,10
 2010f74:	1000061e 	bne	r2,zero,2010f90 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 2010f78:	800b883a 	mov	r5,r16
 2010f7c:	e13ffc17 	ldw	r4,-16(fp)
 2010f80:	2009a4c0 	call	2009a4c <_fflush_r>
 2010f84:	10000226 	beq	r2,zero,2010f90 <__swbuf_r+0x144>
      return EOF;
 2010f88:	00bfffc4 	movi	r2,-1
 2010f8c:	00000106 	br	2010f94 <__swbuf_r+0x148>
  return c;
 2010f90:	9005883a 	mov	r2,r18
}
 2010f94:	e6fffd04 	addi	sp,fp,-12
 2010f98:	dfc00417 	ldw	ra,16(sp)
 2010f9c:	df000317 	ldw	fp,12(sp)
 2010fa0:	dc800217 	ldw	r18,8(sp)
 2010fa4:	dc400117 	ldw	r17,4(sp)
 2010fa8:	dc000017 	ldw	r16,0(sp)
 2010fac:	dec00504 	addi	sp,sp,20
 2010fb0:	f800283a 	ret

02010fb4 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
 2010fb4:	defffe04 	addi	sp,sp,-8
 2010fb8:	dfc00115 	stw	ra,4(sp)
 2010fbc:	df000015 	stw	fp,0(sp)
 2010fc0:	d839883a 	mov	fp,sp
 2010fc4:	2007883a 	mov	r3,r4
 2010fc8:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 2010fcc:	d0a00017 	ldw	r2,-32768(gp)
 2010fd0:	200d883a 	mov	r6,r4
 2010fd4:	180b883a 	mov	r5,r3
 2010fd8:	1009883a 	mov	r4,r2
 2010fdc:	2010e4c0 	call	2010e4c <__swbuf_r>
}
 2010fe0:	e037883a 	mov	sp,fp
 2010fe4:	dfc00117 	ldw	ra,4(sp)
 2010fe8:	df000017 	ldw	fp,0(sp)
 2010fec:	dec00204 	addi	sp,sp,8
 2010ff0:	f800283a 	ret

02010ff4 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
 2010ff4:	defff404 	addi	sp,sp,-48
 2010ff8:	dfc00b15 	stw	ra,44(sp)
 2010ffc:	df000a15 	stw	fp,40(sp)
 2011000:	dc000915 	stw	r16,36(sp)
 2011004:	df000a04 	addi	fp,sp,40
 2011008:	e13ffb15 	stw	r4,-20(fp)
 201100c:	e17ffc15 	stw	r5,-16(fp)
 2011010:	e1bffd15 	stw	r6,-12(fp)
 2011014:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
 2011018:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 201101c:	e0bffc17 	ldw	r2,-16(fp)
 2011020:	10000d1e 	bne	r2,zero,2011058 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
 2011024:	d4200517 	ldw	r16,-32748(gp)
 2011028:	200b02c0 	call	200b02c <__locale_charset>
 201102c:	1009883a 	mov	r4,r2
 2011030:	e0fff804 	addi	r3,fp,-32
 2011034:	e0bffe17 	ldw	r2,-8(fp)
 2011038:	d8800015 	stw	r2,0(sp)
 201103c:	200f883a 	mov	r7,r4
 2011040:	000d883a 	mov	r6,zero
 2011044:	180b883a 	mov	r5,r3
 2011048:	e13ffb17 	ldw	r4,-20(fp)
 201104c:	803ee83a 	callr	r16
 2011050:	e0bff715 	stw	r2,-36(fp)
 2011054:	00000b06 	br	2011084 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
 2011058:	d4200517 	ldw	r16,-32748(gp)
 201105c:	200b02c0 	call	200b02c <__locale_charset>
 2011060:	1007883a 	mov	r3,r2
 2011064:	e0bffe17 	ldw	r2,-8(fp)
 2011068:	d8800015 	stw	r2,0(sp)
 201106c:	180f883a 	mov	r7,r3
 2011070:	e1bffd17 	ldw	r6,-12(fp)
 2011074:	e17ffc17 	ldw	r5,-16(fp)
 2011078:	e13ffb17 	ldw	r4,-20(fp)
 201107c:	803ee83a 	callr	r16
 2011080:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 2011084:	e0bff717 	ldw	r2,-36(fp)
 2011088:	10bfffd8 	cmpnei	r2,r2,-1
 201108c:	1000071e 	bne	r2,zero,20110ac <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
 2011090:	e0bffe17 	ldw	r2,-8(fp)
 2011094:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 2011098:	e0bffb17 	ldw	r2,-20(fp)
 201109c:	00c02284 	movi	r3,138
 20110a0:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 20110a4:	00bfffc4 	movi	r2,-1
 20110a8:	00000106 	br	20110b0 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
 20110ac:	e0bff717 	ldw	r2,-36(fp)
}
 20110b0:	e6ffff04 	addi	sp,fp,-4
 20110b4:	dfc00217 	ldw	ra,8(sp)
 20110b8:	df000117 	ldw	fp,4(sp)
 20110bc:	dc000017 	ldw	r16,0(sp)
 20110c0:	dec00304 	addi	sp,sp,12
 20110c4:	f800283a 	ret

020110c8 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
 20110c8:	defff404 	addi	sp,sp,-48
 20110cc:	dfc00b15 	stw	ra,44(sp)
 20110d0:	df000a15 	stw	fp,40(sp)
 20110d4:	dc000915 	stw	r16,36(sp)
 20110d8:	df000a04 	addi	fp,sp,40
 20110dc:	e13ffc15 	stw	r4,-16(fp)
 20110e0:	e17ffd15 	stw	r5,-12(fp)
 20110e4:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 20110e8:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
 20110ec:	d0a00017 	ldw	r2,-32768(gp)
 20110f0:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 20110f4:	e0bffc17 	ldw	r2,-16(fp)
 20110f8:	10000d1e 	bne	r2,zero,2011130 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
 20110fc:	d4200517 	ldw	r16,-32748(gp)
 2011100:	200b02c0 	call	200b02c <__locale_charset>
 2011104:	1009883a 	mov	r4,r2
 2011108:	e0fff904 	addi	r3,fp,-28
 201110c:	e0bffe17 	ldw	r2,-8(fp)
 2011110:	d8800015 	stw	r2,0(sp)
 2011114:	200f883a 	mov	r7,r4
 2011118:	000d883a 	mov	r6,zero
 201111c:	180b883a 	mov	r5,r3
 2011120:	e13ff817 	ldw	r4,-32(fp)
 2011124:	803ee83a 	callr	r16
 2011128:	e0bff715 	stw	r2,-36(fp)
 201112c:	00000b06 	br	201115c <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
 2011130:	d4200517 	ldw	r16,-32748(gp)
 2011134:	200b02c0 	call	200b02c <__locale_charset>
 2011138:	1007883a 	mov	r3,r2
 201113c:	e0bffe17 	ldw	r2,-8(fp)
 2011140:	d8800015 	stw	r2,0(sp)
 2011144:	180f883a 	mov	r7,r3
 2011148:	e1bffd17 	ldw	r6,-12(fp)
 201114c:	e17ffc17 	ldw	r5,-16(fp)
 2011150:	e13ff817 	ldw	r4,-32(fp)
 2011154:	803ee83a 	callr	r16
 2011158:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
 201115c:	e0bff717 	ldw	r2,-36(fp)
 2011160:	10bfffd8 	cmpnei	r2,r2,-1
 2011164:	1000071e 	bne	r2,zero,2011184 <wcrtomb+0xbc>
    {
      ps->__count = 0;
 2011168:	e0bffe17 	ldw	r2,-8(fp)
 201116c:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 2011170:	e0bff817 	ldw	r2,-32(fp)
 2011174:	00c02284 	movi	r3,138
 2011178:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 201117c:	00bfffc4 	movi	r2,-1
 2011180:	00000106 	br	2011188 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
 2011184:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 2011188:	e6ffff04 	addi	sp,fp,-4
 201118c:	dfc00217 	ldw	ra,8(sp)
 2011190:	df000117 	ldw	fp,4(sp)
 2011194:	dc000017 	ldw	r16,0(sp)
 2011198:	dec00304 	addi	sp,sp,12
 201119c:	f800283a 	ret

020111a0 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
 20111a0:	defff804 	addi	sp,sp,-32
 20111a4:	dfc00715 	stw	ra,28(sp)
 20111a8:	df000615 	stw	fp,24(sp)
 20111ac:	dc000515 	stw	r16,20(sp)
 20111b0:	df000604 	addi	fp,sp,24
 20111b4:	e13ffb15 	stw	r4,-20(fp)
 20111b8:	e17ffc15 	stw	r5,-16(fp)
 20111bc:	e1bffd15 	stw	r6,-12(fp)
 20111c0:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
 20111c4:	d4200517 	ldw	r16,-32748(gp)
 20111c8:	200b02c0 	call	200b02c <__locale_charset>
 20111cc:	1007883a 	mov	r3,r2
 20111d0:	e0bffe17 	ldw	r2,-8(fp)
 20111d4:	d8800015 	stw	r2,0(sp)
 20111d8:	180f883a 	mov	r7,r3
 20111dc:	e1bffd17 	ldw	r6,-12(fp)
 20111e0:	e17ffc17 	ldw	r5,-16(fp)
 20111e4:	e13ffb17 	ldw	r4,-20(fp)
 20111e8:	803ee83a 	callr	r16
}
 20111ec:	e6ffff04 	addi	sp,fp,-4
 20111f0:	dfc00217 	ldw	ra,8(sp)
 20111f4:	df000117 	ldw	fp,4(sp)
 20111f8:	dc000017 	ldw	r16,0(sp)
 20111fc:	dec00304 	addi	sp,sp,12
 2011200:	f800283a 	ret

02011204 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
 2011204:	defffa04 	addi	sp,sp,-24
 2011208:	df000515 	stw	fp,20(sp)
 201120c:	df000504 	addi	fp,sp,20
 2011210:	e13ffc15 	stw	r4,-16(fp)
 2011214:	e17ffd15 	stw	r5,-12(fp)
 2011218:	e1bffe15 	stw	r6,-8(fp)
 201121c:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 2011220:	e0bffe17 	ldw	r2,-8(fp)
 2011224:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
 2011228:	e0bffd17 	ldw	r2,-12(fp)
 201122c:	1000021e 	bne	r2,zero,2011238 <__ascii_wctomb+0x34>
    return 0;
 2011230:	0005883a 	mov	r2,zero
 2011234:	00000d06 	br	201126c <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 2011238:	e0bffb17 	ldw	r2,-20(fp)
 201123c:	10804030 	cmpltui	r2,r2,256
 2011240:	1000051e 	bne	r2,zero,2011258 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 2011244:	e0bffc17 	ldw	r2,-16(fp)
 2011248:	00c02284 	movi	r3,138
 201124c:	10c00015 	stw	r3,0(r2)
      return -1;
 2011250:	00bfffc4 	movi	r2,-1
 2011254:	00000506 	br	201126c <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 2011258:	e0bffb17 	ldw	r2,-20(fp)
 201125c:	1007883a 	mov	r3,r2
 2011260:	e0bffd17 	ldw	r2,-12(fp)
 2011264:	10c00005 	stb	r3,0(r2)
  return 1;
 2011268:	00800044 	movi	r2,1
}
 201126c:	e037883a 	mov	sp,fp
 2011270:	df000017 	ldw	fp,0(sp)
 2011274:	dec00104 	addi	sp,sp,4
 2011278:	f800283a 	ret

0201127c <__udivdi3>:
 201127c:	defff504 	addi	sp,sp,-44
 2011280:	dcc00415 	stw	r19,16(sp)
 2011284:	dc000115 	stw	r16,4(sp)
 2011288:	dfc00a15 	stw	ra,40(sp)
 201128c:	df000915 	stw	fp,36(sp)
 2011290:	ddc00815 	stw	r23,32(sp)
 2011294:	dd800715 	stw	r22,28(sp)
 2011298:	dd400615 	stw	r21,24(sp)
 201129c:	dd000515 	stw	r20,20(sp)
 20112a0:	dc800315 	stw	r18,12(sp)
 20112a4:	dc400215 	stw	r17,8(sp)
 20112a8:	2027883a 	mov	r19,r4
 20112ac:	2821883a 	mov	r16,r5
 20112b0:	3800411e 	bne	r7,zero,20113b8 <__udivdi3+0x13c>
 20112b4:	3023883a 	mov	r17,r6
 20112b8:	2025883a 	mov	r18,r4
 20112bc:	2980522e 	bgeu	r5,r6,2011408 <__udivdi3+0x18c>
 20112c0:	00bfffd4 	movui	r2,65535
 20112c4:	282d883a 	mov	r22,r5
 20112c8:	1180a836 	bltu	r2,r6,201156c <__udivdi3+0x2f0>
 20112cc:	00803fc4 	movi	r2,255
 20112d0:	1185803a 	cmpltu	r2,r2,r6
 20112d4:	100490fa 	slli	r2,r2,3
 20112d8:	3086d83a 	srl	r3,r6,r2
 20112dc:	010080b4 	movhi	r4,514
 20112e0:	213a3d44 	addi	r4,r4,-5899
 20112e4:	20c7883a 	add	r3,r4,r3
 20112e8:	18c00003 	ldbu	r3,0(r3)
 20112ec:	1885883a 	add	r2,r3,r2
 20112f0:	00c00804 	movi	r3,32
 20112f4:	1887c83a 	sub	r3,r3,r2
 20112f8:	18000526 	beq	r3,zero,2011310 <__udivdi3+0x94>
 20112fc:	80e0983a 	sll	r16,r16,r3
 2011300:	9884d83a 	srl	r2,r19,r2
 2011304:	30e2983a 	sll	r17,r6,r3
 2011308:	98e4983a 	sll	r18,r19,r3
 201130c:	142cb03a 	or	r22,r2,r16
 2011310:	882ad43a 	srli	r21,r17,16
 2011314:	b009883a 	mov	r4,r22
 2011318:	8d3fffcc 	andi	r20,r17,65535
 201131c:	a80b883a 	mov	r5,r21
 2011320:	2004a6c0 	call	2004a6c <__umodsi3>
 2011324:	b009883a 	mov	r4,r22
 2011328:	a80b883a 	mov	r5,r21
 201132c:	1027883a 	mov	r19,r2
 2011330:	2004a080 	call	2004a08 <__udivsi3>
 2011334:	102d883a 	mov	r22,r2
 2011338:	9826943a 	slli	r19,r19,16
 201133c:	9004d43a 	srli	r2,r18,16
 2011340:	a5a1383a 	mul	r16,r20,r22
 2011344:	14c4b03a 	or	r2,r2,r19
 2011348:	1400052e 	bgeu	r2,r16,2011360 <__udivdi3+0xe4>
 201134c:	1445883a 	add	r2,r2,r17
 2011350:	b0ffffc4 	addi	r3,r22,-1
 2011354:	14400136 	bltu	r2,r17,201135c <__udivdi3+0xe0>
 2011358:	14012336 	bltu	r2,r16,20117e8 <__udivdi3+0x56c>
 201135c:	182d883a 	mov	r22,r3
 2011360:	1421c83a 	sub	r16,r2,r16
 2011364:	a80b883a 	mov	r5,r21
 2011368:	8009883a 	mov	r4,r16
 201136c:	2004a6c0 	call	2004a6c <__umodsi3>
 2011370:	1027883a 	mov	r19,r2
 2011374:	a80b883a 	mov	r5,r21
 2011378:	8009883a 	mov	r4,r16
 201137c:	2004a080 	call	2004a08 <__udivsi3>
 2011380:	9826943a 	slli	r19,r19,16
 2011384:	a0a9383a 	mul	r20,r20,r2
 2011388:	94bfffcc 	andi	r18,r18,65535
 201138c:	94e4b03a 	or	r18,r18,r19
 2011390:	9500052e 	bgeu	r18,r20,20113a8 <__udivdi3+0x12c>
 2011394:	8ca5883a 	add	r18,r17,r18
 2011398:	10ffffc4 	addi	r3,r2,-1
 201139c:	9440f136 	bltu	r18,r17,2011764 <__udivdi3+0x4e8>
 20113a0:	9500f02e 	bgeu	r18,r20,2011764 <__udivdi3+0x4e8>
 20113a4:	10bfff84 	addi	r2,r2,-2
 20113a8:	b00c943a 	slli	r6,r22,16
 20113ac:	0007883a 	mov	r3,zero
 20113b0:	3084b03a 	or	r2,r6,r2
 20113b4:	00005906 	br	201151c <__udivdi3+0x2a0>
 20113b8:	29c05636 	bltu	r5,r7,2011514 <__udivdi3+0x298>
 20113bc:	00bfffd4 	movui	r2,65535
 20113c0:	11c0622e 	bgeu	r2,r7,201154c <__udivdi3+0x2d0>
 20113c4:	00804034 	movhi	r2,256
 20113c8:	10bfffc4 	addi	r2,r2,-1
 20113cc:	11c0ee36 	bltu	r2,r7,2011788 <__udivdi3+0x50c>
 20113d0:	00800404 	movi	r2,16
 20113d4:	3886d83a 	srl	r3,r7,r2
 20113d8:	010080b4 	movhi	r4,514
 20113dc:	213a3d44 	addi	r4,r4,-5899
 20113e0:	20c7883a 	add	r3,r4,r3
 20113e4:	18c00003 	ldbu	r3,0(r3)
 20113e8:	05400804 	movi	r21,32
 20113ec:	1885883a 	add	r2,r3,r2
 20113f0:	a8abc83a 	sub	r21,r21,r2
 20113f4:	a800621e 	bne	r21,zero,2011580 <__udivdi3+0x304>
 20113f8:	3c00e936 	bltu	r7,r16,20117a0 <__udivdi3+0x524>
 20113fc:	9985403a 	cmpgeu	r2,r19,r6
 2011400:	0007883a 	mov	r3,zero
 2011404:	00004506 	br	201151c <__udivdi3+0x2a0>
 2011408:	3000041e 	bne	r6,zero,201141c <__udivdi3+0x1a0>
 201140c:	000b883a 	mov	r5,zero
 2011410:	01000044 	movi	r4,1
 2011414:	2004a080 	call	2004a08 <__udivsi3>
 2011418:	1023883a 	mov	r17,r2
 201141c:	00bfffd4 	movui	r2,65535
 2011420:	14404e2e 	bgeu	r2,r17,201155c <__udivdi3+0x2e0>
 2011424:	00804034 	movhi	r2,256
 2011428:	10bfffc4 	addi	r2,r2,-1
 201142c:	1440d836 	bltu	r2,r17,2011790 <__udivdi3+0x514>
 2011430:	00800404 	movi	r2,16
 2011434:	8886d83a 	srl	r3,r17,r2
 2011438:	010080b4 	movhi	r4,514
 201143c:	213a3d44 	addi	r4,r4,-5899
 2011440:	20c7883a 	add	r3,r4,r3
 2011444:	18c00003 	ldbu	r3,0(r3)
 2011448:	1885883a 	add	r2,r3,r2
 201144c:	00c00804 	movi	r3,32
 2011450:	1887c83a 	sub	r3,r3,r2
 2011454:	18008f1e 	bne	r3,zero,2011694 <__udivdi3+0x418>
 2011458:	882ad43a 	srli	r21,r17,16
 201145c:	8461c83a 	sub	r16,r16,r17
 2011460:	8d3fffcc 	andi	r20,r17,65535
 2011464:	00c00044 	movi	r3,1
 2011468:	8009883a 	mov	r4,r16
 201146c:	a80b883a 	mov	r5,r21
 2011470:	d8c00015 	stw	r3,0(sp)
 2011474:	2004a6c0 	call	2004a6c <__umodsi3>
 2011478:	8009883a 	mov	r4,r16
 201147c:	a80b883a 	mov	r5,r21
 2011480:	1027883a 	mov	r19,r2
 2011484:	2004a080 	call	2004a08 <__udivsi3>
 2011488:	9826943a 	slli	r19,r19,16
 201148c:	9008d43a 	srli	r4,r18,16
 2011490:	1521383a 	mul	r16,r2,r20
 2011494:	102d883a 	mov	r22,r2
 2011498:	24c8b03a 	or	r4,r4,r19
 201149c:	d8c00017 	ldw	r3,0(sp)
 20114a0:	2400052e 	bgeu	r4,r16,20114b8 <__udivdi3+0x23c>
 20114a4:	2449883a 	add	r4,r4,r17
 20114a8:	b0bfffc4 	addi	r2,r22,-1
 20114ac:	24400136 	bltu	r4,r17,20114b4 <__udivdi3+0x238>
 20114b0:	2400ca36 	bltu	r4,r16,20117dc <__udivdi3+0x560>
 20114b4:	102d883a 	mov	r22,r2
 20114b8:	2421c83a 	sub	r16,r4,r16
 20114bc:	a80b883a 	mov	r5,r21
 20114c0:	8009883a 	mov	r4,r16
 20114c4:	d8c00015 	stw	r3,0(sp)
 20114c8:	2004a6c0 	call	2004a6c <__umodsi3>
 20114cc:	1027883a 	mov	r19,r2
 20114d0:	a80b883a 	mov	r5,r21
 20114d4:	8009883a 	mov	r4,r16
 20114d8:	2004a080 	call	2004a08 <__udivsi3>
 20114dc:	9826943a 	slli	r19,r19,16
 20114e0:	1529383a 	mul	r20,r2,r20
 20114e4:	94bfffcc 	andi	r18,r18,65535
 20114e8:	94e4b03a 	or	r18,r18,r19
 20114ec:	d8c00017 	ldw	r3,0(sp)
 20114f0:	9500052e 	bgeu	r18,r20,2011508 <__udivdi3+0x28c>
 20114f4:	8ca5883a 	add	r18,r17,r18
 20114f8:	113fffc4 	addi	r4,r2,-1
 20114fc:	94409736 	bltu	r18,r17,201175c <__udivdi3+0x4e0>
 2011500:	9500962e 	bgeu	r18,r20,201175c <__udivdi3+0x4e0>
 2011504:	10bfff84 	addi	r2,r2,-2
 2011508:	b00c943a 	slli	r6,r22,16
 201150c:	3084b03a 	or	r2,r6,r2
 2011510:	00000206 	br	201151c <__udivdi3+0x2a0>
 2011514:	0007883a 	mov	r3,zero
 2011518:	0005883a 	mov	r2,zero
 201151c:	dfc00a17 	ldw	ra,40(sp)
 2011520:	df000917 	ldw	fp,36(sp)
 2011524:	ddc00817 	ldw	r23,32(sp)
 2011528:	dd800717 	ldw	r22,28(sp)
 201152c:	dd400617 	ldw	r21,24(sp)
 2011530:	dd000517 	ldw	r20,20(sp)
 2011534:	dcc00417 	ldw	r19,16(sp)
 2011538:	dc800317 	ldw	r18,12(sp)
 201153c:	dc400217 	ldw	r17,8(sp)
 2011540:	dc000117 	ldw	r16,4(sp)
 2011544:	dec00b04 	addi	sp,sp,44
 2011548:	f800283a 	ret
 201154c:	00803fc4 	movi	r2,255
 2011550:	11c5803a 	cmpltu	r2,r2,r7
 2011554:	100490fa 	slli	r2,r2,3
 2011558:	003f9e06 	br	20113d4 <__udivdi3+0x158>
 201155c:	00803fc4 	movi	r2,255
 2011560:	1445803a 	cmpltu	r2,r2,r17
 2011564:	100490fa 	slli	r2,r2,3
 2011568:	003fb206 	br	2011434 <__udivdi3+0x1b8>
 201156c:	00804034 	movhi	r2,256
 2011570:	10bfffc4 	addi	r2,r2,-1
 2011574:	11808836 	bltu	r2,r6,2011798 <__udivdi3+0x51c>
 2011578:	00800404 	movi	r2,16
 201157c:	003f5606 	br	20112d8 <__udivdi3+0x5c>
 2011580:	30aed83a 	srl	r23,r6,r2
 2011584:	3d4e983a 	sll	r7,r7,r21
 2011588:	80acd83a 	srl	r22,r16,r2
 201158c:	9884d83a 	srl	r2,r19,r2
 2011590:	3deeb03a 	or	r23,r7,r23
 2011594:	b824d43a 	srli	r18,r23,16
 2011598:	8560983a 	sll	r16,r16,r21
 201159c:	b009883a 	mov	r4,r22
 20115a0:	900b883a 	mov	r5,r18
 20115a4:	3568983a 	sll	r20,r6,r21
 20115a8:	1420b03a 	or	r16,r2,r16
 20115ac:	2004a6c0 	call	2004a6c <__umodsi3>
 20115b0:	b009883a 	mov	r4,r22
 20115b4:	900b883a 	mov	r5,r18
 20115b8:	1023883a 	mov	r17,r2
 20115bc:	2004a080 	call	2004a08 <__udivsi3>
 20115c0:	8808943a 	slli	r4,r17,16
 20115c4:	bf3fffcc 	andi	fp,r23,65535
 20115c8:	8006d43a 	srli	r3,r16,16
 20115cc:	e0a3383a 	mul	r17,fp,r2
 20115d0:	100d883a 	mov	r6,r2
 20115d4:	1906b03a 	or	r3,r3,r4
 20115d8:	1c40042e 	bgeu	r3,r17,20115ec <__udivdi3+0x370>
 20115dc:	1dc7883a 	add	r3,r3,r23
 20115e0:	10bfffc4 	addi	r2,r2,-1
 20115e4:	1dc0752e 	bgeu	r3,r23,20117bc <__udivdi3+0x540>
 20115e8:	100d883a 	mov	r6,r2
 20115ec:	1c63c83a 	sub	r17,r3,r17
 20115f0:	900b883a 	mov	r5,r18
 20115f4:	8809883a 	mov	r4,r17
 20115f8:	d9800015 	stw	r6,0(sp)
 20115fc:	2004a6c0 	call	2004a6c <__umodsi3>
 2011600:	102d883a 	mov	r22,r2
 2011604:	8809883a 	mov	r4,r17
 2011608:	900b883a 	mov	r5,r18
 201160c:	2004a080 	call	2004a08 <__udivsi3>
 2011610:	b02c943a 	slli	r22,r22,16
 2011614:	e089383a 	mul	r4,fp,r2
 2011618:	843fffcc 	andi	r16,r16,65535
 201161c:	85a0b03a 	or	r16,r16,r22
 2011620:	d9800017 	ldw	r6,0(sp)
 2011624:	8100042e 	bgeu	r16,r4,2011638 <__udivdi3+0x3bc>
 2011628:	85e1883a 	add	r16,r16,r23
 201162c:	10ffffc4 	addi	r3,r2,-1
 2011630:	85c05e2e 	bgeu	r16,r23,20117ac <__udivdi3+0x530>
 2011634:	1805883a 	mov	r2,r3
 2011638:	300c943a 	slli	r6,r6,16
 201163c:	a17fffcc 	andi	r5,r20,65535
 2011640:	a028d43a 	srli	r20,r20,16
 2011644:	3084b03a 	or	r2,r6,r2
 2011648:	10ffffcc 	andi	r3,r2,65535
 201164c:	100cd43a 	srli	r6,r2,16
 2011650:	194f383a 	mul	r7,r3,r5
 2011654:	1d07383a 	mul	r3,r3,r20
 2011658:	314b383a 	mul	r5,r6,r5
 201165c:	3810d43a 	srli	r8,r7,16
 2011660:	8121c83a 	sub	r16,r16,r4
 2011664:	1947883a 	add	r3,r3,r5
 2011668:	40c7883a 	add	r3,r8,r3
 201166c:	350d383a 	mul	r6,r6,r20
 2011670:	1940022e 	bgeu	r3,r5,201167c <__udivdi3+0x400>
 2011674:	01000074 	movhi	r4,1
 2011678:	310d883a 	add	r6,r6,r4
 201167c:	1828d43a 	srli	r20,r3,16
 2011680:	a18d883a 	add	r6,r20,r6
 2011684:	81803e36 	bltu	r16,r6,2011780 <__udivdi3+0x504>
 2011688:	81803826 	beq	r16,r6,201176c <__udivdi3+0x4f0>
 201168c:	0007883a 	mov	r3,zero
 2011690:	003fa206 	br	201151c <__udivdi3+0x2a0>
 2011694:	88e2983a 	sll	r17,r17,r3
 2011698:	80a8d83a 	srl	r20,r16,r2
 201169c:	80e0983a 	sll	r16,r16,r3
 20116a0:	882ad43a 	srli	r21,r17,16
 20116a4:	9884d83a 	srl	r2,r19,r2
 20116a8:	a009883a 	mov	r4,r20
 20116ac:	a80b883a 	mov	r5,r21
 20116b0:	142eb03a 	or	r23,r2,r16
 20116b4:	98e4983a 	sll	r18,r19,r3
 20116b8:	2004a6c0 	call	2004a6c <__umodsi3>
 20116bc:	a009883a 	mov	r4,r20
 20116c0:	a80b883a 	mov	r5,r21
 20116c4:	1021883a 	mov	r16,r2
 20116c8:	2004a080 	call	2004a08 <__udivsi3>
 20116cc:	1039883a 	mov	fp,r2
 20116d0:	8d3fffcc 	andi	r20,r17,65535
 20116d4:	8020943a 	slli	r16,r16,16
 20116d8:	b804d43a 	srli	r2,r23,16
 20116dc:	a72d383a 	mul	r22,r20,fp
 20116e0:	1404b03a 	or	r2,r2,r16
 20116e4:	1580062e 	bgeu	r2,r22,2011700 <__udivdi3+0x484>
 20116e8:	1445883a 	add	r2,r2,r17
 20116ec:	e0ffffc4 	addi	r3,fp,-1
 20116f0:	14403836 	bltu	r2,r17,20117d4 <__udivdi3+0x558>
 20116f4:	1580372e 	bgeu	r2,r22,20117d4 <__udivdi3+0x558>
 20116f8:	e73fff84 	addi	fp,fp,-2
 20116fc:	1445883a 	add	r2,r2,r17
 2011700:	15adc83a 	sub	r22,r2,r22
 2011704:	a80b883a 	mov	r5,r21
 2011708:	b009883a 	mov	r4,r22
 201170c:	2004a6c0 	call	2004a6c <__umodsi3>
 2011710:	1027883a 	mov	r19,r2
 2011714:	b009883a 	mov	r4,r22
 2011718:	a80b883a 	mov	r5,r21
 201171c:	2004a080 	call	2004a08 <__udivsi3>
 2011720:	9826943a 	slli	r19,r19,16
 2011724:	a0a1383a 	mul	r16,r20,r2
 2011728:	b93fffcc 	andi	r4,r23,65535
 201172c:	24c8b03a 	or	r4,r4,r19
 2011730:	2400062e 	bgeu	r4,r16,201174c <__udivdi3+0x4d0>
 2011734:	2449883a 	add	r4,r4,r17
 2011738:	10ffffc4 	addi	r3,r2,-1
 201173c:	24402336 	bltu	r4,r17,20117cc <__udivdi3+0x550>
 2011740:	2400222e 	bgeu	r4,r16,20117cc <__udivdi3+0x550>
 2011744:	10bfff84 	addi	r2,r2,-2
 2011748:	2449883a 	add	r4,r4,r17
 201174c:	e038943a 	slli	fp,fp,16
 2011750:	2421c83a 	sub	r16,r4,r16
 2011754:	e086b03a 	or	r3,fp,r2
 2011758:	003f4306 	br	2011468 <__udivdi3+0x1ec>
 201175c:	2005883a 	mov	r2,r4
 2011760:	003f6906 	br	2011508 <__udivdi3+0x28c>
 2011764:	1805883a 	mov	r2,r3
 2011768:	003f0f06 	br	20113a8 <__udivdi3+0x12c>
 201176c:	1806943a 	slli	r3,r3,16
 2011770:	9d66983a 	sll	r19,r19,r21
 2011774:	39ffffcc 	andi	r7,r7,65535
 2011778:	19c7883a 	add	r3,r3,r7
 201177c:	98ffc32e 	bgeu	r19,r3,201168c <__udivdi3+0x410>
 2011780:	10bfffc4 	addi	r2,r2,-1
 2011784:	003fc106 	br	201168c <__udivdi3+0x410>
 2011788:	00800604 	movi	r2,24
 201178c:	003f1106 	br	20113d4 <__udivdi3+0x158>
 2011790:	00800604 	movi	r2,24
 2011794:	003f2706 	br	2011434 <__udivdi3+0x1b8>
 2011798:	00800604 	movi	r2,24
 201179c:	003ece06 	br	20112d8 <__udivdi3+0x5c>
 20117a0:	0007883a 	mov	r3,zero
 20117a4:	00800044 	movi	r2,1
 20117a8:	003f5c06 	br	201151c <__udivdi3+0x2a0>
 20117ac:	813fa12e 	bgeu	r16,r4,2011634 <__udivdi3+0x3b8>
 20117b0:	10bfff84 	addi	r2,r2,-2
 20117b4:	85e1883a 	add	r16,r16,r23
 20117b8:	003f9f06 	br	2011638 <__udivdi3+0x3bc>
 20117bc:	1c7f8a2e 	bgeu	r3,r17,20115e8 <__udivdi3+0x36c>
 20117c0:	31bfff84 	addi	r6,r6,-2
 20117c4:	1dc7883a 	add	r3,r3,r23
 20117c8:	003f8806 	br	20115ec <__udivdi3+0x370>
 20117cc:	1805883a 	mov	r2,r3
 20117d0:	003fde06 	br	201174c <__udivdi3+0x4d0>
 20117d4:	1839883a 	mov	fp,r3
 20117d8:	003fc906 	br	2011700 <__udivdi3+0x484>
 20117dc:	b5bfff84 	addi	r22,r22,-2
 20117e0:	2449883a 	add	r4,r4,r17
 20117e4:	003f3406 	br	20114b8 <__udivdi3+0x23c>
 20117e8:	b5bfff84 	addi	r22,r22,-2
 20117ec:	1445883a 	add	r2,r2,r17
 20117f0:	003edb06 	br	2011360 <__udivdi3+0xe4>

020117f4 <__umoddi3>:
 20117f4:	defff404 	addi	sp,sp,-48
 20117f8:	df000a15 	stw	fp,40(sp)
 20117fc:	dc400315 	stw	r17,12(sp)
 2011800:	dc000215 	stw	r16,8(sp)
 2011804:	dfc00b15 	stw	ra,44(sp)
 2011808:	ddc00915 	stw	r23,36(sp)
 201180c:	dd800815 	stw	r22,32(sp)
 2011810:	dd400715 	stw	r21,28(sp)
 2011814:	dd000615 	stw	r20,24(sp)
 2011818:	dcc00515 	stw	r19,20(sp)
 201181c:	dc800415 	stw	r18,16(sp)
 2011820:	2021883a 	mov	r16,r4
 2011824:	2823883a 	mov	r17,r5
 2011828:	2839883a 	mov	fp,r5
 201182c:	38003c1e 	bne	r7,zero,2011920 <__umoddi3+0x12c>
 2011830:	3027883a 	mov	r19,r6
 2011834:	2029883a 	mov	r20,r4
 2011838:	2980512e 	bgeu	r5,r6,2011980 <__umoddi3+0x18c>
 201183c:	00bfffd4 	movui	r2,65535
 2011840:	11809a36 	bltu	r2,r6,2011aac <__umoddi3+0x2b8>
 2011844:	01003fc4 	movi	r4,255
 2011848:	2189803a 	cmpltu	r4,r4,r6
 201184c:	200890fa 	slli	r4,r4,3
 2011850:	3104d83a 	srl	r2,r6,r4
 2011854:	00c080b4 	movhi	r3,514
 2011858:	18fa3d44 	addi	r3,r3,-5899
 201185c:	1885883a 	add	r2,r3,r2
 2011860:	10c00003 	ldbu	r3,0(r2)
 2011864:	00800804 	movi	r2,32
 2011868:	1909883a 	add	r4,r3,r4
 201186c:	1125c83a 	sub	r18,r2,r4
 2011870:	90000526 	beq	r18,zero,2011888 <__umoddi3+0x94>
 2011874:	8ca2983a 	sll	r17,r17,r18
 2011878:	8108d83a 	srl	r4,r16,r4
 201187c:	34a6983a 	sll	r19,r6,r18
 2011880:	84a8983a 	sll	r20,r16,r18
 2011884:	2478b03a 	or	fp,r4,r17
 2011888:	982ed43a 	srli	r23,r19,16
 201188c:	e009883a 	mov	r4,fp
 2011890:	9dbfffcc 	andi	r22,r19,65535
 2011894:	b80b883a 	mov	r5,r23
 2011898:	2004a6c0 	call	2004a6c <__umodsi3>
 201189c:	e009883a 	mov	r4,fp
 20118a0:	b80b883a 	mov	r5,r23
 20118a4:	102b883a 	mov	r21,r2
 20118a8:	2004a080 	call	2004a08 <__udivsi3>
 20118ac:	a806943a 	slli	r3,r21,16
 20118b0:	a008d43a 	srli	r4,r20,16
 20118b4:	b085383a 	mul	r2,r22,r2
 20118b8:	20c8b03a 	or	r4,r4,r3
 20118bc:	2080032e 	bgeu	r4,r2,20118cc <__umoddi3+0xd8>
 20118c0:	24c9883a 	add	r4,r4,r19
 20118c4:	24c00136 	bltu	r4,r19,20118cc <__umoddi3+0xd8>
 20118c8:	20811036 	bltu	r4,r2,2011d0c <__umoddi3+0x518>
 20118cc:	20abc83a 	sub	r21,r4,r2
 20118d0:	b80b883a 	mov	r5,r23
 20118d4:	a809883a 	mov	r4,r21
 20118d8:	2004a6c0 	call	2004a6c <__umodsi3>
 20118dc:	1023883a 	mov	r17,r2
 20118e0:	b80b883a 	mov	r5,r23
 20118e4:	a809883a 	mov	r4,r21
 20118e8:	2004a080 	call	2004a08 <__udivsi3>
 20118ec:	8822943a 	slli	r17,r17,16
 20118f0:	b085383a 	mul	r2,r22,r2
 20118f4:	a0ffffcc 	andi	r3,r20,65535
 20118f8:	1c46b03a 	or	r3,r3,r17
 20118fc:	1880042e 	bgeu	r3,r2,2011910 <__umoddi3+0x11c>
 2011900:	1cc7883a 	add	r3,r3,r19
 2011904:	1cc00236 	bltu	r3,r19,2011910 <__umoddi3+0x11c>
 2011908:	1880012e 	bgeu	r3,r2,2011910 <__umoddi3+0x11c>
 201190c:	1cc7883a 	add	r3,r3,r19
 2011910:	1885c83a 	sub	r2,r3,r2
 2011914:	1484d83a 	srl	r2,r2,r18
 2011918:	0007883a 	mov	r3,zero
 201191c:	00004f06 	br	2011a5c <__umoddi3+0x268>
 2011920:	29c04c36 	bltu	r5,r7,2011a54 <__umoddi3+0x260>
 2011924:	00bfffd4 	movui	r2,65535
 2011928:	11c0582e 	bgeu	r2,r7,2011a8c <__umoddi3+0x298>
 201192c:	00804034 	movhi	r2,256
 2011930:	10bfffc4 	addi	r2,r2,-1
 2011934:	11c0e736 	bltu	r2,r7,2011cd4 <__umoddi3+0x4e0>
 2011938:	01000404 	movi	r4,16
 201193c:	3904d83a 	srl	r2,r7,r4
 2011940:	00c080b4 	movhi	r3,514
 2011944:	18fa3d44 	addi	r3,r3,-5899
 2011948:	1885883a 	add	r2,r3,r2
 201194c:	14c00003 	ldbu	r19,0(r2)
 2011950:	00c00804 	movi	r3,32
 2011954:	9927883a 	add	r19,r19,r4
 2011958:	1ce9c83a 	sub	r20,r3,r19
 201195c:	a000581e 	bne	r20,zero,2011ac0 <__umoddi3+0x2cc>
 2011960:	3c400136 	bltu	r7,r17,2011968 <__umoddi3+0x174>
 2011964:	8180eb36 	bltu	r16,r6,2011d14 <__umoddi3+0x520>
 2011968:	8185c83a 	sub	r2,r16,r6
 201196c:	89e3c83a 	sub	r17,r17,r7
 2011970:	8089803a 	cmpltu	r4,r16,r2
 2011974:	8939c83a 	sub	fp,r17,r4
 2011978:	e007883a 	mov	r3,fp
 201197c:	00003706 	br	2011a5c <__umoddi3+0x268>
 2011980:	3000041e 	bne	r6,zero,2011994 <__umoddi3+0x1a0>
 2011984:	000b883a 	mov	r5,zero
 2011988:	01000044 	movi	r4,1
 201198c:	2004a080 	call	2004a08 <__udivsi3>
 2011990:	1027883a 	mov	r19,r2
 2011994:	00bfffd4 	movui	r2,65535
 2011998:	14c0402e 	bgeu	r2,r19,2011a9c <__umoddi3+0x2a8>
 201199c:	00804034 	movhi	r2,256
 20119a0:	10bfffc4 	addi	r2,r2,-1
 20119a4:	14c0cd36 	bltu	r2,r19,2011cdc <__umoddi3+0x4e8>
 20119a8:	00800404 	movi	r2,16
 20119ac:	9886d83a 	srl	r3,r19,r2
 20119b0:	010080b4 	movhi	r4,514
 20119b4:	213a3d44 	addi	r4,r4,-5899
 20119b8:	20c7883a 	add	r3,r4,r3
 20119bc:	18c00003 	ldbu	r3,0(r3)
 20119c0:	1887883a 	add	r3,r3,r2
 20119c4:	00800804 	movi	r2,32
 20119c8:	10e5c83a 	sub	r18,r2,r3
 20119cc:	9000901e 	bne	r18,zero,2011c10 <__umoddi3+0x41c>
 20119d0:	982cd43a 	srli	r22,r19,16
 20119d4:	8ce3c83a 	sub	r17,r17,r19
 20119d8:	9d7fffcc 	andi	r21,r19,65535
 20119dc:	b00b883a 	mov	r5,r22
 20119e0:	8809883a 	mov	r4,r17
 20119e4:	2004a6c0 	call	2004a6c <__umodsi3>
 20119e8:	8809883a 	mov	r4,r17
 20119ec:	b00b883a 	mov	r5,r22
 20119f0:	1021883a 	mov	r16,r2
 20119f4:	2004a080 	call	2004a08 <__udivsi3>
 20119f8:	8006943a 	slli	r3,r16,16
 20119fc:	a008d43a 	srli	r4,r20,16
 2011a00:	1545383a 	mul	r2,r2,r21
 2011a04:	20c8b03a 	or	r4,r4,r3
 2011a08:	2080042e 	bgeu	r4,r2,2011a1c <__umoddi3+0x228>
 2011a0c:	24c9883a 	add	r4,r4,r19
 2011a10:	24c00236 	bltu	r4,r19,2011a1c <__umoddi3+0x228>
 2011a14:	2080012e 	bgeu	r4,r2,2011a1c <__umoddi3+0x228>
 2011a18:	24c9883a 	add	r4,r4,r19
 2011a1c:	20a1c83a 	sub	r16,r4,r2
 2011a20:	b00b883a 	mov	r5,r22
 2011a24:	8009883a 	mov	r4,r16
 2011a28:	2004a6c0 	call	2004a6c <__umodsi3>
 2011a2c:	1023883a 	mov	r17,r2
 2011a30:	b00b883a 	mov	r5,r22
 2011a34:	8009883a 	mov	r4,r16
 2011a38:	2004a080 	call	2004a08 <__udivsi3>
 2011a3c:	8822943a 	slli	r17,r17,16
 2011a40:	1545383a 	mul	r2,r2,r21
 2011a44:	a53fffcc 	andi	r20,r20,65535
 2011a48:	a446b03a 	or	r3,r20,r17
 2011a4c:	18bfb02e 	bgeu	r3,r2,2011910 <__umoddi3+0x11c>
 2011a50:	003fab06 	br	2011900 <__umoddi3+0x10c>
 2011a54:	2005883a 	mov	r2,r4
 2011a58:	2807883a 	mov	r3,r5
 2011a5c:	dfc00b17 	ldw	ra,44(sp)
 2011a60:	df000a17 	ldw	fp,40(sp)
 2011a64:	ddc00917 	ldw	r23,36(sp)
 2011a68:	dd800817 	ldw	r22,32(sp)
 2011a6c:	dd400717 	ldw	r21,28(sp)
 2011a70:	dd000617 	ldw	r20,24(sp)
 2011a74:	dcc00517 	ldw	r19,20(sp)
 2011a78:	dc800417 	ldw	r18,16(sp)
 2011a7c:	dc400317 	ldw	r17,12(sp)
 2011a80:	dc000217 	ldw	r16,8(sp)
 2011a84:	dec00c04 	addi	sp,sp,48
 2011a88:	f800283a 	ret
 2011a8c:	04c03fc4 	movi	r19,255
 2011a90:	99c9803a 	cmpltu	r4,r19,r7
 2011a94:	200890fa 	slli	r4,r4,3
 2011a98:	003fa806 	br	201193c <__umoddi3+0x148>
 2011a9c:	00803fc4 	movi	r2,255
 2011aa0:	14c5803a 	cmpltu	r2,r2,r19
 2011aa4:	100490fa 	slli	r2,r2,3
 2011aa8:	003fc006 	br	20119ac <__umoddi3+0x1b8>
 2011aac:	00804034 	movhi	r2,256
 2011ab0:	10bfffc4 	addi	r2,r2,-1
 2011ab4:	11808b36 	bltu	r2,r6,2011ce4 <__umoddi3+0x4f0>
 2011ab8:	01000404 	movi	r4,16
 2011abc:	003f6406 	br	2011850 <__umoddi3+0x5c>
 2011ac0:	34c4d83a 	srl	r2,r6,r19
 2011ac4:	3d0e983a 	sll	r7,r7,r20
 2011ac8:	8cf8d83a 	srl	fp,r17,r19
 2011acc:	8d10983a 	sll	r8,r17,r20
 2011ad0:	38aab03a 	or	r21,r7,r2
 2011ad4:	a82cd43a 	srli	r22,r21,16
 2011ad8:	84e2d83a 	srl	r17,r16,r19
 2011adc:	e009883a 	mov	r4,fp
 2011ae0:	b00b883a 	mov	r5,r22
 2011ae4:	8a22b03a 	or	r17,r17,r8
 2011ae8:	3524983a 	sll	r18,r6,r20
 2011aec:	2004a6c0 	call	2004a6c <__umodsi3>
 2011af0:	e009883a 	mov	r4,fp
 2011af4:	b00b883a 	mov	r5,r22
 2011af8:	102f883a 	mov	r23,r2
 2011afc:	2004a080 	call	2004a08 <__udivsi3>
 2011b00:	100d883a 	mov	r6,r2
 2011b04:	b808943a 	slli	r4,r23,16
 2011b08:	aa3fffcc 	andi	r8,r21,65535
 2011b0c:	8804d43a 	srli	r2,r17,16
 2011b10:	41af383a 	mul	r23,r8,r6
 2011b14:	8520983a 	sll	r16,r16,r20
 2011b18:	1104b03a 	or	r2,r2,r4
 2011b1c:	15c0042e 	bgeu	r2,r23,2011b30 <__umoddi3+0x33c>
 2011b20:	1545883a 	add	r2,r2,r21
 2011b24:	30ffffc4 	addi	r3,r6,-1
 2011b28:	1540742e 	bgeu	r2,r21,2011cfc <__umoddi3+0x508>
 2011b2c:	180d883a 	mov	r6,r3
 2011b30:	15efc83a 	sub	r23,r2,r23
 2011b34:	b00b883a 	mov	r5,r22
 2011b38:	b809883a 	mov	r4,r23
 2011b3c:	d9800115 	stw	r6,4(sp)
 2011b40:	da000015 	stw	r8,0(sp)
 2011b44:	2004a6c0 	call	2004a6c <__umodsi3>
 2011b48:	b00b883a 	mov	r5,r22
 2011b4c:	b809883a 	mov	r4,r23
 2011b50:	1039883a 	mov	fp,r2
 2011b54:	2004a080 	call	2004a08 <__udivsi3>
 2011b58:	da000017 	ldw	r8,0(sp)
 2011b5c:	e038943a 	slli	fp,fp,16
 2011b60:	100b883a 	mov	r5,r2
 2011b64:	4089383a 	mul	r4,r8,r2
 2011b68:	8a3fffcc 	andi	r8,r17,65535
 2011b6c:	4710b03a 	or	r8,r8,fp
 2011b70:	d9800117 	ldw	r6,4(sp)
 2011b74:	4100042e 	bgeu	r8,r4,2011b88 <__umoddi3+0x394>
 2011b78:	4551883a 	add	r8,r8,r21
 2011b7c:	10bfffc4 	addi	r2,r2,-1
 2011b80:	45405a2e 	bgeu	r8,r21,2011cec <__umoddi3+0x4f8>
 2011b84:	100b883a 	mov	r5,r2
 2011b88:	300c943a 	slli	r6,r6,16
 2011b8c:	91ffffcc 	andi	r7,r18,65535
 2011b90:	9004d43a 	srli	r2,r18,16
 2011b94:	314cb03a 	or	r6,r6,r5
 2011b98:	317fffcc 	andi	r5,r6,65535
 2011b9c:	300cd43a 	srli	r6,r6,16
 2011ba0:	29d3383a 	mul	r9,r5,r7
 2011ba4:	288b383a 	mul	r5,r5,r2
 2011ba8:	31cf383a 	mul	r7,r6,r7
 2011bac:	4806d43a 	srli	r3,r9,16
 2011bb0:	4111c83a 	sub	r8,r8,r4
 2011bb4:	29cb883a 	add	r5,r5,r7
 2011bb8:	194b883a 	add	r5,r3,r5
 2011bbc:	3085383a 	mul	r2,r6,r2
 2011bc0:	29c0022e 	bgeu	r5,r7,2011bcc <__umoddi3+0x3d8>
 2011bc4:	00c00074 	movhi	r3,1
 2011bc8:	10c5883a 	add	r2,r2,r3
 2011bcc:	2808d43a 	srli	r4,r5,16
 2011bd0:	280a943a 	slli	r5,r5,16
 2011bd4:	4a7fffcc 	andi	r9,r9,65535
 2011bd8:	2085883a 	add	r2,r4,r2
 2011bdc:	2a4b883a 	add	r5,r5,r9
 2011be0:	40803636 	bltu	r8,r2,2011cbc <__umoddi3+0x4c8>
 2011be4:	40804d26 	beq	r8,r2,2011d1c <__umoddi3+0x528>
 2011be8:	4089c83a 	sub	r4,r8,r2
 2011bec:	280f883a 	mov	r7,r5
 2011bf0:	81cfc83a 	sub	r7,r16,r7
 2011bf4:	81c7803a 	cmpltu	r3,r16,r7
 2011bf8:	20c7c83a 	sub	r3,r4,r3
 2011bfc:	1cc4983a 	sll	r2,r3,r19
 2011c00:	3d0ed83a 	srl	r7,r7,r20
 2011c04:	1d06d83a 	srl	r3,r3,r20
 2011c08:	11c4b03a 	or	r2,r2,r7
 2011c0c:	003f9306 	br	2011a5c <__umoddi3+0x268>
 2011c10:	9ca6983a 	sll	r19,r19,r18
 2011c14:	88e8d83a 	srl	r20,r17,r3
 2011c18:	80c4d83a 	srl	r2,r16,r3
 2011c1c:	982cd43a 	srli	r22,r19,16
 2011c20:	8ca2983a 	sll	r17,r17,r18
 2011c24:	a009883a 	mov	r4,r20
 2011c28:	b00b883a 	mov	r5,r22
 2011c2c:	1478b03a 	or	fp,r2,r17
 2011c30:	2004a6c0 	call	2004a6c <__umodsi3>
 2011c34:	a009883a 	mov	r4,r20
 2011c38:	b00b883a 	mov	r5,r22
 2011c3c:	1023883a 	mov	r17,r2
 2011c40:	2004a080 	call	2004a08 <__udivsi3>
 2011c44:	9d7fffcc 	andi	r21,r19,65535
 2011c48:	880a943a 	slli	r5,r17,16
 2011c4c:	e008d43a 	srli	r4,fp,16
 2011c50:	a885383a 	mul	r2,r21,r2
 2011c54:	84a8983a 	sll	r20,r16,r18
 2011c58:	2148b03a 	or	r4,r4,r5
 2011c5c:	2080042e 	bgeu	r4,r2,2011c70 <__umoddi3+0x47c>
 2011c60:	24c9883a 	add	r4,r4,r19
 2011c64:	24c00236 	bltu	r4,r19,2011c70 <__umoddi3+0x47c>
 2011c68:	2080012e 	bgeu	r4,r2,2011c70 <__umoddi3+0x47c>
 2011c6c:	24c9883a 	add	r4,r4,r19
 2011c70:	20a3c83a 	sub	r17,r4,r2
 2011c74:	b00b883a 	mov	r5,r22
 2011c78:	8809883a 	mov	r4,r17
 2011c7c:	2004a6c0 	call	2004a6c <__umodsi3>
 2011c80:	102f883a 	mov	r23,r2
 2011c84:	8809883a 	mov	r4,r17
 2011c88:	b00b883a 	mov	r5,r22
 2011c8c:	2004a080 	call	2004a08 <__udivsi3>
 2011c90:	b82e943a 	slli	r23,r23,16
 2011c94:	a885383a 	mul	r2,r21,r2
 2011c98:	e13fffcc 	andi	r4,fp,65535
 2011c9c:	25c8b03a 	or	r4,r4,r23
 2011ca0:	2080042e 	bgeu	r4,r2,2011cb4 <__umoddi3+0x4c0>
 2011ca4:	24c9883a 	add	r4,r4,r19
 2011ca8:	24c00236 	bltu	r4,r19,2011cb4 <__umoddi3+0x4c0>
 2011cac:	2080012e 	bgeu	r4,r2,2011cb4 <__umoddi3+0x4c0>
 2011cb0:	24c9883a 	add	r4,r4,r19
 2011cb4:	20a3c83a 	sub	r17,r4,r2
 2011cb8:	003f4806 	br	20119dc <__umoddi3+0x1e8>
 2011cbc:	2c8fc83a 	sub	r7,r5,r18
 2011cc0:	1545c83a 	sub	r2,r2,r21
 2011cc4:	29cb803a 	cmpltu	r5,r5,r7
 2011cc8:	1145c83a 	sub	r2,r2,r5
 2011ccc:	4089c83a 	sub	r4,r8,r2
 2011cd0:	003fc706 	br	2011bf0 <__umoddi3+0x3fc>
 2011cd4:	01000604 	movi	r4,24
 2011cd8:	003f1806 	br	201193c <__umoddi3+0x148>
 2011cdc:	00800604 	movi	r2,24
 2011ce0:	003f3206 	br	20119ac <__umoddi3+0x1b8>
 2011ce4:	01000604 	movi	r4,24
 2011ce8:	003ed906 	br	2011850 <__umoddi3+0x5c>
 2011cec:	413fa52e 	bgeu	r8,r4,2011b84 <__umoddi3+0x390>
 2011cf0:	297fff84 	addi	r5,r5,-2
 2011cf4:	4551883a 	add	r8,r8,r21
 2011cf8:	003fa306 	br	2011b88 <__umoddi3+0x394>
 2011cfc:	15ff8b2e 	bgeu	r2,r23,2011b2c <__umoddi3+0x338>
 2011d00:	31bfff84 	addi	r6,r6,-2
 2011d04:	1545883a 	add	r2,r2,r21
 2011d08:	003f8906 	br	2011b30 <__umoddi3+0x33c>
 2011d0c:	24c9883a 	add	r4,r4,r19
 2011d10:	003eee06 	br	20118cc <__umoddi3+0xd8>
 2011d14:	8005883a 	mov	r2,r16
 2011d18:	003f1706 	br	2011978 <__umoddi3+0x184>
 2011d1c:	817fe736 	bltu	r16,r5,2011cbc <__umoddi3+0x4c8>
 2011d20:	280f883a 	mov	r7,r5
 2011d24:	0009883a 	mov	r4,zero
 2011d28:	003fb106 	br	2011bf0 <__umoddi3+0x3fc>

02011d2c <__adddf3>:
 2011d2c:	02c00434 	movhi	r11,16
 2011d30:	5affffc4 	addi	r11,r11,-1
 2011d34:	2806d7fa 	srli	r3,r5,31
 2011d38:	2ad4703a 	and	r10,r5,r11
 2011d3c:	3ad2703a 	and	r9,r7,r11
 2011d40:	3804d53a 	srli	r2,r7,20
 2011d44:	3018d77a 	srli	r12,r6,29
 2011d48:	280ad53a 	srli	r5,r5,20
 2011d4c:	501490fa 	slli	r10,r10,3
 2011d50:	2010d77a 	srli	r8,r4,29
 2011d54:	481290fa 	slli	r9,r9,3
 2011d58:	380ed7fa 	srli	r7,r7,31
 2011d5c:	defffb04 	addi	sp,sp,-20
 2011d60:	dc800215 	stw	r18,8(sp)
 2011d64:	dc400115 	stw	r17,4(sp)
 2011d68:	dc000015 	stw	r16,0(sp)
 2011d6c:	dfc00415 	stw	ra,16(sp)
 2011d70:	dcc00315 	stw	r19,12(sp)
 2011d74:	1c803fcc 	andi	r18,r3,255
 2011d78:	2c01ffcc 	andi	r16,r5,2047
 2011d7c:	5210b03a 	or	r8,r10,r8
 2011d80:	202290fa 	slli	r17,r4,3
 2011d84:	1081ffcc 	andi	r2,r2,2047
 2011d88:	4b12b03a 	or	r9,r9,r12
 2011d8c:	300c90fa 	slli	r6,r6,3
 2011d90:	91c07526 	beq	r18,r7,2011f68 <__adddf3+0x23c>
 2011d94:	8087c83a 	sub	r3,r16,r2
 2011d98:	00c0ab0e 	bge	zero,r3,2012048 <__adddf3+0x31c>
 2011d9c:	10002a1e 	bne	r2,zero,2011e48 <__adddf3+0x11c>
 2011da0:	4984b03a 	or	r2,r9,r6
 2011da4:	1000961e 	bne	r2,zero,2012000 <__adddf3+0x2d4>
 2011da8:	888001cc 	andi	r2,r17,7
 2011dac:	10000726 	beq	r2,zero,2011dcc <__adddf3+0xa0>
 2011db0:	888003cc 	andi	r2,r17,15
 2011db4:	00c00104 	movi	r3,4
 2011db8:	10c00426 	beq	r2,r3,2011dcc <__adddf3+0xa0>
 2011dbc:	88c7883a 	add	r3,r17,r3
 2011dc0:	1c63803a 	cmpltu	r17,r3,r17
 2011dc4:	4451883a 	add	r8,r8,r17
 2011dc8:	1823883a 	mov	r17,r3
 2011dcc:	4080202c 	andhi	r2,r8,128
 2011dd0:	10005926 	beq	r2,zero,2011f38 <__adddf3+0x20c>
 2011dd4:	84000044 	addi	r16,r16,1
 2011dd8:	0081ffc4 	movi	r2,2047
 2011ddc:	8080ba26 	beq	r16,r2,20120c8 <__adddf3+0x39c>
 2011de0:	00bfe034 	movhi	r2,65408
 2011de4:	10bfffc4 	addi	r2,r2,-1
 2011de8:	4090703a 	and	r8,r8,r2
 2011dec:	4004977a 	slli	r2,r8,29
 2011df0:	4010927a 	slli	r8,r8,9
 2011df4:	8822d0fa 	srli	r17,r17,3
 2011df8:	8401ffcc 	andi	r16,r16,2047
 2011dfc:	4010d33a 	srli	r8,r8,12
 2011e00:	9007883a 	mov	r3,r18
 2011e04:	1444b03a 	or	r2,r2,r17
 2011e08:	8401ffcc 	andi	r16,r16,2047
 2011e0c:	8020953a 	slli	r16,r16,20
 2011e10:	18c03fcc 	andi	r3,r3,255
 2011e14:	01000434 	movhi	r4,16
 2011e18:	213fffc4 	addi	r4,r4,-1
 2011e1c:	180697fa 	slli	r3,r3,31
 2011e20:	4110703a 	and	r8,r8,r4
 2011e24:	4410b03a 	or	r8,r8,r16
 2011e28:	40c6b03a 	or	r3,r8,r3
 2011e2c:	dfc00417 	ldw	ra,16(sp)
 2011e30:	dcc00317 	ldw	r19,12(sp)
 2011e34:	dc800217 	ldw	r18,8(sp)
 2011e38:	dc400117 	ldw	r17,4(sp)
 2011e3c:	dc000017 	ldw	r16,0(sp)
 2011e40:	dec00504 	addi	sp,sp,20
 2011e44:	f800283a 	ret
 2011e48:	0081ffc4 	movi	r2,2047
 2011e4c:	80bfd626 	beq	r16,r2,2011da8 <__adddf3+0x7c>
 2011e50:	4a402034 	orhi	r9,r9,128
 2011e54:	00800e04 	movi	r2,56
 2011e58:	10c09f16 	blt	r2,r3,20120d8 <__adddf3+0x3ac>
 2011e5c:	008007c4 	movi	r2,31
 2011e60:	10c0c216 	blt	r2,r3,201216c <__adddf3+0x440>
 2011e64:	00800804 	movi	r2,32
 2011e68:	10c5c83a 	sub	r2,r2,r3
 2011e6c:	488a983a 	sll	r5,r9,r2
 2011e70:	30c8d83a 	srl	r4,r6,r3
 2011e74:	3084983a 	sll	r2,r6,r2
 2011e78:	48c6d83a 	srl	r3,r9,r3
 2011e7c:	290cb03a 	or	r6,r5,r4
 2011e80:	1004c03a 	cmpne	r2,r2,zero
 2011e84:	308cb03a 	or	r6,r6,r2
 2011e88:	898dc83a 	sub	r6,r17,r6
 2011e8c:	89a3803a 	cmpltu	r17,r17,r6
 2011e90:	40d1c83a 	sub	r8,r8,r3
 2011e94:	4451c83a 	sub	r8,r8,r17
 2011e98:	3023883a 	mov	r17,r6
 2011e9c:	4080202c 	andhi	r2,r8,128
 2011ea0:	10002326 	beq	r2,zero,2011f30 <__adddf3+0x204>
 2011ea4:	04c02034 	movhi	r19,128
 2011ea8:	9cffffc4 	addi	r19,r19,-1
 2011eac:	44e6703a 	and	r19,r8,r19
 2011eb0:	98007626 	beq	r19,zero,201208c <__adddf3+0x360>
 2011eb4:	9809883a 	mov	r4,r19
 2011eb8:	20048ac0 	call	20048ac <__clzsi2>
 2011ebc:	10fffe04 	addi	r3,r2,-8
 2011ec0:	010007c4 	movi	r4,31
 2011ec4:	20c07716 	blt	r4,r3,20120a4 <__adddf3+0x378>
 2011ec8:	00800804 	movi	r2,32
 2011ecc:	10c5c83a 	sub	r2,r2,r3
 2011ed0:	8884d83a 	srl	r2,r17,r2
 2011ed4:	98d0983a 	sll	r8,r19,r3
 2011ed8:	88e2983a 	sll	r17,r17,r3
 2011edc:	1204b03a 	or	r2,r2,r8
 2011ee0:	1c007416 	blt	r3,r16,20120b4 <__adddf3+0x388>
 2011ee4:	1c21c83a 	sub	r16,r3,r16
 2011ee8:	82000044 	addi	r8,r16,1
 2011eec:	00c007c4 	movi	r3,31
 2011ef0:	1a009116 	blt	r3,r8,2012138 <__adddf3+0x40c>
 2011ef4:	00c00804 	movi	r3,32
 2011ef8:	1a07c83a 	sub	r3,r3,r8
 2011efc:	8a08d83a 	srl	r4,r17,r8
 2011f00:	88e2983a 	sll	r17,r17,r3
 2011f04:	10c6983a 	sll	r3,r2,r3
 2011f08:	1210d83a 	srl	r8,r2,r8
 2011f0c:	8804c03a 	cmpne	r2,r17,zero
 2011f10:	1906b03a 	or	r3,r3,r4
 2011f14:	18a2b03a 	or	r17,r3,r2
 2011f18:	0021883a 	mov	r16,zero
 2011f1c:	003fa206 	br	2011da8 <__adddf3+0x7c>
 2011f20:	1890b03a 	or	r8,r3,r2
 2011f24:	40017d26 	beq	r8,zero,201251c <__adddf3+0x7f0>
 2011f28:	1011883a 	mov	r8,r2
 2011f2c:	1823883a 	mov	r17,r3
 2011f30:	888001cc 	andi	r2,r17,7
 2011f34:	103f9e1e 	bne	r2,zero,2011db0 <__adddf3+0x84>
 2011f38:	4004977a 	slli	r2,r8,29
 2011f3c:	8822d0fa 	srli	r17,r17,3
 2011f40:	4010d0fa 	srli	r8,r8,3
 2011f44:	9007883a 	mov	r3,r18
 2011f48:	1444b03a 	or	r2,r2,r17
 2011f4c:	0101ffc4 	movi	r4,2047
 2011f50:	81002426 	beq	r16,r4,2011fe4 <__adddf3+0x2b8>
 2011f54:	8120703a 	and	r16,r16,r4
 2011f58:	01000434 	movhi	r4,16
 2011f5c:	213fffc4 	addi	r4,r4,-1
 2011f60:	4110703a 	and	r8,r8,r4
 2011f64:	003fa806 	br	2011e08 <__adddf3+0xdc>
 2011f68:	8089c83a 	sub	r4,r16,r2
 2011f6c:	01005e0e 	bge	zero,r4,20120e8 <__adddf3+0x3bc>
 2011f70:	10002b26 	beq	r2,zero,2012020 <__adddf3+0x2f4>
 2011f74:	0081ffc4 	movi	r2,2047
 2011f78:	80bf8b26 	beq	r16,r2,2011da8 <__adddf3+0x7c>
 2011f7c:	4a402034 	orhi	r9,r9,128
 2011f80:	00800e04 	movi	r2,56
 2011f84:	1100a40e 	bge	r2,r4,2012218 <__adddf3+0x4ec>
 2011f88:	498cb03a 	or	r6,r9,r6
 2011f8c:	300ac03a 	cmpne	r5,r6,zero
 2011f90:	0013883a 	mov	r9,zero
 2011f94:	2c4b883a 	add	r5,r5,r17
 2011f98:	2c63803a 	cmpltu	r17,r5,r17
 2011f9c:	4a11883a 	add	r8,r9,r8
 2011fa0:	8a11883a 	add	r8,r17,r8
 2011fa4:	2823883a 	mov	r17,r5
 2011fa8:	4080202c 	andhi	r2,r8,128
 2011fac:	103fe026 	beq	r2,zero,2011f30 <__adddf3+0x204>
 2011fb0:	84000044 	addi	r16,r16,1
 2011fb4:	0081ffc4 	movi	r2,2047
 2011fb8:	8080d226 	beq	r16,r2,2012304 <__adddf3+0x5d8>
 2011fbc:	00bfe034 	movhi	r2,65408
 2011fc0:	10bfffc4 	addi	r2,r2,-1
 2011fc4:	4090703a 	and	r8,r8,r2
 2011fc8:	880ad07a 	srli	r5,r17,1
 2011fcc:	400897fa 	slli	r4,r8,31
 2011fd0:	88c0004c 	andi	r3,r17,1
 2011fd4:	28e2b03a 	or	r17,r5,r3
 2011fd8:	4010d07a 	srli	r8,r8,1
 2011fdc:	2462b03a 	or	r17,r4,r17
 2011fe0:	003f7106 	br	2011da8 <__adddf3+0x7c>
 2011fe4:	4088b03a 	or	r4,r8,r2
 2011fe8:	20014526 	beq	r4,zero,2012500 <__adddf3+0x7d4>
 2011fec:	01000434 	movhi	r4,16
 2011ff0:	42000234 	orhi	r8,r8,8
 2011ff4:	213fffc4 	addi	r4,r4,-1
 2011ff8:	4110703a 	and	r8,r8,r4
 2011ffc:	003f8206 	br	2011e08 <__adddf3+0xdc>
 2012000:	18ffffc4 	addi	r3,r3,-1
 2012004:	1800491e 	bne	r3,zero,201212c <__adddf3+0x400>
 2012008:	898bc83a 	sub	r5,r17,r6
 201200c:	8963803a 	cmpltu	r17,r17,r5
 2012010:	4251c83a 	sub	r8,r8,r9
 2012014:	4451c83a 	sub	r8,r8,r17
 2012018:	2823883a 	mov	r17,r5
 201201c:	003f9f06 	br	2011e9c <__adddf3+0x170>
 2012020:	4984b03a 	or	r2,r9,r6
 2012024:	103f6026 	beq	r2,zero,2011da8 <__adddf3+0x7c>
 2012028:	213fffc4 	addi	r4,r4,-1
 201202c:	2000931e 	bne	r4,zero,201227c <__adddf3+0x550>
 2012030:	898d883a 	add	r6,r17,r6
 2012034:	3463803a 	cmpltu	r17,r6,r17
 2012038:	4251883a 	add	r8,r8,r9
 201203c:	8a11883a 	add	r8,r17,r8
 2012040:	3023883a 	mov	r17,r6
 2012044:	003fd806 	br	2011fa8 <__adddf3+0x27c>
 2012048:	1800541e 	bne	r3,zero,201219c <__adddf3+0x470>
 201204c:	80800044 	addi	r2,r16,1
 2012050:	1081ffcc 	andi	r2,r2,2047
 2012054:	00c00044 	movi	r3,1
 2012058:	1880a00e 	bge	r3,r2,20122dc <__adddf3+0x5b0>
 201205c:	8989c83a 	sub	r4,r17,r6
 2012060:	8905803a 	cmpltu	r2,r17,r4
 2012064:	4267c83a 	sub	r19,r8,r9
 2012068:	98a7c83a 	sub	r19,r19,r2
 201206c:	9880202c 	andhi	r2,r19,128
 2012070:	10006326 	beq	r2,zero,2012200 <__adddf3+0x4d4>
 2012074:	3463c83a 	sub	r17,r6,r17
 2012078:	4a07c83a 	sub	r3,r9,r8
 201207c:	344d803a 	cmpltu	r6,r6,r17
 2012080:	19a7c83a 	sub	r19,r3,r6
 2012084:	3825883a 	mov	r18,r7
 2012088:	983f8a1e 	bne	r19,zero,2011eb4 <__adddf3+0x188>
 201208c:	8809883a 	mov	r4,r17
 2012090:	20048ac0 	call	20048ac <__clzsi2>
 2012094:	10800804 	addi	r2,r2,32
 2012098:	10fffe04 	addi	r3,r2,-8
 201209c:	010007c4 	movi	r4,31
 20120a0:	20ff890e 	bge	r4,r3,2011ec8 <__adddf3+0x19c>
 20120a4:	10bff604 	addi	r2,r2,-40
 20120a8:	8884983a 	sll	r2,r17,r2
 20120ac:	0023883a 	mov	r17,zero
 20120b0:	1c3f8c0e 	bge	r3,r16,2011ee4 <__adddf3+0x1b8>
 20120b4:	023fe034 	movhi	r8,65408
 20120b8:	423fffc4 	addi	r8,r8,-1
 20120bc:	80e1c83a 	sub	r16,r16,r3
 20120c0:	1210703a 	and	r8,r2,r8
 20120c4:	003f3806 	br	2011da8 <__adddf3+0x7c>
 20120c8:	9007883a 	mov	r3,r18
 20120cc:	0011883a 	mov	r8,zero
 20120d0:	0005883a 	mov	r2,zero
 20120d4:	003f4c06 	br	2011e08 <__adddf3+0xdc>
 20120d8:	498cb03a 	or	r6,r9,r6
 20120dc:	300cc03a 	cmpne	r6,r6,zero
 20120e0:	0007883a 	mov	r3,zero
 20120e4:	003f6806 	br	2011e88 <__adddf3+0x15c>
 20120e8:	20009c1e 	bne	r4,zero,201235c <__adddf3+0x630>
 20120ec:	80800044 	addi	r2,r16,1
 20120f0:	1141ffcc 	andi	r5,r2,2047
 20120f4:	01000044 	movi	r4,1
 20120f8:	2140670e 	bge	r4,r5,2012298 <__adddf3+0x56c>
 20120fc:	0101ffc4 	movi	r4,2047
 2012100:	11007f26 	beq	r2,r4,2012300 <__adddf3+0x5d4>
 2012104:	898d883a 	add	r6,r17,r6
 2012108:	4247883a 	add	r3,r8,r9
 201210c:	3451803a 	cmpltu	r8,r6,r17
 2012110:	40d1883a 	add	r8,r8,r3
 2012114:	402297fa 	slli	r17,r8,31
 2012118:	300cd07a 	srli	r6,r6,1
 201211c:	4010d07a 	srli	r8,r8,1
 2012120:	1021883a 	mov	r16,r2
 2012124:	89a2b03a 	or	r17,r17,r6
 2012128:	003f1f06 	br	2011da8 <__adddf3+0x7c>
 201212c:	0081ffc4 	movi	r2,2047
 2012130:	80bf481e 	bne	r16,r2,2011e54 <__adddf3+0x128>
 2012134:	003f1c06 	br	2011da8 <__adddf3+0x7c>
 2012138:	843ff844 	addi	r16,r16,-31
 201213c:	01000804 	movi	r4,32
 2012140:	1406d83a 	srl	r3,r2,r16
 2012144:	41005026 	beq	r8,r4,2012288 <__adddf3+0x55c>
 2012148:	01001004 	movi	r4,64
 201214c:	2211c83a 	sub	r8,r4,r8
 2012150:	1204983a 	sll	r2,r2,r8
 2012154:	88a2b03a 	or	r17,r17,r2
 2012158:	8822c03a 	cmpne	r17,r17,zero
 201215c:	1c62b03a 	or	r17,r3,r17
 2012160:	0011883a 	mov	r8,zero
 2012164:	0021883a 	mov	r16,zero
 2012168:	003f7106 	br	2011f30 <__adddf3+0x204>
 201216c:	193ff804 	addi	r4,r3,-32
 2012170:	00800804 	movi	r2,32
 2012174:	4908d83a 	srl	r4,r9,r4
 2012178:	18804526 	beq	r3,r2,2012290 <__adddf3+0x564>
 201217c:	00801004 	movi	r2,64
 2012180:	10c5c83a 	sub	r2,r2,r3
 2012184:	4886983a 	sll	r3,r9,r2
 2012188:	198cb03a 	or	r6,r3,r6
 201218c:	300cc03a 	cmpne	r6,r6,zero
 2012190:	218cb03a 	or	r6,r4,r6
 2012194:	0007883a 	mov	r3,zero
 2012198:	003f3b06 	br	2011e88 <__adddf3+0x15c>
 201219c:	80002a26 	beq	r16,zero,2012248 <__adddf3+0x51c>
 20121a0:	0101ffc4 	movi	r4,2047
 20121a4:	11006826 	beq	r2,r4,2012348 <__adddf3+0x61c>
 20121a8:	00c7c83a 	sub	r3,zero,r3
 20121ac:	42002034 	orhi	r8,r8,128
 20121b0:	01000e04 	movi	r4,56
 20121b4:	20c07c16 	blt	r4,r3,20123a8 <__adddf3+0x67c>
 20121b8:	010007c4 	movi	r4,31
 20121bc:	20c0da16 	blt	r4,r3,2012528 <__adddf3+0x7fc>
 20121c0:	01000804 	movi	r4,32
 20121c4:	20c9c83a 	sub	r4,r4,r3
 20121c8:	4114983a 	sll	r10,r8,r4
 20121cc:	88cad83a 	srl	r5,r17,r3
 20121d0:	8908983a 	sll	r4,r17,r4
 20121d4:	40c6d83a 	srl	r3,r8,r3
 20121d8:	5162b03a 	or	r17,r10,r5
 20121dc:	2008c03a 	cmpne	r4,r4,zero
 20121e0:	8922b03a 	or	r17,r17,r4
 20121e4:	3463c83a 	sub	r17,r6,r17
 20121e8:	48c7c83a 	sub	r3,r9,r3
 20121ec:	344d803a 	cmpltu	r6,r6,r17
 20121f0:	1991c83a 	sub	r8,r3,r6
 20121f4:	1021883a 	mov	r16,r2
 20121f8:	3825883a 	mov	r18,r7
 20121fc:	003f2706 	br	2011e9c <__adddf3+0x170>
 2012200:	24d0b03a 	or	r8,r4,r19
 2012204:	40001b1e 	bne	r8,zero,2012274 <__adddf3+0x548>
 2012208:	0005883a 	mov	r2,zero
 201220c:	0007883a 	mov	r3,zero
 2012210:	0021883a 	mov	r16,zero
 2012214:	003f4d06 	br	2011f4c <__adddf3+0x220>
 2012218:	008007c4 	movi	r2,31
 201221c:	11003c16 	blt	r2,r4,2012310 <__adddf3+0x5e4>
 2012220:	00800804 	movi	r2,32
 2012224:	1105c83a 	sub	r2,r2,r4
 2012228:	488e983a 	sll	r7,r9,r2
 201222c:	310ad83a 	srl	r5,r6,r4
 2012230:	3084983a 	sll	r2,r6,r2
 2012234:	4912d83a 	srl	r9,r9,r4
 2012238:	394ab03a 	or	r5,r7,r5
 201223c:	1004c03a 	cmpne	r2,r2,zero
 2012240:	288ab03a 	or	r5,r5,r2
 2012244:	003f5306 	br	2011f94 <__adddf3+0x268>
 2012248:	4448b03a 	or	r4,r8,r17
 201224c:	20003e26 	beq	r4,zero,2012348 <__adddf3+0x61c>
 2012250:	00c6303a 	nor	r3,zero,r3
 2012254:	18003a1e 	bne	r3,zero,2012340 <__adddf3+0x614>
 2012258:	3463c83a 	sub	r17,r6,r17
 201225c:	4a07c83a 	sub	r3,r9,r8
 2012260:	344d803a 	cmpltu	r6,r6,r17
 2012264:	1991c83a 	sub	r8,r3,r6
 2012268:	1021883a 	mov	r16,r2
 201226c:	3825883a 	mov	r18,r7
 2012270:	003f0a06 	br	2011e9c <__adddf3+0x170>
 2012274:	2023883a 	mov	r17,r4
 2012278:	003f0d06 	br	2011eb0 <__adddf3+0x184>
 201227c:	0081ffc4 	movi	r2,2047
 2012280:	80bf3f1e 	bne	r16,r2,2011f80 <__adddf3+0x254>
 2012284:	003ec806 	br	2011da8 <__adddf3+0x7c>
 2012288:	0005883a 	mov	r2,zero
 201228c:	003fb106 	br	2012154 <__adddf3+0x428>
 2012290:	0007883a 	mov	r3,zero
 2012294:	003fbc06 	br	2012188 <__adddf3+0x45c>
 2012298:	4444b03a 	or	r2,r8,r17
 201229c:	8000871e 	bne	r16,zero,20124bc <__adddf3+0x790>
 20122a0:	1000ba26 	beq	r2,zero,201258c <__adddf3+0x860>
 20122a4:	4984b03a 	or	r2,r9,r6
 20122a8:	103ebf26 	beq	r2,zero,2011da8 <__adddf3+0x7c>
 20122ac:	8985883a 	add	r2,r17,r6
 20122b0:	4247883a 	add	r3,r8,r9
 20122b4:	1451803a 	cmpltu	r8,r2,r17
 20122b8:	40d1883a 	add	r8,r8,r3
 20122bc:	40c0202c 	andhi	r3,r8,128
 20122c0:	1023883a 	mov	r17,r2
 20122c4:	183f1a26 	beq	r3,zero,2011f30 <__adddf3+0x204>
 20122c8:	00bfe034 	movhi	r2,65408
 20122cc:	10bfffc4 	addi	r2,r2,-1
 20122d0:	2021883a 	mov	r16,r4
 20122d4:	4090703a 	and	r8,r8,r2
 20122d8:	003eb306 	br	2011da8 <__adddf3+0x7c>
 20122dc:	4444b03a 	or	r2,r8,r17
 20122e0:	8000291e 	bne	r16,zero,2012388 <__adddf3+0x65c>
 20122e4:	10004b1e 	bne	r2,zero,2012414 <__adddf3+0x6e8>
 20122e8:	4990b03a 	or	r8,r9,r6
 20122ec:	40008b26 	beq	r8,zero,201251c <__adddf3+0x7f0>
 20122f0:	4811883a 	mov	r8,r9
 20122f4:	3023883a 	mov	r17,r6
 20122f8:	3825883a 	mov	r18,r7
 20122fc:	003eaa06 	br	2011da8 <__adddf3+0x7c>
 2012300:	1021883a 	mov	r16,r2
 2012304:	0011883a 	mov	r8,zero
 2012308:	0005883a 	mov	r2,zero
 201230c:	003f0f06 	br	2011f4c <__adddf3+0x220>
 2012310:	217ff804 	addi	r5,r4,-32
 2012314:	00800804 	movi	r2,32
 2012318:	494ad83a 	srl	r5,r9,r5
 201231c:	20807d26 	beq	r4,r2,2012514 <__adddf3+0x7e8>
 2012320:	00801004 	movi	r2,64
 2012324:	1109c83a 	sub	r4,r2,r4
 2012328:	4912983a 	sll	r9,r9,r4
 201232c:	498cb03a 	or	r6,r9,r6
 2012330:	300cc03a 	cmpne	r6,r6,zero
 2012334:	298ab03a 	or	r5,r5,r6
 2012338:	0013883a 	mov	r9,zero
 201233c:	003f1506 	br	2011f94 <__adddf3+0x268>
 2012340:	0101ffc4 	movi	r4,2047
 2012344:	113f9a1e 	bne	r2,r4,20121b0 <__adddf3+0x484>
 2012348:	4811883a 	mov	r8,r9
 201234c:	3023883a 	mov	r17,r6
 2012350:	1021883a 	mov	r16,r2
 2012354:	3825883a 	mov	r18,r7
 2012358:	003e9306 	br	2011da8 <__adddf3+0x7c>
 201235c:	8000161e 	bne	r16,zero,20123b8 <__adddf3+0x68c>
 2012360:	444ab03a 	or	r5,r8,r17
 2012364:	28005126 	beq	r5,zero,20124ac <__adddf3+0x780>
 2012368:	0108303a 	nor	r4,zero,r4
 201236c:	20004d1e 	bne	r4,zero,20124a4 <__adddf3+0x778>
 2012370:	89a3883a 	add	r17,r17,r6
 2012374:	4253883a 	add	r9,r8,r9
 2012378:	898d803a 	cmpltu	r6,r17,r6
 201237c:	3251883a 	add	r8,r6,r9
 2012380:	1021883a 	mov	r16,r2
 2012384:	003f0806 	br	2011fa8 <__adddf3+0x27c>
 2012388:	1000301e 	bne	r2,zero,201244c <__adddf3+0x720>
 201238c:	4984b03a 	or	r2,r9,r6
 2012390:	10007126 	beq	r2,zero,2012558 <__adddf3+0x82c>
 2012394:	4811883a 	mov	r8,r9
 2012398:	3023883a 	mov	r17,r6
 201239c:	3825883a 	mov	r18,r7
 20123a0:	0401ffc4 	movi	r16,2047
 20123a4:	003e8006 	br	2011da8 <__adddf3+0x7c>
 20123a8:	4462b03a 	or	r17,r8,r17
 20123ac:	8822c03a 	cmpne	r17,r17,zero
 20123b0:	0007883a 	mov	r3,zero
 20123b4:	003f8b06 	br	20121e4 <__adddf3+0x4b8>
 20123b8:	0141ffc4 	movi	r5,2047
 20123bc:	11403b26 	beq	r2,r5,20124ac <__adddf3+0x780>
 20123c0:	0109c83a 	sub	r4,zero,r4
 20123c4:	42002034 	orhi	r8,r8,128
 20123c8:	01400e04 	movi	r5,56
 20123cc:	29006716 	blt	r5,r4,201256c <__adddf3+0x840>
 20123d0:	014007c4 	movi	r5,31
 20123d4:	29007016 	blt	r5,r4,2012598 <__adddf3+0x86c>
 20123d8:	01400804 	movi	r5,32
 20123dc:	290bc83a 	sub	r5,r5,r4
 20123e0:	4154983a 	sll	r10,r8,r5
 20123e4:	890ed83a 	srl	r7,r17,r4
 20123e8:	894a983a 	sll	r5,r17,r5
 20123ec:	4108d83a 	srl	r4,r8,r4
 20123f0:	51e2b03a 	or	r17,r10,r7
 20123f4:	280ac03a 	cmpne	r5,r5,zero
 20123f8:	8962b03a 	or	r17,r17,r5
 20123fc:	89a3883a 	add	r17,r17,r6
 2012400:	2253883a 	add	r9,r4,r9
 2012404:	898d803a 	cmpltu	r6,r17,r6
 2012408:	3251883a 	add	r8,r6,r9
 201240c:	1021883a 	mov	r16,r2
 2012410:	003ee506 	br	2011fa8 <__adddf3+0x27c>
 2012414:	4984b03a 	or	r2,r9,r6
 2012418:	103e6326 	beq	r2,zero,2011da8 <__adddf3+0x7c>
 201241c:	8987c83a 	sub	r3,r17,r6
 2012420:	88c9803a 	cmpltu	r4,r17,r3
 2012424:	4245c83a 	sub	r2,r8,r9
 2012428:	1105c83a 	sub	r2,r2,r4
 201242c:	1100202c 	andhi	r4,r2,128
 2012430:	203ebb26 	beq	r4,zero,2011f20 <__adddf3+0x1f4>
 2012434:	3463c83a 	sub	r17,r6,r17
 2012438:	4a07c83a 	sub	r3,r9,r8
 201243c:	344d803a 	cmpltu	r6,r6,r17
 2012440:	1991c83a 	sub	r8,r3,r6
 2012444:	3825883a 	mov	r18,r7
 2012448:	003e5706 	br	2011da8 <__adddf3+0x7c>
 201244c:	4984b03a 	or	r2,r9,r6
 2012450:	10002e26 	beq	r2,zero,201250c <__adddf3+0x7e0>
 2012454:	4004d0fa 	srli	r2,r8,3
 2012458:	8822d0fa 	srli	r17,r17,3
 201245c:	4010977a 	slli	r8,r8,29
 2012460:	10c0022c 	andhi	r3,r2,8
 2012464:	4462b03a 	or	r17,r8,r17
 2012468:	18000826 	beq	r3,zero,201248c <__adddf3+0x760>
 201246c:	4808d0fa 	srli	r4,r9,3
 2012470:	20c0022c 	andhi	r3,r4,8
 2012474:	1800051e 	bne	r3,zero,201248c <__adddf3+0x760>
 2012478:	300cd0fa 	srli	r6,r6,3
 201247c:	4806977a 	slli	r3,r9,29
 2012480:	2005883a 	mov	r2,r4
 2012484:	3825883a 	mov	r18,r7
 2012488:	19a2b03a 	or	r17,r3,r6
 201248c:	8810d77a 	srli	r8,r17,29
 2012490:	100490fa 	slli	r2,r2,3
 2012494:	882290fa 	slli	r17,r17,3
 2012498:	0401ffc4 	movi	r16,2047
 201249c:	4090b03a 	or	r8,r8,r2
 20124a0:	003e4106 	br	2011da8 <__adddf3+0x7c>
 20124a4:	0141ffc4 	movi	r5,2047
 20124a8:	117fc71e 	bne	r2,r5,20123c8 <__adddf3+0x69c>
 20124ac:	4811883a 	mov	r8,r9
 20124b0:	3023883a 	mov	r17,r6
 20124b4:	1021883a 	mov	r16,r2
 20124b8:	003e3b06 	br	2011da8 <__adddf3+0x7c>
 20124bc:	10002f26 	beq	r2,zero,201257c <__adddf3+0x850>
 20124c0:	4984b03a 	or	r2,r9,r6
 20124c4:	10001126 	beq	r2,zero,201250c <__adddf3+0x7e0>
 20124c8:	4004d0fa 	srli	r2,r8,3
 20124cc:	8822d0fa 	srli	r17,r17,3
 20124d0:	4010977a 	slli	r8,r8,29
 20124d4:	10c0022c 	andhi	r3,r2,8
 20124d8:	4462b03a 	or	r17,r8,r17
 20124dc:	183feb26 	beq	r3,zero,201248c <__adddf3+0x760>
 20124e0:	4808d0fa 	srli	r4,r9,3
 20124e4:	20c0022c 	andhi	r3,r4,8
 20124e8:	183fe81e 	bne	r3,zero,201248c <__adddf3+0x760>
 20124ec:	300cd0fa 	srli	r6,r6,3
 20124f0:	4806977a 	slli	r3,r9,29
 20124f4:	2005883a 	mov	r2,r4
 20124f8:	19a2b03a 	or	r17,r3,r6
 20124fc:	003fe306 	br	201248c <__adddf3+0x760>
 2012500:	0011883a 	mov	r8,zero
 2012504:	0005883a 	mov	r2,zero
 2012508:	003e3f06 	br	2011e08 <__adddf3+0xdc>
 201250c:	0401ffc4 	movi	r16,2047
 2012510:	003e2506 	br	2011da8 <__adddf3+0x7c>
 2012514:	0013883a 	mov	r9,zero
 2012518:	003f8406 	br	201232c <__adddf3+0x600>
 201251c:	0005883a 	mov	r2,zero
 2012520:	0007883a 	mov	r3,zero
 2012524:	003e8906 	br	2011f4c <__adddf3+0x220>
 2012528:	197ff804 	addi	r5,r3,-32
 201252c:	01000804 	movi	r4,32
 2012530:	414ad83a 	srl	r5,r8,r5
 2012534:	19002426 	beq	r3,r4,20125c8 <__adddf3+0x89c>
 2012538:	01001004 	movi	r4,64
 201253c:	20c7c83a 	sub	r3,r4,r3
 2012540:	40c6983a 	sll	r3,r8,r3
 2012544:	1c46b03a 	or	r3,r3,r17
 2012548:	1806c03a 	cmpne	r3,r3,zero
 201254c:	28e2b03a 	or	r17,r5,r3
 2012550:	0007883a 	mov	r3,zero
 2012554:	003f2306 	br	20121e4 <__adddf3+0x4b8>
 2012558:	0007883a 	mov	r3,zero
 201255c:	5811883a 	mov	r8,r11
 2012560:	00bfffc4 	movi	r2,-1
 2012564:	0401ffc4 	movi	r16,2047
 2012568:	003e7806 	br	2011f4c <__adddf3+0x220>
 201256c:	4462b03a 	or	r17,r8,r17
 2012570:	8822c03a 	cmpne	r17,r17,zero
 2012574:	0009883a 	mov	r4,zero
 2012578:	003fa006 	br	20123fc <__adddf3+0x6d0>
 201257c:	4811883a 	mov	r8,r9
 2012580:	3023883a 	mov	r17,r6
 2012584:	0401ffc4 	movi	r16,2047
 2012588:	003e0706 	br	2011da8 <__adddf3+0x7c>
 201258c:	4811883a 	mov	r8,r9
 2012590:	3023883a 	mov	r17,r6
 2012594:	003e0406 	br	2011da8 <__adddf3+0x7c>
 2012598:	21fff804 	addi	r7,r4,-32
 201259c:	01400804 	movi	r5,32
 20125a0:	41ced83a 	srl	r7,r8,r7
 20125a4:	21400a26 	beq	r4,r5,20125d0 <__adddf3+0x8a4>
 20125a8:	01401004 	movi	r5,64
 20125ac:	2909c83a 	sub	r4,r5,r4
 20125b0:	4108983a 	sll	r4,r8,r4
 20125b4:	2448b03a 	or	r4,r4,r17
 20125b8:	2008c03a 	cmpne	r4,r4,zero
 20125bc:	3922b03a 	or	r17,r7,r4
 20125c0:	0009883a 	mov	r4,zero
 20125c4:	003f8d06 	br	20123fc <__adddf3+0x6d0>
 20125c8:	0007883a 	mov	r3,zero
 20125cc:	003fdd06 	br	2012544 <__adddf3+0x818>
 20125d0:	0009883a 	mov	r4,zero
 20125d4:	003ff706 	br	20125b4 <__adddf3+0x888>

020125d8 <__eqdf2>:
 20125d8:	2804d53a 	srli	r2,r5,20
 20125dc:	3806d53a 	srli	r3,r7,20
 20125e0:	02000434 	movhi	r8,16
 20125e4:	423fffc4 	addi	r8,r8,-1
 20125e8:	1081ffcc 	andi	r2,r2,2047
 20125ec:	0281ffc4 	movi	r10,2047
 20125f0:	2a12703a 	and	r9,r5,r8
 20125f4:	18c1ffcc 	andi	r3,r3,2047
 20125f8:	3a10703a 	and	r8,r7,r8
 20125fc:	280ad7fa 	srli	r5,r5,31
 2012600:	380ed7fa 	srli	r7,r7,31
 2012604:	12801026 	beq	r2,r10,2012648 <__eqdf2+0x70>
 2012608:	0281ffc4 	movi	r10,2047
 201260c:	1a800a26 	beq	r3,r10,2012638 <__eqdf2+0x60>
 2012610:	10c00226 	beq	r2,r3,201261c <__eqdf2+0x44>
 2012614:	00800044 	movi	r2,1
 2012618:	f800283a 	ret
 201261c:	4a3ffd1e 	bne	r9,r8,2012614 <__eqdf2+0x3c>
 2012620:	21bffc1e 	bne	r4,r6,2012614 <__eqdf2+0x3c>
 2012624:	29c00c26 	beq	r5,r7,2012658 <__eqdf2+0x80>
 2012628:	103ffa1e 	bne	r2,zero,2012614 <__eqdf2+0x3c>
 201262c:	2244b03a 	or	r2,r4,r9
 2012630:	1004c03a 	cmpne	r2,r2,zero
 2012634:	f800283a 	ret
 2012638:	3214b03a 	or	r10,r6,r8
 201263c:	503ff426 	beq	r10,zero,2012610 <__eqdf2+0x38>
 2012640:	00800044 	movi	r2,1
 2012644:	f800283a 	ret
 2012648:	2254b03a 	or	r10,r4,r9
 201264c:	503fee26 	beq	r10,zero,2012608 <__eqdf2+0x30>
 2012650:	00800044 	movi	r2,1
 2012654:	f800283a 	ret
 2012658:	0005883a 	mov	r2,zero
 201265c:	f800283a 	ret

02012660 <__subdf3>:
 2012660:	02000434 	movhi	r8,16
 2012664:	423fffc4 	addi	r8,r8,-1
 2012668:	defffb04 	addi	sp,sp,-20
 201266c:	2a14703a 	and	r10,r5,r8
 2012670:	3812d53a 	srli	r9,r7,20
 2012674:	3a10703a 	and	r8,r7,r8
 2012678:	2006d77a 	srli	r3,r4,29
 201267c:	3004d77a 	srli	r2,r6,29
 2012680:	dc000015 	stw	r16,0(sp)
 2012684:	501490fa 	slli	r10,r10,3
 2012688:	2820d53a 	srli	r16,r5,20
 201268c:	401090fa 	slli	r8,r8,3
 2012690:	dc800215 	stw	r18,8(sp)
 2012694:	dc400115 	stw	r17,4(sp)
 2012698:	dfc00415 	stw	ra,16(sp)
 201269c:	202290fa 	slli	r17,r4,3
 20126a0:	dcc00315 	stw	r19,12(sp)
 20126a4:	4a41ffcc 	andi	r9,r9,2047
 20126a8:	0101ffc4 	movi	r4,2047
 20126ac:	2824d7fa 	srli	r18,r5,31
 20126b0:	8401ffcc 	andi	r16,r16,2047
 20126b4:	50c6b03a 	or	r3,r10,r3
 20126b8:	380ed7fa 	srli	r7,r7,31
 20126bc:	408ab03a 	or	r5,r8,r2
 20126c0:	300c90fa 	slli	r6,r6,3
 20126c4:	49009626 	beq	r9,r4,2012920 <__subdf3+0x2c0>
 20126c8:	39c0005c 	xori	r7,r7,1
 20126cc:	8245c83a 	sub	r2,r16,r9
 20126d0:	3c807426 	beq	r7,r18,20128a4 <__subdf3+0x244>
 20126d4:	0080af0e 	bge	zero,r2,2012994 <__subdf3+0x334>
 20126d8:	48002a1e 	bne	r9,zero,2012784 <__subdf3+0x124>
 20126dc:	2988b03a 	or	r4,r5,r6
 20126e0:	20009a1e 	bne	r4,zero,201294c <__subdf3+0x2ec>
 20126e4:	888001cc 	andi	r2,r17,7
 20126e8:	10000726 	beq	r2,zero,2012708 <__subdf3+0xa8>
 20126ec:	888003cc 	andi	r2,r17,15
 20126f0:	01000104 	movi	r4,4
 20126f4:	11000426 	beq	r2,r4,2012708 <__subdf3+0xa8>
 20126f8:	890b883a 	add	r5,r17,r4
 20126fc:	2c63803a 	cmpltu	r17,r5,r17
 2012700:	1c47883a 	add	r3,r3,r17
 2012704:	2823883a 	mov	r17,r5
 2012708:	1880202c 	andhi	r2,r3,128
 201270c:	10005926 	beq	r2,zero,2012874 <__subdf3+0x214>
 2012710:	84000044 	addi	r16,r16,1
 2012714:	0081ffc4 	movi	r2,2047
 2012718:	8080be26 	beq	r16,r2,2012a14 <__subdf3+0x3b4>
 201271c:	017fe034 	movhi	r5,65408
 2012720:	297fffc4 	addi	r5,r5,-1
 2012724:	1946703a 	and	r3,r3,r5
 2012728:	1804977a 	slli	r2,r3,29
 201272c:	1806927a 	slli	r3,r3,9
 2012730:	8822d0fa 	srli	r17,r17,3
 2012734:	8401ffcc 	andi	r16,r16,2047
 2012738:	180ad33a 	srli	r5,r3,12
 201273c:	9100004c 	andi	r4,r18,1
 2012740:	1444b03a 	or	r2,r2,r17
 2012744:	80c1ffcc 	andi	r3,r16,2047
 2012748:	1820953a 	slli	r16,r3,20
 201274c:	20c03fcc 	andi	r3,r4,255
 2012750:	180897fa 	slli	r4,r3,31
 2012754:	00c00434 	movhi	r3,16
 2012758:	18ffffc4 	addi	r3,r3,-1
 201275c:	28c6703a 	and	r3,r5,r3
 2012760:	1c06b03a 	or	r3,r3,r16
 2012764:	1906b03a 	or	r3,r3,r4
 2012768:	dfc00417 	ldw	ra,16(sp)
 201276c:	dcc00317 	ldw	r19,12(sp)
 2012770:	dc800217 	ldw	r18,8(sp)
 2012774:	dc400117 	ldw	r17,4(sp)
 2012778:	dc000017 	ldw	r16,0(sp)
 201277c:	dec00504 	addi	sp,sp,20
 2012780:	f800283a 	ret
 2012784:	0101ffc4 	movi	r4,2047
 2012788:	813fd626 	beq	r16,r4,20126e4 <__subdf3+0x84>
 201278c:	29402034 	orhi	r5,r5,128
 2012790:	01000e04 	movi	r4,56
 2012794:	2080a316 	blt	r4,r2,2012a24 <__subdf3+0x3c4>
 2012798:	010007c4 	movi	r4,31
 201279c:	2080c616 	blt	r4,r2,2012ab8 <__subdf3+0x458>
 20127a0:	01000804 	movi	r4,32
 20127a4:	2089c83a 	sub	r4,r4,r2
 20127a8:	2910983a 	sll	r8,r5,r4
 20127ac:	308ed83a 	srl	r7,r6,r2
 20127b0:	3108983a 	sll	r4,r6,r4
 20127b4:	2884d83a 	srl	r2,r5,r2
 20127b8:	41ccb03a 	or	r6,r8,r7
 20127bc:	2008c03a 	cmpne	r4,r4,zero
 20127c0:	310cb03a 	or	r6,r6,r4
 20127c4:	898dc83a 	sub	r6,r17,r6
 20127c8:	89a3803a 	cmpltu	r17,r17,r6
 20127cc:	1887c83a 	sub	r3,r3,r2
 20127d0:	1c47c83a 	sub	r3,r3,r17
 20127d4:	3023883a 	mov	r17,r6
 20127d8:	1880202c 	andhi	r2,r3,128
 20127dc:	10002326 	beq	r2,zero,201286c <__subdf3+0x20c>
 20127e0:	04c02034 	movhi	r19,128
 20127e4:	9cffffc4 	addi	r19,r19,-1
 20127e8:	1ce6703a 	and	r19,r3,r19
 20127ec:	98007a26 	beq	r19,zero,20129d8 <__subdf3+0x378>
 20127f0:	9809883a 	mov	r4,r19
 20127f4:	20048ac0 	call	20048ac <__clzsi2>
 20127f8:	113ffe04 	addi	r4,r2,-8
 20127fc:	00c007c4 	movi	r3,31
 2012800:	19007b16 	blt	r3,r4,20129f0 <__subdf3+0x390>
 2012804:	00800804 	movi	r2,32
 2012808:	1105c83a 	sub	r2,r2,r4
 201280c:	8884d83a 	srl	r2,r17,r2
 2012810:	9906983a 	sll	r3,r19,r4
 2012814:	8922983a 	sll	r17,r17,r4
 2012818:	10c4b03a 	or	r2,r2,r3
 201281c:	24007816 	blt	r4,r16,2012a00 <__subdf3+0x3a0>
 2012820:	2421c83a 	sub	r16,r4,r16
 2012824:	80c00044 	addi	r3,r16,1
 2012828:	010007c4 	movi	r4,31
 201282c:	20c09516 	blt	r4,r3,2012a84 <__subdf3+0x424>
 2012830:	01400804 	movi	r5,32
 2012834:	28cbc83a 	sub	r5,r5,r3
 2012838:	88c8d83a 	srl	r4,r17,r3
 201283c:	8962983a 	sll	r17,r17,r5
 2012840:	114a983a 	sll	r5,r2,r5
 2012844:	10c6d83a 	srl	r3,r2,r3
 2012848:	8804c03a 	cmpne	r2,r17,zero
 201284c:	290ab03a 	or	r5,r5,r4
 2012850:	28a2b03a 	or	r17,r5,r2
 2012854:	0021883a 	mov	r16,zero
 2012858:	003fa206 	br	20126e4 <__subdf3+0x84>
 201285c:	2090b03a 	or	r8,r4,r2
 2012860:	40018e26 	beq	r8,zero,2012e9c <__subdf3+0x83c>
 2012864:	1007883a 	mov	r3,r2
 2012868:	2023883a 	mov	r17,r4
 201286c:	888001cc 	andi	r2,r17,7
 2012870:	103f9e1e 	bne	r2,zero,20126ec <__subdf3+0x8c>
 2012874:	1804977a 	slli	r2,r3,29
 2012878:	8822d0fa 	srli	r17,r17,3
 201287c:	1810d0fa 	srli	r8,r3,3
 2012880:	9100004c 	andi	r4,r18,1
 2012884:	1444b03a 	or	r2,r2,r17
 2012888:	00c1ffc4 	movi	r3,2047
 201288c:	80c02826 	beq	r16,r3,2012930 <__subdf3+0x2d0>
 2012890:	01400434 	movhi	r5,16
 2012894:	297fffc4 	addi	r5,r5,-1
 2012898:	80e0703a 	and	r16,r16,r3
 201289c:	414a703a 	and	r5,r8,r5
 20128a0:	003fa806 	br	2012744 <__subdf3+0xe4>
 20128a4:	0080630e 	bge	zero,r2,2012a34 <__subdf3+0x3d4>
 20128a8:	48003026 	beq	r9,zero,201296c <__subdf3+0x30c>
 20128ac:	0101ffc4 	movi	r4,2047
 20128b0:	813f8c26 	beq	r16,r4,20126e4 <__subdf3+0x84>
 20128b4:	29402034 	orhi	r5,r5,128
 20128b8:	01000e04 	movi	r4,56
 20128bc:	2080a90e 	bge	r4,r2,2012b64 <__subdf3+0x504>
 20128c0:	298cb03a 	or	r6,r5,r6
 20128c4:	3012c03a 	cmpne	r9,r6,zero
 20128c8:	0005883a 	mov	r2,zero
 20128cc:	4c53883a 	add	r9,r9,r17
 20128d0:	4c63803a 	cmpltu	r17,r9,r17
 20128d4:	10c7883a 	add	r3,r2,r3
 20128d8:	88c7883a 	add	r3,r17,r3
 20128dc:	4823883a 	mov	r17,r9
 20128e0:	1880202c 	andhi	r2,r3,128
 20128e4:	1000d026 	beq	r2,zero,2012c28 <__subdf3+0x5c8>
 20128e8:	84000044 	addi	r16,r16,1
 20128ec:	0081ffc4 	movi	r2,2047
 20128f0:	8080fe26 	beq	r16,r2,2012cec <__subdf3+0x68c>
 20128f4:	00bfe034 	movhi	r2,65408
 20128f8:	10bfffc4 	addi	r2,r2,-1
 20128fc:	1886703a 	and	r3,r3,r2
 2012900:	880ad07a 	srli	r5,r17,1
 2012904:	180497fa 	slli	r2,r3,31
 2012908:	8900004c 	andi	r4,r17,1
 201290c:	2922b03a 	or	r17,r5,r4
 2012910:	1806d07a 	srli	r3,r3,1
 2012914:	1462b03a 	or	r17,r2,r17
 2012918:	3825883a 	mov	r18,r7
 201291c:	003f7106 	br	20126e4 <__subdf3+0x84>
 2012920:	2984b03a 	or	r2,r5,r6
 2012924:	103f6826 	beq	r2,zero,20126c8 <__subdf3+0x68>
 2012928:	39c03fcc 	andi	r7,r7,255
 201292c:	003f6706 	br	20126cc <__subdf3+0x6c>
 2012930:	4086b03a 	or	r3,r8,r2
 2012934:	18015226 	beq	r3,zero,2012e80 <__subdf3+0x820>
 2012938:	00c00434 	movhi	r3,16
 201293c:	41400234 	orhi	r5,r8,8
 2012940:	18ffffc4 	addi	r3,r3,-1
 2012944:	28ca703a 	and	r5,r5,r3
 2012948:	003f7e06 	br	2012744 <__subdf3+0xe4>
 201294c:	10bfffc4 	addi	r2,r2,-1
 2012950:	1000491e 	bne	r2,zero,2012a78 <__subdf3+0x418>
 2012954:	898fc83a 	sub	r7,r17,r6
 2012958:	89e3803a 	cmpltu	r17,r17,r7
 201295c:	1947c83a 	sub	r3,r3,r5
 2012960:	1c47c83a 	sub	r3,r3,r17
 2012964:	3823883a 	mov	r17,r7
 2012968:	003f9b06 	br	20127d8 <__subdf3+0x178>
 201296c:	2988b03a 	or	r4,r5,r6
 2012970:	203f5c26 	beq	r4,zero,20126e4 <__subdf3+0x84>
 2012974:	10bfffc4 	addi	r2,r2,-1
 2012978:	1000931e 	bne	r2,zero,2012bc8 <__subdf3+0x568>
 201297c:	898d883a 	add	r6,r17,r6
 2012980:	3463803a 	cmpltu	r17,r6,r17
 2012984:	1947883a 	add	r3,r3,r5
 2012988:	88c7883a 	add	r3,r17,r3
 201298c:	3023883a 	mov	r17,r6
 2012990:	003fd306 	br	20128e0 <__subdf3+0x280>
 2012994:	1000541e 	bne	r2,zero,2012ae8 <__subdf3+0x488>
 2012998:	80800044 	addi	r2,r16,1
 201299c:	1081ffcc 	andi	r2,r2,2047
 20129a0:	01000044 	movi	r4,1
 20129a4:	2080a20e 	bge	r4,r2,2012c30 <__subdf3+0x5d0>
 20129a8:	8989c83a 	sub	r4,r17,r6
 20129ac:	8905803a 	cmpltu	r2,r17,r4
 20129b0:	1967c83a 	sub	r19,r3,r5
 20129b4:	98a7c83a 	sub	r19,r19,r2
 20129b8:	9880202c 	andhi	r2,r19,128
 20129bc:	10006326 	beq	r2,zero,2012b4c <__subdf3+0x4ec>
 20129c0:	3463c83a 	sub	r17,r6,r17
 20129c4:	28c7c83a 	sub	r3,r5,r3
 20129c8:	344d803a 	cmpltu	r6,r6,r17
 20129cc:	19a7c83a 	sub	r19,r3,r6
 20129d0:	3825883a 	mov	r18,r7
 20129d4:	983f861e 	bne	r19,zero,20127f0 <__subdf3+0x190>
 20129d8:	8809883a 	mov	r4,r17
 20129dc:	20048ac0 	call	20048ac <__clzsi2>
 20129e0:	10800804 	addi	r2,r2,32
 20129e4:	113ffe04 	addi	r4,r2,-8
 20129e8:	00c007c4 	movi	r3,31
 20129ec:	193f850e 	bge	r3,r4,2012804 <__subdf3+0x1a4>
 20129f0:	10bff604 	addi	r2,r2,-40
 20129f4:	8884983a 	sll	r2,r17,r2
 20129f8:	0023883a 	mov	r17,zero
 20129fc:	243f880e 	bge	r4,r16,2012820 <__subdf3+0x1c0>
 2012a00:	00ffe034 	movhi	r3,65408
 2012a04:	18ffffc4 	addi	r3,r3,-1
 2012a08:	8121c83a 	sub	r16,r16,r4
 2012a0c:	10c6703a 	and	r3,r2,r3
 2012a10:	003f3406 	br	20126e4 <__subdf3+0x84>
 2012a14:	9100004c 	andi	r4,r18,1
 2012a18:	000b883a 	mov	r5,zero
 2012a1c:	0005883a 	mov	r2,zero
 2012a20:	003f4806 	br	2012744 <__subdf3+0xe4>
 2012a24:	298cb03a 	or	r6,r5,r6
 2012a28:	300cc03a 	cmpne	r6,r6,zero
 2012a2c:	0005883a 	mov	r2,zero
 2012a30:	003f6406 	br	20127c4 <__subdf3+0x164>
 2012a34:	10009a1e 	bne	r2,zero,2012ca0 <__subdf3+0x640>
 2012a38:	82400044 	addi	r9,r16,1
 2012a3c:	4881ffcc 	andi	r2,r9,2047
 2012a40:	02800044 	movi	r10,1
 2012a44:	5080670e 	bge	r10,r2,2012be4 <__subdf3+0x584>
 2012a48:	0081ffc4 	movi	r2,2047
 2012a4c:	4880af26 	beq	r9,r2,2012d0c <__subdf3+0x6ac>
 2012a50:	898d883a 	add	r6,r17,r6
 2012a54:	1945883a 	add	r2,r3,r5
 2012a58:	3447803a 	cmpltu	r3,r6,r17
 2012a5c:	1887883a 	add	r3,r3,r2
 2012a60:	182297fa 	slli	r17,r3,31
 2012a64:	300cd07a 	srli	r6,r6,1
 2012a68:	1806d07a 	srli	r3,r3,1
 2012a6c:	4821883a 	mov	r16,r9
 2012a70:	89a2b03a 	or	r17,r17,r6
 2012a74:	003f1b06 	br	20126e4 <__subdf3+0x84>
 2012a78:	0101ffc4 	movi	r4,2047
 2012a7c:	813f441e 	bne	r16,r4,2012790 <__subdf3+0x130>
 2012a80:	003f1806 	br	20126e4 <__subdf3+0x84>
 2012a84:	843ff844 	addi	r16,r16,-31
 2012a88:	01400804 	movi	r5,32
 2012a8c:	1408d83a 	srl	r4,r2,r16
 2012a90:	19405026 	beq	r3,r5,2012bd4 <__subdf3+0x574>
 2012a94:	01401004 	movi	r5,64
 2012a98:	28c7c83a 	sub	r3,r5,r3
 2012a9c:	10c4983a 	sll	r2,r2,r3
 2012aa0:	88a2b03a 	or	r17,r17,r2
 2012aa4:	8822c03a 	cmpne	r17,r17,zero
 2012aa8:	2462b03a 	or	r17,r4,r17
 2012aac:	0007883a 	mov	r3,zero
 2012ab0:	0021883a 	mov	r16,zero
 2012ab4:	003f6d06 	br	201286c <__subdf3+0x20c>
 2012ab8:	11fff804 	addi	r7,r2,-32
 2012abc:	01000804 	movi	r4,32
 2012ac0:	29ced83a 	srl	r7,r5,r7
 2012ac4:	11004526 	beq	r2,r4,2012bdc <__subdf3+0x57c>
 2012ac8:	01001004 	movi	r4,64
 2012acc:	2089c83a 	sub	r4,r4,r2
 2012ad0:	2904983a 	sll	r2,r5,r4
 2012ad4:	118cb03a 	or	r6,r2,r6
 2012ad8:	300cc03a 	cmpne	r6,r6,zero
 2012adc:	398cb03a 	or	r6,r7,r6
 2012ae0:	0005883a 	mov	r2,zero
 2012ae4:	003f3706 	br	20127c4 <__subdf3+0x164>
 2012ae8:	80002a26 	beq	r16,zero,2012b94 <__subdf3+0x534>
 2012aec:	0101ffc4 	movi	r4,2047
 2012af0:	49006626 	beq	r9,r4,2012c8c <__subdf3+0x62c>
 2012af4:	0085c83a 	sub	r2,zero,r2
 2012af8:	18c02034 	orhi	r3,r3,128
 2012afc:	01000e04 	movi	r4,56
 2012b00:	20807e16 	blt	r4,r2,2012cfc <__subdf3+0x69c>
 2012b04:	010007c4 	movi	r4,31
 2012b08:	2080e716 	blt	r4,r2,2012ea8 <__subdf3+0x848>
 2012b0c:	01000804 	movi	r4,32
 2012b10:	2089c83a 	sub	r4,r4,r2
 2012b14:	1914983a 	sll	r10,r3,r4
 2012b18:	8890d83a 	srl	r8,r17,r2
 2012b1c:	8908983a 	sll	r4,r17,r4
 2012b20:	1884d83a 	srl	r2,r3,r2
 2012b24:	5222b03a 	or	r17,r10,r8
 2012b28:	2006c03a 	cmpne	r3,r4,zero
 2012b2c:	88e2b03a 	or	r17,r17,r3
 2012b30:	3463c83a 	sub	r17,r6,r17
 2012b34:	2885c83a 	sub	r2,r5,r2
 2012b38:	344d803a 	cmpltu	r6,r6,r17
 2012b3c:	1187c83a 	sub	r3,r2,r6
 2012b40:	4821883a 	mov	r16,r9
 2012b44:	3825883a 	mov	r18,r7
 2012b48:	003f2306 	br	20127d8 <__subdf3+0x178>
 2012b4c:	24d0b03a 	or	r8,r4,r19
 2012b50:	40001b1e 	bne	r8,zero,2012bc0 <__subdf3+0x560>
 2012b54:	0005883a 	mov	r2,zero
 2012b58:	0009883a 	mov	r4,zero
 2012b5c:	0021883a 	mov	r16,zero
 2012b60:	003f4906 	br	2012888 <__subdf3+0x228>
 2012b64:	010007c4 	movi	r4,31
 2012b68:	20803a16 	blt	r4,r2,2012c54 <__subdf3+0x5f4>
 2012b6c:	01000804 	movi	r4,32
 2012b70:	2089c83a 	sub	r4,r4,r2
 2012b74:	2912983a 	sll	r9,r5,r4
 2012b78:	3090d83a 	srl	r8,r6,r2
 2012b7c:	3108983a 	sll	r4,r6,r4
 2012b80:	2884d83a 	srl	r2,r5,r2
 2012b84:	4a12b03a 	or	r9,r9,r8
 2012b88:	2008c03a 	cmpne	r4,r4,zero
 2012b8c:	4912b03a 	or	r9,r9,r4
 2012b90:	003f4e06 	br	20128cc <__subdf3+0x26c>
 2012b94:	1c48b03a 	or	r4,r3,r17
 2012b98:	20003c26 	beq	r4,zero,2012c8c <__subdf3+0x62c>
 2012b9c:	0084303a 	nor	r2,zero,r2
 2012ba0:	1000381e 	bne	r2,zero,2012c84 <__subdf3+0x624>
 2012ba4:	3463c83a 	sub	r17,r6,r17
 2012ba8:	28c5c83a 	sub	r2,r5,r3
 2012bac:	344d803a 	cmpltu	r6,r6,r17
 2012bb0:	1187c83a 	sub	r3,r2,r6
 2012bb4:	4821883a 	mov	r16,r9
 2012bb8:	3825883a 	mov	r18,r7
 2012bbc:	003f0606 	br	20127d8 <__subdf3+0x178>
 2012bc0:	2023883a 	mov	r17,r4
 2012bc4:	003f0906 	br	20127ec <__subdf3+0x18c>
 2012bc8:	0101ffc4 	movi	r4,2047
 2012bcc:	813f3a1e 	bne	r16,r4,20128b8 <__subdf3+0x258>
 2012bd0:	003ec406 	br	20126e4 <__subdf3+0x84>
 2012bd4:	0005883a 	mov	r2,zero
 2012bd8:	003fb106 	br	2012aa0 <__subdf3+0x440>
 2012bdc:	0005883a 	mov	r2,zero
 2012be0:	003fbc06 	br	2012ad4 <__subdf3+0x474>
 2012be4:	1c44b03a 	or	r2,r3,r17
 2012be8:	80008e1e 	bne	r16,zero,2012e24 <__subdf3+0x7c4>
 2012bec:	1000c826 	beq	r2,zero,2012f10 <__subdf3+0x8b0>
 2012bf0:	2984b03a 	or	r2,r5,r6
 2012bf4:	103ebb26 	beq	r2,zero,20126e4 <__subdf3+0x84>
 2012bf8:	8989883a 	add	r4,r17,r6
 2012bfc:	1945883a 	add	r2,r3,r5
 2012c00:	2447803a 	cmpltu	r3,r4,r17
 2012c04:	1887883a 	add	r3,r3,r2
 2012c08:	1880202c 	andhi	r2,r3,128
 2012c0c:	2023883a 	mov	r17,r4
 2012c10:	103f1626 	beq	r2,zero,201286c <__subdf3+0x20c>
 2012c14:	00bfe034 	movhi	r2,65408
 2012c18:	10bfffc4 	addi	r2,r2,-1
 2012c1c:	5021883a 	mov	r16,r10
 2012c20:	1886703a 	and	r3,r3,r2
 2012c24:	003eaf06 	br	20126e4 <__subdf3+0x84>
 2012c28:	3825883a 	mov	r18,r7
 2012c2c:	003f0f06 	br	201286c <__subdf3+0x20c>
 2012c30:	1c44b03a 	or	r2,r3,r17
 2012c34:	8000251e 	bne	r16,zero,2012ccc <__subdf3+0x66c>
 2012c38:	1000661e 	bne	r2,zero,2012dd4 <__subdf3+0x774>
 2012c3c:	2990b03a 	or	r8,r5,r6
 2012c40:	40009626 	beq	r8,zero,2012e9c <__subdf3+0x83c>
 2012c44:	2807883a 	mov	r3,r5
 2012c48:	3023883a 	mov	r17,r6
 2012c4c:	3825883a 	mov	r18,r7
 2012c50:	003ea406 	br	20126e4 <__subdf3+0x84>
 2012c54:	127ff804 	addi	r9,r2,-32
 2012c58:	01000804 	movi	r4,32
 2012c5c:	2a52d83a 	srl	r9,r5,r9
 2012c60:	11008c26 	beq	r2,r4,2012e94 <__subdf3+0x834>
 2012c64:	01001004 	movi	r4,64
 2012c68:	2085c83a 	sub	r2,r4,r2
 2012c6c:	2884983a 	sll	r2,r5,r2
 2012c70:	118cb03a 	or	r6,r2,r6
 2012c74:	300cc03a 	cmpne	r6,r6,zero
 2012c78:	4992b03a 	or	r9,r9,r6
 2012c7c:	0005883a 	mov	r2,zero
 2012c80:	003f1206 	br	20128cc <__subdf3+0x26c>
 2012c84:	0101ffc4 	movi	r4,2047
 2012c88:	493f9c1e 	bne	r9,r4,2012afc <__subdf3+0x49c>
 2012c8c:	2807883a 	mov	r3,r5
 2012c90:	3023883a 	mov	r17,r6
 2012c94:	4821883a 	mov	r16,r9
 2012c98:	3825883a 	mov	r18,r7
 2012c9c:	003e9106 	br	20126e4 <__subdf3+0x84>
 2012ca0:	80001f1e 	bne	r16,zero,2012d20 <__subdf3+0x6c0>
 2012ca4:	1c48b03a 	or	r4,r3,r17
 2012ca8:	20005a26 	beq	r4,zero,2012e14 <__subdf3+0x7b4>
 2012cac:	0084303a 	nor	r2,zero,r2
 2012cb0:	1000561e 	bne	r2,zero,2012e0c <__subdf3+0x7ac>
 2012cb4:	89a3883a 	add	r17,r17,r6
 2012cb8:	1945883a 	add	r2,r3,r5
 2012cbc:	898d803a 	cmpltu	r6,r17,r6
 2012cc0:	3087883a 	add	r3,r6,r2
 2012cc4:	4821883a 	mov	r16,r9
 2012cc8:	003f0506 	br	20128e0 <__subdf3+0x280>
 2012ccc:	10002b1e 	bne	r2,zero,2012d7c <__subdf3+0x71c>
 2012cd0:	2984b03a 	or	r2,r5,r6
 2012cd4:	10008026 	beq	r2,zero,2012ed8 <__subdf3+0x878>
 2012cd8:	2807883a 	mov	r3,r5
 2012cdc:	3023883a 	mov	r17,r6
 2012ce0:	3825883a 	mov	r18,r7
 2012ce4:	0401ffc4 	movi	r16,2047
 2012ce8:	003e7e06 	br	20126e4 <__subdf3+0x84>
 2012cec:	3809883a 	mov	r4,r7
 2012cf0:	0011883a 	mov	r8,zero
 2012cf4:	0005883a 	mov	r2,zero
 2012cf8:	003ee306 	br	2012888 <__subdf3+0x228>
 2012cfc:	1c62b03a 	or	r17,r3,r17
 2012d00:	8822c03a 	cmpne	r17,r17,zero
 2012d04:	0005883a 	mov	r2,zero
 2012d08:	003f8906 	br	2012b30 <__subdf3+0x4d0>
 2012d0c:	3809883a 	mov	r4,r7
 2012d10:	4821883a 	mov	r16,r9
 2012d14:	0011883a 	mov	r8,zero
 2012d18:	0005883a 	mov	r2,zero
 2012d1c:	003eda06 	br	2012888 <__subdf3+0x228>
 2012d20:	0101ffc4 	movi	r4,2047
 2012d24:	49003b26 	beq	r9,r4,2012e14 <__subdf3+0x7b4>
 2012d28:	0085c83a 	sub	r2,zero,r2
 2012d2c:	18c02034 	orhi	r3,r3,128
 2012d30:	01000e04 	movi	r4,56
 2012d34:	20806e16 	blt	r4,r2,2012ef0 <__subdf3+0x890>
 2012d38:	010007c4 	movi	r4,31
 2012d3c:	20807716 	blt	r4,r2,2012f1c <__subdf3+0x8bc>
 2012d40:	01000804 	movi	r4,32
 2012d44:	2089c83a 	sub	r4,r4,r2
 2012d48:	1914983a 	sll	r10,r3,r4
 2012d4c:	8890d83a 	srl	r8,r17,r2
 2012d50:	8908983a 	sll	r4,r17,r4
 2012d54:	1884d83a 	srl	r2,r3,r2
 2012d58:	5222b03a 	or	r17,r10,r8
 2012d5c:	2006c03a 	cmpne	r3,r4,zero
 2012d60:	88e2b03a 	or	r17,r17,r3
 2012d64:	89a3883a 	add	r17,r17,r6
 2012d68:	1145883a 	add	r2,r2,r5
 2012d6c:	898d803a 	cmpltu	r6,r17,r6
 2012d70:	3087883a 	add	r3,r6,r2
 2012d74:	4821883a 	mov	r16,r9
 2012d78:	003ed906 	br	20128e0 <__subdf3+0x280>
 2012d7c:	2984b03a 	or	r2,r5,r6
 2012d80:	10004226 	beq	r2,zero,2012e8c <__subdf3+0x82c>
 2012d84:	1808d0fa 	srli	r4,r3,3
 2012d88:	8822d0fa 	srli	r17,r17,3
 2012d8c:	1806977a 	slli	r3,r3,29
 2012d90:	2080022c 	andhi	r2,r4,8
 2012d94:	1c62b03a 	or	r17,r3,r17
 2012d98:	10000826 	beq	r2,zero,2012dbc <__subdf3+0x75c>
 2012d9c:	2812d0fa 	srli	r9,r5,3
 2012da0:	4880022c 	andhi	r2,r9,8
 2012da4:	1000051e 	bne	r2,zero,2012dbc <__subdf3+0x75c>
 2012da8:	300cd0fa 	srli	r6,r6,3
 2012dac:	2804977a 	slli	r2,r5,29
 2012db0:	4809883a 	mov	r4,r9
 2012db4:	3825883a 	mov	r18,r7
 2012db8:	11a2b03a 	or	r17,r2,r6
 2012dbc:	8806d77a 	srli	r3,r17,29
 2012dc0:	200890fa 	slli	r4,r4,3
 2012dc4:	882290fa 	slli	r17,r17,3
 2012dc8:	0401ffc4 	movi	r16,2047
 2012dcc:	1906b03a 	or	r3,r3,r4
 2012dd0:	003e4406 	br	20126e4 <__subdf3+0x84>
 2012dd4:	2984b03a 	or	r2,r5,r6
 2012dd8:	103e4226 	beq	r2,zero,20126e4 <__subdf3+0x84>
 2012ddc:	8989c83a 	sub	r4,r17,r6
 2012de0:	8911803a 	cmpltu	r8,r17,r4
 2012de4:	1945c83a 	sub	r2,r3,r5
 2012de8:	1205c83a 	sub	r2,r2,r8
 2012dec:	1200202c 	andhi	r8,r2,128
 2012df0:	403e9a26 	beq	r8,zero,201285c <__subdf3+0x1fc>
 2012df4:	3463c83a 	sub	r17,r6,r17
 2012df8:	28c5c83a 	sub	r2,r5,r3
 2012dfc:	344d803a 	cmpltu	r6,r6,r17
 2012e00:	1187c83a 	sub	r3,r2,r6
 2012e04:	3825883a 	mov	r18,r7
 2012e08:	003e3606 	br	20126e4 <__subdf3+0x84>
 2012e0c:	0101ffc4 	movi	r4,2047
 2012e10:	493fc71e 	bne	r9,r4,2012d30 <__subdf3+0x6d0>
 2012e14:	2807883a 	mov	r3,r5
 2012e18:	3023883a 	mov	r17,r6
 2012e1c:	4821883a 	mov	r16,r9
 2012e20:	003e3006 	br	20126e4 <__subdf3+0x84>
 2012e24:	10003626 	beq	r2,zero,2012f00 <__subdf3+0x8a0>
 2012e28:	2984b03a 	or	r2,r5,r6
 2012e2c:	10001726 	beq	r2,zero,2012e8c <__subdf3+0x82c>
 2012e30:	1808d0fa 	srli	r4,r3,3
 2012e34:	8822d0fa 	srli	r17,r17,3
 2012e38:	1806977a 	slli	r3,r3,29
 2012e3c:	2080022c 	andhi	r2,r4,8
 2012e40:	1c62b03a 	or	r17,r3,r17
 2012e44:	10000726 	beq	r2,zero,2012e64 <__subdf3+0x804>
 2012e48:	2812d0fa 	srli	r9,r5,3
 2012e4c:	4880022c 	andhi	r2,r9,8
 2012e50:	1000041e 	bne	r2,zero,2012e64 <__subdf3+0x804>
 2012e54:	300cd0fa 	srli	r6,r6,3
 2012e58:	2804977a 	slli	r2,r5,29
 2012e5c:	4809883a 	mov	r4,r9
 2012e60:	11a2b03a 	or	r17,r2,r6
 2012e64:	8806d77a 	srli	r3,r17,29
 2012e68:	200890fa 	slli	r4,r4,3
 2012e6c:	882290fa 	slli	r17,r17,3
 2012e70:	3825883a 	mov	r18,r7
 2012e74:	1906b03a 	or	r3,r3,r4
 2012e78:	0401ffc4 	movi	r16,2047
 2012e7c:	003e1906 	br	20126e4 <__subdf3+0x84>
 2012e80:	000b883a 	mov	r5,zero
 2012e84:	0005883a 	mov	r2,zero
 2012e88:	003e2e06 	br	2012744 <__subdf3+0xe4>
 2012e8c:	0401ffc4 	movi	r16,2047
 2012e90:	003e1406 	br	20126e4 <__subdf3+0x84>
 2012e94:	0005883a 	mov	r2,zero
 2012e98:	003f7506 	br	2012c70 <__subdf3+0x610>
 2012e9c:	0005883a 	mov	r2,zero
 2012ea0:	0009883a 	mov	r4,zero
 2012ea4:	003e7806 	br	2012888 <__subdf3+0x228>
 2012ea8:	123ff804 	addi	r8,r2,-32
 2012eac:	01000804 	movi	r4,32
 2012eb0:	1a10d83a 	srl	r8,r3,r8
 2012eb4:	11002526 	beq	r2,r4,2012f4c <__subdf3+0x8ec>
 2012eb8:	01001004 	movi	r4,64
 2012ebc:	2085c83a 	sub	r2,r4,r2
 2012ec0:	1884983a 	sll	r2,r3,r2
 2012ec4:	1444b03a 	or	r2,r2,r17
 2012ec8:	1004c03a 	cmpne	r2,r2,zero
 2012ecc:	40a2b03a 	or	r17,r8,r2
 2012ed0:	0005883a 	mov	r2,zero
 2012ed4:	003f1606 	br	2012b30 <__subdf3+0x4d0>
 2012ed8:	02000434 	movhi	r8,16
 2012edc:	0009883a 	mov	r4,zero
 2012ee0:	423fffc4 	addi	r8,r8,-1
 2012ee4:	00bfffc4 	movi	r2,-1
 2012ee8:	0401ffc4 	movi	r16,2047
 2012eec:	003e6606 	br	2012888 <__subdf3+0x228>
 2012ef0:	1c62b03a 	or	r17,r3,r17
 2012ef4:	8822c03a 	cmpne	r17,r17,zero
 2012ef8:	0005883a 	mov	r2,zero
 2012efc:	003f9906 	br	2012d64 <__subdf3+0x704>
 2012f00:	2807883a 	mov	r3,r5
 2012f04:	3023883a 	mov	r17,r6
 2012f08:	0401ffc4 	movi	r16,2047
 2012f0c:	003df506 	br	20126e4 <__subdf3+0x84>
 2012f10:	2807883a 	mov	r3,r5
 2012f14:	3023883a 	mov	r17,r6
 2012f18:	003df206 	br	20126e4 <__subdf3+0x84>
 2012f1c:	123ff804 	addi	r8,r2,-32
 2012f20:	01000804 	movi	r4,32
 2012f24:	1a10d83a 	srl	r8,r3,r8
 2012f28:	11000a26 	beq	r2,r4,2012f54 <__subdf3+0x8f4>
 2012f2c:	01001004 	movi	r4,64
 2012f30:	2085c83a 	sub	r2,r4,r2
 2012f34:	1884983a 	sll	r2,r3,r2
 2012f38:	1444b03a 	or	r2,r2,r17
 2012f3c:	1004c03a 	cmpne	r2,r2,zero
 2012f40:	40a2b03a 	or	r17,r8,r2
 2012f44:	0005883a 	mov	r2,zero
 2012f48:	003f8606 	br	2012d64 <__subdf3+0x704>
 2012f4c:	0005883a 	mov	r2,zero
 2012f50:	003fdc06 	br	2012ec4 <__subdf3+0x864>
 2012f54:	0005883a 	mov	r2,zero
 2012f58:	003ff706 	br	2012f38 <__subdf3+0x8d8>

02012f5c <__fixdfsi>:
 2012f5c:	280cd53a 	srli	r6,r5,20
 2012f60:	00c00434 	movhi	r3,16
 2012f64:	18ffffc4 	addi	r3,r3,-1
 2012f68:	3181ffcc 	andi	r6,r6,2047
 2012f6c:	01c0ff84 	movi	r7,1022
 2012f70:	28c6703a 	and	r3,r5,r3
 2012f74:	280ad7fa 	srli	r5,r5,31
 2012f78:	3980120e 	bge	r7,r6,2012fc4 <__fixdfsi+0x68>
 2012f7c:	00810744 	movi	r2,1053
 2012f80:	11800c16 	blt	r2,r6,2012fb4 <__fixdfsi+0x58>
 2012f84:	00810cc4 	movi	r2,1075
 2012f88:	1185c83a 	sub	r2,r2,r6
 2012f8c:	01c007c4 	movi	r7,31
 2012f90:	18c00434 	orhi	r3,r3,16
 2012f94:	38800d16 	blt	r7,r2,2012fcc <__fixdfsi+0x70>
 2012f98:	31befb44 	addi	r6,r6,-1043
 2012f9c:	2084d83a 	srl	r2,r4,r2
 2012fa0:	1986983a 	sll	r3,r3,r6
 2012fa4:	1884b03a 	or	r2,r3,r2
 2012fa8:	28000726 	beq	r5,zero,2012fc8 <__fixdfsi+0x6c>
 2012fac:	0085c83a 	sub	r2,zero,r2
 2012fb0:	f800283a 	ret
 2012fb4:	00a00034 	movhi	r2,32768
 2012fb8:	10bfffc4 	addi	r2,r2,-1
 2012fbc:	2885883a 	add	r2,r5,r2
 2012fc0:	f800283a 	ret
 2012fc4:	0005883a 	mov	r2,zero
 2012fc8:	f800283a 	ret
 2012fcc:	008104c4 	movi	r2,1043
 2012fd0:	1185c83a 	sub	r2,r2,r6
 2012fd4:	1884d83a 	srl	r2,r3,r2
 2012fd8:	003ff306 	br	2012fa8 <__fixdfsi+0x4c>

02012fdc <__floatsidf>:
 2012fdc:	defffd04 	addi	sp,sp,-12
 2012fe0:	dfc00215 	stw	ra,8(sp)
 2012fe4:	dc400115 	stw	r17,4(sp)
 2012fe8:	dc000015 	stw	r16,0(sp)
 2012fec:	20002b26 	beq	r4,zero,201309c <__floatsidf+0xc0>
 2012ff0:	2023883a 	mov	r17,r4
 2012ff4:	2020d7fa 	srli	r16,r4,31
 2012ff8:	20002d16 	blt	r4,zero,20130b0 <__floatsidf+0xd4>
 2012ffc:	8809883a 	mov	r4,r17
 2013000:	20048ac0 	call	20048ac <__clzsi2>
 2013004:	01410784 	movi	r5,1054
 2013008:	288bc83a 	sub	r5,r5,r2
 201300c:	01010cc4 	movi	r4,1075
 2013010:	2149c83a 	sub	r4,r4,r5
 2013014:	00c007c4 	movi	r3,31
 2013018:	1900160e 	bge	r3,r4,2013074 <__floatsidf+0x98>
 201301c:	00c104c4 	movi	r3,1043
 2013020:	1947c83a 	sub	r3,r3,r5
 2013024:	88c6983a 	sll	r3,r17,r3
 2013028:	00800434 	movhi	r2,16
 201302c:	10bfffc4 	addi	r2,r2,-1
 2013030:	1886703a 	and	r3,r3,r2
 2013034:	2941ffcc 	andi	r5,r5,2047
 2013038:	800d883a 	mov	r6,r16
 201303c:	0005883a 	mov	r2,zero
 2013040:	280a953a 	slli	r5,r5,20
 2013044:	31803fcc 	andi	r6,r6,255
 2013048:	01000434 	movhi	r4,16
 201304c:	300c97fa 	slli	r6,r6,31
 2013050:	213fffc4 	addi	r4,r4,-1
 2013054:	1906703a 	and	r3,r3,r4
 2013058:	1946b03a 	or	r3,r3,r5
 201305c:	1986b03a 	or	r3,r3,r6
 2013060:	dfc00217 	ldw	ra,8(sp)
 2013064:	dc400117 	ldw	r17,4(sp)
 2013068:	dc000017 	ldw	r16,0(sp)
 201306c:	dec00304 	addi	sp,sp,12
 2013070:	f800283a 	ret
 2013074:	00c002c4 	movi	r3,11
 2013078:	1887c83a 	sub	r3,r3,r2
 201307c:	88c6d83a 	srl	r3,r17,r3
 2013080:	8904983a 	sll	r2,r17,r4
 2013084:	01000434 	movhi	r4,16
 2013088:	213fffc4 	addi	r4,r4,-1
 201308c:	2941ffcc 	andi	r5,r5,2047
 2013090:	1906703a 	and	r3,r3,r4
 2013094:	800d883a 	mov	r6,r16
 2013098:	003fe906 	br	2013040 <__floatsidf+0x64>
 201309c:	000d883a 	mov	r6,zero
 20130a0:	000b883a 	mov	r5,zero
 20130a4:	0007883a 	mov	r3,zero
 20130a8:	0005883a 	mov	r2,zero
 20130ac:	003fe406 	br	2013040 <__floatsidf+0x64>
 20130b0:	0123c83a 	sub	r17,zero,r4
 20130b4:	003fd106 	br	2012ffc <__floatsidf+0x20>

020130b8 <__floatunsidf>:
 20130b8:	defffe04 	addi	sp,sp,-8
 20130bc:	dc000015 	stw	r16,0(sp)
 20130c0:	dfc00115 	stw	ra,4(sp)
 20130c4:	2021883a 	mov	r16,r4
 20130c8:	20002226 	beq	r4,zero,2013154 <__floatunsidf+0x9c>
 20130cc:	20048ac0 	call	20048ac <__clzsi2>
 20130d0:	01010784 	movi	r4,1054
 20130d4:	2089c83a 	sub	r4,r4,r2
 20130d8:	01810cc4 	movi	r6,1075
 20130dc:	310dc83a 	sub	r6,r6,r4
 20130e0:	00c007c4 	movi	r3,31
 20130e4:	1980120e 	bge	r3,r6,2013130 <__floatunsidf+0x78>
 20130e8:	00c104c4 	movi	r3,1043
 20130ec:	1907c83a 	sub	r3,r3,r4
 20130f0:	80ca983a 	sll	r5,r16,r3
 20130f4:	00800434 	movhi	r2,16
 20130f8:	10bfffc4 	addi	r2,r2,-1
 20130fc:	2101ffcc 	andi	r4,r4,2047
 2013100:	0021883a 	mov	r16,zero
 2013104:	288a703a 	and	r5,r5,r2
 2013108:	2008953a 	slli	r4,r4,20
 201310c:	00c00434 	movhi	r3,16
 2013110:	18ffffc4 	addi	r3,r3,-1
 2013114:	28c6703a 	and	r3,r5,r3
 2013118:	8005883a 	mov	r2,r16
 201311c:	1906b03a 	or	r3,r3,r4
 2013120:	dfc00117 	ldw	ra,4(sp)
 2013124:	dc000017 	ldw	r16,0(sp)
 2013128:	dec00204 	addi	sp,sp,8
 201312c:	f800283a 	ret
 2013130:	00c002c4 	movi	r3,11
 2013134:	188bc83a 	sub	r5,r3,r2
 2013138:	814ad83a 	srl	r5,r16,r5
 201313c:	00c00434 	movhi	r3,16
 2013140:	18ffffc4 	addi	r3,r3,-1
 2013144:	81a0983a 	sll	r16,r16,r6
 2013148:	2101ffcc 	andi	r4,r4,2047
 201314c:	28ca703a 	and	r5,r5,r3
 2013150:	003fed06 	br	2013108 <__floatunsidf+0x50>
 2013154:	0009883a 	mov	r4,zero
 2013158:	000b883a 	mov	r5,zero
 201315c:	003fea06 	br	2013108 <__floatunsidf+0x50>

02013160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013160:	defffe04 	addi	sp,sp,-8
 2013164:	dfc00115 	stw	ra,4(sp)
 2013168:	df000015 	stw	fp,0(sp)
 201316c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013170:	d0a00b17 	ldw	r2,-32724(gp)
 2013174:	10000326 	beq	r2,zero,2013184 <alt_get_errno+0x24>
 2013178:	d0a00b17 	ldw	r2,-32724(gp)
 201317c:	103ee83a 	callr	r2
 2013180:	00000106 	br	2013188 <alt_get_errno+0x28>
 2013184:	d0a72e04 	addi	r2,gp,-25416
}
 2013188:	e037883a 	mov	sp,fp
 201318c:	dfc00117 	ldw	ra,4(sp)
 2013190:	df000017 	ldw	fp,0(sp)
 2013194:	dec00204 	addi	sp,sp,8
 2013198:	f800283a 	ret

0201319c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 201319c:	defffb04 	addi	sp,sp,-20
 20131a0:	dfc00415 	stw	ra,16(sp)
 20131a4:	df000315 	stw	fp,12(sp)
 20131a8:	df000304 	addi	fp,sp,12
 20131ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 20131b0:	e0bfff17 	ldw	r2,-4(fp)
 20131b4:	10000616 	blt	r2,zero,20131d0 <close+0x34>
 20131b8:	e0bfff17 	ldw	r2,-4(fp)
 20131bc:	10c00324 	muli	r3,r2,12
 20131c0:	008080b4 	movhi	r2,514
 20131c4:	10bda104 	addi	r2,r2,-2428
 20131c8:	1885883a 	add	r2,r3,r2
 20131cc:	00000106 	br	20131d4 <close+0x38>
 20131d0:	0005883a 	mov	r2,zero
 20131d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 20131d8:	e0bffd17 	ldw	r2,-12(fp)
 20131dc:	10001926 	beq	r2,zero,2013244 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 20131e0:	e0bffd17 	ldw	r2,-12(fp)
 20131e4:	10800017 	ldw	r2,0(r2)
 20131e8:	10800417 	ldw	r2,16(r2)
 20131ec:	10000626 	beq	r2,zero,2013208 <close+0x6c>
 20131f0:	e0bffd17 	ldw	r2,-12(fp)
 20131f4:	10800017 	ldw	r2,0(r2)
 20131f8:	10800417 	ldw	r2,16(r2)
 20131fc:	e13ffd17 	ldw	r4,-12(fp)
 2013200:	103ee83a 	callr	r2
 2013204:	00000106 	br	201320c <close+0x70>
 2013208:	0005883a 	mov	r2,zero
 201320c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2013210:	e13fff17 	ldw	r4,-4(fp)
 2013214:	20138540 	call	2013854 <alt_release_fd>
    if (rval < 0)
 2013218:	e0bffe17 	ldw	r2,-8(fp)
 201321c:	1000070e 	bge	r2,zero,201323c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 2013220:	20131600 	call	2013160 <alt_get_errno>
 2013224:	1007883a 	mov	r3,r2
 2013228:	e0bffe17 	ldw	r2,-8(fp)
 201322c:	0085c83a 	sub	r2,zero,r2
 2013230:	18800015 	stw	r2,0(r3)
      return -1;
 2013234:	00bfffc4 	movi	r2,-1
 2013238:	00000706 	br	2013258 <close+0xbc>
    }
    return 0;
 201323c:	0005883a 	mov	r2,zero
 2013240:	00000506 	br	2013258 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2013244:	20131600 	call	2013160 <alt_get_errno>
 2013248:	1007883a 	mov	r3,r2
 201324c:	00801444 	movi	r2,81
 2013250:	18800015 	stw	r2,0(r3)
    return -1;
 2013254:	00bfffc4 	movi	r2,-1
  }
}
 2013258:	e037883a 	mov	sp,fp
 201325c:	dfc00117 	ldw	ra,4(sp)
 2013260:	df000017 	ldw	fp,0(sp)
 2013264:	dec00204 	addi	sp,sp,8
 2013268:	f800283a 	ret

0201326c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 201326c:	defffc04 	addi	sp,sp,-16
 2013270:	df000315 	stw	fp,12(sp)
 2013274:	df000304 	addi	fp,sp,12
 2013278:	e13ffd15 	stw	r4,-12(fp)
 201327c:	e17ffe15 	stw	r5,-8(fp)
 2013280:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2013284:	e0bfff17 	ldw	r2,-4(fp)
}
 2013288:	e037883a 	mov	sp,fp
 201328c:	df000017 	ldw	fp,0(sp)
 2013290:	dec00104 	addi	sp,sp,4
 2013294:	f800283a 	ret

02013298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013298:	defffe04 	addi	sp,sp,-8
 201329c:	dfc00115 	stw	ra,4(sp)
 20132a0:	df000015 	stw	fp,0(sp)
 20132a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20132a8:	d0a00b17 	ldw	r2,-32724(gp)
 20132ac:	10000326 	beq	r2,zero,20132bc <alt_get_errno+0x24>
 20132b0:	d0a00b17 	ldw	r2,-32724(gp)
 20132b4:	103ee83a 	callr	r2
 20132b8:	00000106 	br	20132c0 <alt_get_errno+0x28>
 20132bc:	d0a72e04 	addi	r2,gp,-25416
}
 20132c0:	e037883a 	mov	sp,fp
 20132c4:	dfc00117 	ldw	ra,4(sp)
 20132c8:	df000017 	ldw	fp,0(sp)
 20132cc:	dec00204 	addi	sp,sp,8
 20132d0:	f800283a 	ret

020132d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 20132d4:	defffb04 	addi	sp,sp,-20
 20132d8:	dfc00415 	stw	ra,16(sp)
 20132dc:	df000315 	stw	fp,12(sp)
 20132e0:	df000304 	addi	fp,sp,12
 20132e4:	e13ffe15 	stw	r4,-8(fp)
 20132e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20132ec:	e0bffe17 	ldw	r2,-8(fp)
 20132f0:	10000616 	blt	r2,zero,201330c <fstat+0x38>
 20132f4:	e0bffe17 	ldw	r2,-8(fp)
 20132f8:	10c00324 	muli	r3,r2,12
 20132fc:	008080b4 	movhi	r2,514
 2013300:	10bda104 	addi	r2,r2,-2428
 2013304:	1885883a 	add	r2,r3,r2
 2013308:	00000106 	br	2013310 <fstat+0x3c>
 201330c:	0005883a 	mov	r2,zero
 2013310:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2013314:	e0bffd17 	ldw	r2,-12(fp)
 2013318:	10001026 	beq	r2,zero,201335c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 201331c:	e0bffd17 	ldw	r2,-12(fp)
 2013320:	10800017 	ldw	r2,0(r2)
 2013324:	10800817 	ldw	r2,32(r2)
 2013328:	10000726 	beq	r2,zero,2013348 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 201332c:	e0bffd17 	ldw	r2,-12(fp)
 2013330:	10800017 	ldw	r2,0(r2)
 2013334:	10800817 	ldw	r2,32(r2)
 2013338:	e17fff17 	ldw	r5,-4(fp)
 201333c:	e13ffd17 	ldw	r4,-12(fp)
 2013340:	103ee83a 	callr	r2
 2013344:	00000a06 	br	2013370 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2013348:	e0bfff17 	ldw	r2,-4(fp)
 201334c:	00c80004 	movi	r3,8192
 2013350:	10c00115 	stw	r3,4(r2)
      return 0;
 2013354:	0005883a 	mov	r2,zero
 2013358:	00000506 	br	2013370 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201335c:	20132980 	call	2013298 <alt_get_errno>
 2013360:	1007883a 	mov	r3,r2
 2013364:	00801444 	movi	r2,81
 2013368:	18800015 	stw	r2,0(r3)
    return -1;
 201336c:	00bfffc4 	movi	r2,-1
  }
}
 2013370:	e037883a 	mov	sp,fp
 2013374:	dfc00117 	ldw	ra,4(sp)
 2013378:	df000017 	ldw	fp,0(sp)
 201337c:	dec00204 	addi	sp,sp,8
 2013380:	f800283a 	ret

02013384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013384:	defffe04 	addi	sp,sp,-8
 2013388:	dfc00115 	stw	ra,4(sp)
 201338c:	df000015 	stw	fp,0(sp)
 2013390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013394:	d0a00b17 	ldw	r2,-32724(gp)
 2013398:	10000326 	beq	r2,zero,20133a8 <alt_get_errno+0x24>
 201339c:	d0a00b17 	ldw	r2,-32724(gp)
 20133a0:	103ee83a 	callr	r2
 20133a4:	00000106 	br	20133ac <alt_get_errno+0x28>
 20133a8:	d0a72e04 	addi	r2,gp,-25416
}
 20133ac:	e037883a 	mov	sp,fp
 20133b0:	dfc00117 	ldw	ra,4(sp)
 20133b4:	df000017 	ldw	fp,0(sp)
 20133b8:	dec00204 	addi	sp,sp,8
 20133bc:	f800283a 	ret

020133c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 20133c0:	deffed04 	addi	sp,sp,-76
 20133c4:	dfc01215 	stw	ra,72(sp)
 20133c8:	df001115 	stw	fp,68(sp)
 20133cc:	df001104 	addi	fp,sp,68
 20133d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20133d4:	e0bfff17 	ldw	r2,-4(fp)
 20133d8:	10000616 	blt	r2,zero,20133f4 <isatty+0x34>
 20133dc:	e0bfff17 	ldw	r2,-4(fp)
 20133e0:	10c00324 	muli	r3,r2,12
 20133e4:	008080b4 	movhi	r2,514
 20133e8:	10bda104 	addi	r2,r2,-2428
 20133ec:	1885883a 	add	r2,r3,r2
 20133f0:	00000106 	br	20133f8 <isatty+0x38>
 20133f4:	0005883a 	mov	r2,zero
 20133f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 20133fc:	e0bfef17 	ldw	r2,-68(fp)
 2013400:	10000e26 	beq	r2,zero,201343c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2013404:	e0bfef17 	ldw	r2,-68(fp)
 2013408:	10800017 	ldw	r2,0(r2)
 201340c:	10800817 	ldw	r2,32(r2)
 2013410:	1000021e 	bne	r2,zero,201341c <isatty+0x5c>
    {
      return 1;
 2013414:	00800044 	movi	r2,1
 2013418:	00000d06 	br	2013450 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 201341c:	e0bff004 	addi	r2,fp,-64
 2013420:	100b883a 	mov	r5,r2
 2013424:	e13fff17 	ldw	r4,-4(fp)
 2013428:	20132d40 	call	20132d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 201342c:	e0bff117 	ldw	r2,-60(fp)
 2013430:	10880020 	cmpeqi	r2,r2,8192
 2013434:	10803fcc 	andi	r2,r2,255
 2013438:	00000506 	br	2013450 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201343c:	20133840 	call	2013384 <alt_get_errno>
 2013440:	1007883a 	mov	r3,r2
 2013444:	00801444 	movi	r2,81
 2013448:	18800015 	stw	r2,0(r3)
    return 0;
 201344c:	0005883a 	mov	r2,zero
  }
}
 2013450:	e037883a 	mov	sp,fp
 2013454:	dfc00117 	ldw	ra,4(sp)
 2013458:	df000017 	ldw	fp,0(sp)
 201345c:	dec00204 	addi	sp,sp,8
 2013460:	f800283a 	ret

02013464 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2013464:	defffc04 	addi	sp,sp,-16
 2013468:	df000315 	stw	fp,12(sp)
 201346c:	df000304 	addi	fp,sp,12
 2013470:	e13ffd15 	stw	r4,-12(fp)
 2013474:	e17ffe15 	stw	r5,-8(fp)
 2013478:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 201347c:	e0fffe17 	ldw	r3,-8(fp)
 2013480:	e0bffd17 	ldw	r2,-12(fp)
 2013484:	18800c26 	beq	r3,r2,20134b8 <alt_load_section+0x54>
  {
    while( to != end )
 2013488:	00000806 	br	20134ac <alt_load_section+0x48>
    {
      *to++ = *from++;
 201348c:	e0bffe17 	ldw	r2,-8(fp)
 2013490:	10c00104 	addi	r3,r2,4
 2013494:	e0fffe15 	stw	r3,-8(fp)
 2013498:	e0fffd17 	ldw	r3,-12(fp)
 201349c:	19000104 	addi	r4,r3,4
 20134a0:	e13ffd15 	stw	r4,-12(fp)
 20134a4:	18c00017 	ldw	r3,0(r3)
 20134a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 20134ac:	e0fffe17 	ldw	r3,-8(fp)
 20134b0:	e0bfff17 	ldw	r2,-4(fp)
 20134b4:	18bff51e 	bne	r3,r2,201348c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 20134b8:	0001883a 	nop
 20134bc:	e037883a 	mov	sp,fp
 20134c0:	df000017 	ldw	fp,0(sp)
 20134c4:	dec00104 	addi	sp,sp,4
 20134c8:	f800283a 	ret

020134cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 20134cc:	defffe04 	addi	sp,sp,-8
 20134d0:	dfc00115 	stw	ra,4(sp)
 20134d4:	df000015 	stw	fp,0(sp)
 20134d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20134dc:	018080b4 	movhi	r6,514
 20134e0:	31824b04 	addi	r6,r6,2348
 20134e4:	014080b4 	movhi	r5,514
 20134e8:	297b6204 	addi	r5,r5,-4728
 20134ec:	010080b4 	movhi	r4,514
 20134f0:	21024b04 	addi	r4,r4,2348
 20134f4:	20134640 	call	2013464 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 20134f8:	01808034 	movhi	r6,512
 20134fc:	31809104 	addi	r6,r6,580
 2013500:	01408034 	movhi	r5,512
 2013504:	29400804 	addi	r5,r5,32
 2013508:	01008034 	movhi	r4,512
 201350c:	21000804 	addi	r4,r4,32
 2013510:	20134640 	call	2013464 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2013514:	018080b4 	movhi	r6,514
 2013518:	31bb6204 	addi	r6,r6,-4728
 201351c:	014080b4 	movhi	r5,514
 2013520:	2979aa04 	addi	r5,r5,-6488
 2013524:	010080b4 	movhi	r4,514
 2013528:	2139aa04 	addi	r4,r4,-6488
 201352c:	20134640 	call	2013464 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2013530:	201d0500 	call	201d050 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2013534:	201d2380 	call	201d238 <alt_icache_flush_all>
}
 2013538:	0001883a 	nop
 201353c:	e037883a 	mov	sp,fp
 2013540:	dfc00117 	ldw	ra,4(sp)
 2013544:	df000017 	ldw	fp,0(sp)
 2013548:	dec00204 	addi	sp,sp,8
 201354c:	f800283a 	ret

02013550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013550:	defffe04 	addi	sp,sp,-8
 2013554:	dfc00115 	stw	ra,4(sp)
 2013558:	df000015 	stw	fp,0(sp)
 201355c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013560:	d0a00b17 	ldw	r2,-32724(gp)
 2013564:	10000326 	beq	r2,zero,2013574 <alt_get_errno+0x24>
 2013568:	d0a00b17 	ldw	r2,-32724(gp)
 201356c:	103ee83a 	callr	r2
 2013570:	00000106 	br	2013578 <alt_get_errno+0x28>
 2013574:	d0a72e04 	addi	r2,gp,-25416
}
 2013578:	e037883a 	mov	sp,fp
 201357c:	dfc00117 	ldw	ra,4(sp)
 2013580:	df000017 	ldw	fp,0(sp)
 2013584:	dec00204 	addi	sp,sp,8
 2013588:	f800283a 	ret

0201358c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 201358c:	defff904 	addi	sp,sp,-28
 2013590:	dfc00615 	stw	ra,24(sp)
 2013594:	df000515 	stw	fp,20(sp)
 2013598:	df000504 	addi	fp,sp,20
 201359c:	e13ffd15 	stw	r4,-12(fp)
 20135a0:	e17ffe15 	stw	r5,-8(fp)
 20135a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 20135a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20135ac:	e0bffd17 	ldw	r2,-12(fp)
 20135b0:	10000616 	blt	r2,zero,20135cc <lseek+0x40>
 20135b4:	e0bffd17 	ldw	r2,-12(fp)
 20135b8:	10c00324 	muli	r3,r2,12
 20135bc:	008080b4 	movhi	r2,514
 20135c0:	10bda104 	addi	r2,r2,-2428
 20135c4:	1885883a 	add	r2,r3,r2
 20135c8:	00000106 	br	20135d0 <lseek+0x44>
 20135cc:	0005883a 	mov	r2,zero
 20135d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 20135d4:	e0bffc17 	ldw	r2,-16(fp)
 20135d8:	10001026 	beq	r2,zero,201361c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 20135dc:	e0bffc17 	ldw	r2,-16(fp)
 20135e0:	10800017 	ldw	r2,0(r2)
 20135e4:	10800717 	ldw	r2,28(r2)
 20135e8:	10000926 	beq	r2,zero,2013610 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 20135ec:	e0bffc17 	ldw	r2,-16(fp)
 20135f0:	10800017 	ldw	r2,0(r2)
 20135f4:	10800717 	ldw	r2,28(r2)
 20135f8:	e1bfff17 	ldw	r6,-4(fp)
 20135fc:	e17ffe17 	ldw	r5,-8(fp)
 2013600:	e13ffc17 	ldw	r4,-16(fp)
 2013604:	103ee83a 	callr	r2
 2013608:	e0bffb15 	stw	r2,-20(fp)
 201360c:	00000506 	br	2013624 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2013610:	00bfde84 	movi	r2,-134
 2013614:	e0bffb15 	stw	r2,-20(fp)
 2013618:	00000206 	br	2013624 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 201361c:	00bfebc4 	movi	r2,-81
 2013620:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2013624:	e0bffb17 	ldw	r2,-20(fp)
 2013628:	1000070e 	bge	r2,zero,2013648 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 201362c:	20135500 	call	2013550 <alt_get_errno>
 2013630:	1007883a 	mov	r3,r2
 2013634:	e0bffb17 	ldw	r2,-20(fp)
 2013638:	0085c83a 	sub	r2,zero,r2
 201363c:	18800015 	stw	r2,0(r3)
    rc = -1;
 2013640:	00bfffc4 	movi	r2,-1
 2013644:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2013648:	e0bffb17 	ldw	r2,-20(fp)
}
 201364c:	e037883a 	mov	sp,fp
 2013650:	dfc00117 	ldw	ra,4(sp)
 2013654:	df000017 	ldw	fp,0(sp)
 2013658:	dec00204 	addi	sp,sp,8
 201365c:	f800283a 	ret

02013660 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2013660:	defff904 	addi	sp,sp,-28
 2013664:	dfc00615 	stw	ra,24(sp)
 2013668:	df000515 	stw	fp,20(sp)
 201366c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2013670:	0009883a 	mov	r4,zero
 2013674:	201c06c0 	call	201c06c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2013678:	201461c0 	call	201461c <OSInit>
 201367c:	01000044 	movi	r4,1
 2013680:	2019a340 	call	2019a34 <OSSemCreate>
 2013684:	d0a73415 	stw	r2,-25392(gp)
 2013688:	01000044 	movi	r4,1
 201368c:	2019a340 	call	2019a34 <OSSemCreate>
 2013690:	d0a73615 	stw	r2,-25384(gp)
 2013694:	d0a72f04 	addi	r2,gp,-25412
 2013698:	e0bffc15 	stw	r2,-16(fp)
 201369c:	00800044 	movi	r2,1
 20136a0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 20136a4:	e0bffd0b 	ldhu	r2,-12(fp)
 20136a8:	1009883a 	mov	r4,r2
 20136ac:	2019a340 	call	2019a34 <OSSemCreate>
 20136b0:	1007883a 	mov	r3,r2
 20136b4:	e0bffc17 	ldw	r2,-16(fp)
 20136b8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20136bc:	201c0a40 	call	201c0a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20136c0:	018080b4 	movhi	r6,514
 20136c4:	31bb1104 	addi	r6,r6,-5052
 20136c8:	014080b4 	movhi	r5,514
 20136cc:	297b1104 	addi	r5,r5,-5052
 20136d0:	010080b4 	movhi	r4,514
 20136d4:	213b1104 	addi	r4,r4,-5052
 20136d8:	201d5d00 	call	201d5d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 20136dc:	201d1780 	call	201d178 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 20136e0:	010080b4 	movhi	r4,514
 20136e4:	21347604 	addi	r4,r4,-11816
 20136e8:	201e1600 	call	201e160 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 20136ec:	d0a73017 	ldw	r2,-25408(gp)
 20136f0:	d0e73117 	ldw	r3,-25404(gp)
 20136f4:	d1273217 	ldw	r4,-25400(gp)
 20136f8:	200d883a 	mov	r6,r4
 20136fc:	180b883a 	mov	r5,r3
 2013700:	1009883a 	mov	r4,r2
 2013704:	20027d00 	call	20027d0 <main>
 2013708:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 201370c:	01000044 	movi	r4,1
 2013710:	201319c0 	call	201319c <close>
  exit (result);
 2013714:	e13ffb17 	ldw	r4,-20(fp)
 2013718:	201e19c0 	call	201e19c <exit>

0201371c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201371c:	defffe04 	addi	sp,sp,-8
 2013720:	dfc00115 	stw	ra,4(sp)
 2013724:	df000015 	stw	fp,0(sp)
 2013728:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201372c:	d0a00b17 	ldw	r2,-32724(gp)
 2013730:	10000326 	beq	r2,zero,2013740 <alt_get_errno+0x24>
 2013734:	d0a00b17 	ldw	r2,-32724(gp)
 2013738:	103ee83a 	callr	r2
 201373c:	00000106 	br	2013744 <alt_get_errno+0x28>
 2013740:	d0a72e04 	addi	r2,gp,-25416
}
 2013744:	e037883a 	mov	sp,fp
 2013748:	dfc00117 	ldw	ra,4(sp)
 201374c:	df000017 	ldw	fp,0(sp)
 2013750:	dec00204 	addi	sp,sp,8
 2013754:	f800283a 	ret

02013758 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2013758:	defff904 	addi	sp,sp,-28
 201375c:	dfc00615 	stw	ra,24(sp)
 2013760:	df000515 	stw	fp,20(sp)
 2013764:	df000504 	addi	fp,sp,20
 2013768:	e13ffd15 	stw	r4,-12(fp)
 201376c:	e17ffe15 	stw	r5,-8(fp)
 2013770:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013774:	e0bffd17 	ldw	r2,-12(fp)
 2013778:	10000616 	blt	r2,zero,2013794 <read+0x3c>
 201377c:	e0bffd17 	ldw	r2,-12(fp)
 2013780:	10c00324 	muli	r3,r2,12
 2013784:	008080b4 	movhi	r2,514
 2013788:	10bda104 	addi	r2,r2,-2428
 201378c:	1885883a 	add	r2,r3,r2
 2013790:	00000106 	br	2013798 <read+0x40>
 2013794:	0005883a 	mov	r2,zero
 2013798:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 201379c:	e0bffb17 	ldw	r2,-20(fp)
 20137a0:	10002226 	beq	r2,zero,201382c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20137a4:	e0bffb17 	ldw	r2,-20(fp)
 20137a8:	10800217 	ldw	r2,8(r2)
 20137ac:	108000cc 	andi	r2,r2,3
 20137b0:	10800060 	cmpeqi	r2,r2,1
 20137b4:	1000181e 	bne	r2,zero,2013818 <read+0xc0>
        (fd->dev->read))
 20137b8:	e0bffb17 	ldw	r2,-20(fp)
 20137bc:	10800017 	ldw	r2,0(r2)
 20137c0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20137c4:	10001426 	beq	r2,zero,2013818 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 20137c8:	e0bffb17 	ldw	r2,-20(fp)
 20137cc:	10800017 	ldw	r2,0(r2)
 20137d0:	10800517 	ldw	r2,20(r2)
 20137d4:	e0ffff17 	ldw	r3,-4(fp)
 20137d8:	180d883a 	mov	r6,r3
 20137dc:	e17ffe17 	ldw	r5,-8(fp)
 20137e0:	e13ffb17 	ldw	r4,-20(fp)
 20137e4:	103ee83a 	callr	r2
 20137e8:	e0bffc15 	stw	r2,-16(fp)
 20137ec:	e0bffc17 	ldw	r2,-16(fp)
 20137f0:	1000070e 	bge	r2,zero,2013810 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 20137f4:	201371c0 	call	201371c <alt_get_errno>
 20137f8:	1007883a 	mov	r3,r2
 20137fc:	e0bffc17 	ldw	r2,-16(fp)
 2013800:	0085c83a 	sub	r2,zero,r2
 2013804:	18800015 	stw	r2,0(r3)
          return -1;
 2013808:	00bfffc4 	movi	r2,-1
 201380c:	00000c06 	br	2013840 <read+0xe8>
        }
        return rval;
 2013810:	e0bffc17 	ldw	r2,-16(fp)
 2013814:	00000a06 	br	2013840 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2013818:	201371c0 	call	201371c <alt_get_errno>
 201381c:	1007883a 	mov	r3,r2
 2013820:	00800344 	movi	r2,13
 2013824:	18800015 	stw	r2,0(r3)
 2013828:	00000406 	br	201383c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 201382c:	201371c0 	call	201371c <alt_get_errno>
 2013830:	1007883a 	mov	r3,r2
 2013834:	00801444 	movi	r2,81
 2013838:	18800015 	stw	r2,0(r3)
  }
  return -1;
 201383c:	00bfffc4 	movi	r2,-1
}
 2013840:	e037883a 	mov	sp,fp
 2013844:	dfc00117 	ldw	ra,4(sp)
 2013848:	df000017 	ldw	fp,0(sp)
 201384c:	dec00204 	addi	sp,sp,8
 2013850:	f800283a 	ret

02013854 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2013854:	defffe04 	addi	sp,sp,-8
 2013858:	df000115 	stw	fp,4(sp)
 201385c:	df000104 	addi	fp,sp,4
 2013860:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2013864:	e0bfff17 	ldw	r2,-4(fp)
 2013868:	108000d0 	cmplti	r2,r2,3
 201386c:	10000d1e 	bne	r2,zero,20138a4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2013870:	008080b4 	movhi	r2,514
 2013874:	10bda104 	addi	r2,r2,-2428
 2013878:	e0ffff17 	ldw	r3,-4(fp)
 201387c:	18c00324 	muli	r3,r3,12
 2013880:	10c5883a 	add	r2,r2,r3
 2013884:	10800204 	addi	r2,r2,8
 2013888:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 201388c:	008080b4 	movhi	r2,514
 2013890:	10bda104 	addi	r2,r2,-2428
 2013894:	e0ffff17 	ldw	r3,-4(fp)
 2013898:	18c00324 	muli	r3,r3,12
 201389c:	10c5883a 	add	r2,r2,r3
 20138a0:	10000015 	stw	zero,0(r2)
  }
}
 20138a4:	0001883a 	nop
 20138a8:	e037883a 	mov	sp,fp
 20138ac:	df000017 	ldw	fp,0(sp)
 20138b0:	dec00104 	addi	sp,sp,4
 20138b4:	f800283a 	ret

020138b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 20138b8:	defff904 	addi	sp,sp,-28
 20138bc:	df000615 	stw	fp,24(sp)
 20138c0:	df000604 	addi	fp,sp,24
 20138c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20138c8:	0005303a 	rdctl	r2,status
 20138cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20138d0:	e0fffe17 	ldw	r3,-8(fp)
 20138d4:	00bfff84 	movi	r2,-2
 20138d8:	1884703a 	and	r2,r3,r2
 20138dc:	1001703a 	wrctl	status,r2
  
  return context;
 20138e0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 20138e4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 20138e8:	d0a00c17 	ldw	r2,-32720(gp)
 20138ec:	10c000c4 	addi	r3,r2,3
 20138f0:	00bfff04 	movi	r2,-4
 20138f4:	1884703a 	and	r2,r3,r2
 20138f8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 20138fc:	d0e00c17 	ldw	r3,-32720(gp)
 2013900:	e0bfff17 	ldw	r2,-4(fp)
 2013904:	1887883a 	add	r3,r3,r2
 2013908:	00810034 	movhi	r2,1024
 201390c:	10800004 	addi	r2,r2,0
 2013910:	10c0062e 	bgeu	r2,r3,201392c <sbrk+0x74>
 2013914:	e0bffb17 	ldw	r2,-20(fp)
 2013918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201391c:	e0bffa17 	ldw	r2,-24(fp)
 2013920:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2013924:	00bfffc4 	movi	r2,-1
 2013928:	00000b06 	br	2013958 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 201392c:	d0a00c17 	ldw	r2,-32720(gp)
 2013930:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 2013934:	d0e00c17 	ldw	r3,-32720(gp)
 2013938:	e0bfff17 	ldw	r2,-4(fp)
 201393c:	1885883a 	add	r2,r3,r2
 2013940:	d0a00c15 	stw	r2,-32720(gp)
 2013944:	e0bffb17 	ldw	r2,-20(fp)
 2013948:	e0bffc15 	stw	r2,-16(fp)
 201394c:	e0bffc17 	ldw	r2,-16(fp)
 2013950:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2013954:	e0bffd17 	ldw	r2,-12(fp)
} 
 2013958:	e037883a 	mov	sp,fp
 201395c:	df000017 	ldw	fp,0(sp)
 2013960:	dec00104 	addi	sp,sp,4
 2013964:	f800283a 	ret

02013968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013968:	defffe04 	addi	sp,sp,-8
 201396c:	dfc00115 	stw	ra,4(sp)
 2013970:	df000015 	stw	fp,0(sp)
 2013974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013978:	d0a00b17 	ldw	r2,-32724(gp)
 201397c:	10000326 	beq	r2,zero,201398c <alt_get_errno+0x24>
 2013980:	d0a00b17 	ldw	r2,-32724(gp)
 2013984:	103ee83a 	callr	r2
 2013988:	00000106 	br	2013990 <alt_get_errno+0x28>
 201398c:	d0a72e04 	addi	r2,gp,-25416
}
 2013990:	e037883a 	mov	sp,fp
 2013994:	dfc00117 	ldw	ra,4(sp)
 2013998:	df000017 	ldw	fp,0(sp)
 201399c:	dec00204 	addi	sp,sp,8
 20139a0:	f800283a 	ret

020139a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 20139a4:	defff904 	addi	sp,sp,-28
 20139a8:	dfc00615 	stw	ra,24(sp)
 20139ac:	df000515 	stw	fp,20(sp)
 20139b0:	df000504 	addi	fp,sp,20
 20139b4:	e13ffd15 	stw	r4,-12(fp)
 20139b8:	e17ffe15 	stw	r5,-8(fp)
 20139bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20139c0:	e0bffd17 	ldw	r2,-12(fp)
 20139c4:	10000616 	blt	r2,zero,20139e0 <write+0x3c>
 20139c8:	e0bffd17 	ldw	r2,-12(fp)
 20139cc:	10c00324 	muli	r3,r2,12
 20139d0:	008080b4 	movhi	r2,514
 20139d4:	10bda104 	addi	r2,r2,-2428
 20139d8:	1885883a 	add	r2,r3,r2
 20139dc:	00000106 	br	20139e4 <write+0x40>
 20139e0:	0005883a 	mov	r2,zero
 20139e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20139e8:	e0bffb17 	ldw	r2,-20(fp)
 20139ec:	10002126 	beq	r2,zero,2013a74 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20139f0:	e0bffb17 	ldw	r2,-20(fp)
 20139f4:	10800217 	ldw	r2,8(r2)
 20139f8:	108000cc 	andi	r2,r2,3
 20139fc:	10001826 	beq	r2,zero,2013a60 <write+0xbc>
 2013a00:	e0bffb17 	ldw	r2,-20(fp)
 2013a04:	10800017 	ldw	r2,0(r2)
 2013a08:	10800617 	ldw	r2,24(r2)
 2013a0c:	10001426 	beq	r2,zero,2013a60 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2013a10:	e0bffb17 	ldw	r2,-20(fp)
 2013a14:	10800017 	ldw	r2,0(r2)
 2013a18:	10800617 	ldw	r2,24(r2)
 2013a1c:	e0ffff17 	ldw	r3,-4(fp)
 2013a20:	180d883a 	mov	r6,r3
 2013a24:	e17ffe17 	ldw	r5,-8(fp)
 2013a28:	e13ffb17 	ldw	r4,-20(fp)
 2013a2c:	103ee83a 	callr	r2
 2013a30:	e0bffc15 	stw	r2,-16(fp)
 2013a34:	e0bffc17 	ldw	r2,-16(fp)
 2013a38:	1000070e 	bge	r2,zero,2013a58 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 2013a3c:	20139680 	call	2013968 <alt_get_errno>
 2013a40:	1007883a 	mov	r3,r2
 2013a44:	e0bffc17 	ldw	r2,-16(fp)
 2013a48:	0085c83a 	sub	r2,zero,r2
 2013a4c:	18800015 	stw	r2,0(r3)
        return -1;
 2013a50:	00bfffc4 	movi	r2,-1
 2013a54:	00000c06 	br	2013a88 <write+0xe4>
      }
      return rval;
 2013a58:	e0bffc17 	ldw	r2,-16(fp)
 2013a5c:	00000a06 	br	2013a88 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2013a60:	20139680 	call	2013968 <alt_get_errno>
 2013a64:	1007883a 	mov	r3,r2
 2013a68:	00800344 	movi	r2,13
 2013a6c:	18800015 	stw	r2,0(r3)
 2013a70:	00000406 	br	2013a84 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2013a74:	20139680 	call	2013968 <alt_get_errno>
 2013a78:	1007883a 	mov	r3,r2
 2013a7c:	00801444 	movi	r2,81
 2013a80:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2013a84:	00bfffc4 	movi	r2,-1
}
 2013a88:	e037883a 	mov	sp,fp
 2013a8c:	dfc00117 	ldw	ra,4(sp)
 2013a90:	df000017 	ldw	fp,0(sp)
 2013a94:	dec00204 	addi	sp,sp,8
 2013a98:	f800283a 	ret

02013a9c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2013a9c:	deffdf04 	addi	sp,sp,-132
 2013aa0:	dfc02015 	stw	ra,128(sp)
 2013aa4:	df001f15 	stw	fp,124(sp)
 2013aa8:	df001f04 	addi	fp,sp,124
 2013aac:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2013ab0:	e0bfe204 	addi	r2,fp,-120
 2013ab4:	100b883a 	mov	r5,r2
 2013ab8:	01003fc4 	movi	r4,255
 2013abc:	201b9bc0 	call	201b9bc <OSTaskQuery>
 2013ac0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2013ac4:	e0bffe83 	ldbu	r2,-6(fp)
 2013ac8:	10803fcc 	andi	r2,r2,255
 2013acc:	10001e1e 	bne	r2,zero,2013b48 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 2013ad0:	e0bfee83 	ldbu	r2,-70(fp)
 2013ad4:	10803fcc 	andi	r2,r2,255
 2013ad8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2013adc:	d0a73417 	ldw	r2,-25392(gp)
 2013ae0:	e0fffd04 	addi	r3,fp,-12
 2013ae4:	180b883a 	mov	r5,r3
 2013ae8:	1009883a 	mov	r4,r2
 2013aec:	201a1d40 	call	201a1d4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2013af0:	e0bffe43 	ldbu	r2,-7(fp)
 2013af4:	10803fcc 	andi	r2,r2,255
 2013af8:	10000726 	beq	r2,zero,2013b18 <__env_lock+0x7c>
 2013afc:	d0a00d17 	ldw	r2,-32716(gp)
 2013b00:	e0ffe117 	ldw	r3,-124(fp)
 2013b04:	1880041e 	bne	r3,r2,2013b18 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 2013b08:	d0a73317 	ldw	r2,-25396(gp)
 2013b0c:	10800044 	addi	r2,r2,1
 2013b10:	d0a73315 	stw	r2,-25396(gp)
 2013b14:	00000a06 	br	2013b40 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2013b18:	d0a73417 	ldw	r2,-25392(gp)
 2013b1c:	e0fffe84 	addi	r3,fp,-6
 2013b20:	180d883a 	mov	r6,r3
 2013b24:	000b883a 	mov	r5,zero
 2013b28:	1009883a 	mov	r4,r2
 2013b2c:	2019d4c0 	call	2019d4c <OSSemPend>
    locks  = 1;
 2013b30:	00800044 	movi	r2,1
 2013b34:	d0a73315 	stw	r2,-25396(gp)
    lockid = id;
 2013b38:	e0bfe117 	ldw	r2,-124(fp)
 2013b3c:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2013b40:	0001883a 	nop
 2013b44:	00000106 	br	2013b4c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2013b48:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2013b4c:	e037883a 	mov	sp,fp
 2013b50:	dfc00117 	ldw	ra,4(sp)
 2013b54:	df000017 	ldw	fp,0(sp)
 2013b58:	dec00204 	addi	sp,sp,8
 2013b5c:	f800283a 	ret

02013b60 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2013b60:	defffd04 	addi	sp,sp,-12
 2013b64:	dfc00215 	stw	ra,8(sp)
 2013b68:	df000115 	stw	fp,4(sp)
 2013b6c:	df000104 	addi	fp,sp,4
 2013b70:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2013b74:	d0a73317 	ldw	r2,-25396(gp)
 2013b78:	10000b26 	beq	r2,zero,2013ba8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2013b7c:	d0a73317 	ldw	r2,-25396(gp)
 2013b80:	10bfffc4 	addi	r2,r2,-1
 2013b84:	d0a73315 	stw	r2,-25396(gp)
 2013b88:	d0a73317 	ldw	r2,-25396(gp)
 2013b8c:	1000071e 	bne	r2,zero,2013bac <__env_unlock+0x4c>
  {
    lockid = -1;
 2013b90:	00bfffc4 	movi	r2,-1
 2013b94:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
 2013b98:	d0a73417 	ldw	r2,-25392(gp)
 2013b9c:	1009883a 	mov	r4,r2
 2013ba0:	201a0c40 	call	201a0c4 <OSSemPost>
 2013ba4:	00000106 	br	2013bac <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 2013ba8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2013bac:	e037883a 	mov	sp,fp
 2013bb0:	dfc00117 	ldw	ra,4(sp)
 2013bb4:	df000017 	ldw	fp,0(sp)
 2013bb8:	dec00204 	addi	sp,sp,8
 2013bbc:	f800283a 	ret

02013bc0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2013bc0:	deffdb04 	addi	sp,sp,-148
 2013bc4:	dfc02415 	stw	ra,144(sp)
 2013bc8:	df002315 	stw	fp,140(sp)
 2013bcc:	df002304 	addi	fp,sp,140
 2013bd0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013bd4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2013bd8:	d0a73743 	ldbu	r2,-25379(gp)
 2013bdc:	10803fcc 	andi	r2,r2,255
 2013be0:	10800060 	cmpeqi	r2,r2,1
 2013be4:	10003626 	beq	r2,zero,2013cc0 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2013be8:	e0bfe204 	addi	r2,fp,-120
 2013bec:	100b883a 	mov	r5,r2
 2013bf0:	01003fc4 	movi	r4,255
 2013bf4:	201b9bc0 	call	201b9bc <OSTaskQuery>
 2013bf8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2013bfc:	e0bffe83 	ldbu	r2,-6(fp)
 2013c00:	10803fcc 	andi	r2,r2,255
 2013c04:	1000301e 	bne	r2,zero,2013cc8 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 2013c08:	e0bfee83 	ldbu	r2,-70(fp)
 2013c0c:	10803fcc 	andi	r2,r2,255
 2013c10:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 2013c14:	d0a73617 	ldw	r2,-25384(gp)
 2013c18:	e0fffd04 	addi	r3,fp,-12
 2013c1c:	180b883a 	mov	r5,r3
 2013c20:	1009883a 	mov	r4,r2
 2013c24:	201a1d40 	call	201a1d4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013c28:	0005303a 	rdctl	r2,status
 2013c2c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013c30:	e0ffe117 	ldw	r3,-124(fp)
 2013c34:	00bfff84 	movi	r2,-2
 2013c38:	1884703a 	and	r2,r3,r2
 2013c3c:	1001703a 	wrctl	status,r2
  
  return context;
 2013c40:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 2013c44:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2013c48:	e0bffd0b 	ldhu	r2,-12(fp)
 2013c4c:	10bfffcc 	andi	r2,r2,65535
 2013c50:	10000b1e 	bne	r2,zero,2013c80 <__malloc_lock+0xc0>
 2013c54:	d0a00e17 	ldw	r2,-32712(gp)
 2013c58:	e0ffde17 	ldw	r3,-136(fp)
 2013c5c:	1880081e 	bne	r3,r2,2013c80 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 2013c60:	d0a73517 	ldw	r2,-25388(gp)
 2013c64:	10800044 	addi	r2,r2,1
 2013c68:	d0a73515 	stw	r2,-25388(gp)
 2013c6c:	e0bfdd17 	ldw	r2,-140(fp)
 2013c70:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013c74:	e0bfdf17 	ldw	r2,-132(fp)
 2013c78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 2013c7c:	00000e06 	br	2013cb8 <__malloc_lock+0xf8>
 2013c80:	e0bfdd17 	ldw	r2,-140(fp)
 2013c84:	e0bfe015 	stw	r2,-128(fp)
 2013c88:	e0bfe017 	ldw	r2,-128(fp)
 2013c8c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2013c90:	d0a73617 	ldw	r2,-25384(gp)
 2013c94:	e0fffe84 	addi	r3,fp,-6
 2013c98:	180d883a 	mov	r6,r3
 2013c9c:	000b883a 	mov	r5,zero
 2013ca0:	1009883a 	mov	r4,r2
 2013ca4:	2019d4c0 	call	2019d4c <OSSemPend>
    locks  = 1;
 2013ca8:	00800044 	movi	r2,1
 2013cac:	d0a73515 	stw	r2,-25388(gp)
    lockid = id;
 2013cb0:	e0bfde17 	ldw	r2,-136(fp)
 2013cb4:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 2013cb8:	0001883a 	nop
 2013cbc:	00000306 	br	2013ccc <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 2013cc0:	0001883a 	nop
 2013cc4:	00000106 	br	2013ccc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 2013cc8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2013ccc:	e037883a 	mov	sp,fp
 2013cd0:	dfc00117 	ldw	ra,4(sp)
 2013cd4:	df000017 	ldw	fp,0(sp)
 2013cd8:	dec00204 	addi	sp,sp,8
 2013cdc:	f800283a 	ret

02013ce0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2013ce0:	defff804 	addi	sp,sp,-32
 2013ce4:	dfc00715 	stw	ra,28(sp)
 2013ce8:	df000615 	stw	fp,24(sp)
 2013cec:	df000604 	addi	fp,sp,24
 2013cf0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013cf4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2013cf8:	d0a73743 	ldbu	r2,-25379(gp)
 2013cfc:	10803fcc 	andi	r2,r2,255
 2013d00:	10800060 	cmpeqi	r2,r2,1
 2013d04:	10002326 	beq	r2,zero,2013d94 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013d08:	0005303a 	rdctl	r2,status
 2013d0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013d10:	e0fffe17 	ldw	r3,-8(fp)
 2013d14:	00bfff84 	movi	r2,-2
 2013d18:	1884703a 	and	r2,r3,r2
 2013d1c:	1001703a 	wrctl	status,r2
  
  return context;
 2013d20:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 2013d24:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 2013d28:	d0a73517 	ldw	r2,-25388(gp)
 2013d2c:	1000051e 	bne	r2,zero,2013d44 <__malloc_unlock+0x64>
 2013d30:	e0bffa17 	ldw	r2,-24(fp)
 2013d34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013d38:	e0bffb17 	ldw	r2,-20(fp)
 2013d3c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 2013d40:	00001506 	br	2013d98 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 2013d44:	d0a73517 	ldw	r2,-25388(gp)
 2013d48:	10bfffc4 	addi	r2,r2,-1
 2013d4c:	d0a73515 	stw	r2,-25388(gp)
 2013d50:	d0a73517 	ldw	r2,-25388(gp)
 2013d54:	10000a1e 	bne	r2,zero,2013d80 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 2013d58:	00bfffc4 	movi	r2,-1
 2013d5c:	d0a00e15 	stw	r2,-32712(gp)
 2013d60:	e0bffa17 	ldw	r2,-24(fp)
 2013d64:	e0bffc15 	stw	r2,-16(fp)
 2013d68:	e0bffc17 	ldw	r2,-16(fp)
 2013d6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2013d70:	d0a73617 	ldw	r2,-25384(gp)
 2013d74:	1009883a 	mov	r4,r2
 2013d78:	201a0c40 	call	201a0c4 <OSSemPost>
 2013d7c:	00000606 	br	2013d98 <__malloc_unlock+0xb8>
 2013d80:	e0bffa17 	ldw	r2,-24(fp)
 2013d84:	e0bffd15 	stw	r2,-12(fp)
 2013d88:	e0bffd17 	ldw	r2,-12(fp)
 2013d8c:	1001703a 	wrctl	status,r2
 2013d90:	00000106 	br	2013d98 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 2013d94:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2013d98:	e037883a 	mov	sp,fp
 2013d9c:	dfc00117 	ldw	ra,4(sp)
 2013da0:	df000017 	ldw	fp,0(sp)
 2013da4:	dec00204 	addi	sp,sp,8
 2013da8:	f800283a 	ret

02013dac <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2013dac:	defff704 	addi	sp,sp,-36
 2013db0:	dfc00815 	stw	ra,32(sp)
 2013db4:	df000715 	stw	fp,28(sp)
 2013db8:	df000704 	addi	fp,sp,28
 2013dbc:	e13ffd15 	stw	r4,-12(fp)
 2013dc0:	e17ffe15 	stw	r5,-8(fp)
 2013dc4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013dc8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013dcc:	e0bfff17 	ldw	r2,-4(fp)
 2013dd0:	1000021e 	bne	r2,zero,2013ddc <OSEventNameGet+0x30>
        return (0);
 2013dd4:	0005883a 	mov	r2,zero
 2013dd8:	00003706 	br	2013eb8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2013ddc:	e0bffd17 	ldw	r2,-12(fp)
 2013de0:	1000051e 	bne	r2,zero,2013df8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2013de4:	e0bfff17 	ldw	r2,-4(fp)
 2013de8:	00c00104 	movi	r3,4
 2013dec:	10c00005 	stb	r3,0(r2)
        return (0);
 2013df0:	0005883a 	mov	r2,zero
 2013df4:	00003006 	br	2013eb8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013df8:	e0bffe17 	ldw	r2,-8(fp)
 2013dfc:	1000051e 	bne	r2,zero,2013e14 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2013e00:	e0bfff17 	ldw	r2,-4(fp)
 2013e04:	00c00304 	movi	r3,12
 2013e08:	10c00005 	stb	r3,0(r2)
        return (0);
 2013e0c:	0005883a 	mov	r2,zero
 2013e10:	00002906 	br	2013eb8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013e14:	d0a74503 	ldbu	r2,-25324(gp)
 2013e18:	10803fcc 	andi	r2,r2,255
 2013e1c:	10000526 	beq	r2,zero,2013e34 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 2013e20:	e0bfff17 	ldw	r2,-4(fp)
 2013e24:	00c00444 	movi	r3,17
 2013e28:	10c00005 	stb	r3,0(r2)
        return (0);
 2013e2c:	0005883a 	mov	r2,zero
 2013e30:	00002106 	br	2013eb8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 2013e34:	e0bffd17 	ldw	r2,-12(fp)
 2013e38:	10800003 	ldbu	r2,0(r2)
 2013e3c:	10803fcc 	andi	r2,r2,255
 2013e40:	10bfffc4 	addi	r2,r2,-1
 2013e44:	10800128 	cmpgeui	r2,r2,4
 2013e48:	10000526 	beq	r2,zero,2013e60 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2013e4c:	e0bfff17 	ldw	r2,-4(fp)
 2013e50:	00c00044 	movi	r3,1
 2013e54:	10c00005 	stb	r3,0(r2)
             return (0);
 2013e58:	0005883a 	mov	r2,zero
 2013e5c:	00001606 	br	2013eb8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2013e60:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013e64:	0005303a 	rdctl	r2,status
 2013e68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013e6c:	e0fffb17 	ldw	r3,-20(fp)
 2013e70:	00bfff84 	movi	r2,-2
 2013e74:	1884703a 	and	r2,r3,r2
 2013e78:	1001703a 	wrctl	status,r2
  
  return context;
 2013e7c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2013e80:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2013e84:	e0bffd17 	ldw	r2,-12(fp)
 2013e88:	10800384 	addi	r2,r2,14
 2013e8c:	100b883a 	mov	r5,r2
 2013e90:	e13ffe17 	ldw	r4,-8(fp)
 2013e94:	20158300 	call	2015830 <OS_StrCopy>
 2013e98:	e0bffa05 	stb	r2,-24(fp)
 2013e9c:	e0bff917 	ldw	r2,-28(fp)
 2013ea0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ea4:	e0bffc17 	ldw	r2,-16(fp)
 2013ea8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013eac:	e0bfff17 	ldw	r2,-4(fp)
 2013eb0:	10000005 	stb	zero,0(r2)
    return (len);
 2013eb4:	e0bffa03 	ldbu	r2,-24(fp)
}
 2013eb8:	e037883a 	mov	sp,fp
 2013ebc:	dfc00117 	ldw	ra,4(sp)
 2013ec0:	df000017 	ldw	fp,0(sp)
 2013ec4:	dec00204 	addi	sp,sp,8
 2013ec8:	f800283a 	ret

02013ecc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2013ecc:	defff604 	addi	sp,sp,-40
 2013ed0:	dfc00915 	stw	ra,36(sp)
 2013ed4:	df000815 	stw	fp,32(sp)
 2013ed8:	df000804 	addi	fp,sp,32
 2013edc:	e13ffd15 	stw	r4,-12(fp)
 2013ee0:	e17ffe15 	stw	r5,-8(fp)
 2013ee4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013ee8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013eec:	e0bfff17 	ldw	r2,-4(fp)
 2013ef0:	10004026 	beq	r2,zero,2013ff4 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2013ef4:	e0bffd17 	ldw	r2,-12(fp)
 2013ef8:	1000041e 	bne	r2,zero,2013f0c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2013efc:	e0bfff17 	ldw	r2,-4(fp)
 2013f00:	00c00104 	movi	r3,4
 2013f04:	10c00005 	stb	r3,0(r2)
        return;
 2013f08:	00003b06 	br	2013ff8 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013f0c:	e0bffe17 	ldw	r2,-8(fp)
 2013f10:	1000041e 	bne	r2,zero,2013f24 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2013f14:	e0bfff17 	ldw	r2,-4(fp)
 2013f18:	00c00304 	movi	r3,12
 2013f1c:	10c00005 	stb	r3,0(r2)
        return;
 2013f20:	00003506 	br	2013ff8 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2013f24:	d0a74503 	ldbu	r2,-25324(gp)
 2013f28:	10803fcc 	andi	r2,r2,255
 2013f2c:	10000426 	beq	r2,zero,2013f40 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2013f30:	e0bfff17 	ldw	r2,-4(fp)
 2013f34:	00c00484 	movi	r3,18
 2013f38:	10c00005 	stb	r3,0(r2)
        return;
 2013f3c:	00002e06 	br	2013ff8 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 2013f40:	e0bffd17 	ldw	r2,-12(fp)
 2013f44:	10800003 	ldbu	r2,0(r2)
 2013f48:	10803fcc 	andi	r2,r2,255
 2013f4c:	10bfffc4 	addi	r2,r2,-1
 2013f50:	10800128 	cmpgeui	r2,r2,4
 2013f54:	10000426 	beq	r2,zero,2013f68 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2013f58:	e0bfff17 	ldw	r2,-4(fp)
 2013f5c:	00c00044 	movi	r3,1
 2013f60:	10c00005 	stb	r3,0(r2)
             return;
 2013f64:	00002406 	br	2013ff8 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 2013f68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013f6c:	0005303a 	rdctl	r2,status
 2013f70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013f74:	e0fffc17 	ldw	r3,-16(fp)
 2013f78:	00bfff84 	movi	r2,-2
 2013f7c:	1884703a 	and	r2,r3,r2
 2013f80:	1001703a 	wrctl	status,r2
  
  return context;
 2013f84:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2013f88:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2013f8c:	e13ffe17 	ldw	r4,-8(fp)
 2013f90:	20158a40 	call	20158a4 <OS_StrLen>
 2013f94:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2013f98:	e0bffa03 	ldbu	r2,-24(fp)
 2013f9c:	10800830 	cmpltui	r2,r2,32
 2013fa0:	1000081e 	bne	r2,zero,2013fc4 <OSEventNameSet+0xf8>
 2013fa4:	e0bff817 	ldw	r2,-32(fp)
 2013fa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013fac:	e0bff917 	ldw	r2,-28(fp)
 2013fb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2013fb4:	e0bfff17 	ldw	r2,-4(fp)
 2013fb8:	00c002c4 	movi	r3,11
 2013fbc:	10c00005 	stb	r3,0(r2)
        return;
 2013fc0:	00000d06 	br	2013ff8 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2013fc4:	e0bffd17 	ldw	r2,-12(fp)
 2013fc8:	10800384 	addi	r2,r2,14
 2013fcc:	e17ffe17 	ldw	r5,-8(fp)
 2013fd0:	1009883a 	mov	r4,r2
 2013fd4:	20158300 	call	2015830 <OS_StrCopy>
 2013fd8:	e0bff817 	ldw	r2,-32(fp)
 2013fdc:	e0bffb15 	stw	r2,-20(fp)
 2013fe0:	e0bffb17 	ldw	r2,-20(fp)
 2013fe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013fe8:	e0bfff17 	ldw	r2,-4(fp)
 2013fec:	10000005 	stb	zero,0(r2)
 2013ff0:	00000106 	br	2013ff8 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2013ff4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2013ff8:	e037883a 	mov	sp,fp
 2013ffc:	dfc00117 	ldw	ra,4(sp)
 2014000:	df000017 	ldw	fp,0(sp)
 2014004:	dec00204 	addi	sp,sp,8
 2014008:	f800283a 	ret

0201400c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 201400c:	deffed04 	addi	sp,sp,-76
 2014010:	dfc01215 	stw	ra,72(sp)
 2014014:	df001115 	stw	fp,68(sp)
 2014018:	df001104 	addi	fp,sp,68
 201401c:	e13ffc15 	stw	r4,-16(fp)
 2014020:	e17ffd15 	stw	r5,-12(fp)
 2014024:	e1bffe15 	stw	r6,-8(fp)
 2014028:	3805883a 	mov	r2,r7
 201402c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 2014030:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 2014034:	e0800217 	ldw	r2,8(fp)
 2014038:	1000021e 	bne	r2,zero,2014044 <OSEventPendMulti+0x38>
        return (0);
 201403c:	0005883a 	mov	r2,zero
 2014040:	00017106 	br	2014608 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 2014044:	e0bffc17 	ldw	r2,-16(fp)
 2014048:	1000051e 	bne	r2,zero,2014060 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 201404c:	e0800217 	ldw	r2,8(fp)
 2014050:	00c00104 	movi	r3,4
 2014054:	10c00005 	stb	r3,0(r2)
        return (0);
 2014058:	0005883a 	mov	r2,zero
 201405c:	00016a06 	br	2014608 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2014060:	e0bffd17 	ldw	r2,-12(fp)
 2014064:	1000051e 	bne	r2,zero,201407c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 2014068:	e0800217 	ldw	r2,8(fp)
 201406c:	00c00104 	movi	r3,4
 2014070:	10c00005 	stb	r3,0(r2)
        return (0);
 2014074:	0005883a 	mov	r2,zero
 2014078:	00016306 	br	2014608 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 201407c:	e0bffe17 	ldw	r2,-8(fp)
 2014080:	1000051e 	bne	r2,zero,2014098 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 2014084:	e0800217 	ldw	r2,8(fp)
 2014088:	00c00104 	movi	r3,4
 201408c:	10c00005 	stb	r3,0(r2)
        return (0);
 2014090:	0005883a 	mov	r2,zero
 2014094:	00015c06 	br	2014608 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2014098:	e0bffd17 	ldw	r2,-12(fp)
 201409c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 20140a0:	e0bffc17 	ldw	r2,-16(fp)
 20140a4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 20140a8:	e0bfef17 	ldw	r2,-68(fp)
 20140ac:	10800017 	ldw	r2,0(r2)
 20140b0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 20140b4:	00001906 	br	201411c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 20140b8:	e0bff017 	ldw	r2,-64(fp)
 20140bc:	10800003 	ldbu	r2,0(r2)
 20140c0:	10803fcc 	andi	r2,r2,255
 20140c4:	10c000a0 	cmpeqi	r3,r2,2
 20140c8:	1800091e 	bne	r3,zero,20140f0 <OSEventPendMulti+0xe4>
 20140cc:	10c000e0 	cmpeqi	r3,r2,3
 20140d0:	1800091e 	bne	r3,zero,20140f8 <OSEventPendMulti+0xec>
 20140d4:	10800060 	cmpeqi	r2,r2,1
 20140d8:	1000091e 	bne	r2,zero,2014100 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 20140dc:	e0800217 	ldw	r2,8(fp)
 20140e0:	00c00044 	movi	r3,1
 20140e4:	10c00005 	stb	r3,0(r2)
                 return (0);
 20140e8:	0005883a 	mov	r2,zero
 20140ec:	00014606 	br	2014608 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 20140f0:	0001883a 	nop
 20140f4:	00000306 	br	2014104 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 20140f8:	0001883a 	nop
 20140fc:	00000106 	br	2014104 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 2014100:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 2014104:	e0bfef17 	ldw	r2,-68(fp)
 2014108:	10800104 	addi	r2,r2,4
 201410c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 2014110:	e0bfef17 	ldw	r2,-68(fp)
 2014114:	10800017 	ldw	r2,0(r2)
 2014118:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 201411c:	e0bff017 	ldw	r2,-64(fp)
 2014120:	103fe51e 	bne	r2,zero,20140b8 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 2014124:	d0a74503 	ldbu	r2,-25324(gp)
 2014128:	10803fcc 	andi	r2,r2,255
 201412c:	10000526 	beq	r2,zero,2014144 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 2014130:	e0800217 	ldw	r2,8(fp)
 2014134:	00c00084 	movi	r3,2
 2014138:	10c00005 	stb	r3,0(r2)
        return (0);
 201413c:	0005883a 	mov	r2,zero
 2014140:	00013106 	br	2014608 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 2014144:	d0a73703 	ldbu	r2,-25380(gp)
 2014148:	10803fcc 	andi	r2,r2,255
 201414c:	10000526 	beq	r2,zero,2014164 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 2014150:	e0800217 	ldw	r2,8(fp)
 2014154:	00c00344 	movi	r3,13
 2014158:	10c00005 	stb	r3,0(r2)
        return (0);
 201415c:	0005883a 	mov	r2,zero
 2014160:	00012906 	br	2014608 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014164:	0005303a 	rdctl	r2,status
 2014168:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201416c:	e0fffb17 	ldw	r3,-20(fp)
 2014170:	00bfff84 	movi	r2,-2
 2014174:	1884703a 	and	r2,r3,r2
 2014178:	1001703a 	wrctl	status,r2
  
  return context;
 201417c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2014180:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 2014184:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 2014188:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 201418c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 2014190:	e0bffc17 	ldw	r2,-16(fp)
 2014194:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 2014198:	e0bfef17 	ldw	r2,-68(fp)
 201419c:	10800017 	ldw	r2,0(r2)
 20141a0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 20141a4:	00008106 	br	20143ac <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 20141a8:	e0bff017 	ldw	r2,-64(fp)
 20141ac:	10800003 	ldbu	r2,0(r2)
 20141b0:	10803fcc 	andi	r2,r2,255
 20141b4:	10c000a0 	cmpeqi	r3,r2,2
 20141b8:	18003c1e 	bne	r3,zero,20142ac <OSEventPendMulti+0x2a0>
 20141bc:	10c000e0 	cmpeqi	r3,r2,3
 20141c0:	1800031e 	bne	r3,zero,20141d0 <OSEventPendMulti+0x1c4>
 20141c4:	10800060 	cmpeqi	r2,r2,1
 20141c8:	10001e1e 	bne	r2,zero,2014244 <OSEventPendMulti+0x238>
 20141cc:	00006606 	br	2014368 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 20141d0:	e0bff017 	ldw	r2,-64(fp)
 20141d4:	1080020b 	ldhu	r2,8(r2)
 20141d8:	10bfffcc 	andi	r2,r2,65535
 20141dc:	10001526 	beq	r2,zero,2014234 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 20141e0:	e0bff017 	ldw	r2,-64(fp)
 20141e4:	1080020b 	ldhu	r2,8(r2)
 20141e8:	10bfffc4 	addi	r2,r2,-1
 20141ec:	1007883a 	mov	r3,r2
 20141f0:	e0bff017 	ldw	r2,-64(fp)
 20141f4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 20141f8:	e0bffd17 	ldw	r2,-12(fp)
 20141fc:	10c00104 	addi	r3,r2,4
 2014200:	e0fffd15 	stw	r3,-12(fp)
 2014204:	e0fff017 	ldw	r3,-64(fp)
 2014208:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 201420c:	00800044 	movi	r2,1
 2014210:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 2014214:	e0bffe17 	ldw	r2,-8(fp)
 2014218:	10c00104 	addi	r3,r2,4
 201421c:	e0fffe15 	stw	r3,-8(fp)
 2014220:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 2014224:	e0bff18b 	ldhu	r2,-58(fp)
 2014228:	10800044 	addi	r2,r2,1
 201422c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 2014230:	00005806 	br	2014394 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 2014234:	e0bff203 	ldbu	r2,-56(fp)
 2014238:	10800054 	ori	r2,r2,1
 201423c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2014240:	00005406 	br	2014394 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 2014244:	e0bff017 	ldw	r2,-64(fp)
 2014248:	10800117 	ldw	r2,4(r2)
 201424c:	10001326 	beq	r2,zero,201429c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 2014250:	e0bffe17 	ldw	r2,-8(fp)
 2014254:	10c00104 	addi	r3,r2,4
 2014258:	e0fffe15 	stw	r3,-8(fp)
 201425c:	e0fff017 	ldw	r3,-64(fp)
 2014260:	18c00117 	ldw	r3,4(r3)
 2014264:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 2014268:	e0bff017 	ldw	r2,-64(fp)
 201426c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 2014270:	e0bffd17 	ldw	r2,-12(fp)
 2014274:	10c00104 	addi	r3,r2,4
 2014278:	e0fffd15 	stw	r3,-12(fp)
 201427c:	e0fff017 	ldw	r3,-64(fp)
 2014280:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 2014284:	00800044 	movi	r2,1
 2014288:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 201428c:	e0bff18b 	ldhu	r2,-58(fp)
 2014290:	10800044 	addi	r2,r2,1
 2014294:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 2014298:	00003e06 	br	2014394 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 201429c:	e0bff203 	ldbu	r2,-56(fp)
 20142a0:	10800094 	ori	r2,r2,2
 20142a4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 20142a8:	00003a06 	br	2014394 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 20142ac:	e0bff017 	ldw	r2,-64(fp)
 20142b0:	10800117 	ldw	r2,4(r2)
 20142b4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 20142b8:	e0bff517 	ldw	r2,-44(fp)
 20142bc:	1080058b 	ldhu	r2,22(r2)
 20142c0:	10bfffcc 	andi	r2,r2,65535
 20142c4:	10002426 	beq	r2,zero,2014358 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 20142c8:	e0bffe17 	ldw	r2,-8(fp)
 20142cc:	10c00104 	addi	r3,r2,4
 20142d0:	e0fffe15 	stw	r3,-8(fp)
 20142d4:	e0fff517 	ldw	r3,-44(fp)
 20142d8:	18c00417 	ldw	r3,16(r3)
 20142dc:	19400104 	addi	r5,r3,4
 20142e0:	e13ff517 	ldw	r4,-44(fp)
 20142e4:	21400415 	stw	r5,16(r4)
 20142e8:	18c00017 	ldw	r3,0(r3)
 20142ec:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 20142f0:	e0bff517 	ldw	r2,-44(fp)
 20142f4:	10c00417 	ldw	r3,16(r2)
 20142f8:	e0bff517 	ldw	r2,-44(fp)
 20142fc:	10800217 	ldw	r2,8(r2)
 2014300:	1880041e 	bne	r3,r2,2014314 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 2014304:	e0bff517 	ldw	r2,-44(fp)
 2014308:	10c00117 	ldw	r3,4(r2)
 201430c:	e0bff517 	ldw	r2,-44(fp)
 2014310:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 2014314:	e0bff517 	ldw	r2,-44(fp)
 2014318:	1080058b 	ldhu	r2,22(r2)
 201431c:	10bfffc4 	addi	r2,r2,-1
 2014320:	1007883a 	mov	r3,r2
 2014324:	e0bff517 	ldw	r2,-44(fp)
 2014328:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 201432c:	e0bffd17 	ldw	r2,-12(fp)
 2014330:	10c00104 	addi	r3,r2,4
 2014334:	e0fffd15 	stw	r3,-12(fp)
 2014338:	e0fff017 	ldw	r3,-64(fp)
 201433c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 2014340:	00800044 	movi	r2,1
 2014344:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 2014348:	e0bff18b 	ldhu	r2,-58(fp)
 201434c:	10800044 	addi	r2,r2,1
 2014350:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 2014354:	00000f06 	br	2014394 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 2014358:	e0bff203 	ldbu	r2,-56(fp)
 201435c:	10800114 	ori	r2,r2,4
 2014360:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 2014364:	00000b06 	br	2014394 <OSEventPendMulti+0x388>
 2014368:	e0bff317 	ldw	r2,-52(fp)
 201436c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014370:	e0bff417 	ldw	r2,-48(fp)
 2014374:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2014378:	e0bffd17 	ldw	r2,-12(fp)
 201437c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2014380:	e0800217 	ldw	r2,8(fp)
 2014384:	00c00044 	movi	r3,1
 2014388:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 201438c:	e0bff18b 	ldhu	r2,-58(fp)
 2014390:	00009d06 	br	2014608 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 2014394:	e0bfef17 	ldw	r2,-68(fp)
 2014398:	10800104 	addi	r2,r2,4
 201439c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 20143a0:	e0bfef17 	ldw	r2,-68(fp)
 20143a4:	10800017 	ldw	r2,0(r2)
 20143a8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 20143ac:	e0bff017 	ldw	r2,-64(fp)
 20143b0:	103f7d1e 	bne	r2,zero,20141a8 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 20143b4:	e0bff103 	ldbu	r2,-60(fp)
 20143b8:	10800058 	cmpnei	r2,r2,1
 20143bc:	10000a1e 	bne	r2,zero,20143e8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 20143c0:	e0bffd17 	ldw	r2,-12(fp)
 20143c4:	10000015 	stw	zero,0(r2)
 20143c8:	e0bff317 	ldw	r2,-52(fp)
 20143cc:	e0bff615 	stw	r2,-40(fp)
 20143d0:	e0bff617 	ldw	r2,-40(fp)
 20143d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 20143d8:	e0800217 	ldw	r2,8(fp)
 20143dc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 20143e0:	e0bff18b 	ldhu	r2,-58(fp)
 20143e4:	00008806 	br	2014608 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 20143e8:	d0a74617 	ldw	r2,-25320(gp)
 20143ec:	d0e74617 	ldw	r3,-25320(gp)
 20143f0:	19000c03 	ldbu	r4,48(r3)
 20143f4:	e0fff203 	ldbu	r3,-56(fp)
 20143f8:	20c6b03a 	or	r3,r4,r3
 20143fc:	1809883a 	mov	r4,r3
 2014400:	00ffe004 	movi	r3,-128
 2014404:	20c6b03a 	or	r3,r4,r3
 2014408:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201440c:	d0a74617 	ldw	r2,-25320(gp)
 2014410:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 2014414:	d0a74617 	ldw	r2,-25320(gp)
 2014418:	e0ffff0b 	ldhu	r3,-4(fp)
 201441c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 2014420:	e13ffc17 	ldw	r4,-16(fp)
 2014424:	2014f480 	call	2014f48 <OS_EventTaskWaitMulti>
 2014428:	e0bff317 	ldw	r2,-52(fp)
 201442c:	e0bff915 	stw	r2,-28(fp)
 2014430:	e0bff917 	ldw	r2,-28(fp)
 2014434:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 2014438:	20156ec0 	call	20156ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201443c:	0005303a 	rdctl	r2,status
 2014440:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014444:	e0fff717 	ldw	r3,-36(fp)
 2014448:	00bfff84 	movi	r2,-2
 201444c:	1884703a 	and	r2,r3,r2
 2014450:	1001703a 	wrctl	status,r2
  
  return context;
 2014454:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 2014458:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 201445c:	d0a74617 	ldw	r2,-25320(gp)
 2014460:	10800c43 	ldbu	r2,49(r2)
 2014464:	10803fcc 	andi	r2,r2,255
 2014468:	10000226 	beq	r2,zero,2014474 <OSEventPendMulti+0x468>
 201446c:	108000a0 	cmpeqi	r2,r2,2
 2014470:	10001826 	beq	r2,zero,20144d4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 2014474:	d0a74617 	ldw	r2,-25320(gp)
 2014478:	10800717 	ldw	r2,28(r2)
 201447c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2014480:	e0bff017 	ldw	r2,-64(fp)
 2014484:	10000b26 	beq	r2,zero,20144b4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2014488:	e0bffd17 	ldw	r2,-12(fp)
 201448c:	10c00104 	addi	r3,r2,4
 2014490:	e0fffd15 	stw	r3,-12(fp)
 2014494:	e0fff017 	ldw	r3,-64(fp)
 2014498:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 201449c:	e0bffd17 	ldw	r2,-12(fp)
 20144a0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 20144a4:	e0bff18b 	ldhu	r2,-58(fp)
 20144a8:	10800044 	addi	r2,r2,1
 20144ac:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 20144b0:	00000d06 	br	20144e8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 20144b4:	d0a74617 	ldw	r2,-25320(gp)
 20144b8:	00c00044 	movi	r3,1
 20144bc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 20144c0:	d0a74617 	ldw	r2,-25320(gp)
 20144c4:	e17ffc17 	ldw	r5,-16(fp)
 20144c8:	1009883a 	mov	r4,r2
 20144cc:	20151500 	call	2015150 <OS_EventTaskRemoveMulti>
             }
			 break;
 20144d0:	00000506 	br	20144e8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 20144d4:	d0a74617 	ldw	r2,-25320(gp)
 20144d8:	e17ffc17 	ldw	r5,-16(fp)
 20144dc:	1009883a 	mov	r4,r2
 20144e0:	20151500 	call	2015150 <OS_EventTaskRemoveMulti>
             break;
 20144e4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 20144e8:	d0a74617 	ldw	r2,-25320(gp)
 20144ec:	10800c43 	ldbu	r2,49(r2)
 20144f0:	10803fcc 	andi	r2,r2,255
 20144f4:	10000326 	beq	r2,zero,2014504 <OSEventPendMulti+0x4f8>
 20144f8:	108000a0 	cmpeqi	r2,r2,2
 20144fc:	1000231e 	bne	r2,zero,201458c <OSEventPendMulti+0x580>
 2014500:	00002a06 	br	20145ac <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 2014504:	e0bff017 	ldw	r2,-64(fp)
 2014508:	10800003 	ldbu	r2,0(r2)
 201450c:	10803fcc 	andi	r2,r2,255
 2014510:	0080100e 	bge	zero,r2,2014554 <OSEventPendMulti+0x548>
 2014514:	10c000d0 	cmplti	r3,r2,3
 2014518:	1800071e 	bne	r3,zero,2014538 <OSEventPendMulti+0x52c>
 201451c:	108000e0 	cmpeqi	r2,r2,3
 2014520:	10000c26 	beq	r2,zero,2014554 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 2014524:	e0bffe17 	ldw	r2,-8(fp)
 2014528:	10c00104 	addi	r3,r2,4
 201452c:	e0fffe15 	stw	r3,-8(fp)
 2014530:	10000015 	stw	zero,0(r2)
                      break;
 2014534:	00001206 	br	2014580 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 2014538:	e0bffe17 	ldw	r2,-8(fp)
 201453c:	10c00104 	addi	r3,r2,4
 2014540:	e0fffe15 	stw	r3,-8(fp)
 2014544:	d0e74617 	ldw	r3,-25320(gp)
 2014548:	18c00917 	ldw	r3,36(r3)
 201454c:	10c00015 	stw	r3,0(r2)
                      break;
 2014550:	00000b06 	br	2014580 <OSEventPendMulti+0x574>
 2014554:	e0bff317 	ldw	r2,-52(fp)
 2014558:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201455c:	e0bff817 	ldw	r2,-32(fp)
 2014560:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 2014564:	e0bffd17 	ldw	r2,-12(fp)
 2014568:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 201456c:	e0800217 	ldw	r2,8(fp)
 2014570:	00c00044 	movi	r3,1
 2014574:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 2014578:	e0bff18b 	ldhu	r2,-58(fp)
 201457c:	00002206 	br	2014608 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 2014580:	e0800217 	ldw	r2,8(fp)
 2014584:	10000005 	stb	zero,0(r2)
             break;
 2014588:	00001006 	br	20145cc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 201458c:	e0bffe17 	ldw	r2,-8(fp)
 2014590:	10c00104 	addi	r3,r2,4
 2014594:	e0fffe15 	stw	r3,-8(fp)
 2014598:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 201459c:	e0800217 	ldw	r2,8(fp)
 20145a0:	00c00384 	movi	r3,14
 20145a4:	10c00005 	stb	r3,0(r2)
             break;
 20145a8:	00000806 	br	20145cc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 20145ac:	e0bffe17 	ldw	r2,-8(fp)
 20145b0:	10c00104 	addi	r3,r2,4
 20145b4:	e0fffe15 	stw	r3,-8(fp)
 20145b8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 20145bc:	e0800217 	ldw	r2,8(fp)
 20145c0:	00c00284 	movi	r3,10
 20145c4:	10c00005 	stb	r3,0(r2)
             break;
 20145c8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 20145cc:	d0a74617 	ldw	r2,-25320(gp)
 20145d0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 20145d4:	d0a74617 	ldw	r2,-25320(gp)
 20145d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 20145dc:	d0a74617 	ldw	r2,-25320(gp)
 20145e0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 20145e4:	d0a74617 	ldw	r2,-25320(gp)
 20145e8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 20145ec:	d0a74617 	ldw	r2,-25320(gp)
 20145f0:	10000915 	stw	zero,36(r2)
 20145f4:	e0bff317 	ldw	r2,-52(fp)
 20145f8:	e0bffa15 	stw	r2,-24(fp)
 20145fc:	e0bffa17 	ldw	r2,-24(fp)
 2014600:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2014604:	e0bff18b 	ldhu	r2,-58(fp)
}
 2014608:	e037883a 	mov	sp,fp
 201460c:	dfc00117 	ldw	ra,4(sp)
 2014610:	df000017 	ldw	fp,0(sp)
 2014614:	dec00204 	addi	sp,sp,8
 2014618:	f800283a 	ret

0201461c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 201461c:	defffe04 	addi	sp,sp,-8
 2014620:	dfc00115 	stw	ra,4(sp)
 2014624:	df000015 	stw	fp,0(sp)
 2014628:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 201462c:	201dd3c0 	call	201dd3c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 2014630:	20153980 	call	2015398 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 2014634:	20153e00 	call	20153e0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 2014638:	201554c0 	call	201554c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 201463c:	20152b80 	call	20152b8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 2014640:	20173ec0 	call	20173ec <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 2014644:	20187b40 	call	20187b4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 2014648:	20198dc0 	call	20198dc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 201464c:	201544c0 	call	201544c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 2014650:	20154cc0 	call	20154cc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 2014654:	201dd5c0 	call	201dd5c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 2014658:	2015dc00 	call	2015dc0 <OSDebugInit>
#endif
}
 201465c:	0001883a 	nop
 2014660:	e037883a 	mov	sp,fp
 2014664:	dfc00117 	ldw	ra,4(sp)
 2014668:	df000017 	ldw	fp,0(sp)
 201466c:	dec00204 	addi	sp,sp,8
 2014670:	f800283a 	ret

02014674 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 2014674:	deffff04 	addi	sp,sp,-4
 2014678:	df000015 	stw	fp,0(sp)
 201467c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 2014680:	d0a73743 	ldbu	r2,-25379(gp)
 2014684:	10803fcc 	andi	r2,r2,255
 2014688:	10800058 	cmpnei	r2,r2,1
 201468c:	1000071e 	bne	r2,zero,20146ac <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 2014690:	d0a74503 	ldbu	r2,-25324(gp)
 2014694:	10803fcc 	andi	r2,r2,255
 2014698:	10803fe0 	cmpeqi	r2,r2,255
 201469c:	1000031e 	bne	r2,zero,20146ac <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 20146a0:	d0a74503 	ldbu	r2,-25324(gp)
 20146a4:	10800044 	addi	r2,r2,1
 20146a8:	d0a74505 	stb	r2,-25324(gp)
        }
    }
}
 20146ac:	0001883a 	nop
 20146b0:	e037883a 	mov	sp,fp
 20146b4:	df000017 	ldw	fp,0(sp)
 20146b8:	dec00104 	addi	sp,sp,4
 20146bc:	f800283a 	ret

020146c0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 20146c0:	defffb04 	addi	sp,sp,-20
 20146c4:	dfc00415 	stw	ra,16(sp)
 20146c8:	df000315 	stw	fp,12(sp)
 20146cc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20146d0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 20146d4:	d0a73743 	ldbu	r2,-25379(gp)
 20146d8:	10803fcc 	andi	r2,r2,255
 20146dc:	10800058 	cmpnei	r2,r2,1
 20146e0:	10002f1e 	bne	r2,zero,20147a0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20146e4:	0005303a 	rdctl	r2,status
 20146e8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20146ec:	e0ffff17 	ldw	r3,-4(fp)
 20146f0:	00bfff84 	movi	r2,-2
 20146f4:	1884703a 	and	r2,r3,r2
 20146f8:	1001703a 	wrctl	status,r2
  
  return context;
 20146fc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2014700:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2014704:	d0a74503 	ldbu	r2,-25324(gp)
 2014708:	10803fcc 	andi	r2,r2,255
 201470c:	10000326 	beq	r2,zero,201471c <OSIntExit+0x5c>
            OSIntNesting--;
 2014710:	d0a74503 	ldbu	r2,-25324(gp)
 2014714:	10bfffc4 	addi	r2,r2,-1
 2014718:	d0a74505 	stb	r2,-25324(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 201471c:	d0a74503 	ldbu	r2,-25324(gp)
 2014720:	10803fcc 	andi	r2,r2,255
 2014724:	10001a1e 	bne	r2,zero,2014790 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 2014728:	d0a73703 	ldbu	r2,-25380(gp)
 201472c:	10803fcc 	andi	r2,r2,255
 2014730:	1000171e 	bne	r2,zero,2014790 <OSIntExit+0xd0>
                OS_SchedNew();
 2014734:	20157bc0 	call	20157bc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 2014738:	d0e73903 	ldbu	r3,-25372(gp)
 201473c:	d0a73943 	ldbu	r2,-25371(gp)
 2014740:	18c03fcc 	andi	r3,r3,255
 2014744:	10803fcc 	andi	r2,r2,255
 2014748:	18801126 	beq	r3,r2,2014790 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 201474c:	d0a73903 	ldbu	r2,-25372(gp)
 2014750:	10c03fcc 	andi	r3,r2,255
 2014754:	008080f4 	movhi	r2,515
 2014758:	10b5ea04 	addi	r2,r2,-10328
 201475c:	18c7883a 	add	r3,r3,r3
 2014760:	18c7883a 	add	r3,r3,r3
 2014764:	10c5883a 	add	r2,r2,r3
 2014768:	10800017 	ldw	r2,0(r2)
 201476c:	d0a74115 	stw	r2,-25340(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 2014770:	d0a74117 	ldw	r2,-25340(gp)
 2014774:	10c00e17 	ldw	r3,56(r2)
 2014778:	18c00044 	addi	r3,r3,1
 201477c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2014780:	d0a73c17 	ldw	r2,-25360(gp)
 2014784:	10800044 	addi	r2,r2,1
 2014788:	d0a73c15 	stw	r2,-25360(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 201478c:	201da680 	call	201da68 <OSCtxSw>
 2014790:	e0bffd17 	ldw	r2,-12(fp)
 2014794:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014798:	e0bffe17 	ldw	r2,-8(fp)
 201479c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20147a0:	0001883a 	nop
 20147a4:	e037883a 	mov	sp,fp
 20147a8:	dfc00117 	ldw	ra,4(sp)
 20147ac:	df000017 	ldw	fp,0(sp)
 20147b0:	dec00204 	addi	sp,sp,8
 20147b4:	f800283a 	ret

020147b8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 20147b8:	defffc04 	addi	sp,sp,-16
 20147bc:	df000315 	stw	fp,12(sp)
 20147c0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20147c4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 20147c8:	d0a73743 	ldbu	r2,-25379(gp)
 20147cc:	10803fcc 	andi	r2,r2,255
 20147d0:	10800058 	cmpnei	r2,r2,1
 20147d4:	1000161e 	bne	r2,zero,2014830 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20147d8:	0005303a 	rdctl	r2,status
 20147dc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20147e0:	e0ffff17 	ldw	r3,-4(fp)
 20147e4:	00bfff84 	movi	r2,-2
 20147e8:	1884703a 	and	r2,r3,r2
 20147ec:	1001703a 	wrctl	status,r2
  
  return context;
 20147f0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 20147f4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 20147f8:	d0a74503 	ldbu	r2,-25324(gp)
 20147fc:	10803fcc 	andi	r2,r2,255
 2014800:	1000071e 	bne	r2,zero,2014820 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2014804:	d0a73703 	ldbu	r2,-25380(gp)
 2014808:	10803fcc 	andi	r2,r2,255
 201480c:	10803fe0 	cmpeqi	r2,r2,255
 2014810:	1000031e 	bne	r2,zero,2014820 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2014814:	d0a73703 	ldbu	r2,-25380(gp)
 2014818:	10800044 	addi	r2,r2,1
 201481c:	d0a73705 	stb	r2,-25380(gp)
 2014820:	e0bffd17 	ldw	r2,-12(fp)
 2014824:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014828:	e0bffe17 	ldw	r2,-8(fp)
 201482c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2014830:	0001883a 	nop
 2014834:	e037883a 	mov	sp,fp
 2014838:	df000017 	ldw	fp,0(sp)
 201483c:	dec00104 	addi	sp,sp,4
 2014840:	f800283a 	ret

02014844 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 2014844:	defff804 	addi	sp,sp,-32
 2014848:	dfc00715 	stw	ra,28(sp)
 201484c:	df000615 	stw	fp,24(sp)
 2014850:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014854:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 2014858:	d0a73743 	ldbu	r2,-25379(gp)
 201485c:	10803fcc 	andi	r2,r2,255
 2014860:	10800058 	cmpnei	r2,r2,1
 2014864:	1000281e 	bne	r2,zero,2014908 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014868:	0005303a 	rdctl	r2,status
 201486c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014870:	e0ffff17 	ldw	r3,-4(fp)
 2014874:	00bfff84 	movi	r2,-2
 2014878:	1884703a 	and	r2,r3,r2
 201487c:	1001703a 	wrctl	status,r2
  
  return context;
 2014880:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 2014884:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2014888:	d0a73703 	ldbu	r2,-25380(gp)
 201488c:	10803fcc 	andi	r2,r2,255
 2014890:	10001926 	beq	r2,zero,20148f8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2014894:	d0a73703 	ldbu	r2,-25380(gp)
 2014898:	10bfffc4 	addi	r2,r2,-1
 201489c:	d0a73705 	stb	r2,-25380(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 20148a0:	d0a73703 	ldbu	r2,-25380(gp)
 20148a4:	10803fcc 	andi	r2,r2,255
 20148a8:	10000e1e 	bne	r2,zero,20148e4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 20148ac:	d0a74503 	ldbu	r2,-25324(gp)
 20148b0:	10803fcc 	andi	r2,r2,255
 20148b4:	1000061e 	bne	r2,zero,20148d0 <OSSchedUnlock+0x8c>
 20148b8:	e0bffa17 	ldw	r2,-24(fp)
 20148bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20148c0:	e0bffb17 	ldw	r2,-20(fp)
 20148c4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 20148c8:	20156ec0 	call	20156ec <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 20148cc:	00000e06 	br	2014908 <OSSchedUnlock+0xc4>
 20148d0:	e0bffa17 	ldw	r2,-24(fp)
 20148d4:	e0bffc15 	stw	r2,-16(fp)
 20148d8:	e0bffc17 	ldw	r2,-16(fp)
 20148dc:	1001703a 	wrctl	status,r2
 20148e0:	00000906 	br	2014908 <OSSchedUnlock+0xc4>
 20148e4:	e0bffa17 	ldw	r2,-24(fp)
 20148e8:	e0bffd15 	stw	r2,-12(fp)
 20148ec:	e0bffd17 	ldw	r2,-12(fp)
 20148f0:	1001703a 	wrctl	status,r2
 20148f4:	00000406 	br	2014908 <OSSchedUnlock+0xc4>
 20148f8:	e0bffa17 	ldw	r2,-24(fp)
 20148fc:	e0bffe15 	stw	r2,-8(fp)
 2014900:	e0bffe17 	ldw	r2,-8(fp)
 2014904:	1001703a 	wrctl	status,r2
 2014908:	0001883a 	nop
 201490c:	e037883a 	mov	sp,fp
 2014910:	dfc00117 	ldw	ra,4(sp)
 2014914:	df000017 	ldw	fp,0(sp)
 2014918:	dec00204 	addi	sp,sp,8
 201491c:	f800283a 	ret

02014920 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2014920:	defffe04 	addi	sp,sp,-8
 2014924:	dfc00115 	stw	ra,4(sp)
 2014928:	df000015 	stw	fp,0(sp)
 201492c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 2014930:	d0a73743 	ldbu	r2,-25379(gp)
 2014934:	10803fcc 	andi	r2,r2,255
 2014938:	10000f1e 	bne	r2,zero,2014978 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 201493c:	20157bc0 	call	20157bc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 2014940:	d0a73903 	ldbu	r2,-25372(gp)
 2014944:	d0a73945 	stb	r2,-25371(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 2014948:	d0a73903 	ldbu	r2,-25372(gp)
 201494c:	10c03fcc 	andi	r3,r2,255
 2014950:	008080f4 	movhi	r2,515
 2014954:	10b5ea04 	addi	r2,r2,-10328
 2014958:	18c7883a 	add	r3,r3,r3
 201495c:	18c7883a 	add	r3,r3,r3
 2014960:	10c5883a 	add	r2,r2,r3
 2014964:	10800017 	ldw	r2,0(r2)
 2014968:	d0a74115 	stw	r2,-25340(gp)
        OSTCBCur      = OSTCBHighRdy;
 201496c:	d0a74117 	ldw	r2,-25340(gp)
 2014970:	d0a74615 	stw	r2,-25320(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2014974:	201daf40 	call	201daf4 <OSStartHighRdy>
    }
}
 2014978:	0001883a 	nop
 201497c:	e037883a 	mov	sp,fp
 2014980:	dfc00117 	ldw	ra,4(sp)
 2014984:	df000017 	ldw	fp,0(sp)
 2014988:	dec00204 	addi	sp,sp,8
 201498c:	f800283a 	ret

02014990 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2014990:	defff904 	addi	sp,sp,-28
 2014994:	dfc00615 	stw	ra,24(sp)
 2014998:	df000515 	stw	fp,20(sp)
 201499c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20149a0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 20149a4:	01000084 	movi	r4,2
 20149a8:	201bb500 	call	201bb50 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20149ac:	0005303a 	rdctl	r2,status
 20149b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20149b4:	e0fffc17 	ldw	r3,-16(fp)
 20149b8:	00bfff84 	movi	r2,-2
 20149bc:	1884703a 	and	r2,r3,r2
 20149c0:	1001703a 	wrctl	status,r2
  
  return context;
 20149c4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 20149c8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 20149cc:	d0273815 	stw	zero,-25376(gp)
 20149d0:	e0bffb17 	ldw	r2,-20(fp)
 20149d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20149d8:	e0bffd17 	ldw	r2,-12(fp)
 20149dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 20149e0:	01001904 	movi	r4,100
 20149e4:	201bb500 	call	201bb50 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20149e8:	0005303a 	rdctl	r2,status
 20149ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20149f0:	e0fffe17 	ldw	r3,-8(fp)
 20149f4:	00bfff84 	movi	r2,-2
 20149f8:	1884703a 	and	r2,r3,r2
 20149fc:	1001703a 	wrctl	status,r2
  
  return context;
 2014a00:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2014a04:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2014a08:	d0a73817 	ldw	r2,-25376(gp)
 2014a0c:	d0a73d15 	stw	r2,-25356(gp)
    OSStatRdy    = OS_TRUE;
 2014a10:	00800044 	movi	r2,1
 2014a14:	d0a74905 	stb	r2,-25308(gp)
 2014a18:	e0bffb17 	ldw	r2,-20(fp)
 2014a1c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014a20:	e0bfff17 	ldw	r2,-4(fp)
 2014a24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2014a28:	0001883a 	nop
 2014a2c:	e037883a 	mov	sp,fp
 2014a30:	dfc00117 	ldw	ra,4(sp)
 2014a34:	df000017 	ldw	fp,0(sp)
 2014a38:	dec00204 	addi	sp,sp,8
 2014a3c:	f800283a 	ret

02014a40 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 2014a40:	defff704 	addi	sp,sp,-36
 2014a44:	dfc00815 	stw	ra,32(sp)
 2014a48:	df000715 	stw	fp,28(sp)
 2014a4c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2014a50:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2014a54:	201dd1c0 	call	201dd1c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014a58:	0005303a 	rdctl	r2,status
 2014a5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014a60:	e0fffd17 	ldw	r3,-12(fp)
 2014a64:	00bfff84 	movi	r2,-2
 2014a68:	1884703a 	and	r2,r3,r2
 2014a6c:	1001703a 	wrctl	status,r2
  
  return context;
 2014a70:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2014a74:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 2014a78:	d0a74717 	ldw	r2,-25316(gp)
 2014a7c:	10800044 	addi	r2,r2,1
 2014a80:	d0a74715 	stw	r2,-25316(gp)
 2014a84:	e0bffb17 	ldw	r2,-20(fp)
 2014a88:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014a8c:	e0bfff17 	ldw	r2,-4(fp)
 2014a90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2014a94:	d0a73743 	ldbu	r2,-25379(gp)
 2014a98:	10803fcc 	andi	r2,r2,255
 2014a9c:	10800058 	cmpnei	r2,r2,1
 2014aa0:	10006a1e 	bne	r2,zero,2014c4c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2014aa4:	d0a73b03 	ldbu	r2,-25364(gp)
 2014aa8:	10803fcc 	andi	r2,r2,255
 2014aac:	10c00060 	cmpeqi	r3,r2,1
 2014ab0:	1800061e 	bne	r3,zero,2014acc <OSTimeTick+0x8c>
 2014ab4:	10c000a0 	cmpeqi	r3,r2,2
 2014ab8:	1800061e 	bne	r3,zero,2014ad4 <OSTimeTick+0x94>
 2014abc:	10000a1e 	bne	r2,zero,2014ae8 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2014ac0:	00800044 	movi	r2,1
 2014ac4:	e0bffa05 	stb	r2,-24(fp)
                 break;
 2014ac8:	00000b06 	br	2014af8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2014acc:	e03ffa05 	stb	zero,-24(fp)
                 break;
 2014ad0:	00000906 	br	2014af8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2014ad4:	00800044 	movi	r2,1
 2014ad8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2014adc:	00800044 	movi	r2,1
 2014ae0:	d0a73b05 	stb	r2,-25364(gp)
                 break;
 2014ae4:	00000406 	br	2014af8 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2014ae8:	00800044 	movi	r2,1
 2014aec:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2014af0:	d0273b05 	stb	zero,-25364(gp)
                 break;
 2014af4:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2014af8:	e0bffa03 	ldbu	r2,-24(fp)
 2014afc:	10005226 	beq	r2,zero,2014c48 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2014b00:	d0a73a17 	ldw	r2,-25368(gp)
 2014b04:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2014b08:	00004906 	br	2014c30 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014b0c:	0005303a 	rdctl	r2,status
 2014b10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014b14:	e0fffc17 	ldw	r3,-16(fp)
 2014b18:	00bfff84 	movi	r2,-2
 2014b1c:	1884703a 	and	r2,r3,r2
 2014b20:	1001703a 	wrctl	status,r2
  
  return context;
 2014b24:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 2014b28:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2014b2c:	e0bff917 	ldw	r2,-28(fp)
 2014b30:	10800b8b 	ldhu	r2,46(r2)
 2014b34:	10bfffcc 	andi	r2,r2,65535
 2014b38:	10003626 	beq	r2,zero,2014c14 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2014b3c:	e0bff917 	ldw	r2,-28(fp)
 2014b40:	10800b8b 	ldhu	r2,46(r2)
 2014b44:	10bfffc4 	addi	r2,r2,-1
 2014b48:	1007883a 	mov	r3,r2
 2014b4c:	e0bff917 	ldw	r2,-28(fp)
 2014b50:	10c00b8d 	sth	r3,46(r2)
 2014b54:	e0bff917 	ldw	r2,-28(fp)
 2014b58:	10800b8b 	ldhu	r2,46(r2)
 2014b5c:	10bfffcc 	andi	r2,r2,65535
 2014b60:	10002c1e 	bne	r2,zero,2014c14 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2014b64:	e0bff917 	ldw	r2,-28(fp)
 2014b68:	10800c03 	ldbu	r2,48(r2)
 2014b6c:	10803fcc 	andi	r2,r2,255
 2014b70:	10800dcc 	andi	r2,r2,55
 2014b74:	10000b26 	beq	r2,zero,2014ba4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2014b78:	e0bff917 	ldw	r2,-28(fp)
 2014b7c:	10c00c03 	ldbu	r3,48(r2)
 2014b80:	00bff204 	movi	r2,-56
 2014b84:	1884703a 	and	r2,r3,r2
 2014b88:	1007883a 	mov	r3,r2
 2014b8c:	e0bff917 	ldw	r2,-28(fp)
 2014b90:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2014b94:	e0bff917 	ldw	r2,-28(fp)
 2014b98:	00c00044 	movi	r3,1
 2014b9c:	10c00c45 	stb	r3,49(r2)
 2014ba0:	00000206 	br	2014bac <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2014ba4:	e0bff917 	ldw	r2,-28(fp)
 2014ba8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2014bac:	e0bff917 	ldw	r2,-28(fp)
 2014bb0:	10800c03 	ldbu	r2,48(r2)
 2014bb4:	10803fcc 	andi	r2,r2,255
 2014bb8:	1080020c 	andi	r2,r2,8
 2014bbc:	1000151e 	bne	r2,zero,2014c14 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2014bc0:	e0bff917 	ldw	r2,-28(fp)
 2014bc4:	10c00d83 	ldbu	r3,54(r2)
 2014bc8:	d0a74303 	ldbu	r2,-25332(gp)
 2014bcc:	1884b03a 	or	r2,r3,r2
 2014bd0:	d0a74305 	stb	r2,-25332(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2014bd4:	e0bff917 	ldw	r2,-28(fp)
 2014bd8:	10800d03 	ldbu	r2,52(r2)
 2014bdc:	10c03fcc 	andi	r3,r2,255
 2014be0:	e0bff917 	ldw	r2,-28(fp)
 2014be4:	10800d03 	ldbu	r2,52(r2)
 2014be8:	11003fcc 	andi	r4,r2,255
 2014bec:	d0a74344 	addi	r2,gp,-25331
 2014bf0:	2085883a 	add	r2,r4,r2
 2014bf4:	11000003 	ldbu	r4,0(r2)
 2014bf8:	e0bff917 	ldw	r2,-28(fp)
 2014bfc:	10800d43 	ldbu	r2,53(r2)
 2014c00:	2084b03a 	or	r2,r4,r2
 2014c04:	1009883a 	mov	r4,r2
 2014c08:	d0a74344 	addi	r2,gp,-25331
 2014c0c:	1885883a 	add	r2,r3,r2
 2014c10:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2014c14:	e0bff917 	ldw	r2,-28(fp)
 2014c18:	10800517 	ldw	r2,20(r2)
 2014c1c:	e0bff915 	stw	r2,-28(fp)
 2014c20:	e0bffb17 	ldw	r2,-20(fp)
 2014c24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014c28:	e0bffe17 	ldw	r2,-8(fp)
 2014c2c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2014c30:	e0bff917 	ldw	r2,-28(fp)
 2014c34:	10800c83 	ldbu	r2,50(r2)
 2014c38:	10803fcc 	andi	r2,r2,255
 2014c3c:	10800518 	cmpnei	r2,r2,20
 2014c40:	103fb21e 	bne	r2,zero,2014b0c <OSTimeTick+0xcc>
 2014c44:	00000106 	br	2014c4c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 2014c48:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2014c4c:	e037883a 	mov	sp,fp
 2014c50:	dfc00117 	ldw	ra,4(sp)
 2014c54:	df000017 	ldw	fp,0(sp)
 2014c58:	dec00204 	addi	sp,sp,8
 2014c5c:	f800283a 	ret

02014c60 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2014c60:	deffff04 	addi	sp,sp,-4
 2014c64:	df000015 	stw	fp,0(sp)
 2014c68:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2014c6c:	00804784 	movi	r2,286
}
 2014c70:	e037883a 	mov	sp,fp
 2014c74:	df000017 	ldw	fp,0(sp)
 2014c78:	dec00104 	addi	sp,sp,4
 2014c7c:	f800283a 	ret

02014c80 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2014c80:	deffff04 	addi	sp,sp,-4
 2014c84:	df000015 	stw	fp,0(sp)
 2014c88:	d839883a 	mov	fp,sp
}
 2014c8c:	0001883a 	nop
 2014c90:	e037883a 	mov	sp,fp
 2014c94:	df000017 	ldw	fp,0(sp)
 2014c98:	dec00104 	addi	sp,sp,4
 2014c9c:	f800283a 	ret

02014ca0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2014ca0:	defff804 	addi	sp,sp,-32
 2014ca4:	dfc00715 	stw	ra,28(sp)
 2014ca8:	df000615 	stw	fp,24(sp)
 2014cac:	df000604 	addi	fp,sp,24
 2014cb0:	e13ffc15 	stw	r4,-16(fp)
 2014cb4:	e17ffd15 	stw	r5,-12(fp)
 2014cb8:	3007883a 	mov	r3,r6
 2014cbc:	3805883a 	mov	r2,r7
 2014cc0:	e0fffe05 	stb	r3,-8(fp)
 2014cc4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2014cc8:	e0bffc17 	ldw	r2,-16(fp)
 2014ccc:	10800283 	ldbu	r2,10(r2)
 2014cd0:	10c03fcc 	andi	r3,r2,255
 2014cd4:	008080b4 	movhi	r2,514
 2014cd8:	10bb1504 	addi	r2,r2,-5036
 2014cdc:	10c5883a 	add	r2,r2,r3
 2014ce0:	10800003 	ldbu	r2,0(r2)
 2014ce4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2014ce8:	e0bffa03 	ldbu	r2,-24(fp)
 2014cec:	e0fffc17 	ldw	r3,-16(fp)
 2014cf0:	1885883a 	add	r2,r3,r2
 2014cf4:	108002c4 	addi	r2,r2,11
 2014cf8:	10800003 	ldbu	r2,0(r2)
 2014cfc:	10c03fcc 	andi	r3,r2,255
 2014d00:	008080b4 	movhi	r2,514
 2014d04:	10bb1504 	addi	r2,r2,-5036
 2014d08:	10c5883a 	add	r2,r2,r3
 2014d0c:	10800003 	ldbu	r2,0(r2)
 2014d10:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2014d14:	e0bffa03 	ldbu	r2,-24(fp)
 2014d18:	100490fa 	slli	r2,r2,3
 2014d1c:	1007883a 	mov	r3,r2
 2014d20:	e0bffa43 	ldbu	r2,-23(fp)
 2014d24:	1885883a 	add	r2,r3,r2
 2014d28:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 2014d2c:	e0fffa83 	ldbu	r3,-22(fp)
 2014d30:	008080f4 	movhi	r2,515
 2014d34:	10b5ea04 	addi	r2,r2,-10328
 2014d38:	18c7883a 	add	r3,r3,r3
 2014d3c:	18c7883a 	add	r3,r3,r3
 2014d40:	10c5883a 	add	r2,r2,r3
 2014d44:	10800017 	ldw	r2,0(r2)
 2014d48:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 2014d4c:	e0bffb17 	ldw	r2,-20(fp)
 2014d50:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2014d54:	e0bffb17 	ldw	r2,-20(fp)
 2014d58:	e0fffd17 	ldw	r3,-12(fp)
 2014d5c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2014d60:	e0bffb17 	ldw	r2,-20(fp)
 2014d64:	10800c03 	ldbu	r2,48(r2)
 2014d68:	1007883a 	mov	r3,r2
 2014d6c:	e0bffe03 	ldbu	r2,-8(fp)
 2014d70:	0084303a 	nor	r2,zero,r2
 2014d74:	1884703a 	and	r2,r3,r2
 2014d78:	1007883a 	mov	r3,r2
 2014d7c:	e0bffb17 	ldw	r2,-20(fp)
 2014d80:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2014d84:	e0bffb17 	ldw	r2,-20(fp)
 2014d88:	e0ffff03 	ldbu	r3,-4(fp)
 2014d8c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2014d90:	e0bffb17 	ldw	r2,-20(fp)
 2014d94:	10800c03 	ldbu	r2,48(r2)
 2014d98:	10803fcc 	andi	r2,r2,255
 2014d9c:	1080020c 	andi	r2,r2,8
 2014da0:	1000111e 	bne	r2,zero,2014de8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2014da4:	e0bffb17 	ldw	r2,-20(fp)
 2014da8:	10c00d83 	ldbu	r3,54(r2)
 2014dac:	d0a74303 	ldbu	r2,-25332(gp)
 2014db0:	1884b03a 	or	r2,r3,r2
 2014db4:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2014db8:	e0fffa03 	ldbu	r3,-24(fp)
 2014dbc:	e13ffa03 	ldbu	r4,-24(fp)
 2014dc0:	d0a74344 	addi	r2,gp,-25331
 2014dc4:	2085883a 	add	r2,r4,r2
 2014dc8:	11000003 	ldbu	r4,0(r2)
 2014dcc:	e0bffb17 	ldw	r2,-20(fp)
 2014dd0:	10800d43 	ldbu	r2,53(r2)
 2014dd4:	2084b03a 	or	r2,r4,r2
 2014dd8:	1009883a 	mov	r4,r2
 2014ddc:	d0a74344 	addi	r2,gp,-25331
 2014de0:	1885883a 	add	r2,r3,r2
 2014de4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2014de8:	e17ffc17 	ldw	r5,-16(fp)
 2014dec:	e13ffb17 	ldw	r4,-20(fp)
 2014df0:	20150980 	call	2015098 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2014df4:	e0bffb17 	ldw	r2,-20(fp)
 2014df8:	10800817 	ldw	r2,32(r2)
 2014dfc:	10000826 	beq	r2,zero,2014e20 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2014e00:	e0bffb17 	ldw	r2,-20(fp)
 2014e04:	10800817 	ldw	r2,32(r2)
 2014e08:	100b883a 	mov	r5,r2
 2014e0c:	e13ffb17 	ldw	r4,-20(fp)
 2014e10:	20151500 	call	2015150 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2014e14:	e0bffb17 	ldw	r2,-20(fp)
 2014e18:	e0fffc17 	ldw	r3,-16(fp)
 2014e1c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 2014e20:	e0bffa83 	ldbu	r2,-22(fp)
}
 2014e24:	e037883a 	mov	sp,fp
 2014e28:	dfc00117 	ldw	ra,4(sp)
 2014e2c:	df000017 	ldw	fp,0(sp)
 2014e30:	dec00204 	addi	sp,sp,8
 2014e34:	f800283a 	ret

02014e38 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 2014e38:	defffd04 	addi	sp,sp,-12
 2014e3c:	df000215 	stw	fp,8(sp)
 2014e40:	df000204 	addi	fp,sp,8
 2014e44:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 2014e48:	d0a74617 	ldw	r2,-25320(gp)
 2014e4c:	e0ffff17 	ldw	r3,-4(fp)
 2014e50:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2014e54:	d0a74617 	ldw	r2,-25320(gp)
 2014e58:	10800d03 	ldbu	r2,52(r2)
 2014e5c:	10803fcc 	andi	r2,r2,255
 2014e60:	d0e74617 	ldw	r3,-25320(gp)
 2014e64:	18c00d03 	ldbu	r3,52(r3)
 2014e68:	18c03fcc 	andi	r3,r3,255
 2014e6c:	e13fff17 	ldw	r4,-4(fp)
 2014e70:	20c7883a 	add	r3,r4,r3
 2014e74:	18c002c4 	addi	r3,r3,11
 2014e78:	19000003 	ldbu	r4,0(r3)
 2014e7c:	d0e74617 	ldw	r3,-25320(gp)
 2014e80:	18c00d43 	ldbu	r3,53(r3)
 2014e84:	20c6b03a 	or	r3,r4,r3
 2014e88:	1809883a 	mov	r4,r3
 2014e8c:	e0ffff17 	ldw	r3,-4(fp)
 2014e90:	1885883a 	add	r2,r3,r2
 2014e94:	108002c4 	addi	r2,r2,11
 2014e98:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2014e9c:	e0bfff17 	ldw	r2,-4(fp)
 2014ea0:	10c00283 	ldbu	r3,10(r2)
 2014ea4:	d0a74617 	ldw	r2,-25320(gp)
 2014ea8:	10800d83 	ldbu	r2,54(r2)
 2014eac:	1884b03a 	or	r2,r3,r2
 2014eb0:	1007883a 	mov	r3,r2
 2014eb4:	e0bfff17 	ldw	r2,-4(fp)
 2014eb8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2014ebc:	d0a74617 	ldw	r2,-25320(gp)
 2014ec0:	10800d03 	ldbu	r2,52(r2)
 2014ec4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2014ec8:	e0fffe03 	ldbu	r3,-8(fp)
 2014ecc:	e13ffe03 	ldbu	r4,-8(fp)
 2014ed0:	d0a74344 	addi	r2,gp,-25331
 2014ed4:	2085883a 	add	r2,r4,r2
 2014ed8:	10800003 	ldbu	r2,0(r2)
 2014edc:	1009883a 	mov	r4,r2
 2014ee0:	d0a74617 	ldw	r2,-25320(gp)
 2014ee4:	10800d43 	ldbu	r2,53(r2)
 2014ee8:	0084303a 	nor	r2,zero,r2
 2014eec:	2084703a 	and	r2,r4,r2
 2014ef0:	1009883a 	mov	r4,r2
 2014ef4:	d0a74344 	addi	r2,gp,-25331
 2014ef8:	1885883a 	add	r2,r3,r2
 2014efc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2014f00:	e0fffe03 	ldbu	r3,-8(fp)
 2014f04:	d0a74344 	addi	r2,gp,-25331
 2014f08:	1885883a 	add	r2,r3,r2
 2014f0c:	10800003 	ldbu	r2,0(r2)
 2014f10:	10803fcc 	andi	r2,r2,255
 2014f14:	1000071e 	bne	r2,zero,2014f34 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2014f18:	d0a74617 	ldw	r2,-25320(gp)
 2014f1c:	10800d83 	ldbu	r2,54(r2)
 2014f20:	0084303a 	nor	r2,zero,r2
 2014f24:	1007883a 	mov	r3,r2
 2014f28:	d0a74303 	ldbu	r2,-25332(gp)
 2014f2c:	1884703a 	and	r2,r3,r2
 2014f30:	d0a74305 	stb	r2,-25332(gp)
    }
}
 2014f34:	0001883a 	nop
 2014f38:	e037883a 	mov	sp,fp
 2014f3c:	df000017 	ldw	fp,0(sp)
 2014f40:	dec00104 	addi	sp,sp,4
 2014f44:	f800283a 	ret

02014f48 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 2014f48:	defffb04 	addi	sp,sp,-20
 2014f4c:	df000415 	stw	fp,16(sp)
 2014f50:	df000404 	addi	fp,sp,16
 2014f54:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2014f58:	d0a74617 	ldw	r2,-25320(gp)
 2014f5c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2014f60:	d0a74617 	ldw	r2,-25320(gp)
 2014f64:	e0ffff17 	ldw	r3,-4(fp)
 2014f68:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 2014f6c:	e0bfff17 	ldw	r2,-4(fp)
 2014f70:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 2014f74:	e0bffc17 	ldw	r2,-16(fp)
 2014f78:	10800017 	ldw	r2,0(r2)
 2014f7c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2014f80:	00002006 	br	2015004 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2014f84:	d0a74617 	ldw	r2,-25320(gp)
 2014f88:	10800d03 	ldbu	r2,52(r2)
 2014f8c:	10803fcc 	andi	r2,r2,255
 2014f90:	d0e74617 	ldw	r3,-25320(gp)
 2014f94:	18c00d03 	ldbu	r3,52(r3)
 2014f98:	18c03fcc 	andi	r3,r3,255
 2014f9c:	e13ffd17 	ldw	r4,-12(fp)
 2014fa0:	20c7883a 	add	r3,r4,r3
 2014fa4:	18c002c4 	addi	r3,r3,11
 2014fa8:	19000003 	ldbu	r4,0(r3)
 2014fac:	d0e74617 	ldw	r3,-25320(gp)
 2014fb0:	18c00d43 	ldbu	r3,53(r3)
 2014fb4:	20c6b03a 	or	r3,r4,r3
 2014fb8:	1809883a 	mov	r4,r3
 2014fbc:	e0fffd17 	ldw	r3,-12(fp)
 2014fc0:	1885883a 	add	r2,r3,r2
 2014fc4:	108002c4 	addi	r2,r2,11
 2014fc8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2014fcc:	e0bffd17 	ldw	r2,-12(fp)
 2014fd0:	10c00283 	ldbu	r3,10(r2)
 2014fd4:	d0a74617 	ldw	r2,-25320(gp)
 2014fd8:	10800d83 	ldbu	r2,54(r2)
 2014fdc:	1884b03a 	or	r2,r3,r2
 2014fe0:	1007883a 	mov	r3,r2
 2014fe4:	e0bffd17 	ldw	r2,-12(fp)
 2014fe8:	10c00285 	stb	r3,10(r2)
        pevents++;
 2014fec:	e0bffc17 	ldw	r2,-16(fp)
 2014ff0:	10800104 	addi	r2,r2,4
 2014ff4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 2014ff8:	e0bffc17 	ldw	r2,-16(fp)
 2014ffc:	10800017 	ldw	r2,0(r2)
 2015000:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2015004:	e0bffd17 	ldw	r2,-12(fp)
 2015008:	103fde1e 	bne	r2,zero,2014f84 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 201500c:	d0a74617 	ldw	r2,-25320(gp)
 2015010:	10800d03 	ldbu	r2,52(r2)
 2015014:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2015018:	e0fffe03 	ldbu	r3,-8(fp)
 201501c:	e13ffe03 	ldbu	r4,-8(fp)
 2015020:	d0a74344 	addi	r2,gp,-25331
 2015024:	2085883a 	add	r2,r4,r2
 2015028:	10800003 	ldbu	r2,0(r2)
 201502c:	1009883a 	mov	r4,r2
 2015030:	d0a74617 	ldw	r2,-25320(gp)
 2015034:	10800d43 	ldbu	r2,53(r2)
 2015038:	0084303a 	nor	r2,zero,r2
 201503c:	2084703a 	and	r2,r4,r2
 2015040:	1009883a 	mov	r4,r2
 2015044:	d0a74344 	addi	r2,gp,-25331
 2015048:	1885883a 	add	r2,r3,r2
 201504c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2015050:	e0fffe03 	ldbu	r3,-8(fp)
 2015054:	d0a74344 	addi	r2,gp,-25331
 2015058:	1885883a 	add	r2,r3,r2
 201505c:	10800003 	ldbu	r2,0(r2)
 2015060:	10803fcc 	andi	r2,r2,255
 2015064:	1000071e 	bne	r2,zero,2015084 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2015068:	d0a74617 	ldw	r2,-25320(gp)
 201506c:	10800d83 	ldbu	r2,54(r2)
 2015070:	0084303a 	nor	r2,zero,r2
 2015074:	1007883a 	mov	r3,r2
 2015078:	d0a74303 	ldbu	r2,-25332(gp)
 201507c:	1884703a 	and	r2,r3,r2
 2015080:	d0a74305 	stb	r2,-25332(gp)
    }
}
 2015084:	0001883a 	nop
 2015088:	e037883a 	mov	sp,fp
 201508c:	df000017 	ldw	fp,0(sp)
 2015090:	dec00104 	addi	sp,sp,4
 2015094:	f800283a 	ret

02015098 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2015098:	defffc04 	addi	sp,sp,-16
 201509c:	df000315 	stw	fp,12(sp)
 20150a0:	df000304 	addi	fp,sp,12
 20150a4:	e13ffe15 	stw	r4,-8(fp)
 20150a8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 20150ac:	e0bffe17 	ldw	r2,-8(fp)
 20150b0:	10800d03 	ldbu	r2,52(r2)
 20150b4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 20150b8:	e0bffd03 	ldbu	r2,-12(fp)
 20150bc:	e0fffd03 	ldbu	r3,-12(fp)
 20150c0:	e13fff17 	ldw	r4,-4(fp)
 20150c4:	20c7883a 	add	r3,r4,r3
 20150c8:	18c002c4 	addi	r3,r3,11
 20150cc:	18c00003 	ldbu	r3,0(r3)
 20150d0:	1809883a 	mov	r4,r3
 20150d4:	e0fffe17 	ldw	r3,-8(fp)
 20150d8:	18c00d43 	ldbu	r3,53(r3)
 20150dc:	00c6303a 	nor	r3,zero,r3
 20150e0:	20c6703a 	and	r3,r4,r3
 20150e4:	1809883a 	mov	r4,r3
 20150e8:	e0ffff17 	ldw	r3,-4(fp)
 20150ec:	1885883a 	add	r2,r3,r2
 20150f0:	108002c4 	addi	r2,r2,11
 20150f4:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 20150f8:	e0bffd03 	ldbu	r2,-12(fp)
 20150fc:	e0ffff17 	ldw	r3,-4(fp)
 2015100:	1885883a 	add	r2,r3,r2
 2015104:	108002c4 	addi	r2,r2,11
 2015108:	10800003 	ldbu	r2,0(r2)
 201510c:	10803fcc 	andi	r2,r2,255
 2015110:	10000a1e 	bne	r2,zero,201513c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 2015114:	e0bfff17 	ldw	r2,-4(fp)
 2015118:	10800283 	ldbu	r2,10(r2)
 201511c:	1007883a 	mov	r3,r2
 2015120:	e0bffe17 	ldw	r2,-8(fp)
 2015124:	10800d83 	ldbu	r2,54(r2)
 2015128:	0084303a 	nor	r2,zero,r2
 201512c:	1884703a 	and	r2,r3,r2
 2015130:	1007883a 	mov	r3,r2
 2015134:	e0bfff17 	ldw	r2,-4(fp)
 2015138:	10c00285 	stb	r3,10(r2)
    }
}
 201513c:	0001883a 	nop
 2015140:	e037883a 	mov	sp,fp
 2015144:	df000017 	ldw	fp,0(sp)
 2015148:	dec00104 	addi	sp,sp,4
 201514c:	f800283a 	ret

02015150 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2015150:	defffa04 	addi	sp,sp,-24
 2015154:	df000515 	stw	fp,20(sp)
 2015158:	df000504 	addi	fp,sp,20
 201515c:	e13ffe15 	stw	r4,-8(fp)
 2015160:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2015164:	e0bffe17 	ldw	r2,-8(fp)
 2015168:	10800d03 	ldbu	r2,52(r2)
 201516c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2015170:	e0bffe17 	ldw	r2,-8(fp)
 2015174:	10800d83 	ldbu	r2,54(r2)
 2015178:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 201517c:	e0bffe17 	ldw	r2,-8(fp)
 2015180:	10800d43 	ldbu	r2,53(r2)
 2015184:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 2015188:	e0bfff17 	ldw	r2,-4(fp)
 201518c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2015190:	e0bffb17 	ldw	r2,-20(fp)
 2015194:	10800017 	ldw	r2,0(r2)
 2015198:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 201519c:	00002506 	br	2015234 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 20151a0:	e0bffd03 	ldbu	r2,-12(fp)
 20151a4:	e0fffd03 	ldbu	r3,-12(fp)
 20151a8:	e13ffc17 	ldw	r4,-16(fp)
 20151ac:	20c7883a 	add	r3,r4,r3
 20151b0:	18c002c4 	addi	r3,r3,11
 20151b4:	18c00003 	ldbu	r3,0(r3)
 20151b8:	1809883a 	mov	r4,r3
 20151bc:	e0fffd83 	ldbu	r3,-10(fp)
 20151c0:	00c6303a 	nor	r3,zero,r3
 20151c4:	20c6703a 	and	r3,r4,r3
 20151c8:	1809883a 	mov	r4,r3
 20151cc:	e0fffc17 	ldw	r3,-16(fp)
 20151d0:	1885883a 	add	r2,r3,r2
 20151d4:	108002c4 	addi	r2,r2,11
 20151d8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 20151dc:	e0bffd03 	ldbu	r2,-12(fp)
 20151e0:	e0fffc17 	ldw	r3,-16(fp)
 20151e4:	1885883a 	add	r2,r3,r2
 20151e8:	108002c4 	addi	r2,r2,11
 20151ec:	10800003 	ldbu	r2,0(r2)
 20151f0:	10803fcc 	andi	r2,r2,255
 20151f4:	1000091e 	bne	r2,zero,201521c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 20151f8:	e0bffc17 	ldw	r2,-16(fp)
 20151fc:	10800283 	ldbu	r2,10(r2)
 2015200:	1007883a 	mov	r3,r2
 2015204:	e0bffd43 	ldbu	r2,-11(fp)
 2015208:	0084303a 	nor	r2,zero,r2
 201520c:	1884703a 	and	r2,r3,r2
 2015210:	1007883a 	mov	r3,r2
 2015214:	e0bffc17 	ldw	r2,-16(fp)
 2015218:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 201521c:	e0bffb17 	ldw	r2,-20(fp)
 2015220:	10800104 	addi	r2,r2,4
 2015224:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 2015228:	e0bffb17 	ldw	r2,-20(fp)
 201522c:	10800017 	ldw	r2,0(r2)
 2015230:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2015234:	e0bffc17 	ldw	r2,-16(fp)
 2015238:	103fd91e 	bne	r2,zero,20151a0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 201523c:	0001883a 	nop
 2015240:	e037883a 	mov	sp,fp
 2015244:	df000017 	ldw	fp,0(sp)
 2015248:	dec00104 	addi	sp,sp,4
 201524c:	f800283a 	ret

02015250 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 2015250:	defffc04 	addi	sp,sp,-16
 2015254:	df000315 	stw	fp,12(sp)
 2015258:	df000304 	addi	fp,sp,12
 201525c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2015260:	e0bfff17 	ldw	r2,-4(fp)
 2015264:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2015268:	e0bfff17 	ldw	r2,-4(fp)
 201526c:	108002c4 	addi	r2,r2,11
 2015270:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015274:	e03ffe05 	stb	zero,-8(fp)
 2015278:	00000706 	br	2015298 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 201527c:	e0bffd17 	ldw	r2,-12(fp)
 2015280:	10c00044 	addi	r3,r2,1
 2015284:	e0fffd15 	stw	r3,-12(fp)
 2015288:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201528c:	e0bffe03 	ldbu	r2,-8(fp)
 2015290:	10800044 	addi	r2,r2,1
 2015294:	e0bffe05 	stb	r2,-8(fp)
 2015298:	e0bffe03 	ldbu	r2,-8(fp)
 201529c:	108000f0 	cmpltui	r2,r2,3
 20152a0:	103ff61e 	bne	r2,zero,201527c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 20152a4:	0001883a 	nop
 20152a8:	e037883a 	mov	sp,fp
 20152ac:	df000017 	ldw	fp,0(sp)
 20152b0:	dec00104 	addi	sp,sp,4
 20152b4:	f800283a 	ret

020152b8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 20152b8:	defffb04 	addi	sp,sp,-20
 20152bc:	dfc00415 	stw	ra,16(sp)
 20152c0:	df000315 	stw	fp,12(sp)
 20152c4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 20152c8:	0142d004 	movi	r5,2880
 20152cc:	010080f4 	movhi	r4,515
 20152d0:	2131d604 	addi	r4,r4,-14504
 20152d4:	20156300 	call	2015630 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 20152d8:	008080f4 	movhi	r2,515
 20152dc:	10b1d604 	addi	r2,r2,-14504
 20152e0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 20152e4:	008080f4 	movhi	r2,515
 20152e8:	10b1e204 	addi	r2,r2,-14456
 20152ec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20152f0:	e03ffd0d 	sth	zero,-12(fp)
 20152f4:	00001306 	br	2015344 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 20152f8:	e0bffe17 	ldw	r2,-8(fp)
 20152fc:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 2015300:	e0bffe17 	ldw	r2,-8(fp)
 2015304:	e0ffff17 	ldw	r3,-4(fp)
 2015308:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 201530c:	e0bffe17 	ldw	r2,-8(fp)
 2015310:	00c00fc4 	movi	r3,63
 2015314:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 2015318:	e0bffe17 	ldw	r2,-8(fp)
 201531c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 2015320:	e0bffe17 	ldw	r2,-8(fp)
 2015324:	10800c04 	addi	r2,r2,48
 2015328:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 201532c:	e0bfff17 	ldw	r2,-4(fp)
 2015330:	10800c04 	addi	r2,r2,48
 2015334:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2015338:	e0bffd0b 	ldhu	r2,-12(fp)
 201533c:	10800044 	addi	r2,r2,1
 2015340:	e0bffd0d 	sth	r2,-12(fp)
 2015344:	e0bffd0b 	ldhu	r2,-12(fp)
 2015348:	10800ef0 	cmpltui	r2,r2,59
 201534c:	103fea1e 	bne	r2,zero,20152f8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 2015350:	e0bffe17 	ldw	r2,-8(fp)
 2015354:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 2015358:	e0bffe17 	ldw	r2,-8(fp)
 201535c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2015360:	e0bffe17 	ldw	r2,-8(fp)
 2015364:	00c00fc4 	movi	r3,63
 2015368:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 201536c:	e0bffe17 	ldw	r2,-8(fp)
 2015370:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2015374:	008080f4 	movhi	r2,515
 2015378:	10b1d604 	addi	r2,r2,-14504
 201537c:	d0a74415 	stw	r2,-25328(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2015380:	0001883a 	nop
 2015384:	e037883a 	mov	sp,fp
 2015388:	dfc00117 	ldw	ra,4(sp)
 201538c:	df000017 	ldw	fp,0(sp)
 2015390:	dec00204 	addi	sp,sp,8
 2015394:	f800283a 	ret

02015398 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2015398:	deffff04 	addi	sp,sp,-4
 201539c:	df000015 	stw	fp,0(sp)
 20153a0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 20153a4:	d0274715 	stw	zero,-25316(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 20153a8:	d0274505 	stb	zero,-25324(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 20153ac:	d0273705 	stb	zero,-25380(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 20153b0:	d0273f45 	stb	zero,-25347(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 20153b4:	d0273745 	stb	zero,-25379(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 20153b8:	d0273c15 	stw	zero,-25360(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 20153bc:	d0273815 	stw	zero,-25376(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 20153c0:	d0274a15 	stw	zero,-25304(gp)
    OSIdleCtrMax  = 0L;
 20153c4:	d0273d15 	stw	zero,-25356(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 20153c8:	d0274905 	stb	zero,-25308(gp)
#endif
}
 20153cc:	0001883a 	nop
 20153d0:	e037883a 	mov	sp,fp
 20153d4:	df000017 	ldw	fp,0(sp)
 20153d8:	dec00104 	addi	sp,sp,4
 20153dc:	f800283a 	ret

020153e0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 20153e0:	defffd04 	addi	sp,sp,-12
 20153e4:	df000215 	stw	fp,8(sp)
 20153e8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 20153ec:	d0274305 	stb	zero,-25332(gp)
    prdytbl       = &OSRdyTbl[0];
 20153f0:	d0a74344 	addi	r2,gp,-25331
 20153f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20153f8:	e03ffe05 	stb	zero,-8(fp)
 20153fc:	00000706 	br	201541c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 2015400:	e0bfff17 	ldw	r2,-4(fp)
 2015404:	10c00044 	addi	r3,r2,1
 2015408:	e0ffff15 	stw	r3,-4(fp)
 201540c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2015410:	e0bffe03 	ldbu	r2,-8(fp)
 2015414:	10800044 	addi	r2,r2,1
 2015418:	e0bffe05 	stb	r2,-8(fp)
 201541c:	e0bffe03 	ldbu	r2,-8(fp)
 2015420:	108000f0 	cmpltui	r2,r2,3
 2015424:	103ff61e 	bne	r2,zero,2015400 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 2015428:	d0273945 	stb	zero,-25371(gp)
    OSPrioHighRdy = 0;
 201542c:	d0273905 	stb	zero,-25372(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 2015430:	d0274115 	stw	zero,-25340(gp)
    OSTCBCur      = (OS_TCB *)0;
 2015434:	d0274615 	stw	zero,-25320(gp)
}
 2015438:	0001883a 	nop
 201543c:	e037883a 	mov	sp,fp
 2015440:	df000017 	ldw	fp,0(sp)
 2015444:	dec00104 	addi	sp,sp,4
 2015448:	f800283a 	ret

0201544c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 201544c:	defff804 	addi	sp,sp,-32
 2015450:	dfc00715 	stw	ra,28(sp)
 2015454:	df000615 	stw	fp,24(sp)
 2015458:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 201545c:	008000c4 	movi	r2,3
 2015460:	d8800415 	stw	r2,16(sp)
 2015464:	d8000315 	stw	zero,12(sp)
 2015468:	00808004 	movi	r2,512
 201546c:	d8800215 	stw	r2,8(sp)
 2015470:	008080f4 	movhi	r2,515
 2015474:	10afd604 	addi	r2,r2,-16552
 2015478:	d8800115 	stw	r2,4(sp)
 201547c:	00bfffd4 	movui	r2,65535
 2015480:	d8800015 	stw	r2,0(sp)
 2015484:	01c00504 	movi	r7,20
 2015488:	018080f4 	movhi	r6,515
 201548c:	31b1d504 	addi	r6,r6,-14508
 2015490:	000b883a 	mov	r5,zero
 2015494:	01008074 	movhi	r4,513
 2015498:	21163e04 	addi	r4,r4,22776
 201549c:	201aa800 	call	201aa80 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 20154a0:	e1bfff04 	addi	r6,fp,-4
 20154a4:	014080b4 	movhi	r5,514
 20154a8:	297b5504 	addi	r5,r5,-4780
 20154ac:	01000504 	movi	r4,20
 20154b0:	201b2900 	call	201b290 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 20154b4:	0001883a 	nop
 20154b8:	e037883a 	mov	sp,fp
 20154bc:	dfc00117 	ldw	ra,4(sp)
 20154c0:	df000017 	ldw	fp,0(sp)
 20154c4:	dec00204 	addi	sp,sp,8
 20154c8:	f800283a 	ret

020154cc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 20154cc:	defff804 	addi	sp,sp,-32
 20154d0:	dfc00715 	stw	ra,28(sp)
 20154d4:	df000615 	stw	fp,24(sp)
 20154d8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 20154dc:	008000c4 	movi	r2,3
 20154e0:	d8800415 	stw	r2,16(sp)
 20154e4:	d8000315 	stw	zero,12(sp)
 20154e8:	00808004 	movi	r2,512
 20154ec:	d8800215 	stw	r2,8(sp)
 20154f0:	008080f4 	movhi	r2,515
 20154f4:	10ad5e04 	addi	r2,r2,-19080
 20154f8:	d8800115 	stw	r2,4(sp)
 20154fc:	00bfff94 	movui	r2,65534
 2015500:	d8800015 	stw	r2,0(sp)
 2015504:	01c004c4 	movi	r7,19
 2015508:	018080f4 	movhi	r6,515
 201550c:	31af5d04 	addi	r6,r6,-17036
 2015510:	000b883a 	mov	r5,zero
 2015514:	01008074 	movhi	r4,513
 2015518:	21165504 	addi	r4,r4,22868
 201551c:	201aa800 	call	201aa80 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 2015520:	e1bfff04 	addi	r6,fp,-4
 2015524:	014080b4 	movhi	r5,514
 2015528:	297b5904 	addi	r5,r5,-4764
 201552c:	010004c4 	movi	r4,19
 2015530:	201b2900 	call	201b290 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 2015534:	0001883a 	nop
 2015538:	e037883a 	mov	sp,fp
 201553c:	dfc00117 	ldw	ra,4(sp)
 2015540:	df000017 	ldw	fp,0(sp)
 2015544:	dec00204 	addi	sp,sp,8
 2015548:	f800283a 	ret

0201554c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 201554c:	defffb04 	addi	sp,sp,-20
 2015550:	dfc00415 	stw	ra,16(sp)
 2015554:	df000315 	stw	fp,12(sp)
 2015558:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 201555c:	01414404 	movi	r5,1296
 2015560:	010080f4 	movhi	r4,515
 2015564:	2134a604 	addi	r4,r4,-11624
 2015568:	20156300 	call	2015630 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 201556c:	01401504 	movi	r5,84
 2015570:	010080f4 	movhi	r4,515
 2015574:	2135ea04 	addi	r4,r4,-10328
 2015578:	20156300 	call	2015630 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 201557c:	008080f4 	movhi	r2,515
 2015580:	10b4a604 	addi	r2,r2,-11624
 2015584:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2015588:	008080f4 	movhi	r2,515
 201558c:	10b4c104 	addi	r2,r2,-11516
 2015590:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2015594:	e03ffd05 	stb	zero,-12(fp)
 2015598:	00001106 	br	20155e0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 201559c:	e0bffe17 	ldw	r2,-8(fp)
 20155a0:	e0ffff17 	ldw	r3,-4(fp)
 20155a4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 20155a8:	e0bffe17 	ldw	r2,-8(fp)
 20155ac:	00c00fc4 	movi	r3,63
 20155b0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 20155b4:	e0bffe17 	ldw	r2,-8(fp)
 20155b8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 20155bc:	e0bffe17 	ldw	r2,-8(fp)
 20155c0:	10801b04 	addi	r2,r2,108
 20155c4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 20155c8:	e0bfff17 	ldw	r2,-4(fp)
 20155cc:	10801b04 	addi	r2,r2,108
 20155d0:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 20155d4:	e0bffd03 	ldbu	r2,-12(fp)
 20155d8:	10800044 	addi	r2,r2,1
 20155dc:	e0bffd05 	stb	r2,-12(fp)
 20155e0:	e0bffd03 	ldbu	r2,-12(fp)
 20155e4:	108002f0 	cmpltui	r2,r2,11
 20155e8:	103fec1e 	bne	r2,zero,201559c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 20155ec:	e0bffe17 	ldw	r2,-8(fp)
 20155f0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 20155f4:	e0bffe17 	ldw	r2,-8(fp)
 20155f8:	00c00fc4 	movi	r3,63
 20155fc:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2015600:	e0bffe17 	ldw	r2,-8(fp)
 2015604:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2015608:	d0273a15 	stw	zero,-25368(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 201560c:	008080f4 	movhi	r2,515
 2015610:	10b4a604 	addi	r2,r2,-11624
 2015614:	d0a73e15 	stw	r2,-25352(gp)
}
 2015618:	0001883a 	nop
 201561c:	e037883a 	mov	sp,fp
 2015620:	dfc00117 	ldw	ra,4(sp)
 2015624:	df000017 	ldw	fp,0(sp)
 2015628:	dec00204 	addi	sp,sp,8
 201562c:	f800283a 	ret

02015630 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 2015630:	defffd04 	addi	sp,sp,-12
 2015634:	df000215 	stw	fp,8(sp)
 2015638:	df000204 	addi	fp,sp,8
 201563c:	e13ffe15 	stw	r4,-8(fp)
 2015640:	2805883a 	mov	r2,r5
 2015644:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2015648:	00000706 	br	2015668 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 201564c:	e0bffe17 	ldw	r2,-8(fp)
 2015650:	10c00044 	addi	r3,r2,1
 2015654:	e0fffe15 	stw	r3,-8(fp)
 2015658:	10000005 	stb	zero,0(r2)
        size--;
 201565c:	e0bfff0b 	ldhu	r2,-4(fp)
 2015660:	10bfffc4 	addi	r2,r2,-1
 2015664:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2015668:	e0bfff0b 	ldhu	r2,-4(fp)
 201566c:	103ff71e 	bne	r2,zero,201564c <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2015670:	0001883a 	nop
 2015674:	e037883a 	mov	sp,fp
 2015678:	df000017 	ldw	fp,0(sp)
 201567c:	dec00104 	addi	sp,sp,4
 2015680:	f800283a 	ret

02015684 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2015684:	defffc04 	addi	sp,sp,-16
 2015688:	df000315 	stw	fp,12(sp)
 201568c:	df000304 	addi	fp,sp,12
 2015690:	e13ffd15 	stw	r4,-12(fp)
 2015694:	e17ffe15 	stw	r5,-8(fp)
 2015698:	3005883a 	mov	r2,r6
 201569c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 20156a0:	00000b06 	br	20156d0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 20156a4:	e0bffd17 	ldw	r2,-12(fp)
 20156a8:	10c00044 	addi	r3,r2,1
 20156ac:	e0fffd15 	stw	r3,-12(fp)
 20156b0:	e0fffe17 	ldw	r3,-8(fp)
 20156b4:	19000044 	addi	r4,r3,1
 20156b8:	e13ffe15 	stw	r4,-8(fp)
 20156bc:	18c00003 	ldbu	r3,0(r3)
 20156c0:	10c00005 	stb	r3,0(r2)
        size--;
 20156c4:	e0bfff0b 	ldhu	r2,-4(fp)
 20156c8:	10bfffc4 	addi	r2,r2,-1
 20156cc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 20156d0:	e0bfff0b 	ldhu	r2,-4(fp)
 20156d4:	103ff31e 	bne	r2,zero,20156a4 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 20156d8:	0001883a 	nop
 20156dc:	e037883a 	mov	sp,fp
 20156e0:	df000017 	ldw	fp,0(sp)
 20156e4:	dec00104 	addi	sp,sp,4
 20156e8:	f800283a 	ret

020156ec <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 20156ec:	defffb04 	addi	sp,sp,-20
 20156f0:	dfc00415 	stw	ra,16(sp)
 20156f4:	df000315 	stw	fp,12(sp)
 20156f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20156fc:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015700:	0005303a 	rdctl	r2,status
 2015704:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015708:	e0ffff17 	ldw	r3,-4(fp)
 201570c:	00bfff84 	movi	r2,-2
 2015710:	1884703a 	and	r2,r3,r2
 2015714:	1001703a 	wrctl	status,r2
  
  return context;
 2015718:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 201571c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2015720:	d0a74503 	ldbu	r2,-25324(gp)
 2015724:	10803fcc 	andi	r2,r2,255
 2015728:	10001a1e 	bne	r2,zero,2015794 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 201572c:	d0a73703 	ldbu	r2,-25380(gp)
 2015730:	10803fcc 	andi	r2,r2,255
 2015734:	1000171e 	bne	r2,zero,2015794 <OS_Sched+0xa8>
            OS_SchedNew();
 2015738:	20157bc0 	call	20157bc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 201573c:	d0e73903 	ldbu	r3,-25372(gp)
 2015740:	d0a73943 	ldbu	r2,-25371(gp)
 2015744:	18c03fcc 	andi	r3,r3,255
 2015748:	10803fcc 	andi	r2,r2,255
 201574c:	18801126 	beq	r3,r2,2015794 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2015750:	d0a73903 	ldbu	r2,-25372(gp)
 2015754:	10c03fcc 	andi	r3,r2,255
 2015758:	008080f4 	movhi	r2,515
 201575c:	10b5ea04 	addi	r2,r2,-10328
 2015760:	18c7883a 	add	r3,r3,r3
 2015764:	18c7883a 	add	r3,r3,r3
 2015768:	10c5883a 	add	r2,r2,r3
 201576c:	10800017 	ldw	r2,0(r2)
 2015770:	d0a74115 	stw	r2,-25340(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2015774:	d0a74117 	ldw	r2,-25340(gp)
 2015778:	10c00e17 	ldw	r3,56(r2)
 201577c:	18c00044 	addi	r3,r3,1
 2015780:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2015784:	d0a73c17 	ldw	r2,-25360(gp)
 2015788:	10800044 	addi	r2,r2,1
 201578c:	d0a73c15 	stw	r2,-25360(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2015790:	201da680 	call	201da68 <OSCtxSw>
 2015794:	e0bffd17 	ldw	r2,-12(fp)
 2015798:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201579c:	e0bffe17 	ldw	r2,-8(fp)
 20157a0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 20157a4:	0001883a 	nop
 20157a8:	e037883a 	mov	sp,fp
 20157ac:	dfc00117 	ldw	ra,4(sp)
 20157b0:	df000017 	ldw	fp,0(sp)
 20157b4:	dec00204 	addi	sp,sp,8
 20157b8:	f800283a 	ret

020157bc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 20157bc:	defffe04 	addi	sp,sp,-8
 20157c0:	df000115 	stw	fp,4(sp)
 20157c4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 20157c8:	d0a74303 	ldbu	r2,-25332(gp)
 20157cc:	10c03fcc 	andi	r3,r2,255
 20157d0:	008080b4 	movhi	r2,514
 20157d4:	10bb1504 	addi	r2,r2,-5036
 20157d8:	10c5883a 	add	r2,r2,r3
 20157dc:	10800003 	ldbu	r2,0(r2)
 20157e0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 20157e4:	e0bfff03 	ldbu	r2,-4(fp)
 20157e8:	100490fa 	slli	r2,r2,3
 20157ec:	1009883a 	mov	r4,r2
 20157f0:	e0ffff03 	ldbu	r3,-4(fp)
 20157f4:	d0a74344 	addi	r2,gp,-25331
 20157f8:	1885883a 	add	r2,r3,r2
 20157fc:	10800003 	ldbu	r2,0(r2)
 2015800:	10c03fcc 	andi	r3,r2,255
 2015804:	008080b4 	movhi	r2,514
 2015808:	10bb1504 	addi	r2,r2,-5036
 201580c:	10c5883a 	add	r2,r2,r3
 2015810:	10800003 	ldbu	r2,0(r2)
 2015814:	2085883a 	add	r2,r4,r2
 2015818:	d0a73905 	stb	r2,-25372(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 201581c:	0001883a 	nop
 2015820:	e037883a 	mov	sp,fp
 2015824:	df000017 	ldw	fp,0(sp)
 2015828:	dec00104 	addi	sp,sp,4
 201582c:	f800283a 	ret

02015830 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 2015830:	defffc04 	addi	sp,sp,-16
 2015834:	df000315 	stw	fp,12(sp)
 2015838:	df000304 	addi	fp,sp,12
 201583c:	e13ffe15 	stw	r4,-8(fp)
 2015840:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2015844:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 2015848:	00000b06 	br	2015878 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 201584c:	e0bffe17 	ldw	r2,-8(fp)
 2015850:	10c00044 	addi	r3,r2,1
 2015854:	e0fffe15 	stw	r3,-8(fp)
 2015858:	e0ffff17 	ldw	r3,-4(fp)
 201585c:	19000044 	addi	r4,r3,1
 2015860:	e13fff15 	stw	r4,-4(fp)
 2015864:	18c00003 	ldbu	r3,0(r3)
 2015868:	10c00005 	stb	r3,0(r2)
        len++;
 201586c:	e0bffd03 	ldbu	r2,-12(fp)
 2015870:	10800044 	addi	r2,r2,1
 2015874:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2015878:	e0bfff17 	ldw	r2,-4(fp)
 201587c:	10800003 	ldbu	r2,0(r2)
 2015880:	10803fcc 	andi	r2,r2,255
 2015884:	103ff11e 	bne	r2,zero,201584c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2015888:	e0bffe17 	ldw	r2,-8(fp)
 201588c:	10000005 	stb	zero,0(r2)
    return (len);
 2015890:	e0bffd03 	ldbu	r2,-12(fp)
}
 2015894:	e037883a 	mov	sp,fp
 2015898:	df000017 	ldw	fp,0(sp)
 201589c:	dec00104 	addi	sp,sp,4
 20158a0:	f800283a 	ret

020158a4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 20158a4:	defffd04 	addi	sp,sp,-12
 20158a8:	df000215 	stw	fp,8(sp)
 20158ac:	df000204 	addi	fp,sp,8
 20158b0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 20158b4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 20158b8:	00000606 	br	20158d4 <OS_StrLen+0x30>
        psrc++;
 20158bc:	e0bfff17 	ldw	r2,-4(fp)
 20158c0:	10800044 	addi	r2,r2,1
 20158c4:	e0bfff15 	stw	r2,-4(fp)
        len++;
 20158c8:	e0bffe03 	ldbu	r2,-8(fp)
 20158cc:	10800044 	addi	r2,r2,1
 20158d0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 20158d4:	e0bfff17 	ldw	r2,-4(fp)
 20158d8:	10800003 	ldbu	r2,0(r2)
 20158dc:	10803fcc 	andi	r2,r2,255
 20158e0:	103ff61e 	bne	r2,zero,20158bc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 20158e4:	e0bffe03 	ldbu	r2,-8(fp)
}
 20158e8:	e037883a 	mov	sp,fp
 20158ec:	df000017 	ldw	fp,0(sp)
 20158f0:	dec00104 	addi	sp,sp,4
 20158f4:	f800283a 	ret

020158f8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 20158f8:	defffa04 	addi	sp,sp,-24
 20158fc:	dfc00515 	stw	ra,20(sp)
 2015900:	df000415 	stw	fp,16(sp)
 2015904:	df000404 	addi	fp,sp,16
 2015908:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201590c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015910:	0005303a 	rdctl	r2,status
 2015914:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015918:	e0fffd17 	ldw	r3,-12(fp)
 201591c:	00bfff84 	movi	r2,-2
 2015920:	1884703a 	and	r2,r3,r2
 2015924:	1001703a 	wrctl	status,r2
  
  return context;
 2015928:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 201592c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 2015930:	d0a73817 	ldw	r2,-25376(gp)
 2015934:	10800044 	addi	r2,r2,1
 2015938:	d0a73815 	stw	r2,-25376(gp)
 201593c:	e0bffc17 	ldw	r2,-16(fp)
 2015940:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015944:	e0bffe17 	ldw	r2,-8(fp)
 2015948:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 201594c:	201dd7c0 	call	201dd7c <OSTaskIdleHook>
    }
 2015950:	003fef06 	br	2015910 <OS_TaskIdle+0x18>

02015954 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2015954:	defffa04 	addi	sp,sp,-24
 2015958:	dfc00515 	stw	ra,20(sp)
 201595c:	df000415 	stw	fp,16(sp)
 2015960:	df000404 	addi	fp,sp,16
 2015964:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015968:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 201596c:	00000206 	br	2015978 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2015970:	01003204 	movi	r4,200
 2015974:	201bb500 	call	201bb50 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2015978:	d0a74903 	ldbu	r2,-25308(gp)
 201597c:	10803fcc 	andi	r2,r2,255
 2015980:	103ffb26 	beq	r2,zero,2015970 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2015984:	d0a73d17 	ldw	r2,-25356(gp)
 2015988:	01401904 	movi	r5,100
 201598c:	1009883a 	mov	r4,r2
 2015990:	2004a080 	call	2004a08 <__udivsi3>
 2015994:	d0a73d15 	stw	r2,-25356(gp)
    if (OSIdleCtrMax == 0L) {
 2015998:	d0a73d17 	ldw	r2,-25356(gp)
 201599c:	1000031e 	bne	r2,zero,20159ac <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 20159a0:	d0273f05 	stb	zero,-25348(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 20159a4:	01003fc4 	movi	r4,255
 20159a8:	201b7d80 	call	201b7d8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20159ac:	0005303a 	rdctl	r2,status
 20159b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20159b4:	e0fffd17 	ldw	r3,-12(fp)
 20159b8:	00bfff84 	movi	r2,-2
 20159bc:	1884703a 	and	r2,r3,r2
 20159c0:	1001703a 	wrctl	status,r2
  
  return context;
 20159c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 20159c8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 20159cc:	d0a73817 	ldw	r2,-25376(gp)
 20159d0:	d0a74a15 	stw	r2,-25304(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 20159d4:	d0273815 	stw	zero,-25376(gp)
 20159d8:	e0bffc17 	ldw	r2,-16(fp)
 20159dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20159e0:	e0bffe17 	ldw	r2,-8(fp)
 20159e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 20159e8:	d0a74a17 	ldw	r2,-25304(gp)
 20159ec:	d0e73d17 	ldw	r3,-25356(gp)
 20159f0:	180b883a 	mov	r5,r3
 20159f4:	1009883a 	mov	r4,r2
 20159f8:	2004a080 	call	2004a08 <__udivsi3>
 20159fc:	1007883a 	mov	r3,r2
 2015a00:	00801904 	movi	r2,100
 2015a04:	10c5c83a 	sub	r2,r2,r3
 2015a08:	d0a73f05 	stb	r2,-25348(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2015a0c:	201dcfc0 	call	201dcfc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2015a10:	2015a200 	call	2015a20 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 2015a14:	01001904 	movi	r4,100
 2015a18:	201bb500 	call	201bb50 <OSTimeDly>
    }
 2015a1c:	003fe306 	br	20159ac <OS_TaskStat+0x58>

02015a20 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2015a20:	defffa04 	addi	sp,sp,-24
 2015a24:	dfc00515 	stw	ra,20(sp)
 2015a28:	df000415 	stw	fp,16(sp)
 2015a2c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2015a30:	e03ffc05 	stb	zero,-16(fp)
 2015a34:	00002406 	br	2015ac8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 2015a38:	e0bffc03 	ldbu	r2,-16(fp)
 2015a3c:	e0fffe04 	addi	r3,fp,-8
 2015a40:	180b883a 	mov	r5,r3
 2015a44:	1009883a 	mov	r4,r2
 2015a48:	201b6180 	call	201b618 <OSTaskStkChk>
 2015a4c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2015a50:	e0bffc43 	ldbu	r2,-15(fp)
 2015a54:	1000191e 	bne	r2,zero,2015abc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 2015a58:	e0fffc03 	ldbu	r3,-16(fp)
 2015a5c:	008080f4 	movhi	r2,515
 2015a60:	10b5ea04 	addi	r2,r2,-10328
 2015a64:	18c7883a 	add	r3,r3,r3
 2015a68:	18c7883a 	add	r3,r3,r3
 2015a6c:	10c5883a 	add	r2,r2,r3
 2015a70:	10800017 	ldw	r2,0(r2)
 2015a74:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2015a78:	e0bffd17 	ldw	r2,-12(fp)
 2015a7c:	10000f26 	beq	r2,zero,2015abc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2015a80:	e0bffd17 	ldw	r2,-12(fp)
 2015a84:	10800060 	cmpeqi	r2,r2,1
 2015a88:	10000c1e 	bne	r2,zero,2015abc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2015a8c:	e0bffd17 	ldw	r2,-12(fp)
 2015a90:	10c00217 	ldw	r3,8(r2)
 2015a94:	e0bffd17 	ldw	r2,-12(fp)
 2015a98:	10800317 	ldw	r2,12(r2)
 2015a9c:	1085883a 	add	r2,r2,r2
 2015aa0:	1085883a 	add	r2,r2,r2
 2015aa4:	1887883a 	add	r3,r3,r2
 2015aa8:	e0bffd17 	ldw	r2,-12(fp)
 2015aac:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2015ab0:	e0ffff17 	ldw	r3,-4(fp)
 2015ab4:	e0bffd17 	ldw	r2,-12(fp)
 2015ab8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2015abc:	e0bffc03 	ldbu	r2,-16(fp)
 2015ac0:	10800044 	addi	r2,r2,1
 2015ac4:	e0bffc05 	stb	r2,-16(fp)
 2015ac8:	e0bffc03 	ldbu	r2,-16(fp)
 2015acc:	10800570 	cmpltui	r2,r2,21
 2015ad0:	103fd91e 	bne	r2,zero,2015a38 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2015ad4:	0001883a 	nop
 2015ad8:	e037883a 	mov	sp,fp
 2015adc:	dfc00117 	ldw	ra,4(sp)
 2015ae0:	df000017 	ldw	fp,0(sp)
 2015ae4:	dec00204 	addi	sp,sp,8
 2015ae8:	f800283a 	ret

02015aec <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2015aec:	defff204 	addi	sp,sp,-56
 2015af0:	dfc00d15 	stw	ra,52(sp)
 2015af4:	df000c15 	stw	fp,48(sp)
 2015af8:	df000c04 	addi	fp,sp,48
 2015afc:	e17ffc15 	stw	r5,-16(fp)
 2015b00:	e1bffd15 	stw	r6,-12(fp)
 2015b04:	3807883a 	mov	r3,r7
 2015b08:	e0800417 	ldw	r2,16(fp)
 2015b0c:	e13ffb05 	stb	r4,-20(fp)
 2015b10:	e0fffe0d 	sth	r3,-8(fp)
 2015b14:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015b18:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015b1c:	0005303a 	rdctl	r2,status
 2015b20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015b24:	e0fffa17 	ldw	r3,-24(fp)
 2015b28:	00bfff84 	movi	r2,-2
 2015b2c:	1884703a 	and	r2,r3,r2
 2015b30:	1001703a 	wrctl	status,r2
  
  return context;
 2015b34:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 2015b38:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2015b3c:	d0a73e17 	ldw	r2,-25352(gp)
 2015b40:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 2015b44:	e0bff617 	ldw	r2,-40(fp)
 2015b48:	10009326 	beq	r2,zero,2015d98 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2015b4c:	e0bff617 	ldw	r2,-40(fp)
 2015b50:	10800517 	ldw	r2,20(r2)
 2015b54:	d0a73e15 	stw	r2,-25352(gp)
 2015b58:	e0bff417 	ldw	r2,-48(fp)
 2015b5c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015b60:	e0bff817 	ldw	r2,-32(fp)
 2015b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2015b68:	e0bff617 	ldw	r2,-40(fp)
 2015b6c:	e0fffc17 	ldw	r3,-16(fp)
 2015b70:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2015b74:	e0bff617 	ldw	r2,-40(fp)
 2015b78:	e0fffb03 	ldbu	r3,-20(fp)
 2015b7c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2015b80:	e0bff617 	ldw	r2,-40(fp)
 2015b84:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2015b88:	e0bff617 	ldw	r2,-40(fp)
 2015b8c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2015b90:	e0bff617 	ldw	r2,-40(fp)
 2015b94:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2015b98:	e0bff617 	ldw	r2,-40(fp)
 2015b9c:	e0c00317 	ldw	r3,12(fp)
 2015ba0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2015ba4:	e0bff617 	ldw	r2,-40(fp)
 2015ba8:	e0c00217 	ldw	r3,8(fp)
 2015bac:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2015bb0:	e0bff617 	ldw	r2,-40(fp)
 2015bb4:	e0fffd17 	ldw	r3,-12(fp)
 2015bb8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2015bbc:	e0bff617 	ldw	r2,-40(fp)
 2015bc0:	e0ffff0b 	ldhu	r3,-4(fp)
 2015bc4:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2015bc8:	e0bff617 	ldw	r2,-40(fp)
 2015bcc:	e0fffe0b 	ldhu	r3,-8(fp)
 2015bd0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2015bd4:	e0bff617 	ldw	r2,-40(fp)
 2015bd8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2015bdc:	e0bffb03 	ldbu	r2,-20(fp)
 2015be0:	1004d0fa 	srli	r2,r2,3
 2015be4:	1007883a 	mov	r3,r2
 2015be8:	e0bff617 	ldw	r2,-40(fp)
 2015bec:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2015bf0:	e0bffb03 	ldbu	r2,-20(fp)
 2015bf4:	108001cc 	andi	r2,r2,7
 2015bf8:	1007883a 	mov	r3,r2
 2015bfc:	e0bff617 	ldw	r2,-40(fp)
 2015c00:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2015c04:	e0bff617 	ldw	r2,-40(fp)
 2015c08:	10800d03 	ldbu	r2,52(r2)
 2015c0c:	10803fcc 	andi	r2,r2,255
 2015c10:	00c00044 	movi	r3,1
 2015c14:	1884983a 	sll	r2,r3,r2
 2015c18:	1007883a 	mov	r3,r2
 2015c1c:	e0bff617 	ldw	r2,-40(fp)
 2015c20:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2015c24:	e0bff617 	ldw	r2,-40(fp)
 2015c28:	10800cc3 	ldbu	r2,51(r2)
 2015c2c:	10803fcc 	andi	r2,r2,255
 2015c30:	00c00044 	movi	r3,1
 2015c34:	1884983a 	sll	r2,r3,r2
 2015c38:	1007883a 	mov	r3,r2
 2015c3c:	e0bff617 	ldw	r2,-40(fp)
 2015c40:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2015c44:	e0bff617 	ldw	r2,-40(fp)
 2015c48:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2015c4c:	e0bff617 	ldw	r2,-40(fp)
 2015c50:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2015c54:	e0bff617 	ldw	r2,-40(fp)
 2015c58:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2015c5c:	e0bff617 	ldw	r2,-40(fp)
 2015c60:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2015c64:	e0bff617 	ldw	r2,-40(fp)
 2015c68:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2015c6c:	e0bff617 	ldw	r2,-40(fp)
 2015c70:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2015c74:	e0bff617 	ldw	r2,-40(fp)
 2015c78:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2015c7c:	e0bff617 	ldw	r2,-40(fp)
 2015c80:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2015c84:	e0bff617 	ldw	r2,-40(fp)
 2015c88:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2015c8c:	e0bff617 	ldw	r2,-40(fp)
 2015c90:	00c00fc4 	movi	r3,63
 2015c94:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2015c98:	e0bff617 	ldw	r2,-40(fp)
 2015c9c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2015ca0:	e13ff617 	ldw	r4,-40(fp)
 2015ca4:	201dd9c0 	call	201dd9c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2015ca8:	e13ff617 	ldw	r4,-40(fp)
 2015cac:	201dc940 	call	201dc94 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015cb0:	0005303a 	rdctl	r2,status
 2015cb4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015cb8:	e0fff517 	ldw	r3,-44(fp)
 2015cbc:	00bfff84 	movi	r2,-2
 2015cc0:	1884703a 	and	r2,r3,r2
 2015cc4:	1001703a 	wrctl	status,r2
  
  return context;
 2015cc8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2015ccc:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2015cd0:	e0fffb03 	ldbu	r3,-20(fp)
 2015cd4:	008080f4 	movhi	r2,515
 2015cd8:	10b5ea04 	addi	r2,r2,-10328
 2015cdc:	18c7883a 	add	r3,r3,r3
 2015ce0:	18c7883a 	add	r3,r3,r3
 2015ce4:	10c5883a 	add	r2,r2,r3
 2015ce8:	e0fff617 	ldw	r3,-40(fp)
 2015cec:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2015cf0:	d0e73a17 	ldw	r3,-25368(gp)
 2015cf4:	e0bff617 	ldw	r2,-40(fp)
 2015cf8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2015cfc:	e0bff617 	ldw	r2,-40(fp)
 2015d00:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2015d04:	d0a73a17 	ldw	r2,-25368(gp)
 2015d08:	10000326 	beq	r2,zero,2015d18 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2015d0c:	d0a73a17 	ldw	r2,-25368(gp)
 2015d10:	e0fff617 	ldw	r3,-40(fp)
 2015d14:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2015d18:	e0bff617 	ldw	r2,-40(fp)
 2015d1c:	d0a73a15 	stw	r2,-25368(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2015d20:	e0bff617 	ldw	r2,-40(fp)
 2015d24:	10c00d83 	ldbu	r3,54(r2)
 2015d28:	d0a74303 	ldbu	r2,-25332(gp)
 2015d2c:	1884b03a 	or	r2,r3,r2
 2015d30:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2015d34:	e0bff617 	ldw	r2,-40(fp)
 2015d38:	10800d03 	ldbu	r2,52(r2)
 2015d3c:	10c03fcc 	andi	r3,r2,255
 2015d40:	e0bff617 	ldw	r2,-40(fp)
 2015d44:	10800d03 	ldbu	r2,52(r2)
 2015d48:	11003fcc 	andi	r4,r2,255
 2015d4c:	d0a74344 	addi	r2,gp,-25331
 2015d50:	2085883a 	add	r2,r4,r2
 2015d54:	11000003 	ldbu	r4,0(r2)
 2015d58:	e0bff617 	ldw	r2,-40(fp)
 2015d5c:	10800d43 	ldbu	r2,53(r2)
 2015d60:	2084b03a 	or	r2,r4,r2
 2015d64:	1009883a 	mov	r4,r2
 2015d68:	d0a74344 	addi	r2,gp,-25331
 2015d6c:	1885883a 	add	r2,r3,r2
 2015d70:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2015d74:	d0a73f43 	ldbu	r2,-25347(gp)
 2015d78:	10800044 	addi	r2,r2,1
 2015d7c:	d0a73f45 	stb	r2,-25347(gp)
 2015d80:	e0bff417 	ldw	r2,-48(fp)
 2015d84:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015d88:	e0bff717 	ldw	r2,-36(fp)
 2015d8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2015d90:	0005883a 	mov	r2,zero
 2015d94:	00000506 	br	2015dac <OS_TCBInit+0x2c0>
 2015d98:	e0bff417 	ldw	r2,-48(fp)
 2015d9c:	e0bff915 	stw	r2,-28(fp)
 2015da0:	e0bff917 	ldw	r2,-28(fp)
 2015da4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2015da8:	00801084 	movi	r2,66
}
 2015dac:	e037883a 	mov	sp,fp
 2015db0:	dfc00117 	ldw	ra,4(sp)
 2015db4:	df000017 	ldw	fp,0(sp)
 2015db8:	dec00204 	addi	sp,sp,8
 2015dbc:	f800283a 	ret

02015dc0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2015dc0:	defffe04 	addi	sp,sp,-8
 2015dc4:	df000115 	stw	fp,4(sp)
 2015dc8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2015dcc:	d0a00f04 	addi	r2,gp,-32708
 2015dd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2015dd4:	d0a01004 	addi	r2,gp,-32704
 2015dd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2015ddc:	d0a01184 	addi	r2,gp,-32698
 2015de0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2015de4:	d0a01204 	addi	r2,gp,-32696
 2015de8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2015dec:	d0a01104 	addi	r2,gp,-32700
 2015df0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2015df4:	d0a01284 	addi	r2,gp,-32694
 2015df8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2015dfc:	d0a01304 	addi	r2,gp,-32692
 2015e00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2015e04:	d0a01384 	addi	r2,gp,-32690
 2015e08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2015e0c:	d0a01404 	addi	r2,gp,-32688
 2015e10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2015e14:	d0a01484 	addi	r2,gp,-32686
 2015e18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2015e1c:	d0a01504 	addi	r2,gp,-32684
 2015e20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2015e24:	d0a01584 	addi	r2,gp,-32682
 2015e28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 2015e2c:	d0a01604 	addi	r2,gp,-32680
 2015e30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2015e34:	d0a01684 	addi	r2,gp,-32678
 2015e38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 2015e3c:	d0a01704 	addi	r2,gp,-32676
 2015e40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2015e44:	d0a01784 	addi	r2,gp,-32674
 2015e48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 2015e4c:	d0a01804 	addi	r2,gp,-32672
 2015e50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2015e54:	d0a01884 	addi	r2,gp,-32670
 2015e58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2015e5c:	d0a01904 	addi	r2,gp,-32668
 2015e60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2015e64:	d0a01984 	addi	r2,gp,-32666
 2015e68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2015e6c:	d0a01a04 	addi	r2,gp,-32664
 2015e70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2015e74:	d0a01a84 	addi	r2,gp,-32662
 2015e78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2015e7c:	d0a01b04 	addi	r2,gp,-32660
 2015e80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2015e84:	d0a01b84 	addi	r2,gp,-32658
 2015e88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2015e8c:	d0a01c04 	addi	r2,gp,-32656
 2015e90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2015e94:	d0a01c84 	addi	r2,gp,-32654
 2015e98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2015e9c:	d0a01d04 	addi	r2,gp,-32652
 2015ea0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2015ea4:	d0a01d84 	addi	r2,gp,-32650
 2015ea8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2015eac:	d0a01e04 	addi	r2,gp,-32648
 2015eb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2015eb4:	d0a01e84 	addi	r2,gp,-32646
 2015eb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2015ebc:	d0a01f04 	addi	r2,gp,-32644
 2015ec0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2015ec4:	d0a01f84 	addi	r2,gp,-32642
 2015ec8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2015ecc:	d0a02004 	addi	r2,gp,-32640
 2015ed0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2015ed4:	d0a02084 	addi	r2,gp,-32638
 2015ed8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2015edc:	d0a02104 	addi	r2,gp,-32636
 2015ee0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2015ee4:	d0a02184 	addi	r2,gp,-32634
 2015ee8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2015eec:	d0a02204 	addi	r2,gp,-32632
 2015ef0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2015ef4:	d0a02284 	addi	r2,gp,-32630
 2015ef8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2015efc:	d0a02304 	addi	r2,gp,-32628
 2015f00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2015f04:	d0a02384 	addi	r2,gp,-32626
 2015f08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 2015f0c:	d0a02404 	addi	r2,gp,-32624
 2015f10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2015f14:	d0a02484 	addi	r2,gp,-32622
 2015f18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 2015f1c:	d0a02504 	addi	r2,gp,-32620
 2015f20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2015f24:	d0a02584 	addi	r2,gp,-32618
 2015f28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 2015f2c:	d0a02604 	addi	r2,gp,-32616
 2015f30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2015f34:	d0a02b04 	addi	r2,gp,-32596
 2015f38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 2015f3c:	0001883a 	nop
 2015f40:	e037883a 	mov	sp,fp
 2015f44:	df000017 	ldw	fp,0(sp)
 2015f48:	dec00104 	addi	sp,sp,4
 2015f4c:	f800283a 	ret

02015f50 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2015f50:	defff204 	addi	sp,sp,-56
 2015f54:	df000d15 	stw	fp,52(sp)
 2015f58:	df000d04 	addi	fp,sp,52
 2015f5c:	e13ffc15 	stw	r4,-16(fp)
 2015f60:	2807883a 	mov	r3,r5
 2015f64:	3005883a 	mov	r2,r6
 2015f68:	e1ffff15 	stw	r7,-4(fp)
 2015f6c:	e0fffd0d 	sth	r3,-12(fp)
 2015f70:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2015f74:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2015f78:	e0bfff17 	ldw	r2,-4(fp)
 2015f7c:	1000021e 	bne	r2,zero,2015f88 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2015f80:	0005883a 	mov	r2,zero
 2015f84:	0000b006 	br	2016248 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2015f88:	e0bffc17 	ldw	r2,-16(fp)
 2015f8c:	1000051e 	bne	r2,zero,2015fa4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2015f90:	e0bfff17 	ldw	r2,-4(fp)
 2015f94:	00c01b84 	movi	r3,110
 2015f98:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2015f9c:	0005883a 	mov	r2,zero
 2015fa0:	0000a906 	br	2016248 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2015fa4:	e0bffc17 	ldw	r2,-16(fp)
 2015fa8:	10800003 	ldbu	r2,0(r2)
 2015fac:	10803fcc 	andi	r2,r2,255
 2015fb0:	10800160 	cmpeqi	r2,r2,5
 2015fb4:	1000051e 	bne	r2,zero,2015fcc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2015fb8:	e0bfff17 	ldw	r2,-4(fp)
 2015fbc:	00c00044 	movi	r3,1
 2015fc0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2015fc4:	0005883a 	mov	r2,zero
 2015fc8:	00009f06 	br	2016248 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2015fcc:	e0fffe03 	ldbu	r3,-8(fp)
 2015fd0:	00bfe004 	movi	r2,-128
 2015fd4:	1884703a 	and	r2,r3,r2
 2015fd8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2015fdc:	e0bff503 	ldbu	r2,-44(fp)
 2015fe0:	10000626 	beq	r2,zero,2015ffc <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2015fe4:	e0bffe03 	ldbu	r2,-8(fp)
 2015fe8:	10801fcc 	andi	r2,r2,127
 2015fec:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2015ff0:	00800044 	movi	r2,1
 2015ff4:	e0bff385 	stb	r2,-50(fp)
 2015ff8:	00000106 	br	2016000 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2015ffc:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2016000:	e0bfff17 	ldw	r2,-4(fp)
 2016004:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016008:	0005303a 	rdctl	r2,status
 201600c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016010:	e0fffb17 	ldw	r3,-20(fp)
 2016014:	00bfff84 	movi	r2,-2
 2016018:	1884703a 	and	r2,r3,r2
 201601c:	1001703a 	wrctl	status,r2
  
  return context;
 2016020:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2016024:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 2016028:	e0bffe03 	ldbu	r2,-8(fp)
 201602c:	10c00060 	cmpeqi	r3,r2,1
 2016030:	18005f1e 	bne	r3,zero,20161b0 <OSFlagAccept+0x260>
 2016034:	10c00088 	cmpgei	r3,r2,2
 2016038:	1800021e 	bne	r3,zero,2016044 <OSFlagAccept+0xf4>
 201603c:	10003f26 	beq	r2,zero,201613c <OSFlagAccept+0x1ec>
 2016040:	00007706 	br	2016220 <OSFlagAccept+0x2d0>
 2016044:	10c000a0 	cmpeqi	r3,r2,2
 2016048:	1800031e 	bne	r3,zero,2016058 <OSFlagAccept+0x108>
 201604c:	108000e0 	cmpeqi	r2,r2,3
 2016050:	10001e1e 	bne	r2,zero,20160cc <OSFlagAccept+0x17c>
 2016054:	00007206 	br	2016220 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2016058:	e0bffc17 	ldw	r2,-16(fp)
 201605c:	10c0020b 	ldhu	r3,8(r2)
 2016060:	e0bffd0b 	ldhu	r2,-12(fp)
 2016064:	1884703a 	and	r2,r3,r2
 2016068:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201606c:	e0fff30b 	ldhu	r3,-52(fp)
 2016070:	e0bffd0b 	ldhu	r2,-12(fp)
 2016074:	18800d1e 	bne	r3,r2,20160ac <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016078:	e0bff383 	ldbu	r2,-50(fp)
 201607c:	10800058 	cmpnei	r2,r2,1
 2016080:	10000d1e 	bne	r2,zero,20160b8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2016084:	e0bffc17 	ldw	r2,-16(fp)
 2016088:	1080020b 	ldhu	r2,8(r2)
 201608c:	1007883a 	mov	r3,r2
 2016090:	e0bff30b 	ldhu	r2,-52(fp)
 2016094:	0084303a 	nor	r2,zero,r2
 2016098:	1884703a 	and	r2,r3,r2
 201609c:	1007883a 	mov	r3,r2
 20160a0:	e0bffc17 	ldw	r2,-16(fp)
 20160a4:	10c0020d 	sth	r3,8(r2)
 20160a8:	00000306 	br	20160b8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20160ac:	e0bfff17 	ldw	r2,-4(fp)
 20160b0:	00c01c04 	movi	r3,112
 20160b4:	10c00005 	stb	r3,0(r2)
 20160b8:	e0bff417 	ldw	r2,-48(fp)
 20160bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20160c0:	e0bff617 	ldw	r2,-40(fp)
 20160c4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20160c8:	00005e06 	br	2016244 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 20160cc:	e0bffc17 	ldw	r2,-16(fp)
 20160d0:	10c0020b 	ldhu	r3,8(r2)
 20160d4:	e0bffd0b 	ldhu	r2,-12(fp)
 20160d8:	1884703a 	and	r2,r3,r2
 20160dc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 20160e0:	e0bff30b 	ldhu	r2,-52(fp)
 20160e4:	10000d26 	beq	r2,zero,201611c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20160e8:	e0bff383 	ldbu	r2,-50(fp)
 20160ec:	10800058 	cmpnei	r2,r2,1
 20160f0:	10000d1e 	bne	r2,zero,2016128 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 20160f4:	e0bffc17 	ldw	r2,-16(fp)
 20160f8:	1080020b 	ldhu	r2,8(r2)
 20160fc:	1007883a 	mov	r3,r2
 2016100:	e0bff30b 	ldhu	r2,-52(fp)
 2016104:	0084303a 	nor	r2,zero,r2
 2016108:	1884703a 	and	r2,r3,r2
 201610c:	1007883a 	mov	r3,r2
 2016110:	e0bffc17 	ldw	r2,-16(fp)
 2016114:	10c0020d 	sth	r3,8(r2)
 2016118:	00000306 	br	2016128 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201611c:	e0bfff17 	ldw	r2,-4(fp)
 2016120:	00c01c04 	movi	r3,112
 2016124:	10c00005 	stb	r3,0(r2)
 2016128:	e0bff417 	ldw	r2,-48(fp)
 201612c:	e0bff715 	stw	r2,-36(fp)
 2016130:	e0bff717 	ldw	r2,-36(fp)
 2016134:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2016138:	00004206 	br	2016244 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 201613c:	e0bffc17 	ldw	r2,-16(fp)
 2016140:	1080020b 	ldhu	r2,8(r2)
 2016144:	0084303a 	nor	r2,zero,r2
 2016148:	1007883a 	mov	r3,r2
 201614c:	e0bffd0b 	ldhu	r2,-12(fp)
 2016150:	1884703a 	and	r2,r3,r2
 2016154:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016158:	e0fff30b 	ldhu	r3,-52(fp)
 201615c:	e0bffd0b 	ldhu	r2,-12(fp)
 2016160:	18800b1e 	bne	r3,r2,2016190 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016164:	e0bff383 	ldbu	r2,-50(fp)
 2016168:	10800058 	cmpnei	r2,r2,1
 201616c:	10000b1e 	bne	r2,zero,201619c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2016170:	e0bffc17 	ldw	r2,-16(fp)
 2016174:	10c0020b 	ldhu	r3,8(r2)
 2016178:	e0bff30b 	ldhu	r2,-52(fp)
 201617c:	1884b03a 	or	r2,r3,r2
 2016180:	1007883a 	mov	r3,r2
 2016184:	e0bffc17 	ldw	r2,-16(fp)
 2016188:	10c0020d 	sth	r3,8(r2)
 201618c:	00000306 	br	201619c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016190:	e0bfff17 	ldw	r2,-4(fp)
 2016194:	00c01c04 	movi	r3,112
 2016198:	10c00005 	stb	r3,0(r2)
 201619c:	e0bff417 	ldw	r2,-48(fp)
 20161a0:	e0bff815 	stw	r2,-32(fp)
 20161a4:	e0bff817 	ldw	r2,-32(fp)
 20161a8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20161ac:	00002506 	br	2016244 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 20161b0:	e0bffc17 	ldw	r2,-16(fp)
 20161b4:	1080020b 	ldhu	r2,8(r2)
 20161b8:	0084303a 	nor	r2,zero,r2
 20161bc:	1007883a 	mov	r3,r2
 20161c0:	e0bffd0b 	ldhu	r2,-12(fp)
 20161c4:	1884703a 	and	r2,r3,r2
 20161c8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 20161cc:	e0bff30b 	ldhu	r2,-52(fp)
 20161d0:	10000b26 	beq	r2,zero,2016200 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20161d4:	e0bff383 	ldbu	r2,-50(fp)
 20161d8:	10800058 	cmpnei	r2,r2,1
 20161dc:	10000b1e 	bne	r2,zero,201620c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 20161e0:	e0bffc17 	ldw	r2,-16(fp)
 20161e4:	10c0020b 	ldhu	r3,8(r2)
 20161e8:	e0bff30b 	ldhu	r2,-52(fp)
 20161ec:	1884b03a 	or	r2,r3,r2
 20161f0:	1007883a 	mov	r3,r2
 20161f4:	e0bffc17 	ldw	r2,-16(fp)
 20161f8:	10c0020d 	sth	r3,8(r2)
 20161fc:	00000306 	br	201620c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016200:	e0bfff17 	ldw	r2,-4(fp)
 2016204:	00c01c04 	movi	r3,112
 2016208:	10c00005 	stb	r3,0(r2)
 201620c:	e0bff417 	ldw	r2,-48(fp)
 2016210:	e0bff915 	stw	r2,-28(fp)
 2016214:	e0bff917 	ldw	r2,-28(fp)
 2016218:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201621c:	00000906 	br	2016244 <OSFlagAccept+0x2f4>
 2016220:	e0bff417 	ldw	r2,-48(fp)
 2016224:	e0bffa15 	stw	r2,-24(fp)
 2016228:	e0bffa17 	ldw	r2,-24(fp)
 201622c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2016230:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 2016234:	e0bfff17 	ldw	r2,-4(fp)
 2016238:	00c01bc4 	movi	r3,111
 201623c:	10c00005 	stb	r3,0(r2)
             break;
 2016240:	0001883a 	nop
    }
    return (flags_rdy);
 2016244:	e0bff30b 	ldhu	r2,-52(fp)
}
 2016248:	e037883a 	mov	sp,fp
 201624c:	df000017 	ldw	fp,0(sp)
 2016250:	dec00104 	addi	sp,sp,4
 2016254:	f800283a 	ret

02016258 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 2016258:	defff804 	addi	sp,sp,-32
 201625c:	df000715 	stw	fp,28(sp)
 2016260:	df000704 	addi	fp,sp,28
 2016264:	2005883a 	mov	r2,r4
 2016268:	e17fff15 	stw	r5,-4(fp)
 201626c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2016270:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2016274:	e0bfff17 	ldw	r2,-4(fp)
 2016278:	1000021e 	bne	r2,zero,2016284 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 201627c:	0005883a 	mov	r2,zero
 2016280:	00003306 	br	2016350 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2016284:	d0a74503 	ldbu	r2,-25324(gp)
 2016288:	10803fcc 	andi	r2,r2,255
 201628c:	10000526 	beq	r2,zero,20162a4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2016290:	e0bfff17 	ldw	r2,-4(fp)
 2016294:	00c00404 	movi	r3,16
 2016298:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 201629c:	0005883a 	mov	r2,zero
 20162a0:	00002b06 	br	2016350 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20162a4:	0005303a 	rdctl	r2,status
 20162a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20162ac:	e0fffd17 	ldw	r3,-12(fp)
 20162b0:	00bfff84 	movi	r2,-2
 20162b4:	1884703a 	and	r2,r3,r2
 20162b8:	1001703a 	wrctl	status,r2
  
  return context;
 20162bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20162c0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 20162c4:	d0a74817 	ldw	r2,-25312(gp)
 20162c8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 20162cc:	e0bffb17 	ldw	r2,-20(fp)
 20162d0:	10001726 	beq	r2,zero,2016330 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 20162d4:	d0a74817 	ldw	r2,-25312(gp)
 20162d8:	10800117 	ldw	r2,4(r2)
 20162dc:	d0a74815 	stw	r2,-25312(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 20162e0:	e0bffb17 	ldw	r2,-20(fp)
 20162e4:	00c00144 	movi	r3,5
 20162e8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 20162ec:	e0bffb17 	ldw	r2,-20(fp)
 20162f0:	e0fffe0b 	ldhu	r3,-8(fp)
 20162f4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 20162f8:	e0bffb17 	ldw	r2,-20(fp)
 20162fc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2016300:	e0bffb17 	ldw	r2,-20(fp)
 2016304:	00c00fc4 	movi	r3,63
 2016308:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201630c:	e0bffb17 	ldw	r2,-20(fp)
 2016310:	100002c5 	stb	zero,11(r2)
 2016314:	e0bff917 	ldw	r2,-28(fp)
 2016318:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201631c:	e0bffa17 	ldw	r2,-24(fp)
 2016320:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2016324:	e0bfff17 	ldw	r2,-4(fp)
 2016328:	10000005 	stb	zero,0(r2)
 201632c:	00000706 	br	201634c <OSFlagCreate+0xf4>
 2016330:	e0bff917 	ldw	r2,-28(fp)
 2016334:	e0bffc15 	stw	r2,-16(fp)
 2016338:	e0bffc17 	ldw	r2,-16(fp)
 201633c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 2016340:	e0bfff17 	ldw	r2,-4(fp)
 2016344:	00c01c84 	movi	r3,114
 2016348:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 201634c:	e0bffb17 	ldw	r2,-20(fp)
}
 2016350:	e037883a 	mov	sp,fp
 2016354:	df000017 	ldw	fp,0(sp)
 2016358:	dec00104 	addi	sp,sp,4
 201635c:	f800283a 	ret

02016360 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2016360:	defff204 	addi	sp,sp,-56
 2016364:	dfc00d15 	stw	ra,52(sp)
 2016368:	df000c15 	stw	fp,48(sp)
 201636c:	df000c04 	addi	fp,sp,48
 2016370:	e13ffd15 	stw	r4,-12(fp)
 2016374:	2805883a 	mov	r2,r5
 2016378:	e1bfff15 	stw	r6,-4(fp)
 201637c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2016380:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2016384:	e0bfff17 	ldw	r2,-4(fp)
 2016388:	1000021e 	bne	r2,zero,2016394 <OSFlagDel+0x34>
        return (pgrp);
 201638c:	e0bffd17 	ldw	r2,-12(fp)
 2016390:	00008006 	br	2016594 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2016394:	e0bffd17 	ldw	r2,-12(fp)
 2016398:	1000051e 	bne	r2,zero,20163b0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 201639c:	e0bfff17 	ldw	r2,-4(fp)
 20163a0:	00c01b84 	movi	r3,110
 20163a4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 20163a8:	e0bffd17 	ldw	r2,-12(fp)
 20163ac:	00007906 	br	2016594 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20163b0:	d0a74503 	ldbu	r2,-25324(gp)
 20163b4:	10803fcc 	andi	r2,r2,255
 20163b8:	10000526 	beq	r2,zero,20163d0 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 20163bc:	e0bfff17 	ldw	r2,-4(fp)
 20163c0:	00c003c4 	movi	r3,15
 20163c4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 20163c8:	e0bffd17 	ldw	r2,-12(fp)
 20163cc:	00007106 	br	2016594 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 20163d0:	e0bffd17 	ldw	r2,-12(fp)
 20163d4:	10800003 	ldbu	r2,0(r2)
 20163d8:	10803fcc 	andi	r2,r2,255
 20163dc:	10800160 	cmpeqi	r2,r2,5
 20163e0:	1000051e 	bne	r2,zero,20163f8 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 20163e4:	e0bfff17 	ldw	r2,-4(fp)
 20163e8:	00c00044 	movi	r3,1
 20163ec:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 20163f0:	e0bffd17 	ldw	r2,-12(fp)
 20163f4:	00006706 	br	2016594 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20163f8:	0005303a 	rdctl	r2,status
 20163fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016400:	e0fffc17 	ldw	r3,-16(fp)
 2016404:	00bfff84 	movi	r2,-2
 2016408:	1884703a 	and	r2,r3,r2
 201640c:	1001703a 	wrctl	status,r2
  
  return context;
 2016410:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016414:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2016418:	e0bffd17 	ldw	r2,-12(fp)
 201641c:	10800117 	ldw	r2,4(r2)
 2016420:	10000326 	beq	r2,zero,2016430 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2016424:	00800044 	movi	r2,1
 2016428:	e0bff405 	stb	r2,-48(fp)
 201642c:	00000106 	br	2016434 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2016430:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2016434:	e0bffe03 	ldbu	r2,-8(fp)
 2016438:	10000326 	beq	r2,zero,2016448 <OSFlagDel+0xe8>
 201643c:	10800060 	cmpeqi	r2,r2,1
 2016440:	1000231e 	bne	r2,zero,20164d0 <OSFlagDel+0x170>
 2016444:	00004806 	br	2016568 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 2016448:	e0bff403 	ldbu	r2,-48(fp)
 201644c:	1000161e 	bne	r2,zero,20164a8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2016450:	e0bffd17 	ldw	r2,-12(fp)
 2016454:	00c00fc4 	movi	r3,63
 2016458:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201645c:	e0bffd17 	ldw	r2,-12(fp)
 2016460:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2016464:	e0bffd17 	ldw	r2,-12(fp)
 2016468:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 201646c:	d0e74817 	ldw	r3,-25312(gp)
 2016470:	e0bffd17 	ldw	r2,-12(fp)
 2016474:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2016478:	e0bffd17 	ldw	r2,-12(fp)
 201647c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2016480:	e0bffd17 	ldw	r2,-12(fp)
 2016484:	d0a74815 	stw	r2,-25312(gp)
 2016488:	e0bff717 	ldw	r2,-36(fp)
 201648c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016490:	e0bff817 	ldw	r2,-32(fp)
 2016494:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2016498:	e0bfff17 	ldw	r2,-4(fp)
 201649c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 20164a0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 20164a4:	00003a06 	br	2016590 <OSFlagDel+0x230>
 20164a8:	e0bff717 	ldw	r2,-36(fp)
 20164ac:	e0bff915 	stw	r2,-28(fp)
 20164b0:	e0bff917 	ldw	r2,-28(fp)
 20164b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 20164b8:	e0bfff17 	ldw	r2,-4(fp)
 20164bc:	00c01244 	movi	r3,73
 20164c0:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 20164c4:	e0bffd17 	ldw	r2,-12(fp)
 20164c8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 20164cc:	00003006 	br	2016590 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20164d0:	e0bffd17 	ldw	r2,-12(fp)
 20164d4:	10800117 	ldw	r2,4(r2)
 20164d8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 20164dc:	00000606 	br	20164f8 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 20164e0:	000b883a 	mov	r5,zero
 20164e4:	e13ff517 	ldw	r4,-44(fp)
 20164e8:	20174cc0 	call	20174cc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 20164ec:	e0bff517 	ldw	r2,-44(fp)
 20164f0:	10800017 	ldw	r2,0(r2)
 20164f4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 20164f8:	e0bff517 	ldw	r2,-44(fp)
 20164fc:	103ff81e 	bne	r2,zero,20164e0 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2016500:	e0bffd17 	ldw	r2,-12(fp)
 2016504:	00c00fc4 	movi	r3,63
 2016508:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 201650c:	e0bffd17 	ldw	r2,-12(fp)
 2016510:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2016514:	e0bffd17 	ldw	r2,-12(fp)
 2016518:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 201651c:	d0e74817 	ldw	r3,-25312(gp)
 2016520:	e0bffd17 	ldw	r2,-12(fp)
 2016524:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2016528:	e0bffd17 	ldw	r2,-12(fp)
 201652c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 2016530:	e0bffd17 	ldw	r2,-12(fp)
 2016534:	d0a74815 	stw	r2,-25312(gp)
 2016538:	e0bff717 	ldw	r2,-36(fp)
 201653c:	e0bffa15 	stw	r2,-24(fp)
 2016540:	e0bffa17 	ldw	r2,-24(fp)
 2016544:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2016548:	e0bff403 	ldbu	r2,-48(fp)
 201654c:	10800058 	cmpnei	r2,r2,1
 2016550:	1000011e 	bne	r2,zero,2016558 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2016554:	20156ec0 	call	20156ec <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 2016558:	e0bfff17 	ldw	r2,-4(fp)
 201655c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2016560:	e03ff615 	stw	zero,-40(fp)
             break;
 2016564:	00000a06 	br	2016590 <OSFlagDel+0x230>
 2016568:	e0bff717 	ldw	r2,-36(fp)
 201656c:	e0bffb15 	stw	r2,-20(fp)
 2016570:	e0bffb17 	ldw	r2,-20(fp)
 2016574:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2016578:	e0bfff17 	ldw	r2,-4(fp)
 201657c:	00c001c4 	movi	r3,7
 2016580:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2016584:	e0bffd17 	ldw	r2,-12(fp)
 2016588:	e0bff615 	stw	r2,-40(fp)
             break;
 201658c:	0001883a 	nop
    }
    return (pgrp_return);
 2016590:	e0bff617 	ldw	r2,-40(fp)
}
 2016594:	e037883a 	mov	sp,fp
 2016598:	dfc00117 	ldw	ra,4(sp)
 201659c:	df000017 	ldw	fp,0(sp)
 20165a0:	dec00204 	addi	sp,sp,8
 20165a4:	f800283a 	ret

020165a8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 20165a8:	defff604 	addi	sp,sp,-40
 20165ac:	dfc00915 	stw	ra,36(sp)
 20165b0:	df000815 	stw	fp,32(sp)
 20165b4:	df000804 	addi	fp,sp,32
 20165b8:	e13ffd15 	stw	r4,-12(fp)
 20165bc:	e17ffe15 	stw	r5,-8(fp)
 20165c0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20165c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20165c8:	e0bfff17 	ldw	r2,-4(fp)
 20165cc:	1000021e 	bne	r2,zero,20165d8 <OSFlagNameGet+0x30>
        return (0);
 20165d0:	0005883a 	mov	r2,zero
 20165d4:	00003906 	br	20166bc <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 20165d8:	e0bffd17 	ldw	r2,-12(fp)
 20165dc:	1000051e 	bne	r2,zero,20165f4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20165e0:	e0bfff17 	ldw	r2,-4(fp)
 20165e4:	00c01b84 	movi	r3,110
 20165e8:	10c00005 	stb	r3,0(r2)
        return (0);
 20165ec:	0005883a 	mov	r2,zero
 20165f0:	00003206 	br	20166bc <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20165f4:	e0bffe17 	ldw	r2,-8(fp)
 20165f8:	1000051e 	bne	r2,zero,2016610 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20165fc:	e0bfff17 	ldw	r2,-4(fp)
 2016600:	00c00304 	movi	r3,12
 2016604:	10c00005 	stb	r3,0(r2)
        return (0);
 2016608:	0005883a 	mov	r2,zero
 201660c:	00002b06 	br	20166bc <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016610:	d0a74503 	ldbu	r2,-25324(gp)
 2016614:	10803fcc 	andi	r2,r2,255
 2016618:	10000526 	beq	r2,zero,2016630 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 201661c:	e0bfff17 	ldw	r2,-4(fp)
 2016620:	00c00444 	movi	r3,17
 2016624:	10c00005 	stb	r3,0(r2)
        return (0);
 2016628:	0005883a 	mov	r2,zero
 201662c:	00002306 	br	20166bc <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016630:	0005303a 	rdctl	r2,status
 2016634:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016638:	e0fffc17 	ldw	r3,-16(fp)
 201663c:	00bfff84 	movi	r2,-2
 2016640:	1884703a 	and	r2,r3,r2
 2016644:	1001703a 	wrctl	status,r2
  
  return context;
 2016648:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201664c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2016650:	e0bffd17 	ldw	r2,-12(fp)
 2016654:	10800003 	ldbu	r2,0(r2)
 2016658:	10803fcc 	andi	r2,r2,255
 201665c:	10800160 	cmpeqi	r2,r2,5
 2016660:	1000091e 	bne	r2,zero,2016688 <OSFlagNameGet+0xe0>
 2016664:	e0bff817 	ldw	r2,-32(fp)
 2016668:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201666c:	e0bff917 	ldw	r2,-28(fp)
 2016670:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2016674:	e0bfff17 	ldw	r2,-4(fp)
 2016678:	00c00044 	movi	r3,1
 201667c:	10c00005 	stb	r3,0(r2)
        return (0);
 2016680:	0005883a 	mov	r2,zero
 2016684:	00000d06 	br	20166bc <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2016688:	e0bffd17 	ldw	r2,-12(fp)
 201668c:	10800284 	addi	r2,r2,10
 2016690:	100b883a 	mov	r5,r2
 2016694:	e13ffe17 	ldw	r4,-8(fp)
 2016698:	20158300 	call	2015830 <OS_StrCopy>
 201669c:	e0bffb05 	stb	r2,-20(fp)
 20166a0:	e0bff817 	ldw	r2,-32(fp)
 20166a4:	e0bffa15 	stw	r2,-24(fp)
 20166a8:	e0bffa17 	ldw	r2,-24(fp)
 20166ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20166b0:	e0bfff17 	ldw	r2,-4(fp)
 20166b4:	10000005 	stb	zero,0(r2)
    return (len);
 20166b8:	e0bffb03 	ldbu	r2,-20(fp)
}
 20166bc:	e037883a 	mov	sp,fp
 20166c0:	dfc00117 	ldw	ra,4(sp)
 20166c4:	df000017 	ldw	fp,0(sp)
 20166c8:	dec00204 	addi	sp,sp,8
 20166cc:	f800283a 	ret

020166d0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 20166d0:	defff504 	addi	sp,sp,-44
 20166d4:	dfc00a15 	stw	ra,40(sp)
 20166d8:	df000915 	stw	fp,36(sp)
 20166dc:	df000904 	addi	fp,sp,36
 20166e0:	e13ffd15 	stw	r4,-12(fp)
 20166e4:	e17ffe15 	stw	r5,-8(fp)
 20166e8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20166ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20166f0:	e0bfff17 	ldw	r2,-4(fp)
 20166f4:	10004326 	beq	r2,zero,2016804 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 20166f8:	e0bffd17 	ldw	r2,-12(fp)
 20166fc:	1000041e 	bne	r2,zero,2016710 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016700:	e0bfff17 	ldw	r2,-4(fp)
 2016704:	00c01b84 	movi	r3,110
 2016708:	10c00005 	stb	r3,0(r2)
        return;
 201670c:	00003e06 	br	2016808 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2016710:	e0bffe17 	ldw	r2,-8(fp)
 2016714:	1000041e 	bne	r2,zero,2016728 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2016718:	e0bfff17 	ldw	r2,-4(fp)
 201671c:	00c00304 	movi	r3,12
 2016720:	10c00005 	stb	r3,0(r2)
        return;
 2016724:	00003806 	br	2016808 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016728:	d0a74503 	ldbu	r2,-25324(gp)
 201672c:	10803fcc 	andi	r2,r2,255
 2016730:	10000426 	beq	r2,zero,2016744 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2016734:	e0bfff17 	ldw	r2,-4(fp)
 2016738:	00c00484 	movi	r3,18
 201673c:	10c00005 	stb	r3,0(r2)
        return;
 2016740:	00003106 	br	2016808 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016744:	0005303a 	rdctl	r2,status
 2016748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201674c:	e0fffc17 	ldw	r3,-16(fp)
 2016750:	00bfff84 	movi	r2,-2
 2016754:	1884703a 	and	r2,r3,r2
 2016758:	1001703a 	wrctl	status,r2
  
  return context;
 201675c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016760:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2016764:	e0bffd17 	ldw	r2,-12(fp)
 2016768:	10800003 	ldbu	r2,0(r2)
 201676c:	10803fcc 	andi	r2,r2,255
 2016770:	10800160 	cmpeqi	r2,r2,5
 2016774:	1000081e 	bne	r2,zero,2016798 <OSFlagNameSet+0xc8>
 2016778:	e0bff717 	ldw	r2,-36(fp)
 201677c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016780:	e0bff817 	ldw	r2,-32(fp)
 2016784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2016788:	e0bfff17 	ldw	r2,-4(fp)
 201678c:	00c00044 	movi	r3,1
 2016790:	10c00005 	stb	r3,0(r2)
        return;
 2016794:	00001c06 	br	2016808 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2016798:	e13ffe17 	ldw	r4,-8(fp)
 201679c:	20158a40 	call	20158a4 <OS_StrLen>
 20167a0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 20167a4:	e0bffa03 	ldbu	r2,-24(fp)
 20167a8:	10800830 	cmpltui	r2,r2,32
 20167ac:	1000081e 	bne	r2,zero,20167d0 <OSFlagNameSet+0x100>
 20167b0:	e0bff717 	ldw	r2,-36(fp)
 20167b4:	e0bff915 	stw	r2,-28(fp)
 20167b8:	e0bff917 	ldw	r2,-28(fp)
 20167bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 20167c0:	e0bfff17 	ldw	r2,-4(fp)
 20167c4:	00c01cc4 	movi	r3,115
 20167c8:	10c00005 	stb	r3,0(r2)
        return;
 20167cc:	00000e06 	br	2016808 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 20167d0:	e0bffd17 	ldw	r2,-12(fp)
 20167d4:	10800284 	addi	r2,r2,10
 20167d8:	e17ffe17 	ldw	r5,-8(fp)
 20167dc:	1009883a 	mov	r4,r2
 20167e0:	20158300 	call	2015830 <OS_StrCopy>
 20167e4:	e0bff717 	ldw	r2,-36(fp)
 20167e8:	e0bffb15 	stw	r2,-20(fp)
 20167ec:	e0bffb17 	ldw	r2,-20(fp)
 20167f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20167f4:	e0bfff17 	ldw	r2,-4(fp)
 20167f8:	10000005 	stb	zero,0(r2)
    return;
 20167fc:	0001883a 	nop
 2016800:	00000106 	br	2016808 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 2016804:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 2016808:	e037883a 	mov	sp,fp
 201680c:	dfc00117 	ldw	ra,4(sp)
 2016810:	df000017 	ldw	fp,0(sp)
 2016814:	dec00204 	addi	sp,sp,8
 2016818:	f800283a 	ret

0201681c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 201681c:	deffe104 	addi	sp,sp,-124
 2016820:	dfc01e15 	stw	ra,120(sp)
 2016824:	df001d15 	stw	fp,116(sp)
 2016828:	df001d04 	addi	fp,sp,116
 201682c:	e13ffc15 	stw	r4,-16(fp)
 2016830:	2809883a 	mov	r4,r5
 2016834:	3007883a 	mov	r3,r6
 2016838:	3805883a 	mov	r2,r7
 201683c:	e13ffd0d 	sth	r4,-12(fp)
 2016840:	e0fffe05 	stb	r3,-8(fp)
 2016844:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2016848:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201684c:	e0800217 	ldw	r2,8(fp)
 2016850:	1000021e 	bne	r2,zero,201685c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 2016854:	0005883a 	mov	r2,zero
 2016858:	00015906 	br	2016dc0 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 201685c:	e0bffc17 	ldw	r2,-16(fp)
 2016860:	1000051e 	bne	r2,zero,2016878 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016864:	e0800217 	ldw	r2,8(fp)
 2016868:	00c01b84 	movi	r3,110
 201686c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016870:	0005883a 	mov	r2,zero
 2016874:	00015206 	br	2016dc0 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2016878:	d0a74503 	ldbu	r2,-25324(gp)
 201687c:	10803fcc 	andi	r2,r2,255
 2016880:	10000526 	beq	r2,zero,2016898 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2016884:	e0800217 	ldw	r2,8(fp)
 2016888:	00c00084 	movi	r3,2
 201688c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016890:	0005883a 	mov	r2,zero
 2016894:	00014a06 	br	2016dc0 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2016898:	d0a73703 	ldbu	r2,-25380(gp)
 201689c:	10803fcc 	andi	r2,r2,255
 20168a0:	10000526 	beq	r2,zero,20168b8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 20168a4:	e0800217 	ldw	r2,8(fp)
 20168a8:	00c00344 	movi	r3,13
 20168ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20168b0:	0005883a 	mov	r2,zero
 20168b4:	00014206 	br	2016dc0 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 20168b8:	e0bffc17 	ldw	r2,-16(fp)
 20168bc:	10800003 	ldbu	r2,0(r2)
 20168c0:	10803fcc 	andi	r2,r2,255
 20168c4:	10800160 	cmpeqi	r2,r2,5
 20168c8:	1000051e 	bne	r2,zero,20168e0 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 20168cc:	e0800217 	ldw	r2,8(fp)
 20168d0:	00c00044 	movi	r3,1
 20168d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20168d8:	0005883a 	mov	r2,zero
 20168dc:	00013806 	br	2016dc0 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 20168e0:	e0fffe03 	ldbu	r3,-8(fp)
 20168e4:	00bfe004 	movi	r2,-128
 20168e8:	1884703a 	and	r2,r3,r2
 20168ec:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 20168f0:	e0bfe603 	ldbu	r2,-104(fp)
 20168f4:	10000626 	beq	r2,zero,2016910 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 20168f8:	e0bffe03 	ldbu	r2,-8(fp)
 20168fc:	10801fcc 	andi	r2,r2,127
 2016900:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2016904:	00800044 	movi	r2,1
 2016908:	e0bfe405 	stb	r2,-112(fp)
 201690c:	00000106 	br	2016914 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 2016910:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016914:	0005303a 	rdctl	r2,status
 2016918:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201691c:	e0fff617 	ldw	r3,-40(fp)
 2016920:	00bfff84 	movi	r2,-2
 2016924:	1884703a 	and	r2,r3,r2
 2016928:	1001703a 	wrctl	status,r2
  
  return context;
 201692c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2016930:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 2016934:	e0bffe03 	ldbu	r2,-8(fp)
 2016938:	10c00060 	cmpeqi	r3,r2,1
 201693c:	1800921e 	bne	r3,zero,2016b88 <OSFlagPend+0x36c>
 2016940:	10c00088 	cmpgei	r3,r2,2
 2016944:	1800021e 	bne	r3,zero,2016950 <OSFlagPend+0x134>
 2016948:	10006126 	beq	r2,zero,2016ad0 <OSFlagPend+0x2b4>
 201694c:	0000bb06 	br	2016c3c <OSFlagPend+0x420>
 2016950:	10c000a0 	cmpeqi	r3,r2,2
 2016954:	1800031e 	bne	r3,zero,2016964 <OSFlagPend+0x148>
 2016958:	108000e0 	cmpeqi	r2,r2,3
 201695c:	10002f1e 	bne	r2,zero,2016a1c <OSFlagPend+0x200>
 2016960:	0000b606 	br	2016c3c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 2016964:	e0bffc17 	ldw	r2,-16(fp)
 2016968:	10c0020b 	ldhu	r3,8(r2)
 201696c:	e0bffd0b 	ldhu	r2,-12(fp)
 2016970:	1884703a 	and	r2,r3,r2
 2016974:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016978:	e0ffe80b 	ldhu	r3,-96(fp)
 201697c:	e0bffd0b 	ldhu	r2,-12(fp)
 2016980:	1880171e 	bne	r3,r2,20169e0 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016984:	e0bfe403 	ldbu	r2,-112(fp)
 2016988:	10800058 	cmpnei	r2,r2,1
 201698c:	1000091e 	bne	r2,zero,20169b4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2016990:	e0bffc17 	ldw	r2,-16(fp)
 2016994:	1080020b 	ldhu	r2,8(r2)
 2016998:	1007883a 	mov	r3,r2
 201699c:	e0bfe80b 	ldhu	r2,-96(fp)
 20169a0:	0084303a 	nor	r2,zero,r2
 20169a4:	1884703a 	and	r2,r3,r2
 20169a8:	1007883a 	mov	r3,r2
 20169ac:	e0bffc17 	ldw	r2,-16(fp)
 20169b0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20169b4:	d0a74617 	ldw	r2,-25320(gp)
 20169b8:	e0ffe80b 	ldhu	r3,-96(fp)
 20169bc:	10c00b0d 	sth	r3,44(r2)
 20169c0:	e0bfe517 	ldw	r2,-108(fp)
 20169c4:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20169c8:	e0bfe717 	ldw	r2,-100(fp)
 20169cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20169d0:	e0800217 	ldw	r2,8(fp)
 20169d4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20169d8:	e0bfe80b 	ldhu	r2,-96(fp)
 20169dc:	0000f806 	br	2016dc0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20169e0:	e13ffd0b 	ldhu	r4,-12(fp)
 20169e4:	e17ffe03 	ldbu	r5,-8(fp)
 20169e8:	e0bfff0b 	ldhu	r2,-4(fp)
 20169ec:	e0fff704 	addi	r3,fp,-36
 20169f0:	d8800015 	stw	r2,0(sp)
 20169f4:	280f883a 	mov	r7,r5
 20169f8:	200d883a 	mov	r6,r4
 20169fc:	180b883a 	mov	r5,r3
 2016a00:	e13ffc17 	ldw	r4,-16(fp)
 2016a04:	201728c0 	call	201728c <OS_FlagBlock>
 2016a08:	e0bfe517 	ldw	r2,-108(fp)
 2016a0c:	e0bfe915 	stw	r2,-92(fp)
 2016a10:	e0bfe917 	ldw	r2,-92(fp)
 2016a14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016a18:	00009206 	br	2016c64 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2016a1c:	e0bffc17 	ldw	r2,-16(fp)
 2016a20:	10c0020b 	ldhu	r3,8(r2)
 2016a24:	e0bffd0b 	ldhu	r2,-12(fp)
 2016a28:	1884703a 	and	r2,r3,r2
 2016a2c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2016a30:	e0bfe80b 	ldhu	r2,-96(fp)
 2016a34:	10001726 	beq	r2,zero,2016a94 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016a38:	e0bfe403 	ldbu	r2,-112(fp)
 2016a3c:	10800058 	cmpnei	r2,r2,1
 2016a40:	1000091e 	bne	r2,zero,2016a68 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2016a44:	e0bffc17 	ldw	r2,-16(fp)
 2016a48:	1080020b 	ldhu	r2,8(r2)
 2016a4c:	1007883a 	mov	r3,r2
 2016a50:	e0bfe80b 	ldhu	r2,-96(fp)
 2016a54:	0084303a 	nor	r2,zero,r2
 2016a58:	1884703a 	and	r2,r3,r2
 2016a5c:	1007883a 	mov	r3,r2
 2016a60:	e0bffc17 	ldw	r2,-16(fp)
 2016a64:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2016a68:	d0a74617 	ldw	r2,-25320(gp)
 2016a6c:	e0ffe80b 	ldhu	r3,-96(fp)
 2016a70:	10c00b0d 	sth	r3,44(r2)
 2016a74:	e0bfe517 	ldw	r2,-108(fp)
 2016a78:	e0bfea15 	stw	r2,-88(fp)
 2016a7c:	e0bfea17 	ldw	r2,-88(fp)
 2016a80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016a84:	e0800217 	ldw	r2,8(fp)
 2016a88:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016a8c:	e0bfe80b 	ldhu	r2,-96(fp)
 2016a90:	0000cb06 	br	2016dc0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016a94:	e13ffd0b 	ldhu	r4,-12(fp)
 2016a98:	e17ffe03 	ldbu	r5,-8(fp)
 2016a9c:	e0bfff0b 	ldhu	r2,-4(fp)
 2016aa0:	e0fff704 	addi	r3,fp,-36
 2016aa4:	d8800015 	stw	r2,0(sp)
 2016aa8:	280f883a 	mov	r7,r5
 2016aac:	200d883a 	mov	r6,r4
 2016ab0:	180b883a 	mov	r5,r3
 2016ab4:	e13ffc17 	ldw	r4,-16(fp)
 2016ab8:	201728c0 	call	201728c <OS_FlagBlock>
 2016abc:	e0bfe517 	ldw	r2,-108(fp)
 2016ac0:	e0bfeb15 	stw	r2,-84(fp)
 2016ac4:	e0bfeb17 	ldw	r2,-84(fp)
 2016ac8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016acc:	00006506 	br	2016c64 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2016ad0:	e0bffc17 	ldw	r2,-16(fp)
 2016ad4:	1080020b 	ldhu	r2,8(r2)
 2016ad8:	0084303a 	nor	r2,zero,r2
 2016adc:	1007883a 	mov	r3,r2
 2016ae0:	e0bffd0b 	ldhu	r2,-12(fp)
 2016ae4:	1884703a 	and	r2,r3,r2
 2016ae8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016aec:	e0ffe80b 	ldhu	r3,-96(fp)
 2016af0:	e0bffd0b 	ldhu	r2,-12(fp)
 2016af4:	1880151e 	bne	r3,r2,2016b4c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016af8:	e0bfe403 	ldbu	r2,-112(fp)
 2016afc:	10800058 	cmpnei	r2,r2,1
 2016b00:	1000071e 	bne	r2,zero,2016b20 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2016b04:	e0bffc17 	ldw	r2,-16(fp)
 2016b08:	10c0020b 	ldhu	r3,8(r2)
 2016b0c:	e0bfe80b 	ldhu	r2,-96(fp)
 2016b10:	1884b03a 	or	r2,r3,r2
 2016b14:	1007883a 	mov	r3,r2
 2016b18:	e0bffc17 	ldw	r2,-16(fp)
 2016b1c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2016b20:	d0a74617 	ldw	r2,-25320(gp)
 2016b24:	e0ffe80b 	ldhu	r3,-96(fp)
 2016b28:	10c00b0d 	sth	r3,44(r2)
 2016b2c:	e0bfe517 	ldw	r2,-108(fp)
 2016b30:	e0bfec15 	stw	r2,-80(fp)
 2016b34:	e0bfec17 	ldw	r2,-80(fp)
 2016b38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016b3c:	e0800217 	ldw	r2,8(fp)
 2016b40:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016b44:	e0bfe80b 	ldhu	r2,-96(fp)
 2016b48:	00009d06 	br	2016dc0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016b4c:	e13ffd0b 	ldhu	r4,-12(fp)
 2016b50:	e17ffe03 	ldbu	r5,-8(fp)
 2016b54:	e0bfff0b 	ldhu	r2,-4(fp)
 2016b58:	e0fff704 	addi	r3,fp,-36
 2016b5c:	d8800015 	stw	r2,0(sp)
 2016b60:	280f883a 	mov	r7,r5
 2016b64:	200d883a 	mov	r6,r4
 2016b68:	180b883a 	mov	r5,r3
 2016b6c:	e13ffc17 	ldw	r4,-16(fp)
 2016b70:	201728c0 	call	201728c <OS_FlagBlock>
 2016b74:	e0bfe517 	ldw	r2,-108(fp)
 2016b78:	e0bfed15 	stw	r2,-76(fp)
 2016b7c:	e0bfed17 	ldw	r2,-76(fp)
 2016b80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016b84:	00003706 	br	2016c64 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2016b88:	e0bffc17 	ldw	r2,-16(fp)
 2016b8c:	1080020b 	ldhu	r2,8(r2)
 2016b90:	0084303a 	nor	r2,zero,r2
 2016b94:	1007883a 	mov	r3,r2
 2016b98:	e0bffd0b 	ldhu	r2,-12(fp)
 2016b9c:	1884703a 	and	r2,r3,r2
 2016ba0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2016ba4:	e0bfe80b 	ldhu	r2,-96(fp)
 2016ba8:	10001526 	beq	r2,zero,2016c00 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016bac:	e0bfe403 	ldbu	r2,-112(fp)
 2016bb0:	10800058 	cmpnei	r2,r2,1
 2016bb4:	1000071e 	bne	r2,zero,2016bd4 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2016bb8:	e0bffc17 	ldw	r2,-16(fp)
 2016bbc:	10c0020b 	ldhu	r3,8(r2)
 2016bc0:	e0bfe80b 	ldhu	r2,-96(fp)
 2016bc4:	1884b03a 	or	r2,r3,r2
 2016bc8:	1007883a 	mov	r3,r2
 2016bcc:	e0bffc17 	ldw	r2,-16(fp)
 2016bd0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2016bd4:	d0a74617 	ldw	r2,-25320(gp)
 2016bd8:	e0ffe80b 	ldhu	r3,-96(fp)
 2016bdc:	10c00b0d 	sth	r3,44(r2)
 2016be0:	e0bfe517 	ldw	r2,-108(fp)
 2016be4:	e0bfee15 	stw	r2,-72(fp)
 2016be8:	e0bfee17 	ldw	r2,-72(fp)
 2016bec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2016bf0:	e0800217 	ldw	r2,8(fp)
 2016bf4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2016bf8:	e0bfe80b 	ldhu	r2,-96(fp)
 2016bfc:	00007006 	br	2016dc0 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2016c00:	e13ffd0b 	ldhu	r4,-12(fp)
 2016c04:	e17ffe03 	ldbu	r5,-8(fp)
 2016c08:	e0bfff0b 	ldhu	r2,-4(fp)
 2016c0c:	e0fff704 	addi	r3,fp,-36
 2016c10:	d8800015 	stw	r2,0(sp)
 2016c14:	280f883a 	mov	r7,r5
 2016c18:	200d883a 	mov	r6,r4
 2016c1c:	180b883a 	mov	r5,r3
 2016c20:	e13ffc17 	ldw	r4,-16(fp)
 2016c24:	201728c0 	call	201728c <OS_FlagBlock>
 2016c28:	e0bfe517 	ldw	r2,-108(fp)
 2016c2c:	e0bfef15 	stw	r2,-68(fp)
 2016c30:	e0bfef17 	ldw	r2,-68(fp)
 2016c34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2016c38:	00000a06 	br	2016c64 <OSFlagPend+0x448>
 2016c3c:	e0bfe517 	ldw	r2,-108(fp)
 2016c40:	e0bff015 	stw	r2,-64(fp)
 2016c44:	e0bff017 	ldw	r2,-64(fp)
 2016c48:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2016c4c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2016c50:	e0800217 	ldw	r2,8(fp)
 2016c54:	00c01bc4 	movi	r3,111
 2016c58:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 2016c5c:	e0bfe80b 	ldhu	r2,-96(fp)
 2016c60:	00005706 	br	2016dc0 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2016c64:	20156ec0 	call	20156ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016c68:	0005303a 	rdctl	r2,status
 2016c6c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016c70:	e0fff117 	ldw	r3,-60(fp)
 2016c74:	00bfff84 	movi	r2,-2
 2016c78:	1884703a 	and	r2,r3,r2
 2016c7c:	1001703a 	wrctl	status,r2
  
  return context;
 2016c80:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 2016c84:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2016c88:	d0a74617 	ldw	r2,-25320(gp)
 2016c8c:	10800c43 	ldbu	r2,49(r2)
 2016c90:	10803fcc 	andi	r2,r2,255
 2016c94:	10001c26 	beq	r2,zero,2016d08 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2016c98:	d0a74617 	ldw	r2,-25320(gp)
 2016c9c:	10800c43 	ldbu	r2,49(r2)
 2016ca0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2016ca4:	d0a74617 	ldw	r2,-25320(gp)
 2016ca8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2016cac:	e0bff704 	addi	r2,fp,-36
 2016cb0:	1009883a 	mov	r4,r2
 2016cb4:	20175c00 	call	20175c0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2016cb8:	d0a74617 	ldw	r2,-25320(gp)
 2016cbc:	10000c05 	stb	zero,48(r2)
 2016cc0:	e0bfe517 	ldw	r2,-108(fp)
 2016cc4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016cc8:	e0bff217 	ldw	r2,-56(fp)
 2016ccc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2016cd0:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 2016cd4:	e0bff303 	ldbu	r2,-52(fp)
 2016cd8:	108000a0 	cmpeqi	r2,r2,2
 2016cdc:	10000426 	beq	r2,zero,2016cf0 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2016ce0:	e0800217 	ldw	r2,8(fp)
 2016ce4:	00c00384 	movi	r3,14
 2016ce8:	10c00005 	stb	r3,0(r2)
                 break;
 2016cec:	00000406 	br	2016d00 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2016cf0:	e0800217 	ldw	r2,8(fp)
 2016cf4:	00c00284 	movi	r3,10
 2016cf8:	10c00005 	stb	r3,0(r2)
                 break;
 2016cfc:	0001883a 	nop
        }
        return (flags_rdy);
 2016d00:	e0bfe80b 	ldhu	r2,-96(fp)
 2016d04:	00002e06 	br	2016dc0 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2016d08:	d0a74617 	ldw	r2,-25320(gp)
 2016d0c:	10800b0b 	ldhu	r2,44(r2)
 2016d10:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2016d14:	e0bfe403 	ldbu	r2,-112(fp)
 2016d18:	10800058 	cmpnei	r2,r2,1
 2016d1c:	1000211e 	bne	r2,zero,2016da4 <OSFlagPend+0x588>
        switch (wait_type) {
 2016d20:	e0bffe03 	ldbu	r2,-8(fp)
 2016d24:	10001616 	blt	r2,zero,2016d80 <OSFlagPend+0x564>
 2016d28:	10c00090 	cmplti	r3,r2,2
 2016d2c:	18000c1e 	bne	r3,zero,2016d60 <OSFlagPend+0x544>
 2016d30:	10800108 	cmpgei	r2,r2,4
 2016d34:	1000121e 	bne	r2,zero,2016d80 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2016d38:	e0bffc17 	ldw	r2,-16(fp)
 2016d3c:	1080020b 	ldhu	r2,8(r2)
 2016d40:	1007883a 	mov	r3,r2
 2016d44:	e0bfe80b 	ldhu	r2,-96(fp)
 2016d48:	0084303a 	nor	r2,zero,r2
 2016d4c:	1884703a 	and	r2,r3,r2
 2016d50:	1007883a 	mov	r3,r2
 2016d54:	e0bffc17 	ldw	r2,-16(fp)
 2016d58:	10c0020d 	sth	r3,8(r2)
                 break;
 2016d5c:	00001106 	br	2016da4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2016d60:	e0bffc17 	ldw	r2,-16(fp)
 2016d64:	10c0020b 	ldhu	r3,8(r2)
 2016d68:	e0bfe80b 	ldhu	r2,-96(fp)
 2016d6c:	1884b03a 	or	r2,r3,r2
 2016d70:	1007883a 	mov	r3,r2
 2016d74:	e0bffc17 	ldw	r2,-16(fp)
 2016d78:	10c0020d 	sth	r3,8(r2)
                 break;
 2016d7c:	00000906 	br	2016da4 <OSFlagPend+0x588>
 2016d80:	e0bfe517 	ldw	r2,-108(fp)
 2016d84:	e0bff415 	stw	r2,-48(fp)
 2016d88:	e0bff417 	ldw	r2,-48(fp)
 2016d8c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2016d90:	e0800217 	ldw	r2,8(fp)
 2016d94:	00c01bc4 	movi	r3,111
 2016d98:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2016d9c:	0005883a 	mov	r2,zero
 2016da0:	00000706 	br	2016dc0 <OSFlagPend+0x5a4>
 2016da4:	e0bfe517 	ldw	r2,-108(fp)
 2016da8:	e0bff515 	stw	r2,-44(fp)
 2016dac:	e0bff517 	ldw	r2,-44(fp)
 2016db0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2016db4:	e0800217 	ldw	r2,8(fp)
 2016db8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2016dbc:	e0bfe80b 	ldhu	r2,-96(fp)
}
 2016dc0:	e037883a 	mov	sp,fp
 2016dc4:	dfc00117 	ldw	ra,4(sp)
 2016dc8:	df000017 	ldw	fp,0(sp)
 2016dcc:	dec00204 	addi	sp,sp,8
 2016dd0:	f800283a 	ret

02016dd4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2016dd4:	defffb04 	addi	sp,sp,-20
 2016dd8:	df000415 	stw	fp,16(sp)
 2016ddc:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2016de0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016de4:	0005303a 	rdctl	r2,status
 2016de8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016dec:	e0fffe17 	ldw	r3,-8(fp)
 2016df0:	00bfff84 	movi	r2,-2
 2016df4:	1884703a 	and	r2,r3,r2
 2016df8:	1001703a 	wrctl	status,r2
  
  return context;
 2016dfc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2016e00:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2016e04:	d0a74617 	ldw	r2,-25320(gp)
 2016e08:	10800b0b 	ldhu	r2,44(r2)
 2016e0c:	e0bffd0d 	sth	r2,-12(fp)
 2016e10:	e0bffc17 	ldw	r2,-16(fp)
 2016e14:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016e18:	e0bfff17 	ldw	r2,-4(fp)
 2016e1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2016e20:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2016e24:	e037883a 	mov	sp,fp
 2016e28:	df000017 	ldw	fp,0(sp)
 2016e2c:	dec00104 	addi	sp,sp,4
 2016e30:	f800283a 	ret

02016e34 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 2016e34:	deffef04 	addi	sp,sp,-68
 2016e38:	dfc01015 	stw	ra,64(sp)
 2016e3c:	df000f15 	stw	fp,60(sp)
 2016e40:	df000f04 	addi	fp,sp,60
 2016e44:	e13ffc15 	stw	r4,-16(fp)
 2016e48:	2807883a 	mov	r3,r5
 2016e4c:	3005883a 	mov	r2,r6
 2016e50:	e1ffff15 	stw	r7,-4(fp)
 2016e54:	e0fffd0d 	sth	r3,-12(fp)
 2016e58:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 2016e5c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2016e60:	e0bfff17 	ldw	r2,-4(fp)
 2016e64:	1000021e 	bne	r2,zero,2016e70 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 2016e68:	0005883a 	mov	r2,zero
 2016e6c:	0000d106 	br	20171b4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2016e70:	e0bffc17 	ldw	r2,-16(fp)
 2016e74:	1000051e 	bne	r2,zero,2016e8c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016e78:	e0bfff17 	ldw	r2,-4(fp)
 2016e7c:	00c01b84 	movi	r3,110
 2016e80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016e84:	0005883a 	mov	r2,zero
 2016e88:	0000ca06 	br	20171b4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2016e8c:	e0bffc17 	ldw	r2,-16(fp)
 2016e90:	10800003 	ldbu	r2,0(r2)
 2016e94:	10803fcc 	andi	r2,r2,255
 2016e98:	10800160 	cmpeqi	r2,r2,5
 2016e9c:	1000051e 	bne	r2,zero,2016eb4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2016ea0:	e0bfff17 	ldw	r2,-4(fp)
 2016ea4:	00c00044 	movi	r3,1
 2016ea8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2016eac:	0005883a 	mov	r2,zero
 2016eb0:	0000c006 	br	20171b4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016eb4:	0005303a 	rdctl	r2,status
 2016eb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016ebc:	e0fffb17 	ldw	r3,-20(fp)
 2016ec0:	00bfff84 	movi	r2,-2
 2016ec4:	1884703a 	and	r2,r3,r2
 2016ec8:	1001703a 	wrctl	status,r2
  
  return context;
 2016ecc:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2016ed0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 2016ed4:	e0bffe03 	ldbu	r2,-8(fp)
 2016ed8:	10000326 	beq	r2,zero,2016ee8 <OSFlagPost+0xb4>
 2016edc:	10800060 	cmpeqi	r2,r2,1
 2016ee0:	10000b1e 	bne	r2,zero,2016f10 <OSFlagPost+0xdc>
 2016ee4:	00001206 	br	2016f30 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2016ee8:	e0bffc17 	ldw	r2,-16(fp)
 2016eec:	1080020b 	ldhu	r2,8(r2)
 2016ef0:	1007883a 	mov	r3,r2
 2016ef4:	e0bffd0b 	ldhu	r2,-12(fp)
 2016ef8:	0084303a 	nor	r2,zero,r2
 2016efc:	1884703a 	and	r2,r3,r2
 2016f00:	1007883a 	mov	r3,r2
 2016f04:	e0bffc17 	ldw	r2,-16(fp)
 2016f08:	10c0020d 	sth	r3,8(r2)
             break;
 2016f0c:	00001106 	br	2016f54 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2016f10:	e0bffc17 	ldw	r2,-16(fp)
 2016f14:	10c0020b 	ldhu	r3,8(r2)
 2016f18:	e0bffd0b 	ldhu	r2,-12(fp)
 2016f1c:	1884b03a 	or	r2,r3,r2
 2016f20:	1007883a 	mov	r3,r2
 2016f24:	e0bffc17 	ldw	r2,-16(fp)
 2016f28:	10c0020d 	sth	r3,8(r2)
             break;
 2016f2c:	00000906 	br	2016f54 <OSFlagPost+0x120>
 2016f30:	e0bff317 	ldw	r2,-52(fp)
 2016f34:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016f38:	e0bff417 	ldw	r2,-48(fp)
 2016f3c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2016f40:	e0bfff17 	ldw	r2,-4(fp)
 2016f44:	00c01c44 	movi	r3,113
 2016f48:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 2016f4c:	0005883a 	mov	r2,zero
 2016f50:	00009806 	br	20171b4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2016f54:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2016f58:	e0bffc17 	ldw	r2,-16(fp)
 2016f5c:	10800117 	ldw	r2,4(r2)
 2016f60:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2016f64:	00007706 	br	2017144 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 2016f68:	e0bff117 	ldw	r2,-60(fp)
 2016f6c:	10800483 	ldbu	r2,18(r2)
 2016f70:	10803fcc 	andi	r2,r2,255
 2016f74:	10c00060 	cmpeqi	r3,r2,1
 2016f78:	18004a1e 	bne	r3,zero,20170a4 <OSFlagPost+0x270>
 2016f7c:	10c00088 	cmpgei	r3,r2,2
 2016f80:	1800021e 	bne	r3,zero,2016f8c <OSFlagPost+0x158>
 2016f84:	10002f26 	beq	r2,zero,2017044 <OSFlagPost+0x210>
 2016f88:	00005b06 	br	20170f8 <OSFlagPost+0x2c4>
 2016f8c:	10c000a0 	cmpeqi	r3,r2,2
 2016f90:	1800031e 	bne	r3,zero,2016fa0 <OSFlagPost+0x16c>
 2016f94:	108000e0 	cmpeqi	r2,r2,3
 2016f98:	1000171e 	bne	r2,zero,2016ff8 <OSFlagPost+0x1c4>
 2016f9c:	00005606 	br	20170f8 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2016fa0:	e0bffc17 	ldw	r2,-16(fp)
 2016fa4:	10c0020b 	ldhu	r3,8(r2)
 2016fa8:	e0bff117 	ldw	r2,-60(fp)
 2016fac:	1080040b 	ldhu	r2,16(r2)
 2016fb0:	1884703a 	and	r2,r3,r2
 2016fb4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2016fb8:	e0bff117 	ldw	r2,-60(fp)
 2016fbc:	1080040b 	ldhu	r2,16(r2)
 2016fc0:	10ffffcc 	andi	r3,r2,65535
 2016fc4:	e0bff60b 	ldhu	r2,-40(fp)
 2016fc8:	1880541e 	bne	r3,r2,201711c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2016fcc:	e0bff60b 	ldhu	r2,-40(fp)
 2016fd0:	100b883a 	mov	r5,r2
 2016fd4:	e13ff117 	ldw	r4,-60(fp)
 2016fd8:	20174cc0 	call	20174cc <OS_FlagTaskRdy>
 2016fdc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2016fe0:	e0bff683 	ldbu	r2,-38(fp)
 2016fe4:	10800058 	cmpnei	r2,r2,1
 2016fe8:	10004c1e 	bne	r2,zero,201711c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2016fec:	00800044 	movi	r2,1
 2016ff0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2016ff4:	00004906 	br	201711c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2016ff8:	e0bffc17 	ldw	r2,-16(fp)
 2016ffc:	10c0020b 	ldhu	r3,8(r2)
 2017000:	e0bff117 	ldw	r2,-60(fp)
 2017004:	1080040b 	ldhu	r2,16(r2)
 2017008:	1884703a 	and	r2,r3,r2
 201700c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2017010:	e0bff60b 	ldhu	r2,-40(fp)
 2017014:	10004326 	beq	r2,zero,2017124 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2017018:	e0bff60b 	ldhu	r2,-40(fp)
 201701c:	100b883a 	mov	r5,r2
 2017020:	e13ff117 	ldw	r4,-60(fp)
 2017024:	20174cc0 	call	20174cc <OS_FlagTaskRdy>
 2017028:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201702c:	e0bff683 	ldbu	r2,-38(fp)
 2017030:	10800058 	cmpnei	r2,r2,1
 2017034:	10003b1e 	bne	r2,zero,2017124 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2017038:	00800044 	movi	r2,1
 201703c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2017040:	00003806 	br	2017124 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2017044:	e0bffc17 	ldw	r2,-16(fp)
 2017048:	1080020b 	ldhu	r2,8(r2)
 201704c:	0084303a 	nor	r2,zero,r2
 2017050:	1007883a 	mov	r3,r2
 2017054:	e0bff117 	ldw	r2,-60(fp)
 2017058:	1080040b 	ldhu	r2,16(r2)
 201705c:	1884703a 	and	r2,r3,r2
 2017060:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2017064:	e0bff117 	ldw	r2,-60(fp)
 2017068:	1080040b 	ldhu	r2,16(r2)
 201706c:	10ffffcc 	andi	r3,r2,65535
 2017070:	e0bff60b 	ldhu	r2,-40(fp)
 2017074:	18802d1e 	bne	r3,r2,201712c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2017078:	e0bff60b 	ldhu	r2,-40(fp)
 201707c:	100b883a 	mov	r5,r2
 2017080:	e13ff117 	ldw	r4,-60(fp)
 2017084:	20174cc0 	call	20174cc <OS_FlagTaskRdy>
 2017088:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 201708c:	e0bff683 	ldbu	r2,-38(fp)
 2017090:	10800058 	cmpnei	r2,r2,1
 2017094:	1000251e 	bne	r2,zero,201712c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2017098:	00800044 	movi	r2,1
 201709c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 20170a0:	00002206 	br	201712c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20170a4:	e0bffc17 	ldw	r2,-16(fp)
 20170a8:	1080020b 	ldhu	r2,8(r2)
 20170ac:	0084303a 	nor	r2,zero,r2
 20170b0:	1007883a 	mov	r3,r2
 20170b4:	e0bff117 	ldw	r2,-60(fp)
 20170b8:	1080040b 	ldhu	r2,16(r2)
 20170bc:	1884703a 	and	r2,r3,r2
 20170c0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 20170c4:	e0bff60b 	ldhu	r2,-40(fp)
 20170c8:	10001a26 	beq	r2,zero,2017134 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 20170cc:	e0bff60b 	ldhu	r2,-40(fp)
 20170d0:	100b883a 	mov	r5,r2
 20170d4:	e13ff117 	ldw	r4,-60(fp)
 20170d8:	20174cc0 	call	20174cc <OS_FlagTaskRdy>
 20170dc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 20170e0:	e0bff683 	ldbu	r2,-38(fp)
 20170e4:	10800058 	cmpnei	r2,r2,1
 20170e8:	1000121e 	bne	r2,zero,2017134 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20170ec:	00800044 	movi	r2,1
 20170f0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 20170f4:	00000f06 	br	2017134 <OSFlagPost+0x300>
 20170f8:	e0bff317 	ldw	r2,-52(fp)
 20170fc:	e0bff515 	stw	r2,-44(fp)
 2017100:	e0bff517 	ldw	r2,-44(fp)
 2017104:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2017108:	e0bfff17 	ldw	r2,-4(fp)
 201710c:	00c01bc4 	movi	r3,111
 2017110:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2017114:	0005883a 	mov	r2,zero
 2017118:	00002606 	br	20171b4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201711c:	0001883a 	nop
 2017120:	00000506 	br	2017138 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2017124:	0001883a 	nop
 2017128:	00000306 	br	2017138 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 201712c:	0001883a 	nop
 2017130:	00000106 	br	2017138 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2017134:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 2017138:	e0bff117 	ldw	r2,-60(fp)
 201713c:	10800017 	ldw	r2,0(r2)
 2017140:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2017144:	e0bff117 	ldw	r2,-60(fp)
 2017148:	103f871e 	bne	r2,zero,2016f68 <OSFlagPost+0x134>
 201714c:	e0bff317 	ldw	r2,-52(fp)
 2017150:	e0bff715 	stw	r2,-36(fp)
 2017154:	e0bff717 	ldw	r2,-36(fp)
 2017158:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 201715c:	e0bff203 	ldbu	r2,-56(fp)
 2017160:	10800058 	cmpnei	r2,r2,1
 2017164:	1000011e 	bne	r2,zero,201716c <OSFlagPost+0x338>
        OS_Sched();
 2017168:	20156ec0 	call	20156ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201716c:	0005303a 	rdctl	r2,status
 2017170:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017174:	e0fffa17 	ldw	r3,-24(fp)
 2017178:	00bfff84 	movi	r2,-2
 201717c:	1884703a 	and	r2,r3,r2
 2017180:	1001703a 	wrctl	status,r2
  
  return context;
 2017184:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2017188:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 201718c:	e0bffc17 	ldw	r2,-16(fp)
 2017190:	1080020b 	ldhu	r2,8(r2)
 2017194:	e0bff90d 	sth	r2,-28(fp)
 2017198:	e0bff317 	ldw	r2,-52(fp)
 201719c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20171a0:	e0bff817 	ldw	r2,-32(fp)
 20171a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 20171a8:	e0bfff17 	ldw	r2,-4(fp)
 20171ac:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 20171b0:	e0bff90b 	ldhu	r2,-28(fp)
}
 20171b4:	e037883a 	mov	sp,fp
 20171b8:	dfc00117 	ldw	ra,4(sp)
 20171bc:	df000017 	ldw	fp,0(sp)
 20171c0:	dec00204 	addi	sp,sp,8
 20171c4:	f800283a 	ret

020171c8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 20171c8:	defff904 	addi	sp,sp,-28
 20171cc:	df000615 	stw	fp,24(sp)
 20171d0:	df000604 	addi	fp,sp,24
 20171d4:	e13ffe15 	stw	r4,-8(fp)
 20171d8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 20171dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 20171e0:	e0bfff17 	ldw	r2,-4(fp)
 20171e4:	1000021e 	bne	r2,zero,20171f0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 20171e8:	0005883a 	mov	r2,zero
 20171ec:	00002306 	br	201727c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 20171f0:	e0bffe17 	ldw	r2,-8(fp)
 20171f4:	1000051e 	bne	r2,zero,201720c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20171f8:	e0bfff17 	ldw	r2,-4(fp)
 20171fc:	00c01b84 	movi	r3,110
 2017200:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2017204:	0005883a 	mov	r2,zero
 2017208:	00001c06 	br	201727c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 201720c:	e0bffe17 	ldw	r2,-8(fp)
 2017210:	10800003 	ldbu	r2,0(r2)
 2017214:	10803fcc 	andi	r2,r2,255
 2017218:	10800160 	cmpeqi	r2,r2,5
 201721c:	1000051e 	bne	r2,zero,2017234 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2017220:	e0bfff17 	ldw	r2,-4(fp)
 2017224:	00c00044 	movi	r3,1
 2017228:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 201722c:	0005883a 	mov	r2,zero
 2017230:	00001206 	br	201727c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017234:	0005303a 	rdctl	r2,status
 2017238:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201723c:	e0fffc17 	ldw	r3,-16(fp)
 2017240:	00bfff84 	movi	r2,-2
 2017244:	1884703a 	and	r2,r3,r2
 2017248:	1001703a 	wrctl	status,r2
  
  return context;
 201724c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017250:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 2017254:	e0bffe17 	ldw	r2,-8(fp)
 2017258:	1080020b 	ldhu	r2,8(r2)
 201725c:	e0bffb0d 	sth	r2,-20(fp)
 2017260:	e0bffa17 	ldw	r2,-24(fp)
 2017264:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017268:	e0bffd17 	ldw	r2,-12(fp)
 201726c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017270:	e0bfff17 	ldw	r2,-4(fp)
 2017274:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 2017278:	e0bffb0b 	ldhu	r2,-20(fp)
}
 201727c:	e037883a 	mov	sp,fp
 2017280:	df000017 	ldw	fp,0(sp)
 2017284:	dec00104 	addi	sp,sp,4
 2017288:	f800283a 	ret

0201728c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 201728c:	defff804 	addi	sp,sp,-32
 2017290:	df000715 	stw	fp,28(sp)
 2017294:	df000704 	addi	fp,sp,28
 2017298:	e13ffb15 	stw	r4,-20(fp)
 201729c:	e17ffc15 	stw	r5,-16(fp)
 20172a0:	3009883a 	mov	r4,r6
 20172a4:	3807883a 	mov	r3,r7
 20172a8:	e0800117 	ldw	r2,4(fp)
 20172ac:	e13ffd0d 	sth	r4,-12(fp)
 20172b0:	e0fffe05 	stb	r3,-8(fp)
 20172b4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 20172b8:	d0a74617 	ldw	r2,-25320(gp)
 20172bc:	d0e74617 	ldw	r3,-25320(gp)
 20172c0:	18c00c03 	ldbu	r3,48(r3)
 20172c4:	18c00814 	ori	r3,r3,32
 20172c8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 20172cc:	d0a74617 	ldw	r2,-25320(gp)
 20172d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 20172d4:	d0a74617 	ldw	r2,-25320(gp)
 20172d8:	e0ffff0b 	ldhu	r3,-4(fp)
 20172dc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 20172e0:	d0a74617 	ldw	r2,-25320(gp)
 20172e4:	e0fffc17 	ldw	r3,-16(fp)
 20172e8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 20172ec:	e0bffc17 	ldw	r2,-16(fp)
 20172f0:	e0fffd0b 	ldhu	r3,-12(fp)
 20172f4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 20172f8:	e0bffc17 	ldw	r2,-16(fp)
 20172fc:	e0fffe03 	ldbu	r3,-8(fp)
 2017300:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 2017304:	d0e74617 	ldw	r3,-25320(gp)
 2017308:	e0bffc17 	ldw	r2,-16(fp)
 201730c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2017310:	e0bffb17 	ldw	r2,-20(fp)
 2017314:	10c00117 	ldw	r3,4(r2)
 2017318:	e0bffc17 	ldw	r2,-16(fp)
 201731c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2017320:	e0bffc17 	ldw	r2,-16(fp)
 2017324:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 2017328:	e0bffc17 	ldw	r2,-16(fp)
 201732c:	e0fffb17 	ldw	r3,-20(fp)
 2017330:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2017334:	e0bffb17 	ldw	r2,-20(fp)
 2017338:	10800117 	ldw	r2,4(r2)
 201733c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 2017340:	e0bff917 	ldw	r2,-28(fp)
 2017344:	10000326 	beq	r2,zero,2017354 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 2017348:	e0bff917 	ldw	r2,-28(fp)
 201734c:	e0fffc17 	ldw	r3,-16(fp)
 2017350:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 2017354:	e0bffb17 	ldw	r2,-20(fp)
 2017358:	e0fffc17 	ldw	r3,-16(fp)
 201735c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 2017360:	d0a74617 	ldw	r2,-25320(gp)
 2017364:	10800d03 	ldbu	r2,52(r2)
 2017368:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201736c:	e0fffa03 	ldbu	r3,-24(fp)
 2017370:	e13ffa03 	ldbu	r4,-24(fp)
 2017374:	d0a74344 	addi	r2,gp,-25331
 2017378:	2085883a 	add	r2,r4,r2
 201737c:	10800003 	ldbu	r2,0(r2)
 2017380:	1009883a 	mov	r4,r2
 2017384:	d0a74617 	ldw	r2,-25320(gp)
 2017388:	10800d43 	ldbu	r2,53(r2)
 201738c:	0084303a 	nor	r2,zero,r2
 2017390:	2084703a 	and	r2,r4,r2
 2017394:	1009883a 	mov	r4,r2
 2017398:	d0a74344 	addi	r2,gp,-25331
 201739c:	1885883a 	add	r2,r3,r2
 20173a0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 20173a4:	e0fffa03 	ldbu	r3,-24(fp)
 20173a8:	d0a74344 	addi	r2,gp,-25331
 20173ac:	1885883a 	add	r2,r3,r2
 20173b0:	10800003 	ldbu	r2,0(r2)
 20173b4:	10803fcc 	andi	r2,r2,255
 20173b8:	1000071e 	bne	r2,zero,20173d8 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 20173bc:	d0a74617 	ldw	r2,-25320(gp)
 20173c0:	10800d83 	ldbu	r2,54(r2)
 20173c4:	0084303a 	nor	r2,zero,r2
 20173c8:	1007883a 	mov	r3,r2
 20173cc:	d0a74303 	ldbu	r2,-25332(gp)
 20173d0:	1884703a 	and	r2,r3,r2
 20173d4:	d0a74305 	stb	r2,-25332(gp)
    }
}
 20173d8:	0001883a 	nop
 20173dc:	e037883a 	mov	sp,fp
 20173e0:	df000017 	ldw	fp,0(sp)
 20173e4:	dec00104 	addi	sp,sp,4
 20173e8:	f800283a 	ret

020173ec <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 20173ec:	defffb04 	addi	sp,sp,-20
 20173f0:	dfc00415 	stw	ra,16(sp)
 20173f4:	df000315 	stw	fp,12(sp)
 20173f8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 20173fc:	0140dc04 	movi	r5,880
 2017400:	010080f4 	movhi	r4,515
 2017404:	21297604 	addi	r4,r4,-23080
 2017408:	20156300 	call	2015630 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 201740c:	008080f4 	movhi	r2,515
 2017410:	10a97604 	addi	r2,r2,-23080
 2017414:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 2017418:	008080f4 	movhi	r2,515
 201741c:	10a98104 	addi	r2,r2,-23036
 2017420:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2017424:	e03ffd0d 	sth	zero,-12(fp)
 2017428:	00001306 	br	2017478 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201742c:	e0bffe17 	ldw	r2,-8(fp)
 2017430:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 2017434:	e0bffe17 	ldw	r2,-8(fp)
 2017438:	e0ffff17 	ldw	r3,-4(fp)
 201743c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 2017440:	e0bffe17 	ldw	r2,-8(fp)
 2017444:	00c00fc4 	movi	r3,63
 2017448:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201744c:	e0bffe17 	ldw	r2,-8(fp)
 2017450:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 2017454:	e0bffe17 	ldw	r2,-8(fp)
 2017458:	10800b04 	addi	r2,r2,44
 201745c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2017460:	e0bfff17 	ldw	r2,-4(fp)
 2017464:	10800b04 	addi	r2,r2,44
 2017468:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 201746c:	e0bffd0b 	ldhu	r2,-12(fp)
 2017470:	10800044 	addi	r2,r2,1
 2017474:	e0bffd0d 	sth	r2,-12(fp)
 2017478:	e0bffd0b 	ldhu	r2,-12(fp)
 201747c:	108004f0 	cmpltui	r2,r2,19
 2017480:	103fea1e 	bne	r2,zero,201742c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2017484:	e0bffe17 	ldw	r2,-8(fp)
 2017488:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 201748c:	e0bffe17 	ldw	r2,-8(fp)
 2017490:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2017494:	e0bffe17 	ldw	r2,-8(fp)
 2017498:	00c00fc4 	movi	r3,63
 201749c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 20174a0:	e0bffe17 	ldw	r2,-8(fp)
 20174a4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 20174a8:	008080f4 	movhi	r2,515
 20174ac:	10a97604 	addi	r2,r2,-23080
 20174b0:	d0a74815 	stw	r2,-25312(gp)
#endif
}
 20174b4:	0001883a 	nop
 20174b8:	e037883a 	mov	sp,fp
 20174bc:	dfc00117 	ldw	ra,4(sp)
 20174c0:	df000017 	ldw	fp,0(sp)
 20174c4:	dec00204 	addi	sp,sp,8
 20174c8:	f800283a 	ret

020174cc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 20174cc:	defffa04 	addi	sp,sp,-24
 20174d0:	dfc00515 	stw	ra,20(sp)
 20174d4:	df000415 	stw	fp,16(sp)
 20174d8:	df000404 	addi	fp,sp,16
 20174dc:	e13ffe15 	stw	r4,-8(fp)
 20174e0:	2805883a 	mov	r2,r5
 20174e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 20174e8:	e0bffe17 	ldw	r2,-8(fp)
 20174ec:	10800217 	ldw	r2,8(r2)
 20174f0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 20174f4:	e0bffd17 	ldw	r2,-12(fp)
 20174f8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 20174fc:	e0bffd17 	ldw	r2,-12(fp)
 2017500:	e0ffff0b 	ldhu	r3,-4(fp)
 2017504:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 2017508:	e0bffd17 	ldw	r2,-12(fp)
 201750c:	10c00c03 	ldbu	r3,48(r2)
 2017510:	00bff7c4 	movi	r2,-33
 2017514:	1884703a 	and	r2,r3,r2
 2017518:	1007883a 	mov	r3,r2
 201751c:	e0bffd17 	ldw	r2,-12(fp)
 2017520:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 2017524:	e0bffd17 	ldw	r2,-12(fp)
 2017528:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 201752c:	e0bffd17 	ldw	r2,-12(fp)
 2017530:	10800c03 	ldbu	r2,48(r2)
 2017534:	10803fcc 	andi	r2,r2,255
 2017538:	1000181e 	bne	r2,zero,201759c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 201753c:	e0bffd17 	ldw	r2,-12(fp)
 2017540:	10c00d83 	ldbu	r3,54(r2)
 2017544:	d0a74303 	ldbu	r2,-25332(gp)
 2017548:	1884b03a 	or	r2,r3,r2
 201754c:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2017550:	e0bffd17 	ldw	r2,-12(fp)
 2017554:	10800d03 	ldbu	r2,52(r2)
 2017558:	10c03fcc 	andi	r3,r2,255
 201755c:	e0bffd17 	ldw	r2,-12(fp)
 2017560:	10800d03 	ldbu	r2,52(r2)
 2017564:	11003fcc 	andi	r4,r2,255
 2017568:	d0a74344 	addi	r2,gp,-25331
 201756c:	2085883a 	add	r2,r4,r2
 2017570:	11000003 	ldbu	r4,0(r2)
 2017574:	e0bffd17 	ldw	r2,-12(fp)
 2017578:	10800d43 	ldbu	r2,53(r2)
 201757c:	2084b03a 	or	r2,r4,r2
 2017580:	1009883a 	mov	r4,r2
 2017584:	d0a74344 	addi	r2,gp,-25331
 2017588:	1885883a 	add	r2,r3,r2
 201758c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 2017590:	00800044 	movi	r2,1
 2017594:	e0bffc05 	stb	r2,-16(fp)
 2017598:	00000106 	br	20175a0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 201759c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 20175a0:	e13ffe17 	ldw	r4,-8(fp)
 20175a4:	20175c00 	call	20175c0 <OS_FlagUnlink>
    return (sched);
 20175a8:	e0bffc03 	ldbu	r2,-16(fp)
}
 20175ac:	e037883a 	mov	sp,fp
 20175b0:	dfc00117 	ldw	ra,4(sp)
 20175b4:	df000017 	ldw	fp,0(sp)
 20175b8:	dec00204 	addi	sp,sp,8
 20175bc:	f800283a 	ret

020175c0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 20175c0:	defffa04 	addi	sp,sp,-24
 20175c4:	df000515 	stw	fp,20(sp)
 20175c8:	df000504 	addi	fp,sp,20
 20175cc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 20175d0:	e0bfff17 	ldw	r2,-4(fp)
 20175d4:	10800117 	ldw	r2,4(r2)
 20175d8:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 20175dc:	e0bfff17 	ldw	r2,-4(fp)
 20175e0:	10800017 	ldw	r2,0(r2)
 20175e4:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 20175e8:	e0bffb17 	ldw	r2,-20(fp)
 20175ec:	10000b1e 	bne	r2,zero,201761c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 20175f0:	e0bfff17 	ldw	r2,-4(fp)
 20175f4:	10800317 	ldw	r2,12(r2)
 20175f8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 20175fc:	e0bffd17 	ldw	r2,-12(fp)
 2017600:	e0fffc17 	ldw	r3,-16(fp)
 2017604:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 2017608:	e0bffc17 	ldw	r2,-16(fp)
 201760c:	10000b26 	beq	r2,zero,201763c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 2017610:	e0bffc17 	ldw	r2,-16(fp)
 2017614:	10000115 	stw	zero,4(r2)
 2017618:	00000806 	br	201763c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 201761c:	e0bffb17 	ldw	r2,-20(fp)
 2017620:	e0fffc17 	ldw	r3,-16(fp)
 2017624:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 2017628:	e0bffc17 	ldw	r2,-16(fp)
 201762c:	10000326 	beq	r2,zero,201763c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 2017630:	e0bffc17 	ldw	r2,-16(fp)
 2017634:	e0fffb17 	ldw	r3,-20(fp)
 2017638:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 201763c:	e0bfff17 	ldw	r2,-4(fp)
 2017640:	10800217 	ldw	r2,8(r2)
 2017644:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 2017648:	e0bffe17 	ldw	r2,-8(fp)
 201764c:	10000a15 	stw	zero,40(r2)
#endif
}
 2017650:	0001883a 	nop
 2017654:	e037883a 	mov	sp,fp
 2017658:	df000017 	ldw	fp,0(sp)
 201765c:	dec00104 	addi	sp,sp,4
 2017660:	f800283a 	ret

02017664 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 2017664:	defffa04 	addi	sp,sp,-24
 2017668:	df000515 	stw	fp,20(sp)
 201766c:	df000504 	addi	fp,sp,20
 2017670:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 2017674:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 2017678:	e0bfff17 	ldw	r2,-4(fp)
 201767c:	1000021e 	bne	r2,zero,2017688 <OSMboxAccept+0x24>
        return ((void *)0);
 2017680:	0005883a 	mov	r2,zero
 2017684:	00001906 	br	20176ec <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 2017688:	e0bfff17 	ldw	r2,-4(fp)
 201768c:	10800003 	ldbu	r2,0(r2)
 2017690:	10803fcc 	andi	r2,r2,255
 2017694:	10800060 	cmpeqi	r2,r2,1
 2017698:	1000021e 	bne	r2,zero,20176a4 <OSMboxAccept+0x40>
        return ((void *)0);
 201769c:	0005883a 	mov	r2,zero
 20176a0:	00001206 	br	20176ec <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20176a4:	0005303a 	rdctl	r2,status
 20176a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20176ac:	e0fffd17 	ldw	r3,-12(fp)
 20176b0:	00bfff84 	movi	r2,-2
 20176b4:	1884703a 	and	r2,r3,r2
 20176b8:	1001703a 	wrctl	status,r2
  
  return context;
 20176bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20176c0:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 20176c4:	e0bfff17 	ldw	r2,-4(fp)
 20176c8:	10800117 	ldw	r2,4(r2)
 20176cc:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 20176d0:	e0bfff17 	ldw	r2,-4(fp)
 20176d4:	10000115 	stw	zero,4(r2)
 20176d8:	e0bffb17 	ldw	r2,-20(fp)
 20176dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20176e0:	e0bffe17 	ldw	r2,-8(fp)
 20176e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 20176e8:	e0bffc17 	ldw	r2,-16(fp)
}
 20176ec:	e037883a 	mov	sp,fp
 20176f0:	df000017 	ldw	fp,0(sp)
 20176f4:	dec00104 	addi	sp,sp,4
 20176f8:	f800283a 	ret

020176fc <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 20176fc:	defff904 	addi	sp,sp,-28
 2017700:	dfc00615 	stw	ra,24(sp)
 2017704:	df000515 	stw	fp,20(sp)
 2017708:	df000504 	addi	fp,sp,20
 201770c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017710:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2017714:	d0a74503 	ldbu	r2,-25324(gp)
 2017718:	10803fcc 	andi	r2,r2,255
 201771c:	10000226 	beq	r2,zero,2017728 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2017720:	0005883a 	mov	r2,zero
 2017724:	00002506 	br	20177bc <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017728:	0005303a 	rdctl	r2,status
 201772c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017730:	e0fffe17 	ldw	r3,-8(fp)
 2017734:	00bfff84 	movi	r2,-2
 2017738:	1884703a 	and	r2,r3,r2
 201773c:	1001703a 	wrctl	status,r2
  
  return context;
 2017740:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2017744:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2017748:	d0a74417 	ldw	r2,-25328(gp)
 201774c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2017750:	d0a74417 	ldw	r2,-25328(gp)
 2017754:	10000326 	beq	r2,zero,2017764 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2017758:	d0a74417 	ldw	r2,-25328(gp)
 201775c:	10800117 	ldw	r2,4(r2)
 2017760:	d0a74415 	stw	r2,-25328(gp)
 2017764:	e0bffb17 	ldw	r2,-20(fp)
 2017768:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201776c:	e0bffc17 	ldw	r2,-16(fp)
 2017770:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 2017774:	e0bffd17 	ldw	r2,-12(fp)
 2017778:	10000f26 	beq	r2,zero,20177b8 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 201777c:	e0bffd17 	ldw	r2,-12(fp)
 2017780:	00c00044 	movi	r3,1
 2017784:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 2017788:	e0bffd17 	ldw	r2,-12(fp)
 201778c:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 2017790:	e0bffd17 	ldw	r2,-12(fp)
 2017794:	e0ffff17 	ldw	r3,-4(fp)
 2017798:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 201779c:	e0bffd17 	ldw	r2,-12(fp)
 20177a0:	00c00fc4 	movi	r3,63
 20177a4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 20177a8:	e0bffd17 	ldw	r2,-12(fp)
 20177ac:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 20177b0:	e13ffd17 	ldw	r4,-12(fp)
 20177b4:	20152500 	call	2015250 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 20177b8:	e0bffd17 	ldw	r2,-12(fp)
}
 20177bc:	e037883a 	mov	sp,fp
 20177c0:	dfc00117 	ldw	ra,4(sp)
 20177c4:	df000017 	ldw	fp,0(sp)
 20177c8:	dec00204 	addi	sp,sp,8
 20177cc:	f800283a 	ret

020177d0 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20177d0:	defff304 	addi	sp,sp,-52
 20177d4:	dfc00c15 	stw	ra,48(sp)
 20177d8:	df000b15 	stw	fp,44(sp)
 20177dc:	df000b04 	addi	fp,sp,44
 20177e0:	e13ffd15 	stw	r4,-12(fp)
 20177e4:	2805883a 	mov	r2,r5
 20177e8:	e1bfff15 	stw	r6,-4(fp)
 20177ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20177f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20177f4:	e0bfff17 	ldw	r2,-4(fp)
 20177f8:	1000021e 	bne	r2,zero,2017804 <OSMboxDel+0x34>
        return (pevent);
 20177fc:	e0bffd17 	ldw	r2,-12(fp)
 2017800:	00007e06 	br	20179fc <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2017804:	e0bffd17 	ldw	r2,-12(fp)
 2017808:	1000051e 	bne	r2,zero,2017820 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201780c:	e0bfff17 	ldw	r2,-4(fp)
 2017810:	00c00104 	movi	r3,4
 2017814:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2017818:	e0bffd17 	ldw	r2,-12(fp)
 201781c:	00007706 	br	20179fc <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2017820:	e0bffd17 	ldw	r2,-12(fp)
 2017824:	10800003 	ldbu	r2,0(r2)
 2017828:	10803fcc 	andi	r2,r2,255
 201782c:	10800060 	cmpeqi	r2,r2,1
 2017830:	1000051e 	bne	r2,zero,2017848 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2017834:	e0bfff17 	ldw	r2,-4(fp)
 2017838:	00c00044 	movi	r3,1
 201783c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2017840:	e0bffd17 	ldw	r2,-12(fp)
 2017844:	00006d06 	br	20179fc <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2017848:	d0a74503 	ldbu	r2,-25324(gp)
 201784c:	10803fcc 	andi	r2,r2,255
 2017850:	10000526 	beq	r2,zero,2017868 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2017854:	e0bfff17 	ldw	r2,-4(fp)
 2017858:	00c003c4 	movi	r3,15
 201785c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2017860:	e0bffd17 	ldw	r2,-12(fp)
 2017864:	00006506 	br	20179fc <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017868:	0005303a 	rdctl	r2,status
 201786c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017870:	e0fffc17 	ldw	r3,-16(fp)
 2017874:	00bfff84 	movi	r2,-2
 2017878:	1884703a 	and	r2,r3,r2
 201787c:	1001703a 	wrctl	status,r2
  
  return context;
 2017880:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017884:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 2017888:	e0bffd17 	ldw	r2,-12(fp)
 201788c:	10800283 	ldbu	r2,10(r2)
 2017890:	10803fcc 	andi	r2,r2,255
 2017894:	10000326 	beq	r2,zero,20178a4 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2017898:	00800044 	movi	r2,1
 201789c:	e0bff505 	stb	r2,-44(fp)
 20178a0:	00000106 	br	20178a8 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20178a4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 20178a8:	e0bffe03 	ldbu	r2,-8(fp)
 20178ac:	10000326 	beq	r2,zero,20178bc <OSMboxDel+0xec>
 20178b0:	10800060 	cmpeqi	r2,r2,1
 20178b4:	1000281e 	bne	r2,zero,2017958 <OSMboxDel+0x188>
 20178b8:	00004506 	br	20179d0 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 20178bc:	e0bff503 	ldbu	r2,-44(fp)
 20178c0:	1000161e 	bne	r2,zero,201791c <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 20178c4:	e0bffd17 	ldw	r2,-12(fp)
 20178c8:	00c00fc4 	movi	r3,63
 20178cc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 20178d0:	e0bffd17 	ldw	r2,-12(fp)
 20178d4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 20178d8:	e0bffd17 	ldw	r2,-12(fp)
 20178dc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 20178e0:	d0e74417 	ldw	r3,-25328(gp)
 20178e4:	e0bffd17 	ldw	r2,-12(fp)
 20178e8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 20178ec:	e0bffd17 	ldw	r2,-12(fp)
 20178f0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 20178f4:	e0bffd17 	ldw	r2,-12(fp)
 20178f8:	d0a74415 	stw	r2,-25328(gp)
 20178fc:	e0bff717 	ldw	r2,-36(fp)
 2017900:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017904:	e0bff817 	ldw	r2,-32(fp)
 2017908:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 201790c:	e0bfff17 	ldw	r2,-4(fp)
 2017910:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 2017914:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 2017918:	00003706 	br	20179f8 <OSMboxDel+0x228>
 201791c:	e0bff717 	ldw	r2,-36(fp)
 2017920:	e0bff915 	stw	r2,-28(fp)
 2017924:	e0bff917 	ldw	r2,-28(fp)
 2017928:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 201792c:	e0bfff17 	ldw	r2,-4(fp)
 2017930:	00c01244 	movi	r3,73
 2017934:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 2017938:	e0bffd17 	ldw	r2,-12(fp)
 201793c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2017940:	00002d06 	br	20179f8 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017944:	000f883a 	mov	r7,zero
 2017948:	01800084 	movi	r6,2
 201794c:	000b883a 	mov	r5,zero
 2017950:	e13ffd17 	ldw	r4,-12(fp)
 2017954:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 2017958:	e0bffd17 	ldw	r2,-12(fp)
 201795c:	10800283 	ldbu	r2,10(r2)
 2017960:	10803fcc 	andi	r2,r2,255
 2017964:	103ff71e 	bne	r2,zero,2017944 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2017968:	e0bffd17 	ldw	r2,-12(fp)
 201796c:	00c00fc4 	movi	r3,63
 2017970:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2017974:	e0bffd17 	ldw	r2,-12(fp)
 2017978:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201797c:	e0bffd17 	ldw	r2,-12(fp)
 2017980:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2017984:	d0e74417 	ldw	r3,-25328(gp)
 2017988:	e0bffd17 	ldw	r2,-12(fp)
 201798c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2017990:	e0bffd17 	ldw	r2,-12(fp)
 2017994:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2017998:	e0bffd17 	ldw	r2,-12(fp)
 201799c:	d0a74415 	stw	r2,-25328(gp)
 20179a0:	e0bff717 	ldw	r2,-36(fp)
 20179a4:	e0bffa15 	stw	r2,-24(fp)
 20179a8:	e0bffa17 	ldw	r2,-24(fp)
 20179ac:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 20179b0:	e0bff503 	ldbu	r2,-44(fp)
 20179b4:	10800058 	cmpnei	r2,r2,1
 20179b8:	1000011e 	bne	r2,zero,20179c0 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20179bc:	20156ec0 	call	20156ec <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 20179c0:	e0bfff17 	ldw	r2,-4(fp)
 20179c4:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 20179c8:	e03ff615 	stw	zero,-40(fp)
             break;
 20179cc:	00000a06 	br	20179f8 <OSMboxDel+0x228>
 20179d0:	e0bff717 	ldw	r2,-36(fp)
 20179d4:	e0bffb15 	stw	r2,-20(fp)
 20179d8:	e0bffb17 	ldw	r2,-20(fp)
 20179dc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 20179e0:	e0bfff17 	ldw	r2,-4(fp)
 20179e4:	00c001c4 	movi	r3,7
 20179e8:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 20179ec:	e0bffd17 	ldw	r2,-12(fp)
 20179f0:	e0bff615 	stw	r2,-40(fp)
             break;
 20179f4:	0001883a 	nop
    }
    return (pevent_return);
 20179f8:	e0bff617 	ldw	r2,-40(fp)
}
 20179fc:	e037883a 	mov	sp,fp
 2017a00:	dfc00117 	ldw	ra,4(sp)
 2017a04:	df000017 	ldw	fp,0(sp)
 2017a08:	dec00204 	addi	sp,sp,8
 2017a0c:	f800283a 	ret

02017a10 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2017a10:	defff404 	addi	sp,sp,-48
 2017a14:	dfc00b15 	stw	ra,44(sp)
 2017a18:	df000a15 	stw	fp,40(sp)
 2017a1c:	df000a04 	addi	fp,sp,40
 2017a20:	e13ffd15 	stw	r4,-12(fp)
 2017a24:	2805883a 	mov	r2,r5
 2017a28:	e1bfff15 	stw	r6,-4(fp)
 2017a2c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017a30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2017a34:	e0bfff17 	ldw	r2,-4(fp)
 2017a38:	1000021e 	bne	r2,zero,2017a44 <OSMboxPend+0x34>
        return ((void *)0);
 2017a3c:	0005883a 	mov	r2,zero
 2017a40:	00007b06 	br	2017c30 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017a44:	e0bffd17 	ldw	r2,-12(fp)
 2017a48:	1000051e 	bne	r2,zero,2017a60 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2017a4c:	e0bfff17 	ldw	r2,-4(fp)
 2017a50:	00c00104 	movi	r3,4
 2017a54:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017a58:	0005883a 	mov	r2,zero
 2017a5c:	00007406 	br	2017c30 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2017a60:	e0bffd17 	ldw	r2,-12(fp)
 2017a64:	10800003 	ldbu	r2,0(r2)
 2017a68:	10803fcc 	andi	r2,r2,255
 2017a6c:	10800060 	cmpeqi	r2,r2,1
 2017a70:	1000051e 	bne	r2,zero,2017a88 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2017a74:	e0bfff17 	ldw	r2,-4(fp)
 2017a78:	00c00044 	movi	r3,1
 2017a7c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017a80:	0005883a 	mov	r2,zero
 2017a84:	00006a06 	br	2017c30 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2017a88:	d0a74503 	ldbu	r2,-25324(gp)
 2017a8c:	10803fcc 	andi	r2,r2,255
 2017a90:	10000526 	beq	r2,zero,2017aa8 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2017a94:	e0bfff17 	ldw	r2,-4(fp)
 2017a98:	00c00084 	movi	r3,2
 2017a9c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017aa0:	0005883a 	mov	r2,zero
 2017aa4:	00006206 	br	2017c30 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2017aa8:	d0a73703 	ldbu	r2,-25380(gp)
 2017aac:	10803fcc 	andi	r2,r2,255
 2017ab0:	10000526 	beq	r2,zero,2017ac8 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2017ab4:	e0bfff17 	ldw	r2,-4(fp)
 2017ab8:	00c00344 	movi	r3,13
 2017abc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2017ac0:	0005883a 	mov	r2,zero
 2017ac4:	00005a06 	br	2017c30 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ac8:	0005303a 	rdctl	r2,status
 2017acc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017ad0:	e0fffc17 	ldw	r3,-16(fp)
 2017ad4:	00bfff84 	movi	r2,-2
 2017ad8:	1884703a 	and	r2,r3,r2
 2017adc:	1001703a 	wrctl	status,r2
  
  return context;
 2017ae0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017ae4:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 2017ae8:	e0bffd17 	ldw	r2,-12(fp)
 2017aec:	10800117 	ldw	r2,4(r2)
 2017af0:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 2017af4:	e0bff617 	ldw	r2,-40(fp)
 2017af8:	10000a26 	beq	r2,zero,2017b24 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 2017afc:	e0bffd17 	ldw	r2,-12(fp)
 2017b00:	10000115 	stw	zero,4(r2)
 2017b04:	e0bff717 	ldw	r2,-36(fp)
 2017b08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017b0c:	e0bff817 	ldw	r2,-32(fp)
 2017b10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2017b14:	e0bfff17 	ldw	r2,-4(fp)
 2017b18:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 2017b1c:	e0bff617 	ldw	r2,-40(fp)
 2017b20:	00004306 	br	2017c30 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 2017b24:	d0a74617 	ldw	r2,-25320(gp)
 2017b28:	d0e74617 	ldw	r3,-25320(gp)
 2017b2c:	18c00c03 	ldbu	r3,48(r3)
 2017b30:	18c00094 	ori	r3,r3,2
 2017b34:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2017b38:	d0a74617 	ldw	r2,-25320(gp)
 2017b3c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 2017b40:	d0a74617 	ldw	r2,-25320(gp)
 2017b44:	e0fffe0b 	ldhu	r3,-8(fp)
 2017b48:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2017b4c:	e13ffd17 	ldw	r4,-12(fp)
 2017b50:	2014e380 	call	2014e38 <OS_EventTaskWait>
 2017b54:	e0bff717 	ldw	r2,-36(fp)
 2017b58:	e0bffb15 	stw	r2,-20(fp)
 2017b5c:	e0bffb17 	ldw	r2,-20(fp)
 2017b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 2017b64:	20156ec0 	call	20156ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017b68:	0005303a 	rdctl	r2,status
 2017b6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017b70:	e0fff917 	ldw	r3,-28(fp)
 2017b74:	00bfff84 	movi	r2,-2
 2017b78:	1884703a 	and	r2,r3,r2
 2017b7c:	1001703a 	wrctl	status,r2
  
  return context;
 2017b80:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2017b84:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2017b88:	d0a74617 	ldw	r2,-25320(gp)
 2017b8c:	10800c43 	ldbu	r2,49(r2)
 2017b90:	10803fcc 	andi	r2,r2,255
 2017b94:	10000326 	beq	r2,zero,2017ba4 <OSMboxPend+0x194>
 2017b98:	108000a0 	cmpeqi	r2,r2,2
 2017b9c:	1000071e 	bne	r2,zero,2017bbc <OSMboxPend+0x1ac>
 2017ba0:	00000b06 	br	2017bd0 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 2017ba4:	d0a74617 	ldw	r2,-25320(gp)
 2017ba8:	10800917 	ldw	r2,36(r2)
 2017bac:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 2017bb0:	e0bfff17 	ldw	r2,-4(fp)
 2017bb4:	10000005 	stb	zero,0(r2)
             break;
 2017bb8:	00000e06 	br	2017bf4 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2017bbc:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2017bc0:	e0bfff17 	ldw	r2,-4(fp)
 2017bc4:	00c00384 	movi	r3,14
 2017bc8:	10c00005 	stb	r3,0(r2)
             break;
 2017bcc:	00000906 	br	2017bf4 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2017bd0:	d0a74617 	ldw	r2,-25320(gp)
 2017bd4:	e17ffd17 	ldw	r5,-12(fp)
 2017bd8:	1009883a 	mov	r4,r2
 2017bdc:	20150980 	call	2015098 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2017be0:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2017be4:	e0bfff17 	ldw	r2,-4(fp)
 2017be8:	00c00284 	movi	r3,10
 2017bec:	10c00005 	stb	r3,0(r2)
             break;
 2017bf0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2017bf4:	d0a74617 	ldw	r2,-25320(gp)
 2017bf8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2017bfc:	d0a74617 	ldw	r2,-25320(gp)
 2017c00:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2017c04:	d0a74617 	ldw	r2,-25320(gp)
 2017c08:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2017c0c:	d0a74617 	ldw	r2,-25320(gp)
 2017c10:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2017c14:	d0a74617 	ldw	r2,-25320(gp)
 2017c18:	10000915 	stw	zero,36(r2)
 2017c1c:	e0bff717 	ldw	r2,-36(fp)
 2017c20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017c24:	e0bffa17 	ldw	r2,-24(fp)
 2017c28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2017c2c:	e0bff617 	ldw	r2,-40(fp)
}
 2017c30:	e037883a 	mov	sp,fp
 2017c34:	dfc00117 	ldw	ra,4(sp)
 2017c38:	df000017 	ldw	fp,0(sp)
 2017c3c:	dec00204 	addi	sp,sp,8
 2017c40:	f800283a 	ret

02017c44 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2017c44:	defff604 	addi	sp,sp,-40
 2017c48:	dfc00915 	stw	ra,36(sp)
 2017c4c:	df000815 	stw	fp,32(sp)
 2017c50:	df000804 	addi	fp,sp,32
 2017c54:	e13ffd15 	stw	r4,-12(fp)
 2017c58:	2805883a 	mov	r2,r5
 2017c5c:	e1bfff15 	stw	r6,-4(fp)
 2017c60:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2017c64:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2017c68:	e0bfff17 	ldw	r2,-4(fp)
 2017c6c:	1000021e 	bne	r2,zero,2017c78 <OSMboxPendAbort+0x34>
        return (0);
 2017c70:	0005883a 	mov	r2,zero
 2017c74:	00004906 	br	2017d9c <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2017c78:	e0bffd17 	ldw	r2,-12(fp)
 2017c7c:	1000051e 	bne	r2,zero,2017c94 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2017c80:	e0bfff17 	ldw	r2,-4(fp)
 2017c84:	00c00104 	movi	r3,4
 2017c88:	10c00005 	stb	r3,0(r2)
        return (0);
 2017c8c:	0005883a 	mov	r2,zero
 2017c90:	00004206 	br	2017d9c <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2017c94:	e0bffd17 	ldw	r2,-12(fp)
 2017c98:	10800003 	ldbu	r2,0(r2)
 2017c9c:	10803fcc 	andi	r2,r2,255
 2017ca0:	10800060 	cmpeqi	r2,r2,1
 2017ca4:	1000051e 	bne	r2,zero,2017cbc <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2017ca8:	e0bfff17 	ldw	r2,-4(fp)
 2017cac:	00c00044 	movi	r3,1
 2017cb0:	10c00005 	stb	r3,0(r2)
        return (0);
 2017cb4:	0005883a 	mov	r2,zero
 2017cb8:	00003806 	br	2017d9c <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017cbc:	0005303a 	rdctl	r2,status
 2017cc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017cc4:	e0fffc17 	ldw	r3,-16(fp)
 2017cc8:	00bfff84 	movi	r2,-2
 2017ccc:	1884703a 	and	r2,r3,r2
 2017cd0:	1001703a 	wrctl	status,r2
  
  return context;
 2017cd4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017cd8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 2017cdc:	e0bffd17 	ldw	r2,-12(fp)
 2017ce0:	10800283 	ldbu	r2,10(r2)
 2017ce4:	10803fcc 	andi	r2,r2,255
 2017ce8:	10002526 	beq	r2,zero,2017d80 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 2017cec:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2017cf0:	e0bffe03 	ldbu	r2,-8(fp)
 2017cf4:	10800060 	cmpeqi	r2,r2,1
 2017cf8:	10000e26 	beq	r2,zero,2017d34 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2017cfc:	00000806 	br	2017d20 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2017d00:	01c00084 	movi	r7,2
 2017d04:	01800084 	movi	r6,2
 2017d08:	000b883a 	mov	r5,zero
 2017d0c:	e13ffd17 	ldw	r4,-12(fp)
 2017d10:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                     nbr_tasks++;
 2017d14:	e0bff803 	ldbu	r2,-32(fp)
 2017d18:	10800044 	addi	r2,r2,1
 2017d1c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2017d20:	e0bffd17 	ldw	r2,-12(fp)
 2017d24:	10800283 	ldbu	r2,10(r2)
 2017d28:	10803fcc 	andi	r2,r2,255
 2017d2c:	103ff41e 	bne	r2,zero,2017d00 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2017d30:	00000906 	br	2017d58 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2017d34:	01c00084 	movi	r7,2
 2017d38:	01800084 	movi	r6,2
 2017d3c:	000b883a 	mov	r5,zero
 2017d40:	e13ffd17 	ldw	r4,-12(fp)
 2017d44:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                 nbr_tasks++;
 2017d48:	e0bff803 	ldbu	r2,-32(fp)
 2017d4c:	10800044 	addi	r2,r2,1
 2017d50:	e0bff805 	stb	r2,-32(fp)
                 break;
 2017d54:	0001883a 	nop
 2017d58:	e0bff917 	ldw	r2,-28(fp)
 2017d5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017d60:	e0bffa17 	ldw	r2,-24(fp)
 2017d64:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2017d68:	20156ec0 	call	20156ec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2017d6c:	e0bfff17 	ldw	r2,-4(fp)
 2017d70:	00c00384 	movi	r3,14
 2017d74:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2017d78:	e0bff803 	ldbu	r2,-32(fp)
 2017d7c:	00000706 	br	2017d9c <OSMboxPendAbort+0x158>
 2017d80:	e0bff917 	ldw	r2,-28(fp)
 2017d84:	e0bffb15 	stw	r2,-20(fp)
 2017d88:	e0bffb17 	ldw	r2,-20(fp)
 2017d8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017d90:	e0bfff17 	ldw	r2,-4(fp)
 2017d94:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 2017d98:	0005883a 	mov	r2,zero
}
 2017d9c:	e037883a 	mov	sp,fp
 2017da0:	dfc00117 	ldw	ra,4(sp)
 2017da4:	df000017 	ldw	fp,0(sp)
 2017da8:	dec00204 	addi	sp,sp,8
 2017dac:	f800283a 	ret

02017db0 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 2017db0:	defff704 	addi	sp,sp,-36
 2017db4:	dfc00815 	stw	ra,32(sp)
 2017db8:	df000715 	stw	fp,28(sp)
 2017dbc:	df000704 	addi	fp,sp,28
 2017dc0:	e13ffe15 	stw	r4,-8(fp)
 2017dc4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017dc8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017dcc:	e0bffe17 	ldw	r2,-8(fp)
 2017dd0:	1000021e 	bne	r2,zero,2017ddc <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2017dd4:	00800104 	movi	r2,4
 2017dd8:	00003406 	br	2017eac <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2017ddc:	e0bfff17 	ldw	r2,-4(fp)
 2017de0:	1000021e 	bne	r2,zero,2017dec <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 2017de4:	008000c4 	movi	r2,3
 2017de8:	00003006 	br	2017eac <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2017dec:	e0bffe17 	ldw	r2,-8(fp)
 2017df0:	10800003 	ldbu	r2,0(r2)
 2017df4:	10803fcc 	andi	r2,r2,255
 2017df8:	10800060 	cmpeqi	r2,r2,1
 2017dfc:	1000021e 	bne	r2,zero,2017e08 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 2017e00:	00800044 	movi	r2,1
 2017e04:	00002906 	br	2017eac <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017e08:	0005303a 	rdctl	r2,status
 2017e0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e10:	e0fffd17 	ldw	r3,-12(fp)
 2017e14:	00bfff84 	movi	r2,-2
 2017e18:	1884703a 	and	r2,r3,r2
 2017e1c:	1001703a 	wrctl	status,r2
  
  return context;
 2017e20:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2017e24:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2017e28:	e0bffe17 	ldw	r2,-8(fp)
 2017e2c:	10800283 	ldbu	r2,10(r2)
 2017e30:	10803fcc 	andi	r2,r2,255
 2017e34:	10000c26 	beq	r2,zero,2017e68 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017e38:	000f883a 	mov	r7,zero
 2017e3c:	01800084 	movi	r6,2
 2017e40:	e17fff17 	ldw	r5,-4(fp)
 2017e44:	e13ffe17 	ldw	r4,-8(fp)
 2017e48:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
 2017e4c:	e0bff917 	ldw	r2,-28(fp)
 2017e50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017e54:	e0bffa17 	ldw	r2,-24(fp)
 2017e58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2017e5c:	20156ec0 	call	20156ec <OS_Sched>
        return (OS_ERR_NONE);
 2017e60:	0005883a 	mov	r2,zero
 2017e64:	00001106 	br	2017eac <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2017e68:	e0bffe17 	ldw	r2,-8(fp)
 2017e6c:	10800117 	ldw	r2,4(r2)
 2017e70:	10000626 	beq	r2,zero,2017e8c <OSMboxPost+0xdc>
 2017e74:	e0bff917 	ldw	r2,-28(fp)
 2017e78:	e0bffb15 	stw	r2,-20(fp)
 2017e7c:	e0bffb17 	ldw	r2,-20(fp)
 2017e80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2017e84:	00800504 	movi	r2,20
 2017e88:	00000806 	br	2017eac <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2017e8c:	e0bffe17 	ldw	r2,-8(fp)
 2017e90:	e0ffff17 	ldw	r3,-4(fp)
 2017e94:	10c00115 	stw	r3,4(r2)
 2017e98:	e0bff917 	ldw	r2,-28(fp)
 2017e9c:	e0bffc15 	stw	r2,-16(fp)
 2017ea0:	e0bffc17 	ldw	r2,-16(fp)
 2017ea4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2017ea8:	0005883a 	mov	r2,zero
}
 2017eac:	e037883a 	mov	sp,fp
 2017eb0:	dfc00117 	ldw	ra,4(sp)
 2017eb4:	df000017 	ldw	fp,0(sp)
 2017eb8:	dec00204 	addi	sp,sp,8
 2017ebc:	f800283a 	ret

02017ec0 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2017ec0:	defff604 	addi	sp,sp,-40
 2017ec4:	dfc00915 	stw	ra,36(sp)
 2017ec8:	df000815 	stw	fp,32(sp)
 2017ecc:	df000804 	addi	fp,sp,32
 2017ed0:	e13ffd15 	stw	r4,-12(fp)
 2017ed4:	e17ffe15 	stw	r5,-8(fp)
 2017ed8:	3005883a 	mov	r2,r6
 2017edc:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017ee0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2017ee4:	e0bffd17 	ldw	r2,-12(fp)
 2017ee8:	1000021e 	bne	r2,zero,2017ef4 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2017eec:	00800104 	movi	r2,4
 2017ef0:	00004506 	br	2018008 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2017ef4:	e0bffe17 	ldw	r2,-8(fp)
 2017ef8:	1000021e 	bne	r2,zero,2017f04 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 2017efc:	008000c4 	movi	r2,3
 2017f00:	00004106 	br	2018008 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2017f04:	e0bffd17 	ldw	r2,-12(fp)
 2017f08:	10800003 	ldbu	r2,0(r2)
 2017f0c:	10803fcc 	andi	r2,r2,255
 2017f10:	10800060 	cmpeqi	r2,r2,1
 2017f14:	1000021e 	bne	r2,zero,2017f20 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 2017f18:	00800044 	movi	r2,1
 2017f1c:	00003a06 	br	2018008 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017f20:	0005303a 	rdctl	r2,status
 2017f24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017f28:	e0fffc17 	ldw	r3,-16(fp)
 2017f2c:	00bfff84 	movi	r2,-2
 2017f30:	1884703a 	and	r2,r3,r2
 2017f34:	1001703a 	wrctl	status,r2
  
  return context;
 2017f38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2017f3c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2017f40:	e0bffd17 	ldw	r2,-12(fp)
 2017f44:	10800283 	ldbu	r2,10(r2)
 2017f48:	10803fcc 	andi	r2,r2,255
 2017f4c:	10001d26 	beq	r2,zero,2017fc4 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2017f50:	e0bfff03 	ldbu	r2,-4(fp)
 2017f54:	1080004c 	andi	r2,r2,1
 2017f58:	10000b26 	beq	r2,zero,2017f88 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2017f5c:	00000506 	br	2017f74 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017f60:	000f883a 	mov	r7,zero
 2017f64:	01800084 	movi	r6,2
 2017f68:	e17ffe17 	ldw	r5,-8(fp)
 2017f6c:	e13ffd17 	ldw	r4,-12(fp)
 2017f70:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2017f74:	e0bffd17 	ldw	r2,-12(fp)
 2017f78:	10800283 	ldbu	r2,10(r2)
 2017f7c:	10803fcc 	andi	r2,r2,255
 2017f80:	103ff71e 	bne	r2,zero,2017f60 <OSMboxPostOpt+0xa0>
 2017f84:	00000506 	br	2017f9c <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2017f88:	000f883a 	mov	r7,zero
 2017f8c:	01800084 	movi	r6,2
 2017f90:	e17ffe17 	ldw	r5,-8(fp)
 2017f94:	e13ffd17 	ldw	r4,-12(fp)
 2017f98:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
 2017f9c:	e0bff817 	ldw	r2,-32(fp)
 2017fa0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017fa4:	e0bff917 	ldw	r2,-28(fp)
 2017fa8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2017fac:	e0bfff03 	ldbu	r2,-4(fp)
 2017fb0:	1080010c 	andi	r2,r2,4
 2017fb4:	1000011e 	bne	r2,zero,2017fbc <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 2017fb8:	20156ec0 	call	20156ec <OS_Sched>
        }
        return (OS_ERR_NONE);
 2017fbc:	0005883a 	mov	r2,zero
 2017fc0:	00001106 	br	2018008 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2017fc4:	e0bffd17 	ldw	r2,-12(fp)
 2017fc8:	10800117 	ldw	r2,4(r2)
 2017fcc:	10000626 	beq	r2,zero,2017fe8 <OSMboxPostOpt+0x128>
 2017fd0:	e0bff817 	ldw	r2,-32(fp)
 2017fd4:	e0bffa15 	stw	r2,-24(fp)
 2017fd8:	e0bffa17 	ldw	r2,-24(fp)
 2017fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2017fe0:	00800504 	movi	r2,20
 2017fe4:	00000806 	br	2018008 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2017fe8:	e0bffd17 	ldw	r2,-12(fp)
 2017fec:	e0fffe17 	ldw	r3,-8(fp)
 2017ff0:	10c00115 	stw	r3,4(r2)
 2017ff4:	e0bff817 	ldw	r2,-32(fp)
 2017ff8:	e0bffb15 	stw	r2,-20(fp)
 2017ffc:	e0bffb17 	ldw	r2,-20(fp)
 2018000:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2018004:	0005883a 	mov	r2,zero
}
 2018008:	e037883a 	mov	sp,fp
 201800c:	dfc00117 	ldw	ra,4(sp)
 2018010:	df000017 	ldw	fp,0(sp)
 2018014:	dec00204 	addi	sp,sp,8
 2018018:	f800283a 	ret

0201801c <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 201801c:	defff704 	addi	sp,sp,-36
 2018020:	df000815 	stw	fp,32(sp)
 2018024:	df000804 	addi	fp,sp,32
 2018028:	e13ffe15 	stw	r4,-8(fp)
 201802c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2018030:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2018034:	e0bffe17 	ldw	r2,-8(fp)
 2018038:	1000021e 	bne	r2,zero,2018044 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201803c:	00800104 	movi	r2,4
 2018040:	00003606 	br	201811c <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 2018044:	e0bfff17 	ldw	r2,-4(fp)
 2018048:	1000021e 	bne	r2,zero,2018054 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201804c:	00800244 	movi	r2,9
 2018050:	00003206 	br	201811c <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2018054:	e0bffe17 	ldw	r2,-8(fp)
 2018058:	10800003 	ldbu	r2,0(r2)
 201805c:	10803fcc 	andi	r2,r2,255
 2018060:	10800060 	cmpeqi	r2,r2,1
 2018064:	1000021e 	bne	r2,zero,2018070 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2018068:	00800044 	movi	r2,1
 201806c:	00002b06 	br	201811c <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018070:	0005303a 	rdctl	r2,status
 2018074:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018078:	e0fffd17 	ldw	r3,-12(fp)
 201807c:	00bfff84 	movi	r2,-2
 2018080:	1884703a 	and	r2,r3,r2
 2018084:	1001703a 	wrctl	status,r2
  
  return context;
 2018088:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201808c:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 2018090:	e0bffe17 	ldw	r2,-8(fp)
 2018094:	10c00283 	ldbu	r3,10(r2)
 2018098:	e0bfff17 	ldw	r2,-4(fp)
 201809c:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 20180a0:	e0bffe17 	ldw	r2,-8(fp)
 20180a4:	108002c4 	addi	r2,r2,11
 20180a8:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 20180ac:	e0bfff17 	ldw	r2,-4(fp)
 20180b0:	10800104 	addi	r2,r2,4
 20180b4:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20180b8:	e03ff805 	stb	zero,-32(fp)
 20180bc:	00000b06 	br	20180ec <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 20180c0:	e0bffa17 	ldw	r2,-24(fp)
 20180c4:	10c00044 	addi	r3,r2,1
 20180c8:	e0fffa15 	stw	r3,-24(fp)
 20180cc:	e0fff917 	ldw	r3,-28(fp)
 20180d0:	19000044 	addi	r4,r3,1
 20180d4:	e13ff915 	stw	r4,-28(fp)
 20180d8:	18c00003 	ldbu	r3,0(r3)
 20180dc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20180e0:	e0bff803 	ldbu	r2,-32(fp)
 20180e4:	10800044 	addi	r2,r2,1
 20180e8:	e0bff805 	stb	r2,-32(fp)
 20180ec:	e0bff803 	ldbu	r2,-32(fp)
 20180f0:	108000f0 	cmpltui	r2,r2,3
 20180f4:	103ff21e 	bne	r2,zero,20180c0 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 20180f8:	e0bffe17 	ldw	r2,-8(fp)
 20180fc:	10c00117 	ldw	r3,4(r2)
 2018100:	e0bfff17 	ldw	r2,-4(fp)
 2018104:	10c00015 	stw	r3,0(r2)
 2018108:	e0bffb17 	ldw	r2,-20(fp)
 201810c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018110:	e0bffc17 	ldw	r2,-16(fp)
 2018114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2018118:	0005883a 	mov	r2,zero
}
 201811c:	e037883a 	mov	sp,fp
 2018120:	df000017 	ldw	fp,0(sp)
 2018124:	dec00104 	addi	sp,sp,4
 2018128:	f800283a 	ret

0201812c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 201812c:	defff404 	addi	sp,sp,-48
 2018130:	df000b15 	stw	fp,44(sp)
 2018134:	df000b04 	addi	fp,sp,44
 2018138:	e13ffc15 	stw	r4,-16(fp)
 201813c:	e17ffd15 	stw	r5,-12(fp)
 2018140:	e1bffe15 	stw	r6,-8(fp)
 2018144:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018148:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201814c:	e0bfff17 	ldw	r2,-4(fp)
 2018150:	1000021e 	bne	r2,zero,201815c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 2018154:	0005883a 	mov	r2,zero
 2018158:	00006506 	br	20182f0 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 201815c:	e0bffc17 	ldw	r2,-16(fp)
 2018160:	1000051e 	bne	r2,zero,2018178 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2018164:	e0bfff17 	ldw	r2,-4(fp)
 2018168:	00c01884 	movi	r3,98
 201816c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018170:	0005883a 	mov	r2,zero
 2018174:	00005e06 	br	20182f0 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 2018178:	e0bffc17 	ldw	r2,-16(fp)
 201817c:	108000cc 	andi	r2,r2,3
 2018180:	10000526 	beq	r2,zero,2018198 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2018184:	e0bfff17 	ldw	r2,-4(fp)
 2018188:	00c01884 	movi	r3,98
 201818c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018190:	0005883a 	mov	r2,zero
 2018194:	00005606 	br	20182f0 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 2018198:	e0bffd17 	ldw	r2,-12(fp)
 201819c:	108000a8 	cmpgeui	r2,r2,2
 20181a0:	1000051e 	bne	r2,zero,20181b8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 20181a4:	e0bfff17 	ldw	r2,-4(fp)
 20181a8:	00c016c4 	movi	r3,91
 20181ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20181b0:	0005883a 	mov	r2,zero
 20181b4:	00004e06 	br	20182f0 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 20181b8:	e0bffe17 	ldw	r2,-8(fp)
 20181bc:	10800128 	cmpgeui	r2,r2,4
 20181c0:	1000051e 	bne	r2,zero,20181d8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 20181c4:	e0bfff17 	ldw	r2,-4(fp)
 20181c8:	00c01704 	movi	r3,92
 20181cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20181d0:	0005883a 	mov	r2,zero
 20181d4:	00004606 	br	20182f0 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20181d8:	0005303a 	rdctl	r2,status
 20181dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20181e0:	e0fffb17 	ldw	r3,-20(fp)
 20181e4:	00bfff84 	movi	r2,-2
 20181e8:	1884703a 	and	r2,r3,r2
 20181ec:	1001703a 	wrctl	status,r2
  
  return context;
 20181f0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20181f4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 20181f8:	d0a74017 	ldw	r2,-25344(gp)
 20181fc:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2018200:	d0a74017 	ldw	r2,-25344(gp)
 2018204:	10000326 	beq	r2,zero,2018214 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 2018208:	d0a74017 	ldw	r2,-25344(gp)
 201820c:	10800117 	ldw	r2,4(r2)
 2018210:	d0a74015 	stw	r2,-25344(gp)
 2018214:	e0bff817 	ldw	r2,-32(fp)
 2018218:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201821c:	e0bff917 	ldw	r2,-28(fp)
 2018220:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 2018224:	e0bffa17 	ldw	r2,-24(fp)
 2018228:	1000051e 	bne	r2,zero,2018240 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 201822c:	e0bfff17 	ldw	r2,-4(fp)
 2018230:	00c01684 	movi	r3,90
 2018234:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2018238:	0005883a 	mov	r2,zero
 201823c:	00002c06 	br	20182f0 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 2018240:	e0bffc17 	ldw	r2,-16(fp)
 2018244:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 2018248:	e0fffc17 	ldw	r3,-16(fp)
 201824c:	e0bffe17 	ldw	r2,-8(fp)
 2018250:	1885883a 	add	r2,r3,r2
 2018254:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 2018258:	e03ff715 	stw	zero,-36(fp)
 201825c:	00000c06 	br	2018290 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 2018260:	e0bff617 	ldw	r2,-40(fp)
 2018264:	e0fff517 	ldw	r3,-44(fp)
 2018268:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 201826c:	e0bff517 	ldw	r2,-44(fp)
 2018270:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 2018274:	e0fff517 	ldw	r3,-44(fp)
 2018278:	e0bffe17 	ldw	r2,-8(fp)
 201827c:	1885883a 	add	r2,r3,r2
 2018280:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 2018284:	e0bff717 	ldw	r2,-36(fp)
 2018288:	10800044 	addi	r2,r2,1
 201828c:	e0bff715 	stw	r2,-36(fp)
 2018290:	e0bffd17 	ldw	r2,-12(fp)
 2018294:	10bfffc4 	addi	r2,r2,-1
 2018298:	e0fff717 	ldw	r3,-36(fp)
 201829c:	18bff036 	bltu	r3,r2,2018260 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 20182a0:	e0bff617 	ldw	r2,-40(fp)
 20182a4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 20182a8:	e0bffa17 	ldw	r2,-24(fp)
 20182ac:	e0fffc17 	ldw	r3,-16(fp)
 20182b0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 20182b4:	e0bffa17 	ldw	r2,-24(fp)
 20182b8:	e0fffc17 	ldw	r3,-16(fp)
 20182bc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 20182c0:	e0bffa17 	ldw	r2,-24(fp)
 20182c4:	e0fffd17 	ldw	r3,-12(fp)
 20182c8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 20182cc:	e0bffa17 	ldw	r2,-24(fp)
 20182d0:	e0fffd17 	ldw	r3,-12(fp)
 20182d4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 20182d8:	e0bffa17 	ldw	r2,-24(fp)
 20182dc:	e0fffe17 	ldw	r3,-8(fp)
 20182e0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 20182e4:	e0bfff17 	ldw	r2,-4(fp)
 20182e8:	10000005 	stb	zero,0(r2)
    return (pmem);
 20182ec:	e0bffa17 	ldw	r2,-24(fp)
}
 20182f0:	e037883a 	mov	sp,fp
 20182f4:	df000017 	ldw	fp,0(sp)
 20182f8:	dec00104 	addi	sp,sp,4
 20182fc:	f800283a 	ret

02018300 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2018300:	defff804 	addi	sp,sp,-32
 2018304:	df000715 	stw	fp,28(sp)
 2018308:	df000704 	addi	fp,sp,28
 201830c:	e13ffe15 	stw	r4,-8(fp)
 2018310:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018314:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2018318:	e0bfff17 	ldw	r2,-4(fp)
 201831c:	1000021e 	bne	r2,zero,2018328 <OSMemGet+0x28>
        return ((void *)0);
 2018320:	0005883a 	mov	r2,zero
 2018324:	00002e06 	br	20183e0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 2018328:	e0bffe17 	ldw	r2,-8(fp)
 201832c:	1000051e 	bne	r2,zero,2018344 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2018330:	e0bfff17 	ldw	r2,-4(fp)
 2018334:	00c01804 	movi	r3,96
 2018338:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201833c:	0005883a 	mov	r2,zero
 2018340:	00002706 	br	20183e0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018344:	0005303a 	rdctl	r2,status
 2018348:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201834c:	e0fffd17 	ldw	r3,-12(fp)
 2018350:	00bfff84 	movi	r2,-2
 2018354:	1884703a 	and	r2,r3,r2
 2018358:	1001703a 	wrctl	status,r2
  
  return context;
 201835c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018360:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 2018364:	e0bffe17 	ldw	r2,-8(fp)
 2018368:	10800417 	ldw	r2,16(r2)
 201836c:	10001426 	beq	r2,zero,20183c0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 2018370:	e0bffe17 	ldw	r2,-8(fp)
 2018374:	10800117 	ldw	r2,4(r2)
 2018378:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 201837c:	e0bffb17 	ldw	r2,-20(fp)
 2018380:	10c00017 	ldw	r3,0(r2)
 2018384:	e0bffe17 	ldw	r2,-8(fp)
 2018388:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 201838c:	e0bffe17 	ldw	r2,-8(fp)
 2018390:	10800417 	ldw	r2,16(r2)
 2018394:	10ffffc4 	addi	r3,r2,-1
 2018398:	e0bffe17 	ldw	r2,-8(fp)
 201839c:	10c00415 	stw	r3,16(r2)
 20183a0:	e0bff917 	ldw	r2,-28(fp)
 20183a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20183a8:	e0bffa17 	ldw	r2,-24(fp)
 20183ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 20183b0:	e0bfff17 	ldw	r2,-4(fp)
 20183b4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 20183b8:	e0bffb17 	ldw	r2,-20(fp)
 20183bc:	00000806 	br	20183e0 <OSMemGet+0xe0>
 20183c0:	e0bff917 	ldw	r2,-28(fp)
 20183c4:	e0bffc15 	stw	r2,-16(fp)
 20183c8:	e0bffc17 	ldw	r2,-16(fp)
 20183cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 20183d0:	e0bfff17 	ldw	r2,-4(fp)
 20183d4:	00c01744 	movi	r3,93
 20183d8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 20183dc:	0005883a 	mov	r2,zero
}
 20183e0:	e037883a 	mov	sp,fp
 20183e4:	df000017 	ldw	fp,0(sp)
 20183e8:	dec00104 	addi	sp,sp,4
 20183ec:	f800283a 	ret

020183f0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 20183f0:	defff704 	addi	sp,sp,-36
 20183f4:	dfc00815 	stw	ra,32(sp)
 20183f8:	df000715 	stw	fp,28(sp)
 20183fc:	df000704 	addi	fp,sp,28
 2018400:	e13ffd15 	stw	r4,-12(fp)
 2018404:	e17ffe15 	stw	r5,-8(fp)
 2018408:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201840c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018410:	e0bfff17 	ldw	r2,-4(fp)
 2018414:	1000021e 	bne	r2,zero,2018420 <OSMemNameGet+0x30>
        return (0);
 2018418:	0005883a 	mov	r2,zero
 201841c:	00002b06 	br	20184cc <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2018420:	e0bffd17 	ldw	r2,-12(fp)
 2018424:	1000051e 	bne	r2,zero,201843c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2018428:	e0bfff17 	ldw	r2,-4(fp)
 201842c:	00c01804 	movi	r3,96
 2018430:	10c00005 	stb	r3,0(r2)
        return (0);
 2018434:	0005883a 	mov	r2,zero
 2018438:	00002406 	br	20184cc <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 201843c:	e0bffe17 	ldw	r2,-8(fp)
 2018440:	1000051e 	bne	r2,zero,2018458 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2018444:	e0bfff17 	ldw	r2,-4(fp)
 2018448:	00c00304 	movi	r3,12
 201844c:	10c00005 	stb	r3,0(r2)
        return (0);
 2018450:	0005883a 	mov	r2,zero
 2018454:	00001d06 	br	20184cc <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2018458:	d0a74503 	ldbu	r2,-25324(gp)
 201845c:	10803fcc 	andi	r2,r2,255
 2018460:	10000526 	beq	r2,zero,2018478 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2018464:	e0bfff17 	ldw	r2,-4(fp)
 2018468:	00c00444 	movi	r3,17
 201846c:	10c00005 	stb	r3,0(r2)
        return (0);
 2018470:	0005883a 	mov	r2,zero
 2018474:	00001506 	br	20184cc <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018478:	0005303a 	rdctl	r2,status
 201847c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018480:	e0fffb17 	ldw	r3,-20(fp)
 2018484:	00bfff84 	movi	r2,-2
 2018488:	1884703a 	and	r2,r3,r2
 201848c:	1001703a 	wrctl	status,r2
  
  return context;
 2018490:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2018494:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 2018498:	e0bffd17 	ldw	r2,-12(fp)
 201849c:	10800504 	addi	r2,r2,20
 20184a0:	100b883a 	mov	r5,r2
 20184a4:	e13ffe17 	ldw	r4,-8(fp)
 20184a8:	20158300 	call	2015830 <OS_StrCopy>
 20184ac:	e0bffa05 	stb	r2,-24(fp)
 20184b0:	e0bff917 	ldw	r2,-28(fp)
 20184b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20184b8:	e0bffc17 	ldw	r2,-16(fp)
 20184bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20184c0:	e0bfff17 	ldw	r2,-4(fp)
 20184c4:	10000005 	stb	zero,0(r2)
    return (len);
 20184c8:	e0bffa03 	ldbu	r2,-24(fp)
}
 20184cc:	e037883a 	mov	sp,fp
 20184d0:	dfc00117 	ldw	ra,4(sp)
 20184d4:	df000017 	ldw	fp,0(sp)
 20184d8:	dec00204 	addi	sp,sp,8
 20184dc:	f800283a 	ret

020184e0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 20184e0:	defff604 	addi	sp,sp,-40
 20184e4:	dfc00915 	stw	ra,36(sp)
 20184e8:	df000815 	stw	fp,32(sp)
 20184ec:	df000804 	addi	fp,sp,32
 20184f0:	e13ffd15 	stw	r4,-12(fp)
 20184f4:	e17ffe15 	stw	r5,-8(fp)
 20184f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20184fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018500:	e0bfff17 	ldw	r2,-4(fp)
 2018504:	10003526 	beq	r2,zero,20185dc <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2018508:	e0bffd17 	ldw	r2,-12(fp)
 201850c:	1000041e 	bne	r2,zero,2018520 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2018510:	e0bfff17 	ldw	r2,-4(fp)
 2018514:	00c01804 	movi	r3,96
 2018518:	10c00005 	stb	r3,0(r2)
        return;
 201851c:	00003006 	br	20185e0 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2018520:	e0bffe17 	ldw	r2,-8(fp)
 2018524:	1000041e 	bne	r2,zero,2018538 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 2018528:	e0bfff17 	ldw	r2,-4(fp)
 201852c:	00c00304 	movi	r3,12
 2018530:	10c00005 	stb	r3,0(r2)
        return;
 2018534:	00002a06 	br	20185e0 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2018538:	d0a74503 	ldbu	r2,-25324(gp)
 201853c:	10803fcc 	andi	r2,r2,255
 2018540:	10000426 	beq	r2,zero,2018554 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2018544:	e0bfff17 	ldw	r2,-4(fp)
 2018548:	00c00484 	movi	r3,18
 201854c:	10c00005 	stb	r3,0(r2)
        return;
 2018550:	00002306 	br	20185e0 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018554:	0005303a 	rdctl	r2,status
 2018558:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201855c:	e0fffc17 	ldw	r3,-16(fp)
 2018560:	00bfff84 	movi	r2,-2
 2018564:	1884703a 	and	r2,r3,r2
 2018568:	1001703a 	wrctl	status,r2
  
  return context;
 201856c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018570:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2018574:	e13ffe17 	ldw	r4,-8(fp)
 2018578:	20158a40 	call	20158a4 <OS_StrLen>
 201857c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2018580:	e0bffa03 	ldbu	r2,-24(fp)
 2018584:	10800830 	cmpltui	r2,r2,32
 2018588:	1000081e 	bne	r2,zero,20185ac <OSMemNameSet+0xcc>
 201858c:	e0bff817 	ldw	r2,-32(fp)
 2018590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018594:	e0bff917 	ldw	r2,-28(fp)
 2018598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 201859c:	e0bfff17 	ldw	r2,-4(fp)
 20185a0:	00c018c4 	movi	r3,99
 20185a4:	10c00005 	stb	r3,0(r2)
        return;
 20185a8:	00000d06 	br	20185e0 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 20185ac:	e0bffd17 	ldw	r2,-12(fp)
 20185b0:	10800504 	addi	r2,r2,20
 20185b4:	e17ffe17 	ldw	r5,-8(fp)
 20185b8:	1009883a 	mov	r4,r2
 20185bc:	20158300 	call	2015830 <OS_StrCopy>
 20185c0:	e0bff817 	ldw	r2,-32(fp)
 20185c4:	e0bffb15 	stw	r2,-20(fp)
 20185c8:	e0bffb17 	ldw	r2,-20(fp)
 20185cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20185d0:	e0bfff17 	ldw	r2,-4(fp)
 20185d4:	10000005 	stb	zero,0(r2)
 20185d8:	00000106 	br	20185e0 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 20185dc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 20185e0:	e037883a 	mov	sp,fp
 20185e4:	dfc00117 	ldw	ra,4(sp)
 20185e8:	df000017 	ldw	fp,0(sp)
 20185ec:	dec00204 	addi	sp,sp,8
 20185f0:	f800283a 	ret

020185f4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 20185f4:	defff904 	addi	sp,sp,-28
 20185f8:	df000615 	stw	fp,24(sp)
 20185fc:	df000604 	addi	fp,sp,24
 2018600:	e13ffe15 	stw	r4,-8(fp)
 2018604:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018608:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 201860c:	e0bffe17 	ldw	r2,-8(fp)
 2018610:	1000021e 	bne	r2,zero,201861c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 2018614:	00801804 	movi	r2,96
 2018618:	00002806 	br	20186bc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 201861c:	e0bfff17 	ldw	r2,-4(fp)
 2018620:	1000021e 	bne	r2,zero,201862c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 2018624:	008017c4 	movi	r2,95
 2018628:	00002406 	br	20186bc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201862c:	0005303a 	rdctl	r2,status
 2018630:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018634:	e0fffd17 	ldw	r3,-12(fp)
 2018638:	00bfff84 	movi	r2,-2
 201863c:	1884703a 	and	r2,r3,r2
 2018640:	1001703a 	wrctl	status,r2
  
  return context;
 2018644:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018648:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 201864c:	e0bffe17 	ldw	r2,-8(fp)
 2018650:	10c00417 	ldw	r3,16(r2)
 2018654:	e0bffe17 	ldw	r2,-8(fp)
 2018658:	10800317 	ldw	r2,12(r2)
 201865c:	18800636 	bltu	r3,r2,2018678 <OSMemPut+0x84>
 2018660:	e0bffa17 	ldw	r2,-24(fp)
 2018664:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018668:	e0bffb17 	ldw	r2,-20(fp)
 201866c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2018670:	00801784 	movi	r2,94
 2018674:	00001106 	br	20186bc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2018678:	e0bffe17 	ldw	r2,-8(fp)
 201867c:	10c00117 	ldw	r3,4(r2)
 2018680:	e0bfff17 	ldw	r2,-4(fp)
 2018684:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 2018688:	e0bffe17 	ldw	r2,-8(fp)
 201868c:	e0ffff17 	ldw	r3,-4(fp)
 2018690:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 2018694:	e0bffe17 	ldw	r2,-8(fp)
 2018698:	10800417 	ldw	r2,16(r2)
 201869c:	10c00044 	addi	r3,r2,1
 20186a0:	e0bffe17 	ldw	r2,-8(fp)
 20186a4:	10c00415 	stw	r3,16(r2)
 20186a8:	e0bffa17 	ldw	r2,-24(fp)
 20186ac:	e0bffc15 	stw	r2,-16(fp)
 20186b0:	e0bffc17 	ldw	r2,-16(fp)
 20186b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 20186b8:	0005883a 	mov	r2,zero
}
 20186bc:	e037883a 	mov	sp,fp
 20186c0:	df000017 	ldw	fp,0(sp)
 20186c4:	dec00104 	addi	sp,sp,4
 20186c8:	f800283a 	ret

020186cc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 20186cc:	defffa04 	addi	sp,sp,-24
 20186d0:	df000515 	stw	fp,20(sp)
 20186d4:	df000504 	addi	fp,sp,20
 20186d8:	e13ffe15 	stw	r4,-8(fp)
 20186dc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20186e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 20186e4:	e0bffe17 	ldw	r2,-8(fp)
 20186e8:	1000021e 	bne	r2,zero,20186f4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 20186ec:	00801804 	movi	r2,96
 20186f0:	00002c06 	br	20187a4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 20186f4:	e0bfff17 	ldw	r2,-4(fp)
 20186f8:	1000021e 	bne	r2,zero,2018704 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 20186fc:	00801844 	movi	r2,97
 2018700:	00002806 	br	20187a4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018704:	0005303a 	rdctl	r2,status
 2018708:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201870c:	e0fffc17 	ldw	r3,-16(fp)
 2018710:	00bfff84 	movi	r2,-2
 2018714:	1884703a 	and	r2,r3,r2
 2018718:	1001703a 	wrctl	status,r2
  
  return context;
 201871c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018720:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 2018724:	e0bffe17 	ldw	r2,-8(fp)
 2018728:	10c00017 	ldw	r3,0(r2)
 201872c:	e0bfff17 	ldw	r2,-4(fp)
 2018730:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 2018734:	e0bffe17 	ldw	r2,-8(fp)
 2018738:	10c00117 	ldw	r3,4(r2)
 201873c:	e0bfff17 	ldw	r2,-4(fp)
 2018740:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 2018744:	e0bffe17 	ldw	r2,-8(fp)
 2018748:	10c00217 	ldw	r3,8(r2)
 201874c:	e0bfff17 	ldw	r2,-4(fp)
 2018750:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 2018754:	e0bffe17 	ldw	r2,-8(fp)
 2018758:	10c00317 	ldw	r3,12(r2)
 201875c:	e0bfff17 	ldw	r2,-4(fp)
 2018760:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 2018764:	e0bffe17 	ldw	r2,-8(fp)
 2018768:	10c00417 	ldw	r3,16(r2)
 201876c:	e0bfff17 	ldw	r2,-4(fp)
 2018770:	10c00415 	stw	r3,16(r2)
 2018774:	e0bffb17 	ldw	r2,-20(fp)
 2018778:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201877c:	e0bffd17 	ldw	r2,-12(fp)
 2018780:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 2018784:	e0bfff17 	ldw	r2,-4(fp)
 2018788:	10c00317 	ldw	r3,12(r2)
 201878c:	e0bfff17 	ldw	r2,-4(fp)
 2018790:	10800417 	ldw	r2,16(r2)
 2018794:	1887c83a 	sub	r3,r3,r2
 2018798:	e0bfff17 	ldw	r2,-4(fp)
 201879c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 20187a0:	0005883a 	mov	r2,zero
}
 20187a4:	e037883a 	mov	sp,fp
 20187a8:	df000017 	ldw	fp,0(sp)
 20187ac:	dec00104 	addi	sp,sp,4
 20187b0:	f800283a 	ret

020187b4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 20187b4:	defffc04 	addi	sp,sp,-16
 20187b8:	dfc00315 	stw	ra,12(sp)
 20187bc:	df000215 	stw	fp,8(sp)
 20187c0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 20187c4:	01430c04 	movi	r5,3120
 20187c8:	010080f4 	movhi	r4,515
 20187cc:	212a5204 	addi	r4,r4,-22200
 20187d0:	20156300 	call	2015630 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 20187d4:	008080f4 	movhi	r2,515
 20187d8:	10aa5204 	addi	r2,r2,-22200
 20187dc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 20187e0:	e03fff0d 	sth	zero,-4(fp)
 20187e4:	00001306 	br	2018834 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 20187e8:	e0bfff0b 	ldhu	r2,-4(fp)
 20187ec:	10800044 	addi	r2,r2,1
 20187f0:	10c00d24 	muli	r3,r2,52
 20187f4:	008080f4 	movhi	r2,515
 20187f8:	10aa5204 	addi	r2,r2,-22200
 20187fc:	1887883a 	add	r3,r3,r2
 2018800:	e0bffe17 	ldw	r2,-8(fp)
 2018804:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2018808:	e0bffe17 	ldw	r2,-8(fp)
 201880c:	00c00fc4 	movi	r3,63
 2018810:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 2018814:	e0bffe17 	ldw	r2,-8(fp)
 2018818:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 201881c:	e0bffe17 	ldw	r2,-8(fp)
 2018820:	10800d04 	addi	r2,r2,52
 2018824:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2018828:	e0bfff0b 	ldhu	r2,-4(fp)
 201882c:	10800044 	addi	r2,r2,1
 2018830:	e0bfff0d 	sth	r2,-4(fp)
 2018834:	e0bfff0b 	ldhu	r2,-4(fp)
 2018838:	10800ef0 	cmpltui	r2,r2,59
 201883c:	103fea1e 	bne	r2,zero,20187e8 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 2018840:	e0bffe17 	ldw	r2,-8(fp)
 2018844:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 2018848:	e0bffe17 	ldw	r2,-8(fp)
 201884c:	00c00fc4 	movi	r3,63
 2018850:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 2018854:	e0bffe17 	ldw	r2,-8(fp)
 2018858:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 201885c:	008080f4 	movhi	r2,515
 2018860:	10aa5204 	addi	r2,r2,-22200
 2018864:	d0a74015 	stw	r2,-25344(gp)
#endif
}
 2018868:	0001883a 	nop
 201886c:	e037883a 	mov	sp,fp
 2018870:	dfc00117 	ldw	ra,4(sp)
 2018874:	df000017 	ldw	fp,0(sp)
 2018878:	dec00204 	addi	sp,sp,8
 201887c:	f800283a 	ret

02018880 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2018880:	defff804 	addi	sp,sp,-32
 2018884:	df000715 	stw	fp,28(sp)
 2018888:	df000704 	addi	fp,sp,28
 201888c:	e13ffe15 	stw	r4,-8(fp)
 2018890:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018894:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018898:	e0bfff17 	ldw	r2,-4(fp)
 201889c:	1000021e 	bne	r2,zero,20188a8 <OSQAccept+0x28>
        return ((void *)0);
 20188a0:	0005883a 	mov	r2,zero
 20188a4:	00004206 	br	20189b0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 20188a8:	e0bffe17 	ldw	r2,-8(fp)
 20188ac:	1000051e 	bne	r2,zero,20188c4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 20188b0:	e0bfff17 	ldw	r2,-4(fp)
 20188b4:	00c00104 	movi	r3,4
 20188b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20188bc:	0005883a 	mov	r2,zero
 20188c0:	00003b06 	br	20189b0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 20188c4:	e0bffe17 	ldw	r2,-8(fp)
 20188c8:	10800003 	ldbu	r2,0(r2)
 20188cc:	10803fcc 	andi	r2,r2,255
 20188d0:	108000a0 	cmpeqi	r2,r2,2
 20188d4:	1000051e 	bne	r2,zero,20188ec <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 20188d8:	e0bfff17 	ldw	r2,-4(fp)
 20188dc:	00c00044 	movi	r3,1
 20188e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20188e4:	0005883a 	mov	r2,zero
 20188e8:	00003106 	br	20189b0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20188ec:	0005303a 	rdctl	r2,status
 20188f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20188f4:	e0fffd17 	ldw	r3,-12(fp)
 20188f8:	00bfff84 	movi	r2,-2
 20188fc:	1884703a 	and	r2,r3,r2
 2018900:	1001703a 	wrctl	status,r2
  
  return context;
 2018904:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018908:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201890c:	e0bffe17 	ldw	r2,-8(fp)
 2018910:	10800117 	ldw	r2,4(r2)
 2018914:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2018918:	e0bffc17 	ldw	r2,-16(fp)
 201891c:	1080058b 	ldhu	r2,22(r2)
 2018920:	10bfffcc 	andi	r2,r2,65535
 2018924:	10001926 	beq	r2,zero,201898c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2018928:	e0bffc17 	ldw	r2,-16(fp)
 201892c:	10800417 	ldw	r2,16(r2)
 2018930:	11000104 	addi	r4,r2,4
 2018934:	e0fffc17 	ldw	r3,-16(fp)
 2018938:	19000415 	stw	r4,16(r3)
 201893c:	10800017 	ldw	r2,0(r2)
 2018940:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2018944:	e0bffc17 	ldw	r2,-16(fp)
 2018948:	1080058b 	ldhu	r2,22(r2)
 201894c:	10bfffc4 	addi	r2,r2,-1
 2018950:	1007883a 	mov	r3,r2
 2018954:	e0bffc17 	ldw	r2,-16(fp)
 2018958:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201895c:	e0bffc17 	ldw	r2,-16(fp)
 2018960:	10c00417 	ldw	r3,16(r2)
 2018964:	e0bffc17 	ldw	r2,-16(fp)
 2018968:	10800217 	ldw	r2,8(r2)
 201896c:	1880041e 	bne	r3,r2,2018980 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 2018970:	e0bffc17 	ldw	r2,-16(fp)
 2018974:	10c00117 	ldw	r3,4(r2)
 2018978:	e0bffc17 	ldw	r2,-16(fp)
 201897c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2018980:	e0bfff17 	ldw	r2,-4(fp)
 2018984:	10000005 	stb	zero,0(r2)
 2018988:	00000406 	br	201899c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 201898c:	e0bfff17 	ldw	r2,-4(fp)
 2018990:	00c007c4 	movi	r3,31
 2018994:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2018998:	e03ff915 	stw	zero,-28(fp)
 201899c:	e0bffa17 	ldw	r2,-24(fp)
 20189a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20189a4:	e0bffb17 	ldw	r2,-20(fp)
 20189a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 20189ac:	e0bff917 	ldw	r2,-28(fp)
}
 20189b0:	e037883a 	mov	sp,fp
 20189b4:	df000017 	ldw	fp,0(sp)
 20189b8:	dec00104 	addi	sp,sp,4
 20189bc:	f800283a 	ret

020189c0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 20189c0:	defff404 	addi	sp,sp,-48
 20189c4:	dfc00b15 	stw	ra,44(sp)
 20189c8:	df000a15 	stw	fp,40(sp)
 20189cc:	df000a04 	addi	fp,sp,40
 20189d0:	e13ffe15 	stw	r4,-8(fp)
 20189d4:	2805883a 	mov	r2,r5
 20189d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20189dc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20189e0:	d0a74503 	ldbu	r2,-25324(gp)
 20189e4:	10803fcc 	andi	r2,r2,255
 20189e8:	10000226 	beq	r2,zero,20189f4 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 20189ec:	0005883a 	mov	r2,zero
 20189f0:	00005906 	br	2018b58 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20189f4:	0005303a 	rdctl	r2,status
 20189f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20189fc:	e0fffd17 	ldw	r3,-12(fp)
 2018a00:	00bfff84 	movi	r2,-2
 2018a04:	1884703a 	and	r2,r3,r2
 2018a08:	1001703a 	wrctl	status,r2
  
  return context;
 2018a0c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2018a10:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2018a14:	d0a74417 	ldw	r2,-25328(gp)
 2018a18:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2018a1c:	d0a74417 	ldw	r2,-25328(gp)
 2018a20:	10000326 	beq	r2,zero,2018a30 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2018a24:	d0a74417 	ldw	r2,-25328(gp)
 2018a28:	10800117 	ldw	r2,4(r2)
 2018a2c:	d0a74415 	stw	r2,-25328(gp)
 2018a30:	e0bff717 	ldw	r2,-36(fp)
 2018a34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018a38:	e0bff817 	ldw	r2,-32(fp)
 2018a3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2018a40:	e0bff617 	ldw	r2,-40(fp)
 2018a44:	10004326 	beq	r2,zero,2018b54 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018a48:	0005303a 	rdctl	r2,status
 2018a4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018a50:	e0fff917 	ldw	r3,-28(fp)
 2018a54:	00bfff84 	movi	r2,-2
 2018a58:	1884703a 	and	r2,r3,r2
 2018a5c:	1001703a 	wrctl	status,r2
  
  return context;
 2018a60:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 2018a64:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 2018a68:	d0a74217 	ldw	r2,-25336(gp)
 2018a6c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 2018a70:	e0bffb17 	ldw	r2,-20(fp)
 2018a74:	10002d26 	beq	r2,zero,2018b2c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 2018a78:	d0a74217 	ldw	r2,-25336(gp)
 2018a7c:	10800017 	ldw	r2,0(r2)
 2018a80:	d0a74215 	stw	r2,-25336(gp)
 2018a84:	e0bff717 	ldw	r2,-36(fp)
 2018a88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018a8c:	e0bffa17 	ldw	r2,-24(fp)
 2018a90:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2018a94:	e0bffb17 	ldw	r2,-20(fp)
 2018a98:	e0fffe17 	ldw	r3,-8(fp)
 2018a9c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 2018aa0:	e0bfff0b 	ldhu	r2,-4(fp)
 2018aa4:	1085883a 	add	r2,r2,r2
 2018aa8:	1085883a 	add	r2,r2,r2
 2018aac:	1007883a 	mov	r3,r2
 2018ab0:	e0bffe17 	ldw	r2,-8(fp)
 2018ab4:	10c7883a 	add	r3,r2,r3
 2018ab8:	e0bffb17 	ldw	r2,-20(fp)
 2018abc:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2018ac0:	e0bffb17 	ldw	r2,-20(fp)
 2018ac4:	e0fffe17 	ldw	r3,-8(fp)
 2018ac8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 2018acc:	e0bffb17 	ldw	r2,-20(fp)
 2018ad0:	e0fffe17 	ldw	r3,-8(fp)
 2018ad4:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 2018ad8:	e0bffb17 	ldw	r2,-20(fp)
 2018adc:	e0ffff0b 	ldhu	r3,-4(fp)
 2018ae0:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 2018ae4:	e0bffb17 	ldw	r2,-20(fp)
 2018ae8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2018aec:	e0bff617 	ldw	r2,-40(fp)
 2018af0:	00c00084 	movi	r3,2
 2018af4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 2018af8:	e0bff617 	ldw	r2,-40(fp)
 2018afc:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2018b00:	e0bff617 	ldw	r2,-40(fp)
 2018b04:	e0fffb17 	ldw	r3,-20(fp)
 2018b08:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2018b0c:	e0bff617 	ldw	r2,-40(fp)
 2018b10:	00c00fc4 	movi	r3,63
 2018b14:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2018b18:	e0bff617 	ldw	r2,-40(fp)
 2018b1c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2018b20:	e13ff617 	ldw	r4,-40(fp)
 2018b24:	20152500 	call	2015250 <OS_EventWaitListInit>
 2018b28:	00000a06 	br	2018b54 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2018b2c:	d0e74417 	ldw	r3,-25328(gp)
 2018b30:	e0bff617 	ldw	r2,-40(fp)
 2018b34:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2018b38:	e0bff617 	ldw	r2,-40(fp)
 2018b3c:	d0a74415 	stw	r2,-25328(gp)
 2018b40:	e0bff717 	ldw	r2,-36(fp)
 2018b44:	e0bffc15 	stw	r2,-16(fp)
 2018b48:	e0bffc17 	ldw	r2,-16(fp)
 2018b4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 2018b50:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 2018b54:	e0bff617 	ldw	r2,-40(fp)
}
 2018b58:	e037883a 	mov	sp,fp
 2018b5c:	dfc00117 	ldw	ra,4(sp)
 2018b60:	df000017 	ldw	fp,0(sp)
 2018b64:	dec00204 	addi	sp,sp,8
 2018b68:	f800283a 	ret

02018b6c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2018b6c:	defff204 	addi	sp,sp,-56
 2018b70:	dfc00d15 	stw	ra,52(sp)
 2018b74:	df000c15 	stw	fp,48(sp)
 2018b78:	df000c04 	addi	fp,sp,48
 2018b7c:	e13ffd15 	stw	r4,-12(fp)
 2018b80:	2805883a 	mov	r2,r5
 2018b84:	e1bfff15 	stw	r6,-4(fp)
 2018b88:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2018b8c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2018b90:	e0bfff17 	ldw	r2,-4(fp)
 2018b94:	1000021e 	bne	r2,zero,2018ba0 <OSQDel+0x34>
        return (pevent);
 2018b98:	e0bffd17 	ldw	r2,-12(fp)
 2018b9c:	00008e06 	br	2018dd8 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2018ba0:	e0bffd17 	ldw	r2,-12(fp)
 2018ba4:	1000051e 	bne	r2,zero,2018bbc <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2018ba8:	e0bfff17 	ldw	r2,-4(fp)
 2018bac:	00c00104 	movi	r3,4
 2018bb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018bb4:	e0bffd17 	ldw	r2,-12(fp)
 2018bb8:	00008706 	br	2018dd8 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2018bbc:	e0bffd17 	ldw	r2,-12(fp)
 2018bc0:	10800003 	ldbu	r2,0(r2)
 2018bc4:	10803fcc 	andi	r2,r2,255
 2018bc8:	108000a0 	cmpeqi	r2,r2,2
 2018bcc:	1000051e 	bne	r2,zero,2018be4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2018bd0:	e0bfff17 	ldw	r2,-4(fp)
 2018bd4:	00c00044 	movi	r3,1
 2018bd8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018bdc:	e0bffd17 	ldw	r2,-12(fp)
 2018be0:	00007d06 	br	2018dd8 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2018be4:	d0a74503 	ldbu	r2,-25324(gp)
 2018be8:	10803fcc 	andi	r2,r2,255
 2018bec:	10000526 	beq	r2,zero,2018c04 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2018bf0:	e0bfff17 	ldw	r2,-4(fp)
 2018bf4:	00c003c4 	movi	r3,15
 2018bf8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2018bfc:	e0bffd17 	ldw	r2,-12(fp)
 2018c00:	00007506 	br	2018dd8 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018c04:	0005303a 	rdctl	r2,status
 2018c08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018c0c:	e0fffc17 	ldw	r3,-16(fp)
 2018c10:	00bfff84 	movi	r2,-2
 2018c14:	1884703a 	and	r2,r3,r2
 2018c18:	1001703a 	wrctl	status,r2
  
  return context;
 2018c1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018c20:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2018c24:	e0bffd17 	ldw	r2,-12(fp)
 2018c28:	10800283 	ldbu	r2,10(r2)
 2018c2c:	10803fcc 	andi	r2,r2,255
 2018c30:	10000326 	beq	r2,zero,2018c40 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2018c34:	00800044 	movi	r2,1
 2018c38:	e0bff405 	stb	r2,-48(fp)
 2018c3c:	00000106 	br	2018c44 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2018c40:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2018c44:	e0bffe03 	ldbu	r2,-8(fp)
 2018c48:	10000326 	beq	r2,zero,2018c58 <OSQDel+0xec>
 2018c4c:	10800060 	cmpeqi	r2,r2,1
 2018c50:	1000301e 	bne	r2,zero,2018d14 <OSQDel+0x1a8>
 2018c54:	00005506 	br	2018dac <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2018c58:	e0bff403 	ldbu	r2,-48(fp)
 2018c5c:	10001e1e 	bne	r2,zero,2018cd8 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2018c60:	e0bffd17 	ldw	r2,-12(fp)
 2018c64:	00c00fc4 	movi	r3,63
 2018c68:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2018c6c:	e0bffd17 	ldw	r2,-12(fp)
 2018c70:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2018c74:	e0bffd17 	ldw	r2,-12(fp)
 2018c78:	10800117 	ldw	r2,4(r2)
 2018c7c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2018c80:	d0e74217 	ldw	r3,-25336(gp)
 2018c84:	e0bff817 	ldw	r2,-32(fp)
 2018c88:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2018c8c:	e0bff817 	ldw	r2,-32(fp)
 2018c90:	d0a74215 	stw	r2,-25336(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2018c94:	e0bffd17 	ldw	r2,-12(fp)
 2018c98:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2018c9c:	d0e74417 	ldw	r3,-25328(gp)
 2018ca0:	e0bffd17 	ldw	r2,-12(fp)
 2018ca4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2018ca8:	e0bffd17 	ldw	r2,-12(fp)
 2018cac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2018cb0:	e0bffd17 	ldw	r2,-12(fp)
 2018cb4:	d0a74415 	stw	r2,-25328(gp)
 2018cb8:	e0bff617 	ldw	r2,-40(fp)
 2018cbc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018cc0:	e0bff717 	ldw	r2,-36(fp)
 2018cc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2018cc8:	e0bfff17 	ldw	r2,-4(fp)
 2018ccc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2018cd0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2018cd4:	00003f06 	br	2018dd4 <OSQDel+0x268>
 2018cd8:	e0bff617 	ldw	r2,-40(fp)
 2018cdc:	e0bff915 	stw	r2,-28(fp)
 2018ce0:	e0bff917 	ldw	r2,-28(fp)
 2018ce4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2018ce8:	e0bfff17 	ldw	r2,-4(fp)
 2018cec:	00c01244 	movi	r3,73
 2018cf0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2018cf4:	e0bffd17 	ldw	r2,-12(fp)
 2018cf8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 2018cfc:	00003506 	br	2018dd4 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2018d00:	000f883a 	mov	r7,zero
 2018d04:	01800104 	movi	r6,4
 2018d08:	000b883a 	mov	r5,zero
 2018d0c:	e13ffd17 	ldw	r4,-12(fp)
 2018d10:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2018d14:	e0bffd17 	ldw	r2,-12(fp)
 2018d18:	10800283 	ldbu	r2,10(r2)
 2018d1c:	10803fcc 	andi	r2,r2,255
 2018d20:	103ff71e 	bne	r2,zero,2018d00 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2018d24:	e0bffd17 	ldw	r2,-12(fp)
 2018d28:	00c00fc4 	movi	r3,63
 2018d2c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2018d30:	e0bffd17 	ldw	r2,-12(fp)
 2018d34:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 2018d38:	e0bffd17 	ldw	r2,-12(fp)
 2018d3c:	10800117 	ldw	r2,4(r2)
 2018d40:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 2018d44:	d0e74217 	ldw	r3,-25336(gp)
 2018d48:	e0bff817 	ldw	r2,-32(fp)
 2018d4c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2018d50:	e0bff817 	ldw	r2,-32(fp)
 2018d54:	d0a74215 	stw	r2,-25336(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2018d58:	e0bffd17 	ldw	r2,-12(fp)
 2018d5c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2018d60:	d0e74417 	ldw	r3,-25328(gp)
 2018d64:	e0bffd17 	ldw	r2,-12(fp)
 2018d68:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2018d6c:	e0bffd17 	ldw	r2,-12(fp)
 2018d70:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2018d74:	e0bffd17 	ldw	r2,-12(fp)
 2018d78:	d0a74415 	stw	r2,-25328(gp)
 2018d7c:	e0bff617 	ldw	r2,-40(fp)
 2018d80:	e0bffa15 	stw	r2,-24(fp)
 2018d84:	e0bffa17 	ldw	r2,-24(fp)
 2018d88:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2018d8c:	e0bff403 	ldbu	r2,-48(fp)
 2018d90:	10800058 	cmpnei	r2,r2,1
 2018d94:	1000011e 	bne	r2,zero,2018d9c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2018d98:	20156ec0 	call	20156ec <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2018d9c:	e0bfff17 	ldw	r2,-4(fp)
 2018da0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2018da4:	e03ff515 	stw	zero,-44(fp)
             break;
 2018da8:	00000a06 	br	2018dd4 <OSQDel+0x268>
 2018dac:	e0bff617 	ldw	r2,-40(fp)
 2018db0:	e0bffb15 	stw	r2,-20(fp)
 2018db4:	e0bffb17 	ldw	r2,-20(fp)
 2018db8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2018dbc:	e0bfff17 	ldw	r2,-4(fp)
 2018dc0:	00c001c4 	movi	r3,7
 2018dc4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2018dc8:	e0bffd17 	ldw	r2,-12(fp)
 2018dcc:	e0bff515 	stw	r2,-44(fp)
             break;
 2018dd0:	0001883a 	nop
    }
    return (pevent_return);
 2018dd4:	e0bff517 	ldw	r2,-44(fp)
}
 2018dd8:	e037883a 	mov	sp,fp
 2018ddc:	dfc00117 	ldw	ra,4(sp)
 2018de0:	df000017 	ldw	fp,0(sp)
 2018de4:	dec00204 	addi	sp,sp,8
 2018de8:	f800283a 	ret

02018dec <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2018dec:	defffa04 	addi	sp,sp,-24
 2018df0:	df000515 	stw	fp,20(sp)
 2018df4:	df000504 	addi	fp,sp,20
 2018df8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018dfc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2018e00:	e0bfff17 	ldw	r2,-4(fp)
 2018e04:	1000021e 	bne	r2,zero,2018e10 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 2018e08:	00800104 	movi	r2,4
 2018e0c:	00002106 	br	2018e94 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2018e10:	e0bfff17 	ldw	r2,-4(fp)
 2018e14:	10800003 	ldbu	r2,0(r2)
 2018e18:	10803fcc 	andi	r2,r2,255
 2018e1c:	108000a0 	cmpeqi	r2,r2,2
 2018e20:	1000021e 	bne	r2,zero,2018e2c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 2018e24:	00800044 	movi	r2,1
 2018e28:	00001a06 	br	2018e94 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018e2c:	0005303a 	rdctl	r2,status
 2018e30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018e34:	e0fffd17 	ldw	r3,-12(fp)
 2018e38:	00bfff84 	movi	r2,-2
 2018e3c:	1884703a 	and	r2,r3,r2
 2018e40:	1001703a 	wrctl	status,r2
  
  return context;
 2018e44:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018e48:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2018e4c:	e0bfff17 	ldw	r2,-4(fp)
 2018e50:	10800117 	ldw	r2,4(r2)
 2018e54:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 2018e58:	e0bffc17 	ldw	r2,-16(fp)
 2018e5c:	10c00117 	ldw	r3,4(r2)
 2018e60:	e0bffc17 	ldw	r2,-16(fp)
 2018e64:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2018e68:	e0bffc17 	ldw	r2,-16(fp)
 2018e6c:	10c00117 	ldw	r3,4(r2)
 2018e70:	e0bffc17 	ldw	r2,-16(fp)
 2018e74:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2018e78:	e0bffc17 	ldw	r2,-16(fp)
 2018e7c:	1000058d 	sth	zero,22(r2)
 2018e80:	e0bffb17 	ldw	r2,-20(fp)
 2018e84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018e88:	e0bffe17 	ldw	r2,-8(fp)
 2018e8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2018e90:	0005883a 	mov	r2,zero
}
 2018e94:	e037883a 	mov	sp,fp
 2018e98:	df000017 	ldw	fp,0(sp)
 2018e9c:	dec00104 	addi	sp,sp,4
 2018ea0:	f800283a 	ret

02018ea4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2018ea4:	defff304 	addi	sp,sp,-52
 2018ea8:	dfc00c15 	stw	ra,48(sp)
 2018eac:	df000b15 	stw	fp,44(sp)
 2018eb0:	df000b04 	addi	fp,sp,44
 2018eb4:	e13ffd15 	stw	r4,-12(fp)
 2018eb8:	2805883a 	mov	r2,r5
 2018ebc:	e1bfff15 	stw	r6,-4(fp)
 2018ec0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018ec4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018ec8:	e0bfff17 	ldw	r2,-4(fp)
 2018ecc:	1000021e 	bne	r2,zero,2018ed8 <OSQPend+0x34>
        return ((void *)0);
 2018ed0:	0005883a 	mov	r2,zero
 2018ed4:	00009106 	br	201911c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2018ed8:	e0bffd17 	ldw	r2,-12(fp)
 2018edc:	1000051e 	bne	r2,zero,2018ef4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2018ee0:	e0bfff17 	ldw	r2,-4(fp)
 2018ee4:	00c00104 	movi	r3,4
 2018ee8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018eec:	0005883a 	mov	r2,zero
 2018ef0:	00008a06 	br	201911c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2018ef4:	e0bffd17 	ldw	r2,-12(fp)
 2018ef8:	10800003 	ldbu	r2,0(r2)
 2018efc:	10803fcc 	andi	r2,r2,255
 2018f00:	108000a0 	cmpeqi	r2,r2,2
 2018f04:	1000051e 	bne	r2,zero,2018f1c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2018f08:	e0bfff17 	ldw	r2,-4(fp)
 2018f0c:	00c00044 	movi	r3,1
 2018f10:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018f14:	0005883a 	mov	r2,zero
 2018f18:	00008006 	br	201911c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2018f1c:	d0a74503 	ldbu	r2,-25324(gp)
 2018f20:	10803fcc 	andi	r2,r2,255
 2018f24:	10000526 	beq	r2,zero,2018f3c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 2018f28:	e0bfff17 	ldw	r2,-4(fp)
 2018f2c:	00c00084 	movi	r3,2
 2018f30:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018f34:	0005883a 	mov	r2,zero
 2018f38:	00007806 	br	201911c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 2018f3c:	d0a73703 	ldbu	r2,-25380(gp)
 2018f40:	10803fcc 	andi	r2,r2,255
 2018f44:	10000526 	beq	r2,zero,2018f5c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 2018f48:	e0bfff17 	ldw	r2,-4(fp)
 2018f4c:	00c00344 	movi	r3,13
 2018f50:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2018f54:	0005883a 	mov	r2,zero
 2018f58:	00007006 	br	201911c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018f5c:	0005303a 	rdctl	r2,status
 2018f60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018f64:	e0fffc17 	ldw	r3,-16(fp)
 2018f68:	00bfff84 	movi	r2,-2
 2018f6c:	1884703a 	and	r2,r3,r2
 2018f70:	1001703a 	wrctl	status,r2
  
  return context;
 2018f74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2018f78:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2018f7c:	e0bffd17 	ldw	r2,-12(fp)
 2018f80:	10800117 	ldw	r2,4(r2)
 2018f84:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2018f88:	e0bff817 	ldw	r2,-32(fp)
 2018f8c:	1080058b 	ldhu	r2,22(r2)
 2018f90:	10bfffcc 	andi	r2,r2,65535
 2018f94:	10001e26 	beq	r2,zero,2019010 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2018f98:	e0bff817 	ldw	r2,-32(fp)
 2018f9c:	10800417 	ldw	r2,16(r2)
 2018fa0:	11000104 	addi	r4,r2,4
 2018fa4:	e0fff817 	ldw	r3,-32(fp)
 2018fa8:	19000415 	stw	r4,16(r3)
 2018fac:	10800017 	ldw	r2,0(r2)
 2018fb0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2018fb4:	e0bff817 	ldw	r2,-32(fp)
 2018fb8:	1080058b 	ldhu	r2,22(r2)
 2018fbc:	10bfffc4 	addi	r2,r2,-1
 2018fc0:	1007883a 	mov	r3,r2
 2018fc4:	e0bff817 	ldw	r2,-32(fp)
 2018fc8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2018fcc:	e0bff817 	ldw	r2,-32(fp)
 2018fd0:	10c00417 	ldw	r3,16(r2)
 2018fd4:	e0bff817 	ldw	r2,-32(fp)
 2018fd8:	10800217 	ldw	r2,8(r2)
 2018fdc:	1880041e 	bne	r3,r2,2018ff0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 2018fe0:	e0bff817 	ldw	r2,-32(fp)
 2018fe4:	10c00117 	ldw	r3,4(r2)
 2018fe8:	e0bff817 	ldw	r2,-32(fp)
 2018fec:	10c00415 	stw	r3,16(r2)
 2018ff0:	e0bff617 	ldw	r2,-40(fp)
 2018ff4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018ff8:	e0bff717 	ldw	r2,-36(fp)
 2018ffc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2019000:	e0bfff17 	ldw	r2,-4(fp)
 2019004:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 2019008:	e0bff517 	ldw	r2,-44(fp)
 201900c:	00004306 	br	201911c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2019010:	d0a74617 	ldw	r2,-25320(gp)
 2019014:	d0e74617 	ldw	r3,-25320(gp)
 2019018:	18c00c03 	ldbu	r3,48(r3)
 201901c:	18c00114 	ori	r3,r3,4
 2019020:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2019024:	d0a74617 	ldw	r2,-25320(gp)
 2019028:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 201902c:	d0a74617 	ldw	r2,-25320(gp)
 2019030:	e0fffe0b 	ldhu	r3,-8(fp)
 2019034:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 2019038:	e13ffd17 	ldw	r4,-12(fp)
 201903c:	2014e380 	call	2014e38 <OS_EventTaskWait>
 2019040:	e0bff617 	ldw	r2,-40(fp)
 2019044:	e0bffb15 	stw	r2,-20(fp)
 2019048:	e0bffb17 	ldw	r2,-20(fp)
 201904c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2019050:	20156ec0 	call	20156ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019054:	0005303a 	rdctl	r2,status
 2019058:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201905c:	e0fff917 	ldw	r3,-28(fp)
 2019060:	00bfff84 	movi	r2,-2
 2019064:	1884703a 	and	r2,r3,r2
 2019068:	1001703a 	wrctl	status,r2
  
  return context;
 201906c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2019070:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2019074:	d0a74617 	ldw	r2,-25320(gp)
 2019078:	10800c43 	ldbu	r2,49(r2)
 201907c:	10803fcc 	andi	r2,r2,255
 2019080:	10000326 	beq	r2,zero,2019090 <OSQPend+0x1ec>
 2019084:	108000a0 	cmpeqi	r2,r2,2
 2019088:	1000071e 	bne	r2,zero,20190a8 <OSQPend+0x204>
 201908c:	00000b06 	br	20190bc <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 2019090:	d0a74617 	ldw	r2,-25320(gp)
 2019094:	10800917 	ldw	r2,36(r2)
 2019098:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 201909c:	e0bfff17 	ldw	r2,-4(fp)
 20190a0:	10000005 	stb	zero,0(r2)
             break;
 20190a4:	00000e06 	br	20190e0 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 20190a8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 20190ac:	e0bfff17 	ldw	r2,-4(fp)
 20190b0:	00c00384 	movi	r3,14
 20190b4:	10c00005 	stb	r3,0(r2)
             break;
 20190b8:	00000906 	br	20190e0 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 20190bc:	d0a74617 	ldw	r2,-25320(gp)
 20190c0:	e17ffd17 	ldw	r5,-12(fp)
 20190c4:	1009883a 	mov	r4,r2
 20190c8:	20150980 	call	2015098 <OS_EventTaskRemove>
             pmsg = (void *)0;
 20190cc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 20190d0:	e0bfff17 	ldw	r2,-4(fp)
 20190d4:	00c00284 	movi	r3,10
 20190d8:	10c00005 	stb	r3,0(r2)
             break;
 20190dc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 20190e0:	d0a74617 	ldw	r2,-25320(gp)
 20190e4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 20190e8:	d0a74617 	ldw	r2,-25320(gp)
 20190ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 20190f0:	d0a74617 	ldw	r2,-25320(gp)
 20190f4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 20190f8:	d0a74617 	ldw	r2,-25320(gp)
 20190fc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2019100:	d0a74617 	ldw	r2,-25320(gp)
 2019104:	10000915 	stw	zero,36(r2)
 2019108:	e0bff617 	ldw	r2,-40(fp)
 201910c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019110:	e0bffa17 	ldw	r2,-24(fp)
 2019114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2019118:	e0bff517 	ldw	r2,-44(fp)
}
 201911c:	e037883a 	mov	sp,fp
 2019120:	dfc00117 	ldw	ra,4(sp)
 2019124:	df000017 	ldw	fp,0(sp)
 2019128:	dec00204 	addi	sp,sp,8
 201912c:	f800283a 	ret

02019130 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2019130:	defff604 	addi	sp,sp,-40
 2019134:	dfc00915 	stw	ra,36(sp)
 2019138:	df000815 	stw	fp,32(sp)
 201913c:	df000804 	addi	fp,sp,32
 2019140:	e13ffd15 	stw	r4,-12(fp)
 2019144:	2805883a 	mov	r2,r5
 2019148:	e1bfff15 	stw	r6,-4(fp)
 201914c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2019150:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019154:	e0bfff17 	ldw	r2,-4(fp)
 2019158:	1000021e 	bne	r2,zero,2019164 <OSQPendAbort+0x34>
        return (0);
 201915c:	0005883a 	mov	r2,zero
 2019160:	00004906 	br	2019288 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2019164:	e0bffd17 	ldw	r2,-12(fp)
 2019168:	1000051e 	bne	r2,zero,2019180 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201916c:	e0bfff17 	ldw	r2,-4(fp)
 2019170:	00c00104 	movi	r3,4
 2019174:	10c00005 	stb	r3,0(r2)
        return (0);
 2019178:	0005883a 	mov	r2,zero
 201917c:	00004206 	br	2019288 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2019180:	e0bffd17 	ldw	r2,-12(fp)
 2019184:	10800003 	ldbu	r2,0(r2)
 2019188:	10803fcc 	andi	r2,r2,255
 201918c:	108000a0 	cmpeqi	r2,r2,2
 2019190:	1000051e 	bne	r2,zero,20191a8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2019194:	e0bfff17 	ldw	r2,-4(fp)
 2019198:	00c00044 	movi	r3,1
 201919c:	10c00005 	stb	r3,0(r2)
        return (0);
 20191a0:	0005883a 	mov	r2,zero
 20191a4:	00003806 	br	2019288 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20191a8:	0005303a 	rdctl	r2,status
 20191ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20191b0:	e0fffc17 	ldw	r3,-16(fp)
 20191b4:	00bfff84 	movi	r2,-2
 20191b8:	1884703a 	and	r2,r3,r2
 20191bc:	1001703a 	wrctl	status,r2
  
  return context;
 20191c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20191c4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 20191c8:	e0bffd17 	ldw	r2,-12(fp)
 20191cc:	10800283 	ldbu	r2,10(r2)
 20191d0:	10803fcc 	andi	r2,r2,255
 20191d4:	10002526 	beq	r2,zero,201926c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 20191d8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 20191dc:	e0bffe03 	ldbu	r2,-8(fp)
 20191e0:	10800060 	cmpeqi	r2,r2,1
 20191e4:	10000e26 	beq	r2,zero,2019220 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 20191e8:	00000806 	br	201920c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20191ec:	01c00084 	movi	r7,2
 20191f0:	01800104 	movi	r6,4
 20191f4:	000b883a 	mov	r5,zero
 20191f8:	e13ffd17 	ldw	r4,-12(fp)
 20191fc:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                     nbr_tasks++;
 2019200:	e0bff803 	ldbu	r2,-32(fp)
 2019204:	10800044 	addi	r2,r2,1
 2019208:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201920c:	e0bffd17 	ldw	r2,-12(fp)
 2019210:	10800283 	ldbu	r2,10(r2)
 2019214:	10803fcc 	andi	r2,r2,255
 2019218:	103ff41e 	bne	r2,zero,20191ec <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201921c:	00000906 	br	2019244 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2019220:	01c00084 	movi	r7,2
 2019224:	01800104 	movi	r6,4
 2019228:	000b883a 	mov	r5,zero
 201922c:	e13ffd17 	ldw	r4,-12(fp)
 2019230:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                 nbr_tasks++;
 2019234:	e0bff803 	ldbu	r2,-32(fp)
 2019238:	10800044 	addi	r2,r2,1
 201923c:	e0bff805 	stb	r2,-32(fp)
                 break;
 2019240:	0001883a 	nop
 2019244:	e0bff917 	ldw	r2,-28(fp)
 2019248:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201924c:	e0bffa17 	ldw	r2,-24(fp)
 2019250:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2019254:	20156ec0 	call	20156ec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2019258:	e0bfff17 	ldw	r2,-4(fp)
 201925c:	00c00384 	movi	r3,14
 2019260:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2019264:	e0bff803 	ldbu	r2,-32(fp)
 2019268:	00000706 	br	2019288 <OSQPendAbort+0x158>
 201926c:	e0bff917 	ldw	r2,-28(fp)
 2019270:	e0bffb15 	stw	r2,-20(fp)
 2019274:	e0bffb17 	ldw	r2,-20(fp)
 2019278:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201927c:	e0bfff17 	ldw	r2,-4(fp)
 2019280:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2019284:	0005883a 	mov	r2,zero
}
 2019288:	e037883a 	mov	sp,fp
 201928c:	dfc00117 	ldw	ra,4(sp)
 2019290:	df000017 	ldw	fp,0(sp)
 2019294:	dec00204 	addi	sp,sp,8
 2019298:	f800283a 	ret

0201929c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 201929c:	defff604 	addi	sp,sp,-40
 20192a0:	dfc00915 	stw	ra,36(sp)
 20192a4:	df000815 	stw	fp,32(sp)
 20192a8:	df000804 	addi	fp,sp,32
 20192ac:	e13ffe15 	stw	r4,-8(fp)
 20192b0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20192b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 20192b8:	e0bffe17 	ldw	r2,-8(fp)
 20192bc:	1000021e 	bne	r2,zero,20192c8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 20192c0:	00800104 	movi	r2,4
 20192c4:	00004a06 	br	20193f0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 20192c8:	e0bffe17 	ldw	r2,-8(fp)
 20192cc:	10800003 	ldbu	r2,0(r2)
 20192d0:	10803fcc 	andi	r2,r2,255
 20192d4:	108000a0 	cmpeqi	r2,r2,2
 20192d8:	1000021e 	bne	r2,zero,20192e4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 20192dc:	00800044 	movi	r2,1
 20192e0:	00004306 	br	20193f0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20192e4:	0005303a 	rdctl	r2,status
 20192e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20192ec:	e0fffd17 	ldw	r3,-12(fp)
 20192f0:	00bfff84 	movi	r2,-2
 20192f4:	1884703a 	and	r2,r3,r2
 20192f8:	1001703a 	wrctl	status,r2
  
  return context;
 20192fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2019300:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 2019304:	e0bffe17 	ldw	r2,-8(fp)
 2019308:	10800283 	ldbu	r2,10(r2)
 201930c:	10803fcc 	andi	r2,r2,255
 2019310:	10000c26 	beq	r2,zero,2019344 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2019314:	000f883a 	mov	r7,zero
 2019318:	01800104 	movi	r6,4
 201931c:	e17fff17 	ldw	r5,-4(fp)
 2019320:	e13ffe17 	ldw	r4,-8(fp)
 2019324:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
 2019328:	e0bff817 	ldw	r2,-32(fp)
 201932c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019330:	e0bff917 	ldw	r2,-28(fp)
 2019334:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 2019338:	20156ec0 	call	20156ec <OS_Sched>
        return (OS_ERR_NONE);
 201933c:	0005883a 	mov	r2,zero
 2019340:	00002b06 	br	20193f0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 2019344:	e0bffe17 	ldw	r2,-8(fp)
 2019348:	10800117 	ldw	r2,4(r2)
 201934c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 2019350:	e0bffb17 	ldw	r2,-20(fp)
 2019354:	10c0058b 	ldhu	r3,22(r2)
 2019358:	e0bffb17 	ldw	r2,-20(fp)
 201935c:	1080050b 	ldhu	r2,20(r2)
 2019360:	18ffffcc 	andi	r3,r3,65535
 2019364:	10bfffcc 	andi	r2,r2,65535
 2019368:	18800636 	bltu	r3,r2,2019384 <OSQPost+0xe8>
 201936c:	e0bff817 	ldw	r2,-32(fp)
 2019370:	e0bffa15 	stw	r2,-24(fp)
 2019374:	e0bffa17 	ldw	r2,-24(fp)
 2019378:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201937c:	00800784 	movi	r2,30
 2019380:	00001b06 	br	20193f0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2019384:	e0bffb17 	ldw	r2,-20(fp)
 2019388:	10800317 	ldw	r2,12(r2)
 201938c:	11000104 	addi	r4,r2,4
 2019390:	e0fffb17 	ldw	r3,-20(fp)
 2019394:	19000315 	stw	r4,12(r3)
 2019398:	e0ffff17 	ldw	r3,-4(fp)
 201939c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 20193a0:	e0bffb17 	ldw	r2,-20(fp)
 20193a4:	1080058b 	ldhu	r2,22(r2)
 20193a8:	10800044 	addi	r2,r2,1
 20193ac:	1007883a 	mov	r3,r2
 20193b0:	e0bffb17 	ldw	r2,-20(fp)
 20193b4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 20193b8:	e0bffb17 	ldw	r2,-20(fp)
 20193bc:	10c00317 	ldw	r3,12(r2)
 20193c0:	e0bffb17 	ldw	r2,-20(fp)
 20193c4:	10800217 	ldw	r2,8(r2)
 20193c8:	1880041e 	bne	r3,r2,20193dc <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 20193cc:	e0bffb17 	ldw	r2,-20(fp)
 20193d0:	10c00117 	ldw	r3,4(r2)
 20193d4:	e0bffb17 	ldw	r2,-20(fp)
 20193d8:	10c00315 	stw	r3,12(r2)
 20193dc:	e0bff817 	ldw	r2,-32(fp)
 20193e0:	e0bffc15 	stw	r2,-16(fp)
 20193e4:	e0bffc17 	ldw	r2,-16(fp)
 20193e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20193ec:	0005883a 	mov	r2,zero
}
 20193f0:	e037883a 	mov	sp,fp
 20193f4:	dfc00117 	ldw	ra,4(sp)
 20193f8:	df000017 	ldw	fp,0(sp)
 20193fc:	dec00204 	addi	sp,sp,8
 2019400:	f800283a 	ret

02019404 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 2019404:	defff604 	addi	sp,sp,-40
 2019408:	dfc00915 	stw	ra,36(sp)
 201940c:	df000815 	stw	fp,32(sp)
 2019410:	df000804 	addi	fp,sp,32
 2019414:	e13ffe15 	stw	r4,-8(fp)
 2019418:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201941c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019420:	e0bffe17 	ldw	r2,-8(fp)
 2019424:	1000021e 	bne	r2,zero,2019430 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2019428:	00800104 	movi	r2,4
 201942c:	00004c06 	br	2019560 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2019430:	e0bffe17 	ldw	r2,-8(fp)
 2019434:	10800003 	ldbu	r2,0(r2)
 2019438:	10803fcc 	andi	r2,r2,255
 201943c:	108000a0 	cmpeqi	r2,r2,2
 2019440:	1000021e 	bne	r2,zero,201944c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 2019444:	00800044 	movi	r2,1
 2019448:	00004506 	br	2019560 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201944c:	0005303a 	rdctl	r2,status
 2019450:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019454:	e0fffd17 	ldw	r3,-12(fp)
 2019458:	00bfff84 	movi	r2,-2
 201945c:	1884703a 	and	r2,r3,r2
 2019460:	1001703a 	wrctl	status,r2
  
  return context;
 2019464:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2019468:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 201946c:	e0bffe17 	ldw	r2,-8(fp)
 2019470:	10800283 	ldbu	r2,10(r2)
 2019474:	10803fcc 	andi	r2,r2,255
 2019478:	10000c26 	beq	r2,zero,20194ac <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201947c:	000f883a 	mov	r7,zero
 2019480:	01800104 	movi	r6,4
 2019484:	e17fff17 	ldw	r5,-4(fp)
 2019488:	e13ffe17 	ldw	r4,-8(fp)
 201948c:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
 2019490:	e0bff817 	ldw	r2,-32(fp)
 2019494:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019498:	e0bff917 	ldw	r2,-28(fp)
 201949c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 20194a0:	20156ec0 	call	20156ec <OS_Sched>
        return (OS_ERR_NONE);
 20194a4:	0005883a 	mov	r2,zero
 20194a8:	00002d06 	br	2019560 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 20194ac:	e0bffe17 	ldw	r2,-8(fp)
 20194b0:	10800117 	ldw	r2,4(r2)
 20194b4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 20194b8:	e0bffb17 	ldw	r2,-20(fp)
 20194bc:	10c0058b 	ldhu	r3,22(r2)
 20194c0:	e0bffb17 	ldw	r2,-20(fp)
 20194c4:	1080050b 	ldhu	r2,20(r2)
 20194c8:	18ffffcc 	andi	r3,r3,65535
 20194cc:	10bfffcc 	andi	r2,r2,65535
 20194d0:	18800636 	bltu	r3,r2,20194ec <OSQPostFront+0xe8>
 20194d4:	e0bff817 	ldw	r2,-32(fp)
 20194d8:	e0bffa15 	stw	r2,-24(fp)
 20194dc:	e0bffa17 	ldw	r2,-24(fp)
 20194e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20194e4:	00800784 	movi	r2,30
 20194e8:	00001d06 	br	2019560 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 20194ec:	e0bffb17 	ldw	r2,-20(fp)
 20194f0:	10c00417 	ldw	r3,16(r2)
 20194f4:	e0bffb17 	ldw	r2,-20(fp)
 20194f8:	10800117 	ldw	r2,4(r2)
 20194fc:	1880041e 	bne	r3,r2,2019510 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 2019500:	e0bffb17 	ldw	r2,-20(fp)
 2019504:	10c00217 	ldw	r3,8(r2)
 2019508:	e0bffb17 	ldw	r2,-20(fp)
 201950c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 2019510:	e0bffb17 	ldw	r2,-20(fp)
 2019514:	10800417 	ldw	r2,16(r2)
 2019518:	10ffff04 	addi	r3,r2,-4
 201951c:	e0bffb17 	ldw	r2,-20(fp)
 2019520:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 2019524:	e0bffb17 	ldw	r2,-20(fp)
 2019528:	10800417 	ldw	r2,16(r2)
 201952c:	e0ffff17 	ldw	r3,-4(fp)
 2019530:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2019534:	e0bffb17 	ldw	r2,-20(fp)
 2019538:	1080058b 	ldhu	r2,22(r2)
 201953c:	10800044 	addi	r2,r2,1
 2019540:	1007883a 	mov	r3,r2
 2019544:	e0bffb17 	ldw	r2,-20(fp)
 2019548:	10c0058d 	sth	r3,22(r2)
 201954c:	e0bff817 	ldw	r2,-32(fp)
 2019550:	e0bffc15 	stw	r2,-16(fp)
 2019554:	e0bffc17 	ldw	r2,-16(fp)
 2019558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201955c:	0005883a 	mov	r2,zero
}
 2019560:	e037883a 	mov	sp,fp
 2019564:	dfc00117 	ldw	ra,4(sp)
 2019568:	df000017 	ldw	fp,0(sp)
 201956c:	dec00204 	addi	sp,sp,8
 2019570:	f800283a 	ret

02019574 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2019574:	defff504 	addi	sp,sp,-44
 2019578:	dfc00a15 	stw	ra,40(sp)
 201957c:	df000915 	stw	fp,36(sp)
 2019580:	df000904 	addi	fp,sp,36
 2019584:	e13ffd15 	stw	r4,-12(fp)
 2019588:	e17ffe15 	stw	r5,-8(fp)
 201958c:	3005883a 	mov	r2,r6
 2019590:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019594:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019598:	e0bffd17 	ldw	r2,-12(fp)
 201959c:	1000021e 	bne	r2,zero,20195a8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 20195a0:	00800104 	movi	r2,4
 20195a4:	00007106 	br	201976c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20195a8:	e0bffd17 	ldw	r2,-12(fp)
 20195ac:	10800003 	ldbu	r2,0(r2)
 20195b0:	10803fcc 	andi	r2,r2,255
 20195b4:	108000a0 	cmpeqi	r2,r2,2
 20195b8:	1000021e 	bne	r2,zero,20195c4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 20195bc:	00800044 	movi	r2,1
 20195c0:	00006a06 	br	201976c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20195c4:	0005303a 	rdctl	r2,status
 20195c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20195cc:	e0fffc17 	ldw	r3,-16(fp)
 20195d0:	00bfff84 	movi	r2,-2
 20195d4:	1884703a 	and	r2,r3,r2
 20195d8:	1001703a 	wrctl	status,r2
  
  return context;
 20195dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20195e0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 20195e4:	e0bffd17 	ldw	r2,-12(fp)
 20195e8:	10800283 	ldbu	r2,10(r2)
 20195ec:	10803fcc 	andi	r2,r2,255
 20195f0:	10001d26 	beq	r2,zero,2019668 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 20195f4:	e0bfff03 	ldbu	r2,-4(fp)
 20195f8:	1080004c 	andi	r2,r2,1
 20195fc:	10000b26 	beq	r2,zero,201962c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2019600:	00000506 	br	2019618 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2019604:	000f883a 	mov	r7,zero
 2019608:	01800104 	movi	r6,4
 201960c:	e17ffe17 	ldw	r5,-8(fp)
 2019610:	e13ffd17 	ldw	r4,-12(fp)
 2019614:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2019618:	e0bffd17 	ldw	r2,-12(fp)
 201961c:	10800283 	ldbu	r2,10(r2)
 2019620:	10803fcc 	andi	r2,r2,255
 2019624:	103ff71e 	bne	r2,zero,2019604 <OSQPostOpt+0x90>
 2019628:	00000506 	br	2019640 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201962c:	000f883a 	mov	r7,zero
 2019630:	01800104 	movi	r6,4
 2019634:	e17ffe17 	ldw	r5,-8(fp)
 2019638:	e13ffd17 	ldw	r4,-12(fp)
 201963c:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
 2019640:	e0bff717 	ldw	r2,-36(fp)
 2019644:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019648:	e0bff817 	ldw	r2,-32(fp)
 201964c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2019650:	e0bfff03 	ldbu	r2,-4(fp)
 2019654:	1080010c 	andi	r2,r2,4
 2019658:	1000011e 	bne	r2,zero,2019660 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 201965c:	20156ec0 	call	20156ec <OS_Sched>
        }
        return (OS_ERR_NONE);
 2019660:	0005883a 	mov	r2,zero
 2019664:	00004106 	br	201976c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2019668:	e0bffd17 	ldw	r2,-12(fp)
 201966c:	10800117 	ldw	r2,4(r2)
 2019670:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2019674:	e0bffa17 	ldw	r2,-24(fp)
 2019678:	10c0058b 	ldhu	r3,22(r2)
 201967c:	e0bffa17 	ldw	r2,-24(fp)
 2019680:	1080050b 	ldhu	r2,20(r2)
 2019684:	18ffffcc 	andi	r3,r3,65535
 2019688:	10bfffcc 	andi	r2,r2,65535
 201968c:	18800636 	bltu	r3,r2,20196a8 <OSQPostOpt+0x134>
 2019690:	e0bff717 	ldw	r2,-36(fp)
 2019694:	e0bff915 	stw	r2,-28(fp)
 2019698:	e0bff917 	ldw	r2,-28(fp)
 201969c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20196a0:	00800784 	movi	r2,30
 20196a4:	00003106 	br	201976c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 20196a8:	e0bfff03 	ldbu	r2,-4(fp)
 20196ac:	1080008c 	andi	r2,r2,2
 20196b0:	10001326 	beq	r2,zero,2019700 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 20196b4:	e0bffa17 	ldw	r2,-24(fp)
 20196b8:	10c00417 	ldw	r3,16(r2)
 20196bc:	e0bffa17 	ldw	r2,-24(fp)
 20196c0:	10800117 	ldw	r2,4(r2)
 20196c4:	1880041e 	bne	r3,r2,20196d8 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 20196c8:	e0bffa17 	ldw	r2,-24(fp)
 20196cc:	10c00217 	ldw	r3,8(r2)
 20196d0:	e0bffa17 	ldw	r2,-24(fp)
 20196d4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 20196d8:	e0bffa17 	ldw	r2,-24(fp)
 20196dc:	10800417 	ldw	r2,16(r2)
 20196e0:	10ffff04 	addi	r3,r2,-4
 20196e4:	e0bffa17 	ldw	r2,-24(fp)
 20196e8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 20196ec:	e0bffa17 	ldw	r2,-24(fp)
 20196f0:	10800417 	ldw	r2,16(r2)
 20196f4:	e0fffe17 	ldw	r3,-8(fp)
 20196f8:	10c00015 	stw	r3,0(r2)
 20196fc:	00001006 	br	2019740 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2019700:	e0bffa17 	ldw	r2,-24(fp)
 2019704:	10800317 	ldw	r2,12(r2)
 2019708:	11000104 	addi	r4,r2,4
 201970c:	e0fffa17 	ldw	r3,-24(fp)
 2019710:	19000315 	stw	r4,12(r3)
 2019714:	e0fffe17 	ldw	r3,-8(fp)
 2019718:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 201971c:	e0bffa17 	ldw	r2,-24(fp)
 2019720:	10c00317 	ldw	r3,12(r2)
 2019724:	e0bffa17 	ldw	r2,-24(fp)
 2019728:	10800217 	ldw	r2,8(r2)
 201972c:	1880041e 	bne	r3,r2,2019740 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 2019730:	e0bffa17 	ldw	r2,-24(fp)
 2019734:	10c00117 	ldw	r3,4(r2)
 2019738:	e0bffa17 	ldw	r2,-24(fp)
 201973c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2019740:	e0bffa17 	ldw	r2,-24(fp)
 2019744:	1080058b 	ldhu	r2,22(r2)
 2019748:	10800044 	addi	r2,r2,1
 201974c:	1007883a 	mov	r3,r2
 2019750:	e0bffa17 	ldw	r2,-24(fp)
 2019754:	10c0058d 	sth	r3,22(r2)
 2019758:	e0bff717 	ldw	r2,-36(fp)
 201975c:	e0bffb15 	stw	r2,-20(fp)
 2019760:	e0bffb17 	ldw	r2,-20(fp)
 2019764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019768:	0005883a 	mov	r2,zero
}
 201976c:	e037883a 	mov	sp,fp
 2019770:	dfc00117 	ldw	ra,4(sp)
 2019774:	df000017 	ldw	fp,0(sp)
 2019778:	dec00204 	addi	sp,sp,8
 201977c:	f800283a 	ret

02019780 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2019780:	defff604 	addi	sp,sp,-40
 2019784:	df000915 	stw	fp,36(sp)
 2019788:	df000904 	addi	fp,sp,36
 201978c:	e13ffe15 	stw	r4,-8(fp)
 2019790:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2019794:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2019798:	e0bffe17 	ldw	r2,-8(fp)
 201979c:	1000021e 	bne	r2,zero,20197a8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 20197a0:	00800104 	movi	r2,4
 20197a4:	00004906 	br	20198cc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 20197a8:	e0bfff17 	ldw	r2,-4(fp)
 20197ac:	1000021e 	bne	r2,zero,20197b8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 20197b0:	00800244 	movi	r2,9
 20197b4:	00004506 	br	20198cc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 20197b8:	e0bffe17 	ldw	r2,-8(fp)
 20197bc:	10800003 	ldbu	r2,0(r2)
 20197c0:	10803fcc 	andi	r2,r2,255
 20197c4:	108000a0 	cmpeqi	r2,r2,2
 20197c8:	1000021e 	bne	r2,zero,20197d4 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 20197cc:	00800044 	movi	r2,1
 20197d0:	00003e06 	br	20198cc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20197d4:	0005303a 	rdctl	r2,status
 20197d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20197dc:	e0fffd17 	ldw	r3,-12(fp)
 20197e0:	00bfff84 	movi	r2,-2
 20197e4:	1884703a 	and	r2,r3,r2
 20197e8:	1001703a 	wrctl	status,r2
  
  return context;
 20197ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20197f0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 20197f4:	e0bffe17 	ldw	r2,-8(fp)
 20197f8:	10c00283 	ldbu	r3,10(r2)
 20197fc:	e0bfff17 	ldw	r2,-4(fp)
 2019800:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 2019804:	e0bffe17 	ldw	r2,-8(fp)
 2019808:	108002c4 	addi	r2,r2,11
 201980c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2019810:	e0bfff17 	ldw	r2,-4(fp)
 2019814:	10800204 	addi	r2,r2,8
 2019818:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201981c:	e03ff705 	stb	zero,-36(fp)
 2019820:	00000b06 	br	2019850 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 2019824:	e0bff917 	ldw	r2,-28(fp)
 2019828:	10c00044 	addi	r3,r2,1
 201982c:	e0fff915 	stw	r3,-28(fp)
 2019830:	e0fff817 	ldw	r3,-32(fp)
 2019834:	19000044 	addi	r4,r3,1
 2019838:	e13ff815 	stw	r4,-32(fp)
 201983c:	18c00003 	ldbu	r3,0(r3)
 2019840:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2019844:	e0bff703 	ldbu	r2,-36(fp)
 2019848:	10800044 	addi	r2,r2,1
 201984c:	e0bff705 	stb	r2,-36(fp)
 2019850:	e0bff703 	ldbu	r2,-36(fp)
 2019854:	108000f0 	cmpltui	r2,r2,3
 2019858:	103ff21e 	bne	r2,zero,2019824 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 201985c:	e0bffe17 	ldw	r2,-8(fp)
 2019860:	10800117 	ldw	r2,4(r2)
 2019864:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 2019868:	e0bffc17 	ldw	r2,-16(fp)
 201986c:	1080058b 	ldhu	r2,22(r2)
 2019870:	10bfffcc 	andi	r2,r2,65535
 2019874:	10000626 	beq	r2,zero,2019890 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2019878:	e0bffc17 	ldw	r2,-16(fp)
 201987c:	10800417 	ldw	r2,16(r2)
 2019880:	10c00017 	ldw	r3,0(r2)
 2019884:	e0bfff17 	ldw	r2,-4(fp)
 2019888:	10c00015 	stw	r3,0(r2)
 201988c:	00000206 	br	2019898 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 2019890:	e0bfff17 	ldw	r2,-4(fp)
 2019894:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 2019898:	e0bffc17 	ldw	r2,-16(fp)
 201989c:	10c0058b 	ldhu	r3,22(r2)
 20198a0:	e0bfff17 	ldw	r2,-4(fp)
 20198a4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 20198a8:	e0bffc17 	ldw	r2,-16(fp)
 20198ac:	10c0050b 	ldhu	r3,20(r2)
 20198b0:	e0bfff17 	ldw	r2,-4(fp)
 20198b4:	10c0018d 	sth	r3,6(r2)
 20198b8:	e0bffa17 	ldw	r2,-24(fp)
 20198bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20198c0:	e0bffb17 	ldw	r2,-20(fp)
 20198c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20198c8:	0005883a 	mov	r2,zero
}
 20198cc:	e037883a 	mov	sp,fp
 20198d0:	df000017 	ldw	fp,0(sp)
 20198d4:	dec00104 	addi	sp,sp,4
 20198d8:	f800283a 	ret

020198dc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 20198dc:	defffb04 	addi	sp,sp,-20
 20198e0:	dfc00415 	stw	ra,16(sp)
 20198e4:	df000315 	stw	fp,12(sp)
 20198e8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 20198ec:	01407804 	movi	r5,480
 20198f0:	010080f4 	movhi	r4,515
 20198f4:	212f5e04 	addi	r4,r4,-17032
 20198f8:	20156300 	call	2015630 <OS_MemClr>
    pq1 = &OSQTbl[0];
 20198fc:	008080f4 	movhi	r2,515
 2019900:	10af5e04 	addi	r2,r2,-17032
 2019904:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2019908:	008080f4 	movhi	r2,515
 201990c:	10af6404 	addi	r2,r2,-17008
 2019910:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2019914:	e03ffd0d 	sth	zero,-12(fp)
 2019918:	00000c06 	br	201994c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 201991c:	e0bffe17 	ldw	r2,-8(fp)
 2019920:	e0ffff17 	ldw	r3,-4(fp)
 2019924:	10c00015 	stw	r3,0(r2)
        pq1++;
 2019928:	e0bffe17 	ldw	r2,-8(fp)
 201992c:	10800604 	addi	r2,r2,24
 2019930:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 2019934:	e0bfff17 	ldw	r2,-4(fp)
 2019938:	10800604 	addi	r2,r2,24
 201993c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2019940:	e0bffd0b 	ldhu	r2,-12(fp)
 2019944:	10800044 	addi	r2,r2,1
 2019948:	e0bffd0d 	sth	r2,-12(fp)
 201994c:	e0bffd0b 	ldhu	r2,-12(fp)
 2019950:	108004f0 	cmpltui	r2,r2,19
 2019954:	103ff11e 	bne	r2,zero,201991c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 2019958:	e0bffe17 	ldw	r2,-8(fp)
 201995c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 2019960:	008080f4 	movhi	r2,515
 2019964:	10af5e04 	addi	r2,r2,-17032
 2019968:	d0a74215 	stw	r2,-25336(gp)
#endif
}
 201996c:	0001883a 	nop
 2019970:	e037883a 	mov	sp,fp
 2019974:	dfc00117 	ldw	ra,4(sp)
 2019978:	df000017 	ldw	fp,0(sp)
 201997c:	dec00204 	addi	sp,sp,8
 2019980:	f800283a 	ret

02019984 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2019984:	defffa04 	addi	sp,sp,-24
 2019988:	df000515 	stw	fp,20(sp)
 201998c:	df000504 	addi	fp,sp,20
 2019990:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019994:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019998:	e0bfff17 	ldw	r2,-4(fp)
 201999c:	1000021e 	bne	r2,zero,20199a8 <OSSemAccept+0x24>
        return (0);
 20199a0:	0005883a 	mov	r2,zero
 20199a4:	00001f06 	br	2019a24 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 20199a8:	e0bfff17 	ldw	r2,-4(fp)
 20199ac:	10800003 	ldbu	r2,0(r2)
 20199b0:	10803fcc 	andi	r2,r2,255
 20199b4:	108000e0 	cmpeqi	r2,r2,3
 20199b8:	1000021e 	bne	r2,zero,20199c4 <OSSemAccept+0x40>
        return (0);
 20199bc:	0005883a 	mov	r2,zero
 20199c0:	00001806 	br	2019a24 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20199c4:	0005303a 	rdctl	r2,status
 20199c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20199cc:	e0fffe17 	ldw	r3,-8(fp)
 20199d0:	00bfff84 	movi	r2,-2
 20199d4:	1884703a 	and	r2,r3,r2
 20199d8:	1001703a 	wrctl	status,r2
  
  return context;
 20199dc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20199e0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 20199e4:	e0bfff17 	ldw	r2,-4(fp)
 20199e8:	1080020b 	ldhu	r2,8(r2)
 20199ec:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 20199f0:	e0bffd0b 	ldhu	r2,-12(fp)
 20199f4:	10000626 	beq	r2,zero,2019a10 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 20199f8:	e0bfff17 	ldw	r2,-4(fp)
 20199fc:	1080020b 	ldhu	r2,8(r2)
 2019a00:	10bfffc4 	addi	r2,r2,-1
 2019a04:	1007883a 	mov	r3,r2
 2019a08:	e0bfff17 	ldw	r2,-4(fp)
 2019a0c:	10c0020d 	sth	r3,8(r2)
 2019a10:	e0bffb17 	ldw	r2,-20(fp)
 2019a14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019a18:	e0bffc17 	ldw	r2,-16(fp)
 2019a1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 2019a20:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2019a24:	e037883a 	mov	sp,fp
 2019a28:	df000017 	ldw	fp,0(sp)
 2019a2c:	dec00104 	addi	sp,sp,4
 2019a30:	f800283a 	ret

02019a34 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 2019a34:	defff904 	addi	sp,sp,-28
 2019a38:	dfc00615 	stw	ra,24(sp)
 2019a3c:	df000515 	stw	fp,20(sp)
 2019a40:	df000504 	addi	fp,sp,20
 2019a44:	2005883a 	mov	r2,r4
 2019a48:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2019a4c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019a50:	d0a74503 	ldbu	r2,-25324(gp)
 2019a54:	10803fcc 	andi	r2,r2,255
 2019a58:	10000226 	beq	r2,zero,2019a64 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 2019a5c:	0005883a 	mov	r2,zero
 2019a60:	00002506 	br	2019af8 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019a64:	0005303a 	rdctl	r2,status
 2019a68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019a6c:	e0fffe17 	ldw	r3,-8(fp)
 2019a70:	00bfff84 	movi	r2,-2
 2019a74:	1884703a 	and	r2,r3,r2
 2019a78:	1001703a 	wrctl	status,r2
  
  return context;
 2019a7c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2019a80:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2019a84:	d0a74417 	ldw	r2,-25328(gp)
 2019a88:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2019a8c:	d0a74417 	ldw	r2,-25328(gp)
 2019a90:	10000326 	beq	r2,zero,2019aa0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2019a94:	d0a74417 	ldw	r2,-25328(gp)
 2019a98:	10800117 	ldw	r2,4(r2)
 2019a9c:	d0a74415 	stw	r2,-25328(gp)
 2019aa0:	e0bffb17 	ldw	r2,-20(fp)
 2019aa4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019aa8:	e0bffc17 	ldw	r2,-16(fp)
 2019aac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2019ab0:	e0bffd17 	ldw	r2,-12(fp)
 2019ab4:	10000f26 	beq	r2,zero,2019af4 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 2019ab8:	e0bffd17 	ldw	r2,-12(fp)
 2019abc:	00c000c4 	movi	r3,3
 2019ac0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2019ac4:	e0bffd17 	ldw	r2,-12(fp)
 2019ac8:	e0ffff0b 	ldhu	r3,-4(fp)
 2019acc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2019ad0:	e0bffd17 	ldw	r2,-12(fp)
 2019ad4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 2019ad8:	e0bffd17 	ldw	r2,-12(fp)
 2019adc:	00c00fc4 	movi	r3,63
 2019ae0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2019ae4:	e0bffd17 	ldw	r2,-12(fp)
 2019ae8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2019aec:	e13ffd17 	ldw	r4,-12(fp)
 2019af0:	20152500 	call	2015250 <OS_EventWaitListInit>
    }
    return (pevent);
 2019af4:	e0bffd17 	ldw	r2,-12(fp)
}
 2019af8:	e037883a 	mov	sp,fp
 2019afc:	dfc00117 	ldw	ra,4(sp)
 2019b00:	df000017 	ldw	fp,0(sp)
 2019b04:	dec00204 	addi	sp,sp,8
 2019b08:	f800283a 	ret

02019b0c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2019b0c:	defff304 	addi	sp,sp,-52
 2019b10:	dfc00c15 	stw	ra,48(sp)
 2019b14:	df000b15 	stw	fp,44(sp)
 2019b18:	df000b04 	addi	fp,sp,44
 2019b1c:	e13ffd15 	stw	r4,-12(fp)
 2019b20:	2805883a 	mov	r2,r5
 2019b24:	e1bfff15 	stw	r6,-4(fp)
 2019b28:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2019b2c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2019b30:	e0bfff17 	ldw	r2,-4(fp)
 2019b34:	1000021e 	bne	r2,zero,2019b40 <OSSemDel+0x34>
        return (pevent);
 2019b38:	e0bffd17 	ldw	r2,-12(fp)
 2019b3c:	00007e06 	br	2019d38 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2019b40:	e0bffd17 	ldw	r2,-12(fp)
 2019b44:	1000051e 	bne	r2,zero,2019b5c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2019b48:	e0bfff17 	ldw	r2,-4(fp)
 2019b4c:	00c00104 	movi	r3,4
 2019b50:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2019b54:	e0bffd17 	ldw	r2,-12(fp)
 2019b58:	00007706 	br	2019d38 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2019b5c:	e0bffd17 	ldw	r2,-12(fp)
 2019b60:	10800003 	ldbu	r2,0(r2)
 2019b64:	10803fcc 	andi	r2,r2,255
 2019b68:	108000e0 	cmpeqi	r2,r2,3
 2019b6c:	1000051e 	bne	r2,zero,2019b84 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2019b70:	e0bfff17 	ldw	r2,-4(fp)
 2019b74:	00c00044 	movi	r3,1
 2019b78:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2019b7c:	e0bffd17 	ldw	r2,-12(fp)
 2019b80:	00006d06 	br	2019d38 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019b84:	d0a74503 	ldbu	r2,-25324(gp)
 2019b88:	10803fcc 	andi	r2,r2,255
 2019b8c:	10000526 	beq	r2,zero,2019ba4 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2019b90:	e0bfff17 	ldw	r2,-4(fp)
 2019b94:	00c003c4 	movi	r3,15
 2019b98:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2019b9c:	e0bffd17 	ldw	r2,-12(fp)
 2019ba0:	00006506 	br	2019d38 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019ba4:	0005303a 	rdctl	r2,status
 2019ba8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019bac:	e0fffc17 	ldw	r3,-16(fp)
 2019bb0:	00bfff84 	movi	r2,-2
 2019bb4:	1884703a 	and	r2,r3,r2
 2019bb8:	1001703a 	wrctl	status,r2
  
  return context;
 2019bbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019bc0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2019bc4:	e0bffd17 	ldw	r2,-12(fp)
 2019bc8:	10800283 	ldbu	r2,10(r2)
 2019bcc:	10803fcc 	andi	r2,r2,255
 2019bd0:	10000326 	beq	r2,zero,2019be0 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2019bd4:	00800044 	movi	r2,1
 2019bd8:	e0bff505 	stb	r2,-44(fp)
 2019bdc:	00000106 	br	2019be4 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2019be0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2019be4:	e0bffe03 	ldbu	r2,-8(fp)
 2019be8:	10000326 	beq	r2,zero,2019bf8 <OSSemDel+0xec>
 2019bec:	10800060 	cmpeqi	r2,r2,1
 2019bf0:	1000281e 	bne	r2,zero,2019c94 <OSSemDel+0x188>
 2019bf4:	00004506 	br	2019d0c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2019bf8:	e0bff503 	ldbu	r2,-44(fp)
 2019bfc:	1000161e 	bne	r2,zero,2019c58 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2019c00:	e0bffd17 	ldw	r2,-12(fp)
 2019c04:	00c00fc4 	movi	r3,63
 2019c08:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2019c0c:	e0bffd17 	ldw	r2,-12(fp)
 2019c10:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019c14:	e0bffd17 	ldw	r2,-12(fp)
 2019c18:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2019c1c:	d0e74417 	ldw	r3,-25328(gp)
 2019c20:	e0bffd17 	ldw	r2,-12(fp)
 2019c24:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2019c28:	e0bffd17 	ldw	r2,-12(fp)
 2019c2c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2019c30:	e0bffd17 	ldw	r2,-12(fp)
 2019c34:	d0a74415 	stw	r2,-25328(gp)
 2019c38:	e0bff717 	ldw	r2,-36(fp)
 2019c3c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019c40:	e0bff817 	ldw	r2,-32(fp)
 2019c44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2019c48:	e0bfff17 	ldw	r2,-4(fp)
 2019c4c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 2019c50:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2019c54:	00003706 	br	2019d34 <OSSemDel+0x228>
 2019c58:	e0bff717 	ldw	r2,-36(fp)
 2019c5c:	e0bff915 	stw	r2,-28(fp)
 2019c60:	e0bff917 	ldw	r2,-28(fp)
 2019c64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2019c68:	e0bfff17 	ldw	r2,-4(fp)
 2019c6c:	00c01244 	movi	r3,73
 2019c70:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2019c74:	e0bffd17 	ldw	r2,-12(fp)
 2019c78:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2019c7c:	00002d06 	br	2019d34 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2019c80:	000f883a 	mov	r7,zero
 2019c84:	01800044 	movi	r6,1
 2019c88:	000b883a 	mov	r5,zero
 2019c8c:	e13ffd17 	ldw	r4,-12(fp)
 2019c90:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2019c94:	e0bffd17 	ldw	r2,-12(fp)
 2019c98:	10800283 	ldbu	r2,10(r2)
 2019c9c:	10803fcc 	andi	r2,r2,255
 2019ca0:	103ff71e 	bne	r2,zero,2019c80 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2019ca4:	e0bffd17 	ldw	r2,-12(fp)
 2019ca8:	00c00fc4 	movi	r3,63
 2019cac:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2019cb0:	e0bffd17 	ldw	r2,-12(fp)
 2019cb4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019cb8:	e0bffd17 	ldw	r2,-12(fp)
 2019cbc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2019cc0:	d0e74417 	ldw	r3,-25328(gp)
 2019cc4:	e0bffd17 	ldw	r2,-12(fp)
 2019cc8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2019ccc:	e0bffd17 	ldw	r2,-12(fp)
 2019cd0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2019cd4:	e0bffd17 	ldw	r2,-12(fp)
 2019cd8:	d0a74415 	stw	r2,-25328(gp)
 2019cdc:	e0bff717 	ldw	r2,-36(fp)
 2019ce0:	e0bffa15 	stw	r2,-24(fp)
 2019ce4:	e0bffa17 	ldw	r2,-24(fp)
 2019ce8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2019cec:	e0bff503 	ldbu	r2,-44(fp)
 2019cf0:	10800058 	cmpnei	r2,r2,1
 2019cf4:	1000011e 	bne	r2,zero,2019cfc <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2019cf8:	20156ec0 	call	20156ec <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2019cfc:	e0bfff17 	ldw	r2,-4(fp)
 2019d00:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 2019d04:	e03ff615 	stw	zero,-40(fp)
             break;
 2019d08:	00000a06 	br	2019d34 <OSSemDel+0x228>
 2019d0c:	e0bff717 	ldw	r2,-36(fp)
 2019d10:	e0bffb15 	stw	r2,-20(fp)
 2019d14:	e0bffb17 	ldw	r2,-20(fp)
 2019d18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2019d1c:	e0bfff17 	ldw	r2,-4(fp)
 2019d20:	00c001c4 	movi	r3,7
 2019d24:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2019d28:	e0bffd17 	ldw	r2,-12(fp)
 2019d2c:	e0bff615 	stw	r2,-40(fp)
             break;
 2019d30:	0001883a 	nop
    }
    return (pevent_return);
 2019d34:	e0bff617 	ldw	r2,-40(fp)
}
 2019d38:	e037883a 	mov	sp,fp
 2019d3c:	dfc00117 	ldw	ra,4(sp)
 2019d40:	df000017 	ldw	fp,0(sp)
 2019d44:	dec00204 	addi	sp,sp,8
 2019d48:	f800283a 	ret

02019d4c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2019d4c:	defff504 	addi	sp,sp,-44
 2019d50:	dfc00a15 	stw	ra,40(sp)
 2019d54:	df000915 	stw	fp,36(sp)
 2019d58:	df000904 	addi	fp,sp,36
 2019d5c:	e13ffd15 	stw	r4,-12(fp)
 2019d60:	2805883a 	mov	r2,r5
 2019d64:	e1bfff15 	stw	r6,-4(fp)
 2019d68:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019d6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2019d70:	e0bfff17 	ldw	r2,-4(fp)
 2019d74:	10007226 	beq	r2,zero,2019f40 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019d78:	e0bffd17 	ldw	r2,-12(fp)
 2019d7c:	1000041e 	bne	r2,zero,2019d90 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2019d80:	e0bfff17 	ldw	r2,-4(fp)
 2019d84:	00c00104 	movi	r3,4
 2019d88:	10c00005 	stb	r3,0(r2)
        return;
 2019d8c:	00006d06 	br	2019f44 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2019d90:	e0bffd17 	ldw	r2,-12(fp)
 2019d94:	10800003 	ldbu	r2,0(r2)
 2019d98:	10803fcc 	andi	r2,r2,255
 2019d9c:	108000e0 	cmpeqi	r2,r2,3
 2019da0:	1000041e 	bne	r2,zero,2019db4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2019da4:	e0bfff17 	ldw	r2,-4(fp)
 2019da8:	00c00044 	movi	r3,1
 2019dac:	10c00005 	stb	r3,0(r2)
        return;
 2019db0:	00006406 	br	2019f44 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2019db4:	d0a74503 	ldbu	r2,-25324(gp)
 2019db8:	10803fcc 	andi	r2,r2,255
 2019dbc:	10000426 	beq	r2,zero,2019dd0 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2019dc0:	e0bfff17 	ldw	r2,-4(fp)
 2019dc4:	00c00084 	movi	r3,2
 2019dc8:	10c00005 	stb	r3,0(r2)
        return;
 2019dcc:	00005d06 	br	2019f44 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2019dd0:	d0a73703 	ldbu	r2,-25380(gp)
 2019dd4:	10803fcc 	andi	r2,r2,255
 2019dd8:	10000426 	beq	r2,zero,2019dec <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2019ddc:	e0bfff17 	ldw	r2,-4(fp)
 2019de0:	00c00344 	movi	r3,13
 2019de4:	10c00005 	stb	r3,0(r2)
        return;
 2019de8:	00005606 	br	2019f44 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019dec:	0005303a 	rdctl	r2,status
 2019df0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019df4:	e0fffc17 	ldw	r3,-16(fp)
 2019df8:	00bfff84 	movi	r2,-2
 2019dfc:	1884703a 	and	r2,r3,r2
 2019e00:	1001703a 	wrctl	status,r2
  
  return context;
 2019e04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019e08:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 2019e0c:	e0bffd17 	ldw	r2,-12(fp)
 2019e10:	1080020b 	ldhu	r2,8(r2)
 2019e14:	10bfffcc 	andi	r2,r2,65535
 2019e18:	10000d26 	beq	r2,zero,2019e50 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 2019e1c:	e0bffd17 	ldw	r2,-12(fp)
 2019e20:	1080020b 	ldhu	r2,8(r2)
 2019e24:	10bfffc4 	addi	r2,r2,-1
 2019e28:	1007883a 	mov	r3,r2
 2019e2c:	e0bffd17 	ldw	r2,-12(fp)
 2019e30:	10c0020d 	sth	r3,8(r2)
 2019e34:	e0bff717 	ldw	r2,-36(fp)
 2019e38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019e3c:	e0bff817 	ldw	r2,-32(fp)
 2019e40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2019e44:	e0bfff17 	ldw	r2,-4(fp)
 2019e48:	10000005 	stb	zero,0(r2)
        return;
 2019e4c:	00003d06 	br	2019f44 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 2019e50:	d0a74617 	ldw	r2,-25320(gp)
 2019e54:	d0e74617 	ldw	r3,-25320(gp)
 2019e58:	18c00c03 	ldbu	r3,48(r3)
 2019e5c:	18c00054 	ori	r3,r3,1
 2019e60:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2019e64:	d0a74617 	ldw	r2,-25320(gp)
 2019e68:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 2019e6c:	d0a74617 	ldw	r2,-25320(gp)
 2019e70:	e0fffe0b 	ldhu	r3,-8(fp)
 2019e74:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2019e78:	e13ffd17 	ldw	r4,-12(fp)
 2019e7c:	2014e380 	call	2014e38 <OS_EventTaskWait>
 2019e80:	e0bff717 	ldw	r2,-36(fp)
 2019e84:	e0bffb15 	stw	r2,-20(fp)
 2019e88:	e0bffb17 	ldw	r2,-20(fp)
 2019e8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 2019e90:	20156ec0 	call	20156ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019e94:	0005303a 	rdctl	r2,status
 2019e98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019e9c:	e0fff917 	ldw	r3,-28(fp)
 2019ea0:	00bfff84 	movi	r2,-2
 2019ea4:	1884703a 	and	r2,r3,r2
 2019ea8:	1001703a 	wrctl	status,r2
  
  return context;
 2019eac:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2019eb0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2019eb4:	d0a74617 	ldw	r2,-25320(gp)
 2019eb8:	10800c43 	ldbu	r2,49(r2)
 2019ebc:	10803fcc 	andi	r2,r2,255
 2019ec0:	10000326 	beq	r2,zero,2019ed0 <OSSemPend+0x184>
 2019ec4:	108000a0 	cmpeqi	r2,r2,2
 2019ec8:	1000041e 	bne	r2,zero,2019edc <OSSemPend+0x190>
 2019ecc:	00000706 	br	2019eec <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 2019ed0:	e0bfff17 	ldw	r2,-4(fp)
 2019ed4:	10000005 	stb	zero,0(r2)
             break;
 2019ed8:	00000c06 	br	2019f0c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2019edc:	e0bfff17 	ldw	r2,-4(fp)
 2019ee0:	00c00384 	movi	r3,14
 2019ee4:	10c00005 	stb	r3,0(r2)
             break;
 2019ee8:	00000806 	br	2019f0c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 2019eec:	d0a74617 	ldw	r2,-25320(gp)
 2019ef0:	e17ffd17 	ldw	r5,-12(fp)
 2019ef4:	1009883a 	mov	r4,r2
 2019ef8:	20150980 	call	2015098 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2019efc:	e0bfff17 	ldw	r2,-4(fp)
 2019f00:	00c00284 	movi	r3,10
 2019f04:	10c00005 	stb	r3,0(r2)
             break;
 2019f08:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2019f0c:	d0a74617 	ldw	r2,-25320(gp)
 2019f10:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2019f14:	d0a74617 	ldw	r2,-25320(gp)
 2019f18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2019f1c:	d0a74617 	ldw	r2,-25320(gp)
 2019f20:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2019f24:	d0a74617 	ldw	r2,-25320(gp)
 2019f28:	10000815 	stw	zero,32(r2)
 2019f2c:	e0bff717 	ldw	r2,-36(fp)
 2019f30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019f34:	e0bffa17 	ldw	r2,-24(fp)
 2019f38:	1001703a 	wrctl	status,r2
 2019f3c:	00000106 	br	2019f44 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 2019f40:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 2019f44:	e037883a 	mov	sp,fp
 2019f48:	dfc00117 	ldw	ra,4(sp)
 2019f4c:	df000017 	ldw	fp,0(sp)
 2019f50:	dec00204 	addi	sp,sp,8
 2019f54:	f800283a 	ret

02019f58 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2019f58:	defff604 	addi	sp,sp,-40
 2019f5c:	dfc00915 	stw	ra,36(sp)
 2019f60:	df000815 	stw	fp,32(sp)
 2019f64:	df000804 	addi	fp,sp,32
 2019f68:	e13ffd15 	stw	r4,-12(fp)
 2019f6c:	2805883a 	mov	r2,r5
 2019f70:	e1bfff15 	stw	r6,-4(fp)
 2019f74:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019f78:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2019f7c:	e0bfff17 	ldw	r2,-4(fp)
 2019f80:	1000021e 	bne	r2,zero,2019f8c <OSSemPendAbort+0x34>
        return (0);
 2019f84:	0005883a 	mov	r2,zero
 2019f88:	00004906 	br	201a0b0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019f8c:	e0bffd17 	ldw	r2,-12(fp)
 2019f90:	1000051e 	bne	r2,zero,2019fa8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2019f94:	e0bfff17 	ldw	r2,-4(fp)
 2019f98:	00c00104 	movi	r3,4
 2019f9c:	10c00005 	stb	r3,0(r2)
        return (0);
 2019fa0:	0005883a 	mov	r2,zero
 2019fa4:	00004206 	br	201a0b0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2019fa8:	e0bffd17 	ldw	r2,-12(fp)
 2019fac:	10800003 	ldbu	r2,0(r2)
 2019fb0:	10803fcc 	andi	r2,r2,255
 2019fb4:	108000e0 	cmpeqi	r2,r2,3
 2019fb8:	1000051e 	bne	r2,zero,2019fd0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2019fbc:	e0bfff17 	ldw	r2,-4(fp)
 2019fc0:	00c00044 	movi	r3,1
 2019fc4:	10c00005 	stb	r3,0(r2)
        return (0);
 2019fc8:	0005883a 	mov	r2,zero
 2019fcc:	00003806 	br	201a0b0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019fd0:	0005303a 	rdctl	r2,status
 2019fd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019fd8:	e0fffc17 	ldw	r3,-16(fp)
 2019fdc:	00bfff84 	movi	r2,-2
 2019fe0:	1884703a 	and	r2,r3,r2
 2019fe4:	1001703a 	wrctl	status,r2
  
  return context;
 2019fe8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2019fec:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 2019ff0:	e0bffd17 	ldw	r2,-12(fp)
 2019ff4:	10800283 	ldbu	r2,10(r2)
 2019ff8:	10803fcc 	andi	r2,r2,255
 2019ffc:	10002526 	beq	r2,zero,201a094 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 201a000:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 201a004:	e0bffe03 	ldbu	r2,-8(fp)
 201a008:	10800060 	cmpeqi	r2,r2,1
 201a00c:	10000e26 	beq	r2,zero,201a048 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201a010:	00000806 	br	201a034 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201a014:	01c00084 	movi	r7,2
 201a018:	01800044 	movi	r6,1
 201a01c:	000b883a 	mov	r5,zero
 201a020:	e13ffd17 	ldw	r4,-12(fp)
 201a024:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                     nbr_tasks++;
 201a028:	e0bff803 	ldbu	r2,-32(fp)
 201a02c:	10800044 	addi	r2,r2,1
 201a030:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201a034:	e0bffd17 	ldw	r2,-12(fp)
 201a038:	10800283 	ldbu	r2,10(r2)
 201a03c:	10803fcc 	andi	r2,r2,255
 201a040:	103ff41e 	bne	r2,zero,201a014 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201a044:	00000906 	br	201a06c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201a048:	01c00084 	movi	r7,2
 201a04c:	01800044 	movi	r6,1
 201a050:	000b883a 	mov	r5,zero
 201a054:	e13ffd17 	ldw	r4,-12(fp)
 201a058:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
                 nbr_tasks++;
 201a05c:	e0bff803 	ldbu	r2,-32(fp)
 201a060:	10800044 	addi	r2,r2,1
 201a064:	e0bff805 	stb	r2,-32(fp)
                 break;
 201a068:	0001883a 	nop
 201a06c:	e0bff917 	ldw	r2,-28(fp)
 201a070:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a074:	e0bffa17 	ldw	r2,-24(fp)
 201a078:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201a07c:	20156ec0 	call	20156ec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201a080:	e0bfff17 	ldw	r2,-4(fp)
 201a084:	00c00384 	movi	r3,14
 201a088:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 201a08c:	e0bff803 	ldbu	r2,-32(fp)
 201a090:	00000706 	br	201a0b0 <OSSemPendAbort+0x158>
 201a094:	e0bff917 	ldw	r2,-28(fp)
 201a098:	e0bffb15 	stw	r2,-20(fp)
 201a09c:	e0bffb17 	ldw	r2,-20(fp)
 201a0a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201a0a4:	e0bfff17 	ldw	r2,-4(fp)
 201a0a8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 201a0ac:	0005883a 	mov	r2,zero
}
 201a0b0:	e037883a 	mov	sp,fp
 201a0b4:	dfc00117 	ldw	ra,4(sp)
 201a0b8:	df000017 	ldw	fp,0(sp)
 201a0bc:	dec00204 	addi	sp,sp,8
 201a0c0:	f800283a 	ret

0201a0c4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 201a0c4:	defff804 	addi	sp,sp,-32
 201a0c8:	dfc00715 	stw	ra,28(sp)
 201a0cc:	df000615 	stw	fp,24(sp)
 201a0d0:	df000604 	addi	fp,sp,24
 201a0d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a0d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a0dc:	e0bfff17 	ldw	r2,-4(fp)
 201a0e0:	1000021e 	bne	r2,zero,201a0ec <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 201a0e4:	00800104 	movi	r2,4
 201a0e8:	00003506 	br	201a1c0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a0ec:	e0bfff17 	ldw	r2,-4(fp)
 201a0f0:	10800003 	ldbu	r2,0(r2)
 201a0f4:	10803fcc 	andi	r2,r2,255
 201a0f8:	108000e0 	cmpeqi	r2,r2,3
 201a0fc:	1000021e 	bne	r2,zero,201a108 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 201a100:	00800044 	movi	r2,1
 201a104:	00002e06 	br	201a1c0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a108:	0005303a 	rdctl	r2,status
 201a10c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a110:	e0fffe17 	ldw	r3,-8(fp)
 201a114:	00bfff84 	movi	r2,-2
 201a118:	1884703a 	and	r2,r3,r2
 201a11c:	1001703a 	wrctl	status,r2
  
  return context;
 201a120:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201a124:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 201a128:	e0bfff17 	ldw	r2,-4(fp)
 201a12c:	10800283 	ldbu	r2,10(r2)
 201a130:	10803fcc 	andi	r2,r2,255
 201a134:	10000c26 	beq	r2,zero,201a168 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201a138:	000f883a 	mov	r7,zero
 201a13c:	01800044 	movi	r6,1
 201a140:	000b883a 	mov	r5,zero
 201a144:	e13fff17 	ldw	r4,-4(fp)
 201a148:	2014ca00 	call	2014ca0 <OS_EventTaskRdy>
 201a14c:	e0bffa17 	ldw	r2,-24(fp)
 201a150:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a154:	e0bffb17 	ldw	r2,-20(fp)
 201a158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201a15c:	20156ec0 	call	20156ec <OS_Sched>
        return (OS_ERR_NONE);
 201a160:	0005883a 	mov	r2,zero
 201a164:	00001606 	br	201a1c0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 201a168:	e0bfff17 	ldw	r2,-4(fp)
 201a16c:	1080020b 	ldhu	r2,8(r2)
 201a170:	10ffffcc 	andi	r3,r2,65535
 201a174:	00bfffd4 	movui	r2,65535
 201a178:	18800c26 	beq	r3,r2,201a1ac <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201a17c:	e0bfff17 	ldw	r2,-4(fp)
 201a180:	1080020b 	ldhu	r2,8(r2)
 201a184:	10800044 	addi	r2,r2,1
 201a188:	1007883a 	mov	r3,r2
 201a18c:	e0bfff17 	ldw	r2,-4(fp)
 201a190:	10c0020d 	sth	r3,8(r2)
 201a194:	e0bffa17 	ldw	r2,-24(fp)
 201a198:	e0bffc15 	stw	r2,-16(fp)
 201a19c:	e0bffc17 	ldw	r2,-16(fp)
 201a1a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201a1a4:	0005883a 	mov	r2,zero
 201a1a8:	00000506 	br	201a1c0 <OSSemPost+0xfc>
 201a1ac:	e0bffa17 	ldw	r2,-24(fp)
 201a1b0:	e0bffd15 	stw	r2,-12(fp)
 201a1b4:	e0bffd17 	ldw	r2,-12(fp)
 201a1b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 201a1bc:	00800c84 	movi	r2,50
}
 201a1c0:	e037883a 	mov	sp,fp
 201a1c4:	dfc00117 	ldw	ra,4(sp)
 201a1c8:	df000017 	ldw	fp,0(sp)
 201a1cc:	dec00204 	addi	sp,sp,8
 201a1d0:	f800283a 	ret

0201a1d4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 201a1d4:	defff704 	addi	sp,sp,-36
 201a1d8:	df000815 	stw	fp,32(sp)
 201a1dc:	df000804 	addi	fp,sp,32
 201a1e0:	e13ffe15 	stw	r4,-8(fp)
 201a1e4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201a1e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201a1ec:	e0bffe17 	ldw	r2,-8(fp)
 201a1f0:	1000021e 	bne	r2,zero,201a1fc <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 201a1f4:	00800104 	movi	r2,4
 201a1f8:	00003606 	br	201a2d4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201a1fc:	e0bfff17 	ldw	r2,-4(fp)
 201a200:	1000021e 	bne	r2,zero,201a20c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 201a204:	00800244 	movi	r2,9
 201a208:	00003206 	br	201a2d4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201a20c:	e0bffe17 	ldw	r2,-8(fp)
 201a210:	10800003 	ldbu	r2,0(r2)
 201a214:	10803fcc 	andi	r2,r2,255
 201a218:	108000e0 	cmpeqi	r2,r2,3
 201a21c:	1000021e 	bne	r2,zero,201a228 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 201a220:	00800044 	movi	r2,1
 201a224:	00002b06 	br	201a2d4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a228:	0005303a 	rdctl	r2,status
 201a22c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a230:	e0fffd17 	ldw	r3,-12(fp)
 201a234:	00bfff84 	movi	r2,-2
 201a238:	1884703a 	and	r2,r3,r2
 201a23c:	1001703a 	wrctl	status,r2
  
  return context;
 201a240:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 201a244:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 201a248:	e0bffe17 	ldw	r2,-8(fp)
 201a24c:	10c00283 	ldbu	r3,10(r2)
 201a250:	e0bfff17 	ldw	r2,-4(fp)
 201a254:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 201a258:	e0bffe17 	ldw	r2,-8(fp)
 201a25c:	108002c4 	addi	r2,r2,11
 201a260:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 201a264:	e0bfff17 	ldw	r2,-4(fp)
 201a268:	10800084 	addi	r2,r2,2
 201a26c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201a270:	e03ffa05 	stb	zero,-24(fp)
 201a274:	00000b06 	br	201a2a4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 201a278:	e0bff917 	ldw	r2,-28(fp)
 201a27c:	10c00044 	addi	r3,r2,1
 201a280:	e0fff915 	stw	r3,-28(fp)
 201a284:	e0fff817 	ldw	r3,-32(fp)
 201a288:	19000044 	addi	r4,r3,1
 201a28c:	e13ff815 	stw	r4,-32(fp)
 201a290:	18c00003 	ldbu	r3,0(r3)
 201a294:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201a298:	e0bffa03 	ldbu	r2,-24(fp)
 201a29c:	10800044 	addi	r2,r2,1
 201a2a0:	e0bffa05 	stb	r2,-24(fp)
 201a2a4:	e0bffa03 	ldbu	r2,-24(fp)
 201a2a8:	108000f0 	cmpltui	r2,r2,3
 201a2ac:	103ff21e 	bne	r2,zero,201a278 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201a2b0:	e0bffe17 	ldw	r2,-8(fp)
 201a2b4:	10c0020b 	ldhu	r3,8(r2)
 201a2b8:	e0bfff17 	ldw	r2,-4(fp)
 201a2bc:	10c0000d 	sth	r3,0(r2)
 201a2c0:	e0bffb17 	ldw	r2,-20(fp)
 201a2c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a2c8:	e0bffc17 	ldw	r2,-16(fp)
 201a2cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201a2d0:	0005883a 	mov	r2,zero
}
 201a2d4:	e037883a 	mov	sp,fp
 201a2d8:	df000017 	ldw	fp,0(sp)
 201a2dc:	dec00104 	addi	sp,sp,4
 201a2e0:	f800283a 	ret

0201a2e4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 201a2e4:	defff904 	addi	sp,sp,-28
 201a2e8:	df000615 	stw	fp,24(sp)
 201a2ec:	df000604 	addi	fp,sp,24
 201a2f0:	e13ffd15 	stw	r4,-12(fp)
 201a2f4:	2805883a 	mov	r2,r5
 201a2f8:	e1bfff15 	stw	r6,-4(fp)
 201a2fc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a300:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201a304:	e0bfff17 	ldw	r2,-4(fp)
 201a308:	10003126 	beq	r2,zero,201a3d0 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a30c:	e0bffd17 	ldw	r2,-12(fp)
 201a310:	1000041e 	bne	r2,zero,201a324 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 201a314:	e0bfff17 	ldw	r2,-4(fp)
 201a318:	00c00104 	movi	r3,4
 201a31c:	10c00005 	stb	r3,0(r2)
        return;
 201a320:	00002c06 	br	201a3d4 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a324:	e0bffd17 	ldw	r2,-12(fp)
 201a328:	10800003 	ldbu	r2,0(r2)
 201a32c:	10803fcc 	andi	r2,r2,255
 201a330:	108000e0 	cmpeqi	r2,r2,3
 201a334:	1000041e 	bne	r2,zero,201a348 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 201a338:	e0bfff17 	ldw	r2,-4(fp)
 201a33c:	00c00044 	movi	r3,1
 201a340:	10c00005 	stb	r3,0(r2)
        return;
 201a344:	00002306 	br	201a3d4 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a348:	0005303a 	rdctl	r2,status
 201a34c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a350:	e0fffc17 	ldw	r3,-16(fp)
 201a354:	00bfff84 	movi	r2,-2
 201a358:	1884703a 	and	r2,r3,r2
 201a35c:	1001703a 	wrctl	status,r2
  
  return context;
 201a360:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201a364:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 201a368:	e0bfff17 	ldw	r2,-4(fp)
 201a36c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 201a370:	e0bffd17 	ldw	r2,-12(fp)
 201a374:	1080020b 	ldhu	r2,8(r2)
 201a378:	10bfffcc 	andi	r2,r2,65535
 201a37c:	10000426 	beq	r2,zero,201a390 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 201a380:	e0bffd17 	ldw	r2,-12(fp)
 201a384:	e0fffe0b 	ldhu	r3,-8(fp)
 201a388:	10c0020d 	sth	r3,8(r2)
 201a38c:	00000b06 	br	201a3bc <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201a390:	e0bffd17 	ldw	r2,-12(fp)
 201a394:	10800283 	ldbu	r2,10(r2)
 201a398:	10803fcc 	andi	r2,r2,255
 201a39c:	1000041e 	bne	r2,zero,201a3b0 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201a3a0:	e0bffd17 	ldw	r2,-12(fp)
 201a3a4:	e0fffe0b 	ldhu	r3,-8(fp)
 201a3a8:	10c0020d 	sth	r3,8(r2)
 201a3ac:	00000306 	br	201a3bc <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201a3b0:	e0bfff17 	ldw	r2,-4(fp)
 201a3b4:	00c01244 	movi	r3,73
 201a3b8:	10c00005 	stb	r3,0(r2)
 201a3bc:	e0bffa17 	ldw	r2,-24(fp)
 201a3c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a3c4:	e0bffb17 	ldw	r2,-20(fp)
 201a3c8:	1001703a 	wrctl	status,r2
 201a3cc:	00000106 	br	201a3d4 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 201a3d0:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 201a3d4:	e037883a 	mov	sp,fp
 201a3d8:	df000017 	ldw	fp,0(sp)
 201a3dc:	dec00104 	addi	sp,sp,4
 201a3e0:	f800283a 	ret

0201a3e4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 201a3e4:	defff104 	addi	sp,sp,-60
 201a3e8:	dfc00e15 	stw	ra,56(sp)
 201a3ec:	df000d15 	stw	fp,52(sp)
 201a3f0:	df000d04 	addi	fp,sp,52
 201a3f4:	2007883a 	mov	r3,r4
 201a3f8:	2805883a 	mov	r2,r5
 201a3fc:	e0fffe05 	stb	r3,-8(fp)
 201a400:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201a404:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201a408:	e0bffe03 	ldbu	r2,-8(fp)
 201a40c:	10800530 	cmpltui	r2,r2,20
 201a410:	1000051e 	bne	r2,zero,201a428 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 201a414:	e0bffe03 	ldbu	r2,-8(fp)
 201a418:	10803fe0 	cmpeqi	r2,r2,255
 201a41c:	1000021e 	bne	r2,zero,201a428 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 201a420:	00800a84 	movi	r2,42
 201a424:	00012606 	br	201a8c0 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201a428:	e0bfff03 	ldbu	r2,-4(fp)
 201a42c:	10800530 	cmpltui	r2,r2,20
 201a430:	1000021e 	bne	r2,zero,201a43c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 201a434:	00800a84 	movi	r2,42
 201a438:	00012106 	br	201a8c0 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a43c:	0005303a 	rdctl	r2,status
 201a440:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a444:	e0fffd17 	ldw	r3,-12(fp)
 201a448:	00bfff84 	movi	r2,-2
 201a44c:	1884703a 	and	r2,r3,r2
 201a450:	1001703a 	wrctl	status,r2
  
  return context;
 201a454:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201a458:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201a45c:	e0ffff03 	ldbu	r3,-4(fp)
 201a460:	008080f4 	movhi	r2,515
 201a464:	10b5ea04 	addi	r2,r2,-10328
 201a468:	18c7883a 	add	r3,r3,r3
 201a46c:	18c7883a 	add	r3,r3,r3
 201a470:	10c5883a 	add	r2,r2,r3
 201a474:	10800017 	ldw	r2,0(r2)
 201a478:	10000626 	beq	r2,zero,201a494 <OSTaskChangePrio+0xb0>
 201a47c:	e0bff517 	ldw	r2,-44(fp)
 201a480:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a484:	e0bff617 	ldw	r2,-40(fp)
 201a488:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201a48c:	00800a04 	movi	r2,40
 201a490:	00010b06 	br	201a8c0 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 201a494:	e0bffe03 	ldbu	r2,-8(fp)
 201a498:	10803fd8 	cmpnei	r2,r2,255
 201a49c:	1000031e 	bne	r2,zero,201a4ac <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201a4a0:	d0a74617 	ldw	r2,-25320(gp)
 201a4a4:	10800c83 	ldbu	r2,50(r2)
 201a4a8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201a4ac:	e0fffe03 	ldbu	r3,-8(fp)
 201a4b0:	008080f4 	movhi	r2,515
 201a4b4:	10b5ea04 	addi	r2,r2,-10328
 201a4b8:	18c7883a 	add	r3,r3,r3
 201a4bc:	18c7883a 	add	r3,r3,r3
 201a4c0:	10c5883a 	add	r2,r2,r3
 201a4c4:	10800017 	ldw	r2,0(r2)
 201a4c8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201a4cc:	e0bff817 	ldw	r2,-32(fp)
 201a4d0:	1000061e 	bne	r2,zero,201a4ec <OSTaskChangePrio+0x108>
 201a4d4:	e0bff517 	ldw	r2,-44(fp)
 201a4d8:	e0bff715 	stw	r2,-36(fp)
 201a4dc:	e0bff717 	ldw	r2,-36(fp)
 201a4e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 201a4e4:	00800a44 	movi	r2,41
 201a4e8:	0000f506 	br	201a8c0 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 201a4ec:	e0bff817 	ldw	r2,-32(fp)
 201a4f0:	10800058 	cmpnei	r2,r2,1
 201a4f4:	1000061e 	bne	r2,zero,201a510 <OSTaskChangePrio+0x12c>
 201a4f8:	e0bff517 	ldw	r2,-44(fp)
 201a4fc:	e0bff915 	stw	r2,-28(fp)
 201a500:	e0bff917 	ldw	r2,-28(fp)
 201a504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 201a508:	008010c4 	movi	r2,67
 201a50c:	0000ec06 	br	201a8c0 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201a510:	e0bfff03 	ldbu	r2,-4(fp)
 201a514:	1004d0fa 	srli	r2,r2,3
 201a518:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201a51c:	e0bfff03 	ldbu	r2,-4(fp)
 201a520:	108001cc 	andi	r2,r2,7
 201a524:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 201a528:	e0bffb03 	ldbu	r2,-20(fp)
 201a52c:	00c00044 	movi	r3,1
 201a530:	1884983a 	sll	r2,r3,r2
 201a534:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 201a538:	e0bffb43 	ldbu	r2,-19(fp)
 201a53c:	00c00044 	movi	r3,1
 201a540:	1884983a 	sll	r2,r3,r2
 201a544:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 201a548:	e0fffe03 	ldbu	r3,-8(fp)
 201a54c:	008080f4 	movhi	r2,515
 201a550:	10b5ea04 	addi	r2,r2,-10328
 201a554:	18c7883a 	add	r3,r3,r3
 201a558:	18c7883a 	add	r3,r3,r3
 201a55c:	10c5883a 	add	r2,r2,r3
 201a560:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 201a564:	e0ffff03 	ldbu	r3,-4(fp)
 201a568:	008080f4 	movhi	r2,515
 201a56c:	10b5ea04 	addi	r2,r2,-10328
 201a570:	18c7883a 	add	r3,r3,r3
 201a574:	18c7883a 	add	r3,r3,r3
 201a578:	10c5883a 	add	r2,r2,r3
 201a57c:	e0fff817 	ldw	r3,-32(fp)
 201a580:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 201a584:	e0bff817 	ldw	r2,-32(fp)
 201a588:	10800d03 	ldbu	r2,52(r2)
 201a58c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201a590:	e0bff817 	ldw	r2,-32(fp)
 201a594:	10800d83 	ldbu	r2,54(r2)
 201a598:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201a59c:	e0bff817 	ldw	r2,-32(fp)
 201a5a0:	10800d43 	ldbu	r2,53(r2)
 201a5a4:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 201a5a8:	e0fffc03 	ldbu	r3,-16(fp)
 201a5ac:	d0a74344 	addi	r2,gp,-25331
 201a5b0:	1885883a 	add	r2,r3,r2
 201a5b4:	10c00003 	ldbu	r3,0(r2)
 201a5b8:	e0bffc83 	ldbu	r2,-14(fp)
 201a5bc:	1884703a 	and	r2,r3,r2
 201a5c0:	10803fcc 	andi	r2,r2,255
 201a5c4:	10002826 	beq	r2,zero,201a668 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 201a5c8:	e0fffc03 	ldbu	r3,-16(fp)
 201a5cc:	e13ffc03 	ldbu	r4,-16(fp)
 201a5d0:	d0a74344 	addi	r2,gp,-25331
 201a5d4:	2085883a 	add	r2,r4,r2
 201a5d8:	10800003 	ldbu	r2,0(r2)
 201a5dc:	1009883a 	mov	r4,r2
 201a5e0:	e0bffc83 	ldbu	r2,-14(fp)
 201a5e4:	0084303a 	nor	r2,zero,r2
 201a5e8:	2084703a 	and	r2,r4,r2
 201a5ec:	1009883a 	mov	r4,r2
 201a5f0:	d0a74344 	addi	r2,gp,-25331
 201a5f4:	1885883a 	add	r2,r3,r2
 201a5f8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201a5fc:	e0fffc03 	ldbu	r3,-16(fp)
 201a600:	d0a74344 	addi	r2,gp,-25331
 201a604:	1885883a 	add	r2,r3,r2
 201a608:	10800003 	ldbu	r2,0(r2)
 201a60c:	10803fcc 	andi	r2,r2,255
 201a610:	1000061e 	bne	r2,zero,201a62c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 201a614:	e0bffc43 	ldbu	r2,-15(fp)
 201a618:	0084303a 	nor	r2,zero,r2
 201a61c:	1007883a 	mov	r3,r2
 201a620:	d0a74303 	ldbu	r2,-25332(gp)
 201a624:	1884703a 	and	r2,r3,r2
 201a628:	d0a74305 	stb	r2,-25332(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201a62c:	d0e74303 	ldbu	r3,-25332(gp)
 201a630:	e0bffb83 	ldbu	r2,-18(fp)
 201a634:	1884b03a 	or	r2,r3,r2
 201a638:	d0a74305 	stb	r2,-25332(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201a63c:	e0fffb03 	ldbu	r3,-20(fp)
 201a640:	e13ffb03 	ldbu	r4,-20(fp)
 201a644:	d0a74344 	addi	r2,gp,-25331
 201a648:	2085883a 	add	r2,r4,r2
 201a64c:	11000003 	ldbu	r4,0(r2)
 201a650:	e0bffbc3 	ldbu	r2,-17(fp)
 201a654:	2084b03a 	or	r2,r4,r2
 201a658:	1009883a 	mov	r4,r2
 201a65c:	d0a74344 	addi	r2,gp,-25331
 201a660:	1885883a 	add	r2,r3,r2
 201a664:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 201a668:	e0bff817 	ldw	r2,-32(fp)
 201a66c:	10800717 	ldw	r2,28(r2)
 201a670:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 201a674:	e0bff317 	ldw	r2,-52(fp)
 201a678:	10003326 	beq	r2,zero,201a748 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201a67c:	e0bffc03 	ldbu	r2,-16(fp)
 201a680:	e0fffc03 	ldbu	r3,-16(fp)
 201a684:	e13ff317 	ldw	r4,-52(fp)
 201a688:	20c7883a 	add	r3,r4,r3
 201a68c:	18c002c4 	addi	r3,r3,11
 201a690:	18c00003 	ldbu	r3,0(r3)
 201a694:	1809883a 	mov	r4,r3
 201a698:	e0fffc83 	ldbu	r3,-14(fp)
 201a69c:	00c6303a 	nor	r3,zero,r3
 201a6a0:	20c6703a 	and	r3,r4,r3
 201a6a4:	1809883a 	mov	r4,r3
 201a6a8:	e0fff317 	ldw	r3,-52(fp)
 201a6ac:	1885883a 	add	r2,r3,r2
 201a6b0:	108002c4 	addi	r2,r2,11
 201a6b4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 201a6b8:	e0bffc03 	ldbu	r2,-16(fp)
 201a6bc:	e0fff317 	ldw	r3,-52(fp)
 201a6c0:	1885883a 	add	r2,r3,r2
 201a6c4:	108002c4 	addi	r2,r2,11
 201a6c8:	10800003 	ldbu	r2,0(r2)
 201a6cc:	10803fcc 	andi	r2,r2,255
 201a6d0:	1000091e 	bne	r2,zero,201a6f8 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 201a6d4:	e0bff317 	ldw	r2,-52(fp)
 201a6d8:	10800283 	ldbu	r2,10(r2)
 201a6dc:	1007883a 	mov	r3,r2
 201a6e0:	e0bffc43 	ldbu	r2,-15(fp)
 201a6e4:	0084303a 	nor	r2,zero,r2
 201a6e8:	1884703a 	and	r2,r3,r2
 201a6ec:	1007883a 	mov	r3,r2
 201a6f0:	e0bff317 	ldw	r2,-52(fp)
 201a6f4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 201a6f8:	e0bff317 	ldw	r2,-52(fp)
 201a6fc:	10c00283 	ldbu	r3,10(r2)
 201a700:	e0bffb83 	ldbu	r2,-18(fp)
 201a704:	1884b03a 	or	r2,r3,r2
 201a708:	1007883a 	mov	r3,r2
 201a70c:	e0bff317 	ldw	r2,-52(fp)
 201a710:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 201a714:	e0bffb03 	ldbu	r2,-20(fp)
 201a718:	e0fffb03 	ldbu	r3,-20(fp)
 201a71c:	e13ff317 	ldw	r4,-52(fp)
 201a720:	20c7883a 	add	r3,r4,r3
 201a724:	18c002c4 	addi	r3,r3,11
 201a728:	19000003 	ldbu	r4,0(r3)
 201a72c:	e0fffbc3 	ldbu	r3,-17(fp)
 201a730:	20c6b03a 	or	r3,r4,r3
 201a734:	1809883a 	mov	r4,r3
 201a738:	e0fff317 	ldw	r3,-52(fp)
 201a73c:	1885883a 	add	r2,r3,r2
 201a740:	108002c4 	addi	r2,r2,11
 201a744:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 201a748:	e0bff817 	ldw	r2,-32(fp)
 201a74c:	10800817 	ldw	r2,32(r2)
 201a750:	10004226 	beq	r2,zero,201a85c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 201a754:	e0bff817 	ldw	r2,-32(fp)
 201a758:	10800817 	ldw	r2,32(r2)
 201a75c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 201a760:	e0bff417 	ldw	r2,-48(fp)
 201a764:	10800017 	ldw	r2,0(r2)
 201a768:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201a76c:	00003906 	br	201a854 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 201a770:	e0bffc03 	ldbu	r2,-16(fp)
 201a774:	e0fffc03 	ldbu	r3,-16(fp)
 201a778:	e13ff317 	ldw	r4,-52(fp)
 201a77c:	20c7883a 	add	r3,r4,r3
 201a780:	18c002c4 	addi	r3,r3,11
 201a784:	18c00003 	ldbu	r3,0(r3)
 201a788:	1809883a 	mov	r4,r3
 201a78c:	e0fffc83 	ldbu	r3,-14(fp)
 201a790:	00c6303a 	nor	r3,zero,r3
 201a794:	20c6703a 	and	r3,r4,r3
 201a798:	1809883a 	mov	r4,r3
 201a79c:	e0fff317 	ldw	r3,-52(fp)
 201a7a0:	1885883a 	add	r2,r3,r2
 201a7a4:	108002c4 	addi	r2,r2,11
 201a7a8:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201a7ac:	e0bffc03 	ldbu	r2,-16(fp)
 201a7b0:	e0fff317 	ldw	r3,-52(fp)
 201a7b4:	1885883a 	add	r2,r3,r2
 201a7b8:	108002c4 	addi	r2,r2,11
 201a7bc:	10800003 	ldbu	r2,0(r2)
 201a7c0:	10803fcc 	andi	r2,r2,255
 201a7c4:	1000091e 	bne	r2,zero,201a7ec <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 201a7c8:	e0bff317 	ldw	r2,-52(fp)
 201a7cc:	10800283 	ldbu	r2,10(r2)
 201a7d0:	1007883a 	mov	r3,r2
 201a7d4:	e0bffc43 	ldbu	r2,-15(fp)
 201a7d8:	0084303a 	nor	r2,zero,r2
 201a7dc:	1884703a 	and	r2,r3,r2
 201a7e0:	1007883a 	mov	r3,r2
 201a7e4:	e0bff317 	ldw	r2,-52(fp)
 201a7e8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 201a7ec:	e0bff317 	ldw	r2,-52(fp)
 201a7f0:	10c00283 	ldbu	r3,10(r2)
 201a7f4:	e0bffb83 	ldbu	r2,-18(fp)
 201a7f8:	1884b03a 	or	r2,r3,r2
 201a7fc:	1007883a 	mov	r3,r2
 201a800:	e0bff317 	ldw	r2,-52(fp)
 201a804:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 201a808:	e0bffb03 	ldbu	r2,-20(fp)
 201a80c:	e0fffb03 	ldbu	r3,-20(fp)
 201a810:	e13ff317 	ldw	r4,-52(fp)
 201a814:	20c7883a 	add	r3,r4,r3
 201a818:	18c002c4 	addi	r3,r3,11
 201a81c:	19000003 	ldbu	r4,0(r3)
 201a820:	e0fffbc3 	ldbu	r3,-17(fp)
 201a824:	20c6b03a 	or	r3,r4,r3
 201a828:	1809883a 	mov	r4,r3
 201a82c:	e0fff317 	ldw	r3,-52(fp)
 201a830:	1885883a 	add	r2,r3,r2
 201a834:	108002c4 	addi	r2,r2,11
 201a838:	11000005 	stb	r4,0(r2)
            pevents++;
 201a83c:	e0bff417 	ldw	r2,-48(fp)
 201a840:	10800104 	addi	r2,r2,4
 201a844:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 201a848:	e0bff417 	ldw	r2,-48(fp)
 201a84c:	10800017 	ldw	r2,0(r2)
 201a850:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 201a854:	e0bff317 	ldw	r2,-52(fp)
 201a858:	103fc51e 	bne	r2,zero,201a770 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201a85c:	e0bff817 	ldw	r2,-32(fp)
 201a860:	e0ffff03 	ldbu	r3,-4(fp)
 201a864:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 201a868:	e0bff817 	ldw	r2,-32(fp)
 201a86c:	e0fffb03 	ldbu	r3,-20(fp)
 201a870:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 201a874:	e0bff817 	ldw	r2,-32(fp)
 201a878:	e0fffb43 	ldbu	r3,-19(fp)
 201a87c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 201a880:	e0bff817 	ldw	r2,-32(fp)
 201a884:	e0fffb83 	ldbu	r3,-18(fp)
 201a888:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201a88c:	e0bff817 	ldw	r2,-32(fp)
 201a890:	e0fffbc3 	ldbu	r3,-17(fp)
 201a894:	10c00d45 	stb	r3,53(r2)
 201a898:	e0bff517 	ldw	r2,-44(fp)
 201a89c:	e0bffa15 	stw	r2,-24(fp)
 201a8a0:	e0bffa17 	ldw	r2,-24(fp)
 201a8a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201a8a8:	d0a73743 	ldbu	r2,-25379(gp)
 201a8ac:	10803fcc 	andi	r2,r2,255
 201a8b0:	10800058 	cmpnei	r2,r2,1
 201a8b4:	1000011e 	bne	r2,zero,201a8bc <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 201a8b8:	20156ec0 	call	20156ec <OS_Sched>
    }
    return (OS_ERR_NONE);
 201a8bc:	0005883a 	mov	r2,zero
}
 201a8c0:	e037883a 	mov	sp,fp
 201a8c4:	dfc00117 	ldw	ra,4(sp)
 201a8c8:	df000017 	ldw	fp,0(sp)
 201a8cc:	dec00204 	addi	sp,sp,8
 201a8d0:	f800283a 	ret

0201a8d4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 201a8d4:	deffee04 	addi	sp,sp,-72
 201a8d8:	dfc01115 	stw	ra,68(sp)
 201a8dc:	df001015 	stw	fp,64(sp)
 201a8e0:	df001004 	addi	fp,sp,64
 201a8e4:	e13ffc15 	stw	r4,-16(fp)
 201a8e8:	e17ffd15 	stw	r5,-12(fp)
 201a8ec:	e1bffe15 	stw	r6,-8(fp)
 201a8f0:	3805883a 	mov	r2,r7
 201a8f4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201a8f8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201a8fc:	e0bfff03 	ldbu	r2,-4(fp)
 201a900:	10800570 	cmpltui	r2,r2,21
 201a904:	1000021e 	bne	r2,zero,201a910 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201a908:	00800a84 	movi	r2,42
 201a90c:	00005706 	br	201aa6c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a910:	0005303a 	rdctl	r2,status
 201a914:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a918:	e0fffb17 	ldw	r3,-20(fp)
 201a91c:	00bfff84 	movi	r2,-2
 201a920:	1884703a 	and	r2,r3,r2
 201a924:	1001703a 	wrctl	status,r2
  
  return context;
 201a928:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201a92c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201a930:	d0a74503 	ldbu	r2,-25324(gp)
 201a934:	10803fcc 	andi	r2,r2,255
 201a938:	10000626 	beq	r2,zero,201a954 <OSTaskCreate+0x80>
 201a93c:	e0bff317 	ldw	r2,-52(fp)
 201a940:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a944:	e0bff417 	ldw	r2,-48(fp)
 201a948:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201a94c:	00800f04 	movi	r2,60
 201a950:	00004606 	br	201aa6c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201a954:	e0ffff03 	ldbu	r3,-4(fp)
 201a958:	008080f4 	movhi	r2,515
 201a95c:	10b5ea04 	addi	r2,r2,-10328
 201a960:	18c7883a 	add	r3,r3,r3
 201a964:	18c7883a 	add	r3,r3,r3
 201a968:	10c5883a 	add	r2,r2,r3
 201a96c:	10800017 	ldw	r2,0(r2)
 201a970:	1000391e 	bne	r2,zero,201aa58 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201a974:	e0ffff03 	ldbu	r3,-4(fp)
 201a978:	008080f4 	movhi	r2,515
 201a97c:	10b5ea04 	addi	r2,r2,-10328
 201a980:	18c7883a 	add	r3,r3,r3
 201a984:	18c7883a 	add	r3,r3,r3
 201a988:	10c5883a 	add	r2,r2,r3
 201a98c:	00c00044 	movi	r3,1
 201a990:	10c00015 	stw	r3,0(r2)
 201a994:	e0bff317 	ldw	r2,-52(fp)
 201a998:	e0bff515 	stw	r2,-44(fp)
 201a99c:	e0bff517 	ldw	r2,-44(fp)
 201a9a0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 201a9a4:	000f883a 	mov	r7,zero
 201a9a8:	e1bffe17 	ldw	r6,-8(fp)
 201a9ac:	e17ffd17 	ldw	r5,-12(fp)
 201a9b0:	e13ffc17 	ldw	r4,-16(fp)
 201a9b4:	201db380 	call	201db38 <OSTaskStkInit>
 201a9b8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 201a9bc:	e0bfff03 	ldbu	r2,-4(fp)
 201a9c0:	d8000215 	stw	zero,8(sp)
 201a9c4:	d8000115 	stw	zero,4(sp)
 201a9c8:	d8000015 	stw	zero,0(sp)
 201a9cc:	000f883a 	mov	r7,zero
 201a9d0:	000d883a 	mov	r6,zero
 201a9d4:	e17ff717 	ldw	r5,-36(fp)
 201a9d8:	1009883a 	mov	r4,r2
 201a9dc:	2015aec0 	call	2015aec <OS_TCBInit>
 201a9e0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 201a9e4:	e0bff803 	ldbu	r2,-32(fp)
 201a9e8:	1000061e 	bne	r2,zero,201aa04 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 201a9ec:	d0a73743 	ldbu	r2,-25379(gp)
 201a9f0:	10803fcc 	andi	r2,r2,255
 201a9f4:	10800058 	cmpnei	r2,r2,1
 201a9f8:	1000151e 	bne	r2,zero,201aa50 <OSTaskCreate+0x17c>
                OS_Sched();
 201a9fc:	20156ec0 	call	20156ec <OS_Sched>
 201aa00:	00001306 	br	201aa50 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aa04:	0005303a 	rdctl	r2,status
 201aa08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aa0c:	e0fffa17 	ldw	r3,-24(fp)
 201aa10:	00bfff84 	movi	r2,-2
 201aa14:	1884703a 	and	r2,r3,r2
 201aa18:	1001703a 	wrctl	status,r2
  
  return context;
 201aa1c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201aa20:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 201aa24:	e0ffff03 	ldbu	r3,-4(fp)
 201aa28:	008080f4 	movhi	r2,515
 201aa2c:	10b5ea04 	addi	r2,r2,-10328
 201aa30:	18c7883a 	add	r3,r3,r3
 201aa34:	18c7883a 	add	r3,r3,r3
 201aa38:	10c5883a 	add	r2,r2,r3
 201aa3c:	10000015 	stw	zero,0(r2)
 201aa40:	e0bff317 	ldw	r2,-52(fp)
 201aa44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201aa48:	e0bff617 	ldw	r2,-40(fp)
 201aa4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201aa50:	e0bff803 	ldbu	r2,-32(fp)
 201aa54:	00000506 	br	201aa6c <OSTaskCreate+0x198>
 201aa58:	e0bff317 	ldw	r2,-52(fp)
 201aa5c:	e0bff915 	stw	r2,-28(fp)
 201aa60:	e0bff917 	ldw	r2,-28(fp)
 201aa64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201aa68:	00800a04 	movi	r2,40
}
 201aa6c:	e037883a 	mov	sp,fp
 201aa70:	dfc00117 	ldw	ra,4(sp)
 201aa74:	df000017 	ldw	fp,0(sp)
 201aa78:	dec00204 	addi	sp,sp,8
 201aa7c:	f800283a 	ret

0201aa80 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 201aa80:	deffec04 	addi	sp,sp,-80
 201aa84:	dfc01315 	stw	ra,76(sp)
 201aa88:	df001215 	stw	fp,72(sp)
 201aa8c:	df001204 	addi	fp,sp,72
 201aa90:	e13ffa15 	stw	r4,-24(fp)
 201aa94:	e17ffb15 	stw	r5,-20(fp)
 201aa98:	e1bffc15 	stw	r6,-16(fp)
 201aa9c:	3809883a 	mov	r4,r7
 201aaa0:	e0c00217 	ldw	r3,8(fp)
 201aaa4:	e0800617 	ldw	r2,24(fp)
 201aaa8:	e13ffd05 	stb	r4,-12(fp)
 201aaac:	e0fffe0d 	sth	r3,-8(fp)
 201aab0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201aab4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201aab8:	e0bffd03 	ldbu	r2,-12(fp)
 201aabc:	10800570 	cmpltui	r2,r2,21
 201aac0:	1000021e 	bne	r2,zero,201aacc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 201aac4:	00800a84 	movi	r2,42
 201aac8:	00006106 	br	201ac50 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aacc:	0005303a 	rdctl	r2,status
 201aad0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aad4:	e0fff917 	ldw	r3,-28(fp)
 201aad8:	00bfff84 	movi	r2,-2
 201aadc:	1884703a 	and	r2,r3,r2
 201aae0:	1001703a 	wrctl	status,r2
  
  return context;
 201aae4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201aae8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201aaec:	d0a74503 	ldbu	r2,-25324(gp)
 201aaf0:	10803fcc 	andi	r2,r2,255
 201aaf4:	10000626 	beq	r2,zero,201ab10 <OSTaskCreateExt+0x90>
 201aaf8:	e0bff117 	ldw	r2,-60(fp)
 201aafc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ab00:	e0bff217 	ldw	r2,-56(fp)
 201ab04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201ab08:	00800f04 	movi	r2,60
 201ab0c:	00005006 	br	201ac50 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201ab10:	e0fffd03 	ldbu	r3,-12(fp)
 201ab14:	008080f4 	movhi	r2,515
 201ab18:	10b5ea04 	addi	r2,r2,-10328
 201ab1c:	18c7883a 	add	r3,r3,r3
 201ab20:	18c7883a 	add	r3,r3,r3
 201ab24:	10c5883a 	add	r2,r2,r3
 201ab28:	10800017 	ldw	r2,0(r2)
 201ab2c:	1000431e 	bne	r2,zero,201ac3c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201ab30:	e0fffd03 	ldbu	r3,-12(fp)
 201ab34:	008080f4 	movhi	r2,515
 201ab38:	10b5ea04 	addi	r2,r2,-10328
 201ab3c:	18c7883a 	add	r3,r3,r3
 201ab40:	18c7883a 	add	r3,r3,r3
 201ab44:	10c5883a 	add	r2,r2,r3
 201ab48:	00c00044 	movi	r3,1
 201ab4c:	10c00015 	stw	r3,0(r2)
 201ab50:	e0bff117 	ldw	r2,-60(fp)
 201ab54:	e0bff315 	stw	r2,-52(fp)
 201ab58:	e0bff317 	ldw	r2,-52(fp)
 201ab5c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 201ab60:	e0bfff0b 	ldhu	r2,-4(fp)
 201ab64:	100d883a 	mov	r6,r2
 201ab68:	e1400417 	ldw	r5,16(fp)
 201ab6c:	e1000317 	ldw	r4,12(fp)
 201ab70:	201bae00 	call	201bae0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 201ab74:	e0bfff0b 	ldhu	r2,-4(fp)
 201ab78:	100f883a 	mov	r7,r2
 201ab7c:	e1bffc17 	ldw	r6,-16(fp)
 201ab80:	e17ffb17 	ldw	r5,-20(fp)
 201ab84:	e13ffa17 	ldw	r4,-24(fp)
 201ab88:	201db380 	call	201db38 <OSTaskStkInit>
 201ab8c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 201ab90:	e0fffd03 	ldbu	r3,-12(fp)
 201ab94:	e13ffe0b 	ldhu	r4,-8(fp)
 201ab98:	e0bfff0b 	ldhu	r2,-4(fp)
 201ab9c:	d8800215 	stw	r2,8(sp)
 201aba0:	e0800517 	ldw	r2,20(fp)
 201aba4:	d8800115 	stw	r2,4(sp)
 201aba8:	e0800417 	ldw	r2,16(fp)
 201abac:	d8800015 	stw	r2,0(sp)
 201abb0:	200f883a 	mov	r7,r4
 201abb4:	e1800317 	ldw	r6,12(fp)
 201abb8:	e17ff517 	ldw	r5,-44(fp)
 201abbc:	1809883a 	mov	r4,r3
 201abc0:	2015aec0 	call	2015aec <OS_TCBInit>
 201abc4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 201abc8:	e0bff603 	ldbu	r2,-40(fp)
 201abcc:	1000061e 	bne	r2,zero,201abe8 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 201abd0:	d0a73743 	ldbu	r2,-25379(gp)
 201abd4:	10803fcc 	andi	r2,r2,255
 201abd8:	10800058 	cmpnei	r2,r2,1
 201abdc:	1000151e 	bne	r2,zero,201ac34 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 201abe0:	20156ec0 	call	20156ec <OS_Sched>
 201abe4:	00001306 	br	201ac34 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201abe8:	0005303a 	rdctl	r2,status
 201abec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201abf0:	e0fff817 	ldw	r3,-32(fp)
 201abf4:	00bfff84 	movi	r2,-2
 201abf8:	1884703a 	and	r2,r3,r2
 201abfc:	1001703a 	wrctl	status,r2
  
  return context;
 201ac00:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201ac04:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201ac08:	e0fffd03 	ldbu	r3,-12(fp)
 201ac0c:	008080f4 	movhi	r2,515
 201ac10:	10b5ea04 	addi	r2,r2,-10328
 201ac14:	18c7883a 	add	r3,r3,r3
 201ac18:	18c7883a 	add	r3,r3,r3
 201ac1c:	10c5883a 	add	r2,r2,r3
 201ac20:	10000015 	stw	zero,0(r2)
 201ac24:	e0bff117 	ldw	r2,-60(fp)
 201ac28:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ac2c:	e0bff417 	ldw	r2,-48(fp)
 201ac30:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201ac34:	e0bff603 	ldbu	r2,-40(fp)
 201ac38:	00000506 	br	201ac50 <OSTaskCreateExt+0x1d0>
 201ac3c:	e0bff117 	ldw	r2,-60(fp)
 201ac40:	e0bff715 	stw	r2,-36(fp)
 201ac44:	e0bff717 	ldw	r2,-36(fp)
 201ac48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201ac4c:	00800a04 	movi	r2,40
}
 201ac50:	e037883a 	mov	sp,fp
 201ac54:	dfc00117 	ldw	ra,4(sp)
 201ac58:	df000017 	ldw	fp,0(sp)
 201ac5c:	dec00204 	addi	sp,sp,8
 201ac60:	f800283a 	ret

0201ac64 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201ac64:	defff404 	addi	sp,sp,-48
 201ac68:	dfc00b15 	stw	ra,44(sp)
 201ac6c:	df000a15 	stw	fp,40(sp)
 201ac70:	df000a04 	addi	fp,sp,40
 201ac74:	2005883a 	mov	r2,r4
 201ac78:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 201ac7c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 201ac80:	d0a74503 	ldbu	r2,-25324(gp)
 201ac84:	10803fcc 	andi	r2,r2,255
 201ac88:	10000226 	beq	r2,zero,201ac94 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 201ac8c:	00801004 	movi	r2,64
 201ac90:	0000c006 	br	201af94 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 201ac94:	e0bfff03 	ldbu	r2,-4(fp)
 201ac98:	10800518 	cmpnei	r2,r2,20
 201ac9c:	1000021e 	bne	r2,zero,201aca8 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 201aca0:	00800f84 	movi	r2,62
 201aca4:	0000bb06 	br	201af94 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201aca8:	e0bfff03 	ldbu	r2,-4(fp)
 201acac:	10800530 	cmpltui	r2,r2,20
 201acb0:	1000051e 	bne	r2,zero,201acc8 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 201acb4:	e0bfff03 	ldbu	r2,-4(fp)
 201acb8:	10803fe0 	cmpeqi	r2,r2,255
 201acbc:	1000021e 	bne	r2,zero,201acc8 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 201acc0:	00800a84 	movi	r2,42
 201acc4:	0000b306 	br	201af94 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201acc8:	0005303a 	rdctl	r2,status
 201accc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201acd0:	e0fffe17 	ldw	r3,-8(fp)
 201acd4:	00bfff84 	movi	r2,-2
 201acd8:	1884703a 	and	r2,r3,r2
 201acdc:	1001703a 	wrctl	status,r2
  
  return context;
 201ace0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201ace4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201ace8:	e0bfff03 	ldbu	r2,-4(fp)
 201acec:	10803fd8 	cmpnei	r2,r2,255
 201acf0:	1000031e 	bne	r2,zero,201ad00 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 201acf4:	d0a74617 	ldw	r2,-25320(gp)
 201acf8:	10800c83 	ldbu	r2,50(r2)
 201acfc:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ad00:	e0ffff03 	ldbu	r3,-4(fp)
 201ad04:	008080f4 	movhi	r2,515
 201ad08:	10b5ea04 	addi	r2,r2,-10328
 201ad0c:	18c7883a 	add	r3,r3,r3
 201ad10:	18c7883a 	add	r3,r3,r3
 201ad14:	10c5883a 	add	r2,r2,r3
 201ad18:	10800017 	ldw	r2,0(r2)
 201ad1c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201ad20:	e0bff817 	ldw	r2,-32(fp)
 201ad24:	1000061e 	bne	r2,zero,201ad40 <OSTaskDel+0xdc>
 201ad28:	e0bff617 	ldw	r2,-40(fp)
 201ad2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ad30:	e0bff717 	ldw	r2,-36(fp)
 201ad34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201ad38:	008010c4 	movi	r2,67
 201ad3c:	00009506 	br	201af94 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201ad40:	e0bff817 	ldw	r2,-32(fp)
 201ad44:	10800058 	cmpnei	r2,r2,1
 201ad48:	1000061e 	bne	r2,zero,201ad64 <OSTaskDel+0x100>
 201ad4c:	e0bff617 	ldw	r2,-40(fp)
 201ad50:	e0bff915 	stw	r2,-28(fp)
 201ad54:	e0bff917 	ldw	r2,-28(fp)
 201ad58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201ad5c:	00800f44 	movi	r2,61
 201ad60:	00008c06 	br	201af94 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 201ad64:	e0bff817 	ldw	r2,-32(fp)
 201ad68:	10800d03 	ldbu	r2,52(r2)
 201ad6c:	10c03fcc 	andi	r3,r2,255
 201ad70:	e0bff817 	ldw	r2,-32(fp)
 201ad74:	10800d03 	ldbu	r2,52(r2)
 201ad78:	11003fcc 	andi	r4,r2,255
 201ad7c:	d0a74344 	addi	r2,gp,-25331
 201ad80:	2085883a 	add	r2,r4,r2
 201ad84:	10800003 	ldbu	r2,0(r2)
 201ad88:	1009883a 	mov	r4,r2
 201ad8c:	e0bff817 	ldw	r2,-32(fp)
 201ad90:	10800d43 	ldbu	r2,53(r2)
 201ad94:	0084303a 	nor	r2,zero,r2
 201ad98:	2084703a 	and	r2,r4,r2
 201ad9c:	1009883a 	mov	r4,r2
 201ada0:	d0a74344 	addi	r2,gp,-25331
 201ada4:	1885883a 	add	r2,r3,r2
 201ada8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 201adac:	e0bff817 	ldw	r2,-32(fp)
 201adb0:	10800d03 	ldbu	r2,52(r2)
 201adb4:	10c03fcc 	andi	r3,r2,255
 201adb8:	d0a74344 	addi	r2,gp,-25331
 201adbc:	1885883a 	add	r2,r3,r2
 201adc0:	10800003 	ldbu	r2,0(r2)
 201adc4:	10803fcc 	andi	r2,r2,255
 201adc8:	1000071e 	bne	r2,zero,201ade8 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201adcc:	e0bff817 	ldw	r2,-32(fp)
 201add0:	10800d83 	ldbu	r2,54(r2)
 201add4:	0084303a 	nor	r2,zero,r2
 201add8:	1007883a 	mov	r3,r2
 201addc:	d0a74303 	ldbu	r2,-25332(gp)
 201ade0:	1884703a 	and	r2,r3,r2
 201ade4:	d0a74305 	stb	r2,-25332(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201ade8:	e0bff817 	ldw	r2,-32(fp)
 201adec:	10800717 	ldw	r2,28(r2)
 201adf0:	10000526 	beq	r2,zero,201ae08 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201adf4:	e0bff817 	ldw	r2,-32(fp)
 201adf8:	10800717 	ldw	r2,28(r2)
 201adfc:	100b883a 	mov	r5,r2
 201ae00:	e13ff817 	ldw	r4,-32(fp)
 201ae04:	20150980 	call	2015098 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201ae08:	e0bff817 	ldw	r2,-32(fp)
 201ae0c:	10800817 	ldw	r2,32(r2)
 201ae10:	10000526 	beq	r2,zero,201ae28 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201ae14:	e0bff817 	ldw	r2,-32(fp)
 201ae18:	10800817 	ldw	r2,32(r2)
 201ae1c:	100b883a 	mov	r5,r2
 201ae20:	e13ff817 	ldw	r4,-32(fp)
 201ae24:	20151500 	call	2015150 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201ae28:	e0bff817 	ldw	r2,-32(fp)
 201ae2c:	10800a17 	ldw	r2,40(r2)
 201ae30:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 201ae34:	e0bffb17 	ldw	r2,-20(fp)
 201ae38:	10000226 	beq	r2,zero,201ae44 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 201ae3c:	e13ffb17 	ldw	r4,-20(fp)
 201ae40:	20175c00 	call	20175c0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201ae44:	e0bff817 	ldw	r2,-32(fp)
 201ae48:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 201ae4c:	e0bff817 	ldw	r2,-32(fp)
 201ae50:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 201ae54:	e0bff817 	ldw	r2,-32(fp)
 201ae58:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 201ae5c:	d0a73703 	ldbu	r2,-25380(gp)
 201ae60:	10803fcc 	andi	r2,r2,255
 201ae64:	10803fe0 	cmpeqi	r2,r2,255
 201ae68:	1000031e 	bne	r2,zero,201ae78 <OSTaskDel+0x214>
        OSLockNesting++;
 201ae6c:	d0a73703 	ldbu	r2,-25380(gp)
 201ae70:	10800044 	addi	r2,r2,1
 201ae74:	d0a73705 	stb	r2,-25380(gp)
 201ae78:	e0bff617 	ldw	r2,-40(fp)
 201ae7c:	e0bffd15 	stw	r2,-12(fp)
 201ae80:	e0bffd17 	ldw	r2,-12(fp)
 201ae84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201ae88:	2014c800 	call	2014c80 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ae8c:	0005303a 	rdctl	r2,status
 201ae90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ae94:	e0fffa17 	ldw	r3,-24(fp)
 201ae98:	00bfff84 	movi	r2,-2
 201ae9c:	1884703a 	and	r2,r3,r2
 201aea0:	1001703a 	wrctl	status,r2
  
  return context;
 201aea4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201aea8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 201aeac:	d0a73703 	ldbu	r2,-25380(gp)
 201aeb0:	10803fcc 	andi	r2,r2,255
 201aeb4:	10000326 	beq	r2,zero,201aec4 <OSTaskDel+0x260>
        OSLockNesting--;
 201aeb8:	d0a73703 	ldbu	r2,-25380(gp)
 201aebc:	10bfffc4 	addi	r2,r2,-1
 201aec0:	d0a73705 	stb	r2,-25380(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 201aec4:	e13ff817 	ldw	r4,-32(fp)
 201aec8:	201dcb80 	call	201dcb8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 201aecc:	d0a73f43 	ldbu	r2,-25347(gp)
 201aed0:	10bfffc4 	addi	r2,r2,-1
 201aed4:	d0a73f45 	stb	r2,-25347(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201aed8:	e0ffff03 	ldbu	r3,-4(fp)
 201aedc:	008080f4 	movhi	r2,515
 201aee0:	10b5ea04 	addi	r2,r2,-10328
 201aee4:	18c7883a 	add	r3,r3,r3
 201aee8:	18c7883a 	add	r3,r3,r3
 201aeec:	10c5883a 	add	r2,r2,r3
 201aef0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201aef4:	e0bff817 	ldw	r2,-32(fp)
 201aef8:	10800617 	ldw	r2,24(r2)
 201aefc:	1000071e 	bne	r2,zero,201af1c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 201af00:	e0bff817 	ldw	r2,-32(fp)
 201af04:	10800517 	ldw	r2,20(r2)
 201af08:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201af0c:	e0bff817 	ldw	r2,-32(fp)
 201af10:	10800517 	ldw	r2,20(r2)
 201af14:	d0a73a15 	stw	r2,-25368(gp)
 201af18:	00000a06 	br	201af44 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201af1c:	e0bff817 	ldw	r2,-32(fp)
 201af20:	10800617 	ldw	r2,24(r2)
 201af24:	e0fff817 	ldw	r3,-32(fp)
 201af28:	18c00517 	ldw	r3,20(r3)
 201af2c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 201af30:	e0bff817 	ldw	r2,-32(fp)
 201af34:	10800517 	ldw	r2,20(r2)
 201af38:	e0fff817 	ldw	r3,-32(fp)
 201af3c:	18c00617 	ldw	r3,24(r3)
 201af40:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 201af44:	d0e73e17 	ldw	r3,-25352(gp)
 201af48:	e0bff817 	ldw	r2,-32(fp)
 201af4c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201af50:	e0bff817 	ldw	r2,-32(fp)
 201af54:	d0a73e15 	stw	r2,-25352(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201af58:	e0bff817 	ldw	r2,-32(fp)
 201af5c:	00c00fc4 	movi	r3,63
 201af60:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 201af64:	e0bff817 	ldw	r2,-32(fp)
 201af68:	10001345 	stb	zero,77(r2)
 201af6c:	e0bff617 	ldw	r2,-40(fp)
 201af70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201af74:	e0bffc17 	ldw	r2,-16(fp)
 201af78:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201af7c:	d0a73743 	ldbu	r2,-25379(gp)
 201af80:	10803fcc 	andi	r2,r2,255
 201af84:	10800058 	cmpnei	r2,r2,1
 201af88:	1000011e 	bne	r2,zero,201af90 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 201af8c:	20156ec0 	call	20156ec <OS_Sched>
    }
    return (OS_ERR_NONE);
 201af90:	0005883a 	mov	r2,zero
}
 201af94:	e037883a 	mov	sp,fp
 201af98:	dfc00117 	ldw	ra,4(sp)
 201af9c:	df000017 	ldw	fp,0(sp)
 201afa0:	dec00204 	addi	sp,sp,8
 201afa4:	f800283a 	ret

0201afa8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201afa8:	defff504 	addi	sp,sp,-44
 201afac:	df000a15 	stw	fp,40(sp)
 201afb0:	df000a04 	addi	fp,sp,40
 201afb4:	2005883a 	mov	r2,r4
 201afb8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201afbc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201afc0:	e0bfff03 	ldbu	r2,-4(fp)
 201afc4:	10800518 	cmpnei	r2,r2,20
 201afc8:	1000021e 	bne	r2,zero,201afd4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 201afcc:	00800f84 	movi	r2,62
 201afd0:	00004506 	br	201b0e8 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201afd4:	e0bfff03 	ldbu	r2,-4(fp)
 201afd8:	10800530 	cmpltui	r2,r2,20
 201afdc:	1000051e 	bne	r2,zero,201aff4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 201afe0:	e0bfff03 	ldbu	r2,-4(fp)
 201afe4:	10803fe0 	cmpeqi	r2,r2,255
 201afe8:	1000021e 	bne	r2,zero,201aff4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 201afec:	00800a84 	movi	r2,42
 201aff0:	00003d06 	br	201b0e8 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 201aff4:	e0bfff03 	ldbu	r2,-4(fp)
 201aff8:	10803fd8 	cmpnei	r2,r2,255
 201affc:	1000111e 	bne	r2,zero,201b044 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b000:	0005303a 	rdctl	r2,status
 201b004:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b008:	e0fff917 	ldw	r3,-28(fp)
 201b00c:	00bfff84 	movi	r2,-2
 201b010:	1884703a 	and	r2,r3,r2
 201b014:	1001703a 	wrctl	status,r2
  
  return context;
 201b018:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201b01c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 201b020:	d0a74617 	ldw	r2,-25320(gp)
 201b024:	10800dc3 	ldbu	r2,55(r2)
 201b028:	e0bff805 	stb	r2,-32(fp)
 201b02c:	e0bff617 	ldw	r2,-40(fp)
 201b030:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b034:	e0bffe17 	ldw	r2,-8(fp)
 201b038:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201b03c:	e0bff803 	ldbu	r2,-32(fp)
 201b040:	00002906 	br	201b0e8 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b044:	0005303a 	rdctl	r2,status
 201b048:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b04c:	e0fff717 	ldw	r3,-36(fp)
 201b050:	00bfff84 	movi	r2,-2
 201b054:	1884703a 	and	r2,r3,r2
 201b058:	1001703a 	wrctl	status,r2
  
  return context;
 201b05c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 201b060:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201b064:	e0ffff03 	ldbu	r3,-4(fp)
 201b068:	008080f4 	movhi	r2,515
 201b06c:	10b5ea04 	addi	r2,r2,-10328
 201b070:	18c7883a 	add	r3,r3,r3
 201b074:	18c7883a 	add	r3,r3,r3
 201b078:	10c5883a 	add	r2,r2,r3
 201b07c:	10800017 	ldw	r2,0(r2)
 201b080:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 201b084:	e0bffb17 	ldw	r2,-20(fp)
 201b088:	1000061e 	bne	r2,zero,201b0a4 <OSTaskDelReq+0xfc>
 201b08c:	e0bff617 	ldw	r2,-40(fp)
 201b090:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b094:	e0bffa17 	ldw	r2,-24(fp)
 201b098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 201b09c:	008010c4 	movi	r2,67
 201b0a0:	00001106 	br	201b0e8 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201b0a4:	e0bffb17 	ldw	r2,-20(fp)
 201b0a8:	10800058 	cmpnei	r2,r2,1
 201b0ac:	1000061e 	bne	r2,zero,201b0c8 <OSTaskDelReq+0x120>
 201b0b0:	e0bff617 	ldw	r2,-40(fp)
 201b0b4:	e0bffc15 	stw	r2,-16(fp)
 201b0b8:	e0bffc17 	ldw	r2,-16(fp)
 201b0bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201b0c0:	00800f44 	movi	r2,61
 201b0c4:	00000806 	br	201b0e8 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201b0c8:	e0bffb17 	ldw	r2,-20(fp)
 201b0cc:	00c00fc4 	movi	r3,63
 201b0d0:	10c00dc5 	stb	r3,55(r2)
 201b0d4:	e0bff617 	ldw	r2,-40(fp)
 201b0d8:	e0bffd15 	stw	r2,-12(fp)
 201b0dc:	e0bffd17 	ldw	r2,-12(fp)
 201b0e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201b0e4:	0005883a 	mov	r2,zero
}
 201b0e8:	e037883a 	mov	sp,fp
 201b0ec:	df000017 	ldw	fp,0(sp)
 201b0f0:	dec00104 	addi	sp,sp,4
 201b0f4:	f800283a 	ret

0201b0f8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201b0f8:	defff404 	addi	sp,sp,-48
 201b0fc:	dfc00b15 	stw	ra,44(sp)
 201b100:	df000a15 	stw	fp,40(sp)
 201b104:	df000a04 	addi	fp,sp,40
 201b108:	2005883a 	mov	r2,r4
 201b10c:	e17ffe15 	stw	r5,-8(fp)
 201b110:	e1bfff15 	stw	r6,-4(fp)
 201b114:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201b118:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201b11c:	e0bfff17 	ldw	r2,-4(fp)
 201b120:	1000021e 	bne	r2,zero,201b12c <OSTaskNameGet+0x34>
        return (0);
 201b124:	0005883a 	mov	r2,zero
 201b128:	00005406 	br	201b27c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201b12c:	e0bffd03 	ldbu	r2,-12(fp)
 201b130:	10800570 	cmpltui	r2,r2,21
 201b134:	1000081e 	bne	r2,zero,201b158 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 201b138:	e0bffd03 	ldbu	r2,-12(fp)
 201b13c:	10803fe0 	cmpeqi	r2,r2,255
 201b140:	1000051e 	bne	r2,zero,201b158 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 201b144:	e0bfff17 	ldw	r2,-4(fp)
 201b148:	00c00a84 	movi	r3,42
 201b14c:	10c00005 	stb	r3,0(r2)
            return (0);
 201b150:	0005883a 	mov	r2,zero
 201b154:	00004906 	br	201b27c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 201b158:	e0bffe17 	ldw	r2,-8(fp)
 201b15c:	1000051e 	bne	r2,zero,201b174 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 201b160:	e0bfff17 	ldw	r2,-4(fp)
 201b164:	00c00304 	movi	r3,12
 201b168:	10c00005 	stb	r3,0(r2)
        return (0);
 201b16c:	0005883a 	mov	r2,zero
 201b170:	00004206 	br	201b27c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 201b174:	d0a74503 	ldbu	r2,-25324(gp)
 201b178:	10803fcc 	andi	r2,r2,255
 201b17c:	10000526 	beq	r2,zero,201b194 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 201b180:	e0bfff17 	ldw	r2,-4(fp)
 201b184:	00c00444 	movi	r3,17
 201b188:	10c00005 	stb	r3,0(r2)
        return (0);
 201b18c:	0005883a 	mov	r2,zero
 201b190:	00003a06 	br	201b27c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b194:	0005303a 	rdctl	r2,status
 201b198:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b19c:	e0fffc17 	ldw	r3,-16(fp)
 201b1a0:	00bfff84 	movi	r2,-2
 201b1a4:	1884703a 	and	r2,r3,r2
 201b1a8:	1001703a 	wrctl	status,r2
  
  return context;
 201b1ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b1b0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 201b1b4:	e0bffd03 	ldbu	r2,-12(fp)
 201b1b8:	10803fd8 	cmpnei	r2,r2,255
 201b1bc:	1000031e 	bne	r2,zero,201b1cc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 201b1c0:	d0a74617 	ldw	r2,-25320(gp)
 201b1c4:	10800c83 	ldbu	r2,50(r2)
 201b1c8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b1cc:	e0fffd03 	ldbu	r3,-12(fp)
 201b1d0:	008080f4 	movhi	r2,515
 201b1d4:	10b5ea04 	addi	r2,r2,-10328
 201b1d8:	18c7883a 	add	r3,r3,r3
 201b1dc:	18c7883a 	add	r3,r3,r3
 201b1e0:	10c5883a 	add	r2,r2,r3
 201b1e4:	10800017 	ldw	r2,0(r2)
 201b1e8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 201b1ec:	e0bff817 	ldw	r2,-32(fp)
 201b1f0:	1000091e 	bne	r2,zero,201b218 <OSTaskNameGet+0x120>
 201b1f4:	e0bff617 	ldw	r2,-40(fp)
 201b1f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b1fc:	e0bff717 	ldw	r2,-36(fp)
 201b200:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b204:	e0bfff17 	ldw	r2,-4(fp)
 201b208:	00c010c4 	movi	r3,67
 201b20c:	10c00005 	stb	r3,0(r2)
        return (0);
 201b210:	0005883a 	mov	r2,zero
 201b214:	00001906 	br	201b27c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201b218:	e0bff817 	ldw	r2,-32(fp)
 201b21c:	10800058 	cmpnei	r2,r2,1
 201b220:	1000091e 	bne	r2,zero,201b248 <OSTaskNameGet+0x150>
 201b224:	e0bff617 	ldw	r2,-40(fp)
 201b228:	e0bff915 	stw	r2,-28(fp)
 201b22c:	e0bff917 	ldw	r2,-28(fp)
 201b230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b234:	e0bfff17 	ldw	r2,-4(fp)
 201b238:	00c010c4 	movi	r3,67
 201b23c:	10c00005 	stb	r3,0(r2)
        return (0);
 201b240:	0005883a 	mov	r2,zero
 201b244:	00000d06 	br	201b27c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 201b248:	e0bff817 	ldw	r2,-32(fp)
 201b24c:	10801304 	addi	r2,r2,76
 201b250:	100b883a 	mov	r5,r2
 201b254:	e13ffe17 	ldw	r4,-8(fp)
 201b258:	20158300 	call	2015830 <OS_StrCopy>
 201b25c:	e0bffb05 	stb	r2,-20(fp)
 201b260:	e0bff617 	ldw	r2,-40(fp)
 201b264:	e0bffa15 	stw	r2,-24(fp)
 201b268:	e0bffa17 	ldw	r2,-24(fp)
 201b26c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b270:	e0bfff17 	ldw	r2,-4(fp)
 201b274:	10000005 	stb	zero,0(r2)
    return (len);
 201b278:	e0bffb03 	ldbu	r2,-20(fp)
}
 201b27c:	e037883a 	mov	sp,fp
 201b280:	dfc00117 	ldw	ra,4(sp)
 201b284:	df000017 	ldw	fp,0(sp)
 201b288:	dec00204 	addi	sp,sp,8
 201b28c:	f800283a 	ret

0201b290 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201b290:	defff304 	addi	sp,sp,-52
 201b294:	dfc00c15 	stw	ra,48(sp)
 201b298:	df000b15 	stw	fp,44(sp)
 201b29c:	df000b04 	addi	fp,sp,44
 201b2a0:	2005883a 	mov	r2,r4
 201b2a4:	e17ffe15 	stw	r5,-8(fp)
 201b2a8:	e1bfff15 	stw	r6,-4(fp)
 201b2ac:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201b2b0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201b2b4:	e0bfff17 	ldw	r2,-4(fp)
 201b2b8:	10005c26 	beq	r2,zero,201b42c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 201b2bc:	e0bffd03 	ldbu	r2,-12(fp)
 201b2c0:	10800570 	cmpltui	r2,r2,21
 201b2c4:	1000071e 	bne	r2,zero,201b2e4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 201b2c8:	e0bffd03 	ldbu	r2,-12(fp)
 201b2cc:	10803fe0 	cmpeqi	r2,r2,255
 201b2d0:	1000041e 	bne	r2,zero,201b2e4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 201b2d4:	e0bfff17 	ldw	r2,-4(fp)
 201b2d8:	00c00a84 	movi	r3,42
 201b2dc:	10c00005 	stb	r3,0(r2)
            return;
 201b2e0:	00005306 	br	201b430 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 201b2e4:	e0bffe17 	ldw	r2,-8(fp)
 201b2e8:	1000041e 	bne	r2,zero,201b2fc <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 201b2ec:	e0bfff17 	ldw	r2,-4(fp)
 201b2f0:	00c00304 	movi	r3,12
 201b2f4:	10c00005 	stb	r3,0(r2)
        return;
 201b2f8:	00004d06 	br	201b430 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201b2fc:	d0a74503 	ldbu	r2,-25324(gp)
 201b300:	10803fcc 	andi	r2,r2,255
 201b304:	10000426 	beq	r2,zero,201b318 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 201b308:	e0bfff17 	ldw	r2,-4(fp)
 201b30c:	00c00484 	movi	r3,18
 201b310:	10c00005 	stb	r3,0(r2)
        return;
 201b314:	00004606 	br	201b430 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b318:	0005303a 	rdctl	r2,status
 201b31c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b320:	e0fffc17 	ldw	r3,-16(fp)
 201b324:	00bfff84 	movi	r2,-2
 201b328:	1884703a 	and	r2,r3,r2
 201b32c:	1001703a 	wrctl	status,r2
  
  return context;
 201b330:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201b334:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201b338:	e0bffd03 	ldbu	r2,-12(fp)
 201b33c:	10803fd8 	cmpnei	r2,r2,255
 201b340:	1000031e 	bne	r2,zero,201b350 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 201b344:	d0a74617 	ldw	r2,-25320(gp)
 201b348:	10800c83 	ldbu	r2,50(r2)
 201b34c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b350:	e0fffd03 	ldbu	r3,-12(fp)
 201b354:	008080f4 	movhi	r2,515
 201b358:	10b5ea04 	addi	r2,r2,-10328
 201b35c:	18c7883a 	add	r3,r3,r3
 201b360:	18c7883a 	add	r3,r3,r3
 201b364:	10c5883a 	add	r2,r2,r3
 201b368:	10800017 	ldw	r2,0(r2)
 201b36c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201b370:	e0bff717 	ldw	r2,-36(fp)
 201b374:	1000081e 	bne	r2,zero,201b398 <OSTaskNameSet+0x108>
 201b378:	e0bff517 	ldw	r2,-44(fp)
 201b37c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b380:	e0bff617 	ldw	r2,-40(fp)
 201b384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b388:	e0bfff17 	ldw	r2,-4(fp)
 201b38c:	00c010c4 	movi	r3,67
 201b390:	10c00005 	stb	r3,0(r2)
        return;
 201b394:	00002606 	br	201b430 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 201b398:	e0bff717 	ldw	r2,-36(fp)
 201b39c:	10800058 	cmpnei	r2,r2,1
 201b3a0:	1000081e 	bne	r2,zero,201b3c4 <OSTaskNameSet+0x134>
 201b3a4:	e0bff517 	ldw	r2,-44(fp)
 201b3a8:	e0bff815 	stw	r2,-32(fp)
 201b3ac:	e0bff817 	ldw	r2,-32(fp)
 201b3b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201b3b4:	e0bfff17 	ldw	r2,-4(fp)
 201b3b8:	00c010c4 	movi	r3,67
 201b3bc:	10c00005 	stb	r3,0(r2)
        return;
 201b3c0:	00001b06 	br	201b430 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 201b3c4:	e13ffe17 	ldw	r4,-8(fp)
 201b3c8:	20158a40 	call	20158a4 <OS_StrLen>
 201b3cc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201b3d0:	e0bffa03 	ldbu	r2,-24(fp)
 201b3d4:	10800830 	cmpltui	r2,r2,32
 201b3d8:	1000081e 	bne	r2,zero,201b3fc <OSTaskNameSet+0x16c>
 201b3dc:	e0bff517 	ldw	r2,-44(fp)
 201b3e0:	e0bff915 	stw	r2,-28(fp)
 201b3e4:	e0bff917 	ldw	r2,-28(fp)
 201b3e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 201b3ec:	e0bfff17 	ldw	r2,-4(fp)
 201b3f0:	00c01044 	movi	r3,65
 201b3f4:	10c00005 	stb	r3,0(r2)
        return;
 201b3f8:	00000d06 	br	201b430 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201b3fc:	e0bff717 	ldw	r2,-36(fp)
 201b400:	10801304 	addi	r2,r2,76
 201b404:	e17ffe17 	ldw	r5,-8(fp)
 201b408:	1009883a 	mov	r4,r2
 201b40c:	20158300 	call	2015830 <OS_StrCopy>
 201b410:	e0bff517 	ldw	r2,-44(fp)
 201b414:	e0bffb15 	stw	r2,-20(fp)
 201b418:	e0bffb17 	ldw	r2,-20(fp)
 201b41c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201b420:	e0bfff17 	ldw	r2,-4(fp)
 201b424:	10000005 	stb	zero,0(r2)
 201b428:	00000106 	br	201b430 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201b42c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 201b430:	e037883a 	mov	sp,fp
 201b434:	dfc00117 	ldw	ra,4(sp)
 201b438:	df000017 	ldw	fp,0(sp)
 201b43c:	dec00204 	addi	sp,sp,8
 201b440:	f800283a 	ret

0201b444 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 201b444:	defff404 	addi	sp,sp,-48
 201b448:	dfc00b15 	stw	ra,44(sp)
 201b44c:	df000a15 	stw	fp,40(sp)
 201b450:	df000a04 	addi	fp,sp,40
 201b454:	2005883a 	mov	r2,r4
 201b458:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201b45c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201b460:	e0bfff03 	ldbu	r2,-4(fp)
 201b464:	10800530 	cmpltui	r2,r2,20
 201b468:	1000021e 	bne	r2,zero,201b474 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201b46c:	00800a84 	movi	r2,42
 201b470:	00006406 	br	201b604 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b474:	0005303a 	rdctl	r2,status
 201b478:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b47c:	e0fffe17 	ldw	r3,-8(fp)
 201b480:	00bfff84 	movi	r2,-2
 201b484:	1884703a 	and	r2,r3,r2
 201b488:	1001703a 	wrctl	status,r2
  
  return context;
 201b48c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b490:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 201b494:	e0ffff03 	ldbu	r3,-4(fp)
 201b498:	008080f4 	movhi	r2,515
 201b49c:	10b5ea04 	addi	r2,r2,-10328
 201b4a0:	18c7883a 	add	r3,r3,r3
 201b4a4:	18c7883a 	add	r3,r3,r3
 201b4a8:	10c5883a 	add	r2,r2,r3
 201b4ac:	10800017 	ldw	r2,0(r2)
 201b4b0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 201b4b4:	e0bff817 	ldw	r2,-32(fp)
 201b4b8:	1000061e 	bne	r2,zero,201b4d4 <OSTaskResume+0x90>
 201b4bc:	e0bff617 	ldw	r2,-40(fp)
 201b4c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b4c4:	e0bff717 	ldw	r2,-36(fp)
 201b4c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 201b4cc:	00801184 	movi	r2,70
 201b4d0:	00004c06 	br	201b604 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 201b4d4:	e0bff817 	ldw	r2,-32(fp)
 201b4d8:	10800058 	cmpnei	r2,r2,1
 201b4dc:	1000061e 	bne	r2,zero,201b4f8 <OSTaskResume+0xb4>
 201b4e0:	e0bff617 	ldw	r2,-40(fp)
 201b4e4:	e0bff915 	stw	r2,-28(fp)
 201b4e8:	e0bff917 	ldw	r2,-28(fp)
 201b4ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b4f0:	008010c4 	movi	r2,67
 201b4f4:	00004306 	br	201b604 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 201b4f8:	e0bff817 	ldw	r2,-32(fp)
 201b4fc:	10800c03 	ldbu	r2,48(r2)
 201b500:	10803fcc 	andi	r2,r2,255
 201b504:	1080020c 	andi	r2,r2,8
 201b508:	10003926 	beq	r2,zero,201b5f0 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201b50c:	e0bff817 	ldw	r2,-32(fp)
 201b510:	10c00c03 	ldbu	r3,48(r2)
 201b514:	00bffdc4 	movi	r2,-9
 201b518:	1884703a 	and	r2,r3,r2
 201b51c:	1007883a 	mov	r3,r2
 201b520:	e0bff817 	ldw	r2,-32(fp)
 201b524:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 201b528:	e0bff817 	ldw	r2,-32(fp)
 201b52c:	10800c03 	ldbu	r2,48(r2)
 201b530:	10803fcc 	andi	r2,r2,255
 201b534:	1000281e 	bne	r2,zero,201b5d8 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 201b538:	e0bff817 	ldw	r2,-32(fp)
 201b53c:	10800b8b 	ldhu	r2,46(r2)
 201b540:	10bfffcc 	andi	r2,r2,65535
 201b544:	10001f1e 	bne	r2,zero,201b5c4 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 201b548:	e0bff817 	ldw	r2,-32(fp)
 201b54c:	10c00d83 	ldbu	r3,54(r2)
 201b550:	d0a74303 	ldbu	r2,-25332(gp)
 201b554:	1884b03a 	or	r2,r3,r2
 201b558:	d0a74305 	stb	r2,-25332(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201b55c:	e0bff817 	ldw	r2,-32(fp)
 201b560:	10800d03 	ldbu	r2,52(r2)
 201b564:	10c03fcc 	andi	r3,r2,255
 201b568:	e0bff817 	ldw	r2,-32(fp)
 201b56c:	10800d03 	ldbu	r2,52(r2)
 201b570:	11003fcc 	andi	r4,r2,255
 201b574:	d0a74344 	addi	r2,gp,-25331
 201b578:	2085883a 	add	r2,r4,r2
 201b57c:	11000003 	ldbu	r4,0(r2)
 201b580:	e0bff817 	ldw	r2,-32(fp)
 201b584:	10800d43 	ldbu	r2,53(r2)
 201b588:	2084b03a 	or	r2,r4,r2
 201b58c:	1009883a 	mov	r4,r2
 201b590:	d0a74344 	addi	r2,gp,-25331
 201b594:	1885883a 	add	r2,r3,r2
 201b598:	11000005 	stb	r4,0(r2)
 201b59c:	e0bff617 	ldw	r2,-40(fp)
 201b5a0:	e0bffa15 	stw	r2,-24(fp)
 201b5a4:	e0bffa17 	ldw	r2,-24(fp)
 201b5a8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201b5ac:	d0a73743 	ldbu	r2,-25379(gp)
 201b5b0:	10803fcc 	andi	r2,r2,255
 201b5b4:	10800058 	cmpnei	r2,r2,1
 201b5b8:	10000b1e 	bne	r2,zero,201b5e8 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 201b5bc:	20156ec0 	call	20156ec <OS_Sched>
 201b5c0:	00000906 	br	201b5e8 <OSTaskResume+0x1a4>
 201b5c4:	e0bff617 	ldw	r2,-40(fp)
 201b5c8:	e0bffb15 	stw	r2,-20(fp)
 201b5cc:	e0bffb17 	ldw	r2,-20(fp)
 201b5d0:	1001703a 	wrctl	status,r2
 201b5d4:	00000406 	br	201b5e8 <OSTaskResume+0x1a4>
 201b5d8:	e0bff617 	ldw	r2,-40(fp)
 201b5dc:	e0bffc15 	stw	r2,-16(fp)
 201b5e0:	e0bffc17 	ldw	r2,-16(fp)
 201b5e4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 201b5e8:	0005883a 	mov	r2,zero
 201b5ec:	00000506 	br	201b604 <OSTaskResume+0x1c0>
 201b5f0:	e0bff617 	ldw	r2,-40(fp)
 201b5f4:	e0bffd15 	stw	r2,-12(fp)
 201b5f8:	e0bffd17 	ldw	r2,-12(fp)
 201b5fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201b600:	00801104 	movi	r2,68
}
 201b604:	e037883a 	mov	sp,fp
 201b608:	dfc00117 	ldw	ra,4(sp)
 201b60c:	df000017 	ldw	fp,0(sp)
 201b610:	dec00204 	addi	sp,sp,8
 201b614:	f800283a 	ret

0201b618 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 201b618:	defff304 	addi	sp,sp,-52
 201b61c:	df000c15 	stw	fp,48(sp)
 201b620:	df000c04 	addi	fp,sp,48
 201b624:	2005883a 	mov	r2,r4
 201b628:	e17fff15 	stw	r5,-4(fp)
 201b62c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201b630:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 201b634:	e0bffe03 	ldbu	r2,-8(fp)
 201b638:	10800570 	cmpltui	r2,r2,21
 201b63c:	1000051e 	bne	r2,zero,201b654 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201b640:	e0bffe03 	ldbu	r2,-8(fp)
 201b644:	10803fe0 	cmpeqi	r2,r2,255
 201b648:	1000021e 	bne	r2,zero,201b654 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201b64c:	00800a84 	movi	r2,42
 201b650:	00005d06 	br	201b7c8 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 201b654:	e0bfff17 	ldw	r2,-4(fp)
 201b658:	1000021e 	bne	r2,zero,201b664 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201b65c:	00800244 	movi	r2,9
 201b660:	00005906 	br	201b7c8 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 201b664:	e0bfff17 	ldw	r2,-4(fp)
 201b668:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201b66c:	e0bfff17 	ldw	r2,-4(fp)
 201b670:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b674:	0005303a 	rdctl	r2,status
 201b678:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b67c:	e0fffd17 	ldw	r3,-12(fp)
 201b680:	00bfff84 	movi	r2,-2
 201b684:	1884703a 	and	r2,r3,r2
 201b688:	1001703a 	wrctl	status,r2
  
  return context;
 201b68c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 201b690:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 201b694:	e0bffe03 	ldbu	r2,-8(fp)
 201b698:	10803fd8 	cmpnei	r2,r2,255
 201b69c:	1000031e 	bne	r2,zero,201b6ac <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201b6a0:	d0a74617 	ldw	r2,-25320(gp)
 201b6a4:	10800c83 	ldbu	r2,50(r2)
 201b6a8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b6ac:	e0fffe03 	ldbu	r3,-8(fp)
 201b6b0:	008080f4 	movhi	r2,515
 201b6b4:	10b5ea04 	addi	r2,r2,-10328
 201b6b8:	18c7883a 	add	r3,r3,r3
 201b6bc:	18c7883a 	add	r3,r3,r3
 201b6c0:	10c5883a 	add	r2,r2,r3
 201b6c4:	10800017 	ldw	r2,0(r2)
 201b6c8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 201b6cc:	e0bff817 	ldw	r2,-32(fp)
 201b6d0:	1000061e 	bne	r2,zero,201b6ec <OSTaskStkChk+0xd4>
 201b6d4:	e0bff617 	ldw	r2,-40(fp)
 201b6d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b6dc:	e0bff717 	ldw	r2,-36(fp)
 201b6e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b6e4:	008010c4 	movi	r2,67
 201b6e8:	00003706 	br	201b7c8 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201b6ec:	e0bff817 	ldw	r2,-32(fp)
 201b6f0:	10800058 	cmpnei	r2,r2,1
 201b6f4:	1000061e 	bne	r2,zero,201b710 <OSTaskStkChk+0xf8>
 201b6f8:	e0bff617 	ldw	r2,-40(fp)
 201b6fc:	e0bff915 	stw	r2,-28(fp)
 201b700:	e0bff917 	ldw	r2,-28(fp)
 201b704:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b708:	008010c4 	movi	r2,67
 201b70c:	00002e06 	br	201b7c8 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201b710:	e0bff817 	ldw	r2,-32(fp)
 201b714:	1080040b 	ldhu	r2,16(r2)
 201b718:	10bfffcc 	andi	r2,r2,65535
 201b71c:	1080004c 	andi	r2,r2,1
 201b720:	1000061e 	bne	r2,zero,201b73c <OSTaskStkChk+0x124>
 201b724:	e0bff617 	ldw	r2,-40(fp)
 201b728:	e0bffa15 	stw	r2,-24(fp)
 201b72c:	e0bffa17 	ldw	r2,-24(fp)
 201b730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 201b734:	00801144 	movi	r2,69
 201b738:	00002306 	br	201b7c8 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201b73c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 201b740:	e0bff817 	ldw	r2,-32(fp)
 201b744:	10800317 	ldw	r2,12(r2)
 201b748:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201b74c:	e0bff817 	ldw	r2,-32(fp)
 201b750:	10800217 	ldw	r2,8(r2)
 201b754:	e0bff415 	stw	r2,-48(fp)
 201b758:	e0bff617 	ldw	r2,-40(fp)
 201b75c:	e0bffb15 	stw	r2,-20(fp)
 201b760:	e0bffb17 	ldw	r2,-20(fp)
 201b764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201b768:	00000306 	br	201b778 <OSTaskStkChk+0x160>
        nfree++;
 201b76c:	e0bff517 	ldw	r2,-44(fp)
 201b770:	10800044 	addi	r2,r2,1
 201b774:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201b778:	e0bff417 	ldw	r2,-48(fp)
 201b77c:	10c00104 	addi	r3,r2,4
 201b780:	e0fff415 	stw	r3,-48(fp)
 201b784:	10800017 	ldw	r2,0(r2)
 201b788:	103ff826 	beq	r2,zero,201b76c <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201b78c:	e0bff517 	ldw	r2,-44(fp)
 201b790:	1085883a 	add	r2,r2,r2
 201b794:	1085883a 	add	r2,r2,r2
 201b798:	1007883a 	mov	r3,r2
 201b79c:	e0bfff17 	ldw	r2,-4(fp)
 201b7a0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 201b7a4:	e0fffc17 	ldw	r3,-16(fp)
 201b7a8:	e0bff517 	ldw	r2,-44(fp)
 201b7ac:	1885c83a 	sub	r2,r3,r2
 201b7b0:	1085883a 	add	r2,r2,r2
 201b7b4:	1085883a 	add	r2,r2,r2
 201b7b8:	1007883a 	mov	r3,r2
 201b7bc:	e0bfff17 	ldw	r2,-4(fp)
 201b7c0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 201b7c4:	0005883a 	mov	r2,zero
}
 201b7c8:	e037883a 	mov	sp,fp
 201b7cc:	df000017 	ldw	fp,0(sp)
 201b7d0:	dec00104 	addi	sp,sp,4
 201b7d4:	f800283a 	ret

0201b7d8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 201b7d8:	defff504 	addi	sp,sp,-44
 201b7dc:	dfc00a15 	stw	ra,40(sp)
 201b7e0:	df000915 	stw	fp,36(sp)
 201b7e4:	df000904 	addi	fp,sp,36
 201b7e8:	2005883a 	mov	r2,r4
 201b7ec:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b7f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 201b7f4:	e0bfff03 	ldbu	r2,-4(fp)
 201b7f8:	10800518 	cmpnei	r2,r2,20
 201b7fc:	1000021e 	bne	r2,zero,201b808 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201b800:	008011c4 	movi	r2,71
 201b804:	00006806 	br	201b9a8 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201b808:	e0bfff03 	ldbu	r2,-4(fp)
 201b80c:	10800530 	cmpltui	r2,r2,20
 201b810:	1000051e 	bne	r2,zero,201b828 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 201b814:	e0bfff03 	ldbu	r2,-4(fp)
 201b818:	10803fe0 	cmpeqi	r2,r2,255
 201b81c:	1000021e 	bne	r2,zero,201b828 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 201b820:	00800a84 	movi	r2,42
 201b824:	00006006 	br	201b9a8 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b828:	0005303a 	rdctl	r2,status
 201b82c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b830:	e0fffe17 	ldw	r3,-8(fp)
 201b834:	00bfff84 	movi	r2,-2
 201b838:	1884703a 	and	r2,r3,r2
 201b83c:	1001703a 	wrctl	status,r2
  
  return context;
 201b840:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 201b844:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 201b848:	e0bfff03 	ldbu	r2,-4(fp)
 201b84c:	10803fd8 	cmpnei	r2,r2,255
 201b850:	1000061e 	bne	r2,zero,201b86c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 201b854:	d0a74617 	ldw	r2,-25320(gp)
 201b858:	10800c83 	ldbu	r2,50(r2)
 201b85c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 201b860:	00800044 	movi	r2,1
 201b864:	e0bff705 	stb	r2,-36(fp)
 201b868:	00000906 	br	201b890 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201b86c:	d0a74617 	ldw	r2,-25320(gp)
 201b870:	10800c83 	ldbu	r2,50(r2)
 201b874:	10c03fcc 	andi	r3,r2,255
 201b878:	e0bfff03 	ldbu	r2,-4(fp)
 201b87c:	1880031e 	bne	r3,r2,201b88c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 201b880:	00800044 	movi	r2,1
 201b884:	e0bff705 	stb	r2,-36(fp)
 201b888:	00000106 	br	201b890 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201b88c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b890:	e0ffff03 	ldbu	r3,-4(fp)
 201b894:	008080f4 	movhi	r2,515
 201b898:	10b5ea04 	addi	r2,r2,-10328
 201b89c:	18c7883a 	add	r3,r3,r3
 201b8a0:	18c7883a 	add	r3,r3,r3
 201b8a4:	10c5883a 	add	r2,r2,r3
 201b8a8:	10800017 	ldw	r2,0(r2)
 201b8ac:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201b8b0:	e0bffa17 	ldw	r2,-24(fp)
 201b8b4:	1000061e 	bne	r2,zero,201b8d0 <OSTaskSuspend+0xf8>
 201b8b8:	e0bff817 	ldw	r2,-32(fp)
 201b8bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b8c0:	e0bff917 	ldw	r2,-28(fp)
 201b8c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201b8c8:	00801204 	movi	r2,72
 201b8cc:	00003606 	br	201b9a8 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201b8d0:	e0bffa17 	ldw	r2,-24(fp)
 201b8d4:	10800058 	cmpnei	r2,r2,1
 201b8d8:	1000061e 	bne	r2,zero,201b8f4 <OSTaskSuspend+0x11c>
 201b8dc:	e0bff817 	ldw	r2,-32(fp)
 201b8e0:	e0bffb15 	stw	r2,-20(fp)
 201b8e4:	e0bffb17 	ldw	r2,-20(fp)
 201b8e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b8ec:	008010c4 	movi	r2,67
 201b8f0:	00002d06 	br	201b9a8 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 201b8f4:	e0bffa17 	ldw	r2,-24(fp)
 201b8f8:	10800d03 	ldbu	r2,52(r2)
 201b8fc:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201b900:	e0fffd03 	ldbu	r3,-12(fp)
 201b904:	e13ffd03 	ldbu	r4,-12(fp)
 201b908:	d0a74344 	addi	r2,gp,-25331
 201b90c:	2085883a 	add	r2,r4,r2
 201b910:	10800003 	ldbu	r2,0(r2)
 201b914:	1009883a 	mov	r4,r2
 201b918:	e0bffa17 	ldw	r2,-24(fp)
 201b91c:	10800d43 	ldbu	r2,53(r2)
 201b920:	0084303a 	nor	r2,zero,r2
 201b924:	2084703a 	and	r2,r4,r2
 201b928:	1009883a 	mov	r4,r2
 201b92c:	d0a74344 	addi	r2,gp,-25331
 201b930:	1885883a 	add	r2,r3,r2
 201b934:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 201b938:	e0fffd03 	ldbu	r3,-12(fp)
 201b93c:	d0a74344 	addi	r2,gp,-25331
 201b940:	1885883a 	add	r2,r3,r2
 201b944:	10800003 	ldbu	r2,0(r2)
 201b948:	10803fcc 	andi	r2,r2,255
 201b94c:	1000071e 	bne	r2,zero,201b96c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 201b950:	e0bffa17 	ldw	r2,-24(fp)
 201b954:	10800d83 	ldbu	r2,54(r2)
 201b958:	0084303a 	nor	r2,zero,r2
 201b95c:	1007883a 	mov	r3,r2
 201b960:	d0a74303 	ldbu	r2,-25332(gp)
 201b964:	1884703a 	and	r2,r3,r2
 201b968:	d0a74305 	stb	r2,-25332(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201b96c:	e0bffa17 	ldw	r2,-24(fp)
 201b970:	10800c03 	ldbu	r2,48(r2)
 201b974:	10800214 	ori	r2,r2,8
 201b978:	1007883a 	mov	r3,r2
 201b97c:	e0bffa17 	ldw	r2,-24(fp)
 201b980:	10c00c05 	stb	r3,48(r2)
 201b984:	e0bff817 	ldw	r2,-32(fp)
 201b988:	e0bffc15 	stw	r2,-16(fp)
 201b98c:	e0bffc17 	ldw	r2,-16(fp)
 201b990:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 201b994:	e0bff703 	ldbu	r2,-36(fp)
 201b998:	10800058 	cmpnei	r2,r2,1
 201b99c:	1000011e 	bne	r2,zero,201b9a4 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 201b9a0:	20156ec0 	call	20156ec <OS_Sched>
    }
    return (OS_ERR_NONE);
 201b9a4:	0005883a 	mov	r2,zero
}
 201b9a8:	e037883a 	mov	sp,fp
 201b9ac:	dfc00117 	ldw	ra,4(sp)
 201b9b0:	df000017 	ldw	fp,0(sp)
 201b9b4:	dec00204 	addi	sp,sp,8
 201b9b8:	f800283a 	ret

0201b9bc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 201b9bc:	defff604 	addi	sp,sp,-40
 201b9c0:	dfc00915 	stw	ra,36(sp)
 201b9c4:	df000815 	stw	fp,32(sp)
 201b9c8:	df000804 	addi	fp,sp,32
 201b9cc:	2005883a 	mov	r2,r4
 201b9d0:	e17fff15 	stw	r5,-4(fp)
 201b9d4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201b9d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 201b9dc:	e0bffe03 	ldbu	r2,-8(fp)
 201b9e0:	10800570 	cmpltui	r2,r2,21
 201b9e4:	1000051e 	bne	r2,zero,201b9fc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201b9e8:	e0bffe03 	ldbu	r2,-8(fp)
 201b9ec:	10803fe0 	cmpeqi	r2,r2,255
 201b9f0:	1000021e 	bne	r2,zero,201b9fc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 201b9f4:	00800a84 	movi	r2,42
 201b9f8:	00003406 	br	201bacc <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 201b9fc:	e0bfff17 	ldw	r2,-4(fp)
 201ba00:	1000021e 	bne	r2,zero,201ba0c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 201ba04:	00800244 	movi	r2,9
 201ba08:	00003006 	br	201bacc <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ba0c:	0005303a 	rdctl	r2,status
 201ba10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ba14:	e0fffd17 	ldw	r3,-12(fp)
 201ba18:	00bfff84 	movi	r2,-2
 201ba1c:	1884703a 	and	r2,r3,r2
 201ba20:	1001703a 	wrctl	status,r2
  
  return context;
 201ba24:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201ba28:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201ba2c:	e0bffe03 	ldbu	r2,-8(fp)
 201ba30:	10803fd8 	cmpnei	r2,r2,255
 201ba34:	1000031e 	bne	r2,zero,201ba44 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 201ba38:	d0a74617 	ldw	r2,-25320(gp)
 201ba3c:	10800c83 	ldbu	r2,50(r2)
 201ba40:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201ba44:	e0fffe03 	ldbu	r3,-8(fp)
 201ba48:	008080f4 	movhi	r2,515
 201ba4c:	10b5ea04 	addi	r2,r2,-10328
 201ba50:	18c7883a 	add	r3,r3,r3
 201ba54:	18c7883a 	add	r3,r3,r3
 201ba58:	10c5883a 	add	r2,r2,r3
 201ba5c:	10800017 	ldw	r2,0(r2)
 201ba60:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201ba64:	e0bffa17 	ldw	r2,-24(fp)
 201ba68:	1000061e 	bne	r2,zero,201ba84 <OSTaskQuery+0xc8>
 201ba6c:	e0bff817 	ldw	r2,-32(fp)
 201ba70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ba74:	e0bff917 	ldw	r2,-28(fp)
 201ba78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201ba7c:	00800a44 	movi	r2,41
 201ba80:	00001206 	br	201bacc <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 201ba84:	e0bffa17 	ldw	r2,-24(fp)
 201ba88:	10800058 	cmpnei	r2,r2,1
 201ba8c:	1000061e 	bne	r2,zero,201baa8 <OSTaskQuery+0xec>
 201ba90:	e0bff817 	ldw	r2,-32(fp)
 201ba94:	e0bffb15 	stw	r2,-20(fp)
 201ba98:	e0bffb17 	ldw	r2,-20(fp)
 201ba9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201baa0:	008010c4 	movi	r2,67
 201baa4:	00000906 	br	201bacc <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201baa8:	01801b04 	movi	r6,108
 201baac:	e17ffa17 	ldw	r5,-24(fp)
 201bab0:	e13fff17 	ldw	r4,-4(fp)
 201bab4:	20156840 	call	2015684 <OS_MemCopy>
 201bab8:	e0bff817 	ldw	r2,-32(fp)
 201babc:	e0bffc15 	stw	r2,-16(fp)
 201bac0:	e0bffc17 	ldw	r2,-16(fp)
 201bac4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201bac8:	0005883a 	mov	r2,zero
}
 201bacc:	e037883a 	mov	sp,fp
 201bad0:	dfc00117 	ldw	ra,4(sp)
 201bad4:	df000017 	ldw	fp,0(sp)
 201bad8:	dec00204 	addi	sp,sp,8
 201badc:	f800283a 	ret

0201bae0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 201bae0:	defffc04 	addi	sp,sp,-16
 201bae4:	df000315 	stw	fp,12(sp)
 201bae8:	df000304 	addi	fp,sp,12
 201baec:	e13ffd15 	stw	r4,-12(fp)
 201baf0:	e17ffe15 	stw	r5,-8(fp)
 201baf4:	3005883a 	mov	r2,r6
 201baf8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 201bafc:	e0bfff0b 	ldhu	r2,-4(fp)
 201bb00:	1080004c 	andi	r2,r2,1
 201bb04:	10000d26 	beq	r2,zero,201bb3c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201bb08:	e0bfff0b 	ldhu	r2,-4(fp)
 201bb0c:	1080008c 	andi	r2,r2,2
 201bb10:	10000a26 	beq	r2,zero,201bb3c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201bb14:	00000706 	br	201bb34 <OS_TaskStkClr+0x54>
                size--;
 201bb18:	e0bffe17 	ldw	r2,-8(fp)
 201bb1c:	10bfffc4 	addi	r2,r2,-1
 201bb20:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 201bb24:	e0bffd17 	ldw	r2,-12(fp)
 201bb28:	10c00104 	addi	r3,r2,4
 201bb2c:	e0fffd15 	stw	r3,-12(fp)
 201bb30:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201bb34:	e0bffe17 	ldw	r2,-8(fp)
 201bb38:	103ff71e 	bne	r2,zero,201bb18 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 201bb3c:	0001883a 	nop
 201bb40:	e037883a 	mov	sp,fp
 201bb44:	df000017 	ldw	fp,0(sp)
 201bb48:	dec00104 	addi	sp,sp,4
 201bb4c:	f800283a 	ret

0201bb50 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 201bb50:	defff904 	addi	sp,sp,-28
 201bb54:	dfc00615 	stw	ra,24(sp)
 201bb58:	df000515 	stw	fp,20(sp)
 201bb5c:	df000504 	addi	fp,sp,20
 201bb60:	2005883a 	mov	r2,r4
 201bb64:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bb68:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201bb6c:	d0a74503 	ldbu	r2,-25324(gp)
 201bb70:	10803fcc 	andi	r2,r2,255
 201bb74:	1000311e 	bne	r2,zero,201bc3c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 201bb78:	e0bfff0b 	ldhu	r2,-4(fp)
 201bb7c:	10003026 	beq	r2,zero,201bc40 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bb80:	0005303a 	rdctl	r2,status
 201bb84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bb88:	e0fffe17 	ldw	r3,-8(fp)
 201bb8c:	00bfff84 	movi	r2,-2
 201bb90:	1884703a 	and	r2,r3,r2
 201bb94:	1001703a 	wrctl	status,r2
  
  return context;
 201bb98:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201bb9c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201bba0:	d0a74617 	ldw	r2,-25320(gp)
 201bba4:	10800d03 	ldbu	r2,52(r2)
 201bba8:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201bbac:	e0fffd03 	ldbu	r3,-12(fp)
 201bbb0:	e13ffd03 	ldbu	r4,-12(fp)
 201bbb4:	d0a74344 	addi	r2,gp,-25331
 201bbb8:	2085883a 	add	r2,r4,r2
 201bbbc:	10800003 	ldbu	r2,0(r2)
 201bbc0:	1009883a 	mov	r4,r2
 201bbc4:	d0a74617 	ldw	r2,-25320(gp)
 201bbc8:	10800d43 	ldbu	r2,53(r2)
 201bbcc:	0084303a 	nor	r2,zero,r2
 201bbd0:	2084703a 	and	r2,r4,r2
 201bbd4:	1009883a 	mov	r4,r2
 201bbd8:	d0a74344 	addi	r2,gp,-25331
 201bbdc:	1885883a 	add	r2,r3,r2
 201bbe0:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 201bbe4:	e0fffd03 	ldbu	r3,-12(fp)
 201bbe8:	d0a74344 	addi	r2,gp,-25331
 201bbec:	1885883a 	add	r2,r3,r2
 201bbf0:	10800003 	ldbu	r2,0(r2)
 201bbf4:	10803fcc 	andi	r2,r2,255
 201bbf8:	1000071e 	bne	r2,zero,201bc18 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201bbfc:	d0a74617 	ldw	r2,-25320(gp)
 201bc00:	10800d83 	ldbu	r2,54(r2)
 201bc04:	0084303a 	nor	r2,zero,r2
 201bc08:	1007883a 	mov	r3,r2
 201bc0c:	d0a74303 	ldbu	r2,-25332(gp)
 201bc10:	1884703a 	and	r2,r3,r2
 201bc14:	d0a74305 	stb	r2,-25332(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201bc18:	d0a74617 	ldw	r2,-25320(gp)
 201bc1c:	e0ffff0b 	ldhu	r3,-4(fp)
 201bc20:	10c00b8d 	sth	r3,46(r2)
 201bc24:	e0bffb17 	ldw	r2,-20(fp)
 201bc28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bc2c:	e0bffc17 	ldw	r2,-16(fp)
 201bc30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 201bc34:	20156ec0 	call	20156ec <OS_Sched>
 201bc38:	00000106 	br	201bc40 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 201bc3c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 201bc40:	e037883a 	mov	sp,fp
 201bc44:	dfc00117 	ldw	ra,4(sp)
 201bc48:	df000017 	ldw	fp,0(sp)
 201bc4c:	dec00204 	addi	sp,sp,8
 201bc50:	f800283a 	ret

0201bc54 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 201bc54:	defff704 	addi	sp,sp,-36
 201bc58:	dfc00815 	stw	ra,32(sp)
 201bc5c:	df000715 	stw	fp,28(sp)
 201bc60:	dc000615 	stw	r16,24(sp)
 201bc64:	df000704 	addi	fp,sp,28
 201bc68:	2011883a 	mov	r8,r4
 201bc6c:	2809883a 	mov	r4,r5
 201bc70:	3007883a 	mov	r3,r6
 201bc74:	3805883a 	mov	r2,r7
 201bc78:	e23ffb05 	stb	r8,-20(fp)
 201bc7c:	e13ffc05 	stb	r4,-16(fp)
 201bc80:	e0fffd05 	stb	r3,-12(fp)
 201bc84:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201bc88:	d0a74503 	ldbu	r2,-25324(gp)
 201bc8c:	10803fcc 	andi	r2,r2,255
 201bc90:	10000226 	beq	r2,zero,201bc9c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 201bc94:	00801544 	movi	r2,85
 201bc98:	00003d06 	br	201bd90 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 201bc9c:	e0bffb03 	ldbu	r2,-20(fp)
 201bca0:	1000081e 	bne	r2,zero,201bcc4 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 201bca4:	e0bffc03 	ldbu	r2,-16(fp)
 201bca8:	1000061e 	bne	r2,zero,201bcc4 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 201bcac:	e0bffd03 	ldbu	r2,-12(fp)
 201bcb0:	1000041e 	bne	r2,zero,201bcc4 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 201bcb4:	e0bffe0b 	ldhu	r2,-8(fp)
 201bcb8:	1000021e 	bne	r2,zero,201bcc4 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 201bcbc:	00801504 	movi	r2,84
 201bcc0:	00003306 	br	201bd90 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 201bcc4:	e0bffc03 	ldbu	r2,-16(fp)
 201bcc8:	10800f30 	cmpltui	r2,r2,60
 201bccc:	1000021e 	bne	r2,zero,201bcd8 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 201bcd0:	00801444 	movi	r2,81
 201bcd4:	00002e06 	br	201bd90 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 201bcd8:	e0bffd03 	ldbu	r2,-12(fp)
 201bcdc:	10800f30 	cmpltui	r2,r2,60
 201bce0:	1000021e 	bne	r2,zero,201bcec <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 201bce4:	00801484 	movi	r2,82
 201bce8:	00002906 	br	201bd90 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 201bcec:	e0bffe0b 	ldhu	r2,-8(fp)
 201bcf0:	1080fa30 	cmpltui	r2,r2,1000
 201bcf4:	1000021e 	bne	r2,zero,201bd00 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 201bcf8:	008014c4 	movi	r2,83
 201bcfc:	00002406 	br	201bd90 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201bd00:	e0bffb03 	ldbu	r2,-20(fp)
 201bd04:	10c38424 	muli	r3,r2,3600
 201bd08:	e0bffc03 	ldbu	r2,-16(fp)
 201bd0c:	10800f24 	muli	r2,r2,60
 201bd10:	1887883a 	add	r3,r3,r2
 201bd14:	e0bffd03 	ldbu	r2,-12(fp)
 201bd18:	1885883a 	add	r2,r3,r2
 201bd1c:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 201bd20:	e0bffe0b 	ldhu	r2,-8(fp)
 201bd24:	1080fa24 	muli	r2,r2,1000
 201bd28:	0140fa04 	movi	r5,1000
 201bd2c:	1009883a 	mov	r4,r2
 201bd30:	2004a080 	call	2004a08 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201bd34:	8085883a 	add	r2,r16,r2
 201bd38:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 201bd3c:	e0bffa17 	ldw	r2,-24(fp)
 201bd40:	1004d43a 	srli	r2,r2,16
 201bd44:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 201bd48:	e0bffa17 	ldw	r2,-24(fp)
 201bd4c:	10bfffcc 	andi	r2,r2,65535
 201bd50:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 201bd54:	e0bffa17 	ldw	r2,-24(fp)
 201bd58:	10bfffcc 	andi	r2,r2,65535
 201bd5c:	1009883a 	mov	r4,r2
 201bd60:	201bb500 	call	201bb50 <OSTimeDly>
    while (loops > 0) {
 201bd64:	00000706 	br	201bd84 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 201bd68:	01200014 	movui	r4,32768
 201bd6c:	201bb500 	call	201bb50 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201bd70:	01200014 	movui	r4,32768
 201bd74:	201bb500 	call	201bb50 <OSTimeDly>
        loops--;
 201bd78:	e0bff90b 	ldhu	r2,-28(fp)
 201bd7c:	10bfffc4 	addi	r2,r2,-1
 201bd80:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 201bd84:	e0bff90b 	ldhu	r2,-28(fp)
 201bd88:	103ff71e 	bne	r2,zero,201bd68 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 201bd8c:	0005883a 	mov	r2,zero
}
 201bd90:	e6ffff04 	addi	sp,fp,-4
 201bd94:	dfc00217 	ldw	ra,8(sp)
 201bd98:	df000117 	ldw	fp,4(sp)
 201bd9c:	dc000017 	ldw	r16,0(sp)
 201bda0:	dec00304 	addi	sp,sp,12
 201bda4:	f800283a 	ret

0201bda8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 201bda8:	defff504 	addi	sp,sp,-44
 201bdac:	dfc00a15 	stw	ra,40(sp)
 201bdb0:	df000915 	stw	fp,36(sp)
 201bdb4:	df000904 	addi	fp,sp,36
 201bdb8:	2005883a 	mov	r2,r4
 201bdbc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201bdc0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 201bdc4:	e0bfff03 	ldbu	r2,-4(fp)
 201bdc8:	10800530 	cmpltui	r2,r2,20
 201bdcc:	1000021e 	bne	r2,zero,201bdd8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201bdd0:	00800a84 	movi	r2,42
 201bdd4:	00006406 	br	201bf68 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bdd8:	0005303a 	rdctl	r2,status
 201bddc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bde0:	e0fffe17 	ldw	r3,-8(fp)
 201bde4:	00bfff84 	movi	r2,-2
 201bde8:	1884703a 	and	r2,r3,r2
 201bdec:	1001703a 	wrctl	status,r2
  
  return context;
 201bdf0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 201bdf4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 201bdf8:	e0ffff03 	ldbu	r3,-4(fp)
 201bdfc:	008080f4 	movhi	r2,515
 201be00:	10b5ea04 	addi	r2,r2,-10328
 201be04:	18c7883a 	add	r3,r3,r3
 201be08:	18c7883a 	add	r3,r3,r3
 201be0c:	10c5883a 	add	r2,r2,r3
 201be10:	10800017 	ldw	r2,0(r2)
 201be14:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 201be18:	e0bff917 	ldw	r2,-28(fp)
 201be1c:	1000061e 	bne	r2,zero,201be38 <OSTimeDlyResume+0x90>
 201be20:	e0bff717 	ldw	r2,-36(fp)
 201be24:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201be28:	e0bff817 	ldw	r2,-32(fp)
 201be2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201be30:	008010c4 	movi	r2,67
 201be34:	00004c06 	br	201bf68 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201be38:	e0bff917 	ldw	r2,-28(fp)
 201be3c:	10800058 	cmpnei	r2,r2,1
 201be40:	1000061e 	bne	r2,zero,201be5c <OSTimeDlyResume+0xb4>
 201be44:	e0bff717 	ldw	r2,-36(fp)
 201be48:	e0bffa15 	stw	r2,-24(fp)
 201be4c:	e0bffa17 	ldw	r2,-24(fp)
 201be50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201be54:	008010c4 	movi	r2,67
 201be58:	00004306 	br	201bf68 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 201be5c:	e0bff917 	ldw	r2,-28(fp)
 201be60:	10800b8b 	ldhu	r2,46(r2)
 201be64:	10bfffcc 	andi	r2,r2,65535
 201be68:	1000061e 	bne	r2,zero,201be84 <OSTimeDlyResume+0xdc>
 201be6c:	e0bff717 	ldw	r2,-36(fp)
 201be70:	e0bffb15 	stw	r2,-20(fp)
 201be74:	e0bffb17 	ldw	r2,-20(fp)
 201be78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 201be7c:	00801404 	movi	r2,80
 201be80:	00003906 	br	201bf68 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 201be84:	e0bff917 	ldw	r2,-28(fp)
 201be88:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 201be8c:	e0bff917 	ldw	r2,-28(fp)
 201be90:	10800c03 	ldbu	r2,48(r2)
 201be94:	10803fcc 	andi	r2,r2,255
 201be98:	10800dcc 	andi	r2,r2,55
 201be9c:	10000b26 	beq	r2,zero,201becc <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201bea0:	e0bff917 	ldw	r2,-28(fp)
 201bea4:	10c00c03 	ldbu	r3,48(r2)
 201bea8:	00bff204 	movi	r2,-56
 201beac:	1884703a 	and	r2,r3,r2
 201beb0:	1007883a 	mov	r3,r2
 201beb4:	e0bff917 	ldw	r2,-28(fp)
 201beb8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201bebc:	e0bff917 	ldw	r2,-28(fp)
 201bec0:	00c00044 	movi	r3,1
 201bec4:	10c00c45 	stb	r3,49(r2)
 201bec8:	00000206 	br	201bed4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201becc:	e0bff917 	ldw	r2,-28(fp)
 201bed0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 201bed4:	e0bff917 	ldw	r2,-28(fp)
 201bed8:	10800c03 	ldbu	r2,48(r2)
 201bedc:	10803fcc 	andi	r2,r2,255
 201bee0:	1080020c 	andi	r2,r2,8
 201bee4:	10001b1e 	bne	r2,zero,201bf54 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201bee8:	e0bff917 	ldw	r2,-28(fp)
 201beec:	10c00d83 	ldbu	r3,54(r2)
 201bef0:	d0a74303 	ldbu	r2,-25332(gp)
 201bef4:	1884b03a 	or	r2,r3,r2
 201bef8:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201befc:	e0bff917 	ldw	r2,-28(fp)
 201bf00:	10800d03 	ldbu	r2,52(r2)
 201bf04:	10c03fcc 	andi	r3,r2,255
 201bf08:	e0bff917 	ldw	r2,-28(fp)
 201bf0c:	10800d03 	ldbu	r2,52(r2)
 201bf10:	11003fcc 	andi	r4,r2,255
 201bf14:	d0a74344 	addi	r2,gp,-25331
 201bf18:	2085883a 	add	r2,r4,r2
 201bf1c:	11000003 	ldbu	r4,0(r2)
 201bf20:	e0bff917 	ldw	r2,-28(fp)
 201bf24:	10800d43 	ldbu	r2,53(r2)
 201bf28:	2084b03a 	or	r2,r4,r2
 201bf2c:	1009883a 	mov	r4,r2
 201bf30:	d0a74344 	addi	r2,gp,-25331
 201bf34:	1885883a 	add	r2,r3,r2
 201bf38:	11000005 	stb	r4,0(r2)
 201bf3c:	e0bff717 	ldw	r2,-36(fp)
 201bf40:	e0bffc15 	stw	r2,-16(fp)
 201bf44:	e0bffc17 	ldw	r2,-16(fp)
 201bf48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201bf4c:	20156ec0 	call	20156ec <OS_Sched>
 201bf50:	00000406 	br	201bf64 <OSTimeDlyResume+0x1bc>
 201bf54:	e0bff717 	ldw	r2,-36(fp)
 201bf58:	e0bffd15 	stw	r2,-12(fp)
 201bf5c:	e0bffd17 	ldw	r2,-12(fp)
 201bf60:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201bf64:	0005883a 	mov	r2,zero
}
 201bf68:	e037883a 	mov	sp,fp
 201bf6c:	dfc00117 	ldw	ra,4(sp)
 201bf70:	df000017 	ldw	fp,0(sp)
 201bf74:	dec00204 	addi	sp,sp,8
 201bf78:	f800283a 	ret

0201bf7c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201bf7c:	defffb04 	addi	sp,sp,-20
 201bf80:	df000415 	stw	fp,16(sp)
 201bf84:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bf88:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bf8c:	0005303a 	rdctl	r2,status
 201bf90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bf94:	e0fffe17 	ldw	r3,-8(fp)
 201bf98:	00bfff84 	movi	r2,-2
 201bf9c:	1884703a 	and	r2,r3,r2
 201bfa0:	1001703a 	wrctl	status,r2
  
  return context;
 201bfa4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 201bfa8:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 201bfac:	d0a74717 	ldw	r2,-25316(gp)
 201bfb0:	e0bffd15 	stw	r2,-12(fp)
 201bfb4:	e0bffc17 	ldw	r2,-16(fp)
 201bfb8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bfbc:	e0bfff17 	ldw	r2,-4(fp)
 201bfc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201bfc4:	e0bffd17 	ldw	r2,-12(fp)
}
 201bfc8:	e037883a 	mov	sp,fp
 201bfcc:	df000017 	ldw	fp,0(sp)
 201bfd0:	dec00104 	addi	sp,sp,4
 201bfd4:	f800283a 	ret

0201bfd8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201bfd8:	defffb04 	addi	sp,sp,-20
 201bfdc:	df000415 	stw	fp,16(sp)
 201bfe0:	df000404 	addi	fp,sp,16
 201bfe4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bfe8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bfec:	0005303a 	rdctl	r2,status
 201bff0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bff4:	e0fffd17 	ldw	r3,-12(fp)
 201bff8:	00bfff84 	movi	r2,-2
 201bffc:	1884703a 	and	r2,r3,r2
 201c000:	1001703a 	wrctl	status,r2
  
  return context;
 201c004:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201c008:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 201c00c:	e0bfff17 	ldw	r2,-4(fp)
 201c010:	d0a74715 	stw	r2,-25316(gp)
 201c014:	e0bffc17 	ldw	r2,-16(fp)
 201c018:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c01c:	e0bffe17 	ldw	r2,-8(fp)
 201c020:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201c024:	0001883a 	nop
 201c028:	e037883a 	mov	sp,fp
 201c02c:	df000017 	ldw	fp,0(sp)
 201c030:	dec00104 	addi	sp,sp,4
 201c034:	f800283a 	ret

0201c038 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201c038:	defffd04 	addi	sp,sp,-12
 201c03c:	dfc00215 	stw	ra,8(sp)
 201c040:	df000115 	stw	fp,4(sp)
 201c044:	df000104 	addi	fp,sp,4
 201c048:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201c04c:	d1600804 	addi	r5,gp,-32736
 201c050:	e13fff17 	ldw	r4,-4(fp)
 201c054:	201d0d40 	call	201d0d4 <alt_dev_llist_insert>
}
 201c058:	e037883a 	mov	sp,fp
 201c05c:	dfc00117 	ldw	ra,4(sp)
 201c060:	df000017 	ldw	fp,0(sp)
 201c064:	dec00204 	addi	sp,sp,8
 201c068:	f800283a 	ret

0201c06c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201c06c:	defffd04 	addi	sp,sp,-12
 201c070:	dfc00215 	stw	ra,8(sp)
 201c074:	df000115 	stw	fp,4(sp)
 201c078:	df000104 	addi	fp,sp,4
 201c07c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201c080:	201da440 	call	201da44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201c084:	00800044 	movi	r2,1
 201c088:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201c08c:	0001883a 	nop
 201c090:	e037883a 	mov	sp,fp
 201c094:	dfc00117 	ldw	ra,4(sp)
 201c098:	df000017 	ldw	fp,0(sp)
 201c09c:	dec00204 	addi	sp,sp,8
 201c0a0:	f800283a 	ret

0201c0a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201c0a4:	defffe04 	addi	sp,sp,-8
 201c0a8:	dfc00115 	stw	ra,4(sp)
 201c0ac:	df000015 	stw	fp,0(sp)
 201c0b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 201c0b4:	01c0fa04 	movi	r7,1000
 201c0b8:	01800044 	movi	r6,1
 201c0bc:	000b883a 	mov	r5,zero
 201c0c0:	0009883a 	mov	r4,zero
 201c0c4:	201cea80 	call	201cea8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201c0c8:	000d883a 	mov	r6,zero
 201c0cc:	000b883a 	mov	r5,zero
 201c0d0:	010080b4 	movhi	r4,514
 201c0d4:	213e0b04 	addi	r4,r4,-2004
 201c0d8:	201c2680 	call	201c268 <altera_avalon_jtag_uart_init>
 201c0dc:	010080b4 	movhi	r4,514
 201c0e0:	213e0104 	addi	r4,r4,-2044
 201c0e4:	201c0380 	call	201c038 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 201c0e8:	0001883a 	nop
}
 201c0ec:	0001883a 	nop
 201c0f0:	e037883a 	mov	sp,fp
 201c0f4:	dfc00117 	ldw	ra,4(sp)
 201c0f8:	df000017 	ldw	fp,0(sp)
 201c0fc:	dec00204 	addi	sp,sp,8
 201c100:	f800283a 	ret

0201c104 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201c104:	defffa04 	addi	sp,sp,-24
 201c108:	dfc00515 	stw	ra,20(sp)
 201c10c:	df000415 	stw	fp,16(sp)
 201c110:	df000404 	addi	fp,sp,16
 201c114:	e13ffd15 	stw	r4,-12(fp)
 201c118:	e17ffe15 	stw	r5,-8(fp)
 201c11c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201c120:	e0bffd17 	ldw	r2,-12(fp)
 201c124:	10800017 	ldw	r2,0(r2)
 201c128:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201c12c:	e0bffc17 	ldw	r2,-16(fp)
 201c130:	10c00a04 	addi	r3,r2,40
 201c134:	e0bffd17 	ldw	r2,-12(fp)
 201c138:	10800217 	ldw	r2,8(r2)
 201c13c:	100f883a 	mov	r7,r2
 201c140:	e1bfff17 	ldw	r6,-4(fp)
 201c144:	e17ffe17 	ldw	r5,-8(fp)
 201c148:	1809883a 	mov	r4,r3
 201c14c:	201c8b00 	call	201c8b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 201c150:	e037883a 	mov	sp,fp
 201c154:	dfc00117 	ldw	ra,4(sp)
 201c158:	df000017 	ldw	fp,0(sp)
 201c15c:	dec00204 	addi	sp,sp,8
 201c160:	f800283a 	ret

0201c164 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201c164:	defffa04 	addi	sp,sp,-24
 201c168:	dfc00515 	stw	ra,20(sp)
 201c16c:	df000415 	stw	fp,16(sp)
 201c170:	df000404 	addi	fp,sp,16
 201c174:	e13ffd15 	stw	r4,-12(fp)
 201c178:	e17ffe15 	stw	r5,-8(fp)
 201c17c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201c180:	e0bffd17 	ldw	r2,-12(fp)
 201c184:	10800017 	ldw	r2,0(r2)
 201c188:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201c18c:	e0bffc17 	ldw	r2,-16(fp)
 201c190:	10c00a04 	addi	r3,r2,40
 201c194:	e0bffd17 	ldw	r2,-12(fp)
 201c198:	10800217 	ldw	r2,8(r2)
 201c19c:	100f883a 	mov	r7,r2
 201c1a0:	e1bfff17 	ldw	r6,-4(fp)
 201c1a4:	e17ffe17 	ldw	r5,-8(fp)
 201c1a8:	1809883a 	mov	r4,r3
 201c1ac:	201cb6c0 	call	201cb6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201c1b0:	e037883a 	mov	sp,fp
 201c1b4:	dfc00117 	ldw	ra,4(sp)
 201c1b8:	df000017 	ldw	fp,0(sp)
 201c1bc:	dec00204 	addi	sp,sp,8
 201c1c0:	f800283a 	ret

0201c1c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 201c1c4:	defffc04 	addi	sp,sp,-16
 201c1c8:	dfc00315 	stw	ra,12(sp)
 201c1cc:	df000215 	stw	fp,8(sp)
 201c1d0:	df000204 	addi	fp,sp,8
 201c1d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201c1d8:	e0bfff17 	ldw	r2,-4(fp)
 201c1dc:	10800017 	ldw	r2,0(r2)
 201c1e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 201c1e4:	e0bffe17 	ldw	r2,-8(fp)
 201c1e8:	10c00a04 	addi	r3,r2,40
 201c1ec:	e0bfff17 	ldw	r2,-4(fp)
 201c1f0:	10800217 	ldw	r2,8(r2)
 201c1f4:	100b883a 	mov	r5,r2
 201c1f8:	1809883a 	mov	r4,r3
 201c1fc:	201c7580 	call	201c758 <altera_avalon_jtag_uart_close>
}
 201c200:	e037883a 	mov	sp,fp
 201c204:	dfc00117 	ldw	ra,4(sp)
 201c208:	df000017 	ldw	fp,0(sp)
 201c20c:	dec00204 	addi	sp,sp,8
 201c210:	f800283a 	ret

0201c214 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201c214:	defffa04 	addi	sp,sp,-24
 201c218:	dfc00515 	stw	ra,20(sp)
 201c21c:	df000415 	stw	fp,16(sp)
 201c220:	df000404 	addi	fp,sp,16
 201c224:	e13ffd15 	stw	r4,-12(fp)
 201c228:	e17ffe15 	stw	r5,-8(fp)
 201c22c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 201c230:	e0bffd17 	ldw	r2,-12(fp)
 201c234:	10800017 	ldw	r2,0(r2)
 201c238:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201c23c:	e0bffc17 	ldw	r2,-16(fp)
 201c240:	10800a04 	addi	r2,r2,40
 201c244:	e1bfff17 	ldw	r6,-4(fp)
 201c248:	e17ffe17 	ldw	r5,-8(fp)
 201c24c:	1009883a 	mov	r4,r2
 201c250:	201c7c00 	call	201c7c0 <altera_avalon_jtag_uart_ioctl>
}
 201c254:	e037883a 	mov	sp,fp
 201c258:	dfc00117 	ldw	ra,4(sp)
 201c25c:	df000017 	ldw	fp,0(sp)
 201c260:	dec00204 	addi	sp,sp,8
 201c264:	f800283a 	ret

0201c268 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201c268:	defff104 	addi	sp,sp,-60
 201c26c:	dfc00e15 	stw	ra,56(sp)
 201c270:	df000d15 	stw	fp,52(sp)
 201c274:	df000d04 	addi	fp,sp,52
 201c278:	e13ff915 	stw	r4,-28(fp)
 201c27c:	e17ffa15 	stw	r5,-24(fp)
 201c280:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201c284:	e0bff917 	ldw	r2,-28(fp)
 201c288:	10800c04 	addi	r2,r2,48
 201c28c:	e0bff415 	stw	r2,-48(fp)
 201c290:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 201c294:	e0bff80b 	ldhu	r2,-32(fp)
 201c298:	e0fff884 	addi	r3,fp,-30
 201c29c:	180b883a 	mov	r5,r3
 201c2a0:	1009883a 	mov	r4,r2
 201c2a4:	20162580 	call	2016258 <OSFlagCreate>
 201c2a8:	1007883a 	mov	r3,r2
 201c2ac:	e0bff417 	ldw	r2,-48(fp)
 201c2b0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 201c2b4:	e0bff917 	ldw	r2,-28(fp)
 201c2b8:	10800a04 	addi	r2,r2,40
 201c2bc:	e0bff515 	stw	r2,-44(fp)
 201c2c0:	00800044 	movi	r2,1
 201c2c4:	e0bff78d 	sth	r2,-34(fp)
 201c2c8:	e0bff78b 	ldhu	r2,-34(fp)
 201c2cc:	1009883a 	mov	r4,r2
 201c2d0:	2019a340 	call	2019a34 <OSSemCreate>
 201c2d4:	1007883a 	mov	r3,r2
 201c2d8:	e0bff517 	ldw	r2,-44(fp)
 201c2dc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 201c2e0:	e0bff917 	ldw	r2,-28(fp)
 201c2e4:	10800b04 	addi	r2,r2,44
 201c2e8:	e0bff615 	stw	r2,-40(fp)
 201c2ec:	00800044 	movi	r2,1
 201c2f0:	e0bff70d 	sth	r2,-36(fp)
 201c2f4:	e0bff70b 	ldhu	r2,-36(fp)
 201c2f8:	1009883a 	mov	r4,r2
 201c2fc:	2019a340 	call	2019a34 <OSSemCreate>
 201c300:	1007883a 	mov	r3,r2
 201c304:	e0bff617 	ldw	r2,-40(fp)
 201c308:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201c30c:	e0bff917 	ldw	r2,-28(fp)
 201c310:	00c00044 	movi	r3,1
 201c314:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 201c318:	e0bff917 	ldw	r2,-28(fp)
 201c31c:	10800017 	ldw	r2,0(r2)
 201c320:	10800104 	addi	r2,r2,4
 201c324:	1007883a 	mov	r3,r2
 201c328:	e0bff917 	ldw	r2,-28(fp)
 201c32c:	10800817 	ldw	r2,32(r2)
 201c330:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 201c334:	e0bffa17 	ldw	r2,-24(fp)
 201c338:	e0fffb17 	ldw	r3,-20(fp)
 201c33c:	d8000015 	stw	zero,0(sp)
 201c340:	e1fff917 	ldw	r7,-28(fp)
 201c344:	018080b4 	movhi	r6,514
 201c348:	31b0ec04 	addi	r6,r6,-15440
 201c34c:	180b883a 	mov	r5,r3
 201c350:	1009883a 	mov	r4,r2
 201c354:	201d26c0 	call	201d26c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201c358:	e0bff917 	ldw	r2,-28(fp)
 201c35c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201c360:	e0bff917 	ldw	r2,-28(fp)
 201c364:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201c368:	d0e74c17 	ldw	r3,-25296(gp)
 201c36c:	e1fff917 	ldw	r7,-28(fp)
 201c370:	018080b4 	movhi	r6,514
 201c374:	31b19504 	addi	r6,r6,-14764
 201c378:	180b883a 	mov	r5,r3
 201c37c:	1009883a 	mov	r4,r2
 201c380:	201cf240 	call	201cf24 <alt_alarm_start>
 201c384:	1000040e 	bge	r2,zero,201c398 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201c388:	e0fff917 	ldw	r3,-28(fp)
 201c38c:	00a00034 	movhi	r2,32768
 201c390:	10bfffc4 	addi	r2,r2,-1
 201c394:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201c398:	0001883a 	nop
 201c39c:	e037883a 	mov	sp,fp
 201c3a0:	dfc00117 	ldw	ra,4(sp)
 201c3a4:	df000017 	ldw	fp,0(sp)
 201c3a8:	dec00204 	addi	sp,sp,8
 201c3ac:	f800283a 	ret

0201c3b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201c3b0:	defff204 	addi	sp,sp,-56
 201c3b4:	dfc00d15 	stw	ra,52(sp)
 201c3b8:	df000c15 	stw	fp,48(sp)
 201c3bc:	df000c04 	addi	fp,sp,48
 201c3c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201c3c4:	e0bfff17 	ldw	r2,-4(fp)
 201c3c8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 201c3cc:	e0bff617 	ldw	r2,-40(fp)
 201c3d0:	10800017 	ldw	r2,0(r2)
 201c3d4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c3d8:	e0bff717 	ldw	r2,-36(fp)
 201c3dc:	10800104 	addi	r2,r2,4
 201c3e0:	10800037 	ldwio	r2,0(r2)
 201c3e4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201c3e8:	e0bff817 	ldw	r2,-32(fp)
 201c3ec:	1080c00c 	andi	r2,r2,768
 201c3f0:	10009126 	beq	r2,zero,201c638 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201c3f4:	e0bff817 	ldw	r2,-32(fp)
 201c3f8:	1080400c 	andi	r2,r2,256
 201c3fc:	10004726 	beq	r2,zero,201c51c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201c400:	00800074 	movhi	r2,1
 201c404:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c408:	e0bff617 	ldw	r2,-40(fp)
 201c40c:	10800d17 	ldw	r2,52(r2)
 201c410:	10800044 	addi	r2,r2,1
 201c414:	1081ffcc 	andi	r2,r2,2047
 201c418:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 201c41c:	e0bff617 	ldw	r2,-40(fp)
 201c420:	10c00e17 	ldw	r3,56(r2)
 201c424:	e0bff917 	ldw	r2,-28(fp)
 201c428:	18802726 	beq	r3,r2,201c4c8 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201c42c:	e0bff717 	ldw	r2,-36(fp)
 201c430:	10800037 	ldwio	r2,0(r2)
 201c434:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201c438:	e0bff417 	ldw	r2,-48(fp)
 201c43c:	10a0000c 	andi	r2,r2,32768
 201c440:	10002326 	beq	r2,zero,201c4d0 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201c444:	e0bff617 	ldw	r2,-40(fp)
 201c448:	10800d17 	ldw	r2,52(r2)
 201c44c:	e0fff417 	ldw	r3,-48(fp)
 201c450:	1809883a 	mov	r4,r3
 201c454:	e0fff617 	ldw	r3,-40(fp)
 201c458:	1885883a 	add	r2,r3,r2
 201c45c:	10801104 	addi	r2,r2,68
 201c460:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c464:	e0bff617 	ldw	r2,-40(fp)
 201c468:	10800d17 	ldw	r2,52(r2)
 201c46c:	10800044 	addi	r2,r2,1
 201c470:	10c1ffcc 	andi	r3,r2,2047
 201c474:	e0bff617 	ldw	r2,-40(fp)
 201c478:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 201c47c:	e0bff617 	ldw	r2,-40(fp)
 201c480:	10800c17 	ldw	r2,48(r2)
 201c484:	e0bffb15 	stw	r2,-20(fp)
 201c488:	00800044 	movi	r2,1
 201c48c:	e0bffc0d 	sth	r2,-16(fp)
 201c490:	00800044 	movi	r2,1
 201c494:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c498:	d0a73743 	ldbu	r2,-25379(gp)
 201c49c:	10803fcc 	andi	r2,r2,255
 201c4a0:	103fd926 	beq	r2,zero,201c408 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 201c4a4:	e0bffc0b 	ldhu	r2,-16(fp)
 201c4a8:	e0fffc83 	ldbu	r3,-14(fp)
 201c4ac:	e13ffdc4 	addi	r4,fp,-9
 201c4b0:	200f883a 	mov	r7,r4
 201c4b4:	180d883a 	mov	r6,r3
 201c4b8:	100b883a 	mov	r5,r2
 201c4bc:	e13ffb17 	ldw	r4,-20(fp)
 201c4c0:	2016e340 	call	2016e34 <OSFlagPost>
      }
 201c4c4:	003fd006 	br	201c408 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 201c4c8:	0001883a 	nop
 201c4cc:	00000106 	br	201c4d4 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 201c4d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 201c4d4:	e0bff417 	ldw	r2,-48(fp)
 201c4d8:	10bfffec 	andhi	r2,r2,65535
 201c4dc:	10000f26 	beq	r2,zero,201c51c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201c4e0:	e0bff617 	ldw	r2,-40(fp)
 201c4e4:	10c00817 	ldw	r3,32(r2)
 201c4e8:	00bfff84 	movi	r2,-2
 201c4ec:	1886703a 	and	r3,r3,r2
 201c4f0:	e0bff617 	ldw	r2,-40(fp)
 201c4f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201c4f8:	e0bff717 	ldw	r2,-36(fp)
 201c4fc:	10800104 	addi	r2,r2,4
 201c500:	1007883a 	mov	r3,r2
 201c504:	e0bff617 	ldw	r2,-40(fp)
 201c508:	10800817 	ldw	r2,32(r2)
 201c50c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c510:	e0bff717 	ldw	r2,-36(fp)
 201c514:	10800104 	addi	r2,r2,4
 201c518:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201c51c:	e0bff817 	ldw	r2,-32(fp)
 201c520:	1080800c 	andi	r2,r2,512
 201c524:	103fac26 	beq	r2,zero,201c3d8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201c528:	e0bff817 	ldw	r2,-32(fp)
 201c52c:	1004d43a 	srli	r2,r2,16
 201c530:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201c534:	00002606 	br	201c5d0 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201c538:	e0bff717 	ldw	r2,-36(fp)
 201c53c:	e0fff617 	ldw	r3,-40(fp)
 201c540:	18c01017 	ldw	r3,64(r3)
 201c544:	e13ff617 	ldw	r4,-40(fp)
 201c548:	20c7883a 	add	r3,r4,r3
 201c54c:	18c21104 	addi	r3,r3,2116
 201c550:	18c00003 	ldbu	r3,0(r3)
 201c554:	18c03fcc 	andi	r3,r3,255
 201c558:	18c0201c 	xori	r3,r3,128
 201c55c:	18ffe004 	addi	r3,r3,-128
 201c560:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c564:	e0bff617 	ldw	r2,-40(fp)
 201c568:	10801017 	ldw	r2,64(r2)
 201c56c:	10800044 	addi	r2,r2,1
 201c570:	10c1ffcc 	andi	r3,r2,2047
 201c574:	e0bff617 	ldw	r2,-40(fp)
 201c578:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 201c57c:	e0bff617 	ldw	r2,-40(fp)
 201c580:	10800c17 	ldw	r2,48(r2)
 201c584:	e0bffa15 	stw	r2,-24(fp)
 201c588:	00800084 	movi	r2,2
 201c58c:	e0bffd0d 	sth	r2,-12(fp)
 201c590:	00800044 	movi	r2,1
 201c594:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c598:	d0a73743 	ldbu	r2,-25379(gp)
 201c59c:	10803fcc 	andi	r2,r2,255
 201c5a0:	10000826 	beq	r2,zero,201c5c4 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 201c5a4:	e0bffd0b 	ldhu	r2,-12(fp)
 201c5a8:	e0fffd83 	ldbu	r3,-10(fp)
 201c5ac:	e13ffe04 	addi	r4,fp,-8
 201c5b0:	200f883a 	mov	r7,r4
 201c5b4:	180d883a 	mov	r6,r3
 201c5b8:	100b883a 	mov	r5,r2
 201c5bc:	e13ffa17 	ldw	r4,-24(fp)
 201c5c0:	2016e340 	call	2016e34 <OSFlagPost>

        space--;
 201c5c4:	e0bff517 	ldw	r2,-44(fp)
 201c5c8:	10bfffc4 	addi	r2,r2,-1
 201c5cc:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 201c5d0:	e0bff517 	ldw	r2,-44(fp)
 201c5d4:	10000526 	beq	r2,zero,201c5ec <altera_avalon_jtag_uart_irq+0x23c>
 201c5d8:	e0bff617 	ldw	r2,-40(fp)
 201c5dc:	10c01017 	ldw	r3,64(r2)
 201c5e0:	e0bff617 	ldw	r2,-40(fp)
 201c5e4:	10800f17 	ldw	r2,60(r2)
 201c5e8:	18bfd31e 	bne	r3,r2,201c538 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 201c5ec:	e0bff517 	ldw	r2,-44(fp)
 201c5f0:	103f7926 	beq	r2,zero,201c3d8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201c5f4:	e0bff617 	ldw	r2,-40(fp)
 201c5f8:	10c00817 	ldw	r3,32(r2)
 201c5fc:	00bfff44 	movi	r2,-3
 201c600:	1886703a 	and	r3,r3,r2
 201c604:	e0bff617 	ldw	r2,-40(fp)
 201c608:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201c60c:	e0bff617 	ldw	r2,-40(fp)
 201c610:	10800017 	ldw	r2,0(r2)
 201c614:	10800104 	addi	r2,r2,4
 201c618:	1007883a 	mov	r3,r2
 201c61c:	e0bff617 	ldw	r2,-40(fp)
 201c620:	10800817 	ldw	r2,32(r2)
 201c624:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201c628:	e0bff717 	ldw	r2,-36(fp)
 201c62c:	10800104 	addi	r2,r2,4
 201c630:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201c634:	003f6806 	br	201c3d8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 201c638:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 201c63c:	0001883a 	nop
 201c640:	e037883a 	mov	sp,fp
 201c644:	dfc00117 	ldw	ra,4(sp)
 201c648:	df000017 	ldw	fp,0(sp)
 201c64c:	dec00204 	addi	sp,sp,8
 201c650:	f800283a 	ret

0201c654 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201c654:	defff904 	addi	sp,sp,-28
 201c658:	dfc00615 	stw	ra,24(sp)
 201c65c:	df000515 	stw	fp,20(sp)
 201c660:	df000504 	addi	fp,sp,20
 201c664:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201c668:	e0bfff17 	ldw	r2,-4(fp)
 201c66c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201c670:	e0bffb17 	ldw	r2,-20(fp)
 201c674:	10800017 	ldw	r2,0(r2)
 201c678:	10800104 	addi	r2,r2,4
 201c67c:	10800037 	ldwio	r2,0(r2)
 201c680:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201c684:	e0bffc17 	ldw	r2,-16(fp)
 201c688:	1081000c 	andi	r2,r2,1024
 201c68c:	10000b26 	beq	r2,zero,201c6bc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 201c690:	e0bffb17 	ldw	r2,-20(fp)
 201c694:	10800017 	ldw	r2,0(r2)
 201c698:	10800104 	addi	r2,r2,4
 201c69c:	1007883a 	mov	r3,r2
 201c6a0:	e0bffb17 	ldw	r2,-20(fp)
 201c6a4:	10800817 	ldw	r2,32(r2)
 201c6a8:	10810014 	ori	r2,r2,1024
 201c6ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 201c6b0:	e0bffb17 	ldw	r2,-20(fp)
 201c6b4:	10000915 	stw	zero,36(r2)
 201c6b8:	00002106 	br	201c740 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201c6bc:	e0bffb17 	ldw	r2,-20(fp)
 201c6c0:	10c00917 	ldw	r3,36(r2)
 201c6c4:	00a00034 	movhi	r2,32768
 201c6c8:	10bfff04 	addi	r2,r2,-4
 201c6cc:	10c01c36 	bltu	r2,r3,201c740 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 201c6d0:	e0bffb17 	ldw	r2,-20(fp)
 201c6d4:	10800917 	ldw	r2,36(r2)
 201c6d8:	10c00044 	addi	r3,r2,1
 201c6dc:	e0bffb17 	ldw	r2,-20(fp)
 201c6e0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 201c6e4:	e0bffb17 	ldw	r2,-20(fp)
 201c6e8:	10c00917 	ldw	r3,36(r2)
 201c6ec:	e0bffb17 	ldw	r2,-20(fp)
 201c6f0:	10800117 	ldw	r2,4(r2)
 201c6f4:	18801236 	bltu	r3,r2,201c740 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201c6f8:	e0bffb17 	ldw	r2,-20(fp)
 201c6fc:	10800c17 	ldw	r2,48(r2)
 201c700:	e0bffd15 	stw	r2,-12(fp)
 201c704:	00800104 	movi	r2,4
 201c708:	e0bffe0d 	sth	r2,-8(fp)
 201c70c:	00800044 	movi	r2,1
 201c710:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201c714:	d0a73743 	ldbu	r2,-25379(gp)
 201c718:	10803fcc 	andi	r2,r2,255
 201c71c:	10000826 	beq	r2,zero,201c740 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 201c720:	e0bffe0b 	ldhu	r2,-8(fp)
 201c724:	e0fffe83 	ldbu	r3,-6(fp)
 201c728:	e13ffec4 	addi	r4,fp,-5
 201c72c:	200f883a 	mov	r7,r4
 201c730:	180d883a 	mov	r6,r3
 201c734:	100b883a 	mov	r5,r2
 201c738:	e13ffd17 	ldw	r4,-12(fp)
 201c73c:	2016e340 	call	2016e34 <OSFlagPost>
 201c740:	d0a74c17 	ldw	r2,-25296(gp)
    }
  }

  return alt_ticks_per_second();
}
 201c744:	e037883a 	mov	sp,fp
 201c748:	dfc00117 	ldw	ra,4(sp)
 201c74c:	df000017 	ldw	fp,0(sp)
 201c750:	dec00204 	addi	sp,sp,8
 201c754:	f800283a 	ret

0201c758 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 201c758:	defffd04 	addi	sp,sp,-12
 201c75c:	df000215 	stw	fp,8(sp)
 201c760:	df000204 	addi	fp,sp,8
 201c764:	e13ffe15 	stw	r4,-8(fp)
 201c768:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201c76c:	00000506 	br	201c784 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 201c770:	e0bfff17 	ldw	r2,-4(fp)
 201c774:	1090000c 	andi	r2,r2,16384
 201c778:	10000226 	beq	r2,zero,201c784 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201c77c:	00bffd44 	movi	r2,-11
 201c780:	00000b06 	br	201c7b0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201c784:	e0bffe17 	ldw	r2,-8(fp)
 201c788:	10c01017 	ldw	r3,64(r2)
 201c78c:	e0bffe17 	ldw	r2,-8(fp)
 201c790:	10800f17 	ldw	r2,60(r2)
 201c794:	18800526 	beq	r3,r2,201c7ac <altera_avalon_jtag_uart_close+0x54>
 201c798:	e0bffe17 	ldw	r2,-8(fp)
 201c79c:	10c00917 	ldw	r3,36(r2)
 201c7a0:	e0bffe17 	ldw	r2,-8(fp)
 201c7a4:	10800117 	ldw	r2,4(r2)
 201c7a8:	18bff136 	bltu	r3,r2,201c770 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201c7ac:	0005883a 	mov	r2,zero
}
 201c7b0:	e037883a 	mov	sp,fp
 201c7b4:	df000017 	ldw	fp,0(sp)
 201c7b8:	dec00104 	addi	sp,sp,4
 201c7bc:	f800283a 	ret

0201c7c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201c7c0:	defffa04 	addi	sp,sp,-24
 201c7c4:	df000515 	stw	fp,20(sp)
 201c7c8:	df000504 	addi	fp,sp,20
 201c7cc:	e13ffd15 	stw	r4,-12(fp)
 201c7d0:	e17ffe15 	stw	r5,-8(fp)
 201c7d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 201c7d8:	00bff9c4 	movi	r2,-25
 201c7dc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 201c7e0:	e0bffe17 	ldw	r2,-8(fp)
 201c7e4:	10da8060 	cmpeqi	r3,r2,27137
 201c7e8:	1800031e 	bne	r3,zero,201c7f8 <altera_avalon_jtag_uart_ioctl+0x38>
 201c7ec:	109a80a0 	cmpeqi	r2,r2,27138
 201c7f0:	1000181e 	bne	r2,zero,201c854 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 201c7f4:	00002906 	br	201c89c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201c7f8:	e0bffd17 	ldw	r2,-12(fp)
 201c7fc:	10c00117 	ldw	r3,4(r2)
 201c800:	00a00034 	movhi	r2,32768
 201c804:	10bfffc4 	addi	r2,r2,-1
 201c808:	18802126 	beq	r3,r2,201c890 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 201c80c:	e0bfff17 	ldw	r2,-4(fp)
 201c810:	10800017 	ldw	r2,0(r2)
 201c814:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201c818:	e0bffc17 	ldw	r2,-16(fp)
 201c81c:	10800090 	cmplti	r2,r2,2
 201c820:	1000061e 	bne	r2,zero,201c83c <altera_avalon_jtag_uart_ioctl+0x7c>
 201c824:	e0fffc17 	ldw	r3,-16(fp)
 201c828:	00a00034 	movhi	r2,32768
 201c82c:	10bfffc4 	addi	r2,r2,-1
 201c830:	18800226 	beq	r3,r2,201c83c <altera_avalon_jtag_uart_ioctl+0x7c>
 201c834:	e0bffc17 	ldw	r2,-16(fp)
 201c838:	00000206 	br	201c844 <altera_avalon_jtag_uart_ioctl+0x84>
 201c83c:	00a00034 	movhi	r2,32768
 201c840:	10bfff84 	addi	r2,r2,-2
 201c844:	e0fffd17 	ldw	r3,-12(fp)
 201c848:	18800115 	stw	r2,4(r3)
      rc = 0;
 201c84c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201c850:	00000f06 	br	201c890 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201c854:	e0bffd17 	ldw	r2,-12(fp)
 201c858:	10c00117 	ldw	r3,4(r2)
 201c85c:	00a00034 	movhi	r2,32768
 201c860:	10bfffc4 	addi	r2,r2,-1
 201c864:	18800c26 	beq	r3,r2,201c898 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201c868:	e0bffd17 	ldw	r2,-12(fp)
 201c86c:	10c00917 	ldw	r3,36(r2)
 201c870:	e0bffd17 	ldw	r2,-12(fp)
 201c874:	10800117 	ldw	r2,4(r2)
 201c878:	1885803a 	cmpltu	r2,r3,r2
 201c87c:	10c03fcc 	andi	r3,r2,255
 201c880:	e0bfff17 	ldw	r2,-4(fp)
 201c884:	10c00015 	stw	r3,0(r2)
      rc = 0;
 201c888:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201c88c:	00000206 	br	201c898 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 201c890:	0001883a 	nop
 201c894:	00000106 	br	201c89c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 201c898:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201c89c:	e0bffb17 	ldw	r2,-20(fp)
}
 201c8a0:	e037883a 	mov	sp,fp
 201c8a4:	df000017 	ldw	fp,0(sp)
 201c8a8:	dec00104 	addi	sp,sp,4
 201c8ac:	f800283a 	ret

0201c8b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201c8b0:	deffed04 	addi	sp,sp,-76
 201c8b4:	dfc01215 	stw	ra,72(sp)
 201c8b8:	df001115 	stw	fp,68(sp)
 201c8bc:	df001104 	addi	fp,sp,68
 201c8c0:	e13ffc15 	stw	r4,-16(fp)
 201c8c4:	e17ffd15 	stw	r5,-12(fp)
 201c8c8:	e1bffe15 	stw	r6,-8(fp)
 201c8cc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 201c8d0:	e0bffd17 	ldw	r2,-12(fp)
 201c8d4:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201c8d8:	e0bffc17 	ldw	r2,-16(fp)
 201c8dc:	10800a17 	ldw	r2,40(r2)
 201c8e0:	e0bff815 	stw	r2,-32(fp)
 201c8e4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201c8e8:	e0bff90b 	ldhu	r2,-28(fp)
 201c8ec:	e0fffb04 	addi	r3,fp,-20
 201c8f0:	180d883a 	mov	r6,r3
 201c8f4:	100b883a 	mov	r5,r2
 201c8f8:	e13ff817 	ldw	r4,-32(fp)
 201c8fc:	2019d4c0 	call	2019d4c <OSSemPend>

  while (space > 0)
 201c900:	00006106 	br	201ca88 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201c904:	e0bffc17 	ldw	r2,-16(fp)
 201c908:	10800d17 	ldw	r2,52(r2)
 201c90c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 201c910:	e0bffc17 	ldw	r2,-16(fp)
 201c914:	10800e17 	ldw	r2,56(r2)
 201c918:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 201c91c:	e0fff317 	ldw	r3,-52(fp)
 201c920:	e0bff417 	ldw	r2,-48(fp)
 201c924:	18800536 	bltu	r3,r2,201c93c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 201c928:	e0fff317 	ldw	r3,-52(fp)
 201c92c:	e0bff417 	ldw	r2,-48(fp)
 201c930:	1885c83a 	sub	r2,r3,r2
 201c934:	e0bff115 	stw	r2,-60(fp)
 201c938:	00000406 	br	201c94c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201c93c:	00c20004 	movi	r3,2048
 201c940:	e0bff417 	ldw	r2,-48(fp)
 201c944:	1885c83a 	sub	r2,r3,r2
 201c948:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201c94c:	e0bff117 	ldw	r2,-60(fp)
 201c950:	10001e26 	beq	r2,zero,201c9cc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201c954:	e0fffe17 	ldw	r3,-8(fp)
 201c958:	e0bff117 	ldw	r2,-60(fp)
 201c95c:	1880022e 	bgeu	r3,r2,201c968 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 201c960:	e0bffe17 	ldw	r2,-8(fp)
 201c964:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201c968:	e0bffc17 	ldw	r2,-16(fp)
 201c96c:	10c01104 	addi	r3,r2,68
 201c970:	e0bff417 	ldw	r2,-48(fp)
 201c974:	1885883a 	add	r2,r3,r2
 201c978:	e1bff117 	ldw	r6,-60(fp)
 201c97c:	100b883a 	mov	r5,r2
 201c980:	e13ff017 	ldw	r4,-64(fp)
 201c984:	2004ac40 	call	2004ac4 <memcpy>
      ptr   += n;
 201c988:	e0fff017 	ldw	r3,-64(fp)
 201c98c:	e0bff117 	ldw	r2,-60(fp)
 201c990:	1885883a 	add	r2,r3,r2
 201c994:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 201c998:	e0fffe17 	ldw	r3,-8(fp)
 201c99c:	e0bff117 	ldw	r2,-60(fp)
 201c9a0:	1885c83a 	sub	r2,r3,r2
 201c9a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201c9a8:	e0fff417 	ldw	r3,-48(fp)
 201c9ac:	e0bff117 	ldw	r2,-60(fp)
 201c9b0:	1885883a 	add	r2,r3,r2
 201c9b4:	10c1ffcc 	andi	r3,r2,2047
 201c9b8:	e0bffc17 	ldw	r2,-16(fp)
 201c9bc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 201c9c0:	e0bffe17 	ldw	r2,-8(fp)
 201c9c4:	00bfcf16 	blt	zero,r2,201c904 <altera_avalon_jtag_uart_read+0x54>
 201c9c8:	00000106 	br	201c9d0 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 201c9cc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 201c9d0:	e0fff017 	ldw	r3,-64(fp)
 201c9d4:	e0bffd17 	ldw	r2,-12(fp)
 201c9d8:	18802e1e 	bne	r3,r2,201ca94 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 201c9dc:	e0bfff17 	ldw	r2,-4(fp)
 201c9e0:	1090000c 	andi	r2,r2,16384
 201c9e4:	10002d1e 	bne	r2,zero,201ca9c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 201c9e8:	d0a73743 	ldbu	r2,-25379(gp)
 201c9ec:	10803fcc 	andi	r2,r2,255
 201c9f0:	10800058 	cmpnei	r2,r2,1
 201c9f4:	1000161e 	bne	r2,zero,201ca50 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201c9f8:	e0bffc17 	ldw	r2,-16(fp)
 201c9fc:	10800c17 	ldw	r2,48(r2)
 201ca00:	e0bff215 	stw	r2,-56(fp)
 201ca04:	00800144 	movi	r2,5
 201ca08:	e0bff98d 	sth	r2,-26(fp)
 201ca0c:	00bfe0c4 	movi	r2,-125
 201ca10:	e0bffa05 	stb	r2,-24(fp)
 201ca14:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201ca18:	d0a73743 	ldbu	r2,-25379(gp)
 201ca1c:	10803fcc 	andi	r2,r2,255
 201ca20:	10001526 	beq	r2,zero,201ca78 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201ca24:	e0fff98b 	ldhu	r3,-26(fp)
 201ca28:	e13ffa03 	ldbu	r4,-24(fp)
 201ca2c:	e17ffa8b 	ldhu	r5,-22(fp)
 201ca30:	e0bffb44 	addi	r2,fp,-19
 201ca34:	d8800015 	stw	r2,0(sp)
 201ca38:	280f883a 	mov	r7,r5
 201ca3c:	200d883a 	mov	r6,r4
 201ca40:	180b883a 	mov	r5,r3
 201ca44:	e13ff217 	ldw	r4,-56(fp)
 201ca48:	201681c0 	call	201681c <OSFlagPend>
 201ca4c:	00000a06 	br	201ca78 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 201ca50:	0001883a 	nop
 201ca54:	e0bffc17 	ldw	r2,-16(fp)
 201ca58:	10c00d17 	ldw	r3,52(r2)
 201ca5c:	e0bff317 	ldw	r2,-52(fp)
 201ca60:	1880051e 	bne	r3,r2,201ca78 <altera_avalon_jtag_uart_read+0x1c8>
 201ca64:	e0bffc17 	ldw	r2,-16(fp)
 201ca68:	10c00917 	ldw	r3,36(r2)
 201ca6c:	e0bffc17 	ldw	r2,-16(fp)
 201ca70:	10800117 	ldw	r2,4(r2)
 201ca74:	18bff736 	bltu	r3,r2,201ca54 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 201ca78:	e0bffc17 	ldw	r2,-16(fp)
 201ca7c:	10c00d17 	ldw	r3,52(r2)
 201ca80:	e0bff317 	ldw	r2,-52(fp)
 201ca84:	18800726 	beq	r3,r2,201caa4 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 201ca88:	e0bffe17 	ldw	r2,-8(fp)
 201ca8c:	00bf9d16 	blt	zero,r2,201c904 <altera_avalon_jtag_uart_read+0x54>
 201ca90:	00000506 	br	201caa8 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 201ca94:	0001883a 	nop
 201ca98:	00000306 	br	201caa8 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 201ca9c:	0001883a 	nop
 201caa0:	00000106 	br	201caa8 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 201caa4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 201caa8:	e0bffc17 	ldw	r2,-16(fp)
 201caac:	10800a17 	ldw	r2,40(r2)
 201cab0:	1009883a 	mov	r4,r2
 201cab4:	201a0c40 	call	201a0c4 <OSSemPost>

  if (ptr != buffer)
 201cab8:	e0fff017 	ldw	r3,-64(fp)
 201cabc:	e0bffd17 	ldw	r2,-12(fp)
 201cac0:	18801826 	beq	r3,r2,201cb24 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cac4:	0005303a 	rdctl	r2,status
 201cac8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cacc:	e0fff717 	ldw	r3,-36(fp)
 201cad0:	00bfff84 	movi	r2,-2
 201cad4:	1884703a 	and	r2,r3,r2
 201cad8:	1001703a 	wrctl	status,r2
  
  return context;
 201cadc:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201cae0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201cae4:	e0bffc17 	ldw	r2,-16(fp)
 201cae8:	10800817 	ldw	r2,32(r2)
 201caec:	10c00054 	ori	r3,r2,1
 201caf0:	e0bffc17 	ldw	r2,-16(fp)
 201caf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201caf8:	e0bffc17 	ldw	r2,-16(fp)
 201cafc:	10800017 	ldw	r2,0(r2)
 201cb00:	10800104 	addi	r2,r2,4
 201cb04:	1007883a 	mov	r3,r2
 201cb08:	e0bffc17 	ldw	r2,-16(fp)
 201cb0c:	10800817 	ldw	r2,32(r2)
 201cb10:	18800035 	stwio	r2,0(r3)
 201cb14:	e0bff617 	ldw	r2,-40(fp)
 201cb18:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cb1c:	e0bff517 	ldw	r2,-44(fp)
 201cb20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 201cb24:	e0fff017 	ldw	r3,-64(fp)
 201cb28:	e0bffd17 	ldw	r2,-12(fp)
 201cb2c:	18800426 	beq	r3,r2,201cb40 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 201cb30:	e0fff017 	ldw	r3,-64(fp)
 201cb34:	e0bffd17 	ldw	r2,-12(fp)
 201cb38:	1885c83a 	sub	r2,r3,r2
 201cb3c:	00000606 	br	201cb58 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 201cb40:	e0bfff17 	ldw	r2,-4(fp)
 201cb44:	1090000c 	andi	r2,r2,16384
 201cb48:	10000226 	beq	r2,zero,201cb54 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 201cb4c:	00bffd44 	movi	r2,-11
 201cb50:	00000106 	br	201cb58 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 201cb54:	00bffec4 	movi	r2,-5
}
 201cb58:	e037883a 	mov	sp,fp
 201cb5c:	dfc00117 	ldw	ra,4(sp)
 201cb60:	df000017 	ldw	fp,0(sp)
 201cb64:	dec00204 	addi	sp,sp,8
 201cb68:	f800283a 	ret

0201cb6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 201cb6c:	deffed04 	addi	sp,sp,-76
 201cb70:	dfc01215 	stw	ra,72(sp)
 201cb74:	df001115 	stw	fp,68(sp)
 201cb78:	df001104 	addi	fp,sp,68
 201cb7c:	e13ffc15 	stw	r4,-16(fp)
 201cb80:	e17ffd15 	stw	r5,-12(fp)
 201cb84:	e1bffe15 	stw	r6,-8(fp)
 201cb88:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 201cb8c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 201cb90:	e0bffd17 	ldw	r2,-12(fp)
 201cb94:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 201cb98:	e0bffc17 	ldw	r2,-16(fp)
 201cb9c:	10800b17 	ldw	r2,44(r2)
 201cba0:	e0bff815 	stw	r2,-32(fp)
 201cba4:	e03ff90d 	sth	zero,-28(fp)
 201cba8:	e0bff90b 	ldhu	r2,-28(fp)
 201cbac:	e0fffb44 	addi	r3,fp,-19
 201cbb0:	180d883a 	mov	r6,r3
 201cbb4:	100b883a 	mov	r5,r2
 201cbb8:	e13ff817 	ldw	r4,-32(fp)
 201cbbc:	2019d4c0 	call	2019d4c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201cbc0:	00003706 	br	201cca0 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 201cbc4:	e0bffc17 	ldw	r2,-16(fp)
 201cbc8:	10800f17 	ldw	r2,60(r2)
 201cbcc:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 201cbd0:	e0bffc17 	ldw	r2,-16(fp)
 201cbd4:	10801017 	ldw	r2,64(r2)
 201cbd8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 201cbdc:	e0fff417 	ldw	r3,-48(fp)
 201cbe0:	e0bff017 	ldw	r2,-64(fp)
 201cbe4:	1880062e 	bgeu	r3,r2,201cc00 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 201cbe8:	e0fff017 	ldw	r3,-64(fp)
 201cbec:	e0bff417 	ldw	r2,-48(fp)
 201cbf0:	1885c83a 	sub	r2,r3,r2
 201cbf4:	10bfffc4 	addi	r2,r2,-1
 201cbf8:	e0bff115 	stw	r2,-60(fp)
 201cbfc:	00000b06 	br	201cc2c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 201cc00:	e0bff017 	ldw	r2,-64(fp)
 201cc04:	10000526 	beq	r2,zero,201cc1c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 201cc08:	00c20004 	movi	r3,2048
 201cc0c:	e0bff417 	ldw	r2,-48(fp)
 201cc10:	1885c83a 	sub	r2,r3,r2
 201cc14:	e0bff115 	stw	r2,-60(fp)
 201cc18:	00000406 	br	201cc2c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 201cc1c:	00c1ffc4 	movi	r3,2047
 201cc20:	e0bff417 	ldw	r2,-48(fp)
 201cc24:	1885c83a 	sub	r2,r3,r2
 201cc28:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 201cc2c:	e0bff117 	ldw	r2,-60(fp)
 201cc30:	10001e26 	beq	r2,zero,201ccac <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 201cc34:	e0fffe17 	ldw	r3,-8(fp)
 201cc38:	e0bff117 	ldw	r2,-60(fp)
 201cc3c:	1880022e 	bgeu	r3,r2,201cc48 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 201cc40:	e0bffe17 	ldw	r2,-8(fp)
 201cc44:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 201cc48:	e0bffc17 	ldw	r2,-16(fp)
 201cc4c:	10c21104 	addi	r3,r2,2116
 201cc50:	e0bff417 	ldw	r2,-48(fp)
 201cc54:	1885883a 	add	r2,r3,r2
 201cc58:	e1bff117 	ldw	r6,-60(fp)
 201cc5c:	e17ffd17 	ldw	r5,-12(fp)
 201cc60:	1009883a 	mov	r4,r2
 201cc64:	2004ac40 	call	2004ac4 <memcpy>
      ptr   += n;
 201cc68:	e0fffd17 	ldw	r3,-12(fp)
 201cc6c:	e0bff117 	ldw	r2,-60(fp)
 201cc70:	1885883a 	add	r2,r3,r2
 201cc74:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 201cc78:	e0fffe17 	ldw	r3,-8(fp)
 201cc7c:	e0bff117 	ldw	r2,-60(fp)
 201cc80:	1885c83a 	sub	r2,r3,r2
 201cc84:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201cc88:	e0fff417 	ldw	r3,-48(fp)
 201cc8c:	e0bff117 	ldw	r2,-60(fp)
 201cc90:	1885883a 	add	r2,r3,r2
 201cc94:	10c1ffcc 	andi	r3,r2,2047
 201cc98:	e0bffc17 	ldw	r2,-16(fp)
 201cc9c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201cca0:	e0bffe17 	ldw	r2,-8(fp)
 201cca4:	00bfc716 	blt	zero,r2,201cbc4 <altera_avalon_jtag_uart_write+0x58>
 201cca8:	00000106 	br	201ccb0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 201ccac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ccb0:	0005303a 	rdctl	r2,status
 201ccb4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ccb8:	e0fff717 	ldw	r3,-36(fp)
 201ccbc:	00bfff84 	movi	r2,-2
 201ccc0:	1884703a 	and	r2,r3,r2
 201ccc4:	1001703a 	wrctl	status,r2
  
  return context;
 201ccc8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 201cccc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201ccd0:	e0bffc17 	ldw	r2,-16(fp)
 201ccd4:	10800817 	ldw	r2,32(r2)
 201ccd8:	10c00094 	ori	r3,r2,2
 201ccdc:	e0bffc17 	ldw	r2,-16(fp)
 201cce0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201cce4:	e0bffc17 	ldw	r2,-16(fp)
 201cce8:	10800017 	ldw	r2,0(r2)
 201ccec:	10800104 	addi	r2,r2,4
 201ccf0:	1007883a 	mov	r3,r2
 201ccf4:	e0bffc17 	ldw	r2,-16(fp)
 201ccf8:	10800817 	ldw	r2,32(r2)
 201ccfc:	18800035 	stwio	r2,0(r3)
 201cd00:	e0bff617 	ldw	r2,-40(fp)
 201cd04:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cd08:	e0bff317 	ldw	r2,-52(fp)
 201cd0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 201cd10:	e0bffe17 	ldw	r2,-8(fp)
 201cd14:	00802a0e 	bge	zero,r2,201cdc0 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 201cd18:	e0bfff17 	ldw	r2,-4(fp)
 201cd1c:	1090000c 	andi	r2,r2,16384
 201cd20:	10002a1e 	bne	r2,zero,201cdcc <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 201cd24:	d0a73743 	ldbu	r2,-25379(gp)
 201cd28:	10803fcc 	andi	r2,r2,255
 201cd2c:	10800058 	cmpnei	r2,r2,1
 201cd30:	1000161e 	bne	r2,zero,201cd8c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 201cd34:	e0bffc17 	ldw	r2,-16(fp)
 201cd38:	10800c17 	ldw	r2,48(r2)
 201cd3c:	e0bff515 	stw	r2,-44(fp)
 201cd40:	00800184 	movi	r2,6
 201cd44:	e0bff98d 	sth	r2,-26(fp)
 201cd48:	00bfe0c4 	movi	r2,-125
 201cd4c:	e0bffa05 	stb	r2,-24(fp)
 201cd50:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201cd54:	d0a73743 	ldbu	r2,-25379(gp)
 201cd58:	10803fcc 	andi	r2,r2,255
 201cd5c:	10001526 	beq	r2,zero,201cdb4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201cd60:	e0fff98b 	ldhu	r3,-26(fp)
 201cd64:	e13ffa03 	ldbu	r4,-24(fp)
 201cd68:	e17ffa8b 	ldhu	r5,-22(fp)
 201cd6c:	e0bffb04 	addi	r2,fp,-20
 201cd70:	d8800015 	stw	r2,0(sp)
 201cd74:	280f883a 	mov	r7,r5
 201cd78:	200d883a 	mov	r6,r4
 201cd7c:	180b883a 	mov	r5,r3
 201cd80:	e13ff517 	ldw	r4,-44(fp)
 201cd84:	201681c0 	call	201681c <OSFlagPend>
 201cd88:	00000a06 	br	201cdb4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 201cd8c:	0001883a 	nop
 201cd90:	e0bffc17 	ldw	r2,-16(fp)
 201cd94:	10c01017 	ldw	r3,64(r2)
 201cd98:	e0bff017 	ldw	r2,-64(fp)
 201cd9c:	1880051e 	bne	r3,r2,201cdb4 <altera_avalon_jtag_uart_write+0x248>
 201cda0:	e0bffc17 	ldw	r2,-16(fp)
 201cda4:	10c00917 	ldw	r3,36(r2)
 201cda8:	e0bffc17 	ldw	r2,-16(fp)
 201cdac:	10800117 	ldw	r2,4(r2)
 201cdb0:	18bff736 	bltu	r3,r2,201cd90 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 201cdb4:	e0bffc17 	ldw	r2,-16(fp)
 201cdb8:	10800917 	ldw	r2,36(r2)
 201cdbc:	1000051e 	bne	r2,zero,201cdd4 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 201cdc0:	e0bffe17 	ldw	r2,-8(fp)
 201cdc4:	00bfb616 	blt	zero,r2,201cca0 <altera_avalon_jtag_uart_write+0x134>
 201cdc8:	00000306 	br	201cdd8 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 201cdcc:	0001883a 	nop
 201cdd0:	00000106 	br	201cdd8 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 201cdd4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 201cdd8:	e0bffc17 	ldw	r2,-16(fp)
 201cddc:	10800b17 	ldw	r2,44(r2)
 201cde0:	1009883a 	mov	r4,r2
 201cde4:	201a0c40 	call	201a0c4 <OSSemPost>

  if (ptr != start)
 201cde8:	e0fffd17 	ldw	r3,-12(fp)
 201cdec:	e0bff217 	ldw	r2,-56(fp)
 201cdf0:	18800426 	beq	r3,r2,201ce04 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 201cdf4:	e0fffd17 	ldw	r3,-12(fp)
 201cdf8:	e0bff217 	ldw	r2,-56(fp)
 201cdfc:	1885c83a 	sub	r2,r3,r2
 201ce00:	00000606 	br	201ce1c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 201ce04:	e0bfff17 	ldw	r2,-4(fp)
 201ce08:	1090000c 	andi	r2,r2,16384
 201ce0c:	10000226 	beq	r2,zero,201ce18 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 201ce10:	00bffd44 	movi	r2,-11
 201ce14:	00000106 	br	201ce1c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 201ce18:	00bffec4 	movi	r2,-5
}
 201ce1c:	e037883a 	mov	sp,fp
 201ce20:	dfc00117 	ldw	ra,4(sp)
 201ce24:	df000017 	ldw	fp,0(sp)
 201ce28:	dec00204 	addi	sp,sp,8
 201ce2c:	f800283a 	ret

0201ce30 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 201ce30:	defffa04 	addi	sp,sp,-24
 201ce34:	dfc00515 	stw	ra,20(sp)
 201ce38:	df000415 	stw	fp,16(sp)
 201ce3c:	df000404 	addi	fp,sp,16
 201ce40:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 201ce44:	0007883a 	mov	r3,zero
 201ce48:	e0bfff17 	ldw	r2,-4(fp)
 201ce4c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 201ce50:	e0bfff17 	ldw	r2,-4(fp)
 201ce54:	10800104 	addi	r2,r2,4
 201ce58:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ce5c:	0005303a 	rdctl	r2,status
 201ce60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ce64:	e0fffd17 	ldw	r3,-12(fp)
 201ce68:	00bfff84 	movi	r2,-2
 201ce6c:	1884703a 	and	r2,r3,r2
 201ce70:	1001703a 	wrctl	status,r2
  
  return context;
 201ce74:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 201ce78:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 201ce7c:	201d93c0 	call	201d93c <alt_tick>
 201ce80:	e0bffc17 	ldw	r2,-16(fp)
 201ce84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ce88:	e0bffe17 	ldw	r2,-8(fp)
 201ce8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 201ce90:	0001883a 	nop
 201ce94:	e037883a 	mov	sp,fp
 201ce98:	dfc00117 	ldw	ra,4(sp)
 201ce9c:	df000017 	ldw	fp,0(sp)
 201cea0:	dec00204 	addi	sp,sp,8
 201cea4:	f800283a 	ret

0201cea8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 201cea8:	defff804 	addi	sp,sp,-32
 201ceac:	dfc00715 	stw	ra,28(sp)
 201ceb0:	df000615 	stw	fp,24(sp)
 201ceb4:	df000604 	addi	fp,sp,24
 201ceb8:	e13ffc15 	stw	r4,-16(fp)
 201cebc:	e17ffd15 	stw	r5,-12(fp)
 201cec0:	e1bffe15 	stw	r6,-8(fp)
 201cec4:	e1ffff15 	stw	r7,-4(fp)
 201cec8:	e0bfff17 	ldw	r2,-4(fp)
 201cecc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 201ced0:	d0a74c17 	ldw	r2,-25296(gp)
 201ced4:	1000021e 	bne	r2,zero,201cee0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 201ced8:	e0bffb17 	ldw	r2,-20(fp)
 201cedc:	d0a74c15 	stw	r2,-25296(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 201cee0:	e0bffc17 	ldw	r2,-16(fp)
 201cee4:	10800104 	addi	r2,r2,4
 201cee8:	00c001c4 	movi	r3,7
 201ceec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 201cef0:	d8000015 	stw	zero,0(sp)
 201cef4:	e1fffc17 	ldw	r7,-16(fp)
 201cef8:	018080b4 	movhi	r6,514
 201cefc:	31b38c04 	addi	r6,r6,-12752
 201cf00:	e17ffe17 	ldw	r5,-8(fp)
 201cf04:	e13ffd17 	ldw	r4,-12(fp)
 201cf08:	201d26c0 	call	201d26c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 201cf0c:	0001883a 	nop
 201cf10:	e037883a 	mov	sp,fp
 201cf14:	dfc00117 	ldw	ra,4(sp)
 201cf18:	df000017 	ldw	fp,0(sp)
 201cf1c:	dec00204 	addi	sp,sp,8
 201cf20:	f800283a 	ret

0201cf24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201cf24:	defff504 	addi	sp,sp,-44
 201cf28:	df000a15 	stw	fp,40(sp)
 201cf2c:	df000a04 	addi	fp,sp,40
 201cf30:	e13ffc15 	stw	r4,-16(fp)
 201cf34:	e17ffd15 	stw	r5,-12(fp)
 201cf38:	e1bffe15 	stw	r6,-8(fp)
 201cf3c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201cf40:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201cf44:	d0a74c17 	ldw	r2,-25296(gp)
  
  if (alt_ticks_per_second ())
 201cf48:	10003c26 	beq	r2,zero,201d03c <alt_alarm_start+0x118>
  {
    if (alarm)
 201cf4c:	e0bffc17 	ldw	r2,-16(fp)
 201cf50:	10003826 	beq	r2,zero,201d034 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 201cf54:	e0bffc17 	ldw	r2,-16(fp)
 201cf58:	e0fffe17 	ldw	r3,-8(fp)
 201cf5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201cf60:	e0bffc17 	ldw	r2,-16(fp)
 201cf64:	e0ffff17 	ldw	r3,-4(fp)
 201cf68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cf6c:	0005303a 	rdctl	r2,status
 201cf70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cf74:	e0fff917 	ldw	r3,-28(fp)
 201cf78:	00bfff84 	movi	r2,-2
 201cf7c:	1884703a 	and	r2,r3,r2
 201cf80:	1001703a 	wrctl	status,r2
  
  return context;
 201cf84:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 201cf88:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 201cf8c:	d0a74d17 	ldw	r2,-25292(gp)
      
      current_nticks = alt_nticks();
 201cf90:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201cf94:	e0fffd17 	ldw	r3,-12(fp)
 201cf98:	e0bff617 	ldw	r2,-40(fp)
 201cf9c:	1885883a 	add	r2,r3,r2
 201cfa0:	10c00044 	addi	r3,r2,1
 201cfa4:	e0bffc17 	ldw	r2,-16(fp)
 201cfa8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 201cfac:	e0bffc17 	ldw	r2,-16(fp)
 201cfb0:	10c00217 	ldw	r3,8(r2)
 201cfb4:	e0bff617 	ldw	r2,-40(fp)
 201cfb8:	1880042e 	bgeu	r3,r2,201cfcc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 201cfbc:	e0bffc17 	ldw	r2,-16(fp)
 201cfc0:	00c00044 	movi	r3,1
 201cfc4:	10c00405 	stb	r3,16(r2)
 201cfc8:	00000206 	br	201cfd4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 201cfcc:	e0bffc17 	ldw	r2,-16(fp)
 201cfd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201cfd4:	e0bffc17 	ldw	r2,-16(fp)
 201cfd8:	d0e02d04 	addi	r3,gp,-32588
 201cfdc:	e0fffa15 	stw	r3,-24(fp)
 201cfe0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201cfe4:	e0bffb17 	ldw	r2,-20(fp)
 201cfe8:	e0fffa17 	ldw	r3,-24(fp)
 201cfec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201cff0:	e0bffa17 	ldw	r2,-24(fp)
 201cff4:	10c00017 	ldw	r3,0(r2)
 201cff8:	e0bffb17 	ldw	r2,-20(fp)
 201cffc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201d000:	e0bffa17 	ldw	r2,-24(fp)
 201d004:	10800017 	ldw	r2,0(r2)
 201d008:	e0fffb17 	ldw	r3,-20(fp)
 201d00c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201d010:	e0bffa17 	ldw	r2,-24(fp)
 201d014:	e0fffb17 	ldw	r3,-20(fp)
 201d018:	10c00015 	stw	r3,0(r2)
 201d01c:	e0bff817 	ldw	r2,-32(fp)
 201d020:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d024:	e0bff717 	ldw	r2,-36(fp)
 201d028:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 201d02c:	0005883a 	mov	r2,zero
 201d030:	00000306 	br	201d040 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 201d034:	00bffa84 	movi	r2,-22
 201d038:	00000106 	br	201d040 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 201d03c:	00bfde84 	movi	r2,-134
  }
}
 201d040:	e037883a 	mov	sp,fp
 201d044:	df000017 	ldw	fp,0(sp)
 201d048:	dec00104 	addi	sp,sp,4
 201d04c:	f800283a 	ret

0201d050 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 201d050:	defffe04 	addi	sp,sp,-8
 201d054:	df000115 	stw	fp,4(sp)
 201d058:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201d05c:	e03fff15 	stw	zero,-4(fp)
 201d060:	00000506 	br	201d078 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 201d064:	e0bfff17 	ldw	r2,-4(fp)
 201d068:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 201d06c:	e0bfff17 	ldw	r2,-4(fp)
 201d070:	10800804 	addi	r2,r2,32
 201d074:	e0bfff15 	stw	r2,-4(fp)
 201d078:	e0bfff17 	ldw	r2,-4(fp)
 201d07c:	10820030 	cmpltui	r2,r2,2048
 201d080:	103ff81e 	bne	r2,zero,201d064 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 201d084:	0001883a 	nop
 201d088:	e037883a 	mov	sp,fp
 201d08c:	df000017 	ldw	fp,0(sp)
 201d090:	dec00104 	addi	sp,sp,4
 201d094:	f800283a 	ret

0201d098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201d098:	defffe04 	addi	sp,sp,-8
 201d09c:	dfc00115 	stw	ra,4(sp)
 201d0a0:	df000015 	stw	fp,0(sp)
 201d0a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201d0a8:	d0a00b17 	ldw	r2,-32724(gp)
 201d0ac:	10000326 	beq	r2,zero,201d0bc <alt_get_errno+0x24>
 201d0b0:	d0a00b17 	ldw	r2,-32724(gp)
 201d0b4:	103ee83a 	callr	r2
 201d0b8:	00000106 	br	201d0c0 <alt_get_errno+0x28>
 201d0bc:	d0a72e04 	addi	r2,gp,-25416
}
 201d0c0:	e037883a 	mov	sp,fp
 201d0c4:	dfc00117 	ldw	ra,4(sp)
 201d0c8:	df000017 	ldw	fp,0(sp)
 201d0cc:	dec00204 	addi	sp,sp,8
 201d0d0:	f800283a 	ret

0201d0d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201d0d4:	defffa04 	addi	sp,sp,-24
 201d0d8:	dfc00515 	stw	ra,20(sp)
 201d0dc:	df000415 	stw	fp,16(sp)
 201d0e0:	df000404 	addi	fp,sp,16
 201d0e4:	e13ffe15 	stw	r4,-8(fp)
 201d0e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201d0ec:	e0bffe17 	ldw	r2,-8(fp)
 201d0f0:	10000326 	beq	r2,zero,201d100 <alt_dev_llist_insert+0x2c>
 201d0f4:	e0bffe17 	ldw	r2,-8(fp)
 201d0f8:	10800217 	ldw	r2,8(r2)
 201d0fc:	1000061e 	bne	r2,zero,201d118 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 201d100:	201d0980 	call	201d098 <alt_get_errno>
 201d104:	1007883a 	mov	r3,r2
 201d108:	00800584 	movi	r2,22
 201d10c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 201d110:	00bffa84 	movi	r2,-22
 201d114:	00001306 	br	201d164 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201d118:	e0bffe17 	ldw	r2,-8(fp)
 201d11c:	e0ffff17 	ldw	r3,-4(fp)
 201d120:	e0fffc15 	stw	r3,-16(fp)
 201d124:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201d128:	e0bffd17 	ldw	r2,-12(fp)
 201d12c:	e0fffc17 	ldw	r3,-16(fp)
 201d130:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201d134:	e0bffc17 	ldw	r2,-16(fp)
 201d138:	10c00017 	ldw	r3,0(r2)
 201d13c:	e0bffd17 	ldw	r2,-12(fp)
 201d140:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201d144:	e0bffc17 	ldw	r2,-16(fp)
 201d148:	10800017 	ldw	r2,0(r2)
 201d14c:	e0fffd17 	ldw	r3,-12(fp)
 201d150:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201d154:	e0bffc17 	ldw	r2,-16(fp)
 201d158:	e0fffd17 	ldw	r3,-12(fp)
 201d15c:	10c00015 	stw	r3,0(r2)

  return 0;  
 201d160:	0005883a 	mov	r2,zero
}
 201d164:	e037883a 	mov	sp,fp
 201d168:	dfc00117 	ldw	ra,4(sp)
 201d16c:	df000017 	ldw	fp,0(sp)
 201d170:	dec00204 	addi	sp,sp,8
 201d174:	f800283a 	ret

0201d178 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 201d178:	defffd04 	addi	sp,sp,-12
 201d17c:	dfc00215 	stw	ra,8(sp)
 201d180:	df000115 	stw	fp,4(sp)
 201d184:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201d188:	008080b4 	movhi	r2,514
 201d18c:	10b9a904 	addi	r2,r2,-6492
 201d190:	e0bfff15 	stw	r2,-4(fp)
 201d194:	00000606 	br	201d1b0 <_do_ctors+0x38>
        (*ctor) (); 
 201d198:	e0bfff17 	ldw	r2,-4(fp)
 201d19c:	10800017 	ldw	r2,0(r2)
 201d1a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201d1a4:	e0bfff17 	ldw	r2,-4(fp)
 201d1a8:	10bfff04 	addi	r2,r2,-4
 201d1ac:	e0bfff15 	stw	r2,-4(fp)
 201d1b0:	e0ffff17 	ldw	r3,-4(fp)
 201d1b4:	008080b4 	movhi	r2,514
 201d1b8:	10b9aa04 	addi	r2,r2,-6488
 201d1bc:	18bff62e 	bgeu	r3,r2,201d198 <_do_ctors+0x20>
        (*ctor) (); 
}
 201d1c0:	0001883a 	nop
 201d1c4:	e037883a 	mov	sp,fp
 201d1c8:	dfc00117 	ldw	ra,4(sp)
 201d1cc:	df000017 	ldw	fp,0(sp)
 201d1d0:	dec00204 	addi	sp,sp,8
 201d1d4:	f800283a 	ret

0201d1d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201d1d8:	defffd04 	addi	sp,sp,-12
 201d1dc:	dfc00215 	stw	ra,8(sp)
 201d1e0:	df000115 	stw	fp,4(sp)
 201d1e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201d1e8:	008080b4 	movhi	r2,514
 201d1ec:	10b9a904 	addi	r2,r2,-6492
 201d1f0:	e0bfff15 	stw	r2,-4(fp)
 201d1f4:	00000606 	br	201d210 <_do_dtors+0x38>
        (*dtor) (); 
 201d1f8:	e0bfff17 	ldw	r2,-4(fp)
 201d1fc:	10800017 	ldw	r2,0(r2)
 201d200:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201d204:	e0bfff17 	ldw	r2,-4(fp)
 201d208:	10bfff04 	addi	r2,r2,-4
 201d20c:	e0bfff15 	stw	r2,-4(fp)
 201d210:	e0ffff17 	ldw	r3,-4(fp)
 201d214:	008080b4 	movhi	r2,514
 201d218:	10b9aa04 	addi	r2,r2,-6488
 201d21c:	18bff62e 	bgeu	r3,r2,201d1f8 <_do_dtors+0x20>
        (*dtor) (); 
}
 201d220:	0001883a 	nop
 201d224:	e037883a 	mov	sp,fp
 201d228:	dfc00117 	ldw	ra,4(sp)
 201d22c:	df000017 	ldw	fp,0(sp)
 201d230:	dec00204 	addi	sp,sp,8
 201d234:	f800283a 	ret

0201d238 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 201d238:	defffe04 	addi	sp,sp,-8
 201d23c:	dfc00115 	stw	ra,4(sp)
 201d240:	df000015 	stw	fp,0(sp)
 201d244:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 201d248:	01440004 	movi	r5,4096
 201d24c:	0009883a 	mov	r4,zero
 201d250:	201e0340 	call	201e034 <alt_icache_flush>
#endif
}
 201d254:	0001883a 	nop
 201d258:	e037883a 	mov	sp,fp
 201d25c:	dfc00117 	ldw	ra,4(sp)
 201d260:	df000017 	ldw	fp,0(sp)
 201d264:	dec00204 	addi	sp,sp,8
 201d268:	f800283a 	ret

0201d26c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201d26c:	defff904 	addi	sp,sp,-28
 201d270:	dfc00615 	stw	ra,24(sp)
 201d274:	df000515 	stw	fp,20(sp)
 201d278:	df000504 	addi	fp,sp,20
 201d27c:	e13ffc15 	stw	r4,-16(fp)
 201d280:	e17ffd15 	stw	r5,-12(fp)
 201d284:	e1bffe15 	stw	r6,-8(fp)
 201d288:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201d28c:	e0800217 	ldw	r2,8(fp)
 201d290:	d8800015 	stw	r2,0(sp)
 201d294:	e1ffff17 	ldw	r7,-4(fp)
 201d298:	e1bffe17 	ldw	r6,-8(fp)
 201d29c:	e17ffd17 	ldw	r5,-12(fp)
 201d2a0:	e13ffc17 	ldw	r4,-16(fp)
 201d2a4:	201d41c0 	call	201d41c <alt_iic_isr_register>
}  
 201d2a8:	e037883a 	mov	sp,fp
 201d2ac:	dfc00117 	ldw	ra,4(sp)
 201d2b0:	df000017 	ldw	fp,0(sp)
 201d2b4:	dec00204 	addi	sp,sp,8
 201d2b8:	f800283a 	ret

0201d2bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201d2bc:	defff904 	addi	sp,sp,-28
 201d2c0:	df000615 	stw	fp,24(sp)
 201d2c4:	df000604 	addi	fp,sp,24
 201d2c8:	e13ffe15 	stw	r4,-8(fp)
 201d2cc:	e17fff15 	stw	r5,-4(fp)
 201d2d0:	e0bfff17 	ldw	r2,-4(fp)
 201d2d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d2d8:	0005303a 	rdctl	r2,status
 201d2dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d2e0:	e0fffb17 	ldw	r3,-20(fp)
 201d2e4:	00bfff84 	movi	r2,-2
 201d2e8:	1884703a 	and	r2,r3,r2
 201d2ec:	1001703a 	wrctl	status,r2
  
  return context;
 201d2f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201d2f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201d2f8:	00c00044 	movi	r3,1
 201d2fc:	e0bffa17 	ldw	r2,-24(fp)
 201d300:	1884983a 	sll	r2,r3,r2
 201d304:	1007883a 	mov	r3,r2
 201d308:	d0a74b17 	ldw	r2,-25300(gp)
 201d30c:	1884b03a 	or	r2,r3,r2
 201d310:	d0a74b15 	stw	r2,-25300(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201d314:	d0a74b17 	ldw	r2,-25300(gp)
 201d318:	100170fa 	wrctl	ienable,r2
 201d31c:	e0bffc17 	ldw	r2,-16(fp)
 201d320:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d324:	e0bffd17 	ldw	r2,-12(fp)
 201d328:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201d32c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 201d330:	0001883a 	nop
}
 201d334:	e037883a 	mov	sp,fp
 201d338:	df000017 	ldw	fp,0(sp)
 201d33c:	dec00104 	addi	sp,sp,4
 201d340:	f800283a 	ret

0201d344 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 201d344:	defff904 	addi	sp,sp,-28
 201d348:	df000615 	stw	fp,24(sp)
 201d34c:	df000604 	addi	fp,sp,24
 201d350:	e13ffe15 	stw	r4,-8(fp)
 201d354:	e17fff15 	stw	r5,-4(fp)
 201d358:	e0bfff17 	ldw	r2,-4(fp)
 201d35c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d360:	0005303a 	rdctl	r2,status
 201d364:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d368:	e0fffb17 	ldw	r3,-20(fp)
 201d36c:	00bfff84 	movi	r2,-2
 201d370:	1884703a 	and	r2,r3,r2
 201d374:	1001703a 	wrctl	status,r2
  
  return context;
 201d378:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201d37c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201d380:	00c00044 	movi	r3,1
 201d384:	e0bffa17 	ldw	r2,-24(fp)
 201d388:	1884983a 	sll	r2,r3,r2
 201d38c:	0084303a 	nor	r2,zero,r2
 201d390:	1007883a 	mov	r3,r2
 201d394:	d0a74b17 	ldw	r2,-25300(gp)
 201d398:	1884703a 	and	r2,r3,r2
 201d39c:	d0a74b15 	stw	r2,-25300(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201d3a0:	d0a74b17 	ldw	r2,-25300(gp)
 201d3a4:	100170fa 	wrctl	ienable,r2
 201d3a8:	e0bffc17 	ldw	r2,-16(fp)
 201d3ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d3b0:	e0bffd17 	ldw	r2,-12(fp)
 201d3b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201d3b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 201d3bc:	0001883a 	nop
}
 201d3c0:	e037883a 	mov	sp,fp
 201d3c4:	df000017 	ldw	fp,0(sp)
 201d3c8:	dec00104 	addi	sp,sp,4
 201d3cc:	f800283a 	ret

0201d3d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 201d3d0:	defffc04 	addi	sp,sp,-16
 201d3d4:	df000315 	stw	fp,12(sp)
 201d3d8:	df000304 	addi	fp,sp,12
 201d3dc:	e13ffe15 	stw	r4,-8(fp)
 201d3e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 201d3e4:	000530fa 	rdctl	r2,ienable
 201d3e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201d3ec:	00c00044 	movi	r3,1
 201d3f0:	e0bfff17 	ldw	r2,-4(fp)
 201d3f4:	1884983a 	sll	r2,r3,r2
 201d3f8:	1007883a 	mov	r3,r2
 201d3fc:	e0bffd17 	ldw	r2,-12(fp)
 201d400:	1884703a 	and	r2,r3,r2
 201d404:	1004c03a 	cmpne	r2,r2,zero
 201d408:	10803fcc 	andi	r2,r2,255
}
 201d40c:	e037883a 	mov	sp,fp
 201d410:	df000017 	ldw	fp,0(sp)
 201d414:	dec00104 	addi	sp,sp,4
 201d418:	f800283a 	ret

0201d41c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201d41c:	defff504 	addi	sp,sp,-44
 201d420:	dfc00a15 	stw	ra,40(sp)
 201d424:	df000915 	stw	fp,36(sp)
 201d428:	df000904 	addi	fp,sp,36
 201d42c:	e13ffc15 	stw	r4,-16(fp)
 201d430:	e17ffd15 	stw	r5,-12(fp)
 201d434:	e1bffe15 	stw	r6,-8(fp)
 201d438:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 201d43c:	00bffa84 	movi	r2,-22
 201d440:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 201d444:	e0bffd17 	ldw	r2,-12(fp)
 201d448:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201d44c:	e0bff817 	ldw	r2,-32(fp)
 201d450:	10800808 	cmpgei	r2,r2,32
 201d454:	1000271e 	bne	r2,zero,201d4f4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d458:	0005303a 	rdctl	r2,status
 201d45c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d460:	e0fffb17 	ldw	r3,-20(fp)
 201d464:	00bfff84 	movi	r2,-2
 201d468:	1884703a 	and	r2,r3,r2
 201d46c:	1001703a 	wrctl	status,r2
  
  return context;
 201d470:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 201d474:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 201d478:	008080f4 	movhi	r2,515
 201d47c:	10b5ff04 	addi	r2,r2,-10244
 201d480:	e0fff817 	ldw	r3,-32(fp)
 201d484:	180690fa 	slli	r3,r3,3
 201d488:	10c5883a 	add	r2,r2,r3
 201d48c:	e0fffe17 	ldw	r3,-8(fp)
 201d490:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 201d494:	008080f4 	movhi	r2,515
 201d498:	10b5ff04 	addi	r2,r2,-10244
 201d49c:	e0fff817 	ldw	r3,-32(fp)
 201d4a0:	180690fa 	slli	r3,r3,3
 201d4a4:	10c5883a 	add	r2,r2,r3
 201d4a8:	10800104 	addi	r2,r2,4
 201d4ac:	e0ffff17 	ldw	r3,-4(fp)
 201d4b0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 201d4b4:	e0bffe17 	ldw	r2,-8(fp)
 201d4b8:	10000526 	beq	r2,zero,201d4d0 <alt_iic_isr_register+0xb4>
 201d4bc:	e0bff817 	ldw	r2,-32(fp)
 201d4c0:	100b883a 	mov	r5,r2
 201d4c4:	e13ffc17 	ldw	r4,-16(fp)
 201d4c8:	201d2bc0 	call	201d2bc <alt_ic_irq_enable>
 201d4cc:	00000406 	br	201d4e0 <alt_iic_isr_register+0xc4>
 201d4d0:	e0bff817 	ldw	r2,-32(fp)
 201d4d4:	100b883a 	mov	r5,r2
 201d4d8:	e13ffc17 	ldw	r4,-16(fp)
 201d4dc:	201d3440 	call	201d344 <alt_ic_irq_disable>
 201d4e0:	e0bff715 	stw	r2,-36(fp)
 201d4e4:	e0bffa17 	ldw	r2,-24(fp)
 201d4e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d4ec:	e0bff917 	ldw	r2,-28(fp)
 201d4f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 201d4f4:	e0bff717 	ldw	r2,-36(fp)
}
 201d4f8:	e037883a 	mov	sp,fp
 201d4fc:	dfc00117 	ldw	ra,4(sp)
 201d500:	df000017 	ldw	fp,0(sp)
 201d504:	dec00204 	addi	sp,sp,8
 201d508:	f800283a 	ret

0201d50c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201d50c:	defff904 	addi	sp,sp,-28
 201d510:	dfc00615 	stw	ra,24(sp)
 201d514:	df000515 	stw	fp,20(sp)
 201d518:	df000504 	addi	fp,sp,20
 201d51c:	e13ffc15 	stw	r4,-16(fp)
 201d520:	e17ffd15 	stw	r5,-12(fp)
 201d524:	e1bffe15 	stw	r6,-8(fp)
 201d528:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 201d52c:	e1bfff17 	ldw	r6,-4(fp)
 201d530:	e17ffe17 	ldw	r5,-8(fp)
 201d534:	e13ffd17 	ldw	r4,-12(fp)
 201d538:	201d74c0 	call	201d74c <open>
 201d53c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 201d540:	e0bffb17 	ldw	r2,-20(fp)
 201d544:	10001c16 	blt	r2,zero,201d5b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 201d548:	008080b4 	movhi	r2,514
 201d54c:	10bda104 	addi	r2,r2,-2428
 201d550:	e0fffb17 	ldw	r3,-20(fp)
 201d554:	18c00324 	muli	r3,r3,12
 201d558:	10c5883a 	add	r2,r2,r3
 201d55c:	10c00017 	ldw	r3,0(r2)
 201d560:	e0bffc17 	ldw	r2,-16(fp)
 201d564:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 201d568:	008080b4 	movhi	r2,514
 201d56c:	10bda104 	addi	r2,r2,-2428
 201d570:	e0fffb17 	ldw	r3,-20(fp)
 201d574:	18c00324 	muli	r3,r3,12
 201d578:	10c5883a 	add	r2,r2,r3
 201d57c:	10800104 	addi	r2,r2,4
 201d580:	10c00017 	ldw	r3,0(r2)
 201d584:	e0bffc17 	ldw	r2,-16(fp)
 201d588:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201d58c:	008080b4 	movhi	r2,514
 201d590:	10bda104 	addi	r2,r2,-2428
 201d594:	e0fffb17 	ldw	r3,-20(fp)
 201d598:	18c00324 	muli	r3,r3,12
 201d59c:	10c5883a 	add	r2,r2,r3
 201d5a0:	10800204 	addi	r2,r2,8
 201d5a4:	10c00017 	ldw	r3,0(r2)
 201d5a8:	e0bffc17 	ldw	r2,-16(fp)
 201d5ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201d5b0:	e13ffb17 	ldw	r4,-20(fp)
 201d5b4:	20138540 	call	2013854 <alt_release_fd>
  }
} 
 201d5b8:	0001883a 	nop
 201d5bc:	e037883a 	mov	sp,fp
 201d5c0:	dfc00117 	ldw	ra,4(sp)
 201d5c4:	df000017 	ldw	fp,0(sp)
 201d5c8:	dec00204 	addi	sp,sp,8
 201d5cc:	f800283a 	ret

0201d5d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 201d5d0:	defffb04 	addi	sp,sp,-20
 201d5d4:	dfc00415 	stw	ra,16(sp)
 201d5d8:	df000315 	stw	fp,12(sp)
 201d5dc:	df000304 	addi	fp,sp,12
 201d5e0:	e13ffd15 	stw	r4,-12(fp)
 201d5e4:	e17ffe15 	stw	r5,-8(fp)
 201d5e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201d5ec:	01c07fc4 	movi	r7,511
 201d5f0:	01800044 	movi	r6,1
 201d5f4:	e17ffd17 	ldw	r5,-12(fp)
 201d5f8:	010080b4 	movhi	r4,514
 201d5fc:	213da404 	addi	r4,r4,-2416
 201d600:	201d50c0 	call	201d50c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201d604:	01c07fc4 	movi	r7,511
 201d608:	000d883a 	mov	r6,zero
 201d60c:	e17ffe17 	ldw	r5,-8(fp)
 201d610:	010080b4 	movhi	r4,514
 201d614:	213da104 	addi	r4,r4,-2428
 201d618:	201d50c0 	call	201d50c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201d61c:	01c07fc4 	movi	r7,511
 201d620:	01800044 	movi	r6,1
 201d624:	e17fff17 	ldw	r5,-4(fp)
 201d628:	010080b4 	movhi	r4,514
 201d62c:	213da704 	addi	r4,r4,-2404
 201d630:	201d50c0 	call	201d50c <alt_open_fd>
}  
 201d634:	0001883a 	nop
 201d638:	e037883a 	mov	sp,fp
 201d63c:	dfc00117 	ldw	ra,4(sp)
 201d640:	df000017 	ldw	fp,0(sp)
 201d644:	dec00204 	addi	sp,sp,8
 201d648:	f800283a 	ret

0201d64c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201d64c:	defffe04 	addi	sp,sp,-8
 201d650:	dfc00115 	stw	ra,4(sp)
 201d654:	df000015 	stw	fp,0(sp)
 201d658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201d65c:	d0a00b17 	ldw	r2,-32724(gp)
 201d660:	10000326 	beq	r2,zero,201d670 <alt_get_errno+0x24>
 201d664:	d0a00b17 	ldw	r2,-32724(gp)
 201d668:	103ee83a 	callr	r2
 201d66c:	00000106 	br	201d674 <alt_get_errno+0x28>
 201d670:	d0a72e04 	addi	r2,gp,-25416
}
 201d674:	e037883a 	mov	sp,fp
 201d678:	dfc00117 	ldw	ra,4(sp)
 201d67c:	df000017 	ldw	fp,0(sp)
 201d680:	dec00204 	addi	sp,sp,8
 201d684:	f800283a 	ret

0201d688 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201d688:	defffd04 	addi	sp,sp,-12
 201d68c:	df000215 	stw	fp,8(sp)
 201d690:	df000204 	addi	fp,sp,8
 201d694:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201d698:	e0bfff17 	ldw	r2,-4(fp)
 201d69c:	10800217 	ldw	r2,8(r2)
 201d6a0:	10d00034 	orhi	r3,r2,16384
 201d6a4:	e0bfff17 	ldw	r2,-4(fp)
 201d6a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201d6ac:	e03ffe15 	stw	zero,-8(fp)
 201d6b0:	00001d06 	br	201d728 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201d6b4:	008080b4 	movhi	r2,514
 201d6b8:	10bda104 	addi	r2,r2,-2428
 201d6bc:	e0fffe17 	ldw	r3,-8(fp)
 201d6c0:	18c00324 	muli	r3,r3,12
 201d6c4:	10c5883a 	add	r2,r2,r3
 201d6c8:	10c00017 	ldw	r3,0(r2)
 201d6cc:	e0bfff17 	ldw	r2,-4(fp)
 201d6d0:	10800017 	ldw	r2,0(r2)
 201d6d4:	1880111e 	bne	r3,r2,201d71c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201d6d8:	008080b4 	movhi	r2,514
 201d6dc:	10bda104 	addi	r2,r2,-2428
 201d6e0:	e0fffe17 	ldw	r3,-8(fp)
 201d6e4:	18c00324 	muli	r3,r3,12
 201d6e8:	10c5883a 	add	r2,r2,r3
 201d6ec:	10800204 	addi	r2,r2,8
 201d6f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201d6f4:	1000090e 	bge	r2,zero,201d71c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201d6f8:	e0bffe17 	ldw	r2,-8(fp)
 201d6fc:	10c00324 	muli	r3,r2,12
 201d700:	008080b4 	movhi	r2,514
 201d704:	10bda104 	addi	r2,r2,-2428
 201d708:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201d70c:	e0bfff17 	ldw	r2,-4(fp)
 201d710:	18800226 	beq	r3,r2,201d71c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201d714:	00bffcc4 	movi	r2,-13
 201d718:	00000806 	br	201d73c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201d71c:	e0bffe17 	ldw	r2,-8(fp)
 201d720:	10800044 	addi	r2,r2,1
 201d724:	e0bffe15 	stw	r2,-8(fp)
 201d728:	d0a00a17 	ldw	r2,-32728(gp)
 201d72c:	1007883a 	mov	r3,r2
 201d730:	e0bffe17 	ldw	r2,-8(fp)
 201d734:	18bfdf2e 	bgeu	r3,r2,201d6b4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201d738:	0005883a 	mov	r2,zero
}
 201d73c:	e037883a 	mov	sp,fp
 201d740:	df000017 	ldw	fp,0(sp)
 201d744:	dec00104 	addi	sp,sp,4
 201d748:	f800283a 	ret

0201d74c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201d74c:	defff604 	addi	sp,sp,-40
 201d750:	dfc00915 	stw	ra,36(sp)
 201d754:	df000815 	stw	fp,32(sp)
 201d758:	df000804 	addi	fp,sp,32
 201d75c:	e13ffd15 	stw	r4,-12(fp)
 201d760:	e17ffe15 	stw	r5,-8(fp)
 201d764:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201d768:	00bfffc4 	movi	r2,-1
 201d76c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 201d770:	00bffb44 	movi	r2,-19
 201d774:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201d778:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201d77c:	d1600804 	addi	r5,gp,-32736
 201d780:	e13ffd17 	ldw	r4,-12(fp)
 201d784:	201ddc00 	call	201ddc0 <alt_find_dev>
 201d788:	e0bff815 	stw	r2,-32(fp)
 201d78c:	e0bff817 	ldw	r2,-32(fp)
 201d790:	1000051e 	bne	r2,zero,201d7a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201d794:	e13ffd17 	ldw	r4,-12(fp)
 201d798:	201de500 	call	201de50 <alt_find_file>
 201d79c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 201d7a0:	00800044 	movi	r2,1
 201d7a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201d7a8:	e0bff817 	ldw	r2,-32(fp)
 201d7ac:	10002926 	beq	r2,zero,201d854 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201d7b0:	e13ff817 	ldw	r4,-32(fp)
 201d7b4:	201df580 	call	201df58 <alt_get_fd>
 201d7b8:	e0bff915 	stw	r2,-28(fp)
 201d7bc:	e0bff917 	ldw	r2,-28(fp)
 201d7c0:	1000030e 	bge	r2,zero,201d7d0 <open+0x84>
    {
      status = index;
 201d7c4:	e0bff917 	ldw	r2,-28(fp)
 201d7c8:	e0bffa15 	stw	r2,-24(fp)
 201d7cc:	00002306 	br	201d85c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 201d7d0:	e0bff917 	ldw	r2,-28(fp)
 201d7d4:	10c00324 	muli	r3,r2,12
 201d7d8:	008080b4 	movhi	r2,514
 201d7dc:	10bda104 	addi	r2,r2,-2428
 201d7e0:	1885883a 	add	r2,r3,r2
 201d7e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201d7e8:	e0fffe17 	ldw	r3,-8(fp)
 201d7ec:	00900034 	movhi	r2,16384
 201d7f0:	10bfffc4 	addi	r2,r2,-1
 201d7f4:	1886703a 	and	r3,r3,r2
 201d7f8:	e0bffc17 	ldw	r2,-16(fp)
 201d7fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201d800:	e0bffb17 	ldw	r2,-20(fp)
 201d804:	1000051e 	bne	r2,zero,201d81c <open+0xd0>
 201d808:	e13ffc17 	ldw	r4,-16(fp)
 201d80c:	201d6880 	call	201d688 <alt_file_locked>
 201d810:	e0bffa15 	stw	r2,-24(fp)
 201d814:	e0bffa17 	ldw	r2,-24(fp)
 201d818:	10001016 	blt	r2,zero,201d85c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201d81c:	e0bff817 	ldw	r2,-32(fp)
 201d820:	10800317 	ldw	r2,12(r2)
 201d824:	10000826 	beq	r2,zero,201d848 <open+0xfc>
 201d828:	e0bff817 	ldw	r2,-32(fp)
 201d82c:	10800317 	ldw	r2,12(r2)
 201d830:	e1ffff17 	ldw	r7,-4(fp)
 201d834:	e1bffe17 	ldw	r6,-8(fp)
 201d838:	e17ffd17 	ldw	r5,-12(fp)
 201d83c:	e13ffc17 	ldw	r4,-16(fp)
 201d840:	103ee83a 	callr	r2
 201d844:	00000106 	br	201d84c <open+0x100>
 201d848:	0005883a 	mov	r2,zero
 201d84c:	e0bffa15 	stw	r2,-24(fp)
 201d850:	00000206 	br	201d85c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201d854:	00bffb44 	movi	r2,-19
 201d858:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201d85c:	e0bffa17 	ldw	r2,-24(fp)
 201d860:	1000090e 	bge	r2,zero,201d888 <open+0x13c>
  {
    alt_release_fd (index);  
 201d864:	e13ff917 	ldw	r4,-28(fp)
 201d868:	20138540 	call	2013854 <alt_release_fd>
    ALT_ERRNO = -status;
 201d86c:	201d64c0 	call	201d64c <alt_get_errno>
 201d870:	1007883a 	mov	r3,r2
 201d874:	e0bffa17 	ldw	r2,-24(fp)
 201d878:	0085c83a 	sub	r2,zero,r2
 201d87c:	18800015 	stw	r2,0(r3)
    return -1;
 201d880:	00bfffc4 	movi	r2,-1
 201d884:	00000106 	br	201d88c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 201d888:	e0bff917 	ldw	r2,-28(fp)
}
 201d88c:	e037883a 	mov	sp,fp
 201d890:	dfc00117 	ldw	ra,4(sp)
 201d894:	df000017 	ldw	fp,0(sp)
 201d898:	dec00204 	addi	sp,sp,8
 201d89c:	f800283a 	ret

0201d8a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 201d8a0:	defffa04 	addi	sp,sp,-24
 201d8a4:	df000515 	stw	fp,20(sp)
 201d8a8:	df000504 	addi	fp,sp,20
 201d8ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201d8b0:	0005303a 	rdctl	r2,status
 201d8b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201d8b8:	e0fffc17 	ldw	r3,-16(fp)
 201d8bc:	00bfff84 	movi	r2,-2
 201d8c0:	1884703a 	and	r2,r3,r2
 201d8c4:	1001703a 	wrctl	status,r2
  
  return context;
 201d8c8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 201d8cc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 201d8d0:	e0bfff17 	ldw	r2,-4(fp)
 201d8d4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 201d8d8:	e0bffd17 	ldw	r2,-12(fp)
 201d8dc:	10800017 	ldw	r2,0(r2)
 201d8e0:	e0fffd17 	ldw	r3,-12(fp)
 201d8e4:	18c00117 	ldw	r3,4(r3)
 201d8e8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 201d8ec:	e0bffd17 	ldw	r2,-12(fp)
 201d8f0:	10800117 	ldw	r2,4(r2)
 201d8f4:	e0fffd17 	ldw	r3,-12(fp)
 201d8f8:	18c00017 	ldw	r3,0(r3)
 201d8fc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201d900:	e0bffd17 	ldw	r2,-12(fp)
 201d904:	e0fffd17 	ldw	r3,-12(fp)
 201d908:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 201d90c:	e0bffd17 	ldw	r2,-12(fp)
 201d910:	e0fffd17 	ldw	r3,-12(fp)
 201d914:	10c00015 	stw	r3,0(r2)
 201d918:	e0bffb17 	ldw	r2,-20(fp)
 201d91c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201d920:	e0bffe17 	ldw	r2,-8(fp)
 201d924:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201d928:	0001883a 	nop
 201d92c:	e037883a 	mov	sp,fp
 201d930:	df000017 	ldw	fp,0(sp)
 201d934:	dec00104 	addi	sp,sp,4
 201d938:	f800283a 	ret

0201d93c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201d93c:	defffb04 	addi	sp,sp,-20
 201d940:	dfc00415 	stw	ra,16(sp)
 201d944:	df000315 	stw	fp,12(sp)
 201d948:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201d94c:	d0a02d17 	ldw	r2,-32588(gp)
 201d950:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201d954:	d0a74d17 	ldw	r2,-25292(gp)
 201d958:	10800044 	addi	r2,r2,1
 201d95c:	d0a74d15 	stw	r2,-25292(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201d960:	00002e06 	br	201da1c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 201d964:	e0bffd17 	ldw	r2,-12(fp)
 201d968:	10800017 	ldw	r2,0(r2)
 201d96c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 201d970:	e0bffd17 	ldw	r2,-12(fp)
 201d974:	10800403 	ldbu	r2,16(r2)
 201d978:	10803fcc 	andi	r2,r2,255
 201d97c:	10000426 	beq	r2,zero,201d990 <alt_tick+0x54>
 201d980:	d0a74d17 	ldw	r2,-25292(gp)
 201d984:	1000021e 	bne	r2,zero,201d990 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 201d988:	e0bffd17 	ldw	r2,-12(fp)
 201d98c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 201d990:	e0bffd17 	ldw	r2,-12(fp)
 201d994:	10800217 	ldw	r2,8(r2)
 201d998:	d0e74d17 	ldw	r3,-25292(gp)
 201d99c:	18801d36 	bltu	r3,r2,201da14 <alt_tick+0xd8>
 201d9a0:	e0bffd17 	ldw	r2,-12(fp)
 201d9a4:	10800403 	ldbu	r2,16(r2)
 201d9a8:	10803fcc 	andi	r2,r2,255
 201d9ac:	1000191e 	bne	r2,zero,201da14 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 201d9b0:	e0bffd17 	ldw	r2,-12(fp)
 201d9b4:	10800317 	ldw	r2,12(r2)
 201d9b8:	e0fffd17 	ldw	r3,-12(fp)
 201d9bc:	18c00517 	ldw	r3,20(r3)
 201d9c0:	1809883a 	mov	r4,r3
 201d9c4:	103ee83a 	callr	r2
 201d9c8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 201d9cc:	e0bfff17 	ldw	r2,-4(fp)
 201d9d0:	1000031e 	bne	r2,zero,201d9e0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 201d9d4:	e13ffd17 	ldw	r4,-12(fp)
 201d9d8:	201d8a00 	call	201d8a0 <alt_alarm_stop>
 201d9dc:	00000d06 	br	201da14 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 201d9e0:	e0bffd17 	ldw	r2,-12(fp)
 201d9e4:	10c00217 	ldw	r3,8(r2)
 201d9e8:	e0bfff17 	ldw	r2,-4(fp)
 201d9ec:	1887883a 	add	r3,r3,r2
 201d9f0:	e0bffd17 	ldw	r2,-12(fp)
 201d9f4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 201d9f8:	e0bffd17 	ldw	r2,-12(fp)
 201d9fc:	10c00217 	ldw	r3,8(r2)
 201da00:	d0a74d17 	ldw	r2,-25292(gp)
 201da04:	1880032e 	bgeu	r3,r2,201da14 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 201da08:	e0bffd17 	ldw	r2,-12(fp)
 201da0c:	00c00044 	movi	r3,1
 201da10:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 201da14:	e0bffe17 	ldw	r2,-8(fp)
 201da18:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201da1c:	e0fffd17 	ldw	r3,-12(fp)
 201da20:	d0a02d04 	addi	r2,gp,-32588
 201da24:	18bfcf1e 	bne	r3,r2,201d964 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 201da28:	2014a400 	call	2014a40 <OSTimeTick>
}
 201da2c:	0001883a 	nop
 201da30:	e037883a 	mov	sp,fp
 201da34:	dfc00117 	ldw	ra,4(sp)
 201da38:	df000017 	ldw	fp,0(sp)
 201da3c:	dec00204 	addi	sp,sp,8
 201da40:	f800283a 	ret

0201da44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 201da44:	deffff04 	addi	sp,sp,-4
 201da48:	df000015 	stw	fp,0(sp)
 201da4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201da50:	000170fa 	wrctl	ienable,zero
}
 201da54:	0001883a 	nop
 201da58:	e037883a 	mov	sp,fp
 201da5c:	df000017 	ldw	fp,0(sp)
 201da60:	dec00104 	addi	sp,sp,4
 201da64:	f800283a 	ret

0201da68 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 201da68:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 201da6c:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 201da70:	d1274617 	ldw	r4,-25320(gp)

      stw ra,  0(sp)
 201da74:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 201da78:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 201da7c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 201da80:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 201da84:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 201da88:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 201da8c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 201da90:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 201da94:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 201da98:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 201da9c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 201daa0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201daa4:	201dcdc0 	call	201dcdc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 201daa8:	d1274117 	ldw	r4,-25340(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 201daac:	d1673907 	ldb	r5,-25372(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 201dab0:	d1274615 	stw	r4,-25320(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 201dab4:	d1673945 	stb	r5,-25371(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 201dab8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 201dabc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 201dac0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 201dac4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 201dac8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 201dacc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 201dad0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 201dad4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 201dad8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 201dadc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 201dae0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 201dae4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 201dae8:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 201daec:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 201daf0:	f800283a 	ret

0201daf4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 201daf4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 201daf8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 201dafc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 201db00:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201db04:	201dcdc0 	call	201dcdc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 201db08:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 201db0c:	d4a73745 	stb	r18,-25379(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 201db10:	003fe506 	br	201daa8 <OSCtxSw+0x40>

0201db14 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 201db14:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 201db18:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 201db1c:	10800054 	ori	r2,r2,1
      wrctl status, r2
 201db20:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 201db24:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 201db28:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 201db2c:	dec00204 	addi	sp,sp,8

      callr r2
 201db30:	103ee83a 	callr	r2

      nop
 201db34:	0001883a 	nop

0201db38 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 201db38:	defff704 	addi	sp,sp,-36
 201db3c:	dfc00815 	stw	ra,32(sp)
 201db40:	df000715 	stw	fp,28(sp)
 201db44:	df000704 	addi	fp,sp,28
 201db48:	e13ffc15 	stw	r4,-16(fp)
 201db4c:	e17ffd15 	stw	r5,-12(fp)
 201db50:	e1bffe15 	stw	r6,-8(fp)
 201db54:	3805883a 	mov	r2,r7
 201db58:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 201db5c:	e0fffe17 	ldw	r3,-8(fp)
 201db60:	00bfff04 	movi	r2,-4
 201db64:	1884703a 	and	r2,r3,r2
 201db68:	10bef704 	addi	r2,r2,-1060
 201db6c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 201db70:	01810904 	movi	r6,1060
 201db74:	000b883a 	mov	r5,zero
 201db78:	e13ff917 	ldw	r4,-28(fp)
 201db7c:	2004c4c0 	call	2004c4c <memset>
 201db80:	e0bff917 	ldw	r2,-28(fp)
 201db84:	10c0bb04 	addi	r3,r2,748
 201db88:	e0bff917 	ldw	r2,-28(fp)
 201db8c:	10c00115 	stw	r3,4(r2)
 201db90:	e0bff917 	ldw	r2,-28(fp)
 201db94:	10c0d504 	addi	r3,r2,852
 201db98:	e0bff917 	ldw	r2,-28(fp)
 201db9c:	10c00215 	stw	r3,8(r2)
 201dba0:	e0bff917 	ldw	r2,-28(fp)
 201dba4:	10c0ef04 	addi	r3,r2,956
 201dba8:	e0bff917 	ldw	r2,-28(fp)
 201dbac:	10c00315 	stw	r3,12(r2)
 201dbb0:	e0fff917 	ldw	r3,-28(fp)
 201dbb4:	008080b4 	movhi	r2,514
 201dbb8:	10bb6104 	addi	r2,r2,-4732
 201dbbc:	18800d15 	stw	r2,52(r3)
 201dbc0:	e0bff917 	ldw	r2,-28(fp)
 201dbc4:	00c00044 	movi	r3,1
 201dbc8:	10c02915 	stw	r3,164(r2)
 201dbcc:	10002a15 	stw	zero,168(r2)
 201dbd0:	e0bff917 	ldw	r2,-28(fp)
 201dbd4:	00ccc384 	movi	r3,13070
 201dbd8:	10c02b0d 	sth	r3,172(r2)
 201dbdc:	e0bff917 	ldw	r2,-28(fp)
 201dbe0:	00eaf344 	movi	r3,-21555
 201dbe4:	10c02b8d 	sth	r3,174(r2)
 201dbe8:	e0bff917 	ldw	r2,-28(fp)
 201dbec:	00c48d04 	movi	r3,4660
 201dbf0:	10c02c0d 	sth	r3,176(r2)
 201dbf4:	e0bff917 	ldw	r2,-28(fp)
 201dbf8:	00f99b44 	movi	r3,-6547
 201dbfc:	10c02c8d 	sth	r3,178(r2)
 201dc00:	e0bff917 	ldw	r2,-28(fp)
 201dc04:	00f7bb04 	movi	r3,-8468
 201dc08:	10c02d0d 	sth	r3,180(r2)
 201dc0c:	e0bff917 	ldw	r2,-28(fp)
 201dc10:	00c00144 	movi	r3,5
 201dc14:	10c02d8d 	sth	r3,182(r2)
 201dc18:	e0bff917 	ldw	r2,-28(fp)
 201dc1c:	00c002c4 	movi	r3,11
 201dc20:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 201dc24:	e0bff917 	ldw	r2,-28(fp)
 201dc28:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 201dc2c:	e0bffa17 	ldw	r2,-24(fp)
 201dc30:	10bff304 	addi	r2,r2,-52
 201dc34:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 201dc38:	e0bffb17 	ldw	r2,-20(fp)
 201dc3c:	10800c04 	addi	r2,r2,48
 201dc40:	e0fffc17 	ldw	r3,-16(fp)
 201dc44:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 201dc48:	e0bffb17 	ldw	r2,-20(fp)
 201dc4c:	10800b04 	addi	r2,r2,44
 201dc50:	e0fffd17 	ldw	r3,-12(fp)
 201dc54:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 201dc58:	e0bffb17 	ldw	r2,-20(fp)
 201dc5c:	10800a04 	addi	r2,r2,40
 201dc60:	e0fff917 	ldw	r3,-28(fp)
 201dc64:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 201dc68:	008080b4 	movhi	r2,514
 201dc6c:	10b6c504 	addi	r2,r2,-9452
 201dc70:	10c00104 	addi	r3,r2,4
 201dc74:	e0bffb17 	ldw	r2,-20(fp)
 201dc78:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 201dc7c:	e0bffb17 	ldw	r2,-20(fp)
}
 201dc80:	e037883a 	mov	sp,fp
 201dc84:	dfc00117 	ldw	ra,4(sp)
 201dc88:	df000017 	ldw	fp,0(sp)
 201dc8c:	dec00204 	addi	sp,sp,8
 201dc90:	f800283a 	ret

0201dc94 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 201dc94:	defffe04 	addi	sp,sp,-8
 201dc98:	df000115 	stw	fp,4(sp)
 201dc9c:	df000104 	addi	fp,sp,4
 201dca0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 201dca4:	0001883a 	nop
 201dca8:	e037883a 	mov	sp,fp
 201dcac:	df000017 	ldw	fp,0(sp)
 201dcb0:	dec00104 	addi	sp,sp,4
 201dcb4:	f800283a 	ret

0201dcb8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 201dcb8:	defffe04 	addi	sp,sp,-8
 201dcbc:	df000115 	stw	fp,4(sp)
 201dcc0:	df000104 	addi	fp,sp,4
 201dcc4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 201dcc8:	0001883a 	nop
 201dccc:	e037883a 	mov	sp,fp
 201dcd0:	df000017 	ldw	fp,0(sp)
 201dcd4:	dec00104 	addi	sp,sp,4
 201dcd8:	f800283a 	ret

0201dcdc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 201dcdc:	deffff04 	addi	sp,sp,-4
 201dce0:	df000015 	stw	fp,0(sp)
 201dce4:	d839883a 	mov	fp,sp
}
 201dce8:	0001883a 	nop
 201dcec:	e037883a 	mov	sp,fp
 201dcf0:	df000017 	ldw	fp,0(sp)
 201dcf4:	dec00104 	addi	sp,sp,4
 201dcf8:	f800283a 	ret

0201dcfc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 201dcfc:	deffff04 	addi	sp,sp,-4
 201dd00:	df000015 	stw	fp,0(sp)
 201dd04:	d839883a 	mov	fp,sp
}
 201dd08:	0001883a 	nop
 201dd0c:	e037883a 	mov	sp,fp
 201dd10:	df000017 	ldw	fp,0(sp)
 201dd14:	dec00104 	addi	sp,sp,4
 201dd18:	f800283a 	ret

0201dd1c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 201dd1c:	deffff04 	addi	sp,sp,-4
 201dd20:	df000015 	stw	fp,0(sp)
 201dd24:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 201dd28:	0001883a 	nop
 201dd2c:	e037883a 	mov	sp,fp
 201dd30:	df000017 	ldw	fp,0(sp)
 201dd34:	dec00104 	addi	sp,sp,4
 201dd38:	f800283a 	ret

0201dd3c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 201dd3c:	deffff04 	addi	sp,sp,-4
 201dd40:	df000015 	stw	fp,0(sp)
 201dd44:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 201dd48:	0001883a 	nop
 201dd4c:	e037883a 	mov	sp,fp
 201dd50:	df000017 	ldw	fp,0(sp)
 201dd54:	dec00104 	addi	sp,sp,4
 201dd58:	f800283a 	ret

0201dd5c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 201dd5c:	deffff04 	addi	sp,sp,-4
 201dd60:	df000015 	stw	fp,0(sp)
 201dd64:	d839883a 	mov	fp,sp
}
 201dd68:	0001883a 	nop
 201dd6c:	e037883a 	mov	sp,fp
 201dd70:	df000017 	ldw	fp,0(sp)
 201dd74:	dec00104 	addi	sp,sp,4
 201dd78:	f800283a 	ret

0201dd7c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 201dd7c:	deffff04 	addi	sp,sp,-4
 201dd80:	df000015 	stw	fp,0(sp)
 201dd84:	d839883a 	mov	fp,sp
}
 201dd88:	0001883a 	nop
 201dd8c:	e037883a 	mov	sp,fp
 201dd90:	df000017 	ldw	fp,0(sp)
 201dd94:	dec00104 	addi	sp,sp,4
 201dd98:	f800283a 	ret

0201dd9c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 201dd9c:	defffe04 	addi	sp,sp,-8
 201dda0:	df000115 	stw	fp,4(sp)
 201dda4:	df000104 	addi	fp,sp,4
 201dda8:	e13fff15 	stw	r4,-4(fp)
}
 201ddac:	0001883a 	nop
 201ddb0:	e037883a 	mov	sp,fp
 201ddb4:	df000017 	ldw	fp,0(sp)
 201ddb8:	dec00104 	addi	sp,sp,4
 201ddbc:	f800283a 	ret

0201ddc0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201ddc0:	defffa04 	addi	sp,sp,-24
 201ddc4:	dfc00515 	stw	ra,20(sp)
 201ddc8:	df000415 	stw	fp,16(sp)
 201ddcc:	df000404 	addi	fp,sp,16
 201ddd0:	e13ffe15 	stw	r4,-8(fp)
 201ddd4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201ddd8:	e0bfff17 	ldw	r2,-4(fp)
 201dddc:	10800017 	ldw	r2,0(r2)
 201dde0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 201dde4:	e13ffe17 	ldw	r4,-8(fp)
 201dde8:	200502c0 	call	200502c <strlen>
 201ddec:	10800044 	addi	r2,r2,1
 201ddf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201ddf4:	00000d06 	br	201de2c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201ddf8:	e0bffc17 	ldw	r2,-16(fp)
 201ddfc:	10800217 	ldw	r2,8(r2)
 201de00:	e0fffd17 	ldw	r3,-12(fp)
 201de04:	180d883a 	mov	r6,r3
 201de08:	e17ffe17 	ldw	r5,-8(fp)
 201de0c:	1009883a 	mov	r4,r2
 201de10:	201e1e40 	call	201e1e4 <memcmp>
 201de14:	1000021e 	bne	r2,zero,201de20 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201de18:	e0bffc17 	ldw	r2,-16(fp)
 201de1c:	00000706 	br	201de3c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201de20:	e0bffc17 	ldw	r2,-16(fp)
 201de24:	10800017 	ldw	r2,0(r2)
 201de28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201de2c:	e0fffc17 	ldw	r3,-16(fp)
 201de30:	e0bfff17 	ldw	r2,-4(fp)
 201de34:	18bff01e 	bne	r3,r2,201ddf8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201de38:	0005883a 	mov	r2,zero
}
 201de3c:	e037883a 	mov	sp,fp
 201de40:	dfc00117 	ldw	ra,4(sp)
 201de44:	df000017 	ldw	fp,0(sp)
 201de48:	dec00204 	addi	sp,sp,8
 201de4c:	f800283a 	ret

0201de50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201de50:	defffb04 	addi	sp,sp,-20
 201de54:	dfc00415 	stw	ra,16(sp)
 201de58:	df000315 	stw	fp,12(sp)
 201de5c:	df000304 	addi	fp,sp,12
 201de60:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201de64:	d0a00617 	ldw	r2,-32744(gp)
 201de68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201de6c:	00003106 	br	201df34 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 201de70:	e0bffd17 	ldw	r2,-12(fp)
 201de74:	10800217 	ldw	r2,8(r2)
 201de78:	1009883a 	mov	r4,r2
 201de7c:	200502c0 	call	200502c <strlen>
 201de80:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 201de84:	e0bffd17 	ldw	r2,-12(fp)
 201de88:	10c00217 	ldw	r3,8(r2)
 201de8c:	e0bffe17 	ldw	r2,-8(fp)
 201de90:	10bfffc4 	addi	r2,r2,-1
 201de94:	1885883a 	add	r2,r3,r2
 201de98:	10800003 	ldbu	r2,0(r2)
 201de9c:	10803fcc 	andi	r2,r2,255
 201dea0:	1080201c 	xori	r2,r2,128
 201dea4:	10bfe004 	addi	r2,r2,-128
 201dea8:	10800bd8 	cmpnei	r2,r2,47
 201deac:	1000031e 	bne	r2,zero,201debc <alt_find_file+0x6c>
    {
      len -= 1;
 201deb0:	e0bffe17 	ldw	r2,-8(fp)
 201deb4:	10bfffc4 	addi	r2,r2,-1
 201deb8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201debc:	e0bffe17 	ldw	r2,-8(fp)
 201dec0:	e0ffff17 	ldw	r3,-4(fp)
 201dec4:	1885883a 	add	r2,r3,r2
 201dec8:	10800003 	ldbu	r2,0(r2)
 201decc:	10803fcc 	andi	r2,r2,255
 201ded0:	1080201c 	xori	r2,r2,128
 201ded4:	10bfe004 	addi	r2,r2,-128
 201ded8:	10800be0 	cmpeqi	r2,r2,47
 201dedc:	1000081e 	bne	r2,zero,201df00 <alt_find_file+0xb0>
 201dee0:	e0bffe17 	ldw	r2,-8(fp)
 201dee4:	e0ffff17 	ldw	r3,-4(fp)
 201dee8:	1885883a 	add	r2,r3,r2
 201deec:	10800003 	ldbu	r2,0(r2)
 201def0:	10803fcc 	andi	r2,r2,255
 201def4:	1080201c 	xori	r2,r2,128
 201def8:	10bfe004 	addi	r2,r2,-128
 201defc:	10000a1e 	bne	r2,zero,201df28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 201df00:	e0bffd17 	ldw	r2,-12(fp)
 201df04:	10800217 	ldw	r2,8(r2)
 201df08:	e0fffe17 	ldw	r3,-8(fp)
 201df0c:	180d883a 	mov	r6,r3
 201df10:	e17fff17 	ldw	r5,-4(fp)
 201df14:	1009883a 	mov	r4,r2
 201df18:	201e1e40 	call	201e1e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201df1c:	1000021e 	bne	r2,zero,201df28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201df20:	e0bffd17 	ldw	r2,-12(fp)
 201df24:	00000706 	br	201df44 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 201df28:	e0bffd17 	ldw	r2,-12(fp)
 201df2c:	10800017 	ldw	r2,0(r2)
 201df30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201df34:	e0fffd17 	ldw	r3,-12(fp)
 201df38:	d0a00604 	addi	r2,gp,-32744
 201df3c:	18bfcc1e 	bne	r3,r2,201de70 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 201df40:	0005883a 	mov	r2,zero
}
 201df44:	e037883a 	mov	sp,fp
 201df48:	dfc00117 	ldw	ra,4(sp)
 201df4c:	df000017 	ldw	fp,0(sp)
 201df50:	dec00204 	addi	sp,sp,8
 201df54:	f800283a 	ret

0201df58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 201df58:	defff904 	addi	sp,sp,-28
 201df5c:	dfc00615 	stw	ra,24(sp)
 201df60:	df000515 	stw	fp,20(sp)
 201df64:	df000504 	addi	fp,sp,20
 201df68:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 201df6c:	00bffa04 	movi	r2,-24
 201df70:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 201df74:	d0a72f17 	ldw	r2,-25412(gp)
 201df78:	e0bffd15 	stw	r2,-12(fp)
 201df7c:	e03ffe0d 	sth	zero,-8(fp)
 201df80:	e0bffe0b 	ldhu	r2,-8(fp)
 201df84:	e0fffe84 	addi	r3,fp,-6
 201df88:	180d883a 	mov	r6,r3
 201df8c:	100b883a 	mov	r5,r2
 201df90:	e13ffd17 	ldw	r4,-12(fp)
 201df94:	2019d4c0 	call	2019d4c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201df98:	e03ffb15 	stw	zero,-20(fp)
 201df9c:	00001906 	br	201e004 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 201dfa0:	008080b4 	movhi	r2,514
 201dfa4:	10bda104 	addi	r2,r2,-2428
 201dfa8:	e0fffb17 	ldw	r3,-20(fp)
 201dfac:	18c00324 	muli	r3,r3,12
 201dfb0:	10c5883a 	add	r2,r2,r3
 201dfb4:	10800017 	ldw	r2,0(r2)
 201dfb8:	10000f1e 	bne	r2,zero,201dff8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 201dfbc:	008080b4 	movhi	r2,514
 201dfc0:	10bda104 	addi	r2,r2,-2428
 201dfc4:	e0fffb17 	ldw	r3,-20(fp)
 201dfc8:	18c00324 	muli	r3,r3,12
 201dfcc:	10c5883a 	add	r2,r2,r3
 201dfd0:	e0ffff17 	ldw	r3,-4(fp)
 201dfd4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 201dfd8:	d0e00a17 	ldw	r3,-32728(gp)
 201dfdc:	e0bffb17 	ldw	r2,-20(fp)
 201dfe0:	1880020e 	bge	r3,r2,201dfec <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 201dfe4:	e0bffb17 	ldw	r2,-20(fp)
 201dfe8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 201dfec:	e0bffb17 	ldw	r2,-20(fp)
 201dff0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 201dff4:	00000606 	br	201e010 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201dff8:	e0bffb17 	ldw	r2,-20(fp)
 201dffc:	10800044 	addi	r2,r2,1
 201e000:	e0bffb15 	stw	r2,-20(fp)
 201e004:	e0bffb17 	ldw	r2,-20(fp)
 201e008:	10800810 	cmplti	r2,r2,32
 201e00c:	103fe41e 	bne	r2,zero,201dfa0 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 201e010:	d0a72f17 	ldw	r2,-25412(gp)
 201e014:	1009883a 	mov	r4,r2
 201e018:	201a0c40 	call	201a0c4 <OSSemPost>

  return rc;
 201e01c:	e0bffc17 	ldw	r2,-16(fp)
}
 201e020:	e037883a 	mov	sp,fp
 201e024:	dfc00117 	ldw	ra,4(sp)
 201e028:	df000017 	ldw	fp,0(sp)
 201e02c:	dec00204 	addi	sp,sp,8
 201e030:	f800283a 	ret

0201e034 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 201e034:	defffb04 	addi	sp,sp,-20
 201e038:	df000415 	stw	fp,16(sp)
 201e03c:	df000404 	addi	fp,sp,16
 201e040:	e13ffe15 	stw	r4,-8(fp)
 201e044:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 201e048:	e0bfff17 	ldw	r2,-4(fp)
 201e04c:	10840070 	cmpltui	r2,r2,4097
 201e050:	1000021e 	bne	r2,zero,201e05c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 201e054:	00840004 	movi	r2,4096
 201e058:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 201e05c:	e0fffe17 	ldw	r3,-8(fp)
 201e060:	e0bfff17 	ldw	r2,-4(fp)
 201e064:	1885883a 	add	r2,r3,r2
 201e068:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 201e06c:	e0bffe17 	ldw	r2,-8(fp)
 201e070:	e0bffc15 	stw	r2,-16(fp)
 201e074:	00000506 	br	201e08c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 201e078:	e0bffc17 	ldw	r2,-16(fp)
 201e07c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 201e080:	e0bffc17 	ldw	r2,-16(fp)
 201e084:	10800804 	addi	r2,r2,32
 201e088:	e0bffc15 	stw	r2,-16(fp)
 201e08c:	e0fffc17 	ldw	r3,-16(fp)
 201e090:	e0bffd17 	ldw	r2,-12(fp)
 201e094:	18bff836 	bltu	r3,r2,201e078 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 201e098:	e0bffe17 	ldw	r2,-8(fp)
 201e09c:	108007cc 	andi	r2,r2,31
 201e0a0:	10000226 	beq	r2,zero,201e0ac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 201e0a4:	e0bffc17 	ldw	r2,-16(fp)
 201e0a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 201e0ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 201e0b0:	0001883a 	nop
 201e0b4:	e037883a 	mov	sp,fp
 201e0b8:	df000017 	ldw	fp,0(sp)
 201e0bc:	dec00104 	addi	sp,sp,4
 201e0c0:	f800283a 	ret

0201e0c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 201e0c4:	defffe04 	addi	sp,sp,-8
 201e0c8:	df000115 	stw	fp,4(sp)
 201e0cc:	df000104 	addi	fp,sp,4
 201e0d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 201e0d4:	e0bfff17 	ldw	r2,-4(fp)
 201e0d8:	10bffe84 	addi	r2,r2,-6
 201e0dc:	10c00428 	cmpgeui	r3,r2,16
 201e0e0:	18001a1e 	bne	r3,zero,201e14c <alt_exception_cause_generated_bad_addr+0x88>
 201e0e4:	100690ba 	slli	r3,r2,2
 201e0e8:	008080b4 	movhi	r2,514
 201e0ec:	10b83f04 	addi	r2,r2,-7940
 201e0f0:	1885883a 	add	r2,r3,r2
 201e0f4:	10800017 	ldw	r2,0(r2)
 201e0f8:	1000683a 	jmp	r2
 201e0fc:	0201e13c 	xorhi	r8,zero,1924
 201e100:	0201e13c 	xorhi	r8,zero,1924
 201e104:	0201e14c 	andi	r8,zero,1925
 201e108:	0201e14c 	andi	r8,zero,1925
 201e10c:	0201e14c 	andi	r8,zero,1925
 201e110:	0201e13c 	xorhi	r8,zero,1924
 201e114:	0201e144 	movi	r8,1925
 201e118:	0201e14c 	andi	r8,zero,1925
 201e11c:	0201e13c 	xorhi	r8,zero,1924
 201e120:	0201e13c 	xorhi	r8,zero,1924
 201e124:	0201e14c 	andi	r8,zero,1925
 201e128:	0201e13c 	xorhi	r8,zero,1924
 201e12c:	0201e144 	movi	r8,1925
 201e130:	0201e14c 	andi	r8,zero,1925
 201e134:	0201e14c 	andi	r8,zero,1925
 201e138:	0201e13c 	xorhi	r8,zero,1924
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 201e13c:	00800044 	movi	r2,1
 201e140:	00000306 	br	201e150 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201e144:	0005883a 	mov	r2,zero
 201e148:	00000106 	br	201e150 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 201e14c:	0005883a 	mov	r2,zero
  }
}
 201e150:	e037883a 	mov	sp,fp
 201e154:	df000017 	ldw	fp,0(sp)
 201e158:	dec00104 	addi	sp,sp,4
 201e15c:	f800283a 	ret

0201e160 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
 201e160:	defffd04 	addi	sp,sp,-12
 201e164:	dfc00215 	stw	ra,8(sp)
 201e168:	df000115 	stw	fp,4(sp)
 201e16c:	df000104 	addi	fp,sp,4
 201e170:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 201e174:	000f883a 	mov	r7,zero
 201e178:	000d883a 	mov	r6,zero
 201e17c:	e17fff17 	ldw	r5,-4(fp)
 201e180:	0009883a 	mov	r4,zero
 201e184:	201e3180 	call	201e318 <__register_exitproc>
}
 201e188:	e037883a 	mov	sp,fp
 201e18c:	dfc00117 	ldw	ra,4(sp)
 201e190:	df000017 	ldw	fp,0(sp)
 201e194:	dec00204 	addi	sp,sp,8
 201e198:	f800283a 	ret

0201e19c <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
 201e19c:	defffd04 	addi	sp,sp,-12
 201e1a0:	dfc00215 	stw	ra,8(sp)
 201e1a4:	df000115 	stw	fp,4(sp)
 201e1a8:	df000104 	addi	fp,sp,4
 201e1ac:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 201e1b0:	000b883a 	mov	r5,zero
 201e1b4:	e13fff17 	ldw	r4,-4(fp)
 201e1b8:	201e4880 	call	201e488 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
 201e1bc:	d0a00117 	ldw	r2,-32764(gp)
 201e1c0:	10800f17 	ldw	r2,60(r2)
 201e1c4:	10000526 	beq	r2,zero,201e1dc <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 201e1c8:	d0a00117 	ldw	r2,-32764(gp)
 201e1cc:	10800f17 	ldw	r2,60(r2)
 201e1d0:	d0e00117 	ldw	r3,-32764(gp)
 201e1d4:	1809883a 	mov	r4,r3
 201e1d8:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
 201e1dc:	e13fff17 	ldw	r4,-4(fp)
 201e1e0:	201e6740 	call	201e674 <_exit>

0201e1e4 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
 201e1e4:	defff804 	addi	sp,sp,-32
 201e1e8:	df000715 	stw	fp,28(sp)
 201e1ec:	df000704 	addi	fp,sp,28
 201e1f0:	e13ffd15 	stw	r4,-12(fp)
 201e1f4:	e17ffe15 	stw	r5,-8(fp)
 201e1f8:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 201e1fc:	e0bffd17 	ldw	r2,-12(fp)
 201e200:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
 201e204:	e0bffe17 	ldw	r2,-8(fp)
 201e208:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 201e20c:	e0bfff17 	ldw	r2,-4(fp)
 201e210:	10800130 	cmpltui	r2,r2,4
 201e214:	1000371e 	bne	r2,zero,201e2f4 <memcmp+0x110>
 201e218:	e0fff917 	ldw	r3,-28(fp)
 201e21c:	e0bffa17 	ldw	r2,-24(fp)
 201e220:	1884b03a 	or	r2,r3,r2
 201e224:	108000cc 	andi	r2,r2,3
 201e228:	1000321e 	bne	r2,zero,201e2f4 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 201e22c:	e0bff917 	ldw	r2,-28(fp)
 201e230:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
 201e234:	e0bffa17 	ldw	r2,-24(fp)
 201e238:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 201e23c:	00000e06 	br	201e278 <memcmp+0x94>
        {
          if (*a1 != *a2) 
 201e240:	e0bffb17 	ldw	r2,-20(fp)
 201e244:	10c00017 	ldw	r3,0(r2)
 201e248:	e0bffc17 	ldw	r2,-16(fp)
 201e24c:	10800017 	ldw	r2,0(r2)
 201e250:	18800d1e 	bne	r3,r2,201e288 <memcmp+0xa4>
   	    break;
          a1++;
 201e254:	e0bffb17 	ldw	r2,-20(fp)
 201e258:	10800104 	addi	r2,r2,4
 201e25c:	e0bffb15 	stw	r2,-20(fp)
          a2++;
 201e260:	e0bffc17 	ldw	r2,-16(fp)
 201e264:	10800104 	addi	r2,r2,4
 201e268:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 201e26c:	e0bfff17 	ldw	r2,-4(fp)
 201e270:	10bfff04 	addi	r2,r2,-4
 201e274:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
 201e278:	e0bfff17 	ldw	r2,-4(fp)
 201e27c:	10800128 	cmpgeui	r2,r2,4
 201e280:	103fef1e 	bne	r2,zero,201e240 <memcmp+0x5c>
 201e284:	00000106 	br	201e28c <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
 201e288:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 201e28c:	e0bffb17 	ldw	r2,-20(fp)
 201e290:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
 201e294:	e0bffc17 	ldw	r2,-16(fp)
 201e298:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
 201e29c:	00001506 	br	201e2f4 <memcmp+0x110>
    {
      if (*s1 != *s2)
 201e2a0:	e0bff917 	ldw	r2,-28(fp)
 201e2a4:	10c00003 	ldbu	r3,0(r2)
 201e2a8:	e0bffa17 	ldw	r2,-24(fp)
 201e2ac:	10800003 	ldbu	r2,0(r2)
 201e2b0:	18c03fcc 	andi	r3,r3,255
 201e2b4:	10803fcc 	andi	r2,r2,255
 201e2b8:	18800826 	beq	r3,r2,201e2dc <memcmp+0xf8>
	return *s1 - *s2;
 201e2bc:	e0bff917 	ldw	r2,-28(fp)
 201e2c0:	10800003 	ldbu	r2,0(r2)
 201e2c4:	10c03fcc 	andi	r3,r2,255
 201e2c8:	e0bffa17 	ldw	r2,-24(fp)
 201e2cc:	10800003 	ldbu	r2,0(r2)
 201e2d0:	10803fcc 	andi	r2,r2,255
 201e2d4:	1885c83a 	sub	r2,r3,r2
 201e2d8:	00000b06 	br	201e308 <memcmp+0x124>
      s1++;
 201e2dc:	e0bff917 	ldw	r2,-28(fp)
 201e2e0:	10800044 	addi	r2,r2,1
 201e2e4:	e0bff915 	stw	r2,-28(fp)
      s2++;
 201e2e8:	e0bffa17 	ldw	r2,-24(fp)
 201e2ec:	10800044 	addi	r2,r2,1
 201e2f0:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
 201e2f4:	e0bfff17 	ldw	r2,-4(fp)
 201e2f8:	10ffffc4 	addi	r3,r2,-1
 201e2fc:	e0ffff15 	stw	r3,-4(fp)
 201e300:	103fe71e 	bne	r2,zero,201e2a0 <memcmp+0xbc>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
 201e304:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 201e308:	e037883a 	mov	sp,fp
 201e30c:	df000017 	ldw	fp,0(sp)
 201e310:	dec00104 	addi	sp,sp,4
 201e314:	f800283a 	ret

0201e318 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
 201e318:	defff804 	addi	sp,sp,-32
 201e31c:	dfc00715 	stw	ra,28(sp)
 201e320:	df000615 	stw	fp,24(sp)
 201e324:	dc000515 	stw	r16,20(sp)
 201e328:	df000604 	addi	fp,sp,24
 201e32c:	e13ffb15 	stw	r4,-20(fp)
 201e330:	e17ffc15 	stw	r5,-16(fp)
 201e334:	e1bffd15 	stw	r6,-12(fp)
 201e338:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
 201e33c:	d0a00117 	ldw	r2,-32764(gp)
 201e340:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 201e344:	8000041e 	bne	r16,zero,201e358 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 201e348:	d0a00117 	ldw	r2,-32764(gp)
 201e34c:	d0e00117 	ldw	r3,-32764(gp)
 201e350:	1c005304 	addi	r16,r3,332
 201e354:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
 201e358:	80800117 	ldw	r2,4(r16)
 201e35c:	10800810 	cmplti	r2,r2,32
 201e360:	1000131e 	bne	r2,zero,201e3b0 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
 201e364:	00800034 	movhi	r2,0
 201e368:	10800004 	addi	r2,r2,0
 201e36c:	1000021e 	bne	r2,zero,201e378 <__register_exitproc+0x60>
	return -1;
 201e370:	00bfffc4 	movi	r2,-1
 201e374:	00003e06 	br	201e470 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
 201e378:	01006404 	movi	r4,400
 201e37c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 201e380:	1021883a 	mov	r16,r2
      if (p == NULL)
 201e384:	8000021e 	bne	r16,zero,201e390 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
 201e388:	00bfffc4 	movi	r2,-1
 201e38c:	00003806 	br	201e470 <__register_exitproc+0x158>
	}
      p->_ind = 0;
 201e390:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
 201e394:	d0a00117 	ldw	r2,-32764(gp)
 201e398:	10805217 	ldw	r2,328(r2)
 201e39c:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
 201e3a0:	d0a00117 	ldw	r2,-32764(gp)
 201e3a4:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
 201e3a8:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
 201e3ac:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 201e3b0:	e0bffb17 	ldw	r2,-20(fp)
 201e3b4:	10002426 	beq	r2,zero,201e448 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
 201e3b8:	80802204 	addi	r2,r16,136
 201e3bc:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 201e3c0:	80800117 	ldw	r2,4(r16)
 201e3c4:	e0fffa17 	ldw	r3,-24(fp)
 201e3c8:	1085883a 	add	r2,r2,r2
 201e3cc:	1085883a 	add	r2,r2,r2
 201e3d0:	1885883a 	add	r2,r3,r2
 201e3d4:	e0fffd17 	ldw	r3,-12(fp)
 201e3d8:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 201e3dc:	e0bffa17 	ldw	r2,-24(fp)
 201e3e0:	10804017 	ldw	r2,256(r2)
 201e3e4:	80c00117 	ldw	r3,4(r16)
 201e3e8:	01000044 	movi	r4,1
 201e3ec:	20c6983a 	sll	r3,r4,r3
 201e3f0:	10c6b03a 	or	r3,r2,r3
 201e3f4:	e0bffa17 	ldw	r2,-24(fp)
 201e3f8:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 201e3fc:	80800117 	ldw	r2,4(r16)
 201e400:	e0fffa17 	ldw	r3,-24(fp)
 201e404:	10800804 	addi	r2,r2,32
 201e408:	1085883a 	add	r2,r2,r2
 201e40c:	1085883a 	add	r2,r2,r2
 201e410:	1885883a 	add	r2,r3,r2
 201e414:	e0fffe17 	ldw	r3,-8(fp)
 201e418:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 201e41c:	e0bffb17 	ldw	r2,-20(fp)
 201e420:	10800098 	cmpnei	r2,r2,2
 201e424:	1000081e 	bne	r2,zero,201e448 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
 201e428:	e0bffa17 	ldw	r2,-24(fp)
 201e42c:	10804117 	ldw	r2,260(r2)
 201e430:	80c00117 	ldw	r3,4(r16)
 201e434:	01000044 	movi	r4,1
 201e438:	20c6983a 	sll	r3,r4,r3
 201e43c:	10c6b03a 	or	r3,r2,r3
 201e440:	e0bffa17 	ldw	r2,-24(fp)
 201e444:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 201e448:	80800117 	ldw	r2,4(r16)
 201e44c:	10c00044 	addi	r3,r2,1
 201e450:	80c00115 	stw	r3,4(r16)
 201e454:	10800084 	addi	r2,r2,2
 201e458:	1085883a 	add	r2,r2,r2
 201e45c:	1085883a 	add	r2,r2,r2
 201e460:	8085883a 	add	r2,r16,r2
 201e464:	e0fffc17 	ldw	r3,-16(fp)
 201e468:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
 201e46c:	0005883a 	mov	r2,zero
}
 201e470:	e6ffff04 	addi	sp,fp,-4
 201e474:	dfc00217 	ldw	ra,8(sp)
 201e478:	df000117 	ldw	fp,4(sp)
 201e47c:	dc000017 	ldw	r16,0(sp)
 201e480:	dec00304 	addi	sp,sp,12
 201e484:	f800283a 	ret

0201e488 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
 201e488:	defff504 	addi	sp,sp,-44
 201e48c:	dfc00a15 	stw	ra,40(sp)
 201e490:	df000915 	stw	fp,36(sp)
 201e494:	dc800815 	stw	r18,32(sp)
 201e498:	dc400715 	stw	r17,28(sp)
 201e49c:	dc000615 	stw	r16,24(sp)
 201e4a0:	df000904 	addi	fp,sp,36
 201e4a4:	e13ffb15 	stw	r4,-20(fp)
 201e4a8:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 201e4ac:	d0a00117 	ldw	r2,-32764(gp)
 201e4b0:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 201e4b4:	d0a00117 	ldw	r2,-32764(gp)
 201e4b8:	10805204 	addi	r2,r2,328
 201e4bc:	e0bff715 	stw	r2,-36(fp)
  while (p)
 201e4c0:	00006006 	br	201e644 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 201e4c4:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 201e4c8:	80800117 	ldw	r2,4(r16)
 201e4cc:	147fffc4 	addi	r17,r2,-1
 201e4d0:	00004a06 	br	201e5fc <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
 201e4d4:	00800044 	movi	r2,1
 201e4d8:	1444983a 	sll	r2,r2,r17
 201e4dc:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 201e4e0:	e0bffc17 	ldw	r2,-16(fp)
 201e4e4:	10000826 	beq	r2,zero,201e508 <__call_exitprocs+0x80>
 201e4e8:	90004026 	beq	r18,zero,201e5ec <__call_exitprocs+0x164>
 201e4ec:	88800804 	addi	r2,r17,32
 201e4f0:	1085883a 	add	r2,r2,r2
 201e4f4:	1085883a 	add	r2,r2,r2
 201e4f8:	9085883a 	add	r2,r18,r2
 201e4fc:	10c00017 	ldw	r3,0(r2)
 201e500:	e0bffc17 	ldw	r2,-16(fp)
 201e504:	1880391e 	bne	r3,r2,201e5ec <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 201e508:	88800084 	addi	r2,r17,2
 201e50c:	1085883a 	add	r2,r2,r2
 201e510:	1085883a 	add	r2,r2,r2
 201e514:	8085883a 	add	r2,r16,r2
 201e518:	10800017 	ldw	r2,0(r2)
 201e51c:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
 201e520:	80800117 	ldw	r2,4(r16)
 201e524:	10bfffc4 	addi	r2,r2,-1
 201e528:	1440041e 	bne	r2,r17,201e53c <__call_exitprocs+0xb4>
	    p->_ind--;
 201e52c:	80800117 	ldw	r2,4(r16)
 201e530:	10bfffc4 	addi	r2,r2,-1
 201e534:	80800115 	stw	r2,4(r16)
 201e538:	00000506 	br	201e550 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
 201e53c:	88800084 	addi	r2,r17,2
 201e540:	1085883a 	add	r2,r2,r2
 201e544:	1085883a 	add	r2,r2,r2
 201e548:	8085883a 	add	r2,r16,r2
 201e54c:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 201e550:	e0bff917 	ldw	r2,-28(fp)
 201e554:	10002726 	beq	r2,zero,201e5f4 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
 201e558:	80800117 	ldw	r2,4(r16)
 201e55c:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 201e560:	90000426 	beq	r18,zero,201e574 <__call_exitprocs+0xec>
 201e564:	90c04017 	ldw	r3,256(r18)
 201e568:	e0bff817 	ldw	r2,-32(fp)
 201e56c:	1884703a 	and	r2,r3,r2
 201e570:	1000031e 	bne	r2,zero,201e580 <__call_exitprocs+0xf8>
	    fn ();
 201e574:	e0bff917 	ldw	r2,-28(fp)
 201e578:	103ee83a 	callr	r2
 201e57c:	00001406 	br	201e5d0 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
 201e580:	90c04117 	ldw	r3,260(r18)
 201e584:	e0bff817 	ldw	r2,-32(fp)
 201e588:	1884703a 	and	r2,r3,r2
 201e58c:	1000091e 	bne	r2,zero,201e5b4 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
 201e590:	8c45883a 	add	r2,r17,r17
 201e594:	1085883a 	add	r2,r2,r2
 201e598:	9085883a 	add	r2,r18,r2
 201e59c:	10c00017 	ldw	r3,0(r2)
 201e5a0:	e0bff917 	ldw	r2,-28(fp)
 201e5a4:	180b883a 	mov	r5,r3
 201e5a8:	e13ffb17 	ldw	r4,-20(fp)
 201e5ac:	103ee83a 	callr	r2
 201e5b0:	00000706 	br	201e5d0 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
 201e5b4:	8c45883a 	add	r2,r17,r17
 201e5b8:	1085883a 	add	r2,r2,r2
 201e5bc:	9085883a 	add	r2,r18,r2
 201e5c0:	10c00017 	ldw	r3,0(r2)
 201e5c4:	e0bff917 	ldw	r2,-28(fp)
 201e5c8:	1809883a 	mov	r4,r3
 201e5cc:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 201e5d0:	80c00117 	ldw	r3,4(r16)
 201e5d4:	e0bffa17 	ldw	r2,-24(fp)
 201e5d8:	18bfb41e 	bne	r3,r2,201e4ac <__call_exitprocs+0x24>
 201e5dc:	e0bff717 	ldw	r2,-36(fp)
 201e5e0:	10800017 	ldw	r2,0(r2)
 201e5e4:	143fb11e 	bne	r2,r16,201e4ac <__call_exitprocs+0x24>
 201e5e8:	00000306 	br	201e5f8 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
 201e5ec:	0001883a 	nop
 201e5f0:	00000106 	br	201e5f8 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
 201e5f4:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 201e5f8:	8c7fffc4 	addi	r17,r17,-1
 201e5fc:	883fb50e 	bge	r17,zero,201e4d4 <__call_exitprocs+0x4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
 201e600:	00800034 	movhi	r2,0
 201e604:	10800004 	addi	r2,r2,0
 201e608:	10001026 	beq	r2,zero,201e64c <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
 201e60c:	80800117 	ldw	r2,4(r16)
 201e610:	10000a1e 	bne	r2,zero,201e63c <__call_exitprocs+0x1b4>
 201e614:	80800017 	ldw	r2,0(r16)
 201e618:	10000826 	beq	r2,zero,201e63c <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
 201e61c:	80c00017 	ldw	r3,0(r16)
 201e620:	e0bff717 	ldw	r2,-36(fp)
 201e624:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
 201e628:	8009883a 	mov	r4,r16
 201e62c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
	  p = *lastp;
 201e630:	e0bff717 	ldw	r2,-36(fp)
 201e634:	14000017 	ldw	r16,0(r2)
 201e638:	00000206 	br	201e644 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
 201e63c:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
 201e640:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
 201e644:	803f9f1e 	bne	r16,zero,201e4c4 <__call_exitprocs+0x3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 201e648:	00000106 	br	201e650 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
 201e64c:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
 201e650:	0001883a 	nop
 201e654:	e6fffd04 	addi	sp,fp,-12
 201e658:	dfc00417 	ldw	ra,16(sp)
 201e65c:	df000317 	ldw	fp,12(sp)
 201e660:	dc800217 	ldw	r18,8(sp)
 201e664:	dc400117 	ldw	r17,4(sp)
 201e668:	dc000017 	ldw	r16,0(sp)
 201e66c:	dec00504 	addi	sp,sp,20
 201e670:	f800283a 	ret

0201e674 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 201e674:	defffd04 	addi	sp,sp,-12
 201e678:	df000215 	stw	fp,8(sp)
 201e67c:	df000204 	addi	fp,sp,8
 201e680:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 201e684:	d0273745 	stb	zero,-25379(gp)
 201e688:	e0bfff17 	ldw	r2,-4(fp)
 201e68c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 201e690:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 201e694:	10000226 	beq	r2,zero,201e6a0 <_exit+0x2c>
    ALT_SIM_FAIL();
 201e698:	002af070 	cmpltui	zero,zero,43969
 201e69c:	00000106 	br	201e6a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 201e6a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 201e6a4:	003fff06 	br	201e6a4 <_exit+0x30>
